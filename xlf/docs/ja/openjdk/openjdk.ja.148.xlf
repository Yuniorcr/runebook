<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="openjdk">
    <body>
      <group id="openjdk">
        <trans-unit id="a209249a1bb001079ff30fe84944238386409855" translate="yes" xml:space="preserve">
          <source>The environment is inherited from the parent context as context methods proceed from one context to the next. Changes to the environment of one context do not directly affect those of other contexts.</source>
          <target state="translated">環境は、コンテキストメソッドがあるコンテキストから次のコンテキストへと進む際に、親コンテキストから継承されます。あるコンテキストの環境を変更しても、他のコンテキストの環境には直接影響しません。</target>
        </trans-unit>
        <trans-unit id="f9dee9225753fc6b669ebb73bdd54e1d209d99ca" translate="yes" xml:space="preserve">
          <source>The environment of the context being operated on.</source>
          <target state="translated">操作されているコンテキストの環境。</target>
        </trans-unit>
        <trans-unit id="ef8a562764f2b68aa9e4e0b27ff74e8ea33e36dd" translate="yes" xml:space="preserve">
          <source>The environment parameter is owned by the caller. The implementation will not modify the object or keep a reference to it, although it may keep a reference to a clone or copy.</source>
          <target state="translated">環境パラメータは呼び出し元が所有します。実装はオブジェクトを変更したり、クローンやコピーへの参照を保持することはありますが、オブジェクトへの参照を保持することはありません。</target>
        </trans-unit>
        <trans-unit id="73513013d840568497d96e281a5e7d4e7a8991b6" translate="yes" xml:space="preserve">
          <source>The environment variable that stores a keystore password. Alternatively, passwords may be supplied to the constructor method in a &lt;code&gt;Map&amp;lt;String, ProtectionParameter&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">キーストアのパスワードを格納する環境変数。または、パスワードを &lt;code&gt;Map&amp;lt;String, ProtectionParameter&amp;gt;&lt;/code&gt; のコンストラクターメソッドに提供することもできます。</target>
        </trans-unit>
        <trans-unit id="b61120168558233e16a6b0f8ec1f8c14f9f7256b" translate="yes" xml:space="preserve">
          <source>The eon of this &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;. The value returned is an integer multiple of 10^9.</source>
          <target state="translated">この &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; の時代。返される値は、10 ^ 9の整数倍です。</target>
        </trans-unit>
        <trans-unit id="57999414d5724d1cf04f9e4820e57cd11a0935b4" translate="yes" xml:space="preserve">
          <source>The epoch second count is a simple incrementing count of seconds where second 0 is 1970-01-01T00:00:00Z. The nanosecond part is returned by &lt;a href=&quot;#getNano()&quot;&gt;&lt;code&gt;getNano()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">エポック秒カウントは、秒の単純な増分カウントであり、秒0は1970-01-01T00：00：00Zです。ナノ秒の部分は&lt;a href=&quot;#getNano()&quot;&gt; &lt;code&gt;getNano()&lt;/code&gt; &lt;/a&gt;によって返されます。</target>
        </trans-unit>
        <trans-unit id="451d2b13281af07c21676b10d78a114a9213b989" translate="yes" xml:space="preserve">
          <source>The epoch second count is a simple incrementing count of seconds where second 0 is 1970-01-01T00:00:00Z. The nanosecond part of the day is returned by &lt;code&gt;getNanosOfSecond&lt;/code&gt;.</source>
          <target state="translated">エポック秒カウントは、秒の単純な増分カウントで、秒0は1970-01-01T00：00：00Zです。日のナノ秒部分は、 &lt;code&gt;getNanosOfSecond&lt;/code&gt; によって返されます。</target>
        </trans-unit>
        <trans-unit id="7c57dffa7938448b87eeca6b945432ce30d9655f" translate="yes" xml:space="preserve">
          <source>The epoch year &lt;code&gt;LocalDate&lt;/code&gt;, '1970-01-01'.</source>
          <target state="translated">エポック年 &lt;code&gt;LocalDate&lt;/code&gt; 、「1970-01-01」。</target>
        </trans-unit>
        <trans-unit id="13f61041587cde1d2ef70a5612d087fffea4f8a6" translate="yes" xml:space="preserve">
          <source>The epoch-day, based on the Java epoch of 1970-01-01 (ISO).</source>
          <target state="translated">1970-01-01-01(ISO)のJavaのエポックデイを基準にしたエポックデイ。</target>
        </trans-unit>
        <trans-unit id="e49cb9c9ef141f068ac6e8b8f41d3d18c5453e3f" translate="yes" xml:space="preserve">
          <source>The equals comparison for the &lt;code&gt;DataFlavor&lt;/code&gt; class is implemented as follows: Two &lt;code&gt;DataFlavor&lt;/code&gt;s are considered equal if and only if their MIME primary type and subtype and representation class are equal. Additionally, if the primary type is &quot;text&quot;, the subtype denotes a text flavor which supports the charset parameter, and the representation class is not &lt;code&gt;java.io.Reader&lt;/code&gt;, &lt;code&gt;java.lang.String&lt;/code&gt;, &lt;code&gt;java.nio.CharBuffer&lt;/code&gt;, or &lt;code&gt;[C&lt;/code&gt;, the &lt;code&gt;charset&lt;/code&gt; parameter must also be equal. If a charset is not explicitly specified for one or both &lt;code&gt;DataFlavor&lt;/code&gt;s, the platform default encoding is assumed. See &lt;code&gt;selectBestTextFlavor&lt;/code&gt; for a list of text flavors which support the charset parameter.</source>
          <target state="translated">&lt;code&gt;DataFlavor&lt;/code&gt; クラスのequals比較は、次のように実装されます。2つの &lt;code&gt;DataFlavor&lt;/code&gt; は、MIMEプライマリタイプとサブタイプおよび表現クラスが等しい場合にのみ等しいと見なされます。さらに、プライマリタイプが「text」の場合、サブタイプはcharsetパラメータをサポートするテキストフレーバーを示し、表現クラスは &lt;code&gt;java.io.Reader&lt;/code&gt; 、 &lt;code&gt;java.lang.String&lt;/code&gt; 、 &lt;code&gt;java.nio.CharBuffer&lt;/code&gt; 、または &lt;code&gt;[C&lt;/code&gt; 、 &lt;code&gt;charset&lt;/code&gt; パラメータも等しくなければなりません。 1つまたは両方の &lt;code&gt;DataFlavor&lt;/code&gt; に文字セットが明示的に指定されていない場合、プラットフォームのデフォルトエンコーディングが想定されます。 &lt;code&gt;selectBestTextFlavor&lt;/code&gt; を参照してください charsetパラメータをサポートするテキストフレーバーのリストについては。</target>
        </trans-unit>
        <trans-unit id="c1b8293f4c97e7205ec67ebb7e83b218aa57ebae" translate="yes" xml:space="preserve">
          <source>The equals method for all Key objects will return the same result as the equality operator '=='.</source>
          <target state="translated">すべての Key オブジェクトの equals メソッドは、等号演算子 '==' と同じ結果を返します。</target>
        </trans-unit>
        <trans-unit id="f79c64d33ada160a9aa9a0dee87d4b4477a4a32f" translate="yes" xml:space="preserve">
          <source>The era AH has the value 1.</source>
          <target state="translated">時代AHは値1を持っています。</target>
        </trans-unit>
        <trans-unit id="3e1c9900b94880fd7e7c021ee09ac2c00bf64a53" translate="yes" xml:space="preserve">
          <source>The era BCE has the value 0, while the era CE has the value 1.</source>
          <target state="translated">BCEの時代は0、CEの時代は1の値を持っています。</target>
        </trans-unit>
        <trans-unit id="5051bf50e01fc2774c8eb947eb59b6962dbe9b88" translate="yes" xml:space="preserve">
          <source>The era BEFORE_BE has the value 0, while the era BE has the value 1.</source>
          <target state="translated">BEFORE_BEの時代は値0、BEの時代は値1です。</target>
        </trans-unit>
        <trans-unit id="f1e8420b21ccf344f49d55914b45558ed396505c" translate="yes" xml:space="preserve">
          <source>The era BEFORE_ROC has the value 0, while the era ROC has the value 1.</source>
          <target state="translated">時代BEFORE_ROCは値0、時代ROCは値1です。</target>
        </trans-unit>
        <trans-unit id="9f4534bad72f013551c9f764a1def4ccdab2de91" translate="yes" xml:space="preserve">
          <source>The era in use at 1970-01-01 must have the value 1. Later eras must have sequentially higher values. Earlier eras must have sequentially lower values. Each chronology must refer to an enum or similar singleton to provide the era values.</source>
          <target state="translated">1970-01-01の時点で使用されている時代は、値が1でなければなりません。それ以降の時代は順次高い値を持つ必要があります。それ以前の時代は順次低い値を持つ必要があります。各年表は、時代の値を提供するために、列挙型または類似のシングルトンを参照しなければなりません。</target>
        </trans-unit>
        <trans-unit id="87541603348e098b6e3532cfb361646f1efe0412" translate="yes" xml:space="preserve">
          <source>The era in use at the epoch 1970-01-01 (ISO) has the value 1.</source>
          <target state="translated">1970-01-01(ISO)の時代は1の値を持っています。</target>
        </trans-unit>
        <trans-unit id="09028bc65a868277e7b5ae99345ad33a969765b4" translate="yes" xml:space="preserve">
          <source>The era is, conceptually, the largest division of the time-line. Most calendar systems have a single epoch dividing the time-line into two eras. However, some have multiple eras, such as one for the reign of each leader. The exact meaning is determined by the &lt;code&gt;Chronology&lt;/code&gt;.</source>
          <target state="translated">時代は、概念的には、タイムラインの最大の区分です。ほとんどのカレンダーシステムには、タイムラインを2つの時代に分ける単一の時代があります。ただし、各指導者の統治時代など、複数の時代があるものもあります。正確な意味は &lt;code&gt;Chronology&lt;/code&gt; によって決定されます。</target>
        </trans-unit>
        <trans-unit id="ff2e26c4f18353f82283eccb549a2ce5f2603627" translate="yes" xml:space="preserve">
          <source>The era is, conceptually, the largest division of the time-line. Most calendar systems have a single epoch dividing the time-line into two eras. However, some have multiple eras, such as one for the reign of each leader. The exact meaning is determined by the chronology according to the following constraints.</source>
          <target state="translated">時代とは、概念的には、時間軸の最大の分割です。ほとんどのカレンダーシステムは、時間軸を2つの時代に分割する1つのエポックを持っています。しかし、中には、各指導者の治世のために1つのエポックを持つなど、複数のエポックを持つものもある。正確な意味は、以下の制約に従って年表によって決定される。</target>
        </trans-unit>
        <trans-unit id="745a52e844df97899a3ede65646ea36c0fd17371" translate="yes" xml:space="preserve">
          <source>The era.</source>
          <target state="translated">時代が。</target>
        </trans-unit>
        <trans-unit id="2caffe614643d6e127ea5c039dc53ac14adaff9a" translate="yes" xml:space="preserve">
          <source>The erroneous pattern</source>
          <target state="translated">誤ったパターン</target>
        </trans-unit>
        <trans-unit id="41b5b045786eb1032e2a6259c048d27d95a3aa1f" translate="yes" xml:space="preserve">
          <source>The error code with which to create the SystemException.</source>
          <target state="translated">SystemException を作成するためのエラーコード。</target>
        </trans-unit>
        <trans-unit id="c9f3f6b0ac21c18b5b5b46a7c3598f345b813e3c" translate="yes" xml:space="preserve">
          <source>The error handler can abort further validation immediately by throwing &lt;a href=&quot;../../../org/xml/sax/saxexception&quot;&gt;&lt;code&gt;SAXException&lt;/code&gt;&lt;/a&gt; from the handler. Or for example it can print an error to the screen and try to continue the validation by returning normally from the &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">エラーハンドラーは、ハンドラーから&lt;a href=&quot;../../../org/xml/sax/saxexception&quot;&gt; &lt;code&gt;SAXException&lt;/code&gt; &lt;/a&gt;をスローすることにより、それ以上の検証をすぐに中止できます。または、たとえば、画面にエラーを出力し、&lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt;から通常どおりに戻って検証を続行しようとする場合があります。</target>
        </trans-unit>
        <trans-unit id="ca91a015f391a8274e6489f904246f21f852828f" translate="yes" xml:space="preserve">
          <source>The error handler can abort the parsing of a schema immediately by throwing &lt;a href=&quot;../../../org/xml/sax/saxexception&quot;&gt;&lt;code&gt;SAXException&lt;/code&gt;&lt;/a&gt; from the handler. Or for example it can print an error to the screen and try to continue the processing by returning normally from the &lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt;&lt;code&gt;ErrorHandler&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">エラーハンドラーは、ハンドラーから&lt;a href=&quot;../../../org/xml/sax/saxexception&quot;&gt; &lt;code&gt;SAXException&lt;/code&gt; &lt;/a&gt;をスローすることにより、スキーマの解析をすぐに中止できます。または、たとえば、エラーを画面に出力し、&lt;a href=&quot;../../../org/xml/sax/errorhandler&quot;&gt; &lt;code&gt;ErrorHandler&lt;/code&gt; &lt;/a&gt;から通常どおりに戻って処理を続行しようとする場合があります。</target>
        </trans-unit>
        <trans-unit id="1e98ccc16f95f86f47c7a57ca3607f40e966ecd8" translate="yes" xml:space="preserve">
          <source>The error index</source>
          <target state="translated">エラーインデックス</target>
        </trans-unit>
        <trans-unit id="4a0628012c2d77c4a62f2562528b964f8e826cdc" translate="yes" xml:space="preserve">
          <source>The error message.</source>
          <target state="translated">エラーメッセージが出ています。</target>
        </trans-unit>
        <trans-unit id="155f296108df1212e1fa7c200cb6147e704d7079" translate="yes" xml:space="preserve">
          <source>The error method is called when a Handler failure occurs.</source>
          <target state="translated">ハンドラのエラーが発生した場合には、エラーメソッドが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1d0bef9253965f89ce98be7e5b21759cac6eff03" translate="yes" xml:space="preserve">
          <source>The error or warning message.</source>
          <target state="translated">エラーまたは警告メッセージ。</target>
        </trans-unit>
        <trans-unit id="0a410fae8eeeeb214fc59888859b3800e99fda5d" translate="yes" xml:space="preserve">
          <source>The escape character (&lt;code&gt;'\u001B'&lt;/code&gt;)</source>
          <target state="translated">エスケープ文字（ &lt;code&gt;'\u001B'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="36c181ff6056db9593338574ecdc945b6067d4de" translate="yes" xml:space="preserve">
          <source>The event id indicating an ancestor-Container was moved.</source>
          <target state="translated">祖先コンテナが移動されたことを示すイベントID。</target>
        </trans-unit>
        <trans-unit id="e1443dfaf4b6b85db28fbdb25b53c165f541ec0a" translate="yes" xml:space="preserve">
          <source>The event id indicating an ancestor-Container was resized.</source>
          <target state="translated">ancestor-Containerのサイズが変更されたことを示すイベントID。</target>
        </trans-unit>
        <trans-unit id="70d35f470ffeef37b54f836e3cd9f0b651ae9aa7" translate="yes" xml:space="preserve">
          <source>The event id indicating that modification was made to the entire hierarchy tree.</source>
          <target state="translated">階層ツリー全体に変更が加えられたことを示すイベントID。</target>
        </trans-unit>
        <trans-unit id="562a97f9bd92f31f73ffbe57af477a5ba2406946" translate="yes" xml:space="preserve">
          <source>The event instance is created if necessary, and stored in &lt;code&gt;changeEvent&lt;/code&gt;.</source>
          <target state="translated">イベントインスタンスは必要に応じて作成され、 &lt;code&gt;changeEvent&lt;/code&gt; に保存されます。</target>
        </trans-unit>
        <trans-unit id="0ef14c999b3719bfd7c8883c82c16c66341c96f6" translate="yes" xml:space="preserve">
          <source>The event is currently being evaluated at the target &lt;code&gt;EventTarget&lt;/code&gt;.</source>
          <target state="translated">イベントは現在、ターゲット &lt;code&gt;EventTarget&lt;/code&gt; で評価されています。</target>
        </trans-unit>
        <trans-unit id="17d00264cedd71d7e857c367b4af9222389e91c0" translate="yes" xml:space="preserve">
          <source>The event is passed to every &lt;code&gt;WindowListener&lt;/code&gt; or &lt;code&gt;WindowAdapter&lt;/code&gt; object which registered to receive such events using the window's &lt;code&gt;addWindowListener&lt;/code&gt; method. (&lt;code&gt;WindowAdapter&lt;/code&gt; objects implement the &lt;code&gt;WindowListener&lt;/code&gt; interface.) Each such listener object gets this &lt;code&gt;WindowEvent&lt;/code&gt; when the event occurs.</source>
          <target state="translated">イベントは、ウィンドウの &lt;code&gt;addWindowListener&lt;/code&gt; メソッドを使用してそのようなイベントを受信するように登録されたすべての &lt;code&gt;WindowListener&lt;/code&gt; または &lt;code&gt;WindowAdapter&lt;/code&gt; オブジェクトに渡されます。 （ &lt;code&gt;WindowAdapter&lt;/code&gt; オブジェクトは &lt;code&gt;WindowListener&lt;/code&gt; インターフェイスを実装します。）このような各リスナーオブジェクトは、イベントが発生したときにこの &lt;code&gt;WindowEvent&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="1abd8f6fbae26f079345d6412b7aa0c070389945" translate="yes" xml:space="preserve">
          <source>The event listener list for the document.</source>
          <target state="translated">ドキュメントのイベントリスト。</target>
        </trans-unit>
        <trans-unit id="0091e8c476dc1c7031fbbb41fedd65ed1eb317c6" translate="yes" xml:space="preserve">
          <source>The event listener list.</source>
          <target state="translated">イベントリスナーリスト。</target>
        </trans-unit>
        <trans-unit id="b87c7de0d8e9fe74014722e9133592b331a94776" translate="yes" xml:space="preserve">
          <source>The event mask for selecting action events.</source>
          <target state="translated">アクションイベントを選択するためのイベントマスクです。</target>
        </trans-unit>
        <trans-unit id="f8465af8a3d205902e607d80f71a24a06c6dcaec" translate="yes" xml:space="preserve">
          <source>The event mask for selecting adjustment events.</source>
          <target state="translated">調整イベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="8d8cade455cf753680d2662860fe8dc4825d577b" translate="yes" xml:space="preserve">
          <source>The event mask for selecting component events.</source>
          <target state="translated">コンポーネントイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="7bc78b08314a4e10ffe2dc8666ee7cff2ef64b6d" translate="yes" xml:space="preserve">
          <source>The event mask for selecting container events.</source>
          <target state="translated">コンテナイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="08b3362dfd97442548ee4781e310da11d95dd09b" translate="yes" xml:space="preserve">
          <source>The event mask for selecting focus events.</source>
          <target state="translated">フォーカスイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="503c954ae1d7480fa1d1835de752e5eab2f048d5" translate="yes" xml:space="preserve">
          <source>The event mask for selecting hierarchy bounds events.</source>
          <target state="translated">階層境界イベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="95b568d37697e91c43083791ab88b985fcd3f888" translate="yes" xml:space="preserve">
          <source>The event mask for selecting hierarchy events.</source>
          <target state="translated">階層イベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="618b82a70beb576ee4875f5097359a278d101abb" translate="yes" xml:space="preserve">
          <source>The event mask for selecting input method events.</source>
          <target state="translated">入力メソッドのイベントを選択するためのイベントマスクです。</target>
        </trans-unit>
        <trans-unit id="d9a77162c6707a8a87f9742abf7019ec4f3de966" translate="yes" xml:space="preserve">
          <source>The event mask for selecting invocation events.</source>
          <target state="translated">呼び出しイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="50a46c48f92a8902f2db7051788a964120df69b9" translate="yes" xml:space="preserve">
          <source>The event mask for selecting item events.</source>
          <target state="translated">アイテムイベントを選択するためのイベントマスクです。</target>
        </trans-unit>
        <trans-unit id="b158d22c61f92f3ea3859cf9b84da72a61f627e2" translate="yes" xml:space="preserve">
          <source>The event mask for selecting key events.</source>
          <target state="translated">キーイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="9b2204c56d8c920ea81c853ad161b33986873ce6" translate="yes" xml:space="preserve">
          <source>The event mask for selecting mouse events.</source>
          <target state="translated">マウスイベントを選択するためのイベントマスクです。</target>
        </trans-unit>
        <trans-unit id="3daadebe7d86d27ac261849cebba44c3c58604a8" translate="yes" xml:space="preserve">
          <source>The event mask for selecting mouse motion events.</source>
          <target state="translated">マウスモーションイベントを選択するためのイベントマスクです。</target>
        </trans-unit>
        <trans-unit id="143e7aab788b29b1897b3f9301e4a1bd57c7b1a0" translate="yes" xml:space="preserve">
          <source>The event mask for selecting mouse wheel events.</source>
          <target state="translated">マウスホイールイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="7303f9dfdb43b99bc4a8b24183aafd56bedd921d" translate="yes" xml:space="preserve">
          <source>The event mask for selecting paint events.</source>
          <target state="translated">ペイントイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="6393b80ca81908852dcb4fe7b0b6a84bc70bc0dc" translate="yes" xml:space="preserve">
          <source>The event mask for selecting text events.</source>
          <target state="translated">テキストイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="e5374359f6883c4e32a6c33c303b2252932cffe6" translate="yes" xml:space="preserve">
          <source>The event mask for selecting window events.</source>
          <target state="translated">ウィンドウイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="87aa3994fe1dbeca3fe3cef28257f680aaf7a10a" translate="yes" xml:space="preserve">
          <source>The event mask for selecting window focus events.</source>
          <target state="translated">ウィンドウフォーカスイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="a89cabea541857d15e82c9a9b6d50b110bb619a7" translate="yes" xml:space="preserve">
          <source>The event mask for selecting window state events.</source>
          <target state="translated">ウィンドウ状態のイベントを選択するためのイベントマスク。</target>
        </trans-unit>
        <trans-unit id="0724b71d607877d8b379f2ccb49adf32cafd5611" translate="yes" xml:space="preserve">
          <source>The event masks defined in this class are needed by Component subclasses which are using Component.enableEvents() to select for event types not selected by registered listeners. If a listener is registered on a component, the appropriate event mask is already set internally by the component.</source>
          <target state="translated">このクラスで定義されたイベントマスクは、登録されたリスナーが選択しないイベントタイプを選択するためにComponent.enableEvents()を使用しているComponentサブクラスが必要とするものです。コンポーネントにリスナーが登録されている場合、適切なイベント・マスクはすでにコンポーネントによって内部的に設定されています。</target>
        </trans-unit>
        <trans-unit id="d34d828cba8da1b4111d6f70690a234a819abfb3" translate="yes" xml:space="preserve">
          <source>The event property may be &quot;qualified&quot; with an arbitrary number of property prefixes delimited with the &quot;.&quot; character. The &quot;qualifying&quot; names that appear before the &quot;.&quot; characters are taken as the names of properties that should be applied, left-most first, to the event object.</source>
          <target state="translated">イベントプロパティは、&quot;.で区切られた任意の数のプロパティ接頭辞で「修飾」することができます。文字の前に現れる &quot;qualifying &quot;名は、イベントオブジェクトに左端から最初に適用されるべきプロパティの名前として扱われます。</target>
        </trans-unit>
        <trans-unit id="f559f796a4abfc896af3dfc6be310d8b091505bc" translate="yes" xml:space="preserve">
          <source>The event source: the &lt;code&gt;EventContext&lt;/code&gt; which fired this event.</source>
          <target state="translated">イベントソース：このイベントを発生させた &lt;code&gt;EventContext&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b3c9fd95961b86943e1f2aa4dbff83d13cbf36e7" translate="yes" xml:space="preserve">
          <source>The event that the exception was created for.</source>
          <target state="translated">例外が作成されたイベント。</target>
        </trans-unit>
        <trans-unit id="ee5e29fb93f9c21916d767a675ad47355b1d6a37" translate="yes" xml:space="preserve">
          <source>The event type indicating a changed insertion point in input method text.</source>
          <target state="translated">入力メソッドテキストの挿入ポイントが変更されたことを示すイベントタイプです。</target>
        </trans-unit>
        <trans-unit id="b0f553322903980cd0149eaf7aaaa4e359a525f7" translate="yes" xml:space="preserve">
          <source>The event type indicating a changed insertion point in input method text. This event is generated by input methods while processing input if only the caret changed.</source>
          <target state="translated">入力メソッドのテキスト内の挿入ポイントが変更されたことを示すイベントタイプです。このイベントは、カレットのみが変更された場合、入力処理中の入力メソッドで生成されます。</target>
        </trans-unit>
        <trans-unit id="ee63f479a327b468d252de6237f7cf6fd4de4477" translate="yes" xml:space="preserve">
          <source>The event type indicating changed input method text.</source>
          <target state="translated">入力方法のテキストが変更されたことを示すイベントタイプ。</target>
        </trans-unit>
        <trans-unit id="5ee78817480980dd147e27ae0d69b8619d8d9a89" translate="yes" xml:space="preserve">
          <source>The event type indicating changed input method text. This event is generated by input methods while processing input.</source>
          <target state="translated">入力メソッドのテキストが変更されたことを示すイベントタイプです。このイベントは、入力処理中の入力メソッドによって生成されます。</target>
        </trans-unit>
        <trans-unit id="b7d703d953f82fc64328567ded4065357410b7d7" translate="yes" xml:space="preserve">
          <source>The event type.</source>
          <target state="translated">イベントの種類。</target>
        </trans-unit>
        <trans-unit id="3469a61b89e3ba596d3849895eab6680d98a5750" translate="yes" xml:space="preserve">
          <source>The event's id.</source>
          <target state="translated">イベントのID。</target>
        </trans-unit>
        <trans-unit id="a8494d802d092d1ca50afc82a84da40bd6c4d3ac" translate="yes" xml:space="preserve">
          <source>The events in the lexical handler apply to the entire document, not just to the document element, and all lexical handler events must appear between the content handler's startDocument and endDocument events.</source>
          <target state="translated">語彙的ハンドラのイベントは、ドキュメント要素だけでなくドキュメント全体に適用され、すべての語彙的ハンドラのイベントは、コンテンツハンドラの startDocument イベントと endDocument イベントの間に出現しなければなりません。</target>
        </trans-unit>
        <trans-unit id="801bb999f2915842503297d7a55e5337855dcb13" translate="yes" xml:space="preserve">
          <source>The exact behavior is as follows. Parse the full set of fields and determine the effective chronology using the last chronology if it appears more than once. Then convert the base date to the effective chronology. Then extract the specified field from the chronology-specific base date and use it to determine the &lt;code&gt;baseValue&lt;/code&gt; used below.</source>
          <target state="translated">正確な動作は次のとおりです。フィールドの完全なセットを解析し、最後の年表が複数回出現する場合は、それを使用して有効年表を決定します。次に、基準日を有効年表に変換します。次に、年表固有の基準日から指定されたフィールドを抽出し、それを使用して、以下で使用される &lt;code&gt;baseValue&lt;/code&gt; を決定します。</target>
        </trans-unit>
        <trans-unit id="630cc010a102155b8411df8b412a09f2a3535533" translate="yes" xml:space="preserve">
          <source>The exact behavior of calling this function varies on a component-by-component and L&amp;amp;F-by-L&amp;amp;F basis.</source>
          <target state="translated">この関数を呼び出す正確な動作は、コンポーネントごとおよびL＆Fごとに異なります。</target>
        </trans-unit>
        <trans-unit id="c12e27171aa51bd9aa8f7f961c2ff8b5eca35700" translate="yes" xml:space="preserve">
          <source>The exact behavior of monitors is detailed in the &lt;a href=&quot;#spec&quot;&gt;JMX Specification&lt;/a&gt;. What follows is a summary.</source>
          <target state="translated">モニターの正確な動作は、&lt;a href=&quot;#spec&quot;&gt;JMX仕様で&lt;/a&gt;詳しく説明されています。以下は要約です。</target>
        </trans-unit>
        <trans-unit id="f5996b274c754ff765916b69a1116e38e763f760" translate="yes" xml:space="preserve">
          <source>The exact behavior of this method is vendor specific. In particular implementations may detect conditions that indicate dependence on other work such as an open transaction. It is recommended though not required that implementations throw a &lt;code&gt;SQLException&lt;/code&gt; if there is an active transaction and &lt;code&gt;endRequest&lt;/code&gt; is called.</source>
          <target state="translated">このメソッドの正確な動作はベンダー固有です。特に、実装は、オープントランザクションなどの他の作業への依存を示す条件を検出する場合があります。必須ではありませんが、アクティブなトランザクションがあり、 &lt;code&gt;endRequest&lt;/code&gt; が呼び出された場合に、実装が &lt;code&gt;SQLException&lt;/code&gt; をスローすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0adcbf7915efe7e852f0a0f70973b55eb8f3dfe0" translate="yes" xml:space="preserve">
          <source>The exact calling sequence is up to the layout functionality of the parent view (if the view has any children). The view may collect the preferences of the children prior to determining what it will give each child, or it might iteratively update the children one at a time.</source>
          <target state="translated">正確な呼び出し順序は、親ビューのレイアウト機能に依存します(ビューに子がある場合)。ビューは、各子に何を与えるかを決定する前に子のプリファレンスを収集したり、子を一度に繰り返し更新したりすることがあります。</target>
        </trans-unit>
        <trans-unit id="b44a7e8297a7f234948e4b10e76ca799709f23e4" translate="yes" xml:space="preserve">
          <source>The exact definitions of a byte stream and a character stream are binding dependent.</source>
          <target state="translated">バイトストリームと文字ストリームの正確な定義は、バインディングに依存します。</target>
        </trans-unit>
        <trans-unit id="bd471b56699ef39010fba9b749ad14cd54415b7d" translate="yes" xml:space="preserve">
          <source>The exact details of the representation are unspecified and subject to change, but the following may be regarded as typical:</source>
          <target state="translated">表現の正確な詳細は不特定であり、変更される可能性がありますが、以下は典型的なものと考えてよいでしょう。</target>
        </trans-unit>
        <trans-unit id="d66df7228668613a58111f2895d7f4a5daf80cea" translate="yes" xml:space="preserve">
          <source>The exact form of a &lt;code&gt;file:&lt;/code&gt; URI is system-dependent, hence the transformation performed by this constructor is also system-dependent.</source>
          <target state="translated">&lt;code&gt;file:&lt;/code&gt; の正確な形式： URIはシステムに依存するため、このコンストラクターによって実行される変換もシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="f662fbb86a38df169afc1048c172f82e4e4f193b" translate="yes" xml:space="preserve">
          <source>The exact form of the URI is file system provider dependent. In the case of the default provider, the URI scheme is &lt;code&gt;&quot;file&quot;&lt;/code&gt; and the given URI has a non-empty path component, and undefined query, and fragment components. The resulting &lt;code&gt;Path&lt;/code&gt; is associated with the default &lt;a href=&quot;../filesystems#getDefault()&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;code&gt;FileSystem&lt;/code&gt;.</source>
          <target state="translated">URIの正確な形式は、ファイルシステムプロバイダーによって異なります。デフォルトのプロバイダーの場合、URIスキームは &lt;code&gt;&quot;file&quot;&lt;/code&gt; あり、指定されたURIには、空でないパスコンポーネント、未定義のクエリ、およびフラグメントコンポーネントがあります。結果の &lt;code&gt;Path&lt;/code&gt; は、デフォルトの&lt;a href=&quot;../filesystems#getDefault()&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; &lt;code&gt;FileSystem&lt;/code&gt; 関連付けられます。</target>
        </trans-unit>
        <trans-unit id="dc981df5951ebbd2d225b7d4ed612eca36ff7515" translate="yes" xml:space="preserve">
          <source>The exact form of the URI is file system provider dependent. In the case of the default provider, the URI scheme is &lt;code&gt;&quot;file&quot;&lt;/code&gt; and the given URI has a non-empty path component, and undefined query, and fragment components. The resulting &lt;code&gt;Path&lt;/code&gt; is associated with the default &lt;a href=&quot;../filesystems#getDefault--&quot;&gt;&lt;code&gt;default&lt;/code&gt;&lt;/a&gt;&lt;code&gt;FileSystem&lt;/code&gt;.</source>
          <target state="translated">URIの正確な形式は、ファイルシステムプロバイダーによって異なります。デフォルトのプロバイダーの場合、URIスキームは &lt;code&gt;&quot;file&quot;&lt;/code&gt; あり、指定されたURIには空でないパスコンポーネント、未定義のクエリ、およびフラグメントコンポーネントがあります。結果の &lt;code&gt;Path&lt;/code&gt; は、デフォルトの&lt;a href=&quot;../filesystems#getDefault--&quot;&gt; &lt;code&gt;default&lt;/code&gt; &lt;/a&gt; &lt;code&gt;FileSystem&lt;/code&gt; に関連付けられています。</target>
        </trans-unit>
        <trans-unit id="9697a2a14d97c5e708bf64a93aac8e3b81e327df" translate="yes" xml:space="preserve">
          <source>The exact form of the URI is system-dependent. If it can be determined that the file denoted by this abstract pathname is a directory, then the resulting URI will end with a slash.</source>
          <target state="translated">URIの正確な形式はシステムに依存する。この抽象パス名で示されるファイルがディレクトリであると判断できる場合、結果として得られるURIはスラッシュで終わります。</target>
        </trans-unit>
        <trans-unit id="9aa800104b8645f432b1c0777e913b6648da24d1" translate="yes" xml:space="preserve">
          <source>The exact meaning and format of the version is provider specific. The version must follow lexicographical order, thus the returned map will be order from the oldest known rules to the newest available rules. The default 'TZDB' group uses version numbering consisting of the year followed by a letter, such as '2009e' or '2012f'.</source>
          <target state="translated">バージョンの正確な意味と形式は、プロバイダによって異なります。バージョンは辞書順に従わなければならないので、返されるマップは、最も古い既知のルールから最新の利用可能なルールまでの順になります。デフォルトの 'TZDB' グループは、'2009e' や '2012f' のように、年の後に文字が続くバージョン番号を使用します。</target>
        </trans-unit>
        <trans-unit id="202e6f1d0220247616c834f1fe78276d90a9f0ce" translate="yes" xml:space="preserve">
          <source>The exact naming patterns for Standard MBeans are detailed in the &lt;a href=&quot;#spec&quot;&gt;JMX Specification&lt;/a&gt;.</source>
          <target state="translated">標準MBeanの正確な命名パターンは、&lt;a href=&quot;#spec&quot;&gt;JMX仕様で&lt;/a&gt;詳しく説明されています。</target>
        </trans-unit>
        <trans-unit id="25d2a903e4f369778a39675882ed8ca3dfabde11" translate="yes" xml:space="preserve">
          <source>The exact operation of the &lt;a href=&quot;condition&quot;&gt;&lt;code&gt;Condition&lt;/code&gt;&lt;/a&gt; instance depends on the &lt;code&gt;Lock&lt;/code&gt; implementation and must be documented by that implementation.</source>
          <target state="translated">&lt;a href=&quot;condition&quot;&gt; &lt;code&gt;Condition&lt;/code&gt; &lt;/a&gt;インスタンスの正確な操作は &lt;code&gt;Lock&lt;/code&gt; 実装に依存し、その実装によって文書化する必要があります。</target>
        </trans-unit>
        <trans-unit id="ad308ddfc514de8e0c7d95c6e03d21d0eec88e24" translate="yes" xml:space="preserve">
          <source>The exact semantics of the returned &lt;a href=&quot;schema&quot;&gt;&lt;code&gt;Schema&lt;/code&gt;&lt;/a&gt; object depend on the schema language for which this &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; is created.</source>
          <target state="translated">返される&lt;a href=&quot;schema&quot;&gt; &lt;code&gt;Schema&lt;/code&gt; &lt;/a&gt;オブジェクトの正確なセマンティクスは、この&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt;が作成されたスキーマ言語によって異なります。</target>
        </trans-unit>
        <trans-unit id="5b0d4d6e7aa50a3ce0bc0196f6c80877208e0249" translate="yes" xml:space="preserve">
          <source>The exact semantics of this socket options are system dependent. In particular, it is system dependent whether the loopback applies to multicast datagrams sent from the socket or received by the socket. For &lt;a href=&quot;standardprotocolfamily#INET6&quot;&gt;&lt;code&gt;IPv6&lt;/code&gt;&lt;/a&gt; sockets then it is system dependent whether the option also applies to multicast datagrams sent to IPv4 addresses.</source>
          <target state="translated">このソケットオプションの正確なセマンティクスはシステムに依存します。特に、ループバックがソケットから送信された、またはソケットによって受信されたマルチキャストデータグラムに適用されるかどうかは、システムに依存します。以下のため&lt;a href=&quot;standardprotocolfamily#INET6&quot;&gt; &lt;code&gt;IPv6&lt;/code&gt; &lt;/a&gt;ソケットオプションもIPv4アドレスに送信されたマルチキャストデータグラムに適用されるかどうかをシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="dcf3b498256a8390df6c831306b8777539da56b0" translate="yes" xml:space="preserve">
          <source>The exact set of locations searched depends on the implementation of the Java runtime environment.</source>
          <target state="translated">検索される場所の正確なセットは、Javaランタイム環境の実装に依存します。</target>
        </trans-unit>
        <trans-unit id="ed24ee1b6649fd578f53eb49dfd544b8310ea439" translate="yes" xml:space="preserve">
          <source>The example above implements a simple range predicate. Note, that implementations should but are not required to provide &lt;code&gt;String&lt;/code&gt; and integer index based constructors to provide for JDBC RowSet Implementation applications that use both column identification conventions.</source>
          <target state="translated">上記の例では、単純な範囲述語を実装しています。実装は、両方の列識別規則を使用するJDBC RowSet実装アプリケーションを提供するために、 &lt;code&gt;String&lt;/code&gt; および整数インデックスベースのコンストラクターを提供する必要がありますが、必須ではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="86d5f50a60c75d2a382d582e096f5124b4eb83d9" translate="yes" xml:space="preserve">
          <source>The example above shows only one form of address. An address for the RMI Connector can take several forms, as detailed in the documentation for the package &lt;code&gt;&lt;a href=&quot;../../../../java.management.rmi/javax/management/remote/rmi/package-summary&quot;&gt;&lt;code&gt;javax.management.remote.rmi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記の例は、1つの形式のアドレスのみを示しています。パッケージ &lt;code&gt;&lt;a href=&quot;../../../../java.management.rmi/javax/management/remote/rmi/package-summary&quot;&gt;&lt;code&gt;javax.management.remote.rmi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のドキュメントで詳しく説明されているように、RMIコネクタのアドレスはいくつかの形式をとることができます。</target>
        </trans-unit>
        <trans-unit id="a46638a46aa36be6870c59328abd975a302ed5d9" translate="yes" xml:space="preserve">
          <source>The example above shows only one form of address. An address for the RMI Connector can take several forms, as detailed in the documentation for the package &lt;code&gt;&lt;a href=&quot;rmi/package-summary&quot;&gt;&lt;code&gt;javax.management.remote.rmi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記の例は、1つの形式のアドレスのみを示しています。RMIコネクタのアドレスは、パッケージ &lt;code&gt;&lt;a href=&quot;rmi/package-summary&quot;&gt;&lt;code&gt;javax.management.remote.rmi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; のドキュメントに詳細が記載されているように、いくつかの形式をとることができます。</target>
        </trans-unit>
        <trans-unit id="73fb8e3e2f0b010b1c0fb1ec4369809e065e53da" translate="yes" xml:space="preserve">
          <source>The example code presented below demonstrates the usage of the &lt;code&gt;GSSContext&lt;/code&gt; interface for the initiating peer. Different operations on the &lt;code&gt;GSSContext&lt;/code&gt; object are presented, including: object instantiation, setting of desired flags, context establishment, query of actual context flags, per-message operations on application data, and finally context deletion.</source>
          <target state="translated">以下に示すサンプルコードは、開始ピアの &lt;code&gt;GSSContext&lt;/code&gt; インターフェイスの使用法を示しています。 &lt;code&gt;GSSContext&lt;/code&gt; オブジェクトに対するさまざまな操作が表示されます。これには、オブジェクトのインスタンス化、目的のフラグの設定、コンテキストの確立、実際のコンテキストフラグのクエリ、アプリケーションデータに対するメッセージごとの操作、最後にコンテキストの削除が含まれます。</target>
        </trans-unit>
        <trans-unit id="d8a972011740df1b54be01476c1a301cf0eb9b3c" translate="yes" xml:space="preserve">
          <source>The exception class handles errors that may happen while processing or using a catalog.</source>
          <target state="translated">例外クラスは、処理中やカタログの使用中に発生する可能性のあるエラーを処理します。</target>
        </trans-unit>
        <trans-unit id="cf256aa92da408eb634bac9c48df3a1edf45330c" translate="yes" xml:space="preserve">
          <source>The exception handler for this stream. Will return the default exception listener if this has not explicitly been set.</source>
          <target state="translated">このストリームの例外ハンドラ。これが明示的に設定されていない場合は、デフォルトの例外リスナーを返します。</target>
        </trans-unit>
        <trans-unit id="2aa040dbff462a04d3abbb5593e1fb08753604d8" translate="yes" xml:space="preserve">
          <source>The exception handler for this stream; Will return the default exception listener if this has not explicitly been set.</source>
          <target state="translated">このストリームの例外ハンドラ。明示的に設定されていない場合は、デフォルトの例外リスナーを返します。</target>
        </trans-unit>
        <trans-unit id="3725f62226b7f5164a5c53cb1c5db24d41640d24" translate="yes" xml:space="preserve">
          <source>The exception that was thrown.</source>
          <target state="translated">投げられた例外。</target>
        </trans-unit>
        <trans-unit id="1b74aaa2703470e90f28d9b9ca620765332c9fec" translate="yes" xml:space="preserve">
          <source>The executable is represented as when viewed as a method (or constructor or initializer) of some reference type. If that reference type is parameterized, then its actual type arguments are substituted into any types returned by the methods of this interface.</source>
          <target state="translated">実行可能ファイルは、ある参照型のメソッド(またはコンストラクタやイニシャライザ)として見たときのように表現されます。その参照型がパラメータ化されている場合、その実際の型の引数は、このインターフェイスのメソッドによって返される型に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="eb539585405c8e823f90d2f746e91e61574086c1" translate="yes" xml:space="preserve">
          <source>The executable pathname may contain only the name of the executable without the full path information. It is undecideable whether white space separates different arguments or is part of a single argument.</source>
          <target state="translated">実行可能パス名は、フルパス情報を含まずに実行可能ファイルの名前だけを含むことができます。ホワイトスペースが異なる引数を区切るのか、それとも単一の引数の一部なのかは決められません。</target>
        </trans-unit>
        <trans-unit id="f27b0cda8d8e73fd383b388aa8d859be3858d613" translate="yes" xml:space="preserve">
          <source>The execution of the cleaning action is performed by a thread associated with the cleaner. All exceptions thrown by the cleaning action are ignored. The cleaner and other cleaning actions are not affected by exceptions in a cleaning action. The thread runs until all registered cleaning actions have completed and the cleaner itself is reclaimed by the garbage collector.</source>
          <target state="translated">クリーニングアクションの実行は、クリーナーに関連付けられたスレッドによって実行されます。クリーニングアクションによって投げられた例外はすべて無視されます。クリーナと他のクリーニングアクションは、クリーニングアクションの例外の影響を受けません。スレッドは、登録されたすべてのクリーニングアクションが完了し、クリーナ自体がゴミコレクタに回収されるまで実行されます。</target>
        </trans-unit>
        <trans-unit id="d29a50e79da812a685fcf8e4148c18068c2c4497" translate="yes" xml:space="preserve">
          <source>The execution status of tasks may be queried at several levels of detail: &lt;a href=&quot;forkjointask#isDone--&quot;&gt;&lt;code&gt;isDone()&lt;/code&gt;&lt;/a&gt; is true if a task completed in any way (including the case where a task was cancelled without executing); &lt;a href=&quot;forkjointask#isCompletedNormally--&quot;&gt;&lt;code&gt;isCompletedNormally()&lt;/code&gt;&lt;/a&gt; is true if a task completed without cancellation or encountering an exception; &lt;a href=&quot;forkjointask#isCancelled--&quot;&gt;&lt;code&gt;isCancelled()&lt;/code&gt;&lt;/a&gt; is true if the task was cancelled (in which case &lt;a href=&quot;forkjointask#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;); and &lt;a href=&quot;forkjointask#isCompletedAbnormally--&quot;&gt;&lt;code&gt;isCompletedAbnormally()&lt;/code&gt;&lt;/a&gt; is true if a task was either cancelled or encountered an exception, in which case &lt;a href=&quot;forkjointask#getException--&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; will return either the encountered exception or &lt;a href=&quot;cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タスクの実行ステータスは、いくつかの詳細レベルで照会できます。タスクが何らかの方法で完了した場合（実行せずにタスクがキャンセルされた場合を含む&lt;a href=&quot;forkjointask#isDone--&quot;&gt; &lt;code&gt;isDone()&lt;/code&gt; &lt;/a&gt;は、isDone（）がtrueです。&lt;a href=&quot;forkjointask#isCompletedNormally--&quot;&gt; &lt;code&gt;isCompletedNormally()&lt;/code&gt; &lt;/a&gt;は、タスクがキャンセルまたは例外なしで完了した場合はtrueです。&lt;a href=&quot;forkjointask#isCancelled--&quot;&gt; &lt;code&gt;isCancelled()&lt;/code&gt; &lt;/a&gt;は、タスクがキャンセルされた場合はtrueです（この場合、&lt;a href=&quot;forkjointask#getException--&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; を&lt;/a&gt;返します）。タスクがキャンセルされたか、例外が発生した場合、&lt;a href=&quot;forkjointask#isCompletedAbnormally--&quot;&gt; &lt;code&gt;isCompletedAbnormally()&lt;/code&gt; &lt;/a&gt;はtrueです。この場合、&lt;a href=&quot;forkjointask#getException--&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;は、発生した例外または&lt;a href=&quot;cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; &lt;/a&gt;を返します。</target>
        </trans-unit>
        <trans-unit id="8ca944f0e12c04260f851c499a103b46e2f78c38" translate="yes" xml:space="preserve">
          <source>The execution status of tasks may be queried at several levels of detail: &lt;a href=&quot;future#isDone()&quot;&gt;&lt;code&gt;Future.isDone()&lt;/code&gt;&lt;/a&gt; is true if a task completed in any way (including the case where a task was cancelled without executing); &lt;a href=&quot;#isCompletedNormally()&quot;&gt;&lt;code&gt;isCompletedNormally()&lt;/code&gt;&lt;/a&gt; is true if a task completed without cancellation or encountering an exception; &lt;a href=&quot;future#isCancelled()&quot;&gt;&lt;code&gt;Future.isCancelled()&lt;/code&gt;&lt;/a&gt; is true if the task was cancelled (in which case &lt;a href=&quot;#getException()&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; returns a &lt;a href=&quot;cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;); and &lt;a href=&quot;#isCompletedAbnormally()&quot;&gt;&lt;code&gt;isCompletedAbnormally()&lt;/code&gt;&lt;/a&gt; is true if a task was either cancelled or encountered an exception, in which case &lt;a href=&quot;#getException()&quot;&gt;&lt;code&gt;getException()&lt;/code&gt;&lt;/a&gt; will return either the encountered exception or &lt;a href=&quot;cancellationexception&quot;&gt;&lt;code&gt;CancellationException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">タスクの実行ステータスは、いくつかの詳細レベルで照会できます。タスクが何らかの方法で完了した場合（タスクが実行されずにキャンセルされた場合を含む）、&lt;a href=&quot;future#isDone()&quot;&gt; &lt;code&gt;Future.isDone()&lt;/code&gt; &lt;/a&gt;はtrueです。&lt;a href=&quot;#isCompletedNormally()&quot;&gt; &lt;code&gt;isCompletedNormally()&lt;/code&gt; &lt;/a&gt;は、タスクがキャンセルまたは例外の発生なしに完了した場合にtrueになります。タスクがキャンセルされた場合、&lt;a href=&quot;future#isCancelled()&quot;&gt; &lt;code&gt;Future.isCancelled()&lt;/code&gt; &lt;/a&gt;はtrueです（この場合、&lt;a href=&quot;#getException()&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;は&lt;a href=&quot;cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; を&lt;/a&gt;返します）。タスクがキャンセルされたか、例外が発生した場合、&lt;a href=&quot;#isCompletedAbnormally()&quot;&gt; &lt;code&gt;isCompletedAbnormally()&lt;/code&gt; &lt;/a&gt;はtrueです。この場合、&lt;a href=&quot;#getException()&quot;&gt; &lt;code&gt;getException()&lt;/code&gt; &lt;/a&gt;は、発生した例外または&lt;a href=&quot;cancellationexception&quot;&gt; &lt;code&gt;CancellationException&lt;/code&gt; の&lt;/a&gt;いずれかを返します。</target>
        </trans-unit>
        <trans-unit id="61ee783ae0a4dbc146b63cabe4edc1f1f21887c6" translate="yes" xml:space="preserve">
          <source>The executor is intended to be used exclusively by the resulting asynchronous channel group. Termination of the group results in the orderly &lt;a href=&quot;../../util/concurrent/executorservice#shutdown()&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; of the executor service. Shutting down the executor service by other means results in unspecified behavior.</source>
          <target state="translated">エグゼキュータは、結果の非同期チャネルグループによって排他的に使用されることを目的としています。グループが終了すると、エグゼキュータサービスが正常に&lt;a href=&quot;../../util/concurrent/executorservice#shutdown()&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;ます。他の方法でエグゼキュータサービスをシャットダウンすると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="f4d9dd131f37a7f42a4bcff42d9a1446d224c987" translate="yes" xml:space="preserve">
          <source>The executor is intended to be used exclusively by the resulting asynchronous channel group. Termination of the group results in the orderly &lt;a href=&quot;../../util/concurrent/executorservice#shutdown--&quot;&gt;&lt;code&gt;shutdown&lt;/code&gt;&lt;/a&gt; of the executor service. Shutting down the executor service by other means results in unspecified behavior.</source>
          <target state="translated">executorは、結果の非同期チャネルグループによって排他的に使用されることを目的としています。グループを終了すると、executorサービスが正常に&lt;a href=&quot;../../util/concurrent/executorservice#shutdown--&quot;&gt; &lt;code&gt;shutdown&lt;/code&gt; &lt;/a&gt;ます。他の方法でexecutorサービスをシャットダウンすると、不特定の動作が発生します。</target>
        </trans-unit>
        <trans-unit id="0915fb17fd9a3deff60262d6dbbc9333b72ef7a6" translate="yes" xml:space="preserve">
          <source>The executor terminates, also resulting in task cancellation.</source>
          <target state="translated">実行者が終了し、タスクのキャンセルも発生します。</target>
        </trans-unit>
        <trans-unit id="73d17b75ffdd10e82284de19837faa1af9e8f3a5" translate="yes" xml:space="preserve">
          <source>The existing exception will be embedded in the new one, and its message will become the default message for the SAXException.</source>
          <target state="translated">既存の例外は新しい例外に埋め込まれ、そのメッセージはSAXExceptionのデフォルトメッセージになります。</target>
        </trans-unit>
        <trans-unit id="6ab63fc8bf60cc8bbffa4c2deb5037bbfee50797" translate="yes" xml:space="preserve">
          <source>The existing exception will be embedded in the new one, but the new exception will have its own message.</source>
          <target state="translated">既存の例外は新しい例外に埋め込まれますが、新しい例外は独自のメッセージを持ちます。</target>
        </trans-unit>
        <trans-unit id="637065bc8425d8a004b128e7401327923a1d4e4a" translate="yes" xml:space="preserve">
          <source>The exit application default window close operation.</source>
          <target state="translated">終了アプリケーションのデフォルトのウィンドウを閉じる操作を行います。</target>
        </trans-unit>
        <trans-unit id="dedf5604849e0a8d9f2e022a91d3d232a9319d36" translate="yes" xml:space="preserve">
          <source>The exit application default window close operation. Attempting to set this on Windows that support this, such as &lt;code&gt;JFrame&lt;/code&gt;, may throw a &lt;code&gt;SecurityException&lt;/code&gt; based on the &lt;code&gt;SecurityManager&lt;/code&gt;. It is recommended you only use this in an application.</source>
          <target state="translated">アプリケーションのデフォルトのウィンドウを閉じる操作を終了します。これをサポートするWindows上でこれを設定しようとすると、など &lt;code&gt;JFrame&lt;/code&gt; 、投げること &lt;code&gt;SecurityException&lt;/code&gt; をもと &lt;code&gt;SecurityManager&lt;/code&gt; 。これはアプリケーションでのみ使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6b915efb7873bd4164652f10dbaeaabeafe4c12a" translate="yes" xml:space="preserve">
          <source>The expanded icon.</source>
          <target state="translated">拡張されたアイコン。</target>
        </trans-unit>
        <trans-unit id="a2eb29e8b9fad3392d8398feee094f4bb641bc31" translate="yes" xml:space="preserve">
          <source>The expectation is that an instance of the &lt;code&gt;DOMImplementationLS&lt;/code&gt; interface can be obtained by using binding-specific casting methods on an instance of the &lt;code&gt;DOMImplementation&lt;/code&gt; interface or, if the &lt;code&gt;Document&lt;/code&gt; supports the feature &lt;code&gt;&quot;Core&quot;&lt;/code&gt; version &lt;code&gt;&quot;3.0&quot;&lt;/code&gt; defined in [&lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOM Level 3 Core&lt;/a&gt;] , by using the method &lt;code&gt;DOMImplementation.getFeature&lt;/code&gt; with parameter values &lt;code&gt;&quot;LS&quot;&lt;/code&gt; (or &lt;code&gt;&quot;LS-Async&quot;&lt;/code&gt;) and &lt;code&gt;&quot;3.0&quot;&lt;/code&gt; (respectively).</source>
          <target state="translated">期待は、インスタンスということである &lt;code&gt;DOMImplementationLS&lt;/code&gt; のインターフェースは、インスタンスのメソッドを鋳造結合特異用いることによって得ることができる &lt;code&gt;DOMImplementation&lt;/code&gt; インターフェースまたは、場合 &lt;code&gt;Document&lt;/code&gt; 機能に対応 &lt;code&gt;&quot;Core&quot;&lt;/code&gt; バージョン &lt;code&gt;&quot;3.0&quot;&lt;/code&gt; で定義されているが[ &lt;a href=&quot;http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407&quot;&gt;DOMレベル3コア&lt;/a&gt;] 、パラメータ値 &lt;code&gt;&quot;LS&quot;&lt;/code&gt; （または &lt;code&gt;&quot;LS-Async&quot;&lt;/code&gt; ）および &lt;code&gt;&quot;3.0&quot;&lt;/code&gt; （それぞれ）を指定してメソッド &lt;code&gt;DOMImplementation.getFeature&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2da0bfb56bb5ec3dd2ac18e35db3bfea4f467380" translate="yes" xml:space="preserve">
          <source>The expiration affects only the bundle loading process by the &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; factory method. That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the &lt;a href=&quot;#needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)&quot;&gt;&lt;code&gt;needsReload&lt;/code&gt;&lt;/a&gt; method to determine whether the resource bundle needs to be reloaded. If &lt;code&gt;needsReload&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method.</source>
          <target state="translated">有効期限は、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; ファクトリメソッドによるバンドルのロードプロセスにのみ影響します。つまり、ファクトリメソッドが期限切れのリソースバンドルをキャッシュ内で検出すると、ファクトリメソッドは&lt;a href=&quot;#needsReload(java.lang.String,java.util.Locale,java.lang.String,java.lang.ClassLoader,java.util.ResourceBundle,long)&quot;&gt; &lt;code&gt;needsReload&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、リソースバンドルをリロードする必要があるかどうかを判断します。場合 &lt;code&gt;needsReload&lt;/code&gt; が返す &lt;code&gt;true&lt;/code&gt; 、インスタンスバンドルキャッシュされたリソースがキャッシュから削除されます。それ以外の場合、インスタンスはキャッシュに残り、このメソッドによって返される新しいTTL値で更新されます。</target>
        </trans-unit>
        <trans-unit id="d9d8f0bcf70d559439cda5ca1964e2a9c53e1f14" translate="yes" xml:space="preserve">
          <source>The expiration affects only the bundle loading process by the &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; factory method. That is, if the factory method finds a resource bundle in the cache that has expired, the factory method calls the &lt;a href=&quot;resourcebundle.control#needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-&quot;&gt;&lt;code&gt;needsReload&lt;/code&gt;&lt;/a&gt; method to determine whether the resource bundle needs to be reloaded. If &lt;code&gt;needsReload&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, the cached resource bundle instance is removed from the cache. Otherwise, the instance stays in the cache, updated with the new TTL value returned by this method.</source>
          <target state="translated">有効期限は、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; ファクトリメソッドによるバンドルのロードプロセスにのみ影響します。つまり、ファクトリメソッドは、有効期限が切れたリソースバンドルをキャッシュ内で検出すると、&lt;a href=&quot;resourcebundle.control#needsReload-java.lang.String-java.util.Locale-java.lang.String-java.lang.ClassLoader-java.util.ResourceBundle-long-&quot;&gt; &lt;code&gt;needsReload&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して、リソースバンドルを再ロードする必要があるかどうかを判断します。場合 &lt;code&gt;needsReload&lt;/code&gt; が返す &lt;code&gt;true&lt;/code&gt; 、インスタンスバンドルキャッシュされたリソースがキャッシュから削除されます。それ以外の場合、インスタンスはキャッシュに残り、このメソッドによって返される新しいTTL値で更新されます。</target>
        </trans-unit>
        <trans-unit id="683879150a40c61e38bdd0eaf4e437759304d62b" translate="yes" xml:space="preserve">
          <source>The explicit purpose of this variation on the &lt;code&gt;createFont(int, File)&lt;/code&gt; method is to support font sources which represent a TrueType/OpenType font collection and be able to return all individual fonts in that collection. Consequently this method will throw &lt;code&gt;FontFormatException&lt;/code&gt; if the data source does not contain at least one TrueType/OpenType font. The same exception will also be thrown if any of the fonts in the collection does not contain the required font tables.</source>
          <target state="translated">&lt;code&gt;createFont(int, File)&lt;/code&gt; メソッドのこのバリエーションの明示的な目的は、TrueType / OpenTypeフォントコレクションを表し、そのコレクション内のすべての個々のフォントを返すことができるフォントソースをサポートすることです。したがって、データソースに少なくとも1つのTrueType / OpenTypeフォントが含まれていない場合、このメソッドは &lt;code&gt;FontFormatException&lt;/code&gt; をスローします。コレクション内のいずれかのフォントに必要なフォントテーブルが含まれていない場合も、同じ例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="2f7fb41a871d246f4fdde7907583f21de6ee40fc" translate="yes" xml:space="preserve">
          <source>The explicit purpose of this variation on the &lt;code&gt;createFont(int, InputStream)&lt;/code&gt; method is to support font sources which represent a TrueType/OpenType font collection and be able to return all individual fonts in that collection. Consequently this method will throw &lt;code&gt;FontFormatException&lt;/code&gt; if the data source does not contain at least one TrueType/OpenType font. The same exception will also be thrown if any of the fonts in the collection does not contain the required font tables.</source>
          <target state="translated">&lt;code&gt;createFont(int, InputStream)&lt;/code&gt; メソッドのこのバリエーションの明示的な目的は、TrueType / OpenTypeフォントコレクションを表し、そのコレクション内のすべての個々のフォントを返すことができるフォントソースをサポートすることです。したがって、データソースに少なくとも1つのTrueType / OpenTypeフォントが含まれていない場合、このメソッドは &lt;code&gt;FontFormatException&lt;/code&gt; をスローします。コレクション内のいずれかのフォントに必要なフォントテーブルが含まれていない場合も、同じ例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="2dc14daed0248ca40fd5504121c75a52196ab986" translate="yes" xml:space="preserve">
          <source>The explicit state of a matcher includes the start and end indices of the most recent successful match. It also includes the start and end indices of the input subsequence captured by each &lt;a href=&quot;pattern#cg&quot;&gt;capturing group&lt;/a&gt; in the pattern as well as a total count of such subsequences. As a convenience, methods are also provided for returning these captured subsequences in string form.</source>
          <target state="translated">マッチャーの明示的な状態には、最後に成功したマッチの開始インデックスと終了インデックスが含まれます。また、パターン内の各&lt;a href=&quot;pattern#cg&quot;&gt;キャプチャグループ&lt;/a&gt;によってキャプチャされた入力サブシーケンスの開始インデックスと終了インデックス、およびそのようなサブシーケンスの総数も含まれます。便宜上、これらのキャプチャされたサブシーケンスを文字列形式で返すためのメソッドも提供されています。</target>
        </trans-unit>
        <trans-unit id="e7b30369bd27defe750e02c533a376297b7fac15" translate="yes" xml:space="preserve">
          <source>The explicit state of a matcher is initially undefined; attempting to query any part of it before a successful match will cause an &lt;a href=&quot;../../lang/illegalstateexception&quot;&gt;&lt;code&gt;IllegalStateException&lt;/code&gt;&lt;/a&gt; to be thrown. The explicit state of a matcher is recomputed by every match operation.</source>
          <target state="translated">マッチャーの明示的な状態は、最初は未定義です。一致する前にその一部を照会しようとすると、&lt;a href=&quot;../../lang/illegalstateexception&quot;&gt; &lt;code&gt;IllegalStateException&lt;/code&gt; &lt;/a&gt;がスローされます。マッチャーの明示的な状態は、すべての一致操作によって再計算されます。</target>
        </trans-unit>
        <trans-unit id="a3c7c1344d3645ede9619e20180ea6a536e509b1" translate="yes" xml:space="preserve">
          <source>The exponent consists of the character &lt;code&gt;'e'&lt;/code&gt; (&lt;code&gt;'\u0065'&lt;/code&gt;) or &lt;code&gt;'E'&lt;/code&gt; (&lt;code&gt;'\u0045'&lt;/code&gt;) followed by one or more decimal digits. The value of the exponent must lie between -&lt;a href=&quot;../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;../lang/integer#MIN_VALUE&quot;&gt;&lt;code&gt;Integer.MIN_VALUE&lt;/code&gt;&lt;/a&gt;+1) and &lt;a href=&quot;../lang/integer#MAX_VALUE&quot;&gt;&lt;code&gt;Integer.MAX_VALUE&lt;/code&gt;&lt;/a&gt;, inclusive.</source>
          <target state="translated">指数は、文字 &lt;code&gt;'e'&lt;/code&gt; （ &lt;code&gt;'\u0065'&lt;/code&gt; ）または &lt;code&gt;'E'&lt;/code&gt; （ &lt;code&gt;'\u0045'&lt;/code&gt; ）と、それに続く1つ以上の10進数で構成されます。指数の値は&lt;a href=&quot;../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;../lang/integer#MIN_VALUE&quot;&gt; &lt;code&gt;Integer.MIN_VALUE&lt;/code&gt; &lt;/a&gt; +1）と&lt;a href=&quot;../lang/integer#MAX_VALUE&quot;&gt; &lt;code&gt;Integer.MAX_VALUE&lt;/code&gt; の&lt;/a&gt;間にある必要があります。</target>
        </trans-unit>
        <trans-unit id="22cb2e2834e039174e52d5280adb7e843a000950" translate="yes" xml:space="preserve">
          <source>The export was implicitly declared in the source of the module declaration.</source>
          <target state="translated">エクスポートは、モジュール宣言のソースで暗黙的に宣言されていました。</target>
        </trans-unit>
        <trans-unit id="bdb505c12ab3c537f37654a8d6eb008f47b8391c" translate="yes" xml:space="preserve">
          <source>The export was not explicitly or implicitly declared in the source of the module declaration.</source>
          <target state="translated">エクスポートは、モジュール宣言のソースで明示的または暗黙的に宣言されていませんでした。</target>
        </trans-unit>
        <trans-unit id="ba1bbb5344514fa0674e6756fb7c32a4079b14c0" translate="yes" xml:space="preserve">
          <source>The exported constant &lt;a href=&quot;#DPI&quot;&gt;&lt;code&gt;DPI&lt;/code&gt;&lt;/a&gt; is actually the conversion factor by which to multiply a value in dpi to get the value in dphi. Likewise, the exported constant &lt;a href=&quot;#DPCM&quot;&gt;&lt;code&gt;DPCM&lt;/code&gt;&lt;/a&gt; is the conversion factor by which to multiply a value in dpcm to get the value in dphi. A client can specify a resolution value in units other than dpi or dpcm by supplying its own conversion factor. However, since the internal units of dphi was chosen with supporting only the external units of dpi and dpcm in mind, there is no guarantee that the conversion factor for the client's units will be an exact integer. If the conversion factor isn't an exact integer, resolution values in the client's units won't be stored precisely.</source>
          <target state="translated">エクスポートされた定数&lt;a href=&quot;#DPI&quot;&gt; &lt;code&gt;DPI&lt;/code&gt; &lt;/a&gt;は、実際には、dpi単位の値を乗算してdphi単位の値を取得するための変換係数です。同様に、エクスポートされた定数&lt;a href=&quot;#DPCM&quot;&gt; &lt;code&gt;DPCM&lt;/code&gt; &lt;/a&gt;は、dpcmの値を乗算してdphiの値を取得するための変換係数です。クライアントは、独自の変換係数を指定することにより、dpiまたはdpcm以外の単位で解像度値を指定できます。ただし、dphiの内部単位は、dpiとdpcmの外部単位のみをサポートすることを念頭に置いて選択されているため、クライアントの単位の変換係数が正確な整数になる保証はありません。変換係数が正確な整数でない場合、クライアントの単位の解像度値は正確に保存されません。</target>
        </trans-unit>
        <trans-unit id="d9e0ab1b5a3db4ff1da6ce513058b99030c385ab" translate="yes" xml:space="preserve">
          <source>The exported constant &lt;a href=&quot;#INCH&quot;&gt;&lt;code&gt;INCH&lt;/code&gt;&lt;/a&gt; is actually the conversion factor by which to multiply a value in inches to get the value in &amp;micro;m. Likewise, the exported constant &lt;a href=&quot;#MM&quot;&gt;&lt;code&gt;MM&lt;/code&gt;&lt;/a&gt; is the conversion factor by which to multiply a value in mm to get the value in &amp;micro;m. A client can specify a resolution value in units other than inches or mm by supplying its own conversion factor. However, since the internal units of &amp;micro;m was chosen with supporting only the external units of inch and mm in mind, there is no guarantee that the conversion factor for the client's units will be an exact integer. If the conversion factor isn't an exact integer, resolution values in the client's units won't be stored precisely.</source>
          <target state="translated">エクスポートされた定数&lt;a href=&quot;#INCH&quot;&gt; &lt;code&gt;INCH&lt;/code&gt; &lt;/a&gt;は、実際には、インチ単位の値を乗算して&amp;micro;m単位の値を取得するための変換係数です。同様に、エクスポートされた定数&lt;a href=&quot;#MM&quot;&gt; &lt;code&gt;MM&lt;/code&gt; &lt;/a&gt;は、mm単位の値を乗算して&amp;micro;m単位の値を取得するための変換係数です。クライアントは、独自の変換係数を指定することにより、インチまたはmm以外の単位で解像度値を指定できます。ただし、&amp;micro;mの内部単位は、インチとmmの外部単位のみをサポートすることを念頭に置いて選択されているため、クライアントの単位の変換係数が正確な整数になる保証はありません。変換係数が正確な整数でない場合、クライアントの単位の解像度値は正確に保存されません。</target>
        </trans-unit>
        <trans-unit id="f0533f2a29f52d331ec56f16f61c10c53b5897f4" translate="yes" xml:space="preserve">
          <source>The exported constant &lt;a href=&quot;resolutionsyntax#DPI&quot;&gt;&lt;code&gt;DPI&lt;/code&gt;&lt;/a&gt; is actually the conversion factor by which to multiply a value in dpi to get the value in dphi. Likewise, the exported constant &lt;a href=&quot;resolutionsyntax#DPCM&quot;&gt;&lt;code&gt;DPCM&lt;/code&gt;&lt;/a&gt; is the conversion factor by which to multiply a value in dpcm to get the value in dphi. A client can specify a resolution value in units other than dpi or dpcm by supplying its own conversion factor. However, since the internal units of dphi was chosen with supporting only the external units of dpi and dpcm in mind, there is no guarantee that the conversion factor for the client's units will be an exact integer. If the conversion factor isn't an exact integer, resolution values in the client's units won't be stored precisely.</source>
          <target state="translated">エクスポートされた定数&lt;a href=&quot;resolutionsyntax#DPI&quot;&gt; &lt;code&gt;DPI&lt;/code&gt; &lt;/a&gt;は、実際には、dphiで値を取得するためにdpiで値を乗算するための変換係数です。同様に、エクスポートされた定数&lt;a href=&quot;resolutionsyntax#DPCM&quot;&gt; &lt;code&gt;DPCM&lt;/code&gt; &lt;/a&gt;は、dpcmの値を乗算してdphiの値を取得するための変換係数です。クライアントは、独自の変換係数を提供することにより、dpiまたはdpcm以外の単位で解像度値を指定できます。ただし、dphiおよびdpcmの外部単位のみをサポートすることを考慮してdphiの内部単位が選択されたため、クライアントの単位の変換係数が正確な整数になる保証はありません。変換係数が正確な整数でない場合、クライアントの単位の解像度値は正確に保存されません。</target>
        </trans-unit>
        <trans-unit id="6ffeca453b85f8c0c2115aaee678b47fadf06c73" translate="yes" xml:space="preserve">
          <source>The exported constant &lt;a href=&quot;size2dsyntax#INCH&quot;&gt;&lt;code&gt;INCH&lt;/code&gt;&lt;/a&gt; is actually the conversion factor by which to multiply a value in inches to get the value in &amp;micro;m. Likewise, the exported constant &lt;a href=&quot;size2dsyntax#MM&quot;&gt;&lt;code&gt;MM&lt;/code&gt;&lt;/a&gt; is the conversion factor by which to multiply a value in mm to get the value in &amp;micro;m. A client can specify a resolution value in units other than inches or mm by supplying its own conversion factor. However, since the internal units of &amp;micro;m was chosen with supporting only the external units of inch and mm in mind, there is no guarantee that the conversion factor for the client's units will be an exact integer. If the conversion factor isn't an exact integer, resolution values in the client's units won't be stored precisely.</source>
          <target state="translated">エクスポートされた定数&lt;a href=&quot;size2dsyntax#INCH&quot;&gt; &lt;code&gt;INCH&lt;/code&gt; &lt;/a&gt;は、実際には、インチ単位の値を乗算して&amp;micro;m単位の値を取得するための変換係数です。同様に、エクスポートされた定数&lt;a href=&quot;size2dsyntax#MM&quot;&gt; &lt;code&gt;MM&lt;/code&gt; &lt;/a&gt;は、mmの値を乗算して&amp;micro;mの値を取得するための変換係数です。クライアントは、独自の変換係数を提供することにより、インチまたはmm以外の単位で解像度値を指定できます。ただし、&amp;micro;mの内部単位は、インチとmmの外部単位のみをサポートすることを考慮して選択されたため、クライアントの単位の変換係数が正確な整数になる保証はありません。変換係数が正確な整数でない場合、クライアントの単位の解像度値は正確に保存されません。</target>
        </trans-unit>
        <trans-unit id="bd5f3309ccc2057ce1e6f32e3aa2d5bd529b30d6" translate="yes" xml:space="preserve">
          <source>The exported name is useful when used in large access control lists where the overhead of creating a &lt;code&gt;GSSName&lt;/code&gt; object on each name and invoking the equals method on each name from the ACL may be prohibitive.</source>
          <target state="translated">エクスポートされた名前は、各名前に &lt;code&gt;GSSName&lt;/code&gt; オブジェクトを作成し、ACLから各名前にequalsメソッドを呼び出すオーバーヘッドが法外な場合がある、大規模なアクセス制御リストで使用する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="bc59d340ea1d8edf392f9599ad9de2d1cd0c7ff0" translate="yes" xml:space="preserve">
          <source>The expression &lt;code&gt;/foo/bar&lt;/code&gt; is an example of a location path. While XPath location paths resemble Unix-style file system paths, an important distinction is that XPath expressions return &lt;em&gt;all&lt;/em&gt; nodes that match the expression. Thus, all three &lt;code&gt;&amp;lt;bar&amp;gt;&lt;/code&gt; elements in the following document would be selected by the &lt;code&gt;/foo/bar&lt;/code&gt; expression:</source>
          <target state="translated">式 &lt;code&gt;/foo/bar&lt;/code&gt; は、ロケーションパスの例です。XPathロケーションパスはUnixスタイルのファイルシステムパスに似ていますが、重要な違いは、XPath式が式に一致する&lt;em&gt;すべての&lt;/em&gt;ノードを返すことです。したがって、次のドキュメントの3つの &lt;code&gt;&amp;lt;bar&amp;gt;&lt;/code&gt; 要素はすべて、 &lt;code&gt;/foo/bar&lt;/code&gt; 式によって選択されます。</target>
        </trans-unit>
        <trans-unit id="f797bd4b5d3803bccb2bf4443971ca848ad473e5" translate="yes" xml:space="preserve">
          <source>The extension which (by convention) is normally used for this kind of file object.</source>
          <target state="translated">この種のファイルオブジェクトに通常使用される(慣例では)拡張子。</target>
        </trans-unit>
        <trans-unit id="c526e4b628135ef20bb3ec78aeb7857b7e29b6f2" translate="yes" xml:space="preserve">
          <source>The extension which (by convention) is normally used for this kind of file object. If no convention exists, the empty string (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is used.</source>
          <target state="translated">（慣例により）通常この種のファイルオブジェクトに使用される拡張子。規則が存在しない場合は、空の文字列（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）が使用されます。</target>
        </trans-unit>
        <trans-unit id="b7077b0dc29af6cf86699b7e028c9503e4db51e1" translate="yes" xml:space="preserve">
          <source>The extension, or null if this locale defines no extension for the specified key.</source>
          <target state="translated">このロケールが、指定したキーの拡張子を定義していない場合は null となります。</target>
        </trans-unit>
        <trans-unit id="5a1dab9e41a5beec5f05c63e6ecb9a3afbdcbb0e" translate="yes" xml:space="preserve">
          <source>The extensions defined for X.509 v3 &lt;a href=&quot;x509certificate&quot;&gt;&lt;code&gt;Certificates&lt;/code&gt;&lt;/a&gt; and v2 &lt;a href=&quot;x509crl&quot;&gt;&lt;code&gt;CRLs&lt;/code&gt;&lt;/a&gt; (Certificate Revocation Lists) provide methods for associating additional attributes with users or public keys, for managing the certification hierarchy, and for managing CRL distribution. The X.509 extensions format also allows communities to define private extensions to carry information unique to those communities.</source>
          <target state="translated">X.509 v3 &lt;a href=&quot;x509certificate&quot;&gt; &lt;code&gt;Certificates&lt;/code&gt; &lt;/a&gt;およびv2 &lt;a href=&quot;x509crl&quot;&gt; &lt;code&gt;CRLs&lt;/code&gt; &lt;/a&gt;（証明書失効リスト）に対して定義された拡張機能は、追加の属性をユーザーまたは公開鍵に関連付ける方法、認証階層を管理する方法、およびCRL配布を管理する方法を提供します。X.509拡張フォーマットを使用すると、コミュニティはプライベート拡張を定義して、それらのコミュニティに固有の情報を運ぶこともできます。</target>
        </trans-unit>
        <trans-unit id="ef70034c532ebffee8e66aca3f214a22c5e40a15" translate="yes" xml:space="preserve">
          <source>The facility that a disconnected &lt;code&gt;RowSet&lt;/code&gt; object calls on to populate itself with rows of data.</source>
          <target state="translated">切断された &lt;code&gt;RowSet&lt;/code&gt; オブジェクトが、データの行を自身に取り込むために呼び出す機能。</target>
        </trans-unit>
        <trans-unit id="72202a3ad0c147eaa41c7897c87ffc243071ccbc" translate="yes" xml:space="preserve">
          <source>The facility that a disconnected &lt;code&gt;RowSet&lt;/code&gt; object calls on to populate itself with rows of data. A reader (an object implementing the &lt;code&gt;RowSetReader&lt;/code&gt; interface) may be registered with a &lt;code&gt;RowSet&lt;/code&gt; object that supports the reader/writer paradigm. When the &lt;code&gt;RowSet&lt;/code&gt; object's &lt;code&gt;execute&lt;/code&gt; method is called, it in turn calls the reader's &lt;code&gt;readData&lt;/code&gt; method.</source>
          <target state="translated">切断された &lt;code&gt;RowSet&lt;/code&gt; オブジェクトが、データの行を自身に取り込むために呼び出す機能。リーダー（ &lt;code&gt;RowSetReader&lt;/code&gt; インターフェイスを実装するオブジェクト）は、リーダー/ライターパラダイムをサポートする &lt;code&gt;RowSet&lt;/code&gt; オブジェクトに登録できます。とき &lt;code&gt;RowSet&lt;/code&gt; オブジェクトの &lt;code&gt;execute&lt;/code&gt; メソッドが呼び出され、それが今度は読者の呼び出す &lt;code&gt;readData&lt;/code&gt; メソッドを。</target>
        </trans-unit>
        <trans-unit id="0664d9fe950364ce2964d5f524212ff501587b8c" translate="yes" xml:space="preserve">
          <source>The fact that a client connection object is in this internal list does not prevent it from being garbage collected.</source>
          <target state="translated">クライアント接続オブジェクトがこの内部リストにあるという事実は、それがガベージコレクションされることを妨げるものではありません。</target>
        </trans-unit>
        <trans-unit id="21ce72be6b52dbd64592f3385a8d86f3fe793972" translate="yes" xml:space="preserve">
          <source>The factory is used by the service provider to return controls that it reads from the LDAP protocol as specialized control classes. Without this mechanism, the provider would be returning controls that only contained data in BER encoded format.</source>
          <target state="translated">ファクトリーは、サービスプロバイダがLDAPプロトコルから読み込んだコントロールを特殊なコントロールクラスとして返すために使用されます。このメカニズムがなければ、プロバイダはBERエンコードされた形式のデータのみを含むコントロールを返すことになります。</target>
        </trans-unit>
        <trans-unit id="35b84653a32f1a9f17fa155fd0e0418d7e8f354a" translate="yes" xml:space="preserve">
          <source>The factory methods limit access to ProcessHandles using the SecurityManager checking the &lt;a href=&quot;runtimepermission&quot;&gt;&lt;code&gt;RuntimePermission(&quot;manageProcess&quot;)&lt;/code&gt;&lt;/a&gt;. The ability to control processes is also restricted by the native system, ProcessHandle provides no more access to, or control over, the native process than would be allowed by a native application.</source>
          <target state="translated">ファクトリメソッドは、&lt;a href=&quot;runtimepermission&quot;&gt; &lt;code&gt;RuntimePermission(&quot;manageProcess&quot;)&lt;/code&gt; を&lt;/a&gt;チェックするSecurityManagerを使用してProcessHandlesへのアクセスを制限します。プロセスを制御する機能もネイティブシステムによって制限されます。ProcessHandleは、ネイティブアプリケーションで許可される以上に、ネイティブプロセスへのアクセスや制御を提供しません。</target>
        </trans-unit>
        <trans-unit id="e6c42fd94f3fbd0037101f65af16abb9630b8269" translate="yes" xml:space="preserve">
          <source>The factory methods on a &lt;code&gt;Lookup&lt;/code&gt; object correspond to all major use cases for methods, constructors, and fields. Each method handle created by a factory method is the functional equivalent of a particular &lt;em&gt;bytecode behavior&lt;/em&gt;. (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.) Here is a summary of the correspondence between these factory methods and the behavior of the resulting method handles:</source>
          <target state="translated">&lt;code&gt;Lookup&lt;/code&gt; オブジェクトのファクトリメソッドは、メソッド、コンストラクター、およびフィールドのすべての主要なユースケースに対応しています。ファクトリメソッドによって作成された各メソッドハンドルは、特定の&lt;em&gt;バイトコードの動作と&lt;/em&gt;機能的に同等です。（バイトコードの動作は、Java仮想マシン仕様のセクション5.4.3.5で説明されています。）これらのファクトリメソッドと結果のメソッドハンドルの動作との対応の概要は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b5a2c92a2eca28e67f326ce843048d8b7bd41378" translate="yes" xml:space="preserve">
          <source>The factory methods on a &lt;code&gt;Lookup&lt;/code&gt; object correspond to all major use cases for methods, constructors, and fields. Each method handle created by a factory method is the functional equivalent of a particular &lt;em&gt;bytecode behavior&lt;/em&gt;. (Bytecode behaviors are described in section 5.4.3.5 of the Java Virtual Machine Specification.) Here is a summary of the correspondence between these factory methods and the behavior the resulting method handles:</source>
          <target state="translated">&lt;code&gt;Lookup&lt;/code&gt; オブジェクトのファクトリメソッドは、メソッド、コンストラクタ、およびフィールドのすべての主要な使用例に対応しています。ファクトリメソッドによって作成された各メソッドハンドルは、特定の&lt;em&gt;バイトコードの動作と&lt;/em&gt;機能的に同等です。（バイトコードの動作は、Java仮想マシン仕様のセクション5.4.3.5で説明されています。）これらのファクトリメソッドと、結果のメソッドが処理する動作との間の対応の概要を次に示します。</target>
        </trans-unit>
        <trans-unit id="3669df2b0d8feae5a747749ca77262d7e06c86a2" translate="yes" xml:space="preserve">
          <source>The family name of a font is font specific. Two fonts such as Helvetica Italic and Helvetica Bold have the same family name,</source>
          <target state="translated">フォントのファミリーネームはフォント固有のものです。Helvetica ItalicやHelvetica Boldのような2つのフォントが同じファミリーネームを持っています。</target>
        </trans-unit>
        <trans-unit id="af8935690a4466165d81f669e4a0337a589c7982" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for a &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; to expose a feature value but to be unable to change the current value.</source>
          <target state="translated">機能名は完全修飾URIです。&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt;が機能値を公開することは可能ですが、現在の値を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="e25f173633d1d3213d95f0ba8615c555662068fc" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for a &lt;a href=&quot;schemafactory&quot;&gt;&lt;code&gt;SchemaFactory&lt;/code&gt;&lt;/a&gt; to recognize a feature name but temporarily be unable to return its value.</source>
          <target state="translated">機能名は完全修飾URIです。&lt;a href=&quot;schemafactory&quot;&gt; &lt;code&gt;SchemaFactory&lt;/code&gt; &lt;/a&gt;が機能名を認識しても、一時的にその値を返すことができない可能性があります。</target>
        </trans-unit>
        <trans-unit id="0048d169a23d75a602733bc3c158bb3bb6facf07" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for a &lt;a href=&quot;validator&quot;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt; to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a validation.</source>
          <target state="translated">機能名は完全修飾URIです。&lt;a href=&quot;validator&quot;&gt; &lt;code&gt;Validator&lt;/code&gt; &lt;/a&gt;が機能値を公開することは可能ですが、現在の値を変更することはできません。一部の特徴値は、検証前、検証中、検証後など、特定のコンテキストでのみ不変または可変である場合があります。</target>
        </trans-unit>
        <trans-unit id="d91d67590ac33f4ffa2c013b9f240cf25685b1c4" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for a &lt;a href=&quot;validator&quot;&gt;&lt;code&gt;Validator&lt;/code&gt;&lt;/a&gt; to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a validation.</source>
          <target state="translated">機能名は完全修飾URIです。ことが可能である&lt;a href=&quot;validator&quot;&gt; &lt;code&gt;Validator&lt;/code&gt; が&lt;/a&gt;機能名を認識しますが、一時的にその値を返すことができないこと。一部の機能値は、検証前、検証中、検証後など、特定のコンテキストでのみ使用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="949080a2f1cca3e0a76865e4f76dc667c938f1af" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for a &lt;a href=&quot;validatorhandler&quot;&gt;&lt;code&gt;ValidatorHandler&lt;/code&gt;&lt;/a&gt; to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a validation.</source>
          <target state="translated">機能名は完全修飾URIです。&lt;a href=&quot;validatorhandler&quot;&gt; &lt;code&gt;ValidatorHandler&lt;/code&gt; &lt;/a&gt;が機能名を認識しても、一時的にその値を返すことができない可能性があります。一部の機能値は、検証前、検証中、検証後など、特定のコンテキストでのみ使用できる場合があります。</target>
        </trans-unit>
        <trans-unit id="bfc5e4c752e9cf392e8c989784b55f720c750e9b" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for an XMLReader to expose a feature value but to be unable to change the current value. Some feature values may be immutable or mutable only in specific contexts, such as before, during, or after a parse.</source>
          <target state="translated">機能名は、任意の完全修飾 URI です。XMLReader が機能値を公開しても、現在の値を変更できないことがあります。機能値の中には、パース前、パース中、パース後などの特定のコンテキストでのみ不変または変異可能なものがあります。</target>
        </trans-unit>
        <trans-unit id="1ef42c41248d6e2857b1d6c2a1ffc761e5328ccf" translate="yes" xml:space="preserve">
          <source>The feature name is any fully-qualified URI. It is possible for an XMLReader to recognize a feature name but temporarily be unable to return its value. Some feature values may be available only in specific contexts, such as before, during, or after a parse. Also, some feature values may not be programmatically accessible. (In the case of an adapter for SAX1 &lt;a href=&quot;parser&quot;&gt;&lt;code&gt;Parser&lt;/code&gt;&lt;/a&gt;, there is no implementation-independent way to expose whether the underlying parser is performing validation, expanding external entities, and so forth.)</source>
          <target state="translated">機能名は完全修飾URIです。XMLReaderが機能名を認識しても、一時的にその値を返すことができない可能性があります。一部の特徴値は、解析前、解析中、解析後など、特定のコンテキストでのみ使用できる場合があります。また、一部の機能値はプログラムでアクセスできない場合があります。（SAX1&lt;a href=&quot;parser&quot;&gt; &lt;code&gt;Parser&lt;/code&gt; &lt;/a&gt;アダプターの場合、基盤となるパーサーが検証を実行しているか、外部エンティティを拡張しているかなどを公開するための実装に依存しない方法はありません。）</target>
        </trans-unit>
        <trans-unit id="b91218e70f871a17a2f6362660e1e868c721d3f4" translate="yes" xml:space="preserve">
          <source>The ffi ligature is not a distinct semantic character, and strictly speaking it shouldn't be in Unicode at all, but it was included for compatibility with existing character sets that already provided it. The Unicode standard identifies such characters by giving them &quot;compatibility&quot; decompositions into the corresponding semantic characters. When sorting and searching, you will often want to use these mappings.</source>
          <target state="translated">ffi の合字は明確な意味文字ではありませんし、厳密に言えば Unicode には全くないはずですが、すでにそれを提供している既存の文字集合との互換性のために含まれています。Unicode標準では、そのような文字を、対応する意味文字への「互換性」分解を与えることで識別しています。並べ替えや検索の際には、これらのマッピングを使いたくなることが多いでしょう。</target>
        </trans-unit>
        <trans-unit id="fc1056366c58e729dc6afba4a88b156e84cb7c50" translate="yes" xml:space="preserve">
          <source>The field has a range that matches &lt;a href=&quot;../localdate#MAX&quot;&gt;&lt;code&gt;LocalDate.MAX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../localdate#MIN&quot;&gt;&lt;code&gt;LocalDate.MIN&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィールドには、&lt;a href=&quot;../localdate#MAX&quot;&gt; &lt;code&gt;LocalDate.MAX&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../localdate#MIN&quot;&gt; &lt;code&gt;LocalDate.MIN&lt;/code&gt; &lt;/a&gt;と一致する範囲があります。</target>
        </trans-unit>
        <trans-unit id="712e6cc0a25fd23aff0938900316cf865ad97a3d" translate="yes" xml:space="preserve">
          <source>The field is set to the possibly unwrapped and widened new value.</source>
          <target state="translated">このフィールドには、ラップされていない可能性のある拡張された新しい値が設定されます。</target>
        </trans-unit>
        <trans-unit id="ec741d1bc5da33c15fd4cf9fae30220bb200e38a" translate="yes" xml:space="preserve">
          <source>The field that represents the day-of-quarter.</source>
          <target state="translated">曜日を表すフィールドです。</target>
        </trans-unit>
        <trans-unit id="8b7d9fb854224c991ea3360c6b4c23f03fd566dd" translate="yes" xml:space="preserve">
          <source>The field that represents the quarter-of-year.</source>
          <target state="translated">四半期を表すフィールドです。</target>
        </trans-unit>
        <trans-unit id="795dbdb11ae198b5c6c80f4f325863a9203509aa" translate="yes" xml:space="preserve">
          <source>The field that represents the week-based-year.</source>
          <target state="translated">週ベースの年を表すフィールド。</target>
        </trans-unit>
        <trans-unit id="b9b5cb4820b010459b1459912d80e5cb74d3e0ec" translate="yes" xml:space="preserve">
          <source>The field that represents the week-of-week-based-year.</source>
          <target state="translated">週を基準とした年を表す分野。</target>
        </trans-unit>
        <trans-unit id="11a83d8eda116d371253332d6166c5c806d645ad" translate="yes" xml:space="preserve">
          <source>The field to be reflected is determined by the algorithm that follows. Let C be the class or interface represented by this object:</source>
          <target state="translated">反映されるフィールドは、以下のアルゴリズムで決定されます。Cをこのオブジェクトで表されるクラスまたはインターフェースとする。</target>
        </trans-unit>
        <trans-unit id="3065ed970efb34e44cb7669dd9013a7609717b99" translate="yes" xml:space="preserve">
          <source>The field value will be validated before it is set. If it is not valid, then an exception will be thrown. If the arrays are empty, then no change will take effect.</source>
          <target state="translated">フィールドの値は、設定する前に検証されます。有効でない場合は例外がスローされます。配列が空の場合は、変更は有効になりません。</target>
        </trans-unit>
        <trans-unit id="f4511f22417eeea0c45d403aa99ec6c4e5f493b0" translate="yes" xml:space="preserve">
          <source>The field value will be validated before it is set. If it is not valid, then an exception will be thrown. The meaning of validity is dependent on the descriptor implementation.</source>
          <target state="translated">フィールドの値は、設定する前に検証されます。有効でない場合は例外がスローされます。有効性の意味は、ディスクリプタの実装に依存します。</target>
        </trans-unit>
        <trans-unit id="f4f3c25408da24ec64080897e774ca4ee83c6a8b" translate="yes" xml:space="preserve">
          <source>The field works using double dispatch. Client code calls methods on a date-time like &lt;code&gt;LocalDateTime&lt;/code&gt; which check if the field is a &lt;code&gt;ChronoField&lt;/code&gt;. If it is, then the date-time must handle it. Otherwise, the method call is re-dispatched to the matching method in this interface.</source>
          <target state="translated">フィールドは二重ディスパッチを使用して機能します。クライアントコードは次のように日付と時刻のメソッド呼び出した &lt;code&gt;LocalDateTime&lt;/code&gt; フィールドがあるかどうかを確認 &lt;code&gt;ChronoField&lt;/code&gt; を。そうである場合、日時はそれを処理する必要があります。それ以外の場合、メソッド呼び出しは、このインターフェースの一致するメソッドに再ディスパッチされます。</target>
        </trans-unit>
        <trans-unit id="e4839ebe0ad3becd201658aabfeaad5b34a64e2c" translate="yes" xml:space="preserve">
          <source>The fields and methods of class &lt;code&gt;Character&lt;/code&gt; are defined in terms of character information from the Unicode Standard, specifically the</source>
          <target state="translated">クラス &lt;code&gt;Character&lt;/code&gt; のフィールドとメソッドは、Unicode標準の文字情報、特に</target>
        </trans-unit>
        <trans-unit id="d2445e43410c56b93c9fa902256806bdd8ac4225" translate="yes" xml:space="preserve">
          <source>The fields are defined as follows:</source>
          <target state="translated">フィールドは以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="3950e6b64e221a1449f2c57aec2e0333531ef343" translate="yes" xml:space="preserve">
          <source>The fields are implemented relative to &lt;a href=&quot;chronofield#EPOCH_DAY&quot;&gt;&lt;code&gt;EPOCH_DAY&lt;/code&gt;&lt;/a&gt;. The fields are supported, and can be queried and set if &lt;code&gt;EPOCH_DAY&lt;/code&gt; is available. The fields work with all chronologies.</source>
          <target state="translated">フィールドは&lt;a href=&quot;chronofield#EPOCH_DAY&quot;&gt; &lt;code&gt;EPOCH_DAY&lt;/code&gt; に&lt;/a&gt;関連して実装されます。フィールドはサポートされており、 &lt;code&gt;EPOCH_DAY&lt;/code&gt; が使用可能な場合は照会および設定できます。フィールドはすべての年代順に機能します。</target>
        </trans-unit>
        <trans-unit id="416b3833cc7cce95a21e499f3289802c5a8cb7d0" translate="yes" xml:space="preserve">
          <source>The fields declared in this class may evolve over time, in line with the results of the &lt;a href=&quot;#values()&quot;&gt;&lt;code&gt;values()&lt;/code&gt;&lt;/a&gt; method. However, there is not necessarily a 1:1 correspondence between the fields and the singleton instances., The Japanese government may announce a new era and define its start date but not its official name. In this scenario, the singleton instance that represents the new era may return a name that is not stable until the official name is defined. Developers should exercise caution when relying on the name returned by any singleton instance that does not correspond to a public static final field.</source>
          <target state="translated">このクラスで宣言されたフィールドは、&lt;a href=&quot;#values()&quot;&gt; &lt;code&gt;values()&lt;/code&gt; &lt;/a&gt;メソッドの結果に沿って、時間の経過とともに進化する可能性があります。ただし、フィールドとシングルトンインスタンスの間には、必ずしも1：1の対応があるとは限りません。日本政府は、新しい時代を発表し、開始日を定義する場合がありますが、正式な名前は定義しません。このシナリオでは、新しい時代を表すシングルトンインスタンスが、正式な名前が定義されるまで安定しない名前を返す場合があります。開発者は、パブリック静的最終フィールドに対応しないシングルトンインスタンスによって返される名前に依存する場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="199b733d0ffa6832d77eb936ddcc1d5a1518b3c2" translate="yes" xml:space="preserve">
          <source>The fields in the descriptor are defined, but not limited to, the following. Note that when the Type in this table is Number, a String that is the decimal representation of a Long can also be used.</source>
          <target state="translated">記述子のフィールドは、以下のように定義されているが、これに限定されるものではない。この表のTypeがNumberの場合、Longの10進数表現であるStringも使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7aaadf5bb6f708c9bde8a8c259cf01d22980be49" translate="yes" xml:space="preserve">
          <source>The fields look-and-feel implementation manages the values of the minimum, maximum, and extent properties on the &lt;code&gt;BoundedRangeModel&lt;/code&gt;.</source>
          <target state="translated">フィールドのルックアンドフィール実装は、 &lt;code&gt;BoundedRangeModel&lt;/code&gt; の最小、最大、およびエクステントプロパティの値を管理します。</target>
        </trans-unit>
        <trans-unit id="099b596e3512e7c46df50b765ec430971ea0930b" translate="yes" xml:space="preserve">
          <source>The fifth and later elements of a version number are free for use by platform implementors, to identify implementor-specific patch releases.</source>
          <target state="translated">バージョン番号の5番目以降の要素は、プラットフォームの実装者が、実装者固有のパッチリリースを識別するために無料で使用することができます。</target>
        </trans-unit>
        <trans-unit id="77a383d343c59d3896d5803d4ffc93f25fe7eded" translate="yes" xml:space="preserve">
          <source>The file MyResources_fr_CH.properties is never used because it is hidden by the MyResources_fr_CH.class. Likewise, MyResources.properties is also hidden by MyResources.class.</source>
          <target state="translated">MyResources_fr_CH.propertiesというファイルは、MyResources_fr_CH.classによって隠されているため、決して使用されません。同様に、MyResources.propertiesもMyResources.classによって隠されています。</target>
        </trans-unit>
        <trans-unit id="460768a160dbe254fd47bae9a1c6fbf466aa407e" translate="yes" xml:space="preserve">
          <source>The file and its description are available from the Unicode Consortium at:</source>
          <target state="translated">このファイルとその説明は、Unicodeコンソーシアムから入手可能です。</target>
        </trans-unit>
        <trans-unit id="f251bc6a4d2b0bde005fe4027e04e7ba955f80f7" translate="yes" xml:space="preserve">
          <source>The file attributes are retrieved from the file system as a &lt;em&gt;bulk operation&lt;/em&gt; by invoking the &lt;a href=&quot;#readAttributes()&quot;&gt;&lt;code&gt;readAttributes&lt;/code&gt;&lt;/a&gt; method. This class also defines the &lt;a href=&quot;#setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)&quot;&gt;&lt;code&gt;setTimes&lt;/code&gt;&lt;/a&gt; method to update the file's time attributes.</source>
          <target state="translated">ファイル属性は、&lt;a href=&quot;#readAttributes()&quot;&gt; &lt;code&gt;readAttributes&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより、&lt;em&gt;一括操作&lt;/em&gt;としてファイルシステムから取得されます。このクラスは、ファイルの時間属性を更新するための&lt;a href=&quot;#setTimes(java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime,java.nio.file.attribute.FileTime)&quot;&gt; &lt;code&gt;setTimes&lt;/code&gt; &lt;/a&gt;メソッドも定義します。</target>
        </trans-unit>
        <trans-unit id="d38047699bda15b24d821107e47230d44ea40f06" translate="yes" xml:space="preserve">
          <source>The file attributes are retrieved from the file system as a &lt;em&gt;bulk operation&lt;/em&gt; by invoking the &lt;a href=&quot;basicfileattributeview#readAttributes--&quot;&gt;&lt;code&gt;readAttributes&lt;/code&gt;&lt;/a&gt; method. This class also defines the &lt;a href=&quot;basicfileattributeview#setTimes-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-&quot;&gt;&lt;code&gt;setTimes&lt;/code&gt;&lt;/a&gt; method to update the file's time attributes.</source>
          <target state="translated">ファイル属性は、&lt;a href=&quot;basicfileattributeview#readAttributes--&quot;&gt; &lt;code&gt;readAttributes&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことにより、&lt;em&gt;一括操作&lt;/em&gt;としてファイルシステムから取得されます。このクラスは、ファイルの時間属性を更新するための&lt;a href=&quot;basicfileattributeview#setTimes-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-java.nio.file.attribute.FileTime-&quot;&gt; &lt;code&gt;setTimes&lt;/code&gt; &lt;/a&gt;メソッドも定義します。</target>
        </trans-unit>
        <trans-unit id="3d0ad957ceac44bd60f317f1b1648150ac44473f" translate="yes" xml:space="preserve">
          <source>The file channel, or &lt;code&gt;null&lt;/code&gt; if the file lock was not acquired by a file channel.</source>
          <target state="translated">ファイルチャネル、または &lt;code&gt;null&lt;/code&gt; ファイルロックは、ファイルチャネルによって取得されなかった場合。</target>
        </trans-unit>
        <trans-unit id="500deb1ea9502c9ecef51d1cffe190f21f116b2f" translate="yes" xml:space="preserve">
          <source>The file contents must not change between the time this object is constructed and the time of the last call to a read method.</source>
          <target state="translated">ファイルの内容は、このオブジェクトが構築された時点と、最後にreadメソッドを呼び出した時点との間で変更されてはなりません。</target>
        </trans-unit>
        <trans-unit id="3117d2550b74f219a5e4412223eb2945551e2f2b" translate="yes" xml:space="preserve">
          <source>The file contents should not be modified during the execution of the terminal stream operation. Otherwise, the result of the terminal stream operation is undefined.</source>
          <target state="translated">ターミナルストリーム操作の実行中にファイルの内容を変更してはならない。そうでない場合、ターミナルストリーム操作の結果は未定義となる。</target>
        </trans-unit>
        <trans-unit id="6987d175ec15b9fcb76b79ad3971d92541e405c9" translate="yes" xml:space="preserve">
          <source>The file creation methods take a variable number of arguments to allow the &lt;em&gt;originating elements&lt;/em&gt; to be provided as hints to the tool infrastructure to better manage dependencies. The originating elements are the types or packages (representing &lt;code&gt;
 package-info&lt;/code&gt; files) or modules (representing &lt;code&gt;
 module-info&lt;/code&gt; files) which caused an annotation processor to attempt to create a new file. For example, if an annotation processor tries to create a source file, &lt;code&gt;
 GeneratedFromUserSource&lt;/code&gt;, in response to processing</source>
          <target state="translated">ファイル作成メソッドは可変数の引数を取り、依存関係をより適切に管理するためのツールインフラストラクチャへのヒントとして&lt;em&gt;元の要素&lt;/em&gt;を提供できるようにします。元の要素は、注釈プロセッサが新しいファイルを作成しようとする原因となったタイプまたはパッケージ（ &lt;code&gt; package-info&lt;/code&gt; ファイルを表す）またはモジュール（ &lt;code&gt; module-info&lt;/code&gt; ファイルを表す）です。たとえば、注釈プロセッサが処理に応答してソースファイル &lt;code&gt; GeneratedFromUserSource&lt;/code&gt; を作成しようとした場合</target>
        </trans-unit>
        <trans-unit id="6abc4cd51296b6f0da0c0a949b11937dfb0ddb48" translate="yes" xml:space="preserve">
          <source>The file creation methods take a variable number of arguments to allow the &lt;em&gt;originating elements&lt;/em&gt; to be provided as hints to the tool infrastructure to better manage dependencies. The originating elements are the types or packages (representing &lt;code&gt;package-info&lt;/code&gt; files) which caused an annotation processor to attempt to create a new file. For example, if an annotation processor tries to create a source file, &lt;code&gt;GeneratedFromUserSource&lt;/code&gt;, in response to processing</source>
          <target state="translated">ファイル作成メソッドは可変数の引数を取って、依存関係をより適切に管理するためのヒントとして、&lt;em&gt;元の要素&lt;/em&gt;をツールインフラストラクチャに提供できます。元の要素は、注釈プロセッサが新しいファイルを作成しようとした原因となったタイプまたはパッケージ（ &lt;code&gt;package-info&lt;/code&gt; ファイルを表す）です。たとえば、注釈プロセッサが処理に応答してソースファイル &lt;code&gt;GeneratedFromUserSource&lt;/code&gt; を作成しようとした場合</target>
        </trans-unit>
        <trans-unit id="67561e9ae30efb52fd2ccb565fc1f4c64205ef9b" translate="yes" xml:space="preserve">
          <source>The file denoted by the returned abstract pathname did not exist before this method was invoked, and</source>
          <target state="translated">返された抽象パス名で示されるファイルは、このメソッドが呼び出される前には存在していませんでした。</target>
        </trans-unit>
        <trans-unit id="9aa2ea757056f97f63f34c1ea5a82cce074962fc" translate="yes" xml:space="preserve">
          <source>The file descriptor object for this socket.</source>
          <target state="translated">このソケットのファイルディスクリプタオブジェクト。</target>
        </trans-unit>
        <trans-unit id="7314353b4cf774f72ba9ddad96690ede6bed41df" translate="yes" xml:space="preserve">
          <source>The file descriptor object.</source>
          <target state="translated">ファイル記述子オブジェクト。</target>
        </trans-unit>
        <trans-unit id="f09dc1410e94ff66898b33b377f334bb2824ec23" translate="yes" xml:space="preserve">
          <source>The file key returned by this method can only be guaranteed to be unique if the file system and files remain static. Whether a file system re-uses identifiers after a file is deleted is implementation dependent and therefore unspecified.</source>
          <target state="translated">このメソッドが返すファイルキーが一意であることを保証できるのは、ファイルシステムとファイルが静的なままの場合のみです。ファイルが削除された後にファイルシステムが識別子を再利用するかどうかは実装に依存します。</target>
        </trans-unit>
        <trans-unit id="f25f321f8eb0a82b7ff487834df19c31087676d0" translate="yes" xml:space="preserve">
          <source>The file manager returned by calling &lt;a href=&quot;documentationtool#getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)&quot;&gt;&lt;code&gt;getStandardFileManager&lt;/code&gt;&lt;/a&gt; on this tool supports paths provided by any &lt;a href=&quot;../../../java.base/java/nio/file/filesystem&quot;&gt;filesystem&lt;/a&gt;.</source>
          <target state="translated">このツールで&lt;a href=&quot;documentationtool#getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)&quot;&gt; &lt;code&gt;getStandardFileManager&lt;/code&gt; &lt;/a&gt;を呼び出すことによって返されるファイルマネージャーは、任意の&lt;a href=&quot;../../../java.base/java/nio/file/filesystem&quot;&gt;ファイルシステム&lt;/a&gt;によって提供されるパスをサポートします。</target>
        </trans-unit>
        <trans-unit id="7799300b539af42175bcd2d293282140270baea9" translate="yes" xml:space="preserve">
          <source>The file manager returned by calling &lt;a href=&quot;javacompiler#getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)&quot;&gt;&lt;code&gt;getStandardFileManager&lt;/code&gt;&lt;/a&gt; on this compiler supports paths provided by any &lt;a href=&quot;../../../java.base/java/nio/file/filesystem&quot;&gt;filesystem&lt;/a&gt;.</source>
          <target state="translated">このコンパイラで&lt;a href=&quot;javacompiler#getStandardFileManager(javax.tools.DiagnosticListener,java.util.Locale,java.nio.charset.Charset)&quot;&gt; &lt;code&gt;getStandardFileManager&lt;/code&gt; &lt;/a&gt;を呼び出すことによって返されるファイルマネージャは、任意の&lt;a href=&quot;../../../java.base/java/nio/file/filesystem&quot;&gt;ファイルシステム&lt;/a&gt;によって提供されるパスをサポートします。</target>
        </trans-unit>
        <trans-unit id="b7425c0f40a18828eac5ac2c682f75622122775e" translate="yes" xml:space="preserve">
          <source>The file manager which all methods are delegated to.</source>
          <target state="translated">すべてのメソッドが委任されるファイルマネージャ。</target>
        </trans-unit>
        <trans-unit id="c8db30cdd7f6bac3afaba29ab13bca0e83da6504" translate="yes" xml:space="preserve">
          <source>The file name of the script or some other string describing the script source. May return some implementation-defined string such as</source>
          <target state="translated">スクリプトのファイル名、またはスクリプトのソースを記述する他の文字列。のような実装定義文字列を返すこともあります。</target>
        </trans-unit>
        <trans-unit id="1bb2b9f1de9de831304e060cac7b16327f82123a" translate="yes" xml:space="preserve">
          <source>The file object which all methods are delegated to.</source>
          <target state="translated">すべてのメソッドがデリゲートされるファイルオブジェクト。</target>
        </trans-unit>
        <trans-unit id="3a806133f7b79e0318d4ff99608188522a38bce2" translate="yes" xml:space="preserve">
          <source>The file should contain a list of fully-qualified class names, one per line, of classes implementing the &lt;code&gt;java.awt.im.spi.InputMethodDescriptor&lt;/code&gt; interface. Space and tab characters surrounding each name, as well as blank lines, are ignored. The comment character is &lt;code&gt;'#'&lt;/code&gt; (&lt;code&gt;\u0023&lt;/code&gt;); on each line all characters following the first comment character are ignored. The file must be encoded in UTF-8.</source>
          <target state="translated">このファイルには、 &lt;code&gt;java.awt.im.spi.InputMethodDescriptor&lt;/code&gt; インターフェースを実装するクラスの完全修飾クラス名のリストが1行に1つずつ含まれている必要があります。各名前を囲むスペースとタブ文字、および空白行は無視されます。コメント文字は &lt;code&gt;'#'&lt;/code&gt; （ &lt;code&gt;\u0023&lt;/code&gt; ）; 各行で、最初のコメント文字に続くすべての文字が無視されます。ファイルはUTF-8でエンコードする必要があります。</target>
        </trans-unit>
        <trans-unit id="0825f60097e94d1e85c49fd153a3b65272d6b95a" translate="yes" xml:space="preserve">
          <source>The file system</source>
          <target state="translated">ファイルシステム</target>
        </trans-unit>
        <trans-unit id="9a90e8cfc4e09b5ed06ec962ead13f62606cf4ed" translate="yes" xml:space="preserve">
          <source>The filter is configured during the initialization of the &lt;code&gt;ObjectInputFilter.Config&lt;/code&gt; class. For example, by calling &lt;a href=&quot;#getSerialFilter()&quot;&gt;&lt;code&gt;Config.getSerialFilter&lt;/code&gt;&lt;/a&gt;. If the system property &lt;code&gt;jdk.serialFilter&lt;/code&gt; is defined, it is used to configure the filter. If the system property is not defined, and the &lt;a href=&quot;../security/security&quot;&gt;&lt;code&gt;Security&lt;/code&gt;&lt;/a&gt; property &lt;code&gt;jdk.serialFilter&lt;/code&gt; is defined then it is used to configure the filter. Otherwise, the filter is not configured during initialization. The syntax for each property is the same as for the &lt;a href=&quot;#createFilter(java.lang.String)&quot;&gt;&lt;code&gt;createFilter&lt;/code&gt;&lt;/a&gt; method. If a filter is not configured, it can be set with &lt;a href=&quot;#setSerialFilter(java.io.ObjectInputFilter)&quot;&gt;&lt;code&gt;Config.setSerialFilter&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">フィルタは、 &lt;code&gt;ObjectInputFilter.Config&lt;/code&gt; クラスの初期化中に構成されます。たとえば、&lt;a href=&quot;#getSerialFilter()&quot;&gt; &lt;code&gt;Config.getSerialFilter&lt;/code&gt; &lt;/a&gt;を呼び出します。システムプロパティ &lt;code&gt;jdk.serialFilter&lt;/code&gt; が定義されている場合、それはフィルタを設定するために使用されます。システムプロパティが定義されておらず、&lt;a href=&quot;../security/security&quot;&gt; &lt;code&gt;Security&lt;/code&gt; &lt;/a&gt;プロパティ &lt;code&gt;jdk.serialFilter&lt;/code&gt; が定義されている場合は、それを使用してフィルタを構成します。それ以外の場合、フィルターは初期化中に構成されません。各プロパティの構文は、&lt;a href=&quot;#createFilter(java.lang.String)&quot;&gt; &lt;code&gt;createFilter&lt;/code&gt; &lt;/a&gt;メソッドの場合と同じです。フィルタが設定されていない場合は、&lt;a href=&quot;#setSerialFilter(java.io.ObjectInputFilter)&quot;&gt; &lt;code&gt;Config.setSerialFilter&lt;/code&gt; &lt;/a&gt;で設定できます。</target>
        </trans-unit>
        <trans-unit id="ff4b58737685fb954d5e6efd0b5fae17d564182d" translate="yes" xml:space="preserve">
          <source>The filter is invoked after the operations requested by the &lt;code&gt;DOMConfiguration&lt;/code&gt; parameters have been applied. For example, CDATA sections won't be passed to the filter if &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-cdata-sections&quot;&gt;cdata-sections&lt;/a&gt;&quot; is set to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">フィルタは、 &lt;code&gt;DOMConfiguration&lt;/code&gt; パラメータによって要求された操作が適用された後に呼び出されます。たとえば、「&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-cdata-sections&quot;&gt;cdata-sections&lt;/a&gt;」が &lt;code&gt;false&lt;/code&gt; に設定されている場合、CDATAセクションはフィルターに渡されません。</target>
        </trans-unit>
        <trans-unit id="aee74c092bc8041c2e7b9c7b125cf7d0d399124b" translate="yes" xml:space="preserve">
          <source>The filter is invoked after the operations requested by the &lt;code&gt;DOMConfiguration&lt;/code&gt; parameters have been applied. For example, if &quot;&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate&quot;&gt;validate&lt;/a&gt;&quot; is set to &lt;code&gt;true&lt;/code&gt;, the validation is done before invoking the filter.</source>
          <target state="translated">フィルタは、 &lt;code&gt;DOMConfiguration&lt;/code&gt; パラメータによって要求された操作が適用された後に呼び出されます。たとえば、「&lt;a href=&quot;https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#parameter-validate&quot;&gt;validate&lt;/a&gt;」が &lt;code&gt;true&lt;/code&gt; に設定されている場合、検証はフィルタを呼び出す前に実行されます。</target>
        </trans-unit>
        <trans-unit id="906ee1389ef5cd14a7ec03e188e600e544d2552c" translate="yes" xml:space="preserve">
          <source>The filter pattern must be in same format as used in &lt;a href=&quot;../../../../../java.base/java/io/objectinputfilter.config#createFilter(java.lang.String)&quot;&gt;&lt;code&gt;ObjectInputFilter.Config.createFilter(java.lang.String)&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">フィルタパターンは、&lt;a href=&quot;../../../../../java.base/java/io/objectinputfilter.config#createFilter(java.lang.String)&quot;&gt; &lt;code&gt;ObjectInputFilter.Config.createFilter(java.lang.String)&lt;/code&gt; で&lt;/a&gt;使用されているものと同じ形式である必要があります。</target>
        </trans-unit>
        <trans-unit id="1ed7ce7533f8762abf456d783918b102ff8a2c23" translate="yes" xml:space="preserve">
          <source>The filter used to screen nodes.</source>
          <target state="translated">ノードのスクリーニングに使用されるフィルタ。</target>
        </trans-unit>
        <trans-unit id="ce369c494176a07dc8044cc958be4b24a28b2631" translate="yes" xml:space="preserve">
          <source>The filter will be called for any class found in the serialized stream sent to server by client, including all JMX defined classes (such as &lt;a href=&quot;../../../../../java.management/javax/management/objectname&quot;&gt;&lt;code&gt;ObjectName&lt;/code&gt;&lt;/a&gt;), all method parameters, and, if present in the stream, all classes transitively referred by the serial form of any deserialized object. The pattern must be in same format as used in &lt;a href=&quot;../../../../../java.base/java/io/objectinputfilter.config#createFilter(java.lang.String)&quot;&gt;&lt;code&gt;ObjectInputFilter.Config.createFilter(java.lang.String)&lt;/code&gt;&lt;/a&gt;. It may define a white list of permitted classes, a black list of rejected classes, a maximum depth for the deserialized objects, etc.</source>
          <target state="translated">フィルタは、クライアントによってサーバーに送信されたシリアル化されたストリームで見つかったすべてのクラスに対して呼び出されます。これには、すべてのJMX定義クラス（&lt;a href=&quot;../../../../../java.management/javax/management/objectname&quot;&gt; &lt;code&gt;ObjectName&lt;/code&gt; &lt;/a&gt;など）、すべてのメソッドパラメータ、およびストリームに存在する場合は、シリアル形式によって一時的に参照されるすべてのクラスが含まれます。デシリアライズされたオブジェクトの。パターンは、&lt;a href=&quot;../../../../../java.base/java/io/objectinputfilter.config#createFilter(java.lang.String)&quot;&gt; &lt;code&gt;ObjectInputFilter.Config.createFilter(java.lang.String)&lt;/code&gt; で&lt;/a&gt;使用されているものと同じ形式である必要があります。許可されたクラスのホワイトリスト、拒否されたクラスのブラックリスト、逆シリアル化されたオブジェクトの最大深度などを定義できます。</target>
        </trans-unit>
        <trans-unit id="283ebc0cee047a651cef3bfafef961690ec56e62" translate="yes" xml:space="preserve">
          <source>The filter, when not &lt;code&gt;null&lt;/code&gt;, is invoked during &lt;a href=&quot;#readObject()&quot;&gt;&lt;code&gt;readObject&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;#readUnshared()&quot;&gt;&lt;code&gt;readUnshared&lt;/code&gt;&lt;/a&gt; for each object (regular or class) in the stream. Strings are treated as primitives and do not invoke the filter. The filter is called for:</source>
          <target state="translated">&lt;code&gt;null&lt;/code&gt; でない場合、フィルターは、ストリーム内の各オブジェクト（通常またはクラス）の&lt;a href=&quot;#readObject()&quot;&gt; &lt;code&gt;readObject&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;#readUnshared()&quot;&gt; &lt;code&gt;readUnshared&lt;/code&gt; &lt;/a&gt;中に呼び出されます。文字列はプリミティブとして扱われ、フィルターを呼び出しません。フィルタが必要です：</target>
        </trans-unit>
        <trans-unit id="9da1890ea92c18a80409737edd5b3b2d29e7817f" translate="yes" xml:space="preserve">
          <source>The filtered &lt;code&gt;BufferedImage&lt;/code&gt;.</source>
          <target state="translated">フィルタリングされた &lt;code&gt;BufferedImage&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="65f3a38e57b9dd6fdfb5778ac5db35b1bc7064a3" translate="yes" xml:space="preserve">
          <source>The filtered &lt;code&gt;Raster&lt;/code&gt;.</source>
          <target state="translated">フィルタリングされた &lt;code&gt;Raster&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="82f5231af999cd534e151548b4f1675b3dfd6445" translate="yes" xml:space="preserve">
          <source>The filtering method will behave as follows:</source>
          <target state="translated">フィルタリング方法は以下のように動作します。</target>
        </trans-unit>
        <trans-unit id="d896ef01136035a55ade69aaf7e02f44f8e7c594" translate="yes" xml:space="preserve">
          <source>The filtering operation returns all matching language tags. It is defined in RFC 4647 as follows: &quot;In filtering, each language range represents the least specific language tag (that is, the language tag with fewest number of subtags) that is an acceptable match. All of the language tags in the matching set of tags will have an equal or greater number of subtags than the language range. Every non-wildcard subtag in the language range will appear in every one of the matching language tags.&quot;</source>
          <target state="translated">フィルタリング操作は、一致するすべての言語タグを返します。これはRFC 4647で次のように定義されています。&quot;フィルタリングでは、各言語範囲は、許容可能な一致を示す最小の言語タグ(つまり、サブタグの数が最も少ない言語タグ)を表します。マッチするタグのセット内のすべての言語タグは、その言語範囲と同じかそれ以上の数のサブタグを持っています。言語範囲内のすべての非ワイルドカードサブタグは、一致する言語タグのすべてに出現する。&quot;</target>
        </trans-unit>
        <trans-unit id="58673811cc709742eb06b89d83fea33b405113c2" translate="yes" xml:space="preserve">
          <source>The final mechanism is to attempt to instantiate the &lt;code&gt;Class&lt;/code&gt; specified by &lt;a href=&quot;#DATATYPEFACTORY_IMPLEMENTATION_CLASS&quot;&gt;&lt;code&gt;DATATYPEFACTORY_IMPLEMENTATION_CLASS&lt;/code&gt;&lt;/a&gt;. Any Exception thrown during the instantiation process is wrapped as a &lt;a href=&quot;datatypeconfigurationexception&quot;&gt;&lt;code&gt;DatatypeConfigurationException&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">最後のメカニズムは、&lt;a href=&quot;#DATATYPEFACTORY_IMPLEMENTATION_CLASS&quot;&gt; &lt;code&gt;DATATYPEFACTORY_IMPLEMENTATION_CLASS&lt;/code&gt; で&lt;/a&gt;指定された &lt;code&gt;Class&lt;/code&gt; インスタンス化を試みることです。インスタンス化プロセス中にスローされた例外はすべて、&lt;a href=&quot;datatypeconfigurationexception&quot;&gt; &lt;code&gt;DatatypeConfigurationException&lt;/code&gt; &lt;/a&gt;としてラップされます。</target>
        </trans-unit>
        <trans-unit id="d3162e7feec30f14f4aa6ef15c92c46449634803" translate="yes" xml:space="preserve">
          <source>The final results of decoding will be the same whether or not intermediate updates are performed. Thus if only the final image is desired it may be preferable not to register any &lt;code&gt;IIOReadUpdateListener&lt;/code&gt;s. In general, progressive updating is most effective when fetching images over a network connection that is very slow compared to local CPU processing; over a fast connection, progressive updates may actually slow down the presentation of the image.</source>
          <target state="translated">中間更新が実行されるかどうかに関係なく、デコードの最終結果は同じになります。したがって、最終的なイメージのみが必要な場合は、 &lt;code&gt;IIOReadUpdateListener&lt;/code&gt; を登録しない方が望ましい場合があります。一般に、プログレッシブ更新は、ローカルCPU処理に比べて非常に遅いネットワーク接続を介して画像をフェッチする場合に最も効果的です。高速接続では、プログレッシブ更新により実際に画像の表示が遅くなる場合があります。</target>
        </trans-unit>
        <trans-unit id="1d110cf80264e279c1436d299ebda35ec112c3fd" translate="yes" xml:space="preserve">
          <source>The final value from either the positive or negative case is then rounded to the destination precision.</source>
          <target state="translated">そして、正の場合と負の場合のどちらかの最終的な値は、出力先の精度に丸められます。</target>
        </trans-unit>
        <trans-unit id="85e44e3203522806af8cd170951c01b954d7f6b9" translate="yes" xml:space="preserve">
          <source>The finalization mechanism is inherently problematic.</source>
          <target state="translated">確定の仕組みには本質的に問題があります。</target>
        </trans-unit>
        <trans-unit id="43ad00bd49bb737cdb4c6319c59540923fdbcb9f" translate="yes" xml:space="preserve">
          <source>The finalization mechanism is inherently problematic. Finalization can lead to performance issues, deadlocks, and hangs. Errors in finalizers can lead to resource leaks; there is no way to cancel finalization if it is no longer necessary; and no ordering is specified among calls to &lt;code&gt;finalize&lt;/code&gt; methods of different objects. Furthermore, there are no guarantees regarding the timing of finalization. The &lt;code&gt;finalize&lt;/code&gt; method might be called on a finalizable object only after an indefinite delay, if at all. Classes whose instances hold non-heap resources should provide a method to enable explicit release of those resources, and they should also implement &lt;a href=&quot;autocloseable&quot;&gt;&lt;code&gt;AutoCloseable&lt;/code&gt;&lt;/a&gt; if appropriate. The &lt;a href=&quot;ref/cleaner&quot;&gt;&lt;code&gt;Cleaner&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;ref/phantomreference&quot;&gt;&lt;code&gt;PhantomReference&lt;/code&gt;&lt;/a&gt; provide more flexible and efficient ways to release resources when an object becomes unreachable.</source>
          <target state="translated">ファイナライズメカニズムには本質的に問題があります。ファイナライズは、パフォーマンスの問題、デッドロック、およびハングにつながる可能性があります。ファイナライザーのエラーは、リソースリークにつながる可能性があります。ファイナライズが不要になった場合、ファイナライズをキャンセルする方法はありません。また、さまざまなオブジェクトのメソッドを &lt;code&gt;finalize&lt;/code&gt; するための呼び出しの間に順序は指定されていません。また、ファイナライズのタイミングについては保証いたしかねます。 &lt;code&gt;finalize&lt;/code&gt; すべての場合、このメソッドは、唯一の無期限の遅延の後にファイナライズ可能オブジェクトで呼び出されるかもしれません。インスタンスが非ヒープリソースを保持するクラスは、それらのリソースの明示的な解放を可能にするメソッドを提供する必要があり、必要に応じて&lt;a href=&quot;autocloseable&quot;&gt; &lt;code&gt;AutoCloseable&lt;/code&gt; &lt;/a&gt;も実装する必要があります。&lt;a href=&quot;ref/cleaner&quot;&gt; &lt;code&gt;Cleaner&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;ref/phantomreference&quot;&gt; &lt;code&gt;PhantomReference&lt;/code&gt; &lt;/a&gt; オブジェクトが到達不能になったときにリソースを解放するためのより柔軟で効率的な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="96b7c65ae72d541b50bbc707f4905bb257fc7bac" translate="yes" xml:space="preserve">
          <source>The findComponentAt method is different from getComponentAt in that getComponentAt only searches the Container's immediate children; if the containing component is a Container, findComponentAt will search that child to find a nested component.</source>
          <target state="translated">findComponentAtメソッドはgetComponentAtとは異なり、getComponentAtはコンテナの即時の子のみを検索します。</target>
        </trans-unit>
        <trans-unit id="f304bceeb53570b9b6ea4460744619719b33e8a1" translate="yes" xml:space="preserve">
          <source>The first &lt;a href=&quot;colormodel#getNumColorComponents()&quot;&gt;&lt;code&gt;getNumColorComponents&lt;/code&gt;&lt;/a&gt; indices refer to color samples.</source>
          <target state="translated">最初の&lt;a href=&quot;colormodel#getNumColorComponents()&quot;&gt; &lt;code&gt;getNumColorComponents&lt;/code&gt; &lt;/a&gt;インデックスは、カラーサンプルを参照します。</target>
        </trans-unit>
        <trans-unit id="225e537eb7919c395c9c76cb321d5092e5dfa93e" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;RowSet&lt;/code&gt; object added to this &lt;code&gt;JoinRowSet&lt;/code&gt; object forms the basis for the &lt;code&gt;JOIN&lt;/code&gt; relationship.</source>
          <target state="translated">この &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクトに追加された最初の &lt;code&gt;RowSet&lt;/code&gt; オブジェクトは、 &lt;code&gt;JOIN&lt;/code&gt; 関係の基礎を形成します。</target>
        </trans-unit>
        <trans-unit id="dceb51577509ae3dfa0af99f1bc1e752a22466e6" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;SysexMessage&lt;/code&gt; object containing data for a particular system exclusive message should have the status value 0xF0. If this message contains all the system exclusive data for the message, it should end with the status byte 0xF7 (EOX). Otherwise, additional system exclusive data should be sent in one or more &lt;code&gt;SysexMessages&lt;/code&gt; with a status value of 0xF7. The &lt;code&gt;SysexMessage&lt;/code&gt; containing the last of the data for the system exclusive message should end with the value 0xF7 (EOX) to mark the end of the system exclusive message.</source>
          <target state="translated">特定のシステムエクスクルーシブメッセージのデータを含む最初の &lt;code&gt;SysexMessage&lt;/code&gt; オブジェクトのステータス値は0xF0である必要があります。このメッセージにメッセージのすべてのシステムエクスクルーシブデータが含まれている場合は、ステータスバイト0xF7（EOX）で終了する必要があります。それ以外の場合は、追加のシステムエクスクルーシブデータを、ステータス値 &lt;code&gt;SysexMessages&lt;/code&gt; 1つ以上のSysexMessagesで送信する必要があります。 &lt;code&gt;SysexMessage&lt;/code&gt; 値0xF7（EOX）で終わらなければならないシステムエクスクルーシブメッセージのデータの最後を含む、システムエクスクルーシブメッセージの終わりをマークします。</target>
        </trans-unit>
        <trans-unit id="d2e2f7cac12c5ca488060725f68a6ecc25a456b2" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt; buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt; inclusive, and any input bytes that may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in a new buffer.</source>
          <target state="translated">最初の &lt;code&gt;inputLen&lt;/code&gt; は内バイト &lt;code&gt;input&lt;/code&gt; から始まるバッファ &lt;code&gt;inputOffset&lt;/code&gt; を含め、任意の入力は、前の間バッファリングされた可能性があることバイト &lt;code&gt;update&lt;/code&gt; 、操作処理され、パディングと（要求された場合）が適用されます。 GCM / CCMなどのAEADモードが使用されている場合、暗号化の場合は認証タグが付加され、復号化の場合は認証タグが検証されます。結果は新しいバッファに保存されます。</target>
        </trans-unit>
        <trans-unit id="450b35c105bb3a8a209c60a29d62db449ae9ed42" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt; buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt; inclusive, and any input bytes that may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at &lt;code&gt;outputOffset&lt;/code&gt; inclusive.</source>
          <target state="translated">最初の &lt;code&gt;inputLen&lt;/code&gt; は内バイト &lt;code&gt;input&lt;/code&gt; から始まるバッファ &lt;code&gt;inputOffset&lt;/code&gt; を含め、任意の入力は、前の間バッファリングされた可能性があることバイト &lt;code&gt;update&lt;/code&gt; 、操作処理され、パディングと（要求された場合）が適用されます。 GCM / CCMなどのAEADモードが使用されている場合、暗号化の場合は認証タグが付加され、復号化の場合は認証タグが検証されます。結果は、 &lt;code&gt;outputOffset&lt;/code&gt; から始まる &lt;code&gt;output&lt;/code&gt; バッファーに格納されます。</target>
        </trans-unit>
        <trans-unit id="a8bbd7df6363c689dcf63bfdd1fdab1320c3d681" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt; buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt; inclusive, and any input bytes that may have been buffered during a previous &lt;code&gt;update&lt;/code&gt; operation, are processed, with padding (if requested) being applied. If an AEAD mode such as GCM/CCM is being used, the authentication tag is appended in the case of encryption, or verified in the case of decryption. The result is stored in the &lt;code&gt;output&lt;/code&gt; buffer.</source>
          <target state="translated">最初の &lt;code&gt;inputLen&lt;/code&gt; は内バイト &lt;code&gt;input&lt;/code&gt; から始まるバッファ &lt;code&gt;inputOffset&lt;/code&gt; を含め、任意の入力は、前の間バッファリングされた可能性があることバイト &lt;code&gt;update&lt;/code&gt; 、操作処理され、パディングと（要求された場合）が適用されます。GCM / CCMなどのAEADモードが使用されている場合、暗号化の場合は認証タグが付加され、復号化の場合は認証タグが検証されます。結果は &lt;code&gt;output&lt;/code&gt; バッファに格納されます。</target>
        </trans-unit>
        <trans-unit id="28af7ec760e52fc6a243e293787fc7c9a7265ce5" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt; buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt; inclusive, are processed, and the result is stored in a new buffer.</source>
          <target state="translated">最初の &lt;code&gt;inputLen&lt;/code&gt; がでバイト &lt;code&gt;input&lt;/code&gt; バッファは、始まる &lt;code&gt;inputOffset&lt;/code&gt; を含め、処理され、結果が新しいバッファに格納されます。</target>
        </trans-unit>
        <trans-unit id="dee5e44e4c07e3f64df924e1f093b2408bc750bf" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt; buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt; inclusive, are processed, and the result is stored in the &lt;code&gt;output&lt;/code&gt; buffer, starting at &lt;code&gt;outputOffset&lt;/code&gt; inclusive.</source>
          <target state="translated">最初の &lt;code&gt;inputLen&lt;/code&gt; がでバイト &lt;code&gt;input&lt;/code&gt; から始まるバッファ &lt;code&gt;inputOffset&lt;/code&gt; を含め、処理され、その結果をに格納され &lt;code&gt;output&lt;/code&gt; から始まるバッファ &lt;code&gt;outputOffset&lt;/code&gt; 含め。</target>
        </trans-unit>
        <trans-unit id="642f9a22f339ca697888f292e90a89ff6619eb68" translate="yes" xml:space="preserve">
          <source>The first &lt;code&gt;inputLen&lt;/code&gt; bytes in the &lt;code&gt;input&lt;/code&gt; buffer, starting at &lt;code&gt;inputOffset&lt;/code&gt; inclusive, are processed, and the result is stored in the &lt;code&gt;output&lt;/code&gt; buffer.</source>
          <target state="translated">最初の &lt;code&gt;inputLen&lt;/code&gt; がでバイト &lt;code&gt;input&lt;/code&gt; バッファは、始まる &lt;code&gt;inputOffset&lt;/code&gt; を含め、処理され、その結果をに格納され &lt;code&gt;output&lt;/code&gt; バッファ。</target>
        </trans-unit>
        <trans-unit id="823a750eb068b083af9a3eec820704505156eba9" translate="yes" xml:space="preserve">
          <source>The first ClassLoader in a &lt;code&gt;ClassLoaderRepository&lt;/code&gt; is always the MBean Server's own ClassLoader.</source>
          <target state="translated">最初のClassLoader &lt;code&gt;ClassLoaderRepository&lt;/code&gt; 常にMBeanサーバーの独自のClassLoaderです。</target>
        </trans-unit>
        <trans-unit id="4afcd821de0aeb2abc8a3499b614746092f5e523" translate="yes" xml:space="preserve">
          <source>The first DOM implementation that support the desired features, or &lt;code&gt;null&lt;/code&gt; if this source has none.</source>
          <target state="translated">必要な機能をサポートする最初のDOM実装、またはこのソースに機能がない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0aee605bf67dfc0c50ce0346dbcf9350e8a06cf8" translate="yes" xml:space="preserve">
          <source>The first argument is &lt;code&gt;null&lt;/code&gt; or is a string of length zero.</source>
          <target state="translated">最初の引数が &lt;code&gt;null&lt;/code&gt; か、長さがゼロのストリングです。</target>
        </trans-unit>
        <trans-unit id="ae629cadb34db7e527f2a80bc1163c69c5a2e3f8" translate="yes" xml:space="preserve">
          <source>The first argument is treated as the name of a system property to be obtained. The string value of this property is then interpreted as an integer which is then converted to a &lt;code&gt;Color&lt;/code&gt; object.</source>
          <target state="translated">最初の引数は、取得するシステムプロパティの名前として扱われます。このプロパティの文字列値は整数として解釈され、 &lt;code&gt;Color&lt;/code&gt; オブジェクトに変換されます。</target>
        </trans-unit>
        <trans-unit id="86224aafef149436e8f761076011cbbcfd14ad03" translate="yes" xml:space="preserve">
          <source>The first argument is treated as the name of a system property. System properties are accessible through the &lt;a href=&quot;system#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt;&lt;/a&gt; method. The string value of this property is then interpreted as a &lt;code&gt;
 long&lt;/code&gt; value using the grammar supported by &lt;a href=&quot;#decode(java.lang.String)&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt; and a &lt;code&gt;Long&lt;/code&gt; object representing this value is returned.</source>
          <target state="translated">最初の引数は、システムプロパティの名前として扱われます。システムプロパティには、&lt;a href=&quot;system#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできます。このプロパティの文字列値は、&lt;a href=&quot;#decode(java.lang.String)&quot;&gt; &lt;code&gt;decode&lt;/code&gt; &lt;/a&gt;でサポートされている文法を使用して &lt;code&gt; long&lt;/code&gt; 値として解釈され、この値を表す &lt;code&gt;Long&lt;/code&gt; オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="6d2885db10350eaece5dd6fc42094a4b81bf28f0" translate="yes" xml:space="preserve">
          <source>The first argument is treated as the name of a system property. System properties are accessible through the &lt;a href=&quot;system#getProperty(java.lang.String)&quot;&gt;&lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt;&lt;/a&gt; method. The string value of this property is then interpreted as an integer value using the grammar supported by &lt;a href=&quot;#decode(java.lang.String)&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt; and an &lt;code&gt;Integer&lt;/code&gt; object representing this value is returned.</source>
          <target state="translated">最初の引数は、システムプロパティの名前として扱われます。システムプロパティには、&lt;a href=&quot;system#getProperty(java.lang.String)&quot;&gt; &lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできます。このプロパティの文字列値は、&lt;a href=&quot;#decode(java.lang.String)&quot;&gt; &lt;code&gt;decode&lt;/code&gt; &lt;/a&gt;でサポートされている文法を使用して整数値として解釈され、この値を表す &lt;code&gt;Integer&lt;/code&gt; オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="2d03bc23e5360de30337060058588182a9ceb237" translate="yes" xml:space="preserve">
          <source>The first argument is treated as the name of a system property. System properties are accessible through the &lt;a href=&quot;system#getProperty-java.lang.String-&quot;&gt;&lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt;&lt;/a&gt; method. The string value of this property is then interpreted as a &lt;code&gt;long&lt;/code&gt; value using the grammar supported by &lt;a href=&quot;long#decode-java.lang.String-&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt; and a &lt;code&gt;Long&lt;/code&gt; object representing this value is returned.</source>
          <target state="translated">最初の引数は、システムプロパティの名前として扱われます。システムプロパティには、&lt;a href=&quot;system#getProperty-java.lang.String-&quot;&gt; &lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできます。このプロパティの文字列値は、&lt;a href=&quot;long#decode-java.lang.String-&quot;&gt; &lt;code&gt;decode&lt;/code&gt; &lt;/a&gt;でサポートされている文法を使用して &lt;code&gt;long&lt;/code&gt; 値として解釈され、この値を表す &lt;code&gt;Long&lt;/code&gt; オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="1ca7bb292bb179eff369391d94b8d8d3d6c76e98" translate="yes" xml:space="preserve">
          <source>The first argument is treated as the name of a system property. System properties are accessible through the &lt;a href=&quot;system#getProperty-java.lang.String-&quot;&gt;&lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt;&lt;/a&gt; method. The string value of this property is then interpreted as an integer value using the grammar supported by &lt;a href=&quot;integer#decode-java.lang.String-&quot;&gt;&lt;code&gt;decode&lt;/code&gt;&lt;/a&gt; and an &lt;code&gt;Integer&lt;/code&gt; object representing this value is returned.</source>
          <target state="translated">最初の引数は、システムプロパティの名前として扱われます。システムプロパティには、&lt;a href=&quot;system#getProperty-java.lang.String-&quot;&gt; &lt;code&gt;System.getProperty(java.lang.String)&lt;/code&gt; &lt;/a&gt;メソッドを介してアクセスできます。このプロパティの文字列値は、&lt;a href=&quot;integer#decode-java.lang.String-&quot;&gt; &lt;code&gt;decode&lt;/code&gt; &lt;/a&gt;でサポートされている文法を使用して整数値として解釈され、この値を表す &lt;code&gt;Integer&lt;/code&gt; オブジェクトが返されます。</target>
        </trans-unit>
        <trans-unit id="b2ae25b2e2ebc2286380592b87b73e4532b3206e" translate="yes" xml:space="preserve">
          <source>The first argument passed to the accumulator function, both arguments passed to the combiner function, and the argument passed to the finisher function must be the result of a previous invocation of the result supplier, accumulator, or combiner functions.</source>
          <target state="translated">アキュムレータ関数に渡される最初の引数、コンバイナ関数に渡される両方の引数、およびフィニッシャ関数に渡される引数は、結果供給者、アキュムレータ、またはコンバイナ関数を以前に呼び出した結果でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b8fb133ed9ac9f35d1632cf6521f669da4fe312e" translate="yes" xml:space="preserve">
          <source>The first argument will be of type &lt;code&gt;refc&lt;/code&gt; if the lookup class has full privileges to access the member. Otherwise the member must be &lt;code&gt;protected&lt;/code&gt; and the first argument will be restricted in type to the lookup class.</source>
          <target state="translated">ルックアップクラスがメンバーにアクセスするための完全な権限を持っている場合、最初の引数は &lt;code&gt;refc&lt;/code&gt; 型になります。それ以外の場合は、メンバーを &lt;code&gt;protected&lt;/code&gt; 必要があり、最初の引数の型はルックアップクラスに制限されます。</target>
        </trans-unit>
        <trans-unit id="3fdce5da33999948b7b9edbf1747b81239005798" translate="yes" xml:space="preserve">
          <source>The first boundary after the specified offset or &lt;code&gt;BreakIterator.DONE&lt;/code&gt; if the last text boundary is passed in as the offset.</source>
          <target state="translated">指定されたオフセットの後の最初の境界、または最後のテキスト境界がオフセットとして渡された場合は &lt;code&gt;BreakIterator.DONE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6f43ed7dbcb89ab6b52e6cd9fb7b818ebc4af52e" translate="yes" xml:space="preserve">
          <source>The first byte data array.</source>
          <target state="translated">1 バイト目のデータ配列。</target>
        </trans-unit>
        <trans-unit id="60f933636fde5ae8ebd2c0b809d58ad8770e0632" translate="yes" xml:space="preserve">
          <source>The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is, at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let</source>
          <target state="translated">最初に読み込まれたバイトは要素 &lt;code&gt;b[0]&lt;/code&gt; に格納され、次のバイトは &lt;code&gt;b[1]&lt;/code&gt; に格納されます。読み込まれるバイト数は、多くても &lt;code&gt;b&lt;/code&gt; の長さと同じです。しましょう</target>
        </trans-unit>
        <trans-unit id="d03b0acc59bce24602d657d7614371387c0d8fd1" translate="yes" xml:space="preserve">
          <source>The first byte read is stored into element &lt;code&gt;b[0]&lt;/code&gt;, the next one into &lt;code&gt;b[1]&lt;/code&gt;, and so on. The number of bytes read is, at most, equal to the length of &lt;code&gt;b&lt;/code&gt;. Let &lt;code&gt;k&lt;/code&gt; be the number of bytes actually read; these bytes will be stored in elements &lt;code&gt;b[0]&lt;/code&gt; through &lt;code&gt;b[k-1]&lt;/code&gt;, leaving elements &lt;code&gt;b[k]&lt;/code&gt; through &lt;code&gt;b[b.length-1]&lt;/code&gt; unaffected.</source>
          <target state="translated">最初に読み込まれたバイトは要素 &lt;code&gt;b[0]&lt;/code&gt; に格納され、次のバイトは &lt;code&gt;b[1]&lt;/code&gt; に格納されます。読み込まれるバイト数は、多くても &lt;code&gt;b&lt;/code&gt; の長さと同じです。してみましょう &lt;code&gt;k&lt;/code&gt; は実際に読み込まれたバイトの数です。これらのバイトは、要素に格納される &lt;code&gt;b[0]&lt;/code&gt; を介して &lt;code&gt;b[k-1]&lt;/code&gt; の要素を残して、 &lt;code&gt;b[k]&lt;/code&gt; 介して &lt;code&gt;b[b.length-1]&lt;/code&gt; 影響を受けません。</target>
        </trans-unit>
        <trans-unit id="e123521dff5a7003e4f6481bb02965e6f695e618" translate="yes" xml:space="preserve">
          <source>The first byte read is stored into element &lt;code&gt;b[off]&lt;/code&gt;, the next one in to &lt;code&gt;b[off+1]&lt;/code&gt;, and so on. The number of bytes read is, at most, equal to &lt;code&gt;len&lt;/code&gt;. Let</source>
          <target state="translated">読み取られた最初のバイトは要素 &lt;code&gt;b[off]&lt;/code&gt; に格納され、次のバイトは &lt;code&gt;b[off+1]&lt;/code&gt; に格納されます。読み取られるバイト数は、最大で &lt;code&gt;len&lt;/code&gt; に等しくなります。しましょう</target>
        </trans-unit>
        <trans-unit id="a8f1de6428cb4228c88c1554b26b34675848c6a6" translate="yes" xml:space="preserve">
          <source>The first byte read is stored into element &lt;code&gt;b[off]&lt;/code&gt;, the next one into &lt;code&gt;b[off+1]&lt;/code&gt;, and so on. The number of bytes read is, at most, equal to &lt;code&gt;len&lt;/code&gt;. Let</source>
          <target state="translated">最初に読み込まれたバイトは要素 &lt;code&gt;b[off]&lt;/code&gt; に格納され、次のバイトは &lt;code&gt;b[off+1]&lt;/code&gt; に格納されます。読み込まれるバイト数は、多くても &lt;code&gt;len&lt;/code&gt; と同じです。しましょう</target>
        </trans-unit>
        <trans-unit id="db2c520ad4319c6e2902420d8cd1385f52ff1286" translate="yes" xml:space="preserve">
          <source>The first call to the &lt;a href=&quot;#getKeyStore()&quot;&gt;&lt;code&gt;getKeyStore()&lt;/code&gt;&lt;/a&gt; method on the returned builder will create a KeyStore of type &lt;code&gt;type&lt;/code&gt; and call its &lt;a href=&quot;keystore#load(java.io.InputStream,char%5B%5D)&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; method. The &lt;code&gt;inputStream&lt;/code&gt; argument is constructed from &lt;code&gt;file&lt;/code&gt;. If &lt;code&gt;protection&lt;/code&gt; is a &lt;code&gt;PasswordProtection&lt;/code&gt;, the password is obtained by calling the &lt;code&gt;getPassword&lt;/code&gt; method. Otherwise, if &lt;code&gt;protection&lt;/code&gt; is a &lt;code&gt;CallbackHandlerProtection&lt;/code&gt;, the password is obtained by invoking the CallbackHandler.</source>
          <target state="translated">返されたビルダーで&lt;a href=&quot;#getKeyStore()&quot;&gt; &lt;code&gt;getKeyStore()&lt;/code&gt; &lt;/a&gt;メソッドを最初に呼び出すと、タイプ &lt;code&gt;type&lt;/code&gt; キーストアが作成され、その&lt;a href=&quot;keystore#load(java.io.InputStream,char%5B%5D)&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されます。 &lt;code&gt;inputStream&lt;/code&gt; の引数から構成され &lt;code&gt;file&lt;/code&gt; 。場合は &lt;code&gt;protection&lt;/code&gt; ある &lt;code&gt;PasswordProtection&lt;/code&gt; 、パスワードを呼び出すことによって取得された &lt;code&gt;getPassword&lt;/code&gt; にする方法を。それ以外の場合、 &lt;code&gt;protection&lt;/code&gt; が &lt;code&gt;CallbackHandlerProtection&lt;/code&gt; の場合、パスワードはCallbackHandlerを呼び出すことによって取得されます。</target>
        </trans-unit>
        <trans-unit id="83cb61e754162d1ecf4d214461dc4fea766c8488" translate="yes" xml:space="preserve">
          <source>The first call to the &lt;a href=&quot;#getKeyStore()&quot;&gt;&lt;code&gt;getKeyStore()&lt;/code&gt;&lt;/a&gt; method on the returned builder will create a KeyStore using &lt;code&gt;file&lt;/code&gt; to detect the keystore type and then call its &lt;a href=&quot;keystore#load(java.io.InputStream,char%5B%5D)&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; method. It uses the same algorithm to determine the keystore type as described in &lt;a href=&quot;keystore#getInstance(java.io.File,java.security.KeyStore.LoadStoreParameter)&quot;&gt;&lt;code&gt;KeyStore.getInstance(File, LoadStoreParameter)&lt;/code&gt;&lt;/a&gt;. The &lt;code&gt;inputStream&lt;/code&gt; argument is constructed from &lt;code&gt;file&lt;/code&gt;. If &lt;code&gt;protection&lt;/code&gt; is a &lt;code&gt;PasswordProtection&lt;/code&gt;, the password is obtained by calling the &lt;code&gt;getPassword&lt;/code&gt; method. Otherwise, if &lt;code&gt;protection&lt;/code&gt; is a &lt;code&gt;CallbackHandlerProtection&lt;/code&gt;, the password is obtained by invoking the CallbackHandler.</source>
          <target state="translated">返されたビルダーで&lt;a href=&quot;#getKeyStore()&quot;&gt; &lt;code&gt;getKeyStore()&lt;/code&gt; &lt;/a&gt;メソッドを最初に呼び出すと、 &lt;code&gt;file&lt;/code&gt; を使用してキーストアタイプが検出され、その&lt;a href=&quot;keystore#load(java.io.InputStream,char%5B%5D)&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されます。&lt;a href=&quot;keystore#getInstance(java.io.File,java.security.KeyStore.LoadStoreParameter)&quot;&gt; &lt;code&gt;KeyStore.getInstance(File, LoadStoreParameter)&lt;/code&gt; &lt;/a&gt;説明されているのと同じアルゴリズムを使用して、キーストアタイプを決定します。 &lt;code&gt;inputStream&lt;/code&gt; の引数から構成され &lt;code&gt;file&lt;/code&gt; 。場合は &lt;code&gt;protection&lt;/code&gt; ある &lt;code&gt;PasswordProtection&lt;/code&gt; 、パスワードを呼び出すことによって取得された &lt;code&gt;getPassword&lt;/code&gt; にする方法を。それ以外の場合、 &lt;code&gt;protection&lt;/code&gt; が &lt;code&gt;CallbackHandlerProtection&lt;/code&gt; の場合、パスワードはCallbackHandlerを呼び出すことによって取得されます。</target>
        </trans-unit>
        <trans-unit id="c1d045c55ceefb91cc2dece8b6706b626a6357c6" translate="yes" xml:space="preserve">
          <source>The first call to the &lt;a href=&quot;keystore.builder#getKeyStore--&quot;&gt;&lt;code&gt;getKeyStore()&lt;/code&gt;&lt;/a&gt; method on the returned builder will create a KeyStore of type &lt;code&gt;type&lt;/code&gt; and call its &lt;a href=&quot;keystore#load-java.io.InputStream-char:A-&quot;&gt;&lt;code&gt;load()&lt;/code&gt;&lt;/a&gt; method. The &lt;code&gt;inputStream&lt;/code&gt; argument is constructed from &lt;code&gt;file&lt;/code&gt;. If &lt;code&gt;protection&lt;/code&gt; is a &lt;code&gt;PasswordProtection&lt;/code&gt;, the password is obtained by calling the &lt;code&gt;getPassword&lt;/code&gt; method. Otherwise, if &lt;code&gt;protection&lt;/code&gt; is a &lt;code&gt;CallbackHandlerProtection&lt;/code&gt;, the password is obtained by invoking the CallbackHandler.</source>
          <target state="translated">返されたビルダーで&lt;a href=&quot;keystore.builder#getKeyStore--&quot;&gt; &lt;code&gt;getKeyStore()&lt;/code&gt; &lt;/a&gt;メソッドを最初に呼び出すと、タイプ &lt;code&gt;type&lt;/code&gt; の KeyStoreが作成され、その&lt;a href=&quot;keystore#load-java.io.InputStream-char:A-&quot;&gt; &lt;code&gt;load()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出されます。 &lt;code&gt;inputStream&lt;/code&gt; の引数から構成され &lt;code&gt;file&lt;/code&gt; 。場合は &lt;code&gt;protection&lt;/code&gt; ある &lt;code&gt;PasswordProtection&lt;/code&gt; 、パスワードを呼び出すことによって取得された &lt;code&gt;getPassword&lt;/code&gt; にする方法を。それ以外の場合、 &lt;code&gt;protection&lt;/code&gt; が &lt;code&gt;CallbackHandlerProtection&lt;/code&gt; の場合、パスワードはCallbackHandlerを呼び出すことによって取得されます。</target>
        </trans-unit>
        <trans-unit id="a263b78c091df4149c36c4396f2815c0fce9f331" translate="yes" xml:space="preserve">
          <source>The first character is an alphabetic character from a through z, or from A through Z</source>
          <target state="translated">最初の文字は、AからZまでのアルファベット文字、またはAからZまでのアルファベット文字</target>
        </trans-unit>
        <trans-unit id="2f9b613c261320a940fcb9e06c67d081c2e33e53" translate="yes" xml:space="preserve">
          <source>The first character of the resulting string will be the character at this buffer's position, while the last character will be the character at index &lt;code&gt;limit()&lt;/code&gt; - 1. Invoking this method does not change the buffer's position.</source>
          <target state="translated">結果の文字列の最初の文字は現在のバッファの位置にある文字であり、最後の文字はインデックス &lt;code&gt;limit()&lt;/code&gt; -1にある文字です。このメソッドを呼び出しても、バッファの位置は変わりません。</target>
        </trans-unit>
        <trans-unit id="dbf37e7b81a7fb879c8f2e225eb28bf22a25c9af" translate="yes" xml:space="preserve">
          <source>The first character to be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;; the last character to be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt; (thus the total number of characters to be copied is &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;). The characters are copied into the subarray of &lt;code&gt;dst&lt;/code&gt; starting at index &lt;code&gt;dstBegin&lt;/code&gt; and ending at index:</source>
          <target state="translated">コピーされる最初の文字はインデックス &lt;code&gt;srcBegin&lt;/code&gt; にあります。コピーされる最後の文字はインデックス &lt;code&gt;srcEnd-1&lt;/code&gt; にあります（したがって、コピーされる文字の総数は &lt;code&gt;srcEnd-srcBegin&lt;/code&gt; ）。文字は、インデックス &lt;code&gt;dstBegin&lt;/code&gt; で始まり、インデックスで終わる &lt;code&gt;dst&lt;/code&gt; のサブ配列にコピーされます。</target>
        </trans-unit>
        <trans-unit id="e7722b11f3aef8f14caa14ee77828b008194775f" translate="yes" xml:space="preserve">
          <source>The first character to be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;; the last character to be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt;. The total number of characters to be copied is &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;. The characters, converted to bytes, are copied into the subarray of &lt;code&gt;
 dst&lt;/code&gt; starting at index &lt;code&gt;dstBegin&lt;/code&gt; and ending at index:</source>
          <target state="translated">コピーされる最初の文字は、インデックス &lt;code&gt;srcBegin&lt;/code&gt; にあります。コピーされる最後の文字は、インデックス &lt;code&gt;srcEnd-1&lt;/code&gt; にあります。コピーされる文字の総数は &lt;code&gt;srcEnd-srcBegin&lt;/code&gt; です。バイトに変換された文字は、インデックス &lt;code&gt;dstBegin&lt;/code&gt; で始まり、インデックスで終わる &lt;code&gt; dst&lt;/code&gt; のサブ配列にコピーされます。</target>
        </trans-unit>
        <trans-unit id="de566e0e6c84a80db615c5af628dc587bf7facb7" translate="yes" xml:space="preserve">
          <source>The first character to be copied is at index &lt;code&gt;srcBegin&lt;/code&gt;; the last character to be copied is at index &lt;code&gt;srcEnd-1&lt;/code&gt;. The total number of characters to be copied is &lt;code&gt;srcEnd-srcBegin&lt;/code&gt;. The characters, converted to bytes, are copied into the subarray of &lt;code&gt;dst&lt;/code&gt; starting at index &lt;code&gt;dstBegin&lt;/code&gt; and ending at index:</source>
          <target state="translated">コピーされる最初の文字はインデックス &lt;code&gt;srcBegin&lt;/code&gt; にあります。コピーされる最後の文字はインデックス &lt;code&gt;srcEnd-1&lt;/code&gt; にあります。コピーされる文字の総数は &lt;code&gt;srcEnd-srcBegin&lt;/code&gt; です。バイトに変換された文字は、インデックス &lt;code&gt;dstBegin&lt;/code&gt; で始まり、インデックスで終わる &lt;code&gt;dst&lt;/code&gt; のサブ配列にコピーされます。</target>
        </trans-unit>
        <trans-unit id="eaabb9f00e50f3bf7294302ed9e39cca04a5618c" translate="yes" xml:space="preserve">
          <source>The first child of this node.</source>
          <target state="translated">このノードの最初の子。</target>
        </trans-unit>
        <trans-unit id="82f23c5a5a075e723f10662e38703476e5a7bf48" translate="yes" xml:space="preserve">
          <source>The first child of this node. If there is no such node, this returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">このノードの最初の子。そのようなノードがない場合、これは &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ecf2e38c35f8de71bd3d5a9b4b40324da1f7036a" translate="yes" xml:space="preserve">
          <source>The first class defined in a package determines the exact set of certificates that all subsequent classes defined in that package must contain. The set of certificates for a class is obtained from the &lt;a href=&quot;../security/codesource&quot;&gt;&lt;code&gt;&lt;code&gt;CodeSource&lt;/code&gt;&lt;/code&gt;&lt;/a&gt; within the &lt;code&gt;ProtectionDomain&lt;/code&gt; of the class. Any classes added to that package must contain the same set of certificates or a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown. Note that if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this check is not performed. You should always pass in the &lt;a href=&quot;#name&quot;&gt;binary name&lt;/a&gt; of the class you are defining as well as the bytes. This ensures that the class you are defining is indeed the class you think it is.</source>
          <target state="translated">パッケージで定義された最初のクラスは、そのパッケージで定義された後続のすべてのクラスに含まれる必要がある証明書の正確なセットを決定します。クラスの証明書のセットは、クラスの &lt;code&gt;ProtectionDomain&lt;/code&gt; 内の&lt;a href=&quot;../security/codesource&quot;&gt; &lt;code&gt;&lt;code&gt;CodeSource&lt;/code&gt;&lt;/code&gt; &lt;/a&gt;から取得されます。そのパッケージに追加されたクラスには、同じ証明書のセットが含まれている必要があります。そうしないと、 &lt;code&gt;SecurityException&lt;/code&gt; がスローされます。 &lt;code&gt;name&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、このチェックは実行されないことに注意してください。常に、定義するクラスの&lt;a href=&quot;#name&quot;&gt;バイナリ名&lt;/a&gt;とバイトを渡す必要があります。これにより、定義しているクラスが実際にそのクラスであることが確実になります。</target>
        </trans-unit>
        <trans-unit id="367a67e292ca391b3458ed7684121677f1963997" translate="yes" xml:space="preserve">
          <source>The first class defined in a package determines the exact set of certificates that all subsequent classes defined in that package must contain. The set of certificates for a class is obtained from the &lt;a href=&quot;../security/codesource&quot;&gt;&lt;code&gt;CodeSource&lt;/code&gt;&lt;/a&gt; within the &lt;code&gt;ProtectionDomain&lt;/code&gt; of the class. Any classes added to that package must contain the same set of certificates or a &lt;code&gt;SecurityException&lt;/code&gt; will be thrown. Note that if &lt;code&gt;name&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, this check is not performed. You should always pass in the &lt;a href=&quot;#binary-name&quot;&gt;binary name&lt;/a&gt; of the class you are defining as well as the bytes. This ensures that the class you are defining is indeed the class you think it is.</source>
          <target state="translated">パッケージで定義された最初のクラスは、そのパッケージで定義された後続のすべてのクラスに含まれている必要がある証明書の正確なセットを決定します。クラスの証明書のセットは、クラスの &lt;code&gt;ProtectionDomain&lt;/code&gt; 内の&lt;a href=&quot;../security/codesource&quot;&gt; &lt;code&gt;CodeSource&lt;/code&gt; &lt;/a&gt;から取得されます。そのパッケージに追加されたクラスには、同じ証明書のセットが含まれている必要があります。含まれていない場合、 &lt;code&gt;SecurityException&lt;/code&gt; がスローされます。 &lt;code&gt;name&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、このチェックは実行されないことに注意してください。定義するクラスの&lt;a href=&quot;#binary-name&quot;&gt;バイナリ名&lt;/a&gt;とバイトを常に渡す必要があります。これにより、定義しているクラスが実際にあなたが思っているクラスであることが保証されます。</target>
        </trans-unit>
        <trans-unit id="77ea805d80991cc84a0466fc40f83f5ced7c59b5" translate="yes" xml:space="preserve">
          <source>The first column</source>
          <target state="translated">最初のコラム</target>
        </trans-unit>
        <trans-unit id="3a2e1acc3dd6e2be13a7cf2a6463f7153aae9448" translate="yes" xml:space="preserve">
          <source>The first column in a line is position 1.</source>
          <target state="translated">行目の1列目が1番の位置になります。</target>
        </trans-unit>
        <trans-unit id="955b718107c9a85fdf32d9b7ba615294c28a2d9c" translate="yes" xml:space="preserve">
          <source>The first day-of-week defines the ISO &lt;code&gt;DayOfWeek&lt;/code&gt; that is day 1 of the week. The minimal number of days in the first week defines how many days must be present in a month or year, starting from the first day-of-week, before the week is counted as the first week. A value of 1 will count the first day of the month or year as part of the first week, whereas a value of 7 will require the whole seven days to be in the new month or year.</source>
          <target state="translated">最初の曜日は、週の1日目であるISO &lt;code&gt;DayOfWeek&lt;/code&gt; を定義します。最初の週の最小日数は、週が最初の週として数えられる前に、最初の曜日から始めて、月または年に何日存在しなければならないかを定義します。値1は、月または年の最初の日を最初の週の一部として数えますが、値7は、7日全体が新しい月または年である必要があります。</target>
        </trans-unit>
        <trans-unit id="ede957077563e4ac1530acfa41dc3ea489ec60df" translate="yes" xml:space="preserve">
          <source>The first day-of-week varies by culture. For example, the US uses Sunday, while France and the ISO-8601 standard use Monday. This method returns the first day using the standard &lt;code&gt;DayOfWeek&lt;/code&gt; enum.</source>
          <target state="translated">最初の曜日は文化によって異なります。たとえば、米国は日曜日を使用し、フランスとISO-8601規格は月曜日を使用します。このメソッドは、標準の &lt;code&gt;DayOfWeek&lt;/code&gt; 列挙型を使用して最初の日を返します。</target>
        </trans-unit>
        <trans-unit id="a1da0a3f174bbc2d15f94c1f2cc8178e672bfa46" translate="yes" xml:space="preserve">
          <source>The first day-of-week. For example, the ISO-8601 standard considers Monday to be the first day-of-week.</source>
          <target state="translated">曜日の最初の日。例えば、ISO-8601規格では、月曜日を週の最初の曜日とみなしています。</target>
        </trans-unit>
        <trans-unit id="82e2b795a8a8cbc96640a5d47b1525ee3c2a5661" translate="yes" xml:space="preserve">
          <source>The first element (position &lt;code&gt;0&lt;/code&gt;) in the &lt;code&gt;DoubleStream&lt;/code&gt; will be the provided &lt;code&gt;seed&lt;/code&gt;. For &lt;code&gt;n &amp;gt; 0&lt;/code&gt;, the element at position &lt;code&gt;n&lt;/code&gt;, will be the result of applying the function &lt;code&gt;f&lt;/code&gt; to the element at position &lt;code&gt;n - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DoubleStream&lt;/code&gt; の最初の要素（位置 &lt;code&gt;0&lt;/code&gt; ）は、提供される &lt;code&gt;seed&lt;/code&gt; ます。以下のための &lt;code&gt;n &amp;gt; 0&lt;/code&gt; 位置に要素 &lt;code&gt;n&lt;/code&gt; 、関数適用の結果であろう &lt;code&gt;f&lt;/code&gt; 位置で要素に &lt;code&gt;n - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bded7ce8d5601d17d37c716de18a736a7543797d" translate="yes" xml:space="preserve">
          <source>The first element (position &lt;code&gt;0&lt;/code&gt;) in the &lt;code&gt;IntStream&lt;/code&gt; will be the provided &lt;code&gt;seed&lt;/code&gt;. For &lt;code&gt;n &amp;gt; 0&lt;/code&gt;, the element at position &lt;code&gt;n&lt;/code&gt;, will be the result of applying the function &lt;code&gt;f&lt;/code&gt; to the element at position &lt;code&gt;n - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IntStream&lt;/code&gt; の最初の要素（位置 &lt;code&gt;0&lt;/code&gt; ）は、提供された &lt;code&gt;seed&lt;/code&gt; ます。以下のための &lt;code&gt;n &amp;gt; 0&lt;/code&gt; 位置に要素 &lt;code&gt;n&lt;/code&gt; 、関数適用の結果であろう &lt;code&gt;f&lt;/code&gt; 位置で要素に &lt;code&gt;n - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a194dadcec7148ad3f47ec6fd680590400a3449e" translate="yes" xml:space="preserve">
          <source>The first element (position &lt;code&gt;0&lt;/code&gt;) in the &lt;code&gt;LongStream&lt;/code&gt; will be the provided &lt;code&gt;seed&lt;/code&gt;. For &lt;code&gt;n &amp;gt; 0&lt;/code&gt;, the element at position &lt;code&gt;n&lt;/code&gt;, will be the result of applying the function &lt;code&gt;f&lt;/code&gt; to the element at position &lt;code&gt;n - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LongStream&lt;/code&gt; の最初の要素（位置 &lt;code&gt;0&lt;/code&gt; ）は、提供される &lt;code&gt;seed&lt;/code&gt; ます。以下のための &lt;code&gt;n &amp;gt; 0&lt;/code&gt; 位置に要素 &lt;code&gt;n&lt;/code&gt; 、関数適用の結果であろう &lt;code&gt;f&lt;/code&gt; 位置で要素に &lt;code&gt;n - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a165f1a0b54273ae7adbf840b0c7faa2330e5ac4" translate="yes" xml:space="preserve">
          <source>The first element (position &lt;code&gt;0&lt;/code&gt;) in the &lt;code&gt;Stream&lt;/code&gt; will be the provided &lt;code&gt;seed&lt;/code&gt;. For &lt;code&gt;n &amp;gt; 0&lt;/code&gt;, the element at position &lt;code&gt;n&lt;/code&gt;, will be the result of applying the function &lt;code&gt;f&lt;/code&gt; to the element at position &lt;code&gt;n - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Stream&lt;/code&gt; の最初の要素（位置 &lt;code&gt;0&lt;/code&gt; ）は、提供された &lt;code&gt;seed&lt;/code&gt; ます。以下のための &lt;code&gt;n &amp;gt; 0&lt;/code&gt; 位置に要素 &lt;code&gt;n&lt;/code&gt; 、関数適用の結果であろう &lt;code&gt;f&lt;/code&gt; 位置で要素に &lt;code&gt;n - 1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5aab3f29aca09be0c5627c5a993c1167fb0b36b" translate="yes" xml:space="preserve">
          <source>The first element of the iterator should be the most &quot;natural&quot; type for decoding the image with as little loss as possible. For example, for a JPEG image the first entry should be an RGB image, even though the image data is stored internally in a YCbCr color space.</source>
          <target state="translated">イテレータの最初の要素は、画像を可能な限り損失を抑えてデコードするための最も「自然な」型でなければなりません。例えば,JPEG 画像の場合,画像データは内部的に YCbCr 色空間に格納されていますが,最初のエントリは RGB 画像でなければなりません.</target>
        </trans-unit>
        <trans-unit id="780baa695b0265440aa1ef37be800e344c7c7242" translate="yes" xml:space="preserve">
          <source>The first element returned by the iterator represents the name element that is closest to the root in the directory hierarchy, the second element is the next closest, and so on. The last element returned is the name of the file or directory denoted by this path. The &lt;a href=&quot;#getRoot()&quot;&gt;&lt;code&gt;root&lt;/code&gt;&lt;/a&gt; component, if present, is not returned by the iterator.</source>
          <target state="translated">イテレータによって返される最初の要素は、ディレクトリ階層のルートに最も近いname要素を表し、2番目の要素は次に近い要素を表します。返される最後の要素は、このパスで示されるファイルまたはディレクトリの名前です。&lt;a href=&quot;#getRoot()&quot;&gt; &lt;code&gt;root&lt;/code&gt; &lt;/a&gt;成分は、存在する場合、反復子によって返されません。</target>
        </trans-unit>
        <trans-unit id="a4f67dca9f7c2569783dcc958d9c49f4cfb6a3bb" translate="yes" xml:space="preserve">
          <source>The first element returned by the iterator represents the name element that is closest to the root in the directory hierarchy, the second element is the next closest, and so on. The last element returned is the name of the file or directory denoted by this path. The &lt;a href=&quot;path#getRoot--&quot;&gt;&lt;code&gt;root&lt;/code&gt;&lt;/a&gt; component, if present, is not returned by the iterator.</source>
          <target state="translated">イテレータによって返される最初の要素は、ディレクトリ階層のルートに最も近いname要素を表し、2番目の要素は次に近いというようになります。返される最後の要素は、このパスで示されるファイルまたはディレクトリの名前です。&lt;a href=&quot;path#getRoot--&quot;&gt; &lt;code&gt;root&lt;/code&gt; &lt;/a&gt;成分は、存在する場合、反復子によって返されません。</target>
        </trans-unit>
        <trans-unit id="d373f684ec8e70f9e47427a2755704ec23ef7c5f" translate="yes" xml:space="preserve">
          <source>The first example shows a stack trace element consisting of three elements, each separated by &lt;code&gt;&quot;/&quot;&lt;/code&gt; followed with the source file name and the line number of the source line containing the execution point. The first element &quot;&lt;code&gt;com.foo.loader&lt;/code&gt;&quot; is the name of the class loader. The second element &quot;&lt;code&gt;foo@9.0&lt;/code&gt;&quot; is the module name and version. The third element is the method containing the execution point; &quot;&lt;code&gt;com.foo.Main&quot;&lt;/code&gt;&quot; is the fully-qualified class name and &quot;&lt;code&gt;run&lt;/code&gt;&quot; is the name of the method. &quot;&lt;code&gt;Main.java&lt;/code&gt;&quot; is the source file name and &quot;&lt;code&gt;101&lt;/code&gt;&quot; is the line number.</source>
          <target state="translated">最初の例は、3つの要素で構成されるスタックトレース要素を示しています。各要素は &lt;code&gt;&quot;/&quot;&lt;/code&gt; 区切られ、その後にソースファイル名と実行ポイントを含むソース行の行番号が続きます。最初の要素「 &lt;code&gt;com.foo.loader&lt;/code&gt; 」はクラスローダーの名前です。 2番目の要素「 &lt;code&gt;foo@9.0&lt;/code&gt; 」はモジュール名とバージョンです。 3番目の要素は、実行ポイントを含むメソッドです。 「 &lt;code&gt;com.foo.Main&quot;&lt;/code&gt; は完全修飾クラス名、「 &lt;code&gt;run&lt;/code&gt; 」はメソッド名、「 &lt;code&gt;Main.java&lt;/code&gt; 」はソースファイル名、「 &lt;code&gt;101&lt;/code&gt; 」は行番号です。</target>
        </trans-unit>
        <trans-unit id="d6413ccd6f5782f5342b586620e6f4a0abde22ef" translate="yes" xml:space="preserve">
          <source>The first example specifies the methods: POST, GET and DELETE, but no request headers. The second example specifies one request method and two headers. The third example specifies two request methods, and two headers.</source>
          <target state="translated">最初の例ではメソッドを指定しています。POST、GET、DELETE が指定されていますが、リクエストヘッダは指定されていません。2 番目の例は、1 つのリクエストメソッドと 2 つのヘッダを指定しています。3 番目の例は、2 つのリクエストメソッドと 2 つのヘッダを指定しています。</target>
        </trans-unit>
        <trans-unit id="232fe5799d43af6e10cb304776efde1739a6180e" translate="yes" xml:space="preserve">
          <source>The first example uses the static method &lt;code&gt;MessageFormat.format&lt;/code&gt;, which internally creates a &lt;code&gt;MessageFormat&lt;/code&gt; for one-time use:</source>
          <target state="translated">最初の例では、静的メソッド &lt;code&gt;MessageFormat.format&lt;/code&gt; を使用しています。これは、1回限りの使用のために &lt;code&gt;MessageFormat&lt;/code&gt; を内部的に作成します。</target>
        </trans-unit>
        <trans-unit id="fe870d496f992cfccff0251dbbae3331dfec9862" translate="yes" xml:space="preserve">
          <source>The first five fields have non-negative (&amp;gt;=0) integers or null (which represents that the field is not set), and the seconds field has a non-negative decimal or null. A negative sign indicates a negative duration.</source>
          <target state="translated">最初の5つのフィールドには、負でない（&amp;gt; = 0）整数またはnull（フィールドが設定されていないことを表す）があり、secondsフィールドには負でない10進数またはnullがあります。負の符号は、負の期間を示します。</target>
        </trans-unit>
        <trans-unit id="6b46b643ffc068ef7965d6231b3153ce167aa87e" translate="yes" xml:space="preserve">
          <source>The first integer data array.</source>
          <target state="translated">最初の整数データ配列。</target>
        </trans-unit>
        <trans-unit id="9f9027453c27f495317af2745753a0e023e2b7cf" translate="yes" xml:space="preserve">
          <source>The first invocation of any of the methods defined by this class causes the default &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; to be loaded. The default provider, identified by the URI scheme &quot;file&quot;, creates the &lt;a href=&quot;filesystem&quot;&gt;&lt;code&gt;FileSystem&lt;/code&gt;&lt;/a&gt; that provides access to the file systems accessible to the Java virtual machine. If the process of loading or initializing the default provider fails then an unspecified error is thrown.</source>
          <target state="translated">このクラスで定義されているメソッドの最初の呼び出しにより、デフォルトの&lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;がロードされます。URIスキーム「ファイル」で識別されるデフォルトのプロバイダーは、Java仮想マシンにアクセス可能なファイルシステムへのアクセスを提供する&lt;a href=&quot;filesystem&quot;&gt; &lt;code&gt;FileSystem&lt;/code&gt; &lt;/a&gt;を作成します。デフォルトプロバイダーのロードまたは初期化のプロセスが失敗した場合、不特定のエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="6b707d2f98066d10d4d06e91896be54d4b5b28f2" translate="yes" xml:space="preserve">
          <source>The first invocation of any of the methods defined by this class locates the default &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;provider&lt;/code&gt;&lt;/a&gt; object. Where the system property &lt;code&gt;java.nio.file.spi.DefaultFileSystemProvider&lt;/code&gt; is not defined then the default provider is a system-default provider that is invoked to create the default file system.</source>
          <target state="translated">このクラスで定義されたメソッドの最初の呼び出しは、デフォルトの&lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;provider&lt;/code&gt; &lt;/a&gt;オブジェクトを見つけます。システムプロパティ &lt;code&gt;java.nio.file.spi.DefaultFileSystemProvider&lt;/code&gt; が定義されていない場合、デフォルトプロバイダーは、デフォルトのファイルシステムを作成するために呼び出されるシステムデフォルトプロバイダーです。</target>
        </trans-unit>
        <trans-unit id="9eb8bef38b28e15b1a42751b14de53ed5402bed9" translate="yes" xml:space="preserve">
          <source>The first invocation of the &lt;a href=&quot;spi/filesystemprovider#installedProviders&quot;&gt;&lt;code&gt;installedProviders&lt;/code&gt;&lt;/a&gt; method, by way of invoking any of the &lt;code&gt;newFileSystem&lt;/code&gt; methods defined by this class, locates and loads all installed file system providers. Installed providers are loaded using the service-provider loading facility defined by the &lt;a href=&quot;../../util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; class. Installed providers are loaded using the system class loader. If the system class loader cannot be found then the extension class loader is used; if there is no extension class loader then the bootstrap class loader is used. Providers are typically installed by placing them in a JAR file on the application class path or in the extension directory, the JAR file contains a provider-configuration file named &lt;code&gt;java.nio.file.spi.FileSystemProvider&lt;/code&gt; in the resource directory &lt;code&gt;META-INF/services&lt;/code&gt;, and the file lists one or more fully-qualified names of concrete subclass of &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;FileSystemProvider&lt;/code&gt;&lt;/a&gt; that have a zero argument constructor. The ordering that installed providers are located is implementation specific. If a provider is instantiated and its &lt;a href=&quot;spi/filesystemprovider#getScheme--&quot;&gt;&lt;code&gt;getScheme&lt;/code&gt;&lt;/a&gt; returns the same URI scheme of a provider that was previously instantiated then the most recently instantiated duplicate is discarded. URI schemes are compared without regard to case. During construction a provider may safely access files associated with the default provider but care needs to be taken to avoid circular loading of other installed providers. If circular loading of installed providers is detected then an unspecified error is thrown.</source>
          <target state="translated">このクラスで定義されている &lt;code&gt;newFileSystem&lt;/code&gt; メソッドのいずれかを呼び出すことによる&lt;a href=&quot;spi/filesystemprovider#installedProviders&quot;&gt; &lt;code&gt;installedProviders&lt;/code&gt; &lt;/a&gt;メソッドの最初の呼び出しは、インストールされているすべてのファイルシステムプロバイダーを見つけてロードします。インストールされたプロバイダーは、&lt;a href=&quot;../../util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt;クラスで定義されたサービスプロバイダーロード機能を使用してロードされます。インストールされたプロバイダーは、システムクラスローダーを使用して読み込まれます。システムクラスローダーが見つからない場合は、拡張クラスローダーが使用されます。拡張クラスローダーがない場合は、ブートストラップクラスローダーが使用されます。プロバイダーは通常、アプリケーションクラスパスまたは拡張ディレクトリのJARファイルに配置することによってインストールされます。JARファイルには、 &lt;code&gt;java.nio.file.spi.FileSystemProvider&lt;/code&gt; という名前のプロバイダー設定ファイルが含まれています。リソースディレクトリ &lt;code&gt;META-INF/services&lt;/code&gt; にあり、ファイルには、引数のないコンストラクターを持つ&lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;FileSystemProvider&lt;/code&gt; &lt;/a&gt;の具象サブクラスの1つ以上の完全修飾名がリストされています。インストールされたプロバイダーが配置される順序は、実装によって異なります。プロバイダーがインスタンス化され、その&lt;a href=&quot;spi/filesystemprovider#getScheme--&quot;&gt; &lt;code&gt;getScheme&lt;/code&gt; &lt;/a&gt;が以前にインスタンス化されたプロバイダーと同じURIスキームを返す場合、最後にインスタンス化された複製は破棄されます。 URIスキームは、大文字小文字を区別せずに比較されます。構築中、プロバイダーはデフォルトプロバイダーに関連付けられたファイルに安全にアクセスできますが、インストールされている他のプロバイダーの循環読み込みを回避するように注意する必要があります。インストールされたプロバイダーの循環ロードが検出された場合、不特定のエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="8c101353a36400f0f63bb3ab9abfa6a9016bbaca" translate="yes" xml:space="preserve">
          <source>The first invocation of the &lt;a href=&quot;spi/filesystemprovider#installedProviders()&quot;&gt;&lt;code&gt;installedProviders&lt;/code&gt;&lt;/a&gt; method, by way of invoking any of the &lt;code&gt;
 newFileSystem&lt;/code&gt; methods defined by this class, locates and loads all installed file system providers. Installed providers are loaded using the service-provider loading facility defined by the &lt;a href=&quot;../../util/serviceloader&quot;&gt;&lt;code&gt;ServiceLoader&lt;/code&gt;&lt;/a&gt; class. Installed providers are loaded using the system class loader. If the system class loader cannot be found then the platform class loader is used. Providers are typically installed by placing them in a JAR file on the application class path, the JAR file contains a provider-configuration file named &lt;code&gt;java.nio.file.spi.FileSystemProvider&lt;/code&gt; in the resource directory &lt;code&gt;META-INF/services&lt;/code&gt;, and the file lists one or more fully-qualified names of concrete subclass of &lt;a href=&quot;spi/filesystemprovider&quot;&gt;&lt;code&gt;FileSystemProvider&lt;/code&gt;&lt;/a&gt; that have a zero argument constructor. The ordering that installed providers are located is implementation specific. If a provider is instantiated and its &lt;a href=&quot;spi/filesystemprovider#getScheme()&quot;&gt;&lt;code&gt;getScheme&lt;/code&gt;&lt;/a&gt; returns the same URI scheme of a provider that was previously instantiated then the most recently instantiated duplicate is discarded. URI schemes are compared without regard to case. During construction a provider may safely access files associated with the default provider but care needs to be taken to avoid circular loading of other installed providers. If circular loading of installed providers is detected then an unspecified error is thrown.</source>
          <target state="translated">このクラスで定義された &lt;code&gt; newFileSystem&lt;/code&gt; メソッドのいずれかを呼び出すことによる&lt;a href=&quot;spi/filesystemprovider#installedProviders()&quot;&gt; &lt;code&gt;installedProviders&lt;/code&gt; &lt;/a&gt;メソッドの最初の呼び出しは、インストールされているすべてのファイルシステムプロバイダーを見つけてロードします。インストールされたプロバイダーは、&lt;a href=&quot;../../util/serviceloader&quot;&gt; &lt;code&gt;ServiceLoader&lt;/code&gt; &lt;/a&gt;クラスで定義されたサービスプロバイダーロード機能を使用してロードされます。インストールされたプロバイダーは、システムクラスローダーを使用してロードされます。システムクラスローダーが見つからない場合は、プラットフォームクラスローダーが使用されます。プロバイダーは通常、アプリケーションクラスパス上のJARファイルに配置することでインストールされます。JARファイルには、リソースディレクトリ &lt;code&gt;META-INF/services&lt;/code&gt; に &lt;code&gt;java.nio.file.spi.FileSystemProvider&lt;/code&gt; という名前のプロバイダー構成ファイルが含まれています。、およびファイルには、引数がゼロのコンストラクターを持つ&lt;a href=&quot;spi/filesystemprovider&quot;&gt; &lt;code&gt;FileSystemProvider&lt;/code&gt; &lt;/a&gt;の具象サブクラスの1つ以上の完全修飾名がリストされます。インストールされているプロバイダーが配置される順序は、実装によって異なります。プロバイダーがインスタンス化され、その&lt;a href=&quot;spi/filesystemprovider#getScheme()&quot;&gt; &lt;code&gt;getScheme&lt;/code&gt; &lt;/a&gt;が以前にインスタンス化されたプロバイダーと同じURIスキームを返す場合、最後にインスタンス化された重複は破棄されます。 URIスキームは、大文字と小文字を区別せずに比較されます。構築中、プロバイダーはデフォルトプロバイダーに関連付けられたファイルに安全にアクセスできますが、インストールされている他のプロバイダーが循環的に読み込まれないように注意する必要があります。インストールされたプロバイダーの循環ロードが検出されると、不特定のエラーがスローされます。</target>
        </trans-unit>
        <trans-unit id="50b4cfa2ac06af0620f808ca10930df4c3cf1775" translate="yes" xml:space="preserve">
          <source>The first invocation of this method causes the default provider to be initialized (if not already initialized) and loads any other installed providers as described by the &lt;a href=&quot;../filesystems&quot;&gt;&lt;code&gt;FileSystems&lt;/code&gt;&lt;/a&gt; class.</source>
          <target state="translated">このメソッドの最初の呼び出しにより、デフォルトのプロバイダーが初期化され（まだ初期化されていない場合）、&lt;a href=&quot;../filesystems&quot;&gt; &lt;code&gt;FileSystems&lt;/code&gt; &lt;/a&gt;クラスで説明されているように、インストールされている他のプロバイダーが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="04ddabf3609314c77fc9442c207329a5bac474e5" translate="yes" xml:space="preserve">
          <source>The first invocation of this method creates the channel that is returned. Subsequent invocations of this method return the same channel.</source>
          <target state="translated">このメソッドの最初の呼び出しは、返されるチャネルを作成します。それ以降のこのメソッドの呼び出しは、同じチャンネルを返します。</target>
        </trans-unit>
        <trans-unit id="41806187d179ed163c43e135856d8b855c241487" translate="yes" xml:space="preserve">
          <source>The first invocation of this method locates the default provider object as follows:</source>
          <target state="translated">このメソッドの最初の呼び出しは、以下のようにデフォルトのプロバイダ・オブジェクトを検索します。</target>
        </trans-unit>
        <trans-unit id="58220b7cc0880c65c446fb69fdba5d879036d3cd" translate="yes" xml:space="preserve">
          <source>The first invocation of this method works as if invoking it were equivalent to evaluating the expression:</source>
          <target state="translated">このメソッドの最初の呼び出しは、このメソッドを呼び出すことが式を評価することと等価であるかのように動作します。</target>
        </trans-unit>
        <trans-unit id="7ca058cd84f4d90ef57f22561005b44549ee1824" translate="yes" xml:space="preserve">
          <source>The first is a start signal that prevents any worker from proceeding until the driver is ready for them to proceed;</source>
          <target state="translated">1つ目は、運転手の準備が整うまで作業者が進まないようにするスタート信号です。</target>
        </trans-unit>
        <trans-unit id="89010690973d5a466a568016925bd8250e0db1e5" translate="yes" xml:space="preserve">
          <source>The first item in the array must be the name of the service provider for the &quot;preferred&quot; reader, as it will be used to instantiate the &lt;code&gt;ImageReader&lt;/code&gt; returned by &lt;code&gt;ImageIO.getImageReader(ImageWriter)&lt;/code&gt;.</source>
          <target state="translated">配列の最初の項目は、「優先」リーダーのサービスプロバイダーの名前である必要があります。これは、 &lt;code&gt;ImageIO.getImageReader(ImageWriter)&lt;/code&gt; によって返される &lt;code&gt;ImageReader&lt;/code&gt; をインスタンス化するために使用されるためです。</target>
        </trans-unit>
        <trans-unit id="9b96b213b3a7afec438c64603d9c66e3022ffe8e" translate="yes" xml:space="preserve">
          <source>The first item in the array must be the name of the service provider for the &quot;preferred&quot; writer, as it will be used to instantiate the &lt;code&gt;ImageWriter&lt;/code&gt; returned by &lt;code&gt;ImageIO.getImageWriter(ImageReader)&lt;/code&gt;.</source>
          <target state="translated">配列の最初の項目は、 &lt;code&gt;ImageIO.getImageWriter(ImageReader)&lt;/code&gt; によって返される &lt;code&gt;ImageWriter&lt;/code&gt; をインスタンス化するために使用されるため、「優先」ライターのサービスプロバイダーの名前である必要があります。</target>
        </trans-unit>
        <trans-unit id="82745ec93db99b445485eed887cfade634be0e88" translate="yes" xml:space="preserve">
          <source>The first line is line 1.</source>
          <target state="translated">1行目は1行目です。</target>
        </trans-unit>
        <trans-unit id="d712c8c96e658d28ae5bf8727956e1bad67dd834" translate="yes" xml:space="preserve">
          <source>The first name in an abstract pathname may be a directory name or, in the case of Microsoft Windows UNC pathnames, a hostname. Each subsequent name in an abstract pathname denotes a directory; the last name may denote either a directory or a file. The &lt;em&gt;empty&lt;/em&gt; abstract pathname has no prefix and an empty name sequence.</source>
          <target state="translated">抽象パス名の最初の名前は、ディレクトリ名、またはMicrosoft Windows UNCパス名の場合はホスト名です。抽象パス名の後続の各名前はディレクトリを示します。姓は、ディレクトリまたはファイルを示します。&lt;em&gt;空の&lt;/em&gt;抽象パス名には接頭辞と空の名前シーケンスを持っていません。</target>
        </trans-unit>
        <trans-unit id="9bc303af8db48e36c4c66c6bdedc67a512bd52cf" translate="yes" xml:space="preserve">
          <source>The first number in the range of IDs used for internal frame events.</source>
          <target state="translated">内部フレームイベントに使用されるIDの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="37141897704a9f57efd5588b0c01740b744d6fb2" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for action events.</source>
          <target state="translated">アクションイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="5b311455257b5f8396bcd1a51a9d0c1bd4251848" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for component events.</source>
          <target state="translated">コンポーネントイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="ea2dec83a5590e133d8a736a424395f9110cfee6" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for container events.</source>
          <target state="translated">コンテナイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="b9b26b88c313013146d03dc163d14340b6c78c9d" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for focus events.</source>
          <target state="translated">フォーカスイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="fd2879600cbc09ebe50ee9cc9af9b6ba0a6705e3" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for item events.</source>
          <target state="translated">アイテムイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="152d070f7807fc1757fefb801204288c7ee66f3d" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for key events.</source>
          <target state="translated">キーイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="8dd930b4621934d75ddab8e7be255982b72242de" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for mouse events.</source>
          <target state="translated">マウスイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="884054f92755178e2c0ecb00a6d504f92ce507c8" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for text events.</source>
          <target state="translated">テキストイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="29bb2f4b5ef4ebb2ea108d313ba1df485fdc86b4" translate="yes" xml:space="preserve">
          <source>The first number in the range of ids used for window events.</source>
          <target state="translated">ウィンドウイベントに使用されるidの範囲の最初の番号。</target>
        </trans-unit>
        <trans-unit id="eb460a3d41545816fab893228040f63048f7d7fb" translate="yes" xml:space="preserve">
          <source>The first occurrence of the property from the constructor's environment parameter and (for appropriate properties) the applet parameters and system properties.</source>
          <target state="translated">コンストラクタの環境パラメータと(適切なプロパティについては)アプレットパラメータとシステムプロパティからのプロパティの最初の出現。</target>
        </trans-unit>
        <trans-unit id="8f6308e6ea90bd6d645d7b067d249f24b93a9343" translate="yes" xml:space="preserve">
          <source>The first occurrence of the property from the constructor's environment parameter and system properties.</source>
          <target state="translated">コンストラクタの環境パラメータとシステムプロパティから最初に出現するプロパティです。</target>
        </trans-unit>
        <trans-unit id="ff7a6ea7d00a42f276b2164fd60502c29eb70ffa" translate="yes" xml:space="preserve">
          <source>The first of two UUIDs is greater than the second if the most significant field in which the UUIDs differ is greater for the first UUID.</source>
          <target state="translated">2つのUUIDのうち1つ目のUUIDは、UUIDが異なる最も重要なフィールドが1つ目のUUIDの方が大きい場合、2つ目のUUIDのうち1つ目のUUIDは2つ目のUUIDよりも大きい。</target>
        </trans-unit>
        <trans-unit id="32cab14236cd798cfadf3e1be64fb360b8030f9a" translate="yes" xml:space="preserve">
          <source>The first row</source>
          <target state="translated">最初の列</target>
        </trans-unit>
        <trans-unit id="2d8ffc9fbdb5b42ccb7e6113a4bea28052899dce" translate="yes" xml:space="preserve">
          <source>The first row that has changed.</source>
          <target state="translated">変更された最初の行。</target>
        </trans-unit>
        <trans-unit id="349d7a74a12185a372204feb651bef45ef76c7d7" translate="yes" xml:space="preserve">
          <source>The first service provider found that supports the specified schema language is returned.</source>
          <target state="translated">指定されたスキーマ言語をサポートする最初のサービスプロバイダが返されます。</target>
        </trans-unit>
        <trans-unit id="6f39de29791b960b0050651d1adaf3db95249f62" translate="yes" xml:space="preserve">
          <source>The first service provider or empty &lt;code&gt;Optional&lt;/code&gt; if no service providers are located</source>
          <target state="translated">最初のサービスプロバイダーまたは空のサービスプロバイダーが &lt;code&gt;Optional&lt;/code&gt; ない場合はオプション</target>
        </trans-unit>
        <trans-unit id="5b88e35bd663e8d6a276c15cdae081f89486351b" translate="yes" xml:space="preserve">
          <source>The first short data array.</source>
          <target state="translated">最初の短いデータ配列。</target>
        </trans-unit>
        <trans-unit id="5e23cf40c525068cb2aa6e67ac2fbcec503f3f80" translate="yes" xml:space="preserve">
          <source>The first subscript is the row index and the second is the column index. This operation uses none of the currently defined rendering hints; the &lt;code&gt;RenderingHints&lt;/code&gt; argument can be null.</source>
          <target state="translated">最初の添え字は行インデックスで、2番目は列インデックスです。この操作では、現在定義されているレンダリングヒントは使用されません。 &lt;code&gt;RenderingHints&lt;/code&gt; 内の引数はnullにすることができます。</target>
        </trans-unit>
        <trans-unit id="396d36f59149714c5c3764da6a2772b77784a9b2" translate="yes" xml:space="preserve">
          <source>The first three indices refer to color samples; index 0 corresponds to red, index 1 to green, and index 2 to blue.</source>
          <target state="translated">最初の3つのインデックスは色見本を参照しており、インデックス0は赤、インデックス1は緑、インデックス2は青に対応しています。</target>
        </trans-unit>
        <trans-unit id="f47ae950941163171dfda88d6714786ffab47ac4" translate="yes" xml:space="preserve">
          <source>The first time a &lt;code&gt;invokevirtual&lt;/code&gt; instruction is executed it is linked, by symbolically resolving the names in the instruction and verifying that the method call is statically legal. This is true of calls to &lt;code&gt;invokeExact&lt;/code&gt; and &lt;code&gt;invoke&lt;/code&gt;. In this case, the symbolic type descriptor emitted by the compiler is checked for correct syntax and names it contains are resolved. Thus, an &lt;code&gt;invokevirtual&lt;/code&gt; instruction which invokes a method handle will always link, as long as the symbolic type descriptor is syntactically well-formed and the types exist.</source>
          <target state="translated">&lt;code&gt;invokevirtual&lt;/code&gt; 命令が初めて実行されるときに、命令内の名前をシンボリックに解決し、メソッド呼び出しが静的に正当であることを検証することにより、それがリンクされます。これは、 &lt;code&gt;invokeExact&lt;/code&gt; および &lt;code&gt;invoke&lt;/code&gt; の呼び出しにも当てはまります。この場合、コンパイラーによって発行されたシンボリック型記述子が正しい構文についてチェックされ、そこに含まれる名前が解決されます。したがって、シンボリックタイプ記述子が構文的に整形式であり、タイプが存在する限り、メソッドハンドルを呼び出す &lt;code&gt;invokevirtual&lt;/code&gt; 命令は常にリンクします。</target>
        </trans-unit>
        <trans-unit id="985e51731d29ab2953416b90ddb0f5a15a287400" translate="yes" xml:space="preserve">
          <source>The first time an &lt;code&gt;invokevirtual&lt;/code&gt; instruction is executed it is linked by symbolically resolving the names in the instruction and verifying that the method call is statically legal. This also holds for calls to &lt;code&gt;invokeExact&lt;/code&gt; and &lt;code&gt;invoke&lt;/code&gt;. In this case, the symbolic type descriptor emitted by the compiler is checked for correct syntax, and names it contains are resolved. Thus, an &lt;code&gt;invokevirtual&lt;/code&gt; instruction which invokes a method handle will always link, as long as the symbolic type descriptor is syntactically well-formed and the types exist.</source>
          <target state="translated">&lt;code&gt;invokevirtual&lt;/code&gt; 命令が最初に実行されるとき、命令内の名前をシンボリックに解決し、メソッド呼び出しが静的に正当であることを確認することによってリンクされます。これは、 &lt;code&gt;invokeExact&lt;/code&gt; および &lt;code&gt;invoke&lt;/code&gt; の呼び出しにも当てはまります。この場合、コンパイラーによって発行されたシンボリック型記述子が正しい構文であるかどうかがチェックされ、それに含まれる名前が解決されます。したがって、シンボリック型記述子が構文的に整形式であり、型が存在する限り、メソッドハンドルを呼び出す &lt;code&gt;invokevirtual&lt;/code&gt; 命令は常にリンクします。</target>
        </trans-unit>
        <trans-unit id="4efbaef427b41c4cddb7b71dd9ca3b801b917cbc" translate="yes" xml:space="preserve">
          <source>The first time an &lt;code&gt;invokevirtual&lt;/code&gt; instruction is executed it is linked by symbolically resolving the names in the instruction and verifying that the method call is statically legal. This also holds for calls to access mode methods. In this case, the symbolic type descriptor emitted by the compiler is checked for correct syntax, and names it contains are resolved. Thus, an &lt;code&gt;invokevirtual&lt;/code&gt; instruction which invokes an access mode method will always link, as long as the symbolic type descriptor is syntactically well-formed and the types exist.</source>
          <target state="translated">&lt;code&gt;invokevirtual&lt;/code&gt; 命令が最初に実行されるとき、命令内の名前をシンボリックに解決し、メソッド呼び出しが静的に正当であることを確認することによってリンクされます。これは、アクセスモードメソッドの呼び出しにも当てはまります。この場合、コンパイラーによって発行されたシンボリック型記述子が正しい構文であるかどうかがチェックされ、それに含まれる名前が解決されます。したがって、アクセスモードメソッドを呼び出す &lt;code&gt;invokevirtual&lt;/code&gt; 命令は、シンボリックタイプ記述子が構文的に整形式であり、タイプが存在する限り、常にリンクします。</target>
        </trans-unit>
        <trans-unit id="7984f8d9f334e66a61a472a9952f92a917e7ab62" translate="yes" xml:space="preserve">
          <source>The first time this method is called, the security property &quot;ssl.ServerSocketFactory.provider&quot; is examined. If it is non-null, a class by that name is loaded and instantiated. If that is successful and the object is an instance of SSLServerSocketFactory, it is made the default SSL server socket factory.</source>
          <target state="translated">このメソッドが最初に呼び出されたとき、セキュリティプロパティ &quot;ssl.ServerSocketFactory.provider &quot;が検査されます。もしそれが非 null であれば、その名前のクラスがロードされ、インスタンス化されます。これが成功し、オブジェクトがSSLServerSocketFactoryのインスタンスである場合、そのオブジェクトはデフォルトのSSLサーバソケットファクトリーになります。</target>
        </trans-unit>
        <trans-unit id="e23a8d2403200f42d35c95dbaa01e126e21da9de" translate="yes" xml:space="preserve">
          <source>The first time this method is called, the security property &quot;ssl.SocketFactory.provider&quot; is examined. If it is non-null, a class by that name is loaded and instantiated. If that is successful and the object is an instance of SSLSocketFactory, it is made the default SSL socket factory.</source>
          <target state="translated">このメソッドが最初に呼び出されたとき、セキュリティプロパティ &quot;ssl.SocketFactory.provider &quot;が検査されます。これが非 null であれば、その名前のクラスがロードされ、インスタンス化されます。これが成功し、オブジェクトがSSLSocketFactoryのインスタンスであれば、そのオブジェクトがデフォルトのSSLソケットファクトリーになります。</target>
        </trans-unit>
        <trans-unit id="8a962c97e6518122f548b76af705929079edf476" translate="yes" xml:space="preserve">
          <source>The first two bytes are read, starting from the current file pointer, as if by &lt;code&gt;readUnsignedShort&lt;/code&gt;. This value gives the number of following bytes that are in the encoded string, not the length of the resulting string. The following bytes are then interpreted as bytes encoding characters in the modified UTF-8 format and are converted into characters.</source>
          <target state="translated">&lt;code&gt;readUnsignedShort&lt;/code&gt; による場合と同様に、最初の2バイトが現在のファイルポインターから読み取られます。この値は、結果の文字列の長さではなく、エンコードされた文字列にある後続のバイト数を示します。次のバイトは、変更されたUTF-8形式の文字をエンコードするバイトとして解釈され、文字に変換されます。</target>
        </trans-unit>
        <trans-unit id="93f09dc332a6d87cbc7f2700d1dcb772db50c731" translate="yes" xml:space="preserve">
          <source>The first two items are simple menu items, labeled &lt;code&gt;&quot;Basic&quot;&lt;/code&gt; and &lt;code&gt;&quot;Simple&quot;&lt;/code&gt;. Following these two items is a separator, which is itself a menu item, created with the label &lt;code&gt;&quot;-&quot;&lt;/code&gt;. Next is an instance of &lt;code&gt;CheckboxMenuItem&lt;/code&gt; labeled &lt;code&gt;&quot;Check&quot;&lt;/code&gt;. The final menu item is a submenu labeled &lt;code&gt;&quot;More&amp;nbsp;Examples&quot;&lt;/code&gt;, and this submenu is an instance of &lt;code&gt;Menu&lt;/code&gt;.</source>
          <target state="translated">最初の2つの項目は、 &lt;code&gt;&quot;Basic&quot;&lt;/code&gt; と &lt;code&gt;&quot;Simple&quot;&lt;/code&gt; というラベルの付いた単純なメニュー項目です。これらの2つの項目の後には、 &lt;code&gt;&quot;-&quot;&lt;/code&gt; というラベルで作成された、それ自体がメニュー項目であるセパレーターがあります。次は、 &lt;code&gt;&quot;Check&quot;&lt;/code&gt; というラベルの付いた &lt;code&gt;CheckboxMenuItem&lt;/code&gt; のインスタンスです。最後のメニュー項目は &lt;code&gt;&quot;More&amp;nbsp;Examples&quot;&lt;/code&gt; MoreExamples 」というラベルの付いたサブメニューであり、このサブメニューは &lt;code&gt;Menu&lt;/code&gt; のインスタンスです。</target>
        </trans-unit>
        <trans-unit id="0d15c31a1476ba8c9f7c7d8d27e82b5d640f1a77" translate="yes" xml:space="preserve">
          <source>The first unsigned-short data array.</source>
          <target state="translated">最初の符号なしショートデータ配列。</target>
        </trans-unit>
        <trans-unit id="c213cb05e58269d0e6559b0fac1fb591d498dc45" translate="yes" xml:space="preserve">
          <source>The first view shows the button as it appears normally. The second view shows the button when it has input focus. Its outline is darkened to let the user know that it is an active object. The third view shows the button when the user clicks the mouse over the button, and thus requests that an action be performed.</source>
          <target state="translated">最初のビューは、ボタンが通常表示されている状態を示しています。2 番目のビューは、入力フォーカスがあるときのボタンを示しています。ボタンのアウトラインは、アクティブなオブジェクトであることを知らせるために暗くなっています。3番目のビューでは、ユーザーがボタンの上でマウスをクリックし、アクションの実行を要求したときにボタンを表示します。</target>
        </trans-unit>
        <trans-unit id="fbae85dad2c6f7a5278ce4329244cf84e25dc187" translate="yes" xml:space="preserve">
          <source>The first week of a week-based-year is the first Monday-based week of the standard ISO year that has at least 4 days in the new year.</source>
          <target state="translated">週を基準とした年の最初の週は、新年度に4日以上ある標準的なISO年度の最初の月曜日を基準とした週である。</target>
        </trans-unit>
        <trans-unit id="0316cde32b5bdfb9b4fd9633c6be6b42a876e337" translate="yes" xml:space="preserve">
          <source>The fixed content-length when using fixed-length streaming mode.</source>
          <target state="translated">固定長ストリーミングモードを使用する場合の固定コンテンツ長。</target>
        </trans-unit>
        <trans-unit id="4cf30efc47ef55fd6ea1c557d0031cbff7deeca7" translate="yes" xml:space="preserve">
          <source>The fixed content-length when using fixed-length streaming mode. A value of &lt;code&gt;-1&lt;/code&gt; means fixed-length streaming mode is disabled for output.</source>
          <target state="translated">固定長ストリーミングモードを使用する場合の固定コンテンツ長。値 &lt;code&gt;-1&lt;/code&gt; は、固定長ストリーミングモードが出力に対して無効であることを意味します。</target>
        </trans-unit>
        <trans-unit id="18122c06563b7f982531824d6ea7e1e9e3c9b49b" translate="yes" xml:space="preserve">
          <source>The flag</source>
          <target state="translated">旗</target>
        </trans-unit>
        <trans-unit id="9ce4a81d34da195f11b58288ebb14bbff3d3462c" translate="yes" xml:space="preserve">
          <source>The flag for recalculating the minimum preferred size.</source>
          <target state="translated">最小優先サイズを再計算するためのフラグ。</target>
        </trans-unit>
        <trans-unit id="3bdde16f19a07f9b8dc2c1020a660b4e0748e32a" translate="yes" xml:space="preserve">
          <source>The flag implies UNICODE_CASE, that is, it enables Unicode-aware case folding.</source>
          <target state="translated">このフラグはUNICODE_CASEを意味し、Unicodeを意識した大文字小文字の折りたたみを有効にします。</target>
        </trans-unit>
        <trans-unit id="8475b1dcbef3b5a8dfaaa365038143cbaecb1e14" translate="yes" xml:space="preserve">
          <source>The flags</source>
          <target state="translated">旗</target>
        </trans-unit>
        <trans-unit id="acf1c6f398fdcbcb2dd9d5e16e98bf9f77cfd517" translate="yes" xml:space="preserve">
          <source>The flags CASE_INSENSITIVE and UNICODE_CASE retain their impact on matching when used in conjunction with this flag. The other flags become superfluous.</source>
          <target state="translated">CASE_INSENSITIVEおよびUNICODE_CASEフラグは、このフラグと一緒に使用された場合、マッチングに対する影響を保持します。他のフラグは不要になります。</target>
        </trans-unit>
        <trans-unit id="07c51b56a837ef2b8a02eed0aace501dd2b7868a" translate="yes" xml:space="preserve">
          <source>The flags field contains an illegal flag (something other than FINAL, SYNTHETIC, or MANDATED)</source>
          <target state="translated">flagsフィールドに不正なフラグ(FINAL、SYNTHETIC、MANDATED以外のもの)が含まれています。</target>
        </trans-unit>
        <trans-unit id="f7b6efae110c00fda7a7b4252851296766762bd5" translate="yes" xml:space="preserve">
          <source>The flags which tell if a specified calendar field for the calendar is set.</source>
          <target state="translated">カレンダーの指定したカレンダーフィールドが設定されているかどうかを伝えるフラグです。</target>
        </trans-unit>
        <trans-unit id="6d843126f25e81dcab6945d31541378846e0fe18" translate="yes" xml:space="preserve">
          <source>The flags which tell if a specified calendar field for the calendar is set. A new object has no fields set. After the first call to a method which generates the fields, they all remain set after that. This is an array of &lt;code&gt;FIELD_COUNT&lt;/code&gt; booleans, with index values &lt;code&gt;ERA&lt;/code&gt; through &lt;code&gt;DST_OFFSET&lt;/code&gt;.</source>
          <target state="translated">カレンダーに指定されたカレンダーフィールドが設定されているかどうかを示すフラグ。新しいオブジェクトにはフィールドが設定されていません。フィールドを生成するメソッドを最初に呼び出した後、フィールドはすべてその後も設定されたままになります。これは &lt;code&gt;FIELD_COUNT&lt;/code&gt; ブール値の配列で、インデックス値は &lt;code&gt;ERA&lt;/code&gt; から &lt;code&gt;DST_OFFSET&lt;/code&gt; までです。</target>
        </trans-unit>
        <trans-unit id="c0adaae78bcbe2a1b61d64399723374aac50d29d" translate="yes" xml:space="preserve">
          <source>The float at the buffer's current position</source>
          <target state="translated">バッファの現在位置の float</target>
        </trans-unit>
        <trans-unit id="5f5dd8efc09209346141f04c0616a37cc7043005" translate="yes" xml:space="preserve">
          <source>The float at the given index</source>
          <target state="translated">指定されたインデックスの float</target>
        </trans-unit>
        <trans-unit id="df503d78651dfa6cbdc66ce61ad5b430069142aa" translate="yes" xml:space="preserve">
          <source>The float value at the buffer's current position</source>
          <target state="translated">バッファの現在位置でのフロート値</target>
        </trans-unit>
        <trans-unit id="9d0d1c8af02f3824120d9d83ef3d660c0196db65" translate="yes" xml:space="preserve">
          <source>The float value at the given index</source>
          <target state="translated">指定されたインデックスの float 値</target>
        </trans-unit>
        <trans-unit id="cf38f97e89711d18ff8d18b3b447db9c2e704c37" translate="yes" xml:space="preserve">
          <source>The floating-point number adjacent to &lt;code&gt;start&lt;/code&gt; in the direction of &lt;code&gt;direction&lt;/code&gt;.</source>
          <target state="translated">隣接する浮動小数点数 &lt;code&gt;start&lt;/code&gt; の方向に &lt;code&gt;direction&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6c9bf2083aa59da93c11b568d897301a010de3b" translate="yes" xml:space="preserve">
          <source>The floats between the buffer's current position and its limit, if any, are copied to the beginning of the buffer. That is, the float at index</source>
          <target state="translated">バッファの現在位置と限界値の間のフロートがある場合は、バッファの先頭にコピーされます。つまり、インデックス</target>
        </trans-unit>
        <trans-unit id="e0d99827c8ce6a7f1ce1c355b0240827dea1dca3" translate="yes" xml:space="preserve">
          <source>The floor modulus is &lt;code&gt;x - (floorDiv(x, y) * y)&lt;/code&gt;, has the same sign as the divisor &lt;code&gt;y&lt;/code&gt;, and is in the range of &lt;code&gt;-abs(y) &amp;lt; r &amp;lt; +abs(y)&lt;/code&gt;.</source>
          <target state="translated">床弾性率は、 &lt;code&gt;x - (floorDiv(x, y) * y)&lt;/code&gt; 、除数と同じ符号有し &lt;code&gt;y&lt;/code&gt; は、の範囲にある &lt;code&gt;-abs(y) &amp;lt; r &amp;lt; +abs(y)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="280e33602d3b6fb786402cff680f04e20b71bb69" translate="yes" xml:space="preserve">
          <source>The flow of data containing the response body is immutable. Specifically, it is a flow of unmodifiable lists of read-only ByteBuffers.</source>
          <target state="translated">レスポンスボディを含むデータのフローは不変です。具体的には、読み取り専用のByteBuffersの変更不可能なリストのフローである。</target>
        </trans-unit>
        <trans-unit id="bc909ee2dbad402f4622da99457457697a983db4" translate="yes" xml:space="preserve">
          <source>The focus behavior of this method can be implemented uniformly across platforms, and thus developers are strongly encouraged to use this method over &lt;code&gt;requestFocus(FocusEvent.Cause)&lt;/code&gt; when possible. Code which relies on &lt;code&gt;requestFocus(FocusEvent.Cause)&lt;/code&gt; may exhibit different focus behavior on different platforms.</source>
          <target state="translated">このメソッドのフォーカス動作はプラットフォーム間で均一に実装できるため、開発者は可能な場合は &lt;code&gt;requestFocus(FocusEvent.Cause)&lt;/code&gt; よりもこのメソッドを使用することを強くお勧めします。 &lt;code&gt;requestFocus(FocusEvent.Cause)&lt;/code&gt; に依存するコードは、プラットフォームごとに異なるフォーカス動作を示す場合があります。</target>
        </trans-unit>
        <trans-unit id="fe48a0cbbce340eaf18bd00bd02e43fdb1ec2645" translate="yes" xml:space="preserve">
          <source>The focus behavior of this method can be implemented uniformly across platforms, and thus developers are strongly encouraged to use this method over &lt;code&gt;requestFocus&lt;/code&gt; when possible. Code which relies on &lt;code&gt;requestFocus&lt;/code&gt; may exhibit different focus behavior on different platforms.</source>
          <target state="translated">このメソッドのフォーカス動作はプラットフォーム間で均一に実装できるため、開発者は可能な場合は &lt;code&gt;requestFocus&lt;/code&gt; ではなくこのメソッドを使用することを強くお勧めします。 &lt;code&gt;requestFocus&lt;/code&gt; に依存するコードは、プラットフォームごとに異なるフォーカス動作を示す場合があります。</target>
        </trans-unit>
        <trans-unit id="ed1e3f15a9fbddf35cf3b3d88086c04d0af8792d" translate="yes" xml:space="preserve">
          <source>The focus owner component will receive a permanent FOCUS_LOST event. After this operation completes, the native windowing system will discard all user-generated KeyEvents until the user selects a new Component to receive focus, or a Component is given focus explicitly via a call to &lt;code&gt;requestFocus()&lt;/code&gt;. This operation does not change the focused or active Windows.</source>
          <target state="translated">フォーカス所有者コンポーネントは、永続的なFOCUS_LOSTイベントを受け取ります。この操作が完了すると、ネイティブウィンドウシステムは、ユーザーがフォーカスを受け取る新しいコンポーネントを選択するか、 &lt;code&gt;requestFocus()&lt;/code&gt; の呼び出しによってコンポーネントに明示的にフォーカスが与えられるまで、ユーザーが生成したすべてのKeyEventを破棄します。この操作では、フォーカスされているWindowsまたはアクティブなWindowsは変更されません。</target>
        </trans-unit>
        <trans-unit id="d82ebe64b2c66aa82c60f6744718ef051e35870d" translate="yes" xml:space="preserve">
          <source>The focus request effect may also depend on the provided cause value. If this request is succeed the &lt;code&gt;FocusEvent&lt;/code&gt; generated in the result will receive the cause value specified as the argument of method. If this request is denied because this Component's top-level Window cannot become the focused Window, the request will be remembered and will be granted when the Window is later focused by the user.</source>
          <target state="translated">フォーカスリクエストの効果は、提供された原因値にも依存する場合があります。このリクエストが成功すると、結果で生成された &lt;code&gt;FocusEvent&lt;/code&gt; は、メソッドの引数として指定された原因値を受け取ります。このコンポーネントの最上位ウィンドウがフォーカスされたウィンドウになれないためにこのリクエストが拒否された場合、リクエストは記憶され、後でユーザーがウィンドウにフォーカスしたときに許可されます。</target>
        </trans-unit>
        <trans-unit id="5dea7f848e14ad78950943d5697e0debbf25f958" translate="yes" xml:space="preserve">
          <source>The focus request effect may also depend on the provided cause value. If this request is succeed the &lt;code&gt;FocusEvent&lt;/code&gt; generated in the result will receive the cause value specified as the argument of the method.</source>
          <target state="translated">フォーカスリクエストの効果は、提供された原因値にも依存する場合があります。このリクエストが成功すると、結果で生成された &lt;code&gt;FocusEvent&lt;/code&gt; は、メソッドの引数として指定された原因値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="8daf20c9b447db91c0278200268412cb2757a1c2" translate="yes" xml:space="preserve">
          <source>The focus request effect may also depend on the provided cause value. If this request is succeed the {FocusEvent} generated in the result will receive the cause value specified as the argument of the method.</source>
          <target state="translated">フォーカス要求の効果は、提供された原因値にも依存します。このリクエストが成功した場合、結果で生成された{FocusEvent}は、メソッドの引数として指定された原因値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="52e727459f97e367a24e63ce5e26868c1cacfac2" translate="yes" xml:space="preserve">
          <source>The focusability of a peer is implementation-dependent. Sun recommends that all implementations for a particular native platform construct peers with the same focusability. The recommendations for Windows and Unix are that Canvases, Labels, Panels, Scrollbars, ScrollPanes, Windows, and lightweight Components have non-focusable peers, and all other Components have focusable peers. These recommendations are used in the Sun AWT implementations. Note that the focusability of a Component's peer is different from, and does not impact, the focusability of the Component itself.</source>
          <target state="translated">ピアのフォーカス可能性はインプリメンテーションに依存します。Sun では、特定のネイティブ プラットフォーム用のすべての実装が同じフォーカス機能を持つピアを構築することを推奨しています。Windows と Unix の推奨事項は、Canvases、ラベル、パネル、スクロールバー、スクロールペイン、Windows、および軽量コンポーネントにはフォーカス不可能なピアがあり、その他のすべてのコンポーネントにはフォーカス可能なピアがあるというものです。これらの推奨事項は、Sun AWT の実装で使用されています。コンポーネントのピアのフォーカス可能性は、コンポーネント自体のフォーカス可能性とは異なり、影響を与えないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="c1c6d627ead12229c807ce22675b0c1519b3cc76" translate="yes" xml:space="preserve">
          <source>The following &lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/doc-files/synthFileFormat.html&quot;&gt;xml&lt;/a&gt; accomplishes the same thing:</source>
          <target state="translated">次の&lt;a href=&quot;https://docs.oracle.com/en/java/javase/11/docs/api/java.desktop/javax/swing/plaf/synth/doc-files/synthFileFormat.html&quot;&gt;xml&lt;/a&gt;は同じことを実行します。</target>
        </trans-unit>
        <trans-unit id="a4881b74aec50637258a768368531331b69b2cb6" translate="yes" xml:space="preserve">
          <source>The following &lt;a id=&quot;dFlags&quot;&gt;flags&lt;/a&gt; apply to general conversions:</source>
          <target state="translated">次の&lt;a id=&quot;dFlags&quot;&gt;フラグ&lt;/a&gt;は、一般的な変換に適用されます。</target>
        </trans-unit>
        <trans-unit id="2d2e8bee1741cb35e48bf15acf57384e8c8d6ebd" translate="yes" xml:space="preserve">
          <source>The following &lt;a id=&quot;intFlags&quot;&gt;flags&lt;/a&gt; apply to numeric integral conversions:</source>
          <target state="translated">次の&lt;a id=&quot;intFlags&quot;&gt;フラグ&lt;/a&gt;は、数値の整数変換に適用されます。</target>
        </trans-unit>
        <trans-unit id="12aac71ba5c65f1b9823244ddc37b779b34b0675" translate="yes" xml:space="preserve">
          <source>The following &lt;a id=&quot;sample&quot;&gt;example&lt;/a&gt; shows a member of a resource bundle family with the base name &quot;MyResources&quot;. The text defines the bundle &quot;MyResources_de&quot;, the German member of the bundle family. This member is based on &lt;code&gt;PropertyResourceBundle&lt;/code&gt;, and the text therefore is the content of the file &quot;MyResources_de.properties&quot; (a related &lt;a href=&quot;listresourcebundle#sample&quot;&gt;example&lt;/a&gt; shows how you can add bundles to this family that are implemented as subclasses of &lt;code&gt;ListResourceBundle&lt;/code&gt;). The keys in this example are of the form &quot;s1&quot; etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive.</source>
          <target state="translated">次の&lt;a id=&quot;sample&quot;&gt;例&lt;/a&gt;は、ベース名が「MyResources」のリソースバンドルファミリのメンバーを示しています。このテキストは、バンドルファミリのドイツ語メンバーであるバンドル「MyResources_de」を定義しています。このメンバーは、に基づいて &lt;code&gt;PropertyResourceBundle&lt;/code&gt; が、テキストはそのため（関連ファイル「MyResources_de.properties」の内容である&lt;a href=&quot;listresourcebundle#sample&quot;&gt;例を&lt;/a&gt;使用すると、のサブクラスとして実装されるこのファミリにバンドルを追加する方法を示し &lt;code&gt;ListResourceBundle&lt;/code&gt; ）。この例のキーの形式は「s1」などです。実際のキーは、バンドルからオブジェクトを取得するためにプログラムで使用するキーと同じである限り、完全に選択できます。キーでは大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="a1d70d7905db1922022a89a8a3ea9dc6885b1ebe" translate="yes" xml:space="preserve">
          <source>The following &lt;a id=&quot;sample&quot;&gt;example&lt;/a&gt; shows two members of a resource bundle family with the base name &quot;MyResources&quot;. &quot;MyResources&quot; is the default member of the bundle family, and &quot;MyResources_fr&quot; is the French member. These members are based on &lt;code&gt;ListResourceBundle&lt;/code&gt; (a related &lt;a href=&quot;propertyresourcebundle#sample&quot;&gt;example&lt;/a&gt; shows how you can add a bundle to this family that's based on a properties file). The keys in this example are of the form &quot;s1&quot; etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive.</source>
          <target state="translated">次の&lt;a id=&quot;sample&quot;&gt;例&lt;/a&gt;は、ベース名が「MyResources」のリソースバンドルファミリの2つのメンバーを示しています。 「MyResources」はバンドルファミリのデフォルトのメンバーであり、「MyResources_fr」はフランス語のメンバーです。これらのメンバーは &lt;code&gt;ListResourceBundle&lt;/code&gt; に基づいています（関連する&lt;a href=&quot;propertyresourcebundle#sample&quot;&gt;例&lt;/a&gt;は、プロパティファイルに基づいてこのファミリにバンドルを追加する方法を示しています）。この例のキーの形式は「s1」などです。実際のキーは、バンドルからオブジェクトを取得するためにプログラムで使用するキーと同じである限り、完全に選択できます。キーでは大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="34b31fc78f10c0c8e222a5a96f8da8b395480561" translate="yes" xml:space="preserve">
          <source>The following &lt;a name=&quot;dFlags&quot;&gt;flags&lt;/a&gt; apply to general conversions:</source>
          <target state="translated">次の&lt;a name=&quot;dFlags&quot;&gt;フラグ&lt;/a&gt;は、一般的な変換に適用されます。</target>
        </trans-unit>
        <trans-unit id="718105550381be452dea567eb4cb4d403db03a9d" translate="yes" xml:space="preserve">
          <source>The following &lt;a name=&quot;intFlags&quot;&gt;flags&lt;/a&gt; apply to numeric integral conversions:</source>
          <target state="translated">次の&lt;a name=&quot;intFlags&quot;&gt;フラグ&lt;/a&gt;は、数値積分変換に適用されます。</target>
        </trans-unit>
        <trans-unit id="6c97a3fa3251171b01f24900b04fa28963a31f2e" translate="yes" xml:space="preserve">
          <source>The following &lt;a name=&quot;sample&quot;&gt;example&lt;/a&gt; shows a member of a resource bundle family with the base name &quot;MyResources&quot;. The text defines the bundle &quot;MyResources_de&quot;, the German member of the bundle family. This member is based on &lt;code&gt;PropertyResourceBundle&lt;/code&gt;, and the text therefore is the content of the file &quot;MyResources_de.properties&quot; (a related &lt;a href=&quot;listresourcebundle#sample&quot;&gt;example&lt;/a&gt; shows how you can add bundles to this family that are implemented as subclasses of &lt;code&gt;ListResourceBundle&lt;/code&gt;). The keys in this example are of the form &quot;s1&quot; etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive.</source>
          <target state="translated">次の&lt;a name=&quot;sample&quot;&gt;例&lt;/a&gt;は、ベース名が「MyResources」のリソースバンドルファミリーのメンバーを示しています。テキストは、バンドルファミリーのドイツ語メンバーであるバンドル「MyResources_de」を定義します。このメンバーは、に基づいて &lt;code&gt;PropertyResourceBundle&lt;/code&gt; が、テキストはそのため（関連ファイル「MyResources_de.properties」の内容である&lt;a href=&quot;listresourcebundle#sample&quot;&gt;例を&lt;/a&gt;使用すると、のサブクラスとして実装されるこのファミリにバンドルを追加する方法を示し &lt;code&gt;ListResourceBundle&lt;/code&gt; ）。この例のキーは「s1」などの形式です。実際のキーは、バンドルからオブジェクトを取得するためにプログラムで使用するキーと同じである限り、完全に任意です。キーでは大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="ab872f1920dd3b6207973c5efd102398d0548897" translate="yes" xml:space="preserve">
          <source>The following &lt;a name=&quot;sample&quot;&gt;example&lt;/a&gt; shows two members of a resource bundle family with the base name &quot;MyResources&quot;. &quot;MyResources&quot; is the default member of the bundle family, and &quot;MyResources_fr&quot; is the French member. These members are based on &lt;code&gt;ListResourceBundle&lt;/code&gt; (a related &lt;a href=&quot;propertyresourcebundle#sample&quot;&gt;example&lt;/a&gt; shows how you can add a bundle to this family that's based on a properties file). The keys in this example are of the form &quot;s1&quot; etc. The actual keys are entirely up to your choice, so long as they are the same as the keys you use in your program to retrieve the objects from the bundle. Keys are case-sensitive.</source>
          <target state="translated">次の&lt;a name=&quot;sample&quot;&gt;例&lt;/a&gt;は、ベース名が「MyResources」のリソースバンドルファミリーの2つのメンバーを示しています。 「MyResources」はバンドルファミリのデフォルトメンバーであり、「MyResources_fr」はフランス語のメンバーです。これらのメンバーは &lt;code&gt;ListResourceBundle&lt;/code&gt; に基づいています（関連する&lt;a href=&quot;propertyresourcebundle#sample&quot;&gt;例&lt;/a&gt;は、プロパティファイルに基づいてこのファミリにバンドルを追加する方法を示しています）。この例のキーは「s1」などの形式です。実際のキーは、バンドルからオブジェクトを取得するためにプログラムで使用するキーと同じである限り、完全に任意です。キーでは大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="4d7bc9d38cfb742a7ccf3ed1fac435611b40a277" translate="yes" xml:space="preserve">
          <source>The following &lt;b&gt;Predefined Character classes&lt;/b&gt; and &lt;b&gt;POSIX character classes&lt;/b&gt; are in conformance with the recommendation of</source>
          <target state="translated">次の&lt;b&gt;定義済み文字クラス&lt;/b&gt;と&lt;b&gt;POSIX文字クラス&lt;/b&gt;は、以下の推奨事項に準拠しています。</target>
        </trans-unit>
        <trans-unit id="3bdbb766d31b298fea0830eadf61cfd0cf5d8817" translate="yes" xml:space="preserve">
          <source>The following &lt;b&gt;conversions&lt;/b&gt; are performed:</source>
          <target state="translated">次の&lt;b&gt;変換&lt;/b&gt;が実行されます。</target>
        </trans-unit>
        <trans-unit id="44d784bdfbe5ffed1bb41380bc3830e293c48f1e" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;Finishings&lt;/code&gt; values are more specific; they indicate a corner or an edge as if the document were a portrait document:</source>
          <target state="translated">次の &lt;code&gt;Finishings&lt;/code&gt; 値はより具体的です。それらは、ドキュメントが縦向きのドキュメントであるかのように、コーナーまたはエッジを示します。</target>
        </trans-unit>
        <trans-unit id="c12b850130d44e2cdaecf419de9717707a564dd0" translate="yes" xml:space="preserve">
          <source>The following &lt;code&gt;JTree&lt;/code&gt; methods use &quot;visible&quot; to mean &quot;displayed&quot;:</source>
          <target state="translated">次の &lt;code&gt;JTree&lt;/code&gt; メソッドは、「表示」を意味する「表示」を使用します。</target>
        </trans-unit>
        <trans-unit id="dae9623d0c0d956fdb794a25b86835fd7a72be31" translate="yes" xml:space="preserve">
          <source>The following Finishings values are more specific; they indicate a corner or an edge as if the document were a portrait document:</source>
          <target state="translated">以下の仕上げの値はより具体的で、文書が縦書きの文書であるかのように角や端を示しています。</target>
        </trans-unit>
        <trans-unit id="7d489fbed0473aef722ac8b09e75be9176cc9c80" translate="yes" xml:space="preserve">
          <source>The following MIME types do not support, or are treated as though they do not support, the charset parameter:</source>
          <target state="translated">以下の MIME タイプは charset パラメータをサポートしていないか、またはサポートしていないかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="998e8b1f1fff339ae9d53d38b65e9d8fd529ed6a" translate="yes" xml:space="preserve">
          <source>The following MIME types support, or are treated as though they support, the charset parameter:</source>
          <target state="translated">以下の MIME タイプは charset パラメータをサポートしているか、またはサポートしているかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="df4565a08976159f98d000170c1e13b94b809704" translate="yes" xml:space="preserve">
          <source>The following Unicode characters are ignorable in a Java identifier or a Unicode identifier:</source>
          <target state="translated">以下の Unicode 文字は、Java 識別子または Unicode 識別子では無視できません。</target>
        </trans-unit>
        <trans-unit id="4ca21e25a67399fdd5f6d00d42c8747788aa0b41" translate="yes" xml:space="preserve">
          <source>The following XML standards apply:</source>
          <target state="translated">以下のXML標準が適用されます。</target>
        </trans-unit>
        <trans-unit id="e1ee2b7fc161b561363a09eb8a74b719ec01fd3b" translate="yes" xml:space="preserve">
          <source>The following are calendar-specific fields and their values to be supported.</source>
          <target state="translated">以下は、対応するカレンダー固有のフィールドとその値です。</target>
        </trans-unit>
        <trans-unit id="f0b92be08cad28f715f6320945131c35c8b3277f" translate="yes" xml:space="preserve">
          <source>The following are errors:</source>
          <target state="translated">以下はエラーです。</target>
        </trans-unit>
        <trans-unit id="27f242fe17aebfc38c4d46f59d88bb9f72485164" translate="yes" xml:space="preserve">
          <source>The following are examples of lowercase characters:</source>
          <target state="translated">小文字の例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="05d1989cc2fb19eeffe91f625bf1710856eae32f" translate="yes" xml:space="preserve">
          <source>The following are examples of parameters for constructing time zone objects.</source>
          <target state="translated">タイムゾーンオブジェクトを構築するためのパラメータの例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="c270078ad6b151e92fcc3a3f5df550c25921664d" translate="yes" xml:space="preserve">
          <source>The following are examples of uppercase characters:</source>
          <target state="translated">大文字の例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="7f902e7ce71e7969f8b0bc66620cd5a7f55944f6" translate="yes" xml:space="preserve">
          <source>The following are examples of using the predefined body handlers to convert a flow of response body data into common high-level Java objects:</source>
          <target state="translated">以下は、定義済みのボディハンドラを使用して、レスポンスボディデータのフローを一般的な高レベルJavaオブジェクトに変換する例です。</target>
        </trans-unit>
        <trans-unit id="f5ee0e0b8a290697ed79df522190652147f3e31a" translate="yes" xml:space="preserve">
          <source>The following are examples of using the predefined body publishers to convert common high-level Java objects into a flow of data suitable for sending as a request body:</source>
          <target state="translated">以下に、定義済みボディパブリッシャを使用して、一般的な高レベル Java オブジェクトを、リクエストボディとして送信するのに適したデータの流れに変換する例を示します。</target>
        </trans-unit>
        <trans-unit id="bd3e8596127bc1cb56466afb3fa9267998bd21de" translate="yes" xml:space="preserve">
          <source>The following are examples of using the predefined body subscribers to convert a flow of response body data into common high-level Java objects:</source>
          <target state="translated">以下に、定義済みのボディ・サブスクライバを使用して、レスポンス・ボディ・データのフローを一般的な高レベルJavaオブジェクトに変換する例を示します。</target>
        </trans-unit>
        <trans-unit id="60a5c21ec25e055a782b032c59385ba40939fb9a" translate="yes" xml:space="preserve">
          <source>The following are examples of using the predefined collectors to perform common mutable reduction tasks:</source>
          <target state="translated">以下に、定義済みコレクタを使用して一般的なミューティアブルリダクションタスクを実行する例を示します。</target>
        </trans-unit>
        <trans-unit id="b97bba4fff0b3918e7f07a18b65329ce403bc4f5" translate="yes" xml:space="preserve">
          <source>The following are modeled, but currently not rendered.</source>
          <target state="translated">以下はモデル化されていますが、現在はレンダリングされていません。</target>
        </trans-unit>
        <trans-unit id="9869b3b737829b0afd57282f629afb3659f3487b" translate="yes" xml:space="preserve">
          <source>The following are sample usages. Sample code assumes that the &lt;code&gt;Calendar&lt;/code&gt; constants are statically imported.</source>
          <target state="translated">以下は使用例です。サンプルコードは、 &lt;code&gt;Calendar&lt;/code&gt; 定数が静的にインポートされることを前提としています。</target>
        </trans-unit>
        <trans-unit id="71d987106f2fadf17c35148925f24373778218fc" translate="yes" xml:space="preserve">
          <source>The following are standard client info properties. Drivers are not required to support these properties however if the driver supports a client info property that can be described by one of the standard properties, the standard property name should be used.</source>
          <target state="translated">以下に標準のクライアント情報プロパティを示します。ドライバはこれらのプロパティをサポートする必要はありませんが、ドライバが標準プロパティのいずれかで記述できるクライアント情報プロパティをサポートしている場合は、標準プロパティ名を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="62d730b0f64c93754a84e32c9c2254f5b445ccc9" translate="yes" xml:space="preserve">
          <source>The following builds a panel consisting of two labels in one column, followed by two textfields in the next column:</source>
          <target state="translated">以下は、1列に2つのラベルを配置し、次の列に2つのテキス ト フ ィ ール ド を配置したパネルを構築します。</target>
        </trans-unit>
        <trans-unit id="d04cf50de153033d5654b8c69914c1515d75abe8" translate="yes" xml:space="preserve">
          <source>The following cases may result in an AttributeNotFoundException:</source>
          <target state="translated">以下の場合、AttributeNotFoundExceptionが発生することがあります。</target>
        </trans-unit>
        <trans-unit id="e5acfaa953e3076c682c3b2882e4f2bd0aa0de39" translate="yes" xml:space="preserve">
          <source>The following class and property files are provided:</source>
          <target state="translated">以下のクラスファイルとプロパティファイルが用意されています。</target>
        </trans-unit>
        <trans-unit id="90fef22caa25d68a95a94801857aaaf77c6b34fa" translate="yes" xml:space="preserve">
          <source>The following classes and interfaces make up the &lt;code&gt;javax.sql.rowset.spi&lt;/code&gt; package:</source>
          <target state="translated">以下のクラスとインターフェースが &lt;code&gt;javax.sql.rowset.spi&lt;/code&gt; パッケージを構成します。</target>
        </trans-unit>
        <trans-unit id="81dad332c4884662d7929a6f97cdab033d2eefd0" translate="yes" xml:space="preserve">
          <source>The following code can be used to dump a delay queue into a newly allocated array of &lt;code&gt;Delayed&lt;/code&gt;:</source>
          <target state="translated">次のコードを使用して、遅延キューを新しく割り当てられた &lt;code&gt;Delayed&lt;/code&gt; の配列にダンプできます。</target>
        </trans-unit>
        <trans-unit id="227d1820cd21095e7e036ac8daa93ccb8e9a7890" translate="yes" xml:space="preserve">
          <source>The following code demonstrates typical usage of &lt;code&gt;LinearGradientPaint&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;LinearGradientPaint&lt;/code&gt; の一般的な使用法を示しています。</target>
        </trans-unit>
        <trans-unit id="e2633b08939a6cb725fe62e6be55fea8c45c8e11" translate="yes" xml:space="preserve">
          <source>The following code demonstrates typical usage of &lt;code&gt;RadialGradientPaint&lt;/code&gt;, where the center and focus points are the same:</source>
          <target state="translated">次のコードは、 &lt;code&gt;RadialGradientPaint&lt;/code&gt; の一般的な使用法を示しています。ここで、中心点と焦点は同じです。</target>
        </trans-unit>
        <trans-unit id="54180ef3871ceb997221df27b4e4a11af5d8f1aa" translate="yes" xml:space="preserve">
          <source>The following code example creates a set of check boxes in a grid layout:</source>
          <target state="translated">次のコード例は、グリッドレイアウトにチェックボックスのセットを作成します。</target>
        </trans-unit>
        <trans-unit id="0abb0b51490ecf3f6bcdc7c433981853ae7afe8c" translate="yes" xml:space="preserve">
          <source>The following code example produces a new check box group, with three check boxes:</source>
          <target state="translated">次のコード例は、3 つのチェックボックスを持つ新しいチェックボックスグループを生成します。</target>
        </trans-unit>
        <trans-unit id="26b12edd9c74f32a315f18d6e0245a8d205f462f" translate="yes" xml:space="preserve">
          <source>The following code example produces a pop-up menu:</source>
          <target state="translated">次のコード例は、ポップアップメニューを生成します。</target>
        </trans-unit>
        <trans-unit id="26190c69388e00e900b9c89c33b9000b686392c1" translate="yes" xml:space="preserve">
          <source>The following code example shows how to construct an Rdn using the constructor that takes type and value as arguments:</source>
          <target state="translated">次のコード例は、型と値を引数に取るコンストラクタを使用してRdnを構築する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b4dde6fd46d9d98ad6bdb352548d11eda0d76882" translate="yes" xml:space="preserve">
          <source>The following code fragment adds an additional &lt;code&gt;CachedRowSet&lt;/code&gt; object. In this case, the match column (&lt;code&gt;EMP_ID&lt;/code&gt;) is set when the &lt;code&gt;CachedRowSet&lt;/code&gt; object is added to the &lt;code&gt;JoinRowSet&lt;/code&gt; object.</source>
          <target state="translated">次のコードフラグメントは、追加の &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトを追加します。この場合、 &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトが &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクトに追加されると、一致列（ &lt;code&gt;EMP_ID&lt;/code&gt; ）が設定されます。</target>
        </trans-unit>
        <trans-unit id="8df174f921047ae28580b54b0cdcc047748ea1ed" translate="yes" xml:space="preserve">
          <source>The following code fragment adds two &lt;code&gt;CachedRowSet&lt;/code&gt; objects to a &lt;code&gt;JoinRowSet&lt;/code&gt; object. Note that in this example, no SQL &lt;code&gt;JOIN&lt;/code&gt; type is set, so the default &lt;code&gt;JOIN&lt;/code&gt; type, which is</source>
          <target state="translated">次のコードフラグメントは、2つの &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトを &lt;code&gt;JoinRowSet&lt;/code&gt; オブジェクトに追加します。この例では、SQL &lt;code&gt;JOIN&lt;/code&gt; タイプが設定されていないため、デフォルトの &lt;code&gt;JOIN&lt;/code&gt; タイプは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6773b465b3d404ad261c509a280ba3f40b8e5320" translate="yes" xml:space="preserve">
          <source>The following code fragment assumes a continuation from the previous code fragment, meaning that the cursor for the tenth &lt;code&gt;CachedRowSet&lt;/code&gt; object is on the last row. The code moves the cursor to after the last row so that the first call to the method &lt;code&gt;previous&lt;/code&gt; will put the cursor back on the last row. After going through all of the rows in the last page (the &lt;code&gt;CachedRowSet&lt;/code&gt; object</source>
          <target state="translated">次のコードフラグメントは、前のコードフラグメントからの継続を想定しています。つまり、10番目の &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトのカーソルが最後の行にあります。コードはカーソルを最後の行の後に移動して、 &lt;code&gt;previous&lt;/code&gt; のメソッドを最初に呼び出すとカーソルが最後の行に戻るようにします。最後のページのすべての行を &lt;code&gt;CachedRowSet&lt;/code&gt; （CachedRowSetオブジェクト</target>
        </trans-unit>
        <trans-unit id="eba32858f7519f61ceb0b5a48950849803b2f189" translate="yes" xml:space="preserve">
          <source>The following code fragment changes the second column value in the row just inserted. Note that this code applies when new rows are inserted right after the current row, which is why the method &lt;code&gt;next&lt;/code&gt; moves the cursor to the correct row. Calling the method &lt;code&gt;acceptChanges&lt;/code&gt; writes the change to the data source.</source>
          <target state="translated">次のコードフラグメントは、挿入されたばかりの行の2番目の列の値を変更します。このコードは、現在の行の直後に新しい行が挿入されたときに適用されることに注意してください。そのため、メソッドは &lt;code&gt;next&lt;/code&gt; カーソルを正しい行に移動します。メソッド &lt;code&gt;acceptChanges&lt;/code&gt; を呼び出すと、変更がデータソースに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="1d5968a08703e94a4a5aee0f8466d3006c4a1e9e" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates a trivial compression and decompression of a string using &lt;code&gt;Deflater&lt;/code&gt; and &lt;code&gt;Inflater&lt;/code&gt;.</source>
          <target state="translated">次のコードは、使用して、文字列の些細な圧縮及び伸張実証 &lt;code&gt;Deflater&lt;/code&gt; と &lt;code&gt;Inflater&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96094c650cc9a333311a4f9bc2c173955b909112" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates how a disconnected &lt;code&gt;RowSet&lt;/code&gt; object</source>
          <target state="translated">次のコードフラグメントは、切断された &lt;code&gt;RowSet&lt;/code&gt; オブジェクトがどのように</target>
        </trans-unit>
        <trans-unit id="42405a142dbf11f8cdb3fb4c05bfa6fda4339531" translate="yes" xml:space="preserve">
          <source>The following code fragment demonstrates setting the two parameters in the query from the previous example.</source>
          <target state="translated">次のコードは、前の例のクエリで 2 つのパラメータを設定する様子を示しています。</target>
        </trans-unit>
        <trans-unit id="8b3e91b81a281144249ef6addd147d0853975575" translate="yes" xml:space="preserve">
          <source>The following code fragment illustrates how the &lt;code&gt;CachedRowSet&lt;/code&gt; object &lt;code&gt;crs&lt;/code&gt; might have its command property set. Note that if a tool is used to set properties, this is the code that the tool would use.</source>
          <target state="translated">次のコードフラグメントは、 &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクト &lt;code&gt;crs&lt;/code&gt; にコマンドプロパティが設定される方法を示しています。ツールを使用してプロパティを設定する場合、これはツールが使用するコードであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0c5ed96b41606026b4ffa723b73e4581205b95f9" translate="yes" xml:space="preserve">
          <source>The following code fragment illustrates how the &lt;code&gt;CachedRowSet&lt;/code&gt;&amp;trade; object &lt;code&gt;crs&lt;/code&gt; might have its command property set. Note that if a tool is used to set properties, this is the code that the tool would use.</source>
          <target state="translated">次のコードフラグメントは、 &lt;code&gt;CachedRowSet&lt;/code&gt; &amp;trade;オブジェクト &lt;code&gt;crs&lt;/code&gt; にコマンドプロパティが設定される方法を示しています。ツールを使用してプロパティを設定する場合、これはツールが使用するコードであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7a5a5f06f72114240302fe24ea2111f8e178428b" translate="yes" xml:space="preserve">
          <source>The following code illustrates extracting the bits for pixel &lt;code&gt;x,&amp;nbsp;y&lt;/code&gt; from &lt;code&gt;DataBuffer data&lt;/code&gt; and storing the pixel data in data elements of type &lt;code&gt;dataType&lt;/code&gt;:</source>
          <target state="translated">次のコードは、 &lt;code&gt;DataBuffer data&lt;/code&gt; からピクセル &lt;code&gt;x,&amp;nbsp;y&lt;/code&gt; ビットを抽出し、データ型 &lt;code&gt;dataType&lt;/code&gt; のデータ要素にピクセルデータを格納する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3730434f3e75feda52293db7b56b2003199dc119" translate="yes" xml:space="preserve">
          <source>The following code illustrates extracting the bits of the sample representing band &lt;code&gt;b&lt;/code&gt; for pixel &lt;code&gt;x,y&lt;/code&gt; from DataBuffer &lt;code&gt;data&lt;/code&gt;:</source>
          <target state="translated">次のコードは、DataBuffer &lt;code&gt;data&lt;/code&gt; からピクセル &lt;code&gt;x,y&lt;/code&gt; バンド &lt;code&gt;b&lt;/code&gt; を表すサンプルのビットを抽出する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="b6eed7502c028b2834e03ee8b5d0c55922f8bb13" translate="yes" xml:space="preserve">
          <source>The following code illustrates transferring data for a rectangular region of pixels from DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by SampleModel &lt;code&gt;sm1&lt;/code&gt;, to DataBuffer &lt;code&gt;db2&lt;/code&gt;, whose storage layout is described by SampleModel &lt;code&gt;sm2&lt;/code&gt;. The transfer will generally be more efficient than using getPixels/setPixels.</source>
          <target state="translated">次のコードは、のDataBufferからピクセルの矩形領域のデータを転送示す &lt;code&gt;db1&lt;/code&gt; そのストレージレイアウトたSampleModelによって記述され、 &lt;code&gt;sm1&lt;/code&gt; のDataBufferに、 &lt;code&gt;db2&lt;/code&gt; 、そのストレージレイアウトたSampleModelによって記載され、 &lt;code&gt;sm2&lt;/code&gt; 。転送は通常、getPixels / setPixelsを使用するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="cda7de20ca2983fc3786e70123c92da540700ceb" translate="yes" xml:space="preserve">
          <source>The following code illustrates transferring data for one pixel from &lt;code&gt;DataBuffer db1&lt;/code&gt;, whose storage layout is described by &lt;code&gt;ComponentSampleModel csm1&lt;/code&gt;, to &lt;code&gt;DataBuffer db2&lt;/code&gt;, whose storage layout is described by &lt;code&gt;ComponentSampleModel csm2&lt;/code&gt;. The transfer is usually more efficient than using &lt;code&gt;getPixel&lt;/code&gt; and &lt;code&gt;setPixel&lt;/code&gt;.</source>
          <target state="translated">次のコードは、から1つの画素分のデータを転送示し &lt;code&gt;DataBuffer db1&lt;/code&gt; 格納レイアウトによって記述され、 &lt;code&gt;ComponentSampleModel csm1&lt;/code&gt; に、 &lt;code&gt;DataBuffer db2&lt;/code&gt; 、そのストレージレイアウトによって記述され、 &lt;code&gt;ComponentSampleModel csm2&lt;/code&gt; 。転送は通常、 &lt;code&gt;getPixel&lt;/code&gt; や &lt;code&gt;setPixel&lt;/code&gt; を使用するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="d0e78dca23788effecb923a2485f4949cc8762dd" translate="yes" xml:space="preserve">
          <source>The following code illustrates transferring data for one pixel from &lt;code&gt;DataBuffer db1&lt;/code&gt;, whose storage layout is described by &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt;&lt;code&gt;mppsm1&lt;/code&gt;, to &lt;code&gt;DataBuffer db2&lt;/code&gt;, whose storage layout is described by &lt;code&gt;MultiPixelPackedSampleModel mppsm2&lt;/code&gt;. The transfer is generally more efficient than using &lt;code&gt;getPixel&lt;/code&gt; or &lt;code&gt;setPixel&lt;/code&gt;.</source>
          <target state="translated">次のコードは、から1つの画素分のデータを転送示し &lt;code&gt;DataBuffer db1&lt;/code&gt; 、そのストレージレイアウトによって記述され、 &lt;code&gt;MultiPixelPackedSampleModel&lt;/code&gt; の &lt;code&gt;mppsm1&lt;/code&gt; に、 &lt;code&gt;DataBuffer db2&lt;/code&gt; 、そのストレージレイアウトによって記述され、 &lt;code&gt;MultiPixelPackedSampleModel mppsm2&lt;/code&gt; 。転送は通常、 &lt;code&gt;getPixel&lt;/code&gt; または &lt;code&gt;setPixel&lt;/code&gt; を使用するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="f7c9581a48bebdc273b3472a6803be3c51068a1c" translate="yes" xml:space="preserve">
          <source>The following code illustrates transferring data for one pixel from DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by BandedSampleModel &lt;code&gt;bsm1&lt;/code&gt;, to DataBuffer &lt;code&gt;db2&lt;/code&gt;, whose storage layout is described by BandedSampleModel &lt;code&gt;bsm2&lt;/code&gt;. The transfer will generally be more efficient than using getPixel/setPixel.</source>
          <target state="translated">次のコードは、のDataBufferから1つの画素分のデータを転送示す &lt;code&gt;db1&lt;/code&gt; ストレージレイアウトてBandedSampleModelさによって記述される、 &lt;code&gt;bsm1&lt;/code&gt; のDataBufferに、 &lt;code&gt;db2&lt;/code&gt; 、そのストレージレイアウトてBandedSampleModelさによって記述される、 &lt;code&gt;bsm2&lt;/code&gt; 。転送は通常、getPixel / setPixelを使用するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="786fa58553bbb22bd44b32bbedcc35d26731553a" translate="yes" xml:space="preserve">
          <source>The following code illustrates transferring data for one pixel from DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by SampleModel &lt;code&gt;sm1&lt;/code&gt;, to DataBuffer &lt;code&gt;db2&lt;/code&gt;, whose storage layout is described by SampleModel &lt;code&gt;sm2&lt;/code&gt;. The transfer will generally be more efficient than using getPixel/setPixel.</source>
          <target state="translated">次のコードは、のDataBufferから1つの画素分のデータを転送示す &lt;code&gt;db1&lt;/code&gt; そのストレージレイアウトたSampleModelによって記述され、 &lt;code&gt;sm1&lt;/code&gt; のDataBufferに、 &lt;code&gt;db2&lt;/code&gt; 、そのストレージレイアウトたSampleModelによって記載され、 &lt;code&gt;sm2&lt;/code&gt; 。転送は通常、getPixel / setPixelを使用するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="b6b234ff7b7d5ab1a3fd3a8d7587dd8ea82bea1d" translate="yes" xml:space="preserve">
          <source>The following code illustrates transferring data for one pixel from DataBuffer &lt;code&gt;db1&lt;/code&gt;, whose storage layout is described by SinglePixelPackedSampleModel &lt;code&gt;sppsm1&lt;/code&gt;, to DataBuffer &lt;code&gt;db2&lt;/code&gt;, whose storage layout is described by SinglePixelPackedSampleModel &lt;code&gt;sppsm2&lt;/code&gt;. The transfer will generally be more efficient than using getPixel/setPixel.</source>
          <target state="translated">次のコードは、のDataBufferから1つの画素分のデータを転送示す &lt;code&gt;db1&lt;/code&gt; ストレージレイアウトSinglePixelPackedSampleModelのとによって記述される、 &lt;code&gt;sppsm1&lt;/code&gt; のDataBufferに、 &lt;code&gt;db2&lt;/code&gt; 、そのストレージレイアウトSinglePixelPackedSampleModelのとによって記述される、 &lt;code&gt;sppsm2&lt;/code&gt; 。転送は通常、getPixel / setPixelを使用するよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="72e0bde62e0509950a2948eb0be98aef7dd9a610" translate="yes" xml:space="preserve">
          <source>The following code lets &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; look up only properties-based resources.</source>
          <target state="translated">次のコードでは、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; でプロパティベースのリソースのみを検索できます。</target>
        </trans-unit>
        <trans-unit id="1f1b78e1c0e997e909e37d743d046d8f92f4a541" translate="yes" xml:space="preserve">
          <source>The following code obtains a service loader for the &lt;code&gt;CodecFactory&lt;/code&gt; service, then uses its iterator (created automatically by the enhanced-for loop) to yield instances of the service providers that are located:</source>
          <target state="translated">次のコードは、 &lt;code&gt;CodecFactory&lt;/code&gt; サービスのサービスローダーを取得し、そのイテレーター（拡張forループによって自動的に作成される）を使用して、配置されているサービスプロバイダーのインスタンスを生成します。</target>
        </trans-unit>
        <trans-unit id="163794ef580a81f8d8edef9ba10c1ba07de234f2" translate="yes" xml:space="preserve">
          <source>The following code pops up a file chooser for the user's home directory that sees only .jpg and .gif images:</source>
          <target state="translated">次のコードは、ユーザーのホームディレクトリのファイルセレクタをポップアップ表示し、.jpg と .gif 画像のみを表示します。</target>
        </trans-unit>
        <trans-unit id="471278ae41758f2c54b16869909329024c1ee488" translate="yes" xml:space="preserve">
          <source>The following code prints a message every time an MBean is registered or unregistered in the MBean Server &lt;code&gt;mbeanServer&lt;/code&gt;:</source>
          <target state="translated">次のコードは、MBeanサーバー &lt;code&gt;mbeanServer&lt;/code&gt; でMBeanが登録または登録解除されるたびにメッセージを出力します。</target>
        </trans-unit>
        <trans-unit id="1a6a91a281ec6e889efce394abfb1affdb89dbd0" translate="yes" xml:space="preserve">
          <source>The following code produces a &lt;code&gt;Calendar&lt;/code&gt; with date 2012-12-31 (Gregorian) because Monday is the first day of a week with the &lt;a href=&quot;gregoriancalendar#iso8601_compatible_setting&quot;&gt; ISO 8601 compatible week parameters&lt;/a&gt;.</source>
          <target state="translated">次のコードは、日付が2012-12-31（グレゴリオ暦）の &lt;code&gt;Calendar&lt;/code&gt; を生成します。これは、月曜日が&lt;a href=&quot;gregoriancalendar#iso8601_compatible_setting&quot;&gt;ISO 8601互換の週パラメーター&lt;/a&gt;を持つ週の最初の日だからです。</target>
        </trans-unit>
        <trans-unit id="ab87950614c84f4772b1d7cc623a175f6ebb12a9" translate="yes" xml:space="preserve">
          <source>The following code produces a Japanese &lt;code&gt;Calendar&lt;/code&gt; with date 1989-01-08 (Gregorian), assuming that the default &lt;a href=&quot;calendar#ERA&quot;&gt;&lt;code&gt;ERA&lt;/code&gt;&lt;/a&gt; is &lt;em&gt;Heisei&lt;/em&gt; that started on that day.</source>
          <target state="translated">次のコードは、デフォルトの&lt;a href=&quot;calendar#ERA&quot;&gt; &lt;code&gt;ERA&lt;/code&gt; &lt;/a&gt;がその日に開始された&lt;em&gt;平成で&lt;/em&gt;あると仮定して、日付が1989-01-08（グレゴリオ暦）の日本語 &lt;code&gt;Calendar&lt;/code&gt; を生成します。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="1fcb95ad0021945bf1fe0b77677f62f2eddf938b" translate="yes" xml:space="preserve">
          <source>The following code sample demonstrates a typical use of the Java Print Service API: locating printers that can print five double-sided copies of a Postscript document on size A4 paper, creating a print job from one of the returned print services, and calling print.</source>
          <target state="translated">次のコード・サンプルは、Java Print Service API の典型的な使用法を示しています:A4 サイズの用紙に Postscript 文書の両面コピーを 5 枚印刷できるプリンタを探し、返された印刷サービスの 1 つから印刷ジョブを作成し、print を呼び出します。</target>
        </trans-unit>
        <trans-unit id="61a3e32e5712ad50c78bb9995574b8ec96afd4b2" translate="yes" xml:space="preserve">
          <source>The following code sample shows how &lt;code&gt;ReferralException&lt;/code&gt; can be used.</source>
          <target state="translated">次のコードサンプルは、 &lt;code&gt;ReferralException&lt;/code&gt; の使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="295dfd5f08ff24826ebdec76538be9d8a00cde7a" translate="yes" xml:space="preserve">
          <source>The following code sample shows how the class may be used:</source>
          <target state="translated">以下のコードサンプルでは、このクラスをどのように使用するかを示しています。</target>
        </trans-unit>
        <trans-unit id="3aafaec893d934c6419ff83a93f47322a1d7a950" translate="yes" xml:space="preserve">
          <source>The following code sets the location of a &lt;code&gt;Window&lt;/code&gt; at (10, 10) relative to the origin of the physical screen of the corresponding &lt;code&gt;GraphicsConfiguration&lt;/code&gt;. If the bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not taken into account, the &lt;code&gt;Window&lt;/code&gt; location would be set at (10, 10) relative to the virtual-coordinate system and would appear on the primary physical screen, which might be different from the physical screen of the specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.</source>
          <target state="translated">次のコードは、対応する &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の物理画面の原点を基準にして &lt;code&gt;Window&lt;/code&gt; の位置を（10、10）に設定します。 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の境界が考慮されていない場合、 &lt;code&gt;Window&lt;/code&gt; 場所は仮想座標系を基準にして（10、10）に設定され、プライマリ物理画面に表示されます。これは、の物理画面とは異なる場合があります。指定された &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67f6a1717d96bf1b300af99b3d22f11d89ab908e" translate="yes" xml:space="preserve">
          <source>The following code sets the location of the &lt;code&gt;Frame&lt;/code&gt; at (10, 10) relative to the origin of the physical screen of the corresponding &lt;code&gt;GraphicsConfiguration&lt;/code&gt;. If the bounds of the &lt;code&gt;GraphicsConfiguration&lt;/code&gt; is not taken into account, the &lt;code&gt;Frame&lt;/code&gt; location would be set at (10, 10) relative to the virtual-coordinate system and would appear on the primary physical screen, which might be different from the physical screen of the specified &lt;code&gt;GraphicsConfiguration&lt;/code&gt;.</source>
          <target state="translated">次のコードは、対応する &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の物理画面の原点を基準にして &lt;code&gt;Frame&lt;/code&gt; の位置を（10、10）に設定します。 &lt;code&gt;GraphicsConfiguration&lt;/code&gt; の境界が考慮されていない場合、 &lt;code&gt;Frame&lt;/code&gt; 場所は仮想座標系を基準にして（10、10）に設定され、プライマリ物理画面に表示されます。これは、の物理画面とは異なる場合があります。指定された &lt;code&gt;GraphicsConfiguration&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="471600d6625c941bb8af63162f7ac0aea7a33185" translate="yes" xml:space="preserve">
          <source>The following code shows how to configure a &lt;code&gt;JFormattedTextField&lt;/code&gt; with two &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt;s, one for display and one for editing.</source>
          <target state="translated">次のコードは、2つの &lt;code&gt;JFormattedTextField.AbstractFormatter&lt;/code&gt; を使用して &lt;code&gt;JFormattedTextField&lt;/code&gt; を構成する方法を示しています。1つは表示用、もう1つは編集用です。</target>
        </trans-unit>
        <trans-unit id="0d05af0e96fe721120fbd83211a0e8aa28f5fa0a" translate="yes" xml:space="preserve">
          <source>The following code snippet demonstrates how to access and customize the system tray:</source>
          <target state="translated">次のコードスニペットは、システムトレイにアクセスしてカスタマイズする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c2684c37b3b077871a2d4e193478dca11f29cf45" translate="yes" xml:space="preserve">
          <source>The following code would then create a thread and start it running:</source>
          <target state="translated">次のコードは、スレッドを作成して実行を開始します。</target>
        </trans-unit>
        <trans-unit id="946ced931944ab0fcf761b372c7c62806047c2f5" translate="yes" xml:space="preserve">
          <source>The following conditions must be met for these fields:</source>
          <target state="translated">これらのフィールドには、以下の条件を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="133aba4f59186bfc1d62f5dbf7c33022c51da793" translate="yes" xml:space="preserve">
          <source>The following conditions must be met in order to set the opacity value less than &lt;code&gt;1.0f&lt;/code&gt;:</source>
          <target state="translated">不透明度の値を &lt;code&gt;1.0f&lt;/code&gt; 未満に設定するには、次の条件を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="cefd2e7b0b62523071be05b86d1d0c18a2b02c1b" translate="yes" xml:space="preserve">
          <source>The following conditions must be met to set a non-null shape:</source>
          <target state="translated">非ヌル形状を設定するには、以下の条件を満たす必要があります。</target>
        </trans-unit>
        <trans-unit id="f38ba93abbce590c90018a23bf3e81cef79cf784" translate="yes" xml:space="preserve">
          <source>The following conversion characters are used for formatting common date/time compositions.</source>
          <target state="translated">一般的な日時構成のフォーマットには、以下の変換文字が使用されます。</target>
        </trans-unit>
        <trans-unit id="d5c66b6555275a8ae7b8cd84818ca1b598e5538c" translate="yes" xml:space="preserve">
          <source>The following conversion characters are used for formatting dates:</source>
          <target state="translated">日付の書式設定には、以下の変換文字を使用します。</target>
        </trans-unit>
        <trans-unit id="d8bd8675f37c0b0472b0f1f740378fad3a66a09e" translate="yes" xml:space="preserve">
          <source>The following conversion characters are used for formatting times:</source>
          <target state="translated">フォーマット時間には、以下の変換文字を使用します。</target>
        </trans-unit>
        <trans-unit id="31da467b8ae22861cce42f28720a8a402495a4aa" translate="yes" xml:space="preserve">
          <source>The following conversions may be applied &lt;a href=&quot;../math/bigdecimal&quot;&gt;&lt;code&gt;BigDecimal&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の変換が&lt;a href=&quot;../math/bigdecimal&quot;&gt; &lt;code&gt;BigDecimal&lt;/code&gt; &lt;/a&gt;に適用されます。</target>
        </trans-unit>
        <trans-unit id="106372fe58a46e0b53a99e94653db8a635804bea" translate="yes" xml:space="preserve">
          <source>The following conversions may be applied to &lt;a href=&quot;../math/biginteger&quot;&gt;&lt;code&gt;BigInteger&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の変換が&lt;a href=&quot;../math/biginteger&quot;&gt; &lt;code&gt;BigInteger&lt;/code&gt; &lt;/a&gt;に適用される場合があります。</target>
        </trans-unit>
        <trans-unit id="425f9f130ceaded63e8cd23ffbe952eb42b803cd" translate="yes" xml:space="preserve">
          <source>The following conversions may be applied to &lt;code&gt;byte&lt;/code&gt;, &lt;a href=&quot;../lang/byte&quot;&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;short&lt;/code&gt;, &lt;a href=&quot;../lang/short&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;a href=&quot;../lang/integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;long&lt;/code&gt;, and &lt;a href=&quot;../lang/long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の変換は、 &lt;code&gt;byte&lt;/code&gt; 、&lt;a href=&quot;../lang/byte&quot;&gt; &lt;code&gt;Byte&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;short&lt;/code&gt; 、&lt;a href=&quot;../lang/short&quot;&gt; &lt;code&gt;Short&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;int&lt;/code&gt; および&lt;a href=&quot;../lang/integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;long&lt;/code&gt; 、&lt;a href=&quot;../lang/long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; に適用でき&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="628b61b529939ce21c13396cc22e331c7a3b9d5c" translate="yes" xml:space="preserve">
          <source>The following conversions may be applied to &lt;code&gt;float&lt;/code&gt;, &lt;a href=&quot;../lang/float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;double&lt;/code&gt; and &lt;a href=&quot;../lang/double&quot;&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の変換は、 &lt;code&gt;float&lt;/code&gt; 、&lt;a href=&quot;../lang/float&quot;&gt; &lt;code&gt;Float&lt;/code&gt; &lt;/a&gt;、 &lt;code&gt;double&lt;/code&gt; および&lt;a href=&quot;../lang/double&quot;&gt; &lt;code&gt;Double&lt;/code&gt; に&lt;/a&gt;適用できます。</target>
        </trans-unit>
        <trans-unit id="bdf545ba7fe2ae6fd85883f41cc47873b6d1c669" translate="yes" xml:space="preserve">
          <source>The following date and time conversion character suffixes are defined for the &lt;code&gt;'t'&lt;/code&gt; and &lt;code&gt;'T'&lt;/code&gt; conversions. The types are similar to but not completely identical to those defined by GNU &lt;code&gt;date&lt;/code&gt; and POSIX &lt;code&gt;strftime(3c)&lt;/code&gt;. Additional conversion types are provided to access Java-specific functionality (e.g. &lt;code&gt;'L'&lt;/code&gt; for milliseconds within the second).</source>
          <target state="translated">以下の日時変換文字のサフィックスは、 &lt;code&gt;'t'&lt;/code&gt; および &lt;code&gt;'T'&lt;/code&gt; 変換用に定義されています。タイプは、GNU &lt;code&gt;date&lt;/code&gt; およびPOSIX &lt;code&gt;strftime(3c)&lt;/code&gt; で定義されているタイプと似ていますが、完全に同一ではありません。 Java固有の機能にアクセスするために、追加の変換タイプが提供されます（たとえば、1秒以内のミリ秒を表す &lt;code&gt;'L'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cc0bdf19d79e85fd3faa8257d73b9cf092721d6e" translate="yes" xml:space="preserve">
          <source>The following date and time conversion suffix characters are defined for the &lt;code&gt;'t'&lt;/code&gt; and &lt;code&gt;'T'&lt;/code&gt; conversions. The types are similar to but not completely identical to those defined by GNU &lt;code&gt;date&lt;/code&gt; and POSIX &lt;code&gt;strftime(3c)&lt;/code&gt;. Additional conversion types are provided to access Java-specific functionality (e.g. &lt;code&gt;'L'&lt;/code&gt; for milliseconds within the second).</source>
          <target state="translated">次の日時変換サフィックス文字は、 &lt;code&gt;'t'&lt;/code&gt; および &lt;code&gt;'T'&lt;/code&gt; 変換用に定義されています。タイプは、GNU &lt;code&gt;date&lt;/code&gt; およびPOSIX &lt;code&gt;strftime(3c)&lt;/code&gt; で定義されているタイプと似ていますが、完全に同一ではありません。Java固有の機能にアクセスするために、追加の変換タイプが提供されます（たとえば、1秒以内のミリ秒を表す &lt;code&gt;'L'&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ddfdaa63d1eff39c00a8f64d80b4ee6217147ac0" translate="yes" xml:space="preserve">
          <source>The following definitions of general legacy methods perform identically to previously specified behavior under default attribute settings:</source>
          <target state="translated">一般的なレガシー・メソッドの以下の定義は、既定の属性設定の下で、以前に指定された動作と同じように動作します。</target>
        </trans-unit>
        <trans-unit id="753e4d88ac6c063d466dfdedc7d9b3c76f212b07" translate="yes" xml:space="preserve">
          <source>The following describes the CSS properties that are supported by the rendering engine:</source>
          <target state="translated">レンダリングエンジンがサポートしているCSSプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="e348781b0edec6d7cb8acbbd00233fee763ecae7" translate="yes" xml:space="preserve">
          <source>The following diagram shows a sequential group along both the horizontal and vertical axis.</source>
          <target state="translated">次の図は、横軸と縦軸の両方に沿って連続したグループを示しています。</target>
        </trans-unit>
        <trans-unit id="016bbd37d2f2317d0f1f262f34705a0fa46f084d" translate="yes" xml:space="preserve">
          <source>The following diagram shows a sequential group along the horizontal axis. The sequential group contains three components. A parallel group was used along the vertical axis.</source>
          <target state="translated">次の図は、横軸に沿ったシーケンシャルグループを示しています。シーケンシャルグループは、3つの構成要素を含む。縦軸に沿って平行グループを使用した。</target>
        </trans-unit>
        <trans-unit id="facdf31fd77524b6999c2bc143d39ffa10155252" translate="yes" xml:space="preserve">
          <source>The following diagram shows the same three components, but with the parallel group along the horizontal axis and the sequential group along the vertical axis.</source>
          <target state="translated">以下の図は、同じ3つの構成要素を示しているが、横軸に沿った平行群と縦軸に沿った順次群を示している。</target>
        </trans-unit>
        <trans-unit id="33dd939ab9a8811a3f514f61fa7645ae76748a7a" translate="yes" xml:space="preserve">
          <source>The following documentation applies to all LoginContext constructors:</source>
          <target state="translated">以下のドキュメントは、すべての LoginContext コンストラクタに適用されます。</target>
        </trans-unit>
        <trans-unit id="320a95b6b1eff732752676660004dbf33979b776" translate="yes" xml:space="preserve">
          <source>The following effects are apparent, for each individual call site &lt;code&gt;S&lt;/code&gt;:</source>
          <target state="translated">個々の呼び出しサイト &lt;code&gt;S&lt;/code&gt; について、次の影響が明らかです。</target>
        </trans-unit>
        <trans-unit id="4097483bbe9bfaaaab44e7f0041fc1d669d2113b" translate="yes" xml:space="preserve">
          <source>The following element or null if &lt;code&gt;value&lt;/code&gt; is the last element of the sequence.</source>
          <target state="translated">次の要素。 &lt;code&gt;value&lt;/code&gt; がシーケンスの最後の要素の場合はnull 。</target>
        </trans-unit>
        <trans-unit id="ab040e8d0f9661f3d2c2a54f122890a1dd93d9a4" translate="yes" xml:space="preserve">
          <source>The following example adds &lt;code&gt;myComponent&lt;/code&gt; to &lt;code&gt;group&lt;/code&gt; using a combination of the forms. The minimum size is forced to be the same as the preferred size, the preferred size is determined by using &lt;code&gt;myComponent.getPreferredSize&lt;/code&gt; and the maximum is determined by invoking &lt;code&gt;getMaximumSize&lt;/code&gt; on the component.</source>
          <target state="translated">次の例では、フォームの組み合わせを使用して &lt;code&gt;myComponent&lt;/code&gt; を &lt;code&gt;group&lt;/code&gt; 追加します。最小サイズは強制的に優先サイズと同じになり、優先サイズは &lt;code&gt;myComponent.getPreferredSize&lt;/code&gt; を使用して決定され、最大サイズはコンポーネントで &lt;code&gt;getMaximumSize&lt;/code&gt; を呼び出すことによって決定されます。</target>
        </trans-unit>
        <trans-unit id="8ee75bf951bc5e2f6330df56847c305f0c40eea8" translate="yes" xml:space="preserve">
          <source>The following example code demonstrates how this method might be used:</source>
          <target state="translated">以下のコード例は、このメソッドの使用方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3776e6ebce8a39acc2fb88b527e6d72ee54876b6" translate="yes" xml:space="preserve">
          <source>The following example creates a &lt;code&gt;FileNameExtensionFilter&lt;/code&gt; that will show &lt;code&gt;jpg&lt;/code&gt; files:</source>
          <target state="translated">次の例では、 &lt;code&gt;jpg&lt;/code&gt; ファイルを表示する &lt;code&gt;FileNameExtensionFilter&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="463ef87e1f64592c662b8763e7359844386e8e8c" translate="yes" xml:space="preserve">
          <source>The following example creates a &lt;code&gt;MessageFormat&lt;/code&gt; instance that can be used repeatedly:</source>
          <target state="translated">次の例では、繰り返し使用できる &lt;code&gt;MessageFormat&lt;/code&gt; インスタンスを作成します。</target>
        </trans-unit>
        <trans-unit id="b0c695c3a8bf8d2d01fc9c9a9685aa97f739854c" translate="yes" xml:space="preserve">
          <source>The following example creates a &lt;code&gt;RowFilter&lt;/code&gt; that will include any entries containing the string &quot;foo&quot; and the string &quot;bar&quot;:</source>
          <target state="translated">次の例では、文字列「foo」と文字列「bar」を含むすべてのエントリを含む &lt;code&gt;RowFilter&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="83848b052ff0bafddbb96e14d34dc616809817a6" translate="yes" xml:space="preserve">
          <source>The following example creates a &lt;code&gt;RowFilter&lt;/code&gt; that will include any entries containing the string &quot;foo&quot; or the string &quot;bar&quot;:</source>
          <target state="translated">次の例では、文字列「foo」または文字列「bar」を含むすべてのエントリを含む &lt;code&gt;RowFilter&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="f7f34f67da205eb9845401b2a8218e982d5ab668" translate="yes" xml:space="preserve">
          <source>The following example creates a custom &lt;code&gt;SynthStyleFactory&lt;/code&gt; that returns a different style based on the &lt;code&gt;Region&lt;/code&gt;:</source>
          <target state="translated">次の例では、 &lt;code&gt;Region&lt;/code&gt; 基づいて異なるスタイルを返すカスタム &lt;code&gt;SynthStyleFactory&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="4c0362218022022478f648938bce1a3580a3ed64" translate="yes" xml:space="preserve">
          <source>The following example demonstrates how to change the order of non-spacing accents,</source>
          <target state="translated">以下の例では、間隔をあけないアクセントの順序を変更する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0d866bed2269ab73118465effd5d20d22d3435e0" translate="yes" xml:space="preserve">
          <source>The following example has two text fields, with the first one expecting the string &quot;pass&quot; to be entered by the user. If either that string is entered in the first text field or the second text field contains &quot;accept&quot; string, then the user can advance focus to the second text field by clicking in it or by pressing TAB. However, if another string is entered in the first text field and the second text field does not contain &quot;accept&quot;, then the user will be unable to transfer focus to the second text field.</source>
          <target state="translated">次の例では、2つのテキストフィールドがあり、最初のテキストフィールドには「pass」という文字列がユーザーによって入力されることを想定しています。その文字列が最初のテキストフィールドに入力されるか、または2番目のテキストフィールドに &quot;accept &quot;文字列が含まれている場合、ユーザは2番目のテキストフィールドをクリックするか、TABキーを押すことで、フォーカスを2番目のテキストフィールドに移動することができます。しかし、第1のテキストフィールドに別の文字列が入力され、第2のテキストフィールドに &quot;accept &quot;が含まれていない場合、ユーザは第2のテキストフィールドにフォーカスを移すことができない。</target>
        </trans-unit>
        <trans-unit id="9bd423eb5b23c81d6945b1de137e1611d9efebc4" translate="yes" xml:space="preserve">
          <source>The following example illustrates a simple use case of secondary loops:</source>
          <target state="translated">次の例は、二次ループの簡単な使用例を示しています。</target>
        </trans-unit>
        <trans-unit id="9544db90443cafd3f6fc0065fcfeac4c28840a8a" translate="yes" xml:space="preserve">
          <source>The following example illustrates an aggregate operation using &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;doublestream&quot;&gt;&lt;code&gt;DoubleStream&lt;/code&gt;&lt;/a&gt;, computing the sum of the weights of the red widgets:</source>
          <target state="translated">次の例は、&lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;doublestream&quot;&gt; &lt;code&gt;DoubleStream&lt;/code&gt; &lt;/a&gt;を使用して、赤いウィジェットの重みの合計を計算する集約演算を示しています。</target>
        </trans-unit>
        <trans-unit id="fb0fc38b0edfba8464de0f6ce5acb42f0c3826b7" translate="yes" xml:space="preserve">
          <source>The following example illustrates an aggregate operation using &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;intstream&quot;&gt;&lt;code&gt;IntStream&lt;/code&gt;&lt;/a&gt;, computing the sum of the weights of the red widgets:</source>
          <target state="translated">次の例は、&lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;intstream&quot;&gt; &lt;code&gt;IntStream&lt;/code&gt; &lt;/a&gt;を使用して、赤いウィジェットの重みの合計を計算する集約演算を示しています。</target>
        </trans-unit>
        <trans-unit id="56de90bb181885f2389c4de7a52719567afaa7dc" translate="yes" xml:space="preserve">
          <source>The following example illustrates an aggregate operation using &lt;a href=&quot;stream&quot;&gt;&lt;code&gt;Stream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;longstream&quot;&gt;&lt;code&gt;LongStream&lt;/code&gt;&lt;/a&gt;, computing the sum of the weights of the red widgets:</source>
          <target state="translated">次の例は、&lt;a href=&quot;stream&quot;&gt; &lt;code&gt;Stream&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;longstream&quot;&gt; &lt;code&gt;LongStream&lt;/code&gt; &lt;/a&gt;を使用して、赤いウィジェットの重みの合計を計算する集約演算を示しています。</target>
        </trans-unit>
        <trans-unit id="d307e70e669cb72cdcb168be4cbe00d64608c629" translate="yes" xml:space="preserve">
          <source>The following example illustrates creating a &lt;code&gt;KeyBinding&lt;/code&gt; array from six alternating &lt;code&gt;key-action&lt;/code&gt; pairs:</source>
          <target state="translated">次の例は、6つの交互の &lt;code&gt;key-action&lt;/code&gt; ペアから &lt;code&gt;KeyBinding&lt;/code&gt; 配列を作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8ddec311e730687f1c9ec6444d2caa4fa990646a" translate="yes" xml:space="preserve">
          <source>The following example illustrates how the &lt;code&gt;String.split&lt;/code&gt; method can be used to break up a string into its basic tokens:</source>
          <target state="translated">次の例は、 &lt;code&gt;String.split&lt;/code&gt; メソッドを使用して文字列を基本的なトークンに分割する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="8d50265afb04b1a4dc77b0bf535a5a8d4b1cadb8" translate="yes" xml:space="preserve">
          <source>The following example illustrates how to use this class:</source>
          <target state="translated">次の例では、このクラスの使用方法を説明します。</target>
        </trans-unit>
        <trans-unit id="d35723ba3d5e3e8c3a356af7783b1f3266635763" translate="yes" xml:space="preserve">
          <source>The following example illustrates setting the current look and feel from an instance of &lt;code&gt;LookAndFeelInfo&lt;/code&gt;:</source>
          <target state="translated">次の例は、 &lt;code&gt;LookAndFeelInfo&lt;/code&gt; のインスタンスから現在のルックアンドフィールを設定する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="f9da5969c1496c88c7306406befa7c66be969059" translate="yes" xml:space="preserve">
          <source>The following example illustrates setting the look and feel based on class name:</source>
          <target state="translated">以下の例では、クラス名に基づいて見た目を設定しています。</target>
        </trans-unit>
        <trans-unit id="3748733e6de1f4871baf1bb05d5ddce1922aa9c4" translate="yes" xml:space="preserve">
          <source>The following example illustrates some refinements and idioms that may lead to better performance: RecursiveActions need not be fully recursive, so long as they maintain the basic divide-and-conquer approach. Here is a class that sums the squares of each element of a double array, by subdividing out only the right-hand-sides of repeated divisions by two, and keeping track of them with a chain of &lt;code&gt;next&lt;/code&gt; references. It uses a dynamic threshold based on method &lt;code&gt;getSurplusQueuedTaskCount&lt;/code&gt;, but counterbalances potential excess partitioning by directly performing leaf actions on unstolen tasks rather than further subdividing.</source>
          <target state="translated">次の例は、パフォーマンスの向上につながる可能性のあるいくつかの改良とイディオムを示しています。RecursiveActionsは、基本的な分割統治アプローチを維持している限り、完全に再帰的である必要はありません。これは、繰り返される除算の右側のみを2で分割し、 &lt;code&gt;next&lt;/code&gt; 参照のチェーンでそれらを追跡することにより、double配列の各要素の平方を合計するクラスです。 &lt;code&gt;getSurplusQueuedTaskCount&lt;/code&gt; メソッドに基づく動的しきい値を使用しますが、さらに細分するのではなく、盗まれたタスクに対して直接リーフアクションを実行することにより、潜在的な過剰なパーティション分割を相殺します。</target>
        </trans-unit>
        <trans-unit id="d87d1db380d07faa1d30e5a04bd96b4b3ae7dc5a" translate="yes" xml:space="preserve">
          <source>The following example illustrates the simplest use case. Some processing is done in the background and when done you update a Swing component.</source>
          <target state="translated">次の例は、最もシンプルなユースケースを示しています。バックグラウンドでいくつかの処理が行われ、処理が終わったらSwingコンポーネントを更新します。</target>
        </trans-unit>
        <trans-unit id="68ddb2ddfcdc8913f37db43e57241769ef4e65d9" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;a href=&quot;shardingkeybuilder&quot;&gt;&lt;code&gt;ShardingKeyBuilder&lt;/code&gt;&lt;/a&gt; to create a &lt;code&gt;ShardingKey&lt;/code&gt;:</source>
          <target state="translated">次の例では、使用説明&lt;a href=&quot;shardingkeybuilder&quot;&gt; &lt;code&gt;ShardingKeyBuilder&lt;/code&gt; を&lt;/a&gt;作成する &lt;code&gt;ShardingKey&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="b8b348252a81c67a1d2fe27f014aadc97dbcc209" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;a href=&quot;shardingkeybuilder&quot;&gt;&lt;code&gt;ShardingKeyBuilder&lt;/code&gt;&lt;/a&gt; to create a &lt;code&gt;superShardingKey&lt;/code&gt; for an eastern region with a &lt;code&gt;ShardingKey&lt;/code&gt; specified for the Pittsburgh branch office:</source>
          <target state="translated">次の例では、使用説明&lt;a href=&quot;shardingkeybuilder&quot;&gt; &lt;code&gt;ShardingKeyBuilder&lt;/code&gt; を&lt;/a&gt;作成するために &lt;code&gt;superShardingKey&lt;/code&gt; を持つ東部地域のために &lt;code&gt;ShardingKey&lt;/code&gt; ピッツバーグ支店に対して指定します：</target>
        </trans-unit>
        <trans-unit id="3e101469e89fbdd4347ecf7874ab5d383fecef17" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;ConnectionBuilder&lt;/code&gt; to create a &lt;a href=&quot;connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の例では、使用説明 &lt;code&gt;ConnectionBuilder&lt;/code&gt; を作成するために、&lt;a href=&quot;connection&quot;&gt; &lt;code&gt;Connection&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="d8e4b5070895b163f1a284ef67fa6006475d5ada" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;PooledConnectionBuilder&lt;/code&gt; to create a &lt;a href=&quot;xaconnection&quot;&gt;&lt;code&gt;XAConnection&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の例では、使用説明 &lt;code&gt;PooledConnectionBuilder&lt;/code&gt; を作成するために&lt;a href=&quot;xaconnection&quot;&gt; &lt;code&gt;XAConnection&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="fa993e0cdf5cf1219a364219e068fb941b4bbae6" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;ShardingKeyBuilder&lt;/code&gt; to create a &lt;a href=&quot;shardingkey&quot;&gt;&lt;code&gt;ShardingKey&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の例では、使用説明 &lt;code&gt;ShardingKeyBuilder&lt;/code&gt; を作成する&lt;a href=&quot;shardingkey&quot;&gt; &lt;code&gt;ShardingKey&lt;/code&gt; を&lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="c6b5aab123e96ace2d06a9a85c7ff2192ebd6c23" translate="yes" xml:space="preserve">
          <source>The following example illustrates the use of &lt;code&gt;XAConnectionBuilder&lt;/code&gt; to create a &lt;a href=&quot;xaconnection&quot;&gt;&lt;code&gt;XAConnection&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">次の例では、使用説明 &lt;code&gt;XAConnectionBuilder&lt;/code&gt; を作成するために&lt;a href=&quot;xaconnection&quot;&gt; &lt;code&gt;XAConnection&lt;/code&gt; &lt;/a&gt;：</target>
        </trans-unit>
        <trans-unit id="f8f82bf402adadf527ca538f2a684dbed664a6ab" translate="yes" xml:space="preserve">
          <source>The following example loads the first available service provider. If no service providers are located then it uses a default implementation.</source>
          <target state="translated">以下の例では、最初に利用可能なサービスプロバイダをロードします。サービスプロバイダが存在しない場合は、デフォルトの実装を使用します。</target>
        </trans-unit>
        <trans-unit id="a6e6290101eb5dc8885bc7d24ad7895acf725371" translate="yes" xml:space="preserve">
          <source>The following example parses a PKCS#7-formatted certificate reply stored in a file and extracts all the certificates from it:</source>
          <target state="translated">以下の例は、ファイルに格納された PKCS#7 形式の証明書応答を解析し、そこからすべての証明書を抽出します。</target>
        </trans-unit>
        <trans-unit id="b6581c0e64b1be525be912d116aeb461af451685" translate="yes" xml:space="preserve">
          <source>The following example reads a file with Base64 encoded certificates, which are each bounded at the beginning by -----BEGIN CERTIFICATE-----, and bounded at the end by -----END CERTIFICATE-----. We convert the &lt;code&gt;FileInputStream&lt;/code&gt; (which does not support &lt;code&gt;mark&lt;/code&gt; and &lt;code&gt;reset&lt;/code&gt;) to a &lt;code&gt;BufferedInputStream&lt;/code&gt; (which supports those methods), so that each call to &lt;code&gt;generateCertificate&lt;/code&gt; consumes only one certificate, and the read position of the input stream is positioned to the next certificate in the file:</source>
          <target state="translated">次の例では、Base64でエンコードされた証明書を含むファイルを読み取ります。これらの証明書はそれぞれ、最初に----- BEGIN CERTIFICATE -----で区切られ、最後に----- END CERTIFICATE -----で区切られています。 。 &lt;code&gt;FileInputStream&lt;/code&gt; （これは &lt;code&gt;mark&lt;/code&gt; および &lt;code&gt;reset&lt;/code&gt; をサポートしていません）を &lt;code&gt;BufferedInputStream&lt;/code&gt; （これらのメソッドをサポートします）に変換します。これにより、 &lt;code&gt;generateCertificate&lt;/code&gt; の呼び出しごとに1つの証明書のみが消費され、入力ストリームの読み取り位置が次の証明書に配置されます。ファイル：</target>
        </trans-unit>
        <trans-unit id="f4c63e2e5d2c5bad8b48d446236f32973f675b19" translate="yes" xml:space="preserve">
          <source>The following example shows a Model MBean being used to make the &lt;code&gt;get&lt;/code&gt; method of a &lt;code&gt;HashMap&lt;/code&gt; available for management through an MBean server. No other methods are available through the MBean server. There is nothing special about &lt;code&gt;HashMap&lt;/code&gt; here. Public methods from any public class can be exposed for management in the same way.</source>
          <target state="translated">次の例は、 &lt;code&gt;HashMap&lt;/code&gt; の &lt;code&gt;get&lt;/code&gt; メソッドをMBeanサーバーを介して管理できるようにするために使用されているモデルMBeanを示しています。MBeanサーバーを介して使用できる他のメソッドはありません。ここで &lt;code&gt;HashMap&lt;/code&gt; について特別なことは何もありません。パブリッククラスのパブリックメソッドは、同じ方法で管理のために公開できます。</target>
        </trans-unit>
        <trans-unit id="bc0415620b4f09b1c46986757c91750d257417fa" translate="yes" xml:space="preserve">
          <source>The following example shows a custom &lt;code&gt;SynthStyle&lt;/code&gt; that returns a red Color for the &lt;code&gt;DISABLED&lt;/code&gt; state, otherwise a black color.</source>
          <target state="translated">次の例は、 &lt;code&gt;DISABLED&lt;/code&gt; 状態に対して赤色を返すカスタム &lt;code&gt;SynthStyle&lt;/code&gt; を示しています。それ以外の場合は、黒色を返します。</target>
        </trans-unit>
        <trans-unit id="fea50f0b6178150f168fc19ed1cb369f75bd8701" translate="yes" xml:space="preserve">
          <source>The following example shows how &lt;code&gt;CollationKey&lt;/code&gt;s might be used to sort a list of &lt;code&gt;String&lt;/code&gt;s.</source>
          <target state="translated">次の例は、 &lt;code&gt;CollationKey&lt;/code&gt; 使用して &lt;code&gt;String&lt;/code&gt; のリストをソートする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="ce6e79fdf9431b4c01ca7a6d0321f3ae696e0bd6" translate="yes" xml:space="preserve">
          <source>The following example shows how to compare two strings using the &lt;code&gt;Collator&lt;/code&gt; for the default locale.</source>
          <target state="translated">次の例は、デフォルトロケールの &lt;code&gt;Collator&lt;/code&gt; を使用して2つの文字列を比較する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0cf0ae4f898e0fe5e7d002475f1e1d524ed4b2c7" translate="yes" xml:space="preserve">
          <source>The following example shows how to correctly use this method in the &lt;code&gt;LayerUI&lt;/code&gt; implementations:</source>
          <target state="translated">次の例は、 &lt;code&gt;LayerUI&lt;/code&gt; 実装でこのメソッドを正しく使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c187db380cfc2f123c5979ca0ebed27c25c70c1d" translate="yes" xml:space="preserve">
          <source>The following example shows how to create a &lt;code&gt;Locale&lt;/code&gt; object with the &lt;code&gt;Builder&lt;/code&gt;.</source>
          <target state="translated">次の例は、 &lt;code&gt;Builder&lt;/code&gt; &lt;code&gt;Locale&lt;/code&gt; オブジェクトを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="150e09ca9847d84414dbe1fa53852bf6280551da" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the public constructor &lt;a href=&quot;#%3Cinit%3E(T,java.lang.Class,javax.management.NotificationEmitter)&quot;&gt;&lt;code&gt;StandardEmitterMBean(implementation, mbeanInterface, emitter)&lt;/code&gt;&lt;/a&gt; to create an MBean emitting notifications with any implementation class name</source>
          <target state="translated">次の例は、パブリックコンストラクター&lt;a href=&quot;#%3Cinit%3E(T,java.lang.Class,javax.management.NotificationEmitter)&quot;&gt; &lt;code&gt;StandardEmitterMBean(implementation, mbeanInterface, emitter)&lt;/code&gt; &lt;/a&gt;を使用して、任意の実装クラス名で通知を発行するMBeanを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="34a66fd3c2e9d5a20b80170ff37d4fcae56dbf7b" translate="yes" xml:space="preserve">
          <source>The following example shows how to use the public constructor &lt;a href=&quot;standardemittermbean#StandardEmitterMBean-T-java.lang.Class-javax.management.NotificationEmitter-&quot;&gt;&lt;code&gt;StandardEmitterMBean(implementation, mbeanInterface, emitter)&lt;/code&gt;&lt;/a&gt; to create an MBean emitting notifications with any implementation class name</source>
          <target state="translated">次の例は、パブリックコンストラクター&lt;a href=&quot;standardemittermbean#StandardEmitterMBean-T-java.lang.Class-javax.management.NotificationEmitter-&quot;&gt; &lt;code&gt;StandardEmitterMBean(implementation, mbeanInterface, emitter)&lt;/code&gt; &lt;/a&gt;を使用して、実装クラス名で通知を送信するMBeanを作成する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="0332a21704227b2fe01c6ea2919706eb14858df4" translate="yes" xml:space="preserve">
          <source>The following example uses a &lt;code&gt;Class&lt;/code&gt; object to print the class name of an object:</source>
          <target state="translated">次の例では、 &lt;code&gt;Class&lt;/code&gt; オブジェクトを使用して、オブジェクトのクラス名を出力します。</target>
        </trans-unit>
        <trans-unit id="105fab9a92f7744114e1e113e7a7e36eff93a442" translate="yes" xml:space="preserve">
          <source>The following example uses one of the &lt;a href=&quot;httpresponse.bodyhandlers&quot;&gt;predefined body handlers&lt;/a&gt; that always process the response body in the same way ( streams the response body to a file ).</source>
          <target state="translated">次の例では、常に同じ方法で応答本文を処理する（応答本文をファイルにストリーミングする）&lt;a href=&quot;httpresponse.bodyhandlers&quot;&gt;事前定義された本文ハンドラーの&lt;/a&gt;1つを使用します。</target>
        </trans-unit>
        <trans-unit id="74feb2533320ada267d3e34c037f75c2166c6bfc" translate="yes" xml:space="preserve">
          <source>The following example uses the &lt;a href=&quot;#resolve(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)&quot;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; method to resolve a module named &lt;em&gt;myapp&lt;/em&gt; with the configuration for the boot layer as the parent configuration. It prints the name of each resolved module and the names of the modules that each module reads.</source>
          <target state="translated">次の例では、&lt;a href=&quot;#resolve(java.lang.module.ModuleFinder,java.lang.module.ModuleFinder,java.util.Collection)&quot;&gt; &lt;code&gt;resolve&lt;/code&gt; &lt;/a&gt;メソッドを使用して、ブートレイヤーの構成を親構成として&lt;em&gt;myapp&lt;/em&gt;という名前のモジュールを解決します。解決された各モジュールの名前と、各モジュールが読み取るモジュールの名前を出力します。</target>
        </trans-unit>
        <trans-unit id="13094b1afd628aca804009d6503e45d3606912cb" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate possible values for the &lt;code&gt;
 attributes&lt;/code&gt; parameter:</source>
          <target state="translated">次の例は、 &lt;code&gt; attributes&lt;/code&gt; パラメーターの可能な値を示しています。</target>
        </trans-unit>
        <trans-unit id="70e1b9830a3df588a8b8a729994679251f34346f" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate possible values for the &lt;code&gt;attributes&lt;/code&gt; parameter:</source>
          <target state="translated">次の例は、 &lt;code&gt;attributes&lt;/code&gt; パラメーターの可能な値を示しています。</target>
        </trans-unit>
        <trans-unit id="9288a923ae0848eff92cd52b3c4755b3510286a3" translate="yes" xml:space="preserve">
          <source>The following examples demonstrate usage. The first example creates a stream of &lt;code&gt;CodecFactory&lt;/code&gt; objects, the second example is the same except that it sorts the providers by provider class name (and so locate all providers).</source>
          <target state="translated">次の例は、使用法を示しています。最初の例は &lt;code&gt;CodecFactory&lt;/code&gt; オブジェクトのストリームを作成し、2番目の例はプロバイダーをプロバイダークラス名でソートする（したがってすべてのプロバイダーを見つける）ことを除いて同じです。</target>
        </trans-unit>
        <trans-unit id="97ea0c19b95e394c32268e376ed83f7f985b11a8" translate="yes" xml:space="preserve">
          <source>The following examples illustrate using these methods. Each example assumes the HTML document is initialized in the following way:</source>
          <target state="translated">以下の例では、これらのメソッドの使用方法を説明します。各例では、HTML ドキュメントが以下の方法で初期化されていると仮定しています。</target>
        </trans-unit>
        <trans-unit id="6cf471a50873b59781f1a5d22c6455b5de64fb64" translate="yes" xml:space="preserve">
          <source>The following examples show how date and time patterns are interpreted in the U.S. locale. The given date and time are 2001-07-04 12:08:56 local time in the U.S. Pacific Time time zone.</source>
          <target state="translated">以下の例は、米国ロケールでの日付と時刻のパターンの解釈を示しています。指定された日付と時刻は、米国太平洋時間帯の現地時間 2001-07-04 12:08:56 です。</target>
        </trans-unit>
        <trans-unit id="b0632e6225effa0dd63e846e4520249121991123" translate="yes" xml:space="preserve">
          <source>The following factors are used in the description of the blending equation in the Porter and Duff paper:</source>
          <target state="translated">ポーター紙とダフ紙の混合方程式の記述には、以下のような要素が用いられている。</target>
        </trans-unit>
        <trans-unit id="b060c7c49d5c47fafe67983831ac5a2196238ddc" translate="yes" xml:space="preserve">
          <source>The following factors will be used to discuss our extensions to the blending equation in the Porter and Duff paper:</source>
          <target state="translated">ポーターとダフの論文における混合方程式への拡張については、以下の要因を用いて議論する。</target>
        </trans-unit>
        <trans-unit id="3e4ce72fcea17db538dc08375b9af49bdf3a0d34" translate="yes" xml:space="preserve">
          <source>The following figure shows a baseline layout and includes a component that spans rows:</source>
          <target state="translated">次の図は、ベースラインのレイアウトを示しており、行にまたがるコンポーネントを含んでいます。</target>
        </trans-unit>
        <trans-unit id="c9b480102aa80b7116ba081776d8fc9c47c998d2" translate="yes" xml:space="preserve">
          <source>The following figure shows the relationship between size and position data for a multi-column component.</source>
          <target state="translated">次の図は、複数列コンポーネントのサイズと位置データの関係を示しています。</target>
        </trans-unit>
        <trans-unit id="906ef8373352bf4e852cc52a802ab4cdf9b65eb5" translate="yes" xml:space="preserve">
          <source>The following figures show ten components (all buttons) managed by a grid bag layout. Figure 2 shows the layout for a horizontal, left-to-right container and Figure 3 shows the layout for a horizontal, right-to-left container.</source>
          <target state="translated">以下の図は、グリッドバッグのレイアウトで管理されている10個のコンポーネント(すべてのボタン)を示しています。図2は左から右への横長のコンテナのレイアウト、図3は右から左への横長のコンテナのレイアウトを示しています。</target>
        </trans-unit>
        <trans-unit id="d27a5fac9684ab445570c45c6aa8783eca1e2a54" translate="yes" xml:space="preserve">
          <source>The following form:</source>
          <target state="translated">次のような形です。</target>
        </trans-unit>
        <trans-unit id="25a756a58cb2655e8ad539845d1c9b0926cdf9aa" translate="yes" xml:space="preserve">
          <source>The following formulas are always true for a &lt;code&gt;Constraints&lt;/code&gt; object (here WEST and &lt;code&gt;x&lt;/code&gt; are synonyms, as are and NORTH and &lt;code&gt;y&lt;/code&gt;):</source>
          <target state="translated">次の式は、 &lt;code&gt;Constraints&lt;/code&gt; オブジェクトに対して常に当てはまります（ここで、WESTと &lt;code&gt;x&lt;/code&gt; は同義語であり、NORTHと &lt;code&gt;y&lt;/code&gt; も同様です）。</target>
        </trans-unit>
        <trans-unit id="279fcc4d026d6759301de3593759ad5dea9bdb03" translate="yes" xml:space="preserve">
          <source>The following general conversions may be applied to any argument type:</source>
          <target state="translated">以下の一般的な変換は、任意の引数型に適用することができます。</target>
        </trans-unit>
        <trans-unit id="346aa8af59d095a0cf819e2a13e769a2c2aa85e6" translate="yes" xml:space="preserve">
          <source>The following illustrates loading an &lt;code&gt;InputMap&lt;/code&gt; with two &lt;code&gt;key-action&lt;/code&gt; pairs:</source>
          <target state="translated">以下は、2つの &lt;code&gt;key-action&lt;/code&gt; ペアを使用して &lt;code&gt;InputMap&lt;/code&gt; をロードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="174393cc0bd44b845cea1cc9ee5a2f036c3003ea" translate="yes" xml:space="preserve">
          <source>The following image shows the appearance of a text area:</source>
          <target state="translated">下の画像は、テキストエリアの外観です。</target>
        </trans-unit>
        <trans-unit id="1dd40017212822f21694ba3d70bff633a44c4e65" translate="yes" xml:space="preserve">
          <source>The following image shows the relationships between the classes that use root panes.</source>
          <target state="translated">以下の画像は、ルートペインを使用するクラス間の関係を示しています。</target>
        </trans-unit>
        <trans-unit id="75a6aefb999d419cd1a82d97d1a727b01ec7b7ec" translate="yes" xml:space="preserve">
          <source>The following interfaces are not MXBean interfaces:</source>
          <target state="translated">以下のインタフェースはMXBeanインタフェースではありません。</target>
        </trans-unit>
        <trans-unit id="ed265a42fc53230e870ef0ae1b0b98d73373ccaa" translate="yes" xml:space="preserve">
          <source>The following interfaces, in the &lt;code&gt;javax.sql&lt;/code&gt; package, are also part of the SPI:</source>
          <target state="translated">&lt;code&gt;javax.sql&lt;/code&gt; パッケージの次のインターフェースもSPIの一部です。</target>
        </trans-unit>
        <trans-unit id="5b0b30e55e796a5ec6b2164196050ba8bf078c28" translate="yes" xml:space="preserve">
          <source>The following invariant holds for the mark, position, limit, and capacity values:</source>
          <target state="translated">マーク、位置、限界値、容量値については、以下の不変量を保持します。</target>
        </trans-unit>
        <trans-unit id="edfb837a44de40c003fa4a1712d49041093f4267" translate="yes" xml:space="preserve">
          <source>The following is a list of conditions under which this exception can be thrown:</source>
          <target state="translated">この例外が発生する条件を以下に示します。</target>
        </trans-unit>
        <trans-unit id="3c66588b87527f1a5baf11483bf18ea1e5e20a3b" translate="yes" xml:space="preserve">
          <source>The following is a very simple example of a &lt;code&gt;ResourceBundle&lt;/code&gt; subclass, &lt;code&gt;MyResources&lt;/code&gt;, that manages two resources (for a larger number of resources you would probably use a &lt;code&gt;Map&lt;/code&gt;). Notice that you don't need to supply a value if a &quot;parent-level&quot; &lt;code&gt;ResourceBundle&lt;/code&gt; handles the same key with the same value (as for the okKey below).</source>
          <target state="translated">以下は、2つのリソースを管理する &lt;code&gt;ResourceBundle&lt;/code&gt; サブクラス &lt;code&gt;MyResources&lt;/code&gt; の非常に単純な例です（多くのリソースでは、おそらく &lt;code&gt;Map&lt;/code&gt; を使用します）。「親レベル」の &lt;code&gt;ResourceBundle&lt;/code&gt; が同じ値の同じキーを処理する場合は、値を指定する必要がないことに注意してください（以下のokKeyの場合と同様）。</target>
        </trans-unit>
        <trans-unit id="22998b14b84e5464217ecc64a23f424a4e89dae6" translate="yes" xml:space="preserve">
          <source>The following is an example of a GET request that prints the response body as a String:</source>
          <target state="translated">以下は、レスポンスボディを文字列として出力するGETリクエストの例です。</target>
        </trans-unit>
        <trans-unit id="9853868399354f386c11be29586d4baa4163b9e2" translate="yes" xml:space="preserve">
          <source>The following is an example of a simple XPath expression:</source>
          <target state="translated">以下は、簡単なXPath式の例です。</target>
        </trans-unit>
        <trans-unit id="bdaadb43c4aeb6da55f35a1a37d30ab08c2123d1" translate="yes" xml:space="preserve">
          <source>The following is an example of how to use a key factory in order to instantiate a DSA public key from its encoding. Assume Alice has received a digital signature from Bob. Bob also sent her his public key (in encoded format) to verify his signature. Alice then performs the following actions:</source>
          <target state="translated">以下は、キーファクトリーを使用して、そのエンコーディングからDSA公開鍵をインスタンス化する方法の例です。アリスがボブからデジタル署名を受け取ったとします。また、Bobは署名を検証するために、彼の公開鍵を(エンコードされた形式で)彼女に送りました。その後、Aliceは以下のアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="948ce4f3bc2eb80eaf11902cafb5d347833f9db3" translate="yes" xml:space="preserve">
          <source>The following is an example of loading XML-based bundles using &lt;a href=&quot;properties#loadFromXML(java.io.InputStream)&quot;&gt;&lt;code&gt;Properties.loadFromXML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下は、&lt;a href=&quot;properties#loadFromXML(java.io.InputStream)&quot;&gt; &lt;code&gt;Properties.loadFromXML&lt;/code&gt; &lt;/a&gt;を使用してXMLベースのバンドルをロードする例です。</target>
        </trans-unit>
        <trans-unit id="804b14ddfbb725fdd0c6db2c193593fa8a180d72" translate="yes" xml:space="preserve">
          <source>The following is an example of loading XML-based bundles using &lt;a href=&quot;properties#loadFromXML-java.io.InputStream-&quot;&gt;&lt;code&gt;Properties.loadFromXML&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">以下は、&lt;a href=&quot;properties#loadFromXML-java.io.InputStream-&quot;&gt; &lt;code&gt;Properties.loadFromXML&lt;/code&gt; &lt;/a&gt;を使用してXMLベースのバンドルをロードする例です。</target>
        </trans-unit>
        <trans-unit id="67b3505277b8510442adfa39552de8621cf4bfdb" translate="yes" xml:space="preserve">
          <source>The following is an example of retrieving a response as a String:</source>
          <target state="translated">レスポンスを文字列として取得する例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="b19e1ceab964624bd7adda3910cb263b99752918" translate="yes" xml:space="preserve">
          <source>The following is an example of the bundle loading process with the default &lt;code&gt;ResourceBundle.Control&lt;/code&gt; implementation.</source>
          <target state="translated">以下は、デフォルトの &lt;code&gt;ResourceBundle.Control&lt;/code&gt; 実装を使用したバンドルのロードプロセスの例です。</target>
        </trans-unit>
        <trans-unit id="bea54c2ee0652c739fb146ce39cebf51995f73cb" translate="yes" xml:space="preserve">
          <source>The following is one example of the use of the tokenizer. The code:</source>
          <target state="translated">トークナイザーの使用例の一例を以下に示します。コードです。</target>
        </trans-unit>
        <trans-unit id="52b9ec700425589fbdc086ec3a939db1893539c5" translate="yes" xml:space="preserve">
          <source>The following kinds of information can be obtained from a &lt;code&gt;SyncResolver&lt;/code&gt; object:</source>
          <target state="translated">&lt;code&gt;SyncResolver&lt;/code&gt; オブジェクトから次の種類の情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="ea9d9bada0a8ef0aed953f6ecd23f2e2098da85d" translate="yes" xml:space="preserve">
          <source>The following line of code creates the &lt;code&gt;CachedRowSet&lt;/code&gt; object</source>
          <target state="translated">次のコード行は、 &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトを作成します</target>
        </trans-unit>
        <trans-unit id="f37574f5f93fb3008e9bc387bd52bb13322878b9" translate="yes" xml:space="preserve">
          <source>The following line of code resets the &lt;code&gt;SyncProvider&lt;/code&gt; object for</source>
          <target state="translated">次のコード行は、 &lt;code&gt;SyncProvider&lt;/code&gt; オブジェクトをリセットします。</target>
        </trans-unit>
        <trans-unit id="f79cfbf4566791f20e92a99e823ec9bfc7ed889e" translate="yes" xml:space="preserve">
          <source>The following line of code uses the default constructor for &lt;code&gt;CachedRowSet&lt;/code&gt; supplied in the reference implementation (RI) to create a default &lt;code&gt;CachedRowSet&lt;/code&gt; object.</source>
          <target state="translated">次のコード行は、リファレンス実装（RI）で提供される &lt;code&gt;CachedRowSet&lt;/code&gt; のデフォルトコンストラクターを使用して、デフォルトの &lt;code&gt;CachedRowSet&lt;/code&gt; オブジェクトを作成します。</target>
        </trans-unit>
        <trans-unit id="b0c56cda4a595a6aaa8230eda97af6594295a798" translate="yes" xml:space="preserve">
          <source>The following line of code uses the fully qualified name to register this implementation with the &lt;code&gt;SyncFactory&lt;/code&gt; static instance.</source>
          <target state="translated">次のコード行では、完全修飾名を使用して、この実装を &lt;code&gt;SyncFactory&lt;/code&gt; 静的インスタンスに登録しています。</target>
        </trans-unit>
        <trans-unit id="a8babc37cfd9a2c16e54d44c9b07cc4e8aec3a0d" translate="yes" xml:space="preserve">
          <source>The following list describes the accepted selection modes:</source>
          <target state="translated">以下のリストでは、受け入れ可能な選択モードを説明します。</target>
        </trans-unit>
        <trans-unit id="b7e3606d490054cb4d21babd105a9cf2ebf6b80f" translate="yes" xml:space="preserve">
          <source>The following list of parameters defined in the DOM:</source>
          <target state="translated">DOM で定義されているパラメータのリストを以下に示します。</target>
        </trans-unit>
        <trans-unit id="17ab3ffda462facda1394413471c75399824926c" translate="yes" xml:space="preserve">
          <source>The following low-level information summarizes relevant parts of the Java Virtual Machine specification. For full details, please see the current version of that specification.</source>
          <target state="translated">以下の低レベル情報は、Java仮想マシン仕様の関連部分を要約したものです。完全な詳細については、その仕様の最新バージョンを参照してください。</target>
        </trans-unit>
        <trans-unit id="c2c0d7dfb61bac087e83f84901457fcbf7f4359a" translate="yes" xml:space="preserve">
          <source>The following low-level information summarizes relevant parts of the Java Virtual Machine specification. For full details, please see the current version of that specification. Each occurrence of an &lt;code&gt;invokedynamic&lt;/code&gt; instruction is called a &lt;em&gt;dynamic call site&lt;/em&gt;.</source>
          <target state="translated">次の低レベルの情報は、Java仮想マシン仕様の関連部分を要約したものです。詳細については、その仕様の現在のバージョンを参照してください。 &lt;code&gt;invokedynamic&lt;/code&gt; 命令が発生するたびに、&lt;em&gt;動的呼び出しサイト&lt;/em&gt;と呼ばれ&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="bc850c367b3d55d030ac5fba689706da95bcf62c" translate="yes" xml:space="preserve">
          <source>The following manifest attributes are defined for an agent JAR file:</source>
          <target state="translated">以下のマニフェスト属性は、エージェント JAR ファイルに対して定義されています。</target>
        </trans-unit>
        <trans-unit id="b1a314b46d00422122cdcb27ebe2ea8043e6f6b1" translate="yes" xml:space="preserve">
          <source>The following method shuts down an &lt;code&gt;ExecutorService&lt;/code&gt; in two phases, first by calling &lt;code&gt;shutdown&lt;/code&gt; to reject incoming tasks, and then calling &lt;code&gt;shutdownNow&lt;/code&gt;, if necessary, to cancel any lingering tasks:</source>
          <target state="translated">次のメソッドは、2つのフェーズで &lt;code&gt;ExecutorService&lt;/code&gt; をシャットダウンします。最初に &lt;code&gt;shutdown&lt;/code&gt; を呼び出して着信タスクを拒否し、必要に応じて &lt;code&gt;shutdownNow&lt;/code&gt; を呼び出して残存タスクをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="a328e9adb76cbb68764d8f97da4a65fd0868eb7c" translate="yes" xml:space="preserve">
          <source>The following method types are handled as special cases:</source>
          <target state="translated">以下のメソッドタイプは特殊なケースとして扱われます。</target>
        </trans-unit>
        <trans-unit id="e9a1bbd9e3c20e8c58669c2f26139ca6f2e0fec7" translate="yes" xml:space="preserve">
          <source>The following methods are related to mutation of the document content:</source>
          <target state="translated">文書内容の突然変異に関連して、以下の方法があります。</target>
        </trans-unit>
        <trans-unit id="32c5f835db7f701a964e6eeb354a81d6919fa866" translate="yes" xml:space="preserve">
          <source>The following methods are used to access the header fields and the contents after the connection is made to the remote object:</source>
          <target state="translated">以下のメソッドを使用して、リモートオブジェクトへの接続後のヘッダフィールドとその内容にアクセスします。</target>
        </trans-unit>
        <trans-unit id="5d718c0190660979044332a467b14434f2c40769" translate="yes" xml:space="preserve">
          <source>The following methods give access to the character data that makes up the content.</source>
          <target state="translated">以下のメソッドは、コンテンツを構成する文字データへのアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="033ba12390d0946290eb6e67df6857757d06f3c1" translate="yes" xml:space="preserve">
          <source>The following methods give access to the document structure.</source>
          <target state="translated">以下のメソッドは、ドキュメント構造体へのアクセスを可能にします。</target>
        </trans-unit>
        <trans-unit id="50a1bbb1b771696673bad8905b2f708ce5822988" translate="yes" xml:space="preserve">
          <source>The following notes apply to the &quot;DRBG&quot; implementation in the SUN provider of the JDK reference implementation.</source>
          <target state="translated">以下の注意事項は、JDK リファレンス実装の SUN プロバイダでの「DRBG」実装に適用されます。</target>
        </trans-unit>
        <trans-unit id="bab784498a1090741bc7bcbb128bd96d44390724" translate="yes" xml:space="preserve">
          <source>The following operations are defined for this class:</source>
          <target state="translated">このクラスには以下の操作が定義されています。</target>
        </trans-unit>
        <trans-unit id="4aee0a6de1b9f655ca7af28697158bc4a87c8e48" translate="yes" xml:space="preserve">
          <source>The following paragraphs describe the namespace and prefix repair algorithm:</source>
          <target state="translated">以下の段落では、名前空間とプレフィックス修復アルゴリズムについて説明します。</target>
        </trans-unit>
        <trans-unit id="d58a87561186b3df4cf28fc117db16e1fb370f26" translate="yes" xml:space="preserve">
          <source>The following pattern letters are defined (all other characters from &lt;code&gt;'A'&lt;/code&gt; to &lt;code&gt;'Z'&lt;/code&gt; and from &lt;code&gt;'a'&lt;/code&gt; to &lt;code&gt;'z'&lt;/code&gt; are reserved):</source>
          <target state="translated">以下のパターン文字が定義されています（ &lt;code&gt;'A'&lt;/code&gt; から &lt;code&gt;'Z'&lt;/code&gt; 、および &lt;code&gt;'a'&lt;/code&gt; から &lt;code&gt;'z'&lt;/code&gt; までの他のすべての文字は予約されています）。</target>
        </trans-unit>
        <trans-unit id="0581e85badd78769c153a1b23a991b8102df6ee3" translate="yes" xml:space="preserve">
          <source>The following permissions have been superseded by newer permissions or are associated with classes that have been deprecated: &lt;a href=&quot;identity&quot;&gt;&lt;code&gt;Identity&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;identityscope&quot;&gt;&lt;code&gt;IdentityScope&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;signer&quot;&gt;&lt;code&gt;Signer&lt;/code&gt;&lt;/a&gt;. Use of them is discouraged. See the applicable classes for more information.</source>
          <target state="translated">次のアクセス許可は、新しいアクセス許可に置き換えられたか、廃止されたクラスに関連付けられています：&lt;a href=&quot;identity&quot;&gt; &lt;code&gt;Identity&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;identityscope&quot;&gt; &lt;code&gt;IdentityScope&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;signer&quot;&gt; &lt;code&gt;Signer&lt;/code&gt; &lt;/a&gt;。それらの使用はお勧めできません。詳細については、該当するクラスを参照してください。</target>
        </trans-unit>
        <trans-unit id="0ce1ce1082433f08b5898ba357a42b396c18a94b" translate="yes" xml:space="preserve">
          <source>The following picture depicts a menu which contains an instance of &lt;code&gt;CheckBoxMenuItem&lt;/code&gt;:</source>
          <target state="translated">次の図は、 &lt;code&gt;CheckBoxMenuItem&lt;/code&gt; のインスタンスを含むメニューを示しています。</target>
        </trans-unit>
        <trans-unit id="0b19fc8974415be4515bd98831bb56ee0af08745" translate="yes" xml:space="preserve">
          <source>The following properties can be set by an application using the &lt;a href=&quot;../xmlcryptocontext#setProperty(java.lang.String,java.lang.Object)&quot;&gt;&lt;code&gt;setProperty&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">次のプロパティは、アプリケーションが&lt;a href=&quot;../xmlcryptocontext#setProperty(java.lang.String,java.lang.Object)&quot;&gt; &lt;code&gt;setProperty&lt;/code&gt; &lt;/a&gt;メソッドを使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="f9f9efa67d2f67a9c06dba17961a71fba1930dcf" translate="yes" xml:space="preserve">
          <source>The following properties can be set using the &lt;a href=&quot;../xmlcryptocontext#setProperty(java.lang.String,java.lang.Object)&quot;&gt;&lt;code&gt;setProperty&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">次のプロパティは、&lt;a href=&quot;../xmlcryptocontext#setProperty(java.lang.String,java.lang.Object)&quot;&gt; &lt;code&gt;setProperty&lt;/code&gt; &lt;/a&gt;メソッドを使用して設定できます。</target>
        </trans-unit>
        <trans-unit id="095e3e7355fa19f5ee58289d9796e3e988d310d1" translate="yes" xml:space="preserve">
          <source>The following represents an example &lt;code&gt;Configuration&lt;/code&gt; entry based on the syntax above:</source>
          <target state="translated">次に、上記の構文に基づく &lt;code&gt;Configuration&lt;/code&gt; エントリの例を示します。</target>
        </trans-unit>
        <trans-unit id="b548a437c93d820df4dce7f8288d69def9ab4607" translate="yes" xml:space="preserve">
          <source>The following resolver would provide the application with a special character stream for the entity with the system identifier &quot;http://www.myhost.com/today&quot;:</source>
          <target state="translated">以下のリゾルバは、システム識別子「http://www.myhost.com/today」を持つエンティティのための特別な文字ストリームをアプリケーションに提供する。</target>
        </trans-unit>
        <trans-unit id="f897dc897276fa2272fca1b98488f908fe0ba63e" translate="yes" xml:space="preserve">
          <source>The following rule is used to create the control:</source>
          <target state="translated">以下のルールでコントロールを作成します。</target>
        </trans-unit>
        <trans-unit id="7e08456c6517fc0c2e3ee51167af4648cf8de1dd" translate="yes" xml:space="preserve">
          <source>The following rules are applied in the conversion:</source>
          <target state="translated">変換には以下のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="08205e616ea1bce1e08b0bc0e1129d0240a8555c" translate="yes" xml:space="preserve">
          <source>The following rules are used to interpret glob patterns:</source>
          <target state="translated">glob パターンを解釈するには、以下のルールを使用します。</target>
        </trans-unit>
        <trans-unit id="928b2cc192bd54d187e07b35ee1aebe277bfa0d3" translate="yes" xml:space="preserve">
          <source>The following rules hold for the argument handles:</source>
          <target state="translated">引数ハンドルには以下のルールがあります。</target>
        </trans-unit>
        <trans-unit id="d8c3936624028ddf5fc126c8eada1c05272c495e" translate="yes" xml:space="preserve">
          <source>The following rules hold for these argument handles:</source>
          <target state="translated">これらの引数ハンドルには、以下のルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="ad4c5b4cd8bd37cf908e5ed29500d2cf8fce0b0b" translate="yes" xml:space="preserve">
          <source>The following sections demonstrates how a &lt;code&gt;WebRowSet&lt;/code&gt; implementation should use the XML Schema to describe update, insert, and delete operations and to describe the state of a &lt;code&gt;WebRowSet&lt;/code&gt; object in XML.</source>
          <target state="translated">次のセクションでは、 &lt;code&gt;WebRowSet&lt;/code&gt; 実装がXMLスキーマを使用して、更新、挿入、および削除操作を記述し、XMLで &lt;code&gt;WebRowSet&lt;/code&gt; オブジェクトの状態を記述する方法を示します。</target>
        </trans-unit>
        <trans-unit id="e662f5cafdbd5ecb60e1c6f67533b72f8424da4a" translate="yes" xml:space="preserve">
          <source>The following sections give further details of these rules.</source>
          <target state="translated">以下のセクションでは、これらのルールの詳細を説明します。</target>
        </trans-unit>
        <trans-unit id="3dc3552c73c17ca1b9c5aa43bfd7d5dfaf26a9bf" translate="yes" xml:space="preserve">
          <source>The following shows two of the &lt;code&gt;name-color&lt;/code&gt; pairs:</source>
          <target state="translated">以下に、2つの &lt;code&gt;name-color&lt;/code&gt; ペアを示します。</target>
        </trans-unit>
        <trans-unit id="1d29f60bac8cc9a33818a808a558b8ff33982da4" translate="yes" xml:space="preserve">
          <source>The following standard button masks are also accepted:</source>
          <target state="translated">また、以下のような標準的なボタンマスクも受け付けています。</target>
        </trans-unit>
        <trans-unit id="e981f6a80c2f4b200d1c20e0f2e1b9057f274cc5" translate="yes" xml:space="preserve">
          <source>The following standard type names have been defined:</source>
          <target state="translated">以下の標準型名が定義されています。</target>
        </trans-unit>
        <trans-unit id="059245ffb9cf67aa21ae5627f1571722543f9fdb" translate="yes" xml:space="preserve">
          <source>The following statement:</source>
          <target state="translated">次のような発言がありました。</target>
        </trans-unit>
        <trans-unit id="dc17f56a6c7df0d6dab18fd32c3d2b022583dfb1" translate="yes" xml:space="preserve">
          <source>The following steps are used to determine the set of glyphs required to render the indicated &lt;code&gt;String&lt;/code&gt;:</source>
          <target state="translated">次の手順を使用して、指定された &lt;code&gt;String&lt;/code&gt; をレンダリングするために必要なグリフのセットを決定します。</target>
        </trans-unit>
        <trans-unit id="0d1054dd27a2b54725c034e56e595342eef2e37d" translate="yes" xml:space="preserve">
          <source>The following string attributes are equal: &lt;code&gt;nodeName&lt;/code&gt;, &lt;code&gt;localName&lt;/code&gt;, &lt;code&gt;namespaceURI&lt;/code&gt;, &lt;code&gt;prefix&lt;/code&gt;, &lt;code&gt;nodeValue&lt;/code&gt; . This is: they are both &lt;code&gt;null&lt;/code&gt;, or they have the same length and are character for character identical.</source>
          <target state="translated">次の文字列属性は同じです： &lt;code&gt;nodeName&lt;/code&gt; 、 &lt;code&gt;localName&lt;/code&gt; 、 &lt;code&gt;namespaceURI&lt;/code&gt; 、 &lt;code&gt;prefix&lt;/code&gt; 、 &lt;code&gt;nodeValue&lt;/code&gt; 。これは、両方とも &lt;code&gt;null&lt;/code&gt; であるか、同じ長さであり、文字ごとに同一であるということです。</target>
        </trans-unit>
        <trans-unit id="4860201a1768a9dc24bcaa52fb5ec801c2e06f8c" translate="yes" xml:space="preserve">
          <source>The following string attributes are equal: &lt;code&gt;publicId&lt;/code&gt;, &lt;code&gt;systemId&lt;/code&gt;, &lt;code&gt;internalSubset&lt;/code&gt;.</source>
          <target state="translated">次の文字列属性は同じです： &lt;code&gt;publicId&lt;/code&gt; 、 &lt;code&gt;systemId&lt;/code&gt; 、 &lt;code&gt;internalSubset&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="616bdaa8268db9337c435490cc6ea5d71fc28b55" translate="yes" xml:space="preserve">
          <source>The following syntax is supported for configuration data:</source>
          <target state="translated">設定データには以下の構文がサポートされています。</target>
        </trans-unit>
        <trans-unit id="ecd14701074ee88ad3cd6b898bb2965df70eb0b9" translate="yes" xml:space="preserve">
          <source>The following table describes the properties used by &lt;code&gt;Swing&lt;/code&gt; components that support &lt;code&gt;Actions&lt;/code&gt;. In the table, &lt;em&gt;button&lt;/em&gt; refers to any &lt;code&gt;AbstractButton&lt;/code&gt; subclass, which includes not only &lt;code&gt;JButton&lt;/code&gt; but also classes such as &lt;code&gt;JMenuItem&lt;/code&gt;. Unless otherwise stated, a &lt;code&gt;null&lt;/code&gt; property value in an &lt;code&gt;Action&lt;/code&gt; (or a &lt;code&gt;Action&lt;/code&gt; that is &lt;code&gt;null&lt;/code&gt;) results in the button's corresponding property being set to &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">次の表に、 &lt;code&gt;Actions&lt;/code&gt; をサポートする &lt;code&gt;Swing&lt;/code&gt; コンポーネントで使用されるプロパティを示します。表中の&lt;em&gt;button&lt;/em&gt;は、 &lt;code&gt;JButton&lt;/code&gt; だけでなく、 &lt;code&gt;JMenuItem&lt;/code&gt; などのクラスも含む &lt;code&gt;AbstractButton&lt;/code&gt; サブクラスを指し&lt;em&gt;ます&lt;/em&gt;。特に明記しない限り、 &lt;code&gt;null&lt;/code&gt; でプロパティ値 &lt;code&gt;Action&lt;/code&gt; （または &lt;code&gt;Action&lt;/code&gt; で &lt;code&gt;null&lt;/code&gt; ）に設定して、ボタンの対応するプロパティで結果を &lt;code&gt;null&lt;/code&gt; 。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="2515e4e89d813c49f09f4f13c10f030d89493ebc" translate="yes" xml:space="preserve">
          <source>The following table describes which methods are valid in what state. If a method is called in an invalid state the method will throw a java.lang.IllegalStateException.</source>
          <target state="translated">次の表では、どの状態でどのメソッドが有効かを説明します。無効な状態でメソッドが呼び出された場合、そのメソッドは java.lang.IllegalStateException をスローします。</target>
        </trans-unit>
        <trans-unit id="03f8e9c0a8d9f72f0813be38c030c257d4885703" translate="yes" xml:space="preserve">
          <source>The following table gives some examples of the relations between the attribute value in the original document (parsed attribute), the value as exposed in the DOM, and the serialization of the value:</source>
          <target state="translated">以下の表は、元の文書内の属性値(解析された属性)と、DOM内で公開されている値と、その値のシリアライズとの関係の例を示しています。</target>
        </trans-unit>
        <trans-unit id="8f6c72bcfb202d2d7dedc0558ca2b904fe019842" translate="yes" xml:space="preserve">
          <source>The following table illustrates the features that the &lt;code&gt;BaseRowSet&lt;/code&gt; abstract class provides.</source>
          <target state="translated">次の表は、 &lt;code&gt;BaseRowSet&lt;/code&gt; 抽象クラスが提供する機能を示しています。</target>
        </trans-unit>
        <trans-unit id="7151bc690e351dd9a1f336d910b7933181defb79" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible &lt;code&gt;AWTPermission&lt;/code&gt; target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表に、考えられるすべての &lt;code&gt;AWTPermission&lt;/code&gt; ターゲット名を示します。それぞれについて、アクセス許可で許可される内容の説明と、コードにアクセス許可を付与するリスクについて説明します。</target>
        </trans-unit>
        <trans-unit id="edc4758a2f7a1b8c0bd50af3aaf086d8b3a4a2e0" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible &lt;code&gt;SQLPermission&lt;/code&gt; target names. The table gives a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表に、考えられるすべての &lt;code&gt;SQLPermission&lt;/code&gt; ターゲット名を示します。この表は、許可によって許可される内容の説明と、コードに許可を付与することのリスクについての説明を示しています。</target>
        </trans-unit>
        <trans-unit id="ef5787f391778d570faa8f529dd2d4b7ec4d7af7" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible NetPermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">以下の表は、NetPermission の対象となりうるすべての名前の一覧であり、それぞれについて、そのパーミッションが何を許可しているかの説明と、そのパーミッションをコードに付与することのリスクについての議論を提供しています。</target>
        </trans-unit>
        <trans-unit id="17260818ccc38c24f91ff1a15d0d3826faa41c0e" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible RuntimePermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表では、RuntimePermission のターゲット名をすべてリストアップし、それぞれについて、そのパーミッションが許可する内容と、そのパーミッションをコードに付与することのリスクについて説明しています。</target>
        </trans-unit>
        <trans-unit id="7ff5627793347ef7ce9be716f4b73a272dd3f460" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible SSLPermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">以下の表は、SSLPermission の対象となりうるすべての名前をリストアップしたもので、それぞれについて、そのパーミッションが何を許可しているかの説明と、そのパーミッションをコードに付与することのリスクについての議論を提供しています。</target>
        </trans-unit>
        <trans-unit id="3f4e15c4be2288a1f5a4c41bc7168d70d61fef07" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible SecurityPermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">以下の表は、考えられるすべての SecurityPermission のターゲット名をリストアップしたもので、それぞれについて、そのパーミッションが何を許可しているかの説明と、そのパーミッションをコードに付与することのリスクについての議論を提供しています。</target>
        </trans-unit>
        <trans-unit id="9c80eaace1109e654052b6da7dfbb1e233a7e068" translate="yes" xml:space="preserve">
          <source>The following table lists all the possible SerializablePermission target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">以下の表は、SerializablePermission のターゲットとなりうるすべての名前のリストで、それぞれについて、そのパーミッションが許可する内容と、そのパーミッションをコードに付与することのリスクについて説明しています。</target>
        </trans-unit>
        <trans-unit id="f54160ed60b7126e0f30578518989c027ea5ce1b" translate="yes" xml:space="preserve">
          <source>The following table lists some common properties that should be used in implementations:</source>
          <target state="translated">以下の表は、実装で使用すべき一般的なプロパティのいくつかを示しています。</target>
        </trans-unit>
        <trans-unit id="660a03ca8d2ac49279e69071cdeceb003e271b59" translate="yes" xml:space="preserve">
          <source>The following table lists some common properties which service providers should use, if applicable:</source>
          <target state="translated">次の表は、サービスプロバイダが使用すべき一般的なプロパティをいくつか挙げています。</target>
        </trans-unit>
        <trans-unit id="179bd60df88f32c14ede99ee9b73f1703dc32793" translate="yes" xml:space="preserve">
          <source>The following table lists the possible &lt;code&gt;AudioPermission&lt;/code&gt; target names. For each name, the table provides a description of exactly what that permission allows, as well as a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表に、可能な &lt;code&gt;AudioPermission&lt;/code&gt; ターゲット名を示します。この表では、名前ごとに、その権限で許可される内容の説明と、コードに権限を付与することのリスクについて説明しています。</target>
        </trans-unit>
        <trans-unit id="15aefb289888c8cfd85bc93026363772d88eaf66" translate="yes" xml:space="preserve">
          <source>The following table lists the standard &lt;code&gt;RuntimePermission&lt;/code&gt; target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表に、標準の &lt;code&gt;RuntimePermission&lt;/code&gt; ターゲット名を示します。それぞれについて、アクセス許可で許可される内容の説明と、コードにアクセス許可を付与するリスクについて説明します。</target>
        </trans-unit>
        <trans-unit id="2b3fd6bd4cbc5933b1b8c133bd8c749890f2bdf2" translate="yes" xml:space="preserve">
          <source>The following table lists the standard &lt;code&gt;SecurityPermission&lt;/code&gt; target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表に、標準の &lt;code&gt;SecurityPermission&lt;/code&gt; ターゲット名を示します。それぞれについて、アクセス許可で許可される内容の説明と、コードにアクセス許可を付与するリスクについて説明します。</target>
        </trans-unit>
        <trans-unit id="038977495624e64859de9d0346555f965fab9bf9" translate="yes" xml:space="preserve">
          <source>The following table lists the standard &lt;code&gt;SerializablePermission&lt;/code&gt; target names, and for each provides a description of what the permission allows and a discussion of the risks of granting code the permission.</source>
          <target state="translated">次の表に、標準の &lt;code&gt;SerializablePermission&lt;/code&gt; ターゲット名を示します。それぞれについて、アクセス許可で許可される内容の説明と、コードにアクセス許可を付与するリスクについて説明します。</target>
        </trans-unit>
        <trans-unit id="c596c0991d22917115d21c4df40bbc0100da38f5" translate="yes" xml:space="preserve">
          <source>The following table provides a summary description of what the permission allows, and discusses the risks of granting code the permission.</source>
          <target state="translated">以下の表では、その許可が何を許可しているのかをまとめて説明し、その許可をコードに付与することのリスクについて議論しています。</target>
        </trans-unit>
        <trans-unit id="9999335da83646da96e144319d66729289535a5b" translate="yes" xml:space="preserve">
          <source>The following table shows the example document and the results of various methods described above.</source>
          <target state="translated">以下に、文書例と、上述した各種の方法の結果を示す。</target>
        </trans-unit>
        <trans-unit id="a300318a4bbec53addd65106cc96eb86122b2ebf" translate="yes" xml:space="preserve">
          <source>The following table shows what components get built by this view.</source>
          <target state="translated">次の表は、このビューでビルドされるコンポーネントを示しています。</target>
        </trans-unit>
        <trans-unit id="f2fb49e04ae635cd7cfef1d54fffded805a24728" translate="yes" xml:space="preserve">
          <source>The following table shows what parameter values an implementation might use for a representative set of reverberation settings.</source>
          <target state="translated">以下の表は、代表的な残響設定のセットに対して、実装が使用する可能性のあるパラメータ値を示しています。</target>
        </trans-unit>
        <trans-unit id="ba7efe8c61b0da53598a46929132d482972b0d1f" translate="yes" xml:space="preserve">
          <source>The following table summarizes the supported conversions. Conversions denoted by an upper-case character (i.e. &lt;code&gt;'B'&lt;/code&gt;, &lt;code&gt;'H'&lt;/code&gt;, &lt;code&gt;'S'&lt;/code&gt;, &lt;code&gt;'C'&lt;/code&gt;, &lt;code&gt;'X'&lt;/code&gt;, &lt;code&gt;'E'&lt;/code&gt;, &lt;code&gt;'G'&lt;/code&gt;, &lt;code&gt;'A'&lt;/code&gt;, and &lt;code&gt;'T'&lt;/code&gt;) are the same as those for the corresponding lower-case conversion characters except that the result is converted to upper case according to the rules of the prevailing &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt;. If there is no explicit locale specified, either at the construction of the instance or as a parameter to its method invocation, then the &lt;a href=&quot;locale.category#FORMAT&quot;&gt;&lt;code&gt;default locale&lt;/code&gt;&lt;/a&gt; is used.</source>
          <target state="translated">次の表は、サポートされている変換をまとめたものです。大文字で示される変換（つまり、 &lt;code&gt;'B'&lt;/code&gt; 、 &lt;code&gt;'H'&lt;/code&gt; 、 &lt;code&gt;'S'&lt;/code&gt; 、 &lt;code&gt;'C'&lt;/code&gt; 、 &lt;code&gt;'X'&lt;/code&gt; 、 &lt;code&gt;'E'&lt;/code&gt; 、 &lt;code&gt;'G'&lt;/code&gt; 、 &lt;code&gt;'A'&lt;/code&gt; 、および &lt;code&gt;'T'&lt;/code&gt; ）は同じです。結果が一般的な&lt;a href=&quot;locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; &lt;/a&gt;規則に従って大文字に変換されることを除いて、対応する小文字の変換文字の場合と同じです。インスタンスの構築時またはメソッド呼び出しのパラメーターとして明示的なロケールが指定されていない場合は、&lt;a href=&quot;locale.category#FORMAT&quot;&gt; &lt;code&gt;default locale&lt;/code&gt; &lt;/a&gt;が使用されます。</target>
        </trans-unit>
        <trans-unit id="36442fed0b3c21cba2fc0264c571657e0341e0c1" translate="yes" xml:space="preserve">
          <source>The following table summarizes the supported conversions. Conversions denoted by an upper-case character (i.e. &lt;code&gt;'B'&lt;/code&gt;, &lt;code&gt;'H'&lt;/code&gt;, &lt;code&gt;'S'&lt;/code&gt;, &lt;code&gt;'C'&lt;/code&gt;, &lt;code&gt;'X'&lt;/code&gt;, &lt;code&gt;'E'&lt;/code&gt;, &lt;code&gt;'G'&lt;/code&gt;, &lt;code&gt;'A'&lt;/code&gt;, and &lt;code&gt;'T'&lt;/code&gt;) are the same as those for the corresponding lower-case conversion characters except that the result is converted to upper case according to the rules of the prevailing &lt;a href=&quot;locale&quot;&gt;&lt;code&gt;Locale&lt;/code&gt;&lt;/a&gt;. The result is equivalent to the following invocation of &lt;a href=&quot;../lang/string#toUpperCase--&quot;&gt;&lt;code&gt;String.toUpperCase()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">次の表は、サポートされている変換をまとめたものです。大文字で示される変換（つまり、 &lt;code&gt;'B'&lt;/code&gt; 、 &lt;code&gt;'H'&lt;/code&gt; 、 &lt;code&gt;'S'&lt;/code&gt; 、 &lt;code&gt;'C'&lt;/code&gt; 、 &lt;code&gt;'X'&lt;/code&gt; 、 &lt;code&gt;'E'&lt;/code&gt; 、 &lt;code&gt;'G'&lt;/code&gt; 、 &lt;code&gt;'A'&lt;/code&gt; 、および &lt;code&gt;'T'&lt;/code&gt; ）は同じです対応する小文字変換文字の場合と同じですが、一般的な&lt;a href=&quot;locale&quot;&gt; &lt;code&gt;Locale&lt;/code&gt; の&lt;/a&gt;規則に従って結果が大文字に変換されます。結果は、次の&lt;a href=&quot;../lang/string#toUpperCase--&quot;&gt; &lt;code&gt;String.toUpperCase()&lt;/code&gt; の&lt;/a&gt;呼び出しと同等です。</target>
        </trans-unit>
        <trans-unit id="65e243be51f564c984aa8e7b3c0b24bf9c633580" translate="yes" xml:space="preserve">
          <source>The following table summarizes the supported flags.</source>
          <target state="translated">次の表に、サポートされているフラグの概要を示します。</target>
        </trans-unit>
        <trans-unit id="ccb7111863ddef3a44afb63ff5af119b506708e5" translate="yes" xml:space="preserve">
          <source>The following table summarizes the type mapping rules.</source>
          <target state="translated">タイプマッピングのルールをまとめると次のようになります。</target>
        </trans-unit>
        <trans-unit id="6eb3829191aadf52b3efa4b3303459432ed38cd5" translate="yes" xml:space="preserve">
          <source>The following target name has been deprecated in favor of &lt;code&gt;createLoginContext.{name}&lt;/code&gt;.</source>
          <target state="translated">次のターゲット名は、 &lt;code&gt;createLoginContext.{name}&lt;/code&gt; ために廃止されました。</target>
        </trans-unit>
        <trans-unit id="ff3a76ac8c797d1b540cfe5e374bfb9ac59b4699" translate="yes" xml:space="preserve">
          <source>The following two rules provide predictable rendering behavior whether aliasing or antialiasing is being used.</source>
          <target state="translated">次の 2 つのルールは、エイリアシングとアンチエイリアシングのどちらを使用しているかに関わらず、予測可能なレンダリング動作を提供します。</target>
        </trans-unit>
        <trans-unit id="c1da9cc4ffc1de3101c943837c22bc1fd9afac2e" translate="yes" xml:space="preserve">
          <source>The following update policies are allowed:</source>
          <target state="translated">以下の更新ポリシーが許可されています。</target>
        </trans-unit>
        <trans-unit id="2c3b7dc38ed8f8df0932176f3dbdae53509c7c3b" translate="yes" xml:space="preserve">
          <source>The following values are valid for &lt;code&gt;fill&lt;/code&gt;:</source>
          <target state="translated">次の値は &lt;code&gt;fill&lt;/code&gt; 有効です：</target>
        </trans-unit>
        <trans-unit id="05b2a57dc3dff480b15b59294cea7041689febef" translate="yes" xml:space="preserve">
          <source>The following will accumulate strings into an ArrayList:</source>
          <target state="translated">以下は文字列をArrayListに蓄積します。</target>
        </trans-unit>
        <trans-unit id="ff3f1c7285fc03704a549b7ebe12c02f8a4efaf9" translate="yes" xml:space="preserve">
          <source>The following will classify &lt;code&gt;Person&lt;/code&gt; objects by city:</source>
          <target state="translated">以下は、 &lt;code&gt;Person&lt;/code&gt; オブジェクトを都市別に分類します。</target>
        </trans-unit>
        <trans-unit id="659f4685dccfaaf333b539f6e067f1ae741d4c90" translate="yes" xml:space="preserve">
          <source>The following will classify &lt;code&gt;Person&lt;/code&gt; objects by state and city, cascading two &lt;code&gt;Collector&lt;/code&gt;s together:</source>
          <target state="translated">次の例では、 &lt;code&gt;Person&lt;/code&gt; オブジェクトを州と都市で分類し、2つの &lt;code&gt;Collector&lt;/code&gt; をカスケードします。</target>
        </trans-unit>
        <trans-unit id="6241dc4fdeacf1d1841f3cd3b25a57ea3305649e" translate="yes" xml:space="preserve">
          <source>The following will take a stream of strings and concatenates them into a single string:</source>
          <target state="translated">以下は、文字列のストリームを取り、それらを1つの文字列に連結します。</target>
        </trans-unit>
        <trans-unit id="cb96cbae2ec8c9d5aa930342501810327a163404" translate="yes" xml:space="preserve">
          <source>The font conflicts with a non-created &lt;code&gt;Font&lt;/code&gt; already in this &lt;code&gt;GraphicsEnvironment&lt;/code&gt;. For example if the name is that of a system font, or a logical font as described in the documentation of the &lt;a href=&quot;font&quot;&gt;&lt;code&gt;Font&lt;/code&gt;&lt;/a&gt; class. It is implementation dependent whether a font may also conflict if it has the same family name as a system font.</source>
          <target state="translated">&lt;code&gt;Font&lt;/code&gt; は、この &lt;code&gt;GraphicsEnvironment&lt;/code&gt; にすでに作成されていないフォントと競合します。たとえば、名前がシステムフォントの名前である場合、または&lt;a href=&quot;font&quot;&gt; &lt;code&gt;Font&lt;/code&gt; &lt;/a&gt;クラスのドキュメントで説明されている論理フォントの場合です。フォントがシステムフォントと同じファミリ名を持っている場合、フォントも競合する可能性があるかどうかは、実装によって異なります。</target>
        </trans-unit>
        <trans-unit id="cbf8a7d1f416da0dab5030de4c91ce5cd0084bbd" translate="yes" xml:space="preserve">
          <source>The font for rendering the title.</source>
          <target state="translated">タイトルをレンダリングするためのフォント。</target>
        </trans-unit>
        <trans-unit id="c26d39ae1f8070236b4aac3bbf67a4c109e59cc4" translate="yes" xml:space="preserve">
          <source>The font is not a</source>
          <target state="translated">フォントは</target>
        </trans-unit>
        <trans-unit id="da8c97a5025dea48a0af564004e56ecc1ee5d375" translate="yes" xml:space="preserve">
          <source>The font name can be a font face name or a font family name. It is used together with the style to find an appropriate font face. When a font family name is specified, the style argument is used to select the most appropriate face from the family. When a font face name is specified, the face's style and the style argument are merged to locate the best matching font from the same family. For example if face name &quot;Arial Bold&quot; is specified with style &lt;code&gt;Font.ITALIC&lt;/code&gt;, the font system looks for a face in the &quot;Arial&quot; family that is bold and italic, and may associate the font instance with the physical font face &quot;Arial Bold Italic&quot;. The style argument is merged with the specified face's style, not added or subtracted. This means, specifying a bold face and a bold style does not double-embolden the font, and specifying a bold face and a plain style does not lighten the font.</source>
          <target state="translated">フォント名は、フォントフェース名またはフォントファミリ名にすることができます。適切なフォントフェースを見つけるために、スタイルと一緒に使用されます。フォントファミリ名を指定すると、style引数を使用して、ファミリから最も適切な面が選択されます。フォントフェース名を指定すると、フェースのスタイルとスタイル引数がマージされ、同じファミリから最も一致するフォントが検索されます。たとえば、顔名「 &lt;code&gt;Font.ITALIC&lt;/code&gt; 」がスタイルFont.ITALICで指定されている場合、フォントシステムは、太字および斜体の「Arial」ファミリ内の面を検索し、フォントインスタンスを物理フォント面「ArialBoldItalic」に関連付けることができます。style引数は、指定された面のスタイルとマージされ、加算または減算されません。つまり、太字と太字のスタイルを指定してもフォントが二重に埋め込まれることはなく、太字とプレーンなスタイルを指定してもフォントが明るくなることはありません。</target>
        </trans-unit>
        <trans-unit id="57a9fb3a7b0e93bd09e1f89825278e77ea79f8f0" translate="yes" xml:space="preserve">
          <source>The font size decrease to next value action identifier</source>
          <target state="translated">フォントサイズを次の値に下げる アクション識別子</target>
        </trans-unit>
        <trans-unit id="4e63b256f18c29f2463d23edd430f8ad24e1a7c8" translate="yes" xml:space="preserve">
          <source>The font size increase to next value action identifier</source>
          <target state="translated">フォントサイズを次の値に増やす アクション識別子</target>
        </trans-unit>
        <trans-unit id="6f2dc215d93752d9fe3fbbfa542e99ec51035bf4" translate="yes" xml:space="preserve">
          <source>The foreground color of selected cells.</source>
          <target state="translated">選択されたセルの前景色。</target>
        </trans-unit>
        <trans-unit id="f490a248b8701376898bff36a2d349e6094b6458" translate="yes" xml:space="preserve">
          <source>The foreground painter associated for the given state, or null if none could be found.</source>
          <target state="translated">指定された状態に関連付けられた前景描画者。</target>
        </trans-unit>
        <trans-unit id="bbfa942ce1023e5baebf9a307baa7bd02eece99d" translate="yes" xml:space="preserve">
          <source>The form of the domain name is specified by RFC 2965. A domain name begins with a dot (&lt;code&gt;.foo.com&lt;/code&gt;) and means that the cookie is visible to servers in a specified Domain Name System (DNS) zone (for example, &lt;code&gt;www.foo.com&lt;/code&gt;, but not &lt;code&gt;a.b.foo.com&lt;/code&gt;). By default, cookies are only returned to the server that sent them.</source>
          <target state="translated">ドメイン名の形式はRFC 2965で指定されています。ドメイン名はドット（ &lt;code&gt;.foo.com&lt;/code&gt; ）で始まり、指定されたドメインネームシステム（DNS）ゾーン（ &lt;code&gt;www.foo.com&lt;/code&gt; など）のサーバーにCookieが表示されることを意味します。 foo.com、ただし &lt;code&gt;a.b.foo.com&lt;/code&gt; は除く）。デフォルトでは、Cookieはそれらを送信したサーバーにのみ返されます。</target>
        </trans-unit>
        <trans-unit id="186d34b99f6c159fe7b20960d58eebbd64ab2b53" translate="yes" xml:space="preserve">
          <source>The form-feed character (&lt;code&gt;'\u000C'&lt;/code&gt;)</source>
          <target state="translated">フォームフィード文字（ &lt;code&gt;'\u000C'&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="ac10df27c6523117883e512c48a3dc443ff47107" translate="yes" xml:space="preserve">
          <source>The formal grammar for connection ids that follow this convention is as follows (using the grammar notation from section 2.4 of &lt;em&gt;The Java&amp;trade; Language Specification&lt;/em&gt;):</source>
          <target state="translated">この規則に従う接続IDの正式な文法は次のとおりです（&lt;em&gt;Java&amp;trade;言語仕様の&lt;/em&gt;セクション2.4の文法表記を使用）。</target>
        </trans-unit>
        <trans-unit id="2cf1258d334e355d142bef03535337a03ed0c616" translate="yes" xml:space="preserve">
          <source>The format and interpretation of &lt;code&gt;filter&lt;/code&gt; follows RFC 2254 with the following interpretations for &lt;code&gt;attr&lt;/code&gt; and &lt;code&gt;value&lt;/code&gt; mentioned in the RFC.</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; の形式と解釈はRFC 2254に準拠しており、RFCで言及されている &lt;code&gt;attr&lt;/code&gt; と &lt;code&gt;value&lt;/code&gt; の解釈は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5b744b244f5335a7221e3aa66efc0d53650d86fb" translate="yes" xml:space="preserve">
          <source>The format consists of the &lt;code&gt;LocalDateTime&lt;/code&gt; followed by the &lt;code&gt;ZoneOffset&lt;/code&gt;. If the &lt;code&gt;ZoneId&lt;/code&gt; is not the same as the offset, then the ID is output. The output is compatible with ISO-8601 if the offset and ID are the same.</source>
          <target state="translated">フォーマットは、から成る &lt;code&gt;LocalDateTime&lt;/code&gt; 続い &lt;code&gt;ZoneOffset&lt;/code&gt; 。 &lt;code&gt;ZoneId&lt;/code&gt; がオフセットと同じでない場合、IDが出力されます。オフセットとIDが同じ場合、出力はISO-8601と互換性があります。</target>
        </trans-unit>
        <trans-unit id="e348646ae1fcbac451ad03744c692f77282975a4" translate="yes" xml:space="preserve">
          <source>The format consists of:</source>
          <target state="translated">形式で構成されています。</target>
        </trans-unit>
        <trans-unit id="9c6440eac25ca25ad1f5532fd5250acc6573ef48" translate="yes" xml:space="preserve">
          <source>The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard. No daylight saving time transition schedule can be specified with a custom time zone ID. If the specified string doesn't match the syntax, &lt;code&gt;&quot;GMT&quot;&lt;/code&gt; is used.</source>
          <target state="translated">形式はロケールに依存せず、数字はUnicode標準のBasic Latinブロックから取得する必要があります。夏時間の移行スケジュールは、カスタムタイムゾーンIDで指定できません。指定された文字列が構文と一致しない場合、 &lt;code&gt;&quot;GMT&quot;&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="d4a86dbcac0624f8f00a3128c0cec66b617732f1" translate="yes" xml:space="preserve">
          <source>The format is not defined, but an implementation must ensure that the string returned by this method can be used to build an equivalent descriptor when instantiated using the constructor &lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt;&lt;code&gt;DescriptorSupport(String inStr)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">形式は定義されていませんが、実装では、コンストラクター&lt;a href=&quot;#%3Cinit%3E(java.lang.String)&quot;&gt; &lt;code&gt;DescriptorSupport(String inStr)&lt;/code&gt; &lt;/a&gt;を使用してインスタンス化されたときに、このメソッドによって返される文字列を使用して同等の記述子を作成できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="2abc0d69d332bd14c8108e7ef901fd679e5a23cb" translate="yes" xml:space="preserve">
          <source>The format is not defined, but an implementation must ensure that the string returned by this method can be used to build an equivalent descriptor when instantiated using the constructor &lt;a href=&quot;descriptorsupport#DescriptorSupport-java.lang.String-&quot;&gt;&lt;code&gt;DescriptorSupport(String inStr)&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">形式は定義されていませんが、実装では、コンストラクター&lt;a href=&quot;descriptorsupport#DescriptorSupport-java.lang.String-&quot;&gt; &lt;code&gt;DescriptorSupport(String inStr)&lt;/code&gt; &lt;/a&gt;を使用してインスタンス化するときに、このメソッドによって返される文字列を使用して同等の記述子を構築できることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="c239b759e0bd91e3deaa124baf341e96eadd502f" translate="yes" xml:space="preserve">
          <source>The format of a provider-configuration file violates the &lt;a href=&quot;serviceloader#format&quot;&gt;specification&lt;/a&gt;;</source>
          <target state="translated">プロバイダー構成ファイルの形式が&lt;a href=&quot;serviceloader#format&quot;&gt;仕様に&lt;/a&gt;違反しています。</target>
        </trans-unit>
        <trans-unit id="10a6300c9d0f42d3b1164cab5831a27b66704f50" translate="yes" xml:space="preserve">
          <source>The format of the IPv6reference should follow that specified in &lt;a href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;RFC 2732: Format for Literal IPv6 Addresses in URLs&lt;/i&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;http://www.ietf.org/rfc/rfc2732.txt&quot;&gt;&lt;i&gt;IPv6参照の形式は&lt;/i&gt;&lt;/a&gt;、&lt;i&gt;RFC 2732：URL内のリテラルIPv6アドレスの形式&lt;/i&gt;で指定され&lt;i&gt;て&lt;/i&gt;いる形式に従う必要&lt;i&gt;があります&lt;/i&gt;。</target>
        </trans-unit>
        <trans-unit id="6b8138c2c9da0ec8d6e19cf5312cb8b37838a661" translate="yes" xml:space="preserve">
          <source>The format of the XML string is not defined, but an implementation must ensure that the string returned by &lt;a href=&quot;#toXMLString()&quot;&gt;&lt;code&gt;toXMLString()&lt;/code&gt;&lt;/a&gt; on an existing descriptor can be used to instantiate an equivalent descriptor using this constructor.</source>
          <target state="translated">XML文字列の形式は定義されていませんが、実装では、既存の記述子で&lt;a href=&quot;#toXMLString()&quot;&gt; &lt;code&gt;toXMLString()&lt;/code&gt; &lt;/a&gt;によって返される文字列を使用して、このコンストラクターを使用して同等の記述子をインスタンス化できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="e1864d871bbfba4b54130ce6fa9ccd149fe6fcc6" translate="yes" xml:space="preserve">
          <source>The format of the XML string is not defined, but an implementation must ensure that the string returned by &lt;a href=&quot;descriptorsupport#toXMLString--&quot;&gt;&lt;code&gt;toXMLString()&lt;/code&gt;&lt;/a&gt; on an existing descriptor can be used to instantiate an equivalent descriptor using this constructor.</source>
          <target state="translated">XML文字列の形式は定義されていませんが、実装では、既存の記述子で&lt;a href=&quot;descriptorsupport#toXMLString--&quot;&gt; &lt;code&gt;toXMLString()&lt;/code&gt; &lt;/a&gt;によって返された文字列を使用して、このコンストラクタを使用して同等の記述子をインスタンス化できるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="d99535add274a0feacad81889acf4221b07d0c89" translate="yes" xml:space="preserve">
          <source>The format of the audio data contained in the stream.</source>
          <target state="translated">ストリームに含まれるオーディオデータのフォーマット。</target>
        </trans-unit>
        <trans-unit id="ee979ff775433a4c037cb40853991fa64734e45a" translate="yes" xml:space="preserve">
          <source>The format of the input token that this method reads is defined in the specification for the underlying mechanism that will be used. This method will attempt to read one of these tokens per invocation. If the mechanism token contains a definitive start and end this method may block on the &lt;code&gt;InputStream&lt;/code&gt; if only part of the token is available. If the start and end of the token are not definitive then the method will attempt to treat all available bytes as part of the token.</source>
          <target state="translated">このメソッドが読み取る入力トークンの形式は、使用される基になるメカニズムの仕様で定義されています。このメソッドは、呼び出しごとにこれらのトークンの1つを読み取ろうとします。メカニズムトークンに明確な開始と終了が含まれている場合、トークンの一部しか使用できないと、このメソッドは &lt;code&gt;InputStream&lt;/code&gt; でブロックする可能性があります。トークンの開始と終了が明確でない場合、メソッドは使用可能なすべてのバイトをトークンの一部として処理しようとします。</target>
        </trans-unit>
        <trans-unit id="05fc3b303a60aef7cfaee1c74286f09fc7d392d0" translate="yes" xml:space="preserve">
          <source>The format of the metadata contained in the XML &lt;code&gt;Document&lt;/code&gt; is identified by a string which appears as the root node of the tree of &lt;code&gt;IIOMetadataNode&lt;/code&gt; objects. This string contains a version number, e.g. &quot;javax_imageio_jpeg_image_1.0&quot;. Readers and writers may support multiple versions of the same basic format and the Image I/O API has methods that allow specifying which version to use by passing the string to the method/constructor used to obtain an &lt;code&gt;IIOMetadata&lt;/code&gt; object. In some cases, a more recent version may not be strictly compatible with a program written expecting an older version (for an example, see the Native Metadata Format section of the JPEG Metadata Usage Notes below).</source>
          <target state="translated">XML &lt;code&gt;Document&lt;/code&gt; 含まれるメタデータの形式は、 &lt;code&gt;IIOMetadataNode&lt;/code&gt; オブジェクトのツリーのルートノードとして表示される文字列によって識別されます。この文字列には、「javax_imageio_jpeg_image_1.0」などのバージョン番号が含まれています。リーダーとライターは同じ基本フォーマットの複数のバージョンをサポートしている場合があり、Image I / O APIには、 &lt;code&gt;IIOMetadata&lt;/code&gt; オブジェクトの取得に使用されるメソッド/コンストラクターに文字列を渡すことにより、使用するバージョンを指定できるメソッドがあります。場合によっては、より新しいバージョンは、古いバージョンを想定して記述されたプログラムと厳密に互換性がない場合があります（例については、以下のJPEGメタデータ使用上の注意のネイティブメタデータ形式のセクションを参照してください）。</target>
        </trans-unit>
        <trans-unit id="cbdbd7a56c0b79b1e7da582d74bf2a348a161879" translate="yes" xml:space="preserve">
          <source>The format of the offset is controlled by a pattern which must be one of the following:</source>
          <target state="translated">オフセットのフォーマットは、以下のいずれかでなければならないパターンによって制御されます。</target>
        </trans-unit>
        <trans-unit id="a8deb155671191df84cbd52b08680ae0e03cb5a8" translate="yes" xml:space="preserve">
          <source>The format of the provider-configuration file violates the &lt;a href=&quot;serviceloader#format&quot;&gt;format&lt;/a&gt; specified above;</source>
          <target state="translated">プロバイダー構成ファイルの&lt;a href=&quot;serviceloader#format&quot;&gt;形式&lt;/a&gt;が上記の形式に違反しています。</target>
        </trans-unit>
        <trans-unit id="66255b715513f5e734bbd855aa0ecb644eb59ba8" translate="yes" xml:space="preserve">
          <source>The format of the read data is not specified, but if an implementation supports &lt;a href=&quot;#readExternal(java.io.ObjectInput)&quot;&gt;&lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt;&lt;/a&gt; it must also support &lt;a href=&quot;#writeExternal(java.io.ObjectOutput)&quot;&gt;&lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt;&lt;/a&gt; in such a way that what is written by the latter can be read by the former.</source>
          <target state="translated">読み取られたデータの形式は指定されていませんが、実装が&lt;a href=&quot;#readExternal(java.io.ObjectInput)&quot;&gt; &lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt; を&lt;/a&gt;サポートしている場合は、後者によって書き込まれたものを読み取ることができるように、&lt;a href=&quot;#writeExternal(java.io.ObjectOutput)&quot;&gt; &lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt; &lt;/a&gt;もサポートする必要があります。前者。</target>
        </trans-unit>
        <trans-unit id="ef2c2b152a17451e766c6d0d785dd6c0c42c5238" translate="yes" xml:space="preserve">
          <source>The format of the read data is not specified, but if an implementation supports &lt;a href=&quot;mlet#readExternal-java.io.ObjectInput-&quot;&gt;&lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt;&lt;/a&gt; it must also support &lt;a href=&quot;mlet#writeExternal-java.io.ObjectOutput-&quot;&gt;&lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt;&lt;/a&gt; in such a way that what is written by the latter can be read by the former.</source>
          <target state="translated">読み取られたデータの形式は指定されていませんが、実装が&lt;a href=&quot;mlet#readExternal-java.io.ObjectInput-&quot;&gt; &lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt; を&lt;/a&gt;サポートしている場合、後者によって書き込まれた内容を次のように読み取れるように、&lt;a href=&quot;mlet#writeExternal-java.io.ObjectOutput-&quot;&gt; &lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt; &lt;/a&gt;もサポートする必要があります。前者。</target>
        </trans-unit>
        <trans-unit id="fbf991f65c863ce81f15c443fc068ade469b4433" translate="yes" xml:space="preserve">
          <source>The format of the returned string will be &lt;code&gt;PTnHnMnS&lt;/code&gt;, where n is the relevant hours, minutes or seconds part of the duration. Any fractional seconds are placed after a decimal point i the seconds section. If a section has a zero value, it is omitted. The hours, minutes and seconds will all have the same sign.</source>
          <target state="translated">返される文字列の形式は &lt;code&gt;PTnHnMnS&lt;/code&gt; です。nは、期間の関連する時間、分、または秒の部分です。秒の小数部は、秒セクションの小数点の後に配置されます。セクションの値がゼロの場合、セクションは省略されます。時間、分、秒はすべて同じ記号になります。</target>
        </trans-unit>
        <trans-unit id="53238208233a747f471c96749291f5b88e5e4a9d" translate="yes" xml:space="preserve">
          <source>The format of the returned string will be &lt;code&gt;PTnHnMnS&lt;/code&gt;, where n is the relevant hours, minutes or seconds part of the duration. Any fractional seconds are placed after a decimal point in the seconds section. If a section has a zero value, it is omitted. The hours, minutes and seconds will all have the same sign.</source>
          <target state="translated">返される文字列の形式は &lt;code&gt;PTnHnMnS&lt;/code&gt; になります。ここで、nは期間の関連する時間、分、または秒の部分です。分数秒は、秒セクションの小数点の後に配置されます。セクションの値がゼロの場合、そのセクションは省略されます。時間、分、秒はすべて同じ符号になります。</target>
        </trans-unit>
        <trans-unit id="f504d28c270f13a15deb747709fbbc28c2a06377" translate="yes" xml:space="preserve">
          <source>The format of the string does not correspond to a valid ObjectName.</source>
          <target state="translated">文字列の形式が有効な ObjectName に対応していません。</target>
        </trans-unit>
        <trans-unit id="a82e57a0f3938590eefb7ff1f02d1b6bdc7782e1" translate="yes" xml:space="preserve">
          <source>The format of the written data is not specified, but if an implementation supports &lt;a href=&quot;#writeExternal(java.io.ObjectOutput)&quot;&gt;&lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt;&lt;/a&gt; it must also support &lt;a href=&quot;#readExternal(java.io.ObjectInput)&quot;&gt;&lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt;&lt;/a&gt; in such a way that what is written by the former can be read by the latter.</source>
          <target state="translated">書き込まれるデータの形式は指定されていませんが、実装が&lt;a href=&quot;#writeExternal(java.io.ObjectOutput)&quot;&gt; &lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt; を&lt;/a&gt;サポートしている場合は、前者によって書き込まれたものを読み取ることができるように、&lt;a href=&quot;#readExternal(java.io.ObjectInput)&quot;&gt; &lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt; &lt;/a&gt;もサポートする必要があります。後者。</target>
        </trans-unit>
        <trans-unit id="67213f01e1e8583efbac8e7258bbba0c3fc20def" translate="yes" xml:space="preserve">
          <source>The format of the written data is not specified, but if an implementation supports &lt;a href=&quot;mlet#writeExternal-java.io.ObjectOutput-&quot;&gt;&lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt;&lt;/a&gt; it must also support &lt;a href=&quot;mlet#readExternal-java.io.ObjectInput-&quot;&gt;&lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt;&lt;/a&gt; in such a way that what is written by the former can be read by the latter.</source>
          <target state="translated">書き込まれたデータの形式は指定されていませんが、実装が&lt;a href=&quot;mlet#writeExternal-java.io.ObjectOutput-&quot;&gt; &lt;code&gt;writeExternal(java.io.ObjectOutput)&lt;/code&gt; を&lt;/a&gt;サポートしている場合は、&lt;a href=&quot;mlet#readExternal-java.io.ObjectInput-&quot;&gt; &lt;code&gt;readExternal(java.io.ObjectInput)&lt;/code&gt; &lt;/a&gt;もサポートする必要があります。後者。</target>
        </trans-unit>
        <trans-unit id="3fed849d22cdbcaabd25d1ad3dce1b48dd41d8c8" translate="yes" xml:space="preserve">
          <source>The format of this string depends on the implementation, but the following examples may be regarded as typical:</source>
          <target state="translated">この文字列の形式は実装に依存しますが、以下の例は典型的なものと考えてよいでしょう。</target>
        </trans-unit>
        <trans-unit id="f6020ce09c1e4d4ec666557878868f95d5d65fb6" translate="yes" xml:space="preserve">
          <source>The format of this string is described in the section &lt;a href=&quot;mxbean#type-names&quot;&gt;Type Names&lt;/a&gt; of the MXBean specification.</source>
          <target state="translated">この文字列の形式については、MXBean仕様の&lt;a href=&quot;mxbean#type-names&quot;&gt;タイプ名&lt;/a&gt;のセクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="e5d3b3bc4192e2a3475a44b9d2b7b65fd6277144" translate="yes" xml:space="preserve">
          <source>The format should include the entire state of the object.</source>
          <target state="translated">フォーマットには、オブジェクトの状態全体を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="c7596810905a51fecd6f83bdfab4d5540921936d" translate="yes" xml:space="preserve">
          <source>The format specifier which does not have a width</source>
          <target state="translated">幅を持たないフォーマット指定子</target>
        </trans-unit>
        <trans-unit id="043084d451c25a99dbe68ad95096051b578a0bcb" translate="yes" xml:space="preserve">
          <source>The format specifiers for general, character, and numeric types have the following syntax:</source>
          <target state="translated">一般型、文字型、数値型の書式指定子には、以下の構文があります。</target>
        </trans-unit>
        <trans-unit id="445503196824627d242ab13a02f403b7cf0ba95e" translate="yes" xml:space="preserve">
          <source>The format specifiers for types which are used to represents dates and times have the following syntax:</source>
          <target state="translated">日付と時刻を表すために使用される型の書式指定子は、以下の構文を持っています。</target>
        </trans-unit>
        <trans-unit id="1f5372c3a3d6ab4effeaec652a6cca082ace5f1a" translate="yes" xml:space="preserve">
          <source>The format specifiers which do not correspond to arguments have the following syntax:</source>
          <target state="translated">引数に対応しない書式指定子は、以下の構文を持ちます。</target>
        </trans-unit>
        <trans-unit id="578480d24c9aa71ffd93d6698d6025b396d96e7b" translate="yes" xml:space="preserve">
          <source>The format used is the same as &lt;a href=&quot;format/datetimeformatter#ISO_INSTANT&quot;&gt;&lt;code&gt;DateTimeFormatter.ISO_INSTANT&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">使用される形式は、&lt;a href=&quot;format/datetimeformatter#ISO_INSTANT&quot;&gt; &lt;code&gt;DateTimeFormatter.ISO_INSTANT&lt;/code&gt; &lt;/a&gt;と同じです。</target>
        </trans-unit>
        <trans-unit id="d30c57ca5e389c0408c9e4853695750e44db69b9" translate="yes" xml:space="preserve">
          <source>The format used will be the shortest that outputs the full value of the time where the omitted parts are implied to be zero.</source>
          <target state="translated">使用されるフォーマットは、省略された部分がゼロであることが暗示されている時間の完全な値を出力する最短のものになります。</target>
        </trans-unit>
        <trans-unit id="b5668256a561602f226996b461ed4d6a78b7620c" translate="yes" xml:space="preserve">
          <source>The format will be '{min}/{largestMin} - {smallestMax}/{max}', where the largestMin or smallestMax sections may be omitted, together with associated slash, if they are the same as the min or max.</source>
          <target state="translated">フォーマットは '{min}/{largestMin}-{smallestMax}/{max}' となります。</target>
        </trans-unit>
        <trans-unit id="ee64ee2387db8b2113be88947867bd3203a8bb2e" translate="yes" xml:space="preserve">
          <source>The formats returned by the &lt;a href=&quot;#getFormats(java.lang.String)&quot;&gt;&lt;code&gt;getFormats&lt;/code&gt;&lt;/a&gt; method and candidate locales returned by the &lt;a href=&quot;#getCandidateLocales(java.lang.String,java.util.Locale)&quot;&gt;&lt;code&gt;getCandidateLocales&lt;/code&gt;&lt;/a&gt; method must be consistent in all &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; invocations for the same base bundle. Otherwise, the &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; methods may return unintended bundles. For example, if only &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; is returned by the &lt;code&gt;getFormats&lt;/code&gt; method for the first call to &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; and only &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; for the second call, then the second call will return the class-based one that has been cached during the first call.</source>
          <target state="translated">&lt;a href=&quot;#getFormats(java.lang.String)&quot;&gt; &lt;code&gt;getFormats&lt;/code&gt; &lt;/a&gt;メソッドによって返される形式と&lt;a href=&quot;#getCandidateLocales(java.lang.String,java.util.Locale)&quot;&gt; &lt;code&gt;getCandidateLocales&lt;/code&gt; &lt;/a&gt;メソッドによって返される候補ロケールは、同じベースバンドルのすべての &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; 呼び出しで一貫している必要があります。そうしないと、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; メソッドが意図しないバンドルを返す可能性があります。たとえば、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; への最初の呼び出しで &lt;code&gt;getFormats&lt;/code&gt; メソッドによって &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; のみが返され、2番目の呼び出しで &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; のみが返される場合、2番目の呼び出しは以前のクラスベースの呼び出しを返します。最初の呼び出し中にキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="509d4cab08978635bbfa5b631cb5bb8efac09dae" translate="yes" xml:space="preserve">
          <source>The formats returned by the &lt;a href=&quot;resourcebundle.control#getFormats-java.lang.String-&quot;&gt;&lt;code&gt;getFormats&lt;/code&gt;&lt;/a&gt; method and candidate locales returned by the &lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;getCandidateLocales&lt;/code&gt;&lt;/a&gt; method must be consistent in all &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; invocations for the same base bundle. Otherwise, the &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; methods may return unintended bundles. For example, if only &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; is returned by the &lt;code&gt;getFormats&lt;/code&gt; method for the first call to &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; and only &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; for the second call, then the second call will return the class-based one that has been cached during the first call.</source>
          <target state="translated">&lt;a href=&quot;resourcebundle.control#getFormats-java.lang.String-&quot;&gt; &lt;code&gt;getFormats&lt;/code&gt; &lt;/a&gt;メソッドによって返される形式と&lt;a href=&quot;resourcebundle.control#getCandidateLocales-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;getCandidateLocales&lt;/code&gt; &lt;/a&gt;メソッドによって返される候補ロケールは、同じ基本バンドルのすべての &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; 呼び出しで一貫している必要があります。そうしないと、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; メソッドが意図しないバンドルを返す可能性があります。たとえば、 &lt;code&gt;ResourceBundle.getBundle&lt;/code&gt; への最初の呼び出しで &lt;code&gt;getFormats&lt;/code&gt; メソッドによって &lt;code&gt;&quot;java.class&quot;&lt;/code&gt; のみが返され、2番目の呼び出しで &lt;code&gt;&quot;java.properties&quot;&lt;/code&gt; のみが返された場合、2番目の呼び出しは、クラスベースの呼び出しを返します。最初の呼び出し中にキャッシュされます。</target>
        </trans-unit>
        <trans-unit id="fa01f15b0b2302f3a77b309cda420bc04d7418d1" translate="yes" xml:space="preserve">
          <source>The formatted number string</source>
          <target state="translated">フォーマットされた数値文字列</target>
        </trans-unit>
        <trans-unit id="182105ef6901365d5695117e4cfb7d169f95dc6a" translate="yes" xml:space="preserve">
          <source>The formatter will format if data is available for all the fields contained within it. The formatter will parse if the string matches, otherwise no error is returned.</source>
          <target state="translated">フォーマッタは、その中に含まれるすべてのフィールドに対してデータが利用可能かどうかをフォーマットします。フォーマッタは、文字列がマッチしていれば解析し、そうでなければエラーは返されません。</target>
        </trans-unit>
        <trans-unit id="21ba2b3731f4ac7077ca7f9e6d199abe8b38bd4c" translate="yes" xml:space="preserve">
          <source>The formatter will use the &lt;a href=&quot;../../util/locale#getDefault(java.util.Locale.Category)&quot;&gt;&lt;code&gt;default FORMAT locale&lt;/code&gt;&lt;/a&gt;. This can be changed using &lt;a href=&quot;#withLocale(java.util.Locale)&quot;&gt;&lt;code&gt;withLocale(Locale)&lt;/code&gt;&lt;/a&gt; on the returned formatter. Alternatively use the &lt;a href=&quot;#ofPattern(java.lang.String,java.util.Locale)&quot;&gt;&lt;code&gt;ofPattern(String, Locale)&lt;/code&gt;&lt;/a&gt; variant of this method.</source>
          <target state="translated">フォーマッタは&lt;a href=&quot;../../util/locale#getDefault(java.util.Locale.Category)&quot;&gt; &lt;code&gt;default FORMAT locale&lt;/code&gt; &lt;/a&gt;を使用します。これは、返されたフォーマッタで&lt;a href=&quot;#withLocale(java.util.Locale)&quot;&gt; &lt;code&gt;withLocale(Locale)&lt;/code&gt; &lt;/a&gt;を使用して変更できます。または、このメソッドの&lt;a href=&quot;#ofPattern(java.lang.String,java.util.Locale)&quot;&gt; &lt;code&gt;ofPattern(String, Locale)&lt;/code&gt; &lt;/a&gt;バリアントを使用します。</target>
        </trans-unit>
        <trans-unit id="1f3d2dba38dbe5eb07f6491258e9927edabf3d82" translate="yes" xml:space="preserve">
          <source>The formatter will use the &lt;a href=&quot;../../util/locale#getDefault-java.util.Locale.Category-&quot;&gt;&lt;code&gt;default FORMAT locale&lt;/code&gt;&lt;/a&gt;. This can be changed using &lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt;&lt;code&gt;withLocale(Locale)&lt;/code&gt;&lt;/a&gt; on the returned formatter Alternatively use the &lt;a href=&quot;datetimeformatter#ofPattern-java.lang.String-java.util.Locale-&quot;&gt;&lt;code&gt;ofPattern(String, Locale)&lt;/code&gt;&lt;/a&gt; variant of this method.</source>
          <target state="translated">フォーマッタは&lt;a href=&quot;../../util/locale#getDefault-java.util.Locale.Category-&quot;&gt; &lt;code&gt;default FORMAT locale&lt;/code&gt; &lt;/a&gt;を使用します。これは、返されたフォーマッタで&lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt; &lt;code&gt;withLocale(Locale)&lt;/code&gt; &lt;/a&gt;を使用して変更できます。または、このメソッドの&lt;a href=&quot;datetimeformatter#ofPattern-java.lang.String-java.util.Locale-&quot;&gt; &lt;code&gt;ofPattern(String, Locale)&lt;/code&gt; &lt;/a&gt;バリアントを使用します。</target>
        </trans-unit>
        <trans-unit id="93c19202124a2a46e12cd466b8761ae5ee653773" translate="yes" xml:space="preserve">
          <source>The formatter will use the specified locale. This can be changed using &lt;a href=&quot;#withLocale(java.util.Locale)&quot;&gt;&lt;code&gt;withLocale(Locale)&lt;/code&gt;&lt;/a&gt; on the returned formatter.</source>
          <target state="translated">フォーマッタは指定されたロケールを使用します。これは、返されたフォーマッタで&lt;a href=&quot;#withLocale(java.util.Locale)&quot;&gt; &lt;code&gt;withLocale(Locale)&lt;/code&gt; &lt;/a&gt;を使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="10900480441d4fb200d2493b9b165c75a96be514" translate="yes" xml:space="preserve">
          <source>The formatter will use the specified locale. This can be changed using &lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt;&lt;code&gt;withLocale(Locale)&lt;/code&gt;&lt;/a&gt; on the returned formatter</source>
          <target state="translated">フォーマッタは指定されたロケールを使用します。これは、返されたフォーマッタで&lt;a href=&quot;datetimeformatter#withLocale-java.util.Locale-&quot;&gt; &lt;code&gt;withLocale(Locale)&lt;/code&gt; &lt;/a&gt;を使用して変更できます</target>
        </trans-unit>
        <trans-unit id="b8a6884838b5d2380f0211a6d7b078af03a56063" translate="yes" xml:space="preserve">
          <source>The formatting can be customized by specifying the &lt;a href=&quot;../formatter#syntax&quot;&gt;format string&lt;/a&gt; in the &lt;a href=&quot;#formatting&quot;&gt; &lt;code&gt;java.util.logging.SimpleFormatter.format&lt;/code&gt;&lt;/a&gt; property. The given &lt;code&gt;LogRecord&lt;/code&gt; will be formatted as if by calling:</source>
          <target state="translated">フォーマットは、&lt;a href=&quot;#formatting&quot;&gt; &lt;code&gt;java.util.logging.SimpleFormatter.format&lt;/code&gt; &lt;/a&gt;プロパティで&lt;a href=&quot;../formatter#syntax&quot;&gt;フォーマット文字列&lt;/a&gt;を指定することによってカスタマイズできます。指定された &lt;code&gt;LogRecord&lt;/code&gt; は、次の呼び出しによってフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="ad810658b54468ba29faa08fbcb8a912699a741b" translate="yes" xml:space="preserve">
          <source>The formatting engine allows the positive and negative signs of numbers to be controlled using this enum. See &lt;a href=&quot;datetimeformatterbuilder&quot;&gt;&lt;code&gt;DateTimeFormatterBuilder&lt;/code&gt;&lt;/a&gt; for usage.</source>
          <target state="translated">書式設定エンジンにより、この列挙型を使用して数値の正と負の符号を制御できます。使用方法については、&lt;a href=&quot;datetimeformatterbuilder&quot;&gt; &lt;code&gt;DateTimeFormatterBuilder&lt;/code&gt; &lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f994484334957b5e0ec6abc999ce7977df9d0433" translate="yes" xml:space="preserve">
          <source>The formatting of the magnitude</source>
          <target state="translated">マグニチュードの書式設定</target>
        </trans-unit>
        <trans-unit id="bac9328bbe8404cc24578cda59316d244c5919ca" translate="yes" xml:space="preserve">
          <source>The former is used whenever a connection needs to be established or re-established with an LDAP server. The latter is used when all other LDAP operations are sent to the LDAP server. The reason why a distinction between these two types of request controls is necessary is because JNDI is a high-level API that does not deal directly with connections. It is the job of service providers to do any necessary connection management. Consequently, a single connection may be shared by multiple context instances, and a service provider is free to use its own algorithms to conserve connection and network usage. Thus, when a method is invoked on the context instance, the service provider might need to do some connection management in addition to performing the corresponding LDAP operations. For connection management, it uses the &lt;em&gt;connection request controls&lt;/em&gt;, while for the normal LDAP operations, it uses the &lt;em&gt;context request controls&lt;/em&gt;.</source>
          <target state="translated">前者は、LDAPサーバーとの接続を確立または再確立する必要がある場合に常に使用されます。後者は、他のすべてのLDAP操作がLDAPサーバーに送信されるときに使用されます。これらの2種類のリクエストコントロールを区別する必要があるのは、JNDIが接続を直接処理しない高レベルAPIであるためです。必要な接続管理を行うのはサービスプロバイダーの仕事です。その結果、単一の接続が複数のコンテキストインスタンスによって共有される可能性があり、サービスプロバイダーは独自のアルゴリズムを使用して接続とネットワークの使用を節約できます。したがって、コンテキストインスタンスでメソッドが呼び出されると、サービスプロバイダーは、対応するLDAP操作の実行に加えて、いくつかの接続管理を行う必要がある場合があります。接続管理には、&lt;em&gt;接続要求コントロール&lt;/em&gt;。通常のLDAP操作では、&lt;em&gt;コンテキスト要求コントロールを&lt;/em&gt;使用し&lt;em&gt;ます&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="394504329301f4cfe8e8f730248f4496ace33bdd" translate="yes" xml:space="preserve">
          <source>The four BoundedRangeModel values are defined as Java Beans properties however Swing ChangeEvents are used to notify clients of changes rather than PropertyChangeEvents. This was done to keep the overhead of monitoring a BoundedRangeModel low. Changes are often reported at MouseDragged rates.</source>
          <target state="translated">4 つの BoundedRangeModel の値は Java Beans のプロパティとして定義されていますが、PropertyChangeEvents ではなく Swing ChangeEvents を使用してクライアントに変更を通知しています。これは BoundedRangeModel を監視する際のオーバーヘッドを低く抑えるために行われました。変更はしばしば MouseDragged レートで報告されます。</target>
        </trans-unit>
        <trans-unit id="85e8fff89a57c7eb926b86779c8d6fafa4505803" translate="yes" xml:space="preserve">
          <source>The fourth technique, &lt;a href=&quot;#exportObject(java.rmi.Remote)&quot;&gt;&lt;code&gt;exportObject(Remote)&lt;/code&gt;&lt;/a&gt;, always uses statically generated stubs and is deprecated.</source>
          <target state="translated">4番目の手法である&lt;a href=&quot;#exportObject(java.rmi.Remote)&quot;&gt; &lt;code&gt;exportObject(Remote)&lt;/code&gt; は&lt;/a&gt;、常に静的に生成されたスタブを使用するため、非推奨になりました。</target>
        </trans-unit>
        <trans-unit id="f21520d7d456f5c00184b6c77d28a66fae2bd2ae" translate="yes" xml:space="preserve">
          <source>The fraction consists of a decimal point followed by zero or more decimal digits. The string must contain at least one digit in either the integer or the fraction. The number formed by the sign, the integer and the fraction is referred to as the</source>
          <target state="translated">分数は、小数点の後に 0 桁以上の小数点が続くもので構成されています。文字列は、整数または分数のいずれかに少なくとも1桁の数字を含まなければなりません。符号、整数、分数で構成される数値を</target>
        </trans-unit>
        <trans-unit id="6f49809e86cf974fe275860950ae0472de435862" translate="yes" xml:space="preserve">
          <source>The fractional value of the field will be output including the preceding decimal point. The preceding value is not output. For example, the second-of-minute value of 15 would be output as &lt;code&gt;.25&lt;/code&gt;.</source>
          <target state="translated">フィールドの小数値は、先行する小数点を含めて出力されます。上記の値は出力されません。たとえば、秒の値15は &lt;code&gt;.25&lt;/code&gt; として出力されます。</target>
        </trans-unit>
        <trans-unit id="d0d3ed6299aa9c75b61db9ef56cc15810b1d204f" translate="yes" xml:space="preserve">
          <source>The fragment component of a URI, if defined, only contains legal URI characters.</source>
          <target state="translated">定義されている場合、URIのフラグメントコンポーネントは、正当なURI文字のみを含む。</target>
        </trans-unit>
        <trans-unit id="a4dca7bd1432980e330331fbc13a419c4bdfb5a1" translate="yes" xml:space="preserve">
          <source>The frame can &quot;iconified&quot; (shrunk down and displayed as an icon-image).</source>
          <target state="translated">フレームを「アイコン化」(縮小してアイコン画像として表示)することができます。</target>
        </trans-unit>
        <trans-unit id="4b765e5ef70b77ceddc0138a53384918bbdda588" translate="yes" xml:space="preserve">
          <source>The frame can be closed.</source>
          <target state="translated">枠を閉じることができます。</target>
        </trans-unit>
        <trans-unit id="9a192ebb27bf51fb37c5b51a24ba55cdefbc3f8f" translate="yes" xml:space="preserve">
          <source>The frame can be expanded to the size of the desktop pane.</source>
          <target state="translated">フレームはデスクトップペインのサイズに合わせて拡大することができます。</target>
        </trans-unit>
        <trans-unit id="125ddc5cb41fd80918b88c71e89e63b542704c22" translate="yes" xml:space="preserve">
          <source>The frame has been closed.</source>
          <target state="translated">枠が閉じられました。</target>
        </trans-unit>
        <trans-unit id="6ba9312663f24328e7445d8cd559f9c8b41c3232" translate="yes" xml:space="preserve">
          <source>The frame has been expanded to its maximum size.</source>
          <target state="translated">フレームを最大サイズまで拡大しました。</target>
        </trans-unit>
        <trans-unit id="85f287b5b2d06f3a5ef24134ab32b5e0000463ca" translate="yes" xml:space="preserve">
          <source>The frame has been iconified.</source>
          <target state="translated">フレームがアイコン化されています。</target>
        </trans-unit>
        <trans-unit id="f8d9ae468a4f1456110a2e7e66aa197390c9a9ff" translate="yes" xml:space="preserve">
          <source>The frame is currently selected.</source>
          <target state="translated">現在、フレームが選択されています。</target>
        </trans-unit>
        <trans-unit id="c7f4264dce9f2570469b4b2805c4cd518e8c6b78" translate="yes" xml:space="preserve">
          <source>The frame's size can be changed.</source>
          <target state="translated">フレームのサイズを変更することができます。</target>
        </trans-unit>
        <trans-unit id="b045361cfaffd0cd8b7868eeb08d022948c4e3dd" translate="yes" xml:space="preserve">
          <source>The full detail message</source>
          <target state="translated">充実した詳細メッセージ</target>
        </trans-unit>
        <trans-unit id="6e6af340438b798b4af65334c20b15a8a6ab7f82" translate="yes" xml:space="preserve">
          <source>The full name of this binding.</source>
          <target state="translated">この装丁のフルネーム。</target>
        </trans-unit>
        <trans-unit id="98e139129d3d144948d18b386c2a063173376f20" translate="yes" xml:space="preserve">
          <source>The full sequence of all iteration variable types, in clause order, will be notated as &lt;code&gt;(V...)&lt;/code&gt;. The values themselves will be &lt;code&gt;(v...)&lt;/code&gt;. When we speak of &quot;parameter lists&quot;, we will usually be referring to types, but in some contexts (describing execution) the lists will be of actual values.</source>
          <target state="translated">すべての反復変数タイプの完全なシーケンスは、句の順序で、 &lt;code&gt;(V...)&lt;/code&gt; と表記されます。値自体は &lt;code&gt;(v...)&lt;/code&gt; ます。「パラメータリスト」について話すとき、通常は型を参照しますが、一部のコンテキスト（実行を説明する）では、リストは実際の値になります。</target>
        </trans-unit>
        <trans-unit id="e2e8ad3cad9cd9a7c5ceff9a5d59565630dc6be2" translate="yes" xml:space="preserve">
          <source>The full set of mixer info objects that represent the mixers supported by this &lt;code&gt;MixerProvider&lt;/code&gt; may be obtained through the &lt;code&gt;getMixerInfo&lt;/code&gt; method.</source>
          <target state="translated">この &lt;code&gt;MixerProvider&lt;/code&gt; によってサポートされるミキサーを表すミキサー情報オブジェクトの完全なセットは、 &lt;code&gt;getMixerInfo&lt;/code&gt; メソッドを介して取得できます。</target>
        </trans-unit>
        <trans-unit id="045b6c4a34c997a5ff03677d71a427fd8c213949" translate="yes" xml:space="preserve">
          <source>The full set of the mixer info objects that represent the mixers supported by this &lt;code&gt;MixerProvider&lt;/code&gt; may be obtained through the &lt;code&gt;getMixerInfo&lt;/code&gt; method. Use the &lt;code&gt;isMixerSupported&lt;/code&gt; method to test whether this &lt;code&gt;MixerProvider&lt;/code&gt; supports a particular mixer.</source>
          <target state="translated">この &lt;code&gt;MixerProvider&lt;/code&gt; によってサポートされるミキサーを表すミキサー情報オブジェクトの完全なセットは、 &lt;code&gt;getMixerInfo&lt;/code&gt; メソッドを介して取得できます。 &lt;code&gt;isMixerSupported&lt;/code&gt; メソッドを使用して、この &lt;code&gt;MixerProvider&lt;/code&gt; が特定のミキサーをサポートしているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="ad817d15b58554f4b61df06c705ec9574cb8b3e5" translate="yes" xml:space="preserve">
          <source>The fully qualified class name of the module's main class</source>
          <target state="translated">モジュールのメインクラスの完全修飾クラス名</target>
        </trans-unit>
        <trans-unit id="48ad991d9dc4396060b69a71c3db1cc7e1ece97f" translate="yes" xml:space="preserve">
          <source>The fully qualified class name of the service type</source>
          <target state="translated">サービスタイプの完全修飾クラス名</target>
        </trans-unit>
        <trans-unit id="75e634abd512af1008080e4c7a639343ae697365" translate="yes" xml:space="preserve">
          <source>The fully qualified directory name where the MBean should be persisted (if appropriate).</source>
          <target state="translated">MBean が保持されるべき完全修飾ディレクトリ名 (必要に応じて)。</target>
        </trans-unit>
        <trans-unit id="de074ad56ac8abd4797277639691ef7de662d175" translate="yes" xml:space="preserve">
          <source>The fully qualified name of a named package that is not a subpackage of a named package is its simple name. The fully qualified name of a named package that is a subpackage of another named package consists of the fully qualified name of the containing package, followed by &quot;&lt;code&gt;.&lt;/code&gt;&quot;, followed by the simple (member) name of the subpackage.</source>
          <target state="translated">名前付きパッケージのサブパッケージではない名前付きパッケージの完全修飾名は、その単純な名前です。別の名前付きパッケージのサブパッケージである名前付きパッケージの完全修飾名は、含まれているパッケージの完全修飾名、「 &lt;code&gt;.&lt;/code&gt; 」、サブパッケージの単純（メンバー）名で構成されます。</target>
        </trans-unit>
        <trans-unit id="f08d6d7401fc9ae382da885fdc61f3b1d5cf0c2d" translate="yes" xml:space="preserve">
          <source>The fully-qualified name of this package as defined in section 6.5.3 of</source>
          <target state="translated">の 6.5.3 節で定義されているこのパッケージの完全修飾名。</target>
        </trans-unit>
        <trans-unit id="322b80361dc210bb26cb16137caf000fff8d9ec3" translate="yes" xml:space="preserve">
          <source>The function &lt;code&gt;MethodHandles.lookup&lt;/code&gt; is caller sensitive so that there can be a secure foundation for lookups. Nearly all other methods in the JSR 292 API rely on lookup objects to check access requests.</source>
          <target state="translated">関数 &lt;code&gt;MethodHandles.lookup&lt;/code&gt; は呼び出し側に依存しているため、ルックアップの安全な基盤を確立できます。JSR 292 APIの他のほぼすべてのメソッドは、アクセス要求のチェックをルックアップオブジェクトに依存しています。</target>
        </trans-unit>
        <trans-unit id="e1b22103686230dfe40dc275e38134fd2ece6c00" translate="yes" xml:space="preserve">
          <source>The function or &lt;code&gt;null&lt;/code&gt; if no function named &lt;code&gt;functionName&lt;/code&gt; with &lt;code&gt;arity&lt;/code&gt; arguments exists.</source>
          <target state="translated">関数。 &lt;code&gt;arity&lt;/code&gt; 引数を持つfunctionNameという名前の &lt;code&gt;functionName&lt;/code&gt; が存在しない場合は &lt;code&gt;null&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2e8bd4442f494c93af0ed558dac52300d861f27" translate="yes" xml:space="preserve">
          <source>The function's first argument allows the current &lt;code&gt;SSLEngine&lt;/code&gt; to be inspected, including the handshake session and configuration settings.</source>
          <target state="translated">関数の最初の引数により、ハンドシェイクセッションや構成設定など、現在の &lt;code&gt;SSLEngine&lt;/code&gt; を検査できます。</target>
        </trans-unit>
        <trans-unit id="7086d9d8c6a0eb4040856e463d1b8e6e73d6091a" translate="yes" xml:space="preserve">
          <source>The function's first argument allows the current &lt;code&gt;SSLSocket&lt;/code&gt; to be inspected, including the handshake session and configuration settings.</source>
          <target state="translated">関数の最初の引数により、ハンドシェイクセッションや構成設定など、現在の &lt;code&gt;SSLSocket&lt;/code&gt; を検査できます。</target>
        </trans-unit>
        <trans-unit id="21a650b8a755f38564eadb7914f668f808be338c" translate="yes" xml:space="preserve">
          <source>The function's result is an application protocol name, or null to indicate that none of the advertised names are acceptable. If the return value is an empty &lt;code&gt;String&lt;/code&gt; then application protocol indications will not be used. If the return value is null (no value chosen) or is a value that was not advertised by the peer, the underlying protocol will determine what action to take. (For example, ALPN will send a &quot;no_application_protocol&quot; alert and terminate the connection.)</source>
          <target state="translated">関数の結果は、アプリケーションプロトコル名、またはアドバタイズされた名前のいずれも受け入れられないことを示すnullです。戻り値が空の &lt;code&gt;String&lt;/code&gt; 場合、アプリケーションプロトコルの指示は使用されません。戻り値がnull（値が選択されていない）であるか、ピアによってアドバタイズされなかった値である場合、基礎となるプロトコルが実行するアクションを決定します。（たとえば、ALPNは「no_application_protocol」アラートを送信し、接続を終了します。）</target>
        </trans-unit>
        <trans-unit id="049e9803ce4c318a041efa39ffa0357125f7cb2e" translate="yes" xml:space="preserve">
          <source>The function's second argument lists the application protocol names advertised by the TLS peer.</source>
          <target state="translated">この関数の第 2 引数には、TLS ピアがアドバタイズしたアプリケーションプロトコル名をリストアップします。</target>
        </trans-unit>
        <trans-unit id="7b75d2f564388e2749324f7684de8741790d40b7" translate="yes" xml:space="preserve">
          <source>The functional interfaces in this package follow an extensible naming convention, as follows:</source>
          <target state="translated">本パッケージの機能インタフェースは、以下のように拡張可能な命名規則に従います。</target>
        </trans-unit>
        <trans-unit id="7f14c8b36482cb555ef9a0ced1041ea27c6b22e5" translate="yes" xml:space="preserve">
          <source>The functionality has been migrated into &lt;code&gt;ItemHandler&lt;/code&gt;.</source>
          <target state="translated">機能は &lt;code&gt;ItemHandler&lt;/code&gt; に移行されました。</target>
        </trans-unit>
        <trans-unit id="ce5bd4822dc4a170ef833d344202fd62505c6b26" translate="yes" xml:space="preserve">
          <source>The functionality of this interface is duplicated by the &lt;a href=&quot;iterator&quot;&gt;&lt;code&gt;Iterator&lt;/code&gt;&lt;/a&gt; interface. In addition, &lt;code&gt;Iterator&lt;/code&gt; adds an optional remove operation, and has shorter method names. New implementations should consider using &lt;code&gt;Iterator&lt;/code&gt; in preference to &lt;code&gt;Enumeration&lt;/code&gt;. It is possible to adapt an &lt;code&gt;Enumeration&lt;/code&gt; to an &lt;code&gt;Iterator&lt;/code&gt; by using the &lt;a href=&quot;#asIterator()&quot;&gt;&lt;code&gt;asIterator()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">このインターフェースの機能は、&lt;a href=&quot;iterator&quot;&gt; &lt;code&gt;Iterator&lt;/code&gt; &lt;/a&gt;インターフェースによって複製されます。さらに、 &lt;code&gt;Iterator&lt;/code&gt; はオプションの削除操作を追加し、メソッド名を短くしています。新しい実装では、 &lt;code&gt;Enumeration&lt;/code&gt; &lt;code&gt;Iterator&lt;/code&gt; 使用を検討する必要があります。&lt;a href=&quot;#asIterator()&quot;&gt; &lt;code&gt;asIterator()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、 &lt;code&gt;Enumeration&lt;/code&gt; を &lt;code&gt;Iterator&lt;/code&gt; に適合させることができます。</target>
        </trans-unit>
        <trans-unit id="fd1adb1c6cdaf34899213972486b61cb86d4b763" translate="yes" xml:space="preserve">
          <source>The fundamental notion of the JMX API is the &lt;em&gt;MBean&lt;/em&gt;. An MBean is a named &lt;em&gt;managed object&lt;/em&gt; representing a resource. It has a &lt;em id=&quot;mgIface&quot;&gt;management interface&lt;/em&gt; which must be &lt;em&gt;public&lt;/em&gt; and consist of:</source>
          <target state="translated">JMX APIの基本的な概念は&lt;em&gt;MBean&lt;/em&gt;です。MBeanは、リソースを表す名前付きの&lt;em&gt;管理対象オブジェクト&lt;/em&gt;です。これは、&lt;em&gt;パブリック&lt;/em&gt;でなければならず、以下で構成される&lt;em id=&quot;mgIface&quot;&gt;管理インターフェース&lt;/em&gt;を&lt;em id=&quot;mgIface&quot;&gt;備えて&lt;/em&gt;い&lt;em id=&quot;mgIface&quot;&gt;ます&lt;/em&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="affa9a95efd7c99562b168220dc0b3a62ddadab8" translate="yes" xml:space="preserve">
          <source>The fuser temperature is above normal.</source>
          <target state="translated">フューザーの温度が正常値を超えています。</target>
        </trans-unit>
        <trans-unit id="b432c989f957660cc61cab309227c58b52d723b4" translate="yes" xml:space="preserve">
          <source>The fuser temperature is below normal.</source>
          <target state="translated">フューザーの温度が正常値を下回っています。</target>
        </trans-unit>
        <trans-unit id="ba25e2a915ceb047c917b9ea9787ccdd3cac6068" translate="yes" xml:space="preserve">
          <source>The gap between the text and the icon.</source>
          <target state="translated">テキストとアイコンの間の隙間。</target>
        </trans-unit>
        <trans-unit id="d165af52d9801f2b9c6ca7bc842ffcb4a3efd77c" translate="yes" xml:space="preserve">
          <source>The general contract for the &lt;code&gt;Object.equals&lt;/code&gt; method states that equals must be symmetric (in other words, &lt;code&gt;a.equals(b)&lt;/code&gt; if and only if &lt;code&gt;b.equals(a)&lt;/code&gt;). The contracts for &lt;code&gt;List.equals&lt;/code&gt; and &lt;code&gt;Set.equals&lt;/code&gt; state that lists are only equal to other lists, and sets to other sets. Thus, a custom &lt;code&gt;equals&lt;/code&gt; method for a collection class that implements neither the &lt;code&gt;List&lt;/code&gt; nor &lt;code&gt;Set&lt;/code&gt; interface must return &lt;code&gt;false&lt;/code&gt; when this collection is compared to any list or set. (By the same logic, it is not possible to write a class that correctly implements both the &lt;code&gt;Set&lt;/code&gt; and &lt;code&gt;List&lt;/code&gt; interfaces.)</source>
          <target state="translated">&lt;code&gt;Object.equals&lt;/code&gt; メソッドの一般規約では、equalsは対称でなければならない（つまり、 &lt;code&gt;a.equals(b)&lt;/code&gt; 場合に限り、a.equals（b）でなければならない）と &lt;code&gt;b.equals(a)&lt;/code&gt; ます。契約 &lt;code&gt;List.equals&lt;/code&gt; と &lt;code&gt;Set.equals&lt;/code&gt; リストは唯一の他のセットに他のリスト、およびセットに等しくされている状態。したがって、 &lt;code&gt;List&lt;/code&gt; と &lt;code&gt;Set&lt;/code&gt; のどちらのインターフェースも実装していないコレクションクラスのカスタムの &lt;code&gt;equals&lt;/code&gt; メソッドは、このコレクションがリストまたはセットと比較されるときに &lt;code&gt;false&lt;/code&gt; を返す必要があります。 （同じロジックでは、 &lt;code&gt;Set&lt;/code&gt; インターフェースと &lt;code&gt;List&lt;/code&gt; インターフェースの両方を正しく実装するクラスを作成することはできません。）</target>
        </trans-unit>
        <trans-unit id="4e6457a04a192222364a3fdd43c4856716671752" translate="yes" xml:space="preserve">
          <source>The general contract is that if you need to change the size of the &lt;code&gt;Component&lt;/code&gt;, or location of the &lt;code&gt;Popup&lt;/code&gt;, you should obtain a new &lt;code&gt;Popup&lt;/code&gt;.</source>
          <target state="translated">一般的な契約では、 &lt;code&gt;Component&lt;/code&gt; のサイズ、または &lt;code&gt;Popup&lt;/code&gt; 場所を変更する必要がある場合は、新しい &lt;code&gt;Popup&lt;/code&gt; を取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="a5cdfce9e4b05d212da94fe95d771caea20d5dc9" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;finalize&lt;/code&gt; is that it is invoked if and when the Java&amp;trade; virtual machine has determined that there is no longer any means by which this object can be accessed by any thread that has not yet died, except as a result of an action taken by the finalization of some other object or class which is ready to be finalized. The &lt;code&gt;finalize&lt;/code&gt; method may take any action, including making this object available again to other threads; the usual purpose of &lt;code&gt;finalize&lt;/code&gt;, however, is to perform cleanup actions before the object is irrevocably discarded. For example, the finalize method for an object that represents an input/output connection might perform explicit I/O transactions to break the connection before the object is permanently discarded.</source>
          <target state="translated">&lt;code&gt;finalize&lt;/code&gt; の一般的な規約は、アクションの結果を除いて、Java&amp;trade;仮想マシンが、まだ死んでいないスレッドがこのオブジェクトにアクセスできる手段がないと判断した場合に呼び出されます。ファイナライズの準備ができている他のオブジェクトまたはクラスのファイナライズによって取得されます。 &lt;code&gt;finalize&lt;/code&gt; 方法は、他のスレッドに再び、このオブジェクトを利用可能にするなど、任意のアクションをとることができます。ただし、 &lt;code&gt;finalize&lt;/code&gt; の通常の目的は、オブジェクトが取り返しのつかないほど破棄される前にクリーンアップアクションを実行することです。たとえば、入出力接続を表すオブジェクトのfinalizeメソッドは、明示的なI / Oトランザクションを実行して、オブジェクトが完全に破棄される前に接続を切断する場合があります。</target>
        </trans-unit>
        <trans-unit id="edb9c7d88cc1ce8aa97ce8fb3d5a87c01fd408d1" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;hashCode&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;hashCode&lt;/code&gt; の一般的な規約は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0d0761a5d4d4cfe1bb133ae32ec4751724e2ff9b" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;mark&lt;/code&gt; is that, if the method &lt;code&gt;markSupported&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, the stream somehow remembers all the bytes read after the call to &lt;code&gt;mark&lt;/code&gt; and stands ready to supply those same bytes again if and whenever the method &lt;code&gt;reset&lt;/code&gt; is called. However, the stream is not required to remember any data at all if more than &lt;code&gt;readlimit&lt;/code&gt; bytes are read from the stream before &lt;code&gt;reset&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;mark&lt;/code&gt; の一般的な規約では、メソッド &lt;code&gt;markSupported&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返す場合、ストリームは &lt;code&gt;mark&lt;/code&gt; の呼び出し後に読み取られたすべてのバイトを何らかの形で記憶し、メソッドの &lt;code&gt;reset&lt;/code&gt; が呼び出された場合はいつでも同じバイトを再び供給する準備ができています。ただし、 &lt;code&gt;reset&lt;/code&gt; が呼び出される前にストリームから &lt;code&gt;readlimit&lt;/code&gt; バイトを超えて読み取られた場合、ストリームはデータをまったく記憶する必要はありません。</target>
        </trans-unit>
        <trans-unit id="78814a25bae5a1e5785d20a4fef6c1ed9141d5cb" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;next&lt;/code&gt; is that it returns an &lt;code&gt;int&lt;/code&gt; value and if the argument &lt;code&gt;bits&lt;/code&gt; is between &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;32&lt;/code&gt; (inclusive), then that many low-order bits of the returned value will be (approximately) independently chosen bit values, each of which is (approximately) equally likely to be &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt;. The method &lt;code&gt;next&lt;/code&gt; is implemented by class &lt;code&gt;Random&lt;/code&gt; by atomically updating the seed to</source>
          <target state="translated">一般的な契約 &lt;code&gt;next&lt;/code&gt; 、それが返すことである &lt;code&gt;int&lt;/code&gt; 型の値を、引数の場合に &lt;code&gt;bits&lt;/code&gt; 間にある &lt;code&gt;1&lt;/code&gt; 及び &lt;code&gt;32&lt;/code&gt; これらの各々 、独立して選択されたビット値を（含む）、返される値の多くの下位ビットが（ほぼ）になることは（ほぼ） &lt;code&gt;0&lt;/code&gt; または &lt;code&gt;1&lt;/code&gt; に等しくなる可能性があります。 &lt;code&gt;next&lt;/code&gt; のメソッドは、シードをアトミ​​ックに更新することにより、クラス &lt;code&gt;Random&lt;/code&gt; によって実装されます。</target>
        </trans-unit>
        <trans-unit id="3a2499a7d19b1785e56ca1842106c833aeadeaff" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;nextDouble&lt;/code&gt; is that one &lt;code&gt;double&lt;/code&gt; value, chosen (approximately) uniformly from the range &lt;code&gt;0.0d&lt;/code&gt; (inclusive) to &lt;code&gt;1.0d&lt;/code&gt; (exclusive), is pseudorandomly generated and returned.</source>
          <target state="translated">&lt;code&gt;nextDouble&lt;/code&gt; の一般規約では、 &lt;code&gt;0.0d&lt;/code&gt; （両端を含む）から &lt;code&gt;1.0d&lt;/code&gt; （両端を含まない）の範囲から（ほぼ）一様に選択された1つの &lt;code&gt;double&lt;/code&gt; 値が擬似ランダムに生成されて返されます。</target>
        </trans-unit>
        <trans-unit id="33e5522f2cf381304bb4acc1f444b2ec6731ffff" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;nextFloat&lt;/code&gt; is that one &lt;code&gt;float&lt;/code&gt; value, chosen (approximately) uniformly from the range &lt;code&gt;0.0f&lt;/code&gt; (inclusive) to &lt;code&gt;1.0f&lt;/code&gt; (exclusive), is pseudorandomly generated and returned. All 2&lt;sup&gt;24&lt;/sup&gt; possible &lt;code&gt;float&lt;/code&gt; values of the form</source>
          <target state="translated">&lt;code&gt;nextFloat&lt;/code&gt; の一般的な規約は、 &lt;code&gt;0.0f&lt;/code&gt; （両端を含む）から &lt;code&gt;1.0f&lt;/code&gt; （両端を含まない）の範囲から（ほぼ）一様に選択された1つの &lt;code&gt;float&lt;/code&gt; 値が擬似ランダムに生成されて返されることです。フォームの2 &lt;sup&gt;24の&lt;/sup&gt;すべての可能な &lt;code&gt;float&lt;/code&gt; 値&lt;sup&gt;&lt;/sup&gt;</target>
        </trans-unit>
        <trans-unit id="a6108c9c3bb11e8358e1337d11fb7dd99c819fca" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;nextGaussian&lt;/code&gt; is that one &lt;code&gt;double&lt;/code&gt; value, chosen from (approximately) the usual normal distribution with mean &lt;code&gt;0.0&lt;/code&gt; and standard deviation &lt;code&gt;1.0&lt;/code&gt;, is pseudorandomly generated and returned.</source>
          <target state="translated">&lt;code&gt;nextGaussian&lt;/code&gt; の一般的な規約は、平均 &lt;code&gt;0.0&lt;/code&gt; および標準偏差 &lt;code&gt;1.0&lt;/code&gt; の通常の正規分布から選択された1つの &lt;code&gt;double&lt;/code&gt; 値が擬似ランダムに生成されて返されることです。</target>
        </trans-unit>
        <trans-unit id="a39c42a97f8cc2bfa84444b9a77fa5e02fd465b3" translate="yes" xml:space="preserve">
          <source>The general contract of &lt;code&gt;reset&lt;/code&gt; is:</source>
          <target state="translated">&lt;code&gt;reset&lt;/code&gt; の一般的な契約は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b12c78c2fa8a5ae02abd10ed060377fad12b602d" translate="yes" xml:space="preserve">
          <source>The general contract of the method &lt;code&gt;run&lt;/code&gt; is that it may take any action whatsoever.</source>
          <target state="translated">メソッド &lt;code&gt;run&lt;/code&gt; の一般的な規約は、それがどんなアクションをとってもよいということです。</target>
        </trans-unit>
        <trans-unit id="7b26618e1345d461e2aa57cbd21c3a074e197e40" translate="yes" xml:space="preserve">
          <source>The general format for specifying the</source>
          <target state="translated">を指定するための一般的なフォーマットは</target>
        </trans-unit>
        <trans-unit id="836684afab62f49f45418668a259cd352042272e" translate="yes" xml:space="preserve">
          <source>The generator function takes an integer, which is the size of the desired array, and produces an array of the desired size. This can be concisely expressed with an array constructor reference:</source>
          <target state="translated">ジェネレータ関数は,希望する配列のサイズである整数を受け取り,希望するサイズの配列を生成します.これは,配列コンストラクタの参照を用いて簡潔に表現することができます.</target>
        </trans-unit>
        <trans-unit id="22988a82c700434c5bff9a5cb2087e4845138282" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;Exception&lt;/code&gt; class for the Scripting APIs.</source>
          <target state="translated">スクリプトAPI の一般 &lt;code&gt;Exception&lt;/code&gt; なExceptionクラス。</target>
        </trans-unit>
        <trans-unit id="50eca365888aa60e1583460ae7dbd0f1387e5760" translate="yes" xml:space="preserve">
          <source>The generic &lt;code&gt;Exception&lt;/code&gt; class for the Scripting APIs. Checked exception types thrown by underlying scripting implementations must be wrapped in instances of &lt;code&gt;ScriptException&lt;/code&gt;. The class has members to store line and column numbers and filenames if this information is available.</source>
          <target state="translated">スクリプトAPI の一般 &lt;code&gt;Exception&lt;/code&gt; なExceptionクラス。基礎となるスクリプト実装によってスローされたチェック済み例外タイプは、 &lt;code&gt;ScriptException&lt;/code&gt; のインスタンスでラップする必要があります。この情報が利用可能な場合、クラスには行と列の番号とファイル名を格納するメンバーがあります。</target>
        </trans-unit>
        <trans-unit id="34d751203fcfaae4c2dcf23fd2c630ff3255ac97" translate="yes" xml:space="preserve">
          <source>The generics mechanism in the language provides compile-time (static) type checking, but it is possible to defeat this mechanism with unchecked casts. Usually this is not a problem, as the compiler issues warnings on all such unchecked operations. There are, however, times when static type checking alone is not sufficient. For example, suppose a collection is passed to a third-party library and it is imperative that the library code not corrupt the collection by inserting an element of the wrong type.</source>
          <target state="translated">この言語のジェネリック機構はコンパイル時の(静的な)型チェックを提供していますが、チェックされていないキャストでこの機構を破ることができます。通常、このようなチェックされていない操作に対してコンパイラが警告を出すので、これは問題ではありません。しかし、静的な型チェックだけでは十分ではない場合もあります。例えば、コレクションがサードパーティのライブラリに渡され、ライブラリ・コードが間違った型の要素を挿入してコレクションを破損させないようにする必要があるとします。</target>
        </trans-unit>
        <trans-unit id="9658cbf453cc4becc4cbe8333437594fe45f326f" translate="yes" xml:space="preserve">
          <source>The geometry of the path describing the outline of the &lt;code&gt;Area&lt;/code&gt; resembles the path from which it was constructed only in that it describes the same enclosed 2-dimensional area, but may use entirely different types and ordering of the path segments to do so.</source>
          <target state="translated">&lt;code&gt;Area&lt;/code&gt; の輪郭を表すパスのジオメトリは、同じ囲まれた2次元エリアを表すという点でのみ構築されたパスに似ていますが、パスセグメントのタイプと順序がまったく異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="f01b6abf45568cc54379123db1fec2168778ddd6" translate="yes" xml:space="preserve">
          <source>The gesture itself moves a logical cursor across the GUI hierarchy, intersecting the geometry of GUI Component(s), possibly resulting in the logical &quot;Drag&quot; cursor entering, crossing, and subsequently leaving &lt;code&gt;Component&lt;/code&gt;(s) and associated &lt;code&gt;DropTarget&lt;/code&gt;(s).</source>
          <target state="translated">ジェスチャ自体が論理カーソルをGUI階層全体に移動し、GUIコンポーネントのジオメトリと交差します。その結果、論理「ドラッグ」カーソルが &lt;code&gt;Component&lt;/code&gt; および関連する &lt;code&gt;DropTarget&lt;/code&gt; に出入りする可能性があります。</target>
        </trans-unit>
        <trans-unit id="b84c57928a61b40849f4e1f7b954f80ed5345f78" translate="yes" xml:space="preserve">
          <source>The gesture of clicking on a button with the mouse is associated with one instance of &lt;code&gt;ActionEvent&lt;/code&gt;, which is sent out when the mouse is both pressed and released over the button. If an application is interested in knowing when the button has been pressed but not released, as a separate gesture, it can specialize &lt;code&gt;processMouseEvent&lt;/code&gt;, or it can register itself as a listener for mouse events by calling &lt;code&gt;addMouseListener&lt;/code&gt;. Both of these methods are defined by &lt;code&gt;Component&lt;/code&gt;, the abstract superclass of all components.</source>
          <target state="translated">マウスでボタンをクリックするジェスチャは、 &lt;code&gt;ActionEvent&lt;/code&gt; の1つのインスタンスに関連付けられています。これは、マウスがボタン上で押されて離されたときに送信されます。アプリケーションがボタンが押されたが離されていないことを知りたい場合は、別のジェスチャとして、 &lt;code&gt;processMouseEvent&lt;/code&gt; を特殊化するか、 &lt;code&gt;addMouseListener&lt;/code&gt; を呼び出してマウスイベントのリスナーとして登録することができます。これらのメソッドは両方とも、すべてのコンポーネントの抽象スーパークラスである &lt;code&gt;Component&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="bd897795698de01db8d036abb2bef2cd803f0353" translate="yes" xml:space="preserve">
          <source>The getEncoding method will return the character encoding for this byte stream, or null if unknown.</source>
          <target state="translated">getEncoding メソッドは、このバイトストリームの文字エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="7b219cbe102fff1dda6092b063119870bd86478d" translate="yes" xml:space="preserve">
          <source>The getEncoding method will return the character encoding of the object pointed to, or null if unknown.</source>
          <target state="translated">getEncodingメソッドは、指されたオブジェクトの文字エンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="a5cbbe75fcc96cb9452f9a6c7c0c548318b820d6" translate="yes" xml:space="preserve">
          <source>The getKeyChar method always returns a valid Unicode character or CHAR_UNDEFINED. Character input is reported by KEY_TYPED events: KEY_PRESSED and KEY_RELEASED events are not necessarily associated with character input. Therefore, the result of the getKeyChar method is guaranteed to be meaningful only for KEY_TYPED events.</source>
          <target state="translated">getKeyCharメソッドは常に有効なUnicode文字またはCHAR_UNDEFINEDを返します。文字入力は KEY_TYPED イベントによって報告されます。KEY_PRESSED イベントと KEY_RELEASED イベントは必ずしも文字入力に関連するものではありません。そのため、getKeyCharメソッドの結果は、KEY_TYPEDイベントでのみ意味を持つことが保証されています。</target>
        </trans-unit>
        <trans-unit id="17607035e1067bccfbdc24ec6f6fef5ac0edd8c8" translate="yes" xml:space="preserve">
          <source>The getter methods all require the key as an argument and return the object if found. If the object is not found, the getter method throws a &lt;code&gt;MissingResourceException&lt;/code&gt;.</source>
          <target state="translated">getterメソッドはすべて、引数としてキーを必要とし、見つかった場合はオブジェクトを返します。オブジェクトが見つからない場合、getterメソッドは &lt;code&gt;MissingResourceException&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="f32be84888915ac3aac8f3a538a2b7e9bb3c96a3" translate="yes" xml:space="preserve">
          <source>The getter methods may &lt;a href=&quot;messager#printMessage(javax.tools.Diagnostic.Kind,java.lang.CharSequence)&quot;&gt;issue warnings&lt;/a&gt; about noteworthy conditions using the facilities available after the processor has been &lt;a href=&quot;#isInitialized()&quot;&gt;initialized&lt;/a&gt;.</source>
          <target state="translated">getterメソッドは、プロセッサが&lt;a href=&quot;#isInitialized()&quot;&gt;初期化&lt;/a&gt;された後に使用可能な機能を使用して、注目すべき状態&lt;a href=&quot;messager#printMessage(javax.tools.Diagnostic.Kind,java.lang.CharSequence)&quot;&gt;に関する警告を発行&lt;/a&gt;する場合があります。</target>
        </trans-unit>
        <trans-unit id="f1838c464e5ae39d5db0e960e217af9f7c2dcff4" translate="yes" xml:space="preserve">
          <source>The getter methods may &lt;a href=&quot;messager#printMessage-javax.tools.Diagnostic.Kind-java.lang.CharSequence-&quot;&gt;issue warnings&lt;/a&gt; about noteworthy conditions using the facilities available after the processor has been &lt;a href=&quot;abstractprocessor#isInitialized--&quot;&gt;initialized&lt;/a&gt;.</source>
          <target state="translated">getterメソッドは、プロセッサが&lt;a href=&quot;abstractprocessor#isInitialized--&quot;&gt;初期化&lt;/a&gt;された後に利用可能な機能を使用して、注目すべき条件について&lt;a href=&quot;messager#printMessage-javax.tools.Diagnostic.Kind-java.lang.CharSequence-&quot;&gt;警告を発行&lt;/a&gt;する場合があります。</target>
        </trans-unit>
        <trans-unit id="c8bbd09e2f9282fab1c5b17105f5168116e9943f" translate="yes" xml:space="preserve">
          <source>The getter names.</source>
          <target state="translated">ゲッターの名前。</target>
        </trans-unit>
        <trans-unit id="28b39e17a1484aedf1c82694acf5dc8fcf9dab78" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;contentLength&lt;/code&gt; is a positive number, that represents the exact amount of bytes the &lt;code&gt;publisher&lt;/code&gt; must publish.</source>
          <target state="translated">指定された &lt;code&gt;contentLength&lt;/code&gt; は正の数であり、 &lt;code&gt;publisher&lt;/code&gt; が公開する必要のある正確なバイト数を表します。</target>
        </trans-unit>
        <trans-unit id="e73a3a7a5d43775c4405ff5d0d8213179aa8eabb" translate="yes" xml:space="preserve">
          <source>The given &lt;code&gt;finisher&lt;/code&gt; function is applied after the given subscriber's &lt;code&gt;onComplete&lt;/code&gt; has been invoked. The &lt;code&gt;finisher&lt;/code&gt; function is invoked with the given subscriber, and returns a value that is set as the response's body.</source>
          <target state="translated">指定された &lt;code&gt;finisher&lt;/code&gt; 関数は、指定されたサブスクライバーの &lt;code&gt;onComplete&lt;/code&gt; が呼び出された後に適用されます。 &lt;code&gt;finisher&lt;/code&gt; 関数は、指定された加入者で起動し、応答のボディとして設定された値を返しています。</target>
        </trans-unit>
        <trans-unit id="ee07db4a9afb88d70f978c9557d54a36e2844c3a" translate="yes" xml:space="preserve">
          <source>The given Graphics object will have the default font, color, etc of the parent container. The PropertyEditor may change graphics attributes such as font and color and doesn't need to restore the old values.</source>
          <target state="translated">与えられたグラフィックスオブジェクトは、親コンテナのデフォルトのフォントや色などを持ちます。PropertyEditor は、フォントや色などのグラフィックス属性を変更することができ、古い値を復元する必要はありません。</target>
        </trans-unit>
        <trans-unit id="80e16f59801b09178472236065c0402723fad16a" translate="yes" xml:space="preserve">
          <source>The given Java object will be converted to the given targetSqlType before being sent to the database. If the object has a custom mapping (is of a class implementing the interface &lt;code&gt;SQLData&lt;/code&gt;), the JDBC driver should call the method &lt;code&gt;SQLData.writeSQL&lt;/code&gt; to write it to the SQL data stream. If, on the other hand, the object is of a class implementing &lt;code&gt;Ref&lt;/code&gt;, &lt;code&gt;Blob&lt;/code&gt;, &lt;code&gt;Clob&lt;/code&gt;, &lt;code&gt;NClob&lt;/code&gt;, &lt;code&gt;Struct&lt;/code&gt;, &lt;code&gt;java.net.URL&lt;/code&gt;, or &lt;code&gt;Array&lt;/code&gt;, the driver should pass it to the database as a value of the corresponding SQL type.</source>
          <target state="translated">指定されたJavaオブジェクトは、データベースに送信される前に、指定されたtargetSqlTypeに変換されます。オブジェクトにカスタムマッピングがある場合（インターフェイス &lt;code&gt;SQLData&lt;/code&gt; を実装するクラスのものである場合）、JDBCドライバーはメソッド &lt;code&gt;SQLData.writeSQL&lt;/code&gt; を呼び出して、SQLデータストリームに書き込む必要があります。一方、オブジェクトが &lt;code&gt;Ref&lt;/code&gt; 、 &lt;code&gt;Blob&lt;/code&gt; 、 &lt;code&gt;Clob&lt;/code&gt; 、 &lt;code&gt;NClob&lt;/code&gt; 、 &lt;code&gt;Struct&lt;/code&gt; 、 &lt;code&gt;java.net.URL&lt;/code&gt; 、または &lt;code&gt;Array&lt;/code&gt; を実装するクラスである場合、ドライバーは対応するSQLタイプの値としてデータベースに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="b933b1be3a77c2cbdbf7badcb4530cf76f073f97" translate="yes" xml:space="preserve">
          <source>The given Java object will be converted to the targetSqlType before being sent to the database.</source>
          <target state="translated">与えられたJavaオブジェクトは、データベースに送信される前にtargetSqlTypeに変換されます。</target>
        </trans-unit>
        <trans-unit id="183415761a8e6024f617fa5cc5c9cfc1f85baa21" translate="yes" xml:space="preserve">
          <source>The given array controls the reordering. Call &lt;code&gt;#I&lt;/code&gt; the number of incoming parameters (the value &lt;code&gt;newType.parameterCount()&lt;/code&gt;, and call &lt;code&gt;#O&lt;/code&gt; the number of outgoing parameters (the value &lt;code&gt;target.type().parameterCount()&lt;/code&gt;). Then the length of the reordering array must be &lt;code&gt;#O&lt;/code&gt;, and each element must be a non-negative number less than &lt;code&gt;#I&lt;/code&gt;. For every &lt;code&gt;N&lt;/code&gt; less than &lt;code&gt;#O&lt;/code&gt;, the &lt;code&gt;N&lt;/code&gt;-th outgoing argument will be taken from the &lt;code&gt;I&lt;/code&gt;-th incoming argument, where &lt;code&gt;I&lt;/code&gt; is &lt;code&gt;reorder[N]&lt;/code&gt;.</source>
          <target state="translated">指定された配列が並べ替えを制御します。コール &lt;code&gt;#I&lt;/code&gt; 着信パラメータの数（値 &lt;code&gt;newType.parameterCount()&lt;/code&gt; 、およびコール &lt;code&gt;#O&lt;/code&gt; 送信パラメータの数（値 &lt;code&gt;target.type().parameterCount()&lt;/code&gt; ）。次に、並べ替え配列の長さでなければならない &lt;code&gt;#O&lt;/code&gt; 、および各要素は以下非負数でなければならない &lt;code&gt;#I&lt;/code&gt; 。すべてについて &lt;code&gt;N&lt;/code&gt; 未満 &lt;code&gt;#O&lt;/code&gt; 、 &lt;code&gt;N&lt;/code&gt; 番目の発信引数から取られる &lt;code&gt;I&lt;/code&gt; 番目の着信引数、 &lt;code&gt;I&lt;/code&gt; ある &lt;code&gt;reorder[N]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fbb1845b2ea26cc16acea594e41d7dfdb60518bd" translate="yes" xml:space="preserve">
          <source>The given buffer's position will be advanced as deflate operations are performed, up to the buffer's limit. The input buffer may be modified (refilled) between deflate operations; doing so is equivalent to creating a new buffer and setting it with this method.</source>
          <target state="translated">与えられたバッファの位置は、デフレート操作が行われるにつれて、バッファの限界まで進められます。デフレート操作の間に入力バッファを変更(補充)することができます。</target>
        </trans-unit>
        <trans-unit id="f9a3f14ff7292335d29497383195cfdc28cdc10e" translate="yes" xml:space="preserve">
          <source>The given buffer's position will be advanced as inflate operations are performed, up to the buffer's limit. The input buffer may be modified (refilled) between inflate operations; doing so is equivalent to creating a new buffer and setting it with this method.</source>
          <target state="translated">インフレート操作が行われると、バッファの位置はバッファの限界まで進められます。インフレート操作の間に入力バッファを変更(補充)することができます。</target>
        </trans-unit>
        <trans-unit id="e9bfe10768ac8ebf123eacbeb22fa9fcfb73e5ff" translate="yes" xml:space="preserve">
          <source>The given date is first converted into a &lt;a href=&quot;../../../../java.base/java/util/gregoriancalendar&quot;&gt;&lt;code&gt;GregorianCalendar&lt;/code&gt;&lt;/a&gt;, then the duration is added exactly like the &lt;a href=&quot;#addTo(java.util.Calendar)&quot;&gt;&lt;code&gt;addTo(Calendar)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">指定された日付は最初に&lt;a href=&quot;../../../../java.base/java/util/gregoriancalendar&quot;&gt; &lt;code&gt;GregorianCalendar&lt;/code&gt; &lt;/a&gt;に変換され、次に期間が&lt;a href=&quot;#addTo(java.util.Calendar)&quot;&gt; &lt;code&gt;addTo(Calendar)&lt;/code&gt; &lt;/a&gt;メソッドとまったく同じように追加されます。</target>
        </trans-unit>
        <trans-unit id="703c48b1d2340b04df1d9cc4e78601063cf33268" translate="yes" xml:space="preserve">
          <source>The given group of events are all delivered as method calls on a single event listener interface, and an event listener object can be registered via a call on a registration method supplied by the event source.</source>
          <target state="translated">与えられたイベントのグループは、すべて単一のイベントリスナーインターフェース上のメソッド呼び出しとして配信され、イベントリスナーオブジェクトは、イベントソースから提供された登録メソッドの呼び出しを介して登録することができます。</target>
        </trans-unit>
        <trans-unit id="ffdfa6782f35f4a8c141a6192add2493234091aa" translate="yes" xml:space="preserve">
          <source>The given object is serialized, and its serialized contents are encrypted using the given Cipher, which must be fully initialized.</source>
          <target state="translated">与えられたオブジェクトはシリアライズされ、そのシリアライズされた内容は与えられたサイファーを使って暗号化されます。</target>
        </trans-unit>
        <trans-unit id="de74a14f86936f74a5695e46c440b16e67204567" translate="yes" xml:space="preserve">
          <source>The given path</source>
          <target state="translated">与えられたパス</target>
        </trans-unit>
        <trans-unit id="b968d9519c241838e51d4b5e19a88c965c3b01c5" translate="yes" xml:space="preserve">
          <source>The glass pane that overlays the menu bar and content pane, so it can intercept mouse movements and such.</source>
          <target state="translated">メニューバーやコンテンツペインの上に重なるガラスのペインなので、マウスの動きなどを遮ることができます。</target>
        </trans-unit>
        <trans-unit id="412d8e28acf0ec16e743068cdcad9991d5b8f647" translate="yes" xml:space="preserve">
          <source>The glassPane is always the first child of the rootPane and the rootPanes layout manager ensures that it's always as big as the rootPane.</source>
          <target state="translated">glassPaneは常にrootPaneの最初の子であり、rootPaneレイアウトマネージャは常にrootPaneと同じ大きさであることを保証します。</target>
        </trans-unit>
        <trans-unit id="4f04c45ec6f21be9a6ef279ec08ebbf197fbfb99" translate="yes" xml:space="preserve">
          <source>The glassPane is always the first child of the rootPane and the rootPanes layout manager ensures that it's always as big as the rootPane. By default it's transparent and not visible. It can be used to temporarily grab all keyboard and mouse input by adding listeners and then making it visible. by default it's not visible.</source>
          <target state="translated">glassPaneは常にrootPaneの最初の子であり、rootPaneレイアウトマネージャは常にrootPaneと同じ大きさであることを保証します。デフォルトでは透明で見えないようになっています。リスナーを追加して可視化することで、一時的にすべてのキーボードとマウスの入力を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="3e10fe916d4ec191f5b418cccb11905a2a6833b2" translate="yes" xml:space="preserve">
          <source>The glassPane may not be null.</source>
          <target state="translated">glassPaneはnullではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="2d8a013ff12d3a4688960660289fa06921be7c57" translate="yes" xml:space="preserve">
          <source>The global LogManager object can be retrieved using LogManager.getLogManager(). The LogManager object is created during class initialization and cannot subsequently be changed.</source>
          <target state="translated">グローバル LogManager オブジェクトは、LogManager.getLogManager()を使用して取得できます。LogManager オブジェクトは、クラスの初期化時に作成され、その後変更することはできません。</target>
        </trans-unit>
        <trans-unit id="48c726674f74cb2aff8847caf7527cd3e0074a2a" translate="yes" xml:space="preserve">
          <source>The global logging properties may include:</source>
          <target state="translated">グローバルロギングのプロパティには、次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="e07a1d0c0f4cd0a58eb556541bb0061d79fff226" translate="yes" xml:space="preserve">
          <source>The globalScope field.</source>
          <target state="translated">globalScopeフィールド。</target>
        </trans-unit>
        <trans-unit id="614b07111296fa1da1685c16997f9ec374711d10" translate="yes" xml:space="preserve">
          <source>The globbing pattern is specified by the &lt;a href=&quot;filesystem#getPathMatcher(java.lang.String)&quot;&gt;&lt;code&gt;getPathMatcher&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">グロブパターンは、&lt;a href=&quot;filesystem#getPathMatcher(java.lang.String)&quot;&gt; &lt;code&gt;getPathMatcher&lt;/code&gt; &lt;/a&gt;メソッドによって指定されます。</target>
        </trans-unit>
        <trans-unit id="11f1f51aa9771116b126b51dc32fcfd9d04831e3" translate="yes" xml:space="preserve">
          <source>The globbing pattern is specified by the &lt;a href=&quot;filesystem#getPathMatcher-java.lang.String-&quot;&gt;&lt;code&gt;getPathMatcher&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;a href=&quot;filesystem#getPathMatcher-java.lang.String-&quot;&gt; &lt;code&gt;getPathMatcher&lt;/code&gt; &lt;/a&gt;パターンは、getPathMatcherメソッドで指定します。</target>
        </trans-unit>
        <trans-unit id="8937687f2af88776c3e820a3f8d7c35d4bb55dfc" translate="yes" xml:space="preserve">
          <source>The granularity period value.</source>
          <target state="translated">粒度期間の値。</target>
        </trans-unit>
        <trans-unit id="88e6210bb5ce3e1e84b64575d362a93f604005d7" translate="yes" xml:space="preserve">
          <source>The granularity period.</source>
          <target state="translated">粒状化期間。</target>
        </trans-unit>
        <trans-unit id="3e7ff380b27ec8c38c90275d8ecac31281874ca9" translate="yes" xml:space="preserve">
          <source>The graphics pen hangs down and to the right from the path it traverses. This has the following implications:</source>
          <target state="translated">グラフィックペンは、それが通過するパスから下に、そして右にぶら下がっています。これは次のような意味合いを持っています。</target>
        </trans-unit>
        <trans-unit id="723895853cbff24dde1cc72d06cadbb85beecc13" translate="yes" xml:space="preserve">
          <source>The green color component for the specified pixel, as an int.</source>
          <target state="translated">指定されたピクセルの緑色成分を int で表します.</target>
        </trans-unit>
        <trans-unit id="7c23969a8a14098cef3bce5066ad65abcb50383e" translate="yes" xml:space="preserve">
          <source>The grid bag layout manager calculates the weight of a column to be the maximum &lt;code&gt;weightx&lt;/code&gt; of all the components in a column. If the resulting layout is smaller horizontally than the area it needs to fill, the extra space is distributed to each column in proportion to its weight. A column that has a weight of zero receives no extra space.</source>
          <target state="translated">グリッドバッグレイアウトマネージャーは、列の重量を計算して、列 &lt;code&gt;weightx&lt;/code&gt; のすべてのコンポーネントの最大重量xにします。結果のレイアウトが、埋める必要のある領域よりも水平方向に小さい場合、余分なスペースは、その重量に比例して各列に分配されます。重みがゼロの列は、余分なスペースを受け取りません。</target>
        </trans-unit>
        <trans-unit id="8f43b14e04b0e22ba8891acef9690c7eec87a07a" translate="yes" xml:space="preserve">
          <source>The grid bag layout manager calculates the weight of a row to be the maximum &lt;code&gt;weighty&lt;/code&gt; of all the components in a row. If the resulting layout is smaller vertically than the area it needs to fill, the extra space is distributed to each row in proportion to its weight. A row that has a weight of zero receives no extra space.</source>
          <target state="translated">グリッドバッグレイアウトマネージャーは、行の重みを計算して、行内のすべてのコンポーネントの最大の &lt;code&gt;weighty&lt;/code&gt; にします。結果のレイアウトが、埋める必要のある領域よりも垂直方向に小さい場合、余分なスペースは、その重みに比例して各行に分配されます。重みがゼロの行は、余分なスペースを受け取りません。</target>
        </trans-unit>
        <trans-unit id="62963bc885a16c1c6378b24168b5de920f7d93ae" translate="yes" xml:space="preserve">
          <source>The grid layout manager determines the size of individual components by dividing the free space in the container into equal-sized portions according to the number of rows and columns in the layout. The container's free space equals the container's size minus any insets and any specified horizontal or vertical gap. All components in a grid layout are given the same size.</source>
          <target state="translated">グリッドレイアウトマネージャは、レイアウトの行と列の数に応じてコンテナの空きスペースを等しく分割することで、個々のコンポーネントのサイズを決定します。コンテナの空きスペースは、コンテナのサイズからインセットと指定された水平または垂直方向のギャップを差し引いたものになります。グリッドレイアウト内のすべてのコンポーネントは、同じサイズが与えられます。</target>
        </trans-unit>
        <trans-unit id="a05f1c35a99276ca35fd8caa96c11ab7eac6e202" translate="yes" xml:space="preserve">
          <source>The group class specified by the &lt;code&gt;ActivationGroupDesc&lt;/code&gt; must be a concrete subclass of &lt;code&gt;ActivationGroup&lt;/code&gt; and have a public constructor that takes two arguments: the &lt;code&gt;ActivationGroupID&lt;/code&gt; for the group and the &lt;code&gt;MarshalledObject&lt;/code&gt; containing the group's initialization data (obtained from the &lt;code&gt;ActivationGroupDesc&lt;/code&gt;.</source>
          <target state="translated">グループクラスはで指定された &lt;code&gt;ActivationGroupDesc&lt;/code&gt; の具象サブクラスでなければなりません &lt;code&gt;ActivationGroup&lt;/code&gt; のと二つの引数を取るpublicコンストラクタを持っている： &lt;code&gt;ActivationGroupID&lt;/code&gt; がグループのためにと &lt;code&gt;MarshalledObject&lt;/code&gt; 、グループの初期化データを含む（から得た &lt;code&gt;ActivationGroupDesc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b8d143fbb62153c3ebf6cbe3c8f7181648a688c3" translate="yes" xml:space="preserve">
          <source>The group is created by invoking the &lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory)&quot;&gt;&lt;code&gt;openAsynchronousChannelGroup(int,ThreadFactory)&lt;/code&gt;&lt;/a&gt; method of the system-wide default &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">このグループは、システム全体のデフォルトの&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup(int,java.util.concurrent.ThreadFactory)&quot;&gt; &lt;code&gt;openAsynchronousChannelGroup(int,ThreadFactory)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。</target>
        </trans-unit>
        <trans-unit id="3ef4aa9627a0f046f2c95daeb5ba3437a2bd14bf" translate="yes" xml:space="preserve">
          <source>The group is created by invoking the &lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)&quot;&gt;&lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt;&lt;/a&gt; method of the system-wide default &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; object with an &lt;code&gt;
 initialSize&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">グループは、 &lt;code&gt; initialSize&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; のシステム全体のデフォルトの&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)&quot;&gt; &lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。</target>
        </trans-unit>
        <trans-unit id="9469ed0e693a80454bdf5043689f5531bc9a80f6" translate="yes" xml:space="preserve">
          <source>The group is created by invoking the &lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)&quot;&gt;&lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt;&lt;/a&gt; method of the system-wide default &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">このグループは、システム全体のデフォルトの&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup(java.util.concurrent.ExecutorService,int)&quot;&gt; &lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。</target>
        </trans-unit>
        <trans-unit id="3420277017038a0f3a7a8735146a1a372f94b576" translate="yes" xml:space="preserve">
          <source>The group is created by invoking the &lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup-int-java.util.concurrent.ThreadFactory-&quot;&gt;&lt;code&gt;openAsynchronousChannelGroup(int,ThreadFactory)&lt;/code&gt;&lt;/a&gt; method of the system-wide default &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">グループは、システム全体のデフォルトの&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup-int-java.util.concurrent.ThreadFactory-&quot;&gt; &lt;code&gt;openAsynchronousChannelGroup(int,ThreadFactory)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。</target>
        </trans-unit>
        <trans-unit id="cb720d2e33987d2cf50e3dfc5d3cb6091f00a40a" translate="yes" xml:space="preserve">
          <source>The group is created by invoking the &lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup-java.util.concurrent.ExecutorService-int-&quot;&gt;&lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt;&lt;/a&gt; method of the system-wide default &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; object with an &lt;code&gt;initialSize&lt;/code&gt; of &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">グループは、システム全体のデフォルトの&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup-java.util.concurrent.ExecutorService-int-&quot;&gt; &lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成され、 &lt;code&gt;initialSize&lt;/code&gt; は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="667fea1471914e720a235f53da83ac53eff12116" translate="yes" xml:space="preserve">
          <source>The group is created by invoking the &lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup-java.util.concurrent.ExecutorService-int-&quot;&gt;&lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt;&lt;/a&gt; method of the system-wide default &lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt;&lt;code&gt;AsynchronousChannelProvider&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">グループは、システム全体のデフォルトの&lt;a href=&quot;spi/asynchronouschannelprovider&quot;&gt; &lt;code&gt;AsynchronousChannelProvider&lt;/code&gt; &lt;/a&gt;オブジェクトの&lt;a href=&quot;spi/asynchronouschannelprovider#openAsynchronousChannelGroup-java.util.concurrent.ExecutorService-int-&quot;&gt; &lt;code&gt;openAsynchronousChannelGroup(ExecutorService,int)&lt;/code&gt; &lt;/a&gt;メソッドを呼び出すことによって作成されます。</target>
        </trans-unit>
        <trans-unit id="6e2250b894087a5132f38c73310c0171daccc227" translate="yes" xml:space="preserve">
          <source>The group's &lt;code&gt;activeObject&lt;/code&gt; method is called when an object is exported (either by &lt;code&gt;Activatable&lt;/code&gt; object construction or an explicit call to &lt;code&gt;Activatable.exportObject&lt;/code&gt;.</source>
          <target state="translated">グループの &lt;code&gt;activeObject&lt;/code&gt; のオブジェクトはいずれかによって（エクスポートされたときにメソッドが呼び出され &lt;code&gt;Activatable&lt;/code&gt; オブジェクトの構築やの明示的な呼び出し &lt;code&gt;Activatable.exportObject&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6c08c796fba887f0b99267de419a44fc4004d94" translate="yes" xml:space="preserve">
          <source>The group's &lt;code&gt;activeObject&lt;/code&gt; method is called when an object is exported (either by &lt;code&gt;Activatable&lt;/code&gt; object construction or an explicit call to &lt;code&gt;Activatable.exportObject&lt;/code&gt;. The group must inform its &lt;code&gt;ActivationMonitor&lt;/code&gt; that the object is active (via the monitor's &lt;code&gt;activeObject&lt;/code&gt; method) if the group hasn't already done so.</source>
          <target state="translated">グループの &lt;code&gt;activeObject&lt;/code&gt; のオブジェクトはいずれかによって（エクスポートされたときにメソッドが呼び出され &lt;code&gt;Activatable&lt;/code&gt; オブジェクトの構築やの明示的な呼び出し &lt;code&gt;Activatable.exportObject&lt;/code&gt; 。グループはその通知しなければなりません &lt;code&gt;ActivationMonitor&lt;/code&gt; にモニタの経由でオブジェクトがアクティブであることを（ &lt;code&gt;activeObject&lt;/code&gt; の方法）グループはしていない場合すでにそうしています。</target>
        </trans-unit>
        <trans-unit id="d73a5b7197d40972e24fd4eed83fd8cd74b216ed" translate="yes" xml:space="preserve">
          <source>The group's &lt;code&gt;inactiveObject&lt;/code&gt; method is called indirectly via a call to the &lt;code&gt;Activatable.inactive&lt;/code&gt; method.</source>
          <target state="translated">グループの &lt;code&gt;inactiveObject&lt;/code&gt; メソッドは、 &lt;code&gt;Activatable.inactive&lt;/code&gt; メソッドの呼び出しを介して間接的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6c2f105092e0c22983019ddce538cb9fe51ed770" translate="yes" xml:space="preserve">
          <source>The group's &lt;code&gt;inactiveObject&lt;/code&gt; method is called indirectly via a call to the &lt;code&gt;Activatable.inactive&lt;/code&gt; method. A remote object implementation must call &lt;code&gt;Activatable&lt;/code&gt;'s &lt;code&gt;inactive&lt;/code&gt; method when that object deactivates (the object deems that it is no longer active). If the object does not call &lt;code&gt;Activatable.inactive&lt;/code&gt; when it deactivates, the object will never be garbage collected since the group keeps strong references to the objects it creates.</source>
          <target state="translated">グループの &lt;code&gt;inactiveObject&lt;/code&gt; メソッドは、 &lt;code&gt;Activatable.inactive&lt;/code&gt; メソッドの呼び出しを介して間接的に呼び出されます。リモートオブジェクトの実装は、そのオブジェクトが非アクティブ化されたときに &lt;code&gt;Activatable&lt;/code&gt; の &lt;code&gt;inactive&lt;/code&gt; メソッドを呼び出す必要があります（オブジェクトは、アクティブではなくなったと見なします）。オブジェクトが非アクティブ化されたときに &lt;code&gt;Activatable.inactive&lt;/code&gt; を呼び出さない場合、グループは作成したオブジェクトへの強力な参照を保持するため、オブジェクトがガベージコレクションされることはありません。</target>
        </trans-unit>
        <trans-unit id="124ca13d7a74c7c5f766edfca03e78ec4af2f050" translate="yes" xml:space="preserve">
          <source>The group's &lt;code&gt;inactiveObject&lt;/code&gt; method unexports the remote object from the RMI runtime so that the object can no longer receive incoming RMI calls. An object will only be unexported if the object has no pending or executing calls. The subclass of &lt;code&gt;ActivationGroup&lt;/code&gt; must override this method and unexport the object.</source>
          <target state="translated">グループの &lt;code&gt;inactiveObject&lt;/code&gt; メソッドは、リモートオブジェクトをRMIランタイムからアンエクスポートして、オブジェクトが着信RMI呼び出しを受信できなくなるようにします。オブジェクトに保留中または実行中の呼び出しがない場合にのみ、オブジェクトはエクスポートされません。 &lt;code&gt;ActivationGroup&lt;/code&gt; のサブクラスは、このメソッドをオーバーライドして、オブジェクトをエクスポート解除する必要があります。</target>
        </trans-unit>
        <trans-unit id="57f544dce5daf7bc7ce9da00546c7d127d8ac783" translate="yes" xml:space="preserve">
          <source>The group's class must be a concrete subclass of &lt;code&gt;ActivationGroup&lt;/code&gt;. A subclass of &lt;code&gt;ActivationGroup&lt;/code&gt; is created/recreated via the &lt;code&gt;ActivationGroup.createGroup&lt;/code&gt; static method that invokes a special constructor that takes two arguments:</source>
          <target state="translated">グループのクラスは、 &lt;code&gt;ActivationGroup&lt;/code&gt; の具象サブクラスである必要があります。 &lt;code&gt;ActivationGroup&lt;/code&gt; のサブクラスは、2つの引数を取る特別なコンストラクターを呼び出す &lt;code&gt;ActivationGroup.createGroup&lt;/code&gt; 静的メソッドを介して作成/再作成されます。</target>
        </trans-unit>
        <trans-unit id="ac647a1b50a49dce6768605287c17212490f6461" translate="yes" xml:space="preserve">
          <source>The grouping separator is commonly used for thousands, but in some countries it separates ten-thousands. The grouping size is a constant number of digits between the grouping characters, such as 3 for 100,000,000 or 4 for 1,0000,0000. If you supply a pattern with multiple grouping characters, the interval between the last one and the end of the integer is the one that is used. So &lt;code&gt;&quot;#,##,###,####&quot;&lt;/code&gt; == &lt;code&gt;&quot;######,####&quot;&lt;/code&gt; == &lt;code&gt;&quot;##,####,####&quot;&lt;/code&gt;.</source>
          <target state="translated">グループ化区切り文字は一般的に数千に使用されますが、一部の国では1万桁に区切ります。グループ化サイズは、グループ化文字間の一定の桁数です（100,000,000の場合は3、1,0000,0000の場合は4など）。複数のグループ化文字を含むパターンを指定した場合、最後の文字と整数の終わりの間の間隔が使用されます。したがって、 &lt;code&gt;&quot;#,##,###,####&quot;&lt;/code&gt; == &lt;code&gt;&quot;######,####&quot;&lt;/code&gt; == &lt;code&gt;&quot;##,####,####&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9e203381ec812362ab8d65d07cf7bfbb629c7170" translate="yes" xml:space="preserve">
          <source>The hand cursor type.</source>
          <target state="translated">ハンドカーソルタイプです。</target>
        </trans-unit>
        <trans-unit id="9e390f031711c2f4bfa840a906c0f567e1f9980d" translate="yes" xml:space="preserve">
          <source>The handler to fire &lt;code&gt;PropertyChange&lt;/code&gt; when children are added or removed</source>
          <target state="translated">子が追加または削除されたときに &lt;code&gt;PropertyChange&lt;/code&gt; を起動するハンドラー</target>
        </trans-unit>
        <trans-unit id="6ceafe9eefbcc97f4f7bb8454227163eadbde95e" translate="yes" xml:space="preserve">
          <source>The handlers need to be registered differently than core SAX2 handlers.</source>
          <target state="translated">ハンドラはSAX2のコアハンドラとは異なる登録が必要です。</target>
        </trans-unit>
        <trans-unit id="1c2a58b3d6792b3317ea94e3204b0c17ef5386eb" translate="yes" xml:space="preserve">
          <source>The hardware's minimum margins is not just a property of the printer, but may be a function of the media size, orientation, media type, and any specified finishings. &lt;code&gt;PrintService&lt;/code&gt; provides the method to query the supported values of an attribute in a suitable context : See &lt;a href=&quot;../../printservice#getSupportedAttributeValues(java.lang.Class,javax.print.DocFlavor,javax.print.attribute.AttributeSet)&quot;&gt;&lt;code&gt;PrintService.getSupportedAttributeValues()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">ハードウェアの最小マージンは、プリンタの特性だけでなく、メディアサイズ、向き、メディアタイプ、および指定された仕上げの関数である可能性があります。 &lt;code&gt;PrintService&lt;/code&gt; は、適切なコンテキストで属性のサポートされている値をクエリするメソッドを提供します&lt;a href=&quot;../../printservice#getSupportedAttributeValues(java.lang.Class,javax.print.DocFlavor,javax.print.attribute.AttributeSet)&quot;&gt; &lt;code&gt;PrintService.getSupportedAttributeValues()&lt;/code&gt; &lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a3f7c4e20300c4bd0cb6b80a481daa7faae00611" translate="yes" xml:space="preserve">
          <source>The hardware's minimum margins is not just a property of the printer, but may be a function of the media size, orientation, media type, and any specified finishings. &lt;code&gt;PrintService&lt;/code&gt; provides the method to query the supported values of an attribute in a suitable context : See &lt;a href=&quot;../../printservice#getSupportedAttributeValues-java.lang.Class-javax.print.DocFlavor-javax.print.attribute.AttributeSet-&quot;&gt;&lt;code&gt;PrintService.getSupportedAttributeValues()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">ハードウェアの最小マージンはプリンターのプロパティだけではなく、メディアサイズ、向き、メディアタイプ、および指定された仕上げの関数である場合があります。 &lt;code&gt;PrintService&lt;/code&gt; は、適切なコンテキストで属性のサポートされている値を照会するメソッドを提供します&lt;a href=&quot;../../printservice#getSupportedAttributeValues-java.lang.Class-javax.print.DocFlavor-javax.print.attribute.AttributeSet-&quot;&gt; &lt;code&gt;PrintService.getSupportedAttributeValues()&lt;/code&gt; &lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="e3593586b61594b848850102afa86c46baa3924d" translate="yes" xml:space="preserve">
          <source>The hash code for all Key objects will be the same as the system identity code of the object as defined by the System.identityHashCode() method.</source>
          <target state="translated">すべてのKeyオブジェクトのハッシュ・コードは、System.identityHashCode()メソッドで定義されたオブジェクトのシステム・アイデンティティ・コードと同じになります。</target>
        </trans-unit>
        <trans-unit id="b9538c39f3494d1f790686c158fa3908b95b519b" translate="yes" xml:space="preserve">
          <source>The hash code is based upon all the URL components relevant for URL comparison. As such, this operation is a blocking operation.</source>
          <target state="translated">ハッシュコードは、URL比較に関連するすべてのURLコンポーネントに基づいています。そのため、この操作はブロッキング操作となります。</target>
        </trans-unit>
        <trans-unit id="a5c2024fe4050877867d89922aa9b09bc82dfb20" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the HTTP request's URI, method, and header components, and satisfies the general contract of the &lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、HTTPリクエストのURI、メソッド、およびヘッダーコンポーネントに基づいており、&lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たしています。</target>
        </trans-unit>
        <trans-unit id="e3f3e47f47400fca462141e06519982515ce787c" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the components of the HTTP headers &lt;a href=&quot;#map()&quot;&gt;&lt;code&gt;map&lt;/code&gt;&lt;/a&gt;, and satisfies the general contract of the &lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、HTTPヘッダー&lt;a href=&quot;#map()&quot;&gt; &lt;code&gt;map&lt;/code&gt; &lt;/a&gt;コンポーネントに基づいており、&lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たしています。</target>
        </trans-unit>
        <trans-unit id="c81905bd6ef34df1f977640dbc61ad6cbd9b17f8" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the components of the module descriptor, and satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードはモジュール記述子のコンポーネントに基づいており、&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たしています。</target>
        </trans-unit>
        <trans-unit id="9c7a51541cedfde643d056814ad4ce3abbbb0eaa" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the components of the path, and satisfies the general contract of the &lt;a href=&quot;../../lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードはパスのコンポーネントに基づいており、&lt;a href=&quot;../../lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たしています。</target>
        </trans-unit>
        <trans-unit id="c70cace9970285dcf9cdf6965c3562c7040cae45" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the components of the path, and satisfies the general contract of the &lt;a href=&quot;../../lang/object#hashCode--&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードはパスのコンポーネントに基づいており、&lt;a href=&quot;../../lang/object#hashCode--&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般規約を満たします。</target>
        </trans-unit>
        <trans-unit id="c4ec5d189ec2537f7c907fffdd7ad0083085f874" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the components of the resolved module and satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、解決されたモジュールのコンポーネントに基づいており、&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たします。</target>
        </trans-unit>
        <trans-unit id="fa2977c7551c3b7d38be1c6d1be86b0cbd62c47e" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the components of the version and satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードはバージョンのコンポーネントに基づいており、&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たしています。</target>
        </trans-unit>
        <trans-unit id="5e44998c3ec183e48a635b08c7350554dddf8c6e" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the modifiers, the package name, and for a qualified export, the set of modules names to which the package is exported. It satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、修飾子、パッケージ名、および修飾されたエクスポートの場合、パッケージがエクスポートされるモジュール名のセットに基づいています。&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たします。</target>
        </trans-unit>
        <trans-unit id="6349242e9ab13a1bb0fff5815b5cb8074fa442f7" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the modifiers, the package name, and for a qualified opens, the set of modules names to which the package is opened. It satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、修飾子、パッケージ名、および修飾されたオープンの場合、パッケージが開かれるモジュール名のセットに基づいています。&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たします。</target>
        </trans-unit>
        <trans-unit id="ca41094bb8dc7dca77e1e03bc7515b00e704557c" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the module name, modifiers, and the module version if recorded at compile time. It satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、モジュール名、修飾子、およびコンパイル時に記録された場合のモジュールバージョンに基づいています。&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たします。</target>
        </trans-unit>
        <trans-unit id="9852bb81d4ee7252a48ab651f1d8b4ad3b8ad54c" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the service type and the set of providers. It satisfies the general contract of the &lt;a href=&quot;../object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、サービスタイプとプロバイダーのセットに基づいています。&lt;a href=&quot;../object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たします。</target>
        </trans-unit>
        <trans-unit id="77caf5a9c1f81f08c3bdcb2c937a75e2a0ca688a" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the value represented, and satisfies the general contract of the &lt;a href=&quot;../../../lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは、表される値に基づいており、&lt;a href=&quot;../../../lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; &lt;/a&gt;メソッドの一般的なコントラクトを満たします。</target>
        </trans-unit>
        <trans-unit id="c527b264eac325d09725ecb4874d7a3ee1aba8e2" translate="yes" xml:space="preserve">
          <source>The hash code is based upon the value represented, and satisfies the general contract of the &lt;a href=&quot;../../../lang/object#hashCode--&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">ハッシュコードは表現された値に基づいており、&lt;a href=&quot;../../../lang/object#hashCode--&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; &lt;/a&gt;メソッドの一般規約を満たします。</target>
        </trans-unit>
        <trans-unit id="3b1c8cc2dac12696b4358157a1e4151ba43bfe5e" translate="yes" xml:space="preserve">
          <source>The hash code is calculated using both the Namespace URI and the local part of the &lt;code&gt;QName&lt;/code&gt;. The prefix is &lt;strong&gt;&lt;em&gt;NOT&lt;/em&gt;&lt;/strong&gt; used to calculate the hash code.</source>
          <target state="translated">ハッシュコードは、名前空間URIと &lt;code&gt;QName&lt;/code&gt; のローカル部分の両方を使用して計算されます。プレフィックスは、ハッシュコードの計算には使用され&lt;strong&gt;&lt;em&gt;ません&lt;/em&gt;&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6aaf165addd90a50c9183a3d2875d6a72cb1ef7a" translate="yes" xml:space="preserve">
          <source>The hash code is calculated via: &lt;code&gt;getName(X500Principal.CANONICAL).hashCode()&lt;/code&gt;</source>
          <target state="translated">ハッシュコードは、 &lt;code&gt;getName(X500Principal.CANONICAL).hashCode()&lt;/code&gt; によって計算されます。</target>
        </trans-unit>
        <trans-unit id="0ba358f7e4c5629a504cdd4a1c1f292ba74a0a9d" translate="yes" xml:space="preserve">
          <source>The hash code is computed by adding the hash code of the attribute's id and that of all of its values except for values that are arrays. For an array, the hash code of each element of the array is summed. If a subclass overrides &lt;code&gt;hashCode()&lt;/code&gt;, it should override &lt;code&gt;equals()&lt;/code&gt; as well so that two attributes that are equal have the same hash code.</source>
          <target state="translated">ハッシュコードは、属性のIDのハッシュコードと、配列である値を除くすべての値のハッシュコードを追加して計算されます。配列の場合、配列の各要素のハッシュコードが合計されます。サブクラスが &lt;code&gt;hashCode()&lt;/code&gt; をオーバーライドする場合、 &lt;code&gt;equals()&lt;/code&gt; 2つの属性が同じハッシュコードを持つように、equals（）もオーバーライドする必要があります。</target>
        </trans-unit>
        <trans-unit id="280b797559d043d8daa32c7b2b5ee41ca3702e4d" translate="yes" xml:space="preserve">
          <source>The hash code is computed by adding the hash code of the attributes of this object. If this BasicAttributes ignores case of its attribute IDs, one is added to the hash code. If a subclass overrides &lt;code&gt;hashCode()&lt;/code&gt;, it should override &lt;code&gt;equals()&lt;/code&gt; as well so that two &lt;code&gt;Attributes&lt;/code&gt; instances that are equal have the same hash code.</source>
          <target state="translated">ハッシュコードは、このオブジェクトの属性のハッシュコードを追加して計算されます。このBasicAttributesが属性IDの大文字と小文字を区別しない場合、ハッシュコードに1が追加されます。サブクラスが &lt;code&gt;hashCode()&lt;/code&gt; をオーバーライドする場合は、 &lt;code&gt;equals()&lt;/code&gt; もオーバーライドして、等しい 2つの &lt;code&gt;Attributes&lt;/code&gt; インスタンスが同じハッシュコードを持つようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="bbaead227f6f55e6d05891b8aa6b6409429186cb" translate="yes" xml:space="preserve">
          <source>The hash code is defined to be the result of the following calculation:</source>
          <target state="translated">ハッシュコードは、以下の計算結果として定義されています。</target>
        </trans-unit>
        <trans-unit id="bbd08498997ed584941a561e6db8ab3f78bf82c2" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;CompositeData&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its</source>
          <target state="translated">ハッシュコード &lt;code&gt;CompositeData&lt;/code&gt; インスタンスがで使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その</target>
        </trans-unit>
        <trans-unit id="d55d18b3e39ef2ab73da42191dee5a25b8360e6e" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;CompositeDataSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its</source>
          <target state="translated">ハッシュコード &lt;code&gt;CompositeDataSupport&lt;/code&gt; インスタンスがで使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その</target>
        </trans-unit>
        <trans-unit id="36175eae8ecdd8a6b3c7d59f2ed00a2a5791d061" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;CompositeType&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: name, items names, items types). This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two &lt;code&gt;CompositeType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, as required by the general contract of the method &lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュコード &lt;code&gt;CompositeType&lt;/code&gt; インスタンスで使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; （：名、商品名、商品タイプIE）の比較。これにより、 &lt;code&gt; t1.equals(t2) &lt;/code&gt; は、メソッド&lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; の&lt;/a&gt;一般的なコントラクトで要求されるように、任意の2つの &lt;code&gt;CompositeType&lt;/code&gt; インスタンス &lt;code&gt;t1&lt;/code&gt; および &lt;code&gt;t2&lt;/code&gt; に対して &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="23d71a4647e5d7c762e18b1c5f72a5feccc76928" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;CompositeType&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: name, items names, items types). This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two &lt;code&gt;CompositeType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, as required by the general contract of the method &lt;a href=&quot;../../../java/lang/object#hashCode--&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュコード &lt;code&gt;CompositeType&lt;/code&gt; インスタンスで使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; （：名、商品名、商品タイプIE）の比較。これにより、メソッド&lt;a href=&quot;../../../java/lang/object#hashCode--&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; の&lt;/a&gt;一般規約で要求されているように、 &lt;code&gt; t1.equals(t2) &lt;/code&gt; が2つの &lt;code&gt;CompositeType&lt;/code&gt; インスタンス &lt;code&gt;t1&lt;/code&gt; および &lt;code&gt;t2&lt;/code&gt; の &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; を意味することが保証されます。</target>
        </trans-unit>
        <trans-unit id="d318826cde719be40f380791a8f546b82ed80cd5" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;TabularData&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its</source>
          <target state="translated">ハッシュコード &lt;code&gt;TabularData&lt;/code&gt; インスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その</target>
        </trans-unit>
        <trans-unit id="7be5b5cc6924ee6b06115e4c236b4aa63d3a3653" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;TabularDataSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its</source>
          <target state="translated">ハッシュコード &lt;code&gt;TabularDataSupport&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その</target>
        </trans-unit>
        <trans-unit id="94f2e24e0d4aa6700c323efa861df2a2f7da5988" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;TabularType&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: name, row type, index names). This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two &lt;code&gt;TabularType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, as required by the general contract of the method &lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュコード &lt;code&gt;TabularType&lt;/code&gt; でのインスタンスで使用されるすべての情報要素のハッシュコードの合計であること &lt;code&gt;equals&lt;/code&gt; （名前、行タイプ、インデックス名IE）の比較。この確実 &lt;code&gt; t1.equals(t2) &lt;/code&gt; あることを意味 &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; 任意の二つのため &lt;code&gt;TabularType&lt;/code&gt; でのインスタンスの &lt;code&gt;t1&lt;/code&gt; 及び &lt;code&gt;t2&lt;/code&gt; 方法の一般規約によって要求されるように、&lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="247a077ccfc174f8e6662782ad271b4b18c19d87" translate="yes" xml:space="preserve">
          <source>The hash code of a &lt;code&gt;TabularType&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: name, row type, index names). This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two &lt;code&gt;TabularType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, as required by the general contract of the method &lt;a href=&quot;../../../java/lang/object#hashCode--&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュコード &lt;code&gt;TabularType&lt;/code&gt; でのインスタンスで使用されるすべての情報要素のハッシュコードの合計であること &lt;code&gt;equals&lt;/code&gt; （名前、行タイプ、インデックス名IE）の比較。これにより、メソッド&lt;a href=&quot;../../../java/lang/object#hashCode--&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; の&lt;/a&gt;一般規約で要求されるように、 &lt;code&gt; t1.equals(t2) &lt;/code&gt; が、2つの &lt;code&gt;TabularType&lt;/code&gt; インスタンス &lt;code&gt;t1&lt;/code&gt; と &lt;code&gt;t2&lt;/code&gt; の &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; を意味することが保証されます。</target>
        </trans-unit>
        <trans-unit id="870f42492879e018456513ed48f2e9081dd2adc9" translate="yes" xml:space="preserve">
          <source>The hash code of a byte buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">バイトバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="ae060928fbf5519b2c2adaf53bf19772feaa56c3" translate="yes" xml:space="preserve">
          <source>The hash code of a char buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">charバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="e856bea9bb9b618831e36d6cb05e907153d7b262" translate="yes" xml:space="preserve">
          <source>The hash code of a double buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">ダブルバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="77547da71388901473497d1b6c4f94fc525f313f" translate="yes" xml:space="preserve">
          <source>The hash code of a float buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">floatバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="7daacfd0664bde6221147f25fc4590d2f02384b5" translate="yes" xml:space="preserve">
          <source>The hash code of a int buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">intバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="448d49d6ad775b6519c9d1b6671194f14b98ec77" translate="yes" xml:space="preserve">
          <source>The hash code of a long buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">長いバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="210cdb9a0ce5d545d18adc0fc1f6167261b16830" translate="yes" xml:space="preserve">
          <source>The hash code of a member-value depends on its type:</source>
          <target state="translated">メンバ値のハッシュ・コードは、その型に依存します。</target>
        </trans-unit>
        <trans-unit id="eeb946081a225b8dea385c7f788fc1184326ddf3" translate="yes" xml:space="preserve">
          <source>The hash code of a primitive value</source>
          <target state="translated">原始値のハッシュコード</target>
        </trans-unit>
        <trans-unit id="2134ae5696f587a6755931aaf788a2d6221bf325" translate="yes" xml:space="preserve">
          <source>The hash code of a primitive value &lt;code&gt;&lt;i&gt;v&lt;/i&gt;&lt;/code&gt; is equal to &lt;code&gt;&lt;i&gt;WrapperType&lt;/i&gt;.valueOf(&lt;i&gt;v&lt;/i&gt;).hashCode()&lt;/code&gt;, where &lt;code&gt;&lt;i&gt;WrapperType&lt;/i&gt;&lt;/code&gt; is the wrapper type corresponding to the primitive type of &lt;code&gt;&lt;i&gt;v&lt;/i&gt;&lt;/code&gt; (&lt;a href=&quot;../byte&quot;&gt;&lt;code&gt;Byte&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../character&quot;&gt;&lt;code&gt;Character&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../double&quot;&gt;&lt;code&gt;Double&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../float&quot;&gt;&lt;code&gt;Float&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../integer&quot;&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../long&quot;&gt;&lt;code&gt;Long&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../short&quot;&gt;&lt;code&gt;Short&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../boolean&quot;&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">プリミティブ値のハッシュコード &lt;code&gt;&lt;i&gt;v&lt;/i&gt;&lt;/code&gt; に等しい &lt;code&gt;&lt;i&gt;WrapperType&lt;/i&gt;.valueOf(&lt;i&gt;v&lt;/i&gt;).hashCode()&lt;/code&gt; 、 &lt;code&gt;&lt;i&gt;WrapperType&lt;/i&gt;&lt;/code&gt; はのプリミティブ型に対応するラッパー型である &lt;code&gt;&lt;i&gt;v&lt;/i&gt;&lt;/code&gt; （&lt;a href=&quot;../byte&quot;&gt; &lt;code&gt;Byte&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../character&quot;&gt; &lt;code&gt;Character&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../double&quot;&gt; &lt;code&gt;Double&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../float&quot;&gt; &lt;code&gt;Float&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../integer&quot;&gt; &lt;code&gt;Integer&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../long&quot;&gt; &lt;code&gt;Long&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../short&quot;&gt; &lt;code&gt;Short&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../boolean&quot;&gt; &lt;code&gt;Boolean&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="1d02a73fa0f7e8ac01c968c0c089bcfd10620f9c" translate="yes" xml:space="preserve">
          <source>The hash code of a short buffer depends only upon its remaining elements; that is, upon the elements from &lt;code&gt;position()&lt;/code&gt; up to, and including, the element at &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">短いバッファのハッシュコードは、残りの要素にのみ依存します。つまり、 &lt;code&gt;position()&lt;/code&gt; から &lt;code&gt;limit()&lt;/code&gt; - &lt;code&gt;1&lt;/code&gt; までの要素を含みます。</target>
        </trans-unit>
        <trans-unit id="d7d14243bc9c88dd73661c2370e4d91f3c2d8aef" translate="yes" xml:space="preserve">
          <source>The hash code of a string, enum, class, or annotation member-value I</source>
          <target state="translated">文字列、列挙、クラス、または注釈のメンバ値のハッシュ・コード I</target>
        </trans-unit>
        <trans-unit id="c5b69f411272182de725ee87c28429b094dc5c1c" translate="yes" xml:space="preserve">
          <source>The hash code of a string, enum, class, or annotation member-value I &lt;code&gt;&lt;i&gt;v&lt;/i&gt;&lt;/code&gt; is computed as by calling &lt;code&gt;&lt;i&gt;v&lt;/i&gt;.hashCode()&lt;/code&gt;. (In the case of annotation member values, this is a recursive definition.)</source>
          <target state="translated">文字列、列挙型、クラス、または注釈のメンバー値I &lt;code&gt;&lt;i&gt;v&lt;/i&gt;&lt;/code&gt; のハッシュコードは、 &lt;code&gt;&lt;i&gt;v&lt;/i&gt;.hashCode()&lt;/code&gt; 呼び出すことによって計算されます。 （注釈メンバー値の場合、これは再帰的な定義です。）</target>
        </trans-unit>
        <trans-unit id="01d1fa6e57ef84b5eecfaa822a60e3bc34f1f826" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;ArrayType&lt;/code&gt; instance is the sum of the hash codes of all the elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (i.e. dimension, elements' open type and primitive array flag). The hashcode for a primitive value is the hashcode of the corresponding boxed object (e.g. the hashcode for &lt;code&gt;true&lt;/code&gt; is &lt;code&gt;Boolean.TRUE.hashCode()&lt;/code&gt;). This ensures that &lt;code&gt; t1.equals(t2) &lt;/code&gt; implies that &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; for any two &lt;code&gt;ArrayType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, as required by the general contract of the method &lt;a href=&quot;../../../java/lang/object#hashCode--&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュコード &lt;code&gt;ArrayType&lt;/code&gt; インスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、寸法、要素の公開型およびプリミティブ配列フラグ）。プリミティブ値のハッシュコードは、対応するボックス化オブジェクトのハッシュコードです（たとえば、 &lt;code&gt;true&lt;/code&gt; のハッシュコードは &lt;code&gt;Boolean.TRUE.hashCode()&lt;/code&gt; です）。これにより、メソッド&lt;a href=&quot;../../../java/lang/object#hashCode--&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; の&lt;/a&gt;一般規約で要求されるように、任意の2つの &lt;code&gt;ArrayType&lt;/code&gt; インスタンス &lt;code&gt;t1&lt;/code&gt; および &lt;code&gt;t2&lt;/code&gt; に対して &lt;code&gt; t1.equals(t2) &lt;/code&gt; が &lt;code&gt; t1.hashCode()==t2.hashCode() &lt;/code&gt; を意味することが保証されます。</target>
        </trans-unit>
        <trans-unit id="1a2573b1b7a6841ea4b97efa1dcc1c78c9b4a766" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;ArrayType&lt;/code&gt; instance is the sum of the hash codes of all the elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (i.e. dimension, elements' open type and primitive array flag). The hashcode for a primitive value is the hashcode of the corresponding boxed object (e.g. the hashcode for &lt;code&gt;true&lt;/code&gt; is &lt;code&gt;Boolean.TRUE.hashCode()&lt;/code&gt;). This ensures that &lt;code&gt;t1.equals(t2)&lt;/code&gt; implies that &lt;code&gt;t1.hashCode()==t2.hashCode()&lt;/code&gt; for any two &lt;code&gt;ArrayType&lt;/code&gt; instances &lt;code&gt;t1&lt;/code&gt; and &lt;code&gt;t2&lt;/code&gt;, as required by the general contract of the method &lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt;&lt;code&gt;Object.hashCode()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ハッシュコード &lt;code&gt;ArrayType&lt;/code&gt; インスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、寸法、要素の公開型およびプリミティブ配列フラグ）。プリミティブ値のハッシュコードは、対応するボックス化されたオブジェクトのハッシュコードです（たとえば、 &lt;code&gt;true&lt;/code&gt; のハッシュコードは &lt;code&gt;Boolean.TRUE.hashCode()&lt;/code&gt; です）。これにより、 &lt;code&gt;t1.equals(t2)&lt;/code&gt; は、メソッド&lt;a href=&quot;../../../../java.base/java/lang/object#hashCode()&quot;&gt; &lt;code&gt;Object.hashCode()&lt;/code&gt; の&lt;/a&gt;一般的なコントラクトで要求されるように、任意の2つの &lt;code&gt;ArrayType&lt;/code&gt; インスタンス &lt;code&gt;t1&lt;/code&gt; および &lt;code&gt;t2&lt;/code&gt; に対して &lt;code&gt;t1.hashCode()==t2.hashCode()&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="89859869abc1e87bea0cedbd234cccfbd6292353" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, its</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanAttributeInfo&lt;/code&gt; のインスタンスで使用されるすべての情報要素のハッシュコードの合計であること &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その名前を、その</target>
        </trans-unit>
        <trans-unit id="d4009fccc58869916c6960aab5f22a0c9ff7dbc5" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, its</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanAttributeInfoSupport&lt;/code&gt; のインスタンスで使用されるすべての情報要素のハッシュコードの合計であること &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その名前を、その</target>
        </trans-unit>
        <trans-unit id="2f397ac542d0038cb102144a0cc57e017b2c4f8d" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name and signature, where the signature hashCode is calculated by a call to &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanConstructorInfo&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 名前と署名、署名のハッシュコードを呼び出しによって計算される：比較（すなわち &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="b4bf3fc4a7e5d7aa9cdb23fbe6d4aaab5631efe8" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name and signature, where the signature hashCode is calculated by a call to &lt;code&gt;
 java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 名前と署名、署名のハッシュコードを呼び出しによって計算される：比較（すなわち &lt;code&gt; java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="04266c1edbee1d94b1f76015779f40d46219c679" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name and signature, where the signature hashCode is calculated by a call to &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanConstructorInfoSupport&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 名前と署名、署名のハッシュコードを呼び出しによって計算される：比較（すなわち &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="2a41b2af637d21816176cf096c670471a0f1f21d" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanInfo&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its class name, and its infos on attributes, constructors, operations and notifications, where the hashCode of each of these arrays is calculated by a call to &lt;code&gt;new java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanInfo&lt;/code&gt; によってのインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; （比較例：クラス名、属性、コンストラクタ、オペレーション、および通知にそのに関する情報、これらの配列の各々のハッシュコード &lt;code&gt;new java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()&lt;/code&gt; ）の呼び出しによって計算されます。</target>
        </trans-unit>
        <trans-unit id="7134d10e582e012e058ace133bc0a5e89599df5c" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its class name, and its infos on attributes, constructors, operations and notifications, where the hashCode of each of these arrays is calculated by a call to &lt;code&gt;new
 java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanInfoSupport&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; （比較例：クラス名、属性、コンストラクタ、オペレーション、および通知にそのに関する情報、これらの配列の各々のハッシュコード &lt;code&gt;new java.util.HashSet(java.util.Arrays.asList(this.getSignature)).hashCode()&lt;/code&gt; ）の呼び出しによって計算されます。</target>
        </trans-unit>
        <trans-unit id="f54d7fb241c970213208d826f32b3107dda26d22" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, return open type, impact and signature, where the signature hashCode is calculated by a call to &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanOperationInfo&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 名前、オープンタイプ、衝撃及び署名を返す、署名ハッシュコードを呼び出しによって計算される：比較（すなわち &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e8aeea1393fe0c4be8026ba476bcdaa2aeddf8bc" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, return open type, impact and signature, where the signature hashCode is calculated by a call to &lt;code&gt;
 java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 名前、オープンタイプ、衝撃及び署名を返す、署名ハッシュコードを呼び出しによって計算される：比較（すなわち &lt;code&gt; java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="bbcfc09c215717c345d74980a70a4ff3a832c4e1" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, return open type, impact and signature, where the signature hashCode is calculated by a call to &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt;).</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanOperationInfoSupport&lt;/code&gt; のインスタンスは、で使用されるすべての情報要素のハッシュコードの合計である &lt;code&gt;equals&lt;/code&gt; 名前、オープンタイプ、衝撃及び署名を返す、署名ハッシュコードを呼び出しによって計算される：比較（すなわち &lt;code&gt;java.util.Arrays.asList(this.getSignature).hashCode()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="00e028f4abde36a33f7e7c1ecf97c6a5135da15d" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, its</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanParameterInfo&lt;/code&gt; のインスタンスで使用されるすべての情報要素のハッシュコードの合計であること &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その名前を、その</target>
        </trans-unit>
        <trans-unit id="31d61d2f8f6cfb064e5c7aa593ca2ca50815ceaf" translate="yes" xml:space="preserve">
          <source>The hash code of an &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; instance is the sum of the hash codes of all elements of information used in &lt;code&gt;equals&lt;/code&gt; comparisons (ie: its name, its</source>
          <target state="translated">ハッシュコード &lt;code&gt;OpenMBeanParameterInfoSupport&lt;/code&gt; のインスタンスで使用されるすべての情報要素のハッシュコードの合計であること &lt;code&gt;equals&lt;/code&gt; 比較（すなわち、その名前を、その</target>
        </trans-unit>
        <trans-unit id="ad19edf14f30cef209a8184f7035e14288cbeb22" translate="yes" xml:space="preserve">
          <source>The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by &lt;a href=&quot;../string#hashCode()&quot;&gt;&lt;code&gt;String.hashCode()&lt;/code&gt;&lt;/a&gt;) XOR the hash code of the member-value, as defined below:</source>
          <target state="translated">注釈のハッシュコードは、以下に定義するように、そのメンバー（デフォルト値を持つものを含む）のハッシュコードの合計です。注釈メンバーのハッシュコードは、（によって計算されるメンバー名のハッシュコードの127倍です。&lt;a href=&quot;../string#hashCode()&quot;&gt; &lt;code&gt;String.hashCode()&lt;/code&gt; &lt;/a&gt;）以下に定義するように、メンバー値のハッシュコードをXORします。</target>
        </trans-unit>
        <trans-unit id="ec70ed87a298662c34b1f376ba077c2bc1d629fc" translate="yes" xml:space="preserve">
          <source>The hash code of an annotation is the sum of the hash codes of its members (including those with default values), as defined below: The hash code of an annotation member is (127 times the hash code of the member-name as computed by &lt;a href=&quot;../string#hashCode--&quot;&gt;&lt;code&gt;String.hashCode()&lt;/code&gt;&lt;/a&gt;) XOR the hash code of the member-value, as defined below:</source>
          <target state="translated">アノテーションのハッシュコードは、そのメンバー（デフォルト値を持つものを含む）のハッシュコードの合計であり、以下で定義されています。アノテーションメンバーのハッシュコードは、&lt;a href=&quot;../string#hashCode--&quot;&gt; &lt;code&gt;String.hashCode()&lt;/code&gt; &lt;/a&gt;）メンバー値のハッシュコードのXORを行います。</target>
        </trans-unit>
        <trans-unit id="5d1b19e581d24e7a8bf88b5ada0f6a0c846f91cf" translate="yes" xml:space="preserve">
          <source>The hash code of an array member-value is computed by calling the appropriate overloading of &lt;a href=&quot;../../util/arrays#hashCode(long%5B%5D)&quot;&gt;&lt;code&gt;Arrays.hashCode&lt;/code&gt;&lt;/a&gt; on the value. (There is one overloading for each primitive type, and one for object reference types.)</source>
          <target state="translated">配列メンバー値のハッシュコードは、値に対して&lt;a href=&quot;../../util/arrays#hashCode(long%5B%5D)&quot;&gt; &lt;code&gt;Arrays.hashCode&lt;/code&gt; &lt;/a&gt;の適切なオーバーロードを呼び出すことによって計算されます。（プリミティブ型ごとに1つのオーバーロードがあり、オブジェクト参照型に1つあります。）</target>
        </trans-unit>
        <trans-unit id="c3b05c5d540ac9609ca285969339a76621c23f02" translate="yes" xml:space="preserve">
          <source>The hash code of an array member-value is computed by calling the appropriate overloading of &lt;a href=&quot;../../util/arrays#hashCode-long:A-&quot;&gt;&lt;code&gt;Arrays.hashCode&lt;/code&gt;&lt;/a&gt; on the value. (There is one overloading for each primitive type, and one for object reference types.)</source>
          <target state="translated">配列メンバー値のハッシュコードは、値に対して&lt;a href=&quot;../../util/arrays#hashCode-long:A-&quot;&gt; &lt;code&gt;Arrays.hashCode&lt;/code&gt; &lt;/a&gt;の適切なオーバーロードを呼び出すことによって計算されます。（プリミティブ型ごとに1つのオーバーロードがあり、オブジェクト参照型ごとに1つあります。）</target>
        </trans-unit>
        <trans-unit id="2bb2f0111cd6022a0599aca13287860989104c38" translate="yes" xml:space="preserve">
          <source>The hash code of this address as an int.</source>
          <target state="translated">このアドレスのハッシュコードを int で指定します。</target>
        </trans-unit>
        <trans-unit id="fbc46fa08eff76ca50a494a67a9f9afc3402dc72" translate="yes" xml:space="preserve">
          <source>The hash code should be based on the entire state of the object.</source>
          <target state="translated">ハッシュコードは、オブジェクトの全体の状態に基づいている必要があります。</target>
        </trans-unit>
        <trans-unit id="712b5a084994256ad3e9968d5206089d7ea3c72c" translate="yes" xml:space="preserve">
          <source>The hash code value for this attribute set.</source>
          <target state="translated">この属性セットのハッシュコード値。</target>
        </trans-unit>
        <trans-unit id="2b53bb94c3bfc0bbacc248ee138e0c2f7cbbffc9" translate="yes" xml:space="preserve">
          <source>The hash code value is generated using the case-insensitive hostname of this &lt;code&gt;SNIHostName&lt;/code&gt;.</source>
          <target state="translated">ハッシュコード値は、この &lt;code&gt;SNIHostName&lt;/code&gt; の大文字と小文字を区別しないホスト名を使用して生成されます。</target>
        </trans-unit>
        <trans-unit id="a94e0117685d82860b0a3c8054cc73b78793fa96" translate="yes" xml:space="preserve">
          <source>The hash code value is generated using the name type and encoded value of this server name.</source>
          <target state="translated">ハッシュコード値は、このサーバ名の名前の型とエンコードされた値を用いて生成されます。</target>
        </trans-unit>
        <trans-unit id="fe1d6dcf3d32aad84ace2f1668e42a0886801dee" translate="yes" xml:space="preserve">
          <source>The hash table contains an &lt;code&gt;Object&lt;/code&gt; and the corresponding &lt;code&gt;Entity&lt;/code&gt;</source>
          <target state="translated">ハッシュテーブルには、 &lt;code&gt;Object&lt;/code&gt; と対応する &lt;code&gt;Entity&lt;/code&gt; が含まれています</target>
        </trans-unit>
        <trans-unit id="166894a160be7236b786b6cf2d897b19a4b7983f" translate="yes" xml:space="preserve">
          <source>The hash table contains the name of element and the corresponding element.</source>
          <target state="translated">ハッシュテーブルには、要素の名前と対応する要素が含まれています。</target>
        </trans-unit>
        <trans-unit id="f8a72ebb55ba31635c6a6269f563a04148937211" translate="yes" xml:space="preserve">
          <source>The hash-code value for this module dependence</source>
          <target state="translated">このモジュール依存性のためのハッシュコード値</target>
        </trans-unit>
        <trans-unit id="9be86fd4f6165883b7425611b19516dbc44cbe65" translate="yes" xml:space="preserve">
          <source>The hash-code value for this module descriptor</source>
          <target state="translated">このモジュール記述子のハッシュコード値</target>
        </trans-unit>
        <trans-unit id="3d0dbd6446926905dd1d23ee3f16bcb4e8b56ce1" translate="yes" xml:space="preserve">
          <source>The hash-code value for this module export</source>
          <target state="translated">このモジュール export のハッシュコード値</target>
        </trans-unit>
        <trans-unit id="96747c64ef53441dfca3c12471f7b8a813d46cc2" translate="yes" xml:space="preserve">
          <source>The hash-code value for this module opens</source>
          <target state="translated">このモジュールのハッシュコードの値がオープンします。</target>
        </trans-unit>
        <trans-unit id="ea2081f6b1a6483c60f5f1f1e8389a02f0db9e3b" translate="yes" xml:space="preserve">
          <source>The hash-code value for this module provides</source>
          <target state="translated">このモジュールのハッシュコード値は</target>
        </trans-unit>
        <trans-unit id="c7a85005de87c9f937b25ebe7816c515a9c9abcf" translate="yes" xml:space="preserve">
          <source>The hash-code value for this module version</source>
          <target state="translated">このモジュールのバージョンのハッシュコード値</target>
        </trans-unit>
        <trans-unit id="6c6ae7273d0a50cc50b49ac4c6415f03b7a65666" translate="yes" xml:space="preserve">
          <source>The hash-code value for this resolved module</source>
          <target state="translated">この解決されたモジュールのハッシュコードの値</target>
        </trans-unit>
        <trans-unit id="5a3e1afff0d50668c46802f1477ed35d0f91a154" translate="yes" xml:space="preserve">
          <source>The hashcode of this version</source>
          <target state="translated">このバージョンのハッシュコード</target>
        </trans-unit>
        <trans-unit id="6fb0842996fa13780c2faaae081f966b5b45ef57" translate="yes" xml:space="preserve">
          <source>The header for a column of data.</source>
          <target state="translated">データの列のヘッダ。</target>
        </trans-unit>
        <trans-unit id="70368afbc14eda860a6d9acb86b4b982e4a9c963" translate="yes" xml:space="preserve">
          <source>The header for a row of data.</source>
          <target state="translated">データの行のヘッダ。</target>
        </trans-unit>
        <trans-unit id="2f40840f8df0b9b982dd48f033917e60387a6978" translate="yes" xml:space="preserve">
          <source>The header value of the column.</source>
          <target state="translated">カラムのヘッダー値。</target>
        </trans-unit>
        <trans-unit id="536d7623d1b3e33ffe89509fa39178919882bcb0" translate="yes" xml:space="preserve">
          <source>The heap may be of a fixed size or may be expanded and shrunk. The memory for the heap does not need to be contiguous.</source>
          <target state="translated">ヒープは固定サイズであってもよいし、拡張・縮小してもよい。ヒープのメモリは連続している必要はありません。</target>
        </trans-unit>
        <trans-unit id="fe99f73535e48cc29eb310f157bfbe2aace7c59b" translate="yes" xml:space="preserve">
          <source>The heaviest predefined weight.</source>
          <target state="translated">最も重い所定の重さ。</target>
        </trans-unit>
        <trans-unit id="f81b9ca5d1cfd1e67c799ae3c17e744c07d9afc0" translate="yes" xml:space="preserve">
          <source>The hedge &quot;approximately&quot; is used in the foregoing description because default source of randomness is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm would choose permutations with perfect uniformity.</source>
          <target state="translated">前述の記述ではヘッジ「約」が使用されているが、それは、デフォルトのランダム性のソースが、独立して選択されたビットの不偏不偏のソースである「約」に過ぎないからである。もしそれがランダムに選択されたビットの完全なソースであったならば、アルゴリズムは完全な一様性を持った順列を選択するであろう。</target>
        </trans-unit>
        <trans-unit id="67a3fd782abccfd0623f5ed131c4181f7176648a" translate="yes" xml:space="preserve">
          <source>The hedge &quot;approximately&quot; is used in the foregoing description only because the &lt;code&gt;next&lt;/code&gt; method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose &lt;code&gt;double&lt;/code&gt; values from the stated range with perfect uniformity.</source>
          <target state="translated">「おおよそ」というヘッジは、 &lt;code&gt;next&lt;/code&gt; 方法が独立して選択されたビットのおおよその不偏ソースだけであるため、前述の説明でのみ使用されています。それがランダムに選択されたビットの完全なソースである場合、示されているアルゴリズムは、完全に均一に、指定された範囲から &lt;code&gt;double&lt;/code&gt; 値を選択します。</target>
        </trans-unit>
        <trans-unit id="58816a4e8f485de5ac4b356dc59cc5616b00d6ae" translate="yes" xml:space="preserve">
          <source>The hedge &quot;approximately&quot; is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose &lt;code&gt;float&lt;/code&gt; values from the stated range with perfect uniformity.</source>
          <target state="translated">「おおよそ」というヘッジは、次の方法が独立して選択されたビットのおおよその不偏ソースだけであるため、前述の説明でのみ使用されています。ランダムに選択されたビットの完全なソースである場合、示されているアルゴリズムは、指定された範囲から完全に均一な &lt;code&gt;float&lt;/code&gt; 値を選択します。</target>
        </trans-unit>
        <trans-unit id="502b6b76db7ef6889c24c49044d80cfde1ed3dae" translate="yes" xml:space="preserve">
          <source>The hedge &quot;approximately&quot; is used in the foregoing description only because the next method is only approximately an unbiased source of independently chosen bits. If it were a perfect source of randomly chosen bits, then the algorithm shown would choose &lt;code&gt;int&lt;/code&gt; values from the stated range with perfect uniformity.</source>
          <target state="translated">「おおよそ」というヘッジは、次の方法が独立して選択されたビットのおおよその不偏ソースだけであるため、前述の説明でのみ使用されています。ランダムに選択されたビットの完全なソースである場合、示されているアルゴリズムは、指定された範囲から完全に均一な &lt;code&gt;int&lt;/code&gt; 値を選択します。</target>
        </trans-unit>
        <trans-unit id="805f1481305a0a003c0c02fe760455a1ed3fd1f1" translate="yes" xml:space="preserve">
          <source>The height dimension; negative values can be used.</source>
          <target state="translated">高さ寸法;負の値が使用できます。</target>
        </trans-unit>
        <trans-unit id="03634a10e1205e95d36ba4cdc0cfae3b5e8d11b6" translate="yes" xml:space="preserve">
          <source>The height in pixels of each row in the table.</source>
          <target state="translated">表の各行のピクセル単位の高さ。</target>
        </trans-unit>
        <trans-unit id="646d9ab9d69ac011a77c7d3bb4bcfd24e2ac4511" translate="yes" xml:space="preserve">
          <source>The height in pixels of the margin between the cells in each row.</source>
          <target state="translated">各行のセル間のマージンの高さをピクセル単位で指定します。</target>
        </trans-unit>
        <trans-unit id="83ed1a6113277228a18b9d691ce3c2bc45f56c15" translate="yes" xml:space="preserve">
          <source>The height of cell.</source>
          <target state="translated">セルの高さ。</target>
        </trans-unit>
        <trans-unit id="da00b26100024c30455a77a2df48917625c3b007" translate="yes" xml:space="preserve">
          <source>The height of each tile if tiling has been set, or 0 otherwise.</source>
          <target state="translated">タイリングが設定されている場合は各タイルの高さ、そうでない場合は0。</target>
        </trans-unit>
        <trans-unit id="f23417dbb721134e36b8caed73cad75ac4c3a829" translate="yes" xml:space="preserve">
          <source>The height of each tile if tiling has been set, or 0 otherwise. The initial value is &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">タイリングが設定されている場合は各タイルの高さ、そうでない場合は0。初期値は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="510b0a31f4dcce94a238dea65e7e006e3dd7e168" translate="yes" xml:space="preserve">
          <source>The height of the &lt;code&gt;Rectangle&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Rectangle&lt;/code&gt; の高さ。</target>
        </trans-unit>
        <trans-unit id="3ef36e84a417d2fafbdf72cfa93d46b2a8b81517" translate="yes" xml:space="preserve">
          <source>The height of the arc that rounds off the corners.</source>
          <target state="translated">角を丸くした弧の高さ。</target>
        </trans-unit>
        <trans-unit id="d6a525b79763bd2b875b6764281475654bac67db" translate="yes" xml:space="preserve">
          <source>The height of the palette title.</source>
          <target state="translated">パレットタイトルの高さ。</target>
        </trans-unit>
        <trans-unit id="004e0f9b346cda939ac1004aca1e0896a17362cb" translate="yes" xml:space="preserve">
          <source>The height of the source image.</source>
          <target state="translated">ソース画像の高さを指定します。</target>
        </trans-unit>
        <trans-unit id="008df043b6acd32175c21c4e6511d767355b18ad" translate="yes" xml:space="preserve">
          <source>The height of this &lt;code&gt;Rectangle2D&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;Rectangle2D&lt;/code&gt; の高さ。</target>
        </trans-unit>
        <trans-unit id="d309edf78bb778186fb9cb4f6f6c1c3beee8b3fa" translate="yes" xml:space="preserve">
          <source>The height of this &lt;code&gt;RoundRectangle2D&lt;/code&gt;.</source>
          <target state="translated">この &lt;code&gt;RoundRectangle2D&lt;/code&gt; の高さ。</target>
        </trans-unit>
        <trans-unit id="f3ef74edb4754696c85f7e72673e45ddd4c19614" translate="yes" xml:space="preserve">
          <source>The height of this Raster.</source>
          <target state="translated">このラスターの高さ。</target>
        </trans-unit>
        <trans-unit id="edd2ebd147d4048eb2abcbda44a2f200cc96b903" translate="yes" xml:space="preserve">
          <source>The hide-window default window close operation</source>
          <target state="translated">hide-window のデフォルトのウィンドウクローズ操作</target>
        </trans-unit>
        <trans-unit id="5737454dda055bd8bb162cd9eb4846920e7b432e" translate="yes" xml:space="preserve">
          <source>The high threshold value.</source>
          <target state="translated">閾値が高いこと。</target>
        </trans-unit>
        <trans-unit id="15326738362d08a71045fe2aaa50b89b8bdc9feb" translate="yes" xml:space="preserve">
          <source>The higher-level code that calls getCustomEditor may either embed the Component in some larger property sheet, or it may put it in its own individual dialog, or ...</source>
          <target state="translated">getCustomEditorを呼び出す上位レベルのコードは、コンポーネントをより大きなプロパティシートに埋め込むか、個別のダイアログに配置するか、または...</target>
        </trans-unit>
        <trans-unit id="960d5fb054f1e3fe7c0a799520ce868908c47938" translate="yes" xml:space="preserve">
          <source>The highest justification priority.</source>
          <target state="translated">正当化の優先順位が一番高い。</target>
        </trans-unit>
        <trans-unit id="9b75574b2286c0f20e97f602454a50fa333e3d7f" translate="yes" xml:space="preserve">
          <source>The highlights (if any) are painted.</source>
          <target state="translated">ハイライト(あれば)が塗られています。</target>
        </trans-unit>
        <trans-unit id="31982dd70867d5c4e880c2e13841ee34ddf0228e" translate="yes" xml:space="preserve">
          <source>The historical name of this encoding, or &lt;code&gt;null&lt;/code&gt; if the stream has been closed</source>
          <target state="translated">このエンコーディングの履歴名。ストリームが閉じている場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="54f0c950a5ffae3623bf86533115f2ac87fb076a" translate="yes" xml:space="preserve">
          <source>The historical name of this encoding, or possibly &lt;code&gt;null&lt;/code&gt; if the stream has been closed</source>
          <target state="translated">このエンコーディングの歴史的な名前、またはストリームが閉じられている場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4119b3c56ec8cdf2cd86fad835660f7db959c4e5" translate="yes" xml:space="preserve">
          <source>The hold count information is typically only used for testing and debugging purposes. For example, if a certain section of code should not be entered with the lock already held then we can assert that fact:</source>
          <target state="translated">ホールド回数の情報は、通常、テストとデバッグの目的でのみ使用されます。例えば、あるコードのセクションでロックが保持されている状態で入力すべきではない場合、その事実を主張することができます。</target>
        </trans-unit>
        <trans-unit id="feb71ca01e20f35ec2e60135062bb088ddef248f" translate="yes" xml:space="preserve">
          <source>The hook is said to bind the call site to a target method handle, and a typical action would be &lt;code&gt;someTarget.bindTo(this)&lt;/code&gt;. However, the hook is free to take any action whatever, including ignoring the call site and returning a constant target.</source>
          <target state="translated">フックは呼び出しサイトをターゲットメソッドハンドルにバインドすると言われており、一般的なアクションは &lt;code&gt;someTarget.bindTo(this)&lt;/code&gt; です。ただし、フックは、呼び出しサイトを無視したり、一定のターゲットを返したりするなど、何でも自由に実行できます。</target>
        </trans-unit>
        <trans-unit id="bb3e245037ba7cfe8449f5732d485dda63526de4" translate="yes" xml:space="preserve">
          <source>The horizontal alignment of &lt;code&gt;JTextField&lt;/code&gt; can be set to be left justified, leading justified, centered, right justified or trailing justified. Right/trailing justification is useful if the required size of the field text is smaller than the size allocated to it. This is determined by the &lt;code&gt;setHorizontalAlignment&lt;/code&gt; and &lt;code&gt;getHorizontalAlignment&lt;/code&gt; methods. The default is to be leading justified.</source>
          <target state="translated">&lt;code&gt;JTextField&lt;/code&gt; の水平方向の配置は、左揃え、先頭揃え、中央揃え、右揃え、または末尾揃えに設定できます。右/末尾の位置揃えは、フィールドテキストの必要なサイズが割り当てられたサイズよりも小さい場合に役立ちます。これは、 &lt;code&gt;setHorizontalAlignment&lt;/code&gt; メソッドと &lt;code&gt;getHorizontalAlignment&lt;/code&gt; メソッドによって決定されます。デフォルトでは、先頭が正当化されます。</target>
        </trans-unit>
        <trans-unit id="d451faf770164fc6cddda0afa6e5c80cbf0a8e5a" translate="yes" xml:space="preserve">
          <source>The horizontal axis consists of a sequential group containing two parallel groups. The first parallel group contains the labels, and the second parallel group contains the text fields.</source>
          <target state="translated">横軸は、2つの平行グループを含むシーケンシャルグループで構成されています。第一の平行グループはラベルを含み、第二の平行グループはテキストフィールドを含む。</target>
        </trans-unit>
        <trans-unit id="113ff9348c7a1f504d7da5d3492b39b54a0bb923" translate="yes" xml:space="preserve">
          <source>The horizontal coordinate at which the event occurred relative to the DOM implementation's client area.</source>
          <target state="translated">DOM 実装のクライアント領域に対するイベントが発生した水平座標。</target>
        </trans-unit>
        <trans-unit id="6e9b66c91d2663a72807b0247f903e14bb71380d" translate="yes" xml:space="preserve">
          <source>The horizontal coordinate at which the event occurred relative to the origin of the screen coordinate system.</source>
          <target state="translated">画面座標系の原点に対するイベントが発生した水平座標。</target>
        </trans-unit>
        <trans-unit id="8154d08b076cdc7ad41f96fe6859cc9b2e54ac2c" translate="yes" xml:space="preserve">
          <source>The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default.</source>
          <target state="translated">ノード間の脚の水平要素は、デフォルトでは子ノードの左側の右側から始まります。</target>
        </trans-unit>
        <trans-unit id="ea33749c268bb127682d2031c5bceb8a153985c1" translate="yes" xml:space="preserve">
          <source>The horizontal element of legs between nodes starts at the right of the left-hand side of the child node by default. This method makes the leg end before that.</source>
          <target state="translated">ノード間の脚の水平要素は、デフォルトでは子ノードの左側の右側から始まります。この方法では、その前に脚を終了させます。</target>
        </trans-unit>
        <trans-unit id="a78eb699ee386d149fce0ecce892268c6bd08062" translate="yes" xml:space="preserve">
          <source>The host component of a URI cannot contain escaped octets, hence this method does not perform any decoding.</source>
          <target state="translated">URIのホストコンポーネントはエスケープされたオクテットを含むことができないので、このメソッドはデコードを行いません。</target>
        </trans-unit>
        <trans-unit id="34bc17988021d57400932c60a1e04c33487914e0" translate="yes" xml:space="preserve">
          <source>The host component of a URI, if defined, will have one of the following forms:</source>
          <target state="translated">URIのホストコンポーネントは、定義されている場合、以下のいずれかの形式を持つ。</target>
        </trans-unit>
        <trans-unit id="bab1b3cf2cb0aea0d2eaa0c153c81181ea3acbd4" translate="yes" xml:space="preserve">
          <source>The host component of this URI, or &lt;code&gt;null&lt;/code&gt; if the host is undefined</source>
          <target state="translated">このURIのホストコンポーネント、またはホストが未定義の場合は &lt;code&gt;null&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb770726793d61fc3715477603a657f226342af0" translate="yes" xml:space="preserve">
          <source>The host is expressed as a DNS name, as a numerical IP address, or as &quot;localhost&quot; (for the local machine). The wildcard &quot;*&quot; may be included once in a DNS name host specification. If it is included, it must be in the leftmost position, as in &quot;*.sun.com&quot;.</source>
          <target state="translated">ホストは、DNS名、数値IPアドレス、または「localhost」(ローカルマシンの場合)で表現されます。ワイルドカード「*」は、DNS名のホスト指定に一度だけ含めることができます。ワイルドカード &quot;*&quot;を含む場合は、&quot;*.sun.com &quot;のように左端の位置でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7e252805e8eb7c5662da677e362f2cd533b3c21d" translate="yes" xml:space="preserve">
          <source>The host name can either be a machine name, such as &quot;&lt;code&gt;java.sun.com&lt;/code&gt;&quot;, or a textual representation of its IP address.</source>
          <target state="translated">ホスト名には、「 &lt;code&gt;java.sun.com&lt;/code&gt; 」などのマシン名、またはIPアドレスのテキスト表現を使用できます。</target>
        </trans-unit>
        <trans-unit id="fe1afa1c850d1e44153fc7f23be8c095a3d2063c" translate="yes" xml:space="preserve">
          <source>The host name can either be a machine name, such as &quot;&lt;code&gt;java.sun.com&lt;/code&gt;&quot;, or a textual representation of its IP address. If a literal IP address is supplied, only the validity of the address format is checked.</source>
          <target state="translated">ホスト名には、「 &lt;code&gt;java.sun.com&lt;/code&gt; 」などのマシン名、またはIPアドレスのテキスト表現を使用できます。リテラルIPアドレスが指定されている場合、アドレス形式の有効性のみがチェックされます。</target>
        </trans-unit>
        <trans-unit id="7453f74d08a304c820da7c292de80356ba304cac" translate="yes" xml:space="preserve">
          <source>The host part of the Service URL.</source>
          <target state="translated">サービスURLのホスト部分。</target>
        </trans-unit>
        <trans-unit id="8a6d6b969a44478105ab1226785be062f3948eb1" translate="yes" xml:space="preserve">
          <source>The host part of the Service URL. If the Service URL was constructed with the constructor that takes a URL string parameter, the result is the substring specifying the host in that URL. If the Service URL was constructed with a constructor that takes a separate host parameter, the result is the string that was specified. If that string was null, the result is &lt;code&gt;InetAddress.getLocalHost().getHostName()&lt;/code&gt; if local host name can be resolved to an IP. Else numeric IP address of an active network interface will be used.</source>
          <target state="translated">サービスURLのホスト部分。サービスURLがURL文字列パラメーターを受け取るコンストラクターで構築された場合、結果はそのURLのホストを指定する部分文字列になります。サービスURLが、個別のホストパラメーターを受け取るコンストラクターを使用して構築された場合、結果は指定された文字列になります。その文字列がnullの場合、ローカルホスト名をIPに解決できると、結果は &lt;code&gt;InetAddress.getLocalHost().getHostName()&lt;/code&gt; なります。それ以外の場合は、アクティブなネットワークインターフェイスの数値IPアドレスが使用されます。</target>
        </trans-unit>
        <trans-unit id="a3428c73a7d464a7c6ecc80b4fae8fd1231500c2" translate="yes" xml:space="preserve">
          <source>The host part of the Service URL. If the Service URL was constructed with the constructor that takes a URL string parameter, the result is the substring specifying the host in that URL. If the Service URL was constructed with a constructor that takes a separate host parameter, the result is the string that was specified. If that string was null, the result is &lt;code&gt;InetAddress.getLocalHost().getHostName()&lt;/code&gt;.</source>
          <target state="translated">サービスURLのホスト部分。サービスURLが、URL文字列パラメーターを使用するコンストラクターで作成された場合、結果はそのURLのホストを指定する部分文字列になります。サービスURLが、別個のホストパラメーターを取るコンストラクターで作成された場合、結果は指定された文字列になります。その文字列がnullの場合、結果は &lt;code&gt;InetAddress.getLocalHost().getHostName()&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d6f10298a308df49412c25a25857bf7b3ebae4b5" translate="yes" xml:space="preserve">
          <source>The hour of day of this &lt;code&gt;XMLGregorianCalendar&lt;/code&gt;, from 0 to 23.</source>
          <target state="translated">この &lt;code&gt;XMLGregorianCalendar&lt;/code&gt; の時刻（0から23）。</target>
        </trans-unit>
        <trans-unit id="1dcee8edf5db3c10041f3cbfdb216b1982c4cffa" translate="yes" xml:space="preserve">
          <source>The hour-of-am-pm.</source>
          <target state="translated">午前午後の時間帯。</target>
        </trans-unit>
        <trans-unit id="b720f6beb2fbf1d5c52c3391ad82145cb332f215" translate="yes" xml:space="preserve">
          <source>The hour-of-day.</source>
          <target state="translated">一日のうちの一時間。</target>
        </trans-unit>
        <trans-unit id="8d6745522470848c71447e96662401b92d690fee" translate="yes" xml:space="preserve">
          <source>The html spec does not specify how spaces are to be coalesced very well. Specifically, the following scenarios are not discussed (note that a space should be used here, but I am using &amp;amp;nbsp to force the space to be displayed):</source>
          <target state="translated">html仕様では、スペースをどのようにうまく結合するかを指定していません。具体的には、次のシナリオについては説明していません（ここではスペースを使用する必要がありますが、＆nbspを使用してスペースを強制的に表示しています）。</target>
        </trans-unit>
        <trans-unit id="01edc38d3117a9fe881c313fc58cca68efb8a8e6" translate="yes" xml:space="preserve">
          <source>The http response code.</source>
          <target state="translated">http レスポンスコードです。</target>
        </trans-unit>
        <trans-unit id="efbfcb29bb8aad23ba95b3d84c34e4e8deb5d165" translate="yes" xml:space="preserve">
          <source>The human-readable description of the feature.</source>
          <target state="translated">特徴の人間が読める記述。</target>
        </trans-unit>
        <trans-unit id="cb25decfe5ed2dfff9dc329951405e04436a4e8f" translate="yes" xml:space="preserve">
          <source>The human-readable description of the feature. It is recommended that subclasses call &lt;a href=&quot;#getDescription()&quot;&gt;&lt;code&gt;getDescription()&lt;/code&gt;&lt;/a&gt; rather than reading this field, and that they not change it.</source>
          <target state="translated">機能の人間が読める説明。サブクラスは、このフィールドを読み取るのではなく、&lt;a href=&quot;#getDescription()&quot;&gt; &lt;code&gt;getDescription()&lt;/code&gt; を&lt;/a&gt;呼び出し、変更しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b1398050303d32bd6bb6a984fba0512e95f44388" translate="yes" xml:space="preserve">
          <source>The human-readable description of the feature. It is recommended that subclasses call &lt;a href=&quot;mbeanfeatureinfo#getDescription--&quot;&gt;&lt;code&gt;getDescription()&lt;/code&gt;&lt;/a&gt; rather than reading this field, and that they not change it.</source>
          <target state="translated">人間が読める形式の機能の説明。サブクラスは、このフィールドを読み取るのではなく、&lt;a href=&quot;mbeanfeatureinfo#getDescription--&quot;&gt; &lt;code&gt;getDescription()&lt;/code&gt; を&lt;/a&gt;呼び出すこと、およびそれらを変更しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="067c8f1c5a2df4367c4fb697f0db77afbe16cfb8" translate="yes" xml:space="preserve">
          <source>The hyperbolic cosine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の双曲線余弦。</target>
        </trans-unit>
        <trans-unit id="ac815b6ce55116fb0ad007c349798f1c55dd700a" translate="yes" xml:space="preserve">
          <source>The hyperbolic sine of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の双曲線正弦。</target>
        </trans-unit>
        <trans-unit id="f1dc45b4f7299ddca231f496c19774a95fb60160" translate="yes" xml:space="preserve">
          <source>The hyperbolic tangent of &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;x&lt;/code&gt; の双曲線正接。</target>
        </trans-unit>
        <trans-unit id="c47d8ef13a7a97ac1e829267770ee71c2e09e4d9" translate="yes" xml:space="preserve">
          <source>The icon cache</source>
          <target state="translated">アイコンキャッシュ</target>
        </trans-unit>
        <trans-unit id="3b164b99370dc1298ebcb383ecc869e03738287a" translate="yes" xml:space="preserve">
          <source>The icon shown in the top-left corner of this internal frame.</source>
          <target state="translated">この内枠の左上に表示されているアイコン。</target>
        </trans-unit>
        <trans-unit id="dea612915f2790cdf004fe380112ed112e6b74c8" translate="yes" xml:space="preserve">
          <source>The icon that is displayed when this internal frame is iconified.</source>
          <target state="translated">この内部フレームをアイコン化したときに表示されるアイコン。</target>
        </trans-unit>
        <trans-unit id="2982313ccbd2852c4e889f2aa881faf139812265" translate="yes" xml:space="preserve">
          <source>The icon that represents this file in the &lt;code&gt;JFileChooser&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;JFileChooser&lt;/code&gt; でこのファイルを表すアイコン。</target>
        </trans-unit>
        <trans-unit id="a959e29b115d33fd4c2adc0d849fb5ffe96d73a1" translate="yes" xml:space="preserve">
          <source>The icon to be used for tiling the border.</source>
          <target state="translated">境界線をタイル状にするときに使用するアイコンです。</target>
        </trans-unit>
        <trans-unit id="92c75c6e8f04988ee2d3ff9d4a41138b855c728a" translate="yes" xml:space="preserve">
          <source>The icon's size should be 16&amp;times;16 pixels.</source>
          <target state="translated">アイコンのサイズは16&amp;times;16ピクセルである必要があります。</target>
        </trans-unit>
        <trans-unit id="4a644dadf53aac7a46e5cb201730a658fdda2b46" translate="yes" xml:space="preserve">
          <source>The icon.</source>
          <target state="translated">アイコンです。</target>
        </trans-unit>
        <trans-unit id="39e35629c516ce597389cd6f5ffe71bbd24e90ee" translate="yes" xml:space="preserve">
          <source>The iconify button.</source>
          <target state="translated">アイコン化ボタンです。</target>
        </trans-unit>
        <trans-unit id="ff5cc3f9428241a3ab19fb18eaf8f2cb199e0a78" translate="yes" xml:space="preserve">
          <source>The iconify icon.</source>
          <target state="translated">アイコン化したアイコンです。</target>
        </trans-unit>
        <trans-unit id="5ceebf4829e52c6881341df19a363dee2748a39d" translate="yes" xml:space="preserve">
          <source>The id of the authorized user. &lt;code&gt;null&lt;/code&gt; means the authorization failed.</source>
          <target state="translated">許可されたユーザーのID。 &lt;code&gt;null&lt;/code&gt; は、認証が失敗したことを意味します。</target>
        </trans-unit>
        <trans-unit id="190daa117302150eaa044ad50f789c954c118362" translate="yes" xml:space="preserve">
          <source>The id of this attribute. It cannot be null.</source>
          <target state="translated">この属性のID。ヌルにすることはできません。</target>
        </trans-unit>
        <trans-unit id="94bb0ffe35167c0644337c9a1cb414dc41add78f" translate="yes" xml:space="preserve">
          <source>The identifier for a registered activation group serves several purposes:</source>
          <target state="translated">登録された活性化グループの識別子には、いくつかの目的があります。</target>
        </trans-unit>
        <trans-unit id="2aebdd3a076ec94a6f6447bf5af334d3f691af59" translate="yes" xml:space="preserve">
          <source>The identifier for a registered activation group serves several purposes: identifies the group uniquely within the activation system, and contains a reference to the group's activation system so that the group can contact its activation system when necessary.</source>
          <target state="translated">登録された活性化グループの識別子は、活性化システム内で一意にグループを識別し、グループが必要に応じて活性化システムに連絡できるように、グループの活性化システムへの参照を含んでいます。</target>
        </trans-unit>
        <trans-unit id="daba0b23189a9e6380ffb117c81b7b9d322721c8" translate="yes" xml:space="preserve">
          <source>The identifier for the Backward focus traversal keys.</source>
          <target state="translated">後方焦点探索キーの識別子。</target>
        </trans-unit>
        <trans-unit id="c710666b83fa17426a3e8d39e8ab1757aa0bee61" translate="yes" xml:space="preserve">
          <source>The identifier for the Down Cycle focus traversal keys.</source>
          <target state="translated">ダウンサイクルのフォーカス移動キーの識別子。</target>
        </trans-unit>
        <trans-unit id="1594e87372197359f6d29f4e5950f77a7b591e90" translate="yes" xml:space="preserve">
          <source>The identifier for the Forward focus traversal keys.</source>
          <target state="translated">Forward focus トラバーサルキーの識別子。</target>
        </trans-unit>
        <trans-unit id="4e72102fbc365551e48e4511cc4337e698d13e09" translate="yes" xml:space="preserve">
          <source>The identifier for the Up Cycle focus traversal keys.</source>
          <target state="translated">Up Cycle フォーカス・トラバーサル・キーの識別子。</target>
        </trans-unit>
        <trans-unit id="af4834bd960aa2b9216df25c846ec21872b9bcac" translate="yes" xml:space="preserve">
          <source>The identifier of the new created timer notification.</source>
          <target state="translated">新規作成されたタイマー通知の識別子。</target>
        </trans-unit>
        <trans-unit id="9f826dacde229ce2d8640f93c05a284337137571" translate="yes" xml:space="preserve">
          <source>The identifier.</source>
          <target state="translated">識別子です。</target>
        </trans-unit>
        <trans-unit id="5f01919588f40a4b942e738f32090ead7b0d1160" translate="yes" xml:space="preserve">
          <source>The identity constraint says that for any partially accumulated result, combining it with an empty result container must produce an equivalent result. That is, for a partially accumulated result &lt;code&gt;a&lt;/code&gt; that is the result of any series of accumulator and combiner invocations, &lt;code&gt;a&lt;/code&gt; must be equivalent to &lt;code&gt;combiner.apply(a, supplier.get())&lt;/code&gt;.</source>
          <target state="translated">アイデンティティ制約は、部分的に蓄積された結果については、それを空の結果コンテナと組み合わせると同等の結果が生成される必要があることを示しています。つまり、アキュムレータとコンバイナの一連の呼び出しの結果である部分的に蓄積された結果 &lt;code&gt;a&lt;/code&gt; の場合、aは、 &lt;code&gt;combiner.apply(a, supplier.get())&lt;/code&gt; と同等で &lt;code&gt;a&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="83d98d6fb589e5da25e66f09be93daaabac69244" translate="yes" xml:space="preserve">
          <source>The identity of a function object produced by deserializing the serialized form is unpredictable, and therefore identity-sensitive operations (such as reference equality, object locking, and &lt;code&gt;System.identityHashCode()&lt;/code&gt; may produce different results in different implementations, or even upon different deserializations in the same implementation.</source>
          <target state="translated">シリアル化された形式を逆シリアル化することによって生成される関数オブジェクトのIDは予測できないため、IDに依存する操作（参照の同等性、オブジェクトのロック、 &lt;code&gt;System.identityHashCode()&lt;/code&gt; など)は、実装ごとに、または同じ実装。</target>
        </trans-unit>
        <trans-unit id="a98ad4c844ccaeef716227f0929dd675df827093" translate="yes" xml:space="preserve">
          <source>The identity of a remote client of the JMX Remote API.</source>
          <target state="translated">JMX Remote API のリモートクライアントの ID。</target>
        </trans-unit>
        <trans-unit id="19fe17d5c256a0124b906229dac6f2ed7989ca1a" translate="yes" xml:space="preserve">
          <source>The identity of an element involves implicit state not directly accessible from the element's methods, including state about the presence of unrelated types. Element objects created by different implementations of these interfaces should</source>
          <target state="translated">要素の同一性には、要素のメソッドから直接アクセスできない暗黙の状態が含まれます。これらのインタフェースの異なる実装によって作成された要素オブジェクトは</target>
        </trans-unit>
        <trans-unit id="c084425fd634ec561ebf2e67c297bae72cc52903" translate="yes" xml:space="preserve">
          <source>The identity of the value does not matter, only the actual value. For example, &lt;code&gt;TextAttribute.WEIGHT_BOLD&lt;/code&gt; and &lt;code&gt;Float.valueOf(2.0f)&lt;/code&gt; indicate the same &lt;code&gt;WEIGHT&lt;/code&gt;.</source>
          <target state="translated">値のIDは重要ではなく、実際の値のみが重要です。たとえば、 &lt;code&gt;TextAttribute.WEIGHT_BOLD&lt;/code&gt; と &lt;code&gt;Float.valueOf(2.0f)&lt;/code&gt; は同じ &lt;code&gt;WEIGHT&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="50a057a048396611cc27a43faa15d99cedba2e6f" translate="yes" xml:space="preserve">
          <source>The illegal Unicode code point</source>
          <target state="translated">違法なUnicodeコードポイント</target>
        </trans-unit>
        <trans-unit id="f118b75c2086f0962577e58b3b46529624d030c6" translate="yes" xml:space="preserve">
          <source>The illegal charset name</source>
          <target state="translated">違法な文字コード名</target>
        </trans-unit>
        <trans-unit id="213794262dbeac8bb81e8cb800deb620866f8fde" translate="yes" xml:space="preserve">
          <source>The image contain a single static image.</source>
          <target state="translated">画像には、1枚の静止画像が含まれています。</target>
        </trans-unit>
        <trans-unit id="4e094f4a0323dac0ba9d9262bdc8616f1eab3127" translate="yes" xml:space="preserve">
          <source>The image contain a single static image. The pixels will be defined in calls to the setPixels methods and then the imageComplete method will be called with the STATICIMAGEDONE flag after which no more image data will be delivered. An example of an image type which would not meet these criteria would be the output of a video feed, or the representation of a 3D rendering being manipulated by the user. The end of each frame in those types of images will be indicated by calling imageComplete with the SINGLEFRAMEDONE flag.</source>
          <target state="translated">画像は単一の静的画像を含みます。ピクセルはsetPixelsメソッドの呼び出しで定義され、その後、imageCompleteメソッドがSTATICIMAGEDONEフラグと共に呼び出され、その後、画像データは配信されません。これらの基準を満たさない画像タイプの例としては、ビデオフィードの出力や、ユーザーが操作している3Dレンダリングの表現などがあります。これらのタイプの画像の各フレームの終了は、 imageComplete を SINGLEFRAMEDONE フラグを指定して呼び出すことで示されます。</target>
        </trans-unit>
        <trans-unit id="650107fc502ca4b1e9a1b9ac9eb0045aaaf8cb53" translate="yes" xml:space="preserve">
          <source>The image contents may be supplied later using the &lt;code&gt;replacePixels&lt;/code&gt; method. The insertion is not complete until a call to &lt;code&gt;endInsertEmpty&lt;/code&gt; occurs. Calls to &lt;code&gt;prepareReplacePixels&lt;/code&gt;, &lt;code&gt;replacePixels&lt;/code&gt;, and &lt;code&gt;endReplacePixels&lt;/code&gt; may occur between calls to &lt;code&gt;prepareInsertEmpty&lt;/code&gt; and &lt;code&gt;endInsertEmpty&lt;/code&gt;. However, calls to &lt;code&gt;prepareInsertEmpty&lt;/code&gt; cannot be nested, and calls to &lt;code&gt;prepareWriteEmpty&lt;/code&gt; and &lt;code&gt;prepareInsertEmpty&lt;/code&gt; may not be interspersed.</source>
          <target state="translated">画像のコンテンツは、 &lt;code&gt;replacePixels&lt;/code&gt; メソッドを使用して提供できます。 &lt;code&gt;endInsertEmpty&lt;/code&gt; の呼び出しが発生するまで、挿入は完了しません。通話 &lt;code&gt;prepareReplacePixels&lt;/code&gt; 、 &lt;code&gt;replacePixels&lt;/code&gt; 、および &lt;code&gt;endReplacePixels&lt;/code&gt; はへの呼び出しの間で発生する可能性 &lt;code&gt;prepareInsertEmpty&lt;/code&gt; と &lt;code&gt;endInsertEmpty&lt;/code&gt; 。ただし、 &lt;code&gt;prepareInsertEmpty&lt;/code&gt; の呼び出しはネストできません &lt;code&gt;prepareWriteEmpty&lt;/code&gt; と &lt;code&gt;prepareInsertEmpty&lt;/code&gt; の呼び出しを混在させることはできません。</target>
        </trans-unit>
        <trans-unit id="82167449f7a5a3fc43bd8123d78d62ad91b97c2a" translate="yes" xml:space="preserve">
          <source>The image creation process was deliberately aborted.</source>
          <target state="translated">画像作成は意図的に中止した。</target>
        </trans-unit>
        <trans-unit id="0b03f1837d3a60fb7040339f17e7b24479ff74be" translate="yes" xml:space="preserve">
          <source>The image data is downloaded asynchronously in another thread, and an appropriately scaled screen representation of the image is generated.</source>
          <target state="translated">画像データは別のスレッドで非同期的にダウンロードされ、画像の適切にスケーリングされた画面表現が生成されます。</target>
        </trans-unit>
        <trans-unit id="1d33b4e926de1659092487a8d33def5c221eb13e" translate="yes" xml:space="preserve">
          <source>The image data may take the form of either a &lt;code&gt;RenderedImage&lt;/code&gt;, or a &lt;code&gt;Raster&lt;/code&gt;. Reader methods that return an &lt;code&gt;IIOImage&lt;/code&gt; will always return a &lt;code&gt;BufferedImage&lt;/code&gt; using the &lt;code&gt;RenderedImage&lt;/code&gt; reference. Writer methods that accept an &lt;code&gt;IIOImage&lt;/code&gt; will always accept a &lt;code&gt;RenderedImage&lt;/code&gt;, and may optionally accept a &lt;code&gt;Raster&lt;/code&gt;.</source>
          <target state="translated">画像データは、 &lt;code&gt;RenderedImage&lt;/code&gt; または &lt;code&gt;Raster&lt;/code&gt; のいずれかの形式を取ります。 &lt;code&gt;IIOImage&lt;/code&gt; を返すリーダーメソッドは常に、 &lt;code&gt;RenderedImage&lt;/code&gt; 参照を使用して &lt;code&gt;BufferedImage&lt;/code&gt; を返します。 &lt;code&gt;IIOImage&lt;/code&gt; を受け入れるライターメソッドは常に &lt;code&gt;RenderedImage&lt;/code&gt; を受け入れ、オプションで &lt;code&gt;Raster&lt;/code&gt; を受け入れることもできます。</target>
        </trans-unit>
        <trans-unit id="a9634015de44fa10469d261b81d7bd8321a94836" translate="yes" xml:space="preserve">
          <source>The image is complete and there are no more pixels or frames to be delivered.</source>
          <target state="translated">画像が完成しており、配信する画素数やコマ数が無くなっています。</target>
        </trans-unit>
        <trans-unit id="ffbcc0db34f9156b59f14025e1a392763c0be17b" translate="yes" xml:space="preserve">
          <source>The image is drawn inside the specified rectangle of this graphics context's coordinate space, and is scaled if necessary. Transparent pixels are drawn in the specified background color. This operation is equivalent to filling a rectangle of the width and height of the specified image with the given color and then drawing the image on top of it, but possibly more efficient.</source>
          <target state="translated">画像は、 このグ ラ フ ィ ッ ク ス コ ン テ キ ス ト の座標空間の指定 さ れた矩形内に描かれ、 必要に応 じ て拡大縮小 さ れます。透過ピクセルは指定された背景色で描画されます。この操作は、指定された画像の幅と高さの矩形を指定された色で塗りつぶし、その上に画像を描画するのと同じですが、効率が良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="31a613492c855530e0498145a239fd12f412a1fa" translate="yes" xml:space="preserve">
          <source>The image is drawn inside the specified rectangle of this graphics context's coordinate space, and is scaled if necessary. Transparent pixels do not affect whatever pixels are already there.</source>
          <target state="translated">画像は、 このグラフィックスコンテキストの座標空間の指定された矩形の内側に描かれ、 必要に応じて拡大縮小されます。透過ピクセルは、既に存在するピクセルに影響を与えません。</target>
        </trans-unit>
        <trans-unit id="cbf52c5d0d3f8fc66a94d98b15dd5920f92b3d76" translate="yes" xml:space="preserve">
          <source>The image may contain transparent areas, and thus the reported bounds may be larger than the visible splash screen image on the screen.</source>
          <target state="translated">画像には透明領域が含まれていてもよく、したがって、報告された境界は、スクリーン上の可視スプラッシュスクリーン画像よりも大きくなっていてもよい。</target>
        </trans-unit>
        <trans-unit id="2b29540773a3e6ba434d2b097fffa0c79873a7a0" translate="yes" xml:space="preserve">
          <source>The image may contain transparent areas, and thus the reported size may be larger than the visible splash screen image on the screen.</source>
          <target state="translated">画像は透明領域を含んでいてもよく、したがって、報告されたサイズは、スクリーン上の可視スプラッシュスクリーン画像よりも大きくなっていてもよい。</target>
        </trans-unit>
        <trans-unit id="bcee0bb2e49666ba14873e56d922ec392d842b66" translate="yes" xml:space="preserve">
          <source>The image returned will be formatted according to the first &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; returned from &lt;code&gt;getImageTypes&lt;/code&gt;.</source>
          <target state="translated">返される画像は、 &lt;code&gt;getImageTypes&lt;/code&gt; から返される最初の &lt;code&gt;ImageTypeSpecifier&lt;/code&gt; に従ってフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="1bf117f3a022e647194270c3833ce7a8f6d654f4" translate="yes" xml:space="preserve">
          <source>The imageComplete method is called when the ImageProducer is finished delivering all of the pixels that the source image contains, or when a single frame of a multi-frame animation has been completed, or when an error in loading or producing the image has occurred.</source>
          <target state="translated">imageComplete メソッドは、ImageProducer がソース画像に含まれるすべてのピクセルの配信を終了したとき、マルチフレームアニメーションの 1 フレームが完了したとき、または画像の読み込みや生成にエラーが発生したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fe307a07bd67c06b79d1756e6794cbc38cca603b" translate="yes" xml:space="preserve">
          <source>The imageComplete method is called when the ImageProducer is finished delivering all of the pixels that the source image contains, or when a single frame of a multi-frame animation has been completed, or when an error in loading or producing the image has occurred. The ImageConsumer should remove itself from the list of consumers registered with the ImageProducer at this time, unless it is interested in successive frames.</source>
          <target state="translated">imageComplete メソッドは、ImageProducer がソース画像に含まれるすべてのピクセルの配信を終了したとき、またはマルチフレームアニメーションの 1 フレームが完了したとき、または画像の読み込みまたは生成にエラーが発生したときに呼び出されます。ImageConsumerは、連続するフレームに興味がない限り、この時点でImageProducerに登録されているコンシューマーのリストから自分自身を削除しなければならない。</target>
        </trans-unit>
        <trans-unit id="dc3738c35dfe132a23ab59ac962e72a1fc1c4392" translate="yes" xml:space="preserve">
          <source>The imageComplete method is part of the ImageConsumer API which this class must implement to retrieve the pixels.</source>
          <target state="translated">imageComplete メソッドは ImageConsumer API の一部で、このクラスはピクセルを取得するために実装しなければなりません。</target>
        </trans-unit>
        <trans-unit id="92ba74861aa993d420846e0ec04af01afba0f5ee" translate="yes" xml:space="preserve">
          <source>The immediate children of the container are printed with an indentation of &lt;code&gt;indent+1&lt;/code&gt;. The children of those children are printed at &lt;code&gt;indent+2&lt;/code&gt; and so on.</source>
          <target state="translated">コンテナの直接の子は、 &lt;code&gt;indent+1&lt;/code&gt; インデントで印刷されます。それらの子の子は、 &lt;code&gt;indent+2&lt;/code&gt; などで印刷されます。</target>
        </trans-unit>
        <trans-unit id="33c42e040f3646db66a28b2d1f494d78e84172c2" translate="yes" xml:space="preserve">
          <source>The implementation chooses a buffer size, which is measured in bytes but which encompasses an integral number of sample frames. The buffer size that the system has chosen may be queried by subsequently calling &lt;a href=&quot;dataline#getBufferSize()&quot;&gt;&lt;code&gt;DataLine.getBufferSize()&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">実装は、バイト単位で測定されるが、整数個のサンプルフレームを含むバッファサイズを選択します。システムが選択したバッファサイズは、後で&lt;a href=&quot;dataline#getBufferSize()&quot;&gt; &lt;code&gt;DataLine.getBufferSize()&lt;/code&gt; を&lt;/a&gt;呼び出すことで照会できます。</target>
        </trans-unit>
        <trans-unit id="e197f5a9ad36c59e97de5e88bba346ebf104c3a2" translate="yes" xml:space="preserve">
          <source>The implementation chooses a buffer size, which is measured in bytes but which encompasses an integral number of sample frames. The buffer size that the system has chosen may be queried by subsequently calling &lt;a href=&quot;dataline#getBufferSize()&quot;&gt;&lt;code&gt;DataLine.getBufferSize()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実装は、バイト単位で測定されるが、整数個のサンプルフレームを含むバッファサイズを選択します。システムが選択したバッファサイズは、後で&lt;a href=&quot;dataline#getBufferSize()&quot;&gt; &lt;code&gt;DataLine.getBufferSize()&lt;/code&gt; を&lt;/a&gt;呼び出すことで照会できます。</target>
        </trans-unit>
        <trans-unit id="f6325bd4afd820329b33a81aad4acb98f22f1739" translate="yes" xml:space="preserve">
          <source>The implementation chooses a buffer size, which is measured in bytes but which encompasses an integral number of sample frames. The buffer size that the system has chosen may be queried by subsequently calling &lt;code&gt;&lt;a href=&quot;dataline#getBufferSize--&quot;&gt;&lt;code&gt;DataLine.getBufferSize()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">実装はバッファサイズを選択します。これはバイト単位で測定されますが、サンプルフレームの整数を含みます。システムが選択したバッファサイズは、後で &lt;code&gt;&lt;a href=&quot;dataline#getBufferSize--&quot;&gt;&lt;code&gt;DataLine.getBufferSize()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を呼び出すことによって照会できます。</target>
        </trans-unit>
        <trans-unit id="5d8ee360abb575ae83e0aad557bc14c7679e4103" translate="yes" xml:space="preserve">
          <source>The implementation chooses a buffer size, which is measured in bytes but which encompasses an integral number of sample frames. The buffer size that the system has chosen may be queried by subsequently calling &lt;code&gt;&lt;a href=&quot;dataline#getBufferSize--&quot;&gt;&lt;code&gt;DataLine.getBufferSize()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実装はバッファサイズを選択します。これはバイト単位で測定されますが、サンプルフレームの整数を含みます。システムが選択したバッファサイズは、続いて &lt;code&gt;&lt;a href=&quot;dataline#getBufferSize--&quot;&gt;&lt;code&gt;DataLine.getBufferSize()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; を呼び出すことによって照会できます。</target>
        </trans-unit>
        <trans-unit id="09ccd30cdba3e587d31b9f21539df9dbcdfde8d9" translate="yes" xml:space="preserve">
          <source>The implementation conforms to &lt;a href=&quot;http://www.ietf.org/rfc/rfc2965.txt&quot;&gt;RFC 2965&lt;/a&gt;, section 3.3.</source>
          <target state="translated">実装は&lt;a href=&quot;http://www.ietf.org/rfc/rfc2965.txt&quot;&gt;RFC 2965の&lt;/a&gt;セクション3.3に準拠しています。</target>
        </trans-unit>
        <trans-unit id="14e2c00678648d5a3c84fa75329fd77db6950875" translate="yes" xml:space="preserve">
          <source>The implementation creates a &lt;em&gt;&lt;a href=&quot;spliterator#binding&quot;&gt;late-binding&lt;/a&gt;&lt;/em&gt; spliterator from the set's &lt;code&gt;Iterator&lt;/code&gt;. The spliterator inherits the &lt;em&gt;fail-fast&lt;/em&gt; properties of the set's iterator. The created &lt;code&gt;Spliterator&lt;/code&gt; additionally reports &lt;a href=&quot;spliterator#SUBSIZED&quot;&gt;&lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">実装は、セットの &lt;code&gt;Iterator&lt;/code&gt; から遅延&lt;em&gt;&lt;a href=&quot;spliterator#binding&quot;&gt;バインディング&lt;/a&gt;&lt;/em&gt;スプリッターを作成します。スプリテレーターは、セットのイテレーターの&lt;em&gt;フェイルファスト&lt;/em&gt;プロパティを継承します。作成された &lt;code&gt;Spliterator&lt;/code&gt; はさらにSpliterator.SUBSIZEDを報告し&lt;a href=&quot;spliterator#SUBSIZED&quot;&gt; &lt;code&gt;Spliterator.SUBSIZED&lt;/code&gt; &lt;/a&gt;。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="5223f3996aa8fb012e6b7bd1bc47d31df8164864" translate="yes" xml:space="preserve">
          <source>The implementation ensures that the synthesizer is brought to a consistent state when jumping to the loop start point by sending appropriate controllers, pitch bend, and program change events.</source>
          <target state="translated">この実装では、適切なコントローラ、ピッチベンド、プログラム変更イベントを送信することで、ループの開始点にジャンプする際にシンセサイザーが一貫した状態になるようにしています。</target>
        </trans-unit>
        <trans-unit id="aa213c32e8080f7d4be6c40003d301082c11e27e" translate="yes" xml:space="preserve">
          <source>The implementation first checks to see if an expression with this value has already been written.</source>
          <target state="translated">実装はまず、この値を持つ式がすでに書き込まれているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="81e190cedf9e21a5a2481992af348a4d3f5f90b0" translate="yes" xml:space="preserve">
          <source>The implementation first checks to see if an expression with this value has already been written. If not, the expression is cloned, using the same procedure as &lt;code&gt;writeStatement&lt;/code&gt;, and the value of this expression is reconciled with the value of the cloned expression by calling &lt;code&gt;writeObject&lt;/code&gt;.</source>
          <target state="translated">実装は最初に、この値を持つ式がすでに書き込まれているかどうかを確認します。そうでない場合、式は &lt;code&gt;writeStatement&lt;/code&gt; と同じ手順を使用して複製され、この式の値は、 &lt;code&gt;writeObject&lt;/code&gt; を呼び出すことによって複製された式の値と一致します。</target>
        </trans-unit>
        <trans-unit id="bc0e80d3ab7d372a4a0c07c1b90ed127df13f7fa" translate="yes" xml:space="preserve">
          <source>The implementation in this class just returns &lt;a href=&quot;#DEFAULT_VALUE&quot;&gt;&lt;code&gt;DEFAULT_VALUE&lt;/code&gt;&lt;/a&gt;; subclasses will commonly override this method.</source>
          <target state="translated">The implementation in this class just returns &lt;a href=&quot;#DEFAULT_VALUE&quot;&gt; &lt;code&gt;DEFAULT_VALUE&lt;/code&gt; &lt;/a&gt;; subclasses will commonly override this method.</target>
        </trans-unit>
        <trans-unit id="8d9004fc45aa79bbeb3638cc4e2594da5ab2ce28" translate="yes" xml:space="preserve">
          <source>The implementation in this class throws &lt;code&gt;UnsupportedOperationException&lt;/code&gt; and performs no other action.</source>
          <target state="translated">The implementation in this class throws &lt;code&gt;UnsupportedOperationException&lt;/code&gt; and performs no other action.</target>
        </trans-unit>
        <trans-unit id="fb31750f24b5622b73c269c716ddbdb794191239" translate="yes" xml:space="preserve">
          <source>The implementation in this class throws an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; for the indicated conditions; overriding methods may choose to do otherwise.</source>
          <target state="translated">The implementation in this class throws an &lt;code&gt;IndexOutOfBoundsException&lt;/code&gt; for the indicated conditions; overriding methods may choose to do otherwise.</target>
        </trans-unit>
        <trans-unit id="e41c6d1c80d2a90b6d969a9d8d80248e7a24b028" translate="yes" xml:space="preserve">
          <source>The implementation in this class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;.</source>
          <target state="translated">The implementation in this class throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="2d2e0430763706ada574ef1a18c66c5e6280d189" translate="yes" xml:space="preserve">
          <source>The implementation is responsible of associating the appropriate media type with the serialized data.</source>
          <target state="translated">実装は、シリアライズされたデータに適切なメディアタイプを関連付ける責任があります。</target>
        </trans-unit>
        <trans-unit id="082ae6d11432c0c07be7bb9e88e34002e4494502" translate="yes" xml:space="preserve">
          <source>The implementation may constrain the set of processes by which the interprocess token may be imported, either as a function of local security policy, or as a result of implementation decisions. For example, some implementations may constrain contexts to be passed only between processes that run under the same account, or which are part of the same process group.</source>
          <target state="translated">実装では、ローカルセキュリティポリシーの機能として、または実装の決定の結果として、プロセス間トークンがインポートされるプロセスのセットを制限することができます。例えば、いくつかの実装では、同じアカウントの下で実行されるプロセス間、または同じプロセスグループの一部であるプロセス間でのみ渡されるコンテキストを制約することができます。</target>
        </trans-unit>
        <trans-unit id="9cb9f909f198fcf0061370bf797f93bff7fa7ff4" translate="yes" xml:space="preserve">
          <source>The implementation method is described with a method handle. In theory, any method handle could be used. Currently supported are direct method handles representing invocation of virtual, interface, constructor and static methods.</source>
          <target state="translated">実装方法は、メソッドハンドルで記述されています。理論的には、任意のメソッドハンドルを使用することができます。現在サポートされているのは、仮想メソッド、インターフェースメソッド、コンストラクタメソッド、スタティックメソッドの呼び出しを表す直接メソッドハンドルです。</target>
        </trans-unit>
        <trans-unit id="e0f9a4ef58c41d6065832b1b74a1b3fa3eaa4f52" translate="yes" xml:space="preserve">
          <source>The implementation must take the input object and add to it. The implementation defines the logic of the addition and is responsible for documenting that logic. It may use any method on &lt;code&gt;Temporal&lt;/code&gt; to query the temporal object and perform the addition. The returned object must have the same observable type as the input object</source>
          <target state="translated">実装は入力オブジェクトを受け取り、それに追加する必要があります。実装は追加のロジックを定義し、そのロジックの文書化を担当します。 &lt;code&gt;Temporal&lt;/code&gt; の任意のメソッドを使用して、temporalオブジェクトにクエリを実行し、加算を実行できます。返されるオブジェクトは、入力オブジェクトと同じ監視可能なタイプでなければなりません</target>
        </trans-unit>
        <trans-unit id="3e56e06001459e0c1e6e272244337fd5cebdd144" translate="yes" xml:space="preserve">
          <source>The implementation must take the input object and adjust it. The implementation defines the logic of the adjustment and is responsible for documenting that logic. It may use any method on &lt;code&gt;Temporal&lt;/code&gt; to query the temporal object and perform the adjustment. The returned object must have the same observable type as the input object</source>
          <target state="translated">実装は入力オブジェクトを受け取り、それを調整する必要があります。実装は調整のロジックを定義し、そのロジックを文書化する責任があります。 &lt;code&gt;Temporal&lt;/code&gt; の任意のメソッドを使用して、temporalオブジェクトをクエリし、調整を実行できます。返されるオブジェクトは、入力オブジェクトと同じ監視可能なタイプでなければなりません</target>
        </trans-unit>
        <trans-unit id="2da52b48d84c4b30715e4af7716531223f872291" translate="yes" xml:space="preserve">
          <source>The implementation must take the input object and query it. The implementation defines the logic of the query and is responsible for documenting that logic. It may use any method on &lt;code&gt;TemporalAccessor&lt;/code&gt; to determine the result. The input object must not be altered.</source>
          <target state="translated">実装は入力オブジェクトを取得してクエリする必要があります。実装はクエリのロジックを定義し、そのロジックの文書化を担当します。 &lt;code&gt;TemporalAccessor&lt;/code&gt; の任意のメソッドを使用して、結果を判別できます。入力オブジェクトは変更しないでください。</target>
        </trans-unit>
        <trans-unit id="2dacb5e6e4d33c85aaf3a8b2840566262196b216" translate="yes" xml:space="preserve">
          <source>The implementation must take the input object and subtract from it. The implementation defines the logic of the subtraction and is responsible for documenting that logic. It may use any method on &lt;code&gt;Temporal&lt;/code&gt; to query the temporal object and perform the subtraction. The returned object must have the same observable type as the input object</source>
          <target state="translated">実装は入力オブジェクトを受け取り、それから減算する必要があります。実装は、減算のロジックを定義し、そのロジックを文書化する責任があります。 &lt;code&gt;Temporal&lt;/code&gt; の任意のメソッドを使用して、temporalオブジェクトにクエリを実行し、減算を実行できます。返されるオブジェクトは、入力オブジェクトと同じ監視可能なタイプである必要があります</target>
        </trans-unit>
        <trans-unit id="14c4605c1fc41a74a7285633c2cb13fc37606aa9" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;ComboPopup&lt;/code&gt; that is used to show the popup.</source>
          <target state="translated">The implementation of &lt;code&gt;ComboPopup&lt;/code&gt; that is used to show the popup.</target>
        </trans-unit>
        <trans-unit id="71ce8f2e81c8d3437a0a5ec06854dc19be3b1bfa" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;replaceEditor&lt;/code&gt; should be coordinated with the &lt;code&gt;createEditor&lt;/code&gt; method.</source>
          <target state="translated">The implementation of &lt;code&gt;replaceEditor&lt;/code&gt; should be coordinated with the &lt;code&gt;createEditor&lt;/code&gt; method.</target>
        </trans-unit>
        <trans-unit id="bd649c4c9a306542067e2337ea94241b40146d2f" translate="yes" xml:space="preserve">
          <source>The implementation of &lt;code&gt;setSeed&lt;/code&gt; by class &lt;code&gt;Random&lt;/code&gt; happens to use only 48 bits of the given seed. In general, however, an overriding method may use all 64 bits of the &lt;code&gt;long&lt;/code&gt; argument as a seed value.</source>
          <target state="translated">&lt;code&gt;Random&lt;/code&gt; クラスによる &lt;code&gt;setSeed&lt;/code&gt; の実装は、指定されたシードの48ビットのみを使用します。ただし、一般に、オーバーライドするメソッドは、 &lt;code&gt;long&lt;/code&gt; 引数のすべての64ビットをシード値として使用できます。</target>
        </trans-unit>
        <trans-unit id="35791792ef6356de1f2cbc30dca9984d8aef3776" translate="yes" xml:space="preserve">
          <source>The implementation of a &lt;code&gt;ListResourceBundle&lt;/code&gt; subclass must be thread-safe if it's simultaneously used by multiple threads. The default implementations of the methods in this class are thread-safe.</source>
          <target state="translated">複数のスレッドで同時に使用される場合、 &lt;code&gt;ListResourceBundle&lt;/code&gt; サブクラスの実装はスレッドセーフでなければなりません。このクラスのメソッドのデフォルト実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="dbd88d54003995fa128d1a669f95113fbbc46b8d" translate="yes" xml:space="preserve">
          <source>The implementation of a &lt;code&gt;PropertyResourceBundle&lt;/code&gt; subclass must be thread-safe if it's simultaneously used by multiple threads. The default implementations of the non-abstract methods in this class are thread-safe.</source>
          <target state="translated">複数のスレッドで同時に使用される場合、 &lt;code&gt;PropertyResourceBundle&lt;/code&gt; サブクラスの実装はスレッドセーフでなければなりません。このクラスの非抽象メソッドのデフォルト実装はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="8f2a4a09568db481af411da9df2b6666a394506d" translate="yes" xml:space="preserve">
          <source>The implementation of a &lt;code&gt;ResourceBundle&lt;/code&gt; subclass must be thread-safe if it's simultaneously used by multiple threads. The default implementations of the non-abstract methods in this class, and the methods in the direct known concrete subclasses &lt;code&gt;ListResourceBundle&lt;/code&gt; and &lt;code&gt;PropertyResourceBundle&lt;/code&gt; are thread-safe.</source>
          <target state="translated">&lt;code&gt;ResourceBundle&lt;/code&gt; サブクラスの実装は、複数のスレッドで同時に使用される場合、スレッドセーフでなければなりません。このクラスの非抽象メソッドのデフォルト実装、および直接既知の具象サブクラス &lt;code&gt;ListResourceBundle&lt;/code&gt; と &lt;code&gt;PropertyResourceBundle&lt;/code&gt; のメソッドはスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="218d96d7349cb8c6c787276d3ab79190cbbdb85f" translate="yes" xml:space="preserve">
          <source>The implementation of a look and feel may choose to ignore this property.</source>
          <target state="translated">ルックアンドフィールの実装は、このプロパティを無視することを選択することができます。</target>
        </trans-unit>
        <trans-unit id="c837f88953461d8bc6a51ac1bbb4fcd58eec5398" translate="yes" xml:space="preserve">
          <source>The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt; does not guarantee that equivalent data flavors will have the same serialized representation. &lt;code&gt;DocFlavor&lt;/code&gt; does, and can be used in services which need this.</source>
          <target state="translated">The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt; does not guarantee that equivalent data flavors will have the same serialized representation. &lt;code&gt;DocFlavor&lt;/code&gt; does, and can be used in services which need this.</target>
        </trans-unit>
        <trans-unit id="967f67768043a0e5a6e3ce4151e32a33e8442d96" translate="yes" xml:space="preserve">
          <source>The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt; does not guarantee that equivalent data flavors will have the same serialized representation. DocFlavor does, and can be used in services which need this.</source>
          <target state="translated">クラス &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt; の実装は、同等のデータフレーバーが同じシリアル化表現を持つことを保証しません。DocFlavorは、これを必要とし、これを必要とするサービスで使用できます。</target>
        </trans-unit>
        <trans-unit id="5aa595b341b716ddfe95468de8d46da61dd15f01" translate="yes" xml:space="preserve">
          <source>The implementation of class &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt; includes a human presentable name as part of the serialized representation. This is not appropriate as part of a service matching constraint.</source>
          <target state="translated">クラス &lt;code&gt;java.awt.datatransfer.DataFlavor&lt;/code&gt; の実装には、シリアル化された表現の一部として、人間が提示できる名前が含まれています。これは、サービス照合制約の一部としては適切ではありません。</target>
        </trans-unit>
        <trans-unit id="6d605e7356769fdd893c4e8460accfdb98a6d781" translate="yes" xml:space="preserve">
          <source>The implementation of selectors, selectable channels, and selection keys can be replaced by &quot;plugging in&quot; an alternative definition or instance of the &lt;a href=&quot;spi/selectorprovider&quot;&gt;&lt;code&gt;SelectorProvider&lt;/code&gt;&lt;/a&gt; class defined in the &lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.nio.channels.spi&lt;/code&gt;&lt;/a&gt; package. It is not expected that many developers will actually make use of this facility; it is provided primarily so that sophisticated users can take advantage of operating-system-specific I/O-multiplexing mechanisms when very high performance is required.</source>
          <target state="translated">The implementation of selectors, selectable channels, and selection keys can be replaced by &quot;plugging in&quot; an alternative definition or instance of the &lt;a href=&quot;spi/selectorprovider&quot;&gt; &lt;code&gt;SelectorProvider&lt;/code&gt; &lt;/a&gt; class defined in the &lt;a href=&quot;spi/package-summary&quot;&gt; &lt;code&gt;java.nio.channels.spi&lt;/code&gt; &lt;/a&gt; package. It is not expected that many developers will actually make use of this facility; it is provided primarily so that sophisticated users can take advantage of operating-system-specific I/O-multiplexing mechanisms when very high performance is required.</target>
        </trans-unit>
        <trans-unit id="f3f640b6933929080a0a003b9d5726689efac7dc" translate="yes" xml:space="preserve">
          <source>The implementation of selectors, selectable channels, and selection keys can be replaced by &quot;plugging in&quot; an alternative definition or instance of the &lt;a href=&quot;spi/selectorprovider&quot;&gt;&lt;code&gt;SelectorProvider&lt;/code&gt;&lt;/a&gt; class defined in the &lt;code&gt;&lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.nio.channels.spi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; package. It is not expected that many developers will actually make use of this facility; it is provided primarily so that sophisticated users can take advantage of operating-system-specific I/O-multiplexing mechanisms when very high performance is required.</source>
          <target state="translated">セレクター、選択可能なチャネル、および選択キーの実装は、 &lt;code&gt;&lt;a href=&quot;spi/package-summary&quot;&gt;&lt;code&gt;java.nio.channels.spi&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; パッケージで定義されている&lt;a href=&quot;spi/selectorprovider&quot;&gt; &lt;code&gt;SelectorProvider&lt;/code&gt; &lt;/a&gt;クラスの代替定義またはインスタンスを「プラグイン」することで置き換えることができます。多くの開発者が実際にこの機能を利用することは期待されていません。これは主に、高度なユーザーが非常に高いパフォーマンスが必要な場合にオペレーティングシステム固有のI / O多重化メカニズムを利用できるようにするために提供されます。</target>
        </trans-unit>
        <trans-unit id="822ffb50765d2b429b6b3dd79cd26cf2aa79f154" translate="yes" xml:space="preserve">
          <source>The implementation of the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;execute&lt;/code&gt; in the &lt;code&gt;JdbcRowSet&lt;/code&gt; reference implementation differs from that in the &lt;code&gt;CachedRowSet&lt;/code&gt;&amp;trade; reference implementation to account for the different requirements of connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects.</source>
          <target state="translated">The implementation of the &lt;code&gt;RowSet&lt;/code&gt; method &lt;code&gt;execute&lt;/code&gt; in the &lt;code&gt;JdbcRowSet&lt;/code&gt; reference implementation differs from that in the &lt;code&gt;CachedRowSet&lt;/code&gt; &amp;trade; reference implementation to account for the different requirements of connected and disconnected &lt;code&gt;RowSet&lt;/code&gt; objects.</target>
        </trans-unit>
        <trans-unit id="e5140dd892d98896590e3f8471080d842fc25e4f" translate="yes" xml:space="preserve">
          <source>The implementation of the following static methods</source>
          <target state="translated">以下の静的メソッドの実装</target>
        </trans-unit>
        <trans-unit id="5f19423ec0a494ae6494fd85f2b386a09303d0d4" translate="yes" xml:space="preserve">
          <source>The implementation of the method &lt;code&gt;SQLData.writeSQ&lt;/code&gt; calls the appropriate &lt;code&gt;SQLOutputImpl.writeXXX&lt;/code&gt; method(s) for writing each of the object's attributes in order. The attributes must be read from an &lt;code&gt;SQLInput&lt;/code&gt; input stream and written to an &lt;code&gt;SQLOutputImpl&lt;/code&gt; output stream in the same order in which they were listed in the SQL definition of the user-defined type.</source>
          <target state="translated">The implementation of the method &lt;code&gt;SQLData.writeSQ&lt;/code&gt; calls the appropriate &lt;code&gt;SQLOutputImpl.writeXXX&lt;/code&gt; method(s) for writing each of the object's attributes in order. The attributes must be read from an &lt;code&gt;SQLInput&lt;/code&gt; input stream and written to an &lt;code&gt;SQLOutputImpl&lt;/code&gt; output stream in the same order in which they were listed in the SQL definition of the user-defined type.</target>
        </trans-unit>
        <trans-unit id="f99b05ce7229c6e9c00c10671fd5556b39199a24" translate="yes" xml:space="preserve">
          <source>The implementation of the string concatenation operator is left to the discretion of a Java compiler, as long as the compiler ultimately conforms to</source>
          <target state="translated">文字列連結演算子の実装はJavaコンパイラの裁量に委ねられています。</target>
        </trans-unit>
        <trans-unit id="a16aac757eee134d7254450b49a909f24adac216" translate="yes" xml:space="preserve">
          <source>The implementation of this &lt;code&gt;CachedRowSet&lt;/code&gt; object may obtain the the name internally from the &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object.</source>
          <target state="translated">The implementation of this &lt;code&gt;CachedRowSet&lt;/code&gt; object may obtain the the name internally from the &lt;code&gt;RowSetMetaDataImpl&lt;/code&gt; object.</target>
        </trans-unit>
        <trans-unit id="d1783d029ef344e41e430f17d5f10e6b3b15270a" translate="yes" xml:space="preserve">
          <source>The implementation of this Standard MBean (or MXBean).</source>
          <target state="translated">この標準MBean(またはMXBean)の実装。</target>
        </trans-unit>
        <trans-unit id="382a6dd38dda6c0a39223f62855989d45f555777" translate="yes" xml:space="preserve">
          <source>The implementation of this method authenticates a &lt;code&gt;Subject&lt;/code&gt;. For example, it may prompt for &lt;code&gt;Subject&lt;/code&gt; information such as a username and password and then attempt to verify the password. This method saves the result of the authentication attempt as private state within the LoginModule.</source>
          <target state="translated">このメソッドの実装は &lt;code&gt;Subject&lt;/code&gt; を認証します。たとえば、ユーザー名やパスワードなどの &lt;code&gt;Subject&lt;/code&gt; 情報の入力を求め、パスワードの確認を試みる場合があります。このメソッドは、認証試行の結果をプライベート状態としてLoginModule内に保存します。</target>
        </trans-unit>
        <trans-unit id="5411c087059bdfeffe2870127039654f07163654" translate="yes" xml:space="preserve">
          <source>The implementation of this method can be expressed as follows:</source>
          <target state="translated">本実施形態では、以下のように表現することができる。</target>
        </trans-unit>
        <trans-unit id="f858f34f76a8d32fba15b3e497ed1df2fe0bb20c" translate="yes" xml:space="preserve">
          <source>The implementation of this method may transform the supplied class file and return a new replacement class file.</source>
          <target state="translated">このメソッドの実装は、供給されたクラスファイルを変換し、新しい置換クラスファイルを返すことができます。</target>
        </trans-unit>
        <trans-unit id="189b4e42c525714ae069e5c16d67456217dfb5f7" translate="yes" xml:space="preserve">
          <source>The implementation of this method provided by the &lt;code&gt;Applet&lt;/code&gt; class does nothing.</source>
          <target state="translated">The implementation of this method provided by the &lt;code&gt;Applet&lt;/code&gt; class does nothing.</target>
        </trans-unit>
        <trans-unit id="66d802063d5f107af40abcadc656ad92ba6e873a" translate="yes" xml:space="preserve">
          <source>The implementation of this method provided by the &lt;code&gt;Applet&lt;/code&gt; class returns &lt;code&gt;null&lt;/code&gt;.</source>
          <target state="translated">The implementation of this method provided by the &lt;code&gt;Applet&lt;/code&gt; class returns &lt;code&gt;null&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="a86e1e80207e9e386e4c654763035a03b4d2e4e7" translate="yes" xml:space="preserve">
          <source>The implementation of this method returns the process id as: &lt;a href=&quot;#toHandle()&quot;&gt;&lt;code&gt;toHandle().pid()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">The implementation of this method returns the process id as: &lt;a href=&quot;#toHandle()&quot;&gt; &lt;code&gt;toHandle().pid()&lt;/code&gt; &lt;/a&gt;.</target>
        </trans-unit>
        <trans-unit id="5621f16ce87e09eca19aa3e0b40c7ee6b5d44b52" translate="yes" xml:space="preserve">
          <source>The implementation of this method will produce a second expression to represent the same expression in an environment that will exist when the stream is read. This is achieved simply by calling &lt;code&gt;writeObject&lt;/code&gt; on the target and all the arguments and building a new expression with the results.</source>
          <target state="translated">このメソッドの実装は、ストリームが読み取られたときに存在する環境で同じ式を表す2番目の式を生成します。これは、ターゲットとすべての引数で &lt;code&gt;writeObject&lt;/code&gt; を呼び出し、結果を使用して新しい式を作成するだけで実現できます。</target>
        </trans-unit>
        <trans-unit id="32201864694d5e4caa1ee710ebef56302cb24601" translate="yes" xml:space="preserve">
          <source>The implementation resolution mechanisms are &lt;a href=&quot;#DatatypeFactory.newInstance&quot;&gt;defined&lt;/a&gt; in this &lt;code&gt;Class&lt;/code&gt;'s documentation.</source>
          <target state="translated">The implementation resolution mechanisms are &lt;a href=&quot;#DatatypeFactory.newInstance&quot;&gt;defined&lt;/a&gt; in this &lt;code&gt;Class&lt;/code&gt; 's documentation.</target>
        </trans-unit>
        <trans-unit id="0f6c0c74d6ce56b3b7dcf48a3803936cda181fb0" translate="yes" xml:space="preserve">
          <source>The implementation should not do anything with the result of any of the result supplier, accumulator, or combiner functions other than to pass them again to the accumulator, combiner, or finisher functions, or return them to the caller of the reduction operation.</source>
          <target state="translated">実装は,結果の供給者,アキュムレータ,またはコンバイナ関数のいずれかの結果を,アキュムレータ,コンバイナ,またはフィニッシャ関数に再び渡すか,または還元操作の呼び出し元に返す以外には,何もしてはならない.</target>
        </trans-unit>
        <trans-unit id="c606b027d78d1c8b28b809bad80a66b9a67bf360" translate="yes" xml:space="preserve">
          <source>The implementation stabilizes the stack by anchoring a frame specific to the stack walking and ensures that the stack walking is performed above the anchored frame. When the stream object is closed or being reused, &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.</source>
          <target state="translated">The implementation stabilizes the stack by anchoring a frame specific to the stack walking and ensures that the stack walking is performed above the anchored frame. When the stream object is closed or being reused, &lt;code&gt;IllegalStateException&lt;/code&gt; will be thrown.</target>
        </trans-unit>
        <trans-unit id="764bc44f931b2a056f6de3d2e74007be7dab4252" translate="yes" xml:space="preserve">
          <source>The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array.</source>
          <target state="translated">この実装では,入力配列の昇順と降順を等しく利用し,同じ入力配列の異なる部分でも昇順と降順を利用することができます.これは,ソートされた2つ以上の配列を結合するのに適しています:単純に配列を連結し,結果の配列をソートします.</target>
        </trans-unit>
        <trans-unit id="20e810f071954672f66c3ff4da645466cee6a581" translate="yes" xml:space="preserve">
          <source>The implementation takes equal advantage of ascending and descending order in its input array, and can take advantage of ascending and descending order in different parts of the the same input array. It is well-suited to merging two or more sorted arrays: simply concatenate the arrays and sort the resulting array.</source>
          <target state="translated">この実装では,入力配列の昇順と降順を等しく利用し,同じ入力配列の異なる部分の昇順と降順を利用することができます.これは,ソートされた2つ以上の配列を結合するのに適しています:単純に配列を連結し,結果の配列をソートします.</target>
        </trans-unit>
        <trans-unit id="d19f87950e204f701655c7eb90a32dffeb95482a" translate="yes" xml:space="preserve">
          <source>The implementation that observes events from the file system is intended to map directly on to the native file event notification facility where available, or to use a primitive mechanism, such as polling, when a native facility is not available. Consequently, many of the details on how events are detected, their timeliness, and whether their ordering is preserved are highly implementation specific. For example, when a file in a watched directory is modified then it may result in a single &lt;a href=&quot;standardwatcheventkinds#ENTRY_MODIFY&quot;&gt;&lt;code&gt;ENTRY_MODIFY&lt;/code&gt;&lt;/a&gt; event in some implementations but several events in other implementations. Short-lived files (meaning files that are deleted very quickly after they are created) may not be detected by primitive implementations that periodically poll the file system to detect changes.</source>
          <target state="translated">ファイルシステムからのイベントを監視する実装は、ネイティブファイルイベント通知機能に直接マップすること、またはネイティブ機能が利用できない場合にポーリングなどのプリミティブメカニズムを使用することを目的としています。したがって、イベントの検出方法、適時性、およびそれらの順序が保持されるかどうかに関する詳細の多くは、実装固有のものです。たとえば、監視ディレクトリ内のファイルが変更されると、一部の実装では1つの&lt;a href=&quot;standardwatcheventkinds#ENTRY_MODIFY&quot;&gt; &lt;code&gt;ENTRY_MODIFY&lt;/code&gt; &lt;/a&gt;イベントが発生しますが、他の実装ではいくつかのイベントが発生する場合があります。存続期間の短いファイル（作成後に非常に迅速に削除されるファイル）は、ファイルシステムを定期的にポーリングして変更を検出するプリミティブ実装では検出されない場合があります。</target>
        </trans-unit>
        <trans-unit id="c2d66d33c9220cc88ec7f77711dd3f7ca2bf80a6" translate="yes" xml:space="preserve">
          <source>The implementation title, version, and vendor strings identify an implementation and are made available conveniently to enable accurate reporting of the packages involved when a problem occurs. The contents all three implementation strings are vendor specific. The implementation version strings have no specified syntax and should only be compared for equality with desired version identifiers.</source>
          <target state="translated">実装タイトル、バージョン、ベンダ文字列は実装を識別し、問題が発生したときに関係するパッケージの正確な報告を可能にするために便利に利用できるようにしています。3 つの実装文字列の内容はすべてベンダ固有のものです。実装のバージョン文字列は、指定された構文を持たず、希望するバージョン識別子と等しくなるようにのみ比較されるべきです。</target>
        </trans-unit>
        <trans-unit id="f348190d718bffe13008c0ecdf1745c28e601e6d" translate="yes" xml:space="preserve">
          <source>The implementation typically achieves this goal by producing a series of &quot;what happened&quot; statements involving the &lt;code&gt;oldInstance&lt;/code&gt; and its publicly available state. These statements are sent to the output stream using its &lt;code&gt;writeExpression&lt;/code&gt; method which returns an expression involving elements in a cloned environment simulating the state of an input stream during reading. Each statement returned will have had all instances the old environment replaced with objects which exist in the new one. In particular, references to the target of these statements, which start out as references to &lt;code&gt;oldInstance&lt;/code&gt; are returned as references to the &lt;code&gt;newInstance&lt;/code&gt; instead. Executing these statements effects an incremental alignment of the state of the two objects as a series of modifications to the objects in the new environment. By the time the initialize method returns it should be impossible to tell the two instances apart by using their public APIs. Most importantly, the sequence of steps that were used to make these objects appear equivalent will have been recorded by the output stream and will form the actual output when the stream is flushed.</source>
          <target state="translated">実装は通常、 &lt;code&gt;oldInstance&lt;/code&gt; とその公開状態を含む一連の「発生した」ステートメントを生成することにより、この目標を達成します。これらのステートメントは、 &lt;code&gt;writeExpression&lt;/code&gt; 時に入力ストリームの状態をシミュレートするクローン環境で要素を含む式を返すwriteExpressionメソッドを使用して、出力ストリームに送信されます。返される各ステートメントでは、古い環境がすべて新しいインスタンスに存在するオブジェクトに置き換えられています。特に、 &lt;code&gt;oldInstance&lt;/code&gt; への参照として開始されるこれらのステートメントのターゲットへの参照は、 &lt;code&gt;newInstance&lt;/code&gt; への参照として返されます。代わりに。これらのステートメントを実行すると、新しい環境のオブジェクトに対する一連の変更として、2つのオブジェクトの状態が段階的に調整されます。initializeメソッドが戻るときまでに、パブリックAPIを使用して2つのインスタンスを区別することは不可能であるはずです。最も重要なのは、これらのオブジェクトを同等に見せるために使用された一連のステップが出力ストリームによって記録され、ストリームがフラッシュされるときに実際の出力を形成することです。</target>
        </trans-unit>
        <trans-unit id="0071233711fe7922557f3cc5e77ff86d3c7489b1" translate="yes" xml:space="preserve">
          <source>The implementation was adapted from Tim Peters's list sort for Python (&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt; TimSort&lt;/a&gt;). It uses techniques from Peter McIlroy's &quot;Optimistic Sorting and Information Theoretic Complexity&quot;, in Proceedings of the Fourth Annual ACM-SIAM Symposium on Discrete Algorithms, pp 467-474, January 1993.</source>
          <target state="translated">実装は、PythonのTim Petersのリストソート（&lt;a href=&quot;http://svn.python.org/projects/python/trunk/Objects/listsort.txt&quot;&gt;TimSort&lt;/a&gt;）から採用されました。これは、Peter McIlroyの「オプティミスティックソーティングと情報理論的複雑さ」からの手法を使用しています。</target>
        </trans-unit>
        <trans-unit id="13c96c1ad096f5a00f55072e0f2d6780edfeb958" translate="yes" xml:space="preserve">
          <source>The implementer must ensure that the returned node has not been removed. If a like-named child of this node was previously removed, the implementer must return a newly constructed &lt;code&gt;AbstractPreferences&lt;/code&gt; node; once removed, an &lt;code&gt;AbstractPreferences&lt;/code&gt; node cannot be &quot;resuscitated.&quot;</source>
          <target state="translated">実装者は、返されたノードが削除されていないことを確認する必要があります。このノードの同じ名前の子が以前に削除されている場合、実装者は新しく構築された &lt;code&gt;AbstractPreferences&lt;/code&gt; ノードを返す必要があります。削除すると、 &lt;code&gt;AbstractPreferences&lt;/code&gt; ノードを「蘇生」することはできません。</target>
        </trans-unit>
        <trans-unit id="9ef8dcbf55f1377ba0f6614596e7efbe0b86999c" translate="yes" xml:space="preserve">
          <source>The implementor must also ensure that the relation is transitive: &lt;code&gt;((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/code&gt; implies &lt;code&gt;compare(x, z)&amp;gt;0&lt;/code&gt;.</source>
          <target state="translated">実装者は、関係が推移的であることも確認する必要があります。 &lt;code&gt;((compare(x, y)&amp;gt;0) &amp;amp;&amp;amp; (compare(y, z)&amp;gt;0))&lt;/code&gt; 、 &lt;code&gt;compare(x, z)&amp;gt;0&lt;/code&gt; 意味します。</target>
        </trans-unit>
        <trans-unit id="83a6f5823b0e633634dd36ef598776a62c2b361f" translate="yes" xml:space="preserve">
          <source>The implementor must also ensure that the relation is transitive: &lt;code&gt;(x.compareTo(y) &amp;gt; 0 &amp;amp;&amp;amp; y.compareTo(z) &amp;gt; 0)&lt;/code&gt; implies &lt;code&gt;x.compareTo(z) &amp;gt; 0&lt;/code&gt;.</source>
          <target state="translated">The implementor must also ensure that the relation is transitive: &lt;code&gt;(x.compareTo(y) &amp;gt; 0 &amp;amp;&amp;amp; y.compareTo(z) &amp;gt; 0)&lt;/code&gt; implies &lt;code&gt;x.compareTo(z) &amp;gt; 0&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="93c35843f73a7cf775788fe7aa6a58715a248347" translate="yes" xml:space="preserve">
          <source>The implementor must also ensure that the relation is transitive: &lt;code&gt;(x.compareTo(y)&amp;gt;0 &amp;amp;&amp;amp; y.compareTo(z)&amp;gt;0)&lt;/code&gt; implies &lt;code&gt;x.compareTo(z)&amp;gt;0&lt;/code&gt;.</source>
          <target state="translated">実装者は、関係が推移的であることも確認する必要があります。 &lt;code&gt;(x.compareTo(y)&amp;gt;0 &amp;amp;&amp;amp; y.compareTo(z)&amp;gt;0)&lt;/code&gt; は、 &lt;code&gt;x.compareTo(z)&amp;gt;0&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="984e8a841ada6b193bdac6bd769182c3ed6633a1" translate="yes" xml:space="preserve">
          <source>The implementor must ensure &lt;code&gt;sgn(x.compareTo(y)) == -sgn(y.compareTo(x))&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. (This implies that &lt;code&gt;x.compareTo(y)&lt;/code&gt; must throw an exception iff &lt;code&gt;y.compareTo(x)&lt;/code&gt; throws an exception.)</source>
          <target state="translated">実装者は、すべての &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; について &lt;code&gt;sgn(x.compareTo(y)) == -sgn(y.compareTo(x))&lt;/code&gt; を保証する必要があります。（これは、 &lt;code&gt;y.compareTo(x)&lt;/code&gt; が例外をスローする場合に限り、 &lt;code&gt;x.compareTo(y)&lt;/code&gt; が例外をスローする必要があることを意味します。）</target>
        </trans-unit>
        <trans-unit id="6f253988de023323ef8d0ef1dfa1dcf6d324129a" translate="yes" xml:space="preserve">
          <source>The implementor must ensure that &lt;code&gt;sgn(compare(x, y)) ==
 -sgn(compare(y, x))&lt;/code&gt; for all &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;. (This implies that &lt;code&gt;compare(x, y)&lt;/code&gt; must throw an exception if and only if &lt;code&gt;compare(y, x)&lt;/code&gt; throws an exception.)</source>
          <target state="translated">実装者は、すべての &lt;code&gt;x&lt;/code&gt; および &lt;code&gt;y&lt;/code&gt; について &lt;code&gt;sgn(compare(x, y)) == -sgn(compare(y, x))&lt;/code&gt; であることを確認する必要があります。（これは、ことを意味する &lt;code&gt;compare(x, y)&lt;/code&gt; 場合にのみ場合に例外をスローする必要があり &lt;code&gt;compare(y, x)&lt;/code&gt; 例外をスローします。）</target>
        </trans-unit>
        <trans-unit id="8f99500f7af7d801bfa9660bcd7539b508039288" translate="yes" xml:space="preserve">
          <source>The implicit size may not be a fixed value, especially for a DTLS protocols implementation.</source>
          <target state="translated">特にDTLSプロトコルの実装では、暗黙のサイズは固定値ではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="c5bd518953d05705af43274895fb8112f343bc54" translate="yes" xml:space="preserve">
          <source>The implicit state of a matcher includes the input character sequence as well as the</source>
          <target state="translated">マッチャの暗黙の状態は、入力文字列だけでなく</target>
        </trans-unit>
        <trans-unit id="7aa873e376794141b49cb1ea8a0bd75fbba299ec" translate="yes" xml:space="preserve">
          <source>The importance of this to parallel evaluation can be seen if we expand this to four terms:</source>
          <target state="translated">これを4期に拡大すると、並列評価における重要性が見えてきます。</target>
        </trans-unit>
        <trans-unit id="47f872f2e181d170c9f064e4e0e278d2b43b7e7a" translate="yes" xml:space="preserve">
          <source>The important point to note is the first argument to the &lt;code&gt;
 add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; methods is the field maintaining the listeners. In addition you must assign the result of the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; methods to the field maintaining the listeners.</source>
          <target state="translated">The important point to note is the first argument to the &lt;code&gt; add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; methods is the field maintaining the listeners. In addition you must assign the result of the &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;remove&lt;/code&gt; methods to the field maintaining the listeners.</target>
        </trans-unit>
        <trans-unit id="c1e10b89a974f0ebd3253725c84055ab09cbc083" translate="yes" xml:space="preserve">
          <source>The imported node copies its &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; values from those of the source node.Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on this type of nodes since they cannot have any children.</source>
          <target state="translated">The imported node copies its &lt;code&gt;target&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt; values from those of the source node.Note that the &lt;code&gt;deep&lt;/code&gt; parameter has no effect on this type of nodes since they cannot have any children.</target>
        </trans-unit>
        <trans-unit id="21c35430c664768194fbb13c6a879d3843e0bfe7" translate="yes" xml:space="preserve">
          <source>The imported node that belongs to this &lt;code&gt;Document&lt;/code&gt;.</source>
          <target state="translated">The imported node that belongs to this &lt;code&gt;Document&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="14b8f3fc9feb417d0cc733925e38d2fcdc82d0b5" translate="yes" xml:space="preserve">
          <source>The in-memory representation of an elements may contain a reference to an &lt;code&gt;Object&lt;/code&gt;. There is no provision for representing such objects textually.</source>
          <target state="translated">要素のメモリ内表現には、 &lt;code&gt;Object&lt;/code&gt; への参照が含まれる場合があります。そのようなオブジェクトをテキストで表すための規定はありません。</target>
        </trans-unit>
        <trans-unit id="d11ff3668969981f7d9c4c8296a5b6396f07bac9" translate="yes" xml:space="preserve">
          <source>The inapplicable conversion</source>
          <target state="translated">適用できない変換</target>
        </trans-unit>
        <trans-unit id="bb2a6499474ea9eac81ba3d143a5276ee4c995c9" translate="yes" xml:space="preserve">
          <source>The inbound network buffer may be modified as a result of this call: therefore if the network data packet is required for some secondary purpose, the data should be duplicated before calling this method. Note: the network data will not be useful to a second SSLEngine, as each SSLEngine contains unique random state which influences the SSL/TLS messages.</source>
          <target state="translated">この呼び出しの結果、受信ネットワークバッファが変更される可能性があります:したがって、ネットワークデータパケットが何か二次的な目的で必要とされる場合、このメソッドを呼び出す前にデータを複製しなければなりません。注意:各SSLEngineはSSL/TLSメッセージに影響を与える固有のランダムな状態を含んでいるため、ネットワークデータは2つ目のSSLEngineにとって有用ではありません。</target>
        </trans-unit>
        <trans-unit id="8d699eb8aa8de1405731c919b0b4de83e04c8bf2" translate="yes" xml:space="preserve">
          <source>The inbound network buffer may be modified as a result of this call: therefore if the network data packet is required for some secondary purpose, the data should be duplicated before calling this method. Note: the network data will not be useful to a second SSLEngine, as each SSLEngine contains unique random state which influences the SSL/TLS/DTLS messages.</source>
          <target state="translated">この呼び出しの結果、受信ネットワークバッファが変更される可能性があります:したがって、ネットワークデータパケットが何か二次的な目的で必要とされる場合、このメソッドを呼び出す前にデータを複製しなければなりません。注意:各SSLEngineはSSL/TLS/DTLSメッセージに影響を与える固有のランダムな状態を含んでいるため、ネットワークデータは2つ目のSSLEngineにとって有用ではありません。</target>
        </trans-unit>
        <trans-unit id="aa3b2a5b0cce44110ed80362543628b78d7b8ccd" translate="yes" xml:space="preserve">
          <source>The inclusive lower bound of the rollback codes.</source>
          <target state="translated">ロールバックコードの包括的な下界。</target>
        </trans-unit>
        <trans-unit id="35fe39a3e8daa9f8d821a93e30e78b4396b3accd" translate="yes" xml:space="preserve">
          <source>The inclusive upper bound of the rollback error code.</source>
          <target state="translated">ロールバックエラーコードの包括的な上限。</target>
        </trans-unit>
        <trans-unit id="4591152df21bb221a96ff5b50e6d3a7a7e4f08c1" translate="yes" xml:space="preserve">
          <source>The increase button.</source>
          <target state="translated">増加ボタンです。</target>
        </trans-unit>
        <trans-unit id="d09f0816d06c72350347621095fd55b4391384a1" translate="yes" xml:space="preserve">
          <source>The index argument must be greater than or equal to &lt;code&gt;0&lt;/code&gt;, and less than the length of this sequence.</source>
          <target state="translated">index引数は &lt;code&gt;0&lt;/code&gt; 以上で、このシーケンスの長さ未満でなければなりません。</target>
        </trans-unit>
        <trans-unit id="80b450539685211ccc1833f27483d2868aa7a50c" translate="yes" xml:space="preserve">
          <source>The index array passed into the &lt;code&gt;setMatchColumn&lt;/code&gt; methods indicates how many match columns are being set (the length of the array) in addition to which columns will be used for the match. For example:</source>
          <target state="translated">The index array passed into the &lt;code&gt;setMatchColumn&lt;/code&gt; methods indicates how many match columns are being set (the length of the array) in addition to which columns will be used for the match. For example:</target>
        </trans-unit>
        <trans-unit id="c501f93a2ca90f9ea5482a86ad03134df8cccb7a" translate="yes" xml:space="preserve">
          <source>The index is included in this exception's detail message. The exact presentation format of the detail message is unspecified.</source>
          <target state="translated">インデックスはこの例外の詳細メッセージに含まれる。詳細メッセージの正確な表示形式は指定されていません。</target>
        </trans-unit>
        <trans-unit id="d110c0303b7504a3d86b1ba9fbbb90cb3182eff3" translate="yes" xml:space="preserve">
          <source>The index must be a value greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than or equal to the current size of the vector. (If the index is equal to the current size of the vector, the new element is appended to the Vector.)</source>
          <target state="translated">インデックスは、 &lt;code&gt;0&lt;/code&gt; 以上、ベクトルの現在のサイズ以下の値でなければなりません。（インデックスがベクターの現在のサイズと等しい場合、新しい要素がベクターに追加されます。）</target>
        </trans-unit>
        <trans-unit id="c8b94ccd821ae168771b3c0bce8f50e0fa10c633" translate="yes" xml:space="preserve">
          <source>The index must be a value greater than or equal to &lt;code&gt;0&lt;/code&gt; and less than the current size of the vector.</source>
          <target state="translated">インデックスは、 &lt;code&gt;0&lt;/code&gt; 以上で、ベクトルの現在のサイズより小さい値でなければなりません。</target>
        </trans-unit>
        <trans-unit id="62e63686068957c51275db449165d29003ac47e5" translate="yes" xml:space="preserve">
          <source>The index of the attribute, or -1 if it does not appear in the list.</source>
          <target state="translated">属性のインデックス、リストに現れない場合は-1。</target>
        </trans-unit>
        <trans-unit id="634cf8881bffb28436cbadcdf2fa68fc2f5e5ccf" translate="yes" xml:space="preserve">
          <source>The index of the button.</source>
          <target state="translated">ボタンのインデックス。</target>
        </trans-unit>
        <trans-unit id="ab04bf90af1fca72f6bd4fa0c209a856d9a63eeb" translate="yes" xml:space="preserve">
          <source>The index of the column being dragged.</source>
          <target state="translated">ドラッグされる列のインデックス。</target>
        </trans-unit>
        <trans-unit id="739fedab35265517ea308014b27461b4ea4d32be" translate="yes" xml:space="preserve">
          <source>The index of the column being dragged. &lt;code&gt;null&lt;/code&gt; if not dragging.</source>
          <target state="translated">The index of the column being dragged. &lt;code&gt;null&lt;/code&gt; if not dragging.</target>
        </trans-unit>
        <trans-unit id="f34aed7c60a9e28a443a907e7eecff6c58ebb518" translate="yes" xml:space="preserve">
          <source>The index of the column being resized.</source>
          <target state="translated">リサイズされる列のインデックス。</target>
        </trans-unit>
        <trans-unit id="5709d32206c70e14fc102c4325947a272b7eef73" translate="yes" xml:space="preserve">
          <source>The index of the column being resized. &lt;code&gt;null&lt;/code&gt; if not resizing.</source>
          <target state="translated">The index of the column being resized. &lt;code&gt;null&lt;/code&gt; if not resizing.</target>
        </trans-unit>
        <trans-unit id="3c713de2c6cd1e10a2ee8eca913f67cfa7787102" translate="yes" xml:space="preserve">
          <source>The index of the column from where it was moved or removed</source>
          <target state="translated">移動または削除されたカラムのインデックス</target>
        </trans-unit>
        <trans-unit id="5476d5cd262fc98778e43b57c1769e4271ac097c" translate="yes" xml:space="preserve">
          <source>The index of the column in the model which is to be displayed by this &lt;code&gt;TableColumn&lt;/code&gt;.</source>
          <target state="translated">The index of the column in the model which is to be displayed by this &lt;code&gt;TableColumn&lt;/code&gt; .</target>
        </trans-unit>
        <trans-unit id="b1970e00b3ec369750567ac9ff0ca623c4d79a78" translate="yes" xml:space="preserve">
          <source>The index of the column in the model which is to be displayed by this &lt;code&gt;TableColumn&lt;/code&gt;. As columns are moved around in the view &lt;code&gt;modelIndex&lt;/code&gt; remains constant.</source>
          <target state="translated">The index of the column in the model which is to be displayed by this &lt;code&gt;TableColumn&lt;/code&gt; . As columns are moved around in the view &lt;code&gt;modelIndex&lt;/code&gt; remains constant.</target>
        </trans-unit>
        <trans-unit id="97237181c67180c3a85ff731ca9e29203dc4fe35" translate="yes" xml:space="preserve">
          <source>The index of the column to where it was moved or added</source>
          <target state="translated">移動または追加された列のインデックス</target>
        </trans-unit>
        <trans-unit id="b43760d2baa9ed65d859133ddb3fcdf80bb96958" translate="yes" xml:space="preserve">
          <source>The index of the end of this buffer.</source>
          <target state="translated">このバッファの終端のインデックス。</target>
        </trans-unit>
        <trans-unit id="f695822c13213a26a764fdd97f97ec145aace4f7" translate="yes" xml:space="preserve">
          <source>The index of the end of this buffer. There is not valid data at or beyond this index.</source>
          <target state="translated">このバッファの終端のインデックス。このインデックス以降には有効なデータはありません。</target>
        </trans-unit>
        <trans-unit id="1590c17a9cdabf74852b9b628b34f6bb6547ef85" translate="yes" xml:space="preserve">
          <source>The index of the first character captured by the group, or &lt;code&gt;-1&lt;/code&gt; if the match was successful but the group itself did not match anything</source>
          <target state="translated">グループによってキャプチャされた最初の文字のインデックス。一致は成功したがグループ自体は何も一致しなかった場合は &lt;code&gt;-1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14690427864e8e9fb011be08cf98fb6bec38525d" translate="yes" xml:space="preserve">
          <source>The index of the first character matched</source>
          <target state="translated">最初にマッチした文字のインデックス</target>
        </trans-unit>
        <trans-unit id="037f2614e75c97fb1b5d71d0d0cea4aaad2f9e8e" translate="yes" xml:space="preserve">
          <source>The index of the focused component.</source>
          <target state="translated">フォーカスされたコンポーネントのインデックス。</target>
        </trans-unit>
        <trans-unit id="2b1a675cd8d72171fb8d26b97ee0f084893697b2" translate="yes" xml:space="preserve">
          <source>The index of the next character to read from the input stream buffer.</source>
          <target state="translated">入力ストリームバッファから次に読み込む文字のインデックス。</target>
        </trans-unit>
        <trans-unit id="6236644c7f73481257e874584222314b9bf01500" translate="yes" xml:space="preserve">
          <source>The index of the next character to read from the input stream buffer. This value should always be nonnegative and not larger than the value of &lt;code&gt;count&lt;/code&gt;. The next byte to be read from the input stream buffer will be &lt;code&gt;buf[pos]&lt;/code&gt;.</source>
          <target state="translated">入力ストリームバッファーから読み取る次の文字のインデックス。この値は常に負ではなく、 &lt;code&gt;count&lt;/code&gt; の値以下でなければなりません。入力ストリームバッファーから読み取られる次のバイトは &lt;code&gt;buf[pos]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5efc56a51a0de538997e4f3583c8deb79cf74c6d" translate="yes" xml:space="preserve">
          <source>The index of the position in the circular buffer at which the next byte of data will be read by this piped input stream.</source>
          <target state="translated">パイピングされた入力ストリームによって次のバイトのデータが読み込まれるサーキュラーバッファ内の位置のインデックス。</target>
        </trans-unit>
        <trans-unit id="d5d543d602524132f86d32c3de4d6c1230cc0041" translate="yes" xml:space="preserve">
          <source>The index of the position in the circular buffer at which the next byte of data will be stored when received from the connected piped output stream.</source>
          <target state="translated">接続されたパイプ出力ストリームから受信したときに、次のバイトのデータが格納されるサーキュラーバッファ内の位置のインデックス。</target>
        </trans-unit>
        <trans-unit id="7730a24d44411399e802148bed0e48e3d5ce6bbf" translate="yes" xml:space="preserve">
          <source>The index of the position in the circular buffer at which the next byte of data will be stored when received from the connected piped output stream. &lt;code&gt;in&amp;lt;0&lt;/code&gt; implies the buffer is empty, &lt;code&gt;in==out&lt;/code&gt; implies the buffer is full</source>
          <target state="translated">接続されているパイプで連結された出力ストリームから受信したときに、データの次のバイトが格納される循環バッファー内の位置のインデックス。 &lt;code&gt;in&amp;lt;0&lt;/code&gt; はバッファーが空であることを意味し、 &lt;code&gt;in==out&lt;/code&gt; はバッファーがいっぱいであることを意味します</target>
        </trans-unit>
        <trans-unit id="5dab56f9b14368b91d79e93d282b496b521bfa4f" translate="yes" xml:space="preserve">
          <source>The index one greater than the index of the last valid byte in the buffer.</source>
          <target state="translated">バッファ内の最後の有効なバイトのインデックスよりも大きいインデックス。</target>
        </trans-unit>
        <trans-unit id="35f63ccce04acce64e5535be8e7c215541fbc335" translate="yes" xml:space="preserve">
          <source>The index one greater than the index of the last valid byte in the buffer. This value is always in the range &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;buf.length&lt;/code&gt;; elements &lt;code&gt;buf[0]&lt;/code&gt; through &lt;code&gt;buf[count-1]
 &lt;/code&gt;contain buffered input data obtained from the underlying input stream.</source>
          <target state="translated">バッファ内の最後の有効なバイトのインデックスよりも1つ大きいインデックス。この値は常に &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;buf.length&lt;/code&gt; の範囲です。要素 &lt;code&gt;buf[0]&lt;/code&gt; から &lt;code&gt;buf[count-1] &lt;/code&gt; は、基になる入力ストリームから取得されたバッファリングされた入力データが含まれます。</target>
        </trans-unit>
        <trans-unit id="7603e35433e10f4f8d37bf47974c33eb262bf2cf" translate="yes" xml:space="preserve">
          <source>The index one greater than the last valid character in the input stream buffer.</source>
          <target state="translated">入力ストリームバッファ内の最後の有効な文字よりも大きいインデックス。</target>
        </trans-unit>
        <trans-unit id="7532d289f9d5f9dcf22dd308f11ba59cb53013a2" translate="yes" xml:space="preserve">
          <source>The index one greater than the last valid character in the input stream buffer. This value should always be nonnegative and not larger than the length of &lt;code&gt;buf&lt;/code&gt;. It is one greater than the position of the last byte within &lt;code&gt;buf&lt;/code&gt; that can ever be read from the input stream buffer.</source>
          <target state="translated">入力ストリームバッファー内の最後の有効な文字より1大きいインデックス。この値は常に負ではなく、 &lt;code&gt;buf&lt;/code&gt; の長さ以下でなければなりません。これは、入力ストリームバッファーから読み取ることができる &lt;code&gt;buf&lt;/code&gt; 内の最後のバイトの位置より1つ大きくなります。</target>
        </trans-unit>
        <trans-unit id="c9b5de3fe1d20ea7f6963929d78c83ff1a95b6b4" translate="yes" xml:space="preserve">
          <source>The index specifying the property element that was changed.</source>
          <target state="translated">変更されたプロパティ要素を指定するインデックス。</target>
        </trans-unit>
        <trans-unit id="4b24ac1a949792295085eae5d4bcbdde7887c31d" translate="yes" xml:space="preserve">
          <source>The indexed byte's memory address modulus the unit size</source>
          <target state="translated">インデックス化されたバイトのメモリアドレスモジュラス 単位サイズ</target>
        </trans-unit>
        <trans-unit id="d3784a6dc8c24e3b9cfd559138d87a6ec297e1ea" translate="yes" xml:space="preserve">
          <source>The indexing of RDNs in the list follows the numbering of RDNs described in the class description.</source>
          <target state="translated">リスト内の RDN のインデックス付けは、クラスの説明に記載されている RDN のナンバリングに従います。</target>
        </trans-unit>
        <trans-unit id="faa5405bce53fb18abb915b5abeb8c78b7d17c39" translate="yes" xml:space="preserve">
          <source>The individual positive and negative permission sets are also determined. The positive permission set contains the permissions specified in the positive ACL entry (if any) for the principal. Similarly, the negative permission set contains the permissions specified in the negative ACL entry (if any) for the principal. The individual positive (or negative) permission set is considered to be null if there is not a positive (negative) ACL entry for the principal in this ACL.</source>
          <target state="translated">また、個々の正の許可セットと負の許可セットも決定されます。正のパーミッション・セットには、プリンシパルに対する正の ACL エントリで指定されたパーミッションが含まれます(もしあれば)。同様に、負のパーミッション・セットには、プリンシパルの負の ACL エントリ(もしあれば)で指定されたパーミッションが含まれます。個々の正の(または負の)許可セットは、この ACL にプリンシパルの正(負)の ACL エントリが存在しない場合、NULL と見なされます。</target>
        </trans-unit>
        <trans-unit id="ef3f30727d6bb6becf057ae182437cf5ed0c6feb" translate="yes" xml:space="preserve">
          <source>The information about a memory notification.</source>
          <target state="translated">メモリ通知に関する情報です。</target>
        </trans-unit>
        <trans-unit id="f3c2ce74a453d840c3d3cb85683165a975a38bfc" translate="yes" xml:space="preserve">
          <source>The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the &lt;code&gt;http://xml.org/sax/features/namespaces&lt;/code&gt; feature is &lt;var&gt;true&lt;/var&gt; (the default).</source>
          <target state="translated">The information from this event is not necessary for normal Namespace processing: the SAX XML reader will automatically replace prefixes for element and attribute names when the &lt;code&gt;http://xml.org/sax/features/namespaces&lt;/code&gt; feature is &lt;var&gt;true&lt;/var&gt; (the default).</target>
        </trans-unit>
        <trans-unit id="ca5670133dfad682241f9a7899b676fcf937d136" translate="yes" xml:space="preserve">
          <source>The information is returned as a set of pairs; the first element of a pair contains an (inclusive) minimum width and height, and the second element contains an (inclusive) maximum width and height. Together, each pair defines a valid range of sizes. To specify a fixed size, the same width and height will appear for both elements. A return value of &lt;code&gt;null&lt;/code&gt; indicates that the size is arbitrary or unknown.</source>
          <target state="translated">情報はペアのセットとして返されます。ペアの最初の要素には（両端を含む）最小の幅と高さが含まれ、2番目の要素には（両端を含む）最大の幅と高さが含まれます。一緒に、各ペアは有効なサイズの範囲を定義します。固定サイズを指定するには、両方の要素に同じ幅と高さが表示されます。 &lt;code&gt;null&lt;/code&gt; の戻り値は、サイズが任意または不明であることを示します。</target>
        </trans-unit>
        <trans-unit id="a415dbd9864205bad4fef6fbdbf7a0c48d16cbbf" translate="yes" xml:space="preserve">
          <source>The information is returned as a set of pairs; the first element of a pair contains an (inclusive) minimum width and height, and the second element contains an (inclusive) maximum width and height. Together, each pair defines a valid range of sizes. To specify a fixed size, use the same width and height for both elements. To specify an arbitrary range, a value of &lt;code&gt;null&lt;/code&gt; is used in place of an actual array of &lt;code&gt;Dimension&lt;/code&gt;s.</source>
          <target state="translated">情報はペアのセットとして返されます。ペアの最初の要素には（両端を含む）最小の幅と高さが含まれ、2番目の要素には（両端を含む）最大の幅と高さが含まれます。一緒に、各ペアは有効なサイズの範囲を定義します。固定サイズを指定するには、両方の要素に同じ幅と高さを使用します。任意の範囲を指定するには、 &lt;code&gt;Dimension&lt;/code&gt; の実際の配列の代わりに &lt;code&gt;null&lt;/code&gt; の値を使用します。</target>
        </trans-unit>
        <trans-unit id="3103eb0cb29acd4b776d2c741f795f0cb2bfd745" translate="yes" xml:space="preserve">
          <source>The information stored in a &lt;code&gt;ProtectionParameter&lt;/code&gt; object protects the contents of a keystore. For example, protection parameters may be used to check the integrity of keystore data, or to protect the confidentiality of sensitive keystore data (such as a &lt;code&gt;PrivateKey&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;ProtectionParameter&lt;/code&gt; オブジェクトに格納された情報は、キーストアの内容を保護します。たとえば、保護パラメータを使用して、キーストアデータの整合性をチェックしたり、機密のキーストアデータ（ &lt;code&gt;PrivateKey&lt;/code&gt; など）の機密性を保護したりできます。</target>
        </trans-unit>
        <trans-unit id="0f232b85978434189e4a717f030e028407dbe5c9" translate="yes" xml:space="preserve">
          <source>The information that can be retrieved from an object class definition is directory-dependent.</source>
          <target state="translated">オブジェクトクラス定義から取得できる情報はディレクトリ依存です。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
