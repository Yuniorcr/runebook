<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="electron">
    <body>
      <group id="electron">
        <trans-unit id="36bdb0c4e95eb235a9dae5ec3bc3c0e50ebb1632" translate="yes" xml:space="preserve">
          <source>External Debuggers</source>
          <target state="translated">外部デバッガ</target>
        </trans-unit>
        <trans-unit id="6665ae025d7bfde53cfcf2c9c281e3a277b67fe8" translate="yes" xml:space="preserve">
          <source>Extra Unpacking on Some APIs</source>
          <target state="translated">一部のAPIでの追加アンパック</target>
        </trans-unit>
        <trans-unit id="2cb5356088da91c919f5f4dfc2d71f36867990f6" translate="yes" xml:space="preserve">
          <source>Extra steps to run the unit test:</source>
          <target state="translated">ユニットテストを実行するための余分なステップ</target>
        </trans-unit>
        <trans-unit id="03688ba6aa340b87549088aa5739944cb6b1dc73" translate="yes" xml:space="preserve">
          <source>FAQ</source>
          <target state="translated">FAQ</target>
        </trans-unit>
        <trans-unit id="a53ac626975f27602b101ee26086bf28679223ca" translate="yes" xml:space="preserve">
          <source>Fake Stat Information of &lt;code&gt;fs.stat&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fs.stat&lt;/code&gt; の偽の統計情報</target>
        </trans-unit>
        <trans-unit id="97cdbdc7feff827efb082a6b6dd2727237cd49fd" translate="yes" xml:space="preserve">
          <source>False</source>
          <target state="translated">False</target>
        </trans-unit>
        <trans-unit id="0e9430a5c15a25c2e0bc6a804e7395a0d585931b" translate="yes" xml:space="preserve">
          <source>Faroese</source>
          <target state="translated">Faroese</target>
        </trans-unit>
        <trans-unit id="ed3bdadf84df50841fa3f667344949be09290c26" translate="yes" xml:space="preserve">
          <source>Fatal internal compiler error: C1001</source>
          <target state="translated">致命的な内部コンパイラ・エラー。C1001</target>
        </trans-unit>
        <trans-unit id="4f5a54627dea26b6876632913ba4f8191aad7605" translate="yes" xml:space="preserve">
          <source>Feature Flags</source>
          <target state="translated">フィーチャーフラッグ</target>
        </trans-unit>
        <trans-unit id="b2e49793fe93779cb01b8dc38d230ea8124b18f9" translate="yes" xml:space="preserve">
          <source>Feature flags are a common practice in Chromium, and are well-established in the web-development ecosystem. In the context of Electron, a feature flag or &lt;strong&gt;soft branch&lt;/strong&gt; must have the following properties:</source>
          <target state="translated">機能フラグはChromiumの一般的な慣行であり、Web開発エコシステムで確立されています。Electronのコンテキストでは、機能フラグまたは&lt;strong&gt;ソフトブランチに&lt;/strong&gt;は次のプロパティが必要です。</target>
        </trans-unit>
        <trans-unit id="d4dcd7fef14f742aac1948cca5e3aa19a6d26619" translate="yes" xml:space="preserve">
          <source>Fedora 21</source>
          <target state="translated">フェドラ21</target>
        </trans-unit>
        <trans-unit id="00be6cb96975f9badf5bf139e5ec261f89ee66e7" translate="yes" xml:space="preserve">
          <source>Fedora 24 and newer</source>
          <target state="translated">Fedora 24 とそれ以降のバージョン</target>
        </trans-unit>
        <trans-unit id="68ef9cadad56547c3404ff7d01f699cf1f121a09" translate="yes" xml:space="preserve">
          <source>Feel free to post a comment in the pull request to ping reviewers if you are awaiting an answer on something. If you encounter words or acronyms that seem unfamiliar, refer to this &lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/glossary&quot;&gt;glossary&lt;/a&gt;.</source>
          <target state="translated">何かの回答を待っている場合は、プルリクエストにpingレビュアーにコメントを投稿してください。聞き慣れない単語や頭字語に遭遇した場合は、この&lt;a href=&quot;https://sites.google.com/a/chromium.org/dev/glossary&quot;&gt;用語集を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="175df75ca866a486722893cf48cbe47ba7932e38" translate="yes" xml:space="preserve">
          <source>Fetch the git submodules:</source>
          <target state="translated">git サブモジュールを取得します。</target>
        </trans-unit>
        <trans-unit id="927b92da1ee917ff26d97054707f38033a5f0818" translate="yes" xml:space="preserve">
          <source>Fetches a path's associated icon.</source>
          <target state="translated">パスに関連付けられたアイコンを取得します。</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="246b2f9db7afd4afaa3d5e709533172c78ad8d0e" translate="yes" xml:space="preserve">
          <source>File Object</source>
          <target state="translated">ファイルオブジェクト</target>
        </trans-unit>
        <trans-unit id="7a3acd779d548299a9f1c4a2da5a38f640685def" translate="yes" xml:space="preserve">
          <source>File names should be concatenated with &lt;code&gt;-&lt;/code&gt; instead of &lt;code&gt;_&lt;/code&gt;, e.g. &lt;code&gt;file-name.js&lt;/code&gt; rather than &lt;code&gt;file_name.js&lt;/code&gt;, because in &lt;a href=&quot;https://github.com/github/atom&quot;&gt;github/atom&lt;/a&gt; module names are usually in the &lt;code&gt;module-name&lt;/code&gt; form. This rule only applies to &lt;code&gt;.js&lt;/code&gt; files.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/github/atom&quot;&gt;github / atomでは&lt;/a&gt;モジュール名は通常 &lt;code&gt;module-name&lt;/code&gt; 形式であるため、ファイル名は &lt;code&gt;_&lt;/code&gt; の代わりに &lt;code&gt;-&lt;/code&gt; で連結する必要があり &lt;code&gt;file-name.js&lt;/code&gt; 。たとえば、 &lt;code&gt;file_name.js&lt;/code&gt; ではなくfile-name.jsです。このルールは &lt;code&gt;.js&lt;/code&gt; ファイルにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="7af55e1bfa851e12bdbfb75d7450fac19000151a" translate="yes" xml:space="preserve">
          <source>FileFilter</source>
          <target state="translated">FileFilter</target>
        </trans-unit>
        <trans-unit id="f462d97028e01e1f17e34060a7c99429b205e942" translate="yes" xml:space="preserve">
          <source>FileFilter Object</source>
          <target state="translated">ファイルフィルタオブジェクト</target>
        </trans-unit>
        <trans-unit id="67118f22fa22764c32ce2b488d7a7e32e0cf860d" translate="yes" xml:space="preserve">
          <source>FilePathWithHeaders Object</source>
          <target state="translated">FilePathWithHeaders オブジェクト</target>
        </trans-unit>
        <trans-unit id="cd9a5554356141790a82e86864449b480ac00a5e" translate="yes" xml:space="preserve">
          <source>Filipino</source>
          <target state="translated">Filipino</target>
        </trans-unit>
        <trans-unit id="8ded2a18fc7b3c9588e1ef466d67ff6e34da6ebb" translate="yes" xml:space="preserve">
          <source>Filter the &lt;code&gt;remote&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;remote&lt;/code&gt; モジュールをフィルタリングする</target>
        </trans-unit>
        <trans-unit id="131e90e96326989c97e15eca9aa16fac395ba444" translate="yes" xml:space="preserve">
          <source>Finally the &lt;code&gt;index.html&lt;/code&gt; is the web page you want to show:</source>
          <target state="translated">最後に、 &lt;code&gt;index.html&lt;/code&gt; は表示するWebページです。</target>
        </trans-unit>
        <trans-unit id="02b74ef965a4dcee339726db07647fc90cfb8e47" translate="yes" xml:space="preserve">
          <source>Find out filesystem location used by Chrome for storing extensions:</source>
          <target state="translated">Chrome が拡張機能を保存するために使用するファイルシステムの場所を確認します。</target>
        </trans-unit>
        <trans-unit id="b9648adc5da1390634fe986be70082d1a7314302" translate="yes" xml:space="preserve">
          <source>Find out what version change is needed</source>
          <target state="translated">どのようなバージョン変更が必要なのかを確認する</target>
        </trans-unit>
        <trans-unit id="fc3782633b50564c6a87d64da6f78d52af3abfb4" translate="yes" xml:space="preserve">
          <source>Find the image you wish to modify in the build cloud and make note of the &lt;strong&gt;VHD Blob Path&lt;/strong&gt; for that image, which is the value for that corresponding key.</source>
          <target state="translated">ビルドクラウドで変更するイメージを見つけ、そのイメージの&lt;strong&gt;VHD Blobパス&lt;/strong&gt;をメモします。これは、対応するキーの値です。</target>
        </trans-unit>
        <trans-unit id="f97c03477f029ec97161fb3249f40975f98cb43e" translate="yes" xml:space="preserve">
          <source>Finding Support</source>
          <target state="translated">サポートを探す</target>
        </trans-unit>
        <trans-unit id="57eef27b1643e8b06fcc0444b2a3519d01b2cef8" translate="yes" xml:space="preserve">
          <source>Finnish</source>
          <target state="translated">Finnish</target>
        </trans-unit>
        <trans-unit id="5e52497e1cdbc228ec84c3a498a510d9eb0a9578" translate="yes" xml:space="preserve">
          <source>Fired when a frame has done navigation.</source>
          <target state="translated">フレームがナビゲーションを行ったときに発生します。</target>
        </trans-unit>
        <trans-unit id="51a13a5d80380bc539de3421f81e3ce28e63bd46" translate="yes" xml:space="preserve">
          <source>Fired when a load has committed. This includes navigation within the current document as well as subframe document-level loads, but does not include asynchronous resource loads.</source>
          <target state="translated">ロードがコミットされたときに発生します。これには、現在のドキュメント内のナビゲーションやサブフレームのドキュメントレベルのロードが含まれますが、非同期のリソースロードは含まれません。</target>
        </trans-unit>
        <trans-unit id="277b75ade0fe25c29d720450d6e66a97fb6cf510" translate="yes" xml:space="preserve">
          <source>Fired when a plugin process is crashed.</source>
          <target state="translated">プラグインプロセスがクラッシュしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="6a0ffe5f413971478388bb78716740c0bc854831" translate="yes" xml:space="preserve">
          <source>Fired when a redirect was received while requesting a resource.</source>
          <target state="translated">リソースのリクエスト中にリダイレクトを受信した場合に発生します。</target>
        </trans-unit>
        <trans-unit id="6e3ac89d8432eea459401b7b1793621958ef5765" translate="yes" xml:space="preserve">
          <source>Fired when a result is available for &lt;a href=&quot;#webviewfindinpagetext-options&quot;&gt;&lt;code&gt;webview.findInPage&lt;/code&gt;&lt;/a&gt; request.</source>
          <target state="translated">結果が&lt;a href=&quot;#webviewfindinpagetext-options&quot;&gt; &lt;code&gt;webview.findInPage&lt;/code&gt; &lt;/a&gt;リクエストで利用可能になると発生します。</target>
        </trans-unit>
        <trans-unit id="52d384e722ca2265adbacfacb3b2c4c7da5b36c0" translate="yes" xml:space="preserve">
          <source>Fired when details regarding a requested resource is available. &lt;code&gt;status&lt;/code&gt; indicates socket connection to download the resource.</source>
          <target state="translated">リクエストされたリソースに関する詳細が利用可能になると発生します。 &lt;code&gt;status&lt;/code&gt; は、リソースをダウンロードするためのソケット接続を示します。</target>
        </trans-unit>
        <trans-unit id="4451d0b8ebb6b9a5a3977344345d786b96cc8075" translate="yes" xml:space="preserve">
          <source>Fired when document in the given frame is loaded.</source>
          <target state="translated">指定されたフレーム内の文書が読み込まれたときに発生します。</target>
        </trans-unit>
        <trans-unit id="f63f99464becc370d140a795365e8fd6b207381a" translate="yes" xml:space="preserve">
          <source>Fired when page enters fullscreen triggered by HTML API.</source>
          <target state="translated">HTML API によってページがフルスクリーンになったときに発生します。</target>
        </trans-unit>
        <trans-unit id="e2934ed79f57401f01947d5576b783caae267c53" translate="yes" xml:space="preserve">
          <source>Fired when page leaves fullscreen triggered by HTML API.</source>
          <target state="translated">HTML API によってページがフルスクリーンから離れたときに発生します。</target>
        </trans-unit>
        <trans-unit id="0570c1500c67e1d7aebc65a98a1b7e823f516360" translate="yes" xml:space="preserve">
          <source>Fired when page receives favicon urls.</source>
          <target state="translated">ページがファビコンのURLを受信したときに発生します。</target>
        </trans-unit>
        <trans-unit id="117e37459607abb65dce79a7c045800ead6888db" translate="yes" xml:space="preserve">
          <source>Fired when page title is set during navigation. &lt;code&gt;explicitSet&lt;/code&gt; is false when title is synthesized from file url.</source>
          <target state="translated">ナビゲーション中にページタイトルが設定されると発生します。タイトルがファイルURLから合成される場合、 &lt;code&gt;explicitSet&lt;/code&gt; はfalseです。</target>
        </trans-unit>
        <trans-unit id="be44199f58d36bd4301154b23d0dcb330ea0d875" translate="yes" xml:space="preserve">
          <source>Fired when the WebContents is destroyed.</source>
          <target state="translated">WebContentsが破壊されたときに発生します。</target>
        </trans-unit>
        <trans-unit id="4c9f296f1d9e1fa51dbae125c7971829e6c0c607" translate="yes" xml:space="preserve">
          <source>Fired when the gpu process is crashed.</source>
          <target state="translated">gpuプロセスがクラッシュしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="10d97ea48a6bad16b15200e1a9908e3087d0cf68" translate="yes" xml:space="preserve">
          <source>Fired when the guest page attempts to close itself.</source>
          <target state="translated">ゲストページが自分自身を閉じようとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="f369a2095107e692ef2ece44e4987543937640cc" translate="yes" xml:space="preserve">
          <source>Fired when the guest page attempts to open a new browser window.</source>
          <target state="translated">ゲストページが新しいブラウザウィンドウを開こうとしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="f24231d7fc3dfa3fde6a0c2f7d4794cda64c29f8" translate="yes" xml:space="preserve">
          <source>Fired when the guest page has sent an asynchronous message to embedder page.</source>
          <target state="translated">ゲストページがエンベッダーページに非同期メッセージを送信したときに発生します。</target>
        </trans-unit>
        <trans-unit id="ec7f3851082921c42a1028ddac2f7bc640c59467" translate="yes" xml:space="preserve">
          <source>Fired when the guest window logs a console message.</source>
          <target state="translated">ゲストウィンドウがコンソールメッセージを記録したときに発生します。</target>
        </trans-unit>
        <trans-unit id="dd8723914c8724f48e88e5f7cbd957e9107f2781" translate="yes" xml:space="preserve">
          <source>Fired when the navigation is done, i.e. the spinner of the tab will stop spinning, and the &lt;code&gt;onload&lt;/code&gt; event is dispatched.</source>
          <target state="translated">ナビゲーションが完了すると発生します。つまり、タブのスピナーが回転を停止し、 &lt;code&gt;onload&lt;/code&gt; イベントが送出されます。</target>
        </trans-unit>
        <trans-unit id="2129d76f2db58520ccfef9c9d47b3b2327db6bd4" translate="yes" xml:space="preserve">
          <source>Fired when the renderer process is crashed.</source>
          <target state="translated">レンダラプロセスがクラッシュしたときに発生します。</target>
        </trans-unit>
        <trans-unit id="fc1e93fb67c9edaeda6350f0a4f6392669140d9d" translate="yes" xml:space="preserve">
          <source>First please make sure the extension is still being maintained, some extensions can not even work for recent versions of Chrome browser, and we are not able to do anything for them.</source>
          <target state="translated">拡張機能の中には、最近のバージョンのChromeブラウザでは動作しないものもあり、何もできません。</target>
        </trans-unit>
        <trans-unit id="12a0d3bebd41a47a1ebcd202cc5fd6f469240c5a" translate="yes" xml:space="preserve">
          <source>First you need to download the &lt;code&gt;chromedriver&lt;/code&gt; binary, and run it:</source>
          <target state="translated">まず、 &lt;code&gt;chromedriver&lt;/code&gt; バイナリをダウンロードして実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="c97db4162758208ef13df66721f7af8cb0c380b7" translate="yes" xml:space="preserve">
          <source>First, in order to avoid deadlocks, the callbacks passed to the main process are called asynchronously. You should not expect the main process to get the return value of the passed callbacks.</source>
          <target state="translated">まず、デッドロックを避けるために、メインプロセスに渡されたコールバックは非同期に呼び出されます。メインプロセスが渡されたコールバックの戻り値を取得することを期待してはいけません。</target>
        </trans-unit>
        <trans-unit id="34b7a02caa86c50def87d171ced86e2b7a6d85dc" translate="yes" xml:space="preserve">
          <source>First, install &lt;a href=&quot;https://en.wikipedia.org/wiki/Xvfb&quot;&gt;Xvfb&lt;/a&gt;. It's a virtual framebuffer, implementing the X11 display server protocol - it performs all graphical operations in memory without showing any screen output, which is exactly what we need.</source>
          <target state="translated">まず、&lt;a href=&quot;https://en.wikipedia.org/wiki/Xvfb&quot;&gt;Xvfbを&lt;/a&gt;インストールします。これは仮想フレームバッファであり、X11ディスプレイサーバープロトコルを実装しています。これは、画面出力を表示せずにすべてのグラフィック操作をメモリ内で実行します。これはまさに私たちが必要とするものです。</target>
        </trans-unit>
        <trans-unit id="9be1e7185b5c9d3d7dabfa2ff2d7a828031f3d46" translate="yes" xml:space="preserve">
          <source>First, install a recent version of Node.js. Depending on your Linux distribution, the installation steps might differ. Assuming that you normally install software using a package manager like &lt;code&gt;apt&lt;/code&gt; or &lt;code&gt;pacman&lt;/code&gt;, use the official &lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;Node.js guidance on installing on Linux&lt;/a&gt;.</source>
          <target state="translated">まず、Node.jsの最新バージョンをインストールします。Linuxディストリビューションによっては、インストール手順が異なる場合があります。通常、 &lt;code&gt;apt&lt;/code&gt; や &lt;code&gt;pacman&lt;/code&gt; などのパッケージマネージャーを使用してソフトウェアをインストールすると想定して&lt;a href=&quot;https://nodejs.org/en/download/package-manager/&quot;&gt;、Linuxへのインストールに関する&lt;/a&gt;公式のNode.jsガイダンスを使用してください。</target>
        </trans-unit>
        <trans-unit id="0af76cb4ec629443cfcf87eae3eddbd49728f097" translate="yes" xml:space="preserve">
          <source>First, install a recent version of Node.js. We recommend that you install either the latest &lt;code&gt;LTS&lt;/code&gt; or &lt;code&gt;Current&lt;/code&gt; version available. Visit &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;the Node.js download page&lt;/a&gt; and select the &lt;code&gt;Windows Installer&lt;/code&gt;. Once downloaded, execute the installer and let the installation wizard guide you through the installation.</source>
          <target state="translated">まず、Node.jsの最新バージョンをインストールします。利用可能な最新の &lt;code&gt;LTS&lt;/code&gt; または &lt;code&gt;Current&lt;/code&gt; バージョンをインストールすることをお勧めします。&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.jsダウンロードページに&lt;/a&gt;アクセスし、 &lt;code&gt;Windows Installer&lt;/code&gt; を選択します。ダウンロードしたら、インストーラーを実行し、インストールウィザードがインストールをガイドします。</target>
        </trans-unit>
        <trans-unit id="cc292aedc916ac210a076b2b0186247bdd714b0b" translate="yes" xml:space="preserve">
          <source>First, install a recent version of Node.js. We recommend that you install either the latest &lt;code&gt;LTS&lt;/code&gt; or &lt;code&gt;Current&lt;/code&gt; version available. Visit &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;the Node.js download page&lt;/a&gt; and select the &lt;code&gt;macOS Installer&lt;/code&gt;. While Homebrew is an offered option, but we recommend against it - many tools will be incompatible with the way Homebrew installs Node.js.</source>
          <target state="translated">まず、Node.jsの最新バージョンをインストールします。利用可能な最新の &lt;code&gt;LTS&lt;/code&gt; または &lt;code&gt;Current&lt;/code&gt; バージョンをインストールすることをお勧めします。&lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.jsダウンロードページに&lt;/a&gt;アクセスし、 &lt;code&gt;macOS Installer&lt;/code&gt; を選択します。Homebrewは提供されるオプションですが、推奨されません-多くのツールは、HomebrewがNode.jsをインストールする方法と互換性がありません。</target>
        </trans-unit>
        <trans-unit id="a5f20133fa49f1f0f7a79e4e6d78d4ee0da8b06b" translate="yes" xml:space="preserve">
          <source>First, let's edit our interface so users can toggle between light and dark modes. This basic UI contains buttons to change the &lt;code&gt;nativeTheme.themeSource&lt;/code&gt; setting and a text element indicating which &lt;code&gt;themeSource&lt;/code&gt; value is selected. By default, Electron follows the system's dark mode preference, so we will hardcode the theme source as &quot;System&quot;.</source>
          <target state="translated">まず、ユーザーがライトモードとダークモードを切り替えることができるように、インターフェイスを編集しましょう。この基本的なUIには、 &lt;code&gt;nativeTheme.themeSource&lt;/code&gt; 設定を変更するためのボタンと、選択されている &lt;code&gt;themeSource&lt;/code&gt; 値を示すテキスト要素が含まれています。デフォルトでは、Electronはシステムのダークモード設定に従うため、テーマソースを「システム」としてハードコーディングします。</target>
        </trans-unit>
        <trans-unit id="aedf37ea270515b99497d91f9406d4da309c9ae7" translate="yes" xml:space="preserve">
          <source>First, you have to add a &lt;code&gt;ElectronTeamID&lt;/code&gt; key to your app's &lt;code&gt;Info.plist&lt;/code&gt;, which has your Team ID as its value:</source>
          <target state="translated">まず、 &lt;code&gt;ElectronTeamID&lt;/code&gt; キーをアプリの &lt;code&gt;Info.plist&lt;/code&gt; に追加する必要があります。このキーには、チームIDが値として含まれています。</target>
        </trans-unit>
        <trans-unit id="1d7df8cadd80eb18446994d001ea3461e077d6dd" translate="yes" xml:space="preserve">
          <source>First, you have to add a &lt;code&gt;ElectronTeamID&lt;/code&gt; key to your app's &lt;code&gt;Info.plist&lt;/code&gt;, which has your Team ID as value:</source>
          <target state="translated">まず、アプリの &lt;code&gt;Info.plist&lt;/code&gt; に &lt;code&gt;ElectronTeamID&lt;/code&gt; キーを追加する必要があります。これには、値としてチームIDが含まれます。</target>
        </trans-unit>
        <trans-unit id="ca0882e805f3e57f974f180e01085f543e2fb36d" translate="yes" xml:space="preserve">
          <source>Fix &lt;code&gt;*.patch&lt;/code&gt; files in the &lt;code&gt;patches/&lt;/code&gt; and &lt;code&gt;patches-mas/&lt;/code&gt; folders.</source>
          <target state="translated">修正 &lt;code&gt;*.patch&lt;/code&gt; ファイルの中のファイル &lt;code&gt;patches/&lt;/code&gt; および &lt;code&gt;patches-mas/&lt;/code&gt; フォルダ。</target>
        </trans-unit>
        <trans-unit id="3573878e20013b55583b98e25b25480b5f447544" translate="yes" xml:space="preserve">
          <source>Fix build config errors first</source>
          <target state="translated">ビルドコンフィグのエラーを最初に修正</target>
        </trans-unit>
        <trans-unit id="2fd326b2a55bcce8aaf40e5b205a43586f01e477" translate="yes" xml:space="preserve">
          <source>Fix compilation and linking errors</source>
          <target state="translated">コンパイルとリンクのエラーを修正</target>
        </trans-unit>
        <trans-unit id="be472760b1c59aabacb468181805b6d35ea1f4a6" translate="yes" xml:space="preserve">
          <source>Fix fatal errors first, like missing files and errors related to compiler flags or defines</source>
          <target state="translated">ファイルが見つからない、コンパイラフラグや定義に関連したエラーなどの致命的なエラーを最初に修正します。</target>
        </trans-unit>
        <trans-unit id="d1cadd8ae95fff74283ef0e169c388a7747600a6" translate="yes" xml:space="preserve">
          <source>Fix missing binaries of a release manually</source>
          <target state="translated">欠落しているリリースのバイナリを手動で修正</target>
        </trans-unit>
        <trans-unit id="ecdbb9113c4d8c2f61653a2c4c861cc1dc00c823" translate="yes" xml:space="preserve">
          <source>Flash Frame</source>
          <target state="translated">フラッシュフレーム</target>
        </trans-unit>
        <trans-unit id="bd43ec85fdff6518874fb812586a2433706d81d5" translate="yes" xml:space="preserve">
          <source>Focuses on the window.</source>
          <target state="translated">窓にピントを合わせます。</target>
        </trans-unit>
        <trans-unit id="cee144f2d216cdc7631ba053ba3f05f1965d28a6" translate="yes" xml:space="preserve">
          <source>Focuses the child window (brings the window to front).</source>
          <target state="translated">子ウィンドウをフォーカスします(ウィンドウを前面に出します)。</target>
        </trans-unit>
        <trans-unit id="14c6a7fd821dc867b3d84617a634eef0422b84c7" translate="yes" xml:space="preserve">
          <source>Focuses the web page.</source>
          <target state="translated">ウェブページにフォーカスを当てます。</target>
        </trans-unit>
        <trans-unit id="aecd03a4a4b9d532aa63bf7dc404e53645c982b7" translate="yes" xml:space="preserve">
          <source>Follow all the steps above to fix Electron code on all supported platforms.</source>
          <target state="translated">上記の手順に従って、サポートされているすべてのプラットフォームでElectronコードを修正してください。</target>
        </trans-unit>
        <trans-unit id="1c24b5bf867b6e42c0299f9cc8698367f71b90cc" translate="yes" xml:space="preserve">
          <source>Follow the guidelines below for building Electron on Linux.</source>
          <target state="translated">Linux上でElectronを構築するには、以下のガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="5b7fa4ec60b9d247ca93f67ab735d3ef943d7b6a" translate="yes" xml:space="preserve">
          <source>Follow the guidelines below for building Electron on Windows.</source>
          <target state="translated">Windows上にElectronを構築するには、以下のガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="fd80cb5d21b263826159e8667626fffe170c3f97" translate="yes" xml:space="preserve">
          <source>Follow the guidelines below for building Electron on macOS.</source>
          <target state="translated">以下のガイドラインに従って、macOS上でElectronをビルドしてください。</target>
        </trans-unit>
        <trans-unit id="7918e53919f3efaa0dfa15fb15011ba6065eb834" translate="yes" xml:space="preserve">
          <source>Follow the guidelines below for building Electron with the experimental GN build.</source>
          <target state="translated">実験的GNビルドでElectronをビルドするには、以下のガイドラインに従ってください。</target>
        </trans-unit>
        <trans-unit id="193e1f0e0c4d19d51ab7ad7331c2dd3a3cb75e35" translate="yes" xml:space="preserve">
          <source>Follow the guidelines below for building Electron.</source>
          <target state="translated">以下のガイドラインに従ってElectronを構築してください。</target>
        </trans-unit>
        <trans-unit id="921acf758984257599ba401c33220ee705e3803f" translate="yes" xml:space="preserve">
          <source>Following &lt;code&gt;gyp&lt;/code&gt; files contain the main rules for building Electron:</source>
          <target state="translated">以下の &lt;code&gt;gyp&lt;/code&gt; ファイルには、Electronを構築するための主なルールが含まれています。</target>
        </trans-unit>
        <trans-unit id="549cb66a7786a536325eec62186f803c70217c72" translate="yes" xml:space="preserve">
          <source>Following platforms are supported by Electron:</source>
          <target state="translated">Electronがサポートしているプラットフォームは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="c2e6ed1cc1e40ea38253fb9692c1bee87a7a9da6" translate="yes" xml:space="preserve">
          <source>Following suffixes for DPI are also supported:</source>
          <target state="translated">以下のDPIのサフィックスもサポートしています。</target>
        </trans-unit>
        <trans-unit id="e7fe0bf347ec209bee8e530d447ba905eaf79ce5" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;infoType&lt;/code&gt; equal to &lt;code&gt;basic&lt;/code&gt;: Promise is fulfilled with &lt;code&gt;Object&lt;/code&gt; containing fewer attributes than when requested with &lt;code&gt;complete&lt;/code&gt;. Here's an example of basic response:</source>
          <target state="translated">&lt;code&gt;infoType&lt;/code&gt; に等しい &lt;code&gt;basic&lt;/code&gt; ：約束をして満たされている &lt;code&gt;Object&lt;/code&gt; を要求されたときよりも少ない属性含む &lt;code&gt;complete&lt;/code&gt; 。基本的な応答の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="f082cd56fddf46d89a14c8f8668cb2eb08f6b251" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;infoType&lt;/code&gt; equal to &lt;code&gt;complete&lt;/code&gt;: Promise is fulfilled with &lt;code&gt;Object&lt;/code&gt; containing all the GPU Information as in &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/4178e190e9da409b055e5dff469911ec6f6b716f/gpu/config/gpu_info.cc&quot;&gt;chromium's GPUInfo object&lt;/a&gt;. This includes the version and driver information that's shown on &lt;code&gt;chrome://gpu&lt;/code&gt; page.</source>
          <target state="translated">&lt;code&gt;infoType&lt;/code&gt; に等しい &lt;code&gt;complete&lt;/code&gt; ：プロミスで満たされている &lt;code&gt;Object&lt;/code&gt; のように全てのGPU情報を含む&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/4178e190e9da409b055e5dff469911ec6f6b716f/gpu/config/gpu_info.cc&quot;&gt;クロムのGPUInfoオブジェクト&lt;/a&gt;。これには、 &lt;code&gt;chrome://gpu&lt;/code&gt; ページに表示されるバージョンとドライバーの情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="9b1856927689f0b70cf48435344dc811e1f0d867" translate="yes" xml:space="preserve">
          <source>For API references, there are exceptions to this rule.</source>
          <target state="translated">API参照については、このルールには例外があります。</target>
        </trans-unit>
        <trans-unit id="7ed62a7bbd3406e1648a659173663fd21604ab49" translate="yes" xml:space="preserve">
          <source>For C++ and Python, we follow Chromium's &lt;a href=&quot;https://www.chromium.org/developers/coding-style&quot;&gt;Coding Style&lt;/a&gt;. You can use &lt;a href=&quot;clang-format&quot;&gt;clang-format&lt;/a&gt; to format the C++ code automatically. There is also a script &lt;code&gt;script/cpplint.py&lt;/code&gt; to check whether all files conform.</source>
          <target state="translated">C ++およびPythonについては、Chromiumの&lt;a href=&quot;https://www.chromium.org/developers/coding-style&quot;&gt;コーディングスタイルに&lt;/a&gt;従います。&lt;a href=&quot;clang-format&quot;&gt;clang-format&lt;/a&gt;を使用して、C ++コードを自動的にフォーマットできます。すべてのファイルが準拠しているかどうかを確認するスクリプト &lt;code&gt;script/cpplint.py&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="e74b0c2c245b6a943ac4d87389b49f44dcd696ee" translate="yes" xml:space="preserve">
          <source>For C++ and Python, we follow Chromium's &lt;a href=&quot;https://www.chromium.org/developers/coding-style&quot;&gt;Coding Style&lt;/a&gt;. You can use &lt;a href=&quot;development/clang-format&quot;&gt;clang-format&lt;/a&gt; to format the C++ code automatically. There is also a script &lt;code&gt;script/cpplint.py&lt;/code&gt; to check whether all files conform.</source>
          <target state="translated">C ++およびPythonの場合、Chromiumの&lt;a href=&quot;https://www.chromium.org/developers/coding-style&quot;&gt;コーディングスタイルに&lt;/a&gt;従います。&lt;a href=&quot;development/clang-format&quot;&gt;clang-format&lt;/a&gt;を使用して、C ++コードを自動的にフォーマットできます。すべてのファイルが準拠しているかどうかを確認するためのスクリプト &lt;code&gt;script/cpplint.py&lt;/code&gt; もあります。</target>
        </trans-unit>
        <trans-unit id="524956d4e49580fce3e083c2e746c9cc4ddc290a" translate="yes" xml:space="preserve">
          <source>For Electron 9 and higher the spellchecker is enabled by default. For Electron 8 you need to enable it in &lt;code&gt;webPreferences&lt;/code&gt;.</source>
          <target state="translated">Electron 9以降では、スペルチェッカーはデフォルトで有効になっています。Electron 8の場合、 &lt;code&gt;webPreferences&lt;/code&gt; で有効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="1111e6b08b7a2e0ce97ca11efe04cef41bea428e" translate="yes" xml:space="preserve">
          <source>For Jenkins, a &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Xvfb+Plugin&quot;&gt;Xvfb plugin is available&lt;/a&gt;.</source>
          <target state="translated">Jenkinsの場合、&lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Xvfb+Plugin&quot;&gt;Xvfbプラグインが利用可能です&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="2e234ecf902399c6ca2e2168815587789055c246" translate="yes" xml:space="preserve">
          <source>For POST requests the &lt;code&gt;uploadData&lt;/code&gt; object must be provided.</source>
          <target state="translated">POSTリクエストの場合、 &lt;code&gt;uploadData&lt;/code&gt; オブジェクトを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="b5c7c488de68864ac20ca5e39bc85e54c5c53cbe" translate="yes" xml:space="preserve">
          <source>For Windows and Linux there are a few Electron APIs you should use to set the languages for the spellchecker.</source>
          <target state="translated">WindowsおよびLinuxでは、スペルチェッカの言語設定に使用するElectron APIがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="2e94ed3bd242175238f65cecbea47db530efc30e" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;minor&lt;/code&gt; release, e.g. &lt;code&gt;1.8.0&lt;/code&gt;, use this format:</source>
          <target state="translated">&lt;code&gt;1.8.0&lt;/code&gt; などの &lt;code&gt;minor&lt;/code&gt; リリースの場合は、次の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="c3aef3c0a78c4ebdda5b31c717e34be096a56311" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;patch&lt;/code&gt; release, use the following format:</source>
          <target state="translated">以下のため &lt;code&gt;patch&lt;/code&gt; リリースで、次の形式を使用します。</target>
        </trans-unit>
        <trans-unit id="fc84c5b30853e927ab61c178eca9058bf3442a18" translate="yes" xml:space="preserve">
          <source>For a complex app, the &lt;code&gt;ready-to-show&lt;/code&gt; event could be emitted too late, making the app feel slow. In this case, it is recommended to show the window immediately, and use a &lt;code&gt;backgroundColor&lt;/code&gt; close to your app's background:</source>
          <target state="translated">複雑なアプリの場合、 &lt;code&gt;ready-to-show&lt;/code&gt; できるイベントの発行が遅すぎて、アプリが遅く感じられる可能性があります。この場合、ウィンドウをすぐに表示し、アプリの背景に近い &lt;code&gt;backgroundColor&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="22fe9873a98adb59030dea1269d80e54827cd0a8" translate="yes" xml:space="preserve">
          <source>For a list of boilerplates and tools to kick-start your development process, see the &lt;a href=&quot;boilerplates-and-clis&quot;&gt;Boilerplates and CLIs documentation&lt;/a&gt;.</source>
          <target state="translated">開発プロセスを開始するためのボイラープレートとツールのリストについては、ボイラープレート&lt;a href=&quot;boilerplates-and-clis&quot;&gt;とCLIのドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="b4fdf20b52a54c5c410ee30c1b5961d4d623dae0" translate="yes" xml:space="preserve">
          <source>For a subset of Electron functionality it makes sense to disable certain features for an entire application. For example, 99% of apps don't make use of &lt;code&gt;ELECTRON_RUN_AS_NODE&lt;/code&gt;, these applications want to be able to ship a binary that is incapable of using that feature. We also don't want Electron consumers building Electron from source as that is both a massive technical challenge and has a high cost of both time and money.</source>
          <target state="translated">Electron機能のサブセットの場合、アプリケーション全体で特定の機能を無効にすることは理にかなっています。たとえば、99％のアプリは &lt;code&gt;ELECTRON_RUN_AS_NODE&lt;/code&gt; を使用していません。これらのアプリケーションは、その機能を使用できないバイナリを出荷できるようにしたいと考えています。また、Electronの消費者がソースからElectronを構築することは望ましくありません。これは、技術的な大きな課題であり、時間と費用の両方が高いためです。</target>
        </trans-unit>
        <trans-unit id="956902aa84cfb91f426f18cd11e77e87658eab1e" translate="yes" xml:space="preserve">
          <source>For all other headers, the values are joined together with ', '.</source>
          <target state="translated">他のすべてのヘッダでは、値は ',' で結合されます。</target>
        </trans-unit>
        <trans-unit id="d588bcee88995a0c7fae3327f86fa8df139ed0a0" translate="yes" xml:space="preserve">
          <source>For an introduction to ProcMon's basic and advanced debugging features, go check out &lt;a href=&quot;https://channel9.msdn.com/shows/defrag-tools/defrag-tools-4-process-monitor&quot;&gt;this video tutorial&lt;/a&gt; provided by Microsoft.</source>
          <target state="translated">ProcMonの基本的なデバッグ機能と高度なデバッグ機能の概要については、Microsoftが提供する&lt;a href=&quot;https://channel9.msdn.com/shows/defrag-tools/defrag-tools-4-process-monitor&quot;&gt;このビデオチュートリアル&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="20758183c3e1338dc8a6b93162460ce862ff75d3" translate="yes" xml:space="preserve">
          <source>For any issue, there are fundamentally three ways an individual can contribute:</source>
          <target state="translated">どのような課題に対しても、個人が貢献できる方法は基本的に3つあります。</target>
        </trans-unit>
        <trans-unit id="c36476d109a6eac638160d47ed71c4848f206bb8" translate="yes" xml:space="preserve">
          <source>For certain events the &lt;code&gt;listener&lt;/code&gt; is passed with a &lt;code&gt;callback&lt;/code&gt;, which should be called with a &lt;code&gt;response&lt;/code&gt; object when &lt;code&gt;listener&lt;/code&gt; has done its work.</source>
          <target state="translated">特定のイベントでは、 &lt;code&gt;listener&lt;/code&gt; は &lt;code&gt;callback&lt;/code&gt; で渡されます。コールバックは、 &lt;code&gt;listener&lt;/code&gt; が作業を完了したときに &lt;code&gt;response&lt;/code&gt; オブジェクトで呼び出されます。</target>
        </trans-unit>
        <trans-unit id="502cf085450be5d6d8a56eda1a567fd820d5644e" translate="yes" xml:space="preserve">
          <source>For certain features (e.g. pinch-zoom) to work properly, you must target the macOS 10.10 SDK.</source>
          <target state="translated">特定の機能(ピンチズームなど)を正しく動作させるには、macOS 10.10 SDKをターゲットにする必要があります。</target>
        </trans-unit>
        <trans-unit id="f55316ce3b72dc39959ab1636a82f40fea730083" translate="yes" xml:space="preserve">
          <source>For convenience, you may want to wrap &lt;code&gt;appProcess&lt;/code&gt; in a driver object that provides more high-level functions. Here is an example of how you can do this:</source>
          <target state="translated">便宜上、より高レベルの関数を提供するドライバーオブジェクトで &lt;code&gt;appProcess&lt;/code&gt; をラップすることができます。これを行う方法の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="c20150042740cb3bd17b581a9f4141df5974afae" translate="yes" xml:space="preserve">
          <source>For details, see &lt;a href=&quot;https://github.com/electron/electron/pull/6986&quot;&gt;6986&lt;/a&gt; and &lt;a href=&quot;https://github.com/electron/electron/pull/7189&quot;&gt;7189&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/electron/electron/pull/6986&quot;&gt;6986&lt;/a&gt;および&lt;a href=&quot;https://github.com/electron/electron/pull/7189&quot;&gt;7189を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7f4255927b82eac232a3604f861da1b4f744c0e1" translate="yes" xml:space="preserve">
          <source>For duplicate &lt;code&gt;cookie&lt;/code&gt; headers, the values are joined together with '; '.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; ヘッダーが重複している場合、値は「;」で結合されます。'。</target>
        </trans-unit>
        <trans-unit id="6265093784bd7dbf5e19bb812e72dae142bf8944" translate="yes" xml:space="preserve">
          <source>For each major and minor bump, you should expect to see something like the following:</source>
          <target state="translated">メジャーバンプとマイナーバンプのそれぞれについて、以下のようなものが表示されることを期待してください。</target>
        </trans-unit>
        <trans-unit id="58abffa9ea34b3901414814791108b8b1b94cc23" translate="yes" xml:space="preserve">
          <source>For each patch, do:</source>
          <target state="translated">各パッチについては、実行してください。</target>
        </trans-unit>
        <trans-unit id="83edd08299e575573bc5493f6bc769dea6d6a6c1" translate="yes" xml:space="preserve">
          <source>For each patch:</source>
          <target state="translated">各パッチのために。</target>
        </trans-unit>
        <trans-unit id="7e1e492e1ff102dacf9ee3206f3207099b0d6167" translate="yes" xml:space="preserve">
          <source>For example building with GCC toolchain:</source>
          <target state="translated">例えば、GCCツールチェーンを使って構築します。</target>
        </trans-unit>
        <trans-unit id="065f28411e5112140feb1dde5f9794fa00a0584d" translate="yes" xml:space="preserve">
          <source>For example if &lt;code&gt;icon.png&lt;/code&gt; is a normal image that has standard resolution, then &lt;code&gt;icon@2x.png&lt;/code&gt; will be treated as a high resolution image that has double DPI density.</source>
          <target state="translated">たとえば、 &lt;code&gt;icon.png&lt;/code&gt; が標準解像度の通常の画像である場合、 &lt;code&gt;icon@2x.png&lt;/code&gt; は、DPI密度が2倍の高解像度画像として扱われます。</target>
        </trans-unit>
        <trans-unit id="7c473301f00f572dccbc6dcc4c5399d4e0ed0ace" translate="yes" xml:space="preserve">
          <source>For example if you installed &lt;code&gt;clang&lt;/code&gt; under &lt;code&gt;/user/local/bin/clang&lt;/code&gt;:</source>
          <target state="translated">あなたがインストールしている場合たとえば、 &lt;code&gt;clang&lt;/code&gt; 下に &lt;code&gt;/user/local/bin/clang&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="26f86631003d6d3b4b82afd422075d9ac2b69188" translate="yes" xml:space="preserve">
          <source>For example if you installed &lt;code&gt;clang&lt;/code&gt; under &lt;code&gt;/usr/local/bin/clang&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;/usr/local/bin/clang&lt;/code&gt; の下に &lt;code&gt;clang&lt;/code&gt; をインストールした場合：</target>
        </trans-unit>
        <trans-unit id="ba48d1140902ffdcb02cd8e0d7757e695bd35f62" translate="yes" xml:space="preserve">
          <source>For example when you load following page with custom protocol without registering it as standard scheme, the image will not be loaded because non-standard schemes can not recognize relative URLs:</source>
          <target state="translated">例えば、標準スキームに登録せずにカスタムプロトコルで以下のページを読み込むと、非標準スキームでは相対URLを認識できないため、画像は読み込まれません。</target>
        </trans-unit>
        <trans-unit id="493ec61d1e04b47a4387b0ca5addeea25d2a2575" translate="yes" xml:space="preserve">
          <source>For example, Windows Media Player might offer standard media transport controls such as play, pause, mute, and stop.</source>
          <target state="translated">例えば、Windows Media Playerは、再生、一時停止、ミュート、停止などの標準的なメディアトランスポートコントロールを提供しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="3494f8de5fe0b0ecf247fa44514610b6a4b5dc01" translate="yes" xml:space="preserve">
          <source>For example, an API calling A requests for &lt;code&gt;prevent-app-suspension&lt;/code&gt;, and another calling B requests for &lt;code&gt;prevent-display-sleep&lt;/code&gt;. &lt;code&gt;prevent-display-sleep&lt;/code&gt; will be used until B stops its request. After that, &lt;code&gt;prevent-app-suspension&lt;/code&gt; is used.</source>
          <target state="translated">たとえば、Aを呼び出すAPIが &lt;code&gt;prevent-app-suspension&lt;/code&gt; を要求し、別のBを呼び出すことが &lt;code&gt;prevent-display-sleep&lt;/code&gt; を要求します。 &lt;code&gt;prevent-display-sleep&lt;/code&gt; は、Bが要求を停止するまで使用されます。その後、 &lt;code&gt;prevent-app-suspension&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="03ca657be2d43086ea0314b5c15e030ff5c58672" translate="yes" xml:space="preserve">
          <source>For example, if &lt;code&gt;icon.png&lt;/code&gt; is a normal image that has standard resolution, then &lt;code&gt;icon@2x.png&lt;/code&gt; will be treated as a high resolution image that has double DPI density.</source>
          <target state="translated">たとえば、 &lt;code&gt;icon.png&lt;/code&gt; が標準解像度の通常の画像である場合、 &lt;code&gt;icon@2x.png&lt;/code&gt; は2倍のDPI密度を持つ高解像度画像として扱われます。</target>
        </trans-unit>
        <trans-unit id="9c1f50d21d4007f1d24f2deda38646ce1693771a" translate="yes" xml:space="preserve">
          <source>For example, suppose we have an &lt;code&gt;example.asar&lt;/code&gt; archive under &lt;code&gt;/path/to&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;/path/to&lt;/code&gt; の下に &lt;code&gt;example.asar&lt;/code&gt; アーカイブがあるとします。</target>
        </trans-unit>
        <trans-unit id="e6543b5df66545d392593abae27aaf4d3618aaa2" translate="yes" xml:space="preserve">
          <source>For example, the following code seems innocent at first glance. It installs a callback for the &lt;code&gt;close&lt;/code&gt; event on a remote object:</source>
          <target state="translated">たとえば、次のコードは一見無害のように見えます。リモートオブジェクトの &lt;code&gt;close&lt;/code&gt; イベントのコールバックをインストールします。</target>
        </trans-unit>
        <trans-unit id="5987f05877c28042562f9f718a4a4c8e2dec92e0" translate="yes" xml:space="preserve">
          <source>For example, the methods of the &lt;code&gt;Session&lt;/code&gt; class under the &lt;code&gt;session&lt;/code&gt; module must use &lt;code&gt;ses&lt;/code&gt; as the &lt;code&gt;objectName&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;session&lt;/code&gt; モジュールの下の &lt;code&gt;Session&lt;/code&gt; クラスのメソッドは、 &lt;code&gt;objectName&lt;/code&gt; として &lt;code&gt;ses&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0265d0e5b1761ccffe2ee6e585cbe994b9a3ccbf" translate="yes" xml:space="preserve">
          <source>For example, to access the Electron API in both processes, require its included module:</source>
          <target state="translated">例えば、両方のプロセスでElectron APIにアクセスするには、同梱のモジュールが必要です。</target>
        </trans-unit>
        <trans-unit id="b2c330e45eb22f06fc0ae8f33da09f6bd6a525e6" translate="yes" xml:space="preserve">
          <source>For example, to get a file with &lt;code&gt;$.get&lt;/code&gt;:</source>
          <target state="translated">たとえば、 &lt;code&gt;$.get&lt;/code&gt; ファイルを取得するには：</target>
        </trans-unit>
        <trans-unit id="6df8cab4c31908f53df67f6b5d786e9e38d009d7" translate="yes" xml:space="preserve">
          <source>For example, to install &lt;code&gt;electron-rebuild&lt;/code&gt; and then rebuild modules with it via the command line:</source>
          <target state="translated">たとえば、 &lt;code&gt;electron-rebuild&lt;/code&gt; をインストールしてから、コマンドラインからモジュールを再構築するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="b14eac0e28ae773f75d54ad13525d27764aac116" translate="yes" xml:space="preserve">
          <source>For example, to install all dependencies for Electron:</source>
          <target state="translated">例えば、Electronのすべての依存関係をインストールするには、以下のようにします。</target>
        </trans-unit>
        <trans-unit id="49a277e10dfd7299cf73cfb6c1f4de56cad0bbf3" translate="yes" xml:space="preserve">
          <source>For example, when creating a tray or setting a window's icon, you can pass an image file path as a &lt;code&gt;String&lt;/code&gt;:</source>
          <target state="translated">たとえば、トレイを作成したり、ウィンドウのアイコンを設定したりする場合、イメージファイルのパスを &lt;code&gt;String&lt;/code&gt; として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="dc165346dfd2f10c3f19f087c010877da49b91ef" translate="yes" xml:space="preserve">
          <source>For information on how to properly disclose an Electron vulnerability, see &lt;a href=&quot;https://github.com/electron/electron/tree/master/SECURITY.md&quot;&gt;SECURITY.md&lt;/a&gt;</source>
          <target state="translated">Electronの脆弱性を適切に開示する方法については、&lt;a href=&quot;https://github.com/electron/electron/tree/master/SECURITY.md&quot;&gt;SECURITY.mdを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="26000534d32ef52933841a528d4d8361afeb23a6" translate="yes" xml:space="preserve">
          <source>For instance you can't use a function from the renderer process in an &lt;code&gt;Array.map&lt;/code&gt; called in the main process:</source>
          <target state="translated">たとえば、メインプロセスで呼び出された &lt;code&gt;Array.map&lt;/code&gt; でレンダラープロセスの関数を使用することはできません。</target>
        </trans-unit>
        <trans-unit id="21d1e0d87b298c57a74a76988b09ab848fb4f7af" translate="yes" xml:space="preserve">
          <source>For instance, Electron uses Chromium's rendering library rather than all of Chromium. This makes it easier to upgrade Chromium but also means some browser features found in Google Chrome do not exist in Electron.</source>
          <target state="translated">例えば、ElectronはChromiumのすべてではなく、Chromiumのレンダリングライブラリを使用しています。これにより、Chromium のアップグレードが容易になりますが、Google Chrome に見られるいくつかのブラウザ機能が Electron には存在しないことになります。</target>
        </trans-unit>
        <trans-unit id="85f3a1e5e439ec3b7f4fca1ecd7c8de55b68620e" translate="yes" xml:space="preserve">
          <source>For instance, the following example quickly shows how the &lt;code&gt;net&lt;/code&gt; API might be used:</source>
          <target state="translated">たとえば、次の例は、 &lt;code&gt;net&lt;/code&gt; APIの使用方法をすばやく示しています。</target>
        </trans-unit>
        <trans-unit id="aa87bd614d9dce370155a8e065a88a9011399793" translate="yes" xml:space="preserve">
          <source>For instance, to use the China CDN mirror:</source>
          <target state="translated">例えば、中国のCDNミラーを利用する場合。</target>
        </trans-unit>
        <trans-unit id="248c4264fd961b911b66e5010fd921898cf7d57a" translate="yes" xml:space="preserve">
          <source>For instance, to use the China mirror:</source>
          <target state="translated">例えば、チャイナミラーを使うとか。</target>
        </trans-unit>
        <trans-unit id="253f8917506432b3ee4474e59a0b7110f22e5749" translate="yes" xml:space="preserve">
          <source>For instance, we could have created the same request to 'github.com' as follows:</source>
          <target state="translated">例えば、以下のように'github.com'に対して同じリクエストを作成することができます。</target>
        </trans-unit>
        <trans-unit id="f1c45df08669248a19de97849fd5f55d5638340a" translate="yes" xml:space="preserve">
          <source>For instructions on how to acquire a Google API key, visit &lt;a href=&quot;https://www.chromium.org/developers/how-tos/api-keys&quot;&gt;this page&lt;/a&gt;.</source>
          <target state="translated">Google APIキーを取得する方法については、&lt;a href=&quot;https://www.chromium.org/developers/how-tos/api-keys&quot;&gt;このページ&lt;/a&gt;にアクセスしてください。</target>
        </trans-unit>
        <trans-unit id="243e0173737239b628ca89b755eb49cb3a3707d3" translate="yes" xml:space="preserve">
          <source>For keyboard events, the &lt;code&gt;event&lt;/code&gt; object also have following properties:</source>
          <target state="translated">キーボードイベントの場合、 &lt;code&gt;event&lt;/code&gt; オブジェクトには次のプロパティもあります。</target>
        </trans-unit>
        <trans-unit id="d013779a88817719fd09fd1a28d823c7cb62d408" translate="yes" xml:space="preserve">
          <source>For macOS, the progress bar will also be indicated for your application when using &lt;a href=&quot;https://support.apple.com/en-us/HT204100&quot;&gt;Mission Control&lt;/a&gt;:</source>
          <target state="translated">macOSの場合、&lt;a href=&quot;https://support.apple.com/en-us/HT204100&quot;&gt;Mission Control&lt;/a&gt;を使用すると、アプリケーションのプログレスバーも表示されます。</target>
        </trans-unit>
        <trans-unit id="b3fc23298d85bc89aaf5e8a548d3f5379c0642de" translate="yes" xml:space="preserve">
          <source>For modules that are not classes, their methods and events must be listed under the &lt;code&gt;## Methods&lt;/code&gt; and &lt;code&gt;## Events&lt;/code&gt; chapters.</source>
          <target state="translated">クラスではないモジュールの場合、それらのメソッドとイベントは、 &lt;code&gt;## Methods&lt;/code&gt; と &lt;code&gt;## Events&lt;/code&gt; 章にリストされている必要があります。</target>
        </trans-unit>
        <trans-unit id="97f78d47d10950220c612b6122939434b1918061" translate="yes" xml:space="preserve">
          <source>For modules, the &lt;code&gt;objectName&lt;/code&gt; is the module's name. For classes, it must be the name of the instance of the class, and must not be the same as the module's name.</source>
          <target state="translated">モジュールの場合、 &lt;code&gt;objectName&lt;/code&gt; はモジュールの名前です。クラスの場合、クラスのインスタンスの名前である必要があり、モジュールの名前と同じであってはなりません。</target>
        </trans-unit>
        <trans-unit id="c21531e0b7a208c2ac961ef8759257c43f46a280" translate="yes" xml:space="preserve">
          <source>For more detailed information see &lt;a href=&quot;https://github.com/electron/electron/issues/18397&quot;&gt;#18397&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/electron/electron/issues/18397&quot;&gt;＃18397を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="6a7f01cebc66bde3e43e0b7a5f6ee0627c0752df" translate="yes" xml:space="preserve">
          <source>For more detailed information, see &lt;a href=&quot;https://github.com/electron/electron/pull/23578&quot;&gt;#23578&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/electron/electron/pull/23578&quot;&gt;＃23578を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="41d825d9a729036d3726dec181c4a0ca26f90914" translate="yes" xml:space="preserve">
          <source>For more details see: &lt;a href=&quot;https://github.com/electron/electron/issues/23506&quot;&gt;https://github.com/electron/electron/issues/23506&lt;/a&gt;</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://github.com/electron/electron/issues/23506&quot;&gt;https&lt;/a&gt;：//github.com/electron/electron/issues/23506を参照してください。</target>
        </trans-unit>
        <trans-unit id="12ce8d2e3bf4689b50d95cab569ba2b0adf45656" translate="yes" xml:space="preserve">
          <source>For more info, see the &lt;a href=&quot;mac-app-store-submission-guide&quot;&gt;Mac App Store Submission Guide&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;mac-app-store-submission-guide&quot;&gt;Mac App Store Submission Guideを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="72310bb077b7a4aabe4c2bd84e6c77d6e4541848" translate="yes" xml:space="preserve">
          <source>For more information on the available configuration options, see the &lt;a href=&quot;https://docs.snapcraft.io/build-snaps/syntax&quot;&gt;documentation on the snapcraft syntax&lt;/a&gt;. Let's look at an example:</source>
          <target state="translated">使用可能な構成オプションの詳細については&lt;a href=&quot;https://docs.snapcraft.io/build-snaps/syntax&quot;&gt;、snapcraft構文のドキュメントを&lt;/a&gt;参照してください。例を見てみましょう：</target>
        </trans-unit>
        <trans-unit id="1156b44768e791541399e9626467d2fa45aff864" translate="yes" xml:space="preserve">
          <source>For more information on usage and integration with other tools, consult the project's README.</source>
          <target state="translated">使用方法や他のツールとの統合についての詳細は、プロジェクトの README を参照してください。</target>
        </trans-unit>
        <trans-unit id="662bf66887805cc6f07ab4a9d9987ed6e8a73dad" translate="yes" xml:space="preserve">
          <source>For more information on using &lt;code&gt;MessagePort&lt;/code&gt; and &lt;code&gt;MessageChannel&lt;/code&gt;, see the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot;&gt;MDN documentation&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;MessagePort&lt;/code&gt; と &lt;code&gt;MessageChannel&lt;/code&gt; の使用の詳細については、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessageChannel&quot;&gt;MDNのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="ce256d31a23e00fc1e35c2b76c94dbc91d687a2b" translate="yes" xml:space="preserve">
          <source>For more information on what &lt;code&gt;contextIsolation&lt;/code&gt; is and how to enable it please see our dedicated &lt;a href=&quot;context-isolation&quot;&gt;Context Isolation&lt;/a&gt; document.</source>
          <target state="translated">&lt;code&gt;contextIsolation&lt;/code&gt; とは何か、およびそれを有効にする方法の詳細については、専用の&lt;a href=&quot;context-isolation&quot;&gt;ContextIsolation&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="854ce0d4cf9c287a66b6b50afecbce3bab18c78c" translate="yes" xml:space="preserve">
          <source>For more information on what &lt;code&gt;contextIsolation&lt;/code&gt; is and how to enable it please see our dedicated &lt;a href=&quot;tutorial/context-isolation&quot;&gt;Context Isolation&lt;/a&gt; document.</source>
          <target state="translated">&lt;code&gt;contextIsolation&lt;/code&gt; とは何か、およびそれを有効にする方法の詳細については、専用の&lt;a href=&quot;tutorial/context-isolation&quot;&gt;ContextIsolation&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="7b97ac2424ca35d3d40825b17c00e58c2ad2cf20" translate="yes" xml:space="preserve">
          <source>For more information on what kinds of flags and switches you can use, check out the &lt;a href=&quot;api/command-line-switches&quot;&gt;Command Line Switches&lt;/a&gt; document.</source>
          <target state="translated">使用できるフラグとスイッチの種類の詳細については、&lt;a href=&quot;api/command-line-switches&quot;&gt;コマンドラインスイッチの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d80b3171cdeb075c156fe30fb4ae0b15630792a5" translate="yes" xml:space="preserve">
          <source>For more information on what kinds of flags and switches you can use, check out the &lt;a href=&quot;command-line-switches&quot;&gt;Command Line Switches&lt;/a&gt; document.</source>
          <target state="translated">使用できるフラグとスイッチの種類の詳細については、&lt;a href=&quot;command-line-switches&quot;&gt;コマンドラインスイッチの&lt;/a&gt;ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a49cdb56dde81924b746254a7f24e97ae73d88e0" translate="yes" xml:space="preserve">
          <source>For more information, please see the &lt;a href=&quot;tutorial/security&quot;&gt;security introduction&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;tutorial/security&quot;&gt;セキュリティの&lt;/a&gt;概要をご覧ください。</target>
        </trans-unit>
        <trans-unit id="2af1bafb37e1efc8e25030cb405ee2425e632d82" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;debugging-main-process&quot;&gt;Debugging the Main Process documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については&lt;a href=&quot;debugging-main-process&quot;&gt;、メインプロセス&lt;/a&gt;のデバッグのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="78de7b99a69004cbf5fe0b14086d9a273d74413f" translate="yes" xml:space="preserve">
          <source>For more information, see the &lt;a href=&quot;tutorial/debugging-main-process&quot;&gt;Debugging the Main Process documentation&lt;/a&gt;.</source>
          <target state="translated">詳細については&lt;a href=&quot;tutorial/debugging-main-process&quot;&gt;、メインプロセス&lt;/a&gt;のデバッグに関するドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="41cd0116e7dd1d6789182cceddbd7400a085cc79" translate="yes" xml:space="preserve">
          <source>For mouse events, the &lt;code&gt;event&lt;/code&gt; object also have following properties:</source>
          <target state="translated">マウスイベントの場合、 &lt;code&gt;event&lt;/code&gt; オブジェクトには次のプロパティもあります。</target>
        </trans-unit>
        <trans-unit id="55c6af6d16985648f77a3161d644bf54c2338ed4" translate="yes" xml:space="preserve">
          <source>For other non-module APIs, use natural titles, like &lt;code&gt;&amp;lt;webview&amp;gt; Tag&lt;/code&gt; or &lt;code&gt;Process Object&lt;/code&gt;.</source>
          <target state="translated">他の非モジュールAPIの場合は、 &lt;code&gt;&amp;lt;webview&amp;gt; Tag&lt;/code&gt; や &lt;code&gt;Process Object&lt;/code&gt; などの自然なタイトルを使用します。</target>
        </trans-unit>
        <trans-unit id="8e8f284ed89eff022fe5d6e59ebdfca883cde645" translate="yes" xml:space="preserve">
          <source>For security and cost reasons, access to Electron's Goma cluster is currently restricted to Electron Maintainers. If you want access please head to &lt;code&gt;#access-requests&lt;/code&gt; in Slack and ping &lt;code&gt;@goma-squad&lt;/code&gt; to ask for access. Please be aware that being a maintainer does not &lt;em&gt;automatically&lt;/em&gt; grant access and access is determined on a case by case basis.</source>
          <target state="translated">セキュリティとコスト上の理由から、ElectronのGomaクラスターへのアクセスは現在ElectronMaintainersに制限されています。アクセスが必要な場合は、Slackの &lt;code&gt;#access-requests&lt;/code&gt; にアクセスし、 &lt;code&gt;@goma-squad&lt;/code&gt; にpingしてアクセスをリクエストしてください。メンテナであることは&lt;em&gt;自動的に&lt;/em&gt;アクセスを許可するものではなく、アクセスはケースバイケースで決定されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="874be508e5c6c8bb81ba63b5d40f3aa79ddc3ebe" translate="yes" xml:space="preserve">
          <source>For setting up a server to accept and process crash reports, you can use following projects:</source>
          <target state="translated">クラッシュレポートを受け付けて処理するサーバを設定するには、以下のプロジェクトを使用します。</target>
        </trans-unit>
        <trans-unit id="893021d623407b15b31b3974ad7dd84b9b512520" translate="yes" xml:space="preserve">
          <source>For some cases like verifying the &lt;code&gt;asar&lt;/code&gt; archive's checksum, we need to read the content of an &lt;code&gt;asar&lt;/code&gt; archive as a file. For this purpose you can use the built-in &lt;code&gt;original-fs&lt;/code&gt; module which provides original &lt;code&gt;fs&lt;/code&gt; APIs without &lt;code&gt;asar&lt;/code&gt; support:</source>
          <target state="translated">検証のようないくつかの例について &lt;code&gt;asar&lt;/code&gt; アーカイブのチェックサムを、我々はの内容読む必要は &lt;code&gt;asar&lt;/code&gt; ファイルとしてアーカイブを。この目的のために、 &lt;code&gt;asar&lt;/code&gt; サポートなしでオリジナルの &lt;code&gt;fs&lt;/code&gt; API を提供する組み込みの &lt;code&gt;original-fs&lt;/code&gt; モジュールを使用できます。</target>
        </trans-unit>
        <trans-unit id="b835b6381166067c2c6c297fb53d050596f4659d" translate="yes" xml:space="preserve">
          <source>For some operations, such as streaming media using RTMP, it is necessary to grant wider permissions to players&amp;rsquo; &lt;code&gt;.swf&lt;/code&gt; files. One way of accomplishing this, is to use &lt;a href=&quot;https://github.com/szwacz/nw-flash-trust&quot;&gt;nw-flash-trust&lt;/a&gt;.</source>
          <target state="translated">RTMPを使用したメディアのストリーミングなどの一部の操作では、プレーヤーの &lt;code&gt;.swf&lt;/code&gt; ファイルに幅広い権限を付与する必要があります。これを実現する1つの方法は、&lt;a href=&quot;https://github.com/szwacz/nw-flash-trust&quot;&gt;nw-flash-trust&lt;/a&gt;を使用することです。</target>
        </trans-unit>
        <trans-unit id="4bca33f19785ae50790d03e5e8b8f9fa3f8e8940" translate="yes" xml:space="preserve">
          <source>For the &lt;code&gt;mouseWheel&lt;/code&gt; event, the &lt;code&gt;event&lt;/code&gt; object also have following properties:</source>
          <target state="translated">以下のため &lt;code&gt;mouseWheel&lt;/code&gt; イベント、 &lt;code&gt;event&lt;/code&gt; オブジェクトは、次のプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="6b89f521faed3627ceafb1ee77d1aa33c1a76a31" translate="yes" xml:space="preserve">
          <source>For the Renderer process, Electron conveniently allows developers to send notifications with the &lt;a href=&quot;https://notifications.spec.whatwg.org/&quot;&gt;HTML5 Notification API&lt;/a&gt;, using the currently running operating system's native notification APIs to display it.</source>
          <target state="translated">レンダラープロセスの場合、Electronを使用すると、開発者は&lt;a href=&quot;https://notifications.spec.whatwg.org/&quot;&gt;HTML5 Notification API&lt;/a&gt;を使用して通知を送信し、現在実行中のオペレーティングシステムのネイティブ通知APIを使用して通知を表示できます。</target>
        </trans-unit>
        <trans-unit id="7fb6776dd36c28d9729c375ab3890832423d6bae" translate="yes" xml:space="preserve">
          <source>For the release configuration:</source>
          <target state="translated">リリース構成の場合。</target>
        </trans-unit>
        <trans-unit id="e83235f1c87cd602a012533efaf359d9a476b742" translate="yes" xml:space="preserve">
          <source>For the testing configuration:</source>
          <target state="translated">テスト構成の場合。</target>
        </trans-unit>
        <trans-unit id="9a0e094c08e431ed56d092afefc892be387c6c60" translate="yes" xml:space="preserve">
          <source>For those unsure where to acquire this code or how to build it, &lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;Electron's Build Tools&lt;/a&gt; automates and explains most of this process. If you wish to manually set up the environment, you can instead use these &lt;a href=&quot;../development/build-instructions-gn&quot;&gt;build instructions&lt;/a&gt;.</source>
          <target state="translated">このコードをどこで入手するか、またはどのようにビルドするかわからない場合は、&lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;Electronのビルドツール&lt;/a&gt;がこのプロセスのほとんどを自動化して説明します。環境を手動でセットアップする場合は、代わりにこれらの&lt;a href=&quot;../development/build-instructions-gn&quot;&gt;ビルド手順を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="fee4a5b3b989d078c41beb68e97f9c4c52aededd" translate="yes" xml:space="preserve">
          <source>For those unsure where to acquire this code or how to build it, &lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;Electron's Build Tools&lt;/a&gt; automates and explains most of this process. If you wish to manually set up the environment, you can instead use these &lt;a href=&quot;development/build-instructions-gn&quot;&gt;build instructions&lt;/a&gt;.</source>
          <target state="translated">このコードをどこで入手するか、またはどのようにビルドするかわからない場合は、&lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;Electronのビルドツール&lt;/a&gt;がこのプロセスのほとんどを自動化して説明します。環境を手動でセットアップする場合は、代わりにこれらの&lt;a href=&quot;development/build-instructions-gn&quot;&gt;ビルド手順を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="42cf0bcb717e6e1c5bc2bab69a7555abd5c7050c" translate="yes" xml:space="preserve">
          <source>Force closing the view, the &lt;code&gt;unload&lt;/code&gt; and &lt;code&gt;beforeunload&lt;/code&gt; events won't be emitted for the web page. After you're done with a view, call this function in order to free memory and other resources as soon as possible.</source>
          <target state="translated">ビューを強制的に閉じると、 &lt;code&gt;unload&lt;/code&gt; イベントと &lt;code&gt;beforeunload&lt;/code&gt; イベントはWebページに対して発行されません。ビューを使い終わったら、この関数を呼び出して、メモリやその他のリソースをできるだけ早く解放します。</target>
        </trans-unit>
        <trans-unit id="41c34d9172157555e51609e1dd9cdae11457b4a8" translate="yes" xml:space="preserve">
          <source>Force closing the window, the &lt;code&gt;unload&lt;/code&gt; and &lt;code&gt;beforeunload&lt;/code&gt; event won't be emitted for the web page, and &lt;code&gt;close&lt;/code&gt; event will also not be emitted for this window, but it guarantees the &lt;code&gt;closed&lt;/code&gt; event will be emitted.</source>
          <target state="translated">力は、ウィンドウを閉じ、 &lt;code&gt;unload&lt;/code&gt; および &lt;code&gt;beforeunload&lt;/code&gt; イベントは、Webページのために放出されることはないだろう、と &lt;code&gt;close&lt;/code&gt; イベントも、このウィンドウのために放出されることはありませんが、それは保証 &lt;code&gt;closed&lt;/code&gt; イベントが放出されます。</target>
        </trans-unit>
        <trans-unit id="5a606dcde8ee92bc944b2d682a973d2fa5471fb8" translate="yes" xml:space="preserve">
          <source>Force using discrete GPU when there are multiple GPUs available.</source>
          <target state="translated">複数のGPUが利用可能な場合にディスクリートGPUを強制的に使用します。</target>
        </trans-unit>
        <trans-unit id="23ae0ea8dd8e7096384ac7c6d644c6bfbff518dc" translate="yes" xml:space="preserve">
          <source>Force using integrated GPU when there are multiple GPUs available.</source>
          <target state="translated">複数のGPUが利用可能な場合に、統合GPUを強制的に使用します。</target>
        </trans-unit>
        <trans-unit id="8a6a94c0656419d75d09c1f47735e377b3dc71eb" translate="yes" xml:space="preserve">
          <source>Forcefully closes the child window without calling its unload event.</source>
          <target state="translated">アンロードイベントを呼び出さずに子ウィンドウを強制的に閉じます。</target>
        </trans-unit>
        <trans-unit id="b171aa0f99529c72056aab7a831c7f98c02499aa" translate="yes" xml:space="preserve">
          <source>Forcefully terminates the renderer process that is currently hosting this &lt;code&gt;webContents&lt;/code&gt;. This will cause the &lt;code&gt;render-process-gone&lt;/code&gt; event to be emitted with the &lt;code&gt;reason=killed || reason=crashed&lt;/code&gt;. Please note that some webContents share renderer processes and therefore calling this method may also crash the host process for other webContents as well.</source>
          <target state="translated">現在この &lt;code&gt;webContents&lt;/code&gt; をホストしているレンダラープロセスを強制的に終了します。これにより、 &lt;code&gt;render-process-gone&lt;/code&gt; イベントが &lt;code&gt;reason=killed || reason=crashed&lt;/code&gt; 。一部のwebContentsはレンダラープロセスを共有するため、このメソッドを呼び出すと、他のwebContentsのホストプロセスもクラッシュする可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="11ec4772862b480bc0d4330e63394f4c0dd82ef7" translate="yes" xml:space="preserve">
          <source>Forces the maximum disk space to be used by the disk cache, in bytes.</source>
          <target state="translated">ディスクキャッシュが使用する最大ディスク容量をバイト単位で強制的に指定します。</target>
        </trans-unit>
        <trans-unit id="e3dbab8791e9c1d7fca1b6bb2e6c3d88b5142281" translate="yes" xml:space="preserve">
          <source>Forge comes with &lt;a href=&quot;https://electronforge.io/templates&quot;&gt;a ready-to-use template&lt;/a&gt; using Webpack as a bundler. It includes an example typescript configuration and provides two configuration files to enable easy customization. It uses the same core modules used by the greater Electron community (like &lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt;&lt;code&gt;electron-packager&lt;/code&gt;&lt;/a&gt;) &amp;ndash; changes made by Electron maintainers (like Slack) benefit Forge's users, too.</source>
          <target state="translated">Forgeには、Webpackをバンドラーとして&lt;a href=&quot;https://electronforge.io/templates&quot;&gt;使用するすぐに使用できるテンプレート&lt;/a&gt;が付属しています。これには、typescript構成の例が含まれており、簡単にカスタマイズできるように2つの構成ファイルが用意されています。これは、より大きなElectronコミュニティ（&lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt; &lt;code&gt;electron-packager&lt;/code&gt; など&lt;/a&gt;）で使用されているものと同じコアモジュールを使用します。Electronメンテナー（Slackなど）によって行われた変更は、Forgeのユーザーにもメリットがあります。</target>
        </trans-unit>
        <trans-unit id="ffda46761bf18cf0dd922e7a16c1a3454103fb87" translate="yes" xml:space="preserve">
          <source>Forge comes with &lt;a href=&quot;https://electronforge.io/templates&quot;&gt;ready-to-use templates&lt;/a&gt; for popular frameworks like React, Vue, or Angular. It uses the same core modules used by the greater Electron community (like &lt;a href=&quot;https://github.com/electron-userland/electron-packager&quot;&gt;&lt;code&gt;electron-packager&lt;/code&gt;&lt;/a&gt;) &amp;ndash; changes made by Electron maintainers (like Slack) benefit Forge's users, too.</source>
          <target state="translated">Forgeには、React、Vue、Angularなどの一般的なフレームワーク用の&lt;a href=&quot;https://electronforge.io/templates&quot;&gt;すぐに使用できるテンプレート&lt;/a&gt;が付属しています。それは、より大きいエレクトロンコミュニティ（&lt;a href=&quot;https://github.com/electron-userland/electron-packager&quot;&gt; &lt;code&gt;electron-packager&lt;/code&gt; など&lt;/a&gt;）で使用されているものと同じコアモジュールを使用しています。</target>
        </trans-unit>
        <trans-unit id="a640134df49a1d7ac759c390662f71687021a130" translate="yes" xml:space="preserve">
          <source>Fork the project &lt;a href=&quot;https://github.com/electron/electron&quot;&gt;on GitHub&lt;/a&gt; and clone your fork locally.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/electron/electron&quot;&gt;GitHub&lt;/a&gt;でプロジェクトをフォークし、ローカルでフォークのクローンを作成します。</target>
        </trans-unit>
        <trans-unit id="d735aafe3953821674bcc047eed0a464f448083f" translate="yes" xml:space="preserve">
          <source>Forwarding</source>
          <target state="translated">Forwarding</target>
        </trans-unit>
        <trans-unit id="048394d7b70f10b345e72c4c9fdb7401b26faee6" translate="yes" xml:space="preserve">
          <source>Frameless Window</source>
          <target state="translated">フレームレスウィンドウ</target>
        </trans-unit>
        <trans-unit id="17a56f23cb49369abb90876a7fc79db233cbec85" translate="yes" xml:space="preserve">
          <source>Frameless window</source>
          <target state="translated">フレームレスウィンドウ</target>
        </trans-unit>
        <trans-unit id="44389f6a466eaabf5c1db729e369511134e2b03b" translate="yes" xml:space="preserve">
          <source>French</source>
          <target state="translated">French</target>
        </trans-unit>
        <trans-unit id="33f0ca3b78634f70f34727200cfe101d4f639b17" translate="yes" xml:space="preserve">
          <source>French (Canada)</source>
          <target state="translated">フランス語(カナダ</target>
        </trans-unit>
        <trans-unit id="950e3b8444abd67e768a641c20181ffe0042529b" translate="yes" xml:space="preserve">
          <source>French (France)</source>
          <target state="translated">フレンチ</target>
        </trans-unit>
        <trans-unit id="d4e7895fbc7b89b31127508cafb2663fdb083fa2" translate="yes" xml:space="preserve">
          <source>French (Switzerland)</source>
          <target state="translated">仏語</target>
        </trans-unit>
        <trans-unit id="6f09db2793c736909bd6c37b71f7a0bc8a0f19ae" translate="yes" xml:space="preserve">
          <source>Frisian</source>
          <target state="translated">Frisian</target>
        </trans-unit>
        <trans-unit id="0ff10501f7e66c9f19bf9c4babdd10ca579ce254" translate="yes" xml:space="preserve">
          <source>From 2.0 onward, Electron will follow semver.</source>
          <target state="translated">2.0以降、Electronはsemverに従うことになります。</target>
        </trans-unit>
        <trans-unit id="c3a8674a8d599ddfc6957634e4c486efbfebd3ff" translate="yes" xml:space="preserve">
          <source>From &lt;a href=&quot;https://sites.google.com/a/chromium.org/chromedriver/&quot;&gt;ChromeDriver - WebDriver for Chrome&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;https://sites.google.com/a/chromium.org/chromedriver/&quot;&gt;ChromeDriver&lt;/a&gt;から-Chrome用WebDriver：</target>
        </trans-unit>
        <trans-unit id="10fb85a843ef18824df96f590580867cf985b2c6" translate="yes" xml:space="preserve">
          <source>From Electron 12, it will be enabled by default. For lower versions it is an option in the &lt;code&gt;webPreferences&lt;/code&gt; option when constructing &lt;code&gt;new BrowserWindow&lt;/code&gt;'s.</source>
          <target state="translated">Electron 12から、デフォルトで有効になります。下位バージョンの場合、 &lt;code&gt;new BrowserWindow&lt;/code&gt; &lt;code&gt;webPreferences&lt;/code&gt; するときのwebPreferencesオプションのオプションです。</target>
        </trans-unit>
        <trans-unit id="2913aab19780bda8d7bb89f9e9bccc9c50a55e58" translate="yes" xml:space="preserve">
          <source>From Electron 2.0 on, developers will see warnings and recommendations printed to the developer console. They only show up when the binary's name is Electron, indicating that a developer is currently looking at the console.</source>
          <target state="translated">Electron 2.0 以降、開発者は開発者コンソールに警告と推奨事項が表示されるようになりました。これはバイナリの名前がElectronの場合にのみ表示され、開発者が現在コンソールを見ていることを示しています。</target>
        </trans-unit>
        <trans-unit id="4a3e35689697ec190cd2fb0c4be0d315bd4c2251" translate="yes" xml:space="preserve">
          <source>From Electron root's root, run &lt;code&gt;script/update.py&lt;/code&gt;</source>
          <target state="translated">Electronルートのルートから、 &lt;code&gt;script/update.py&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="4c958b0e9d4b9e2e2a54c9e8c8cd51e301fc6448" translate="yes" xml:space="preserve">
          <source>From MSDN, it's illustrated:</source>
          <target state="translated">MSDNより、イラスト入りです。</target>
        </trans-unit>
        <trans-unit id="293e001db2bc6c3edac85f89a102d08d11b1b8f6" translate="yes" xml:space="preserve">
          <source>From PowerShell, execute &lt;code&gt;ps1&lt;/code&gt; file with &lt;code&gt;./create_master_vm_from_vhd.ps1&lt;/code&gt;</source>
          <target state="translated">PowerShellから、。 &lt;code&gt;ps1&lt;/code&gt; 使用して &lt;code&gt;./create_master_vm_from_vhd.ps1&lt;/code&gt; ファイルを実行します</target>
        </trans-unit>
        <trans-unit id="a8c830c74e35a88a338f5bb276b585128de8b31c" translate="yes" xml:space="preserve">
          <source>From a development perspective, an Electron application is essentially a Node.js application. This means that the starting point of your Electron application will be a &lt;code&gt;package.json&lt;/code&gt; file like in any other Node.js application. A minimal Electron application has the following structure:</source>
          <target state="translated">開発の観点からは、Electronアプリケーションは本質的にNode.jsアプリケーションです。つまり、Electronアプリケーションの開始点は、他のNode.jsアプリケーションと同様に &lt;code&gt;package.json&lt;/code&gt; ファイルになります。最小限のElectronアプリケーションの構造は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a4394da6bd07f1ee0042ce07dda3d202ffb90075" translate="yes" xml:space="preserve">
          <source>From a terminal that has &lt;code&gt;snapcraft&lt;/code&gt; in its &lt;code&gt;PATH&lt;/code&gt;, run &lt;code&gt;electron-installer-snap&lt;/code&gt; with the only required parameter &lt;code&gt;--src&lt;/code&gt;, which is the location of your packaged Electron application created in the first step.</source>
          <target state="translated">&lt;code&gt;PATH&lt;/code&gt; に &lt;code&gt;snapcraft&lt;/code&gt; が含まれているターミナルから、最初の手順で作成したパッケージ化されたElectronアプリケーションの場所である唯一の必須パラメーター &lt;code&gt;--src&lt;/code&gt; を指定して &lt;code&gt;electron-installer-snap&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="e5b99d0a24b6837e0fdb16a7b9dadc5b38ac1363" translate="yes" xml:space="preserve">
          <source>From an elevated PowerShell (run it &quot;as Administrator&quot;), run &lt;code&gt;electron-windows-store&lt;/code&gt; with the required parameters, passing both the input and output directories, the app's name and version, and confirmation that &lt;code&gt;node_modules&lt;/code&gt; should be flattened.</source>
          <target state="translated">昇格したPowerShell（「管理者」として実行）から、必須パラメーターを指定して &lt;code&gt;electron-windows-store&lt;/code&gt; を実行し、入力と出力の両方のディレクトリ、アプリの名前とバージョン、および &lt;code&gt;node_modules&lt;/code&gt; をフラット化する必要があることの確認を渡します。</target>
        </trans-unit>
        <trans-unit id="734f49b3b8a88010f69b244bff01621f449f9ac4" translate="yes" xml:space="preserve">
          <source>From within GitHub, opening a new pull request will present you with a template that should be filled out:</source>
          <target state="translated">GitHub から新しいプルリクエストを開くと、記入すべきテンプレートが表示されます。</target>
        </trans-unit>
        <trans-unit id="3c5d7a65a8198b0252fff09bfd52a41eca42cbfa" translate="yes" xml:space="preserve">
          <source>From within the Electron app, you can listen for messages and send replies using the Node.js &lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;process&lt;/a&gt; API:</source>
          <target state="translated">Electronアプリ内から、Node.js&lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;プロセス&lt;/a&gt;APIを使用してメッセージをリッスンし、返信を送信できます。</target>
        </trans-unit>
        <trans-unit id="2131cc39138eced8836ed354bc7b8c3289d46bc7" translate="yes" xml:space="preserve">
          <source>From within the Electron app, you can listen for messages and send replies using the nodejs &lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;process&lt;/a&gt; API:</source>
          <target state="translated">Electronアプリ内から、nodejs &lt;a href=&quot;https://nodejs.org/api/process.html&quot;&gt;プロセス&lt;/a&gt; API を使用してメッセージをリッスンし、返信を送信できます。</target>
        </trans-unit>
        <trans-unit id="bafd4b54282745a2bed1442852b73f4b3189a77a" translate="yes" xml:space="preserve">
          <source>Further Reading</source>
          <target state="translated">続きを読む</target>
        </trans-unit>
        <trans-unit id="5bdf7278fcea3b5007a7f31401ae7da8c28c2e82" translate="yes" xml:space="preserve">
          <source>Furthermore, in Windows 8, the maximum length for the notification body is 250 characters, with the Windows team recommending that notifications should be kept to 200 characters. That said, that limitation has been removed in Windows 10, with the Windows team asking developers to be reasonable. Attempting to send gigantic amounts of text to the API (thousands of characters) might result in instability.</source>
          <target state="translated">さらに、Windows 8 では、通知の本文の最大長は 250 文字で、Windows チームは通知を 200 文字に抑えることを推奨しています。しかし、Windows 10 ではこの制限は削除されており、Windows チームは開発者に合理的であることを求めています。API に巨大な量のテキスト (数千文字)を送信しようとすると、不安定になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2c248b36041d438fc46a4d75feaf8db587e389a3" translate="yes" xml:space="preserve">
          <source>Fuses are the solution to this problem, at a high level they are &quot;magic bits&quot; in the Electron binary that can be flipped when packaging your Electron app to enable / disable certain features / restrictions. Because they are flipped at package time before you code sign your app the OS becomes responsible for ensuring those bits aren't flipped back via OS level code signing validation (Gatekeeper / App Locker).</source>
          <target state="translated">ヒューズはこの問題を解決するもので、高レベルではElectronバイナリ内の「魔法のビット」であり、Electronアプリのパッケージ時に反転させて特定の機能や制限を有効化/無効化することができます。アプリのコード署名を行う前にパッケージ時に反転させるため、OSはOSレベルのコード署名検証(Gatekeeper/App Locker)を介して反転されないようにする責任があります。</target>
        </trans-unit>
        <trans-unit id="6a9e32ab99cab709bd6ba82b9aa8fbf0350b16d2" translate="yes" xml:space="preserve">
          <source>GN Files</source>
          <target state="translated">GNファイル</target>
        </trans-unit>
        <trans-unit id="5d979da1e00ef42608b0265200caf848fb7c79fc" translate="yes" xml:space="preserve">
          <source>GN prerequisites</source>
          <target state="translated">GN前提条件</target>
        </trans-unit>
        <trans-unit id="1db4aba2bc9d400d5e75f5473ff811cd819a436d" translate="yes" xml:space="preserve">
          <source>GOOGLE_API_KEY</source>
          <target state="translated">GOOGLE_API_KEY</target>
        </trans-unit>
        <trans-unit id="3ee288cccc04fc78b1de48dba8362ca4f281d5e7" translate="yes" xml:space="preserve">
          <source>GPU accelerated</source>
          <target state="translated">GPU加速化</target>
        </trans-unit>
        <trans-unit id="4a539dd2d84c22ed68a37ed7e9d7601dc94bdf7f" translate="yes" xml:space="preserve">
          <source>GPU accelerated rendering means that the GPU is used for composition. Because of that the frame has to be copied from the GPU which requires more performance, thus this mode is quite a bit slower than the other one. The benefit of this mode is that WebGL and 3D CSS animations are supported.</source>
          <target state="translated">GPUアクセラレーションレンダリングは、GPUをコンポジションに使用することを意味します。そのため、フレームをGPUからコピーしなければならず、より多くのパフォーマンスを必要とするため、このモードは他のモードに比べてかなり遅くなります。このモードの利点は、WebGLと3D CSSアニメーションがサポートされていることです。</target>
        </trans-unit>
        <trans-unit id="63e7c142f025c95ec8531acfd0d122a163cb6b1f" translate="yes" xml:space="preserve">
          <source>GPU accelerated rendering means that the GPU is used for composition. Because of that the frame has to be copied from the GPU which requires more performance, thus this mode is quite a bit slower than the other one. The benefit of this mode that WebGL and 3D CSS animations are supported.</source>
          <target state="translated">GPUアクセラレーションレンダリングは、GPUをコンポジションに使用することを意味します。そのため、フレームはGPUからコピーされなければならず、より多くのパフォーマンスを必要とするため、このモードは他のモードに比べてかなり遅くなります。このモードの利点は、WebGLと3D CSSアニメーションがサポートされていることです。</target>
        </trans-unit>
        <trans-unit id="27e0642d3d0283fa0d1d5b490eeb105437323129" translate="yes" xml:space="preserve">
          <source>GPUFeatureStatus</source>
          <target state="translated">GPUFeatureStatus</target>
        </trans-unit>
        <trans-unit id="1fae790cf35d61c88e97f17c988718c8de99c880" translate="yes" xml:space="preserve">
          <source>GPUFeatureStatus Object</source>
          <target state="translated">GPUFeatureStatus オブジェクト</target>
        </trans-unit>
        <trans-unit id="ccece2966ff8b4cb279897a70ef4ca32da17c0cd" translate="yes" xml:space="preserve">
          <source>Galician</source>
          <target state="translated">Galician</target>
        </trans-unit>
        <trans-unit id="63f15e2cad489c7f65563ae7617fe47ac16f9b26" translate="yes" xml:space="preserve">
          <source>General Code</source>
          <target state="translated">一般法典</target>
        </trans-unit>
        <trans-unit id="c6fd7bce8f72bd46f1133e18bc9aeb61522b29be" translate="yes" xml:space="preserve">
          <source>General considerations</source>
          <target state="translated">一般的な考慮事項</target>
        </trans-unit>
        <trans-unit id="3c5d21815e853ee353943f1b16ccdedddafbb86a" translate="yes" xml:space="preserve">
          <source>Generally speaking, Electron supports Ubuntu 12.04, Fedora 21, Debian 8 and later.</source>
          <target state="translated">一般的には、Ubuntu 12.04、Fedora 21、Debian 8以降をサポートしています。</target>
        </trans-unit>
        <trans-unit id="a0586638574b9f7ba5670b689a6ecc29e679e895" translate="yes" xml:space="preserve">
          <source>Generally speaking, all advice for building performant web apps for modern browsers apply to Electron's renderers, too. The two primary tools at your disposal are currently &lt;code&gt;requestIdleCallback()&lt;/code&gt; for small operations and &lt;code&gt;Web Workers&lt;/code&gt; for long-running operations.</source>
          <target state="translated">一般的に言って、最新のブラウザー用のパフォーマンスの高いWebアプリを構築するためのすべてのアドバイスは、Electronのレンダラーにも当てはまります。あなたの処分で二つの主要なツールは、現在 &lt;code&gt;requestIdleCallback()&lt;/code&gt; 小規模事業用および &lt;code&gt;Web Workers&lt;/code&gt; 長時間実行操作のために。</target>
        </trans-unit>
        <trans-unit id="90b6f5d52bf8b14dce89eab99bf56fc36ee3ce58" translate="yes" xml:space="preserve">
          <source>Generally speaking, it is easier to completely disable &lt;code&gt;eval()&lt;/code&gt; than to make it bulletproof. Thus, if you do not need it, it is a good idea to disable it.</source>
          <target state="translated">一般的に言えば、 &lt;code&gt;eval()&lt;/code&gt; を完全に無効にする方が、完全なものにするよりも簡単です。したがって、必要ない場合は、無効にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="13f9f22123ed9e158e8f29705aa35590736ffaba" translate="yes" xml:space="preserve">
          <source>Generally speaking, setting the parameter to a value below zero (like &lt;code&gt;-1&lt;/code&gt;) will remove the progress bar while setting it to a value higher than one (like &lt;code&gt;2&lt;/code&gt;) will switch the progress bar to intermediate mode.</source>
          <target state="translated">一般的に、パラメーターを0未満の値（ &lt;code&gt;-1&lt;/code&gt; など）に設定するとプログレスバーが削除され、1よりも大きい値（ &lt;code&gt;2&lt;/code&gt; など）に設定するとプログレスバーが中間モードに切り替わります。</target>
        </trans-unit>
        <trans-unit id="9a1b685e55f4b94987ef88208f8882ad9106ba1c" translate="yes" xml:space="preserve">
          <source>Generally speaking, shortcuts are added by providing a &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Exec&lt;/code&gt; property for each entry in the shortcuts menu. Unity will execute the &lt;code&gt;Exec&lt;/code&gt; field once clicked by the user. The format is as follows:</source>
          <target state="translated">一般的に、ショートカットは、ショートカットメニューの各エントリに &lt;code&gt;Name&lt;/code&gt; プロパティと &lt;code&gt;Exec&lt;/code&gt; プロパティを提供することで追加されます。Unityは、ユーザーがクリックすると、 &lt;code&gt;Exec&lt;/code&gt; フィールドを実行します。形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="1538647f42f7d3d79050cbefe208f89d3f10ca55" translate="yes" xml:space="preserve">
          <source>Generally speaking, there are likely good reasons if a feature was not enabled by default. Legitimate use cases for enabling specific features exist. As a developer, you should know exactly why you need to enable a feature, what the ramifications are, and how it impacts the security of your application. Under no circumstances should you enable features speculatively.</source>
          <target state="translated">一般的に言えば、ある機能がデフォルトで有効になっていない場合、それなりの理由があると思われます。特定の機能を有効にするための正当なユースケースは存在します。開発者としては、なぜ機能を有効にする必要があるのか、どのような影響があるのか、そしてそれがアプリケーションのセキュリティにどのような影響を与えるのかを正確に知るべきです。いかなる状況であっても、推測で機能を有効にしてはいけません。</target>
        </trans-unit>
        <trans-unit id="2729a90cd6cab76c61d94de18b8caf7262113dcf" translate="yes" xml:space="preserve">
          <source>Generally, the &lt;code&gt;template&lt;/code&gt; is an array of &lt;code&gt;options&lt;/code&gt; for constructing a &lt;a href=&quot;api/menu-item&quot;&gt;MenuItem&lt;/a&gt;. The usage can be referenced above.</source>
          <target state="translated">通常、 &lt;code&gt;template&lt;/code&gt; は&lt;a href=&quot;api/menu-item&quot;&gt;MenuItem&lt;/a&gt;を作成するための &lt;code&gt;options&lt;/code&gt; 配列です。使用法は上記で参照できます。</target>
        </trans-unit>
        <trans-unit id="df13bde07a0723acaab7f213d04b6cfcb3082ad5" translate="yes" xml:space="preserve">
          <source>Generally, the &lt;code&gt;template&lt;/code&gt; is an array of &lt;code&gt;options&lt;/code&gt; for constructing a &lt;a href=&quot;menu-item&quot;&gt;MenuItem&lt;/a&gt;. The usage can be referenced above.</source>
          <target state="translated">通常、 &lt;code&gt;template&lt;/code&gt; は&lt;a href=&quot;menu-item&quot;&gt;MenuItem&lt;/a&gt;を作成するための &lt;code&gt;options&lt;/code&gt; 配列です。使用法は上記で参照できます。</target>
        </trans-unit>
        <trans-unit id="3169e818304c83f7b1d25d45a63a2afbec618473" translate="yes" xml:space="preserve">
          <source>Generally, the &lt;code&gt;template&lt;/code&gt; is just an array of &lt;code&gt;options&lt;/code&gt; for constructing a &lt;a href=&quot;menu-item&quot;&gt;MenuItem&lt;/a&gt;. The usage can be referenced above.</source>
          <target state="translated">一般に、 &lt;code&gt;template&lt;/code&gt; は&lt;a href=&quot;menu-item&quot;&gt;MenuItem&lt;/a&gt;を作成するための &lt;code&gt;options&lt;/code&gt; 配列にすぎません。使用法は上記で参照できます。</target>
        </trans-unit>
        <trans-unit id="5e016c4e6c4388b4fdc614cd782c50dda7199bee" translate="yes" xml:space="preserve">
          <source>Generate xcode project for debugging sources (cannot build code from xcode)</source>
          <target state="translated">デバッグソース用の xcode プロジェクトを生成する (xcode からコードをビルドすることはできません)</target>
        </trans-unit>
        <trans-unit id="0afb4a7756056519dfbd37bafb195e85a8b71d1c" translate="yes" xml:space="preserve">
          <source>Generate, download, and install &lt;a href=&quot;https://github.com/electron-userland/electron-osx-sign/wiki/1.-Getting-Started#certificates&quot;&gt;signing certificates&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/electron-userland/electron-osx-sign/wiki/1.-Getting-Started#certificates&quot;&gt;署名証明書&lt;/a&gt;を生成、ダウンロード、インストールする</target>
        </trans-unit>
        <trans-unit id="844e1ad2301336675d91d14f5d54415f71da466b" translate="yes" xml:space="preserve">
          <source>Generate, download, and install &lt;a href=&quot;https://github.com/electron/electron-osx-sign/wiki/1.-Getting-Started#certificates&quot;&gt;signing certificates&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://github.com/electron/electron-osx-sign/wiki/1.-Getting-Started#certificates&quot;&gt;署名証明書&lt;/a&gt;を生成、ダウンロード、およびインストールする</target>
        </trans-unit>
        <trans-unit id="a3d952d915882776a804ebcb451b68280f150a03" translate="yes" xml:space="preserve">
          <source>Generating &lt;code&gt;asar&lt;/code&gt; Archives</source>
          <target state="translated">&lt;code&gt;asar&lt;/code&gt; アーカイブの生成</target>
        </trans-unit>
        <trans-unit id="7585e74bae56fdc23c3110b7a00c699530461cc8" translate="yes" xml:space="preserve">
          <source>Generating a CPU profile and a heap memory profile for loading a module can be done with a single command on the command line. In the example below, we're looking at the popular module &lt;code&gt;request&lt;/code&gt;.</source>
          <target state="translated">モジュールをロードするためのCPUプロファイルとヒープメモリプロファイルの生成は、コマンドラインで1つのコマンドを使用して実行できます。以下の例では、人気のあるモジュール &lt;code&gt;request&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0e4e031d86d0110b37d71551b28614ffdcf68aee" translate="yes" xml:space="preserve">
          <source>Generating asar Archives</source>
          <target state="translated">asarアーカイブの生成</target>
        </trans-unit>
        <trans-unit id="308d823eb2f5ba3ab75d3a7c08e661aeae1e790e" translate="yes" xml:space="preserve">
          <source>Geolocation support in Electron requires the use of Google Cloud Platform's geolocation webservice. To enable this feature, acquire a &lt;a href=&quot;https://developers.google.com/maps/documentation/geolocation/get-api-key&quot;&gt;Google API key&lt;/a&gt; and place the following code in your main process file, before opening any browser windows that will make geolocation requests:</source>
          <target state="translated">Electronでのジオロケーションのサポートには、Google CloudPlatformのジオロケーションウェブサービスを使用する必要があります。この機能を有効にするには、ジオロケーションリクエストを行うブラウザウィンドウを開く前に、&lt;a href=&quot;https://developers.google.com/maps/documentation/geolocation/get-api-key&quot;&gt;Google APIキー&lt;/a&gt;を取得し、メインプロセスファイルに次のコードを配置します。</target>
        </trans-unit>
        <trans-unit id="aca441ddd2e8d07643b87c1b24a828fa5b4b3e42" translate="yes" xml:space="preserve">
          <source>Georgian</source>
          <target state="translated">Georgian</target>
        </trans-unit>
        <trans-unit id="da91388c72d3e31da19dcd85c97374197748485d" translate="yes" xml:space="preserve">
          <source>German</source>
          <target state="translated">German</target>
        </trans-unit>
        <trans-unit id="078c5c2d83171c5c9230eb9470f612f005a42c2d" translate="yes" xml:space="preserve">
          <source>German (Austria)</source>
          <target state="translated">ドイツ語</target>
        </trans-unit>
        <trans-unit id="9c71d86768bbc4160407ef4ed71ede2d112003c0" translate="yes" xml:space="preserve">
          <source>German (Germany)</source>
          <target state="translated">ドイツ語</target>
        </trans-unit>
        <trans-unit id="09e6c204b1cd8e89c8f7fe995a77b7e2feb3c179" translate="yes" xml:space="preserve">
          <source>German (Switzerland)</source>
          <target state="translated">ドイツ語</target>
        </trans-unit>
        <trans-unit id="9a96c736087dc403a036da96c29f464627719640" translate="yes" xml:space="preserve">
          <source>Get Certificate</source>
          <target state="translated">証明書を取得する</target>
        </trans-unit>
        <trans-unit id="56403cae91f81004fd95e821f0aef26fe73c0765" translate="yes" xml:space="preserve">
          <source>Get Started With Analyzing Runtime Performance</source>
          <target state="translated">ランタイムパフォーマンスの分析を始める</target>
        </trans-unit>
        <trans-unit id="97902b12593780ddf28d3457dbb261e2b807323d" translate="yes" xml:space="preserve">
          <source>Get Team ID</source>
          <target state="translated">チームIDの取得</target>
        </trans-unit>
        <trans-unit id="1d751cd6f2223c387565d489fdaf84c5a57d5ce2" translate="yes" xml:space="preserve">
          <source>Get a Windows Authenticode code signing certificate</source>
          <target state="translated">Windows Authenticode コード署名証明書を取得します。</target>
        </trans-unit>
        <trans-unit id="b7a7fa4d410be0b8db57dbbf12974ffa93e61b0b" translate="yes" xml:space="preserve">
          <source>Get a Windows Authenticode code signing certificate (requires an annual fee)</source>
          <target state="translated">Windows Authenticode コード署名証明書を取得する(年会費が必要です</target>
        </trans-unit>
        <trans-unit id="b9b7985f4cabac6df8ab0ce7316af20136bc9a96" translate="yes" xml:space="preserve">
          <source>Get a copy of Electron's libcc fork</source>
          <target state="translated">Electron の libcc フォークのコピーを入手する</target>
        </trans-unit>
        <trans-unit id="3dfdaa9a34c13df1a4918f14dbd278dbcb6ad6d1" translate="yes" xml:space="preserve">
          <source>Get a set of category groups. The category groups can change as new code paths are reached.</source>
          <target state="translated">カテゴリグループのセットを取得します。カテゴリグループは、新しいコードパスに到達すると変更することができます。</target>
        </trans-unit>
        <trans-unit id="7f4bf81de63a424d3021097f2e716b1a8865357f" translate="yes" xml:space="preserve">
          <source>Get a set of category groups. The category groups can change as new code paths are reached. See also the &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/base/trace_event/builtin_categories.h&quot;&gt;list of built-in tracing categories&lt;/a&gt;.</source>
          <target state="translated">カテゴリグループのセットを取得します。カテゴリグループは、新しいコードパスに到達すると変更される可能性があります。&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/base/trace_event/builtin_categories.h&quot;&gt;組み込みのトレースカテゴリ&lt;/a&gt;のリストも参照してください。</target>
        </trans-unit>
        <trans-unit id="b31590d49ba6cc9bd37661826a0e210780ebf287" translate="yes" xml:space="preserve">
          <source>Get and set properties of a session.</source>
          <target state="translated">セッションのプロパティを取得・設定します。</target>
        </trans-unit>
        <trans-unit id="4651f3efda204499e94165cf4e7980b1e52540ef" translate="yes" xml:space="preserve">
          <source>Get system preferences.</source>
          <target state="translated">システム環境設定を取得します。</target>
        </trans-unit>
        <trans-unit id="0843d0855d06f634a18af84e43b73a0cdbbb035d" translate="yes" xml:space="preserve">
          <source>Get the Azure storage account key</source>
          <target state="translated">Azureストレージのアカウントキーを取得する</target>
        </trans-unit>
        <trans-unit id="f8a9296dea080088611ff14ad0eae0f5c7d1c3c8" translate="yes" xml:space="preserve">
          <source>Get the code and initialize the project:</source>
          <target state="translated">コードを取得し、プロジェクトを初期化します。</target>
        </trans-unit>
        <trans-unit id="42e39f6d0cb0eadebb6a9541f6e152c7e729a7f1" translate="yes" xml:space="preserve">
          <source>Get the code:</source>
          <target state="translated">コードを手に入れろ</target>
        </trans-unit>
        <trans-unit id="6e09fde08da990083e9a1d35f798afb7b2e02572" translate="yes" xml:space="preserve">
          <source>Get the current monitoring traced data.</source>
          <target state="translated">現在の監視トレースデータを取得します。</target>
        </trans-unit>
        <trans-unit id="ab030a93caed07ab74219faedeff57c5ef6b6ba1" translate="yes" xml:space="preserve">
          <source>Get the full virtual machine image URI from Azure</source>
          <target state="translated">Azureから完全な仮想マシンイメージのURIを取得する</target>
        </trans-unit>
        <trans-unit id="708a06cd5805e6920aca6e92df00bcc5ff1e8017" translate="yes" xml:space="preserve">
          <source>Get the maximum usage across processes of trace buffer as a percentage of the full state.</source>
          <target state="translated">トレースバッファのプロセス間での最大使用量を、フルステートに対するパーセンテージで取得します。</target>
        </trans-unit>
        <trans-unit id="af84e9850a364806c20ee98a9f19df0ba5a1b68f" translate="yes" xml:space="preserve">
          <source>Get the maximum usage across processes of trace buffer as a percentage of the full state. When the TraceBufferUsage value is determined the &lt;code&gt;callback&lt;/code&gt; is called.</source>
          <target state="translated">トレースバッファーのプロセス全体の最大使用量を、完全な状態のパーセンテージとして取得します。TraceBufferUsage値が決定されると、 &lt;code&gt;callback&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f0e6b1c9b8b0f68211223759203e1903246b8a61" translate="yes" xml:space="preserve">
          <source>Get the system printer list.</source>
          <target state="translated">システムプリンタのリストを取得します。</target>
        </trans-unit>
        <trans-unit id="7c8c41f61ee8c8b61ef31de98aef8618369ead6d" translate="yes" xml:space="preserve">
          <source>Get the version of crashpad that we're going to use.</source>
          <target state="translated">使用するクラッシュパッドのバージョンを取得します。</target>
        </trans-unit>
        <trans-unit id="fe46d111db1537c8fb76f549a57af34807d5dc12" translate="yes" xml:space="preserve">
          <source>Gets the macOS appearance setting that is currently applied to your application, maps to &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsapplication/2967171-effectiveappearance?language=objc&quot;&gt;NSApplication.effectiveAppearance&lt;/a&gt;</source>
          <target state="translated">現在アプリケーションに適用されているmacOSの外観設定を取得し、&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsapplication/2967171-effectiveappearance?language=objc&quot;&gt;NSApplication.effectiveAppearance&lt;/a&gt;にマップします</target>
        </trans-unit>
        <trans-unit id="fb615fb195390346d9d0144db8bc845911c0ed59" translate="yes" xml:space="preserve">
          <source>Gets the macOS appearance setting that you have declared you want for your application, maps to &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsapplication/2967170-appearance?language=objc&quot;&gt;NSApplication.appearance&lt;/a&gt;. You can use the &lt;code&gt;setAppLevelAppearance&lt;/code&gt; API to set this value.</source>
          <target state="translated">アプリケーションに必要であると宣言したmacOSの外観設定を取得し、&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsapplication/2967170-appearance?language=objc&quot;&gt;NSApplication.appearance&lt;/a&gt;にマップします。 &lt;code&gt;setAppLevelAppearance&lt;/code&gt; APIを使用して、この値を設定できます。</target>
        </trans-unit>
        <trans-unit id="efdcb676f7e4576e5bad658605652f36207e9edd" translate="yes" xml:space="preserve">
          <source>Getting Support</source>
          <target state="translated">サポートを受ける</target>
        </trans-unit>
        <trans-unit id="f49bca71c706c74f9f8e17cb3d8f3dfd4b2d9817" translate="yes" xml:space="preserve">
          <source>Getting additional help</source>
          <target state="translated">追加の助けを得る</target>
        </trans-unit>
        <trans-unit id="060f712c74598ce01e86d56802d9344d8ed68bb7" translate="yes" xml:space="preserve">
          <source>Getting help</source>
          <target state="translated">助けを求める</target>
        </trans-unit>
        <trans-unit id="774b49b5b98b5374e54d194a189001e6997ca6b2" translate="yes" xml:space="preserve">
          <source>Getting the Code</source>
          <target state="translated">コードの取得</target>
        </trans-unit>
        <trans-unit id="325db80c1b58c07e66e7df993a652a63302c152d" translate="yes" xml:space="preserve">
          <source>Getting the code</source>
          <target state="translated">コードの取得</target>
        </trans-unit>
        <trans-unit id="68de8000c7168871fa3b06a000cc52b36c447b72" translate="yes" xml:space="preserve">
          <source>Getting the library</source>
          <target state="translated">図書館の取得</target>
        </trans-unit>
        <trans-unit id="1f5fe669e18521007ce5a8aa2cce9d3c3fa007a4" translate="yes" xml:space="preserve">
          <source>Getting the plugin</source>
          <target state="translated">プラグインの取得</target>
        </trans-unit>
        <trans-unit id="5819778898df55e3a762f0c5728b457970d72cae" translate="yes" xml:space="preserve">
          <source>Git</source>
          <target state="translated">Git</target>
        </trans-unit>
        <trans-unit id="31a9c72c1cf9aa2b3749a61100d0110a62a633e0" translate="yes" xml:space="preserve">
          <source>GitHub's Electron team maintains &lt;a href=&quot;https://github.com/electron/update.electronjs.org&quot;&gt;update.electronjs.org&lt;/a&gt;, a free and open-source webservice that Electron apps can use to self-update. The service is designed for Electron apps that meet the following criteria:</source>
          <target state="translated">GitHubのElectronチームは、Electronアプリが自己更新に使用できる無料のオープンソース&lt;a href=&quot;https://github.com/electron/update.electronjs.org&quot;&gt;Webサービス&lt;/a&gt;であるupdate.electronjs.orgを維持しています。このサービスは、次の条件を満たすエレクトロンアプリ向けに設計されています。</target>
        </trans-unit>
        <trans-unit id="99e4e21466cd569957ff19180668d99a6399bbd0" translate="yes" xml:space="preserve">
          <source>Given that hardware manufacturers, Microsoft, Chromium, and Node.js haven't released even critical security updates for that system, we have to warn you that using Windows XP is wildly insecure and outright irresponsible.</source>
          <target state="translated">ハードウェアメーカー、Microsoft、Chromium、Node.jsがシステムの重要なセキュリティアップデートすらリリースしていないことを考えると、Windows XPを使用することは危険であり、全くの無責任であることを警告しなければなりません。</target>
        </trans-unit>
        <trans-unit id="74fe7d567bf71c112291a363a3d9b39b53cc1350" translate="yes" xml:space="preserve">
          <source>Gives the default maximal active V-logging level; 0 is the default. Normally positive values are used for V-logging levels.</source>
          <target state="translated">デフォルトの最大アクティブ V-logging レベルを指定します。通常、V-logging レベルには正の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="04622ff2db8ee08e5e23ba617b529878c0062cd3" translate="yes" xml:space="preserve">
          <source>Gives the per-module maximal V-logging levels to override the value given by &lt;code&gt;--v&lt;/code&gt;. E.g. &lt;code&gt;my_module=2,foo*=3&lt;/code&gt; would change the logging level for all code in source files &lt;code&gt;my_module.*&lt;/code&gt; and &lt;code&gt;foo*.*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;--v&lt;/code&gt; で指定された値をオーバーライドするために、モジュールごとの最大Vログレベルを指定します。たとえば、 &lt;code&gt;my_module=2,foo*=3&lt;/code&gt; は、ソースファイル &lt;code&gt;my_module.*&lt;/code&gt; および &lt;code&gt;foo*.*&lt;/code&gt; 内のすべてのコードのログレベルを変更します。</target>
        </trans-unit>
        <trans-unit id="2a102f27f850350772f2e44ae41ae0c25df0de90" translate="yes" xml:space="preserve">
          <source>Global Installation</source>
          <target state="translated">グローバルインストール</target>
        </trans-unit>
        <trans-unit id="9b2c45900d277c38ce7727bdb988069b357640ce" translate="yes" xml:space="preserve">
          <source>Global Shortcuts</source>
          <target state="translated">グローバルショートカット</target>
        </trans-unit>
        <trans-unit id="7427cf697be16a4ec1d916910128a59d920125e7" translate="yes" xml:space="preserve">
          <source>Glossary</source>
          <target state="translated">Glossary</target>
        </trans-unit>
        <trans-unit id="47ba3bd2a5c6aeb3e8cad3b83d7b5602dbe77429" translate="yes" xml:space="preserve">
          <source>Glossary of Terms</source>
          <target state="translated">用語集</target>
        </trans-unit>
        <trans-unit id="d692e9d7a0982826f6b9d2c6fb8fe74bb5d32c6d" translate="yes" xml:space="preserve">
          <source>Go into Azure and get the URI for the newly created image as described in a previous step</source>
          <target state="translated">Azureに入り、前のステップで説明したように新しく作成したイメージのURIを取得します。</target>
        </trans-unit>
        <trans-unit id="c476992f33540e23daa401c4e60e99186e563a56" translate="yes" xml:space="preserve">
          <source>GoDaddy</source>
          <target state="translated">GoDaddy</target>
        </trans-unit>
        <trans-unit id="00292eece64f295067fc39740fb3a0128f087df2" translate="yes" xml:space="preserve">
          <source>Goma</source>
          <target state="translated">Goma</target>
        </trans-unit>
        <trans-unit id="cef072c554ff5a0c22c00cafb210950bdf7d3505" translate="yes" xml:space="preserve">
          <source>Goma is a distributed compiler service for open-source projects such as Chromium and Android.</source>
          <target state="translated">Gomaは、ChromiumやAndroidなどのオープンソースプロジェクト向けの分散コンパイラサービスです。</target>
        </trans-unit>
        <trans-unit id="28732829f3eca4da96a693af0bb508a19d3ecbdf" translate="yes" xml:space="preserve">
          <source>Google offers &lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;excellent documentation for their developer tools&lt;/a&gt;. We recommend that you make yourself familiar with them - they are usually one of the most powerful utilities in any Electron Developer's tool belt.</source>
          <target state="translated">Googleは&lt;a href=&quot;https://developer.chrome.com/devtools&quot;&gt;開発者向けの優れたドキュメントを&lt;/a&gt;提供しています。それらをよく理解することをお勧めします。これらは通常、Electron Developerのツールベルトで最も強力なユーティリティの1つです。</target>
        </trans-unit>
        <trans-unit id="59d5f5b13f13f6d5e8e88a5a92e137f7d64b2954" translate="yes" xml:space="preserve">
          <source>Greek</source>
          <target state="translated">Greek</target>
        </trans-unit>
        <trans-unit id="e96b7da2918127b11fa0a0e9eee6e9a1c10a65ca" translate="yes" xml:space="preserve">
          <source>Guarani</source>
          <target state="translated">Guarani</target>
        </trans-unit>
        <trans-unit id="929a28d261428029e61c0f81c6161fd71ba0b2fe" translate="yes" xml:space="preserve">
          <source>Guides</source>
          <target state="translated">Guides</target>
        </trans-unit>
        <trans-unit id="8da0077fda7c3873b2109d7ff97c49289bade98b" translate="yes" xml:space="preserve">
          <source>Guides and Tutorials</source>
          <target state="translated">ガイドとチュートリアル</target>
        </trans-unit>
        <trans-unit id="7d874f5abb3950680f297babc41172373fdc4c32" translate="yes" xml:space="preserve">
          <source>Guides: Development</source>
          <target state="translated">ガイド 開発</target>
        </trans-unit>
        <trans-unit id="905d38c755a96138170302a7c56baed9094e1527" translate="yes" xml:space="preserve">
          <source>Guides: Getting Started with Electron</source>
          <target state="translated">ガイド エレクトロンを始めよう</target>
        </trans-unit>
        <trans-unit id="c06c55a5bcd005bf56c5234eb953099ffc1de3f1" translate="yes" xml:space="preserve">
          <source>Gujarati</source>
          <target state="translated">Gujarati</target>
        </trans-unit>
        <trans-unit id="12b4aa2e03f9d0d04893ebd755d57aa21da50f87" translate="yes" xml:space="preserve">
          <source>Gyp Files</source>
          <target state="translated">ジップファイル</target>
        </trans-unit>
        <trans-unit id="6ab64c2c4cbe25df11defa0cabb6e1d056d0b05d" translate="yes" xml:space="preserve">
          <source>HKDF - &lt;a href=&quot;https://csrc.nist.gov/publications/nistpubs/800-56C/SP-800-56C.pdf&quot;&gt;NIST SP 800-56C&lt;/a&gt;</source>
          <target state="translated">HKDF- &lt;a href=&quot;https://csrc.nist.gov/publications/nistpubs/800-56C/SP-800-56C.pdf&quot;&gt;NIST SP 800-56C&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="96aef50bf3aade35f7355d1a4921a735889e4d65" translate="yes" xml:space="preserve">
          <source>HMAC - &lt;a href=&quot;https://csrc.nist.gov/publications/fips/fips198-1/FIPS-198-1_final.pdf&quot;&gt;FIPS 198-1&lt;/a&gt;</source>
          <target state="translated">HMAC- &lt;a href=&quot;https://csrc.nist.gov/publications/fips/fips198-1/FIPS-198-1_final.pdf&quot;&gt;FIPS 198-1&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1ec65432dccf7be3dd348b42b4845c542f32d36e" translate="yes" xml:space="preserve">
          <source>Handle responses to HTTP/HTTPS requests.</source>
          <target state="translated">HTTP/HTTPS リクエストに対するレスポンスを処理します。</target>
        </trans-unit>
        <trans-unit id="0bdcb3359e0bc7193184a50e6c4ff8c1c1fef02a" translate="yes" xml:space="preserve">
          <source>Handles a single &lt;code&gt;invoke&lt;/code&gt;able IPC message, then removes the listener. See &lt;code&gt;ipcMain.handle(channel, listener)&lt;/code&gt;.</source>
          <target state="translated">単一の &lt;code&gt;invoke&lt;/code&gt; なIPCメッセージを処理してから、リスナーを削除します。 &lt;code&gt;ipcMain.handle(channel, listener)&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="e34b76c18492cbccb6cd816eb3e1a919459421f5" translate="yes" xml:space="preserve">
          <source>Handling Updates Manually</source>
          <target state="translated">更新を手動で処理する</target>
        </trans-unit>
        <trans-unit id="c6198e10656789bfc9a2ce6cde36df2a0803c265" translate="yes" xml:space="preserve">
          <source>Hausa</source>
          <target state="translated">Hausa</target>
        </trans-unit>
        <trans-unit id="cd7668c561bd17eb1bdc17551d90f80f2444fe05" translate="yes" xml:space="preserve">
          <source>Hawaiian</source>
          <target state="translated">Hawaiian</target>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="translated">Hebrew</target>
        </trans-unit>
        <trans-unit id="dad314e6fa5d85b60cfa86c8054b26586b2695a7" translate="yes" xml:space="preserve">
          <source>Here are some things to consider before rendering untrusted content:</source>
          <target state="translated">信頼されていないコンテンツをレンダリングする前に考慮すべきことがいくつかあります。</target>
        </trans-unit>
        <trans-unit id="32e9448bc4ec32f0e45beaffa974dfcc238350cc" translate="yes" xml:space="preserve">
          <source>Here is a pre-configured project that you can download and directly debug in VSCode: &lt;a href=&quot;https://github.com/octref/vscode-electron-debug/tree/master/electron-quick-start&quot;&gt;https://github.com/octref/vscode-electron-debug/tree/master/electron-quick-start&lt;/a&gt;</source>
          <target state="translated">これは、VSCodeでダウンロードして直接デバッグできる事前構成済みプロジェクトです。https：&lt;a href=&quot;https://github.com/octref/vscode-electron-debug/tree/master/electron-quick-start&quot;&gt;//github.com/octref/vscode-electron-debug/tree/master/electron-quick-start&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="7511063de052867ece2aea3d8c3eafd004df2d88" translate="yes" xml:space="preserve">
          <source>Here is an example of the 1.x strategy:</source>
          <target state="translated">ここでは、1.xの攻略例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="536ab89c6edf5aadcd8667b06d61bfd9d8b1c469" translate="yes" xml:space="preserve">
          <source>Here is an example that shows how to use In-App Purchases in Electron. You'll have to replace the product ids by the identifiers of the products created with iTunes Connect (the identifier of &lt;code&gt;com.example.app.product1&lt;/code&gt; is &lt;code&gt;product1&lt;/code&gt;). Note that you have to listen to the &lt;code&gt;transactions-updated&lt;/code&gt; event as soon as possible in your app.</source>
          <target state="translated">以下は、Electronでアプリ内購入を使用する方法を示す例です。あなたは、iTunesの接続（の識別子を使用して作成製品の識別子によって製品IDを交換する必要があります &lt;code&gt;com.example.app.product1&lt;/code&gt; がある &lt;code&gt;product1&lt;/code&gt; ）。アプリでできるだけ早く &lt;code&gt;transactions-updated&lt;/code&gt; イベントをリッスンする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6d95a763e8b803427825f074147dbb618bb8baf8" translate="yes" xml:space="preserve">
          <source>Here's a very simple example of creating a custom Jump List:</source>
          <target state="translated">ここでは、カスタムジャンプリストを作成する非常に簡単な例を紹介します。</target>
        </trans-unit>
        <trans-unit id="a2e3007d0832120c6f9a0f910d309296102f99f4" translate="yes" xml:space="preserve">
          <source>Hides all application windows without minimizing them.</source>
          <target state="translated">すべてのアプリケーションウィンドウを最小化せずに非表示にします。</target>
        </trans-unit>
        <trans-unit id="c6b1b93e545fd554605800d785e996e3dc0eb5ee" translate="yes" xml:space="preserve">
          <source>Hides the dock icon.</source>
          <target state="translated">ドックアイコンを非表示にします。</target>
        </trans-unit>
        <trans-unit id="5a43dc7f2f465c2745f7cb820f2abef02d340442" translate="yes" xml:space="preserve">
          <source>Hides the window.</source>
          <target state="translated">窓を隠します。</target>
        </trans-unit>
        <trans-unit id="ef8f36f42eba0b8668da702476cc74241114add9" translate="yes" xml:space="preserve">
          <source>High Resolution Image</source>
          <target state="translated">高解像度画像</target>
        </trans-unit>
        <trans-unit id="c9e6b253fc34a7155f97dc0aab1c389d34cafdad" translate="yes" xml:space="preserve">
          <source>Hindi</source>
          <target state="translated">Hindi</target>
        </trans-unit>
        <trans-unit id="90ccd6497400b5576aeca1bd94af74aae1e0a250" translate="yes" xml:space="preserve">
          <source>History</source>
          <target state="translated">History</target>
        </trans-unit>
        <trans-unit id="9b0ec9db7c0e86a129f9fa1bab0da6d3e2b91722" translate="yes" xml:space="preserve">
          <source>Hooks a windows message. The &lt;code&gt;callback&lt;/code&gt; is called when the message is received in the WndProc.</source>
          <target state="translated">Windowsメッセージをフックします。 &lt;code&gt;callback&lt;/code&gt; メッセージをWndProcメソッドで受信されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3960ec4ca5fb5e5d8cdb2cc1c5121c003e426517" translate="yes" xml:space="preserve">
          <source>Host</source>
          <target state="translated">Host</target>
        </trans-unit>
        <trans-unit id="32db97527de21c253684c122aa8c360cbda6c820" translate="yes" xml:space="preserve">
          <source>How do I enable it?</source>
          <target state="translated">有効にするにはどうすればいいですか?</target>
        </trans-unit>
        <trans-unit id="119099b76d7b39cb325429aae09a037d7d8aaba2" translate="yes" xml:space="preserve">
          <source>How do I flip the fuses?</source>
          <target state="translated">ヒューズを反転させるには?</target>
        </trans-unit>
        <trans-unit id="0e9ab2e20e4caad9a56c772925e1cc937d765a03" translate="yes" xml:space="preserve">
          <source>How do I put the results of the spellchecker in my context menu?</source>
          <target state="translated">スペルチェッカーの結果をコンテキストメニューに表示するには?</target>
        </trans-unit>
        <trans-unit id="e31334bebb7eaceff6fb89067353d34e43f8191c" translate="yes" xml:space="preserve">
          <source>How to Contribute in Issues</source>
          <target state="translated">課題での貢献の仕方</target>
        </trans-unit>
        <trans-unit id="d430e9707eeeb4d553faa161d543b89fb53d8001" translate="yes" xml:space="preserve">
          <source>How to Contribute to Issues</source>
          <target state="translated">課題への貢献の仕方</target>
        </trans-unit>
        <trans-unit id="5a8e3da66fa923f0ece07325d1e26b9f23216424" translate="yes" xml:space="preserve">
          <source>How to Submit Your App</source>
          <target state="translated">アプリの提出方法</target>
        </trans-unit>
        <trans-unit id="5d6d0e6a86f87e3c9dad5af1e78f722b2a0eddbd" translate="yes" xml:space="preserve">
          <source>How to enable the spellchecker?</source>
          <target state="translated">スペルチェッカーを有効にするには?</target>
        </trans-unit>
        <trans-unit id="77a4a1a408e307fcb086698bb67fe202442adacb" translate="yes" xml:space="preserve">
          <source>How to install native modules</source>
          <target state="translated">ネイティブモジュールのインストール方法</target>
        </trans-unit>
        <trans-unit id="e219f690385e428b335d5c1debc806bb7f162143" translate="yes" xml:space="preserve">
          <source>How to load a DevTools Extension</source>
          <target state="translated">DevTools拡張機能をロードする方法</target>
        </trans-unit>
        <trans-unit id="7ef7dc5d8fc5fe32ebda37262b6105258e86dfac" translate="yes" xml:space="preserve">
          <source>How to remove a DevTools Extension</source>
          <target state="translated">DevTools拡張機能を削除する方法</target>
        </trans-unit>
        <trans-unit id="015aa1fe4ce333a7a911acd12759ad11420c4555" translate="yes" xml:space="preserve">
          <source>How to set the languages the spellchecker uses?</source>
          <target state="translated">スペルチェッカーが使用する言語を設定するには?</target>
        </trans-unit>
        <trans-unit id="42990de13e12a6f3fe14f015c9fa5f168409cf6f" translate="yes" xml:space="preserve">
          <source>How to share data between web pages?</source>
          <target state="translated">Webページ間でデータを共有するには?</target>
        </trans-unit>
        <trans-unit id="006cb42291b4d2a8b6209f1743122eaed8f3b45c" translate="yes" xml:space="preserve">
          <source>How to use Node.js and Electron APIs.</source>
          <target state="translated">Node.jsとElectron APIの使い方。</target>
        </trans-unit>
        <trans-unit id="a592ebd85a69060d7634d9886b10816e9eb5584f" translate="yes" xml:space="preserve">
          <source>How?</source>
          <target state="translated">How?</target>
        </trans-unit>
        <trans-unit id="3dd7ebb42cfd90c92c21fd773d0d3b2eaa35204b" translate="yes" xml:space="preserve">
          <source>However if you are using the built-in module but still getting this error, it is very likely you are using the module in the wrong process. For example &lt;code&gt;electron.app&lt;/code&gt; can only be used in the main process, while &lt;code&gt;electron.webFrame&lt;/code&gt; is only available in renderer processes.</source>
          <target state="translated">ただし、組み込みモジュールを使用していてもこのエラーが発生する場合は、モジュールを間違ったプロセスで使用している可能性が高いです。たとえば、 &lt;code&gt;electron.app&lt;/code&gt; はメインプロセスでのみ使用できますが、 &lt;code&gt;electron.webFrame&lt;/code&gt; はレンダラープロセスでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="6b7b787445f7ea095e630d9e3c933f0698df2d83" translate="yes" xml:space="preserve">
          <source>However, if your app can run untrusted content and even if you &lt;a href=&quot;../api/sandbox-option&quot;&gt;sandbox&lt;/a&gt; your renderer processes accordingly, the &lt;code&gt;remote&lt;/code&gt; module makes it easy for malicious code to escape the sandbox and have access to system resources via the higher privileges of the main process. Therefore, it should be disabled in such circumstances.</source>
          <target state="translated">ただし、アプリが信頼できないコンテンツを実行でき、それに応じてレンダラープロセスを&lt;a href=&quot;../api/sandbox-option&quot;&gt;サンドボックス化した&lt;/a&gt;場合でも、 &lt;code&gt;remote&lt;/code&gt; モジュールを使用すると、悪意のあるコードがサンドボックスから簡単に脱出し、メインプロセスのより高い権限を介してシステムリソースにアクセスできます。したがって、このような状況では無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="27e5f816b5ffe68e25d9539e555bfe6e858dff61" translate="yes" xml:space="preserve">
          <source>However, if your app can run untrusted content and even if you &lt;a href=&quot;api/sandbox-option&quot;&gt;sandbox&lt;/a&gt; your renderer processes accordingly, the &lt;code&gt;remote&lt;/code&gt; module makes it easy for malicious code to escape the sandbox and have access to system resources via the higher privileges of the main process. Therefore, it should be disabled in such circumstances.</source>
          <target state="translated">ただし、アプリが信頼できないコンテンツを実行でき、それに応じてレンダラープロセスを&lt;a href=&quot;api/sandbox-option&quot;&gt;サンドボックス化した&lt;/a&gt;場合でも、 &lt;code&gt;remote&lt;/code&gt; モジュールを使用すると、悪意のあるコードがサンドボックスから簡単に脱出し、メインプロセスのより高い権限を介してシステムリソースにアクセスできます。したがって、このような状況では無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="de558fe6876f5a554a359adecff730a0c6725485" translate="yes" xml:space="preserve">
          <source>However, it is recommended to avoid using the &lt;code&gt;remote&lt;/code&gt; module altogether.</source>
          <target state="translated">ただし、 &lt;code&gt;remote&lt;/code&gt; モジュールを完全に使用しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="20ce304447aa2efbe1f8ace27ad4da722ab8973b" translate="yes" xml:space="preserve">
          <source>However, we understand that requirements outside our wildest imagination may exist, so if you're looking for something like Electron that runs on Windows XP, the NW.js legacy release might be the right fit for you.</source>
          <target state="translated">しかし、私たちの想像を超えた要件が存在する可能性があることは理解していますので、Windows XPで動作するElectronのようなものを探しているのであれば、NW.jsのレガシーリリースが適しているかもしれません。</target>
        </trans-unit>
        <trans-unit id="80cb96f852d1ce7ae9b00c59c13912122674f7ce" translate="yes" xml:space="preserve">
          <source>Hungarian</source>
          <target state="translated">Hungarian</target>
        </trans-unit>
        <trans-unit id="4663bd433a3403bb10d42d1a6d961eb823a20381" translate="yes" xml:space="preserve">
          <source>I can not use jQuery/RequireJS/Meteor/AngularJS in Electron.</source>
          <target state="translated">ElectronでjQuery/RequireJS/Meteor/AngularJSが使えません。</target>
        </trans-unit>
        <trans-unit id="2fff4c2349e41985a187ff34f8c6f944604a97df" translate="yes" xml:space="preserve">
          <source>I used to provide APIs from my preload script using &lt;code&gt;window.X = apiObject&lt;/code&gt; now what?</source>
          <target state="translated">&lt;code&gt;window.X = apiObject&lt;/code&gt; を使用してプリロードスクリプトからAPIを提供していましたが、今は何ですか？</target>
        </trans-unit>
        <trans-unit id="d16e7df7f833569127024b8ec6cd77f88623e120" translate="yes" xml:space="preserve">
          <source>I'm being asked for a username/password for chromium-internal.googlesource.com</source>
          <target state="translated">chromium-internal.googlesource.com のユーザー名とパスワードを聞かれました。</target>
        </trans-unit>
        <trans-unit id="aa130cab90e070fea7cd0266d20e2823a9c3cc5b" translate="yes" xml:space="preserve">
          <source>I.e. This method returns &lt;code&gt;true&lt;/code&gt; if your process is the primary instance of your application and your app should continue loading. It returns &lt;code&gt;false&lt;/code&gt; if your process should immediately quit as it has sent its parameters to another instance that has already acquired the lock.</source>
          <target state="translated">つまり、プロセスがアプリケーションのプライマリインスタンスであり、アプリの読み込みを続行する必要が &lt;code&gt;true&lt;/code&gt; 場合、このメソッドはtrueを返します。すでにロックを取得している別のインスタンスにパラメータを送信したため、プロセスをすぐに終了する必要が &lt;code&gt;false&lt;/code&gt; 場合はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="f6443e9e80d7ff5014bd87a1c30a8be0edfc3cec" translate="yes" xml:space="preserve">
          <source>IDEA - &quot;On the Design and Security of Block Ciphers&quot; book by X. Lai</source>
          <target state="translated">IDEA-「ブロック暗号の設計とセキュリティについて」X.Lai著</target>
        </trans-unit>
        <trans-unit id="2d2784b01eb1135581b7a56e053cc184e7b456aa" translate="yes" xml:space="preserve">
          <source>IDL</source>
          <target state="translated">IDL</target>
        </trans-unit>
        <trans-unit id="d0f99dc7f22f9fd48a428327fd8c96820f8a762f" translate="yes" xml:space="preserve">
          <source>IME</source>
          <target state="translated">IME</target>
        </trans-unit>
        <trans-unit id="7c68728ac018ddf5a25a386395b4b5962be1aaf6" translate="yes" xml:space="preserve">
          <source>IOCounters</source>
          <target state="translated">IOCounters</target>
        </trans-unit>
        <trans-unit id="1fd209e564e2f820f91ecf2931819f28bad1b99c" translate="yes" xml:space="preserve">
          <source>IOCounters Object</source>
          <target state="translated">IOCounters オブジェクト</target>
        </trans-unit>
        <trans-unit id="f4aa7e6cdf843e01253be3fd2becaee731842f78" translate="yes" xml:space="preserve">
          <source>IPC</source>
          <target state="translated">IPC</target>
        </trans-unit>
        <trans-unit id="890a7404cde81122526f825a731ae1012afa8fc4" translate="yes" xml:space="preserve">
          <source>IPC stands for Inter-Process Communication. Electron uses IPC to send serialized JSON messages between the &lt;a href=&quot;#main-process&quot;&gt;main&lt;/a&gt; and &lt;a href=&quot;#renderer-process&quot;&gt;renderer&lt;/a&gt; processes.</source>
          <target state="translated">IPCは、プロセス間通信の略です。ElectronはIPCを使用して、&lt;a href=&quot;#main-process&quot;&gt;メイン&lt;/a&gt;プロセスと&lt;a href=&quot;#renderer-process&quot;&gt;レンダラー&lt;/a&gt;プロセスの間でシリアル化されたJSONメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="4908b12c142b7bd671d43e5185556c158bb0999c" translate="yes" xml:space="preserve">
          <source>Icelandic</source>
          <target state="translated">Icelandic</target>
        </trans-unit>
        <trans-unit id="b1faf3607f00a15313ffe083e5f26329c2c9887b" translate="yes" xml:space="preserve">
          <source>Icon Overlays in Taskbar</source>
          <target state="translated">タスクバーのアイコンオーバーレイ</target>
        </trans-unit>
        <trans-unit id="4b58f92cb05655184beba35216e41c88e52c8808" translate="yes" xml:space="preserve">
          <source>Icon overlays serve as a contextual notification of status, and are intended to negate the need for a separate notification area status icon to communicate that information to the user. For instance, the new mail status in Microsoft Outlook, currently shown in the notification area, can now be indicated through an overlay on the taskbar button. Again, you must decide during your development cycle which method is best for your application. Overlay icons are intended to supply important, long-standing status or notifications such as network status, messenger status, or new mail. The user should not be presented with constantly changing overlays or animations.</source>
          <target state="translated">アイコンのオーバーレイは、ステータスの文脈上の通知として機能し、その情報をユーザーに伝達するために、別個の通知領域のステータスアイコンの必要性を否定することを意図しています。たとえば、現在通知領域に表示されている Microsoft Outlook の新しいメールのステータスを、タスクバーボタンのオーバーレイで表示することができます。ここでも、アプリケーションに最適な方法を開発サイクル中に決定する必要があります。オーバーレイアイコンは、ネットワークの状態、メッセンジャーの状態、または新しいメールのような重要で長期的な状態や通知を提供することを目的としています。ユーザーは、常に変化するオーバーレイやアニメーションを表示すべきではありません。</target>
        </trans-unit>
        <trans-unit id="1431424e0aa0d00794b34d04eefeac90cc58d9b8" translate="yes" xml:space="preserve">
          <source>Icons associated with certain file extensions, like &lt;code&gt;.mp3&lt;/code&gt;, &lt;code&gt;.png&lt;/code&gt;, etc.</source>
          <target state="translated">&lt;code&gt;.mp3&lt;/code&gt; 、 &lt;code&gt;.png&lt;/code&gt; などの特定のファイル拡張子に関連付けられたアイコン</target>
        </trans-unit>
        <trans-unit id="b87b9c7cefbb13a341bb1187e3a49551471edda0" translate="yes" xml:space="preserve">
          <source>Icons inside the file itself, like &lt;code&gt;.exe&lt;/code&gt;, &lt;code&gt;.dll&lt;/code&gt;, &lt;code&gt;.ico&lt;/code&gt;.</source>
          <target state="translated">ファイル自体の内部アイコンなどの &lt;code&gt;.exe&lt;/code&gt; ファイル、 &lt;code&gt;.dll&lt;/code&gt; ファイル、 &lt;code&gt;.ico&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="186bfe94308b4c8b9444f82e3fabdd4996e0d6b2" translate="yes" xml:space="preserve">
          <source>Ideally, the pull request will pass (&quot;be green&quot;) on all of CI's platforms. This means that all tests pass and there are no linting errors. However, it is not uncommon for the CI infrastructure itself to fail on specific platforms or for so-called &quot;flaky&quot; tests to fail (&quot;be red&quot;). Each CI failure must be manually inspected to determine the cause.</source>
          <target state="translated">理想的には、CIのすべてのプラットフォーム上でプルリクエストが通過(&quot;be green&quot;)することです。これは、すべてのテストが合格し、リントエラーがないことを意味します。しかし、CIインフラストラクチャ自体が特定のプラットフォームで失敗したり、いわゆる「欠陥のある」テストが失敗することは珍しくありません(「赤」になる)。各CIの失敗は、原因を特定するために手動で検査する必要があります。</target>
        </trans-unit>
        <trans-unit id="c950e5fcb340b66b792a98a1b860f73128a02acd" translate="yes" xml:space="preserve">
          <source>Identify the image you wish to modify.</source>
          <target state="translated">修正したい画像を特定します。</target>
        </trans-unit>
        <trans-unit id="9daef1fc4f2699e1ced9a8bca6a46f684613c300" translate="yes" xml:space="preserve">
          <source>If &lt;a href=&quot;https://alienryderflex.com/sub_pixel/&quot;&gt;sub-pixel anti-aliasing&lt;/a&gt; is deactivated, then fonts on LCD screens can look blurry. Example:</source>
          <target state="translated">場合&lt;a href=&quot;https://alienryderflex.com/sub_pixel/&quot;&gt;、サブピクセルアンチエイリアシングを&lt;/a&gt;非活性化され、その後、LCD画面上のフォントがぼやけて見えることができます。例：</target>
        </trans-unit>
        <trans-unit id="e3388f8c3e24c8f4cfd0feb826cdf4bd66d6bb3a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;app.getPath('logs')&lt;/code&gt; is called without called &lt;code&gt;app.setAppLogsPath()&lt;/code&gt; being called first, a default log directory will be created equivalent to calling &lt;code&gt;app.setAppLogsPath()&lt;/code&gt; without a &lt;code&gt;path&lt;/code&gt; parameter.</source>
          <target state="translated">もし &lt;code&gt;app.getPath('logs')&lt;/code&gt; なしで呼び出されると呼ばれる &lt;code&gt;app.setAppLogsPath()&lt;/code&gt; が最初に呼び出され、デフォルトのログディレクトリは、呼び出しと同じ作成されます &lt;code&gt;app.setAppLogsPath()&lt;/code&gt; せずに &lt;code&gt;path&lt;/code&gt; パラメータ。</target>
        </trans-unit>
        <trans-unit id="9241deb084a6d5babf2886e1ab3012b3abf8b22b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;backgroundThrottling&lt;/code&gt; is disabled, the visibility state will remain &lt;code&gt;visible&lt;/code&gt; even if the window is minimized, occluded, or hidden.</source>
          <target state="translated">場合 &lt;code&gt;backgroundThrottling&lt;/code&gt; が無効になっている、可視性の状態が残る &lt;code&gt;visible&lt;/code&gt; ウィンドウが最小化されている場合でも、閉塞、または非表示。</target>
        </trans-unit>
        <trans-unit id="2ab64bd4fbc9f13434f020a4d72f5c0bab58107c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;callback&lt;/code&gt; is called without a username or password, the authentication request will be cancelled and the authentication error will be returned to the page.</source>
          <target state="translated">ユーザー名またはパスワードなしで &lt;code&gt;callback&lt;/code&gt; が呼び出された場合、認証要求はキャンセルされ、認証エラーがページに返されます。</target>
        </trans-unit>
        <trans-unit id="271d04a59e510c2f17aaa6bc0a410f5e69008aa0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;categories&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt; the previously set custom Jump List (if any) will be replaced by the standard Jump List for the app (managed by Windows).</source>
          <target state="translated">&lt;code&gt;categories&lt;/code&gt; が &lt;code&gt;null&lt;/code&gt; の場合、以前に設定されたカスタムジャンプリスト（存在する場合）は、アプリの標準のジャンプリスト（Windowsで管理）に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="d7d5f50e7e236c4c3873874792fb7811f4c1a44b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;gclient sync&lt;/code&gt; is interrupted the git tree may be left in a bad state, leading to a cryptic message when running &lt;code&gt;gclient sync&lt;/code&gt; in the future:</source>
          <target state="translated">場合 &lt;code&gt;gclient sync&lt;/code&gt; 中断されたのgitツリーを実行しているときに不可解なメッセージにつながる、悪い状態のままにすることができる &lt;code&gt;gclient sync&lt;/code&gt; 将来的に：</target>
        </trans-unit>
        <trans-unit id="36c123521ae2817ad24173691362787c56b44843" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;git-import-patches -3&lt;/code&gt; encounters a merge conflict that it can't resolve automatically, it will pause and allow you to resolve the conflict manually. Once you have resolved the conflict, &lt;code&gt;git add&lt;/code&gt; the resolved files and continue to apply the rest of the patches by running &lt;code&gt;git am --continue&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;git-import-patches -3&lt;/code&gt; 、それは自動的に解決できないことをマージ競合が発生した、それは一時停止し、手動で競合を解決することができます。競合を解決したら、 &lt;code&gt;git add&lt;/code&gt; は解決したファイルを追加し、 &lt;code&gt;git am --continue&lt;/code&gt; 実行して残りのパッチを適用し続けます。</target>
        </trans-unit>
        <trans-unit id="8a0633c123f77fc0c055ad23664ec2cd171adc37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;listener&lt;/code&gt; returns a Promise, the eventual result of the promise will be returned as a reply to the remote caller. Otherwise, the return value of the listener will be used as the value of the reply.</source>
          <target state="translated">場合は &lt;code&gt;listener&lt;/code&gt; 約束を返し、約束の最終的な結果は、リモート呼び出し側への応答として返されます。それ以外の場合、リスナーの戻り値が応答の値として使用されます。</target>
        </trans-unit>
        <trans-unit id="556f915b2e5f20804107a01cb875b2dc9074fb1f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;partition&lt;/code&gt; starts with &lt;code&gt;persist:&lt;/code&gt;, the page will use a persistent session available to all pages in the app with the same &lt;code&gt;partition&lt;/code&gt;. if there is no &lt;code&gt;persist:&lt;/code&gt; prefix, the page will use an in-memory session. If the &lt;code&gt;partition&lt;/code&gt; is empty then default session of the app will be returned.</source>
          <target state="translated">&lt;code&gt;partition&lt;/code&gt; が &lt;code&gt;persist:&lt;/code&gt; で始まる場合、ページは同じ &lt;code&gt;partition&lt;/code&gt; 持つアプリ内のすべてのページで利用可能な永続的なセッションを使用します。 &lt;code&gt;persist:&lt;/code&gt; プレフィックスがない場合、ページはメモリ内セッションを使用します。 &lt;code&gt;partition&lt;/code&gt; が空の場合、アプリのデフォルトセッションが返されます。</target>
        </trans-unit>
        <trans-unit id="a67226ca7a777cfee22c5e1499e50c2b4b369ea4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;scaleFactor&lt;/code&gt; is passed, this will return the aspect ratio corresponding to the image representation most closely matching the passed value.</source>
          <target state="translated">場合 &lt;code&gt;scaleFactor&lt;/code&gt; をが渡され、これが最も密接に渡された値と一致する画像表現に対応するアスペクト比を返します。</target>
        </trans-unit>
        <trans-unit id="ef9a1b0a2183ac9ff1b8bccaa4dea34f40d8277c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;scaleFactor&lt;/code&gt; is passed, this will return the size corresponding to the image representation most closely matching the passed value.</source>
          <target state="translated">場合 &lt;code&gt;scaleFactor&lt;/code&gt; をが渡され、これが最も密接に渡された値と一致する画像表現に対応する大きさを返します。</target>
        </trans-unit>
        <trans-unit id="06b1dcac461294816a12b307466803637f810c1d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;timeoutType&lt;/code&gt; is set to 'never', the notification never expires. It stays open until closed by the calling API or the user.</source>
          <target state="translated">&lt;code&gt;timeoutType&lt;/code&gt; が 'never'に設定されている場合、通知は期限切れになりません。呼び出し元のAPIまたはユーザーによって閉じられるまで開いたままになります。</target>
        </trans-unit>
        <trans-unit id="159278b031266e4365b8e89cb754ee1575e08111" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offscreen rendering&lt;/em&gt; is enabled and not painting, start painting.</source>
          <target state="translated">&lt;em&gt;オフスクリーンレンダリング&lt;/em&gt;が有効でペイントされていない場合は、ペイントを開始します。</target>
        </trans-unit>
        <trans-unit id="727cf6c7299aabc319e19a37a009db3233858a37" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offscreen rendering&lt;/em&gt; is enabled and painting, stop painting.</source>
          <target state="translated">&lt;em&gt;オフスクリーンレンダリング&lt;/em&gt;が有効でペイントされている場合は、ペイントを停止します。</target>
        </trans-unit>
        <trans-unit id="0341ea0a3b398358cb52497946e862feaf676cae" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offscreen rendering&lt;/em&gt; is enabled invalidates the frame and generates a new one through the &lt;code&gt;'paint'&lt;/code&gt; event.</source>
          <target state="translated">もし&lt;em&gt;オフスクリーンレンダリングを&lt;/em&gt;無効化にフレームを有効にして新しいものを生成している &lt;code&gt;'paint'&lt;/code&gt; イベント。</target>
        </trans-unit>
        <trans-unit id="71adc365e97dd03614eb0aaea1310a81945c3c0a" translate="yes" xml:space="preserve">
          <source>If &lt;em&gt;offscreen rendering&lt;/em&gt; is enabled sets the frame rate to the specified number. Only values between 1 and 60 are accepted.</source>
          <target state="translated">&lt;em&gt;オフスクリーンレンダリング&lt;/em&gt;が有効な場合、フレームレートは指定された数値に設定されます。1〜60の値のみが受け入れられます。</target>
        </trans-unit>
        <trans-unit id="4722ea2a3cf0c60dab14c9eaa28ad6f7054a8910" translate="yes" xml:space="preserve">
          <source>If Electron is running under a different user account, select the &lt;code&gt;Show processes from all users&lt;/code&gt; check box. Notice that depending on how many BrowserWindows your app opened, you will see multiple processes. A typical one-window app will result in Visual Studio presenting you with two &lt;code&gt;Electron.exe&lt;/code&gt; entries - one for the main process and one for the renderer process. Since the list only gives you names, there's currently no reliable way of figuring out which is which.</source>
          <target state="translated">Electronが別のユーザーアカウントで実行されている場合は、[ &lt;code&gt;Show processes from all users&lt;/code&gt; チェックボックスをオンにします。アプリが開いたBrowserWindowsの数に応じて、複数のプロセスが表示されることに注意してください。典型的な1ウィンドウアプリでは、Visual Studioに2つの &lt;code&gt;Electron.exe&lt;/code&gt; エントリが表示されます。1つはメインプロセス用で、もう1つはレンダラープロセス用です。リストには名前しか記載されていないため、どちらがどれであるかを判別する信頼できる方法は現在ありません。</target>
        </trans-unit>
        <trans-unit id="dfa45c90a49b752076cafae378cbfb0fc75ef031" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;BrowserWindow&lt;/code&gt; is created with &lt;code&gt;show: false&lt;/code&gt;, the initial visibility state will be &lt;code&gt;visible&lt;/code&gt; despite the window actually being hidden.</source>
          <target state="translated">&lt;code&gt;show: false&lt;/code&gt; して &lt;code&gt;BrowserWindow&lt;/code&gt; を作成すると、ウィンドウが実際に非表示になっていても、初期の可視状態が &lt;code&gt;visible&lt;/code&gt; されます。</target>
        </trans-unit>
        <trans-unit id="e0338bcfcb4104ead00fe9414b0bc6c798aebd82" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;callback&lt;/code&gt; is passed, the API call will be asynchronous and the result will be passed via &lt;code&gt;callback(filename)&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;callback&lt;/code&gt; 渡され、APIの呼び出しは非同期になり、結果が経由して渡される &lt;code&gt;callback(filename)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71e356d72e9973e91887cd4f40f232a75076438d" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;callback&lt;/code&gt; is passed, the API call will be asynchronous and the result will be passed via &lt;code&gt;callback(filenames)&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;callback&lt;/code&gt; 渡され、APIの呼び出しは非同期になり、結果が経由して渡される &lt;code&gt;callback(filenames)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e3791cf12a77a8315d2f8d2c28114944e087288f" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;callback&lt;/code&gt; is passed, the dialog will not block the process. The API call will be asynchronous and the result will be passed via &lt;code&gt;callback(response)&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;callback&lt;/code&gt; 渡され、ダイアログは、プロセスをブロックしません。API呼び出しは非同期になり、結果は &lt;code&gt;callback(response)&lt;/code&gt; を介して渡されます。</target>
        </trans-unit>
        <trans-unit id="933de00af7bd0e61f4522a7eb8447733c9fb6a06" translate="yes" xml:space="preserve">
          <source>If a diff section has no instances of &lt;code&gt;deps/V8&lt;/code&gt;, remove it altogether.</source>
          <target state="translated">diffセクションに &lt;code&gt;deps/V8&lt;/code&gt; のインスタンスがない場合は、それを完全に削除します。</target>
        </trans-unit>
        <trans-unit id="ce51a26435dc6c860dd5b7261fd1da0add0d6ab9" translate="yes" xml:space="preserve">
          <source>If a particular beta release is &lt;em&gt;generally regarded&lt;/em&gt; as stable, it will be re-released as a stable build, changing only the version information. e.g. &lt;code&gt;2.0.0&lt;/code&gt;.</source>
          <target state="translated">特定のベータリリースが&lt;em&gt;一般に&lt;/em&gt;安定している&lt;em&gt;と見なさ&lt;/em&gt;れる場合、バージョン情報のみを変更して、安定したビルドとして再リリースされます。例： &lt;code&gt;2.0.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3381ab7d07ff7f44a23923b82111564a74ce1259" translate="yes" xml:space="preserve">
          <source>If a particular beta release is &lt;em&gt;generally regarded&lt;/em&gt; as stable, it will be re-released as a stable build, changing only the version information. e.g. &lt;code&gt;2.0.0&lt;/code&gt;. After the first stable, all changes must be backwards-compatible bug or security fixes.</source>
          <target state="translated">特定のベータリリースが&lt;em&gt;一般的に&lt;/em&gt;安定している&lt;em&gt;と見なさ&lt;/em&gt;れる場合、バージョン情報のみを変更して、安定したビルドとして再リリースされます。例： &lt;code&gt;2.0.0&lt;/code&gt; 。最初の安定版の後、すべての変更は下位互換性のあるバグまたはセキュリティ修正である必要があります。</target>
        </trans-unit>
        <trans-unit id="9cbb2f79307ba23d0b161591cc6814a5de337e7d" translate="yes" xml:space="preserve">
          <source>If a recording is already running, the promise will be immediately resolved, as only one trace operation can be in progress at a time.</source>
          <target state="translated">録画がすでに実行されている場合は、一度に1つのトレース操作しか進行中ではないため、プロミスはすぐに解決されます。</target>
        </trans-unit>
        <trans-unit id="1a3c6692afccf3587e8e76384b39c2f121c66aaa" translate="yes" xml:space="preserve">
          <source>If allowed changes need to be made once a release is beta, they are applied and the prerelease tag is incremented, e.g. &lt;code&gt;2.0.0-beta.2&lt;/code&gt;.</source>
          <target state="translated">リリースがベータ版になった後で許可された変更を行う必要がある場合は、それらが適用され、プレリリースタグがインクリメントされます（例： &lt;code&gt;2.0.0-beta.2&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="62a428d1aa74808bcd0676cdc2f0ecc3426101a5" translate="yes" xml:space="preserve">
          <source>If an application has exceptional circumstances and needs to stay on an unsupported series of Electron, developers can silence the end-of-support warning by omitting the final release from the app's &lt;code&gt;package.json&lt;/code&gt;&lt;code&gt;devDependencies&lt;/code&gt;. For example, since the 1-6-x series ended with an end-of-support 1.6.18 release, developers could choose to stay in the 1-6-x series without warnings with &lt;code&gt;devDependency&lt;/code&gt; of &lt;code&gt;&quot;electron&quot;: 1.6.0 - 1.6.17&lt;/code&gt;.</source>
          <target state="translated">アプリケーションに例外的な状況があり、サポートされていない一連のElectronに留まる必要がある場合、開発者はアプリの &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;devDependencies&lt;/code&gt; からの最終リリースを省略して、サポート終了の警告を黙らせることができます。たとえば、1-6-xシリーズはサポート終了1.6.18リリースで終了したため、開発者は &lt;code&gt;devDependency&lt;/code&gt; が &lt;code&gt;&quot;electron&quot;: 1.6.0 - 1.6.17&lt;/code&gt; 場合、警告なしに1-6-xシリーズに留まることを選択できます：1.6.0- 1.6.17。</target>
        </trans-unit>
        <trans-unit id="227ed419db90b65ed7017e1ab78195d8ce8a48ed" translate="yes" xml:space="preserve">
          <source>If an argument or a method is unique to certain platforms, those platforms are denoted using a space-delimited italicized list following the datatype. Values can be &lt;code&gt;macOS&lt;/code&gt;, &lt;code&gt;Windows&lt;/code&gt; or &lt;code&gt;Linux&lt;/code&gt;.</source>
          <target state="translated">引数またはメソッドが特定のプラットフォームに固有である場合、それらのプラットフォームは、データ型の後にスペースで区切られたイタリック体のリストを使用して示されます。値には、 &lt;code&gt;macOS&lt;/code&gt; 、 &lt;code&gt;Windows&lt;/code&gt; 、または &lt;code&gt;Linux&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="b3b63c9e15d16c79e73b80be24bb123149539714" translate="yes" xml:space="preserve">
          <source>If both commands printed a version number, you are all set! Before you get started, you might want to install a &lt;a href=&quot;#a-good-editor&quot;&gt;code editor&lt;/a&gt; suited for JavaScript development.</source>
          <target state="translated">両方のコマンドでバージョン番号が出力されていれば、準備は完了です。始める前に、JavaScript開発に適した&lt;a href=&quot;#a-good-editor&quot;&gt;コードエディター&lt;/a&gt;をインストールすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3bb932b3c9db14b7bf8934cd43d3008c15bd7ef5" translate="yes" xml:space="preserve">
          <source>If building under Cygwin, you may see &lt;code&gt;bootstrap.py&lt;/code&gt; failed with following error:</source>
          <target state="translated">Cygwinでビルドすると、 &lt;code&gt;bootstrap.py&lt;/code&gt; が次のエラーで失敗する場合があります。</target>
        </trans-unit>
        <trans-unit id="3293c5bdfae6887ec9205c0f094060db05923daa" translate="yes" xml:space="preserve">
          <source>If done successfully, the command prompt should print something similar to this on startup:</source>
          <target state="translated">正常に実行された場合、コマンドプロンプトは起動時にこのようなものを表示するはずです。</target>
        </trans-unit>
        <trans-unit id="0c921c76717bc0c31716bfb5e7e1d21ffd8545b4" translate="yes" xml:space="preserve">
          <source>If either of these requirements are not met the button simply won't appear.</source>
          <target state="translated">これらの要件のいずれかが満たされていない場合、ボタンは単に表示されません。</target>
        </trans-unit>
        <trans-unit id="24c200fa42489448d0578157380e7ed444fcfa81" translate="yes" xml:space="preserve">
          <source>If either of these requirements are not met the button won't appear.</source>
          <target state="translated">これらの要件のいずれかが満たされていない場合、ボタンは表示されません。</target>
        </trans-unit>
        <trans-unit id="6f7cf0c5d1b5e702650badf2be6e09235ead62c0" translate="yes" xml:space="preserve">
          <source>If future bug fixes or security patches need to be made once a release is stable, they are applied and the &lt;em&gt;patch&lt;/em&gt; version is incremented accordingly e.g. &lt;code&gt;2.0.1&lt;/code&gt;.</source>
          <target state="translated">リリースが安定したら、将来のバグ修正またはセキュリティパッチを作成する必要がある場合、それらが適用され、それに応じて&lt;em&gt;パッチ&lt;/em&gt;バージョンが増分されます（例： &lt;code&gt;2.0.1&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="2e630a63128205fbb59eba620d0c310d7bc845d6" translate="yes" xml:space="preserve">
          <source>If future bug fixes or security patches need to be made once a release is stable, they are applied and the &lt;em&gt;patch&lt;/em&gt; version is incremented e.g. &lt;code&gt;2.0.1&lt;/code&gt;.</source>
          <target state="translated">リリースが安定した後で将来のバグ修正またはセキュリティパッチを作成する必要がある場合は、それらが適用され、&lt;em&gt;パッチ&lt;/em&gt;バージョンが増分されます（例： &lt;code&gt;2.0.1&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="44ed5688e741dfaf087bcb72ad97d72432431f8e" translate="yes" xml:space="preserve">
          <source>If installation fails with an &lt;code&gt;EACCESS&lt;/code&gt; error you may need to &lt;a href=&quot;https://docs.npmjs.com/getting-started/fixing-npm-permissions&quot;&gt;fix your npm permissions&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;EACCESS&lt;/code&gt; エラーでインストールが失敗した場合は、&lt;a href=&quot;https://docs.npmjs.com/getting-started/fixing-npm-permissions&quot;&gt;npm権限&lt;/a&gt;を修正する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="815eb8dd187b8fd58d929aed602225532bb831cc" translate="yes" xml:space="preserve">
          <source>If it is something like &lt;code&gt;node_modules/electron/index.js&lt;/code&gt;, then you have to either remove the npm &lt;code&gt;electron&lt;/code&gt; module, or rename it.</source>
          <target state="translated">&lt;code&gt;node_modules/electron/index.js&lt;/code&gt; のような場合は、npm &lt;code&gt;electron&lt;/code&gt; モジュールを削除するか、名前を変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="a859a4ddd12f0e153e138787f8b6dc0429da67f2" translate="yes" xml:space="preserve">
          <source>If modules provide binaries for the usage in Electron, make sure to omit &lt;code&gt;--build-from-source&lt;/code&gt; and the &lt;code&gt;npm_config_build_from_source&lt;/code&gt; environment variable in order to take full advantage of the prebuilt binaries.</source>
          <target state="translated">モジュールがElectronで使用するためのバイナリーを提供する場合、ビルド済みのバイナリーを最大限に活用するために、必ず &lt;code&gt;--build-from-source&lt;/code&gt; および &lt;code&gt;npm_config_build_from_source&lt;/code&gt; 環境変数を省略してください。</target>
        </trans-unit>
        <trans-unit id="0a7fc7f45e66e5f0ebd9efc56a7fc45a306be368" translate="yes" xml:space="preserve">
          <source>If only the &lt;code&gt;height&lt;/code&gt; or the &lt;code&gt;width&lt;/code&gt; are specified then the current aspect ratio will be preserved in the resized image.</source>
          <target state="translated">&lt;code&gt;height&lt;/code&gt; または &lt;code&gt;width&lt;/code&gt; のみが指定されている場合、現在のアスペクト比はサイズ変更された画像で保持されます。</target>
        </trans-unit>
        <trans-unit id="9d9162a12eb8774afee04e7764955db85194d35b" translate="yes" xml:space="preserve">
          <source>If running the above command prompts you for a reboot, please restart your machine and run the above command again after a successful restart.</source>
          <target state="translated">上記コマンドを実行すると再起動を促される場合は、マシンを再起動し、再起動に成功したら再度上記コマンドを実行してください。</target>
        </trans-unit>
        <trans-unit id="036a6278d7e573afe9f50df254cc0f6f441e101f" translate="yes" xml:space="preserve">
          <source>If some patches are no longer compatible with the Chromium code, fix compilation errors.</source>
          <target state="translated">いくつかのパッチが Chromium コードと互換性がなくなった場合は、コンパイルエラーを修正してください。</target>
        </trans-unit>
        <trans-unit id="7804d7554a30dcbd8e8d5d5a73b45bb44515f84f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;type&lt;/code&gt; parameter is &lt;code&gt;custom&lt;/code&gt;, the &lt;code&gt;image&lt;/code&gt; parameter will hold the custom cursor image in a &lt;a href=&quot;api/native-image&quot;&gt;&lt;code&gt;NativeImage&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;scale&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;hotspot&lt;/code&gt; will hold additional information about the custom cursor.</source>
          <target state="translated">場合は &lt;code&gt;type&lt;/code&gt; パラメータがある &lt;code&gt;custom&lt;/code&gt; 、 &lt;code&gt;image&lt;/code&gt; パラメータには、カスタムカーソルのイメージを保持する&lt;a href=&quot;api/native-image&quot;&gt; &lt;code&gt;NativeImage&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;scale&lt;/code&gt; 、 &lt;code&gt;size&lt;/code&gt; および &lt;code&gt;hotspot&lt;/code&gt; カスタムカーソルに関する追加情報を保持します。</target>
        </trans-unit>
        <trans-unit id="45e3367833fa240b813e722d92da74d613a9b625" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;type&lt;/code&gt; parameter is &lt;code&gt;custom&lt;/code&gt;, the &lt;code&gt;image&lt;/code&gt; parameter will hold the custom cursor image in a &lt;a href=&quot;native-image&quot;&gt;&lt;code&gt;NativeImage&lt;/code&gt;&lt;/a&gt;, and &lt;code&gt;scale&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;hotspot&lt;/code&gt; will hold additional information about the custom cursor.</source>
          <target state="translated">場合は &lt;code&gt;type&lt;/code&gt; パラメータがある &lt;code&gt;custom&lt;/code&gt; 、 &lt;code&gt;image&lt;/code&gt; パラメータには、カスタムカーソルのイメージを保持する&lt;a href=&quot;native-image&quot;&gt; &lt;code&gt;NativeImage&lt;/code&gt; &lt;/a&gt;、および &lt;code&gt;scale&lt;/code&gt; 、 &lt;code&gt;size&lt;/code&gt; および &lt;code&gt;hotspot&lt;/code&gt; カスタムカーソルに関する追加情報を保持します。</target>
        </trans-unit>
        <trans-unit id="3ff219d7e6ae5dba72d0fde282805fcedb6155cd" translate="yes" xml:space="preserve">
          <source>If the V8 context crashes, the DevTools will display this message.</source>
          <target state="translated">V8のコンテキストがクラッシュすると、DevToolsにこのメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="3074d076d9db7915861fa0e3b33bf85ee60ae69e" translate="yes" xml:space="preserve">
          <source>If the above error persists, the &lt;a href=&quot;https://docs.npmjs.com/misc/config#unsafe-perm&quot;&gt;unsafe-perm&lt;/a&gt; flag may need to be set to true:</source>
          <target state="translated">上記のエラーが続く場合は、&lt;a href=&quot;https://docs.npmjs.com/misc/config#unsafe-perm&quot;&gt;unsafe-perm&lt;/a&gt;フラグをtrueに設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="a2d265f7d654fec2f7394cb9d7e334abf7e454fc" translate="yes" xml:space="preserve">
          <source>If the bootstrap script is interrupted while using the git cache, it will leave the cache locked. To remove the lock, delete the files ending in &lt;code&gt;.lock&lt;/code&gt;:</source>
          <target state="translated">gitキャッシュの使用中にブートストラップスクリプトが中断されると、キャッシュがロックされたままになります。ロックを解除するには、末尾が &lt;code&gt;.lock&lt;/code&gt; のファイルを削除します。</target>
        </trans-unit>
        <trans-unit id="227b7a1a4062e4eb30d21b7dd3febec236df7570" translate="yes" xml:space="preserve">
          <source>If the files present in &lt;code&gt;hunspell_dictionaries.zip&lt;/code&gt; are available at &lt;code&gt;https://example.com/dictionaries/language-code.bdic&lt;/code&gt; then you should call this api with &lt;code&gt;ses.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')&lt;/code&gt;. Please note the trailing slash. The URL to the dictionaries is formed as &lt;code&gt;${url}${filename}&lt;/code&gt;.</source>
          <target state="translated">ファイルが存在する場合に &lt;code&gt;hunspell_dictionaries.zip&lt;/code&gt; でご利用いただけます &lt;code&gt;https://example.com/dictionaries/language-code.bdic&lt;/code&gt; その後、あなたがこのAPIを呼び出す必要があり &lt;code&gt;ses.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')&lt;/code&gt; 。末尾のスラッシュに注意してください。辞書へのURLは &lt;code&gt;${url}${filename}&lt;/code&gt; として形成されます。</target>
        </trans-unit>
        <trans-unit id="d777a0bd454d49b73cbb2b36d2133d3780f64fba" translate="yes" xml:space="preserve">
          <source>If the menu bar is already visible, calling &lt;code&gt;setAutoHideMenuBar(true)&lt;/code&gt; won't hide it immediately.</source>
          <target state="translated">メニューバーが既に表示されている場合、 &lt;code&gt;setAutoHideMenuBar(true)&lt;/code&gt; を呼び出してもすぐには非表示になりません。</target>
        </trans-unit>
        <trans-unit id="b4d7bfe662ffcc3a7190fd9aa6a772d7dca99a41" translate="yes" xml:space="preserve">
          <source>If the menu bar is already visible, setting this property to &lt;code&gt;true&lt;/code&gt; won't hide it immediately.</source>
          <target state="translated">メニューバーがすでに表示されている場合、このプロパティを &lt;code&gt;true&lt;/code&gt; に設定しても、すぐには非表示になりません。</target>
        </trans-unit>
        <trans-unit id="1445a9cf2dc0e174a88f6508636dd9e681cc9bbe" translate="yes" xml:space="preserve">
          <source>If the method returns an &lt;code&gt;Object&lt;/code&gt;, its structure can be specified using a colon followed by a newline then an unordered list of properties in the same style as function parameters.</source>
          <target state="translated">メソッドが &lt;code&gt;Object&lt;/code&gt; 返す場合、その構造は、コロンとそれに続く改行、次に関数パラメーターと同じスタイルのプロパティの順序付けられていないリストを使用して指定できます。</target>
        </trans-unit>
        <trans-unit id="0d81ef85e9492d93d3361d1faa21f3536481d645" translate="yes" xml:space="preserve">
          <source>If the notification has been shown before, this method will dismiss the previously shown notification and create a new one with identical properties.</source>
          <target state="translated">通知が以前に表示されたことがある場合、このメソッドは以前に表示された通知を破棄し、同一のプロパティを持つ新しい通知を作成します。</target>
        </trans-unit>
        <trans-unit id="46d9109487375980a467e3475b5025f5fb361e14" translate="yes" xml:space="preserve">
          <source>If the remote object is leaked in the renderer process (e.g. stored in a map but never freed), the corresponding object in the main process will also be leaked, so you should be very careful not to leak remote objects.</source>
          <target state="translated">レンダラプロセスでリモートオブジェクトがリークされると(マップに格納されているが解放されないなど)、メインプロセスの対応するオブジェクトもリークされるので、リモートオブジェクトがリークされないように細心の注意を払う必要があります。</target>
        </trans-unit>
        <trans-unit id="5e6949fb4346277bbe7db3c64a65fcba98095e0f" translate="yes" xml:space="preserve">
          <source>If the result of the executed code is a promise the callback result will be the resolved value of the promise. We recommend that you use the returned Promise to handle code that results in a Promise.</source>
          <target state="translated">実行されたコードの結果がプロミスの場合、コールバックの結果はプロミスの解決された値になります。返されたプロミスを使用して、結果がプロミスになるコードを処理することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="d826471e04a7d4fc05bf0a83dfdd02e0fb722702" translate="yes" xml:space="preserve">
          <source>If the script returns that your configuration is using an outdated security protocol, use your system's package manager to update Python to the latest version in the 2.7.x branch. Alternatively, visit &lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/&lt;/a&gt; for detailed instructions.</source>
          <target state="translated">構成で古いセキュリティプロトコルが使用されていることがスクリプトから返された場合は、システムのパッケージマネージャーを使用して、Pythonを2.7.xブランチの最新バージョンに更新します。または、詳細な手順について&lt;a href=&quot;https://www.python.org/downloads/&quot;&gt;https://www.python.org/downloads/にアクセス&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="e4adbc188f4d1ddc4f11150ad0b6625adc75ae52" translate="yes" xml:space="preserve">
          <source>If the script returns that your configuration is using an outdated security protocol, you can either update macOS to High Sierra or install a new version of Python 2.7.x. To upgrade Python, use &lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:</source>
          <target state="translated">構成で古いセキュリティプロトコルが使用されていることがスクリプトから返された場合は、macOSをHigh Sierraに更新するか、新しいバージョンのPython 2.7.xをインストールできます。Pythonをアップグレードするには、&lt;a href=&quot;https://brew.sh/&quot;&gt;Homebrewを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="9bc366f85878aed74d84170109b09f689d2913c9" translate="yes" xml:space="preserve">
          <source>If the service worker does not exist or is not running this method will throw an exception.</source>
          <target state="translated">サービスワーカーが存在しない、または実行されていない場合、このメソッドは例外をスローします。</target>
        </trans-unit>
        <trans-unit id="07e786051fa4107bbbfff765db6fcd965cc9e749" translate="yes" xml:space="preserve">
          <source>If the size is unknown, it returns 0.</source>
          <target state="translated">サイズが不明な場合は0を返します。</target>
        </trans-unit>
        <trans-unit id="0a6fe5b89f2dabed06a3aea1db923c81989e03ac" translate="yes" xml:space="preserve">
          <source>If the type you care about is not in the above table, it is probably not supported.</source>
          <target state="translated">気になるタイプが上記の表にない場合は、おそらくサポートされていないと思われます。</target>
        </trans-unit>
        <trans-unit id="a6400f1ceae84e75b1798da7ac8f97b4940146c9" translate="yes" xml:space="preserve">
          <source>If there are any compilation errors related to the Crashpad, it probably means you need to update the fork to a newer revision. See &lt;a href=&quot;upgrading-crashpad&quot;&gt;Upgrading Crashpad&lt;/a&gt; for instructions on how to do that.</source>
          <target state="translated">クラッシュパッドに関連するコンパイルエラーがある場合は、フォークを新しいリビジョンに更新する必要があることを意味します。その方法については、&lt;a href=&quot;upgrading-crashpad&quot;&gt;クラッシュパッドのアップグレードを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="7288c9fc494492fc851891528f5ac380e8879e56" translate="yes" xml:space="preserve">
          <source>If there are no git conflicts or rebases in &lt;code&gt;src/electron&lt;/code&gt;, you may need to abort a &lt;code&gt;git am&lt;/code&gt; in &lt;code&gt;src&lt;/code&gt;:</source>
          <target state="translated">そこにはgitの競合がないかにリベースした場合 &lt;code&gt;src/electron&lt;/code&gt; 、あなたは中止する必要があるかもしれません &lt;code&gt;git am&lt;/code&gt; 中に &lt;code&gt;src&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="41adaaf7621b67f42d66ba786ca7f6d40a727edc" translate="yes" xml:space="preserve">
          <source>If these are not present in your app's entitlements when you invoke, for example:</source>
          <target state="translated">たとえば、呼び出したときにこれらがアプリのエンタイトルメントに存在しない場合。</target>
        </trans-unit>
        <trans-unit id="0e029bfb7f6d5d31d74119f5385dfc1876480404" translate="yes" xml:space="preserve">
          <source>If this impacts you, you can temporarily set &lt;code&gt;app.allowRendererProcessReuse&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; to revert to the old behavior. This flag will only be an option until Electron 11 so you should plan to update your native modules to be context aware.</source>
          <target state="translated">これが影響する場合は、一時的に &lt;code&gt;app.allowRendererProcessReuse&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定して、古い動作に戻すことができます。このフラグはElectron11までのオプションであるため、コンテキストを意識するようにネイティブモジュールを更新することを計画する必要があります。</target>
        </trans-unit>
        <trans-unit id="45e7ea50ccb6720b475c6d32018899d97fd8d406" translate="yes" xml:space="preserve">
          <source>If you access &lt;a href=&quot;http://localhost:8088&quot;&gt;http://localhost:8088&lt;/a&gt; on your local machine you can monitor compile jobs as they flow through the goma system.</source>
          <target state="translated">ローカルマシンで&lt;a href=&quot;http://localhost:8088&quot;&gt;http：// localhost：8088&lt;/a&gt;にアクセスすると、gomaシステムを流れるコンパイルジョブを監視できます。</target>
        </trans-unit>
        <trans-unit id="e6f86e7d6a316512c338668077a47aabdfb66578" translate="yes" xml:space="preserve">
          <source>If you are a developer developing a native module and want to test it against Electron, you might want to rebuild the module for Electron manually. You can use &lt;code&gt;node-gyp&lt;/code&gt; directly to build for Electron:</source>
          <target state="translated">ネイティブモジュールを開発している開発者がElectronに対してテストする場合は、Electronのモジュールを手動で再構築することができます。 &lt;code&gt;node-gyp&lt;/code&gt; を直接使用して、Electronをビルドできます。</target>
        </trans-unit>
        <trans-unit id="49115902c75aef7b53bdb1f21224aac236275b01" translate="yes" xml:space="preserve">
          <source>If you are a maintainer and have access to our cluster, please ensure that you run &lt;code&gt;e init&lt;/code&gt; with &lt;code&gt;--goma=cluster&lt;/code&gt; in order to configure &lt;code&gt;build-tools&lt;/code&gt; to use the Goma cluster. If you have an existing config, you can just set &lt;code&gt;&quot;goma&quot;: &quot;cluster&quot;&lt;/code&gt; in your config file.</source>
          <target state="translated">あなたがメンテナであり、私たちのクラスタへのアクセス権を持っている場合は、あなたが実行していることを確認してください &lt;code&gt;e init&lt;/code&gt; と &lt;code&gt;--goma=cluster&lt;/code&gt; 構成しするために、 &lt;code&gt;build-tools&lt;/code&gt; ゴマクラスタを使用します。既存の設定がある場合は、設定ファイルに &lt;code&gt;&quot;goma&quot;: &quot;cluster&quot;&lt;/code&gt; を設定するだけです。</target>
        </trans-unit>
        <trans-unit id="3546e0934a49c0841002196b0423ec133b58edb9" translate="yes" xml:space="preserve">
          <source>If you are an experienced NW.js user, you should be familiar with the concept of Node context and web context. These concepts were invented because of how NW.js was implemented.</source>
          <target state="translated">NW.jsの経験者であれば、Node contextとWeb contextの概念に精通しているはずです。これらの概念は、NW.jsがどのように実装されていたかによって発明されました。</target>
        </trans-unit>
        <trans-unit id="f518771fd5cfe4822af6e39ccae8294353675f7b" translate="yes" xml:space="preserve">
          <source>If you are building an Electron app that you intend to package and distribute, it should be code signed. The Mac and Windows app stores do not allow unsigned apps.</source>
          <target state="translated">パッケージ化して配布する予定のElectronアプリを作成する場合は、コード署名されている必要があります。MacおよびWindowsのアプリストアでは、署名のないアプリは許可されていません。</target>
        </trans-unit>
        <trans-unit id="97f0e081f738233e6a12d3e89dc6709d9705e577" translate="yes" xml:space="preserve">
          <source>If you are building an Electron app that you intend to package and distribute, it should be code-signed.</source>
          <target state="translated">パッケージ化して配布する予定のElectronアプリを構築している場合は、コード署名されている必要があります。</target>
        </trans-unit>
        <trans-unit id="372e64afe8410fe3d2465d66f766d65bf0c095de" translate="yes" xml:space="preserve">
          <source>If you are following the &lt;code&gt;npm&lt;/code&gt; way of installing modules, then this is done by default, if not, you have to pass &lt;code&gt;--build-from-source&lt;/code&gt; to &lt;code&gt;npm&lt;/code&gt;, or set the &lt;code&gt;npm_config_build_from_source&lt;/code&gt; environment variable.</source>
          <target state="translated">モジュールをインストールする &lt;code&gt;npm&lt;/code&gt; の方法に従っている場合、これはデフォルトで行われます。そうでない場合は、 &lt;code&gt;--build-from-source&lt;/code&gt; &lt;code&gt;npm_config_build_from_source&lt;/code&gt; -from-sourceを &lt;code&gt;npm&lt;/code&gt; に渡すか、npm_config_build_from_source環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="2cfb529b6f7d16f1e4b79765a55450d85ee67a59" translate="yes" xml:space="preserve">
          <source>If you are new to app sandboxing under macOS, you should also read through Apple's &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html&quot;&gt;Enabling App Sandbox&lt;/a&gt; to have a basic idea, then add keys for the permissions needed by your app to the entitlements files.</source>
          <target state="translated">macOSでアプリのサンドボックスを初めて使用する場合は、Appleの「&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/Miscellaneous/Reference/EntitlementKeyReference/Chapters/EnablingAppSandbox.html&quot;&gt;アプリのサンドボックス&lt;/a&gt;を有効にする」を読んで基本的な考え方を理解し、アプリで必要な権限のキーをエンタイトルメントファイルに追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="f0b3f8b9ad9918ed70820f49feece7ddb02cf731" translate="yes" xml:space="preserve">
          <source>If you are not using &lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;build-tools&lt;/a&gt;, ensure that that name you have configured for your local build of Electron is one of &lt;code&gt;Testing&lt;/code&gt;, &lt;code&gt;Release&lt;/code&gt;, &lt;code&gt;Default&lt;/code&gt;, &lt;code&gt;Debug&lt;/code&gt;, or you have set &lt;code&gt;process.env.ELECTRON_OUT_DIR&lt;/code&gt;. Without these set, Electron will fail to perform some pre-testing steps.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/electron/build-tools&quot;&gt;build-tools&lt;/a&gt;を使用していない場合は、Electronのローカルビルド用に構成した名前が &lt;code&gt;Testing&lt;/code&gt; 、 &lt;code&gt;Release&lt;/code&gt; 、 &lt;code&gt;Default&lt;/code&gt; 、 &lt;code&gt;Debug&lt;/code&gt; のいずれかであるか、 &lt;code&gt;process.env.ELECTRON_OUT_DIR&lt;/code&gt; を設定していることを確認してください。これらの設定がないと、Electronはいくつかの事前テスト手順の実行に失敗します。</target>
        </trans-unit>
        <trans-unit id="03cf4ab71384adf8e5e662d0d5afa5788d1fca8c" translate="yes" xml:space="preserve">
          <source>If you are one of the many developers with a strong preference, know that virtually all code editors and IDEs these days support JavaScript.</source>
          <target state="translated">もしあなたが強い好みを持っている多くの開発者の一人であるならば、最近では事実上すべてのコードエディタや IDE が JavaScript をサポートしていることを知っておいてください。</target>
        </trans-unit>
        <trans-unit id="511ece18190383d8648593fd41d94edf88da2d63" translate="yes" xml:space="preserve">
          <source>If you are unable to access GitHub or you need to provide a custom build, you can do so by either providing a mirror or an existing cache directory.</source>
          <target state="translated">GitHub にアクセスできない場合やカスタムビルドを提供する必要がある場合は、ミラーや既存のキャッシュディレクトリを提供することで行うことができます。</target>
        </trans-unit>
        <trans-unit id="b718a7b2269d6aeeadc157ddb6619fbdfb0c4120" translate="yes" xml:space="preserve">
          <source>If you are updating tests and want to run a single spec to check it:</source>
          <target state="translated">テストを更新していて、1つの仕様を実行して確認したい場合。</target>
        </trans-unit>
        <trans-unit id="74e0ec616a5f2db0a595e964d3bee0948512b949" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../api/web-view&quot;&gt;&lt;code&gt;WebViews&lt;/code&gt;&lt;/a&gt;, you might need the pages and scripts loaded in your &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tag to open new windows. The &lt;code&gt;allowpopups&lt;/code&gt; attribute enables them to create new &lt;a href=&quot;../api/browser-window&quot;&gt;&lt;code&gt;BrowserWindows&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;window.open()&lt;/code&gt; method. &lt;code&gt;WebViews&lt;/code&gt; are otherwise not allowed to create new windows.</source>
          <target state="translated">使用している場合は&lt;a href=&quot;../api/web-view&quot;&gt; &lt;code&gt;WebViews&lt;/code&gt; を&lt;/a&gt;、あなたはあなたの中にロードされたページとスクリプトが必要になる場合があります &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; オープン新しいウィンドウにタグを。 &lt;code&gt;allowpopups&lt;/code&gt; の属性は、新規作成することを可能&lt;a href=&quot;../api/browser-window&quot;&gt; &lt;code&gt;BrowserWindows&lt;/code&gt; &lt;/a&gt;使用して &lt;code&gt;window.open()&lt;/code&gt; メソッドを。それ以外の場合、 &lt;code&gt;WebViews&lt;/code&gt; は新しいウィンドウを作成できません。</target>
        </trans-unit>
        <trans-unit id="b28d1a471531e27a0e67beca8afcb797c46bf343" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;../api/webview-tag&quot;&gt;&lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt;&lt;/a&gt;, you might need the pages and scripts loaded in your &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tag to open new windows. The &lt;code&gt;allowpopups&lt;/code&gt; attribute enables them to create new &lt;a href=&quot;../api/browser-window&quot;&gt;&lt;code&gt;BrowserWindows&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;window.open()&lt;/code&gt; method. &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tags are otherwise not allowed to create new windows.</source>
          <target state="translated">&lt;a href=&quot;../api/webview-tag&quot;&gt; &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; &lt;/a&gt;を使用している場合、新しいウィンドウを開くには、 &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; タグにページとスクリプトをロードする必要がある場合があります。 &lt;code&gt;allowpopups&lt;/code&gt; の属性は、新規作成することを可能&lt;a href=&quot;../api/browser-window&quot;&gt; &lt;code&gt;BrowserWindows&lt;/code&gt; &lt;/a&gt;使用して &lt;code&gt;window.open()&lt;/code&gt; メソッドを。それ以外の場合、 &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; タグで新しいウィンドウを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="b5161903d562f174b719944298b3ecbac6a1c316" translate="yes" xml:space="preserve">
          <source>If you are using &lt;a href=&quot;api/webview-tag&quot;&gt;&lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt;&lt;/a&gt;, you might need the pages and scripts loaded in your &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tag to open new windows. The &lt;code&gt;allowpopups&lt;/code&gt; attribute enables them to create new &lt;a href=&quot;api/browser-window&quot;&gt;&lt;code&gt;BrowserWindows&lt;/code&gt;&lt;/a&gt; using the &lt;code&gt;window.open()&lt;/code&gt; method. &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tags are otherwise not allowed to create new windows.</source>
          <target state="translated">&lt;a href=&quot;api/webview-tag&quot;&gt; &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; &lt;/a&gt;を使用している場合、新しいウィンドウを開くには、 &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; タグにページとスクリプトをロードする必要がある場合があります。 &lt;code&gt;allowpopups&lt;/code&gt; の属性は、新規作成することを可能&lt;a href=&quot;api/browser-window&quot;&gt; &lt;code&gt;BrowserWindows&lt;/code&gt; &lt;/a&gt;使用して &lt;code&gt;window.open()&lt;/code&gt; メソッドを。それ以外の場合、 &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; タグで新しいウィンドウを作成することはできません。</target>
        </trans-unit>
        <trans-unit id="debc2e94eac4ca97e2e31778bad9a6ac9e1e229c" translate="yes" xml:space="preserve">
          <source>If you are using Python as provided by Homebrew, you also need to install the following Python modules:</source>
          <target state="translated">Homebrewが提供するPythonを使用している場合は、以下のPythonモジュールもインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="80fc6f9726825bf77f66d4a114a758748f0e0bf6" translate="yes" xml:space="preserve">
          <source>If you are using editor supports &lt;a href=&quot;http://clang.llvm.org/docs/JSONCompilationDatabase.html&quot;&gt;JSON compilation database&lt;/a&gt; based language server, you can generate it:</source>
          <target state="translated">エディターを使用して&lt;a href=&quot;http://clang.llvm.org/docs/JSONCompilationDatabase.html&quot;&gt;JSONコンパイルデータベース&lt;/a&gt;ベースの言語サーバーをサポートしている場合は、それを生成できます。</target>
        </trans-unit>
        <trans-unit id="8e963bbebca819cdbe96d82ab1123fe0801d2967" translate="yes" xml:space="preserve">
          <source>If you believe that you have found a bug in Electron, please fill out the template to the best of your ability.</source>
          <target state="translated">エレクトロンのバグを発見したと思われる場合は、可能な限りテンプレートにご記入ください。</target>
        </trans-unit>
        <trans-unit id="f0743e84e5a23466f35691c6aa8c710c8f0896bd" translate="yes" xml:space="preserve">
          <source>If you believe that you have found a bug in Electron, please fill out this form to the best of your ability.</source>
          <target state="translated">エレクトロンのバグを発見したと思われる方は、このフォームに可能な限りのご記入をお願いします。</target>
        </trans-unit>
        <trans-unit id="0d1f21c92cfe0a6c7ef64ca363457616064abf36" translate="yes" xml:space="preserve">
          <source>If you cannot disable the &lt;code&gt;remote&lt;/code&gt; module, you should filter the globals, Node, and Electron modules (so-called built-ins) accessible via &lt;code&gt;remote&lt;/code&gt; that your application does not require. This can be done by blocking certain modules entirely and by replacing others with proxies that expose only the functionality that your app needs.</source>
          <target state="translated">&lt;code&gt;remote&lt;/code&gt; モジュールを無効にできない場合は、アプリケーションが必要としない、 &lt;code&gt;remote&lt;/code&gt; 経由でアクセス可能なグローバル、ノード、およびエレクトロンモジュール（いわゆるビルトイン）をフィルタリングする必要があります。これは、特定のモジュールを完全にブロックし、他のモジュールを、アプリに必要な機能のみを公開するプロキシに置き換えることで実行できます。</target>
        </trans-unit>
        <trans-unit id="2c464ba2442537db7f0883a14d30c8fd64d00801" translate="yes" xml:space="preserve">
          <source>If you click &lt;code&gt;Help&lt;/code&gt; or press the defined accelerator and then open the terminal that you ran your Electron application from, you will see the message that was generated after triggering the &lt;code&gt;click&lt;/code&gt; event: &quot;Electron rocks!&quot;.</source>
          <target state="translated">[ &lt;code&gt;Help&lt;/code&gt; ]をクリックするか、定義済みのアクセラレータを押してから、Electronアプリケーションを実行したターミナルを開くと、 &lt;code&gt;click&lt;/code&gt; イベントをトリガーした後に生成されたメッセージ「Electronrocks！」が表示されます。</target>
        </trans-unit>
        <trans-unit id="04ed95949f9fc3a03f546e9a18f26b5b78dac1cb" translate="yes" xml:space="preserve">
          <source>If you do not already have a &lt;code&gt;.deb&lt;/code&gt; package, using &lt;code&gt;electron-installer-snap&lt;/code&gt; might be an easier path to create snap packages. However, multiple solutions for creating Debian packages exist, including &lt;a href=&quot;https://github.com/electron-userland/electron-forge&quot;&gt;&lt;code&gt;electron-forge&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt;&lt;code&gt;electron-builder&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/unindented/electron-installer-debian&quot;&gt;&lt;code&gt;electron-installer-debian&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;code&gt;.deb&lt;/code&gt; パッケージをまだ持っていない場合は、 &lt;code&gt;electron-installer-snap&lt;/code&gt; を使用する方が、snapパッケージを作成するためのより簡単な方法になる可能性があります。ただし、&lt;a href=&quot;https://github.com/electron-userland/electron-forge&quot;&gt; &lt;code&gt;electron-forge&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt; &lt;code&gt;electron-builder&lt;/code&gt; 、&lt;/a&gt;または&lt;a href=&quot;https://github.com/unindented/electron-installer-debian&quot;&gt; &lt;code&gt;electron-installer-debian&lt;/code&gt; &lt;/a&gt;など、Debianパッケージを作成するための複数のソリューションが存在します。</target>
        </trans-unit>
        <trans-unit id="61c4fcc639c2347d0ac3c19e17cd07322003d4c5" translate="yes" xml:space="preserve">
          <source>If you do not need a response to the message, consider using &lt;a href=&quot;#ipcrenderersendchannel-args&quot;&gt;&lt;code&gt;ipcRenderer.send&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メッセージへの応答が必要ない場合は、&lt;a href=&quot;#ipcrenderersendchannel-args&quot;&gt; &lt;code&gt;ipcRenderer.send&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="dae223953c408d185a172c63bf31851f299204f8" translate="yes" xml:space="preserve">
          <source>If you do not need popups, you are better off not allowing the creation of new &lt;a href=&quot;../api/browser-window&quot;&gt;&lt;code&gt;BrowserWindows&lt;/code&gt;&lt;/a&gt; by default. This follows the principle of minimally required access: Don't let a website create new popups unless you know it needs that feature.</source>
          <target state="translated">ポップアップが必要ない場合は、デフォルトで新しい&lt;a href=&quot;../api/browser-window&quot;&gt; &lt;code&gt;BrowserWindows&lt;/code&gt; &lt;/a&gt;の作成を許可しない方がよいでしょう。これは、最小限必要なアクセスの原則に従います。その機能が必要であることがわかっている場合を除き、Webサイトに新しいポップアップを作成させないでください。</target>
        </trans-unit>
        <trans-unit id="1787986385964b5b499de8bb40a5580e8c570902" translate="yes" xml:space="preserve">
          <source>If you do not need popups, you are better off not allowing the creation of new &lt;a href=&quot;api/browser-window&quot;&gt;&lt;code&gt;BrowserWindows&lt;/code&gt;&lt;/a&gt; by default. This follows the principle of minimally required access: Don't let a website create new popups unless you know it needs that feature.</source>
          <target state="translated">ポップアップが必要ない場合は、デフォルトで新しい&lt;a href=&quot;api/browser-window&quot;&gt; &lt;code&gt;BrowserWindows&lt;/code&gt; &lt;/a&gt;の作成を許可しない方がよいでしょう。これは、最小限必要なアクセスの原則に従います。その機能が必要であることがわかっている場合を除いて、Webサイトに新しいポップアップを作成させないでください。</target>
        </trans-unit>
        <trans-unit id="17ca2154e7a651f9f4580eef9e3684e7990f9e09" translate="yes" xml:space="preserve">
          <source>If you do not set &lt;code&gt;credits&lt;/code&gt; but still wish to surface them in your app, AppKit will look for a file named &quot;Credits.html&quot;, &quot;Credits.rtf&quot;, and &quot;Credits.rtfd&quot;, in that order, in the bundle returned by the NSBundle class method main. The first file found is used, and if none is found, the info area is left blank. See Apple &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsaboutpaneloptioncredits?language=objc&quot;&gt;documentation&lt;/a&gt; for more information.</source>
          <target state="translated">&lt;code&gt;credits&lt;/code&gt; 設定せずにアプリに表示したい場合、AppKitは、返されたバンドル内で「Credits.html」、「Credits.rtf」、「Credits.rtfd」という名前のファイルをこの順序で検索します。 NSBundleクラスメソッドmainによる。最初に見つかったファイルが使用され、何も見つからない場合、情報領域は空白のままになります。詳細については、Appleの&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nsaboutpaneloptioncredits?language=objc&quot;&gt;ドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="75e742cb1e3b85a399839264fcadf6ad1ed680a7" translate="yes" xml:space="preserve">
          <source>If you do not subscribe to this event and all windows are closed, the default behavior is to quit the app; however, if you subscribe, you control whether the app quits or not. If the user pressed &lt;code&gt;Cmd + Q&lt;/code&gt;, or the developer called &lt;code&gt;app.quit()&lt;/code&gt;, Electron will first try to close all the windows and then emit the &lt;code&gt;will-quit&lt;/code&gt; event, and in this case the &lt;code&gt;window-all-closed&lt;/code&gt; event would not be emitted.</source>
          <target state="translated">このイベントをサブスクライブせず、すべてのウィンドウが閉じている場合、デフォルトの動作はアプリを終了することです。ただし、サブスクライブする場合は、アプリを終了するかどうかを制御します。ユーザーが &lt;code&gt;Cmd + Q&lt;/code&gt; 押すか、開発者が &lt;code&gt;app.quit()&lt;/code&gt; を呼び出した場合、Electronは最初にすべてのウィンドウを閉じてから、 &lt;code&gt;will-quit&lt;/code&gt; イベントを発行し &lt;code&gt;window-all-closed&lt;/code&gt; この場合、window-all-closedイベントは発生しません。放出された。</target>
        </trans-unit>
        <trans-unit id="5d0f3f38792a28a4c020dd49aaa3a70bf46349b1" translate="yes" xml:space="preserve">
          <source>If you don't currently have a Windows installation, &lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;dev.microsoftedge.com&lt;/a&gt; has timebombed versions of Windows that you can use to build Electron.</source>
          <target state="translated">現在Windowsがインストールされていない場合は、&lt;a href=&quot;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&quot;&gt;dev.microsoftedge.comに&lt;/a&gt; Electronのビルドに使用できるWindowsの時限爆弾バージョンがあります。</target>
        </trans-unit>
        <trans-unit id="7c78880b2801eaeed7ce1f2cc4299bfdc75ef332" translate="yes" xml:space="preserve">
          <source>If you don't want any tools but only a solid boilerplate to build from, CT Lin's &lt;a href=&quot;https://github.com/chentsulin/electron-react-boilerplate&quot;&gt;&lt;code&gt;electron-react-boilerplate&lt;/code&gt;&lt;/a&gt; might be worth a look. It's quite popular in the community and uses &lt;code&gt;electron-builder&lt;/code&gt; internally.</source>
          <target state="translated">ツールを必要とせず、固体のボイラープレートだけを作成する場合は、CT Linの&lt;a href=&quot;https://github.com/chentsulin/electron-react-boilerplate&quot;&gt; &lt;code&gt;electron-react-boilerplate&lt;/code&gt; &lt;/a&gt;は一見の価値があります。これはコミュニティで非常に人気があり、内部で &lt;code&gt;electron-builder&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="c2d2d4069ba374557cc5e36c5e853eb18c112d2e" translate="yes" xml:space="preserve">
          <source>If you don't want to do manual shortcut parsing there are libraries that do advanced key detection such as &lt;a href=&quot;https://github.com/ccampbell/mousetrap&quot;&gt;mousetrap&lt;/a&gt;.</source>
          <target state="translated">手動のショートカット解析を行いたくない場合は、&lt;a href=&quot;https://github.com/ccampbell/mousetrap&quot;&gt;mousetrap&lt;/a&gt;などの高度なキー検出を行うライブラリがあります。</target>
        </trans-unit>
        <trans-unit id="730a8bacfbbaf464f8c72e5cc1b5310549e38196" translate="yes" xml:space="preserve">
          <source>If you don't want to do manual shortcut parsing, there are libraries that do advanced key detection, such as &lt;a href=&quot;https://github.com/ccampbell/mousetrap&quot;&gt;mousetrap&lt;/a&gt;. Below are examples of usage of the &lt;code&gt;mousetrap&lt;/code&gt; running in the Renderer process:</source>
          <target state="translated">手動のショートカット解析を行いたくない場合は、&lt;a href=&quot;https://github.com/ccampbell/mousetrap&quot;&gt;ネズミ捕り&lt;/a&gt;などの高度なキー検出を行うライブラリがあります。以下は、レンダラープロセスで実行されている &lt;code&gt;mousetrap&lt;/code&gt; の使用例です。</target>
        </trans-unit>
        <trans-unit id="6e2c37f59119cfb703651a8895ab5775e299cf90" translate="yes" xml:space="preserve">
          <source>If you encounter a problem with this documentation, or if your app works when compiled for x86 but not for arm64, please &lt;a href=&quot;../development/issues&quot;&gt;file an issue&lt;/a&gt; with &quot;Windows on Arm&quot; in the title.</source>
          <target state="translated">このドキュメントで問題が発生した場合、またはアプリがx86用にコンパイルされたときに動作するがarm64用には動作しない場合は、タイトルの「WindowsonArm 」で&lt;a href=&quot;../development/issues&quot;&gt;問題&lt;/a&gt;を報告してください。</target>
        </trans-unit>
        <trans-unit id="23760b9083d657587a0a29a01b29a3fef89834ea" translate="yes" xml:space="preserve">
          <source>If you encounter a problem with this documentation, or if your app works when compiled for x86 but not for arm64, please &lt;a href=&quot;development/issues&quot;&gt;file an issue&lt;/a&gt; with &quot;Windows on Arm&quot; in the title.</source>
          <target state="translated">このドキュメントで問題が発生した場合、またはアプリがx86用にコンパイルされたときに動作するがarm64用には動作しない場合は、タイトルの「WindowsonArm 」で&lt;a href=&quot;development/issues&quot;&gt;問題&lt;/a&gt;を報告してください。</target>
        </trans-unit>
        <trans-unit id="1634a77e4ab54136589ef244b5dfae0ea6e1af51" translate="yes" xml:space="preserve">
          <source>If you encounter this problem, the following articles may prove helpful:</source>
          <target state="translated">この問題に遭遇した場合は、以下の記事が参考になるかもしれません。</target>
        </trans-unit>
        <trans-unit id="7d3538dfb360b356c09289f91591872a5d74f7fc" translate="yes" xml:space="preserve">
          <source>If you encountered an error like &lt;code&gt;Command xxxx not found&lt;/code&gt;, you may try to use the &lt;code&gt;VS2015 Command Prompt&lt;/code&gt; console to execute the build scripts.</source>
          <target state="translated">&lt;code&gt;Command xxxx not found&lt;/code&gt; などのエラーが発生した場合は、 &lt;code&gt;VS2015 Command Prompt&lt;/code&gt; コンソールを使用してビルドスクリプトを実行してみてください。</target>
        </trans-unit>
        <trans-unit id="3595e2ec6842f8df110a7a6f959fa86d9077fff8" translate="yes" xml:space="preserve">
          <source>If you experience crashes or issues in Electron that you believe are not caused by your JavaScript application, but instead by Electron itself, debugging can be a little bit tricky, especially for developers not used to native/C++ debugging. However, using Visual Studio, Electron's hosted Symbol Server, and the Electron source code, you can enable step-through debugging with breakpoints inside Electron's source code.</source>
          <target state="translated">JavaScriptアプリケーションではなく、Electron自体に原因があると思われるクラッシュや問題が発生した場合、特にネイティブ/C++デバッグに慣れていない開発者にとって、デバッグは少し厄介なものになります。しかし、Visual Studio、ElectronのホストされているSymbol Server、およびElectronのソースコードを使用することで、Electronのソースコード内のブレークポイントを使ってステップスルーデバッグを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="76da07e932527a6117c3a56371ba3e3878b1de65" translate="yes" xml:space="preserve">
          <source>If you experience crashes or issues in Electron that you believe are not caused by your JavaScript application, but instead by Electron itself, debugging can be a little bit tricky, especially for developers not used to native/C++ debugging. However, using Visual Studio, GitHub's hosted Electron Symbol Server, and the Electron source code, you can enable step-through debugging with breakpoints inside Electron's source code.</source>
          <target state="translated">Electronでクラッシュや問題が発生した場合、それがJavaScriptアプリケーションに原因があるのではなく、Electron自体に原因があると思われる場合、特にネイティブ/C++デバッグに慣れていない開発者にとっては、デバッグは少し厄介なものになります。しかし、Visual Studio、GitHubがホストするElectron Symbol Server、およびElectronのソースコードを使用することで、Electronのソースコード内のブレークポイントを使ってステップスルーデバッグを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="ea02dd04609c3e21d8286b42c8f5b437dc845f82" translate="yes" xml:space="preserve">
          <source>If you experience crashes or issues in Electron that you believe are not caused by your JavaScript application, but instead by Electron itself, debugging can be a little bit tricky, especially for developers not used to native/C++ debugging. However, using lldb, and the Electron source code, you can enable step-through debugging with breakpoints inside Electron's source code. You can also use &lt;a href=&quot;debugging-instructions-macos-xcode&quot;&gt;XCode for debugging&lt;/a&gt; if you prefer a graphical interface.</source>
          <target state="translated">JavaScriptアプリケーションではなくエレクトロン自体が原因であると思われるクラッシュまたはエレクトロンの問題が発生した場合、ネイティブ/ C ++デバッグに慣れていない開発者にとって、デバッグは少し難しいかもしれません。ただし、lldbとElectronソースコードを使用すると、Electronのソースコード内のブレークポイントを使用してステップスルーデバッグを有効にできます。グラフィカルインターフェイスが必要な場合は&lt;a href=&quot;debugging-instructions-macos-xcode&quot;&gt;、デバッグにXCodeを&lt;/a&gt;使用することもできます。</target>
        </trans-unit>
        <trans-unit id="e36764f2b3bedf628cf3e94d4618a408cd75d8ad" translate="yes" xml:space="preserve">
          <source>If you experience crashes or issues in Electron that you believe are not caused by your JavaScript application, but instead by Electron itself, debugging can be a little bit tricky, especially for developers not used to native/C++ debugging. However, using lldb, and the Electron source code, you can enable step-through debugging with breakpoints inside Electron's source code. You can also use &lt;a href=&quot;development/debugging-instructions-macos-xcode&quot;&gt;XCode for debugging&lt;/a&gt; if you prefer a graphical interface.</source>
          <target state="translated">JavaScriptアプリケーションではなく、Electron自体が原因であると思われるクラッシュや問題がエレクトロンで発生した場合、特にネイティブ/ C ++デバッグに慣れていない開発者にとって、デバッグは少し注意が必要です。ただし、lldbとElectronソースコードを使用すると、Electronのソースコード内にブレークポイントを設定してステップスルーデバッグを有効にできます。グラフィカルインターフェイスが必要な場合は&lt;a href=&quot;development/debugging-instructions-macos-xcode&quot;&gt;、デバッグにXCodeを&lt;/a&gt;使用することもできます。</target>
        </trans-unit>
        <trans-unit id="f1171b325559215ec56cc0828283ad57319637d7" translate="yes" xml:space="preserve">
          <source>If you find yourself in the unfortunate position of having to make a change which can only be made through patching an upstream project, you'll need to know how to manage patches in Electron.</source>
          <target state="translated">アップストリームプロジェクトにパッチを当てなければならない変更をしなければならないという不幸な状況に陥った場合、Electronでパッチを管理する方法を知っておく必要があります。</target>
        </trans-unit>
        <trans-unit id="fda1e9a41486e8e36fc4cac6397fc3739cf7ace7" translate="yes" xml:space="preserve">
          <source>If you find yourself running this command often, you can create an alias for it in your &lt;code&gt;~/.gitconfig&lt;/code&gt; file:</source>
          <target state="translated">このコマンドを頻繁に実行している場合は、 &lt;code&gt;~/.gitconfig&lt;/code&gt; ファイルにコマンドのエイリアスを作成できます。</target>
        </trans-unit>
        <trans-unit id="729626f04053461aa92f6cfc4ef0e70943479a8f" translate="yes" xml:space="preserve">
          <source>If you get an error like &lt;code&gt;Module did not self-register&lt;/code&gt;, or &lt;code&gt;The specified procedure could not be found&lt;/code&gt;, it may mean that the module you're trying to use did not correctly include the delay-load hook. If the module is built with node-gyp, ensure that the &lt;code&gt;win_delay_load_hook&lt;/code&gt; variable is set to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;binding.gyp&lt;/code&gt; file, and isn't getting overridden anywhere. If the module is built with another system, you'll need to ensure that you build with a delay-load hook installed in the main &lt;code&gt;.node&lt;/code&gt; file. Your &lt;code&gt;link.exe&lt;/code&gt; invocation should look like this:</source>
          <target state="translated">&lt;code&gt;Module did not self-register&lt;/code&gt; 、または &lt;code&gt;The specified procedure could not be found&lt;/code&gt; なかったなどのエラーが発生した場合は、使用しようとしているモジュールにdelay-loadフックが正しく含まれていない可能性があります。モジュールがnode-gypで構築されている &lt;code&gt;true&lt;/code&gt; は、 &lt;code&gt;binding.gyp&lt;/code&gt; ファイルで &lt;code&gt;win_delay_load_hook&lt;/code&gt; 変数がtrueに設定されており、どこでもオーバーライドされていないことを確認してください。モジュールが別のシステムでビルドされている場合は、メインの &lt;code&gt;.node&lt;/code&gt; ファイルにdelay-loadフックがインストールされていることを確認する必要があります。あなたの &lt;code&gt;link.exe&lt;/code&gt; 呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="6caaa6701c1bb5c365b0ebd072bb25957e2e71a2" translate="yes" xml:space="preserve">
          <source>If you have a known set of windows, it's a good idea to limit the creation of additional windows in your app.</source>
          <target state="translated">ウィンドウのセットがわかっている場合は、アプリ内での追加ウィンドウの作成を制限するのが良いでしょう。</target>
        </trans-unit>
        <trans-unit id="977cfcf861c658c441dcec6fe519ad85a7fcbd6c" translate="yes" xml:space="preserve">
          <source>If you have a security concern, please see the &lt;a href=&quot;https://electronjs.org/SECURITY&quot;&gt;security document&lt;/a&gt;.</source>
          <target state="translated">セキュリティ上の懸念がある場合は、セキュリティに関する&lt;a href=&quot;https://electronjs.org/SECURITY&quot;&gt;ドキュメント&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="e244a06f0d682e212b64b6fdbe33b66b8cc2cd2f" translate="yes" xml:space="preserve">
          <source>If you have a security concern, please see the &lt;a href=&quot;https://github.com/electron/electron/tree/master/SECURITY.md&quot;&gt;security document&lt;/a&gt;.</source>
          <target state="translated">セキュリティ上の懸念がある場合は、&lt;a href=&quot;https://github.com/electron/electron/tree/master/SECURITY.md&quot;&gt;セキュリティドキュメント&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="90986c2e6ef30ce59319ba1048589dd7c4ace399" translate="yes" xml:space="preserve">
          <source>If you have an existing build pipeline, you can use &lt;code&gt;electron-installer-snap&lt;/code&gt; programmatically. For more information, see the &lt;a href=&quot;https://docs.snapcraft.io/build-snaps/syntax&quot;&gt;Snapcraft API docs&lt;/a&gt;.</source>
          <target state="translated">既存のビルドパイプラインがある場合は、 &lt;code&gt;electron-installer-snap&lt;/code&gt; をプログラムで使用できます。詳細については、&lt;a href=&quot;https://docs.snapcraft.io/build-snaps/syntax&quot;&gt;Snapcraft APIのドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a6f88582221de280004c045b340f35f801e9a46e" translate="yes" xml:space="preserve">
          <source>If you have expensive setup operations, consider deferring those. Inspect all the work being executed right after the application starts. Instead of firing off all operations right away, consider staggering them in a sequence more closely aligned with the user's journey.</source>
          <target state="translated">高価なセットアップ作業がある場合は、それを延期することを検討してください。アプリケーションの起動直後に実行されているすべての作業を確認してください。すべての操作をすぐに実行するのではなく、ユーザーの移動に合わせて順序をずらして実行することを検討してください。</target>
        </trans-unit>
        <trans-unit id="e9dd61e326667f41af614721259e6dba815d5abe" translate="yes" xml:space="preserve">
          <source>If you have libcc built on your machine in its own repo, tell Electron to use it:</source>
          <target state="translated">マシン上に libcc を構築している場合は、Electron にそれを使うように指示してください。</target>
        </trans-unit>
        <trans-unit id="b9451ff4b171f5e826b90ddca819cb5ae01298c9" translate="yes" xml:space="preserve">
          <source>If you have no need to create windows in addition to the ones you know you'll need to create, disabling the creation buys you a little bit of extra security at no cost. This is commonly the case for apps that open one &lt;code&gt;BrowserWindow&lt;/code&gt; and do not need to open an arbitrary number of additional windows at runtime.</source>
          <target state="translated">作成する必要があることがわかっているウィンドウに加えてウィンドウを作成する必要がない場合は、作成を無効にすると、無料でセキュリティが少し強化されます。これは通常、1つの &lt;code&gt;BrowserWindow&lt;/code&gt; を開き、実行時に任意の数の追加ウィンドウを開く必要がないアプリの場合です。</target>
        </trans-unit>
        <trans-unit id="eccf94d9d65934fc068a168b1624f831893d9ff6" translate="yes" xml:space="preserve">
          <source>If you haven't already, you&amp;rsquo;ll need to sign the Paid Applications Agreement and set up your banking and tax information in iTunes Connect.</source>
          <target state="translated">まだの場合は、有料アプリケーション契約に署名し、iTunes Connectで銀行情報と税務情報を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6edde71923d9748cba71b225bd9e64e0b494c180" translate="yes" xml:space="preserve">
          <source>If you haven't yet built libcc but it's already supposed to be upgraded to a new Chromium, bootstrap Electron as usual &lt;code&gt;$ ./script/bootstrap.py -v&lt;/code&gt;</source>
          <target state="translated">libccをまだビルドしていないが、新しいChromiumにアップグレードすることになっている場合は、Electronを通常どおりブートストラップします &lt;code&gt;$ ./script/bootstrap.py -v&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="085847f31a461d6e1ddd1ea7a20e15c8719731d9" translate="yes" xml:space="preserve">
          <source>If you installed a native module and found it was not working, you need to check following things:</source>
          <target state="translated">ネイティブモジュールをインストールしても動作しない場合は、以下のことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="744fad50f9edce40f3137bc907446af3946e2d7a" translate="yes" xml:space="preserve">
          <source>If you installed a native module and found it was not working, you need to check the following things:</source>
          <target state="translated">ネイティブモジュールをインストールしてみて、動作しないことがわかった場合は、以下のことを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="862fd233566c698b5d3c7d3252812c38e06fbc82" translate="yes" xml:space="preserve">
          <source>If you intend to &lt;code&gt;git pull&lt;/code&gt; or &lt;code&gt;git push&lt;/code&gt; from the official &lt;code&gt;electron&lt;/code&gt; repository in the future, you now need to update the respective folder's origin URLs.</source>
          <target state="translated">あなたがしたい場合 &lt;code&gt;git pull&lt;/code&gt; または &lt;code&gt;git push&lt;/code&gt; 公式から &lt;code&gt;electron&lt;/code&gt; 将来のリポジトリ、あなたは今、それぞれのフォルダの原点のURLを更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="7118d24a866d3a9a6e79ed6be1e457ffad2d3d88" translate="yes" xml:space="preserve">
          <source>If you know of other great accessibility tools for Electron, add them to the accessibility documentation with a pull request.</source>
          <target state="translated">他にもElectron用の優れたアクセシビリティツールをご存知でしたら、プルリクエストでアクセシビリティドキュメントに追加してください。</target>
        </trans-unit>
        <trans-unit id="52d812014ac06ca7d290314b0daf6918fd02d885" translate="yes" xml:space="preserve">
          <source>If you need the entire &lt;code&gt;electron&lt;/code&gt; module, you can require it and then using destructuring to access the individual modules from &lt;code&gt;electron&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;electron&lt;/code&gt; モジュール全体が必要な場合は、それを要求してから、構造化を使用して &lt;code&gt;electron&lt;/code&gt; から個々のモジュールにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="13f9e4e0c8e8e4ed90e08b42600091d977f0e2ed" translate="yes" xml:space="preserve">
          <source>If you need to customize your configuration, you can &lt;a href=&quot;https://github.com/electron/update-electron-app&quot;&gt;pass options to &lt;code&gt;update-electron-app&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;https://github.com/electron/update.electronjs.org&quot;&gt;use the update service directly&lt;/a&gt;.</source>
          <target state="translated">設定をカスタマイズする必要がある場合は、&lt;a href=&quot;https://github.com/electron/update-electron-app&quot;&gt;オプションを &lt;code&gt;update-electron-app&lt;/code&gt; に&lt;/a&gt;渡すか&lt;a href=&quot;https://github.com/electron/update.electronjs.org&quot;&gt;、更新サービスを直接使用できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="476bf4b37d10e866176315b603d648667b556ae6" translate="yes" xml:space="preserve">
          <source>If you need to force a re-download of the asset and the SHASUM file set the &lt;code&gt;force_no_cache&lt;/code&gt; environment variable to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">アセットとSHASUMファイルの再ダウンロードを強制する必要がある場合は、 &lt;code&gt;force_no_cache&lt;/code&gt; 環境変数を &lt;code&gt;true&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="5862300ccd0c3e98db2dcc5d2da273c4be2b2485" translate="yes" xml:space="preserve">
          <source>If you need to mix sandboxed and non-sandboxed renderers in one application, simply omit the &lt;code&gt;--enable-sandbox&lt;/code&gt; argument. Without this argument, windows created with &lt;code&gt;sandbox: true&lt;/code&gt; will still have node.js disabled and communicate only via IPC, which by itself is already a gain from security POV.</source>
          <target state="translated">サンドボックス化されたレンダラーとサンドボックス化されていないレンダラーを1つのアプリケーションに混在させる必要がある場合は、 &lt;code&gt;--enable-sandbox&lt;/code&gt; 引数を省略します。この引数がないと、 &lt;code&gt;sandbox: true&lt;/code&gt; 作成されたウィンドウは引き続きnode.jsが無効になり、IPCを介してのみ通信します。</target>
        </trans-unit>
        <trans-unit id="4e5d3e00b1acf57a3dfb7ccb824bbb30a89ca407" translate="yes" xml:space="preserve">
          <source>If you need to transfer a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt; to the main process, use &lt;a href=&quot;#ipcrendererpostmessagechannel-message-transfer&quot;&gt;&lt;code&gt;ipcRenderer.postMessage&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/MessagePort&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;をメインプロセスに転送する必要がある場合は、&lt;a href=&quot;#ipcrendererpostmessagechannel-message-transfer&quot;&gt; &lt;code&gt;ipcRenderer.postMessage&lt;/code&gt; を&lt;/a&gt;使用してください。</target>
        </trans-unit>
        <trans-unit id="629e945de9624fcccddb1992beb1d4c29daab014" translate="yes" xml:space="preserve">
          <source>If you need to use an HTTP proxy you can &lt;a href=&quot;https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables&quot;&gt;set these environment variables&lt;/a&gt;.</source>
          <target state="translated">HTTPプロキシを使用する必要がある場合は、&lt;a href=&quot;https://github.com/request/request/tree/f0c4ec061141051988d1216c24936ad2e7d5c45d#controlling-proxy-behaviour-using-environment-variables&quot;&gt;これらの環境変数を設定&lt;/a&gt;できます。</target>
        </trans-unit>
        <trans-unit id="916072759272af9ebfcc73cf18bfe5d4af43e141" translate="yes" xml:space="preserve">
          <source>If you need to use an HTTP proxy, you need to set the &lt;code&gt;ELECTRON_GET_USE_PROXY&lt;/code&gt; variable to any value, plus additional environment variables depending on your host system's Node version:</source>
          <target state="translated">HTTPプロキシを使用する必要がある場合は、 &lt;code&gt;ELECTRON_GET_USE_PROXY&lt;/code&gt; 変数を任意の値に設定し、さらにホストシステムのノードバージョンに応じて追加の環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="792716b5a2b850708663c8f195d92cab5976c508" translate="yes" xml:space="preserve">
          <source>If you only want to build Electron quickly for testing or development, you can download the shared library versions by passing the &lt;code&gt;--dev&lt;/code&gt; parameter:</source>
          <target state="translated">テストまたは開発のためにElectronをすばやくビルドするだけの場合は、 &lt;code&gt;--dev&lt;/code&gt; パラメータを渡して共有ライブラリのバージョンをダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="2a0675074e37c9f1201aade7c2b3243a6fbfeea2" translate="yes" xml:space="preserve">
          <source>If you open the Console and then click the notification, you will see the message that was generated after triggering the &lt;code&gt;onclick&lt;/code&gt; event:</source>
          <target state="translated">コンソールを開いて通知をクリックすると、 &lt;code&gt;onclick&lt;/code&gt; イベントをトリガーした後に生成されたメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="c91705c98998332219bba13da150b72386da10cf" translate="yes" xml:space="preserve">
          <source>If you plan on checking out Electron more than once (for example, to have multiple parallel directories checked out to different branches), using the git cache will speed up subsequent calls to &lt;code&gt;gclient&lt;/code&gt;. To do this, set a &lt;code&gt;GIT_CACHE_PATH&lt;/code&gt; environment variable:</source>
          <target state="translated">Electronを複数回チェックアウトする予定の場合（たとえば、複数の並列ディレクトリを異なるブランチにチェックアウトする場合）、gitキャッシュを使用すると、 &lt;code&gt;gclient&lt;/code&gt; への後続の呼び出しが高速化されます。これを行うには、 &lt;code&gt;GIT_CACHE_PATH&lt;/code&gt; 環境変数を設定します。</target>
        </trans-unit>
        <trans-unit id="31e865bf17672f9c0bcddb4825f65867f344cad4" translate="yes" xml:space="preserve">
          <source>If you plan to access the microphone or camera within your app using Electron's APIs, you'll also need to add the following entitlements:</source>
          <target state="translated">ElectronのAPIを使用してアプリ内のマイクやカメラにアクセスする場合は、次の権限を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="2d7d40dcd0ee25b28e3d79e5292f1b6c52000d40" translate="yes" xml:space="preserve">
          <source>If you provided &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; options to &lt;code&gt;app.setLoginItemSettings&lt;/code&gt; then you need to pass the same arguments here for &lt;code&gt;openAtLogin&lt;/code&gt; to be set correctly.</source>
          <target state="translated">&lt;code&gt;app.setLoginItemSettings&lt;/code&gt; に &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;args&lt;/code&gt; オプションを提供した場合、 &lt;code&gt;openAtLogin&lt;/code&gt; を正しく設定するには、ここで同じ引数を渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9cdbfca2d06cca9079a13a154e2b80fd157b62f0" translate="yes" xml:space="preserve">
          <source>If you provided &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;args&lt;/code&gt; options to &lt;code&gt;app.setLoginItemSettings&lt;/code&gt;, then you need to pass the same arguments here for &lt;code&gt;openAtLogin&lt;/code&gt; to be set correctly.</source>
          <target state="translated">あなたが提供されている場合 &lt;code&gt;path&lt;/code&gt; と &lt;code&gt;args&lt;/code&gt; にオプションを &lt;code&gt;app.setLoginItemSettings&lt;/code&gt; 、あなたはのためにここに同じ引数を渡す必要があり &lt;code&gt;openAtLogin&lt;/code&gt; 正しく設定します。</target>
        </trans-unit>
        <trans-unit id="6a4e5f7678d709e4dcef1c6fdccd006e98d7006a" translate="yes" xml:space="preserve">
          <source>If you run your code at this point, you'll see that your buttons don't do anything just yet, and your Main process will output an error like this when you click on your buttons: &lt;code&gt;Error occurred in handler for 'dark-mode:toggle': No handler registered for 'dark-mode:toggle'&lt;/code&gt; This is expected &amp;mdash; we haven't actually touched any &lt;code&gt;nativeTheme&lt;/code&gt; code yet.</source>
          <target state="translated">この時点でコードを実行すると、ボタンがまだ何もしていないことがわかります。ボタンをクリックすると、メインプロセスは次のようなエラーを出力します。 &lt;code&gt;Error occurred in handler for 'dark-mode:toggle': No handler registered for 'dark-mode:toggle'&lt;/code&gt; これは予想されることです&amp;mdash;実際にはまだ &lt;code&gt;nativeTheme&lt;/code&gt; コードに触れていません。</target>
        </trans-unit>
        <trans-unit id="972e0678e759d22802056c49f486c83c9f92bec0" translate="yes" xml:space="preserve">
          <source>If you see a prompt for &lt;code&gt;Username for 'https://chrome-internal.googlesource.com':&lt;/code&gt; when running &lt;code&gt;gclient sync&lt;/code&gt; on Windows, it's probably because the &lt;code&gt;DEPOT_TOOLS_WIN_TOOLCHAIN&lt;/code&gt; environment variable is not set to 0. Open &lt;code&gt;Control Panel&lt;/code&gt; &amp;rarr; &lt;code&gt;System and Security&lt;/code&gt; &amp;rarr; &lt;code&gt;System&lt;/code&gt; &amp;rarr; &lt;code&gt;Advanced system settings&lt;/code&gt; and add a system variable &lt;code&gt;DEPOT_TOOLS_WIN_TOOLCHAIN&lt;/code&gt; with value &lt;code&gt;0&lt;/code&gt;. This tells &lt;code&gt;depot_tools&lt;/code&gt; to use your locally installed version of Visual Studio (by default, &lt;code&gt;depot_tools&lt;/code&gt; will try to download a Google-internal version that only Googlers have access to).</source>
          <target state="translated">&lt;code&gt;Username for 'https://chrome-internal.googlesource.com':&lt;/code&gt; プロンプトが表示された場合： Windowsで &lt;code&gt;gclient sync&lt;/code&gt; を実行している場合、 &lt;code&gt;DEPOT_TOOLS_WIN_TOOLCHAIN&lt;/code&gt; 環境変数が0に設定されていないことが原因である可能性があります。 &lt;code&gt;Control Panel&lt;/code&gt; &amp;rarr; &lt;code&gt;System and Security&lt;/code&gt; &amp;rarr;を開きます。 &lt;code&gt;System&lt;/code&gt; &amp;rarr;システムの &lt;code&gt;Advanced system settings&lt;/code&gt; を &lt;code&gt;DEPOT_TOOLS_WIN_TOOLCHAIN&lt;/code&gt; 、値 &lt;code&gt;0&lt;/code&gt; のシステム変数DEPOT_TOOLS_WIN_TOOLCHAINを追加します。これにより、ローカルにインストールされたバージョンのVisual Studioを使用するように &lt;code&gt;depot_tools&lt;/code&gt; に指示されます（デフォルトでは、 &lt;code&gt;depot_tools&lt;/code&gt; はGoogle社員のみがアクセスできるGoogle内部バージョンをダウンロードしようとします）。</target>
        </trans-unit>
        <trans-unit id="5b348b4f0d8865286aaee0ce01c2c9e1a6f5a402" translate="yes" xml:space="preserve">
          <source>If you test other combinations and find them to work, please update this document :)</source>
          <target state="translated">他の組み合わせを試してみて、うまくいくことがわかったら、このドキュメントを更新してください :)</target>
        </trans-unit>
        <trans-unit id="a41b590466efc05fff264e1613e0e6f4820c05b4" translate="yes" xml:space="preserve">
          <source>If you use native modules, you must make sure that they compile against v142 of the MSVC compiler (provided in Visual Studio 2017). You must also check that any pre-built &lt;code&gt;.dll&lt;/code&gt; or &lt;code&gt;.lib&lt;/code&gt; files provided or referenced by the native module are available for Windows on Arm.</source>
          <target state="translated">ネイティブモジュールを使用する場合は、MSVCコンパイラ（Visual Studio 2017で提供）のv142に対してコンパイルすることを確認する必要があります。また、ネイティブモジュールによって提供または参照されるビルド済みの &lt;code&gt;.dll&lt;/code&gt; または &lt;code&gt;.lib&lt;/code&gt; ファイルがWindows onArmで使用できることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f1e57d4cd3f8005ef706f6a418f0bd254fc0428" translate="yes" xml:space="preserve">
          <source>If you want a quick fix, you can make the variables global by changing your code from this:</source>
          <target state="translated">手っ取り早く修正したい場合は、ここからコードを変更することで変数をグローバルにすることができます。</target>
        </trans-unit>
        <trans-unit id="ba62b7d30bbee706fa722a552d79a60b4d164e0c" translate="yes" xml:space="preserve">
          <source>If you want to apply this example to an existing project:</source>
          <target state="translated">この例を既存のプロジェクトに適用する場合。</target>
        </trans-unit>
        <trans-unit id="7fff812835a9064675286d186c1511b936ffb7a0" translate="yes" xml:space="preserve">
          <source>If you want to build Electron from source and modify the native Electron codebase, this section will help you in testing your modifications.</source>
          <target state="translated">ソースからElectronをビルドして、ネイティブのElectronコードベースを変更したい場合は、このセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c9335e6d51d50f1c8319d8890f1068dd36a905ea" translate="yes" xml:space="preserve">
          <source>If you want to build for an &lt;code&gt;arm&lt;/code&gt; target you should also install the following dependencies:</source>
          <target state="translated">&lt;code&gt;arm&lt;/code&gt; ターゲット用にビルドする場合は、次の依存関係もインストールする必要があります。</target>
        </trans-unit>
        <trans-unit id="4c1e6dc0c9b9cafd7d68ef3e780b5817a75fc949" translate="yes" xml:space="preserve">
          <source>If you want to change the architecture that is downloaded (e.g., &lt;code&gt;ia32&lt;/code&gt; on an &lt;code&gt;x64&lt;/code&gt; machine), you can use the &lt;code&gt;--arch&lt;/code&gt; flag with npm install or set the &lt;code&gt;npm_config_arch&lt;/code&gt; environment variable:</source>
          <target state="translated">あなたがダウンロードしたアーキテクチャを変更したい場合（例えば、 &lt;code&gt;ia32&lt;/code&gt; 上 &lt;code&gt;x64&lt;/code&gt; マシン）は、使用することができます &lt;code&gt;--arch&lt;/code&gt; インストールNPMとのフラグを設定したり &lt;code&gt;npm_config_arch&lt;/code&gt; 環境変数を：</target>
        </trans-unit>
        <trans-unit id="5201d3612d4e2d0860bad7ca51a07c78c1f45c88" translate="yes" xml:space="preserve">
          <source>If you want to control the guest content in any way, you can write JavaScript that listens for &lt;code&gt;webview&lt;/code&gt; events and responds to those events using the &lt;code&gt;webview&lt;/code&gt; methods. Here's sample code with two event listeners: one that listens for the web page to start loading, the other for the web page to stop loading, and displays a &quot;loading...&quot; message during the load time:</source>
          <target state="translated">ゲストコンテンツを何らかの方法で制御する場合は、 &lt;code&gt;webview&lt;/code&gt; イベントをリッスンし、 &lt;code&gt;webview&lt;/code&gt; メソッドを使用してそれらのイベントに応答するJavaScriptを記述できます。2つのイベントリスナーを使用したサンプルコードを次に示します。1つはWebページの読み込みをリッスンし、もう1つはWebページの読み込みを停止し、読み込み中に &quot;loading ...&quot;メッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="4fb4f89f45ce1db939f58b3755053c11fd6862aa" translate="yes" xml:space="preserve">
          <source>If you want to debug and step through libchromiumcontent, you will have to run the bootsrap script with the &lt;code&gt;--build_debug_libcc&lt;/code&gt; argument.</source>
          <target state="translated">libchromiumcontentをデバッグしてステップスルーする場合は、 &lt;code&gt;--build_debug_libcc&lt;/code&gt; 引数を指定してbootsrapスクリプトを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="ecec29786835d37d6116231acec6106da9970502" translate="yes" xml:space="preserve">
          <source>If you want to develop your application directly on a Windows on Arm device, substitute &lt;code&gt;vcvarsx86_arm64.bat&lt;/code&gt; in &lt;em&gt;Target&lt;/em&gt; so that cross-compilation can happen with the device's x86 emulation.</source>
          <target state="translated">Windows on Armデバイスで直接アプリケーションを開発する場合は、&lt;em&gt;Targetで&lt;/em&gt; &lt;code&gt;vcvarsx86_arm64.bat&lt;/code&gt; に置き換えて、デバイスのx86エミュレーションでクロスコンパイルを実行できるようにします。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="139a966830264531c65ccf48a0c89b2a2d904cf1" translate="yes" xml:space="preserve">
          <source>If you want to embed (third-party) web content in an Electron &lt;code&gt;BrowserWindow&lt;/code&gt;, there are three options available to you: &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tags, &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tags, and &lt;code&gt;BrowserViews&lt;/code&gt;. Each one offers slightly different functionality and is useful in different situations. To help you choose between these, this guide explains the differences and capabilities of each option.</source>
          <target state="translated">（サードパーティの）WebコンテンツをElectron &lt;code&gt;BrowserWindow&lt;/code&gt; に埋め込む場合は、 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; タグ、 &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; タグ、および &lt;code&gt;BrowserViews&lt;/code&gt; の3つのオプションを使用できます。それぞれがわずかに異なる機能を提供し、さまざまな状況で役立ちます。これらから選択できるように、このガイドでは各オプションの違いと機能について説明します。</target>
        </trans-unit>
        <trans-unit id="70bc54ee6a7f8f0d7dd27d707f8b8f93a407e696" translate="yes" xml:space="preserve">
          <source>If you want to format the changed code on your latest git commit (HEAD), you can run &lt;code&gt;git-clang-format HEAD~1&lt;/code&gt;. See &lt;code&gt;git-clang-format -h&lt;/code&gt; for more details.</source>
          <target state="translated">最新のgit commit（HEAD）で変更されたコードをフォーマットする場合は、 &lt;code&gt;git-clang-format HEAD~1&lt;/code&gt; 実行できます。詳細については、 &lt;code&gt;git-clang-format -h&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="eb463cc6beabb5e19f505e5b54b8aa6bc4bd08f4" translate="yes" xml:space="preserve">
          <source>If you want to get the &lt;code&gt;frameId&lt;/code&gt; of a given renderer context you should use the &lt;code&gt;webFrame.routingId&lt;/code&gt; value. E.g.</source>
          <target state="translated">特定のレンダラーコンテキストの &lt;code&gt;frameId&lt;/code&gt; を取得する場合は、 &lt;code&gt;webFrame.routingId&lt;/code&gt; 値を使用する必要があります。例えば</target>
        </trans-unit>
        <trans-unit id="1a26518fe1e613b5d3ff699a348197b25272e778" translate="yes" xml:space="preserve">
          <source>If you want to handle keyboard shortcuts for a &lt;a href=&quot;../api/browser-window&quot;&gt;BrowserWindow&lt;/a&gt;, you can use the &lt;code&gt;keyup&lt;/code&gt; and &lt;code&gt;keydown&lt;/code&gt; event listeners on the window object inside the renderer process.</source>
          <target state="translated">&lt;a href=&quot;../api/browser-window&quot;&gt;BrowserWindowの&lt;/a&gt;キーボードショートカットを処理する場合は、レンダラープロセス内のウィンドウオブジェクトで &lt;code&gt;keyup&lt;/code&gt; および &lt;code&gt;keydown&lt;/code&gt; イベントリスナーを使用できます。</target>
        </trans-unit>
        <trans-unit id="f9619991e707dfdaa233a6ea6e854f6efa95ba2e" translate="yes" xml:space="preserve">
          <source>If you want to handle keyboard shortcuts within a &lt;a href=&quot;../api/browser-window&quot;&gt;BrowserWindow&lt;/a&gt;, you can listen for the &lt;code&gt;keyup&lt;/code&gt; and &lt;code&gt;keydown&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM events&lt;/a&gt; inside the renderer process using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;addEventListener() API&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;../api/browser-window&quot;&gt;BrowserWindow&lt;/a&gt;内でキーボードショートカットを処理する場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;addEventListener（）API&lt;/a&gt;を使用して、レンダラープロセス内で &lt;code&gt;keyup&lt;/code&gt; および &lt;code&gt;keydown&lt;/code&gt; DOM&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;イベントを&lt;/a&gt;リッスンできます。</target>
        </trans-unit>
        <trans-unit id="a7af87528df4c89f426fca0b97e3d514b6cc4fe4" translate="yes" xml:space="preserve">
          <source>If you want to handle keyboard shortcuts within a &lt;a href=&quot;api/browser-window&quot;&gt;BrowserWindow&lt;/a&gt;, you can listen for the &lt;code&gt;keyup&lt;/code&gt; and &lt;code&gt;keydown&lt;/code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;DOM events&lt;/a&gt; inside the renderer process using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;addEventListener() API&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;api/browser-window&quot;&gt;BrowserWindow&lt;/a&gt;内でキーボードショートカットを処理する場合は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;addEventListener（）API&lt;/a&gt;を使用して、レンダラープロセス内で &lt;code&gt;keyup&lt;/code&gt; および &lt;code&gt;keydown&lt;/code&gt; DOM&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events&quot;&gt;イベントを&lt;/a&gt;リッスンできます。</target>
        </trans-unit>
        <trans-unit id="e23f9ec8d6d374e4f11ab44cabacc757c58d8152" translate="yes" xml:space="preserve">
          <source>If you want to keep exact same behaviors on all platforms, you should not rely on the &lt;code&gt;click&lt;/code&gt; event and always attach a context menu to the tray icon.</source>
          <target state="translated">すべてのプラットフォームでまったく同じ動作を維持したい場合は、 &lt;code&gt;click&lt;/code&gt; イベントに依存せず、常にコンテキストメニューをトレイアイコンにアタッチしてください。</target>
        </trans-unit>
        <trans-unit id="16fa7c70fe6bf74886856fb7d0c2c3ec2dc12b2c" translate="yes" xml:space="preserve">
          <source>If you want to manually switch between light/dark modes, you can do this by setting the desired mode in the &lt;a href=&quot;../api/native-theme#nativethemethemesource&quot;&gt;themeSource&lt;/a&gt; property of the &lt;code&gt;nativeTheme&lt;/code&gt; module. This property's value will be propagated to your Renderer process. Any CSS rules related to &lt;code&gt;prefers-color-scheme&lt;/code&gt; will be updated accordingly.</source>
          <target state="translated">ライト/ダークモードを手動で切り替える場合は、 &lt;code&gt;nativeTheme&lt;/code&gt; モジュールの&lt;a href=&quot;../api/native-theme#nativethemethemesource&quot;&gt;themeSource&lt;/a&gt;プロパティで目的のモードを設定することでこれを行うことができます。このプロパティの値は、レンダラープロセスに伝播されます。それに応じて、 &lt;code&gt;prefers-color-scheme&lt;/code&gt; に関連するCSSルールが更新されます。</target>
        </trans-unit>
        <trans-unit id="08abf6625066282c15d1acd36b4977905bbaab83" translate="yes" xml:space="preserve">
          <source>If you want to manually switch between light/dark modes, you can do this by setting the desired mode in the &lt;a href=&quot;api/native-theme#nativethemethemesource&quot;&gt;themeSource&lt;/a&gt; property of the &lt;code&gt;nativeTheme&lt;/code&gt; module. This property's value will be propagated to your Renderer process. Any CSS rules related to &lt;code&gt;prefers-color-scheme&lt;/code&gt; will be updated accordingly.</source>
          <target state="translated">ライト/ダークモードを手動で切り替える場合は、 &lt;code&gt;nativeTheme&lt;/code&gt; モジュールの&lt;a href=&quot;api/native-theme#nativethemethemesource&quot;&gt;themeSource&lt;/a&gt;プロパティで目的のモードを設定することでこれを行うことができます。このプロパティの値は、レンダラープロセスに伝播されます。それに応じて、 &lt;code&gt;prefers-color-scheme&lt;/code&gt; に関連するCSSルールが更新されます。</target>
        </trans-unit>
        <trans-unit id="42b6556ac745af25c9b3f90c599d87788c581b57" translate="yes" xml:space="preserve">
          <source>If you want to receive a single response from the main process, like the result of a method call, consider using &lt;a href=&quot;#ipcrendererinvokechannel-args&quot;&gt;&lt;code&gt;ipcRenderer.invoke&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">メソッド呼び出しの結果のように、メインプロセスから単一の応答を受信する場合は、&lt;a href=&quot;#ipcrendererinvokechannel-args&quot;&gt; &lt;code&gt;ipcRenderer.invoke&lt;/code&gt; の&lt;/a&gt;使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="f18bc349ad3d428e75b99e3c156715cfcda822c2" translate="yes" xml:space="preserve">
          <source>If you want to show Notifications from a renderer process you should use the &lt;a href=&quot;../tutorial/notifications&quot;&gt;HTML5 Notification API&lt;/a&gt;</source>
          <target state="translated">レンダラープロセスからの通知を表示する場合は、&lt;a href=&quot;../tutorial/notifications&quot;&gt;HTML5通知APIを&lt;/a&gt;使用する必要があります</target>
        </trans-unit>
        <trans-unit id="7b100d63742c1396902bd80576437573757e38c1" translate="yes" xml:space="preserve">
          <source>If you want to show Notifications from a renderer process you should use the &lt;a href=&quot;tutorial/notifications&quot;&gt;HTML5 Notification API&lt;/a&gt;</source>
          <target state="translated">レンダラープロセスからの通知を表示する場合は、&lt;a href=&quot;tutorial/notifications&quot;&gt;HTML5通知APIを&lt;/a&gt;使用する必要があります</target>
        </trans-unit>
        <trans-unit id="9767f677f83eca842bdd0bf0ecee26c0ee37f559" translate="yes" xml:space="preserve">
          <source>If you want to support displays with different DPI densities at the same time, you can put images with different sizes in the same folder and use the filename without DPI suffixes. For example:</source>
          <target state="translated">異なるDPI濃度のディスプレイを同時にサポートしたい場合は、異なるサイズの画像を同じフォルダに入れて、DPIの接尾辞を除いたファイル名を使用することができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="328af310b89d96317c74ea0727ffffa163478fcf" translate="yes" xml:space="preserve">
          <source>If you want to target arm64, logic like this will typically select the wrong architecture, so carefully check your application and build scripts for conditions like this. In custom build and packaging scripts, you should always check the value of &lt;code&gt;npm_config_arch&lt;/code&gt; in the environment, rather than relying on the current process arch.</source>
          <target state="translated">arm64をターゲットにする場合、このようなロジックは通常、間違ったアーキテクチャを選択するため、アプリケーションを注意深くチェックし、このような条件のスクリプトを作成してください。カスタムビルドおよびパッケージ化スクリプトでは、現在のプロセスarchに依存するのではなく、環境内の &lt;code&gt;npm_config_arch&lt;/code&gt; の値を常に確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="8e9880ad441ad45f30eca80c7b9d8eefd5e0f74c" translate="yes" xml:space="preserve">
          <source>If you want to use Chrome's built-in &lt;code&gt;window.open()&lt;/code&gt; implementation, set &lt;code&gt;nativeWindowOpen&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;webPreferences&lt;/code&gt; options object.</source>
          <target state="translated">Chromeの組み込み &lt;code&gt;window.open()&lt;/code&gt; 実装を使用する &lt;code&gt;true&lt;/code&gt; は、 &lt;code&gt;webPreferences&lt;/code&gt; オプションオブジェクトで &lt;code&gt;nativeWindowOpen&lt;/code&gt; をtrueに設定します。</target>
        </trans-unit>
        <trans-unit id="ba8fa6ac102805baeacc0c51622c2c757699c321" translate="yes" xml:space="preserve">
          <source>If you want to use this method you must disable the builtin spellchecker when you construct the window.</source>
          <target state="translated">この方法を使いたい場合は、ウィンドウを作成する際に内蔵のスペルチェッカーを無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="d493f1aaab9516cf7e42fb75df751b76f3dfd6bc" translate="yes" xml:space="preserve">
          <source>If you wish to opt-out while using Electron &amp;gt; 8.0.0, you must set the &lt;code&gt;NSRequiresAquaSystemAppearance&lt;/code&gt; key in the &lt;code&gt;Info.plist&lt;/code&gt; file to &lt;code&gt;true&lt;/code&gt;. Please note that Electron 8.0.0 and above will not let you opt-out of this theming, due to the use of the macOS 10.14 SDK.</source>
          <target state="translated">Electron&amp;gt; 8.0.0の使用中にオプトアウトする場合は、 &lt;code&gt;Info.plist&lt;/code&gt; ファイルの &lt;code&gt;NSRequiresAquaSystemAppearance&lt;/code&gt; キーを &lt;code&gt;true&lt;/code&gt; に設定する必要があります。macOS 10.14 SDKを使用しているため、Electron8.0.0以降ではこのテーマをオプトアウトできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="aaffc18ff167e6c5dc5030e5cecc520f958918d9" translate="yes" xml:space="preserve">
          <source>If you would like to build both &lt;code&gt;Release&lt;/code&gt; and &lt;code&gt;Debug&lt;/code&gt; targets:</source>
          <target state="translated">&lt;code&gt;Release&lt;/code&gt; ターゲットと &lt;code&gt;Debug&lt;/code&gt; ターゲットの両方をビルドする場合：</target>
        </trans-unit>
        <trans-unit id="f79f8a39f57cfbd50d711f9530442b82349e7cfe" translate="yes" xml:space="preserve">
          <source>If you'd like to contribute to Electron, see the &lt;a href=&quot;https://electronjs.org/CONTRIBUTING&quot;&gt;contributing document&lt;/a&gt;.</source>
          <target state="translated">Electronに寄稿したい場合は、&lt;a href=&quot;https://electronjs.org/CONTRIBUTING&quot;&gt;寄稿ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="c0b8132204e1892fbd05ed0f66b5b9d20f26559e" translate="yes" xml:space="preserve">
          <source>If you'd like to contribute to Electron, see the &lt;a href=&quot;https://github.com/electron/electron/blob/master/CONTRIBUTING.md&quot;&gt;contributing document&lt;/a&gt;.</source>
          <target state="translated">Electronに貢献したい場合は、&lt;a href=&quot;https://github.com/electron/electron/blob/master/CONTRIBUTING.md&quot;&gt;貢献ドキュメントを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="d108f8272b951fb453c00cf7b7e332e6d5ee6191" translate="yes" xml:space="preserve">
          <source>If you're appending an argument like &lt;code&gt;--switch=value&lt;/code&gt;, consider using &lt;code&gt;appendSwitch('switch', 'value')&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;--switch=value&lt;/code&gt; のような引数を追加する場合は、代わりに &lt;code&gt;appendSwitch('switch', 'value')&lt;/code&gt; 使用を検討してください。</target>
        </trans-unit>
        <trans-unit id="2aead26dae48a464ea0fe8f7ce84ef9144a991e3" translate="yes" xml:space="preserve">
          <source>If you're debugging something, it can be helpful to pass some extra flags to the Electron binary:</source>
          <target state="translated">何かをデバッグしている場合、Electron バイナリに余分なフラグを渡すと便利です。</target>
        </trans-unit>
        <trans-unit id="5f5e9e99ea82483efec97ab08ba1a5f91453255c" translate="yes" xml:space="preserve">
          <source>If you're developing Electron and don't plan to redistribute your custom Electron build, you may skip this section.</source>
          <target state="translated">Electronを開発していて、カスタムElectronビルドを再配布する予定がない場合は、このセクションを省略しても構いません。</target>
        </trans-unit>
        <trans-unit id="c161dc98d83657640db26ca7b021acbcc3a9d819" translate="yes" xml:space="preserve">
          <source>If you're developing a private Electron application, or if you're not publishing releases to GitHub Releases, it may be necessary to run your own update server.</source>
          <target state="translated">Electronのプライベートアプリケーションを開発している場合や、GitHub Releasesにリリースを公開していない場合は、独自のアップデートサーバーを実行する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="8b9eaf73429dbe46c500b2d1339d9d43d1c25e98" translate="yes" xml:space="preserve">
          <source>If you're looking for programming help, for answers to questions, or to join in discussion with other developers who use Electron, you can interact with the community in these locations:</source>
          <target state="translated">プログラミングのヘルプ、質問への回答、Electronを使用している他の開発者とのディスカッションに参加したい場合は、以下の場所でコミュニティと交流することができます。</target>
        </trans-unit>
        <trans-unit id="816aa1e52dc040306cac74231f09035756d3b3b4" translate="yes" xml:space="preserve">
          <source>If you're not using an integrated build pipeline like Forge or Builder, you are likely using &lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt;&lt;code&gt;electron-packager&lt;/code&gt;&lt;/a&gt;, which includes &lt;a href=&quot;https://github.com/electron-userland/electron-osx-sign&quot;&gt;&lt;code&gt;electron-osx-sign&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://github.com/electron/electron-notarize&quot;&gt;&lt;code&gt;electron-notarize&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ForgeやBuilderのような統合ビルドパイプラインを使用していない場合は、&lt;a href=&quot;https://github.com/electron-userland/electron-osx-sign&quot;&gt; &lt;code&gt;electron-osx-sign&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://github.com/electron/electron-notarize&quot;&gt; &lt;code&gt;electron-notarize&lt;/code&gt; &lt;/a&gt;を含むelectron- &lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt; &lt;code&gt;electron-packager&lt;/code&gt; &lt;/a&gt;を使用している可能性があります。</target>
        </trans-unit>
        <trans-unit id="2e4347e1c3003343233b5246cca112a5cc44df4e" translate="yes" xml:space="preserve">
          <source>If you're only setting a custom titlebar as draggable, you also need to make all buttons in titlebar non-draggable.</source>
          <target state="translated">カスタムタイトルバーをドラッグ可能に設定するだけなら、タイトルバー内のすべてのボタンをドラッグ不可にする必要もあります。</target>
        </trans-unit>
        <trans-unit id="af25fd84a5e354fae9ce7065072bc6d204e2a1e1" translate="yes" xml:space="preserve">
          <source>If you're setting just a custom titlebar as draggable, you also need to make all buttons in titlebar non-draggable.</source>
          <target state="translated">カスタムタイトルバーだけをドラッグ可能に設定している場合は、タイトルバーのすべてのボタンをドラッグ不可にする必要があります。</target>
        </trans-unit>
        <trans-unit id="f919888e2af1bbd22b248b54264d8e7a6875359e" translate="yes" xml:space="preserve">
          <source>If you're using &lt;code&gt;build-tools&lt;/code&gt;, appropriate &lt;code&gt;-j&lt;/code&gt; values will automatically be used for you.</source>
          <target state="translated">&lt;code&gt;build-tools&lt;/code&gt; を使用している場合は、適切な &lt;code&gt;-j&lt;/code&gt; 値が自動的に使用されます。</target>
        </trans-unit>
        <trans-unit id="8bf0ecf05bfb15e4c20cec629ef1066e38a05a6f" translate="yes" xml:space="preserve">
          <source>If you're using Electron's favorite build tool, getting your application signed and notarized requires a few additions to your configuration. &lt;a href=&quot;https://electronforge.io&quot;&gt;Forge&lt;/a&gt; is a collection of the official Electron tools, using &lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt;&lt;code&gt;electron-packager&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/electron-userland/electron-osx-sign&quot;&gt;&lt;code&gt;electron-osx-sign&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/electron/electron-notarize&quot;&gt;&lt;code&gt;electron-notarize&lt;/code&gt;&lt;/a&gt; under the hood.</source>
          <target state="translated">Electronのお気に入りのビルドツールを使用している場合、アプリケーションに署名して公証するには、構成にいくつか追加する必要があります。&lt;a href=&quot;https://electronforge.io&quot;&gt;Forge&lt;/a&gt;は、&lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt; &lt;code&gt;electron-packager&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/electron-userland/electron-osx-sign&quot;&gt; &lt;code&gt;electron-osx-sign&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://github.com/electron/electron-notarize&quot;&gt; &lt;code&gt;electron-notarize&lt;/code&gt; &lt;/a&gt;で電子公証を使用する公式のElectronツールのコレクションです。</target>
        </trans-unit>
        <trans-unit id="dfb91461f3270851f4aabc5259ff9b378e4a6391" translate="yes" xml:space="preserve">
          <source>If you're using Packager's API, you can pass &lt;a href=&quot;https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html&quot;&gt;in configuration that both signs and notarizes your application&lt;/a&gt;.</source>
          <target state="translated">PackagerのAPIを使用している場合は&lt;a href=&quot;https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html&quot;&gt;、アプリケーションに署名して公証する構成を&lt;/a&gt;渡すことができます。</target>
        </trans-unit>
        <trans-unit id="0d4152d746ef76603ca3b1bace3cae203a001696" translate="yes" xml:space="preserve">
          <source>If you're using a transpiler/compiler like TypeScript, examine its configuration and ensure that you're targeting the latest ECMAScript version supported by Electron.</source>
          <target state="translated">TypeScriptのようなトランスパイラ/コンパイラを使用している場合は、その設定を調べ、Electronがサポートする最新のECMAScriptバージョンをターゲットにしていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e6b3c3654b5d12a62eae18258917bf4a22841276" translate="yes" xml:space="preserve">
          <source>If you've found a bug in a &lt;a href=&quot;#supported-versions&quot;&gt;supported version&lt;/a&gt; of Electron, please report it with the &lt;a href=&quot;../development/issues&quot;&gt;issue tracker&lt;/a&gt;.</source>
          <target state="translated">Electronの&lt;a href=&quot;#supported-versions&quot;&gt;サポートさ&lt;/a&gt;れているバージョンでバグを見つけた場合は、&lt;a href=&quot;../development/issues&quot;&gt;Issue Trackerで&lt;/a&gt;報告してください。</target>
        </trans-unit>
        <trans-unit id="317fd2ed19d313febf9709098ba52a3d10a1546c" translate="yes" xml:space="preserve">
          <source>If you've found a bug in a &lt;a href=&quot;#supported-versions&quot;&gt;supported version&lt;/a&gt; of Electron, please report it with the &lt;a href=&quot;development/issues&quot;&gt;issue tracker&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;#supported-versions&quot;&gt;サポートさ&lt;/a&gt;れているバージョンのElectronにバグを見つけた場合は、&lt;a href=&quot;development/issues&quot;&gt;課題追跡システムで&lt;/a&gt;報告してください。</target>
        </trans-unit>
        <trans-unit id="83cde1678e22555cea50d9dba022038c0481c357" translate="yes" xml:space="preserve">
          <source>If your Visual Studio is installed in a directory other than the default, you'll need to set a few environment variables to point the toolchains to your installation path.</source>
          <target state="translated">Visual Studio がデフォルト以外のディレクトリにインストールされている場合、ツールチェーンをインストールパスに指定するために、いくつかの環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ac034e9dd471eb0680d3bb87436c2f1c385f1f31" translate="yes" xml:space="preserve">
          <source>If your app doesn't use any native modules, then it's really easy to create an Arm version of your app.</source>
          <target state="translated">アプリがネイティブモジュールを使用していない場合、アプリのArmバージョンを作成するのはとても簡単です。</target>
        </trans-unit>
        <trans-unit id="a96ddbc042e498571c8e2d0224cc23cdef0e2780" translate="yes" xml:space="preserve">
          <source>If your app has its own dark mode, you should toggle it on and off in sync with the system's dark mode setting. You can do this by using the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;prefer-color-scheme&lt;/a&gt; CSS media query.</source>
          <target state="translated">アプリに独自のダークモードがある場合は、システムのダークモード設定と同期してオンとオフを切り替える必要があります。これを行うには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme&quot;&gt;prefer-color-&lt;/a&gt; schemeCSSメディアクエリを使用します。</target>
        </trans-unit>
        <trans-unit id="e97395a97ab0d83dd8253148219bda14c139d633" translate="yes" xml:space="preserve">
          <source>If your app has no need for navigation, you can call &lt;code&gt;event.preventDefault()&lt;/code&gt; in a &lt;a href=&quot;../api/web-contents#event-will-navigate&quot;&gt;&lt;code&gt;will-navigate&lt;/code&gt;&lt;/a&gt; handler. If you know which pages your app might navigate to, check the URL in the event handler and only let navigation occur if it matches the URLs you're expecting.</source>
          <target state="translated">アプリにナビゲーションが必要ない場合は、&lt;a href=&quot;../api/web-contents#event-will-navigate&quot;&gt; &lt;code&gt;will-navigate&lt;/code&gt; &lt;/a&gt;ハンドラーで &lt;code&gt;event.preventDefault()&lt;/code&gt; を呼び出すことができます。アプリがナビゲートする可能性のあるページがわかっている場合は、イベントハンドラーでURLを確認し、期待するURLと一致する場合にのみナビゲーションを実行させます。</target>
        </trans-unit>
        <trans-unit id="a2062767040e060b8a328bc1c68dec44cdbcfede" translate="yes" xml:space="preserve">
          <source>If your app has no need for navigation, you can call &lt;code&gt;event.preventDefault()&lt;/code&gt; in a &lt;a href=&quot;api/web-contents#event-will-navigate&quot;&gt;&lt;code&gt;will-navigate&lt;/code&gt;&lt;/a&gt; handler. If you know which pages your app might navigate to, check the URL in the event handler and only let navigation occur if it matches the URLs you're expecting.</source>
          <target state="translated">アプリにナビゲーションが必要ない場合は、&lt;a href=&quot;api/web-contents#event-will-navigate&quot;&gt; &lt;code&gt;will-navigate&lt;/code&gt; &lt;/a&gt;ハンドラーで &lt;code&gt;event.preventDefault()&lt;/code&gt; を呼び出すことができます。アプリがナビゲートする可能性のあるページがわかっている場合は、イベントハンドラーでURLを確認し、期待するURLと一致する場合にのみナビゲーションを実行させます。</target>
        </trans-unit>
        <trans-unit id="0a8670c9b3e2d32026da8aaa4611925534a8a5f6" translate="yes" xml:space="preserve">
          <source>If your app has no need to navigate or only needs to navigate to known pages, it is a good idea to limit navigation outright to that known scope, disallowing any other kinds of navigation.</source>
          <target state="translated">アプリがナビゲーションを必要としない場合、または既知のページへのナビゲーションのみが必要な場合は、ナビゲーションを既知の範囲に限定し、他の種類のナビゲーションを許可しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="51aa10ea3c1c92e6ecacb529aa885236faf8f979" translate="yes" xml:space="preserve">
          <source>If your app is packaged with &lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt;&lt;code&gt;electron-builder&lt;/code&gt;&lt;/a&gt; you can use the &lt;a href=&quot;https://www.electron.build/auto-update&quot;&gt;electron-updater&lt;/a&gt; module, which does not require a server and allows for updates from S3, GitHub or any other static file host. This sidesteps Electron's built-in update mechanism, meaning that the rest of this documentation will not apply to &lt;code&gt;electron-builder&lt;/code&gt;'s updater.</source>
          <target state="translated">アプリが同梱されている場合&lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt; &lt;code&gt;electron-builder&lt;/code&gt; &lt;/a&gt;を使用でき&lt;a href=&quot;https://www.electron.build/auto-update&quot;&gt;電子アップデータの&lt;/a&gt;サーバーを必要とし、S3、GitHubのか、他の静的ファイルのホストからの更新を可能にしていないモジュールを、。これにより、Electronの組み込み更新メカニズムが回避されます。つまり、このドキュメントの残りの部分は &lt;code&gt;electron-builder&lt;/code&gt; のアップデーターには適用されません。</target>
        </trans-unit>
        <trans-unit id="4c91aa3550c425c5f42a685ca2ce387079dc10f8" translate="yes" xml:space="preserve">
          <source>If your app runs with Electron 6.0.8 or later, you can now build it for Windows 10 on Arm. This considerably improves performance, but requires recompilation of any native modules used in your app. It may also require small fixups to your build and packaging scripts.</source>
          <target state="translated">アプリがElectron 6.0.8以降で動作する場合、Windows 10用のアプリをArm上でビルドできるようになりました。これによりパフォーマンスは大幅に向上しますが、アプリで使用されているネイティブモジュールの再コンパイルが必要になります。また、ビルドスクリプトやパッケージングスクリプトの小さな修正が必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="b5db399cb506fdf95ca39ff6d372b347df9a8b96" translate="yes" xml:space="preserve">
          <source>If your crash ingestion server does not support compressed payloads, you can turn off compression by specifying &lt;code&gt;{ compress: false }&lt;/code&gt; in the crash reporter options.</source>
          <target state="translated">クラッシュ取り込みサーバーが圧縮ペイロードをサポートしていない場合は、クラッシュレポーターオプションで &lt;code&gt;{ compress: false }&lt;/code&gt; 指定して圧縮をオフにできます。</target>
        </trans-unit>
        <trans-unit id="afeba0f50d830551f87d523923c509fa4098940d" translate="yes" xml:space="preserve">
          <source>Iframes</source>
          <target state="translated">Iframes</target>
        </trans-unit>
        <trans-unit id="25818d994b9714bdeb509e88b48c3d68d9c085b6" translate="yes" xml:space="preserve">
          <source>Iframes in Electron behave like iframes in regular browsers. An &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; element in your page can show external web pages, provided that their &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;Content Security Policy&lt;/a&gt; allows it. To limit the number of capabilities of a site in an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; tag, it is recommended to use the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox&quot;&gt;&lt;code&gt;sandbox&lt;/code&gt; attribute&lt;/a&gt; and only allow the capabilities you want to support.</source>
          <target state="translated">Electronのiframeは、通常のブラウザのiframeと同じように動作します。ページの &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; 要素は、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP&quot;&gt;コンテンツセキュリティポリシーで&lt;/a&gt;許可されている場合に限り、外部Webページを表示できます。 &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; タグ内のサイトの機能の数を制限するには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe#attr-sandbox&quot;&gt; &lt;code&gt;sandbox&lt;/code&gt; 属性&lt;/a&gt;を使用し、サポートする機能のみを許可することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="892280c67a78254c94b3aa2e961496a6129be496" translate="yes" xml:space="preserve">
          <source>Ignore application menu shortcuts while this web contents is focused.</source>
          <target state="translated">このWebコンテンツにフォーカスしている間は、アプリケーションメニューのショートカットを無視します。</target>
        </trans-unit>
        <trans-unit id="424100d46b3ab239a3c2ec5d1347f13d4479a06e" translate="yes" xml:space="preserve">
          <source>Ignore the connections limit for &lt;code&gt;domains&lt;/code&gt; list separated by &lt;code&gt;,&lt;/code&gt;.</source>
          <target state="translated">接続が限界無視 &lt;code&gt;domains&lt;/code&gt; によって分離されたリスト &lt;code&gt;,&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5fcbfbdcdfee026e6182c4343823188f45b893e" translate="yes" xml:space="preserve">
          <source>Ignores certificate related errors.</source>
          <target state="translated">証明書関連のエラーを無視します。</target>
        </trans-unit>
        <trans-unit id="5044799f824f27630de93bd0f1eb314c6bd530a3" translate="yes" xml:space="preserve">
          <source>Ignoring Above Advice</source>
          <target state="translated">上記のアドバイスを無視する</target>
        </trans-unit>
        <trans-unit id="a063d213139ef01259fb2e1362319e9b85ed8247" translate="yes" xml:space="preserve">
          <source>Ignoring mouse messages makes the web page oblivious to mouse movement, meaning that mouse movement events will not be emitted. On Windows operating systems an optional parameter can be used to forward mouse move messages to the web page, allowing events such as &lt;code&gt;mouseleave&lt;/code&gt; to be emitted:</source>
          <target state="translated">マウスメッセージを無視すると、Webページはマウスの動きに気付かなくなります。つまり、マウスの動きイベントは発行されません。Windowsオペレーティングシステムでは、オプションのパラメーターを使用して、マウス移動メッセージをWebページに &lt;code&gt;mouseleave&lt;/code&gt; し、mouseleaveなどのイベントを発行できます。</target>
        </trans-unit>
        <trans-unit id="d61395e15170593395436a90303b589946ad7e24" translate="yes" xml:space="preserve">
          <source>Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, instantiating a &lt;code&gt;new Notification&lt;/code&gt; does not immediately show it to the user, you need to call this method before the OS will display it.</source>
          <target state="translated">通知をユーザーにすぐに表示します。これは、HTML5通知の実装とは異なり、 &lt;code&gt;new Notification&lt;/code&gt; インスタンス化してもすぐにはユーザーに表示されないことに注意してください。OSが表示する前にこのメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="3ca349de6e383b65bb6d1144f63a50efd179453b" translate="yes" xml:space="preserve">
          <source>Immediately shows the notification to the user, please note this means unlike the HTML5 Notification implementation, simply instantiating a &lt;code&gt;new Notification&lt;/code&gt; does not immediately show it to the user, you need to call this method before the OS will display it.</source>
          <target state="translated">ユーザーに通知をすぐに表示します。これは、HTML5通知の実装とは異なり、 &lt;code&gt;new Notification&lt;/code&gt; インスタンス化するだけではユーザーにすぐには表示されないことに注意してください。OSが通知を表示する前に、このメソッドを呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="ebb90ad1916e70a7d909dacfe5051f48aa4dd948" translate="yes" xml:space="preserve">
          <source>Implementing Updates in Your App</source>
          <target state="translated">アプリへのアップデートの実装</target>
        </trans-unit>
        <trans-unit id="3ac28996909d61694a5d92238b0257784c34868e" translate="yes" xml:space="preserve">
          <source>Import Electron Forge to your app folder:</source>
          <target state="translated">Electron Forgeをアプリフォルダにインポートします。</target>
        </trans-unit>
        <trans-unit id="35256a74cd327e48afb44264e126538252574d13" translate="yes" xml:space="preserve">
          <source>ImportError: No module named win32file</source>
          <target state="translated">ImportError。win32file という名前のモジュールがありません。</target>
        </trans-unit>
        <trans-unit id="80a2156ead1464481656033b2bec2df99e3e0ae6" translate="yes" xml:space="preserve">
          <source>Important Note: &lt;a href=&quot;../api/webview-tag#warning&quot;&gt;we do not recommend you to use use WebViews&lt;/a&gt;, as this tag undergoes dramatic architectural changes that may affect stability of your application. Consider switching to alternatives, like &lt;code&gt;iframe&lt;/code&gt; and Electron's &lt;code&gt;BrowserView&lt;/code&gt;, or an architecture that avoids embedded content by design.</source>
          <target state="translated">重要な注意：このタグは、アプリケーションの安定性に影響を与える可能性のある劇的なアーキテクチャ変更を受ける&lt;a href=&quot;../api/webview-tag#warning&quot;&gt;ため、WebViewの使用はお勧めしません&lt;/a&gt;。 &lt;code&gt;iframe&lt;/code&gt; やElectronの &lt;code&gt;BrowserView&lt;/code&gt; などの代替手段、または設計により埋め込みコンテンツを回避するアーキテクチャへの切り替えを検討してください。</target>
        </trans-unit>
        <trans-unit id="74e63e1abcc3e42be0673213a26dae4874c870fb" translate="yes" xml:space="preserve">
          <source>Important Note: &lt;a href=&quot;api/webview-tag#warning&quot;&gt;we do not recommend you to use use WebViews&lt;/a&gt;, as this tag undergoes dramatic architectural changes that may affect stability of your application. Consider switching to alternatives, like &lt;code&gt;iframe&lt;/code&gt; and Electron's &lt;code&gt;BrowserView&lt;/code&gt;, or an architecture that avoids embedded content by design.</source>
          <target state="translated">重要な注意：このタグは、アプリケーションの安定性に影響を与える可能性のある劇的なアーキテクチャ変更を受ける&lt;a href=&quot;api/webview-tag#warning&quot;&gt;ため、WebViewの使用はお勧めしません&lt;/a&gt;。 &lt;code&gt;iframe&lt;/code&gt; やElectronの &lt;code&gt;BrowserView&lt;/code&gt; などの代替手段、または設計により埋め込みコンテンツを回避するアーキテクチャへの切り替えを検討してください。</target>
        </trans-unit>
        <trans-unit id="ebcfb4906925f0491b8dbb88fb357667615aabaa" translate="yes" xml:space="preserve">
          <source>Important things to notice in the preload script:</source>
          <target state="translated">プリロードスクリプトで注意すべき重要なこと</target>
        </trans-unit>
        <trans-unit id="ee896cf9660d981f601a64d656271d3fb2ecc95f" translate="yes" xml:space="preserve">
          <source>Imports the certificate in pkcs12 format into the platform certificate store. &lt;code&gt;callback&lt;/code&gt; is called with the &lt;code&gt;result&lt;/code&gt; of import operation, a value of &lt;code&gt;0&lt;/code&gt; indicates success while any other value indicates failure according to Chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h&quot;&gt;net_error_list&lt;/a&gt;.</source>
          <target state="translated">pkcs12形式の証明書をプラットフォーム証明書ストアにインポートします。Chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h&quot;&gt;net_error_listに&lt;/a&gt;よると、 &lt;code&gt;callback&lt;/code&gt; はインポート操作の &lt;code&gt;result&lt;/code&gt; とともに呼び出され、値 &lt;code&gt;0&lt;/code&gt; は成功を示し、その他の値は失敗を示します。</target>
        </trans-unit>
        <trans-unit id="aeebb2ee44266da25bb466aa24666f88aee9acbf" translate="yes" xml:space="preserve">
          <source>Imports the certificate in pkcs12 format into the platform certificate store. &lt;code&gt;callback&lt;/code&gt; is called with the &lt;code&gt;result&lt;/code&gt; of import operation, a value of &lt;code&gt;0&lt;/code&gt; indicates success while any other value indicates failure according to chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h&quot;&gt;net_error_list&lt;/a&gt;.</source>
          <target state="translated">証明書をpkcs12形式でプラットフォームの証明書ストアにインポートします。 &lt;code&gt;callback&lt;/code&gt; が呼び出され、インポート操作の &lt;code&gt;result&lt;/code&gt; が返されます &lt;code&gt;0&lt;/code&gt; 値は成功を示し、その他の値はchromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/net/base/net_error_list.h&quot;&gt;net_error_list&lt;/a&gt;に従って失敗を示します。</target>
        </trans-unit>
        <trans-unit id="80975bcad8a865f0024bd74f52d8e3210a0d2b90" translate="yes" xml:space="preserve">
          <source>Improper use of &lt;a href=&quot;../api/shell#shellopenexternalurl-options&quot;&gt;&lt;code&gt;openExternal&lt;/code&gt;&lt;/a&gt; can be leveraged to compromise the user's host. When openExternal is used with untrusted content, it can be leveraged to execute arbitrary commands.</source>
          <target state="translated">&lt;a href=&quot;../api/shell#shellopenexternalurl-options&quot;&gt; &lt;code&gt;openExternal&lt;/code&gt; の&lt;/a&gt;不適切な使用は、ユーザーのホストを危険にさらすために利用される可能性があります。openExternalを信頼できないコンテンツとともに使用すると、openExternalを利用して任意のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="9affe9f4f1f91678197560baa0de8f251f819c94" translate="yes" xml:space="preserve">
          <source>Improper use of &lt;a href=&quot;api/shell#shellopenexternalurl-options&quot;&gt;&lt;code&gt;openExternal&lt;/code&gt;&lt;/a&gt; can be leveraged to compromise the user's host. When openExternal is used with untrusted content, it can be leveraged to execute arbitrary commands.</source>
          <target state="translated">&lt;a href=&quot;api/shell#shellopenexternalurl-options&quot;&gt; &lt;code&gt;openExternal&lt;/code&gt; の&lt;/a&gt;不適切な使用は、ユーザーのホストを危険にさらすために利用される可能性があります。openExternalを信頼できないコンテンツとともに使用すると、openExternalを利用して任意のコマンドを実行できます。</target>
        </trans-unit>
        <trans-unit id="93eb2d382a0cf31181d40b8e56752440dc849dc7" translate="yes" xml:space="preserve">
          <source>In &lt;a href=&quot;https://github.com/electron/electron/blob/master/appveyor.yml&quot;&gt;appveyor.yml&lt;/a&gt;, the image is identified by the property &lt;em&gt;image&lt;/em&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/electron/electron/blob/master/appveyor.yml&quot;&gt;appveyor.yml&lt;/a&gt;、画像は、プロパティによって識別される&lt;em&gt;画像&lt;/em&gt;。</target>
        </trans-unit>
        <trans-unit id="54d043d66902b54dc09febe87486b632a9ed7082" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;electron-crashpad-vA.B.C.D&lt;/code&gt;, cherry-pick the patch's checksum</source>
          <target state="translated">では &lt;code&gt;electron-crashpad-vA.B.C.D&lt;/code&gt; 、パッチのチェックサムを桜選びます</target>
        </trans-unit>
        <trans-unit id="2c0a5b221735fd5165fe6a72b7dd95e84d476107" translate="yes" xml:space="preserve">
          <source>In &lt;code&gt;script/upload.py&lt;/code&gt;, you &lt;em&gt;must&lt;/em&gt; set &lt;code&gt;ELECTRON_REPO&lt;/code&gt; to your fork (&lt;code&gt;MYORG/electron&lt;/code&gt;), especially if you are a contributor to Electron proper.</source>
          <target state="translated">では &lt;code&gt;script/upload.py&lt;/code&gt; 、あなたが&lt;em&gt;しなければならない&lt;/em&gt;設定 &lt;code&gt;ELECTRON_REPO&lt;/code&gt; を（自分のフォークに &lt;code&gt;MYORG/electron&lt;/code&gt; あなたが適切な電子に貢献している場合は特に、）。</target>
        </trans-unit>
        <trans-unit id="21e0f6f2ce9e10de95c77dbb8d73d89c7bd736b0" translate="yes" xml:space="preserve">
          <source>In Chromium, this process is referred to as the &quot;browser process&quot;. It is renamed in Electron to avoid confusion with renderer processes.</source>
          <target state="translated">Chromium では、このプロセスは「ブラウザプロセス」と呼ばれています。これはレンダラープロセスとの混同を避けるため、Electronでは名前が変更されています。</target>
        </trans-unit>
        <trans-unit id="0ab2e606ea24062674776c9630ae58f479fc3332" translate="yes" xml:space="preserve">
          <source>In Detail</source>
          <target state="translated">詳細はこちら</target>
        </trans-unit>
        <trans-unit id="f1437a264a3475229aede1c4942b00e775cc3256" translate="yes" xml:space="preserve">
          <source>In Detail: Electron's Versioning Scheme</source>
          <target state="translated">詳細はこちら エレクトロンのバージョニングスキーム</target>
        </trans-unit>
        <trans-unit id="48a32c72dc62cc33ed97d937cb01ff3252d0a200" translate="yes" xml:space="preserve">
          <source>In Detail: Installing Electron</source>
          <target state="translated">詳細はこちら 電子機器の設置</target>
        </trans-unit>
        <trans-unit id="f1e68e5a8bcc9c028bebf7a43fc653e2a4ab4f00" translate="yes" xml:space="preserve">
          <source>In Detail: Packaging App Source Code with asar</source>
          <target state="translated">詳細を見てみると asarでアプリのソースコードをパッケージ化する</target>
        </trans-unit>
        <trans-unit id="cad4f214e72fcc9d3a93d8052858e48edb7b60be" translate="yes" xml:space="preserve">
          <source>In Detail: Using Pepper Flash Plugin</source>
          <target state="translated">詳細はこちら Pepper Flashプラグインの使用</target>
        </trans-unit>
        <trans-unit id="7fada1074b55085e8425e24c9b5cdb61ea84c1ba" translate="yes" xml:space="preserve">
          <source>In Detail: Using Widevine CDM Plugin</source>
          <target state="translated">詳細はこちら Widevine CDMプラグインの使用</target>
        </trans-unit>
        <trans-unit id="6cff52c011bfed815b8af07ca624dea395e580f9" translate="yes" xml:space="preserve">
          <source>In Devtron, there is a new accessibility tab which will allow you to audit a page in your app, sort and filter the results.</source>
          <target state="translated">Devtronには新しいアクセシビリティ タブがあり、アプリ内のページを監査したり、結果をソートしたり、フィルタリングしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="3a51a157251fd6774edf5dfa74f615531dbb4aca" translate="yes" xml:space="preserve">
          <source>In Devtron, there is an accessibility tab which will allow you to audit a page in your app, sort and filter the results.</source>
          <target state="translated">Devtronにはアクセシビリティ タブがあり、アプリ内のページを監査したり、結果をソートしたり、フィルタリングしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="1d0a705d0d8940c67fb021afdcf78a9ef8a67315" translate="yes" xml:space="preserve">
          <source>In Electron &amp;lt;=6, this would return a &lt;code&gt;FileList&lt;/code&gt; with a &lt;code&gt;File&lt;/code&gt; object for:</source>
          <target state="translated">Electron &amp;lt;= 6の場合、これは次の &lt;code&gt;File&lt;/code&gt; オブジェクトを含む &lt;code&gt;FileList&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="aaf225b3428e50bd33b903dbe40e005dff21a519" translate="yes" xml:space="preserve">
          <source>In Electron 12, &lt;code&gt;contextIsolation&lt;/code&gt; will be enabled by default. To restore the previous behavior, &lt;code&gt;contextIsolation: false&lt;/code&gt; must be specified in WebPreferences.</source>
          <target state="translated">Electron 12では、 &lt;code&gt;contextIsolation&lt;/code&gt; がデフォルトで有効になります。以前の動作を復元するには、WebPreferencesで &lt;code&gt;contextIsolation: false&lt;/code&gt; 指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="843d56141e607369d152c0036082a52a6b00e934" translate="yes" xml:space="preserve">
          <source>In Electron 7, this now returns a &lt;code&gt;FileList&lt;/code&gt; with a &lt;code&gt;File&lt;/code&gt; object for:</source>
          <target state="translated">Electron 7では、これにより、次の &lt;code&gt;File&lt;/code&gt; オブジェクトを含む &lt;code&gt;FileList&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="2c2ca90c6c6031612b73199be39fe9042b1e0b8a" translate="yes" xml:space="preserve">
          <source>In Electron 8.0, IPC was changed to use the Structured Clone Algorithm, bringing significant performance improvements. To help ease the transition, the old IPC serialization algorithm was kept and used for some objects that aren't serializable with Structured Clone. In particular, DOM objects (e.g. &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;Location&lt;/code&gt; and &lt;code&gt;DOMMatrix&lt;/code&gt;), Node.js objects backed by C++ classes (e.g. &lt;code&gt;process.env&lt;/code&gt;, some members of &lt;code&gt;Stream&lt;/code&gt;), and Electron objects backed by C++ classes (e.g. &lt;code&gt;WebContents&lt;/code&gt;, &lt;code&gt;BrowserWindow&lt;/code&gt; and &lt;code&gt;WebFrame&lt;/code&gt;) are not serializable with Structured Clone. Whenever the old algorithm was invoked, a deprecation warning was printed.</source>
          <target state="translated">Electron 8.0では、構造化クローンアルゴリズムを使用するようにIPCが変更され、パフォーマンスが大幅に向上しました。移行を容易にするために、古いIPCシリアル化アルゴリズムが維持され、StructuredCloneでシリアル化できない一部のオブジェクトに使用されました。特に、DOMオブジェクト（ &lt;code&gt;Element&lt;/code&gt; 、 &lt;code&gt;Location&lt;/code&gt; 、 &lt;code&gt;DOMMatrix&lt;/code&gt; など）、C ++クラスに基づくNode.jsオブジェクト（ &lt;code&gt;process.env&lt;/code&gt; 、 &lt;code&gt;Stream&lt;/code&gt; の一部のメンバーなど）、C ++クラスに &lt;code&gt;WebFrame&lt;/code&gt; Electronオブジェクト（ &lt;code&gt;WebContents&lt;/code&gt; 、 &lt;code&gt;BrowserWindow&lt;/code&gt; 、WebFrameなど）は次のとおりです。構造化クローンではシリアル化できません。古いアルゴリズムが呼び出されるたびに、非推奨の警告が出力されました。</target>
        </trans-unit>
        <trans-unit id="0014b5b3fddf891600080a2d855b30f8fff38d83" translate="yes" xml:space="preserve">
          <source>In Electron 9, using the remote module without explicitly enabling it via the &lt;code&gt;enableRemoteModule&lt;/code&gt; WebPreferences option began emitting a warning. In Electron 10, the remote module is now disabled by default. To use the remote module, &lt;code&gt;enableRemoteModule: true&lt;/code&gt; must be specified in WebPreferences:</source>
          <target state="translated">Electron 9では、 &lt;code&gt;enableRemoteModule&lt;/code&gt; WebPreferencesオプションを介して明示的に有効にせずにリモートモジュールを使用すると、警告が発せられ始めました。Electron 10では、リモートモジュールがデフォルトで無効になっています。リモートモジュールを使用するには、 &lt;code&gt;enableRemoteModule: true&lt;/code&gt; をWebPreferencesで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d3e8c29e8bef6ac53ceaa6086d444a6d8b05a4dd" translate="yes" xml:space="preserve">
          <source>In Electron 9.0, the old serialization algorithm has been removed, and sending such non-serializable objects will now throw an &quot;object could not be cloned&quot; error.</source>
          <target state="translated">Electron 9.0では、古いシリアライズアルゴリズムが削除され、このようなシリアライズ不可能なオブジェクトを送信すると、&quot;object could not be cloned &quot;エラーがスローされるようになりました。</target>
        </trans-unit>
        <trans-unit id="9d9c3ade67add20f1f2811f5e2457d94c8480632" translate="yes" xml:space="preserve">
          <source>In Electron there are two sets of APIs: Node APIs provided by Node.js and Web APIs provided by Chromium. Both APIs support reading files from &lt;code&gt;asar&lt;/code&gt; archives.</source>
          <target state="translated">Electronには、APIの2つのセットがあります。Node.jsによって提供されるノードAPIとChromiumによって提供されるWeb APIです。どちらのAPIも、 &lt;code&gt;asar&lt;/code&gt; アーカイブからのファイルの読み取りをサポートしています。</target>
        </trans-unit>
        <trans-unit id="0b42fd03fbe33fd66fe7eccfe82548b3608207c4" translate="yes" xml:space="preserve">
          <source>In Electron we took a very similar approach: for &lt;code&gt;Debug&lt;/code&gt; builds, the binary will be linked to a shared library version of Chromium's components to achieve fast linking time; for &lt;code&gt;Release&lt;/code&gt; builds, the binary will be linked to the static library versions, so we can have the best possible binary size and performance.</source>
          <target state="translated">Electronでは非常によく似たアプローチを採用しました。 &lt;code&gt;Debug&lt;/code&gt; ビルドの場合、バイナリはChromiumのコンポーネントの共有ライブラリバージョンにリンクされ、高速リンク時間を実現します。以下のための &lt;code&gt;Release&lt;/code&gt; ビルドを我々は可能な限り最高のバイナリサイズと性能を持つことができるように、バイナリは、静的ライブラリのバージョンにリンクされます。</target>
        </trans-unit>
        <trans-unit id="621b692306e5cced167a10f5fe89210f064bd7fd" translate="yes" xml:space="preserve">
          <source>In Electron you can use the Widevine CDM library shipped with Chrome browser.</source>
          <target state="translated">Electronでは、Chromeブラウザに同梱されているWidevine CDMライブラリを利用することができます。</target>
        </trans-unit>
        <trans-unit id="625f5fe9d865e659c090177d284e16759fd6bea9" translate="yes" xml:space="preserve">
          <source>In Electron you can use the Widevine CDM plugin shipped with Chrome browser.</source>
          <target state="translated">Electronでは、Chromeブラウザに同梱されているWidevine CDMプラグインを使用することができます。</target>
        </trans-unit>
        <trans-unit id="e1e890d94f8d23d7f8fadfe52d2a05946a4ed8db" translate="yes" xml:space="preserve">
          <source>In Electron, GUI-related modules (such as &lt;code&gt;dialog&lt;/code&gt;, &lt;code&gt;menu&lt;/code&gt; etc.) are only available in the main process, not in the renderer process. In order to use them from the renderer process, the &lt;code&gt;ipc&lt;/code&gt; module is necessary to send inter-process messages to the main process. With the &lt;code&gt;remote&lt;/code&gt; module, you can invoke methods of the main process object without explicitly sending inter-process messages, similar to Java's &lt;a href=&quot;https://en.wikipedia.org/wiki/Java_remote_method_invocation&quot;&gt;RMI&lt;/a&gt;. An example of creating a browser window from a renderer process:</source>
          <target state="translated">Electronでは、GUI関連のモジュール（ &lt;code&gt;dialog&lt;/code&gt; 、 &lt;code&gt;menu&lt;/code&gt; など）はメインプロセスでのみ使用でき、レンダラープロセスでは使用できません。レンダラープロセスからそれらを使用するには、メインプロセスにプロセス間メッセージを送信するための &lt;code&gt;ipc&lt;/code&gt; モジュールが必要です。 &lt;code&gt;remote&lt;/code&gt; モジュールは、明示的にJavaのに似たプロセス間メッセージ、送信せずにメインプロセスオブジェクトのメソッドを呼び出すことができる&lt;a href=&quot;https://en.wikipedia.org/wiki/Java_remote_method_invocation&quot;&gt;RMIを&lt;/a&gt;。レンダラープロセスからブラウザーウィンドウを作成する例：</target>
        </trans-unit>
        <trans-unit id="1202e6b2d57c7ee8995daa820672658a3e0badef" translate="yes" xml:space="preserve">
          <source>In Electron, Node.js and Chromium share a single V8 instance&amp;mdash;usually the version that Chromium is using. Most of the time this &lt;em&gt;just works&lt;/em&gt; but sometimes it means patching Node.js.</source>
          <target state="translated">Electronでは、Node.jsとChromiumは単一のV8インスタンスを共有します。通常はChromiumが使用しているバージョンです。ほとんどの場合これは&lt;em&gt;機能します&lt;/em&gt;が、Node.jsにパッチを適用することを意味する場合もあります。</target>
        </trans-unit>
        <trans-unit id="3034223aae286e52538a3884619c4b3277a74c70" translate="yes" xml:space="preserve">
          <source>In Electron, for the APIs that take images, you can pass either file paths or &lt;code&gt;NativeImage&lt;/code&gt; instances. An empty image will be used when &lt;code&gt;null&lt;/code&gt; is passed.</source>
          <target state="translated">Electronでは、画像を取得するAPIの場合、ファイルパスまたは &lt;code&gt;NativeImage&lt;/code&gt; インスタンスを渡すことができます。 &lt;code&gt;null&lt;/code&gt; が渡されると、空の画像が使用されます。</target>
        </trans-unit>
        <trans-unit id="b349f269ed56f6dd1e5062315e66fa6cb87823e6" translate="yes" xml:space="preserve">
          <source>In Electron, the entry point is a JavaScript script. Instead of providing a URL directly, you manually create a browser window and load an HTML file using the API. You also need to listen to window events to decide when to quit the application.</source>
          <target state="translated">Electronでは、エントリーポイントはJavaScriptスクリプトです。URLを直接提供するのではなく、手動でブラウザウィンドウを作成し、APIを使ってHTMLファイルを読み込みます。また、アプリケーションを終了するタイミングを決定するために、ウィンドウイベントをリッスンする必要があります。</target>
        </trans-unit>
        <trans-unit id="14187e1fe61b244be8f4e80375b8a9c8e7433f8a" translate="yes" xml:space="preserve">
          <source>In Electron, the entry point is always a JavaScript script. Instead of providing a URL directly, you manually create a browser window and load an HTML file using the API. You also need to listen to window events to decide when to quit the application.</source>
          <target state="translated">Electronでは、エントリーポイントは常にJavaScriptスクリプトです。URLを直接提供する代わりに、手動でブラウザウィンドウを作成し、APIを使用してHTMLファイルをロードします。また、アプリケーションを終了するタイミングを決定するために、ウィンドウイベントをリッスンする必要があります。</target>
        </trans-unit>
        <trans-unit id="63df86282942316da6f7f2debaa8b9d3f7f75671" translate="yes" xml:space="preserve">
          <source>In Electron, the process that runs &lt;code&gt;package.json&lt;/code&gt;'s &lt;code&gt;main&lt;/code&gt; script is called &lt;strong&gt;the main process&lt;/strong&gt;. The script that runs in the main process can display a GUI by creating web pages. An Electron app always has one main process, but never more.</source>
          <target state="translated">Electronでは、 &lt;code&gt;package.json&lt;/code&gt; の &lt;code&gt;main&lt;/code&gt; スクリプトを実行するプロセスを&lt;strong&gt;メインプロセス&lt;/strong&gt;と呼び&lt;strong&gt;ます&lt;/strong&gt;。メインプロセスで実行されるスクリプトは、Webページを作成してGUIを表示できます。Electronアプリには常に1つのメインプロセスがありますが、それ以上はありません。</target>
        </trans-unit>
        <trans-unit id="37b502635f1118a89c49c89684115bf4576afe89" translate="yes" xml:space="preserve">
          <source>In Electron, we have several ways to communicate between the main process and renderer processes. Like &lt;a href=&quot;../api/ipc-renderer&quot;&gt;&lt;code&gt;ipcRenderer&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../api/ipc-main&quot;&gt;&lt;code&gt;ipcMain&lt;/code&gt;&lt;/a&gt; modules for sending messages, and the &lt;a href=&quot;../api/remote&quot;&gt;remote&lt;/a&gt; module for RPC style communication. There is also an FAQ entry on &lt;a href=&quot;../faq#how-to-share-data-between-web-pages&quot;&gt;how to share data between web pages&lt;/a&gt;.</source>
          <target state="translated">Electronでは、メインプロセスとレンダラープロセスの間で通信する方法がいくつかあります。メッセージを送信するための&lt;a href=&quot;../api/ipc-renderer&quot;&gt; &lt;code&gt;ipcRenderer&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;../api/ipc-main&quot;&gt; &lt;code&gt;ipcMain&lt;/code&gt; &lt;/a&gt;モジュール、およびRPCスタイルの通信のための&lt;a href=&quot;../api/remote&quot;&gt;リモート&lt;/a&gt;モジュールと同様です。&lt;a href=&quot;../faq#how-to-share-data-between-web-pages&quot;&gt;Webページ間でデータを共有する方法&lt;/a&gt;に関するFAQエントリもあります。</target>
        </trans-unit>
        <trans-unit id="1a0df57b98ac115921f2ce0f52c5cef0f577cce5" translate="yes" xml:space="preserve">
          <source>In NW.js the main entry point of an application is a web page or a JS script. You specify a html or js file in the &lt;code&gt;package.json&lt;/code&gt; and it is opened in a browser window as the application's main window (in case of an html entrypoint) or the script is executed.</source>
          <target state="translated">NW.jsでは、アプリケーションの主なエントリポイントはWebページまたはJSスクリプトです。 &lt;code&gt;package.json&lt;/code&gt; でhtmlまたはjsファイルを指定すると、アプリケーションのメインウィンドウ（htmlエントリポイントの場合）またはスクリプトが実行されるときに、ブラウザーウィンドウで開かれます。</target>
        </trans-unit>
        <trans-unit id="3b25c7d6b9167a18b1209e7e736a5bf9ae9c224f" translate="yes" xml:space="preserve">
          <source>In NW.js, the Node integration in web pages requires patching Chromium to work, while in Electron we chose a different way to integrate the &lt;code&gt;libuv&lt;/code&gt; loop with each platform's message loop to avoid hacking Chromium. See the &lt;a href=&quot;https://github.com/electron/electron/tree/master/lib/common&quot;&gt;&lt;code&gt;node_bindings&lt;/code&gt;&lt;/a&gt; code for how that was done.</source>
          <target state="translated">NW.jsでは、Webページでのノード統合にはChromiumにパッチを適用する必要がありますが、Electronでは、Chromiumのハッキングを回避するために、 &lt;code&gt;libuv&lt;/code&gt; ループを各プラットフォームのメッセージループと統合する別の方法を選択しました。それがどのように行われたかについては、&lt;a href=&quot;https://github.com/electron/electron/tree/master/lib/common&quot;&gt; &lt;code&gt;node_bindings&lt;/code&gt; &lt;/a&gt;コードを参照してください。</target>
        </trans-unit>
        <trans-unit id="c8afc68a42dc2274d210dd3bcb2dc90a34aef201" translate="yes" xml:space="preserve">
          <source>In NW.js, the Node integration in web pages requires patching Chromium to work, while in Electron we chose a different way to integrate the libuv loop with each platform's message loop to avoid hacking Chromium. See the &lt;a href=&quot;https://github.com/electron/electron/tree/master/atom/common&quot;&gt;&lt;code&gt;node_bindings&lt;/code&gt;&lt;/a&gt; code for how that was done.</source>
          <target state="translated">NW.jsでは、Webページでのノード統合にChromiumのパッチを適用する必要がありますが、エレクトロンでは、Chromiumのハッキングを回避するためにlibuvループを各プラットフォームのメッセージループと統合する別の方法を選択しました。その方法については、&lt;a href=&quot;https://github.com/electron/electron/tree/master/atom/common&quot;&gt; &lt;code&gt;node_bindings&lt;/code&gt; &lt;/a&gt;コードを参照してください。</target>
        </trans-unit>
        <trans-unit id="89e76feba5d7bd3189916cba504f396c76fbbd79" translate="yes" xml:space="preserve">
          <source>In NW.js, the main entry point of an application can be an HTML web page. In that case, NW.js will open the given entry point in a browser window.</source>
          <target state="translated">NW.jsでは、アプリケーションのメインエントリーポイントがHTMLのWebページになることがあります。その場合、NW.jsは指定されたエントリーポイントをブラウザのウィンドウで開きます。</target>
        </trans-unit>
        <trans-unit id="ef45d1cc4d48650ae9b6257f804949f11c64aa48" translate="yes" xml:space="preserve">
          <source>In Node.js and Electron, each running process has a &lt;code&gt;process&lt;/code&gt; object. This object is a global that provides information about, and control over, the current process. As a global, it is always available to applications without using require().</source>
          <target state="translated">Node.jsとElectronでは、実行中の各プロセスに &lt;code&gt;process&lt;/code&gt; オブジェクトがあります。このオブジェクトは、現在のプロセスに関する情報を提供し、制御するグローバルです。グローバルとして、require（）を使用せずにアプリケーションで常に使用できます。</target>
        </trans-unit>
        <trans-unit id="06a2578fe47cfb3fe4a65aa1152d38d6988feb9c" translate="yes" xml:space="preserve">
          <source>In a frameless window the dragging behavior may conflict with selecting text. For example, when you drag the titlebar you may accidentally select the text on the titlebar. To prevent this, you need to disable text selection within a draggable area like this:</source>
          <target state="translated">フレームレスウィンドウでは、ドラッグ動作とテキストの選択が衝突することがあります。例えば、タイトルバーをドラッグすると、誤ってタイトルバー上のテキストを選択してしまうことがあります。これを防ぐには、このようにドラッグ可能な領域内でのテキスト選択を無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="fd36a9edb29970d52de8da21b0c6a4fa6aa74ad9" translate="yes" xml:space="preserve">
          <source>In a frameless window the dragging behaviour may conflict with selecting text. For example, when you drag the titlebar you may accidentally select the text on the titlebar. To prevent this, you need to disable text selection within a draggable area like this:</source>
          <target state="translated">フレームレスウィンドウでは、ドラッグの動作がテキストの選択と衝突することがあります。例えば、タイトルバーをドラッグすると、誤ってタイトルバー上のテキストを選択してしまうことがあります。これを防ぐには、このようにドラッグ可能な領域内でのテキスト選択を無効にする必要があります。</target>
        </trans-unit>
        <trans-unit id="0993be2098f3d2d823e3f842cc460f60cc7dc51f" translate="yes" xml:space="preserve">
          <source>In a web page, files in an archive can be requested with the &lt;code&gt;file:&lt;/code&gt; protocol. Like the Node API, &lt;code&gt;asar&lt;/code&gt; archives are treated as directories.</source>
          <target state="translated">Webページでは、アーカイブ &lt;code&gt;file:&lt;/code&gt; はfile：プロトコルでリクエストできます。Node APIと同様に、 &lt;code&gt;asar&lt;/code&gt; アーカイブはディレクトリとして扱われます。</target>
        </trans-unit>
        <trans-unit id="4ebbe08fb4030b6ca8614a5b9c6fc5a297df17c6" translate="yes" xml:space="preserve">
          <source>In addition to changing the architecture, you can also specify the platform (e.g., &lt;code&gt;win32&lt;/code&gt;, &lt;code&gt;linux&lt;/code&gt;, etc.) using the &lt;code&gt;--platform&lt;/code&gt; flag:</source>
          <target state="translated">アーキテクチャの変更に加えて、あなたも（例えば、プラットフォームを指定することができます &lt;code&gt;win32&lt;/code&gt; の、 &lt;code&gt;linux&lt;/code&gt; 使用など） &lt;code&gt;--platform&lt;/code&gt; フラグ：</target>
        </trans-unit>
        <trans-unit id="ad38744a2cd250359b7a0139989ab544e5c30bfd" translate="yes" xml:space="preserve">
          <source>In addition to these methods, the child window implements &lt;code&gt;window.opener&lt;/code&gt; object with no properties and a single method.</source>
          <target state="translated">これらのメソッドに加えて、子ウィンドウは、プロパティなしで単一のメソッドを持つ &lt;code&gt;window.opener&lt;/code&gt; オブジェクトを実装します。</target>
        </trans-unit>
        <trans-unit id="af93f2d22fd400e353ce8610b9a34ece6504c189" translate="yes" xml:space="preserve">
          <source>In addition, carefully examine the libraries you use. Are they really necessary? &lt;code&gt;jQuery&lt;/code&gt;, for example, was such a success that many of its features are now part of the &lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;standard JavaScript feature set available&lt;/a&gt;.</source>
          <target state="translated">さらに、使用するライブラリを注意深く調べてください。それらは本当に必要ですか？たとえば、 &lt;code&gt;jQuery&lt;/code&gt; は大成功を収めたため、その機能の多くは現在、&lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;利用可能な標準のJavaScript機能セットの&lt;/a&gt;一部になっています。</target>
        </trans-unit>
        <trans-unit id="eb6b63b8a09f8385b54d78c9291e4e4e947d73b7" translate="yes" xml:space="preserve">
          <source>In addition, the exe is launched inside the appx model - meaning that it can use many of the APIs available to the Universal Windows Platform. To gain even more capabilities, an Electron app can pair up with an invisible UWP background task launched together with the &lt;code&gt;exe&lt;/code&gt; - sort of launched as a sidekick to run tasks in the background, receive push notifications, or to communicate with other UWP applications.</source>
          <target state="translated">さらに、exeはappxモデル内で起動されます。つまり、ユニバーサルWindowsプラットフォームで利用可能な多くのAPIを使用できます。さらに多くの機能を取得するために、Electronアプリは、 &lt;code&gt;exe&lt;/code&gt; と共に起動される非表示のUWPバックグラウンドタスクとペアにすることができます-一種のサイドキックとして起動され、バックグラウンドでタスクを実行したり、プッシュ通知を受信したり、他のUWPアプリケーションと通信したりできます。</target>
        </trans-unit>
        <trans-unit id="7f65725b617730ca820bb32d3b898b98d459f50d" translate="yes" xml:space="preserve">
          <source>In addition, there are some subtle differences on each platform:</source>
          <target state="translated">また、プラットフォームごとに微妙な違いがあります。</target>
        </trans-unit>
        <trans-unit id="7f2fa843ea25b67d9f9124439c22087532ac27ad" translate="yes" xml:space="preserve">
          <source>In all cases, you will need to have the &lt;code&gt;snapcraft&lt;/code&gt; tool installed. We recommend building on Ubuntu 16.04 (or the current LTS).</source>
          <target state="translated">いずれの場合も、 &lt;code&gt;snapcraft&lt;/code&gt; ツールをインストールする必要があります。Ubuntu 16.04（または現在のLTS）でビルドすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="88eb93dee96b67a7045b74d8bbad7d7a85a57f79" translate="yes" xml:space="preserve">
          <source>In almost all cases, these errors are the result of network problems and not actual issues with the &lt;code&gt;electron&lt;/code&gt; npm package. Errors like &lt;code&gt;ELIFECYCLE&lt;/code&gt;, &lt;code&gt;EAI_AGAIN&lt;/code&gt;, &lt;code&gt;ECONNRESET&lt;/code&gt;, and &lt;code&gt;ETIMEDOUT&lt;/code&gt; are all indications of such network problems. The best resolution is to try switching networks, or wait a bit and try installing again.</source>
          <target state="translated">ほとんどすべての場合、これらのエラーはネットワークの問題の結果であり、 &lt;code&gt;electron&lt;/code&gt; npmパッケージの実際の問題ではありません。以下のようなエラー &lt;code&gt;ELIFECYCLE&lt;/code&gt; 、 &lt;code&gt;EAI_AGAIN&lt;/code&gt; 、 &lt;code&gt;ECONNRESET&lt;/code&gt; 、および &lt;code&gt;ETIMEDOUT&lt;/code&gt; は、このようなネットワークの問題のすべての兆候です。最善の解決策は、ネットワークの切り替えを試みるか、少し待ってから再度インストールを試みることです。</target>
        </trans-unit>
        <trans-unit id="6ad054ebef9c59dced1a818e17f21ba9bc619b06" translate="yes" xml:space="preserve">
          <source>In an ideal world, your application wouldn't need the network to operate at all. To get there, you must understand what resources your app is downloading - and how large those resources are.</source>
          <target state="translated">理想的な世界では、アプリケーションが動作するのにネットワークは全く必要ありません。そのためには、アプリがダウンロードしているリソースと、そのリソースの大きさを理解する必要があります。</target>
        </trans-unit>
        <trans-unit id="5d02c9a4ff99b3ea1cc26fddc98762a6d30daa6e" translate="yes" xml:space="preserve">
          <source>In general, all the upstream projects we work with are friendly folks and are often happy to accept refactorings that allow the code in question to be compatible with both Electron and the upstream project. (See e.g. &lt;a href=&quot;https://chromium-review.googlesource.com/c/chromium/src/+/1637040&quot;&gt;this&lt;/a&gt; change in Chromium, which allowed us to remove a patch that did the same thing, or &lt;a href=&quot;https://github.com/nodejs/node/pull/22110&quot;&gt;this&lt;/a&gt; change in Node, which was a no-op for Node but fixed a bug in Electron.) &lt;strong&gt;We should aim to upstream changes whenever we can, and avoid indefinite-lifetime patches&lt;/strong&gt;.</source>
          <target state="translated">一般に、私たちが協力しているすべてのアップストリームプロジェクトは友好的な人々であり、問​​題のコードがElectronとアップストリームプロジェクトの両方と互換性を持つことを可能にするリファクタリングを喜んで受け入れます。（たとえば、同じことを行うパッチを削除できるChromiumの&lt;a href=&quot;https://chromium-review.googlesource.com/c/chromium/src/+/1637040&quot;&gt;この&lt;/a&gt;変更、またはNodeの操作は行われなかったがElectronのバグを修正したNodeの&lt;a href=&quot;https://github.com/nodejs/node/pull/22110&quot;&gt;この&lt;/a&gt;変更を参照し&lt;strong&gt;てください&lt;/strong&gt;。）&lt;strong&gt;いつでもアップストリームの変更を目指す必要があり&lt;/strong&gt;ます。&lt;strong&gt;有効期間が無期限のパッチを回避できます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d0732649820524d2f9b56ebe8bdbd3d628fa8ed9" translate="yes" xml:space="preserve">
          <source>In macOS 10.14 Mojave, Apple introduced a new &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/&quot;&gt;system-wide dark mode&lt;/a&gt; for all macOS computers. If your Electron app has a dark mode, you can make it follow the system-wide dark mode setting using &lt;a href=&quot;../api/native-theme&quot;&gt;the &lt;code&gt;nativeTheme&lt;/code&gt; api&lt;/a&gt;.</source>
          <target state="translated">macOS 10.14 Mojaveで、AppleはすべてのmacOSコンピューターに新しい&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/&quot;&gt;システム全体のダークモード&lt;/a&gt;を導入しました。 Electronアプリにダークモードがある場合は&lt;a href=&quot;../api/native-theme&quot;&gt;、 &lt;code&gt;nativeTheme&lt;/code&gt; api&lt;/a&gt;を使用して、システム全体のダークモード設定に従うようにすることができます。</target>
        </trans-unit>
        <trans-unit id="98a90ed219735fb98579fd275bd2b96c22bda9fd" translate="yes" xml:space="preserve">
          <source>In macOS 10.14 Mojave, Apple introduced a new &lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/&quot;&gt;system-wide dark mode&lt;/a&gt; for all macOS computers. If your Electron app has a dark mode, you can make it follow the system-wide dark mode setting using &lt;a href=&quot;api/native-theme&quot;&gt;the &lt;code&gt;nativeTheme&lt;/code&gt; api&lt;/a&gt;.</source>
          <target state="translated">macOS 10.14 Mojaveで、AppleはすべてのmacOSコンピューターに新しい&lt;a href=&quot;https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/dark-mode/&quot;&gt;システム全体のダークモード&lt;/a&gt;を導入しました。 Electronアプリにダークモードがある場合は&lt;a href=&quot;api/native-theme&quot;&gt;、 &lt;code&gt;nativeTheme&lt;/code&gt; api&lt;/a&gt;を使用して、システム全体のダークモード設定に従うようにすることができます。</target>
        </trans-unit>
        <trans-unit id="4d458bea96941dcf11682801623ac1a7fcc8de1d" translate="yes" xml:space="preserve">
          <source>In macOS 10.15 Catalina, Apple introduced a new &quot;automatic&quot; dark mode option for all macOS computers. In order for the &lt;code&gt;nativeTheme.shouldUseDarkColors&lt;/code&gt; and &lt;code&gt;Tray&lt;/code&gt; APIs to work correctly in this mode on Catalina, you need to use Electron &lt;code&gt;&amp;gt;=7.0.0&lt;/code&gt;, or set &lt;code&gt;NSRequiresAquaSystemAppearance&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in your &lt;code&gt;Info.plist&lt;/code&gt; file for older versions. Both &lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt;Electron Packager&lt;/a&gt; and &lt;a href=&quot;https://www.electronforge.io/&quot;&gt;Electron Forge&lt;/a&gt; have a &lt;a href=&quot;https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html#darwindarkmodesupport&quot;&gt;&lt;code&gt;darwinDarkModeSupport&lt;/code&gt; option&lt;/a&gt; to automate the &lt;code&gt;Info.plist&lt;/code&gt; changes during app build time.</source>
          <target state="translated">macOS 10.15 Catalinaで、AppleはすべてのmacOSコンピューターに新しい「自動」ダークモードオプションを導入しました。ためには &lt;code&gt;nativeTheme.shouldUseDarkColors&lt;/code&gt; と &lt;code&gt;Tray&lt;/code&gt; カタリナに、このモードで正常に動作するためのAPIには、電子を使用する必要があります &lt;code&gt;&amp;gt;=7.0.0&lt;/code&gt; 、または設定 &lt;code&gt;NSRequiresAquaSystemAppearance&lt;/code&gt; をする &lt;code&gt;false&lt;/code&gt; あなたに &lt;code&gt;Info.plist&lt;/code&gt; の古いバージョンのファイル。&lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt;ElectronPackager&lt;/a&gt;と&lt;a href=&quot;https://www.electronforge.io/&quot;&gt;ElectronForgeの&lt;/a&gt;両方に、アプリのビルド時に &lt;code&gt;Info.plist&lt;/code&gt; の変更を自動化する&lt;a href=&quot;https://electron.github.io/electron-packager/master/interfaces/electronpackager.options.html#darwindarkmodesupport&quot;&gt; &lt;code&gt;darwinDarkModeSupport&lt;/code&gt; オプション&lt;/a&gt;があります。</target>
        </trans-unit>
        <trans-unit id="9fdc7b529c347177c59ced6d1fe81f09d890e189" translate="yes" xml:space="preserve">
          <source>In many server contexts, startup time is virtually irrelevant. A Node.js server that requires information about all ports is likely actually &quot;more performant&quot; if it loads all required information into memory whenever the server boots at the benefit of serving requests faster. The module discussed in this example is not a &quot;bad&quot; module. Electron apps, however, should not be loading, parsing, and storing in memory information that it does not actually need.</source>
          <target state="translated">多くのサーバのコンテキストでは、起動時間は事実上関係ありません。すべてのポートに関する情報を必要とする Node.js サーバは、サーバが起動するたびに必要なすべての情報をメモリにロードしたほうが、実際には「よりパフォーマンスが高い」可能性が高いです。この例で説明したモジュールは「悪い」モジュールではありません。しかし、Electronアプリは、実際には必要のない情報をロードしたり、解析したり、メモリに保存したりするべきではありません。</target>
        </trans-unit>
        <trans-unit id="5ae6c186beda7cc6d08d8d308468631bd4cc4a2f" translate="yes" xml:space="preserve">
          <source>In most cases, you should do everything in the &lt;code&gt;ready&lt;/code&gt; event handler.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;ready&lt;/code&gt; イベントハンドラーですべてを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="195f1e249de6eef85e19604ad6504295fedc65f1" translate="yes" xml:space="preserve">
          <source>In most cases, you should just do everything in the &lt;code&gt;ready&lt;/code&gt; event handler.</source>
          <target state="translated">ほとんどの場合、 &lt;code&gt;ready&lt;/code&gt; イベントハンドラーですべてを実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="1c30404658bd31cd20bc5c1bc6d71f1b96198591" translate="yes" xml:space="preserve">
          <source>In normal browsers, web pages usually run in a sandboxed environment and are not allowed access to native resources. Electron users, however, have the power to use Node.js APIs in web pages allowing lower level operating system interactions.</source>
          <target state="translated">通常のブラウザでは、ウェブページは通常サンドボックス環境で実行され、ネイティブリソースへのアクセスは許可されていません。しかし、Electronユーザは、WebページでNode.js APIを使用することで、より低いレベルのオペレーティングシステムとの相互作用を可能にします。</target>
        </trans-unit>
        <trans-unit id="5fc60981dde25a35adbe4ec9983a99588cfe1f9d" translate="yes" xml:space="preserve">
          <source>In opposition to traditional UWP apps, packaged apps currently need to undergo a manual verification process, for which you can apply &lt;a href=&quot;https://developer.microsoft.com/en-us/windows/projects/campaigns/desktop-bridge&quot;&gt;here&lt;/a&gt;. In the meantime, all users will be able to install your package by double-clicking it, so a submission to the store might not be necessary if you're looking for an easier installation method. In managed environments (usually enterprises), the &lt;code&gt;Add-AppxPackage&lt;/code&gt;&lt;a href=&quot;https://technet.microsoft.com/en-us/library/hh856048.aspx&quot;&gt;PowerShell Cmdlet can be used to install it in an automated fashion&lt;/a&gt;.</source>
          <target state="translated">従来のUWPアプリとは異なり、パッケージ化されたアプリは現在、&lt;a href=&quot;https://developer.microsoft.com/en-us/windows/projects/campaigns/desktop-bridge&quot;&gt;ここで&lt;/a&gt;適用できる手動の検証プロセスを受ける必要があります。その間、すべてのユーザーがパッケージをダブルクリックしてインストールできるため、より簡単なインストール方法を探している場合は、ストアへの送信が不要な場合があります。管理された環境（通常はエンタープライズ）では、 &lt;code&gt;Add-AppxPackage&lt;/code&gt; &lt;a href=&quot;https://technet.microsoft.com/en-us/library/hh856048.aspx&quot;&gt;PowerShellコマンドレットを使用して自動化された方法でインストールできます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="17b33efa1e685afd83e922c98be3ad7481f7164a" translate="yes" xml:space="preserve">
          <source>In order for extra notification buttons to work on macOS your app must meet the following criteria.</source>
          <target state="translated">macOS上で追加の通知ボタンを動作させるには、アプリが以下の基準を満たしている必要があります。</target>
        </trans-unit>
        <trans-unit id="f6e38a957812e9a29ac5c2d2a05f0c16dc841b4a" translate="yes" xml:space="preserve">
          <source>In order to avoid the complexity of building all of Chromium, Electron uses &lt;a href=&quot;https://github.com/electron/libchromiumcontent&quot;&gt;&lt;code&gt;libchromiumcontent&lt;/code&gt;&lt;/a&gt; to access Chromium's Content API. &lt;code&gt;libchromiumcontent&lt;/code&gt; is a single shared library that includes the Chromium Content module and all of its dependencies. Users don't need a powerful machine to build Electron.</source>
          <target state="translated">Chromiumのすべてを構築する複雑さを回避するために、Electronは&lt;a href=&quot;https://github.com/electron/libchromiumcontent&quot;&gt; &lt;code&gt;libchromiumcontent&lt;/code&gt; &lt;/a&gt;を使用してChromiumのコンテンツAPIにアクセスします。 &lt;code&gt;libchromiumcontent&lt;/code&gt; は、Chromium Contentモジュールとそのすべての依存関係を含む単一の共有ライブラリです。ユーザーは、Electronを構築するための強力なマシンを必要としません。</target>
        </trans-unit>
        <trans-unit id="002692fd3df32049bef10d52e5d3b2dc239a4e1a" translate="yes" xml:space="preserve">
          <source>In order to be able to use this feature on Windows, your application has to be registered as a handler of the file type of the document, otherwise the file won't appear in JumpList even after you have added it. You can find everything on registering your application in &lt;a href=&quot;https://msdn.microsoft.com/en-us/library/cc144104(VS.85).aspx&quot;&gt;Application Registration&lt;/a&gt;.</source>
          <target state="translated">Windowsでこの機能を使用できるようにするには、アプリケーションをドキュメントのファイルタイプのハンドラーとして登録する必要があります。そうしないと、ファイルを追加した後でもファイルがJumpListに表示されません。&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/cc144104(VS.85).aspx&quot;&gt;アプリケーションの登録&lt;/a&gt;に関するすべての情報は、アプリケーションの登録にあります。</target>
        </trans-unit>
        <trans-unit id="6017616527bbb59b4e2288b1e97e6e007923f3e5" translate="yes" xml:space="preserve">
          <source>In order to keep Electron small (file size) and sustainable (the spread of dependencies and APIs) the project limits the scope of the core project.</source>
          <target state="translated">Electronを小さく(ファイルサイズを小さく)、持続可能に(依存関係やAPIの普及を)保つために、プロジェクトはコアプロジェクトの範囲を制限しています。</target>
        </trans-unit>
        <trans-unit id="9e93969c6ab6312de3ab1b1363ee597f5e3607f7" translate="yes" xml:space="preserve">
          <source>In order to land, a pull request needs to be reviewed and approved by at least one Electron Code Owner and pass CI. After that, if there are no objections from other contributors, the pull request can be merged.</source>
          <target state="translated">プルリクエストを許可するためには、少なくとも1人のElectron Code Ownerによるレビューと承認を受け、CIを通過する必要があります。その後、他のコントリビューターからの異議がなければ、プルリクエストをマージすることができます。</target>
        </trans-unit>
        <trans-unit id="5038620daa1de28b5745b004ae182c0ced6a13fd" translate="yes" xml:space="preserve">
          <source>In order to run your package, your users will need Windows 10 with the so-called &quot;Anniversary Update&quot; - details on how to update Windows can be found &lt;a href=&quot;https://blogs.windows.com/windowsexperience/2016/08/02/how-to-get-the-windows-10-anniversary-update&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">パッケージを実行するには、ユーザーはいわゆる「記念日の更新」を備えたWindows 10を必要とします。Windowsの更新方法の詳細については、&lt;a href=&quot;https://blogs.windows.com/windowsexperience/2016/08/02/how-to-get-the-windows-10-anniversary-update&quot;&gt;こちらをご覧ください&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="e6c6f45a1b0186062309a1e7bd6d2d0cdccc0365" translate="yes" xml:space="preserve">
          <source>In order to satisfy all requirements for app sandboxing, the following modules have been disabled in the MAS build:</source>
          <target state="translated">アプリのサンドボックス化に関するすべての要件を満たすために、MASのビルドでは以下のモジュールが無効化されています。</target>
        </trans-unit>
        <trans-unit id="2aa9e4b60cc508d244b171006423246637a0b33f" translate="yes" xml:space="preserve">
          <source>In other words, when the sandbox is enabled, the renderers can only make changes to the system by delegating tasks to the main process via IPC. &lt;a href=&quot;https://www.chromium.org/developers/design-documents/sandbox&quot;&gt;Here's&lt;/a&gt; more information about the sandbox.</source>
          <target state="translated">つまり、サンドボックスが有効になっている場合、レンダラーは、IPCを介してタスクをメインプロセスに委任することによってのみシステムに変更を加えることができます。&lt;a href=&quot;https://www.chromium.org/developers/design-documents/sandbox&quot;&gt;ここだ&lt;/a&gt;サンドボックスの詳細については。</target>
        </trans-unit>
        <trans-unit id="fd975f4fa62673732c3cd8653b8c7c96a7c5a05e" translate="yes" xml:space="preserve">
          <source>In particular, it's important that:</source>
          <target state="translated">特に重要なのは</target>
        </trans-unit>
        <trans-unit id="3c4a5f97c64371ef090e35ab1c804d051479e9b8" translate="yes" xml:space="preserve">
          <source>In sandboxed renderers the &lt;code&gt;process&lt;/code&gt; object contains only a subset of the APIs:</source>
          <target state="translated">サンドボックス化されたレンダラーでは、 &lt;code&gt;process&lt;/code&gt; オブジェクトにはAPIのサブセットのみが含まれます。</target>
        </trans-unit>
        <trans-unit id="96067b815c9925760b852202bccc2c19a357cb7a" translate="yes" xml:space="preserve">
          <source>In short, a seemingly excellent module written primarily for Node.js servers running Linux might be bad news for your app's performance. In this particular example, the correct solution was to use no module at all, and to instead use connectivity checks included in later versions of Chromium.</source>
          <target state="translated">要するに、Linuxで動作するNode.jsサーバのために書かれた一見優れたモジュールは、アプリのパフォーマンスにとって悪いニュースかもしれません。この特定の例では、正しい解決策はモジュールを全く使用せず、代わりに、Chromium の後のバージョンに含まれる接続性チェックを使用することでした。</target>
        </trans-unit>
        <trans-unit id="ca822e94dc51a45c6a07d596e0cce39c754e99f4" translate="yes" xml:space="preserve">
          <source>In short, allocate resources &quot;just in time&quot; rather than allocating them all when your app starts.</source>
          <target state="translated">要するに、アプリが起動したらすべてのリソースを割り当てるのではなく、「ギリギリ」にリソースを割り当てましょう。</target>
        </trans-unit>
        <trans-unit id="3ac12e0a1bc0bd8fd393384502411912c0f8b64c" translate="yes" xml:space="preserve">
          <source>In some cases, the &lt;code&gt;NSImageName&lt;/code&gt; doesn't match its string representation; one example of this is &lt;code&gt;NSFolderImageName&lt;/code&gt;, whose string representation would actually be &lt;code&gt;NSFolder&lt;/code&gt;. Therefore, you'll need to determine the correct string representation for your image before passing it in. This can be done with the following:</source>
          <target state="translated">場合によっては、 &lt;code&gt;NSImageName&lt;/code&gt; がその文字列表現と一致しません。この一例は &lt;code&gt;NSFolderImageName&lt;/code&gt; であり、その文字列表現は実際には &lt;code&gt;NSFolder&lt;/code&gt; になります。したがって、画像を渡す前に、画像の正しい文字列表現を決定する必要があります。これは、次の方法で実行できます。</target>
        </trans-unit>
        <trans-unit id="6c2cd704ac091728bfdf7057438f3689c7afa99c" translate="yes" xml:space="preserve">
          <source>In some cases, you will need to have the &lt;code&gt;snapcraft&lt;/code&gt; tool installed. Instructions to install &lt;code&gt;snapcraft&lt;/code&gt; for your particular distribution are available &lt;a href=&quot;https://snapcraft.io/docs/installing-snapcraft&quot;&gt;here&lt;/a&gt;.</source>
          <target state="translated">場合によっては、 &lt;code&gt;snapcraft&lt;/code&gt; ツールをインストールする必要があります。特定のディストリビューション用に &lt;code&gt;snapcraft&lt;/code&gt; をインストールする手順については、&lt;a href=&quot;https://snapcraft.io/docs/installing-snapcraft&quot;&gt;こちら&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="add54ea319b290d6512f35724ac20b939ad3c263" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;release&lt;/code&gt; branch, verify that the release's files have been created:</source>
          <target state="translated">で &lt;code&gt;release&lt;/code&gt; ブランチ、リリースのファイルが作成されていることを確認します。</target>
        </trans-unit>
        <trans-unit id="7c0c7f9705ecc67c5757806bf976f1d5c21275cc" translate="yes" xml:space="preserve">
          <source>In the Main process(&lt;code&gt;main.js&lt;/code&gt; file), expand the received event with a path to the file that is being dragged and an icon:</source>
          <target state="translated">メインプロセス（ &lt;code&gt;main.js&lt;/code&gt; ファイル）で、ドラッグされているファイルへのパスとアイコンを使用して、受信したイベントを展開します。</target>
        </trans-unit>
        <trans-unit id="1b05098558dc728fe3efe959d2682edcea24e265" translate="yes" xml:space="preserve">
          <source>In the above code the &lt;a href=&quot;api/browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; that was created has Node.js disabled and can communicate only via IPC. The use of this option stops Electron from creating a Node.js runtime in the renderer. Also, within this new window &lt;code&gt;window.open&lt;/code&gt; follows the native behavior (by default Electron creates a &lt;a href=&quot;api/browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; and returns a proxy to this via &lt;code&gt;window.open&lt;/code&gt;).</source>
          <target state="translated">上記のコードでは、作成された&lt;a href=&quot;api/browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;でNode.jsが無効になっており、IPC経由でのみ通信できます。このオプションを使用すると、ElectronはレンダラーでNode.jsランタイムを作成できなくなります。また、この新しいウィンドウ内では、 &lt;code&gt;window.open&lt;/code&gt; はネイティブの動作に従います（デフォルトでは、Electronは&lt;a href=&quot;api/browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;を作成し、 &lt;code&gt;window.open&lt;/code&gt; を介してこれにプロキシを返します）。</target>
        </trans-unit>
        <trans-unit id="7dfe6082e8695706fcfeace5667ec9a145a1ae11" translate="yes" xml:space="preserve">
          <source>In the above code the &lt;a href=&quot;browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; that was created has Node.js disabled and can communicate only via IPC. The use of this option stops Electron from creating a Node.js runtime in the renderer. Also, within this new window &lt;code&gt;window.open&lt;/code&gt; follows the native behavior (by default Electron creates a &lt;a href=&quot;browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; and returns a proxy to this via &lt;code&gt;window.open&lt;/code&gt;).</source>
          <target state="translated">上記のコードでは、作成された&lt;a href=&quot;browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;でNode.jsが無効になっており、IPC経由でのみ通信できます。このオプションを使用すると、ElectronはレンダラーでNode.jsランタイムを作成できなくなります。また、この新しいウィンドウ内では、 &lt;code&gt;window.open&lt;/code&gt; はネイティブの動作に従います（デフォルトでは、Electronは&lt;a href=&quot;browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;を作成し、 &lt;code&gt;window.open&lt;/code&gt; を介してこれにプロキシを返します）。</target>
        </trans-unit>
        <trans-unit id="af7489da9de75d590f13f01cdc9c2b48b8b1b424" translate="yes" xml:space="preserve">
          <source>In the above code the &lt;a href=&quot;browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; that was created has node.js disabled and can communicate only via IPC. The use of this option stops electron from creating a node.js runtime in the renderer. Also, within this new window &lt;code&gt;window.open&lt;/code&gt; follows the native behaviour (by default electron creates a &lt;a href=&quot;browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; and returns a proxy to this via &lt;code&gt;window.open&lt;/code&gt;).</source>
          <target state="translated">上記のコードでは、作成された&lt;a href=&quot;browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;はnode.jsが無効になっており、IPC経由でのみ通信できます。このオプションを使用すると、electronがレンダラーでnode.jsランタイムを作成できなくなります。また、この新しいウィンドウ内では、 &lt;code&gt;window.open&lt;/code&gt; はネイティブの動作に従います（デフォルトでは、electronは&lt;a href=&quot;browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;を作成し、 &lt;code&gt;window.open&lt;/code&gt; を介してこれにプロキシを返します）。</target>
        </trans-unit>
        <trans-unit id="b6ba7cf42dca8a64f3fe2f70864af6cff82eb338" translate="yes" xml:space="preserve">
          <source>In the above example, we're doing a lot of work that's being executed as soon as the file is loaded. Do we need to get parsed files right away? Could we do this work a little later, when &lt;code&gt;getParsedFiles()&lt;/code&gt; is actually called?</source>
          <target state="translated">上記の例では、ファイルがロードされるとすぐに実行される多くの作業を行っています。解析されたファイルをすぐに取得する必要がありますか？ &lt;code&gt;getParsedFiles()&lt;/code&gt; が実際に呼び出されたときに、この作業を少し後で行うことができますか？</target>
        </trans-unit>
        <trans-unit id="dd8a333887f050bcaedb3788895a13b656bcd030" translate="yes" xml:space="preserve">
          <source>In the app, you'd need to write a simple handler for the RPC calls:</source>
          <target state="translated">アプリでは、RPC呼び出しのための簡単なハンドラを書く必要があります。</target>
        </trans-unit>
        <trans-unit id="8caa74ae2f7b42454248de05b842fae89740cc2b" translate="yes" xml:space="preserve">
          <source>In the browser window some HTML APIs like &lt;code&gt;requestFullScreen&lt;/code&gt; can only be invoked by a gesture from the user. Setting &lt;code&gt;userGesture&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; will remove this limitation.</source>
          <target state="translated">ブラウザーウィンドウでは、 &lt;code&gt;requestFullScreen&lt;/code&gt; などの一部のHTML API は、ユーザーからのジェスチャーによってのみ呼び出すことができます。 &lt;code&gt;userGesture&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定すると、この制限がなくなります。</target>
        </trans-unit>
        <trans-unit id="db52ca544e2d57543b2ade9a5da326a4317aad0a" translate="yes" xml:space="preserve">
          <source>In the case of a corrupted release with broken CI machines, we might have to re-upload the binaries for an already published release.</source>
          <target state="translated">壊れたCIマシンで破損したリリースの場合、すでに公開されているリリースのバイナリを再アップロードしなければならないかもしれません。</target>
        </trans-unit>
        <trans-unit id="65aff7f4d7a69e63a0aa2edd13236128f00b4935" translate="yes" xml:space="preserve">
          <source>In the example above, both &lt;a href=&quot;api/browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;win&lt;/code&gt; were remote objects and &lt;code&gt;new BrowserWindow&lt;/code&gt; didn't create a &lt;code&gt;BrowserWindow&lt;/code&gt; object in the renderer process. Instead, it created a &lt;code&gt;BrowserWindow&lt;/code&gt; object in the main process and returned the corresponding remote object in the renderer process, namely the &lt;code&gt;win&lt;/code&gt; object.</source>
          <target state="translated">上記の例では、&lt;a href=&quot;api/browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;win&lt;/code&gt; の両方がリモートオブジェクトであり、 &lt;code&gt;new BrowserWindow&lt;/code&gt; はレンダラープロセスで &lt;code&gt;BrowserWindow&lt;/code&gt; オブジェクトを作成しませんでした。代わりに、メインプロセスで &lt;code&gt;BrowserWindow&lt;/code&gt; オブジェクトを作成し、レンダラープロセスで対応するリモートオブジェクト、つまり &lt;code&gt;win&lt;/code&gt; オブジェクトを返しました。</target>
        </trans-unit>
        <trans-unit id="b49bd272eea5595d87ad5e2fe5c9c9b77041719c" translate="yes" xml:space="preserve">
          <source>In the example above, both &lt;a href=&quot;browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;win&lt;/code&gt; were remote objects and &lt;code&gt;new BrowserWindow&lt;/code&gt; didn't create a &lt;code&gt;BrowserWindow&lt;/code&gt; object in the renderer process. Instead, it created a &lt;code&gt;BrowserWindow&lt;/code&gt; object in the main process and returned the corresponding remote object in the renderer process, namely the &lt;code&gt;win&lt;/code&gt; object.</source>
          <target state="translated">上記の例では、&lt;a href=&quot;browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;win&lt;/code&gt; の両方がリモートオブジェクトであり、 &lt;code&gt;new BrowserWindow&lt;/code&gt; はレンダラープロセスで &lt;code&gt;BrowserWindow&lt;/code&gt; オブジェクトを作成しませんでした。代わりに、メインプロセスで &lt;code&gt;BrowserWindow&lt;/code&gt; オブジェクトを作成し、レンダラープロセスで対応するリモートオブジェクト、つまり &lt;code&gt;win&lt;/code&gt; オブジェクトを返しました。</target>
        </trans-unit>
        <trans-unit id="5074e68733d141bd5c5268004d80f2dacb17e13e" translate="yes" xml:space="preserve">
          <source>In the following example preload script, the later loaded website will have access to a &lt;code&gt;window.readConfig()&lt;/code&gt; method, but no Node.js features.</source>
          <target state="translated">次のプリロードスクリプトの例では、後でロードされたWebサイトは &lt;code&gt;window.readConfig()&lt;/code&gt; メソッドにアクセスできますが、Node.js機能はありません。</target>
        </trans-unit>
        <trans-unit id="414aa2ce159660a2aa729cc43d3da5d88f9d1618" translate="yes" xml:space="preserve">
          <source>In the following list, look for the VHD path name you got from Appveyor and then click on it.</source>
          <target state="translated">以下のリストで、Appveyorから取得したVHDパス名を探してクリックします。</target>
        </trans-unit>
        <trans-unit id="51b18288d03cd733f92b99f7141ed513739578d6" translate="yes" xml:space="preserve">
          <source>In the testing framework Spectron, you can now audit each window and &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; tag in your application. For example:</source>
          <target state="translated">テストフレームワークSpectronでは、アプリケーションの各ウィンドウと &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; タグを監査できます。例えば：</target>
        </trans-unit>
        <trans-unit id="1870f312bcf3ffda327f15732c46a2c3d4906421" translate="yes" xml:space="preserve">
          <source>In this example, on the author's machine, we saw that loading &lt;code&gt;request&lt;/code&gt; took almost half a second, whereas &lt;code&gt;node-fetch&lt;/code&gt; took dramatically less memory and less than 50ms.</source>
          <target state="translated">この例では、作成者のマシンで、ロード &lt;code&gt;request&lt;/code&gt; にほぼ0.5秒かかるのに対し、 &lt;code&gt;node-fetch&lt;/code&gt; かかるメモリは劇的に少なく、50ミリ秒未満であることがわかりました。</target>
        </trans-unit>
        <trans-unit id="0428ea8dae54fd10d81ecab5e1a0475b4a54689c" translate="yes" xml:space="preserve">
          <source>In this mode, you will be able to pass &lt;a href=&quot;https://nodejs.org/api/cli.html&quot;&gt;cli options&lt;/a&gt; to Node.js as you would when running the normal Node.js executable, with the exception of the following flags:</source>
          <target state="translated">このモードでは、次のフラグを除いて、通常のNode.js実行可能ファイルを実行する場合と同じように&lt;a href=&quot;https://nodejs.org/api/cli.html&quot;&gt;CLIオプション&lt;/a&gt;をNode.jsに渡すことができます。</target>
        </trans-unit>
        <trans-unit id="e109cb7fec054143478442624f3e7c73d3fd7ca9" translate="yes" xml:space="preserve">
          <source>In traditional Node.js development, we're used to putting all our &lt;code&gt;require()&lt;/code&gt; statements at the top. If you're currently writing your Electron application using the same strategy &lt;em&gt;and&lt;/em&gt; are using sizable modules that you do not immediately need, apply the same strategy and defer loading to a more opportune time.</source>
          <target state="translated">従来のNode.js開発では、すべての &lt;code&gt;require()&lt;/code&gt; ステートメントを一番上に置くことに慣れています。あなたが現在同じ戦略を使用して電子アプリケーションを書いている場合&lt;em&gt;と&lt;/em&gt;、あなたがすぐに必要としないというかなりのモジュールを使用している、同じ戦略とより多くの好機に延期荷重を適用します。</target>
        </trans-unit>
        <trans-unit id="1afa241f36d4217397dfec694d2d1215891c4684" translate="yes" xml:space="preserve">
          <source>In web pages, calling native GUI related APIs is not allowed because managing native GUI resources in web pages is very dangerous and it is easy to leak resources. If you want to perform GUI operations in a web page, the renderer process of the web page must communicate with the main process to request that the main process perform those operations.</source>
          <target state="translated">WebページでネイティブGUI関連のAPIを呼び出すことは、Webページ内でネイティブGUIのリソースを管理することは非常に危険であり、リソースが流出しやすいため禁止されています。WebページでGUI操作を行いたい場合は、Webページのレンダラープロセスがメインプロセスと通信して、メインプロセスにその操作を行うように要求する必要があります。</target>
        </trans-unit>
        <trans-unit id="c4d0e6c3e076cd6a699c60ad2b55fac7991337f3" translate="yes" xml:space="preserve">
          <source>In your renderer process, handle the &lt;code&gt;ondragstart&lt;/code&gt; event and forward the information to your main process.</source>
          <target state="translated">レンダラープロセスで、 &lt;code&gt;ondragstart&lt;/code&gt; イベントを処理し、情報をメインプロセスに転送します。</target>
        </trans-unit>
        <trans-unit id="fdaff53585816691fa4fe5c4dfd5b6e20360de51" translate="yes" xml:space="preserve">
          <source>In-App Purchase (macOS)</source>
          <target state="translated">アプリ内課金(macOS</target>
        </trans-unit>
        <trans-unit id="fcd33c35409267d26cf472bd170c7b44220760a0" translate="yes" xml:space="preserve">
          <source>In-app purchases on Mac App Store.</source>
          <target state="translated">Mac App Storeでのアプリ内課金。</target>
        </trans-unit>
        <trans-unit id="01b9ecc39af8da56d7570c19b704feba4523b1b2" translate="yes" xml:space="preserve">
          <source>IncomingMessage</source>
          <target state="translated">IncomingMessage</target>
        </trans-unit>
        <trans-unit id="8ae7bbd6069f22c66e50f126098e0615acb15d2b" translate="yes" xml:space="preserve">
          <source>Increase the capturer count by one. The page is considered visible when its browser window is hidden and the capturer count is non-zero. If you would like the page to stay hidden, you should ensure that &lt;code&gt;stayHidden&lt;/code&gt; is set to true.</source>
          <target state="translated">キャプチャーの数を1つ増やします。ブラウザウィンドウが非表示で、キャプチャ数がゼロ以外の場合、ページは表示されていると見なされます。ページを非表示のままにする場合は、 &lt;code&gt;stayHidden&lt;/code&gt; がtrueに設定されていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="13e9abca83628630f255579050b5c29afcf1c1f8" translate="yes" xml:space="preserve">
          <source>Indicates that response body has ended.</source>
          <target state="translated">レスポンスボディが終了したことを示す。</target>
        </trans-unit>
        <trans-unit id="52427cb53936c651c26d729f75fb470f91b58cab" translate="yes" xml:space="preserve">
          <source>Indicates the creation time of the application. The time is represented as number of milliseconds since epoch. It returns null if it is unable to get the process creation time.</source>
          <target state="translated">アプリケーションの作成時刻を示す。エポックからのミリ秒数で表されます。プロセスの作成時刻が取得できない場合はnullを返します。</target>
        </trans-unit>
        <trans-unit id="2339b8ad3625abec50c5fec9ccfe1b4c0adb5b6e" translate="yes" xml:space="preserve">
          <source>Indonesian</source>
          <target state="translated">Indonesian</target>
        </trans-unit>
        <trans-unit id="41081854a1a02c1d897267422d71fc0bdd712cd1" translate="yes" xml:space="preserve">
          <source>Initiates a download of the resource at &lt;code&gt;url&lt;/code&gt; without navigating.</source>
          <target state="translated">ナビゲートせずに、 &lt;code&gt;url&lt;/code&gt; リソースのダウンロードを開始します。</target>
        </trans-unit>
        <trans-unit id="56476d27ce24389481bda3f5413b884651cdc573" translate="yes" xml:space="preserve">
          <source>Initiates a download of the resource at &lt;code&gt;url&lt;/code&gt; without navigating. The &lt;code&gt;will-download&lt;/code&gt; event of &lt;code&gt;session&lt;/code&gt; will be triggered.</source>
          <target state="translated">ナビゲートせずに &lt;code&gt;url&lt;/code&gt; でリソースのダウンロードを開始します。 &lt;code&gt;will-download&lt;/code&gt; のイベント &lt;code&gt;session&lt;/code&gt; トリガされます。</target>
        </trans-unit>
        <trans-unit id="a9d29bf7f006a5266a616bc9d1b7d546179c25a2" translate="yes" xml:space="preserve">
          <source>Initiates a download of the resource at &lt;code&gt;url&lt;/code&gt;. The API will generate a &lt;a href=&quot;api/download-item&quot;&gt;DownloadItem&lt;/a&gt; that can be accessed with the &lt;a href=&quot;#event-will-download&quot;&gt;will-download&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; でリソースのダウンロードを開始します。APIは、&lt;a href=&quot;#event-will-download&quot;&gt;will-download&lt;/a&gt;イベントでアクセスできる&lt;a href=&quot;api/download-item&quot;&gt;DownloadItem&lt;/a&gt;を生成します。</target>
        </trans-unit>
        <trans-unit id="4377654b3e841e66a0e4552cf5bb0040f9de006d" translate="yes" xml:space="preserve">
          <source>Initiates a download of the resource at &lt;code&gt;url&lt;/code&gt;. The API will generate a &lt;a href=&quot;download-item&quot;&gt;DownloadItem&lt;/a&gt; that can be accessed with the &lt;a href=&quot;#event-will-download&quot;&gt;will-download&lt;/a&gt; event.</source>
          <target state="translated">&lt;code&gt;url&lt;/code&gt; でリソースのダウンロードを開始します。APIは、&lt;a href=&quot;#event-will-download&quot;&gt;will-download&lt;/a&gt;イベントでアクセスできる&lt;a href=&quot;download-item&quot;&gt;DownloadItem&lt;/a&gt;を生成します。</target>
        </trans-unit>
        <trans-unit id="e5e155b477fc18106c133eb62ec3dc25ba846ec1" translate="yes" xml:space="preserve">
          <source>Injects CSS into the current web page and returns a unique key for the inserted stylesheet.</source>
          <target state="translated">現在のウェブページにCSSを挿入し、挿入されたスタイルシートの一意のキーを返します。</target>
        </trans-unit>
        <trans-unit id="f0dfd5f0e298aa47a48b7d8cbced854e9d4e2a6d" translate="yes" xml:space="preserve">
          <source>Injects CSS into the current web page.</source>
          <target state="translated">現在のウェブページにCSSを挿入します。</target>
        </trans-unit>
        <trans-unit id="b7e359bfdb20491c11d50453bcef336f0fdfbaf1" translate="yes" xml:space="preserve">
          <source>Injects CSS into the guest page.</source>
          <target state="translated">ゲストページにCSSを注入します。</target>
        </trans-unit>
        <trans-unit id="0c476f7fcf5175b2a06fb617a213f4c2f93acbb8" translate="yes" xml:space="preserve">
          <source>Input Method Editor. A program that allows users to enter characters and symbols not found on their keyboard. For example, this allows users of Latin keyboards to input Chinese, Japanese, Korean and Indic characters.</source>
          <target state="translated">入力方法エディタ。キーボードにない文字や記号を入力できるようにするプログラム。例えば、ラテン系キーボードのユーザーが中国語、日本語、韓国語、インディック文字を入力できるようにする。</target>
        </trans-unit>
        <trans-unit id="0eae9d550a0ef49777e521e2538dd1118f800cf8" translate="yes" xml:space="preserve">
          <source>InputEvent Object</source>
          <target state="translated">入力イベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="24599b3c6ab1eb1b9bce61098d2b77a02aba0f64" translate="yes" xml:space="preserve">
          <source>Inserts &lt;code&gt;text&lt;/code&gt; to the focused element.</source>
          <target state="translated">フォーカスされた要素に &lt;code&gt;text&lt;/code&gt; を挿入します。</target>
        </trans-unit>
        <trans-unit id="d8520f87c739aa4e579f6880a74b33685e460efb" translate="yes" xml:space="preserve">
          <source>Inserts the &lt;code&gt;menuItem&lt;/code&gt; to the &lt;code&gt;pos&lt;/code&gt; position of the menu.</source>
          <target state="translated">&lt;code&gt;menuItem&lt;/code&gt; をメニューの &lt;code&gt;pos&lt;/code&gt; 位置に挿入します。</target>
        </trans-unit>
        <trans-unit id="b18ed5b223e999f64c1ccaea33926bea7922e4c2" translate="yes" xml:space="preserve">
          <source>Inside Application</source>
          <target state="translated">インサイドアプリケーション</target>
        </trans-unit>
        <trans-unit id="67efb1af030003bc2e370e914ca924f2de6b7ff4" translate="yes" xml:space="preserve">
          <source>Inspect Node &lt;a href=&quot;https://github.com/electron/node&quot;&gt;repo&lt;/a&gt; to see what patches upstream Node used with their v8 after bumping its version</source>
          <target state="translated">ノード&lt;a href=&quot;https://github.com/electron/node&quot;&gt;リポジトリ&lt;/a&gt;を検査して、バージョンを上げた後、上流のノードがv8で使用したパッチを確認します。</target>
        </trans-unit>
        <trans-unit id="fc94ce67e51fa7ea969dbaee7bf90130edb770e8" translate="yes" xml:space="preserve">
          <source>Inspects the shared worker based on its ID.</source>
          <target state="translated">共有ワーカーを ID に基づいて検査します。</target>
        </trans-unit>
        <trans-unit id="a092085f2c9866b83b7573ea43eba27961c12c78" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Install&quot;&gt;depot_tools&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Install&quot;&gt;depot_tools&lt;/a&gt;をインストールする</target>
        </trans-unit>
        <trans-unit id="9ddc5636813d8d39f423ad830592f346531bb89f" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Install-additional-build-dependencies&quot;&gt;additional build dependencies&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/linux_build_instructions.md#Install-additional-build-dependencies&quot;&gt;追加のビルド依存関係&lt;/a&gt;をインストールする</target>
        </trans-unit>
        <trans-unit id="c751bdc0defb0bcc2e0fb38801b511d7b20b126b" translate="yes" xml:space="preserve">
          <source>Install &lt;a href=&quot;https://github.com/surf-build/surf&quot;&gt;Surf&lt;/a&gt;, via npm: &lt;code&gt;npm install -g surf-build@latest&lt;/code&gt;</source>
          <target state="translated">npmを介して&lt;a href=&quot;https://github.com/surf-build/surf&quot;&gt;Surf&lt;/a&gt;をインストールします &lt;code&gt;npm install -g surf-build@latest&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c86a288868b37cbc3c18d110b12eb7f17faf0a40" translate="yes" xml:space="preserve">
          <source>Install Electron</source>
          <target state="translated">電子をインストールする</target>
        </trans-unit>
        <trans-unit id="af7e1eda11eb3ba6c4a6534ba4973cba0e85d446" translate="yes" xml:space="preserve">
          <source>Install Electron via &lt;code&gt;npm install electron&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;npm install electron&lt;/code&gt; を介してElectronをインストールします</target>
        </trans-unit>
        <trans-unit id="59def4f4c416f5ec11a55b89f42f9c04dda49d4c" translate="yes" xml:space="preserve">
          <source>Install Visual Studio 2015/2017 (to get the signing utility)</source>
          <target state="translated">Visual Studio 2015/2017をインストールする(署名ユーティリティを取得する</target>
        </trans-unit>
        <trans-unit id="60f4317addf48a766ff06d21d0528f663490057f" translate="yes" xml:space="preserve">
          <source>Install Visual Studio to get the signing utility (the free &lt;a href=&quot;https://visualstudio.microsoft.com/vs/community/&quot;&gt;Community Edition&lt;/a&gt; is enough)</source>
          <target state="translated">Visual Studioをインストールして、署名ユーティリティを入手します（無料の&lt;a href=&quot;https://visualstudio.microsoft.com/vs/community/&quot;&gt;Community Edition&lt;/a&gt;で十分です）</target>
        </trans-unit>
        <trans-unit id="b0a08fb068315f0e1c7ff6b9951586a86d940581" translate="yes" xml:space="preserve">
          <source>Install it in Chrome browser.</source>
          <target state="translated">Chromeブラウザにインストールします。</target>
        </trans-unit>
        <trans-unit id="c1cf7ea58fe26587ea330bcf3383edd9081a470a" translate="yes" xml:space="preserve">
          <source>Install the module:</source>
          <target state="translated">モジュールをインストールします。</target>
        </trans-unit>
        <trans-unit id="c81b79df3c6448eae7c4f80428b54cd5692a17d7" translate="yes" xml:space="preserve">
          <source>Installation</source>
          <target state="translated">Installation</target>
        </trans-unit>
        <trans-unit id="49badac7f3152085c3ccdfbd4aec9ad26474d44b" translate="yes" xml:space="preserve">
          <source>Installing Electron</source>
          <target state="translated">電子機器の設置</target>
        </trans-unit>
        <trans-unit id="01530047c3eb49aada2802a1ac3a4c313f6cdb3e" translate="yes" xml:space="preserve">
          <source>Installing modules and rebuilding for Electron</source>
          <target state="translated">エレクトロン用モジュールのインストールとリビルド</target>
        </trans-unit>
        <trans-unit id="93e1f66298d41be94ea2442fc257bf8bcd4c056b" translate="yes" xml:space="preserve">
          <source>Instance Events</source>
          <target state="translated">インスタンスイベント</target>
        </trans-unit>
        <trans-unit id="061c23b642f541c97df74623e463e371a73cf5e7" translate="yes" xml:space="preserve">
          <source>Instance Events must be listed under an &lt;code&gt;### Instance Events&lt;/code&gt; chapter.</source>
          <target state="translated">インスタンスイベントは、 &lt;code&gt;### Instance Events&lt;/code&gt; 章にリストする必要があります。</target>
        </trans-unit>
        <trans-unit id="dd4a61ab3dc44ab9b5a205303724a68f74a735a7" translate="yes" xml:space="preserve">
          <source>Instance Methods</source>
          <target state="translated">インスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="227bff69876b172aeee6752f9b003b6b9627ce6c" translate="yes" xml:space="preserve">
          <source>Instance Properties</source>
          <target state="translated">インスタンスのプロパティ</target>
        </trans-unit>
        <trans-unit id="61916ab2e3433d6ffbb8ce1a774ea4d4be15cff4" translate="yes" xml:space="preserve">
          <source>Instance Properties must be listed under an &lt;code&gt;### Instance Properties&lt;/code&gt; chapter.</source>
          <target state="translated">インスタンスプロパティは、 &lt;code&gt;### Instance Properties&lt;/code&gt; 章にリストされている必要があります。</target>
        </trans-unit>
        <trans-unit id="8362b73eb793173f5bd3a1f478b69e06eecb033b" translate="yes" xml:space="preserve">
          <source>Instance methods and properties</source>
          <target state="translated">インスタンスのメソッドとプロパティ</target>
        </trans-unit>
        <trans-unit id="d7bdfca8d5860d3e348d16366e2d6d47432a9a96" translate="yes" xml:space="preserve">
          <source>Instance properties must start with &quot;A [Property Type] ...&quot;</source>
          <target state="translated">インスタンスプロパティは、&quot;A [プロパティタイプ]....&quot;で始まる必要があります。</target>
        </trans-unit>
        <trans-unit id="20d33549668c4d09ea6ef7d6c02f07fdfb9c25a1" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;Cookies&lt;/code&gt; class are accessed by using &lt;code&gt;cookies&lt;/code&gt; property of a &lt;code&gt;Session&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Cookies&lt;/code&gt; クラスのインスタンスには、 &lt;code&gt;Session&lt;/code&gt; の &lt;code&gt;cookies&lt;/code&gt; プロパティを使用してアクセスします。</target>
        </trans-unit>
        <trans-unit id="11b9e088e579b4a97a72bdefa7d3eb659ab722d1" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;ServiceWorkers&lt;/code&gt; class are accessed by using &lt;code&gt;serviceWorkers&lt;/code&gt; property of a &lt;code&gt;Session&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ServiceWorkers&lt;/code&gt; クラスのインスタンスには、 &lt;code&gt;Session&lt;/code&gt; の &lt;code&gt;serviceWorkers&lt;/code&gt; プロパティを使用してアクセスします。</target>
        </trans-unit>
        <trans-unit id="ba9374c6843f9596e1f6431ed4d21e4162f669de" translate="yes" xml:space="preserve">
          <source>Instances of the &lt;code&gt;WebRequest&lt;/code&gt; class are accessed by using the &lt;code&gt;webRequest&lt;/code&gt; property of a &lt;code&gt;Session&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;WebRequest&lt;/code&gt; クラスのインスタンスには、 &lt;code&gt;Session&lt;/code&gt; の &lt;code&gt;webRequest&lt;/code&gt; プロパティを使用してアクセスします。</target>
        </trans-unit>
        <trans-unit id="554911029299375829269fa9162db763e8344c4b" translate="yes" xml:space="preserve">
          <source>Instantiates a special &quot;other items proxy&quot;, which nests TouchBar elements inherited from Chromium at the space indicated by the proxy. By default, this proxy is added to each TouchBar at the end of the input. For more information, see the AppKit docs on &lt;a href=&quot;https://developer.apple.com/documentation/appkit/nstouchbaritemidentifierotheritemsproxy&quot;&gt;NSTouchBarItemIdentifierOtherItemsProxy&lt;/a&gt;</source>
          <target state="translated">Chromiumから継承されたTouchBar要素をプロキシによって示されたスペースにネストする特別な「その他のアイテムプロキシ」をインスタンス化します。デフォルトでは、このプロキシは入力の最後にある各TouchBarに追加されます。詳細については、&lt;a href=&quot;https://developer.apple.com/documentation/appkit/nstouchbaritemidentifierotheritemsproxy&quot;&gt;NSTouchBarItemIdentifierOtherItemsProxyの&lt;/a&gt;AppKitドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="fda6d9fe352fc67e7751222e8711cad163e6c057" translate="yes" xml:space="preserve">
          <source>Instantiates a special &quot;other items proxy&quot;, which nests TouchBar elements inherited from Chromium at the space indicated by the proxy. By default, this proxy is added to each TouchBar at the end of the input. For more information, see the AppKit docs on NSTouchBarItemIdentifierOtherItemsProxy Note: Only one instance of this class can be added per TouchBar.</source>
          <target state="translated">他のアイテムのプロキシ」をインスタンス化します。このプロキシは、Chromium から継承した TouchBar 要素をプロキシで示されたスペースに入れ子にします。デフォルトでは、このプロキシは入力の最後に各 TouchBar に追加されます。詳細については、AppKit ドキュメントの NSTouchBarItemIdentifierOtherItemsProxy を参照してください。</target>
        </trans-unit>
        <trans-unit id="d001b3aa791829d21434a552dac73a8360b747df" translate="yes" xml:space="preserve">
          <source>Instead of &lt;code&gt;https://github.com/electron/electron&lt;/code&gt;, you can use your own fork here (something like &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/electron&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;https://github.com/electron/electron&lt;/code&gt; の代わりに、ここで独自のフォークを使用できます（ &lt;code&gt;https://github.com/&amp;lt;username&amp;gt;/electron&lt;/code&gt; のようなもの）。</target>
        </trans-unit>
        <trans-unit id="16270f869f551f34445155955c881cfa37616466" translate="yes" xml:space="preserve">
          <source>Instructs Electron to bypass the proxy server for the given semi-colon-separated list of hosts. This flag has an effect only if used in tandem with &lt;code&gt;--proxy-server&lt;/code&gt;.</source>
          <target state="translated">指定されたセミコロンで区切られたホストのリストに対してプロキシサーバーをバイパスするようにエレクトロンに指示します。このフラグは、 &lt;code&gt;--proxy-server&lt;/code&gt; と組み合わせて使用​​した場合にのみ効果があります。</target>
        </trans-unit>
        <trans-unit id="6d6d2d7b468b24a48b35ded8843a5bd10903effd" translate="yes" xml:space="preserve">
          <source>Intercept and modify the contents of a request at various stages of its lifetime.</source>
          <target state="translated">ライフタイムの様々な段階でリクエストの内容を傍受し、変更します。</target>
        </trans-unit>
        <trans-unit id="ec8f8e0bfb9aa904007cb6480a58a60f41047d71" translate="yes" xml:space="preserve">
          <source>Intercepting events in the main process</source>
          <target state="translated">メインプロセスでのイベントの傍受</target>
        </trans-unit>
        <trans-unit id="ee6f75429405860b71bcefde477ecaf5969a2348" translate="yes" xml:space="preserve">
          <source>Intercepts &lt;code&gt;scheme&lt;/code&gt; protocol and uses &lt;code&gt;handler&lt;/code&gt; as the protocol's new handler which sends a &lt;code&gt;Buffer&lt;/code&gt; as a response.</source>
          <target state="translated">&lt;code&gt;scheme&lt;/code&gt; プロトコルをインターセプトし、 &lt;code&gt;handler&lt;/code&gt; をプロトコルの新しいハンドラとして使用し、 &lt;code&gt;Buffer&lt;/code&gt; を応答として送信します。</target>
        </trans-unit>
        <trans-unit id="be11c9050ebdb78d8293caf5907f221e92288ad5" translate="yes" xml:space="preserve">
          <source>Intercepts &lt;code&gt;scheme&lt;/code&gt; protocol and uses &lt;code&gt;handler&lt;/code&gt; as the protocol's new handler which sends a &lt;code&gt;String&lt;/code&gt; as a response.</source>
          <target state="translated">&lt;code&gt;scheme&lt;/code&gt; プロトコルをインターセプトし、 &lt;code&gt;handler&lt;/code&gt; をプロトコルの新しいハンドラとして使用し、 &lt;code&gt;String&lt;/code&gt; を応答として送信します。</target>
        </trans-unit>
        <trans-unit id="637ab926f95aaf76690f739533e2ba5eb9714a4e" translate="yes" xml:space="preserve">
          <source>Intercepts &lt;code&gt;scheme&lt;/code&gt; protocol and uses &lt;code&gt;handler&lt;/code&gt; as the protocol's new handler which sends a file as a response.</source>
          <target state="translated">&lt;code&gt;scheme&lt;/code&gt; プロトコルをインターセプトし、 &lt;code&gt;handler&lt;/code&gt; をプロトコルの新しいハンドラとして使用して、ファイルを応答として送信します。</target>
        </trans-unit>
        <trans-unit id="c92f450a734d695eb0e09f842f66dc4c08221e1d" translate="yes" xml:space="preserve">
          <source>Intercepts &lt;code&gt;scheme&lt;/code&gt; protocol and uses &lt;code&gt;handler&lt;/code&gt; as the protocol's new handler which sends a new HTTP request as a response.</source>
          <target state="translated">&lt;code&gt;scheme&lt;/code&gt; プロトコルをインターセプトし、 &lt;code&gt;handler&lt;/code&gt; をプロトコルの新しいハンドラとして使用して、新しいHTTPリクエストを応答として送信します。</target>
        </trans-unit>
        <trans-unit id="afee89207b5b63f5ec244d5599398760f821a96d" translate="yes" xml:space="preserve">
          <source>Interface description language. Write function signatures and data types in a format that can be used to generate interfaces in Java, C++, JavaScript, etc.</source>
          <target state="translated">インターフェース記述言語。Java、C++、JavaScriptなどのインターフェースを生成するために使用できる形式で関数のシグネチャやデータ型を記述する。</target>
        </trans-unit>
        <trans-unit id="06fac3d23961645b440211045f3413e391d15637" translate="yes" xml:space="preserve">
          <source>Interlingua</source>
          <target state="translated">Interlingua</target>
        </trans-unit>
        <trans-unit id="f9ce090f6b4e6812a2a33054e170fe0befa25fea" translate="yes" xml:space="preserve">
          <source>Internal implementation</source>
          <target state="translated">内部実装</target>
        </trans-unit>
        <trans-unit id="2b7835ef37ebd3e0fc33cd0b04741ea8f2f7dedf" translate="yes" xml:space="preserve">
          <source>Introduction of &lt;a href=&quot;https://conventionalcommits.org/&quot;&gt;conventional commit messages&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://conventionalcommits.org/&quot;&gt;従来のコミットメッセージの&lt;/a&gt;紹介</target>
        </trans-unit>
        <trans-unit id="41573236e6fbc505575a3621ccf0f5fca3ab0ac6" translate="yes" xml:space="preserve">
          <source>Introduction of semver-compliant &lt;code&gt;-beta&lt;/code&gt; tags</source>
          <target state="translated">semver準拠の紹介 &lt;code&gt;-beta&lt;/code&gt; タグ</target>
        </trans-unit>
        <trans-unit id="c9bc3dddf21efcfe1e523f2f2860c73024488699" translate="yes" xml:space="preserve">
          <source>Invalidates the current &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html&quot;&gt;Handoff&lt;/a&gt; user activity.</source>
          <target state="translated">現在の&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html&quot;&gt;Handoff&lt;/a&gt;ユーザーアクティビティを無効にします。</target>
        </trans-unit>
        <trans-unit id="8b99998c625d0b440d99f2fb14b8c59a1c9c7445" translate="yes" xml:space="preserve">
          <source>Invoke the updater from your app's main process file:</source>
          <target state="translated">アプリのメイン プロセス ファイルからアップデータを起動します。</target>
        </trans-unit>
        <trans-unit id="98e37149c6765bae15ead855a09f4ad812f8e179" translate="yes" xml:space="preserve">
          <source>Invokes the print dialog on the child window.</source>
          <target state="translated">子ウィンドウの印刷ダイアログを起動します。</target>
        </trans-unit>
        <trans-unit id="5d8e0045883199ce732e034c1958412c32625a78" translate="yes" xml:space="preserve">
          <source>IpcMainEvent Object extends &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="translated">IpcMainEventオブジェクトは &lt;code&gt;Event&lt;/code&gt; 拡張します</target>
        </trans-unit>
        <trans-unit id="07e9fbe62dfb276d54579222fc7b60502c07078a" translate="yes" xml:space="preserve">
          <source>IpcMainEvent Object extends Event</source>
          <target state="translated">IpcMainEvent オブジェクトはイベントを継承します。</target>
        </trans-unit>
        <trans-unit id="2c4c5f35a2c2e47174a786858d499c7cf486975b" translate="yes" xml:space="preserve">
          <source>IpcMainEvent object</source>
          <target state="translated">IpcMainEventオブジェクト</target>
        </trans-unit>
        <trans-unit id="fec4a5c254373af96ba79d5ba125dc5218f3bf78" translate="yes" xml:space="preserve">
          <source>IpcMainInvokeEvent Object extends &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="translated">IpcMainInvokeEventオブジェクトは &lt;code&gt;Event&lt;/code&gt; 拡張します</target>
        </trans-unit>
        <trans-unit id="a90d910c9b70f6a833226a55d5b513419289fdec" translate="yes" xml:space="preserve">
          <source>IpcMainInvokeEvent Object extends Event</source>
          <target state="translated">IpcMainInvokeEventオブジェクトはイベントを継承します。</target>
        </trans-unit>
        <trans-unit id="cccc257b87213115e00c47772ffb89e407aacaaf" translate="yes" xml:space="preserve">
          <source>IpcMainInvokeEvent object</source>
          <target state="translated">IpcMainInvokeEventオブジェクト</target>
        </trans-unit>
        <trans-unit id="b62ba674eed713d7e230008a90a92bced392a498" translate="yes" xml:space="preserve">
          <source>IpcRendererEvent Object extends &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="translated">IpcRendererEventオブジェクトは &lt;code&gt;Event&lt;/code&gt; 拡張します</target>
        </trans-unit>
        <trans-unit id="311c42a75f9b891c26d9c8973c9fbfa247e7fb33" translate="yes" xml:space="preserve">
          <source>IpcRendererEvent Object extends Event</source>
          <target state="translated">IpcRendererEvent Object extends Event</target>
        </trans-unit>
        <trans-unit id="2bddaea174340270be5a83fe7aed2e32aa628eba" translate="yes" xml:space="preserve">
          <source>Irish</source>
          <target state="translated">Irish</target>
        </trans-unit>
        <trans-unit id="bb860a8fb79ef836fe43c8401ef19b5d319dfdc3" translate="yes" xml:space="preserve">
          <source>Is anyone using the API?</source>
          <target state="translated">APIを使っている人はいますか?</target>
        </trans-unit>
        <trans-unit id="d72f416aa575437886003d40111c597233a5b888" translate="yes" xml:space="preserve">
          <source>Is the API fulfilling the original proposed usecases, does it have any gaps?</source>
          <target state="translated">APIは当初提案されたユースケースを満たしているか、何かギャップはないか?</target>
        </trans-unit>
        <trans-unit id="db50cd83394f392eeb9b4f8789ad0a098bcbaebd" translate="yes" xml:space="preserve">
          <source>Isolated World</source>
          <target state="translated">孤立した世界</target>
        </trans-unit>
        <trans-unit id="56403f13c63fe5f09bf79f86c5ea1a90addc46f8" translate="yes" xml:space="preserve">
          <source>Isolation For Untrusted Content</source>
          <target state="translated">信頼されていないコンテンツの隔離</target>
        </trans-unit>
        <trans-unit id="3a83c1973a29789e42e9e79148e2ce42769de102" translate="yes" xml:space="preserve">
          <source>Issue HTTP/HTTPS requests using Chromium's native networking library</source>
          <target state="translated">Chromium のネイティブネットワーキングライブラリを使用して HTTP/HTTPS リクエストを発行する</target>
        </trans-unit>
        <trans-unit id="30ce4cb25faae86427d8ac22e8f50a0a74f3f393" translate="yes" xml:space="preserve">
          <source>Issues</source>
          <target state="translated">Issues</target>
        </trans-unit>
        <trans-unit id="6cd8dd2ee0aacb1c1c58c1806551c4e2b82b59a5" translate="yes" xml:space="preserve">
          <source>Issues In Electron</source>
          <target state="translated">電子の問題点</target>
        </trans-unit>
        <trans-unit id="71df46d765d8779ff3c19865c5451195c37e4d80" translate="yes" xml:space="preserve">
          <source>It can be used by the preload script to add removed Node global symbols back to the global scope when node integration is turned off:</source>
          <target state="translated">これは、ノード統合がオフになったときに、削除されたノードグローバルシンボルをグローバルスコープに戻すために、プリロードスクリプトで使用することができます。</target>
        </trans-unit>
        <trans-unit id="5496611a4bb2d2ad0c6f82becb4734760e9dc457" translate="yes" xml:space="preserve">
          <source>It creates a new &lt;code&gt;BrowserWindow&lt;/code&gt; with native properties as set by the &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 設定されたネイティブプロパティを持つ新しい &lt;code&gt;BrowserWindow&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="7391d87c0a1a2fe7c0ab00835f38a129f96ed5e0" translate="yes" xml:space="preserve">
          <source>It creates a new &lt;code&gt;Notification&lt;/code&gt; with native properties as set by the &lt;code&gt;options&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;options&lt;/code&gt; 設定されたネイティブプロパティで新しい &lt;code&gt;Notification&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="e93ddd5bab35c5101381bb6a00ab5c7573470386" translate="yes" xml:space="preserve">
          <source>It directly exposes a powerful API without any kind of argument filtering. This would allow any website to send arbitrary IPC messages which you do not want to be possible. The correct way to expose IPC-based APIs would instead be to provide one method per IPC message.</source>
          <target state="translated">これは、いかなる種類の引数フィルタリングなしで強力なAPIを直接公開しています。これにより、どんなウェブサイトでも、可能にしてほしくない任意のIPCメッセージを送信することができるようになります。IPCベースのAPIを公開する正しい方法は、代わりにIPCメッセージごとに1つのメソッドを提供することでしょう。</target>
        </trans-unit>
        <trans-unit id="9172bf0f438712c9c3dd7ca8795d16a4bee8eaa8" translate="yes" xml:space="preserve">
          <source>It has since become a popular tool used by open source developers, startups, and established companies. &lt;a href=&quot;https://electronjs.org/apps&quot;&gt;See who is building on Electron&lt;/a&gt;.</source>
          <target state="translated">それ以来、オープンソースの開発者、新興企業、有名企業が使用する人気のツールになっています。&lt;a href=&quot;https://electronjs.org/apps&quot;&gt;Electronで構築しているユーザーを確認し&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0f85d3bf8bcd7441256bc10040e9eefdc09d6b25" translate="yes" xml:space="preserve">
          <source>It is a good idea to control the creation of new &lt;a href=&quot;../api/web-view&quot;&gt;&lt;code&gt;WebViews&lt;/code&gt;&lt;/a&gt; from the main process and to verify that their webPreferences do not disable security features.</source>
          <target state="translated">それは新しいの作成を制御することは良いアイデアです&lt;a href=&quot;../api/web-view&quot;&gt; &lt;code&gt;WebViews&lt;/code&gt; を&lt;/a&gt;メインプロセスから、そのwebPreferencesが無効にセキュリティ機能しないことを確認するために。</target>
        </trans-unit>
        <trans-unit id="bb8febdeb30c9ebc1be10f82081b038fbe9cfab2" translate="yes" xml:space="preserve">
          <source>It is a good idea to control the creation of new &lt;a href=&quot;../api/webview-tag&quot;&gt;&lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt;&lt;/a&gt; tags from the main process and to verify that their webPreferences do not disable security features.</source>
          <target state="translated">メインプロセスからの新しい&lt;a href=&quot;../api/webview-tag&quot;&gt; &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; &lt;/a&gt;タグの作成を制御し、それらのwebPreferencesがセキュリティ機能を無効にしないことを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9e8b236e77dcb919d04a3d3457a47a0fc9adfff6" translate="yes" xml:space="preserve">
          <source>It is a good idea to control the creation of new &lt;a href=&quot;api/webview-tag&quot;&gt;&lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt;&lt;/a&gt; tags from the main process and to verify that their webPreferences do not disable security features.</source>
          <target state="translated">メインプロセスからの新しい&lt;a href=&quot;api/webview-tag&quot;&gt; &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; &lt;/a&gt;タグの作成を制御し、それらのwebPreferencesがセキュリティ機能を無効にしないことを確認することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="964da9fea4bbafe96ef1db6a86f52b43e7414473" translate="yes" xml:space="preserve">
          <source>It is acceptable for some commits in a pull request to not include a semantic prefix, as long as a later commit in the same pull request contains a meaningful encompassing semantic message.</source>
          <target state="translated">プルリクエストの中のいくつかのコミットで意味的なプレフィックスを含まないことは許容されます。</target>
        </trans-unit>
        <trans-unit id="99e6b0fd7f9cb07760e0c7a12bf305b87ded1292" translate="yes" xml:space="preserve">
          <source>It is acceptable for some commits in a pull request to not include a semantic prefix, as long as the pull request title contains a meaningful encompassing semantic message.</source>
          <target state="translated">プルリクエストのタイトルに意味のある意味を含むメッセージが含まれている限り、プルリクエストに意味のある接頭辞を含まないコミットがあっても構いません。</target>
        </trans-unit>
        <trans-unit id="6513c3b2261075b5414276dd4b7c570732e84c37" translate="yes" xml:space="preserve">
          <source>It is also not emitted during in-page navigation, such as clicking anchor links or updating the &lt;code&gt;window.location.hash&lt;/code&gt;. Use &lt;code&gt;did-navigate-in-page&lt;/code&gt; event for this purpose.</source>
          <target state="translated">また、アンカーリンクのクリックや &lt;code&gt;window.location.hash&lt;/code&gt; の更新など、ページ内ナビゲーション中にも出力されません。この目的に &lt;code&gt;did-navigate-in-page&lt;/code&gt; イベントを使用します。</target>
        </trans-unit>
        <trans-unit id="3c815f956f73b5874b39eadfd911308e44d74e4a" translate="yes" xml:space="preserve">
          <source>It is also not emitted for in-page navigations, such as clicking anchor links or updating the &lt;code&gt;window.location.hash&lt;/code&gt;. Use &lt;code&gt;did-navigate-in-page&lt;/code&gt; event for this purpose.</source>
          <target state="translated">また、アンカーリンクのクリックや &lt;code&gt;window.location.hash&lt;/code&gt; の更新など、ページ内ナビゲーションの場合も出力されません。この目的に &lt;code&gt;did-navigate-in-page&lt;/code&gt; イベントを使用します。</target>
        </trans-unit>
        <trans-unit id="f8da655fcd87f5210eafad0aaf91c55a5fb6c0b3" translate="yes" xml:space="preserve">
          <source>It is also possible to rebrand Electron by changing the product name and building it from source. To do this you need to modify the &lt;code&gt;atom.gyp&lt;/code&gt; file and have a clean rebuild.</source>
          <target state="translated">製品名を変更してソースからビルドすることにより、Electronのブランドを変更することもできます。これを行うには、 &lt;code&gt;atom.gyp&lt;/code&gt; ファイルを変更し、クリーンに再構築する必要があります。</target>
        </trans-unit>
        <trans-unit id="c2ff743cbfcce9aa6f420e40188018854b31b03d" translate="yes" xml:space="preserve">
          <source>It is also possible to rebrand Electron by changing the product name and building it from source. To do this you need to set the build argument corresponding to the product name (&lt;code&gt;electron_product_name = &quot;YourProductName&quot;&lt;/code&gt;) in the &lt;code&gt;args.gn&lt;/code&gt; file and rebuild.</source>
          <target state="translated">製品名を変更し、ソースからビルドすることで、Electronのブランドを変更することもできます。これを行うには、 &lt;code&gt;args.gn&lt;/code&gt; ファイルの製品名（ &lt;code&gt;electron_product_name = &quot;YourProductName&quot;&lt;/code&gt; ）に対応するビルド引数を設定して再構築する必要があります。</target>
        </trans-unit>
        <trans-unit id="d2c2d0778e9b8a7250b6f58b96b6a278aba4e5f2" translate="yes" xml:space="preserve">
          <source>It is also possible to send messages from the main process to the renderer process, see &lt;a href=&quot;api/web-contents#contentssendchannel-args&quot;&gt;webContents.send&lt;/a&gt; for more information.</source>
          <target state="translated">メインプロセスからレンダラープロセスにメッセージを送信することもできます。詳細については、&lt;a href=&quot;api/web-contents#contentssendchannel-args&quot;&gt;webContents.send&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="d8df1867931cc05780a7151ac1bb5b025a291ead" translate="yes" xml:space="preserve">
          <source>It is also possible to send messages from the main process to the renderer process, see &lt;a href=&quot;web-contents#contentssendchannel-args&quot;&gt;webContents.send&lt;/a&gt; for more information.</source>
          <target state="translated">メインプロセスからレンダラープロセスにメッセージを送信することもできます。詳細については、&lt;a href=&quot;web-contents#contentssendchannel-args&quot;&gt;webContents.send&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b32930b704c36912af4b6b8a8b75fd0314d1679" translate="yes" xml:space="preserve">
          <source>It is also possible to send messages from the main process to the renderer process, see &lt;a href=&quot;web-contents#webcontentssendchannel-arg1-arg2-&quot;&gt;webContents.send&lt;/a&gt; for more information.</source>
          <target state="translated">メインプロセスからレンダラープロセスにメッセージを送信することもできます。詳細については、&lt;a href=&quot;web-contents#webcontentssendchannel-arg1-arg2-&quot;&gt;webContents.send&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b91cede13154f320e8b22c673ef890bdace73b6" translate="yes" xml:space="preserve">
          <source>It is best to specify &lt;code&gt;role&lt;/code&gt; for any menu item that matches a standard role, rather than trying to manually implement the behavior in a &lt;code&gt;click&lt;/code&gt; function. The built-in &lt;code&gt;role&lt;/code&gt; behavior will give the best native experience.</source>
          <target state="translated">&lt;code&gt;click&lt;/code&gt; 機能で動作を手動で実装するのではなく、標準の役割と一致するメニュー項目の &lt;code&gt;role&lt;/code&gt; を指定することをお勧めします。組み込みの &lt;code&gt;role&lt;/code&gt; 動作は、ネイティブの最高のエクスペリエンスを提供します。</target>
        </trans-unit>
        <trans-unit id="dd1e1c98b6db6cc4fd46785c694a1841f6fdf1e7" translate="yes" xml:space="preserve">
          <source>It is essential to copy the VM because if you spin up a VM against an image that image cannot at the same time be used by AppVeyor.</source>
          <target state="translated">イメージに対してVMをスピンアップした場合、そのイメージはAppVeyorによって同時に使用できないため、VMをコピーすることが不可欠です。</target>
        </trans-unit>
        <trans-unit id="70390302435eeaafda262133a9e687cdd3b70aea" translate="yes" xml:space="preserve">
          <source>It is highly recommended to format your changed C++ code before opening pull requests, which will save you and the reviewers' time.</source>
          <target state="translated">プルリクエストを開く前に、変更したC++コードをフォーマットすることを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="7830172c1d0f8fe69e4f504337f2d2af361b31bd" translate="yes" xml:space="preserve">
          <source>It is important to note that this option alone won't enable the OS-enforced sandbox. To enable this feature, the &lt;code&gt;--enable-sandbox&lt;/code&gt; command-line argument must be passed to electron, which will force &lt;code&gt;sandbox: true&lt;/code&gt; for all &lt;code&gt;BrowserWindow&lt;/code&gt; instances.</source>
          <target state="translated">このオプションだけではOS強制サンドボックスが有効にならないことに注意することが重要です。この機能を有効にするには、 &lt;code&gt;--enable-sandbox&lt;/code&gt; コマンドライン引数をelectronに渡す必要があります。これにより、すべての &lt;code&gt;BrowserWindow&lt;/code&gt; インスタンスで &lt;code&gt;sandbox: true&lt;/code&gt; が強制されます。</target>
        </trans-unit>
        <trans-unit id="bc521905c727fd3e0d69803c031fa725b88fa0cf" translate="yes" xml:space="preserve">
          <source>It is important to remember that the security of your Electron application is the result of the overall security of the framework foundation (&lt;em&gt;Chromium&lt;/em&gt;, &lt;em&gt;Node.js&lt;/em&gt;), Electron itself, all NPM dependencies and your code. As such, it is your responsibility to follow a few important best practices:</source>
          <target state="translated">Electronアプリケーションのセキュリティは、フレームワーク基盤（&lt;em&gt;Chromium&lt;/em&gt;、&lt;em&gt;Node.js&lt;/em&gt;）、Electron自体、すべてのNPM依存関係、およびコードの全体的なセキュリティの結果であることを覚えておくことが重要です。そのため、いくつかの重要なベストプラクティスに従うのはあなたの責任です。</target>
        </trans-unit>
        <trans-unit id="06b0757ae0de67fc7189e624df8530d408b9ad1e" translate="yes" xml:space="preserve">
          <source>It is not possible to have the OS sandbox active only for some renderers, if &lt;code&gt;--enable-sandbox&lt;/code&gt; is enabled, normal electron windows cannot be created.</source>
          <target state="translated">一部のレンダラーに対してのみOSサンドボックスをアクティブにすることはできません &lt;code&gt;--enable-sandbox&lt;/code&gt; が有効になっていると、通常の電子ウィンドウを作成できません。</target>
        </trans-unit>
        <trans-unit id="26eccb2be6647f437eee41fc998f1735f2fdfb59" translate="yes" xml:space="preserve">
          <source>It is paramount that you disable Node.js integration in any renderer (&lt;a href=&quot;../api/browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/browser-view&quot;&gt;&lt;code&gt;BrowserView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../api/web-view&quot;&gt;&lt;code&gt;WebView&lt;/code&gt;&lt;/a&gt;) that loads remote content. The goal is to limit the powers you grant to remote content, thus making it dramatically more difficult for an attacker to harm your users should they gain the ability to execute JavaScript on your website.</source>
          <target state="translated">リモートコンテンツをロードするすべてのレンダラー（&lt;a href=&quot;../api/browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/browser-view&quot;&gt; &lt;code&gt;BrowserView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../api/web-view&quot;&gt; &lt;code&gt;WebView&lt;/code&gt; &lt;/a&gt;）でNode.js統合を無効にすることが最も重要です。目標は、リモートコンテンツに付与する権限を制限することです。これにより、攻撃者がWebサイトでJavaScriptを実行する能力を獲得した場合に、ユーザーに害を与えることが劇的に困難になります。</target>
        </trans-unit>
        <trans-unit id="d86d6d8cd3673155bb33cd4fc8e7c4f37210ae45" translate="yes" xml:space="preserve">
          <source>It is paramount that you do not enable Node.js integration in any renderer (&lt;a href=&quot;../api/browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;../api/browser-view&quot;&gt;&lt;code&gt;BrowserView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;../api/webview-tag&quot;&gt;&lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt;&lt;/a&gt;) that loads remote content. The goal is to limit the powers you grant to remote content, thus making it dramatically more difficult for an attacker to harm your users should they gain the ability to execute JavaScript on your website.</source>
          <target state="translated">リモートコンテンツをロードするレンダラー（&lt;a href=&quot;../api/browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../api/browser-view&quot;&gt; &lt;code&gt;BrowserView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;../api/webview-tag&quot;&gt; &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; &lt;/a&gt;）でNode.js統合を有効にしないことが最も重要です。目標は、リモートコンテンツに付与する権限を制限することです。これにより、攻撃者がWebサイトでJavaScriptを実行できるようになった場合に、攻撃者がユーザーに危害を加えることが劇的に困難になります。</target>
        </trans-unit>
        <trans-unit id="9dfa7db15ad481f737f1498bb63baa10067bc005" translate="yes" xml:space="preserve">
          <source>It is paramount that you do not enable Node.js integration in any renderer (&lt;a href=&quot;api/browser-window&quot;&gt;&lt;code&gt;BrowserWindow&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;api/browser-view&quot;&gt;&lt;code&gt;BrowserView&lt;/code&gt;&lt;/a&gt;, or &lt;a href=&quot;api/webview-tag&quot;&gt;&lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt;&lt;/a&gt;) that loads remote content. The goal is to limit the powers you grant to remote content, thus making it dramatically more difficult for an attacker to harm your users should they gain the ability to execute JavaScript on your website.</source>
          <target state="translated">リモートコンテンツをロードするレンダラー（&lt;a href=&quot;api/browser-window&quot;&gt; &lt;code&gt;BrowserWindow&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;api/browser-view&quot;&gt; &lt;code&gt;BrowserView&lt;/code&gt; &lt;/a&gt;、または&lt;a href=&quot;api/webview-tag&quot;&gt; &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; &lt;/a&gt;）でNode.js統合を有効にしないことが最も重要です。目標は、リモートコンテンツに付与する権限を制限することです。これにより、攻撃者がWebサイトでJavaScriptを実行できるようになった場合に、攻撃者がユーザーに危害を加えることが劇的に困難になります。</target>
        </trans-unit>
        <trans-unit id="1d2c153e62eb4f6c67c3c1fd908c8f60efcdd975" translate="yes" xml:space="preserve">
          <source>It is possible to circumvent this limitation by capturing system audio with another macOS app like Soundflower and passing it through a virtual audio input device. This virtual device can then be queried with &lt;code&gt;navigator.mediaDevices.getUserMedia&lt;/code&gt;.</source>
          <target state="translated">Soundflowerなどの別のmacOSアプリでシステムオーディオをキャプチャし、それを仮想オーディオ入力デバイスに渡すことで、この制限を回避することができます。次に、この仮想デバイスを &lt;code&gt;navigator.mediaDevices.getUserMedia&lt;/code&gt; で照会できます。</target>
        </trans-unit>
        <trans-unit id="199273e0544a82108bdacc659f2b6ad6ccf8c086" translate="yes" xml:space="preserve">
          <source>It is possible to debug Chromium with Electron by passing &lt;code&gt;--build_debug_libcc&lt;/code&gt; to the bootstrap script:</source>
          <target state="translated">&lt;code&gt;--build_debug_libcc&lt;/code&gt; をブートストラップスクリプトに渡すことで、ChromiumをElectronでデバッグできます。</target>
        </trans-unit>
        <trans-unit id="89660d837d9b5fa4be0177ad642c3c4194a2b505" translate="yes" xml:space="preserve">
          <source>It is possible to pass any object that implements the readable stream API (emits &lt;code&gt;data&lt;/code&gt;/&lt;code&gt;end&lt;/code&gt;/&lt;code&gt;error&lt;/code&gt; events). For example, here's how a file could be returned:</source>
          <target state="translated">読み取り可能なストリームAPIを実装する任意のオブジェクトを渡すことが可能です（ &lt;code&gt;data&lt;/code&gt; / &lt;code&gt;end&lt;/code&gt; / &lt;code&gt;error&lt;/code&gt; イベントを送信）。たとえば、ファイルを返す方法は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="01838a541d27cddb64533a95704c1d80412cb073" translate="yes" xml:space="preserve">
          <source>It is possible to share the gclient git cache with other machines by exporting it as SMB share on linux, but only one process/machine can be using the cache at a time. The locks created by git-cache script will try to prevent this, but it may not work perfectly in a network.</source>
          <target state="translated">linux上でgclientのgitキャッシュをSMB共有としてエクスポートすることで、他のマシンと共有することは可能ですが、キャッシュを使用できるのは一度に1つのプロセス/マシンのみです。git-cache スクリプトで作成されたロックがこれを防ごうとしますが、ネットワーク上では完全には動作しないかもしれません。</target>
        </trans-unit>
        <trans-unit id="e711e87900ad11545fe6d11f0b1dd6baa4c2a7bf" translate="yes" xml:space="preserve">
          <source>It is possible to share this directory with other machines by exporting it as SMB share on linux, but only one process/machine can be using the cache at a time. The locks created by git-cache script will try to prevent this, but it may not work perfectly in a network.</source>
          <target state="translated">linux上でこのディレクトリをSMB共有としてエクスポートすることで他のマシンと共有することは可能ですが、キャッシュを使用できるのは一度に1つのプロセス/マシンのみです。git-cache スクリプトで作成されたロックがこれを防ごうとしますが、ネットワーク上では完全には動作しないかもしれません。</target>
        </trans-unit>
        <trans-unit id="729b1792b3971af4760afa3ec670d4bd463f68ae" translate="yes" xml:space="preserve">
          <source>It is possible to use Node.js features in Electron's Web Workers, to do so the &lt;code&gt;nodeIntegrationInWorker&lt;/code&gt; option should be set to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;webPreferences&lt;/code&gt;.</source>
          <target state="translated">Node.jsのは、そうするように、電子のWebワーカーに機能を使用することが可能である &lt;code&gt;nodeIntegrationInWorker&lt;/code&gt; のオプションに設定されなければならない &lt;code&gt;true&lt;/code&gt; に &lt;code&gt;webPreferences&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1eed923b3a2d0655e7d02fcfeb29a9b888b89a69" translate="yes" xml:space="preserve">
          <source>It is rare for a JavaScript-based polyfill to be faster than the equivalent native feature in Electron. Do not slow down your Electron app by shipping your own version of standard web platform features.</source>
          <target state="translated">JavaScriptベースのポリフィルが、Electronの同等のネイティブ機能よりも高速になることはまれです。標準的なWebプラットフォーム機能の独自バージョンを出荷することで、Electronアプリの速度を落とさないようにしてください。</target>
        </trans-unit>
        <trans-unit id="60e41f92d43dd7cb52a699ea13c91a702e3b522b" translate="yes" xml:space="preserve">
          <source>It is recommended that you pause expensive operations when the visibility state is &lt;code&gt;hidden&lt;/code&gt; in order to minimize power consumption.</source>
          <target state="translated">消費電力を最小限に抑えるために、可視状態が &lt;code&gt;hidden&lt;/code&gt; になっている場合は、高価な操作を一時停止することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="af7b492c8cb4914e87549f09be97fa5754d25b6e" translate="yes" xml:space="preserve">
          <source>It is recommended to keep your changes grouped logically within individual commits. Many contributors find it easier to review changes that are split across multiple commits. There is no limit to the number of commits in a pull request.</source>
          <target state="translated">変更を個々のコミット内で論理的にグループ化しておくことをお勧めします。多くの貢献者は、複数のコミットに分割された変更をレビューする方が簡単だと感じています。プルリクエストのコミット数に制限はありません。</target>
        </trans-unit>
        <trans-unit id="e1cf52e7ed40575673e4cacbc143a8a1d2a41a19" translate="yes" xml:space="preserve">
          <source>It is strongly recommended that the task list be static. It should remain the same regardless of the state or status of the application. While it is possible to vary the list dynamically, you should consider that this could confuse the user who does not expect that portion of the destination list to change.</source>
          <target state="translated">タスクリストは静的であることを強く推奨します。アプリケーションの状態や状態に関係なく、同じままであるべきです。リストを動的に変化させることは可能ですが、宛先リストのその部分が変化することを期待していないユーザーを混乱させる可能性があることを考慮する必要があります。</target>
        </trans-unit>
        <trans-unit id="5f0fdd38eb013530dfda0e785c93fb1ed05e3eee" translate="yes" xml:space="preserve">
          <source>It is very likely you are using the module in the wrong process. For example &lt;code&gt;electron.app&lt;/code&gt; can only be used in the main process, while &lt;code&gt;electron.webFrame&lt;/code&gt; is only available in renderer processes.</source>
          <target state="translated">モジュールを間違ったプロセスで使用している可能性があります。たとえば、 &lt;code&gt;electron.app&lt;/code&gt; はメインプロセスでのみ使用できますが、 &lt;code&gt;electron.webFrame&lt;/code&gt; はレンダラープロセスでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="06810b9a24cd224beebc872577e421af21ac01c7" translate="yes" xml:space="preserve">
          <source>It will create a &lt;code&gt;dist/main&lt;/code&gt; folder in the libcc repo's root. You will need this to build Electron.</source>
          <target state="translated">libccリポジトリのルートに &lt;code&gt;dist/main&lt;/code&gt; フォルダーを作成します。Electronをビルドするには、これが必要になります。</target>
        </trans-unit>
        <trans-unit id="3647db27602728c98ee2a2301c17868327282d6d" translate="yes" xml:space="preserve">
          <source>It will probably fail applying patches.</source>
          <target state="translated">おそらくパッチの適用に失敗するでしょう。</target>
        </trans-unit>
        <trans-unit id="3343764ed4d8b21d498c1a44d6f90876c8454213" translate="yes" xml:space="preserve">
          <source>It's common for open issues to involve discussion. Some contributors may have differing opinions, including whether the behavior is a bug or feature. This discussion is part of the process and should be kept focused, helpful, and professional.</source>
          <target state="translated">オープンな問題には議論を伴うのが一般的です。投稿者の中には、その動作がバグなのか機能なのかなど、異なる意見を持つ人がいるかもしれません。この議論はプロセスの一部であり、焦点を絞って、参考になるように、そして専門的な議論をするようにしてください。</target>
        </trans-unit>
        <trans-unit id="485b57adcc80650a0f376fe516e0ea35fef68007" translate="yes" xml:space="preserve">
          <source>Italian</source>
          <target state="translated">Italian</target>
        </trans-unit>
        <trans-unit id="b9bc30a5feae532b939b0112f6162a8c1d64ca9e" translate="yes" xml:space="preserve">
          <source>Italian (Italy)</source>
          <target state="translated">イタリア語</target>
        </trans-unit>
        <trans-unit id="9b542a61893cf94c6b2aa33589915292aa185c08" translate="yes" xml:space="preserve">
          <source>Italian (Switzerland)</source>
          <target state="translated">イタリア語</target>
        </trans-unit>
        <trans-unit id="9239c22d1d1c990ca8c206cb408b345a3ec8114c" translate="yes" xml:space="preserve">
          <source>Japanese</source>
          <target state="translated">Japanese</target>
        </trans-unit>
        <trans-unit id="ee620923ff5fc510555dc37083a135ee93b5404b" translate="yes" xml:space="preserve">
          <source>JavaScript</source>
          <target state="translated">JavaScript</target>
        </trans-unit>
        <trans-unit id="6910a0b5a00af25b7ba39985cfb9347d8203a0a2" translate="yes" xml:space="preserve">
          <source>JavaScript will always be disabled in the opened &lt;code&gt;window&lt;/code&gt; if it is disabled on the parent window.</source>
          <target state="translated">JavaScriptは、親ウィンドウで無効にされている場合、開いている &lt;code&gt;window&lt;/code&gt; では常に無効になります。</target>
        </trans-unit>
        <trans-unit id="4d3bb51ea74dbb54d8ffaf04425ff843127f10a5" translate="yes" xml:space="preserve">
          <source>Javanese</source>
          <target state="translated">Javanese</target>
        </trans-unit>
        <trans-unit id="a2feefe9afbc3d0f6fec53c2b390d4515e363675" translate="yes" xml:space="preserve">
          <source>Jenkins</source>
          <target state="translated">Jenkins</target>
        </trans-unit>
        <trans-unit id="2023379a50fddc81cf53bdb2ea7da27bdc589b20" translate="yes" xml:space="preserve">
          <source>JumpList</source>
          <target state="translated">JumpList</target>
        </trans-unit>
        <trans-unit id="6298a2509790f8ae562a533cfb770f6ee7778f71" translate="yes" xml:space="preserve">
          <source>JumpListCategory</source>
          <target state="translated">JumpListCategory</target>
        </trans-unit>
        <trans-unit id="0ff8418a0fc25bab796d47849f1222ead79fc898" translate="yes" xml:space="preserve">
          <source>JumpListCategory Object</source>
          <target state="translated">JumpListCategory オブジェクト</target>
        </trans-unit>
        <trans-unit id="94afa3adf74d2a4329032ec8d8dda74daa3c70b5" translate="yes" xml:space="preserve">
          <source>JumpListItem</source>
          <target state="translated">JumpListItem</target>
        </trans-unit>
        <trans-unit id="46eed83a18817455ede51e512cb72e4bd08a77a3" translate="yes" xml:space="preserve">
          <source>JumpListItem Object</source>
          <target state="translated">JumpListItem オブジェクト</target>
        </trans-unit>
        <trans-unit id="bf8afa3e80d6f2c0bd4db91bcae008d7f7118b98" translate="yes" xml:space="preserve">
          <source>Just enabling &lt;code&gt;contextIsolation&lt;/code&gt; and using &lt;code&gt;contextBridge&lt;/code&gt; does not automatically mean that everything you do is safe. For instance this code is &lt;strong&gt;unsafe&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;contextIsolation&lt;/code&gt; を有効にして &lt;code&gt;contextBridge&lt;/code&gt; を使用するだけでは、すべてが安全であるとは限りません。たとえば、このコードは&lt;strong&gt;安全で&lt;/strong&gt;はあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c3ed665577f91f82c451742a0c8875950d42b19f" translate="yes" xml:space="preserve">
          <source>Kannada</source>
          <target state="translated">Kannada</target>
        </trans-unit>
        <trans-unit id="b9fedaa07b209e1f7a9c2d83295a76fe49f3b49f" translate="yes" xml:space="preserve">
          <source>Kazakh</source>
          <target state="translated">Kazakh</target>
        </trans-unit>
        <trans-unit id="bae6d59bf391c6b00cbe84e270764a5b277dd65c" translate="yes" xml:space="preserve">
          <source>Keep the second line blank.</source>
          <target state="translated">2行目は空欄にしてください。</target>
        </trans-unit>
        <trans-unit id="3aed4e511b017fafe9de3e6cb5aa57466d57dfaa" translate="yes" xml:space="preserve">
          <source>Keeping Git Submodules Up to Date</source>
          <target state="translated">Git サブモジュールを最新の状態に保つ</target>
        </trans-unit>
        <trans-unit id="b465751c05fbc426234f552a5d95e9103bd3e6dc" translate="yes" xml:space="preserve">
          <source>Keyboard Shortcuts</source>
          <target state="translated">キーボードショートカット</target>
        </trans-unit>
        <trans-unit id="b1b8ca52391c49152b6bb1826b475ea8eaddc867" translate="yes" xml:space="preserve">
          <source>KeyboardEvent Object</source>
          <target state="translated">キーボードイベントオブジェクト</target>
        </trans-unit>
        <trans-unit id="ab497ec0dfa486f643cc63c8cb71f2bd88ad7f78" translate="yes" xml:space="preserve">
          <source>KeyboardInputEvent Object extends &lt;code&gt;InputEvent&lt;/code&gt;</source>
          <target state="translated">KeyboardInputEventオブジェクトは &lt;code&gt;InputEvent&lt;/code&gt; を拡張します</target>
        </trans-unit>
        <trans-unit id="289268ce605211f8219bfb3814ba2cbd96f76d4c" translate="yes" xml:space="preserve">
          <source>KeyboardInputEvent Object extends InputEvent</source>
          <target state="translated">KeyboardInputEvent Object extends InputEvent</target>
        </trans-unit>
        <trans-unit id="492d599f268d2b9c10e44ddc75a00f1af51f075b" translate="yes" xml:space="preserve">
          <source>Keys must be supported using only &quot;Simple&quot; types in this table. Values must be supported in this table. Prototype modifications are dropped. Sending custom classes will copy values but not the prototype.</source>
          <target state="translated">キーは、このテーブルで &quot;Simple &quot;タイプのみを使用してサポートされている必要があります。値はこのテーブルでサポートされている必要があります。プロトタイプの変更は削除されます。カスタムクラスを送信すると、値はコピーされますが、プロトタイプはコピーされません。</target>
        </trans-unit>
        <trans-unit id="b05203cf89b60eb36609a1a8b7f3cafe0927486a" translate="yes" xml:space="preserve">
          <source>Known issues</source>
          <target state="translated">既知の問題</target>
        </trans-unit>
        <trans-unit id="dec66c5bf0f7fe4cc038ac871def8eb1ac31c146" translate="yes" xml:space="preserve">
          <source>Korean</source>
          <target state="translated">Korean</target>
        </trans-unit>
        <trans-unit id="a06efeaf4455fbbc03855e222511ad582f621f28" translate="yes" xml:space="preserve">
          <source>Kurdish</source>
          <target state="translated">Kurdish</target>
        </trans-unit>
        <trans-unit id="5aea8700748f6946f70240cab14148a2c449ed9c" translate="yes" xml:space="preserve">
          <source>Kyrgyz</source>
          <target state="translated">Kyrgyz</target>
        </trans-unit>
        <trans-unit id="843195acc182eab1aff0d0e1f754451a5eccd288" translate="yes" xml:space="preserve">
          <source>LLDB is a powerful tool and supports multiple strategies for code inspection. For this basic introduction, let's assume that you're calling a command from JavaScript that isn't behaving correctly - so you'd like to break on that command's C++ counterpart inside the Electron source.</source>
          <target state="translated">LLDBは強力なツールであり、コード検査のための複数の戦略をサポートしています。ここでは、JavaScriptから正しく動作しないコマンドを呼び出していると仮定します。</target>
        </trans-unit>
        <trans-unit id="7d3d95ffa3f81f91f71534d6dadf0dec108ea6c6" translate="yes" xml:space="preserve">
          <source>LLDB is a powerful tool with a great documentation. To learn more about it, consider Apple's debugging documentation, for instance the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-basics.html#//apple_ref/doc/uid/TP40012917-CH2-SW2&quot;&gt;LLDB Command Structure Reference&lt;/a&gt; or the introduction to &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-terminal-workflow-tutorial.html&quot;&gt;Using LLDB as a Standalone Debugger&lt;/a&gt;.</source>
          <target state="translated">LLDBは、優れたドキュメントを備えた強力なツールです。詳細については、Appleのデバッグドキュメントを検討してください。たとえば、&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-basics.html#//apple_ref/doc/uid/TP40012917-CH2-SW2&quot;&gt;LLDBコマンド構造のリファレンス&lt;/a&gt;や、&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-terminal-workflow-tutorial.html&quot;&gt;LLDBをスタンドアロンデバッガとして使用する&lt;/a&gt;方法の紹介などです。</target>
        </trans-unit>
        <trans-unit id="d19a4be135980e5ef4a065ac5b4d796f7207e00d" translate="yes" xml:space="preserve">
          <source>LNK1181: cannot open input file 'kernel32.lib'</source>
          <target state="translated">LNK1181:入力ファイル 'kernel32.lib' が開けません。</target>
        </trans-unit>
        <trans-unit id="80fea83804bf0e1f73c7272f7a19c26bc52d63ef" translate="yes" xml:space="preserve">
          <source>LTS</source>
          <target state="translated">LTS</target>
        </trans-unit>
        <trans-unit id="800734d40ea8493c3a8bf4b7794c379316a3df97" translate="yes" xml:space="preserve">
          <source>Language Code</source>
          <target state="translated">言語コード</target>
        </trans-unit>
        <trans-unit id="2ccd20b6dbc9562a28819fbf7ff0129d89476dcb" translate="yes" xml:space="preserve">
          <source>Language Name</source>
          <target state="translated">言語名</target>
        </trans-unit>
        <trans-unit id="535cdb9bf5c901974567357abde733d39ad34291" translate="yes" xml:space="preserve">
          <source>Laothian</source>
          <target state="translated">Laothian</target>
        </trans-unit>
        <trans-unit id="d110f1435e34b27515c30f3be3bcd2bfb2388e70" translate="yes" xml:space="preserve">
          <source>Large icon</source>
          <target state="translated">大きなアイコン</target>
        </trans-unit>
        <trans-unit id="e05f92ac1b16cc7edb8d43150b49e59e79895476" translate="yes" xml:space="preserve">
          <source>Later versions of Windows allow for advanced notifications, with custom templates, images, and other flexible elements. To send those notifications (from either the main process or the renderer process), use the userland module &lt;a href=&quot;https://github.com/felixrieseberg/electron-windows-notifications&quot;&gt;electron-windows-notifications&lt;/a&gt;, which uses native Node addons to send &lt;code&gt;ToastNotification&lt;/code&gt; and &lt;code&gt;TileNotification&lt;/code&gt; objects.</source>
          <target state="translated">それ以降のバージョンのWindowsでは、カスタムテンプレート、画像、その他の柔軟な要素を備えた高度な通知が可能です。（メイン処理又はレンダリングプロセスのいずれかから）、それらの通知を送信するために、ユーザランドモジュールを使用して&lt;a href=&quot;https://github.com/felixrieseberg/electron-windows-notifications&quot;&gt;電子のWindows-通知&lt;/a&gt;送信するネイティブノードアドオンを使用する、 &lt;code&gt;ToastNotification&lt;/code&gt; と &lt;code&gt;TileNotification&lt;/code&gt; オブジェクトを。</target>
        </trans-unit>
        <trans-unit id="1728312ad64b08dc2b1876cfbbf9262bc117c354" translate="yes" xml:space="preserve">
          <source>Later versions of macOS allow for notifications with an input field, allowing the user to quickly reply to a notification. In order to send notifications with an input field, use the userland module &lt;a href=&quot;https://github.com/CharlieHess/node-mac-notifier&quot;&gt;node-mac-notifier&lt;/a&gt;.</source>
          <target state="translated">macOSの以降のバージョンでは、入力フィールドを使用した通知が可能になり、ユーザーは通知にすばやく返信できます。入力フィールドで通知を送信するには、ユーザーランドモジュール&lt;a href=&quot;https://github.com/CharlieHess/node-mac-notifier&quot;&gt;node-mac-notifierを&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="79102e50ec1470cd9d985bb97a7ee168aea5c9fa" translate="yes" xml:space="preserve">
          <source>Later, a zero-day exploit is revealed and a fix is applied to master. We backport the fix to the &lt;code&gt;2-0-x&lt;/code&gt; line and release &lt;code&gt;2.0.1&lt;/code&gt;.</source>
          <target state="translated">その後、ゼロデイエクスプロイトが明らかになり、マスターに修正が適用されます。修正を &lt;code&gt;2-0-x&lt;/code&gt; ラインにバックポートし、 &lt;code&gt;2.0.1&lt;/code&gt; をリリースします。</target>
        </trans-unit>
        <trans-unit id="9bde795b72be44b343c829314d764282997de688" translate="yes" xml:space="preserve">
          <source>Latin</source>
          <target state="translated">Latin</target>
        </trans-unit>
        <trans-unit id="9ed6ae997b1668915a9529a0889d5ac9735b0c4b" translate="yes" xml:space="preserve">
          <source>Latvian</source>
          <target state="translated">Latvian</target>
        </trans-unit>
        <trans-unit id="f24a5193238f86b2d3d254301b3c323f9785e36d" translate="yes" xml:space="preserve">
          <source>Launch Electron app after build. You can now open the xcode workspace created above and attach to the Electron process through the Debug &amp;gt; Attach To Process &amp;gt; Electron debug menu. [Note: If you want to debug the renderer process, you need to attach to the Electron Helper as well.]</source>
          <target state="translated">ビルド後にElectronアプリを起動します。これで、上記で作成したxcodeワークスペースを開き、[デバッグ]&amp;gt; [プロセスにアタッチ]&amp;gt; [Electronデバッグ]メニューからElectronプロセスにアタッチできます。[注：レンダラープロセスをデバッグする場合は、ElectronHelperにもアタッチする必要があります。]</target>
        </trans-unit>
        <trans-unit id="76482ebb939485aeaa736d61937bc8887f92fd1e" translate="yes" xml:space="preserve">
          <source>Launch Visual Studio 2017 on your development machine.</source>
          <target state="translated">開発マシンでVisual Studio 2017を起動します。</target>
        </trans-unit>
        <trans-unit id="12c9e11f89aca32c500a6c6be3bcd67a6e93e727" translate="yes" xml:space="preserve">
          <source>Launch electron app after build. You can now open the xcode workspace created above and attach to the electron process through the Debug &amp;gt; Attach To Process &amp;gt; Electron debug menu. [Note: If you want to debug the renderer process, you need to attach to the Electron Helper as well.]</source>
          <target state="translated">ビルド後にelectronアプリを起動します。上記で作成したxcodeワークスペースを開き、[デバッグ]&amp;gt; [プロセスにアタッチ]&amp;gt; [電子デバッグ]メニューから電子プロセスにアタッチできます。[注：レンダラープロセスをデバッグする場合は、Electron Helperにもアタッチする必要があります。]</target>
        </trans-unit>
        <trans-unit id="a5303f1d5313a1be24a844d73befd4f8a1111c34" translate="yes" xml:space="preserve">
          <source>Launch your app &lt;code&gt;.exe&lt;/code&gt; on the target device via the &lt;em&gt;Command Prompt&lt;/em&gt; (passing &lt;code&gt;--inspect-brk&lt;/code&gt; to pause it before any native modules are loaded).</source>
          <target state="translated">&lt;em&gt;コマンドプロンプトを&lt;/em&gt;使用して、ターゲットデバイスでapp &lt;code&gt;.exe&lt;/code&gt; を起動します（ネイティブモジュールが読み込まれる前に一時停止するには、 &lt;code&gt;--inspect-brk&lt;/code&gt; を渡します）。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="cbd9b1b900b29e1c4c6b76c3752bba04afcef68e" translate="yes" xml:space="preserve">
          <source>Learning the basics</source>
          <target state="translated">基礎を学ぶ</target>
        </trans-unit>
        <trans-unit id="edb627b677bb2e85eb500bda16bcdd868b84eb44" translate="yes" xml:space="preserve">
          <source>Legitimate use cases exist, but unless you know what you are doing, you should not enable this property.</source>
          <target state="translated">合法的なユースケースは存在しますが、何をしているかわからない限り、このプロパティを有効にすべきではありません。</target>
        </trans-unit>
        <trans-unit id="e5416149c06382c28af60fb1dc625ea79a1e2812" translate="yes" xml:space="preserve">
          <source>Let's assume that you want to debug &lt;code&gt;app.setName()&lt;/code&gt;, which is defined in &lt;code&gt;browser.cc&lt;/code&gt; as &lt;code&gt;Browser::SetName()&lt;/code&gt;. Set the breakpoint using the &lt;code&gt;breakpoint&lt;/code&gt; command, specifying file and line to break on:</source>
          <target state="translated">&lt;code&gt;browser.cc&lt;/code&gt; で &lt;code&gt;Browser::SetName()&lt;/code&gt; として定義されている &lt;code&gt;app.setName()&lt;/code&gt; をデバッグするとします。 &lt;code&gt;breakpoint&lt;/code&gt; コマンドを使用してブレークポイントを設定し、ブレークするファイルと行を指定します。</target>
        </trans-unit>
        <trans-unit id="a080ac531dcc73a8c207eaedd84e7f44ba1ebf68" translate="yes" xml:space="preserve">
          <source>Let's consider Visual Studio Code as an example. When you open a file, it will immediately display the file to you without any code highlighting, prioritizing your ability to interact with the text. Once it has done that work, it will move on to code highlighting.</source>
          <target state="translated">例として Visual Studio Code を考えてみましょう。ファイルを開くと、コードの強調表示なしですぐにファイルを表示し、テキストとの対話能力を優先します。その作業が終わると、コードの強調表示に移ります。</target>
        </trans-unit>
        <trans-unit id="10cfd7be6b4c87dffec0c382114913cacbf312a7" translate="yes" xml:space="preserve">
          <source>Let's consider an example and assume that your application is parsing files in the fictitious &lt;code&gt;.foo&lt;/code&gt; format. In order to do that, it relies on the equally fictitious &lt;code&gt;foo-parser&lt;/code&gt; module. In traditional Node.js development, you might write code that eagerly loads dependencies:</source>
          <target state="translated">例を考えて、アプリケーションが架空の &lt;code&gt;.foo&lt;/code&gt; 形式のファイルを解析していると仮定しましょう。それを行うために、それは同様に架空の &lt;code&gt;foo-parser&lt;/code&gt; モジュールに依存しています。従来のNode.js開発では、依存関係を熱心にロードするコードを作成する場合があります。</target>
        </trans-unit>
        <trans-unit id="a89f07ae8bf8f667f4acbbda19c42b285c948799" translate="yes" xml:space="preserve">
          <source>Let's create a basic application based on the structure above.</source>
          <target state="translated">上記の構造を元に、基本的なアプリケーションを作成してみましょう。</target>
        </trans-unit>
        <trans-unit id="bd60bf81eb78f217cd0f5886c23198c274578a36" translate="yes" xml:space="preserve">
          <source>Let's take a look at an example configuration with all required fields. Not all of them are required: the tools will be clever enough to automatically find a suitable &lt;code&gt;identity&lt;/code&gt;, for instance, but we recommend that you are explicit.</source>
          <target state="translated">すべての必須フィールドを含む構成例を見てみましょう。それらのすべてが必要なわけではありません。たとえば、ツールは適切な &lt;code&gt;identity&lt;/code&gt; を自動的に見つけるのに十分賢いでしょうが、明示的にすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c58bd40e95aef48eee67a645bb4f78e1797cdf10" translate="yes" xml:space="preserve">
          <source>Licensed under the MIT license.</source>
          <target state="translated">MITのライセンスでライセンスされています。</target>
        </trans-unit>
        <trans-unit id="2685bc981621da79d2600fee575db7b305064b8d" translate="yes" xml:space="preserve">
          <source>Lifetime of Remote Objects</source>
          <target state="translated">リモートオブジェクトの寿命</target>
        </trans-unit>
        <trans-unit id="7ca3b9cea4395aa3b2fc28c2e8bca789ab8d4c2a" translate="yes" xml:space="preserve">
          <source>Like &lt;a href=&quot;https://nwjs.io/&quot;&gt;NW.js&lt;/a&gt;, Electron provides a platform to write desktop applications with web technologies. Both platforms enable developers to utilize HTML, JavaScript, and Node.js. On the surface, they seem very similar.</source>
          <target state="translated">&lt;a href=&quot;https://nwjs.io/&quot;&gt;NW.js&lt;/a&gt;と同様に、Electronは、Webテクノロジーを使用してデスクトップアプリケーションを作成するためのプラットフォームを提供します。どちらのプラットフォームでも、開発者はHTML、JavaScript、およびNode.jsを利用できます。表面的には、それらは非常に似ているように見えます。</target>
        </trans-unit>
        <trans-unit id="5e9ffa6ffac7ebf299d8829cf9d9d0fbcc4082a7" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;--host-rules&lt;/code&gt; but these &lt;code&gt;rules&lt;/code&gt; only apply to the host resolver.</source>
          <target state="translated">&lt;code&gt;--host-rules&lt;/code&gt; と似ていますが、これらの &lt;code&gt;rules&lt;/code&gt; はホストリゾルバにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="cf07f03f4c10e887c4ab3647d44403ccb8dab3d1" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;--inspect&lt;/code&gt; but pauses execution on the first line of JavaScript.</source>
          <target state="translated">同様 &lt;code&gt;--inspect&lt;/code&gt; しかし、JavaScriptの最初の行に実行を一時停止します。</target>
        </trans-unit>
        <trans-unit id="f2c530a19bd62e37e3a792fa8bf53464fa79e244" translate="yes" xml:space="preserve">
          <source>Like &lt;code&gt;ipcRenderer.send&lt;/code&gt; but the event will be sent to the &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; element in the host page instead of the main process.</source>
          <target state="translated">&lt;code&gt;ipcRenderer.send&lt;/code&gt; と同様ですが、イベントはメインプロセスではなくホストページの &lt;code&gt;&amp;lt;webview&amp;gt;&lt;/code&gt; 要素に送信されます。</target>
        </trans-unit>
        <trans-unit id="94b0ded4d60e2107d4aeb10a52dcd568cfff0aed" translate="yes" xml:space="preserve">
          <source>Like NW.js, Electron provides a platform to write desktop applications with JavaScript and HTML and has Node integration to grant access to the low level system from web pages.</source>
          <target state="translated">NW.jsと同様に、ElectronはJavaScriptとHTMLでデスクトップアプリケーションを書くためのプラットフォームを提供し、Nodeを統合してWebページから低レベルのシステムへのアクセスを許可しています。</target>
        </trans-unit>
        <trans-unit id="71c3e236560dfd383eb6c25132ec2f90fb850124" translate="yes" xml:space="preserve">
          <source>Like Node, Electron is focused on having a small set of APIs that provide all the necessary primitives for developing multi-platform desktop applications. This design philosophy allows Electron to remain a flexible tool without being overly prescriptive about how it should be used. Userland enables users to create and share tools that provide additional functionality on top of what is available in &quot;core&quot;.</source>
          <target state="translated">Nodeと同様に、Electronは、マルチプラットフォームのデスクトップアプリケーションを開発するために必要なすべてのプリミティブを提供する小さなAPIのセットを持つことに焦点を当てています。この設計思想により、Electronはどのように使うべきかを過度に規定することなく、柔軟なツールであり続けることができます。ユーザーランドは、ユーザーが「コア」で利用可能な機能の上に追加機能を提供するツールを作成し、共有することを可能にします。</target>
        </trans-unit>
        <trans-unit id="a7c04c64ed3f2a9374590c76c50d3b7f1b18e3da" translate="yes" xml:space="preserve">
          <source>Limitations</source>
          <target state="translated">Limitations</target>
        </trans-unit>
        <trans-unit id="3c46b62eb65be1e5fd1cb89afd7c2ec725817824" translate="yes" xml:space="preserve">
          <source>Limitations of MAS Build</source>
          <target state="translated">MASビルドの限界</target>
        </trans-unit>
        <trans-unit id="b62ec0042a445f3138737f83a1b75da7db12a301" translate="yes" xml:space="preserve">
          <source>Limitations of the Node API</source>
          <target state="translated">ノードAPIの制限事項</target>
        </trans-unit>
        <trans-unit id="67964fcdb98b346ac7601e97da9b492079aa1c15" translate="yes" xml:space="preserve">
          <source>Line 16: You create a new browser window by invoking the &lt;code&gt;createWindow&lt;/code&gt; function once the Electron application &lt;a href=&quot;../api/app#appwhenready&quot;&gt;is initialized&lt;/a&gt;.</source>
          <target state="translated">16行目：Electronアプリケーション&lt;a href=&quot;../api/app#appwhenready&quot;&gt;が初期化され&lt;/a&gt;たら、 &lt;code&gt;createWindow&lt;/code&gt; 関数を呼び出して、新しいブラウザウィンドウを作成します。</target>
        </trans-unit>
        <trans-unit id="a88ed512c2ab4ebdd6420edb4b33272a2726586f" translate="yes" xml:space="preserve">
          <source>Line 16: You create a new browser window by invoking the &lt;code&gt;createWindow&lt;/code&gt; function once the Electron application &lt;a href=&quot;api/app#appwhenready&quot;&gt;is initialized&lt;/a&gt;.</source>
          <target state="translated">16行目：Electronアプリケーション&lt;a href=&quot;api/app#appwhenready&quot;&gt;が初期化され&lt;/a&gt;たら、 &lt;code&gt;createWindow&lt;/code&gt; 関数を呼び出して新しいブラウザウィンドウを作成します。</target>
        </trans-unit>
        <trans-unit id="b82ae7014f179dacfeeb04d5514ba216aa8d105a" translate="yes" xml:space="preserve">
          <source>Line 18: You add a new listener that tries to quit the application when it no longer has any open windows. This listener is a no-op on macOS due to the operating system's &lt;a href=&quot;https://support.apple.com/en-ca/guide/mac-help/mchlp2469/mac&quot;&gt;window management behavior&lt;/a&gt;.</source>
          <target state="translated">18行目：開いているウィンドウがなくなったときにアプリケーションを終了しようとする新しいリスナーを追加します。このリスナーは、オペレーティングシステムの&lt;a href=&quot;https://support.apple.com/en-ca/guide/mac-help/mchlp2469/mac&quot;&gt;ウィンドウ管理動作&lt;/a&gt;のため、macOSでは動作しません。</target>
        </trans-unit>
        <trans-unit id="514c6823cc622ec82d28d3773b74d33fdd425c8f" translate="yes" xml:space="preserve">
          <source>Line 1: First, you import the &lt;code&gt;app&lt;/code&gt; and &lt;code&gt;BrowserWindow&lt;/code&gt; modules of the &lt;code&gt;electron&lt;/code&gt; package to be able to manage your application's lifecycle events, as well as create and control browser windows.</source>
          <target state="translated">1行目：最初に、 &lt;code&gt;electron&lt;/code&gt; パッケージの &lt;code&gt;app&lt;/code&gt; モジュールと &lt;code&gt;BrowserWindow&lt;/code&gt; モジュールをインポートして、アプリケーションのライフサイクルイベントを管理したり、ブラウザーウィンドウを作成および制御したりできるようにします。</target>
        </trans-unit>
        <trans-unit id="87894685915c49b65290bf0dd9f036412ff8ca7f" translate="yes" xml:space="preserve">
          <source>Line 24: You add a new listener that creates a new browser window only if when the application has no visible windows after being activated. For example, after launching the application for the first time, or re-launching the already running application.</source>
          <target state="translated">24行目:アプリケーションがアクティブ化された後にウィンドウが表示されていない場合にのみ、新しいブラウザウィンドウを作成する新しいリスナーを追加します。例えば、アプリケーションを初めて起動した後や、既に起動しているアプリケーションを再起動した後などです。</target>
        </trans-unit>
        <trans-unit id="0006eded6f8f03a487d831ba07231bf4c16dcf29" translate="yes" xml:space="preserve">
          <source>Line 3: After that, you define a function that creates a &lt;a href=&quot;../api/browser-window#new-browserwindowoptions&quot;&gt;new browser window&lt;/a&gt; with node integration enabled, loads &lt;code&gt;index.html&lt;/code&gt; file into this window (line 12, we will discuss the file later) and opens Developer Tools (line 13).</source>
          <target state="translated">3行目：その後、ノード統合を有効にして&lt;a href=&quot;../api/browser-window#new-browserwindowoptions&quot;&gt;新しいブラウザーウィンドウ&lt;/a&gt;を作成し、 &lt;code&gt;index.html&lt;/code&gt; ファイルをこのウィンドウにロードし（12行目、ファイルについては後で説明します）、開発ツールを開きます（13行目）関数を定義します。</target>
        </trans-unit>
        <trans-unit id="54cbd6299a0d2407338028c41e7bee838f2ff1bb" translate="yes" xml:space="preserve">
          <source>Line 3: After that, you define a function that creates a &lt;a href=&quot;api/browser-window#new-browserwindowoptions&quot;&gt;new browser window&lt;/a&gt; with node integration enabled, loads &lt;code&gt;index.html&lt;/code&gt; file into this window (line 12, we will discuss the file later) and opens Developer Tools (line 13).</source>
          <target state="translated">3行目：その後、ノード統合を有効にして&lt;a href=&quot;api/browser-window#new-browserwindowoptions&quot;&gt;新しいブラウザーウィンドウ&lt;/a&gt;を作成し、 &lt;code&gt;index.html&lt;/code&gt; ファイルをこのウィンドウにロードし（12行目、ファイルについては後で説明します）、開発ツールを開きます（13行目）。</target>
        </trans-unit>
        <trans-unit id="cb66995abb74e805e53169314b54331289ce47c8" translate="yes" xml:space="preserve">
          <source>Lines should be wrapped at 80 columns.</source>
          <target state="translated">行は80列で折り返してください。</target>
        </trans-unit>
        <trans-unit id="bdf581cc1c81ea3b5fa1a390925a643afcab19e5" translate="yes" xml:space="preserve">
          <source>Lingala</source>
          <target state="translated">Lingala</target>
        </trans-unit>
        <trans-unit id="be34399d2ade8873f3c53335c4fca0fc637ac2c0" translate="yes" xml:space="preserve">
          <source>Linking against the correct &lt;code&gt;node.lib&lt;/code&gt;</source>
          <target state="translated">正しい &lt;code&gt;node.lib&lt;/code&gt; に対するリンク</target>
        </trans-unit>
        <trans-unit id="8740f6b1646315b108f5a7b7630739c109bdee42" translate="yes" xml:space="preserve">
          <source>Linting</source>
          <target state="translated">Linting</target>
        </trans-unit>
        <trans-unit id="83ad8510bbd3f22363d068e1c96f82fd0fcccd31" translate="yes" xml:space="preserve">
          <source>Linux</source>
          <target state="translated">Linux</target>
        </trans-unit>
        <trans-unit id="18777160cf1a72270b7936a6a4eaee0e6afd8fc1" translate="yes" xml:space="preserve">
          <source>Linux x64</source>
          <target state="translated">リナックス六四</target>
        </trans-unit>
        <trans-unit id="cbbe22f2550a73a1a46fffc9f1b0fb85f17d128b" translate="yes" xml:space="preserve">
          <source>Linux x86</source>
          <target state="translated">リナックス八十六</target>
        </trans-unit>
        <trans-unit id="7f370089b00f31b78935318c07ce7b050337cf2a" translate="yes" xml:space="preserve">
          <source>Linux: &lt;code&gt;$XDG_CACHE_HOME&lt;/code&gt; or &lt;code&gt;~/.cache/electron/&lt;/code&gt;</source>
          <target state="translated">Linux： &lt;code&gt;$XDG_CACHE_HOME&lt;/code&gt; または &lt;code&gt;~/.cache/electron/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="20cb29cb8daab844a02a18f0ac83d7c62fbad7dc" translate="yes" xml:space="preserve">
          <source>List all files under the root of the archive:</source>
          <target state="translated">アーカイブのルート以下のすべてのファイルをリストアップします。</target>
        </trans-unit>
        <trans-unit id="ebd312c54c59e660e8a804202db75a55093c1d92" translate="yes" xml:space="preserve">
          <source>Listens to &lt;code&gt;channel&lt;/code&gt;, when a new message arrives &lt;code&gt;listener&lt;/code&gt; would be called with &lt;code&gt;listener(event, args...)&lt;/code&gt;.</source>
          <target state="translated">耳を傾け &lt;code&gt;channel&lt;/code&gt; の新しいメッセージが到着すると、 &lt;code&gt;listener&lt;/code&gt; で呼び出されます &lt;code&gt;listener(event, args...)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="553c519c9addc3f4dad41b4a23238251692354b7" translate="yes" xml:space="preserve">
          <source>Lithuanian</source>
          <target state="translated">Lithuanian</target>
        </trans-unit>
        <trans-unit id="c195f338511e5c39daf33da048f7d8fc20adcba4" translate="yes" xml:space="preserve">
          <source>Loaded extensions will not be automatically remembered across exits; if you do not call &lt;code&gt;loadExtension&lt;/code&gt; when the app runs, the extension will not be loaded.</source>
          <target state="translated">ロードされた拡張機能は、出口間で自動的に記憶されません。アプリの実行時に &lt;code&gt;loadExtension&lt;/code&gt; を呼び出さないと、拡張機能は読み込まれません。</target>
        </trans-unit>
        <trans-unit id="c7276725d40e1b9cf349327a4ce3aafa60e776c3" translate="yes" xml:space="preserve">
          <source>Loading and running code too soon</source>
          <target state="translated">コードのロードと実行が早すぎる</target>
        </trans-unit>
        <trans-unit id="ef941bb9afb25b349511256cc034b5e38d94c79b" translate="yes" xml:space="preserve">
          <source>Loading content over &lt;code&gt;HTTPS&lt;/code&gt; assures the authenticity and integrity of the loaded resources while encrypting the traffic itself. See the section on &lt;a href=&quot;#1-only-load-secure-content&quot;&gt;only displaying secure content&lt;/a&gt; for more details.</source>
          <target state="translated">&lt;code&gt;HTTPS&lt;/code&gt; 経由でコンテンツをロードすると、トラフィック自体を暗号化しながら、ロードされたリソースの信頼性と整合性が保証されます。詳細については、&lt;a href=&quot;#1-only-load-secure-content&quot;&gt;保護されたコンテンツの表示のみ&lt;/a&gt;に関するセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="6a7adf5ab6dcd5fe2a6411597ecf86d181fec9ea" translate="yes" xml:space="preserve">
          <source>Loading extensions</source>
          <target state="translated">拡張機能の読み込み</target>
        </trans-unit>
        <trans-unit id="b68cad196571ec704765f46bcf228bf7fe3b4e20" translate="yes" xml:space="preserve">
          <source>Loading modules is a surprisingly expensive operation, especially on Windows. When your app starts, it should not make users wait for operations that are currently not necessary.</source>
          <target state="translated">モジュールのロードは、特にWindows上では驚くほど高価な操作です。アプリの起動時に、現在必要のない操作をユーザーに待たせるべきではありません。</target>
        </trans-unit>
        <trans-unit id="fc079f52aed3f3417e23c1f910ecdea48460cc9f" translate="yes" xml:space="preserve">
          <source>Loading the initial HTML of a website over &lt;code&gt;HTTPS&lt;/code&gt; and attempting to load subsequent resources via &lt;code&gt;HTTP&lt;/code&gt; is also known as &quot;mixed content&quot;.</source>
          <target state="translated">&lt;code&gt;HTTPS&lt;/code&gt; を介してWebサイトの最初のHTMLを読み込み、 &lt;code&gt;HTTP&lt;/code&gt; 経由で後続のリソースを読み込もうとすることは、「混合コンテンツ」とも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="30a1a104adb3f5e456c05c2a32c27218b68a7f56" translate="yes" xml:space="preserve">
          <source>Loads the &lt;code&gt;url&lt;/code&gt; in the webview, the &lt;code&gt;url&lt;/code&gt; must contain the protocol prefix, e.g. the &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;file://&lt;/code&gt;.</source>
          <target state="translated">ロードは &lt;code&gt;url&lt;/code&gt; のWebViewで、 &lt;code&gt;url&lt;/code&gt; 例えば、プロトコルプレフィックスが含まれている必要があり &lt;code&gt;http://&lt;/code&gt; または &lt;code&gt;file://&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="be93699ca87035f9fc36269481c3bdb20862991d" translate="yes" xml:space="preserve">
          <source>Loads the &lt;code&gt;url&lt;/code&gt; in the window. The &lt;code&gt;url&lt;/code&gt; must contain the protocol prefix, e.g. the &lt;code&gt;http://&lt;/code&gt; or &lt;code&gt;file://&lt;/code&gt;. If the load should bypass http cache then use the &lt;code&gt;pragma&lt;/code&gt; header to achieve it.</source>
          <target state="translated">ウィンドウに &lt;code&gt;url&lt;/code&gt; をロードします。 &lt;code&gt;url&lt;/code&gt; 例えば、プロトコルプレフィックスが含まれている必要があり &lt;code&gt;http://&lt;/code&gt; または &lt;code&gt;file://&lt;/code&gt; 。ロードでhttpキャッシュをバイパスする必要がある場合は、 &lt;code&gt;pragma&lt;/code&gt; ヘッダーを使用してそれを実現します。</target>
        </trans-unit>
        <trans-unit id="49f3107176240c3484499f42d4ea3791ab0eb6ce" translate="yes" xml:space="preserve">
          <source>Loads the given file in the window, &lt;code&gt;filePath&lt;/code&gt; should be a path to an HTML file relative to the root of your application. For instance an app structure like this:</source>
          <target state="translated">指定されたファイルをウィンドウにロードします &lt;code&gt;filePath&lt;/code&gt; は、アプリケーションのルートを基準にしたHTMLファイルへのパスである必要があります。たとえば、次のようなアプリ構造：</target>
        </trans-unit>
        <trans-unit id="9ee0cb93b5814acea6da884dc9bf6b78f5602f71" translate="yes" xml:space="preserve">
          <source>Local Modules (using relative paths)</source>
          <target state="translated">ローカルモジュール (相対パスを使用)</target>
        </trans-unit>
        <trans-unit id="bf7c326f8217d8d073a4c87dc6c0c16e9df63e9f" translate="yes" xml:space="preserve">
          <source>Local Shortcuts</source>
          <target state="translated">ローカル ショートカット</target>
        </trans-unit>
        <trans-unit id="e3905b29d9bf54a33a15a18b60c1dcaf0efa3336" translate="yes" xml:space="preserve">
          <source>Local keyboard shortcuts are triggered only when the application is focused. To configure a local keyboard shortcut, you need to specify an &lt;a href=&quot;../api/accelerator&quot;&gt;&lt;code&gt;accelerator&lt;/code&gt;&lt;/a&gt; property when creating a &lt;a href=&quot;../api/menu-item&quot;&gt;MenuItem&lt;/a&gt; within the &lt;a href=&quot;../api/menu&quot;&gt;Menu&lt;/a&gt; module.</source>
          <target state="translated">ローカルキーボードショートカットは、アプリケーションがフォーカスされている場合にのみトリガーされます。ローカルキーボードショートカットを設定するには、&lt;a href=&quot;../api/menu&quot;&gt;Menu&lt;/a&gt;モジュール内で&lt;a href=&quot;../api/menu-item&quot;&gt;MenuItemを&lt;/a&gt;作成するときに&lt;a href=&quot;../api/accelerator&quot;&gt; &lt;code&gt;accelerator&lt;/code&gt; &lt;/a&gt;プロパティを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4a729b9929af80edd77447c2518d36e70780a5d1" translate="yes" xml:space="preserve">
          <source>Local keyboard shortcuts are triggered only when the application is focused. To configure a local keyboard shortcut, you need to specify an &lt;a href=&quot;api/accelerator&quot;&gt;&lt;code&gt;accelerator&lt;/code&gt;&lt;/a&gt; property when creating a &lt;a href=&quot;api/menu-item&quot;&gt;MenuItem&lt;/a&gt; within the &lt;a href=&quot;api/menu&quot;&gt;Menu&lt;/a&gt; module.</source>
          <target state="translated">ローカルキーボードショートカットは、アプリケーションがフォーカスされている場合にのみトリガーされます。ローカルキーボードショートカットを設定するには、&lt;a href=&quot;api/menu&quot;&gt;Menu&lt;/a&gt;モジュール内で&lt;a href=&quot;api/menu-item&quot;&gt;MenuItemを&lt;/a&gt;作成するときに&lt;a href=&quot;api/accelerator&quot;&gt; &lt;code&gt;accelerator&lt;/code&gt; &lt;/a&gt;プロパティを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="031b11f4c0cdf5c68d2539db1248bf550f65668e" translate="yes" xml:space="preserve">
          <source>Locale values returned by &lt;code&gt;app.getLocale()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;app.getLocale()&lt;/code&gt; によって返されるロケール値。</target>
        </trans-unit>
        <trans-unit id="9a621b0da3425ea2613fe09c377400e16b011ee6" translate="yes" xml:space="preserve">
          <source>Locale values returned by app.getLocale().</source>
          <target state="translated">app.getLocale()によって返されるロケールの値。</target>
        </trans-unit>
        <trans-unit id="a222060e32289bf6910ac4a07a10733be500bd99" translate="yes" xml:space="preserve">
          <source>Locales</source>
          <target state="translated">Locales</target>
        </trans-unit>
        <trans-unit id="e101dd7d36fcf91f4a7562468263eaf821e410bf" translate="yes" xml:space="preserve">
          <source>Located in &lt;code&gt;electron/libchromiumcontent/src/tools/clang/scripts/update.py&lt;/code&gt;</source>
          <target state="translated">位置 &lt;code&gt;electron/libchromiumcontent/src/tools/clang/scripts/update.py&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e10fb5f8bb5cc4a40661ba94d0a1e8704aee55b0" translate="yes" xml:space="preserve">
          <source>Location use &lt;code&gt;East US&lt;/code&gt;</source>
          <target state="translated">場所は &lt;code&gt;East US&lt;/code&gt; 使用します</target>
        </trans-unit>
        <trans-unit id="1d792990f936b88d205256443e175e2497e70039" translate="yes" xml:space="preserve">
          <source>Log back into Azure and find the VM you just created in Home &amp;lt; Virtual Machines &amp;lt; &lt;code&gt;$YOUR_NEW_VM&lt;/code&gt;</source>
          <target state="translated">Azureに再度ログインし、ホーム&amp;lt;仮想マシン&amp;lt; &lt;code&gt;$YOUR_NEW_VM&lt;/code&gt; 作成したVMを見つけます</target>
        </trans-unit>
        <trans-unit id="f11d5438ffd1df7b05d1d8c7d640c31e01f85aa7" translate="yes" xml:space="preserve">
          <source>Log into Azure using credentials stored in LastPass (under Azure Enterprise) and then find the storage account corresponding to the name found in AppVeyor.</source>
          <target state="translated">LastPass(Azure Enterpriseの下)に保存されているクレデンシャルを使用してAzureにログインし、AppVeyorで見つかった名前に対応するストレージアカウントを探します。</target>
        </trans-unit>
        <trans-unit id="040cec91903a1472149963d35b391790f775f3b7" translate="yes" xml:space="preserve">
          <source>Logging network events for a session.</source>
          <target state="translated">セッションのネットワークイベントをログに記録します。</target>
        </trans-unit>
        <trans-unit id="857d812e97fcac1b5c82d2064588db4e5ddd72d4" translate="yes" xml:space="preserve">
          <source>Long term support of older versions of Electron does not currently exist. If your current version of Electron works for you, you can stay on it for as long as you'd like. If you want to make use of new features as they come in you should upgrade to a newer version.</source>
          <target state="translated">現在、古いバージョンのElectronの長期サポートはありません。現在お使いのElectronのバージョンが有効であれば、お好きなだけお使いいただけます。新機能の追加をご希望の場合は、新しいバージョンにアップグレードしてください。</target>
        </trans-unit>
        <trans-unit id="3a0bc0281fd3595d7a2edb4b0727d10f9458d490" translate="yes" xml:space="preserve">
          <source>Lots of Windows-specific code contains if... else logic that selects between either the x64 or x86 architectures.</source>
          <target state="translated">多くの Windows 固有のコードには、x64 または x86 アーキテクチャのどちらかを選択する if...else ロジックが含まれています。</target>
        </trans-unit>
        <trans-unit id="cc77b5d76eb28a6a1071f43293da2ad44963802d" translate="yes" xml:space="preserve">
          <source>M61</source>
          <target state="translated">M61</target>
        </trans-unit>
        <trans-unit id="bd601302ae1022e3c587ef6ff9f36d99c05033a2" translate="yes" xml:space="preserve">
          <source>M66</source>
          <target state="translated">M66</target>
        </trans-unit>
        <trans-unit id="570fd89a6a1e3d247f91e4b98c64316550cc23fe" translate="yes" xml:space="preserve">
          <source>M69</source>
          <target state="translated">M69</target>
        </trans-unit>
        <trans-unit id="67e8ecdb180a8b9e10f32fc21f30fce4b4b43d88" translate="yes" xml:space="preserve">
          <source>M73</source>
          <target state="translated">M73</target>
        </trans-unit>
        <trans-unit id="ec5b1178518609c1bf685a6f309f5dde452c774d" translate="yes" xml:space="preserve">
          <source>M76</source>
          <target state="translated">M76</target>
        </trans-unit>
        <trans-unit id="f3c13bb155162fb5b8a51b2f09ad8ab39460bd6b" translate="yes" xml:space="preserve">
          <source>M78</source>
          <target state="translated">M78</target>
        </trans-unit>
        <trans-unit id="bdc2f0a5b17b29b5cbf1cbeed4c49ef4fe9d4d45" translate="yes" xml:space="preserve">
          <source>M80</source>
          <target state="translated">M80</target>
        </trans-unit>
        <trans-unit id="f9973645a0bf87e6405e445fd1eb4a38f408d8ff" translate="yes" xml:space="preserve">
          <source>M83</source>
          <target state="translated">M83</target>
        </trans-unit>
        <trans-unit id="da7293df79dccd7586a8aa6f59fec17cb41f9954" translate="yes" xml:space="preserve">
          <source>M85</source>
          <target state="translated">M85</target>
        </trans-unit>
        <trans-unit id="96e50765184ecbab70a9259abc6bc3b814072569" translate="yes" xml:space="preserve">
          <source>M87</source>
          <target state="translated">M87</target>
        </trans-unit>
        <trans-unit id="735728986e2d4027455f0815374e51ec5e662523" translate="yes" xml:space="preserve">
          <source>M89</source>
          <target state="translated">M89</target>
        </trans-unit>
        <trans-unit id="68af66810bb202c8b75471176a3f65b13ff42f73" translate="yes" xml:space="preserve">
          <source>MAS</source>
          <target state="translated">MAS</target>
        </trans-unit>
        <trans-unit id="87622d875bec8a4daf829da2f6e6a4da0aa5935c" translate="yes" xml:space="preserve">
          <source>MD2 - &lt;a href=&quot;https://tools.ietf.org/html/rfc1319&quot;&gt;RFC 1319&lt;/a&gt;</source>
          <target state="translated">MD2- &lt;a href=&quot;https://tools.ietf.org/html/rfc1319&quot;&gt;RFC 1319&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="48c7fdf5c55534c6ded90e9795080da11821105c" translate="yes" xml:space="preserve">
          <source>MD4 - &lt;a href=&quot;https://tools.ietf.org/html/rfc6150&quot;&gt;RFC 6150&lt;/a&gt;</source>
          <target state="translated">MD4- &lt;a href=&quot;https://tools.ietf.org/html/rfc6150&quot;&gt;RFC 6150&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="5b2779c17e43e24356f84eb01a1a814532502f63" translate="yes" xml:space="preserve">
          <source>MD5 - &lt;a href=&quot;https://tools.ietf.org/html/rfc1321&quot;&gt;RFC 1321&lt;/a&gt;</source>
          <target state="translated">MD5- &lt;a href=&quot;https://tools.ietf.org/html/rfc1321&quot;&gt;RFC 1321&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="4eb4ebbec5df5de4887b468de43d79bcbae01a9d" translate="yes" xml:space="preserve">
          <source>MDC2 - &lt;a href=&quot;https://wiki.openssl.org/index.php/Manual:Mdc2(3)&quot;&gt;ISO/IEC 10118-2&lt;/a&gt;</source>
          <target state="translated">MDC2- &lt;a href=&quot;https://wiki.openssl.org/index.php/Manual:Mdc2(3)&quot;&gt;ISO / IEC 10118-2&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="1764c9b488881944bdd8aa802a90466c19b07913" translate="yes" xml:space="preserve">
          <source>Mac App Store</source>
          <target state="translated">マックアプリストア</target>
        </trans-unit>
        <trans-unit id="780c258bc4ad975884ac6bdcaf6f0e1e3b380a9d" translate="yes" xml:space="preserve">
          <source>Mac App Store Submission Guide</source>
          <target state="translated">Mac App Store 投稿ガイド</target>
        </trans-unit>
        <trans-unit id="e1147b6f453aa3574afe7faf01df8f4f43a25471" translate="yes" xml:space="preserve">
          <source>MacOS Dock</source>
          <target state="translated">マックオスドック</target>
        </trans-unit>
        <trans-unit id="55d8cae81f999b148f7f11049a80625438104669" translate="yes" xml:space="preserve">
          <source>MacOS: &lt;code&gt;~/Library/Caches/electron/&lt;/code&gt;</source>
          <target state="translated">MacOS： &lt;code&gt;~/Library/Caches/electron/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3fe571f349f4b42daacd19bf3d1a708f4bec7cd" translate="yes" xml:space="preserve">
          <source>Macedonian</source>
          <target state="translated">Macedonian</target>
        </trans-unit>
        <trans-unit id="62bce9422ff2d14f69ab80a154510232fc8a9afd" translate="yes" xml:space="preserve">
          <source>Main</source>
          <target state="translated">Main</target>
        </trans-unit>
        <trans-unit id="99effeb4610a03a43d98c6d679f8583dca53d6ac" translate="yes" xml:space="preserve">
          <source>Main Menu's Name</source>
          <target state="translated">メインメニューの名称</target>
        </trans-unit>
        <trans-unit id="e49b821b2c7b6714f350a8dd1146a21a18871a8c" translate="yes" xml:space="preserve">
          <source>Main Process</source>
          <target state="translated">主なプロセス</target>
        </trans-unit>
        <trans-unit id="95836e91069265d349e4b4e0509d813110335b7c" translate="yes" xml:space="preserve">
          <source>Main Process Modules</source>
          <target state="translated">主なプロセスモジュール</target>
        </trans-unit>
        <trans-unit id="ff42ca890ec61938ef6f2eb4ad8fb33f2d2c8439" translate="yes" xml:space="preserve">
          <source>Main World</source>
          <target state="translated">主な世界</target>
        </trans-unit>
        <trans-unit id="9efa37270cf8257d0ec596934c9bc2db502ebdcd" translate="yes" xml:space="preserve">
          <source>Main and Renderer</source>
          <target state="translated">メインとレンダラ</target>
        </trans-unit>
        <trans-unit id="b53208d488815855dd895906ff829adc9ff78cea" translate="yes" xml:space="preserve">
          <source>Main and Renderer Processes</source>
          <target state="translated">メインプロセスとレンダラプロセス</target>
        </trans-unit>
        <trans-unit id="bd28ae81bb664c783b6f9a050e87f13629f673d6" translate="yes" xml:space="preserve">
          <source>Main process</source>
          <target state="translated">主なプロセス</target>
        </trans-unit>
        <trans-unit id="e92739bf5eb177cbc20df5d923a76a756209a14d" translate="yes" xml:space="preserve">
          <source>Major Version Increments</source>
          <target state="translated">メジャーバージョンアップ</target>
        </trans-unit>
        <trans-unit id="15658f56ce81f1e448f2ea894b48e7e0a98dfaa8" translate="yes" xml:space="preserve">
          <source>Major releases</source>
          <target state="translated">主なリリース</target>
        </trans-unit>
        <trans-unit id="538d8b92993a68dce392ee56fb0fb80b9f6b4060" translate="yes" xml:space="preserve">
          <source>Major version change</source>
          <target state="translated">メジャーバージョンアップ</target>
        </trans-unit>
        <trans-unit id="6304d1caf7f16f9be785c9c328a018b0d5156b1d" translate="yes" xml:space="preserve">
          <source>Make Electron code compatible with the new libcc</source>
          <target state="translated">Electron コードを新しい libcc と互換性のあるものにしました。</target>
        </trans-unit>
        <trans-unit id="123ebe43cb0ceb7111bbb2d0db8366fa969b4407" translate="yes" xml:space="preserve">
          <source>Make HTTP/HTTPS requests.</source>
          <target state="translated">HTTP/HTTPSリクエストを行います。</target>
        </trans-unit>
        <trans-unit id="78ccfead62fd93ae7a93727e70b96ebb1a1ca6c1" translate="yes" xml:space="preserve">
          <source>Make a checklist of the Electron patches that need to be applied with &lt;code&gt;git log --oneline&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;git log --oneline&lt;/code&gt; で適用する必要があるElectronパッチのチェックリストを作成します</target>
        </trans-unit>
        <trans-unit id="fb9d214a8c3a813ca4f40f1248f0fa923e2c259d" translate="yes" xml:space="preserve">
          <source>Make codes changes in Electron repository.</source>
          <target state="translated">Electronのリポジトリでコードの変更を行います。</target>
        </trans-unit>
        <trans-unit id="20990824044b34a54949bd84530966fc5cb788ea" translate="yes" xml:space="preserve">
          <source>Make internal builds of libcc and electron</source>
          <target state="translated">libccと電子の内部ビルドを行う</target>
        </trans-unit>
        <trans-unit id="6c3892045c656f1e659c81949a277d7e8a795831" translate="yes" xml:space="preserve">
          <source>Make sure &lt;code&gt;win_delay_load_hook&lt;/code&gt; is not set to &lt;code&gt;false&lt;/code&gt; in the module's &lt;code&gt;binding.gyp&lt;/code&gt;.</source>
          <target state="translated">モジュールの &lt;code&gt;binding.gyp&lt;/code&gt; で &lt;code&gt;win_delay_load_hook&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されていないことを確認してください。</target>
        </trans-unit>
        <trans-unit id="22a93996cb9b35166bec2f617cb93d4e0a0ce26d" translate="yes" xml:space="preserve">
          <source>Make sure it builds then add, commit, and push work to electron's crashpad fork</source>
          <target state="translated">ビルドされていることを確認してから、追加、コミットし、作業をelectronのクラッシュパッドフォークにプッシュします。</target>
        </trans-unit>
        <trans-unit id="0abed7d5a480fac5cef7a4545cb0d29ba466f6cf" translate="yes" xml:space="preserve">
          <source>Make sure that your app's &lt;code&gt;node_modules&lt;/code&gt; directory is empty.</source>
          <target state="translated">アプリの &lt;code&gt;node_modules&lt;/code&gt; ディレクトリが空であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="ce695f6c79213567b657ab0ab0a20b729a1495b1" translate="yes" xml:space="preserve">
          <source>Make sure the linter does not report any issues and that all tests pass. Please do not submit patches that fail either check.</source>
          <target state="translated">linter が問題を報告せず、すべてのテストが合格していることを確認してください。どちらのチェックも不合格のパッチは提出しないでください。</target>
        </trans-unit>
        <trans-unit id="01a4bd30b0fc35971b3145968b1e61859627562f" translate="yes" xml:space="preserve">
          <source>Make sure the native module is compatible with the target platform and architecture for your Electron app.</source>
          <target state="translated">ネイティブモジュールがElectronアプリのターゲットプラットフォームおよびアーキテクチャと互換性があることを確認してください。</target>
        </trans-unit>
        <trans-unit id="8719c0f428cd1e89411827eefee5c4f8bba44fef" translate="yes" xml:space="preserve">
          <source>Make sure you have installed &lt;code&gt;pywin32&lt;/code&gt; with &lt;code&gt;pip install pywin32&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pip install pywin32&lt;/code&gt; &lt;code&gt;pywin32&lt;/code&gt; してpywin32をインストールしたことを確認してください。</target>
        </trans-unit>
        <trans-unit id="971665255c9f7514f0fb7340e444b4ea708018ac" translate="yes" xml:space="preserve">
          <source>Make sure you have the latest Visual Studio update installed.</source>
          <target state="translated">最新の Visual Studio アップデートがインストールされていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="bd200749e96183e292d7ffb6a2e24e6e794542ea" translate="yes" xml:space="preserve">
          <source>Makes the browser go back a web page.</source>
          <target state="translated">ブラウザをWebページに戻します。</target>
        </trans-unit>
        <trans-unit id="fb33f8c8468b4ef03b24447c1b467fe21bdd8e7f" translate="yes" xml:space="preserve">
          <source>Makes the browser go forward a web page.</source>
          <target state="translated">ブラウザにWebページを進めさせます。</target>
        </trans-unit>
        <trans-unit id="3598715e580b14a7b0457c42b72ca9d527ffe21e" translate="yes" xml:space="preserve">
          <source>Makes the guest page go back.</source>
          <target state="translated">ゲストページを元に戻します。</target>
        </trans-unit>
        <trans-unit id="8fecea1ee7ec37d488b674dfe0c96e2d98ff2179" translate="yes" xml:space="preserve">
          <source>Makes the guest page go forward.</source>
          <target state="translated">ゲストページを前進させます。</target>
        </trans-unit>
        <trans-unit id="267a0d8700d17b6e1c1981abe6b4204bfac85631" translate="yes" xml:space="preserve">
          <source>Makes the window ignore all mouse events.</source>
          <target state="translated">ウィンドウをすべてのマウスイベントを無視するようにします。</target>
        </trans-unit>
        <trans-unit id="6dd49a56260ae56c79b5cb939972481551eeff57" translate="yes" xml:space="preserve">
          <source>Makes the window not show in the taskbar.</source>
          <target state="translated">タスクバーにウィンドウを表示しないようにします。</target>
        </trans-unit>
        <trans-unit id="671c4a1a00d83c053d9d4fc465a563ed8e1f7e2c" translate="yes" xml:space="preserve">
          <source>Making Changes</source>
          <target state="translated">変更を加える</target>
        </trans-unit>
        <trans-unit id="046dd363a2869c372fd92b4d7fc805573323a713" translate="yes" xml:space="preserve">
          <source>Making accessible applications is important and we're happy to introduce new functionality to &lt;a href=&quot;https://electronjs.org/devtron&quot;&gt;Devtron&lt;/a&gt; and &lt;a href=&quot;https://electronjs.org/spectron&quot;&gt;Spectron&lt;/a&gt; that gives developers the opportunity to make their apps better for everyone.</source>
          <target state="translated">アクセシブルなアプリケーションを作成することは重要であり、&lt;a href=&quot;https://electronjs.org/devtron&quot;&gt;Devtron&lt;/a&gt;と&lt;a href=&quot;https://electronjs.org/spectron&quot;&gt;Spectronに&lt;/a&gt;新しい機能を導入できることを嬉しく思います。これにより、開発者はアプリを誰にとってもより良いものにすることができます。</target>
        </trans-unit>
        <trans-unit id="2e08aa5ea347df43acdfe2f0439c979d90b654c1" translate="yes" xml:space="preserve">
          <source>Making accessible applications is important and we're happy to provide functionality to &lt;a href=&quot;https://electronjs.org/devtron&quot;&gt;Devtron&lt;/a&gt; and &lt;a href=&quot;https://electronjs.org/spectron&quot;&gt;Spectron&lt;/a&gt; that gives developers the opportunity to make their apps better for everyone.</source>
          <target state="translated">アクセシブルなアプリケーションを作成することは重要であり、開発者がすべての人にとってアプリをより良くする機会を提供する機能を&lt;a href=&quot;https://electronjs.org/devtron&quot;&gt;Devtron&lt;/a&gt;と&lt;a href=&quot;https://electronjs.org/spectron&quot;&gt;Spectron&lt;/a&gt;に提供できることを嬉しく思います。</target>
        </trans-unit>
        <trans-unit id="08f0c0cf51888a42175c6e62922d9b9e24579a11" translate="yes" xml:space="preserve">
          <source>Malay</source>
          <target state="translated">Malay</target>
        </trans-unit>
        <trans-unit id="c730df3afaaac142f305e8f798eca241f12abf9f" translate="yes" xml:space="preserve">
          <source>Malayalam</source>
          <target state="translated">Malayalam</target>
        </trans-unit>
        <trans-unit id="cfb5310c4958ed16357aa5406e541fbeec602420" translate="yes" xml:space="preserve">
          <source>Maltese</source>
          <target state="translated">Maltese</target>
        </trans-unit>
        <trans-unit id="64ee1d8049f251ea9cde4c5ba76bbc0737728e80" translate="yes" xml:space="preserve">
          <source>Manage browser sessions, cookies, cache, proxy settings, etc.</source>
          <target state="translated">ブラウザのセッション、クッキー、キャッシュ、プロキシ設定などを管理します。</target>
        </trans-unit>
        <trans-unit id="dec209aaca99776ec018cbb9ee0ec7a9b32b56e6" translate="yes" xml:space="preserve">
          <source>Manage files and URLs using their default applications.</source>
          <target state="translated">デフォルトのアプリケーションを使用してファイルやURLを管理します。</target>
        </trans-unit>
        <trans-unit id="c14e21aaec4b77e9b50c210353d726630a69b1b8" translate="yes" xml:space="preserve">
          <source>Manipulate the child browser window</source>
          <target state="translated">子ブラウザウィンドウの操作</target>
        </trans-unit>
        <trans-unit id="a4ec06ac844939e1ccc621aa0ad111fd5f89f005" translate="yes" xml:space="preserve">
          <source>Manipulate the command line arguments for your app that Chromium reads</source>
          <target state="translated">Chromiumが読み込むアプリのコマンドライン引数を操作する</target>
        </trans-unit>
        <trans-unit id="fb1bd8fdc6e94ec7a627151e90abe08525adced7" translate="yes" xml:space="preserve">
          <source>Manual distribution</source>
          <target state="translated">マニュアル配布</target>
        </trans-unit>
        <trans-unit id="5821968c0c33922eaabe477fa49fcd35619ff03e" translate="yes" xml:space="preserve">
          <source>Manually Enabling Accessibility Features</source>
          <target state="translated">アクセシビリティ機能を手動で有効にする</target>
        </trans-unit>
        <trans-unit id="a0ba40e77497397867a1a3dd6568cf58eee5431d" translate="yes" xml:space="preserve">
          <source>Manually building for Electron</source>
          <target state="translated">エレクトロンのための手動ビルド</target>
        </trans-unit>
        <trans-unit id="bb6cefe0d60d1a577573bd69f97f78669acd2fbc" translate="yes" xml:space="preserve">
          <source>Manually building for a custom build of Electron</source>
          <target state="translated">エレクトロンのカスタムビルドのための手動ビルド</target>
        </trans-unit>
        <trans-unit id="568e03bb96ad8f988e60a033c47bd9714368a07a" translate="yes" xml:space="preserve">
          <source>Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings. &lt;a href=&quot;https://www.chromium.org/developers/design-documents/accessibility&quot;&gt;https://www.chromium.org/developers/design-documents/accessibility&lt;/a&gt; for more details. Disabled by default.</source>
          <target state="translated">Chromeのユーザー補助サポートを手動で有効にし、アプリケーション設定でユーザーにユーザー補助スイッチを公開できるようにします。詳細については、&lt;a href=&quot;https://www.chromium.org/developers/design-documents/accessibility&quot;&gt;https：//www.chromium.org/developers/design-documents/accessibility&lt;/a&gt;をご覧ください。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="836ee840bea7373db0e0cc4f531370bb5b60dcbe" translate="yes" xml:space="preserve">
          <source>Manually enables Chrome's accessibility support, allowing to expose accessibility switch to users in application settings. See &lt;a href=&quot;https://www.chromium.org/developers/design-documents/accessibility&quot;&gt;Chromium's accessibility docs&lt;/a&gt; for more details. Disabled by default.</source>
          <target state="translated">Chromeのユーザー補助サポートを手動で有効にし、アプリケーション設定でユーザー補助スイッチをユーザーに公開できるようにします。詳細については、&lt;a href=&quot;https://www.chromium.org/developers/design-documents/accessibility&quot;&gt;Chromiumのアクセシビリティドキュメント&lt;/a&gt;を参照してください。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="1265c5ec1ee3a59d7960f4a72261d97be1d0e0b9" translate="yes" xml:space="preserve">
          <source>Manually enabling accessibility features</source>
          <target state="translated">アクセシビリティ機能を手動で有効にする</target>
        </trans-unit>
        <trans-unit id="c54a6216905d7535196708b7c1d5030973af5032" translate="yes" xml:space="preserve">
          <source>Manually flipping fuses requires editing the Electron binary and modifying the fuse wire to be the sequence of bytes that represent the state of the fuses you want.</source>
          <target state="translated">手動でヒューズを反転させるには、Electron バイナリを編集して、必要なヒューズの状態を表すバイト列になるようにヒューズワイヤーを修正する必要があります。</target>
        </trans-unit>
        <trans-unit id="62e5d6a3d84b993e435e90eb7d2198758109e5ef" translate="yes" xml:space="preserve">
          <source>Manually update your own interfaces</source>
          <target state="translated">独自のインターフェースを手動で更新</target>
        </trans-unit>
        <trans-unit id="f04f90a6b4ac5544979ae8b2d057dc2a6dc802bf" translate="yes" xml:space="preserve">
          <source>Many users of Electron start with an entirely web-based app that they're turning into a desktop application. As web developers, we are used to loading resources from a variety of content delivery networks. Now that you are shipping a proper desktop application, attempt to &quot;cut the cord&quot; where possible and avoid letting your users wait for resources that never change and could easily be included in your app.</source>
          <target state="translated">Electronのユーザーの多くは、ウェブベースのアプリケーションをデスクトップアプリケーションとして利用しています。ウェブ開発者である私たちは、さまざまなコンテンツ配信ネットワークからリソースをロードすることに慣れています。現在、適切なデスクトップアプリケーションを出荷しているので、可能な限り「コードを切る」ようにして、変更されることのない、アプリに簡単に含まれる可能性のあるリソースをユーザーに待たせることを避けてください。</target>
        </trans-unit>
        <trans-unit id="6bb4b981fc369f78634393c244cc62dcb75bb23c" translate="yes" xml:space="preserve">
          <source>Marathi</source>
          <target state="translated">Marathi</target>
        </trans-unit>
        <trans-unit id="6877b22121257272b4fb1ebd67b0539d5fb26baf" translate="yes" xml:space="preserve">
          <source>Markdown rules</source>
          <target state="translated">マークダウンルール</target>
        </trans-unit>
        <trans-unit id="d28e529f4c8df657c79a8c2500e90ad8459e8c57" translate="yes" xml:space="preserve">
          <source>Marks the current &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html&quot;&gt;Handoff&lt;/a&gt; user activity as inactive without invalidating it.</source>
          <target state="translated">現在の&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/Handoff/HandoffFundamentals/HandoffFundamentals.html&quot;&gt;Handoff&lt;/a&gt;ユーザーアクティビティを無効にせずに非アクティブとしてマークします。</target>
        </trans-unit>
        <trans-unit id="e8ceadd643faeb0bb54502b73c425647ff136a31" translate="yes" xml:space="preserve">
          <source>Marks the image as a template image.</source>
          <target state="translated">画像をテンプレート画像としてマークします。</target>
        </trans-unit>
        <trans-unit id="6faf97cbf665d5c18d8d5f1fd4f3406005bc9b9a" translate="yes" xml:space="preserve">
          <source>Master VHD URI - use URI obtained @ end of previous step</source>
          <target state="translated">マスターVHD URI-前のステップの終了時に取得したURIを使用します。</target>
        </trans-unit>
        <trans-unit id="1576e95f7c9ece7c3cbadabe664fd458e0dba654" translate="yes" xml:space="preserve">
          <source>Master VM name - just a unique name to identify the temporary VM</source>
          <target state="translated">マスターVM名-一時的なVMを識別するためのユニークな名前です。</target>
        </trans-unit>
        <trans-unit id="9893692afa63ac13cae95202fe36b917b133c42c" translate="yes" xml:space="preserve">
          <source>Master VM size - use &lt;code&gt;Standard_F32s_v2&lt;/code&gt;</source>
          <target state="translated">マスターVMサイズ-使用 &lt;code&gt;Standard_F32s_v2&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e4cb68450d6ee60729f8e6bf50c6178cacca48e3" translate="yes" xml:space="preserve">
          <source>Match URLs which are IP address literals.</source>
          <target state="translated">IPアドレスリテラルであるURLにマッチします。</target>
        </trans-unit>
        <trans-unit id="33ab1c88001bf081442d8776abcc8ae32ce1b8a6" translate="yes" xml:space="preserve">
          <source>Match a particular domain suffix.</source>
          <target state="translated">特定のドメインサフィックスにマッチします。</target>
        </trans-unit>
        <trans-unit id="7ef5c8e655993c05557e9aa0674b43d038556da1" translate="yes" xml:space="preserve">
          <source>Match all hostnames that match the pattern HOSTNAME_PATTERN.</source>
          <target state="translated">HOSTNAME_PATTERN パターンに一致するすべてのホスト名にマッチします。</target>
        </trans-unit>
        <trans-unit id="a6ab65cfe6eda9c382fe697344f8af846c1bc900" translate="yes" xml:space="preserve">
          <source>Match any URL that is to an IP literal that falls between the given range. IP range is specified using CIDR notation.</source>
          <target state="translated">指定された範囲の間にあるIPリテラルへのURLにマッチします。IP範囲はCIDR記法を使用して指定します。</target>
        </trans-unit>
        <trans-unit id="66b5a35f9ebfbc106121468ab684462bb4780f8a" translate="yes" xml:space="preserve">
          <source>Match local addresses. The meaning of &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; is whether the host matches one of: &quot;127.0.0.1&quot;, &quot;::1&quot;, &quot;localhost&quot;.</source>
          <target state="translated">ローカルアドレスを照合します。 &lt;code&gt;&amp;lt;local&amp;gt;&lt;/code&gt; の意味は、ホストが「127.0.0.1」、「:: 1」、「localhost」のいずれかに一致するかどうかです。</target>
        </trans-unit>
        <trans-unit id="bc1970136ab27583ccea13cbf7161d7e25b69a5e" translate="yes" xml:space="preserve">
          <source>Maximizes the window. This will also show (but not focus) the window if it isn't being displayed already.</source>
          <target state="translated">ウィンドウを最大化します。ウィンドウがまだ表示されていない場合は、これも表示されます (フォーカスはされません)。</target>
        </trans-unit>
        <trans-unit id="44d7922eadbe45b1774995d2449a5359ea62d9a2" translate="yes" xml:space="preserve">
          <source>Measure, Measure, Measure</source>
          <target state="translated">計って、計って、計って、計って</target>
        </trans-unit>
        <trans-unit id="e0efdce50032a40b3a3914e5fc8bfa6cd4288bb5" translate="yes" xml:space="preserve">
          <source>Memory Management</source>
          <target state="translated">メモリ管理</target>
        </trans-unit>
        <trans-unit id="a39a2691f8ac63df7fcbe6ae7ece40b10d717679" translate="yes" xml:space="preserve">
          <source>MemoryInfo</source>
          <target state="translated">MemoryInfo</target>
        </trans-unit>
        <trans-unit id="d2f3ea8610a8148842353371965b406006ea2e95" translate="yes" xml:space="preserve">
          <source>MemoryInfo Object</source>
          <target state="translated">メモリ情報オブジェクト</target>
        </trans-unit>
        <trans-unit id="b6f34e962df288485f4a23a96a69701e9811a805" translate="yes" xml:space="preserve">
          <source>MemoryUsageDetails</source>
          <target state="translated">MemoryUsageDetails</target>
        </trans-unit>
        <trans-unit id="6b8e378b13b324bf2719d56f05d2a76e1fdca001" translate="yes" xml:space="preserve">
          <source>MemoryUsageDetails Object</source>
          <target state="translated">MemoryUsageDetails オブジェクト</target>
        </trans-unit>
        <trans-unit id="57f5f5efbc5990f5230aa95359042338b856707b" translate="yes" xml:space="preserve">
          <source>Menu</source>
          <target state="translated">Menu</target>
        </trans-unit>
        <trans-unit id="ac638b6bd0a0e2ae3936b49675084e959e08498d" translate="yes" xml:space="preserve">
          <source>Menu Item Position</source>
          <target state="translated">メニュー項目 位置</target>
        </trans-unit>
        <trans-unit id="c80d07f2f5248a4d681913d75eca7a816c2ab9da" translate="yes" xml:space="preserve">
          <source>Menu()</source>
          <target state="translated">Menu()</target>
        </trans-unit>
        <trans-unit id="6c4aea89b61f6d70b9afb61efa7ba962a76cb7a1" translate="yes" xml:space="preserve">
          <source>Menu:</source>
          <target state="translated">Menu:</target>
        </trans-unit>
        <trans-unit id="fd0b0b8f9535c21f5c697415e34da8e008d26d26" translate="yes" xml:space="preserve">
          <source>MenuItem</source>
          <target state="translated">MenuItem</target>
        </trans-unit>
        <trans-unit id="7cc9eb5ad4b43fe57d0aef498e053f33d8a9c732" translate="yes" xml:space="preserve">
          <source>MenuItem()</source>
          <target state="translated">MenuItem()</target>
        </trans-unit>
        <trans-unit id="79343f29f5723f9f94c0038b7028cb8a494caeb2" translate="yes" xml:space="preserve">
          <source>Merge temporary branch (pre-2-0-x branches only)</source>
          <target state="translated">一時的なブランチをマージ(2-0-x以前のブランチのみ</target>
        </trans-unit>
        <trans-unit id="edbc4cdf49b60f12acfba715eaa71dd0dc3b31f8" translate="yes" xml:space="preserve">
          <source>Merges all windows into one window with multiple tabs when native tabs are enabled and there is more than one open window.</source>
          <target state="translated">ネイティブ タブが有効で、開いているウィンドウが複数ある場合、すべてのウィンドウを複数のタブを持つ 1 つのウィンドウに統合します。</target>
        </trans-unit>
        <trans-unit id="f62e9e3e46d782563d406255ceb97e4d191cd710" translate="yes" xml:space="preserve">
          <source>Merging back into master</source>
          <target state="translated">マスターへのマージ</target>
        </trans-unit>
        <trans-unit id="b8b0b3aac0d6933ac642e6939867daa972acb2a1" translate="yes" xml:space="preserve">
          <source>Merging back into old release branch</source>
          <target state="translated">古いリリースブランチへのマージ</target>
        </trans-unit>
        <trans-unit id="e631ac93f56429496650cc40344c0ce91e67133d" translate="yes" xml:space="preserve">
          <source>MessageChannelMain</source>
          <target state="translated">MessageChannelMain</target>
        </trans-unit>
        <trans-unit id="5dbc81c87b66b57c3100916624cb280e2d838912" translate="yes" xml:space="preserve">
          <source>MessagePortMain</source>
          <target state="translated">MessagePortMain</target>
        </trans-unit>
        <trans-unit id="7e4ac6803c9159c694f63d089cb06b2519c16aba" translate="yes" xml:space="preserve">
          <source>Methods</source>
          <target state="translated">Methods</target>
        </trans-unit>
        <trans-unit id="37d18b76453fed3e678a25bf44af7335d8a1f834" translate="yes" xml:space="preserve">
          <source>Microsoft &lt;a href=&quot;https://github.com/catalystcode/electron-windows-store&quot;&gt;developed a tool that compiles Electron apps as &lt;code&gt;.appx&lt;/code&gt; packages&lt;/a&gt;, enabling developers to use some of the goodies found in the new application model. This guide explains how to use it - and what the capabilities and limitations of an Electron AppX package are.</source>
          <target state="translated">Microsoft &lt;a href=&quot;https://github.com/catalystcode/electron-windows-store&quot;&gt;は、Electronアプリを &lt;code&gt;.appx&lt;/code&gt; パッケージとしてコンパイルするツールを&lt;/a&gt;開発しました。これにより、開発者は新しいアプリケーションモデルにあるいくつかの優れた機能を使用できます。このガイドでは、その使用方法と、Electron AppXパッケージの機能と制限について説明します。</target>
        </trans-unit>
        <trans-unit id="6e458173eef4a800366eeb68965cf8f147c4756b" translate="yes" xml:space="preserve">
          <source>Migration</source>
          <target state="translated">Migration</target>
        </trans-unit>
        <trans-unit id="28128d38fad00ed20714cff948ab05f77479d1e6" translate="yes" xml:space="preserve">
          <source>MimeTypedBuffer</source>
          <target state="translated">MimeTypedBuffer</target>
        </trans-unit>
        <trans-unit id="d6b317ab061a8236f4adc5d7739f52a26b4e8122" translate="yes" xml:space="preserve">
          <source>MimeTypedBuffer Object</source>
          <target state="translated">MimeTypedBuffer オブジェクト</target>
        </trans-unit>
        <trans-unit id="5c250802ed4e299671bafdfe26fbd5c52d2f174a" translate="yes" xml:space="preserve">
          <source>Minimal Bootstrapping</source>
          <target state="translated">最小限のブートストラップ</target>
        </trans-unit>
        <trans-unit id="59d44ab0c473a6e50cdb5fc05dcae565d64d32c4" translate="yes" xml:space="preserve">
          <source>Minimizes the window. On some platforms the minimized window will be shown in the Dock.</source>
          <target state="translated">ウィンドウを最小化します。一部のプラットフォームでは、最小化されたウィンドウはDockに表示されます。</target>
        </trans-unit>
        <trans-unit id="822d8a4f24b72b15bce76b88a8306344b595b682" translate="yes" xml:space="preserve">
          <source>Minor Version Increments</source>
          <target state="translated">マイナーバージョンのインクリメント</target>
        </trans-unit>
        <trans-unit id="f00051475cd7040e49b1165a98e0ececdb494a4c" translate="yes" xml:space="preserve">
          <source>Minor releases</source>
          <target state="translated">マイナーリリース</target>
        </trans-unit>
        <trans-unit id="187790ce114a2fd84cf44bc5850252f1405fdd09" translate="yes" xml:space="preserve">
          <source>Minor version change</source>
          <target state="translated">マイナーバージョンの変更</target>
        </trans-unit>
        <trans-unit id="74adc5789ce92de7bbb5e3d84a287a1ce6d3e7f5" translate="yes" xml:space="preserve">
          <source>Mirror</source>
          <target state="translated">Mirror</target>
        </trans-unit>
        <trans-unit id="8d568b1b4b206e88208849821e5c0a4c26cb45cd" translate="yes" xml:space="preserve">
          <source>Missing Features: Alphas</source>
          <target state="translated">欠落している機能。アルファ</target>
        </trans-unit>
        <trans-unit id="50b753b77904c96a7fe67edc0e7799140807aeb3" translate="yes" xml:space="preserve">
          <source>Missing Features: Alphas, and Nightly</source>
          <target state="translated">欠落している機能 アルファ、ナイトリー</target>
        </trans-unit>
        <trans-unit id="a12f39102ef88d1b1648a3b25092a5d22a170662" translate="yes" xml:space="preserve">
          <source>Missing fonts</source>
          <target state="translated">欠落したフォント</target>
        </trans-unit>
        <trans-unit id="40ce4ab635954d17098ad98dd6d97891a6b2d6fa" translate="yes" xml:space="preserve">
          <source>Mixed-sandbox mode is now enabled by default.</source>
          <target state="translated">ミックスサンドボックスモードがデフォルトで有効になりました。</target>
        </trans-unit>
        <trans-unit id="aa608f50164ae4468eca5f7a4828180613e032b7" translate="yes" xml:space="preserve">
          <source>MobX Developer Tools</source>
          <target state="translated">MobX開発者ツール</target>
        </trans-unit>
        <trans-unit id="901b00eb5476b91a74e2f260fe55be50affcee6d" translate="yes" xml:space="preserve">
          <source>Modal windows</source>
          <target state="translated">モーダルウィンドウ</target>
        </trans-unit>
        <trans-unit id="7a2466ce49a31d04da530301ef401489d60d7cc3" translate="yes" xml:space="preserve">
          <source>Modern JavaScript development usually involves many files and modules. While that's perfectly fine for developing with Electron, we heavily recommend that you bundle all your code into one single file to ensure that the overhead included in calling &lt;code&gt;require()&lt;/code&gt; is only paid once when your application loads.</source>
          <target state="translated">最近のJavaScript開発には通常、多くのファイルとモジュールが含まれます。これはElectronでの開発にはまったく問題ありませんが、 &lt;code&gt;require()&lt;/code&gt; の呼び出しに含まれるオーバーヘッドがアプリケーションのロード時に一度だけ支払われるように、すべてのコードを1つのファイルにバンドルすることを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="5f063682df9993294db724b001ca80ba840abcb8" translate="yes" xml:space="preserve">
          <source>Modernization</source>
          <target state="translated">Modernization</target>
        </trans-unit>
        <trans-unit id="9c08142f037420f3dd892cd9f96c1c768041be72" translate="yes" xml:space="preserve">
          <source>Modify the VM as required.</source>
          <target state="translated">必要に応じてVMを変更します。</target>
        </trans-unit>
        <trans-unit id="5233ddfcb825a01b152dd312db82205b9ff31f04" translate="yes" xml:space="preserve">
          <source>Modify your package.json file</source>
          <target state="translated">package.jsonファイルを修正する</target>
        </trans-unit>
        <trans-unit id="141fcfc0a89ae99212603bd3aa8017d60a94f035" translate="yes" xml:space="preserve">
          <source>Module methods and events</source>
          <target state="translated">モジュールのメソッドとイベント</target>
        </trans-unit>
        <trans-unit id="ac43823e76d4446a8b140446f86e9cf10a49045a" translate="yes" xml:space="preserve">
          <source>Modules for Both Process Types</source>
          <target state="translated">両プロセスタイプのモジュール</target>
        </trans-unit>
        <trans-unit id="0655e943f357853a23dbc1fca9b8b8b74187fed0" translate="yes" xml:space="preserve">
          <source>Modules for Both Processes:</source>
          <target state="translated">両方のプロセス用のモジュール。</target>
        </trans-unit>
        <trans-unit id="fad485f2b0513e07b52567a6f2a346d73ddbc539" translate="yes" xml:space="preserve">
          <source>Modules for the Main Process:</source>
          <target state="translated">メインプロセス用のモジュールです。</target>
        </trans-unit>
        <trans-unit id="dfc2146f5598a75fa9da745d85433f8c014cba38" translate="yes" xml:space="preserve">
          <source>Modules for the Renderer Process (Web Page):</source>
          <target state="translated">レンダラプロセス用のモジュール(Webページ)。</target>
        </trans-unit>
        <trans-unit id="859556f94b13fc510ff5085b5fb29e88a587fc7b" translate="yes" xml:space="preserve">
          <source>Modules that rely on &lt;code&gt;node-pre-gyp&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;node-pre-gyp&lt;/code&gt; に依存するモジュール</target>
        </trans-unit>
        <trans-unit id="9e6cb54b92e776ea4523222c80634966b1a25f1c" translate="yes" xml:space="preserve">
          <source>Modules that rely on &lt;code&gt;prebuild&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;prebuild&lt;/code&gt; 依存するモジュール</target>
        </trans-unit>
        <trans-unit id="977ca71334b90aac52382878a5bc9c5fe2dc63d2" translate="yes" xml:space="preserve">
          <source>Mojo</source>
          <target state="translated">Mojo</target>
        </trans-unit>
        <trans-unit id="981fb1a731db18be7ffbc618830d04ecbc60cd90" translate="yes" xml:space="preserve">
          <source>Moldavian</source>
          <target state="translated">Moldavian</target>
        </trans-unit>
        <trans-unit id="c3bdbab40a4be4ac1b8eb1ccb2dbb2eaf8ed480f" translate="yes" xml:space="preserve">
          <source>Mongolian</source>
          <target state="translated">Mongolian</target>
        </trans-unit>
        <trans-unit id="ad3be9da0333f2d86e25caf5c419702d7e211450" translate="yes" xml:space="preserve">
          <source>Monitor power state changes.</source>
          <target state="translated">電源状態の変化を監視します。</target>
        </trans-unit>
        <trans-unit id="044cb6085769f286e24b4d2a84f4981677f5f54c" translate="yes" xml:space="preserve">
          <source>Monitoring Goma</source>
          <target state="translated">モニタリング護摩</target>
        </trans-unit>
        <trans-unit id="0d6772c17c36f0f8030e0a6c6baa2bec775c05de" translate="yes" xml:space="preserve">
          <source>Monitoring begins immediately locally and asynchronously on child processes as soon as they receive the &lt;code&gt;startMonitoring&lt;/code&gt; request.</source>
          <target state="translated">監視は、子プロセスで &lt;code&gt;startMonitoring&lt;/code&gt; リクエストを受信するとすぐに、ローカルで非同期にすぐに開始されます。</target>
        </trans-unit>
        <trans-unit id="5eaa209d8dce0c8c489a3d027ee8e07c8703eb01" translate="yes" xml:space="preserve">
          <source>More details can be found in &lt;a href=&quot;application-packaging&quot;&gt;Application packaging&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;application-packaging&quot;&gt;アプリケーションのパッケージ化を&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="f03c38003a057a3ee024bb1cd2b981c5d824af4a" translate="yes" xml:space="preserve">
          <source>More details can be found in &lt;a href=&quot;tutorial/application-packaging&quot;&gt;Application packaging&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;tutorial/application-packaging&quot;&gt;アプリケーションのパッケージを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ac12df785b0417cadd38f4b76e9fd5ed4a671464" translate="yes" xml:space="preserve">
          <source>More information can be found in the &lt;a href=&quot;https://nodejs.org/dist/latest/docs/api/repl.html&quot;&gt;Node.js REPL docs&lt;/a&gt;.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://nodejs.org/dist/latest/docs/api/repl.html&quot;&gt;Node.js REPLドキュメントを&lt;/a&gt;ご覧ください。</target>
        </trans-unit>
        <trans-unit id="00e06820ccf492f1a47ae5ceded61952a3d977ee" translate="yes" xml:space="preserve">
          <source>More may be added as needed to expose more Electron APIs in the sandbox, but any module in the main process can already be used through &lt;code&gt;electron.remote.require&lt;/code&gt;.</source>
          <target state="translated">サンドボックスでより多くのElectronAPIを公開するために、必要に応じてさらに追加することができますが、メインプロセスの任意のモジュールは、 &lt;code&gt;electron.remote.require&lt;/code&gt; を介してすでに使用できます。</target>
        </trans-unit>
        <trans-unit id="381a4f2cdda5a922f71425e63e4ead748c557260" translate="yes" xml:space="preserve">
          <source>More may be added as needed to expose more electron APIs in the sandbox, but any module in the main process can already be used through &lt;code&gt;electron.remote.require&lt;/code&gt;.</source>
          <target state="translated">サンドボックスでさらに多くのelectron APIを公開するために、必要に応じて追加することができますが、メインプロセスのどのモジュールも &lt;code&gt;electron.remote.require&lt;/code&gt; ですでに使用できます。</target>
        </trans-unit>
        <trans-unit id="9a6c5a476bf196391c786e8d65652ebdf2f0edbe" translate="yes" xml:space="preserve">
          <source>More precisely the format is &lt;code&gt;window:id:other_id&lt;/code&gt; where &lt;code&gt;id&lt;/code&gt; is &lt;code&gt;HWND&lt;/code&gt; on Windows, &lt;code&gt;CGWindowID&lt;/code&gt; (&lt;code&gt;uint64_t&lt;/code&gt;) on macOS and &lt;code&gt;Window&lt;/code&gt; (&lt;code&gt;unsigned long&lt;/code&gt;) on Linux. &lt;code&gt;other_id&lt;/code&gt; is used to identify web contents (tabs) so within the same top level window.</source>
          <target state="translated">より正確なフォーマットは、 &lt;code&gt;window:id:other_id&lt;/code&gt; どこ &lt;code&gt;id&lt;/code&gt; がある &lt;code&gt;HWND&lt;/code&gt; 、Windows上で &lt;code&gt;CGWindowID&lt;/code&gt; （ &lt;code&gt;uint64_t&lt;/code&gt; をMacOSのと上の） &lt;code&gt;Window&lt;/code&gt; （ &lt;code&gt;unsigned long&lt;/code&gt; 型Linuxの場合）。 &lt;code&gt;other_id&lt;/code&gt; は、同じトップレベルウィンドウ内でWebコンテンツ（タブ）を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="91ad2fc5f8c51939d84c8988f4bdd7e13db85699" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;fs&lt;/code&gt; APIs can read a file or get a file's information from &lt;code&gt;asar&lt;/code&gt; archives without unpacking, but for some APIs that rely on passing the real file path to underlying system calls, Electron will extract the needed file into a temporary file and pass the path of the temporary file to the APIs to make them work. This adds a little overhead for those APIs.</source>
          <target state="translated">ほとんどの &lt;code&gt;fs&lt;/code&gt; APIは、展開せずにファイルを読み取ったり、 &lt;code&gt;asar&lt;/code&gt; アーカイブからファイルの情報を取得したりできますが、基になるシステムコールに実際のファイルパスを渡すことに依存する一部のAPIでは、Electronは必要なファイルを一時ファイルに抽出し、そのパスを渡します一時ファイルをAPIに渡して機能させる。これにより、これらのAPIに少しオーバーヘッドが追加されます。</target>
        </trans-unit>
        <trans-unit id="24df657906e0a9ff5dd9d380b688073ddd400cbe" translate="yes" xml:space="preserve">
          <source>Most issues are resolved by opening a pull request. The process for opening and reviewing a pull request is similar to that of opening and triaging issues, but carries with it a necessary review and approval workflow that ensures that the proposed changes meet the minimal quality and functional guidelines of the Electron project.</source>
          <target state="translated">ほとんどの問題は、プルリクエストを開くことで解決されます。プルリクエストを開いてレビューするプロセスは、問題を開いてトリアージするプロセスと似ていますが、提案された変更がElectronプロジェクトの最低限の品質と機能のガイドラインを満たしていることを保証するために必要なレビューと承認のワークフローを伴います。</target>
        </trans-unit>
        <trans-unit id="1963afbf0297022503035c708168c89e69e8dc93" translate="yes" xml:space="preserve">
          <source>Most pull requests opened against the &lt;code&gt;electron/electron&lt;/code&gt; repository include changes to either the C/C++ code in the &lt;code&gt;atom/&lt;/code&gt; or &lt;code&gt;brightray/&lt;/code&gt; folders, the JavaScript code in the &lt;code&gt;lib/&lt;/code&gt; folder, the documentation in &lt;code&gt;docs/api/&lt;/code&gt; or tests in the &lt;code&gt;spec/&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;electron/electron&lt;/code&gt; リポジトリに対して開かれるほとんどのプルリクエストには、 &lt;code&gt;atom/&lt;/code&gt; または &lt;code&gt;brightray/&lt;/code&gt; フォルダー内のC / C ++コード、 &lt;code&gt;lib/&lt;/code&gt; フォルダー内のJavaScriptコード、 &lt;code&gt;docs/api/&lt;/code&gt; 内のドキュメント、または &lt;code&gt;spec/&lt;/code&gt; 内のテストへの変更が含まれますフォルダ。</target>
        </trans-unit>
        <trans-unit id="d310017fd52c36bba769938ed4541a96183334c5" translate="yes" xml:space="preserve">
          <source>Most pull requests opened against the &lt;code&gt;electron/electron&lt;/code&gt; repository include changes to either the C/C++ code in the &lt;code&gt;shell/&lt;/code&gt; folder, the JavaScript code in the &lt;code&gt;lib/&lt;/code&gt; folder, the documentation in &lt;code&gt;docs/api/&lt;/code&gt; or tests in the &lt;code&gt;spec/&lt;/code&gt; folder.</source>
          <target state="translated">&lt;code&gt;electron/electron&lt;/code&gt; リポジトリに対して開かれるほとんどのプルリクエストには、 &lt;code&gt;shell/&lt;/code&gt; フォルダーのC / C ++コード、 &lt;code&gt;lib/&lt;/code&gt; フォルダーのJavaScriptコード、 &lt;code&gt;docs/api/&lt;/code&gt; ドキュメント、または &lt;code&gt;spec/&lt;/code&gt; フォルダーのテストのいずれかへの変更が含まれます。</target>
        </trans-unit>
        <trans-unit id="61d68b3e3473c488df7dd74b03100ff56229d822" translate="yes" xml:space="preserve">
          <source>Most users will get this feature for free, since it's supported out of the box by &lt;a href=&quot;https://github.com/electron-userland/electron-packager&quot;&gt;&lt;code&gt;electron-packager&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/electron-userland/electron-forge&quot;&gt;&lt;code&gt;electron-forge&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt;&lt;code&gt;electron-builder&lt;/code&gt;&lt;/a&gt;. If you are not using any of these tools, read on.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/electron-userland/electron-packager&quot;&gt; &lt;code&gt;electron-packager&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/electron-userland/electron-forge&quot;&gt; &lt;code&gt;electron-forge&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt; &lt;code&gt;electron-builder&lt;/code&gt; で&lt;/a&gt;そのまま使用できるため、ほとんどのユーザーは無料でこの機能を利用できます。これらのツールを使用していない場合は、読み進めてください。</target>
        </trans-unit>
        <trans-unit id="550338b96f962abd43f9d50834137ff2cdbf04df" translate="yes" xml:space="preserve">
          <source>Most users will get this feature for free, since it's supported out of the box by &lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt;&lt;code&gt;electron-packager&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;https://github.com/electron-userland/electron-forge&quot;&gt;&lt;code&gt;electron-forge&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt;&lt;code&gt;electron-builder&lt;/code&gt;&lt;/a&gt;. If you are not using any of these tools, read on.</source>
          <target state="translated">この機能は、&lt;a href=&quot;https://github.com/electron/electron-packager&quot;&gt; &lt;code&gt;electron-packager&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/electron-userland/electron-forge&quot;&gt; &lt;code&gt;electron-forge&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;https://github.com/electron-userland/electron-builder&quot;&gt; &lt;code&gt;electron-builder&lt;/code&gt; &lt;/a&gt;によってすぐにサポートされるため、ほとんどのユーザーは無料で利用できます。これらのツールを使用していない場合は、読み進めてください。</target>
        </trans-unit>
        <trans-unit id="5c866bf8f9578a06c6fde85ef022e9042d1aa154" translate="yes" xml:space="preserve">
          <source>MouseInputEvent Object extends &lt;code&gt;InputEvent&lt;/code&gt;</source>
          <target state="translated">MouseInputEventオブジェクトは &lt;code&gt;InputEvent&lt;/code&gt; を拡張します</target>
        </trans-unit>
        <trans-unit id="1e274257075c36c67ce2efd3b62de41253ca1f8d" translate="yes" xml:space="preserve">
          <source>MouseInputEvent Object extends InputEvent</source>
          <target state="translated">MouseInputEvent Object extends InputEvent</target>
        </trans-unit>
        <trans-unit id="5a253abd6c7677d413a48e9e5d28d6651416e2c3" translate="yes" xml:space="preserve">
          <source>MouseWheelInputEvent Object extends &lt;code&gt;MouseInputEvent&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;MouseInputEvent&lt;/code&gt; オブジェクトはMouseInputEventを拡張します</target>
        </trans-unit>
        <trans-unit id="379690624a74e4217623302bebdd5a2c8a92a873" translate="yes" xml:space="preserve">
          <source>MouseWheelInputEvent Object extends MouseInputEvent</source>
          <target state="translated">MouseWheelInputEventオブジェクトは、MouseInputEventを継承しています。</target>
        </trans-unit>
        <trans-unit id="b1e64e060fa9046354b956496a4b20d4ea90d4ac" translate="yes" xml:space="preserve">
          <source>Move it to &lt;code&gt;%APPDATA%\..\Local\node-gyp\Cache\6.0.9\arm64\node.lib&lt;/code&gt;</source>
          <target state="translated">それを移動するには &lt;code&gt;%APPDATA%\..\Local\node-gyp\Cache\6.0.9\arm64\node.lib&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f6950455d237806d5d93ac0532b6858342225fe4" translate="yes" xml:space="preserve">
          <source>Move the given file to trash and returns a boolean status for the operation.</source>
          <target state="translated">与えられたファイルをゴミ箱に移動し、その操作のためのブール値を返します。</target>
        </trans-unit>
        <trans-unit id="1a3875c81017814140fd6c2816640edc744cfd83" translate="yes" xml:space="preserve">
          <source>Moves the current tab into a new window if native tabs are enabled and there is more than one tab in the current window.</source>
          <target state="translated">ネイティブ タブが有効で、現在のウィンドウに複数のタブがある場合、現在のタブを新しいウィンドウに移動します。</target>
        </trans-unit>
        <trans-unit id="e5660e1f2cd10cda0a29aeade3256c592f8b18ef" translate="yes" xml:space="preserve">
          <source>Moves window above the source window in the sense of z-order. If the &lt;code&gt;mediaSourceId&lt;/code&gt; is not of type window or if the window does not exist then this method throws an error.</source>
          <target state="translated">zオーダーの意味で、ウィンドウをソースウィンドウの上に移動します。 &lt;code&gt;mediaSourceId&lt;/code&gt; がwindow型でない場合、またはウィンドウが存在しない場合、このメソッドはエラーをスローします。</target>
        </trans-unit>
        <trans-unit id="2151334426d72b39234474a7474182d61ff5ba8c" translate="yes" xml:space="preserve">
          <source>Moves window to &lt;code&gt;x&lt;/code&gt; and &lt;code&gt;y&lt;/code&gt;.</source>
          <target state="translated">ウィンドウを &lt;code&gt;x&lt;/code&gt; と &lt;code&gt;y&lt;/code&gt; に移動します。</target>
        </trans-unit>
        <trans-unit id="a9fd7b0bda50a6a5e59d1f13795eb4c168f24976" translate="yes" xml:space="preserve">
          <source>Moves window to the center of the screen.</source>
          <target state="translated">ウィンドウを画面の中央に移動します。</target>
        </trans-unit>
        <trans-unit id="7ecadb0cd9f622532810aec703f5a1a3c4801173" translate="yes" xml:space="preserve">
          <source>Moves window to top(z-order) regardless of focus</source>
          <target state="translated">フォーカスに関係なくウィンドウを上(Z順)に移動します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
