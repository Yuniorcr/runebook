<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="gnu_cobol">
    <body>
      <group id="gnu_cobol">
        <trans-unit id="e69f20e9f683920d3fb4329abd951e878b1f9372" translate="yes" xml:space="preserve">
          <source>F</source>
          <target state="translated">F</target>
        </trans-unit>
        <trans-unit id="1ba54893e49d5a98fdd72b1731cb837c15733eae" translate="yes" xml:space="preserve">
          <source>F, FACTORIAL, FACTORY, FALSE, FD, FILE, FILE-CONTROL, FILE-ID, FILLER, FINAL, FIRST, FIXED, FLOAT-BINARY-128, FLOAT-BINARY-32, FLOAT-BINARY-64, FLOAT-DECIMAL-16, FLOAT-DECIMAL-34, FLOAT-EXTENDED, FLOAT-INFINITY, FLOAT-LONG, FLOAT-NOT-A-NUMBER, FLOAT-SHORT, FOOTING, FOR, FOREGROUND-COLOR, FOREGROUND-COLOUR, FOREVER, FORMAT, FORMATTED-CURRENT-DATE, FORMATTED-DATE, FORMATTED-DATETIME, FORMATTED-TIME, FORMFEED, FRACTION-PART, FREE, FROM, FULL, FUNCTION, FUNCTION-ID, FUNCTION-POINTER</source>
          <target state="translated">F、FACTORIAL、FACTORY、FALSE、FD、FILE、FILE-CONTROL、FILE-ID、FILLER、FINAL、FIRST、FIXED、FLOAT-BINARY-128、FLOAT-BINARY-32、FLOAT-BINARY-64、FLOAT-DECIMAL-16、FLOAT-DECIMAL-34、FLOAT-EXTENDED、FLOAT-INFINITY、FLOAT-LONG、FLOAT-NOT-A-NUMBER。FLOAT-SHORT,FOOTING,FOR,FOREGROUND-COLOR,FOREGROUND-COLOUR,FOREVER,FORMAT,FORMATTED-CURRENT-DATE,FORMATTED-DATE,FORMATTED-DATE-TIME,FORMATTED-TIME,FORMFEED,FRACTION-PART,FREE,FROM,FULL,FUNCTION,FUNCTION-ID,FUNCTION-POINTER</target>
        </trans-unit>
        <trans-unit id="d7caf280db3cab23a3efd52f861a41479460fa6f" translate="yes" xml:space="preserve">
          <source>F, FACTORIAL, FACTORY, FALSE, FD, FILE-CONTROL, FILE-ID, FILE-NAME, FILE-POS, FILE, FILL-COLOR2, FILL-COLOR, FILLER, FILL-PERCENT, FINAL, FINISH-REASON, FIRST, FIXED-FONT, FIXED-WIDTH, FIXED, FLAT-BUTTONS, FLAT, FLOAT-BINARY-128, FLOAT-BINARY-32, FLOAT-BINARY-64, FLOAT-DECIMAL-16, FLOAT-DECIMAL-34, FLOAT-EXTENDED, FLOAT-INFINITY, FLOATING, FLOAT-LONG, FLOAT-NOT-A-NUMBER, FLOAT-SHORT, FLOAT, FONT, FOOTING, FOREGROUND-COLOR, FOREGROUND-COLOUR, FOREVER, FORMAT, FORMATTED-CURRENT-DATE, FORMATTED-DATETIME, FORMATTED-DATE, FORMATTED-TIME, FORMFEED, FOR, FRACTION-PART, FRAMED, FRAME, FREE, FROM, FULL-HEIGHT, FULL, FUNCTION-ID, FUNCTION-POINTER, FUNCTION</source>
          <target state="translated">F、FACTORIAL、FACTORY、FALSE、FD、FILE-CONTROL、FILE-ID、FILE-NAME、FILE-POS、FILE、FILL-COLOR2、FILL-COLOR、FILLER、FILL-PERCENT、FINAL、FINISH-REASON、FIRST、FIXED-FONT、FIXED-WIDTH、FIXED、FLAT-BUTTONS、FLAT、FLOAT、FLOAT-BINARY-128、FLOAT-BINARY-32、FLOAT-BINARY-64、FLOAT-DECIMAL-16、FLOAT-DECIMAL-34、FLOAT-EXTENDED、FLOAT-INFINITY。FLOATING,FLOAT-LONG,FLOAT-NOT-A-NUMBER,FLOAT-SHORT,FLOAT,FONT,FOOTING,FOREGROUND-COLOR,FOREGROUND-COLOUR,FOREVER,FORMAT,FORMATTED-CURRENT-DATE,FORMATTED-DATE-TIME,FORMATTED-DATE,FORMATTED-TIME,FORMFEED,FOR,FRACTION-PART,FRAMED,FRAME,FREE,FROM,FULL-HEIGHT,FULL,FUNCTION-ID,FUNCTION-POINTER,FUNCTION</target>
        </trans-unit>
        <trans-unit id="c388ca73e917511c83a42c7c3347b5330aa45cac" translate="yes" xml:space="preserve">
          <source>F1&amp;ndash;F64, respectively, were pressed</source>
          <target state="translated">F1〜F64がそれぞれ押された</target>
        </trans-unit>
        <trans-unit id="03de1b80d9ce6c956e045a67ec26864bd9ba86c4" translate="yes" xml:space="preserve">
          <source>FACTORIAL Function Syntax</source>
          <target state="translated">FACTORIAL 関数構文</target>
        </trans-unit>
        <trans-unit id="c9236dbf1d5f35b60810d9900ebae017d4554e9f" translate="yes" xml:space="preserve">
          <source>FALSE Clause Syntax</source>
          <target state="translated">FALSE 節構文</target>
        </trans-unit>
        <trans-unit id="a721f50a7a690a4a15e9a37c997197a6892fe7c1" translate="yes" xml:space="preserve">
          <source>FETCH</source>
          <target state="translated">FETCH</target>
        </trans-unit>
        <trans-unit id="237f463d19c40eb262085170910a45a2579d4007" translate="yes" xml:space="preserve">
          <source>FILE SECTION Syntax</source>
          <target state="translated">FILE SECTION 構文</target>
        </trans-unit>
        <trans-unit id="6dfe1492af3adfd94529936ae7572256a4829765" translate="yes" xml:space="preserve">
          <source>FILE-SECTION-Data-Item</source>
          <target state="translated">FILE-SECTION-Data-Item</target>
        </trans-unit>
        <trans-unit id="a00fbabfeb0e3333ddad8f67452398d7a56df6cc" translate="yes" xml:space="preserve">
          <source>FILE-SECTION-Data-Item Syntax</source>
          <target state="translated">FILE-SECTION-データ項目構文</target>
        </trans-unit>
        <trans-unit id="9e0f66f312ce180a9aae7f3163bafb7826f66328" translate="yes" xml:space="preserve">
          <source>FINAL CONTROL FOOTING</source>
          <target state="translated">ファイナルコントロールフットイング</target>
        </trans-unit>
        <trans-unit id="731f027415da5cfbed9659d7626ce1ec426fcffa" translate="yes" xml:space="preserve">
          <source>FOOTING AT</source>
          <target state="translated">足元</target>
        </trans-unit>
        <trans-unit id="3e19d8cecb7e5bc7a9e28e9032b126d8e079e6f9" translate="yes" xml:space="preserve">
          <source>FOREGROUND-COLOR Attribute Syntax</source>
          <target state="translated">FOREGROUND-COLOR 属性構文</target>
        </trans-unit>
        <trans-unit id="c692d3a2f6af3743ae5e8378f4c972f6314b9106" translate="yes" xml:space="preserve">
          <source>FORMATTED-CURRENT-DATE Function Syntax</source>
          <target state="translated">FORMATED-CURRENT-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="0d6c854d359a51e18bcbb535437b70bfcccdf40e" translate="yes" xml:space="preserve">
          <source>FORMATTED-DATE Function Syntax</source>
          <target state="translated">FORMATTED-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="2356dae93cb030bd9402e0c53b8de8c6ad996010" translate="yes" xml:space="preserve">
          <source>FORMATTED-DATETIME Function Syntax</source>
          <target state="translated">FORMATED-DATETIME 関数構文</target>
        </trans-unit>
        <trans-unit id="38f8e91eae2a330b39222f7cba3ef7d527f6dd64" translate="yes" xml:space="preserve">
          <source>FORMATTED-TIME Function Syntax</source>
          <target state="translated">FORMATED-TIME 関数構文</target>
        </trans-unit>
        <trans-unit id="d5452f4037c6aa0b6e742313c3d7af9ddb944ba1" translate="yes" xml:space="preserve">
          <source>FRACTION-PART Function Syntax</source>
          <target state="translated">FRACTION-PART 関数構文</target>
        </trans-unit>
        <trans-unit id="6a87ce926e3fdeec20b1a39152e04f9b4879b7c9" translate="yes" xml:space="preserve">
          <source>FREE Syntax</source>
          <target state="translated">無料構文</target>
        </trans-unit>
        <trans-unit id="42879485a7a11418680abc60f6ddfab84a32360f" translate="yes" xml:space="preserve">
          <source>FROM Clause Syntax</source>
          <target state="translated">FROM句構文</target>
        </trans-unit>
        <trans-unit id="2f45ea6b6316a4f10231808ddaece8cd1888d793" translate="yes" xml:space="preserve">
          <source>FULL Attribute Syntax</source>
          <target state="translated">FULL 属性構文</target>
        </trans-unit>
        <trans-unit id="f8bf04d41870db2b7d965f6fcab85ce00b574e04" translate="yes" xml:space="preserve">
          <source>FUNCTION ALL INTRINSIC</source>
          <target state="translated">FUNCTION ALL INTRINSIC</target>
        </trans-unit>
        <trans-unit id="19aa8d076903fa405aac265ff791623484d35537" translate="yes" xml:space="preserve">
          <source>Fails due to rule #1</source>
          <target state="translated">ルール#1のために失敗</target>
        </trans-unit>
        <trans-unit id="c8f41e04860a699d459755ee5bc85c6fd14d5b99" translate="yes" xml:space="preserve">
          <source>Fails due to rule #2a</source>
          <target state="translated">ルール#2aにより失敗</target>
        </trans-unit>
        <trans-unit id="ff00be8ee320bab1c7ba44d9360894c017495313" translate="yes" xml:space="preserve">
          <source>Fails due to rule #2b</source>
          <target state="translated">ルール#2bのため失敗</target>
        </trans-unit>
        <trans-unit id="75efda3b01e99fcd496782dcc687d25e00babfe5" translate="yes" xml:space="preserve">
          <source>Fails due to rule #3a</source>
          <target state="translated">ルール#3aにより失敗</target>
        </trans-unit>
        <trans-unit id="050c309a1409aa9e640bd99affba7737a0884c7e" translate="yes" xml:space="preserve">
          <source>Fails due to rule #3b</source>
          <target state="translated">ルール#3bにより失敗</target>
        </trans-unit>
        <trans-unit id="296fa1d7af3bb7cac562c31b466a3232f2bb3696" translate="yes" xml:space="preserve">
          <source>Fails due to rule #5</source>
          <target state="translated">ルール#5のため失敗</target>
        </trans-unit>
        <trans-unit id="8ba4b7cd854379dc43efe678aa9fc863d5f197f9" translate="yes" xml:space="preserve">
          <source>Fails due to rule #6</source>
          <target state="translated">ルール#6のため失敗</target>
        </trans-unit>
        <trans-unit id="1c882dc98a68cae48a636d1057fb89ac7d36d44d" translate="yes" xml:space="preserve">
          <source>Failure Reason</source>
          <target state="translated">失敗の理由</target>
        </trans-unit>
        <trans-unit id="915120b00045631c4e8983c0043b1f79dd8a3042" translate="yes" xml:space="preserve">
          <source>Fatal</source>
          <target state="translated">Fatal</target>
        </trans-unit>
        <trans-unit id="c35c802e8500c8d21fd613e5ef4507f4da40a451" translate="yes" xml:space="preserve">
          <source>Fatal screen I/O error</source>
          <target state="translated">致命的なスクリーンI/Oエラー</target>
        </trans-unit>
        <trans-unit id="e19ab926093727a391692498a7ce5cfb742d2ae9" translate="yes" xml:space="preserve">
          <source>Field Outlining</source>
          <target state="translated">フィールドアウトライン</target>
        </trans-unit>
        <trans-unit id="3e7ab145eda1bc068c4891bdc4d2491b7ca3babf" translate="yes" xml:space="preserve">
          <source>Figurative Constants</source>
          <target state="translated">比喩的定数</target>
        </trans-unit>
        <trans-unit id="03bfea69bef182d9778a417b4cddffa248ed1ef1" translate="yes" xml:space="preserve">
          <source>Figurative constants are reserved words that may be used as literals anywhere the figurative constants value could be interpreted as an arbitrarily long sequence of the characters in question. When a specific length is required, such as would be the case with an argument to a subprogram, a figurative constant may not be used. Thus, the following are valid uses of figurative constants:</source>
          <target state="translated">比喩的定数は、比喩的定数の値が問題の文字の任意の長いシーケンスとして解釈される可能性があるどこでも、リテラルとして使用される可能性がある予約語です。特定の長さが必要な場合、例えばサブプログラムへの引数のように、比喩的定数は使用されないかもしれません。したがって、以下は比喩定数の有効な使用法です。</target>
        </trans-unit>
        <trans-unit id="daa8d8ba501862c2b07978aab870f1b814a865ba" translate="yes" xml:space="preserve">
          <source>File Location Strings are used (at runtime) to identify the path and filename to the data file that must be attached to &amp;lt;</source>
          <target state="translated">ファイルの場所の文字列は、（実行時に）&amp;lt;に添付する必要があるデータファイルへのパスとファイル名を識別するために使用されます</target>
        </trans-unit>
        <trans-unit id="13f7443b10b7ca5925342febfec77171568b9348" translate="yes" xml:space="preserve">
          <source>File Location Strings are used (at runtime) to identify the path and filename to the data file that must be attached to &lt;var&gt;file-name-1&lt;/var&gt; when that file is opened.</source>
          <target state="translated">File Location Strings are used (at runtime) to identify the path and filename to the data file that must be attached to &lt;var&gt;file-name-1&lt;/var&gt; when that file is opened.</target>
        </trans-unit>
        <trans-unit id="0f3e89f8a70a0298352574b5f3d10f8e9f6307ef" translate="yes" xml:space="preserve">
          <source>File Location Strings will be discussed shortly.</source>
          <target state="translated">ファイルロケーション文字列については近日中に説明します。</target>
        </trans-unit>
        <trans-unit id="30ee6392d050dffb23e534b9b1e788b586e3c285" translate="yes" xml:space="preserve">
          <source>File already open</source>
          <target state="translated">すでに開いているファイル</target>
        </trans-unit>
        <trans-unit id="1f1c6a46840542ee93667be29fe00c4a2ca6e55e" translate="yes" xml:space="preserve">
          <source>File not available</source>
          <target state="translated">ファイルが利用できません</target>
        </trans-unit>
        <trans-unit id="a22e9c3b6a9f5c70de4f76a464810ecba1fb97c3" translate="yes" xml:space="preserve">
          <source>File not found</source>
          <target state="translated">ファイルが見つかりません</target>
        </trans-unit>
        <trans-unit id="d5a01ba68e46b606375d0915c493efcb6d3e3101" translate="yes" xml:space="preserve">
          <source>File not open</source>
          <target state="translated">ファイルが開かない</target>
        </trans-unit>
        <trans-unit id="aa73a3bd94b48e7abeca430b784ba4827580e7e5" translate="yes" xml:space="preserve">
          <source>File section data buffers (and therefore all 01-level record layouts defined in the file section) are initialized to all binary zeros when the program is loaded into storage.</source>
          <target state="translated">ファイルセクションのデータバッファ(したがって、ファイルセクションで定義されたすべての01レベルのレコードレイアウト)は、プログラムがストレージにロードされると、すべてのバイナリゼロに初期化されます。</target>
        </trans-unit>
        <trans-unit id="2b5ebf13d43a94cfe869d3ece0ff8aa5a1595ced" translate="yes" xml:space="preserve">
          <source>File sharing failure</source>
          <target state="translated">ファイル共有の失敗</target>
        </trans-unit>
        <trans-unit id="182a34198299cefa26a74b5a5e4c6b7e382dfda1" translate="yes" xml:space="preserve">
          <source>File sharing is controlled through the use of a &lt;code&gt;SHARING&lt;/code&gt; clause:</source>
          <target state="translated">File sharing is controlled through the use of a &lt;code&gt;SHARING&lt;/code&gt; clause:</target>
        </trans-unit>
        <trans-unit id="d6b7a316c213638a85b3dd6184fc41aa5cc4fb7b" translate="yes" xml:space="preserve">
          <source>File sharing is controlled through the use of a&lt;code&gt;SHARING&lt;/code&gt;</source>
          <target state="translated">ファイル共有を使用して制御される &lt;code&gt;SHARING&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f47df965cafac62967f207b6e7f09ae5add8b8f" translate="yes" xml:space="preserve">
          <source>File-Based SORT Syntax</source>
          <target state="translated">ファイルベースのSORT構文</target>
        </trans-unit>
        <trans-unit id="d87ff91def81de51380ccde36991f463b59063af" translate="yes" xml:space="preserve">
          <source>File/Sort-Description Syntax</source>
          <target state="translated">構文ファイル/ソート記述</target>
        </trans-unit>
        <trans-unit id="0330be4deafe2943904ace5eb8bb1fc169381304" translate="yes" xml:space="preserve">
          <source>Files assigned to &lt;code&gt;PRINTER&lt;/code&gt; or &lt;code&gt;CONSOLE&lt;/code&gt; should be specified as &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PRINTER&lt;/code&gt; または &lt;code&gt;CONSOLE&lt;/code&gt; に割り当てられたファイルは、 &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7083473fe7c031e4e4634ba20b9fb70b80346024" translate="yes" xml:space="preserve">
          <source>Files assigned to&lt;code&gt;PRINTER&lt;/code&gt;or&lt;code&gt;CONSOLE&lt;/code&gt;should be specified as&lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PRINTER&lt;/code&gt; または &lt;code&gt;CONSOLE&lt;/code&gt; に割り当てられたファイルは、 &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; として指定する必要があります</target>
        </trans-unit>
        <trans-unit id="31bbe64669631ae63fd6fe6257505f9cc209fe68" translate="yes" xml:space="preserve">
          <source>Files declared as &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; will consist of records terminated by an end-of-record delimiter character or character sequence.</source>
          <target state="translated">&lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; として宣言されたファイルは、レコードの終わりの区切り文字または文字シーケンスで終了するレコードで構成されます。</target>
        </trans-unit>
        <trans-unit id="8ece89d6efecefef42df7b76a92d5e414e65d7fc" translate="yes" xml:space="preserve">
          <source>Files declared as &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; will consist of records with no explicit end-of-record delimiter character sequences; records in such files are &amp;ldquo;delineated&amp;rdquo; by a calculated byte-offset (based on the maximum record length) into the file.</source>
          <target state="translated">&lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; として宣言されたファイルは、明示的なレコード終了区切り文字シーケンスのないレコードで構成されます。このようなファイル内のレコードは、（最大レコード長に基づいて）計算されたバイトオフセットによってファイルに「描画」されます。</target>
        </trans-unit>
        <trans-unit id="fadccef542c5815627f9bfef0daa01bf051a65a4" translate="yes" xml:space="preserve">
          <source>Files destined for use as sort/merge work files must be described with a Sort/Merge File Description (&lt;code&gt;SD&lt;/code&gt;) while every other file is described with a File Description (&lt;code&gt;FD&lt;/code&gt;). Each of these descriptions will almost always be followed with at least one record description.</source>
          <target state="translated">ソート/マージ作業ファイルとして使用する予定のファイルは、ソート/マージファイル記述（ &lt;code&gt;SD&lt;/code&gt; ）で記述し、他のすべてのファイルはファイル記述（ &lt;code&gt;FD&lt;/code&gt; ）で記述しなければなりません。これらの説明のそれぞれの後には、ほとんどの場合、少なくとも1つのレコードの説明が続きます。</target>
        </trans-unit>
        <trans-unit id="edea6aacf2ec3d63ce72d8e95db88b7bd15eacd7" translate="yes" xml:space="preserve">
          <source>Files destined for use as sort/merge work files must be described with a Sort/Merge File Description &lt;code&gt;SD&lt;/code&gt; while every other file is described with a File Description &lt;code&gt;FD&lt;/code&gt;. Each of these descriptions will almost always be followed with at least one record description.</source>
          <target state="translated">ソート/マージ作業ファイルとして使用することを目的としたファイルは、ソート/マージファイル記述 &lt;code&gt;SD&lt;/code&gt; で記述する必要がありますが、他のすべてのファイルは、ファイル記述 &lt;code&gt;FD&lt;/code&gt; で記述します。ほとんどの場合、これらの説明の後には少なくとも1つのレコードの説明が続きます。</target>
        </trans-unit>
        <trans-unit id="367feea21d15dacc3ac862c7a57bd856bad73096" translate="yes" xml:space="preserve">
          <source>Finally, COBOL has the ability to perform in-place sorts of the data that is found in a table.</source>
          <target state="translated">最後に、COBOLは、表にあるデータのインプレースソートを実行する機能を持っています。</target>
        </trans-unit>
        <trans-unit id="a6001a209721116a31aff91d01e445326ed01374" translate="yes" xml:space="preserve">
          <source>Finally, here&amp;rsquo;s the report the program generates!</source>
          <target state="translated">最後に、プログラムが生成するレポートを示します。</target>
        </trans-unit>
        <trans-unit id="f20c28fefd559b4e296c1d1db0eefc938688cab3" translate="yes" xml:space="preserve">
          <source>Finally,the &lt;code&gt;REPORT FOOTING&lt;/code&gt; group, if any, will be presented.</source>
          <target state="translated">最後に、 &lt;code&gt;REPORT FOOTING&lt;/code&gt; グループがあればそれが提示されます。</target>
        </trans-unit>
        <trans-unit id="f8e1fd8ed05817c2c1238d06570433fc37097c39" translate="yes" xml:space="preserve">
          <source>Finally,the&lt;code&gt;REPORT FOOTING&lt;/code&gt;group, if any, will be presented.</source>
          <target state="translated">最後に、 &lt;code&gt;REPORT FOOTING&lt;/code&gt; グループがあれば、それが表示されます。</target>
        </trans-unit>
        <trans-unit id="8a928ac89796afd20a583c169e78e1d2e97f3cee" translate="yes" xml:space="preserve">
          <source>First, the &quot;Hard Way&quot;:</source>
          <target state="translated">まずは「硬派な道」。</target>
        </trans-unit>
        <trans-unit id="700b01ba4bdd2da33483f145da324ac61e1b1906" translate="yes" xml:space="preserve">
          <source>First, the &amp;ldquo;Hard Way&amp;rdquo;:</source>
          <target state="translated">まず、「ハードウェイ」：</target>
        </trans-unit>
        <trans-unit id="69a656c5968fc19e26398c39c1d42930578021ec" translate="yes" xml:space="preserve">
          <source>First/Last Digit</source>
          <target state="translated">最初/最後の桁</target>
        </trans-unit>
        <trans-unit id="c698ef5e7b0a316052b55cd8ba9f275dd3cc64d1" translate="yes" xml:space="preserve">
          <source>Fixed Format Mode</source>
          <target state="translated">固定フォーマットモード</target>
        </trans-unit>
        <trans-unit id="fb6455fd910bbce0c221e84e30d7a80946a5a47c" translate="yes" xml:space="preserve">
          <source>Floating-point values using &quot;Enn&quot; notation such as 9.92E25, representing 9.92 x 10^25 (10 raised to the 25th power) or 5.7E-14, representing 5.7 x 10^-14 (10 raised to the -14th power). Both the mantissa (the number before the E) and the exponent (the number after the E) may be explicitly specified as positive (with a +), negative (with a -) or unsigned (and therefore implicitly positive). A floating-point literals value must be within the range -1.7 x 10^308 to +1.7 x 10^308 with no more than 15 decimal digits of precision.</source>
          <target state="translated">9.92E25は9.92×10^25(25乗に10乗)を表し、5.7E-14は5.7×10^-14(-14乗に10乗)を表すなど、&quot;Enn &quot;表記を使用した浮動小数点値。仮数(E の前の数)と指数(E の後の数)は、両方とも明示的に正(+付き)、負(-付き)、または符号なし(したがって暗黙のうちに正)として指定できます。浮動小数点リテラルの値は、-1.7 x 10^308 から +1.7 x 10^308 の範囲内で、精度は小数点以下15桁以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="3669c6f52ce8ae20cb1c5200355804595b964532" translate="yes" xml:space="preserve">
          <source>Floating-point values using &amp;lsquo;</source>
          <target state="translated">'を使用した浮動小数点値</target>
        </trans-unit>
        <trans-unit id="5988bca9b2f3443b9ecd1f06fab806eb243168de" translate="yes" xml:space="preserve">
          <source>Footing Area</source>
          <target state="translated">フーディングエリア</target>
        </trans-unit>
        <trans-unit id="87ab5909b2f76e9e20c96df08cc1254796e8a1d7" translate="yes" xml:space="preserve">
          <source>Footing Area &amp;mdash; An exception to this is the situation where the report footing report group contains the &lt;code&gt;NEXT PAGE&lt;/code&gt; option in its &lt;code&gt;LINE&lt;/code&gt; (see &lt;a href=&quot;#LINE&quot;&gt;LINE&lt;/a&gt;) clause; in those cases, the report footing will be presented on a page by itself at the end of the report.</source>
          <target state="translated">基礎領域&amp;mdash;これの例外は、レポート基礎レポートグループの &lt;code&gt;LINE&lt;/code&gt; （&lt;a href=&quot;#LINE&quot;&gt;LINEを&lt;/a&gt;参照）句に &lt;code&gt;NEXT PAGE&lt;/code&gt; オプションが含まれている場合です。そのような場合、レポートの基礎は、レポートの最後のページに単独で表示されます。</target>
        </trans-unit>
        <trans-unit id="e40c95fbb3b9dc7a620c19bde2435c717bde7695" translate="yes" xml:space="preserve">
          <source>Footing Area &amp;mdash; An exception to this is the situation where the report footing report group contains the&lt;code&gt;NEXT PAGE&lt;/code&gt;option in its&lt;code&gt;LINE&lt;/code&gt;(see &lt;a href=&quot;#LINE&quot;&gt;LINE&lt;/a&gt;) clause; in those cases, the report footing will be presented on a page by itself at the end of the report.</source>
          <target state="translated">脚注領域-これの例外は、レポート脚注レポートグループの &lt;code&gt;LINE&lt;/code&gt; （&lt;a href=&quot;#LINE&quot;&gt;LINEを&lt;/a&gt;参照）句に &lt;code&gt;NEXT PAGE&lt;/code&gt; オプションが含まれている場合です。これらの場合、レポートのフッターは、レポートの最後のページに単独で表示されます。</target>
        </trans-unit>
        <trans-unit id="f1f2df0044b1fb68f6dc423b5264f3723a7c8996" translate="yes" xml:space="preserve">
          <source>For all other data types, the field size is set to the size of the item (same as if &lt;code&gt;CONVERT&lt;/code&gt; were not specified).</source>
          <target state="translated">他のすべてのデータ型の場合、フィールドサイズはアイテムのサイズに設定されます（ &lt;code&gt;CONVERT&lt;/code&gt; が指定されていない場合と同じです）。</target>
        </trans-unit>
        <trans-unit id="a3127f980dbd36611f50532c041a2233802b3eff" translate="yes" xml:space="preserve">
          <source>For all other data types, the field size is set to the size of the item (same as if CONVERT were not specified).</source>
          <target state="translated">他のすべてのデータ型では、フィールドのサイズが項目のサイズに設定されます (CONVERT を指定しなかった場合と同じです)。</target>
        </trans-unit>
        <trans-unit id="aa49eb1e0aec6d10ce624911ab1285a133bc19a0" translate="yes" xml:space="preserve">
          <source>For any given version of GnuCOBOL you can also list the full current set of reserved words by running cobc with</source>
          <target state="translated">GnuCOBOLのどのバージョンでも、cobcを実行して</target>
        </trans-unit>
        <trans-unit id="3f10546dc4d3d3e676fa3bc40fd34171c3147ee1" translate="yes" xml:space="preserve">
          <source>For composite &lt;code&gt;DISPLAY&lt;/code&gt;&amp;rsquo;s, the attributes are always only applied to the previous source-item but the following also allows a change by variable or literal</source>
          <target state="translated">複合 &lt;code&gt;DISPLAY&lt;/code&gt; の場合、属性は常に前のソースアイテムにのみ適用されますが、以下では変数またはリテラルによる変更も可能です。</target>
        </trans-unit>
        <trans-unit id="0be022f00b31b21ff6869cd088d057bfb0e3270f" translate="yes" xml:space="preserve">
          <source>For each implementation of the GnuCOBOL compiler the supplied files NEWS should also be read for any last minute updates along with files README and INSTALL for building the compiler.</source>
          <target state="translated">GnuCOBOL コンパイラの各実装では、提供されているNEWSファイルを、コンパイ ラをビルドするためのREADMEとINSTALLファイルとともに、直前のアップデートのために読む必要があります。</target>
        </trans-unit>
        <trans-unit id="c1fcb175d336c0714548be23a006f2304e931f29" translate="yes" xml:space="preserve">
          <source>For each source item, the contents of the sending item will be copied &amp;mdash; character-by-character &amp;mdash; into &amp;lt;</source>
          <target state="translated">ソースアイテムごとに、送信アイテムのコンテンツが文字ごとに&amp;lt;にコピーされます。</target>
        </trans-unit>
        <trans-unit id="8d55093f3e06168b03c01ccd400fda41e135275a" translate="yes" xml:space="preserve">
          <source>For each source item, the contents of the sending item will be copied &amp;mdash; character-by-character &amp;mdash; into &lt;var&gt;identifier-3&lt;/var&gt; at the character position specified by the current character pointer. After each character is copied, the current character pointer will be incremented by 1 so that it points to the position within &lt;var&gt;identifier-3&lt;/var&gt; where the</source>
          <target state="translated">ソースアイテムごとに、送信アイテムの内容が文字ごとに、現在の文字ポインタで指定された文字位置の &lt;var&gt;identifier-3&lt;/var&gt; にコピーされます。各文字がコピーされた後、それは内の位置を指すように、現在の文字ポインタは、1だけ増分される &lt;var&gt;identifier-3&lt;/var&gt; どこ</target>
        </trans-unit>
        <trans-unit id="cf9156cf449643f9bda337a140c24f2f1504f039" translate="yes" xml:space="preserve">
          <source>For example, You will not expect to see any difference whatsoever between values of 1, 100, 500 or 1000, but you should see a difference between values such as 250000000 and 500000000.</source>
          <target state="translated">例えば、1、100、500、1000の値の間には何の違いも期待できませんが、250000000と5000000000のような値の間には違いがあるはずです。</target>
        </trans-unit>
        <trans-unit id="67f2916632d9738b41e6e54331471967b49d6ae6" translate="yes" xml:space="preserve">
          <source>For example, assuming the program is using the standard &lt;small&gt;ASCII&lt;/small&gt; collating sequence, &lt;code&gt;ORD('!')&lt;/code&gt; returns 34 because &amp;lsquo;</source>
          <target state="translated">たとえば、プログラムが標準の&lt;small&gt;ASCII&lt;/small&gt;照合シーケンスを使用しているとすると、 &lt;code&gt;ORD('!')&lt;/code&gt; は34を返します。</target>
        </trans-unit>
        <trans-unit id="7766723a8b265a321d985162bb404da7b04dcd19" translate="yes" xml:space="preserve">
          <source>For example, assuming the program is using the standard &lt;small&gt;ASCII&lt;/small&gt; collating sequence, &lt;code&gt;ORD-MAX('Z', 'z', '!')&lt;/code&gt; returns 2 because the 2nd character in the argument list (the &lt;small&gt;ASCII&lt;/small&gt; character &amp;lsquo;</source>
          <target state="translated">たとえば、プログラムが標準の&lt;small&gt;ASCII&lt;/small&gt;照合シーケンスを使用しているとすると、引数リストの2番目の文字（&lt;small&gt;ASCII&lt;/small&gt;文字 ' &lt;code&gt;ORD-MAX('Z', 'z', '!')&lt;/code&gt; ため、ORD-MAX（' Z '、' z '、'！ '）は2を返します。&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0ed29102fb766b9394cd4e12f35df95ed7177458" translate="yes" xml:space="preserve">
          <source>For example, assuming the program is using the standard &lt;small&gt;ASCII&lt;/small&gt; collating sequence, &lt;code&gt;ORD-MIN('Z', 'z', '!')&lt;/code&gt; returns 3 because the 3rd character in the argument list (the &lt;small&gt;ASCII&lt;/small&gt; character &amp;lsquo;</source>
          <target state="translated">たとえば、プログラムが標準の&lt;small&gt;ASCII&lt;/small&gt;照合シーケンスを使用しているとすると、引数リストの3番目の文字（&lt;small&gt;ASCII&lt;/small&gt;文字 ' &lt;code&gt;ORD-MIN('Z', 'z', '!')&lt;/code&gt; ため、ORD-MIN（' Z '、' z '、'！ '）は3を返します。&lt;small&gt;&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3368f51d3762d71c83916eebf4457e0236b996e5" translate="yes" xml:space="preserve">
          <source>For example, assuming the program is using the standard ASCII collating sequence,&lt;code&gt;ORD('!')&lt;/code&gt;returns 34 because &quot;!&quot; is the 34th ASCII character. If you are using this function to convert an ASCII character to its numeric value, you must subtract one from the result.</source>
          <target state="translated">たとえば、プログラムが標準のASCII照合シーケンスを使用しているとすると、 &lt;code&gt;ORD('!')&lt;/code&gt; は34を返します。34番目のASCII文字です。この関数を使用してASCII文字を数値に変換する場合は、結果から1を引く必要があります。</target>
        </trans-unit>
        <trans-unit id="55a9ee5de13cdf67bb331bd003f29ecf42021db7" translate="yes" xml:space="preserve">
          <source>For example, assuming the program is using the standard ASCII collating sequence,&lt;code&gt;ORD-MAX('Z', 'z', '!')&lt;/code&gt;returns 2 because the 2nd character in the argument list (the ASCII character &amp;rsquo;z&amp;rsquo;) occurs after &amp;rsquo;Z&amp;rsquo; and &amp;rsquo;!&amp;rsquo; in the program collating sequence. Each &amp;lt;</source>
          <target state="translated">たとえば、プログラムが標準のASCII照合シーケンスを使用しているとすると、 &lt;code&gt;ORD-MAX('Z', 'z', '!')&lt;/code&gt; は2を返します。これは、引数リストの2番目の文字（ASCII文字 'z'）が後に発生するためです。 「Z」と「！」プログラム照合シーケンス。各&amp;lt;</target>
        </trans-unit>
        <trans-unit id="0b8897a3e322f2447e1c9d83730f3c7e2254e611" translate="yes" xml:space="preserve">
          <source>For example, assuming the program is using the standard ASCII collating sequence,&lt;code&gt;ORD-MIN('Z', 'z', '!')&lt;/code&gt;returns 3 because the 3rd character in the argument list (the ASCII character &amp;rsquo;!&amp;rsquo;) occurs before &amp;rsquo;Z&amp;rsquo; and &amp;rsquo;z&amp;rsquo; in the program collating sequence. Each &amp;lt;</source>
          <target state="translated">たとえば、プログラムが標準のASCII照合シーケンスを使用しているとすると、 &lt;code&gt;ORD-MIN('Z', 'z', '!')&lt;/code&gt; は3を返します。これは、引数リストの3番目の文字（ASCII文字 '！'）がプログラム照合シーケンスの「Z」と「z」。各&amp;lt;</target>
        </trans-unit>
        <trans-unit id="749e13e172aac64f618104a47c4a2c7a40595730" translate="yes" xml:space="preserve">
          <source>For example, if &amp;lt;</source>
          <target state="translated">たとえば、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="897cd42747603a9b53f6ab8470617280073ce9e3" translate="yes" xml:space="preserve">
          <source>For example, if &lt;var&gt;string&lt;/var&gt; is encoded using a double-byte character set such as Unicode UTF-16 (where each character is represented by 16 bits of storage, not the 8-bits inherent to character sets like &lt;small&gt;ASCII&lt;/small&gt; or &lt;small&gt;EBCDIC&lt;/small&gt;), then calling this function with a &lt;var&gt;string&lt;/var&gt; argument whose &lt;code&gt;PICTURE&lt;/code&gt; (see &lt;a href=&quot;#PICTURE&quot;&gt;PICTURE&lt;/a&gt;) is &lt;code&gt;X(4)&lt;/code&gt; would return a value of 8 rather than the value 4.</source>
          <target state="translated">たとえば、 &lt;var&gt;string&lt;/var&gt; がUnicode UTF-16などの2バイト文字セット（各文字は&lt;small&gt;ASCII&lt;/small&gt;や&lt;small&gt;EBCDIC&lt;/small&gt;などの文字セットに固有の8ビットではなく、16ビットのストレージで表される）を使用してエンコードされている場合、これを呼び出します。関数 &lt;var&gt;string&lt;/var&gt; 引数 &lt;code&gt;PICTURE&lt;/code&gt; （参照&lt;a href=&quot;#PICTURE&quot;&gt;PICTUREを&lt;/a&gt;）は &lt;code&gt;X(4)&lt;/code&gt; 8の値ではなく、値4を返します。</target>
        </trans-unit>
        <trans-unit id="9ee8b6b0eabb2430a55cd033971a62ef89f44236" translate="yes" xml:space="preserve">
          <source>For example, if the program is using the (default) &lt;small&gt;ASCII&lt;/small&gt; character set, CHAR(34) returns the 34th character in the &lt;small&gt;ASCII&lt;/small&gt; character set &amp;mdash; an exclamation-point (&amp;lsquo;</source>
          <target state="translated">たとえば、プログラムが（デフォルトの）&lt;small&gt;ASCII&lt;/small&gt;文字セットを使用している場合、CHAR（34）は&lt;small&gt;ASCII&lt;/small&gt;文字セットの34番目の文字である感嘆符（ '</target>
        </trans-unit>
        <trans-unit id="24697a3ba1d925f052573a7696493b003e3077cd" translate="yes" xml:space="preserve">
          <source>For example, if the program is using the (default) ASCII character set, CHAR(34) returns the 34th character in the ASCII character set &amp;mdash; an exclamation-point (&quot;!&quot;). If you are using this function to convert a numeric value to its corresponding ASCII character, you must use an argument value one greater than the numeric value.</source>
          <target state="translated">たとえば、プログラムが（デフォルトの）ASCII文字セットを使用している場合、CHAR（34）はASCII文字セットの34番目の文字、感嘆符（ &quot;！&quot;）を返します。この関数を使用して数値を対応するASCII文字に変換する場合は、数値より1大きい引数値を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="86d303a32d15849fb5f8b370e6bee4a9d77d8625" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s assume we&amp;rsquo;re sorting a series of financial transactions. The SORT statement might look like this:</source>
          <target state="translated">たとえば、一連の金融取引を並べ替えているとします。SORTステートメントは次のようになります。</target>
        </trans-unit>
        <trans-unit id="fb00a63cdc6f6eb78d00ce4dd102beadda021aab" translate="yes" xml:space="preserve">
          <source>For example, let&amp;rsquo;s say you need to allocate a data item that contains however many millions of dollars of revenue your company has in gross revenues this year:</source>
          <target state="translated">たとえば、会社の今年の総収入が何百万ドルにも及ぶ収入を含むデータアイテムを割り当てる必要があるとします。</target>
        </trans-unit>
        <trans-unit id="baad68c9ee59c08b3b83b0d9b5e6c9c54362d8ca" translate="yes" xml:space="preserve">
          <source>For example, observe the following data structure which defines a 4 column by 3 row grid of characters:</source>
          <target state="translated">例えば、4列×3行の文字のグリッドを定義する以下のデータ構造を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="1e1810c68bddd424a5992ed3cf44b3e08e986f15" translate="yes" xml:space="preserve">
          <source>For example, on a GnuCOBOL build for a Windows PC using MinGW and &amp;ldquo;PDCurses&amp;rdquo;, &lt;code&gt;F1&lt;/code&gt;&amp;ndash;&lt;code&gt;F12&lt;/code&gt; are the actual F-keys on the PC keyboard, &lt;code&gt;F&lt;var&gt;13&lt;/var&gt;&lt;/code&gt;&amp;ndash;&lt;code&gt;F&lt;var&gt;24&lt;/var&gt;&lt;/code&gt; are entered by shifting the F-keys, &lt;code&gt;F&lt;var&gt;25&lt;/var&gt;&lt;/code&gt;&amp;ndash;&lt;code&gt;F&lt;var&gt;36&lt;/var&gt;&lt;/code&gt; are entered by holding Ctrl while pressing an F-key and &lt;code&gt;F&lt;var&gt;37&lt;/var&gt;&lt;/code&gt;&amp;ndash;&lt;code&gt;F&lt;var&gt;48&lt;/var&gt;&lt;/code&gt; are entered by holding Alt while pressing an F-key. On the other hand, a GnuCOBOL implementation built for Windows using Cygwin and NCurses treats the PCs &lt;code&gt;F&lt;var&gt;1&lt;/var&gt;&lt;/code&gt;&amp;ndash;&lt;code&gt;F&lt;var&gt;12&lt;/var&gt;&lt;/code&gt; keys as the actual &lt;code&gt;F&lt;var&gt;1&lt;/var&gt;&lt;/code&gt;&amp;ndash;&lt;code&gt;F&lt;var&gt;12&lt;/var&gt;&lt;/code&gt;, while shifted F-keys will enter &lt;code&gt;F&lt;var&gt;11&lt;/var&gt;&lt;/code&gt;&amp;ndash;&lt;code&gt;F&lt;var&gt;2&lt;/var&gt;&lt;/code&gt;0. With Cygwin/NCurses, Ctrl- and Alt-modified F-keys aren&amp;rsquo;t recognized, nor are &lt;code&gt;Shift-F&lt;var&gt;11&lt;/var&gt;&lt;/code&gt; or &lt;code&gt;Shift-F&lt;var&gt;12&lt;/var&gt;&lt;/code&gt;.</source>
          <target state="translated">例えば、MinGWのと「PDCurses」、使用したWindows PC用GnuCOBOLビルドに &lt;code&gt;F1&lt;/code&gt; を- &lt;code&gt;F12&lt;/code&gt; は、 PCのキーボード上の実際のF-鍵である、 &lt;code&gt;F&lt;var&gt;13&lt;/var&gt;&lt;/code&gt; - &lt;code&gt;F&lt;var&gt;24&lt;/var&gt;&lt;/code&gt; F-キーをシフトすることによって入力され、 &lt;code&gt;F&lt;var&gt;25&lt;/var&gt;&lt;/code&gt; - &lt;code&gt;F&lt;var&gt;36&lt;/var&gt;&lt;/code&gt; Fキーを押しながらCtrlキーを保持することによって入力される &lt;code&gt;F&lt;var&gt;37&lt;/var&gt;&lt;/code&gt; - &lt;code&gt;F&lt;var&gt;48&lt;/var&gt;&lt;/code&gt; Fキーを押しながらAltキーを保持することにより入力されます。一方、Cygwinとのncursesを使用してWindows用に構築GnuCOBOLの実装では、PCの扱い &lt;code&gt;F&lt;var&gt;1&lt;/var&gt;&lt;/code&gt; - &lt;code&gt;F&lt;var&gt;12&lt;/var&gt;&lt;/code&gt; キー、実際として &lt;code&gt;F&lt;var&gt;1&lt;/var&gt;&lt;/code&gt; - &lt;code&gt;F&lt;var&gt;12&lt;/var&gt;&lt;/code&gt; シフトF-キーを入力する一方、 &lt;code&gt;F&lt;var&gt;11&lt;/var&gt;&lt;/code&gt; - &lt;code&gt;F&lt;var&gt;2&lt;/var&gt;&lt;/code&gt; のCygwin / ncursesの、はCtrl-とすると0をF-キーが認識されないアルト修飾、またある &lt;code&gt;Shift-F&lt;var&gt;11&lt;/var&gt;&lt;/code&gt; 又は &lt;code&gt;Shift-F&lt;var&gt;12&lt;/var&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3aafb29761d15f601ec670e73bfded28362456c7" translate="yes" xml:space="preserve">
          <source>For example, the following defines a class called &quot;Hexadecimal&quot;, the definition of which specifies the only characters that may be present in an alphanumeric data item if that data item is to be part of the &quot;Hexadecimal&quot; class:</source>
          <target state="translated">例えば、以下では、&quot;Hexadecimal &quot;と呼ばれるクラスを定義しています。</target>
        </trans-unit>
        <trans-unit id="affabf883c8efcc9b6ac761a06fc5f1e4af89db5" translate="yes" xml:space="preserve">
          <source>For example, the following defines a class called &lt;code&gt;Hexadecimal&lt;/code&gt;, the definition of which specifies the only characters that may be present in an alphanumeric data item if that data item is to be part of the &lt;code&gt;Hexadecimal&lt;/code&gt; class:</source>
          <target state="translated">たとえば、以下は &lt;code&gt;Hexadecimal&lt;/code&gt; と呼ばれるクラスを定義します。その定義は、英数字データ項目が &lt;code&gt;Hexadecimal&lt;/code&gt; クラスの一部である場合にそのデータ項目に存在する可能性のある文字のみを指定します。</target>
        </trans-unit>
        <trans-unit id="0bfaac6856103f819db17ad997ea57d182a00507" translate="yes" xml:space="preserve">
          <source>For example, you will not expect to see any difference between values of 1, 100, 500 or 1000, but you should see a difference between values such as 250000000 and 500000000.</source>
          <target state="translated">例えば、1、100、500、1000の値の違いは期待できませんが、25000000と50000000のような値の違いが出てくるはずです。</target>
        </trans-unit>
        <trans-unit id="059c3e8cce263b2945a18ac90b2637e10a8026b1" translate="yes" xml:space="preserve">
          <source>For example:</source>
          <target state="translated">例えば</target>
        </trans-unit>
        <trans-unit id="768d8aa397739d0da5300dfc289107304c48653e" translate="yes" xml:space="preserve">
          <source>For files in the &lt;code&gt;SEQUENTIAL&lt;/code&gt; access mode, the last input-output statement executed against &lt;var&gt;file-name-1&lt;/var&gt; prior to the execution of the &lt;code&gt;DELETE&lt;/code&gt; statement must have been a successfully executed sequential-format &lt;code&gt;READ&lt;/code&gt; statement (see &lt;a href=&quot;#Sequential-READ&quot;&gt;Sequential READ&lt;/a&gt;). That &lt;code&gt;READ&lt;/code&gt; will therefore identify the record to be deleted.</source>
          <target state="translated">内のファイルについて &lt;code&gt;SEQUENTIAL&lt;/code&gt; アクセスモード、最後の入出力文はに対して実行 &lt;var&gt;file-name-1&lt;/var&gt; の実行前に &lt;code&gt;DELETE&lt;/code&gt; ステートメントが正常に実行され、シーケンシャル・フォーマットされていなければならない &lt;code&gt;READ&lt;/code&gt; 文を（参照&lt;a href=&quot;#Sequential-READ&quot;&gt;シーケンシャルリードが&lt;/a&gt;）。したがって、その &lt;code&gt;READ&lt;/code&gt; は、削除するレコードを識別します。</target>
        </trans-unit>
        <trans-unit id="dab6ce21e23d5e22f729efd782034eee11b18ef5" translate="yes" xml:space="preserve">
          <source>For files in the&lt;code&gt;SEQUENTIAL&lt;/code&gt;access mode, the last input-output statement executed against &amp;lt;</source>
          <target state="translated">&lt;code&gt;SEQUENTIAL&lt;/code&gt; アクセスモードのファイルの場合、&amp;lt;に対して実行された最後の入出力ステートメント</target>
        </trans-unit>
        <trans-unit id="e59cbd1f100864f2a69aca9178b5457c051de746" translate="yes" xml:space="preserve">
          <source>For non-trivial computations, &lt;code&gt;COMPUTE&lt;/code&gt; statements &amp;ldquo;read&amp;rdquo; better. Take this, for example:</source>
          <target state="translated">重要な計算の場合、 &lt;code&gt;COMPUTE&lt;/code&gt; ステートメントは「読みやすく」なります。これを例にとってみましょう：</target>
        </trans-unit>
        <trans-unit id="a39b87b77ac08a2facf379872c177dbaf2f50de3" translate="yes" xml:space="preserve">
          <source>For non-trivial computations, &lt;code&gt;COMPUTE&lt;/code&gt; statements may execute faster than the equivalent chain of basic arithmetic statements. For example, the COMPUTE statement shown above executes about 25% faster on my computer using GnuCOBOL than does the MULTIPLY-ADD-DIVIDE sequence.</source>
          <target state="translated">自明でない計算の場合、 &lt;code&gt;COMPUTE&lt;/code&gt; ステートメントは、基本的な算術ステートメントの同等のチェーンよりも高速に実行される場合があります。たとえば、上記のCOMPUTEステートメントは、GnuCOBOLを使用するコンピューターで、MULTIPLY-ADD-DIVIDEシーケンスよりも約25％高速に実行されます。</target>
        </trans-unit>
        <trans-unit id="0033fcaf736090140a9ae955ceeeed639d0db017" translate="yes" xml:space="preserve">
          <source>For non-trivial computations,&lt;code&gt;COMPUTE&lt;/code&gt;statements &quot;read&quot; better. Take this, for example:</source>
          <target state="translated">重要な計算の場合、 &lt;code&gt;COMPUTE&lt;/code&gt; ステートメントの方が「読み取り」がよくなります。たとえば、次のようにします。</target>
        </trans-unit>
        <trans-unit id="4b25cf83aa9b241d27a0438f702e22b38e6a5771" translate="yes" xml:space="preserve">
          <source>For non-trivial computations,&lt;code&gt;COMPUTE&lt;/code&gt;statements may execute faster than the equivalent chain of basic arithmetic statements. For example, the COMPUTE statement shown above executes about 25% faster on my computer using GnuCOBOL than does the MULTIPLY-ADD-DIVIDE sequence.</source>
          <target state="translated">重要な計算の場合、 &lt;code&gt;COMPUTE&lt;/code&gt; ステートメントは、基本的な算術ステートメントの同等のチェーンよりも高速に実行される可能性があります。たとえば、上記のCOMPUTEステートメントは、GnuCOBOLを使用しているコンピューターでは、MULTIPLY-ADD-DIVIDEシーケンスよりも約25％高速に実行されます。</target>
        </trans-unit>
        <trans-unit id="4921ac486a9a7a241c39c923f2dc1b53c77e5445" translate="yes" xml:space="preserve">
          <source>For purposes of comparison, trailing spaces are truncated from the operands except that an operand consisting of all spaces is truncated to a single space.</source>
          <target state="translated">比較のために、すべてのスペースからなるオペランドが単一のスペースに切り捨てられることを除き、末尾のスペースはオペランドから切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="4ea212aeaa1a2268b2a88fc06fad4dfb6854c1d1" translate="yes" xml:space="preserve">
          <source>For quite a while now (back to the late 1970&amp;rsquo;s), the</source>
          <target state="translated">かなり長い間（1970年代後半にさかのぼります）、</target>
        </trans-unit>
        <trans-unit id="483a043da3e58761a7a31d92b7cee03f34d3a0e9" translate="yes" xml:space="preserve">
          <source>For quite a while now (back to the late 1970&amp;rsquo;s), the &quot;sequence number area&quot; of a COBOL statement (columns 1-6) has come to be used as a change indicator area. Programmers would place a code in columns 1-6 of every line they changed in a program. The author works in a COBOL shop where change indicators of the form &quot;xxmmyy&quot; are required on every altered line of a program &amp;mdash; &quot;xx&quot; is the initials of the programmer while &quot;mmyy&quot; are the month and two-digit year of the date the change was made. This is frequently accompanied by a comment block at or near the top of a COBOL program providing general documentation of what changes were made and what change indicator was used to mark that change.</source>
          <target state="translated">しばらくの間（1970年代後半に戻る）、COBOLステートメントの「シーケンス番号領域」（列1〜6）が変更インジケータ領域として使用されるようになりました。プログラマーは、プログラムで変更したすべての行の列1から6にコードを配置します。著者はCOBOLショップで働いており、プログラムの変更されたすべての行に「xxmmyy」という形式の変更インジケーターが必要です。「xx」はプログラマーのイニシャル、「mmyy」は日付の月と2桁の年です変更が行われました。これには、COBOLプログラムの上部またはその近くにコメントブロックが付随していることが多く、行われた変更とその変更をマークするために使用された変更インジケーターに関する一般的なドキュメントが提供されます。</target>
        </trans-unit>
        <trans-unit id="457470efdde973d009f597e9d358f8aba703173f" translate="yes" xml:space="preserve">
          <source>For syntax details for the &lt;code&gt;ORGANIZATION&lt;/code&gt; clause, see next group of paragraphs.</source>
          <target state="translated">&lt;code&gt;ORGANIZATION&lt;/code&gt; 句の構文の詳細については、次の段落グループを参照してください。</target>
        </trans-unit>
        <trans-unit id="e2dea5e1669c0a9fe3c1fbcb48cb6bd943c60b26" translate="yes" xml:space="preserve">
          <source>For the sake of brevity, this document lists the data in three columns.</source>
          <target state="translated">簡潔にするために、このドキュメントではデータを3つの列に分けてリストアップしています。</target>
        </trans-unit>
        <trans-unit id="aa9a0c097479cba30f19eaa01767298dde8ef7ef" translate="yes" xml:space="preserve">
          <source>For the values specified on a &lt;code&gt;PAGE LIMIT&lt;/code&gt; clause to be valid, all of the following must be true:</source>
          <target state="translated">&lt;code&gt;PAGE LIMIT&lt;/code&gt; 句で指定された値が有効であるためには、次のすべてが真である必要があります。</target>
        </trans-unit>
        <trans-unit id="ba325520d21c79af4680da537a3249fca4c6eeab" translate="yes" xml:space="preserve">
          <source>For the values specified on a&lt;code&gt;PAGE LIMIT&lt;/code&gt;clause to be valid, all of the following must be true:</source>
          <target state="translated">&lt;code&gt;PAGE LIMIT&lt;/code&gt; 句で指定された値が有効であるためには、次のすべてが真でなければなりません。</target>
        </trans-unit>
        <trans-unit id="6b68ca39097c0a0bedb3dc7024be567498339bfa" translate="yes" xml:space="preserve">
          <source>For those wishing to learn COBOL for the first time, Gary can strongly recommend the following resources.</source>
          <target state="translated">初めてCOBOLを学びたい方には、以下のリソースを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="efdae81d538ace29e7236aee7c1c96a4ee6706e5" translate="yes" xml:space="preserve">
          <source>For trivial computations, on the other hand, I prefer the inherent readability of a statement such as this:</source>
          <target state="translated">些細な計算のためには、一方で、私はこのような文の本質的な可読性を好む。</target>
        </trans-unit>
        <trans-unit id="041a5dec481d6bf0724caeaa84bc135d7d9062d4" translate="yes" xml:space="preserve">
          <source>Format</source>
          <target state="translated">Format</target>
        </trans-unit>
        <trans-unit id="410ac084c444abe7ef2e13dea30c88749ac663a7" translate="yes" xml:space="preserve">
          <source>Format 1 of the &lt;code&gt;REPLACE&lt;/code&gt; statement can be used to make changes to program source code in much the same way as the  &lt;code&gt;REPLACING&lt;/code&gt; option of the &lt;code&gt;COPY&lt;/code&gt; statement can, via these options:</source>
          <target state="translated">&lt;code&gt;REPLACE&lt;/code&gt; ステートメントのフォーマット1を使用すると、 &lt;code&gt;COPY&lt;/code&gt; ステートメントの &lt;code&gt;REPLACING&lt;/code&gt; オプションとほぼ同じ方法で、次のオプションを使用してプログラムのソースコードを変更 できます。</target>
        </trans-unit>
        <trans-unit id="09bebf0bea412802e3fbb625d9294d89526d28f2" translate="yes" xml:space="preserve">
          <source>Format 1 of the&lt;code&gt;REPLACE&lt;/code&gt;statement can be used to make changes to program source code in much the same way as the&lt;code&gt;REPLACING&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;REPLACE&lt;/code&gt; ステートメントの形式1を使用して、 &lt;code&gt;REPLACING&lt;/code&gt; とほとんど同じ方法でプログラムのソースコードを変更できます。</target>
        </trans-unit>
        <trans-unit id="dcc8ef045e79317e7c9e712ad4f3b0696cfbb717" translate="yes" xml:space="preserve">
          <source>Format a numeric item for output, including thousands-separators (&amp;lsquo;</source>
          <target state="translated">数千の区切り文字を含む、出力用の数値項目をフォーマットします（ '</target>
        </trans-unit>
        <trans-unit id="e143df1aa83eabbe82d17220703bff1e6c2ae88e" translate="yes" xml:space="preserve">
          <source>Free Format Mode</source>
          <target state="translated">フリーフォーマットモード</target>
        </trans-unit>
        <trans-unit id="fbc349f93c5e079ef91504e8bcea3293322299f8" translate="yes" xml:space="preserve">
          <source>From the sequence of &amp;lt;</source>
          <target state="translated">&amp;lt;のシーケンスから</target>
        </trans-unit>
        <trans-unit id="df46413f7f4a5b9afba020897df1c289f4be82fa" translate="yes" xml:space="preserve">
          <source>From the sequence of &lt;var&gt;identifier-1&lt;/var&gt; data items specified on the &lt;code&gt;INITIALIZE&lt;/code&gt; statement, a list of initialized fields referred to as the</source>
          <target state="translated">&lt;code&gt;INITIALIZE&lt;/code&gt; ステートメントで指定された &lt;var&gt;identifier-1&lt;/var&gt; データ項目のシーケンスから、初期化されたフィールドのリストは、</target>
        </trans-unit>
        <trans-unit id="ffd07c1bac910139b31da58ed3629443089db490" translate="yes" xml:space="preserve">
          <source>Full awareness of where the &quot;pen&quot; is about to &quot;write&quot; on the current page, automatically forcing an eject to a new page, along with the automatic generation of a page footer to close the old page and/or a page header to begin the new one.</source>
          <target state="translated">ペン」が現在のページのどこに「書こうとしているか」を完全に認識し、古いページを閉じるためのページフッターや新しいページを始めるためのページヘッダーの自動生成とともに、新しいページへのイジェクトを自動的に強制的に行います。</target>
        </trans-unit>
        <trans-unit id="b45a6d9d6000937f47f8b7fba24889e8e6116874" translate="yes" xml:space="preserve">
          <source>Full awareness of where the &amp;ldquo;pen&amp;rdquo; is about to &amp;ldquo;write&amp;rdquo; on the current page, automatically forcing an eject to a new page, along with the automatic generation of a page footer to close the old page and/or a page header to begin the new one.</source>
          <target state="translated">「ペン」が現在のページのどこに「書き込む」かを完全に認識し、新しいページへのイジェクトを自動的に強制し、古いページを閉じるためのページフッターや開始するページヘッダーを自動生成します。新しい物。</target>
        </trans-unit>
        <trans-unit id="3a8b63681a5465651b7dd860e482efb9e8de5eee" translate="yes" xml:space="preserve">
          <source>Full-line comments</source>
          <target state="translated">フルラインコメント</target>
        </trans-unit>
        <trans-unit id="a21a4b632492cfc3397cd22cf7495b9aac4c3cd0" translate="yes" xml:space="preserve">
          <source>Full-line comments with form-feed</source>
          <target state="translated">フォームフィードによる全行コメント</target>
        </trans-unit>
        <trans-unit id="a09ae3cf11bf198bd67625dda3216ea87527262f" translate="yes" xml:space="preserve">
          <source>Function argument error</source>
          <target state="translated">関数引数エラー</target>
        </trans-unit>
        <trans-unit id="a36a6718f54524d846894fb04b5b885b4e43e63b" translate="yes" xml:space="preserve">
          <source>G</source>
          <target state="translated">G</target>
        </trans-unit>
        <trans-unit id="fe94fb61bab790759d07739129a3829c99d0ddcc" translate="yes" xml:space="preserve">
          <source>GENERATE Syntax</source>
          <target state="translated">GENERATE 構文</target>
        </trans-unit>
        <trans-unit id="ce7e9bdff283283e8c751261303522d7a587ceec" translate="yes" xml:space="preserve">
          <source>GENERATE, GET, GIVING, GLOBAL, GO, GOBACK, GREATER, GRID, GROUP, GROUP-USAGE</source>
          <target state="translated">GENERATE,GET,GIVING,GLOBAL,GO,GOBACK,GREATER,GRID,GROUP,GROUP-USAGE</target>
        </trans-unit>
        <trans-unit id="ce40a1df1f0f92cc5772759de30fb76faa874571" translate="yes" xml:space="preserve">
          <source>GENERATE, GET, GIVING, GLOBAL, GOBACK, GO-BACK, GO-FORWARD, GO-HOME, GO-SEARCH, GO, GRAPHICAL, GREATER, GRID, GROUP-USAGE, GROUP-VALUE, GROUP</source>
          <target state="translated">ジェネレート、GET、GIVING、GLOBAL、GOBACK、GO-BACK、GO-FORWARD、GO-HOME、GO-SEARCH、GO、GRAPHICAL、GREATER、GRID、GROUP-USAGE、GROUP-VALUE、GROUP-VALUE</target>
        </trans-unit>
        <trans-unit id="3f77fc06eaeeaf7f12de14c907a75f7348ac4dc4" translate="yes" xml:space="preserve">
          <source>GLOBAL Attribute Syntax</source>
          <target state="translated">GLOBAL 属性構文</target>
        </trans-unit>
        <trans-unit id="de1cb4189a6066e305ef5c9f7a84a37a249dad4c" translate="yes" xml:space="preserve">
          <source>GO TO DEPENDING ON</source>
          <target state="translated">依存するに行く</target>
        </trans-unit>
        <trans-unit id="be6aeb1acd05ec878a2af6fecff181b13e85aa9a" translate="yes" xml:space="preserve">
          <source>GO TO DEPENDING ON Syntax</source>
          <target state="translated">構文に依存するに移動します。</target>
        </trans-unit>
        <trans-unit id="64f22d3218b9eaee10fe86a76b0f4f7308747bfe" translate="yes" xml:space="preserve">
          <source>GOBACK Syntax</source>
          <target state="translated">GOBACK構文</target>
        </trans-unit>
        <trans-unit id="508368112dc00f3cf1200af84f7e4f2f7a3b1cbd" translate="yes" xml:space="preserve">
          <source>GROUP-INDICATE Attribute Syntax</source>
          <target state="translated">GROUP-INDICATE 属性構文</target>
        </trans-unit>
        <trans-unit id="c9af09d3388e8d49bb54cf04c1c03cad69919dbf" translate="yes" xml:space="preserve">
          <source>Generally, these routines are intended to match those available in Micro Focus COBOL, ACUCOBOL and directly for GnuCOBOL.</source>
          <target state="translated">一般的に、これらのルーチンは、Micro Focus COBOL、ACUCOBOL、およびGnuCOBOL用に直接利用可能なものと一致するように意図されている。</target>
        </trans-unit>
        <trans-unit id="9d41e5d8aa938481797b811e06ef4d213ca2b12d" translate="yes" xml:space="preserve">
          <source>Generic terms representing user-defined substitutable items will be shown entirely in lower-case in syntax diagrams. When such items are referenced in text, they will appear as &amp;lt;</source>
          <target state="translated">ユーザー定義の置換可能な項目を表す一般的な用語は、構文図では完全に小文字で表示されます。このようなアイテムがテキストで参照されている場合、&amp;lt;として表示されます</target>
        </trans-unit>
        <trans-unit id="39e33c54ed774d897c1886a402826062bfaee877" translate="yes" xml:space="preserve">
          <source>Generic terms representing user-defined substitutable items will be shown entirely in lower-case in syntax diagrams. When such items are referenced in text, they will appear as &lt;var&gt;substitutable-items&lt;/var&gt;.</source>
          <target state="translated">ユーザー定義の置換可能な項目を表す一般的な用語は、構文図では完全に小文字で示されます。このようなアイテムがテキストで参照されている場合、それらは &lt;var&gt;substitutable-items&lt;/var&gt; として表示されます。</target>
        </trans-unit>
        <trans-unit id="a9457bdd27c6a3d78025d6c377d1adcbbc659a08" translate="yes" xml:space="preserve">
          <source>Getting file information (size and last-modification date/time)</source>
          <target state="translated">ファイル情報(サイズと最終修正日時)の取得</target>
        </trans-unit>
        <trans-unit id="75e08852c633c9bcebe7ab91746503bd91ff4946" translate="yes" xml:space="preserve">
          <source>Getting the length (in bytes) of an argument passed to a subroutine</source>
          <target state="translated">サブルーチンに渡された引数の長さ(バイト数)を取得します。</target>
        </trans-unit>
        <trans-unit id="838fcc5009c91a67ccafcd3d8a98dceb9843f0c5" translate="yes" xml:space="preserve">
          <source>Giving a table an initial, compile-time value is one of the trickier aspects of COBOL data definition. There are basically three standard techniques and a fourth that people familiar with other COBOL implementations but new to GnuCOBOL may find interesting. So, here are the three</source>
          <target state="translated">テーブルにコンパイル時の初期値を与えることは、COBOLデータ定義の厄介な側面の一つである。基本的には、3つの標準的な技術と、他のCOBOL実装には慣れているがGnuCOBOLには慣れていない人が興味を持つかもしれない4つ目の技術がある。以下に3つの技術を紹介する。</target>
        </trans-unit>
        <trans-unit id="dacd5d80181f68a262558fbeed5d04078293a6de" translate="yes" xml:space="preserve">
          <source>GnuCOBOL</source>
          <target state="translated">GnuCOBOL</target>
        </trans-unit>
        <trans-unit id="0f9a00d4af4500b63568bfe0a468268ec41fa076" translate="yes" xml:space="preserve">
          <source>GnuCOBOL Programmer&amp;rsquo;s Guide</source>
          <target state="translated">GnuCOBOLプログラマーズガイド</target>
        </trans-unit>
        <trans-unit id="081f0e8a59ba2bfacc1ba96aeec3dec3e6c1b941" translate="yes" xml:space="preserve">
          <source>GnuCOBOL Quick Reference</source>
          <target state="translated">GnuCOBOLクイックリファレンス</target>
        </trans-unit>
        <trans-unit id="b879a384bcf6b18e0b722cf0970e253d133c9742" translate="yes" xml:space="preserve">
          <source>GnuCOBOL Sample Programs</source>
          <target state="translated">GnuCOBOLサンプルプログラム</target>
        </trans-unit>
        <trans-unit id="2015e1c594285c68a45a46a4c1c754031a21ab4b" translate="yes" xml:space="preserve">
          <source>GnuCOBOL always behaves as if the &lt;code&gt;WITH DUPLICATES IN ORDER&lt;/code&gt; clause is specified, even if it isn&amp;rsquo;t.</source>
          <target state="translated">GnuCOBOLは、 &lt;code&gt;WITH DUPLICATES IN ORDER&lt;/code&gt; 句が指定されていない場合でも、指定されているかのように常に動作します。</target>
        </trans-unit>
        <trans-unit id="e9fc1fe76cf391a32dad55a122f4e0a0353992f7" translate="yes" xml:space="preserve">
          <source>GnuCOBOL always behaves as if the&lt;code&gt;WITH DUPLICATES IN ORDER&lt;/code&gt;clause is specified, even if it isn&amp;rsquo;t.</source>
          <target state="translated">GnuCOBOLは、 &lt;code&gt;WITH DUPLICATES IN ORDER&lt;/code&gt; 句が指定されていなくても、常に指定されているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="7ad04b4d1ad6af7bea77754b5641545c0ecdeb13" translate="yes" xml:space="preserve">
          <source>GnuCOBOL considers  &lt;code&gt;ASCII&lt;/code&gt;,  &lt;code&gt;STANDARD-1&lt;/code&gt; and  &lt;code&gt;STANDARD-2&lt;/code&gt; to be interchangeable.</source>
          <target state="translated">GnuCOBOLは、 &lt;code&gt;ASCII&lt;/code&gt; 、 &lt;code&gt;STANDARD-1&lt;/code&gt; 、および &lt;code&gt;STANDARD-2&lt;/code&gt; を交換可能と 見なし ます。</target>
        </trans-unit>
        <trans-unit id="9e90bf626298379ff7d3f8b411b399e5608f6660" translate="yes" xml:space="preserve">
          <source>GnuCOBOL considers&lt;code&gt;ASCII&lt;/code&gt;</source>
          <target state="translated">GnuCOBOLは &lt;code&gt;ASCII&lt;/code&gt; を考慮します</target>
        </trans-unit>
        <trans-unit id="c9a66a6ceb8182d84df581737874a3597f8a4882" translate="yes" xml:space="preserve">
          <source>GnuCOBOL controls concurrent-file access at the highest level through the concept of file sharing, enforced when a program attempts to open a file. This is accomplished via a UNIX operating-system routine called &lt;code&gt;fcntl&lt;/code&gt;. That module is not currently supported by Windows and is not present in the MinGW Unix-emulation package. GnuCOBOL builds created using a MinGW environment will be incapable of supporting file-sharing controls &amp;mdash; files will always be shared in such environments. A GnuCOBOL build created using the Cygwin environment on Windows</source>
          <target state="translated">GnuCOBOLは、プログラムがファイルを開こうとしたときに適用されるファイル共有の概念を通じて、最高レベルで同時ファイルアクセスを制御します。これは、 &lt;code&gt;fcntl&lt;/code&gt; と呼ばれるUNIXオペレーティングシステムルーチンを介して実行されます。そのモジュールは現在Windowsでサポートされておらず、MinGWUnixエミュレーションパッケージには含まれていません。 MinGW環境を使用して作成されたGnuCOBOLビルドは、ファイル共有コントロールをサポートできなくなります。ファイルは常にそのような環境で共有されます。 Windows上のCygwin環境を使用して作成されたGnuCOBOLビルド</target>
        </trans-unit>
        <trans-unit id="a42d16409222bdca47c6d18f713049cd4e48dfe5" translate="yes" xml:space="preserve">
          <source>GnuCOBOL data items, like those of other COBOL implementations, are described in a hierarchical manner. This accommodates the fact that data items frequently need to be able to be broken up into subordinate items. Take for example, the following logical layout of a portion of a data item named &lt;code&gt;Employee&lt;/code&gt;:</source>
          <target state="translated">GnuCOBOLデータ項目は、他のCOBOL実装のデータ項目と同様に、階層的に記述されます。これは、データ項目を下位項目に分割できる必要があることが多いという事実に対応しています。たとえば、 &lt;code&gt;Employee&lt;/code&gt; という名前のデータ項目の一部の次の論理レイアウトを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="000801f5dd39b155259c54a804c2b16d6f375132" translate="yes" xml:space="preserve">
          <source>GnuCOBOL defines &lt;em&gt;compilation variables&lt;/em&gt; when various conditions are true. If the condition associated with a variable is false, the variable is not defined.</source>
          <target state="translated">GnuCOBOLは、さまざまな条件が真の場合に&lt;em&gt;コンパイル変数を&lt;/em&gt;定義します。変数に関連付けられた条件がfalseの場合、変数は定義されていません。</target>
        </trans-unit>
        <trans-unit id="ade20b6aef56cd0ff2aed2427da9159fa14af39b" translate="yes" xml:space="preserve">
          <source>GnuCOBOL defines compilation variables when certain conditions are true.</source>
          <target state="translated">GnuCOBOLでは、特定の条件が真の場合のコンパイル変数を定義しています。</target>
        </trans-unit>
        <trans-unit id="ce92bb9f1fd0286db331c868da0f7ad81d39837c" translate="yes" xml:space="preserve">
          <source>GnuCOBOL fully supports much of the ANSI 85 standard for COBOL (the only major exclusion is the Communications Module) and also supports some of the components of the COBOL2002 and COBOL2014 standards, such as the &lt;code&gt;SCREEN SECTION&lt;/code&gt; (see &lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTION&lt;/a&gt;), table-based &lt;code&gt;SORT&lt;/code&gt; (see &lt;a href=&quot;#Table-SORT&quot;&gt;Table SORT&lt;/a&gt;) and user-defined functions. There are others with more being added almost weekly.</source>
          <target state="translated">GnuCOBOLは、COBOLのANSI 85標準の多くを完全にサポートし（唯一の主要な除外は通信モジュールです）、 &lt;code&gt;SCREEN SECTION&lt;/code&gt; （&lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTIONを&lt;/a&gt;参照）、テーブルベースの &lt;code&gt;SORT&lt;/code&gt; などのCOBOL2002およびCOBOL2014標準のコンポーネントの一部もサポートします。（&lt;a href=&quot;#Table-SORT&quot;&gt;表SORTを&lt;/a&gt;参照）およびユーザー定義関数。ほぼ毎週追加されるものもあります。</target>
        </trans-unit>
        <trans-unit id="12cf00b4626858f857b18dd724c1c9875f678c7e" translate="yes" xml:space="preserve">
          <source>GnuCOBOL fully supports much of the ANSI 85 standard for COBOL (the only major exclusion is the Communications Module) and also supports some of the components of the COBOL2002 standard, such as the&lt;code&gt;SCREEN SECTION&lt;/code&gt;(see &lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTION&lt;/a&gt;), table-based&lt;code&gt;SORT&lt;/code&gt;(see &lt;a href=&quot;#Table-SORT&quot;&gt;Table SORT&lt;/a&gt;) and user-defined functions.</source>
          <target state="translated">GnuCOBOLは、COBOLのANSI 85標準の大部分を完全にサポートし（唯一の主要な除外は通信モジュールです）、 &lt;code&gt;SCREEN SECTION&lt;/code&gt; （&lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTIONを&lt;/a&gt;参照）、テーブルベースの &lt;code&gt;SORT&lt;/code&gt; （&lt;a href=&quot;#Table-SORT&quot;&gt;テーブルSORT&lt;/a&gt;）とユーザー定義関数。</target>
        </trans-unit>
        <trans-unit id="97e9d0710dd9b847b88301b5ded4630f6ebd6cf5" translate="yes" xml:space="preserve">
          <source>GnuCOBOL has also been built as a truly native Windows application utilizing Microsoft&amp;rsquo;s freely-downloadable Visual Studio Express package to provide the C compiler and linker/loader. This approach does not lend itself well to a &quot;portable&quot; distribution.</source>
          <target state="translated">GnuCOBOLは、Microsoftが無料でダウンロードできるVisual Studio Expressパッケージを利用してCコンパイラとリンカー/ローダーを提供する真にネイティブなWindowsアプリケーションとしても構築されています。このアプローチは、「ポータブル」ディストリビューションには適していません。</target>
        </trans-unit>
        <trans-unit id="989809682a477dc64a331b0aedc581e943030842" translate="yes" xml:space="preserve">
          <source>GnuCOBOL has also been built as a truly native Windows application utilizing Microsoft&amp;rsquo;s freely-downloadable Visual Studio Express package to provide the C compiler and linker/loader. This approach does not lend itself well to a &amp;ldquo;portable&amp;rdquo; distribution.</source>
          <target state="translated">GnuCOBOLは、Microsoftの無料でダウンロード可能なVisual Studio Expressパッケージを利用して、Cコンパイラとリンカー/ローダーを提供する真のネイティブWindowsアプリケーションとしても構築されています。このアプローチは、「ポータブル」ディストリビューションには適していません。</target>
        </trans-unit>
        <trans-unit id="7ec4d6f9297d331838c7e1bc3be7fcca33c892c1" translate="yes" xml:space="preserve">
          <source>GnuCOBOL includes an implementation of the Report Writer Control System, or RWCS. The reportwriter module is now fully implemented as of version 3.0. This is a standardized, optional add-on feature to the COBOL language which automates much of the mechanics involved in the generation of printed reports by:</source>
          <target state="translated">GnuCOBOLには、レポートライタ制御システム(RWCS)の実装が含まれています。レポート・ライター・モジュールは、バージョン3.0で完全に実装されている。これは、COBOL言語への標準化されたオプションのアドオン機能であり、これにより、印刷されたレポートの生成に関わるメカニズムの多くを自動化する。</target>
        </trans-unit>
        <trans-unit id="748dc4c0de13fcba44056b388d77f85eed18ba64" translate="yes" xml:space="preserve">
          <source>GnuCOBOL is a free and open sourced COBOL compiler and runtime environment, written using the C programming language. GnuCOBOL is typically distributed in source-code form, and must then be built for your computer&amp;rsquo;s operating system using the system&amp;rsquo;s C compiler and loader. While originally developed for the UNIX and Linux operating systems, GnuCOBOL has also been successfully built for computers running OSX and Windows utilizing the UNIX-emulation features of such tools as Cygwin and MinGW. Also see the &lt;a href=&quot;https://savannah.gnu.org/projects/gnucobol&quot;&gt;GNU website&lt;/a&gt; for more information at.</source>
          <target state="translated">GnuCOBOLは、Cプログラミング言語を使用して記述された、無料のオープンソースのCOBOLコンパイラおよびランタイム環境です。 GnuCOBOLは通常、ソースコード形式で配布され、システムのCコンパイラとローダーを使用してコンピュータのオペレーティングシステム用にビルドする必要があります。 GnuCOBOLは、もともとUNIXおよびLinuxオペレーティングシステム用に開発されましたが、CygwinやMinGWなどのツールのUNIXエミュレーション機能を利用してOSXおよびWindowsを実行しているコンピューター用にも正常に構築されています。詳細については、&lt;a href=&quot;https://savannah.gnu.org/projects/gnucobol&quot;&gt;GNUのWebサイト&lt;/a&gt;も参照してください。</target>
        </trans-unit>
        <trans-unit id="fe0e58c1b50f38b5d5939b86c78fc28f3f84cd98" translate="yes" xml:space="preserve">
          <source>GnuCOBOL is compiling the source unit.</source>
          <target state="translated">GnuCOBOLはソースユニットをコンパイルしています。</target>
        </trans-unit>
        <trans-unit id="6ec33f04258b5a5ce00f804f3a7f12afecaa7b22" translate="yes" xml:space="preserve">
          <source>GnuCOBOL programs compiled with the</source>
          <target state="translated">でコンパイルされた GnuCOBOL プログラム</target>
        </trans-unit>
        <trans-unit id="763499a319b22b6d28fecd96e5e4577d44422e38" translate="yes" xml:space="preserve">
          <source>GnuCOBOL programs compiled with the&lt;code&gt;-x&lt;/code&gt;switch</source>
          <target state="translated">&lt;code&gt;-x&lt;/code&gt; スイッチでコンパイルされたGnuCOBOLプログラム</target>
        </trans-unit>
        <trans-unit id="093449c074389871b78ba91d90fbe11fdc681ce0" translate="yes" xml:space="preserve">
          <source>GnuCOBOL provides for control over the final rounding process applied to the receiving fields on all arithmetic verbs. Each of the arithmetic statements (&lt;code&gt;ADD&lt;/code&gt; (see &lt;a href=&quot;#ADD&quot;&gt;ADD&lt;/a&gt;), &lt;code&gt;COMPUTE&lt;/code&gt; (see &lt;a href=&quot;#COMPUTE&quot;&gt;COMPUTE&lt;/a&gt;), &lt;code&gt;DIVIDE&lt;/code&gt; (see &lt;a href=&quot;#DIVIDE&quot;&gt;DIVIDE&lt;/a&gt;), &lt;code&gt;MULTIPLY&lt;/code&gt; (see &lt;a href=&quot;#MULTIPLY&quot;&gt;MULTIPLY&lt;/a&gt;) and &lt;code&gt;SUBTRACT&lt;/code&gt; (see &lt;a href=&quot;#SUBTRACT&quot;&gt;SUBTRACT&lt;/a&gt;)) statements allow an optional &lt;code&gt;ROUNDED&lt;/code&gt; clause to be applied to each receiving data item.</source>
          <target state="translated">GnuCOBOLは、すべての算術動詞の受信フィールドに適用される最終的な丸めプロセスを制御します。算術文（各 &lt;code&gt;ADD&lt;/code&gt; （参照&lt;a href=&quot;#ADD&quot;&gt;ADDを&lt;/a&gt;）、 &lt;code&gt;COMPUTE&lt;/code&gt; （参照&lt;a href=&quot;#COMPUTE&quot;&gt;COMPUTEを&lt;/a&gt;）、 &lt;code&gt;DIVIDE&lt;/code&gt; （参照&lt;a href=&quot;#DIVIDE&quot;&gt;除算&lt;/a&gt;）、 &lt;code&gt;MULTIPLY&lt;/code&gt; （参照&lt;a href=&quot;#MULTIPLY&quot;&gt;MULTIPLYを&lt;/a&gt;）と &lt;code&gt;SUBTRACT&lt;/code&gt; （参照&lt;a href=&quot;#SUBTRACT&quot;&gt;SUBTRACTを&lt;/a&gt;文は任意可能）） &lt;code&gt;ROUNDED&lt;/code&gt; 句は各受信データ項目に適用されます。</target>
        </trans-unit>
        <trans-unit id="a9cf477a6985387b61c2ac288aa91a195ba51db5" translate="yes" xml:space="preserve">
          <source>GnuCOBOL run-time screen management must have been initialized prior to CALLing this routine in order to receive meaningful values. This means that a &lt;code&gt;DISPLAY screen-data-item&lt;/code&gt; statement (see &lt;a href=&quot;#DISPLAY-screen_002ddata_002ditem&quot;&gt;DISPLAY screen-data-item&lt;/a&gt;) or a &lt;code&gt;ACCEPT screen-data-item&lt;/code&gt; statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) must have been executed prior to executing the &lt;code&gt;CALL&lt;/code&gt; statement.</source>
          <target state="translated">意味のある値を受け取るには、このルーチンを呼び出す前に、GnuCOBOLランタイム画面管理を初期化しておく必要があります。つまり、 &lt;code&gt;CALL&lt;/code&gt; ステートメントを実行する前に、 &lt;code&gt;DISPLAY screen-data-item&lt;/code&gt; ステートメント（&lt;a href=&quot;#DISPLAY-screen_002ddata_002ditem&quot;&gt;DISPLAY screen-data-itemを&lt;/a&gt;参照）または &lt;code&gt;ACCEPT screen-data-item&lt;/code&gt; ステートメント（&lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-itemを&lt;/a&gt;参照）が実行されている必要があります。</target>
        </trans-unit>
        <trans-unit id="20252ad5ff4fe084533d45067eda2369ad4e5568" translate="yes" xml:space="preserve">
          <source>GnuCOBOL run-time screen management must have been initialized prior to CALLing this routine in order to receive meaningful values. This means that a&lt;code&gt;DISPLAY screen-data-item&lt;/code&gt;statement (see &lt;a href=&quot;#DISPLAY-screen_002ddata_002ditem&quot;&gt;DISPLAY screen-data-item&lt;/a&gt;) or a&lt;code&gt;ACCEPT screen-data-item&lt;/code&gt;statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) must have been executed prior to executing the&lt;code&gt;CALL&lt;/code&gt;statement.</source>
          <target state="translated">意味のある値を受け取るには、このルーチンを呼び出す前にGnuCOBOLランタイム画面管理を初期化しておく必要があります。つまり、 &lt;code&gt;CALL&lt;/code&gt; ステートメントを実行する前に、 &lt;code&gt;DISPLAY screen-data-item&lt;/code&gt; ステートメント（&lt;a href=&quot;#DISPLAY-screen_002ddata_002ditem&quot;&gt;DISPLAY screen-data-itemを&lt;/a&gt;参照）または &lt;code&gt;ACCEPT screen-data-item&lt;/code&gt; ステートメント（&lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-itemを&lt;/a&gt;参照）を実行しておく必要があります。</target>
        </trans-unit>
        <trans-unit id="b10af487d74e250e882604b1bf9bb79ff41e00cf" translate="yes" xml:space="preserve">
          <source>GnuCOBOL stores &lt;code&gt;FLOAT-DECIMAL-16&lt;/code&gt; and &lt;code&gt;FLOAT-DECIMAL-34&lt;/code&gt; data items using either Big-Endian or Little-Endian form, whichever is native to the system.</source>
          <target state="translated">GnuCOBOLは、システムにネイティブなビッグエンディアン形式またはリトルエンディアン形式のいずれかを使用して、 &lt;code&gt;FLOAT-DECIMAL-16&lt;/code&gt; および &lt;code&gt;FLOAT-DECIMAL-34&lt;/code&gt; データ項目を格納します。</target>
        </trans-unit>
        <trans-unit id="577f54cb6512af8b81a61cc8247c3cb8a51134a5" translate="yes" xml:space="preserve">
          <source>GnuCOBOL stores &lt;code&gt;FLOAT-LONG&lt;/code&gt; and &lt;code&gt;FLOAT-SHORT&lt;/code&gt; data items using either Big-Endian or Little-Endian form, whichever is native to the system.</source>
          <target state="translated">GnuCOBOLは、ビッグエンディアンまたはリトルエンディアンのいずれかネイティブの形式を使用して、 &lt;code&gt;FLOAT-LONG&lt;/code&gt; および &lt;code&gt;FLOAT-SHORT&lt;/code&gt; データ項目を格納します。</target>
        </trans-unit>
        <trans-unit id="bca9afd1bdb28fa197bd33fb7a24153cdc7c56b4" translate="yes" xml:space="preserve">
          <source>GnuCOBOL stores&lt;code&gt;FLOAT-DECIMAL-16&lt;/code&gt;and&lt;code&gt;FLOAT-DECIMAL-34&lt;/code&gt;data items using either Big-Endian or Little-Endian form, whichever is native to the system.</source>
          <target state="translated">GnuCOBOLは、ビッグエンディアン形式またはリトルエンディアン形式のいずれかを使用して、システムにネイティブな &lt;code&gt;FLOAT-DECIMAL-16&lt;/code&gt; および &lt;code&gt;FLOAT-DECIMAL-34&lt;/code&gt; データ項目を格納します。</target>
        </trans-unit>
        <trans-unit id="3b9f975d574fd7cc4ea7de4b02075b1a7eaf9bfc" translate="yes" xml:space="preserve">
          <source>GnuCOBOL stores&lt;code&gt;FLOAT-LONG&lt;/code&gt;and&lt;code&gt;FLOAT-SHORT&lt;/code&gt;data items using either Big-Endian or Little-Endian form, whichever is native to the system.</source>
          <target state="translated">GnuCOBOLは、 &lt;code&gt;FLOAT-LONG&lt;/code&gt; および &lt;code&gt;FLOAT-SHORT&lt;/code&gt; データ項目を、ビッグエンディアン形式またはリトルエンディアン形式のいずれかを使用して、システムにネイティブに格納します。</target>
        </trans-unit>
        <trans-unit id="6ab3cffbe92c165a46df6ca158ad1c4a6a0c158c" translate="yes" xml:space="preserve">
          <source>GnuCOBOL subprograms may be created as either static or dynamic subprograms, as desired by the programmer.</source>
          <target state="translated">GnuCOBOLサブプログラムは、プログラマが望むように、静的サブプログラムまたは動的サブプログラムとして作成することができます。</target>
        </trans-unit>
        <trans-unit id="90caf4fdcad7d8990c1ca4da35e29871f7d9e6ce" translate="yes" xml:space="preserve">
          <source>GnuCOBOL supports a wide variety of &amp;ldquo;intrinsic functions&amp;rdquo; that may be used anywhere in the PROCEDURE DIVISION where a literal is allowed. For example:</source>
          <target state="translated">GnuCOBOLは、リテラルが許可されているPROCEDUREDIVISIONのどこでも使用できるさまざまな「組み込み関数」をサポートしています。例えば：</target>
        </trans-unit>
        <trans-unit id="5d2f811d109dc8d5b31442b8bf34dfb7a89f84e4" translate="yes" xml:space="preserve">
          <source>GnuCOBOL supports the following visual attribute specifications in the &lt;code&gt;SCREEN SECTION&lt;/code&gt; (see &lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTION&lt;/a&gt;):</source>
          <target state="translated">GnuCOBOLは、 &lt;code&gt;SCREEN SECTION&lt;/code&gt; で次のビジュアル属性仕様をサポートします（&lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTIONを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="183088592eb0fa2ad8ba5f34425e030453ebfcc8" translate="yes" xml:space="preserve">
          <source>GnuCOBOL supports the following visual attribute specifications in the&lt;code&gt;SCREEN SECTION&lt;/code&gt;(see &lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTION&lt;/a&gt;):</source>
          <target state="translated">GnuCOBOLは、 &lt;code&gt;SCREEN SECTION&lt;/code&gt; （&lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTIONを&lt;/a&gt;参照）で次の視覚属性仕様をサポートしています。</target>
        </trans-unit>
        <trans-unit id="4323e46dfc1114d37bb106302840110ba00746d3" translate="yes" xml:space="preserve">
          <source>GnuCOBOL uses compiler configuration files to define various options that will control the compilation process. These configuration files are specified using the</source>
          <target state="translated">GnuCOBOLは、コンパイルプロセスを制御する様々なオプションを定義するために、コンパイラー設定ファイルを使用します。これらの設定ファイルは</target>
        </trans-unit>
        <trans-unit id="6684809df42a659397430ece5dce09f5dd77386c" translate="yes" xml:space="preserve">
          <source>GnuCOBOL uses compiler configuration files to define various options that will control the compilation process. These configuration files are specified using the&lt;code&gt;-conf&lt;/code&gt;switch</source>
          <target state="translated">GnuCOBOLは、コンパイラー構成ファイルを使用して、コンパイルプロセスを制御するさまざまなオプションを定義します。これらの構成ファイルは &lt;code&gt;-conf&lt;/code&gt; スイッチを使用して指定されます</target>
        </trans-unit>
        <trans-unit id="0825d5ebac283b0d7888040222d108fb9bbc2f52" translate="yes" xml:space="preserve">
          <source>GnuCOBOL, like other COBOL dialects, includes a number of data items that are automatically available to a programmer without the need to actually define them in the data division. COBOL refers to such items as registers or special registers. The special registers available to a GnuCOBOL program are as follows:</source>
          <target state="translated">GnuCOBOLは、他のCOBOL方言と同様に、データ分割で実際に定義しなくてもプログラマが自動的に利用できるデータ項目を多数含んでいる。COBOLでは、そのような項目をレジスタまたは特殊レジスタと呼ぶ。GnuCOBOLプログラムで利用可能な特殊レジスタは、以下の通りである。</target>
        </trans-unit>
        <trans-unit id="3bd06fc3f53a54465c3ccaa768b1a3b1875dd413" translate="yes" xml:space="preserve">
          <source>GnuCOBOL, like other COBOL implementations, supports a number of reserved words that may be used to represent a specific literal value. These are known as figurative constants. See &lt;a href=&quot;#Figurative-Constants&quot;&gt;Figurative Constants&lt;/a&gt;, for more information.</source>
          <target state="translated">GnuCOBOLは、他のCOBOL実装と同様に、特定のリテラル値を表すために使用できるいくつかの予約語をサポートしています。これらは表意定数として知られています。詳細については、&lt;a href=&quot;#Figurative-Constants&quot;&gt;表意定数を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="e2bb4d252c23fe267cb78311b78a5c392a8eb567" translate="yes" xml:space="preserve">
          <source>Good programmers have &amp;mdash; for decades &amp;mdash; maintained their own skeleton &quot;template&quot; programs for a variety of program types; simply load a template into a text editor and you&amp;rsquo;ve got a good start to the program&amp;hellip;</source>
          <target state="translated">優れたプログラマーは、何十年もの間、さまざまなプログラムタイプ用の独自のスケルトン「テンプレート」プログラムを維持してきました。テンプレートをテキストエディタにロードするだけで、プログラムを開始できます&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="79b4a37e7986f285a68bde2a7f6753b7d96b28bf" translate="yes" xml:space="preserve">
          <source>Good programmers have &amp;mdash; for decades &amp;mdash; maintained their own skeleton &amp;ldquo;template&amp;rdquo; programs for a variety of program types; simply load a template into a text editor and you&amp;rsquo;ve got a good start to the program&amp;hellip;</source>
          <target state="translated">優れたプログラマーは、何十年もの間、さまざまなプログラムタイプ用に独自のスケルトン「テンプレート」プログラムを維持してきました。テンプレートをテキストエディタにロードするだけで、プログラムを開始できます&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="7bb1297cd4586126018027c7f1e1612420c22c4d" translate="yes" xml:space="preserve">
          <source>Green: COB-COLOR-GREEN</source>
          <target state="translated">グリーンです。COB-COLOR-GREEN</target>
        </trans-unit>
        <trans-unit id="7c42686edc5c14ca17081cedfebfa14c924ebc58" translate="yes" xml:space="preserve">
          <source>Group Item</source>
          <target state="translated">グループ項目</target>
        </trans-unit>
        <trans-unit id="df7d4a9ed92798538291678b66f3ab2363cff6fa" translate="yes" xml:space="preserve">
          <source>Group Item &amp;mdash; A group item in which debugging information generated by a &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; section in the declaratives area of the procedure division will place information documenting why the &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; procedure was invoked. Consult the &lt;code&gt;DECLARATIVES&lt;/code&gt; (see &lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVES&lt;/a&gt;) documentation for information on the structure of this register.</source>
          <target state="translated">グループ項目&amp;mdash;プロシージャ部門の宣言領域の &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; セクションによって生成されたデバッグ情報が、 &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; プロシージャが呼び出された理由を文書化した情報を配置するグループ項目。相談する &lt;code&gt;DECLARATIVES&lt;/code&gt; （参照&lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVESを&lt;/a&gt;このレジスタの構造に関する情報のため）のドキュメントを。</target>
        </trans-unit>
        <trans-unit id="abf442e977221f7e251a5aee4a674647ed69f44a" translate="yes" xml:space="preserve">
          <source>Group Item &amp;mdash; A group item in which debugging information generated by a&lt;code&gt;USE FOR DEBUGGING&lt;/code&gt;section in the declaratives area of the procedure division will place information documenting why the&lt;code&gt;USE FOR DEBUGGING&lt;/code&gt;procedure was invoked. Consult the&lt;code&gt;DECLARATIVES&lt;/code&gt;(see &lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVES&lt;/a&gt;) documentation for information on the structure of this register.</source>
          <target state="translated">グループアイテム&amp;mdash; 手続き部の宣言領域の &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; セクションによって生成されたデバッグ情報が、 &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; プロシージャが呼び出された理由を文書化する情報を配置するグループアイテム。相談する &lt;code&gt;DECLARATIVES&lt;/code&gt; （参照&lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVESを&lt;/a&gt;このレジスタの構造に関する情報のため）のドキュメントを。</target>
        </trans-unit>
        <trans-unit id="31b43f990792fb2f0f7720e964fcf810fe794cb0" translate="yes" xml:space="preserve">
          <source>Group items (those without  &lt;code&gt;PICTURE&lt;/code&gt; clauses) are frequently used to describe entire lines of a report, while elementary items (those with a picture clause) are frequently used to describe specific fields of information on the report. When this coding convention is being used, group items will have &lt;code&gt;LINE&lt;/code&gt; (see &lt;a href=&quot;#LINE&quot;&gt;LINE&lt;/a&gt;) clauses and no &lt;code&gt;COLUMN&lt;/code&gt; (see &lt;a href=&quot;#COLUMN&quot;&gt;COLUMN&lt;/a&gt;) clauses while elementary items will be specified the other way around.</source>
          <target state="translated">グループアイテム（ &lt;code&gt;PICTURE&lt;/code&gt; 句のないもの ）はレポートの行全体を説明するために頻繁に使用され、基本アイテム（picture句のあるもの）はレポートの特定の情報フィールドを説明するために頻繁に使用されます。このコーディング規則が使用されている場合、グループ項目があります &lt;code&gt;LINE&lt;/code&gt; （参照&lt;a href=&quot;#LINE&quot;&gt;線&lt;/a&gt;）句なし &lt;code&gt;COLUMN&lt;/code&gt; （参照&lt;a href=&quot;#COLUMN&quot;&gt;列を&lt;/a&gt;基本項目は、他の方法の周りに指定されている間）句。</target>
        </trans-unit>
        <trans-unit id="810a65e9b0bdcfef9d822c231c10d01c65b32ddf" translate="yes" xml:space="preserve">
          <source>Group items (those without&lt;code&gt;PICTURE&lt;/code&gt;</source>
          <target state="translated">グループアイテム（ &lt;code&gt;PICTURE&lt;/code&gt; のないもの）</target>
        </trans-unit>
        <trans-unit id="7cf184f4c67ad58283ecb19349720b0cae756829" translate="yes" xml:space="preserve">
          <source>H</source>
          <target state="translated">H</target>
        </trans-unit>
        <trans-unit id="fa57db087f0e8c33baf60078a3ea31594a8db65b" translate="yes" xml:space="preserve">
          <source>HANDLE, HAS-CHILDREN, HEADING-COLOR, HEADING-DIVIDER-COLOR, HEADING-FONT, HEADING, HEAVY, HEIGHT-IN-CELLS, HIDDEN-DATA, HIGH-COLOR, HIGHEST-ALGEBRAIC, HIGHLIGHT, HIGH-VALUES, HIGH-VALUE, HOT-TRACK, HSCROLL-POS, HSCROLL</source>
          <target state="translated">HANDLE,HAS-CHILDREN,HEADING-COLOR,HEADING-DIVIDER-COLOR,HEADING-FONT,HEADING,HEAVY,HEIGHT-IN-CELLS,HIDDEN-DATA,HIGH-COLOR,HIGHEST-ALGEBRAIC,HIGHLIGHT,HIGH-VALUES,HIGH-VALUE,HOT-TRACK,HSCROLL-POS,HSCROLL</target>
        </trans-unit>
        <trans-unit id="89a17ef0f66b4296a009bd40714a7d880bc71878" translate="yes" xml:space="preserve">
          <source>HEADING, HIGHEST-ALGEBRAIC, HIGHLIGHT, HIGH-VALUE, HIGH-VALUES</source>
          <target state="translated">HEADING,HIGHEST-ALGEBRAIC,HIGHLIGHT,HIGH-VALUE,HIGH-VALUES</target>
        </trans-unit>
        <trans-unit id="30cfc7dc90ba24ab43e38507c7e4463f0560ba02" translate="yes" xml:space="preserve">
          <source>HIGHEST-ALGEBRAIC Function Syntax</source>
          <target state="translated">HIGHEST-ALGEBRAIC 関数構文</target>
        </trans-unit>
        <trans-unit id="d60066848e06a51085c8e2354e105347e3c601c8" translate="yes" xml:space="preserve">
          <source>HIGHLIGHT Attribute Syntax</source>
          <target state="translated">HIGHLIGHT 属性構文</target>
        </trans-unit>
        <trans-unit id="020f748f595dbf9466daa5cd4e6bc7d9ede66c6f" translate="yes" xml:space="preserve">
          <source>Had there been at least one space to the left and/or the right of the &lt;code&gt;-&lt;/code&gt;, there would have been no ambiguity &amp;mdash; the compiler would have been forced to use the individual &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; data items.</source>
          <target state="translated">左および/または右の少なくとも一方のスペースがあった &lt;code&gt;-&lt;/code&gt; 、そこにあったであろうがないあいまいさ-コンパイラは、個々の使用を余儀なくされていたであろう &lt;code&gt;C&lt;/code&gt; と &lt;code&gt;D&lt;/code&gt; のデータ項目を。</target>
        </trans-unit>
        <trans-unit id="8c6979d233b84b4e040cc3b6f33204115bd4f223" translate="yes" xml:space="preserve">
          <source>Had there been at least one space to the left and/or the right of the&lt;code&gt;-&lt;/code&gt; there would have been no ambiguity &amp;mdash; the compiler would have been forced to use the individual&lt;code&gt;C&lt;/code&gt;and&lt;code&gt;D&lt;/code&gt;data items.</source>
          <target state="translated">左および/または右の少なくとも一方のスペースがあった &lt;code&gt;-&lt;/code&gt; 何の曖昧さがなかっただろう-コンパイラが個々に使用することを余儀なくされていた &lt;code&gt;C&lt;/code&gt; と &lt;code&gt;D&lt;/code&gt; のデータ項目を。</target>
        </trans-unit>
        <trans-unit id="87a433cf0bc677c32d39cd5b979920082688b536" translate="yes" xml:space="preserve">
          <source>Heading Area</source>
          <target state="translated">見出しエリア</target>
        </trans-unit>
        <trans-unit id="2ac9d02efcfc8c69f3e81956659315a414e9db18" translate="yes" xml:space="preserve">
          <source>Heading Area &amp;mdash; An exception to this is the situation where the report heading report group contains the &lt;code&gt;NEXT GROUP NEXT PAGE&lt;/code&gt; (see &lt;a href=&quot;#NEXT-GROUP&quot;&gt;NEXT GROUP&lt;/a&gt;) option; in those cases, the report heading will be presented on a page by itself (anywhere on that page) at the beginning of the report.</source>
          <target state="translated">見出し領域&amp;mdash;これの例外は、レポート見出しレポートグループに &lt;code&gt;NEXT GROUP NEXT PAGE&lt;/code&gt; （&lt;a href=&quot;#NEXT-GROUP&quot;&gt;次のグループを&lt;/a&gt;参照）オプションが含まれている状況です。そのような場合、レポートの見出しは、レポートの先頭にあるページ自体（そのページの任意の場所）に表示されます。</target>
        </trans-unit>
        <trans-unit id="cbbb9cee65c6576a367576c2ac65ada91311b34f" translate="yes" xml:space="preserve">
          <source>Heading Area &amp;mdash; An exception to this is the situation where the report heading report group contains the&lt;code&gt;NEXT GROUP NEXT PAGE&lt;/code&gt;(see &lt;a href=&quot;#NEXT-GROUP&quot;&gt;NEXT GROUP&lt;/a&gt;) option; in those cases, the report heading will be presented on a page by itself (anywhere on that page) at the beginning of the report.</source>
          <target state="translated">見出し領域&amp;mdash;これの例外は、レポート見出しレポートグループに &lt;code&gt;NEXT GROUP NEXT PAGE&lt;/code&gt; （&lt;a href=&quot;#NEXT-GROUP&quot;&gt;NEXT GROUPを&lt;/a&gt;参照）オプションが含まれている場合です。このような場合、レポートの見出しは、レポートの最初のページ（そのページの任意の場所）に単独で表示されます。</target>
        </trans-unit>
        <trans-unit id="9a3fc3dac7c2610f19172d33b654b99f82029bf8" translate="yes" xml:space="preserve">
          <source>Here are a few examples:</source>
          <target state="translated">いくつかの例をご紹介します。</target>
        </trans-unit>
        <trans-unit id="a58d0be2a26b29065720289affde96b396953bc6" translate="yes" xml:space="preserve">
          <source>Here are some examples of how the precedence of operations affects the results of arithmetic expressions (all examples use numeric literals, to simplify the discussion).</source>
          <target state="translated">ここでは、演算の優先順位が算術式の結果にどのように影響するかについて、いくつかの例を紹介します(議論を簡単にするために、すべての例では数値リテラルを使用しています)。</target>
        </trans-unit>
        <trans-unit id="ce8b7658bf191725329e97e66717da8863c93fce" translate="yes" xml:space="preserve">
          <source>Here are the facts &amp;mdash; draw your own conclusions as to which approach is more appropriate under which circumstances.</source>
          <target state="translated">事実は次のとおりです。どの状況でどのアプローチがより適切であるかについて、独自の結論を導き出します。</target>
        </trans-unit>
        <trans-unit id="71e41b379565b9db9a0898e306e44094c8f202bb" translate="yes" xml:space="preserve">
          <source>Here are the meanings of the three options:</source>
          <target state="translated">3つの選択肢の意味をご紹介します。</target>
        </trans-unit>
        <trans-unit id="53cbe05ea3a4478bf935f4356ab4ff0f5e1c960c" translate="yes" xml:space="preserve">
          <source>Here are the relevant sections of code in a program named</source>
          <target state="translated">という名前のプログラムのコードの関連セクションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="8db79160667581172099438ddb7cbe10fdc25a56" translate="yes" xml:space="preserve">
          <source>Here are the relevant sections of code in a program named &quot;testprog&quot;, which is designed to simply announce if SWITCH-1 is on:</source>
          <target state="translated">ここでは、&quot;testprog &quot;という名前のプログラムの中で、SWITCH-1がオンになっているかどうかを単純にアナウンスするように設計されたコードの関連部分を紹介します。</target>
        </trans-unit>
        <trans-unit id="4806c2364021b8f8145a30057c39a5142245883f" translate="yes" xml:space="preserve">
          <source>Here are the results:</source>
          <target state="translated">その結果をご紹介します。</target>
        </trans-unit>
        <trans-unit id="6bcf44b499d0088da0556d2de36d212cd7d4aaa3" translate="yes" xml:space="preserve">
          <source>Here are the rules about GnuCOBOL dynamically-loadable modules:</source>
          <target state="translated">ここでは、GnuCOBOLで動的にロード可能なモジュールについてのルールを説明します。</target>
        </trans-unit>
        <trans-unit id="d98760fd5f7d0d451fc2f1b70dda01b46952cd2b" translate="yes" xml:space="preserve">
          <source>Here are two different &quot;Hello World&quot; applications &amp;mdash; one written in Java and the second in GnuCOBOL. First, the Java version:</source>
          <target state="translated">2つの異なる「Hello World」アプリケーションがあります。1つはJavaで記述され、もう1つはGnuCOBOLで記述されています。まず、Javaバージョン：</target>
        </trans-unit>
        <trans-unit id="9a7a5c011f0ce663c0dc595e94b546e1a82c50ac" translate="yes" xml:space="preserve">
          <source>Here are two different &amp;ldquo;Hello World&amp;rdquo; applications, one written in Java and the second in GnuCOBOL. First, the Java version:</source>
          <target state="translated">これは2つの異なる「HelloWorld」アプリケーションです。1つはJavaで記述され、もう1つはGnuCOBOLで記述されています。まず、Javaバージョン：</target>
        </trans-unit>
        <trans-unit id="e6bcd662dbb0c6100434bd63900ae3c2799a7347" translate="yes" xml:space="preserve">
          <source>Here are two examples of using &lt;code&gt;cobcrun&lt;/code&gt;. First, on a Unix, OSX or Windows/Cygwin system:</source>
          <target state="translated">&lt;code&gt;cobcrun&lt;/code&gt; の使用例を2つ示します。まず、Unix、OSX、またはWindows / Cygwinシステムでは次のようになります。</target>
        </trans-unit>
        <trans-unit id="2486c63ce113fa9dfa91ee5ea183529c4d50239f" translate="yes" xml:space="preserve">
          <source>Here are two examples of using&lt;code&gt;cobcrun&lt;/code&gt; First, on a Unix, OSX or Windows/Cygwin system:</source>
          <target state="translated">次に、 &lt;code&gt;cobcrun&lt;/code&gt; を使用する2つの例を示します。まず、Unix、OSX、またはWindows / Cygwinシステムでの使用です。</target>
        </trans-unit>
        <trans-unit id="88f0b25a36a42c34f75db34b7878e30378e348fc" translate="yes" xml:space="preserve">
          <source>Here is a sample program that illustrates the EVALUATE statement.</source>
          <target state="translated">EVALUATE文を説明するサンプルプログラムです。</target>
        </trans-unit>
        <trans-unit id="b44351443986b8d6208b8077f937b80d2c5d797f" translate="yes" xml:space="preserve">
          <source>Here is an example of a main program (DEMOFACT) that calls both a subprogram (SUB) and a user-defined function (FUNC) to compute the factorial value of a number.</source>
          <target state="translated">ここでは、サブプログラム(SUB)とユーザ定義関数(FUNC)の両方を呼び出して数値の階乗値を計算するメインプログラム(DEMOFACT)の例を示します。</target>
        </trans-unit>
        <trans-unit id="fce56f05dd0a684307248e0509281b28f6150e2a" translate="yes" xml:space="preserve">
          <source>Here is an example. The following two GnuCOBOL statements both display the same result (27):</source>
          <target state="translated">以下に例を示します。以下の2つのGnuCOBOL文は、どちらも同じ結果を表示します(27)。</target>
        </trans-unit>
        <trans-unit id="b6e578854c806b2cf1a7f51f1181b4443af68716" translate="yes" xml:space="preserve">
          <source>Here is how the main program and the three subprograms could be compiled if the three subprograms are to be dynamic:</source>
          <target state="translated">ここでは、3つのサブプログラムを動的にする場合に、メインプログラムと3つのサブプログラムをどのようにコンパイルするかを示します。</target>
        </trans-unit>
        <trans-unit id="b8a4250afe2b9b703be52c8963f7c7e83af93bec" translate="yes" xml:space="preserve">
          <source>Here is how these four programs would be compiled if the three subprograms are to be static:</source>
          <target state="translated">3つのサブプログラムを静的にする場合、これら4つのプログラムをどのようにコンパイルするかは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="beb1c1603f299093bba7034e28d01c9ea9428c93" translate="yes" xml:space="preserve">
          <source>Here is the data that the program will be reading. Each record reflects the aggregated benchmark scoring for one particular CPU, as scores for benchmarks against that CPU have been reported to the &lt;a href=&quot;https://gnucobol.sourceforge.io/HTML/cpubenchmark.net&quot;&gt;cpubenchmark.net&lt;/a&gt; website by their PassMark benchmark software. The data consists of four fields. Fields are separated from one another by a single comma. The descriptions of the fields are as follows:</source>
          <target state="translated">これがプログラムが読み取るデータです。そのCPUに対するベンチマークのスコアは、PassMarkベンチマークソフトウェアによって&lt;a href=&quot;https://gnucobol.sourceforge.io/HTML/cpubenchmark.net&quot;&gt;cpubenchmark.net&lt;/a&gt; Webサイトに報告されているため、各レコードは、特定のCPUの集計ベンチマークスコアを反映しています。データは4つのフィールドで構成されています。フィールドは、1つのコンマで互いに区切られています。フィールドの説明は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3885b22c6e4bdc48af657c6fedb7ca8f97433747" translate="yes" xml:space="preserve">
          <source>Here is the data that the program will be reading. Each record reflects the aggregated benchmark scoring for one particular CPU, as scores for benchmarks against that CPU have been reported to the &lt;a href=&quot;https://open-cobol.sourceforge.io/HTML/cpubenchmark.net&quot;&gt;cpubenchmark.net&lt;/a&gt; website by their PassMark benchmark software. The data consists of four fields. Fields are separated from one another by a single comma. The descriptions of the fields are as follows:</source>
          <target state="translated">これはプログラムが読み込むデータです。そのCPUに対するベンチマークのスコアがPassMarkベンチマークソフトウェアによって&lt;a href=&quot;https://open-cobol.sourceforge.io/HTML/cpubenchmark.net&quot;&gt;cpubenchmark.net&lt;/a&gt; Webサイトに報告されているため、各レコードは特定の1つのCPUの集計されたベンチマークスコアを反映しています。データは4つのフィールドで構成されます。フィールドは、単一のコンマによって互いに分離されます。フィールドの説明は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b01180e30ff342f12b30bea352d08df8ee331a14" translate="yes" xml:space="preserve">
          <source>Here is the listing of a GnuCOBOL program that uses 01-level constants to display the length (in bytes) of the various picture-less usage types.</source>
          <target state="translated">ここでは、01レベルの定数を使用して、様々なピクチャレスの使用タイプの長さ(バイト数)を表示するGnuCOBOLプログラムのリストを示します。</target>
        </trans-unit>
        <trans-unit id="1857cc7a022f0e1395961419f1f74e43d98e7680" translate="yes" xml:space="preserve">
          <source>Here is the program that will be producing the report. Pay attention to how the data is sorted and how the control hierarchy (&lt;code&gt;CONTROLS ARE&lt;/code&gt;) relates to the &lt;code&gt;SORT&lt;/code&gt;.</source>
          <target state="translated">これがレポートを作成するプログラムです。データの並べ替え方法と、コントロール階層（ &lt;code&gt;CONTROLS ARE&lt;/code&gt; ）が &lt;code&gt;SORT&lt;/code&gt; にどのように関連しているかに注意してください。</target>
        </trans-unit>
        <trans-unit id="73247c417733995d371c239937b20d07507d4db9" translate="yes" xml:space="preserve">
          <source>Here is the program that will be producing the report. Pay attention to how the data is sorted and how the control hierarchy &lt;code&gt;CONTROLS ARE&lt;/code&gt; relates to the&lt;code&gt;SORT&lt;/code&gt;</source>
          <target state="translated">これは、レポートを作成するプログラムです。データがどのようにソートされるか、および制御階層 &lt;code&gt;CONTROLS ARE&lt;/code&gt; が &lt;code&gt;SORT&lt;/code&gt; にどのように関係するかに注意してください</target>
        </trans-unit>
        <trans-unit id="da6729e808d0a3e4a663c2fea411af7a2fdc2b58" translate="yes" xml:space="preserve">
          <source>Here we see that &lt;code&gt;PROG2&lt;/code&gt; is nested inside of &lt;code&gt;PROG1&lt;/code&gt; because there is no &lt;code&gt;END PROGRAM&lt;/code&gt; marker separating them. This means that data items or files defined within &lt;code&gt;PROG1&lt;/code&gt; can be used within &lt;code&gt;PROG2&lt;/code&gt; simply by attaching the &lt;code&gt;GLOBAL&lt;/code&gt; (see &lt;a href=&quot;#GLOBAL&quot;&gt;GLOBAL&lt;/a&gt;) attribute to them back in &lt;code&gt;PROG1&lt;/code&gt; when they are defined.</source>
          <target state="translated">ここでは、それらを分離する &lt;code&gt;END PROGRAM&lt;/code&gt; マーカーがないため、 &lt;code&gt;PROG2&lt;/code&gt; が &lt;code&gt;PROG1&lt;/code&gt; 内にネストされていることがわかります。つまり、 &lt;code&gt;PROG1&lt;/code&gt; 内で定義されたデータ項目またはファイルは、定義時に &lt;code&gt;GLOBAL&lt;/code&gt; （&lt;a href=&quot;#GLOBAL&quot;&gt;GLOBALを&lt;/a&gt;参照）属性を &lt;code&gt;PROG1&lt;/code&gt; にアタッチするだけで、 &lt;code&gt;PROG2&lt;/code&gt; 内で使用できます。</target>
        </trans-unit>
        <trans-unit id="e5a81b08e879fde5dd2a59dae3f46849e9f50742" translate="yes" xml:space="preserve">
          <source>Here we see that PROG2 is nested inside of PROG1 because there is no&lt;code&gt;END PROGRAM&lt;/code&gt;marker separating them. This means that data items or files defined within PROG1 can be used within PROG2 simply by attaching the&lt;code&gt;GLOBAL&lt;/code&gt;(see &lt;a href=&quot;#GLOBAL&quot;&gt;GLOBAL&lt;/a&gt;) attribute to them back in PROG1 when they are defined.</source>
          <target state="translated">ここでは、PROG2がPROG1内にネストされていることがわかります。これは、それらを分離する &lt;code&gt;END PROGRAM&lt;/code&gt; マーカーがないためです。つまり、PROG1内で定義されたデータ項目またはファイルは、定義されたときにPROG1で &lt;code&gt;GLOBAL&lt;/code&gt; （&lt;a href=&quot;#GLOBAL&quot;&gt;GLOBALを&lt;/a&gt;参照）属性をアタッチするだけで、PROG2内で使用できます。</target>
        </trans-unit>
        <trans-unit id="9e665b8afaa854f3affd19ae081739fadefc957c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a demonstration:</source>
          <target state="translated">ここにデモンストレーションがあります：</target>
        </trans-unit>
        <trans-unit id="1bb3a890739a2d89878b41828136b7843797b0c4" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a more practical view of the difference. Let&amp;rsquo;s say that a table has 1,000 entries in it. With a sequential search, on average, you&amp;rsquo;ll have to check 500 of them to find an entry and you&amp;rsquo;ll have to look at all 1,000 of them to find that an entry doesn&amp;rsquo;t exist.</source>
          <target state="translated">違いのより実用的なビューを次に示します。テーブルに1,000のエントリがあるとします。順次検索では、平均して、500をチェックしてエントリーを見つける必要があり、1,000をすべて調べてエントリーが存在しないことを見つける必要があります。</target>
        </trans-unit>
        <trans-unit id="5e93bdc7d9e913c109cf4064444cedee83b88ddb" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a sample of a GnuCOBOL program that CALLs a C subprogram.</source>
          <target state="translated">以下は、Cサブプログラムを呼び出すGnuCOBOLプログラムのサンプルです。</target>
        </trans-unit>
        <trans-unit id="bce0f5ae6fe98feb4beb66b9de11f14f54d3934d" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s a small example:</source>
          <target state="translated">ここに小さな例があります：</target>
        </trans-unit>
        <trans-unit id="79a379c34c53ce83d07e71356345ea69136a74d1" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s an example:</source>
          <target state="translated">次に例を示します。</target>
        </trans-unit>
        <trans-unit id="b4f96988044521adc26ab35ce61bb5f09db1123c" translate="yes" xml:space="preserve">
          <source>Here&amp;rsquo;s the output of the compilation process as well as the program&amp;rsquo;s execution. The example assumes a Windows system with a GnuCOBOL build that uses the GNU C compiler on that system; the technique works equally well regardless of which C compiler and which operating system you&amp;rsquo;re using.</source>
          <target state="translated">これは、コンパイルプロセスの出力とプログラムの実行です。この例では、そのシステムでGNU Cコンパイラを使用するGnuCOBOLビルドを備えたWindowsシステムを想定しています。この手法は、使用しているCコンパイラやオペレーティングシステムに関係なく、同じように機能します。</target>
        </trans-unit>
        <trans-unit id="54b1a90f72334cf67c79da3608b8cff7cc194a79" translate="yes" xml:space="preserve">
          <source>Hexadecimal</source>
          <target state="translated">Hexadecimal</target>
        </trans-unit>
        <trans-unit id="411f51a5654b397be9062ca82d9069ac5e760156" translate="yes" xml:space="preserve">
          <source>Hexadecimal Alphanumeric Literal</source>
          <target state="translated">16進数英数字リテラル</target>
        </trans-unit>
        <trans-unit id="0622237faae035a0d62bd2b8400c09913d5beb12" translate="yes" xml:space="preserve">
          <source>Hexadecimal Numeric Literal</source>
          <target state="translated">16進数数値リテラル</target>
        </trans-unit>
        <trans-unit id="94ab07f464da8a3b187f31192ac4d12a08adf1a8" translate="yes" xml:space="preserve">
          <source>Hexadecimal number using &lt;code&gt;H#&lt;/code&gt; or &lt;code&gt;X#&lt;/code&gt; &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;H#&lt;/code&gt; または &lt;code&gt;X#&lt;/code&gt; を使用した16進数'</target>
        </trans-unit>
        <trans-unit id="9b5d84e4c523dc629848bb4349e680f8bf34c64b" translate="yes" xml:space="preserve">
          <source>Hexadecimal numeric literals</source>
          <target state="translated">16進数リテラル</target>
        </trans-unit>
        <trans-unit id="fc83f87e3f62574b840ab2334e64d62930fb1c3c" translate="yes" xml:space="preserve">
          <source>Historically in the early 60&amp;rsquo;s programs were first punched on to paper tape and by the mid 60&amp;rsquo;s that was replaced almost totally, by punched cards although paper tape was still used by programmers for the odd few changes to their sources held on magnetic tape or disk as a portable paper tape punch could be put in your pocket. Now the problem with punched cards were there was 2,000 cards per box and that they could and did, get dropped. So, cc (column) 1 through 6 had the card sequence number in and that way if a box was dropped they could be feed in to a card sorter to be fixed. This was after the cards was cleaned up so that they were all in the same direction which one corner cut out helped.</source>
          <target state="translated">歴史的に、60年代前半には、プログラムは最初に紙テープに穴をあけられ、60代半ばまでにほぼ完全に置き換えられましたが、紙テープは依然としてプログラマーが磁気テープまたはディスクに保持されているソースへの奇妙ないくつかの変更のために使用されていました携帯用の紙テープパンチをポケットに入れられます。現在、パンチされたカードの問題は、ボックスごとに2,000枚のカードがあり、それらがドロップできることでした。したがって、cc（列）1から6にはカードのシーケンス番号があり、ボックスがドロップされた場合、カードソーターにフィードして修正することができます。これは、カードが片付けられ、1つの角が切り取られて同じ方向になるようにカードがクリーンアップされた後です。</target>
        </trans-unit>
        <trans-unit id="82581b08d1abc17171e1f2f9cf9815374d6d8df7" translate="yes" xml:space="preserve">
          <source>Historically, back in the days when punched-cards were used to submit COBOL program source to a COBOL compiler, this part of a COBOL statement was reserved for a six-digit sequence number. While the contents of this area are ignored by COBOL compilers, it existed so that a program actually punched on 80-character cards could &amp;mdash; if the card deck were dropped on the floor &amp;mdash; be run through a card sorter machine and restored to it&amp;rsquo;s proper sequence. Of course, this isn&amp;rsquo;t necessary today; if truth be told, it hasn&amp;rsquo;t been necessary for a long time.</source>
          <target state="translated">歴史的に、パンチカードを使用してCOBOLプログラムのソースをCOBOLコンパイラーに送信した当時、COBOLステートメントのこの部分は6桁のシーケンス番号用に予約されていました。この領域の内容はCOBOLコンパイラーによって無視されますが、カードデッキが床に落とされた場合に実際に80文字のカードをパンチするプログラムがカードソーターマシンを介して実行され、適切なシーケンスに復元されるように存在していました。 。もちろん、これは今日必要ではありません。本当のことを言えば、それは長い間必要ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="02647b82d9fa83c81d555404d1e10b603758c168" translate="yes" xml:space="preserve">
          <source>Historically, back in the days when punched-cards were used to submit COBOL program source to a COBOL compiler, this part of a COBOL statement was reserved for a six-digit sequence number. While the contents of this area are ignored by COBOL compilers, it existed so that a program actually punched on 80-character cards could &amp;mdash; if the card deck were dropped on the floor &amp;mdash; be run through a card sorter machine and restored to its proper sequence. Of course, this isn&amp;rsquo;t necessary today; if truth be told, it hasn&amp;rsquo;t been necessary for a long time.</source>
          <target state="translated">歴史的に、パンチカードを使用してCOBOLプログラムソースをCOBOLコンパイラに送信した時代には、COBOLステートメントのこの部分は6桁のシーケンス番号用に予約されていました。この領域の内容はCOBOLコンパイラによって無視されますが、実際に80文字のカードにパンチされたプログラムが（カードデッキが床に落とされた場合）カードソーターマシンを介して実行され、適切な順序に復元できるように存在していました。 。もちろん、これは今日は必要ありません。真実を言えば、それは長い間必要ではありませんでした。</target>
        </trans-unit>
        <trans-unit id="0df9e10180565ea1110b91a867b356bd0e25bf9c" translate="yes" xml:space="preserve">
          <source>How then do we inform the compiler that the &lt;code&gt;DISPLAY&lt;/code&gt; statement is outside the scope of the &lt;code&gt;IF&lt;/code&gt;?</source>
          <target state="translated">では、 &lt;code&gt;DISPLAY&lt;/code&gt; ステートメントが &lt;code&gt;IF&lt;/code&gt; の範囲外であることをコンパイラーに通知するにはどうすればよいですか？</target>
        </trans-unit>
        <trans-unit id="dbfbb76720b9c478938cb351772ad799b84f9efe" translate="yes" xml:space="preserve">
          <source>I also ran the tests multiple times, just to make sure I had consistent results (I did). Like I mentioned earlier, this is not a rigorous, scientific benchmark of numeric performance; it&amp;rsquo;s just a quick-and-dirty comparison.</source>
          <target state="translated">また、一貫した結果が得られたことを確認するために、テストを複数回実行しました（そうしました）。前に述べたように、これは数値パフォーマンスの厳密で科学的なベンチマークではありません。これは、簡単な比較です。</target>
        </trans-unit>
        <trans-unit id="555eb23964b638ebb4898ef46762a788413b2a7a" translate="yes" xml:space="preserve">
          <source>I always include a numeric prefix to all procedure names I define, for the reasons stated earlier.</source>
          <target state="translated">前述の理由から、私は定義したすべてのプロシージャ名には必ず数字の接頭辞を付けています。</target>
        </trans-unit>
        <trans-unit id="6ef71f90a853f2945a57020e6c1ee95aebd594b3" translate="yes" xml:space="preserve">
          <source>I changed the &lt;code&gt;CONTROLS ARE&lt;/code&gt; clause on the sample program from this:</source>
          <target state="translated">サンプルプログラムの &lt;code&gt;CONTROLS ARE&lt;/code&gt; 句を次のように変更しました。</target>
        </trans-unit>
        <trans-unit id="df6a4fe99929dd991e0202127b86aa20cecf96af" translate="yes" xml:space="preserve">
          <source>I changed the&lt;code&gt;CONTROLS ARE&lt;/code&gt;clause on the sample program from this:</source>
          <target state="translated">サンプルプログラムの &lt;code&gt;CONTROLS ARE&lt;/code&gt; 句を次のように変更しました。</target>
        </trans-unit>
        <trans-unit id="d4babbd3edc9eb4d910c787c66392fcc67f2231b" translate="yes" xml:space="preserve">
          <source>I do not use &lt;code&gt;THRU&lt;/code&gt; on any &lt;code&gt;MERGE&lt;/code&gt;, &lt;code&gt;PERFORM&lt;/code&gt; or &lt;code&gt;SORT&lt;/code&gt; statement unless the programming standards of the shop in which I am working require it. My reasoning for this is that it is too easy to accidentally introduce a new procedure into the scope of a &lt;code&gt;THRU&lt;/code&gt;.</source>
          <target state="translated">私が働いているショップのプログラミング標準で要求されていない限り、 &lt;code&gt;MERGE&lt;/code&gt; 、 &lt;code&gt;PERFORM&lt;/code&gt; 、または &lt;code&gt;SORT&lt;/code&gt; ステートメントで &lt;code&gt;THRU&lt;/code&gt; を使用しません。これについての私の推論は、 &lt;code&gt;THRU&lt;/code&gt; のスコープに誤って新しい手順を導入するのは簡単すぎるということです。</target>
        </trans-unit>
        <trans-unit id="8d7255df40c7e6bd55c76738ac87c79c48b55013" translate="yes" xml:space="preserve">
          <source>I do not use&lt;code&gt;THRU&lt;/code&gt;on any&lt;code&gt;MERGE&lt;/code&gt;&lt;code&gt;PERFORM&lt;/code&gt;or&lt;code&gt;SORT&lt;/code&gt;statement unless the programming standards of the shop in which I am working require it. My reasoning for this is that it is too easy to accidentally introduce a new procedure into the scope of a&lt;code&gt;THRU&lt;/code&gt;</source>
          <target state="translated">私が作業しているショップのプログラミング標準で &lt;code&gt;THRU&lt;/code&gt; が要求されない限り、 &lt;code&gt;MERGE&lt;/code&gt; &lt;code&gt;PERFORM&lt;/code&gt; または &lt;code&gt;SORT&lt;/code&gt; ステートメントでTHRUを使用しません。これについての私の推論は、誤って新しい手順を &lt;code&gt;THRU&lt;/code&gt; のスコープに導入するのは簡単すぎるためです。</target>
        </trans-unit>
        <trans-unit id="1fbc97a4457717dc23d1ecc1bf25f471eabb9c4f" translate="yes" xml:space="preserve">
          <source>I like to use procedure division paragraphs and sections as follows:</source>
          <target state="translated">私は、以下のような手順分割パラグラフやセクションを使うのが好きです。</target>
        </trans-unit>
        <trans-unit id="80ed72858cef207934e285ac054f1c8a269fc88f" translate="yes" xml:space="preserve">
          <source>I-O status &quot;1x&quot;</source>
          <target state="translated">I-O ステータス &quot;1x&quot;</target>
        </trans-unit>
        <trans-unit id="e7876f32dd29146c722eec80cdba831c36ef9026" translate="yes" xml:space="preserve">
          <source>I-O status &quot;2x&quot;</source>
          <target state="translated">I-O ステータス &quot;2x&quot;</target>
        </trans-unit>
        <trans-unit id="76b397e0ec9019d1f6c9d9402f9be35add987c62" translate="yes" xml:space="preserve">
          <source>I-O status &quot;3x&quot;</source>
          <target state="translated">I-O ステータス &quot;3x&quot;</target>
        </trans-unit>
        <trans-unit id="6eff1612faad7c99ae78ea1e6080ebc0dc3c4df1" translate="yes" xml:space="preserve">
          <source>I-O status &quot;4x&quot;</source>
          <target state="translated">I-O ステータス &quot;4x&quot;</target>
        </trans-unit>
        <trans-unit id="67e793587f319a335dc7c63a71a23c530563d185" translate="yes" xml:space="preserve">
          <source>I-O status &quot;5x&quot;</source>
          <target state="translated">I-Oステータス &quot;5倍&quot;</target>
        </trans-unit>
        <trans-unit id="b8524f001cba70110ae60dee01287daded416b11" translate="yes" xml:space="preserve">
          <source>I-O status &quot;6x&quot;</source>
          <target state="translated">I-O ステータス &quot;6x&quot;</target>
        </trans-unit>
        <trans-unit id="be335b5a5eadd43e4b4e63cf77557e87542095cf" translate="yes" xml:space="preserve">
          <source>I-O status &quot;9x&quot;</source>
          <target state="translated">I-O ステータス &quot;9x&quot;</target>
        </trans-unit>
        <trans-unit id="6a40883c56a23e578d1618cce3df76e43d5b7350" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;1x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;1x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87ff1a1275bf109eaff56708cd4e221f5ca0d8bc" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;2x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;2x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be7973453310dbe96df8c3018a9424798391b2e4" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;3x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;3x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2458183a044f5219cfb3b7ef88f92e2d8c9e5f33" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;4x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;4x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="38cedebc1b1941a50e028e9d6550e769870941c1" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;5x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;5x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a3d793e81b9a3c98c450a59713300bf381d8058c" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;6x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;6x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="555a7b0c863d6be59d84386e7390b5bbffbf7505" translate="yes" xml:space="preserve">
          <source>I-O status &lt;code&gt;9x&lt;/code&gt;</source>
          <target state="translated">IOステータス &lt;code&gt;9x&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0f12b2d4b4f8188676296a19fede62525110b1c0" translate="yes" xml:space="preserve">
          <source>I-O-CONTROL MULTIPLE FILE Syntax</source>
          <target state="translated">I-O-CONTROL MULTIPLE FILE 構文</target>
        </trans-unit>
        <trans-unit id="6f75dae5c47d389ce684040629f1e36258a6ce54" translate="yes" xml:space="preserve">
          <source>I-O-CONTROL SAME AREA Syntax</source>
          <target state="translated">I-O-CONTROL SAME AREA 構文</target>
        </trans-unit>
        <trans-unit id="bb6745092ff5da5fbe4ae9f7460a002043bade91" translate="yes" xml:space="preserve">
          <source>ICON, IDENTIFICATION, IDENTIFIED, ID, IF, IGNORE, IGNORING, IMPLEMENTS, INDEPENDENT, INDEXED, INDEX, INDICATE, INHERITS, INITIALISED, INITIALISE, INITIALIZED, INITIALIZE, INITIAL, INITIATE, INPUT-OUTPUT, INPUT, INQUIRE, INSERTION-INDEX, INSERT-ROWS, INSPECT, INSTALLATION, INTEGER-OF-BOOLEAN, INTEGER-OF-DATE, INTEGER-OF-DAY, INTEGER-OF-FORMATTED-DATE, INTEGER-PART, INTEGER, INTERFACE-ID, INTERFACE, INTERMEDIATE, INTO, INTRINSIC, INVALID, INVOKE, IN, I-O-CONTROL, I-O, IS, ITEM-TEXT, ITEM-TO-ADD, ITEM-TO-DELETE, ITEM-TO-EMPTY, ITEM-VALUE, ITEM</source>
          <target state="translated">icon、identification、identified、id、if、ignore、ignoring、implements、independent、indexed、index、indeed、indeed、inherits、initialised、initialise、initialized、initialize、initial、initiate、initiate、input-output、input、inquire、insert-index、insert-rows、inspect、installation。INTEGER-OF-BOOLEAN、INTEGER-OF-DATE、INTEGER-OF-DAY、INTEGER-OF-FORMATTED-DATE、INTEGER-PART、INTEGER、INTERFACE-ID、INTERFACE、INTERMEDIATE、INTO、INTRINSIC、INVALID、INVOKE、IN、I-O-CONTROL、I-O、IS、ITEM-TEXT、ITEM-TO-ADD、ITEM-TO-DELETE、ITEM-TO-EMPTY、ITEM-VALUE、ITEM-VALUE、ITEM</target>
        </trans-unit>
        <trans-unit id="9c32595038680ec5b76e6c8935109525fa67eebc" translate="yes" xml:space="preserve">
          <source>ID, IDENTIFICATION, IF, IGNORE, IGNORING, IMPLEMENTS, IN, INDEX, INDEXED, INDICATE, INHERITS, INITIAL, INITIALISE, INITIALISED, INITIALIZE, INITIALIZED, INITIATE, INPUT, INPUT-OUTPUT, INSPECT, INSTALLATION, INTEGER, INTEGER-OF-BOOLEAN, INTEGER-OF-DATE, INTEGER-OF-DAY, INTEGER-OF-FORMATTED-DATE, INTEGER-PART, INTERFACE, INTERFACE-ID, INTERMEDIATE, INTO, INTRINSIC, INVALID, INVOKE, I-O, I-O-CONTROL, IS</source>
          <target state="translated">ID、IDENTIFICATION、IF、IGNORE、IGNORING、IMPLEMENTS、IN、INDEX、INDEXED、INDICATE、INHERITS、INITIAL、INITIALISE、INITIALISED、INITIALIZE、INITIALIZED、INITIATE、INPUT、INPUT-OUTPUT、INSPECT、INSTALLATION、INTEGER、INTEGER-OF-BOOLEAN、INTEGER-OF-DATE、INTEGER-OF-DAY、INTEGER-OF-FORMATTED-DATE、INTEGER-PART、INTERFACE、INTERFACE-ID、INTERMEDIATE、INTO、INTRINSIC、INVALID、INVOKE、I-O、I-O-CONTROL、IS IS</target>
        </trans-unit>
        <trans-unit id="9b9c55248e0c5e189619271ca0ded3b5bd005453" translate="yes" xml:space="preserve">
          <source>IDENTIFICATION DIVISION Syntax</source>
          <target state="translated">識別部構文</target>
        </trans-unit>
        <trans-unit id="b825b4511a0db8bbe7c5d10a6be13d4b3f73d3e5" translate="yes" xml:space="preserve">
          <source>IF Syntax</source>
          <target state="translated">IF構文</target>
        </trans-unit>
        <trans-unit id="8a579c7bbbf6cdd11286272217a8b94f74b4f75a" translate="yes" xml:space="preserve">
          <source>INITIALIZE Syntax</source>
          <target state="translated">INITIALIZE 構文</target>
        </trans-unit>
        <trans-unit id="f22feedf7bc3a1ceec5b7c202882c8aa6f0e185d" translate="yes" xml:space="preserve">
          <source>INITIATE Syntax</source>
          <target state="translated">INITIATE 構文</target>
        </trans-unit>
        <trans-unit id="4f5b873e331f2e93c7e38f36475cf57cbfec3d6a" translate="yes" xml:space="preserve">
          <source>INPUT-OUTPUT SECTION Syntax</source>
          <target state="translated">INPUT-OUTPUT SECTION 構文</target>
        </trans-unit>
        <trans-unit id="baa55ae57b9d3c323f03e28edc87f8c479cca623" translate="yes" xml:space="preserve">
          <source>INSPECT Syntax</source>
          <target state="translated">INSPECT 構文</target>
        </trans-unit>
        <trans-unit id="078ab307f07f53957c6ec7a0918c5e4474c21ea5" translate="yes" xml:space="preserve">
          <source>INTEGER Function Syntax</source>
          <target state="translated">INTEGER 関数構文</target>
        </trans-unit>
        <trans-unit id="c9e25e51f813fe8bc79fe92425c0aa73a9ead86d" translate="yes" xml:space="preserve">
          <source>INTEGER-OF-BOOLEAN Function Syntax</source>
          <target state="translated">INTEGER-OF-BOOLEAN 関数構文</target>
        </trans-unit>
        <trans-unit id="2c22d504f0b728c455886a880af6cd5a9ad23315" translate="yes" xml:space="preserve">
          <source>INTEGER-OF-DATE Function Syntax</source>
          <target state="translated">INTEGER-OF-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="c56815bbf474260cef47707dfeb34754b39ce7d9" translate="yes" xml:space="preserve">
          <source>INTEGER-OF-DAY Function Syntax</source>
          <target state="translated">INTEGER-OF-DAY 関数構文</target>
        </trans-unit>
        <trans-unit id="4d95e4ffa5addf9dfa93519bd4426b5f3b805749" translate="yes" xml:space="preserve">
          <source>INTEGER-OF-FORMATTED-DATE Function Syntax</source>
          <target state="translated">INTEGER-OF-FORMATTED-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="8690212db49eea2a08db459f36ed19a01dcc1797" translate="yes" xml:space="preserve">
          <source>INTEGER-PART Function Syntax</source>
          <target state="translated">INTEGER-PART 関数構文</target>
        </trans-unit>
        <trans-unit id="b7b5138514830769db3bcc33e44ecf17e41dd72e" translate="yes" xml:space="preserve">
          <source>INVALID KEY Syntax</source>
          <target state="translated">INVALID キー構文</target>
        </trans-unit>
        <trans-unit id="ec4a2a5056d72d8e03345caaebf4607d163e6dd7" translate="yes" xml:space="preserve">
          <source>IS</source>
          <target state="translated">IS</target>
        </trans-unit>
        <trans-unit id="52a5254cfd81b370ec179ea32fe392572fa23032" translate="yes" xml:space="preserve">
          <source>Identified sub strings will be moved into each destination field in the sequence they are identified; values moved into a destination field will be truncated if the sub string length exceeds the destination field length, or padded with spaces if the destination field length exceeds the sub string length. Both truncation and padding will be controlled by the presence or absence of a &lt;code&gt;JUSTIFIED&lt;/code&gt; (see &lt;a href=&quot;#JUSTIFIED&quot;&gt;JUSTIFIED&lt;/a&gt;) clause on the destination field.</source>
          <target state="translated">識別されたサブ文字列は、識別された順序で各宛先フィールドに移動されます。宛先フィールドに移動された値は、サブストリングの長さが宛先フィールドの長さを超える場合は切り捨てられ、宛先フィールドの長さがサブストリングの長さを超える場合はスペースが埋め込まれます。切り捨てとパディングの両方は、宛先フィールドの &lt;code&gt;JUSTIFIED&lt;/code&gt; （&lt;a href=&quot;#JUSTIFIED&quot;&gt;JUSTIFIEDを&lt;/a&gt;参照）句の有無によって制御されます。</target>
        </trans-unit>
        <trans-unit id="1e0e983b66f7b85304dc35598bdbe112fd3d5cf6" translate="yes" xml:space="preserve">
          <source>Identified sub strings will be moved into each destination field in the sequence they are identified; values moved into a destination field will be truncated if the sub string length exceeds the destination field length, or padded with spaces if the destination field length exceeds the sub string length. Both truncation and padding will be controlled by the presence or absence of a&lt;code&gt;JUSTIFIED&lt;/code&gt;(see &lt;a href=&quot;#JUSTIFIED&quot;&gt;JUSTIFIED&lt;/a&gt;) clause on the destination field.</source>
          <target state="translated">識別されたサブストリングは、識別された順序で各宛先フィールドに移動されます。宛先フィールドに移動された値は、サブストリングの長さが宛先フィールドの長さを超える場合は切り捨てられ、宛先フィールドの長さがサブストリング長を超える場合はスペースが埋め込まれます。切り捨てと埋め込みは、宛先フィールドの &lt;code&gt;JUSTIFIED&lt;/code&gt; （&lt;a href=&quot;#JUSTIFIED&quot;&gt;JUSTIFIEDを&lt;/a&gt;参照）句の有無によって制御されます。</target>
        </trans-unit>
        <trans-unit id="649d2864df18704de32e689e69e63f2483e8b76e" translate="yes" xml:space="preserve">
          <source>Identifiers</source>
          <target state="translated">Identifiers</target>
        </trans-unit>
        <trans-unit id="751c68a3471b1c791efaee0a8e7c24ea0c266efd" translate="yes" xml:space="preserve">
          <source>If</source>
          <target state="translated">If</target>
        </trans-unit>
        <trans-unit id="3322b13c210812f0828395f739652509dab01dfe" translate="yes" xml:space="preserve">
          <source>If  &lt;code&gt;AFTER ADVANCING&lt;/code&gt; is used (or implied), the &lt;code&gt;ADVANCING&lt;/code&gt; action writes line-terminator characters to the file and then the record data is written to the file.</source>
          <target state="translated">場合 &lt;code&gt;AFTER ADVANCING&lt;/code&gt; 使用（または暗示）され、 &lt;code&gt;ADVANCING&lt;/code&gt; アクションがファイルに行ターミネータ文字を書き込み、記録データがファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="85fdddf7199ca1a02d1e410b6661de3c0d82e8ec" translate="yes" xml:space="preserve">
          <source>If &amp;lt;</source>
          <target state="translated">&amp;lt;の場合</target>
        </trans-unit>
        <trans-unit id="d2c897fd06a8b3a329cd50ec25ba6764ec9129b7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;CALL &lt;var&gt;literal&lt;/var&gt;&lt;/code&gt; is used, the subroutine can only be located and linked with the calling program at compilation time.</source>
          <target state="translated">場合は &lt;code&gt;CALL &lt;var&gt;literal&lt;/var&gt;&lt;/code&gt; 使用され、サブルーチンは位置しており、コンパイル時に呼び出すプログラムにリンクすることができます。</target>
        </trans-unit>
        <trans-unit id="15806721a5363c12e0ab5309e695812b2ca53124" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;CALL &lt;var&gt;literal&lt;/var&gt;&lt;/code&gt; is used, the subroutine will be located and linked in with the calling program at compile time or may be dynamically located and loaded at execution time, depending on compiler switch settings and operating system capabilities.</source>
          <target state="translated">場合は &lt;code&gt;CALL &lt;var&gt;literal&lt;/var&gt;&lt;/code&gt; 使用され、サブルーチンが位置しており、コンパイル時に呼び出しプログラムと連動して、または動的コンパイラスイッチの設定に応じて、システムの機能を操作し、位置し、実行時にロードすることができるであろう。</target>
        </trans-unit>
        <trans-unit id="2766f1a1a46e9b0ceae7190dd211a923f2adb01a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PICTURE&lt;/code&gt; 9 and contains &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;PICTURE&lt;/code&gt; 9で、 'が含まれている場合</target>
        </trans-unit>
        <trans-unit id="806c67b77afcd84b74bff546c895a4a635e84b62" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PICTURE&lt;/code&gt; contains &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;PICTURE&lt;/code&gt; に 'が含まれている場合</target>
        </trans-unit>
        <trans-unit id="31f064c7a8360dece576eaaabb04042e1b417012" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;RETURNING&lt;/code&gt; is not used the &lt;code&gt;RETURN-CODE&lt;/code&gt; special register receives the status-code where zero is success and non-zero it is not.</source>
          <target state="translated">場合 &lt;code&gt;RETURNING&lt;/code&gt; が使用されていない &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタはゼロではそれがない成功と非ゼロであるステータス・コードを受け取ります。</target>
        </trans-unit>
        <trans-unit id="95fee7622299f954f5a78d52d81bfb663497c86f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;WITH TEST AFTER&lt;/code&gt; was specified, control will return back to the &lt;code&gt;PERFORM&lt;/code&gt;, where &lt;var&gt;conditional-expression-1&lt;/var&gt; will be evaluated, and processing of the &lt;code&gt;PERFORM&lt;/code&gt; will halt if the expression evaluates to &lt;code&gt;TRUE&lt;/code&gt;. If &lt;code&gt;WITH TEST AFTER&lt;/code&gt; was</source>
          <target state="translated">&lt;code&gt;WITH TEST AFTER&lt;/code&gt; が指定された場合、制御は &lt;code&gt;PERFORM&lt;/code&gt; に戻り、 &lt;var&gt;conditional-expression-1&lt;/var&gt; が評価され、式が &lt;code&gt;TRUE&lt;/code&gt; と評価されると、 &lt;code&gt;PERFORM&lt;/code&gt; の処理が停止します。 &lt;code&gt;WITH TEST AFTER&lt;/code&gt; があった場合</target>
        </trans-unit>
        <trans-unit id="7d673c8ed35a3c161a6adb890f355404e231d51a" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-1&lt;/var&gt; is a combined date and time format, the content of &lt;var&gt;argument-2&lt;/var&gt; shall be a valid combined date and time in same format.</source>
          <target state="translated">場合は &lt;var&gt;argument-1&lt;/var&gt; 組み合わせた日付と時刻の形式、内容のある &lt;var&gt;argument-2&lt;/var&gt; 同じ形式の有効な日付と時刻の組み合わせでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b161484e3fd2f91300ced0138276489baa7a3071" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-1&lt;/var&gt; is a date format the content of &lt;var&gt;argument-2&lt;/var&gt; shall be a valid date in that format.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; が日付形式の場合、 &lt;var&gt;argument-2&lt;/var&gt; 内容はその形式の有効な日付でなければなりません。</target>
        </trans-unit>
        <trans-unit id="cebb80a273ff58e8cda6576d2d206c71054b7fc1" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-2&lt;/var&gt; is specified, each character in &lt;var&gt;argument-1&lt;/var&gt; that has no corresponding national representation is converted to the substitution character specified by &lt;var&gt;argument-2&lt;/var&gt;.</source>
          <target state="translated">場合は &lt;var&gt;argument-2&lt;/var&gt; 指定されている、の各文字 &lt;var&gt;argument-1&lt;/var&gt; 該当する国家の表現を持っていないことにより、指定した置換文字に変換され &lt;var&gt;argument-2&lt;/var&gt; 。</target>
        </trans-unit>
        <trans-unit id="eada64104bafc15080cf4986ed1d995224af39ae" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-2&lt;/var&gt; is specified, the alphanumeric substitution character is returned for each national character in &lt;var&gt;argument-1&lt;/var&gt; that has no corresponding alphanumeric character representation.</source>
          <target state="translated">場合は &lt;var&gt;argument-2&lt;/var&gt; 指定されている、英数字置換文字は、各国語キャラクタのために返される &lt;var&gt;argument-1&lt;/var&gt; 無英数文字表現に対応しています。</target>
        </trans-unit>
        <trans-unit id="41229338f436e811725413188daac4719abf2425" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-2&lt;/var&gt; is un-specified, and &lt;var&gt;argument-1&lt;/var&gt; contains a national character for which there is no corresponding alphanumeric character representation, an substitution character is used as the corresponding alphanumeric character and the EC-DATA-CONVERSION exception condition is set.</source>
          <target state="translated">場合 &lt;var&gt;argument-2&lt;/var&gt; 未指定され、 &lt;var&gt;argument-1&lt;/var&gt; は対応する英数字表現が存在しないいる各国文字が含まれている対応する英数字及びEC-データ変換例外条件が設定される、置換文字が使用されます。</target>
        </trans-unit>
        <trans-unit id="acea6d05311cd87855cd26011e8b713e8b0a701e" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-2&lt;/var&gt; is unspecified and &lt;var&gt;argument-1&lt;/var&gt; contains an alphanumeric character for which there is no corresponding national character representation, a substitution character is used as the corresponding national character and the &lt;code&gt;EC-DATA-CONVERSION&lt;/code&gt; exception condition is set to exist.</source>
          <target state="translated">場合 &lt;var&gt;argument-2&lt;/var&gt; 不特定であり、 &lt;var&gt;argument-1&lt;/var&gt; 該当する各国文字表現が存在しないいる英数字文字を含む対応する各国文字として、置換文字が使用されている &lt;code&gt;EC-DATA-CONVERSION&lt;/code&gt; 例外条件が存在するように設定されています。</target>
        </trans-unit>
        <trans-unit id="70189109ae068537461ee39c4f8e066bfd97e8b8" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;argument-4&lt;/var&gt; is unspecified, the highest level defined in the ordering table is used for the comparison.</source>
          <target state="translated">&lt;var&gt;argument-4&lt;/var&gt; が指定されていない場合、順序付けテーブルで定義されている最高レベルが比較に使用されます。</target>
        </trans-unit>
        <trans-unit id="5adaf014414135fbd03c55a5e2040f272de5bc12" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;category-name-1&lt;/var&gt; is specified instead of &lt;code&gt;ALL&lt;/code&gt;, only those members of the field list with &lt;code&gt;VALUE&lt;/code&gt; clauses that also meet the criteria set down for the specified &lt;var&gt;category-name&lt;/var&gt; (see the list above) will qualify.</source>
          <target state="translated">場合は &lt;var&gt;category-name-1&lt;/var&gt; 代わりに指定されている &lt;code&gt;ALL&lt;/code&gt; 、とフィールドリストのメンバーのみ &lt;code&gt;VALUE&lt;/code&gt; のも、指定されたために停止した基準満たす句 &lt;var&gt;category-name&lt;/var&gt; 対象となります（上記のリストを参照します）。</target>
        </trans-unit>
        <trans-unit id="bf8869d2fca2a3ed90b31983b8854737520e2708" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;conditional-expression&lt;/var&gt; evaluates to &lt;code&gt;TRUE&lt;/code&gt;, &lt;var&gt;imperative-statement-1&lt;/var&gt; will be executed regardless of whether or not an  &lt;code&gt;ELSE&lt;/code&gt; clause is present. Once &lt;var&gt;imperative-statement-1&lt;/var&gt; has been executed, control falls into the first statement following the &lt;code&gt;END-IF&lt;/code&gt; or to the first statement of the next sentence if there is no &lt;code&gt;END-IF&lt;/code&gt; clause.</source>
          <target state="translated">&lt;var&gt;conditional-expression&lt;/var&gt; が &lt;code&gt;TRUE&lt;/code&gt; と評価された場合、 &lt;code&gt;ELSE&lt;/code&gt; 句が存在するかどうかに関係なく、 &lt;var&gt;imperative-statement-1&lt;/var&gt; が実行され ます。いったん &lt;var&gt;imperative-statement-1&lt;/var&gt; 実行された、コントロールには、次の最初の文に該当する &lt;code&gt;END-IF&lt;/code&gt; を一切存在しない場合、または次の文の最初の文に &lt;code&gt;END-IF&lt;/code&gt; 句。</target>
        </trans-unit>
        <trans-unit id="bcaac60957317961c413c6d092bcc276d2b47710" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;convert-length&lt;/var&gt; is negative or zero, no conversion will be performed.</source>
          <target state="translated">場合 &lt;var&gt;convert-length&lt;/var&gt; 負またはゼロであり、変換は行われません。</target>
        </trans-unit>
        <trans-unit id="07c13d6426ecaae87b4c4a28931d4fa60cb75464" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;days&lt;/var&gt; is less than 1 or greater than 3,067,671, or if &lt;var&gt;seconds&lt;/var&gt; is less than 1 or greater than 86,400, a value of 0 is returned and a runtime error will result.</source>
          <target state="translated">もし &lt;var&gt;days&lt;/var&gt; 3067671未満1以上である場合、または &lt;var&gt;seconds&lt;/var&gt; 86,400未満1以上であり、0の値が返されると、ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="b9f1024cba4d9345c0a63209d2870b749e90c2d6" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is a &lt;code&gt;RELATIVE&lt;/code&gt; file whose &lt;code&gt;ACCESS MODE&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;) is either &lt;code&gt;RANDOM&lt;/code&gt; or &lt;code&gt;DYNAMIC&lt;/code&gt;, the record to be deleted is the one whose relative record number is currently the value of the field specified as the files  &lt;code&gt;RELATIVE KEY&lt;/code&gt; in its &lt;code&gt;SELECT&lt;/code&gt; statement.</source>
          <target state="translated">場合は &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;RELATIVE&lt;/code&gt; そのファイル &lt;code&gt;ACCESS MODE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;組織RELATIVEを&lt;/a&gt;）のいずれかである &lt;code&gt;RANDOM&lt;/code&gt; または &lt;code&gt;DYNAMIC&lt;/code&gt; 、削除するレコードは、その相対レコード番号現在のフィールドの値がファイルとして指定されているものである &lt;code&gt;RELATIVE KEY&lt;/code&gt; でその &lt;code&gt;SELECT&lt;/code&gt; ステートメント。</target>
        </trans-unit>
        <trans-unit id="d6e9fbaab9d61e6f5e6e5a867b015f6b71b3228d" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is a Sort/Merge work file, no action will be taken.</source>
          <target state="translated">場合は &lt;var&gt;file-name-1&lt;/var&gt; ソート/マージ作業ファイルで、何もアクションは取られません。</target>
        </trans-unit>
        <trans-unit id="6801050e9c52b67ea54ec1034310f5f1e7764d49" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is a relative file, &lt;var&gt;identifier-1&lt;/var&gt; must be the defined &lt;code&gt;RELATIVE KEY&lt;/code&gt; of the file.</source>
          <target state="translated">場合 &lt;var&gt;file-name-1&lt;/var&gt; 相対ファイルであり、 &lt;var&gt;identifier-1&lt;/var&gt; 定義されなければならない &lt;code&gt;RELATIVE KEY&lt;/code&gt; ファイルの。</target>
        </trans-unit>
        <trans-unit id="f16c5b4c23ecd3d0bf7b5b50d4f95f840e67dc51" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is an &lt;code&gt;INDEXED&lt;/code&gt; file whose &lt;code&gt;ACCESS MODE&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;) is &lt;code&gt;RANDOM&lt;/code&gt; or &lt;code&gt;DYNAMIC&lt;/code&gt;, the record to be deleted is the one whose primary key is currently the value of the field specified as the  &lt;code&gt;RECORD KEY&lt;/code&gt; in the file&amp;rsquo;s &lt;code&gt;SELECT&lt;/code&gt; statement.</source>
          <target state="translated">場合は &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;INDEXED&lt;/code&gt; そのファイル &lt;code&gt;ACCESS MODE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXEDを&lt;/a&gt;）です &lt;code&gt;RANDOM&lt;/code&gt; または &lt;code&gt;DYNAMIC&lt;/code&gt; 、削除するレコードの主キーとして現在指定したフィールドの値である1である &lt;code&gt;RECORD KEY&lt;/code&gt; ファイルの中に &lt;code&gt;SELECT&lt;/code&gt; はステートメント。</target>
        </trans-unit>
        <trans-unit id="0cc5aaff69dc11c0104e28890f987c56b77e0ded" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is an &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;) or &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;) file with &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt;, this statement as well as a random &lt;code&gt;READ&lt;/code&gt; (see &lt;a href=&quot;#Random-READ&quot;&gt;Random READ&lt;/a&gt;) may be used.</source>
          <target state="translated">場合は &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;または） &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; が（参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;とファイル） &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt; 、この文だけでなく、ランダム &lt;code&gt;READ&lt;/code&gt; （参照&lt;a href=&quot;#Random-READ&quot;&gt;ランダムREADを&lt;/a&gt;使用することができます）。</target>
        </trans-unit>
        <trans-unit id="feee2421e42f2b2e6a2dd8b71df262f9e36a6466" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is an &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;) or &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;) file with &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt;, this statement as well as a sequential &lt;code&gt;READ&lt;/code&gt; (see &lt;a href=&quot;#Sequential-READ&quot;&gt;Sequential READ&lt;/a&gt;) may be used.</source>
          <target state="translated">場合は &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;または） &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; が（参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;とファイル） &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt; 、この文だけでなく、シーケンシャル &lt;code&gt;READ&lt;/code&gt; （参照&lt;a href=&quot;#Sequential-READ&quot;&gt;シーケンシャルリードを&lt;/a&gt;使用することができます）。</target>
        </trans-unit>
        <trans-unit id="902b8ff8b63de74c2449d52d8e0f866355ef7969" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is an &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;) or &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;) file with an &lt;code&gt;ACCESS MODE RANDOM&lt;/code&gt;, this statement cannot be used.</source>
          <target state="translated">場合は &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;組織RELATIVEを&lt;/a&gt;）または &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;を持つファイル） &lt;code&gt;ACCESS MODE RANDOM&lt;/code&gt; 、このステートメントを使用することはできません。</target>
        </trans-unit>
        <trans-unit id="6de6701cf8243f215a533b45a324eb216e5e7e58" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; is an indexed file, &lt;var&gt;identifier-1&lt;/var&gt; must be the defined &lt;code&gt;RECORD KEY&lt;/code&gt; of the file or any of the &lt;code&gt;ALTERNATE RECORD KEY&lt;/code&gt; fields for the file.</source>
          <target state="translated">場合 &lt;var&gt;file-name-1&lt;/var&gt; 索引ファイルは、 &lt;var&gt;identifier-1&lt;/var&gt; 定義されなければならない &lt;code&gt;RECORD KEY&lt;/code&gt; ファイルまたは任意の &lt;code&gt;ALTERNATE RECORD KEY&lt;/code&gt; のファイルのフィールド。</target>
        </trans-unit>
        <trans-unit id="d5d4d8566ac4ba9f4843bebb395b7f0e5f6c1ec7" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;file-name-1&lt;/var&gt; was specified as &lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt;, this is the</source>
          <target state="translated">&lt;var&gt;file-name-1&lt;/var&gt; が &lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt; として指定された場合、これは</target>
        </trans-unit>
        <trans-unit id="c635cc29031373da581d69c58507380ea8674609" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;function-reference-1&lt;/var&gt; is specified, it must be an invocation of an intrinsic function that returns a</source>
          <target state="translated">場合 &lt;var&gt;function-reference-1&lt;/var&gt; 指定され、それが返す組み込み関数の呼び出しでなければなりません</target>
        </trans-unit>
        <trans-unit id="7a82f6faf02bfc8a064e8072fdb8d01d8438d86a" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is a &lt;code&gt;BASED&lt;/code&gt; data item and that data item is currently based (meaning it currently has memory allocated to it), its memory is released and &lt;var&gt;identifier-1&lt;/var&gt; will become un-based and therefore unusable. If &lt;var&gt;identifier-1&lt;/var&gt; was not based, no action will be taken.</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; され &lt;code&gt;BASED&lt;/code&gt; データ項目と、そのデータ項目が現在（現在それに割り当てられたメモリを有しているという意味）計算され、そのメモリが解放され、 &lt;var&gt;identifier-1&lt;/var&gt; 未ベースしたがって使用できなくなるであろう。 &lt;var&gt;identifier-1&lt;/var&gt; が基になっていない場合、アクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="601b9a08fc689a416f43353282b056e64d29cfa8" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is a &lt;code&gt;USAGE POINTER&lt;/code&gt; data item and it contains a valid address, the &lt;code&gt;FREE&lt;/code&gt; statement will release the memory block the pointer references. In addition, any &lt;code&gt;BASED&lt;/code&gt; data items that the pointer was used to provide an address for will become un-based and therefore unusable. If &lt;var&gt;identifier-1&lt;/var&gt; did not contain a valid address, no action will be taken.</source>
          <target state="translated">場合は &lt;var&gt;identifier-1&lt;/var&gt; ある &lt;code&gt;USAGE POINTER&lt;/code&gt; データ項目と、それが有効なアドレスが含まれている、 &lt;code&gt;FREE&lt;/code&gt; 文は、メモリブロックポインタ参照を解放します。さらに、ポインタがアドレスを提供するために使用された &lt;code&gt;BASED&lt;/code&gt; データ項目は、ベースがなくなるため、使用できなくなります。場合は &lt;var&gt;identifier-1&lt;/var&gt; 有効なアドレスが含まれていなかった、何も実行されません。</target>
        </trans-unit>
        <trans-unit id="7eefce7fd4f33c7516ec5fe7dc7febf7af0c0c45" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is a numeric data item, the character value read from the console or standard-input device will be parsed according to the rules for input to the &lt;code&gt;NUMVAL&lt;/code&gt; intrinsic function (see &lt;a href=&quot;#NUMVAL&quot;&gt;NUMVAL&lt;/a&gt;), except that none of the trailing sign formats are honoured.</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; 数字データ項目であり、文字の値は、コンソールまたは標準入力装置から読み取らへの入力の規則に従って解析される &lt;code&gt;NUMVAL&lt;/code&gt; （参照組み込み関数&lt;a href=&quot;#NUMVAL&quot;&gt;NUMVALを&lt;/a&gt;末尾符号フォーマットのどれもない以外は）名誉ある。</target>
        </trans-unit>
        <trans-unit id="b2beffe69683166de2996cc3ad1d307a3b738cdc" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is coded, the value of the identifier will serve as the File Location String that will identify the data file.</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; 符号化され、識別子の値は、データファイルを特定するファイルの場所文字列となります。</target>
        </trans-unit>
        <trans-unit id="65401601e1b5f316be7956b04fef58574812c3c4" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is defined as numeric edited, entered data must be acceptable as &lt;code&gt;NUMVAL-C&lt;/code&gt; intrinsic function (see &lt;a href=&quot;#NUMVAL_002dC&quot;&gt;NUMVAL-C&lt;/a&gt;) input (again, no decimal points are allowed). The value stored into &lt;var&gt;identifier-1&lt;/var&gt; will be as if the input were passed to that function.</source>
          <target state="translated">&lt;var&gt;identifier-1&lt;/var&gt; が数値編集として定義されている場合、入力されたデータは &lt;code&gt;NUMVAL-C&lt;/code&gt; 組み込み関数（&lt;a href=&quot;#NUMVAL_002dC&quot;&gt;NUMVAL-Cを&lt;/a&gt;参照）入力として受け入れられる必要があります（ここでも小数点は使用できません）。 &lt;var&gt;identifier-1&lt;/var&gt; 格納される値は、入力がその関数に渡されたかのようになります。</target>
        </trans-unit>
        <trans-unit id="f0b993fc56bd4161c6cb118462c21f8a02792ac0" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is defined as numeric, entered data must be acceptable as &lt;code&gt;NUMVAL&lt;/code&gt; intrinsic function (see &lt;a href=&quot;#NUMVAL&quot;&gt;NUMVAL&lt;/a&gt;) input (no decimal points are allowed, however). The value stored into &lt;var&gt;identifier-1&lt;/var&gt; will be as if the input were passed to that function.</source>
          <target state="translated">&lt;var&gt;identifier-1&lt;/var&gt; が数値として定義されている場合、入力されたデータは &lt;code&gt;NUMVAL&lt;/code&gt; 組み込み関数（&lt;a href=&quot;#NUMVAL&quot;&gt;NUMVALを&lt;/a&gt;参照）入力として受け入れられる必要があります（ただし、小数点は使用できません）。 &lt;var&gt;identifier-1&lt;/var&gt; 格納される値は、入力がその関数に渡されたかのようになります。</target>
        </trans-unit>
        <trans-unit id="e6e9927c6cd1c05d327eeb65ca2308723fd015a5" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is defined in the &lt;code&gt;SCREEN SECTION&lt;/code&gt; (see &lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTION&lt;/a&gt;), any &lt;code&gt;AT&lt;/code&gt;, &lt;var&gt;Attribute-Specification&lt;/var&gt; and &lt;code&gt;WITH&lt;/code&gt; clauses will be ignored. All field definition, cursor positioning and screen control will occur as a result of the screen section definition of &lt;var&gt;identifier-1&lt;/var&gt;.</source>
          <target state="translated">場合は &lt;var&gt;identifier-1&lt;/var&gt; で定義されている &lt;code&gt;SCREEN SECTION&lt;/code&gt; （参照&lt;a href=&quot;#SCREEN-SECTION&quot;&gt;画面節を&lt;/a&gt;）、任意の &lt;code&gt;AT&lt;/code&gt; 、 &lt;var&gt;Attribute-Specification&lt;/var&gt; および &lt;code&gt;WITH&lt;/code&gt; 句は無視されます。 &lt;var&gt;identifier-1&lt;/var&gt; 画面セクション定義の結果として、すべてのフィールド定義、カーソル位置、および画面制御が行われます。</target>
        </trans-unit>
        <trans-unit id="a0be8c8fcd431f360b0c36422f8f1d1039c159c1" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is defined in the &lt;code&gt;SCREEN SECTION&lt;/code&gt; (see &lt;a href=&quot;#SCREEN-SECTION&quot;&gt;SCREEN SECTION&lt;/a&gt;), any &lt;code&gt;AT&lt;/code&gt;, &lt;var&gt;Attribute-Specification&lt;/var&gt;, &lt;code&gt;LOWER&lt;/code&gt;, &lt;code&gt;UPPER&lt;/code&gt; or &lt;code&gt;SCROLL&lt;/code&gt; clauses will be ignored. In these cases, an implied &lt;code&gt;DISPLAY&lt;/code&gt; (see &lt;a href=&quot;#DISPLAY-screen_002ddata_002ditem&quot;&gt;DISPLAY screen-data-item&lt;/a&gt;) of &lt;var&gt;identifier-1&lt;/var&gt; will occur before input is accepted. Coding an explicit &lt;code&gt;DISPLAY identifier-1&lt;/code&gt; before an &lt;code&gt;ACCEPT identifier-1&lt;/code&gt; is redundant and will incur the performance penalty of painting the screen contents twice.</source>
          <target state="translated">場合は &lt;var&gt;identifier-1&lt;/var&gt; で定義されている &lt;code&gt;SCREEN SECTION&lt;/code&gt; （参照&lt;a href=&quot;#SCREEN-SECTION&quot;&gt;画面節を&lt;/a&gt;）、任意の &lt;code&gt;AT&lt;/code&gt; 、 &lt;var&gt;Attribute-Specification&lt;/var&gt; 、 &lt;code&gt;LOWER&lt;/code&gt; 、 &lt;code&gt;UPPER&lt;/code&gt; または &lt;code&gt;SCROLL&lt;/code&gt; 句は無視されます。これらの場合、入力が受け入れられる前に、 &lt;var&gt;identifier-1&lt;/var&gt; 暗黙の &lt;code&gt;DISPLAY&lt;/code&gt; （&lt;a href=&quot;#DISPLAY-screen_002ddata_002ditem&quot;&gt;DISPLAY screen-data-itemを&lt;/a&gt;参照）が発生します。 &lt;code&gt;ACCEPT identifier-1&lt;/code&gt; &lt;code&gt;DISPLAY identifier-1&lt;/code&gt; 前に明示的なDISPLAY識別子-1をコーディングすることは冗長であり、画面の内容を2回ペイントするというパフォーマンスの低下が発生します。</target>
        </trans-unit>
        <trans-unit id="956b6a2cf4a9431c2521f13980ff654199ac7292" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; is used to specify either an absolute or relative column position, &lt;var&gt;identifier-1&lt;/var&gt; must be defined as a numeric item of any &lt;code&gt;USAGE&lt;/code&gt; (see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) other than &lt;code&gt;COMPUTATIONAL-1&lt;/code&gt; or &lt;code&gt;COMPUTATIONAL-2&lt;/code&gt;, without editing symbols. The value of &lt;var&gt;identifier-1&lt;/var&gt; at the time the screen data item is presented must be 1 or greater. Note that a &lt;code&gt;COMPUTATIONAL-1&lt;/code&gt; or &lt;code&gt;COMPUTATIONAL-2&lt;/code&gt; identifier will be accepted by the compiler, but will produce unpredictable results at run-time.</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; 絶対的または相対列位置のいずれかを指定するために使用され、 &lt;var&gt;identifier-1&lt;/var&gt; 任意の数値項目として定義しなければならない &lt;code&gt;USAGE&lt;/code&gt; （参照&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;除く） &lt;code&gt;COMPUTATIONAL-1&lt;/code&gt; または &lt;code&gt;COMPUTATIONAL-2&lt;/code&gt; のシンボルを編集せずに、。画面データ項目が表示されるときの &lt;var&gt;identifier-1&lt;/var&gt; の値は1以上でなければなりません。 &lt;code&gt;COMPUTATIONAL-1&lt;/code&gt; または &lt;code&gt;COMPUTATIONAL-2&lt;/code&gt; IDはコンパイラーによって受け入れられますが、実行時に予測できない結果を生成することに注意してください。</target>
        </trans-unit>
        <trans-unit id="8935f15a51dfdcb07032c577d7b0309e385b373c" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; or any screen data item subordinate to it are defined as numeric edited, entered data must be acceptable as &lt;code&gt;NUMVAL-C&lt;/code&gt; intrinsic function (see &lt;a href=&quot;#NUMVAL_002dC&quot;&gt;NUMVAL-C&lt;/a&gt;) input (again, no decimal points are allowed). The value stored into the screen data item will be as if the input were passed to that function.</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; 又はそれへの画面データ項目の下位の編集数値として定義され、入力されたデータは、許容されなければならない &lt;code&gt;NUMVAL-C&lt;/code&gt; 組み込み関数（参照&lt;a href=&quot;#NUMVAL_002dC&quot;&gt;NUMVAL-C&lt;/a&gt;入力（再び、全く小数点ポイントが許可されない））を。画面データ項目に格納される値は、入力がその関数に渡されたかのようになります。</target>
        </trans-unit>
        <trans-unit id="31b0d79efa4947cd92b96b43401a7ba32221e382" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;identifier-1&lt;/var&gt; or any screen data item subordinate to it are defined as numeric, entered data must be acceptable as &lt;code&gt;NUMVAL&lt;/code&gt; intrinsic function (see &lt;a href=&quot;#NUMVAL&quot;&gt;NUMVAL&lt;/a&gt;) input (no decimal points are allowed, however). The value stored into the screen data item will be as if the input were passed to that function.</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; 又はそれへの画面データ項目に従属を数値として定義され、入力されたデータは、許容されなければならない &lt;code&gt;NUMVAL&lt;/code&gt; 固有関数（参照&lt;a href=&quot;#NUMVAL&quot;&gt;NUMVAL&lt;/a&gt;（なし小数点がしかし、許可されていない）入力）。画面データ項目に格納される値は、入力がその関数に渡されたかのようになります。</target>
        </trans-unit>
        <trans-unit id="75a91a06fe865c44309aca591d5aa524e8b8ce58" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;literal-1&lt;/var&gt; is coded, the value of the literal will serve as the File Location String that will identify the data file.</source>
          <target state="translated">場合は &lt;var&gt;literal-1&lt;/var&gt; コード化され、リテラルの値は、データファイルを特定するファイルの場所文字列として機能します。</target>
        </trans-unit>
        <trans-unit id="7685ca3db5a671108387e10e7c45ec2601aa2125" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;literal-1&lt;/var&gt; is specified, only the &lt;code&gt;TALLYING&lt;/code&gt; clause may be specified.</source>
          <target state="translated">&lt;var&gt;literal-1&lt;/var&gt; が指定されている場合、 &lt;code&gt;TALLYING&lt;/code&gt; 句のみを指定できます。</target>
        </trans-unit>
        <trans-unit id="feef07f33e68757737bb23c63cff57a7595d6eb9" translate="yes" xml:space="preserve">
          <source>If &lt;var&gt;word-1&lt;/var&gt; (a syntactically valid word not duplicating a reserved or user-defined word) is coded, and a &lt;var&gt;Type&lt;/var&gt; is &lt;code&gt;EXTERNAL&lt;/code&gt;, then &lt;var&gt;word-1&lt;/var&gt; itself will serve as the File Location String that will identify the data file. If, however, a &lt;var&gt;Type&lt;/var&gt; of &lt;code&gt;EXTERNAL&lt;/code&gt; was</source>
          <target state="translated">場合 &lt;var&gt;word-1&lt;/var&gt; （構文的に有効な単語は予約またはユーザ定義ワードを複製しない）符号化され、そして &lt;var&gt;Type&lt;/var&gt; ある &lt;code&gt;EXTERNAL&lt;/code&gt; 、次いで &lt;var&gt;word-1&lt;/var&gt; 自体は、データファイルを特定するファイルの場所文字列となります。場合は、しかし、 &lt;var&gt;Type&lt;/var&gt; の &lt;code&gt;EXTERNAL&lt;/code&gt; ました</target>
        </trans-unit>
        <trans-unit id="a4c0ae6969ecd1edf278dc7c43adf6ccf840a59b" translate="yes" xml:space="preserve">
          <source>If CALL &quot;literal&quot; is used, the subroutine can only be located and linked with the calling program at compilation time.</source>
          <target state="translated">CALL &quot;リテラル &quot;を使用した場合、サブルーチンはコンパイル時に呼び出されたプログラムの位置を特定してリンクすることしかできません。</target>
        </trans-unit>
        <trans-unit id="fb834ae0ee1fee06659da54155901a048c8ab107" translate="yes" xml:space="preserve">
          <source>If CALL &quot;literal&quot; is used, the subroutine will be located and linked in with the calling program at compile time or may be dynamically located and loaded at execution time, depending on compiler switch settings and operating system capabilities.</source>
          <target state="translated">CALL &quot;リテラル &quot;を使用した場合、コンパイル時にサブルーチンは呼び出し元のプログラムとリンクして配置されますが、コンパイラのスイッチ設定やオペレーティングシステムの機能に応じて、実行時に動的に配置されてロードされることもあります。</target>
        </trans-unit>
        <trans-unit id="1c0a19ff2f39be755da80b6e4db03b3261af8ab0" translate="yes" xml:space="preserve">
          <source>If COB_SET_TRACE is set to Y, then tracing will always occur regardless of the presence of READY TRACE or RESET TRACE so in effect they will have no action on program execution.</source>
          <target state="translated">COB_SET_TRACEがYに設定されている場合、READY TRACEやRESET TRACEの存在に関わらず、トレースは常に発生するので、事実上、これらはプログラムの実行には何の影響も与えない。</target>
        </trans-unit>
        <trans-unit id="6d1a23e212f8e65bc46791457b48cc5d7fbdbbe2" translate="yes" xml:space="preserve">
          <source>If Replace Mode is currently active, a &lt;code&gt;REPLACE LAST OFF.&lt;/code&gt; will replace the current replace specification(s) with those popped off the top of the stack. If there were no replace specification(s) on the stack, the effect will be as if a &lt;code&gt;REPLACE OFF.&lt;/code&gt; had been coded.</source>
          <target state="translated">置換モードが現在アクティブな場合、 &lt;code&gt;REPLACE LAST OFF.&lt;/code&gt; 現在のreplace仕様を、スタックの一番上からポップされたものに置き換えます。スタックに置換仕様がなかった場合、その効果は &lt;code&gt;REPLACE OFF.&lt;/code&gt; ようになります。コーディングされていました。</target>
        </trans-unit>
        <trans-unit id="0bc67cadf74afefc80e1f9092f0b4284c7c21baf" translate="yes" xml:space="preserve">
          <source>If Replace Mode is currently active, a &lt;code&gt;REPLACE OFF.&lt;/code&gt; will deactivate Replace Mode and discard any replace specification(s) on the stack. The compiler will henceforth operate as if no &lt;code&gt;REPLACE&lt;/code&gt; had ever been encountered, until such time as another Format 1 &lt;code&gt;REPLACE&lt;/code&gt; is encountered.</source>
          <target state="translated">置換モードが現在アクティブな場合は、 &lt;code&gt;REPLACE OFF.&lt;/code&gt; 置換モードを非アクティブ化し、スタック上の置換仕様を破棄します。以降、コンパイラは、別のフォーマット1 &lt;code&gt;REPLACE&lt;/code&gt; が検出されるまで、 &lt;code&gt;REPLACE&lt;/code&gt; が検出されなかったかのように動作します。</target>
        </trans-unit>
        <trans-unit id="fca0edd85d905b4998e39dbc0abfe08d59abf9e2" translate="yes" xml:space="preserve">
          <source>If Replace Mode is currently active, a&lt;code&gt;REPLACE LAST OFF.&lt;/code&gt;will replace the current replace specification(s) with those popped off the top of the stack. If there were no replace specification(s) on the stack, the effect will be as if a&lt;code&gt;REPLACE OFF.&lt;/code&gt;had been coded.</source>
          <target state="translated">置換モードが現在アクティブな場合、 &lt;code&gt;REPLACE LAST OFF.&lt;/code&gt; 現在の置換仕様をスタックのトップからポップされたものに置き換えます。スタックに置換仕様がない場合、効果は &lt;code&gt;REPLACE OFF.&lt;/code&gt; コーディングされていました。</target>
        </trans-unit>
        <trans-unit id="3aa454bf040b4488335636d3825b242cd96c6894" translate="yes" xml:space="preserve">
          <source>If Replace Mode is currently active, a&lt;code&gt;REPLACE OFF.&lt;/code&gt;will deactivate Replace Mode and discard any replace specification(s) on the stack. The compiler will henceforth operate as if no&lt;code&gt;REPLACE&lt;/code&gt;had ever been encountered, until such time as another Format 1&lt;code&gt;REPLACE&lt;/code&gt;is encountered.</source>
          <target state="translated">置換モードが現在アクティブな場合、 &lt;code&gt;REPLACE OFF.&lt;/code&gt; 置換モードを無効にし、スタック上の置換仕様を破棄します。以降、コンパイラーは、別のFormat 1 &lt;code&gt;REPLACE&lt;/code&gt; が検出されるまで、 &lt;code&gt;REPLACE&lt;/code&gt; が検出されなかったかのように動作します。</target>
        </trans-unit>
        <trans-unit id="80910c1b2c959a05703945d16cb5a530953c00b1" translate="yes" xml:space="preserve">
          <source>If Replace Mode is currently inactive, the Format 2 &lt;code&gt;REPLACE&lt;/code&gt; statement will be ignored.</source>
          <target state="translated">置換モードが現在非アクティブである場合、フォーマット &lt;code&gt;REPLACE&lt;/code&gt; ステートメントは無視されます。</target>
        </trans-unit>
        <trans-unit id="f9f8b4a7fa7d08d0000f216b49dbe0fdb7aba40b" translate="yes" xml:space="preserve">
          <source>If Replace Mode is currently inactive, the Format 2 REPLACE statement will be ignored.</source>
          <target state="translated">置換モードが現在アクティブでない場合、フォーマット2 REPLACE文は無視されます。</target>
        </trans-unit>
        <trans-unit id="0f7541fee62285ef531295f6b5bcda473caf4aa3" translate="yes" xml:space="preserve">
          <source>If a  &lt;code&gt;CONVERTING&lt;/code&gt; clause is specified, neither the  &lt;code&gt;TALLYING&lt;/code&gt; nor  &lt;code&gt;REPLACING&lt;/code&gt; clauses may be used.</source>
          <target state="translated">&lt;code&gt;CONVERTING&lt;/code&gt; 句が指定されている場合、 &lt;code&gt;TALLYING&lt;/code&gt; 句と &lt;code&gt;REPLACING&lt;/code&gt; 句のどちらも 使用できません。</target>
        </trans-unit>
        <trans-unit id="02d270f35c2331a3f0b66309eedab53f64314826" translate="yes" xml:space="preserve">
          <source>If a &amp;lt;</source>
          <target state="translated">&amp;lt;</target>
        </trans-unit>
        <trans-unit id="eab9e954d4363fe95501767a50e10db235e4192f" translate="yes" xml:space="preserve">
          <source>If a &amp;lt;&amp;lt;</source>
          <target state="translated">&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="fc1c32024a481de06916a31d66dbe9f8f79db74e" translate="yes" xml:space="preserve">
          <source>If a &amp;rsquo;</source>
          <target state="translated">もし '</target>
        </trans-unit>
        <trans-unit id="de6289cc04bef66b51bd9ae8b980cf5848e4a2b3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;DEFAULT&lt;/code&gt; clause is specified, any remaining uninitialized members of the field list will be initialized according to the default for their class (numeric and numeric-edited are initialized to &lt;code&gt;ZERO&lt;/code&gt;, all others are initialized to &lt;code&gt;SPACES&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;DEFAULT&lt;/code&gt; 句が指定されている場合、フィールドリストの残りの初期化されていないメンバーは、クラスのデフォルトに従って初期化されます（数値および数値編集は &lt;code&gt;ZERO&lt;/code&gt; に初期化され、その他はすべて &lt;code&gt;SPACES&lt;/code&gt; 初期化されます）。</target>
        </trans-unit>
        <trans-unit id="b7df430cdd4beaec68b52b642faa847848df1390" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;GO TO&lt;/code&gt; is executed within the scope of&amp;hellip;</source>
          <target state="translated">場合は &lt;code&gt;GO TO&lt;/code&gt; はの範囲内で実行されます...</target>
        </trans-unit>
        <trans-unit id="086b6db77bb8a4063af573e2157e345885d882c7" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;LINAGE&lt;/code&gt; clause is also specified, Values specified for &lt;code&gt;LINAGE IS&lt;/code&gt; and &lt;code&gt;FOOTING AT&lt;/code&gt; will be ignored. The values of &lt;code&gt;LINES AT BOTTOM&lt;/code&gt; and &lt;code&gt;LINES AT TOP&lt;/code&gt;, if any, will be honoured.</source>
          <target state="translated">場合 &lt;code&gt;LINAGE&lt;/code&gt; の句も指定されている、に指定された値 &lt;code&gt;LINAGE IS&lt;/code&gt; と &lt;code&gt;FOOTING AT&lt;/code&gt; は無視されます。 &lt;code&gt;LINES AT BOTTOM&lt;/code&gt; および &lt;code&gt;LINES AT TOP&lt;/code&gt; の値があれば、それが尊重されます。</target>
        </trans-unit>
        <trans-unit id="5be09d0f0d2567af382c50f46015e5dfada291d2" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;REMAINDER&lt;/code&gt; clause is specified, the value of the one and only &lt;var&gt;identifier-3&lt;/var&gt; (as stated earlier, if &lt;code&gt;REMAINDER&lt;/code&gt; is specified there may only be a single &lt;var&gt;identifier-3&lt;/var&gt; coded on the statement) after it was assigned a value according to the previous rule will be multiplied by the value of &lt;var&gt;literal-1&lt;/var&gt; or &lt;var&gt;identifier-1&lt;/var&gt;; that result is then subtracted from the value of &lt;var&gt;literal-2&lt;/var&gt; or &lt;var&gt;identifier-2&lt;/var&gt; and</source>
          <target state="translated">&lt;code&gt;REMAINDER&lt;/code&gt; 句が指定されている場合、前の手順に従って値が割り当てられた後の唯一の &lt;var&gt;identifier-3&lt;/var&gt; の値（前述のように、 &lt;code&gt;REMAINDER&lt;/code&gt; が指定されている場合、ステートメントにコーディングされている &lt;var&gt;identifier-3&lt;/var&gt; は1つだけです）。ルールは、 &lt;var&gt;literal-1&lt;/var&gt; または &lt;var&gt;identifier-1&lt;/var&gt; の値で乗算されます。その結果は、その後の値から減算される &lt;var&gt;literal-2&lt;/var&gt; 又は &lt;var&gt;identifier-2&lt;/var&gt; 及び</target>
        </trans-unit>
        <trans-unit id="84aa3649a06583fe904bb0cbe1044a6769ee21ac" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;REMAINDER&lt;/code&gt; clause is specified, the value of the one and only &lt;var&gt;identifier-3&lt;/var&gt; (as stated earlier, if &lt;code&gt;REMAINDER&lt;/code&gt; is specified there may only be a single &lt;var&gt;identifier-3&lt;/var&gt; coded on the statement) after it was assigned a value according to the previous rule will be multiplied by the value of &lt;var&gt;literal-2&lt;/var&gt; or &lt;var&gt;identifier-2&lt;/var&gt;; that result is then subtracted from the value of &lt;var&gt;literal-1&lt;/var&gt; or &lt;var&gt;identifier-1&lt;/var&gt; and</source>
          <target state="translated">&lt;code&gt;REMAINDER&lt;/code&gt; 句が指定されている場合、前の手順に従って値が割り当てられた後の唯一の &lt;var&gt;identifier-3&lt;/var&gt; の値（前述のように、 &lt;code&gt;REMAINDER&lt;/code&gt; が指定されている場合、ステートメントにコーディングされている &lt;var&gt;identifier-3&lt;/var&gt; は1つだけです）。ルールは、 &lt;var&gt;literal-2&lt;/var&gt; または &lt;var&gt;identifier-2&lt;/var&gt; の値で乗算されます。その結果は、その後の値から減算される &lt;var&gt;literal-1&lt;/var&gt; 又は &lt;var&gt;identifier-1&lt;/var&gt; 及び</target>
        </trans-unit>
        <trans-unit id="c7594e0aab5f388821a150d339e4244378eb19f3" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;REPLACING&lt;/code&gt; clause is specified on the &lt;code&gt;INITIALIZE&lt;/code&gt; statement, each qualifying member of the field list that was not already initialized by a &lt;code&gt;VALUE&lt;/code&gt; clause, if any, will be initialized to the specified &lt;var&gt;literal-1&lt;/var&gt; or &lt;var&gt;identifier-1&lt;/var&gt; value.</source>
          <target state="translated">場合 &lt;code&gt;REPLACING&lt;/code&gt; 句が指定されている上 &lt;code&gt;INITIALIZE&lt;/code&gt; 文で、すでにによって初期化されなかったフィールドリストの各予選メンバー &lt;code&gt;VALUE&lt;/code&gt; の句は、もしあれば、指定に初期化されます &lt;var&gt;literal-1&lt;/var&gt; または &lt;var&gt;identifier-1&lt;/var&gt; 値。</target>
        </trans-unit>
        <trans-unit id="33813c77e109dc9b4f61adc0fc691a4853fcf07b" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;TALLYING&lt;/code&gt; clause is coded, &lt;var&gt;identifier-8&lt;/var&gt; will be incremented by 1 each time a destination field is populated.</source>
          <target state="translated">&lt;code&gt;TALLYING&lt;/code&gt; 句がコーディングされている場合、宛先フィールドにデータが入力されるたびに、 &lt;var&gt;identifier-8&lt;/var&gt; が1ずつ増加します。</target>
        </trans-unit>
        <trans-unit id="cfbcf8874de3c3aaa304872f76604715abf41f16" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; (see &lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVES&lt;/a&gt;) section exists, the code within it will be disabled unless this environment variable is set to a value of &amp;lsquo;</source>
          <target state="translated">場合は &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; （参照&lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVESを&lt;/a&gt;）セクションが存在し、この環境変数が'の値に設定されていない限り、その内のコードは無効になります</target>
        </trans-unit>
        <trans-unit id="cfeeade2dc63344bcaf30d0b6c55fa29ff959fe6" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;VALUE&lt;/code&gt; clause is specified on the &lt;code&gt;INITIALIZE&lt;/code&gt; statement, each qualifying member of the field list having a compile-time &lt;code&gt;VALUE&lt;/code&gt; (see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) specified in its definition will be initialized to that value. Field list members with &lt;code&gt;VALUE&lt;/code&gt; clauses will qualify for this treatment as follows:</source>
          <target state="translated">&lt;code&gt;INITIALIZE&lt;/code&gt; ステートメントで &lt;code&gt;VALUE&lt;/code&gt; 句が指定されている場合、その定義で指定されたコンパイル時の &lt;code&gt;VALUE&lt;/code&gt; （&lt;a href=&quot;#VALUE&quot;&gt;VALUEを&lt;/a&gt;参照）を持つフィールド・リストの各修飾メンバーは、その値に初期化されます。 &lt;code&gt;VALUE&lt;/code&gt; 句のあるフィールドリストメンバーは、次のようにこの処理の対象となります。</target>
        </trans-unit>
        <trans-unit id="b332c79b04dd17e719157d2d796d16e81fdbe72a" translate="yes" xml:space="preserve">
          <source>If a &lt;var&gt;Locator&lt;/var&gt; clause is coded, the COBOL file &lt;var&gt;file-name-1&lt;/var&gt; will be attached to a data file within any file system that is mounted and available to the executing program at the time &lt;var&gt;file-name-1&lt;/var&gt; is opened. How that file is identified varies, depending upon the specified &lt;var&gt;Locator&lt;/var&gt;, as follows:</source>
          <target state="translated">場合 &lt;var&gt;Locator&lt;/var&gt; 句が符号化され、COBOLファイルの &lt;var&gt;file-name-1&lt;/var&gt; 一度に実行されるプログラムに搭載され、利用可能な任意のファイルシステム内のデータファイルに添付される &lt;var&gt;file-name-1&lt;/var&gt; 開かれます。そのファイルの識別方法は、指定した &lt;var&gt;Locator&lt;/var&gt; によって次のように異なります。</target>
        </trans-unit>
        <trans-unit id="54691cdf72f92aa16f748c67998097c3dcd32cbc" translate="yes" xml:space="preserve">
          <source>If a dynamically-loadable module unloaded by the &lt;code&gt;CANCEL&lt;/code&gt; statement is subsequently re-executed, all data division storage for that module will once again be in its initial state.</source>
          <target state="translated">&lt;code&gt;CANCEL&lt;/code&gt; ステートメントによってアンロードされた動的にロード可能なモジュールがその後再実行されると、そのモジュールのすべてのデータ分割ストレージは再び初期状態になります。</target>
        </trans-unit>
        <trans-unit id="edb4a54100b677ae4d121fffad6d12711ca6c737" translate="yes" xml:space="preserve">
          <source>If a dynamically-loadable module unloaded by the&lt;code&gt;CANCEL&lt;/code&gt;statement is subsequently re-executed, all data division storage for that module will once again be in it&amp;rsquo;s initial state.</source>
          <target state="translated">&lt;code&gt;CANCEL&lt;/code&gt; ステートメントによってアンロードされた動的にロード可能なモジュールがその後再実行されると、そのモジュールのすべてのデータ分割ストレージは再び初期状態になります。</target>
        </trans-unit>
        <trans-unit id="5eebbcc68042ec2300934665674cc9484d03e969" translate="yes" xml:space="preserve">
          <source>If a numeric literal or &lt;code&gt;PIC 9&lt;/code&gt; identifier is specified as an argument, decimal points, if any, will be removed and negative signs in &lt;code&gt;PIC S9&lt;/code&gt; fields or numeric literals will be inserted as defined by the &lt;code&gt;SIGN IS&lt;/code&gt; (see &lt;a href=&quot;#SIGN-IS&quot;&gt;SIGN IS&lt;/a&gt;) clause (or absence thereof) of the field. Numeric literals are processed as if &lt;code&gt;SIGN IS TRAILING SEPARATE&lt;/code&gt; were in effect.</source>
          <target state="translated">数値リテラルまたは &lt;code&gt;PIC 9&lt;/code&gt; 識別子が引数として指定されている場合、小数点がある場合は削除され、 &lt;code&gt;PIC S9&lt;/code&gt; フィールドまたは数値リテラルの負の符号が &lt;code&gt;SIGN IS&lt;/code&gt; （&lt;a href=&quot;#SIGN-IS&quot;&gt;SIGN ISを&lt;/a&gt;参照）句（またはその不在）フィールドの。数値リテラルは、 &lt;code&gt;SIGN IS TRAILING SEPARATE&lt;/code&gt; が有効であるかのように処理されます。</target>
        </trans-unit>
        <trans-unit id="df6f3afc62331cf6c1dea91965aa4ef057173188" translate="yes" xml:space="preserve">
          <source>If a numeric literal or&lt;code&gt;PIC 9&lt;/code&gt;identifier is specified as an argument, decimal points, if any, will be removed and negative signs in&lt;code&gt;PIC S9&lt;/code&gt;fields or numeric literals will be inserted as defined by the&lt;code&gt;SIGN IS&lt;/code&gt;(see &lt;a href=&quot;#SIGN-IS&quot;&gt;SIGN IS&lt;/a&gt;) clause (or absence thereof) of the field. Numeric literals are processed as if&lt;code&gt;SIGN IS TRAILING SEPARATE&lt;/code&gt;were in effect.</source>
          <target state="translated">数値リテラルまたは &lt;code&gt;PIC 9&lt;/code&gt; 識別子が引数として指定されている場合、小数点があれば削除され、 &lt;code&gt;PIC S9&lt;/code&gt; フィールドまたは数値リテラルの負符号が &lt;code&gt;SIGN IS&lt;/code&gt; （&lt;a href=&quot;#SIGN-IS&quot;&gt;SIGN ISを&lt;/a&gt;参照）句の定義に従って挿入されます（またはフィールドの不在）。数値リテラルは、あたかも &lt;code&gt;SIGN IS TRAILING SEPARATE&lt;/code&gt; が有効であるかのように処理されます。</target>
        </trans-unit>
        <trans-unit id="b18f2b8fc696ea2a37c9ab7e4932c0f375cc7203" translate="yes" xml:space="preserve">
          <source>If a report data item&amp;rsquo;s description includes the &lt;code&gt;SOURCE&lt;/code&gt; (see &lt;a href=&quot;#SOURCE&quot;&gt;SOURCE&lt;/a&gt;), &lt;code&gt;SUM&lt;/code&gt; (see &lt;a href=&quot;#SUM&quot;&gt;SUM&lt;/a&gt;) or &lt;code&gt;VALUE&lt;/code&gt; (see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clause but has no &lt;code&gt;COLUMN&lt;/code&gt; clause, &lt;code&gt;COLUMN PLUS 1&lt;/code&gt; will be assumed.</source>
          <target state="translated">レポートデータ項目の記述が含まれている場合は &lt;code&gt;SOURCE&lt;/code&gt; （参照&lt;a href=&quot;#SOURCE&quot;&gt;ソース&lt;/a&gt;）、 &lt;code&gt;SUM&lt;/code&gt; は、（参照&lt;a href=&quot;#SUM&quot;&gt;SUM&lt;/a&gt;又は） &lt;code&gt;VALUE&lt;/code&gt; （参照&lt;a href=&quot;#VALUE&quot;&gt;値&lt;/a&gt;）句が、全く持っていない &lt;code&gt;COLUMN&lt;/code&gt; の句、 &lt;code&gt;COLUMN PLUS 1&lt;/code&gt; 仮定されます。</target>
        </trans-unit>
        <trans-unit id="57490b79cb430dd4450134ac2677f6cf11e26604" translate="yes" xml:space="preserve">
          <source>If a report data item&amp;rsquo;s description includes the&lt;code&gt;SOURCE&lt;/code&gt;(see &lt;a href=&quot;#SOURCE&quot;&gt;SOURCE&lt;/a&gt;),&lt;code&gt;SUM&lt;/code&gt;(see &lt;a href=&quot;#SUM&quot;&gt;SUM&lt;/a&gt;) or&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clause but has no&lt;code&gt;COLUMN&lt;/code&gt;clause,&lt;code&gt;COLUMN PLUS 1&lt;/code&gt;will be assumed.</source>
          <target state="translated">レポートデータ項目の記述が含まれている場合は &lt;code&gt;SOURCE&lt;/code&gt; （参照&lt;a href=&quot;#SOURCE&quot;&gt;ソース&lt;/a&gt;）、 &lt;code&gt;SUM&lt;/code&gt; は、（参照&lt;a href=&quot;#SUM&quot;&gt;SUM&lt;/a&gt;又は） &lt;code&gt;VALUE&lt;/code&gt; （参照&lt;a href=&quot;#VALUE&quot;&gt;値&lt;/a&gt;）句が、全く持っていない &lt;code&gt;COLUMN&lt;/code&gt; の句、 &lt;code&gt;COLUMN PLUS 1&lt;/code&gt; 仮定されます。</target>
        </trans-unit>
        <trans-unit id="8e78fe002204288bdbf727c66cab2b49730fadeb" translate="yes" xml:space="preserve">
          <source>If a screen data item&amp;rsquo;s description includes the &lt;code&gt;FROM&lt;/code&gt; (see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;), &lt;code&gt;TO&lt;/code&gt; (see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;), &lt;code&gt;USING&lt;/code&gt; (see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) or &lt;code&gt;VALUE&lt;/code&gt; (see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clause but has no &lt;code&gt;COLUMN&lt;/code&gt; clause, the new screen field will begin at the column coordinate of the last character of the previous field.</source>
          <target state="translated">画面データ項目の記述が含まれている場合 &lt;code&gt;FROM&lt;/code&gt; （参照&lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;）、 &lt;code&gt;TO&lt;/code&gt; （参照&lt;a href=&quot;#TO&quot;&gt;TOを&lt;/a&gt;）、 &lt;code&gt;USING&lt;/code&gt; （参照&lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;）または &lt;code&gt;VALUE&lt;/code&gt; （参照&lt;a href=&quot;#VALUE&quot;&gt;値&lt;/a&gt;）句が、全く持っていない &lt;code&gt;COLUMN&lt;/code&gt; の句を、新たなスクリーン・フィールドは、座標列で開始します前のフィールドの最後の文字。</target>
        </trans-unit>
        <trans-unit id="2ff794a9c9880c18c06d094247c0f0194d807cda" translate="yes" xml:space="preserve">
          <source>If a screen data item&amp;rsquo;s description includes the &lt;code&gt;FROM&lt;/code&gt; (see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;), &lt;code&gt;TO&lt;/code&gt; (see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;), &lt;code&gt;USING&lt;/code&gt; (see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) or &lt;code&gt;VALUE&lt;/code&gt; (see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clause but has no LINE clause, the &amp;ldquo;current screen line&amp;rdquo; will be assumed.</source>
          <target state="translated">画面データ項目の記述が含まれている場合 &lt;code&gt;FROM&lt;/code&gt; （参照&lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;）、 &lt;code&gt;TO&lt;/code&gt; （参照&lt;a href=&quot;#TO&quot;&gt;TOを&lt;/a&gt;）、 &lt;code&gt;USING&lt;/code&gt; （参照&lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;）または &lt;code&gt;VALUE&lt;/code&gt; （参照&lt;a href=&quot;#VALUE&quot;&gt;値&lt;/a&gt;）句が、全くLINE句を持っていない、「現在のスクリーン線」が仮定されます。</target>
        </trans-unit>
        <trans-unit id="71da1ffb9548582f3fa4c8e682811f42638458f2" translate="yes" xml:space="preserve">
          <source>If a screen data item&amp;rsquo;s description includes the&lt;code&gt;FROM&lt;/code&gt;(see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;),&lt;code&gt;TO&lt;/code&gt;(see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;),&lt;code&gt;USING&lt;/code&gt;(see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) or&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clause but has no LINE clause, the &quot;current screen line&quot; will be assumed.</source>
          <target state="translated">画面データ項目の記述が含まれている場合 &lt;code&gt;FROM&lt;/code&gt; （参照&lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;）、 &lt;code&gt;TO&lt;/code&gt; （参照&lt;a href=&quot;#TO&quot;&gt;TOを&lt;/a&gt;）、 &lt;code&gt;USING&lt;/code&gt; （参照&lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;）または &lt;code&gt;VALUE&lt;/code&gt; （参照&lt;a href=&quot;#VALUE&quot;&gt;値&lt;/a&gt;）句が、全くLINE句を持っていない、「現在のスクリーン線」が仮定されます。</target>
        </trans-unit>
        <trans-unit id="48d3ea6a5c04f441a3bbe9ad4aa57d07cef44e81" translate="yes" xml:space="preserve">
          <source>If a screen data item&amp;rsquo;s description includes the&lt;code&gt;FROM&lt;/code&gt;(see &lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;),&lt;code&gt;TO&lt;/code&gt;(see &lt;a href=&quot;#TO&quot;&gt;TO&lt;/a&gt;),&lt;code&gt;USING&lt;/code&gt;(see &lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;) or&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) clause but has no&lt;code&gt;COLUMN&lt;/code&gt;clause, the new screen field will begin at the column coordinate of the last character of the previous field.</source>
          <target state="translated">画面データ項目の記述が含まれている場合 &lt;code&gt;FROM&lt;/code&gt; （参照&lt;a href=&quot;#FROM&quot;&gt;FROM&lt;/a&gt;）、 &lt;code&gt;TO&lt;/code&gt; （参照&lt;a href=&quot;#TO&quot;&gt;TOを&lt;/a&gt;）、 &lt;code&gt;USING&lt;/code&gt; （参照&lt;a href=&quot;#USING&quot;&gt;USING&lt;/a&gt;）または &lt;code&gt;VALUE&lt;/code&gt; （参照&lt;a href=&quot;#VALUE&quot;&gt;値&lt;/a&gt;）句が、全く持っていない &lt;code&gt;COLUMN&lt;/code&gt; の句を、新たなスクリーン・フィールドは、座標列で開始します前のフィールドの最後の文字。</target>
        </trans-unit>
        <trans-unit id="59f4cb284f3687d766f621905e37ba2b4393b002" translate="yes" xml:space="preserve">
          <source>If a subprogram does not expect any arguments, it should not have a &lt;code&gt;USING&lt;/code&gt; clause specified on its procedure division header.</source>
          <target state="translated">サブプログラムが引数を予期しない場合は、プロシージャの除算ヘッダーに &lt;code&gt;USING&lt;/code&gt; 句を指定しないでください。</target>
        </trans-unit>
        <trans-unit id="1ecf4f102cec092a989e853dbb05716d18d10735" translate="yes" xml:space="preserve">
          <source>If a subprogram does not expect any arguments, it should not have a&lt;code&gt;USING&lt;/code&gt;clause specified on it&amp;rsquo;s procedure division header.</source>
          <target state="translated">サブプログラムが引数を期待しない場合は、その手続き部ヘッダーに &lt;code&gt;USING&lt;/code&gt; 句を指定しないでください。</target>
        </trans-unit>
        <trans-unit id="92b7f84efc871dae3988a9b29ad470f6b8703091" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;CONVERTING&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CONVERTING&lt;/code&gt; 場合</target>
        </trans-unit>
        <trans-unit id="2032d4dadae8be3fe061169d553c0926d6a379ee" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;DEFAULT&lt;/code&gt;clause is specified, any remaining uninitialized members of the field list will be initialized according to the default for their class (numeric and numeric-edited are initialized to ZERO, all others are initialized to SPACES).</source>
          <target state="translated">&lt;code&gt;DEFAULT&lt;/code&gt; 句が指定されている場合、フィールドリストの初期化されていない残りのメンバーは、それらのクラスのデフォルトに従って初期化されます（数値および数値編集はゼロに初期化され、その他はすべてSPACESに初期化されます）。</target>
        </trans-unit>
        <trans-unit id="7156dc318e4e3f5aa0881e3dc01f136733e5ac30" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;GO TO&lt;/code&gt;is executed within the scope of&amp;hellip;</source>
          <target state="translated">場合は &lt;code&gt;GO TO&lt;/code&gt; はの範囲内で実行されます...</target>
        </trans-unit>
        <trans-unit id="e12db606ad57abcf661cf0d99d8020cc167d9db0" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;LINAGE&lt;/code&gt;clause is also specified, Values specified for&lt;code&gt;LINAGE IS&lt;/code&gt;and&lt;code&gt;FOOTING AT&lt;/code&gt;will be ignored. The values of&lt;code&gt;LINES AT BOTTOM&lt;/code&gt;and&lt;code&gt;LINES AT TOP&lt;/code&gt; if any, will be honoured.</source>
          <target state="translated">&lt;code&gt;LINAGE&lt;/code&gt; 句も指定されている場合、LINAGE &lt;code&gt;LINAGE IS&lt;/code&gt; および &lt;code&gt;FOOTING AT&lt;/code&gt; に指定された値は無視されます。 &lt;code&gt;LINES AT BOTTOM&lt;/code&gt; および &lt;code&gt;LINES AT TOP&lt;/code&gt; があれば、その値が優先されます。</target>
        </trans-unit>
        <trans-unit id="b64062bb86b4cc026b65a0da4120142c176e5547" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;REMAINDER&lt;/code&gt;clause is specified, the value of the one and only &amp;lt;</source>
          <target state="translated">&lt;code&gt;REMAINDER&lt;/code&gt; 句が指定されている場合、唯一の&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c8a9ba4a49154db62b70c94627e9f9a09a50f6f3" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;REPLACING&lt;/code&gt;clause is specified on the&lt;code&gt;INITIALIZE&lt;/code&gt;statement, each qualifying member of the field list that was not already initialized by a&lt;code&gt;VALUE&lt;/code&gt;clause, if any, will be initialized to the specified &amp;lt;</source>
          <target state="translated">場合 &lt;code&gt;REPLACING&lt;/code&gt; 句が指定されている上 &lt;code&gt;INITIALIZE&lt;/code&gt; 文で、すでにによって初期化されなかったフィールドリストの各予選メンバー &lt;code&gt;VALUE&lt;/code&gt; の句は、もしあれば、指定に初期化されます&amp;lt;</target>
        </trans-unit>
        <trans-unit id="5b838d7717f95d20a08cd03498f7882a18db7072" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;TALLYING&lt;/code&gt;clause is coded, &amp;lt;</source>
          <target state="translated">場合は &lt;code&gt;TALLYING&lt;/code&gt; 句がコード化され、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="42850d1581077257d5fcf6cbd3d76feb45a57582" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;USE FOR DEBUGGING&lt;/code&gt;(see &lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVES&lt;/a&gt;) section exists, the code within it will be disabled unless this environment variable is set to a value of &quot;Y&quot;, &quot;y&quot; or &quot;1&quot;.</source>
          <target state="translated">場合 &lt;code&gt;USE FOR DEBUGGING&lt;/code&gt; （参照&lt;a href=&quot;#DECLARATIVES&quot;&gt;DECLARATIVESの&lt;/a&gt;）部分が存在し、この環境変数が「Y」、「Y」または「1」の値に設定されていない限り、その中のコードは無効になります。</target>
        </trans-unit>
        <trans-unit id="936f63734566944fcd01e49ee30a1e66bbeaea72" translate="yes" xml:space="preserve">
          <source>If a&lt;code&gt;VALUE&lt;/code&gt;clause is specified on the&lt;code&gt;INITIALIZE&lt;/code&gt;statement, each qualifying member of the field list having a compile-time&lt;code&gt;VALUE&lt;/code&gt;(see &lt;a href=&quot;#VALUE&quot;&gt;VALUE&lt;/a&gt;) specified in it&amp;rsquo;s definition will be initialized to that value. Field list members with&lt;code&gt;VALUE&lt;/code&gt;clauses will qualify for this treatment as follows:</source>
          <target state="translated">&lt;code&gt;INITIALIZE&lt;/code&gt; ステートメントで &lt;code&gt;VALUE&lt;/code&gt; 句が指定されている場合、その定義でコンパイル時の &lt;code&gt;VALUE&lt;/code&gt; （&lt;a href=&quot;#VALUE&quot;&gt;VALUEを&lt;/a&gt;参照）が指定されているフィールドリストの各修飾メンバーは、その値に初期化されます。 &lt;code&gt;VALUE&lt;/code&gt; 句を含むフィールドリストメンバーは、次のようにこの処理の対象となります。</target>
        </trans-unit>
        <trans-unit id="bbb21152f55feeb2156f854427c62c771c0ef692" translate="yes" xml:space="preserve">
          <source>If all &amp;lt;</source>
          <target state="translated">すべて&amp;lt;</target>
        </trans-unit>
        <trans-unit id="b0c2ba2e09c1e900b3eb01b9e52898d0118ff88e" translate="yes" xml:space="preserve">
          <source>If all &lt;var&gt;conditional-expression-n&lt;/var&gt;s evaluated to FALSE:</source>
          <target state="translated">すべての &lt;var&gt;conditional-expression-n&lt;/var&gt; がFALSEと評価された場合：</target>
        </trans-unit>
        <trans-unit id="ca4cd8a8a2a1d8c22e29cd6e90d36ad1fe723b40" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;ASSIGN&lt;/code&gt; clause is coded without a &lt;var&gt;Device&lt;/var&gt;, the device &lt;code&gt;DISC&lt;/code&gt; will be assumed.</source>
          <target state="translated">&lt;code&gt;ASSIGN&lt;/code&gt; 句が &lt;var&gt;Device&lt;/var&gt; なしでコーディングされている場合、デバイス &lt;code&gt;DISC&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="857d57ff196431645c6d9af6fd43be900ca29f6f" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;EXIT PARAGRAPH&lt;/code&gt; statement or &lt;code&gt;EXIT SECTION&lt;/code&gt; statement resides</source>
          <target state="translated">もし &lt;code&gt;EXIT PARAGRAPH&lt;/code&gt; 文または &lt;code&gt;EXIT SECTION&lt;/code&gt; ステートメント常駐</target>
        </trans-unit>
        <trans-unit id="34351b99792f0fec35328d816d720a1f1eee1e44" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;EXIT PARAGRAPH&lt;/code&gt; statement or &lt;code&gt;EXIT SECTION&lt;/code&gt; statement resides in a paragraph</source>
          <target state="translated">場合は &lt;code&gt;EXIT PARAGRAPH&lt;/code&gt; 文または &lt;code&gt;EXIT SECTION&lt;/code&gt; の文は段落内に存在します</target>
        </trans-unit>
        <trans-unit id="efdf48973d179f8a73d7a44db16fe05e785724d6" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;INITIATE&lt;/code&gt; is followed by a &lt;code&gt;TERMINATE&lt;/code&gt; with no intervening &lt;code&gt;GENERATE&lt;/code&gt; (see &lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;) statements (all pertaining to the same report, of course), no report groups will be presented to the output file.</source>
          <target state="translated">場合 &lt;code&gt;INITIATE&lt;/code&gt; が続いている &lt;code&gt;TERMINATE&lt;/code&gt; ない介在なしで &lt;code&gt;GENERATE&lt;/code&gt; （参照&lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;）文（すべてもちろん、同じレポートに関連する）、何のレポートグループは、出力ファイルに提示されません。</target>
        </trans-unit>
        <trans-unit id="ff2c2cd31d2de130d184a1a6186491ebcbe37896" translate="yes" xml:space="preserve">
          <source>If an argument identifier is smaller in storage size than the token value to be stored in it, the right-most excess characters of the token value will be truncated as the value is moved in. Any &lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt; clause on such an argument identifier will be ignored.</source>
          <target state="translated">引数識別子のストレージサイズが、格納されるトークン値よりも小さい場合、トークン値の右端の余分な文字は、値が移動されるときに切り捨てられます。そのような引数識別子の &lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt; 句は無視されます。</target>
        </trans-unit>
        <trans-unit id="82152df9872b03795b0f65167d26e2e94749c462" translate="yes" xml:space="preserve">
          <source>If an argument identifier is smaller in storage size than the token value to be stored in it, the right-most excess characters of the token value will be truncated as the value is moved in. Any JUSTIFIED RIGHT clause on such an argument identifier will be ignored.</source>
          <target state="translated">引数識別子の格納サイズが、その中に格納されるトークン値よりも小さい場合、トークン値の右端の余剰文字は、その値が移動される際に切り捨てられます。そのような引数識別子に対するJUSTIFIED RIGHT句は無視されます。</target>
        </trans-unit>
        <trans-unit id="07a8ee359a67bccd96333577bde8fdcc626d0ff2" translate="yes" xml:space="preserve">
          <source>If an argument is larger in storage size than the token value to be stored in it, the token value will be moved into the argument identifier in a left-justified manner. unmodified-modified byte positions in the identifier will be space filled, unless the argument identifier is defined as &lt;code&gt;PIC 9 USAGE DISPLAY&lt;/code&gt;, in which case unmodified bytes will be filled with &amp;lsquo;</source>
          <target state="translated">引数のストレージサイズが、格納されるトークン値よりも大きい場合、トークン値は左寄せされた方法で引数識別子に移動されます。引数識別子が &lt;code&gt;PIC 9 USAGE DISPLAY&lt;/code&gt; として定義されていない限り、識別子の変更されていない変更されたバイト位置はスペースで埋められます。その場合、変更されていないバイトは 'で埋められます。</target>
        </trans-unit>
        <trans-unit id="bccb47600312a31302d4243c123c27cac5d4e303" translate="yes" xml:space="preserve">
          <source>If an argument is larger in storage size than the token value to be stored in it, the token value will be moved into the argument identifier in a left-justified manner. unmodified-modified byte positions in the identifier will be space filled, unless the argument identifier is defined as PIC 9 USAGE DISPLAY, in which case unmodified bytes will be filled with &quot;0&quot; characters from the systems native character set.</source>
          <target state="translated">引数のサイズがトークン値よりも大きい場合、トークン値は左寄せの方法で引数の識別子に移動します。</target>
        </trans-unit>
        <trans-unit id="238de03036789e77a079b1d3ae5e90db16e38bae" translate="yes" xml:space="preserve">
          <source>If an argument lacks a &lt;code&gt;BY&lt;/code&gt; clause, the most-recently encountered &lt;code&gt;BY&lt;/code&gt; specification on that &lt;code&gt;CALL&lt;/code&gt; statement will be assumed. If the first argument specified on a &lt;code&gt;CALL&lt;/code&gt; lacks a &lt;code&gt;BY&lt;/code&gt; clause, &lt;code&gt;BY REFERENCE&lt;/code&gt; will be assumed.</source>
          <target state="translated">引数に &lt;code&gt;BY&lt;/code&gt; 句がない場合、その &lt;code&gt;CALL&lt;/code&gt; ステートメントで最近検出された &lt;code&gt;BY&lt;/code&gt; 指定が想定されます。 &lt;code&gt;CALL&lt;/code&gt; で指定された最初の引数に &lt;code&gt;BY&lt;/code&gt; 句がない場合、 &lt;code&gt;BY REFERENCE&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="14f8fa4ce97209c48ec71484cb50b99ef2bd0709" translate="yes" xml:space="preserve">
          <source>If an argument lacks a&lt;code&gt;BY&lt;/code&gt;clause, the most-recently encountered&lt;code&gt;BY&lt;/code&gt;specification on that&lt;code&gt;CALL&lt;/code&gt;statement will be assumed. If the first argument specified on a&lt;code&gt;CALL&lt;/code&gt;lacks a&lt;code&gt;BY&lt;/code&gt;clause,&lt;code&gt;BY REFERENCE&lt;/code&gt;will be assumed.</source>
          <target state="translated">引数に &lt;code&gt;BY&lt;/code&gt; 句がない場合、その &lt;code&gt;CALL&lt;/code&gt; ステートメントで最後に検出された &lt;code&gt;BY&lt;/code&gt; 指定が想定されます。 &lt;code&gt;CALL&lt;/code&gt; で指定された最初の引数に &lt;code&gt;BY&lt;/code&gt; 句がない場合、 &lt;code&gt;BY REFERENCE&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="05823b59c6e317b0d6f6bda99166cee75a4f73b6" translate="yes" xml:space="preserve">
          <source>If an argument whose value is less than 1 or greater than 256 is specified, the character in the program collating sequence corresponding to a value of all zero bits is returned.</source>
          <target state="translated">値が 1 より小さいか 256 より大きい引数が指定された場合、すべての 0 ビットの値に対応するプログラム照合順序の文字を返す。</target>
        </trans-unit>
        <trans-unit id="2b8c1834ab8abb452a19e34dee7da8437a78703c" translate="yes" xml:space="preserve">
          <source>If an environment variable was found, it&amp;rsquo;s value will serve as the path and filename to the data file.</source>
          <target state="translated">環境変数が見つかった場合、その値はデータファイルへのパスとファイル名として機能します。</target>
        </trans-unit>
        <trans-unit id="87ade2418959261313850658cf96a90fea7f484f" translate="yes" xml:space="preserve">
          <source>If an environment variable was found, its value will serve as the path and filename to the data file.</source>
          <target state="translated">環境変数が見つかった場合、その値がデータファイルのパスとファイル名になります。</target>
        </trans-unit>
        <trans-unit id="bcab58a3e462d384fa130cd4e9016e959b6a71b4" translate="yes" xml:space="preserve">
          <source>If an&lt;code&gt;ASSIGN&lt;/code&gt;clause is coded without a &amp;lt;&amp;lt;</source>
          <target state="translated">&lt;code&gt;ASSIGN&lt;/code&gt; 句が&amp;lt;&amp;lt;なしでコーディングされている場合</target>
        </trans-unit>
        <trans-unit id="c44efa18b320631b1a96a201bad730ca80153f8d" translate="yes" xml:space="preserve">
          <source>If an&lt;code&gt;EXIT PARAGRAPH&lt;/code&gt;statement or&lt;code&gt;EXIT SECTION&lt;/code&gt;statement resides</source>
          <target state="translated">もし &lt;code&gt;EXIT PARAGRAPH&lt;/code&gt; 文または &lt;code&gt;EXIT SECTION&lt;/code&gt; ステートメント常駐</target>
        </trans-unit>
        <trans-unit id="87612bdd6bb75a44b81526c8c27d9968de497f3d" translate="yes" xml:space="preserve">
          <source>If an&lt;code&gt;EXIT PARAGRAPH&lt;/code&gt;statement or&lt;code&gt;EXIT SECTION&lt;/code&gt;statement resides in a paragraph</source>
          <target state="translated">場合は &lt;code&gt;EXIT PARAGRAPH&lt;/code&gt; 文または &lt;code&gt;EXIT SECTION&lt;/code&gt; の文は段落内に存在します</target>
        </trans-unit>
        <trans-unit id="3f0242e3af04c028a1ddce44867fb3964faf61b9" translate="yes" xml:space="preserve">
          <source>If an&lt;code&gt;INITIATE&lt;/code&gt;is followed by a&lt;code&gt;TERMINATE&lt;/code&gt;with no intervening&lt;code&gt;GENERATE&lt;/code&gt;(see &lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;) statements (all pertaining to the same report, of course), no report groups will be presented to the output file.</source>
          <target state="translated">場合 &lt;code&gt;INITIATE&lt;/code&gt; が続いている &lt;code&gt;TERMINATE&lt;/code&gt; ない介在なしで &lt;code&gt;GENERATE&lt;/code&gt; （参照&lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;）文（すべてもちろん、同じレポートに関連する）、何のレポートグループは、出力ファイルに提示されません。</target>
        </trans-unit>
        <trans-unit id="1989e1692cf63856050ee6de069649854e1b7eed" translate="yes" xml:space="preserve">
          <source>If any &amp;lt;</source>
          <target state="translated">&amp;lt;がある場合</target>
        </trans-unit>
        <trans-unit id="8c41868f40616dcddd4c750ebaeb0a81bc5fba89" translate="yes" xml:space="preserve">
          <source>If any &lt;var&gt;identifier-7&lt;/var&gt; data item is defined in the report section, it must be a sum counter.</source>
          <target state="translated">もしあれば &lt;var&gt;identifier-7&lt;/var&gt; データ項目がレポートセクションで定義され、それが合計カウンタでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ded48aebbdbbf018e482c90608c9d4d54578f860" translate="yes" xml:space="preserve">
          <source>If any of the paragraphs within one of the sections are coded, the section header itself must be coded.</source>
          <target state="translated">セクション内のいずれかの段落がコード化されている場合は、セクションヘッダー自体がコード化されていなければなりません。</target>
        </trans-unit>
        <trans-unit id="ed99d154978b96e721c4902c0ac26b3300f9f982" translate="yes" xml:space="preserve">
          <source>If at least one &lt;code&gt;GENERATE&lt;/code&gt; statement of this form is executed against a report, the report is said to be a  &lt;em&gt;detail report&lt;/em&gt;. If no &lt;code&gt;GENERATE&lt;/code&gt; statements of this form are executed against a report, the report is said to be a  &lt;em&gt;summary report&lt;/em&gt;.</source>
          <target state="translated">このフォームの少なくとも1つの &lt;code&gt;GENERATE&lt;/code&gt; ステートメントがレポートに対して実行された場合、そのレポートは&lt;em&gt;詳細レポート&lt;/em&gt;であると言われます 。この形式の &lt;code&gt;GENERATE&lt;/code&gt; ステートメントがレポートに対して実行されない場合、そのレポートは&lt;em&gt;要約レポート&lt;/em&gt;であると言われます 。</target>
        </trans-unit>
        <trans-unit id="098c66a7cc7db43fe1a5e65ab50d6051cee41a88" translate="yes" xml:space="preserve">
          <source>If at least one&lt;code&gt;GENERATE&lt;/code&gt;statement of this form is executed against a report, the report is said to be a &amp;rsquo;</source>
          <target state="translated">このフォームの少なくとも1つの &lt;code&gt;GENERATE&lt;/code&gt; ステートメントがレポートに対して実行された場合、レポートは「</target>
        </trans-unit>
        <trans-unit id="bbb1f438e0e2ddccdd230dea44836bc244c52259" translate="yes" xml:space="preserve">
          <source>If both optional sections of this division are coded, they must be coded in the sequence shown.</source>
          <target state="translated">この分割の両方のオプションセクションが符号化されている場合、それらは示された順序で符号化されなければならない。</target>
        </trans-unit>
        <trans-unit id="745c71ce2e06f35a39cb484c7fa128871c700a6d" translate="yes" xml:space="preserve">
          <source>If both statement types are coded in the &lt;code&gt;I-O-CONTROL&lt;/code&gt; paragraph, the order in which those statements are coded is irrelevant.</source>
          <target state="translated">両方のステートメントタイプが &lt;code&gt;I-O-CONTROL&lt;/code&gt; 段落でコーディングされている場合、それらのステートメントがコーディングされる順序は関係ありません。</target>
        </trans-unit>
        <trans-unit id="e41dfd24c49449dc06a287d66915bfb31196edfa" translate="yes" xml:space="preserve">
          <source>If both statement types are coded in the&lt;code&gt;I-O-CONTROL&lt;/code&gt;paragraph, the order in which those statements are coded is irrelevant.</source>
          <target state="translated">両方のステートメントタイプが &lt;code&gt;I-O-CONTROL&lt;/code&gt; 段落でコーディングされている場合、それらのステートメントがコーディングされている順序は関係ありません。</target>
        </trans-unit>
        <trans-unit id="6382741c00dff89ae4bdb6330bb5ee8e859bb989" translate="yes" xml:space="preserve">
          <source>If both the &lt;code&gt;TALLYING&lt;/code&gt; and &lt;code&gt;REPLACING&lt;/code&gt; clauses are specified, they must be specified in the order shown.</source>
          <target state="translated">&lt;code&gt;TALLYING&lt;/code&gt; 句と &lt;code&gt;REPLACING&lt;/code&gt; 句の両方を指定する場合は、示されている順序で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="776f3c5eecbcd34d511d3925b8b352f3fe294871" translate="yes" xml:space="preserve">
          <source>If both the&lt;code&gt;TALLYING&lt;/code&gt;and&lt;code&gt;REPLACING&lt;/code&gt;clauses are specified, they must be specified in the order shown.</source>
          <target state="translated">&lt;code&gt;TALLYING&lt;/code&gt; 句と &lt;code&gt;REPLACING&lt;/code&gt; 句の両方を指定する場合は、示されている順序で指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="5240d922a647b65cd3c813dbacecd9ac5a5286ba" translate="yes" xml:space="preserve">
          <source>If control of execution is transferred to a procedure named on the statement, and the &lt;code&gt;GO TO&lt;/code&gt; is executed within the scope of&amp;hellip;</source>
          <target state="translated">実行の制御文にという名前のプロシージャに転送し、されている場合は &lt;code&gt;GO TO&lt;/code&gt; はの範囲内で実行されます...</target>
        </trans-unit>
        <trans-unit id="49551f9075c0114086955d559a1442bce3fdaf10" translate="yes" xml:space="preserve">
          <source>If control of execution is transferred to a procedure named on the statement, and the&lt;code&gt;GO TO&lt;/code&gt;is executed within the scope of&amp;hellip;</source>
          <target state="translated">実行の制御がステートメントで指定されたプロシージャに移され、 &lt;code&gt;GO TO&lt;/code&gt; が&amp;hellip;のスコープ内で実行された場合</target>
        </trans-unit>
        <trans-unit id="cc41015e2010811d0a9e0da87d915540d0d175bb" translate="yes" xml:space="preserve">
          <source>If copybooks your program needs are</source>
          <target state="translated">あなたのプログラムが必要とするコピーブックが</target>
        </trans-unit>
        <trans-unit id="25bbb2134d570b993f324faa68838566a3259e83" translate="yes" xml:space="preserve">
          <source>If copybooks your program needs are NOT stored in the same directory as your program, set this environment variable to the folder in which the copybooks may be found (IBM mainframe programmers will recognize this as &quot;SYSLIB&quot;).</source>
          <target state="translated">プログラムが必要とするコピーブックがプログラムと同じディレクトリに保存されていない場合、この環境変数をコピーブックが見つかる可能性のあるフォルダに設定します(IBMメインフレームのプログラマーはこれを &quot;SYSLIB &quot;と認識します)。</target>
        </trans-unit>
        <trans-unit id="325de08baac6d6bd1b4e1ebed585b6caa542bf6a" translate="yes" xml:space="preserve">
          <source>If desired, screen fields used as input fields may defined as &quot;secure&quot; fields, where each input character (regardless of what was actually typed) will appear as an asterisk (*) character. The actual character whose key was pressed will still be stored into the field in the program, however. This is very useful for password or account number fields.</source>
          <target state="translated">必要に応じて、入力フィールドとして使用される画面フィールドを「セキュア」フィールドとして定義することができ、入力された各文字は(実際に入力されたかどうかにかかわらず)アスタリスク(*)文字として表示されます。しかし、キーが押された実際の文字は、プログラムのフィールドに保存されます。これは、パスワードやアカウント番号のフィールドに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="b98d4aa5c71bffe8c951cb1f6b2c3a833d26abf4" translate="yes" xml:space="preserve">
          <source>If desired, screen fields used as input fields may defined as &amp;ldquo;secure&amp;rdquo; fields, where each input character (regardless of what was actually typed) will appear as an asterisk (*) character. The actual character whose key was pressed will still be stored into the field in the program, however. This is very useful for password or account number fields.</source>
          <target state="translated">必要に応じて、入力フィールドとして使用される画面フィールドを「セキュア」フィールドとして定義できます。この場合、各入力文字（実際に入力されたものに関係なく）はアスタリスク（*）文字として表示されます。ただし、キーが押された実際の文字は、プログラムのフィールドに引き続き格納されます。これは、パスワードまたはアカウント番号のフィールドに非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="3ce1ca984a9baec19cd93dd7844ad13f57d63d88" translate="yes" xml:space="preserve">
          <source>If desired, you may reverse the roles of the &amp;lsquo;</source>
          <target state="translated">必要に応じて、 'の役割を逆にすることができます</target>
        </trans-unit>
        <trans-unit id="e8c0e23858d8c34351be31b2e2dd7ef0f308a47c" translate="yes" xml:space="preserve">
          <source>If desired, you may reverse the roles of the&lt;code&gt;.&lt;/code&gt;and&lt;code&gt;,&lt;/code&gt;editing symbols by specifying&lt;code&gt;DECIMAL POINT IS COMMA&lt;/code&gt;in the&lt;code&gt;SPECIAL-NAMES&lt;/code&gt;(see &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;) paragraph.</source>
          <target state="translated">必要に応じて、の役割を逆にすることができます &lt;code&gt;.&lt;/code&gt; そして &lt;code&gt;,&lt;/code&gt; 指定してシンボルを編集 &lt;code&gt;DECIMAL POINT IS COMMA&lt;/code&gt; をして &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; （参照&lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;段落を）。</target>
        </trans-unit>
        <trans-unit id="0fe77fd80daaf49b4bba036f938fdc3be72e0ebb" translate="yes" xml:space="preserve">
          <source>If either condition has a value of &lt;code&gt;TRUE&lt;/code&gt;, the result of &lt;code&gt;OR&lt;/code&gt;ing the two together will result in a value of &lt;code&gt;TRUE&lt;/code&gt;. &lt;code&gt;OR&lt;/code&gt;ing two &lt;code&gt;FALSE&lt;/code&gt; conditions will result in a value of &lt;code&gt;FALSE&lt;/code&gt;.</source>
          <target state="translated">いずれかの条件の値が &lt;code&gt;TRUE&lt;/code&gt; の場合、2つを &lt;code&gt;OR&lt;/code&gt; した結果、値は &lt;code&gt;TRUE&lt;/code&gt; になります。 &lt;code&gt;OR&lt;/code&gt; 2つの &lt;code&gt;FALSE&lt;/code&gt; 条件を実行すると、値は &lt;code&gt;FALSE&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="cfeb571780980c15ef5118f06fd533dfd406e005" translate="yes" xml:space="preserve">
          <source>If either condition has a value of TRUE, the result of&lt;code&gt;OR&lt;/code&gt;</source>
          <target state="translated">いずれかの条件の値がTRUEの場合、 &lt;code&gt;OR&lt;/code&gt; の結果</target>
        </trans-unit>
        <trans-unit id="ed9d44430038aa1155fc55e46a2d9a9ecb6312ec" translate="yes" xml:space="preserve">
          <source>If either the &lt;code&gt;TALLYING&lt;/code&gt; or &lt;code&gt;REPLACING&lt;/code&gt; clauses are specified, the &lt;code&gt;CONVERTING&lt;/code&gt; clause cannot be used.</source>
          <target state="translated">&lt;code&gt;TALLYING&lt;/code&gt; 句または &lt;code&gt;REPLACING&lt;/code&gt; 句のいずれかが指定されている場合、 &lt;code&gt;CONVERTING&lt;/code&gt; 句は使用できません。</target>
        </trans-unit>
        <trans-unit id="bc1c6b979e9c37d992caa4fdb32b5bbe5b97b0db" translate="yes" xml:space="preserve">
          <source>If either the&lt;code&gt;TALLYING&lt;/code&gt;or&lt;code&gt;REPLACING&lt;/code&gt;clauses are specified, the&lt;code&gt;CONVERTING&lt;/code&gt;clause cannot be used.</source>
          <target state="translated">いずれかの場合 &lt;code&gt;TALLYING&lt;/code&gt; か &lt;code&gt;REPLACING&lt;/code&gt; 句が指定されている、 &lt;code&gt;CONVERTING&lt;/code&gt; 句は使用できません。</target>
        </trans-unit>
        <trans-unit id="4d7f77af0291647c5dacacbc811f9084a6405007" translate="yes" xml:space="preserve">
          <source>If event</source>
          <target state="translated">イベントが</target>
        </trans-unit>
        <trans-unit id="65d896699ba7417f38fac49a744a6351011f2338" translate="yes" xml:space="preserve">
          <source>If event (A) occurs, &amp;lt;</source>
          <target state="translated">イベント（A）が発生した場合、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c6ea8276245b74726b44312b8cbb459b9ea45f59" translate="yes" xml:space="preserve">
          <source>If event (A) occurs, none of the destination field contents (or the contents of their&lt;code&gt;DELIMITER&lt;/code&gt;or &amp;lt;</source>
          <target state="translated">イベント（A）が発生した場合、宛先フィールドの内容（またはそれらの &lt;code&gt;DELIMITER&lt;/code&gt; または&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c766138e5b6a0fb5e159fe3be6df3cb65c15aa94" translate="yes" xml:space="preserve">
          <source>If excess space is allocated, the returned value will be padded with spaces (to the right).</source>
          <target state="translated">余剰スペースが確保されている場合は、返された値はスペース(右側)でパディングされます。</target>
        </trans-unit>
        <trans-unit id="0ee821a14b535409c9db6845f5fa9d2ad8f3ef2b" translate="yes" xml:space="preserve">
          <source>If executed by a main program, neither the &lt;code&gt;EXIT PROGRAM&lt;/code&gt; nor &lt;code&gt;EXIT FUNCTION&lt;/code&gt; statements will take any action.</source>
          <target state="translated">メインプログラムで実行した場合、どちら &lt;code&gt;EXIT PROGRAM&lt;/code&gt; も &lt;code&gt;EXIT FUNCTION&lt;/code&gt; ステートメントは、どんな行動を取るだろう。</target>
        </trans-unit>
        <trans-unit id="dcf599fa35195bfeb7d750a1aa7ddb9854348d4d" translate="yes" xml:space="preserve">
          <source>If executed by a main program, neither the&lt;code&gt;EXIT PROGRAM&lt;/code&gt;nor&lt;code&gt;EXIT FUNCTION&lt;/code&gt;statements will take any action.</source>
          <target state="translated">メインプログラムによって実行される場合、 &lt;code&gt;EXIT PROGRAM&lt;/code&gt; ステートメントも &lt;code&gt;EXIT FUNCTION&lt;/code&gt; ステートメントもアクションを実行しません。</target>
        </trans-unit>
        <trans-unit id="ec56e985e662e98e355eae2b56f2b8eb89f00cd3" translate="yes" xml:space="preserve">
          <source>If executed within a main program, &lt;code&gt;GOBACK&lt;/code&gt; will act as a &lt;code&gt;STOP RUN&lt;/code&gt; statement.</source>
          <target state="translated">メインプログラム内で実行した場合、 &lt;code&gt;GOBACK&lt;/code&gt; はとして機能する &lt;code&gt;STOP RUN&lt;/code&gt; の声明。</target>
        </trans-unit>
        <trans-unit id="adc22a801c0d5cf9afd2251ba837acc24c7e7595" translate="yes" xml:space="preserve">
          <source>If executed within a main program,&lt;code&gt;GOBACK&lt;/code&gt;will act as a&lt;code&gt;STOP RUN&lt;/code&gt;statement.</source>
          <target state="translated">メインプログラム内で実行される場合、 &lt;code&gt;GOBACK&lt;/code&gt; は &lt;code&gt;STOP RUN&lt;/code&gt; ステートメントとして機能します。</target>
        </trans-unit>
        <trans-unit id="29e21ce7e21f0a3076c47fd2aba39be700d024bc" translate="yes" xml:space="preserve">
          <source>If executed within a subprogram (i.e. a subroutine or user-defined function), &lt;code&gt;GOBACK&lt;/code&gt; behaves like an &lt;code&gt;EXIT PROGRAM&lt;/code&gt; or &lt;code&gt;EXIT FUNCTION&lt;/code&gt; statement, respectively.</source>
          <target state="translated">サブプログラム内で実行された場合（すなわち、Aサブルーチンまたはユーザ定義関数）、 &lt;code&gt;GOBACK&lt;/code&gt; のような挙動 &lt;code&gt;EXIT PROGRAM&lt;/code&gt; または &lt;code&gt;EXIT FUNCTION&lt;/code&gt; それぞれ文。</target>
        </trans-unit>
        <trans-unit id="0c913e686677f4f2542ed04551fc54a61ca3b586" translate="yes" xml:space="preserve">
          <source>If executed within a subprogram (i.e. a subroutine or user-defined function),&lt;code&gt;GOBACK&lt;/code&gt;behaves like an&lt;code&gt;EXIT PROGRAM&lt;/code&gt;or&lt;code&gt;EXIT FUNCTION&lt;/code&gt;statement, respectively.</source>
          <target state="translated">サブプログラム（つまり、サブルーチンまたはユーザー定義関数）内で実行される場合、 &lt;code&gt;GOBACK&lt;/code&gt; はそれぞれ &lt;code&gt;EXIT PROGRAM&lt;/code&gt; または &lt;code&gt;EXIT FUNCTION&lt;/code&gt; ステートメントのように動作します。</target>
        </trans-unit>
        <trans-unit id="37a5ec4ba4f6eb14fb6bc4cdf6c2b834a2e18251" translate="yes" xml:space="preserve">
          <source>If insufficient space is allocated, the returned value will be truncated.</source>
          <target state="translated">空き容量が不足している場合は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="20788d6df5c521759ffd6da038d7efacbc53537c" translate="yes" xml:space="preserve">
          <source>If it begins with a capital &quot;C&quot;, the value will be centred</source>
          <target state="translated">大文字の「C」で始まる場合は、値が中心になります。</target>
        </trans-unit>
        <trans-unit id="cce45705eb2edf3ee981ccb8a02325faa9873b7a" translate="yes" xml:space="preserve">
          <source>If it begins with a capital &quot;L&quot;, the value will be left-justified, space-filled to the right</source>
          <target state="translated">大文字の &quot;L &quot;で始まる場合、値は左寄せになり、右にスペースを空けて表示されます。</target>
        </trans-unit>
        <trans-unit id="49095cec719464061ddd1eea1650a1e60b0b3522" translate="yes" xml:space="preserve">
          <source>If it begins with a capital &quot;R&quot;, the value will be right-justified, space-filled to the left</source>
          <target state="translated">大文字の &quot;R &quot;で始まる場合、値は右寄せで左にスペースを空けて表示されます。</target>
        </trans-unit>
        <trans-unit id="e6e9d41a84edd6ab6b611b8a64b21d8cc9efa7ef" translate="yes" xml:space="preserve">
          <source>If it begins with anything else, or is absent, it will be treated as if it is present and begins with a capital &quot;R&quot;</source>
          <target state="translated">他の何かで始まる場合や、それがない場合は、それが存在し、大文字の &quot;R &quot;で始まる場合と同じように扱われます。</target>
        </trans-unit>
        <trans-unit id="0a89badd7879c4ca69abaf146998c7ff5dc1ad26" translate="yes" xml:space="preserve">
          <source>If it begins with anything else, or is absent, it will be treated as if it is present and begins with a capital &amp;lsquo;</source>
          <target state="translated">それが他のもので始まるか、または存在しない場合、それは存在するかのように扱われ、大文字で始まります '</target>
        </trans-unit>
        <trans-unit id="e314a2cf494e58e27d506f6b9a3b270acdcc85b6" translate="yes" xml:space="preserve">
          <source>If it contains a &lt;code&gt;CR&lt;/code&gt;, &lt;code&gt;DB&lt;/code&gt;, or the minus sign (&amp;lsquo;</source>
          <target state="translated">それが含まれている場合は &lt;code&gt;CR&lt;/code&gt; 、 &lt;code&gt;DB&lt;/code&gt; 「（またはマイナス記号を</target>
        </trans-unit>
        <trans-unit id="ddfddaec4eb6defafd4236c3804acb2833a56ffc" translate="yes" xml:space="preserve">
          <source>If it is a dynamic subroutine, the GnuCOBOL run-time system will check to see if a dynamically-loadable module containing the subprogram&amp;rsquo;s entry point was already located. If it was, no further &quot;location&quot; activity is needed. If not, the dynamically-loadable module will be located (see &lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;Locating Dynamically-Loadable Modules&lt;/a&gt;).</source>
          <target state="translated">動的サブルーチンの場合、GnuCOBOLランタイムシステムは、サブプログラムのエントリポイントを含む動的にロード可能なモジュールがすでに配置されているかどうかを確認します。もしそうなら、それ以上の「場所」アクティビティは必要ありません。そうでない場合は、動的にロード可能なモジュールが検索されます（動的にロード可能なモジュールの&lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;検索を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="c2c2b30c5a2cdcf0f0e42916c610b89f78e14195" translate="yes" xml:space="preserve">
          <source>If it is a dynamic subroutine, the GnuCOBOL run-time system will check to see if a dynamically-loadable module containing the subprogram&amp;rsquo;s entry point was already located. If it was, no further &amp;ldquo;location&amp;rdquo; activity is needed. If not, the dynamically-loadable module will be located (see &lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;Locating Dynamically-Loadable Modules&lt;/a&gt;).</source>
          <target state="translated">動的サブルーチンの場合、GnuCOBOLランタイムシステムは、サブプログラムのエントリポイントを含む動的にロード可能なモジュールがすでに配置されているかどうかを確認します。そうであった場合、それ以上の「ロケーション」アクティビティは必要ありません。そうでない場合は、動的にロード可能なモジュールが配置されます（動的にロード可能なモジュールの&lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;検索を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="a084bcee5f6f297e9fac72fc57197692e67653da" translate="yes" xml:space="preserve">
          <source>If it is a dynamic user-defined function, the GnuCOBOL run-time system will check to see if a dynamically-loadable module containing the function&amp;rsquo;s entry point was already located. If it was, no further &quot;location&quot; activity is needed. If not, the dynamically-loadable module will be located (see &lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;Locating Dynamically-Loadable Modules&lt;/a&gt;).</source>
          <target state="translated">動的なユーザー定義関数の場合、GnuCOBOLランタイムシステムは、関数のエントリポイントを含む動的にロード可能なモジュールが既に配置されているかどうかを確認します。もしそうなら、それ以上の「場所」アクティビティは必要ありません。そうでない場合は、動的にロード可能なモジュールが検索されます（動的にロード可能なモジュールの&lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;検索を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="3a587abb6e0208602df7555796aa18f2e38bcaa6" translate="yes" xml:space="preserve">
          <source>If it is a dynamic user-defined function, the GnuCOBOL run-time system will check to see if a dynamically-loadable module containing the function&amp;rsquo;s entry point was already located. If it was, no further &amp;ldquo;location&amp;rdquo; activity is needed. If not, the dynamically-loadable module will be located (see &lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;Locating Dynamically-Loadable Modules&lt;/a&gt;).</source>
          <target state="translated">動的なユーザー定義関数の場合、GnuCOBOLランタイムシステムは、関数のエントリポイントを含む動的にロード可能なモジュールがすでに配置されているかどうかを確認します。そうであった場合、それ以上の「ロケーション」アクティビティは必要ありません。そうでない場合は、動的にロード可能なモジュールが配置されます（動的にロード可能なモジュールの&lt;a href=&quot;#Locating-Dynamically_002dLoadable-Modules&quot;&gt;検索を&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="1d35a2709398b64faf3d0f6a4cba74a904396997" translate="yes" xml:space="preserve">
          <source>If it is a static subroutine, it will already be part of the executable program issuing the &lt;code&gt;CALL&lt;/code&gt; (see &lt;a href=&quot;#CALL&quot;&gt;CALL&lt;/a&gt;).</source>
          <target state="translated">静的サブルーチンの場合、 &lt;code&gt;CALL&lt;/code&gt; を発行する実行可能プログラムの一部になっています（&lt;a href=&quot;#CALL&quot;&gt;CALLを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="d0f43ca29a675e226a37e6b6d8088cdbc37ebd39" translate="yes" xml:space="preserve">
          <source>If it is a static subroutine, it will already be part of the executable program issuing the&lt;code&gt;CALL&lt;/code&gt;(see &lt;a href=&quot;#CALL&quot;&gt;CALL&lt;/a&gt;).</source>
          <target state="translated">静的サブルーチンの場合は、 &lt;code&gt;CALL&lt;/code&gt; を発行する実行可能プログラムの一部になっています（&lt;a href=&quot;#CALL&quot;&gt;CALLを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="caa175b4499a85fc8b3c0efe4a0f73f3d1c1c886" translate="yes" xml:space="preserve">
          <source>If it is a static user-defined function, it will already be part of the executable file containing the calling program.</source>
          <target state="translated">それが静的なユーザー定義関数である場合、それはすでに呼び出し元のプログラムを含む実行ファイルの一部になっています。</target>
        </trans-unit>
        <trans-unit id="84a0f01c66da97418e3aa21d01e0ef5b3ae55060" translate="yes" xml:space="preserve">
          <source>If more than one section is needed in the data division (a common situation), the sections must be coded in the sequence they are presented above.</source>
          <target state="translated">データ分割で複数のセクションが必要な場合(一般的な状況)、セクションは上記で提示された順序でコード化されなければならない。</target>
        </trans-unit>
        <trans-unit id="08575c4d82cf8b371a6f7d53f268979ac88898e9" translate="yes" xml:space="preserve">
          <source>If necessary, &amp;lt;</source>
          <target state="translated">必要に応じて、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="f3c5cfa2cd5754ef4f9ebd8819c023866cec6753" translate="yes" xml:space="preserve">
          <source>If necessary, &lt;var&gt;identifier-1&lt;/var&gt; may be qualified with a report name.</source>
          <target state="translated">必要に応じて、 &lt;var&gt;identifier-1&lt;/var&gt; レポート名で修飾できます。</target>
        </trans-unit>
        <trans-unit id="a07bc04cad751bf3729834d0eede1f438f0dd23e" translate="yes" xml:space="preserve">
          <source>If neither &lt;var&gt;argument-2&lt;/var&gt; nor the &lt;code&gt;LOCALE&lt;/code&gt; keyword is specified, there shall be only one currency string used, either the default currency sign or a currency string specified in the &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; paragraph.</source>
          <target state="translated">どちらの場合は &lt;var&gt;argument-2&lt;/var&gt; も &lt;code&gt;LOCALE&lt;/code&gt; のキーワードが指定され、使用される唯一の通貨文字列、デフォルトの通貨記号またはで指定された通貨文字列のどちらかがなければならない &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; の段落。</target>
        </trans-unit>
        <trans-unit id="7e171173d63b5e9bade35a7d12eac799bc4e2f54" translate="yes" xml:space="preserve">
          <source>If neither paragraph is coded, the &lt;code&gt;INPUT-OUTPUT SECTION.&lt;/code&gt; header itself may be omitted, otherwise it is normally required.</source>
          <target state="translated">どちらの段落もコーディングされていない場合は、 &lt;code&gt;INPUT-OUTPUT SECTION.&lt;/code&gt; ヘッダー自体は省略できますが、それ以外の場合は通常必要です。</target>
        </trans-unit>
        <trans-unit id="f63584104f0c3fb031bde71d0b6dcee112c103e0" translate="yes" xml:space="preserve">
          <source>If neither paragraph is coded, the&lt;code&gt;INPUT-OUTPUT SECTION.&lt;/code&gt;header itself may be omitted, otherwise it is normally required.</source>
          <target state="translated">どちらの段落もコーディングされていない場合は、 &lt;code&gt;INPUT-OUTPUT SECTION.&lt;/code&gt; ヘッダー自体は省略できますが、それ以外の場合は通常必要です。</target>
        </trans-unit>
        <trans-unit id="2c24d8323d5e2e2f3832cf5a89d8b67b228d4bcd" translate="yes" xml:space="preserve">
          <source>If neither symbol nor the &lt;code&gt;LOCALE&lt;/code&gt; keyword is specified, there shall be only one currency string used, either the default currency sign or a currency string specified in the &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; paragraph.</source>
          <target state="translated">記号も &lt;code&gt;LOCALE&lt;/code&gt; キーワードも指定されていない場合、使用される通貨文字列は、デフォルトの通貨記号または &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; 段落で指定された通貨文字列のいずれか1つだけです。</target>
        </trans-unit>
        <trans-unit id="7b645e3fb4170a043aa45114410ba79af6cbd2a8" translate="yes" xml:space="preserve">
          <source>If no  &lt;code&gt;UPON&lt;/code&gt; clause is specified, &lt;code&gt;UPON CONSOLE&lt;/code&gt; will be assumed. If the &lt;code&gt;UPON&lt;/code&gt; clause</source>
          <target state="translated">何場合 &lt;code&gt;UPON&lt;/code&gt; 句が指定されている、 &lt;code&gt;UPON CONSOLE&lt;/code&gt; と想定されません。 &lt;code&gt;UPON&lt;/code&gt; 条項の場合</target>
        </trans-unit>
        <trans-unit id="3c31c5678998b1cb03f4a683a72bb094dd2d47bc" translate="yes" xml:space="preserve">
          <source>If no  &lt;code&gt;VALUE&lt;/code&gt;,  &lt;code&gt;REPLACING&lt;/code&gt; or  &lt;code&gt;DEFAULT&lt;/code&gt; clauses are coded, each member of the field list will be initialized as if the figurative constant &lt;code&gt;ZERO&lt;/code&gt; (if the field list item is numeric or numeric-edited) or &lt;code&gt;SPACES&lt;/code&gt; (otherwise) were being moved to it.</source>
          <target state="translated">ない場合 &lt;code&gt;VALUE&lt;/code&gt; 、 &lt;code&gt;REPLACING&lt;/code&gt; または &lt;code&gt;DEFAULT&lt;/code&gt; の節が符号化され、フィールドリストの各メンバーが表意定数かのように初期化され &lt;code&gt;ZERO&lt;/code&gt; （フィールドリストアイテムは、数字または数字編集の場合）または &lt;code&gt;SPACES&lt;/code&gt; （さもなければ）をそれに移動されました。</target>
        </trans-unit>
        <trans-unit id="112a01f52ed19b32bc288508d6054c95da8fdd85" translate="yes" xml:space="preserve">
          <source>If no &amp;lt;</source>
          <target state="translated">ない場合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="c520e3d4aae69229f5d030660491f8d24e39ce90" translate="yes" xml:space="preserve">
          <source>If no &amp;lt;&amp;lt;</source>
          <target state="translated">&amp;lt;&amp;lt;がない場合</target>
        </trans-unit>
        <trans-unit id="cccae1dc6e8637e1b5c5c2fbf5052d3f0ccf07fa" translate="yes" xml:space="preserve">
          <source>If no &amp;rsquo;</source>
          <target state="translated">いいえの場合</target>
        </trans-unit>
        <trans-unit id="243c405d0e431941f396cdf2cc7debb85eff9bdf" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;ADVANCING&lt;/code&gt; clause is specified on a &lt;code&gt;WRITE&lt;/code&gt; to a line-advancing file, &lt;code&gt;AFTER ADVANCING 1 LINE&lt;/code&gt; will be assumed; on other than line-advancing files, &lt;code&gt;BEFORE ADVANCING 1 LINE&lt;/code&gt; will be assumed.</source>
          <target state="translated">行進行ファイルへの &lt;code&gt;WRITE&lt;/code&gt; &lt;code&gt;ADVANCING&lt;/code&gt; 句が指定されていない場合、 &lt;code&gt;AFTER ADVANCING 1 LINE&lt;/code&gt; が想定されます。ライン &lt;code&gt;BEFORE ADVANCING 1 LINE&lt;/code&gt; ファイル以外では、BEFORE ADVANCING 1LINEが想定されます。</target>
        </trans-unit>
        <trans-unit id="534401253d3dd6379f2606857f4cc89f0c94f6f0" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;AFTER&lt;/code&gt; is specified, the first character position of the target range will be character position #1 of the inspect subject.</source>
          <target state="translated">&lt;code&gt;AFTER&lt;/code&gt; が指定されていない場合、ターゲット範囲の最初の文字位置は、検査対象の文字位置＃1になります。</target>
        </trans-unit>
        <trans-unit id="eb47f868ee5f1f162e6f6003816f7c136573587c" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;BEFORE&lt;/code&gt; is specified, the last character position of the target range will be the last character position of the inspect subject.</source>
          <target state="translated">&lt;code&gt;BEFORE&lt;/code&gt; が指定されていない場合、ターゲット範囲の最後の文字位置が検査対象の最後の文字位置になります。</target>
        </trans-unit>
        <trans-unit id="6fd871db48d394ff9b78f12f0fce35ca9364a8e1" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;COLLATING SEQUENCE&lt;/code&gt; clause is specified, the collating sequence implied by the character set native to the computer (usually ASCII) will be used.</source>
          <target state="translated">&lt;code&gt;COLLATING SEQUENCE&lt;/code&gt; 句が指定されていない場合、コンピュータにネイティブな文字セット（通常はASCII）によって示される照合シーケンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="d88264a069243f7453b6028d4a728c1fac697306" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;FIRST&lt;/code&gt;, &lt;code&gt;LAST&lt;/code&gt; or &lt;code&gt;KEY&lt;/code&gt; clause is specified, &lt;code&gt;KEY IS EQUAL TO &lt;var&gt;xxx&lt;/var&gt;&lt;/code&gt; will be assumed, where &lt;code&gt;&lt;var&gt;xxx&lt;/var&gt;&lt;/code&gt; is the defined &lt;code&gt;RELATIVE KEY&lt;/code&gt; of (if &lt;var&gt;file-name-1&lt;/var&gt; is a relative file) or the defined &lt;code&gt;RECORD KEY&lt;/code&gt; (if &lt;var&gt;file-name-1&lt;/var&gt; is an indexed file).</source>
          <target state="translated">&lt;code&gt;FIRST&lt;/code&gt; 、 &lt;code&gt;LAST&lt;/code&gt; 、または &lt;code&gt;KEY&lt;/code&gt; 句が指定されていない場合、 &lt;code&gt;KEY IS EQUAL TO &lt;var&gt;xxx&lt;/var&gt;&lt;/code&gt; が想定されます。ここで、 &lt;code&gt;&lt;var&gt;xxx&lt;/var&gt;&lt;/code&gt; は定義された &lt;code&gt;RELATIVE KEY&lt;/code&gt; （ &lt;var&gt;file-name-1&lt;/var&gt; が相対ファイルの場合）または定義された &lt;code&gt;RECORD KEY&lt;/code&gt; （ &lt;var&gt;file-name-1&lt;/var&gt; 場合）です。 -1はインデックス付きファイルです）。</target>
        </trans-unit>
        <trans-unit id="4293878bed72313a6e2568d2a16aac81190571f1" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;FROM&lt;/code&gt; clause is specified, &lt;code&gt;FROM CONSOLE&lt;/code&gt; is assumed.</source>
          <target state="translated">&lt;code&gt;FROM&lt;/code&gt; 句が指定されていない場合、 &lt;code&gt;FROM CONSOLE&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="2cceaf02110825913a3c818819bfaba8864abacf" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;PAGE LIMITS&lt;/code&gt; clause is specified, the entire report will be generated as if it consists of a single arbitrarily long page.</source>
          <target state="translated">いいえの場合 &lt;code&gt;PAGE LIMITS&lt;/code&gt; 句が指定されていない、それは、単一の任意の長さのページで構成されているかのように、全体のレポートが生成されます。</target>
        </trans-unit>
        <trans-unit id="e498385d96185eed7cacd4320d52a11ef46ca39a" translate="yes" xml:space="preserve">
          <source>If no &lt;var&gt;CDF-Conditional-Expression-n&lt;/var&gt; evaluates to &lt;code&gt;TRUE&lt;/code&gt; and there is no &lt;code&gt;&amp;gt;&amp;gt;ELSE&lt;/code&gt; clause, then none of the &lt;var&gt;Program-Source-Lines-n&lt;/var&gt; block of statements within the &lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt;-&lt;code&gt;&amp;gt;&amp;gt;END-IF&lt;/code&gt; scope will be processed by the compiler.</source>
          <target state="translated">いいえの場合は &lt;var&gt;CDF-Conditional-Expression-n&lt;/var&gt; に評価 &lt;code&gt;TRUE&lt;/code&gt; とまったくありません &lt;code&gt;&amp;gt;&amp;gt;ELSE&lt;/code&gt; 句がのどれも、その後、 &lt;var&gt;Program-Source-Lines-n&lt;/var&gt; 内のステートメントのブロック &lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt; - &lt;code&gt;&amp;gt;&amp;gt;END-IF&lt;/code&gt; スコープが処理されますコンパイラによって。</target>
        </trans-unit>
        <trans-unit id="c439aee91e928500a2dd00bc3e6fe3094d07c6fa" translate="yes" xml:space="preserve">
          <source>If no &lt;var&gt;CDF-Conditional-Expression&lt;/var&gt; evaluates to &lt;code&gt;TRUE&lt;/code&gt;, and there is an &lt;code&gt;&amp;gt;&amp;gt;ELSE&lt;/code&gt; clause, the &lt;var&gt;Program-Source-Lines-3&lt;/var&gt; block of statements following the &lt;code&gt;&amp;gt;&amp;gt;ELSE&lt;/code&gt; clause will be processed by the compiler and all others within the &lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt;-&lt;code&gt;&amp;gt;&amp;gt;END-IF&lt;/code&gt; scope will be ignored.</source>
          <target state="translated">何場合は &lt;var&gt;CDF-Conditional-Expression&lt;/var&gt; に評価 &lt;code&gt;TRUE&lt;/code&gt; が、そこではありません &lt;code&gt;&amp;gt;&amp;gt;ELSE&lt;/code&gt; 句は、 &lt;var&gt;Program-Source-Lines-3&lt;/var&gt; 次の文のブロック &lt;code&gt;&amp;gt;&amp;gt;ELSE&lt;/code&gt; 句がコンパイラによって処理され、内の他のすべて &lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt; - &lt;code&gt;&amp;gt;&amp;gt;END-IF&lt;/code&gt; スコープは無視されます。</target>
        </trans-unit>
        <trans-unit id="ea11b50cea12a93376d57eb2c22cc7b7c141fc7a" translate="yes" xml:space="preserve">
          <source>If no &lt;var&gt;Locator&lt;/var&gt; is coded, &lt;var&gt;file-name-1&lt;/var&gt; will be attached to a logical device or a file based upon the specified (or implied) &lt;var&gt;Device&lt;/var&gt;, as follows:</source>
          <target state="translated">&lt;var&gt;Locator&lt;/var&gt; がコーディングされていない場合、 &lt;var&gt;file-name-1&lt;/var&gt; は、次のように、指定された（または暗黙の） &lt;var&gt;Device&lt;/var&gt; に基づいて論理デバイスまたはファイルに添付されます。</target>
        </trans-unit>
        <trans-unit id="326b1fc9786b9941320c69f4a2d328c2621c654e" translate="yes" xml:space="preserve">
          <source>If no &lt;var&gt;alphabet-name-1&lt;/var&gt; is specified, the systems native character set will be assumed.</source>
          <target state="translated">&lt;var&gt;alphabet-name-1&lt;/var&gt; が指定されていない場合、システムのネイティブ文字セットが想定されます。</target>
        </trans-unit>
        <trans-unit id="f8d3967f390234b0e1110f4076dff26d44bdbae2" translate="yes" xml:space="preserve">
          <source>If no &lt;var&gt;char&lt;/var&gt; argument is provided, a period (&amp;lsquo;</source>
          <target state="translated">&lt;var&gt;char&lt;/var&gt; 引数が指定されていない場合、ピリオド（ '</target>
        </trans-unit>
        <trans-unit id="a2a4248b2b64fc34d7fa95f6235b59c5f46f6584" translate="yes" xml:space="preserve">
          <source>If no &lt;var&gt;length&lt;/var&gt; is specified, a value equivalent to the remaining character positions from &lt;var&gt;start&lt;/var&gt; to the end of &lt;var&gt;identifier-1&lt;/var&gt; or to the end of the value returned by the function will be assumed.</source>
          <target state="translated">&lt;var&gt;length&lt;/var&gt; が指定されていない場合、 &lt;var&gt;identifier-1&lt;/var&gt; &lt;var&gt;start&lt;/var&gt; から末尾まで、または関数によって返される値の末尾までの残りの文字位置に相当する値が想定されます。</target>
        </trans-unit>
        <trans-unit id="5a3a61b3775ed7776f1c79b27fb6ed8d88789b91" translate="yes" xml:space="preserve">
          <source>If no data division sections are needed, the &lt;code&gt;DATA DIVISION.&lt;/code&gt; header itself may be omitted.</source>
          <target state="translated">データ分割セクションが必要ない場合は、データ分割 &lt;code&gt;DATA DIVISION.&lt;/code&gt; ヘッダー自体は省略できます。</target>
        </trans-unit>
        <trans-unit id="80ec6de7e7c7e7960f42ef9bf764d5e364ff0ae6" translate="yes" xml:space="preserve">
          <source>If no data division sections are needed, the&lt;code&gt;DATA DIVISION.&lt;/code&gt;header itself may be omitted.</source>
          <target state="translated">データ分割セクションが必要ない場合は、 &lt;code&gt;DATA DIVISION.&lt;/code&gt; ヘッダー自体は省略できます。</target>
        </trans-unit>
        <trans-unit id="e5c8083a19d4bf6b791a2ad3bee37fd9780d046a" translate="yes" xml:space="preserve">
          <source>If no data will be described in one of the data division sections, that section header may be omitted.</source>
          <target state="translated">データ分割部のいずれかにデータを記述しない場合は、その部分のヘッダを省略してもよい。</target>
        </trans-unit>
        <trans-unit id="052c39714759c532cb982b4e847835f597be06cb" translate="yes" xml:space="preserve">
          <source>If no environment variable was found, or the</source>
          <target state="translated">環境変数が見つからなかった場合や</target>
        </trans-unit>
        <trans-unit id="4ea37cd62fe13ae475efaf0fa631e7d1254a22ce" translate="yes" xml:space="preserve">
          <source>If no environment variable was found, or the &quot;config&quot; file used to compile the program had a &quot;filename-mapping&quot; value of &quot;no&quot;, then the File Locator String value will serve as the path and filename to the data file.</source>
          <target state="translated">環境変数が見つからなかった場合、またはプログラムをコンパイルするために使用された &quot;config &quot;ファイルの値が &quot;no &quot;であった場合、File Locator Stringの値がデータファイルのパスとファイル名として機能します。</target>
        </trans-unit>
        <trans-unit id="bd8e0699d8e0136dc7ce2219053480886ff4034d" translate="yes" xml:space="preserve">
          <source>If no format or range problems occur during evaluation of &lt;var&gt;argument-2&lt;/var&gt; according to the format in &lt;var&gt;argument-1&lt;/var&gt;, the returned value is zero. Otherwise the returned value is the ordinal character position at which the first error in &lt;var&gt;argument-2&lt;/var&gt; was detected.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; フォーマットに従って &lt;var&gt;argument-2&lt;/var&gt; 評価中にフォーマットまたは範囲の問題が発生しない場合、戻り値はゼロです。それ以外の場合、戻り値は、 &lt;var&gt;argument-2&lt;/var&gt; 最初のエラーが検出された序数文字の位置です。</target>
        </trans-unit>
        <trans-unit id="97d63005403252ba6869749f325e5b668c7826c7" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;ADVANCING&lt;/code&gt;clause is specified on a&lt;code&gt;WRITE&lt;/code&gt;to a line-advancing file,&lt;code&gt;AFTER ADVANCING 1 LINE&lt;/code&gt;will be assumed; on other than line-advancing files,&lt;code&gt;BEFORE ADVANCING 1 LINE&lt;/code&gt;will be assumed.</source>
          <target state="translated">行 &lt;code&gt;AFTER ADVANCING 1 LINE&lt;/code&gt; ファイルへの &lt;code&gt;WRITE&lt;/code&gt; で &lt;code&gt;ADVANCING&lt;/code&gt; 句が指定されていない場合、AFTER ADVANCING 1 LINEが想定されます。行 &lt;code&gt;BEFORE ADVANCING 1 LINE&lt;/code&gt; ファイル以外では、BEFORE ADVANCING 1 LINEが想定されます。</target>
        </trans-unit>
        <trans-unit id="6c0dd54af0bcfe6aba553419a7f8fa41175966da" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;AFTER&lt;/code&gt;is specified, the first character position of the target range will be character position #1 of the inspect subject.</source>
          <target state="translated">&lt;code&gt;AFTER&lt;/code&gt; が指定されていない場合、対象範囲の最初の文字位置は検査対象の文字位置＃1になります。</target>
        </trans-unit>
        <trans-unit id="15393df0a9af6eb90b29b75caf239e68d67158ac" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;BEFORE&lt;/code&gt;is specified, the last character position of the target range will be the last character position of the inspect subject.</source>
          <target state="translated">&lt;code&gt;BEFORE&lt;/code&gt; が指定されていない場合、ターゲット範囲の最後の文字位置が検査対象の最後の文字位置になります。</target>
        </trans-unit>
        <trans-unit id="1a0d2b27d4ce9b801ffdc741e7e7060c7a514405" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;COLLATING SEQUENCE&lt;/code&gt;clause is specified, the collating sequence implied by the character set native to the computer (usually ASCII) will be used.</source>
          <target state="translated">&lt;code&gt;COLLATING SEQUENCE&lt;/code&gt; 句が指定されていない場合、コンピューターに固有の文字セット（通常はASCII）によって暗黙的に指定された照合シーケンスが使用されます。</target>
        </trans-unit>
        <trans-unit id="938ef54a5b2f3a79dc5e586019fcecd25b200f27" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;FIRST&lt;/code&gt;&lt;code&gt;LAST&lt;/code&gt;or&lt;code&gt;KEY&lt;/code&gt;clause is specified,&lt;code&gt;KEY IS EQUAL TO xxx&lt;/code&gt;will be assumed, where &quot;xxx&quot; is the defined&lt;code&gt;RELATIVE KEY&lt;/code&gt;of (if &amp;lt;</source>
          <target state="translated">何の場合 &lt;code&gt;FIRST&lt;/code&gt; &lt;code&gt;LAST&lt;/code&gt; または &lt;code&gt;KEY&lt;/code&gt; 句が指定されていない、 &lt;code&gt;KEY IS EQUAL TO xxx&lt;/code&gt; &quot;xxx&quot;は定義されている場合は、想定される &lt;code&gt;RELATIVE KEY&lt;/code&gt; 場合（の&amp;lt;</target>
        </trans-unit>
        <trans-unit id="3c134ddd26a13c987732536178ffc2d3596e0cc0" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;FROM&lt;/code&gt;clause is specified,&lt;code&gt;FROM CONSOLE&lt;/code&gt;is assumed.</source>
          <target state="translated">&lt;code&gt;FROM&lt;/code&gt; 句が指定されていない場合、 &lt;code&gt;FROM CONSOLE&lt;/code&gt; が想定されます。</target>
        </trans-unit>
        <trans-unit id="a936605766c63b6943b34a949cbfd95d11891a47" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;PAGE LIMITS&lt;/code&gt;clause is specified, the entire report will be generated as if it consists of a single arbitrarily long page.</source>
          <target state="translated">いいえの場合 &lt;code&gt;PAGE LIMITS&lt;/code&gt; 句が指定されていない、それは、単一の任意の長さのページで構成されているかのように、全体のレポートが生成されます。</target>
        </trans-unit>
        <trans-unit id="8df6bcbeab6aa11894e4fe7cbd9a91d3d00317e5" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;UPON&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;UPON&lt;/code&gt; がない場合</target>
        </trans-unit>
        <trans-unit id="fe6ea8dfb325db99c6308c46b06bda141821bb43" translate="yes" xml:space="preserve">
          <source>If no&lt;code&gt;VALUE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;VALUE&lt;/code&gt; がない場合</target>
        </trans-unit>
        <trans-unit id="17a7486226a182e50e61ddf27a8089d1e7d3a4e7" translate="yes" xml:space="preserve">
          <source>If none of the features provided by the configuration section are required by a program, the entire &lt;code&gt;CONFIGURATION SECTION.&lt;/code&gt; header may be omitted from the program.</source>
          <target state="translated">構成セクションによって提供される機能のいずれもプログラムに必要とされない場合は、 &lt;code&gt;CONFIGURATION SECTION.&lt;/code&gt; 全体。ヘッダーはプログラムから省略できます。</target>
        </trans-unit>
        <trans-unit id="acc316a6b22ed428d8859027514f370adf001d62" translate="yes" xml:space="preserve">
          <source>If none of the features provided by the configuration section are required by a program, the entire&lt;code&gt;CONFIGURATION SECTION.&lt;/code&gt;header may be omitted from the program.</source>
          <target state="translated">構成セクションによって提供される機能のいずれもプログラムで必要とされない場合は、 &lt;code&gt;CONFIGURATION SECTION.&lt;/code&gt; 全体。ヘッダーはプログラムから省略できます。</target>
        </trans-unit>
        <trans-unit id="38302bf8e20435daf87449711673f45dc0fc7efa" translate="yes" xml:space="preserve">
          <source>If none of the paragraphs within one of the sections are coded, the section header itself may be omitted.</source>
          <target state="translated">1つのセクション内のいずれの段落もコード化されていない場合は、セクションヘッダー自体を省略してもよい。</target>
        </trans-unit>
        <trans-unit id="3dadd5125e77aeeda6a5112001c153a016dba637" translate="yes" xml:space="preserve">
          <source>If none of the sections within the data division are coded (a highly unlikely, but theoretically possible circumstance), the &lt;code&gt;DATA DIVISION.&lt;/code&gt; header itself may be omitted.</source>
          <target state="translated">データ分割内のどのセクションもコード化されていない場合（非常にありそうもないが、理論的には可能性のある状況）、データ分割 &lt;code&gt;DATA DIVISION.&lt;/code&gt; ヘッダー自体は省略できます。</target>
        </trans-unit>
        <trans-unit id="c20690aa244c08791983cf1b27135cf3c295161b" translate="yes" xml:space="preserve">
          <source>If none of the sections within the data division are coded (a highly unlikely, but theoretically possible circumstance), the&lt;code&gt;DATA DIVISION.&lt;/code&gt;header itself may be omitted.</source>
          <target state="translated">データ部門内のどのセクションもコーディングされていない場合（非常にありそうもないが、理論的には可能な状況）、 &lt;code&gt;DATA DIVISION.&lt;/code&gt; ヘッダー自体は省略できます。</target>
        </trans-unit>
        <trans-unit id="614f1bfd9e62febeba4cb5fdaea32c820a1ed346" translate="yes" xml:space="preserve">
          <source>If none of the sections within the environment division are coded, the &lt;code&gt;ENVIRONMENT DIVISION.&lt;/code&gt; header itself may be omitted.</source>
          <target state="translated">環境部門内のどのセクションもコーディングされていない場合は、 &lt;code&gt;ENVIRONMENT DIVISION.&lt;/code&gt; ヘッダー自体は省略できます。</target>
        </trans-unit>
        <trans-unit id="0a6df96501f79aab798f69106ec9e2b97487e708" translate="yes" xml:space="preserve">
          <source>If none of the sections within the environment division are coded, the&lt;code&gt;ENVIRONMENT DIVISION.&lt;/code&gt;header itself may be omitted.</source>
          <target state="translated">環境部門内のどのセクションもコーディングされていない場合は、 &lt;code&gt;ENVIRONMENT DIVISION.&lt;/code&gt; ヘッダー自体は省略できます。</target>
        </trans-unit>
        <trans-unit id="3f3504ace1fcbbfe8785eaf44906c2e8b0fac8ce" translate="yes" xml:space="preserve">
          <source>If references to table elements are going to be performed many, many times (tens or hundreds of thousands of times or more) during program execution, you will probably see a noticeable reduction in program execution time if you use indexing versus subscripting.</source>
          <target state="translated">プログラムの実行中にテーブル要素への参照が何回も何十万回も(何万回、何十万回以上)も実行される場合、添字と添字を比較してインデックスを使用すると、おそらくプログラムの実行時間が大幅に短縮されるでしょう。</target>
        </trans-unit>
        <trans-unit id="8e464aa3baae37e1c17db766f8597a99a293b6e4" translate="yes" xml:space="preserve">
          <source>If references to table elements are not going to be performed many, many times it probably won&amp;rsquo;t make much difference whether you use indexing or subscripting.</source>
          <target state="translated">テーブル要素への参照が多く実行されない場合、インデックス付けと添え字付けのどちらを使用しても、多くの場合、それほど大きな違いはありません。</target>
        </trans-unit>
        <trans-unit id="aaecf6782edaccec3acfe39a9b02ed5a4cd9c916" translate="yes" xml:space="preserve">
          <source>If rule</source>
          <target state="translated">ルール</target>
        </trans-unit>
        <trans-unit id="2d7b2b72b6ddc84fee15212248b1a81b23f1b096" translate="yes" xml:space="preserve">
          <source>If rule (A) is violated, the compiler will reject the&lt;code&gt;SEARCH ALL&lt;/code&gt; If rules (B) and/or (C) are violated, there will be no message issued by the compiler, but the run-time results of a&lt;code&gt;SEARCH ALL&lt;/code&gt;against the table will probably be incorrect.</source>
          <target state="translated">ルール（A）が違反した場合、コンパイラは拒否します &lt;code&gt;SEARCH ALL&lt;/code&gt; ルール（B）および/または（C）が違反している場合は、コンパイラによって発行された何のメッセージが、の実行時の結果は存在しません &lt;code&gt;SEARCH ALL&lt;/code&gt; に対してテーブルはおそらく正しくありません。</target>
        </trans-unit>
        <trans-unit id="953965bec96dd86973cb12584b0c3f4d8e27d9dc" translate="yes" xml:space="preserve">
          <source>If set to &quot;Y&quot;, &quot;y&quot; or &quot;1&quot;, a&lt;code&gt;CANCEL&lt;/code&gt;statement (see &lt;a href=&quot;#CANCEL&quot;&gt;CANCEL&lt;/a&gt;) will physically unload a subprogram dynamically-loadable module.</source>
          <target state="translated">「Y」、「Y」または「1」に設定した場合、 &lt;code&gt;CANCEL&lt;/code&gt; （参照文を&lt;a href=&quot;#CANCEL&quot;&gt;CANCEL&lt;/a&gt;物理サブプログラム、動的にロード可能なモジュールをアンロードします）。</target>
        </trans-unit>
        <trans-unit id="f88d67aae9fbbcc5e6bf0dc40d8e5dbe106478a0" translate="yes" xml:space="preserve">
          <source>If set to &amp;lsquo;</source>
          <target state="translated">に設定した場合</target>
        </trans-unit>
        <trans-unit id="e304fe2f130a29229fe3b203d139f3c8d0b1b8a9" translate="yes" xml:space="preserve">
          <source>If set to a value of &quot;Y&quot;, any run-time warnings (such as noting the implicit closing of open files when a&lt;code&gt;GOBACK&lt;/code&gt;statement (see &lt;a href=&quot;#GOBACK&quot;&gt;GOBACK&lt;/a&gt;) or&lt;code&gt;STOP&lt;/code&gt;statement (see &lt;a href=&quot;#STOP&quot;&gt;STOP&lt;/a&gt;) with the&lt;code&gt;RUN&lt;/code&gt;option is executed) will be displayed. Any other value for this environment variable (including not setting the variable at all) will suppress such messages.</source>
          <target state="translated">「Y」の値に設定するには、（例えば、開いているファイルの暗黙の決算に注目として任意の実行時の警告場合 &lt;code&gt;GOBACK&lt;/code&gt; の声明（参照&lt;a href=&quot;#GOBACK&quot;&gt;GOBACKを&lt;/a&gt;）または &lt;code&gt;STOP&lt;/code&gt; の声明（参照&lt;a href=&quot;#STOP&quot;&gt;STOPを&lt;/a&gt;持つ） &lt;code&gt;RUN&lt;/code&gt; のオプションが実行される）が表示されます。この環境変数の他の値（変数をまったく設定しないことを含む）は、そのようなメッセージを抑制します。</target>
        </trans-unit>
        <trans-unit id="2e24028937a15160864d8d70027a4e0de73165b6" translate="yes" xml:space="preserve">
          <source>If set to a value of &amp;lsquo;</source>
          <target state="translated">'の値に設定されている場合</target>
        </trans-unit>
        <trans-unit id="2bc077c4c98b87e839493508304c45c1d8484f6d" translate="yes" xml:space="preserve">
          <source>If set to a value of upper- or lower-case &quot;p&quot;, this variable will force a file commit every time a file is written to (ensuring that data is immediately written to the file rather than retained in memory until a future commit occurs). This will slow-down update access to files, but will provide for better integrity in the event of a program failure.</source>
          <target state="translated">大文字または小文字の &quot;p &quot;の値に設定されている場合、この変数は、ファイルが書き込まれるたびにファイルのコミットを強制します(将来のコミットが発生するまでデータがメモリに保持されるのではなく、即座にファイルに書き込まれることを保証します)。これにより、ファイルへの更新アクセスが遅くなりますが、プログラムの障害が発生した場合の整合性を向上させることができます。</target>
        </trans-unit>
        <trans-unit id="8ef009313288e4b38dade52c03aab10d1ff99537" translate="yes" xml:space="preserve">
          <source>If set to a value of upper- or lower-case &amp;lsquo;</source>
          <target state="translated">大文字または小文字の値に設定されている場合 '</target>
        </trans-unit>
        <trans-unit id="a40079ff225e97a80fb28e577e2103bb2e14eadc" translate="yes" xml:space="preserve">
          <source>If set to any non-blank value, this variable allows a &lt;code&gt;ACCEPT screen-data-item&lt;/code&gt; statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) to detect the &lt;code&gt;Esc&lt;/code&gt; key.</source>
          <target state="translated">空白以外の値に設定すると、この変数により、 &lt;code&gt;ACCEPT screen-data-item&lt;/code&gt; ステートメント（&lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-itemを&lt;/a&gt;参照）が &lt;code&gt;Esc&lt;/code&gt; キーを検出できるようになります。</target>
        </trans-unit>
        <trans-unit id="1ff6dd80412acb65fea091eeee45227f17f79745" translate="yes" xml:space="preserve">
          <source>If set to any non-blank value, this variable allows a&lt;code&gt;ACCEPT screen-data-item&lt;/code&gt;statement (see &lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-item&lt;/a&gt;) to detect the &quot;Esc&quot; key.</source>
          <target state="translated">空白以外の値に設定すると、この変数により、 &lt;code&gt;ACCEPT screen-data-item&lt;/code&gt; ステートメント（&lt;a href=&quot;#ACCEPT-screen_002ddata_002ditem&quot;&gt;ACCEPT screen-data-itemを&lt;/a&gt;参照）が「Esc」キーを検出できるようになります。</target>
        </trans-unit>
        <trans-unit id="e1484a009cf90e95f0122b3b84adf74c213a3afb" translate="yes" xml:space="preserve">
          <source>If set to any non-null value, this environment variable specifies the file to which all</source>
          <target state="translated">非 null 以外の値が設定されている場合、この環境変数は、すべての</target>
        </trans-unit>
        <trans-unit id="02c873d8dea11df102afae708aa8d02b69151e6b" translate="yes" xml:space="preserve">
          <source>If set to any non-null value, this environment variable specifies the file to which all&lt;code&gt;-ftrace&lt;/code&gt;switch and&lt;code&gt;-ftraceall&lt;/code&gt;switch output will be written.</source>
          <target state="translated">null以外の値に設定した場合、この環境変数は、すべての &lt;code&gt;-ftrace&lt;/code&gt; スイッチおよび &lt;code&gt;-ftraceall&lt;/code&gt; スイッチの出力が書き込まれるファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="422d3cddd2d7b811c88085d18de9df66cdccb313" translate="yes" xml:space="preserve">
          <source>If set to any non-null value, this variable will cause all dynamically-loadable libraries to be loaded when the program begins execution (rather than searching for and loading the module upon first use).</source>
          <target state="translated">NULLではない値に設定されている場合、この変数はプログラムの実行開始時にすべての動的にロード可能なライブラリをロードします (最初の使用時にモジュールを検索してロードするのではなく)。</target>
        </trans-unit>
        <trans-unit id="d8aab5d7cf6334fa7d1d64a36e03690790d2311f" translate="yes" xml:space="preserve">
          <source>If set to anything else, a&lt;code&gt;CANCEL&lt;/code&gt;statement (see &lt;a href=&quot;#CANCEL&quot;&gt;CANCEL&lt;/a&gt;) logically unloads a module so that subsequent use will re-initialize the module as if it had actually been reloaded, but the overhead of actually reloading the module will be avoided.</source>
          <target state="translated">以外の値を設定した場合、 &lt;code&gt;CANCEL&lt;/code&gt; （参照文を&lt;a href=&quot;#CANCEL&quot;&gt;CANCEL&lt;/a&gt;その後の使用が再初期化モジュールますので、それが実際に再ロードされていたが、実際にモジュールを再ロードするオーバーヘッドが回避されるかのように論理的にモジュールをアンロード）。</target>
        </trans-unit>
        <trans-unit id="8a128e5ae83dd950222f98e00dbd8196d885904f" translate="yes" xml:space="preserve">
          <source>If set to either &lt;code&gt;UPPER&lt;/code&gt; or &lt;code&gt;LOWER&lt;/code&gt;, this environment variable will internally convert referenced entry-point names to either upper- or lower-case before initiating searches for dynamically-loadable modules. The &lt;code&gt;UPPER&lt;/code&gt; and &lt;code&gt;LOWER&lt;/code&gt; values of the environment variable are actually case-insensitive.</source>
          <target state="translated">&lt;code&gt;UPPER&lt;/code&gt; または &lt;code&gt;LOWER&lt;/code&gt; のいずれかに設定されている場合、この環境変数は、動的にロード可能なモジュールの検索を開始する前に、参照されるエントリポイント名を大文字または小文字に内部的に変換します。環境変数の &lt;code&gt;UPPER&lt;/code&gt; 値と &lt;code&gt;LOWER&lt;/code&gt; 値は、実際には大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="ffb03e9553a2471b244e5697186cb21ecae1836a" translate="yes" xml:space="preserve">
          <source>If set to either&lt;code&gt;UPPER&lt;/code&gt;or&lt;code&gt;LOWER&lt;/code&gt; this environment variable will internally convert referenced entry-point names to either upper- or lower-case before initiating searches for dynamically-loadable modules. The&lt;code&gt;UPPER&lt;/code&gt;and&lt;code&gt;LOWER&lt;/code&gt;values of the environment variable are actually case-insensitive.</source>
          <target state="translated">&lt;code&gt;UPPER&lt;/code&gt; または &lt;code&gt;LOWER&lt;/code&gt; に設定されている場合、この環境変数は、動的にロード可能なモジュールの検索を開始する前に、参照されているエントリポイント名を大文字または小文字に内部的に変換します。環境変数の &lt;code&gt;UPPER&lt;/code&gt; および &lt;code&gt;LOWER&lt;/code&gt; 値は、実際には大文字と小文字を区別しません。</target>
        </trans-unit>
        <trans-unit id="75ff3ad897d4389bd5d4346a9d0cead6b649265f" translate="yes" xml:space="preserve">
          <source>If specified, &amp;lt;</source>
          <target state="translated">指定した場合、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="f6d52ca0abfa8f5411c2983924d29df64c8c256d" translate="yes" xml:space="preserve">
          <source>If specified, &lt;var&gt;file-name-1&lt;/var&gt; and &lt;var&gt;file-name-2&lt;/var&gt; must reference &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-LINE-SEQUENTIAL&quot;&gt;ORGANIZATION LINE SEQUENTIAL&lt;/a&gt;) or &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIAL&lt;/a&gt;) files. These files must be defined using a file description (&lt;code&gt;FD&lt;/code&gt; (see &lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;File/Sort-Description&lt;/a&gt;)). The same file(s) may be used for &lt;var&gt;file-name-1&lt;/var&gt; and &lt;var&gt;file-name-2&lt;/var&gt;.</source>
          <target state="translated">指定する場合、 &lt;var&gt;file-name-1&lt;/var&gt; および &lt;var&gt;file-name-2&lt;/var&gt; は、 &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; （&lt;a href=&quot;#ORGANIZATION-LINE-SEQUENTIAL&quot;&gt;ORGANIZATION LINE SEQUENTIALを&lt;/a&gt;参照）または &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; （&lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIALを&lt;/a&gt;参照）ファイルを参照する必要があります。これらのファイルは、ファイルの説明（ &lt;code&gt;FD&lt;/code&gt; （&lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;ファイル/並べ替えの説明を&lt;/a&gt;参照））を使用して定義する必要があります。同じファイルを &lt;var&gt;file-name-1&lt;/var&gt; と &lt;var&gt;file-name-2&lt;/var&gt; に使用できます。</target>
        </trans-unit>
        <trans-unit id="d643f7a76d11f3783c425395dd049a444b2d9584" translate="yes" xml:space="preserve">
          <source>If specified, &lt;var&gt;literal-1&lt;/var&gt; must be an actual alphanumeric literal and may not be a figurative constant.</source>
          <target state="translated">指定する場合、 &lt;var&gt;literal-1&lt;/var&gt; は実際の英数字リテラルである必要があり、比喩的な定数ではない場合があります。</target>
        </trans-unit>
        <trans-unit id="3d9b7696c9777c3fdef5f5f1690ef14ee23382d9" translate="yes" xml:space="preserve">
          <source>If the</source>
          <target state="translated">の場合は</target>
        </trans-unit>
        <trans-unit id="a61102f29e127858b5b49ad3ddadb11d241c6452" translate="yes" xml:space="preserve">
          <source>If the  &lt;code&gt;CONSTANT&lt;/code&gt; option is used, &lt;var&gt;literal-1&lt;/var&gt; must also be used. This option provides another means of defining constants that may be used anywhere in the program that a literal could be specified.</source>
          <target state="translated">場合 &lt;code&gt;CONSTANT&lt;/code&gt; のオプションが使用され、 &lt;var&gt;literal-1&lt;/var&gt; また、使用する必要があります。このオプションは、リテラルを指定できるプログラム内の任意の場所で使用できる定数を定義する別の手段を提供します。</target>
        </trans-unit>
        <trans-unit id="1b97cb6dfd7464ecb308b4b7b48f8c5eb2d3f1b9" translate="yes" xml:space="preserve">
          <source>If the  &lt;code&gt;CRT STATUS&lt;/code&gt; clause is not specified, an implicit  &lt;code&gt;COB-CRT-STATUS&lt;/code&gt; identifier (with a &lt;code&gt;PICTURE 9(4)&lt;/code&gt;) will be allocated for the purpose of receiving screen &lt;code&gt;ACCEPT&lt;/code&gt; statuses. If &lt;code&gt;CRT STATUS&lt;/code&gt; is specified, then &lt;var&gt;identifier-1&lt;/var&gt; must be defined in the program as a &lt;code&gt;PICTURE 9(4)&lt;/code&gt; field.</source>
          <target state="translated">&lt;code&gt;CRT STATUS&lt;/code&gt; 句が指定されていない場合、 画面の &lt;code&gt;ACCEPT&lt;/code&gt; ステータスを受信する目的で、暗黙の &lt;code&gt;COB-CRT-STATUS&lt;/code&gt; 識別子（ &lt;code&gt;PICTURE 9(4)&lt;/code&gt; を使用）が割り当てられます。場合 &lt;code&gt;CRT STATUS&lt;/code&gt; 指定され、その後 &lt;var&gt;identifier-1&lt;/var&gt; のようなプログラムで定義されなければならない &lt;code&gt;PICTURE 9(4)&lt;/code&gt; フィールド。</target>
        </trans-unit>
        <trans-unit id="3d34d52f388167ee4038f6dc4387fe17a911a532" translate="yes" xml:space="preserve">
          <source>If the  &lt;code&gt;LOCK ON&lt;/code&gt; clause is</source>
          <target state="translated">場合は &lt;code&gt;LOCK ON&lt;/code&gt; 句があります</target>
        </trans-unit>
        <trans-unit id="10f70fdda4e9fca981b962e0cf0e57130077fb32" translate="yes" xml:space="preserve">
          <source>If the  &lt;code&gt;REMAINDER&lt;/code&gt; clause is coded, there may be only one &lt;var&gt;identifier-3&lt;/var&gt; specified.</source>
          <target state="translated">&lt;code&gt;REMAINDER&lt;/code&gt; 句がコーディングされている場合、 指定されている &lt;var&gt;identifier-3&lt;/var&gt; は1つだけです。</target>
        </trans-unit>
        <trans-unit id="fc641baf619f0e3d0d10496e69f3b55fd6e604c8" translate="yes" xml:space="preserve">
          <source>If the &amp;lt;</source>
          <target state="translated">&amp;lt;</target>
        </trans-unit>
        <trans-unit id="e13e056c87fa2f427f793205b7eacd30a5fd277c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ACCESS MODE&lt;/code&gt; of &lt;var&gt;file-name-1&lt;/var&gt; is &lt;code&gt;RANDOM&lt;/code&gt;, this is the</source>
          <target state="translated">場合は &lt;code&gt;ACCESS MODE&lt;/code&gt; の &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;RANDOM&lt;/code&gt; 、これはあります</target>
        </trans-unit>
        <trans-unit id="cbfec2ca247c35b1fe3cd674bf865aa9c4e77254" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ACCESS MODE&lt;/code&gt; of &lt;var&gt;file-name-1&lt;/var&gt; is &lt;code&gt;SEQUENTIAL&lt;/code&gt;, or the &lt;code&gt;ORGANIZATION&lt;/code&gt; of the file is any form of sequential, this format of the &lt;code&gt;READ&lt;/code&gt; statement cannot be used.</source>
          <target state="translated">場合は &lt;code&gt;ACCESS MODE&lt;/code&gt; の &lt;var&gt;file-name-1&lt;/var&gt; ある &lt;code&gt;SEQUENTIAL&lt;/code&gt; 、または &lt;code&gt;ORGANIZATION&lt;/code&gt; ファイルのシーケンシャルのいずれかの形式で、この形式 &lt;code&gt;READ&lt;/code&gt; 文では使用できません。</target>
        </trans-unit>
        <trans-unit id="3b99a4ee59cfeb5de61b259ea000c70aa7e4d712" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ADDRESS OF&lt;/code&gt; clause is absent after the &lt;code&gt;TO&lt;/code&gt;, the contents of &lt;var&gt;pointer-name-2&lt;/var&gt; will serve as the address to be assigned.</source>
          <target state="translated">&lt;code&gt;TO&lt;/code&gt; の後に &lt;code&gt;ADDRESS OF&lt;/code&gt; 句がない場合、 &lt;var&gt;pointer-name-2&lt;/var&gt; の内容が割り当てられるアドレスとして機能します。</target>
        </trans-unit>
        <trans-unit id="3a39328d467fa4aba02370624eef3ef047a3e884" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ALL&lt;/code&gt; keyword was specified on the &lt;code&gt;VALUE&lt;/code&gt; clause, all members of the field list with &lt;code&gt;VALUE&lt;/code&gt; clauses will qualify.</source>
          <target state="translated">場合は &lt;code&gt;ALL&lt;/code&gt; のキーワードが上で指定された &lt;code&gt;VALUE&lt;/code&gt; の句、とフィールドリストのすべてのメンバー &lt;code&gt;VALUE&lt;/code&gt; の条項が対象となります。</target>
        </trans-unit>
        <trans-unit id="affc8978f778bb38e14313c6ca5fcc039529bb95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ANYCASE&lt;/code&gt; keyword is specified, the matching rules for detecting a currency string in &lt;var&gt;argument-1&lt;/var&gt; are case-insensitive. If not specified, the matching rules are case-sensitive.</source>
          <target state="translated">場合 &lt;code&gt;ANYCASE&lt;/code&gt; のキーワードが指定され、通貨文字列を検出するためのマッチングルール &lt;var&gt;argument-1&lt;/var&gt; 大文字と小文字を区別しません。指定しない場合、一致ルールでは大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="6c01a232d52ad2f85603f61ab340b0cc67dd59c9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;ANYCASE&lt;/code&gt; keyword is used the matching rules for detecting a currency string in &lt;var&gt;argument-1&lt;/var&gt; are case-insensitive. If the &lt;code&gt;ANYCASE&lt;/code&gt; keyword is not specified, the matching rules are case-sensitive.</source>
          <target state="translated">場合 &lt;code&gt;ANYCASE&lt;/code&gt; のキーワードが使用される通貨文字列を検出するためのマッチングルール &lt;var&gt;argument-1&lt;/var&gt; 大文字と小文字を区別しません。場合 &lt;code&gt;ANYCASE&lt;/code&gt; のキーワードが指定されていない、マッチングルールは、大文字と小文字が区別されます。</target>
        </trans-unit>
        <trans-unit id="cb8f2b64fc86910982f5fae1234323c5b508ae09" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;DISPLAY&lt;/code&gt; verb is executing, then the size is the same as if the &lt;code&gt;CONVERT&lt;/code&gt; phrase were not specified except for numeric items. For numeric items, the size is the number of digits in the item, plus one if it is not an integer, plus one if it is signed. The remaining cases cover the size when an &lt;code&gt;ACCEPT&lt;/code&gt; statement is used.</source>
          <target state="translated">場合 &lt;code&gt;DISPLAY&lt;/code&gt; が動詞で実行されている場合、サイズがあるかのように同じである &lt;code&gt;CONVERT&lt;/code&gt; のフレーズは、数字項目を除いて指定されていませんでした。数値アイテムの場合、サイズはアイテムの桁数に、整数でない場合は1を加え、符号付きの場合は1を加えたものです。残りのケースは、 &lt;code&gt;ACCEPT&lt;/code&gt; ステートメントが使用される場合のサイズをカバーします。</target>
        </trans-unit>
        <trans-unit id="b21479425a0b5f1b3972c0bb6a5e095100ce63f5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;FD&lt;/code&gt; of the file contains the &lt;code&gt;RECORD CONTAINS&lt;/code&gt; or &lt;code&gt;RECORD IS VARYING&lt;/code&gt; clause, and that clause allows the record size to vary, the size</source>
          <target state="translated">場合は &lt;code&gt;FD&lt;/code&gt; ファイルのが含まれてい &lt;code&gt;RECORD CONTAINS&lt;/code&gt; または &lt;code&gt;RECORD IS VARYING&lt;/code&gt; の句を、その句が変えるために、レコードサイズ、サイズを可能に</target>
        </trans-unit>
        <trans-unit id="612748aa0fd9fd900088d10208b06bb3cf2d1475" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;FD&lt;/code&gt; of the file contains the &lt;code&gt;RECORD CONTAINS&lt;/code&gt; or &lt;code&gt;RECORD IS VARYING&lt;/code&gt; clause, and that clause allows the record size to vary, the size of &lt;var&gt;record-name-1&lt;/var&gt; cannot be altered.</source>
          <target state="translated">場合 &lt;code&gt;FD&lt;/code&gt; のファイルに含まれる &lt;code&gt;RECORD CONTAINS&lt;/code&gt; か、 &lt;code&gt;RECORD IS VARYING&lt;/code&gt; 句、及びその句はのサイズ、レコードサイズは変化することができ &lt;var&gt;record-name-1&lt;/var&gt; 変更することができません。</target>
        </trans-unit>
        <trans-unit id="e7c0d4e8f13608d05ca72c7f3b1d750f90712a45" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;KEY&lt;/code&gt; clause</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; 句の場合</target>
        </trans-unit>
        <trans-unit id="4547815fd9462b9fdfd1b9e08a5b31f916fcc311" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;KEY&lt;/code&gt; clause is absent, and the file is</source>
          <target state="translated">場合 &lt;code&gt;KEY&lt;/code&gt; 句は存在せず、ファイルがあります</target>
        </trans-unit>
        <trans-unit id="c131416981dbc6b7002b415e8799c61201dcee0e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;LINAGE&lt;/code&gt; (see &lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;File/Sort-Description&lt;/a&gt;) clause is</source>
          <target state="translated">場合 &lt;code&gt;LINAGE&lt;/code&gt; （参照&lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;ファイル/ソート-説明&lt;/a&gt;）句があります</target>
        </trans-unit>
        <trans-unit id="5958dd0b525624c148252a3b2cc0e92d9d3b1d1c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;LOCK ON&lt;/code&gt; clause</source>
          <target state="translated">もし &lt;code&gt;LOCK ON&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="4d86db89a19e04fde3c518d2333f8c4d9f0d9c88" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PERFORM&lt;/code&gt; specifies or implies &lt;code&gt;WITH TEST BEFORE&lt;/code&gt;, &lt;var&gt;conditional-expression-1&lt;/var&gt; will be evaluated and processing of the &lt;code&gt;PERFORM&lt;/code&gt; will halt if the expression evaluates to &lt;code&gt;TRUE&lt;/code&gt;. If &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; was</source>
          <target state="translated">&lt;code&gt;PERFORM&lt;/code&gt; がWITHTEST &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; 指定または暗示する場合、 &lt;var&gt;conditional-expression-1&lt;/var&gt; が評価され、式が &lt;code&gt;TRUE&lt;/code&gt; と評価されると、 &lt;code&gt;PERFORM&lt;/code&gt; の処理が停止します。 &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; だった場合</target>
        </trans-unit>
        <trans-unit id="c8a8781b936d58dad050ed871a38906d8222a3e3" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;PROGRAM-ID&lt;/code&gt; (see &lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISION&lt;/a&gt;) clause of the subprogram included the  &lt;code&gt;INITIAL&lt;/code&gt; clause, the program will be reinitialized back to its compile-time state. This will happen regardless of the &lt;code&gt;INITIAL&lt;/code&gt; clause the first time the subprogram is executed.</source>
          <target state="translated">サブプログラムの &lt;code&gt;PROGRAM-ID&lt;/code&gt; （&lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISIONを&lt;/a&gt;参照）句に &lt;code&gt;INITIAL&lt;/code&gt; 句が含まれて いる場合、プログラムはコンパイル時の状態に再初期化されます。これは、サブプログラムが最初に実行されるときに、 &lt;code&gt;INITIAL&lt;/code&gt; 句に関係なく発生します。</target>
        </trans-unit>
        <trans-unit id="61c625a5b9d0d59baca0aca12858bf1329830d25" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RD&lt;/code&gt; (see &lt;a href=&quot;#REPORT-SECTION&quot;&gt;REPORT SECTION&lt;/a&gt;) in which the report group containing a &lt;code&gt;NEXT GROUP&lt;/code&gt; clause does not contain a &lt;code&gt;PAGE LIMITS&lt;/code&gt; clause, only the &lt;code&gt;PLUS integer-1&lt;/code&gt; option may be specified.</source>
          <target state="translated">&lt;code&gt;NEXT GROUP&lt;/code&gt; 句を含むレポートグループに &lt;code&gt;PAGE LIMITS&lt;/code&gt; 句が含まれていない &lt;code&gt;RD&lt;/code&gt; （&lt;a href=&quot;#REPORT-SECTION&quot;&gt;REPORT SECTIONを&lt;/a&gt;参照）の場合は、PLUSinteger &lt;code&gt;PLUS integer-1&lt;/code&gt; オプションのみを指定できます。</target>
        </trans-unit>
        <trans-unit id="c8e781dd56448e51eb78f19906f5d0d7a4bbccc2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;RESET&lt;/code&gt; option is coded, &lt;code&gt;FINAL&lt;/code&gt; or &lt;var&gt;identifier-8&lt;/var&gt; (whichever is coded on the &lt;code&gt;RESET&lt;/code&gt;) must be one of the report&amp;rsquo;s control breaks specified on the &lt;code&gt;CONTROLS&lt;/code&gt; clause.</source>
          <target state="translated">&lt;code&gt;RESET&lt;/code&gt; オプションがコーディングされている場合、 &lt;code&gt;FINAL&lt;/code&gt; または &lt;var&gt;identifier-8&lt;/var&gt; （ &lt;code&gt;RESET&lt;/code&gt; でコーディングされている方）は、 &lt;code&gt;CONTROLS&lt;/code&gt; 句で指定されたレポートのコントロールブレークの1つである必要があります。</target>
        </trans-unit>
        <trans-unit id="9731559b4666a0155b6ed6fd6776bba0461135ca" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SELECT&lt;/code&gt; (see &lt;a href=&quot;#SELECT&quot;&gt;SELECT&lt;/a&gt;) statement or file &lt;code&gt;OPEN&lt;/code&gt; (see &lt;a href=&quot;#OPEN&quot;&gt;OPEN&lt;/a&gt;) specifies &lt;code&gt;SHARING WITH NO OTHER&lt;/code&gt;, record locking will be disabled.</source>
          <target state="translated">場合 &lt;code&gt;SELECT&lt;/code&gt; （参照&lt;a href=&quot;#SELECT&quot;&gt;SELECT&lt;/a&gt;文またはファイル） &lt;code&gt;OPEN&lt;/code&gt; を（参照&lt;a href=&quot;#OPEN&quot;&gt;OPENを&lt;/a&gt;）指定 &lt;code&gt;SHARING WITH NO OTHER&lt;/code&gt; 、レコードのロックは無効になります。</target>
        </trans-unit>
        <trans-unit id="c36b400baefa619ddc6f8161b993620feb6e7338" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SELECT&lt;/code&gt; of a file is coded with a &lt;code&gt;FILE STATUS&lt;/code&gt; clause, &lt;code&gt;OPEN&lt;/code&gt; failures &amp;mdash; including those induced by sharing failures &amp;mdash; will be detectable by the program and a graceful recovery (or at least a graceful termination) will be possible. If no such clause was coded, however, a runtime message will be issued and the program will be terminated.</source>
          <target state="translated">ファイルの &lt;code&gt;SELECT&lt;/code&gt; が &lt;code&gt;FILE STATUS&lt;/code&gt; 句でコーディングされている場合、 &lt;code&gt;OPEN&lt;/code&gt; の失敗（共有の失敗によって引き起こされたものを含む）はプログラムによって検出可能であり、正常な回復（または少なくとも正常な終了）が可能です。ただし、そのような句がコーディングされていない場合は、ランタイムメッセージが発行され、プログラムが終了します。</target>
        </trans-unit>
        <trans-unit id="6ae0587444dde6ad68a36a9c51951f280dcedd0b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SEPARATE CHARACTER&lt;/code&gt; clause</source>
          <target state="translated">もし &lt;code&gt;SEPARATE CHARACTER&lt;/code&gt; の句</target>
        </trans-unit>
        <trans-unit id="8833ea8060feeb2e21ef8632dc5243ea617a1936" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SIZE&lt;/code&gt; phrase is not used, then the field length defaults to the size of the item being accepted or displayed. If the &lt;code&gt;CONVERT&lt;/code&gt; phrase is used, however, then the size of the field depends on the data type of the item and the verb being used.</source>
          <target state="translated">&lt;code&gt;SIZE&lt;/code&gt; 句が使用されていない場合、フィールド長はデフォルトで受け入れまたは表示されているアイテムのサイズになります。ただし、 &lt;code&gt;CONVERT&lt;/code&gt; 句が使用されている場合、フィールドのサイズは、アイテムのデータ型と使用されている動詞によって異なります。</target>
        </trans-unit>
        <trans-unit id="f2e7f31806cccbda89316cd317a96b918accf50b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;SYNCRONIZED&lt;/code&gt; clause is coded on anything but a numeric data item with a &lt;code&gt;USAGE&lt;/code&gt; (see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) that specifies storage of data in a binary form, the &lt;code&gt;SYNCRONIZED&lt;/code&gt; clause will be ignored.</source>
          <target state="translated">場合 &lt;code&gt;SYNCRONIZED&lt;/code&gt; 句を使って何が、数字データ項目でコード化された &lt;code&gt;USAGE&lt;/code&gt; （参照&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;バイナリ形式のデータのように指定し保存）、 &lt;code&gt;SYNCRONIZED&lt;/code&gt; 句は無視されます。</target>
        </trans-unit>
        <trans-unit id="adb29705e22e972e94afa12e6e0d59c74f962b10" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;Program-Source-Lines-n&lt;/var&gt;&amp;gt; statement block selected for processing is empty, no error results &amp;mdash; there will just be no code generated from the &lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt;-&lt;code&gt;&amp;gt;&amp;gt;END-IF&lt;/code&gt; structure.</source>
          <target state="translated">処理用に選択された &lt;var&gt;Program-Source-Lines-n&lt;/var&gt; &amp;gt;ステートメントブロックが空の場合、エラーは発生しません。 &lt;code&gt;&amp;gt;&amp;gt;IF&lt;/code&gt; - &lt;code&gt;&amp;gt;&amp;gt;END-IF&lt;/code&gt; 構造から生成されたコードはありません。</target>
        </trans-unit>
        <trans-unit id="564bf6b26846f0e8ea8231e86eea4efd5ec50259" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;Selection-Object&lt;/var&gt; is a &lt;var&gt;partial-expression&lt;/var&gt;, then the conditional expression that would be represented by coding &lt;code&gt;&lt;var&gt;Selection-Subject&lt;/var&gt; &lt;var&gt;Selection-Object&lt;/var&gt;&lt;/code&gt; evaluates to &lt;code&gt;TRUE&lt;/code&gt;</source>
          <target state="translated">&lt;var&gt;Selection-Object&lt;/var&gt; が &lt;var&gt;partial-expression&lt;/var&gt; 場合、Selection- &lt;code&gt;&lt;var&gt;Selection-Subject&lt;/var&gt; &lt;var&gt;Selection-Object&lt;/var&gt;&lt;/code&gt; コーディングによって表される条件式は、 &lt;code&gt;TRUE&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="66b0f3198b803257325039929d9fe35011c49095" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;date&lt;/var&gt; is valid, a 0 value is returned. If it isn&amp;rsquo;t, a value of 1, 2 or 3 is returned signalling the problem lies with the year, month or day, respectively.</source>
          <target state="translated">場合は &lt;var&gt;date&lt;/var&gt; 有効で、0の値が返されます。そうでない場合は、1、2、または3の値が返され、それぞれ年、月、または日に問題があることを示します。</target>
        </trans-unit>
        <trans-unit id="9c430cd31b9abfd8e44351ebd7f1aa3c9a7a5032" translate="yes" xml:space="preserve">
          <source>If the &lt;var&gt;identifier-1&lt;/var&gt; option was used, altering the value of that data item within the perform scope will</source>
          <target state="translated">場合 &lt;var&gt;identifier-1&lt;/var&gt; オプションを使用し、内部にそのデータ項目の値を変更するスコープ意志を行います</target>
        </trans-unit>
        <trans-unit id="80f8927587ac8a416163b826212188d6cd97481c" translate="yes" xml:space="preserve">
          <source>If the DISPLAY verb is executing, then the size is the same as if the CONVERT phrase were not specified except for numeric items. For numeric items, the size is the number of digits in the item, plus one if it is not an integer, plus one if it is signed. The remaining cases cover the size when an ACCEPT statement is used.</source>
          <target state="translated">DISPLAY 動詞が実行されている場合、数値項目以外は CONVERT フレーズを指定しなかった場合と同じサイズになります。数値項目の場合、サイズはその項目の桁数に整数でない場合は1を加え、符号付きの場合は1を加えた値になります。残りのケースは、ACCEPT文を使用した場合のサイズをカバーしています。</target>
        </trans-unit>
        <trans-unit id="fd1fa5d5fdcea9b7c73d25c9d04a3be93ca9dd38" translate="yes" xml:space="preserve">
          <source>If the GnuCOBOL build you are using was configured to use the Berkeley Database (BDB) package for indexed file I/O, record locking will be available by using the</source>
          <target state="translated">使用している GnuCOBOL ビルドが Berkeley Database (BDB)パッケージを使用してインデックス化されたファイル I/O を使用するように設定されている場合、レコードロックは</target>
        </trans-unit>
        <trans-unit id="0d899de06d6d01d580a3dfba1caa36e62b45d65a" translate="yes" xml:space="preserve">
          <source>If the GnuCOBOL build you are using was configured to use the Berkeley Database (BDB) package for indexed file I/O, record locking will be available by using the   &lt;code&gt;DB_HOME&lt;/code&gt; run-time environment variable.</source>
          <target state="translated">使用しているGnuCOBOLビルドがインデックスファイルI / OにBerkeleyDatabase（BDB）パッケージを使用するように構成されている場合、 &lt;code&gt;DB_HOME&lt;/code&gt; ランタイム環境変数を使用してレコードロックを使用でき ます。</target>
        </trans-unit>
        <trans-unit id="d9251feae92fd6a356cf9eb5cd17eee1487827fc" translate="yes" xml:space="preserve">
          <source>If the GnuCOBOL compiler you are using was built to utilize a native Windows environment, use a semicolon (&amp;lsquo;</source>
          <target state="translated">使用しているGnuCOBOLコンパイラがネイティブWindows環境を利用するように構築されている場合は、セミコロン（ '</target>
        </trans-unit>
        <trans-unit id="aa11e579492cde59f0f2b4460dae0515f472c0c0" translate="yes" xml:space="preserve">
          <source>If the GnuCOBOL compiler you are using was built to utilize a native Windows environment, use a semicolon (;) as the delimiter character.</source>
          <target state="translated">使用しているGnuCOBOLコンパイラがWindowsネイティブ環境を利用するように構築されている場合は、セミコロン(;)を区切り文字として使用してください。</target>
        </trans-unit>
        <trans-unit id="e8e174d71b0a53ce0abb721ccafcd0e36830ee7a" translate="yes" xml:space="preserve">
          <source>If the LINAGE clause is</source>
          <target state="translated">LINAGE句が</target>
        </trans-unit>
        <trans-unit id="876792b175fdff61a6c190841827c8f95e62bf94" translate="yes" xml:space="preserve">
          <source>If the SIZE phrase is not used, then the field length defaults to the size of the item being accepted or displayed. If the CONVERT phrase is used, however, then the size of the field depends on the data type of the item and the verb being used.</source>
          <target state="translated">SIZE フレーズが使用されていない場合、フィールドの長さは、受諾または表示されている項目のサイズが既定値となります。CONVERT フレーズが使用されている場合、フィールドのサイズは、項目のデータ型と使用されている動詞に依存します。</target>
        </trans-unit>
        <trans-unit id="629f7e68a3bad837fc28d40bdbf837b0b7cb4fda" translate="yes" xml:space="preserve">
          <source>If the arguments are of different classes, and one is national, the other argument is converted to class national for purposes of comparison.</source>
          <target state="translated">引数が異なるクラスのもので、一方が国内のものである場合、もう一方の引数は比較のために国内のクラスに変換されます。</target>
        </trans-unit>
        <trans-unit id="56af7538068ae678c4d858d4ef9cbf8a92b01ddc" translate="yes" xml:space="preserve">
          <source>If the attempt to copy the file fails (for example, it or the destination directory doesn&amp;rsquo;t exist), the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 128; on successful completion it will be set to 0.</source>
          <target state="translated">ファイルをコピーしようとする試みは、（例えば、それまたは宛先ディレクトリが存在しない）、失敗した場合は、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタが（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）128に設定されます。正常に完了すると、0に設定されます。</target>
        </trans-unit>
        <trans-unit id="a1a846b486d6a849fb5aee6dc27f07a8ed92c919" translate="yes" xml:space="preserve">
          <source>If the attempt to copy the file fails (for example, it or the destination directory doesn&amp;rsquo;t exist), the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 128; on successful completion it will be set to 0.</source>
          <target state="translated">ファイルをコピーしようとする試みは、（例えば、それまたは宛先ディレクトリが存在しない）、失敗した場合は、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタが（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）128に設定されます。正常に完了すると、0に設定されます。</target>
        </trans-unit>
        <trans-unit id="96df2a17b61b3c904901bfed0767bc034fc48ebb" translate="yes" xml:space="preserve">
          <source>If the attempt to delete the file fails (for example, it doesn&amp;rsquo;t exist), the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 128; on successful completion it will be set to 0.</source>
          <target state="translated">ファイルを削除しようとする試みは、（例えば、それは存在しない）、失敗した場合は、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタが（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）128に設定されます。正常に完了すると、0に設定されます。</target>
        </trans-unit>
        <trans-unit id="da68db930b7285a3ca3007bae8464343ac79a0ea" translate="yes" xml:space="preserve">
          <source>If the attempt to delete the file fails (for example, it doesn&amp;rsquo;t exist), the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 128; on successful completion it will be set to 0.</source>
          <target state="translated">ファイルを削除しようとする試みは、（例えば、それは存在しない）、失敗した場合は、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタが（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）128に設定されます。正常に完了すると、0に設定されます。</target>
        </trans-unit>
        <trans-unit id="46a66bc0217d79087be7ab86156a7254a4cba8b6" translate="yes" xml:space="preserve">
          <source>If the attempt to move the file fails (for example, it doesn&amp;rsquo;t exist), the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 128; on successful completion it will be set to 0.</source>
          <target state="translated">ファイルを移動しようとする試みは、（例えば、それは存在しない）、失敗した場合は、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタが（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）128に設定されます。正常に完了すると、0に設定されます。</target>
        </trans-unit>
        <trans-unit id="6d499ade6d8bd513045d21fd97b496bc7d59e814" translate="yes" xml:space="preserve">
          <source>If the attempt to move the file fails (for example, it doesn&amp;rsquo;t exist), the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) will be set to 128; on successful completion it will be set to 0.</source>
          <target state="translated">ファイルを移動しようとする試みは、（例えば、それは存在しない）、失敗した場合は、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタが（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）128に設定されます。正常に完了すると、0に設定されます。</target>
        </trans-unit>
        <trans-unit id="9cc49a6a7bfb3aab04847a284111d2050a7803d8" translate="yes" xml:space="preserve">
          <source>If the binary item occupies four bytes of storage, the binary item is allocated at the next word boundary.</source>
          <target state="translated">バイナリ項目がストレージの4バイトを占有する場合、バイナリ項目は次のワード境界で割り当てられます。</target>
        </trans-unit>
        <trans-unit id="c9eb3b2ff78316af9e06d9ecdca03186e9054272" translate="yes" xml:space="preserve">
          <source>If the binary item occupies one byte of storage, no synchronization is performed.</source>
          <target state="translated">バイナリ項目がストレージの1バイトを占有している場合、同期化は行われません。</target>
        </trans-unit>
        <trans-unit id="29ee50f202c57db2b363fa927e6f5d81d5d2accb" translate="yes" xml:space="preserve">
          <source>If the binary item occupies two bytes of storage, the binary item is allocated at the next half-word boundary.</source>
          <target state="translated">バイナリ項目がストレージの2バイトを占有している場合、バイナリ項目は次のハーフワード境界に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="1516aad53f3f5948528f5a4d82dbb11e687a6c3e" translate="yes" xml:space="preserve">
          <source>If the calling program included a &lt;code&gt;RETURNING&lt;/code&gt; clause on the &lt;code&gt;CALL&lt;/code&gt; statement that invoked the subprogram, the value of the &lt;code&gt;RETURNING&lt;/code&gt; data item in the subroutine is moved to that data item. If there was no &lt;code&gt;RETURNING&lt;/code&gt; specified in the subroutine, the value of the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register is moved to that data item.</source>
          <target state="translated">呼び出し側プログラムが、サブプログラムを呼び出した &lt;code&gt;CALL&lt;/code&gt; ステートメントに &lt;code&gt;RETURNING&lt;/code&gt; 節を含めた場合、サブルーチン内の &lt;code&gt;RETURNING&lt;/code&gt; データ項目の値はそのデータ項目に移動されます。サブルーチンで &lt;code&gt;RETURNING&lt;/code&gt; が指定されていない場合、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターの値は そのデータ項目に移動されます。</target>
        </trans-unit>
        <trans-unit id="78d1c026459ef474eb28e2011cf978cfda3d3820" translate="yes" xml:space="preserve">
          <source>If the calling program included a&lt;code&gt;RETURNING&lt;/code&gt;clause on the&lt;code&gt;CALL&lt;/code&gt;statement that invoked the subprogram, the value of the&lt;code&gt;RETURNING&lt;/code&gt;data item in the subroutine is moved to that data item. If there was no&lt;code&gt;RETURNING&lt;/code&gt;specified in the subroutine, the value of the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register is moved to that data item.</source>
          <target state="translated">呼び出し側プログラムがサブプログラムを呼び出した &lt;code&gt;CALL&lt;/code&gt; ステートメントに &lt;code&gt;RETURNING&lt;/code&gt; 句を含めた場合、サブルーチン内の &lt;code&gt;RETURNING&lt;/code&gt; データ項目の値はそのデータ項目に移動されます。サブルーチンで &lt;code&gt;RETURNING&lt;/code&gt; が指定されていなかった場合、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターの値がそのデータ項目に移動されます。</target>
        </trans-unit>
        <trans-unit id="e083d7f833ec502784a9231152a3dee4dd0d633a" translate="yes" xml:space="preserve">
          <source>If the compiler</source>
          <target state="translated">コンパイラが</target>
        </trans-unit>
        <trans-unit id="237f820b1887571d0c11ce781473f803467fad98" translate="yes" xml:space="preserve">
          <source>If the compiler &quot;config&quot; file (see &lt;a href=&quot;#Compiler-Configuration-Files&quot;&gt;Compiler Configuration Files&lt;/a&gt;) you used to compile the program specified &quot;mf&quot; as the &quot;assign-clause&quot; value, then the File Locator String will be interpreted according to Microfocus COBOL rules &amp;mdash; namely, everything before the last &quot;-&quot; in the File Locator String will be ignored; the characters after the last &quot;-&quot; will be treated as the base of an environment variable name. If there is no &quot;-&quot; character in the File Locator String then the entire File Locator String will serve as the base of an environment variable name. This is the default behaviour for every config file except &quot;ibm&quot;.</source>
          <target state="translated">プログラムのコンパイルに使用したコンパイラー「config」ファイル（&lt;a href=&quot;#Compiler-Configuration-Files&quot;&gt;コンパイラー構成ファイルを&lt;/a&gt;参照）が「mf」を「assign-clause」値として指定した場合、ファイルロケーター文字列はMicrofocus COBOL規則に従って解釈されます。ファイルロケータ文字列の最後の「-」は無視されます。最後の「-」の後の文字は、環境変数名のベースとして扱われます。ファイルロケータ文字列に「-」文字がない場合、ファイルロケータ文字列全体が環境変数名のベースとして機能します。これは、「ibm」を除くすべての構成ファイルのデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="be7c428b2bd6fcf64ba18d7fc20a33ae78ee6418" translate="yes" xml:space="preserve">
          <source>If the compiler &quot;config&quot; file you are using has &quot;relaxed-syntax-check&quot; set to &quot;yes&quot;, the&lt;code&gt;FILE-CONTROL&lt;/code&gt;and&lt;code&gt;I-O-CONTROL&lt;/code&gt;paragraphs may be specified without the&lt;code&gt;INPUT-OUTPUT SECTION.&lt;/code&gt;header having been coded.</source>
          <target state="translated">使用しているコンパイラの「config」ファイルで「relaxed-syntax-check」が「yes」に設定されている場合、 &lt;code&gt;FILE-CONTROL&lt;/code&gt; および &lt;code&gt;I-O-CONTROL&lt;/code&gt; 段落は、 &lt;code&gt;INPUT-OUTPUT SECTION.&lt;/code&gt; なしで指定できます。ヘッダーがコーディングされています。</target>
        </trans-unit>
        <trans-unit id="fe92b0755173ad538d05379125cea0810a360175" translate="yes" xml:space="preserve">
          <source>If the compiler &quot;config&quot; file you used to compile the program with had a &quot;filename-mapping&quot; value of &quot;yes&quot;, the GnuCOBOL runtime system will first attempt to identify a currently-defined environment variable whose value will serve as the data file&amp;rsquo;s path and filename, as follows:</source>
          <target state="translated">プログラムのコンパイルに使用したコンパイラの「config」ファイルの「filename-mapping」値が「yes」である場合、GnuCOBOLランタイムシステムは、最初に、現在定義されている環境変数を識別しようとします。次のようなパスとファイル名：</target>
        </trans-unit>
        <trans-unit id="ada8d4fd5949881c69e3976ea553cf9ce6a69ad2" translate="yes" xml:space="preserve">
          <source>If the compiler is already in the specified mode, this statement will have no effect.</source>
          <target state="translated">コンパイラがすでに指定されたモードに入っている場合、このステートメントは何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="e079882ba26c2f94b1fe1a9df7387534f553e034" translate="yes" xml:space="preserve">
          <source>If the condition associated with a variable is false, the variable is not defined during compilations.</source>
          <target state="translated">変数に関連付けられた条件が false の場合、コンパイル時に変数は定義されません。</target>
        </trans-unit>
        <trans-unit id="481059d865593d9863661241b07d6b44c95410c1" translate="yes" xml:space="preserve">
          <source>If the condition-name has a value of &lt;code&gt;TRUE&lt;/code&gt;, the group will be presented.</source>
          <target state="translated">条件名の値が &lt;code&gt;TRUE&lt;/code&gt; の場合、グループが表示されます。</target>
        </trans-unit>
        <trans-unit id="3a326fe6a76a0eaf9c6262d498515fe5ffc5ef03" translate="yes" xml:space="preserve">
          <source>If the condition-name has a value of TRUE, the group will be presented.</source>
          <target state="translated">condition-nameの値がTRUEの場合、グループが表示されます。</target>
        </trans-unit>
        <trans-unit id="4acbc5f8b855a0f2c7b341b78e53f686bdfdc939" translate="yes" xml:space="preserve">
          <source>If the counter has a value greater than zero, the statement(s) within the &lt;code&gt;PERFORM&lt;/code&gt; scope will be executed, after which the counter will be decremented by 1 with each repetition. Once that counter reaches zero, repetition will cease and control will fall into the next statement following the &lt;code&gt;PERFORM&lt;/code&gt;.</source>
          <target state="translated">カウンターの値がゼロより大きい場合、 &lt;code&gt;PERFORM&lt;/code&gt; スコープ内のステートメントが実行され、その後、カウンターは繰り返しごとに1ずつデクリメントされます。そのカウンターがゼロに達すると、繰り返しは停止し、制御は &lt;code&gt;PERFORM&lt;/code&gt; に続く次のステートメントに分類されます。</target>
        </trans-unit>
        <trans-unit id="8c023cec5138da702e62deee764a0698dddd5f75" translate="yes" xml:space="preserve">
          <source>If the counter has a value greater than zero, the statement(s) within the&lt;code&gt;PERFORM&lt;/code&gt;scope will be executed, after which the counter will be decremented by 1 with each repetition. Once that counter reaches zero, repetition will cease and control will fall into the next statement following the&lt;code&gt;PERFORM&lt;/code&gt;</source>
          <target state="translated">カウンターの値がゼロより大きい場合、 &lt;code&gt;PERFORM&lt;/code&gt; スコープ内のステートメントが実行され、その後、カウンターは繰り返しごとに1ずつ減分されます。そのカウンターがゼロに達すると、繰り返しは停止し、制御は &lt;code&gt;PERFORM&lt;/code&gt; に続く次のステートメントに分類されます</target>
        </trans-unit>
        <trans-unit id="8c6046d88dbdb2938b2d2acebdcd24126952a996" translate="yes" xml:space="preserve">
          <source>If the cultural ordering table is not available on the processor, or the specified ordering level is not available, or the level number specified by &lt;var&gt;argument-4&lt;/var&gt; is not defined in the ordering table, the &lt;code&gt;EC-ORDER-NOT-SUPPORTED&lt;/code&gt; exception condition is set.</source>
          <target state="translated">文化的順序付けテーブルがプロセッサーで使用できない場合、指定された順序付けレベルが使用できない場合、または &lt;var&gt;argument-4&lt;/var&gt; 指定されたレベル番号が順序付けテーブルで定義されていない場合、 &lt;code&gt;EC-ORDER-NOT-SUPPORTED&lt;/code&gt; 例外条件が設定されます。 。</target>
        </trans-unit>
        <trans-unit id="4e9e418e6dfdb063a1e13b0c99a0aba0ba8470f4" translate="yes" xml:space="preserve">
          <source>If the data item in which the &lt;code&gt;SUM&lt;/code&gt; clause appears has been assigned its own identifier name, and that name is not &lt;code&gt;FILLER&lt;/code&gt;, then that data item is referred to as a sum counter.</source>
          <target state="translated">&lt;code&gt;SUM&lt;/code&gt; 句が表示されるデータ項目に独自の識別子名が割り当てられていて、その名前が &lt;code&gt;FILLER&lt;/code&gt; でない場合、そのデータ項目は合計カウンターと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="139a2f116480a978d8a516ae3f69011cef95b11e" translate="yes" xml:space="preserve">
          <source>If the data item in which the&lt;code&gt;SUM&lt;/code&gt;clause appears has been assigned it&amp;rsquo;s own identifier name, and that name is not&lt;code&gt;FILLER&lt;/code&gt; then that data item is referred to as a sum counter.</source>
          <target state="translated">&lt;code&gt;SUM&lt;/code&gt; 句が含まれるデータ項目に独自の識別子名が割り当てられており、その名前が &lt;code&gt;FILLER&lt;/code&gt; ではない場合、そのデータ項目は合計カウンタと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="d6641aac6877a23c3a650b80aa0141134bfbab68" translate="yes" xml:space="preserve">
          <source>If the date is valid, a 0 value is returned. If it isn&amp;rsquo;t, a value of 1 or 2 is returned signalling the problem lies with the year or day, respectively.</source>
          <target state="translated">日付が有効な場合、値0が返されます。そうでない場合は、1または2の値が返され、問題がそれぞれ年または日にあることを示します。</target>
        </trans-unit>
        <trans-unit id="7b011773af10dd8c1b119874aa6b6d6a7bdffaf9" translate="yes" xml:space="preserve">
          <source>If the file defined by the &amp;lt;</source>
          <target state="translated">&amp;lt;で定義されたファイル</target>
        </trans-unit>
        <trans-unit id="280352139004548c36bc2735b683a84068a2d2ad" translate="yes" xml:space="preserve">
          <source>If the file defined by the &lt;var&gt;file-handle&lt;/var&gt; argument (a &lt;code&gt;PIC X(4) USAGE COMP-X&lt;/code&gt; data item) was opened for output, an implicit &lt;code&gt;CBL_FLUSH_FILE&lt;/code&gt; built-in system subroutine (see &lt;a href=&quot;#CBL_005fFLUSH_005fFILE&quot;&gt;CBL_FLUSH_FILE&lt;/a&gt;) will be performed before the file is closed.</source>
          <target state="translated">&lt;var&gt;file-handle&lt;/var&gt; 引数（ &lt;code&gt;PIC X(4) USAGE COMP-X&lt;/code&gt; データ項目）で定義されたファイルが出力用に開かれた場合、ファイルが閉じられる前に、暗黙的な &lt;code&gt;CBL_FLUSH_FILE&lt;/code&gt; 組み込みシステムサブルーチン（&lt;a href=&quot;#CBL_005fFLUSH_005fFILE&quot;&gt;CBL_FLUSH_FILEを&lt;/a&gt;参照）が実行されます。</target>
        </trans-unit>
        <trans-unit id="b49b836ff4d8cb3dab39eaf631a058c6fcd3656e" translate="yes" xml:space="preserve">
          <source>If the file has &lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt;, the record to be rewritten will be the one retrieved by the most-recently executed &lt;code&gt;READ&lt;/code&gt; of the file. If the file has &lt;code&gt;ACCESS MODE RANDOM&lt;/code&gt; or &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt;, no &lt;code&gt;READ&lt;/code&gt; is required before a record may be rewritten &amp;mdash; the &lt;code&gt;RELATIVE KEY&lt;/code&gt; or &lt;code&gt;RECORD KEY&lt;/code&gt; definition for the file, respectively, will specify the record to be updated.</source>
          <target state="translated">ファイルに &lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt; がある場合、書き換えられるレコードは、ファイルの最後に実行された &lt;code&gt;READ&lt;/code&gt; によって取得されたレコードになります。ファイルに &lt;code&gt;ACCESS MODE RANDOM&lt;/code&gt; または &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt; がある場合、レコードを書き換える前に &lt;code&gt;READ&lt;/code&gt; は必要ありません。ファイルの &lt;code&gt;RELATIVE KEY&lt;/code&gt; または &lt;code&gt;RECORD KEY&lt;/code&gt; 定義は、それぞれ更新するレコードを指定します。</target>
        </trans-unit>
        <trans-unit id="b92cdda09e23c6babe9323f2fab796558b95e032" translate="yes" xml:space="preserve">
          <source>If the file has &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;) or &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;):</source>
          <target state="translated">ファイルがある場合は &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;または） &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; を（参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXEDを&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="9bb8fcfe2e45e1f8ae2ed6c423aee276e8feaa74" translate="yes" xml:space="preserve">
          <source>If the file has &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIAL&lt;/a&gt;):</source>
          <target state="translated">ファイルに &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; がある場合（&lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIALを&lt;/a&gt;参照）：</target>
        </trans-unit>
        <trans-unit id="8308b61ce7bcbfc94d926cc1722564983504a579" translate="yes" xml:space="preserve">
          <source>If the file has&lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt; the record to be rewritten will be the one retrieved by the most-recently executed&lt;code&gt;READ&lt;/code&gt;of the file. If the file has&lt;code&gt;ACCESS MODE RANDOM&lt;/code&gt;or&lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt; no&lt;code&gt;READ&lt;/code&gt;is required before a record may be rewritten &amp;mdash; the&lt;code&gt;RELATIVE KEY&lt;/code&gt;or&lt;code&gt;RECORD KEY&lt;/code&gt;definition for the file, respectively, will specify the record to be updated.</source>
          <target state="translated">ファイルに &lt;code&gt;ACCESS MODE SEQUENTIAL&lt;/code&gt; がある場合、書き換えられるレコードは、最後に実行されたファイルの &lt;code&gt;READ&lt;/code&gt; によって取得されたレコードになります。ファイルに &lt;code&gt;ACCESS MODE RANDOM&lt;/code&gt; または &lt;code&gt;ACCESS MODE DYNAMIC&lt;/code&gt; がある場合、レコードを書き換える前に &lt;code&gt;READ&lt;/code&gt; は必要ありません。ファイルの &lt;code&gt;RELATIVE KEY&lt;/code&gt; または &lt;code&gt;RECORD KEY&lt;/code&gt; 定義は、それぞれ、更新するレコードを指定します。</target>
        </trans-unit>
        <trans-unit id="979f0a1fc8e50fd115ef1c5a2607d25c8a146e66" translate="yes" xml:space="preserve">
          <source>If the file has&lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt;(see &lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;) or&lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt;(see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;):</source>
          <target state="translated">ファイルがある場合は &lt;code&gt;ORGANIZATION RELATIVE&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-RELATIVE&quot;&gt;ORGANIZATION RELATIVE&lt;/a&gt;または） &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; を（参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXEDを&lt;/a&gt;）：</target>
        </trans-unit>
        <trans-unit id="a1d7d6e295ed262b048e40c65c57cc69c1a22916" translate="yes" xml:space="preserve">
          <source>If the file has&lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt;(see &lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIAL&lt;/a&gt;):</source>
          <target state="translated">ファイルに &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; がある場合（&lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIALを&lt;/a&gt;参照）：</target>
        </trans-unit>
        <trans-unit id="ebc6dd0f2cfa35fc8904be11678446623b9ff834" translate="yes" xml:space="preserve">
          <source>If the file&amp;rsquo;s &lt;code&gt;SELECT&lt;/code&gt; contains a &lt;code&gt;LOCK MODE IS AUTOMATIC&lt;/code&gt; clause, every time a record is read from the file, that record is automatically locked. Other programs may access</source>
          <target state="translated">ファイルの &lt;code&gt;SELECT&lt;/code&gt; に &lt;code&gt;LOCK MODE IS AUTOMATIC&lt;/code&gt; 句が含まれている場合、ファイルからレコードが読み取られるたびに、そのレコードは自動的にロックされます。他のプログラムがアクセスする可能性があります</target>
        </trans-unit>
        <trans-unit id="5581252930e28cda52f7dd409750375325db5ed0" translate="yes" xml:space="preserve">
          <source>If the file&amp;rsquo;s &lt;code&gt;SELECT&lt;/code&gt; contains a &lt;code&gt;LOCK MODE IS MANUAL&lt;/code&gt; clause, locks are placed on records</source>
          <target state="translated">ファイルの &lt;code&gt;SELECT&lt;/code&gt; に &lt;code&gt;LOCK MODE IS MANUAL&lt;/code&gt; 句が含まれている場合、ロックはレコードに配置されます</target>
        </trans-unit>
        <trans-unit id="e57bb4b94ad8d138b6e068547fa0dd3393b0fc4d" translate="yes" xml:space="preserve">
          <source>If the file&amp;rsquo;s&lt;code&gt;SELECT&lt;/code&gt;contains a&lt;code&gt;LOCK MODE IS AUTOMATIC&lt;/code&gt;</source>
          <target state="translated">ファイルの &lt;code&gt;SELECT&lt;/code&gt; に &lt;code&gt;LOCK MODE IS AUTOMATIC&lt;/code&gt; が含まれている場合</target>
        </trans-unit>
        <trans-unit id="b0edb822a1ecdc41221997c63041ba9a3c222689" translate="yes" xml:space="preserve">
          <source>If the file&amp;rsquo;s&lt;code&gt;SELECT&lt;/code&gt;contains a&lt;code&gt;LOCK MODE IS MANUAL&lt;/code&gt;</source>
          <target state="translated">ファイルの &lt;code&gt;SELECT&lt;/code&gt; に &lt;code&gt;LOCK MODE IS MANUAL&lt;/code&gt; が含まれている場合</target>
        </trans-unit>
        <trans-unit id="10abb20b2ca302db903ccde6ac80ddbd1e14af4b" translate="yes" xml:space="preserve">
          <source>If the format in &lt;var&gt;argument-1&lt;/var&gt; indicates that the returned value is to be expressed in UTC, the time portion of the returned value reflects the adjustment of the value in &lt;var&gt;argument-2&lt;/var&gt; by the offset in &lt;var&gt;argument-3&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; 形式が、戻り値がUTCで表されることを示している場合、戻り値の時間部分は、 &lt;var&gt;argument-3&lt;/var&gt; オフセットによる &lt;var&gt;argument-2&lt;/var&gt; 値の調整を反映します。</target>
        </trans-unit>
        <trans-unit id="5fd625e9cd0e795e1abbea2d50fee9d16f247fea" translate="yes" xml:space="preserve">
          <source>If the format in &lt;var&gt;argument-1&lt;/var&gt; indicates that the returned value is to be expressed in UTC, the time portion of the returned value reflects the adjustment of the value in &lt;var&gt;argument-3&lt;/var&gt; by the offset in &lt;var&gt;argument-4&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; 形式が、戻り値がUTCで表されることを示している場合、戻り値の時間部分は、 &lt;var&gt;argument-4&lt;/var&gt; オフセットによる &lt;var&gt;argument-3&lt;/var&gt; 値の調整を反映します。</target>
        </trans-unit>
        <trans-unit id="166178cacdbe5fd462fb190489612b357d06f5ce" translate="yes" xml:space="preserve">
          <source>If the format in &lt;var&gt;argument-1&lt;/var&gt; indicates that the time is to be returned as an offset from UTC, the value in &lt;var&gt;argument-2&lt;/var&gt; is reflected directly in the time portion of the returned value and the offset in &lt;var&gt;argument-3&lt;/var&gt; is reflected directly in the offset portion of the returned value.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; 形式が、時刻がUTCからのオフセットとして返されることを示している場合、 &lt;var&gt;argument-2&lt;/var&gt; 値は戻り値の時間部分に直接反映され、 &lt;var&gt;argument-3&lt;/var&gt; オフセットは直接反映されます。戻り値のオフセット部分。</target>
        </trans-unit>
        <trans-unit id="26e28a33e8881735eccfadfa004e07caea00d59d" translate="yes" xml:space="preserve">
          <source>If the format in &lt;var&gt;argument-1&lt;/var&gt; indicates that the time is to be returned as an offset from UTC, the value in &lt;var&gt;argument-3&lt;/var&gt; is reflected directly in the time portion of the returned value and the offset in &lt;var&gt;argument-4&lt;/var&gt; is reflected directly in the offset portion of the returned value.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; 形式が、時刻がUTCからのオフセットとして返されることを示している場合、 &lt;var&gt;argument-3&lt;/var&gt; 値は戻り値の時間部分に直接反映され、 &lt;var&gt;argument-4&lt;/var&gt; オフセットは直接に反映されます。戻り値のオフセット部分。</target>
        </trans-unit>
        <trans-unit id="baea16fa39768fdef0af9d58e56f8513fcbd8390" translate="yes" xml:space="preserve">
          <source>If the function issues a &lt;code&gt;STOP&lt;/code&gt; statement (see &lt;a href=&quot;#STOP&quot;&gt;STOP&lt;/a&gt;) with the &lt;code&gt;RUN&lt;/code&gt; option, program execution ceases and control returns to the operating system or whatever execution shell invoked the main program.</source>
          <target state="translated">機能の問題場合は &lt;code&gt;STOP&lt;/code&gt; の声明（参照&lt;a href=&quot;#STOP&quot;&gt;STOPを&lt;/a&gt;持つ） &lt;code&gt;RUN&lt;/code&gt; のオペレーティングシステムまたは任意の実行シェルにオプション、プログラムの実行が停止すると、制御が戻るには、メインプログラムを呼び出しました。</target>
        </trans-unit>
        <trans-unit id="9ac3ef7c53e5a1a9ebd82e6132c731fb366bb269" translate="yes" xml:space="preserve">
          <source>If the function issues a&lt;code&gt;STOP&lt;/code&gt;statement (see &lt;a href=&quot;#STOP&quot;&gt;STOP&lt;/a&gt;) with the&lt;code&gt;RUN&lt;/code&gt;option, program execution ceases and control returns to the operating system or whatever execution shell invoked the main program.</source>
          <target state="translated">機能の問題場合は &lt;code&gt;STOP&lt;/code&gt; の声明（参照&lt;a href=&quot;#STOP&quot;&gt;STOPを&lt;/a&gt;持つ） &lt;code&gt;RUN&lt;/code&gt; のオペレーティングシステムまたは任意の実行シェルにオプション、プログラムの実行が停止すると、制御が戻るには、メインプログラムを呼び出しました。</target>
        </trans-unit>
        <trans-unit id="35a6f4e231eb8c92eedcef095e1eb5b985195124" translate="yes" xml:space="preserve">
          <source>If the function wishes to return control back to the calling program, it will do so using either the &lt;code&gt;GOBACK&lt;/code&gt; statement (see &lt;a href=&quot;#GOBACK&quot;&gt;GOBACK&lt;/a&gt;) or the &lt;code&gt;EXIT FUNCTION&lt;/code&gt; statement (see &lt;a href=&quot;#EXIT&quot;&gt;EXIT&lt;/a&gt;). At this time:</source>
          <target state="translated">関数が呼び出したプログラムに制御が戻っを戻したい場合は、いずれかを使用して、そうします &lt;code&gt;GOBACK&lt;/code&gt; の声明（参照&lt;a href=&quot;#GOBACK&quot;&gt;GOBACKを&lt;/a&gt;）または &lt;code&gt;EXIT FUNCTION&lt;/code&gt; 文を（参照&lt;a href=&quot;#EXIT&quot;&gt;EXITを&lt;/a&gt;）。現時点では：</target>
        </trans-unit>
        <trans-unit id="768fc6ac0826962232769e54ee3d27933dbe814a" translate="yes" xml:space="preserve">
          <source>If the function wishes to return control back to the calling program, it will do so using either the&lt;code&gt;GOBACK&lt;/code&gt;statement (see &lt;a href=&quot;#GOBACK&quot;&gt;GOBACK&lt;/a&gt;) or the&lt;code&gt;EXIT FUNCTION&lt;/code&gt;statement (see &lt;a href=&quot;#EXIT&quot;&gt;EXIT&lt;/a&gt;). At this time:</source>
          <target state="translated">関数が呼び出したプログラムに制御が戻っを戻したい場合は、いずれかを使用して、そうします &lt;code&gt;GOBACK&lt;/code&gt; の声明（参照&lt;a href=&quot;#GOBACK&quot;&gt;GOBACKを&lt;/a&gt;）または &lt;code&gt;EXIT FUNCTION&lt;/code&gt; 文を（参照&lt;a href=&quot;#EXIT&quot;&gt;EXITを&lt;/a&gt;）。現時点では：</target>
        </trans-unit>
        <trans-unit id="30455ee292f12916879ea7b27b16596593857296" translate="yes" xml:space="preserve">
          <source>If the item is alphanumeric edited, then the size is set to the number of &quot;A&quot; or &quot;X&quot; positions specified in its PICTURE clause.</source>
          <target state="translated">項目が英数字で編集されている場合は、その項目のPICTURE句で指定された &quot;A &quot;または &quot;X &quot;の位置の数だけサイズが設定されます。</target>
        </trans-unit>
        <trans-unit id="7a208a6cc6a893ebed7ca1af029a4cbd81f73ef4" translate="yes" xml:space="preserve">
          <source>If the item is alphanumeric edited, then the size is set to the number of &amp;lsquo;</source>
          <target state="translated">アイテムが英数字で編集されている場合、サイズは 'の数に設定されます</target>
        </trans-unit>
        <trans-unit id="5a3ac59ecad83c4e62bbb64e4efcc1980153a8fd" translate="yes" xml:space="preserve">
          <source>If the item is numeric or numeric edited, then the size is the number of digits in the item, plus one if it is not an integer, plus one if it is signed.</source>
          <target state="translated">項目が数値または数値編集の場合、サイズは項目内の桁数に整数でない場合は1を加え、符号付きの場合は1を加えた値となります。</target>
        </trans-unit>
        <trans-unit id="0bf6190961c1d912062042b050c89a336fba6e4f" translate="yes" xml:space="preserve">
          <source>If the key(s) and value(s) match, &amp;lt;</source>
          <target state="translated">キーと値が一致する場合、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="364099d939dac1d20ae3d5cb7f9ea15deb38944b" translate="yes" xml:space="preserve">
          <source>If the key(s) and value(s) match, &lt;var&gt;imperative-statement-2&lt;/var&gt; (see &lt;a href=&quot;#Imperative-Statement&quot;&gt;Imperative Statement&lt;/a&gt;) is executed, after which control falls through into the next statement following the &lt;code&gt;SEARCH ALL&lt;/code&gt;.</source>
          <target state="translated">キーと値が一致する場合、 &lt;var&gt;imperative-statement-2&lt;/var&gt; （&lt;a href=&quot;#Imperative-Statement&quot;&gt;命令ステートメントを&lt;/a&gt;参照）が実行され、その後、制御は &lt;code&gt;SEARCH ALL&lt;/code&gt; 続く次のステートメントに進みます。</target>
        </trans-unit>
        <trans-unit id="8718b549db26737624f77d41114ec5bbc3bc5cfc" translate="yes" xml:space="preserve">
          <source>If the key(s) are GREATER THAN the value(s), then the table entry being searched for can only occur in the &quot;first&quot; to &quot;current&quot; range of the table, so a new &quot;last&quot; pointer value is set (it will be set to the &quot;current&quot; pointer).</source>
          <target state="translated">キー(複数)が値(複数)より大きい場合、検索されるテーブルエントリは、テーブルの「最初」から「現在」の範囲内でしか発生しないので、新しい「最後」ポインタの値が設定されます(それは「現在」ポインタに設定されます)。</target>
        </trans-unit>
        <trans-unit id="26a06caa2d8e4511f177ae678ee1706922a64e12" translate="yes" xml:space="preserve">
          <source>If the key(s) are GREATER THAN the value(s), then the table entry being searched for can only occur in the &amp;ldquo;first&amp;rdquo; to &amp;ldquo;current&amp;rdquo; range of the table, so a new &amp;ldquo;last&amp;rdquo; pointer value is set (it will be set to the &amp;ldquo;current&amp;rdquo; pointer).</source>
          <target state="translated">キーが値よりも大きい場合、検索されるテーブルエントリは、テーブルの「最初」から「現在」の範囲でのみ発生する可能性があるため、新しい「最後の」ポインタ値が設定されます（ 「現在の」ポインタに設定されます）。</target>
        </trans-unit>
        <trans-unit id="f855f7c7ead100cd07565ea01cc7a9230a155db1" translate="yes" xml:space="preserve">
          <source>If the key(s) are LESS THAN the value(s), then the table entry being searched for can only occur in the &quot;current&quot; to &quot;last&quot; range of the table, so a new &quot;first&quot; pointer value is set (it will be set to the &quot;current&quot; pointer).</source>
          <target state="translated">キー(複数)が値(複数)よりも小さい場合、検索されているテーブル項目は、テーブルの &quot;current &quot;から &quot;last &quot;の範囲内にしか存在しないので、新しい &quot;first &quot;ポインタの値が設定されます(それは &quot;current &quot;ポインタに設定されます)。</target>
        </trans-unit>
        <trans-unit id="998f5bf567570409a15717d5bf167eb530056f3b" translate="yes" xml:space="preserve">
          <source>If the key(s) are LESS THAN the value(s), then the table entry being searched for can only occur in the &amp;ldquo;current&amp;rdquo; to &amp;ldquo;last&amp;rdquo; range of the table, so a new &amp;ldquo;first&amp;rdquo; pointer value is set (it will be set to the &amp;ldquo;current&amp;rdquo; pointer).</source>
          <target state="translated">キーが値よりも小さい場合、検索されるテーブルエントリは、テーブルの「現在」から「最後」の範囲でのみ発生する可能性があるため、新しい「最初の」ポインタ値が設定されます（ 「現在の」ポインタに設定されます）。</target>
        </trans-unit>
        <trans-unit id="67dac445610e60fc54c4fe228d7fb92749633d59" translate="yes" xml:space="preserve">
          <source>If the last exception status is not an &lt;code&gt;EC-I-O&lt;/code&gt; exception condition, the returned value is two national zeros.</source>
          <target state="translated">最後の例外ステータスが &lt;code&gt;EC-I-O&lt;/code&gt; 例外条件でない場合、戻り値は2つの国内ゼロです。</target>
        </trans-unit>
        <trans-unit id="75791070ef3413617c60c665e733867b07b700c6" translate="yes" xml:space="preserve">
          <source>If the length of &amp;lt;</source>
          <target state="translated">&amp;lt;の長さ</target>
        </trans-unit>
        <trans-unit id="bde88dc03a2aeb1136469227b1d64906347783ff" translate="yes" xml:space="preserve">
          <source>If the length of &lt;var&gt;literal-7&lt;/var&gt; or &lt;var&gt;identifier-8&lt;/var&gt; (the &amp;ldquo;from&amp;rdquo; string)</source>
          <target state="translated">&lt;var&gt;literal-7&lt;/var&gt; または &lt;var&gt;identifier-8&lt;/var&gt; （「from」文字列）の長さの場合</target>
        </trans-unit>
        <trans-unit id="f678ec7b4d2b5c8286ebadce4169b6ec51506464" translate="yes" xml:space="preserve">
          <source>If the length of the &quot;from&quot; string</source>
          <target state="translated">from&quot; 文字列の長さが</target>
        </trans-unit>
        <trans-unit id="4967916491cd5aa62c1b2e2727ffb24cfed85aa7" translate="yes" xml:space="preserve">
          <source>If the length of the &amp;ldquo;from&amp;rdquo; string</source>
          <target state="translated">「from」文字列の長さの場合</target>
        </trans-unit>
        <trans-unit id="163af06aed58d0ce62be6ce917a711c8bc398a55" translate="yes" xml:space="preserve">
          <source>If the new &quot;first&quot; and &quot;last&quot; pointers are different than the old &quot;first&quot; and &quot;last&quot; pointers, there&amp;rsquo;s more left to be searched, so return to step (A) and continue.</source>
          <target state="translated">新しい「最初の」および「最後の」ポインターが古い「最初の」および「最後の」ポインターと異なる場合、まだ検索する必要があるため、ステップ（A）に戻って続行します。</target>
        </trans-unit>
        <trans-unit id="20cd460d91c2dd82c32020553b0991e55b5ca84b" translate="yes" xml:space="preserve">
          <source>If the new &quot;first&quot; and &quot;last&quot; pointers are the same as the old &quot;first&quot; and &quot;last&quot; pointers, the table has been exhausted and the entry being searched for cannot be found; &amp;lt;</source>
          <target state="translated">新しい「最初の」および「最後の」ポインタが古い「最初の」および「最後の」ポインタと同じである場合、テーブルが使い果たされており、検索されているエントリが見つかりません。&amp;lt;</target>
        </trans-unit>
        <trans-unit id="3aa34417c0be454f4995442d8a7806453694a874" translate="yes" xml:space="preserve">
          <source>If the new &amp;ldquo;first&amp;rdquo; and &amp;ldquo;last&amp;rdquo; pointers are different than the old &amp;ldquo;first&amp;rdquo; and &amp;ldquo;last&amp;rdquo; pointers, there&amp;rsquo;s more left to be searched, so return to step</source>
          <target state="translated">新しい「最初」と「最後」のポインタが古い「最初」と「最後」のポインタと異なる場合は、まだ検索する必要があるので、手順に戻ります。</target>
        </trans-unit>
        <trans-unit id="e9ca8c9950d6818daad84f3ad32fa98a7278a457" translate="yes" xml:space="preserve">
          <source>If the new &amp;ldquo;first&amp;rdquo; and &amp;ldquo;last&amp;rdquo; pointers are the same as the old &amp;ldquo;first&amp;rdquo; and &amp;ldquo;last&amp;rdquo; pointers, the table has been exhausted and the entry being searched for cannot be found; &lt;var&gt;imperative-statement-1&lt;/var&gt; is executed, after which control falls through into the next statement following the &lt;code&gt;SEARCH ALL&lt;/code&gt;. If there is no &lt;code&gt;AT END&lt;/code&gt; clause coded, control simply falls into the next statement following the &lt;code&gt;SEARCH ALL&lt;/code&gt;.</source>
          <target state="translated">新しい「最初の」および「最後の」ポインタが古い「最初の」および「最後の」ポインタと同じである場合、テーブルは使い果たされており、検索されているエントリが見つかりません。 &lt;var&gt;imperative-statement-1&lt;/var&gt; が実行された後、制御は &lt;code&gt;SEARCH ALL&lt;/code&gt; 続く次のステートメントに進みます。 &lt;code&gt;AT END&lt;/code&gt; 句がコーディングされていない場合、制御は &lt;code&gt;SEARCH ALL&lt;/code&gt; 続く次のステートメントに単純に分類されます。</target>
        </trans-unit>
        <trans-unit id="37e0698c4d0426b5a1539d9872daa55a48e4b3fd" translate="yes" xml:space="preserve">
          <source>If the optional  &lt;code&gt;ALL&lt;/code&gt; clause is used, it may only be used with an alphanumeric literal value; the value will be repeated as needed to completely fill the data item. Here are some examples with and without &lt;code&gt;ALL&lt;/code&gt; (the symbol</source>
          <target state="translated">オプションの &lt;code&gt;ALL&lt;/code&gt; 句を使用する場合は、英数字のリテラル値でのみ使用できます。データ項目を完全に埋めるために、必要に応じて値が繰り返されます。 &lt;code&gt;ALL&lt;/code&gt; （記号）がある場合とない場合の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="eb9269c6626b9c22244a99ff3bcdeb28d197891f" translate="yes" xml:space="preserve">
          <source>If the optional  &lt;code&gt;WITH FILLER&lt;/code&gt; clause is included on the &lt;code&gt;INITIALIZE&lt;/code&gt; statement, then every FILLER elementary item subordinate to each &lt;var&gt;identifier-1&lt;/var&gt; will be included as well, provided that elementary item neither contains a &lt;code&gt;REDEFINES&lt;/code&gt; clause in its definition nor belongs to a group item</source>
          <target state="translated">オプションの &lt;code&gt;WITH FILLER&lt;/code&gt; 句が &lt;code&gt;INITIALIZE&lt;/code&gt; ステートメントに含まれている場合、基本アイテムの定義に &lt;code&gt;REDEFINES&lt;/code&gt; 句が含まれておらず、グループアイテムにも属していない限り、各 &lt;var&gt;identifier-1&lt;/var&gt; 従属するすべてのFILLER基本アイテムも含まれます。</target>
        </trans-unit>
        <trans-unit id="305f0831253ff348ae38af25eb67e6760bc88db7" translate="yes" xml:space="preserve">
          <source>If the optional &lt;code&gt;ELSE&lt;/code&gt; clause is present and conditional-expression evaluates to false, then (and only then) &lt;var&gt;imperative-statement-2&lt;/var&gt; will be executed. Once &lt;var&gt;imperative-statement-2&lt;/var&gt; has been executed, control falls into the first statement following the &lt;code&gt;END-IF&lt;/code&gt; or to the first statement of the next sentence if there is no &lt;code&gt;END-IF&lt;/code&gt; clause.</source>
          <target state="translated">オプションの &lt;code&gt;ELSE&lt;/code&gt; 句が存在し、条件式がfalseと評価された場合、（そしてその場合にのみ） &lt;var&gt;imperative-statement-2&lt;/var&gt; が実行されます。いったん &lt;var&gt;imperative-statement-2&lt;/var&gt; 実行された、コントロールには、次の最初の文に該当する &lt;code&gt;END-IF&lt;/code&gt; を一切存在しない場合、または次の文の最初の文に &lt;code&gt;END-IF&lt;/code&gt; 句。</target>
        </trans-unit>
        <trans-unit id="99b9a44588304e8fd897153b6442bc44498ed178" translate="yes" xml:space="preserve">
          <source>If the optional&lt;code&gt;ALL&lt;/code&gt;</source>
          <target state="translated">オプションの &lt;code&gt;ALL&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b7bdbfa412dd855282c99935345311e80faa35ff" translate="yes" xml:space="preserve">
          <source>If the optional&lt;code&gt;ELSE&lt;/code&gt;clause is present and conditional-expression evaluates to false, then (and only then) &amp;lt;</source>
          <target state="translated">オプションの &lt;code&gt;ELSE&lt;/code&gt; 句が存在し、conditional-expressionがfalseと評価された場合（そしてそのときのみ）&amp;lt;</target>
        </trans-unit>
        <trans-unit id="214f8446472e76c131789cea52e9df99ff6d7324" translate="yes" xml:space="preserve">
          <source>If the optional&lt;code&gt;WITH FILLER&lt;/code&gt;</source>
          <target state="translated">オプションの &lt;code&gt;WITH FILLER&lt;/code&gt; の場合</target>
        </trans-unit>
        <trans-unit id="f4352556df8eac0b7e634194c0f18b8190333b57" translate="yes" xml:space="preserve">
          <source>If the program is compiled with the</source>
          <target state="translated">でコンパイルされている場合、プログラムは</target>
        </trans-unit>
        <trans-unit id="0e0c98a1a847d99310eeb35f540d53fc5e523af7" translate="yes" xml:space="preserve">
          <source>If the program is compiled with the&lt;code&gt;-fsyntax-extension&lt;/code&gt;switch</source>
          <target state="translated">プログラムが &lt;code&gt;-fsyntax-extension&lt;/code&gt; スイッチを使用してコンパイルされている場合</target>
        </trans-unit>
        <trans-unit id="28811669593d85ac3f545d78f92b27c993663314" translate="yes" xml:space="preserve">
          <source>If the replacement string is a multiple-item phrase or is to be deleted altogether, you must use the &lt;code&gt;==&lt;var&gt;pseudo-text-2&lt;/var&gt;==&lt;/code&gt; option. If &lt;code&gt;&lt;var&gt;pseudo-text-2&lt;/var&gt;&lt;/code&gt; is null (in other words, the replacement text is specified as &lt;code&gt;====&lt;/code&gt;), all encountered occurrences of the search string will be deleted.</source>
          <target state="translated">置換文字列が複数項目のフレーズであるか、完全に削除される場合は、 &lt;code&gt;==&lt;var&gt;pseudo-text-2&lt;/var&gt;==&lt;/code&gt; オプションを使用する必要があります。場合は &lt;code&gt;&lt;var&gt;pseudo-text-2&lt;/var&gt;&lt;/code&gt; （つまり、置換テキストは次のように指定されているnullである &lt;code&gt;====&lt;/code&gt; ）、検索文字列のすべての遭遇の発生が削除されます。</target>
        </trans-unit>
        <trans-unit id="3f250bad0b5b4ae9aea9503229c333bf1801f01f" translate="yes" xml:space="preserve">
          <source>If the replacement string is a multiple-item phrase or is to be deleted altogether, you must use the&lt;code&gt;==&amp;lt;&lt;i&gt;pseudo-text-2&lt;/i&gt;&amp;gt;==&lt;/code&gt;option. If&lt;code&gt;&amp;lt;&lt;i&gt;pseudo-text-2&lt;/i&gt;&amp;gt;&lt;/code&gt;is null (in other words, the replacement text is specified as&lt;code&gt;====&lt;/code&gt;, all encountered occurrences of the search string will be deleted.</source>
          <target state="translated">置換文字列が複数項目のフレーズであるか、完全に削除される場合は、 &lt;code&gt;==&amp;lt;&lt;i&gt;pseudo-text-2&lt;/i&gt;&amp;gt;==&lt;/code&gt; オプションを使用する必要があります。場合は &lt;code&gt;&amp;lt;&lt;i&gt;pseudo-text-2&lt;/i&gt;&amp;gt;&lt;/code&gt; つまり、置換テキストは次のように指定されている（nullである &lt;code&gt;====&lt;/code&gt; 、検索文字列のすべての遭遇の発生が削除されます。</target>
        </trans-unit>
        <trans-unit id="f5f6ed5272b3e9c841cbdbf96eb7afe75d6967c2" translate="yes" xml:space="preserve">
          <source>If the routine is successful, a value of 0 will be returned to the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). If the routine failed because of a problem with an argument (such as a negative or 0 length), a value of 128 will result. Finally, if the 1&lt;sup&gt;st&lt;/sup&gt; argument value is anything but zero, the routine will fail with a 129 value.</source>
          <target state="translated">ルーチンが成功すると、値0が &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに返され ます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。引数の問題（負の長さや長さ0など）が原因でルーチンが失敗した場合、値は128になります。最後に、&lt;sup&gt;最初の&lt;/sup&gt;引数値がゼロ以外の場合、ルーチンは129値で失敗します。</target>
        </trans-unit>
        <trans-unit id="b864101b1cf94817be38b70b043aacccfa75cd6e" translate="yes" xml:space="preserve">
          <source>If the routine is successful, a value of 0 will be returned to the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). If the routine failed because of a problem with an argument (such as a negative or 0 length), a value of 128 will result. Finally, if the 1st argument value is anything but zero, the routine will fail with a 129 value.</source>
          <target state="translated">ルーチンが成功すると、値0が &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに戻されます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。引数の問題（長さが負または0であるなど）が原因でルーチンが失敗した場合、128の値が返されます。最後に、最初の引数の値がゼロ以外の場合、ルーチンは129の値で失敗します。</target>
        </trans-unit>
        <trans-unit id="5a1b44b26b84f05f8af22b9e038aef3fc238f233" translate="yes" xml:space="preserve">
          <source>If the search index now has a value greater than the number of entries in the table, the search is considered to have failed and the &amp;lt;</source>
          <target state="translated">検索インデックスの値がテーブルのエントリ数よりも大きい場合、検索は失敗したと見なされ、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="da9683de4eb44741b248beaf10f0ef79a0a17667" translate="yes" xml:space="preserve">
          <source>If the search index now has a value greater than the number of entries in the table, the search is considered to have failed and the &lt;var&gt;imperative-statement-1&lt;/var&gt; on the optional  &lt;code&gt;AT END&lt;/code&gt; clause, if any, will be executed. After that, control will fall into the first executable statement following the &lt;code&gt;SEARCH&lt;/code&gt;.</source>
          <target state="translated">検索インデックスの値がテーブルのエントリ数よりも大きい場合、検索は失敗したと見なされ、オプションの &lt;code&gt;AT END&lt;/code&gt; 句の &lt;var&gt;imperative-statement-1&lt;/var&gt; が実行されます（存在する場合）。その後、制御は &lt;code&gt;SEARCH&lt;/code&gt; に続く最初の実行可能ステートメントに分類されます。</target>
        </trans-unit>
        <trans-unit id="94565d23be2bb0fc7d85c959aef69eff52cd9069" translate="yes" xml:space="preserve">
          <source>If the search index now has a value less than or equal to the number of entries in the table, search processing returns back to step (A).</source>
          <target state="translated">検索インデックスがテーブル内のエントリ数以下の値を持つようになった場合、検索処理はステップ(A)に戻る。</target>
        </trans-unit>
        <trans-unit id="05d2db096b087a315ef5bec8efc903576ddb9453" translate="yes" xml:space="preserve">
          <source>If the search index now has a value less than or equal to the number of entries in the table, search processing returns back to step A.</source>
          <target state="translated">検索インデックスがテーブル内のエントリ数以下の値を持つようになった場合、検索処理はステップAに戻ります。</target>
        </trans-unit>
        <trans-unit id="63b646dd35f2ad5b466ac70be0367ce3e11e5b92" translate="yes" xml:space="preserve">
          <source>If the specified argument does not exist, or an invalid argument number is specified, a value of 0 is returned.</source>
          <target state="translated">指定した引数が存在しない場合、または無効な引数番号を指定した場合は 0 を返す。</target>
        </trans-unit>
        <trans-unit id="226dbbe68839151abdc383473011282ae0f610cd" translate="yes" xml:space="preserve">
          <source>If the specified condition-name has a value of FALSE when a &lt;code&gt;GENERATE&lt;/code&gt; statement (see &lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;) causes a report group to be presented, the presentation of that group will be suppressed.</source>
          <target state="translated">指定された条件名はFALSEの値がある場合は &lt;code&gt;GENERATE&lt;/code&gt; 文を（参照&lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;）レポートグループが提示されるようになり、そのグループのプレゼンテーションが抑制されます。</target>
        </trans-unit>
        <trans-unit id="a1c8f712007564d99604775da06766bbac9f03bb" translate="yes" xml:space="preserve">
          <source>If the specified condition-name has a value of FALSE when a&lt;code&gt;GENERATE&lt;/code&gt;statement (see &lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;) causes a report group to be presented, the presentation of that group will be suppressed.</source>
          <target state="translated">指定された条件名はFALSEの値がある場合は &lt;code&gt;GENERATE&lt;/code&gt; 文を（参照&lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;）レポートグループが提示されるようになり、そのグループのプレゼンテーションが抑制されます。</target>
        </trans-unit>
        <trans-unit id="66774ceedbe10981e42302c55639170b0ed0f28a" translate="yes" xml:space="preserve">
          <source>If the structure contains the following grid of characters:</source>
          <target state="translated">構造体に以下のグリッド文字が含まれている場合。</target>
        </trans-unit>
        <trans-unit id="2e19606b520468997579db75010657ce092d9a6b" translate="yes" xml:space="preserve">
          <source>If the subprogram being called is a GnuCOBOL program, and if that program had the &lt;code&gt;INITIAL&lt;/code&gt; (see &lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISION&lt;/a&gt;) attribute specified on its &lt;code&gt;PROGRAM-ID&lt;/code&gt; clause, all of the subprogram&amp;rsquo;s data division data will be restored to its initial state each time the subprogram is executed, regardless of which entry-point within the subprogram is being referenced.</source>
          <target state="translated">呼び出されるサブプログラムがGnuCOBOLプログラムであり、その &lt;code&gt;PROGRAM-ID&lt;/code&gt; 句で &lt;code&gt;INITIAL&lt;/code&gt; （&lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISIONを&lt;/a&gt;参照）属性が指定されている場合、サブプログラムのデータ分割データはすべて、サブプログラムが初期状態になるたびに復元されます。サブプログラム内のどのエントリポイントが参照されているかに関係なく、実行されます。</target>
        </trans-unit>
        <trans-unit id="5be0ca5096c1af0f623320b98f1b64f052b51144" translate="yes" xml:space="preserve">
          <source>If the subprogram being called is a GnuCOBOL program, and if that program had the&lt;code&gt;INITIAL&lt;/code&gt;(see &lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISION&lt;/a&gt;) attribute specified on its&lt;code&gt;PROGRAM-ID&lt;/code&gt;clause, all of the subprogram&amp;rsquo;s data division data will be restored to its initial state each time the subprogram is executed, regardless of which entry-point within the subprogram is being referenced.</source>
          <target state="translated">呼び出されるサブプログラムがGnuCOBOLプログラムであり、その &lt;code&gt;PROGRAM-ID&lt;/code&gt; 節に &lt;code&gt;INITIAL&lt;/code&gt; （&lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISIONを&lt;/a&gt;参照）属性が指定されている場合、サブプログラムが実行されるたびに、サブプログラムのすべてのデータ分割データが初期状態に復元されます。サブプログラム内のどのエントリポイントが参照されているかに関係なく、実行されます。</target>
        </trans-unit>
        <trans-unit id="9dd526e1cd7c1977c8a7c4056a1348911b1c31d3" translate="yes" xml:space="preserve">
          <source>If the subprogram issues a &lt;code&gt;STOP&lt;/code&gt; statement (see &lt;a href=&quot;#STOP&quot;&gt;STOP&lt;/a&gt;) with the &lt;code&gt;RUN&lt;/code&gt; option, program execution ceases and control returns to the operating system or whatever execution shell invoked the main program.</source>
          <target state="translated">サブプログラムの問題場合は &lt;code&gt;STOP&lt;/code&gt; の声明（参照&lt;a href=&quot;#STOP&quot;&gt;STOPを&lt;/a&gt;持つ） &lt;code&gt;RUN&lt;/code&gt; のオペレーティングシステムまたは任意の実行シェルにオプション、プログラムの実行が停止すると、制御が戻るには、メインプログラムを呼び出しました。</target>
        </trans-unit>
        <trans-unit id="1ad68b7c421e5be7cfd3f061b145123e5b308674" translate="yes" xml:space="preserve">
          <source>If the subprogram issues a&lt;code&gt;STOP&lt;/code&gt;statement (see &lt;a href=&quot;#STOP&quot;&gt;STOP&lt;/a&gt;) with the&lt;code&gt;RUN&lt;/code&gt;option, program execution ceases and control returns to the operating system or whatever execution shell invoked the main program.</source>
          <target state="translated">サブプログラムの問題場合は &lt;code&gt;STOP&lt;/code&gt; の声明（参照&lt;a href=&quot;#STOP&quot;&gt;STOPを&lt;/a&gt;持つ） &lt;code&gt;RUN&lt;/code&gt; のオペレーティングシステムまたは任意の実行シェルにオプション、プログラムの実行が停止すると、制御が戻るには、メインプログラムを呼び出しました。</target>
        </trans-unit>
        <trans-unit id="4c7b6241365e4ec6dc288450226d6b64947002d1" translate="yes" xml:space="preserve">
          <source>If the subprogram returns a value, the data item in which the value is returned must also be defined in the subprogram&amp;rsquo;s linkage section, with a &lt;code&gt;USAGE&lt;/code&gt; (see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) of &lt;code&gt;BINARY-LONG SIGNED&lt;/code&gt;, or its equivalent.</source>
          <target state="translated">サブプログラムが値を返す場合、値が返されるデータ項目も、 &lt;code&gt;BINARY-LONG SIGNED&lt;/code&gt; の &lt;code&gt;USAGE&lt;/code&gt; （&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;参照）またはそれに相当するものを使用して、サブプログラムのリンケージセクションで定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="3fddc95876d626c2ec7bbbe309cf154f2991a624" translate="yes" xml:space="preserve">
          <source>If the subprogram returns a value, the data item in which the value is returned must also be defined in the subprogram&amp;rsquo;s linkage section, with a&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) of&lt;code&gt;BINARY-LONG SIGNED&lt;/code&gt; or it&amp;rsquo;s equivalent.</source>
          <target state="translated">サブプログラムが値を返す場合、値が返されるデータ項目も、 &lt;code&gt;BINARY-LONG SIGNED&lt;/code&gt; またはそれと同等の &lt;code&gt;USAGE&lt;/code&gt; （&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;参照）を使用して、サブプログラムのリンケージセクションで定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="d18f5e6b28b4c653d9208ecaefc48bd300bc047a" translate="yes" xml:space="preserve">
          <source>If the subprogram wishes to return control back to the calling program, it will do so using either the &lt;code&gt;GOBACK&lt;/code&gt; statement (see &lt;a href=&quot;#GOBACK&quot;&gt;GOBACK&lt;/a&gt;) or the &lt;code&gt;EXIT PROGRAM&lt;/code&gt; statement (see &lt;a href=&quot;#EXIT&quot;&gt;EXIT&lt;/a&gt;). At this time:</source>
          <target state="translated">サブプログラムは、呼び出し元プログラムに制御が戻っを戻したい場合は、いずれかを使用して、そうします &lt;code&gt;GOBACK&lt;/code&gt; の声明（参照&lt;a href=&quot;#GOBACK&quot;&gt;GOBACKを&lt;/a&gt;）または &lt;code&gt;EXIT PROGRAM&lt;/code&gt; 文を（参照&lt;a href=&quot;#EXIT&quot;&gt;EXITを&lt;/a&gt;）。現時点では：</target>
        </trans-unit>
        <trans-unit id="3977b529e0e7ac10b11afc507f2c9eb5bfc68f03" translate="yes" xml:space="preserve">
          <source>If the subprogram wishes to return control back to the calling program, it will do so using either the&lt;code&gt;GOBACK&lt;/code&gt;statement (see &lt;a href=&quot;#GOBACK&quot;&gt;GOBACK&lt;/a&gt;) or the&lt;code&gt;EXIT PROGRAM&lt;/code&gt;statement (see &lt;a href=&quot;#EXIT&quot;&gt;EXIT&lt;/a&gt;). At this time:</source>
          <target state="translated">サブプログラムは、呼び出し元プログラムに制御が戻っを戻したい場合は、いずれかを使用して、そうします &lt;code&gt;GOBACK&lt;/code&gt; の声明（参照&lt;a href=&quot;#GOBACK&quot;&gt;GOBACKを&lt;/a&gt;）または &lt;code&gt;EXIT PROGRAM&lt;/code&gt; 文を（参照&lt;a href=&quot;#EXIT&quot;&gt;EXITを&lt;/a&gt;）。現時点では：</target>
        </trans-unit>
        <trans-unit id="b7d442294a11ad2647525adddd4f76ac113b07cb" translate="yes" xml:space="preserve">
          <source>If the subprograms procedure division header or &lt;code&gt;ENTRY&lt;/code&gt; statement included a  &lt;code&gt;RETURNING&lt;/code&gt;, the value of the data item found on that clause is moved to the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;); this behaviour can be altered utilizing the &lt;code&gt;CALL-CONVENTION&lt;/code&gt; (see &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;) feature to leave &lt;code&gt;RETURN-CODE&lt;/code&gt; unchanged.</source>
          <target state="translated">サブプログラムのプロシージャー分割ヘッダーまたは &lt;code&gt;ENTRY&lt;/code&gt; ステートメントに &lt;code&gt;RETURNING&lt;/code&gt; が含まれて いる場合、その節で見つかったデータ項目の値は &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに移動 されます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。この動作は、 &lt;code&gt;CALL-CONVENTION&lt;/code&gt; （&lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMESを&lt;/a&gt;参照）機能を使用して変更し、 &lt;code&gt;RETURN-CODE&lt;/code&gt; を変更しないでおくことができます。</target>
        </trans-unit>
        <trans-unit id="fb4435d664648be40b4a8cc4319cd6f4b4970f02" translate="yes" xml:space="preserve">
          <source>If the subprograms procedure division header or&lt;code&gt;ENTRY&lt;/code&gt;statement included a&lt;code&gt;RETURNING&lt;/code&gt; (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;); this behaviour can be altered utilizing the&lt;code&gt;CALL-CONVENTION&lt;/code&gt;(see &lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMES&lt;/a&gt;) feature to leave&lt;code&gt;RETURN-CODE&lt;/code&gt;unchanged.</source>
          <target state="translated">サブプログラムの手続き部のヘッダーまたは &lt;code&gt;ENTRY&lt;/code&gt; ステートメントに &lt;code&gt;RETURNING&lt;/code&gt; が含まれている場合（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。この動作は、 &lt;code&gt;CALL-CONVENTION&lt;/code&gt; （&lt;a href=&quot;#SPECIAL_002dNAMES&quot;&gt;SPECIAL-NAMESを&lt;/a&gt;参照）機能を使用して変更し、 &lt;code&gt;RETURN-CODE&lt;/code&gt; を変更しないでおくことができます。</target>
        </trans-unit>
        <trans-unit id="c11c1280cd66204488ac2a1a06bc536f96275c7f" translate="yes" xml:space="preserve">
          <source>If the subroutine is successful, a value of 0 will be returned in the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). Failure to retrieve the needed statistics on the file will cause a   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register value of 35 to be passed back. Supplying less than two arguments will generate a 128   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register value.</source>
          <target state="translated">サブルーチンが成功すると、値0が &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに返され ます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。ファイルで必要な統計を取得できないと 、35の &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスター値が返されます。2つ未満の引数を指定すると、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスター値が生成 されます。</target>
        </trans-unit>
        <trans-unit id="f09551bd08e29b51e6abf0aea5fe4a5e33e0c372" translate="yes" xml:space="preserve">
          <source>If the subroutine is successful, a value of 0 will be returned in the   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). Failure will cause a   &lt;code&gt;RETURN-CODE&lt;/code&gt; special register value of -1 to be passed back.</source>
          <target state="translated">サブルーチンが成功すると、値0が &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに返され ます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。失敗すると、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスター値-1が返されます。</target>
        </trans-unit>
        <trans-unit id="4fca4d357c4da52ecdfe09ff7f3b59313032d58e" translate="yes" xml:space="preserve">
          <source>If the subroutine is successful, a value of 0 will be returned in the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). Failure to retrieve the needed statistics on the file will cause a&lt;code&gt;RETURN-CODE&lt;/code&gt;special register value of 35 to be passed back. Supplying less than two arguments will generate a 128&lt;code&gt;RETURN-CODE&lt;/code&gt;special register value.</source>
          <target state="translated">サブルーチンが成功すると、値0が &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに戻されます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。ファイルで必要な統計を取得できないと、 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスター値35が返されます。2つ未満の引数を指定すると、128 &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスター値が生成されます。</target>
        </trans-unit>
        <trans-unit id="2e2d3e910dfeb525715cdc365898fd54399a43c4" translate="yes" xml:space="preserve">
          <source>If the subroutine is successful, a value of 0 will be returned in the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;). Failure will cause a&lt;code&gt;RETURN-CODE&lt;/code&gt;special register value of -1 to be passed back.</source>
          <target state="translated">サブルーチンが成功すると、値0が &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに戻されます（&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスターを&lt;/a&gt;参照）。失敗すると、-1の &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスター値が戻されます。</target>
        </trans-unit>
        <trans-unit id="f698aa2435d6084a56df16270589b76ed6111e07" translate="yes" xml:space="preserve">
          <source>If the value being stored into the field is the same length as the receiving field, the presence or absence of the &lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt; clause on that field&amp;rsquo;s description is irrelevant.</source>
          <target state="translated">フィールドに格納されている値が受信フィールドと同じ長さである場合、そのフィールドの説明に &lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt; 句が存在するかどうかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="d1bb984fa6207ca92b69374fdf44a4d8170a10b1" translate="yes" xml:space="preserve">
          <source>If the value being stored into the field is the same length as the receiving field, the presence or absence of the&lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt;clause on that field&amp;rsquo;s description is irrelevant.</source>
          <target state="translated">フィールドに格納されている値が受信フィールドと同じ長さである場合、そのフィールドの説明に &lt;code&gt;JUSTIFIED RIGHT&lt;/code&gt; 句が存在するかどうかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="e5b69bef404018740f53a3d7738badc9ff4e4531" translate="yes" xml:space="preserve">
          <source>If the value of &amp;lt;</source>
          <target state="translated">&amp;lt;の値の場合</target>
        </trans-unit>
        <trans-unit id="bb8439f9510a756d8324157cc108db5bd22ad20d" translate="yes" xml:space="preserve">
          <source>If the value of &lt;var&gt;identifier-1&lt;/var&gt; has the value 1, control will be transferred to the 1&lt;sup&gt;st&lt;/sup&gt; specified procedure name. If the value is 2, control will transfer to the 2nd procedure name, and so on.</source>
          <target state="translated">値場合 &lt;var&gt;identifier-1&lt;/var&gt; 値1を有し、制御手段1に転送される&lt;sup&gt;STは、&lt;/sup&gt;プロシージャ名を指定しました。値が2の場合、制御は2番目のプロシージャ名に移ります。</target>
        </trans-unit>
        <trans-unit id="b45314dff2682587d20ce286905a20dcf658ec33" translate="yes" xml:space="preserve">
          <source>If the value of &lt;var&gt;identifier-1&lt;/var&gt; is less than 1 or exceeds the total number of procedure names specified on the statement, control will simply fall through into the next statement following the &lt;code&gt;GO TO&lt;/code&gt;.</source>
          <target state="translated">値場合 &lt;var&gt;identifier-1&lt;/var&gt; 1未満であるか、ステートメントに指定プロシージャ名の総数を超えて、制御は、単に次の次の文に介して落下する &lt;code&gt;GO TO&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="a8941ef78769624061ef92939b2c773736817ccd" translate="yes" xml:space="preserve">
          <source>If the value of the numeric value moved into the field is positive (0 or greater), a &quot;+&quot; character will be inserted. If the value is negative (less than 0), a &quot;-&quot; character is inserted.</source>
          <target state="translated">フィールドに移動された数値が正の値(0以上)の場合は「+」文字が挿入されます。値が負(0未満)の場合は、&quot;-&quot;文字が挿入されます。</target>
        </trans-unit>
        <trans-unit id="acd1e3bc19ece522be6fdfb971b0319b26484139" translate="yes" xml:space="preserve">
          <source>If the value of the numeric value moved into the field is positive (0 or greater), a &amp;lsquo;</source>
          <target state="translated">フィールドに移動された数値の値が正（0以上）の場合、 '</target>
        </trans-unit>
        <trans-unit id="fa45922afd3a1788e3ef11576266d429b5817fba" translate="yes" xml:space="preserve">
          <source>If the value of the numeric value moved into the field is positive (0 or greater), a space will be inserted. If the value is negative (less than 0), a &quot;-&quot; character is inserted.</source>
          <target state="translated">フィールドに移動した数値の値が正(0以上)の場合はスペースが挿入されます。値が負(0未満)の場合は、「-」文字が挿入されます。</target>
        </trans-unit>
        <trans-unit id="fef0c37a2cadff9632c6704e1cf9b5158cf0c3f9" translate="yes" xml:space="preserve">
          <source>If the value of the numeric value moved into the field is positive (0 or greater), a space will be inserted. If the value is negative (less than 0), a &amp;lsquo;</source>
          <target state="translated">フィールドに移動された数値の値が正（0以上）の場合、スペースが挿入されます。値が負（0未満）の場合、a '</target>
        </trans-unit>
        <trans-unit id="48dd00b4185648ad98a04dd28fc9dd3c41fb5dc5" translate="yes" xml:space="preserve">
          <source>If the value specified for the &amp;lt;</source>
          <target state="translated">&amp;lt;に指定された値が</target>
        </trans-unit>
        <trans-unit id="be2c15d4233159c72f68bc3cfec16dff9b82c54c" translate="yes" xml:space="preserve">
          <source>If the value specified for the &lt;var&gt;length&lt;/var&gt; argument is LESS THAN the actual length of &lt;var&gt;buffer&lt;/var&gt; argument, the current directory path will be left-justified and space filled within the first &lt;var&gt;length&lt;/var&gt; bytes of &lt;var&gt;buffer&lt;/var&gt; &amp;mdash; any bytes in &lt;var&gt;buffer&lt;/var&gt; after that point will be unchanged.</source>
          <target state="translated">値に指定された場合は &lt;var&gt;length&lt;/var&gt; 引数未満での実際の長さ &lt;var&gt;buffer&lt;/var&gt; 引数、現在のディレクトリパスは左詰めされ、スペースは最初内に充填された &lt;var&gt;length&lt;/var&gt; のバイト &lt;var&gt;buffer&lt;/var&gt; -任意のバイト &lt;var&gt;buffer&lt;/var&gt; その時点の後は変化しないであろう。</target>
        </trans-unit>
        <trans-unit id="0831d72b5b85932627f6976dfb6259ade2e7b74e" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;-fintrinsics=WHEN-COMPILED&lt;/code&gt;switch or&lt;code&gt;-fintrinsics=ALL&lt;/code&gt;switch is specified to the compiler or the&lt;code&gt;REPOSITORY&lt;/code&gt;(see &lt;a href=&quot;#REPOSITORY&quot;&gt;REPOSITORY&lt;/a&gt;) paragraph specifies either&lt;code&gt;FUNCTION WHEN-COMPILED INTRINSIC&lt;/code&gt;or&lt;code&gt;FUNCTION ALL INTRINSIC&lt;/code&gt; then references to&lt;code&gt;WHEN-COMPILED&lt;/code&gt;(without a leading&lt;code&gt;FUNCTION&lt;/code&gt;keyword will always reference this intrinsic function and there will be no way to access the&lt;code&gt;WHEN-COMPILED&lt;/code&gt;special register.</source>
          <target state="translated">場合 &lt;code&gt;-fintrinsics=WHEN-COMPILED&lt;/code&gt; スイッチまたは &lt;code&gt;-fintrinsics=ALL&lt;/code&gt; のスイッチはコンパイラまたはに指定されている &lt;code&gt;REPOSITORY&lt;/code&gt; （参照&lt;a href=&quot;#REPOSITORY&quot;&gt;リポジトリ&lt;/a&gt;段落の指定のいずれか） &lt;code&gt;FUNCTION WHEN-COMPILED INTRINSIC&lt;/code&gt; または &lt;code&gt;FUNCTION ALL INTRINSIC&lt;/code&gt; に、その後の参照を &lt;code&gt;WHEN-COMPILED&lt;/code&gt; 招くことなく（ &lt;code&gt;FUNCTION&lt;/code&gt; キーワードは常にこの組み込み関数を参照し、 &lt;code&gt;WHEN-COMPILED&lt;/code&gt; 特殊レジスターにアクセスする方法はありません。</target>
        </trans-unit>
        <trans-unit id="3b420486302df3f6e207a4313dfd931a759d89b7" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;-ftrace&lt;/code&gt;switch</source>
          <target state="translated">もし &lt;code&gt;-ftrace&lt;/code&gt; のスイッチ</target>
        </trans-unit>
        <trans-unit id="3349b7269aaccc8bb1cc998766e4a46beb55bde2" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;ACCESS MODE&lt;/code&gt;of &amp;lt;</source>
          <target state="translated">&amp;lt; の &lt;code&gt;ACCESS MODE&lt;/code&gt; が</target>
        </trans-unit>
        <trans-unit id="2e5d9e90a43cf87c9978ea30182b2bcd04cc6c52" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;ADDRESS OF&lt;/code&gt;clause is absent after the&lt;code&gt;TO&lt;/code&gt; the contents of &amp;lt;</source>
          <target state="translated">&amp;lt;の &lt;code&gt;TO&lt;/code&gt; の内容の後に &lt;code&gt;ADDRESS OF&lt;/code&gt; 句がない場合</target>
        </trans-unit>
        <trans-unit id="26199d3754ff366a5846d65d208ee2e6de9686ad" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;ALL&lt;/code&gt;keyword was specified on the&lt;code&gt;VALUE&lt;/code&gt;clause, all members of the field list with&lt;code&gt;VALUE&lt;/code&gt;clauses will qualify.</source>
          <target state="translated">場合は &lt;code&gt;ALL&lt;/code&gt; のキーワードが上で指定された &lt;code&gt;VALUE&lt;/code&gt; の句、とフィールドリストのすべてのメンバー &lt;code&gt;VALUE&lt;/code&gt; の条項が対象となります。</target>
        </trans-unit>
        <trans-unit id="df5d251bac8a9bff6db280d0993ff1dbfac8f41c" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;CONSTANT&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CONSTANT&lt;/code&gt; 場合</target>
        </trans-unit>
        <trans-unit id="0c81429e41c0cb12a035faac7aa149969b981744" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;CRT STATUS&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CRT STATUS&lt;/code&gt; 場合</target>
        </trans-unit>
        <trans-unit id="bdf79d6d2d1dddc9f4d79dc6b3151fcff14428de" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;FD&lt;/code&gt;of the file contains the&lt;code&gt;RECORD CONTAINS&lt;/code&gt;or&lt;code&gt;RECORD IS VARYING&lt;/code&gt;clause, and that clause allows the record size to vary, the size</source>
          <target state="translated">ファイルの &lt;code&gt;FD&lt;/code&gt; に &lt;code&gt;RECORD CONTAINS&lt;/code&gt; または &lt;code&gt;RECORD IS VARYING&lt;/code&gt; 句が含まれ、その句によってレコードサイズを変更できる場合、サイズ</target>
        </trans-unit>
        <trans-unit id="7cd7e97ca9d4f2995a04bb967f17ad631843750e" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;FD&lt;/code&gt;of the file contains the&lt;code&gt;RECORD CONTAINS&lt;/code&gt;or&lt;code&gt;RECORD IS VARYING&lt;/code&gt;clause, and that clause allows the record size to vary, the size of &amp;lt;</source>
          <target state="translated">ファイルの &lt;code&gt;FD&lt;/code&gt; に &lt;code&gt;RECORD CONTAINS&lt;/code&gt; または &lt;code&gt;RECORD IS VARYING&lt;/code&gt; 句が含まれ、その句によってレコードサイズを変更できる場合、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="8342745452a46e82129819210173c072a362af42" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;LINAGE&lt;/code&gt;(see &lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;File/Sort-Description&lt;/a&gt;) clause is</source>
          <target state="translated">場合 &lt;code&gt;LINAGE&lt;/code&gt; （参照&lt;a href=&quot;#File_002fSort_002dDescription&quot;&gt;ファイル/ソート-説明&lt;/a&gt;）句があります</target>
        </trans-unit>
        <trans-unit id="67faed20b65d381e0f35f57376ea02fccee28463" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;LOCK ON&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;LOCK ON&lt;/code&gt; 場合</target>
        </trans-unit>
        <trans-unit id="9a4cf245f7ab4d128cf1a215befd46fe8ca30464" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;LOCK ON&lt;/code&gt;clause</source>
          <target state="translated">もし &lt;code&gt;LOCK ON&lt;/code&gt; 句</target>
        </trans-unit>
        <trans-unit id="5348e096005262a0ab82c3168003e7e7371e7dae" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;PERFORM&lt;/code&gt;specifies or implies&lt;code&gt;WITH TEST BEFORE&lt;/code&gt; &amp;lt;</source>
          <target state="translated">&lt;code&gt;PERFORM&lt;/code&gt; が &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; &amp;lt;を指定または暗示する場合</target>
        </trans-unit>
        <trans-unit id="dd5a2104ff28017a6be9e284824ff9c6d67e6603" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;PROGRAM-ID&lt;/code&gt;(see &lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISION&lt;/a&gt;) clause of the subprogram included the&lt;code&gt;INITIAL&lt;/code&gt;</source>
          <target state="translated">サブプログラムの &lt;code&gt;PROGRAM-ID&lt;/code&gt; （&lt;a href=&quot;#IDENTIFICATION-DIVISION&quot;&gt;IDENTIFICATION DIVISIONを&lt;/a&gt;参照）句に &lt;code&gt;INITIAL&lt;/code&gt; が含まれていた場合</target>
        </trans-unit>
        <trans-unit id="68679aad3ae2e21817a3db3c1cd8a4c87162b63f" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;RD&lt;/code&gt;(see &lt;a href=&quot;#REPORT-SECTION&quot;&gt;REPORT SECTION&lt;/a&gt;) in which the report group containing a&lt;code&gt;NEXT GROUP&lt;/code&gt;clause does not contain a&lt;code&gt;PAGE LIMITS&lt;/code&gt;clause, only the&lt;code&gt;PLUS integer-1&lt;/code&gt;option may be specified.</source>
          <target state="translated">&lt;code&gt;NEXT GROUP&lt;/code&gt; 句を含むレポートグループに &lt;code&gt;PAGE LIMITS&lt;/code&gt; 句が含まれない &lt;code&gt;RD&lt;/code&gt; （&lt;a href=&quot;#REPORT-SECTION&quot;&gt;REPORT SECTIONを&lt;/a&gt;参照）の場合、 &lt;code&gt;PLUS integer-1&lt;/code&gt; オプションのみを指定できます。</target>
        </trans-unit>
        <trans-unit id="6326e274617c726298b0f2a259364a71ec08cb9a" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;REMAINDER&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;REMAINDER&lt;/code&gt; 場合</target>
        </trans-unit>
        <trans-unit id="d46ae7e0403a69183623c2c0c30c04ac183c02a4" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;RESET&lt;/code&gt;option is coded,&lt;code&gt;FINAL&lt;/code&gt;or &amp;lt;</source>
          <target state="translated">場合は &lt;code&gt;RESET&lt;/code&gt; のオプションがコード化され、 &lt;code&gt;FINAL&lt;/code&gt; または&amp;lt;</target>
        </trans-unit>
        <trans-unit id="38a1fbfcc2ff5f0f55dba89a7b49d153d656d7e5" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;SELECT&lt;/code&gt;(see &lt;a href=&quot;#SELECT&quot;&gt;SELECT&lt;/a&gt;) statement or file&lt;code&gt;OPEN&lt;/code&gt;(see &lt;a href=&quot;#OPEN&quot;&gt;OPEN&lt;/a&gt;) specifies&lt;code&gt;SHARING WITH NO OTHER&lt;/code&gt; record locking will be disabled.</source>
          <target state="translated">場合 &lt;code&gt;SELECT&lt;/code&gt; （参照&lt;a href=&quot;#SELECT&quot;&gt;SELECT&lt;/a&gt;文またはファイル） &lt;code&gt;OPEN&lt;/code&gt; を（参照&lt;a href=&quot;#OPEN&quot;&gt;OPENを&lt;/a&gt;）指定 &lt;code&gt;SHARING WITH NO OTHER&lt;/code&gt; レコードロックは無効になります。</target>
        </trans-unit>
        <trans-unit id="4469b431cec5ac5fa31a45bf59859b62ee522aee" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;SELECT&lt;/code&gt;of a file is coded with a&lt;code&gt;FILE STATUS&lt;/code&gt;clause,&lt;code&gt;OPEN&lt;/code&gt;failures &amp;mdash; including those induced by sharing failures &amp;mdash; will be detectable by the program and a graceful recovery (or at least a graceful termination) will be possible. If no such clause was coded, however, a runtime message will be issued and the program will be terminated.</source>
          <target state="translated">ファイルの &lt;code&gt;SELECT&lt;/code&gt; が &lt;code&gt;FILE STATUS&lt;/code&gt; 句を使用してコーディングされている場合、 &lt;code&gt;OPEN&lt;/code&gt; の失敗（共有の失敗によって引き起こされたものを含む）がプログラムによって検出され、正常な回復（または少なくとも正常な終了）が可能になります。ただし、そのような句がコーディングされていない場合は、実行時メッセージが発行され、プログラムが終了します。</target>
        </trans-unit>
        <trans-unit id="d43773d0d9856113d341b49d71c616d3ba81cd29" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;SEPARATE CHARACTER&lt;/code&gt;clause</source>
          <target state="translated">もし &lt;code&gt;SEPARATE CHARACTER&lt;/code&gt; の句</target>
        </trans-unit>
        <trans-unit id="cc7da6fe4678bd908df6708f4cd87c152a905cc1" translate="yes" xml:space="preserve">
          <source>If the&lt;code&gt;SYNCRONIZED&lt;/code&gt;clause is coded on anything but a numeric data item with a&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) that specifies storage of data in a binary form, the&lt;code&gt;SYNCRONIZED&lt;/code&gt;clause will be ignored.</source>
          <target state="translated">場合 &lt;code&gt;SYNCRONIZED&lt;/code&gt; 句を使って何が、数字データ項目でコード化された &lt;code&gt;USAGE&lt;/code&gt; （参照&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;バイナリ形式のデータのように指定し保存）、 &lt;code&gt;SYNCRONIZED&lt;/code&gt; 句は無視されます。</target>
        </trans-unit>
        <trans-unit id="d78ec8f2b4dfe7f01a17864e7420734286b9c412" translate="yes" xml:space="preserve">
          <source>If there are fewer tokens than there are arguments, the excess arguments will be initialized as if the &lt;code&gt;INITIALIZE &lt;var&gt;identifier-1&lt;/var&gt;&lt;/code&gt; (see &lt;a href=&quot;#INITIALIZE&quot;&gt;INITIALIZE&lt;/a&gt;) statement were executed.</source>
          <target state="translated">引数の数よりもトークンの数が少ない場合、過剰な引数は、 &lt;code&gt;INITIALIZE &lt;var&gt;identifier-1&lt;/var&gt;&lt;/code&gt; （&lt;a href=&quot;#INITIALIZE&quot;&gt;INITIALIZEを&lt;/a&gt;参照）ステートメントが実行されたかのように初期化されます。</target>
        </trans-unit>
        <trans-unit id="3d2f7b6539018dd97bf4f7ebf6332805f3b4ccf8" translate="yes" xml:space="preserve">
          <source>If there are fewer tokens than there are arguments, the excess arguments will be initialized as if the&lt;code&gt;INITIALIZE &amp;lt;&lt;i&gt;identifier-1&lt;/i&gt;&amp;gt;&lt;/code&gt;(see &lt;a href=&quot;#INITIALIZE&quot;&gt;INITIALIZE&lt;/a&gt;) statement were executed.</source>
          <target state="translated">トークンの数が引数の数よりも少ない場合、余分な引数は、 &lt;code&gt;INITIALIZE &amp;lt;&lt;i&gt;identifier-1&lt;/i&gt;&amp;gt;&lt;/code&gt; （&lt;a href=&quot;#INITIALIZE&quot;&gt;INITIALIZEを&lt;/a&gt;参照）ステートメントが実行されたかのように初期化されます。</target>
        </trans-unit>
        <trans-unit id="061529f2e81b4789d20b56f0ff94bb58b24306f6" translate="yes" xml:space="preserve">
          <source>If there are more tokens than there are arguments, the excess tokens will be discarded.</source>
          <target state="translated">トークンが議論よりも多い場合は、余ったトークンは破棄されます。</target>
        </trans-unit>
        <trans-unit id="f2d936a65b86a2841ae9003e465d423ea6c6934c" translate="yes" xml:space="preserve">
          <source>If there are multiple cash registers in a particular department of a specific store, the data needs to be further sorted so that the cash registers are ordered in sequence of their register number.</source>
          <target state="translated">また、特定の店舗の特定の部署に複数のレジがある場合には、レジ番号順に並ぶようにデータをさらにソートする必要がある。</target>
        </trans-unit>
        <trans-unit id="e59de2a27b6a35a90e0f8bc07988b0621533bd24" translate="yes" xml:space="preserve">
          <source>If there are multiple record descriptions present for a given &lt;code&gt;FD&lt;/code&gt; or &lt;code&gt;SD&lt;/code&gt;, the one with the longest length will define the size of the record buffer into which a &lt;code&gt;READ&lt;/code&gt; statement (see &lt;a href=&quot;#READ&quot;&gt;READ&lt;/a&gt;) or a &lt;code&gt;RETURN&lt;/code&gt; statement (see &lt;a href=&quot;#RETURN&quot;&gt;RETURN&lt;/a&gt;) will deliver data read from the file and from which a &lt;code&gt;WRITE&lt;/code&gt; statement (see &lt;a href=&quot;#WRITE&quot;&gt;WRITE&lt;/a&gt;) or &lt;code&gt;RELEASE&lt;/code&gt; statement (see &lt;a href=&quot;#RELEASE&quot;&gt;RELEASE&lt;/a&gt;) statement will obtain the data to be written to the file.</source>
          <target state="translated">所与のために存在する複数のレコード記述がある場合は &lt;code&gt;FD&lt;/code&gt; や &lt;code&gt;SD&lt;/code&gt; は、最長の長さを有するものがにレコードバッファのサイズ定義する &lt;code&gt;READ&lt;/code&gt; ステートメント（参照&lt;a href=&quot;#READ&quot;&gt;READを&lt;/a&gt;）または &lt;code&gt;RETURN&lt;/code&gt; のステートメント（参照&lt;a href=&quot;#RETURN&quot;&gt;RETURNに&lt;/a&gt;）データを配信するから読み出しファイルからの &lt;code&gt;WRITE&lt;/code&gt; の声明（参照&lt;a href=&quot;#WRITE&quot;&gt;WRITEを&lt;/a&gt;）または &lt;code&gt;RELEASE&lt;/code&gt; の声明（参照&lt;a href=&quot;#RELEASE&quot;&gt;RELEASEを&lt;/a&gt;）文は、ファイルに書き込まれるデータを取得します。</target>
        </trans-unit>
        <trans-unit id="3972fbb29cfb0307f762dc829ca3e5c79c5963a7" translate="yes" xml:space="preserve">
          <source>If there are multiple record descriptions present for a given&lt;code&gt;FD&lt;/code&gt;or&lt;code&gt;SD&lt;/code&gt; the one with the longest length will define the size of the record buffer into which a&lt;code&gt;READ&lt;/code&gt;statement (see &lt;a href=&quot;#READ&quot;&gt;READ&lt;/a&gt;) or a&lt;code&gt;RETURN&lt;/code&gt;statement (see &lt;a href=&quot;#RETURN&quot;&gt;RETURN&lt;/a&gt;) will deliver data read from the file and from which a&lt;code&gt;WRITE&lt;/code&gt;statement (see &lt;a href=&quot;#WRITE&quot;&gt;WRITE&lt;/a&gt;) or&lt;code&gt;RELEASE&lt;/code&gt;statement (see &lt;a href=&quot;#RELEASE&quot;&gt;RELEASE&lt;/a&gt;) statement will obtain the data to be written to the file.</source>
          <target state="translated">所与のために存在する複数のレコード記述がある場合は &lt;code&gt;FD&lt;/code&gt; または &lt;code&gt;SD&lt;/code&gt; 先のレコードバッファのサイズを規定する最長の長さを有するもの &lt;code&gt;READ&lt;/code&gt; 文は、（参照&lt;a href=&quot;#READ&quot;&gt;READを&lt;/a&gt;）または &lt;code&gt;RETURN&lt;/code&gt; のステートメント（参照&lt;a href=&quot;#RETURN&quot;&gt;RETURN&lt;/a&gt;データを配信するが）から読み出しますファイルからの &lt;code&gt;WRITE&lt;/code&gt; の声明（参照&lt;a href=&quot;#WRITE&quot;&gt;WRITEを&lt;/a&gt;）または &lt;code&gt;RELEASE&lt;/code&gt; の声明（参照&lt;a href=&quot;#RELEASE&quot;&gt;RELEASEを&lt;/a&gt;）文は、ファイルに書き込まれるデータを取得します。</target>
        </trans-unit>
        <trans-unit id="6af5fafade490255d4c9294e9ca6e0bf011fdff0" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;C-D&lt;/code&gt; data item, then are there &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; data items? If not, the &lt;code&gt;COMPUTE&lt;/code&gt; statement is in error. If there are, however, then code will be generated to subtract the value of &lt;code&gt;D&lt;/code&gt; from &lt;code&gt;C&lt;/code&gt; and add 1 to the result.</source>
          <target state="translated">&lt;code&gt;C-D&lt;/code&gt; データ項目がない場合、 &lt;code&gt;C&lt;/code&gt; および &lt;code&gt;D&lt;/code&gt; データ項目はありますか？そうでない場合、 &lt;code&gt;COMPUTE&lt;/code&gt; ステートメントはエラーです。ただし、存在する場合は、 &lt;code&gt;C&lt;/code&gt; から &lt;code&gt;D&lt;/code&gt; の値を減算し、結果に1を加算するコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="c8b3aecda840e3adb64a0514f90c687896399421" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;CONTROL&lt;/code&gt; clause, the report will contain no control breaks; this implies that there can be no &lt;code&gt;CONTROL HEADING&lt;/code&gt; or &lt;code&gt;CONTROL FOOTING&lt;/code&gt; report groups defined for this &lt;code&gt;RD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CONTROL&lt;/code&gt; 句がない場合、レポートにはコントロールブレークは含まれません。これは、この &lt;code&gt;RD&lt;/code&gt; に対して定義された &lt;code&gt;CONTROL HEADING&lt;/code&gt; または &lt;code&gt;CONTROL FOOTING&lt;/code&gt; レポートグループが存在しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="d762e7f62e886e48e2ba03dcf5bc48c95f682f84" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;INITIAL&lt;/code&gt; clause specified, the target range is the entire inspect subject.</source>
          <target state="translated">&lt;code&gt;INITIAL&lt;/code&gt; 句が指定されていない場合、ターゲット範囲は検査対象全体です。</target>
        </trans-unit>
        <trans-unit id="16abcea8905ec59c88cbf72bfdd646aa20d52b18" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;RESET&lt;/code&gt; option coded, the sum counter will be reset back to zero after each time the control footing containing the &lt;code&gt;SUM&lt;/code&gt; clause is presented. This is the typical behaviour that would be expected.</source>
          <target state="translated">&lt;code&gt;RESET&lt;/code&gt; オプションがコーディングされていない場合、 &lt;code&gt;SUM&lt;/code&gt; 句を含む制御基礎が提示されるたびに、合計カウンターはゼロにリセットされます。これは、予想される典型的な動作です。</target>
        </trans-unit>
        <trans-unit id="41ec3f30640928a7442c69732eddf2379b4afaed" translate="yes" xml:space="preserve">
          <source>If there is no &lt;code&gt;UPON&lt;/code&gt; clause specified, the value of &lt;var&gt;identifier-7&lt;/var&gt; or &lt;var&gt;literal-2&lt;/var&gt; will be added into the sum counter whenever a &lt;code&gt;GENERATE&lt;/code&gt; (see &lt;a href=&quot;#GENERATE&quot;&gt;GENERATE&lt;/a&gt;) of any detail report group in the report is executed.</source>
          <target state="translated">&lt;code&gt;UPON&lt;/code&gt; 句が指定されていない場合、レポート内の詳細レポートグループの &lt;code&gt;GENERATE&lt;/code&gt; （&lt;a href=&quot;#GENERATE&quot;&gt;GENERATEを&lt;/a&gt;参照）が実行されるたびに、 &lt;var&gt;identifier-7&lt;/var&gt; または &lt;var&gt;literal-2&lt;/var&gt; の値が合計カウンターに追加されます。</target>
        </trans-unit>
        <trans-unit id="d3312782c3bd864e73fc604ba5b82a1e503c0463" translate="yes" xml:space="preserve">
          <source>If there is no picture clause and the &lt;code&gt;ALL&lt;/code&gt; option is specified, the &lt;code&gt;ALL&lt;/code&gt; option will be ignored.</source>
          <target state="translated">picture句がなく、 &lt;code&gt;ALL&lt;/code&gt; オプションが指定されている場合、 &lt;code&gt;ALL&lt;/code&gt; オプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="75eb31de9a88419e99f8f2249dfa222651219fe7" translate="yes" xml:space="preserve">
          <source>If there is no picture clause and the&lt;code&gt;ALL&lt;/code&gt;option is specified, the&lt;code&gt;ALL&lt;/code&gt;option will be ignored.</source>
          <target state="translated">ピクチャー節がなく、 &lt;code&gt;ALL&lt;/code&gt; オプションが指定されている場合、 &lt;code&gt;ALL&lt;/code&gt; オプションは無視されます。</target>
        </trans-unit>
        <trans-unit id="0c755b4b694e7c4beb9b1c5901a6f3a6e90065fa" translate="yes" xml:space="preserve">
          <source>If there is no picture clause specified, the size of the screen data item will be the length of the &amp;lt;</source>
          <target state="translated">画像句が指定されていない場合、画面データ項目のサイズは&amp;lt;</target>
        </trans-unit>
        <trans-unit id="65e6d23a23213a7521f378d2234f516bcfe5dc63" translate="yes" xml:space="preserve">
          <source>If there is no picture clause specified, the size of the screen data item will be the length of the &lt;var&gt;literal-1&lt;/var&gt; value.</source>
          <target state="translated">picture句が指定されていない場合、画面データ項目のサイズは &lt;var&gt;literal-1&lt;/var&gt; 値の長さになります。</target>
        </trans-unit>
        <trans-unit id="be6e32115bff0c291e8d3c6d6525390722099349" translate="yes" xml:space="preserve">
          <source>If there is no&lt;code&gt;C-D&lt;/code&gt;data item, then are there&lt;code&gt;C&lt;/code&gt;and&lt;code&gt;D&lt;/code&gt;data items? If not, the&lt;code&gt;COMPUTE&lt;/code&gt;statement is in error. If there are, however, then code will be generated to subtract the value of&lt;code&gt;D&lt;/code&gt;from&lt;code&gt;C&lt;/code&gt;and add 1 to the result.</source>
          <target state="translated">&lt;code&gt;C-D&lt;/code&gt; データ項目がない場合、 &lt;code&gt;C&lt;/code&gt; および &lt;code&gt;D&lt;/code&gt; データ項目はありますか？そうでない場合、 &lt;code&gt;COMPUTE&lt;/code&gt; ステートメントにエラーがあります。ただし、ある場合は、 &lt;code&gt;C&lt;/code&gt; から &lt;code&gt;D&lt;/code&gt; の値を減算して結果に1を加えるコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="6dbb73155f0ea4fd82ba811977b3d699fc88a4ae" translate="yes" xml:space="preserve">
          <source>If there is no&lt;code&gt;CONTROL&lt;/code&gt;clause, the report will contain no control breaks; this implies that there can be no&lt;code&gt;CONTROL HEADING&lt;/code&gt;or&lt;code&gt;CONTROL FOOTING&lt;/code&gt;report groups defined for this&lt;code&gt;RD&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;CONTROL&lt;/code&gt; 句がない場合、レポートにはコントロールブレークが含まれません。これは、この &lt;code&gt;RD&lt;/code&gt; に &lt;code&gt;CONTROL HEADING&lt;/code&gt; または &lt;code&gt;CONTROL FOOTING&lt;/code&gt; のレポートグループを定義できないことを意味します</target>
        </trans-unit>
        <trans-unit id="a351d89c95027f7701058bc9f942df00ed507cdc" translate="yes" xml:space="preserve">
          <source>If there is no&lt;code&gt;INITIAL&lt;/code&gt;clause specified, the target range is the entire inspect subject.</source>
          <target state="translated">&lt;code&gt;INITIAL&lt;/code&gt; 句が指定されていない場合、ターゲット範囲は検査対象全体です。</target>
        </trans-unit>
        <trans-unit id="f81540f4079ee51c4206d96a7efc736809a22ed7" translate="yes" xml:space="preserve">
          <source>If there is no&lt;code&gt;RESET&lt;/code&gt;option coded, the sum counter will be reset back to zero after each time the control footing containing the&lt;code&gt;SUM&lt;/code&gt;clause is presented. This is the typical behaviour that would be expected.</source>
          <target state="translated">&lt;code&gt;RESET&lt;/code&gt; オプションがコーディングされていない場合、 &lt;code&gt;SUM&lt;/code&gt; 句を含む制御脚注が表示されるたびに、合計カウンターはゼロにリセットされます。これは、予想される典型的な動作です。</target>
        </trans-unit>
        <trans-unit id="d5e252dc91e0d99f464bda7bc7cffd6140f7edd1" translate="yes" xml:space="preserve">
          <source>If there is no&lt;code&gt;UPON&lt;/code&gt;clause specified, the value of &amp;lt;</source>
          <target state="translated">&lt;code&gt;UPON&lt;/code&gt; 句が指定されていない場合、&amp;lt;の値</target>
        </trans-unit>
        <trans-unit id="85ed95cffb116ddc0e04b0ff9f3f85cb3f686c72" translate="yes" xml:space="preserve">
          <source>If there is only a single detail group in the report&amp;rsquo;s definition, the &lt;code&gt;UPON&lt;/code&gt; clause is meaningless.</source>
          <target state="translated">レポートの定義に詳細グループが1つしかない場合、 &lt;code&gt;UPON&lt;/code&gt; 句は無意味です。</target>
        </trans-unit>
        <trans-unit id="3241679c69995dc4a256fad0940c95e8635b9f3e" translate="yes" xml:space="preserve">
          <source>If there is only a single detail group in the report&amp;rsquo;s definition, the&lt;code&gt;UPON&lt;/code&gt;clause is meaningless.</source>
          <target state="translated">レポートの定義に詳細グループが1つしかない場合、 &lt;code&gt;UPON&lt;/code&gt; 句は意味がありません。</target>
        </trans-unit>
        <trans-unit id="8336291c2ee7aa90b14f47a5ffa73da4f4ccca8c" translate="yes" xml:space="preserve">
          <source>If this format of the &lt;code&gt;GO TO&lt;/code&gt; statement appears in a consecutive sequence of imperative statements (see &lt;a href=&quot;#Imperative-Statement&quot;&gt;Imperative Statement&lt;/a&gt;) within a sentence, it must be the</source>
          <target state="translated">この形式ならば &lt;code&gt;GO TO&lt;/code&gt; の文が命令ステートメント（参照の連続した順序で表示される&lt;a href=&quot;#Imperative-Statement&quot;&gt;無条件文を&lt;/a&gt;文の中）、それがなければなりません</target>
        </trans-unit>
        <trans-unit id="c11b35162c1c669848bde8fb8b4adb40363c054b" translate="yes" xml:space="preserve">
          <source>If this format of the&lt;code&gt;GO TO&lt;/code&gt;statement appears in a consecutive sequence of imperative statements (see &lt;a href=&quot;#Imperative-Statement&quot;&gt;Imperative Statement&lt;/a&gt;) within a sentence, it must be the</source>
          <target state="translated">この形式の &lt;code&gt;GO TO&lt;/code&gt; ステートメントが、文内の一連の命令ステートメント（「&lt;a href=&quot;#Imperative-Statement&quot;&gt;命令ステートメント」を&lt;/a&gt;参照）に現れる場合、それは</target>
        </trans-unit>
        <trans-unit id="87568d2d981805ff51bcc79d09c4d6bfd7b2a8ef" translate="yes" xml:space="preserve">
          <source>If this is NOT set to a value, all&lt;code&gt;-ftrace&lt;/code&gt;switch and&lt;code&gt;-ftraceall&lt;/code&gt;switch output will be written to STDERR, where it may be piped via a &quot;2&amp;gt; filename&quot; on the command that executes the program.</source>
          <target state="translated">これが値に設定されていない場合、すべての &lt;code&gt;-ftrace&lt;/code&gt; スイッチおよび &lt;code&gt;-ftraceall&lt;/code&gt; スイッチの出力はSTDERRに書き込まれ、プログラムを実行するコマンドの &quot;2&amp;gt; filename&quot;を介してパイプされることがあります。</target>
        </trans-unit>
        <trans-unit id="a83736211ab7a8ebcd841864f94ccc4520a7dfa7" translate="yes" xml:space="preserve">
          <source>If this is needed then the use of &lt;code&gt;CONCATENATE&lt;/code&gt; to built more than one element together prior to the display,</source>
          <target state="translated">これが必要な場合は、 &lt;code&gt;CONCATENATE&lt;/code&gt; を使用して、表示前に複数の要素を一緒に構築します。</target>
        </trans-unit>
        <trans-unit id="a889b90fb05948e48163ce89cde9903008828bde" translate="yes" xml:space="preserve">
          <source>If this is not defined under *nix it will default to</source>
          <target state="translated">これが*nixで定義されていない場合、デフォルトは</target>
        </trans-unit>
        <trans-unit id="e41eac2db71cda7170c71b8ec2c30d7834407d0c" translate="yes" xml:space="preserve">
          <source>If this is not defined under *nix it will default to /usr/local/share/gnucobol/config.</source>
          <target state="translated">これが *nix で定義されていない場合は /usr/local/share/gnucobol/config がデフォルトになります。</target>
        </trans-unit>
        <trans-unit id="f658454bbe0cb00adbd321dd682ed210523825d2" translate="yes" xml:space="preserve">
          <source>If this references the &lt;code&gt;LOCALE&lt;/code&gt; :</source>
          <target state="translated">これが &lt;code&gt;LOCALE&lt;/code&gt; を参照している場合：</target>
        </trans-unit>
        <trans-unit id="13a780ab73e0d98067b8082c96e09315273c7654" translate="yes" xml:space="preserve">
          <source>If used with &lt;code&gt;PIC X&lt;/code&gt;, allocates one byte of storage per &amp;lsquo;</source>
          <target state="translated">&lt;code&gt;PIC X&lt;/code&gt; とともに使用する場合、 'ごとに1バイトのストレージを割り当てます。</target>
        </trans-unit>
        <trans-unit id="023cf0ecfd0afc5f6ae392348d069495edac90d8" translate="yes" xml:space="preserve">
          <source>If used with&lt;code&gt;PIC X&lt;/code&gt; allocates one byte of storage per&lt;code&gt;X&lt;/code&gt; range of values is 0 to max storable in that many bytes. If used with&lt;code&gt;PIC 9&lt;/code&gt; range of values depends on number of&lt;code&gt;9&lt;/code&gt; in PICTURE</source>
          <target state="translated">使用している場合で &lt;code&gt;PIC X&lt;/code&gt; が割り当てあたりのストレージの1バイトの &lt;code&gt;X&lt;/code&gt; の値の範囲は、そのバイト数で最大保存可能に0です。 &lt;code&gt;PIC 9&lt;/code&gt; と共に使用する場合、値の範囲はPICTURE の &lt;code&gt;9&lt;/code&gt; の数に依存します</target>
        </trans-unit>
        <trans-unit id="5b48ea3221a5bd190b3da00947706eadb4325c47" translate="yes" xml:space="preserve">
          <source>If used, &amp;lt;</source>
          <target state="translated">使用する場合、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="b86b211a643f0894516daa2e4887ef0058458a13" translate="yes" xml:space="preserve">
          <source>If used, &lt;var&gt;expression-1&lt;/var&gt; must be an arithmetic expression with a non-zero positive integer value.</source>
          <target state="translated">&lt;var&gt;expression-1&lt;/var&gt; 使用する場合は、ゼロ以外の正の整数値を持つ算術式である必要があります。</target>
        </trans-unit>
        <trans-unit id="b8e42b7d06183584a3c82a1e30a497fb1500ac29" translate="yes" xml:space="preserve">
          <source>If used, &lt;var&gt;identifier-1&lt;/var&gt; should be an 01-level item defined in working-storage or local-storage with the &lt;code&gt;BASED&lt;/code&gt; (see &lt;a href=&quot;#BASED&quot;&gt;BASED&lt;/a&gt;) attribute. It may be an 01 item defined in the linkage section without the &lt;code&gt;BASED&lt;/code&gt; attribute, but using such a data item is not recommended.</source>
          <target state="translated">使用する場合、 &lt;var&gt;identifier-1&lt;/var&gt; は、 &lt;code&gt;BASED&lt;/code&gt; （&lt;a href=&quot;#BASED&quot;&gt;BASEDを&lt;/a&gt;参照）属性を使用して作業用ストレージまたはローカルストレージで定義された01レベルの項目である必要があります。 &lt;code&gt;BASED&lt;/code&gt; 属性なしでリンケージセクションで定義された01アイテムである可能性がありますが、そのようなデータアイテムを使用することはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="9bc0724035e374262548f9e5245c6c8b9be6bbaa" translate="yes" xml:space="preserve">
          <source>If used, &lt;var&gt;identifier-2&lt;/var&gt; should be a &lt;code&gt;POINTER&lt;/code&gt; (see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) data item.</source>
          <target state="translated">使用する場合、 &lt;var&gt;identifier-2&lt;/var&gt; は &lt;code&gt;POINTER&lt;/code&gt; （&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;参照）データ項目である必要があります。</target>
        </trans-unit>
        <trans-unit id="71f1f5a847333c2f0a308baea3e7cd54b097d32f" translate="yes" xml:space="preserve">
          <source>If you already know a programming language other than COBOL, chances are that language is Java, C or C++. You will find COBOL much different from those; sometimes the differences are a good thing and sometimes they aren&amp;rsquo;t. The thing to remember about COBOL is this:</source>
          <target state="translated">COBOL以外のプログラミング言語を既に知っている場合は、その言語がJava、C、またはC ++である可能性があります。COBOLはそれらとは大きく異なります。違いが良いこともあれば、そうでないこともあります。COBOLについて覚えておくべきことは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f92f6ebb3f39d6efd118da1f36149fda0df27506" translate="yes" xml:space="preserve">
          <source>If you are comfortable with the &quot;C&quot; programming language, you might find the following simple GnuCOBOL program useful in exploring the differences between subscripting and indexing:</source>
          <target state="translated">C」プログラミング言語に慣れている場合は、以下のシンプルなGnuCOBOLプログラムが、添え字とインデックスの違いを探るのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="d72a55c3208d833e5593b857446fb0e285092f9f" translate="yes" xml:space="preserve">
          <source>If you are comfortable with the C programming language, you might find the following simple GnuCOBOL program useful in exploring the differences between subscripting and indexing:</source>
          <target state="translated">C 言語のプログラミング言語に慣れている場合は、以下の簡単な GnuCOBOL プログラムが、添え字とインデックスの違いを調べるのに役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="66062304bf503c5649ee5c39992874bd53f8d855" translate="yes" xml:space="preserve">
          <source>If you are planning on using static-linked subroutine libraries, set this variable to the path of the directory containing your libraries.</source>
          <target state="translated">スタティックリンクされたサブルーチンライブラリを使用する場合は、この変数にライブラリを含むディレクトリのパスを設定してください。</target>
        </trans-unit>
        <trans-unit id="01f92f2645932d2e7b72a1c8110cdcfbd8882f1a" translate="yes" xml:space="preserve">
          <source>If you are sorting &amp;lt;</source>
          <target state="translated">並べ替える場合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="004cad48c1c7e5cd3697d0259ff8f530252b1f42" translate="yes" xml:space="preserve">
          <source>If you are sorting &lt;var&gt;table-name-1&lt;/var&gt; for the purpose of preparing the table for use with a &lt;code&gt;SEARCH ALL&lt;/code&gt; statement (see &lt;a href=&quot;#SEARCH-ALL&quot;&gt;SEARCH ALL&lt;/a&gt;), care must be taken that the &lt;code&gt;KEY&lt;/code&gt; specifications on the &lt;code&gt;SORT&lt;/code&gt; agree with those in the table&amp;rsquo;s definition.</source>
          <target state="translated">あなたがソートされている場合 &lt;var&gt;table-name-1&lt;/var&gt; で使用するためのテーブル調製する目的のために &lt;code&gt;SEARCH ALL&lt;/code&gt; 文を（参照&lt;a href=&quot;#SEARCH-ALL&quot;&gt;SEARCH ALLを&lt;/a&gt;）、注意がように注意しなければならない &lt;code&gt;KEY&lt;/code&gt; の仕様 &lt;code&gt;SORT&lt;/code&gt; は、表の定義のものと一致しています。</target>
        </trans-unit>
        <trans-unit id="02aa6a4a695c82943ebf8b43c9d16d82122de6f1" translate="yes" xml:space="preserve">
          <source>If you are using Fixed Format Mode, the alphanumeric literal can be run right up to and including column 72. The literal may then be continued on the next line anywhere after column 11 by coding another quote or apostrophe (whichever was used to begin the literal originally). The continuation line must also have a hyphen (-)</source>
          <target state="translated">固定フォーマットモードを使用している場合、英数字リテラルは72列目まで実行することができます。その後、リテラルは、別の引用符またはアポストロフィ(リテラルの最初に使用されていたもの)をコード化することで、11列目以降の任意の場所で次の行に続けることができます。継続行にはハイフン(-)を入れなければなりません。</target>
        </trans-unit>
        <trans-unit id="c9f65d9b9ed555da4b63d4488fe138317d725d8d" translate="yes" xml:space="preserve">
          <source>If you attempt to store a negative number into a packed decimal field that has no &amp;lsquo;</source>
          <target state="translated">'がないパック10進数フィールドに負の数を格納しようとした場合</target>
        </trans-unit>
        <trans-unit id="67c575e7eebaede09fa7a3ba7a66b085e2b666ab" translate="yes" xml:space="preserve">
          <source>If you attempt to store a negative number into a packed decimal field that has no&lt;code&gt;S&lt;/code&gt;in its&lt;code&gt;PICTURE&lt;/code&gt; the absolute value of the negative number will actually be stored.</source>
          <target state="translated">あなたは何も持っていないパック10進数フィールドに負の数を保存しようとすると &lt;code&gt;S&lt;/code&gt; その中に &lt;code&gt;PICTURE&lt;/code&gt; を負の数の絶対値が実際に格納されます。</target>
        </trans-unit>
        <trans-unit id="33f09798c9350fe782168c79a484ebfce1dfd921" translate="yes" xml:space="preserve">
          <source>If you have used other versions of COBOL before (particularly mainframe implementations), you&amp;rsquo;ve possibly seen subroutine calls made passing a procedure name as an argument &amp;mdash; that is not possible in GnuCOBOL; instead, you need to know how to use this form of the&lt;code&gt;SET&lt;/code&gt;statement.</source>
          <target state="translated">以前に他のバージョンのCOBOL（特にメインフレームの実装）を使用したことがある場合、サブルーチン名の呼び出しがプロシージャ名を引数として渡したことを確認した可能性があります。これはGnuCOBOLでは不可能です。代わりに、この形式の &lt;code&gt;SET&lt;/code&gt; ステートメントの使用方法を知っている必要があります。</target>
        </trans-unit>
        <trans-unit id="3e0e21f3fa3e35e385e61b770f9f269497ad078b" translate="yes" xml:space="preserve">
          <source>If you like to hold a book in your hands, I strongly recommend</source>
          <target state="translated">本を手に取るのが好きな人には、強くお勧めしたいのが</target>
        </trans-unit>
        <trans-unit id="8575747ffb34e15317f4825a1a6d194e243908c5" translate="yes" xml:space="preserve">
          <source>If you like to hold a book in your hands, I strongly recommend &quot;Murach&amp;rsquo;s Structured COBOL&quot;, by Mike Murach, Anne Prince and Raul Menendez (2000) - ISBN 9781890774059. Mike Murach and his various writing partners have been writing outstanding COBOL textbooks for decades, and this text is no exception. It&amp;rsquo;s an excellent book for those familiar with the concepts of programming in other languages, but unfamiliar with COBOL.</source>
          <target state="translated">本を手にしたい場合は、Mike Murach、Anne Prince、Raul Menendez（2000）による「Murach's Structured COBOL」（ISBN 9781890774059）を強くお勧めします。MikeMurachと彼のさまざまなライティングパートナーは、数十年、そしてこのテキストは例外ではありません。これは、他の言語でのプログラミングの概念に精通しているが、COBOLに不慣れな人にとっては優れた本です。</target>
        </trans-unit>
        <trans-unit id="a983cec50cc8adb2cb72101e62421b49b40c3f8f" translate="yes" xml:space="preserve">
          <source>If you need to allocate space for a data item whose format is two letters followed by five digits followed by three letters, you could use the &amp;lt;</source>
          <target state="translated">2文字、5桁、3文字の形式のデータ項目にスペースを割り当てる必要がある場合は、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="8d26eb887b2bfd89c144e5b52c0cdeb9c7a63cdb" translate="yes" xml:space="preserve">
          <source>If you need to allocate space for a data item whose format is two letters followed by five digits followed by three letters, you could use the &lt;var&gt;picture-string&lt;/var&gt;&lt;code&gt;AA99999AAA&lt;/code&gt;, &lt;code&gt;A(2)9(5)A(3)&lt;/code&gt;&lt;code&gt;XXXXXXXXXX&lt;/code&gt; or &lt;code&gt;X(10)&lt;/code&gt;. There is absolutely no functional difference whatsoever between the four &amp;mdash; none of them provide any functionality the others do not. The first two probably make for better</source>
          <target state="translated">2文字、5桁、3文字の形式のデータ項目にスペースを割り当てる必要がある場合は、 &lt;var&gt;picture-string&lt;/var&gt; &lt;code&gt;AA99999AAA&lt;/code&gt; 、 &lt;code&gt;A(2)9(5)A(3)&lt;/code&gt; &lt;code&gt;XXXXXXXXXX&lt;/code&gt; 、または &lt;code&gt;X(10)&lt;/code&gt; 。4つの間に機能的な違いはまったくありません&amp;mdash;それらのどれも他が提供しない機能を提供しません。最初の2つはおそらくより良いものになります</target>
        </trans-unit>
        <trans-unit id="85dc896ccc0af03eabd5023a9189c0f764205518" translate="yes" xml:space="preserve">
          <source>If you need to apply &lt;code&gt;REPLACING&lt;/code&gt; initialization to multiple &lt;var&gt;category-name-2&lt;/var&gt; values, you may repeat the syntax after the reserved word &lt;code&gt;REPLACING&lt;/code&gt;, as necessary.</source>
          <target state="translated">&lt;code&gt;REPLACING&lt;/code&gt; 初期化を複数の &lt;var&gt;category-name-2&lt;/var&gt; 値に適用する必要がある場合は、必要に応じて、予約語 &lt;code&gt;REPLACING&lt;/code&gt; の後に構文を繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="6f07cc92bcdb1fb4966a29f8bc48cd7ec589d721" translate="yes" xml:space="preserve">
          <source>If you need to apply &lt;code&gt;VALUE&lt;/code&gt; initialization to multiple &lt;var&gt;category-name-1&lt;/var&gt; values, you will need to use multiple &lt;code&gt;INITIALIZE&lt;/code&gt; statements.</source>
          <target state="translated">&lt;code&gt;VALUE&lt;/code&gt; 初期化を複数の &lt;var&gt;category-name-1&lt;/var&gt; 値に適用する必要がある場合は、複数の &lt;code&gt;INITIALIZE&lt;/code&gt; ステートメントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3d7ab34ba2edb8344ca5cd05ed4f78d8ca295856" translate="yes" xml:space="preserve">
          <source>If you need to apply&lt;code&gt;REPLACING&lt;/code&gt;initialization to multiple &amp;lt;</source>
          <target state="translated">&lt;code&gt;REPLACING&lt;/code&gt; 初期化を複数に適用する必要がある場合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="0be77805ea73d60e3aa2532f09cd1417a0b5f725" translate="yes" xml:space="preserve">
          <source>If you need to apply&lt;code&gt;VALUE&lt;/code&gt;initialization to multiple &amp;lt;</source>
          <target state="translated">&lt;code&gt;VALUE&lt;/code&gt; 初期化を複数に適用する必要がある場合&amp;lt;</target>
        </trans-unit>
        <trans-unit id="faedf40171740f5c51b093163f9803ad34a888e7" translate="yes" xml:space="preserve">
          <source>If you need to qualify a reference to a table, do so by coding something like &lt;code&gt;&lt;var&gt;identifier-1&lt;/var&gt; OF &lt;var&gt;identifier-2&lt;/var&gt; ( &lt;var&gt;subscript(s)&lt;/var&gt; )&lt;/code&gt;.</source>
          <target state="translated">あなたは、テーブルへの参照を修飾する必要がある場合は、のようなものコーディングによってそう &lt;code&gt;&lt;var&gt;identifier-1&lt;/var&gt; OF &lt;var&gt;identifier-2&lt;/var&gt; ( &lt;var&gt;subscript(s)&lt;/var&gt; )&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09b277bb04315e13de2ea2c1d6215f972f449420" translate="yes" xml:space="preserve">
          <source>If you need to qualify a reference to a table, do so by coding something like&lt;code&gt;&amp;lt;&lt;i&gt;identifier-1&lt;/i&gt;&amp;gt; OF &amp;lt;&lt;i&gt;identifier-2&lt;/i&gt;&amp;gt; ( subscript(s) )&lt;/code&gt;</source>
          <target state="translated">テーブルへの参照を修飾する必要がある場合は、 &lt;code&gt;&amp;lt;&lt;i&gt;identifier-1&lt;/i&gt;&amp;gt; OF &amp;lt;&lt;i&gt;identifier-2&lt;/i&gt;&amp;gt; ( subscript(s) )&lt;/code&gt; &lt;i&gt;identifier-1&lt;/i&gt; &amp;gt; OF &amp;lt; &lt;i&gt;identifier-2&lt;/i&gt; &amp;gt;（subscript（s））のようにコーディングしてください。&lt;i&gt;&lt;/i&gt;&lt;i&gt;&lt;/i&gt;</target>
        </trans-unit>
        <trans-unit id="ea477a1b93e894e00c5029bde5c4700835a658bc" translate="yes" xml:space="preserve">
          <source>If you only need to use the computed occurrence number once, you might as well just use the computed occurrence number data item as a subscript. If, however, you will need to use a computed &quot;subscript&quot; many more times than once, the run-time overhead of converting that occurrence value to an index (via&lt;code&gt;SET Index&lt;/code&gt; will be worth the coding effort.</source>
          <target state="translated">計算された発生数を一度だけ使用する必要がある場合は、計算された発生数データ項目を添え字として使用することもできます。ただし、計算された「添え字」を複数回使用する必要がある場合は、その出現値をインデックスに変換するための実行時のオーバーヘッド（ &lt;code&gt;SET Index&lt;/code&gt; を介して）をコーディングする価値があります。</target>
        </trans-unit>
        <trans-unit id="08d6331d8b515c4ddcea5626d36be26117cd2759" translate="yes" xml:space="preserve">
          <source>If you only need to use the computed occurrence number once, you might as well just use the computed occurrence number data item as a subscript. If, however, you will need to use a computed &amp;ldquo;subscript&amp;rdquo; many more times than once, the run-time overhead of converting that occurrence value to an index (via &lt;code&gt;SET Index&lt;/code&gt;) will be worth the coding effort.</source>
          <target state="translated">計算されたオカレンス番号を1回だけ使用する必要がある場合は、計算されたオカレンス番号のデータ項目を添え字として使用することもできます。ただし、計算された「添え字」を複数回使用する必要がある場合は、その発生値を（ &lt;code&gt;SET Index&lt;/code&gt; を介して）インデックスに変換する実行時のオーバーヘッドは、コーディング作業の価値があります。</target>
        </trans-unit>
        <trans-unit id="2b11929fcfd27ebcc5881e51e66067da91bf2b68" translate="yes" xml:space="preserve">
          <source>If you specify &lt;code&gt;FINAL&lt;/code&gt;, it must be the first control break named in the &lt;code&gt;RD&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FINAL&lt;/code&gt; を指定する場合、それは &lt;code&gt;RD&lt;/code&gt; で指定された最初のコントロールブレークである必要があります。</target>
        </trans-unit>
        <trans-unit id="c7ef595b63c0ad5f2b42b214045d49f212ec5149" translate="yes" xml:space="preserve">
          <source>If you specify a specific filename in the sort/merge work file&amp;rsquo;s &lt;code&gt;SELECT&lt;/code&gt;, it will be ignored.</source>
          <target state="translated">ソート/マージ作業ファイルの &lt;code&gt;SELECT&lt;/code&gt; で特定のファイル名を指定した場合、そのファイル名は無視されます。</target>
        </trans-unit>
        <trans-unit id="1b1aec7f2d01b9337cb99ecf14cbd063323c6bfc" translate="yes" xml:space="preserve">
          <source>If you specify a specific filename in the sort/merge work file&amp;rsquo;s&lt;code&gt;SELECT&lt;/code&gt; it will be ignored.</source>
          <target state="translated">ソート/マージ作業ファイルの &lt;code&gt;SELECT&lt;/code&gt; で特定のファイル名を指定した場合、それは無視されます。</target>
        </trans-unit>
        <trans-unit id="db4b705d51633a3053f41836b85c013703781c0c" translate="yes" xml:space="preserve">
          <source>If you specify&lt;code&gt;FINAL&lt;/code&gt; it must be the first control break named in the&lt;code&gt;RD&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;FINAL&lt;/code&gt; を指定する場合は、 &lt;code&gt;RD&lt;/code&gt; で指定された最初のコントロールブレークである必要があります。</target>
        </trans-unit>
        <trans-unit id="ff6d082d36226e2e4f40a2e7e8119f64d1550bdf" translate="yes" xml:space="preserve">
          <source>If you want to squeeze every last bit of performance out of your GnuCOBOL programs, don&amp;rsquo;t forget to investigate the</source>
          <target state="translated">GnuCOBOLプログラムからパフォーマンスの最後のビットをすべて絞り出したい場合は、調査することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="bd75b97fc760ccc29226f53558113a860ab9c393" translate="yes" xml:space="preserve">
          <source>If you want to squeeze every last bit of performance out of your GnuCOBOL programs, don&amp;rsquo;t forget to investigate the&lt;code&gt;-O&lt;/code&gt;switch</source>
          <target state="translated">GnuCOBOLプログラムからパフォーマンスの最後のすべてのビットを絞りたい場合は、 &lt;code&gt;-O&lt;/code&gt; スイッチを調査することを忘れないでください。</target>
        </trans-unit>
        <trans-unit id="1395a21f9c2355a2d51c47b543c90015c04147c1" translate="yes" xml:space="preserve">
          <source>If you wanted to store the value 128 million into that field, you would do so as if the &amp;lsquo;</source>
          <target state="translated">そのフィールドに1億2800万の値を格納したい場合は、 '</target>
        </trans-unit>
        <trans-unit id="d6f238b944da72a8958154ef52736f8bf20193b7" translate="yes" xml:space="preserve">
          <source>If you wanted to store the value 128 million into that field, you would do so as if the&lt;code&gt;P&lt;/code&gt; were&lt;code&gt;9&lt;/code&gt;:</source>
          <target state="translated">1億2800万の値をそのフィールドに格納する場合は、 &lt;code&gt;P&lt;/code&gt; が &lt;code&gt;9&lt;/code&gt; であるかのように実行します。</target>
        </trans-unit>
        <trans-unit id="3a1e11453cfdbd4a0f6b18b6c27cb66cedc0741d" translate="yes" xml:space="preserve">
          <source>If you will be porting existing code over to GnuCOBOL, you&amp;rsquo;ll find it an accommodating facility capable of conforming to whatever language and coding standards that code is likely to use. If you are creating new GnuCOBOL programs, however, I would strongly counsel you to use the &lt;code&gt;END-&lt;var&gt;verb&lt;/var&gt;&lt;/code&gt; structures in those programs.</source>
          <target state="translated">既存のコードをGnuCOBOLに移植する場合は、コードが使用する可能性のある言語やコーディング標準に準拠できる対応機能を備えていることがわかります。ただし、新しいGnuCOBOLプログラムを作成する場合は、それらのプログラムで &lt;code&gt;END-&lt;var&gt;verb&lt;/var&gt;&lt;/code&gt; 構造を使用することを強くお勧めします。</target>
        </trans-unit>
        <trans-unit id="f960091ad57764e902ba6a62fa5a1b8ba304ce95" translate="yes" xml:space="preserve">
          <source>If you will be porting existing code over to GnuCOBOL, you&amp;rsquo;ll find it an accommodating facility capable of conforming to whatever language and coding standards that code is likely to use. If you are creating new GnuCOBOL programs, however, I would strongly counsel you to use the&lt;code&gt;END-verb&lt;/code&gt;structures in those programs.</source>
          <target state="translated">既存のコードをGnuCOBOLに移植する場合、そのコードが使用する可能性のあるあらゆる言語およびコーディング標準に準拠できる対応機能が見つかります。ただし、新しいGnuCOBOLプログラムを作成する場合は、それらのプログラムで &lt;code&gt;END-verb&lt;/code&gt; 構造を使用するよう強くアドバイスします。</target>
        </trans-unit>
        <trans-unit id="bc53cf603e35a32cb8513a9837d8949b255f4fa1" translate="yes" xml:space="preserve">
          <source>If your GnuCOBOL build uses the Berkeley Database (BDB) package, use this environment variable to specify the folder in which the lock management files to be associated with all non-SORT files opened by the program will be stored. &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;) files will also have their data file allocated in the folder pointed to by this environment variable, if it exists.. Having this variable defined will activate record locking features on the &lt;code&gt;READ&lt;/code&gt; statement (see &lt;a href=&quot;#READ&quot;&gt;READ&lt;/a&gt;), &lt;code&gt;REWRITE&lt;/code&gt; statement (see &lt;a href=&quot;#REWRITE&quot;&gt;REWRITE&lt;/a&gt;) and &lt;code&gt;WRITE&lt;/code&gt; statement (see &lt;a href=&quot;#WRITE&quot;&gt;WRITE&lt;/a&gt;). Even with DB_HOME, locking will not work with &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIAL&lt;/a&gt;), &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; (see &lt;a href=&quot;#ORGANIZATION-LINE-SEQUENTIAL&quot;&gt;ORGANIZATION LINE SEQUENTIAL&lt;/a&gt;) or ORGANIZATION RELATIVE files with GnuCOBOL builds created for Windows/MinGW. &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; locks will work with Windows/MinGW + BDB and all locks will work for all file organizations with UNIX GnuCOBOL builds.</source>
          <target state="translated">GnuCOBOLビルドでBerkeleyDatabase（BDB）パッケージを使用する場合は、この環境変数を使用して、プログラムによって開かれたすべての非SORTファイルに関連付けられるロック管理ファイルが保存されるフォルダーを指定します。 &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXEDを&lt;/a&gt;）ファイルも、それが存在する場合は、フォルダに割り当てられた彼らのデータファイルが定義され、この変数は、上のレコードロック機能が有効になります持って...、この環境変数によって指さなければならない &lt;code&gt;READ&lt;/code&gt; 文の（参照&lt;a href=&quot;#READ&quot;&gt;READを&lt;/a&gt;）、 &lt;code&gt;REWRITE&lt;/code&gt; の声明（参照&lt;a href=&quot;#REWRITE&quot;&gt;REWRITEを&lt;/a&gt;）と &lt;code&gt;WRITE&lt;/code&gt; 文は（参照&lt;a href=&quot;#WRITE&quot;&gt;WRITEを&lt;/a&gt;）。 DB_HOMEを使用しても、ロックは機能しません &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIALを&lt;/a&gt;）、 &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-LINE-SEQUENTIAL&quot;&gt;ORGANIZATION LINE SEQUENTIALを&lt;/a&gt;）や組織GnuCOBOL相対ファイルは、Windows / MinGWのために作成構築します。 &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; ロックはWindows / MinGW + BDBで機能し、すべてのロックはUNIXGnuCOBOLビルドを使用するすべてのファイル組織で機能します。</target>
        </trans-unit>
        <trans-unit id="84f76abe3e8dfd99557f1d9c28b5a29519b7cdd8" translate="yes" xml:space="preserve">
          <source>If your GnuCOBOL build uses the Berkeley Database (BDB) package, use this environment variable to specify the folder in which the lock management files to be associated with all non-SORT files opened by the program will be stored.&lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt;(see &lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXED&lt;/a&gt;) files will also have their data file allocated in the folder pointed to by this environment variable, if it exists.. Having this variable defined will activate record locking features on the&lt;code&gt;READ&lt;/code&gt;statement (see &lt;a href=&quot;#READ&quot;&gt;READ&lt;/a&gt;),&lt;code&gt;REWRITE&lt;/code&gt;statement (see &lt;a href=&quot;#REWRITE&quot;&gt;REWRITE&lt;/a&gt;) and&lt;code&gt;WRITE&lt;/code&gt;statement (see &lt;a href=&quot;#WRITE&quot;&gt;WRITE&lt;/a&gt;). Even with DB_HOME, locking will not work with&lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt;(see &lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIAL&lt;/a&gt;),&lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt;(see &lt;a href=&quot;#ORGANIZATION-LINE-SEQUENTIAL&quot;&gt;ORGANIZATION LINE SEQUENTIAL&lt;/a&gt;) or ORGANIZATION RELATIVE files with GnuCOBOL builds created for Windows/MinGW.&lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt;locks will work with Windows/MinGW + BDB and all locks will work for all file organizations with UNIX GnuCOBOL builds.</source>
          <target state="translated">GnuCOBOLビルドがBerkeley Database（BDB）パッケージを使用する場合、この環境変数を使用して、プログラムによって開かれるすべての非SORTファイルに関連付けられるロック管理ファイルが格納されるフォルダーを指定します。 &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-INDEXED&quot;&gt;ORGANIZATION INDEXEDを&lt;/a&gt;）ファイルも、それが存在する場合は、フォルダに割り当てられた彼らのデータファイルが定義され、この変数は、上のレコードロック機能が有効になります持って...、この環境変数によって指さなければならない &lt;code&gt;READ&lt;/code&gt; 文の（参照&lt;a href=&quot;#READ&quot;&gt;READを&lt;/a&gt;）、 &lt;code&gt;REWRITE&lt;/code&gt; の声明（参照&lt;a href=&quot;#REWRITE&quot;&gt;REWRITEを&lt;/a&gt;）と &lt;code&gt;WRITE&lt;/code&gt; 文は（参照&lt;a href=&quot;#WRITE&quot;&gt;WRITEを&lt;/a&gt;）。 DB_HOMEを使用しても、 &lt;code&gt;ORGANIZATION SEQUENTIAL&lt;/code&gt; ではロックは機能しません（参照&lt;a href=&quot;#ORGANIZATION-SEQUENTIAL&quot;&gt;ORGANIZATION SEQUENTIALを&lt;/a&gt;、） &lt;code&gt;ORGANIZATION LINE SEQUENTIAL&lt;/code&gt; （参照&lt;a href=&quot;#ORGANIZATION-LINE-SEQUENTIAL&quot;&gt;ORGANIZATION LINE SEQUENTIALを&lt;/a&gt; GnuCOBOLで）またはORGANIZATION RELATIVEファイルは、Windows / MinGWのために作成構築します。 &lt;code&gt;ORGANIZATION INDEXED&lt;/code&gt; ロックはWindows / MinGW + BDBで機能し、すべてのロックはUNIX GnuCOBOLビルドですべてのファイル組織で機能します。</target>
        </trans-unit>
        <trans-unit id="5d5c76b0afd98975a32ec5cfb6a7e9651011522c" translate="yes" xml:space="preserve">
          <source>If your program is using Free Format Mode, there&amp;rsquo;s less need to continue long alphanumeric literals because statements may be as long as 255 characters.</source>
          <target state="translated">プログラムがフリーフォーマットモードを使用している場合、ステートメントは最大255文字になる可能性があるため、長い英数字リテラルを継続する必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="95fac7041303838d18e876497588b4e3cf6b6006" translate="yes" xml:space="preserve">
          <source>If, however, the GnuCOBOL compiler was built for a Unix, OSX or Linux environment, or was built for a Windows environment utilizing either the Cygwin or MinGW Unix emulators, use a colon character (&amp;lsquo;</source>
          <target state="translated">ただし、GnuCOBOLコンパイラがUnix、OSX、またはLinux環境用に構築されている場合、またはCygwinまたはMinGW Unixエミュレータを利用するWindows環境用に構築されている場合は、コロン文字（ '</target>
        </trans-unit>
        <trans-unit id="9ec069692353086fbfea33bd5148cbb40a61d28b" translate="yes" xml:space="preserve">
          <source>If, however, the GnuCOBOL compiler was built for a Unix, OSX or Linux environment, or was built for a Windows environment utilizing either the Cygwin or MinGW Unix emulators, use a colon character (:) as the delimiter.</source>
          <target state="translated">しかし、GnuCOBOLコンパイラがUnix、OSX、Linux環境用に作られている場合、またはCygwinまたはMinGW Unixエミュレータを使用しているWindows環境用に作られている場合は、区切り文字としてコロン(:)を使用してください。</target>
        </trans-unit>
        <trans-unit id="c5c01c32e00c545ff3bdc88e7beddc787c903e01" translate="yes" xml:space="preserve">
          <source>If, however, you want to reset the &lt;code&gt;SUM&lt;/code&gt; counter only when the control footing for a control break higher in the control hierarchy is presented, specify that higher control break on the &lt;code&gt;RESET&lt;/code&gt; option.</source>
          <target state="translated">ただし、コントロール階層の上位にあるコントロールブレークのコントロールフーチングが表示されている場合にのみ &lt;code&gt;SUM&lt;/code&gt; カウンターをリセットする場合は、 &lt;code&gt;RESET&lt;/code&gt; オプションで上位のコントロールブレークを指定します。</target>
        </trans-unit>
        <trans-unit id="732d00d8a979e2d6acfa93077091ec5aa45575e1" translate="yes" xml:space="preserve">
          <source>If, however, you want to reset the&lt;code&gt;SUM&lt;/code&gt;counter only when the control footing for a control break higher in the control hierarchy is presented, specify that higher control break on the&lt;code&gt;RESET&lt;/code&gt;option.</source>
          <target state="translated">ただし、コントロール階層の上位のコントロールブレークのコントロールフーティングが表示されている場合にのみ &lt;code&gt;SUM&lt;/code&gt; カウンターをリセットする場合は、 &lt;code&gt;RESET&lt;/code&gt; オプションでその上位のコントロールブレークを指定します。</target>
        </trans-unit>
        <trans-unit id="5806c2a3b18d52c426a775c9f93d63ac19b6bb13" translate="yes" xml:space="preserve">
          <source>If, on the other hand, the compiler</source>
          <target state="translated">一方、コンパイラが</target>
        </trans-unit>
        <trans-unit id="2cd8cc804f2a5ff93a10ce1b74fdd3576f5a7e3f" translate="yes" xml:space="preserve">
          <source>If, on the other hand, the compiler &quot;config&quot; file you used to compile the program specified &quot;mf&quot; as the &quot;assign-clause&quot; value, then the File Locator String will be interpreted according to according to IBM COBOL rules &amp;mdash; namely, the File Locator String is expected to be of the form &quot;S-xxx&quot; or &quot;AS-xxx&quot;, in which case the &quot;xxx&quot; will be treated as the base of an environment variable name. If there is no &quot;-&quot; character in the File Locator String then the entire File Locator String will serve as the base of an environment variable name.</source>
          <target state="translated">一方、プログラムのコンパイルに使用したコンパイラの「config」ファイルが「mf」を「assign-clause」値として指定した場合、ファイルロケータ文字列はIBM COBOLルールに従って解釈されます。つまり、ファイルロケータ文字列は「S-xxx」または「AS-xxx」の形式であることが想定されています。この場合、「xxx」は環境変数名のベースとして扱われます。ファイルロケータ文字列に「-」文字がない場合、ファイルロケータ文字列全体が環境変数名のベースとして機能します。</target>
        </trans-unit>
        <trans-unit id="14a1e778d3d526022a292de2dd1ee46c48882f7a" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;AFTER ADVANCING&lt;/code&gt;</source>
          <target state="translated">もし &lt;code&gt;AFTER ADVANCING&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2484c7b62fe9d88e48bcea28b9bbba49a4a0abff" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;FIRST&lt;/code&gt;was specified, the logical record pointer will point to the first record in the file.</source>
          <target state="translated">場合 &lt;code&gt;FIRST&lt;/code&gt; が指定された、論理レコードポインタはファイルの最初のレコードを指しています。</target>
        </trans-unit>
        <trans-unit id="7863a8759644caaed13a6998607dcd0f2e23acf3" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;KEY&lt;/code&gt;was specified or implied, the logical record pointer will be specified to the</source>
          <target state="translated">&lt;code&gt;KEY&lt;/code&gt; が指定または暗黙指定されている場合、論理レコードポインターは</target>
        </trans-unit>
        <trans-unit id="1552ccf0c116c7d239331a720f9d74cec693c257" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;LAST&lt;/code&gt;was specified, the logical record pointer will point to the last record in the file.</source>
          <target state="translated">場合 &lt;code&gt;LAST&lt;/code&gt; が指定された、論理レコードポインタはファイルの最後のレコードを指します。</target>
        </trans-unit>
        <trans-unit id="8278b8c8384858282c9b205d0ba2082757d20698" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;PICTURE&lt;/code&gt;9 and contains&lt;code&gt;S&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;PICTURE&lt;/code&gt; 9に &lt;code&gt;S&lt;/code&gt; が含まれている場合</target>
        </trans-unit>
        <trans-unit id="8061e9cae2be0636e69237bf17be3f7098f0542a" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;PICTURE&lt;/code&gt;contains&lt;code&gt;S&lt;/code&gt;</source>
          <target state="translated">If&lt;code&gt;PICTURE&lt;/code&gt;contains&lt;code&gt;S&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9cd6edca65a7476c700085fccd1713df6568c8bd" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;n&lt;/code&gt;represents the level number of the object, then no other data items with a level number numerically less than&lt;code&gt;n&lt;/code&gt;may be defined between the subject and object data items.</source>
          <target state="translated">&lt;code&gt;n&lt;/code&gt; がオブジェクトのレベル番号を表す場合、サブジェクトデータオブジェクトとオブジェクトデータアイテムの間に、レベル番号が &lt;code&gt;n&lt;/code&gt; 未満の他のデータアイテムを定義することはできません。</target>
        </trans-unit>
        <trans-unit id="d3c3a4ef34b214c7901c86d04f87249a39615cfd" translate="yes" xml:space="preserve">
          <source>If&lt;code&gt;n&lt;/code&gt;represents the level number of the object, then no other data items with level number&lt;code&gt;n&lt;/code&gt;may be defined between the subject and object data items unless they too are&lt;code&gt;REDEFINES&lt;/code&gt;of the subject.</source>
          <target state="translated">もし &lt;code&gt;n&lt;/code&gt; 、オブジェクトのレベル番号を表していないレベルの数と、次に他のデータ項目 &lt;code&gt;n&lt;/code&gt; 彼らはあまりにもない限り被写体とオブジェクトデータ項目との間に画定されてもよい &lt;code&gt;REDEFINES&lt;/code&gt; 被験者の。</target>
        </trans-unit>
        <trans-unit id="44bac4e7eb3f9b6dfa360542d18651d867fe0f3a" translate="yes" xml:space="preserve">
          <source>Imagine my surprise, however, when I discovered that the use of</source>
          <target state="translated">しかし、私が発見したときの驚きを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="41e3512adad8c7a49c2bc5818c26857faf073355" translate="yes" xml:space="preserve">
          <source>Imagine my surprise, however, when I discovered that the use of&lt;code&gt;-fnotrunc&lt;/code&gt;switch also made a difference:</source>
          <target state="translated">しかし、 &lt;code&gt;-fnotrunc&lt;/code&gt; スイッチの使用も違いを発見したときの驚きを想像してみてください。</target>
        </trans-unit>
        <trans-unit id="ba2d2155230191737321736ab1c421252a9d474f" translate="yes" xml:space="preserve">
          <source>Imperative Statement</source>
          <target state="translated">強制的な声明</target>
        </trans-unit>
        <trans-unit id="093f2fea111647ab73586789136bb3d0d4a0950c" translate="yes" xml:space="preserve">
          <source>Implementation-defined accept condition</source>
          <target state="translated">実装で定義された受け入れ条件</target>
        </trans-unit>
        <trans-unit id="3d29bb9dbd4be0c211a42d389e2c3292fd50b3aa" translate="yes" xml:space="preserve">
          <source>Implementation-defined display condition</source>
          <target state="translated">実装で定義された表示条件</target>
        </trans-unit>
        <trans-unit id="b6644f9a8f19bd69003afc9a5c99d078e33e6700" translate="yes" xml:space="preserve">
          <source>In Micro Focus COBOL, calling this subroutine flushes any as-yet unwritten buffers for the (output) file whose file-handle is specified as the argument to disk.</source>
          <target state="translated">Micro Focus COBOLでは、このサブルーチンを呼び出すと、ディスクへの引数としてファイルハンドルが指定されている(出力)ファイルに対して、まだ書き込まれていないバッファをフラッシュする。</target>
        </trans-unit>
        <trans-unit id="9a3d8039ba479addeceb49cf9771fd1febf412b7" translate="yes" xml:space="preserve">
          <source>In addition there is the &lt;a href=&quot;https://gnucobol.sourceforge.io/faq/index.html&quot;&gt;GnuCOBOL FAQ&lt;/a&gt; &amp;mdash; which has now exceeded 1,400 pages &amp;mdash; available as HTML or a downloadable</source>
          <target state="translated">さらに、HTMLまたはダウンロード可能な&lt;a href=&quot;https://gnucobol.sourceforge.io/faq/index.html&quot;&gt;GnuCOBOL FAQ（&lt;/a&gt;現在1,400ページを超えています）があります。</target>
        </trans-unit>
        <trans-unit id="d9ef63e2e17e3ccc69daafe9826c9b7b1b6876dd" translate="yes" xml:space="preserve">
          <source>In addition, you can add and/or remove reserved words by adding one of these options to cobc to add</source>
          <target state="translated">さらに、これらのオプションのいずれかを cobc に追加することで、予約語を追加および/または削除することができます。</target>
        </trans-unit>
        <trans-unit id="a1823875f108e53987aa44c7484ef1eb0340b856" translate="yes" xml:space="preserve">
          <source>In an attempt to correct the problem, we could qualify the reference to &lt;code&gt;CITY&lt;/code&gt; as &lt;code&gt;MOVE 'Philadelphia' TO CITY OF MAILING-ADDRESS&lt;/code&gt;.</source>
          <target state="translated">この問題を修正するために、 &lt;code&gt;CITY&lt;/code&gt; への参照を &lt;code&gt;MOVE 'Philadelphia' TO CITY OF MAILING-ADDRESS&lt;/code&gt; として認定することができます。</target>
        </trans-unit>
        <trans-unit id="3d3ffee367a47df22f0329d2161f7179c7140f49" translate="yes" xml:space="preserve">
          <source>In an attempt to correct the problem, we could qualify the reference to CITY as&lt;code&gt;MOVE 'Philadelphia' TO CITY OF MAILING-ADDRESS&lt;/code&gt;</source>
          <target state="translated">問題を修正するために、CITYへの参照を &lt;code&gt;MOVE 'Philadelphia' TO CITY OF MAILING-ADDRESS&lt;/code&gt; として修飾することができます。</target>
        </trans-unit>
        <trans-unit id="1132a1566c2ed19e4f36c07a65dd3752e2bf4c83" translate="yes" xml:space="preserve">
          <source>In complex expressions composed of multiple operators and operands, a precedence of operation applies whereby those operations having a higher precedence are computed first before operations with a lower precedence.</source>
          <target state="translated">複数の演算子とオペランドで構成される複雑な式では、より高い優先順位を持つ演算が、より低い優先順位を持つ演算よりも先に計算されるように、演算の優先順位が適用されます。</target>
        </trans-unit>
        <trans-unit id="79c5dda42b4edec899decd22cc8013757597eb29" translate="yes" xml:space="preserve">
          <source>In either instance, program</source>
          <target state="translated">どちらのインスタンスでも、プログラム</target>
        </trans-unit>
        <trans-unit id="67cd2a991339c0db61eccf443f46cb731b97b13e" translate="yes" xml:space="preserve">
          <source>In either instance, program &quot;A&quot; is referred to as the &amp;rsquo;</source>
          <target state="translated">どちらの場合も、プログラム「A」は「</target>
        </trans-unit>
        <trans-unit id="b68b4bcf151b57e71e554fe7952a0e73619a414f" translate="yes" xml:space="preserve">
          <source>In general, each picture symbol represents either a single character in storage or a single decimal digit. There are a few exceptions, and they will be discussed as needed.</source>
          <target state="translated">一般的に、各ピクチャシンボルは、保存されている1文字または10進数の1桁を表します。いくつかの例外があり、必要に応じて説明します。</target>
        </trans-unit>
        <trans-unit id="2411df7c12420101004e143cb3943a4101a56bf7" translate="yes" xml:space="preserve">
          <source>In general, table references such as example #1 (constant subscript) generate the smallest, simplest and fastest object code while table references such as example #2 (numeric data item subscript) generate the largest, most-complicated and slowest object code.</source>
          <target state="translated">一般的に、例1(定数添字)のようなテーブル参照は、最小で最も単純かつ最速のオブジェクト・コードを生成し、例2(数値データ項目添字)のようなテーブル参照は、最大で最も複雑かつ最速のオブジェクト・コードを生成します。</target>
        </trans-unit>
        <trans-unit id="9f3d74011ccc810b1770ab4e3dfbc7f8f1fdf305" translate="yes" xml:space="preserve">
          <source>In highest to lowest order of precedence, here is a discussion of each category of operation:</source>
          <target state="translated">ここでは、優先順位の高い順から低い順に、それぞれの操作カテゴリについて説明します。</target>
        </trans-unit>
        <trans-unit id="37e03fd035bc729f5e1bac261783ab6dc96b9a08" translate="yes" xml:space="preserve">
          <source>In order for &amp;lt;</source>
          <target state="translated">のために&amp;lt;</target>
        </trans-unit>
        <trans-unit id="8be023fea55c01ac8e26c286b3ef96dd0c3a62af" translate="yes" xml:space="preserve">
          <source>In order for &lt;code&gt;AND&lt;/code&gt; to yield a value of &lt;code&gt;TRUE&lt;/code&gt;, both conditions must have a value of &lt;code&gt;TRUE&lt;/code&gt;. In all other circumstances, &lt;code&gt;AND&lt;/code&gt; produces a &lt;code&gt;FALSE&lt;/code&gt; value.</source>
          <target state="translated">ためには &lt;code&gt;AND&lt;/code&gt; の値が得 &lt;code&gt;TRUE&lt;/code&gt; を、両方の条件がの価値持っている必要があります &lt;code&gt;TRUE&lt;/code&gt; を。他のすべての状況では、 &lt;code&gt;AND&lt;/code&gt; は &lt;code&gt;FALSE&lt;/code&gt; 値を生成します。</target>
        </trans-unit>
        <trans-unit id="403d7a15fce45769c754a15681e968a4fbdf42a3" translate="yes" xml:space="preserve">
          <source>In order for &lt;var&gt;data-item-1&lt;/var&gt;, defined subordinate to group item &lt;var&gt;group-item-1&lt;/var&gt; to be a</source>
          <target state="translated">ために &lt;var&gt;data-item-1&lt;/var&gt; 、グループ項目に従属定義された &lt;var&gt;group-item-1&lt;/var&gt; であることが</target>
        </trans-unit>
        <trans-unit id="6bb3bbadc2d27138c4c9dae5d396fb6f7ddc8694" translate="yes" xml:space="preserve">
          <source>In order for a &amp;lt;</source>
          <target state="translated">&amp;lt;</target>
        </trans-unit>
        <trans-unit id="696cb05cea8df84db487d490488180e06e42f98d" translate="yes" xml:space="preserve">
          <source>In order for a &lt;var&gt;Selection-Subject&lt;/var&gt; to match the corresponding &lt;var&gt;Selection-Object&lt;/var&gt; on a &lt;code&gt;WHEN&lt;/code&gt; clause, at least one of the following must be true:</source>
          <target state="translated">ためには &lt;var&gt;Selection-Subject&lt;/var&gt; 対応と一致するように &lt;var&gt;Selection-Object&lt;/var&gt; の &lt;code&gt;WHEN&lt;/code&gt; 句を、次のうち少なくとも一つを満たしている必要があります</target>
        </trans-unit>
        <trans-unit id="36616f50c54eeaba783ad05be353c37e7580b497" translate="yes" xml:space="preserve">
          <source>In order for this clause to take effect at execution time, the user must move the cursor into the field having this clause in its definition.</source>
          <target state="translated">この句が実行時に有効になるためには、ユーザはこの句の定義にあるフィールドにカーソルを移動させなければならない。</target>
        </trans-unit>
        <trans-unit id="444f270a7cbd0c09971c70be690ab851095b1a67" translate="yes" xml:space="preserve">
          <source>In order for this statement to be functional, tracing code must have been generated into the compiled program using either the</source>
          <target state="translated">このステートメントが機能するためには、トレースコードをコンパイルされたプログラムに</target>
        </trans-unit>
        <trans-unit id="d4cc191768c1993e9df309f3f21d935b4723ece5" translate="yes" xml:space="preserve">
          <source>In order for this statement to be functional, tracing code must have been generated into the compiled program using either the&lt;code&gt;-ftrace&lt;/code&gt;switch</source>
          <target state="translated">このステートメントが機能するためには、トレースコードが &lt;code&gt;-ftrace&lt;/code&gt; スイッチを使用してコンパイル済みプログラムに生成されている必要があります。</target>
        </trans-unit>
        <trans-unit id="d5716d69487d7213f5a154886aec1d579f1359df" translate="yes" xml:space="preserve">
          <source>In order for&lt;code&gt;AND&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;AND&lt;/code&gt; のために</target>
        </trans-unit>
        <trans-unit id="55a2f8f43b118a2097c61e0a121129644cb22e23" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;ldquo;curses&amp;rdquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;ldquo;PDCurses&amp;rdquo; package (used for native Windows or MinGW builds) does not support &lt;code&gt;EMPTY-CHECK&lt;/code&gt;.</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装が構築された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;EMPTY-CHECK&lt;/code&gt; をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="10f811fb445b449e40e131320d635a7695478fd5" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;ldquo;curses&amp;rdquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;ldquo;PDCurses&amp;rdquo; package (used for native Windows or MinGW builds) does not support &lt;code&gt;FULL&lt;/code&gt;.</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装が構築された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;FULL&lt;/code&gt; をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="ee0e64cc488517a5d97ddaf5487ad3ecb48a7a2a" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;ldquo;curses&amp;rdquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;ldquo;PDCurses&amp;rdquo; package (used for native Windows or MinGW builds) does not support &lt;code&gt;LENGTH-CHECK&lt;/code&gt;.</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装が構築された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;LENGTH-CHECK&lt;/code&gt; をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="fa94c33bd182287b891147b289c4b02751b3b24e" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;ldquo;curses&amp;rdquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;ldquo;PDCurses&amp;rdquo; package (used for native Windows or MinGW builds) does not support &lt;code&gt;REQUIRED&lt;/code&gt;.</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装が構築された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;REQUIRED&lt;/code&gt; をサポートしていません。</target>
        </trans-unit>
        <trans-unit id="12840b41d70472b409489727335424ef0070e853" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;rsquo;curses&amp;rsquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;rsquo;PDCurses&amp;rsquo; package (used for native Windows or MinGW builds) does not support&lt;code&gt;EMPTY-CHECK&lt;/code&gt;</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装の構築に使用された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;EMPTY-CHECK&lt;/code&gt; をサポートしていません</target>
        </trans-unit>
        <trans-unit id="17d285867c49f9dd90eb1f27cf9c7a60d1e38df8" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;rsquo;curses&amp;rsquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;rsquo;PDCurses&amp;rsquo; package (used for native Windows or MinGW builds) does not support&lt;code&gt;FULL&lt;/code&gt;</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装の構築に使用された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;FULL&lt;/code&gt; をサポートしていません</target>
        </trans-unit>
        <trans-unit id="0a81aca05eb7b3e3ebeefcb93bfd42b8a77e381a" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;rsquo;curses&amp;rsquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;rsquo;PDCurses&amp;rsquo; package (used for native Windows or MinGW builds) does not support&lt;code&gt;LENGTH-CHECK&lt;/code&gt;</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装の構築に使用された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;LENGTH-CHECK&lt;/code&gt; をサポートしていません</target>
        </trans-unit>
        <trans-unit id="de32275ede835ac63170073ab2d665b3951078da" translate="yes" xml:space="preserve">
          <source>In order to be functional, this attribute must be supported by the underlying &amp;rsquo;curses&amp;rsquo; package your GnuCOBOL implementation was built with. As of this time, the &amp;rsquo;PDCurses&amp;rsquo; package (used for native Windows or MinGW builds) does not support&lt;code&gt;REQUIRED&lt;/code&gt;</source>
          <target state="translated">機能するためには、この属性は、GnuCOBOL実装の構築に使用された基礎となる「curses」パッケージによってサポートされている必要があります。現時点では、「PDCurses」パッケージ（ネイティブWindowsまたはMinGWビルドに使用）は &lt;code&gt;REQUIRED&lt;/code&gt; サポートしていません</target>
        </trans-unit>
        <trans-unit id="8ea48fcaef90024e13873585a7560dd9b545d9d4" translate="yes" xml:space="preserve">
          <source>In order to take effect, the user must first move the cursor into the field having this clause in its definition.</source>
          <target state="translated">有効にするためには、ユーザーはまず、定義にこの句があるフィールドにカーソルを移動しなければなりません。</target>
        </trans-unit>
        <trans-unit id="6329aaa46fe1739509d0184063f2f41cb7ae1982" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; paragraph, an external switch name can be associated with one or more condition names. These condition names may then be used to test the ON/OFF status of the external switch.</source>
          <target state="translated">では &lt;code&gt;SPECIAL-NAMES&lt;/code&gt; 段落、外部スイッチ名は、一つ以上の条件名に関連付けることができます。これらの条件名を使用して、外部スイッチのオン/オフステータスをテストできます。</target>
        </trans-unit>
        <trans-unit id="cc57fee8f92052111c736b00a5242c4a85a7c964" translate="yes" xml:space="preserve">
          <source>In the above examples, a comma is used as a separator character between the two subscript values; semicolons (&lt;code&gt;;&lt;/code&gt;) are also valid subscript separator characters, as are spaces! The use of a comma or semicolon separator in such a situation is technically optional, but by convention most COBOL programmers use one or the other. The use of no separator character (other than a space) is not recommended, even though it is syntactically correct, as this practice can lead to programmer-unfriendly code. It isn&amp;rsquo;t too difficult to read and understand &lt;code&gt;GRID-CHARACTER(2 3)&lt;/code&gt;, but it&amp;rsquo;s another story entirely when trying to comprehend &lt;code&gt;GRID-CHARACTER(I + 1 J / 3)&lt;/code&gt; (instead of &lt;code&gt;GRID-CHARACTER(I + 1, J / 3)&lt;/code&gt;). The compiler accepts it, but too much of this would make</source>
          <target state="translated">上記の例では、2つの添え字値の間の区切り文字としてコンマが使用されています。セミコロン（ &lt;code&gt;;&lt;/code&gt; ）も、スペースと同様に有効な添え字区切り文字です。このような状況でのコンマまたはセミコロン区切り文字の使用は技術的にはオプションですが、慣例により、ほとんどのCOBOLプログラマーはどちらか一方を使用します。構文的に正しい場合でも、区切り文字（スペース以外）を使用しないことはお勧めしません。これを行うと、プログラマーにとって使いにくいコードになる可能性があるためです。 &lt;code&gt;GRID-CHARACTER(2 3)&lt;/code&gt; を読んで理解するのはそれほど難しいことではありませんが、 &lt;code&gt;GRID-CHARACTER(I + 1, J / 3)&lt;/code&gt; 代わりにGRID-CHARACTER（I + 1 &lt;code&gt;GRID-CHARACTER(I + 1 J / 3)&lt;/code&gt; を理解しようとするとまったく別の話になります/ 3））。コンパイラはそれを受け入れますが、これが多すぎると</target>
        </trans-unit>
        <trans-unit id="c1ff1f707da403375eb5aac3df8097ce50066a1d" translate="yes" xml:space="preserve">
          <source>In the above examples, a comma is used as a separator character between the two subscript values; semicolons &lt;code&gt;;&lt;/code&gt; are also valid subscript separator characters, as are spaces! The use of a comma or semicolon separator in such a situation is technically optional, but by convention most COBOL programmers use one or the other. The use of no separator character (other than a space) is not recommended, even though it is syntactically correct, as this practice can lead to programmer-unfriendly code. It isn&amp;rsquo;t too difficult to read and understand&lt;code&gt;GRID-CHARACTER(2 3)&lt;/code&gt; but it&amp;rsquo;s another story entirely when trying to comprehend&lt;code&gt;GRID-CHARACTER(I + 1 J / 3)&lt;/code&gt;(instead of&lt;code&gt;GRID-CHARACTER(I + 1, J / 3)&lt;/code&gt;. The compiler accepts it, but too much of this would make</source>
          <target state="translated">上記の例では、2つの添え字値の間の区切り文字としてコンマが使用されています。セミコロン &lt;code&gt;;&lt;/code&gt; スペースと同様に、有効な添え字区切り文字でもあります。このような状況でのコンマまたはセミコロンの区切り文字の使用は技術的にオプションですが、慣例により、ほとんどのCOBOLプログラマーはどちらか一方を使用します。区切り文字（スペース以外）を使用しないことは、構文的に正しいとしてもお勧めできません。これを行うと、プログラマーにとって扱いにくいコードが作成される可能性があるためです。読んで理解することはそれほど難しくはない &lt;code&gt;GRID-CHARACTER(2 3)&lt;/code&gt; が、理解をしようとしたとき、それは完全に別の話だ &lt;code&gt;GRID-CHARACTER(I + 1 J / 3)&lt;/code&gt; の代わりに（ &lt;code&gt;GRID-CHARACTER(I + 1, J / 3)&lt;/code&gt; 。コンパイラはそれを受け入れますが、これが多すぎると、</target>
        </trans-unit>
        <trans-unit id="52f55f41b9c4760d3c377c604dc4758316a39ba3" translate="yes" xml:space="preserve">
          <source>In the absence of the  &lt;code&gt;OVERRIDE&lt;/code&gt; option, &lt;var&gt;cdf-variable-1&lt;/var&gt; must not yet have been defined. When the &lt;code&gt;OVERRIDE&lt;/code&gt; option is specified, &lt;var&gt;cdf-variable-1&lt;/var&gt; will be created with the specified value, if it had not yet been defined. If it had already been defined, it will be redefined with the new value.</source>
          <target state="translated">&lt;code&gt;OVERRIDE&lt;/code&gt; オプションがない 場合、 &lt;var&gt;cdf-variable-1&lt;/var&gt; はまだ定義されていないはずです。とき &lt;code&gt;OVERRIDE&lt;/code&gt; のオプションが指定され、 &lt;var&gt;cdf-variable-1&lt;/var&gt; それがまだ定義されていない場合は、指定された値を使用して作成されます。すでに定義されている場合は、新しい値で再定義されます。</target>
        </trans-unit>
        <trans-unit id="ab0a8c97ecdd65110e9781dbe9e9bcdabaa33882" translate="yes" xml:space="preserve">
          <source>In the absence of the&lt;code&gt;OVERRIDE&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;OVERRIDE&lt;/code&gt; がない場合</target>
        </trans-unit>
        <trans-unit id="bfc5f4c3999bc465f3a7a57164398621856b4683" translate="yes" xml:space="preserve">
          <source>In the case of the former, the &lt;code&gt;USING&lt;/code&gt; clause on the procedure division header should describe the argument via the  &lt;code&gt;BY REFERENCE&lt;/code&gt; clause &amp;mdash; in the latter case, a  &lt;code&gt;BY VALUE&lt;/code&gt; specification should be coded. This allows the code generated by the compiler to properly reference the subprogram arguments at run-time.</source>
          <target state="translated">前者の場合、プロシージャ分割ヘッダーの &lt;code&gt;USING&lt;/code&gt; 句は、 &lt;code&gt;BY REFERENCE&lt;/code&gt; 句を介して引数を記述する 必要があります。後者の場合、 &lt;code&gt;BY VALUE&lt;/code&gt; 仕様をコーディングする必要があります。これにより、コンパイラによって生成されたコードは、実行時にサブプログラムの引数を適切に参照できます。</target>
        </trans-unit>
        <trans-unit id="be9ad81756c2c029daadb7f85dc6de13011d4872" translate="yes" xml:space="preserve">
          <source>In the case of the former, the&lt;code&gt;USING&lt;/code&gt;clause on the procedure division header should describe the argument via the&lt;code&gt;BY REFERENCE&lt;/code&gt;</source>
          <target state="translated">前者の場合、手続き部のヘッダーの &lt;code&gt;USING&lt;/code&gt; 句は &lt;code&gt;BY REFERENCE&lt;/code&gt; を介して引数を説明する必要があります</target>
        </trans-unit>
        <trans-unit id="3683f2272e68eee3328548bbf75c6cbed2e45e7d" translate="yes" xml:space="preserve">
          <source>In the late 70&amp;rsquo;s cards was also on its way out to the point where P.C&amp;rsquo;s started being used (and no they were not made by IBM), so these columns could be used for other purposes including cc 73 - 80 instead of indicating the 8 character program name which was the maximum size allowed on a IBM system.</source>
          <target state="translated">70年代後半には、PCが使用されるようになるまで（そして、IBMによって作成されたわけではありません）、カードはcc 73〜80を含む他の目的に使用できるようになりました。 IBMシステムで許可されている最大サイズである8文字のプログラム名。</target>
        </trans-unit>
        <trans-unit id="d448bc8e604cd799be10bb1a12e035041426f0fc" translate="yes" xml:space="preserve">
          <source>In this case, the &lt;code&gt;EXIT&lt;/code&gt; statement takes no other run-time action.</source>
          <target state="translated">この場合、 &lt;code&gt;EXIT&lt;/code&gt; ステートメントは他の実行時アクションを実行しません。</target>
        </trans-unit>
        <trans-unit id="82849a227b43e92353f440e6cf481dde7d3eb800" translate="yes" xml:space="preserve">
          <source>In this case, the&lt;code&gt;EXIT&lt;/code&gt;statement takes no other run-time action.</source>
          <target state="translated">この場合、 &lt;code&gt;EXIT&lt;/code&gt; ステートメントは他の実行時アクションを実行しません。</target>
        </trans-unit>
        <trans-unit id="f943ab0caafc93abf22796cdb3e33af1b9b863ef" translate="yes" xml:space="preserve">
          <source>In this context, &lt;code&gt;VALUE&lt;/code&gt; specifies an initial compilation-time value that will be assigned to the storage occupied by the data item in the program object code generated by the compiler.</source>
          <target state="translated">このコンテキストでは、 &lt;code&gt;VALUE&lt;/code&gt; は、コンパイラーによって生成されたプログラムオブジェクトコード内のデータ項目によって占有されるストレージに割り当てられる初期コンパイル時の値を指定します。</target>
        </trans-unit>
        <trans-unit id="2a9d1dc97c6798126e8a06dda35c75cc92d21220" translate="yes" xml:space="preserve">
          <source>In this context,&lt;code&gt;VALUE&lt;/code&gt;specifies an initial compilation-time value that will be assigned to the storage occupied by the data item in the program object code generated by the compiler.</source>
          <target state="translated">このコンテキストでは、 &lt;code&gt;VALUE&lt;/code&gt; は、コンパイラーによって生成されたプログラムオブジェクトコード内のデータ項目が占有するストレージに割り当てられる初期コンパイル時の値を指定します。</target>
        </trans-unit>
        <trans-unit id="eec8378c7504896f2e89770da7d03a86fe4ae4b3" translate="yes" xml:space="preserve">
          <source>In this example, all six &amp;lsquo;</source>
          <target state="translated">この例では、6つすべての '</target>
        </trans-unit>
        <trans-unit id="84cb1e4aa0b378b3db93b48860594751f6ae285f" translate="yes" xml:space="preserve">
          <source>In this example, all six&lt;code&gt;A&lt;/code&gt;items will be initialized to &quot;?&quot;, all six&lt;code&gt;B&lt;/code&gt;items will be initialized to &quot;%&quot; and all six&lt;code&gt;N&lt;/code&gt;items will be initialized to 10. It&amp;rsquo;s not clear exactly how many times this sort of initialization will be useful, but it&amp;rsquo;s there if you need it.</source>
          <target state="translated">この例では、6つの &lt;code&gt;A&lt;/code&gt; アイテムすべてが「？」に初期化され、6つの &lt;code&gt;B&lt;/code&gt; アイテムすべてが「％」に初期化され、6つの &lt;code&gt;N&lt;/code&gt; アイテムすべてが10に初期化されます。この種類の初期化が何回行われるかは正確にはわかりません便利ですが、必要な場合はそこにあります。</target>
        </trans-unit>
        <trans-unit id="bdd4beaea45ea4f61aa50c556d96af34394add5c" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;IF&lt;/code&gt; statement actually has a scope that can include two sets of associated statements: one set to be executed when the &lt;code&gt;IF&lt;/code&gt; (see &lt;a href=&quot;#IF&quot;&gt;IF&lt;/a&gt;) condition is &lt;code&gt;TRUE&lt;/code&gt;, and another if it is &lt;code&gt;FALSE&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;IF&lt;/code&gt; ステートメントには、実際には2セットの関連ステートメントを含めることができるスコープがあります。1つは &lt;code&gt;IF&lt;/code&gt; （&lt;a href=&quot;#IF&quot;&gt;IFを&lt;/a&gt;参照）条件が &lt;code&gt;TRUE&lt;/code&gt; の場合に実行され、もう1つは &lt;code&gt;FALSE&lt;/code&gt; の場合に実行されます。</target>
        </trans-unit>
        <trans-unit id="2879e2f56bb5d870554e86f04a4bf9ebe7fb4ed9" translate="yes" xml:space="preserve">
          <source>In this example, the IF statement actually has a scope that can include two sets of associated statements &amp;ndash; one set to be executed when the&lt;code&gt;IF&lt;/code&gt;(see &lt;a href=&quot;#IF&quot;&gt;IF&lt;/a&gt;) condition is TRUE and another if it is FALSE.</source>
          <target state="translated">この例では、IFステートメントは実際には2セットの関連ステートメントを含めることができるスコープを持っています。1つは &lt;code&gt;IF&lt;/code&gt; （&lt;a href=&quot;#IF&quot;&gt;IFを&lt;/a&gt;参照）条件がTRUEのときに実行され、もう1つはFALSEのときに実行されます。</target>
        </trans-unit>
        <trans-unit id="b671b6f79a2badfb5c4ccb993eb5f1ff2485bd4c" translate="yes" xml:space="preserve">
          <source>In which case 9 characters of storage will be reserved. The values 000000000 through 999999999 will represent the gross-revenues. But, if only the millions are tracked (meaning the last six digits are always going to be 0), you could define the field as:</source>
          <target state="translated">この場合、9文字のストレージが予約されます。000000000 から 999999999 までの値が総収入を表します。しかし、もし数百万だけが追跡されている場合(最後の6桁が常に0になることを意味します)、このフィールドを次のように定義することができます。</target>
        </trans-unit>
        <trans-unit id="0f756e9a80d7e50bae6b071828fc08b35abbddf1" translate="yes" xml:space="preserve">
          <source>Include the reserved word  &lt;code&gt;FINAL&lt;/code&gt; if you want to include a special control heading before the first detail line is generated (&lt;code&gt;CONTROL HEADING FINAL&lt;/code&gt;) or after the last detail line is generated (&lt;code&gt;CONTROL FOOTING FINAL&lt;/code&gt;).</source>
          <target state="translated">最初の詳細行が生成される前（ &lt;code&gt;CONTROL HEADING FINAL&lt;/code&gt; ）または最後の詳細行が生成された後（ &lt;code&gt;CONTROL FOOTING FINAL&lt;/code&gt; ）に特別な制御見出しを含める場合は、予約語 &lt;code&gt;FINAL&lt;/code&gt; を含めます 。</target>
        </trans-unit>
        <trans-unit id="6178a2fcb450efe4624273996659b2d5392d26b6" translate="yes" xml:space="preserve">
          <source>Include the reserved word&lt;code&gt;FINAL&lt;/code&gt;</source>
          <target state="translated">予約語 &lt;code&gt;FINAL&lt;/code&gt; を含める</target>
        </trans-unit>
        <trans-unit id="86e3af29a6d78fb45be9ab4a356d52986963f954" translate="yes" xml:space="preserve">
          <source>Including an &lt;code&gt;ON SIZE ERROR&lt;/code&gt; clause on an arithmetic statement will allow your program to trap a failure of an arithmetic statement (either generating a result too large for the receiving field, or attempting to divide by zero) and handle it gracefully by executing &lt;var&gt;imperative-statement-1&lt;/var&gt; (see &lt;a href=&quot;#Imperative-Statement&quot;&gt;Imperative Statement&lt;/a&gt;). Field size overflow conditions occur silently, usually without any runtime messages being generated, even though such events rarely lend themselves to generating correct results. Division by zero errors, when no &lt;code&gt;ON SIZE ERROR&lt;/code&gt; clause exists, will produce an error message (by the GnuCOBOL runtime library) to the &lt;code&gt;SYSERR&lt;/code&gt; device (pipe 2) and will also abort the program.</source>
          <target state="translated">算術ステートメントに &lt;code&gt;ON SIZE ERROR&lt;/code&gt; 句を含めると、プログラムで算術ステートメントの失敗をトラップし（受信フィールドに対して大きすぎる結果を生成するか、ゼロで除算しようとする）、 &lt;var&gt;imperative-statement-1&lt;/var&gt; 実行して適切に処理できます。-1（&lt;a href=&quot;#Imperative-Statement&quot;&gt;命令文を&lt;/a&gt;参照）。フィールドサイズのオーバーフロー状態は、そのようなイベントが正しい結果を生成するのに役立つことはめったにありませんが、通常はランタイムメッセージが生成されることなくサイレントに発生します。 &lt;code&gt;ON SIZE ERROR&lt;/code&gt; 句が存在しない場合、ゼロ除算エラーは、 &lt;code&gt;SYSERR&lt;/code&gt; デバイス（パイプ2）に（GnuCOBOLランタイムライブラリによって）エラーメッセージを生成し、プログラムも中止します。</target>
        </trans-unit>
        <trans-unit id="4587868819f3914fb0d960b2a017af52903b843c" translate="yes" xml:space="preserve">
          <source>Including an&lt;code&gt;ON SIZE ERROR&lt;/code&gt;clause on an arithmetic statement will allow your program to trap a failure of an arithmetic statement (either generating a result too large for the receiving field, or attempting to divide by zero) and handle it gracefully by executing &amp;lt;</source>
          <target state="translated">算術ステートメントに &lt;code&gt;ON SIZE ERROR&lt;/code&gt; 句を含めると、プログラムは算術ステートメントの失敗をトラップし（受信フィールドに対して大きすぎる結果を生成するか、ゼロで除算しようとします）、&amp;lt;を実行して正常に処理します。</target>
        </trans-unit>
        <trans-unit id="2ec9e5e5288405f63d74272e4e8bcad544b64e15" translate="yes" xml:space="preserve">
          <source>Incompatible data exception</source>
          <target state="translated">互換性のないデータの例外</target>
        </trans-unit>
        <trans-unit id="e0049c7018b06d02f3c0ba2245a0ee83c74d7cc7" translate="yes" xml:space="preserve">
          <source>Inconsistent filename</source>
          <target state="translated">矛盾したファイル名</target>
        </trans-unit>
        <trans-unit id="e5d727021f58d38c370cf7243256d9dff80ee53f" translate="yes" xml:space="preserve">
          <source>Independent Subprograms</source>
          <target state="translated">独立したサブプログラム</target>
        </trans-unit>
        <trans-unit id="0e0834dadd433c69c101f415ef11e7aef2f4805a" translate="yes" xml:space="preserve">
          <source>Indexed files are processed using the following statements:</source>
          <target state="translated">インデックス化されたファイルは、以下のステートメントを使用して処理されます。</target>
        </trans-unit>
        <trans-unit id="1744e48f509016afca9d63b5cee3efedb0414b54" translate="yes" xml:space="preserve">
          <source>Indexed files, like relative files, may have their records processed in either a sequential or random manner. Unlike relative files, however, the actual location of a record in an indexed file is calculated automatically based upon the value(s) of one or more alphanumeric fields within records of the file. For example, an indexed file containing product data might use the product identification code as a record key. This means you may read, write or update the &lt;code&gt;A6G4328&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; record or the &lt;code&gt;Z8X7723&lt;/code&gt;&lt;sup&gt;th&lt;/sup&gt; record directly, based upon the product id value of those records!</source>
          <target state="translated">インデックスファイルは、相対ファイルと同様に、レコードを順次またはランダムに処理することができます。ただし、相対ファイルとは異なり、インデックス付きファイル内のレコードの実際の場所は、ファイルのレコード内の1つ以上の英数字フィールドの値に基づいて自動的に計算されます。たとえば、製品データを含むインデックス付きファイルは、製品識別コードをレコードキーとして使用する場合があります。これは、 &lt;code&gt;A6G4328&lt;/code&gt; &lt;sup&gt;番目の&lt;/sup&gt;レコードまたは &lt;code&gt;Z8X7723&lt;/code&gt; &lt;sup&gt;番目の&lt;/sup&gt;レコードの製品ID値に基づいて、それらのレコードを直接読み取り、書き込み、または更新できることを意味します。</target>
        </trans-unit>
        <trans-unit id="53ce26f7aaa0c6fd7bd1bac7547ef119ea253eb9" translate="yes" xml:space="preserve">
          <source>Indexing is the process of referencing an element of a table utilizing a data item with an explicitly or implicitly defined &lt;code&gt;USAGE&lt;/code&gt; (see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) of &lt;code&gt;INDEX&lt;/code&gt; to select the desired occurrence, while &amp;hellip;</source>
          <target state="translated">インデックス付けは、明示的または暗黙的に定義された &lt;code&gt;INDEX&lt;/code&gt; の &lt;code&gt;USAGE&lt;/code&gt; （&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;参照）を使用してデータ項目を利用してテーブルの要素を参照し、目的のオカレンスを選択するプロセスです。</target>
        </trans-unit>
        <trans-unit id="9353f9003cee9268ec86b3a1ea7f4d4ecb16eb1c" translate="yes" xml:space="preserve">
          <source>Indexing is the process of referencing an element of a table utilizing a data item with an explicitly or implicitly defined&lt;code&gt;USAGE&lt;/code&gt;(see &lt;a href=&quot;#USAGE&quot;&gt;USAGE&lt;/a&gt;) of&lt;code&gt;INDEX&lt;/code&gt;to select the desired occurrence, while &amp;hellip;</source>
          <target state="translated">インデックス付けは、明示的または暗黙的に定義された &lt;code&gt;INDEX&lt;/code&gt; の &lt;code&gt;USAGE&lt;/code&gt; （&lt;a href=&quot;#USAGE&quot;&gt;USAGEを&lt;/a&gt;参照）でデータアイテムを利用してテーブルの要素を参照し、目的のオカレンスを選択するプロセスです。</target>
        </trans-unit>
        <trans-unit id="93776ca03e71b3ad421edc98eae15b926b860367" translate="yes" xml:space="preserve">
          <source>Indicator Area</source>
          <target state="translated">指標エリア</target>
        </trans-unit>
        <trans-unit id="2fd879baf4180584f7bd97459985ff5ec005ec3f" translate="yes" xml:space="preserve">
          <source>Individually</source>
          <target state="translated">Individually</target>
        </trans-unit>
        <trans-unit id="b89618369028da6501ce98bcb744af95461452b5" translate="yes" xml:space="preserve">
          <source>Initialize small tables at compile time by including a &lt;code&gt;VALUE&lt;/code&gt; clause on the group item that serves as a parent to the table, as follows:</source>
          <target state="translated">次のように、テーブルの親として機能するグループアイテムに &lt;code&gt;VALUE&lt;/code&gt; 句を含めることにより、コンパイル時に小さなテーブルを初期化します。</target>
        </trans-unit>
        <trans-unit id="a6c6b82216692a3106690069e47ca45a2e70d92d" translate="yes" xml:space="preserve">
          <source>Initialize small tables at compile time by including a&lt;code&gt;VALUE&lt;/code&gt;clause on the group item that serves as a parent to the table, as follows:</source>
          <target state="translated">次のように、テーブルの親として機能するグループ項目に &lt;code&gt;VALUE&lt;/code&gt; 句を含めることにより、コンパイル時に小さなテーブルを初期化します。</target>
        </trans-unit>
        <trans-unit id="27a882e0892fd25d36e3f04ed9f9da709b0210eb" translate="yes" xml:space="preserve">
          <source>Initialize tables of almost any size at compilation time by utilizing the &lt;code&gt;REDEFINES&lt;/code&gt; (see &lt;a href=&quot;#REDEFINES&quot;&gt;REDEFINES&lt;/a&gt;) clause:</source>
          <target state="translated">&lt;code&gt;REDEFINES&lt;/code&gt; （&lt;a href=&quot;#REDEFINES&quot;&gt;REDEFINESを&lt;/a&gt;参照）句を使用して、コンパイル時にほぼすべてのサイズのテーブルを初期化します。</target>
        </trans-unit>
        <trans-unit id="24b3196c683087c1c3199428c0580a1c1d58213b" translate="yes" xml:space="preserve">
          <source>Initialize tables of almost any size at compilation time by utilizing the&lt;code&gt;REDEFINES&lt;/code&gt;(see &lt;a href=&quot;#REDEFINES&quot;&gt;REDEFINES&lt;/a&gt;) clause:</source>
          <target state="translated">&lt;code&gt;REDEFINES&lt;/code&gt; （&lt;a href=&quot;#REDEFINES&quot;&gt;REDEFINESを&lt;/a&gt;参照）句を使用して、コンパイル時にほぼすべてのサイズのテーブルを初期化します。</target>
        </trans-unit>
        <trans-unit id="2fec9ecf2a45eb0fd0af8f70fdb0cee7e4377f3b" translate="yes" xml:space="preserve">
          <source>Inline PERFORM Syntax</source>
          <target state="translated">インラインPERFORM構文</target>
        </trans-unit>
        <trans-unit id="bc36d8128c5a1e8ca8d8c4f2854d174a361c1c90" translate="yes" xml:space="preserve">
          <source>Input fields may have any character used as a fill character. These fill characters provide a visual indication of the size of the input field, and will automatically be transformed into spaces when the input field is processed by the program. If no such character is defined for an input field, an underscore (&quot;_&quot;) will be assumed.</source>
          <target state="translated">入力フィールドは、任意の文字を塗りつぶし文字として使用することができます。これらの塗りつぶし文字は入力フィールドのサイズを視覚的に示すものであり、入力フィールドがプログラムによって処理されるときに自動的にスペースに変換される。入力フィールドにそのような文字が定義されていない場合、アンダースコア(&quot;_&quot;)が想定されます。</target>
        </trans-unit>
        <trans-unit id="ec96e3ae34d38a6710e8a26303046f2131923ec8" translate="yes" xml:space="preserve">
          <source>Input fields may have any character used as a fill character. These fill characters provide a visual indication of the size of the input field, and will automatically be transformed into spaces when the input field is processed by the program. If no such character is defined for an input field, an underscore (&amp;lsquo;</source>
          <target state="translated">入力フィールドには、塗りつぶし文字として使用される任意の文字を含めることができます。これらの塗りつぶし文字は、入力フィールドのサイズを視覚的に示し、入力フィールドがプログラムによって処理されるときに自動的にスペースに変換されます。入力フィールドにそのような文字が定義されていない場合は、アンダースコア（ '</target>
        </trans-unit>
        <trans-unit id="33e5e7e82f76a11ddf2991effebf767de7f3deb5" translate="yes" xml:space="preserve">
          <source>Input validation</source>
          <target state="translated">入力の検証</target>
        </trans-unit>
        <trans-unit id="0f58e23445d1adbd9ab6441d745e78e9796ac8aa" translate="yes" xml:space="preserve">
          <source>Input will be read either from the console window (&lt;code&gt;CONSOLE&lt;/code&gt;) or from the system-standard input (pipe 0 = &lt;code&gt;STDIN&lt;/code&gt;, &lt;code&gt;SYSIN&lt;/code&gt; or &lt;code&gt;SYSIPT&lt;/code&gt;) and will be saved in &lt;var&gt;identifier-1&lt;/var&gt;.</source>
          <target state="translated">入力は、コンソールウィンドウ（ &lt;code&gt;CONSOLE&lt;/code&gt; ）またはシステム標準入力（パイプ0 = &lt;code&gt;STDIN&lt;/code&gt; 、 &lt;code&gt;SYSIN&lt;/code&gt; 、または &lt;code&gt;SYSIPT&lt;/code&gt; ）のいずれかから読み取られ、 &lt;var&gt;identifier-1&lt;/var&gt; 保存されます。</target>
        </trans-unit>
        <trans-unit id="d4fe42447823ec3b9e2e9421bf9fdef259cf35f1" translate="yes" xml:space="preserve">
          <source>Input will be read either from the console window &lt;code&gt;CONSOLE&lt;/code&gt; or from the system-standard input (pipe 0 =&lt;code&gt;STDIN&lt;/code&gt;&lt;code&gt;SYSIN&lt;/code&gt;or&lt;code&gt;SYSIPT&lt;/code&gt; and will be saved in &amp;lt;</source>
          <target state="translated">入力は、コンソールウィンドウ &lt;code&gt;CONSOLE&lt;/code&gt; またはシステム標準入力（パイプ0 = &lt;code&gt;STDIN&lt;/code&gt; &lt;code&gt;SYSIN&lt;/code&gt; または &lt;code&gt;SYSIPT&lt;/code&gt; )から読み取られ、&amp;lt;に保存されます。</target>
        </trans-unit>
        <trans-unit id="11b11dadbac78c35efb5d86e561bfcff60c6701b" translate="yes" xml:space="preserve">
          <source>Integer and non-integer operands may be freely intermixed</source>
          <target state="translated">整数と非整数のオペランドは自由に混在させることができます。</target>
        </trans-unit>
        <trans-unit id="8626f5223c37139c00a44d21c18f768de6e8df20" translate="yes" xml:space="preserve">
          <source>Integers such as 1, 56, 2192 or -54.</source>
          <target state="translated">1、56、2192、-54などの整数。</target>
        </trans-unit>
        <trans-unit id="d47bc2c05ec93f214d2f93848b03eba3a04ff0c4" translate="yes" xml:space="preserve">
          <source>Integrating well with non-COBOL infrastructures such as XML, SOA, MQ, almost any DBMS, Transaction Processing platforms, Queue-Management facilities and other programming languages.</source>
          <target state="translated">XML、SOA、MQ、ほとんどのDBMS、トランザクション処理プラットフォーム、キュー管理機能、その他のプログラミング言語など、COBOL以外のインフラストラクチャとの統合が可能です。</target>
        </trans-unit>
        <trans-unit id="8b3eb3d9c05dbc205b027a6d0771b0af833c1b89" translate="yes" xml:space="preserve">
          <source>Interactions between the program and the user will take place using the standard input, standard output and standard error streams. Any screen section I/O performed by the program will take place within the command shell &quot;window&quot;.</source>
          <target state="translated">プログラムとユーザ間の相互作用は、標準入力、標準出力、標準エラーストリームを使用して行われます。プログラムによって実行されるスクリーンセクションのI/Oは、コマンドシェルの「ウィンドウ」内で行われます。</target>
        </trans-unit>
        <trans-unit id="a9a9b5bdf1a9e72af88d9b1c9aeeec1f68626f9e" translate="yes" xml:space="preserve">
          <source>Interactions between the program and the user will take place using the standard input, standard output and standard error streams. Any screen section I/O performed by the program will take place within the terminal window.</source>
          <target state="translated">プログラムとユーザ間の相互作用は、標準入力、標準出力、標準エラーストリームを使用して行われます。プログラムによって実行されるスクリーンセクションのI/Oは、ターミナルウィンドウ内で行われます。</target>
        </trans-unit>
        <trans-unit id="4004bbedc882730cd7377c55c8a60c3d77d841f3" translate="yes" xml:space="preserve">
          <source>Intrinsic Function</source>
          <target state="translated">本質的機能</target>
        </trans-unit>
        <trans-unit id="79732e9fc9080596110feae301927876fc7259e7" translate="yes" xml:space="preserve">
          <source>Is a representation of the standard numeric time contained in &lt;var&gt;argument-2&lt;/var&gt; according to the format in &lt;var&gt;argument-1&lt;/var&gt;.</source>
          <target state="translated">&lt;var&gt;argument-1&lt;/var&gt; 形式に従って、 &lt;var&gt;argument-2&lt;/var&gt; に含まれる標準の数値時間を表します。</target>
        </trans-unit>
        <trans-unit id="e5ee413f8103631bd485cdfac46dfe6d0d5e3fd5" translate="yes" xml:space="preserve">
          <source>Is there a data item named &lt;code&gt;C-D&lt;/code&gt; defined? If so, use its value for the character sequence &lt;code&gt;C-D&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;C-D&lt;/code&gt; という名前のデータ項目が定義されていますか？その場合は、その値を文字シーケンス &lt;code&gt;C-D&lt;/code&gt; に使用します。</target>
        </trans-unit>
        <trans-unit id="3afb87dd54b38fa7410a22ca94bf84568bc6f936" translate="yes" xml:space="preserve">
          <source>Is there a data item named&lt;code&gt;C-D&lt;/code&gt;defined? If so, use its value for the character sequence&lt;code&gt;C-D&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;C-D&lt;/code&gt; という名前のデータ項目が定義されていますか？その場合、その値を文字シーケンス &lt;code&gt;C-D&lt;/code&gt; に使用します。</target>
        </trans-unit>
        <trans-unit id="b2a3023db707fff296813396a984d683cabd59f0" translate="yes" xml:space="preserve">
          <source>It is also possible to create source files where GnuCOBOL programs are nested inside each other. Take for example these four GnuCOBOL programs:</source>
          <target state="translated">また、GnuCOBOLプログラムが互いに入れ子になっているソースファイルを作成することも可能です。例えば、以下の4つのGnuCOBOLプログラムを見てみましょう。</target>
        </trans-unit>
        <trans-unit id="84300e8f98a0f3852c30d9579e7c60614ed0dbd3" translate="yes" xml:space="preserve">
          <source>It is expected that:</source>
          <target state="translated">と予想されています。</target>
        </trans-unit>
        <trans-unit id="ca9e6f0f2e7f593201ed043e07c2e0d871facea5" translate="yes" xml:space="preserve">
          <source>It is possible to generate executable modules for all GnuCOBOL programs, not just subprograms, by choosing to use the</source>
          <target state="translated">サブプログラムだけでなく、すべてのGnuCOBOLプログラムの実行モジュールを生成することができます。</target>
        </trans-unit>
        <trans-unit id="6c528e93ea46610dc90b04c262c6d8a0c4d80f39" translate="yes" xml:space="preserve">
          <source>It is possible to generate executable modules for all GnuCOBOL programs, not just subprograms, by choosing to use the&lt;code&gt;-m&lt;/code&gt;switch</source>
          <target state="translated">&lt;code&gt;-m&lt;/code&gt; スイッチの使用を選択することにより、サブプログラムだけでなく、すべてのGnuCOBOLプログラムの実行可能モジュールを生成できます。</target>
        </trans-unit>
        <trans-unit id="e3e380ef206ba659e48d91cb175358e2449a8b4e" translate="yes" xml:space="preserve">
          <source>It is possible, however, to automatically cause all &lt;code&gt;COPY&lt;/code&gt; statements to &amp;ldquo;fold&amp;rdquo; the names of all copybooks to upper-case by specifying the</source>
          <target state="translated">ただし、を指定することにより、すべての &lt;code&gt;COPY&lt;/code&gt; ステートメントですべてのコピーブックの名前を自動的に大文字に「折りたたむ」ことができます。</target>
        </trans-unit>
        <trans-unit id="b97faf48dcb0719b17e707ba50e23f3c431c6b2f" translate="yes" xml:space="preserve">
          <source>It is possible, however, to automatically cause all library names to &amp;rsquo;fold&amp;rsquo; to upper-case by specifying the</source>
          <target state="translated">ただし、を指定することにより、すべてのライブラリ名を自動的に大文字に「折りたたむ」ことができます。</target>
        </trans-unit>
        <trans-unit id="fd71df406ad79246a83a283db27a4507793dc703" translate="yes" xml:space="preserve">
          <source>It is possible, however, to automatically cause all library names to &amp;rsquo;fold&amp;rsquo; to upper-case by specifying the&lt;code&gt;-ffold-call&lt;/code&gt;switch</source>
          <target state="translated">ただし、 &lt;code&gt;-ffold-call&lt;/code&gt; スイッチを指定することにより、すべてのライブラリー名を自動的に大文字に変換することができます。</target>
        </trans-unit>
        <trans-unit id="0f5ff5b5b0cc8eb3a5f026f5c68c2c34d3dd2e58" translate="yes" xml:space="preserve">
          <source>It is possible, however, to automatically cause all&lt;code&gt;COPY&lt;/code&gt;statements to &amp;rsquo;fold&amp;rsquo; the names of all copybooks to upper-case by specifying the&lt;code&gt;-ffold-copy&lt;/code&gt;switch</source>
          <target state="translated">ただし、 &lt;code&gt;-ffold-copy&lt;/code&gt; スイッチを指定することで、すべての &lt;code&gt;COPY&lt;/code&gt; ステートメントですべてのコピーブックの名前を大文字に自動的に「折りたたむ」ことができます。</target>
        </trans-unit>
        <trans-unit id="7fd4db1874deb79d1734c24cfc068bf9dfa3c2af" translate="yes" xml:space="preserve">
          <source>It is possible, if supported by the</source>
          <target state="translated">でサポートされていれば可能です。</target>
        </trans-unit>
        <trans-unit id="8d95a0b3b4408000436885116c035d2b4d4eb090" translate="yes" xml:space="preserve">
          <source>It is possible, if supported by the &quot;curses&quot; package being used, to draw borders on the top, left and/or bottom edges of a field.</source>
          <target state="translated">使用している &quot;curses&quot; パッケージがサポートしていれば、フィールドの上端、左端、下端に境界線を描くことが可能です。</target>
        </trans-unit>
        <trans-unit id="7d7394694e1e1adbaef5eeee92d5a9373e538bc3" translate="yes" xml:space="preserve">
          <source>It is recommended to change the CBL_OC routines to CBL_GC for forward compatability as at some point they will be removed as they are a hangover from Open Cobol.</source>
          <target state="translated">CBL_OCルーチンをCBL_GCに変更することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="061e684ce444da672f8f250f9c15f353e99d24e9" translate="yes" xml:space="preserve">
          <source>It is recommended to change the CBL_OC routines to CBL_GC for forward compatibility as at some point they will be removed as they are a hangover from Open Cobol.</source>
          <target state="translated">CBL_OCルーチンをCBL_GCに変更することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="4bc4bb06183a156efac27d1054572b8c27c65421" translate="yes" xml:space="preserve">
          <source>It is worth mentioning that if the</source>
          <target state="translated">の場合は言及する価値があります。</target>
        </trans-unit>
        <trans-unit id="7246d8ea302a84c950724aa56d84b52fff1c6e02" translate="yes" xml:space="preserve">
          <source>It returns 0 when match, 1 on failure, case matters as does length, &quot;arg&quot; won&amp;rsquo;t match.</source>
          <target state="translated">一致する場合は0を返し、失敗する場合は1を返します。長さは大文字と小文字が区別され、「arg」は一致しません。</target>
        </trans-unit>
        <trans-unit id="18a80c8fa72d80aad7d81f986d63eacc53ab4b98" translate="yes" xml:space="preserve">
          <source>It would appear that it should be possible to locate and process any record in the file directly simply by calculating its starting character position based upon the program-defined record size. Even so, however, records must be still be read or written to these files in a purely sequential manner. The only way to read (or write) record number 100 would be to have read (or written) records number 1 through 99 first.</source>
          <target state="translated">プログラムで定義されたレコードサイズに基づいて開始文字位置を計算するだけで、ファイル内の任意のレコードを直接見つけて処理することが可能であるように思われます。しかし、そうであっても、レコードは純粋に連続した方法でこれらのファイルに読み書きされなければなりません。レコード番号100を読み込む(または書き込む)唯一の方法は、最初にレコード番号1から99までのレコードを読み込む(または書き込む)ことです。</target>
        </trans-unit>
        <trans-unit id="70dcde551f3b6956e677f96a1f00fa175867fa96" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s impossible to perform any arithmetic operation against an index data item directly (other than a simple incrementation or decremental operation via the &lt;code&gt;SET UP/DOWN&lt;/code&gt; statement (see &lt;a href=&quot;#SET-UP_002fDOWN&quot;&gt;SET UP/DOWN&lt;/a&gt;)). Situations where any non-trivial computations are required to calculate the effective occurrence number for a table reference will require you to use a conventional unedited numeric data item as the receiving field for the calculation. That calculated value would then need to be saved into the index data item via a &lt;code&gt;SET Index&lt;/code&gt; statement.</source>
          <target state="translated">インデックスデータ項目に対して直接算術演算を実行することはできません（ &lt;code&gt;SET UP/DOWN&lt;/code&gt; ステートメントを介した単純なインクリメントまたはデクリメント操作（&lt;a href=&quot;#SET-UP_002fDOWN&quot;&gt;SET UP / DOWNを&lt;/a&gt;参照）を除く）。テーブル参照の有効な発生数を計算するために重要な計算が必要な状況では、計算の受信フィールドとして従来の編集されていない数値データ項目を使用する必要があります。その計算値は、 &lt;code&gt;SET Index&lt;/code&gt; ステートメントを介してインデックスデータ項目に保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="6d1a9ad994fd74f3ea9c0abfcfff5c67eb069908" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s impossible to perform any arithmetic operation against an index data item directly (other than a simple incrementation or decremental operation via the&lt;code&gt;SET UP/DOWN&lt;/code&gt;statement (see &lt;a href=&quot;#SET-UP_002fDOWN&quot;&gt;SET UP/DOWN&lt;/a&gt;)). Situations where any non-trivial computations are required to calculate the effective occurrence number for a table reference will require you to use a conventional unedited numeric data item as the receiving field for the calculation. That calculated value would then need to be saved into the index data item via a&lt;code&gt;SET Index&lt;/code&gt;statement.</source>
          <target state="translated">それが直接指標データ項目に対して任意の演算を実行することは不可能です（VIA単純なインクリメント又はデクリメント操作以外の &lt;code&gt;SET UP/DOWN&lt;/code&gt; のステートメント（参照&lt;a href=&quot;#SET-UP_002fDOWN&quot;&gt;SET UP / DOWN&lt;/a&gt;））。テーブル参照の有効オカレンス数を計算するために重要な計算が必要な状況では、計算の受け取りフィールドとして従来の編集されていない数値データ項目を使用する必要があります。その計算された値は、 &lt;code&gt;SET Index&lt;/code&gt; ステートメントを介してインデックスデータアイテムに保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="48149098c4b72f980cb6ef484a18559b6952ecbd" translate="yes" xml:space="preserve">
          <source>It&amp;rsquo;s probably a true that an IT professional can no longer afford to allow COBOL to be the</source>
          <target state="translated">ITプロフェッショナルがCOBOLになることを許可する余裕がなくなったのは、おそらく本当でしょう。</target>
        </trans-unit>
        <trans-unit id="02387685edacc74ddafb8999ab4d02ea233cee8c" translate="yes" xml:space="preserve">
          <source>Items appearing in Mixed Case within a syntax diagram represent complex clauses of other syntax elements that may appear in that position. Some COBOL syntax gets quite complicated, and using a convention such as this significantly reduces the complexity of a syntax diagram. When such items are referenced in text, they will appear as &amp;lt;&amp;lt;</source>
          <target state="translated">構文図内の大文字と小文字の混在で表示される項目は、その位置に表示される可能性がある他の構文要素の複雑な句を表します。一部のCOBOL構文は非常に複雑になり、このような規則を使用すると、構文図の複雑さが大幅に軽減されます。このようなアイテムがテキストで参照されている場合、それらは&amp;lt;&amp;lt;</target>
        </trans-unit>
        <trans-unit id="4c435dc1bbde5c2dacc928889559b530821b3122" translate="yes" xml:space="preserve">
          <source>Items appearing in Mixed Case within a syntax diagram represent complex clauses of other syntax elements that may appear in that position. Some COBOL syntax gets quite complicated, and using a convention such as this significantly reduces the complexity of a syntax diagram. When such items are referenced in text, they will appear as &lt;var&gt;Complex-Syntax-Clause&lt;/var&gt;.</source>
          <target state="translated">シンタックスダイアグラム内で大文字と小文字が混在して表示される項目は、その位置に表示される可能性のある他の構文要素の複雑な句を表します。一部のCOBOL構文は非常に複雑になり、このような規則を使用すると、構文図の複雑さが大幅に軽減されます。このような項目がテキストで参照されている場合、それらは &lt;var&gt;Complex-Syntax-Clause&lt;/var&gt; として表示されます。</target>
        </trans-unit>
        <trans-unit id="58668e7669fd564d99db5d581fcdb6a5618440b5" translate="yes" xml:space="preserve">
          <source>J</source>
          <target state="translated">J</target>
        </trans-unit>
        <trans-unit id="56625773bdd51fd820fa786a2e0f16b75e88d894" translate="yes" xml:space="preserve">
          <source>JUST, JUSTIFIED</source>
          <target state="translated">ただ、正当化された</target>
        </trans-unit>
        <trans-unit id="362a2940964523b043977ef5c326c0da3c417c71" translate="yes" xml:space="preserve">
          <source>JUSTIFIED Attribute Syntax</source>
          <target state="translated">JUSTIFIED 属性構文</target>
        </trans-unit>
        <trans-unit id="90e0e514b7cbaade00f2505567f728c431ef2c8f" translate="yes" xml:space="preserve">
          <source>JUSTIFIED, JUST</source>
          <target state="translated">JUSTIFIED,JUST</target>
        </trans-unit>
        <trans-unit id="5722133c7e6a0b8bbf45b32c72de74b6bc64c397" translate="yes" xml:space="preserve">
          <source>Just as multiplication takes precedence over addition in arithmetic expressions, so does &lt;code&gt;AND&lt;/code&gt; take precedence over &lt;code&gt;OR&lt;/code&gt; in combined conditions. Use parenthesis to change this precedence, if necessary. For example:</source>
          <target state="translated">算術式で乗算が加算よりも優先されるのと同様に、結合条件では &lt;code&gt;AND&lt;/code&gt; が &lt;code&gt;OR&lt;/code&gt; よりも優先されます。必要に応じて、括弧を使用してこの優先順位を変更します。例えば：</target>
        </trans-unit>
        <trans-unit id="69d7203c7ddac97c0f7dbb23cc2fe036c4f8c92f" translate="yes" xml:space="preserve">
          <source>Just as multiplication takes precedence over addition in arithmetic expressions, so does&lt;code&gt;AND&lt;/code&gt;take precedence over&lt;code&gt;OR&lt;/code&gt;in combined conditions. Use parenthesis to change this precedence, if necessary. For example:</source>
          <target state="translated">算術式で乗算が加算より優先されるのと同様に、組み合わせ条件で &lt;code&gt;AND&lt;/code&gt; が &lt;code&gt;OR&lt;/code&gt; より優先されます。必要に応じて、括弧を使用してこの優先順位を変更してください。例えば：</target>
        </trans-unit>
        <trans-unit id="7d13eab767d2368877889bd7045a0a16db421d69" translate="yes" xml:space="preserve">
          <source>Just because COBOL doesn&amp;rsquo;t traditionally support objects, classes, and the like doesn&amp;rsquo;t mean that its &quot;procedural&quot; approach to computing isn&amp;rsquo;t valuable &amp;mdash; after all, it runs 70% of the</source>
          <target state="translated">COBOLが伝統的にオブジェクトやクラスなどをサポートしていないからといって、コンピューティングへの「手続き的」アプローチが価値がないというわけではありません。</target>
        </trans-unit>
        <trans-unit id="d8c01857f89a36261130d305fde5b5812e5298f0" translate="yes" xml:space="preserve">
          <source>Just because COBOL doesn&amp;rsquo;t traditionally support objects, classes, and the like doesn&amp;rsquo;t mean that its &amp;ldquo;procedural&amp;rdquo; approach to computing isn&amp;rsquo;t valuable &amp;mdash; after all, it runs 70% of the</source>
          <target state="translated">COBOLが従来からオブジェクトやクラスなどをサポートしていないからといって、コンピューティングに対する「手続き型」アプローチが価値がないことを意味するわけではありません。結局のところ、COBOLは70％を実行します。</target>
        </trans-unit>
        <trans-unit id="979a2652877865746b7247ec58a121d845b88ba1" translate="yes" xml:space="preserve">
          <source>Just because the table has one or more &lt;code&gt;KEY&lt;/code&gt; clauses doesn&amp;rsquo;t mean the data is actually</source>
          <target state="translated">テーブルに1つ以上の &lt;code&gt;KEY&lt;/code&gt; 句があるからといって、データが実際にあるとは限りません。</target>
        </trans-unit>
        <trans-unit id="eab1ffaceb7e528d02f388bc4a44de1ac999f956" translate="yes" xml:space="preserve">
          <source>Just because the table has one or more&lt;code&gt;KEY&lt;/code&gt;clauses doesn&amp;rsquo;t mean the data is actually</source>
          <target state="translated">テーブルに1つ以上の &lt;code&gt;KEY&lt;/code&gt; 句があるからといって、データが実際に</target>
        </trans-unit>
        <trans-unit id="5b5d12ea2ea365ae4f8ff7a7d00d39c0f6a22117" translate="yes" xml:space="preserve">
          <source>Justification (left, right or centred) of a string field</source>
          <target state="translated">文字列フィールドの正当化(左、右、または中央)。</target>
        </trans-unit>
        <trans-unit id="c2d43141ba675c34b7c1d27c2a20a48306114ad6" translate="yes" xml:space="preserve">
          <source>Justifying a field left-, right- or center-aligned</source>
          <target state="translated">フィールドの左揃え、右揃え、中央揃えの正当化</target>
        </trans-unit>
        <trans-unit id="84f38d3f20c7775e2217cde20dd53b4fca4c4de9" translate="yes" xml:space="preserve">
          <source>KEPT, KEY, KEYBOARD</source>
          <target state="translated">ケープ、キー、キーボード</target>
        </trans-unit>
        <trans-unit id="dff84808f4a83b06a0b8dc389f4ca84fd6e483a3" translate="yes" xml:space="preserve">
          <source>Key already exists</source>
          <target state="translated">キーはすでに存在している</target>
        </trans-unit>
        <trans-unit id="92bd34b75e6ff630359dc24ce994bebb8b03c58a" translate="yes" xml:space="preserve">
          <source>Key boundary violation</source>
          <target state="translated">鍵の境界違反</target>
        </trans-unit>
        <trans-unit id="a1abb8bae6a20d6d2a3d297fadb85dbb06f153f7" translate="yes" xml:space="preserve">
          <source>Key invalid</source>
          <target state="translated">キーが無効</target>
        </trans-unit>
        <trans-unit id="0dca24f2a9944795f9d4824194f21fc80ddaa094" translate="yes" xml:space="preserve">
          <source>Key not found</source>
          <target state="translated">キーが見つからない</target>
        </trans-unit>
        <trans-unit id="d160e0986aca4714714a16f29ec605af90be704d" translate="yes" xml:space="preserve">
          <source>L</source>
          <target state="translated">L</target>
        </trans-unit>
        <trans-unit id="6114979f0d6bbe96ece7032f3f733bd6eddb23b0" translate="yes" xml:space="preserve">
          <source>LABEL-OFFSET, LABEL, LARGE-FONT, LARGE-OFFSET, LAST-ROW, LAST, LAYOUT-DATA, LAYOUT-MANAGER, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES, LC_MONETARY, LC_NUMERIC, LC_TIME, LEADING-SHIFT, LEADING, LEFT-JUSTIFY, LEFTLINE, LEFT-TEXT, LEFT, LENGTH-AN, LENGTH-CHECK, LENGTH, LESS, LIMITS, LIMIT, LINAGE-COUNTER, LINAGE, LINE-COUNTER, LINES-AT-ROOT, LINE-SEQUENTIAL, LINES, LINE, LINKAGE, LIST-BOX, LM-RESIZE, LOCALE-COMPARE, LOCALE-DATE, LOCALE-TIME-FROM-SECONDS, LOCALE-TIME, LOCALE, LOCAL-STORAGE, LOCK, LOG10, LOG, LONG-DATE, LOW-COLOR, LOWER-CASE, LOWERED, LOWER, LOWEST-ALGEBRAIC, LOWLIGHT, LOW-VALUES, LOW-VALUE</source>
          <target state="translated">LABEL-OFFSET、LABEL、LARGE-FONT、LARGE-OFFSET、LAST-ROW、LAST、LAYOUT-DATA、LAYOUT-MANAGER、LC_ALL、LC_COLLATE、LC_CTYPE、LC_MESSAGES、LC_MONETARY、LC_NUMERIC、LC_TIME、LEADING-SHIFT、LEADING、LEFT-JUSTIFY、LEFTLINE、LEFT-TEXT、LEFT、LEFT、LENGTH-AN、LENGTH-CHECK、LENGTH、LESS、LIMITS、LIMIT、LINAGE-COUNTER。LINAGE、LINE-COUNTER、LINES-AT-ROOT、LINE-SEQUENTIAL、LINES、LINE、LINKAGE、LIST-BOX、LM-RESIZE、LOCALE-COMPARE、LOCALE-DATE、LOCALE-TIME-ROM-SECONDS、LOCALE-TIME、LOCAL、LOCAL-STORAGE、LOCK、LOG10、LOG、LONG-DATE、LOW-COLOR、LOWER-CASE、LOWERED、LOWER、LOWER、LOWEST-ALGEBRAIC、LOWLIGHT、LOW-ALUES、LOW-VALUES、LOW-VALUE</target>
        </trans-unit>
        <trans-unit id="b27d585a06f48010c011f378dec6cda9ce6fe385" translate="yes" xml:space="preserve">
          <source>LABEL. LAST, LC_ALL, LC_COLLATE, LC_CTYPE, LC_MESSAGES, LC_MONETARY, LC_NUMERIC, LC_TIME, LEADING, LEFT, LEFT-JUSTIFY, LEFTLINE, LENGTH, LENGTH-AN, LENGTH-CHECK, LESS, LIMIT, LIMITS, LINAGE, LINAGE-COUNTER, LINE, LINE-COUNTER, LINES, LINKAGE, LOCALE, LOCALE-COMPARE, LOCALE-DATE, LOCALE-TIME, LOCALE-TIME-FROM-SECONDS, LOCAL-STORAGE, LOCK, LOG, LOG10, LOWER, LOWER-CASE, LOWEST-ALGEBRAIC, LOWLIGHT, LOW-VALUE, LOW-VALUES</source>
          <target state="translated">LABEL.LAST、LC_ALL、LC_COLLATE、LC_CTYPE、LC_MESSAGES、LC_MONETARY、LC_NUMERIC、LC_TIME、LEADING、LEFT、LEFT-JUSTIFY、LEFTLINE、LENGTH、LENGTH-AN、LENGTH-CHECK、LESS、LIMIT、LIMITS、LINAGE、LINAGE-COUNTER、LINE.LAST、LC_ALL、LC_COLLATE、LC_CTYPE、LC_MESSAGES、LC_MONETARY、LC_NUMERIC、LC_TIME、LEADING、LEFT、LEFT-JUSTIFY、LEFTLINE、LENGTH、LENGTH-AN、LENGTH-CHECK、LESS、LIMIT、LIMITS、LINAGE、LINAGE-COUNTER、LINE.LINE。LINE-COUNTER、LINES、LINKAGE、LOCALE、LOCALE-COMPARE、LOCALE-DATE、LOCALE-TIME、LOCALE-TIME-FROM-SECONDS、LOCAL-STORAGE、LOCK、LOG、LOG10、LOWER、LOWER-CASE、LOWEST-ALGEBRAIC、LOWLIGHT、LOW-VALUE、LOW-VALUES</target>
        </trans-unit>
        <trans-unit id="f7adab25c99ba32828c8334645ed0e592317c0dd" translate="yes" xml:space="preserve">
          <source>LEFTLINE Attribute Syntax</source>
          <target state="translated">LEFTLINE 属性構文</target>
        </trans-unit>
        <trans-unit id="131342f51da66f70ac3d8ad3a42ad6266e7cfe09" translate="yes" xml:space="preserve">
          <source>LENGTH Function Syntax</source>
          <target state="translated">LENGTH 関数構文</target>
        </trans-unit>
        <trans-unit id="d74d405b72ac688357a94ddb91f3bd1d36b38a48" translate="yes" xml:space="preserve">
          <source>LENGTH OF Syntax</source>
          <target state="translated">構文の長さ</target>
        </trans-unit>
        <trans-unit id="a6c3bbbb104612f77a62807c2c1de5109220484e" translate="yes" xml:space="preserve">
          <source>LENGTH-AN Function Syntax</source>
          <target state="translated">LENGTH-AN 関数構文</target>
        </trans-unit>
        <trans-unit id="954f779688b59664bc2c0157a1a346f68764ce28" translate="yes" xml:space="preserve">
          <source>LENGTH-CHECK Attribute Syntax</source>
          <target state="translated">LENGTH-CHECK 属性構文</target>
        </trans-unit>
        <trans-unit id="f4069c469e237582353fbcc1ca054bde5eb25517" translate="yes" xml:space="preserve">
          <source>LINAGE IS n LINES</source>
          <target state="translated">IS n LINES</target>
        </trans-unit>
        <trans-unit id="700c1989f8b190ed7e6537ef207d774a560d050f" translate="yes" xml:space="preserve">
          <source>LINE (REPORT SECTION) Clause Syntax</source>
          <target state="translated">LINE(レポートセクション)節構文</target>
        </trans-unit>
        <trans-unit id="e8f4389c48575a281e9f925b390e924cf0c4233d" translate="yes" xml:space="preserve">
          <source>LINE (SCREEN SECTION) Clause Syntax</source>
          <target state="translated">LINE(SCREEN SECTION)節の構文</target>
        </trans-unit>
        <trans-unit id="7c6e6d7676fc26598c1022695002f33ef9cb1a7f" translate="yes" xml:space="preserve">
          <source>LINES AT BOTTOM</source>
          <target state="translated">下部のライン</target>
        </trans-unit>
        <trans-unit id="2bb17bd344a3058733c23cfa10c4a15543c5a7a0" translate="yes" xml:space="preserve">
          <source>LINES AT TOP</source>
          <target state="translated">トップのライン</target>
        </trans-unit>
        <trans-unit id="e4f2ff384d74fc8578647b7045a783150209d9b6" translate="yes" xml:space="preserve">
          <source>LINKAGE-SECTION-Data-Item</source>
          <target state="translated">LINKAGE-SECTION-Data-Item</target>
        </trans-unit>
        <trans-unit id="6c615d91fc665579223c013c286410416b6e1014" translate="yes" xml:space="preserve">
          <source>LINKAGE-SECTION-Data-Item Syntax</source>
          <target state="translated">リンケージセクション-データ項目構文</target>
        </trans-unit>
        <trans-unit id="de80fa7cc22fe7bc720ec1f880b19a375e416fad" translate="yes" xml:space="preserve">
          <source>LOCAL-STORAGE-SECTION-Data-Item</source>
          <target state="translated">LOCAL-STORAGE-SECTION-Data-Item</target>
        </trans-unit>
        <trans-unit id="7aaab284fb19784decbd8f8b27788cee676e6312" translate="yes" xml:space="preserve">
          <source>LOCAL-STORAGE-SECTION-Data-Item Syntax</source>
          <target state="translated">LOCAL-STORAGE-SECTION-データ項目の構文</target>
        </trans-unit>
        <trans-unit id="43137ffee30418f0ee2f9cddfdfde852be8ee37f" translate="yes" xml:space="preserve">
          <source>LOCALE-COMPARE Function Syntax</source>
          <target state="translated">LOCALE-COMPARE 関数構文</target>
        </trans-unit>
        <trans-unit id="b1fca96794478203376fc5f182a5206a1cd9879a" translate="yes" xml:space="preserve">
          <source>LOCALE-DATE Function Syntax</source>
          <target state="translated">LOCALE-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="bb3ee280b5397e14e50725a5217c3a5d3ba477ce" translate="yes" xml:space="preserve">
          <source>LOCALE-TIME Function Syntax</source>
          <target state="translated">LOCALE-TIME 関数構文</target>
        </trans-unit>
        <trans-unit id="5471c4a61062a5428ab007db0990af8c067fcb5d" translate="yes" xml:space="preserve">
          <source>LOCALE-TIME-FROM-SECONDS Function Syntax</source>
          <target state="translated">LOCALE-TIME-FROM-SECONDS 関数構文</target>
        </trans-unit>
        <trans-unit id="37c5bf8af77ce9710567f4d33ea9e7df839040cc" translate="yes" xml:space="preserve">
          <source>LOG Function Syntax</source>
          <target state="translated">LOG 関数構文</target>
        </trans-unit>
        <trans-unit id="9192c8decf1f9c720375df3f6fa03e112ff20e88" translate="yes" xml:space="preserve">
          <source>LOG10 Function Syntax</source>
          <target state="translated">LOG10 関数構文</target>
        </trans-unit>
        <trans-unit id="ee7e6e2ad53ef8f056736d307514898fdd404c69" translate="yes" xml:space="preserve">
          <source>LOWER-CASE Function Syntax</source>
          <target state="translated">LOWER-CASE 関数構文</target>
        </trans-unit>
        <trans-unit id="439e85988349d2d4d56bcd162fc79031cbfe5293" translate="yes" xml:space="preserve">
          <source>LOWEST-ALGEBRAIC Function Syntax</source>
          <target state="translated">LOWEST-ALGEBRAIC 関数構文</target>
        </trans-unit>
        <trans-unit id="a8456caa490bee9c2c0be989a83696a4f186cc13" translate="yes" xml:space="preserve">
          <source>LOWLIGHT Attribute Syntax</source>
          <target state="translated">LOWLIGHT 属性構文</target>
        </trans-unit>
        <trans-unit id="ab9f0a91ded19b860a0bb2aa383c74029ea96c55" translate="yes" xml:space="preserve">
          <source>Language &lt;code&gt;DIVISION&lt;/code&gt;, &lt;code&gt;SECTION&lt;/code&gt; and paragraph section headers must b egin in Area A, as must the level numbers 01, 77 in data description entries and the &lt;code&gt;FD&lt;/code&gt; and &lt;code&gt;SD&lt;/code&gt; file and &lt;code&gt;SORT&lt;/code&gt; description headers.</source>
          <target state="translated">言語 &lt;code&gt;DIVISION&lt;/code&gt; 、 &lt;code&gt;SECTION&lt;/code&gt; 、および段落セクションのヘッダーは、データ記述エントリのレベル番号01、77、および &lt;code&gt;FD&lt;/code&gt; および &lt;code&gt;SD&lt;/code&gt; ファイルと &lt;code&gt;SORT&lt;/code&gt; 記述ヘッダーと同様に、エリアAに含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="b77f5ed95a31f852095a500e8931cb13a5b9471b" translate="yes" xml:space="preserve">
          <source>Language DIVISION, SECTION and paragraph section headers must begin in Area A, as must the level numbers 01, 77 in data description entries and the &quot;FD&quot; and &quot;SD&quot; file and SORT description headers.</source>
          <target state="translated">言語DIVISION、SECTIONおよび段落セクションのヘッダは、データ記述エントリのレベル番号01、77、および &quot;FD &quot;および &quot;SD &quot;ファイルおよびSORT記述ヘッダと同様に、エリアAで開始しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1882dc6a1967f34bbac58b9f9a979e4a9b63398b" translate="yes" xml:space="preserve">
          <source>Later, when you wish to compile a calling program and combine any needed assembly language subroutines in (as static subroutines &amp;mdash; see &lt;a href=&quot;#Dynamic-vs-Static-Subprograms&quot;&gt;Dynamic vs Static Subprograms&lt;/a&gt;), use a command such as this:</source>
          <target state="translated">後で、呼び出し側プログラムをコンパイルして必要なアセンブリ言語サブルーチンを（静的サブルーチンとして- &lt;a href=&quot;#Dynamic-vs-Static-Subprograms&quot;&gt;動的サブプログラムと静的サブプログラムを&lt;/a&gt;参照）結合する場合は、次のようなコマンドを使用します。</target>
        </trans-unit>
        <trans-unit id="66985c4b56238cdffd3d626011e0ae9656911e65" translate="yes" xml:space="preserve">
          <source>Leading and/or trailing spaces are allowed, as are spaces before and/or after any sign characters.</source>
          <target state="translated">先頭および/または末尾のスペースは、記号の前および/または後にスペースを入れても構いません。</target>
        </trans-unit>
        <trans-unit id="0ff8a66126e2608d00693ba8dd0efcf5b6c8473c" translate="yes" xml:space="preserve">
          <source>Leading and/or trailing spaces are allowed, as are spaces before and/or after the currency symbol, sign, CR and DB characters.</source>
          <target state="translated">通貨記号、記号、CR、DB文字の前後にスペースを入れても構いません。</target>
        </trans-unit>
        <trans-unit id="13235fcc87f3e6e8669414dd697a803db485fc34" translate="yes" xml:space="preserve">
          <source>Leading and/or trailing spaces are allowed, as are spaces before and/or after the sign, CR and DB characters.</source>
          <target state="translated">先頭および/または末尾のスペースは、符号の前および/または後のスペース、CRおよびDB文字と同様に許可されています。</target>
        </trans-unit>
        <trans-unit id="d8c6e1dcd78cbde53dbfb5d9de88b738224cdda7" translate="yes" xml:space="preserve">
          <source>Leading and/or trailing spaces are allowed, as are spaces before the first digit.</source>
          <target state="translated">先頭および/または末尾のスペースは、最初の桁の前にスペースを入れてもかまいません。</target>
        </trans-unit>
        <trans-unit id="4a73716efd725dd69ed96a4ea0bb80f513d3861e" translate="yes" xml:space="preserve">
          <source>Left Dbl Click</source>
          <target state="translated">左Dblクリック</target>
        </trans-unit>
        <trans-unit id="88fb5a06f570b6e81cc3331af90bb5ea437de3f2" translate="yes" xml:space="preserve">
          <source>Left Pressed</source>
          <target state="translated">左押し</target>
        </trans-unit>
        <trans-unit id="cd690f11442f85e3110b4a63bf12f94127c762cc" translate="yes" xml:space="preserve">
          <source>Left Released</source>
          <target state="translated">左リリース</target>
        </trans-unit>
        <trans-unit id="6d1192545a490f725efd7534bb1ad77133927978" translate="yes" xml:space="preserve">
          <source>Legend has it that there&amp;rsquo;s actually only been ONE program ever written in COBOL, and all programs ever &quot;written&quot; thereafter were simply derivatives of that one. Although this is clearly intended as a (probably) bad joke, it is nevertheless close to the very simple truth that many programmers&quot;reuse&quot; existing COBOL programs when creating new ones. There&amp;rsquo;s certainly nothing preventing this from happening with programs written in other languages, but it does seem to happen more in COBOL shops. It&amp;rsquo;s ironic that &quot;code re-usability&quot; is one of the arguments used to justify the existence of the &quot;modern&quot; languages.</source>
          <target state="translated">凡例によると、実際にCOBOLで記述されたプログラムは1つしかなく、その後「記述」されたすべてのプログラムは、単にそのプログラムの派生物でした。これは明らかに（おそらく）悪い冗談として意図されていますが、それでも、多くのプログラマーが新しいプログラムを作成するときに既存のCOBOLプログラムを「再利用」するという非常に単純な真実に近いものです。他の言語で記述されたプログラムでこれが発生するのを妨げるものは確かにありませんが、COBOLショップで発生するようです。皮肉なことに、「コードの再利用性」は「現代」の言語の存在を正当化するために使用される議論の1つです。</target>
        </trans-unit>
        <trans-unit id="9c975edbd71a157d47b1d648200e63954dd79c0f" translate="yes" xml:space="preserve">
          <source>Legend has it that there&amp;rsquo;s actually only been ONE program ever written in COBOL, and all programs ever &amp;ldquo;written&amp;rdquo; thereafter were simply derivatives of that one. Although this is clearly intended as a (probably) bad joke, it is nevertheless close to the very simple truth that many programmers&amp;ldquo;reuse&amp;rdquo; existing COBOL programs when creating new ones. There&amp;rsquo;s certainly nothing preventing this from happening with programs written in other languages, but it does seem to happen more in COBOL shops. It&amp;rsquo;s ironic that &amp;ldquo;code re-usability&amp;rdquo; is one of the arguments used to justify the existence of the &amp;ldquo;modern&amp;rdquo; languages.</source>
          <target state="translated">伝説によると、実際にはCOBOLで作成されたプログラムは1つだけであり、その後「作成」されたすべてのプログラムは、そのプログラムの単なる派生物でした。これは明らかに（おそらく）悪いジョークとして意図されていますが、それでも、多くのプログラマーが新しいプログラムを作成するときに既存のCOBOLプログラムを「再利用」するという非常に単純な真実に近いです。確かに、他の言語で書かれたプログラムでこれが発生するのを妨げるものは何もありませんが、COBOLショップではもっと発生するようです。 「コードの再利用性」が「現代」言語の存在を正当化するために使用される議論の1つであることは皮肉です。</target>
        </trans-unit>
        <trans-unit id="0b3fb64877d0da3cc80aa54b2402a8b8eaf24bde" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at a different problem. Surely a program that asks a user to input a positive integer, generates the sum of all positive integers from 1 to that number and then prints the result will be MUCH shorter and MUCH easier to understand when coded in Java than in COBOL, right?</source>
          <target state="translated">別の問題を見てみましょう。確かに、ユーザーに正の整数の入力を求め、1からその数までのすべての正の整数の合計を生成し、その結果を出力するプログラムは、COBOLよりもJavaでコーディングした方がはるかに短く、理解しやすいでしょう。</target>
        </trans-unit>
        <trans-unit id="26e5808de92654f265239c37c8e3bd7a273163fd" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how much more &quot;wordy&quot; COBOL is than Java. Count the characters in the two programs. The Java program has 95 (not counting carriage returns and any indentation). The COBOL program has 89 (again, not counting carriage returns and indentation)! Technically, it could have been only 65 because the&lt;code&gt;IDENTIFICATION DIVISION.&lt;/code&gt;header is actually optional. Clearly, &quot;Hello World&quot; doesn&amp;rsquo;t look any more concise in Java than it does in COBOL.</source>
          <target state="translated">Javaよりも「長文」のCOBOLの方がはるかに多いのか見てみましょう。2つのプログラムの文字を数えます。Javaプログラムには95があります（キャリッジリターンとインデントは含まれません）。COBOLプログラムには89（改行とインデントは含まない）があります。技術的には、 &lt;code&gt;IDENTIFICATION DIVISION.&lt;/code&gt; ため、65でしかなかった可能性があります。ヘッダーは実際にはオプションです。明らかに、「Hello World」は、COBOLの場合よりもJavaの場合ほど簡潔に見えません。</target>
        </trans-unit>
        <trans-unit id="fce67368220fd5d1a069d467b1d821a9f6cc0caf" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s look at how much more &amp;ldquo;wordy&amp;rdquo; COBOL is than Java. Count the characters in the two programs. The Java program has 95 (not counting carriage returns and any indentation). The COBOL program has 89 (again, not counting carriage returns and indentation)! Technically, it could have been only 65 because the &lt;code&gt;IDENTIFICATION DIVISION.&lt;/code&gt; header is actually optional. Clearly, &amp;ldquo;Hello World&amp;rdquo; doesn&amp;rsquo;t look any more concise in Java than it does in COBOL.</source>
          <target state="translated">Javaよりも「言葉の多い」COBOLがどれだけ多いかを見てみましょう。2つのプログラムの文字を数えます。Javaプログラムには95個あります（キャリッジリターンとインデントはカウントされません）。COBOLプログラムには89個あります（ここでも、キャリッジリターンとインデントはカウントされません）。技術的には、 &lt;code&gt;IDENTIFICATION DIVISION.&lt;/code&gt; 原因で65であった可能性があります。ヘッダーは実際にはオプションです。明らかに、「Hello World」は、JavaではCOBOLよりも簡潔に見えません。</target>
        </trans-unit>
        <trans-unit id="963bbbacb61f8751db91170e221a486a9a4d3b42" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say the 3x4 &quot;grid&quot; defined by the above structure has these values:</source>
          <target state="translated">上記の構造で定義された3x4の「グリッド」に次の値があるとします。</target>
        </trans-unit>
        <trans-unit id="5974d6c322da30f80987e1170616d04027e9daef" translate="yes" xml:space="preserve">
          <source>Let&amp;rsquo;s say the 3x4 &amp;ldquo;grid&amp;rdquo; defined by the above structure has these values:</source>
          <target state="translated">上記の構造で定義された3x4の「グリッド」に次の値があるとします。</target>
        </trans-unit>
        <trans-unit id="5f6c75fa3581f1fe3d845277eaa7b25f5ef95342" translate="yes" xml:space="preserve">
          <source>Level 1 (Highest) &amp;mdash; Unary Sign Specification (&lt;code&gt;+&lt;/code&gt; and &lt;code&gt;-&lt;/code&gt; with a single argument)</source>
          <target state="translated">レベル1（最高）&amp;mdash;単項符号仕様（ &lt;code&gt;+&lt;/code&gt; および &lt;code&gt;-&lt;/code&gt; と単一の引数）</target>
        </trans-unit>
        <trans-unit id="807ef358de181fc6f5a56bc69f36677531a8d93e" translate="yes" xml:space="preserve">
          <source>Level 1 (Highest) &amp;mdash; Unary Sign Specification &lt;code&gt;+&lt;/code&gt;and&lt;code&gt;-&lt;/code&gt;with a single argument)</source>
          <target state="translated">レベル1（最高）&amp;mdash;単項符号仕様 &lt;code&gt;+&lt;/code&gt; および &lt;code&gt;-&lt;/code&gt; 単一の引数付き）</target>
        </trans-unit>
        <trans-unit id="c1fb74ac0d874a2011af4ed300de85b0a379c044" translate="yes" xml:space="preserve">
          <source>Level 2 &amp;mdash; Exponentiation (&lt;code&gt;**&lt;/code&gt; or &lt;code&gt;^&lt;/code&gt;)</source>
          <target state="translated">レベル2&amp;mdash;べき乗（ &lt;code&gt;**&lt;/code&gt; または &lt;code&gt;^&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c0776e45f0a30777bc589139ec70ff962e33c83c" translate="yes" xml:space="preserve">
          <source>Level 2 &amp;mdash; Exponentiation &lt;code&gt;**&lt;/code&gt;or&lt;code&gt;^&lt;/code&gt;</source>
          <target state="translated">レベル2 &amp;mdash;べき乗 &lt;code&gt;**&lt;/code&gt; または &lt;code&gt;^&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="19f33b8f84b6acbf527317823b1dc97071f87bb0" translate="yes" xml:space="preserve">
          <source>Level 3 &amp;mdash; Multiplication (&lt;code&gt;*&lt;/code&gt;) and division (&lt;code&gt;/&lt;/code&gt;)</source>
          <target state="translated">レベル3&amp;mdash;乗算（ &lt;code&gt;*&lt;/code&gt; ）と除算（ &lt;code&gt;/&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="b6d3eb2924374b17ead104f2e6704337373d534b" translate="yes" xml:space="preserve">
          <source>Level 3 &amp;mdash; Multiplication &lt;code&gt;*&lt;/code&gt; and division &lt;code&gt;/&lt;/code&gt;</source>
          <target state="translated">レベル3 &amp;mdash;乗算 &lt;code&gt;*&lt;/code&gt; および除算 &lt;code&gt;/&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2ff1bbf028b1676dcbed5efec78712eec2eec2f1" translate="yes" xml:space="preserve">
          <source>Level 4 &amp;mdash; Addition (&lt;code&gt;+&lt;/code&gt;) or subtraction (&lt;code&gt;+&lt;/code&gt;)</source>
          <target state="translated">レベル4&amp;mdash;加算（ &lt;code&gt;+&lt;/code&gt; ）または減算（ &lt;code&gt;+&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="76c7a53b8aaf3b4d3d4c40f9ab98b835416a16f8" translate="yes" xml:space="preserve">
          <source>Level 4 &amp;mdash; Addition &lt;code&gt;+&lt;/code&gt; or subtraction &lt;code&gt;+&lt;/code&gt;</source>
          <target state="translated">レベル4 &amp;mdash;加算 &lt;code&gt;+&lt;/code&gt; または減算 &lt;code&gt;+&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5597f96dc9d80c27ec5e33857991562ca948cabc" translate="yes" xml:space="preserve">
          <source>Level Number</source>
          <target state="translated">レベル番号</target>
        </trans-unit>
        <trans-unit id="3052fa9dd47259fbdfdaada2330b8f6e3cbdd9ac" translate="yes" xml:space="preserve">
          <source>Level numbers 66, 77, 78 and 88 all have special uses &amp;mdash; See &lt;a href=&quot;#Special-Data-Items&quot;&gt;Special Data Items&lt;/a&gt;, for details.</source>
          <target state="translated">レベル番号66、77、78、88にはすべて特別な用途があります&amp;mdash;詳細については、&lt;a href=&quot;#Special-Data-Items&quot;&gt;特別なデータ項目&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c40b4c76be763282435e76a210c233701e5f2f23" translate="yes" xml:space="preserve">
          <source>Level numbers 66, 77, 78 and 88 identify special properties of a data description entry.</source>
          <target state="translated">レベル番号66、77、78、88は、データ記述エントリの特別なプロパティを識別します。</target>
        </trans-unit>
        <trans-unit id="f058b290679bb97e2e65e2ade8e908cf0471986c" translate="yes" xml:space="preserve">
          <source>Level numbers in the range 1 through 49 indicate the position of a data item in the hierarchical structure of a logical record. Level numbers in the range 1 through 9 can be written either as a single digit or as a zero followed by the significant digit.</source>
          <target state="translated">1 から 49 までの範囲のレベル番号は、論理レコードの階層構造におけるデータ項目の位置を示します。1 から 9 までの範囲のレベル番号は、1 つの数字として、またはゼロの後に有効数字を続けて書くことができます。</target>
        </trans-unit>
        <trans-unit id="0d0db8c2b020268e4b2e48ddcbb42e59195d905a" translate="yes" xml:space="preserve">
          <source>Licensed under the GNU Free Documentation License.</source>
          <target state="translated">GNUフリー・ドキュメンテーション・ライセンスの下でライセンスされています。</target>
        </trans-unit>
        <trans-unit id="1c7be671b82e536f670976ec80f415fa5dd43afc" translate="yes" xml:space="preserve">
          <source>Like line sequential files, these files should not be defined to contain any exact binary data fields because the contents of those fields could inadvertently have the end-of-record sequence as part of their values &amp;mdash; this would confuse the runtime system when reading the file, and it would interpret that value as an actual end-of-record sequence.</source>
          <target state="translated">行順ファイルと同様に、これらのファイルは、正確なバイナリデータフィールドを含むように定義しないでください。これらのフィールドの内容には、誤ってレコードの終わりのシーケンスが値の一部として含まれる可能性があるため、ランタイムシステムがファイルを読み取るときに混乱します。 、そしてその値を実際のレコード終了シーケンスとして解釈します。</target>
        </trans-unit>
        <trans-unit id="57489ee4e43a2ed5c736dd719377be4582a70ea3" translate="yes" xml:space="preserve">
          <source>Like most other implementations of the COBOL language, GnuCOBOL utilizes a run-time library. When the first program executed in a given execution sequence is a GnuCOBOL program, any run-time library initialization will be performed by the compiled COBOL code in a manner that is transparent to the C-language programmer. If, however, a C program is the first to execute, the burden of performing GnuCOBOL run-time library initialization falls upon the C program. See &lt;a href=&quot;#C-Main-Programs-Calling-GnuCOBOL-Subprograms&quot;&gt;C Main Programs Calling GnuCOBOL Subprograms&lt;/a&gt;, for an example of how to do this.</source>
          <target state="translated">COBOL言語の他のほとんどの実装と同様に、GnuCOBOLはランタイムライブラリを利用します。特定の実行シーケンスで実行される最初のプログラムがGnuCOBOLプログラムである場合、ランタイムライブラリの初期化は、C言語のプログラマに透過的な方法で、コンパイルされたCOBOLコードによって実行されます。ただし、Cプログラムが最初に実行される場合、GnuCOBOLランタイムライブラリの初期化を実行する負担はCプログラムにあります。これを行う方法の例については、「&lt;a href=&quot;#C-Main-Programs-Calling-GnuCOBOL-Subprograms&quot;&gt;CメインプログラムによるGnuCOBOLサブプログラムの呼び出し」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="57fb879374ae97e5eb278f255c02c63fea22e809" translate="yes" xml:space="preserve">
          <source>Line Sequential files are processed using the following statements:</source>
          <target state="translated">ラインシーケンシャルファイルは、以下のステートメントを使用して処理されます。</target>
        </trans-unit>
        <trans-unit id="705ab24e9e88484bd36a188c2786c37738960962" translate="yes" xml:space="preserve">
          <source>Line number beyond which nothing may be printed except for any footing that is to appear on every page. The default for this if not specified is zero, meaning there will be no footings. This value cannot be larger than the &lt;code&gt;LINAGE IS &lt;var&gt;n&lt;/var&gt; LINES&lt;/code&gt; value.</source>
          <target state="translated">すべてのページに表示される基礎を除いて、それを超えると何も印刷されない行番号。指定しない場合、これのデフォルトはゼロです。これは、基礎がないことを意味します。この値は、より大きくすることはできません &lt;code&gt;LINAGE IS &lt;var&gt;n&lt;/var&gt; LINES&lt;/code&gt; 値。</target>
        </trans-unit>
        <trans-unit id="92e97e035f44f8980e413b0d3167603ea36902ee" translate="yes" xml:space="preserve">
          <source>Literal</source>
          <target state="translated">Literal</target>
        </trans-unit>
        <trans-unit id="0f04cc81bf496e196dc1ead869612937cb48371b" translate="yes" xml:space="preserve">
          <source>Literals are constant values that will not change during the execution of a program. There are two fundamental types of literals &amp;mdash; numeric and alphanumeric.</source>
          <target state="translated">リテラルは、プログラムの実行中に変更されない定数値です。リテラルには、数値と英数字の2つの基本的なタイプがあります。</target>
        </trans-unit>
        <trans-unit id="44ac976e13987b2e461319b6b07bf2f1d2977574" translate="yes" xml:space="preserve">
          <source>Little-Endian</source>
          <target state="translated">Little-Endian</target>
        </trans-unit>
        <trans-unit id="226d589b5f25caf9198d123daff4d9daae8eba87" translate="yes" xml:space="preserve">
          <source>Little-endian data allocation calls for the bytes that comprise a binary item to be allocated such that the least-significant byte is the left-most byte. For example, a four-byte binary item having a value of decimal 20 would be little-endian allocated as 14000000 (shown in hexadecimal notation).</source>
          <target state="translated">リトルエンディアンデータの割り当てでは、バイナリ項目を構成するバイトを、最下位のバイトが左端のバイトになるように割り当てます。例えば、10進数20の値を持つ4バイトのバイナリ項目は、14000000としてリトルエンディアンに割り当てられます(16進数表記)。</target>
        </trans-unit>
        <trans-unit id="835de5c115f7b3e75f88f1bf5d8aaf4ad47e0bd8" translate="yes" xml:space="preserve">
          <source>Local-storage cannot be used in nested subprograms.</source>
          <target state="translated">ネストされたサブプログラムでは、ローカルストレージは使用できません。</target>
        </trans-unit>
        <trans-unit id="a5e093ebdd409890bed85c2fed42792048e3ee67" translate="yes" xml:space="preserve">
          <source>Local-storage, if any, is de-allocated.</source>
          <target state="translated">ローカルストレージがある場合は、割り当てを解除します。</target>
        </trans-unit>
        <trans-unit id="3690da6677c866b7070485f97c20dfa1fc2058b7" translate="yes" xml:space="preserve">
          <source>Local-storage, if any, will be allocated and initialized.</source>
          <target state="translated">ローカルストレージがあれば、割り当てられ、初期化されます。</target>
        </trans-unit>
        <trans-unit id="029c39972ba6042647e3f70b02f4bd91260e9fb3" translate="yes" xml:space="preserve">
          <source>Locator</source>
          <target state="translated">Locator</target>
        </trans-unit>
        <trans-unit id="8d02c4cdcb2b9946ab2619bfecc5df1af1b12a02" translate="yes" xml:space="preserve">
          <source>Locks acquired vie multiple record locking remain in-effect until the program holding the lock&amp;hellip;</source>
          <target state="translated">複数のレコードロックを介して取得されたロックは、プログラムがロックを保持するまで有効のままです&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="256b0211cd7dcbaef103250b00102fed3e6e0d1e" translate="yes" xml:space="preserve">
          <source>M.cbl</source>
          <target state="translated">M.cbl</target>
        </trans-unit>
        <trans-unit id="fc3ab2432b8c18e9520aae59030cc15f96a27da9" translate="yes" xml:space="preserve">
          <source>MAGNETIC-TAPE, MANUAL, MASS-UPDATE, MAX-LINES, MAX-PROGRESS, MAX-TEXT, MAX-VAL, MAX, MEAN, MEDIAN, MEDIUM-FONT, MEMORY, MENU, MERGE, MESSAGE, METHOD-ID, METHOD, MIDRANGE, MINUS, MIN-VAL, MIN, MODE, MODIFY, MODULE-CALLER-ID, MODULE-DATE, MODULE-FORMATTED-DATE, MODULE-ID, MODULE-PATH, MODULE-SOURCE, MODULES, MODULE-TIME, MOD, MONETARY-DECIMAL-POINT, MONETARY-THOUSANDS-SEPARATOR, MOVE, MULTILINE, MULTIPLE, MULTIPLY</source>
          <target state="translated">MAGNETIC-TAPE、MANUAL、MASS-UPDATE、MAX-LINE、MAX-PROGRESS、MAX-TEXT、MAX-VAL、MAX、MEAN、MEDIAN、MEDIUM-FONT、MEMORY、MENU、MERGE、MESSAGE、METHOD-ID、METHOD、MIDRANGE、MINUS、MIN-VAL、MIN、MODE、MODIFY。MODULE-CALLER-ID,MODULE-DATE,MODULE-FORMATTED-DATE,MODULE-ID,MODULE-PATH,MODULE-SOURCE,MODULES,MODULE-TIME,MOD,MONETARY-DECIMAL-POINT,MONETARY-THOUSANDS-SEPARATOR,MOVE,MULTILINE,MULTIPLE,MULTIPLY</target>
        </trans-unit>
        <trans-unit id="be9a3c255cc059f59d89184276ee44ce2ff74a47" translate="yes" xml:space="preserve">
          <source>MAGNETIC-TAPE, MANUAL, MAX, MEAN, MEDIAN, MEMORY, MERGE, MESSAGE, METHOD, METHOD-ID, MIDRANGE, MIN, MINUS, MOD, MODE, MODULE-CALLER-ID, MODULE-DATE, MODULE-FORMATTED-DATE, MODULE-ID, MODULE-PATH, MODULES, MODULE-SOURCE, MODULE-TIME, MONETARY-DECIMAL-POINT, MONETARY-THOUSANDS-SEPARATOR, MOVE, MULTIPLE, MULTIPLY</source>
          <target state="translated">MAGNETIC-TAPE,MANUAL,MAX,MEAN,MEDIAN,MEMORY,MERGE,MESSAGE,METHOD,METHOD-ID,MIDRANGE,MIN,MINUS,MOD,MODE,MODULE-CALLER-ID,MODULE-DATE,MODULE-FORMATTED-DATE,MODULE-ID,MODULE-PATH,MODULES,MODULE-SOURCE,MODULE-TIME,MONETARY-DECIMAL-POINT,MONETARY-THHOUSANDS-SEPARATOR,MOVE,MULTIPLE,MULTIPLY</target>
        </trans-unit>
        <trans-unit id="57e71373c55e995e80f24e3f2087d0a7b5dbbec9" translate="yes" xml:space="preserve">
          <source>MAX Function Syntax</source>
          <target state="translated">MAX 関数構文</target>
        </trans-unit>
        <trans-unit id="0abf13bfa8b362e60f0cf8bd2bacaab30d7f67c9" translate="yes" xml:space="preserve">
          <source>MEAN Function Syntax</source>
          <target state="translated">MEAN 関数構文</target>
        </trans-unit>
        <trans-unit id="31a496c910f49ef35450cbdb8cbc4374b9f67273" translate="yes" xml:space="preserve">
          <source>MEDIAN Function Syntax</source>
          <target state="translated">MEDIAN 関数構文</target>
        </trans-unit>
        <trans-unit id="daee7fdd946c270a9b400d0cb5b7e42fe5872e0c" translate="yes" xml:space="preserve">
          <source>MERGE Syntax</source>
          <target state="translated">MERGE 構文</target>
        </trans-unit>
        <trans-unit id="c8035dd19f4b057f89b85a604ee1af37d346e31e" translate="yes" xml:space="preserve">
          <source>MIDRANGE Function Syntax</source>
          <target state="translated">MIDRANGE 関数構文</target>
        </trans-unit>
        <trans-unit id="b3922fba0ffbf0d82c96e71393fb62e945ccf5b9" translate="yes" xml:space="preserve">
          <source>MIN Function Syntax</source>
          <target state="translated">MIN 関数構文</target>
        </trans-unit>
        <trans-unit id="6df76c53746f58160bf9ed45943e438821905bb2" translate="yes" xml:space="preserve">
          <source>MOD Function Syntax</source>
          <target state="translated">MOD 関数構文</target>
        </trans-unit>
        <trans-unit id="fb9072e5497502c8b0c9f0cc92c12083bdb2cecc" translate="yes" xml:space="preserve">
          <source>MODULE-CALLER-ID Function Syntax</source>
          <target state="translated">MODULE-CALLER-ID 関数構文</target>
        </trans-unit>
        <trans-unit id="77023dbd5e71addbd6ecdf7b0de7955c05a7cbcc" translate="yes" xml:space="preserve">
          <source>MODULE-DATE Function Syntax</source>
          <target state="translated">MODULE-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="e4f1aeb1a72fe45f289846eea035900277d6474e" translate="yes" xml:space="preserve">
          <source>MODULE-FORMATTED-DATE Function Syntax</source>
          <target state="translated">MODULE-FORMATTED-DATE 関数構文</target>
        </trans-unit>
        <trans-unit id="e4708a13b25aed7fbcdde2ed7eb4f478e4e5a0d2" translate="yes" xml:space="preserve">
          <source>MODULE-ID Function Syntax</source>
          <target state="translated">MODULE-ID 関数構文</target>
        </trans-unit>
        <trans-unit id="9c157b8be74a13e0253ff0fdbcddcca6237613e4" translate="yes" xml:space="preserve">
          <source>MODULE-PATH Function Syntax</source>
          <target state="translated">MODULE-PATH 関数構文</target>
        </trans-unit>
        <trans-unit id="6aeac5d8bb6edf96b2cc15b2e1900d618339fe87" translate="yes" xml:space="preserve">
          <source>MODULE-SOURCE Function Syntax</source>
          <target state="translated">MODULE-SOURCE 関数構文</target>
        </trans-unit>
        <trans-unit id="9ba6dae63e2adfd381389ee805e05d8f98957c6a" translate="yes" xml:space="preserve">
          <source>MODULE-TIME Function Syntax</source>
          <target state="translated">MODULE-TIME 関数構文</target>
        </trans-unit>
        <trans-unit id="f73ead11798a2b39d355bdb9cc3ee0afd6c73ca2" translate="yes" xml:space="preserve">
          <source>MONETARY-DECIMAL-POINT Function Syntax</source>
          <target state="translated">MONETARY-DECIMAL-POINT 関数構文</target>
        </trans-unit>
        <trans-unit id="f959bf7a22a6fa8fd96fe2dd391a08fa5dd22aa0" translate="yes" xml:space="preserve">
          <source>MONETARY-THOUSANDS-SEPARATOR Function Syntax</source>
          <target state="translated">数千万円単位のセパレータ 関数構文</target>
        </trans-unit>
        <trans-unit id="ec0648f1ef8e6f8e156101c88dcd2b9563d62924" translate="yes" xml:space="preserve">
          <source>MOVE CORRESPONDING Syntax</source>
          <target state="translated">MOVE CORRESPONDING 構文</target>
        </trans-unit>
        <trans-unit id="569fe924e80927234226e1da480e2aaeb896476b" translate="yes" xml:space="preserve">
          <source>MULTIPLY BY Syntax</source>
          <target state="translated">MULTIPLY BY 構文</target>
        </trans-unit>
        <trans-unit id="3ad347c2697684ef0953e3a767d0bc1635d31d5a" translate="yes" xml:space="preserve">
          <source>MULTIPLY GIVING Syntax</source>
          <target state="translated">マルチプルギビング構文</target>
        </trans-unit>
        <trans-unit id="412299ff020a7154d245c3b0f04152fc824d367f" translate="yes" xml:space="preserve">
          <source>Magenta: COB-COLOR-MAGENTA</source>
          <target state="translated">マゼンタ COB-COLOR-MAGENTA</target>
        </trans-unit>
        <trans-unit id="4ad990da0619f2f6612747fd3b18ae051e2e5eca" translate="yes" xml:space="preserve">
          <source>Main Program</source>
          <target state="translated">メインプログラム</target>
        </trans-unit>
        <trans-unit id="62df8b8e9bbaa8bb9f1517aa2bf38f13fc37e36a" translate="yes" xml:space="preserve">
          <source>Main program</source>
          <target state="translated">メインプログラム</target>
        </trans-unit>
        <trans-unit id="154c8bfc5f3e601547791b40d3a205f6ed780b67" translate="yes" xml:space="preserve">
          <source>Main programs compiled in this manner should be executed as follows:</source>
          <target state="translated">このようにしてコンパイルされたメインプログラムは、以下のように実行してください。</target>
        </trans-unit>
        <trans-unit id="ad9766c462696f99f3025a340a18914544b7bff9" translate="yes" xml:space="preserve">
          <source>Main programs that wish to &quot;pass back&quot; a return code value to the operating system when they exit do not use RETURNING - they do so simply by MOVEing a value to the&lt;code&gt;RETURN-CODE&lt;/code&gt;special register.</source>
          <target state="translated">終了時にオペレーティングシステムに戻りコード値を「パスバック」するメインプログラムは、RETURNINGを使用しません。値を &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスターに移動するだけで、RETURNINGが使用されます。</target>
        </trans-unit>
        <trans-unit id="0cb2ae133e90657ae54e6ab6a5c15f115ac565ee" translate="yes" xml:space="preserve">
          <source>Main programs that wish to &amp;ldquo;pass back&amp;rdquo; a return code value to the operating system when they exit do not use &lt;code&gt;RETURNING&lt;/code&gt; - they do so simply by MOVEing a value to the &lt;code&gt;RETURN-CODE&lt;/code&gt; special register.</source>
          <target state="translated">終了時に戻りコード値をオペレーティングシステムに「戻す」ことを希望するメインプログラムは、 &lt;code&gt;RETURNING&lt;/code&gt; を使用しません。これは、値を &lt;code&gt;RETURN-CODE&lt;/code&gt; 特殊レジスタに移動するだけで実行できます。</target>
        </trans-unit>
        <trans-unit id="7a5053f6a0e7ffe3e98db384f4662350eb992d81" translate="yes" xml:space="preserve">
          <source>Management of areas on the printed page such as top-of page headers, bottom-of-page footers, dealing with &quot;full page&quot; situations and the like are now the joint responsibility of the programmer and the GnuCOBOL run-time library, which provides tools such as the&lt;code&gt;LINAGE-COUNTER&lt;/code&gt;special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) and the&lt;code&gt;END-OF-PAGE&lt;/code&gt;</source>
          <target state="translated">トップオブページヘッダー、ボトムオブページフッターなどの印刷ページの領域の管理、「フルページ」の状況への対処などは、プログラマーとGnuCOBOLランタイムライブラリの共同責任です。以下のようなツール &lt;code&gt;LINAGE-COUNTER&lt;/code&gt; 特殊レジスタ（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）と &lt;code&gt;END-OF-PAGE&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="535d01a3bb7e25e935da4ad3d0028806321932cc" translate="yes" xml:space="preserve">
          <source>Management of areas on the printed page such as top-of page headers, bottom-of-page footers, dealing with &quot;full page&quot; situations and the like are the complete responsibility of the programmer.</source>
          <target state="translated">ページ上部のヘッダー、ページ下部のフッター、「全ページ」など、印刷されたページ上の領域の管理は、プログラマーの完全な責任です。</target>
        </trans-unit>
        <trans-unit id="c39f4af3f8ee369d5da98590dfa9970ef82b38d1" translate="yes" xml:space="preserve">
          <source>Management of areas on the printed page such as top-of page headers, bottom-of-page footers, dealing with &amp;ldquo;full page&amp;rdquo; situations and the like are now the joint responsibility of the programmer and the GnuCOBOL run-time library, which provides tools such as the   &lt;code&gt;LINAGE-COUNTER&lt;/code&gt; special register (see &lt;a href=&quot;#Special-Registers&quot;&gt;Special Registers&lt;/a&gt;) and the  &lt;code&gt;END-OF-PAGE&lt;/code&gt; clause to deal with page formatting issues.</source>
          <target state="translated">ページ上部のヘッダー、ページ下部のフッター、「フルページ」の状況への対処など、印刷されたページ上の領域の管理は、プログラマーとGnuCOBOLランタイムライブラリの共同責任になりました。以下のようなツール &lt;code&gt;LINAGE-COUNTER&lt;/code&gt; 特殊レジスタ（参照&lt;a href=&quot;#Special-Registers&quot;&gt;特殊レジスタを&lt;/a&gt;）と &lt;code&gt;END-OF-PAGE&lt;/code&gt; ページの書式設定の問題に対処するための句。</target>
        </trans-unit>
        <trans-unit id="1eae0d85460231010a2eeca71dca39a95cfe258b" translate="yes" xml:space="preserve">
          <source>Management of areas on the printed page such as top-of page headers, bottom-of-page footers, dealing with &amp;ldquo;full page&amp;rdquo; situations and the like are the complete responsibility of the programmer.</source>
          <target state="translated">ページ上部のヘッダー、ページ下部のフッター、「フルページ」の状況への対処など、印刷されたページ上の領域の管理は、プログラマーの完全な責任です。</target>
        </trans-unit>
        <trans-unit id="72c571f7110392bd7e9a608a8c56799f3c875b76" translate="yes" xml:space="preserve">
          <source>Many COBOL compilers do not allow the use of &lt;code&gt;VALUE&lt;/code&gt; and &lt;code&gt;OCCURS&lt;/code&gt; (see &lt;a href=&quot;#OCCURS&quot;&gt;OCCURS&lt;/a&gt;) on the same data item; additionally, they don&amp;rsquo;t allow a &lt;code&gt;VALUE&lt;/code&gt; clause on a data item subordinate to an &lt;code&gt;OCCURS&lt;/code&gt;. GnuCOBOL, however, has neither of these restrictions!</source>
          <target state="translated">多くのCOBOLコンパイラは、同じデータ項目で &lt;code&gt;VALUE&lt;/code&gt; と &lt;code&gt;OCCURS&lt;/code&gt; （&lt;a href=&quot;#OCCURS&quot;&gt;OCCURSを&lt;/a&gt;参照）を使用することを許可していません。さらに、 &lt;code&gt;OCCURS&lt;/code&gt; に従属するデータ項目に &lt;code&gt;VALUE&lt;/code&gt; 句を使用することはできません。ただし、GnuCOBOLにはこれらの制限はありません。</target>
        </trans-unit>
        <trans-unit id="5d904664fde10f48cc22ff0d5ed913f64ac37406" translate="yes" xml:space="preserve">
          <source>Many COBOL compilers do not allow the use of&lt;code&gt;VALUE&lt;/code&gt;and&lt;code&gt;OCCURS&lt;/code&gt;(see &lt;a href=&quot;#OCCURS&quot;&gt;OCCURS&lt;/a&gt;) on the same data item; additionally, they don&amp;rsquo;t allow a&lt;code&gt;VALUE&lt;/code&gt;clause on a data item subordinate to an&lt;code&gt;OCCURS&lt;/code&gt; GnuCOBOL, however, has neither of these restrictions!</source>
          <target state="translated">多くのCOBOLコンパイラーは、同じデータ項目での &lt;code&gt;VALUE&lt;/code&gt; と &lt;code&gt;OCCURS&lt;/code&gt; （&lt;a href=&quot;#OCCURS&quot;&gt;OCCURSを&lt;/a&gt;参照）の使用を許可していません。さらに、 &lt;code&gt;OCCURS&lt;/code&gt; GnuCOBOLに従属するデータ項目での &lt;code&gt;VALUE&lt;/code&gt; 句は許可されませんが、これらの制限はありません！</target>
        </trans-unit>
        <trans-unit id="cec330cac6c061d7cea06b901961f17d2342ed88" translate="yes" xml:space="preserve">
          <source>Many systems have program-development tools available to ease the task of coding programs; those tools that concentrate on COBOL are capable of providing templates for much of the &quot;overhead&quot; verbiage of any program&amp;hellip;</source>
          <target state="translated">多くのシステムには、プログラムのコーディング作業を容易にするためのプログラム開発ツールがあります。COBOLに集中するこれらのツールは、あらゆるプログラムの &quot;オーバーヘッド&quot;表現の多くにテンプレートを提供できます&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="16eba348bc9f50336686ef5cc4e108f9eb85d221" translate="yes" xml:space="preserve">
          <source>Many systems have program-development tools available to ease the task of coding programs; those tools that concentrate on COBOL are capable of providing templates for much of the &amp;ldquo;overhead&amp;rdquo; verbiage of any program&amp;hellip;</source>
          <target state="translated">多くのシステムには、プログラムのコーディング作業を容易にするために利用できるプログラム開発ツールがあります。COBOLに重点を置いたツールは、あらゆるプログラムの「オーバーヘッド」の言い回しの多くにテンプレートを提供することができます&amp;hellip;</target>
        </trans-unit>
        <trans-unit id="bea0e296af322cedefa66548ccd5635e5218df89" translate="yes" xml:space="preserve">
          <source>Many times these businesses are finding the cost of the system/networking engineering, operational management and monitoring and risk management (i.e. disaster recovery) infrastructures necessary to support truly mission-critical applications to be so high that the &quot;less-expensive&quot; solution really isn&amp;rsquo;t; in these cases the mainframe may remain the best option, thus leaving COBOL in play and businesses seeking another solution for at least part of their application base.</source>
          <target state="translated">多くの場合、これらの企業は、真にミッションクリティカルなアプリケーションをサポートするために必要なシステム/ネットワークエンジニアリング、運用管理、監視、およびリスク管理（つまり、災害復旧）インフラストラクチャのコストが非常に高いため、「安価な」ソリューションが実際にはない't;これらの場合、メインフレームが最良のオプションであり続ける可能性があるため、COBOLを活用し、企業はアプリケーションベースの少なくとも一部に別のソリューションを求めています。</target>
        </trans-unit>
        <trans-unit id="2f715c7f265bfdd61e133e71be0ec5656198b750" translate="yes" xml:space="preserve">
          <source>Many times these businesses are finding the cost of the system/networking engineering, operational management and monitoring and risk management (i.e. disaster recovery) infrastructures necessary to support truly mission-critical applications to be so high that the &amp;ldquo;less-expensive&amp;rdquo; solution really isn&amp;rsquo;t; in these cases the mainframe may remain the best option, thus leaving COBOL in play and businesses seeking another solution for at least part of their application base.</source>
          <target state="translated">多くの場合、これらの企業は、真にミッションクリティカルなアプリケーションをサポートするために必要なシステム/ネットワーキングエンジニアリング、運用管理と監視、およびリスク管理（つまり、ディザスタリカバリ）インフラストラクチャのコストが非常に高く、「安価な」ソリューションが実際にはないことに気づいています。 't; このような場合、メインフレームが依然として最良の選択肢である可能性があるため、COBOLを使用したままにし、企業はアプリケーションベースの少なくとも一部に別のソリューションを求めています。</target>
        </trans-unit>
        <trans-unit id="02c05fa5e2daee8ddf4a77057b17571c14977849" translate="yes" xml:space="preserve">
          <source>Marking changes becomes more of a challenge when free-format source code is in effect. Creating a top-of-program comment block to generically describe changes that have been made isn&amp;rsquo;t difficult, even in free-form. What</source>
          <target state="translated">自由形式のソースコードが有効な場合、変更のマーキングはより困難になります。加えられた変更を一般的に説明するためのプログラムの最上位コメントブロックを作成することは、自由形式であっても難しくありません。何</target>
        </trans-unit>
        <trans-unit id="5c7162a608e9a76bc0cf997699b25c2bb027fd85" translate="yes" xml:space="preserve">
          <source>Marking changes becomes more of a challenge when free-format source code is in effect. Creating a top-of-program comment block to generically describe changes that have been made isn&amp;rsquo;t difficult, even in free-form. What IS difficult, however, is coming up with a scheme for per-statement mark up of changes that doesn&amp;rsquo;t introduce a ridiculously excessive number of source lines to the program. I&amp;rsquo;m not sure there is a good answer to this problem (if a reader has one, please let me know). Generally, I&amp;rsquo;ve noticed that shops using free-format conventions for their COBOL source tend to stick with just the top-of-program comment block combined with minimal comment blocks sprinkled throughout the program noting areas that underwent major changes.</source>
          <target state="translated">自由形式のソースコードが有効な場合、変更のマーク付けはより困難になります。加えられた変更を一般的に説明するプログラムのトップのコメントブロックを作成することは、自由形式であっても難しくありません。ただし、難しいのは、ステートメントごとのマークアップのスキームを考案して、プログラムにソース行の数が途方もなく多すぎないようにすることです。この問題に対する適切な答えがあるかどうかはわかりません（読者が持っている場合は、お知らせください）。一般に、COBOLソースに自由形式の規則を使用しているショップは、プログラムの上部にコメントブロックを最小限に抑え、プログラム全体に小さなコメントブロックを配置し、大きな変更が加えられた領域に注意を払う傾向があることに気づきました。</target>
        </trans-unit>
        <trans-unit id="44df495b9a46d581843f66787d274a1a7bcc6fc8" translate="yes" xml:space="preserve">
          <source>Matching up GnuCOBOL numeric Usage s with their C language data type equivalents is possible via the following chart:</source>
          <target state="translated">GnuCOBOLの数値用法とC言語のデータ型の等価物とのマッチングは、以下の表を参照してください。</target>
        </trans-unit>
        <trans-unit id="b2f00dc90e71c34249a20020c959899070b8c43f" translate="yes" xml:space="preserve">
          <source>Matching up GnuCOBOL numeric Usage&amp;rsquo;s with their C language data type equivalents is possible via the following chart:</source>
          <target state="translated">GnuCOBOLの数値の使用法を、同等のC言語のデータ型と照合するには、次のグラフを使用します。</target>
        </trans-unit>
        <trans-unit id="1278cc3d1ceb3c4e92292f1cb7c4a187629fa8a3" translate="yes" xml:space="preserve">
          <source>Max Field</source>
          <target state="translated">最大フィールド</target>
        </trans-unit>
        <trans-unit id="19cd7d185cfd95a703e62d43597e9ae28e0646e5" translate="yes" xml:space="preserve">
          <source>Meaning</source>
          <target state="translated">Meaning</target>
        </trans-unit>
        <trans-unit id="f15a625eabeb2b9b8fbf957ba6acb6ea6384e8c2" translate="yes" xml:space="preserve">
          <source>Meaning if 0</source>
          <target state="translated">0の場合の意味</target>
        </trans-unit>
        <trans-unit id="0b296b5b70a4eb122d3023d41ac6ce6b7484aab3" translate="yes" xml:space="preserve">
          <source>Meaning if 1</source>
          <target state="translated">1の場合の意味</target>
        </trans-unit>
        <trans-unit id="1b4220e0370bfab2a63184640badca2fac263661" translate="yes" xml:space="preserve">
          <source>Mid Dbl Click</source>
          <target state="translated">ミッドDblクリック</target>
        </trans-unit>
        <trans-unit id="9535e3b01f3281dac5bb35122bd26a849b2a9282" translate="yes" xml:space="preserve">
          <source>Mid Pressed</source>
          <target state="translated">ミッドプレス</target>
        </trans-unit>
        <trans-unit id="95b9cc214c1eef97ef2b6df8fd8ea55bec0588af" translate="yes" xml:space="preserve">
          <source>Mid Released</source>
          <target state="translated">ミッドリリース</target>
        </trans-unit>
        <trans-unit id="84025296e15836cc805dc0fcce6f78c345ddda06" translate="yes" xml:space="preserve">
          <source>Module being compiled contains the main program.</source>
          <target state="translated">コンパイルされているモジュールにはメインプログラムが含まれています。</target>
        </trans-unit>
        <trans-unit id="b59a4226fd1a0c6fe0f0ae5ec580ab41c849fe7f" translate="yes" xml:space="preserve">
          <source>Monoalphabetic substitution of one or more characters in a string with different characters</source>
          <target state="translated">文字列内の1つ以上の文字を異なる文字で置換するモノラルアルファベット表記</target>
        </trans-unit>
        <trans-unit id="f99e481919f7772162edf428466c40acaa045b03" translate="yes" xml:space="preserve">
          <source>Most &amp;lt;</source>
          <target state="translated">ほとんど&amp;lt;</target>
        </trans-unit>
        <trans-unit id="924840d8c80007140d8bdc6ad8624d02dec61d6e" translate="yes" xml:space="preserve">
          <source>Most &lt;code&gt;&lt;var&gt;VARYING-Clause&lt;/var&gt;&lt;/code&gt;s have no &lt;code&gt;AFTER&lt;/code&gt; specified. Those that do, however, are establishing a loop-within-a-loop situation where the process described above in steps (&amp;lsquo;</source>
          <target state="translated">ほとんどの &lt;code&gt;&lt;var&gt;VARYING-Clause&lt;/var&gt;&lt;/code&gt; には &lt;code&gt;AFTER&lt;/code&gt; が指定されていません。ただし、そうするものは、上記のプロセスがステップ（ '</target>
        </trans-unit>
        <trans-unit id="ffb0edd87964fd75f70c6e96275eddb4f0d8c34a" translate="yes" xml:space="preserve">
          <source>Most COBOL programmers, when using &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; explicitly or implicitly have developed the habit of using &amp;lsquo;</source>
          <target state="translated">ほとんどのCOBOLプログラマーは、明示的または暗黙的に &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; を使用する場合、 'を使用する習慣を身に付けています。</target>
        </trans-unit>
        <trans-unit id="f9aaebcdc913ba77329c6f07dbfd334a3e319cb4" translate="yes" xml:space="preserve">
          <source>Most COBOL programmers, when using&lt;code&gt;WITH TEST BEFORE&lt;/code&gt;explicitly or implicitly have developed the habit of using &quot;&amp;gt;&quot; rather than &quot;=&quot; on&lt;code&gt;UNTIL&lt;/code&gt;clauses. This would make the sample code:</source>
          <target state="translated">ほとんどのCOBOLプログラマーは、 &lt;code&gt;WITH TEST BEFORE&lt;/code&gt; を明示的または暗黙的に使用する場合、 &lt;code&gt;UNTIL&lt;/code&gt; 句で「=」ではなく「&amp;gt;」を使用する習慣を身につけました。これはサンプルコードを作成します：</target>
        </trans-unit>
        <trans-unit id="af302c911fcda5124147255d68b3ea18b4163a54" translate="yes" xml:space="preserve">
          <source>Most of the call-by-number routines have evolved into even more powerful call-by-name routines, many of which are supported by GnuCOBOL.</source>
          <target state="translated">ほとんどの call-by-number ルーチンは、さらに強力な call-by-name ルーチンへと進化し、その多くは GnuCOBOL でサポートされています。</target>
        </trans-unit>
        <trans-unit id="817d5274cb3dad555ae670d47cd2b238950e0a1b" translate="yes" xml:space="preserve">
          <source>Most other COBOL implementations reject the use of multiple occurrences of multiple floating editing symbols. For example, they would reject &amp;lt;</source>
          <target state="translated">他のほとんどのCOBOL実装は、複数の浮動編集記号の複数の出現の使用を拒否します。たとえば、&amp;lt;</target>
        </trans-unit>
        <trans-unit id="58de159141a408dd736236a21261f443f9261611" translate="yes" xml:space="preserve">
          <source>Most other COBOL implementations reject the use of multiple occurrences of multiple floating editing symbols. For example, they would reject &lt;var&gt;picture-string&lt;/var&gt;s such as &lt;code&gt;+++$$$9.99&lt;/code&gt;, &lt;code&gt;$$$ZZZ9.99&lt;/code&gt; and so on. GnuCOBOL accepts these. Programmers creating GnuCOBOL programs should avoid such &lt;var&gt;picture-string&lt;/var&gt;s if there is any likelihood that those programs may be used with other COBOL implementations.</source>
          <target state="translated">他のほとんどのCOBOL実装は、複数のフローティング編集シンボルの複数回の使用を拒否します。たとえば、 &lt;code&gt;+++$$$9.99&lt;/code&gt; 、 &lt;code&gt;$$$ZZZ9.99&lt;/code&gt; などの &lt;var&gt;picture-string&lt;/var&gt; を拒否します。GnuCOBOLはこれらを受け入れます。GnuCOBOLプログラムを作成するプログラマーは、それらのプログラムが他のCOBOL実装で使用される可能性がある場合は、そのような &lt;var&gt;picture-string&lt;/var&gt; 避ける必要があります。</target>
        </trans-unit>
        <trans-unit id="ae88dcc958cf082a5ddff5e3bffb27559f0abd8e" translate="yes" xml:space="preserve">
          <source>Mouse Key codes are populated only if mouse management has been enabled. To enable mouse it is first necessary to set &lt;code&gt;COB_MOUSE_FLAGS&lt;/code&gt; (either externally via terminal command, or internally via &lt;code&gt;SET ENVIRONMENT&lt;/code&gt; to the applicable ?mouse mask? (specifying which activities you wish the program to detect). Here is an example of setting the mask from a COBOL program:</source>
          <target state="translated">マウスキーコードは、マウス管理が有効になっている場合にのみ入力されます。マウスを有効にするには、最初に &lt;code&gt;COB_MOUSE_FLAGS&lt;/code&gt; を設定する必要があります（外部でターミナルコマンドを使用するか、内部で &lt;code&gt;SET ENVIRONMENT&lt;/code&gt; を使用して該当する「マウスマスク」（プログラムで検出するアクティビティを指定します）を設定します）。 COBOLプログラム：</target>
        </trans-unit>
        <trans-unit id="e99a5dcdcef05304aba95db02a55182cfff694d7" translate="yes" xml:space="preserve">
          <source>Mouse Move</source>
          <target state="translated">マウス移動</target>
        </trans-unit>
        <trans-unit id="bd8dc228cac7dc6165d9a7427a86371a364ab9e9" translate="yes" xml:space="preserve">
          <source>Moving files (a destructive &quot;copy&quot;)</source>
          <target state="translated">ファイルの移動(破壊的な「コピー」)</target>
        </trans-unit>
        <trans-unit id="af7bc5186e5f6587dd7cf943c6a4e4b97482ae2e" translate="yes" xml:space="preserve">
          <source>Moving files (a destructive &amp;ldquo;copy&amp;rdquo;)</source>
          <target state="translated">ファイルの移動（破壊的な「コピー」）</target>
        </trans-unit>
        <trans-unit id="b3170807df2699f5d0529b6da50976a416981ad4" translate="yes" xml:space="preserve">
          <source>Multiple &amp;lsquo;</source>
          <target state="translated">複数 '</target>
        </trans-unit>
        <trans-unit id="c6f6bfc686d3122948fbe2220d2b1d5226a79270" translate="yes" xml:space="preserve">
          <source>Multiple programs, separated from one another by &lt;code&gt;END PROGRAM&lt;/code&gt; or &lt;code&gt;END FUNCTION&lt;/code&gt; statements. The final program in such a source code file need not have an &lt;code&gt;END PROGRAM&lt;/code&gt; or &lt;code&gt;END FUNCTION&lt;/code&gt; statement.</source>
          <target state="translated">&lt;code&gt;END PROGRAM&lt;/code&gt; または &lt;code&gt;END FUNCTION&lt;/code&gt; ステートメントによって互いに分離された複数のプログラム。このようなソースコードファイルの最終プログラムには、 &lt;code&gt;END PROGRAM&lt;/code&gt; または &lt;code&gt;END FUNCTION&lt;/code&gt; ステートメントを含める必要はありません。</target>
        </trans-unit>
        <trans-unit id="8068c142bfb974eaa19e904ed221669dae03ee9c" translate="yes" xml:space="preserve">
          <source>Multiple programs, separated from one another by&lt;code&gt;END PROGRAM&lt;/code&gt;or&lt;code&gt;END FUNCTION&lt;/code&gt;statements. The final program in such a source code file need not have an&lt;code&gt;END PROGRAM&lt;/code&gt;or&lt;code&gt;END FUNCTION&lt;/code&gt;statement.</source>
          <target state="translated">&lt;code&gt;END PROGRAM&lt;/code&gt; または &lt;code&gt;END FUNCTION&lt;/code&gt; ステートメントによって互いに分離された複数のプログラム。このようなソースコードファイルの最後のプログラムには、 &lt;code&gt;END PROGRAM&lt;/code&gt; または &lt;code&gt;END FUNCTION&lt;/code&gt; ステートメントを含める必要はありません。</target>
        </trans-unit>
        <trans-unit id="02160c2d59fcbe5c753ac574ebfed903f459af79" translate="yes" xml:space="preserve">
          <source>Multiple space-delimited tokens may be treated as a single token by enclosing them in quotes. For example, there are only three tokens generated from the command line &lt;code&gt;C:\Pgms\myprog.exe &quot;THIS IS A&quot; TEST&lt;/code&gt; &amp;mdash; &quot;C:\Pgms\myprog.exe&quot;, &quot;THIS IS A&quot; and &quot;TEST&quot;. When quote characters are used to create multi-word tokens, the quote characters themselves are stripped from the token&amp;rsquo;s value.</source>
          <target state="translated">スペースで区切られた複数のトークンは、引用符で囲むことにより、単一のトークンとして扱うことができます。たとえば、コマンドライン &lt;code&gt;C:\Pgms\myprog.exe &quot;THIS IS A&quot; TEST&lt;/code&gt; &amp;mdash; &quot;C：\ Pgms \ myprog.exe&quot;、 &quot;THIS IS A&quot;、および &quot;TEST&quot; から生成されたトークンは3つだけです。引用文字を使用して複数単語のトークンを作成すると、引用文字自体がトークンの値から削除されます。</target>
        </trans-unit>
        <trans-unit id="a00cb7c2ea609150a27e4dadeed928c42c11310c" translate="yes" xml:space="preserve">
          <source>Multiple space-delimited tokens may be treated as a single token by enclosing them in quotes. For example, there are only three tokens generated from the command line &lt;code&gt;C:\Pgms\myprog.exe &amp;lsquo;&lt;samp&gt;THIS IS A&lt;/samp&gt;&amp;rsquo; TEST&lt;/code&gt; &amp;mdash; &amp;lsquo;</source>
          <target state="translated">スペースで区切られた複数のトークンは、引用符で囲むことにより、単一のトークンとして扱うことができます。たとえば、コマンドライン &lt;code&gt;C:\Pgms\myprog.exe &amp;lsquo;&lt;samp&gt;THIS IS A&lt;/samp&gt;&amp;rsquo; TEST&lt;/code&gt; から生成されるトークンは3つだけです。&lt;samp&gt;これは&lt;/samp&gt;'テスト&amp;mdash;'</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
