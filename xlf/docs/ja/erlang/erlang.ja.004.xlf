<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="067548c157769e71e4d10c98809036e28599edec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sup&lt;/code&gt; is the pid, or name, of the supervisor. &lt;code&gt;ChildSpec&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specification&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sup&lt;/code&gt; は、スーパーバイザのPIDまたは名前です。 &lt;code&gt;ChildSpec&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specification&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="32c62fc558f20021c0572ebafb3862fd4a619f74" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sup&lt;/code&gt; is the pid, or name, of the supervisor. &lt;code&gt;Id&lt;/code&gt; is the value associated with the &lt;code&gt;id&lt;/code&gt; key in the &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specification&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sup&lt;/code&gt; は、スーパーバイザのPIDまたは名前です。 &lt;code&gt;Id&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specification&lt;/a&gt;&lt;/code&gt; &lt;code&gt;id&lt;/code&gt; キーに関連付けられた値です。</target>
        </trans-unit>
        <trans-unit id="5ec78464e80c110da5b1eac6351f13eb80a5ed80" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Sup&lt;/code&gt; is the pid, or name, of the supervisor. &lt;code&gt;List&lt;/code&gt; is an arbitrary list of terms, which are added to the list of arguments specified in the child specification. If the start function is specified as &lt;code&gt;{M, F, A}&lt;/code&gt;, the child process is started by calling &lt;code&gt;apply(M, F, A++List)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Sup&lt;/code&gt; は、スーパーバイザのPIDまたは名前です。 &lt;code&gt;List&lt;/code&gt; は、子の仕様で指定された引数のリストに追加される用語の任意のリストです。開始関数が &lt;code&gt;{M, F, A}&lt;/code&gt; として指定されている場合、子プロセスは &lt;code&gt;apply(M, F, A++List)&lt;/code&gt; 呼び出すことによって開始されます。</target>
        </trans-unit>
        <trans-unit id="460edbf3290298779d359d85668f57898859aa85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SupFlags&lt;/code&gt; is the supervisor flags defining the restart strategy and maximum restart intensity for the supervisor. &lt;code&gt;[ChildSpec]&lt;/code&gt; is a list of valid child specifications defining which child processes the supervisor must start and monitor. See the discussion in section &lt;code&gt;&lt;a href=&quot;#supervision_princ&quot;&gt; Supervision Principles&lt;/a&gt;&lt;/code&gt; earlier.</source>
          <target state="translated">&lt;code&gt;SupFlags&lt;/code&gt; は、スーパーバイザの再起動戦略と最大再起動強度を定義するスーパーバイザフラグです。 &lt;code&gt;[ChildSpec]&lt;/code&gt; は、スーパーバイザーが開始および監視する必要のある子プロセスを定義する有効な子仕様のリストです。前述の &lt;code&gt;&lt;a href=&quot;#supervision_princ&quot;&gt; Supervision Principles&lt;/a&gt;&lt;/code&gt; セクションの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="6866c114dc83f135df443bd78176d749dac42bd0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SupFlags&lt;/code&gt; is the supervisor flags defining the restart strategy and maximum restart intensity for the supervisor. &lt;code&gt;[ChildSpec]&lt;/code&gt; is a list of valid child specifications defining which child processes the supervisor must start and monitor. See the discussion in section &lt;code&gt;&lt;a href=&quot;#supervision_princ&quot;&gt;Supervision Principles&lt;/a&gt;&lt;/code&gt; earlier.</source>
          <target state="translated">&lt;code&gt;SupFlags&lt;/code&gt; は、スーパーバイザの再起動戦略と最大再起動強度を定義するスーパーバイザフラグです。 &lt;code&gt;[ChildSpec]&lt;/code&gt; は、スーパーバイザが開始および監視する必要のある子プロセスを定義する有効な子仕様のリストです。前述の &lt;code&gt;&lt;a href=&quot;#supervision_princ&quot;&gt;Supervision Principles&lt;/a&gt;&lt;/code&gt; セクションの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e3f9f0a7c6b85e67abf6de8ea36a8ab7e3288e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Supervisor&lt;/code&gt; is a &lt;code&gt;pid()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Supervisor&lt;/code&gt; は &lt;code&gt;pid()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2f65fd3b3b013850321d377f68286634e39dcd1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Supervisor&lt;/code&gt; is the process that sent the &lt;code&gt;&lt;a href=&quot;#im_ping&quot;&gt;ping&lt;/a&gt;&lt;/code&gt; message (see below).</source>
          <target state="translated">&lt;code&gt;Supervisor&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#im_ping&quot;&gt;ping&lt;/a&gt;&lt;/code&gt; メッセージを送信したプロセスです（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="e1916ee4416fb7ed1fa446767f01655db8628c38" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suspendee&lt;/code&gt; has exited.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; が終了しました。</target>
        </trans-unit>
        <trans-unit id="fc20f6eda7738d395199dbe06ae5b0d9d85ddcb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suspendee&lt;/code&gt; is not suspended. This can only happen when the process that issued this request, have called &lt;code&gt;resume_process(Suspendee)&lt;/code&gt; before getting the reply.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; は一時停止されていません。これは、この要求を発行したプロセスが応答を取得する前に &lt;code&gt;resume_process(Suspendee)&lt;/code&gt; を呼び出した場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="90c6cf98c88bf3f9be9b207efa1b1071451a5720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Suspendee&lt;/code&gt; is now suspended.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; が中断されました。</target>
        </trans-unit>
        <trans-unit id="2a094116829461c921b709f6af6ab2201f90d0c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SuspendeeList&lt;/code&gt; is a list of &lt;code&gt;{Suspendee, ActiveSuspendCount, OutstandingSuspendCount}&lt;/code&gt; tuples. &lt;code&gt;Suspendee&lt;/code&gt; is the process identifier of a process that has been, or is to be, suspended by the process identified by &lt;code&gt;Pid&lt;/code&gt; through the BIF &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt; erlang:suspend_process/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#suspend_process-1&quot;&gt; erlang:suspend_process/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SuspendeeList&lt;/code&gt; は、 &lt;code&gt;{Suspendee, ActiveSuspendCount, OutstandingSuspendCount}&lt;/code&gt; タプルのリストです。 &lt;code&gt;Suspendee&lt;/code&gt; は、BIF &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt; erlang:suspend_process/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#suspend_process-1&quot;&gt; erlang:suspend_process/1&lt;/a&gt;&lt;/code&gt; を介して &lt;code&gt;Pid&lt;/code&gt; によって識別されたプロセスによって中断された、または中断される予定のプロセスのプロセス識別子です。</target>
        </trans-unit>
        <trans-unit id="d54734126b89a060080087f71ef2770bcb2de77e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SuspendeeList&lt;/code&gt; is a list of &lt;code&gt;{Suspendee, ActiveSuspendCount, OutstandingSuspendCount}&lt;/code&gt; tuples. &lt;code&gt;Suspendee&lt;/code&gt; is the process identifier of a process that has been, or is to be, suspended by the process identified by &lt;code&gt;Pid&lt;/code&gt; through the BIF &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt;erlang:suspend_process/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#suspend_process-1&quot;&gt;erlang:suspend_process/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SuspendeeList&lt;/code&gt; は、 &lt;code&gt;{Suspendee, ActiveSuspendCount, OutstandingSuspendCount}&lt;/code&gt; タプルのリストです。 &lt;code&gt;Suspendee&lt;/code&gt; は、BIF &lt;code&gt;&lt;a href=&quot;#suspend_process-2&quot;&gt;erlang:suspend_process/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#suspend_process-1&quot;&gt;erlang:suspend_process/1&lt;/a&gt;&lt;/code&gt; を介して &lt;code&gt;Pid&lt;/code&gt; によって識別されたプロセスによって中断された、または中断されるプロセスのプロセス識別子です。</target>
        </trans-unit>
        <trans-unit id="5cd92387ceb2c7a572789e4afc4839e9fe9ca683" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Svc&lt;/code&gt; contains capabilities passed to &lt;code&gt;&lt;a href=&quot;diameter#start_service-2&quot;&gt;diameter:start_service/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt;, values passed to the latter overriding those passed to the former.</source>
          <target state="translated">&lt;code&gt;Svc&lt;/code&gt; には、 &lt;code&gt;&lt;a href=&quot;diameter#start_service-2&quot;&gt;diameter:start_service/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; に渡される機能が含まれ、後者に渡される値は前者に渡される値をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="a402b9d8bd683db9c283f83f8c74883867023b6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;SystemVariable&lt;/code&gt; is one of the variables in the system group, or &lt;code&gt;snmpEnableAuthenTraps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SystemVariable&lt;/code&gt; は、システムグループの変数の1つ、または &lt;code&gt;snmpEnableAuthenTraps&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b844f33bf239fa8d0a86ad1eeafb729237a25c98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TF&lt;/code&gt; is the traversal function. The &lt;code&gt;qlc&lt;/code&gt; module requires that there is a way of traversing all objects of the data structure. &lt;code&gt;gb_trees&lt;/code&gt; has an iterator function suitable for that purpose. Notice that for each object returned, a new fun is created. As long as the list is not terminated by &lt;code&gt;[]&lt;/code&gt;, it is assumed that the tail of the list is a nullary function and that calling the function returns further objects (and functions).</source>
          <target state="translated">&lt;code&gt;TF&lt;/code&gt; はトラバーサル関数です。 &lt;code&gt;qlc&lt;/code&gt; モジュールは、データ構造のすべてのオブジェクトをトラバースする方法があることが必要です。 &lt;code&gt;gb_trees&lt;/code&gt; には、その目的に適した反復関数があります。返されるオブジェクトごとに、新しいfunが作成されることに注意してください。リストが &lt;code&gt;[]&lt;/code&gt; で終わっていない限り、リストの末尾はnullary関数であり、関数を呼び出すとさらにオブジェクト（および関数）が返されると想定されます。</target>
        </trans-unit>
        <trans-unit id="3fe4b498bdcc1fb31677fe24cd47e6201e2e05cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TMask&lt;/code&gt; is specified just as &lt;code&gt;Addr&lt;/code&gt; or as &lt;code&gt;[]&lt;/code&gt;. Note in particular that using a list of 6 bytes for IPv4 or 8 words plus 2 bytes for IPv6 are still valid address formats so old configurations will work.</source>
          <target state="translated">&lt;code&gt;TMask&lt;/code&gt; は、単に &lt;code&gt;Addr&lt;/code&gt; または &lt;code&gt;[]&lt;/code&gt; として指定されます。特に、IPv4の場合は6バイト、IPv6の場合は8ワード+ 2バイトのリストを使用してもアドレス形式は有効であるため、古い構成でも機能します。</target>
        </trans-unit>
        <trans-unit id="0bbdfd41feedba1352568719b11a64967eab950f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Table&lt;/code&gt; is the table involved in the operation.</source>
          <target state="translated">&lt;code&gt;Table&lt;/code&gt; は、操作に関係するテーブルです。</target>
        </trans-unit>
        <trans-unit id="f0156836e921347e207318056ec391e0b2930d86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TableName&lt;/code&gt; is an atom for a table in the database. When no name is supplied, the whole database is shown.</source>
          <target state="translated">&lt;code&gt;TableName&lt;/code&gt; は、データベース内のテーブルのアトムです。名前を指定しないと、データベース全体が表示されます。</target>
        </trans-unit>
        <trans-unit id="2ef4ea77e073716a3ca2d965101e9ee1b211e268" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tag&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;Tag&lt;/code&gt; は文字列です。</target>
        </trans-unit>
        <trans-unit id="26e0e3c2a78a3aad190ff2b1e42bd0eab94095c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tag&lt;/code&gt; must be an atom, while &lt;code&gt;Value&lt;/code&gt; must be a literal term. As a convenience in user-defined attributes, if the literal term &lt;code&gt;Value&lt;/code&gt; has the syntax &lt;code&gt;Name/Arity&lt;/code&gt; (where &lt;code&gt;Name&lt;/code&gt; is an atom and &lt;code&gt;Arity&lt;/code&gt; a positive integer), the term &lt;code&gt;Name/Arity&lt;/code&gt; is translated to &lt;code&gt;{Name,Arity}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tag&lt;/code&gt; はアトムでなければならず、 &lt;code&gt;Value&lt;/code&gt; はリテラルの用語でなければなりません。ユーザー定義属性の便宜上、リテラル用語 &lt;code&gt;Value&lt;/code&gt; の構文が &lt;code&gt;Name/Arity&lt;/code&gt; （ &lt;code&gt;Name&lt;/code&gt; はアトム、 &lt;code&gt;Arity&lt;/code&gt; は正の整数）の場合、 &lt;code&gt;Name/Arity&lt;/code&gt; は &lt;code&gt;{Name,Arity}&lt;/code&gt; 変換されます。</target>
        </trans-unit>
        <trans-unit id="197c1b267dff91b08762fcb0cb594ba840e6d6ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TagList&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;TagList&lt;/code&gt; は文字列です。</target>
        </trans-unit>
        <trans-unit id="bfe297e92d037daf7e7d31a3a3f0d2cea549e23b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TarDesc&lt;/code&gt; is then used:</source>
          <target state="translated">&lt;code&gt;TarDesc&lt;/code&gt; 次に、TarDescが使用されます。</target>
        </trans-unit>
        <trans-unit id="3816b3f47c45930bf6b1483d0c60e6a23dcf4422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TargetMod&lt;/code&gt; is a module that exports the functions &lt;code&gt;connect(Ip, Port, KeepAlive, Extra)&lt;/code&gt; and &lt;code&gt;get_prompt_regexp()&lt;/code&gt; for the specified &lt;code&gt;TargetType&lt;/code&gt; (for example, &lt;code&gt;unix_telnet&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;TargetMod&lt;/code&gt; は、指定された &lt;code&gt;TargetType&lt;/code&gt; （ &lt;code&gt;unix_telnet&lt;/code&gt; など）の関数 &lt;code&gt;connect(Ip, Port, KeepAlive, Extra)&lt;/code&gt; および &lt;code&gt;get_prompt_regexp()&lt;/code&gt; をエクスポートするモジュールです。</target>
        </trans-unit>
        <trans-unit id="110b4f4976f97dba92b7c62cc8f8c14319655e19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TargetName&lt;/code&gt; is a &lt;strong&gt;unique&lt;/strong&gt;&lt;strong&gt;non-empty&lt;/strong&gt; string.</source>
          <target state="translated">&lt;code&gt;TargetName&lt;/code&gt; は、&lt;strong&gt;空でない&lt;/strong&gt;&lt;strong&gt;一意の&lt;/strong&gt;文字列です。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58318ac65af2831df4aec6c88b10fdba5c7bd413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TargetName&lt;/code&gt; is a non-empty string, uniquely identifying the agent.</source>
          <target state="translated">&lt;code&gt;TargetName&lt;/code&gt; は空ではない文字列で、エージェントを一意に識別します。</target>
        </trans-unit>
        <trans-unit id="1c6a2d40316eeec9bbfd1aae3d737f8d562e530c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TargetName&lt;/code&gt; is a unique non-empty string.</source>
          <target state="translated">&lt;code&gt;TargetName&lt;/code&gt; は、空でない一意の文字列です。</target>
        </trans-unit>
        <trans-unit id="a56e60b23176db0cb2d2d95c2eafaaa18c7c1f5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Term&lt;/code&gt; and &lt;code&gt;Pattern&lt;/code&gt; are compared and any unbound variables in &lt;code&gt;Pattern&lt;/code&gt; are bound to corresponding values in &lt;code&gt;Term&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; と &lt;code&gt;Pattern&lt;/code&gt; が比較され、 &lt;code&gt;Pattern&lt;/code&gt; 内のバインドされていない変数は、 &lt;code&gt;Term&lt;/code&gt; 内の対応する値にバインドされます。</target>
        </trans-unit>
        <trans-unit id="bf476955e74f9154602025a23e3e5cae87c2ace9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Term&lt;/code&gt; is an Erlang term that we wish to match against &lt;code&gt;Pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Term&lt;/code&gt; は、 &lt;code&gt;Pattern&lt;/code&gt; と照合したいアーラン用語です。</target>
        </trans-unit>
        <trans-unit id="0f3c1fd31c4e11f6e32cba2acc95aa631ef1a055" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TestRunnerPid&lt;/code&gt; is returned if &lt;code&gt;release_shell == true&lt;/code&gt;. For details, see &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;TestRunnerPid&lt;/code&gt; は、 &lt;code&gt;release_shell == true&lt;/code&gt; 場合に返されます。詳細については、 &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ac7c5d090304206771de9956f277e657e4d709f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TestSpecs&lt;/code&gt; is either the name of a test specification file (string) or a list of test specifications. If it is a list, the specifications are handled (and the corresponding tests executed) in sequence. An element in a &lt;code&gt;TestSpecs&lt;/code&gt; list can also be list of test specifications. The specifications in such a list are merged into one combined specification before test execution.</source>
          <target state="translated">&lt;code&gt;TestSpecs&lt;/code&gt; は、テスト仕様ファイルの名前（文字列）またはテスト仕様のリストです。リストの場合は、仕様が順番に処理され（対応するテストが実行され）ます。 &lt;code&gt;TestSpecs&lt;/code&gt; リストの要素は、テスト仕様のリストにすることもできます。そのようなリストの仕様は、テストの実行前に1つの結合仕様にマージされます。</target>
        </trans-unit>
        <trans-unit id="d81834531a603d737b666471ac079013bd166a16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tests = integer()&lt;/code&gt;, number of tests.</source>
          <target state="translated">&lt;code&gt;Tests = integer()&lt;/code&gt; 、テストの数。</target>
        </trans-unit>
        <trans-unit id="d2ab37503e0f5d591f2ef9a8d69441935dc0621d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout = integer()&lt;/code&gt; specifies how many milliseconds to wait before restarting the application at another node. It defaults to 0.</source>
          <target state="translated">&lt;code&gt;Timeout = integer()&lt;/code&gt; は、別のノードでアプリケーションを再起動するまでに待機するミリ秒数を指定します。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="1f12197e5f73601f07d80574f4fe8292d8a488f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; can also be a tuple &lt;code&gt;{clean_timeout,T}&lt;/code&gt; or &lt;code&gt;{dirty_timeout,T}&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the time-out time. &lt;code&gt;{clean_timeout,T}&lt;/code&gt; works like just &lt;code&gt;T&lt;/code&gt; described in the note above and uses a proxy process while &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; bypasses the proxy process which is more lightweight.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、タプル &lt;code&gt;{clean_timeout,T}&lt;/code&gt; または &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; にすることもできます &lt;code&gt;T&lt;/code&gt; はタイムアウト時間です。 &lt;code&gt;{clean_timeout,T}&lt;/code&gt; は、上記のメモで説明した &lt;code&gt;T&lt;/code&gt; と同じように機能し、プロキシプロセスを使用しますが、 &lt;code&gt;{dirty_timeout,T}&lt;/code&gt; は、より軽量なプロキシプロセスをバイパスします。</target>
        </trans-unit>
        <trans-unit id="215dd1441c7a7f4cf2328f29cce8b0be80081cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer &amp;gt; 0, which specifies how many milliseconds to wait for a reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely, which is the default. If no reply is received within the specified time, the function call fails.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は0 より大きい整数で、応答を待機するミリ秒数を指定するか、アトム &lt;code&gt;infinity&lt;/code&gt; が無期限に待機する（デフォルト）。指定した時間内に応答がない場合、関数呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="011d9f71bfc5974e239f39bd3079f6a8ecf96f60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer &amp;gt; 0, which specifies how many milliseconds to wait for the server to terminate, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If the server does not terminate within the specified time, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は0 より大きい整数で、サーバーの終了を待機するミリ秒数、またはアトム &lt;code&gt;infinity&lt;/code&gt; が無期限に待機する時間を指定します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。サーバーが指定された時間内に終了しない場合、 &lt;code&gt;timeout&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="cce26af6f0b969072f77bb631d40ef61dff02358" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for a reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to 5000. If no reply is received within the specified time, the function call fails.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、応答を待機するミリ秒数、または &lt;code&gt;infinity&lt;/code&gt; に待機するアトム無限大を指定するゼロより大きい整数です。デフォルトは5000です。指定した時間内に応答がない場合、関数呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="19ea6b4ba0c408aac46d4d54817adbdb89d5b3c8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for a reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to 5000. If no reply is received within the specified time, the function call fails. If the caller catches the failure and continues running, and the server is just late with the reply, it can arrive at any time later into the message queue of the caller. The caller must in this case be prepared for this and discard any such garbage messages that are two element tuples with a reference as the first element.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、応答を待機するミリ秒数、または &lt;code&gt;infinity&lt;/code&gt; に待機するアトム無限大を指定するゼロより大きい整数です。デフォルトは5000です。指定した時間内に応答がない場合、関数呼び出しは失敗します。呼び出し元が障害をキャッチして実行を継続し、サーバーが応答に遅れた場合、いつでも呼び出し元のメッセージキューに到着できます。この場合、呼び出し元はこれに備えて、最初の要素として参照を持つ2つの要素タプルであるそのようなガベージメッセージを破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="2a545390927615be3be95ee2e3e869ac058d8bc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for each reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If no reply is received from a node within the specified time, the node is added to &lt;code&gt;BadNodes&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、各応答を待機するミリ秒数を指定するゼロより大きい整数、または無期限に待機するアトム &lt;code&gt;infinity&lt;/code&gt; です。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。指定された時間内にノードから応答が受信されない場合、ノードは &lt;code&gt;BadNodes&lt;/code&gt; に追加されます。</target>
        </trans-unit>
        <trans-unit id="d491898fa68143f83f4eb3b922d722a2efee0e58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for the event manager to terminate, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If the event manager has not terminated within the specified time, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; はゼロより大きい整数で、イベントマネージャが終了するまで待機するミリ秒数、またはアトム &lt;code&gt;infinity&lt;/code&gt; が無期限に待機する時間を指定します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。イベントマネージャが指定された時間内に終了しない場合、 &lt;code&gt;timeout&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="3aff9a13c5adb8de3081f2e611e5f7eef5cbf9d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater than zero that specifies how many milliseconds to wait for the server to terminate, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If the server has not terminated within the specified time, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、サーバーが終了するまで待機するミリ秒数、または &lt;code&gt;infinity&lt;/code&gt; に待機するアトム無限大を指定するゼロより大きい整数です。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。サーバーが指定された時間内に終了しない場合、 &lt;code&gt;timeout&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="c11e6784f81fc677fa902c4a3bb79c03fd8b314a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater then or equal to zero that specifies how many milliseconds to wait for an reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. Defaults to &lt;code&gt;infinity&lt;/code&gt;. If no reply is received within the specified time, the function returns &lt;code&gt;timeout&lt;/code&gt; and no cleanup is done, and thus the function can be invoked repeatedly until a reply is returned.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、ゼロ以上の整数であり、応答を待機するミリ秒数、または無期限に待機するアトム &lt;code&gt;infinity&lt;/code&gt; を指定します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。指定された時間内に応答がない場合、関数は &lt;code&gt;timeout&lt;/code&gt; を返し、クリーンアップは実行されないため、応答が返されるまで関数を繰り返し呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="edc7a440278ec2451bdbab55bd52b1aef6b38854" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater then or equal to zero that specifies how many milliseconds to wait for an reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. If no reply is received within the specified time, the function returns &lt;code&gt;timeout&lt;/code&gt; and no cleanup is done, and thus the function can be invoked repeatedly until a reply is returned.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、ゼロ以上の整数であり、応答を待機するミリ秒数、または無期限に待機するアトム &lt;code&gt;infinity&lt;/code&gt; を指定します。指定された時間内に応答がない場合、関数は &lt;code&gt;timeout&lt;/code&gt; を返し、クリーンアップは実行されないため、応答が返されるまで関数を繰り返し呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="fc81c1b6ed710efa4121dd1084794ef0400341c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer greater then or equal to zero that specifies how many milliseconds to wait for an reply, or the atom &lt;code&gt;infinity&lt;/code&gt; to wait indefinitely. If no reply is received within the specified time, the function returns &lt;code&gt;timeout&lt;/code&gt; and no cleanup is done, and thus the function must be invoked repeatedly until a reply is returned.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、ゼロ以上の整数であり、応答を待機するミリ秒数、または無期限に待機するアトム &lt;code&gt;infinity&lt;/code&gt; を指定します。指定された時間内に応答が受信されない場合、関数は &lt;code&gt;timeout&lt;/code&gt; を返し、クリーンアップは実行されないため、応答が返されるまで関数を繰り返し呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b00c0031f23e811b5959b8ca6b50758268da0686" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は整数です。</target>
        </trans-unit>
        <trans-unit id="377d8c0756c1e9c50e682ef984f4232bfe3daa1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is not the atom &lt;code&gt;infinity&lt;/code&gt; or an integer in valid range.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は、アトムの &lt;code&gt;infinity&lt;/code&gt; または有効な範囲の整数ではありません。</target>
        </trans-unit>
        <trans-unit id="09ab16be1768304f7b3ae52beebf6843b75263fa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Timeout&lt;/code&gt; is re-transmission timeout (&lt;code&gt;infinity&lt;/code&gt; | integer).</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; は再送信タイムアウトです（ &lt;code&gt;infinity&lt;/code&gt; |整数）。</target>
        </trans-unit>
        <trans-unit id="4e5785b9fdc7aa04bf49182adc0a5c87197b2eab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Title&lt;/code&gt; will be the title of one result table</source>
          <target state="translated">&lt;code&gt;Title&lt;/code&gt; 1つの結果テーブルのタイトルになります</target>
        </trans-unit>
        <trans-unit id="36032d5c1155f9053b9b358a83bd315f89ea768e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is a list of &lt;code&gt;{Address, SecData}&lt;/code&gt; tuples i.e the destination addresses and their corresponding security parameters. This value is normally sent to &lt;code&gt;snmpa_mpd:generate_message/4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; は &lt;code&gt;{Address, SecData}&lt;/code&gt; タプルのリストです。つまり、宛先アドレスとそれに対応するセキュリティパラメータです。通常、この値は &lt;code&gt;snmpa_mpd:generate_message/4&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="e3d75fff4d3df97c5e4a676379dc6d3b23205c1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is a list of destination addresses and their corresponding security parameters. This value is received in the same message from the agent and then transformed trough &lt;code&gt;&lt;a href=&quot;#process_taddrs&quot;&gt;process_taddrs&lt;/a&gt;&lt;/code&gt; before passed to this function.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; は、宛先アドレスとそれに対応するセキュリティパラメータのリストです。この値はエージェントから同じメッセージで受信され、この関数に渡される前に &lt;code&gt;&lt;a href=&quot;#process_taddrs&quot;&gt;process_taddrs&lt;/a&gt;&lt;/code&gt; を介して変換されます。</target>
        </trans-unit>
        <trans-unit id="6090b48b5079de11448a798d690887f63ce36f70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is of the same type as the first argument to &lt;code&gt;gen_server:reply/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; は、 &lt;code&gt;gen_server:reply/2&lt;/code&gt; の最初の引数と同じタイプです。</target>
        </trans-unit>
        <trans-unit id="9993964574fee446677e91b643685f5bf0d565c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is of the same type as the first argument to &lt;code&gt;gen_statem:reply/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; は、 &lt;code&gt;gen_statem:reply/2&lt;/code&gt; の最初の引数と同じタイプです。</target>
        </trans-unit>
        <trans-unit id="a81d51ec2c3ae7ef365362e3fa993d2c65d6fbc4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;To&lt;/code&gt; is the destination &lt;code&gt;Address&lt;/code&gt; that comes from the &lt;code&gt;From&lt;/code&gt; field in the corresponding &lt;code&gt;snmp_pdu&lt;/code&gt; message previously sent to the MasterAgent.</source>
          <target state="translated">&lt;code&gt;To&lt;/code&gt; は、以前に &lt;code&gt;snmp_pdu&lt;/code&gt; 送信された、対応するsnmp_pduメッセージの &lt;code&gt;From&lt;/code&gt; フィールドからの宛先 &lt;code&gt;Address&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc19d9af430281397afd69b96199ad787711bbc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tokens&lt;/code&gt; are the Erlang tokens from &lt;code&gt;String&lt;/code&gt;. &lt;code&gt;EndLocation&lt;/code&gt; is the first location after the last token.</source>
          <target state="translated">&lt;code&gt;Tokens&lt;/code&gt; は &lt;code&gt;String&lt;/code&gt; のErlangトークンです。 &lt;code&gt;EndLocation&lt;/code&gt; は、最後のトークンの後の最初の場所です。</target>
        </trans-unit>
        <trans-unit id="e71b6178fb3f5623b522a62907f6a2520e1b70cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Toks1&lt;/code&gt; is a tail of &lt;code&gt;Tree&lt;/code&gt; that contains symbols encountered after the structure that was correctly parsed.</source>
          <target state="translated">&lt;code&gt;Toks1&lt;/code&gt; は、正しく解析された構造の後に出現したシンボルを含む &lt;code&gt;Tree&lt;/code&gt; のテールです。</target>
        </trans-unit>
        <trans-unit id="6cd6d06f77d587468003982f885e5ec5c02e9a2f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Toks&lt;/code&gt; is the list of tokens to be parsed. A successful parse returns &lt;code&gt;{ok, Tree, Toks1}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Toks&lt;/code&gt; は、解析されるトークンのリストです。解析が成功すると &lt;code&gt;{ok, Tree, Toks1}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="6751800615a1cb23fcc3c1f7501055d38d9b53af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir.Suite.Case&lt;/code&gt; (only &lt;code&gt;Case&lt;/code&gt; executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir.Suite.Case&lt;/code&gt; （実行された &lt;code&gt;Case&lt;/code&gt; のみ）</target>
        </trans-unit>
        <trans-unit id="4c056acdec22d7bfe5f76c418b61c2b6a38aaa75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir.Suite:cases&lt;/code&gt; (specific test cases executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir.Suite:cases&lt;/code&gt; （実行された特定のテストケース）</target>
        </trans-unit>
        <trans-unit id="53a4e7815a1b5ed03c8521155ca5d53f619655f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir.Suite&lt;/code&gt; (all cases in &lt;code&gt;Suite&lt;/code&gt; executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir.Suite&lt;/code&gt; （実行された &lt;code&gt;Suite&lt;/code&gt; すべてのケース）</target>
        </trans-unit>
        <trans-unit id="b0c25c2ac8ada173e3ada323fedd5e473bc8fc57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir:suites&lt;/code&gt; (specific suites executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir:suites&lt;/code&gt; （実行された特定のスイート）</target>
        </trans-unit>
        <trans-unit id="3c900707be7126a57aeae34e26cf071a34d5bc6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TopLevelDir.TestDir&lt;/code&gt; (all suites in &lt;code&gt;TestDir&lt;/code&gt; executed)</source>
          <target state="translated">&lt;code&gt;TopLevelDir.TestDir&lt;/code&gt; （ &lt;code&gt;TestDir&lt;/code&gt; のすべてのスイートが実行されます）</target>
        </trans-unit>
        <trans-unit id="b3c728124c4ee20bb4ed11c28dc23eb6ec9d1bf6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TotalSize&lt;/code&gt; is the total size of the carrier, including its header.</source>
          <target state="translated">&lt;code&gt;TotalSize&lt;/code&gt; は、ヘッダーを含むキャリアの合計サイズです。</target>
        </trans-unit>
        <trans-unit id="0459fa483f3ecb25277426566103557b3c846abb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TransportTag&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;TransportTag&lt;/code&gt; は文字列です。</target>
        </trans-unit>
        <trans-unit id="c21d9eef6e37bcd0c4a7b122aab8b0580e5c7a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Trap&lt;/code&gt; is either an SNMP pdu record or an trappdu record, as defined in &lt;code&gt;snmp_types.hrl&lt;/code&gt;, with the SNMP request.</source>
          <target state="translated">&lt;code&gt;Trap&lt;/code&gt; は、SNMP要求を使用した、 &lt;code&gt;snmp_types.hrl&lt;/code&gt; で定義されているSNMP pduレコードまたはtrappduレコードのいずれかです。</target>
        </trans-unit>
        <trans-unit id="65dd984c5baa99a7d4646077d3ee4d1d44ac88e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tree&lt;/code&gt; is a parse tree.</source>
          <target state="translated">&lt;code&gt;Tree&lt;/code&gt; は解析ツリーです。</target>
        </trans-unit>
        <trans-unit id="2aba2002f72fe530f98fd7101e061e4b3297f1a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Tree&lt;/code&gt; is composed of nodes of the form &lt;code&gt;{Key, Value, Smaller, Bigger}&lt;/code&gt; and the &quot;empty tree&quot; node &lt;code&gt;nil&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Tree&lt;/code&gt; は、 &lt;code&gt;{Key, Value, Smaller, Bigger}&lt;/code&gt; という形式のノードと「空のツリー」ノード &lt;code&gt;nil&lt;/code&gt; で構成されます。</target>
        </trans-unit>
        <trans-unit id="c0e09fc0cdcfd3b13f03705a9747a48dbd8225ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; - As defined in the child specification.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; -子仕様で定義されているとおり。</target>
        </trans-unit>
        <trans-unit id="cf4c43f92c2af697a01e28db83e4dd71f728f48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; can be one of the following atoms: &lt;code&gt;process&lt;/code&gt;, &lt;code&gt;port&lt;/code&gt; or &lt;code&gt;time_offset&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は、次のアトムのいずれかになります： &lt;code&gt;process&lt;/code&gt; 、 &lt;code&gt;port&lt;/code&gt; または &lt;code&gt;time_offset&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="61183d8e316d16b3aa5c4554b988cdbba5dc340e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; can be one of the following:</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="4385c3e5e9c975a726b306526b500f71a36eb85b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; defaults to &lt;code&gt;permanent&lt;/code&gt; and specifies the start type of the application. If &lt;code&gt;Type = permanent | transient | temporary&lt;/code&gt;, the application is loaded and started in the corresponding way, see &lt;code&gt;application(3)&lt;/code&gt;. If &lt;code&gt;Type = load&lt;/code&gt;, the application is only loaded. If &lt;code&gt;Type = none&lt;/code&gt;, the application is not loaded and not started, although the code for its modules is loaded.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; デフォルトは &lt;code&gt;permanent&lt;/code&gt; で、アプリケーションの開始タイプを指定します。 &lt;code&gt;Type = permanent | transient | temporary&lt;/code&gt; 場合| 一時的| temporary、アプリケーションは対応する方法でロードおよび開始されます &lt;code&gt;application(3)&lt;/code&gt; 参照してください。場合 &lt;code&gt;Type = load&lt;/code&gt; 、アプリケーションにのみロードされます。 &lt;code&gt;Type = none&lt;/code&gt; 場合、モジュールのコードは読み込まれますが、アプリケーションは読み込まれず、起動されません。</target>
        </trans-unit>
        <trans-unit id="9cfc3a7edcd24c74f970e9b734e9adadd2b58068" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; determines which mac algorithm to use in the MAC operation.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は、MAC操作で使用するMACアルゴリズムを決定します。</target>
        </trans-unit>
        <trans-unit id="1a821d99536316865b2c699500c68f9bdc5a4a7c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; indicates whether the transport process in question is being started for a connecting (&lt;code&gt;Type=connect&lt;/code&gt;) or listening (&lt;code&gt;Type=accept&lt;/code&gt;) transport. In the latter case, transport processes are started as required to accept connections from multiple peers.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は、問題のトランスポートプロセスが接続（ &lt;code&gt;Type=connect&lt;/code&gt; ）またはリスニング（ &lt;code&gt;Type=accept&lt;/code&gt; ）トランスポートに対して開始されているかどうかを示します。後者の場合、複数のピアからの接続を受け入れるために必要なトランスポートプロセスが開始されます。</target>
        </trans-unit>
        <trans-unit id="caa2a7b6c0d3d07c66b2ba1852eb95b6ad894452" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;local&lt;/code&gt; or &lt;code&gt;external&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は &lt;code&gt;local&lt;/code&gt; または &lt;code&gt;external&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="21a3d803e336bd6545c9bb32aaf535f91c6cd58b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;trap&lt;/code&gt; or &lt;code&gt;inform&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は &lt;code&gt;trap&lt;/code&gt; または &lt;code&gt;inform&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="78a42ed7b9af09a90a6a1a7f72087dce6cf5aaa9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is the &lt;code&gt;#pdu.type&lt;/code&gt; of the original request.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は、元のリクエストの &lt;code&gt;#pdu.type&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="474c526b3a9922a8544184a9fea2d5525d45e1a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is the allocation category that the blocks belong to, e.g. &lt;code&gt;db_term&lt;/code&gt;, &lt;code&gt;message&lt;/code&gt; or &lt;code&gt;binary&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は、ブロックが属する割り当てカテゴリです（例： &lt;code&gt;db_term&lt;/code&gt; 、 &lt;code&gt;message&lt;/code&gt; または &lt;code&gt;binary&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="7f588287c1752d7a84c22fc8bac47e0998fd6580" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt; is the log type as specified by the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; は、 &lt;code&gt;open/1&lt;/code&gt; オプション &lt;code&gt;type&lt;/code&gt; 指定されたログタイプです。</target>
        </trans-unit>
        <trans-unit id="86f3e21045c0b286b88a7bf8195dcc67e9c22f4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Type&lt;/code&gt;s:</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt;s:</target>
        </trans-unit>
        <trans-unit id="d742e2818a5942c0c8ad73169e0d207bcb488c4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;TypeSpecifierList&lt;/code&gt; is a list of type specifiers, in any order, separated by hyphens (-). Default values are used for any omitted type specifiers.</source>
          <target state="translated">&lt;code&gt;TypeSpecifierList&lt;/code&gt; は、ハイフン（-）で区切られた、任意の順序の型指定子のリストです。省略された型指定子にはデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="a6f854978f4d26e8bf1b337746390f7a670e3302" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt; is a subset of &lt;code&gt;XU&lt;/code&gt; (the unknown functions are a subset of the externally used functions since the compiler ensures that locally used functions are defined);</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; は &lt;code&gt;XU&lt;/code&gt; のサブセットです（コンパイラーはローカルで使用される関数が確実に定義されるため、不明な関数は外部で使用される関数のサブセットです）。</target>
        </trans-unit>
        <trans-unit id="898c75cebff3b4805c07d2121c4d51fc7f18c417" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;U&lt;/code&gt; is a subset of &lt;code&gt;XU&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;U&lt;/code&gt; は &lt;code&gt;XU&lt;/code&gt; のサブセットです。</target>
        </trans-unit>
        <trans-unit id="692cf8ef50be5b3d2f0e042185cef7f3bd34073c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URLPath = string()&lt;/code&gt; and &lt;code&gt;AllowedModule = atom()&lt;/code&gt;. &lt;code&gt;erl_script_alias&lt;/code&gt; marks all URLs matching url-path as erl scheme scripts. A matching URL is mapped into a specific module and function, for example:</source>
          <target state="translated">&lt;code&gt;URLPath = string()&lt;/code&gt; および &lt;code&gt;AllowedModule = atom()&lt;/code&gt; 。 &lt;code&gt;erl_script_alias&lt;/code&gt; は、url-pathに一致するすべてのURLをerlスキームスクリプトとしてマークします。一致するURLは特定のモジュールと関数にマッピングされます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="e3fcbaddb590a3c617dece38aa9d0f190c6b03c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;URLPath = string()&lt;/code&gt; and &lt;code&gt;AllowedModule = atom()&lt;/code&gt;. Same as &lt;code&gt;erl_script_alias&lt;/code&gt; but for scripts using the eval scheme. This is only supported for backwards compatibility. The eval scheme is deprecated.</source>
          <target state="translated">&lt;code&gt;URLPath = string()&lt;/code&gt; および &lt;code&gt;AllowedModule = atom()&lt;/code&gt; 。 &lt;code&gt;erl_script_alias&lt;/code&gt; と同じですが、evalスキームを使用するスクリプト用です。これは、下位互換性のためにのみサポートされています。evalスキームは非推奨です。</target>
        </trans-unit>
        <trans-unit id="322839b0f6f88285a20d1f7922bf13b73c9fe7d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;USE_VM_PROBES&lt;/code&gt; - 1 if the runtime system is compiled to use VM probes (support for dtrace or systemtap), 0 otherwise.</source>
          <target state="translated">&lt;code&gt;USE_VM_PROBES&lt;/code&gt; -ランタイムシステムがVMプローブ（dtraceまたはsystemtapのサポート）を使用するようにコンパイルされている場合は1、それ以外の場合は0。</target>
        </trans-unit>
        <trans-unit id="56aaf7274c51ed95f7dca6ce7cf373f53f104484" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt; (the unused functions are defined in analyzed modules).</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; は &lt;code&gt;F&lt;/code&gt; のサブセットです（未使用の関数は分析されたモジュールで定義されます）。</target>
        </trans-unit>
        <trans-unit id="923f18e488650bde9c66947168e35c3510bff3c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is a subset of &lt;code&gt;F&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; は &lt;code&gt;F&lt;/code&gt; のサブセットです。</target>
        </trans-unit>
        <trans-unit id="985635c99efb3d556bc5a1bd15f0d0809ae440a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is equal to &lt;code&gt;F&amp;nbsp;-&amp;nbsp;(XU&amp;nbsp;+&amp;nbsp;LU)&lt;/code&gt; (the unused functions are defined functions that are neither used externally nor locally);</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; は &lt;code&gt;F&amp;nbsp;-&amp;nbsp;(XU&amp;nbsp;+&amp;nbsp;LU)&lt;/code&gt; 等しい（未使用の関数は、外部でもローカルでも使用されない定義済み関数です）。</target>
        </trans-unit>
        <trans-unit id="a6ad183e880144b686df72a44944a8942cb3f72a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UU&lt;/code&gt; is equal to &lt;code&gt;V - (XU + LU)&lt;/code&gt;, where &lt;code&gt;LU&lt;/code&gt; and &lt;code&gt;XU&lt;/code&gt; may have elements in common. Put in another way:</source>
          <target state="translated">&lt;code&gt;UU&lt;/code&gt; は &lt;code&gt;V - (XU + LU)&lt;/code&gt; と等しく、 &lt;code&gt;LU&lt;/code&gt; と &lt;code&gt;XU&lt;/code&gt; は共通の要素を持つことができます。別の言い方をすると：</target>
        </trans-unit>
        <trans-unit id="6a37ede7bba99908c3022cc088f335a2bc827250" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uniq&lt;/code&gt; (a binary) is a unique value for this fun. It is calculated from the compiled code for the entire module.</source>
          <target state="translated">&lt;code&gt;Uniq&lt;/code&gt; （バイナリ）は、この楽しみのためのユニークな値です。モジュール全体のコンパイル済みコードから計算されます。</target>
        </trans-unit>
        <trans-unit id="978d04a9f4220b7460a6bb0a4cd9469028d7122d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Uniq&lt;/code&gt; (an integer) is a unique value for this fun. As from Erlang/OTP R15, this integer is calculated from the compiled code for the entire module. Before Erlang/OTP R15, this integer was based on only the body of the fun.</source>
          <target state="translated">&lt;code&gt;Uniq&lt;/code&gt; （整数）は、この楽しみのユニークな値です。Erlang / OTP R15と同様に、この整数はモジュール全体のコンパイル済みコードから計算されます。Erlang / OTP R15以前は、この整数は楽しみの本体のみに基づいていました。</target>
        </trans-unit>
        <trans-unit id="b831d0ef7e2c0b7e197c7d455d68c63a0d8fb048" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Unused&lt;/code&gt; is kept for backward compatibility.</source>
          <target state="translated">&lt;code&gt;Unused&lt;/code&gt; は下位互換性のために保持されます。</target>
        </trans-unit>
        <trans-unit id="77b2f412b2fb0912036dac462a9a4e4850f5bdf0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Up&lt;/code&gt; - Scrolls a few &lt;code&gt;Events&lt;/code&gt; backwards.</source>
          <target state="translated">&lt;code&gt;Up&lt;/code&gt; -いくつかの &lt;code&gt;Events&lt;/code&gt; 逆方向にスクロールします。</target>
        </trans-unit>
        <trans-unit id="850108996895fb2380a6485c752faf8c898a91ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserData&lt;/code&gt; is any term (passed on to the user when calling the &lt;code&gt;UserMod&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;UserData&lt;/code&gt; は任意の用語です（ &lt;code&gt;UserMod&lt;/code&gt; を呼び出すときにユーザーに渡されます）。</target>
        </trans-unit>
        <trans-unit id="f09467cf53584d767e4c5e69e967429a82ad2714" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserId&lt;/code&gt; is any term (used to uniquely identify the user).</source>
          <target state="translated">&lt;code&gt;UserId&lt;/code&gt; は任意の用語です（ユーザーを一意に識別するために使用されます）。</target>
        </trans-unit>
        <trans-unit id="22808b8a3c6d7b84d5745416d67571f11e1a0442" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserId&lt;/code&gt; is the identity of the &lt;strong&gt;manager user&lt;/strong&gt; responsible for this agent (term).</source>
          <target state="translated">&lt;code&gt;UserId&lt;/code&gt; は、このエージェント（term）を担当する&lt;strong&gt;マネージャーユーザーの&lt;/strong&gt; IDです。</target>
        </trans-unit>
        <trans-unit id="b9d22184964dda04a4d08ccfc2be8b52eaedeee6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserMod&lt;/code&gt; is the user callback module (atom).</source>
          <target state="translated">&lt;code&gt;UserMod&lt;/code&gt; はユーザーコールバックモジュール（アトム）です。</target>
        </trans-unit>
        <trans-unit id="2521b3d0d73fad2c771ef3561fd8380204b50113" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserName&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;UserName&lt;/code&gt; は文字列です。</target>
        </trans-unit>
        <trans-unit id="1ca9127303df3ff21e5a17edd24b25a7dc70cb28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserSkipped = integer()&lt;/code&gt;, current number of user-skipped test cases.</source>
          <target state="translated">&lt;code&gt;UserSkipped = integer()&lt;/code&gt; 、ユーザーがスキップしたテストケースの現在の数。</target>
        </trans-unit>
        <trans-unit id="e51e2e7486a7b928ab3d073c838ff2142d45244b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;UserTerm = term()&lt;/code&gt;, any data specified by user, or &lt;code&gt;exit/1&lt;/code&gt; information.</source>
          <target state="translated">&lt;code&gt;UserTerm = term()&lt;/code&gt; 、ユーザーが指定したデータ、または &lt;code&gt;exit/1&lt;/code&gt; 情報。</target>
        </trans-unit>
        <trans-unit id="b2c3b6cd47ef5163f721ec91a2f369ed108802f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Users&lt;/code&gt; is the number of anonymous users of the log, see the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;&lt;a href=&quot;#linkto&quot;&gt;linkto&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Users&lt;/code&gt; はログの匿名ユーザーの数 &lt;code&gt;&lt;a href=&quot;#linkto&quot;&gt;linkto&lt;/a&gt;&lt;/code&gt; &lt;code&gt;open/1&lt;/code&gt; オプションlinktoを参照してください。</target>
        </trans-unit>
        <trans-unit id="ed4cd6a7c66d0b27c2526a87a5235887da7fa0c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;V&lt;/code&gt; is equal to &lt;code&gt;UU + XU + LU&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;V&lt;/code&gt; は &lt;code&gt;UU + XU + LU&lt;/code&gt; 等しい。</target>
        </trans-unit>
        <trans-unit id="13864afd22295498915949c8328005e8401306ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;V&lt;/code&gt; is equal to &lt;code&gt;X + L + B + U&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;U&lt;/code&gt; are pairwise disjoint (that is, have no elements in common).</source>
          <target state="translated">&lt;code&gt;V&lt;/code&gt; は &lt;code&gt;X + L + B + U&lt;/code&gt; に等しく、 &lt;code&gt;X&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; 、および &lt;code&gt;U&lt;/code&gt; はペアワイズディスジョイント（つまり、共通の要素がない）です。</target>
        </trans-unit>
        <trans-unit id="d3b45dda6645d1ad036aa3e2e0d7b212c1824905" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Val =&lt;/code&gt;&lt;code&gt;os:env_var_value()&lt;/code&gt;&lt;code&gt;| false&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Val =&lt;/code&gt; &lt;code&gt;os:env_var_value()&lt;/code&gt; &lt;code&gt;| false&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b9962cc66b1d0ac5b6d7fe0959e6ad5260006baa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value = Calls&lt;/code&gt; which is the number of times the module, function, or clause has been called. In the case of line level analysis, &lt;code&gt;Calls&lt;/code&gt; is the number of times the line has been executed.</source>
          <target state="translated">&lt;code&gt;Value = Calls&lt;/code&gt; は、モジュール、関数、または句が呼び出された回数です。ラインレベル分析の場合、 &lt;code&gt;Calls&lt;/code&gt; はラインが実行された回数です。</target>
        </trans-unit>
        <trans-unit id="d6f5604e0a71deea504de90e82a4af07fa943256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value = {Cov,NotCov}&lt;/code&gt; where &lt;code&gt;Cov&lt;/code&gt; is the number of executable lines in the module, function, clause or line that have been executed at least once and &lt;code&gt;NotCov&lt;/code&gt; is the number of executable lines that have not been executed.</source>
          <target state="translated">&lt;code&gt;Value = {Cov,NotCov}&lt;/code&gt; ここで、 &lt;code&gt;Cov&lt;/code&gt; はモジュール、関数、句、 &lt;code&gt;NotCov&lt;/code&gt; で少なくとも1回実行された実行可能行の数であり、NotCovは実行されていない実行可能行の数です。</target>
        </trans-unit>
        <trans-unit id="baee74f8aa36dfbcf94704bdd32a05e6ae0af5ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is a list of &lt;code&gt;{Domain, Addr}&lt;/code&gt; tuples or &lt;code&gt;Domain&lt;/code&gt; atoms.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; は、 &lt;code&gt;{Domain, Addr}&lt;/code&gt; タプルまたは &lt;code&gt;Domain&lt;/code&gt; アトムのリストです。</target>
        </trans-unit>
        <trans-unit id="b7b4a7e9e0cc8b0f9454280487bec8d861f8ef24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is a list of nodes that Mnesia is to try to connect to. &lt;code&gt;ReturnValue&lt;/code&gt; is those nodes in &lt;code&gt;Value&lt;/code&gt; that Mnesia is connected to.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; は、Mnesiaが接続を試みるノードのリストです。 &lt;code&gt;ReturnValue&lt;/code&gt; は、Mnesiaが接続されている &lt;code&gt;Value&lt;/code&gt; 内のノードです。</target>
        </trans-unit>
        <trans-unit id="72846c6b4da6ad54d3d04e819f5408ac00adfc90" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is a number. See the description in &lt;code&gt;&lt;a href=&quot;#configuration_parameters&quot;&gt;Section Configuration Parameters&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ReturnValue&lt;/code&gt; is the new value. Notice that this configuration parameter is not persistent. It is lost when Mnesia has stopped.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; は数値です。 &lt;code&gt;&lt;a href=&quot;#configuration_parameters&quot;&gt;Section Configuration Parameters&lt;/a&gt;&lt;/code&gt; 説明を参照してください。 &lt;code&gt;ReturnValue&lt;/code&gt; は新しい値です。この構成パラメーターは永続的ではないことに注意してください。Mnesiaが停止すると失われます。</target>
        </trans-unit>
        <trans-unit id="1f22d08710d3e6e26eba94834579e768d366c20b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is the value for the variable.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; は変数の値です。</target>
        </trans-unit>
        <trans-unit id="f62230dbd1849de5dc78c615fa8ef9a53f0ff6ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Value&lt;/code&gt; is the value of the local function and &lt;code&gt;NewBindings&lt;/code&gt; are the updated variable bindings. In this case, the function handler must itself evaluate all the function arguments and manage the bindings. To signal an error, the function handler calls &lt;code&gt;exit/1&lt;/code&gt; with a suitable exit value.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; はローカル関数の値で、 &lt;code&gt;NewBindings&lt;/code&gt; は更新された変数バインディングです。この場合、関数ハンドラー自体がすべての関数引数を評価し、バインディングを管理する必要があります。エラーを通知するために、関数ハンドラーは適切な終了値で &lt;code&gt;exit/1&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3f0a3eea786c80eae5b545d3520742c7013b454e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;VarName&lt;/code&gt; is not allowed to contain an &lt;code&gt;$=&lt;/code&gt; character. Previous implementations used to just let the &lt;code&gt;$=&lt;/code&gt; character through which silently caused erroneous results. Current implementation will instead throw a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;VarName&lt;/code&gt; に &lt;code&gt;$=&lt;/code&gt; 文字を含めることはできません。以前の実装では、 &lt;code&gt;$=&lt;/code&gt; 文字をそのまま使用して、誤って誤った結果を引き起こしていました。現在の実装では、代わりに &lt;code&gt;badarg&lt;/code&gt; 例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="0fc30d9332cb5cfec95e997882c52b8354b7ce68" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Varbinds&lt;/code&gt; is a list of &lt;code&gt;Varbind&lt;/code&gt;, where each &lt;code&gt;Varbind&lt;/code&gt; is one of:</source>
          <target state="translated">&lt;code&gt;Varbinds&lt;/code&gt; のリストです &lt;code&gt;Varbind&lt;/code&gt; それぞれ、 &lt;code&gt;Varbind&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="3e677cce83d72c68f0f465cb2703534bb5e400c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Variable&lt;/code&gt; is one of the following:</source>
          <target state="translated">&lt;code&gt;Variable&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="721a9626bd422fd41c8d0315e98d9fdd147f0bb6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Variable&lt;/code&gt; is the name of an snmp counter that represents the error, e.g. &lt;code&gt;snmpInBadCommunityUses&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Variable&lt;/code&gt; は、エラーを表すsnmpカウンターの名前です（例： &lt;code&gt;snmpInBadCommunityUses&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="0d2e705985127250e1520f53cd10886301c014c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Verbosity&lt;/code&gt; selects the number of warnings:</source>
          <target state="translated">&lt;code&gt;Verbosity&lt;/code&gt; は警告の数を選択します：</target>
        </trans-unit>
        <trans-unit id="fa81f8262be8a5db9d978a99dd1429afc1b0f466" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Version&lt;/code&gt; is a list of integers (but not a string) representing the version of the &lt;code&gt;malloc()&lt;/code&gt; implementation used.</source>
          <target state="translated">&lt;code&gt;Version&lt;/code&gt; は、使用される &lt;code&gt;malloc()&lt;/code&gt; 実装のバージョンを表す整数（文字列ではない）のリストです。</target>
        </trans-unit>
        <trans-unit id="5ede0ab7783eb1db9dd131beaf71db55e5b5ec5c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Version&lt;/code&gt; is the version (v1 | v2 | v3).</source>
          <target state="translated">&lt;code&gt;Version&lt;/code&gt; はバージョンです（v1 | v2 | v3）。</target>
        </trans-unit>
        <trans-unit id="d8fdc13f8c9dec6bd7182368d2888e4d44f478cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vertical scroll&lt;/code&gt; - Use mouse wheel and up/down arrows to scroll little. Use page up/down and home/end buttons to scroll more.</source>
          <target state="translated">&lt;code&gt;Vertical scroll&lt;/code&gt; -マウスホイールと上/下矢印を使用して少しスクロールします。さらにスクロールするには、ページアップ/ダウンボタンとホーム/終了ボタンを使用します。</target>
        </trans-unit>
        <trans-unit id="043fc434cfc73c5942afd1a187be1469249995f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewIndex&lt;/code&gt; is an integer.</source>
          <target state="translated">&lt;code&gt;ViewIndex&lt;/code&gt; は整数です。</target>
        </trans-unit>
        <trans-unit id="003ad343d524731748fa7e406e57075b3e7e6e88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewMask&lt;/code&gt; is either &lt;code&gt;null&lt;/code&gt; or a list of ones and zeros. Ones nominate that an exact match is used for this sub-identifier. Zeros are wild-cards which match any sub-identifier. If the mask is shorter than the sub-tree, the tail is regarded as all ones. &lt;code&gt;null&lt;/code&gt; is shorthand for a mask with all ones.</source>
          <target state="translated">&lt;code&gt;ViewMask&lt;/code&gt; は &lt;code&gt;null&lt;/code&gt; または1と0のリストです。このサブ識別子に完全一致が使用されていることを示します。ゼロは、任意のサブ識別子と一致するワイルドカードです。マスクがサブツリーより短い場合、テールはすべて1と見なされます。 &lt;code&gt;null&lt;/code&gt; は、すべて1のマスクの省略形です。</target>
        </trans-unit>
        <trans-unit id="a48f36a84da2ba75598f614390ad3b91426f84b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewStatus&lt;/code&gt; is either &lt;code&gt;included&lt;/code&gt; or &lt;code&gt;excluded&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ViewStatus&lt;/code&gt; は &lt;code&gt;included&lt;/code&gt; か &lt;code&gt;excluded&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3975efbe626e831a2efa0b407d3965e89ef55890" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ViewSubtree&lt;/code&gt; is a list of integer.</source>
          <target state="translated">&lt;code&gt;ViewSubtree&lt;/code&gt; は整数のリストです。</target>
        </trans-unit>
        <trans-unit id="18aed3b4e846ed1f46169b8da859862cf66f91f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt; is either &lt;code&gt;'version-1'&lt;/code&gt;, &lt;code&gt;'version-2'&lt;/code&gt;, or &lt;code&gt;'version-3'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; は &lt;code&gt;'version-1'&lt;/code&gt; 、 &lt;code&gt;'version-2'&lt;/code&gt; 、または &lt;code&gt;'version-3'&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="21d2c2d7d6fb04eb51d34b2892169d49616585df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt; is the version of the unpacked release, as defined in its &lt;code&gt;.rel&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; は、 &lt;code&gt;.rel&lt;/code&gt; ファイルで定義されている、解凍されたリリースのバージョンです。</target>
        </trans-unit>
        <trans-unit id="cf1e2347ff1a47b8054894bc5ee840c48e283af8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt; translates into &lt;code&gt;MPModel&lt;/code&gt; and &lt;code&gt;SecModel&lt;/code&gt; as follows:</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; は、次のように &lt;code&gt;MPModel&lt;/code&gt; と &lt;code&gt;SecModel&lt;/code&gt; に変換されます。</target>
        </trans-unit>
        <trans-unit id="539a0b79730e7fe2753fa19b8c1f70811d5cdce8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Vsn&lt;/code&gt;, a string, is the current version of the application, as defined in the &lt;code&gt;.app&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;Vsn&lt;/code&gt; 文字列であるVsnは、 &lt;code&gt;.app&lt;/code&gt; ファイルで定義されているアプリケーションの現在のバージョンです。</target>
        </trans-unit>
        <trans-unit id="1db214a4a5c535ec32f34424da109c2edef46aea" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;W&lt;/code&gt; - Untagged integer or pointer. Not possible to pack with other operands.</source>
          <target state="translated">&lt;code&gt;W&lt;/code&gt; -タグなし整数またはポインタ。他のオペランドと一緒にパックすることはできません。</target>
        </trans-unit>
        <trans-unit id="1d74b48eb4dafe5b1a84d39c7571b47db235583a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Warnings&lt;/code&gt; is the list of error descriptors of all &lt;code&gt;warning_marker&lt;/code&gt; nodes that occur in &lt;code&gt;Forms&lt;/code&gt;. The order of listing is not defined.</source>
          <target state="translated">&lt;code&gt;Warnings&lt;/code&gt; は、 &lt;code&gt;Forms&lt;/code&gt; で発生するすべての &lt;code&gt;warning_marker&lt;/code&gt; ノードのエラー記述子のリストです。リストの順序は定義されていません。</target>
        </trans-unit>
        <trans-unit id="2b12237380545e4bf33fbb504a64fcae9ffd1e9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WindowBits&lt;/code&gt; is the base two logarithm of the maximum window size (the size of the history buffer). It is to be in the range 8 through 15. Default to 15 if &lt;code&gt;&lt;a href=&quot;#inflateInit-1&quot;&gt;inflateInit/1&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;WindowBits&lt;/code&gt; は、最大ウィンドウサイズ（履歴バッファーのサイズ）の2を底とする対数です。8から15の範囲です &lt;code&gt;&lt;a href=&quot;#inflateInit-1&quot;&gt;inflateInit/1&lt;/a&gt;&lt;/code&gt; を使用する場合、デフォルトは15です。</target>
        </trans-unit>
        <trans-unit id="67643a3996b12f24a2be5b13581df35894f74afa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;Worst&lt;/code&gt; is the pid and number of allocated bytes of the largest Erlang process on the node. If &lt;code&gt;memsup&lt;/code&gt; should not collect process data, that is if the configuration parameter &lt;code&gt;memsup_system_only&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Worst&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Worst&lt;/code&gt; は、ノード上の最大のErlangプロセスのpidおよび割り当てられたバイト数です。 &lt;code&gt;memsup&lt;/code&gt; がプロセスデータを収集しない場合、つまり構成パラメーター &lt;code&gt;memsup_system_only&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合、 &lt;code&gt;Worst&lt;/code&gt; は &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6b531ca937cb5f2bc8d867b283a607daa9fa7067" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;WriteView&lt;/code&gt; is a string.</source>
          <target state="translated">&lt;code&gt;WriteView&lt;/code&gt; は文字列です。</target>
        </trans-unit>
        <trans-unit id="71485d56546b0beefd97ba59c6341b838a69db4e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;XU&lt;/code&gt; is equal to &lt;code&gt;range XC&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XU&lt;/code&gt; は &lt;code&gt;range XC&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="b55b14897dffa6289441d6eec18178caacd827ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[Address = string()]&lt;/code&gt; The contents of &lt;code&gt;Address&lt;/code&gt; is server dependent.</source>
          <target state="translated">&lt;code&gt;[Address = string()]&lt;/code&gt; &lt;code&gt;Address&lt;/code&gt; の内容はサーバーに依存します。</target>
        </trans-unit>
        <trans-unit id="58843a980ea15f66b4f7ac4eb722358bcaea97c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[X || X &amp;lt;- T, X &amp;gt;= Pivot]&lt;/code&gt; is the list of all elements in &lt;code&gt;T&lt;/code&gt; that are greater than or equal to &lt;code&gt;Pivot&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[X || X &amp;lt;- T, X &amp;gt;= Pivot]&lt;/code&gt; は、 &lt;code&gt;T&lt;/code&gt; 内で &lt;code&gt;Pivot&lt;/code&gt; 以上のすべての要素のリストです。</target>
        </trans-unit>
        <trans-unit id="dea3522b3a4df1d03b0280b5a307ea6a99e0fa56" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; - An empty list indicates that the erlang scanner should be used.</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; -空のリストは、erlangスキャナーを使用する必要があることを示します。</target>
        </trans-unit>
        <trans-unit id="f1a5dbac4542b98d3918ab1701aa9b17885cf7cc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; - Encodes the messages to the standard distribution format. It is rather verbose but encoding and decoding is blinding fast.</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; -メッセージを標準の配布形式にエンコードします。かなり冗長ですが、エンコードとデコードは高速です。</target>
        </trans-unit>
        <trans-unit id="6c891c0bdf07c0c81085ac2c512cee221239be01" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; - Translated into a list of the own node: &lt;code&gt;[node()]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; -自身のノードのリストに変換されます： &lt;code&gt;[node()]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7aa73ff63e63b1712133831888e0ae7bf769ff2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[]&lt;/code&gt; is a list, thus</source>
          <target state="translated">&lt;code&gt;[]&lt;/code&gt; はリストなので、</target>
        </trans-unit>
        <trans-unit id="aa2de75acee60f52e83af54911ecab2fefde928b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[a|[b|[c|[]]]]&lt;/code&gt; is a list, or in short &lt;code&gt;[a,b,c]&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;[a|[b|[c|[]]]]&lt;/code&gt; はリスト、または略して &lt;code&gt;[a,b,c]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="750d5e9c1dd1fee3cefa4cddb1d680d4b85ef850" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[b|[c|[]]]&lt;/code&gt; is a list, thus</source>
          <target state="translated">&lt;code&gt;[b|[c|[]]]&lt;/code&gt; はリストなので、</target>
        </trans-unit>
        <trans-unit id="0202ab521e4c16fbff04b0cfab46068d12850e94" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[compressed]&lt;/code&gt; - Encodes the messages to a compressed form of the standard distribution format. It is less verbose, but the encoding and decoding will on the other hand be slower.</source>
          <target state="translated">&lt;code&gt;[compressed]&lt;/code&gt; -メッセージを標準の配布形式の圧縮形式にエンコードします。冗長度は低くなりますが、エンコードとデコードは遅くなります。</target>
        </trans-unit>
        <trans-unit id="63387f3e32b6c484f5f5e51cb1368ac62f111ef9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[c|[]]&lt;/code&gt; is a list, thus</source>
          <target state="translated">&lt;code&gt;[c|[]]&lt;/code&gt; はリストなので、</target>
        </trans-unit>
        <trans-unit id="d1ac90eb55ddae0ac46e10c6c8ccb4a49a75c07b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[erlang, mnesia, otp]&lt;/code&gt; is a list of three direct references to three different &lt;code&gt;projects&lt;/code&gt; records.</source>
          <target state="translated">&lt;code&gt;[erlang, mnesia, otp]&lt;/code&gt; は、3つの異なる &lt;code&gt;projects&lt;/code&gt; レコードへの3つの直接参照のリストです。</target>
        </trans-unit>
        <trans-unit id="70194f0f6e78d3b9d059251ec3e1ee77938ce1d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[integer()]&lt;/code&gt; - A list containing the size (the number of bits) of each level. Example: &lt;code&gt;[3,8,5,8]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[integer()]&lt;/code&gt; -各レベルのサイズ（ビット数）を含むリスト。例： &lt;code&gt;[3,8,5,8]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0c182d51ea654aead7a970e38ac9d8f31da1f5c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[megaco_compressed]&lt;/code&gt; - Encodes the messages to the standard distribution format after an internal transformation. It is less verbose, but the total time of the encoding and decoding will on the other hand be somewhat slower (see the &lt;code&gt;&lt;a href=&quot;megaco_performance&quot;&gt;performance&lt;/a&gt;&lt;/code&gt; chapter for more info).</source>
          <target state="translated">&lt;code&gt;[megaco_compressed]&lt;/code&gt; -内部変換後、メッセージを標準配布形式にエンコードします。冗長ではありませんが、エンコードとデコードの合計時間はやや遅くなります（詳細については、 &lt;code&gt;&lt;a href=&quot;megaco_performance&quot;&gt;performance&lt;/a&gt;&lt;/code&gt; 章を参照してください）。</target>
        </trans-unit>
        <trans-unit id="43866a70271e9e7412e1575a585b4c57bb5da68c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[native]&lt;/code&gt; - skips the transformation phase, i.e. the decoded message(s) will not be transformed into our internal form.</source>
          <target state="translated">&lt;code&gt;[native]&lt;/code&gt; -変換フェーズをスキップします。つまり、デコードされたメッセージは内部形式に変換されません。</target>
        </trans-unit>
        <trans-unit id="1b77d9eaa24a5dc309ea50d131abb91effdda6a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[{flex, port()}]&lt;/code&gt; - Use the flex scanner when decoding (not optimized for SMP). See &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;[{flex, port()}]&lt;/code&gt; -デコード時にflexスキャナーを使用します（SMP用に最適化されていません）。詳細については、 &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3499321580179f3fe8caf62b26b14282cb7f2190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[{flex, ports()}]&lt;/code&gt; - Use the flex scanner when decoding (optimized for SMP). See &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;[{flex, ports()}]&lt;/code&gt; -デコード時にflexスキャナーを使用します（ SMP用に最適化）。詳細については、 &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="09facbac0459a65b1017b50c767631ac01b79cad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;[{megaco_compressed, Module}]&lt;/code&gt; - Works in the same way as the megaco_compressed config parameter, only here the user provide their own compress module. This module must implement the &lt;code&gt;&lt;a href=&quot;megaco_edist_compress&quot;&gt;megaco_edist_compress&lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">&lt;code&gt;[{megaco_compressed, Module}]&lt;/code&gt; -megaco_compressed構成パラメーターと同じように機能します。ここでのみ、ユーザーが独自の圧縮モジュールを提供します。このモジュールは、 &lt;code&gt;&lt;a href=&quot;megaco_edist_compress&quot;&gt;megaco_edist_compress&lt;/a&gt;&lt;/code&gt; 動作を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="d3e70c82e02eafb1e915c5f2e6c5ec86bf5015a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;_@@bar&lt;/code&gt; is a glob variable, and &lt;code&gt;_@_@bar&lt;/code&gt; is a lifted glob variable</source>
          <target state="translated">&lt;code&gt;_@@bar&lt;/code&gt; はグロブ変数、 &lt;code&gt;_@_@bar&lt;/code&gt; はリフトグロブ変数</target>
        </trans-unit>
        <trans-unit id="efdb472bb1d1167ba56f0fe57e2ee2ce637b2720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; - Tagged atom.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; -タグ付きアトム。</target>
        </trans-unit>
        <trans-unit id="66ae8df5297696abb0e691f48575533e609bbaa3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; - Tagged atom. The default value is the empty atom (&lt;code&gt;am_Empty&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; -タグ付きアトム。デフォルト値は空のアトム（ &lt;code&gt;am_Empty&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="a8e87acf13faf5cc9d855a1e7f8e377825f058a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;a&lt;/code&gt; - Tagged literal atom.</source>
          <target state="translated">&lt;code&gt;a&lt;/code&gt; -タグ付きリテラルアトム。</target>
        </trans-unit>
        <trans-unit id="41a3c6bccdc4eba63910c97a11f5b7cecefb8721" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accept/1&lt;/code&gt; should spawn a process that accepts connections. This process should preferably execute on &lt;code&gt;max&lt;/code&gt; priority. The process identifier of this process should be returned.</source>
          <target state="translated">&lt;code&gt;accept/1&lt;/code&gt; は、接続を受け入れるプロセスを生成します。このプロセスは、 &lt;code&gt;max&lt;/code&gt; 優先順位で実行することが望ましいです。このプロセスのプロセス識別子が返されます。</target>
        </trans-unit>
        <trans-unit id="b6840e0824da7ebe7963f46402afd300355102b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;accept_connection/5&lt;/code&gt; should spawn a process that will perform the Erlang distribution handshake for the connection. If the handshake successfully completes it should continue to function as a connection supervisor. This process should preferably execute on &lt;code&gt;max&lt;/code&gt; priority.</source>
          <target state="translated">&lt;code&gt;accept_connection/5&lt;/code&gt; は、接続のErlang配布ハンドシェイクを実行するプロセスを生成します。ハンドシェイクが正常に完了すると、接続監視プログラムとして機能し続けるはずです。このプロセスは、 &lt;code&gt;max&lt;/code&gt; 優先順位で実行することが望ましいです。</target>
        </trans-unit>
        <trans-unit id="29bcee8a7eb3171caee510874100c571edbbea57" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;access_mode&lt;/code&gt;. Returns the access mode of the table. The access mode can be &lt;code&gt;read_only&lt;/code&gt; or &lt;code&gt;read_write&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;access_mode&lt;/code&gt; 。テーブルのアクセスモードを返します。アクセスモードは &lt;code&gt;read_only&lt;/code&gt; または &lt;code&gt;read_write&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c020fa4d0f91915fcdac48754da555e007b99d6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;access_module&lt;/code&gt;. Returns the name of module that is configured to be the activity access callback module.</source>
          <target state="translated">&lt;code&gt;access_module&lt;/code&gt; 。アクティビティアクセスコールバックモジュールとして構成されているモジュールの名前を返します。</target>
        </trans-unit>
        <trans-unit id="aa5ffb64ce2d689521884392fc8b8b73bc8d6d79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;action&lt;/code&gt; - Specifies the behaviour when a non-empty file is found: Keep its content or clear it out.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; -空でないファイルが見つかったときの動作を指定します。そのコンテンツを保持するか、消去します。</target>
        </trans-unit>
        <trans-unit id="64cadd3e914fb604781d58492bacaec15601919e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;action&lt;/code&gt; - Specifies the behaviour when a non-empty, already existing, table: Keep its content or clear it out.</source>
          <target state="translated">&lt;code&gt;action&lt;/code&gt; -空ではない既存のテーブルの動作を指定します。そのコンテンツを保持するか、消去します。</target>
        </trans-unit>
        <trans-unit id="30e97d5d522210ddfce2ee69bd50abe4408333e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt; - The count of all actively running child processes managed by this supervisor. For a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisors, no check is done to ensure that each child process is still alive, although the result provided here is likely to be very accurate unless the supervisor is heavily overloaded.</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; -このスーパーバイザによって管理されているすべてのアクティブに実行されている子プロセスの数。 &lt;code&gt;simple_one_for_one&lt;/code&gt; の結果は、スーパーバイザが大きくオーバーロードされない限り、非常に正確である可能性が高いここで提供が上司、何のチェックは、それぞれの子プロセスがまだ生きていることを確認するために行われません。</target>
        </trans-unit>
        <trans-unit id="41c87e7c264e7abea50c1af32323b798c2bcd229" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;active&lt;/code&gt;. Some delete operations require that all active records are removed.</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; 。一部の削除操作では、アクティブなレコードをすべて削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="3dcbcbbb783a768c2123748bed02001e19267544" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2)&lt;/code&gt; is equivalent to &lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2)&lt;/code&gt; は、 &lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;[])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="6735b21a34f8a3b318add28bc939db34c74e7c65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt; is equivalent to &lt;code&gt;add_edge(G,&amp;nbsp;E,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is a created edge. The created edge is represented by term &lt;code&gt;['$e'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer &amp;gt;= 0.</source>
          <target state="translated">&lt;code&gt;add_edge(G,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt; は &lt;code&gt;add_edge(G,&amp;nbsp;E,&amp;nbsp;V1,&amp;nbsp;V2,&amp;nbsp;Label)&lt;/code&gt; 、V1、V2、Label）と同等です。ここで、 &lt;code&gt;E&lt;/code&gt; は作成されたエッジです。作成されたエッジは、用語 &lt;code&gt;['$e'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt; 、ここで &lt;code&gt;N&lt;/code&gt; は0以上の整数です。</target>
        </trans-unit>
        <trans-unit id="eded226af24e6ef08af042767a734cf0549eb6d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_edge/5&lt;/code&gt; creates (or modifies) edge &lt;code&gt;E&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;, using &lt;code&gt;Label&lt;/code&gt; as the (new) &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; of the edge. The edge is &lt;code&gt;&lt;a href=&quot;#emanate&quot;&gt;emanating&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#incident&quot;&gt;incident&lt;/a&gt;&lt;/code&gt; on &lt;code&gt;V2&lt;/code&gt;. Returns &lt;code&gt;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_edge/5&lt;/code&gt; は、 &lt;code&gt;Label&lt;/code&gt; をエッジの（新しい） &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; として使用して、ダイグラフ &lt;code&gt;G&lt;/code&gt; のエッジ &lt;code&gt;E&lt;/code&gt; を作成（または変更）します。エッジは、 &lt;code&gt;&lt;a href=&quot;#emanate&quot;&gt;emanating&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;V1&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#incident&quot;&gt;incident&lt;/a&gt;&lt;/code&gt; に &lt;code&gt;V2&lt;/code&gt; 。 &lt;code&gt;E&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9f8f0e4ece533d195d622a71e998720d95b7462c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_group_member/3, add_group_member/4&lt;/code&gt;, and &lt;code&gt;add_group_member/5&lt;/code&gt; each adds a user to a group. If the group does not exist, it is created and the user is added to the group. Upon successful operation, this function returns &lt;code&gt;true&lt;/code&gt;. When &lt;code&gt;add_group_members/3&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;add_group_member/3, add_group_member/4&lt;/code&gt; 、および &lt;code&gt;add_group_member/5&lt;/code&gt; は、それぞれユーザーをグループに追加します。グループが存在しない場合は作成され、ユーザーがグループに追加されます。操作が成功すると、この関数は &lt;code&gt;true&lt;/code&gt; を返します。 &lt;code&gt;add_group_members/3&lt;/code&gt; が呼び出されるとき、オプション &lt;code&gt;Port&lt;/code&gt; および &lt;code&gt;Dir&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="308570fc650deac37e209d4ae7a7f26b09b0e8ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_release/3&lt;/code&gt; assumes that all subdirectories of the library directory returned by &lt;code&gt;code:lib_dir()&lt;/code&gt; contain applications; the effect is that of reading all applications' BEAM files.</source>
          <target state="translated">&lt;code&gt;add_release/3&lt;/code&gt; は、 &lt;code&gt;code:lib_dir()&lt;/code&gt; によって返されるライブラリディレクトリのすべてのサブディレクトリにアプリケーションが含まれていることを前提としています。その効果は、すべてのアプリケーションのBEAMファイルを読み取ることです。</target>
        </trans-unit>
        <trans-unit id="fdd6583035bdd4a5eac07667a90ffcfda05e87c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_user/2, add_user/5&lt;/code&gt;, and &lt;code&gt;add_user/6&lt;/code&gt; each adds a user to the user database. If the operation is successful, this function returns &lt;code&gt;true&lt;/code&gt;. If an error occurs, &lt;code&gt;{error,Reason}&lt;/code&gt; is returned. When &lt;code&gt;add_user/2&lt;/code&gt; is called, options &lt;code&gt;Password&lt;/code&gt;, &lt;code&gt;UserData&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt;, and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;add_user/2, add_user/5&lt;/code&gt; 、および &lt;code&gt;add_user/6&lt;/code&gt; は、それぞれユーザーをユーザーデータベースに追加します。操作が成功した場合、この関数は &lt;code&gt;true&lt;/code&gt; を返します。エラーが発生した場合、 &lt;code&gt;{error,Reason}&lt;/code&gt; が返されます。 &lt;code&gt;add_user/2&lt;/code&gt; が呼び出されるとき、オプション &lt;code&gt;Password&lt;/code&gt; 、 &lt;code&gt;UserData&lt;/code&gt; 、 &lt;code&gt;Port&lt;/code&gt; 、および &lt;code&gt;Dir&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="d2ec99872166f08f95ed1e017a3afbe33be8d472" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_vertex(G,&amp;nbsp;V)&lt;/code&gt; is equivalent to &lt;code&gt;add_vertex(G,&amp;nbsp;V,&amp;nbsp;[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_vertex(G,&amp;nbsp;V)&lt;/code&gt; は &lt;code&gt;add_vertex(G,&amp;nbsp;V,&amp;nbsp;[])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="dfe09666e83bbac0e7cc8dda7e715e28c12cf23f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_vertex/1&lt;/code&gt; creates a vertex using the empty list as label, and returns the created vertex. The created vertex is represented by term &lt;code&gt;['$v'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is an integer &amp;gt;= 0.</source>
          <target state="translated">&lt;code&gt;add_vertex/1&lt;/code&gt; は、ラベルとして空のリストを使用して頂点を作成し、作成された頂点を返します。作成された頂点は、用語 &lt;code&gt;['$v'&amp;nbsp;|&amp;nbsp;N]&lt;/code&gt; 、ここで &lt;code&gt;N&lt;/code&gt; は0以上の整数です。</target>
        </trans-unit>
        <trans-unit id="c3656692fbaf0860268c5e0ce6f05c82ca2871b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;add_vertex/3&lt;/code&gt; creates (or modifies) vertex &lt;code&gt;V&lt;/code&gt; of digraph &lt;code&gt;G&lt;/code&gt;, using &lt;code&gt;Label&lt;/code&gt; as the (new) &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; of the vertex. Returns &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;add_vertex/3&lt;/code&gt; は、 &lt;code&gt;Label&lt;/code&gt; を頂点の（新しい） &lt;code&gt;&lt;a href=&quot;#label&quot;&gt;label&lt;/a&gt;&lt;/code&gt; として使用して、ダイグラフ &lt;code&gt;G&lt;/code&gt; の頂点 &lt;code&gt;V&lt;/code&gt; を作成（または変更）します。 &lt;code&gt;V&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="80632824b7883f4a1c74ee9b61dead483f3d0ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; is the 32-bit IP address of &lt;code&gt;host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; は、 &lt;code&gt;host&lt;/code&gt; の32ビットIPアドレスです。</target>
        </trans-unit>
        <trans-unit id="9b87e1985b177cc9187727ee7c46851207be8ebc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; is the 32-bit IP address of the local host.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; は、ローカルホストの32ビットIPアドレスです。</target>
        </trans-unit>
        <trans-unit id="0c836ff71ba1f47fd39e9623dfc614ddc05108b7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;addr&lt;/code&gt; is the 32-bit IP address of the remote host.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; は、リモートホストの32ビットIPアドレスです。</target>
        </trans-unit>
        <trans-unit id="a845bd05890619221ae5e8a0565f6d4a468d539b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;address/0&lt;/code&gt; is called in order to get the &lt;code&gt;Address&lt;/code&gt; part of the &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; function without creating a listen socket. All fields except &lt;code&gt;address&lt;/code&gt; have to be set in the returned record</source>
          <target state="translated">&lt;code&gt;address/0&lt;/code&gt; は、listenソケットを作成せずに &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; 関数の &lt;code&gt;Address&lt;/code&gt; 部分を取得するために呼び出されます。返されるレコードには、 &lt;code&gt;address&lt;/code&gt; を除くすべてのフィールドを設定する必要があります</target>
        </trans-unit>
        <trans-unit id="699d2abaabfbb891035645ffeaa860104a2bae0c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;adjust&lt;/code&gt; is the adjustment.</source>
          <target state="translated">&lt;code&gt;adjust&lt;/code&gt; は調整です。</target>
        </trans-unit>
        <trans-unit id="f31bbdb077d23b30febc8c0d4f51fda2dc3cd1b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;adr&lt;/code&gt; is local interface to bind to.</source>
          <target state="translated">&lt;code&gt;adr&lt;/code&gt; は、バインドするローカルインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="46c1782dc4a254a0e32ee14037fd4fce1995202d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;adr&lt;/code&gt; is the 32-bit IP address of the remote host.</source>
          <target state="translated">&lt;code&gt;adr&lt;/code&gt; は、リモートホストの32ビットIPアドレスです。</target>
        </trans-unit>
        <trans-unit id="34a1320a67660e060d22139d7d8a87305e9f7a33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;advise/4&lt;/code&gt; can be used to announce an intention to access file data in a specific pattern in the future, thus allowing the operating system to perform appropriate optimizations.</source>
          <target state="translated">&lt;code&gt;advise/4&lt;/code&gt; を使用して、将来特定のパターンでファイルデータにアクセスする意図をアナウンスし、オペレーティングシステムが適切な最適化を実行できるようにすることができます。</target>
        </trans-unit>
        <trans-unit id="7afecc1566f50ee3ca0ab54ffb403b65ddf62d6d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;af&lt;/code&gt; (a fit)</source>
          <target state="translated">&lt;code&gt;af&lt;/code&gt; （フィット）</target>
        </trans-unit>
        <trans-unit id="c3e122732fccd7058e1f787f0962d549d6b90ea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ageffcaobf&lt;/code&gt; (age order first fit carrier address order best fit)</source>
          <target state="translated">&lt;code&gt;ageffcaobf&lt;/code&gt; （年齢順ファーストフィットキャリアアドレス順ベストフィット）</target>
        </trans-unit>
        <trans-unit id="cd0cb8c2759f83ac86614295146be45f26220600" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ageffcaoff&lt;/code&gt; (age order first fit carrier address order first fit)</source>
          <target state="translated">&lt;code&gt;ageffcaoff&lt;/code&gt; （年齢順ファーストフィットキャリアアドレス順ファーストフィット）</target>
        </trans-unit>
        <trans-unit id="b6ab35af9ae11e26a3b715cd4c3eee87ea061bb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ageffcbf&lt;/code&gt; (age order first fit carrier best fit)</source>
          <target state="translated">&lt;code&gt;ageffcbf&lt;/code&gt; （年齢順ファーストフィットキャリアベストフィット）</target>
        </trans-unit>
        <trans-unit id="23de4c452f541d98707bd07e4cfbb7d5d4d16c28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;agent.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#agent_information&quot;&gt;Agent Information&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;agent.conf&lt;/code&gt; ： &lt;code&gt;&lt;a href=&quot;#agent_information&quot;&gt;Agent Information&lt;/a&gt;&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="8ff47ce1780c480f2faaa98dfc2c6486b2589cd7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alarm_handler(3)&lt;/code&gt;, &lt;code&gt;os_mon(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;alarm_handler(3)&lt;/code&gt; 、 &lt;code&gt;os_mon(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a84641b8fd6385c030bd6d3537dbcab356b1105" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alive&lt;/code&gt; is the alivename of the node.</source>
          <target state="translated">&lt;code&gt;alive&lt;/code&gt; はノードのalivenameです。</target>
        </trans-unit>
        <trans-unit id="f79edcb1662e15c5611ff0fbb2208fbc936b2d69" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alive&lt;/code&gt; is the alivename of the remote node.</source>
          <target state="translated">&lt;code&gt;alive&lt;/code&gt; は、リモートノードのalivenameです。</target>
        </trans-unit>
        <trans-unit id="093965dc89e02aa9accca4f967a1fef9354be4ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;alive&lt;/code&gt; is the name of the node to unregister, that is, the first component of the node name, without &lt;code&gt;@hostname&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;alive&lt;/code&gt; は、登録解除するノードの名前です。つまり、 &lt;code&gt;@hostname&lt;/code&gt; を除いたノード名の最初のコンポーネントです。</target>
        </trans-unit>
        <trans-unit id="b8a0984d3f52dfd8e9a64abbcc05a017870ce387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all (0)&lt;/code&gt; - Starts a new &lt;code&gt;Viewer&lt;/code&gt; with the &lt;code&gt;Collector Filter&lt;/code&gt; as active filter. It will cause all events in the collector to be viewed.</source>
          <target state="translated">&lt;code&gt;all (0)&lt;/code&gt; - &lt;code&gt;Collector Filter&lt;/code&gt; をアクティブフィルターとして新しい &lt;code&gt;Viewer&lt;/code&gt; を起動します。コレクター内のすべてのイベントが表示されます。</target>
        </trans-unit>
        <trans-unit id="9d2afce67f341c097c5a287163fbb70f92d80119" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt; - &lt;code&gt;erlang:nodes()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; - &lt;code&gt;erlang:nodes()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="88d72784a763c7cf3461bef60775be585c6a51d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt; has the same arguments as &lt;code&gt;any&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; が他のものと同じ引数を持ってい &lt;code&gt;any&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0d3b15afd2f020d868a11605a2aace698272fc93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt;. Returns a list of all local system information. Each element is a &lt;code&gt;{InfoKey, InfoVal}&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; 。すべてのローカルシステム情報のリストを返します。各要素は &lt;code&gt;{InfoKey, InfoVal}&lt;/code&gt; タプルです。</target>
        </trans-unit>
        <trans-unit id="e5120726b82e227b3d64104d915e704131f8333b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;all&lt;/code&gt;. Returns a list of all local table information. Each element is a &lt;code&gt;{InfoKey, ItemVal}&lt;/code&gt; tuple.</source>
          <target state="translated">&lt;code&gt;all&lt;/code&gt; 。すべてのローカルテーブル情報のリストを返します。各要素は &lt;code&gt;{InfoKey, ItemVal}&lt;/code&gt; タプルです。</target>
        </trans-unit>
        <trans-unit id="97512066008b8088626fc161f01045faad633407" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allocate/3&lt;/code&gt; can be used to preallocate space for a file.</source>
          <target state="translated">&lt;code&gt;allocate/3&lt;/code&gt; は、ファイルのスペースを事前に割り当てるために使用できます。</target>
        </trans-unit>
        <trans-unit id="41666bf49b92f45df37f91724cb8f4bdd3d83fd2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allocated&lt;/code&gt; and &lt;code&gt;freed&lt;/code&gt; are initialized to contain information about the fix-allocator used to allocate &lt;code&gt;ETERM&lt;/code&gt; components.</source>
          <target state="translated">&lt;code&gt;allocated&lt;/code&gt; と &lt;code&gt;freed&lt;/code&gt; 割り当てるために使用されるFIX-アロケータに関する情報含むように初期化され &lt;code&gt;ETERM&lt;/code&gt; のコンポーネントを。</target>
        </trans-unit>
        <trans-unit id="81e1b5bb6f005718b97cdcef18327ce1a6e6497b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;allocated&lt;/code&gt; is the number of blocks currently allocated to &lt;code&gt;ETERM&lt;/code&gt; objects.</source>
          <target state="translated">&lt;code&gt;allocated&lt;/code&gt; 現在に割り当てられたブロックの数である &lt;code&gt;ETERM&lt;/code&gt; のオブジェクトが。</target>
        </trans-unit>
        <trans-unit id="12a3f3a12999ecd68f3a41d6438ae747b45cc2a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;already_exists&lt;/code&gt;. Schema option to be activated is already on.</source>
          <target state="translated">&lt;code&gt;already_exists&lt;/code&gt; 。アクティブ化するスキーマオプションは既にオンになっています。</target>
        </trans-unit>
        <trans-unit id="e09c32739412caf3bb45902d7c7c54f88a8121e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;any&lt;/code&gt; takes a predicate &lt;code&gt;P&lt;/code&gt; of one argument and a list of terms:</source>
          <target state="translated">&lt;code&gt;any&lt;/code&gt; は、1つの引数の述語 &lt;code&gt;P&lt;/code&gt; と項のリストを取ります。</target>
        </trans-unit>
        <trans-unit id="c04a1d0a8b42c3f884cc4061d4be2169366adfa0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aobf&lt;/code&gt; (address order best fit)</source>
          <target state="translated">&lt;code&gt;aobf&lt;/code&gt; （住所順最適）</target>
        </trans-unit>
        <trans-unit id="8e3886f8937bc796389366681b1568f292057745" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aoff&lt;/code&gt; (address order first fit)</source>
          <target state="translated">&lt;code&gt;aoff&lt;/code&gt; （住所順優先）</target>
        </trans-unit>
        <trans-unit id="1c1a2a991912818f34517a6d59e8ac8bf23861a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aoffcaobf&lt;/code&gt; (address order first fit carrier address order best fit)</source>
          <target state="translated">&lt;code&gt;aoffcaobf&lt;/code&gt; （住所順ファーストフィットキャリア住所順ベストフィット）</target>
        </trans-unit>
        <trans-unit id="d36eb867ec84d005b2b36939491b867b1a074b86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;aoffcbf&lt;/code&gt; (address order first fit carrier best fit)</source>
          <target state="translated">&lt;code&gt;aoffcbf&lt;/code&gt; （住所順の最初の適合キャリアの最適適合）</target>
        </trans-unit>
        <trans-unit id="2346e55f01b0a576c1d4c1c0db448da3cc8b60e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app(4)&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;app(4)&lt;/code&gt; カーネルのapp（4）マニュアルページ</target>
        </trans-unit>
        <trans-unit id="33877b32d205ddb1b7629894b405b3964320c267" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app(4)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;app(4)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff621ce736ff1d127c1f08d97a3f6143ea2fd097" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;app(4)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;erl(1)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;app(4)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;erl(1)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;rel&quot;&gt;rel(4)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;release_handler&quot;&gt;release_handler(3)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;script&quot;&gt;script(4)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ff8e1c38283104e4739a04e604ae9ffe2a9d5475" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;append(QH1,&amp;nbsp;QH2)&lt;/code&gt; is equivalent to &lt;code&gt;append([QH1,&amp;nbsp;QH2])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;append(QH1,&amp;nbsp;QH2)&lt;/code&gt; は &lt;code&gt;append([QH1,&amp;nbsp;QH2])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="99af6c4c16c5603f3b5358b847dfe0ee6145c1bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;application(3)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;relup&quot;&gt;relup(4)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;systools&quot;&gt;systools(3)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ee035bbbbb046cffe841b862f3e718ba886d5d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application(3)&lt;/code&gt;, &lt;code&gt;dets(3)&lt;/code&gt;, &lt;code&gt;disk_log(3)&lt;/code&gt;, &lt;code&gt;ets(3)&lt;/code&gt;, &lt;code&gt;mnesia_registry(3)&lt;/code&gt;, &lt;code&gt;qlc(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;application(3)&lt;/code&gt; 、 &lt;code&gt;dets(3)&lt;/code&gt; 、 &lt;code&gt;disk_log(3)&lt;/code&gt; 、 &lt;code&gt;ets(3)&lt;/code&gt; 、 &lt;code&gt;mnesia_registry(3)&lt;/code&gt; 、 &lt;code&gt;qlc(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5e0a257fc769705d9cc09d4843a08142ab8f99d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application:start(Application)&lt;/code&gt; is the same as calling &lt;code&gt;application:start(Application, temporary)&lt;/code&gt;. The type can also be &lt;code&gt;permanent&lt;/code&gt; or &lt;code&gt;transient&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;application:start(Application)&lt;/code&gt; は、 &lt;code&gt;application:start(Application, temporary)&lt;/code&gt; を呼び出すのと同じです。タイプは &lt;code&gt;permanent&lt;/code&gt; または &lt;code&gt;transient&lt;/code&gt; ものにすることもできます。</target>
        </trans-unit>
        <trans-unit id="b67edaacaf648cc6cc9a6d897e31e09389b2df1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application:start(mnesia)&lt;/code&gt; can also be used.</source>
          <target state="translated">&lt;code&gt;application:start(mnesia)&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="29d1b7a8c27256b457dce1b3bad8e849c11d21cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application:stop(mnesia)&lt;/code&gt; can also be used.</source>
          <target state="translated">&lt;code&gt;application:stop(mnesia)&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="10da2c0c84c016a1b85a0996d30c8e11ab967b5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;application&lt;/code&gt;, an empty list if the module does not belong to any application, otherwise a list of the application name;</source>
          <target state="translated">&lt;code&gt;application&lt;/code&gt; 、モジュールがどのアプリケーションにも属していない場合は空のリスト、それ以外の場合はアプリケーション名のリスト。</target>
        </trans-unit>
        <trans-unit id="fe02e9a6876c897082028610a15994bce0a292ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;applications&lt;/code&gt; - All applications that must be started before this application is started. &lt;code&gt;systools&lt;/code&gt; uses this list to generate correct boot scripts. Defaults to &lt;code&gt;[]&lt;/code&gt;. Notice that all applications have dependencies to at least Kernel and STDLIB.</source>
          <target state="translated">&lt;code&gt;applications&lt;/code&gt; -このアプリケーションを開始する前に開始する必要があるすべてのアプリケーション。 &lt;code&gt;systools&lt;/code&gt; はこのリストを使用して正しいブートスクリプトを生成します。デフォルトは &lt;code&gt;[]&lt;/code&gt; です。すべてのアプリケーションには、少なくともカーネルとSTDLIBへの依存関係があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="76b082504e28452bfce3331d887c3a70c2f2f89c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply(M, F, A)&lt;/code&gt; must return a list of nodes.</source>
          <target state="translated">&lt;code&gt;apply(M, F, A)&lt;/code&gt; はノードのリストを返す必要があります。</target>
        </trans-unit>
        <trans-unit id="8cd751c794ca79775ae24d2dfc9d496c92f7760b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;apply/3&lt;/code&gt; must look up the code for the function to execute in a hash table. It is therefore always slower than a direct call or a fun call.</source>
          <target state="translated">&lt;code&gt;apply/3&lt;/code&gt; は、関数が実行するコードをハッシュテーブルで検索する必要があります。したがって、直接通話や楽しい通話よりも常に遅くなります。</target>
        </trans-unit>
        <trans-unit id="ae6d24752d6fc9146e5c784eb3fee2f7efa454a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL</source>
          <target state="translated">&lt;code&gt;appup(4)&lt;/code&gt; マニュアルページ</target>
        </trans-unit>
        <trans-unit id="452b708022856c63df251c357fb144407fbbbcf4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argbuf&lt;/code&gt; is a pointer to a buffer with an encoded Erlang list, without a version magic number, containing the arguments to be passed to the function.</source>
          <target state="translated">&lt;code&gt;argbuf&lt;/code&gt; は、関数に渡される引数を含む、エンコードされたErlangリストがあり、バージョンマジックナンバーのないバッファへのポインタです。</target>
        </trans-unit>
        <trans-unit id="69e4b05d2799b12c1213f74c3f1fee1d1dadd624" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;argbuflen&lt;/code&gt; is the length of the buffer containing the encoded Erlang list.</source>
          <target state="translated">&lt;code&gt;argbuflen&lt;/code&gt; は、エンコードされたErlangリストを含むバッファーの長さです。</target>
        </trans-unit>
        <trans-unit id="c88058fb856fee3f23186a49ad08ec45b32134a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; is a list of the arguments used by the control sequence, or an empty list if the control sequence does not take any arguments.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; は、制御シーケンスが使用する引数のリスト、または制御シーケンスが引数を取らない場合は空のリストです。</target>
        </trans-unit>
        <trans-unit id="ae238075082754126f87767b4a55847888febf8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;args&lt;/code&gt; is an Erlang list, containing the arguments to be passed to the function.</source>
          <target state="translated">&lt;code&gt;args&lt;/code&gt; は、関数に渡される引数を含むErlangリストです。</target>
        </trans-unit>
        <trans-unit id="c84b082d7993b958953e81c49576799ca90e5562" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arity&lt;/code&gt;. Returns the arity of records in the table as specified in the schema.</source>
          <target state="translated">&lt;code&gt;arity&lt;/code&gt; 。スキーマで指定されたテーブル内のレコードのアリティを返します。</target>
        </trans-unit>
        <trans-unit id="ad562cc01c455bf87c89d7be370aa5f77e08a499" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; is an array of ETERM* objects.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; はETERM *オブジェクトの配列です。</target>
        </trans-unit>
        <trans-unit id="ef69e9b959914df8490c32f8a040f98d0e9915b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;array&lt;/code&gt; is an array of Erlang terms.</source>
          <target state="translated">&lt;code&gt;array&lt;/code&gt; はErlang用語の配列です。</target>
        </trans-unit>
        <trans-unit id="801e399b2373cb64af1a6eb34f634da9351c826b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;arrsize&lt;/code&gt; is the number of elements in &lt;code&gt;array&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;arrsize&lt;/code&gt; は、 &lt;code&gt;array&lt;/code&gt; の要素数です。</target>
        </trans-unit>
        <trans-unit id="7dfaa3306dd3215bd527ea3b5c3ae28a064d66a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;asn1&lt;/code&gt; - ASN.1 BER</source>
          <target state="translated">&lt;code&gt;asn1&lt;/code&gt; -ASN.1 BER</target>
        </trans-unit>
        <trans-unit id="19ce5393e1baf8f5daf548c839d26e7fcbf42a55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assertEqual&lt;/code&gt; is more suitable than &lt;code&gt;assertMatch&lt;/code&gt; when the left-hand side is a computed value rather than a simple pattern, and gives more details than &lt;code&gt;?assert(Expect =:= Expr)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assertEqual&lt;/code&gt; はより適している &lt;code&gt;assertMatch&lt;/code&gt; 左辺は計算値ではなく、単純なパターンであり、より詳細与える場合 &lt;code&gt;?assert(Expect =:= Expr)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="86ebca600c491611d59fb81bbc64178a4240b3f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_id = 0&lt;/code&gt; (default) indicates the whole endpoint.</source>
          <target state="translated">&lt;code&gt;assoc_id = 0&lt;/code&gt; （デフォルト）は、エンドポイント全体を示します。</target>
        </trans-unit>
        <trans-unit id="47d49bdd1ccd72b394fa212477403df138818b65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_id = 0&lt;/code&gt; (default) indicates the whole endpoint. See &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; for the discussion of their semantics. Rarely used.</source>
          <target state="translated">&lt;code&gt;assoc_id = 0&lt;/code&gt; （デフォルト）は、エンドポイント全体を示します。セマンティクスの説明については、 &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 参照してください。ほとんど使われません。</target>
        </trans-unit>
        <trans-unit id="77a37a0c7eea6ce81d051e4508dbb3d63745df6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;assoc_id = 0&lt;/code&gt; (default) indicates the whole endpoint. See &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; for the exact semantics of the field values.</source>
          <target state="translated">&lt;code&gt;assoc_id = 0&lt;/code&gt; （デフォルト）は、エンドポイント全体を示します。フィールド値の正確なセマンティクスについては、 &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="548784c9ecca55c0e2f953786b10d16508a546dc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;at_dep&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;at_dep&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="e2b407a1b20fb27935afd6e6402d358e469774cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atom()&lt;/code&gt; - Name of the Erlang module implementing the subsystem using the &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; (replaces ssh_daemon_channel) behaviour.</source>
          <target state="translated">&lt;code&gt;atom()&lt;/code&gt; - &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; （ssh_daemon_channelに置き換わる）動作を使用してサブシステムを実装するErlangモジュールの名前。</target>
        </trans-unit>
        <trans-unit id="9f0910ef212626435d10caf31c55cc021319b923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;atom&lt;/code&gt;&lt;code&gt;char&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;atom&lt;/code&gt;&lt;code&gt;char&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb28b98225e6725d1affc9694f0217b20bf6bea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attribute&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;attribute&lt;/code&gt;&lt;code&gt;comment&lt;/code&gt;&lt;code&gt;error_marker&lt;/code&gt;&lt;code&gt;eof_marker&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e130d8e013ac7037c4959d9a5f7ffcfc196ab056" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attributes&lt;/code&gt;. Returns the table attribute names that are specified in the schema.</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; 。スキーマで指定されているテーブル属性名を返します。</target>
        </trans-unit>
        <trans-unit id="3b3596ead5d9a3e64e7012a2a7b63056949098c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;attributes&lt;/code&gt;. The names of the attributes for the records that are inserted in the table.</source>
          <target state="translated">&lt;code&gt;attributes&lt;/code&gt; 。テーブルに挿入されるレコードの属性の名前。</target>
        </trans-unit>
        <trans-unit id="2d6b20564258d711f3eebb7f67b1840b8c63c6f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auth:cookie/0&lt;/code&gt; (use erlang:get_cookie/0 instead)</source>
          <target state="translated">&lt;code&gt;auth:cookie/0&lt;/code&gt; （代わりにerlang：get_cookie / 0を使用）</target>
        </trans-unit>
        <trans-unit id="eddc782a3420e83d6b73d6fa983e470ecb4eeda1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auth:cookie/1&lt;/code&gt; (use erlang:set_cookie/2 instead)</source>
          <target state="translated">&lt;code&gt;auth:cookie/1&lt;/code&gt; （代わりにerlang：set_cookie / 2を使用）</target>
        </trans-unit>
        <trans-unit id="a7eea61e96cdb809909c733013e910b06ccb0ef7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auth:is_auth/1&lt;/code&gt; (use net_adm:ping/1 instead)</source>
          <target state="translated">&lt;code&gt;auth:is_auth/1&lt;/code&gt; （代わりにnet_adm：ping / 1を使用）</target>
        </trans-unit>
        <trans-unit id="fa7445dde2948df2e7f50124e66a5c5279f60b1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auth:node_cookie/_&lt;/code&gt; (use erlang:set_cookie/2 and net_adm:ping/1 instead)</source>
          <target state="translated">&lt;code&gt;auth:node_cookie/_&lt;/code&gt; （代わりにerlang：set_cookie / 2とnet_adm：ping / 1を使用してください）</target>
        </trans-unit>
        <trans-unit id="1c86778ee7c43bedb81a6ab931654f75426d16ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto&lt;/code&gt; - The manager will autonomously send response (acknowledgment&amp;gt; to inform-request messages.</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; -マネージャーは自律的に応答を送信します（確認&amp;gt;通知要求メッセージへの応答）。</target>
        </trans-unit>
        <trans-unit id="70f7fd21bd95427295d93939701fb17fb5970164" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_repair&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to indicate if Mnesia is configured to start the auto-repair facility on corrupted disc files.</source>
          <target state="translated">&lt;code&gt;auto_repair&lt;/code&gt; 。破損したディスクファイルで自動修復機能を開始するようにMnesiaが構成されているかどうかを示すために &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="12902d8c010c7b4a0b48c006e43d19093456b157" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;auto_save&lt;/code&gt; - Defines the dets auto-save frequency.</source>
          <target state="translated">&lt;code&gt;auto_save&lt;/code&gt; -dets自動保存の頻度を定義します。</target>
        </trans-unit>
        <trans-unit id="05106bf7c805000315adcc4cf3ee5a317a26cf9a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;b&lt;/code&gt; - Pointer to BIF. Used by instructions that BIFs, such as &lt;code&gt;call_bif&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;b&lt;/code&gt; -BIFへのポインタ。 &lt;code&gt;call_bif&lt;/code&gt; などのBIFの命令で使用されます。</target>
        </trans-unit>
        <trans-unit id="4b3a950152cfe519cc73ffb8b2b757fbbcf16fe4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backlog&lt;/code&gt; is maximum backlog of pending connections.</source>
          <target state="translated">&lt;code&gt;backlog&lt;/code&gt; は、保留中の接続の最大バックログです。</target>
        </trans-unit>
        <trans-unit id="a0a50c3b5330a8697925d8971b617a7169d59dca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;backup_module&lt;/code&gt;. Returns the name of the module that is configured to be the backup callback module.</source>
          <target state="translated">&lt;code&gt;backup_module&lt;/code&gt; 。バックアップコールバックモジュールとして構成されているモジュールの名前を返します。</target>
        </trans-unit>
        <trans-unit id="fb90c9513934f1b3ccb086efcb411f60d1384f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badValue | noSuchName | genErr&lt;/code&gt;(SNMPv1)</source>
          <target state="translated">&lt;code&gt;badValue | noSuchName | genErr&lt;/code&gt; （SNMPv1）</target>
        </trans-unit>
        <trans-unit id="4af55acb7f44704d193041128ca3204b65f3131d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_index&lt;/code&gt;. Index already exists, or was out of bounds.</source>
          <target state="translated">&lt;code&gt;bad_index&lt;/code&gt; 。インデックスはすでに存在するか、範囲外でした。</target>
        </trans-unit>
        <trans-unit id="9bd7847208820cb3e5fdf7d4e616b5b19e7ae8cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_object&lt;/code&gt;, &lt;code&gt;{bad_object, FileName}&lt;/code&gt; - Applying the format function failed for some binary, or the key(s) could not be extracted from some term.</source>
          <target state="translated">&lt;code&gt;bad_object&lt;/code&gt; 、 &lt;code&gt;{bad_object, FileName}&lt;/code&gt; -一部のバイナリでフォーマット関数の適用に失敗したか、一部の用語からキーを抽出できませんでした。</target>
        </trans-unit>
        <trans-unit id="5674a81ffc13a9d93f73c262d178d85abcf93d77" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bad_type&lt;/code&gt;. Bad type specified in argument.</source>
          <target state="translated">&lt;code&gt;bad_type&lt;/code&gt; 。引数に不正な型が指定されています。</target>
        </trans-unit>
        <trans-unit id="9e242d45e0b73cd73950c8c730a1c126ad7d4759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badarg&lt;/code&gt;. Bad or invalid argument, possibly bad type.</source>
          <target state="translated">&lt;code&gt;badarg&lt;/code&gt; 。引数が正しくないか無効です。タイプが間違っている可能性があります。</target>
        </trans-unit>
        <trans-unit id="d96b34618ac7c8372a4d6e8854d04be5a47813b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;badarg&lt;/code&gt;: an argument is of wrong type or has an illegal value,</source>
          <target state="translated">&lt;code&gt;badarg&lt;/code&gt; ：引数のタイプが正しくないか、値が不正です。</target>
        </trans-unit>
        <trans-unit id="b57f829716070bd0c69b1a4bc15f6e129e32659a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bag&lt;/code&gt;. A table of this type has zero or more different objects with a given key.</source>
          <target state="translated">&lt;code&gt;bag&lt;/code&gt; 。このタイプのテーブルには、指定されたキーを持つ0個以上の異なるオブジェクトがあります。</target>
        </trans-unit>
        <trans-unit id="b5bc9fef180d5478185c5f11107e1a7205f908fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bchunk/2&lt;/code&gt; returns &lt;code&gt;'$end_of_table'&lt;/code&gt; when all objects are returned, or &lt;code&gt;{error, Reason}&lt;/code&gt; if an error occurs.</source>
          <target state="translated">&lt;code&gt;bchunk/2&lt;/code&gt; は、すべてのオブジェクトが返された場合は &lt;code&gt;'$end_of_table'&lt;/code&gt; end_of_table 」を返し、エラーが発生した場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="f0b881e6b811651503573d24bdc82b31cac8ea6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bchunk/2&lt;/code&gt; returns a tuple &lt;code&gt;{Continuation2, Data}&lt;/code&gt;, where &lt;code&gt;Data&lt;/code&gt; is a list of objects. &lt;code&gt;Continuation2&lt;/code&gt; is another continuation that is to be passed on to a subsequent call to &lt;code&gt;bchunk/2&lt;/code&gt;. With a series of calls to &lt;code&gt;bchunk/2&lt;/code&gt;, all table objects can be extracted.</source>
          <target state="translated">&lt;code&gt;bchunk/2&lt;/code&gt; 戻るタプル &lt;code&gt;{Continuation2, Data}&lt;/code&gt; 、 &lt;code&gt;Data&lt;/code&gt; オブジェクトのリストです。 &lt;code&gt;Continuation2&lt;/code&gt; は、後続の &lt;code&gt;bchunk/2&lt;/code&gt; の呼び出しに渡される別の継続です。 &lt;code&gt;bchunk/2&lt;/code&gt; への一連の呼び出しにより、すべてのテーブルオブジェクトを抽出できます。</target>
        </trans-unit>
        <trans-unit id="56780c73221d90297b10fad663bf8057f6e4f75f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_hot.h&lt;/code&gt;, &lt;code&gt;beam_warm.h&lt;/code&gt;, &lt;code&gt;beam_cold.&lt;/code&gt;h - Implementation of instructions. Included inside the &lt;code&gt;process_main()&lt;/code&gt; function in &lt;code&gt;beam_emu.c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beam_hot.h&lt;/code&gt; 、 &lt;code&gt;beam_warm.h&lt;/code&gt; 、 &lt;code&gt;beam_cold.&lt;/code&gt; h-指示の実装。 &lt;code&gt;beam_emu.c&lt;/code&gt; &lt;code&gt;process_main()&lt;/code&gt; 関数内に含まれています。</target>
        </trans-unit>
        <trans-unit id="17286180de0e85fd3a121d782dd8fb920eb0a2ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_lib(3)&lt;/code&gt;, &lt;code&gt;digraph(3)&lt;/code&gt;, &lt;code&gt;digraph_utils(3)&lt;/code&gt;, &lt;code&gt;re(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;xref_chapter&quot;&gt;TOOLS User's Guide&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;beam_lib(3)&lt;/code&gt; 、 &lt;code&gt;digraph(3)&lt;/code&gt; 、 &lt;code&gt;digraph_utils(3)&lt;/code&gt; 、 &lt;code&gt;re(3)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;xref_chapter&quot;&gt;TOOLS User's Guide&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48806351aad0a7742944c693a884af8352b2a223" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_lib&lt;/code&gt; searches for &lt;code&gt;.erlang.crypt&lt;/code&gt; in the current directory and then the home directory for the current user. If the file is found and contains a key, &lt;code&gt;beam_lib&lt;/code&gt; implicitly creates a crypto key fun and registers it.</source>
          <target state="translated">&lt;code&gt;beam_lib&lt;/code&gt; を検索 &lt;code&gt;.erlang.crypt&lt;/code&gt; 現在のユーザーの現在のディレクトリにして、ホームディレクトリ。ファイルが見つかり、キーが含まれている場合、 &lt;code&gt;beam_lib&lt;/code&gt; は暗黙的に暗号キーfunを作成して登録します。</target>
        </trans-unit>
        <trans-unit id="846e9786216a2853a6491b74dcdfdc96cbbc059c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_opcode.hrl&lt;/code&gt; - Used by &lt;code&gt;beam_asm&lt;/code&gt;. It contains tag definitions used for encoding instruction operands.</source>
          <target state="translated">&lt;code&gt;beam_opcode.hrl&lt;/code&gt; - beam_asmによって使用され &lt;code&gt;beam_asm&lt;/code&gt; 。これには、命令オペランドのエンコードに使用されるタグ定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="0a6730b706a82aa4093cb104b75c52d84c153171" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_opcodes.c&lt;/code&gt; - Defines static data used by the loader (&lt;code&gt;beam_load.c&lt;/code&gt;). Data about generic instructions, specific instructions (including how to pack their operands), and transformation rules are all part of this file.</source>
          <target state="translated">&lt;code&gt;beam_opcodes.c&lt;/code&gt; -ローダーが使用する静的データを定義します（ &lt;code&gt;beam_load.c&lt;/code&gt; ）。一般的な命令、特定の命令（オペランドのパック方法を含む）、および変換規則に関するデータはすべて、このファイルの一部です。</target>
        </trans-unit>
        <trans-unit id="aabed6f1542007df766316cf7ef6c2b5203ae7a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_opcodes.erl&lt;/code&gt; - Used primarily by &lt;code&gt;beam_asm&lt;/code&gt; and &lt;code&gt;beam_diasm&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beam_opcodes.erl&lt;/code&gt; 主に &lt;code&gt;beam_asm&lt;/code&gt; と &lt;code&gt;beam_diasm&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="1def9bef5913ae1b9522b63cca15a9ef5d008066" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_opcodes.h&lt;/code&gt; - Miscellanous preprocessor definitions, mainly used by &lt;code&gt;beam_load.c&lt;/code&gt; but also by &lt;code&gt;beam_{hot,warm,cold}.h&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;beam_opcodes.h&lt;/code&gt; -主に &lt;code&gt;beam_load.c&lt;/code&gt; で使用されますが、 &lt;code&gt;beam_{hot,warm,cold}.h&lt;/code&gt; でも使用されるその他のプリプロセッサ定義。</target>
        </trans-unit>
        <trans-unit id="e27bb2becb3ed93863bb31e570b5fc8393498ce5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_pred_funcs.h&lt;/code&gt; - Included by &lt;code&gt;beam_load.c&lt;/code&gt;. Contains defines needed to call guard constraints in transformation rules.</source>
          <target state="translated">&lt;code&gt;beam_pred_funcs.h&lt;/code&gt; - beam_load.cに含まれてい &lt;code&gt;beam_load.c&lt;/code&gt; 。変換ルールでガード制約を呼び出すために必要な定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="427613c2f8d166d0caf3f9a2dcd916a7fe7091e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;beam_tr_funcs.h&lt;/code&gt; - Included by &lt;code&gt;beam_load.c&lt;/code&gt;. Contains defines needed to call a C function to the right of a transformation rule.</source>
          <target state="translated">&lt;code&gt;beam_tr_funcs.h&lt;/code&gt; - beam_load.cに含まれてい &lt;code&gt;beam_load.c&lt;/code&gt; 。変換ルールの右側にあるC関数を呼び出すために必要な定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="7359f360c9f4db5152553296e4b58927d5d35196" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bf&lt;/code&gt; (best fit)</source>
          <target state="translated">&lt;code&gt;bf&lt;/code&gt; （最適）</target>
        </trans-unit>
        <trans-unit id="8f9b4da975d568447e2e26dc29abe90a4b68b3cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin/erl&lt;/code&gt; (obtained from &lt;code&gt;erts-5.10.4/bin/erl.src&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;bin/erl&lt;/code&gt; （ &lt;code&gt;erts-5.10.4/bin/erl.src&lt;/code&gt; から取得）</target>
        </trans-unit>
        <trans-unit id="cb8b254fb956ab3a3b6c9b8239ceaa2c312d5831" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin/start.boot&lt;/code&gt; (a copy of &lt;code&gt;plain.boot&lt;/code&gt;)</source>
          <target state="translated">&lt;code&gt;bin/start.boot&lt;/code&gt; （のコピー &lt;code&gt;plain.boot&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="91bc86af405ae4d15ef21b7029302ff95b1bed86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin&lt;/code&gt; - Optional. Any executable that is a product of the application, such as escripts or shell-scripts, should be placed here.</source>
          <target state="translated">&lt;code&gt;bin&lt;/code&gt; -オプション。アプリケーションの製品である実行可能ファイル（escriptsやshell-scriptsなど）は、ここに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="25aa1b40cfc688459920a27ed9809c66c8adfe1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bin&lt;/code&gt; - Top-level Erlang runtime system executables</source>
          <target state="translated">&lt;code&gt;bin&lt;/code&gt; -トップレベルのErlangランタイムシステム実行可能ファイル</target>
        </trans-unit>
        <trans-unit id="f9adab0d87be8165335a800dfe74c3b1e4b411a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binary_to_list(Bin11)&lt;/code&gt; evaluates to &lt;code&gt;[1, 17, 42]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_to_list(Bin11)&lt;/code&gt; は &lt;code&gt;[1, 17, 42]&lt;/code&gt; 1、17、42]に評価されます。</target>
        </trans-unit>
        <trans-unit id="7f94a75319672458a8993a5a6018445eb933bcfb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binary_to_list(Bin12)&lt;/code&gt; evaluates to &lt;code&gt;[97, 98, 99]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_to_list(Bin12)&lt;/code&gt; は &lt;code&gt;[97, 98, 99]&lt;/code&gt; 評価されます。</target>
        </trans-unit>
        <trans-unit id="9ec897cc6cac414b8d4a65707211e9d38f731a5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;binary_to_list(Bin2)&lt;/code&gt; evaluates to &lt;code&gt;[1, 17, 00, 42]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_to_list(Bin2)&lt;/code&gt; は &lt;code&gt;[1, 17, 00, 42]&lt;/code&gt; 1、17、00、42]に評価されます。</target>
        </trans-unit>
        <trans-unit id="c8d746c582c845b2e8bdd3c53e79719945a24fd5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block&lt;/code&gt; - Block the transport. &lt;strong&gt;Optional&lt;/strong&gt;</source>
          <target state="translated">&lt;code&gt;block&lt;/code&gt; -トランスポートをブロックします。&lt;strong&gt;オプション&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8e968dd092a4817ba1e07fce1cdafbd392928772" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;block_user/4&lt;/code&gt; and &lt;code&gt;block_user/5&lt;/code&gt; each blocks the user &lt;code&gt;User&lt;/code&gt; from directory &lt;code&gt;Dir&lt;/code&gt; for a specified amount of time.</source>
          <target state="translated">&lt;code&gt;block_user/4&lt;/code&gt; および &lt;code&gt;block_user/5&lt;/code&gt; はそれぞれ、指定された時間の間、ユーザー &lt;code&gt;User&lt;/code&gt; をディレクトリ &lt;code&gt;Dir&lt;/code&gt; からブロックします。</target>
        </trans-unit>
        <trans-unit id="c1b720c8577ec8fd5220d4a8ab719326268b9fa1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bptr&lt;/code&gt; is a pointer to a buffer containing data to be converted.</source>
          <target state="translated">&lt;code&gt;bptr&lt;/code&gt; は、変換するデータを含むバッファへのポインタです。</target>
        </trans-unit>
        <trans-unit id="36f44964a85f04c8b6fd92e92eb38af4ff7f6f7e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; - Attach whenever a process reaches a breakpoint.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; -プロセスがブレークポイントに到達するたびに接続します。</target>
        </trans-unit>
        <trans-unit id="e70a93a8806770419d539bbdd5ae7c24fdc883a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;break&lt;/code&gt; - Process execution is stopped, normally at a breakpoint. &lt;code&gt;Info={Module,Line}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;break&lt;/code&gt; -プロセスの実行は、通常はブレークポイントで停止します。 &lt;code&gt;Info={Module,Line}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="974f7fe09a42b6e842cb2ad460448861f2988cd4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;brutal_kill&lt;/code&gt; means that the child process is unconditionally terminated using &lt;code&gt;exit(Child, kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;brutal_kill&lt;/code&gt; は、子プロセスが &lt;code&gt;exit(Child, kill)&lt;/code&gt; を使用して無条件に終了されることを意味します。</target>
        </trans-unit>
        <trans-unit id="84a05fdf241e6eb39d9d64cdb875bec6a8355d2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; provide the arguments to the call (the third argument to &lt;code&gt;erlang:port_call/3&lt;/code&gt;). They can be decoded using &lt;code&gt;ei&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; と &lt;code&gt;len&lt;/code&gt; は、呼び出しの引数を提供します（ &lt;code&gt;erlang:port_call/3&lt;/code&gt; の3番目の引数）。それらは、 &lt;code&gt;ei&lt;/code&gt; 関数を使用してデコードできます。</target>
        </trans-unit>
        <trans-unit id="9592d5baeb6834995af947204ffd16d322a0d8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is a pointer to the buffer where the binary data is or will be.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; は、バイナリデータが存在する、または存在するバッファへのポインタです。</target>
        </trans-unit>
        <trans-unit id="020f366ef6e7fa93ca2d78487b1d29ac830fae17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is the buffer containing the term in binary format.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; は、バイナリ形式の用語を含むバッファです。</target>
        </trans-unit>
        <trans-unit id="9358fda02a3a522860f468e50b529164546407cf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; is the buffer.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; はバッファです。</target>
        </trans-unit>
        <trans-unit id="586bddb53ea2a53f6e7445b7fef784195c640e49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;buf&lt;/code&gt; points to a buffer of length &lt;code&gt;*len&lt;/code&gt; where the read data should be placed. On success, this callback should update &lt;code&gt;*len&lt;/code&gt; to the amount of bytes successfully read on the socket.</source>
          <target state="translated">&lt;code&gt;buf&lt;/code&gt; は、読み取ったデータを配置する長さ &lt;code&gt;*len&lt;/code&gt; のバッファーを指します。成功すると、このコールバックは &lt;code&gt;*len&lt;/code&gt; をソケットで正常に読み取られたバイト数に更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="91989446ab3fcfb17a358cc47a306a6845e22013" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp1&lt;/code&gt; is a buffer containing an encoded Erlang term term1.</source>
          <target state="translated">&lt;code&gt;bufp1&lt;/code&gt; は、エンコードされたErlang用語term1を含むバッファーです。</target>
        </trans-unit>
        <trans-unit id="9c2a34acb00a733fae7ddd41aef79e0f36fd2fad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp2&lt;/code&gt; is a buffer containing an encoded Erlang term term2.</source>
          <target state="translated">&lt;code&gt;bufp2&lt;/code&gt; は、エンコードされたErlang用語term2を含むバッファーです。</target>
        </trans-unit>
        <trans-unit id="b514f398a673f0c3431c37ce1fb7770505f66066" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp&lt;/code&gt; is a buffer large enough to hold the expected message.</source>
          <target state="translated">&lt;code&gt;bufp&lt;/code&gt; は、予期されるメッセージを保持するのに十分な大きさのバッファーです。</target>
        </trans-unit>
        <trans-unit id="7a7a9c6db496d05d90264fc19c723591c92e6bca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufp&lt;/code&gt; is a pointer to a buffer containing one or more encoded Erlang terms.</source>
          <target state="translated">&lt;code&gt;bufp&lt;/code&gt; は、1つ以上のエンコードされたErlang用語を含むバッファーへのポインターです。</target>
        </trans-unit>
        <trans-unit id="8aa554368e3bfa313e84792c87a0f8a742e01733" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufpp&lt;/code&gt; is a pointer to a pointer to a buffer containing one or more consecutively encoded Erlang terms. Following a successful call to &lt;code&gt;erl_encode_buf()&lt;/code&gt;, &lt;code&gt;bufpp&lt;/code&gt; is updated so that it points to the position for the next encoded term.</source>
          <target state="translated">&lt;code&gt;bufpp&lt;/code&gt; は、1つ以上の連続してエンコードされたErlang用語を含むバッファーへのポインターへのポインターです。 &lt;code&gt;erl_encode_buf()&lt;/code&gt; の呼び出しが成功した後、 &lt;code&gt;bufpp&lt;/code&gt; は次のエンコードされた用語の位置を指すように更新されます。</target>
        </trans-unit>
        <trans-unit id="4f44057b5d737547a2be6a24c89bb7f43bfb7987" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufpp&lt;/code&gt; is the address of a buffer pointer. The buffer contains one or more consecutively encoded Erlang terms. Following a successful call to &lt;code&gt;erl_decode_buf()&lt;/code&gt;, &lt;code&gt;bufpp&lt;/code&gt; is updated so that it points to the next encoded term.</source>
          <target state="translated">&lt;code&gt;bufpp&lt;/code&gt; は、バッファポインタのアドレスです。バッファには、1つ以上の連続してエンコードされたErlang用語が含まれています。 &lt;code&gt;erl_decode_buf()&lt;/code&gt; の呼び出しが成功した後、 &lt;code&gt;bufpp&lt;/code&gt; は次のエンコードされた用語を指すように更新されます。</target>
        </trans-unit>
        <trans-unit id="bb000a625bd54e5bdff350e8317e6d7e6df9d728" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bufsize&lt;/code&gt; indicates the size of &lt;code&gt;bufp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;bufsize&lt;/code&gt; は &lt;code&gt;bufp&lt;/code&gt; のサイズを示します。</target>
        </trans-unit>
        <trans-unit id="b755c56effd11bcf791291be14253f76dff8c89e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;builtins&lt;/code&gt;, whether calls to BIFs are included in the module's data;</source>
          <target state="translated">&lt;code&gt;builtins&lt;/code&gt; 、BIFへの呼び出しがモジュールのデータに含まれているかどうか。</target>
        </trans-unit>
        <trans-unit id="c0301210a3f69e9e7dbee51658c14c1044ce91d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;builtins&lt;/code&gt;, with initial default value &lt;code&gt;false&lt;/code&gt;;</source>
          <target state="translated">&lt;code&gt;builtins&lt;/code&gt; 。初期デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3919372d103739aa529efd10f11352ffde571ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;bytes : integer&lt;/code&gt; :: Size of data returned. Ex. &lt;code&gt;82&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;bytes : integer&lt;/code&gt; ::返されるデータのサイズ。例 &lt;code&gt;82&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fc288deb34eff3dd05d8920de133e55c4a5b9bc1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c:c/1&lt;/code&gt; is called to compile the specified module on the remote node. &lt;code&gt;erl_match()&lt;/code&gt; checks that the compilation was successful by testing for the expected &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c:c/1&lt;/code&gt; は、リモートノードで指定されたモジュールをコンパイルするために呼び出されます。 &lt;code&gt;erl_match()&lt;/code&gt; は、予想される &lt;code&gt;ok&lt;/code&gt; をテストすることにより、コンパイルが成功したことを確認します。</target>
        </trans-unit>
        <trans-unit id="948dad7d657b8ae0e6a340223bf1bbf5f503f256" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt; - Any literal term. Equivalent to &lt;code&gt;ainq&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; -任意のリテラル用語。 &lt;code&gt;ainq&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="a67e1b4b16be4c24597eb582c0f1cdaaf3154cda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;c&lt;/code&gt; - Any literal term; that is, immediate literals such as SMALL, and CONS or BOXED pointers to literals. (Can be used where the operand in the generic instruction has one of the types &lt;code&gt;i&lt;/code&gt;, &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;n&lt;/code&gt;, or &lt;code&gt;q&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; -任意のリテラル用語。つまり、SMALLなどの即時リテラル、およびリテラルへのCONSまたはBOXEDポインタ。（汎用命令のオペランドのタイプが &lt;code&gt;i&lt;/code&gt; 、 &lt;code&gt;a&lt;/code&gt; 、 &lt;code&gt;n&lt;/code&gt; 、または &lt;code&gt;q&lt;/code&gt; のいずれかである場合に使用できます。）</target>
        </trans-unit>
        <trans-unit id="94dfd35ae9c24c3703a59348eb4cbd1a8470272c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;calendar(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;io(3)&lt;/code&gt;, &lt;code&gt;io_lib(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;maps(3)&lt;/code&gt;, &lt;code&gt;sasl(6)&lt;/code&gt;, &lt;code&gt;unicode(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;calendar(3)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;io(3)&lt;/code&gt; 、 &lt;code&gt;io_lib(3)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;maps(3)&lt;/code&gt; 、 &lt;code&gt;sasl(6)&lt;/code&gt; 、 &lt;code&gt;unicode(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="486affaf706794e646c3485ebbef5f32af4f0616" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;calendar:local_time_to_universal_time/1&lt;/code&gt; (use calendar:local_time_to_universal_time_dst/1 instead)</source>
          <target state="translated">&lt;code&gt;calendar:local_time_to_universal_time/1&lt;/code&gt; （代わりにcalendar：local_time_to_universal_time_dst / 1を使用してください）</target>
        </trans-unit>
        <trans-unit id="0d9fe36a3e680b5ea19a76fae4b2fa4139cc89e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;caller&lt;/code&gt; - for &lt;code&gt;[{'_',[],[{message,{caller}}]}]&lt;/code&gt; (report the calling function)</source>
          <target state="translated">&lt;code&gt;caller&lt;/code&gt; - &lt;code&gt;[{'_',[],[{message,{caller}}]}]&lt;/code&gt; （呼び出し元の関数を報告）</target>
        </trans-unit>
        <trans-unit id="9cf793eea4bf1fd73379c6d4492be1f7ee4cfe4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;case&lt;/code&gt; is another construct in Erlang. Recall that the &lt;code&gt;convert_length&lt;/code&gt; function was written as:</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; はErlangの別の構成要素です。 &lt;code&gt;convert_length&lt;/code&gt; 関数は次のように記述されたことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="e90e35739d7c488cb3524f1590bd7334019556b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cbs&lt;/code&gt; is a pointer to a &lt;code&gt;&lt;a href=&quot;#ei_socket_callbacks&quot;&gt;callback structure&lt;/a&gt;&lt;/code&gt; implementing and alternative socket interface.</source>
          <target state="translated">&lt;code&gt;cbs&lt;/code&gt; は、実装する &lt;code&gt;&lt;a href=&quot;#ei_socket_callbacks&quot;&gt;callback structure&lt;/a&gt;&lt;/code&gt; と代替ソケットインターフェイスへのポインタです。</target>
        </trans-unit>
        <trans-unit id="2c1fa3e2e35ea519f909f00f8d5ca1164c4e557e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cbs_sz&lt;/code&gt; is the size of the structure pointed to by &lt;code&gt;cbs&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cbs_sz&lt;/code&gt; は、 &lt;code&gt;cbs&lt;/code&gt; が指す構造体のサイズです。</target>
        </trans-unit>
        <trans-unit id="cbddc7998ac2e4b689116df33702d9e847ccfa7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cdr&lt;/code&gt; - CORBA (GIOP 1.1)</source>
          <target state="translated">&lt;code&gt;cdr&lt;/code&gt; -CORBA（GIOP 1.1）</target>
        </trans-unit>
        <trans-unit id="4245c60051fa28f6c993f4eb8e040393fb293656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch3&lt;/code&gt; does not need to do any cleaning up before termination. Thus, no shutdown time is needed, but &lt;code&gt;brutal_kill&lt;/code&gt; is sufficient. &lt;code&gt;error_man&lt;/code&gt; can need some time for the event handlers to clean up, thus the shutdown time is set to 5000 ms (which is the default value).</source>
          <target state="translated">&lt;code&gt;ch3&lt;/code&gt; は終了前にクリーンアップを行う必要はありません。したがって、シャットダウン時間は必要ありませんが、 &lt;code&gt;brutal_kill&lt;/code&gt; で十分です。 &lt;code&gt;error_man&lt;/code&gt; は、イベントハンドラーがクリーンアップするのに時間がかかる場合があるため、シャットダウン時間は5000ミリ秒（デフォルト値）に設定されています。</target>
        </trans-unit>
        <trans-unit id="da4e6492a6a940b0b8ec65b4d2008b4e92ab6526" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch3&lt;/code&gt; is the name of the &lt;code&gt;gen_server&lt;/code&gt; and must agree with the name used to start it. &lt;code&gt;alloc&lt;/code&gt; is the actual request.</source>
          <target state="translated">&lt;code&gt;ch3&lt;/code&gt; は &lt;code&gt;gen_server&lt;/code&gt; の名前であり、それを開始するために使用される名前と一致する必要があります。 &lt;code&gt;alloc&lt;/code&gt; は実際のリクエストです。</target>
        </trans-unit>
        <trans-unit id="c4d3e6a239f3f0a72fbae0ffce0d02ba9c239e4c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch3&lt;/code&gt; is the name of the &lt;code&gt;gen_server&lt;/code&gt;. &lt;code&gt;{free, Ch}&lt;/code&gt; is the actual request.</source>
          <target state="translated">&lt;code&gt;ch3&lt;/code&gt; は &lt;code&gt;gen_server&lt;/code&gt; の名前です。 &lt;code&gt;{free, Ch}&lt;/code&gt; が実際のリクエストです。</target>
        </trans-unit>
        <trans-unit id="637a97c0869f0dca51007ec5f8dd019cbe62121d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch4:start_link&lt;/code&gt; calls the function &lt;code&gt;proc_lib:start_link&lt;/code&gt;. This function takes a module name, a function name, and an argument list as arguments, spawns, and links to a new process. The new process starts by executing the given function, here &lt;code&gt;ch4:init(Pid)&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid (&lt;code&gt;self()&lt;/code&gt;) of the first process, which is the parent process.</source>
          <target state="translated">&lt;code&gt;ch4:start_link&lt;/code&gt; は、関数 &lt;code&gt;proc_lib:start_link&lt;/code&gt; を呼び出します。この関数は、モジュール名、関数名、および引数リストを引数として取り、生成し、新しいプロセスにリンクします。新しいプロセスは、指定された関数（ここでは &lt;code&gt;ch4:init(Pid)&lt;/code&gt; )を実行することから始まります。ここで、 &lt;code&gt;Pid&lt;/code&gt; は親プロセスである最初のプロセスのpid（ &lt;code&gt;self()&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="450040c43153c267bc9a946c817b748e058c6967" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ch_sup:start_link&lt;/code&gt; calls function &lt;code&gt;supervisor:start_link/2&lt;/code&gt;, which spawns and links to a new process, a supervisor.</source>
          <target state="translated">&lt;code&gt;ch_sup:start_link&lt;/code&gt; は、関数 &lt;code&gt;supervisor:start_link/2&lt;/code&gt; を呼び出します。この関数は、新しいプロセスである監視プログラムを生成してリンクします。</target>
        </trans-unit>
        <trans-unit id="e07f79a4537803dd33d38991ec86dbac443c7e00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;change_table_copy_type(Tab, Node, ToType)&lt;/code&gt; changes the storage type of a table. For example, a RAM table is changed to a &lt;code&gt;disc_table&lt;/code&gt; at the node specified as &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;change_table_copy_type(Tab, Node, ToType)&lt;/code&gt; は、テーブルのストレージタイプを変更します。たとえば、RAMテーブルは &lt;code&gt;Node&lt;/code&gt; として指定されたノードで &lt;code&gt;disc_table&lt;/code&gt; に変更されます。</target>
        </trans-unit>
        <trans-unit id="166ed2a7f68758ef24b82ee6382f345020f96be9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check(FileName)&lt;/code&gt; is equivalent to &lt;code&gt;check([FileName], [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;check(FileName)&lt;/code&gt; は &lt;code&gt;check([FileName], [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="87fdff375b367943a5a921c311557301ab0babbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;check&lt;/code&gt; is always called by the same process, so &lt;code&gt;put&lt;/code&gt; and &lt;code&gt;get&lt;/code&gt; are possible.</source>
          <target state="translated">&lt;code&gt;check&lt;/code&gt; は常に同じプロセスによって呼び出されるため、 &lt;code&gt;put&lt;/code&gt; と &lt;code&gt;get&lt;/code&gt; が可能です。</target>
        </trans-unit>
        <trans-unit id="41d0640805bfcc8da28c3b66b06e58325aec4149" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkpoints&lt;/code&gt;. Returns a list of the names of the checkpoints currently active on this node.</source>
          <target state="translated">&lt;code&gt;checkpoints&lt;/code&gt; 。このノードで現在アクティブなチェックポイントの名前のリストを返します。</target>
        </trans-unit>
        <trans-unit id="b95bc3b85036835357a490f2507a02039107f20c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checkpoints&lt;/code&gt;. Returns the names of the currently active checkpoints, which involve this table on this node.</source>
          <target state="translated">&lt;code&gt;checkpoints&lt;/code&gt; 。このノードのこのテーブルに関係する、現在アクティブなチェックポイントの名前を返します。</target>
        </trans-unit>
        <trans-unit id="62376e5d841ce4eadcf7894ca3146f0f84dd99a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;checksum&lt;/code&gt; - Defines if the file is checksummed or not.</source>
          <target state="translated">&lt;code&gt;checksum&lt;/code&gt; -ファイルがチェックサムされるかどうかを定義します。</target>
        </trans-unit>
        <trans-unit id="8af5ef256449de22112f9e1149d05baa4c4e4b9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk()&lt;/code&gt; returns &lt;code&gt;eof&lt;/code&gt; when the end of the log is reached, or &lt;code&gt;{error, Reason}&lt;/code&gt; if an error occurs. If a wrap log file is missing, a message is output on the error log.</source>
          <target state="translated">&lt;code&gt;chunk()&lt;/code&gt; は、ログの最後に到達すると &lt;code&gt;eof&lt;/code&gt; を返し、エラーが発生した場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。ラップログファイルがない場合は、エラーログにメッセージが出力されます。</target>
        </trans-unit>
        <trans-unit id="9f7b3958ce6e0d433e93aee48cfd7872c6879d58" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk()&lt;/code&gt; returns a tuple &lt;code&gt;{Continuation2, Terms, Badbytes}&lt;/code&gt; if the log is opened in read-only mode and the read chunk is corrupt. &lt;code&gt;Badbytes&lt;/code&gt; is the number of bytes in the file found not to be Erlang terms in the chunk. Notice that the log is not repaired. When trying to read chunks from a log opened in read-write mode, tuple &lt;code&gt;{corrupt_log_file, FileName}&lt;/code&gt; is returned if the read chunk is corrupt.</source>
          <target state="translated">&lt;code&gt;chunk()&lt;/code&gt; ログが読み取り専用モードで開かれ、読み取りチャンクが破損している場合、chunk（）はタプル &lt;code&gt;{Continuation2, Terms, Badbytes}&lt;/code&gt; 返します。 &lt;code&gt;Badbytes&lt;/code&gt; は、チャンク内のErlang用語ではないことが判明したファイルのバイト数です。ログは修復されないことに注意してください。読み取り/書き込みモードで開かれたログからチャンクを読み取ろうとすると、読み取られたチャンクが破損している場合、タプル &lt;code&gt;{corrupt_log_file, FileName}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4e8f124c0786dad7795dc48255d2a5526f66a2d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;chunk()&lt;/code&gt; returns a tuple &lt;code&gt;{Continuation2, Terms}&lt;/code&gt;, where &lt;code&gt;Terms&lt;/code&gt; is a list of terms found in the log. &lt;code&gt;Continuation2&lt;/code&gt; is yet another continuation, which must be passed on to any subsequent calls to &lt;code&gt;chunk()&lt;/code&gt;. With a series of calls to &lt;code&gt;chunk()&lt;/code&gt;, all terms from a log can be extracted.</source>
          <target state="translated">&lt;code&gt;chunk()&lt;/code&gt; はタプル &lt;code&gt;{Continuation2, Terms}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Terms&lt;/code&gt; はログにある用語のリストです。 &lt;code&gt;Continuation2&lt;/code&gt; はさらに別の継続であり、後続の &lt;code&gt;chunk()&lt;/code&gt; の呼び出しに渡す必要があります。 &lt;code&gt;chunk()&lt;/code&gt; への一連の呼び出しにより、ログからすべての用語を抽出できます。</target>
        </trans-unit>
        <trans-unit id="ded3fda3b82e0ccd56e08c222c189eac20f2fc84" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ciphers&lt;/code&gt; (use old string format)</source>
          <target state="translated">&lt;code&gt;ciphers&lt;/code&gt; （古い文字列形式を使用）</target>
        </trans-unit>
        <trans-unit id="b770f867791c517d00ec5b11366aa1a2498c5247" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;class : string&lt;/code&gt; :: Error reason. Ex. &lt;code&gt;&quot;error&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;class : string&lt;/code&gt; ::エラーの理由。例 &lt;code&gt;&quot;error&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0bb984aad855371b26b1a2f3af1bb51acc7b751d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;client_&lt;/code&gt;-prefixed options are used when the distribution initiates a connection to another node. &lt;code&gt;server_&lt;/code&gt;-prefixed options are used when accepting a connection from a remote node.</source>
          <target state="translated">&lt;code&gt;client_&lt;/code&gt; -prefixedオプションは、配布が別のノードへの接続を開始するときに使用されます。 &lt;code&gt;server_&lt;/code&gt; -prefixedオプションは、リモートノードからの接続を受け入れるときに使用されます。</target>
        </trans-unit>
        <trans-unit id="753db8f1aebf437e5a6b184af761bd6afff70793" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;closure&lt;/code&gt;, &lt;code&gt;components&lt;/code&gt;, &lt;code&gt;condensation&lt;/code&gt;, &lt;code&gt;domain&lt;/code&gt;, &lt;code&gt;range&lt;/code&gt;, &lt;code&gt;strict&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;closure&lt;/code&gt; 、 &lt;code&gt;components&lt;/code&gt; 、 &lt;code&gt;condensation&lt;/code&gt; 、 &lt;code&gt;domain&lt;/code&gt; 、 &lt;code&gt;range&lt;/code&gt; 、 &lt;code&gt;strict&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8b877d0edd90635ff602145be40854a914d08981" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to broadcast on.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; は、ブロードキャストする条件変数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="e184f22bd87babddbbb471c5a0861f5744761602" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to destroy.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; は、破棄する条件変数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="b732e57aaef8e8081a9cf4e1a000c041ccd968fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to signal on.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; は、シグナルを送る条件変数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="2201e749d7512aceb643478b0c70a66fff6c7656" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to a condition variable to wait on. &lt;code&gt;mtx&lt;/code&gt; is a pointer to a mutex to unlock while waiting.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; は、待機する条件変数へのポインターです。 &lt;code&gt;mtx&lt;/code&gt; は、待機中にロックを解除するミューテックスへのポインターです。</target>
        </trans-unit>
        <trans-unit id="5f33e80633efeed0de41cd20b145beba0880de34" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cnd&lt;/code&gt; is a pointer to an initialized condition.</source>
          <target state="translated">&lt;code&gt;cnd&lt;/code&gt; は、初期化された条件へのポインターです。</target>
        </trans-unit>
        <trans-unit id="20f5fb93fff6d34d1700688d7c6c08f4cbc4a948" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;code-model Model&lt;/code&gt; - The code model as given to &lt;code&gt;-mcmodel&lt;/code&gt; option for GCC. Default is &lt;code&gt;unknown&lt;/code&gt;. If the code model is &lt;code&gt;small&lt;/code&gt; (and the word size is 64 bits), &lt;strong&gt;beam_makeops&lt;/strong&gt; will pack operands into the upper 32 bits of the instruction word.</source>
          <target state="translated">&lt;code&gt;code-model Model&lt;/code&gt; &lt;code&gt;-mcmodel&lt;/code&gt; オプションに指定されたコードモデル。デフォルトは &lt;code&gt;unknown&lt;/code&gt; です。コードモデルが &lt;code&gt;small&lt;/code&gt; 場合（およびワードサイズが64ビットの場合）、&lt;strong&gt;beam_makeops&lt;/strong&gt;はオペランドを命令ワードの上位32ビットにパックします。</target>
        </trans-unit>
        <trans-unit id="7a03e8bb9ae61dc43deaaf3002354103194e5760" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;code:rehash/0&lt;/code&gt; (the code path cache feature has been removed)</source>
          <target state="translated">&lt;code&gt;code:rehash/0&lt;/code&gt; （コードパスキャッシュ機能は削除されました）</target>
        </trans-unit>
        <trans-unit id="00473b126d0a7652ea3254f682ffc5bf58d1f9a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;collisions&lt;/code&gt; indicates how many elements are sharing positions in the registry.</source>
          <target state="translated">&lt;code&gt;collisions&lt;/code&gt; は、レジストリ内で位置を共有している要素の数を示します。</target>
        </trans-unit>
        <trans-unit id="add781ee986781b3ce385d7886b10f9ee188263a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;combine_error&lt;/code&gt;. Table options illegally combined.</source>
          <target state="translated">&lt;code&gt;combine_error&lt;/code&gt; 。テーブルオプションが不正に結合されています。</target>
        </trans-unit>
        <trans-unit id="7c4e1a52bbe022a8fb6a2c2758fc57367d5661e7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command : integer&lt;/code&gt; :: Command integer. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;command : integer&lt;/code&gt; ::コマンド整数。例 &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9152f8b34bf476261276d6aa9b6c95677788059d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command [parameters]&lt;/code&gt; is executed.</source>
          <target state="translated">&lt;code&gt;command [parameters]&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="2803cf83c29548794241441d3248a8c8eab2eb02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;command&lt;/code&gt; is an integer, obtained from the call from Erlang (the second argument to &lt;code&gt;erlang:port_call/3&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;command&lt;/code&gt; は、Erlangからの呼び出しから取得された整数です（ &lt;code&gt;erlang:port_call/3&lt;/code&gt; の 2番目の引数）。</target>
        </trans-unit>
        <trans-unit id="43dafc94528a941655db75f3381463d76dbe825d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;commitFailed | undoFailed | genErr&lt;/code&gt;(SNMPv2)</source>
          <target state="translated">&lt;code&gt;commitFailed | undoFailed | genErr&lt;/code&gt; （SNMPv2）</target>
        </trans-unit>
        <trans-unit id="629a12e24a17f3ddef11586998dd4ec5c3c51f43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;common_reason()&lt;/code&gt; = &lt;code&gt;econn | eclosed | term()&lt;/code&gt; - some explanation of what went wrong</source>
          <target state="translated">&lt;code&gt;common_reason()&lt;/code&gt; = &lt;code&gt;econn | eclosed | term()&lt;/code&gt; -問題の原因の説明</target>
        </trans-unit>
        <trans-unit id="b63b48b8aaf391f30a8116cb628cde3ab4e343e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;community.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#community&quot;&gt;Communities&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;community.conf&lt;/code&gt; ： &lt;code&gt;&lt;a href=&quot;#community&quot;&gt;Communities&lt;/a&gt;&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="45a5fc99e43f5b724b30d2b4e7e4f8273e1b7ca1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;community_entry(&quot;all-rights&quot;)&lt;/code&gt; translates to the following call: &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, CommunityIndex, &quot;&quot;, &quot;&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;community_entry(&quot;all-rights&quot;)&lt;/code&gt; は、 &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, CommunityIndex, &quot;&quot;, &quot;&quot;)&lt;/code&gt; 呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="af49f290ae8123993fe5f818dccec559995abe76" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;community_entry(&quot;public&quot;)&lt;/code&gt; translates to the following call: &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, &quot;initial&quot;, &quot;&quot;, &quot;&quot;)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;community_entry(&quot;public&quot;)&lt;/code&gt; は次の呼び出しに変換されます： &lt;code&gt;community_entry(CommunityIndex, CommunityIndex, &quot;initial&quot;, &quot;&quot;, &quot;&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb25bc344c91ef01ac5c00d3d9049a4cf28d55ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compact&lt;/code&gt; has a format corresponding to:</source>
          <target state="translated">&lt;code&gt;compact&lt;/code&gt; は以下に対応するフォーマットを持っています：</target>
        </trans-unit>
        <trans-unit id="8af1155a846cd399822873e4f5d820537addcb49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;compress_on_rotate&lt;/code&gt; has no meaning if &lt;code&gt;&lt;a href=&quot;#max_no_bytes&quot;&gt;max_no_bytes&lt;/a&gt;&lt;/code&gt; has the value &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compress_on_rotate&lt;/code&gt; があれば意味がありません &lt;code&gt;&lt;a href=&quot;#max_no_bytes&quot;&gt;max_no_bytes&lt;/a&gt;&lt;/code&gt; は値の持つ &lt;code&gt;infinity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe08b2d80ea20fe5a1d5d0f983bdce680e583294" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;computation_failed&lt;/code&gt;: the computation fails of another reason than &lt;code&gt;low_entropy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;computation_failed&lt;/code&gt; 失敗： &lt;code&gt;low_entropy&lt;/code&gt; 以外の理由で計算が失敗します。</target>
        </trans-unit>
        <trans-unit id="eee140ce407e22cfe49926dc2ef9bf00fd7505e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;config(4)&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;config(4)&lt;/code&gt; カーネルのconfig（4）マニュアルページ</target>
        </trans-unit>
        <trans-unit id="26e21c618a893d7c89837a650fffcc4cd8145f7b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conn_log_mod()&lt;/code&gt; is the name of the &lt;code&gt;Common Test&lt;/code&gt; module implementing the connection protocol, for example, &lt;code&gt;ct_netconfc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;conn_log_mod()&lt;/code&gt; は、接続プロトコルを実装する &lt;code&gt;Common Test&lt;/code&gt; モジュールの名前です（例： &lt;code&gt;ct_netconfc&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="1fb163139309bd997116d5508149a3a80552684d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conn_mod()&lt;/code&gt; is the name of the &lt;code&gt;Common Test&lt;/code&gt; module implementing the connection protocol, that is, &lt;code&gt;ct_telnet&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;conn_mod()&lt;/code&gt; は、接続プロトコルを実装する &lt;code&gt;Common Test&lt;/code&gt; モジュールの名前、 &lt;code&gt;ct_telnet&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="310dcb78a58000d40b19999fd64d7d840f17e923" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connect/1&lt;/code&gt; loads the driver, opens it, and logs on to the database, returning the Erlang port if successful.</source>
          <target state="translated">&lt;code&gt;connect/1&lt;/code&gt; はドライバーをロードして開き、データベースにログオンし、成功した場合はErlangポートを返します。</target>
        </trans-unit>
        <trans-unit id="caa42197c0e7896b05b8108667bc65c22464af97" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;connected&lt;/code&gt; - &lt;code&gt;erlang:nodes(connected)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;connected&lt;/code&gt; - &lt;code&gt;erlang:nodes(connected)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="242d0128e710936b61ef8cb03a558ca9c6d61b87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conp&lt;/code&gt; is a pointer to an &lt;code&gt;&lt;a href=&quot;#ErlConnect&quot;&gt;ErlConnect&lt;/a&gt;&lt;/code&gt; struct.</source>
          <target state="translated">&lt;code&gt;conp&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#ErlConnect&quot;&gt;ErlConnect&lt;/a&gt;&lt;/code&gt; 構造体へのポインターです。</target>
        </trans-unit>
        <trans-unit id="92cd3d4350ce9efed99d6d467dd677d61cb05c12" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;conp&lt;/code&gt; is a pointer to an &lt;code&gt;ErlConnect&lt;/code&gt; struct, described as follows:</source>
          <target state="translated">&lt;code&gt;conp&lt;/code&gt; は &lt;code&gt;ErlConnect&lt;/code&gt; 構造体へのポインターであり、次のように説明されています。</target>
        </trans-unit>
        <trans-unit id="407ba3561e1cb3e4c0b4b87da7dc3dc9b0ac5071" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const char *ei_thisnodename(ei_cnode *ec)&lt;/code&gt;&lt;code&gt;const char *ei_thishostname(ei_cnode *ec)&lt;/code&gt;&lt;code&gt;const char *ei_thisalivename(ei_cnode *ec)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;const char *ei_thisnodename(ei_cnode *ec)&lt;/code&gt; &lt;code&gt;const char *ei_thishostname(ei_cnode *ec)&lt;/code&gt; &lt;code&gt;const char *ei_thisalivename(ei_cnode *ec)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1da83c6b37e4b57bb63855bce371b9fcb0518fc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;const char *erl_thisalivename()&lt;/code&gt;&lt;code&gt;const char *erl_thiscookie()&lt;/code&gt;&lt;code&gt;short erl_thiscreation()&lt;/code&gt;&lt;code&gt;const char *erl_thishostname()&lt;/code&gt;&lt;code&gt;const char *erl_thisnodename()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;const char *erl_thisalivename()&lt;/code&gt; &lt;code&gt;const char *erl_thiscookie()&lt;/code&gt; &lt;code&gt;short erl_thiscreation()&lt;/code&gt; &lt;code&gt;const char *erl_thishostname()&lt;/code&gt; &lt;code&gt;const char *erl_thisnodename()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="77a34029e14cc38271c72a531e899e83f34ccd47" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;context.conf&lt;/code&gt;: see &lt;code&gt;&lt;a href=&quot;#context&quot;&gt;Contexts&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;context.conf&lt;/code&gt; ： &lt;code&gt;&lt;a href=&quot;#context&quot;&gt;Contexts&lt;/a&gt;&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="786a0affbb3ef2981961c506021e8f22cf48941d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;control_char&lt;/code&gt; is the type of control sequence: &lt;code&gt;$P&lt;/code&gt;, &lt;code&gt;$w&lt;/code&gt;, and so on.</source>
          <target state="translated">&lt;code&gt;control_char&lt;/code&gt; は、制御シーケンスのタイプです： &lt;code&gt;$P&lt;/code&gt; 、 &lt;code&gt;$w&lt;/code&gt; など。</target>
        </trans-unit>
        <trans-unit id="0c7c364bf87067f9368199dfab8f0e9200d5c802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;convert_request_date/1&lt;/code&gt; converts &lt;code&gt;DateString&lt;/code&gt; to the Erlang date format. &lt;code&gt;DateString&lt;/code&gt; must be in one of the three date formats defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;convert_request_date/1&lt;/code&gt; は、 &lt;code&gt;DateString&lt;/code&gt; をErlang日付形式に変換します。 &lt;code&gt;DateString&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; で定義されている3つの日付形式のいずれかでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ba2866f0d5129f4ab2b29e9d8b58c81aad9e098f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie&lt;/code&gt; is the authorization string required for access to the remote node. If &lt;code&gt;NULL&lt;/code&gt;, the user &lt;code&gt;HOME&lt;/code&gt; directory is searched for a cookie file &lt;code&gt;.erlang.cookie&lt;/code&gt;. The path to the home directory is retrieved from environment variable &lt;code&gt;HOME&lt;/code&gt; on Unix and from the &lt;code&gt;HOMEDRIVE&lt;/code&gt; and &lt;code&gt;HOMEPATH&lt;/code&gt; variables on Windows. For more details, see the &lt;code&gt;auth&lt;/code&gt; module in Kernel.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; は、リモートノードへのアクセスに必要な認証文字列です。場合は &lt;code&gt;NULL&lt;/code&gt; 、ユーザーの &lt;code&gt;HOME&lt;/code&gt; ディレクトリには、クッキーファイルが検索され &lt;code&gt;.erlang.cookie&lt;/code&gt; 。ホームディレクトリへのパスは、UNIXでは環境変数 &lt;code&gt;HOME&lt;/code&gt; から、Windowsでは &lt;code&gt;HOMEDRIVE&lt;/code&gt; および &lt;code&gt;HOMEPATH&lt;/code&gt; 変数から取得されます。詳細については、カーネルの &lt;code&gt;auth&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="42bca715a9185b21349e1aec4da49804e0dd0c2c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie&lt;/code&gt; is the cookie for the node.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; はノードのcookieです。</target>
        </trans-unit>
        <trans-unit id="817b59120c7e12c5e02241436194d11a4a5ba478" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cookie&lt;/code&gt;. Returns a table cookie, which is a unique system-generated identifier for the table. The cookie is used internally to ensure that two different table definitions using the same table name cannot accidentally be intermixed. The cookie is generated when the table is created initially.</source>
          <target state="translated">&lt;code&gt;cookie&lt;/code&gt; 。システムで生成された一意のテーブル識別子であるテーブルCookieを返します。Cookieは内部的に使用され、同じテーブル名を使用する2つの異なるテーブル定義が誤って混在しないようにします。Cookieは、テーブルが最初に作成されるときに生成されます。</target>
        </trans-unit>
        <trans-unit id="c8a1d24e0052f8872cb46a15e10a289509b724e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;count&lt;/code&gt; is the address of an integer, or &lt;code&gt;NULL&lt;/code&gt;. If &lt;code&gt;count&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, it is set by the function to the number of names found.</source>
          <target state="translated">&lt;code&gt;count&lt;/code&gt; は整数のアドレス、または &lt;code&gt;NULL&lt;/code&gt; です。 &lt;code&gt;count&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、関数によって、見つかった名前の数に設定されます。</target>
        </trans-unit>
        <trans-unit id="49e81525989f91eca7e0066fbeaa05638d14a178" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; is a profiling tool that can be used to get a picture of how often different functions in the system are called.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; は、システム内のさまざまな関数が呼び出される頻度を把握するために使用できるプロファイリングツールです。</target>
        </trans-unit>
        <trans-unit id="d0e94809d26e0e40fc7bfc527ddb50f2314ed029" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; is something in between &lt;code&gt;fprof&lt;/code&gt; and &lt;code&gt;cover&lt;/code&gt; regarding features. It counts how many times each function is called when the program is run, on a per module basis. &lt;code&gt;cprof&lt;/code&gt; has a low performance degradation effect (compared with &lt;code&gt;fprof&lt;/code&gt;) and does not need to recompile any modules to profile (compared with &lt;code&gt;cover&lt;/code&gt;). For more information, see the &lt;code&gt;cprof&lt;/code&gt; manual page in Tools.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; は、機能に関する &lt;code&gt;fprof&lt;/code&gt; と &lt;code&gt;cover&lt;/code&gt; 中間にあります。モジュールごとに、プログラムの実行時に各関数が呼び出された回数をカウントします。 &lt;code&gt;cprof&lt;/code&gt; のパフォーマンス低下効果は低く（ &lt;code&gt;fprof&lt;/code&gt; と比較）、モジュールを再コンパイルしてプロファイルを作成する必要はありません（ &lt;code&gt;cover&lt;/code&gt; と比較）。詳細については、ツールの &lt;code&gt;cprof&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="44744f0de84bc9d55c4eadbd5ce38738d9c24e19" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; is the most lightweight tool, but it only provides execution counts on a function basis (for all processes, not per process).</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; は最も軽量なツールですが、関数ベースでのみ実行カウントを提供します（プロセスごとではなく、すべてのプロセスに対して）。</target>
        </trans-unit>
        <trans-unit id="4048a0d6fa4c493f01ecbc1d21704dcaaed1ce8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; presents all profiled modules in decreasing total call count order, and for each module presents all profiled functions also in decreasing call count order. A call count limit can be specified to filter out all functions below the limit.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; は、プロファイリングされたすべてのモジュールを合計コール数の降順で表示し、各モジュールについて、プロファイリングされたすべての関数をコール数の降順で表示します。呼び出し回数制限を指定して、制限以下のすべての関数を除外できます。</target>
        </trans-unit>
        <trans-unit id="6ab6878d3ec5d2819f77ff8acce68315369d55fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cprof&lt;/code&gt; uses breakpoints similar to local call trace, but containing counters, to collect profiling data. Therfore there is no need for special compilation of any module to be profiled.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; は、ローカルコールトレースと同様のブレークポイントを使用しますが、カウンターを含み、プロファイリングデータを収集します。したがって、プロファイルするモジュールを特別にコンパイルする必要はありません。</target>
        </trans-unit>
        <trans-unit id="f6c7f300bac5b6c58891e7324251fa70ca1a183c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cpu_sup&lt;/code&gt; is a process which supervises the CPU load and CPU utilization. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix, although CPU utilization values (&lt;code&gt;util/0,1&lt;/code&gt;) are only available for Solaris, Linux and FreeBSD.</source>
          <target state="translated">&lt;code&gt;cpu_sup&lt;/code&gt; は、CPU負荷とCPU使用率を監視するプロセスです。これはOS_Monアプリケーションの一部です &lt;code&gt;os_mon(6)&lt;/code&gt; 参照してください。Unixで使用できますが、CPU使用率の値（ &lt;code&gt;util/0,1&lt;/code&gt; ）は、Solaris、Linux、およびFreeBSDでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="8f733e1e243b4e78c37aa3bf12d9888559fd4e16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create/2&lt;/code&gt; and &lt;code&gt;create/3&lt;/code&gt; are provided as synonyms to resemble module &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;create/2&lt;/code&gt; と &lt;code&gt;create/3&lt;/code&gt; は、モジュール &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; に似た同義語として提供されています。</target>
        </trans-unit>
        <trans-unit id="86837ff50eb1f72f6c14616c4e5ab70595b6c916" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;create_etag/1&lt;/code&gt; calculates the Etag for a file from its size and time for last modification. &lt;code&gt;FileInfo&lt;/code&gt; is a record defined in &lt;code&gt;kernel/include/file.hrl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;create_etag/1&lt;/code&gt; は、最後の変更のサイズと時間からファイルのEtagを計算します。 &lt;code&gt;FileInfo&lt;/code&gt; は、 &lt;code&gt;kernel/include/file.hrl&lt;/code&gt; で定義されたレコードです。</target>
        </trans-unit>
        <trans-unit id="147786f0517ecc77a8c88e11d308b3b944b51008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;creation&lt;/code&gt; helps identifying a particular instance of a C-node. In particular, it can help prevent us from receiving messages sent to an earlier process with the same registered name.</source>
          <target state="translated">&lt;code&gt;creation&lt;/code&gt; は、Cノードの特定のインスタンスを識別するのに役立ちます。特に、同じ登録名を持つ以前のプロセスに送信されたメッセージを受信できないようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="ecba77368ea7d93ebe0e99703e7acc590f0dcbe7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;creation&lt;/code&gt; identifies a specific instance of a C-node. It can help prevent the node from receiving messages sent to an earlier process with the same registered name.</source>
          <target state="translated">&lt;code&gt;creation&lt;/code&gt; は、Cノードの特定のインスタンスを識別します。これは、ノードが同じ登録名を持つ以前のプロセスに送信されたメッセージを受信しないようにするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3e2f0434ccaddbdbdb4597f9f04a694d0d591ab6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;creation&lt;/code&gt; is an arbitrary number.</source>
          <target state="translated">&lt;code&gt;creation&lt;/code&gt; は任意の数です。</target>
        </trans-unit>
        <trans-unit id="25c1f766dcf6145f2806239ba1561f608c475382" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crl_cache&lt;/code&gt; (write as Erlang term)</source>
          <target state="translated">&lt;code&gt;crl_cache&lt;/code&gt; （Erlang用語として記述）</target>
        </trans-unit>
        <trans-unit id="ffa34f5ddf34f9a5c238a55d4a266426197e3591" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:block_decrypt/3&lt;/code&gt; (use crypto:crypto_one_time/4 or crypto:crypto_init/3 + crypto:crypto_update/2 + crypto:crypto_final/1 instead)</source>
          <target state="translated">&lt;code&gt;crypto:block_decrypt/3&lt;/code&gt; （代わりにcrypto：crypto_one_time / 4またはcrypto：crypto_init / 3 + crypto：crypto_update / 2 + crypto：crypto_final / 1を使用してください）</target>
        </trans-unit>
        <trans-unit id="6b5b92a341240dd6aae3771857214c7623f21015" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:block_decrypt/4&lt;/code&gt; (use crypto:crypto_one_time/5, crypto:crypto_one_time_aead/6,7 or crypto:crypto_(dyn_iv)?_init + crypto:crypto_(dyn_iv)?_update + crypto:crypto_final instead)</source>
          <target state="translated">&lt;code&gt;crypto:block_decrypt/4&lt;/code&gt; （crypto：crypto_one_time / 5、crypto：crypto_one_time_aead / 6,7またはcrypto：crypto_（dyn_iv）？_ init + crypto：crypto_（dyn_iv）？_ update + crypto：crypto_finalを代わりに使用）</target>
        </trans-unit>
        <trans-unit id="40505379e274cb597daf34f492321889849550ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:block_encrypt/3&lt;/code&gt; (use crypto:crypto_one_time/4 or crypto:crypto_init/3 + crypto:crypto_update/2 + crypto:crypto_final/1 instead)</source>
          <target state="translated">&lt;code&gt;crypto:block_encrypt/3&lt;/code&gt; （代わりにcrypto：crypto_one_time / 4またはcrypto：crypto_init / 3 + crypto：crypto_update / 2 + crypto：crypto_final / 1を使用してください）</target>
        </trans-unit>
        <trans-unit id="e3057a18bfa25380aee3fff0b03977a3867669a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:block_encrypt/4&lt;/code&gt; (use crypto:crypto_one_time/5, crypto:crypto_one_time_aead/6,7 or crypto:crypto_(dyn_iv)?_init + crypto:crypto_(dyn_iv)?_update + crypto:crypto_final instead)</source>
          <target state="translated">&lt;code&gt;crypto:block_encrypt/4&lt;/code&gt; （crypto：crypto_one_time / 5、crypto：crypto_one_time_aead / 6,7またはcrypto：crypto_（dyn_iv）？_ init + crypto：crypto_（dyn_iv）？_ update + crypto：crypto_finalを代わりに使用）</target>
        </trans-unit>
        <trans-unit id="e89a5bb2e2ceb4fa68a151818baba912ba0e8148" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:cmac/3&lt;/code&gt; (use crypto:mac/4 instead)</source>
          <target state="translated">&lt;code&gt;crypto:cmac/3&lt;/code&gt; （代わりにcrypto：mac / 4を使用）</target>
        </trans-unit>
        <trans-unit id="1093c5b00125fd6bc821f0860bc8f4686af42139" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:cmac/4&lt;/code&gt; (use crypto:macN/5 instead)</source>
          <target state="translated">&lt;code&gt;crypto:cmac/4&lt;/code&gt; （代わりにcrypto：macN / 5を使用）</target>
        </trans-unit>
        <trans-unit id="f2b79cdab59f72b976a2c52b421fa7029319c307" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:hmac/3&lt;/code&gt; (use crypto:mac/4 instead)</source>
          <target state="translated">&lt;code&gt;crypto:hmac/3&lt;/code&gt; （代わりにcrypto：mac / 4を使用）</target>
        </trans-unit>
        <trans-unit id="bbbbf803363e104fcfbb25b6ca265512f74e146e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:hmac/4&lt;/code&gt; (use crypto:macN/5 instead)</source>
          <target state="translated">&lt;code&gt;crypto:hmac/4&lt;/code&gt; （代わりにcrypto：macN / 5を使用）</target>
        </trans-unit>
        <trans-unit id="e6a86129f94cccfb1271e2222842c7fc7819a106" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:hmac_final/1&lt;/code&gt; (use crypto:mac_final/1 instead)</source>
          <target state="translated">&lt;code&gt;crypto:hmac_final/1&lt;/code&gt; （代わりにcrypto：mac_final / 1を使用してください）</target>
        </trans-unit>
        <trans-unit id="4d63b1a8f396ff5e8c13b16a5bb9edfec18d74b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:hmac_final_n/2&lt;/code&gt; (use crypto:mac_finalN/2 instead)</source>
          <target state="translated">&lt;code&gt;crypto:hmac_final_n/2&lt;/code&gt; （代わりにcrypto：mac_finalN / 2を使用してください）</target>
        </trans-unit>
        <trans-unit id="4d1e187ed71824609f3773bee8afd38a659b4ccb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:hmac_init/2&lt;/code&gt; (use crypto:mac_init/3 instead)</source>
          <target state="translated">&lt;code&gt;crypto:hmac_init/2&lt;/code&gt; （代わりにcrypto：mac_init / 3を使用）</target>
        </trans-unit>
        <trans-unit id="c24f7b5f90782f467bc792181a134783f6998520" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:hmac_update/2&lt;/code&gt; (use crypto:mac_update/2 instead)</source>
          <target state="translated">&lt;code&gt;crypto:hmac_update/2&lt;/code&gt; （代わりにcrypto：mac_update / 2を使用してください）</target>
        </trans-unit>
        <trans-unit id="0db0be87bbcf17c81744d4cf91e5b3c5e40037cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:next_iv/_&lt;/code&gt; (see the 'New and Old API' chapter of the CRYPTO User's guide)</source>
          <target state="translated">&lt;code&gt;crypto:next_iv/_&lt;/code&gt; （CRYPTOユーザーガイドの「新旧のAPI」の章を参照）</target>
        </trans-unit>
        <trans-unit id="7db5d564c2c393e525493b67881100651da60593" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:poly1305/2&lt;/code&gt; (use crypto:mac/3 instead)</source>
          <target state="translated">&lt;code&gt;crypto:poly1305/2&lt;/code&gt; （代わりにcrypto：mac / 3を使用）</target>
        </trans-unit>
        <trans-unit id="b8086501bdff3798ed31c64f449818aa8a01316a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:rand_bytes/1&lt;/code&gt; ()</source>
          <target state="translated">&lt;code&gt;crypto:rand_bytes/1&lt;/code&gt; ()</target>
        </trans-unit>
        <trans-unit id="cc497d99f8a8a9335db3fb240764c31f131b5f89" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:rand_uniform/2&lt;/code&gt; (use rand:uniform/1 instead)</source>
          <target state="translated">&lt;code&gt;crypto:rand_uniform/2&lt;/code&gt; （代わりにrand：uniform / 1を使用）</target>
        </trans-unit>
        <trans-unit id="bc430682557c3ddc6a75bf88895895bed9dbb0aa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:stream_decrypt/2&lt;/code&gt; (use crypto:crypto_update/2 instead)</source>
          <target state="translated">&lt;code&gt;crypto:stream_decrypt/2&lt;/code&gt; （代わりにcrypto：crypto_update / 2を使用してください）</target>
        </trans-unit>
        <trans-unit id="2ede590464ab2e7c45f5f28697e06806d4bda355" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:stream_encrypt/2&lt;/code&gt; (use crypto:crypto_update/2 instead)</source>
          <target state="translated">&lt;code&gt;crypto:stream_encrypt/2&lt;/code&gt; （代わりにcrypto：crypto_update / 2を使用してください）</target>
        </trans-unit>
        <trans-unit id="b230b42c8e7a013c74c4320d57b38041fbacfd05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto:stream_init/_&lt;/code&gt; (use crypto:crypto_init/3 + crypto:crypto_update/2 + crypto:crypto_final/1 or crypto:crypto_one_time/4 instead)</source>
          <target state="translated">&lt;code&gt;crypto:stream_init/_&lt;/code&gt; （代わりにcrypto：crypto_init / 3 + crypto：crypto_update / 2 + crypto：crypto_final / 1またはcrypto：crypto_one_time / 4を使用してください）</target>
        </trans-unit>
        <trans-unit id="8089a68b245ea2612a5252f221bffda58f3203e2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;crypto&lt;/code&gt; app,</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; アプリ</target>
        </trans-unit>
        <trans-unit id="7321043699f44cee2da66b5796e5d39f980b3ac0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cserver&lt;/code&gt; takes a port number as argument and must be started before trying to call the Erlang functions.</source>
          <target state="translated">&lt;code&gt;cserver&lt;/code&gt; はポート番号を引数として取り、Erlang関数を呼び出す前に開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="10356f1cc74fd351a9c0427a2d1e1cde1bc2e480" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct:pal/4&lt;/code&gt; and &lt;code&gt;ct:log/5&lt;/code&gt; add headers to strings being printed to the log file. The strings are also wrapped in div tags with a CSS class attribute, so that stylesheet formatting can be applied. To disable this feature for a printout (i.e. to get a result similar to using &lt;code&gt;io:format/2&lt;/code&gt;), call &lt;code&gt;ct:log/5&lt;/code&gt; with the &lt;code&gt;no_css&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;ct:pal/4&lt;/code&gt; および &lt;code&gt;ct:log/5&lt;/code&gt; は、ログファイルに出力される文字列にヘッダーを追加します。文字列は、CSSクラス属性を持つdivタグでラップされるため、スタイルシートのフォーマットを適用できます。印刷出力に対してこの機能を無効にするには（つまり、 &lt;code&gt;io:format/2&lt;/code&gt; を使用した場合と同様の結果を得るには）、 &lt;code&gt;ct:log/5&lt;/code&gt; を &lt;code&gt;no_css&lt;/code&gt; オプションを指定して呼び出します。</target>
        </trans-unit>
        <trans-unit id="54304822e601b32f1e90725086f938a28fcf450c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_config_plain&lt;/code&gt; - for reading configuration files with key-value tuples (standard format). This handler is used to parse configuration files if no user callback is specified.</source>
          <target state="translated">&lt;code&gt;ct_config_plain&lt;/code&gt; -キーと値のタプル（標準形式）を含む構成ファイルを読み取るため。このハンドラーは、ユーザーコールバックが指定されていない場合に構成ファイルを解析するために使用されます。</target>
        </trans-unit>
        <trans-unit id="091701f10b9171bbae6e609be4ad908a55b0470e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_config_xml&lt;/code&gt; - for reading configuration data from XML files.</source>
          <target state="translated">&lt;code&gt;ct_config_xml&lt;/code&gt; -XMLファイルから構成データを読み取るため。</target>
        </trans-unit>
        <trans-unit id="08dff71e923e07b024554bb0b81f52cc71e883de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_property_test:cmnd_names/1&lt;/code&gt; returns a list of commands (function calls) generated in the &lt;code&gt;Cmnd&lt;/code&gt; sequence, without Module, Arguments and other details.</source>
          <target state="translated">&lt;code&gt;ct_property_test:cmnd_names/1&lt;/code&gt; は、 &lt;code&gt;Cmnd&lt;/code&gt; シーケンスで生成されたコマンド（関数呼び出し）のリストを、モジュール、引数、その他の詳細なしで返します。</target>
        </trans-unit>
        <trans-unit id="a31f1830a5e560014288c137e4a10e3b73f863c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_property_test:num_calls/1&lt;/code&gt; returns a list of the length of commands lists</source>
          <target state="translated">&lt;code&gt;ct_property_test:num_calls/1&lt;/code&gt; は、コマンドリストの長さのリストを返します</target>
        </trans-unit>
        <trans-unit id="8f0095960e13d8195cb7e0205d563086601182a3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_property_test:sequential_parallel/1&lt;/code&gt; returns a list with information about sequential and parallel parts from &lt;code&gt;Tool:parallel_commands/1,2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;ct_property_test:sequential_parallel/1&lt;/code&gt; は、 &lt;code&gt;Tool:parallel_commands/1,2&lt;/code&gt; からシーケンシャルパーツとパラレルパーツに関する情報を含むリストを返します。</target>
        </trans-unit>
        <trans-unit id="37e7b4ba19bc3cee61acb03a5fc00aa6977d70d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_run -vts&lt;/code&gt; tries to open the &lt;code&gt;Common Test&lt;/code&gt; start page in an existing web browser window, or start the browser if it is not running. Which browser to start can be specified with the browser start command option:</source>
          <target state="translated">&lt;code&gt;ct_run -vts&lt;/code&gt; は、既存のWebブラウザーウィンドウで &lt;code&gt;Common Test&lt;/code&gt; スタートページを開こうとするか、ブラウザーが実行されていない場合はブラウザーを起動しようとします。起動するブラウザは、ブラウザ起動コマンドオプションで指定できます。</target>
        </trans-unit>
        <trans-unit id="aa208b1437d15d60958b21cccaad22bef6c56934" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_run&lt;/code&gt; also accepts Erlang emulator flags. These are used when &lt;code&gt;ct_run&lt;/code&gt; calls &lt;code&gt;erl&lt;/code&gt; to start the Erlang node (this makes it possible to add directories to the code server path, change the cookie on the node, start more applications, and so on).</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; は、Erlangエミュレータフラグも受け入れます。これらは、 &lt;code&gt;ct_run&lt;/code&gt; が &lt;code&gt;erl&lt;/code&gt; を呼び出してErlangノードを起動するときに使用されます（これにより、コードサーバーパスへのディレクトリの追加、ノードのCookieの変更、アプリケーションの起動などが可能になります）。</target>
        </trans-unit>
        <trans-unit id="33d2727d6cc062836a6b35673aead9f43b2d4bf8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_telnet&lt;/code&gt; does not search for a prompt at all. This is useful if, for example, &lt;code&gt;Pattern&lt;/code&gt; itself matches the prompt.</source>
          <target state="translated">&lt;code&gt;ct_telnet&lt;/code&gt; はプロンプトをまったく検索しません。これは、たとえば、 &lt;code&gt;Pattern&lt;/code&gt; 自体がプロンプトと一致する場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="601ce49083458a71b06687598df31090de331f21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ct_telnet&lt;/code&gt; ignores any prompt found. This option is useful if data sent by the server can include a pattern matching prompt &lt;code&gt;regexp&lt;/code&gt; (as returned by &lt;code&gt;TargedMod:get_prompt_regexp/0&lt;/code&gt;), but is not to not cause the function to return.</source>
          <target state="translated">&lt;code&gt;ct_telnet&lt;/code&gt; は、見つかったプロンプトをすべて無視します。このオプションは、サーバーから送信されるデータにパターンマッチングプロンプトの &lt;code&gt;regexp&lt;/code&gt; （ &lt;code&gt;TargedMod:get_prompt_regexp/0&lt;/code&gt; によって返される）を含めることができるが、関数を返さない場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="e90e605d39bb0cb048192d764d517674520c0dcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;curr_cnt&lt;/code&gt; of a process is incremented each time the process is involved in a sequential trace. The counter can reach its limit (27 bits) if a process is very long-lived and is involved in much sequential tracing. If the counter overflows, the serial for ordering of the trace events cannot be used. To prevent the counter from overflowing in the middle of a sequential trace, function &lt;code&gt;seq_trace:reset_trace/0&lt;/code&gt; can be called to reset &lt;code&gt;prev_cnt&lt;/code&gt; and &lt;code&gt;curr_cnt&lt;/code&gt; of all processes in the Erlang node. This function also sets all trace tokens in processes and their message queues to empty, and thus stops all ongoing sequential tracing.</source>
          <target state="translated">&lt;code&gt;curr_cnt&lt;/code&gt; プロセスのcurr_cntは、プロセスが順次トレースに関与するたびに増加します。プロセスの寿命が非常に長く、多くの順次トレースに関与している場合、カウンターはその制限（27ビット）に達する可能性があります。カウンターがオーバーフローした場合、トレースイベントの順序付けのためのシリアルは使用できません。順次トレースの途中でカウンターがオーバーフローしないようにするには、関数 &lt;code&gt;seq_trace:reset_trace/0&lt;/code&gt; を呼び出して、Erlangノード内のすべてのプロセスの &lt;code&gt;prev_cnt&lt;/code&gt; および &lt;code&gt;curr_cnt&lt;/code&gt; をリセットできます。この関数は、プロセス内のすべてのトレーストークンとそのメッセージキューも空に設定し、進行中のすべての順次トレースを停止します。</target>
        </trans-unit>
        <trans-unit id="fd1fe4536e2fae04ef35ef44090a99cd91b682a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;cursor(QH)&lt;/code&gt; is equivalent to &lt;code&gt;cursor(QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cursor(QH)&lt;/code&gt; は &lt;code&gt;cursor(QH, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="ba3f5edef89533291e58134f4f1cd47d203131b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d(0)&lt;/code&gt; ... &lt;code&gt;d(n-1)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;d(0)&lt;/code&gt; ... &lt;code&gt;d(n-1)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="df73226efb057579771cc07c860dc88c6fd7cc98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d&lt;/code&gt; - Tagged destination register (X or Y). The tag will be tested at runtime to set up a pointer to the destination register. If the instrution performs a garbarge collection, it must use the &lt;code&gt;$REFRESH_GEN_DEST()&lt;/code&gt; macro to refresh the pointer before storing to it (there are more details about that in a later section).</source>
          <target state="translated">&lt;code&gt;d&lt;/code&gt; -タグ付き宛先レジスタ（XまたはY）。タグは実行時にテストされ、宛先レジスタへのポインタが設定されます。インストラクションがガーバージコレクションを実行する場合、ポインタを格納する前に、 &lt;code&gt;$REFRESH_GEN_DEST()&lt;/code&gt; マクロを使用してポインタを更新する必要があります（詳細については、後のセクションで説明します）。</target>
        </trans-unit>
        <trans-unit id="5379c511e99c30ea2fdb92a4bb825764729fc314" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;d&lt;/code&gt; - X or Y register. Equivalent to &lt;code&gt;xy&lt;/code&gt;. (In a pattern &lt;code&gt;d&lt;/code&gt; will match both source and destination registers. As an operand in a specific instruction, it must only be used for a destination register.)</source>
          <target state="translated">&lt;code&gt;d&lt;/code&gt; -XまたはYレジスタ。 &lt;code&gt;xy&lt;/code&gt; に相当します。（パターンでは、 &lt;code&gt;d&lt;/code&gt; はソースレジスタとデスティネーションレジスタの両方に一致します。特定の命令のオペランドとして、デスティネーションレジスタにのみ使用する必要があります。）</target>
        </trans-unit>
        <trans-unit id="6694b45c0235e642c971889424fd4c54eb60c6ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data&lt;/code&gt; is a pointer to data to associate with &lt;code&gt;key&lt;/code&gt; in the calling thread.</source>
          <target state="translated">&lt;code&gt;data&lt;/code&gt; は、呼び出しスレッドの &lt;code&gt;key&lt;/code&gt; に関連付けるデータへのポインターです。</target>
        </trans-unit>
        <trans-unit id="6783d1593c9182ec656f533a2360e5b136b6243c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;data_dir&lt;/code&gt; - Data file directory</source>
          <target state="translated">&lt;code&gt;data_dir&lt;/code&gt; -データファイルディレクトリ</target>
        </trans-unit>
        <trans-unit id="029a6b0ab70f3edd3986db227e2072871162f8ba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;date-time-string&lt;/code&gt; is the date and time the message is written, default in local time (can be changed to UTC if needed). It is formatted with the ANSI-C function &lt;code&gt;strftime&lt;/code&gt; using the format string &lt;code&gt;%a %b %e %T %Z %Y&lt;/code&gt;, which produces messages like &lt;code&gt;===== ALIVE Thu May 15 10:13:36 MEST 2003&lt;/code&gt;; this can be changed, see the next section.</source>
          <target state="translated">&lt;code&gt;date-time-string&lt;/code&gt; は、メッセージが書き込まれた日付と時刻で、デフォルトでは現地時間です（必要に応じてUTCに変更できます）。これは、フォーマット文字列 &lt;code&gt;%a %b %e %T %Z %Y&lt;/code&gt; を使用してANSI-C関数 &lt;code&gt;strftime&lt;/code&gt; でフォーマットされ、次のようなメッセージを生成します &lt;code&gt;===== ALIVE Thu May 15 10:13:36 MEST 2003&lt;/code&gt; ; これは変更できます。次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9033cd3570d0562271c3a2e4d7db4ffa6b191f45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;day/1&lt;/code&gt; converts the day of the week (&lt;code&gt;NthDayOfWeek&lt;/code&gt;) from an integer (1-7) to an abbreviated string, that is:</source>
          <target state="translated">&lt;code&gt;day/1&lt;/code&gt; は、曜日（ &lt;code&gt;NthDayOfWeek&lt;/code&gt; ）を整数（1〜7）から省略された文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="1cb11a621938f8a8d62fba1b13fd3331878eb3f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db&lt;/code&gt; (ETS tables)</source>
          <target state="translated">&lt;code&gt;db&lt;/code&gt; （ETSテーブル）</target>
        </trans-unit>
        <trans-unit id="358f4b1996cf482f96fc6cfa013716990e4ee122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db_dir&lt;/code&gt; is mandatory.</source>
          <target state="translated">&lt;code&gt;db_dir&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="2f664d4edb004cdde8a06354bf8d85f3788b0c41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db_nodes&lt;/code&gt; - &lt;code&gt;mnesia:system_info(db_nodes)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;db_nodes&lt;/code&gt; - &lt;code&gt;mnesia:system_info(db_nodes)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70a6744faefa1713ffbd9721315da438a25ed6e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;db_nodes&lt;/code&gt;. Returns the nodes that make up the persistent database. Disc-less nodes are only included in the list of nodes if they explicitly have been added to the schema, for example, with &lt;code&gt;mnesia:add_table_copy/3&lt;/code&gt;. The function can be started even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;db_nodes&lt;/code&gt; 。永続的データベースを構成するノードを返します。ディスクのないノードは、たとえば &lt;code&gt;mnesia:add_table_copy/3&lt;/code&gt; を使用してスキーマに明示的に追加されている場合にのみノードのリストに含まれます。Mnesiaがまだ実行されていなくても、機能を開始できます。</target>
        </trans-unit>
        <trans-unit id="c673477036951a729c93b1f7508951bcd97906c5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; is a generic Erlang trace tool. By using the &lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;cpu_timestamp&lt;/code&gt; options it can be used as a precision instrument to profile how long time a function call takes for a specific process. This can be very useful when trying to understand where time is spent in a heavily loaded system as it is possible to limit the scope of what is profiled to be very small. For more information, see the &lt;code&gt;dbg&lt;/code&gt; manual page in Runtime Tools.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; は、一般的なErlangトレースツールです。使用することにより &lt;code&gt;timestamp&lt;/code&gt; や &lt;code&gt;cpu_timestamp&lt;/code&gt; オプションを、関数の呼び出しは、特定のプロセスに要する時間の時間プロファイルする精密機器として使用することができます。これは、負荷の高いシステムで時間が費やされている場所を理解しようとする場合に非常に役立ちます。詳細については、ランタイムツールの &lt;code&gt;dbg&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="999dad6d17987fb1d2c6e7351c9927faffa26e0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; is equivalent to &lt;code&gt;tracer(node(),[{shell, only}])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; は &lt;code&gt;tracer(node(),[{shell, only}])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="17caedf6cb86230e39ee34c9c7862972a59e53b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; is the generic erlang tracing frontend. By using the &lt;code&gt;timestamp&lt;/code&gt; or &lt;code&gt;cpu_timestamp&lt;/code&gt; options it can be used to time how long function calls in a live system take.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; は、汎用のerlangトレースフロントエンドです。使用することにより &lt;code&gt;timestamp&lt;/code&gt; や &lt;code&gt;cpu_timestamp&lt;/code&gt; オプションを機能は、ライブシステムテイクで呼び出し、どのくらいの時間に使用することができます。</target>
        </trans-unit>
        <trans-unit id="383891b92b7728a806802597bdf39747dcb86b32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dbg&lt;/code&gt; mode</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; モード</target>
        </trans-unit>
        <trans-unit id="108caa6a9c7c9fe0b3f193cf88ae1a060d7ab2de" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;debug&lt;/code&gt;. Returns the current debug level of Mnesia.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; 。Mnesiaの現在のデバッグレベルを返します。</target>
        </trans-unit>
        <trans-unit id="65c5fbce6c513cedd45826710958863898a9a595" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default&lt;/code&gt; for normal data</source>
          <target state="translated">&lt;code&gt;default&lt;/code&gt; 通常のデータのデフォルト</target>
        </trans-unit>
        <trans-unit id="3bfd8f4c4d96227dcf3984ef94def308ee7c9e83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;default_bind&lt;/code&gt; - Binds schedulers the default way. Defaults to &lt;code&gt;thread_no_node_processor_spread&lt;/code&gt; (which can change in the future).</source>
          <target state="translated">&lt;code&gt;default_bind&lt;/code&gt; -スケジューラーをデフォルトの方法でバインドします。デフォルトは &lt;code&gt;thread_no_node_processor_spread&lt;/code&gt; です（将来変更される可能性があります）。</target>
        </trans-unit>
        <trans-unit id="100310a5ba2c1c425121b816b4152b6d3217a9ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_group/2, delete_group/3&lt;/code&gt;, and &lt;code&gt;delete_group/4&lt;/code&gt; each deletes the group specified and returns &lt;code&gt;true&lt;/code&gt;. If there is an error, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;delete_group/2&lt;/code&gt; is called, option &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;delete_group/2, delete_group/3&lt;/code&gt; 、および &lt;code&gt;delete_group/4&lt;/code&gt; は、それぞれ指定されたグループを削除し、 &lt;code&gt;true&lt;/code&gt; を返します。エラーがある場合は、 &lt;code&gt;{error, Reason}&lt;/code&gt; が返されます。とき &lt;code&gt;delete_group/2&lt;/code&gt; が呼ばれ、オプション &lt;code&gt;Port&lt;/code&gt; および &lt;code&gt;Dir&lt;/code&gt; 必須です。</target>
        </trans-unit>
        <trans-unit id="5d4db6f5286e6d6750d8c05c56534f0a1605b2dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_group_member/3, delete_group_member/4&lt;/code&gt;, and &lt;code&gt;delete_group_member/5&lt;/code&gt; each deletes a user from a group. If the group or the user does not exist, this function returns an error, otherwise &lt;code&gt;true&lt;/code&gt;. When &lt;code&gt;delete_group_member/3&lt;/code&gt; is called, the options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;delete_group_member/3, delete_group_member/4&lt;/code&gt; 、および &lt;code&gt;delete_group_member/5&lt;/code&gt; は、それぞれグループからユーザーを削除します。グループまたはユーザーが存在しない場合、この関数はエラーを返し、それ以外の場合は &lt;code&gt;true&lt;/code&gt; を返します。とき &lt;code&gt;delete_group_member/3&lt;/code&gt; が呼ばれ、オプション &lt;code&gt;Port&lt;/code&gt; および &lt;code&gt;Dir&lt;/code&gt; 必須です。</target>
        </trans-unit>
        <trans-unit id="7a9b6df1fd63a50104f12248edc73eeabaafd916" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;delete_user/2, delete_user/3&lt;/code&gt;, and &lt;code&gt;delete_user/4&lt;/code&gt; each deletes a user from the user database. If the operation is successful, this function returns &lt;code&gt;true&lt;/code&gt;. If an error occurs, &lt;code&gt;{error,Reason}&lt;/code&gt; is returned. When &lt;code&gt;delete_user/2&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;delete_user/2, delete_user/3&lt;/code&gt; 、および &lt;code&gt;delete_user/4&lt;/code&gt; は、それぞれユーザーデータベースからユーザーを削除します。操作が成功した場合、この関数は &lt;code&gt;true&lt;/code&gt; を返します。エラーが発生した場合、 &lt;code&gt;{error,Reason}&lt;/code&gt; が返されます。 &lt;code&gt;delete_user/2&lt;/code&gt; が呼び出されるとき、オプション &lt;code&gt;Port&lt;/code&gt; および &lt;code&gt;Dir&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="a7b518efd8daf88742e92d33d880b350e2bac1f1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deliver/3&lt;/code&gt; sends &lt;code&gt;Data&lt;/code&gt; over &lt;code&gt;Socket&lt;/code&gt; using the specified &lt;code&gt;SocketType&lt;/code&gt;. &lt;code&gt;Socket&lt;/code&gt; and &lt;code&gt;SocketType&lt;/code&gt; is to be the socket and the &lt;code&gt;socket_type&lt;/code&gt; form the &lt;code&gt;mod&lt;/code&gt; record as defined in &lt;code&gt;httpd.hrl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;deliver/3&lt;/code&gt; は、指定された &lt;code&gt;SocketType&lt;/code&gt; を使用して、 &lt;code&gt;Socket&lt;/code&gt; 経由で &lt;code&gt;Data&lt;/code&gt; を送信します。 &lt;code&gt;Socket&lt;/code&gt; と &lt;code&gt;SocketType&lt;/code&gt; はソケットであり、 &lt;code&gt;socket_type&lt;/code&gt; は &lt;code&gt;httpd.hrl&lt;/code&gt; で定義された &lt;code&gt;mod&lt;/code&gt; レコードを形成します。</target>
        </trans-unit>
        <trans-unit id="2ea60c4653c9cc97512d3df5efbd58b2ef6a71a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;demonitor(MonitorRef, [])&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt; demonitor(MonitorRef)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;demonitor(MonitorRef, [])&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt; demonitor(MonitorRef)&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="31ef7900d5c5757691bc7bbeceb5751161d490e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;demonitor(MonitorRef, [])&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor(MonitorRef)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;demonitor(MonitorRef, [])&lt;/code&gt; に相当する &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor(MonitorRef)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cd2fdb40dfa166ca494c05463a92fced74b0557b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecated&lt;/code&gt;, the second element is a sorted list of calls to deprecated functions;</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 、2番目の要素は非推奨の関数への呼び出しのソートされたリストです。</target>
        </trans-unit>
        <trans-unit id="ee868e13126c26dc9a787ae1e2cc0dbb0a70c58b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;deprecated&lt;/code&gt;, the second element is a sorted list of externally used deprecated functions;</source>
          <target state="translated">&lt;code&gt;deprecated&lt;/code&gt; 、2番目の要素は外部で使用される非推奨関数のソートされたリストです。</target>
        </trans-unit>
        <trans-unit id="319a0fb5eab817dda6c01d5820ff0037dd8bd878" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dept&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dept&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="cc29ccdb337f80df256280bd273a5e77f44127bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;depth : integer&lt;/code&gt; :: Stack depth. Ex. &lt;code&gt;0&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;depth : integer&lt;/code&gt; ::スタックの深さ。例 &lt;code&gt;0&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cd05717828c4848f5d3564e59af45c2ef0f343af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;description&lt;/code&gt; - A short description, a string. Defaults to &quot;&quot;.</source>
          <target state="translated">&lt;code&gt;description&lt;/code&gt; -短い説明、文字列。デフォルトは &quot;&quot;です。</target>
        </trans-unit>
        <trans-unit id="85b6308eff6598024e34eb55b4a1298c9e62a106" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;diameter_app(3)&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;diameter_dict(4)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;diameter_app(3)&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;diameter_dict(4)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d55ee1f62fef4cf459b94cd5df403faf0b90ddee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt; - If present, points to a directory where a file to which all data in the ets table is &quot;synced&quot;.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; -存在する場合、etsテーブル内のすべてのデータが「同期」されるファイルがあるディレクトリを指します。</target>
        </trans-unit>
        <trans-unit id="0cb1144fcd4bf4d5089b297e90a677a15ff4c23b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt; - This &lt;strong&gt;mandatory&lt;/strong&gt; option points to a directory where to place the file of a dets table.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; -この&lt;strong&gt;必須&lt;/strong&gt; DETSテーブルのファイルを配置するディレクトリにオプションを指します。</target>
        </trans-unit>
        <trans-unit id="b605d7fbb8a0d7d4f4a4bbe6c4e2e64588b8aa6c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dir&lt;/code&gt; in config is mandatory.</source>
          <target state="translated">&lt;code&gt;dir&lt;/code&gt; configのdirは必須です。</target>
        </trans-unit>
        <trans-unit id="1458b26f6035d8be2020b2d8b4ef95611795c664" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the directory where the &lt;code&gt;&lt;a href=&quot;#library_module&quot;&gt;library module's&lt;/a&gt;&lt;/code&gt; BEAM file is located.</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#library_module&quot;&gt;library module's&lt;/a&gt;&lt;/code&gt; BEAMファイルが配置されているディレクトリです。</target>
        </trans-unit>
        <trans-unit id="f2e9238fb07723dc0c2f90525328a7856c465077" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the directory where the module's BEAM file is located;</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; は、モジュールのBEAMファイルがあるディレクトリです。</target>
        </trans-unit>
        <trans-unit id="44f4e0e98d0c51c1545f8ddde56354f21e9a0c98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the directory where the modules' BEAM files are located;</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; 、モジュールのBEAMファイルが置かれているディレクトリ。</target>
        </trans-unit>
        <trans-unit id="7cb229102fa7099945b4b0429f46df0906ccb986" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;, the release directory;</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; 、リリースディレクトリ。</target>
        </trans-unit>
        <trans-unit id="cade714c9bb756cacf4a7301a0c998f14afc09d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory&lt;/code&gt;. Returns the name of the Mnesia directory. It can be called even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;directory&lt;/code&gt; 。Mnesiaディレクトリの名前を返します。Mnesiaがまだ実行されていなくても呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="48d0811320e12d34ce2b617aeb062bab8990a26c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;directory_index&lt;/code&gt; specifies a list of resources to look for if a client requests a directory using a &lt;code&gt;/&lt;/code&gt; at the end of the directory name. &lt;code&gt;file&lt;/code&gt; depicts the name of a file in the directory. Several files can be given, in which case the server returns the first it finds, for example:</source>
          <target state="translated">&lt;code&gt;directory_index&lt;/code&gt; は、クライアントがディレクトリ名の最後に &lt;code&gt;/&lt;/code&gt; を使用してディレクトリを要求した場合に検索するリソースのリストを指定します。 &lt;code&gt;file&lt;/code&gt; は、ディレクトリ内のファイルの名前を示します。複数のファイルを指定できます。その場合、サーバーは最初に見つかったファイルを返します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="043ee13ece50666ab9350e2d84d985c18e0bfb0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disabled&lt;/code&gt; - Disable BEAST mitigation.</source>
          <target state="translated">&lt;code&gt;disabled&lt;/code&gt; -BEAST緩和策を無効にします。</target>
        </trans-unit>
        <trans-unit id="91c6fec592eea4d837be060abf6f9d6a2694d8bd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_copies&lt;/code&gt;. Returns the nodes where a &lt;code&gt;disc_copy&lt;/code&gt; of the table resides according to the schema.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; 。スキーマに従って、テーブルの &lt;code&gt;disc_copy&lt;/code&gt; が存在するノードを返します。</target>
        </trans-unit>
        <trans-unit id="528b7a8d42d9b5d4952e0db2f2ad3f096a0108ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_copies&lt;/code&gt;. The value of the attribute is a list of Erlang nodes, and a replica of the table resides both in RAM and on disc on each node in the list. Write operations addressed to the table address both the RAM and the disc copy of the table.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; 。属性の値はErlangノードのリストであり、テーブルのレプリカは、リスト内の各ノードのRAMとディスクの両方に存在します。テーブルへの書き込み操作は、RAMとテーブルのディスクコピーの両方をアドレス指定します。</target>
        </trans-unit>
        <trans-unit id="f7e2c5cdc73ebc52fd236fc4cf50f7ba471876d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_copies&lt;/code&gt;. This property specifies a list of Erlang nodes where the table is kept in RAM and on disc. All updates of the table are performed in the actual table and are also logged to disc. If a table is of type &lt;code&gt;disc_copies&lt;/code&gt; at a certain node, the entire table is resident in RAM memory and on disc. Each transaction performed on the table is appended to a &lt;code&gt;LOG&lt;/code&gt; file and written into the RAM table.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; 。このプロパティは、テーブルがRAMとディスクに保持されるErlangノードのリストを指定します。テーブルのすべての更新は実際のテーブルで実行され、ディスクにも記録されます。特定のノードでテーブルのタイプが &lt;code&gt;disc_copies&lt;/code&gt; である場合、テーブル全体がRAMメモリとディスクに常駐します。テーブルで実行される各トランザクションは、 &lt;code&gt;LOG&lt;/code&gt; ファイルに追加され、RAMテーブルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="726573780291c89bb3847af9c71db60a2833ec14" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_only_copies&lt;/code&gt;. Returns the nodes where a &lt;code&gt;disc_only_copy&lt;/code&gt; of the table resides according to the schema.</source>
          <target state="translated">&lt;code&gt;disc_only_copies&lt;/code&gt; 。スキーマに従って、テーブルの &lt;code&gt;disc_only_copy&lt;/code&gt; が存在するノードを返します。</target>
        </trans-unit>
        <trans-unit id="54cb9adf6cce29c6773c5ad5c9dc1dfcea2dfc60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_only_copies&lt;/code&gt;. Some, or all, table replicas can be kept on disc only. These replicas are considerably slower than the RAM-based replicas.</source>
          <target state="translated">&lt;code&gt;disc_only_copies&lt;/code&gt; 。一部またはすべてのテーブルレプリカはディスクにのみ保存できます。これらのレプリカは、RAMベースのレプリカよりもかなり低速です。</target>
        </trans-unit>
        <trans-unit id="c18b242d445ffca079379b754a73022a336f4a85" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disc_only_copies&lt;/code&gt;. The value of the attribute is a list of Erlang nodes, and a replica of the table resides only as a disc copy on each node in the list. The major disadvantage of this type of table replica is the access speed. The major advantage is that the table does not occupy space in memory.</source>
          <target state="translated">&lt;code&gt;disc_only_copies&lt;/code&gt; 。属性の値はErlangノードのリストであり、テーブルのレプリカはリストの各ノードのディスクコピーとしてのみ存在します。このタイプのテーブルレプリカの主な欠点は、アクセス速度です。主な利点は、テーブルがメモリ内のスペースを占有しないことです。</target>
        </trans-unit>
        <trans-unit id="7f03df437c65ff33591d435acb1cef33342009d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnect/1&lt;/code&gt; closes the database connection and the driver. (However, it does not unload it.)</source>
          <target state="translated">&lt;code&gt;disconnect/1&lt;/code&gt; は、データベース接続とドライバーを閉じます。（ただし、アンロードしません。）</target>
        </trans-unit>
        <trans-unit id="40239310c66be0c67b6c6e72002aa2ac11ea8c0d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disconnect&lt;/code&gt; if a SSH_MSG_DISCONNECT message should be sent immediately. It will be followed by a close of the underlying tcp connection.</source>
          <target state="translated">&lt;code&gt;disconnect&lt;/code&gt; SSH_MSG_DISCONNECTメッセージをすぐに送信する必要がある場合は切断します。その後、基になるtcp接続が閉じられます。</target>
        </trans-unit>
        <trans-unit id="337d23a9ffc8ed74295386f439f4029d6e7bccc7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disk_log&lt;/code&gt; is a disk-based term logger that enables efficient logging of items on files.</source>
          <target state="translated">&lt;code&gt;disk_log&lt;/code&gt; は、ファイル上のアイテムの効率的なロギングを可能にするディスクベースの用語ロガーです。</target>
        </trans-unit>
        <trans-unit id="557289d732508771fba2de6df7f71aa4fd478af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;disksup&lt;/code&gt; is a process which supervises the available disk space in the system. It is part of the OS_Mon application, see &lt;code&gt;os_mon(6)&lt;/code&gt;. Available for Unix and Windows.</source>
          <target state="translated">&lt;code&gt;disksup&lt;/code&gt; は、システムで使用可能なディスク領域を監視するプロセスです。これはOS_Monアプリケーションの一部です &lt;code&gt;os_mon(6)&lt;/code&gt; 参照してください。UnixとWindowsで利用できます。</target>
        </trans-unit>
        <trans-unit id="aed630569409785073ef89b28862b9ae641e65a9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; will perform the handshake and if the handshake successfully completes this process will then continue in a connection supervisor loop as long as the connection is up.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; はハンドシェイクを実行し、ハンドシェイクが正常に完了すると、接続が確立されている限り、接続監視ループで続行されます。</target>
        </trans-unit>
        <trans-unit id="27751a38cd4a9b2acc5282619252530fe6ce8226" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; will perform the handshake and the handshake successfully completes this process will then continue in a connection supervisor loop as long as the connection is up.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; はハンドシェイクを実行し、ハンドシェイクがこのプロセスを正常に完了すると、接続が確立されている限り、接続監視ループで続行されます。</target>
        </trans-unit>
        <trans-unit id="4429d38e80eee115e892f24ce877c4a14468e02d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;distrvsn&lt;/code&gt; 2 was never used.</source>
          <target state="translated">&lt;code&gt;distrvsn&lt;/code&gt; 2は使用されませんでした。</target>
        </trans-unit>
        <trans-unit id="cc8e261e926a667c2b9c7d3069b083201c1d8312" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dns&lt;/code&gt; (use the Erlang DNS client &lt;code&gt;inet_res(3)&lt;/code&gt; for nameserver queries)</source>
          <target state="translated">&lt;code&gt;dns&lt;/code&gt; （ネームサーバークエリにはErlang DNSクライアント &lt;code&gt;inet_res(3)&lt;/code&gt; を使用）</target>
        </trans-unit>
        <trans-unit id="6c08cc6086a582b21e793f0239a11699599eac87" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do/1&lt;/code&gt; (mandatory) - the function called when a request is to be handled</source>
          <target state="translated">&lt;code&gt;do/1&lt;/code&gt; （必須）-要求が処理されるときに呼び出される関数</target>
        </trans-unit>
        <trans-unit id="758e77371d75d6c6e7aebbc8c64b91f227479100" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;do_connect&lt;/code&gt; is where we log in to the database. If the connection was successful, we store the connection handle in the driver data, and return &lt;code&gt;'ok'&lt;/code&gt;. Otherwise, we return the error message from postgres and store &lt;code&gt;NULL&lt;/code&gt; in the driver data.</source>
          <target state="translated">&lt;code&gt;do_connect&lt;/code&gt; は、データベースにログインする場所です。接続が成功した場合、接続ハンドルをドライバーデータに格納し、 &lt;code&gt;'ok'&lt;/code&gt; を返します。それ以外の場合は、postgresからエラーメッセージを返し、 &lt;code&gt;NULL&lt;/code&gt; をドライバーデータに格納します。</target>
        </trans-unit>
        <trans-unit id="0ca9c6c5b4c69e3276930037f7b9016cb2b8633f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/examples&lt;/code&gt; - Recommended. Source code for examples on how to use this application should be placed here. It is encouraged that examples are sourced to the public documentation from this directory.</source>
          <target state="translated">&lt;code&gt;doc/examples&lt;/code&gt; -推奨。このアプリケーションの使用方法の例のソースコードは、ここに配置する必要があります。例は、このディレクトリから公開ドキュメントを入手することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="cd6258308058537c9e5e0c91ffb5f785a17fe90d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/html&lt;/code&gt; - Optional. HTML pages for the entire Application.</source>
          <target state="translated">&lt;code&gt;doc/html&lt;/code&gt; -オプション。アプリケーション全体のHTMLページ。</target>
        </trans-unit>
        <trans-unit id="d19b63341025752926dd220b3c4dcdb81e31d112" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/internal&lt;/code&gt; - Recommended. Any documentation that describes implementation details about this application, not intended for publication, should be placed here.</source>
          <target state="translated">&lt;code&gt;doc/internal&lt;/code&gt; -推奨。このアプリケーションの実装の詳細を説明する、公開を目的としていないドキュメントは、ここに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="2758f6c8961028bd2d92836df413d8c156acb8dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/man1&lt;/code&gt; - Recommended. Man pages for Application executables.</source>
          <target state="translated">&lt;code&gt;doc/man1&lt;/code&gt; -推奨。アプリケーション実行可能ファイルのマニュアルページ。</target>
        </trans-unit>
        <trans-unit id="b6861858042b0017b401d18b45b93129267b5273" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/man3&lt;/code&gt; - Recommended. Man pages for module APIs.</source>
          <target state="translated">&lt;code&gt;doc/man3&lt;/code&gt; -推奨。モジュールAPIのmanページ。</target>
        </trans-unit>
        <trans-unit id="b02f30cc869ef03af4b822d7cbda0d15b2fdf155" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/man6&lt;/code&gt; - Recommended. Man pages for Application overview.</source>
          <target state="translated">&lt;code&gt;doc/man6&lt;/code&gt; -推奨。アプリケーションの概要のmanページ。</target>
        </trans-unit>
        <trans-unit id="f0cd45a88d7bad374736ea37b733712282132583" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/pdf&lt;/code&gt; - Optional. PDF documentation for the entire Application.</source>
          <target state="translated">&lt;code&gt;doc/pdf&lt;/code&gt; -オプション。アプリケーション全体のPDFドキュメント。</target>
        </trans-unit>
        <trans-unit id="e22d1099778d41d3465cbe9215d1d489edc223b9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc/src&lt;/code&gt; - Recommended. All source files for documentation, such as Markdown, AsciiDoc or XML-files, should be placed here.</source>
          <target state="translated">&lt;code&gt;doc/src&lt;/code&gt; -推奨。Markdown、AsciiDoc、XMLファイルなど、ドキュメントのすべてのソースファイルをここに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="a5e549dfbc183aa20b7e60adc165e6f9ab1412b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&lt;/code&gt; - Optional. Any released documentation should be placed in sub-directories here.</source>
          <target state="translated">&lt;code&gt;doc&lt;/code&gt; -オプション。リリースされたドキュメントは、ここのサブディレクトリに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="7f056e1e74df915b2c2fa2305e33ff60673a4ab2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;doc&lt;/code&gt; - Recommended. Any source documentation should be placed in sub-directories here.</source>
          <target state="translated">&lt;code&gt;doc&lt;/code&gt; -推奨。すべてのソースドキュメントは、ここのサブディレクトリに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="6f833f13a1c81da53aed690dbf7008110c793525" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drestriction(F,&amp;nbsp;S1,&amp;nbsp;S2)&lt;/code&gt; is equivalent to &lt;code&gt;difference(S1,&amp;nbsp;restriction(F,&amp;nbsp;S1,&amp;nbsp;S2))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;drestriction(F,&amp;nbsp;S1,&amp;nbsp;S2)&lt;/code&gt; は、 &lt;code&gt;difference(S1,&amp;nbsp;restriction(F,&amp;nbsp;S1,&amp;nbsp;S2))&lt;/code&gt; striction（F、S1、S2））と同等です。</target>
        </trans-unit>
        <trans-unit id="10d9ee6303d3aae6c02ed6122ee8a1ba1cce072a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;drestriction(R,&amp;nbsp;S)&lt;/code&gt; is equivalent to &lt;code&gt;difference(R,&amp;nbsp;restriction(R,&amp;nbsp;S))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;drestriction(R,&amp;nbsp;S)&lt;/code&gt; と等価である &lt;code&gt;difference(R,&amp;nbsp;restriction(R,&amp;nbsp;S))&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="293430c5917d960f03ddc8507df43a37a619109e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driver : string&lt;/code&gt; :: Driver name. Ex. &lt;code&gt;&quot;tcp_inet&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;driver : string&lt;/code&gt; ::ドライバ名。例 &lt;code&gt;&quot;tcp_inet&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8aff5f2fa6f9e60bdccdad2300f684488c04eea2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driver_binary_dec_refc&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; free the binary if the reference count reaches zero. &lt;strong&gt;Only&lt;/strong&gt; use &lt;code&gt;driver_binary_dec_refc&lt;/code&gt; when you are sure &lt;strong&gt;not&lt;/strong&gt; to reach a reference count of zero.</source>
          <target state="translated">&lt;code&gt;driver_binary_dec_refc&lt;/code&gt; 参照カウントがゼロに達した場合、driver_binary_dec_refcはバイナリを解放しませ&lt;strong&gt;ん&lt;/strong&gt;。参照カウントがゼロに&lt;strong&gt;ならない&lt;/strong&gt;ことが確実な場合に&lt;strong&gt;のみ&lt;/strong&gt;、 &lt;code&gt;driver_binary_dec_refc&lt;/code&gt; を使用してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15e677a3b16d73ec64d29f8ceacede85bc67cf35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;driver_level&lt;/code&gt; (driver-specific locking)</source>
          <target state="translated">&lt;code&gt;driver_level&lt;/code&gt; （ドライバー固有のロック）</target>
        </trans-unit>
        <trans-unit id="0125d3a924b41ddc0030d5e7607910de2b7b720f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dropwhile&lt;/code&gt; is the complement of &lt;code&gt;takewhile&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;dropwhile&lt;/code&gt; はの補数である &lt;code&gt;takewhile&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="9f7909fee906d343c0aa5bd36ea79f988740fc50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_load_regulation&lt;/code&gt;. Returns a boolean that tells if Mnesia is configured to regulate the dumper process load.</source>
          <target state="translated">&lt;code&gt;dump_log_load_regulation&lt;/code&gt; 。Mnesiaがダンパープロセスの負荷を調整するように構成されているかどうかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="8104ad964b40039298afcda9708b67844d8e557a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_time_threshold&lt;/code&gt;. Returns the time threshold for transaction log dumps in milliseconds.</source>
          <target state="translated">&lt;code&gt;dump_log_time_threshold&lt;/code&gt; 。トランザクションログダンプの時間しきい値をミリ秒単位で返します。</target>
        </trans-unit>
        <trans-unit id="68fa023d228fd1006cc26e2b3d488a47193b8260" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_update_in_place&lt;/code&gt;. Returns a boolean that tells if Mnesia is configured to perform the updates in the Dets files directly, or if the updates are to be performed in a copy of the Dets files.</source>
          <target state="translated">&lt;code&gt;dump_log_update_in_place&lt;/code&gt; 。MnesiaがDetsファイルの更新を直接実行するように構成されているか、または更新がDetsファイルのコピーで実行されるかを示すブール値を返します。</target>
        </trans-unit>
        <trans-unit id="164ccf30a88e90adbcef980a0252f2b5604f51da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;dump_log_write_threshold&lt;/code&gt;. Returns the write threshold for transaction log dumps as the number of writes to the transaction log.</source>
          <target state="translated">&lt;code&gt;dump_log_write_threshold&lt;/code&gt; 。トランザクションログダンプの書き込みしきい値を、トランザクションログへの書き込み数として返します。</target>
        </trans-unit>
        <trans-unit id="8efd7acd752040ce0610dba0bc21d842b2acc5b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;duplicate_bag&lt;/code&gt;. A table of this type has zero or more possibly matching objects with a given key.</source>
          <target state="translated">&lt;code&gt;duplicate_bag&lt;/code&gt; 。このタイプのテーブルには、指定されたキーと一致するオブジェクトが0個以上ある可能性があります。</target>
        </trans-unit>
        <trans-unit id="509e99235626804ee03942d4e4dd128dc2a449a4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e2big&lt;/code&gt; - Too long argument list</source>
          <target state="translated">&lt;code&gt;e2big&lt;/code&gt; -引数リストが長すぎます</target>
        </trans-unit>
        <trans-unit id="5ef353a549972b85e43156fdf3cb19a2007c2c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; - Pointer to an export entry. Use by call instructions that call other modules, such as &lt;code&gt;call_ext&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; -エクスポートエントリへのポインタ。 &lt;code&gt;call_ext&lt;/code&gt; などの他のモジュールを呼び出す呼び出し命令で使用します。</target>
        </trans-unit>
        <trans-unit id="f4aa1de11e8b801606f716b414193a95f9a37f1d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;e&lt;/code&gt; means that the API function returns an error whenever a wrongly encoded filename (or directory name) is encountered.</source>
          <target state="translated">&lt;code&gt;e&lt;/code&gt; は、誤ってエンコードされたファイル名（またはディレクトリ名）が検出されると、API関数がエラーを返すことを意味します。</target>
        </trans-unit>
        <trans-unit id="55039e91caf7b40fa7a456c35f26b3365687917a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eacces&lt;/code&gt; - Permission denied</source>
          <target state="translated">&lt;code&gt;eacces&lt;/code&gt; -アクセスが拒否されました</target>
        </trans-unit>
        <trans-unit id="3e6bd5eb4b99ab85b151e2a5a7e15c6634cd9406" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eaddrinuse&lt;/code&gt; - Address already in use</source>
          <target state="translated">&lt;code&gt;eaddrinuse&lt;/code&gt; -すでに使用されているアドレス</target>
        </trans-unit>
        <trans-unit id="6892434fcb77e07ac4e5efceb1883f60123c5823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eaddrnotavail&lt;/code&gt; - Cannot assign requested address</source>
          <target state="translated">&lt;code&gt;eaddrnotavail&lt;/code&gt; -要求されたアドレスを割り当てることができません</target>
        </trans-unit>
        <trans-unit id="e6a773b56de31ecc678e62af9fd28a27b8596efd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eadv&lt;/code&gt; - Advertise error</source>
          <target state="translated">&lt;code&gt;eadv&lt;/code&gt; -アドバタイズエラー</target>
        </trans-unit>
        <trans-unit id="2a4fb7993ee899f4b8be63772b158c656628ee70" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eafnosupport&lt;/code&gt; - Address family not supported by protocol family</source>
          <target state="translated">&lt;code&gt;eafnosupport&lt;/code&gt; -プロトコルファミリでサポートされていないアドレスファミリ</target>
        </trans-unit>
        <trans-unit id="d3dbabbe2c23aeadb69a13791d0d4b64efcc1a95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eagain&lt;/code&gt; - Resource temporarily unavailable</source>
          <target state="translated">&lt;code&gt;eagain&lt;/code&gt; -リソースは一時的に利用不可</target>
        </trans-unit>
        <trans-unit id="2b77a28f808897941f7957faf3870802a8b1b4d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ealign&lt;/code&gt; - EALIGN</source>
          <target state="translated">&lt;code&gt;ealign&lt;/code&gt; -EALIGN</target>
        </trans-unit>
        <trans-unit id="73fe5ba1c39c10b02ecef45d731f5cc948ad1ec9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ealready&lt;/code&gt; - Operation already in progress</source>
          <target state="translated">&lt;code&gt;ealready&lt;/code&gt; -操作はすでに進行中</target>
        </trans-unit>
        <trans-unit id="fa9f8ee2675777b13c8dd3149c36f018ef9d52b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebade&lt;/code&gt; - Bad exchange descriptor</source>
          <target state="translated">&lt;code&gt;ebade&lt;/code&gt; -不正な交換記述子</target>
        </trans-unit>
        <trans-unit id="345608161dc45c2d891a9f54a66016b63ff612e0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadf&lt;/code&gt; - Bad file number</source>
          <target state="translated">&lt;code&gt;ebadf&lt;/code&gt; -不正なファイル番号</target>
        </trans-unit>
        <trans-unit id="521c40efbf72458304815b505d5ba642ba7e891b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadfd&lt;/code&gt; - File descriptor in bad state</source>
          <target state="translated">&lt;code&gt;ebadfd&lt;/code&gt; -不正な状態のファイル記述子</target>
        </trans-unit>
        <trans-unit id="5068b7a48dbca1388c29202a255de4ca6a39c5f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadmsg&lt;/code&gt; - Not a data message</source>
          <target state="translated">&lt;code&gt;ebadmsg&lt;/code&gt; -データメッセージではない</target>
        </trans-unit>
        <trans-unit id="5e392c0f388fdfe7a467c0c9dd6424d6c866be27" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadr&lt;/code&gt; - Bad request descriptor</source>
          <target state="translated">&lt;code&gt;ebadr&lt;/code&gt; -不正なリクエスト記述子</target>
        </trans-unit>
        <trans-unit id="d2d55204466ecfc02bb0f07f33c4374f20ddd7f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadrpc&lt;/code&gt; - Bad RPC structure</source>
          <target state="translated">&lt;code&gt;ebadrpc&lt;/code&gt; -不良RPC構造</target>
        </trans-unit>
        <trans-unit id="bd4bbeab4c0e94ea1d9093a6f486e8a4d099de5a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadrqc&lt;/code&gt; - Bad request code</source>
          <target state="translated">&lt;code&gt;ebadrqc&lt;/code&gt; -不正なリクエストコード</target>
        </trans-unit>
        <trans-unit id="e909c26b6f3cab35940f74e951dbb315e35ad206" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebadslt&lt;/code&gt; - Invalid slot</source>
          <target state="translated">&lt;code&gt;ebadslt&lt;/code&gt; -無効なスロット</target>
        </trans-unit>
        <trans-unit id="3adf2baab88df72fcbac594781c1731bb7d238fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebfont&lt;/code&gt; - Bad font file format</source>
          <target state="translated">&lt;code&gt;ebfont&lt;/code&gt; -不正なフォントファイル形式</target>
        </trans-unit>
        <trans-unit id="b2fa84d5408c4cb2ac9e31aa0044d4ee1ff1e9d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebin&lt;/code&gt; - Required. Contains the Erlang object code, the &lt;code&gt;beam&lt;/code&gt; files. The &lt;code&gt;.app&lt;/code&gt; file must also be placed here.</source>
          <target state="translated">&lt;code&gt;ebin&lt;/code&gt; -必須。Erlangオブジェクトコード、 &lt;code&gt;beam&lt;/code&gt; ファイルが含まれています。 &lt;code&gt;.app&lt;/code&gt; ファイルもここに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="4fa121fdbbaf2c38de45f0099796666e958a373c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ebusy&lt;/code&gt; - File busy</source>
          <target state="translated">&lt;code&gt;ebusy&lt;/code&gt; -ファイルがビジー</target>
        </trans-unit>
        <trans-unit id="8d187bbf6c20594ac206cda3e5be0ba56355a74e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is a structure containing information about the C-node. It is used in other &lt;code&gt;ei&lt;/code&gt; functions for connecting and receiving data.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; は、Cノードに関する情報を含む構造です。他の &lt;code&gt;ei&lt;/code&gt; 関数でデータの接続と受信に使用されます。</target>
        </trans-unit>
        <trans-unit id="13e6529ab0ed7674f317ca2597462445a44f4935" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the &lt;code&gt;ei_cnode&lt;/code&gt; representing the current cnode.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; は、現在の &lt;code&gt;ei_cnode&lt;/code&gt; 表すei_cnodeです。</target>
        </trans-unit>
        <trans-unit id="6340a11a3bc8bd9ce89fd41568927cda040c6ca0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the C-node structure previously initiated by a call to &lt;code&gt;ei_connect_init()&lt;/code&gt; or &lt;code&gt;ei_connect_xinit()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; は、 &lt;code&gt;ei_connect_init()&lt;/code&gt; または &lt;code&gt;ei_connect_xinit()&lt;/code&gt; の呼び出しによって以前に開始されたCノード構造です。</target>
        </trans-unit>
        <trans-unit id="afdad500375ddaef47fb87c7209e14cdecbf5534" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the C-node structure.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; はCノード構造です。</target>
        </trans-unit>
        <trans-unit id="e3416d6f2e71e8704055690440931e55bd73f834" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ec&lt;/code&gt; is the node structure of the node to unregister.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; は、登録を解除するノードのノード構造です。</target>
        </trans-unit>
        <trans-unit id="9198cdf1d84cf072370c01ff67cd3c441fafd696" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echild&lt;/code&gt; - No children</source>
          <target state="translated">&lt;code&gt;echild&lt;/code&gt; -子なし</target>
        </trans-unit>
        <trans-unit id="d8c274cda0e7265a697f0208a5d2f6b2ea43125c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;echrng&lt;/code&gt; - Channel number out of range</source>
          <target state="translated">&lt;code&gt;echrng&lt;/code&gt; -チャネル番号が範囲外です</target>
        </trans-unit>
        <trans-unit id="f86009a519d34374f034ee01de66ece004213c92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ecomm&lt;/code&gt; - Communication error on send</source>
          <target state="translated">&lt;code&gt;ecomm&lt;/code&gt; -送信時の通信エラー</target>
        </trans-unit>
        <trans-unit id="ad02f03d6a203fffc5404da7433b3dce465e04ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;econnaborted&lt;/code&gt; - Software caused connection abort</source>
          <target state="translated">&lt;code&gt;econnaborted&lt;/code&gt; -ソフトウェアにより接続が中止されました</target>
        </trans-unit>
        <trans-unit id="cd5292bfcde1c23a92c0b953fb2f9864055919e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;econnrefused&lt;/code&gt; - Connection refused</source>
          <target state="translated">&lt;code&gt;econnrefused&lt;/code&gt; -接続が拒否されました</target>
        </trans-unit>
        <trans-unit id="9e02a71ef8223a81da0683e22f774c0548e5e3f5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;econnreset&lt;/code&gt; - Connection reset by peer</source>
          <target state="translated">&lt;code&gt;econnreset&lt;/code&gt; -接続がピアによってリセットされました</target>
        </trans-unit>
        <trans-unit id="64225ea069eca2fe11239f4dd101bbf3a344b646" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edeadlk&lt;/code&gt; - Resource deadlock avoided</source>
          <target state="translated">&lt;code&gt;edeadlk&lt;/code&gt; -リソースのデッドロックを回避</target>
        </trans-unit>
        <trans-unit id="095df8379d52a8da678df15db5e4fcfb4ed3f32e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edeadlock&lt;/code&gt; - Resource deadlock avoided</source>
          <target state="translated">&lt;code&gt;edeadlock&lt;/code&gt; -リソースのデッドロックを回避</target>
        </trans-unit>
        <trans-unit id="ab55eeadd852f02dc987140e5e80954ca723033a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edestaddrreq&lt;/code&gt; - Destination address required</source>
          <target state="translated">&lt;code&gt;edestaddrreq&lt;/code&gt; -宛先アドレスが必要</target>
        </trans-unit>
        <trans-unit id="32714baed792ef1ae2ba1ddeba140d9e1d5c75ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edirty&lt;/code&gt; - Mounting a dirty fs without force</source>
          <target state="translated">&lt;code&gt;edirty&lt;/code&gt; -ダーティfsを無理なくマウントする</target>
        </trans-unit>
        <trans-unit id="c96fb6b356634fa47ecc45e13e4767f1a487be6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edom&lt;/code&gt; - Math argument out of range</source>
          <target state="translated">&lt;code&gt;edom&lt;/code&gt; -数学の引数が範囲外です</target>
        </trans-unit>
        <trans-unit id="c2b16bb6289f694cad74cd8a713645eaee77ff9d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edotdot&lt;/code&gt; - Cross mount point</source>
          <target state="translated">&lt;code&gt;edotdot&lt;/code&gt; -クロスマウントポイント</target>
        </trans-unit>
        <trans-unit id="bf780eaa3cf1f92292584c219151a16c7c97f893" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;edquot&lt;/code&gt; - Disk quota exceeded</source>
          <target state="translated">&lt;code&gt;edquot&lt;/code&gt; -ディスククォータを超過</target>
        </trans-unit>
        <trans-unit id="8101e6d13cf9ad1420ddb02686af8efbc7ee96ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eduppkg&lt;/code&gt; - Duplicate package name</source>
          <target state="translated">&lt;code&gt;eduppkg&lt;/code&gt; -重複したパッケージ名</target>
        </trans-unit>
        <trans-unit id="253045380edccb1e96e308e563f065d78d92da16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eexist&lt;/code&gt; - File already exists</source>
          <target state="translated">&lt;code&gt;eexist&lt;/code&gt; -ファイルはすでに存在します</target>
        </trans-unit>
        <trans-unit id="7861bdf01f2da8926a782fa7b91b00ece5ce08d6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;efault&lt;/code&gt; - Bad address in system call argument</source>
          <target state="translated">&lt;code&gt;efault&lt;/code&gt; -システムコール引数のアドレスが不正です</target>
        </trans-unit>
        <trans-unit id="16c138959d338b1ce08e97d4d9602167e5b1e243" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;efbig&lt;/code&gt; - File too large</source>
          <target state="translated">&lt;code&gt;efbig&lt;/code&gt; -ファイルが大きすぎる</target>
        </trans-unit>
        <trans-unit id="31cc1351f1ed0ac67d43d86b384cf0bb5de1249f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;efile&lt;/code&gt;, which means use the local file system, this is the default.</source>
          <target state="translated">&lt;code&gt;efile&lt;/code&gt; は、ローカルファイルシステムを使用することを意味します。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="ae15036943ab0422753787cf1a0571db4d5b858c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ehostdown&lt;/code&gt; - Host is down</source>
          <target state="translated">&lt;code&gt;ehostdown&lt;/code&gt; -ホストがダウンしています</target>
        </trans-unit>
        <trans-unit id="41a1e20311ed6f9be07007469e8c77d42a57d62e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ehostunreach&lt;/code&gt; - Host is unreachable</source>
          <target state="translated">&lt;code&gt;ehostunreach&lt;/code&gt; -ホストに到達できません</target>
        </trans-unit>
        <trans-unit id="4057bd8b1f1bcdec284da63d635ca2a15dc8dc16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei&lt;/code&gt; allows you to convert atoms, lists, numbers, and binaries to and from the binary format. This is useful when writing port programs and drivers. &lt;code&gt;ei&lt;/code&gt; uses a given buffer, no dynamic memory (except &lt;code&gt;ei_decode_fun()&lt;/code&gt;) and is often quite fast.</source>
          <target state="translated">&lt;code&gt;ei&lt;/code&gt; では、アトム、リスト、数値、およびバイナリをバイナリ形式との間で変換できます。これは、ポートプログラムとドライバを書くときに役立ちます。 &lt;code&gt;ei&lt;/code&gt; は与えられたバッファを使用し、動的メモリを使用せず（ &lt;code&gt;ei_decode_fun()&lt;/code&gt; を除く）、多くの場合非常に高速です。</target>
        </trans-unit>
        <trans-unit id="4f1822707a34fb31d15140ca9063ce11388efb7d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei&lt;/code&gt; also handles C-nodes, C-programs that talks Erlang distribution with Erlang nodes (or other C-nodes) using the Erlang distribution format. The difference between &lt;code&gt;ei&lt;/code&gt; and &lt;code&gt;erl_interface&lt;/code&gt; is that &lt;code&gt;ei&lt;/code&gt; uses the binary format directly when sending and receiving terms. It is also thread safe, and using threads, one process can handle multiple C-nodes. The &lt;code&gt;erl_interface&lt;/code&gt; library is built on top of &lt;code&gt;ei&lt;/code&gt;, but of legacy reasons, it does not allow for multiple C-nodes. In general, &lt;code&gt;ei&lt;/code&gt; is the preferred way of doing C-nodes.</source>
          <target state="translated">&lt;code&gt;ei&lt;/code&gt; はまた、Cノード、Erlang配布形式を使用してErlangノード（または他のCノード）とErlang配布を通信するCプログラムも処理します。差 &lt;code&gt;ei&lt;/code&gt; と &lt;code&gt;erl_interface&lt;/code&gt; は、ということである &lt;code&gt;ei&lt;/code&gt; 用語を送受信する際に直接バイナリフォーマットを使用します。また、スレッドセーフであり、スレッドを使用すると、1つのプロセスで複数のCノードを処理できます。 &lt;code&gt;erl_interface&lt;/code&gt; のライブラリーは、上に構築された &lt;code&gt;ei&lt;/code&gt; が、レガシーな理由のために、それは、複数のC-ノードに対して許可されていません。一般に、 &lt;code&gt;ei&lt;/code&gt; はCノードを実行するための推奨される方法です。</target>
        </trans-unit>
        <trans-unit id="524434016cbe3cef038cae99407fe0bf4d8a1cbd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei&lt;/code&gt; also handles C-nodes, C-programs that talks Erlang distribution with Erlang nodes (or other C-nodes) using the Erlang distribution format.The &lt;code&gt;ei&lt;/code&gt; library is thread safe, and using threads, one process can handle multiple C-nodes.</source>
          <target state="translated">&lt;code&gt;ei&lt;/code&gt; もformat.Theアーラン分布を用いて、アーラン・ノード（または他のC-ノード）とアーラン分布を語るC-ノード、C-プログラムを処理 &lt;code&gt;ei&lt;/code&gt; ライブラリは、スレッドセーフであり、スレッドを使用して、一つのプロセスは、複数のC-ノードを扱うことができます。</target>
        </trans-unit>
        <trans-unit id="e3e17e50994cd69e93bdcc8d44a3d2a32c9a3da9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_listen&lt;/code&gt; will create a socket, bind to a port on the local interface identified by &lt;code&gt;adr&lt;/code&gt; (or all local interfaces if &lt;code&gt;ei_listen()&lt;/code&gt; is called), and mark the socket as a passive socket (that is, a socket that will be used for accepting incoming connections).</source>
          <target state="translated">&lt;code&gt;ei_listen&lt;/code&gt; はソケットを作成し、 &lt;code&gt;adr&lt;/code&gt; で識別されるローカルインターフェイス（または &lt;code&gt;ei_listen()&lt;/code&gt; が呼び出された場合はすべてのローカルインターフェイス）のポートにバインドし、そのソケットをパッシブソケット（つまり、受け入れに使用されるソケット）としてマークします。着信接続）。</target>
        </trans-unit>
        <trans-unit id="f1c93b6c19f85a0fc04f92de1e46e22e3da2959e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_rpc()&lt;/code&gt; returns the number of bytes in the result on success and &lt;code&gt;-1&lt;/code&gt; on failure. &lt;code&gt;ei_rpc_from()&lt;/code&gt; returns the number of bytes, otherwise one of &lt;code&gt;ERL_TICK&lt;/code&gt;, &lt;code&gt;ERL_TIMEOUT&lt;/code&gt;, and &lt;code&gt;ERL_ERROR&lt;/code&gt;. When failing, all three functions set &lt;code&gt;erl_errno&lt;/code&gt; to one of the following:</source>
          <target state="translated">&lt;code&gt;ei_rpc()&lt;/code&gt; は、成功すると結果のバイト数を返し、失敗すると &lt;code&gt;-1&lt;/code&gt; を返します。 &lt;code&gt;ei_rpc_from()&lt;/code&gt; はバイト数を返します。それ以外の場合は、 &lt;code&gt;ERL_TICK&lt;/code&gt; 、 &lt;code&gt;ERL_TIMEOUT&lt;/code&gt; 、および &lt;code&gt;ERL_ERROR&lt;/code&gt; のいずれかを返します。失敗すると、3つの関数すべてが &lt;code&gt;erl_errno&lt;/code&gt; を次のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="d9e4fb15102075457afaf44985139aa7327294ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_x_format_wo_ver()&lt;/code&gt; formats into a buffer, without the initial version byte.</source>
          <target state="translated">&lt;code&gt;ei_x_format_wo_ver()&lt;/code&gt; は、初期バージョンバイトなしでバッファにフォーマットします。</target>
        </trans-unit>
        <trans-unit id="e61e585ef7827c4765a03c5e289877218bfe74d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_xconnect()&lt;/code&gt; requires the IP address of the remote host and the alive name of the remote node to be specified. &lt;code&gt;ei_connect()&lt;/code&gt; provides an alternative interface and determines the information from the node name provided.</source>
          <target state="translated">&lt;code&gt;ei_xconnect()&lt;/code&gt; には、リモートホストのIPアドレスとリモートノードのアライブ名を指定する必要があります。 &lt;code&gt;ei_connect()&lt;/code&gt; は代替インターフェースを提供し、提供されたノード名から情報を決定します。</target>
        </trans-unit>
        <trans-unit id="335002f005a585709de475d548e701b015c2235d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ei_xconnect()&lt;/code&gt; requires the IP address of the remote host and the alive name of the remote node to be specified. &lt;code&gt;ei_connect()&lt;/code&gt; provides an alternative interface and determines the information from the node name provided. The &lt;code&gt;ei_xconnect_host_port()&lt;/code&gt; function provides yet another alternative that will work even if there is no EPMD instance on the host where the remote node is running. The &lt;code&gt;ei_xconnect_host_port()&lt;/code&gt; function requires the IP address and port of the remote node to be specified. The &lt;code&gt;ei_connect_host_port()&lt;/code&gt; function is an alternative to &lt;code&gt;ei_xconnect_host_port()&lt;/code&gt; that lets the user specify a hostname instead of an IP address.</source>
          <target state="translated">&lt;code&gt;ei_xconnect()&lt;/code&gt; では、リモートホストのIPアドレスとリモートノードの有効な名前を指定する必要があります。 &lt;code&gt;ei_connect()&lt;/code&gt; は代替インターフェースを提供し、提供されたノード名から情報を決定します。 &lt;code&gt;ei_xconnect_host_port()&lt;/code&gt; 関数は、リモート・ノードが実行されているホストにはEPMDインスタンスが存在しない場合でも動作する更に別の代替を提供します。 &lt;code&gt;ei_xconnect_host_port()&lt;/code&gt; 関数は、リモート・ノードのIPアドレスおよびポートを指定する必要があります。 &lt;code&gt;ei_connect_host_port()&lt;/code&gt; 関数は、の代替である &lt;code&gt;ei_xconnect_host_port()&lt;/code&gt; ユーザーは、ホスト名の代わりにIPアドレスを指定することができます。</target>
        </trans-unit>
        <trans-unit id="5fc4aad0082154201868dc5e78b89ad56b713f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eidrm&lt;/code&gt; - Identifier removed</source>
          <target state="translated">&lt;code&gt;eidrm&lt;/code&gt; -識別子が削除された</target>
        </trans-unit>
        <trans-unit id="4c51e97e2d1b60cae1995ba4c14365cf239a4da3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;einit&lt;/code&gt; - Initialization error</source>
          <target state="translated">&lt;code&gt;einit&lt;/code&gt; -初期化エラー</target>
        </trans-unit>
        <trans-unit id="c83b6f5034fbf175dad5e5be227bf0995311d4ed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;einprogress&lt;/code&gt; - Operation now in progress</source>
          <target state="translated">&lt;code&gt;einprogress&lt;/code&gt; -操作は現在進行中です</target>
        </trans-unit>
        <trans-unit id="60eb0596371343d8ec3552422eb1e34f1b36f5a7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eintr&lt;/code&gt; - Interrupted system call</source>
          <target state="translated">&lt;code&gt;eintr&lt;/code&gt; -システムコールの中断</target>
        </trans-unit>
        <trans-unit id="089a96dc9bcb8bd0620721e7fb8a694b138afc61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;einval&lt;/code&gt; - Invalid argument</source>
          <target state="translated">&lt;code&gt;einval&lt;/code&gt; -無効な引数</target>
        </trans-unit>
        <trans-unit id="44bfb9ae0f478b8485ecf3c9086e42e717fdc5a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eio&lt;/code&gt; - I/O error</source>
          <target state="translated">&lt;code&gt;eio&lt;/code&gt; -I / Oエラー</target>
        </trans-unit>
        <trans-unit id="69f2935e8dc5ed0862669551b2a84e850d91a37e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eisconn&lt;/code&gt; - Socket is already connected</source>
          <target state="translated">&lt;code&gt;eisconn&lt;/code&gt; -ソケットはすでに接続されています</target>
        </trans-unit>
        <trans-unit id="ec13cd39a788418050c228cc6c985bb0287cbe7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eisdir&lt;/code&gt; - Illegal operation on a directory</source>
          <target state="translated">&lt;code&gt;eisdir&lt;/code&gt; -ディレクトリに対する不正な操作</target>
        </trans-unit>
        <trans-unit id="85e5e80b311605ed81269e38433a78231c243cda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eisnam&lt;/code&gt; - Is a named file</source>
          <target state="translated">&lt;code&gt;eisnam&lt;/code&gt; -名前付きファイルです</target>
        </trans-unit>
        <trans-unit id="0e8947aa5bf1f600183d01c17b799dedea023825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el2hlt&lt;/code&gt; - Level 2 halted</source>
          <target state="translated">&lt;code&gt;el2hlt&lt;/code&gt; -レベル2を停止</target>
        </trans-unit>
        <trans-unit id="f4bb64c4510653aeb5bcf4358b3c523b6fb03c45" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el2nsync&lt;/code&gt; - Level 2 not synchronized</source>
          <target state="translated">&lt;code&gt;el2nsync&lt;/code&gt; -レベル2が同期されていません</target>
        </trans-unit>
        <trans-unit id="b379560048c7b16c077af37a1f69690c4f351025" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el3hlt&lt;/code&gt; - Level 3 halted</source>
          <target state="translated">&lt;code&gt;el3hlt&lt;/code&gt; -レベル3を停止</target>
        </trans-unit>
        <trans-unit id="7ab7bb692a6b3432357ba5a73cd34a83e0c73f16" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;el3rst&lt;/code&gt; - Level 3 reset</source>
          <target state="translated">&lt;code&gt;el3rst&lt;/code&gt; -レベル3のリセット</target>
        </trans-unit>
        <trans-unit id="089ddb4594d97b9bd5c862b25c1247687f01825e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elbin&lt;/code&gt; - ELBIN</source>
          <target state="translated">&lt;code&gt;elbin&lt;/code&gt; -ELBIN</target>
        </trans-unit>
        <trans-unit id="7893f5bf1e4c46bc941bcaa83534b3929acfdcbf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibacc&lt;/code&gt; - Cannot access a needed shared library</source>
          <target state="translated">&lt;code&gt;elibacc&lt;/code&gt; -必要な共有ライブラリにアクセスできない</target>
        </trans-unit>
        <trans-unit id="357a0d86ed459bc468c8d677e6ff04d9d2040835" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibbad&lt;/code&gt; - Accessing a corrupted shared library</source>
          <target state="translated">&lt;code&gt;elibbad&lt;/code&gt; -破損した共有ライブラリへのアクセス</target>
        </trans-unit>
        <trans-unit id="480018e122be7dff83c1c18a0429df262ad75fc3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibexec&lt;/code&gt; - Cannot exec a shared library directly</source>
          <target state="translated">&lt;code&gt;elibexec&lt;/code&gt; -共有ライブラリを直接実行できない</target>
        </trans-unit>
        <trans-unit id="3e3ec25d0793f3f2912fb4fd28a414479e7dd127" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibmax&lt;/code&gt; - Attempting to link in more shared libraries than system limit</source>
          <target state="translated">&lt;code&gt;elibmax&lt;/code&gt; -システムの制限よりも多くの共有ライブラリをリンクしようとしています</target>
        </trans-unit>
        <trans-unit id="3105e6fc8eecafc0b2847ad8cc45d60256cc4d81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elibscn&lt;/code&gt; - &lt;code&gt;.lib&lt;/code&gt; section in &lt;code&gt;a.out&lt;/code&gt; corrupted</source>
          <target state="translated">&lt;code&gt;elibscn&lt;/code&gt; - &lt;code&gt;a.out&lt;/code&gt; の &lt;code&gt;.lib&lt;/code&gt; セクションが破損している</target>
        </trans-unit>
        <trans-unit id="3f0b20734661bcc8b565e3f90edaef1087de0de3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;elnrng&lt;/code&gt; - Link number out of range</source>
          <target state="translated">&lt;code&gt;elnrng&lt;/code&gt; -リンク番号が範囲外</target>
        </trans-unit>
        <trans-unit id="9fb670ce931ef5c988ddc7fd596bb9cd1d21c77f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eloop&lt;/code&gt; - Too many levels of symbolic links</source>
          <target state="translated">&lt;code&gt;eloop&lt;/code&gt; -シンボリックリンクのレベルが多すぎます</target>
        </trans-unit>
        <trans-unit id="2fc1dce9eee780c04d77b3e8a50f5a25e8d2ff32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emfile&lt;/code&gt; - Too many open files</source>
          <target state="translated">&lt;code&gt;emfile&lt;/code&gt; -開いているファイルが多すぎる</target>
        </trans-unit>
        <trans-unit id="2a3b681741f87f0b7429e3b04d706f100ccf509d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emlink&lt;/code&gt; - Too many links</source>
          <target state="translated">&lt;code&gt;emlink&lt;/code&gt; -リンクが多すぎる</target>
        </trans-unit>
        <trans-unit id="8a1d37f90fe18af44c2a3274e64ac741146447d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;employees&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;employees&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="130bca2165b56dfb95f44ac6bc899a93d144d99e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; and &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; contain the pids of the sender and recipient of the link or unlink. &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; is not used.</source>
          <target state="translated">&lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; および &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; には、リンクまたはリンク解除の送信者と受信者のPIDが含まれています。 &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; は使用されません。</target>
        </trans-unit>
        <trans-unit id="c4bbc97a72df14a53a10a400594a735a501ac68f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emsg&lt;/code&gt; is a message containing the result of the function call.</source>
          <target state="translated">&lt;code&gt;emsg&lt;/code&gt; は、関数呼び出しの結果を含むメッセージです。</target>
        </trans-unit>
        <trans-unit id="03a7f883653ee2b993695a1420dcbbaf32bda40b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emsgsize&lt;/code&gt; - Message too long</source>
          <target state="translated">&lt;code&gt;emsgsize&lt;/code&gt; -メッセージが長すぎる</target>
        </trans-unit>
        <trans-unit id="102cae3d1e294580076f0c6f8592c5ebc0801b3c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;emultihop&lt;/code&gt; - Multihop attempted</source>
          <target state="translated">&lt;code&gt;emultihop&lt;/code&gt; -試行されたマルチホップ</target>
        </trans-unit>
        <trans-unit id="2556046b270169e44d74ac1fb288534230cb139a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enametoolong&lt;/code&gt; - Filename too long</source>
          <target state="translated">&lt;code&gt;enametoolong&lt;/code&gt; -ファイル名が長すぎる</target>
        </trans-unit>
        <trans-unit id="bcbd188eaa9772dd6612fedc594abf7a0a61490e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enavail&lt;/code&gt; - Unavailable</source>
          <target state="translated">&lt;code&gt;enavail&lt;/code&gt; -使用不可</target>
        </trans-unit>
        <trans-unit id="6bbf5c89562882c073e0b94fa2ca48188ccc5cf9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;encoding&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; if translation modifier &lt;code&gt;t&lt;/code&gt; is present.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 変換修飾子 &lt;code&gt;t&lt;/code&gt; が存在する &lt;code&gt;true&lt;/code&gt; 、エンコーディングはtrueに設定されます。</target>
        </trans-unit>
        <trans-unit id="77ad1d68e180848defa5a42f1cfd114110c7021e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;endOfTable&lt;/code&gt; if there are no accessible elements after this one.</source>
          <target state="translated">&lt;code&gt;endOfTable&lt;/code&gt; -この後にアクセス可能な要素がない場合。</target>
        </trans-unit>
        <trans-unit id="8ebcf0b3d7ac6630fc3b9e901b85d8574f089344" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_of_input&lt;/code&gt; or &lt;code&gt;{end_of_input, Value}}&lt;/code&gt; when there is no more input (&lt;code&gt;Value&lt;/code&gt; is explained below).</source>
          <target state="translated">&lt;code&gt;end_of_input&lt;/code&gt; または &lt;code&gt;{end_of_input, Value}}&lt;/code&gt; 入力がない場合（ &lt;code&gt;Value&lt;/code&gt; については以下で説明します）。</target>
        </trans-unit>
        <trans-unit id="24c71d34c36f947bf9e07bafbc7fd0128dc8ea25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_of_trace&lt;/code&gt; received once when all trace messages are processed</source>
          <target state="translated">&lt;code&gt;end_of_trace&lt;/code&gt; すべてのトレースメッセージが処理されるときにend_of_traceを1回受信する</target>
        </trans-unit>
        <trans-unit id="2054f317a98e73dae658de2ba34699735cf4aae8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_per_suite&lt;/code&gt; is called as the final stage of the test suite execution (after the last test case has finished). The function is meant to be used for cleaning up after &lt;code&gt;init_per_suite&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end_per_suite&lt;/code&gt; は、テストスイート実行の最終段階として呼び出されます（最後のテストケースが終了した後）。この関数は、 &lt;code&gt;init_per_suite&lt;/code&gt; の後のクリーンアップに使用するためのものです。</target>
        </trans-unit>
        <trans-unit id="95b3a9204cfbdde6851a387b796c8b1372e2cf81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_per_testcase/2&lt;/code&gt; is called after each test case has finished, enabling cleanup after &lt;code&gt;init_per_testcase&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;end_per_testcase/2&lt;/code&gt; は、各テストケースの終了後に &lt;code&gt;init_per_testcase&lt;/code&gt; 、init_per_testcaseの後にクリーンアップを有効にします。</target>
        </trans-unit>
        <trans-unit id="71141edd68217ecbf7ec91855ad9f0f114eec22c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;end_per_testcase&lt;/code&gt; can check if the test case was successful. (which in turn can determine how cleanup is to be performed). This is done by reading the value tagged with &lt;code&gt;tc_status&lt;/code&gt; from &lt;code&gt;Config&lt;/code&gt;. The value is one of the following:</source>
          <target state="translated">&lt;code&gt;end_per_testcase&lt;/code&gt; は、テストケースが成功したかどうかを確認できます。（次に、クリーンアップを実行する方法を決定できます）。これは、 &lt;code&gt;tc_status&lt;/code&gt; でタグ付けされた値を &lt;code&gt;Config&lt;/code&gt; から読み取ることによって行われます。値は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="48bd9d18a9587e2a04f0df5a9be5f8de167faab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enet&lt;/code&gt; - ENET</source>
          <target state="translated">&lt;code&gt;enet&lt;/code&gt; -ENET</target>
        </trans-unit>
        <trans-unit id="d6f6cddb018e4c86ad70e55e121582d34b1ea0d1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enetdown&lt;/code&gt; - Network is down</source>
          <target state="translated">&lt;code&gt;enetdown&lt;/code&gt; -ネットワークがダウンしています</target>
        </trans-unit>
        <trans-unit id="3190f061d30e04fb6a9271caec20dcc8cae8b1a2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enetreset&lt;/code&gt; - Network dropped connection on reset</source>
          <target state="translated">&lt;code&gt;enetreset&lt;/code&gt; -リセット時にネットワーク接続が切断された</target>
        </trans-unit>
        <trans-unit id="1a62bf7fb5581eaca549145ce947c94cfc5f3959" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enetunreach&lt;/code&gt; - Network is unreachable</source>
          <target state="translated">&lt;code&gt;enetunreach&lt;/code&gt; -ネットワークに到達できません</target>
        </trans-unit>
        <trans-unit id="4f8785aeddbafa426e841211571332ba5939a806" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enfile&lt;/code&gt; - File table overflow</source>
          <target state="translated">&lt;code&gt;enfile&lt;/code&gt; -ファイルテーブルのオーバーフロー</target>
        </trans-unit>
        <trans-unit id="54a8b1a4b729abfb9356f547e7fdeff3d76af8b6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;engine_id&lt;/code&gt; - The &lt;code&gt;SnmpEngineID&lt;/code&gt; as defined in SNMP-FRAMEWORK-MIB. &lt;strong&gt;Mandatory&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;engine_id&lt;/code&gt; - SNMP-FRAMEWORK-MIBで定義されている &lt;code&gt;SnmpEngineID&lt;/code&gt; 。&lt;strong&gt;必須&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6047ad8d8d40c1730109e8e27235f14def418518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enif_get_local_pid&lt;/code&gt; will return false if argument &lt;code&gt;term&lt;/code&gt; is the atom &lt;code&gt;&lt;a href=&quot;#enif_make_pid&quot;&gt; undefined&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enif_get_local_pid&lt;/code&gt; 引数の &lt;code&gt;term&lt;/code&gt; がアトム &lt;code&gt;&lt;a href=&quot;#enif_make_pid&quot;&gt; undefined&lt;/a&gt;&lt;/code&gt; 場合、enif_get_local_pidはfalseを返します。</target>
        </trans-unit>
        <trans-unit id="6d8d1d7a7f6f9b985f49fcc957aef5fb8b65290a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enif_get_resource&lt;/code&gt; does not add a reference to the resource object. However, the pointer received in &lt;code&gt;*objp&lt;/code&gt; is guaranteed to be valid at least as long as the resource handle &lt;code&gt;term&lt;/code&gt; is valid.</source>
          <target state="translated">&lt;code&gt;enif_get_resource&lt;/code&gt; は、リソースオブジェクトへの参照を追加しません。ただし、 &lt;code&gt;*objp&lt;/code&gt; で受信したポインターは、少なくともリソースハンドル &lt;code&gt;term&lt;/code&gt; が有効である限り、有効であることが保証されます。</target>
        </trans-unit>
        <trans-unit id="75550d802589c6c6b20bac1563529e207c77a98e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoano&lt;/code&gt; - Anode table overflow</source>
          <target state="translated">&lt;code&gt;enoano&lt;/code&gt; -アノードテーブルのオーバーフロー</target>
        </trans-unit>
        <trans-unit id="8b5d30d3536f96de39693eab21b683c9e068bb33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enobufs&lt;/code&gt; - No buffer space available</source>
          <target state="translated">&lt;code&gt;enobufs&lt;/code&gt; -使用可能なバッファー・スペースがありません</target>
        </trans-unit>
        <trans-unit id="9ade4c792c85383a29ecbaecd7d25e02675bd122" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enocsi&lt;/code&gt; - No CSI structure available</source>
          <target state="translated">&lt;code&gt;enocsi&lt;/code&gt; -使用可能なCSI構造がありません</target>
        </trans-unit>
        <trans-unit id="b51598a142f5adfd48865e15d2853468237f6904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enodata&lt;/code&gt; - No data available</source>
          <target state="translated">&lt;code&gt;enodata&lt;/code&gt; -データなし</target>
        </trans-unit>
        <trans-unit id="639726d99f469fa0e2c3a27f02d5fe5c112c4bbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enodev&lt;/code&gt; - No such device</source>
          <target state="translated">&lt;code&gt;enodev&lt;/code&gt; -そのようなデバイスはありません</target>
        </trans-unit>
        <trans-unit id="207e9dbcef7e01416cb292284f380209b08848a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoent&lt;/code&gt; - No such file or directory</source>
          <target state="translated">&lt;code&gt;enoent&lt;/code&gt; -そのようなファイルまたはディレクトリはありません</target>
        </trans-unit>
        <trans-unit id="3cec8eb5ae7ddb7d7764f3372daa2d4639a9effb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoexec&lt;/code&gt; - Exec format error</source>
          <target state="translated">&lt;code&gt;enoexec&lt;/code&gt; -exec形式エラー</target>
        </trans-unit>
        <trans-unit id="f675251cb3c179443922755eedf43090c4515f53" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enolck&lt;/code&gt; - No locks available</source>
          <target state="translated">&lt;code&gt;enolck&lt;/code&gt; -使用可能なロックはありません</target>
        </trans-unit>
        <trans-unit id="b27dbfa5ca362faa9bbad9c3f5a851ad95da1b11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enolink&lt;/code&gt; - Link has been severed</source>
          <target state="translated">&lt;code&gt;enolink&lt;/code&gt; -リンクが切断されました</target>
        </trans-unit>
        <trans-unit id="18d5419c4c7dafc4ffba680f090c207753780a17" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enomem&lt;/code&gt; - Not enough memory</source>
          <target state="translated">&lt;code&gt;enomem&lt;/code&gt; -メモリ不足</target>
        </trans-unit>
        <trans-unit id="cc5bf49e1ed5cac7ae5e4342347a7f1aeb8023f4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enomsg&lt;/code&gt; - No message of desired type</source>
          <target state="translated">&lt;code&gt;enomsg&lt;/code&gt; -希望するタイプのメッセージがない</target>
        </trans-unit>
        <trans-unit id="267e3cc8e7d629bfb57dabde53f4cd944f66da79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enonet&lt;/code&gt; - Machine is not on the network</source>
          <target state="translated">&lt;code&gt;enonet&lt;/code&gt; -マシンがネットワーク上にありません</target>
        </trans-unit>
        <trans-unit id="c0d0064742538f0cc7b2aafaa47cd3b373913a8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enopkg&lt;/code&gt; - Package not installed</source>
          <target state="translated">&lt;code&gt;enopkg&lt;/code&gt; -パッケージがインストールされていません</target>
        </trans-unit>
        <trans-unit id="dff3e3a7e09c55f7c822e50d7aeeef880bd851e8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enoprotoopt&lt;/code&gt; - Bad protocol option</source>
          <target state="translated">&lt;code&gt;enoprotoopt&lt;/code&gt; -不正なプロトコルオプション</target>
        </trans-unit>
        <trans-unit id="5275d397f6cd736b2edca9458f06aa57eb1cbd25" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enospc&lt;/code&gt; - No space left on device</source>
          <target state="translated">&lt;code&gt;enospc&lt;/code&gt; -デバイスにスペースが残っていません</target>
        </trans-unit>
        <trans-unit id="192bdec7e1688f7d63574f033a7eeffedbe06a6b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enosr&lt;/code&gt; - Out of stream resources or not a stream device</source>
          <target state="translated">&lt;code&gt;enosr&lt;/code&gt; -ストリームリソースが不足しているか、ストリームデバイスではありません</target>
        </trans-unit>
        <trans-unit id="238a62098e5522c7e83140c8c5f6f2fdb2a04538" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enosym&lt;/code&gt; - Unresolved symbol name</source>
          <target state="translated">&lt;code&gt;enosym&lt;/code&gt; -未解決のシンボル名</target>
        </trans-unit>
        <trans-unit id="c8da2ae1a896bcd38d3b6a9dcf887cdc34b28716" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enosys&lt;/code&gt; - Function not implemented</source>
          <target state="translated">&lt;code&gt;enosys&lt;/code&gt; -実装されていない機能</target>
        </trans-unit>
        <trans-unit id="dec216448c3efc0faeb0edbea9314a0181d9bf35" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotblk&lt;/code&gt; - Block device required</source>
          <target state="translated">&lt;code&gt;enotblk&lt;/code&gt; -ブロックデバイスが必要</target>
        </trans-unit>
        <trans-unit id="bbbcb6b3a0232b5c17cddb598ce5486d8330a32a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotconn&lt;/code&gt; - Socket is not connected</source>
          <target state="translated">&lt;code&gt;enotconn&lt;/code&gt; -ソケットが接続されていません</target>
        </trans-unit>
        <trans-unit id="3e856fac0948ae324d17302e6dcd8b7afdda165a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotdir&lt;/code&gt; - Not a directory</source>
          <target state="translated">&lt;code&gt;enotdir&lt;/code&gt; -ディレクトリではない</target>
        </trans-unit>
        <trans-unit id="aec13d9ecfaec761c963eb0401f932c6b4b9f938" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotempty&lt;/code&gt; - Directory not empty</source>
          <target state="translated">&lt;code&gt;enotempty&lt;/code&gt; -ディレクトリが空ではない</target>
        </trans-unit>
        <trans-unit id="36208f5ca80acaab61024d264f8e262047f77925" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotnam&lt;/code&gt; - Not a named file</source>
          <target state="translated">&lt;code&gt;enotnam&lt;/code&gt; -名前付きファイルではない</target>
        </trans-unit>
        <trans-unit id="d7bf022427ba88027346245447278833a84b30f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotsock&lt;/code&gt; - Socket operation on non-socket</source>
          <target state="translated">&lt;code&gt;enotsock&lt;/code&gt; -非ソケットでのソケット操作</target>
        </trans-unit>
        <trans-unit id="975ae1e1fcad4609f74ccb56d18372b4b618e2be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotsup&lt;/code&gt; - Operation not supported</source>
          <target state="translated">&lt;code&gt;enotsup&lt;/code&gt; -サポートされていない操作</target>
        </trans-unit>
        <trans-unit id="37baef27664f2f027f8596627a18fdd91eabac75" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotty&lt;/code&gt; - Inappropriate device for &lt;code&gt;ioctl&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;enotty&lt;/code&gt; - &lt;code&gt;ioctl&lt;/code&gt; に不適切なデバイス</target>
        </trans-unit>
        <trans-unit id="c26af36618a187ea918910bd849a4767ee11c3ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enotuniq&lt;/code&gt; - Name not unique on network</source>
          <target state="translated">&lt;code&gt;enotuniq&lt;/code&gt; -ネットワーク上で一意ではない名前</target>
        </trans-unit>
        <trans-unit id="d99513c6779f948197a541bcc8422a406bc4f431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;entry : string&lt;/code&gt; :: Callback. Ex. &lt;code&gt;&quot;open&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;entry : string&lt;/code&gt; ::コールバック。例 &lt;code&gt;&quot;open&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bb02e114e2c1fde43be0da07271a78e932961018" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;entry : string&lt;/code&gt; :: Code Location. Ex. &lt;code&gt;&quot;lists:sort/1&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;entry : string&lt;/code&gt; ::コードの場所。例 &lt;code&gt;&quot;lists:sort/1&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="50969a87c39c7067507ba1ec276755112123047b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;env&lt;/code&gt; is the environment to create the integer in.</source>
          <target state="translated">&lt;code&gt;env&lt;/code&gt; は整数を作成する環境です。</target>
        </trans-unit>
        <trans-unit id="90fb6782bb3c397635cfbc2261e23050ca063522" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;enxio&lt;/code&gt; - No such device or address</source>
          <target state="translated">&lt;code&gt;enxio&lt;/code&gt; -そのようなデバイスまたはアドレスはありません</target>
        </trans-unit>
        <trans-unit id="d2f629d33624f31488b1207001514d888e268c43" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eof&lt;/code&gt; is returned when input end is reached and no more data is available to the client process.</source>
          <target state="translated">&lt;code&gt;eof&lt;/code&gt; は、入力の終わりに達し、クライアントプロセスが使用できるデータがなくなったときに返されます。</target>
        </trans-unit>
        <trans-unit id="e651310d843b6c7bd6e82b604450e074230f1a92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eopnotsupp&lt;/code&gt; - Operation not supported on socket</source>
          <target state="translated">&lt;code&gt;eopnotsupp&lt;/code&gt; -操作はソケットでサポートされていません</target>
        </trans-unit>
        <trans-unit id="24d7acce6b9b6b3034ac2fa3bd2e3167b56d7b30" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eperm&lt;/code&gt; - Not owner</source>
          <target state="translated">&lt;code&gt;eperm&lt;/code&gt; -所有者ではない</target>
        </trans-unit>
        <trans-unit id="83fe66c0d41d687f28d271224381581a51e4f4d3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epfnosupport&lt;/code&gt; - Protocol family not supported</source>
          <target state="translated">&lt;code&gt;epfnosupport&lt;/code&gt; -プロトコルファミリはサポートされていません</target>
        </trans-unit>
        <trans-unit id="a5890a451bc7bc2396126616a34b508e37acee62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epipe&lt;/code&gt; - Broken pipe</source>
          <target state="translated">&lt;code&gt;epipe&lt;/code&gt; -壊れたパイプ</target>
        </trans-unit>
        <trans-unit id="3a3c9451329835184c27bda61d6c4f1db59493c9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epp(3)&lt;/code&gt;, &lt;code&gt;erl_id_trans(3)&lt;/code&gt;, &lt;code&gt;erl_lint(3)&lt;/code&gt;, &lt;code&gt;beam_lib(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;epp(3)&lt;/code&gt; 、 &lt;code&gt;erl_id_trans(3)&lt;/code&gt; 、 &lt;code&gt;erl_lint(3)&lt;/code&gt; 、 &lt;code&gt;beam_lib(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c9cc6dfb6663cdc6905981a6aad8775ee92c2f6f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;epp_dodger&lt;/code&gt; - bypasses the Erlang preprocessor.</source>
          <target state="translated">&lt;code&gt;epp_dodger&lt;/code&gt; -Erlangプリプロセッサをバイパスします。</target>
        </trans-unit>
        <trans-unit id="1bce7f5c9a030269923955a2f607ccb131557d9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eproclim&lt;/code&gt; - Too many processes</source>
          <target state="translated">&lt;code&gt;eproclim&lt;/code&gt; -プロセスが多すぎる</target>
        </trans-unit>
        <trans-unit id="ee317501a8917bf4010a5d1847674fd1b04f1d41" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprocunavail&lt;/code&gt; - Bad procedure for program</source>
          <target state="translated">&lt;code&gt;eprocunavail&lt;/code&gt; -プログラムの不正な手順</target>
        </trans-unit>
        <trans-unit id="2a6544d4bd7e297872f3fbfd89bf149778b4a8c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprof&lt;/code&gt; is based on the Erlang &lt;code&gt;trace_info&lt;/code&gt; BIFs. &lt;code&gt;eprof&lt;/code&gt; shows how much time has been used by each process, and in which function calls this time has been spent. Time is shown as percentage of total time and absolute time. For more information, see the &lt;code&gt;eprof&lt;/code&gt; manual page in Tools.</source>
          <target state="translated">&lt;code&gt;eprof&lt;/code&gt; は、Erlang &lt;code&gt;trace_info&lt;/code&gt; BIFに基づいています。 &lt;code&gt;eprof&lt;/code&gt; は、各プロセスで使用された時間と、この時間を関数呼び出しで使用した時間を示します。時間は、合計時間と絶対時間の割合として表示されます。詳細については、ツールの &lt;code&gt;eprof&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="df8a0bfc19c4581b404979fadfe7bb7fe1af084e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprof&lt;/code&gt; provides time information of each function used in the program. No call graph is produced, but &lt;code&gt;eprof&lt;/code&gt; has considerable less impact on the program it profiles.</source>
          <target state="translated">&lt;code&gt;eprof&lt;/code&gt; は、プログラムで使用される各関数の時間情報を提供します。コールグラフは生成されませんが、 &lt;code&gt;eprof&lt;/code&gt; がプロファイルするプログラムへの影響はかなり少なくなります。</target>
        </trans-unit>
        <trans-unit id="118e7ea83469a9ed5135f96574380a30caa372d8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprogmismatch&lt;/code&gt; - Wrong program version</source>
          <target state="translated">&lt;code&gt;eprogmismatch&lt;/code&gt; -間違ったプログラムバージョン</target>
        </trans-unit>
        <trans-unit id="3bc26d2260fdf4375c7fd2b218c14427464bcfb2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprogunavail&lt;/code&gt; - RPC program unavailable</source>
          <target state="translated">&lt;code&gt;eprogunavail&lt;/code&gt; -RPCプログラムを利用できません</target>
        </trans-unit>
        <trans-unit id="704e5e1b7cb8deb8b66028feb0898d97ca3b81df" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eproto&lt;/code&gt; - Protocol error</source>
          <target state="translated">&lt;code&gt;eproto&lt;/code&gt; -プロトコルエラー</target>
        </trans-unit>
        <trans-unit id="c0020dd6a856517b832382f8abd689c0c2eeed9f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprotonosupport&lt;/code&gt; - Protocol not supported</source>
          <target state="translated">&lt;code&gt;eprotonosupport&lt;/code&gt; -サポートされていないプロトコル</target>
        </trans-unit>
        <trans-unit id="4b8b4842c1185ca09dc81075ef61632061cf04b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eprototype&lt;/code&gt; - Wrong protocol type for socket</source>
          <target state="translated">&lt;code&gt;eprototype&lt;/code&gt; -ソケットの間違ったプロトコルタイプ</target>
        </trans-unit>
        <trans-unit id="46f7516e9a6f87ecce854e8fe14964d1676c262b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erange&lt;/code&gt; - Math result unrepresentable</source>
          <target state="translated">&lt;code&gt;erange&lt;/code&gt; -表現できない数学の結果</target>
        </trans-unit>
        <trans-unit id="2168cb87b30ae036d5a752f6631954b5bca507db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erefused&lt;/code&gt; - EREFUSED</source>
          <target state="translated">&lt;code&gt;erefused&lt;/code&gt; -EREFUSED</target>
        </trans-unit>
        <trans-unit id="fcbd5c16cd9f879ec603082074b2199d36e01aa6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremchg&lt;/code&gt; - Remote address changed</source>
          <target state="translated">&lt;code&gt;eremchg&lt;/code&gt; -リモートアドレスが変更されました</target>
        </trans-unit>
        <trans-unit id="5c95010734339dc1d2a5d965eeb932f6d9de0ef4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremdev&lt;/code&gt; - Remote device</source>
          <target state="translated">&lt;code&gt;eremdev&lt;/code&gt; -リモートデバイス</target>
        </trans-unit>
        <trans-unit id="b2f04df4c1e858750d480db0e44d49d24ea12173" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremote&lt;/code&gt; - Pathname hit remote filesystem</source>
          <target state="translated">&lt;code&gt;eremote&lt;/code&gt; -パス名がリモートファイルシステムにヒットしました</target>
        </trans-unit>
        <trans-unit id="7e9563a352891721a204a1c6ba35db8d2eece943" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremoteio&lt;/code&gt; - Remote I/O error</source>
          <target state="translated">&lt;code&gt;eremoteio&lt;/code&gt; -リモートI / Oエラー</target>
        </trans-unit>
        <trans-unit id="e0ac33ee9203cd0385e20aa9c0173c8736a05eda" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eremoterelease&lt;/code&gt; - EREMOTERELEASE</source>
          <target state="translated">&lt;code&gt;eremoterelease&lt;/code&gt; -EREMOTERELEASE</target>
        </trans-unit>
        <trans-unit id="cc66bcb60fa11e17ee7a373b05b8b0426e827c02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erfc(X)&lt;/code&gt; returns &lt;code&gt;1.0&lt;/code&gt; - &lt;code&gt;erf(X)&lt;/code&gt;, computed by methods that avoid cancellation for large &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erfc(X)&lt;/code&gt; は &lt;code&gt;1.0&lt;/code&gt; - &lt;code&gt;erf(X)&lt;/code&gt; （X）を返します。これは、大きな &lt;code&gt;X&lt;/code&gt; のキャンセルを回避するメソッドによって計算されます。</target>
        </trans-unit>
        <trans-unit id="a89b1c7135dfce3f2ec861c7930ee0cb688dc19a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl&lt;/code&gt; invokes the code for the Erlang emulator (virtual machine), which supports the following flags:</source>
          <target state="translated">&lt;code&gt;erl&lt;/code&gt; は、次のフラグをサポートするErlangエミュレーター（仮想マシン）のコードを呼び出します。</target>
        </trans-unit>
        <trans-unit id="72c212cae138df8bbf42d46cba38fbb6050a107d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl&lt;/code&gt; understands a number of command-line arguments, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS. Some of them are also described in this chapter.</source>
          <target state="translated">&lt;code&gt;erl&lt;/code&gt; は多くのコマンドライン引数を理解します。ERTSの &lt;code&gt;erl(1)&lt;/code&gt; マニュアルページを参照してください。それらのいくつかは、この章でも説明されています。</target>
        </trans-unit>
        <trans-unit id="49f89e41fc9c8d3ae611ef6c6c1dd9d5d7852bb4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_anno(3)&lt;/code&gt;, &lt;code&gt;shell_docs(3)&lt;/code&gt;, &lt;code&gt;EEP-48 Chapter in Erl_Docgen's User's Guide&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;code#get_doc-1&quot;&gt;code:get_doc/1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erl_anno(3)&lt;/code&gt;, &lt;code&gt;shell_docs(3)&lt;/code&gt;, &lt;code&gt;EEP-48 Chapter in Erl_Docgen's User's Guide&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;code#get_doc-1&quot;&gt;code:get_doc/1&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7d5f44fb6c1012e9c0e060443ea59a1df2d043c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_connect&lt;/code&gt;: Communication with distributed Erlang, see &lt;code&gt;&lt;a href=&quot;#cnode&quot;&gt;C nodes&lt;/a&gt;&lt;/code&gt; below</source>
          <target state="translated">&lt;code&gt;erl_connect&lt;/code&gt; ：分散Erlangとの通信、以下の &lt;code&gt;&lt;a href=&quot;#cnode&quot;&gt;C nodes&lt;/a&gt;&lt;/code&gt; 参照</target>
        </trans-unit>
        <trans-unit id="05e08ca32ae709584e9cf5968c63680192d4b3ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_connect_init()&lt;/code&gt; provides an alternative interface that does not require as much information from the caller. Instead, &lt;code&gt;erl_connect_init()&lt;/code&gt; uses &lt;code&gt;gethostbyname()&lt;/code&gt; to obtain default values.</source>
          <target state="translated">&lt;code&gt;erl_connect_init()&lt;/code&gt; は、呼び出し元からの情報をそれほど必要としない代替インターフェースを提供します。代わりに、 &lt;code&gt;erl_connect_init()&lt;/code&gt; は &lt;code&gt;gethostbyname()&lt;/code&gt; を使用してデフォルト値を取得します。</target>
        </trans-unit>
        <trans-unit id="5ed42cee4f0d59de8a0c21cbc5f26281d66a293b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_connect_xinit()&lt;/code&gt; stores for later use information about:</source>
          <target state="translated">&lt;code&gt;erl_connect_xinit()&lt;/code&gt; は、以下に関する後の使用情報のために保管します。</target>
        </trans-unit>
        <trans-unit id="eab23ac51e1e03f27475648663ab9f2fbebdee92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_decode()&lt;/code&gt; and &lt;code&gt;erl_decode_buf()&lt;/code&gt; decode the contents of a buffer and return the corresponding Erlang term. &lt;code&gt;erl_decode_buf()&lt;/code&gt; provides a simple mechanism for dealing with several encoded terms stored consecutively in the buffer.</source>
          <target state="translated">&lt;code&gt;erl_decode()&lt;/code&gt; と &lt;code&gt;erl_decode_buf()&lt;/code&gt; は、バッファの内容をデコードし、対応するErlang用語を返します。 &lt;code&gt;erl_decode_buf()&lt;/code&gt; は、バッファーに連続して格納されたいくつかのエンコードされた用語を処理するための単純なメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="ba5ce02b66c6ebb8266816eb2a37f2798dcf9446" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_decode()&lt;/code&gt; returns an Erlang term corresponding to the contents of &lt;code&gt;bufp&lt;/code&gt; on success, otherwise &lt;code&gt;NULL&lt;/code&gt;. &lt;code&gt;erl_decode_buf()&lt;/code&gt; returns an Erlang term corresponding to the first of the consecutive terms in &lt;code&gt;bufpp&lt;/code&gt; and moves &lt;code&gt;bufpp&lt;/code&gt; forward to point to the next term in the buffer. On failure, each of the functions return &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_decode()&lt;/code&gt; は、成功すると &lt;code&gt;bufp&lt;/code&gt; の内容に対応するErlang用語を返し、そうでなければ &lt;code&gt;NULL&lt;/code&gt; を返します。 &lt;code&gt;erl_decode_buf()&lt;/code&gt; は、 &lt;code&gt;bufpp&lt;/code&gt; 内の連続する用語の最初に対応するErlang用語を返し、 &lt;code&gt;bufpp&lt;/code&gt; を前方に移動して、バッファー内の次の用語を指します。失敗すると、各関数は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="379b4dd10cbc4012f16c19966712684f66e8debd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_drv_cond_wait&lt;/code&gt; can return even if no one has signaled or broadcast on the condition variable. Code calling &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; is always to be prepared for &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; returning even if the condition that the thread was waiting for has not occurred. That is, when returning from &lt;code&gt;erl_drv_cond_wait&lt;/code&gt;, always check if the condition has occurred, and if not call &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; again.</source>
          <target state="translated">&lt;code&gt;erl_drv_cond_wait&lt;/code&gt; は、条件変数で信号を送ったりブロードキャストしたりしていなくても戻ることができます。呼び出し元のコード &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; がのために準備するために常にある &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; スレッドが待っていたという条件が発生していない場合でも返します。つまり、 &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; から戻るときは、常に条件が発生したかどうかを確認し、発生していない場合は &lt;code&gt;erl_drv_cond_wait&lt;/code&gt; を再度呼び出します。</target>
        </trans-unit>
        <trans-unit id="79e9b0e47149950882d7b60dc390797727177f33" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_encode()&lt;/code&gt; and &lt;code&gt;erl_encode_buf()&lt;/code&gt; encode Erlang terms into external format for storage or transmission. &lt;code&gt;erl_encode_buf()&lt;/code&gt; provides a simple mechanism for encoding several terms consecutively in the same buffer.</source>
          <target state="translated">&lt;code&gt;erl_encode()&lt;/code&gt; および &lt;code&gt;erl_encode_buf()&lt;/code&gt; は、 Erlang用語を格納または送信用の外部形式にエンコードします。 &lt;code&gt;erl_encode_buf()&lt;/code&gt; は、同じバッファーで連続していくつかの用語をエンコードするための単純なメカニズムを提供します。</target>
        </trans-unit>
        <trans-unit id="4baf900ef87e2e2fe298443cfb69dc4f01e7196b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_err_quit()&lt;/code&gt; prints the specified string and terminates the program. For more information, see the &lt;code&gt;&lt;a href=&quot;erl_error&quot;&gt;erl_error&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;erl_err_quit()&lt;/code&gt; は、指定された文字列を出力し、プログラムを終了します。詳細については、 &lt;code&gt;&lt;a href=&quot;erl_error&quot;&gt;erl_error&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="e8ad05d64d240eb35447227773b5efeb35da3b2b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt; is a &quot;modifiable lvalue&quot; (just like ISO C defines &lt;code&gt;errno&lt;/code&gt; to be) rather than a variable. This means it can be implemented as a macro (expanding to, for example, &lt;code&gt;*_erl_errno()&lt;/code&gt;). For reasons of thread safety (or task safety), this is exactly what we do on most platforms.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt; は、変数ではなく「ISO Cが &lt;code&gt;errno&lt;/code&gt; を定義するのと同じように」「変更可能な左辺値」です。これは、マクロとして実装できることを意味します（たとえば、 &lt;code&gt;*_erl_errno()&lt;/code&gt; に展開されます）。スレッドの安全性（またはタスクの安全性）の理由から、これはほとんどのプラットフォームで正確に行っていることです。</target>
        </trans-unit>
        <trans-unit id="34bc77955b3edc6f1b005dd775d48e0ab7698cfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt; is initially (at program startup) zero and is then set by many &lt;code&gt;Erl_Interface&lt;/code&gt; functions on failure to a non-zero error code to indicate what kind of error it encountered. A successful function call can change &lt;code&gt;erl_errno&lt;/code&gt; (by calling some other function that fails), but no function does never set it to zero. This means that you cannot use &lt;code&gt;erl_errno&lt;/code&gt; to see &lt;strong&gt;if&lt;/strong&gt; a function call failed. Instead, each function reports failure in its own way (usually by returning a negative number or &lt;code&gt;NULL&lt;/code&gt;), in which case you can examine &lt;code&gt;erl_errno&lt;/code&gt; for details.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt; は、最初（プログラムの起動時）にゼロであり、失敗時に多くの &lt;code&gt;Erl_Interface&lt;/code&gt; 関数によってゼロ以外のエラーコードに設定され、発生したエラーの種類を示します。関数呼び出しが成功すると、 &lt;code&gt;erl_errno&lt;/code&gt; が（失敗する他の関数を呼び出すことによって）変更される可能性がありますが、関数をゼロに設定する関数はありません。つまり、 &lt;code&gt;erl_errno&lt;/code&gt; を使用して、関数呼び出しが失敗した&lt;strong&gt;かどうか&lt;/strong&gt;を確認することはできません。代わりに、各関数は独自の方法で障害を報告します（通常、負の数または &lt;code&gt;NULL&lt;/code&gt; を返すことにより）。この場合、詳細について &lt;code&gt;erl_errno&lt;/code&gt; を調べることができます。</target>
        </trans-unit>
        <trans-unit id="5acd6abeba816006f87b24f69ff2b195240238f3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt; uses the error codes defined in your system's &lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt; は、システムの &lt;code&gt;&amp;lt;errno.h&amp;gt;&lt;/code&gt; で定義されているエラーコードを使用します。</target>
        </trans-unit>
        <trans-unit id="c80f4ee4dd5d5e5944250455f8a4fb7e666fa984" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_errno&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_errno&lt;/code&gt;.</target>
        </trans-unit>
        <trans-unit id="d0255913a82bda8266c0f53fd482ec96e0c756fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_error&lt;/code&gt;: Error print routines</source>
          <target state="translated">&lt;code&gt;erl_error&lt;/code&gt; ：エラー印刷ルーチン</target>
        </trans-unit>
        <trans-unit id="49742a982f4b2c3d65ba0271a9f9167804fd4846" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_free_compound()&lt;/code&gt; recursively frees all of the subterms associated with a specified Erlang term, regardless of whether we are still holding pointers to the subterms.</source>
          <target state="translated">&lt;code&gt;erl_free_compound()&lt;/code&gt; は、サブタームへのポインターをまだ保持しているかどうかに関係なく、指定されたErlangタームに関連付けられているすべてのサブタームを再帰的に解放します。</target>
        </trans-unit>
        <trans-unit id="350f05cc0384f5d9c9b0647d551ddc37ead71eac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_global&lt;/code&gt;: Access globally registered names</source>
          <target state="translated">&lt;code&gt;erl_global&lt;/code&gt; ：グローバルに登録された名前にアクセスする</target>
        </trans-unit>
        <trans-unit id="490136f48685bc8e7f8c28eeeb4b753f9cc34900" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_interface(3)&lt;/code&gt;, &lt;code&gt;mnesia(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erl_interface(3)&lt;/code&gt; 、 &lt;code&gt;mnesia(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fd8d30fa75a8dd672597b51ad9c0775fc3e85859" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_marshal&lt;/code&gt;, &lt;code&gt;erl_eterm&lt;/code&gt;, &lt;code&gt;erl_format&lt;/code&gt;, and &lt;code&gt;erl_malloc&lt;/code&gt;: Handling of the Erlang external term format</source>
          <target state="translated">&lt;code&gt;erl_marshal&lt;/code&gt; 、 &lt;code&gt;erl_eterm&lt;/code&gt; 、 &lt;code&gt;erl_format&lt;/code&gt; 、および &lt;code&gt;erl_malloc&lt;/code&gt; ：Erlang外部用語フォーマットの処理</target>
        </trans-unit>
        <trans-unit id="efb7d603ad2ca6fa5979574f628b6e1c162ab191" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_match&lt;/code&gt; binds the contents of &lt;code&gt;Age&lt;/code&gt; to &lt;code&gt;21&lt;/code&gt; the first time it reaches the variable.</source>
          <target state="translated">&lt;code&gt;erl_match&lt;/code&gt; は、変数に初めて到達したときに &lt;code&gt;Age&lt;/code&gt; の内容を &lt;code&gt;21&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="af3381bc3757ea5261200b0904f682283cefe98b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_msg_tracer.c&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;erl_msg_tracer.c&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="ea57a0603e747c503f3a87106e1a80f8b2912c6a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_msg_tracer.erl&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;erl_msg_tracer.erl&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="89cb1a04729fbf36b9855226acaf9cc258a9716d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_parse:abstract(T)&lt;/code&gt; is equivalent to &lt;code&gt;erl_parse:abstract(T, 0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_parse:abstract(T)&lt;/code&gt; は &lt;code&gt;erl_parse:abstract(T, 0)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="2093087b106d203fc3331e7c52e280825f272e4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_posix_msg&lt;/code&gt;, The Windows 95 Registry (book from O'Reilly), Win32 Programmer's Reference (from Microsoft)</source>
          <target state="translated">&lt;code&gt;erl_posix_msg&lt;/code&gt; 、Windows 95レジストリ（O'Reillyからの本）、Win32プログラマーズリファレンス（Microsoftから）</target>
        </trans-unit>
        <trans-unit id="cc72680de9e578548629cdb44d689e02a1caf3c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_prim_loader&lt;/code&gt; knows about the environment and how to fetch modules.</source>
          <target state="translated">&lt;code&gt;erl_prim_loader&lt;/code&gt; は、環境とモジュールのフェッチ方法を認識しています。</target>
        </trans-unit>
        <trans-unit id="08fa747747934ae4281559134142942e7b3025fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_rcp_from()&lt;/code&gt; returns &lt;code&gt;ERL_MSG&lt;/code&gt; on success (with &lt;code&gt;Emsg&lt;/code&gt; now containing the reply tuple), otherwise one of &lt;code&gt;ERL_TICK&lt;/code&gt;, &lt;code&gt;ERL_TIMEOUT&lt;/code&gt;, or &lt;code&gt;ERL_ERROR&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_rcp_from()&lt;/code&gt; を返し &lt;code&gt;ERL_MSG&lt;/code&gt; を（の成功に &lt;code&gt;Emsg&lt;/code&gt; がのそうでなければ1、今応答タプルを含む） &lt;code&gt;ERL_TICK&lt;/code&gt; 、 &lt;code&gt;ERL_TIMEOUT&lt;/code&gt; 、又は &lt;code&gt;ERL_ERROR&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="89c060673603e3855cc1a3582950f440f3246668" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_receive()&lt;/code&gt; receives the message into a buffer, while &lt;code&gt;erl_receive_msg()&lt;/code&gt; decodes the message into an Erlang term.</source>
          <target state="translated">&lt;code&gt;erl_receive()&lt;/code&gt; はメッセージをバッファーに受け取り、 &lt;code&gt;erl_receive_msg()&lt;/code&gt; はメッセージをErlang項にデコードします。</target>
        </trans-unit>
        <trans-unit id="d4ac18969a90445e9ba83fceb181b0b596248c83" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_rpc()&lt;/code&gt; returns the remote function's return value on success, otherwise &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_rpc()&lt;/code&gt; は、成功時にリモート関数の戻り値を返し、それ以外の場合は &lt;code&gt;NULL&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3e044b0f96b07d741727eb619036b486758dba48" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_rpc_to()&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt; on success, otherwise a negative number.</source>
          <target state="translated">&lt;code&gt;erl_rpc_to()&lt;/code&gt; は、成功すると &lt;code&gt;0&lt;/code&gt; を返し、それ以外の場合は負の数を返します。</target>
        </trans-unit>
        <trans-unit id="c5ed49df2e5370b4d15786dbb7dcfa2585472403" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_tidy:dir/0&lt;/code&gt; (use https://github.com/richcarl/erl_tidy)</source>
          <target state="translated">&lt;code&gt;erl_tidy:dir/0&lt;/code&gt; （https://github.com/richcarl/erl_tidyを使用）</target>
        </trans-unit>
        <trans-unit id="7e9a4d074b6c1eadc7f4885abd8f9359daaf9a79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_tidy:dir/1&lt;/code&gt; (use https://github.com/richcarl/erl_tidy)</source>
          <target state="translated">&lt;code&gt;erl_tidy:dir/1&lt;/code&gt; （https://github.com/richcarl/erl_tidyを使用）</target>
        </trans-unit>
        <trans-unit id="4856de7a8b8262cc1d129b31fc7a83b0eb3ef2ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_tidy:file/1&lt;/code&gt; (use https://github.com/richcarl/erl_tidy)</source>
          <target state="translated">&lt;code&gt;erl_tidy:file/1&lt;/code&gt; （https://github.com/richcarl/erl_tidyを使用）</target>
        </trans-unit>
        <trans-unit id="cbc83e02b04d65d011bb83229b2a9a959dc1a505" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_tidy:module/1&lt;/code&gt; (use https://github.com/richcarl/erl_tidy)</source>
          <target state="translated">&lt;code&gt;erl_tidy:module/1&lt;/code&gt; （https://github.com/richcarl/erl_tidyを使用）</target>
        </trans-unit>
        <trans-unit id="7d9e96546c029664c29f220826defeafdaef21bc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_tidy:module/2&lt;/code&gt; (use https://github.com/richcarl/erl_tidy)</source>
          <target state="translated">&lt;code&gt;erl_tidy:module/2&lt;/code&gt; （https://github.com/richcarl/erl_tidyを使用）</target>
        </trans-unit>
        <trans-unit id="ca8e4d92e12ea7bf88d771549108973539edd2f8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_var_content()&lt;/code&gt; can be used to retrieve the content of any variables bound as a result of a call to &lt;code&gt;erl_match()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_var_content()&lt;/code&gt; を使用して、 &lt;code&gt;erl_match()&lt;/code&gt; の呼び出しの結果としてバインドされた変数のコンテンツを取得できます。</target>
        </trans-unit>
        <trans-unit id="ffa2b16333b2357002f2b172891b3aeee189267a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_after_morecore_hook&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;__after_morecore_hook&lt;/code&gt; that can be used for tracking used &lt;code&gt;malloc()&lt;/code&gt; implementations core memory usage. This is currently only used by unsupported features.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_after_morecore_hook&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合 &lt;code&gt;yes&lt;/code&gt; 、ターゲット・システムが動作している必要があり &lt;code&gt;__after_morecore_hook&lt;/code&gt; 使用追跡するために使用することができる &lt;code&gt;malloc()&lt;/code&gt; の実装コアメモリ使用量。これは現在、サポートされていない機能でのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="106ac2ae4f4d78615c4b22c9cdecd2ff5ea16abc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_bigendian&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. No default. If &lt;code&gt;yes&lt;/code&gt;, the target system must be big endian. If &lt;code&gt;no&lt;/code&gt;, little endian. This can often be automatically detected, but not always. If not automatically detected, &lt;code&gt;configure&lt;/code&gt; will fail unless this variable is set. Since no default value is used, &lt;code&gt;configure&lt;/code&gt; will try to figure this out automatically.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_bigendian&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトなし。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムは、ビッグエンディアンでなければなりません。 &lt;code&gt;no&lt;/code&gt; 場合、リトルエンディアン。多くの場合、これは自動的に検出されますが、常に検出されるとは限りません。自動的に検出されない場合、この変数が設定されていないと、 &lt;code&gt;configure&lt;/code&gt; は失敗します。デフォルト値は使用されないため、 &lt;code&gt;configure&lt;/code&gt; はこれを自動的に把握しようとします。</target>
        </trans-unit>
        <trans-unit id="fb0788951887b98a8dbe08eb03f7145f14563a31" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_build&lt;/code&gt; - The build system used. This value will be passed as &lt;code&gt;--build=$erl_xcomp_build&lt;/code&gt; argument to the &lt;code&gt;configure&lt;/code&gt; script. It does not have to be a full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet, but can be. The full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet will be created by &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_build&lt;/code&gt;. If set to &lt;code&gt;guess&lt;/code&gt;, the build system will be guessed using &lt;code&gt;$ERL_TOP/erts/autoconf/config.guess&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_build&lt;/code&gt; -使用されるビルドシステム。この値は、 &lt;code&gt;--build=$erl_xcomp_build&lt;/code&gt; 引数として &lt;code&gt;configure&lt;/code&gt; スクリプトに渡されます。完全な &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; トリプレットでなくてもかまいません。完全な &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; トリプレットは、 &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_build&lt;/code&gt; によって作成されます。 &lt;code&gt;guess&lt;/code&gt; に設定すると、ビルドシステムは &lt;code&gt;$ERL_TOP/erts/autoconf/config.guess&lt;/code&gt; を使用して推測されます。</target>
        </trans-unit>
        <trans-unit id="0d2e7a09a0a046af724617716e923bd5dc46a979" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_clock_gettime_cpu_time&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;clock_gettime()&lt;/code&gt; implementation that can be used for retrieving process CPU time.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_clock_gettime_cpu_time&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムが働いている必要があります &lt;code&gt;clock_gettime()&lt;/code&gt; プロセスのCPU時間を取得するために使用することができます実装を。</target>
        </trans-unit>
        <trans-unit id="ea113987d8c14aed502fe757d3bfa667e4b81151" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_code_model_small&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Default to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must place the beam.smp executable in the lower 2 GB of memory. That is it should not use position independent executable.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_code_model_small&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲット・システムは、メモリの下位2ギガバイトでbeam.smp実行可能ファイルを配置する必要があります。つまり、位置に依存しない実行可能ファイルを使用するべきではありません。</target>
        </trans-unit>
        <trans-unit id="93989cef7ebb320f151ef5c78056c91b8be2ae50" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_configure_flags&lt;/code&gt; - Extra configure flags to pass to the &lt;code&gt;configure&lt;/code&gt; script.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_configure_flags&lt;/code&gt; - &lt;code&gt;configure&lt;/code&gt; スクリプトに渡す追加の構成フラグ。</target>
        </trans-unit>
        <trans-unit id="9fc611160841c3877cca40ed51cce51ec4d3a98f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_dlsym_brk_wrappers&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;dlsym(RTLD_NEXT, &amp;lt;S&amp;gt;)&lt;/code&gt; implementation that can be used on &lt;code&gt;brk&lt;/code&gt; and &lt;code&gt;sbrk&lt;/code&gt; symbols used by the &lt;code&gt;malloc()&lt;/code&gt; implementation in use, and by this track the &lt;code&gt;malloc()&lt;/code&gt; implementations core memory usage. This is currently only used by unsupported features.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_dlsym_brk_wrappers&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合 &lt;code&gt;yes&lt;/code&gt; 、ターゲット・システムが動作している必要があり &lt;code&gt;dlsym(RTLD_NEXT, &amp;lt;S&amp;gt;)&lt;/code&gt; で使用することができ実装 &lt;code&gt;brk&lt;/code&gt; と &lt;code&gt;sbrk&lt;/code&gt; のによって使用される記号 &lt;code&gt;malloc()&lt;/code&gt; の使用で実装し、このトラック &lt;code&gt;malloc()&lt;/code&gt; の実装コアメモリ使用。これは現在、サポートされていない機能でのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="88772d054eb8016bb1571c489deaadde7477ef0b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_double_middle&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have doubles in &quot;middle-endian&quot; format. If &lt;code&gt;no&lt;/code&gt;, it has &quot;regular&quot; endianness.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_double_middle&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲット・システムは、「ミドルエンディアン」形式のダブルスを持っている必要があります。 &lt;code&gt;no&lt;/code&gt; の場合、「通常の」エンディアンです。</target>
        </trans-unit>
        <trans-unit id="062309279417fd3e6eea7ce95bfd1cb641ae88a8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_getaddrinfo&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;getaddrinfo()&lt;/code&gt; implementation that can handle both IPv4 and IPv6.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_getaddrinfo&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムが働いている必要があります &lt;code&gt;getaddrinfo()&lt;/code&gt; はIPv4とIPv6の両方を扱うことができるの実装を。</target>
        </trans-unit>
        <trans-unit id="62ef40ba2e6666bf10a25e23fa6e022f5d43ccad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_gethrvtime_procfs_ioctl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;gethrvtime()&lt;/code&gt; implementation and is used with procfs &lt;code&gt;ioctl()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_gethrvtime_procfs_ioctl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲット・システムが動作している必要があります &lt;code&gt;gethrvtime()&lt;/code&gt; の実装をしてのprocfsで使用される &lt;code&gt;ioctl()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="de14cddf739b273dffb0ae8cd1c96f5b04ac40e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_host&lt;/code&gt; - Cross host/target system to build for. This value will be passed as &lt;code&gt;--host=$erl_xcomp_host&lt;/code&gt; argument to the &lt;code&gt;configure&lt;/code&gt; script. It does not have to be a full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet, but can be. The full &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; triplet will be created by &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_host&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_host&lt;/code&gt; -ビルドするクロスホスト/ターゲットシステム。この値は &lt;code&gt;--host=$erl_xcomp_host&lt;/code&gt; 引数として &lt;code&gt;configure&lt;/code&gt; スクリプトに渡されます。完全な &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; トリプレットでなくてもかまいません。完全な &lt;code&gt;CPU-VENDOR-OS&lt;/code&gt; トリプレットは、 &lt;code&gt;$ERL_TOP/erts/autoconf/config.sub $erl_xcomp_host&lt;/code&gt; によって作成されます。</target>
        </trans-unit>
        <trans-unit id="d8a2469b397bddd3193a3cceadcdc867f41c4929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_isysroot&lt;/code&gt; - The absolute path to the system root for includes of the cross compilation environment. If not set, this value defaults to &lt;code&gt;$erl_xcomp_sysroot&lt;/code&gt;, i.e., only set this value if the include system root path is not the same as the system root path.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_isysroot&lt;/code&gt; -クロスコンパイル環境を含めるためのシステムルートへの絶対パス。設定しない場合、この値はデフォルトで &lt;code&gt;$erl_xcomp_sysroot&lt;/code&gt; に設定されます。つまり、この値は、インクルードシステムのルートパスがシステムのルートパスと同じでない場合にのみ設定します。</target>
        </trans-unit>
        <trans-unit id="a174542bd82e842d632bc9a19384e17908d3094d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_kqueue&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;kqueue()&lt;/code&gt; implementation that returns a file descriptor which can be used by &lt;code&gt;poll()&lt;/code&gt; and/or &lt;code&gt;select()&lt;/code&gt;. If &lt;code&gt;no&lt;/code&gt; and the target system has not got &lt;code&gt;epoll()&lt;/code&gt; or &lt;code&gt;/dev/poll&lt;/code&gt;, the kernel-poll feature will be disabled.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_kqueue&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムが働いている必要があります &lt;code&gt;kqueue()&lt;/code&gt; で使用できるファイルディスクリプタを返す実装 &lt;code&gt;poll()&lt;/code&gt; および/または &lt;code&gt;select()&lt;/code&gt; 。場合は &lt;code&gt;no&lt;/code&gt; して、ターゲット・システムが持っていない &lt;code&gt;epoll()&lt;/code&gt; や &lt;code&gt;/dev/poll&lt;/code&gt; 、カーネル・ポーリング機能が無効になることはありません。</target>
        </trans-unit>
        <trans-unit id="b7613c86b3bd0e02cd1f155080c92d4b46295b46" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_clock_gettime_correction&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; on Linux; otherwise, &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;clock_gettime(CLOCK_MONOTONIC, _)&lt;/code&gt; on the target system must work. This variable is recommended to be set to &lt;code&gt;no&lt;/code&gt; on Linux systems with kernel versions less than 2.6.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_clock_gettime_correction&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。Linuxのデフォルトは &lt;code&gt;yes&lt;/code&gt; です。そうでなければ、 &lt;code&gt;no&lt;/code&gt; 。場合は &lt;code&gt;yes&lt;/code&gt; 、 &lt;code&gt;clock_gettime(CLOCK_MONOTONIC, _)&lt;/code&gt; ターゲットシステム上で動作する必要があります。カーネルバージョンが2.6より前のLinuxシステムでは、この変数を &lt;code&gt;no&lt;/code&gt; に設定することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="2d3e383de5424f1e5dee790ee61b3f671152983e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_nptl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; on Linux; otherwise, &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have NPTL (Native POSIX Thread Library). Older Linux systems have LinuxThreads instead of NPTL (Linux kernel versions typically less than 2.6).</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_nptl&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。Linuxのデフォルトは &lt;code&gt;yes&lt;/code&gt; です。そうでなければ、 &lt;code&gt;no&lt;/code&gt; 。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムは、NPTL（ネイティブPOSIXスレッドライブラリ）を持っている必要があります。古いLinuxシステムには、NPTLの代わりにLinuxThreadsがあります（通常、Linuxカーネルのバージョンは2.6未満です）。</target>
        </trans-unit>
        <trans-unit id="cc0916eebc7a8310a6d4f48aed9731ce70a892fb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_usable_sigaltstack&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; on Linux; otherwise, &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;sigaltstack()&lt;/code&gt; must be usable on the target system. &lt;code&gt;sigaltstack()&lt;/code&gt; on Linux kernel versions less than 2.4 are broken.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_usable_sigaltstack&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。Linuxのデフォルトは &lt;code&gt;yes&lt;/code&gt; です。そうでなければ、 &lt;code&gt;no&lt;/code&gt; 。 &lt;code&gt;yes&lt;/code&gt; の場合、ターゲットシステムで &lt;code&gt;sigaltstack()&lt;/code&gt; を使用できる必要があります。Linuxカーネルバージョン2.4未満の &lt;code&gt;sigaltstack()&lt;/code&gt; が壊れています。</target>
        </trans-unit>
        <trans-unit id="c2acd0cc21779f12608e8b02afc45f6f35d3f129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_linux_usable_sigusrx&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the &lt;code&gt;SIGUSR1&lt;/code&gt; and &lt;code&gt;SIGUSR2&lt;/code&gt; signals must be usable by the ERTS. Old LinuxThreads thread libraries (Linux kernel versions typically less than 2.2) used these signals and made them unusable by the ERTS.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_linux_usable_sigusrx&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;yes&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、 &lt;code&gt;SIGUSR1&lt;/code&gt; と &lt;code&gt;SIGUSR2&lt;/code&gt; 信号がERTSで使用可能でなければなりません。古いLinuxThreadsスレッドライブラリ（通常、Linuxカーネルのバージョンは2.2未満）はこれらの信号を使用し、ERTSで使用できなくなりました。</target>
        </trans-unit>
        <trans-unit id="cfcf1f57f212db2dd52856094c1fc2c9722d44db" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_poll&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt; on Darwin/MacOSX; otherwise, &lt;code&gt;yes&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a working &lt;code&gt;poll()&lt;/code&gt; implementation that also can handle devices. If &lt;code&gt;no&lt;/code&gt;, &lt;code&gt;select()&lt;/code&gt; will be used instead of &lt;code&gt;poll()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_poll&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。Darwin / MacOSXのデフォルトは &lt;code&gt;no&lt;/code&gt; です。そうでなければ、 &lt;code&gt;yes&lt;/code&gt; 。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムが働いている必要があります &lt;code&gt;poll()&lt;/code&gt; もデバイスを扱うことができることを実現。場合は &lt;code&gt;no&lt;/code&gt; 、 &lt;code&gt;select()&lt;/code&gt; の代わりに使用されることはありません &lt;code&gt;poll()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4509c2e0afa469bdbca4de5f6467f7509e094da4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_posix_memalign&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;yes&lt;/code&gt; if &lt;code&gt;posix_memalign&lt;/code&gt; system call exists; otherwise &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a &lt;code&gt;posix_memalign&lt;/code&gt; implementation that accepts larger than page size alignment.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_posix_memalign&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。 &lt;code&gt;posix_memalign&lt;/code&gt; システムコールが存在する場合、デフォルトは &lt;code&gt;yes&lt;/code&gt; です。それ以外の場合は、 &lt;code&gt;no&lt;/code&gt; 。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムが持っている必要があります &lt;code&gt;posix_memalign&lt;/code&gt; ページ・サイズ・アライメントよりも大きな受け付け実装を。</target>
        </trans-unit>
        <trans-unit id="269062cd25f17f7a80763e13e0627d10f6195d71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_putenv_copy&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have a &lt;code&gt;putenv()&lt;/code&gt; implementation that stores a copy of the key/value pair.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_putenv_copy&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムが持っている必要があります &lt;code&gt;putenv()&lt;/code&gt; の実装を保存し、そのキー/値ペアのコピー。</target>
        </trans-unit>
        <trans-unit id="ed767b8a3c4a99b707ed643536c651996e6dc1ff" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_reliable_fpe&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt;. Defaults to &lt;code&gt;no&lt;/code&gt;. If &lt;code&gt;yes&lt;/code&gt;, the target system must have reliable floating point exceptions.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_reliable_fpe&lt;/code&gt; - &lt;code&gt;yes|no&lt;/code&gt; 。デフォルトは &lt;code&gt;no&lt;/code&gt; です。場合は &lt;code&gt;yes&lt;/code&gt; 、ターゲットシステムは、信頼できる浮動小数点例外を持っている必要があります。</target>
        </trans-unit>
        <trans-unit id="59e72f4c7e19b8159ea2181e2997a8a05d20d518" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xcomp_sysroot&lt;/code&gt; - The absolute path to the system root of the cross compilation environment. Currently, the &lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;odbc&lt;/code&gt;, &lt;code&gt;ssh&lt;/code&gt; and &lt;code&gt;ssl&lt;/code&gt; applications need the system root. These applications will be skipped if the system root has not been set. The system root might be needed for other things too. If this is the case and the system root has not been set, &lt;code&gt;configure&lt;/code&gt; will fail and request you to set it.</source>
          <target state="translated">&lt;code&gt;erl_xcomp_sysroot&lt;/code&gt; -クロスコンパイル環境のシステムルートへの絶対パス。現在、 &lt;code&gt;crypto&lt;/code&gt; 、 &lt;code&gt;odbc&lt;/code&gt; 、 &lt;code&gt;ssh&lt;/code&gt; 、および &lt;code&gt;ssl&lt;/code&gt; アプリケーションにはシステムルートが必要です。システムルートが設定されていない場合、これらのアプリケーションはスキップされます。システムルートは他にも必要になる場合があります。これが当てはまり、システムルートが設定されていない場合、 &lt;code&gt;configure&lt;/code&gt; は失敗し、設定を要求します。</target>
        </trans-unit>
        <trans-unit id="3e6a8bf12dc9d18db013d9943a8ccd5cd0ddde1f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erl_xconnect()&lt;/code&gt; requires the IP address of the remote host and the alivename of the remote node to be specified. &lt;code&gt;erl_connect()&lt;/code&gt; provides an alternative interface, and determines the information from the node name provided.</source>
          <target state="translated">&lt;code&gt;erl_xconnect()&lt;/code&gt; では、リモートホストのIPアドレスとリモートノードのalivenameを指定する必要があります。 &lt;code&gt;erl_connect()&lt;/code&gt; は代替インターフェースを提供し、提供されたノード名から情報を判別します。</target>
        </trans-unit>
        <trans-unit id="b388afcbfdc0f6255bf3cf9ef1d7e7bfc722c279" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; (use the new try/catch syntax for retrieving the stack backtrace)</source>
          <target state="translated">&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; （スタックバックトレースを取得するために新しいtry / catch構文を使用します）</target>
        </trans-unit>
        <trans-unit id="903c1abc5dac72994d21a17dfb14cd622fabcd81" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; is deprecated and will be removed in OTP 24. Starting from OTP 23, &lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; returns &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; は非推奨であり、OTP 24で削除されます &lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; 、erlang：get_stacktrace / 0は &lt;code&gt;[]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d03a004dcad6782a74f3ee2ad45aaa77ce5e8b9b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; is deprecated and will stop working in a future release.</source>
          <target state="translated">&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; は非推奨であり、将来のリリースでは機能しなくなります。</target>
        </trans-unit>
        <trans-unit id="b541018cbc16f83926cf0aa53af10640840326d5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; retrieves the call stack back-trace (&lt;strong&gt;stacktrace&lt;/strong&gt;) for an exception that has just been caught in the calling process as a list of &lt;code&gt;{Module,Function,Arity,Location}&lt;/code&gt; tuples. Field &lt;code&gt;Arity&lt;/code&gt; in the first tuple can be the argument list of that function call instead of an arity integer, depending on the exception.</source>
          <target state="translated">&lt;code&gt;erlang:get_stacktrace/0&lt;/code&gt; は、呼び出し &lt;code&gt;{Module,Function,Arity,Location}&lt;/code&gt; で{Module、Function、Arity、Location}タプルのリストとしてキャッチされたばかりの例外のコールスタックバックトレース（&lt;strong&gt;stacktrace&lt;/strong&gt;）を取得します。例外によっては、最初のタプルのフィールド &lt;code&gt;Arity&lt;/code&gt; は、アリティ整数の代わりに、その関数呼び出しの引数リストにすることができます。</target>
        </trans-unit>
        <trans-unit id="d7cf58451803b06912db55c95a849417b2569c9e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:now/0&lt;/code&gt; (see the &quot;Time and Time Correction in Erlang&quot; chapter of the ERTS User's Guide for more information)</source>
          <target state="translated">&lt;code&gt;erlang:now/0&lt;/code&gt; （詳細については、ERTSユーザーズガイドの「Erlangでの時間と時間の修正」の章を参照してください）</target>
        </trans-unit>
        <trans-unit id="05fef3fa781d4e70da7ee356acf9e2ff1ed81a93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:system_info(allocated_areas)&lt;/code&gt; is intended for debugging, and the content is highly implementation-dependent. The content of the results therefore changes when needed without prior notice.</source>
          <target state="translated">&lt;code&gt;erlang:system_info(allocated_areas)&lt;/code&gt; はデバッグを目的としており、コンテンツは実装に大きく依存します。そのため、結果の内容は、必要に応じて予告なく変更することがあります。</target>
        </trans-unit>
        <trans-unit id="830e05bfdcbac8e2927b778f03e4949758867586" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang:system_profile&lt;/code&gt; behavior can change in a future release.</source>
          <target state="translated">&lt;code&gt;erlang:system_profile&lt;/code&gt; の動作は、将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="9ade3f5ef6d20dce54cf803b26b865572f5eadab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlang&lt;/code&gt; manual page in ERTS (describes the BIFs)</source>
          <target state="translated">&lt;code&gt;erlang&lt;/code&gt; ERTSのerlangマニュアルページ（BIFについて説明）</target>
        </trans-unit>
        <trans-unit id="3c0b2ebfa58c0be3fbe4c26e11a35d56de356fc2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlc&lt;/code&gt; and the compile server communicate using the Erlang distribution. The compile server is started as a hidden node, with a name that includes the current user. Thus, each user on a computer has their own compile server.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; とコンパイルサーバーは、アーラン分布を使用して通信します。コンパイルサーバーは、現在のユーザーを含む名前の非表示ノードとして起動されます。したがって、コンピューター上の各ユーザーは、独自のコンパイルサーバーを持っています。</target>
        </trans-unit>
        <trans-unit id="652696fe79bcbc0f2943daeb0343d38c1656e1ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlc&lt;/code&gt; wants to use a different version of Erlang than the compile server is using.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; は、コンパイルサーバーが使用しているものとは異なるバージョンのErlangを使用したいと考えています。</target>
        </trans-unit>
        <trans-unit id="fbc6280a99ab676463fbba70ebd845e9d960f18b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlc&lt;/code&gt; wants to use different options for &lt;code&gt;erl&lt;/code&gt; than the compile server was started with. (A change to code path using the option &lt;code&gt;-pa&lt;/code&gt; could cause different parse transforms to be loaded. To be safe, the compile server will be restarted when any &lt;code&gt;erl&lt;/code&gt; option is changed.)</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; は、コンパイルサーバーが開始されたときとは異なるオプションを &lt;code&gt;erl&lt;/code&gt; に使用したいと考えています。（オプション &lt;code&gt;-pa&lt;/code&gt; を使用してコードパスを変更すると、異なる解析変換がロードされる可能性があります。安全のため、 &lt;code&gt;erl&lt;/code&gt; オプションが変更されると、コンパイルサーバーが再起動されます。）</target>
        </trans-unit>
        <trans-unit id="fbf642775d24722a69d5fce0d0743d85adca8813" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erlsrv&lt;/code&gt; also provides a command-line interface for registering, changing, starting, and stopping services.</source>
          <target state="translated">&lt;code&gt;erlsrv&lt;/code&gt; は、サービスの登録、変更、開始、および停止のためのコマンド行インターフェースも提供します。</target>
        </trans-unit>
        <trans-unit id="ffcc31c05996b61bdabb7b7e8aff7930a4d83bb5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erofs&lt;/code&gt; - Read-only file system</source>
          <target state="translated">&lt;code&gt;erofs&lt;/code&gt; -読み取り専用ファイルシステム</target>
        </trans-unit>
        <trans-unit id="b80c4112296dc76f5ba849a8a385bdf8af5edca9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erofs&lt;/code&gt; - Read-only filesystem</source>
          <target state="translated">&lt;code&gt;erofs&lt;/code&gt; -読み取り専用ファイルシステム</target>
        </trans-unit>
        <trans-unit id="037a5f50431f4ff864157481c5d596a8203d27e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:cast/2&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:cast/2&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="b93e91c4d5bd3003f291b632d9add340eb80dd00" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:cast/4&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:cast/4&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="b7f38731690f8c695f1a8f0db7387fc5e280355b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:multicall/5&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:multicall/5&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="3321ac26ed57f0d04ab8d60bcd70561e62d3daf2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:multicast/2&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:multicast/2&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="6a772b2e092a351fea741bbd5aa69bc83b134d1b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:multicast/4&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:multicast/4&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="b799a7fdde4ad3892ff05517db919bb85c8bdf03" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:receive_response()&lt;/code&gt; will return or raise exceptions the same way as &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;erpc:call/5&lt;/a&gt;&lt;/code&gt; does with the exception of &lt;code&gt;{erpc, badarg}&lt;/code&gt;. An &lt;code&gt;{erpc, badarg}&lt;/code&gt; exception will be raised if/when an invalid &lt;code&gt;RequestId&lt;/code&gt; is detected or if an invalid &lt;code&gt;Timeout&lt;/code&gt; is passed.</source>
          <target state="translated">&lt;code&gt;erpc:receive_response()&lt;/code&gt; は、 &lt;code&gt;{erpc, badarg}&lt;/code&gt; 除いて、 &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;erpc:call/5&lt;/a&gt;&lt;/code&gt; と同じ方法で例外を返すか発生させます。 &lt;code&gt;{erpc, badarg}&lt;/code&gt; 無効な場合/ときに例外が発生する &lt;code&gt;RequestId&lt;/code&gt; が検出されたか、無効な場合に &lt;code&gt;Timeout&lt;/code&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="f48735c7143b3772e13a9b0ca9ed33c9422bfaf3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:send_request()&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:send_request()&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="f3b1924f7338fdec04de898b0c42cfc8d28f4244" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpc:send_request/2&lt;/code&gt; fails with an &lt;code&gt;{erpc, badarg}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception if:</source>
          <target state="translated">&lt;code&gt;erpc:send_request/2&lt;/code&gt; は、次の場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="20240f074145c249d4dd67a56257df5ecab46378" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erpcmismatch&lt;/code&gt; - Wrong RPC version</source>
          <target state="translated">&lt;code&gt;erpcmismatch&lt;/code&gt; -誤ったRPCバージョン</target>
        </trans-unit>
        <trans-unit id="d1ff3aacd3633fcdf694fcdcba924da80f94fb62" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erremote&lt;/code&gt; - Object is remote</source>
          <target state="translated">&lt;code&gt;erremote&lt;/code&gt; -オブジェクトはリモートです</target>
        </trans-unit>
        <trans-unit id="b08c1b665019c9fc86772ffce4ce3f45e1f87be3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error:badarg&lt;/code&gt;: an argument is of wrong type or has an illegal value,</source>
          <target state="translated">&lt;code&gt;error:badarg&lt;/code&gt; ：引数の型が間違っているか、値が無効です。</target>
        </trans-unit>
        <trans-unit id="d58f68a20055281ebd2ee48cd35065aec7f6b275" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error:computation_failed&lt;/code&gt;: the computation fails of another reason than &lt;code&gt;low_entropy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error:computation_failed&lt;/code&gt; ： &lt;code&gt;low_entropy&lt;/code&gt; 以外の理由で計算が失敗します。</target>
        </trans-unit>
        <trans-unit id="d24c03cf897dfe27508306e2d9a775b712fe84b0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error:low_entropy&lt;/code&gt;: the random generator failed due to lack of secure &quot;randomness&quot;,</source>
          <target state="translated">&lt;code&gt;error:low_entropy&lt;/code&gt; ：安全な「ランダム性」がないため、ランダムジェネレーターが失敗しました。</target>
        </trans-unit>
        <trans-unit id="da7a5cd48bf89d6d3e5afa1bd3d7b154e5ab549b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_handler:undefined_function(Module, Function, Args)&lt;/code&gt; is evaluated by the new process if &lt;code&gt;Module:Function/Arity&lt;/code&gt; does not exist (where &lt;code&gt;Arity&lt;/code&gt; is the length of &lt;code&gt;Args&lt;/code&gt;). The error handler can be redefined (see &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;). If &lt;code&gt;error_handler&lt;/code&gt; is undefined, or the user has redefined the default &lt;code&gt;error_handler&lt;/code&gt; and its replacement is undefined, a failure with reason &lt;code&gt;undef&lt;/code&gt; occurs.</source>
          <target state="translated">&lt;code&gt;error_handler:undefined_function(Module, Function, Args)&lt;/code&gt; 場合、新しいプロセスによって評価される &lt;code&gt;Module:Function/Arity&lt;/code&gt; 存在しない（ただし &lt;code&gt;Arity&lt;/code&gt; の長さ &lt;code&gt;Args&lt;/code&gt; ）を。エラーハンドラは再定義できます（ &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt; を参照）。 &lt;code&gt;error_handler&lt;/code&gt; が定義されていない場合、またはユーザーがデフォルトの &lt;code&gt;error_handler&lt;/code&gt; を再定義していて、その置き換えが未定義の場合、理由 &lt;code&gt;undef&lt;/code&gt; のエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="f3c883521cdee8e2481c0a180da1faa37dba1788" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_logger(3)&lt;/code&gt;, &lt;code&gt;gen_event(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;error_logger(3)&lt;/code&gt; 、 &lt;code&gt;gen_event(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d15e04a68c3e4f67bc4f5129d30fa1ef4d1ea0c0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_logger(3)&lt;/code&gt;, &lt;code&gt;os_mon(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;error_logger(3)&lt;/code&gt; 、 &lt;code&gt;os_mon(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bd36f251c6677faaaa0ae26d9f33603a67e12e26" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_logger&lt;/code&gt; is no longer started by default, but is automatically started when an event handler is added with &lt;code&gt;error_logger:add_report_handler/1,2&lt;/code&gt;. The &lt;code&gt;error_logger&lt;/code&gt; module is then also added as a handler to the new logger.</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; はデフォルトでは開始されなくなりましたが、 &lt;code&gt;error_logger:add_report_handler/1,2&lt;/code&gt; でイベントハンドラーが追加されると自動的に開始されます。次に、 &lt;code&gt;error_logger&lt;/code&gt; モジュールもハンドラーとして新しいロガーに追加されます。</target>
        </trans-unit>
        <trans-unit id="6de5fad938e46467ba29d2b5d7c334433a3dadc9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;error_man&lt;/code&gt; is the name of the event manager and &lt;code&gt;no_reply&lt;/code&gt; is the event.</source>
          <target state="translated">&lt;code&gt;error_man&lt;/code&gt; はイベントマネージャの名前で、 &lt;code&gt;no_reply&lt;/code&gt; はイベントです。</target>
        </trans-unit>
        <trans-unit id="9a7a600cb0b03c7fab63405b22d151fdd5e372af" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts-EVsn/bin&lt;/code&gt; - Erlang runtime system executables</source>
          <target state="translated">&lt;code&gt;erts-EVsn/bin&lt;/code&gt; -Erlangランタイムシステム実行可能ファイル</target>
        </trans-unit>
        <trans-unit id="b3cd589ffe1e4085965d3df7d06bb33b62969904" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts:epmd&lt;/code&gt; is the Erlang Port Mapper Daemon. Distributed Erlang nodes register with &lt;code&gt;epmd&lt;/code&gt; on the local host to indicate to other nodes that they exist and can accept connections. &lt;code&gt;epmd&lt;/code&gt; maintains a register of node and port number information, and when a node wishes to connect to another node, it first contacts &lt;code&gt;epmd&lt;/code&gt; to find the correct port number to connect to.</source>
          <target state="translated">&lt;code&gt;erts:epmd&lt;/code&gt; は、Erlangポートマッパーデーモンです。分散Erlangノードはローカルホストの &lt;code&gt;epmd&lt;/code&gt; に登録され、それらが存在し、接続を受け入れることができることを他のノードに示します。 &lt;code&gt;epmd&lt;/code&gt; はノードとポート番号の情報のレジスターを維持し、ノードが別のノードに接続することを望む場合、最初に &lt;code&gt;epmd&lt;/code&gt; に接続して、接続する正しいポート番号を見つけます。</target>
        </trans-unit>
        <trans-unit id="ae7b6b8838371f3daac96a3427a870a4e86c1b06" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts:erl_driver(4)&lt;/code&gt;, &lt;code&gt;erts:driver_entry(4)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts:erl_driver(4)&lt;/code&gt; 、 &lt;code&gt;erts:driver_entry(4)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e9eb2668d0733b1a059266643087f67a7951fae3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts:init(3)&lt;/code&gt;, &lt;code&gt;erts:erl_prim_loader(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts:init(3)&lt;/code&gt; 、 &lt;code&gt;erts:erl_prim_loader(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1115b36b9dcc89e47be8c97d9257688803ed8b28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc(3)&lt;/code&gt; is an Erlang Run-Time System internal memory allocator library. &lt;code&gt;erts_alloc_config&lt;/code&gt; is intended to be used to aid creation of an &lt;code&gt;erts_alloc(3)&lt;/code&gt; configuration that is suitable for a limited number of runtime scenarios. The configuration that &lt;code&gt;erts_alloc_config&lt;/code&gt; produce is intended as a suggestion, and may need to be adjusted manually.</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; は、Erlangランタイムシステムの内部メモリアロケータライブラリです。 &lt;code&gt;erts_alloc_config&lt;/code&gt; は、限られた数のランタイムシナリオに適した &lt;code&gt;erts_alloc(3)&lt;/code&gt; 構成の作成を支援するために使用することを目的としています。 &lt;code&gt;erts_alloc_config&lt;/code&gt; が生成する構成は提案であり、手動で調整する必要がある場合があります。</target>
        </trans-unit>
        <trans-unit id="95026c5f783035878205a90f4cb4555ca1c9fa28" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc(3)&lt;/code&gt;, &lt;code&gt;erl(1)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; 、 &lt;code&gt;erl(1)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68e02d443e095b148ffff877159464806e11f021" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc(3)&lt;/code&gt;, &lt;code&gt;erl(1)&lt;/code&gt;, &lt;code&gt;io(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; 、 &lt;code&gt;erl(1)&lt;/code&gt; 、 &lt;code&gt;io(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="658b0104deb072b5a8e17ebc4dd1534274ff60dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc&lt;/code&gt; is an Erlang runtime system internal memory allocator library. &lt;code&gt;erts_alloc&lt;/code&gt; provides the Erlang runtime system with a number of memory allocators.</source>
          <target state="translated">&lt;code&gt;erts_alloc&lt;/code&gt; は、Erlangランタイムシステムの内部メモリアロケーターライブラリです。 &lt;code&gt;erts_alloc&lt;/code&gt; は、Erlangランタイムシステムに多数のメモリアロケータを提供します。</target>
        </trans-unit>
        <trans-unit id="370d5868be6fac8c1b10ed1322a0d21f5022ecbe" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc&lt;/code&gt; is not obliged to strictly use the settings that have been passed to it (it can even ignore them).</source>
          <target state="translated">&lt;code&gt;erts_alloc&lt;/code&gt; は、渡された設定を厳密に使用する義務はありません（無視することもできます）。</target>
        </trans-unit>
        <trans-unit id="bbb376e06ce127dfb22a85316aa719e697c7b3e4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc_config&lt;/code&gt; is currently an experimental tool and might be subject to backward incompatible changes.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config&lt;/code&gt; は現在実験的なツールであり、下位互換性のない変更の影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="0e5e5c670aa0173db46bdf3b49c89809166cfaa5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;erts_alloc_config&lt;/code&gt; saves information about runtime scenarios and performs computations in a server that is automatically started. The server register itself under the name &lt;code&gt;'__erts_alloc_config__'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config&lt;/code&gt; は、実行時のシナリオに関する情報を保存し、自動的に起動されるサーバーで計算を実行します。サーバーは &lt;code&gt;'__erts_alloc_config__'&lt;/code&gt; という名前で自身を登録します。</target>
        </trans-unit>
        <trans-unit id="c6e621d5787597839455dcc92891d1cbff909ae1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;escript&lt;/code&gt; provides support for running short Erlang programs without having to compile them first, and an easy way to retrieve the command-line arguments.</source>
          <target state="translated">&lt;code&gt;escript&lt;/code&gt; は、最初にコンパイルせずに短いErlangプログラムを実行するためのサポートと、コマンドライン引数を取得する簡単な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="923c13835194b71ecffb751d0a9fc46ca90ebf18" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;escript&lt;/code&gt; runs a script written in Erlang.</source>
          <target state="translated">&lt;code&gt;escript&lt;/code&gt; はErlangで書かれたスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="f3c95ecfec85bbad180888eae3642fcb4b398a54" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eshutdown&lt;/code&gt; - Cannot send after socket shutdown</source>
          <target state="translated">&lt;code&gt;eshutdown&lt;/code&gt; -ソケットのシャットダウン後に送信できません</target>
        </trans-unit>
        <trans-unit id="be442bbd7b626986bef7a3e9d34492da2887e492" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esocktnosupport&lt;/code&gt; - Socket type not supported</source>
          <target state="translated">&lt;code&gt;esocktnosupport&lt;/code&gt; -サポートされていないソケットタイプ</target>
        </trans-unit>
        <trans-unit id="3da6e627fa5069bddcb047c9829a058f0cc9b92f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;espipe&lt;/code&gt; - Invalid seek</source>
          <target state="translated">&lt;code&gt;espipe&lt;/code&gt; -無効なシーク</target>
        </trans-unit>
        <trans-unit id="5d99cde7dd1bcef9ce2943aadb4ecbfe6e28f43c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esrch&lt;/code&gt; - No such process</source>
          <target state="translated">&lt;code&gt;esrch&lt;/code&gt; -そのようなプロセスはありません</target>
        </trans-unit>
        <trans-unit id="43537a957d419bfe1cf591954ad9844fbb88e1ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esrmnt&lt;/code&gt; - Srmount error</source>
          <target state="translated">&lt;code&gt;esrmnt&lt;/code&gt; -Srmountエラー</target>
        </trans-unit>
        <trans-unit id="d321374d4998327a70229d5b61947b76054c84b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;estale&lt;/code&gt; - Stale remote file handle</source>
          <target state="translated">&lt;code&gt;estale&lt;/code&gt; -古いリモートファイルハンドル</target>
        </trans-unit>
        <trans-unit id="84c3404f080f386a5f54b535e2881b13895740ac" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;esuccess&lt;/code&gt; - Error 0</source>
          <target state="translated">&lt;code&gt;esuccess&lt;/code&gt; -エラー0</target>
        </trans-unit>
        <trans-unit id="d828893783957c44cc9a5374156eb809901283c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etags&lt;/code&gt; is a program that is part of the Emacs distribution. It is normally executed from a command line, like a unix shell or a DOS box.</source>
          <target state="translated">&lt;code&gt;etags&lt;/code&gt; は、Emacsディストリビューションの一部であるプログラムです。これは通常、UNIXシェルやDOSボックスなどのコマンドラインから実行されます。</target>
        </trans-unit>
        <trans-unit id="049235ae709c3c7df1621c487c02748d53a4c649" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etime&lt;/code&gt; - Timer expired</source>
          <target state="translated">&lt;code&gt;etime&lt;/code&gt; -タイマーが切れました</target>
        </trans-unit>
        <trans-unit id="6a7498e3491a6c3896e8f29e803459eaa6a5883b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etimedout&lt;/code&gt; - Connection timed out</source>
          <target state="translated">&lt;code&gt;etimedout&lt;/code&gt; -接続がタイムアウトしました</target>
        </trans-unit>
        <trans-unit id="2d425e09562b04579b949b00346af666eb229720" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etoomanyrefs&lt;/code&gt; - Too many references</source>
          <target state="translated">&lt;code&gt;etoomanyrefs&lt;/code&gt; -参照が多すぎます</target>
        </trans-unit>
        <trans-unit id="7a995246edf0e806fcbf5ba45cc75e92eabb10f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etop&lt;/code&gt; is a command line tool that can connect to remote nodes and display information similar to what the UNIX tool top shows.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; はコマンドラインツールで、リモートノードに接続して、UNIXツールのtopが表示するのと同様の情報を表示できます。</target>
        </trans-unit>
        <trans-unit id="42facdd428b4102c19724fc2bdc7a4d3a66c9b05" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etop&lt;/code&gt; uses the Erlang trace facility, and thus no other tracing is possible on the measured node while &lt;code&gt;etop&lt;/code&gt; is running, unless this option is set to &lt;code&gt;off&lt;/code&gt;. Also helpful if the &lt;code&gt;etop&lt;/code&gt; tracing causes too high load on the measured node. With tracing off, runtime is not measured.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; はErlangトレース機能を使用するため、このオプションが &lt;code&gt;off&lt;/code&gt; に設定されていない限り、 &lt;code&gt;etop&lt;/code&gt; の実行中は、測定されたノードで他のトレースを実行できません。 &lt;code&gt;etop&lt;/code&gt; トレースにより、測定されたノードの負荷が高すぎる場合にも役立ちます。トレースをオフにすると、実行時間は測定されません。</target>
        </trans-unit>
        <trans-unit id="fc401f6cd9a2d36e07c3cf1d78783b78d1a3eed2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ets:match/2&lt;/code&gt; can be used:</source>
          <target state="translated">&lt;code&gt;ets:match/2&lt;/code&gt; を使用できます：</target>
        </trans-unit>
        <trans-unit id="b1b574263d8adbf3b35dace50b687638d4f62929" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ets:match/2&lt;/code&gt; uses a simpler type of match specification, but it is still unreadable, and one has little control over the returned result. It is always a list of lists.</source>
          <target state="translated">&lt;code&gt;ets:match/2&lt;/code&gt; はより単純なタイプの一致指定を使用しますが、それでも判読できず、返される結果をほとんど制御できません。これは常にリストのリストです。</target>
        </trans-unit>
        <trans-unit id="ada7ea1adf9a7618d24851cc46af35f4d10c76c2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;etxtbsy&lt;/code&gt; - Text file or pseudo-device busy</source>
          <target state="translated">&lt;code&gt;etxtbsy&lt;/code&gt; -テキストファイルまたは疑似デバイスビジー</target>
        </trans-unit>
        <trans-unit id="083cb827d71dd1a6114c058f15bd888df569133a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;euclean&lt;/code&gt; - Structure needs cleaning</source>
          <target state="translated">&lt;code&gt;euclean&lt;/code&gt; -構造のクリーニングが必要</target>
        </trans-unit>
        <trans-unit id="46f3f1bf6d759cafaec1d054c45a3fe6884ec756" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eunatch&lt;/code&gt; - Protocol driver not attached</source>
          <target state="translated">&lt;code&gt;eunatch&lt;/code&gt; -プロトコルドライバーが接続されていません</target>
        </trans-unit>
        <trans-unit id="bf7c59b5877e3b8c7849fc033914477748ab7802" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eusers&lt;/code&gt; - Too many users</source>
          <target state="translated">&lt;code&gt;eusers&lt;/code&gt; -多すぎるユーザー</target>
        </trans-unit>
        <trans-unit id="f2801a73f510bc70a1b17da34cd3262897d9abd6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eval(QH)&lt;/code&gt; is equivalent to &lt;code&gt;eval(QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval(QH)&lt;/code&gt; は &lt;code&gt;eval(QH, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="a9fdd159f121d70ae36287cfa787183d9208f811" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event/4&lt;/code&gt; or &lt;code&gt;event/5&lt;/code&gt; is called whenever an event occurs in the &lt;code&gt;mod_security&lt;/code&gt; Erlang web server API module. (&lt;code&gt;event/4&lt;/code&gt; is called if &lt;code&gt;Address&lt;/code&gt; is undefined, otherwise &lt;code&gt;event/5&lt;/code&gt;. Argument &lt;code&gt;What&lt;/code&gt; specifies the type of event that has occurred and is one of the following reasons:</source>
          <target state="translated">&lt;code&gt;event/4&lt;/code&gt; または &lt;code&gt;event/5&lt;/code&gt; は、 &lt;code&gt;mod_security&lt;/code&gt; Erlang WebサーバーAPIモジュールでイベントが発生するたびに呼び出されます。（ &lt;code&gt;event/4&lt;/code&gt; あれば呼ばれる &lt;code&gt;Address&lt;/code&gt; 定義されていないそうでない場合は、 &lt;code&gt;event/5&lt;/code&gt; 引数。 &lt;code&gt;What&lt;/code&gt; 発生したイベントの種類を指定し、次のいずれかの理由であります：</target>
        </trans-unit>
        <trans-unit id="d072a3b6d526de4f74b49703af037576bdfad4f6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;event_module&lt;/code&gt;. Returns the name of the module that is the event handler callback module.</source>
          <target state="translated">&lt;code&gt;event_module&lt;/code&gt; 。イベントハンドラーコールバックモジュールであるモジュールの名前を返します。</target>
        </trans-unit>
        <trans-unit id="402ed55637d27b6db5c346a697b27c4e23aecf6e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;eversion&lt;/code&gt; - Version mismatch</source>
          <target state="translated">&lt;code&gt;eversion&lt;/code&gt; -バージョンの不一致</target>
        </trans-unit>
        <trans-unit id="647d5575d47453143c12212c48433892a90fd193" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ewouldblock&lt;/code&gt; - Operation would block</source>
          <target state="translated">&lt;code&gt;ewouldblock&lt;/code&gt; -操作はブロックされます</target>
        </trans-unit>
        <trans-unit id="602c2395d81920b3a86446adde96bb734365f744" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exceeded_recv_pending_limit&lt;/code&gt; - the pending limit was exceeded for this request.</source>
          <target state="translated">&lt;code&gt;exceeded_recv_pending_limit&lt;/code&gt; このリクエストの保留中の制限を超えました。</target>
        </trans-unit>
        <trans-unit id="6b268350b68fa90a8d331488111c0e0759b39f7f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exdev&lt;/code&gt; - Cross-domain link</source>
          <target state="translated">&lt;code&gt;exdev&lt;/code&gt; -クロスドメインリンク</target>
        </trans-unit>
        <trans-unit id="f1ccd99602a56cc38a8aa304df9bea1e99ee891b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exfull&lt;/code&gt; - Message tables full</source>
          <target state="translated">&lt;code&gt;exfull&lt;/code&gt; -メッセージテーブルがいっぱい</target>
        </trans-unit>
        <trans-unit id="60af1af3777d71cfb1fd237bb62937ec1d06ed92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; - Attach when a process terminates.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; -プロセスの終了取り付けます。</target>
        </trans-unit>
        <trans-unit id="1c1059adcf3427060a2029651784203116bcc11d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit&lt;/code&gt; - The process is terminated. &lt;code&gt;Info=ExitReason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit&lt;/code&gt; -プロセスは終了します。 &lt;code&gt;Info=ExitReason&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f3609f531c6a4767738d2bcd3db8440c4cc3ea7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit_after/2&lt;/code&gt; is the same as &lt;code&gt;exit_after(Time, self(), Reason1)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit_after/2&lt;/code&gt; は、 &lt;code&gt;exit_after(Time, self(), Reason1)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="118d8c64ed002fe7fab5312cc2217b8f07167d7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;exit_after/3&lt;/code&gt; sends an exit signal with reason &lt;code&gt;Reason1&lt;/code&gt; to pid &lt;code&gt;Pid&lt;/code&gt;. Returns &lt;code&gt;{ok, TRef}&lt;/code&gt; or &lt;code&gt;{error, Reason2}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;exit_after/3&lt;/code&gt; は、理由 &lt;code&gt;Reason1&lt;/code&gt; の終了信号をpid &lt;code&gt;Pid&lt;/code&gt; に送信します。 &lt;code&gt;{ok, TRef}&lt;/code&gt; または &lt;code&gt;{error, Reason2}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="5a0e6bdec4acbea7a2824cd44a5e7a1adcc385a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extended&lt;/code&gt; - One worker dedicated to 'set-requests', one worker dedicated to notifications and one (main) worker for all 'get-requests'.</source>
          <target state="translated">&lt;code&gt;extended&lt;/code&gt; -「set-requests」専用の1つのワーカー、通知専用の1つのワーカー、およびすべての「get-requests」用の1つの（メイン）ワーカー。</target>
        </trans-unit>
        <trans-unit id="57a4da802d829e65d707a43afdecdefa889b176e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extra_db_nodes&lt;/code&gt;. Returns a list of extra &lt;code&gt;db_nodes&lt;/code&gt; to be contacted at startup.</source>
          <target state="translated">&lt;code&gt;extra_db_nodes&lt;/code&gt; 。起動時に &lt;code&gt;db_nodes&lt;/code&gt; する追加のdb_nodeのリストを返します。</target>
        </trans-unit>
        <trans-unit id="f67bbcd2f5db6c737e1cdcaf62c45bea5806d3ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;extract/1&lt;/code&gt; and &lt;code&gt;extract/2&lt;/code&gt; are provided as synonyms to resemble module &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;extract/1&lt;/code&gt; と &lt;code&gt;extract/2&lt;/code&gt; は、モジュール &lt;code&gt;&lt;a href=&quot;erl_tar&quot;&gt;erl_tar&lt;/a&gt;&lt;/code&gt; に似た同義語として提供されています。</target>
        </trans-unit>
        <trans-unit id="ac291863be17a59f9f4cfd4f1cc91d9592851008" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; - Failure label (non-zero). The target for a branch or call instruction.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; -障害ラベル（ゼロ以外）。分岐または呼び出し命令のターゲット。</target>
        </trans-unit>
        <trans-unit id="1048ab4832644f0e8409df7834fac8be896b1129" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; - Non-zero failure label.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; -ゼロ以外の障害ラベル。</target>
        </trans-unit>
        <trans-unit id="bad8d8a74a2c1e67fba0103c4e0b9e8fc42f8bad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is a value to be converted to an Erlang float.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; は、Erlang floatに変換される値です。</target>
        </trans-unit>
        <trans-unit id="8abcbec2f75b3c23ae1c64ef59eb60038bca7348" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;f&lt;/code&gt; is the floating point value to assign.</source>
          <target state="translated">&lt;code&gt;f&lt;/code&gt; は割り当てる浮動小数点値です。</target>
        </trans-unit>
        <trans-unit id="710e9ee5a7d68edae919806d740836a6e6769825" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;failure()&lt;/code&gt; indicates an local or external error and can be one of the following:</source>
          <target state="translated">&lt;code&gt;failure()&lt;/code&gt; はローカルエラーまたは外部エラーを示し、次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="c2469c8655cb917a2bb9031e6447254c2660c34c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fallback_activated&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if a fallback is activated, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fallback_activated&lt;/code&gt; 。フォールバックがアクティブ化されている場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="60075ae08f50200bea797fc51fb20fd327586f4f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if a trace message is not to be emitted</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; トレースメッセージが発行されない場合はfalse</target>
        </trans-unit>
        <trans-unit id="691de5e0cb4604679c034ecba0f7307479b83501" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; if the user or password is invalid</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; ユーザーまたはパスワードが無効な場合はfalse</target>
        </trans-unit>
        <trans-unit id="92bf1a588f04ff032c351f4a75c7475ff39b9c13" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; is returned if the object is not defined in any loaded MIB.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; ロードされたMIBでオブジェクトが定義されていない場合は、falseが返されます。</target>
        </trans-unit>
        <trans-unit id="8ab5542919b9a6acd08b698295fc02f6c85b9d2e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;false&lt;/code&gt; is returned if the object or type is not defined in any loaded MIB, or if it does not define the symbolic value as enumerated.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; ロードされたMIBでオブジェクトまたはタイプが定義されていない場合、または列挙されたシンボリック値を定義していない場合は、falseが返されます。</target>
        </trans-unit>
        <trans-unit id="8cf27dbee3f5798e5fa468395970992d97c075a1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;family_field(Family1)&lt;/code&gt; is equivalent to &lt;code&gt;family_union(family_domain(Family1), family_range(Family1))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;family_field(Family1)&lt;/code&gt; は、 &lt;code&gt;family_union(family_domain(Family1), family_range(Family1))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="3854004da408f511ea42cc065efe9087aef81ab0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;family_union(F)&lt;/code&gt; is equivalent to &lt;code&gt;family_projection(fun sofs:union/1,&amp;nbsp;F)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;family_union(F)&lt;/code&gt; は、 &lt;code&gt;family_projection(fun sofs:union/1,&amp;nbsp;F)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="2e799cbff48f1a907111621ca53afcebf32efbdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fcgi&lt;/code&gt; - Fast CGI</source>
          <target state="translated">&lt;code&gt;fcgi&lt;/code&gt; -Fast CGI</target>
        </trans-unit>
        <trans-unit id="71f8b0c3fdcfff764a1aed30bb055ba063f18789" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; is an open connection to Erlang. &lt;code&gt;Mnesia&lt;/code&gt; 3.0 or later must be running on the Erlang node.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; はErlangへのオープン接続です。 &lt;code&gt;Mnesia&lt;/code&gt; 3.0以降がErlangノードで実行されている必要があります。</target>
        </trans-unit>
        <trans-unit id="c5ec650d9bc77e0e1686955a7fe9bc4c0e0189bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; is an open descriptor to an Erlang connection.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; は、Erlang接続へのオープン記述子です。</target>
        </trans-unit>
        <trans-unit id="f656dcfaaac691553d45cbf7a151c9b166ddc18f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fd&lt;/code&gt; is an open descriptor to an Erlang connection. It is obtained from a previous &lt;code&gt;ei_connect&lt;/code&gt; or &lt;code&gt;ei_accept&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fd&lt;/code&gt; は、Erlang接続へのオープン記述子です。以前の &lt;code&gt;ei_connect&lt;/code&gt; または &lt;code&gt;ei_accept&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="3fa5627f362a188635bb87aa757264405865e18d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;field(R)&lt;/code&gt; is equivalent to &lt;code&gt;union(domain(R), range(R))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;field(R)&lt;/code&gt; は &lt;code&gt;union(domain(R), range(R))&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="88a3db78fcb0a551e7d60442210a1053b3e2932b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file(3)&lt;/code&gt;&lt;code&gt;filename(3)&lt;/code&gt; and J. Postel and J. Reynolds: File Transfer Protocol (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;file(3)&lt;/code&gt; &lt;code&gt;filename(3)&lt;/code&gt; およびJ. PostelおよびJ. Reynolds：File Transfer Protocol（ &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ae107562ea3ff90c303c98876ec07e8a82752603" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;file&lt;/code&gt; (use host data retrieved from system configuration files and/or the user configuration file)</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; （システム構成ファイルやユーザー構成ファイルから取得したホストデータを使用）</target>
        </trans-unit>
        <trans-unit id="049f07423035f44aa98d191a7053183344a26b1e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename:find_src/_&lt;/code&gt; (use filelib:find_source/1,3 instead)</source>
          <target state="translated">&lt;code&gt;filename:find_src/_&lt;/code&gt; （代わりにfilelib：find_source / 1,3を使用）</target>
        </trans-unit>
        <trans-unit id="dde1c86cb58e41267688ed0f2687e315685ef97a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filename:safe_relative_path/1&lt;/code&gt; (use filelib:safe_relative_path/2 instead)</source>
          <target state="translated">&lt;code&gt;filename:safe_relative_path/1&lt;/code&gt; （代わりにfilelib：safe_relative_path / 2を使用してください）</target>
        </trans-unit>
        <trans-unit id="e166683d3f6708ae36021cc46bb7886dd1a606ef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;files/1,2&lt;/code&gt; does exactly the same thing as &lt;code&gt;all/0,1&lt;/code&gt; but for the specified &lt;code&gt;ModFiles&lt;/code&gt;, which is a list of module or file names. The file extension &lt;code&gt;.erl&lt;/code&gt; may be omitted.</source>
          <target state="translated">&lt;code&gt;files/1,2&lt;/code&gt; は、 &lt;code&gt;all/0,1&lt;/code&gt; とまったく同じことを行いますが、モジュールまたはファイル名のリストである指定された &lt;code&gt;ModFiles&lt;/code&gt; に対して行います。ファイル拡張子 &lt;code&gt;.erl&lt;/code&gt; は省略できます。</target>
        </trans-unit>
        <trans-unit id="5432ba00c886379b53d593a55e1fa224fcc98201" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filter&lt;/code&gt; takes a predicate of one argument and a list and returns all elements in the list that satisfy the predicate:</source>
          <target state="translated">&lt;code&gt;filter&lt;/code&gt; は、1つの引数とリストの述語を取り、述語を満たすリスト内のすべての要素を返します。</target>
        </trans-unit>
        <trans-unit id="a94764c4b442f372ab753c4167e78edef5fc2f32" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;filtered&lt;/code&gt; for data produced by a filter (or predictor)</source>
          <target state="translated">&lt;code&gt;filtered&lt;/code&gt; フィルタによって生成されたデータのための（または予測）</target>
        </trans-unit>
        <trans-unit id="51bcc70ead8fb8bc2ab7ac0e1c47dccadf16d1f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;first_next&lt;/code&gt; - The table is traversed one key at a time by calling &lt;code&gt;dets:first/1&lt;/code&gt; and &lt;code&gt;dets:next/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;first_next&lt;/code&gt; -テーブルは、 &lt;code&gt;dets:first/1&lt;/code&gt; および &lt;code&gt;dets:next/2&lt;/code&gt; を呼び出すことにより、一度に1つのキーをトラバースします。</target>
        </trans-unit>
        <trans-unit id="7974437ce9ad4bbc04754256eae30cd9612e597c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags : integer&lt;/code&gt; :: Flags. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;flags : integer&lt;/code&gt; ::フラグ。例 &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cf65ddbad42b1d629c4b6ca8ef8bcda3605fd18f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; can be used to indicate that the NIF is a &lt;code&gt;&lt;a href=&quot;#dirty_nifs&quot;&gt;dirty NIF&lt;/a&gt;&lt;/code&gt; that is to be executed on a dirty scheduler thread.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; を使用して、NIFがダーティスケジューラスレッドで実行される &lt;code&gt;&lt;a href=&quot;#dirty_nifs&quot;&gt;dirty NIF&lt;/a&gt;&lt;/code&gt; ことを示すことができます。</target>
        </trans-unit>
        <trans-unit id="c858ca62bcf9034a74cbe5df92bfb1e723cebb8d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; indicates the type of object that you are looking for. If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, any kind of object is returned. If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;EI_INT&lt;/code&gt;, &lt;code&gt;EI_FLT&lt;/code&gt;, &lt;code&gt;EI_STR&lt;/code&gt;, or &lt;code&gt;EI_BIN&lt;/code&gt;, then only values of that kind are returned.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は、探しているオブジェクトのタイプを示します。 &lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合、あらゆる種類のオブジェクトが返されます。場合は &lt;code&gt;flags&lt;/code&gt; ある &lt;code&gt;EI_INT&lt;/code&gt; 、 &lt;code&gt;EI_FLT&lt;/code&gt; 、 &lt;code&gt;EI_STR&lt;/code&gt; 、または &lt;code&gt;EI_BIN&lt;/code&gt; 、その種類の唯一の値が返されます。</target>
        </trans-unit>
        <trans-unit id="7026828ff9a171c85e41a7ecb9f0d2892a14feae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flags&lt;/code&gt; indicates the type of the object specified by &lt;code&gt;v&lt;/code&gt;. Flags must be one of &lt;code&gt;EI_INT&lt;/code&gt;, &lt;code&gt;EI_FLT&lt;/code&gt;, &lt;code&gt;EI_STR&lt;/code&gt;, and &lt;code&gt;EI_BIN&lt;/code&gt;, indicating whether &lt;code&gt;v&lt;/code&gt; is &lt;code&gt;int&lt;/code&gt;, &lt;code&gt;double&lt;/code&gt;, &lt;code&gt;char*&lt;/code&gt;, or &lt;code&gt;void*&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; は、 &lt;code&gt;v&lt;/code&gt; で指定されたオブジェクトのタイプを示します。フラグは &lt;code&gt;EI_INT&lt;/code&gt; 、 &lt;code&gt;EI_FLT&lt;/code&gt; 、 &lt;code&gt;EI_STR&lt;/code&gt; 、および &lt;code&gt;EI_BIN&lt;/code&gt; のいずれかでなければならず、 &lt;code&gt;v&lt;/code&gt; が &lt;code&gt;int&lt;/code&gt; 、 &lt;code&gt;double&lt;/code&gt; 、 &lt;code&gt;char*&lt;/code&gt; 、または &lt;code&gt;void*&lt;/code&gt; いずれであるかを示します。</target>
        </trans-unit>
        <trans-unit id="d1184739e754d1651142d3172c8ebc5daed12ca8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flatlength/1&lt;/code&gt; computes the size of the possibly nested list &lt;code&gt;NestedList&lt;/code&gt;, which can contain binaries.</source>
          <target state="translated">&lt;code&gt;flatlength/1&lt;/code&gt; は、バイナリを含むことができるネストされたリスト &lt;code&gt;NestedList&lt;/code&gt; のサイズを計算します。</target>
        </trans-unit>
        <trans-unit id="d74b4f2af562e2114e0b51bbff230bb4388dd991" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flex&lt;/code&gt; -- Headers and libraries are needed to build the flex scanner for the &lt;code&gt;megaco&lt;/code&gt; application on Unix/Linux.</source>
          <target state="translated">&lt;code&gt;flex&lt;/code&gt; - Unix / Linuxで &lt;code&gt;megaco&lt;/code&gt; アプリケーション用のflexスキャナーをビルドするには、ヘッダーとライブラリが必要です。</target>
        </trans-unit>
        <trans-unit id="74fcf3c78913fbf821758d89dc44c494d6454f23" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;flex&lt;/code&gt; will result in the start of the flex scanner with default options.</source>
          <target state="translated">&lt;code&gt;flex&lt;/code&gt; は、デフォルトのオプションでflexスキャナーを開始します。</target>
        </trans-unit>
        <trans-unit id="04d9e76a3083198e0e59eb9805b99dc252f52cde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;float&lt;/code&gt;&lt;code&gt;fun_type&lt;/code&gt;&lt;code&gt;integer&lt;/code&gt;&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;operator&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;float&lt;/code&gt;&lt;code&gt;fun_type&lt;/code&gt;&lt;code&gt;integer&lt;/code&gt;&lt;code&gt;nil&lt;/code&gt;&lt;code&gt;operator&lt;/code&gt;&lt;code&gt;string&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8a2dfdcae3e72af0b397272b11d334a775438639" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold(Function, Acc0, QH)&lt;/code&gt; is equivalent to &lt;code&gt;fold(Function, Acc0, QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fold(Function, Acc0, QH)&lt;/code&gt; は &lt;code&gt;fold(Function, Acc0, QH, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="666d88418010155e1eb303e34c7d07058a4eb795" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fold_literal/1&lt;/code&gt; can be used to revert a node to the normal-form representation.</source>
          <target state="translated">&lt;code&gt;fold_literal/1&lt;/code&gt; を使用して、ノードを通常の形式の表現に戻すことができます。</target>
        </trans-unit>
        <trans-unit id="1c9191670935d46aa880cfa8823a02f644b56726" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl/3&lt;/code&gt; is tail recursive and is usually preferred to &lt;code&gt;foldr/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foldl/3&lt;/code&gt; は末尾再帰であり、通常は &lt;code&gt;foldr/3&lt;/code&gt; よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="04cf8d6f179bfc7ed5f275591a68540638d661bb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl&lt;/code&gt; returns the same term as the last call to &lt;code&gt;Function&lt;/code&gt; returned.</source>
          <target state="translated">&lt;code&gt;foldl&lt;/code&gt; は、最後に返された &lt;code&gt;Function&lt;/code&gt; の呼び出しと同じ用語を返します。</target>
        </trans-unit>
        <trans-unit id="d7383e57980283ddf219642ad6992f8786be273a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl&lt;/code&gt; takes a function of two arguments, an accumulator and a list:</source>
          <target state="translated">&lt;code&gt;foldl&lt;/code&gt; は、アキュムレータとリストの2つの引数の関数を取ります。</target>
        </trans-unit>
        <trans-unit id="a980ecb6db0f72525911b3c138d4624899757f5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foldl&lt;/code&gt; works like a &lt;code&gt;while&lt;/code&gt; loop in an imperative language:</source>
          <target state="translated">&lt;code&gt;foldl&lt;/code&gt; は命令型言語の &lt;code&gt;while&lt;/code&gt; ループのように機能します。</target>
        </trans-unit>
        <trans-unit id="12ddc2a809fd7bd86fa64a14a9b0ed6d0aafdc5f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fop&lt;/code&gt; -- Apache FOP print formatter (requires Java). Can be downloaded from &lt;code&gt;&lt;a href=&quot;http://xmlgraphics.apache.org/fop&quot;&gt;http://xmlgraphics.apache.org/fop&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fop&lt;/code&gt; -Apache FOP印刷フォーマッタ（Javaが必要）。 &lt;code&gt;&lt;a href=&quot;http://xmlgraphics.apache.org/fop&quot;&gt;http://xmlgraphics.apache.org/fop&lt;/a&gt;&lt;/code&gt; からダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="bedcbc2018e10c74468d728a87e55c720602281d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; is evaluated for its side-effect and not its value. &lt;code&gt;foreach(Fun ,L)&lt;/code&gt; calls &lt;code&gt;Fun(X)&lt;/code&gt; for each element &lt;code&gt;X&lt;/code&gt; in &lt;code&gt;L&lt;/code&gt; and the processing occurs in the order that the elements were defined in &lt;code&gt;L&lt;/code&gt;. &lt;code&gt;map&lt;/code&gt; does not define the order in which its elements are processed.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; は、値ではなく副作用について評価されます。 &lt;code&gt;foreach(Fun ,L)&lt;/code&gt; 呼び出し &lt;code&gt;Fun(X)&lt;/code&gt; 各要素のために &lt;code&gt;X&lt;/code&gt; における &lt;code&gt;L&lt;/code&gt; 及び処理要素はで定義された順序で発生する &lt;code&gt;L&lt;/code&gt; 。 &lt;code&gt;map&lt;/code&gt; は、その要素が処理される順序を定義しません。</target>
        </trans-unit>
        <trans-unit id="d703eafa2f7859dc0a44a15d49ee91bb344ed005" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; is used to set up a fixture and optionally tear it down afterwards, repeated for each single one of the specified test sets.</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; は、フィクスチャを設定し、オプションで後でそれを破棄するために使用され、指定されたテストセットの1つ1つに対して繰り返されます。</target>
        </trans-unit>
        <trans-unit id="56fd27fe59112334feaeed6957c8dbff87298ad2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreach&lt;/code&gt; takes a function of one argument and a list of terms:</source>
          <target state="translated">&lt;code&gt;foreach&lt;/code&gt; は、1つの引数と用語のリストの関数を取ります。</target>
        </trans-unit>
        <trans-unit id="4fd5bd17516785e7ede0ee6695159118bb728df0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;foreachx&lt;/code&gt; is like &lt;code&gt;foreach&lt;/code&gt;, but uses a list of pairs, each containing an extra argument &lt;code&gt;X&lt;/code&gt; and an extended instantiator function.</source>
          <target state="translated">&lt;code&gt;foreachx&lt;/code&gt; は &lt;code&gt;foreach&lt;/code&gt; に似ていますが、ペアのリストを使用し、各ペアには追加の引数 &lt;code&gt;X&lt;/code&gt; と拡張インスタンス化関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="5c71dc112956ef23a5424e4aff313183bf49b551" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;forget/1&lt;/code&gt; and &lt;code&gt;forget/2&lt;/code&gt; remove all or some of the &lt;code&gt;&lt;a href=&quot;#user_variable&quot;&gt;user variables&lt;/a&gt;&lt;/code&gt; of an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;forget/1&lt;/code&gt; および &lt;code&gt;forget/2&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;xref server&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#user_variable&quot;&gt;user variables&lt;/a&gt;&lt;/code&gt; のすべてまたは一部を削除します。</target>
        </trans-unit>
        <trans-unit id="f00ae3ff9af5cc09d1f13d0f3746886336de4af2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;form_list&lt;/code&gt;&lt;code&gt;function&lt;/code&gt;&lt;code&gt;warning_marker&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;form_list&lt;/code&gt;&lt;code&gt;function&lt;/code&gt;&lt;code&gt;warning_marker&lt;/code&gt;&lt;code&gt;text&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="610ce2e022ce5a4fd6884f8f718789dd55a1503e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;formatter =&amp;gt; {logger_formatter, DefaultFormatterConfig&lt;/code&gt;}</source>
          <target state="translated">&lt;code&gt;formatter =&amp;gt; {logger_formatter, DefaultFormatterConfig&lt;/code&gt; }</target>
        </trans-unit>
        <trans-unit id="efa356d7300f5cd22345e642cd285b2f01a4f7b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; can also skip the file step and trace to a tracer process that does the profiling in runtime.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、ファイルステップをスキップして、実行時にプロファイリングを行うトレーサープロセスにトレースすることもできます。</target>
        </trans-unit>
        <trans-unit id="3fe51a77f60d52398c4a8e87c24c7b8fa78fef7a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; is a profiling tool that can be used to get a picture of how much processing time different functions consumes and in which processes.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、さまざまな関数がどれだけの処理時間を消費し、どのプロセスで消費したかを把握するために使用できるプロファイリングツールです。</target>
        </trans-unit>
        <trans-unit id="2380ad9f8becb6453300ae34891cf4b2cdc38957" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; is based on trace to file to minimize runtime performance impact. Using &lt;code&gt;fprof&lt;/code&gt; is just a matter of calling a few library functions, see the &lt;code&gt;fprof&lt;/code&gt; manual page in Tools.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、実行時のパフォーマンスへの影響を最小限に抑えるために、ファイルへのトレースに基づいています。 &lt;code&gt;fprof&lt;/code&gt; の使用は、いくつかのライブラリ関数を呼び出すことだけです。ツールの &lt;code&gt;fprof&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="e0651f71599e95f3f7558bb0b476db9a8cb6717d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; measures the execution time for each function, both own time, that is, how much time a function has used for its own execution, and accumulated time, that is, including called functions. The values are displayed per process. You also get to know how many times each function has been called.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、各関数の実行時間を測定します。これは、関数自体の時間、つまり関数がその関数の実行に使用した時間と、呼び出された関数を含む累積時間の両方です。値はプロセスごとに表示されます。また、各関数が呼び出された回数も知ることができます。</target>
        </trans-unit>
        <trans-unit id="ac2c5cd2f94fa13cc2b4ab8dc8bf96fda7723eee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; presents both &lt;strong&gt;own time&lt;/strong&gt; i.e how much time a function has used for its own execution, and &lt;strong&gt;accumulated time&lt;/strong&gt; i.e including called functions. All presented times are collected using trace timestamps. &lt;code&gt;fprof&lt;/code&gt; tries to collect cpu time timestamps, if the host machine OS supports it. Therefore the times may be wallclock times and OS scheduling will randomly strike all called functions in a presumably fair way.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、&lt;strong&gt;自分の時間、&lt;/strong&gt;つまり関数が自分の実行に費やした&lt;strong&gt;時間&lt;/strong&gt;と、&lt;strong&gt;累積時間（&lt;/strong&gt;呼び出された関数を含む）の両方を示します。提示されたすべての時間は、トレースタイムスタンプを使用して収集されます。ホストマシンのOSがサポートしている場合、 &lt;code&gt;fprof&lt;/code&gt; はCPU時間のタイムスタンプを収集しようとします。したがって、時間は実時間である可能性があり、OSスケジューリングは、すべての呼び出された関数をおそらく公平な方法でランダムに実行します。</target>
        </trans-unit>
        <trans-unit id="fe28aa0072f7e8bf4af0009cc2b0fb9c81ff3dde" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; presents wall clock times from the host machine OS, with the assumption that OS scheduling will randomly load the profiled functions in a fair way. Both &lt;strong&gt;own time&lt;/strong&gt; i.e the time used by a function for its own execution, and &lt;strong&gt;accumulated time&lt;/strong&gt; i.e execution time including called functions.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、ホストマシンのOSからの実時間を提示します。OSスケジューリングは、プロファイルされた関数を公平にランダムにロードすると想定しています。どちらも&lt;strong&gt;自分の時間&lt;/strong&gt;、自身の実行のための機能で使用される時間、すなわち、および&lt;strong&gt;累積時間&lt;/strong&gt;と呼ばれる機能を含む、すなわち実行時間。</target>
        </trans-unit>
        <trans-unit id="a92fbd44c76bf7c734ba1bee78aed13fedb670b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; provides the most detailed information about where the program time is spent, but it significantly slows down the program it profiles.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、プログラム時間が費やされている場所に関する最も詳細な情報を提供しますが、プロファイリングするプログラムの速度を大幅に低下させます。</target>
        </trans-unit>
        <trans-unit id="5f19df80da559208071940bf6f95e75083056945" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fprof&lt;/code&gt; uses tracing with timestamps to collect profiling data. Therfore there is no need for special compilation of any module to be profiled.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; は、タイムスタンプによるトレースを使用して、プロファイリングデータを収集します。したがって、プロファイルするモジュールを特別にコンパイルする必要はありません。</target>
        </trans-unit>
        <trans-unit id="e277f356c9acf9d949db5fc2d6cccc75c8f7d1e3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;freed&lt;/code&gt; is the length of the freelist, where blocks are placed when they are released by &lt;code&gt;erl_free_term()&lt;/code&gt; and &lt;code&gt;erl_free_compound()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;freed&lt;/code&gt; はフリーリストの長さで、ブロックは &lt;code&gt;erl_free_term()&lt;/code&gt; および &lt;code&gt;erl_free_compound()&lt;/code&gt; によって解放されたときに配置されます。</target>
        </trans-unit>
        <trans-unit id="e1e8867e117c12deea9b78559ed6b7640546dad9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from : string&lt;/code&gt; :: Process ID or Port ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from : string&lt;/code&gt; ::プロセスIDまたはポートID。例 &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a127c73f210bc87afb69376ea85cedf158139fee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from : string&lt;/code&gt; :: Process ID. Ex. &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;from : string&lt;/code&gt; ::プロセスID。例 &lt;code&gt;&quot;&amp;lt;0.131.0&amp;gt;&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cef5c56cbd60fbf9774a4484f7312c970e9fc9f9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;from_term&lt;/code&gt; can be used for creating atomic or ordered sets. The only purpose of such a set is that of later building unordered sets, as all functions in this module that &lt;strong&gt;do&lt;/strong&gt; anything operate on unordered sets. Creating unordered sets from a collection of ordered sets can be the way to go if the ordered sets are big and one does not want to waste heap by rebuilding the elements of the unordered set. The following example shows that a set can be built &quot;layer by layer&quot;:</source>
          <target state="translated">&lt;code&gt;from_term&lt;/code&gt; は、アトミックセットまたは順序付きセットの作成に使用できます。そのようなセットの唯一の目的は、このモジュールのすべての関数が順序付けられていないセットを操作するため、後で順序付けられて&lt;strong&gt;い&lt;/strong&gt;ないセットを作成することです。順序付けられたセットのコレクションから順序付けられていないセットを作成することは、順序付けられたセットが大きく、順序付けられていないセットの要素を再構築してヒープを無駄にしたくない場合に適しています。次の例は、セットを「レイヤーごと」に構築できることを示しています。</target>
        </trans-unit>
        <trans-unit id="670549e6667bb262241b0a2307b88d0687f24a61" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun fresh_crl/2&lt;/code&gt; will be used as input option &lt;code&gt;update_crl&lt;/code&gt; to &lt;code&gt;public_key:pkix_crls_validate/3 &lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fun fresh_crl/2&lt;/code&gt; は、 &lt;code&gt;public_key:pkix_crls_validate/3 &lt;/code&gt; への入力オプション &lt;code&gt;update_crl&lt;/code&gt; として使用されます</target>
        </trans-unit>
        <trans-unit id="5f43d0c2eeca9964a6809b3f352521aa472473ee" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun fresh_crl/2&lt;/code&gt; will be used as input option &lt;code&gt;update_crl&lt;/code&gt; to &lt;code&gt;public_key:pkix_crls_validate/3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;fun fresh_crl/2&lt;/code&gt; は、 &lt;code&gt;public_key:pkix_crls_validate/3&lt;/code&gt; への入力オプション &lt;code&gt;update_crl&lt;/code&gt; として使用されます</target>
        </trans-unit>
        <trans-unit id="9ddcb04653f095ae99c208679aa62928da9bbca4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;fun&lt;/code&gt; is the name of the function to run.</source>
          <target state="translated">&lt;code&gt;fun&lt;/code&gt; は実行する関数の名前です。</target>
        </trans-unit>
        <trans-unit id="bbead72e2d93c2b28399e3cd53d75a097b878521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;funcs&lt;/code&gt; is a static array of function descriptors for all the implemented NIFs in this library.</source>
          <target state="translated">&lt;code&gt;funcs&lt;/code&gt; は、このライブラリに実装されているすべてのNIFの関数記述子の静的配列です。</target>
        </trans-unit>
        <trans-unit id="caba8665f73b66e1d73b83a0e84d50c336b865da" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genErr&lt;/code&gt;(SNMPv1)</source>
          <target state="translated">&lt;code&gt;genErr&lt;/code&gt;(SNMPv1)</target>
        </trans-unit>
        <trans-unit id="088bc3d713ad96f8f563cfc0d235b8f6b27c13b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genErr&lt;/code&gt;. Used if an error occurred. Note that this should be an internal processing error, e.g. a caused by a programing fault somewhere. If some column does not exist, use &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; or &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;genErr&lt;/code&gt; 。エラーが発生した場合に使用されます。これは内部処理エラーであることに注意してください。たとえば、どこかでプログラミング障害が発生したことが原因です。一部の列が存在しない場合は、 &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; または &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c4b15564b3f657fea0a7a4683b8b9183417b2490" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genErr&lt;/code&gt;. Used if an error occurred. Note, this should be an internal processing error, e.g. a caused by a programing fault somewhere. If the variable does not exist, use &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; or &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;genErr&lt;/code&gt; 。エラーが発生した場合に使用されます。これは内部処理エラーであることに注意してください。たとえば、どこかでプログラミング障害が原因で発生したものです。変数が存在しない場合は、 &lt;code&gt;{noValue, noSuchName}&lt;/code&gt; または &lt;code&gt;{noValue, noSuchInstance}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="99733570345779e7a0d224131d24856ca6591748" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_element()&lt;/code&gt; will produce one of two instructions depending on &lt;code&gt;Index&lt;/code&gt;. If &lt;code&gt;Index&lt;/code&gt; is an integer in the range from 1 up to the maximum tuple size, the instruction &lt;code&gt;i_fast_element/2&lt;/code&gt; will be produced, otherwise the instruction &lt;code&gt;i_element/4&lt;/code&gt; will be produced. The corresponding specific instructions are:</source>
          <target state="translated">&lt;code&gt;gen_element()&lt;/code&gt; は、 &lt;code&gt;Index&lt;/code&gt; 応じて2つの命令のいずれかを生成します。 &lt;code&gt;Index&lt;/code&gt; が1から最大タプルサイズまでの範囲の整数である場合、命令 &lt;code&gt;i_fast_element/2&lt;/code&gt; が生成されます。それ以外の場合、命令 &lt;code&gt;i_element/4&lt;/code&gt; が生成されます。対応する特定の手順は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="daa48225a7f95c221293572ba86a3622a59538be" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_event(3)&lt;/code&gt;, &lt;code&gt;logger(3)&lt;/code&gt;, &lt;code&gt;log_mf_h(3)&lt;/code&gt;, &lt;code&gt;kernel(6)&lt;/code&gt;, &lt;code&gt;sasl(6)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;gen_event(3)&lt;/code&gt; 、 &lt;code&gt;logger(3)&lt;/code&gt; 、 &lt;code&gt;log_mf_h(3)&lt;/code&gt; 、 &lt;code&gt;kernel(6)&lt;/code&gt; 、 &lt;code&gt;sasl(6)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c4c26a8d6d446889b7679693876dc59c6aa2cace" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_event:start_link&lt;/code&gt; must be used if the event manager is part of a supervision tree, that is, started by a supervisor. There is another function, &lt;code&gt;gen_event:start&lt;/code&gt;, to start a standalone event manager, that is, an event manager that is not part of a supervision tree.</source>
          <target state="translated">&lt;code&gt;gen_event:start_link&lt;/code&gt; は、イベントマネージャが監視ツリーの一部である場合、つまり、スーパーバイザによって開始された場合に使用する必要があります。スタンドアロンイベントマネージャー、つまり監視ツリーの一部ではないイベントマネージャーを起動するための別の関数 &lt;code&gt;gen_event:start&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="25ea09c2ac3919a4e18aa05330e97be17e7e4960" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_fsm:_/_&lt;/code&gt; (use the 'gen_statem' module instead)</source>
          <target state="translated">&lt;code&gt;gen_fsm:_/_&lt;/code&gt; （代わりに「gen_statem」モジュールを使用してください）</target>
        </trans-unit>
        <trans-unit id="c3326920226e31e863ef987e5e66516c9a795a98" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_server:start_link&lt;/code&gt; is synchronous. It does not return until the &lt;code&gt;gen_server&lt;/code&gt; has been initialized and is ready to receive requests.</source>
          <target state="translated">&lt;code&gt;gen_server:start_link&lt;/code&gt; は同期です。 &lt;code&gt;gen_server&lt;/code&gt; が初期化され、リクエストを受信する準備ができるまで戻りません。</target>
        </trans-unit>
        <trans-unit id="fec974a8ca4f720c2183784b14d9eeffe9f4c01b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_server:start_link&lt;/code&gt; must be used if the &lt;code&gt;gen_server&lt;/code&gt; is part of a supervision tree, that is, started by a supervisor. There is another function, &lt;code&gt;gen_server:start&lt;/code&gt;, to start a standalone &lt;code&gt;gen_server&lt;/code&gt;, that is, a &lt;code&gt;gen_server&lt;/code&gt; that is not part of a supervision tree.</source>
          <target state="translated">&lt;code&gt;gen_server:start_link&lt;/code&gt; は、 &lt;code&gt;gen_server&lt;/code&gt; が監視ツリーの一部である場合、つまりスーパーバイザによって起動されている場合に使用する必要があります。スタンドアロンの &lt;code&gt;gen_server&lt;/code&gt; 、つまり監視ツリーの一部ではない &lt;code&gt;gen_server&lt;/code&gt; を起動するための別の関数 &lt;code&gt;gen_server:start&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="69c3808d97812c478604c1ee7338f86c0e5166ce" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_statem&lt;/code&gt; has got the same features that &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; had and adds some really useful:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; にはgen_fsmと同じ機能があり、いくつかの本当に便利な機能が &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; ています。</target>
        </trans-unit>
        <trans-unit id="7b7677dfa28038792b14524f84d7e0b361703437" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_statem&lt;/code&gt; provides a generic state machine behaviour and replaces its predecessor &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; since Erlang/OTP 20.0.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、一般的なステートマシンの動作を提供し、Erlang / OTP 20.0以降の前身の &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; を置き換えます。</target>
        </trans-unit>
        <trans-unit id="58107f82c391f9cd10e5810da1d82cfe707c7339" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gen_statem&lt;/code&gt; provides a generic state machine behaviour that for new code replaces its predecessor &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; since Erlang/OTP 20.0. The &lt;code&gt;gen_fsm&lt;/code&gt; behaviour remains in OTP &quot;as is&quot;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、Erlang / OTP 20.0以降、新しいコードの前の &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; を置き換える一般的なステートマシンの動作を提供します。 &lt;code&gt;gen_fsm&lt;/code&gt; の動作は、「そのまま」OTPに残っています。</target>
        </trans-unit>
        <trans-unit id="61ccb3852aed23a92daa802791e43eaacbbbc927" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;genop.tab&lt;/code&gt; has the following definition:</source>
          <target state="translated">&lt;code&gt;genop.tab&lt;/code&gt; の定義は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="557d1ee0311f9528cc524cb7b1ba37c350007737" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_debug/3&lt;/code&gt; is deprecated since it returns data of an internal type only useful for debugging.</source>
          <target state="translated">&lt;code&gt;get_debug/3&lt;/code&gt; は、デバッグにのみ役立つ内部型のデータを返すため、非推奨です。</target>
        </trans-unit>
        <trans-unit id="a66592831b022c6187fbf41f64b27f39b86141fc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;get_user/2, get_user/3&lt;/code&gt;, and &lt;code&gt;get_user/4&lt;/code&gt; each returns an &lt;code&gt;httpd_user&lt;/code&gt; record containing the userdata for a specific user. If the user cannot be found, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned. When &lt;code&gt;get_user/2&lt;/code&gt; is called, options &lt;code&gt;Port&lt;/code&gt; and &lt;code&gt;Dir&lt;/code&gt; are mandatory.</source>
          <target state="translated">&lt;code&gt;get_user/2, get_user/3&lt;/code&gt; 、および &lt;code&gt;get_user/4&lt;/code&gt; は、それぞれ特定のユーザーのユーザーデータを含む &lt;code&gt;httpd_user&lt;/code&gt; レコードを返します。ユーザーが見つからない場合は、 &lt;code&gt;{error, Reason}&lt;/code&gt; が返されます。 &lt;code&gt;get_user/2&lt;/code&gt; が呼び出されるとき、オプション &lt;code&gt;Port&lt;/code&gt; および &lt;code&gt;Dir&lt;/code&gt; は必須です。</target>
        </trans-unit>
        <trans-unit id="e27858e682235d2210b717885d84526ff21837cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getstat(Socket)&lt;/code&gt; is equivalent to &lt;code&gt;getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_dvi, send_max, send_oct])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getstat(Socket)&lt;/code&gt; は &lt;code&gt;getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_dvi, send_max, send_oct])&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9765ff26da8caeb0d9e9d99441ca7db79e0d184e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;getstat(Socket)&lt;/code&gt; is equivalent to &lt;code&gt;getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_pend, send_max, send_oct])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;getstat(Socket)&lt;/code&gt; は、 &lt;code&gt;getstat(Socket, [recv_avg, recv_cnt, recv_dvi, recv_max, recv_oct, send_avg, send_cnt, send_pend, send_max, send_oct])&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="982cff1d1cf0bd8b04cb3522a543b231f993a363" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;gf&lt;/code&gt; (good fit)</source>
          <target state="translated">&lt;code&gt;gf&lt;/code&gt; （ぴったり）</target>
        </trans-unit>
        <trans-unit id="994c8be6a654ef85767135d61bce7835d49034dd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;global&lt;/code&gt; manual page in Kernel</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; カーネルのグローバルマニュアルページ</target>
        </trans-unit>
        <trans-unit id="b2e6d5d11db36f7553eadc07fb64579b6abc300f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handle_connect/3&lt;/code&gt; (with &lt;code&gt;Extra&lt;/code&gt;) can also be called as a result of a call to the &lt;code&gt;&lt;a href=&quot;megaco#connect&quot;&gt;megaco:connect/5&lt;/a&gt;&lt;/code&gt; function (if that function is called with the &lt;code&gt;Extra&lt;/code&gt; argument different than &lt;code&gt;ignore_extra&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;handle_connect/3&lt;/code&gt; （ &lt;code&gt;Extra&lt;/code&gt; 付き）は、 &lt;code&gt;&lt;a href=&quot;megaco#connect&quot;&gt;megaco:connect/5&lt;/a&gt;&lt;/code&gt; 関数の呼び出しの結果として呼び出すこともできます（その関数が &lt;code&gt;ignore_extra&lt;/code&gt; とは異なる &lt;code&gt;Extra&lt;/code&gt; 引数で呼び出された場合）。</target>
        </trans-unit>
        <trans-unit id="ae6028bcc62cde51d474be425c9dc7e8b6e3fcb9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;handle_debug&lt;/code&gt; returns an updated debug structure &lt;code&gt;Deb1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;handle_debug&lt;/code&gt; が更新され、デバッグ構造返し &lt;code&gt;Deb1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2644c967c0e4c82c2e1deca1624de9aa881599b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;head&lt;/code&gt; is the new term to be added.</source>
          <target state="translated">&lt;code&gt;head&lt;/code&gt; は、追加される新しい用語です。</target>
        </trans-unit>
        <trans-unit id="3a24a5b08e442f4a933596f4d876eec4e71ed413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heap : integer&lt;/code&gt; :: Young heap word size. Ex. &lt;code&gt;233&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;heap : integer&lt;/code&gt; ::若いヒープのワードサイズ。例 &lt;code&gt;233&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="68732f44924e2380dcf4ce13c8cf3802ce686c88" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;heart&lt;/code&gt; waits for &lt;code&gt;S&lt;/code&gt; seconds to let the crash dump file be written. After &lt;code&gt;S&lt;/code&gt; seconds, &lt;code&gt;heart&lt;/code&gt; reboots the runtime system, whether the crash dump file is written or not.</source>
          <target state="translated">&lt;code&gt;heart&lt;/code&gt; は &lt;code&gt;S&lt;/code&gt; 秒間待機して、クラッシュダンプファイルが書き込まれるようにします。 &lt;code&gt;S&lt;/code&gt; 秒後、クラッシュダンプファイルが書き込まれているかどうかにかかわらず、 &lt;code&gt;heart&lt;/code&gt; はランタイムシステムを再起動します。</target>
        </trans-unit>
        <trans-unit id="b0d40b0219f08a0f10b7e507264f269367c19823" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;held_locks&lt;/code&gt;. Returns a list of all locks held by the local Mnesia lock manager.</source>
          <target state="translated">&lt;code&gt;held_locks&lt;/code&gt; 。ローカルのMnesiaロックマネージャーが保持しているすべてのロックのリストを返します。</target>
        </trans-unit>
        <trans-unit id="9fad5755a99ed660ab018a9fff07227514ac9eb0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hexlist_to_integer&lt;/code&gt; converts the hexadecimal value of &lt;code&gt;HexString&lt;/code&gt; to an integer.</source>
          <target state="translated">&lt;code&gt;hexlist_to_integer&lt;/code&gt; は、 16進数の値に変換 &lt;code&gt;HexString&lt;/code&gt; を整数に。</target>
        </trans-unit>
        <trans-unit id="2ea1441c110f6e78254e897aca6367ee86b423c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host&lt;/code&gt; is the name of the host on which the node is running.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; は、ノードが実行されているホストの名前です。</target>
        </trans-unit>
        <trans-unit id="6892bcdba176157478bff75149fde20c9a8386b4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_conf_bsdos&lt;/code&gt; (BSDOS host.conf)</source>
          <target state="translated">&lt;code&gt;host_conf_bsdos&lt;/code&gt; （BSDOS host.conf）</target>
        </trans-unit>
        <trans-unit id="b4278631e51356e08db77d683e4b1a8b8c3dcc64" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_conf_freebsd&lt;/code&gt; (FreeBSD host.conf)</source>
          <target state="translated">&lt;code&gt;host_conf_freebsd&lt;/code&gt; （FreeBSD host.conf）</target>
        </trans-unit>
        <trans-unit id="22bf7cfd92c8878929dd2ba3dbfc046fecfa77d0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;host_conf_linux&lt;/code&gt; (Linux host.conf)</source>
          <target state="translated">&lt;code&gt;host_conf_linux&lt;/code&gt; （Linux host.conf）</target>
        </trans-unit>
        <trans-unit id="65041a647fe612fd0f8e59c072f652532fdd0022" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hostname() = string()&lt;/code&gt; representing a host, for example, &quot;foo.bar.com&quot;</source>
          <target state="translated">&lt;code&gt;hostname() = string()&lt;/code&gt; 表すhostname（）= string（）、たとえば、「foo.bar.com」</target>
        </trans-unit>
        <trans-unit id="288a4d5e846f07e37dc5f2adefbad2e128b52c95" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;hosts&lt;/code&gt; (Unix hosts)</source>
          <target state="translated">&lt;code&gt;hosts&lt;/code&gt; （UNIXホスト）</target>
        </trans-unit>
        <trans-unit id="6a12e47c4feb36adb0192532ce73f05287a8e966" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_uri:decode/1&lt;/code&gt; (use uri_string functions instead)</source>
          <target state="translated">&lt;code&gt;http_uri:decode/1&lt;/code&gt; （代わりにuri_string関数を使用）</target>
        </trans-unit>
        <trans-unit id="96331c204582f69f3458bf19cf03c9a1e4e77bcf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_uri:encode/1&lt;/code&gt; (use uri_string functions instead)</source>
          <target state="translated">&lt;code&gt;http_uri:encode/1&lt;/code&gt; （代わりにuri_string関数を使用）</target>
        </trans-unit>
        <trans-unit id="2c0d87142376fc74def3e0e8824d17afe481f483" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_uri:parse/1&lt;/code&gt; (use uri_string functions instead)</source>
          <target state="translated">&lt;code&gt;http_uri:parse/1&lt;/code&gt; （代わりにuri_string関数を使用）</target>
        </trans-unit>
        <trans-unit id="73c564143f341261982efe56c6a922f00a07da21" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_uri:parse/2&lt;/code&gt; (use uri_string functions instead)</source>
          <target state="translated">&lt;code&gt;http_uri:parse/2&lt;/code&gt; （代わりにuri_string関数を使用）</target>
        </trans-unit>
        <trans-unit id="fbd2154a99525dda97a27730bd23f1e4a7215692" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_uri:scheme_defaults/0&lt;/code&gt; (use uri_string functions instead)</source>
          <target state="translated">&lt;code&gt;http_uri:scheme_defaults/0&lt;/code&gt; （代わりにuri_string関数を使用してください）</target>
        </trans-unit>
        <trans-unit id="00a3f3236838b7283ceee66027d32a5f53946422" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;http_version() = string()&lt;/code&gt;, for example, &lt;code&gt;&quot;HTTP/1.1&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;http_version() = string()&lt;/code&gt; 、たとえば &lt;code&gt;&quot;HTTP/1.1&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2d25d33e2da0a72d0ff93e9911356f95756b53bf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;httpd:parse_query/1&lt;/code&gt; (use uri_string:dissect_query/1 instead)</source>
          <target state="translated">&lt;code&gt;httpd:parse_query/1&lt;/code&gt; （代わりにuri_string：dissect_query / 1を使用）</target>
        </trans-unit>
        <trans-unit id="be5d05c29412198b5aad22b78cfb2269d337b20e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;huffman_only&lt;/code&gt; to force Huffman encoding only (no string match)</source>
          <target state="translated">&lt;code&gt;huffman_only&lt;/code&gt; は、ハフマンエンコーディングのみを強制します（文字列の一致なし）。</target>
        </trans-unit>
        <trans-unit id="c26f26d92be7aca623c0670870412d9071dfda8c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i/0&lt;/code&gt; displays system information, listing information about all processes. &lt;code&gt;ni/0&lt;/code&gt; does the same, but for all nodes the network.</source>
          <target state="translated">&lt;code&gt;i/0&lt;/code&gt; はシステム情報を表示し、すべてのプロセスに関する情報をリストします。 &lt;code&gt;ni/0&lt;/code&gt; も同じですが、すべてのノードでネットワークを使用します。</target>
        </trans-unit>
        <trans-unit id="2157bc04ce7af3e437af6d31f4828ed8a0adc829" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; - Tagged literal integer (a SMALL that will fit in one word).</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; -タグ付きリテラル整数（1つの単語に収まる小さな）。</target>
        </trans-unit>
        <trans-unit id="98cee81b37a50ff819fdafa0cc9092a35ea2379d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; - Tagged literal integer.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; -タグ付きリテラル整数。</target>
        </trans-unit>
        <trans-unit id="49316a2a7c9a4624df2f6b8cc030d52912343ecd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; - Tagged literal integer. The default value is 0.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; -タグ付きリテラル整数。デフォルト値は0です。</target>
        </trans-unit>
        <trans-unit id="04504bb8a8501acb73e0a9c43df2d2573c8f8d4b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; is the integer value to assign.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; は割り当てる整数値です。</target>
        </trans-unit>
        <trans-unit id="aeb4e82d784870d44776ba9fe6d7d59e24f25aad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; means that those wrongly encoded filenames are silently ignored.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; はそれらの誤ってエンコードされたファイル名が黙って無視されることを意味します。</target>
        </trans-unit>
        <trans-unit id="49464c713cc0dfa648fc3b3996eac6de20e38891" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;i&lt;/code&gt; means that wrongly encoded filenames are silently ignored.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; は、誤ってエンコードされたファイル名が黙って無視されることを意味します。</target>
        </trans-unit>
        <trans-unit id="8b2c2514743abe13e9d9eb27f4df8d2b692d9190" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id&lt;/code&gt; is used to identify the child specification internally by the supervisor.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; は、監督者が内部的に子仕様を識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5f4e88723c35f3efa703d12f4affbf36cd42c91e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_dsa&lt;/code&gt; and &lt;code&gt;id_dsa.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id_dsa&lt;/code&gt; および &lt;code&gt;id_dsa.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="80ccb7cf09932459281c51978ce18d9ff93af219" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_ecdsa&lt;/code&gt; and &lt;code&gt;id_ecdsa.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id_ecdsa&lt;/code&gt; および &lt;code&gt;id_ecdsa.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="723683dd18200916f32eee524f5fbab106cc4413" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_extensions()&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#StdCertExt&quot;&gt;Standard Certificate Extensions&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#PrivIntExt&quot;&gt;Private Internet Extensions&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#CRLCertExt&quot;&gt;CRL Extensions&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#CRLEntryExt&quot;&gt;CRL Entry Extensions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;id_extensions()&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#StdCertExt&quot;&gt;Standard Certificate Extensions&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#PrivIntExt&quot;&gt;Private Internet Extensions&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#CRLCertExt&quot;&gt;CRL Extensions&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#CRLEntryExt&quot;&gt;CRL Entry Extensions&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4342ad081d7e782eb3338029656546ad8c13fd5d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;id_rsa&lt;/code&gt; and &lt;code&gt;id_rsa.pub&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;id_rsa&lt;/code&gt; および &lt;code&gt;id_rsa.pub&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1d55a9218deae1e2f1a323296767e1091ef421a6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;idle&lt;/code&gt; - The process is no longer executing interpreted code. &lt;code&gt;Info={}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;idle&lt;/code&gt; -プロセスは解釈されたコードを実行していません。 &lt;code&gt;Info={}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8791c890d7607fd8f31f9dd295d174861fc8c67b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;igor:_/_&lt;/code&gt; (use https://github.com/richcarl/igor)</source>
          <target state="translated">&lt;code&gt;igor:_/_&lt;/code&gt; （https://github.com/richcarl/igorを使用）</target>
        </trans-unit>
        <trans-unit id="97edd1f6a72a731415e37a350ebe8714d5866342" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;illegal&lt;/code&gt;. Operation not supported on this record.</source>
          <target state="translated">&lt;code&gt;illegal&lt;/code&gt; 。このレコードでは操作はサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e0d828be650dc009669d1246020f154926727ed7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;in_proj&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;in_proj&lt;/code&gt;:</target>
        </trans-unit>
        <trans-unit id="39587b4554e60c1cfb91fac58c0e382b5990cc79" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include&lt;/code&gt; - Optional. Used for public include files that must be reachable from other applications.</source>
          <target state="translated">&lt;code&gt;include&lt;/code&gt; -オプションを。他のアプリケーションから到達可能でなければならないパブリックインクルードファイルに使用されます。</target>
        </trans-unit>
        <trans-unit id="ff81597bd53cf57baebbb47293e8636989951804" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;include_lib&lt;/code&gt; is similar to &lt;code&gt;include&lt;/code&gt;, but is not to point out an absolute file. Instead, the first path component (possibly after variable substitution) is assumed to be the name of an application.</source>
          <target state="translated">&lt;code&gt;include_lib&lt;/code&gt; は &lt;code&gt;include&lt;/code&gt; に似ていますが、絶対ファイルを指すものではありません。代わりに、最初のパスコンポーネント（おそらく変数の置換後）は、アプリケーションの名前と見なされます。</target>
        </trans-unit>
        <trans-unit id="9744fcb90bd27c49fdf4cfd20fe6418dbb84565a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; is a pointer to an index into the buffer. This parameter is incremented with the size of the term decoded/encoded.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; は、バッファへのインデックスへのポインタです。このパラメーターは、デコード/エンコードされた用語のサイズで増加します。</target>
        </trans-unit>
        <trans-unit id="07a79fcd5e7e859a1bfb106d04905bda27b10a72" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt; is updated to point right after the term in the buffer.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; は、バッファー内の用語の直後を指すように更新されます。</target>
        </trans-unit>
        <trans-unit id="12a90a4197d89466d42f3702437e9477be000759" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;. Returns the list of index position integers for the table.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 。テーブルのインデックス位置整数のリストを返します。</target>
        </trans-unit>
        <trans-unit id="5c289c0b66d867cf14ffd06f2af4e444ec7ce62b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index&lt;/code&gt;. This is a list of attribute names, or integers, which specify the tuple positions on which Mnesia is to build and maintain an extra index table.</source>
          <target state="translated">&lt;code&gt;index&lt;/code&gt; 。これは、属性名または整数のリストであり、Mnesiaが追加のインデックステーブルを構築および維持するタプルの位置を指定します。</target>
        </trans-unit>
        <trans-unit id="299804c67eba285bef67c03d6985c74f5637d6e6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;index_exists&lt;/code&gt;. Some operations cannot be performed on tables with an index.</source>
          <target state="translated">&lt;code&gt;index_exists&lt;/code&gt; 。一部の操作は、インデックスのあるテーブルでは実行できません。</target>
        </trans-unit>
        <trans-unit id="35288bdbfca9c20f1bac1d4269d301589fa492cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet(3)&lt;/code&gt; and &lt;code&gt;gen_tcp(3)&lt;/code&gt;&lt;code&gt;gen_udp(3)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inet(3)&lt;/code&gt; および &lt;code&gt;gen_tcp(3)&lt;/code&gt; &lt;code&gt;gen_udp(3)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5575a48905c6f63a11c7f5d59026e31b283a2521" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet&lt;/code&gt;, which means use a boot server on another machine. The flags &lt;code&gt;-id&lt;/code&gt;, &lt;code&gt;-hosts&lt;/code&gt; and &lt;code&gt;-setcookie&lt;/code&gt; must also be specified.</source>
          <target state="translated">&lt;code&gt;inet&lt;/code&gt; は、別のマシンでブートサーバーを使用することを意味します。フラグ &lt;code&gt;-id&lt;/code&gt; 、 &lt;code&gt;-hosts&lt;/code&gt; 、および &lt;code&gt;-setcookie&lt;/code&gt; も指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="c21f2b2d8202e01c49f29155f77d095834971b99" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet_default_connect_options&lt;/code&gt; can contain a list of default options used for all sockets returned when doing &lt;code&gt;connect&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_default_connect_options&lt;/code&gt; には、 &lt;code&gt;connect&lt;/code&gt; 時に返されるすべてのソケットに使用されるデフォルトオプションのリストを含めることができます。</target>
        </trans-unit>
        <trans-unit id="316be20dad523a52aa6cd2952f69c8c219b175d9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inet_default_listen_options&lt;/code&gt; can contain a list of default options used when issuing a &lt;code&gt;listen&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;inet_default_listen_options&lt;/code&gt; には、 &lt;code&gt;listen&lt;/code&gt; 呼び出しを発行するときに使用されるデフォルトオプションのリストを含めることができます。</target>
        </trans-unit>
        <trans-unit id="ea69b75cb33493fc4da8be9dffb968455023d48e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;infinity | integer()&lt;/code&gt; in milliseconds</source>
          <target state="translated">&lt;code&gt;infinity | integer()&lt;/code&gt; ミリ秒単位のinteger（）</target>
        </trans-unit>
        <trans-unit id="390aff2544ff87cbe26c86eedc5d59d2f18ed009" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;infinity&lt;/code&gt; is the default setting and is used if no value is specified for &lt;code&gt;Retries&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;infinity&lt;/code&gt; はデフォルト設定であり、 &lt;code&gt;Retries&lt;/code&gt; に値が指定されていない場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="7ac01f9afaec9772afec2df62e36b10d97bad25e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;info(QH)&lt;/code&gt; is equivalent to &lt;code&gt;info(QH, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;info(QH)&lt;/code&gt; は &lt;code&gt;info(QH, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="4248d925e08b67df047ba4b4a75b159b2cf6fe92" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;info/1&lt;/code&gt; returns information with the following tags (tags marked with (*) are available in &lt;code&gt;functions&lt;/code&gt; mode only):</source>
          <target state="translated">&lt;code&gt;info/1&lt;/code&gt; は、次のタグが付いた情報を返します（（*）が付いているタグは、 &lt;code&gt;functions&lt;/code&gt; モードでのみ使用できます）。</target>
        </trans-unit>
        <trans-unit id="c38f7b349b67d95eb067d2b2e780bc5bba3e8947" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;info/2&lt;/code&gt; and &lt;code&gt;info/3&lt;/code&gt; return information about all or some of the analyzed modules, applications, releases or library modules of an Xref server. The following information is returned for every analyzed module:</source>
          <target state="translated">&lt;code&gt;info/2&lt;/code&gt; および &lt;code&gt;info/3&lt;/code&gt; は、Xrefサーバーの分析されたモジュール、アプリケーション、リリース、またはライブラリモジュールのすべてまたは一部に関する情報を返します。分析されたモジュールごとに次の情報が返されます。</target>
        </trans-unit>
        <trans-unit id="683651a15dcf311e9b19d04c85dc14a9f375a0f0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;inform&lt;/code&gt; - &lt;code&gt;SnmpInformInfo&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#handle_inform&quot;&gt;handle_inform&lt;/a&gt;&lt;/code&gt; for more info).</source>
          <target state="translated">&lt;code&gt;inform&lt;/code&gt; - &lt;code&gt;SnmpInformInfo&lt;/code&gt; （参照 &lt;code&gt;&lt;a href=&quot;#handle_inform&quot;&gt;handle_inform&lt;/a&gt;&lt;/code&gt; 詳細はを）。</target>
        </trans-unit>
        <trans-unit id="a9fa86f5d62c2a621fc4a7b799f474d4390f1874" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; - Attach when a process for the first time calls an interpreted function.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; -プロセスが初めて解釈された関数を呼び出すときにアタッチします。</target>
        </trans-unit>
        <trans-unit id="680e743ff4e349f082f22cdac8b3c1404575f222" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; also contains functions to restart, reboot, and stop the system.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; には、システムを再起動、再起動、停止する機能も含まれています。</target>
        </trans-unit>
        <trans-unit id="f44b0167958ea67c8ecb5bfdde80f4b2b945aaef" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; interprets some of the flags, see section &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;Command-Line Flags&lt;/a&gt;&lt;/code&gt; below. The remaining flags (&quot;user flags&quot;) and plain arguments are passed to the &lt;code&gt;init&lt;/code&gt; loop and can be retrieved by calling &lt;code&gt;&lt;a href=&quot;#get_arguments-0&quot;&gt;get_arguments/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt; get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; はいくつかのフラグを解釈します。以下のセクション &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;Command-Line Flags&lt;/a&gt;&lt;/code&gt; 参照してください。残りのフラグ（「ユーザーフラグ」）とプレーン引数は &lt;code&gt;init&lt;/code&gt; ループに渡され、それぞれ &lt;code&gt;&lt;a href=&quot;#get_arguments-0&quot;&gt;get_arguments/0&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt; get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="13bb39ed7c33de63e493e1ee19876051fea085ca" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; interprets some of the flags, see section &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;Command-Line Flags&lt;/a&gt;&lt;/code&gt; below. The remaining flags (&quot;user flags&quot;) and plain arguments are passed to the &lt;code&gt;init&lt;/code&gt; loop and can be retrieved by calling &lt;code&gt;&lt;a href=&quot;#get_arguments-0&quot;&gt;get_arguments/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; はいくつかのフラグを解釈します。下記の「 &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;Command-Line Flags&lt;/a&gt;&lt;/code&gt; 参照してください。残りのフラグ（「ユーザーフラグ」）と単純な引数は &lt;code&gt;init&lt;/code&gt; ループに渡され、それぞれ &lt;code&gt;&lt;a href=&quot;#get_arguments-0&quot;&gt;get_arguments/0&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="c38637dc28fce554e15219ccf24908263dea5b60" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; is to be more relaxed and try to find a suitable directory if it can choose from a regular &lt;code&gt;ebin&lt;/code&gt; directory and an &lt;code&gt;ebin&lt;/code&gt; directory in an archive file.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; は、より緩和され、それは通常の中から選択できる場合は、適切なディレクトリを検索しようとすることです &lt;code&gt;ebin&lt;/code&gt; のディレクトリと &lt;code&gt;ebin&lt;/code&gt; のアーカイブファイル内のディレクトリ。</target>
        </trans-unit>
        <trans-unit id="2ee39a96a98454ce0a566fbbb59a17f31c9cbea9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init&lt;/code&gt; reads the boot script, which contains instructions on how to initiate the system. For more information about boot scripts, see &lt;code&gt;script(4)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; は、システムの起動方法に関する指示が含まれているブートスクリプトを読み取ります。ブートスクリプトの詳細については、 &lt;code&gt;script(4)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e45c87967eb337eebf81776beb7aaa4bfa06b39a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_per_suite&lt;/code&gt; and &lt;code&gt;end_per_suite&lt;/code&gt; execute on dedicated Erlang processes, just like the test cases do. The result of these functions is however not included in the test run statistics of successful, failed, and skipped cases.</source>
          <target state="translated">&lt;code&gt;init_per_suite&lt;/code&gt; と &lt;code&gt;end_per_suite&lt;/code&gt; は、テストケースと同じように、専用のErlangプロセスで実行されます。ただし、これらの関数の結果は、成功、失敗、およびスキップされたケースのテスト実行統計には含まれません。</target>
        </trans-unit>
        <trans-unit id="509c1f98726ea5069dd4a7b20c1da24a315239b3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;init_per_testcase/2&lt;/code&gt; and &lt;code&gt;end_per_testcase/2&lt;/code&gt; are always called for each individual test case, no matter if the case belongs to a group or not.</source>
          <target state="translated">&lt;code&gt;init_per_testcase/2&lt;/code&gt; および &lt;code&gt;end_per_testcase/2&lt;/code&gt; は、ケースがグループに属しているかどうかに関係なく、常に個々のテストケースに対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="70b146254b559ead89fe36b3a1611f87764c53ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;instance : integer&lt;/code&gt; :: Allocator instance. Ex. &lt;code&gt;1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;instance : integer&lt;/code&gt; ::アロケータインスタンス。例 &lt;code&gt;1&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4b79a730e545f8e3ff2db30fb944cc1b654c4bbb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int driver_failure(ErlDrvPort port, int error)&lt;/code&gt;&lt;code&gt;int driver_failure_atom(ErlDrvPort port, char *string)&lt;/code&gt;&lt;code&gt;int driver_failure_posix(ErlDrvPort port, int error)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int driver_failure(ErlDrvPort port, int error)&lt;/code&gt; &lt;code&gt;int driver_failure_atom(ErlDrvPort port, char *string)&lt;/code&gt; &lt;code&gt;int driver_failure_posix(ErlDrvPort port, int error)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be1945883a0b8cbfcb490c14db372bb25d9db0b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_connect(ei_cnode* ec, char *nodename)&lt;/code&gt;&lt;code&gt;int ei_xconnect(ei_cnode* ec, Erl_IpAddr adr, char *alivename)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_connect(ei_cnode* ec, char *nodename)&lt;/code&gt; &lt;code&gt;int ei_xconnect(ei_cnode* ec, Erl_IpAddr adr, char *alivename)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="4ff7079026e8f25428ecfb521719ef3ecbd565b2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_connect_init(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation)&lt;/code&gt;&lt;code&gt;int ei_connect_xinit(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_connect_init(ei_cnode* ec, const char* this_node_name, const char *cookie, short creation)&lt;/code&gt; &lt;code&gt;int ei_connect_xinit(ei_cnode* ec, const char *thishostname, const char *thisalivename, const char *thisnodename, Erl_IpAddr thisipaddr, const char *cookie, short creation)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd6698c77f48b2b51843711ba5f7c9f2f29fbe55" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_connect_tmo(ei_cnode* ec, char *nodename, unsigned timeout_ms)&lt;/code&gt;&lt;code&gt;int ei_xconnect_tmo(ei_cnode* ec, Erl_IpAddr adr, char *alivename, unsigned timeout_ms)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_connect_tmo(ei_cnode* ec, char *nodename, unsigned timeout_ms)&lt;/code&gt; &lt;code&gt;int ei_xconnect_tmo(ei_cnode* ec, Erl_IpAddr adr, char *alivename, unsigned timeout_ms)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ca6137afa29c562b89f3c439e6e82ddb851d06ab" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_decode_fun(const char *buf, int *index, erlang_fun *p)&lt;/code&gt;&lt;code&gt;void free_fun(erlang_fun* f)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_decode_fun(const char *buf, int *index, erlang_fun *p)&lt;/code&gt; &lt;code&gt;void free_fun(erlang_fun* f)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eacdedc6fed3d45e90327b3441131b4d5183df0a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_atom(char *buf, int *index, const char *p)&lt;/code&gt;&lt;code&gt;int ei_encode_atom_len(char *buf, int *index, const char *p, int len)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom(ei_x_buff* x, const char *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom_len(ei_x_buff* x, const char *p, int len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_atom(char *buf, int *index, const char *p)&lt;/code&gt; &lt;code&gt;int ei_encode_atom_len(char *buf, int *index, const char *p, int len)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom(ei_x_buff* x, const char *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom_len(ei_x_buff* x, const char *p, int len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="be30a51c472ad623c20f08691eaa3cb3b6a3fd49" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_atom_as(char *buf, int *index, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;&lt;code&gt;int ei_encode_atom_len_as(char *buf, int *index, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom_as(ei_x_buff* x, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;&lt;code&gt;int ei_x_encode_atom_len_as(ei_x_buff* x, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_atom_as(char *buf, int *index, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt; &lt;code&gt;int ei_encode_atom_len_as(char *buf, int *index, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom_as(ei_x_buff* x, const char *p, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt; &lt;code&gt;int ei_x_encode_atom_len_as(ei_x_buff* x, const char *p, int len, erlang_char_encoding from_enc, erlang_char_encoding to_enc)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3ea13f554194e5458f1b6b02dd68627201ffe404" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_bignum(char *buf, int *index, mpz_t obj)&lt;/code&gt;&lt;code&gt;int ei_x_encode_bignum(ei_x_buff *x, mpz_t obj)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_bignum(char *buf, int *index, mpz_t obj)&lt;/code&gt; &lt;code&gt;int ei_x_encode_bignum(ei_x_buff *x, mpz_t obj)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="48bf8d9396606ef33a48249f42efdab728cb1da7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_binary(char *buf, int *index, const void *p, long len)&lt;/code&gt;&lt;code&gt;int ei_x_encode_binary(ei_x_buff* x, const void *p, long len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_binary(char *buf, int *index, const void *p, long len)&lt;/code&gt; &lt;code&gt;int ei_x_encode_binary(ei_x_buff* x, const void *p, long len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2036bf25dd701ed737d16a5b650b8201a78fa88f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_boolean(char *buf, int *index, int p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_boolean(ei_x_buff* x, int p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_boolean(char *buf, int *index, int p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_boolean(ei_x_buff* x, int p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7bea77c7872775d24efe304b06dab54aafb9fe2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_char(char *buf, int *index, char p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_char(ei_x_buff* x, char p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_char(char *buf, int *index, char p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_char(ei_x_buff* x, char p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e7a307beceb96b6b11795cc5d766ff3b85d63f5e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_double(char *buf, int *index, double p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_double(ei_x_buff* x, double p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_double(char *buf, int *index, double p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_double(ei_x_buff* x, double p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="46bb642408497ffc04bfcca020474f0aa1fecd11" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_empty_list(char* buf, int* index)&lt;/code&gt;&lt;code&gt;int ei_x_encode_empty_list(ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_empty_list(char* buf, int* index)&lt;/code&gt; &lt;code&gt;int ei_x_encode_empty_list(ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8d11f2b7062f3ff5a2ef7070264d5a23834561eb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_fun(char *buf, int *index, const erlang_fun *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_fun(ei_x_buff* x, const erlang_fun* fun)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_fun(char *buf, int *index, const erlang_fun *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_fun(ei_x_buff* x, const erlang_fun* fun)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6f94e9eeb3c7fa27d29242a807c7c2dcdc61aa93" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_list_header(char *buf, int *index, int arity)&lt;/code&gt;&lt;code&gt;int ei_x_encode_list_header(ei_x_buff* x, int arity)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_list_header(char *buf, int *index, int arity)&lt;/code&gt; &lt;code&gt;int ei_x_encode_list_header(ei_x_buff* x, int arity)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="699de4bfe5a5c6b39bb40badc010d9377f47377f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_long(char *buf, int *index, long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_long(ei_x_buff* x, long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_long(char *buf, int *index, long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_long(ei_x_buff* x, long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="6d5ceb8605c9a0883944a415416a2c549942dbba" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_longlong(char *buf, int *index, long long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_longlong(ei_x_buff* x, long long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_longlong(char *buf, int *index, long long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_longlong(ei_x_buff* x, long long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd56ee0ea342ac9f86cdfde930e73cae153464b8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_map_header(char *buf, int *index, int arity)&lt;/code&gt;&lt;code&gt;int ei_x_encode_map_header(ei_x_buff* x, int arity)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_map_header(char *buf, int *index, int arity)&lt;/code&gt; &lt;code&gt;int ei_x_encode_map_header(ei_x_buff* x, int arity)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cc14f613a1608fff8e0bf6ca396586b812bcd8cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_pid(char *buf, int *index, const erlang_pid *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_pid(ei_x_buff* x, const erlang_pid *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_pid(char *buf, int *index, const erlang_pid *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_pid(ei_x_buff* x, const erlang_pid *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e44f4b6b918ff2e63fef2cea2444b864243aeb86" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_port(char *buf, int *index, const erlang_port *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_port(ei_x_buff* x, const erlang_port *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_port(char *buf, int *index, const erlang_port *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_port(ei_x_buff* x, const erlang_port *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="688c30a81e6d6b45df50fc30788fa09ac0e7f0d7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_ref(char *buf, int *index, const erlang_ref *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_ref(ei_x_buff* x, const erlang_ref *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_ref(char *buf, int *index, const erlang_ref *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_ref(ei_x_buff* x, const erlang_ref *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5f8310f88f6d74915d49b6ec786895f64af370f7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_string(char *buf, int *index, const char *p)&lt;/code&gt;&lt;code&gt;int ei_encode_string_len(char *buf, int *index, const char *p, int len)&lt;/code&gt;&lt;code&gt;int ei_x_encode_string(ei_x_buff* x, const char *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_string_len(ei_x_buff* x, const char* s, int len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_string(char *buf, int *index, const char *p)&lt;/code&gt; &lt;code&gt;int ei_encode_string_len(char *buf, int *index, const char *p, int len)&lt;/code&gt; &lt;code&gt;int ei_x_encode_string(ei_x_buff* x, const char *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_string_len(ei_x_buff* x, const char* s, int len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="469a7cbf204d88ae986d22602c11633064a3c9c3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_term(char *buf, int *index, void *t)&lt;/code&gt;&lt;code&gt;int ei_x_encode_term(ei_x_buff* x, void *t)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_term(char *buf, int *index, void *t)&lt;/code&gt; &lt;code&gt;int ei_x_encode_term(ei_x_buff* x, void *t)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14ed282e7e4dfaa0b843938fb67c0e25efaa762f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_trace(char *buf, int *index, const erlang_trace *p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_trace(ei_x_buff* x, const erlang_trace *p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_trace(char *buf, int *index, const erlang_trace *p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_trace(ei_x_buff* x, const erlang_trace *p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="112c190f71f80d6eaa400a3238d67dbb40922af4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_tuple_header(char *buf, int *index, int arity)&lt;/code&gt;&lt;code&gt;int ei_x_encode_tuple_header(ei_x_buff* x, int arity)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_tuple_header(char *buf, int *index, int arity)&lt;/code&gt; &lt;code&gt;int ei_x_encode_tuple_header(ei_x_buff* x, int arity)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dfb532bb3bb9ce2ee09e4eccf39e41e279f1006b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_ulong(char *buf, int *index, unsigned long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_ulong(ei_x_buff* x, unsigned long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_ulong(char *buf, int *index, unsigned long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_ulong(ei_x_buff* x, unsigned long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="019fbefed5026bbc34c9e6979be2537cc256dedc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_ulonglong(char *buf, int *index, unsigned long long p)&lt;/code&gt;&lt;code&gt;int ei_x_encode_ulonglong(ei_x_buff* x, unsigned long long p)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_ulonglong(char *buf, int *index, unsigned long long p)&lt;/code&gt; &lt;code&gt;int ei_x_encode_ulonglong(ei_x_buff* x, unsigned long long p)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fe8ceacaa74ce9f2c063d93033c64c5bbe89b4c4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_encode_version(char *buf, int *index)&lt;/code&gt;&lt;code&gt;int ei_x_encode_version(ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_encode_version(char *buf, int *index)&lt;/code&gt; &lt;code&gt;int ei_x_encode_version(ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d45c8a894d11b0d401c9fdc952eed8c7dcbbe3ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_get_tracelevel(void)&lt;/code&gt;&lt;code&gt;void ei_set_tracelevel(int level)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_get_tracelevel(void)&lt;/code&gt; &lt;code&gt;void ei_set_tracelevel(int level)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7bdd2328e271f8df92925f8466c03928cd7c9ce2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_print_term(FILE* fp, const char* buf, int* index)&lt;/code&gt;&lt;code&gt;int ei_s_print_term(char** s, const char* buf, int* index)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_print_term(FILE* fp, const char* buf, int* index)&lt;/code&gt; &lt;code&gt;int ei_s_print_term(char** s, const char* buf, int* index)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d8b0d3f6a8e08a1c738ae68ed805b1083c6c33ae" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_receive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt;&lt;code&gt;int ei_xreceive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_receive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt; &lt;code&gt;int ei_xreceive_msg(int fd, erlang_msg* msg, ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="331943191dca2a990a6af07c55b4f10f92c87292" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_receive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned imeout_ms)&lt;/code&gt;&lt;code&gt;int ei_xreceive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned timeout_ms)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_receive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned imeout_ms)&lt;/code&gt; &lt;code&gt;int ei_xreceive_msg_tmo(int fd, erlang_msg* msg, ei_x_buff* x, unsigned timeout_ms)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d91019c4a2f8ebf576c7bb98050381bb000e354b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_rpc(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, ei_x_buff *x)&lt;/code&gt;&lt;code&gt;int ei_rpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen)&lt;/code&gt;&lt;code&gt;int ei_rpc_from(ei_cnode *ec, int fd, int timeout, erlang_msg *msg, ei_x_buff *x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_rpc(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen, ei_x_buff *x)&lt;/code&gt; &lt;code&gt;int ei_rpc_to(ei_cnode *ec, int fd, char *mod, char *fun, const char *argbuf, int argbuflen)&lt;/code&gt; &lt;code&gt;int ei_rpc_from(ei_cnode *ec, int fd, int timeout, erlang_msg *msg, ei_x_buff *x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="445fe207224c1f75197df7f04fb651ad9b3ba503" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_x_append(ei_x_buff* x, const ei_x_buff* x2)&lt;/code&gt;&lt;code&gt;int ei_x_append_buf(ei_x_buff* x, const char* buf, int len)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_x_append(ei_x_buff* x, const ei_x_buff* x2)&lt;/code&gt; &lt;code&gt;int ei_x_append_buf(ei_x_buff* x, const char* buf, int len)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e10a620f8be39d23877b27b41dac3c2f350b5bd1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_x_format(ei_x_buff* x, const char* fmt, ...)&lt;/code&gt;&lt;code&gt;int ei_x_format_wo_ver(ei_x_buff* x, const char *fmt, ... )&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_x_format(ei_x_buff* x, const char* fmt, ...)&lt;/code&gt; &lt;code&gt;int ei_x_format_wo_ver(ei_x_buff* x, const char *fmt, ... )&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="018d33e014f50ed74ec24117fc37109e44069386" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int ei_x_new(ei_x_buff* x)&lt;/code&gt;&lt;code&gt;int ei_x_new_with_version(ei_x_buff* x)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int ei_x_new(ei_x_buff* x)&lt;/code&gt; &lt;code&gt;int ei_x_new_with_version(ei_x_buff* x)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="26837ab721255d45129355ee69a318ca6bc81fdf" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erl_connect(node)&lt;/code&gt;&lt;code&gt;int erl_xconnect(addr, alive)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int erl_connect(node)&lt;/code&gt; &lt;code&gt;int erl_xconnect(addr, alive)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="588463869a047e0b1d0a80c0d79ae9d660ecdeed" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erl_connect_init(number, cookie, creation)&lt;/code&gt;&lt;code&gt;int erl_connect_xinit(host, alive, node, addr, cookie, creation)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int erl_connect_init(number, cookie, creation)&lt;/code&gt; &lt;code&gt;int erl_connect_xinit(host, alive, node, addr, cookie, creation)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d16cf527dc908f09cd0db2c343fe6cb66a87d133" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erl_encode(term, bufp)&lt;/code&gt;&lt;code&gt;int erl_encode_buf(term, bufpp)&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;int erl_encode(term, bufp)&lt;/code&gt; &lt;code&gt;int erl_encode_buf(term, bufpp)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="9263f40e8480e04fa5fa3f5ff60d94950a63e9a0" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erts_thr_progress_has_reached(ErtsThrPrgrVal val)&lt;/code&gt; - Returns a non zero value when we have reached the thread progress value passed as argument. That is, when a non zero value is returned the operation has completed.</source>
          <target state="translated">&lt;code&gt;int erts_thr_progress_has_reached(ErtsThrPrgrVal val)&lt;/code&gt; -引数として渡されたスレッドの進行値に達すると、ゼロ以外の値を返します。つまり、ゼロ以外の値が返されると、操作は完了します。</target>
        </trans-unit>
        <trans-unit id="091eb4001a0f7fceef16f511c9060e2ebbcc35ec" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erts_thr_progress_leader_update(ErtsSchedulerData *esdp)&lt;/code&gt; - Leader update thread progress.</source>
          <target state="translated">&lt;code&gt;int erts_thr_progress_leader_update(ErtsSchedulerData *esdp)&lt;/code&gt; -リーダー更新スレッドの進行状況。</target>
        </trans-unit>
        <trans-unit id="462c63a4ed13af7b707b53d375928668c0e7a6c1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;int erts_thr_progress_update(ErtsSchedulerData *esdp)&lt;/code&gt; - Update thread progress. If a non zero value is returned &lt;code&gt;erts_thr_progress_leader_update()&lt;/code&gt; has to be called without any locks held.</source>
          <target state="translated">&lt;code&gt;int erts_thr_progress_update(ErtsSchedulerData *esdp)&lt;/code&gt; -スレッドの進行状況を更新します。ゼロ以外の値が返された場合は、ロックを保持せずに &lt;code&gt;erts_thr_progress_leader_update()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="393a2472afa0171614a18b904106ac786c500efc" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;integer()&lt;/code&gt; - Number of one byte (8 bits) levels. N.B. This is currently converted into the previous config. Example: &lt;code&gt;3&lt;/code&gt; (&lt;code&gt;[8,8,8]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;integer()&lt;/code&gt; -1バイト（8ビット）レベルの数。注意：これは現在、以前の設定に変換されています。例： &lt;code&gt;3&lt;/code&gt; （ &lt;code&gt;[8,8,8]&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="e4e0259d3ce79d7297bd5ad1a52aae25ce5f1430" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;integer(X)&lt;/code&gt; detail level activates tracing of all calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt; whose detail level argument is lesser than &lt;code&gt;X&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;integer(X)&lt;/code&gt; 詳細レベルは、詳細レベル引数が &lt;code&gt;X&lt;/code&gt; より小さい &lt;code&gt;et:trace_me/4,5&lt;/code&gt; へのすべての呼び出しのトレースをアクティブにします。</target>
        </trans-unit>
        <trans-unit id="519fcfd30d77b691b28ee08274f947ef51b3eb02" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;integer_to_hexlist/1&lt;/code&gt; returns a string representing &lt;code&gt;Number&lt;/code&gt; in a hexadecimal form.</source>
          <target state="translated">&lt;code&gt;integer_to_hexlist/1&lt;/code&gt; は、 &lt;code&gt;Number&lt;/code&gt; を16進数形式で表す文字列を返します。</target>
        </trans-unit>
        <trans-unit id="c0459dd21410bb32e2caa968faae901be29d26e9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;intensity&lt;/code&gt; and &lt;code&gt;period&lt;/code&gt; specify the &lt;code&gt;&lt;a href=&quot;#max_intensity&quot;&gt;maximum restart intensity&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;intensity&lt;/code&gt; と &lt;code&gt;period&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#max_intensity&quot;&gt;maximum restart intensity&lt;/a&gt;&lt;/code&gt; 指定します。</target>
        </trans-unit>
        <trans-unit id="46527714a6429d4df4c47ed4aab217c62a3d2892" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;internal&lt;/code&gt; events can only be generated by the state machine itself through the &lt;strong&gt;transition action&lt;/strong&gt;&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;next_event&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; イベントは、&lt;strong&gt;遷移アクション&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;next_event&lt;/a&gt;&lt;/code&gt; を介してステートマシン自体によってのみ生成できます。</target>
        </trans-unit>
        <trans-unit id="b9da6792d5381c0374b3b5c0b0e01146f242648e" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;internal&lt;/code&gt; events can only be generated by the state machine itself through the state transition action &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;next_event&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;internal&lt;/code&gt; イベントは、状態遷移アクション &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;next_event&lt;/a&gt;&lt;/code&gt; を通じて状態マシン自体によってのみ生成できます。</target>
        </trans-unit>
        <trans-unit id="8a7d239e8d3cb2e72f50f4cade02fce7a687ae65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;iov&lt;/code&gt; points to an array of &lt;code&gt;struct iovec&lt;/code&gt; structures of length &lt;code&gt;iovcnt&lt;/code&gt; containing data to write to the socket. On success, this callback should set &lt;code&gt;*len&lt;/code&gt; to the amount of bytes successfully written on the socket.</source>
          <target state="translated">&lt;code&gt;iov&lt;/code&gt; の配列を指し &lt;code&gt;struct iovec&lt;/code&gt; の長さの構造 &lt;code&gt;iovcnt&lt;/code&gt; データを含むソケットに書き込みます。成功すると、このコールバックは &lt;code&gt;*len&lt;/code&gt; をソケットに正常に書き込まれたバイト数に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="052da6b8c13b64c4de1be8693701070b4456a3d2" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;ip_address()&lt;/code&gt; = See the &lt;code&gt;inet(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">&lt;code&gt;ip_address()&lt;/code&gt; = カーネルの &lt;code&gt;inet(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="b5835dad8c17e1f58f4d2781070f73e4945c9a65" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_atom/2&lt;/code&gt; may either execute the next instruction (if the second operand is an atom) or branch to the failure label.</source>
          <target state="translated">&lt;code&gt;is_atom/2&lt;/code&gt; は、次の命令を実行するか（2番目のオペランドがアトムの場合）、障害ラベルに分岐します。</target>
        </trans-unit>
        <trans-unit id="c0046752b0b4756ae41d5ca00e232c64f7ab738d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_constant/1&lt;/code&gt; used to be a BIF a long time ago. The transformation replaces the call with the &lt;code&gt;too_old_compiler&lt;/code&gt; instruction which will produce a nicer error message than the default error would be for a missing guard BIF.</source>
          <target state="translated">&lt;code&gt;is_constant/1&lt;/code&gt; はずっと前にBIFでした。変換により、呼び出しが &lt;code&gt;too_old_compiler&lt;/code&gt; 命令に置き換えられ、ガードBIFが欠落している場合のデフォルトエラーよりも適切なエラーメッセージが生成されます。</target>
        </trans-unit>
        <trans-unit id="d15106f06513f1512bae59b8a4c904bfbb4c82cb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_map/1&lt;/code&gt; in the &lt;code&gt;erlang&lt;/code&gt; module</source>
          <target state="translated">&lt;code&gt;is_map/1&lt;/code&gt; で &lt;code&gt;erlang&lt;/code&gt; モジュール</target>
        </trans-unit>
        <trans-unit id="eab25ca15c5ebd96d89c5f3cb640e10dfbf70da8" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;is_running&lt;/code&gt;. Returns &lt;code&gt;yes&lt;/code&gt; or &lt;code&gt;no&lt;/code&gt; to indicate if Mnesia is running. It can also return &lt;code&gt;starting&lt;/code&gt; or &lt;code&gt;stopping&lt;/code&gt;. Can be called even if Mnesia is not yet running.</source>
          <target state="translated">&lt;code&gt;is_running&lt;/code&gt; 。 &lt;code&gt;yes&lt;/code&gt; または &lt;code&gt;no&lt;/code&gt; を返し、Mnesiaが実行されているかどうかを示します。また、 &lt;code&gt;starting&lt;/code&gt; または &lt;code&gt;stopping&lt;/code&gt; 返すこともできます。Mnesiaがまだ実行されていなくても呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="36157fcb0b539cd15c0344674ee0083b52581be6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;j&lt;/code&gt; - A failure label (combination of &lt;code&gt;f&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt;). If the branch target 0, an exception will be raised if instruction fails, otherwise control will be transfered to the target address.</source>
          <target state="translated">&lt;code&gt;j&lt;/code&gt; -障害ラベル（ &lt;code&gt;f&lt;/code&gt; と &lt;code&gt;p&lt;/code&gt; の組み合わせ）。分岐ターゲットが0の場合、命令が失敗すると例外が発生します。失敗しない場合、制御はターゲットアドレスに転送されます。</target>
        </trans-unit>
        <trans-unit id="73a2aaebe1ce4bdf955a1e3b11d15de568e9d387" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;j&lt;/code&gt; - Any label. Equivalent to &lt;code&gt;fp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;j&lt;/code&gt; -任意のラベル。 &lt;code&gt;fp&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="a6c9c5ad44a97f8df6363aceff3226b122c56ac3" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsone&lt;/code&gt; can be chosen instead of &lt;code&gt;jsx&lt;/code&gt; by providing the option &lt;code&gt;{d,jsone}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;jsone&lt;/code&gt; は、代わりに選択することができる &lt;code&gt;jsx&lt;/code&gt; オプションを提供することにより、 &lt;code&gt;{d,jsone}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bd1ce3b344837ea8d7ca0107102f53d72beec6c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;jsx&lt;/code&gt; which currently is the default.</source>
          <target state="translated">&lt;code&gt;jsx&lt;/code&gt; 現在デフォルトであるjsx。</target>
        </trans-unit>
        <trans-unit id="69fb27581ce389de2b4ec69e225d611abc764ffd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keep_alive&lt;/code&gt; can be specified per connection, if necessary. For details, see &lt;code&gt;&lt;a href=&quot;unix_telnet&quot;&gt;unix_telnet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keep_alive&lt;/code&gt; は、必要に応じて接続ごとに指定できます。詳細については、 &lt;code&gt;&lt;a href=&quot;unix_telnet&quot;&gt;unix_telnet&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="72bc07236831563c46426c5fd4ba3421fe698394" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a &lt;code&gt;NULL&lt;/code&gt;-terminated string containing the name of the environment variable.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; は、環境変数の名前を含む &lt;code&gt;NULL&lt;/code&gt; で終了する文字列です。</target>
        </trans-unit>
        <trans-unit id="ab8db5d02ae63708074e0b1525ec52f65485b9b1" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a pointer to a thread-specific data key variable.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; は、スレッド固有のデータキー変数へのポインターです。</target>
        </trans-unit>
        <trans-unit id="cf8d00475384e1c2d6c03e977342f7a4663a8b9c" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a thread-specific data key to destroy.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; は、破棄するスレッド固有のデータキーです。</target>
        </trans-unit>
        <trans-unit id="49d61a7c51ab43fc47076647d598e74cb1b133fd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is a thread-specific data key.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; はスレッド固有のデータキーです。</target>
        </trans-unit>
        <trans-unit id="51e80ce3f022ac7ddd37c33041f888f7a50e185f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the name of the object to look up.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; は、検索するオブジェクトの名前です。</target>
        </trans-unit>
        <trans-unit id="66ac280c75c00617aac9e9816ad94d4f5a24d431" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the name of the object to mark.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; は、マークするオブジェクトの名前です。</target>
        </trans-unit>
        <trans-unit id="726bf6575c9ae5d90f62fcec7dc7845829be36b5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the object name.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; はオブジェクト名です。</target>
        </trans-unit>
        <trans-unit id="76519f7a0036105d1631983a266c6debeb747f04" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;key&lt;/code&gt; is the object to remove.</source>
          <target state="translated">&lt;code&gt;key&lt;/code&gt; は削除するオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="e8cd1655c5d738878c7393018e2810925863b821" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keycheck(KeyPos, FileName)&lt;/code&gt; is equivalent to &lt;code&gt;keycheck(KeyPos, [FileName], [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keycheck(KeyPos, FileName)&lt;/code&gt; は &lt;code&gt;keycheck(KeyPos, [FileName], [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="b153c6268ac50c18ffa73eb104aea23685d06fcb" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keymerge(KeyPos, FileNames, Output)&lt;/code&gt; is equivalent to &lt;code&gt;keymerge(KeyPos, FileNames, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keymerge(KeyPos, FileNames, Output)&lt;/code&gt; は、 &lt;code&gt;keymerge(KeyPos, FileNames, Output, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="83f036648bec0822f57409f769b8c88456b350cd" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keysort(KeyPos, QH1)&lt;/code&gt; is equivalent to &lt;code&gt;keysort(KeyPos, QH1, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keysort(KeyPos, QH1)&lt;/code&gt; は &lt;code&gt;keysort(KeyPos, QH1, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="77feb0f99a79d08708c49d907392d66a805a7e24" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keysort(N, FileName)&lt;/code&gt; is equivalent to &lt;code&gt;keysort(N, [FileName], FileName)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keysort(N, FileName)&lt;/code&gt; は &lt;code&gt;keysort(N, [FileName], FileName)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="b8625b8ba314e33b76213d1ccfea99983f2ec845" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;keysort(N, Input, Output)&lt;/code&gt; is equivalent to &lt;code&gt;keysort(N, Input, Output, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;keysort(N, Input, Output)&lt;/code&gt; は &lt;code&gt;keysort(N, Input, Output, [])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="0f07ab05f9a848556d1aad520ac884d2eed8199a" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill_after/1&lt;/code&gt; is the same as &lt;code&gt;exit_after(Time, self(), kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill_after/1&lt;/code&gt; は、 &lt;code&gt;exit_after(Time, self(), kill)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="72e34eb6858bc7ffa3f15fb1b75c7afcc44387d4" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kill_after/2&lt;/code&gt; is the same as &lt;code&gt;exit_after(Time, Pid, kill)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill_after/2&lt;/code&gt; は、 &lt;code&gt;exit_after(Time, Pid, kill)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="91e9db6ac63dd2f97d0bf7188e8fe47bd6f8a04f" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;kilo_byte/1&lt;/code&gt; creates a deep list. If &lt;code&gt;list_to_binary/1&lt;/code&gt; is called, the deep list can be converted to a binary of 1024 bytes:</source>
          <target state="translated">&lt;code&gt;kilo_byte/1&lt;/code&gt; は深いリストを作成します。場合 &lt;code&gt;list_to_binary/1&lt;/code&gt; が呼ばれ、深いリストは1024バイトのバイナリに変換することができます。</target>
        </trans-unit>
        <trans-unit id="4b3d2622b5b29785f605dcc3f054e23e1d7bd95d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt; - Floating point register number.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; -浮動小数点レジスタ番号。</target>
        </trans-unit>
        <trans-unit id="d8495a1b0e5b472664b80d02a0f2270674ec85e5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt; - Floating point register number. (Can be packed with other operands.)</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; -浮動小数点レジスタ番号。（他のオペランドと一緒にパックできます。）</target>
        </trans-unit>
        <trans-unit id="24dec384bacc51c34304958e9c5ab406404ef7c7" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;l&lt;/code&gt; - Floating point register number. The default value is 0.</source>
          <target state="translated">&lt;code&gt;l&lt;/code&gt; -浮動小数点レジスタ番号。デフォルト値は0です。</target>
        </trans-unit>
        <trans-unit id="f538b0c5d5f89b037756df3ff6ce4f215129573b" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lclose(Log)&lt;/code&gt; is equivalent to &lt;code&gt;lclose(Log,&amp;nbsp;node())&lt;/code&gt;. See also &lt;code&gt;&lt;a href=&quot;#close_1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;lclose(Log)&lt;/code&gt; は &lt;code&gt;lclose(Log,&amp;nbsp;node())&lt;/code&gt; と同等です。 &lt;code&gt;&lt;a href=&quot;#close_1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="a67b1c8d7dbf4d841c943dc2946b4f7a2cdfea71" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lclose/1&lt;/code&gt; closes a local log or an individual distributed log on the current node.</source>
          <target state="translated">&lt;code&gt;lclose/1&lt;/code&gt; は、現在のノードのローカルログまたは個々の分散ログを閉じます。</target>
        </trans-unit>
        <trans-unit id="9b103b7c84a1c1813d67554045b1245a8aec0af6" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lclose/2&lt;/code&gt; closes an individual distributed log on the specified node if the node is not the current one.</source>
          <target state="translated">&lt;code&gt;lclose/2&lt;/code&gt; は、ノードが現在のノードでない場合、指定されたノードの個々の分散ログを閉じます。</target>
        </trans-unit>
        <trans-unit id="fb237ae7bc4ddc5bd78c0bc0383db41484ff959d" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lcnt&lt;/code&gt; is used to find contention points in the Erlang Run-Time System's internal locking mechanisms. It is useful when looking for bottlenecks in interaction between process, port, ets tables and other entities that can be run in parallel.</source>
          <target state="translated">&lt;code&gt;lcnt&lt;/code&gt; は、Erlangランタイムシステムの内部ロックメカニズムで競合ポイントを見つけるために使用されます。これは、プロセス、ポート、etsテーブル、および並行して実行できる他のエンティティ間の相互作用におけるボトルネックを探すときに役立ちます。</target>
        </trans-unit>
        <trans-unit id="331dee2c2ee873ecad7db7a741ab79842dccabfa" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;lcnt&lt;/code&gt; is used to profile interactions inbetween entities that run in parallel. For example if you have a process that all other processes in the system needs to interact with (maybe it has some global configuration), then &lt;code&gt;lcnt&lt;/code&gt; can be used to figure out if the interaction with that process is a problem.</source>
          <target state="translated">&lt;code&gt;lcnt&lt;/code&gt; は、並行して実行されるエンティティ間の相互作用をプロファイルするために使用されます。たとえば、システム内の他のすべてのプロセスと対話する必要があるプロセスがある場合（おそらくグローバル構成がある）、 &lt;code&gt;lcnt&lt;/code&gt; を使用して、そのプロセスとの対話が問題かどうかを判断できます。</target>
        </trans-unit>
        <trans-unit id="25ce4f2b1f1e06d9949ea3fe11c52d35da9121ad" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;len&lt;/code&gt; is the length of &lt;code&gt;string&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; は &lt;code&gt;string&lt;/code&gt; の長さです。</target>
        </trans-unit>
        <trans-unit id="de4624d2d9acec6c37f781ba7bd5df326bc8a4a5" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;len&lt;/code&gt; is the length of the message in bytes.</source>
          <target state="translated">&lt;code&gt;len&lt;/code&gt; は、バイト単位のメッセージの長さです。</target>
        </trans-unit>
        <trans-unit id="98f88a9115e57d8f3563b9d731c267d124cd7da9" translate="yes" xml:space="preserve">
          <source>&lt;code&gt;length : integer&lt;/code&gt; :: Async queue length. Ex. &lt;code&gt;-1&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;length : integer&lt;/code&gt; ::非同期キューの長さ。例 &lt;code&gt;-1&lt;/code&gt;</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
