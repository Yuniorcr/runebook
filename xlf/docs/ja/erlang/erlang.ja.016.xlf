<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="33021c4d2e740795d3bd4e50eb4005b5e9b65004" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Server&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Server&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8d6fbf1ee4330162ef7915e22881ffb97d3c7897" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Set process metadata&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プロセスのメタデータを設定する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a3da11fdab83d805a1407ddec00dd08a67d4f4a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Set&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Set&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="daf40fc89c7d898023eac54e914a7bf954e5a126" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Setting Match and Recursion Limits&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一致および再帰制限の設定&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6dd93b09e29d97c5d29af55049c7ec46330e42d6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Severe Previous Design Issues&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;以前の重大な設計上の問題&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da19223a7d97c1d1f9cb91a46150cf0b7cb51330" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Shell&lt;/strong&gt; - Interactive shell. By default the Erlang daemon runs the Erlang shell. The shell can be customized by providing your own read-eval-print loop. You can also provide your own Command-Line Interface (CLI) implementation, but that is much more work.</source>
          <target state="translated">&lt;strong&gt;シェル&lt;/strong&gt; -対話型シェル。デフォルトでは、ErlangデーモンはErlangシェルを実行します。独自のread-eval-printループを提供することで、シェルをカスタマイズできます。独自のコマンドラインインターフェイス（CLI）実装を提供することもできますが、それははるかに多くの作業です。</target>
        </trans-unit>
        <trans-unit id="f78065730aeb7f2130a8df72e0e89da9aa7101af" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Signaling&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Signaling&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f3fa2ca310abca50941e1c2b6888e1ca12083d4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Signature&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Signature&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cbb57ed0fb35ab36565316ddf8bb68be5b7e8891" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Signedness&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Signedness&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d337d850195f54d028525bcb6891c8718e801583" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Simple Assertions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;単純なアサーション&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b6e38e3067db2a5bc07d635f8d93eb7aafa351db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Since&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Since&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d373323b07a3b8a66c1810a9de81e364ae0cdd3e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Single-step&lt;/strong&gt; traversal one key at at time, using &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#last-1&quot;&gt;last/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#prev-2&quot;&gt;prev/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#last-1&quot;&gt;last/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#prev-2&quot;&gt;prev/2&lt;/a&gt;&lt;/code&gt; を使用して、一度に1つのキーを&lt;strong&gt;シングルステップ&lt;/strong&gt;トラバーサルします。</target>
        </trans-unit>
        <trans-unit id="3e7da60c8c160e698ea1143cab96353ea049f142" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Single-use tickets&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;使い捨てチケット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5447b3976bbcbd02029a5ed125b8743fba9fd4b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Size of Result&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;結果のサイズ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="202518b4b4fb4b4547ec8c395c1ec68ff347c495" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Size&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Size&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa2c5d254d359304475f2fbf06a0d6a8bfe4d050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sk&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sk&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a423dec6b0201077e928e8ab27b10cee77a9ff45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Slot&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Slot&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4573b306ec545c11a5a84ef12eb265889e998862" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sm&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Sm&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="99a802c49a87a14d67d4fd681b9af4666a9733b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Small Common Test Suite&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;小さな共通テストスイート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="737ddcbed028ff9d25cd929153ac870ea5ba41b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;So&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;So&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c637d12f6ecf4464b71367d5343725197a3ce9f6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Solution&lt;/strong&gt;: We can use &quot;combined instructions&quot;. Combined instructions are combined from instruction fragments. The bulk of the code can be shared.</source>
          <target state="translated">&lt;strong&gt;解決策&lt;/strong&gt;：「組み合わせた命令」を使用できます。結合された命令は、命令フラグメントから結合されます。コードの大部分は共有できます。</target>
        </trans-unit>
        <trans-unit id="deb3d686618ddb4cc04e19d87dc462e46807e4a3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Source code encoding&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ソースコードのエンコーディング&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3735067a29f8f651e10b6ab1a3b075c6a0a27916" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Special return values:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;特別な戻り値：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="51e339ca37ea17adc43605d4dfc58fdeb92a1365" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stack Off&lt;/strong&gt; - Does not save any information about current calls.</source>
          <target state="translated">&lt;strong&gt;スタックオフ&lt;/strong&gt; -現在の通話に関する情報を保存しません。</target>
        </trans-unit>
        <trans-unit id="15e28d20d8b73a6a40c988211a1f8f41d7d5f631" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stack On, No Tail&lt;/strong&gt; - Saves information about current calls, discarding previous information when a tail recursive call is made.</source>
          <target state="translated">&lt;strong&gt;Stack On、No Tail-&lt;/strong&gt;現在の呼び出しに関する情報を保存し、末尾の再帰呼び出しが行われたときに以前の情報を破棄します。</target>
        </trans-unit>
        <trans-unit id="6431d47b6c66a44ced7b3b11e71aff75c8c07669" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stack On, Tail&lt;/strong&gt; - Saves information about all current calls.</source>
          <target state="translated">&lt;strong&gt;Stack On、Tail-&lt;/strong&gt;現在のすべての通話に関する情報を保存します。</target>
        </trans-unit>
        <trans-unit id="5098076363ce495db815317a361b71ef86df9186" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Stack Trace&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スタックトレース&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f484cbd3ef87804b65bc3d9aa568980db7051592" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Standard value&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;標準値&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bbff2058968cfd5d999eb8879f8588a780d644c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Starting the port mapper daemon&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ポートマッパーデーモンの開始&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96feec8e62583efbe2e35c2de3bdb0a5dd96e389" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;State enter calls&lt;/strong&gt; are also handled by the event handler and have slightly different arguments. See section &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;状態入力呼び出し&lt;/strong&gt;もイベントハンドラーによって処理され、引数が少し異なります。セクション &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3e5d6254c752dd2b7c767d48ede50d3fb4bd8a57" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;State&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;State&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b4b8ab42c7bde727ec563dddfd4046a400074a6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1 (server):&lt;/strong&gt; Start the server:</source>
          <target state="translated">&lt;strong&gt;ステップ1（サーバー）：&lt;/strong&gt;サーバーを起動します：</target>
        </trans-unit>
        <trans-unit id="a30ea7193efb3c3b007b26334b0f7360c2121bfe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1)&lt;/strong&gt; Create a target system as described in System Principles of the first version &lt;code&gt;&quot;A&quot;&lt;/code&gt; of &lt;code&gt;ch_rel&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;release_structure#ch_rel&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt;. This time &lt;code&gt;sys.config&lt;/code&gt; must be included in the release package. If no configuration is needed, the file is to contain the empty list:</source>
          <target state="translated">&lt;strong&gt;ステップ1）&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;release_structure#ch_rel&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt; からの &lt;code&gt;ch_rel&lt;/code&gt; の最初のバージョン &lt;code&gt;&quot;A&quot;&lt;/code&gt; のシステム原則で説明されているように、ターゲットシステムを作成します。今回は、 &lt;code&gt;sys.config&lt;/code&gt; をリリースパッケージに含める必要があります。設定が不要な場合、ファイルには空のリストが含まれます。</target>
        </trans-unit>
        <trans-unit id="0ce1bb7d2d2cf7ac48377fe217c5768f37114f47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1)&lt;/strong&gt; Edit the code for &lt;code&gt;prim_sup&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ1）&lt;/strong&gt; &lt;code&gt;prim_sup&lt;/code&gt; のコードを編集します。</target>
        </trans-unit>
        <trans-unit id="43c31df65ae27f06e02623501e0de2d1074d35ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Compile the C code. This provides the paths to the Erl_Interface include files and libraries, and to the &lt;code&gt;socket&lt;/code&gt; and &lt;code&gt;nsl&lt;/code&gt; libraries:</source>
          <target state="translated">&lt;strong&gt;手順1.&lt;/strong&gt; Cコードをコンパイルします。これにより、Erl_Interfaceインクルードファイルとライブラリ、および &lt;code&gt;socket&lt;/code&gt; と &lt;code&gt;nsl&lt;/code&gt; ライブラリへのパスが提供されます。</target>
        </trans-unit>
        <trans-unit id="7495ace55c71229e8ca2a22043aab94158500475" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Compile the C code. This provides the paths to the include file &lt;code&gt;ei.h&lt;/code&gt;, and also to the library &lt;code&gt;ei&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;手順&lt;/strong&gt;1.Cコードをコンパイルします。これにより、インクルードファイル &lt;code&gt;ei.h&lt;/code&gt; へのパスと、ライブラリ &lt;code&gt;ei&lt;/code&gt; へのパスが提供されます。</target>
        </trans-unit>
        <trans-unit id="0b31e0456d6eca82bdbdbcd01cb8e5e0ef2a498e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Compile the C code. This provides the paths to the include files &lt;code&gt;erl_interface.h&lt;/code&gt; and &lt;code&gt;ei.h&lt;/code&gt;, and also to the libraries &lt;code&gt;erl_interface&lt;/code&gt; and &lt;code&gt;ei&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;手順1.&lt;/strong&gt; Cコードをコンパイルします。これにより、インクルードファイル &lt;code&gt;erl_interface.h&lt;/code&gt; および &lt;code&gt;ei.h&lt;/code&gt; へのパスと、ライブラリ &lt;code&gt;erl_interface&lt;/code&gt; および &lt;code&gt;ei&lt;/code&gt; へのパスが提供されます。</target>
        </trans-unit>
        <trans-unit id="bc3d6a348c08b1f2b87c30f375e7685869461d2c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Compile the C code:</source>
          <target state="translated">&lt;strong&gt;ステップ1.&lt;/strong&gt; Cコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="64e0bab34088397e5fe2037812965e19621276e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Create a &lt;code&gt;.rel&lt;/code&gt; file (see the &lt;code&gt;rel(4)&lt;/code&gt; manual page in SASL), which specifies the ERTS version and lists all applications that are to be included in the new basic target system. An example is the following &lt;code&gt;mysystem.rel&lt;/code&gt; file:</source>
          <target state="translated">&lt;strong&gt;ステップ1. &lt;/strong&gt; &lt;code&gt;.rel&lt;/code&gt; ファイルを作成し（SASL の &lt;code&gt;rel(4)&lt;/code&gt; マニュアルページを参照）、ERTSバージョンを指定し、新しい基本ターゲットシステムに含めるすべてのアプリケーションをリストします。例は、次の &lt;code&gt;mysystem.rel&lt;/code&gt; ファイルです。</target>
        </trans-unit>
        <trans-unit id="6df0768a64a10df7540f3e81f698b34d375180d7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Create a sample file to be used for the transfer:</source>
          <target state="translated">&lt;strong&gt;ステップ1.&lt;/strong&gt;転送に使用するサンプルファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="0b40c9fa1559498270d14a922032c0b6d52cb848" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Create the file &lt;code&gt;.rel&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ1. &lt;/strong&gt; &lt;code&gt;.rel&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="2b89394a2cff640b7175db59c54628014a44df24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Start Debugger by calling &lt;code&gt;debugger:start()&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ1. &lt;/strong&gt; &lt;code&gt;debugger:start()&lt;/code&gt; を呼び出してデバッガーを開始します。</target>
        </trans-unit>
        <trans-unit id="a27c20d56ac5d8c333c474a6f3869dcca596f9c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; To run the example without root privileges, generate new keys and host keys:</source>
          <target state="translated">&lt;strong&gt;手順1.&lt;/strong&gt; root権限なしで例を実行するには、新しいキーとホストキーを生成します。</target>
        </trans-unit>
        <trans-unit id="898e8bba1eb7b9234386c65292fdefeeb4779463" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Unpack the release:</source>
          <target state="translated">&lt;strong&gt;手順1.&lt;/strong&gt;リリースを開梱し&lt;strong&gt;ます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a7311848f8c5207aa682c8e91e28a359bd0ad69c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1.&lt;/strong&gt; Write one function that represents the common features of these functions.</source>
          <target state="translated">&lt;strong&gt;ステップ1.&lt;/strong&gt;これらの関数の共通機能を表す関数を1つ記述します。</target>
        </trans-unit>
        <trans-unit id="5e9c4059a2c0b144f7a877cde4edc5e41c0c8d34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 10 (client):&lt;/strong&gt; Receive a new session ticket:</source>
          <target state="translated">&lt;strong&gt;ステップ10（クライアント）：&lt;/strong&gt;新しいセッションチケットを受け取り&lt;strong&gt;ます&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="cbe08d1bb7ec52e854545bcb7190ad320a9f2c98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 10:&lt;/strong&gt; Flush the shell message queue to see that the message was sent on the client side:</source>
          <target state="translated">&lt;strong&gt;ステップ10：&lt;/strong&gt;シェルメッセージキューをフラッシュして、メッセージがクライアント側で送信されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="48b72c8eec3463b8a58b2b5b846d975360c1fb3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 11 (server):&lt;/strong&gt; Accept a new connection on the server:</source>
          <target state="translated">&lt;strong&gt;手順11（サーバー）：サーバーで&lt;/strong&gt;新しい接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="a15535fe07fd6cc70079502abdb95e44c6963c03" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 12 (client):&lt;/strong&gt; Initiate a new connection to the server with the session ticket received in Step 10:</source>
          <target state="translated">&lt;strong&gt;ステップ12（クライアント）：&lt;/strong&gt;ステップ10で受信したセッションチケットを使用して、サーバーへの新しい接続を開始します。</target>
        </trans-unit>
        <trans-unit id="9d3ee95e722cd26cda0fd4c4dae9aef44a9c7ad6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 13 (server):&lt;/strong&gt; Start the handshake:</source>
          <target state="translated">&lt;strong&gt;ステップ13（サーバー）：&lt;/strong&gt;ハンドシェイクを開始し&lt;strong&gt;ます&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="5f9ae1429ed7ed441215c55793ee70439ca749fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Build boot scripts including the SSL application.</source>
          <target state="translated">&lt;strong&gt;ステップ1：&lt;/strong&gt; SSLアプリケーションを含むブートスクリプトをビルドします。</target>
        </trans-unit>
        <trans-unit id="3c110a05d021e031eca01bf9910d832026fcd91c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Decide the name of the function for the exclusive decode.</source>
          <target state="translated">&lt;strong&gt;手順1：&lt;/strong&gt;排他デコードの関数の名前を決定します。</target>
        </trans-unit>
        <trans-unit id="8fcd29b5b01974aa1f2f35dbbf9895e3bdf9d59e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Include the following instructions in the configuration file:</source>
          <target state="translated">&lt;strong&gt;手順1：&lt;/strong&gt;構成ファイルに次の指示を含めます。</target>
        </trans-unit>
        <trans-unit id="ea6f9a3d80273bb27bdc3390bcfe876d17c4b5fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Start an Erlang session and specify a &lt;code&gt;Mnesia&lt;/code&gt; directory for the database:</source>
          <target state="translated">&lt;strong&gt;ステップ1：&lt;/strong&gt; Erlangセッションを開始し、データベースの &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリを指定します。</target>
        </trans-unit>
        <trans-unit id="3618def85fbdd98a93b2e2c5eb1ee418490c5454" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Start the server side:</source>
          <target state="translated">&lt;strong&gt;ステップ1：&lt;/strong&gt;サーバー側を起動します。</target>
        </trans-unit>
        <trans-unit id="b2a637efafc033b370982d1ffb1c6fb45a2b60b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; Starts with type &lt;code&gt;Window&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ1：&lt;/strong&gt;タイプ &lt;code&gt;Window&lt;/code&gt; で始まります。</target>
        </trans-unit>
        <trans-unit id="e46697a62bea14d3db6cf2ef6f75ec72b2c9a87f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; The Erlang system is started from the UNIX prompt with a flag &lt;code&gt;-mnesia dir '&quot;/tmp/funky&quot;'&lt;/code&gt;, which indicates in which directory to store the data.</source>
          <target state="translated">&lt;strong&gt;ステップ1：&lt;/strong&gt; Erlangシステムは、UNIXプロンプトからフラグ &lt;code&gt;-mnesia dir '&quot;/tmp/funky&quot;'&lt;/code&gt; で開始されます。これは、データを格納するディレクトリを示します。</target>
        </trans-unit>
        <trans-unit id="53be774077cfeece7ca90e27340933eafed1a9ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1:&lt;/strong&gt; The initial value of the employees salary is, for example, 5. Process P1 starts to execute, reads the employee record, and adds 2 to the salary.</source>
          <target state="translated">&lt;strong&gt;ステップ1：&lt;/strong&gt;従業員の給与の初期値は、たとえば5です。プロセスP1が実行を開始し、従業員レコードを読み取り、給与に2を加算します。</target>
        </trans-unit>
        <trans-unit id="04efe2d941589f6fdb86e7d33d378a402c86c727" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 1&lt;/strong&gt;) A release is created as described in &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ1&lt;/strong&gt;）リリースは、 &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt; 説明されているように作成されます。</target>
        </trans-unit>
        <trans-unit id="01e99de94aecc9d7948d4f842359bd2a6b875e78" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2 (client):&lt;/strong&gt; Start the client and connect to server:</source>
          <target state="translated">&lt;strong&gt;ステップ2（クライアント）：&lt;/strong&gt;クライアントを起動し、サーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="6bd4bfa483a8b43805b2ccf81b83973672a2b522" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2)&lt;/strong&gt; Edit the &lt;code&gt;.app&lt;/code&gt; file for &lt;code&gt;prim_app&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ2）&lt;/strong&gt; &lt;code&gt;prim_app&lt;/code&gt; の &lt;code&gt;.app&lt;/code&gt; ファイルを編集します。</target>
        </trans-unit>
        <trans-unit id="5f57310dec3444181fcd71cfdf979ac5b527cd79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2)&lt;/strong&gt; Start the system as a simple target system. In reality, it is to be started as an embedded system. However, using &lt;code&gt;erl&lt;/code&gt; with the correct boot script and config file is enough for illustration purposes:</source>
          <target state="translated">&lt;strong&gt;ステップ2）&lt;/strong&gt;システムを単純なターゲットシステムとして起動します。実際には、組み込みシステムとして開始されます。ただし、正しいブートスクリプトと構成ファイルで &lt;code&gt;erl&lt;/code&gt; を使用すれば、説明のために十分です。</target>
        </trans-unit>
        <trans-unit id="57dba853db1895dabb3f770dfd9bd6b5ab1ebf00" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Compile the Erlang code:</source>
          <target state="translated">&lt;strong&gt;ステップ2.&lt;/strong&gt; Erlangコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="85b6977e3b6d1e2883fd88d31dbedd2002c6346c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Create the application upgrade file (see the &lt;code&gt;appup(4)&lt;/code&gt; manual page in SASL) for Pea, for example:</source>
          <target state="translated">&lt;strong&gt;ステップ2.&lt;/strong&gt; Pea用のアプリケーションアップグレードファイルを作成します（SASLの &lt;code&gt;appup(4)&lt;/code&gt; マニュアルページを参照）。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="6951d21d43099f237a22ee8abfdaadf302b33423" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Create the file &lt;code&gt;/tmp/otptest_user/.ssh/authorized_keys&lt;/code&gt; and add the content of &lt;code&gt;/tmp/otptest_user/.ssh/id_rsa.pub&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ2. &lt;/strong&gt; &lt;code&gt;/tmp/otptest_user/.ssh/authorized_keys&lt;/code&gt; ファイルを作成し、/ &lt;code&gt;/tmp/otptest_user/.ssh/id_rsa.pub&lt;/code&gt; / otptest_user / .ssh / id_rsa.pubのコンテンツを追加します。</target>
        </trans-unit>
        <trans-unit id="f157d3defda1dc7f93f72a7518aae45ae5cc78c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Install the release:</source>
          <target state="translated">&lt;strong&gt;ステップ2.&lt;/strong&gt;リリースをインストールします。</target>
        </trans-unit>
        <trans-unit id="de9410d55976d8ec7c5351856dbbf999e6494b61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Parameterize the difference in terms of functions that are passed as arguments to the common function.</source>
          <target state="translated">&lt;strong&gt;ステップ2.&lt;/strong&gt;共通関数に引数として渡される関数の違いをパラメーター化します。</target>
        </trans-unit>
        <trans-unit id="ae29bcafbd2bca1b33322adade59f1a093e0b655" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Select &lt;strong&gt;Module &amp;gt; Interpret...&lt;/strong&gt; in the Monitor window.</source>
          <target state="translated">&lt;strong&gt;ステップ2.&lt;/strong&gt;モニターウィンドウで[ &lt;strong&gt;モジュール]&amp;gt; [解釈...]を&lt;/strong&gt;選択します。</target>
        </trans-unit>
        <trans-unit id="49ef801d7ade6cd3abec4bf994ec23272cbfd6e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Start Erlang and compile the Erlang code:</source>
          <target state="translated">&lt;strong&gt;ステップ2.&lt;/strong&gt; Erlangを起動し、Erlangコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="20ab66426a6a652fdb32b10a10eacea1a32a2430" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Start Erlang/OTP from the directory where the &lt;code&gt;mysystem.rel&lt;/code&gt; file resides:</source>
          <target state="translated">&lt;strong&gt;手順2. &lt;/strong&gt; &lt;code&gt;mysystem.rel&lt;/code&gt; ファイルが存在するディレクトリからErlang / OTPを起動します。</target>
        </trans-unit>
        <trans-unit id="2b14450c7a5b8a8b6c9c6fd4527c12a959f66b02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2.&lt;/strong&gt; Start the TFTP server:</source>
          <target state="translated">&lt;strong&gt;手順2.&lt;/strong&gt; TFTPサーバーを起動します。</target>
        </trans-unit>
        <trans-unit id="41c4affa872c13f24c2a23b0722f76ae2334703e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; A new empty schema is initialized on the local node by evaluating &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema([node()])&lt;/a&gt;&lt;/code&gt;. The schema contains information about the database in general. This is explained in detail later.</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema([node()])&lt;/a&gt;&lt;/code&gt; を評価することにより、ローカルノードで新しい空のスキーマが初期化されます。スキーマには、データベースに関する一般的な情報が含まれています。これについては後で詳しく説明します。</target>
        </trans-unit>
        <trans-unit id="f5662f1134e8084cda3f80da1e8c5e02be005c47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Compile with the additional option &lt;code&gt;asn1config&lt;/code&gt;. The compiler searches for a configuration file with the same name as the ASN.1 specification, but with extension &lt;code&gt;.asn1config&lt;/code&gt;. In the same file you can also provide configuration specifications for exclusive decode. The generated Erlang module has the usual functionality for encode/decode preserved and the specialized decode functionality added.</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt;追加オプション &lt;code&gt;asn1config&lt;/code&gt; でコンパイルします。コンパイラーは、ASN.1仕様と同じ名前で拡張子が &lt;code&gt;.asn1config&lt;/code&gt; の構成ファイルを検索します。同じファイルで、排他的なデコードの構成仕様を提供することもできます。生成されたErlangモジュールには、エンコード/デコードの通常の機能が保持され、特殊なデコード機能が追加されています。</target>
        </trans-unit>
        <trans-unit id="b65e19bb33a7505dba3b8421b7abf12c777c1f72" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Create a TLS listen socket: (To run DTLS add the option {protocol, dtls})</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt; TLSリッスンソケットを作成します:( DTLSを実行するには、オプション{protocol、dtls}を追加します）</target>
        </trans-unit>
        <trans-unit id="d1e28e33d2f4e3480268c5f44ceaf46f4d04a27d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Create a normal TCP listen socket:</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt;通常のTCP待機ソケットを作成します。</target>
        </trans-unit>
        <trans-unit id="b5dc95ab9159edf4042d23578df9f0b69877e883" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Create an TLS listen socket: (To run DTLS add the option {protocol, dtls})</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt; TLSリスンソケットを作成します：（DTLSを実行するには、オプション{protocol、dtls}を追加します）</target>
        </trans-unit>
        <trans-unit id="6f7a4476221cc8620aa282680bc6cf583244a2fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Include the following instructions in a configuration file:</source>
          <target state="translated">&lt;strong&gt;手順2：&lt;/strong&gt;構成ファイルに次の指示を含めます。</target>
        </trans-unit>
        <trans-unit id="d020d1a8dcf4ecca0cab037c1293c601ea5324b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Process P1 is for some reason pre-empted and process P2 has the opportunity to run.</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt;プロセスP1は何らかの理由で先取りされ、プロセスP2は実行する機会があります。</target>
        </trans-unit>
        <trans-unit id="f7e6b23de4e92b4ac733dc3dbd3a0a264cc8ef66" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Specify the distribution module for &lt;code&gt;net_kernel&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt; &lt;code&gt;net_kernel&lt;/code&gt; の配布モジュールを指定します。</target>
        </trans-unit>
        <trans-unit id="558af70e7fed5f972a3d52446a99ce2fddf79514" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Start Erlang and compile the Erlang code:</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt; Erlangを起動し、Erlangコードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="7fc2ac62c48be0dcb50ccbd7e4fd7eae658a5616" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; Takes component &lt;code&gt;status&lt;/code&gt; of &lt;code&gt;Window&lt;/code&gt; that is of type &lt;code&gt;Status&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt;部品取り &lt;code&gt;status&lt;/code&gt; の &lt;code&gt;Window&lt;/code&gt; タイプである &lt;code&gt;Status&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="01d8d42f3f76494ed42bc3d321d01374092489a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2:&lt;/strong&gt; You can inspect the &lt;code&gt;Mnesia&lt;/code&gt; directory to see what files have been created:</source>
          <target state="translated">&lt;strong&gt;ステップ2：&lt;/strong&gt; &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリを調べて、作成されたファイルを確認できます。</target>
        </trans-unit>
        <trans-unit id="d50a9dd8d4f41e810e7b109a05285ff5acd4821e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;) The release is transferred to and installed at target environment. For information of how to install the first target system, see &lt;code&gt;System Principles&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ2&lt;/strong&gt;）リリースがターゲット環境に転送され、インストールされます。最初のターゲットシステムのインストール方法については、「 &lt;code&gt;System Principles&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="479faa75992ec35a4295d22de04f7c77535f7f43" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 2&lt;/strong&gt;) The release is transferred to and installed at target environment. For information of how to install the first target system, see System Principles.</source>
          <target state="translated">&lt;strong&gt;ステップ2&lt;/strong&gt;）リリースがターゲット環境に転送され、インストールされます。最初のターゲットシステムをインストールする方法については、システム原則を参照してください。</target>
        </trans-unit>
        <trans-unit id="d59201975d9cfd7ce2ca11f8a59553414b76c346" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3 (server):&lt;/strong&gt; Start the TLS handshake:</source>
          <target state="translated">&lt;strong&gt;ステップ3（サーバー）：&lt;/strong&gt; TLSハンドシェイクを開始します。</target>
        </trans-unit>
        <trans-unit id="6cbf977b0135eb80cf2dc86f3fccd2199ba8c92f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3)&lt;/strong&gt; Create a new &lt;code&gt;.rel&lt;/code&gt; file, including &lt;code&gt;ch_app&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ3）&lt;/strong&gt; &lt;code&gt;ch_app&lt;/code&gt; を含む新しい &lt;code&gt;.rel&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="a222ae2eea1cf41fbce1506cd7d833ec7403ab52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3)&lt;/strong&gt; In another Erlang shell, generate start scripts and create a release package for the new version &lt;code&gt;&quot;B&quot;&lt;/code&gt;. Remember to include (a possible updated) &lt;code&gt;sys.config&lt;/code&gt; and the &lt;code&gt;relup&lt;/code&gt; file, see &lt;code&gt;&lt;a href=&quot;#relup&quot;&gt;Release Upgrade File&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ3）&lt;/strong&gt;別のErlangシェルで、起動スクリプトを生成し、新しいバージョン &lt;code&gt;&quot;B&quot;&lt;/code&gt; のリリースパッケージを作成します。（可能な更新された） &lt;code&gt;sys.config&lt;/code&gt; と &lt;code&gt;relup&lt;/code&gt; ファイルを含めることを忘れないでください。 &lt;code&gt;&lt;a href=&quot;#relup&quot;&gt;Release Upgrade File&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="7e059ec02a98f57abd72d06e71d689e3d368b944" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Create the target system:</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt;ターゲットシステムを作成します。</target>
        </trans-unit>
        <trans-unit id="aa2e1da08350aab0ecdfdb0f3b96654f720609e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; From the directory where the file &lt;code&gt;mysystem2.rel&lt;/code&gt; resides, start the Erlang/OTP system, giving the path to the new version of Pea:</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt;ファイル &lt;code&gt;mysystem2.rel&lt;/code&gt; が存在するディレクトリから、Erlang / OTPシステムを起動し、新しいバージョンのPeaへのパスを指定します。</target>
        </trans-unit>
        <trans-unit id="55d95503d4768a4b4444eae39037e24f7c3f5ff8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Make the new release permanent:</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt;新しいリリースを永続化します。</target>
        </trans-unit>
        <trans-unit id="ac4ef553a781dfa62d33f0a87fc47b8dbf78ba17" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Run the C node server example with short node names.</source>
          <target state="translated">&lt;strong&gt;手順3.&lt;/strong&gt;短いノード名でCノードサーバーの例を実行します。</target>
        </trans-unit>
        <trans-unit id="f3049cd6d952bdc3c0678546555276c288d89ffd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Run the example:</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt;サンプルを実行します。</target>
        </trans-unit>
        <trans-unit id="4f578829ab600adff7aa7be5a7c4974801aaf9bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Select the appropriate modules from the Interpret Dialog window.</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt; Interpret Dialogウィンドウから適切なモジュールを選択します。</target>
        </trans-unit>
        <trans-unit id="507fde74c4a905b85efe6866ba8ea8f7770da0c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Start the Erlang &lt;code&gt;ssh&lt;/code&gt; daemon:</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt; Erlang &lt;code&gt;ssh&lt;/code&gt; デーモンを開始します。</target>
        </trans-unit>
        <trans-unit id="6b69840c989f4ccbf60956e6a33d274aa714b49a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3.&lt;/strong&gt; Start the TFTP client (in another shell):</source>
          <target state="translated">&lt;strong&gt;ステップ3.&lt;/strong&gt;（別のシェルで）TFTPクライアントを開始します。</target>
        </trans-unit>
        <trans-unit id="b0f5bbf7ad9b8fbcb6a5897fc4e91fbfbcf29d6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Accept client connection:</source>
          <target state="translated">&lt;strong&gt;ステップ3：&lt;/strong&gt;クライアント接続を受け入れる：</target>
        </trans-unit>
        <trans-unit id="57ff42fa49bccb7f9672dc2e083fdfd918304b85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Do a transport accept on the TLS listen socket:</source>
          <target state="translated">&lt;strong&gt;手順3：&lt;/strong&gt; TLSリスンソケットでトランスポート受け入れを実行します。</target>
        </trans-unit>
        <trans-unit id="e032653e4eed10f07d252706ce158f12779d9a5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Process P2 reads the record, adds 3 to the salary, and finally writes a new employee record with the salary set to 8.</source>
          <target state="translated">&lt;strong&gt;ステップ3：&lt;/strong&gt;プロセスP2はレコードを読み取り、3を給与に追加し、最後に給与を8に設定して新しい従業員レコードを書き込みます。</target>
        </trans-unit>
        <trans-unit id="2f4be25535841f1b2f10dc419c3f361d9a2bdec3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Run the example:</source>
          <target state="translated">&lt;strong&gt;ステップ3：&lt;/strong&gt;サンプルを実行します。</target>
        </trans-unit>
        <trans-unit id="30540432644d4f2c2afdb21f2ae3731517c13686" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Specify the security options and other SSL options.</source>
          <target state="translated">&lt;strong&gt;手順3：&lt;/strong&gt;セキュリティオプションとその他のSSLオプションを指定します。</target>
        </trans-unit>
        <trans-unit id="639682eb166f442e810c114182db2568fc80e461" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Start &lt;code&gt;Mnesia&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;ステップ3：&lt;/strong&gt; &lt;code&gt;Mnesia&lt;/code&gt; を起動します。</target>
        </trans-unit>
        <trans-unit id="eb2978bac122e773a807678de754eb68505fc306" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; Takes &lt;strong&gt;actions&lt;/strong&gt; of type &lt;code&gt;Status&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ3：&lt;/strong&gt;テイク&lt;strong&gt;アクション&lt;/strong&gt;タイプの &lt;code&gt;Status&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc038fd29bfef019f9e98e300e3dd53c409e4507" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3:&lt;/strong&gt; The DBMS is started by evaluating &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ3：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;mnesia#start-0&quot;&gt;mnesia:start()&lt;/a&gt;&lt;/code&gt; を評価することにより、DBMSが開始されます。</target>
        </trans-unit>
        <trans-unit id="dbade6330c6c1ba009f72d23a4ba3e61e632f9b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt; Compile with the additional option &lt;code&gt;asn1config&lt;/code&gt;. The compiler searches for a configuration file with the same name as the ASN.1 specification but with extension &lt;code&gt;.asn1config&lt;/code&gt;. This configuration file is not the same as used for compilation of a set of files. See Section &lt;code&gt;&lt;a href=&quot;#UndecodedPart&quot;&gt;Writing an Exclusive Decode Instruction.&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;ステップ3&lt;/strong&gt;追加オプション &lt;code&gt;asn1config&lt;/code&gt; でコンパイルします。コンパイラーは、ASN.1仕様と同じ名前で拡張子が &lt;code&gt;.asn1config&lt;/code&gt; の構成ファイルを検索します。この構成ファイルは、一連のファイルのコンパイルに使用されるものとは異なります。 &lt;code&gt;&lt;a href=&quot;#UndecodedPart&quot;&gt;Writing an Exclusive Decode Instruction.&lt;/a&gt;&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="da3b344b114ff138c1f9209e8572beb6197e4be0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 3&lt;/strong&gt;) Modifications, for example, error corrections, are made to the code in the development environment.</source>
          <target state="translated">&lt;strong&gt;ステップ3&lt;/strong&gt;）開発環境でコードに変更（エラー修正など）が行われます。</target>
        </trans-unit>
        <trans-unit id="a5d66e24399b1178a8302d8a229a8ec7409a3e32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4 (server):&lt;/strong&gt; Accept a new connection on the server:</source>
          <target state="translated">&lt;strong&gt;手順4（サーバー）：サーバーで&lt;/strong&gt;新しい接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="28d186808cec909c1c267912b02815e75570a143" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4)&lt;/strong&gt; Copy the release package &lt;code&gt;ch_rel-2.tar.gz&lt;/code&gt; to the &lt;code&gt;$ROOT/releases&lt;/code&gt; directory.</source>
          <target state="translated">&lt;strong&gt;ステップ4）&lt;/strong&gt;リリースパッケージ &lt;code&gt;ch_rel-2.tar.gz&lt;/code&gt; を &lt;code&gt;$ROOT/releases&lt;/code&gt; ディレクトリにコピーします。</target>
        </trans-unit>
        <trans-unit id="1e09019c15e417b90c2f0840b74b661a0c9a8fcd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4.&lt;/strong&gt; Create the release upgrade file (see the &lt;code&gt;relup(4)&lt;/code&gt; manual page in SASL):</source>
          <target state="translated">&lt;strong&gt;ステップ4.&lt;/strong&gt;リリースアップグレードファイルを作成します（SASLの &lt;code&gt;relup(4)&lt;/code&gt; マニュアルページを参照）。</target>
        </trans-unit>
        <trans-unit id="e5b966d052e8b1adeff829ad0847037e80501af2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4.&lt;/strong&gt; In the Monitor window, select &lt;strong&gt;Module &amp;gt; the module to be interpreted &amp;gt; View&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ4.&lt;/strong&gt;モニターウィンドウで、[ &lt;strong&gt;モジュール]&amp;gt; [解釈するモジュール]&amp;gt; [表示]を&lt;/strong&gt;選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a58a52376ee57ce93fc1818f29accb74940cbc2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4.&lt;/strong&gt; Install the created target system in a suitable directory.</source>
          <target state="translated">&lt;strong&gt;ステップ4.&lt;/strong&gt;作成したターゲットシステムを適切なディレクトリにインストールします。</target>
        </trans-unit>
        <trans-unit id="7d5c9a42e1e843c2aaa18e54545d2368a3698953" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4.&lt;/strong&gt; Run the C node client example. Terminate &lt;code&gt;cserver&lt;/code&gt;, but not Erlang, and start &lt;code&gt;cclient&lt;/code&gt;. The Erlang node must be started before the C node client:</source>
          <target state="translated">&lt;strong&gt;ステップ4.&lt;/strong&gt; Cノードクライアントの例を実行します。Erlangではなく &lt;code&gt;cserver&lt;/code&gt; を終了し、cclientを起動し &lt;code&gt;cclient&lt;/code&gt; 。Erlangノードは、Cノードクライアントの前に起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="d5cefa598593b50351514244dbdc952cdcea4978" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4.&lt;/strong&gt; Use the &lt;strong&gt;openssh&lt;/strong&gt; client from a shell to connect to the Erlang &lt;code&gt;ssh&lt;/code&gt; daemon:</source>
          <target state="translated">&lt;strong&gt;ステップ4.&lt;/strong&gt;使用&lt;strong&gt;のOpenSSH&lt;/strong&gt;アーランに接続するためのシェルからクライアント &lt;code&gt;ssh&lt;/code&gt; デーモン：</target>
        </trans-unit>
        <trans-unit id="673d301308938e0dc163a5d2221e3efef633e5da" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4:&lt;/strong&gt; A first table is created, called &lt;code&gt;funky&lt;/code&gt;, by evaluating the expression &lt;code&gt;mnesia:create_table(funky, [])&lt;/code&gt;. The table is given default properties.</source>
          <target state="translated">&lt;strong&gt;ステップ4：&lt;/strong&gt;式 &lt;code&gt;mnesia:create_table(funky, [])&lt;/code&gt; 評価して、 &lt;code&gt;funky&lt;/code&gt; という最初のテーブルを作成します。テーブルにはデフォルトのプロパティが設定されています。</target>
        </trans-unit>
        <trans-unit id="d0c54a1d5a76cf7e19ea28d35cbb3d670e82dd31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4:&lt;/strong&gt; Process P1 starts to run again and writes its employee record with salary set to 7, thus effectively overwriting and undoing the work performed by process P2. The update performed by P2 is lost.</source>
          <target state="translated">&lt;strong&gt;ステップ4：&lt;/strong&gt;プロセスP1は再び実行を開始し、給与を7に設定して従業員レコードを書き込みます。これにより、プロセスP2によって実行された作業を効果的に上書きして元に戻します。P2によって実行された更新は失われます。</target>
        </trans-unit>
        <trans-unit id="582e4f804130d7820ae4a302a348822db54d1634" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4:&lt;/strong&gt; Set up the environment to always use TLS.</source>
          <target state="translated">&lt;strong&gt;ステップ4：&lt;/strong&gt;常にTLSを使用するように環境を設定します。</target>
        </trans-unit>
        <trans-unit id="4f5a293f2a26253a196ac8c0e6111ebe97dc6e96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4:&lt;/strong&gt; Start the client side:</source>
          <target state="translated">&lt;strong&gt;ステップ4：&lt;/strong&gt;クライアント側を開始します。</target>
        </trans-unit>
        <trans-unit id="0bb0fdc83c65db80c2049cda6538123a3d413df2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4:&lt;/strong&gt; Takes &lt;code&gt;possibleActions&lt;/code&gt; of the internally defined &lt;code&gt;CHOICE&lt;/code&gt; type.</source>
          <target state="translated">&lt;strong&gt;ステップ4：&lt;/strong&gt;テイク &lt;code&gt;possibleActions&lt;/code&gt; 内部で定義されたの &lt;code&gt;CHOICE&lt;/code&gt; のタイプを。</target>
        </trans-unit>
        <trans-unit id="dcf6754ee83a8d086a312cd0d667040310bae64e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4:&lt;/strong&gt; You can see the following listing in the &lt;code&gt;Mnesia&lt;/code&gt; directory:</source>
          <target state="translated">&lt;strong&gt;ステップ4：&lt;/strong&gt; &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリーで以下のリストを確認できます。</target>
        </trans-unit>
        <trans-unit id="12af17ca76e2f1f2a5d4c4398699d11b71cb7923" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4&lt;/strong&gt;) At some point, it is time to make a new version of release. The relevant &lt;code&gt;.app&lt;/code&gt; files are updated and a new &lt;code&gt;.rel&lt;/code&gt; file is written.</source>
          <target state="translated">&lt;strong&gt;ステップ4&lt;/strong&gt;）ある時点で、新しいバージョンのリリースを作成する時がきました。関連する &lt;code&gt;.app&lt;/code&gt; ファイルが更新され、新しい &lt;code&gt;.rel&lt;/code&gt; ファイルが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d4ffc8ea3eb35c748a63af88107be0eedb694dad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4a)&lt;/strong&gt; One way to start the included application is to restart the entire &lt;code&gt;prim_app&lt;/code&gt; application. Normally, the &lt;code&gt;restart_application&lt;/code&gt; instruction in the &lt;code&gt;.appup&lt;/code&gt; file for &lt;code&gt;prim_app&lt;/code&gt; would be used.</source>
          <target state="translated">&lt;strong&gt;ステップ4a）&lt;/strong&gt;組み込まれたアプリケーションを開始する1つの方法は、 &lt;code&gt;prim_app&lt;/code&gt; アプリケーション全体を再始動することです。通常、 &lt;code&gt;restart_application&lt;/code&gt; の内の命令 &lt;code&gt;.appup&lt;/code&gt; のためのファイル &lt;code&gt;prim_app&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="e676e0be918c3c84954772eb7259f3f4975ebe25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 4b)&lt;/strong&gt; Another way to start the included application (or stop it in the case of downgrade) is by combining instructions for adding and removing child processes to/from &lt;code&gt;prim_sup&lt;/code&gt; with instructions for loading/unloading all &lt;code&gt;ch_app&lt;/code&gt; code and its application specification.</source>
          <target state="translated">&lt;strong&gt;ステップ4b）&lt;/strong&gt;含まれているアプリケーションを開始する（またはダウングレードの場合は停止する&lt;strong&gt;）&lt;/strong&gt;別の方法は、 &lt;code&gt;prim_sup&lt;/code&gt; に子プロセスを追加および削除する手順と、すべての &lt;code&gt;ch_app&lt;/code&gt; コードおよびそのアプリケーション仕様をロード/アンロードする手順を組み合わせることです。</target>
        </trans-unit>
        <trans-unit id="85fbc0ba56fba835de25f17733833ef1bbab4459" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5 (client):&lt;/strong&gt; Make a new connection:</source>
          <target state="translated">&lt;strong&gt;ステップ5（クライアント）：&lt;/strong&gt;新しい接続を確立します：</target>
        </trans-unit>
        <trans-unit id="90b00234b619660e4e4011d5b1e8016b8273da99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5)&lt;/strong&gt; In the running target system, unpack the release package:</source>
          <target state="translated">&lt;strong&gt;ステップ5）&lt;/strong&gt;実行中のターゲットシステムで、リリースパッケージを解凍します。</target>
        </trans-unit>
        <trans-unit id="97c2802dd2dd58bee69337ddfb6d4fbc6c0a2837" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5.&lt;/strong&gt; Create the new release:</source>
          <target state="translated">&lt;strong&gt;ステップ5.&lt;/strong&gt;新しいリリースを作成します。</target>
        </trans-unit>
        <trans-unit id="7d33217f6fa2da769cd3f61a083a91ebae6b1bd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5.&lt;/strong&gt; Run the C node server example with long node names:</source>
          <target state="translated">&lt;strong&gt;ステップ5.&lt;/strong&gt;長いノード名でCノードサーバーの例を実行します。</target>
        </trans-unit>
        <trans-unit id="6ce94520f03f0cc3cbe6c584884b457ab541dec6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5.&lt;/strong&gt; Set the &lt;code&gt;&lt;a href=&quot;#breakpoints&quot;&gt;breakpoints&lt;/a&gt;&lt;/code&gt;, if any.</source>
          <target state="translated">&lt;strong&gt;ステップ5. &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;#breakpoints&quot;&gt;breakpoints&lt;/a&gt;&lt;/code&gt; 設定します（ある場合）。</target>
        </trans-unit>
        <trans-unit id="719d36e3378684c364e84d16efff524ab907b447" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5:&lt;/strong&gt; Create a table:</source>
          <target state="translated">&lt;strong&gt;ステップ5：&lt;/strong&gt;テーブルを作成します。</target>
        </trans-unit>
        <trans-unit id="4b7b2c507ef74b6fb5b0295b297528c7255c1a5f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5:&lt;/strong&gt; Do the TLS handshake:</source>
          <target state="translated">&lt;strong&gt;手順5：&lt;/strong&gt; TLSハンドシェイクを実行します。</target>
        </trans-unit>
        <trans-unit id="890e8ce232b5dcc00ba9eb162c15c6a9388b8e8a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5:&lt;/strong&gt; Ensure &lt;code&gt;active&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; before trying to upgrade a connection to a TLS connection, otherwise TLS handshake messages can be delivered to the wrong process:</source>
          <target state="translated">&lt;strong&gt;手順5：&lt;/strong&gt;接続をTLS接続にアップグレードする前に、 &lt;code&gt;active&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されていることを確認してください。そうしないと、TLSハンドシェイクメッセージが間違ったプロセスに配信される可能性があります。</target>
        </trans-unit>
        <trans-unit id="581ed39c113ccc987241ac9a69163c0b9fd944c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5:&lt;/strong&gt; Ensure &lt;code&gt;active&lt;/code&gt; is set to &lt;code&gt;false&lt;/code&gt; before trying to upgrade a connection to an SSL connection, otherwise SSL handshake messages can be delivered to the wrong process:</source>
          <target state="translated">&lt;strong&gt;手順5：&lt;/strong&gt;接続をSSL接続にアップグレードする前に、 &lt;code&gt;active&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されていることを確認してください。そうでない場合、SSLハンドシェイクメッセージが間違ったプロセスに配信される可能性があります。</target>
        </trans-unit>
        <trans-unit id="49dfb24af9b4141d38ec1af144e54473b4f13932" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5:&lt;/strong&gt; Goes into the first component of &lt;code&gt;SEQUENCE OF&lt;/code&gt; by &lt;code&gt;[1]&lt;/code&gt;. That component is of type &lt;code&gt;Action&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ5：&lt;/strong&gt; &lt;code&gt;[1]&lt;/code&gt; によって &lt;code&gt;SEQUENCE OF&lt;/code&gt; の最初のコンポーネントに入ります。そのコンポーネントのタイプは &lt;code&gt;Action&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4494364c591fc77c06ca8fd65a25df9f5cfd83b0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5:&lt;/strong&gt;&lt;code&gt;&lt;a href=&quot;mnesia#info-0&quot;&gt;mnesia:info()&lt;/a&gt;&lt;/code&gt; is evaluated to display information on the terminal about the status of the database.</source>
          <target state="translated">&lt;strong&gt;ステップ5：&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;mnesia#info-0&quot;&gt;mnesia:info()&lt;/a&gt;&lt;/code&gt; が評価され、データベースのステータスに関する情報が端末に表示されます。</target>
        </trans-unit>
        <trans-unit id="a1349bb4e75ddf04964497f7b1d863081d318748" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5&lt;/strong&gt;) For each modified application, an &lt;code&gt;&lt;a href=&quot;#appup&quot;&gt;application upgrade file&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;.appup&lt;/code&gt;, is created. In this file, it is described how to upgrade and/or downgrade between the old and new version of the application.</source>
          <target state="translated">&lt;strong&gt;ステップ5&lt;/strong&gt;変更された各アプリケーションの場合）は、 &lt;code&gt;&lt;a href=&quot;#appup&quot;&gt;application upgrade file&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;.appup&lt;/code&gt; 、作成されます。このファイルには、アプリケーションの古いバージョンと新しいバージョンの間でアップグレードまたはダウングレードする方法が記述されています。</target>
        </trans-unit>
        <trans-unit id="3bbd266f76b4aa8c93fc8274ea6cf180664cc759" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5a.&lt;/strong&gt; Shut down the Erlang &lt;code&gt;ssh&lt;/code&gt; daemon so that it stops the listener but leaves existing connections, started by the listener, operational:</source>
          <target state="translated">&lt;strong&gt;ステップ5a。&lt;/strong&gt;Erlang &lt;code&gt;ssh&lt;/code&gt; デーモンをシャットダウンして、リスナーを停止しますが、リスナーによって開始された既存の接続は動作可能なままにします。</target>
        </trans-unit>
        <trans-unit id="3ac3438d2425ca0428905133a8fe93bc9ecf8388" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 5b.&lt;/strong&gt; Shut down the Erlang &lt;code&gt;ssh&lt;/code&gt; daemon so that it stops the listener and all connections started by the listener:</source>
          <target state="translated">&lt;strong&gt;手順5b。&lt;/strong&gt;Erlang &lt;code&gt;ssh&lt;/code&gt; デーモンをシャットダウンして、リスナーとリスナーによって開始されたすべての接続を停止します。</target>
        </trans-unit>
        <trans-unit id="a0c0c8cf53a0637217351c997a6666e2cfc112c1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6 (server):&lt;/strong&gt; Start the handshake:</source>
          <target state="translated">&lt;strong&gt;ステップ6（サーバー）：&lt;/strong&gt;ハンドシェイクを開始し&lt;strong&gt;ます&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="ecbfa34ee91c0fa31b9414ea14d385e757e49765" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6)&lt;/strong&gt; Check if the function &lt;code&gt;ch3:available/0&lt;/code&gt; is available:</source>
          <target state="translated">&lt;strong&gt;ステップ6）&lt;/strong&gt;関数 &lt;code&gt;ch3:available/0&lt;/code&gt; が使用可能かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="754904d06e66ffb9b862e4891614b1f1326833fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6.&lt;/strong&gt; Start the program to be debugged. This is done the normal way from the Erlang shell.</source>
          <target state="translated">&lt;strong&gt;手順6.&lt;/strong&gt;デバッグするプログラムを起動します。これは、Erlangシェルから通常の方法で行われます。</target>
        </trans-unit>
        <trans-unit id="eae0a0a95f8a6f24b80e8ee4590f2f837a6e1868" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6:&lt;/strong&gt; Do the TLS handshake:</source>
          <target state="translated">&lt;strong&gt;手順6：&lt;/strong&gt; TLSハンドシェイクを実行します。</target>
        </trans-unit>
        <trans-unit id="2c47c7bc5be4cb04c1ac8743d48ea52848f9d172" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6:&lt;/strong&gt; Send a message over TLS:</source>
          <target state="translated">&lt;strong&gt;手順6：&lt;/strong&gt; TLS経由でメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="1868383f6bca6669b333a876a2707d8d96599d9b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6:&lt;/strong&gt; Takes component &lt;code&gt;handle&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ6：&lt;/strong&gt;コンポーネント &lt;code&gt;handle&lt;/code&gt; 取得します。</target>
        </trans-unit>
        <trans-unit id="0f30ce216ddaa571d39516ca607c6b0dd29fe44d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6:&lt;/strong&gt; You can see the following listing in the &lt;code&gt;Mnesia&lt;/code&gt; directory:</source>
          <target state="translated">&lt;strong&gt;ステップ6：&lt;/strong&gt; &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリに次のリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="1bc7d7097e1d3aa0689aa7fb2b1ed8628d9d803b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 6&lt;/strong&gt;) Based on the &lt;code&gt;.appup&lt;/code&gt; files, a &lt;code&gt;&lt;a href=&quot;#relup&quot;&gt;release upgrade file&lt;/a&gt;&lt;/code&gt; called &lt;code&gt;relup&lt;/code&gt;, is created. This file describes how to upgrade and/or downgrade between the old and new version of the entire release.</source>
          <target state="translated">&lt;strong&gt;ステップ6&lt;/strong&gt;に基づく） &lt;code&gt;.appup&lt;/code&gt; のファイルは、 &lt;code&gt;&lt;a href=&quot;#relup&quot;&gt;release upgrade file&lt;/a&gt;&lt;/code&gt; と呼ばれる &lt;code&gt;relup&lt;/code&gt; は、作成されます。このファイルには、リリース全体の古いバージョンと新しいバージョンの間でアップグレードまたはダウングレードする方法が記載されています。</target>
        </trans-unit>
        <trans-unit id="ca20715680d4f98f1bed41707222bc020fc78237" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7 (server):&lt;/strong&gt; Accept a new connection on the server:</source>
          <target state="translated">&lt;strong&gt;手順7（サーバー）：サーバーで&lt;/strong&gt;新しい接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="1514f54db943df7682d1f14b1ea7b336ac26828d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7)&lt;/strong&gt; Install the new release. The instructions in &lt;code&gt;$ROOT/releases/B/relup&lt;/code&gt; are executed one by one, resulting in the new version of &lt;code&gt;ch3&lt;/code&gt; being loaded. The function &lt;code&gt;ch3:available/0&lt;/code&gt; is now available:</source>
          <target state="translated">&lt;strong&gt;手順7）&lt;/strong&gt;新しいリリースをインストールします。 &lt;code&gt;$ROOT/releases/B/relup&lt;/code&gt; の命令が1つずつ実行され、新しいバージョンの &lt;code&gt;ch3&lt;/code&gt; がロードされます。関数 &lt;code&gt;ch3:available/0&lt;/code&gt; が利用可能になりました。</target>
        </trans-unit>
        <trans-unit id="f0ddf7d7624922670e58760ed3efdf99fc2b0aaa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7.&lt;/strong&gt; To &lt;strong&gt;attach&lt;/strong&gt; to one of these processes, double-click it, or select the process and then choose &lt;strong&gt;Process &amp;gt; Attach&lt;/strong&gt;. Attaching to a process opens an &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt; for this process.</source>
          <target state="translated">&lt;strong&gt;手順7.&lt;/strong&gt;には、&lt;strong&gt;添付&lt;/strong&gt;を選択し、それをダブルクリックする、またはプロセスを選択して、これらのプロセスのいずれかに&lt;strong&gt;アタッチ&amp;gt;プロセスを&lt;/strong&gt;。プロセスにアタッチすると、このプロセスの[ &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt; のアタッチ]ウィンドウが開きます。</target>
        </trans-unit>
        <trans-unit id="7441d5371db3c50287e1efc571736c5c500c1e31" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7:&lt;/strong&gt; Flush the shell message queue to see that the message was sent on the server side:</source>
          <target state="translated">&lt;strong&gt;ステップ7：&lt;/strong&gt;シェルメッセージキューをフラッシュして、メッセージがサーバー側で送信されたことを確認します。</target>
        </trans-unit>
        <trans-unit id="1eace8d9f7691aa27d7f82250a9b940f4f602ff9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7:&lt;/strong&gt; Takes component &lt;code&gt;number&lt;/code&gt; of type &lt;code&gt;Button&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ステップ7：&lt;/strong&gt;タイプ &lt;code&gt;Button&lt;/code&gt; のコンポーネント &lt;code&gt;number&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="c2a27f7d2a55e8ff9504074a8d0f71db90534c52" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7:&lt;/strong&gt; Upgrade to a TLS connection. The client and server must agree upon the upgrade. The server must call &lt;code&gt;ssl:handshake/2&lt;/code&gt; before the client calls &lt;code&gt;ssl:connect/3.&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;手順7：&lt;/strong&gt; TLS接続にアップグレードします。クライアントとサーバーはアップグレードに同意する必要があります。クライアントが &lt;code&gt;ssl:connect/3.&lt;/code&gt; 呼び出す前に、サーバーは &lt;code&gt;ssl:handshake/2&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="b95795efc13359c3c0a8be3228a4c46b6f0e4247" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7:&lt;/strong&gt; Upgrade to an TLS connection. The client and server must agree upon the upgrade. The server must call &lt;code&gt;ssl:handshake/2&lt;/code&gt; before the client calls &lt;code&gt;ssl:connect/3.&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;手順7：&lt;/strong&gt; TLS接続にアップグレードします。クライアントとサーバーは、アップグレードについて同意する必要があります。サーバーは、クライアントが &lt;code&gt;ssl:connect/3.&lt;/code&gt; 呼び出す前に &lt;code&gt;ssl:handshake/2&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="f34a3f445f73ea0cfb408360da3ae6514d7fa319" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 7&lt;/strong&gt;) A new release package is made and transferred to the target system.</source>
          <target state="translated">&lt;strong&gt;ステップ7&lt;/strong&gt;）新しいリリースパッケージが作成され、ターゲットシステムに転送されます。</target>
        </trans-unit>
        <trans-unit id="028b469f5825b422c097a9cf7f314d0f57ca2ece" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 8 (client):&lt;/strong&gt; Make a new connection to server:</source>
          <target state="translated">&lt;strong&gt;手順8（クライアント）：&lt;/strong&gt;サーバーへの新しい接続を作成します。</target>
        </trans-unit>
        <trans-unit id="bae880543927afad57fed3487552e00cfa9b33b2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 8)&lt;/strong&gt; If the target system is now rebooted, it uses version &quot;A&quot; again. The &quot;B&quot; version must be made permanent, to be used when the system is rebooted.</source>
          <target state="translated">&lt;strong&gt;手順8）&lt;/strong&gt;ターゲットシステムが再起動された場合、バージョン &quot;A&quot;が再度使用されます。「B」バージョンは、システムを再起動するときに使用できるように永続化する必要があります。</target>
        </trans-unit>
        <trans-unit id="bac5b10df11312c1e3c8ea7a4cbecc32dc9e20f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 8.&lt;/strong&gt; From the Attach Process window, you can control the process execution, inspect variable values, set breakpoints, and so on.</source>
          <target state="translated">&lt;strong&gt;ステップ8.&lt;/strong&gt; Attach Processウィンドウから、プロセスの実行の制御、変数値の検査、ブレークポイントの設定などを行うことができます。</target>
        </trans-unit>
        <trans-unit id="3b55c37edd293767d403dc5703addaa7adf8f687" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 8:&lt;/strong&gt; Send a message over TLS:</source>
          <target state="translated">&lt;strong&gt;手順8：&lt;/strong&gt; TLS経由でメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="c1c2fce87c78cb92a955526245d6758d4bd4c3fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 8&lt;/strong&gt;) The new release package is unpacked using the release handler.</source>
          <target state="translated">&lt;strong&gt;ステップ8&lt;/strong&gt;）新しいリリースパッケージは、リリースハンドラーを使用して解凍されます。</target>
        </trans-unit>
        <trans-unit id="8d21cdf2dbaff86339f312dc0625258f2101e6ce" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 9 (server):&lt;/strong&gt; Start the handshake:</source>
          <target state="translated">&lt;strong&gt;ステップ9（サーバー）：&lt;/strong&gt;ハンドシェイクを開始し&lt;strong&gt;ます&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="2753461f9bd0cabfdd93648f18b06b6ee7293ba2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 9:&lt;/strong&gt; Set &lt;code&gt;active true&lt;/code&gt; on the TLS socket:</source>
          <target state="translated">&lt;strong&gt;ステップ9：&lt;/strong&gt; TLSソケットで &lt;code&gt;active true&lt;/code&gt; を設定します。</target>
        </trans-unit>
        <trans-unit id="4338d9fe9bd789cf5f1c72cef40e4d0dbca9b5a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Step 9&lt;/strong&gt;) The new version of the release is installed, also using the release handler. This is done by evaluating the instructions in &lt;code&gt;relup&lt;/code&gt;. Modules can be added, deleted, or reloaded, applications can be started, stopped, or restarted, and so on. In some cases, it is even necessary to restart the entire emulator.</source>
          <target state="translated">&lt;strong&gt;手順9&lt;/strong&gt;）リリースハンドラを使用して、リリースの新しいバージョンがインストールされます。これは、 &lt;code&gt;relup&lt;/code&gt; の命令を評価することによって行われます。モジュールの追加、削除、再読み込み、アプリケーションの起動、停止、再起動などが可能です。場合によっては、エミュレータ全体を再起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="95f71a6bb6128729c63bcf2a7bef45155e372b40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Sticky locks&lt;/strong&gt;. These are write locks that stay in place at a node after the transaction that initiated the lock has terminated.</source>
          <target state="translated">&lt;strong&gt;スティッキーロック&lt;/strong&gt;。これらは書き込みロックであり、ロックを開始したトランザクションが終了した後、ノードに留まります。</target>
        </trans-unit>
        <trans-unit id="324365a6015f848197269c2090aa29ee06d96e6e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Subsystem&lt;/strong&gt; - Named services that can be run as part of an SSH server, such as SFTP &lt;code&gt;&lt;a href=&quot;ssh_sftpd&quot;&gt;(ssh_sftpd)&lt;/a&gt;&lt;/code&gt;, that is built into the SSH daemon (server) by default, but it can be disabled. The Erlang &lt;code&gt;ssh&lt;/code&gt; daemon can be configured to run any Erlang- implemented SSH subsystem.</source>
          <target state="translated">&lt;strong&gt;サブシステム&lt;/strong&gt; - デフォルトでSSHデーモン（サーバー）に組み込まれているSFTP &lt;code&gt;&lt;a href=&quot;ssh_sftpd&quot;&gt;(ssh_sftpd)&lt;/a&gt;&lt;/code&gt; などのSSHサーバーの一部として実行できる名前付きサービスですが、無効にすることもできます。Erlang &lt;code&gt;ssh&lt;/code&gt; デーモンは、任意のErlang実装SSHサブシステムを実行するように構成できます。</target>
        </trans-unit>
        <trans-unit id="61518be612d2738e7f3a3ebbe2b6dffe871f07de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Symmetric Ciphers&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;対称暗号&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f12a003f8a939b32a195762aad40ff1f09e3336c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;&amp;lt;Limit&lt;/code&gt; RequestMethods&lt;code&gt;&amp;gt;&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;&amp;lt;Limit&lt;/code&gt; RequestMethods &lt;code&gt;&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="3d890508c216d8a24211143d4194a12680a30cd8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;Allow&lt;/code&gt; from subnet &lt;code&gt;subnet | from all&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt;サブネット &lt;code&gt;subnet | from all&lt;/code&gt; から &lt;code&gt;Allow&lt;/code&gt; | すべての中から</target>
        </trans-unit>
        <trans-unit id="9845cf281a77741805eba28a593e36e9594b7444" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;AllowOverRide&lt;/code&gt;&lt;code&gt;all | none | Directives&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;AllowOverRide&lt;/code&gt; &lt;code&gt;all | none | Directives&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="0456503e4cb60a5c3c297158189c50dc7811a035" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;AuthGroupFile&lt;/code&gt; Filename</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;AuthGroupFile&lt;/code&gt; ファイル名</target>
        </trans-unit>
        <trans-unit id="4f1b427fdaea12d38079eb3916d7ef6767dceedf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;AuthName&lt;/code&gt; auth-domain</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;AuthName&lt;/code&gt; auth-domain</target>
        </trans-unit>
        <trans-unit id="e557fc0fa7a27202347fa3f254061a23348f3bde" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;AuthType&lt;/code&gt;&lt;code&gt;Basic&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;AuthType&lt;/code&gt;&lt;code&gt;Basic&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="40d3f9a541a48970b69d8e606fffc2b33f750ac7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;AuthUserFile&lt;/code&gt; Filename</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;AuthUserFile&lt;/code&gt; ファイル名</target>
        </trans-unit>
        <trans-unit id="120961770484ae1392888c1ff553bcf4c03518a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;deny&lt;/code&gt; from subnet &lt;code&gt;subnet | from all&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt;サブネット &lt;code&gt;subnet | from all&lt;/code&gt; からの &lt;code&gt;deny&lt;/code&gt; | すべての中から</target>
        </trans-unit>
        <trans-unit id="a24ab50f2792cbdf21ffbc66e4d5a7a3b11c826d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;order&lt;/code&gt;&lt;code&gt;allow deny | deny allow&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;order&lt;/code&gt; &lt;code&gt;allow deny | deny allow&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5a67cee15349d18c3cdcef7a2af6d613bc4c0e68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;code&gt;require&lt;/code&gt;&lt;code&gt;group group1 group2... | user user1 user2...&lt;/code&gt;</source>
          <target state="translated">&lt;strong&gt;構文：&lt;/strong&gt; &lt;code&gt;group group1 group2... | user user1 user2...&lt;/code&gt; &lt;code&gt;require&lt;/code&gt; です| ユーザーuser1 user2 ...</target>
        </trans-unit>
        <trans-unit id="2d5d119c93fceed410696b7ab0d018119c3d337a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System messages&lt;/strong&gt; are received as:</source>
          <target state="translated">&lt;strong&gt;システムメッセージ&lt;/strong&gt;は次のように受信されます。</target>
        </trans-unit>
        <trans-unit id="7138f253abb1edd7af72b91a601e457ff265344d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System run-time&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;システムランタイム&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7407bb5ffe2be4c260faa76847f1bf9538a623a5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;System testing&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;システムテスト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="16c23416f85bf5588ca067ac4f9d64d12766a9c3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TLS 1.3 ClientHello&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TLS 1.3 ClientHello&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82c521a64060ed677db56ac8ed8d189d364f88c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;TLS 1.3 ServerHello&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;TLS 1.3 ServerHello&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d183641a349251b9aab608de3eb08e618d1f67a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table conversions&lt;/strong&gt;, using &lt;code&gt;&lt;a href=&quot;#tab2file-2&quot;&gt;tab2file/2/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#tab2list-1&quot;&gt;tab2list/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;#tab2file-2&quot;&gt;tab2file/2/3&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#tab2list-1&quot;&gt;tab2list/1&lt;/a&gt;&lt;/code&gt; およびtab2list / 1を使用した&lt;strong&gt;テーブル変換&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="696c4ceafbfe949ae4e1ac9f260a8e4f375683bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Table of Contents&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;目次&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c124318e465d56e0e052f891c4914a2ec47c39c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tag length&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タグの長さ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="990b842959c02ef9a6c2fcc8d4637bf2f7671cb7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tag&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tag&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="005710bfa16ce43a6d6f72b8c8dc90f94088fd40" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Terminal I/O&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;端末I / O&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="850b3e461e65833de8f582ecda8a8f538223b82f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test Suite Support Macros&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テストスイートサポートマクロ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e390762dc699d870f965a304fb7cfab2643240d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test case&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テストケース&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ed6a4714d9460c70c197e5275b090e26daca1f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test suite&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テストスイート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ceaf95a79de3665d2f8a21a3fd98b3da7adc417a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test terms:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テスト用語：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f205b11e2e52d86f4e193509a57ef0cb2f165e73" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Test-driven development&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;テスト駆動開発&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acd14866a335c1f6a879ddc47b671ce88c91bd25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testcasename()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Testcasename()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c8afd571334cd5dca1b27c90f1db30645daee872" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Testcasename(Config)&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Testcasename(Config)&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="02e8dbd8b06d71baf141ffb7df608beb6b6cf374" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;+fn&lt;/code&gt;{&lt;code&gt;l&lt;/code&gt;|&lt;code&gt;u&lt;/code&gt;|&lt;code&gt;a&lt;/code&gt;} [{&lt;code&gt;w&lt;/code&gt;|&lt;code&gt;i&lt;/code&gt;|&lt;code&gt;e&lt;/code&gt;}] flag to &lt;code&gt;erl(1)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;+fn&lt;/code&gt; { &lt;code&gt;l&lt;/code&gt; | &lt;code&gt;u&lt;/code&gt; | &lt;code&gt;a&lt;/code&gt; } [{ &lt;code&gt;w&lt;/code&gt; | &lt;code&gt;i&lt;/code&gt; | &lt;code&gt;e&lt;/code&gt; へ}]フラグ &lt;code&gt;erl(1)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2681671ee9cfc87449020029e505cd199a181e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;+pc&lt;/code&gt; {&lt;code&gt;unicode&lt;/code&gt;|&lt;code&gt;latin1&lt;/code&gt;} flag to &lt;code&gt;erl(1)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;+pc&lt;/code&gt; { &lt;code&gt;unicode&lt;/code&gt; | &lt;code&gt;latin1&lt;/code&gt; } &lt;code&gt;erl(1)&lt;/code&gt; へのフラグ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f1319cb1357f6f4ae021179cf0a316618c375555" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;.erlang&lt;/code&gt; startup file&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;.erlang&lt;/code&gt; スタートアップファイル&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="475a846aa7f37d5e4e78bcec8baf0eab3a16bb3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The &lt;code&gt;LANG&lt;/code&gt; and &lt;code&gt;LC_CTYPE&lt;/code&gt; environment variables&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt; &lt;code&gt;LANG&lt;/code&gt; と &lt;code&gt;LC_CTYPE&lt;/code&gt; 環境変数&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c0a2819cc500c77f0e4a034b882cfd9986cb204" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The language&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;言語&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="71569a0d3f7cdbdae01d158904353480e7a73569" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The one-based indexing for binaries used by this function is deprecated.&lt;/strong&gt; New code is to use &lt;code&gt; binary:bin_to_list/3&lt;/code&gt; in STDLIB instead. All functions in module &lt;code&gt;binary&lt;/code&gt; consistently use zero-based indexing.</source>
          <target state="translated">&lt;strong&gt;この関数で使用されるバイナリの1ベースのインデックス作成は非推奨になりました。&lt;/strong&gt;新しいコードは、代わりにSTDLIBで &lt;code&gt; binary:bin_to_list/3&lt;/code&gt; を使用することです。モジュール &lt;code&gt;binary&lt;/code&gt; すべての関数は、一貫してゼロベースのインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="f496ff8b118a473d9b8f0957453013b162f7b0c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;The one-based indexing for binaries used by this function is deprecated.&lt;/strong&gt; New code is to use &lt;code&gt;binary:bin_to_list/3&lt;/code&gt; in STDLIB instead. All functions in module &lt;code&gt;binary&lt;/code&gt; consistently use zero-based indexing.</source>
          <target state="translated">&lt;strong&gt;この関数で使用されるバイナリの1ベースのインデックスは非推奨です。&lt;/strong&gt;新しいコードは、代わりにSTDLIBで &lt;code&gt;binary:bin_to_list/3&lt;/code&gt; を使用することです。モジュール &lt;code&gt;binary&lt;/code&gt; すべての関数は、一貫してゼロベースのインデックスを使用します。</target>
        </trans-unit>
        <trans-unit id="9ea4533674f7fd7e0ae636e144badb2d4aabc7ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This argument is deprecated.&lt;/strong&gt; Instead of using this argument, use command-line argument &lt;code&gt;+sbt&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;. When this argument is removed, a final scheduler bind type to use is determined at emulator boot time.</source>
          <target state="translated">&lt;strong&gt;この引数は非推奨です。&lt;/strong&gt;この引数を使用する代わりに、 &lt;code&gt;erl(1)&lt;/code&gt; でコマンドライン引数 &lt;code&gt;+sbt&lt;/code&gt; を使用します。この引数を削除すると、使用する最終的なスケジューラバインドタイプがエミュレータの起動時に決定されます。</target>
        </trans-unit>
        <trans-unit id="7ce268533ec516f296370cb62ad4ba29eea27b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This argument is deprecated.&lt;/strong&gt; Instead of using this argument, use command-line argument &lt;code&gt;+sct&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;この引数は非推奨です。&lt;/strong&gt;この引数を使用する代わりに、 &lt;code&gt;erl(1)&lt;/code&gt; でコマンドライン引数 &lt;code&gt;+sct&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="39f54a57653831bd06309089afc93f78ff500044" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated. Do not use it.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。使用しないでください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bfaaf3d99b9a8b60ae16097d2965bb640e9c657a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated. Do not use it.&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;#erl_drv_monotonic_time&quot;&gt; erl_drv_monotonic_time&lt;/a&gt;&lt;/code&gt; (perhaps in combination with &lt;code&gt;&lt;a href=&quot;#erl_drv_time_offset&quot;&gt; erl_drv_time_offset&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。使用しないでください。&lt;/strong&gt;使用 &lt;code&gt;&lt;a href=&quot;#erl_drv_monotonic_time&quot;&gt; erl_drv_monotonic_time&lt;/a&gt;&lt;/code&gt; を（おそらくとの組み合わせで &lt;code&gt;&lt;a href=&quot;#erl_drv_time_offset&quot;&gt; erl_drv_time_offset&lt;/a&gt;&lt;/code&gt; 代わりに）。</target>
        </trans-unit>
        <trans-unit id="5afc6108cad273cfe62145629f995076b990e8df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated. Do not use it.&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;#erl_drv_monotonic_time&quot;&gt;erl_drv_monotonic_time&lt;/a&gt;&lt;/code&gt; (perhaps in combination with &lt;code&gt;&lt;a href=&quot;#erl_drv_time_offset&quot;&gt;erl_drv_time_offset&lt;/a&gt;&lt;/code&gt;) instead.</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。使用しないでください。&lt;/strong&gt;使用 &lt;code&gt;&lt;a href=&quot;#erl_drv_monotonic_time&quot;&gt;erl_drv_monotonic_time&lt;/a&gt;&lt;/code&gt; を（おそらくとの組み合わせで &lt;code&gt;&lt;a href=&quot;#erl_drv_time_offset&quot;&gt;erl_drv_time_offset&lt;/a&gt;&lt;/code&gt; 代わりに）。</target>
        </trans-unit>
        <trans-unit id="66b991bfe8a261a1d5b2f9e9214635455f4cb10a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6fdd822afe99c2998084856c411827179bed91ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated.&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt; erl_drv_output_term&lt;/a&gt;&lt;/code&gt;instead.</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt; erl_drv_output_term&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8c1362ebf64477b64e07e1c51801d1975f2936bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated.&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt; erl_drv_send_term&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt; erl_drv_send_term&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="46e8cd40ab4bc3dd8d77bcf878376f0901ee71e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated.&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt;instead.</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="388bd401dc591635bfd200ac17127ec52d4db640" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This function is deprecated.&lt;/strong&gt; Use &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt;erl_drv_send_term&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">&lt;strong&gt;この関数は非推奨です。&lt;/strong&gt;代わりに &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt;erl_drv_send_term&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="9d05e578f55bdb24c38413eb9534632473fed370" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;This option is not recommended for new code.&lt;/strong&gt; This option cannot be combined with the option &lt;code&gt;maps&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;このオプションは、新しいコードには推奨されません。&lt;/strong&gt;このオプションをオプション &lt;code&gt;maps&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="f3d5bf90b3d792848c2d499c49906e2fc777f079" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Threaded NIF&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スレッドNIF&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b65ef57f844e55c86506f12d9b30d642316a286" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Threads and concurrency&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;スレッドと並行性&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="87fa388b725bb3a4d05ef31608f15aaca375980e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Time&lt;/strong&gt; (microseconds)</source>
          <target state="translated">&lt;strong&gt;時間&lt;/strong&gt;（マイクロ秒）</target>
        </trans-unit>
        <trans-unit id="0eae7880fa0f1f971745fd0f3f853454e2ac4b0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Time&lt;/strong&gt; and &lt;strong&gt;Reds&lt;/strong&gt; can be presented as accumulated values or as values since the last update.</source>
          <target state="translated">&lt;strong&gt;時間&lt;/strong&gt;と&lt;strong&gt;赤&lt;/strong&gt;は、累積値または最後の更新以降の値として表示できます。</target>
        </trans-unit>
        <trans-unit id="155df0ee59df46980de021a7c83c66af1357f06d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Timer functions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タイマー機能&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e424698e2557c7844721f19187f4c2ae812fa771" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Title&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Title&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0622d97571953ee52ed681a087eae95b9bdeb96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To get information about a function&lt;/strong&gt;, &lt;code&gt;PidPortFuncEvent&lt;/code&gt; is to be the three-element tuple &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; or the atom &lt;code&gt;on_load&lt;/code&gt;. No wildcards are allowed. Returns &lt;code&gt;undefined&lt;/code&gt; if the function does not exist, or &lt;code&gt;false&lt;/code&gt; if the function is not traced. If &lt;code&gt;PidPortFuncEvent&lt;/code&gt; is &lt;code&gt;on_load&lt;/code&gt;, the information returned refers to the default value for code that will be loaded.</source>
          <target state="translated">&lt;strong&gt;関数に関する情報を取得するに&lt;/strong&gt;は、 &lt;code&gt;PidPortFuncEvent&lt;/code&gt; は3要素のタプル &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; &lt;code&gt;on_load&lt;/code&gt; }またはアトムon_loadになります。ワイルドカードは使用できません。関数が存在しない場合は &lt;code&gt;undefined&lt;/code&gt; を返し、関数がトレースされていない場合は &lt;code&gt;false&lt;/code&gt; を返します。場合 &lt;code&gt;PidPortFuncEvent&lt;/code&gt; がある &lt;code&gt;on_load&lt;/code&gt; 、返された情報がロードされるコードのデフォルト値を参照します。</target>
        </trans-unit>
        <trans-unit id="002a9998f7885827dbc3a7fa13d42973ae9fab35" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To get information about a port or process&lt;/strong&gt;, &lt;code&gt;PidPortFuncEvent&lt;/code&gt; is to be a process identifier (pid), port identifier, or one of the atoms &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;new_processes&lt;/code&gt;, or &lt;code&gt;new_ports&lt;/code&gt;. The atom &lt;code&gt;new&lt;/code&gt; or &lt;code&gt;new_processes&lt;/code&gt; means that the default trace state for processes to be created is returned. The atom &lt;code&gt;new_ports&lt;/code&gt; means that the default trace state for ports to be created is returned.</source>
          <target state="translated">&lt;strong&gt;ポートまたはプロセスに関する情報を取得するに&lt;/strong&gt;は、 &lt;code&gt;PidPortFuncEvent&lt;/code&gt; をプロセス識別子（pid）、ポート識別子、またはアトム &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;new_processes&lt;/code&gt; 、または &lt;code&gt;new_ports&lt;/code&gt; のいずれかにします。アトム &lt;code&gt;new&lt;/code&gt; または &lt;code&gt;new_processes&lt;/code&gt; は、作成されるプロセスのデフォルトのトレース状態が返されることを意味します。アトム &lt;code&gt;new_ports&lt;/code&gt; は、作成されるポートのデフォルトのトレース状態が返されることを意味します。</target>
        </trans-unit>
        <trans-unit id="cf4b5370659808a00588ed719c2cde311a8eb621" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;To get information about an event&lt;/strong&gt;, &lt;code&gt;PidPortFuncEvent&lt;/code&gt; is to be one of the atoms &lt;code&gt;send&lt;/code&gt; or &lt;code&gt;'receive'&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;イベントに関する情報を取得するために&lt;/strong&gt;、 &lt;code&gt;PidPortFuncEvent&lt;/code&gt; は &lt;code&gt;send&lt;/code&gt; または &lt;code&gt;'receive'&lt;/code&gt; アトムの1つになります。</target>
        </trans-unit>
        <trans-unit id="a9c252c3a0f7855ecd0d781033f63456278224f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Tool&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Tool&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1947566e2b70956df0d5420b00683485aba45496" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Total&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Total&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b5dbdbeeccb9f8f0ad51e69c9711bf9a6a89436" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace named process tree&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;名前付きプロセスツリーのトレース&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5e69ddcb7823b026f11d78a81bb6c44d4b05c71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace named process&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;名前付きプロセスをトレース&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e80785a157a4abb5e3d6feff2c52aa9fd9b3b155" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace process tree&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プロセスツリーのトレース&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f278d0a425a3c6c4e9ba0dd702ac66473484859c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Trace process&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;トレースプロセス&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf00eecb280ac4cfcddfbec13d11fc03f7b2a1fc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transition period&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;移行期間&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="32105a6e60a647c9a0ae7b8390cb0ad3901ec12f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Transparent file naming&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;透過的なファイル名&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c95707fd34cb265ceb38faa090664ffe113b14e6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type of Error&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;エラーのタイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0a800b861ab1916bef23e6656cf43c1286d67d28" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Type&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1e303230174cc681ca7cdb3826c4b0dc4c7acbe8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Types and description&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;タイプと説明&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f554f5184b886a94ad5540230f4ed99772186d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Types:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Types:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="893ca2867899ff959b0c11d07730d21bd6c45dfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Types&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Types&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="433b4479ce6d0ef85d1ff7b252c77230f0d12f37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+0009&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+0009&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb7cedc6a8a3051bcc8bfbc29c2240b4aad23322" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+000A&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+000A&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63e6357a8693ecd63f59464c20750fef41e46df4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+000B&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+000B&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b71d2731fc4909722050e4c3c4cceaba40deae0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+000C&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+000C&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="55c304e56ddca5a175c8118f91b3c510d72dd5ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+000D&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+000D&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8cb530558547fa6253b113182c84854f786343a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+0020&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+0020&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1072303bbb17472dc6a8c828847616a5d3a6394f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+0085&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+0085&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5484b46e61f08dd88216962251e8c034cd0443c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+00A0&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+00A0&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96a6b2085303f40a2f3dfd27ab4235a2fae4d738" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+061C&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+061C&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49b73703d779f5515e196201561829dc9476dd09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+1680&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+1680&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d07a4a14699d6577abf06080c428d9a181040e10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+180E&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+180E&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c90d1ed0e62ac227d47db478de08c0d9b01065a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2000&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2000&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63fedbb7ec1fda4552351636a8e49e82ddf132e7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2001&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2001&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de0505696ff01b3f9978f6bc8840fa2bc4fd7bc5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2002&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2002&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="132487e33957e3a0f0557d48ba330570680d1f56" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2003&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2003&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="63f18415335709ae39c20c9e80f659a42865cd27" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2004&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2004&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="58861ccadd286d594b3e82feaed5513b56031e37" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2005&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2005&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc256ab8bbb9c1a7b1cd018d57e77ae515601d77" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2006&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2006&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="292f7ed760bb4b04c5d2d883b5df5998a4d3970a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2007&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2007&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="11c07010514bcd8d04ef21ce8f5422abbc07bac6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2008&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2008&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b761087eac78163d7fef04295a17bb68381da905" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2009&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2009&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="563445610360aa9b014334e9aa9d04beb9c786db" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+200A&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+200A&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="91d476c80bdcf8a556fcb3e9ac88e99192b3ef0a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2028&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2028&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dec3e5dec45214b36e5db0b0196594f5d2f0b5df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2029&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+2029&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="818a0851e07d1d08a977665dace1dff048bfdaa6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+202F&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+202F&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d552bbc8e0d3bdc98a63a14eddbc91a1df2a00c6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+205F&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+205F&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ccc11ff9ce207ef797ae1c3ab8cf4982c42dbfa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+2066 - U+2069&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U + 2066-U + 2069&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30110b1d30498a691c515ccd2b9ccc05a33f5907" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;U+3000&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;U+3000&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7abf6ccabdc898caa3446310e15f11021c318f19" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UCS-4&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UCS-4&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f224818a442706920b672e6f89c14864d4f894e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;URL Aliasing Properties - Requires mod_alias&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;URLエイリアスプロパティ-mod_aliasが必要&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b9ea825bd14391d5966b7a7b202a3570a656a07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UTF Support&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UTFサポート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5dfdcbf09aacbea934efd1360801e226ca8d77cc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UTF-16&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UTF-16&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="212425a4024f1ef0de87e4cf8b1e9a8c15b95aae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UTF-32&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UTF-32&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6f2b1b4b910da7aa3c666dd35c17d15f8513894c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;UTF-8&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;UTF-8&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fcc82215207f27ea022b0ce6682fca5d6ac76645" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unicode Character Properties&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Unicode文字のプロパティ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="639289bdfaf3f0595a03a6b84ef557fcc1cd52ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unicode Property Support&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Unicodeプロパティのサポート&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db83c4cf262e2464e565eaf8ea2c1422304487ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit testing&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ユニットテスト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="43a4cff6a8d871779a741929a402543c5ab9078a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Unit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7b1728ab56003c8cc2c8a7727fe7a2759c813bcc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unix examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Unixの例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93afe6f7b72637cdfe0acc680bbd53e46e4bbe50" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unix systems&lt;/strong&gt;: If the emulator needs to write a crash dump, it uses the value of this variable to set the nice value for the process, thus lowering its priority. Valid range is 1-39 (higher values are replaced with 39). The highest value, 39, gives the process the lowest priority.</source>
          <target state="translated">&lt;strong&gt;Unixシステム&lt;/strong&gt;：エミュレータがクラッシュダンプを書き込む必要がある場合、エミュレータはこの変数の値を使用してプロセスのnice値を設定し、優先度を下げます。有効な範囲は1〜39です（高い値は39に置き換えられます）。最高値の39は、プロセスに最低の優先順位を与えます。</target>
        </trans-unit>
        <trans-unit id="cff6441c1c9dee17e2a2fbf8216914d4daca1e9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unix systems&lt;/strong&gt;: This variable gives the number of seconds that the emulator is allowed to spend writing a crash dump. When the given number of seconds have elapsed, the emulator is terminated.</source>
          <target state="translated">&lt;strong&gt;Unixシステム&lt;/strong&gt;：この変数は、エミュレータがクラッシュダンプの書き込みに費やすことができる秒数を示します。指定した秒数が経過すると、エミュレータは終了します。</target>
        </trans-unit>
        <trans-unit id="c5e1a8eef088676997c415248e1b77e22d546933" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Unsupported Escape Sequences&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;サポートされていないエスケープシーケンス&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9188873b53a0860b8d45c86992acf0ce33ebbec3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Usage:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Usage:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="956883372d82ddc6bcadcd7809fdc25274dc10f9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use of this function is generally deprecated.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;この関数の使用は、一般的に非推奨です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e08aeffe53bb8b02ce3c999cebeb132d914cae58" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use range of +pc flag&lt;/strong&gt; - Uses the printable character range set by the &lt;code&gt;erl(1)&lt;/code&gt; flag &lt;code&gt;+pc&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;+ pcフラグの範囲を使用&lt;/strong&gt; &lt;code&gt;erl(1)&lt;/code&gt; フラグ &lt;code&gt;+pc&lt;/code&gt; によって設定された印刷可能な文字範囲を使用します。</target>
        </trans-unit>
        <trans-unit id="ab266337aeda1b84c99648fd95ef797566f5b359" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use this functionality with extreme care.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;この機能は十分に注意して使用してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2eff6819a4350f78b2747a2aad7eabf25432d658" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Use:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Use:&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92f5d749d46f9d9bf535ddda48bffc400933fbe9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Useful functions:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;便利な機能：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="52d1e854bf0c053f687df534c53b92c0cf642b9f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Using Multiple Assertions&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;複数のアサーションを使用する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73fefe254db7aeda5995936058c12f547e2d2258" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Value Type&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;値のタイプ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dcd18e815181675a0b0ce5bdc7ffc713702199a4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Variable Bindings&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;変数バインディング&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ff327232459c3d011d3c312671f07e6c405874e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Verbs That Act Immediately&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;すぐに行動する動詞&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="85bdb15d710e9ab7a3e796baa06fa8e6433595be" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Verbs That Act after Backtracking&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;バックトラック後に動作する動詞&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc368de5f7107099e895be7d42a2f0ebcad9cc90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning options:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;警告オプション：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82fcd3483858d26a2d9529911b24ed1b1c850d09" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning:&lt;/strong&gt; If the traced function is tail-recursive, this match specification function destroys that property. Hence, if a match specification executing this function is used on a perpetual server process, it can only be active for a limited period of time, or the emulator will eventually use all memory in the host machine and crash. If this match specification function is inhibited using process trace flag &lt;code&gt;silent&lt;/code&gt;, tail-recursiveness still remains.</source>
          <target state="translated">&lt;strong&gt;警告：&lt;/strong&gt;トレースされた関数が末尾再帰の場合、この一致指定関数はそのプロパティを破棄します。したがって、この機能を実行する一致仕様を永続的なサーバープロセスで使用すると、限られた時間だけアクティブになるか、エミュレーターが最終的にホストマシンのすべてのメモリを使用してクラッシュします。この一致指定機能がプロセストレースフラグ &lt;code&gt;silent&lt;/code&gt; を使用して禁止されている場合でも、末尾再帰性は残ります。</target>
        </trans-unit>
        <trans-unit id="8d690edbcc79bca9849a98b679ec09cff525a6fa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Warning&lt;/strong&gt;: Source code can be reconstructed from the debug information. Use encrypted debug information (&lt;code&gt;encrypt_debug_info&lt;/code&gt;) to prevent this.</source>
          <target state="translated">&lt;strong&gt;警告&lt;/strong&gt;：デバッグ情報からソースコードを再構築できます。これを防ぐには、暗号化されたデバッグ情報（ &lt;code&gt;encrypt_debug_info&lt;/code&gt; ）を使用します。</target>
        </trans-unit>
        <trans-unit id="b5dd231878aee90bb28e3fb39fcd1b34ec629b7e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When a message is received and contains a non-empty trace token.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;メッセージが受信され、空でないトレーストークンが含まれている場合。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7ffb965db5688c5a462f47d1c9b20f48bd961e0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When information is received that also contains a non-empty trace token. For example, when a message is matched out in a receive expression, or when a new process is spawned.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;空でないトレーストークンも含む情報を受信したとき。たとえば、メッセージが受信式で一致した場合、または新しいプロセスが生成された場合です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ced27e35df25f64ab09126c04927e26e0ac3f3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When the process calls&lt;/strong&gt;&lt;code&gt;seq_trace:print(Label, Info)&lt;/code&gt;, &lt;code&gt;Label&lt;/code&gt;&lt;strong&gt;matches the label part of the trace token and the trace token print flag is &lt;code&gt;true&lt;/code&gt;.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プロセスが&lt;/strong&gt; &lt;code&gt;seq_trace:print(Label, Info)&lt;/code&gt; &lt;strong&gt;呼び出すと&lt;/strong&gt;、 &lt;code&gt;Label&lt;/code&gt; &lt;strong&gt;はトレーストークンのラベル部分と一致し、トレーストークンの印刷フラグは &lt;code&gt;true&lt;/code&gt; です。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="75a38026e3d57573376e619c71212dc983bf3f4d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When the process is about to pass along information to another process and the trace token is not empty.&lt;/strong&gt; This typically occurs when sending a message, but also, for example, when spawning another process.</source>
          <target state="translated">&lt;strong&gt;プロセスが情報を別のプロセスに渡そうとしていて、トレーストークンが空でない場合。&lt;/strong&gt;これは通常、メッセージを送信するときに発生しますが、たとえば、別のプロセスを生成するときにも発生します。</target>
        </trans-unit>
        <trans-unit id="7d852063182cc12d6890a4662d0d3dcde616865d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When the process is about to send a message and the trace token is not empty.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プロセスがメッセージを送信しようとしていて、トレーストークンが空でない場合。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8b0b983512edfbb2cffa1ac12531d5a04dd479f4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use:&lt;/strong&gt; C nodes can typically be used on device processors (as opposed to control processors) where C is a better choice than Erlang due to memory limitations or application characteristics, or both.</source>
          <target state="translated">&lt;strong&gt;使用するタイミング：&lt;/strong&gt; Cノードは通常、（制御プロセッサではなく）デバイスプロセッサで使用できます。Cは、メモリの制限またはアプリケーションの特性、あるいはその両方のため、Erlangよりも優れた選択肢です。</target>
        </trans-unit>
        <trans-unit id="e75de6396b64718b547eb32d0f3ff8a1a4cacfd5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use:&lt;/strong&gt; Distributed Erlang is primarily used for Erlang-Erlang communication. It can also be used for communication between Erlang and C, if the C program is implemented as a C node, see &lt;code&gt;&lt;a href=&quot;#cnode&quot;&gt;C and Java Libraries&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;使用する場合：&lt;/strong&gt;分散Erlangは主にErlang-Erlang通信に使用されます。また、ErlangとCの間の通信にも使用できます。CプログラムがCノードとして実装されている場合は、 &lt;code&gt;&lt;a href=&quot;#cnode&quot;&gt;C and Java Libraries&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="27d44e285af16648bdf09072d3f1a90d749bfc32" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use:&lt;/strong&gt; For programs running on the same or on another machine than the Erlang program.</source>
          <target state="translated">&lt;strong&gt;使用する場合：&lt;/strong&gt; Erlangプログラムと同じまたは別のマシンで実行されているプログラムの場合。</target>
        </trans-unit>
        <trans-unit id="0eba83f753c681c33ce1cb4d195ec608892d88bf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use:&lt;/strong&gt; In C code, in conjunction with Erlang binaries.</source>
          <target state="translated">&lt;strong&gt;使用する場合：&lt;/strong&gt; Erlangバイナリと組み合わせたCコード。</target>
        </trans-unit>
        <trans-unit id="6f79c67c4854bdfedd1ea0211439d057f8f03f0c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;When to use:&lt;/strong&gt; Ports can be used for all kinds of interoperability situations where the Erlang program and the other program runs on the same machine. Programming is fairly straight-forward.</source>
          <target state="translated">&lt;strong&gt;使用する&lt;/strong&gt;タイミング&lt;strong&gt;：&lt;/strong&gt;ポートは、Erlangプログラムと他のプログラムが同じマシンで実行されるあらゆる種類の相互運用性の状況で使用できます。プログラミングはかなり簡単です。</target>
        </trans-unit>
        <trans-unit id="e8d214445fcb064799ac6882ce79dc2ed8eb8be8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where to read more:&lt;/strong&gt; Distributed Erlang and some distributed programming techniques are described in the Erlang book.</source>
          <target state="translated">&lt;strong&gt;詳細情報：&lt;/strong&gt;分散Erlangといくつかの分散プログラミング手法は、Erlangブックで説明されています。</target>
        </trans-unit>
        <trans-unit id="8e5a307855d97fc51f6c43b16a3a5ca5cdd6d3ff" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where to read more:&lt;/strong&gt; Ports are described in section &quot;Miscellaneous Items&quot; of the Erlang book. Linked-in drivers are described in Appendix E.</source>
          <target state="translated">&lt;strong&gt;詳細情報：&lt;/strong&gt;ポートについては、Erlangブックの「その他の項目」セクションで説明されています。リンクされたドライバーについては、付録Eで説明します。</target>
        </trans-unit>
        <trans-unit id="867676603519cb50f3cbc25ab6a344bde4761321" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where to read more:&lt;/strong&gt; See the &lt;code&gt;ei_connect&lt;/code&gt; part of the &lt;code&gt;&lt;a href=&quot;erl_interface&quot;&gt;Erl_Interface&lt;/a&gt;&lt;/code&gt; documentation. The programmer also needs to be familiar with TCP/IP sockets, see Sockets in &lt;code&gt;&lt;a href=&quot;#sockets&quot;&gt;Standard Protocols&lt;/a&gt;&lt;/code&gt; and Distributed Erlang in &lt;code&gt;&lt;a href=&quot;#dist&quot;&gt;Built-In Mechanisms&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;続きを読むする場所：&lt;/strong&gt;参照してください &lt;code&gt;ei_connect&lt;/code&gt; の一部 &lt;code&gt;&lt;a href=&quot;erl_interface&quot;&gt;Erl_Interface&lt;/a&gt;&lt;/code&gt; のマニュアルを参照して。プログラマーは、TCP / IPソケットにも精通している必要があります。「 &lt;code&gt;&lt;a href=&quot;#sockets&quot;&gt;Standard Protocols&lt;/a&gt;&lt;/code&gt; ソケット」および「 &lt;code&gt;&lt;a href=&quot;#dist&quot;&gt;Built-In Mechanisms&lt;/a&gt;&lt;/code&gt; 分散Erlang 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="fdee97e72ebbb80e610059c6a0c9f89d4c2b33d9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where to read more:&lt;/strong&gt; See the &lt;code&gt;erl_connect&lt;/code&gt; part of the Erl_Interface documentation. The programmer also needs to be familiar with TCP/IP sockets, see Sockets in &lt;code&gt;&lt;a href=&quot;#sockets&quot;&gt;Standard Protocols&lt;/a&gt;&lt;/code&gt; and Distributed Erlang in &lt;code&gt;&lt;a href=&quot;#dist&quot;&gt;Built-In Mechanisms&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;詳細情報：&lt;/strong&gt; Erl_Interfaceドキュメントの &lt;code&gt;erl_connect&lt;/code&gt; の部分を参照してください。プログラマーは、TCP / IPソケットに精通している必要もあります。 &lt;code&gt;&lt;a href=&quot;#sockets&quot;&gt;Standard Protocols&lt;/a&gt;&lt;/code&gt; ソケットおよび &lt;code&gt;&lt;a href=&quot;#dist&quot;&gt;Built-In Mechanisms&lt;/a&gt;&lt;/code&gt; 分散アーランを参照してください。</target>
        </trans-unit>
        <trans-unit id="fe70162a70c66782f6fea6ea0df5db1f9aa83af8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where to read more:&lt;/strong&gt; See the &lt;code&gt;gen_tcp&lt;/code&gt; and the &lt;code&gt;gen_udp&lt;/code&gt; manual pages in Kernel.</source>
          <target state="translated">&lt;strong&gt;詳細情報：&lt;/strong&gt;カーネルの &lt;code&gt;gen_tcp&lt;/code&gt; および &lt;code&gt;gen_udp&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="927cf926b7ccb05b94c6453194ba0a11f0513b70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Where to read more:&lt;/strong&gt; See the Erlang Interface User's Guide, Command Reference, and Library Reference. In Erlang/OTP R5B, and earlier versions, the information is part of the Kernel application.</source>
          <target state="translated">&lt;strong&gt;詳細情報：&lt;/strong&gt; Erlangインターフェースユーザーガイド、コマンドリファレンス、およびライブラリリファレンスを参照してください。Erlang / OTP R5B以前のバージョンでは、情報はカーネルアプリケーションの一部です。</target>
        </trans-unit>
        <trans-unit id="5d73c66322e136bc3c1198cf72edf8afb85406aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Windows examples:&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Windowsの例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="683ad19fe11a55048fbcae65bfa11eec0e3a36b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Write locks&lt;/strong&gt;. Whenever a transaction writes to a record, write locks are first set on all replicas of that particular record.</source>
          <target state="translated">&lt;strong&gt;ロックを書き込み&lt;/strong&gt;ます。トランザクションがレコードに書き込むときは常に、最初にその特定のレコードのすべてのレプリカに書き込みロックが設定されます。</target>
        </trans-unit>
        <trans-unit id="000d5f547487ab796a34599fdabfc55e1d2d47c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Write table locks&lt;/strong&gt;. If a transaction writes many records to one table, a write lock can be set on the entire table.</source>
          <target state="translated">&lt;strong&gt;テーブルロックを書き込みます&lt;/strong&gt;。トランザクションが1つのテーブルに多くのレコードを書き込む場合、書き込みロックをテーブル全体に設定できます。</target>
        </trans-unit>
        <trans-unit id="55fa67e46db9f799291ac958244ccf740e03359b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xan&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Xan&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2a89ecec79092a24bab2f691315300bcf6916177" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xps&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Xps&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e983bc4ae414e102565418c4b33fd82836f38cd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xsp&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Xsp&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1bc7cd940da192c8362b0e661627f7473ffed8bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Xwd&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Xwd&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="640cbbf63d34b74ac159aed56a3e5e94a41166fe" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Yielding NIF&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;NIFの生成&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b7f59427cb8ca11ff2fc47467ed305bb343a8e39" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;You typically never want to disable time correction&lt;/strong&gt;. Previously a performance penalty was associated with time correction, but nowadays it is usually the other way around. If time correction is disabled, you probably get bad scalability, bad performance, and bad time measurements.</source>
          <target state="translated">&lt;strong&gt;通常、時刻修正を無効にすることは決してありません&lt;/strong&gt;。以前はパフォーマンスのペナルティが時間の修正に関連付けられていましたが、現在では通常、逆になります。時間補正が無効になっていると、おそらく、スケーラビリティ、パフォーマンス、および時間の測定が正しく行われません。</target>
        </trans-unit>
        <trans-unit id="07f32756242b82f958a367cbf2846897d616a4c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Z&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Z&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2e66194b50e768dab210079ef55829154606813f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Zl&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Zl&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5190418a5fd3998f634461e42072875bcb638695" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Zp&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Zp&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de7f121ce5fbdbe42d82c758598c7b9f5b2ee41b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;Zs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;Zs&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc6e7d58c504c538cc5499b6b43038d72cd32826" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:alnum:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:alnum:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bb1bed882930089a689ddd508cbaa4b20756c168" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:alpha:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:alpha:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="da839193c866ff3e3d4e9b19d9aa311e44a3a059" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:blank:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:blank:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e0d634d2773c59b699c7afc5e3e14f236296192c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:digit:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:digit:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d406f25fe8eb1966c4e5a1243190f7274612e642" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:graph:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:graph:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="511dccbf343ceec4d0b32b7b1dd782a9090e982a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:lower:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:lower:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f26e73931ec381a15499a6fb356e18d52a26bdd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:print:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:print:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cb6e7b268fbd43ae4440c6d8e45cf7a1e5a8a995" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:punct:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:punct:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="abef246d9f6eb9cc84d9f366f63aa956d768f2dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:space:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:space:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8ce5c428d3e9ab60a43b70f0a7fcb2b402b11a1d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:upper:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:upper:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fa8f491178b9fb205a0d7c349828c565dceb88de" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[:word:]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[:word:]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0c205ab07cde9f86d32b8e94f14134107c1fc68" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3a6fb1942d9b4a7e4706fee7face6d909f9577ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[Character1,Character2,...]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[Character1,Character2,...]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f69ca32e36b1bce865deab6522249770cdbc57f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[:&amp;gt;:]]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[[:&amp;gt;:]]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8dada3995e74655caad8cce3fccd9f146b08105c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[[:&amp;lt;:]]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[[:&amp;lt;:]]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1d877ae95e674b3a3a33d584f25df8191a007f45" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[bytes]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[bytes]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="546f7d0a93cbdccad8ef17c62b00f21f5b2beb34" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;[date]&lt;/strong&gt; access to &lt;strong&gt;path&lt;/strong&gt; failed for &lt;strong&gt;remotehost&lt;/strong&gt;, reason: &lt;strong&gt;reason&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;[date] &lt;/strong&gt;&lt;strong&gt;remotehostの&lt;/strong&gt;&lt;strong&gt;パス&lt;/strong&gt;へのアクセスに失敗し&lt;strong&gt;ました&lt;/strong&gt;、理由：&lt;strong&gt;reason&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="022417f69f55da77fc3e7e24f328c023b4f7ac18" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\0113&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\0113&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="347f425e9c8932ded5fee2b30a32bfd3f727dad5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\011&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\011&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83470cf1dacba95007e8cce26e8592ea20f3ac2f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\040&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\040&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9f793eef9960f6dde09e5c36c1f971c8f248ad8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\0dd&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\0dd&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a26fdf47cbcbf907cb87ed479c7aeec9bde6d35b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\113&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\113&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f0cd68ff02370703b41c0e794310536e93479a55" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\11&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\11&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ccb8997ab00e7c53814664bd4f7f401fdadc0ca" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\377&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\377&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0614e89035860acb52441d73811a60c7e664e164" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\40&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\40&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2ea4e666487cac0c18aa9ce57391f59ac36ffb01" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\7&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\7&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef122748a0fb3d5315dffca2515488a4b2c464b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\81&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\81&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80dbe6a410a5b9e5ce96803a148db4e8682cd13d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="74bf99a8f8ae42edd1220ab37054108ec5549a75" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\A&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\A&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7902086bb272918fdeb16d1ec546c9208f8823b8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\B&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\B&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ffa444977a92e535852d1824a22af1fc25840e6d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\D&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\D&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3213537a747ec43d86a771afa5e4f95f2b6a5d33" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\G&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\G&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5f7fa536186b6df05f9b97159fc6993662a4f09e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\H&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\H&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="877ae3260f599b9906b10e01aba1da6d11939050" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\P{&lt;strong&gt;xx&lt;/strong&gt;}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\P{&lt;strong&gt;xx&lt;/strong&gt;}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64f33c3245caf67420774e77365b43e30e5af220" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\S&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\S&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9be0ca797b7a8a79d5e8bccda5db2154631e903d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\V&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\V&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b5d2957bc7afe2da47e7443abab2f50626378fdf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\W&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\W&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9b1a737d714ebf2b6d2f0559b979276627121bd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\X&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\X&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="95b88c2bc3c5580374bb1b753ff057fcf9b9b48e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\Z&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\Z&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="80927852f45ad948226a9426f5418c39527673a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\a&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\a&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83bbc3247e10b8c3768fb5644e427d19591f3657" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\b&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\b&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ae38e663bcb8972fbcd9401ef076c84100d2573a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\cx&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\cx&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d78e697ab8f32611df817bee799e7c3b6c6fcd62" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\d&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\d&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="01afc688fd160a9e1ea1a3e4aadff9e71da9e5ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\ddd&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\ddd&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1432dedc4dc277f33e277695741242ac9530beda" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\e&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\e&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bca77bf67882a1b62f194bbbefcffc54f5e3fa9d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\f&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\f&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3517045b2290ab736e65f5f1aa269cfbff2d034b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\h&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\h&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="03ed1803d59cdd4245ada26d0afc3f2e1fd38272" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\n&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\n&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="03bd3081bf7734f46a8840afefd6d4a20cfd727d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\o{ddd..}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\o{ddd..}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6eb98813222300ebe37350437df39641ac494795" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\p{&lt;strong&gt;xx&lt;/strong&gt;}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\p{&lt;strong&gt;xx&lt;/strong&gt;}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1566b3a7ef71176f5d02f8b77c08b8a557155dbd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\r&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\r&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d81f1d94276948f0e0355fc1eb488a2128aa1417" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\s&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\s&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="30d0599d3e2e0980e882207e0aea8fb2253180aa" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\t&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\t&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9a047af11c4ef8fddc47edfc7dbd9f1da64251b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\v&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\v&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="adc39da1081a06c52323a37d72d8dc3464720cf5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\w&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\w&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e37884b4a3e733936043f1d640d0d35f9210545a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\xhh&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\xhh&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ce2a8fea03d09ac290f43e5831ded7f400004591" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\x{hhh..}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\x{hhh..}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="17fcec33ba1681de5c80f49ecda999a9dee1f052" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;\z&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;\z&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c632d88673ef66ae2a8d6f57d344156223f5815" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bc434205b2a4a82179ce2e42a5a084ae90964243" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;^&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;^&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d436603b6cb8743e9d9667b22dc76f0def340854" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;aio_pool_get&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;aio_pool_get&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2611532b5777cece2b459d11b2f3feef8d4709a6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;aio_pool_put&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;aio_pool_put&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0954314b0ec8ce640aaf726efb9c1ab730d1b667" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;all&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;all&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="441bbe6051a7dc46095955ebcc19ddc5ce2997c4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;alnum&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;alnum&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7619f090f2c3660aae20b6f1b99723586632f24f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;alpha&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;alpha&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="64c20f72e2f894763778366f92af6f25b6780d0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ansi&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ansi&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1acb51815bdc03b6e3926ecfccfc11399e8fe919" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ascii&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ascii&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6ca32e2c2892ffa8ae86fe474209bf38526c5f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;atom()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;atom()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9dda0c1378a56cc0c514541d003015d873fc4f0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;auth_key attributes - see manual page for sshd.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;auth_key属性-sshdのマニュアルページを参照してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fe929d127808914c8778bc317316c8cab77ef19c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;authors := [binary()]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;著者：= [binary（）]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ff4e6745b71be48d06fdf941180f980a6ca3c810" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beam_makeops&lt;/strong&gt; defines several built-in macros and pre-bound variables.</source>
          <target state="translated">&lt;strong&gt;Beam_makeops&lt;/strong&gt;は、いくつかの組み込みマクロと事前にバインドされた変数を定義します。</target>
        </trans-unit>
        <trans-unit id="7d1d04de83e911d31f4fa594f4428194ccf33d3d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;beam_makeops&lt;/strong&gt; is found in &lt;code&gt;$ERL_TOP/erts/emulator/utils&lt;/code&gt;. Options start with a hyphen (&lt;code&gt;-&lt;/code&gt;). The options are followed by the name of the input files. By convention, all input files have the extension &lt;code&gt;.tab&lt;/code&gt;, but is not enforced by &lt;strong&gt;beam_makeops&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;beam_makeops&lt;/strong&gt;は &lt;code&gt;$ERL_TOP/erts/emulator/utils&lt;/code&gt; ます。オプションはハイフン（ &lt;code&gt;-&lt;/code&gt; ）で始まります。オプションの後には、入力ファイルの名前が続きます。慣例により、すべての入力ファイルの拡張子は &lt;code&gt;.tab&lt;/code&gt; ですが、beam_makeopsによって&lt;strong&gt;強制&lt;/strong&gt;されることはありません。</target>
        </trans-unit>
        <trans-unit id="7b8387c98b918bc7ff8dd12290c6c75eed5f480b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ber&lt;/strong&gt; - ASN.1 BER.</source>
          <target state="translated">&lt;strong&gt;ber&lt;/strong&gt; -ASN.1 BER。</target>
        </trans-unit>
        <trans-unit id="f94e31e9be2e19c073db3a137db9749bd3b7c37f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;blank&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;blank&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a269911c697b61b5807bb07903f152a80eb4a69f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cancel&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;cancel&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf8d0473289f134663be0800d5486bc400c4d28d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;carrier_create&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;carrier_create&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c371162ba94ab9a04d5d1625ad8c3a3f014755cf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;carrier_destroy&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;carrier_destroy&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a0664ad9bf31196f7d132cc5f4b33ecb5ffd92f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;carrier_pool_get&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;carrier_pool_get&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b0f1d716f0c588b0de0233c55c35a775eb563d23" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;carrier_pool_put&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;carrier_pool_put&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e58c3bf39135fbe1ea040ff68d4fa2475ee873d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cerl() = &lt;code id=&quot;type-cerl&quot;&gt;&lt;a href=&quot;cerl#type-cerl&quot;&gt;cerl:cerl()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;cerl() = &lt;code id=&quot;type-cerl&quot;&gt;&lt;a href=&quot;cerl#type-cerl&quot;&gt;cerl:cerl()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d1a0cc52d83fc48a3a412e921c90f8142c4ede3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cert_expired&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;cert_expired&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="403954061e690ed3222c1dd3cb4dcf0b8e82f735" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cntrl&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;cntrl&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="60bb408ecfb1caddedff95ca4290e491ddc314e1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;columns&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;columns&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8c82e2f7db23e61c0c572cf2ed16c241dca074a9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;compact&lt;/strong&gt; - the compact text encoding uses the shortest possible keywords and no optional white spaces.</source>
          <target state="translated">&lt;strong&gt;コンパクト&lt;/strong&gt; -コンパクトテキストエンコーディングでは、可能な限り短いキーワードを使用し、オプションの空白は使用しません。</target>
        </trans-unit>
        <trans-unit id="c01e68ce95e4dbb23c3129d3ceeab957d2ae94a2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;cross_references := [module() | {module(), {Kind, Name, Arity}}]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;cross_references：= [module（）| {module（）、{種類、名前、アリティ}}]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a61b1bb721f55a8e33e8530d097d744b172f2368" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;default&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;default&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c9f544f20a91ec6abc14d14d12c97d48808fff6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;deprecated := binary()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;非推奨：= binary（）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf09f734fc0b75a826599ca98c19375fc55b04e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;diameterc [&amp;lt;options&amp;gt;] &amp;lt;file&amp;gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;diameterc [&amp;lt;オプション&amp;gt;] &amp;lt;ファイル&amp;gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="df470f0d8ed680110e831fa517de656fbd290ed5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;digit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;digit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a7402254c836d011c15b91753bfa8382e7ef7324" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;docEntity() = #xmlDocument{} | [&lt;code id=&quot;type-docEntity&quot;&gt;&lt;a href=&quot;#type-docNodes&quot;&gt;docNodes()&lt;/a&gt;&lt;/code&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;docEntity（）= #xmlDocument {} | [ &lt;code id=&quot;type-docEntity&quot;&gt;&lt;a href=&quot;#type-docNodes&quot;&gt;docNodes()&lt;/a&gt;&lt;/code&gt; ]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a6d7b3a76035e8d86e6212c67a0160a3c6679061" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;document() = &lt;code id=&quot;type-document&quot;&gt;&lt;a href=&quot;#type-xmlElement&quot;&gt;xmlElement()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-xmlDocument&quot;&gt;xmlDocument()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;document（）= &lt;code id=&quot;type-document&quot;&gt;&lt;a href=&quot;#type-xmlElement&quot;&gt;xmlElement()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-xmlDocument&quot;&gt;xmlDocument()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="adff1a69e292f45feacaa60e2c93dd420de70508" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_call&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_call&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="db9d67ff7c11b6a8160cee19df4fe1a80a3c008d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_control&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_control&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f3371614aa3907325c4372da2f80a95828c9c0e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_flush&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_flush&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bdfd573485d5480b1819fe27886d77b42249b1bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_init&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_init&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="967ea142bd43041cd1039792edab6a9f87ef147d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_output&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_output&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c38a5019bc47784dd4cf00bbe45fc882579c574b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_outputv&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_outputv&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc589ae8065363eea25fdbcc6d665ddf3eee8ed4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_process_exit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_process_exit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6c9c27c36e9efc626e6b1ffa4fd8dab0a58a1989" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_ready_async&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_ready_async&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c75fb235fcfb0de0770e5b494b79ae4a91c3191b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_ready_input&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_ready_input&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e13415ec47d09bd41a37449a48d7670c246f69e5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_ready_output&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_ready_output&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e97dcda714ed1800e73056b9364d44098a046d8f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_start&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_start&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="57e94c37ea9a920ebf2114edd2783b0c5703a55d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_stop&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_stop&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eea3e061c5c44ca3ab9352153389f8a5e9399f4b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_stop_select&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_stop_select&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f270149bca39e22f96a9fec204ab75953d4a373b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;driver_timeout&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;driver_timeout&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e240b2b7850e4f60672f13ebe644d6e0f57d6b70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;edit_url := binary()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;edit_url := binary()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0fd42c47db29c7b173677cecf8a1a6c01bf414ee" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;encoding&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;encoding&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ad758d9ed82593a680c55a9a06596820d904561c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;env() = [{Key::&lt;code id=&quot;type-env&quot;&gt;&lt;a href=&quot;#type-id&quot;&gt;id()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-pattern_or_patterns&quot;&gt;pattern_or_patterns()&lt;/a&gt;&lt;/code&gt;}]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;env（）= [{Key :: &lt;code id=&quot;type-env&quot;&gt;&lt;a href=&quot;#type-id&quot;&gt;id()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-pattern_or_patterns&quot;&gt;pattern_or_patterns()&lt;/a&gt;&lt;/code&gt; }]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc1fa9f708b903b5fd673aa47206cb55e891b3dc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;erl&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;erl&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14374e45b2c4952b39574c24bea5d3895de7337a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;erl_dist&lt;/strong&gt; - Erlang's native distribution format. Not standardized as a valid Megaco/H.248 encoding, but included as a reference due to its well known performance characteristics. Erlang is a dynamically typed language and any Erlang data structure may be serialized to the erl_dist format by using built-in functions.</source>
          <target state="translated">&lt;strong&gt;erl_dist&lt;/strong&gt; -Erlangのネイティブ配布形式。有効なMegaco / H.248エンコーディングとして標準化されていませんが、そのよく知られているパフォーマンス特性によりリファレンスとして含まれています。Erlangは動的に型付けされた言語であり、組み込み関数を使用することにより、任意のErlangデータ構造をerl_dist形式にシリアライズできます。</target>
        </trans-unit>
        <trans-unit id="982a588cc6f3d18d05bf76889fa3938f10a3d3ec" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;erl_parse() = &lt;code id=&quot;type-erl_parse&quot;&gt;erl_parse:abstract_clause()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_expr()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_form()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_type()&lt;/code&gt; | &lt;code&gt;erl_parse:form_info()&lt;/code&gt; | &lt;code&gt;erl_parse:af_binelement(term())&lt;/code&gt; | &lt;code&gt;erl_parse:af_generator()&lt;/code&gt; | &lt;code&gt;erl_parse:af_remote_function()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;erl_parse() = &lt;code id=&quot;type-erl_parse&quot;&gt;erl_parse:abstract_clause()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_expr()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_form()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_type()&lt;/code&gt; | &lt;code&gt;erl_parse:form_info()&lt;/code&gt; | &lt;code&gt;erl_parse:af_binelement(term())&lt;/code&gt; | &lt;code&gt;erl_parse:af_generator()&lt;/code&gt; | &lt;code&gt;erl_parse:af_remote_function()&lt;/code&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b2e3cd91ec92a8d51206e3af034a077d6b2a585" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;erl_parse() = &lt;code id=&quot;type-erl_parse&quot;&gt;erl_parse:abstract_clause()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_expr()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_form()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_type()&lt;/code&gt; | &lt;code&gt;erl_parse:form_info()&lt;/code&gt; | {bin_element, term(), term(), term(), term()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;erl_parse（）= &lt;code id=&quot;type-erl_parse&quot;&gt;erl_parse:abstract_clause()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_expr()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_form()&lt;/code&gt; | &lt;code&gt;erl_parse:abstract_type()&lt;/code&gt; | &lt;code&gt;erl_parse:form_info()&lt;/code&gt; | {bin_element、term（）、term（）、term（）、term（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0d32aa565d3d3fa46b94700b4f8a8632c35725c9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;external format&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;外部フォーマット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="919e04385eb6ce3b1f9a831b3ccc0b774dd71f15" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;filename() = &lt;code id=&quot;type-filename&quot;&gt;file:filename()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;filename（）= &lt;code id=&quot;type-filename&quot;&gt;file:filename()&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bf1dc66a4ac380237656e97a3313455e73849740" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;forms() = &lt;code id=&quot;type-forms&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; | [&lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;form（）= &lt;code id=&quot;type-forms&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; ]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6112eb9c6df9a87be63fc2658fdb4f9a5cff56d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function_call&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;function_call&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3ae35accca1dcbb6be486fe939f4b1f10306e1bb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function_exception&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;function_exception&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f457dd7580237e7e1ec56346249342ccda49f596" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;function_return&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;function_return&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="90f2e60ddade94b013b68edf5909eaf9011448b6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gc_major_end&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;gc_major_end&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="45ac89e349a77b9469348172b4453af9614dd1b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gc_major_start&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;gc_major_start&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3034c278ad1c15a5784ef33e42cf5e5ecf21db6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gc_minor_end&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;gc_minor_end&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="239dbfaebad523ba0dbb495cc5d4e272c30b2242" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;gc_minor_start&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;gc_minor_start&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2d5b15e0f8bab289d54f74719a8b2a0631a462c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;global&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;global&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ec0db9d74085161101d9ddefd9268e98c66d616" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;graph&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;graph&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7d3544cc2cafa0a329062b0e756e15232948d701" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;guard() = none | &lt;code id=&quot;type-guard&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; | [&lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;] | [[&lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;]]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;guard（）=なし| &lt;code id=&quot;type-guard&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; ] | [[ &lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; ]]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="922fd25e5efe06dfedb81e9155e1ee78a72230fb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;guard_test() = (&lt;code id=&quot;type-guard_test&quot;&gt;&lt;a href=&quot;#type-env&quot;&gt;env()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; boolean()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;guard_test（）=（ &lt;code id=&quot;type-guard_test&quot;&gt;&lt;a href=&quot;#type-env&quot;&gt;env()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; boolean（）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3cbe79767bda5f0a12839c1d334e4137fd55088e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;guarded_action() = &lt;code id=&quot;type-guarded_action&quot;&gt;&lt;a href=&quot;#type-switch_action&quot;&gt;switch_action()&lt;/a&gt;&lt;/code&gt; | {&lt;code&gt;&lt;a href=&quot;#type-guard_test&quot;&gt;guard_test()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-switch_action&quot;&gt;switch_action()&lt;/a&gt;&lt;/code&gt;}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;guarded_action（）= &lt;code id=&quot;type-guarded_action&quot;&gt;&lt;a href=&quot;#type-switch_action&quot;&gt;switch_action()&lt;/a&gt;&lt;/code&gt; | { &lt;code&gt;&lt;a href=&quot;#type-guard_test&quot;&gt;guard_test()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-switch_action&quot;&gt;switch_action()&lt;/a&gt;&lt;/code&gt; }&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f36f07ad85f34fab08fb167ba76908b5a293385e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;guarded_actions() = &lt;code id=&quot;type-guarded_actions&quot;&gt;&lt;a href=&quot;#type-guarded_action&quot;&gt;guarded_action()&lt;/a&gt;&lt;/code&gt; | [&lt;code&gt;&lt;a href=&quot;#type-guarded_action&quot;&gt;guarded_action()&lt;/a&gt;&lt;/code&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;guarded_actions（）= &lt;code id=&quot;type-guarded_actions&quot;&gt;&lt;a href=&quot;#type-guarded_action&quot;&gt;guarded_action()&lt;/a&gt;&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;#type-guarded_action&quot;&gt;guarded_action()&lt;/a&gt;&lt;/code&gt; ]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19d5b8087254eab85c2610d46d6fc729ebe2bd5e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;halt logs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ログを停止する&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d597d828679750d1b891178e2ee94cf1eeeb92d1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;hook() = (&lt;code id=&quot;type-hook&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-context&quot;&gt;context()&lt;/a&gt;&lt;/code&gt;, Continuation) -&amp;gt; &lt;code&gt;&lt;a href=&quot;prettypr#type-document&quot;&gt;prettypr:document()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;hook（）=（ &lt;code id=&quot;type-hook&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-context&quot;&gt;context()&lt;/a&gt;&lt;/code&gt; 、Continuation）-&amp;gt; &lt;code&gt;&lt;a href=&quot;prettypr#type-document&quot;&gt;prettypr:document()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eff6bbdb39d0c3c5e3eccf11e45a576bbe74a4c0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;i&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;i&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1172e8b916d69dabf5dc7bfa09177e3005299e64" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;inet | inet6 | packet&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;inet | inet6 | パケット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d175afb848913c9c9b01631ac6221335549fbc10" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;info_pair() = {&lt;code id=&quot;type-info_pair&quot;&gt;&lt;a href=&quot;#type-key&quot;&gt;key()&lt;/a&gt;&lt;/code&gt;, term()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;info_pair（）= { &lt;code id=&quot;type-info_pair&quot;&gt;&lt;a href=&quot;#type-key&quot;&gt;key()&lt;/a&gt;&lt;/code&gt; 、term（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acf845869bef274b05c8babb19794ac041233b84" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;integer()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;integer()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d705a629429feba5e885936e2e2c07af2c16fe7b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;internal format&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;内部フォーマット&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ccaca9cb5a03b8bbcd2fe54b598d888376d4c83" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;invalid_issuer&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;invalid_issuer&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a9a64aba7a7e1651322919c5762bdebf7efee1d8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;invalid_key_usage&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;invalid_key_usage&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8bc9b806da71b809af0493154684710918f0bc99" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;invalid_signature&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;invalid_signature&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="93426f1015c50060342a34f545749b739c9ef8ea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;known_host attributes - see manual page for sshd.&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;既知のホスト属性-sshdのマニュアルページを参照してください。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="810c57a1d8569a221fd17635fde708af1d882f96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;location() = &lt;code id=&quot;type-location&quot;&gt;erl_anno:location()&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;location（）= &lt;code id=&quot;type-location&quot;&gt;erl_anno:location()&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2ed965b0560748016406cac65ba061b33a1356b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;lower&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;lower&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="652aef6dab9811ad8e0ed22f93a0a06eb48d1547" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;m&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;m&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="37d234b2d9a959a4cf124ef1a9481ae4ddacc782" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;match contexts&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;一致するコンテキスト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="068c3f4e1bdbb5409981c0a2e780f439ea205f98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;meas&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;meas&lt;/strong&gt;:</target>
        </trans-unit>
        <trans-unit id="19315ab96b4725c815903c29b0f6dddc3d8ae718" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;message_receive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;message_receive&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="67d7395fbfd686708117722f2585f60354032673" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;message_send&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;message_send&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="206e175c0a98c9b647218a441907fa3ea31ad844" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;missing_basic_constraint&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;missing_basic_constraint&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f33b8f47c536cfb134597f18d4b8d579faabd788" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;monotonic&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;monotonic&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19c8a6661ea568ebbea8823e90547d902c5cf367" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mstone1 and mstone2&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;mstone1およびmstone2&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="620a70d330fd2a7acb147c385f7700df4e360e6f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;mstone1&lt;/strong&gt; creates a process for each codec config supported by the megaco application and let them run for a specific time (all at the same time), encoding and decoding megaco messages. The number of messages processed in total is the mstone1(1) value.</source>
          <target state="translated">&lt;strong&gt;mstone1&lt;/strong&gt;は、megacoアプリケーションがサポートする各コーデック構成のプロセスを作成し、それらを特定の時間（同時に）実行し、megacoメッセージをエンコードおよびデコードします。合計で処理されるメッセージの数は、mstone1（1）の値です。</target>
        </trans-unit>
        <trans-unit id="299313b186d569e7f2652b1c56e1f05c191586f3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; can optionally be preceded by &lt;code&gt;-&lt;/code&gt; to indicate that it has been obsoleted. The compiler is not allowed to generate BEAM files that use obsolete instructions and the loader will refuse to load BEAM files that use obsolete instructions.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;オプションで、&lt;strong&gt;名前の&lt;/strong&gt;前に &lt;code&gt;-&lt;/code&gt; を付けて、廃止されたことを示すことができます。コンパイラーは、廃止された命令を使用するBEAMファイルを生成することを許可されておらず、ローダーは、廃止された命令を使用するBEAMファイルのロードを拒否します。</target>
        </trans-unit>
        <trans-unit id="32f2292852a4d6fd49e7c035619c234d5b46c228" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt; is an identifier starting with a lowercase letter. &lt;strong&gt;arity&lt;/strong&gt; is an integer denoting the number of operands.</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt;は、小文字で始まる識別子です。&lt;strong&gt;arity&lt;/strong&gt;は、オペランドの数を示す整数です。</target>
        </trans-unit>
        <trans-unit id="543753c79a84c88c7b55a71404fbf380e054b027" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt;/&lt;strong&gt;arity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt;/&lt;strong&gt;arity&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="29bb74d21aae969bbc709a4fa94ea4839231f35a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name&lt;/strong&gt;=&lt;strong&gt;value&lt;/strong&gt;[;]</source>
          <target state="translated">&lt;strong&gt;name&lt;/strong&gt;=&lt;strong&gt;value&lt;/strong&gt;[;]</target>
        </trans-unit>
        <trans-unit id="475c840ceae5b87518a953226e65956a190b345a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;name_not_permitted&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;name_not_permitted&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a3e3d35c2611d5078a860d9d332e09f5aee61363" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;op&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;op&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b84e55279b0dd6b32bad5628bea517999d8438c2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;opcode&lt;/strong&gt; is an integer greater than or equal to 1.</source>
          <target state="translated">&lt;strong&gt;オペコード&lt;/strong&gt;は1以上の整数です。</target>
        </trans-unit>
        <trans-unit id="bd0f736a6d18a8dcdf3517ac9a8436adf7fccf3f" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;opcode&lt;/strong&gt;: [-]&lt;strong&gt;name&lt;/strong&gt;/&lt;strong&gt;arity&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;オペコード&lt;/strong&gt;：[-]&lt;strong&gt;名前&lt;/strong&gt;/&lt;strong&gt;アリティ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0393da8702747dca276338389406151edebf2c90" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;ordset(T) = &lt;code id=&quot;type-ordset&quot;&gt;ordsets:ordset(T)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ordset（T）= &lt;code id=&quot;type-ordset&quot;&gt;ordsets:ordset(T)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6524867ccbc90863aa02209d0a0c70e303ba9b24" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pattern() = &lt;code id=&quot;type-pattern&quot;&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;パターン（）= &lt;code id=&quot;type-pattern&quot;&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8f1173259d854ce0d6eebef14456425830616bfd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pattern_or_patterns() = &lt;code id=&quot;type-pattern_or_patterns&quot;&gt;&lt;a href=&quot;#type-pattern&quot;&gt;pattern()&lt;/a&gt;&lt;/code&gt; | [&lt;code&gt;&lt;a href=&quot;#type-pattern&quot;&gt;pattern()&lt;/a&gt;&lt;/code&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;pattern_or_patterns（）= &lt;code id=&quot;type-pattern_or_patterns&quot;&gt;&lt;a href=&quot;#type-pattern&quot;&gt;pattern()&lt;/a&gt;&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;#type-pattern&quot;&gt;pattern()&lt;/a&gt;&lt;/code&gt; ]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc26944274d0307cff7f381b87fa1b18150abfdd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;per&lt;/strong&gt; - ASN.1 PER. Not standardized as a valid Megaco/H.248 encoding, but included for the matter of completeness as its encoding is extremely compact.</source>
          <target state="translated">&lt;strong&gt;あたり&lt;/strong&gt; -ASN.1 PER。有効なMegaco / H.248エンコーディングとして標準化されていませんが、そのエンコーディングは非常にコンパクトであるため、完全を期すために含まれています。</target>
        </trans-unit>
        <trans-unit id="9756e9691aa5472aee069934f1e33992d5d8b8b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port_exit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;port_exit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="508beda2782931b6d876d490800694ea0a9d5157" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port_link&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;port_link&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3abaa61b2146bbaf0d95e05c077331bf2fbe0fb0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port_open&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;port_open&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76aadc035ccd7c98f5c6faf4b7e51ad1f97a5788" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;port_scheduled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;port_scheduled&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b2238e75aa48651c78e194f6d65ec8ce125f3f8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;positive&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;positive&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b7c90de6a7a699196f57b2fdfa297e004378740" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;pretty&lt;/strong&gt; - pretty printed text. In the text encoding, the protocol stack implementors have the choice of using a mix of short and long keywords. It is also possible to add white spaces to improve readability. The pretty text encoding utilizes long keywords and an indentation style like the text examples in the Megaco/H.248 specification.</source>
          <target state="translated">&lt;strong&gt;pretty-&lt;/strong&gt;きれいに印刷されたテキスト。テキストエンコーディングでは、プロトコルスタックの実装者は、短いキーワードと長いキーワードを組み合わせて使用​​することを選択できます。読みやすくするために空白を追加することもできます。きれいなテキストエンコーディングは、Megaco / H.248仕様のテキスト例のように、長いキーワードとインデントスタイルを利用します。</target>
        </trans-unit>
        <trans-unit id="f9e82212ade49b7073ee3694c43469eb3fc25265" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prev3a&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;prev3a&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5269b905750414c8696513f648ee8b77424216eb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prev3b&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;prev3b&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9c5848fa2b1772d6beb9755e9d4872963f0cd084" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;prev3c&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;prev3c&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc55d22fcee5bd34e279468192285bfe40162d61" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;print&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;print&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1f21507c772efb3106d3e5fba78791357b2f56f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;private decrypt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プライベート復号化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dbb046ca19dcdef35f933b3f958bc144b157815b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;private encrypt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;プライベート暗号化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e996152c19355e5183b7951bacc51fdc82063d70" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;process_exit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;process_exit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="12b1345ef38f3eff481e04babfc5cee3fedf6d02" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;process_link&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;process_link&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3377fa74c85ab277b510132260be936d02dd4568" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;process_register&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;process_register&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1ac49997e94f9a1551d303bd593c39d65183ae63" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;process_scheduled&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;process_scheduled&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f5c40153fc287d392f8df44d908b3fe88bc96383" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;process_spawn&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;process_spawn&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6a2a1cafbb09e65b3a5bed7aeb9a95c0d1d5eab4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public decrypt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;パブリック復号化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="76616d1556e7b28ae0d0d6634207a1ccae6b7467" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;public encrypt&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;パブリック暗号化&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="aa54729fa991d4d46d06496230a9ea18f20b8db7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;punct&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;punct&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4a435282bcd7eb56f8b2310561161fc43f3b22e2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;remotehost rfc931 authuser [date] &quot;request&quot; status bytes&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;remotehost rfc931 authuser [date] &quot;request&quot;ステータスバイト&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="962ca849a0034f25104b62a5d648a2366f273740" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;reply send failure&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;返信送信失敗&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="82b964fda20e7d8d7d69ed00b67eabc29ad6b0d5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;s&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;s&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3cb8dd3e5a621e5bc07359c2d245b9441c1722ae" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;scalar variables&lt;/strong&gt;, which have only one instance per context. They have single values, not multiple values like vectors or structures.</source>
          <target state="translated">&lt;strong&gt;&lt;/strong&gt;コンテキストごとにインスタンスが1つしかない&lt;strong&gt;スカラー変数&lt;/strong&gt;。それらは単一の値を持ち、ベクトルや構造のような複数の値を持ちません。</target>
        </trans-unit>
        <trans-unit id="45909d29ab68fcd34d4615d072450b12add3cac7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;scheduler_poll&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;scheduler_poll&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a1273457b5e7feacba631b55aa2217c6b4624ba3" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;set(T) = &lt;code id=&quot;type-set&quot;&gt;sets:set(T)&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;set（T）= &lt;code id=&quot;type-set&quot;&gt;sets:set(T)&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="20a38f49936da351519950bf2dd4fa1142a3c0b4" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sign/verify&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;sign/verify&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a6845e5f36a8fd64ea48f38f995709f45f94dd07" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;since := binary()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;以来：= binary（）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd39720131296be9f9ead94d20fcba30f75ff870" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;space&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;space&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c044508399c406ba6f881052f2f7786e57eb038" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;string()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;string()&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6b938a615e347007628717007f2eacc4ddb13b47" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;sub binaries&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;サブバイナリ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5c997432a4df0645447bf43314e264b7363e36b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch_action() = (&lt;code id=&quot;type-switch_action&quot;&gt;&lt;a href=&quot;#type-env&quot;&gt;env()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; any()&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;switch_action（）=（ &lt;code id=&quot;type-switch_action&quot;&gt;&lt;a href=&quot;#type-env&quot;&gt;env()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; any（）&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eec0e0795810be4051e2c204ce62fe6d463c56a0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;switch_clause() = {&lt;code id=&quot;type-switch_clause&quot;&gt;&lt;a href=&quot;#type-pattern_or_patterns&quot;&gt;pattern_or_patterns()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-guarded_actions&quot;&gt;guarded_actions()&lt;/a&gt;&lt;/code&gt;} | {&lt;code&gt;&lt;a href=&quot;#type-pattern_or_patterns&quot;&gt;pattern_or_patterns()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-guard_test&quot;&gt;guard_test()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-switch_action&quot;&gt;switch_action()&lt;/a&gt;&lt;/code&gt;} | &lt;code&gt;&lt;a href=&quot;#type-default_action&quot;&gt;default_action()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;switch_clause（）= { &lt;code id=&quot;type-switch_clause&quot;&gt;&lt;a href=&quot;#type-pattern_or_patterns&quot;&gt;pattern_or_patterns()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-guarded_actions&quot;&gt;guarded_actions()&lt;/a&gt;&lt;/code&gt; } | { &lt;code&gt;&lt;a href=&quot;#type-pattern_or_patterns&quot;&gt;pattern_or_patterns()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-guard_test&quot;&gt;guard_test()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-switch_action&quot;&gt;switch_action()&lt;/a&gt;&lt;/code&gt; } | &lt;code&gt;&lt;a href=&quot;#type-default_action&quot;&gt;default_action()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8bd36567f5a6169b8da65264aa4400b648b32e98" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;syntaxTree() = &lt;code id=&quot;type-syntaxTree&quot;&gt;&lt;a href=&quot;erl_syntax#type-syntaxTree&quot;&gt;erl_syntax:syntaxTree()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;syntaxTree（）= &lt;code id=&quot;type-syntaxTree&quot;&gt;&lt;a href=&quot;erl_syntax#type-syntaxTree&quot;&gt;erl_syntax:syntaxTree()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3463baa1e86d867eba54fe33e4e57799a5449ccc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tables&lt;/strong&gt;, which can grow dynamically.</source>
          <target state="translated">&lt;strong&gt;テーブル&lt;/strong&gt;、動的に拡大できます。</target>
        </trans-unit>
        <trans-unit id="e453ece55f14c9452cc143fb1bc870149548ca30" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template() = &lt;code id=&quot;type-template&quot;&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; | {&lt;code&gt;&lt;a href=&quot;#type-id&quot;&gt;id()&lt;/a&gt;&lt;/code&gt;} | {*, &lt;code&gt;&lt;a href=&quot;#type-id&quot;&gt;id()&lt;/a&gt;&lt;/code&gt;} | {template, atom(), term(), [[&lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt;]]}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;template（）= &lt;code id=&quot;type-template&quot;&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; | { &lt;code&gt;&lt;a href=&quot;#type-id&quot;&gt;id()&lt;/a&gt;&lt;/code&gt; } | {*、 &lt;code&gt;&lt;a href=&quot;#type-id&quot;&gt;id()&lt;/a&gt;&lt;/code&gt; } | {template、atom（）、term（）、[[ &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; ]]}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40482531fe82c46331a893e381c4e51c27868edf" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;template_or_templates() = &lt;code id=&quot;type-template_or_templates&quot;&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; | [&lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;template_or_templates（）= &lt;code id=&quot;type-template_or_templates&quot;&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; ]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="deddaab3488507e2b1e4c591292b71b8c093cdea" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tree() = #tree{type=atom(), attr=#attr{pos=term(), ann=[term()], com=none | #com{pre=[&lt;code id=&quot;type-tree&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;], post=[&lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;]}}, data=term()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tree() = #tree{type=atom(), attr=#attr{pos=term(), ann=[term()], com=none | #com{pre=[&lt;code id=&quot;type-tree&quot;&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;], post=[&lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;]}}, data=term()}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="92ad44e855b87cbcb6b4c462361c1e13ab1a6942" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tree() = &lt;code id=&quot;type-tree&quot;&gt;&lt;a href=&quot;erl_syntax#type-syntaxTree&quot;&gt;erl_syntax:syntaxTree()&lt;/a&gt;&lt;/code&gt;&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tree（）= &lt;code id=&quot;type-tree&quot;&gt;&lt;a href=&quot;erl_syntax#type-syntaxTree&quot;&gt;erl_syntax:syntaxTree()&lt;/a&gt;&lt;/code&gt; &lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b1687b124610b204619ae990a58f224d43eaa9fd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;tree_or_trees() = &lt;code id=&quot;type-tree_or_trees&quot;&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; | [&lt;code&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt;]&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;tree_or_trees（）= &lt;code id=&quot;type-tree_or_trees&quot;&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; | [ &lt;code&gt;&lt;a href=&quot;#type-tree&quot;&gt;tree()&lt;/a&gt;&lt;/code&gt; ]&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0b7da82e3b4719394544c739c8f837d473bfaa0d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;trim&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;trim&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="83de82cb34334cbd9a93214d17390dc01d00a80e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;trim_all&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;trim_all&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4b7bf80e3e43250e4b9df3ad798e9f2b26a3a661" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;upper&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;upper&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0bba2309ddf061fabc7ee0de713291dc427bd23e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;user_default and shell_default&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;user_defaultおよびshell_default&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="40f15f6a47a49deafe01a6962da4cf5edac69c51" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;v3&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;v3&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dca711e85cc755b69eecd656f318fc88de19d0cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;word&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;word&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="95c81bee7016ad3042367da1a9d91672646acaa6" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;wrap logs&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ラップログ&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d0a5f8493e83863540a3d79efcf62ecd437e6cd0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;x&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;x&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0c03112efc387ee3620744780a642605135add96" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;xdigit&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;xdigit&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="49a8bd57ee3d6b5baf272124b0e2a737ad20546e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8372c1bcdc1efd8f14edcc5a03cb74559f292e71" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{Item,...}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{Item,...}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4ddc91fbd81462e80d1e524bf05533d120637c80" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{Kind, Name, Arity}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{種類、名前、アリティ}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3016c2f4af18d8d832c7b69cbbe1d9f0206b07dd" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{auto_export_vars, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{auto_export_vars、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cef75d0ddc5ec4b64f5b6d2d31fd9e4b8ec7e694" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{auto_list_comp, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{auto_list_comp、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c270802f0f1ac12d423568771619ff7abaa49d85" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{backup_suffix, string()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{backup_suffix、string（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="eca4b4a74216f0447259b2dc7a02a2dae38a9390" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{backups, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{backups、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="06c34a0e5336437f8a7a351724d62d39b77b3f9e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{data_dir, path()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{data_dir、path（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9e16d0418103ab6632dab4d379de863f72efc06e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{debug, Debug}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{デバッグ、デバッグ}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="deec362df10e4f8112c08f9a7344bdfa863b6861" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{dir, filename()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{dir、filename（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e3642e153b25e07d97e5745024947074cd2b4f44" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{directory, {path(), [{property(), term()}]}}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{ディレクトリ、{パス（）、[{プロパティ（）、ターム（）}]}}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b668ccadc1de978696b52594572671f4272f8d65" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{dtimeout, DTimeout}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{dtimeout、DTimeout}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5851ad494a5c3d9e0d240f0227269466914113b7" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{encoding, epp:source_encoding()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{encoding、epp：source_encoding（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ec534d22634408519075becc577f65dd36ab01ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{file, string()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{ファイル、string（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="dfebd23ca2bcacf41f408922663f1ffa7ad1329d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{follow_links, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{follow_links、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f9d2512efa9e1051b2260ca0fa82ee2fc673c6ed" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{height, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{高さ、整数（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5543a51d871ff6706a578cd18cd6075b93accef0" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{hook, none | &lt;code&gt;&lt;a href=&quot;#type-hook&quot;&gt;hook()&lt;/a&gt;&lt;/code&gt;}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{フック、なし| &lt;code&gt;&lt;a href=&quot;#type-hook&quot;&gt;hook()&lt;/a&gt;&lt;/code&gt; }&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6d55c39701e15594aa3bf09717a3f3af0b49a476" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{host, Host}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{ホスト、ホスト}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5bc35a191278c71f7a1702dba00add44d824d7b5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{idem, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{idem、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1fc576557ad2e7c9089fd47a85720b3eec5d2f1e" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{ipfamily, IpFamily}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{ipfamily、IpFamily}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4138d0f0ef263f1f46599472c7d061356374e2ac" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{issuer_fun, fun()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{issuer_fun、fun（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="773142c8160f6f5dccccc6c9e0e62d051bafd1bc" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{keep_unused, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{keep_unused、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="15d5ad33faddeb4b0556b0b2f5a48c251af87dd1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{max_path_length, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{max_path_length、integer（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="03d52f2e15fa4c12105bce2e3c5ab5e15f298ddb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{mode, Mode}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{モード、モード}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9590f255506ddabbe852419599291f8d8cb1e345" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{new_guard_tests, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{new_guard_tests、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="73386dc91c0557fa7350b3ae7ac6b144f61561ad" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{no_imports, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{no_imports、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="147d427f4b8243a5525384facf6f908d6c6dba08" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{old_guard_tests, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{old_guard_tests、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7650a6a6659dcafe5809966a378b81a3247b6b2b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{outfile, filename()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{outfile、filename（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d35e9360c1629430dd9d763e75ec63a2b5529b93" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{paper, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{paper、integer（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1da09fc7928af016d7e486bf9382df833d7e607b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{pixel_height, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{pixel_height、integer（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="14751ff953c3d1581ddcb01d1ea08baea5e07852" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{pixel_width, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{pixel_width、integer（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bed61fdf10367d6f0b02e214b49924990341f3f5" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{port, Port}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{ポート、ポート}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="19f2915a7083041f97168db6620dca2e27f2838a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{printer, Function}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{プリンター、機能}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d2bd055afec5f50febc5b4fa25e52c404fc2d089" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{profile, profile()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{profile、profile（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5cc262ef867765e6c7703fd330207fc55ee8b8a8" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{progress, Progress}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{進捗状況、進捗状況}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="825f9fba3e524c072f8c94b96eb2b48eeab7f46c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{pty_opts, [{posix_atom(), integer()}]}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{pty_opts、[{posix_atom（）、integer（）}]}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="71329ab90d00137d8a9f64eea425e4b1b795ab25" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{quiet, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{quiet、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fff1b7069957f4370686d7d60f9c7ad07491c1cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{recursive, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{再帰、ブール（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="61cf5cafa5273f5ba0d9e9978a67d7f2fea52f94" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{regexp, string()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{regexp、string（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ccc1cd1f44d8da6418f9349d82f47e11a88131b9" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{rename, [{{atom(), atom(), integer()}, {atom(), atom()}}]}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{名前の変更、[{{atom（）、atom（）、integer（）}、{atom（）、atom（）}}]}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f9c4e05dbc484cfe54a2b5cdc92c1911bebb678" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{revoked, crl_reason()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{取り消された、crl_reason（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="888f4b595ec956c96f7ec4e30db3fd03f4a6db4c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{ribbon, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{リボン、integer（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="25e0a75178143d4cadd83a4d4286c8a7c75d7c8d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{scope, part()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{スコープ、パート（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="18e4f1016206336c0b2b1d4600db91693e089f79" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{scope, {Start, Length}}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{スコープ、{開始、長さ}}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="35d4d6f0c4544c5e011ad11ac3cf180271071329" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{security_directory, {path(), [{property(), term()}]}}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{security_directory、{path（）、[{property（）、term（）}]}}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5b8a491b98162aac9485f451c39de49dab9d82cb" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{stdout, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{stdout、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3b23fffcd9036b953f0714ff173efa600e13a148" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{term, string()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{term、string（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7c92780e12cc9b9b83cf37f04b7e230b84e18325" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{test, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{テスト、ブール値（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="8abcfdd6d10b8a4b9bccaa56b88f2a050948e403" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{timeout, Timeout}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{タイムアウト、タイムアウト}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6e4a842d904f686163d464c18f80934e516f19df" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{undetermined_details, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{undetermined_details、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4312be3ec6e08130508b50e5ab741cd533d9906b" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{update_crl, fun()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{update_crl、fun（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6241d21e15cbd8a1d8b445d9c0e3c2089930dfa1" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{user, term()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{ユーザー、term（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2f52c0543197b69699780b525cd3b6571d7eb96a" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{verbose, Verbose}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{verbose、Verbose}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="de833cff62494393d7994151c159a228cb9cef2d" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{verbose, boolean()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{冗長、boolean（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b8373fbaf876968ea5cbacf5af8808fb89abe63c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{verify_fun, fun()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{verify_fun、fun（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="96340c89cab78a41c05c86707a0480a0219bfdb2" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{verify_fun, {fun(), InitialUserState::term()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{verify_fun, {fun(), InitialUserState::term()}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1cf4b49e36efc3328513d020e6293882cae5040c" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;{width, integer()}&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;{幅、整数（）}&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b90513ceb83f490ebb6a476fa8228b463bb34442" translate="yes" xml:space="preserve">
          <source>&lt;strong&gt;|&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;|&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="21606782c65e44cac7afbb90977d8b6f82140e76" translate="yes" xml:space="preserve">
          <source>=</source>
          <target state="translated">=</target>
        </trans-unit>
        <trans-unit id="dc7d0d275c288885295f73615144f02740f4c23a" translate="yes" xml:space="preserve">
          <source>= !</source>
          <target state="translated">=！</target>
        </trans-unit>
        <trans-unit id="048b4e4d55abbfab743c87685300c2af62479c6f" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;atom()&lt;/code&gt; A description of the reason why an operation failed.</source>
          <target state="translated">= &lt;code&gt;atom()&lt;/code&gt; 操作が失敗した理由の説明。</target>
        </trans-unit>
        <trans-unit id="7be186849b81234fa296e49a9538a3f4010be809" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;infinity | integer()&lt;/code&gt; in milliseconds. Default infinity.</source>
          <target state="translated">= &lt;code&gt;infinity | integer()&lt;/code&gt; ミリ秒単位の。デフォルトの無限大。</target>
        </trans-unit>
        <trans-unit id="c4da17ad8698ccf1412f02758e9ba78a104802a2" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;string() | binary()&lt;/code&gt;</source>
          <target state="translated">= &lt;code&gt;string() | binary()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8114ee57b3f1019fee0b7127f0d9c5e29fe538ea" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;{#'ECPoint'{}, #'ECParameters'{} | {namedCurve, oid()}}&lt;/code&gt;</source>
          <target state="translated">= &lt;code&gt;{#'ECPoint'{}, #'ECParameters'{} | {namedCurve, oid()}}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dff27a5d3aa04a4737bf3c4a302c3aba784fded9" translate="yes" xml:space="preserve">
          <source>= &lt;code&gt;{url(), headers()}&lt;/code&gt;</source>
          <target state="translated">= &lt;code&gt;{url(), headers()}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ded9b010994a4d95857bd90e824f3876d8f6d3d7" translate="yes" xml:space="preserve">
          <source>=&amp;lt; less or equal</source>
          <target state="translated">= &amp;lt;以下</target>
        </trans-unit>
        <trans-unit id="68dbf86ff39282a711c5be7abfe7075a37edd841" translate="yes" xml:space="preserve">
          <source>== /= =&amp;lt; &amp;lt; &amp;gt;= &amp;gt; =:= =/=</source>
          <target state="translated">== / = = &amp;lt;&amp;lt;&amp;gt; =&amp;gt; =：= = / =</target>
        </trans-unit>
        <trans-unit id="a8859fbc40c8906e6438b4991c8707c5433ba158" translate="yes" xml:space="preserve">
          <source>== equal</source>
          <target state="translated">==等しい</target>
        </trans-unit>
        <trans-unit id="56a6b109729750361b44f1d8bf508d275405dbee" translate="yes" xml:space="preserve">
          <source>@maint@</source>
          <target state="translated">@maint@</target>
        </trans-unit>
        <trans-unit id="4baca3699b34581e0fa4f15a8f4158155059bef9" translate="yes" xml:space="preserve">
          <source>@master@</source>
          <target state="translated">@master@</target>
        </trans-unit>
        <trans-unit id="4e543322a70db70ee1f9f8e2d6f9e2e665a790c2" translate="yes" xml:space="preserve">
          <source>A  &lt;strong id=&quot;query&quot;&gt;query&lt;/strong&gt; is a non-empty sequence of statements. A statement is either an assignment of a user variable or an expression. The value of an assignment is the value of the right hand side expression. It makes no sense to put a plain expression anywhere else but last in queries. The syntax of queries is summarized by these productions:</source>
          <target state="translated">&lt;strong id=&quot;query&quot;&gt;質問&lt;/strong&gt;文の非空のシーケンスです。ステートメントは、ユーザー変数または式の割り当てです。割り当ての値は、右側の式の値です。プレーンな式を他の場所に置くことは意味がありませんが、クエリで持続します。クエリの構文は、以下のプロダクションによって要約されています。</target>
        </trans-unit>
        <trans-unit id="a88cf6528f42bf075290f35039bfffd688080692" translate="yes" xml:space="preserve">
          <source>A &quot;..&quot; component would climb up above the root of the relative path.</source>
          <target state="translated">コンポーネントは、相対パスのルートの上に登っていきます。</target>
        </trans-unit>
        <trans-unit id="c9a4b195c92da61e0a1fafeeb1c8eeca2da4340d" translate="yes" xml:space="preserve">
          <source>A &quot;fixture&quot; is some state that is necessary for a particular set of tests to run. EUnit's support for fixtures makes it easy to set up such state locally for a test set, and automatically tear it down again when the test set is finished, regardless of the outcome (success, failures, timeouts, etc.).</source>
          <target state="translated">フィクスチャ」とは、特定のテストセットを実行するために必要な状態のことです。EUnitはフィクスチャをサポートしているので、テストセットに対してローカルにそのような状態を簡単に設定することができ、テストセットが終了したときには、結果(成功、失敗、タイムアウトなど)に関係なく、自動的に再びフィクスチャを破棄します。</target>
        </trans-unit>
        <trans-unit id="3188426311218c6580588a5d742cea0cfce61661" translate="yes" xml:space="preserve">
          <source>A &quot;match specification&quot; (&lt;code&gt;match_spec&lt;/code&gt;) is an Erlang term describing a small &quot;program&quot; that tries to match something. It can be used to either control tracing with &lt;code&gt;&lt;a href=&quot;erlang#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt; or to search for objects in an ETS table with for example &lt;code&gt;ets:select/2&lt;/code&gt;. The match specification in many ways works like a small function in Erlang, but is interpreted/compiled by the Erlang runtime system to something much more efficient than calling an Erlang function. The match specification is also very limited compared to the expressiveness of real Erlang functions.</source>
          <target state="translated">「マッチ仕様」（ &lt;code&gt;match_spec&lt;/code&gt; ）は、何かにマッチしようとする小さな「プログラム」を表すErlang用語です。 &lt;code&gt;&lt;a href=&quot;erlang#trace_pattern-3&quot;&gt;erlang:trace_pattern/3&lt;/a&gt;&lt;/code&gt; を使用してトレースを制御するか、または &lt;code&gt;ets:select/2&lt;/code&gt; などを使用してETSテーブル内のオブジェクトを検索するために使用できます。多くの点で一致指定はErlangの小さな関数のように機能しますが、Erlangランタイムシステムによって解釈/コンパイルされ、Erlang関数を呼び出すよりもはるかに効率的なものになります。実際のErlang関数の表現力と比較して、マッチ仕様も非常に制限されています。</target>
        </trans-unit>
        <trans-unit id="03dd3521499816511b386ab9d9476084b1b65f1a" translate="yes" xml:space="preserve">
          <source>A &quot;normal&quot; modern computer cannot keep time, not on itself and not unless you have a chip-level atomic clock wired to it. Time, as perceived by your computer, must normally be corrected. Hence the Network Time Protocol (NTP) protocol, together with the &lt;code&gt;ntpd&lt;/code&gt; process, does its best to keep your computer time in sync with the correct time. Between NTP corrections, usually a less potent time-keeper than an atomic clock is used.</source>
          <target state="translated">「通常の」現代のコンピュータは、チップレベルの原子時計が接続されていない限り、時間を計ることはできません。コンピュータが認識する時間は、通常は修正する必要があります。したがって、ネットワークタイムプロトコル（NTP）プロトコルは、 &lt;code&gt;ntpd&lt;/code&gt; プロセスと共に、コンピューターの時刻を正しい時刻と同期させるために最善を尽くします。NTP修正の間には、通常、アトミッククロックよりも強力でないタイムキーパーが使用されます。</target>
        </trans-unit>
        <trans-unit id="5977890202f9b4c8dd3a586f28dcd46ae41d5b10" translate="yes" xml:space="preserve">
          <source>A &quot;user&quot; is a term that everyone understands intuitively. However, the understandings may differ which can cause confusion.</source>
          <target state="translated">ユーザー」とは、誰もが直感的に理解できる言葉です。しかし、理解が異なることで混乱を招くこともあります。</target>
        </trans-unit>
        <trans-unit id="87472956782d07df4126a887823bcd7bbf4c8dc4" translate="yes" xml:space="preserve">
          <source>A &quot;word&quot; character is an underscore or any character that is a letter or a digit. By default, the definition of letters and digits is controlled by the PCRE low-valued character tables, in Erlang's case (and without option &lt;code&gt;unicode&lt;/code&gt;), the ISO Latin-1 character set.</source>
          <target state="translated">「単語」文字は、アンダースコアまたは文字または数字である任意の文字です。デフォルトでは、文字と数字の定義は、Erlangの場合（およびオプション &lt;code&gt;unicode&lt;/code&gt; なし）、ISO Latin-1文字セットのPCRE低値文字テーブルによって制御されます。</target>
        </trans-unit>
        <trans-unit id="d912969b085e6e084ee709942be42e6152b3403d" translate="yes" xml:space="preserve">
          <source>A (possibly empty) list of arguments &lt;code&gt;Arg1,..,ArgN&lt;/code&gt;</source>
          <target state="translated">引数のリスト（空の場合もある） &lt;code&gt;Arg1,..,ArgN&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cb1fb6087007f451f9a8e98d3841dcefc6c63949" translate="yes" xml:space="preserve">
          <source>A 16-bit big endian unsigned integer not larger than 3.</source>
          <target state="translated">16ビットのビッグエンディアンの符号なし整数で、3より大きくないもの。</target>
        </trans-unit>
        <trans-unit id="9e09f4f5ae1fe9a5e488e1dc4155167b1f5d0a67" translate="yes" xml:space="preserve">
          <source>A 32-bit big endian unsigned integer. All identifiers originating from the same node incarnation must have identical &lt;code&gt;Creation&lt;/code&gt; values. This makes it possible to separate identifiers from old (crashed) nodes from a new one. The value zero should be avoided for normal operations as it is used as a wild card for debug purpose (like a pid returned by &lt;code&gt; erlang:list_to_pid/1&lt;/code&gt;).</source>
          <target state="translated">32ビットのビッグエンディアンの符号なし整数。同じノードインカネーションに由来するすべての識別子は、同一の &lt;code&gt;Creation&lt;/code&gt; 値を持っている必要があります。これにより、古い（クラッシュした）ノードの識別子と新しいノードの識別子を分離できます。値ゼロは、デバッグ目的のワイルドカードとして使用されるため（ &lt;code&gt; erlang:list_to_pid/1&lt;/code&gt; によって返されるpidなど）、通常の操作では回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="d41c2ee4a1975b56d8503981a8b1adf867b1d2c2" translate="yes" xml:space="preserve">
          <source>A 32-bit big endian unsigned integer. Only 13 bits are significant; the rest are to be 0.</source>
          <target state="translated">32 ビットのビッグエンディアン符号なし整数。13ビットのみが有効で、残りは0になります。</target>
        </trans-unit>
        <trans-unit id="95caeb8c55dc2fab86a06799d69a4b63c4240bb1" translate="yes" xml:space="preserve">
          <source>A 32-bit big endian unsigned integer. Only 15 bits are significant; the rest are to be 0.</source>
          <target state="translated">32 ビットのビッグエンディアン符号なし整数。15 ビットのみが有効で、残りは 0 となります。</target>
        </trans-unit>
        <trans-unit id="8f0937e93229259e48736c2af1bba3dc517ff152" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;'DOWN'&lt;/code&gt; message will be delivered to the caller if this function returns, and the spawned process terminates. This is true also in the case when the operation times out.</source>
          <target state="translated">A &lt;code&gt;'DOWN'&lt;/code&gt; メッセージは、この関数が戻ると、生成されたプロセスを終了する場合には、発信者に配信されます。これは、操作がタイムアウトした場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="433c810674d21c441062b95f76ca777c70714843" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#binary_relation&quot;&gt;binary relation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#binary_relation&quot;&gt;binary relation&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8a533ca5adc60665f30d5f80af942973bd84aa4b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; (of subsets).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; （サブセットの）。</target>
        </trans-unit>
        <trans-unit id="5b39a7a2cc002abf9167651de2434f1ad645ee10" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#function&quot;&gt;function&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="202160d2c73a729616f2a9982499e0f3ceb8d222" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#query_cursor&quot;&gt;query cursor&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#query_cursor&quot;&gt;query cursor&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0393074e19cd88b0e58ac72ce6a0a5913585fb2c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#query_handle&quot;&gt;query handle&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#query_handle&quot;&gt;query handle&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="135eabb750171592e83efb869996dfa9aaa27d85" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#set_fun&quot;&gt;SetFun&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A &lt;code&gt;&lt;a href=&quot;#set_fun&quot;&gt;SetFun&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dab0d957d35ebe1dbece43e8024b734df8f6a814" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;#type&quot;&gt;type&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type&quot;&gt;type&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="88de2f222f8e4b64345510e4ba03677a5d3e40d4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;crypto#type-cipher&quot;&gt;cipher&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;new api&lt;/code&gt; is categorized as either &lt;code&gt;&lt;a href=&quot;crypto#type-cipher_no_iv&quot;&gt;cipher_no_iv()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;crypto#type-cipher_iv&quot;&gt;cipher_iv()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;crypto#type-cipher_aead&quot;&gt;cipher_aead()&lt;/a&gt;&lt;/code&gt;. The letters IV are short for</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;crypto#type-cipher&quot;&gt;cipher&lt;/a&gt;&lt;/code&gt; における &lt;code&gt;new api&lt;/code&gt; どちらかとして分類され &lt;code&gt;&lt;a href=&quot;crypto#type-cipher_no_iv&quot;&gt;cipher_no_iv()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;crypto#type-cipher_iv&quot;&gt;cipher_iv()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;crypto#type-cipher_aead&quot;&gt;cipher_aead()&lt;/a&gt;&lt;/code&gt; 。文字IVはの略です</target>
        </trans-unit>
        <trans-unit id="aa202896e510f979124391ff433d7baa4a0a519e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; process returns information about each of its registered handlers.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; プロセスは、その登録されたハンドラの各々に関する情報を返します。</target>
        </trans-unit>
        <trans-unit id="403c45726d800a7f67a8ce833e17391152baea30" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; process returns the state of the callback module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; のプロセスは、コールバックモジュールの状態を返します。</target>
        </trans-unit>
        <trans-unit id="e374f53e59973e7f0a95c5e9b8e211d5bee757fb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; process returns information, such as its current state name and state data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; のような現在の状態名と状態データのような処理を戻す情報。</target>
        </trans-unit>
        <trans-unit id="5e13666f02f6c6aded7f008bc76acbcd78bcc9e4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;CHOICE&lt;/code&gt; value is always represented as the tuple &lt;code&gt;{ChoiceAlternative, Val}&lt;/code&gt; where &lt;code&gt;ChoiceAlternative&lt;/code&gt; is an atom denoting the selected choice alternative.</source>
          <target state="translated">&lt;code&gt;CHOICE&lt;/code&gt; の値は常にタプルとして表現される &lt;code&gt;{ChoiceAlternative, Val}&lt;/code&gt; &lt;code&gt;ChoiceAlternative&lt;/code&gt; は、選択された選択肢の選択肢を示す原子です。</target>
        </trans-unit>
        <trans-unit id="b90fdc70d1d327697972371df876cac3dc321f9c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Common Test&lt;/code&gt; server always starts an event manager. The server also plugs in a default event handler, which only purpose is to relay notifications to a globally registered &lt;code&gt;Common Test&lt;/code&gt; Master event manager (if a &lt;code&gt;Common Test&lt;/code&gt; Master server is running in the system). The &lt;code&gt;Common Test&lt;/code&gt; Master also spawns an event manager at startup. Event handlers plugged into this manager receives the events from all the test nodes, plus information from the &lt;code&gt;Common Test&lt;/code&gt; Master server.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; サーバーは常にイベントマネージャを起動します。サーバーは、デフォルトのイベントハンドラーもプラグインします。これは、通知がグローバルに登録された &lt;code&gt;Common Test&lt;/code&gt; Masterイベントマネージャーに中継されることのみを目的としています（ &lt;code&gt;Common Test&lt;/code&gt; Masterサーバーがシステムで実行されている場合）。 &lt;code&gt;Common Test&lt;/code&gt; マスターはまた、起動時にイベントマネージャを起動します。このマネージャーにプラグインされたイベントハンドラーは、すべてのテストノードからのイベントと、 &lt;code&gt;Common Test&lt;/code&gt; Masterサーバーからの情報を受信します。</target>
        </trans-unit>
        <trans-unit id="3b5a9edce618e2c03440d2f3e66eaa3199b69fd2" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Fun&lt;/code&gt; either succeeds or fails.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 成功するか失敗します。</target>
        </trans-unit>
        <trans-unit id="8b3888bec04ba31ce06b61d04814956095d876ad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;GroupTuple&lt;/code&gt; without &lt;code&gt;PublishType&lt;/code&gt; is the same as a &lt;code&gt;GroupTuple&lt;/code&gt; with &lt;code&gt;PublishType&lt;/code&gt; equal to &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;GroupTuple&lt;/code&gt; 無し &lt;code&gt;PublishType&lt;/code&gt; は同じである &lt;code&gt;GroupTuple&lt;/code&gt; と &lt;code&gt;PublishType&lt;/code&gt; に等しい &lt;code&gt;normal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a4f1fbb5d8ea1f3f7ed9d3c92a29f3dce436d2d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Mnesia&lt;/code&gt; database is organized as a set of tables. Each table is populated with instances (Erlang records). A table has also a number of properties, such as location and persistence.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のデータベースは、テーブルのセットとして編成されています。各テーブルにはインスタンス（Erlangレコード）が入力されています。テーブルには、場所や永続性など、いくつかのプロパティもあります。</target>
        </trans-unit>
        <trans-unit id="b1f65d61d7b12a315f45041db59ab9e965298514" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Mnesia&lt;/code&gt; table can reside on one or more nodes. When a table is updated, &lt;code&gt;Mnesia&lt;/code&gt; ensures that the updates are replicated to all nodes where the table resides. If a replica is inaccessible (for example, because of a temporary node-down), &lt;code&gt;Mnesia&lt;/code&gt; performs the replication later.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のテーブルは、1つまたは複数のノード上に存在することができます。テーブルが更新されると、 &lt;code&gt;Mnesia&lt;/code&gt; は更新がテーブルが存在するすべてのノードに確実に複製されるようにします。レプリカにアクセスできない場合（一時的なノードのダウンなど）、 &lt;code&gt;Mnesia&lt;/code&gt; は後でレプリケーションを実行します。</target>
        </trans-unit>
        <trans-unit id="2639a2fdcad00692f29723d4cb9f6bc0a59b0642" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Mnesia&lt;/code&gt; table is populated by &lt;code&gt;Mnesia&lt;/code&gt; records. For example, the tuple &lt;code&gt;{boss, klacke, bjarne}&lt;/code&gt; is a record. The second element in this tuple is the key. To identify a table uniquely, both the key and the table name is needed. The term Object Identifier (OID) is sometimes used for the arity two tuple {Tab, Key}. The OID for the record &lt;code&gt;{boss, klacke, bjarne}&lt;/code&gt; is the arity two tuple &lt;code&gt;{boss, klacke}&lt;/code&gt;. The first element of the tuple is the type of the record and the second element is the key. An OID can lead to zero, one, or more records depending on whether the table type is &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のテーブルがによって移入された &lt;code&gt;Mnesia&lt;/code&gt; の記録。たとえば、 &lt;code&gt;{boss, klacke, bjarne}&lt;/code&gt; というタプルはレコードです。このタプルの2番目の要素はキーです。テーブルを一意に識別するには、キーとテーブル名の両方が必要です。オブジェクト識別子（OID）という用語は、アリティ2のタプル{Tab、Key}で使用されることがあります。レコード &lt;code&gt;{boss, klacke, bjarne}&lt;/code&gt; のOID は、アリティ2のタプル &lt;code&gt;{boss, klacke}&lt;/code&gt; です。タプルの最初の要素はレコードのタイプで、2番目の要素はキーです。 OIDは、テーブルタイプが &lt;code&gt;set&lt;/code&gt; か、 &lt;code&gt;bag&lt;/code&gt; であるかに応じて、ゼロ、1つ、またはそれ以上のレコードになる可能性があります。</target>
        </trans-unit>
        <trans-unit id="58b0e426694240d54988a773c2125b6a08cde2fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;MonitorOption&lt;/code&gt; tells &lt;code&gt;try_load/3&lt;/code&gt; to trigger a driver monitor under certain conditions. When the monitor is triggered, the function returns a three-tuple &lt;code&gt;{ok, PendingStatus, reference()}&lt;/code&gt;, where &lt;code&gt;reference()&lt;/code&gt; is the monitor reference for the driver monitor.</source>
          <target state="translated">A &lt;code&gt;MonitorOption&lt;/code&gt; 伝え &lt;code&gt;try_load/3&lt;/code&gt; を特定の条件下でドライバモニタをトリガします。モニターがトリガーされると、関数は3つのタプル &lt;code&gt;{ok, PendingStatus, reference()}&lt;/code&gt; 返します。ここで、 &lt;code&gt;reference()&lt;/code&gt; はドライバーモニターのモニター参照です。</target>
        </trans-unit>
        <trans-unit id="fd5b683f4bf02bc2f2d8067e9b98c71ab3cd57fa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NULL&lt;/code&gt;-terminated string containing the name of the environment variable.</source>
          <target state="translated">&lt;code&gt;NULL&lt;/code&gt; は、環境変数の名前を含む文字列を-末端。</target>
        </trans-unit>
        <trans-unit id="aa362670957cf4400e0765a94c25a2fb9eecf315" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;NodeAlias&lt;/code&gt; (&lt;code&gt;atom()&lt;/code&gt;) is used in a test specification as a reference to a node name (so the node name only needs to be declared once, which also can be achieved using constants). The alias is declared with a &lt;code&gt;node&lt;/code&gt; term as follows:</source>
          <target state="translated">&lt;code&gt;NodeAlias&lt;/code&gt; （ &lt;code&gt;atom()&lt;/code&gt; ）（ノード名のみ、また、定数を使用して達成することができ、一度に宣言する必要があるように）ノード名を基準としてテスト仕様書で使用されます。エイリアスは、次のように &lt;code&gt;node&lt;/code&gt; 用語を使用して宣言されます。</target>
        </trans-unit>
        <trans-unit id="60cdba81c3ea0d17899bed258726068aa1d5a524" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Reply&lt;/code&gt; is generated when a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; returns with &lt;code&gt;{reply,From,Reply}&lt;/code&gt; as one &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;, and that &lt;code&gt;Reply&lt;/code&gt; becomes the return value of &lt;code&gt;&lt;a href=&quot;#wait_response-2&quot;&gt; wait_response/1,2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#check_response-2&quot;&gt; check_response/2&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;Reply&lt;/code&gt; するときに生成される &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; と戻り &lt;code&gt;{reply,From,Reply}&lt;/code&gt; 一つとして &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; 、その &lt;code&gt;Reply&lt;/code&gt; の戻り値となる &lt;code&gt;&lt;a href=&quot;#wait_response-2&quot;&gt; wait_response/1,2&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;#check_response-2&quot;&gt; check_response/2&lt;/a&gt;&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="e5a72efedfb8ca06832a0be21753d36d85ba73bc" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Reply&lt;/code&gt; is generated when a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; returns with &lt;code&gt;{reply,From,Reply}&lt;/code&gt; as one &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;, and that &lt;code&gt;Reply&lt;/code&gt; becomes the return value of this function.</source>
          <target state="translated">&lt;code&gt;Reply&lt;/code&gt; するときに生成される &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; で戻り &lt;code&gt;{reply,From,Reply}&lt;/code&gt; 一つとして &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; 、その &lt;code&gt;Reply&lt;/code&gt; 、この関数の戻り値となります。</target>
        </trans-unit>
        <trans-unit id="d3c0755eeb4f1ce3ad3315dbe85bf25807f06418" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Reply&lt;/code&gt; is generated when a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; returns with &lt;code&gt;{reply,From,Reply}&lt;/code&gt; as one &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;, and that &lt;code&gt;Reply&lt;/code&gt; becomes the return value of this function.</source>
          <target state="translated">&lt;code&gt;Reply&lt;/code&gt; するときに生成される &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; で戻り &lt;code&gt;{reply,From,Reply}&lt;/code&gt; 一つとして &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; 、その &lt;code&gt;Reply&lt;/code&gt; 、この関数の戻り値となります。</target>
        </trans-unit>
        <trans-unit id="d61056cbdb0f25299981a172b164ba43995d607b" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SEQUENCE&lt;/code&gt; and a &lt;code&gt;SET&lt;/code&gt; can contain a component with a &lt;code&gt;DEFAULT&lt;/code&gt; keyword followed by the actual value, which is the default value. The &lt;code&gt;DEFAULT&lt;/code&gt; keyword means that the application doing the encoding can omit encoding of the value, which results in fewer bytes to send to the receiving application.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; と &lt;code&gt;SET&lt;/code&gt; が持つコンポーネント含むことができる &lt;code&gt;DEFAULT&lt;/code&gt; のキーワードをデフォルト値であり、実際の値が続きます。 &lt;code&gt;DEFAULT&lt;/code&gt; のエンコーディングを行うアプリケーションが少ないバイトの結果が受信アプリケーションに送信する値のエンコードを省略できることをキーワード手段。</target>
        </trans-unit>
        <trans-unit id="3d3bd976d0cd187ecd365c66ba7608ef2da02c31" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SEQUENCE&lt;/code&gt; in ASN.1 is comparable with a struct in C and a record in Erlang. A &lt;code&gt;SEQUENCE&lt;/code&gt; can be defined as follows:</source>
          <target state="translated">ASN.1 の &lt;code&gt;SEQUENCE&lt;/code&gt; は、Cの構造体およびErlangのレコードと同等です。 &lt;code&gt;SEQUENCE&lt;/code&gt; は、次のように定義することができます。</target>
        </trans-unit>
        <trans-unit id="a6e9ff64211f59993f520e042615977444a5407a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SIGTERM&lt;/code&gt; will produce a &lt;code&gt;stop&lt;/code&gt; message to the &lt;code&gt;init&lt;/code&gt; process. This is equivalent to a &lt;code&gt;init:stop/0&lt;/code&gt; call.</source>
          <target state="translated">&lt;code&gt;SIGTERM&lt;/code&gt; を生成する &lt;code&gt;stop&lt;/code&gt; にメッセージを &lt;code&gt;init&lt;/code&gt; プロセス。これは、 &lt;code&gt;init:stop/0&lt;/code&gt; 呼び出しと同等です。</target>
        </trans-unit>
        <trans-unit id="5b0d61594aad8213f71f60ff73dc663d375cb9e1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;SIGUSR1&lt;/code&gt; signal forces a crash dump.</source>
          <target state="translated">A &lt;code&gt;SIGUSR1&lt;/code&gt; 信号は、クラッシュダンプを強制します。</target>
        </trans-unit>
        <trans-unit id="34a92024c77769169b8e96b23acdef77b93380cb" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Setup&lt;/code&gt; function is executed just before any of the specified tests are run, and a &lt;code&gt;Cleanup&lt;/code&gt; function is executed when no more of the specified tests will be run, regardless of the reason. A &lt;code&gt;Setup&lt;/code&gt; function takes no argument, and returns some value which will be passed as it is to the &lt;code&gt;Cleanup&lt;/code&gt; function. A &lt;code&gt;Cleanup&lt;/code&gt; function should do whatever necessary and return some arbitrary value, such as the atom &lt;code&gt;ok&lt;/code&gt;. (&lt;code&gt;SetupX&lt;/code&gt; and &lt;code&gt;CleanupX&lt;/code&gt; functions are similar, but receive one additional argument: some value &lt;code&gt;X&lt;/code&gt;, which depends on the context.) When no &lt;code&gt;Cleanup&lt;/code&gt; function is specified, a dummy function is used which has no effect.</source>
          <target state="translated">&lt;code&gt;Setup&lt;/code&gt; 機能は、指定されたテストのいずれかが実行される直前に実行され、 &lt;code&gt;Cleanup&lt;/code&gt; 何より指定されたテストのは理由の如何に関わらず、実行されませんときに関数が実行されます。 &lt;code&gt;Setup&lt;/code&gt; 関数は引数を取りませんし、それがあるとして渡されますいくつかの値を返す &lt;code&gt;Cleanup&lt;/code&gt; 機能を。 &lt;code&gt;Cleanup&lt;/code&gt; 機能は、必要なものは何でもして、このような原子のようないくつかの任意の値、返す必要があります &lt;code&gt;ok&lt;/code&gt; 。（ &lt;code&gt;SetupX&lt;/code&gt; と &lt;code&gt;CleanupX&lt;/code&gt; 機能が類似しているが、一つの追加の引数を受け取る：いくつかの値 &lt;code&gt;X&lt;/code&gt; 。、コンテキストに依存する）場合にない &lt;code&gt;Cleanup&lt;/code&gt; 関数が指定されている場合、影響のないダミー関数が使用されます。</target>
        </trans-unit>
        <trans-unit id="f6804bda92ad93e7a9350a989acb3a71fcbeb3be" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;TAGS&lt;/code&gt; file is used by Emacs to find function and variable definitions in any source file in large projects. This module can generate a &lt;code&gt;TAGS&lt;/code&gt; file from Erlang source files. It recognises functions, records, and macro definitions.</source>
          <target state="translated">&lt;code&gt;TAGS&lt;/code&gt; のファイルは、大規模なプロジェクトで任意のソースファイル内の関数や変数の定義を見つけるために、Emacsが使用されます。このモジュールは、Erlangソースファイルから &lt;code&gt;TAGS&lt;/code&gt; ファイルを生成できます。関数、レコード、およびマクロ定義を認識します。</target>
        </trans-unit>
        <trans-unit id="9d8ced48588a98fe1e3543bf4a076632e6995ab7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Timeout&lt;/code&gt; argument specifies a time-out in milliseconds. The default value for argument &lt;code&gt;Timeout&lt;/code&gt; is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 引数は、タイムアウト（ミリ秒）を指定します。引数 &lt;code&gt;Timeout&lt;/code&gt; のデフォルト値は &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ce7a972c883df05bb174789967ac5c3e5219095e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Viewer&lt;/code&gt; gets trace &lt;code&gt;Events&lt;/code&gt; from its &lt;code&gt;Collector&lt;/code&gt; by polling it regularly for more &lt;code&gt;Events&lt;/code&gt; to display. &lt;code&gt;Events&lt;/code&gt; are for example reported to the &lt;code&gt;Collector&lt;/code&gt; with &lt;code&gt;et_collector:report_event/6&lt;/code&gt;:</source>
          <target state="translated">A &lt;code&gt;Viewer&lt;/code&gt; は、トレース取得 &lt;code&gt;Events&lt;/code&gt; そのから &lt;code&gt;Collector&lt;/code&gt; 以上のために定期的にポーリングすることによって、それを &lt;code&gt;Events&lt;/code&gt; 表示します。 &lt;code&gt;Events&lt;/code&gt; は、たとえば &lt;code&gt;et_collector:report_event/6&lt;/code&gt; を使用して &lt;code&gt;Collector&lt;/code&gt; 報告されます。</target>
        </trans-unit>
        <trans-unit id="180920075f83158fae4fe730475d696cfbf5cee7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;Where&lt;/code&gt; term controls how the specified tests are executed. The default is &lt;code&gt;spawn&lt;/code&gt;, which means that the current process handles the setup and teardown, while the tests are executed in a subprocess. &lt;code&gt;{spawn, Node}&lt;/code&gt; is like &lt;code&gt;spawn&lt;/code&gt;, but runs the subprocess on the specified node. &lt;code&gt;local&lt;/code&gt; means that the current process will handle both setup/teardown and running the tests - the drawback is that if a test times out so that the process is killed, the &lt;strong&gt;cleanup will not be performed&lt;/strong&gt;; hence, avoid this for persistent fixtures such as file operations. In general, &lt;code&gt;local&lt;/code&gt; should only be used when:</source>
          <target state="translated">A &lt;code&gt;Where&lt;/code&gt; 用語は、指定されたテストの実行方法を制御します。デフォルトは &lt;code&gt;spawn&lt;/code&gt; です。つまり、テストがサブプロセスで実行されている間、現在のプロセスがセットアップとティアダウンを処理します。 &lt;code&gt;{spawn, Node}&lt;/code&gt; は &lt;code&gt;spawn&lt;/code&gt; に似ていますが、指定されたノードでサブプロセスを実行します。 &lt;code&gt;local&lt;/code&gt; とは、現在のプロセスがセットアップ/ティアダウンとテストの実行の両方を処理することを意味します。欠点は、テストがタイムアウトしてプロセスが&lt;strong&gt;強制終了さ&lt;/strong&gt;れると、&lt;strong&gt;クリーンアップが実行されないこと&lt;/strong&gt;です。したがって、ファイル操作などの永続的なフィクスチャではこれを回避してください。一般に、 &lt;code&gt;local&lt;/code&gt; は次の場合にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3ca69f9bce09be743746b88f9565286b47dadef7" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;^C&lt;/code&gt; command abnormally terminates an Erlang runtime system in a Unix environment with a break-handler.</source>
          <target state="translated">&lt;code&gt;^C&lt;/code&gt; コマンドは異常ブレイク・ハンドラとUnix環境でのErlangランタイムシステムを終了します。</target>
        </trans-unit>
        <trans-unit id="88f09f35a0e43475dde7e6e91538dacafdb0854f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;badarg&lt;/code&gt; exception is thrown for the following cases:</source>
          <target state="translated">&lt;code&gt;badarg&lt;/code&gt; の例外は、次の場合のためにスローされます。</target>
        </trans-unit>
        <trans-unit id="19008e1b4cba5cacabc00e3ee84959b226996dd4" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;badmatch&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;badmatch&lt;/code&gt; 例外。</target>
        </trans-unit>
        <trans-unit id="d638a836f4fc8b7921b9a081b0b878c1f846f592" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; is passed as is to the operating system, but a &lt;code&gt;string()&lt;/code&gt; is encoded according to the &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt; system filename encoding mode. &lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;binary()&lt;/code&gt; オペレーティングシステムにそのまま渡されるが、 &lt;code&gt;string()&lt;/code&gt; に従って符号化された &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt; system filename encoding mode. &lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36284b6b7f1264d43699314f8679962696d723b8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; is passed as is to the operating system, but a &lt;code&gt;string()&lt;/code&gt; is encoded according to the &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;system filename encoding mode.&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;binary()&lt;/code&gt; オペレーティングシステムにそのまま渡されるが、 &lt;code&gt;string()&lt;/code&gt; に従って符号化された &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;system filename encoding mode.&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="298f41096caa2e92873a891cfa7f249e61ccfaff" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; such that &lt;code&gt;byte_size(Bin) &amp;gt;= 4&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary()&lt;/code&gt; よう &lt;code&gt;byte_size(Bin) &amp;gt;= 4&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fcabd5fc5721905668dcbc2fac872283eb7ce710" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; with ASCII characters in the range 1 to 255.</source>
          <target state="translated">&lt;code&gt;binary()&lt;/code&gt; 255の範囲1にASCII文字を含みます。</target>
        </trans-unit>
        <trans-unit id="610de9c0e7609b17f37c482a537f9394945be845" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; with characters coded in ISO Latin-1.</source>
          <target state="translated">ISO Latin-1でコード化された文字を持つ &lt;code&gt;binary()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2d7dfcd1be140fb8fab5ba30d0db9b9f8999ee60" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; with characters coded in a user-specified Unicode encoding other than UTF-8 (that is, UTF-16 or UTF-32).</source>
          <target state="translated">UTF-8以外のユーザー指定のUnicodeエンコード（つまり、UTF-16またはUTF-32）でコード化された文字を含む &lt;code&gt;binary()&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="cd11b6ceab0832746fe7521b45f8876a080c5253" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;binary()&lt;/code&gt; with characters encoded in the UTF-8 coding standard.</source>
          <target state="translated">UTF-8コーディング標準でエンコードされた文字を含む &lt;code&gt;binary()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="daf4a32b3d25458a1c78e9f94a085f029c6cc9b1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;boolean&lt;/code&gt;, defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 、デフォルト &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee7cb8223914ce5d36cd28a774a30d8e5511e863" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gen_event&lt;/code&gt; process handles system messages as described in &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;sys&lt;/code&gt; module can be used for debugging an event manager.</source>
          <target state="translated">&lt;code&gt;gen_event&lt;/code&gt; プロセス・ハンドル・システムに記載されているようにメッセージ &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;sys&lt;/code&gt; モジュールは、イベントマネージャをデバッグするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="98ea42e8b07c9ad821d2a83a74fd8607454a3555" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gen_server&lt;/code&gt; process assumes all specific parts to be located in a callback module exporting a predefined set of functions. The relationship between the behavior functions and the callback functions is as follows:</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスは、関数の所定のセットをエクスポートコールバックモジュールに配置されるすべての特定の部分を想定しています。動作関数とコールバック関数の関係は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="f82ed6c2be9cde928b716896e0b7750e4269ef66" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gen_server&lt;/code&gt; process handles system messages as described in &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;sys&lt;/code&gt; module can be used for debugging a &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセス・ハンドル・システムに記載されているようにメッセージ &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;sys&lt;/code&gt; モジュールは、デバッグのために使用することができる &lt;code&gt;gen_server&lt;/code&gt; のプロセス。</target>
        </trans-unit>
        <trans-unit id="9183aff59e51eee9e3ac3b923db0e1df5aa748f5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gen_statem&lt;/code&gt; assumes all specific parts to be located in a callback module exporting a predefined set of functions. The relationship between the behavior functions and the callback functions is as follows:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、関数の所定のセットをエクスポートコールバックモジュールに配置されるすべての特定の部分を想定しています。動作関数とコールバック関数の関係は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c088e6c3ad593b97e2719e3a7f2ef3d25643973c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;gen_statem&lt;/code&gt; handles system messages as described in &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;sys&lt;/code&gt; module can be used for debugging a &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はで説明したようにシステムメッセージを処理 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;sys&lt;/code&gt; モジュールは、デバッグのために使用することができる &lt;code&gt;gen_statem&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="cb679bbc4a894da7c683af08fece335a0b2f7f3a" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;host&lt;/code&gt; filter is not typically desirable when setting Destination-Host since it will remove peer agents from the candidates list.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; 、それは候補者リストからピアエージェントを削除しますので、宛先ホストを設定する際に、フィルタは、一般的に望ましくありません。</target>
        </trans-unit>
        <trans-unit id="3136f605b2f92ac3277fb1aa4fb5ac14a0ceaca5" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;list&lt;/code&gt;, defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 、デフォルトは &lt;code&gt;[]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="687a85ac1691431ae16424f09a8711efd93e00b8" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;list&lt;/code&gt;, defaults to [].</source>
          <target state="translated">&lt;code&gt;list&lt;/code&gt; 、[]にデフォルト設定されています。</target>
        </trans-unit>
        <trans-unit id="8945c1936d6e5ae6093c7d0fe2fcd18eac87d001" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;message_error()&lt;/code&gt;, indicates that the remote user has replied with an explicit transactionError.</source>
          <target state="translated">&lt;code&gt;message_error()&lt;/code&gt; 、リモートユーザが明示的transactionErrorと答えたことを示しています。</target>
        </trans-unit>
        <trans-unit id="e9dc2723fde49808f2786f42dd59628134c7bdff" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;nowarn_xxx&lt;/code&gt; form, to turn off the warning.</source>
          <target state="translated">&lt;code&gt;nowarn_xxx&lt;/code&gt; のフォームは、警告をオフにします。</target>
        </trans-unit>
        <trans-unit id="c1871757dec2ac832830f5a635684899bd5b3db1" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;permanent&lt;/code&gt; child process is always restarted.</source>
          <target state="translated">&lt;code&gt;permanent&lt;/code&gt; 子プロセスが常に再起動されます。</target>
        </trans-unit>
        <trans-unit id="adff669099f0ada70cada77f613b34ae862107ab" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;process&lt;/code&gt; or &lt;code&gt;port&lt;/code&gt; monitor by name resolves the &lt;code&gt;RegisteredName&lt;/code&gt; to &lt;code&gt;pid()&lt;/code&gt; or &lt;code&gt;port()&lt;/code&gt; only once at the moment of monitor instantiation, later changes to the name registration will not affect the existing monitor.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; または &lt;code&gt;port&lt;/code&gt; モニター名によって解決 &lt;code&gt;RegisteredName&lt;/code&gt; をする &lt;code&gt;pid()&lt;/code&gt; または &lt;code&gt;port()&lt;/code&gt; モニターのインスタンス化の時点で一度だけ、後から名前の登録に変更し、既存のモニターには影響しません。</target>
        </trans-unit>
        <trans-unit id="b4a4e8cecf512f5c76654bdb793223d7fff4380d" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;process&lt;/code&gt; or &lt;code&gt;port&lt;/code&gt; monitor is triggered only once, after that it is removed from both monitoring process and the monitored entity. Monitors are fired when the monitored process or port terminates, does not exist at the moment of creation, or if the connection to it is lost. If the connection to it is lost, we do not know if it still exists. The monitoring is also turned off when &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor/1&lt;/a&gt;&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;process&lt;/code&gt; または &lt;code&gt;port&lt;/code&gt; 、それが監視プロセスと監視エンティティの両方から除去された後、モニタは、一回だけトリガされます。モニターは、監視対象のプロセスまたはポートが終了したとき、作成時に存在しなかったとき、または接続が失われたときに起動されます。接続が失われた場合、それがまだ存在するかどうかはわかりません。また、 &lt;code&gt;&lt;a href=&quot;#demonitor-1&quot;&gt;demonitor/1&lt;/a&gt;&lt;/code&gt; が呼び出されると、監視はオフになります。</target>
        </trans-unit>
        <trans-unit id="faabc209db7c57f4dac9a885c73eaefbaad312f3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;require&lt;/code&gt; statement in a test case information function</source>
          <target state="translated">&lt;code&gt;require&lt;/code&gt; なテストケース情報機能にステートメントを</target>
        </trans-unit>
        <trans-unit id="84c08b930b637efc74e4be68d8d836d66a78b1ba" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;require&lt;/code&gt; statement in the suite information function (&lt;code&gt;suite/0&lt;/code&gt;)</source>
          <target state="translated">スイート情報関数（ &lt;code&gt;suite/0&lt;/code&gt; ）の &lt;code&gt;require&lt;/code&gt; ステートメント</target>
        </trans-unit>
        <trans-unit id="c43c43f9ed4d600c7d71b45d8ac9c7203e0f6da6" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;require&lt;/code&gt; statement in the test suite information case or test case information-list is to look like &lt;code&gt;{require,CfgVarName}&lt;/code&gt; or &lt;code&gt;{require,AliasName,CfgVarName}&lt;/code&gt;. The arguments &lt;code&gt;AliasName&lt;/code&gt; and &lt;code&gt;CfgVarName&lt;/code&gt; are the same as the arguments to &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;AliasName&lt;/code&gt; becomes an alias for the configuration variable, and can be used as reference to the configuration data value. The configuration variable can be associated with any number of alias names, but each name must be unique within the same test suite. The two main uses for alias names follows:</source>
          <target state="translated">テストスイート情報ケースまたはテストケース情報リストの &lt;code&gt;require&lt;/code&gt; ステートメントは、 &lt;code&gt;{require,CfgVarName}&lt;/code&gt; または &lt;code&gt;{require,AliasName,CfgVarName}&lt;/code&gt; ます。引数 &lt;code&gt;AliasName&lt;/code&gt; および &lt;code&gt;CfgVarName&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; の引数と同じです。 &lt;code&gt;AliasName&lt;/code&gt; は構成変数のエイリアスになり、構成データ値への参照として使用できます。構成変数は任意の数のエイリアス名に関連付けることができますが、それぞれの名前は同じテストスイート内で一意である必要があります。エイリアス名の2つの主な用途は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5ff9958a6d15c210b3259bc6e40de68c3b9fa571" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;resend_indication()&lt;/code&gt;, defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;resend_indication()&lt;/code&gt; 、デフォルト &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0153a022671e7ff3f8f28950553457e8d9526f45" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;scanner&lt;/code&gt; to pre-process the text (program, etc.) to be parsed is not provided in the &lt;code&gt;yecc&lt;/code&gt; module. The scanner serves as a kind of lexicon look-up routine. It is possible to write a grammar that uses only character tokens as terminal symbols, thereby eliminating the need for a scanner, but this would make the parser larger and slower.</source>
          <target state="translated">解析するテキスト（プログラムなど）を前処理する &lt;code&gt;scanner&lt;/code&gt; は、 &lt;code&gt;yecc&lt;/code&gt; モジュールには提供されていません。スキャナーは、一種の辞書検索ルーチンとして機能します。文字トークンのみを終端記号として使用する文法を記述して、スキャナーの必要性をなくすことは可能ですが、これによりパーサーが大きく、遅くなります。</target>
        </trans-unit>
        <trans-unit id="87ac317ef6fe7f30b73d95244c9d1336c4280f0e" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;segment_reason()&lt;/code&gt;, indicates that the remote user has replied with an explicit transactionError for this segment. This is of course only possible if the reply was segmented.</source>
          <target state="translated">&lt;code&gt;segment_reason()&lt;/code&gt; 、リモートユーザがこのセグメントの明示的transactionErrorと答えたことを示しています。もちろん、これは応答がセグメント化されている場合にのみ可能です。</target>
        </trans-unit>
        <trans-unit id="b6458c8e12fe0d6e7fcbb7cf092bd2f54ade6bdd" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;send_error()&lt;/code&gt;, indicates that the send function of the megaco transport callback module failed to send the request. There are two separate cases: &lt;code&gt;send_cancelled_reason()&lt;/code&gt; and &lt;code&gt;send_failed_reason()&lt;/code&gt;. The first is the result of the send function returning &lt;code&gt;{cancel, Reason}&lt;/code&gt; and the second is some other kind of erroneous return value. See the &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; function for more info.</source>
          <target state="translated">&lt;code&gt;send_error()&lt;/code&gt; 、MEGACO輸送コールバックモジュールの送信機能は、要求を送信することができなかったことを示しています。 &lt;code&gt;send_cancelled_reason()&lt;/code&gt; と &lt;code&gt;send_failed_reason()&lt;/code&gt; の 2つのケースがあります。1つ目は &lt;code&gt;{cancel, Reason}&lt;/code&gt; を返すsend関数の結果であり、2つ目は他の種類の誤った戻り値です。詳細については、 &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="2afcbf56605493e5cb096c43726f60e7b25a7e6c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;send_reason()&lt;/code&gt;, indicates that the transport module &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; function did not send the message. The reason for this can be:</source>
          <target state="translated">&lt;code&gt;send_reason()&lt;/code&gt; 、搬送モジュールことを示し &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; 関数は、メッセージを送信しませんでした。この理由は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0c9e5cf1fc1ef1d9c81cf8a83bbb2c92cb7facff" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;snmpa_mib_storage&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">&lt;code&gt;snmpa_mib_storage&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="be1b2110a34fe49a492c740fc6d2a1e353485a6f" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;snmpa_notification_delivery_info_receiver&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">&lt;code&gt;snmpa_notification_delivery_info_receiver&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="da19f426ecc187ba7aec2fbddba35e35ebdc8cfe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;supervisor&lt;/code&gt; and a &lt;code&gt;supervisor_bridge&lt;/code&gt; are also &lt;code&gt;gen_server&lt;/code&gt; processes. To return information that this process is a supervisor and the name of the callback module, &lt;code&gt;Module&lt;/code&gt; is &lt;code&gt;supervisor&lt;/code&gt; and &lt;code&gt;Function&lt;/code&gt; is the name of the supervisor callback module. &lt;code&gt;Arity&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;, as the &lt;code&gt;init/1&lt;/code&gt; function is called initially in the callback module.</source>
          <target state="translated">&lt;code&gt;supervisor&lt;/code&gt; と &lt;code&gt;supervisor_bridge&lt;/code&gt; はまたある &lt;code&gt;gen_server&lt;/code&gt; プロセス。このプロセスがスーパーバイザであることとコールバックモジュールの名前であるという情報を返すには、 &lt;code&gt;Module&lt;/code&gt; が &lt;code&gt;supervisor&lt;/code&gt; 、 &lt;code&gt;Function&lt;/code&gt; がスーパーバイザコールバックモジュールの名前です。 &lt;code&gt;Arity&lt;/code&gt; は &lt;code&gt;1&lt;/code&gt; です。これは、 &lt;code&gt;init/1&lt;/code&gt; 関数がコールバックモジュールで最初に呼び出されるためです。</target>
        </trans-unit>
        <trans-unit id="9e84ddb3d1abb6010ba95215374a2c3fda587dad" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;temporary&lt;/code&gt; child process is never restarted (not even when the supervisor restart strategy is &lt;code&gt;rest_for_one&lt;/code&gt; or &lt;code&gt;one_for_all&lt;/code&gt; and a sibling death causes the temporary process to be terminated).</source>
          <target state="translated">&lt;code&gt;temporary&lt;/code&gt; （スーパーバイザリスタート戦略ではありません場合でも、子プロセスが再開されることはありません &lt;code&gt;rest_for_one&lt;/code&gt; または &lt;code&gt;one_for_all&lt;/code&gt; と兄弟の死は一時的なプロセスが終了されます）。</target>
        </trans-unit>
        <trans-unit id="1d2a39bc2849b9b4ae106fb8032df69b5cf6fefa" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;tftp&lt;/code&gt; callback module is to be implemented as a &lt;code&gt;tftp&lt;/code&gt; behavior and export the functions listed in the following.</source>
          <target state="translated">&lt;code&gt;tftp&lt;/code&gt; コールバックモジュールとして実装される &lt;code&gt;tftp&lt;/code&gt; 挙動及び以下に記載されている関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="27cee850217202e8dabaf2537514f0583ea52228" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;tftp_logger&lt;/code&gt; callback module is to be implemented as a &lt;code&gt;tftp_logger&lt;/code&gt; behavior and export the following functions:</source>
          <target state="translated">&lt;code&gt;tftp_logger&lt;/code&gt; のコールバックモジュールとして実装される &lt;code&gt;tftp_logger&lt;/code&gt; の挙動と、以下の機能をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="6a934fbaa0dfee55a432f14191eb1f24df633cfe" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;tooBig&lt;/code&gt; error in an SNMPv1 packet will always use the &lt;code&gt;'NULL'&lt;/code&gt; value in all variable bindings.</source>
          <target state="translated">A &lt;code&gt;tooBig&lt;/code&gt; はSNMPv1パケットにエラーが常に使用されます &lt;code&gt;'NULL'&lt;/code&gt; のすべての変数バインディングの値を。</target>
        </trans-unit>
        <trans-unit id="33cb62d5e14ba5b3198337c7ba3cd6fbbcb1589c" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;transaction_reason()&lt;/code&gt;, indicates that the remote user has replied with an explicit transactionError.</source>
          <target state="translated">&lt;code&gt;transaction_reason()&lt;/code&gt; 、リモートユーザが明示的transactionErrorと答えたことを示しています。</target>
        </trans-unit>
        <trans-unit id="e53d6f03dc678459ddffb4d98f7b557780e96fef" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;transient&lt;/code&gt; child process is restarted only if it terminates abnormally, that is, with an exit reason other than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;transient&lt;/code&gt; 子プロセスが終了以外の理由で、すなわち、それが異常終了した場合にのみ再開される &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e9eb9caf239b9bb7b398b87222c53f550da50ad9" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;user_cancel_error()&lt;/code&gt;, indicates that the request has been canceled by the user. &lt;code&gt;reason_for_user_cancel()&lt;/code&gt; is the reason given in the call to the &lt;code&gt;&lt;a href=&quot;#cancel&quot;&gt;cancel&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;user_cancel_error()&lt;/code&gt; 、要求はユーザによってキャンセルされたことを示します。 &lt;code&gt;reason_for_user_cancel()&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#cancel&quot;&gt;cancel&lt;/a&gt;&lt;/code&gt; 関数の呼び出しで与えられた理由です。</target>
        </trans-unit>
        <trans-unit id="caaac6e0eeba26f0e8f05cc72836874db9f304d3" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;user_cancel_reason()&lt;/code&gt;, indicates that the request has been canceled by the user. &lt;code&gt;reason_for_user_cancel()&lt;/code&gt; is the reason given in the call to the &lt;code&gt;&lt;a href=&quot;megaco#cancel&quot;&gt;cancel&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;user_cancel_reason()&lt;/code&gt; 、要求はユーザによってキャンセルされたことを示します。 &lt;code&gt;reason_for_user_cancel()&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;megaco#cancel&quot;&gt;cancel&lt;/a&gt;&lt;/code&gt; 関数の呼び出しで与えられた理由です。</target>
        </trans-unit>
        <trans-unit id="5c86492d0dd649ce209af387e79b667ae92d9b32" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;warn_xxx&lt;/code&gt; form, to turn on the warning.</source>
          <target state="translated">警告をオンにする &lt;code&gt;warn_xxx&lt;/code&gt; フォーム。</target>
        </trans-unit>
        <trans-unit id="479ddacfc5924b63944cf2dc4cf2784fa7162444" translate="yes" xml:space="preserve">
          <source>A &lt;code&gt;{flag,_}&lt;/code&gt; tuple applies to all other tuples that follow.</source>
          <target state="translated">&lt;code&gt;{flag,_}&lt;/code&gt; タプルは、以下の他のすべてのタプルに適用されます。</target>
        </trans-unit>
        <trans-unit id="d4775dc55315e4de3bfb697e86b747e1981e9aa0" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;components&quot;&gt;connected component&lt;/strong&gt; is a maximal subgraph such that there is a path between each pair of vertices, considering all edges undirected.</source>
          <target state="translated">&lt;strong id=&quot;components&quot;&gt;連結成分は&lt;/strong&gt;無向すべてのエッジを考慮して、頂点の各対の間にパスが存在する最大のサブグラフようです。</target>
        </trans-unit>
        <trans-unit id="c5c8116d1626ee6ce9e1eb9f966086aa8cd78606" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;depth_first_traversal&quot;&gt;depth-first traversal&lt;/strong&gt; of a directed digraph can be viewed as a process that visits all vertices of the digraph. Initially, all vertices are marked as unvisited. The traversal starts with an arbitrarily chosen vertex, which is marked as visited, and follows an edge to an unmarked vertex, marking that vertex. The search then proceeds from that vertex in the same fashion, until there is no edge leading to an unvisited vertex. At that point the process backtracks, and the traversal continues as long as there are unexamined edges. If unvisited vertices remain when all edges from the first vertex have been examined, some so far unvisited vertex is chosen, and the process is repeated.</source>
          <target state="translated">&lt;strong id=&quot;depth_first_traversal&quot;&gt;深さ優先トラバーサル&lt;/strong&gt;指向有向グラフのは、訪問有向グラフの全ての頂点をプロセスとして見ることができます。最初は、すべての頂点が未訪問としてマークされています。トラバーサルは、訪問済みとしてマークされた任意に選択された頂点から始まり、マークされていない頂点までエッジをたどり、その頂点をマークします。次に、その頂点から同じ方法で、未訪問の頂点につながるエッジがなくなるまで、検索が続行されます。その時点で、プロセスはバックトラックし、未調査のエッジがある限り、トラバーサルが続行されます。最初の頂点のすべてのエッジを調べたときに未訪問の頂点が残っている場合は、これまでに未訪問の頂点がいくつか選択され、プロセスが繰り返されます。</target>
        </trans-unit>
        <trans-unit id="1b2506dfb79fff8f12c8b8a1cad93d4f54d6d800" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;digraph&quot;&gt;directed graph&lt;/strong&gt; (or just &quot;digraph&quot;) is a pair (V, E) of a finite set V of &lt;strong id=&quot;vertex&quot;&gt;vertices&lt;/strong&gt; and a finite set E of &lt;strong id=&quot;edge&quot;&gt;directed edges&lt;/strong&gt; (or just &quot;edges&quot;). The set of edges E is a subset of V &amp;times; V (the Cartesian product of V with itself).</source>
          <target state="translated">&lt;strong id=&quot;digraph&quot;&gt;有向グラフ&lt;/strong&gt;（または単に「有向グラフ」）は、一対の有限集合Vの（V、E）であり&lt;strong id=&quot;vertex&quot;&gt;、頂点&lt;/strong&gt;の有限集合E &lt;strong id=&quot;edge&quot;&gt;有向エッジ&lt;/strong&gt;（または単に「エッジ」）。エッジのセットEは、V&amp;times;V（Vとそれ自体のデカルト積）のサブセットです。</target>
        </trans-unit>
        <trans-unit id="d772fcf249486473885a86b1e0fb07e1b81cc558" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;function&quot;&gt;function&lt;/strong&gt; F is a relation, a subset of X &amp;times; Y, such that the domain of F is equal to X and such that for every x in X there is a unique element y in Y with (x, y) in F. The latter condition can be formulated as follows: if x F y and x F z, then y = z. In this module, it is not required that the domain of F is equal to X for a relation to be considered a function.</source>
          <target state="translated">&lt;strong id=&quot;function&quot;&gt;関数&lt;/strong&gt; Fは、F.ザにおけるFのドメインはXに等しく、X内のすべてのxに対して（X、Y）とY内で一意要素yが存在するようなものであることがこのような関係、X&amp;times;Yの部分集合であります後者の条件は、次のように定式化できます。xF yおよびx F zの場合、y = z。このモジュールでは、関係を関数と見なすために、Fの領域がXに等しい必要はありません。</target>
        </trans-unit>
        <trans-unit id="9e6750400d02e17360f35f2ed9e1616f594d887a" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;loop&quot;&gt;loop&lt;/strong&gt; is a cycle of length one.</source>
          <target state="translated">&lt;strong id=&quot;loop&quot;&gt;ループは&lt;/strong&gt;、長さ1のサイクルです。</target>
        </trans-unit>
        <trans-unit id="7c11e23c2588408ff5e86ef238bc8fcbf38b7c2f" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;partial_ordering&quot;&gt;partial ordering&lt;/strong&gt; of a set S is a transitive, antisymmetric, and reflexive relation between the objects of S.</source>
          <target state="translated">&lt;strong id=&quot;partial_ordering&quot;&gt;半順序&lt;/strong&gt;集合Sのは、Sのオブジェクト間の推移、反対称、及び反射関係であります</target>
        </trans-unit>
        <trans-unit id="ac7ee38ffc1b59180cff85a400c6326e6a6aab8c" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;partition&quot;&gt;partition&lt;/strong&gt; of a set X is a collection S of non-empty subsets of X whose union is X and whose elements are pairwise disjoint.</source>
          <target state="translated">&lt;strong id=&quot;partition&quot;&gt;パーティション&lt;/strong&gt;集合Xの組合Xであり、その要素ペアワイズ互いに素であるXの空でない部分集合の収集Sです。</target>
        </trans-unit>
        <trans-unit id="d7deee876d2b62ea04d66ac5c3791065935e84a9" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;path&quot;&gt;path&lt;/strong&gt; P from v[1] to v[k] in a digraph (V, E) is a non-empty sequence v[1], v[2], ..., v[k] of vertices in V such that there is an edge (v[i],v[i+1]) in E for 1 &amp;lt;= i &amp;lt; k.</source>
          <target state="translated">ダイグラフ（V、E）のv [1]からv [k]への&lt;strong id=&quot;path&quot;&gt;パス&lt;/strong&gt; Pは、Vの頂点の空でないシーケンスv [1]、v [2]、...、v [k]です。 1 &amp;lt;= i &amp;lt;kのEにエッジ（v [i]、v [i + 1]）があること。</target>
        </trans-unit>
        <trans-unit id="e8aedf35788745c62222f34810b580741df0e0a0" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;relation&quot;&gt;relation&lt;/strong&gt; is a subset of X &amp;times; Y. Let R be a relation. The fact that (x, y) belongs to R is written as x R y. As relations are sets, the definitions of the last item (subset, union, and so on) apply to relations as well.</source>
          <target state="translated">&lt;strong id=&quot;relation&quot;&gt;関係は、&lt;/strong&gt;関係であるX&amp;times;YのレッツRのサブセットです。（x、y）がRに属することをx R yと書く。リレーションはセットであるため、最後のアイテム（サブセット、ユニオンなど）の定義はリレーションにも適用されます。</target>
        </trans-unit>
        <trans-unit id="95446742f2edee92dac5319d85b31460c32015fe" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;simple_cycle&quot;&gt;simple cycle&lt;/strong&gt; is a path that is both a cycle and simple.</source>
          <target state="translated">&lt;strong id=&quot;simple_cycle&quot;&gt;単純サイクルは、&lt;/strong&gt;サイクルと簡単でもある経路です。</target>
        </trans-unit>
        <trans-unit id="39c00c45dee614b6888498650b2a3b294abd94c1" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;strong_components&quot;&gt;strongly connected component&lt;/strong&gt; is a maximal subgraph such that there is a path between each pair of vertices.</source>
          <target state="translated">&lt;strong id=&quot;strong_components&quot;&gt;強連結成分は、&lt;/strong&gt;頂点の各対の間の経路が存在するように最大の部分グラフです。</target>
        </trans-unit>
        <trans-unit id="77ea1ecd6a8be92c17cbe1f20f7156f6526977e8" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;sub_binary&quot;&gt;sub binary&lt;/strong&gt; is created by &lt;code&gt;split_binary/2&lt;/code&gt; and when a binary is matched out in a binary pattern. A sub binary is a reference into a part of another binary (refc or heap binary, but never into another sub binary). Therefore, matching out a binary is relatively cheap because the actual binary data is never copied.</source>
          <target state="translated">&lt;strong id=&quot;sub_binary&quot;&gt;サブバイナリ&lt;/strong&gt;で作成され &lt;code&gt;split_binary/2&lt;/code&gt; バイナリ、バイナリパターンで一致した場合。サブバイナリは、別のバイナリの一部への参照です（refcまたはヒープバイナリですが、別のサブバイナリへの参照はありません）。したがって、実際のバイナリデータはコピーされないため、バイナリの照合は比較的安価です。</target>
        </trans-unit>
        <trans-unit id="0025b1cc50f1b9268b28c701eca602b36605c8b7" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;subgraph&quot;&gt;subgraph&lt;/strong&gt; G' of G is a digraph whose vertices and edges form subsets of the vertices and edges of G.</source>
          <target state="translated">&lt;strong id=&quot;subgraph&quot;&gt;部分グラフ&lt;/strong&gt; GのG」は、その頂点と辺Gの頂点およびエッジのサブセットを形成する有向グラフであります</target>
        </trans-unit>
        <trans-unit id="0039a610746b5b7e8cb57b8cba5ce780934ff7d1" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;tree&quot;&gt;tree&lt;/strong&gt; is an acyclic non-empty digraph such that there is a unique path between every pair of vertices, considering all edges undirected.</source>
          <target state="translated">&lt;strong id=&quot;tree&quot;&gt;ツリーは&lt;/strong&gt;無向すべてのエッジを考慮して、頂点のすべての対の間の一意の経路が存在する非環式非空有向グラフようです。</target>
        </trans-unit>
        <trans-unit id="b32ebe8bef0eb8997c83afb4f754eff3d04ebc28" translate="yes" xml:space="preserve">
          <source>A &lt;strong id=&quot;type&quot;&gt;type&lt;/strong&gt; is an element of the domain of Sets.</source>
          <target state="translated">&lt;strong id=&quot;type&quot;&gt;タイプは&lt;/strong&gt;設定のドメインの要素です。</target>
        </trans-unit>
        <trans-unit id="44f5c21e7ab66e7f86c76212201ea05cc098359a" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;C node&lt;/strong&gt; is a C program written to act as a hidden node in a distributed Erlang system. The library &lt;strong&gt;Erl_Interface&lt;/strong&gt; contains functions for this purpose. For more information about C nodes, see the &lt;code&gt; Erl_Interface&lt;/code&gt; application and &lt;code&gt; Interoperability Tutorial.&lt;/code&gt;.</source>
          <target state="translated">A &lt;strong&gt;Cノードは、&lt;/strong&gt;分散Erlangのシステムに隠されたノードとして動作するように書かれたCプログラムです。ライブラリ&lt;strong&gt;Erl_Interfaceに&lt;/strong&gt;は、この目的のための関数が含まれています。Cノードの詳細については、 &lt;code&gt; Erl_Interface&lt;/code&gt; アプリケーションと &lt;code&gt; Interoperability Tutorial.&lt;/code&gt; 参照してください。。</target>
        </trans-unit>
        <trans-unit id="c01dd20588e862d2bb347c0df2cf5a5ed91552dc" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;C node&lt;/strong&gt; is a C program written to act as a hidden node in a distributed Erlang system. The library &lt;strong&gt;Erl_Interface&lt;/strong&gt; contains functions for this purpose. For more information about C nodes, see the &lt;code&gt;Erl_Interface&lt;/code&gt; application and &lt;code&gt;Interoperability Tutorial.&lt;/code&gt;.</source>
          <target state="translated">A &lt;strong&gt;Cノードは、&lt;/strong&gt;分散Erlangのシステムに隠されたノードとして動作するように書かれたCプログラムです。ライブラリ&lt;strong&gt;Erl_Interfaceに&lt;/strong&gt;は、この目的のための関数が含まれています。Cノードの詳細については、 &lt;code&gt;Erl_Interface&lt;/code&gt; アプリケーションおよび &lt;code&gt;Interoperability Tutorial.&lt;/code&gt; 参照してください。。</target>
        </trans-unit>
        <trans-unit id="66dcfd2061a6be3ffc5089c446867b8415893bb3" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;basic target system&lt;/strong&gt; that can be started by calling the ordinary &lt;code&gt;erl&lt;/code&gt; script.</source>
          <target state="translated">&lt;strong&gt;基本的なターゲットシステム&lt;/strong&gt;通常の呼び出しによって開始することができ &lt;code&gt;erl&lt;/code&gt; スクリプトを。</target>
        </trans-unit>
        <trans-unit id="55d83db79d583006717a0aeac0080dc553b75d98" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;bit string generator&lt;/strong&gt; is written as:</source>
          <target state="translated">&lt;strong&gt;ビット列発生器は、&lt;/strong&gt;として書かれています：</target>
        </trans-unit>
        <trans-unit id="afe2abf552bd26d880de2e2001d284ae41c0e744" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;bitstring&lt;/strong&gt; is a sequence of zero or more bits, where the number of bits does not need to be divisible by 8. If the number of bits is divisible by 8, the bitstring is also a binary.</source>
          <target state="translated">&lt;strong&gt;ビット文字列は、&lt;/strong&gt;ビット数がビット数が8で割り切れる場合は8の倍数である必要はなく、ゼロ以上のビットのシーケンスであり、ビットストリングもバイナリです。</target>
        </trans-unit>
        <trans-unit id="a2d735f3a5066ecc4d1454fc4b0afd8407d709de" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;configuration file&lt;/strong&gt; contains values for configuration parameters for the applications in the system. The &lt;code&gt;erl&lt;/code&gt; command-line argument &lt;code&gt;-config Name&lt;/code&gt; tells the system to use data in the system configuration file &lt;code&gt;Name.config&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;設定ファイルには、&lt;/strong&gt;システム内のアプリケーションの構成パラメータの値が含まれています。 &lt;code&gt;erl&lt;/code&gt; コマンドライン引数 &lt;code&gt;-config Name&lt;/code&gt; システム・コンフィギュレーション・ファイルで使用するデータにシステムに指示します &lt;code&gt;Name.config&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5f0a033b07b19b645b9f720df2987e2a2450883" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;distributed Erlang system&lt;/strong&gt; consists of a number of Erlang runtime systems communicating with each other. Each such runtime system is called a &lt;strong&gt;node&lt;/strong&gt;. Message passing between processes at different nodes, as well as links and monitors, are transparent when pids are used. Registered names, however, are local to each node. This means that the node must be specified as well when sending messages, and so on, using registered names.</source>
          <target state="translated">&lt;strong&gt;分散アーラン・システムは、&lt;/strong&gt;互いに通信Erlangのランタイムシステムの数から成ります。そのようなランタイムシステムはそれぞれ&lt;strong&gt;ノード&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。pidが使用されている場合、リンクとモニターだけでなく、異なるノードのプロセス間を通過するメッセージは透過的です。ただし、登録された名前は各ノードに対してローカルです。つまり、登録された名前を使用してメッセージを送信するときなどに、ノードも指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="35fc39aba9120eb638121a4fd00b0aff5c8df307" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;filter&lt;/strong&gt; is an expression that evaluates to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;フィルタは&lt;/strong&gt;式ですと評価されている &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af58fb7b10794b226c8b033e42961c724b6386f1" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;filter&lt;/strong&gt; is an expression, which evaluates to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;フィルタは、&lt;/strong&gt;に評価される式であり、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7239a397a4de1f7e0f662d28e63db77e29a8a038" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;function clause&lt;/strong&gt; consists of a clause head and a clause body, separated by &lt;code&gt;-&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ファンクション節は、&lt;/strong&gt;により分離節ヘッドと句体で構成します &lt;code&gt;-&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="702433f39c9e775694cb8f7f07b7d2e088b91814" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;function declaration&lt;/strong&gt; is a sequence of function clauses separated by semicolons, and terminated by period (.).</source>
          <target state="translated">&lt;strong&gt;関数宣言は、&lt;/strong&gt;セミコロンで区切られた関数句の配列であり、そして期間によって終了します（。）。</target>
        </trans-unit>
        <trans-unit id="e0718a97c18e8111eccdd99489900e93dcc235d2" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;generator&lt;/strong&gt; is written as:</source>
          <target state="translated">&lt;strong&gt;発電機は、&lt;/strong&gt;と書かれています：</target>
        </trans-unit>
        <trans-unit id="49fb24f8d2c4665a71b9fb75a2c85a70a1e64874" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;guard sequence&lt;/strong&gt; is a sequence of guards, separated by semicolon (;). The guard sequence is true if at least one of the guards is true. (The remaining guards, if any, are not evaluated.)</source>
          <target state="translated">&lt;strong&gt;ガード配列は、&lt;/strong&gt;セミコロンで区切られた、ガードの配列です（;）。少なくとも1つのガードが真であれば、ガードシーケンスは真です。（残りのガードがあれば、評価されません。）</target>
        </trans-unit>
        <trans-unit id="981eab14479daed48688de4a5ee56b2147f16eb8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;guard&lt;/strong&gt; is a sequence of guard expressions, separated by comma (,). The guard is true if all guard expressions evaluate to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ガードは、&lt;/strong&gt;コンマ（、）で区切られた、ガード式の配列です。すべてのガード式が &lt;code&gt;true&lt;/code&gt; と評価された場合、ガードはtrue です。</target>
        </trans-unit>
        <trans-unit id="a741610f94ddf021d50b6a4ce0ea1ba4c3d40351" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;list&lt;/strong&gt; is any number of items. For example, an argument list can consist of zero, one, or more arguments.</source>
          <target state="translated">&lt;strong&gt;リストには、&lt;/strong&gt;任意の数の項目です。たとえば、引数リストは0個、1個、またはそれ以上の引数で構成できます。</target>
        </trans-unit>
        <trans-unit id="4bc9678f26cf6461a8a6b9764f2f492dda8d420f" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;log event&lt;/strong&gt; consists of a &lt;strong&gt;log level&lt;/strong&gt;, the &lt;strong&gt;message&lt;/strong&gt; to be logged, and &lt;strong&gt;metadata&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;ログイベントは、&lt;/strong&gt;から成る&lt;strong&gt;ログレベル&lt;/strong&gt;、&lt;strong&gt;メッセージ&lt;/strong&gt;ログに記録される、および&lt;strong&gt;メタデータ&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d6bec719f540faf5ce29c281150ca7c1acd29a54" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;match context&lt;/strong&gt; is similar to a sub binary, but is optimized for binary matching. For example, it contains a direct pointer to the binary data. For each field that is matched out of a binary, the position in the match context is incremented.</source>
          <target state="translated">&lt;strong&gt;マッチコンテキストは&lt;/strong&gt;サブバイナリと同様であるが、バイナリマッチングのために最適化されています。たとえば、バイナリデータへの直接ポインタが含まれています。バイナリから一致するフィールドごとに、一致コンテキスト内の位置が増加します。</target>
        </trans-unit>
        <trans-unit id="1e9bc69d9c0a74c78cd0265b7c282de9ccd749ff" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;module attribute&lt;/strong&gt; defines a certain property of a module.</source>
          <target state="translated">&lt;strong&gt;モジュール属性は、&lt;/strong&gt;モジュールの特定のプロパティを定義します。</target>
        </trans-unit>
        <trans-unit id="e8190f1687ae12b86f4402d53955920f9bd416c8" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;node&lt;/strong&gt; is an executing Erlang runtime system that has been given a name, using the command-line flag &lt;code&gt;-name&lt;/code&gt; (long names) or &lt;code&gt;-sname&lt;/code&gt; (short names).</source>
          <target state="translated">&lt;strong&gt;ノードは、&lt;/strong&gt;コマンド・ライン・フラグ用いて、名前を与えられた実行Erlangのランタイムシステムである &lt;code&gt;-name&lt;/code&gt; （長い名前）または &lt;code&gt;-sname&lt;/code&gt; （短い名前）。</target>
        </trans-unit>
        <trans-unit id="6e89fa647f29644ee120e6617c0ff85024742693" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;raw filename&lt;/strong&gt; is a filename specified as a binary. The Erlang VM does not translate a filename specified as a binary on systems with transparent naming.</source>
          <target state="translated">&lt;strong&gt;生のファイル名は、&lt;/strong&gt;バイナリとして指定されたファイル名です。Erlang VMは、透過的な名前のシステムでバイナリとして指定されたファイル名を変換しません。</target>
        </trans-unit>
        <trans-unit id="a275977fa1312a664ffd71817618e729388e7ac1" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;release package&lt;/strong&gt; is a compressed tar file containing code for a certain version of a release, created by calling &lt;code&gt;&lt;a href=&quot;systools#make_tar-1&quot;&gt;systools:make_tar/1,2&lt;/a&gt;&lt;/code&gt;. The release package is to be located in the &lt;code&gt;$ROOT/releases&lt;/code&gt; directory of the previous version of the release, where &lt;code&gt;$ROOT&lt;/code&gt; is the installation root directory, &lt;code&gt;code:root_dir()&lt;/code&gt;. Another &lt;code&gt;releases&lt;/code&gt; directory can be specified using the SASL configuration parameter &lt;code&gt;releases_dir&lt;/code&gt; or the OS environment variable &lt;code&gt;RELDIR&lt;/code&gt;. The release handler must have write access to this directory to install the new release. The persistent state of the release handler is stored there in a file called &lt;code&gt;RELEASES&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;リリースパッケージを&lt;/strong&gt;呼び出すことによって作成されたリリースで、特定のバージョンのコードを含む圧縮されたtarファイルです &lt;code&gt;&lt;a href=&quot;systools#make_tar-1&quot;&gt;systools:make_tar/1,2&lt;/a&gt;&lt;/code&gt; 。リリースパッケージは、以前のバージョンの &lt;code&gt;$ROOT/releases&lt;/code&gt; の$ ROOT / releasesディレクトリにあります。ここで、 &lt;code&gt;$ROOT&lt;/code&gt; はインストールルートディレクトリ &lt;code&gt;code:root_dir()&lt;/code&gt; です。別 &lt;code&gt;releases&lt;/code&gt; ディレクトリには、SASLの設定パラメータで指定することができ &lt;code&gt;releases_dir&lt;/code&gt; やOSの環境変数 &lt;code&gt;RELDIR&lt;/code&gt; を。新しいリリースをインストールするには、リリースハンドラにこのディレクトリへの書き込みアクセス権が必要です。リリースハンドラの永続的な状態は、 &lt;code&gt;RELEASES&lt;/code&gt; というファイルに保存されます。。</target>
        </trans-unit>
        <trans-unit id="b0e927f4d2edf71fc5d44ab43ed17efe8434b72b" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;release&lt;/strong&gt; is a complete system made out from a subset of Erlang/OTP applications and a set of user-specific applications.</source>
          <target state="translated">&lt;strong&gt;放出は、&lt;/strong&gt;アーラン/ OTPアプリケーションのサブセットとユーザ固有のアプリケーションの集合から作られた完全なシステムです。</target>
        </trans-unit>
        <trans-unit id="976ea0cb3408e08f1ff1f8752455df14d099e36d" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;sequence&lt;/strong&gt; is one or more items. For example, a clause body consists of a sequence of expressions. This means that there must be at least one expression.</source>
          <target state="translated">&lt;strong&gt;シーケンスは、&lt;/strong&gt;一つ以上の項目です。たとえば、句本体は一連の式で構成されます。つまり、少なくとも1つの式が必要です。</target>
        </trans-unit>
        <trans-unit id="17f419c4c64396cd3eddb7f3ce76e4edf856d5d9" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;simple target system&lt;/strong&gt; where also code replacement in runtime can be performed.</source>
          <target state="translated">&lt;strong&gt;単純なターゲット・システム&lt;/strong&gt;ランタイムで、コードの交換を行うことができます。</target>
        </trans-unit>
        <trans-unit id="bd639259721f11093866111b359fef2a8236a3eb" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;simple test object&lt;/strong&gt; is one of the following:</source>
          <target state="translated">&lt;strong&gt;簡単なテストオブジェクトは、&lt;/strong&gt;次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="82a1fd7cbded9d1d8965325e8da4ad9119bb1b3f" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;start type&lt;/strong&gt; is defined when starting the application:</source>
          <target state="translated">&lt;strong&gt;開始タイプは、&lt;/strong&gt;アプリケーションの起動時に定義されています。</target>
        </trans-unit>
        <trans-unit id="bda980c9f19309f2c9c53c2d48e0d8715680611d" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;state change&lt;/strong&gt; cancels a &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; and any new transition option of this type belongs to the new state, that is; a &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; applies to the state the state machine enters.</source>
          <target state="translated">&lt;strong&gt;状態変化は&lt;/strong&gt;キャンセル &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; と、このタイプの新しい遷移オプションは、新しい状態に属します。 &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; は、状態マシンが入った状態に適用されます。</target>
        </trans-unit>
        <trans-unit id="a0236d18c08e4a43e425435b87053806e35cfab2" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;symmetric key&lt;/strong&gt; algorithm has one key only. The key is used for both encryption and decryption. These algorithms are fast, compared to public key algorithms (using two keys, one public and one private) and are therefore typically used for encrypting bulk data.</source>
          <target state="translated">&lt;strong&gt;対称鍵&lt;/strong&gt;アルゴリズムは、1つのキーだけを持っています。キーは、暗号化と復号化の両方に使用されます。これらのアルゴリズムは、公開キーアルゴリズム（1つの公開キーと1つの秘密キーを使用）と比較して高速であるため、通常、バルクデータの暗号化に使用されます。</target>
        </trans-unit>
        <trans-unit id="90e12c45690a2d90b9b7c27b63616643b3b02e6c" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;token&lt;/strong&gt; is a tuple containing information about syntactic category, the token annotations, and the terminal symbol. For punctuation characters (such as &lt;code&gt;;&lt;/code&gt; and &lt;code&gt;|&lt;/code&gt;) and reserved words, the category and the symbol coincide, and the token is represented by a two-tuple. Three-tuples have one of the following forms:</source>
          <target state="translated">&lt;strong&gt;トークンが&lt;/strong&gt;構文カテゴリ、トークン注釈、および終端記号に関する情報を含むタプルです。句読文字（ &lt;code&gt;;&lt;/code&gt; や &lt;code&gt;|&lt;/code&gt; など）と予約語の場合、カテゴリと記号は一致し、トークンは2タプルで表されます。3タプルの形式は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="c710c4620cfaa2e0ecb80d9dcbf14cd7cba3ca83" translate="yes" xml:space="preserve">
          <source>A &lt;strong&gt;user&lt;/strong&gt; in this context is basically a module implementing the &lt;code&gt;&lt;a href=&quot;snmpm_user&quot;&gt;snmpm_user&lt;/a&gt;&lt;/code&gt; behaviour. A &lt;strong&gt;user&lt;/strong&gt; can issue snmp requests and receive notification/traps.</source>
          <target state="translated">&lt;strong&gt;ユーザ&lt;/strong&gt;この文脈では、基本的に実施するモジュールである &lt;code&gt;&lt;a href=&quot;snmpm_user&quot;&gt;snmpm_user&lt;/a&gt;&lt;/code&gt; の動作を。&lt;strong&gt;ユーザーは、&lt;/strong&gt; SNMP要求を発行し、通知/トラップを受信することができます。</target>
        </trans-unit>
        <trans-unit id="9d2d133d1504025586739d14579afcf2a4b16f56" translate="yes" xml:space="preserve">
          <source>A Bin does not need to consist of a whole number of bytes.</source>
          <target state="translated">ビンは全体のバイト数で構成されている必要はありません。</target>
        </trans-unit>
        <trans-unit id="446abf7d28572cb4c16319d9159e9f73428ea954" translate="yes" xml:space="preserve">
          <source>A Bin is a low-level sequence of bits or bytes. The purpose of a Bin is to enable construction of binaries:</source>
          <target state="translated">Bin は、ビットやバイトの低レベルなシーケンスです。Binの目的は、バイナリの構築を可能にすることです。</target>
        </trans-unit>
        <trans-unit id="e18b65283e058fbced7bffdbd923450b434dd1e6" translate="yes" xml:space="preserve">
          <source>A Boolean indicating if the abstract code is compiler-generated. The Erlang Compiler does not emit warnings for such code.</source>
          <target state="translated">抽象コードがコンパイラで生成されたものかどうかを示すブール値。Erlangコンパイラはこのようなコードに対して警告を発しません。</target>
        </trans-unit>
        <trans-unit id="8fafe519eed7d47dd4061f1954b6119a2c8bfca3" translate="yes" xml:space="preserve">
          <source>A Boolean indicating if the origin of the abstract code is a record. Used by &lt;code&gt;Dialyzer&lt;/code&gt; to assign types to tuple elements.</source>
          <target state="translated">抽象コードの出所がレコードであるかどうかを示すブール値。 &lt;code&gt;Dialyzer&lt;/code&gt; がタプル要素にタイプを割り当てるために使用します。</target>
        </trans-unit>
        <trans-unit id="6de41a093bc1801677e67b2a06074305f2cfcbb9" translate="yes" xml:space="preserve">
          <source>A Boolean specifying if the data has been transmitted over the wire.</source>
          <target state="translated">データがワイヤで送信されたかどうかを指定するブール値。</target>
        </trans-unit>
        <trans-unit id="0384327244e40e6c1e6266a9b063a6ad9f121c59" translate="yes" xml:space="preserve">
          <source>A C node has access to names registered through the &lt;code&gt;global&lt;/code&gt; module in Kernel. Names can be looked up, allowing the C node to send messages to named Erlang services. C nodes can also register global names, allowing them to provide named services to Erlang processes or other C nodes.</source>
          <target state="translated">Cノードは、カーネルの &lt;code&gt;global&lt;/code&gt; モジュールを通じて登録された名前にアクセスできます。名前を検索して、Cノードが名前付きのErlangサービスにメッセージを送信できるようにすることができます。Cノードはグローバル名も登録できるため、Erlangプロセスまたは他のCノードに名前付きサービスを提供できます。</target>
        </trans-unit>
        <trans-unit id="682f01848ff412b810853a147adc8683eb3445ca" translate="yes" xml:space="preserve">
          <source>A C node server using long node names:</source>
          <target state="translated">長いノード名を使ったC言語のノードサーバです。</target>
        </trans-unit>
        <trans-unit id="bb35db3d2e0c2f3a8f1ad0dde3a30bca6441edc6" translate="yes" xml:space="preserve">
          <source>A C program that uses the Erl_Interface functions for setting up a connection to, and communicating with, a distributed Erlang node is called a &lt;strong&gt;C node&lt;/strong&gt;, or a &lt;strong&gt;hidden node&lt;/strong&gt;. The main advantage with a C node is that the communication from the Erlang programmer's perspective is extremely easy, as the C program behaves as a distributed Erlang node.</source>
          <target state="translated">Erl_Interface関数を使用して分散Erlangノードへの接続を確立し、Erlangノードと通信する&lt;strong&gt;C&lt;/strong&gt;プログラムは、&lt;strong&gt;Cノード&lt;/strong&gt;または&lt;strong&gt;非表示ノード&lt;/strong&gt;と呼ば&lt;strong&gt;れます&lt;/strong&gt;。 Cノードの主な利点は、Cプログラムが分散Erlangノードとして動作するため、Erlangプログラマーの観点からの通信が非常に簡単なことです。</target>
        </trans-unit>
        <trans-unit id="aa24a183415b610afc89cc8dcdc9ea0fca45c74b" translate="yes" xml:space="preserve">
          <source>A C-node acting as a server is assigned a creation number when it calls &lt;code&gt;ei_publish()&lt;/code&gt;.</source>
          <target state="translated">サーバーとして機能するCノードには、 &lt;code&gt;ei_publish()&lt;/code&gt; を呼び出すときに作成番号が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="e6c7aba44f58b6222686f74dc17e0b3bd8f16425" translate="yes" xml:space="preserve">
          <source>A C-node acting as a server is assigned a creation number when it calls &lt;code&gt;erl_publish()&lt;/code&gt;.</source>
          <target state="translated">サーバーとして機能するCノードには、 &lt;code&gt;erl_publish()&lt;/code&gt; を呼び出すときに作成番号が割り当てられます。</target>
        </trans-unit>
        <trans-unit id="4e5f9a2d3d932ac1d27aa18a6752ebffe6998981" translate="yes" xml:space="preserve">
          <source>A C-node appears to Erlang as a &lt;strong&gt;hidden node&lt;/strong&gt;. That is, Erlang processes that know the name of the C-node can communicate with it in a normal manner, but the node name does not appear in the listing provided by &lt;code&gt;erlang:nodes/0&lt;/code&gt; in &lt;code&gt;ERTS&lt;/code&gt;.</source>
          <target state="translated">CノードはErlangに&lt;strong&gt;非表示ノード&lt;/strong&gt;として&lt;strong&gt;表示されます&lt;/strong&gt;。すなわち、通常の方法でそれと通信することができるC-ノードの名前を知っているErlangのプロセスであるが、ノード名は、によって与えられるリストに表示されていない &lt;code&gt;erlang:nodes/0&lt;/code&gt; で &lt;code&gt;ERTS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e583adab7ce74410cb0c7c1feef4181103360c0c" translate="yes" xml:space="preserve">
          <source>A C-node appears to Erlang as a &lt;strong&gt;hidden node&lt;/strong&gt;. That is, Erlang processes that know the name of the C-node can communicate with it in a normal manner, but the node name is not shown in the listing provided by &lt;code&gt;erlang:nodes/0&lt;/code&gt; in &lt;code&gt;ERTS&lt;/code&gt;.</source>
          <target state="translated">CノードはErlangに&lt;strong&gt;非表示ノード&lt;/strong&gt;として&lt;strong&gt;表示されます&lt;/strong&gt;。すなわち、通常の方法でそれと通信することができるC-ノードの名前を知っているErlangのプロセスであるが、ノード名は、によって与えられるリストには示されていない &lt;code&gt;erlang:nodes/0&lt;/code&gt; で &lt;code&gt;ERTS&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="08059f968b0ad7c0b01718559289e25bd4f10ee5" translate="yes" xml:space="preserve">
          <source>A CPU Load and CPU Utilization Supervisor Process</source>
          <target state="translated">CPU負荷とCPU利用率のスーパーバイザプロセス</target>
        </trans-unit>
        <trans-unit id="5d2433f698f9b491166c109983414e1ff91ef2ab" translate="yes" xml:space="preserve">
          <source>A CPU topology can consist of both processor external, and processor internal NUMA nodes as long as each logical processor belongs to only one NUMA node. If &lt;code&gt;&amp;lt;ProcessorIds&amp;gt;&lt;/code&gt; is omitted, its default position is before &lt;code&gt;&amp;lt;NodeIds&amp;gt;&lt;/code&gt;. That is, the default is processor external NUMA nodes.</source>
          <target state="translated">CPUトポロジは、各論理プロセッサが1つのNUMAノードにのみ属している限り、プロセッサ外部とプロセッサ内部の両方のNUMAノードで構成できます。場合 &lt;code&gt;&amp;lt;ProcessorIds&amp;gt;&lt;/code&gt; が省略され、そのデフォルトの位置が前にある &lt;code&gt;&amp;lt;NodeIds&amp;gt;&lt;/code&gt; 。つまり、デフォルトはプロセッサー外部NUMAノードです。</target>
        </trans-unit>
        <trans-unit id="8ed401286c11a4167b9153f2763d08ee22a748c5" translate="yes" xml:space="preserve">
          <source>A CTH can be installed in multiple ways in your test run. You can do it for all tests in a run, for specific test suites, and for specific groups within a test suite. If you want a CTH to be present in all test suites within your test run, there are three ways to accomplish that, as follows:</source>
          <target state="translated">CTH は、テストランの中で複数の方法でインストールすることができます。ラン内のすべてのテスト、特定のテストスイート、テストスイート内の特定のグループに対してインストールすることができます。テストラン内のすべてのテストスイートにCTHをインストールしたい場合、以下の3つの方法があります。</target>
        </trans-unit>
        <trans-unit id="2484fb91ce1c0711415802f1c1e1b2f011ddea08" translate="yes" xml:space="preserve">
          <source>A Coverage Analysis Tool for Erlang</source>
          <target state="translated">Erlangのカバレッジ分析ツール</target>
        </trans-unit>
        <trans-unit id="462cfacaa4707242a4aec32251bf3187a68a4056" translate="yes" xml:space="preserve">
          <source>A Cross Reference Tool for analyzing dependencies between functions, modules, applications and releases.</source>
          <target state="translated">機能、モジュール、アプリケーション、リリース間の依存関係を分析するためのクロスリファレンスツールです。</target>
        </trans-unit>
        <trans-unit id="52283e056d3171a619c0cac0805fc7102c861750" translate="yes" xml:space="preserve">
          <source>A DBMS query language, Query List Comprehension (QLC) as an add-on library.</source>
          <target state="translated">DBMS のクエリ言語である Query List Comprehension (QLC)をアドオンライブラリとして提供します。</target>
        </trans-unit>
        <trans-unit id="bb6bc7a0a2c07a2fe54be2405da37b62f7c39bde" translate="yes" xml:space="preserve">
          <source>A DSA private key can look as follows:</source>
          <target state="translated">DSA 秘密鍵は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="a0b5e71146772a786dbb1661b191c55af9cb0b9a" translate="yes" xml:space="preserve">
          <source>A Diameter application supported by the service.</source>
          <target state="translated">サービスがサポートするDiameterアプリケーション。</target>
        </trans-unit>
        <trans-unit id="d177fdf4f1cf327fbf5fecfc4fa72345624b5d5f" translate="yes" xml:space="preserve">
          <source>A Diameter message as passed over the transport interface.</source>
          <target state="translated">トランスポート・インターフェースを介して渡される Diameter メッセージ。</target>
        </trans-unit>
        <trans-unit id="62bfb25c7e21e8b536daf6c9f716b0eb6fa490c9" translate="yes" xml:space="preserve">
          <source>A Diameter node is implemented by configuring a &lt;strong&gt;service&lt;/strong&gt; and one or more &lt;strong&gt;transports&lt;/strong&gt; using the interface module &lt;code&gt;&lt;a href=&quot;diameter&quot;&gt;diameter&lt;/a&gt;&lt;/code&gt;. The service configuration defines the Diameter applications to be supported by the node and, typically, the capabilities that it should send to remote peers at capabilities exchange upon the establishment of transport connections. A transport is configured on a service and provides protocol-specific send/receive functionality by way of a transport interface defined by diameter and implemented by a transport module. The diameter application provides two transport modules: &lt;code&gt;&lt;a href=&quot;diameter_tcp&quot;&gt;diameter_tcp&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;diameter_sctp&quot;&gt;diameter_sctp&lt;/a&gt;&lt;/code&gt; for transport over TCP (using &lt;code&gt;gen_tcp&lt;/code&gt;) and SCTP (using &lt;code&gt;gen_sctp&lt;/code&gt;) respectively. Other transports can be provided by any module that implements diameter's &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport interface&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Diameterノードは、インターフェースモジュールを使用して&lt;strong&gt;サービス&lt;/strong&gt;と1つ以上の&lt;strong&gt;トランスポート&lt;/strong&gt;を構成することで実装されます。 &lt;code&gt;&lt;a href=&quot;diameter&quot;&gt;diameter&lt;/a&gt;&lt;/code&gt; 。サービス構成は、ノードでサポートされるDiameterアプリケーションと、通常、トランスポート接続の確立時に機能交換でリモートピアに送信する必要がある機能を定義します。トランスポートはサービスで構成され、diameterによって定義され、トランスポートモジュールによって実装されるトランスポートインターフェイスを介して、プロトコル固有の送受信機能を提供します。 ：Diameterアプリケーションは、二つの搬送モジュール提供 &lt;code&gt;&lt;a href=&quot;diameter_tcp&quot;&gt;diameter_tcp&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;diameter_sctp&quot;&gt;diameter_sctp&lt;/a&gt;&lt;/code&gt; TCP（使用上の輸送用 &lt;code&gt;gen_tcp&lt;/code&gt; （使用）およびSCTPを &lt;code&gt;gen_sctp&lt;/code&gt; ）それぞれ。他のトランスポートは、diameterの &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport interface&lt;/a&gt;&lt;/code&gt; を実装する任意のモジュールによって提供できます。</target>
        </trans-unit>
        <trans-unit id="f6f02eb64bbe780dfde9efd8754001ee09c7d316" translate="yes" xml:space="preserve">
          <source>A Disk Supervisor Process</source>
          <target state="translated">ディスクスーパーバイザのプロセス</target>
        </trans-unit>
        <trans-unit id="cfe5d3f52e1bab9a63a7df0c0c6f4e1c0567b94a" translate="yes" xml:space="preserve">
          <source>A File Transfer Protocol client.</source>
          <target state="translated">ファイル転送プロトコルクライアント。</target>
        </trans-unit>
        <trans-unit id="8d70bbe040a2f8306532e86a99c772dde2300f04" translate="yes" xml:space="preserve">
          <source>A GUI tool for observing an Erlang system.</source>
          <target state="translated">Erlangシステムを観察するためのGUIツール。</target>
        </trans-unit>
        <trans-unit id="412558260339ef39924a36cedb4746b92b39860e" translate="yes" xml:space="preserve">
          <source>A MIB compiler, which understands SMIv1 (RFC1155, 1212, and 1215) and SMIv2 (RFC1902, 1903, and 1904).</source>
          <target state="translated">SMIv1 (RFC1155,1212,1215)と SMIv2 (RFC1902,1903,1904)を理解する MIB コンパイラ。</target>
        </trans-unit>
        <trans-unit id="465e342200f443fe19bf77c7c55e103eb0525cf5" translate="yes" xml:space="preserve">
          <source>A Make Utility for Erlang</source>
          <target state="translated">ErlangのためのMakeユーティリティ</target>
        </trans-unit>
        <trans-unit id="4dfa6d3d81a250e09767148c068c430d43e6542a" translate="yes" xml:space="preserve">
          <source>A Megaco Timer (see explanation above), defaults to #megaco_incr_timer{}.</source>
          <target state="translated">Megaco Timer(上の説明参照)、デフォルトは#megaco_incr_timer{}です。</target>
        </trans-unit>
        <trans-unit id="b68589e1526f4c0bee999a382123018413ba14b2" translate="yes" xml:space="preserve">
          <source>A Megaco Timer (see explanation above), defaults to 30000.</source>
          <target state="translated">メガコタイマー(上の説明参照)、デフォルトは30000です。</target>
        </trans-unit>
        <trans-unit id="cbd6f555dff6fd8042f699c901ba913734ef4278" translate="yes" xml:space="preserve">
          <source>A Megaco Timer (see explanation above), defaults to &lt;code&gt;#megaco_incr_timer{}&lt;/code&gt;.</source>
          <target state="translated">Megacoタイマー（上記の説明を参照）、デフォルトは &lt;code&gt;#megaco_incr_timer{}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2dad93e1d5d1ceeacd635b8d583372b48511bbd3" translate="yes" xml:space="preserve">
          <source>A Megaco Timer (see explanation above), defaults to &lt;code&gt;10000&lt;/code&gt;.</source>
          <target state="translated">Megacoタイマー（上記の説明を参照）のデフォルトは &lt;code&gt;10000&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c141bdf1ede3294bead601d72060262ea844d853" translate="yes" xml:space="preserve">
          <source>A Megaco Timer (see explanation above), defaults to &lt;code&gt;60 seconds&lt;/code&gt;.</source>
          <target state="translated">Megacoタイマー（上記の説明を参照）のデフォルトは &lt;code&gt;60 seconds&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6b0881b9c745a291d82b3b71d65651beef69c53b" translate="yes" xml:space="preserve">
          <source>A Memory Supervisor Process</source>
          <target state="translated">メモリスーパーバイザプロセス</target>
        </trans-unit>
        <trans-unit id="ae5893b089e2986872b8d9a34ac398cb97910587" translate="yes" xml:space="preserve">
          <source>A NIF does not have to be exported, it can be local to the module. However, unused local stub functions will be optimized away by the compiler, causing loading of the NIF library to fail.</source>
          <target state="translated">NIF はエクスポートする必要はなく、モジュールのローカルに置くことができます。しかし、使用されていないローカルのスタブ関数はコンパイラによって最適化されてしまい、NIF ライブラリのロードに失敗する原因となります。</target>
        </trans-unit>
        <trans-unit id="ae9dbde8e133cef08c1e749be3a70e95b4ade2c3" translate="yes" xml:space="preserve">
          <source>A NIF is a function that is implemented in C instead of Erlang. NIFs appear as any other functions to the callers. They belong to a module and are called like any other Erlang functions. The NIFs of a module are compiled and linked into a dynamic loadable, shared library (SO in UNIX, DLL in Windows). The NIF library must be loaded in runtime by the Erlang code of the module.</source>
          <target state="translated">NIFはErlangの代わりにC言語で実装された関数です。NIFは呼び出し元には他の関数と同じように見えます。NIFはモジュールに属していて、他のErlang関数と同じように呼ばれます。モジュールのNIFはコンパイルされ、動的にロード可能な共有ライブラリ(UNIXではSO、WindowsではDLL)にリンクされています。NIFライブラリはモジュールのErlangコードによってランタイムにロードされなければなりません。</target>
        </trans-unit>
        <trans-unit id="ed6dde15b9ae13651ccad0b7a17020d015605d0b" translate="yes" xml:space="preserve">
          <source>A NIF is thread-safe without any explicit synchronization as long as it acts as a pure function and only reads the supplied arguments. When you write to a shared state either through static variables or &lt;code&gt;&lt;a href=&quot;#enif_priv_data&quot;&gt; enif_priv_data&lt;/a&gt;&lt;/code&gt;, you need to supply your own explicit synchronization. This includes terms in process independent environments that are shared between threads. Resource objects also require synchronization if you treat them as mutable.</source>
          <target state="translated">NIFは、純粋関数として機能し、指定された引数のみを読み取る限り、明示的な同期なしでスレッドセーフです。静的変数または &lt;code&gt;&lt;a href=&quot;#enif_priv_data&quot;&gt; enif_priv_data&lt;/a&gt;&lt;/code&gt; を介して共有状態に書き込む場合は、独自の明示的な同期を提供する必要があります。これには、スレッド間で共有されるプロセスに依存しない環境の用語が含まれます。リソースオブジェクトを変更可能として扱う場合も、同期が必要です。</target>
        </trans-unit>
        <trans-unit id="84d9be08ac04a1b8855fd49f7405173d0e59dc63" translate="yes" xml:space="preserve">
          <source>A NIF is thread-safe without any explicit synchronization as long as it acts as a pure function and only reads the supplied arguments. When you write to a shared state either through static variables or &lt;code&gt;&lt;a href=&quot;#enif_priv_data&quot;&gt;enif_priv_data&lt;/a&gt;&lt;/code&gt;, you need to supply your own explicit synchronization. This includes terms in process-independent environments that are shared between threads. Resource objects also require synchronization if you treat them as mutable.</source>
          <target state="translated">NIFは、純粋な関数として機能し、指定された引数のみを読み取る限り、明示的な同期がなくてもスレッドセーフです。静的変数または &lt;code&gt;&lt;a href=&quot;#enif_priv_data&quot;&gt;enif_priv_data&lt;/a&gt;&lt;/code&gt; を介して共有状態に書き込む場合は、独自の明示的な同期を提供する必要があります。これには、スレッド間で共有されるプロセスに依存しない環境での用語が含まれます。リソースオブジェクトを可変として扱う場合も、同期が必要です。</target>
        </trans-unit>
        <trans-unit id="747a24b3d9c89bc5b5759344dd6bf2a2c061e801" translate="yes" xml:space="preserve">
          <source>A NIF library contains native implementation of some functions of an Erlang module. The native implemented functions (NIFs) are called like any other functions without any difference to the caller. A NIF library is built as a dynamically linked library file and loaded in runtime by calling &lt;code&gt;&lt;a href=&quot;erlang#load_nif-2&quot;&gt; erlang:load_nif/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">NIFライブラリには、Erlangモジュールのいくつかの関数のネイティブ実装が含まれています。ネイティブ実装関数（NIF）は、呼び出し元に違いがなく、他の関数と同じように呼び出されます。NIFライブラリは、動的にリンクされたライブラリファイルとして構築され、 &lt;code&gt;&lt;a href=&quot;erlang#load_nif-2&quot;&gt; erlang:load_nif/2&lt;/a&gt;&lt;/code&gt; を呼び出すことによって実行時にロードされます。</target>
        </trans-unit>
        <trans-unit id="8a60c02f399b39b76528cae89a210e7ba95c129a" translate="yes" xml:space="preserve">
          <source>A NIF library contains native implementation of some functions of an Erlang module. The native implemented functions (NIFs) are called like any other functions without any difference to the caller. Each NIF must have an implementation in Erlang that is invoked if the function is called before the NIF library is successfully loaded. A typical such stub implementation is to throw an exception. But it can also be used as a fallback implementation if the NIF library is not implemented for some architecture.</source>
          <target state="translated">NIFライブラリはErlangモジュールのいくつかの関数のネイティブ実装を含んでいます。ネイティブに実装された関数(NIF)は他の関数と同じように呼ばれ、呼び出し元には何の違いもありません。それぞれのNIFはErlangで実装されていなければならず、NIFライブラリが正常にロードされる前に関数が呼ばれた場合に呼び出されます。典型的なスタブの実装は例外を投げることです。しかし、アーキテクチャによってはNIFライブラリが実装されていない場合、フォールバック実装として使うこともできます。</target>
        </trans-unit>
        <trans-unit id="16083aaa52c81a0267780218bf0e70427a08f38c" translate="yes" xml:space="preserve">
          <source>A NIF library is already loaded for this module instance. The previously deprecated &lt;code&gt;reload&lt;/code&gt; feature was removed in OTP 20.</source>
          <target state="translated">このモジュールインスタンスには、NIFライブラリが既に読み込まれています。以前に非推奨になった &lt;code&gt;reload&lt;/code&gt; 機能は、OTP 20で削除されました。</target>
        </trans-unit>
        <trans-unit id="3a1f48477831047343a1f8bf95917f0e713f592c" translate="yes" xml:space="preserve">
          <source>A NIF that cannot be split and cannot execute in a millisecond or less is called a &quot;dirty NIF&quot;, as it performs work that the ordinary schedulers of the Erlang runtime system cannot handle cleanly. Applications that make use of such functions must indicate to the runtime that the functions are dirty so they can be handled specially. This is handled by executing dirty jobs on a separate set of schedulers called dirty schedulers. A dirty NIF executing on a dirty scheduler does not have the same duration restriction as a normal NIF.</source>
          <target state="translated">分割できず、ミリ秒以下で実行できないNIFは &quot;ダーティNIF &quot;と呼ばれ、Erlangランタイムシステムの通常のスケジューラではきれいに処理できない仕事をしています。このような関数を使うアプリケーションはランタイムにその関数がダーティであることを示さなければならないので、特別な処理ができるようになります。これはダーティスケジューラと呼ばれる別のスケジューラでダーティなジョブを実行することで処理されます。ダーティスケジューラ上で実行されるダーティNIFは、通常のNIFのような持続時間制限を持たない。</target>
        </trans-unit>
        <trans-unit id="ab4cb7916f8916f086f78b97c9625e2413ca6c56" translate="yes" xml:space="preserve">
          <source>A Net If process must implement the SNMP manager &lt;code&gt;&lt;a href=&quot;snmpm_network_interface&quot;&gt;network interface behaviour&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Net Ifプロセスは、SNMPマネージャーの &lt;code&gt;&lt;a href=&quot;snmpm_network_interface&quot;&gt;network interface behaviour&lt;/a&gt;&lt;/code&gt; 実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="af197bff7b3c7ea0c0e795a6e3fce23b4ca646b1" translate="yes" xml:space="preserve">
          <source>A Net if process must implement the SNMP agent &lt;code&gt;&lt;a href=&quot;snmpa_network_interface&quot;&gt;network interface behaviour&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Net ifプロセスは、SNMPエージェントの &lt;code&gt;&lt;a href=&quot;snmpa_network_interface&quot;&gt;network interface behaviour&lt;/a&gt;&lt;/code&gt; 実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="4682baf7bf989ecc09c30378539a80083913f72a" translate="yes" xml:space="preserve">
          <source>A Net if process must implement the SNMP manager &lt;code&gt;&lt;a href=&quot;snmpm_network_interface&quot;&gt;network interface behaviour&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Net ifプロセスは、SNMPマネージャーの &lt;code&gt;&lt;a href=&quot;snmpm_network_interface&quot;&gt;network interface behaviour&lt;/a&gt;&lt;/code&gt; 実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="b5ce5e0afdd417aa616eb37eb871e57129530691" translate="yes" xml:space="preserve">
          <source>A POSIX error value if something else goes wrong, see &lt;code&gt;&lt;a href=&quot;inet&quot;&gt;inet(3)&lt;/a&gt;&lt;/code&gt; for possible error values</source>
          <target state="translated">他の問題が発生した場合のPOSIXエラー値。 &lt;code&gt;&lt;a href=&quot;inet&quot;&gt;inet(3)&lt;/a&gt;&lt;/code&gt; 考えられるエラー値 inet（3）を</target>
        </trans-unit>
        <trans-unit id="66a3f3d7962a2ff38d3eb0fc27400ec7705ecedf" translate="yes" xml:space="preserve">
          <source>A POSIX thread like API for multi-threading is provided. The Erlang driver thread API only provides a subset of the functionality provided by the POSIX thread API. The subset provided is more or less the basic functionality needed for multi-threaded programming:</source>
          <target state="translated">マルチスレッド用のPOSIXスレッドのようなAPIが提供されています。ErlangドライバのスレッドAPIはPOSIXスレッドAPIが提供する機能のサブセットを提供しています。このサブセットはマルチスレッドプログラミングに必要な基本的な機能です。</target>
        </trans-unit>
        <trans-unit id="0bd457a7ac87a208b16a149cb348e99367ad82ba" translate="yes" xml:space="preserve">
          <source>A PPID can be configured with a a gen_sctp sctp_default_send_param option.</source>
          <target state="translated">PPIDはgen_sctp sctp_default_send_paramオプションで設定できます。</target>
        </trans-unit>
        <trans-unit id="6c511d3ccb60e7dc830ac553725bdc5da3a2e9fa" translate="yes" xml:space="preserve">
          <source>A Route-Record AVP is appended by diameter when the return value of a request callback asks that a request be forwarded. Appending the AVP in other cases is the responsibility of the user.</source>
          <target state="translated">Route-Record AVP は、リクエストコールバックの戻り値がリクエストの転送を要求するときに、直径で追加されます。他のケースでの AVP の追加はユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="094734567e030c7a3c51ff51fd0000a24bb2ce28" translate="yes" xml:space="preserve">
          <source>A SAX parser for XML that sends the events through a callback interface. SAX is the &lt;strong&gt;Simple API for XML&lt;/strong&gt;, originally a Java-only API. SAX was the first widely adopted API for XML in Java, and is a &lt;strong&gt;de facto&lt;/strong&gt; standard where there are versions for several programming language environments other than Java.</source>
          <target state="translated">コールバックインターフェイスを介してイベントを送信するXMLのSAXパーサー。SAXは&lt;strong&gt;Simple API for XMLで&lt;/strong&gt;、元々はJavaのみのAPIでした。SAXは、JavaでXMLに最初に広く採用されたAPIであり、&lt;strong&gt;事実上のものです&lt;/strong&gt;であり、Java以外のいくつかのプログラミング言語環境のバージョンが存在する標準です。</target>
        </trans-unit>
        <trans-unit id="248ee08e6a02ab2fc5bc7400b653c53caa52bbda" translate="yes" xml:space="preserve">
          <source>A Set of Release Handling Tools</source>
          <target state="translated">リリース処理ツールのセット</target>
        </trans-unit>
        <trans-unit id="60186d2f270382eb00ad49b3e5e34efc25a7eb30" translate="yes" xml:space="preserve">
          <source>A TAR program that understands the GNU TAR format for long filenames.</source>
          <target state="translated">長いファイル名のGNU TARフォーマットを理解するTARプログラム。</target>
        </trans-unit>
        <trans-unit id="7a5eb9a2cf5198242ce83b7910f56bb7256b5a72" translate="yes" xml:space="preserve">
          <source>A Time Profiling Tool for Erlang</source>
          <target state="translated">Erlangのための時間プロファイリングツール</target>
        </trans-unit>
        <trans-unit id="02d15da22619453c9a967ff17ef23dbd1a99ec4f" translate="yes" xml:space="preserve">
          <source>A Time Profiling Tool using trace to file for minimal runtime performance impact.</source>
          <target state="translated">実行時のパフォーマンスへの影響を最小限に抑えるために、トレースからファイルへのトレースを使用した時間プロファイリングツールです。</target>
        </trans-unit>
        <trans-unit id="9200d6c91754853bbbd2c3a2227d427448480a6c" translate="yes" xml:space="preserve">
          <source>A URI is an identifier consisting of a sequence of characters matching the syntax rule named &lt;code&gt;URI&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A URIは、名前文法規則マッチング文字の配列からなる識別子である &lt;code&gt;URI&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b6a932a694249ceff9de8c32f16fd50b0a78a087" translate="yes" xml:space="preserve">
          <source>A URI is an identifier consisting of a sequence of characters matching the syntax rule named &lt;strong&gt;URI&lt;/strong&gt; in &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">A URIは、名前文法規則マッチング文字の配列からなる識別子である&lt;strong&gt;URI&lt;/strong&gt;で &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="5a75fe7a3bd71dc8bf251f20c269d331921130c5" translate="yes" xml:space="preserve">
          <source>A URI more specifically, is a sequence of characters from a subset of the US ASCII character set. The generic URI syntax consists of a hierarchical sequence of components referred to as the scheme, authority, path, query, and fragment. There is a formal description for each of these components in &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2234.txt&quot;&gt;ABNF&lt;/a&gt;&lt;/code&gt; notation in &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">より具体的には、URIは、USASCII文字セットのサブセットからの文字のシーケンスです。一般的なURI構文は、スキーム、権限、パス、クエリ、およびフラグメントと呼ばれるコンポーネントの階層シーケンスで構成されます。 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc2234.txt&quot;&gt;ABNF&lt;/a&gt;&lt;/code&gt; 表記には、これらの各コンポーネントの正式な説明があります。</target>
        </trans-unit>
        <trans-unit id="e149e0b4c1a1c105b7f889d32cd56c5262fc2226" translate="yes" xml:space="preserve">
          <source>A Unicode extended grapheme cluster</source>
          <target state="translated">Unicode 拡張書記素クラスタ</target>
        </trans-unit>
        <trans-unit id="91c776c2572caac7dae19c58dc677fab9b2bc760" translate="yes" xml:space="preserve">
          <source>A Unix-specific example:</source>
          <target state="translated">Unix 固有の例。</target>
        </trans-unit>
        <trans-unit id="44f895c061c338a2c4f6db51cc29f383c116fdd5" translate="yes" xml:space="preserve">
          <source>A User is an entity identified by a MID, e.g. a MGC or a MG.</source>
          <target state="translated">利用者とは、MID によって識別されるエンティティであり、例えば、MGC または MG である。</target>
        </trans-unit>
        <trans-unit id="32b6de1aa97b29f50e5912a12d7ac4a95b0cfea8" translate="yes" xml:space="preserve">
          <source>A WxWidgets based tool for browsing Erlang crashdumps.</source>
          <target state="translated">WxWidgets ベースの Erlang crashdump をブラウズするツール。</target>
        </trans-unit>
        <trans-unit id="e4bde50404582298e3cf270bb8ccc3daf0ea5444" translate="yes" xml:space="preserve">
          <source>A back reference (see the next section)</source>
          <target state="translated">バックリファレンス(次項参照</target>
        </trans-unit>
        <trans-unit id="53d6a047b6dd3ed0e849f25a2c3fb01b061ee975" translate="yes" xml:space="preserve">
          <source>A back reference matches whatever matched the capturing subpattern in the current subject string, rather than anything matching the subpattern itself (section &lt;code&gt;&lt;a href=&quot;#sect21&quot;&gt;Subpattern as Subroutines&lt;/a&gt;&lt;/code&gt; describes a way of doing that). So, the following pattern matches &quot;sense and sensibility&quot; and &quot;response and responsibility&quot;, but not &quot;sense and responsibility&quot;:</source>
          <target state="translated">後方参照は、サブパターン自体に一致するものではなく、現在のサブジェクト文字列のキャプチャサブパターンに一致するものと一致します（ &lt;code&gt;&lt;a href=&quot;#sect21&quot;&gt;Subpattern as Subroutines&lt;/a&gt;&lt;/code&gt; は、その方法を説明しています）。したがって、次のパターンは「感覚と感性」と「応答と責任」に一致しますが、「感覚と責任」には一致しません。</target>
        </trans-unit>
        <trans-unit id="c7a2ff223aa7f1180c7a5c0c761648542d8226fb" translate="yes" xml:space="preserve">
          <source>A back reference that occurs inside the parentheses to which it refers fails when the subpattern is first used, so, for example, (a\1) never matches. However, such references can be useful inside repeated subpatterns. For example, the following pattern matches any number of &quot;a&quot;s and also &quot;aba&quot;, &quot;ababbaa&quot;, and so on:</source>
          <target state="translated">参照先の括弧内にある後方参照は、サブパターンが最初に使用されたときに失敗するので、例えば、(a\1)は決してマッチしません。しかし、そのような参照は、繰り返されるサブパターンの中で有用であることがあります。例えば、以下のパターンは、任意の数の「a」にマッチし、「aba」や「abababbaa」などにもマッチします。</target>
        </trans-unit>
        <trans-unit id="ffc1ebbafbdaba3dd7477ee36631ba1276292a19" translate="yes" xml:space="preserve">
          <source>A back reference to a numbered subpattern uses the most recent value that is set for that number by any subpattern. The following pattern matches &quot;abcabc&quot; or &quot;defdef&quot;:</source>
          <target state="translated">番号付きサブパターンへの後方参照は、任意のサブパターンによってその番号に設定された最新の値を使用する。以下のパターンは、&quot;abcabc &quot;または &quot;defdef &quot;にマッチします。</target>
        </trans-unit>
        <trans-unit id="0d402fcdbef693771940455e9ef73fd921c03b39" translate="yes" xml:space="preserve">
          <source>A base for building trace tools for distributed systems.</source>
          <target state="translated">分散システムのためのトレースツールを構築するためのベース。</target>
        </trans-unit>
        <trans-unit id="c418f2ac7b109d9e422eb741c2ec0065dcef710c" translate="yes" xml:space="preserve">
          <source>A basic concept in Erlang/OTP is the &lt;strong&gt;supervision tree&lt;/strong&gt;. This is a process structuring model based on the idea of &lt;strong&gt;workers&lt;/strong&gt; and &lt;strong&gt;supervisors&lt;/strong&gt;:</source>
          <target state="translated">Erlang / OTPの基本的な概念は、&lt;strong&gt;監視ツリー&lt;/strong&gt;です。これは、&lt;strong&gt;労働者&lt;/strong&gt;と&lt;strong&gt;監督&lt;/strong&gt;&lt;strong&gt;者&lt;/strong&gt;の考え方に基づくプロセス構造化モデルです。</target>
        </trans-unit>
        <trans-unit id="a7814d9e97780d5bb1e4072e8590cdbb3e3d0929" translate="yes" xml:space="preserve">
          <source>A better solution for a real module is to take advantage of the new directive &lt;code&gt;on_load&lt;/code&gt; (see section &lt;code&gt;Running a Function When a Module is Loaded&lt;/code&gt; in the Erlang Reference Manual) to load the NIF library automatically when the module is loaded.</source>
          <target state="translated">実際のモジュールのより良い解決策は、新しいディレクティブ &lt;code&gt;on_load&lt;/code&gt; を利用することです（セクション &lt;code&gt;Running a Function When a Module is Loaded&lt;/code&gt; 参照）。 Erlangリファレンスマニュアル」の「モジュールが読み込まれたときに」を参照）を利用して、モジュールが読み込まれたときにNIFライブラリを自動的に読み込むことです。</target>
        </trans-unit>
        <trans-unit id="415e0f889e1439e4772c9c6a317c5d9eae0185a6" translate="yes" xml:space="preserve">
          <source>A binary always contains a complete number of bytes.</source>
          <target state="translated">バイナリには常に完全なバイト数が含まれています。</target>
        </trans-unit>
        <trans-unit id="b3e748c424b491ef4e2b424caaa0193f66560cd4" translate="yes" xml:space="preserve">
          <source>A binary data object, structured according to the Erlang external term format.</source>
          <target state="translated">バイナリデータオブジェクトで、Erlangの外部用語フォーマットに従って構造化されています。</target>
        </trans-unit>
        <trans-unit id="298c689646b297768a8fb73aa045eb2812167789" translate="yes" xml:space="preserve">
          <source>A binding structure.</source>
          <target state="translated">結合構造。</target>
        </trans-unit>
        <trans-unit id="677005ee1c530ba6de9106ab412de1952afd8d58" translate="yes" xml:space="preserve">
          <source>A bit flag field of bit flags bitwise or:ed together. Currently the following flags are defined:</source>
          <target state="translated">ビットフラグのビットフラグフィールド。現在、以下のフラグが定義されています。</target>
        </trans-unit>
        <trans-unit id="e77e3889fe8c014ea8612f275ae6ccbea02093b9" translate="yes" xml:space="preserve">
          <source>A bit string comprehension returns a bit string, which is created by concatenating the results of evaluating &lt;code&gt;BitString&lt;/code&gt; for each combination of bit string generator elements, for which all filters are true.</source>
          <target state="translated">ビット文字列内包は、ビット文字列を返します。ビット文字列は、すべてのフィルターが真で​​あるビット文字列ジェネレーター要素の各組み合わせに対して &lt;code&gt;BitString&lt;/code&gt; を評価した結果を連結することによって作成されます。</target>
        </trans-unit>
        <trans-unit id="c30114629b8426a6ada7d40a7f0ce097c95413d5" translate="yes" xml:space="preserve">
          <source>A bit string is used to store an area of untyped memory.</source>
          <target state="translated">ビット文字列は、タイプされていないメモリの領域を格納するために使用されます。</target>
        </trans-unit>
        <trans-unit id="0f27496a8e04899d9751b9b7d9932abde083ff06" translate="yes" xml:space="preserve">
          <source>A bitstring or binary</source>
          <target state="translated">ビット文字列またはバイナリ</target>
        </trans-unit>
        <trans-unit id="36bc1be2e2bdda5bcfbb5daa59af1b7decd47b95" translate="yes" xml:space="preserve">
          <source>A bitstring. By default, a &lt;code&gt;BIT STRING&lt;/code&gt; with no symbolic names is decoded to an Erlang bitstring.</source>
          <target state="translated">ビットストリング。デフォルトでは、 &lt;code&gt;BIT STRING&lt;/code&gt; シンボリック名のないはErlangビット文字列にデコードされます。</target>
        </trans-unit>
        <trans-unit id="c215287a4d613c8262ada2c7133754a941970ff4" translate="yes" xml:space="preserve">
          <source>A body B is a non-empty sequence of expressions &lt;code&gt;E_1, ..., E_k&lt;/code&gt;, and Rep(B) = &lt;code&gt;[Rep(E_1), ..., Rep(E_k)]&lt;/code&gt;.</source>
          <target state="translated">ボディBは式 &lt;code&gt;E_1, ..., E_k&lt;/code&gt; 、およびRep（B）= &lt;code&gt;[Rep(E_1), ..., Rep(E_k)]&lt;/code&gt; 空でないシーケンスです。</target>
        </trans-unit>
        <trans-unit id="d107afa764d6c26d14d3133c85da34202dfafd4f" translate="yes" xml:space="preserve">
          <source>A boot script (see &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt;) can be used that automatically starts the application.</source>
          <target state="translated">ブートスクリプト（ &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt; 参照）アプリケーションを自動的に起動）を使用できます。</target>
        </trans-unit>
        <trans-unit id="919bef16600e113be86a5b24871b84665ab0d813" translate="yes" xml:space="preserve">
          <source>A boot script can be written manually. However, it is recommended to create a boot script by generating it from a release resource file &lt;code&gt;Name.rel&lt;/code&gt;, using the function &lt;code&gt;systools:make_script/1,2&lt;/code&gt;. This requires that the source code is structured as applications according to the OTP design principles. (The program does not have to be started in terms of OTP applications, but can be plain Erlang).</source>
          <target state="translated">ブートスクリプトは手動で作成できます。ただし、関数 &lt;code&gt;systools:make_script/1,2&lt;/code&gt; を使用して、リリースリソースファイル &lt;code&gt;Name.rel&lt;/code&gt; から生成してブートスクリプトを作成することをお勧めします。これには、ソースコードがOTP設計原則に従ってアプリケーションとして構成されている必要があります。（プログラムはOTPアプリケーションの観点から開始する必要はありませんが、単純なErlangにすることができます）。</target>
        </trans-unit>
        <trans-unit id="c5fdc6fd4567d3a558e76cbc7f894eaa5a1c1eee" translate="yes" xml:space="preserve">
          <source>A boot script file has the extension &lt;code&gt;.script&lt;/code&gt;. The runtime system uses a binary version of the script. This &lt;strong&gt;binary boot script&lt;/strong&gt; file has the extension &lt;code&gt;.boot&lt;/code&gt;.</source>
          <target state="translated">ブートスクリプトファイルの拡張子は &lt;code&gt;.script&lt;/code&gt; です。ランタイムシステムは、スクリプトのバイナリバージョンを使用します。この&lt;strong&gt;バイナリブートスクリプト&lt;/strong&gt;ファイルの拡張子は &lt;code&gt;.boot&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a38a18422668a20d746ea102449e8109a669766e" translate="yes" xml:space="preserve">
          <source>A boot script generated using &lt;code&gt;&lt;a href=&quot;#make_script-1&quot;&gt;make_script&lt;/a&gt;&lt;/code&gt; is already transformed to the binary form.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#make_script-1&quot;&gt;make_script&lt;/a&gt;&lt;/code&gt; を使用して生成されたブートスクリプトは、すでにバイナリ形式に変換されています。</target>
        </trans-unit>
        <trans-unit id="4418a28f4bc85f1e896a145b5a8fb062a5cafe33" translate="yes" xml:space="preserve">
          <source>A boot script, &lt;code&gt;Name.boot&lt;/code&gt;</source>
          <target state="translated">ブートスクリプト &lt;code&gt;Name.boot&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="506ee8bd04d892c57686f10406bfc1fa492da78c" translate="yes" xml:space="preserve">
          <source>A breakpoint can be either &lt;strong&gt;active&lt;/strong&gt; or &lt;strong&gt;inactive&lt;/strong&gt;. Inactive breakpoints are ignored.</source>
          <target state="translated">ブレークポイントは&lt;strong&gt;アクティブで&lt;/strong&gt;も&lt;strong&gt;非アクティブ&lt;/strong&gt;でもかまい&lt;strong&gt;ません&lt;/strong&gt;。非アクティブなブレークポイントは無視されます。</target>
        </trans-unit>
        <trans-unit id="a1dbb3701c56d51053c806657654df88416bde25" translate="yes" xml:space="preserve">
          <source>A breakpoint has the following:</source>
          <target state="translated">ブレークポイントには次のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="f64f15640358c275e2397b778cc1de26c7a69372" translate="yes" xml:space="preserve">
          <source>A brief example in C of how to set the console control handler:</source>
          <target state="translated">コンソールコントロールハンドラの設定方法をC言語で簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="f6e88d46ec95e4e6ad69aee75cf44a13d46cf46a" translate="yes" xml:space="preserve">
          <source>A buffer that holds a message being decoded can also have trailing bytes. If those trailing bytes are important, they can be returned along with the decoded value by compiling the ASN.1 specification with option &lt;code&gt;+undec_rest&lt;/code&gt;. The return value from the decoder is &lt;code&gt;{ok,Value,Rest}&lt;/code&gt; where &lt;code&gt;Rest&lt;/code&gt; is a binary containing the trailing bytes.</source>
          <target state="translated">デコードされるメッセージを保持するバッファには、後続のバイトが含まれる場合もあります。これらの後続バイトが重要な場合は、 &lt;code&gt;+undec_rest&lt;/code&gt; オプションを指定してASN.1仕様をコンパイルすることにより、デコードされた値とともにそれらを返すことができます。デコーダーからの戻り値は &lt;code&gt;{ok,Value,Rest}&lt;/code&gt; で、 &lt;code&gt;Rest&lt;/code&gt; は後続のバイトを含むバイナリです。</target>
        </trans-unit>
        <trans-unit id="233c3de16098dc52e49751db996b0afab4a44df9" translate="yes" xml:space="preserve">
          <source>A buffer that holds a message, being decoded it can also have some following bytes. Those following bytes can now be returned together with the decoded value. If an ASN.1 specification is compiled with this option, a tuple &lt;code&gt;{ok, Value, Rest}&lt;/code&gt; is returned. &lt;code&gt;Rest&lt;/code&gt; can be a list or a binary. Earlier versions of the compiler ignored those following bytes.</source>
          <target state="translated">メッセージを保持するバッファ。デコードされると、次のバイトも含まれる場合があります。次のバイトは、デコードされた値とともに返されるようになりました。このオプションを使用してASN.1仕様をコンパイルすると、タプル &lt;code&gt;{ok, Value, Rest}&lt;/code&gt; が返されます。 &lt;code&gt;Rest&lt;/code&gt; はリストまたはバイナリです。以前のバージョンのコンパイラは、後続のバイトを無視していました。</target>
        </trans-unit>
        <trans-unit id="1919a9845de02d3849d0b2e74c7851b7ee8c5506" translate="yes" xml:space="preserve">
          <source>A built-in function is called.</source>
          <target state="translated">組み込み関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3de5cae16caec60af1e837ac76d07fc1a58c2046" translate="yes" xml:space="preserve">
          <source>A cache line is larger than a pointer, typically 8 or 16 times larger, so using one cache line for each slot only containing one pointer would be a waste of space. Each cache line will be able to hold a fixed amount of slots. The first slot of the table will be the first slot of the first cache line, the second slot of the table will be the first slot of the second cache line until we reach the end of the array. The next slot after that will be the second slot of the first cache line, etc, moving forward one cache line internal slot each time we wrap. This way we will be able to fit the same amount of pointers into an array of the same size while always keeping adjacent slots in different cache lines.</source>
          <target state="translated">キャッシュラインはポインタよりも大きく、典型的には8〜16倍の大きさであるため、1つのポインタだけを含むスロットごとに1つのキャッシュラインを使用するのはスペースの無駄になります。各キャッシュラインは、一定量のスロットを保持することができるようになります。テーブルの最初のスロットは最初のキャッシュラインの最初のスロットになり、テーブルの2番目のスロットは配列の最後まで2番目のキャッシュラインの最初のスロットになります。それ以降の次のスロットは、最初のキャッシュラインの2番目のスロットなどとなり、ラップするたびにキャッシュラインの内部スロットを1つずつ進めていきます。このようにすることで、常に異なるキャッシュラインに隣接するスロットを保持しながら、同じサイズの配列に同じ量のポインタを収めることができるようになります。</target>
        </trans-unit>
        <trans-unit id="99e307ba4f985ee1b328ac24d026a83d768b7e31" translate="yes" xml:space="preserve">
          <source>A call has been made to another transfer function during chunk sending, that is, before a call to &lt;code&gt;send_chunk_end/1&lt;/code&gt;.</source>
          <target state="translated">チャンクの送信中、つまり &lt;code&gt;send_chunk_end/1&lt;/code&gt; の呼び出し前に、別の転送関数が呼び出されました。</target>
        </trans-unit>
        <trans-unit id="c058e649153aa49de98647d3ad23a2d22b4f3cbb" translate="yes" xml:space="preserve">
          <source>A call is made to &lt;code&gt;send_chunk/2&lt;/code&gt; or &lt;code&gt;send_chunk_end/1&lt;/code&gt; before a call to &lt;code&gt;send_chunk_start/2&lt;/code&gt;.</source>
          <target state="translated">コールがになる &lt;code&gt;send_chunk/2&lt;/code&gt; 又は &lt;code&gt;send_chunk_end/1&lt;/code&gt; への呼び出しの前に &lt;code&gt;send_chunk_start/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74dd8fdb8624f61745c3d9662e7a1e10a90a4feb" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;ei_set_compat_rel(release_number)&lt;/code&gt; sets the &lt;code&gt;ei&lt;/code&gt; library in compatibility mode of release &lt;code&gt;release_number&lt;/code&gt;. Valid range of &lt;code&gt;release_number&lt;/code&gt; is &lt;code&gt;[7, current release]&lt;/code&gt;. This makes it possible to communicate with Erlang/OTP components from earlier releases.</source>
          <target state="translated">&lt;code&gt;ei_set_compat_rel(release_number)&lt;/code&gt; を呼び出すと、 &lt;code&gt;ei&lt;/code&gt; ライブラリがリリース &lt;code&gt;release_number&lt;/code&gt; の互換モードに設定されます。 &lt;code&gt;release_number&lt;/code&gt; の有効範囲は &lt;code&gt;[7, current release]&lt;/code&gt; です。これにより、以前のリリースのErlang / OTPコンポーネントとの通信が可能になります。</target>
        </trans-unit>
        <trans-unit id="e817aa48e70b9f9cfae211dd9da7a5a9ccf5b654" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;erl_set_compat_rel(release_number)&lt;/code&gt; sets the &lt;code&gt;Erl_Interface&lt;/code&gt; library in compatibility mode of release &lt;code&gt;release_number&lt;/code&gt;. Valid range of &lt;code&gt;release_number&lt;/code&gt; is [7, current release]. This makes it possible to communicate with Erlang/OTP components from earlier releases.</source>
          <target state="translated">&lt;code&gt;erl_set_compat_rel(release_number)&lt;/code&gt; を呼び出すと、 &lt;code&gt;Erl_Interface&lt;/code&gt; ライブラリがリリース &lt;code&gt;release_number&lt;/code&gt; の互換モードに設定されます。 &lt;code&gt;release_number&lt;/code&gt; の有効な範囲は[7、current release]です。これにより、以前のリリースのErlang / OTPコンポーネントとの通信が可能になります。</target>
        </trans-unit>
        <trans-unit id="0712fa3986f50d28ad07c76a65c1ecbb80736c35" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;get_system_memory_data/0&lt;/code&gt; is more costly than a call to &lt;code&gt;get_memory_data/0&lt;/code&gt; as data is collected synchronously when this function is called.</source>
          <target state="translated">&lt;code&gt;get_system_memory_data/0&lt;/code&gt; への呼び出しは、この関数が呼び出されたときにデータが同期的に収集されるため、 &lt;code&gt;get_memory_data/0&lt;/code&gt; への呼び出しよりもコストがかかります。</target>
        </trans-unit>
        <trans-unit id="f14596ed552d15fac5c9509373594be37cfb2e60" translate="yes" xml:space="preserve">
          <source>A call to &lt;code&gt;ssh:connect/3&lt;/code&gt; removes all algorithms but one of each type:</source>
          <target state="translated">&lt;code&gt;ssh:connect/3&lt;/code&gt; を呼び出すと、各タイプの1つを除くすべてのアルゴリズムが削除されます。</target>
        </trans-unit>
        <trans-unit id="00be531b15ffde80334787b57379ef9efba65517" translate="yes" xml:space="preserve">
          <source>A call to that daemon will return the text &quot;Prohibited.&quot; on stderr (depending on the client and OS), and the exit status 255:</source>
          <target state="translated">そのデーモンへの呼び出しは、標準エラー(クライアントとOSによって異なる)に &quot;Prohibited.&quot;というテキストを返し、終了ステータスは255です。</target>
        </trans-unit>
        <trans-unit id="2f677dc037cd69c670e9e88e5bc616a216192d94" translate="yes" xml:space="preserve">
          <source>A call to the call-back function &lt;code&gt;F&lt;/code&gt; will be</source>
          <target state="translated">コールバック関数 &lt;code&gt;F&lt;/code&gt; の呼び出しは</target>
        </trans-unit>
        <trans-unit id="11754d33b00f950f0b7ce28be005702a9e29dab1" translate="yes" xml:space="preserve">
          <source>A call to the function &lt;code&gt;my_call(Node, Module, Function, Args, Timeout)&lt;/code&gt; below is equivalent to the call &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;erpc:call(Node, Module, Function, Args, Timeout)&lt;/a&gt;&lt;/code&gt; if one disregards performance. &lt;code&gt;erpc:call()&lt;/code&gt; can utilize a message queue optimization which removes the need to scan the whole message queue which the combination &lt;code&gt;erpc:send_request()/erpc:receive_response()&lt;/code&gt; cannot.</source>
          <target state="translated">以下の関数 &lt;code&gt;my_call(Node, Module, Function, Args, Timeout)&lt;/code&gt; の呼び出しは、パフォーマンスを無視した場合の &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;erpc:call(Node, Module, Function, Args, Timeout)&lt;/a&gt;&lt;/code&gt; 、Timeout）の呼び出しと同等です。 &lt;code&gt;erpc:call()&lt;/code&gt; は、メッセージキューの最適化を利用できます。これにより、 &lt;code&gt;erpc:send_request()/erpc:receive_response()&lt;/code&gt; の組み合わせでは不可能なメッセージキュー全体をスキャンする必要がなくなります。</target>
        </trans-unit>
        <trans-unit id="64cfccc0b7ce97122769d167098947b39055c31f" translate="yes" xml:space="preserve">
          <source>A call to validate/2 or validate/3 must provide a well formed parsed XML element &lt;code&gt;#xmlElement{}&lt;/code&gt; and a State, &lt;code&gt;global_state()&lt;/code&gt;, which holds necessary information from an already processed schema. Thus validate enables reuse of the schema information and therefore if one shall validate several times towards the same schema it reduces time consumption.</source>
          <target state="translated">validate / 2またはvalidate / 3の呼び出しは、整形式の解析済みXML要素 &lt;code&gt;#xmlElement{}&lt;/code&gt; と、すでに処理されたスキーマからの必要な情報を保持する状態 &lt;code&gt;global_state()&lt;/code&gt; を提供する必要があります。したがって、検証によりスキーマ情報の再利用が可能になるため、同じスキーマに対して数回検証する必要がある場合は、時間の消費が削減されます。</target>
        </trans-unit>
        <trans-unit id="4d8d381879044ee596ec7ee05db7b89483e7064a" translate="yes" xml:space="preserve">
          <source>A call-back function for user-controlled formatting. See &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ユーザー制御のフォーマット用のコールバック関数。 &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="df69379f9325d6a9fdffa360b63f0ee0eab09db5" translate="yes" xml:space="preserve">
          <source>A callback function that is called when the scanner has found an unquoted atom. If the function returns &lt;code&gt;true&lt;/code&gt;, the unquoted atom itself becomes the category of the token. If the function returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;atom&lt;/code&gt; becomes the category of the unquoted atom.</source>
          <target state="translated">スキャナーが引用符で囲まれていないアトムを見つけたときに呼び出されるコールバック関数。関数が &lt;code&gt;true&lt;/code&gt; を返す場合、引用符で囲まれていないアトム自体がトークンのカテゴリになります。関数が &lt;code&gt;false&lt;/code&gt; を返す場合、 &lt;code&gt;atom&lt;/code&gt; は引用符で囲まれていないアトムのカテゴリになります。</target>
        </trans-unit>
        <trans-unit id="d91fce55e4034ef8ef725ab8525f555ff39cf2b9" translate="yes" xml:space="preserve">
          <source>A callback interface on top of Common Test.</source>
          <target state="translated">Common Test の上にあるコールバックインターフェースです。</target>
        </trans-unit>
        <trans-unit id="5e9caf8f98e50d5cd26b8f05e66b990f8b3c6d79" translate="yes" xml:space="preserve">
          <source>A callback module can inherit definitions from other callback modules, through the required function &lt;code&gt;'#xml-interitance#() -&amp;gt; [ModuleName::atom()]&lt;/code&gt;.</source>
          <target state="translated">コールバックモジュールは、必要な関数 &lt;code&gt;'#xml-interitance#() -&amp;gt; [ModuleName::atom()]&lt;/code&gt; て、他のコールバックモジュールから定義を継承できます。</target>
        </trans-unit>
        <trans-unit id="fb141abb3a89c44d4c462fec76a604e27632ab05" translate="yes" xml:space="preserve">
          <source>A callback module is a functional module, and for code extensions simple code replacement is sufficient.</source>
          <target state="translated">コールバックモジュールは機能モジュールであり、コード拡張の場合は単純なコード置換で十分です。</target>
        </trans-unit>
        <trans-unit id="0424938861675599fb002a8bc9f25377d1359f3e" translate="yes" xml:space="preserve">
          <source>A callback module is selected using the options &lt;code&gt;key_cb&lt;/code&gt;.</source>
          <target state="translated">コールバックモジュールは、オプション &lt;code&gt;key_cb&lt;/code&gt; を使用して選択されます。</target>
        </trans-unit>
        <trans-unit id="c15eee4df7f2ad69af1d7ecd2d63331e9c40bc87" translate="yes" xml:space="preserve">
          <source>A callback module to customize the inets HTTP servers behaviour see &lt;code&gt;&lt;a href=&quot;httpd_custom_api&quot;&gt; httpd_custom_api&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">inets HTTPサーバの動作をカスタマイズするためのコールバックモジュールは、参照 &lt;code&gt;&lt;a href=&quot;httpd_custom_api&quot;&gt; httpd_custom_api&lt;/a&gt;&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="b46a19092f99a8ba307ae9376469c5315dc6fe6f" translate="yes" xml:space="preserve">
          <source>A callback module to customize the inets HTTP servers behaviour see &lt;code&gt;&lt;a href=&quot;httpd_custom_api&quot;&gt;httpd_custom_api&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">inets HTTPサーバの動作をカスタマイズするためのコールバックモジュールは、参照 &lt;code&gt;&lt;a href=&quot;httpd_custom_api&quot;&gt;httpd_custom_api&lt;/a&gt;&lt;/code&gt; を</target>
        </trans-unit>
        <trans-unit id="5dc7be0b141d438c4483859c6c7d158a83325e8d" translate="yes" xml:space="preserve">
          <source>A cancelled timetrap is not automatically reactivated after the break, but must be started exlicitly with &lt;code&gt;&lt;a href=&quot;#timetrap-1&quot;&gt;ct:timetrap/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">キャンセルされたタイムトラップは、休憩後に自動的に再アクティブ化されませんが、 &lt;code&gt;&lt;a href=&quot;#timetrap-1&quot;&gt;ct:timetrap/1&lt;/a&gt;&lt;/code&gt; を使用して明示的に開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="80902d7e7f7cef8831c2f630fc53d4cb3659cebe" translate="yes" xml:space="preserve">
          <source>A certificate is similar to a driver's license, or a passport. The holder of the certificate is called the &lt;strong&gt;subject&lt;/strong&gt;. The certificate is signed with the private key of the issuer of the certificate. A chain of trust is built by having the issuer in its turn being certified by another certificate, and so on, until you reach the so called root certificate, which is self-signed, that is, issued by itself.</source>
          <target state="translated">証明書は、運転免許証やパスポートに似ています。証明書の所有者は&lt;strong&gt;サブジェクト&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;ます。証明書は、証明書の発行者の秘密鍵で署名されています。信頼の連鎖は、発行者が別の証明書によって順番に認証されることで構築され、いわゆるルート証明書に到達するまで続きます。</target>
        </trans-unit>
        <trans-unit id="f2fd43ae2e93cd58a77e25d50c236c265a71aa31" translate="yes" xml:space="preserve">
          <source>A chain of calls is represented by a list of &lt;code&gt;constant()&lt;/code&gt;. The list contains the From vertex of every call and the To vertex of the last call.</source>
          <target state="translated">呼び出しのチェーンは、 &lt;code&gt;constant()&lt;/code&gt; のリストで表されます。リストには、すべての呼び出しのFrom頂点と最後の呼び出しのTo頂点が含まれています。</target>
        </trans-unit>
        <trans-unit id="85a537a33d3a97006da5ac79a03e13d4e08816a8" translate="yes" xml:space="preserve">
          <source>A chain of module calls from &lt;code&gt;toolbar&lt;/code&gt; to &lt;code&gt;debugger&lt;/code&gt;, if there is such a chain, otherwise &lt;code&gt;false&lt;/code&gt;. The chain of calls is represented by a list of modules, &lt;code&gt;toolbar&lt;/code&gt; being the first element and &lt;code&gt;debugger&lt;/code&gt;the last element.</source>
          <target state="translated">そのようなチェーンがある場合、 &lt;code&gt;toolbar&lt;/code&gt; から &lt;code&gt;debugger&lt;/code&gt; へのモジュール呼び出しのチェーン、そうでない場合は &lt;code&gt;false&lt;/code&gt; 。呼び出しのチェーンは、モジュールのリストで表されます。 &lt;code&gt;toolbar&lt;/code&gt; は最初の要素で、 &lt;code&gt;debugger&lt;/code&gt; は最後の要素です。</target>
        </trans-unit>
        <trans-unit id="c963de72e2f1d6300c000423f7ebb85156dc2f81" translate="yes" xml:space="preserve">
          <source>A challenge is a 32-bit integer in big-endian order. Below the function &lt;code&gt;gen_challenge()&lt;/code&gt; returns a random 32-bit integer used as a challenge.</source>
          <target state="translated">チャレンジは、ビッグエンディアン順の32ビット整数です。関数 &lt;code&gt;gen_challenge()&lt;/code&gt; の下では、チャレンジとして使用されるランダムな32ビット整数が返されます。</target>
        </trans-unit>
        <trans-unit id="39b14f10c5b55097c8101f85c3f9aa51d49c3b22" translate="yes" xml:space="preserve">
          <source>A change in time offset can be observed at slightly different points in time by different processes.</source>
          <target state="translated">時間オフセットの変化は、異なるプロセスによって、わずかに異なる時点で観察されることがあります。</target>
        </trans-unit>
        <trans-unit id="542fbe84d9ce4598795bc891dcdfd8b000e68f19" translate="yes" xml:space="preserve">
          <source>A character class</source>
          <target state="translated">文字クラス</target>
        </trans-unit>
        <trans-unit id="61e7e6e3a9874a828dada509dcc75ed9b8baa957" translate="yes" xml:space="preserve">
          <source>A character class matches a single character in the subject. In a UTF mode, the character can be more than one data unit long. A matched character must be in the set of characters defined by the class, unless the first character in the class definition is a circumflex, in which case the subject character must not be in the set defined by the class. If a circumflex is required as a member of the class, ensure that it is not the first character, or escape it with a backslash.</source>
          <target state="translated">文字クラスは、サブジェクト内の1つの文字にマッチします。UTF モー ド では、 その文字は複数のデー タ 単位の長 さ にな る こ と がで き ます。マッチした文字は、クラス定義の最初の文字が円周フレックスでない限り、クラスによって定義された文字の集合に含まれている必要があります。クラスのメンバとして円弧が必要な場合は、それが最初の文字でないことを確認するか、バックスラッシュでエスケープしてください。</target>
        </trans-unit>
        <trans-unit id="9c9c4d2679cf888b556f5d6ffced7246bbf40eb2" translate="yes" xml:space="preserve">
          <source>A character preceded by &lt;code&gt;\&lt;/code&gt; loses its special meaning. Note that &lt;code&gt;\&lt;/code&gt; must be written as &lt;code&gt;\\&lt;/code&gt; in a string literal. For example, &quot;\\?*&quot; will match any filename starting with &lt;code&gt;?&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;\&lt;/code&gt; が前に付いている文字は、特別な意味を失います。 &lt;code&gt;\&lt;/code&gt; は文字列リテラルでは &lt;code&gt;\\&lt;/code&gt; として記述する必要があることに注意してください。たとえば、「\\？*」は &lt;code&gt;?&lt;/code&gt; で始まるすべてのファイル名に一致します。。</target>
        </trans-unit>
        <trans-unit id="142cc4bd716c781df84ea694767d7514165b6796" translate="yes" xml:space="preserve">
          <source>A character with property &lt;strong&gt;xx&lt;/strong&gt;</source>
          <target state="translated">プロパティ&lt;strong&gt;xxの&lt;/strong&gt;文字&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf738d3d1defd49ac7c9b392cd81c1e47fcf59d0" translate="yes" xml:space="preserve">
          <source>A character without property &lt;strong&gt;xx&lt;/strong&gt;</source>
          <target state="translated">プロパティ&lt;strong&gt;xxの&lt;/strong&gt;ない文字&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c377286b10e032ac7b156b224cfe02d4aa3b5ac8" translate="yes" xml:space="preserve">
          <source>A checkpoint is a consistent view of the system. A checkpoint can be activated on a set of tables. This checkpoint can then be traversed and presents a view of the system as it existed at the time when the checkpoint was activated, even if the tables are being or have been manipulated.</source>
          <target state="translated">チェックポイントは、システムの一貫したビューです。チェックポイントは、テーブルのセットで有効にすることができます。このチェックポイントは、テーブルが操作されている、または操作されている場合でも、チェックポイントが有効化された時に存在していたシステムのビューをトラバースして表示することができます。</target>
        </trans-unit>
        <trans-unit id="edd44bafd2855e97c83bfe1495556b1997dac899" translate="yes" xml:space="preserve">
          <source>A checkpoint is a transaction consistent state that spans over one or more tables. When a checkpoint is activated, the system remembers the current content of the set of tables. The checkpoint retains a transaction consistent state of the tables, allowing the tables to be read and updated while the checkpoint is active. A checkpoint is typically used to back up tables to external media, but they are also used internally in &lt;code&gt;Mnesia&lt;/code&gt; for other purposes. Each checkpoint is independent and a table can be involved in several checkpoints simultaneously.</source>
          <target state="translated">チェックポイントは、1つ以上のテーブルにまたがるトランザクションの一貫した状態です。チェックポイントがアクティブになると、システムはテーブルセットの現在の内容を記憶します。チェックポイントは、テーブルのトランザクションの一貫性のある状態を保持し、チェックポイントがアクティブな間にテーブルを読み取って更新できるようにします。チェックポイントは通常、テーブルを外部メディアにバックアップするために使用されますが、 &lt;code&gt;Mnesia&lt;/code&gt; では他の目的で内部的にも使用されます。各チェックポイントは独立しており、テーブルは複数のチェックポイントに同時に関与できます。</target>
        </trans-unit>
        <trans-unit id="7af90dbef0975afb7b45bd12517b2d0b310aad09" translate="yes" xml:space="preserve">
          <source>A checkpoint with the name &lt;code&gt;Checkpoint&lt;/code&gt; is activated and the current node is involved in the checkpoint. Checkpoints can be activated explicitly with the function &lt;code&gt;&lt;a href=&quot;mnesia#activate_checkpoint-1&quot;&gt;mnesia:activate_checkpoint/1&lt;/a&gt;&lt;/code&gt; or implicitly at backup, when adding table replicas, at internal transfer of data between nodes, and so on. By default this event is ignored.</source>
          <target state="translated">&lt;code&gt;Checkpoint&lt;/code&gt; という名前のチェックポイントがアクティブになり、現在のノードがチェックポイントに関与します。チェックポイントは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#activate_checkpoint-1&quot;&gt;mnesia:activate_checkpoint/1&lt;/a&gt;&lt;/code&gt; を使用して明示的にアクティブ化したり、バックアップ、テーブルレプリカを追加するとき、ノード間のデータの内部転送などで暗黙的にアクティブ化したりできます。デフォルトでは、このイベントは無視されます。</target>
        </trans-unit>
        <trans-unit id="ce168e38a6f2a63614deb75483a5c4e60dab573e" translate="yes" xml:space="preserve">
          <source>A checkpoint with the name &lt;code&gt;Checkpoint&lt;/code&gt; is deactivated and the current node is involved in the checkpoint. Checkpoints can be deactivated explicitly with the function &lt;code&gt;&lt;a href=&quot;mnesia#deactivate_checkpoint-1&quot;&gt;mnesia:deactivate/1&lt;/a&gt;&lt;/code&gt; or implicitly when the last replica of a table (involved in the checkpoint) becomes unavailable, for example, at node-down. By default this event is ignored.</source>
          <target state="translated">&lt;code&gt;Checkpoint&lt;/code&gt; という名前のチェックポイントは無効になり、現在のノードがチェックポイントに関与します。チェックポイントは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#deactivate_checkpoint-1&quot;&gt;mnesia:deactivate/1&lt;/a&gt;&lt;/code&gt; を使用して明示的に、またはテーブルの最後のレプリカ（チェックポイントに関係する）がノードダウンなどで使用できなくなったときに暗黙的に非アクティブ化できます。デフォルトでは、このイベントは無視されます。</target>
        </trans-unit>
        <trans-unit id="757093a3c3c4440d97791337c35337b6b5b5acf3" translate="yes" xml:space="preserve">
          <source>A child under a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor can be terminated with the following:</source>
          <target state="translated">&lt;code&gt;simple_one_for_one&lt;/code&gt; スーパーバイザの下の子は、次のようにして終了できます。</target>
        </trans-unit>
        <trans-unit id="b0b7cb7b3462b17e43bbfe35864d2ca8d80d92e7" translate="yes" xml:space="preserve">
          <source>A circumflex can conveniently be used with the uppercase character types to specify a more restricted set of characters than the matching lowercase type. For example, class [^\W_] matches any letter or digit, but not underscore, while [\w] includes underscore. A positive character class is to be read as &quot;something OR something OR ...&quot; and a negative class as &quot;NOT something AND NOT something AND NOT ...&quot;.</source>
          <target state="translated">回り込みは、大文字の文字タイプと一緒に使うと、マッチする小文字のタイプよりも制限された文字のセットを指定するのに便利です。例えば、クラス [^\W_]は任意の文字または数字にマッチしますが、アンダースコアにはマッチしませんが、[\w]はアンダースコアを含みます。正の文字クラスは「something OR something OR ...」と読み、負の文字クラスは「NOT something AND NOT something AND NOT ...」と読みます。</target>
        </trans-unit>
        <trans-unit id="0a95d789d7844b6626f4da863b5eea766e7744a0" translate="yes" xml:space="preserve">
          <source>A clause &lt;strong&gt;body&lt;/strong&gt; consists of a sequence of expressions separated by comma (,):</source>
          <target state="translated">句&lt;strong&gt;本体&lt;/strong&gt;は、コンマ（、）で区切られた一連の式で構成されます。</target>
        </trans-unit>
        <trans-unit id="19e13c276c19b62374e61b0b7fc25118ed9d5cf8" translate="yes" xml:space="preserve">
          <source>A clause &lt;strong&gt;head&lt;/strong&gt; consists of the function name, an argument list, and an optional guard sequence beginning with the keyword &lt;code&gt;when&lt;/code&gt;:</source>
          <target state="translated">句の&lt;strong&gt;頭には、&lt;/strong&gt;キーワードで始まる関数名、引数リスト、およびオプションのガードシーケンスで構成されてい &lt;code&gt;when&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="58a6114240a04a860a349454adf52142f50d9abd" translate="yes" xml:space="preserve">
          <source>A clause C is one of the following:</source>
          <target state="translated">C句は、次のいずれかに該当する。</target>
        </trans-unit>
        <trans-unit id="bfbfbe78d9da14d692b59e41cab5975c0cecb51c" translate="yes" xml:space="preserve">
          <source>A clause can only be selected if its guard expression always yields the atom &lt;code&gt;true&lt;/code&gt;, and a clause whose guard expression always yields the atom &lt;code&gt;false&lt;/code&gt; can never be selected. Other guard expressions are considered to have unknown value; cf. &lt;code&gt;eval_guard/1&lt;/code&gt;.</source>
          <target state="translated">句は、そのガード式が常にアトム &lt;code&gt;true&lt;/code&gt; を生成する場合にのみ選択でき、ガード式が常にアトム &lt;code&gt;false&lt;/code&gt; を生成する句は選択できません。他のガード式は未知の値を持つと見なされます。cf. &lt;code&gt;eval_guard/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1f7a0040d46c009ca43441ed2b3e8cecbe10566" translate="yes" xml:space="preserve">
          <source>A client application that is dependent on the SNMP manager will use this function in order to be notified of when the manager has started. There are two situations when this is useful:</source>
          <target state="translated">SNMPマネージャに依存しているクライアントアプリケーションは、マネージャが起動したときに通知を受けるために、この機能を使用します。これが便利な状況は2つあります。</target>
        </trans-unit>
        <trans-unit id="67778fc494c8e3528c95b9dc5db40df2e2b4203e" translate="yes" xml:space="preserve">
          <source>A client could limit the time for the initial tcp connection establishment with the option &lt;code&gt;&lt;a href=&quot;ssh#type-connect_timeout_client_option&quot;&gt;connect_timeout&lt;/a&gt;&lt;/code&gt;. The time is in milliseconds, and the initial value is infinity.</source>
          <target state="translated">クライアントは、オプション &lt;code&gt;&lt;a href=&quot;ssh#type-connect_timeout_client_option&quot;&gt;connect_timeout&lt;/a&gt;&lt;/code&gt; を使用して、最初のtcp接続確立の時間を制限できます。時間はミリ秒単位で、初期値は無限大です。</target>
        </trans-unit>
        <trans-unit id="deda54e98220c94898aa27e04cce1273b55ba2be" translate="yes" xml:space="preserve">
          <source>A client sending a ClientHello MUST support all parameters advertised in it. Otherwise, the server may fail to interoperate by selecting one of those parameters.</source>
          <target state="translated">ClientHelloを送信するクライアントは、その中でアドバタイズされたすべてのパラメータをサポートしな ければなりません[MUST]。そうでない場合、サーバはそれらのパラメータの一つを選択することで相互運用に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="92b63c3639a0d3be7790653a4cf98a0c37efe2e2" translate="yes" xml:space="preserve">
          <source>A closing brace on its own is not a special character. If the second number is omitted, but the comma is present, there is no upper limit. If the second number and the comma are both omitted, the quantifier specifies an exact number of required matches. Thus, the following matches at least three successive vowels, but can match many more:</source>
          <target state="translated">閉じ括弧単体では特殊文字ではありません。2番目の数字が省略されていてもカンマがある場合は、上限はありません。2 番目の数字とカンマの両方が省略されている場合、量詞は必要なマッチ数を正確に指定します。したがって、以下は少なくとも3つの連続する母音にマッチしますが、それ以上の数の母音にマッチすることができます。</target>
        </trans-unit>
        <trans-unit id="5df59142009d0a2f0174628ac8c696397e059c32" translate="yes" xml:space="preserve">
          <source>A collection of annotations.</source>
          <target state="translated">アノテーションのコレクション。</target>
        </trans-unit>
        <trans-unit id="03e8d201bb4d1ea3a3e042cc7f432a7b21d3da31" translate="yes" xml:space="preserve">
          <source>A collection of list processing functions can be found in the &lt;code&gt;lists&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">リスト処理関数のコレクションは、STDLIBの &lt;code&gt;lists&lt;/code&gt; マニュアルページにあります。</target>
        </trans-unit>
        <trans-unit id="0cdd7d34c0f5f7115114bd571785b83e151e658b" translate="yes" xml:space="preserve">
          <source>A collection of maps processing functions can be found in &lt;code&gt;maps&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">マップ処理関数のコレクションは、STDLIBの &lt;code&gt;maps&lt;/code&gt; マニュアルページにあります。</target>
        </trans-unit>
        <trans-unit id="c3e3cce83083c2f4eda9342971b0fd43678fa41c" translate="yes" xml:space="preserve">
          <source>A collection of mathematical functions that return floats. Arguments are numbers.</source>
          <target state="translated">フロートを返す数学関数のコレクション。引数は数値です。</target>
        </trans-unit>
        <trans-unit id="605e87ed4414816e773ab8b3750564d7de25784e" translate="yes" xml:space="preserve">
          <source>A collection of open disk logs with the same name running on different nodes is said to be a &lt;strong&gt;distributed disk log&lt;/strong&gt; if requests made to any of the logs are automatically made to the other logs as well. The members of such a collection are called individual distributed disk logs, or just distributed disk logs if there is no risk of confusion. There is no order between the members of such a collection. For example, logged terms are not necessarily written to the node where the request was made before written to the other nodes. However, a few functions do not make requests to all members of distributed disk logs, namely &lt;code&gt;&lt;a href=&quot;#info-1&quot;&gt;info/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#chunk-2&quot;&gt;chunk/2,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#bchunk-2&quot;&gt;bchunk/2,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#chunk_step-3&quot;&gt;chunk_step/3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#lclose-1&quot;&gt;lclose/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">別のノードで実行されている同じ名前の開いているディスクログのコレクションは、いずれかの&lt;strong&gt;ログ&lt;/strong&gt;に対して要求が自動的に他のログに対しても行われる場合、&lt;strong&gt;分散ディスク&lt;/strong&gt;ログと呼ばれます。このようなコレクションのメンバーは、個別の分散ディスクログと呼ばれます。混乱のリスクがない場合は、単に分散ディスクログと呼ばれます。そのようなコレクションのメンバー間に順序はありません。たとえば、ログに記録された用語は、他のノードに書き込まれる前に、要求が行われたノードに必ずしも書き込まれるとは限りません。ただし、いくつかの関数は、分散ディスクログのすべてのメンバー、つまり &lt;code&gt;&lt;a href=&quot;#info-1&quot;&gt;info/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#chunk-2&quot;&gt;chunk/2,3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#bchunk-2&quot;&gt;bchunk/2,3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#chunk_step-3&quot;&gt;chunk_step/3&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#lclose-1&quot;&gt;lclose/1,2&lt;/a&gt;&lt;/code&gt; にリクエストを行いません。</target>
        </trans-unit>
        <trans-unit id="c28e602c295299b55b61e9e0432393728a24bb97" translate="yes" xml:space="preserve">
          <source>A collection of test cases, generally with a specific, common target for testing, such as a single function, module, or subsystem. A test suite may also be recursively composed by smaller test suites.</source>
          <target state="translated">テストケースの集合体で、一般的には、単一の関数、モジュール、サブシステムなど、特定の共通のテスト対象を持つもの。テストスイートは、より小さなテストスイートによって再帰的に構成されることもあります。</target>
        </trans-unit>
        <trans-unit id="1465092184b8e8294117483f6254c408114fee45" translate="yes" xml:space="preserve">
          <source>A command file for restarting a service looks as follows:</source>
          <target state="translated">サービスを再起動するためのコマンドファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="91b1cd215daa8a74f995fa565a97f829cc01a78e" translate="yes" xml:space="preserve">
          <source>A common barrier used is a barrier with acquire semantics. On x86/x86_64 this maps to a compiler barrier preventing the compiler to reorder instructions, but on other hardware often some kind of light weight hardware memory barrier is also needed.</source>
          <target state="translated">よく使われるバリアは、取得セマンティクスを持つバリアです。x86/x86_64では、これはコンパイラが命令を並べ替えるのを防ぐコンパイラバリアに対応しますが、他のハードウェアでは、軽量なハードウェアメモリバリアが必要になることがよくあります。</target>
        </trans-unit>
        <trans-unit id="9252c2a7f2a4db9009910e3b44326441724181d8" translate="yes" xml:space="preserve">
          <source>A common interoperability situation is when you want to incorporate a piece of code, solving a complex problem, in your Erlang program. Suppose for example, that you have the following C functions that you would like to call from Erlang:</source>
          <target state="translated">よくある相互運用性の状況は、複雑な問題を解決するコードをErlangプログラムに組み込みたいときです。例えば、次のようなC言語の関数をErlangから呼び出したいとします。</target>
        </trans-unit>
        <trans-unit id="b06198c1c89c922d52dc5340ce3b2b05bb39280d" translate="yes" xml:space="preserve">
          <source>A common method of identifying encoding in text files is to put a Byte Order Mark (BOM) first in the file. The BOM is the code point 16#FEFF encoded in the same way as the remaining file. If such a file is to be read, the first few bytes (depending on encoding) are not part of the text. This code outlines how to open a file that is believed to have a BOM, and sets the files encoding and position for further sequential reading (preferably using the &lt;code&gt;io&lt;/code&gt; module).</source>
          <target state="translated">テキストファイルのエンコーディングを識別する一般的な方法は、ファイルの最初にバイトオーダーマーク（BOM）を置くことです。BOMは、残りのファイルと同じ方法でエンコードされたコードポイント16＃FEFFです。そのようなファイルが読み取られる場合、最初の数バイト（エンコードによって異なります）はテキストの一部ではありません。このコードは、BOMがあると考えられるファイルを開く方法の概要を示し、ファイルのエンコーディングと位置を設定して、さらに順次読み取りを行う（できれば &lt;code&gt;io&lt;/code&gt; モジュールを使用）ようにします。</target>
        </trans-unit>
        <trans-unit id="5647ae6e936ad55169d59c790e8343814c809ae6" translate="yes" xml:space="preserve">
          <source>A common situation in more complex systems is that the data in a table is distributed. Different table rows are implemented in different places. Some SNMP tool-kits dedicate an SNMP sub-agent for each part of the table and load the corresponding MIB into all sub-agents. The Master Agent is responsible for presenting the distributed table as a single table to the manager. The toolkit supplied uses a different method.</source>
          <target state="translated">より複雑なシステムでよく見られる状況は、テーブル内のデータが分散していることです。異なるテーブルの行は、異なる場所に実装されています。SNMPツールキットの中には、テーブルの各部分にSNMPサブエージェントを割り当て、対応するMIBをすべてのサブエージェントにロードするものがあります。マスターエージェントは、分散されたテーブルを1つのテーブルとして管理者に提示する責任があります。付属のツールキットでは、異なる方法を使用しています。</target>
        </trans-unit>
        <trans-unit id="c7eeae65f0479a03e33632169a4331231e0f176a" translate="yes" xml:space="preserve">
          <source>A common way to send a zero-terminated string to a port is the following:</source>
          <target state="translated">ポートにゼロ終端の文字列を送る一般的な方法は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a45a7f5aa5a20b6c21f0a78bd8f6845034a8417e" translate="yes" xml:space="preserve">
          <source>A compile-time error, for example a syntax error, does not cause much trouble as it is caught by the compiler.</source>
          <target state="translated">コンパイル時のエラー、例えばシンタックスエラーは、コンパイラによってキャッチされるので、それほど問題にはなりません。</target>
        </trans-unit>
        <trans-unit id="b4602d9b41e423bca7841f2df941cffa70742972" translate="yes" xml:space="preserve">
          <source>A compiled MIB for SNMP. It generates a &lt;code&gt;.hrl&lt;/code&gt; file.</source>
          <target state="translated">SNMP用にコンパイルされたMIB。 &lt;code&gt;.hrl&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="f5f98caa0ae9cf0f1bdae4ba51cfa598afa6c9ca" translate="yes" xml:space="preserve">
          <source>A compiled match specification.</source>
          <target state="translated">コンパイルされたマッチ指定。</target>
        </trans-unit>
        <trans-unit id="9d939a33ffd17f021de49031e6a1518334f87b64" translate="yes" xml:space="preserve">
          <source>A compiled regular expression</source>
          <target state="translated">コンパイルされた正規表現</target>
        </trans-unit>
        <trans-unit id="f8e9759655ec875d9026034a3b0994a59f1ef864" translate="yes" xml:space="preserve">
          <source>A compiled regular expression and the options for running it</source>
          <target state="translated">コンパイルされた正規表現とそれを実行するためのオプション</target>
        </trans-unit>
        <trans-unit id="d4c9209a41f5a084f05f289c557f295094459659" translate="yes" xml:space="preserve">
          <source>A completly different storage could be interfaced by writing call-back modules using the behaviours &lt;code&gt;&lt;a href=&quot;ssh_client_key_api&quot;&gt;ssh_client_key_api&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;ssh_server_key_api&quot;&gt;ssh_server_key_api&lt;/a&gt;&lt;/code&gt;. A callback module is installed with the option &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; to the client and/or the daemon.</source>
          <target state="translated">completly異なるストレージは振る舞い使用してコールバックモジュール書き込むことによって接続することができ &lt;code&gt;&lt;a href=&quot;ssh_client_key_api&quot;&gt;ssh_client_key_api&lt;/a&gt;&lt;/code&gt; および/または &lt;code&gt;&lt;a href=&quot;ssh_server_key_api&quot;&gt;ssh_server_key_api&lt;/a&gt;&lt;/code&gt; を。コールバックモジュールは、オプション &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; とともにクライアントまたはデーモン、あるいはその両方にインストールされます。</target>
        </trans-unit>
        <trans-unit id="952ff2aeda160eb34af5c137f617385ffdf99591" translate="yes" xml:space="preserve">
          <source>A component of &lt;code&gt;Dir&lt;/code&gt; does not exist.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; のコンポーネントが存在しません。</target>
        </trans-unit>
        <trans-unit id="246870fe4fc14eed479b16bbb7b62bf284297f4b" translate="yes" xml:space="preserve">
          <source>A component of &lt;code&gt;Dir&lt;/code&gt; is not a directory. On some platforms, &lt;code&gt;enoent&lt;/code&gt; is returned instead.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; のコンポーネントはディレクトリではありません。一部のプラットフォームでは、代わりに &lt;code&gt;enoent&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="402962cd392724e5760c55baa6887c10aa95a217" translate="yes" xml:space="preserve">
          <source>A component of &lt;code&gt;Dir&lt;/code&gt; is not a directory. On some platforms, &lt;code&gt;enoent&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; のコンポーネントはディレクトリではありません。一部のプラットフォームでは、 &lt;code&gt;enoent&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="60b48fcc9f23ddcda04bff0fa0292b7348897642" translate="yes" xml:space="preserve">
          <source>A component of the filename does not exist.</source>
          <target state="translated">ファイル名のコンポーネントが存在しません。</target>
        </trans-unit>
        <trans-unit id="01cf1b87250e66341ab964dd0140f38d130efbe8" translate="yes" xml:space="preserve">
          <source>A component of the filename is not a directory, or the filename itself is not a directory if &lt;code&gt;directory&lt;/code&gt; mode was specified. On some platforms, &lt;code&gt;enoent&lt;/code&gt; is returned instead.</source>
          <target state="translated">ファイル名のコンポーネントがディレクトリではないか、 &lt;code&gt;directory&lt;/code&gt; モードが指定されている場合、ファイル名自体がディレクトリではありません。一部のプラットフォームでは、代わりに &lt;code&gt;enoent&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="135c8c2d97ee75d613c98cc3cf13f66a7bede390" translate="yes" xml:space="preserve">
          <source>A component of the filename is not a directory. On some platforms, &lt;code&gt;enoent&lt;/code&gt; is returned instead.</source>
          <target state="translated">ファイル名の構成要素がディレクトリではありません。一部のプラットフォームでは、代わりに &lt;code&gt;enoent&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="821747f02cfeb9e5714e2b19ea3b50b461a99dfe" translate="yes" xml:space="preserve">
          <source>A compression level can be specified by giving option &lt;code&gt;{compressed, Level}&lt;/code&gt;. &lt;code&gt;Level&lt;/code&gt; is an integer with range 0..9, where:</source>
          <target state="translated">圧縮レベルは、オプション &lt;code&gt;{compressed, Level}&lt;/code&gt; を指定することで指定できます。 &lt;code&gt;Level&lt;/code&gt; は、0〜9の範囲の整数です。</target>
        </trans-unit>
        <trans-unit id="d0e574bf3fa3da4f1323956974511982101a1711" translate="yes" xml:space="preserve">
          <source>A concept of table fragmentation has been introduced to cope with large tables. The idea is to split a table into several manageable fragments. Each fragment is implemented as a first class &lt;code&gt;Mnesia&lt;/code&gt; table and can be replicated, have indexes, and so on, as any other table. But the tables cannot have &lt;code&gt;local_content&lt;/code&gt; or have the &lt;code&gt;snmp&lt;/code&gt; connection activated.</source>
          <target state="translated">大きなテーブルに対処するために、テーブルの断片化の概念が導入されました。アイデアは、テーブルをいくつかの扱いやすいフラグメントに分割することです。各フラグメントはファーストクラスの &lt;code&gt;Mnesia&lt;/code&gt; テーブルとして実装され、他のテーブルと同じように複製したり、インデックスを付けたりすることができます。しかし、テーブルは &lt;code&gt;local_content&lt;/code&gt; を持つことも、 &lt;code&gt;snmp&lt;/code&gt; 接続をアクティブにすることもできません。</target>
        </trans-unit>
        <trans-unit id="3e3387e9a6fe042ea7c2ea30883c66ef67ae867f" translate="yes" xml:space="preserve">
          <source>A concurrent call to &lt;code&gt;ets:first(t)&lt;/code&gt;, done by another process, may then in rare cases return &lt;code&gt;2&lt;/code&gt; even though &lt;code&gt;2&lt;/code&gt; has never existed in the table ordered as the first key. In the same way, a concurrent call to &lt;code&gt;ets:next(t, 1)&lt;/code&gt; may return &lt;code&gt;3&lt;/code&gt; even though &lt;code&gt;3&lt;/code&gt; never existed in the table ordered directly after &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">別のプロセスによって行われる &lt;code&gt;ets:first(t)&lt;/code&gt; への同時呼び出しは、最初のキーとして順序付けられたテーブルに &lt;code&gt;2&lt;/code&gt; が存在していなくても、まれに &lt;code&gt;2&lt;/code&gt; を返す場合があります。同様に、への同時呼び出し &lt;code&gt;ets:next(t, 1)&lt;/code&gt; 返すことが &lt;code&gt;3&lt;/code&gt; にもかかわらず &lt;code&gt;3&lt;/code&gt; がテーブルに存在しなかった後、直接注文 &lt;code&gt;1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e49ca9c3184442cd50035d353e0e9f2682e7441b" translate="yes" xml:space="preserve">
          <source>A conditional breakpoint calling &lt;code&gt;c_test:c_break/1&lt;/code&gt; is added at line 6 in module &lt;code&gt;fact&lt;/code&gt;. Each time the breakpoint is reached, the function is called. When &lt;code&gt;N&lt;/code&gt; is equal to 3, the function returns &lt;code&gt;true&lt;/code&gt; and the process stops.</source>
          <target state="translated">モジュール &lt;code&gt;fact&lt;/code&gt; の 6行目に、 &lt;code&gt;c_test:c_break/1&lt;/code&gt; を呼び出す条件付きブレークポイントが追加されています。ブレークポイントに到達するたびに、関数が呼び出されます。 &lt;code&gt;N&lt;/code&gt; が3に等しい場合、関数は &lt;code&gt;true&lt;/code&gt; を返し、プロセスは停止します。</target>
        </trans-unit>
        <trans-unit id="420493b84dd5c17e043c6b4089d0760ab787da6f" translate="yes" xml:space="preserve">
          <source>A conditional breakpoint is created at a certain line in the module, but a process reaching the breakpoint stops only if a specified condition is true.</source>
          <target state="translated">モジュール内の特定の行に条件付きのブレークポイントが作成されますが、そのブレークポイントに到達したプロセスは、指定された条件が真である場合にのみ停止します。</target>
        </trans-unit>
        <trans-unit id="f2032c66ce1d764483fb75f184dda9191dfa8a90" translate="yes" xml:space="preserve">
          <source>A configuration example:</source>
          <target state="translated">構成例です。</target>
        </trans-unit>
        <trans-unit id="fca2493f0bfcfddaa7857841304efa4715628d65" translate="yes" xml:space="preserve">
          <source>A configuration file can contain any number of elements of the type:</source>
          <target state="translated">設定ファイルには、そのタイプの要素をいくつでも含めることができます。</target>
        </trans-unit>
        <trans-unit id="78ca415df4713a5dc750b7b27876e4c151d1fefd" translate="yes" xml:space="preserve">
          <source>A configuration file for using the FTP client to access files on a remote host can look as follows:</source>
          <target state="translated">FTPクライアントを使用してリモートホスト上のファイルにアクセスするための設定ファイルは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1c3a7bd9523a05d54af1d3003cdb3950dec94457" translate="yes" xml:space="preserve">
          <source>A configuration file is created or extended with &lt;code&gt;&lt;a href=&quot;ttb#write_config-2&quot;&gt;ttb:write_config/2,3&lt;/a&gt;&lt;/code&gt;. Configuration files are binary files and can therefore only be read and written with functions provided by &lt;code&gt;ttb&lt;/code&gt;.</source>
          <target state="translated">構成ファイルは &lt;code&gt;&lt;a href=&quot;ttb#write_config-2&quot;&gt;ttb:write_config/2,3&lt;/a&gt;&lt;/code&gt; で作成または拡張されます。構成ファイルはバイナリファイルであるため、 &lt;code&gt;ttb&lt;/code&gt; が提供する関数でのみ読み書きできます。</target>
        </trans-unit>
        <trans-unit id="671d2cc5723fde16b3b1db23f40f7f8a98edafae" translate="yes" xml:space="preserve">
          <source>A configuration is created in the following way:</source>
          <target state="translated">設定は以下のようにして作成します。</target>
        </trans-unit>
        <trans-unit id="c8ccb5edfb531730a93bb64572c6648008c39609" translate="yes" xml:space="preserve">
          <source>A configuration key which exists in a configuration file</source>
          <target state="translated">設定ファイルに存在する設定キー</target>
        </trans-unit>
        <trans-unit id="390f275edabaf65d38db27499e0d752ebcf76daa" translate="yes" xml:space="preserve">
          <source>A confirmation that the test has started and information about how many test cases are executed in total.</source>
          <target state="translated">テストが開始されたことの確認と、合計で何個のテストケースが実行されたかの情報。</target>
        </trans-unit>
        <trans-unit id="16cfc1e11c18feed4f6e01ecf44d3ed97a53d652" translate="yes" xml:space="preserve">
          <source>A confirmation when the test run is complete.</source>
          <target state="translated">テスト実行が完了したときの確認</target>
        </trans-unit>
        <trans-unit id="a8db6e97290afb25f8da08685474a76274ab963c" translate="yes" xml:space="preserve">
          <source>A connected socket (or accepted socket) in &lt;code&gt;command&lt;/code&gt; mode mentioned earlier.</source>
          <target state="translated">前述の &lt;code&gt;command&lt;/code&gt; モードで接続されたソケット（または受け入れられたソケット）。</target>
        </trans-unit>
        <trans-unit id="b989a34ee0dda9766c669da2f15eb2969efbeba6" translate="yes" xml:space="preserve">
          <source>A connected socket returned from &lt;code&gt;&lt;a href=&quot;gen_tcp#accept-1&quot;&gt;gen_tcp:accept/1&lt;/a&gt;&lt;/code&gt; inherits the &lt;code&gt;show_econnreset&lt;/code&gt; setting from the listening socket.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_tcp#accept-1&quot;&gt;gen_tcp:accept/1&lt;/a&gt;&lt;/code&gt; から返された接続済みソケットは、リスニングソケットから &lt;code&gt;show_econnreset&lt;/code&gt; 設定を継承します。</target>
        </trans-unit>
        <trans-unit id="16798b95a6178eace7c7e27d49d5ae81b52eea7c" translate="yes" xml:space="preserve">
          <source>A connecting transport is attempting to establish/reestablish a transport connection with a peer following &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; expiry.</source>
          <target state="translated">接続トランスポートは、 &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; の有効期限が切れた後に、ピアとのトランスポート接続を確立または再確立しようとしています。</target>
        </trans-unit>
        <trans-unit id="2de4335ce6ca183161a25e425035c54728e74d6f" translate="yes" xml:space="preserve">
          <source>A connection can be associated with a target name and/or a handle. If &lt;code&gt;Connection&lt;/code&gt; has no associated target name, it can only be closed with the handle value (see &lt;code&gt;&lt;a href=&quot;#open-4&quot;&gt;ct_telnet:open/4&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">接続は、ターゲット名やハンドルに関連付けることができます。 &lt;code&gt;Connection&lt;/code&gt; ターゲット名が関連付けられていない場合は、ハンドル値でのみ閉じることができます（ &lt;code&gt;&lt;a href=&quot;#open-4&quot;&gt;ct_telnet:open/4&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="84ef649954a73cf1383ab5bc1d54652a8c9eadd0" translate="yes" xml:space="preserve">
          <source>A connection is closed by simply closing the socket. For information about how to close the socket gracefully (when there are outgoing packets before close), see the relevant system documentation.</source>
          <target state="translated">接続はソケットを閉じるだけで終了します。ソケットを優雅に閉じる方法(閉じる前に送信パケットがある場合)については、関連するシステムドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="a4165b6aef0a7c56f164963bc85807e7a3413d62" translate="yes" xml:space="preserve">
          <source>A connection is established using a full handshake. Below is a summary of the exchanged messages:</source>
          <target state="translated">接続はフルハンドシェイクを使用して確立されます。以下に交換されたメッセージの概要を示します。</target>
        </trans-unit>
        <trans-unit id="17e6c50bbb1f711f9fede53cf0df05d82936b396" translate="yes" xml:space="preserve">
          <source>A connection may be established in several ways:</source>
          <target state="translated">接続はいくつかの方法で確立することができます。</target>
        </trans-unit>
        <trans-unit id="a37d94bb6ad00988b64d647642ebc7cb8c0abb3c" translate="yes" xml:space="preserve">
          <source>A connection to the node is already active, which either means that node &lt;code&gt;A&lt;/code&gt; is confused or that the TCP connection breakdown of a previous node with this name has not yet reached node &lt;code&gt;B&lt;/code&gt;. See step 3B below.</source>
          <target state="translated">ノードへの接続はすでにアクティブです。これは、ノード &lt;code&gt;A&lt;/code&gt; が混乱しているか、この名前を持つ以前のノードのTCP接続の内訳がまだノード &lt;code&gt;B&lt;/code&gt; に到達していないことを意味します。以下のステップ3Bを参照してください。</target>
        </trans-unit>
        <trans-unit id="c7ac923ae2612ff651e35e68a8cf52b6bfffc763" translate="yes" xml:space="preserve">
          <source>A consequence of the rules for importing variables into a list comprehensions is that certain pattern matching operations must be moved into the filters and cannot be written directly in the generators.</source>
          <target state="translated">変数をリスト内包にインポートするルールの結果として、特定のパターンマッチ操作はフィルタに移動しなければならず、ジェネレータに直接書くことができないということがあります。</target>
        </trans-unit>
        <trans-unit id="13bd8527f949ed0966879c517d0b7fc761771b34" translate="yes" xml:space="preserve">
          <source>A constant value &lt;code&gt;H&lt;/code&gt; for the topmost &lt;code&gt;32-N&lt;/code&gt; bits of of 32-bit End-to-End and Hop-by-Hop Identifiers generated by the service, either explicitly or as a return value of a function to be evaluated at &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt;. In particular, an identifier &lt;code&gt;Id&lt;/code&gt; is mapped to a new identifier as follows.</source>
          <target state="translated">明示的に、または &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; で評価される関数の戻り値として、サービスによって生成された32ビットのエンドツーエンドおよびホップバイホップ識別子の最上位 &lt;code&gt;32-N&lt;/code&gt; ビットの定数値 &lt;code&gt;H&lt;/code&gt; 。特に、識別子 &lt;code&gt;Id&lt;/code&gt; は次のように新しい識別子にマッピングされます。</target>
        </trans-unit>
        <trans-unit id="18d886af02e0496aa48e2b5d6a6f92d0202ac37e" translate="yes" xml:space="preserve">
          <source>A container for incoming and outgoing Diameter messages. Fields have the following types.</source>
          <target state="translated">着信および発信するDiameterメッセージのコンテナ。フィールドには以下のタイプがあります。</target>
        </trans-unit>
        <trans-unit id="b1dd9fe6f6d7543e1cad9aacae9f7f895fe2c259" translate="yes" xml:space="preserve">
          <source>A context is a collection of management information accessible by an SNMP entity. An instance of a management object may exist in more than one context. An SNMP entity potentially has access to many contexts.</source>
          <target state="translated">コンテキストとは、SNMPエンティティがアクセス可能な管理情報の集合体です。管理オブジェクトのインスタンスは、複数のコンテキストに存在する可能性があります。SNMPエンティティは、多くのコンテキストにアクセスできる可能性があります。</target>
        </trans-unit>
        <trans-unit id="734dc478d1f1465863bbde8232d6c6d77c880f57" translate="yes" xml:space="preserve">
          <source>A continuation as returned by &lt;code&gt;&lt;a href=&quot;#fread-3&quot;&gt;fread/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#fread-3&quot;&gt;fread/3&lt;/a&gt;&lt;/code&gt; によって返される継続。</target>
        </trans-unit>
        <trans-unit id="e6381830ad9a3607ffa3055f5bcf56d4da1d20cb" translate="yes" xml:space="preserve">
          <source>A convenient way to specify arguments to Erlang is to use environment variable &lt;code&gt;ERL_FLAGS&lt;/code&gt;. All the flags needed to use the SSL/TLS distribution can be specified in that variable and are then interpreted as command-line arguments for all subsequent invocations of Erlang.</source>
          <target state="translated">Erlangの引数を指定する便利な方法は、環境変数 &lt;code&gt;ERL_FLAGS&lt;/code&gt; を使用することです。SSL / TLS配布を使用するために必要なすべてのフラグは、その変数で指定でき、その後のErlangのすべての呼び出しのコマンドライン引数として解釈されます。</target>
        </trans-unit>
        <trans-unit id="4121c97ea6dd30991c4d6c6b29244f156bdf828d" translate="yes" xml:space="preserve">
          <source>A convenient way to specify arguments to Erlang is to use environment variable &lt;code&gt;ERL_FLAGS&lt;/code&gt;. All the flags needed to use the TLS distribution can be specified in that variable and are then interpreted as command-line arguments for all subsequent invocations of Erlang.</source>
          <target state="translated">アーランへの引数を指定する便利な方法は、環境変数 &lt;code&gt;ERL_FLAGS&lt;/code&gt; を使用することです。TLSディストリビューションを使用するために必要なすべてのフラグは、その変数で指定でき、その後のErlangのすべての呼び出しのコマンドライン引数として解釈されます。</target>
        </trans-unit>
        <trans-unit id="1ca49f6e451d0d84b06716dddb10383b5981e929" translate="yes" xml:space="preserve">
          <source>A correctly encoded map cannot have duplicate keys.</source>
          <target state="translated">正しくエンコードされたマップは、重複したキーを持つことはできません。</target>
        </trans-unit>
        <trans-unit id="d121637a1d8220cf7197c40025c0f7398d773f8f" translate="yes" xml:space="preserve">
          <source>A cross configuration file can be passed to &lt;code&gt;otp_build configure&lt;/code&gt; using the &lt;code&gt;--xcomp-conf&lt;/code&gt; command line argument. Note that &lt;code&gt;configure&lt;/code&gt; does not accept this command line argument. When using the &lt;code&gt;configure&lt;/code&gt; script directly, pass the configuration variables as arguments to &lt;code&gt;configure&lt;/code&gt; using a &lt;code&gt;&amp;lt;VARIABLE&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt; syntax. Variables can also be passed as environment variables to &lt;code&gt;configure&lt;/code&gt;. However, if you pass the configuration in the environment, make sure to unset all of these environment variables before invoking &lt;code&gt;make&lt;/code&gt;; otherwise, the environment variables might set make variables in some applications, or parts of some applications, and you may end up with an erroneously configured build.</source>
          <target state="translated">&lt;code&gt;--xcomp-conf&lt;/code&gt; コマンドライン引数を使用して、クロス構成ファイルを &lt;code&gt;otp_build configure&lt;/code&gt; に渡すことができます。 &lt;code&gt;configure&lt;/code&gt; はこのコマンドライン引数を受け付けないことに注意してください。 &lt;code&gt;configure&lt;/code&gt; スクリプトを直接使用する場合、 &lt;code&gt;&amp;lt;VARIABLE&amp;gt;=&amp;lt;VALUE&amp;gt;&lt;/code&gt; 構文を使用して &lt;code&gt;configure&lt;/code&gt; するために、構成変数を引数として渡します。変数を環境変数として渡して &lt;code&gt;configure&lt;/code&gt; することもできます。あなたは、環境内の設定を渡す場合は、起動する前にこれらの環境変数のすべての設定を解除してください &lt;code&gt;make&lt;/code&gt; ;そうしないと、一部のアプリケーションまたは一部のアプリケーションで環境変数がmake変数を設定し、誤って構成されたビルドが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d1583ce679c6d2d53d418e62301c75ea7be08c45" translate="yes" xml:space="preserve">
          <source>A current restriction, which currently results in a warning (not an error) by the compiler, is that the domains of the argument types cannot overlap. For example, the following specification results in a warning:</source>
          <target state="translated">現在のところ、コンパイラによる警告(エラーではありません)の原因となっている制限は、引数型のドメインが重複してはいけないということです。例えば、以下のような仕様では警告が発生します。</target>
        </trans-unit>
        <trans-unit id="88d09c4bad655176f525dc30f98c229dc5d52beb" translate="yes" xml:space="preserve">
          <source>A customized prompt function is stated as a tuple &lt;code&gt;{Mod,&amp;nbsp;Func}&lt;/code&gt;. The function is called as &lt;code&gt;Mod:Func(L)&lt;/code&gt;, where &lt;code&gt;L&lt;/code&gt; is a list of key-value pairs created by the shell. Currently there is only one pair: &lt;code&gt;{history, N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the current command number. The function is to return a list of characters or an atom. This constraint is because of the Erlang I/O protocol. Unicode characters beyond code point 255 are allowed in the list and the atom. Notice that in restricted mode the call &lt;code&gt;Mod:Func(L)&lt;/code&gt; must be allowed or the default shell prompt function is called.</source>
          <target state="translated">カスタマイズされたプロンプト関数は、タプル &lt;code&gt;{Mod,&amp;nbsp;Func}&lt;/code&gt; として記述されています。関数は &lt;code&gt;Mod:Func(L)&lt;/code&gt; として呼び出されます。ここで、 &lt;code&gt;L&lt;/code&gt; はシェルによって作成されたキーと値のペアのリストです。現在 &lt;code&gt;{history, N}&lt;/code&gt; ペアは{history、N}のみです。ここで、 &lt;code&gt;N&lt;/code&gt; は現在のコマンド番号です。関数は、文字のリストまたはアトムを返すことです。この制約は、Erlang I / Oプロトコルが原因です。コードポイント255を超えるUnicode文字は、リストとアトムで使用できます。制限付きモードでは、 &lt;code&gt;Mod:Func(L)&lt;/code&gt; の呼び出しを許可する必要があるか、デフォルトのシェルプロンプト関数が呼び出されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6fd2cbfddb471a80c0a3d34c8344a9b8a197fe78" translate="yes" xml:space="preserve">
          <source>A daemon has two services for evaluating tasks on behalf of a remote client. The</source>
          <target state="translated">デーモンには、リモートクライアントに代わってタスクを評価するための2つのサービスがあります。このサービスは、リモートクライアントに代わってタスクを評価するための</target>
        </trans-unit>
        <trans-unit id="8c9abdbda17aa95d8e0108392fe6c0db5b6c523d" translate="yes" xml:space="preserve">
          <source>A database schema must be initiated, using the function &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema/1&lt;/a&gt;&lt;/code&gt; を使用して、データベーススキーマを開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="49e3317b1ebd7518e2b7a6cb468c8efab693a0e3" translate="yes" xml:space="preserve">
          <source>A decimal integer is expected.</source>
          <target state="translated">10進整数を想定しています。</target>
        </trans-unit>
        <trans-unit id="c1c59bae41554e9820138c5a12e4fa4d04d13249" translate="yes" xml:space="preserve">
          <source>A default set of socket &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;options&lt;/a&gt;&lt;/code&gt; is used. In particular, the socket is opened in &lt;code&gt;&lt;a href=&quot;#option-binary&quot;&gt;binary&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#option-active&quot;&gt;passive&lt;/a&gt;&lt;/code&gt; mode, with SockType &lt;code&gt;seqpacket&lt;/code&gt;, and with reasonably large &lt;code&gt;&lt;a href=&quot;inet#option-sndbuf&quot;&gt;kernel&lt;/a&gt;&lt;/code&gt; and driver &lt;code&gt;&lt;a href=&quot;inet#option-buffer&quot;&gt;buffers&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ソケット &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;options&lt;/a&gt;&lt;/code&gt; デフォルトセットが使用されます。特に、ソケットは &lt;code&gt;&lt;a href=&quot;#option-binary&quot;&gt;binary&lt;/a&gt;&lt;/code&gt; モードと &lt;code&gt;&lt;a href=&quot;#option-active&quot;&gt;passive&lt;/a&gt;&lt;/code&gt; モードで開かれ、SockType &lt;code&gt;seqpacket&lt;/code&gt; と、かなり大きな &lt;code&gt;&lt;a href=&quot;inet#option-sndbuf&quot;&gt;kernel&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;inet#option-buffer&quot;&gt;buffers&lt;/a&gt;&lt;/code&gt; とドライババッファが使用されます。</target>
        </trans-unit>
        <trans-unit id="81e1106f005b142a1186ef57db08f77c469fcdf2" translate="yes" xml:space="preserve">
          <source>A define for this has been added to the &lt;code&gt;snmp_types.hrl&lt;/code&gt; include file, &lt;code&gt;NOTIFICATION_IGNORE_VB_VALUE&lt;/code&gt;.</source>
          <target state="translated">このための定義が &lt;code&gt;snmp_types.hrl&lt;/code&gt; インクルードファイル &lt;code&gt;NOTIFICATION_IGNORE_VB_VALUE&lt;/code&gt; に追加されました。</target>
        </trans-unit>
        <trans-unit id="0a0192ce6ab3cadd73202466e0233a173404e218" translate="yes" xml:space="preserve">
          <source>A definition has normally a status field. When the status field has the value deprecated, then the MIB-compiler will ignore this definition. With the MIB-compiler option &lt;code&gt;{deprecated,true}&lt;/code&gt; the MIB-compiler does not ignore the deprecated definitions.</source>
          <target state="translated">定義には通常、ステータスフィールドがあります。ステータスフィールドの値が非推奨の場合、MIBコンパイラはこの定義を無視します。MIBコンパイラオプション &lt;code&gt;{deprecated,true}&lt;/code&gt; すると、MIBコンパイラは非推奨の定義を無視しません。</target>
        </trans-unit>
        <trans-unit id="08538f938c9e3f97e154e5c1ebc56ab69364db2a" translate="yes" xml:space="preserve">
          <source>A department is managed by an employee, hence the &lt;code&gt;manager&lt;/code&gt; relationship.</source>
          <target state="translated">部署は従業員によって管理されるため、 &lt;code&gt;manager&lt;/code&gt; 関係になります。</target>
        </trans-unit>
        <trans-unit id="1b53034143c11327f553ef9c9ce7ca9d616cea37" translate="yes" xml:space="preserve">
          <source>A description of the reason why an operation failed.</source>
          <target state="translated">操作が失敗した理由の説明。</target>
        </trans-unit>
        <trans-unit id="534a5700b1818fc0d3d69084b7c41aaeecf9a10e" translate="yes" xml:space="preserve">
          <source>A destroyed key is very likely to be reused soon. Therefore, if you fail to clear the thread-specific data using this key in a thread before destroying the key, you will &lt;strong&gt;very likely&lt;/strong&gt; get unexpected errors in other parts of the system.</source>
          <target state="translated">破棄されたキーはすぐに再利用される可能性が非常に高いです。したがって、キーを破棄する前にこのキーを使用してスレッド固有のデータをクリアしないと、システムの他の部分で予期しないエラーが発生する&lt;strong&gt;可能性&lt;/strong&gt;が&lt;strong&gt;高くなり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6c06f3920fbc20d8a33902857e2e1dbbe9185ab8" translate="yes" xml:space="preserve">
          <source>A diameter service, as configured with &lt;code&gt;&lt;a href=&quot;diameter#start_service-2&quot;&gt;diameter:start_service/2&lt;/a&gt;&lt;/code&gt;, specifies one or more supported Diameter applications. Each Diameter application specifies a dictionary module that knows how to encode and decode its messages and AVPs. The dictionary module is in turn generated from a file that defines these messages and AVPs. The format of such a file is defined in &lt;code&gt;&lt;a href=&quot;#FILE_FORMAT&quot;&gt;FILE FORMAT&lt;/a&gt;&lt;/code&gt; below. Users add support for their specific applications by creating dictionary files, compiling them to Erlang modules using either &lt;code&gt;&lt;a href=&quot;diameterc&quot;&gt;diameterc(1)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;diameter_make&quot;&gt;diameter_make(3)&lt;/a&gt;&lt;/code&gt; and configuring the resulting dictionaries modules on a service.</source>
          <target state="translated">直径サービスは、 &lt;code&gt;&lt;a href=&quot;diameter#start_service-2&quot;&gt;diameter:start_service/2&lt;/a&gt;&lt;/code&gt; で構成され、1つ以上のサポートされるDiameterアプリケーションを指定します。各Diameterアプリケーションは、メッセージとAVPをエンコードおよびデコードする方法を知っている辞書モジュールを指定します。辞書モジュールは、これらのメッセージとAVPを定義するファイルから生成されます。そのようなAのファイルのフォーマットは、で定義されている &lt;code&gt;&lt;a href=&quot;#FILE_FORMAT&quot;&gt;FILE FORMAT&lt;/a&gt;&lt;/code&gt; 以下。ユーザーは、ディクショナリファイルを作成し、 &lt;code&gt;&lt;a href=&quot;diameterc&quot;&gt;diameterc(1)&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;diameter_make&quot;&gt;diameter_make(3)&lt;/a&gt;&lt;/code&gt; を使用してそれらをErlangモジュールにコンパイルし、結果として得られるディクショナリモジュールをサービスに設定することにより、特定のアプリケーションのサポートを追加します。</target>
        </trans-unit>
        <trans-unit id="7a9137875cffe6b05cd927e970323d3a0b3eea26" translate="yes" xml:space="preserve">
          <source>A dictionary file consists of distinct sections. Each section starts with a tag followed by zero or more arguments and ends at the the start of the next section or end of file. Tags consist of an ampersand character followed by a keyword and are separated from their arguments by whitespace. Whitespace separates individual tokens but is otherwise insignificant.</source>
          <target state="translated">辞書ファイルは別個のセクションから構成されています。各セクションは、0個以上の引数が続くタグで始まり、次のセクションの開始点またはファイルの終了点で終わります。タグは、アンパサンド文字とキーワードの後に続くキーワードで構成され、その引数とは空白で区切られています。空白は個々のトークンを区切りますが、それ以外の場合は重要ではありません。</target>
        </trans-unit>
        <trans-unit id="5e33a8495150bb32e7f8b820523060366bf248c7" translate="yes" xml:space="preserve">
          <source>A difference is how messages are sent to a registered process on another node:</source>
          <target state="translated">違いは、別のノードに登録されたプロセスにメッセージがどのように送信されるかです。</target>
        </trans-unit>
        <trans-unit id="94b01ef26ce08428a3ba5531da74cc6167159294" translate="yes" xml:space="preserve">
          <source>A digest is a (16 bytes) MD5 hash of the challenge (as text) concatenated with the cookie (as text). Below, the function &lt;code&gt;gen_digest(Challenge, Cookie)&lt;/code&gt; generates a digest as described above.</source>
          <target state="translated">ダイジェストは、チャレンジ（テキスト）の（16バイト）MD5ハッシュであり、Cookie（テキスト）と連結されています。以下では、関数 &lt;code&gt;gen_digest(Challenge, Cookie)&lt;/code&gt; 上記のようにダイジェストを生成します。</target>
        </trans-unit>
        <trans-unit id="97a4d843c861dcb7b6c4243c19ad5c6f32cf1f75" translate="yes" xml:space="preserve">
          <source>A digraph as returned by &lt;code&gt;&lt;a href=&quot;#new-0&quot;&gt;new/0,1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#new-0&quot;&gt;new/0,1&lt;/a&gt;&lt;/code&gt; によって返されるダイグラフ。</target>
        </trans-unit>
        <trans-unit id="88e904b4a7a9fd2087bf2bd7ad046c069c7ff615" translate="yes" xml:space="preserve">
          <source>A digraph is a mutable data structure.</source>
          <target state="translated">ディグラフは突然変異可能なデータ構造です。</target>
        </trans-unit>
        <trans-unit id="92134ca8f685d563f60794a6f2cd96898218a3f1" translate="yes" xml:space="preserve">
          <source>A direct one-to-one mapping can be established between Mnesia tables and SNMP tables. Many telecommunication applications are controlled and monitored by the SNMP protocol. This connection between Mnesia and SNMP makes it simple and convenient to achieve this mapping.</source>
          <target state="translated">MnesiaテーブルとSNMPテーブルの間で、1対1の直接マッピングを確立することができます。多くの通信アプリケーションは、SNMPプロトコルによって制御および監視されています。MnesiaとSNMPの間のこの接続により、このマッピングを簡単かつ便利に実現することができます。</target>
        </trans-unit>
        <trans-unit id="5a14fb204056be345e895dd5aa7d44f25878907a" translate="yes" xml:space="preserve">
          <source>A directory &lt;code&gt;$ROOT/lib/releases/Vsn&lt;/code&gt; is created, where the &lt;code&gt;.rel&lt;/code&gt; file, the boot script &lt;code&gt;start.boot&lt;/code&gt;, the system configuration file &lt;code&gt;sys.config&lt;/code&gt;, and &lt;code&gt;relup&lt;/code&gt; are placed. For applications with new version numbers, the application directories are placed under &lt;code&gt;$ROOT/lib&lt;/code&gt;. Unchanged applications are not affected.</source>
          <target state="translated">&lt;code&gt;$ROOT/lib/releases/Vsn&lt;/code&gt; ディレクトリが作成され、そこに &lt;code&gt;.rel&lt;/code&gt; ファイル、ブートスクリプト &lt;code&gt;start.boot&lt;/code&gt; 、システム構成ファイル &lt;code&gt;sys.config&lt;/code&gt; 、および &lt;code&gt;relup&lt;/code&gt; が配置されます。新しいバージョン番号のアプリケーションの場合、アプリケーションディレクトリは &lt;code&gt;$ROOT/lib&lt;/code&gt; 下に配置されます。変更されていないアプリケーションは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="b6621117e99280c08a6a5c251265a94569f71ef2" translate="yes" xml:space="preserve">
          <source>A directory &lt;code&gt;releases&lt;/code&gt; is also included in the release package, containing &lt;code&gt;Name.rel&lt;/code&gt; and a subdirectory &lt;code&gt;RelVsn&lt;/code&gt;. &lt;code&gt;RelVsn&lt;/code&gt; is the release version as specified in &lt;code&gt;Name.rel&lt;/code&gt;.</source>
          <target state="translated">ディレクトリの &lt;code&gt;releases&lt;/code&gt; も含む、リリースパッケージに含まれている &lt;code&gt;Name.rel&lt;/code&gt; とサブディレクトリ &lt;code&gt;RelVsn&lt;/code&gt; を。 &lt;code&gt;RelVsn&lt;/code&gt; は、Name.relで指定されているリリースバージョン &lt;code&gt;Name.rel&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4500d0e224c17fb948b0cb9c7625fe0de15c6f3" translate="yes" xml:space="preserve">
          <source>A directory containing one or more test suite modules, that is, a group of test suites.</source>
          <target state="translated">1つ以上のテストスイートモジュール、つまりテストスイートのグループを含むディレクトリ。</target>
        </trans-unit>
        <trans-unit id="e1df29d5aaa8b080fbaa691c505a19d49ce3028b" translate="yes" xml:space="preserve">
          <source>A dirty CPU scheduler thread.</source>
          <target state="translated">汚れたCPUスケジューラのスレッド。</target>
        </trans-unit>
        <trans-unit id="ac9d98b43f6ed325d229760f35e5424d98091c99" translate="yes" xml:space="preserve">
          <source>A dirty I/O scheduler thread.</source>
          <target state="translated">ダーティなI/Oスケジューラのスレッド。</target>
        </trans-unit>
        <trans-unit id="bf9457e20d0f94d641c3b38efb00a54afdb0494c" translate="yes" xml:space="preserve">
          <source>A dirty operation ensures a certain level of consistency. For example, dirty operations cannot return garbled records. Hence, each individual read or write operation is performed in an atomic manner.</source>
          <target state="translated">ダーティ操作は、一定レベルの一貫性を保証します。例えば、ダーティ操作では、文字化けしたレコードを返すことはできません。したがって、個々の読み取りまたは書き込み操作は、原子的な方法で実行されます。</target>
        </trans-unit>
        <trans-unit id="7ebf083e79a4bab181933e594cee2d9370b9ab7c" translate="yes" xml:space="preserve">
          <source>A disk-based term logging facility.</source>
          <target state="translated">ディスクベースのタームロギング施設。</target>
        </trans-unit>
        <trans-unit id="0d96f2972ef274a3b4c3377bf6357c2926605d52" translate="yes" xml:space="preserve">
          <source>A disk-based term storage.</source>
          <target state="translated">ディスクベースのタームストレージ。</target>
        </trans-unit>
        <trans-unit id="47c69df1e3667dcfedb432994923493351c17966" translate="yes" xml:space="preserve">
          <source>A disk_log based handler for Logger</source>
          <target state="translated">Logger 用の disk_log ベースのハンドラ</target>
        </trans-unit>
        <trans-unit id="d5a1bc14ede3681f787b432535890d0cd273d420" translate="yes" xml:space="preserve">
          <source>A distributed telecommunications DBMS</source>
          <target state="translated">分散型通信DBMS</target>
        </trans-unit>
        <trans-unit id="ce830ece0130879215c67d6a63d5c97d8a7c48e3" translate="yes" xml:space="preserve">
          <source>A dollar metacharacter in the pattern matches only at the end of the subject string. Without this option, a dollar also matches immediately before a newline at the end of the string (but not before any other newlines). This option is ignored if option &lt;code&gt;multiline&lt;/code&gt; is specified. There is no equivalent option in Perl, and it cannot be set within a pattern.</source>
          <target state="translated">パターン内のドルのメタ文字は、件名の文字列の末尾でのみ一致します。このオプションがない場合、ドルは文字列の最後の改行の直前にも一致します（他の改行の前には一致しません）。オプション &lt;code&gt;multiline&lt;/code&gt; が指定されている場合、このオプションは無視されます。Perlには同等のオプションはなく、パターン内で設定することはできません。</target>
        </trans-unit>
        <trans-unit id="ade8b69a85608bc000b53cc0bb10d32bd6f4e1e4" translate="yes" xml:space="preserve">
          <source>A domain field must be a list of atoms, creating smaller and more specialized domains as the list grows longer. The greatest domain is &lt;code&gt;[]&lt;/code&gt;, which comprises all possible domains.</source>
          <target state="translated">ドメインフィールドは原子のリストである必要があり、リストが長くなるにつれて、より小さく、より専門的なドメインが作成されます。最大のドメインは &lt;code&gt;[]&lt;/code&gt; であり、可能なすべてのドメインを含みます。</target>
        </trans-unit>
        <trans-unit id="3633cdcde13dc5b95a07d9cdccf61ad19b7292b3" translate="yes" xml:space="preserve">
          <source>A door with a code lock can be seen as a state machine. Initially, the door is locked. When someone presses a button, an event is generated. The pressed buttons are collected, up to the number of buttons in the correct code. If correct, the door is unlocked for 10 seconds. If not correct, we wait for a new button to be pressed.</source>
          <target state="translated">コードロック付きのドアは、ステートマシンとして見ることができます。初期状態では、ドアはロックされています。誰かがボタンを押すとイベントが発生します。押されたボタンは、正しいコードのボタンの数まで集められます。正しければ、10秒間ドアのロックが解除されます。正しくなければ、新しいボタンが押されるのを待ちます。</target>
        </trans-unit>
        <trans-unit id="9d2a5945a95873dd7f235759b1053935e86a971f" translate="yes" xml:space="preserve">
          <source>A dot in the pattern matches all characters, including those indicating newline. Without it, a dot does not match when the current position is at a newline. This option is equivalent to Perl option &lt;code&gt;/s&lt;/code&gt; and it can be changed within a pattern by a &lt;code&gt;(?s)&lt;/code&gt; option setting. A negative class, such as &lt;code&gt;[^a]&lt;/code&gt;, always matches newline characters, independent of the setting of this option.</source>
          <target state="translated">パターン内のドットは、改行を示す文字を含むすべての文字に一致します。これがないと、現在の位置が改行のときにドットが一致しません。このオプションはPerlオプション &lt;code&gt;/s&lt;/code&gt; と同等であり、 &lt;code&gt;(?s)&lt;/code&gt; オプション設定によってパターン内で変更できます。 &lt;code&gt;[^a]&lt;/code&gt; などの否定的なクラスは、このオプションの設定に関係なく、常に改行文字と一致します。</target>
        </trans-unit>
        <trans-unit id="885bb765c3b45bdf4bc945235d9e2dd16052f6ab" translate="yes" xml:space="preserve">
          <source>A drawback of simple test functions is that you must write a separate function (with a separate name) for each test case. A more compact way of writing tests (and much more flexible, as we shall see), is to write functions that &lt;strong&gt;return&lt;/strong&gt; tests, instead of &lt;strong&gt;being&lt;/strong&gt; tests.</source>
          <target state="translated">単純なテスト関数の欠点は、テストケースごとに（別の名前で）別の関数を記述する必要があることです。（私たちが見るように、とはるかに柔軟な）テストを書くのよりコンパクトな方法は、関数を記述することである&lt;strong&gt;リターン&lt;/strong&gt;の代わりに、テスト、&lt;strong&gt;という&lt;/strong&gt;テストが。</target>
        </trans-unit>
        <trans-unit id="b000c1146f0c1ed1dc5a3aabc97ba084c853c614" translate="yes" xml:space="preserve">
          <source>A drawback with implementing an SNMP table as a Mnesia table is that the internal resource is forced to use the table definition from the MIB, which means that the external data model must be used internally. Actually, this is only partially true. The Mnesia table may extend the SNMP table, which means that the Mnesia table may have columns which are use internally and are not seen by SNMP. Still, the data model from SNMP must be maintained. Although this is undesirable, it is a pragmatic compromise in many situations where simple and efficient implementation is preferable to abstraction.</source>
          <target state="translated">SNMPテーブルをMnesiaテーブルとして実装する場合の欠点は、内部リソースがMIBからのテーブル定義を強制的に使用することで、外部データモデルを内部的に使用しなければならないことです。実際には、これは部分的にしか当てはまりません。MnesiaテーブルはSNMPテーブルを拡張している可能性があり、つまり、Mnesiaテーブルには内部的に使用されていてSNMPからは見えないカラムが存在する可能性があります。それでも、SNMPからのデータモデルは維持されなければなりません。これは望ましくありませんが、抽象化よりもシンプルで効率的な実装が好ましい多くの状況では、実用的な妥協点となります。</target>
        </trans-unit>
        <trans-unit id="dc70d1fd3885c3da6699390fff4e736e7393cca0" translate="yes" xml:space="preserve">
          <source>A driver binary allocated in the driver, with &lt;code&gt;driver_alloc_binary&lt;/code&gt;, is to be freed in the driver (unless otherwise stated) with &lt;code&gt;driver_free_binary&lt;/code&gt;. (Notice that this does not necessarily deallocate it, if the driver is still referred in the emulator, the ref-count will not go to zero.)</source>
          <target state="translated">ドライバに割り当てられたドライババイナリは、で &lt;code&gt;driver_alloc_binary&lt;/code&gt; で（特に明記しない限り）ドライバで解放される &lt;code&gt;driver_free_binary&lt;/code&gt; 。（これが必ずしも割り当てを解除するわけではないことに注意してください。エミュレータでドライバがまだ参照されている場合、参照カウントはゼロになりません。）</target>
        </trans-unit>
        <trans-unit id="54bf6555831bbcbb33a1143a231274fb8310abec" translate="yes" xml:space="preserve">
          <source>A driver callback doing &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;lengthy work&lt;/a&gt;&lt;/code&gt; before returning degrades responsiveness of the VM and can cause miscellaneous strange behaviors. Such strange behaviors include, but are not limited to, extreme memory usage and bad load balancing between schedulers. Strange behaviors that can occur because of lengthy work can also vary between Erlang/OTP releases.</source>
          <target state="translated">戻る前に &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;lengthy work&lt;/a&gt;&lt;/code&gt; 行うドライバーコールバックは、VMの応答性を低下させ、さまざまな奇妙な動作を引き起こす可能性があります。このような奇妙な動作には、極端なメモリ使用量やスケジューラ間の不適切な負荷分散が含まれますが、これらに限定されません。長時間の作業が原因で発生する可能性のある奇妙な動作は、Erlang / OTPのリリース間でも異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a40326bca24e22884109edb9057e64a36e9d19f" translate="yes" xml:space="preserve">
          <source>A driver callback doing &lt;code&gt;&lt;a href=&quot;erl_driver#lengthy_work&quot;&gt;lengthy work&lt;/a&gt;&lt;/code&gt; before returning degrades responsiveness of the VM, and can cause miscellaneous strange behaviors. Such strange behaviors include, but are not limited to, extreme memory usage, and bad load balancing between schedulers. Strange behaviors that can occur because of lengthy work can also vary between Erlang/OTP releases.</source>
          <target state="translated">戻る前に &lt;code&gt;&lt;a href=&quot;erl_driver#lengthy_work&quot;&gt;lengthy work&lt;/a&gt;&lt;/code&gt; 行うドライバーコールバックは、VMの応答性を低下させ、さまざまな奇妙な動作を引き起こす可能性があります。このような奇妙な動作には、極端なメモリ使用量、スケジューラ間の不適切なロードバランシングが含まれますが、これらに限定されません。長時間の作業が原因で発生する可能性のある奇妙な動作は、Erlang / OTPのリリース間でも異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="0b5eb508da3e1d5ef4a4f999ab3b5ee6a71a758f" translate="yes" xml:space="preserve">
          <source>A driver callback is executed as a direct extension of the native code of the VM. Execution is not made in a safe environment. The VM &lt;strong&gt;cannot&lt;/strong&gt; provide the same services as provided when executing Erlang code, such as pre-emptive scheduling or memory protection. If the driver callback function does not behave well, the whole VM will misbehave.</source>
          <target state="translated">ドライバーコールバックは、VMのネイティブコードを直接拡張したものとして実行されます。安全な環境で実行されません。 VM &lt;strong&gt;は&lt;/strong&gt;、プリエンプティブスケジューリングやメモリ保護など、Erlangコードの実行時に提供されるものと同じサービスを提供&lt;strong&gt;できません&lt;/strong&gt;。ドライバのコールバック関数が適切に動作しない場合、VM全体が正しく動作しません。</target>
        </trans-unit>
        <trans-unit id="c5fe6680281eb2602c7b531134d6486d21c3966d" translate="yes" xml:space="preserve">
          <source>A driver callback that crash will crash the whole VM.</source>
          <target state="translated">クラッシュするドライバコールバックは、VM全体をクラッシュさせます。</target>
        </trans-unit>
        <trans-unit id="35f6d76692e5c5a3a8bc9ae237376468c696b57c" translate="yes" xml:space="preserve">
          <source>A driver can add and later remove drivers.</source>
          <target state="translated">ドライバは、ドライバを追加したり、後で削除したりすることができます。</target>
        </trans-unit>
        <trans-unit id="5db720ccab1ee2294dd6583e58238e6ff531fde9" translate="yes" xml:space="preserve">
          <source>A driver can be configured to have one lock for each port instead.</source>
          <target state="translated">ドライバは、代わりに各ポートに1つのロックを持つように構成することができます。</target>
        </trans-unit>
        <trans-unit id="ea8de0f635aa82b9e3262bc25c0681bf5ef9e25f" translate="yes" xml:space="preserve">
          <source>A driver can be dynamically loaded, as a shared library (known as a DLL on Windows), or statically loaded, linked with the emulator when it is compiled and linked. Only dynamically loaded drivers are described here, statically linked drivers are beyond the scope of this section.</source>
          <target state="translated">ドライバは、共有ライブラリ(WindowsではDLLとして知られています)として動的にロードすることもできますし、コンパイル時にエミュレータとリンクしている静的にロードすることもできます。ここでは、動的にロードされたドライバのみを説明し、静的にリンクされたドライバについては、このセクションの範囲を超えています。</target>
        </trans-unit>
        <trans-unit id="e0a7bb769b863c9b98696f02891a10946d65061a" translate="yes" xml:space="preserve">
          <source>A driver can monitor a process that does not own a port.</source>
          <target state="translated">ドライバは、ポートを所有していないプロセスを監視することができます。</target>
        </trans-unit>
        <trans-unit id="c998e9cdc2a7831f2ce7666b5692240829ea93b5" translate="yes" xml:space="preserve">
          <source>A driver in Erlang is a library written in C, which is linked to the Erlang emulator and called from Erlang. Drivers can be used when C is more suitable than Erlang, to speed up things, or to provide access to OS resources not directly accessible from Erlang.</source>
          <target state="translated">ErlangのドライバはC言語で書かれたライブラリで、ErlangエミュレータにリンクされていてErlangから呼び出されます。ドライバはErlangよりもC言語の方が適している場合や、スピードアップのために使われたり、Erlangから直接アクセスできないOSリソースへのアクセスを提供したりするために使われます。</target>
        </trans-unit>
        <trans-unit id="485795b556efcb079ba1f2cce0c02a2d6a8f0346" translate="yes" xml:space="preserve">
          <source>A driver monitor for unload eventually results in one of the following messages being sent:</source>
          <target state="translated">アンロード用のドライバモニタは、最終的に以下のメッセージのいずれかが送信されます。</target>
        </trans-unit>
        <trans-unit id="776db06c979c20584411a6ff4cdf277b51cad201" translate="yes" xml:space="preserve">
          <source>A drop-down box in the toolbar contains the command history. Selecting a command in the drop-down box inserts the command at the prompt, as if you used the keyboard to retrieve the command.</source>
          <target state="translated">ツールバーのドロップダウンボックスには、コマンドの履歴が表示されます。ドロップダウンボックスでコマンドを選択すると、キーボードを使用してコマンドを取得したかのように、プロンプトにコマンドが挿入されます。</target>
        </trans-unit>
        <trans-unit id="79b25d549bdab57022a73b39c545323088d9c92b" translate="yes" xml:space="preserve">
          <source>A dynamically resized buffer. It is a &lt;code&gt;struct&lt;/code&gt; with two fields of interest for the user:</source>
          <target state="translated">動的にサイズ変更されたバッファ。これは、ユーザーが関心を持つ2つのフィールドを持つ &lt;code&gt;struct&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6861853bee0f535fea0e16450c99ed3515493ce2" translate="yes" xml:space="preserve">
          <source>A failed user authentication.</source>
          <target state="translated">ユーザー認証に失敗しました。</target>
        </trans-unit>
        <trans-unit id="9db63409ec19fe48d435b1817d57ade59ec9240c" translate="yes" xml:space="preserve">
          <source>A fallback is typically used when a system upgrade is performed. A system typically involves the installation of new software versions, and &lt;code&gt;Mnesia&lt;/code&gt; tables are often transformed into new layouts. If the system crashes during an upgrade, it is highly probable that reinstallation of the old applications is required, and restoration of the database to its previous state. This can be done if a backup is performed and installed as a fallback before the system upgrade begins.</source>
          <target state="translated">フォールバックは通常、システムのアップグレードが実行されるときに使用されます。システムには通常、新しいソフトウェアバージョンのインストールが含まれ、 &lt;code&gt;Mnesia&lt;/code&gt; テーブルは新しいレイアウトに変換されることがよくあります。アップグレード中にシステムがクラッシュした場合、古いアプリケーションの再インストールとデータベースの以前の状態への復元が必要になる可能性が非常に高くなります。これは、システムのアップグレードが開始する前に、バックアップが実行され、フォールバックとしてインストールされている場合に実行できます。</target>
        </trans-unit>
        <trans-unit id="318a05f034b1325fb1731c6625436c4ea96c2dba" translate="yes" xml:space="preserve">
          <source>A family of options that selectively turn on/off warnings. (For help on the names of warnings, use &lt;code&gt;dialyzer -Whelp&lt;/code&gt;.) Notice that the options can also be specified in the file with a &lt;code&gt;-dialyzer()&lt;/code&gt; attribute. For details, see section &lt;code&gt;&lt;a href=&quot;#suppression&quot;&gt;Requesting or Suppressing Warnings in Source Files&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">警告を選択的にオン/オフにするオプションのファミリー。 （警告の名前のヘルプについては、 &lt;code&gt;dialyzer -Whelp&lt;/code&gt; を使用してください。）オプションは、ファイル内で &lt;code&gt;-dialyzer()&lt;/code&gt; 属性を使用して指定することもできます。詳細については、「 &lt;code&gt;&lt;a href=&quot;#suppression&quot;&gt;Requesting or Suppressing Warnings in Source Files&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f11118ca381dffc41f3188bffb0c43a4c650f1ba" translate="yes" xml:space="preserve">
          <source>A fast allocator used for some frequently used fixed size data types.</source>
          <target state="translated">頻繁に使用される固定サイズのデータ型に使用される高速アロケータです。</target>
        </trans-unit>
        <trans-unit id="3744509be8dd70aa593f301a9795a7c56c7a0de4" translate="yes" xml:space="preserve">
          <source>A faulty linked-in driver causes the entire Erlang runtime system to leak memory, hang, or crash.</source>
          <target state="translated">リンクインドライバに欠陥があると、Erlangランタイムシステム全体のメモリリーク、ハング、クラッシュを引き起こします。</target>
        </trans-unit>
        <trans-unit id="89cefbb8feb5d084db82b500bebe6a7d1dfbb558" translate="yes" xml:space="preserve">
          <source>A few applications, such as HiPE, do not support upgrade. This is indicated by an application upgrade file containing only &lt;code&gt;{Vsn,[],[]}&lt;/code&gt;. Any attempt at creating a release upgrade file with such input fails. The only way to force an upgrade involving applications like this is to handwrite the file &lt;code&gt;relup&lt;/code&gt;, preferably as described above with only the &lt;code&gt;restart_emulator&lt;/code&gt; instruction.</source>
          <target state="translated">HiPEなどの一部のアプリケーションは、アップグレードをサポートしていません。これは &lt;code&gt;{Vsn,[],[]}&lt;/code&gt; のみを含むアプリケーションアップグレードファイルによって示されます。このような入力でリリースアップグレードファイルを作成しようとすると失敗します。このようなアプリケーションを含むアップグレードを強制する唯一の方法は、ファイル &lt;code&gt;relup&lt;/code&gt; を手書きすることです。できれば、上記のように、 &lt;code&gt;restart_emulator&lt;/code&gt; 命令のみを使用して記述します。</target>
        </trans-unit>
        <trans-unit id="ff07fbc6aad7ee78f12be074f853b050b49851ab" translate="yes" xml:space="preserve">
          <source>A few basic match specifications are provided in the tool, and you can provide your own match specifications. The syntax of match specifications is described in the &lt;code&gt;ERTS User's Guide&lt;/code&gt;. To simplify the writing of a match specification, they can also be written as &lt;code&gt;fun/1&lt;/code&gt;. For details, see module &lt;code&gt;ms_transform&lt;/code&gt; in application STDLIB.</source>
          <target state="translated">ツールにはいくつかの基本的なマッチ仕様が用意されており、独自のマッチ仕様を提供できます。一致指定の構文については、「 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 説明しています。マッチ仕様の記述を簡単にするために、それらを &lt;code&gt;fun/1&lt;/code&gt; と書くこともできます。詳細については、アプリケーションSTDLIBのモジュール &lt;code&gt;ms_transform&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="09ac9a5c3fa6e165b6c50df51a6215981d75c01d" translate="yes" xml:space="preserve">
          <source>A few cases when it can be useful to change &lt;code&gt;fullsweep_after&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;fullsweep_after&lt;/code&gt; を変更すると便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="fd821a8e6f09efd8fb5370148d4ea4ec2ea95138" translate="yes" xml:space="preserve">
          <source>A few exceptions are documented for each property that behaves differently, and the special cases &lt;code&gt;{directory, {path(), PropertyList}}&lt;/code&gt; and &lt;code&gt;{security_directory, {Dir, PropertyList}}&lt;/code&gt;, are represented as:</source>
          <target state="translated">動作が異なるプロパティごとにいくつかの例外が文書化されており、特殊なケースである &lt;code&gt;{directory, {path(), PropertyList}}&lt;/code&gt; および &lt;code&gt;{security_directory, {Dir, PropertyList}}&lt;/code&gt; は次のように表されます。</target>
        </trans-unit>
        <trans-unit id="fce4084ca7f83d86aff3d0d9ecf63d0ad90bd23a" translate="yes" xml:space="preserve">
          <source>A few functions of this module (&lt;code&gt;&lt;a href=&quot;#drestriction-3&quot;&gt;drestriction/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#family_projection-2&quot;&gt;family_projection/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#partition-2&quot;&gt;partition/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#partition_family-2&quot;&gt;partition_family/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#projection-2&quot;&gt;projection/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#restriction-3&quot;&gt;restriction/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#substitution-2&quot;&gt;substitution/2&lt;/a&gt;&lt;/code&gt;) accept an Erlang function as a means to modify each element of a given unordered set. Such a function, called SetFun in the following, can be specified as a functional object (fun), a tuple &lt;code id=&quot;set_fun&quot;&gt;{external,&amp;nbsp;Fun}&lt;/code&gt;, or an integer:</source>
          <target state="translated">このモジュールのいくつかの関数（ &lt;code&gt;&lt;a href=&quot;#drestriction-3&quot;&gt;drestriction/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#family_projection-2&quot;&gt;family_projection/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#partition-2&quot;&gt;partition/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#partition_family-2&quot;&gt;partition_family/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#projection-2&quot;&gt;projection/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#restriction-3&quot;&gt;restriction/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#substitution-2&quot;&gt;substitution/2&lt;/a&gt;&lt;/code&gt; ）は、指定された順序なしの各要素を変更する手段としてErlang関数を受け入れますセットする。このような関数は、以下ではSetFunと呼ばれ、機能オブジェクト（fun）、タプル &lt;code id=&quot;set_fun&quot;&gt;{external,&amp;nbsp;Fun}&lt;/code&gt; 、または整数として指定できます。</target>
        </trans-unit>
        <trans-unit id="e2ace938c1e5c889a1c9155b08dfea0b539e2fd8" translate="yes" xml:space="preserve">
          <source>A few more ways of retrieving parts of the result set when the driver supports scrollable cursors. Note that next will work even without support for scrollable cursors.</source>
          <target state="translated">ドライバがスクロール可能なカーソルをサポートしている場合に、結果セットの一部を取得する方法をいくつか追加しました。next はスクロール可能なカーソルをサポートしていなくても動作することに注意してください。</target>
        </trans-unit>
        <trans-unit id="69178368f8f421dd7829a950db37217d05913e11" translate="yes" xml:space="preserve">
          <source>A file &lt;code&gt;test.config&lt;/code&gt; is created with the following contents:</source>
          <target state="translated">ファイル &lt;code&gt;test.config&lt;/code&gt; は、次の内容で作成されます。</target>
        </trans-unit>
        <trans-unit id="c8d336412b7f7b3198bf244f5e66fc7122fd82ab" translate="yes" xml:space="preserve">
          <source>A file can be included as follows:</source>
          <target state="translated">ファイルは以下のように含めることができます。</target>
        </trans-unit>
        <trans-unit id="cbeaf69644d74ca16d734d345aa0a129a3918826" translate="yes" xml:space="preserve">
          <source>A file can contain several &lt;code&gt;BEGIN/END&lt;/code&gt; blocks. Text lines between blocks are ignored. Attributes, if present, are ignored except for &lt;code&gt;Proc-Type&lt;/code&gt; and &lt;code&gt;DEK-Info&lt;/code&gt;, which are used when &lt;code&gt;DER&lt;/code&gt; data is encrypted.</source>
          <target state="translated">ファイルには、複数の &lt;code&gt;BEGIN/END&lt;/code&gt; ブロックを含めることができます。ブロック間のテキスト行は無視されます。 &lt;code&gt;DER&lt;/code&gt; データが暗号化されるときに使用される &lt;code&gt;Proc-Type&lt;/code&gt; および &lt;code&gt;DEK-Info&lt;/code&gt; を除いて、属性は存在しても無視されます。</target>
        </trans-unit>
        <trans-unit id="9565a924f37de4be5c2226f5018cb7da0db985af" translate="yes" xml:space="preserve">
          <source>A file can have an encoding option that makes it generally usable by the &lt;code&gt;io&lt;/code&gt; module (for example &lt;code&gt;{encoding,utf8}&lt;/code&gt;), but is by default opened as a byte-oriented file. The &lt;code&gt;file&lt;/code&gt; module is byte-oriented, so only ISO Latin-1 characters can be written using that module. Use the &lt;code&gt;io&lt;/code&gt; module if Unicode data is to be output to a file with other &lt;code&gt;encoding&lt;/code&gt; than &lt;code&gt;latin1&lt;/code&gt; (bytewise encoding). It is slightly confusing that a file opened with, for example, &lt;code&gt;file:open(Name,[read,{encoding,utf8}])&lt;/code&gt; cannot be properly read using &lt;code&gt;file:read(File,N)&lt;/code&gt;, but using the &lt;code&gt;io&lt;/code&gt; module to retrieve the Unicode data from it. The reason is that &lt;code&gt;file:read&lt;/code&gt; and &lt;code&gt;file:write&lt;/code&gt; (and friends) are purely byte-oriented, and should be, as that is the way to access files other than text files, byte by byte. As with ports, you can write encoded data into a file by &quot;manually&quot; converting the data to the encoding of choice (using the &lt;code&gt;unicode&lt;/code&gt; module or the bit syntax) and then output it on a bytewise (&lt;code&gt;latin1&lt;/code&gt;) encoded file.</source>
          <target state="translated">ファイルには、 &lt;code&gt;io&lt;/code&gt; モジュール（たとえば &lt;code&gt;{encoding,utf8}&lt;/code&gt; ）で一般的に使用できるようにするエンコードオプションを含めることができますが、デフォルトではバイト指向のファイルとして開かれます。 &lt;code&gt;file&lt;/code&gt; モジュールは、これだけのISO Latin-1文字は、そのモジュールを使用して書き込むことができ、バイト指向です。Unicodeデータを &lt;code&gt;latin1&lt;/code&gt; （バイト単位のエンコード）以外の &lt;code&gt;encoding&lt;/code&gt; でファイルに出力する場合は、 &lt;code&gt;io&lt;/code&gt; モジュールを使用します。たとえば、 &lt;code&gt;file:open(Name,[read,{encoding,utf8}])&lt;/code&gt; を &lt;code&gt;file:read(File,N)&lt;/code&gt; を使用して適切に読み取ることができないが、 &lt;code&gt;io&lt;/code&gt; モジュールを使用してそれからのUnicodeデータ。その理由は &lt;code&gt;file:read&lt;/code&gt; と &lt;code&gt;file:write&lt;/code&gt; （およびその仲間）は、純粋にバイト指向であり、テキストファイル以外のファイルにバイト単位でアクセスする方法であるためです。ポートと同様に、（手動で）データを選択したエンコーディングに（手動で）変換して（ &lt;code&gt;unicode&lt;/code&gt; モジュールまたはビット構文を使用して）ファイルにエンコードしたデータを書き込み、バイト単位（ &lt;code&gt;latin1&lt;/code&gt; ）でエンコードしたファイルに出力できます。</target>
        </trans-unit>
        <trans-unit id="4d89c7591289fd3005e1bbfce5efe617ceee10df" translate="yes" xml:space="preserve">
          <source>A file containing data related to a test and/or an SUT, for example, protocol server addresses, client login details, and hardware interface addresses. That is, any data that is to be handled as variable in the suite and not be hard-coded.</source>
          <target state="translated">テストおよび/または SUT に関連するデータ、例えば、プロトコルサーバアドレス、クライアントのログイン詳細、ハードウェアインタフェースアドレスなどを含むファイル。すなわち、スイート内で変数として扱われ、ハードコード化されていないデータ。</target>
        </trans-unit>
        <trans-unit id="616a73250d7af5692f557f0fc3d8f0aefbf16ef9" translate="yes" xml:space="preserve">
          <source>A file descriptor representing a file opened in &lt;code&gt;&lt;a href=&quot;#raw&quot;&gt;raw&lt;/a&gt;&lt;/code&gt; mode.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#raw&quot;&gt;raw&lt;/a&gt;&lt;/code&gt; モードで開かれたファイルを表すファイル記述子。</target>
        </trans-unit>
        <trans-unit id="2d71dcec01ab246a78607a17cbd7cd28847c46b5" translate="yes" xml:space="preserve">
          <source>A file or directory named &lt;code&gt;Dir&lt;/code&gt; exists already.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; という名前のファイルまたはディレクトリはすでに存在します。</target>
        </trans-unit>
        <trans-unit id="26be688763e641b3a9dfad11fde8db2842f3801c" translate="yes" xml:space="preserve">
          <source>A filename.</source>
          <target state="translated">ファイル名です。</target>
        </trans-unit>
        <trans-unit id="7e18ad0e74d1cf4a7f98aab6228b1e84c7680443" translate="yes" xml:space="preserve">
          <source>A filter is defined as:</source>
          <target state="translated">フィルタは次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="8e5fa771ebe9bef523c8171150923d10ee3e8517" translate="yes" xml:space="preserve">
          <source>A filter which can be installed as a handler filter, or as a primary filter in Logger.</source>
          <target state="translated">ハンドラフィルタとして、または Logger のプライマリフィルタとしてインストールできるフィルタ。</target>
        </trans-unit>
        <trans-unit id="1e3cb0a88c21fc9cb93d8900a90dbffadc95b7ff" translate="yes" xml:space="preserve">
          <source>A filter_fun() takes an event record as sole argument and returns false | true | {true, NewEvent}.</source>
          <target state="translated">filter_fun()は、イベントレコードを唯一の引数として取り、false | true | {true,NewEvent}を返します。</target>
        </trans-unit>
        <trans-unit id="520861380e77fff7b333b5642ccc63edc6c4108c" translate="yes" xml:space="preserve">
          <source>A final massage of the environment is needed, and that is done by the script &lt;code&gt;$ERL_TOP/otp_build&lt;/code&gt;. Start bash and do the following, note the &quot;back-ticks&quot; (`), can be quite hard to get on some keyboards, but pressing the back-tick key followed by the space bar might do it...</source>
          <target state="translated">環境の最後のマッサージが必要であり、それはスクリプト &lt;code&gt;$ERL_TOP/otp_build&lt;/code&gt; によって行われます。bashを起動して以下を実行します。「バックティック」（ `）に注意してください。一部のキーボードでは取得が非常に難しい場合がありますが、バックティックキーに続いてスペースバーを押すと、実行できる場合があります...</target>
        </trans-unit>
        <trans-unit id="e35c8682121639afeec1d7b7f4a3b650f9012c9b" translate="yes" xml:space="preserve">
          <source>A finite float (i.e. not inf, -inf or NaN) is stored as 8 bytes in big-endian IEEE format.</source>
          <target state="translated">有限浮動小数点(すなわち、inf、-inf、NaNではない)は、ビッグエンディアンのIEEEフォーマットで8バイトとして格納されます。</target>
        </trans-unit>
        <trans-unit id="c2994169c9b8ab927ca18977cded54d13c5a779a" translate="yes" xml:space="preserve">
          <source>A finite float (i.e. not inf, -inf or NaN) is stored in string format. The format used in sprintf to format the float is &quot;%.20e&quot; (there are more bytes allocated than necessary). To unpack the float, use sscanf with format &quot;%lf&quot;.</source>
          <target state="translated">有限のフロート(すなわち、inf、-inf、NaNではない)は、文字列形式で格納されます。sprintf で float をフォーマットするために使用されるフォーマットは &quot;%.20e&quot; です (必要以上に多くのバイトが割り当てられています)。float を展開するには、フォーマット &quot;%lf&quot; で sscanf を使用します。</target>
        </trans-unit>
        <trans-unit id="90f744119c16fd9fb8932446ccb5476df4faf187" translate="yes" xml:space="preserve">
          <source>A fixed number of characters is requested using the following &lt;code&gt;Request&lt;/code&gt;:</source>
          <target state="translated">次の &lt;code&gt;Request&lt;/code&gt; を使用して、固定数の文字をリクエストします。</target>
        </trans-unit>
        <trans-unit id="0a7d5da9ebedb8e232edc49649003f18ee79c791" translate="yes" xml:space="preserve">
          <source>A fixed-size array does not grow automatically and does not allow accesses beyond the last set entry:</source>
          <target state="translated">固定サイズの配列は自動的には成長せず、最後に設定されたエントリを超えてアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="3bad05ad914ca3ed5e8df973848616692506d53e" translate="yes" xml:space="preserve">
          <source>A flag starting with a plus (&lt;code&gt;+&lt;/code&gt;) rather than a hyphen is converted to an Erlang term and passed unchanged to the compiler. For example, option &lt;code&gt;export_all&lt;/code&gt; for the Erlang compiler can be specified as follows:</source>
          <target state="translated">ハイフンではなくプラス（ &lt;code&gt;+&lt;/code&gt; ）で始まるフラグは、Erlang用語に変換され、変更されずにコンパイラーに渡されます。たとえば、Erlangコンパイラのオプション &lt;code&gt;export_all&lt;/code&gt; は、次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="10b632ad7a686b2d7a96c3959bf12e04c0566f52" translate="yes" xml:space="preserve">
          <source>A float is stored as 8 bytes in big-endian IEEE format.</source>
          <target state="translated">フロートは8バイトのビッグエンディアンIEEEフォーマットで格納されます。</target>
        </trans-unit>
        <trans-unit id="e9e5201aedcab16b3adecdda5a3e12ff8098d3d7" translate="yes" xml:space="preserve">
          <source>A float is stored in string format. The format used in sprintf to format the float is &quot;%.20e&quot; (there are more bytes allocated than necessary). To unpack the float, use sscanf with format &quot;%lf&quot;.</source>
          <target state="translated">float は文字列形式で格納されます。sprintf で float のフォーマットに使用されるフォーマットは &quot;%.20e&quot; です (必要以上に多くのバイトが割り当てられています)。float を展開するには、フォーマット &quot;%lf&quot; で sscanf を使用します。</target>
        </trans-unit>
        <trans-unit id="a6f6fcdac9b179d5523fd1d6e88e1a598a905d83" translate="yes" xml:space="preserve">
          <source>A floating point number is expected. It must follow the Erlang floating point number syntax.</source>
          <target state="translated">浮動小数点数が期待されます。これはErlangの浮動小数点数の構文に従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="b4d0580dc8d2afb0f4c6adffa439752a5472ac02" translate="yes" xml:space="preserve">
          <source>A format handler is a fun taking four arguments. This fun is called for each trace message in the binary log(s). A simple example that only prints each trace message can be as follows:</source>
          <target state="translated">フォーマットハンドラは、4 つの引数を取る fun です。この fun は、バイナリログの各トレースメッセージに対して呼び出されます。各トレースメッセージのみを表示する単純な例は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="369a51d598bab08c351b7c52ce5dd88ed39b8435" translate="yes" xml:space="preserve">
          <source>A formatter can be used by the handler implementation to do the final formatting of a log event, before printing to the handler's destination. The handler callback receives the formatter information as part of the handler configuration, which is passed as the second argument to &lt;code&gt;&lt;a href=&quot;logger#HModule:log-2&quot;&gt; HModule:log/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハンドラーの実装では、ハンドラーの宛先に出力する前に、ログイベントの最終的なフォーマットを行うためにフォーマッターを使用できます。ハンドラーコールバックは、ハンドラー構成の一部としてフォーマッター情報を受け取ります。この情報は、2番目の引数として &lt;code&gt;&lt;a href=&quot;logger#HModule:log-2&quot;&gt; HModule:log/2&lt;/a&gt;&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="685c2f489be151735ae38f24a353d5faae37fc17" translate="yes" xml:space="preserve">
          <source>A formatter can be used by the handler implementation to do the final formatting of a log event, before printing to the handler's destination. The handler callback receives the formatter information as part of the handler configuration, which is passed as the second argument to &lt;code&gt;&lt;a href=&quot;logger#HModule:log-2&quot;&gt;HModule:log/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハンドラーの宛先に出力する前に、ハンドラー実装でフォーマッターを使用して、ログイベントの最終的なフォーマットを行うことができます。ハンドラーコールバックは、ハンドラー構成の一部としてフォーマッター情報を受け取ります。これは、2番目の引数として &lt;code&gt;&lt;a href=&quot;logger#HModule:log-2&quot;&gt;HModule:log/2&lt;/a&gt;&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="5ddabb55af8280ef44d4873b2fe6f87c2ff0d592" translate="yes" xml:space="preserve">
          <source>A framework for automated testing of any target nodes.</source>
          <target state="translated">任意のターゲットノードの自動テストのためのフレームワーク。</target>
        </trans-unit>
        <trans-unit id="aee4c7374225cff97b384f5e8f0444105623df6f" translate="yes" xml:space="preserve">
          <source>A fun created by &lt;code&gt;fun M:F/A&lt;/code&gt; is called an &lt;strong&gt;external&lt;/strong&gt; fun. Calling it will always call the function &lt;code&gt;F&lt;/code&gt; with arity &lt;code&gt;A&lt;/code&gt; in the latest code for module &lt;code&gt;M&lt;/code&gt;. Notice that module &lt;code&gt;M&lt;/code&gt; does not even need to be loaded when the fun &lt;code&gt;fun M:F/A&lt;/code&gt; is created.</source>
          <target state="translated">&lt;code&gt;fun M:F/A&lt;/code&gt; によって作成されたファンは、&lt;strong&gt;外部&lt;/strong&gt;ファンと呼ばれます。これを呼び出すと、常にモジュール &lt;code&gt;M&lt;/code&gt; の最新コードでアリティ &lt;code&gt;A&lt;/code&gt; を使用して関数 &lt;code&gt;F&lt;/code&gt; が呼び出されます。 &lt;code&gt;fun M:F/A&lt;/code&gt; を作成するときに、モジュール &lt;code&gt;M&lt;/code&gt; をロードする必要さえないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe82f35844a581a23e9acd45f2d705a836415f6f" translate="yes" xml:space="preserve">
          <source>A fun expression begins with the keyword &lt;code&gt;fun&lt;/code&gt; and ends with the keyword &lt;code&gt;end&lt;/code&gt;. Between them is to be a function declaration, similar to a &lt;code&gt;&lt;a href=&quot;functions#syntax&quot;&gt;regular function declaration&lt;/a&gt;&lt;/code&gt;, except that the function name is optional and is to be a variable, if any.</source>
          <target state="translated">fun式は、キーワード &lt;code&gt;fun&lt;/code&gt; で始まり、キーワード &lt;code&gt;end&lt;/code&gt; で終わります。それらの間には、関数名がオプションであり、変数（ある場合）であることを除いて、 &lt;code&gt;&lt;a href=&quot;functions#syntax&quot;&gt;regular function declaration&lt;/a&gt;&lt;/code&gt; と同様に、関数宣言になります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
