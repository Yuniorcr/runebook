<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="7ba69074df191132a5aee72b7de68af231ccb23b" translate="yes" xml:space="preserve">
          <source>A fun is a functional object. Funs make it possible to create an anonymous function and pass the function itself -- not its name -- as argument to other functions.</source>
          <target state="translated">funは関数オブジェクトです。funを使うと、匿名の関数を作成して、関数名ではなく関数自体を他の関数の引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a83e179e2a0b967f058ad516cb4229a827e95fd9" translate="yes" xml:space="preserve">
          <source>A fun is applied to the wrong number of arguments. &lt;code&gt;F&lt;/code&gt; describes the fun and the arguments.</source>
          <target state="translated">funは間違った数の引数に適用されます。 &lt;code&gt;F&lt;/code&gt; は、楽しさと議論について説明しています。</target>
        </trans-unit>
        <trans-unit id="331ce727ff0b82a2baa3eca467f7f047acb2688e" translate="yes" xml:space="preserve">
          <source>A fun refers into a fun table, which also consumes memory.</source>
          <target state="translated">ファンはファンテーブルを指し、それはまた、メモリを消費します。</target>
        </trans-unit>
        <trans-unit id="4fc6c3b004a9c28596e264b75abedbe106e6b063" translate="yes" xml:space="preserve">
          <source>A fun that takes the socket info and returns a &lt;code&gt;boolean()&lt;/code&gt; (&lt;code&gt;true&lt;/code&gt; if the socket sould be included and &lt;code&gt;false&lt;/code&gt; if should not).</source>
          <target state="translated">ソケット情報を取得して &lt;code&gt;boolean()&lt;/code&gt; を返す楽しみ（ソケットを含める必要が &lt;code&gt;true&lt;/code&gt; 場合はtrue、含めない場合は &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c25c37b8117f77137d7a7610d86f37adc3dd7d32" translate="yes" xml:space="preserve">
          <source>A fun which converts a &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report() &lt;/a&gt;&lt;/code&gt; to a format string and arguments, or directly to a string. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the User's Guide for more information.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report() &lt;/a&gt;&lt;/code&gt; をフォーマット文字列と引数に、または直接文字列に変換する楽しみ。詳細については、ユーザーズガイドの「 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="917f02c1a076a8a47ebb3722785173da993cb101" translate="yes" xml:space="preserve">
          <source>A fun with the following signature:</source>
          <target state="translated">以下のようなサインのあるお楽しみ。</target>
        </trans-unit>
        <trans-unit id="9c0db4550739af00d32b0dfa12f09adabde22929" translate="yes" xml:space="preserve">
          <source>A function (&lt;code&gt;fun/0&lt;/code&gt; or &lt;code&gt;{Mod,Func,Args}&lt;/code&gt; (MFA) tuple) can be specified as timetrap value in the suite-, group- and test case information function, and as argument to function &lt;code&gt;&lt;a href=&quot;ct#timetrap-1&quot;&gt;ct:timetrap/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数（ &lt;code&gt;fun/0&lt;/code&gt; または &lt;code&gt;{Mod,Func,Args}&lt;/code&gt; （MFA）タプル）は、スイート、グループ、およびテストケース情報関数のタイムトラップ値として、および関数 &lt;code&gt;&lt;a href=&quot;ct#timetrap-1&quot;&gt;ct:timetrap/1&lt;/a&gt;&lt;/code&gt; の引数として指定できます。</target>
        </trans-unit>
        <trans-unit id="07a3cf7ceca0e362fe2af257283edf78084fc160" translate="yes" xml:space="preserve">
          <source>A function breakpoint is a set of line breakpoints, one at the first line of each clause in the specified function.</source>
          <target state="translated">関数のブレークポイントとは、指定された関数の各節の最初の行に1つずつある行のブレークポイントの集合です。</target>
        </trans-unit>
        <trans-unit id="5f0fd871bd70c7514030529afb1f484443906fd8" translate="yes" xml:space="preserve">
          <source>A function can have many arguments. Let us expand the module &lt;code&gt;tut1&lt;/code&gt; with the function to multiply two numbers:</source>
          <target state="translated">関数は多くの引数を持つことができます。2つの数値を乗算する関数でモジュール &lt;code&gt;tut1&lt;/code&gt; を拡張してみましょう。</target>
        </trans-unit>
        <trans-unit id="fede52edfc71f21c837f79f6a8e9fb78f0248b2b" translate="yes" xml:space="preserve">
          <source>A function compliant with these functions. For details, see the &lt;code&gt;supervisor(3)&lt;/code&gt; manual page.</source>
          <target state="translated">これらの機能に準拠した機能。詳細については、 &lt;code&gt;supervisor(3)&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="26f617733f33e20e330ebc8aa6d33e7c36f5c2a1" translate="yes" xml:space="preserve">
          <source>A function constraint Fc is a non-empty sequence of constraints &lt;code&gt;C_1, ..., C_k&lt;/code&gt;, and Rep(Fc) = &lt;code&gt;[Rep(C_1), ..., Rep(C_k)]&lt;/code&gt;.</source>
          <target state="translated">関数制約Fcは、空でない一連の制約 &lt;code&gt;C_1, ..., C_k&lt;/code&gt; であり、Rep（Fc）= &lt;code&gt;[Rep(C_1), ..., Rep(C_k)]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2dfcd76722f3584d620315b3cb799ba807ca502f" translate="yes" xml:space="preserve">
          <source>A function for an exclusive decode, whose name the user decides in the configuration file</source>
          <target state="translated">排他的なデコードのための関数で、その名前は設定ファイルでユーザーが決定します。</target>
        </trans-unit>
        <trans-unit id="be3487c9bce760681de79e5934bed4a4861cc982" translate="yes" xml:space="preserve">
          <source>A function in a test suite that is meant to be used for setting up, cleaning up, and/or verifying the state and environment on the System Under Test (SUT) and/or the &lt;code&gt;Common Test&lt;/code&gt; host node, so that a test case (or a set of test cases) can execute correctly.</source>
          <target state="translated">テスト対象システム（SUT）および/または &lt;code&gt;Common Test&lt;/code&gt; ホストノードの状態と環境を設定、クリーンアップ、および/または検証するために使用されることを意図したテストスイートの関数。これにより、テストケース（または一連のテストケース）を正しく実行できます。</target>
        </trans-unit>
        <trans-unit id="8a453d0634dfbb426f81f44cc7d5fb202b518059" translate="yes" xml:space="preserve">
          <source>A function in a test suite that returns a list of properties (read by the &lt;code&gt;Common Test&lt;/code&gt; server) that describes the conditions for executing the test cases in the suite.</source>
          <target state="translated">スイートでテストケースを実行するための条件を記述するプロパティのリスト（ &lt;code&gt;Common Test&lt;/code&gt; サーバーによって読み取られる）を返すテストスイートの関数。</target>
        </trans-unit>
        <trans-unit id="bee93e2fd141ac952df7640f626d3d10f1e92fbd" translate="yes" xml:space="preserve">
          <source>A function in the &lt;code&gt;proc_lib&lt;/code&gt; module is to be used to start the process. Several functions are available, for example, &lt;code&gt;spawn_link/3,4&lt;/code&gt; for asynchronous start and &lt;code&gt;start_link/3,4,5&lt;/code&gt; for synchronous start.</source>
          <target state="translated">&lt;code&gt;proc_lib&lt;/code&gt; モジュールの関数は、プロセスを開始するために使用されます。非同期開始の &lt;code&gt;spawn_link/3,4&lt;/code&gt; や同期開始の &lt;code&gt;start_link/3,4,5&lt;/code&gt; など、いくつかの関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="1ea8125453a1f5033d8778318612575164d3d3ce" translate="yes" xml:space="preserve">
          <source>A function is called using the &lt;code&gt;M:F&lt;/code&gt; syntax, where &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;F&lt;/code&gt; are atoms or expressions.</source>
          <target state="translated">関数は &lt;code&gt;M:F&lt;/code&gt; 構文を使用して呼び出されます。ここで、 &lt;code&gt;M&lt;/code&gt; と &lt;code&gt;F&lt;/code&gt; はアトムまたは式です。</target>
        </trans-unit>
        <trans-unit id="f874e0a252012bc547a3211dd48e03d0c6554317" translate="yes" xml:space="preserve">
          <source>A function named &lt;code&gt;f&lt;/code&gt; in the module &lt;code&gt;m&lt;/code&gt; and with arity &lt;code&gt;N&lt;/code&gt; is often denoted as &lt;code&gt;m:f/N&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;m&lt;/code&gt; 内の &lt;code&gt;f&lt;/code&gt; という名前の関数とアリティ &lt;code&gt;N&lt;/code&gt; は、しばしば &lt;code&gt;m:f/N&lt;/code&gt; と表されます。</target>
        </trans-unit>
        <trans-unit id="74e2076ece482295f13f43d68037c1f2992b8f9a" translate="yes" xml:space="preserve">
          <source>A function not explicitly documented as thread-safe can, at some point in time, have a thread-safe implementation in the runtime system. Such an implementation can however change to a thread &lt;strong&gt;unsafe&lt;/strong&gt; implementation at any time &lt;strong&gt;without any notice&lt;/strong&gt;.</source>
          <target state="translated">スレッドセーフとして明示的に文書化されていない関数は、ある時点で、ランタイムシステムにスレッドセーフな実装を持つことができます。ただし、そのよう&lt;strong&gt;な&lt;/strong&gt;実装は、いつ&lt;strong&gt;でも予告なしに&lt;/strong&gt;スレッド&lt;strong&gt;セーフでない&lt;/strong&gt;実装に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ad55a8c4f2fdc2e2ad52ed3c0264567f558d6c9a" translate="yes" xml:space="preserve">
          <source>A function of one argument can be specified as output. The results of sorting or merging the input is collected in a non-empty sequence of variable length lists of binaries or terms depending on the format. The output function is called with one list at a time, and is assumed to return a new output function. Any other return value is immediately returned as value of the current call to the sort or merge function. Each output function is called exactly once. When some output function has been applied to all of the results or an error occurs, the last function is called with argument &lt;code&gt;close&lt;/code&gt;, and the reply is returned as value of the current call to the sort or merge function.</source>
          <target state="translated">1つの引数の関数を出力として指定できます。入力のソートまたはマージの結果は、フォーマットに応じて、バイナリまたは用語の可変長リストの空でないシーケンスで収集されます。出力関数は一度に1つのリストで呼び出され、新しい出力関数を返すと想定されます。その他の戻り値は、ソートまたはマージ関数の現在の呼び出しの値としてすぐに返されます。各出力関数は1回だけ呼び出されます。一部の出力関数がすべての結果に適用された場合、またはエラーが発生した場合、最後の関数が引数 &lt;code&gt;close&lt;/code&gt; で呼び出され、応答はソートまたはマージ関数への現在の呼び出しの値として返されます。</target>
        </trans-unit>
        <trans-unit id="59fe57d80e3ef9db4ebd49c663824a7be50c8252" translate="yes" xml:space="preserve">
          <source>A function specification can be overloaded. That is, it can have several types, separated by a semicolon (&lt;code&gt;;&lt;/code&gt;):</source>
          <target state="translated">関数仕様はオーバーロードできます。つまり、セミコロン（ &lt;code&gt;;&lt;/code&gt; ）で区切られたいくつかのタイプを持つことができます。</target>
        </trans-unit>
        <trans-unit id="fa95908fabb759c7e5694e79bc74d7fa4cb9cab8" translate="yes" xml:space="preserve">
          <source>A function that adds a family to the database can be written as follows if there is a structure &lt;code&gt;{family, Father, Mother, ChildrenList}&lt;/code&gt;:</source>
          <target state="translated">データベースにファミリーを追加する関数は、構造 &lt;code&gt;{family, Father, Mother, ChildrenList}&lt;/code&gt; がある場合、次のように記述できます。</target>
        </trans-unit>
        <trans-unit id="cd3a3a3eaa7687c88a4600f70861728b853757b4" translate="yes" xml:space="preserve">
          <source>A function that is intended to be traced.</source>
          <target state="translated">トレースされることを目的とした関数。</target>
        </trans-unit>
        <trans-unit id="84f14d74551f2c944f4c5fc40a31a1120c5642d9" translate="yes" xml:space="preserve">
          <source>A function type Ft is one of the following:</source>
          <target state="translated">関数型Ftは、以下のいずれかである。</target>
        </trans-unit>
        <trans-unit id="f2ed1d7e05b7d9f3e384891d361b5e9e23e3a041" translate="yes" xml:space="preserve">
          <source>A function which has been called with &lt;code&gt;is_set_ok&lt;/code&gt; will be called again, either with &lt;code&gt;set&lt;/code&gt; if there was no error, or with &lt;code&gt;undo&lt;/code&gt;, if an error occurred. In this way, resources can be reserved in the &lt;code&gt;is_set_ok&lt;/code&gt; operation, released in the &lt;code&gt;undo&lt;/code&gt; operation, or made permanent in the &lt;code&gt;set&lt;/code&gt; operation.</source>
          <target state="translated">&lt;code&gt;is_set_ok&lt;/code&gt; で呼び出された関数は、エラーがなかった場合は &lt;code&gt;set&lt;/code&gt; で、エラーが発生した場合は &lt;code&gt;undo&lt;/code&gt; で再び呼び出されます。このように、リソースは予約ができ &lt;code&gt;is_set_ok&lt;/code&gt; にリリースされ、操作 &lt;code&gt;undo&lt;/code&gt; 操作、または永久作ら &lt;code&gt;set&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="bd8be8e88421b65c5785dda3b74a299c4437c971" translate="yes" xml:space="preserve">
          <source>A function with a name ending in &lt;code&gt;..._test()&lt;/code&gt; is recognized by EUnit as a simple test function - it takes no arguments, and its execution either succeeds (returning some arbitrary value that EUnit will throw away), or fails by throwing an exception of some kind (or by not terminating, in which case it will be aborted after a while).</source>
          <target state="translated">名前が &lt;code&gt;..._test()&lt;/code&gt; で終わる関数は、EUnitによって単純なテスト関数として認識されます-引数を取らず、その実行は成功する（EUnitが破棄する任意の値を返す）か、ある種の例外（または終了しない場合、しばらくすると中止されます）。</target>
        </trans-unit>
        <trans-unit id="6cb5bb4750e96bdf1cb4a018b0ae8f0c42348f8c" translate="yes" xml:space="preserve">
          <source>A function with a name ending in &lt;code&gt;..._test_()&lt;/code&gt; (note the final underscore) is recognized by EUnit as a &lt;strong&gt;test generator&lt;/strong&gt; function. Test generators return a &lt;strong&gt;representation&lt;/strong&gt; of a &lt;strong&gt;set of tests&lt;/strong&gt; to be executed by EUnit.</source>
          <target state="translated">名前が &lt;code&gt;..._test_()&lt;/code&gt; で終わる関数（最後のアンダースコアに注意）は、EUnitによって&lt;strong&gt;テストジェネレーター&lt;/strong&gt;関数として認識されます。テストジェネレーターは、EUnitによって実行される&lt;strong&gt;一連のテストの&lt;/strong&gt;&lt;strong&gt;表現&lt;/strong&gt;を返します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1a48507b735622ceff0ef19da321ab8f330d7565" translate="yes" xml:space="preserve">
          <source>A functional interface to system messages.</source>
          <target state="translated">システムメッセージへの機能的なインターフェース。</target>
        </trans-unit>
        <trans-unit id="5718538818085276e24476684d081fe2c16ac1e8" translate="yes" xml:space="preserve">
          <source>A functional object (fun) is called.</source>
          <target state="translated">機能的なオブジェクト(fun)を呼びます。</target>
        </trans-unit>
        <trans-unit id="a77ae01d0047b90d93e3127e8ab05f3c2f271265" translate="yes" xml:space="preserve">
          <source>A functional, extendible array. The representation is not documented and is subject to change without notice. Notice that arrays cannot be directly compared for equality.</source>
          <target state="translated">機能的で拡張可能な配列。表現は文書化されておらず,予告なく変更されることがあります.配列を直接比較して等質性を求めることはできないことに注意してください.</target>
        </trans-unit>
        <trans-unit id="e1e00f7b7a96013a7ac2150829df3b65546f70ca" translate="yes" xml:space="preserve">
          <source>A general address format on the form &lt;code&gt;{Family, Destination}&lt;/code&gt; where &lt;code&gt;Family&lt;/code&gt; is an atom such as &lt;code&gt;local&lt;/code&gt; and the format of &lt;code&gt;Destination&lt;/code&gt; depends on &lt;code&gt;Family&lt;/code&gt;, and is a complete address (for example an IP address including port number).</source>
          <target state="translated">フォーム上の一般的なアドレス形式 &lt;code&gt;{Family, Destination}&lt;/code&gt; &lt;code&gt;Family&lt;/code&gt; などの原子であり &lt;code&gt;local&lt;/code&gt; の形式 &lt;code&gt;Destination&lt;/code&gt; に依存 &lt;code&gt;Family&lt;/code&gt; 、および完全なアドレス（ポート番号を含む、例えば、IPアドレス）です。</target>
        </trans-unit>
        <trans-unit id="54ada27e365cb4a22611cb6a9989b7fa6327cde2" translate="yes" xml:space="preserve">
          <source>A general balanced set iterator.</source>
          <target state="translated">一般的なバランス集合イテレータ。</target>
        </trans-unit>
        <trans-unit id="abd2d7ccb70af9192a88e9078363ed031f3357e6" translate="yes" xml:space="preserve">
          <source>A general balanced set.</source>
          <target state="translated">一般的なバランスのとれたセットです。</target>
        </trans-unit>
        <trans-unit id="8cf5f3092481aa2537de6a0b5a55a3c05a0431e5" translate="yes" xml:space="preserve">
          <source>A general balanced tree iterator.</source>
          <target state="translated">一般的なバランスツリーイテレータ。</target>
        </trans-unit>
        <trans-unit id="9983fa582405ead1dae547bcbe84a7f86c9c2c6a" translate="yes" xml:space="preserve">
          <source>A general balanced tree.</source>
          <target state="translated">一般的なバランスのとれた木。</target>
        </trans-unit>
        <trans-unit id="ef9ed8ddc12844f0870bb4f089487a9445710baf" translate="yes" xml:space="preserve">
          <source>A general function for creating Erlang terms using a format specifier and a corresponding set of arguments, much in the way &lt;code&gt;printf()&lt;/code&gt; works.</source>
          <target state="translated">書式指定子と対応する引数のセットを使用してErlang用語を作成するための一般的な関数で、 &lt;code&gt;printf()&lt;/code&gt; の動作とほぼ同じです。</target>
        </trans-unit>
        <trans-unit id="2e207a92b9beca5dbcb01f63b66742b4b78e66b3" translate="yes" xml:space="preserve">
          <source>A general function for retrieving any kind of object from the registry.</source>
          <target state="translated">レジストリから任意の種類のオブジェクトを取得するための一般的な関数です。</target>
        </trans-unit>
        <trans-unit id="59cb7a53195dd959efa385b2b1d8e6b04a5e665a" translate="yes" xml:space="preserve">
          <source>A generated error is when the code itself calls &lt;code&gt;exit/1&lt;/code&gt; or &lt;code&gt;throw/1&lt;/code&gt;. Notice that emulated run-time errors are not denoted as generated errors here.</source>
          <target state="translated">生成されたエラーは、コード自体が &lt;code&gt;exit/1&lt;/code&gt; または &lt;code&gt;throw/1&lt;/code&gt; を呼び出す場合です。ここでは、エミュレートされたランタイムエラーは、生成されたエラーとして示されていません。</target>
        </trans-unit>
        <trans-unit id="8faf45d14b7e5fe4683d094888fbeeed4fc63af0" translate="yes" xml:space="preserve">
          <source>A generic pretty printer library.</source>
          <target state="translated">汎用的な可愛いプリンタライブラリ。</target>
        </trans-unit>
        <trans-unit id="96309c20b89273ad4e96e038b104fd007caed27f" translate="yes" xml:space="preserve">
          <source>A generic pretty printer library. This module uses a strict-style context passing implementation of John Hughes algorithm, described in &quot;The design of a Pretty-printing Library&quot;. The paragraph-style formatting, empty documents, floating documents, and null strings are my own additions to the algorithm.</source>
          <target state="translated">汎用的なプリティープリンティングライブラリです。このモジュールは、&quot;The design of a Pretty-printing Library&quot; で説明した John Hughes アルゴリズムの厳格なスタイルのコンテキストパッシング実装を使用しています。段落形式の書式設定、空文書、浮動文書、ヌル文字列は、私自身がアルゴリズムに追加したものです。</target>
        </trans-unit>
        <trans-unit id="ac6a4400b941cc8bdd539f01f5213eda72cb86dc" translate="yes" xml:space="preserve">
          <source>A generic single object compare-and-swap operation:</source>
          <target state="translated">汎用的な単一オブジェクトの比較・スワップ操作。</target>
        </trans-unit>
        <trans-unit id="3f766bd2ae406c1622999afa0312a1512bd99928" translate="yes" xml:space="preserve">
          <source>A generic state machine process (&lt;code&gt;gen_statem&lt;/code&gt;) implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">このモジュールを使用して実装された一般的なステートマシンプロセス（ &lt;code&gt;gen_statem&lt;/code&gt; ）には、標準のインターフェイス関数セットがあり、トレースとエラー報告のための機能が含まれています。また、OTP監視ツリーにも適合します。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="17deb413c89fd01affc6582636308eea7c33a228" translate="yes" xml:space="preserve">
          <source>A generic state machine server process (&lt;code&gt;gen_statem&lt;/code&gt;) implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">このモジュールを使用して実装された汎用ステートマシンサーバープロセス（ &lt;code&gt;gen_statem&lt;/code&gt; ）には、インターフェイス関数の標準セットがあり、トレースとエラーレポートの機能が含まれています。また、OTP監視ツリーにも適合します。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="a97b266d23ce2fe3a69cfab0ece23a4c06694585" translate="yes" xml:space="preserve">
          <source>A global group defined with &lt;code&gt;PublishType&lt;/code&gt; equal to &lt;code&gt;hidden&lt;/code&gt; is said to be a hidden global group. All nodes in a hidden global group are hidden nodes, whether they are started with command-line flag &lt;code&gt;-hidden&lt;/code&gt; or not.</source>
          <target state="translated">&lt;code&gt;hidden&lt;/code&gt; 等しい &lt;code&gt;PublishType&lt;/code&gt; で定義されたグローバルグループは、非表示のグローバルグループと呼ばれます。非表示のグローバルグループ内のすべてのノードは、コマンドラインフラグ &lt;code&gt;-hidden&lt;/code&gt; で開始されているかどうかにかかわらず、非表示のノードです。</target>
        </trans-unit>
        <trans-unit id="be16c14a618ebfab9ed6b6a24231e3d1ce85555b" translate="yes" xml:space="preserve">
          <source>A global name registration facility.</source>
          <target state="translated">グローバルネーム登録施設。</target>
        </trans-unit>
        <trans-unit id="5ca996b1105de3e2c7c27a0f7cfb576400f98429" translate="yes" xml:space="preserve">
          <source>A global trace flag for the Erlang node that makes all trace time stamps using flag &lt;code&gt;timestamp&lt;/code&gt; to be in CPU time, not wall clock time. That is, &lt;code&gt;cpu_timestamp&lt;/code&gt; is not be used if &lt;code&gt;monotonic_timestamp&lt;/code&gt; or &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt; is enabled. Only allowed with &lt;code&gt;PidPortSpec==all&lt;/code&gt;. If the host machine OS does not support high-resolution CPU time measurements, &lt;code&gt;trace/3&lt;/code&gt; exits with &lt;code&gt;badarg&lt;/code&gt;. Notice that most OS do not synchronize this value across cores, so be prepared that time can seem to go backwards when using this option.</source>
          <target state="translated">フラグ &lt;code&gt;timestamp&lt;/code&gt; を使用してすべてのトレースタイムスタンプを実時間ではなくCPU時間にするErlangノードのグローバルトレースフラグ。つまり、 &lt;code&gt;monotonic_timestamp&lt;/code&gt; または &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt; が有効な場合、 &lt;code&gt;cpu_timestamp&lt;/code&gt; は使用されません。 &lt;code&gt;PidPortSpec==all&lt;/code&gt; のみ許可されます。ホストマシンのOSが高解像度のCPU時間測定をサポートしていない場合、 &lt;code&gt;trace/3&lt;/code&gt; は &lt;code&gt;badarg&lt;/code&gt; で終了します。ほとんどのOSはこの値をコア間で同期しないことに注意してください。そのため、このオプションを使用すると、時間が逆戻りする可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a35f6209ff3e97a1fbff24a3ba0f5b7de01c5979" translate="yes" xml:space="preserve">
          <source>A good book explaining those reference texts is Dubuisson: ASN.1 - Communication Between Heterogeneous Systems, is free to download at &lt;code&gt;&lt;a href=&quot;http://www.oss.com/asn1/dubuisson.html&quot;&gt;http://www.oss.com/asn1/dubuisson.html&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの参照テキストを説明する優れた本はDubuisson：ASN.1-Communication Between Heterogeneous Systemsであり、 &lt;code&gt;&lt;a href=&quot;http://www.oss.com/asn1/dubuisson.html&quot;&gt;http://www.oss.com/asn1/dubuisson.html&lt;/a&gt;&lt;/code&gt; ://www.oss.com/asn1/dubuisson.htmlから無料でダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="5cb427e2a68f8e5f95a66a1dfb82ade3b982ce6f" translate="yes" xml:space="preserve">
          <source>A good start when programming efficiently is to know how much memory different data types and operations require. It is implementation-dependent how much memory the Erlang data types and other items consume, but the following table shows some figures for the &lt;code&gt;erts-8.0&lt;/code&gt; system in OTP 19.0.</source>
          <target state="translated">効率的にプログラミングするための良いスタートは、さまざまなデータ型と操作に必要なメモリの量を知ることです。Erlangのデータ型やその他のアイテムが消費するメモリの量は実装に依存しますが、次の表はOTP 19.0の &lt;code&gt;erts-8.0&lt;/code&gt; システムのいくつかの図を示しています。</target>
        </trans-unit>
        <trans-unit id="104d4b7a2a11dda4f50138a2b0c530944556b6b2" translate="yes" xml:space="preserve">
          <source>A good way to check if more IO poll threads are needed is to use &lt;code&gt;microstate accounting&lt;/code&gt; and see what the load of the IO poll thread is. If it is high it could be a good idea to add more threads.</source>
          <target state="translated">さらにIOポーリングスレッドが必要かどうかを確認する良い方法は、 &lt;code&gt;microstate accounting&lt;/code&gt; を使用して、IOポーリングスレッドの負荷を確認することです。高い場合は、スレッドを追加することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="902246acf44b902caba68cbdbd165ab3a85407bd" translate="yes" xml:space="preserve">
          <source>A grammar to parse list expressions (with empty associated code):</source>
          <target state="translated">リスト式を解析するための文法 (関連するコードを空にしたもの)。</target>
        </trans-unit>
        <trans-unit id="1046b82d616c92a5ac3eba8ae29c8d175e6a998a" translate="yes" xml:space="preserve">
          <source>A group nested under a parallel group starts executing in parallel with previous (parallel) test cases (no matter what properties the nested group has). However, as test cases are never executed in parallel with &lt;code&gt;init_per_group/2&lt;/code&gt; or &lt;code&gt;end_per_group/2&lt;/code&gt; of the same group, it is only after a nested group has finished that remaining parallel cases in the previous group become spawned.</source>
          <target state="translated">並列グループの下にネストされたグループは、（ネストされたグループのプロパティに関係なく）以前の（並列）テストケースと並行して実行を開始します。ただし、テストケースは同じグループの &lt;code&gt;init_per_group/2&lt;/code&gt; または &lt;code&gt;end_per_group/2&lt;/code&gt; と並行して実行されることはないため、ネストされたグループが終了した後にのみ、前のグループの残りの並行ケースが生成されます。</target>
        </trans-unit>
        <trans-unit id="2bac3d793bd4b0481740f078d1dd54e8fa1f7130" translate="yes" xml:space="preserve">
          <source>A group of functions or processes can be called within a transaction. A transaction can include statements that read, write, or delete data from the DBMS. Many such transactions can run concurrently, and the programmer does not need to explicitly synchronize the processes that manipulate the data.</source>
          <target state="translated">関数やプロセスのグループは、トランザクション内で呼び出すことができます。トランザクションには、DBMSからデータを読み込んだり、書き込んだり、削除したりするステートメントを含めることができます。このようなトランザクションの多くは同時に実行することができ、プログラマーはデータを操作するプロセスを明示的に同期させる必要はありません。</target>
        </trans-unit>
        <trans-unit id="05cb23555bdd306501c7337362942fb611d143f7" translate="yes" xml:space="preserve">
          <source>A group of processes can be accessed by a common name. For example, if there is a group named &lt;code&gt;foobar&lt;/code&gt;, there can be a set of processes (which can be located on different nodes) that are all members of the group &lt;code&gt;foobar&lt;/code&gt;. There are no special functions for sending a message to the group. Instead, client functions are to be written with the functions &lt;code&gt;&lt;a href=&quot;#get_members-1&quot;&gt;get_members/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_local_members-1&quot;&gt;get_local_members/1&lt;/a&gt;&lt;/code&gt; to determine which processes are members of the group. Then the message can be sent to one or more group members.</source>
          <target state="translated">プロセスのグループには、共通の名前でアクセスできます。たとえば、 &lt;code&gt;foobar&lt;/code&gt; という名前のグループがある場合、グループ &lt;code&gt;foobar&lt;/code&gt; すべてのメンバーである一連のプロセス（異なるノードに配置できる）が存在する可能性があります。グループにメッセージを送信するための特別な機能はありません。代わりに、クライアント機能は、関数で記述される &lt;code&gt;&lt;a href=&quot;#get_members-1&quot;&gt;get_members/1&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#get_local_members-1&quot;&gt;get_local_members/1&lt;/a&gt;&lt;/code&gt; プロセスがグループのメンバーであるかを決定します。その後、メッセージを1人以上のグループメンバーに送信できます。</target>
        </trans-unit>
        <trans-unit id="5a3229fa1db1fe8eed7e1f7d567d0b55b01718ab" translate="yes" xml:space="preserve">
          <source>A group that starts with (?| resets the capturing parentheses numbers in each alternative (see section &lt;code&gt;&lt;a href=&quot;#sect12&quot;&gt;Duplicate Subpattern Numbers&lt;/a&gt;&lt;/code&gt;). The assertions at the start of each branch check the next UTF-8 character for values whose encoding uses 1, 2, 3, or 4 bytes, respectively. The individual bytes of the character are then captured by the appropriate number of groups.</source>
          <target state="translated">（？|で始まるグループは、各選択肢のキャプチャ括弧番号をリセットします（「 &lt;code&gt;&lt;a href=&quot;#sect12&quot;&gt;Duplicate Subpattern Numbers&lt;/a&gt;&lt;/code&gt; 」を参照）。各ブランチの開始時のアサーションは、エンコーディングが1、2、3を使用する値の次のUTF-8文字をチェックしますまたは、それぞれ4バイト文字の個々のバイトは、適切な数のグループによってキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="6db07dc0cd651815b5c72435ed2208f519f62680" translate="yes" xml:space="preserve">
          <source>A guard G is a non-empty sequence of guard tests &lt;code&gt;Gt_1, ..., Gt_k&lt;/code&gt;, and Rep(G) = &lt;code&gt;[Rep(Gt_1), ..., Rep(Gt_k)]&lt;/code&gt;.</source>
          <target state="translated">ガードGは、空でない一連のガードテスト &lt;code&gt;Gt_1, ..., Gt_k&lt;/code&gt; 、およびRep（G）= &lt;code&gt;[Rep(Gt_1), ..., Rep(Gt_k)]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9da1b8fcba29590ca36e99b9fdb91354688f306d" translate="yes" xml:space="preserve">
          <source>A guard sequence Gs is a sequence of guards &lt;code&gt;G_1; ...; G_k&lt;/code&gt;, and Rep(Gs) = &lt;code&gt;[Rep(G_1), ..., Rep(G_k)]&lt;/code&gt;. If the guard sequence is empty, then Rep(Gs) = &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">ガードシーケンスGsは、ガード &lt;code&gt;G_1; ...; G_k&lt;/code&gt; シーケンスです。...; G_k、およびRep（Gs）= &lt;code&gt;[Rep(G_1), ..., Rep(G_k)]&lt;/code&gt; 。ガードシーケンスが空の場合、Rep（Gs）= &lt;code&gt;[]&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="2e607c9ab56bd394d6c9eeddb457df24a34026a6" translate="yes" xml:space="preserve">
          <source>A guard test Gt is one of the following:</source>
          <target state="translated">ガードテストGtは、以下のいずれかである。</target>
        </trans-unit>
        <trans-unit id="0958ebfcb794773c3476244fc72f207f83085686" translate="yes" xml:space="preserve">
          <source>A handle to driver-specific data, passed to the driver callbacks. It is a pointer, and is most often type cast to a specific pointer in the driver.</source>
          <target state="translated">ドライバ固有のデータへのハンドルで、ドライバのコールバックに渡されます。ポインタであり、ドライバ内の特定のポインタに型キャストされることがほとんどです。</target>
        </trans-unit>
        <trans-unit id="fdc243bdb933b5a71a48ce564407f75cabaaebaf" translate="yes" xml:space="preserve">
          <source>A handler callback module must export:</source>
          <target state="translated">ハンドラコールバックモジュールはエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="678e5d07b0fa73bdf7fd807616029bb8f1f11655" translate="yes" xml:space="preserve">
          <source>A handler can be removed by calling &lt;code&gt;&lt;a href=&quot;logger#remove_handler-1&quot;&gt; logger:remove_handler(Id)&lt;/a&gt;&lt;/code&gt;. Logger calls &lt;code&gt;HModule:removing_handler(Config)&lt;/code&gt;, and removes the handler's configuration from the configuration database.</source>
          <target state="translated">ハンドラーは、 &lt;code&gt;&lt;a href=&quot;logger#remove_handler-1&quot;&gt; logger:remove_handler(Id)&lt;/a&gt;&lt;/code&gt; を呼び出すことで削除できます。ロガーは &lt;code&gt;HModule:removing_handler(Config)&lt;/code&gt; を呼び出し、ハンドラーの構成を構成データベースから削除します。</target>
        </trans-unit>
        <trans-unit id="31be10ebd1dea0e036e6cc2ff50b43986eb9b610" translate="yes" xml:space="preserve">
          <source>A handler can be removed by calling &lt;code&gt;&lt;a href=&quot;logger#remove_handler-1&quot;&gt;logger:remove_handler(Id)&lt;/a&gt;&lt;/code&gt;. Logger calls &lt;code&gt;HModule:removing_handler(Config)&lt;/code&gt;, and removes the handler's configuration from the configuration database.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;logger#remove_handler-1&quot;&gt;logger:remove_handler(Id)&lt;/a&gt;&lt;/code&gt; を呼び出すことで、ハンドラーを削除できます。ロガーは &lt;code&gt;HModule:removing_handler(Config)&lt;/code&gt; を呼び出し、ハンドラーの構成を構成データベースから削除します。</target>
        </trans-unit>
        <trans-unit id="8b450cb00cc7d0fceaaaa8e163bad6a1a09d773b" translate="yes" xml:space="preserve">
          <source>A handler is defined as a module exporting at least the following callback function:</source>
          <target state="translated">ハンドラは、少なくとも以下のコールバック関数をエクスポートするモジュールとして定義されます。</target>
        </trans-unit>
        <trans-unit id="a23d43ddf6d207f81a92e3f11ea5d88e0322baa2" translate="yes" xml:space="preserve">
          <source>A hidden node is a node started with the command-line flag &lt;code&gt;-hidden&lt;/code&gt;. Connections between hidden nodes and other nodes are not transitive, they must be set up explicitly. Also, hidden nodes does not show up in the list of nodes returned by &lt;code&gt;nodes()&lt;/code&gt;. Instead, &lt;code&gt;nodes(hidden)&lt;/code&gt; or &lt;code&gt;nodes(connected)&lt;/code&gt; must be used. This means, for example, that the hidden node is not added to the set of nodes that &lt;code&gt;global&lt;/code&gt; is keeping track of.</source>
          <target state="translated">非表示ノードは、コマンドラインフラグ &lt;code&gt;-hidden&lt;/code&gt; で開始されたノードです。非表示のノードと他のノードの間の接続は推移的ではなく、明示的に設定する必要があります。また、非表示のノードは、 &lt;code&gt;nodes()&lt;/code&gt; によって返されるノードのリストには表示されません。代わりに、 &lt;code&gt;nodes(hidden)&lt;/code&gt; または &lt;code&gt;nodes(connected)&lt;/code&gt; を使用する必要があります。これは、たとえば、非表示ノードが、 &lt;code&gt;global&lt;/code&gt; が追跡しているノードのセットに追加されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="3ad527cdee0b441182ba0bc41ca62d2081d24f24" translate="yes" xml:space="preserve">
          <source>A histogram of block sizes where each interval's upper bound is twice as high as the one before it.</source>
          <target state="translated">各区間の上限が前の区間の2倍になるブロックサイズのヒストグラム。</target>
        </trans-unit>
        <trans-unit id="ad63f98e4ec8a5df7f88023c80bfbc7bf7d5bd26" translate="yes" xml:space="preserve">
          <source>A hook function (cf. the &lt;code&gt;&lt;a href=&quot;#type-hook&quot;&gt;hook()&lt;/a&gt;&lt;/code&gt; type) is passed the current syntax tree node, the context, and a continuation. The context can be examined and manipulated by functions such as &lt;code&gt;get_ctxt_user/1&lt;/code&gt; and &lt;code&gt;set_ctxt_user/2&lt;/code&gt;. The hook must return a &quot;document&quot; data structure (see &lt;code&gt;&lt;a href=&quot;#layout-2&quot;&gt;layout/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#best-2&quot;&gt;best/2&lt;/a&gt;&lt;/code&gt;); this may be constructed in part or in whole by applying the continuation function. For example, the following is a trivial hook:</source>
          <target state="translated">フック関数（ &lt;code&gt;&lt;a href=&quot;#type-hook&quot;&gt;hook()&lt;/a&gt;&lt;/code&gt; タイプを参照）には、現在の構文ツリーノード、コンテキスト、および継続が渡されます。コンテキストは、 &lt;code&gt;get_ctxt_user/1&lt;/code&gt; や &lt;code&gt;set_ctxt_user/2&lt;/code&gt; などの関数によって検査および操作できます。フックは「ドキュメント」データ構造を返す必要があります（ &lt;code&gt;&lt;a href=&quot;#layout-2&quot;&gt;layout/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#best-2&quot;&gt;best/2&lt;/a&gt;&lt;/code&gt; を参照）。これは、継続関数を適用することにより、部分的または全体的に構築できます。たとえば、次は簡単なフックです。</target>
        </trans-unit>
        <trans-unit id="1edf358d74594d5d0d07749392202e53a874bde3" translate="yes" xml:space="preserve">
          <source>A job that alternates between I/O bound and CPU bound can be reclassified and rescheduled using &lt;code&gt;enif_schedule_nif&lt;/code&gt; so that it executes on the correct type of dirty scheduler at all times. For more information see the documentation of the &lt;code&gt;erl(1)&lt;/code&gt; command line arguments &lt;code&gt;&lt;a href=&quot;erl#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;erl#+SDio&quot;&gt;+SDio&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">I / OバウンドとCPUバウンドを交互に繰り返すジョブは、 &lt;code&gt;enif_schedule_nif&lt;/code&gt; を使用して再分類および再スケジュールできるため、常に正しいタイプのダーティスケジューラで実行されます。詳細については、 &lt;code&gt;erl(1)&lt;/code&gt; コマンドライン引数 &lt;code&gt;&lt;a href=&quot;erl#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;erl#+SDio&quot;&gt;+SDio&lt;/a&gt;&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="da4d22f9cc705b47b11f5556a6a98d52ebdf94f6" translate="yes" xml:space="preserve">
          <source>A key for des3 is a list of three iolists</source>
          <target state="translated">des3 のキーは 3 つの iolist のリストです。</target>
        </trans-unit>
        <trans-unit id="43bc46bb25920857aea5ff4cc78f13c35d6caf0e" translate="yes" xml:space="preserve">
          <source>A key to an entry in the session cache.</source>
          <target state="translated">セッションキャッシュのエントリへのキー。</target>
        </trans-unit>
        <trans-unit id="58867f002dc318ccf9bce1131e2694062d5333ed" translate="yes" xml:space="preserve">
          <source>A larger buffer limit allows processes to buffer more outgoing messages over the distribution. When the buffer limit has been reached, sending processes will be suspended until the buffer size has shrunk. The buffer limit is per distribution channel. A higher limit gives lower latency and higher throughput at the expense of higher memory use.</source>
          <target state="translated">バッファリミットを大きくすると、プロセスはより多くの送信メッセージをバッファリングすることができます。バッファリミットに達すると、バッファサイズが縮小されるまで送信プロセスは中断されます。バッファリミットはディストリビューションチャネルごとに設定されます。制限値を高くすると、より低いレイテンシとより高いスループットが得られますが、より高いメモリ使用量を犠牲にします。</target>
        </trans-unit>
        <trans-unit id="06a81726c24b8781e74e0cf024d9ccac67383c44" translate="yes" xml:space="preserve">
          <source>A level in term &lt;code&gt;CpuTopology&lt;/code&gt; can be omitted if only one entry exists and &lt;code&gt;InfoList&lt;/code&gt; is empty.</source>
          <target state="translated">エントリが1つしかなく、 &lt;code&gt;InfoList&lt;/code&gt; が空の場合、用語 &lt;code&gt;CpuTopology&lt;/code&gt; のレベルは省略できます。</target>
        </trans-unit>
        <trans-unit id="dce227656c4a97473171d894829d7b5055a34016" translate="yes" xml:space="preserve">
          <source>A library application that cannot be started or stopped, does not need any application callback module.</source>
          <target state="translated">起動も停止もできないライブラリアプリケーションは、アプリケーションコールバックモジュールを必要としません。</target>
        </trans-unit>
        <trans-unit id="95d53ac43bdcd275e024568761344b42b310394a" translate="yes" xml:space="preserve">
          <source>A lightweight lookup in the table was the most important feature, but we also wanted to improve modifications of the table. The process table is modified when a new process is spawned, i.e. a new pointer is inserted into the table, and when a process terminates, i.e. a pointer is deleted in the table.</source>
          <target state="translated">テーブル内の軽量なルックアップが最も重要な機能でしたが、テーブルの修正も改善したいと考えていました。プロセステーブルは、新しいプロセスがスポーンされたとき、つまり新しいポインタがテーブルに挿入されたときに修正され、プロセスが終了したとき、つまりポインタがテーブルから削除されたときに修正されます。</target>
        </trans-unit>
        <trans-unit id="f1237e5b11078ec794450ace16c7850dee19ffaa" translate="yes" xml:space="preserve">
          <source>A line breakpoint can also be created (and deleted) by double-clicking the line when the module is displayed in the View Module window or Attach Process window.</source>
          <target state="translated">また、モジュールが[モジュールの表示]ウィンドウまたは[プロセスの添付]ウィンドウに表示されているときに、その行をダブルクリックすることで、行のブレークポイントを作成(および削除)することもできます。</target>
        </trans-unit>
        <trans-unit id="25e27b31c8e51ff696a72775acff4cd63fac142f" translate="yes" xml:space="preserve">
          <source>A line breakpoint is created at a certain line in a module.</source>
          <target state="translated">モジュール内の特定の行で改行ポイントを作成します。</target>
        </trans-unit>
        <trans-unit id="98ca655fbbfd2af69c799f1de396c9692c8ffecf" translate="yes" xml:space="preserve">
          <source>A line level calls analysis of &lt;code&gt;channel&lt;/code&gt; can be written to a file using &lt;code&gt;cover:analysis_to_file/1&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;channel&lt;/code&gt; ラインレベルのコール分析は、 &lt;code&gt;cover:analysis_to_file/1&lt;/code&gt; を使用してファイルに書き込むことができます。</target>
        </trans-unit>
        <trans-unit id="71f85c48df8221b4058723c56c5fee97655b5db6" translate="yes" xml:space="preserve">
          <source>A line with &lt;code&gt;//&lt;/code&gt; is also a comment. It is recommended to only use this style of comments in files that define implementations of instructions.</source>
          <target state="translated">&lt;code&gt;//&lt;/code&gt; のある行もコメントです。命令の実装を定義するファイルでは、このスタイルのコメントのみを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="42c244651147c5c8032fa00f6a8115a6bb5b8002" translate="yes" xml:space="preserve">
          <source>A link between &lt;code&gt;To&lt;/code&gt; and &lt;code&gt;Result&lt;/code&gt; was set up on the node where &lt;code&gt;Result&lt;/code&gt; resides.</source>
          <target state="translated">間のリンク &lt;code&gt;To&lt;/code&gt; して &lt;code&gt;Result&lt;/code&gt; ノードに設定された &lt;code&gt;Result&lt;/code&gt; 常駐します。</target>
        </trans-unit>
        <trans-unit id="30f9e5debe76dcfd36d855503d282295078ca73b" translate="yes" xml:space="preserve">
          <source>A link can be removed by calling the BIF &lt;code&gt;unlink(Pid)&lt;/code&gt;.</source>
          <target state="translated">リンクは、BIF &lt;code&gt;unlink(Pid)&lt;/code&gt; を呼び出すことで削除できます。</target>
        </trans-unit>
        <trans-unit id="b8b621ff75576ed0db731737d0b2db8dd71853fd" translate="yes" xml:space="preserve">
          <source>A link existed between the local process and the remote process at the time of the crash.</source>
          <target state="translated">クラッシュ時にローカルプロセスとリモートプロセスの間にリンクが存在しました。</target>
        </trans-unit>
        <trans-unit id="71334f2a43a0426d62a5d4505c43986a1e04107a" translate="yes" xml:space="preserve">
          <source>A link is broken. &lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; and &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; contain the pids of the linked processes, and &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; contains the reason for the exit.</source>
          <target state="translated">リンクが壊れています。 &lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; および &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; にはリンクされたプロセスのPIDが含まれ、 &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; には終了の理由が含まれます。</target>
        </trans-unit>
        <trans-unit id="ff85adc5284cadbc93a39945b54d30501de96451" translate="yes" xml:space="preserve">
          <source>A link or monitor to a remote process was broken because a connection between the nodes could not be established or was severed.</source>
          <target state="translated">ノード間の接続が確立できなかったか、切断されたため、リモートプロセスへのリンクまたはモニタが切断されました。</target>
        </trans-unit>
        <trans-unit id="f6d5b20cc777398a2954a5f904e0c368fb34c735" translate="yes" xml:space="preserve">
          <source>A link to all runs executed from a certain directory is written in the log named &lt;code&gt;all_runs.html&lt;/code&gt; and direct links to all tests (the latest results) are written to the top-level &lt;code&gt;index.html&lt;/code&gt;.</source>
          <target state="translated">特定のディレクトリから実行されたすべての実行へのリンクは &lt;code&gt;all_runs.html&lt;/code&gt; という名前のログに書き込まれ、すべてのテスト（最新の結果）への直接リンクは最上位の &lt;code&gt;index.html&lt;/code&gt; に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="c9ed186e6c9cb98bafec7585f14769f53a755b9c" translate="yes" xml:space="preserve">
          <source>A list comprehension returns a list, where the elements are the result of evaluating &lt;code&gt;Expr&lt;/code&gt; for each combination of generator list elements and bit string generator elements, for which all filters are true.</source>
          <target state="translated">リスト内包表記はリストを返します。ここでの要素は、すべてのフィルターが真で​​あるジェネレーターリスト要素とビット文字列ジェネレーター要素の組み合わせごとに &lt;code&gt;Expr&lt;/code&gt; を評価した結果です。</target>
        </trans-unit>
        <trans-unit id="02a87e72df2e9591f46019f9ed75098ceee2e35d" translate="yes" xml:space="preserve">
          <source>A list comprehension:</source>
          <target state="translated">リスト理解力。</target>
        </trans-unit>
        <trans-unit id="7085d8980ae301152b6ee803668c44a99ddba230" translate="yes" xml:space="preserve">
          <source>A list is a compound data type with a variable number of terms.</source>
          <target state="translated">リストは、可変項数を持つ複合データ型です。</target>
        </trans-unit>
        <trans-unit id="cdf78c94ee3134a5064c3958c1d7c8e4a3de8736" translate="yes" xml:space="preserve">
          <source>A list must be specified with the number of elements, including the tail, which is the last term preceding &lt;code&gt;ERL_DRV_LIST&lt;/code&gt;.</source>
          <target state="translated">リストは、末尾を含む要素数で指定する必要があります。これは、 &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; の前の最後の用語です。</target>
        </trans-unit>
        <trans-unit id="70b8617890707dfd903ea1026d415236f1bdc921" translate="yes" xml:space="preserve">
          <source>A list of 'ActionReply' records possibly containing error indications.</source>
          <target state="translated">エラー表示を含む可能性のある 'ActionReply' レコードのリスト。</target>
        </trans-unit>
        <trans-unit id="51c375d52fb989d38f521acbea65939966bc14e9" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;UpdateOp&lt;/code&gt; can be supplied to do many update operations within the object. The operations are carried out in the order specified in the list. If the same counter position occurs more than once in the list, the corresponding counter is thus updated many times, each time based on the previous result. The return value is a list of the new counter values from each update operation in the same order as in the operation list. If an empty list is specified, nothing is updated and an empty list is returned. If the function fails, no updates are done.</source>
          <target state="translated">オブジェクト内で多くの更新操作を実行するために、 &lt;code&gt;UpdateOp&lt;/code&gt; のリストを提供できます。操作は、リストで指定された順序で実行されます。リスト内で同じカウンター位置が複数回発生する場合、対応するカウンターは以前の結果に基づいて毎回何度も更新されます。戻り値は、操作リストと同じ順序で各更新操作からの新しいカウンター値のリストです。空のリストを指定すると、何も更新されず、空のリストが返されます。関数が失敗した場合、更新は行われません。</target>
        </trans-unit>
        <trans-unit id="030f0cbd94947cdf93b77d371b60c32ef8fca036" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;{Name, Memory}&lt;/code&gt; tuples, where &lt;code&gt;Name&lt;/code&gt; is a fragment &lt;code&gt;Name&lt;/code&gt;, and &lt;code&gt;Memory&lt;/code&gt; is how much memory it occupies</source>
          <target state="translated">&lt;code&gt;{Name, Memory}&lt;/code&gt; タプルのリスト。ここで、 &lt;code&gt;Name&lt;/code&gt; はフラグメント &lt;code&gt;Name&lt;/code&gt; であり、 &lt;code&gt;Memory&lt;/code&gt; はそれが占めるメモリの量です。</target>
        </trans-unit>
        <trans-unit id="c72f78c95adc9eeb9cf8ccea551cf18350671fbd" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;{Name, Size}&lt;/code&gt; tuples, where &lt;code&gt;Name&lt;/code&gt; is a fragment &lt;code&gt;Name&lt;/code&gt;, and &lt;code&gt;Size&lt;/code&gt; is how many records it contains</source>
          <target state="translated">&lt;code&gt;{Name, Size}&lt;/code&gt; タプルのリスト。ここで、 &lt;code&gt;Name&lt;/code&gt; はフラグメント &lt;code&gt;Name&lt;/code&gt; で、 &lt;code&gt;Size&lt;/code&gt; はそれに含まれるレコードの数です。</target>
        </trans-unit>
        <trans-unit id="e2180b4c9facbabd3ef7f26e9137ff364cfb6bb1" translate="yes" xml:space="preserve">
          <source>A list of &lt;code&gt;{Pos,Value}&lt;/code&gt; can be supplied to update many elements within the same object. If the same position occurs more than once in the list, the last value in the list is written. If the list is empty or the function fails, no updates are done. The function is also atomic in the sense that other processes can never see any intermediate results.</source>
          <target state="translated">&lt;code&gt;{Pos,Value}&lt;/code&gt; リストを指定して、同じオブジェクト内の多くの要素を更新できます。リスト内で同じ位置が複数回出現する場合は、リストの最後の値が書き込まれます。リストが空の場合、または関数が失敗した場合、更新は行われません。この関数はまた、他のプロセスが中間結果を決して見ることができないという意味でアトミックです。</target>
        </trans-unit>
        <trans-unit id="b3c0a15b7c94f033790cb5a9578215ba2c5eb2b7" translate="yes" xml:space="preserve">
          <source>A list of &lt;strong&gt;release upgrade instructions&lt;/strong&gt;, see &lt;code&gt;&lt;a href=&quot;#Release%20Upgrade%20Instructions&quot;&gt;Release Upgrade Instructions&lt;/a&gt;&lt;/code&gt;. It is recommended to use high-level instructions only. These are automatically translated to low-level instructions by &lt;code&gt;systools&lt;/code&gt; when creating the &lt;code&gt;relup&lt;/code&gt; file.</source>
          <target state="translated">&lt;strong&gt;リリースのアップグレード手順の&lt;/strong&gt;リストについては、「 &lt;code&gt;&lt;a href=&quot;#Release%20Upgrade%20Instructions&quot;&gt;Release Upgrade Instructions&lt;/a&gt;&lt;/code&gt; &lt;strong&gt;手順&lt;/strong&gt;」を参照してください。高レベルの命令のみを使用することをお勧めします。これらは、 &lt;code&gt;relup&lt;/code&gt; ファイルを作成するときに、 &lt;code&gt;systools&lt;/code&gt; によって低レベルの命令に自動的に変換されます。</target>
        </trans-unit>
        <trans-unit id="9313069dff4ca94cf23c29546a7ad4ed8220831c" translate="yes" xml:space="preserve">
          <source>A list of DER-encoded certificates in trust order ending with the peer certificate.</source>
          <target state="translated">DER でエンコードされた証明書のリストで、ピア証明書で終わる信頼順のリスト。</target>
        </trans-unit>
        <trans-unit id="cfdc5fa9c2f2d452137349f08f0ebdc7cd06e86e" translate="yes" xml:space="preserve">
          <source>A list of active checkpoints can be obtained with the following functions:</source>
          <target state="translated">アクティブなチェックポイントのリストは、以下の関数で取得できます。</target>
        </trans-unit>
        <trans-unit id="22e1cd424af636813424f38dcaf9d38efccd215c" translate="yes" xml:space="preserve">
          <source>A list of all valid Erlang Top configuration parameters is available in module &lt;code&gt;&lt;a href=&quot;etop&quot;&gt;etop&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">すべての有効なErlang Top構成パラメーターのリストは、モジュール &lt;code&gt;&lt;a href=&quot;etop&quot;&gt;etop&lt;/a&gt;&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="84f87e145849ab0fff970812ed60b4958a7995b9" translate="yes" xml:space="preserve">
          <source>A list of alternate dictionary modules with which to encode/decode AVPs that are not defined by the dictionary of the application in question. At decode, such AVPs are represented as diameter_avp records in the &lt;code&gt;'AVP'&lt;/code&gt; field of a decoded message or Grouped AVP, the first alternate that succeeds in decoding the AVP setting the record's value field. At encode, values in an &lt;code&gt;'AVP'&lt;/code&gt; list can be passed as AVP name/value 2-tuples, and it is an encode error for no alternate to define the AVP of such a tuple.</source>
          <target state="translated">問題のアプリケーションのディクショナリで定義されていないAVPをエンコード/デコードする代替ディクショナリモジュールのリスト。デコード時には、そのようなAVPは、デコードされたメッセージまたはグループ化された &lt;code&gt;'AVP'&lt;/code&gt; フィールド内のdiameter_avpレコードとして表されます。エンコードでは、 &lt;code&gt;'AVP'&lt;/code&gt; リスト内の値はAVPの名前/値の2タプルとして渡すことができます。そのようなタプルのAVPを定義する代替がないため、これはエンコードエラーです。</target>
        </trans-unit>
        <trans-unit id="bcb8af967c3f5df09119723a75e7c020769c5e61" translate="yes" xml:space="preserve">
          <source>A list of application versions that the application depends on. An example of such an application version is &lt;code&gt;&quot;kernel-3.0&quot;&lt;/code&gt;. Application versions specified as runtime dependencies are minimum requirements. That is, a larger application version than the one specified in the dependency satisfies the requirement. For information about how to compare application versions, see section &lt;code&gt;Versions&lt;/code&gt; in the System Principles User's Guide.</source>
          <target state="translated">アプリケーションが依存するアプリケーションバージョンのリスト。このようなアプリケーションバージョンの例は、 &lt;code&gt;&quot;kernel-3.0&quot;&lt;/code&gt; です。ランタイム依存関係として指定されたアプリケーションバージョンは、最小要件です。つまり、依存関係で指定されたバージョンよりも大きいアプリケーションバージョンが要件を満たします。アプリケーションのバージョンを比較する方法については、セクションを参照 &lt;code&gt;Versions&lt;/code&gt; システムの原則ユーザーズガイドを。</target>
        </trans-unit>
        <trans-unit id="85bcb2be6c30593796c07db13b64536f31aab04f" translate="yes" xml:space="preserve">
          <source>A list of applications that are included by an application included in the release. The list must be a subset of the included applications specified in the application resource file (&lt;code&gt;Application.app&lt;/code&gt;) and overrides this value. Defaults to the same value as in the application resource file.</source>
          <target state="translated">リリースに含まれているアプリケーションに含まれているアプリケーションのリスト。リストは、アプリケーションリソースファイル（ &lt;code&gt;Application.app&lt;/code&gt; ）で指定されている、含まれているアプリケーションのサブセットである必要があり、この値をオーバーライドします。デフォルトは、アプリケーションリソースファイルと同じ値です。</target>
        </trans-unit>
        <trans-unit id="7501d56e7513156f76383768c05bf058cd48248a" translate="yes" xml:space="preserve">
          <source>A list of arbitrary socket options.</source>
          <target state="translated">任意のソケットオプションのリスト。</target>
        </trans-unit>
        <trans-unit id="73a81a79f1a7098f6cb205944af55c35f111d222" translate="yes" xml:space="preserve">
          <source>A list of atoms corresponding to atoms in the &lt;code&gt;NamedBitList&lt;/code&gt; in the &lt;code&gt;BIT STRING&lt;/code&gt; definition. A &lt;code&gt;BIT STRING&lt;/code&gt; with symbolic names is always decoded to the format shown in the following example:</source>
          <target state="translated">中の原子に対応する原子のリスト &lt;code&gt;NamedBitList&lt;/code&gt; における &lt;code&gt;BIT STRING&lt;/code&gt; の定義。シンボリック名を持つ &lt;code&gt;BIT STRING&lt;/code&gt; 文字列は、常に次の例に示す形式にデコードされます。</target>
        </trans-unit>
        <trans-unit id="dad15913daed65e8f5cbb546acf62e2eac396099" translate="yes" xml:space="preserve">
          <source>A list of binaries. This datatype is useful to use together with &lt;code&gt;&lt;a href=&quot;erl_nif#enif_inspect_iovec&quot;&gt; enif_inspect_iovec&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">バイナリのリスト。このデータ型は、 &lt;code&gt;&lt;a href=&quot;erl_nif#enif_inspect_iovec&quot;&gt; enif_inspect_iovec&lt;/a&gt;&lt;/code&gt; と一緒に使用すると便利です。</target>
        </trans-unit>
        <trans-unit id="4416e89ecd0bec31a83597e47f21c9429cab1bb6" translate="yes" xml:space="preserve">
          <source>A list of binaries. This datatype is useful to use together with &lt;code&gt;&lt;a href=&quot;erl_nif#enif_inspect_iovec&quot;&gt;enif_inspect_iovec&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">バイナリのリスト。このデータ型は、 &lt;code&gt;&lt;a href=&quot;erl_nif#enif_inspect_iovec&quot;&gt;enif_inspect_iovec&lt;/a&gt;&lt;/code&gt; と一緒に使用すると便利です。</target>
        </trans-unit>
        <trans-unit id="cc21ad3fb691b61137a500e7fa67b8eec7cc2074" translate="yes" xml:space="preserve">
          <source>A list of cipher suites that should be supported</source>
          <target state="translated">サポートされるべき暗号スイートのリスト</target>
        </trans-unit>
        <trans-unit id="64654646df6b843e592f4468159e2fedaaec3b28" translate="yes" xml:space="preserve">
          <source>A list of functions specified in option &lt;code&gt;Startup&lt;/code&gt; are executed after startup of the node. Notice that all used modules are to be present in the code path on &lt;code&gt;Host&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;Startup&lt;/code&gt; 指定された関数のリストは、ノードの起動後に実行されます。使用されるすべてのモジュールが &lt;code&gt;Host&lt;/code&gt; のコードパスに存在することに注意してください。</target>
        </trans-unit>
        <trans-unit id="33ed581a843666d74741e3c3b88fa9be23335a3f" translate="yes" xml:space="preserve">
          <source>A list of identifiers for all the processes, ports and NIF resources, that are monitoring the process.</source>
          <target state="translated">プロセスを監視しているすべてのプロセス、ポート、NIF リソースの識別子のリスト。</target>
        </trans-unit>
        <trans-unit id="b8da2df3aade9466893560d8879580f6ac7224df" translate="yes" xml:space="preserve">
          <source>A list of integers sets the generator's internal state directly, after algorithm-dependent checks of the value and masking to the proper word size.</source>
          <target state="translated">整数のリストは、アルゴリズムに依存した値のチェックと適切なワードサイズへのマスキングを行った後、ジェネレータの内部状態を直接設定します。</target>
        </trans-unit>
        <trans-unit id="79b9f4cc16d6de8c7e19f996e3ff20895acaba69" translate="yes" xml:space="preserve">
          <source>A list of key-value tuples (that is, a property list) containing runtime configuration data passed from the configuration functions to the test cases.</source>
          <target state="translated">設定関数からテストケースに渡される実行時設定データを含むキー値タプル(プロパティリスト)のリスト。</target>
        </trans-unit>
        <trans-unit id="53072cdf6c2b3e1f0ce0b618f29746a989ccb6e4" translate="yes" xml:space="preserve">
          <source>A list of low-level release upgrade instructions, see &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt;. It consists of the release upgrade instructions from the respective application upgrade files (high-level instructions are translated to low-level instructions), in the same order as in the start script.</source>
          <target state="translated">低レベルのリリースアップグレード手順のリストについては、 &lt;code&gt;&lt;a href=&quot;appup&quot;&gt;appup(4)&lt;/a&gt;&lt;/code&gt; を参照してください。これは、起動スクリプトと同じ順序で、それぞれのアプリケーションアップグレードファイルからのリリースアップグレード手順で構成されています（高レベルの手順は低レベルの手順に変換されます）。</target>
        </trans-unit>
        <trans-unit id="07cd63bd8b8a5bee2676cad933dc31cee7b4f8e9" translate="yes" xml:space="preserve">
          <source>A list of match specifications. An empty list is equivalent to &lt;code&gt;true&lt;/code&gt;. For a description of match specifications, see section &lt;code&gt; Match Specifications in Erlang&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">一致仕様のリスト。空のリストは &lt;code&gt;true&lt;/code&gt; と同等です。一致仕様の説明については、ユーザーズガイドの &lt;code&gt; Match Specifications in Erlang&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="c5458cb9ed4430c9a1044722c1c9f0ec73351850" translate="yes" xml:space="preserve">
          <source>A list of match specifications. An empty list is equivalent to &lt;code&gt;true&lt;/code&gt;. For a description of match specifications, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">マッチ仕様のリスト。空のリストは &lt;code&gt;true&lt;/code&gt; と同等です。一致仕様の説明については、ユーザーズガイドの「 &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; の一致仕様」を参照してください。</target>
        </trans-unit>
        <trans-unit id="139fe9d39aad421da9b537eadc3c0d0b13b2c1fe" translate="yes" xml:space="preserve">
          <source>A list of match specifications. The matching is done on the list &lt;code&gt;[Node, Sender, Msg]&lt;/code&gt;. &lt;code&gt;Node&lt;/code&gt; is the node name of the sender. &lt;code&gt;Sender&lt;/code&gt; is the process or port identity of the sender, or the atom &lt;code&gt;undefined&lt;/code&gt; if the sender is not known (which can be the case for remote senders). &lt;code&gt;Msg&lt;/code&gt; is the message term. The pid of the receiving process can be accessed with the guard function &lt;code&gt;self/0&lt;/code&gt;. An empty list is the same as &lt;code&gt;true&lt;/code&gt;. For more information, see section &lt;code&gt; Match Specifications in Erlang&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">一致仕様のリスト。マッチングはリスト &lt;code&gt;[Node, Sender, Msg]&lt;/code&gt; 行われます。 &lt;code&gt;Node&lt;/code&gt; は、送信者のノード名です。 &lt;code&gt;Sender&lt;/code&gt; は、送信者のプロセスまたはポートIDであり、送信者が &lt;code&gt;undefined&lt;/code&gt; 場合はアトムが未定義です（リモート送信者の場合がこれに該当します）。 &lt;code&gt;Msg&lt;/code&gt; はメッセージ用語です。受信プロセスのpidには、ガード関数 &lt;code&gt;self/0&lt;/code&gt; を使用してアクセスできます。空のリストは &lt;code&gt;true&lt;/code&gt; と同じです。詳細については、ユーザーズガイドの「 &lt;code&gt; Match Specifications in Erlang&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="4f24e9180cc135394011e3f9e98998139bc43ae7" translate="yes" xml:space="preserve">
          <source>A list of match specifications. The matching is done on the list &lt;code&gt;[Node, Sender, Msg]&lt;/code&gt;. &lt;code&gt;Node&lt;/code&gt; is the node name of the sender. &lt;code&gt;Sender&lt;/code&gt; is the process or port identity of the sender, or the atom &lt;code&gt;undefined&lt;/code&gt; if the sender is not known (which can be the case for remote senders). &lt;code&gt;Msg&lt;/code&gt; is the message term. The pid of the receiving process can be accessed with the guard function &lt;code&gt;self/0&lt;/code&gt;. An empty list is the same as &lt;code&gt;true&lt;/code&gt;. For more information, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">マッチ仕様のリスト。照合はリスト &lt;code&gt;[Node, Sender, Msg]&lt;/code&gt; 行われます。 &lt;code&gt;Node&lt;/code&gt; は送信者のノード名です。 &lt;code&gt;Sender&lt;/code&gt; は送信者のプロセスまたはポートIDです。送信者が &lt;code&gt;undefined&lt;/code&gt; 場合はアトムが定義されていません（リモート送信者の場合も同様）。 &lt;code&gt;Msg&lt;/code&gt; はメッセージ用語です。受信プロセスのPIDには、ガード関数 &lt;code&gt;self/0&lt;/code&gt; を使用してアクセスできます。空のリストは &lt;code&gt;true&lt;/code&gt; と同じです。詳細については、ユーザーズガイドのセクション「 &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d87f996d594a00d6035f5f5ee9ddba88e768355e" translate="yes" xml:space="preserve">
          <source>A list of match specifications. The matching is done on the list &lt;code&gt;[Receiver, Msg]&lt;/code&gt;. &lt;code&gt;Receiver&lt;/code&gt; is the process or port identity of the receiver and &lt;code&gt;Msg&lt;/code&gt; is the message term. The pid of the sending process can be accessed with the guard function &lt;code&gt;self/0&lt;/code&gt;. An empty list is the same as &lt;code&gt;true&lt;/code&gt;. For more information, see section &lt;code&gt; Match Specifications in Erlang&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">一致仕様のリスト。マッチングはリスト &lt;code&gt;[Receiver, Msg]&lt;/code&gt; 行われます。 &lt;code&gt;Receiver&lt;/code&gt; は受信者のプロセスまたはポートIDであり、 &lt;code&gt;Msg&lt;/code&gt; はメッセージ用語です。送信プロセスのpidには、ガード関数 &lt;code&gt;self/0&lt;/code&gt; を使用してアクセスできます。空のリストは &lt;code&gt;true&lt;/code&gt; と同じです。詳細については、ユーザーズガイドの「 &lt;code&gt; Match Specifications in Erlang&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1ae6c5016a51b941ea9b569f5d1e616278b56ff4" translate="yes" xml:space="preserve">
          <source>A list of match specifications. The matching is done on the list &lt;code&gt;[Receiver, Msg]&lt;/code&gt;. &lt;code&gt;Receiver&lt;/code&gt; is the process or port identity of the receiver and &lt;code&gt;Msg&lt;/code&gt; is the message term. The pid of the sending process can be accessed with the guard function &lt;code&gt;self/0&lt;/code&gt;. An empty list is the same as &lt;code&gt;true&lt;/code&gt;. For more information, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">マッチ仕様のリスト。照合はリスト &lt;code&gt;[Receiver, Msg]&lt;/code&gt; 行われます。 &lt;code&gt;Receiver&lt;/code&gt; はレシーバーのプロセスまたはポートIDであり、 &lt;code&gt;Msg&lt;/code&gt; はメッセージ用語です。送信プロセスのPIDには、ガード関数 &lt;code&gt;self/0&lt;/code&gt; を使用してアクセスできます。空のリストは &lt;code&gt;true&lt;/code&gt; と同じです。詳細については、ユーザーズガイドのセクション「 &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="f891abb57f22c043046c0acca9828e5f72f099a9" translate="yes" xml:space="preserve">
          <source>A list of monitors (started by &lt;code&gt;monitor/2&lt;/code&gt;) that are active for the process. For a local process monitor or a remote process monitor by a process identifier, the list consists of:</source>
          <target state="translated">プロセスでアクティブなモニター（ &lt;code&gt;monitor/2&lt;/code&gt; で始まる）のリスト。ローカルプロセスモニターまたはプロセスIDによるリモートプロセスモニターの場合、リストは以下で構成されます。</target>
        </trans-unit>
        <trans-unit id="1e09e85b1d23a2d1904ace9e97601c063a94ad34" translate="yes" xml:space="preserve">
          <source>A list of node names (atoms), the group nodes.</source>
          <target state="translated">ノード名(アトム)、グループノードのリスト。</target>
        </trans-unit>
        <trans-unit id="f513e60b833a271eafeea13f285937ef60a9f36a" translate="yes" xml:space="preserve">
          <source>A list of node names, the group nodes currently synchronized with the local node.</source>
          <target state="translated">ノード名のリストで、現在ローカルノードと同期しているグループノード。</target>
        </trans-unit>
        <trans-unit id="d5813c5a7e310a9d07043782acc2491f544da810" translate="yes" xml:space="preserve">
          <source>A list of node names, the group nodes to which there are currently no connections.</source>
          <target state="translated">ノード名のリスト、現在接続がないグループノード。</target>
        </trans-unit>
        <trans-unit id="ede2a365270db1734a514f8930fed986e258eb67" translate="yes" xml:space="preserve">
          <source>A list of node names, the group nodes with which the local node has failed to synchronize.</source>
          <target state="translated">ノード名のリストで、ローカルノードが同期化に失敗したグループノード。</target>
        </trans-unit>
        <trans-unit id="68320e1e6e32580922546695a30d4ffc50df4758" translate="yes" xml:space="preserve">
          <source>A list of objects and a continuation is returned, unless the table is empty, in which case &lt;code&gt;'$end_of_table'&lt;/code&gt; is returned. The continuation is to be used when matching further objects by calling &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オブジェクトのリストと継続が返されます。ただし、テーブルが空の場合は &lt;code&gt;'$end_of_table'&lt;/code&gt; が返されます。継続は、 &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt; を呼び出してさらにオブジェクトを照合するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="795b45a529dceb8a27da1be92835aa76262ca94d" translate="yes" xml:space="preserve">
          <source>A list of pids, specifying the processes that have subscribed to &lt;code&gt;nodeup&lt;/code&gt; and &lt;code&gt;nodedown&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;nodeup&lt;/code&gt; および &lt;code&gt;nodedown&lt;/code&gt; メッセージをサブスクライブしたプロセスを指定するPIDのリスト。</target>
        </trans-unit>
        <trans-unit id="bbc2862b14b19fa3c52a7c39935bdc51459df8ec" translate="yes" xml:space="preserve">
          <source>A list of process identifiers monitoring the process (with &lt;code&gt;monitor/2&lt;/code&gt;).</source>
          <target state="translated">プロセスを監視しているプロセス識別子のリスト（ &lt;code&gt;monitor/2&lt;/code&gt; を使用）。</target>
        </trans-unit>
        <trans-unit id="798f3c6d606c88936e16d8fb3e746a3c0d7e414f" translate="yes" xml:space="preserve">
          <source>A list of start phases and corresponding start arguments for the application. If this key is present, the application master, in addition to the usual call to &lt;code&gt;Module:start/2&lt;/code&gt;, also calls &lt;code&gt;Module:start_phase(Phase,Type,PhaseArgs)&lt;/code&gt; for each start phase defined by key &lt;code&gt;start_phases&lt;/code&gt;. Only after this extended start procedure, &lt;code&gt;application:start(Application)&lt;/code&gt; returns.</source>
          <target state="translated">アプリケーションの開始フェーズと対応する開始引数のリスト。このキーが存在する場合、アプリケーションマスターは、通常の &lt;code&gt;Module:start/2&lt;/code&gt; の呼び出しに加えて、キー &lt;code&gt;start_phases&lt;/code&gt; で定義された各開始フェーズについて &lt;code&gt;Module:start_phase(Phase,Type,PhaseArgs)&lt;/code&gt; も呼び出します。この拡張開始手順の後でのみ、 &lt;code&gt;application:start(Application)&lt;/code&gt; が戻ります。</target>
        </trans-unit>
        <trans-unit id="edf21767ef6072f1fd3b3c1a6a4c7c161dc74414" translate="yes" xml:space="preserve">
          <source>A list of the characters in the matched token.</source>
          <target state="translated">一致したトークン内の文字のリスト。</target>
        </trans-unit>
        <trans-unit id="8133b9a65a9c55bb804a98f418e83c6fd30bd2dd" translate="yes" xml:space="preserve">
          <source>A list of the nodes that do not exist</source>
          <target state="translated">存在しないノードのリスト</target>
        </trans-unit>
        <trans-unit id="4787cc71f8b45d2d5a1e6a23232994156e3e6848" translate="yes" xml:space="preserve">
          <source>A list of the nodes where the server does not exist</source>
          <target state="translated">サーバーが存在しないノードのリスト</target>
        </trans-unit>
        <trans-unit id="23fbc37251525e0fbe5e6808d56771dd9e1bb61d" translate="yes" xml:space="preserve">
          <source>A list of the nodes where the server terminated before sending any reply.</source>
          <target state="translated">サーバが応答を送信する前に終了したノードのリスト。</target>
        </trans-unit>
        <trans-unit id="86b3af01504c95f1ff0a3bad6e86965e662943b1" translate="yes" xml:space="preserve">
          <source>A list of tokens produced by the scanner should end with a special &lt;code&gt;end_of_input&lt;/code&gt; tuple which the parser is looking for. The format of this tuple should be &lt;code&gt;{Endsymbol, LastLineNumber}&lt;/code&gt;, where &lt;code&gt;Endsymbol&lt;/code&gt; is an identifier that is distinguished from all the terminal and non-terminal categories of the syntax rules. The &lt;code&gt;Endsymbol&lt;/code&gt; may be declared in the grammar file (see below).</source>
          <target state="translated">スキャナーによって生成されたトークンのリストは、パーサーが探している特別な &lt;code&gt;end_of_input&lt;/code&gt; タプルで終わる必要があります。このタプルの形式は &lt;code&gt;{Endsymbol, LastLineNumber}&lt;/code&gt; である &lt;code&gt;Endsymbol&lt;/code&gt; があります。ここで、Endsymbolは、構文規則のすべての終端および非終端カテゴリと区別される識別子です。 &lt;code&gt;Endsymbol&lt;/code&gt; は文法ファイル内で宣言することができる（下記参照）。</target>
        </trans-unit>
        <trans-unit id="c2109516cde7b07bab03027450759556426aff7c" translate="yes" xml:space="preserve">
          <source>A list of tuples containing results for individual schedulers as well as aggregated averages. &lt;code&gt;Util&lt;/code&gt; is the scheduler utilization as a floating point value between 0.0 and 1.0. &lt;code&gt;Percent&lt;/code&gt; is the same utilization as a more human readable string expressed in percent.</source>
          <target state="translated">個々のスケジューラーの結果および集約された平均の結果を含むタプルのリスト。 &lt;code&gt;Util&lt;/code&gt; は、0.0〜1.0の浮動小数点値としてのスケジューラの使用率です。 &lt;code&gt;Percent&lt;/code&gt; は、パーセントで表される、より人間が読める文字列と同じ使用率です。</target>
        </trans-unit>
        <trans-unit id="2ea742332d3293e5cbb6278b7055ef5cb1f029ed" translate="yes" xml:space="preserve">
          <source>A list of tuples, one for each function in a module, in decreasing &lt;code&gt;FuncCallCount&lt;/code&gt; order.</source>
          <target state="translated">&lt;code&gt;FuncCallCount&lt;/code&gt; の降順の、モジュール内の関数ごとに1つのタプルのリスト。</target>
        </trans-unit>
        <trans-unit id="d414f3936cc6ab0feb3f8f3f242331f59448312d" translate="yes" xml:space="preserve">
          <source>A list of tuples, one for each module except &lt;code&gt;cprof&lt;/code&gt;, in decreasing &lt;code&gt;ModCallCount&lt;/code&gt; order.</source>
          <target state="translated">タプルのリストを除く各モジュールに対して1つの &lt;code&gt;cprof&lt;/code&gt; 減少において、 &lt;code&gt;ModCallCount&lt;/code&gt; の順序を。</target>
        </trans-unit>
        <trans-unit id="2a515d4554cb24670f64c931a7f1c050e2d9f77e" translate="yes" xml:space="preserve">
          <source>A list representing the tail elements of list &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">リスト &lt;code&gt;t&lt;/code&gt; の末尾要素を表すリスト。</target>
        </trans-unit>
        <trans-unit id="49c534723b00f62164b408805f640dc737cc5620" translate="yes" xml:space="preserve">
          <source>A list sorted as follows:</source>
          <target state="translated">以下のようにソートされたリスト。</target>
        </trans-unit>
        <trans-unit id="f5ef252277490863011469cba50309fcc2a552c0" translate="yes" xml:space="preserve">
          <source>A list where the tail is a list is sometimes called a &lt;strong&gt;proper list&lt;/strong&gt;. It is allowed to have a list where the tail is not a list, for example, &lt;code&gt;[a|b]&lt;/code&gt;. However, this type of list is of little practical use.</source>
          <target state="translated">テールがリストであるリストは、&lt;strong&gt;適切なリスト&lt;/strong&gt;と呼ばれることもあり&lt;strong&gt;ます&lt;/strong&gt;。 &lt;code&gt;[a|b]&lt;/code&gt; ように、末尾がリストではないリストを持つことができます。ただし、このタイプのリストはほとんど実用的ではありません。</target>
        </trans-unit>
        <trans-unit id="efe540ae45894e0fdbc313179169b5e104e7d954" translate="yes" xml:space="preserve">
          <source>A list with as many elements as the &lt;code&gt;Cols&lt;/code&gt; list Each element can be:</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; リストと同じ数の要素を持つリスト各要素は次のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="9b2d1080e5c727bcb4180b6c054a8305dfd68dfc" translate="yes" xml:space="preserve">
          <source>A list with as many elements as the &lt;code&gt;Cols&lt;/code&gt; list, where each element is the value of the corresponding column. Each element can be:</source>
          <target state="translated">&lt;code&gt;Cols&lt;/code&gt; リストと同じ数の要素を含むリスト。各要素は対応する列の値です。各要素は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="1f4d38e7e775065b86b76958019e087be5338c72" translate="yes" xml:space="preserve">
          <source>A list with integers &amp;gt; 255 is considered an error if the Unicode translation modifier is not specified:</source>
          <target state="translated">Unicode変換修飾子が指定されていない場合、255より大きい整数のリストはエラーと見なされます。</target>
        </trans-unit>
        <trans-unit id="56ba062b97d1eab0e07bd7682980396fa3439b42" translate="yes" xml:space="preserve">
          <source>A list, empty or not</source>
          <target state="translated">リスト、空かどうか</target>
        </trans-unit>
        <trans-unit id="14565d44a02de06df96d7cafd4c87d042823638e" translate="yes" xml:space="preserve">
          <source>A listbox containing the names of all interpreted modules</source>
          <target state="translated">すべての解釈されたモジュールの名前を含むリストボックス</target>
        </trans-unit>
        <trans-unit id="d04bc0e41b8be3fc83734efd80c9fb1225163fbf" translate="yes" xml:space="preserve">
          <source>A listening transport presents its information slightly differently since there may be multiple accepted connections for the same &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;. The &lt;code&gt;transport&lt;/code&gt; info returned by a server with a single client connection might look as follows.</source>
          <target state="translated">同じ &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; に対して複数の受け入れられた接続が存在する可能性があるため、リスニングトランスポートはその情報をわずかに異なって提示します。 &lt;code&gt;transport&lt;/code&gt; 次のように単一のクライアント接続でサーバーから返された情報になります。</target>
        </trans-unit>
        <trans-unit id="9f635b77fbd8f2fa61daabd2f18c04196f559460" translate="yes" xml:space="preserve">
          <source>A literal &lt;code&gt;&lt;a href=&quot;#query_list_comprehension&quot;&gt;query list comprehension&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リテラル &lt;code&gt;&lt;a href=&quot;#query_list_comprehension&quot;&gt;query list comprehension&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17c58bfa57cd941d6af606b21964e3471f8b0dec" translate="yes" xml:space="preserve">
          <source>A literal data character</source>
          <target state="translated">リテラルデータ文字</target>
        </trans-unit>
        <trans-unit id="b9eff8ef6bae96d4d99cb1d0d45944faf85b28e0" translate="yes" xml:space="preserve">
          <source>A literal string can be written instead of an element:</source>
          <target state="translated">要素の代わりにリテラル文字列を書くことができます。</target>
        </trans-unit>
        <trans-unit id="c5bb25cde669006f83df9c8db3230c71118a01ae" translate="yes" xml:space="preserve">
          <source>A loaded NIF library is tied to the Erlang module instance that loaded it. If the module is upgraded, the new module instance needs to load its own NIF library (or maybe choose not to). The new module instance can, however, choose to load the exact same NIF library as the old code if it wants to. Sharing the dynamic library means that static data defined by the library is shared as well. To avoid unintentionally shared static data between module instances, each Erlang module version can keep its own private data. This private data can be set when the NIF library is loaded and later retrieved by calling &lt;code&gt;&lt;a href=&quot;#enif_priv_data&quot;&gt;enif_priv_data&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ロードされたNIFライブラリは、それをロードしたErlangモジュールインスタンスに関連付けられています。モジュールがアップグレードされる場合、新しいモジュールインスタンスは独自のNIFライブラリをロードする必要があります（またはロードしないことを選択する必要があります）。ただし、新しいモジュールインスタンスは、必要に応じて、古いコードとまったく同じNIFライブラリをロードすることを選択できます。動的ライブラリを共有するとは、ライブラリによって定義された静的データも共有されることを意味します。モジュールインスタンス間で意図せずに共有される静的データを回避するために、Erlangモジュールの各バージョンは独自のプライベートデータを保持できます。このプライベートデータは、NIFライブラリが読み込まれたときに設定され、後で &lt;code&gt;&lt;a href=&quot;#enif_priv_data&quot;&gt;enif_priv_data&lt;/a&gt;&lt;/code&gt; を呼び出して取得できます。</target>
        </trans-unit>
        <trans-unit id="3b6d76f899d39de86797bece2df0524e5c5bc58f" translate="yes" xml:space="preserve">
          <source>A log file can be opened more than once by giving different values to option &lt;code&gt;name&lt;/code&gt; or by using the same file when distributing a log on different nodes. It is up to the user of module &lt;code&gt;disk_log&lt;/code&gt; to ensure that not more than one disk log process has write access to any file, otherwise the file can be corrupted.</source>
          <target state="translated">オプション &lt;code&gt;name&lt;/code&gt; 異なる値を指定するか、異なるノードにログを配布するときに同じファイルを使用することにより、ログファイルを複数回開くことができます。1つ以上のディスクログプロセスがどのファイルにも書き込みアクセスできないようにするのは、モジュール &lt;code&gt;disk_log&lt;/code&gt; のユーザー次第です。そうしないと、ファイルが破損する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0f75009c18af2951c814381c778a999ec618f179" translate="yes" xml:space="preserve">
          <source>A log file for one particular test case. Also called the test case log file.</source>
          <target state="translated">ある特定のテストケースのログファイル。テストケースログファイルとも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="6a0809efff21f90864c4f42725c904032725ee3b" translate="yes" xml:space="preserve">
          <source>A logical error is when a program does not behave as intended, but does not crash. An example is that nothing happens when a button in a graphical user interface is clicked.</source>
          <target state="translated">論理エラーとは、プログラムが意図した通りに動作しないが、クラッシュしない場合のことです。例としては、グラフィカルユーザーインターフェースのボタンをクリックしても何も起こらないことが挙げられます。</target>
        </trans-unit>
        <trans-unit id="874913df600124a6285f4364c4fbf70b34e930c1" translate="yes" xml:space="preserve">
          <source>A long line can be broken into shorter lines by a placing a &lt;code&gt;\&lt;/code&gt; before the newline.</source>
          <target state="translated">長い行は、改行の前に &lt;code&gt;\&lt;/code&gt; を配置することで、短い行に分割できます。</target>
        </trans-unit>
        <trans-unit id="5ca61b37a0ea4d7b34c40913d6020ff25d24aa5f" translate="yes" xml:space="preserve">
          <source>A long queue of requests can cause a user-perceived delay, as earlier requests can take a long time to complete. The HTTP/1.1 specification suggests a limit of two persistent connections per server, which is the default value of option &lt;code&gt;max_sessions&lt;/code&gt;.</source>
          <target state="translated">以前のリクエストは完了するまでに長い時間がかかる可能性があるため、リクエストのキューが長いと、ユーザーが感じる遅延が発生する可能性があります。HTTP / 1.1仕様では、サーバーごとに2つの永続的接続の制限を提案しています。これは、オプション &lt;code&gt;max_sessions&lt;/code&gt; のデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="4935bb183b98bea21599c5ff3981cab6721e4f54" translate="yes" xml:space="preserve">
          <source>A macro &lt;code&gt;?Func(Arg1,...,ArgN)&lt;/code&gt; is replaced with &lt;code&gt;Replacement&lt;/code&gt;, where all occurrences of a variable &lt;code&gt;Var&lt;/code&gt; from the macro definition are replaced with the corresponding argument &lt;code&gt;Arg&lt;/code&gt;.</source>
          <target state="translated">マクロ &lt;code&gt;?Func(Arg1,...,ArgN)&lt;/code&gt; は &lt;code&gt;Replacement&lt;/code&gt; に置き換えられます。ここで、マクロ定義からの変数 &lt;code&gt;Var&lt;/code&gt; のすべての出現箇所は、対応する引数 &lt;code&gt;Arg&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="9d257ea7c2cd44ef76446306fb9244bed68bdcdf" translate="yes" xml:space="preserve">
          <source>A macro &lt;code&gt;?Func(Arg1,...,ArgN)&lt;/code&gt; with a (possibly empty) list of arguments results in an error message if there is at least one definition of &lt;code&gt;Func&lt;/code&gt; with arguments, but none with N arguments.</source>
          <target state="translated">（おそらく空の）引数のリストを持つマクロ &lt;code&gt;?Func(Arg1,...,ArgN)&lt;/code&gt; は、引数を持つ &lt;code&gt;Func&lt;/code&gt; の定義が少なくとも1つあるが、N個の引数を持つものがない場合、エラーメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="b1a7684d730263c657e047ab83e0ed99db2901a8" translate="yes" xml:space="preserve">
          <source>A macro can also be invoked from within another macro. For example, &lt;code&gt;move_deallocate_return/2&lt;/code&gt; avoids repeating code by invoking &lt;code&gt;$deallocate_return()&lt;/code&gt; as a macro:</source>
          <target state="translated">マクロは、別のマクロ内から呼び出すこともできます。たとえば、 &lt;code&gt;move_deallocate_return/2&lt;/code&gt; は、マクロとして &lt;code&gt;$deallocate_return()&lt;/code&gt; deallocate_return （）を呼び出すことにより、コードの繰り返しを回避します。</target>
        </trans-unit>
        <trans-unit id="73f534c58d9ea31eaf8fb9427562c3ead1595373" translate="yes" xml:space="preserve">
          <source>A macro definition can be placed anywhere among the attributes and function declarations of a module, but the definition must come before any usage of the macro.</source>
          <target state="translated">マクロ定義は、モジュールの属性や関数宣言のどこにでも配置できますが、定義はマクロを使用する前に来る必要があります。</target>
        </trans-unit>
        <trans-unit id="98be1362f60e2ee14c3e74a98f904123979eba5e" translate="yes" xml:space="preserve">
          <source>A macro definition whose name and arity matches a family of specific instructions is assumed to be the implementation of that instruction.</source>
          <target state="translated">名前とアリティが特定の命令のファミリに一致するマクロ定義は、その命令の実装であると仮定されます。</target>
        </trans-unit>
        <trans-unit id="5ba3e72543889c84d73759d1071163c5b4427577" translate="yes" xml:space="preserve">
          <source>A macro definitions must start at the beginning of the line (no spaces allowed), the opening curly bracket must be on the same line, and the finishing curly bracket must be at the beginning of a line. It is recommended that the macro body is properly indented.</source>
          <target state="translated">マクロの定義は、行頭から始めなければなりません(スペースは許されません)、開始の中括弧は同じ行に、終了の中括弧は行頭になければなりません。マクロ本体は適切にインデントすることを推奨します。</target>
        </trans-unit>
        <trans-unit id="b023cfdfd3e8c944def982069911746c56dbb5ff" translate="yes" xml:space="preserve">
          <source>A macro is also used when spawning the server process:</source>
          <target state="translated">マクロは、サーバープロセスをスポーンする際にも使用されます。</target>
        </trans-unit>
        <trans-unit id="7f21e1aec85a7381be96d5bfbfec7f097bd47be9" translate="yes" xml:space="preserve">
          <source>A macro is defined as follows:</source>
          <target state="translated">マクロは以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="ce03814050d5f8680e3201e0fe96acef21b95f3d" translate="yes" xml:space="preserve">
          <source>A macro is used as follows:</source>
          <target state="translated">マクロは以下のように使用します。</target>
        </trans-unit>
        <trans-unit id="88726427099902153bb75f43bd476a92b9488c2a" translate="yes" xml:space="preserve">
          <source>A manager generates commands and receives notifications from agents. There usually are only a few managers in a system.</source>
          <target state="translated">マネージャーはコマンドを生成し、エージェントからの通知を受け取ります。通常、システムには数人のマネージャしかいません。</target>
        </trans-unit>
        <trans-unit id="11e6d2013425970bf367a17f1b0c89bb48e7ff98" translate="yes" xml:space="preserve">
          <source>A map containing information about a specific thread. The percentages in the map can be either run-time or real-time depending on if &lt;code&gt;runtime&lt;/code&gt; or &lt;code&gt;realtime&lt;/code&gt; was requested from &lt;code&gt;&lt;a href=&quot;#stats-2&quot;&gt;stats/2&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;system&lt;/code&gt; is the percentage of total system time for this specific thread.</source>
          <target state="translated">特定のスレッドに関する情報を含むマップ。マップのパーセンテージは、 &lt;code&gt;runtime&lt;/code&gt; または &lt;code&gt;realtime&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#stats-2&quot;&gt;stats/2&lt;/a&gt;&lt;/code&gt; から要求されたかどうかに応じて、ランタイムまたはリアルタイムのいずれかになります。 &lt;code&gt;system&lt;/code&gt; は、この特定のスレッドの合計システム時間の割合です。</target>
        </trans-unit>
        <trans-unit id="c1a5aa45e09b54b7bc479445ee3316a7d38b6bc0" translate="yes" xml:space="preserve">
          <source>A map containing the different microstate accounting states and the number of microseconds spent in it.</source>
          <target state="translated">異なるマイクロステートの会計状態と、その中で費やされたマイクロ秒数を含むマップ。</target>
        </trans-unit>
        <trans-unit id="55baef3a4a4f36d3a95ce66a57813b6156ada372" translate="yes" xml:space="preserve">
          <source>A map containing the different microstate accounting states. Each value in the map contains another map with the percentage of time that this thread has spent in the specific state. Both the percentage of &lt;code&gt;system&lt;/code&gt; time and the time for that specific &lt;code&gt;thread&lt;/code&gt; is part of the map.</source>
          <target state="translated">さまざまなマイクロステートアカウンティング状態を含むマップ。マップ内の各値には、このスレッドが特定の状態で費やした時間の割合を示す別のマップが含まれています。 &lt;code&gt;system&lt;/code&gt; 時間の割合とその特定の &lt;code&gt;thread&lt;/code&gt; 時間の両方がマップの一部です。</target>
        </trans-unit>
        <trans-unit id="55c86ea1a266f601e2fcf39f41d436ed4bb1d415" translate="yes" xml:space="preserve">
          <source>A map is a compound data type with a variable number of key-value associations:</source>
          <target state="translated">マップは、可変数のキーと値の関連付けを持つ複合データ型です。</target>
        </trans-unit>
        <trans-unit id="d505ce33814e76ba28c2120be515c6067e3749b3" translate="yes" xml:space="preserve">
          <source>A map iterator is only useful during the lifetime of environment &lt;code&gt;env&lt;/code&gt; that the &lt;code&gt;map&lt;/code&gt; belongs to. The iterator must be destroyed by calling &lt;code&gt;&lt;a href=&quot;#enif_map_iterator_destroy&quot;&gt; enif_map_iterator_destroy&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">マップイテレータは、 &lt;code&gt;map&lt;/code&gt; 属する環境 &lt;code&gt;env&lt;/code&gt; の存続期間中にのみ役立ちます。イテレータは、 &lt;code&gt;&lt;a href=&quot;#enif_map_iterator_destroy&quot;&gt; enif_map_iterator_destroy&lt;/a&gt;&lt;/code&gt; を呼び出して破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="6df3d7501dc214f5a620dc3e70ec00231ed3a7da" translate="yes" xml:space="preserve">
          <source>A map iterator is only useful during the lifetime of environment &lt;code&gt;env&lt;/code&gt; that the &lt;code&gt;map&lt;/code&gt; belongs to. The iterator must be destroyed by calling &lt;code&gt;&lt;a href=&quot;#enif_map_iterator_destroy&quot;&gt;enif_map_iterator_destroy&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">マップ反復子は、 &lt;code&gt;map&lt;/code&gt; 属する環境 &lt;code&gt;env&lt;/code&gt; の存続期間中にのみ役立ちます。反復子は &lt;code&gt;&lt;a href=&quot;#enif_map_iterator_destroy&quot;&gt;enif_map_iterator_destroy&lt;/a&gt;&lt;/code&gt; を呼び出して破棄する必要があります。</target>
        </trans-unit>
        <trans-unit id="48183a4afcb12654d2835dae35952f5ae81cc70f" translate="yes" xml:space="preserve">
          <source>A map must be specified with the number of key-value pairs &lt;code&gt;N&lt;/code&gt;. The key-value pairs must precede the &lt;code&gt;ERL_DRV_MAP&lt;/code&gt; in this order: &lt;code&gt;key1,value1,key2,value2,...,keyN,valueN&lt;/code&gt;. Duplicate keys are not allowed.</source>
          <target state="translated">マップは、キーと値のペア &lt;code&gt;N&lt;/code&gt; の数で指定する必要があります。キーと値のペアは、次の順序で &lt;code&gt;ERL_DRV_MAP&lt;/code&gt; に先行する必要があります： &lt;code&gt;key1,value1,key2,value2,...,keyN,valueN&lt;/code&gt; 。重複するキーは許可されていません。</target>
        </trans-unit>
        <trans-unit id="31783f08d32874056a3057b68b1693f84e957994" translate="yes" xml:space="preserve">
          <source>A match specification can turn on or off sequential tracing. This function returns a match specification, which turns on sequential tracing with the specified &lt;code&gt;Flags&lt;/code&gt;.</source>
          <target state="translated">一致指定では、順次トレースをオンまたはオフにできます。この関数は、指定された &lt;code&gt;Flags&lt;/code&gt; を使用した順次トレースをオンにする一致指定を返します。</target>
        </trans-unit>
        <trans-unit id="a6ddfb750b1e05982e25e257ab27afe27127e930" translate="yes" xml:space="preserve">
          <source>A match specification for &lt;code&gt;'receive'&lt;/code&gt; trace can use all guard and body functions except &lt;code&gt;caller&lt;/code&gt;, &lt;code&gt;is_seq_trace&lt;/code&gt;, &lt;code&gt;get_seq_token&lt;/code&gt;, &lt;code&gt;set_seq_token&lt;/code&gt;, &lt;code&gt;enable_trace&lt;/code&gt;, &lt;code&gt;disable_trace&lt;/code&gt;, &lt;code&gt;trace&lt;/code&gt;, &lt;code&gt;silent&lt;/code&gt;, and &lt;code&gt;process_dump&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;'receive'&lt;/code&gt; トレースの一致指定では、 &lt;code&gt;caller&lt;/code&gt; 、 &lt;code&gt;is_seq_trace&lt;/code&gt; 、 &lt;code&gt;get_seq_token&lt;/code&gt; 、 &lt;code&gt;set_seq_token&lt;/code&gt; 、 &lt;code&gt;enable_trace&lt;/code&gt; 、 &lt;code&gt;disable_trace&lt;/code&gt; 、 &lt;code&gt;trace&lt;/code&gt; 、 &lt;code&gt;silent&lt;/code&gt; 、および &lt;code&gt;process_dump&lt;/code&gt; を除くすべてのガードおよびボディ関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="3c1a2a4c3c454f94b1fa52f933e896cf4b6f1dcf" translate="yes" xml:space="preserve">
          <source>A match specification for &lt;code&gt;send&lt;/code&gt; trace can use all guard and body functions except &lt;code&gt;caller&lt;/code&gt;.</source>
          <target state="translated">トレース &lt;code&gt;send&lt;/code&gt; 一致指定では、 &lt;code&gt;caller&lt;/code&gt; を除くすべてのガード関数と本文関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="775d888e22b3e82c594b4190a83e5f1b3950e566" translate="yes" xml:space="preserve">
          <source>A match specification used in &lt;code&gt;ets(3)&lt;/code&gt; can be described in the following &lt;strong&gt;informal&lt;/strong&gt; grammar:</source>
          <target state="translated">&lt;code&gt;ets(3)&lt;/code&gt; で使用される一致指定は、次の&lt;strong&gt;非公式な&lt;/strong&gt;文法で説明できます。</target>
        </trans-unit>
        <trans-unit id="83306dec354257cfad7ed48f591c0ff422b66b68" translate="yes" xml:space="preserve">
          <source>A match specification used in tracing can be described in the following &lt;strong&gt;informal&lt;/strong&gt; grammar:</source>
          <target state="translated">トレースで使用される一致指定は、次の&lt;strong&gt;非公式な&lt;/strong&gt;文法で説明できます。</target>
        </trans-unit>
        <trans-unit id="c3565e8901b4b3516619d211f5de1eb7c7f5a2de" translate="yes" xml:space="preserve">
          <source>A match specification, see above.</source>
          <target state="translated">一致する仕様、上記参照。</target>
        </trans-unit>
        <trans-unit id="abb2961d578d0b3c60f269fc6add18fea6c7cde0" translate="yes" xml:space="preserve">
          <source>A match specifications with excessive nesting will cause a &lt;code&gt;&lt;a href=&quot;#ets_failures&quot;&gt;system_limit&lt;/a&gt;&lt;/code&gt; error exception to be raised.</source>
          <target state="translated">入れ子が多すぎる一致仕様では、 &lt;code&gt;&lt;a href=&quot;#ets_failures&quot;&gt;system_limit&lt;/a&gt;&lt;/code&gt; エラー例外が発生します。</target>
        </trans-unit>
        <trans-unit id="bfda4d3ad9a01b6a5ad6d226917a35814c884393" translate="yes" xml:space="preserve">
          <source>A match with the string &quot;aaaa&quot; always fails, but the callout is taken before each backtrack occurs (in this example, 10 times).</source>
          <target state="translated">文字列 &quot;aaaa&quot; との一致は常に失敗しますが、各バックトラックが発生する前にコールアウトが行われます(この例では 10 回)。</target>
        </trans-unit>
        <trans-unit id="6f29c903e3589affa8d324ed95b31c5c61e91931" translate="yes" xml:space="preserve">
          <source>A memory segment allocator. It is used by other allocators for allocating memory segments and is only available on systems that have the &lt;code&gt;mmap&lt;/code&gt; system call. Memory segments that are deallocated are kept for a while in a segment cache before they are destroyed. When segments are allocated, cached segments are used if possible instead of creating new segments. This to reduce the number of system calls made.</source>
          <target state="translated">メモリセグメントアロケータ。これは、メモリセグメントを割り当てるために他のアロケータによって使用され、 &lt;code&gt;mmap&lt;/code&gt; システムコールを持つシステムでのみ使用できます。割り当て解除されたメモリセグメントは、破棄される前にしばらくセグメントキャッシュに保持されます。セグメントが割り当てられると、新しいセグメントを作成する代わりに、可能であればキャッシュされたセグメントが使用されます。これにより、行われるシステムコールの数が減ります。</target>
        </trans-unit>
        <trans-unit id="12c52bcf9d23dfb0dbc1111b21b3e77c0d64c7e0" translate="yes" xml:space="preserve">
          <source>A middlebox which forwards ClientHello parameters it does not understand MUST NOT process any messages beyond that ClientHello. It MUST forward all subsequent traffic unmodified. Otherwise, it may fail to interoperate with newer clients and servers.</source>
          <target state="translated">理解できない ClientHello パラメータを転送するミドルボックスは、その ClientHello を超えたメッセージを処理してはならない[MUST NOT]。それ以降のすべてのトラフィックを変更せずに転送しなければならない[MUST]。そうしないと、新しいクライアントやサーバとの相互運用に失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="22559646ed04a3865a223cef10ef45e28e857451" translate="yes" xml:space="preserve">
          <source>A middlebox which terminates a TLS connection MUST behave as a compliant TLS server</source>
          <target state="translated">TLS接続を終了するミドルボックスは、準拠したTLSサーバとして動作しなければならない[MUST]。</target>
        </trans-unit>
        <trans-unit id="95c010e88e46ea60a66fde46681834435a05128c" translate="yes" xml:space="preserve">
          <source>A minimal example of a NIF library can look as follows:</source>
          <target state="translated">NIF ライブラリの最小の例は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="87e74e52d3b9087104d60a0e55cc35f5604c3259" translate="yes" xml:space="preserve">
          <source>A minimum Windows NT installation with networking needs 250 MB, and an extra 130 MB for the swap file.</source>
          <target state="translated">ネットワークを使用したWindows NTのインストールには最低でも250MB、スワップファイルには130MBの追加が必要です。</target>
        </trans-unit>
        <trans-unit id="ccca12c026cce7e56e7fa3fc8b384f432861042d" translate="yes" xml:space="preserve">
          <source>A misbehaving filter will be removed.</source>
          <target state="translated">誤動作しているフィルタは削除されます。</target>
        </trans-unit>
        <trans-unit id="06a13e586eee527b77c49434cc8f50ec42065c62" translate="yes" xml:space="preserve">
          <source>A module attribute consists of a tag and a value:</source>
          <target state="translated">モジュール属性はタグと値から構成されます。</target>
        </trans-unit>
        <trans-unit id="dab39b0e69b099bf9e59a93c7991371da0a76b13" translate="yes" xml:space="preserve">
          <source>A module can also be used to represent a test set; see &lt;code&gt;ModuleName&lt;/code&gt; under &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt; below.</source>
          <target state="translated">モジュールは、テストセットを表すためにも使用できます。以下の &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt; 下の &lt;code&gt;ModuleName&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c521c6a7b79de7232798a925aa632173f772fa44" translate="yes" xml:space="preserve">
          <source>A module can be specified by its module name (atom) or filename.</source>
          <target state="translated">モジュールは、モジュール名(アトム)またはファイル名で指定することができます。</target>
        </trans-unit>
        <trans-unit id="4d45b4986dc3244ccb1e4bc16129b111cc4334f7" translate="yes" xml:space="preserve">
          <source>A module can export some types to declare that other modules are allowed to refer to them as &lt;strong&gt;remote types&lt;/strong&gt;. This declaration has the following form:</source>
          <target state="translated">モジュールは一部の型をエクスポートして、他のモジュールがそれらを&lt;strong&gt;リモート型&lt;/strong&gt;として参照できることを宣言でき&lt;strong&gt;ます&lt;/strong&gt;。この宣言の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c7142355abe56d1cdac6e2f4354e4ece086ad515" translate="yes" xml:space="preserve">
          <source>A module can use data generated by previous modules in the Erlang webserver API module sequence or generate data to be used by consecutive Erlang Web Server API modules. This is possible owing to an internal list of key-value tuples, referred to as interaction data.</source>
          <target state="translated">モジュールはErlang webserver APIモジュールのシーケンスの中で前のモジュールで生成されたデータを使ったり、連続したErlang Web Server APIモジュールで使われるデータを生成したりすることができます。これはインタラクションデータと呼ばれるキーと値のタプルの内部リストのおかげです。</target>
        </trans-unit>
        <trans-unit id="18900dbf59944d973af029df61cc566921cfdcc4" translate="yes" xml:space="preserve">
          <source>A module contains an &lt;code&gt;-on_load function&lt;/code&gt;.</source>
          <target state="translated">モジュールには &lt;code&gt;-on_load function&lt;/code&gt; が含まれています。</target>
        </trans-unit>
        <trans-unit id="93157c2c246b2925926264e6f2195084f98fb551" translate="yes" xml:space="preserve">
          <source>A module declaration consists of a sequence of forms, which are either function declarations or attributes.</source>
          <target state="translated">モジュール宣言は、関数宣言または属性のいずれかである一連のフォームから構成されます。</target>
        </trans-unit>
        <trans-unit id="610a0d8699dc82d5f83c6e9ce3301c3d01553b3b" translate="yes" xml:space="preserve">
          <source>A module implementing the &lt;code&gt;&lt;a href=&quot;snmpa_notification_delivery_info_receiver&quot;&gt;snmpa_notification_delivery_info_receiver&lt;/a&gt;&lt;/code&gt; behaviour. The info functions of this module will be called at various stages of delivery.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;snmpa_notification_delivery_info_receiver&quot;&gt;snmpa_notification_delivery_info_receiver&lt;/a&gt;&lt;/code&gt; 動作を実装するモジュール。このモジュールのinfo関数は、配信のさまざまな段階で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c6984ab40887600f2a1370e3539c8ccdba1c5de4" translate="yes" xml:space="preserve">
          <source>A module is included more than once in &lt;code&gt;Modules&lt;/code&gt;.</source>
          <target state="translated">モジュールは &lt;code&gt;Modules&lt;/code&gt; に複数含まれています。</target>
        </trans-unit>
        <trans-unit id="cd8890dc272bd36c3a480c734c6925501fff4e99" translate="yes" xml:space="preserve">
          <source>A module specified as a &lt;code&gt;transport_module&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; must implement the interface documented here. The interface consists of a function with which diameter starts a transport process and a message interface with which the transport process communicates with the process that starts it (aka its parent).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; への &lt;code&gt;transport_module&lt;/code&gt; として指定されたモジュールは、ここに記載されているインターフェイスを実装する必要があります。インターフェースは、diameterがトランスポートプロセスを開始する関数と、トランスポートプロセスがトランスポートプロセスを開始するプロセス（親）と通信するメッセージインターフェースで構成されています。</target>
        </trans-unit>
        <trans-unit id="492b06093c2441b11284458e2b4d042f4ba5283d" translate="yes" xml:space="preserve">
          <source>A monitor can be removed by calling &lt;code&gt;erlang:demonitor(Ref)&lt;/code&gt;.</source>
          <target state="translated">モニターを削除するには、 &lt;code&gt;erlang:demonitor(Ref)&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1c985866a716b1f38553284b766cb9d078544843" translate="yes" xml:space="preserve">
          <source>A monitor created as &lt;code&gt;unloaded_only&lt;/code&gt; behaves exactly as one created as &lt;code&gt;unloaded&lt;/code&gt; except that the &lt;code&gt;{'UP', reference(), driver, Name, unload_cancelled}&lt;/code&gt; message is never sent, but the monitor instead persists until the driver &lt;strong&gt;really&lt;/strong&gt; gets unloaded.</source>
          <target state="translated">作成モニター &lt;code&gt;unloaded_only&lt;/code&gt; とおりに作成したものとして振る舞う &lt;code&gt;unloaded&lt;/code&gt; こと以外 &lt;code&gt;{'UP', reference(), driver, Name, unload_cancelled}&lt;/code&gt; メッセージが送信されることはないが、運転者がするまでモニター代わりに持続&lt;strong&gt;実際に&lt;/strong&gt;アンロードされます。</target>
        </trans-unit>
        <trans-unit id="1f4b0ba77513970218ad1a2b88d07cb4eef5317e" translate="yes" xml:space="preserve">
          <source>A monitor from &lt;code&gt;To&lt;/code&gt; to &lt;code&gt;Result&lt;/code&gt; was set up on the node where &lt;code&gt;Result&lt;/code&gt; resides.</source>
          <target state="translated">モニター &lt;code&gt;To&lt;/code&gt; の &lt;code&gt;Result&lt;/code&gt; ノード上で設定された &lt;code&gt;Result&lt;/code&gt; 常駐します。</target>
        </trans-unit>
        <trans-unit id="0dcac2207e183cb309e308e8c36f24d54ce1572c" translate="yes" xml:space="preserve">
          <source>A monotonically increasing time provided by the Erlang runtime system. Erlang monotonic time increases since some unspecified point in time. To retrieve it, call &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt; erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangランタイムシステムによって提供される単調に増加する時間。Erlangの単調な時間は、特定されていない時点から増加します。それを取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt; erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="e224d8a9f9c0d94e691cbfa15fef0b1fe2f4e60f" translate="yes" xml:space="preserve">
          <source>A monotonically increasing time provided by the Erlang runtime system. Erlang monotonic time increases since some unspecified point in time. To retrieve it, call &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangランタイムシステムによって提供される単調に増加する時間。Erlang単調時間は、特定されていない時点から増加します。それを取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1bcff3bd090752a02621fd3d2ad9e629fddd5e95" translate="yes" xml:space="preserve">
          <source>A monotonically increasing time provided by the OS. This time does not leap and has a relatively steady frequency although not completely correct. However, it is not uncommon that OS monotonic time stops if the system is suspended. This time typically increases since some unspecified point in time that is not connected to &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt;. This type of time is not necessarily provided by all OSs.</source>
          <target state="translated">OSによって提供される単調に増加する時間。この時間は跳躍せず、完全に正しいわけではありませんが、比較的安定した周波数を持っています。ただし、システムがサスペンドされると、OSの単調時間が停止することも珍しくありません。この時間は、 &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; 接続されていない不特定の時点から増加します。このタイプの時間は、必ずしもすべてのOSによって提供されるわけではありません。</target>
        </trans-unit>
        <trans-unit id="5712c1400575e91c9656e681e7475784bdfd9eda" translate="yes" xml:space="preserve">
          <source>A more complicated example with two quad core processors, each processor in its own NUMA node. The ordering of logical processors is a bit weird. This to give a better example of identifier lists:</source>
          <target state="translated">2つのクアッドコアプロセッサで、それぞれのプロセッサを独自のNUMAノードに配置した、より複雑な例です。論理プロセッサの順序は少し奇妙です。これは、識別子リストのより良い例を示すためです。</target>
        </trans-unit>
        <trans-unit id="a0d3ff79b050cf4e67f5f12480ec66e526e82e53" translate="yes" xml:space="preserve">
          <source>A more detailed internal representation of the state of this process.</source>
          <target state="translated">この処理の状態をより詳細に内部表現したもの。</target>
        </trans-unit>
        <trans-unit id="2c7b4f8b72fc3001a39709ba6f707df737f50704" translate="yes" xml:space="preserve">
          <source>A more explicit way to cancel a timer is to use a &lt;code&gt;&lt;a href=&quot;#Transition%20Actions&quot;&gt; &lt;strong&gt;transition action&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; on the form &lt;code&gt; {TimeoutType, cancel} &lt;/code&gt; which is a feature introduced in OTP 22.1.</source>
          <target state="translated">タイマーをキャンセルするより明示的な方法は、フォーム &lt;code&gt; {TimeoutType, cancel} &lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;#Transition%20Actions&quot;&gt; &lt;strong&gt;transition action&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; を使用することです。これはOTP22.1で導入された機能です。 &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3c43b55cc6e4ec72f53a82fa0f070f9038b700e" translate="yes" xml:space="preserve">
          <source>A more precise language for MIB specification</source>
          <target state="translated">MIB仕様のためのより正確な言語</target>
        </trans-unit>
        <trans-unit id="d9a6a54885c00dec728fc7fc51d18dd588db7351" translate="yes" xml:space="preserve">
          <source>A more refined version of this format handler is function &lt;code&gt;handle_gc/4&lt;/code&gt; in module &lt;code&gt;multitrace.erl&lt;/code&gt; included in directory &lt;code&gt;src&lt;/code&gt; of the Observer application.</source>
          <target state="translated">このフォーマットハンドラのより洗練されたバージョンは、関数である &lt;code&gt;handle_gc/4&lt;/code&gt; モジュールで &lt;code&gt;multitrace.erl&lt;/code&gt; ディレクトリに含ま &lt;code&gt;src&lt;/code&gt; オブザーバーアプリケーション。</target>
        </trans-unit>
        <trans-unit id="5d37f040ad3ea680b60e046bb149872d221815ff" translate="yes" xml:space="preserve">
          <source>A multi-lingual SNMP manager.</source>
          <target state="translated">多言語SNMPマネージャ。</target>
        </trans-unit>
        <trans-unit id="9e37a488733c4647d4a17da583fd3b03c8d0d81b" translate="yes" xml:space="preserve">
          <source>A name (an Erlang atom) associated with a data value read from a configuration file.</source>
          <target state="translated">設定ファイルから読み込んだデータ値に関連付けられた名前(Erlangのアトム)。</target>
        </trans-unit>
        <trans-unit id="2416bd3c84f93d0172f4762c1b29e0836c7a7539" translate="yes" xml:space="preserve">
          <source>A name and association to configuration data introduced through a require statement, or a call to &lt;code&gt;&lt;a href=&quot;#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt;, for example, &lt;code&gt;ct:require(mynodename,{node,[telnet]})&lt;/code&gt;.</source>
          <target state="translated">requireステートメント、または &lt;code&gt;&lt;a href=&quot;#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt; への呼び出しによって導入された構成データへの名前と関連付け。たとえば、 &lt;code&gt;ct:require(mynodename,{node,[telnet]})&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64a56d53bccebb00764e45b858a26b5ebf2ade91" translate="yes" xml:space="preserve">
          <source>A name constructed from the name of the function in which they are created</source>
          <target state="translated">作成された関数の名前から構築された名前</target>
        </trans-unit>
        <trans-unit id="ccf5e0e4e127bfae4bef5668c5a9b13172a11e7a" translate="yes" xml:space="preserve">
          <source>A name for the data must be allocated in the suite using &lt;code&gt;require&lt;/code&gt; (see the example above). Pass this name as argument &lt;code&gt;SnmpAppConfName&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;ct_snmp:start/3&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ct_snmp&lt;/code&gt; specifies default values for some &lt;code&gt;SNMP&lt;/code&gt; application configuration parameters (such as &lt;code&gt;{verbosity,trace}&lt;/code&gt; for parameter &lt;code&gt;config&lt;/code&gt;). This set of defaults is merged with the parameters specified by the user. The user values override &lt;code&gt;ct_snmp&lt;/code&gt; defaults.</source>
          <target state="translated">データの名前は、 &lt;code&gt;require&lt;/code&gt; を使用してスイートに割り当てる必要があります（上記の例を参照）。この名前を引数 &lt;code&gt;SnmpAppConfName&lt;/code&gt; として &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;ct_snmp:start/3&lt;/a&gt;&lt;/code&gt; に渡します。 &lt;code&gt;ct_snmp&lt;/code&gt; は、一部の &lt;code&gt;SNMP&lt;/code&gt; アプリケーション構成パラメーター（パラメーター &lt;code&gt;config&lt;/code&gt; の &lt;code&gt;{verbosity,trace}&lt;/code&gt; など）のデフォルト値を指定します。このデフォルトのセットは、ユーザーが指定したパラメーターとマージされます。ユーザー値は &lt;code&gt;ct_snmp&lt;/code&gt; のデフォルトを上書きします。</target>
        </trans-unit>
        <trans-unit id="5489bf9abf580e46c80a7d46f5c6b357c56bfd5f" translate="yes" xml:space="preserve">
          <source>A name is always required with this verb. There can be as many instances of (*MARK) as you like in a pattern, and their names do not have to be unique.</source>
          <target state="translated">この動詞には必ず名前が必要です。(*MARK)のインスタンスは、パターン内に好きな数だけ持つことができ、その名前は一意である必要はありません。</target>
        </trans-unit>
        <trans-unit id="37561d5bd1b8f3c3ed788a8368cee35cffb7641d" translate="yes" xml:space="preserve">
          <source>A native function doing &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;lengthy work&lt;/a&gt;&lt;/code&gt; before returning degrades responsiveness of the VM, and can cause miscellaneous strange behaviors. Such strange behaviors include, but are not limited to, extreme memory usage, and bad load balancing between schedulers. Strange behaviors that can occur because of lengthy work can also vary between Erlang/OTP releases.</source>
          <target state="translated">戻る前に &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;lengthy work&lt;/a&gt;&lt;/code&gt; 行うネイティブ関数は、VMの応答性を低下させ、さまざまな奇妙な動作を引き起こす可能性があります。このような奇妙な動作には、極端なメモリ使用量、スケジューラ間の不適切なロードバランシングが含まれますが、これらに限定されません。長時間の作業が原因で発生する可能性のある奇妙な動作は、Erlang / OTPのリリース間でも異なる可能性があります。</target>
        </trans-unit>
        <trans-unit id="054cf9ceb563ed6f90ffbc9bbce068da6480e085" translate="yes" xml:space="preserve">
          <source>A native function is executed as a direct extension of the native code of the VM. Execution is not made in a safe environment. The VM &lt;strong&gt;cannot&lt;/strong&gt; provide the same services as provided when executing Erlang code, such as pre-emptive scheduling or memory protection. If the native function does not behave well, the whole VM will misbehave.</source>
          <target state="translated">ネイティブ関数は、VMのネイティブコードを直接拡張したものとして実行されます。安全な環境で実行されません。VM &lt;strong&gt;は&lt;/strong&gt;、プリエンプティブスケジューリングやメモリ保護など、Erlangコードの実行時に提供されるものと同じサービスを提供&lt;strong&gt;できません&lt;/strong&gt;。ネイティブ関数が適切に動作しない場合、VM全体が正しく動作しません。</target>
        </trans-unit>
        <trans-unit id="5d7156f3c126c629744aa907155b989bd0af5b92" translate="yes" xml:space="preserve">
          <source>A native function that crash will crash the whole VM.</source>
          <target state="translated">クラッシュするネイティブ関数は、VM全体をクラッシュさせます。</target>
        </trans-unit>
        <trans-unit id="1b2752eee15054c7525aaed65d65bee26e41c9b7" translate="yes" xml:space="preserve">
          <source>A native function that crashes will crash the whole VM.</source>
          <target state="translated">クラッシュするネイティブ関数は、VM全体をクラッシュさせます。</target>
        </trans-unit>
        <trans-unit id="a596b85ce60a4ebd518468dd4ada66946ee5ba8d" translate="yes" xml:space="preserve">
          <source>A native signed 64-bit integer type.</source>
          <target state="translated">ネイティブの符号付き64ビット整数型。</target>
        </trans-unit>
        <trans-unit id="d333b99d2c176e6cef29cdbe662fff2fc82351f6" translate="yes" xml:space="preserve">
          <source>A native unsigned 64-bit integer type.</source>
          <target state="translated">ネイティブの符号なし64ビット整数型。</target>
        </trans-unit>
        <trans-unit id="1a25fa736ef55d7f9c1d89a3af60f13910153e4c" translate="yes" xml:space="preserve">
          <source>A negative &lt;code&gt;WindowBits&lt;/code&gt; value makes zlib ignore the zlib header (and checksum) from the stream. Notice that the zlib source mentions this only as a undocumented feature.</source>
          <target state="translated">負の &lt;code&gt;WindowBits&lt;/code&gt; 値は、zlibがストリームからのzlibヘッダー（およびチェックサム）を無視するようにします。zlibソースがこれを文書化されていない機能としてのみ言及していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bff6f239743ba458b6fef3d31577263304f30dcc" translate="yes" xml:space="preserve">
          <source>A negative length can be used to extract bytes at the end of a binary:</source>
          <target state="translated">負の長さは、バイナリの最後にバイトを抽出するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6a5647dc70e502438e63ae1f528d8168602285f6" translate="yes" xml:space="preserve">
          <source>A negative response can look as follows:</source>
          <target state="translated">否定的な反応は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="acfd9f30ed035c8f515380634a9f49e2e6305307" translate="yes" xml:space="preserve">
          <source>A negative value causes the termination of the runtime system to wait indefinitely until the crash dump file has been completly written. This is the default if option &lt;code&gt;-heart&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; passed to &lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; is not set.</source>
          <target state="translated">負の値を指定すると、ランタイムシステムの終了は、クラッシュダンプファイルが完全に書き込まれるまで無期限に待機します。オプションの場合、これがデフォルトです &lt;code&gt;-heart&lt;/code&gt; がされて&lt;strong&gt;いない&lt;/strong&gt;に渡さ &lt;code&gt;erl&lt;/code&gt; と &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; が設定されていません。</target>
        </trans-unit>
        <trans-unit id="9ad2ef1372f693b05aa57e2e774e90e14b42ac7f" translate="yes" xml:space="preserve">
          <source>A network interface filter can e.g. be used during testing or for load regulation.</source>
          <target state="translated">ネットワーク・インターフェース・フィルタは、例えば、テスト中や負荷調整のために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0081be6ade151701784fff921945a2cc10ab3867" translate="yes" xml:space="preserve">
          <source>A network interface filter can e.g. be used during testing or for load regulation. If the intended use is load regulation, see also &lt;code&gt;&lt;a href=&quot;snmp_config#agent_ni_req_limit&quot;&gt;req_limit&lt;/a&gt;&lt;/code&gt; and the function &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;register_notification_filter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ネットワークインターフェイスフィルターは、たとえば、テスト中または負荷調整に使用できます。使用目的が負荷調整である場合は、 &lt;code&gt;&lt;a href=&quot;snmp_config#agent_ni_req_limit&quot;&gt;req_limit&lt;/a&gt;&lt;/code&gt; および関数 &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;register_notification_filter&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="a5da2ab0a310bd02dc005df1f2a390906381786a" translate="yes" xml:space="preserve">
          <source>A network interface filter can e.g. be used during testing or for load regulation. If the intended use is load regulation, see also &lt;code&gt;req_limit&lt;/code&gt; and the function &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;register_notification_filter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ネットワークインターフェイスフィルターは、たとえば、テスト中または負荷調整に使用できます。使用目的が負荷調整の場合は、 &lt;code&gt;req_limit&lt;/code&gt; および関数 &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;register_notification_filter&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e7a37e856dd2d89d23cca0a3d2993676ef15b297" translate="yes" xml:space="preserve">
          <source>A new &lt;code&gt;person&lt;/code&gt; record is created as follows:</source>
          <target state="translated">新しい &lt;code&gt;person&lt;/code&gt; レコードは次のように作成されます。</target>
        </trans-unit>
        <trans-unit id="0cb57df1a585271753d77c0b683d96263a8aeb0a" translate="yes" xml:space="preserve">
          <source>A new boot script was generated, without the &lt;code&gt;local&lt;/code&gt; option set, before the release package was made. In the release package, all application directories are placed under &lt;code&gt;lib&lt;/code&gt;. You do not know where the release package will be installed, so no hard-coded absolute paths are allowed.</source>
          <target state="translated">リリースパッケージが作成される前に、 &lt;code&gt;local&lt;/code&gt; オプションを設定せずに、新しいブートスクリプトが生成されました。リリースパッケージでは、すべてのアプリケーションディレクトリが &lt;code&gt;lib&lt;/code&gt; の下に配置されます。リリースパッケージがインストールされる場所がわからないため、ハードコードされた絶対パスは許可されません。</target>
        </trans-unit>
        <trans-unit id="207531ae5013e77eabff64456ffa724e18f8f181" translate="yes" xml:space="preserve">
          <source>A new config file format was introduced.</source>
          <target state="translated">新しいコンフィグファイルのフォーマットが導入されました。</target>
        </trans-unit>
        <trans-unit id="0cd3d52715f74b16be431ae39bdcad7432af2c3a" translate="yes" xml:space="preserve">
          <source>A new interface &lt;code&gt;delete/1&lt;/code&gt; is now added to handle the case when a process wants to discard an index table (i.e. to build a completely new). Any application using transient snmp indexes has to be modified to handle this.</source>
          <target state="translated">プロセスがインデックステーブルを破棄する（つまり、完全に新しいテーブルを作成する）必要がある場合に対処するために、新しいインターフェイス &lt;code&gt;delete/1&lt;/code&gt; が追加されました。一時的なsnmpインデックスを使用するアプリケーションは、これを処理するように変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="f3852a09c1ed59005d5821e005f965364a5620d8" translate="yes" xml:space="preserve">
          <source>A new process is started by the application of &lt;code&gt;Module:Function&lt;/code&gt; to &lt;code&gt;Args&lt;/code&gt; on the node &lt;code&gt;Node&lt;/code&gt;. The process is monitored at the same time. Returns the process identifier and a reference for the monitor. Otherwise works like &lt;code&gt;&lt;a href=&quot;#spawn-3&quot;&gt;spawn/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module:Function&lt;/code&gt; をノード &lt;code&gt;Node&lt;/code&gt; の &lt;code&gt;Args&lt;/code&gt; に適用すると、新しいプロセスが開始されます。プロセスは同時に監視されます。プロセス識別子とモニターの参照を返します。それ以外の場合は &lt;code&gt;&lt;a href=&quot;#spawn-3&quot;&gt;spawn/3&lt;/a&gt;&lt;/code&gt; のように機能します。</target>
        </trans-unit>
        <trans-unit id="7813433a94ab5122a108632d44422a9630945f8c" translate="yes" xml:space="preserve">
          <source>A new process is started by the application of &lt;code&gt;Module:Function&lt;/code&gt; to &lt;code&gt;Args&lt;/code&gt;. The process is monitored at the same time. Returns the process identifier and a reference for the monitor. Otherwise works like &lt;code&gt;&lt;a href=&quot;#spawn-3&quot;&gt;spawn/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module:Function&lt;/code&gt; を &lt;code&gt;Args&lt;/code&gt; に適用することにより、新しいプロセスが開始されます。プロセスは同時に監視されます。プロセス識別子とモニターの参照を返します。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;#spawn-3&quot;&gt;spawn/3&lt;/a&gt;&lt;/code&gt; のように機能します。</target>
        </trans-unit>
        <trans-unit id="4c6aeb17dbb1f994107439b1a93fe0bdeabaadd7" translate="yes" xml:space="preserve">
          <source>A new record has been written. &lt;code&gt;NewRecord&lt;/code&gt; contains the new record value and &lt;code&gt;OldRecords&lt;/code&gt; contains the records before the operation is performed. Notice that the new content depends on the table type.</source>
          <target state="translated">新しいレコードが書き込まれました。操作が実行される前に、 &lt;code&gt;NewRecord&lt;/code&gt; には新しいレコード値が含まれ、 &lt;code&gt;OldRecords&lt;/code&gt; にはレコードが含まれます。新しいコンテンツはテーブルのタイプによって異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="eecdd1aca65c090cd037cecb43b60372b3e2d23d" translate="yes" xml:space="preserve">
          <source>A new record has been written. &lt;code&gt;NewRecord&lt;/code&gt; contains the new record value.</source>
          <target state="translated">新しいレコードが書き込まれました。 &lt;code&gt;NewRecord&lt;/code&gt; には、新しいレコード値が含まれています。</target>
        </trans-unit>
        <trans-unit id="45c9322699414697ef1b7c8765e8214aef90bc96" translate="yes" xml:space="preserve">
          <source>A new tuple with the tag &lt;code&gt;available_memory&lt;/code&gt; will be added to the result when this value is provided by the kernel. The &lt;code&gt;available_memory&lt;/code&gt; value informs about the amount memory that is available for use if there is an increased memory need. This value is not based on a calculation of the other provided values and should give a better value of the amount of memory that actually is available than calculating a value based on the other values reported.</source>
          <target state="translated">この値がカーネルによって提供されると、タグ &lt;code&gt;available_memory&lt;/code&gt; を持つ新しいタプルが結果に追加されます。 &lt;code&gt;available_memory&lt;/code&gt; 増加したメモリ必要がある場合に使用可能な量のメモリに関する値知らせます。この値は、提供された他の値の計算に基づくものではなく、報告された他の値に基づいて値を計算するよりも、実際に使用可能なメモリ量のより良い値を提供するはずです。</target>
        </trans-unit>
        <trans-unit id="bcbee27c7629c70c521974bc4a2ef6365b44965e" translate="yes" xml:space="preserve">
          <source>A new version of the &lt;code&gt;ch_app.app&lt;/code&gt; file must now be created, where the version is updated:</source>
          <target state="translated">&lt;code&gt;ch_app.app&lt;/code&gt; ファイルの新しいバージョンを作成する必要があります。バージョンは更新されています。</target>
        </trans-unit>
        <trans-unit id="207842ca1ef434b687fe891079409854db11ce8f" translate="yes" xml:space="preserve">
          <source>A newline convention can also be specified by starting a pattern string with one of the following five sequences:</source>
          <target state="translated">改行規則は、パターン文字列を以下の 5 つのシーケンスのいずれかで開始することで指定することもできます。</target>
        </trans-unit>
        <trans-unit id="810a5966eb1e7ee3bb3f54687643fa10446c0bcc" translate="yes" xml:space="preserve">
          <source>A newly spawned Erlang process uses 309 words of memory in the non-SMP emulator without HiPE support. (SMP support and HiPE support both add to this size.) The size can be found as follows:</source>
          <target state="translated">新しくスポーンされたErlangプロセスはHiPEをサポートしていない非SMPエミュレータで309ワードのメモリを使っています。(SMPサポートとHiPEサポートは両方ともこのサイズに加算されます。)サイズは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="1297f35b745c72bd20c54efe3dd92735d746a15b" translate="yes" xml:space="preserve">
          <source>A newly started erlang shell shows that no &lt;code&gt;'ssh-dss'&lt;/code&gt; is present in the &lt;code&gt;public_key&lt;/code&gt; entry:</source>
          <target state="translated">新しく開始されたerlangシェルは、 &lt;code&gt;public_key&lt;/code&gt; エントリに &lt;code&gt;'ssh-dss'&lt;/code&gt; が存在しないことを示しています。</target>
        </trans-unit>
        <trans-unit id="06c8c9ea0c1555c71b7dd9ae8ee6da8f6b7d0bc2" translate="yes" xml:space="preserve">
          <source>A nice feature is that a test specification that includes node information can still be used as input to the regular &lt;code&gt;Common Test&lt;/code&gt; server (as described in section &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt;). The result is that any test specified to run on a node with the same name as the &lt;code&gt;Common Test&lt;/code&gt; node in question (typically &lt;code&gt;ct@somehost&lt;/code&gt; if started with the &lt;code&gt;ct_run&lt;/code&gt; program), is performed. Tests without explicit node association are always performed too, of course.</source>
          <target state="translated">優れた機能は、ノード情報を含むテスト仕様を通常の &lt;code&gt;Common Test&lt;/code&gt; サーバーへの入力として使用できることです（「 &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; 説明）。その結果、問題の &lt;code&gt;Common Test&lt;/code&gt; ノードと同じ名前のノード（通常、 &lt;code&gt;ct_run&lt;/code&gt; プログラムで開始した場合は &lt;code&gt;ct@somehost&lt;/code&gt; ）で実行するように指定されたテストが実行されます。もちろん、明示的なノードの関連付けがないテストも常に実行されます。</target>
        </trans-unit>
        <trans-unit id="7ee9953adae41a7655f8d2084b4fa873e00e82bf" translate="yes" xml:space="preserve">
          <source>A node can crash (probably a buggy one, hence traced). Use &lt;code&gt;resume&lt;/code&gt; to resume tracing on the node automatically when it gets back. The failing node then tries to reconnect to trace control node when &lt;code&gt;Runtime_Tools&lt;/code&gt; is started. This implies that &lt;code&gt;Runtime_Tools&lt;/code&gt; must be included in the startup chain of other nodes (if not, you can still resume tracing by starting &lt;code&gt;Runtime_Tools&lt;/code&gt; manually, that is, by an RPC call).</source>
          <target state="translated">ノードはクラッシュする可能性があります（おそらくバグのあるノードであるため、トレースされます）。ノードが戻ったときに自動的にノードのトレースを &lt;code&gt;resume&lt;/code&gt; 、resumeを使用します。次に、 &lt;code&gt;Runtime_Tools&lt;/code&gt; が開始されると、障害のあるノードはトレースコントロールノードへの再接続を試みます。これは、 &lt;code&gt;Runtime_Tools&lt;/code&gt; が他のノードの起動チェーンに含まれている必要があることを意味します（含まれていない場合でも、 &lt;code&gt;Runtime_Tools&lt;/code&gt; を手動で、つまりRPC呼び出しでトレースを再開できます）。</target>
        </trans-unit>
        <trans-unit id="e9ed4743bc1cec802b20617a0fd885483b2dd9dc" translate="yes" xml:space="preserve">
          <source>A node fetches the port number of another node through the EPMD (at the other host) to initiate a connection request.</source>
          <target state="translated">ノードは、接続要求を開始するために、EPMD(相手ホスト)を介して他のノードのポート番号を取得します。</target>
        </trans-unit>
        <trans-unit id="4faa439d4cf9e40f5ce1dc04ca048d241e286cf4" translate="yes" xml:space="preserve">
          <source>A node of type &lt;code&gt;map_expr&lt;/code&gt; is a leaf node if and only if it has no argument and no fields. A node of type &lt;code&gt;map_type&lt;/code&gt; is a leaf node if and only if it has no fields (&lt;code&gt;any_size&lt;/code&gt;). A node of type &lt;code&gt;tuple&lt;/code&gt; is a leaf node if and only if its arity is zero. A node of type &lt;code&gt;tuple_type&lt;/code&gt; is a leaf node if and only if it has no elements (&lt;code&gt;any_size&lt;/code&gt;).</source>
          <target state="translated">タイプ &lt;code&gt;map_expr&lt;/code&gt; のノードは、引数もフィールドもない場合に限り、リーフノードです。タイプ &lt;code&gt;map_type&lt;/code&gt; のノードは、フィールドがない（ &lt;code&gt;any_size&lt;/code&gt; ）場合に限り、リーフノードです。 &lt;code&gt;tuple&lt;/code&gt; タイプのノードは、そのアリティがゼロの場合に限り、リーフノードです。タイプ &lt;code&gt;tuple_type&lt;/code&gt; のノードは、要素がない場合（ &lt;code&gt;any_size&lt;/code&gt; ）に限り、リーフノードです。</target>
        </trans-unit>
        <trans-unit id="cb52c93cebdeac0dab7fcc67ec63e9553ad8a863" translate="yes" xml:space="preserve">
          <source>A node running on Windows can only start slave nodes on the host on which it is running.</source>
          <target state="translated">Windows上で動作しているノードは、そのノードが動作しているホスト上でのみスレーブノードを起動することができます。</target>
        </trans-unit>
        <trans-unit id="9d21f5fbd84596b473f63ef2991ce0e43cba7cfb" translate="yes" xml:space="preserve">
          <source>A node started in this way is fully functional, using TLS as the distribution protocol.</source>
          <target state="translated">このようにして起動されたノードは、配布プロトコルとしてTLSを使用して完全に機能しています。</target>
        </trans-unit>
        <trans-unit id="fc7f66a0ac45a7c84f0bb5f9e9d30342b7788580" translate="yes" xml:space="preserve">
          <source>A node started in this way will only be able to communicate with other nodes using SSL/TLS distribution over IPv6.</source>
          <target state="translated">このようにして起動したノードは、IPv6上でSSL/TLS配信を利用して他のノードと通信することしかできません。</target>
        </trans-unit>
        <trans-unit id="943b5fd70c0828774c26840cbeb96989a96b92f2" translate="yes" xml:space="preserve">
          <source>A node started in this way will only be able to communicate with other nodes using TLS distribution over IPv6.</source>
          <target state="translated">このようにして開始されたノードは、IPv6 上の TLS 配布を使用して他のノードとのみ通信できるようになります。</target>
        </trans-unit>
        <trans-unit id="15e879d0b785427426139719e5c9dfe725a5b841" translate="yes" xml:space="preserve">
          <source>A node started with command-line flag &lt;code&gt;-hidden&lt;/code&gt; (see &lt;code&gt;erl(1)&lt;/code&gt;) is said to be a &lt;strong&gt;hidden&lt;/strong&gt; node. A hidden node establishes hidden connections to nodes not part of the same global group, but normal (visible) connections to nodes part of the same global group.</source>
          <target state="translated">コマンドラインフラグ &lt;code&gt;-hidden&lt;/code&gt; （ &lt;code&gt;erl(1)&lt;/code&gt; を参照）で開始され&lt;strong&gt;た&lt;/strong&gt;ノードは、&lt;strong&gt;非表示&lt;/strong&gt;ノードと呼ば&lt;strong&gt;れ&lt;/strong&gt;ます。非表示ノードは、同じグローバルグループの一部ではないノードへの非表示の接続を確立しますが、同じグローバルグループの一部のノードへの通常の（可視）接続を確立します。</target>
        </trans-unit>
        <trans-unit id="20c980faeffa1454b2f85d7502b23e1c0b0103b4" translate="yes" xml:space="preserve">
          <source>A node unregisters itself from the EPMD by closing the TCP connection to EPMD established when the node was registered.</source>
          <target state="translated">ノードは,ノードが登録されたときに確立したEPMDへのTCP接続を閉じることで,EPMDからの登録を解除します。</target>
        </trans-unit>
        <trans-unit id="d42befae27c8be5c2d1b9032dc8b9a0535e6021b" translate="yes" xml:space="preserve">
          <source>A node with a long node name cannot communicate with a node with a short node name.</source>
          <target state="translated">長いノード名を持つノードは、短いノード名を持つノードと通信できません。</target>
        </trans-unit>
        <trans-unit id="5608a2aa0096e2c431c4d688274c5bfed3dfbe6a" translate="yes" xml:space="preserve">
          <source>A node with name &lt;code&gt;Name@Host&lt;/code&gt; already exists.</source>
          <target state="translated">&lt;code&gt;Name@Host&lt;/code&gt; という名前のノードは既に存在します。</target>
        </trans-unit>
        <trans-unit id="9de4833cf4636cc7347017906607c0375ae36fb9" translate="yes" xml:space="preserve">
          <source>A non-local return from a function. If evaluated within a &lt;code&gt;catch&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt; returns value &lt;code&gt;Any&lt;/code&gt;. Example:</source>
          <target state="translated">関数からのローカルでない戻り値。 &lt;code&gt;catch&lt;/code&gt; 内で評価された場合、 &lt;code&gt;catch&lt;/code&gt; は値 &lt;code&gt;Any&lt;/code&gt; を返します。例：</target>
        </trans-unit>
        <trans-unit id="3104d91a116c49b17930265301a213974b99a618" translate="yes" xml:space="preserve">
          <source>A non-terminal category can be used at the left hand side (= &lt;code&gt;lhs&lt;/code&gt;, or &lt;code&gt;head&lt;/code&gt;) of a grammar rule. It can also appear at the right hand side of rules.</source>
          <target state="translated">&lt;code&gt;lhs&lt;/code&gt; カテゴリは、文法規則の左側（= lhsまたは &lt;code&gt;head&lt;/code&gt; ）で使用できます。ルールの右側にも表示されます。</target>
        </trans-unit>
        <trans-unit id="522676de41bafa253c8f310dce88c669f1124e1c" translate="yes" xml:space="preserve">
          <source>A nonempty list &lt;code&gt;[E1, ..., Ej]&lt;/code&gt; of syntax trees. This is equivalent to passing &lt;code&gt;conjunction([E1, ..., Ej])&lt;/code&gt;.</source>
          <target state="translated">構文ツリーの空でないリスト &lt;code&gt;[E1, ..., Ej]&lt;/code&gt; 。これは &lt;code&gt;conjunction([E1, ..., Ej])&lt;/code&gt; を渡すことと同じです。</target>
        </trans-unit>
        <trans-unit id="a728b05450ce93eb12d475c06f9983d66527797f" translate="yes" xml:space="preserve">
          <source>A nonempty list of lists of syntax trees &lt;code&gt;[[E1_1, ..., E1_k1], ..., [Ej_1, ..., Ej_kj]]&lt;/code&gt;, which is equivalent to passing &lt;code&gt;disjunction([conjunction([E1_1, ..., E1_k1]), ..., conjunction([Ej_1, ..., Ej_kj])])&lt;/code&gt;.</source>
          <target state="translated">構文ツリーのリストの空でないリスト &lt;code&gt;[[E1_1, ..., E1_k1], ..., [Ej_1, ..., Ej_kj]]&lt;/code&gt; 、 &lt;code&gt;disjunction([conjunction([E1_1, ..., E1_k1]), ..., conjunction([Ej_1, ..., Ej_kj])])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dfe0accad3b0782ec5f58066cb4e83f925efd4a7" translate="yes" xml:space="preserve">
          <source>A normal file is really a process so it can be used as an I/O device (see &lt;code&gt;io&lt;/code&gt;). Therefore, when data is written to a normal file, the sending of the data to the file process, copies all data that are not binaries. Opening the file in binary mode and writing binaries is therefore recommended. If the file is opened on another node, or if the file server runs as slave to the file server of another node, also binaries are copied.</source>
          <target state="translated">通常のファイルは実際にはプロセスなので、I / Oデバイスとして使用できます（ &lt;code&gt;io&lt;/code&gt; を参照）。したがって、データが通常のファイルに書き込まれる場合、データをファイルプロセスに送信すると、バイナリではないすべてのデータがコピーされます。したがって、バイナリモードでファイルを開き、バイナリを書き込むことをお勧めします。ファイルが別のノードで開かれている場合、またはファイルサーバーが別のノードのファイルサーバーのスレーブとして実行されている場合は、バイナリもコピーされます。</target>
        </trans-unit>
        <trans-unit id="c470da7bdfad13769766d01b29332c73881e0c5a" translate="yes" xml:space="preserve">
          <source>A normal installation of Windows NT 4.0, with Service Pack 4 or later, is required for an embedded Windows NT running OTP.</source>
          <target state="translated">OTPを実行している組み込みWindows NTには、Service Pack 4以降のWindows NT 4.0の通常のインストールが必要です。</target>
        </trans-unit>
        <trans-unit id="b9be4139254b3d41e2b3331c9e7f9cdccd473c9d" translate="yes" xml:space="preserve">
          <source>A normal scheduler thread.</source>
          <target state="translated">通常のスケジューラースレッド。</target>
        </trans-unit>
        <trans-unit id="1ba3e6a43cfdf42b7ee92131fc56ef43d47532de" translate="yes" xml:space="preserve">
          <source>A notable return value is &lt;code&gt;{error, closed}&lt;/code&gt; indicating that the socket is closed.</source>
          <target state="translated">注目すべき戻り値は &lt;code&gt;{error, closed}&lt;/code&gt; で、ソケットが閉じていることを示します。</target>
        </trans-unit>
        <trans-unit id="3b3bb227d33cdecc5e31e4a78df3f54b111efcf9" translate="yes" xml:space="preserve">
          <source>A notation that tells which part of the type to be decoded</source>
          <target state="translated">型のどの部分をデコードするかを示す記法</target>
        </trans-unit>
        <trans-unit id="d7dc1e195006c9ad7d9414abaacea8ee8034b8fa" translate="yes" xml:space="preserve">
          <source>A notation that tells which parts of the message structure to be excluded from decode</source>
          <target state="translated">メッセージ構造のどの部分をデコードから除外するかを指定する表記法。</target>
        </trans-unit>
        <trans-unit id="027b96af0679f806c12b49fa73f516241d045fca" translate="yes" xml:space="preserve">
          <source>A note of warning: Igor cannot do anything about the case when the name of a remote function is passed to the built-in functions &lt;code&gt;apply&lt;/code&gt; and &lt;code&gt;spawn&lt;/code&gt;&lt;strong&gt;unless&lt;/strong&gt; the module and function names are explicitly stated in the call, as in e.g. &lt;code&gt;apply(lists, reverse, [Xs])&lt;/code&gt;. In all other cases, Igor leaves such calls unchanged, and warns the user that manual editing might be necessary.</source>
          <target state="translated">警告の注記：イゴールは、リモート関数の名前は組み込み関数に渡された場合については何も行うことはできません &lt;code&gt;apply&lt;/code&gt; し、 &lt;code&gt;spawn&lt;/code&gt; &lt;strong&gt;しない限り、&lt;/strong&gt;例えばに、モジュールと関数名が明示的に、コールに記載されている &lt;code&gt;apply(lists, reverse, [Xs])&lt;/code&gt; 。それ以外の場合はすべて、Igorはそのような呼び出しを変更せず、手動編集が必要になる可能性があることをユーザーに警告します。</target>
        </trans-unit>
        <trans-unit id="bb34c061995c9bd9c3bf3fd5336b0597518696e6" translate="yes" xml:space="preserve">
          <source>A notification filter is a module implementing the &lt;code&gt;&lt;a href=&quot;snmpa_notification_filter&quot;&gt;snmpa_notification_filter&lt;/a&gt;&lt;/code&gt; behaviour. A filter is added/deleted using the functions: &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;snmpa:register_notification_filter&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmpa#unregister_notification_filter&quot;&gt;snmpa:unregister_notification_filter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通知フィルターは、 &lt;code&gt;&lt;a href=&quot;snmpa_notification_filter&quot;&gt;snmpa_notification_filter&lt;/a&gt;&lt;/code&gt; 動作を実装するモジュールです。フィルターは、関数 &lt;code&gt;&lt;a href=&quot;snmpa#register_notification_filter&quot;&gt;snmpa:register_notification_filter&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmpa#unregister_notification_filter&quot;&gt;snmpa:unregister_notification_filter&lt;/a&gt;&lt;/code&gt; を使用して追加/削除されます。</target>
        </trans-unit>
        <trans-unit id="23a7337393f51adec78486c788d793b331d07279" translate="yes" xml:space="preserve">
          <source>A nullary functional value (i.e., a fun that takes zero arguments). Examples:</source>
          <target state="translated">ヌルの関数値(すなわち、引数をゼロにする関数)。例。</target>
        </trans-unit>
        <trans-unit id="e5362e0c25c0703bb5ca7c53501e9fabd30aa894" translate="yes" xml:space="preserve">
          <source>A number (starting with 0) indicating the number of that fun within that function</source>
          <target state="translated">その関数内のファンの数を示す数値(0から始まる)。</target>
        </trans-unit>
        <trans-unit id="cf27cfd569963d1d3e948b114051da6fdcf3d00a" translate="yes" xml:space="preserve">
          <source>A number of objects must be present for the SSH application to work. Thoose objects are per default stored in files. The default names, paths and file formats are the same as for &lt;code&gt;&lt;a href=&quot;http://www.openssh.com&quot;&gt;OpenSSH&lt;/a&gt;&lt;/code&gt;. Keys could be generated with the &lt;code&gt;ssh-keygen&lt;/code&gt; program from OpenSSH. See the &lt;code&gt;&lt;a href=&quot;using_ssh#running-an-erlang-ssh-daemon&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SSHアプリケーションが機能するには、いくつかのオブジェクトが存在している必要があります。 Thooseオブジェクトはデフォルトでファイルに保存されます。デフォルトの名前、パス、ファイル形式は &lt;code&gt;&lt;a href=&quot;http://www.openssh.com&quot;&gt;OpenSSH&lt;/a&gt;&lt;/code&gt; の場合と同じです。鍵は、OpenSSHの &lt;code&gt;ssh-keygen&lt;/code&gt; プログラムで生成できます。 『 &lt;code&gt;&lt;a href=&quot;using_ssh#running-an-erlang-ssh-daemon&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="ba15943266d8f4ba14bfaf35d8549aabc72bd73a" translate="yes" xml:space="preserve">
          <source>A number of objects must be present for the SSH application to work. Those objects are per default stored in files. The default names, paths and file formats are the same as for &lt;code&gt;&lt;a href=&quot;http://www.openssh.com&quot;&gt;OpenSSH&lt;/a&gt;&lt;/code&gt;. Keys could be generated with the &lt;code&gt;ssh-keygen&lt;/code&gt; program from OpenSSH. See the &lt;code&gt;&lt;a href=&quot;using_ssh#running-an-erlang-ssh-daemon&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SSHアプリケーションが機能するには、いくつかのオブジェクトが存在する必要があります。これらのオブジェクトは、デフォルトでファイルに保存されます。デフォルトの名前、パス、およびファイル形式は、 &lt;code&gt;&lt;a href=&quot;http://www.openssh.com&quot;&gt;OpenSSH&lt;/a&gt;&lt;/code&gt; の場合と同じです。キーは、OpenSSHの &lt;code&gt;ssh-keygen&lt;/code&gt; プログラムを使用して生成できます。 &lt;code&gt;&lt;a href=&quot;using_ssh#running-an-erlang-ssh-daemon&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="9c32086c997452421cf26bca4ec5f8f37980a88f" translate="yes" xml:space="preserve">
          <source>A one-line description of the application.</source>
          <target state="translated">アプリケーションの説明を一行にまとめたもの。</target>
        </trans-unit>
        <trans-unit id="7676e10e4c0c5db81948c82045b717673602dd63" translate="yes" xml:space="preserve">
          <source>A one-shot timer, that is, a timer created by evaluating any of the functions &lt;code&gt;&lt;a href=&quot;#apply_after-4&quot;&gt;apply_after/4&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#send_after-3&quot;&gt;send_after/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#send_after-2&quot;&gt;send_after/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#exit_after-3&quot;&gt;exit_after/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#exit_after-2&quot;&gt;exit_after/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#kill_after-2&quot;&gt;kill_after/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#kill_after-1&quot;&gt;kill_after/1&lt;/a&gt;&lt;/code&gt; is not linked to any process. Hence, such a timer is removed only when it reaches its time-out, or if it is explicitly removed by a call to &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">、関数のいずれかを評価することによって作成されたタイマーであり、ワンショットタイマ、 &lt;code&gt;&lt;a href=&quot;#apply_after-4&quot;&gt;apply_after/4&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#send_after-3&quot;&gt;send_after/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#send_after-2&quot;&gt;send_after/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#exit_after-3&quot;&gt;exit_after/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#exit_after-2&quot;&gt;exit_after/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#kill_after-2&quot;&gt;kill_after/2&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;#kill_after-1&quot;&gt;kill_after/1&lt;/a&gt;&lt;/code&gt; に連結されていません任意のプロセス。したがって、そのようなタイマーは、タイムアウトに達した場合、または &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt; の呼び出しによって明示的に削除された場合にのみ削除されます。</target>
        </trans-unit>
        <trans-unit id="652f0a6b7da70ccce812924b966b0be33a66985d" translate="yes" xml:space="preserve">
          <source>A packet is a line-terminated by a delimiter byte, default is the latin-1 newline character. The delimiter byte is included in the returned packet unless the line was truncated according to option &lt;code&gt;line_length&lt;/code&gt;.</source>
          <target state="translated">パケットはデリミタバイトで終了する行です。デフォルトは、latin-1改行文字です。オプション &lt;code&gt;line_length&lt;/code&gt; に従って行が切り捨てられない限り、区切りバイトは返されたパケットに含まれます。</target>
        </trans-unit>
        <trans-unit id="243cae021af59d36fb2ba67a11310414b8344606" translate="yes" xml:space="preserve">
          <source>A pair &lt;code&gt;{LineNumber, SimpleTest}&lt;/code&gt;, where &lt;code&gt;LineNumber&lt;/code&gt; is a nonnegative integer and &lt;code&gt;SimpleTest&lt;/code&gt; is another simple test object. &lt;code&gt;LineNumber&lt;/code&gt; should indicate the source line of the test. Pairs like this are usually only created via &lt;code&gt;?_test(...)&lt;/code&gt; macros; see &lt;code&gt;&lt;a href=&quot;#Basic_macros&quot;&gt;Basic macros&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ペア &lt;code&gt;{LineNumber, SimpleTest}&lt;/code&gt; 、 &lt;code&gt;LineNumber&lt;/code&gt; 非負整数であり、 &lt;code&gt;SimpleTest&lt;/code&gt; のは、別の簡単なテストオブジェクトです。 &lt;code&gt;LineNumber&lt;/code&gt; は、テストのソース行を示す必要があります。このようなペアは通常、 &lt;code&gt;?_test(...)&lt;/code&gt; マクロを介してのみ作成されます。 &lt;code&gt;&lt;a href=&quot;#Basic_macros&quot;&gt;Basic macros&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="defb50c3733240a6d3613348a3d9ea0d5e3378d6" translate="yes" xml:space="preserve">
          <source>A parallel test case has a private I/O server as its group leader. (For a description of the group leader concept, see &lt;code&gt;ERTS&lt;/code&gt;). The central I/O server process, which handles the output from regular test cases and configuration functions, does not respond to I/O messages during execution of parallel groups. This is important to understand to avoid certain traps, like the following:</source>
          <target state="translated">パラレルテストケースには、グループリーダーとしてプライベートI / Oサーバーがあります。（グループリーダーの概念の説明については、 &lt;code&gt;ERTS&lt;/code&gt; を参照してください）。通常のテストケースと構成機能からの出力を処理する中央I / Oサーバープロセスは、並列グループの実行中はI / Oメッセージに応答しません。これは、次のような特定のトラップを回避するために理解することが重要です。</target>
        </trans-unit>
        <trans-unit id="59ee8343e4e789ac929459cd04d582cafeb246fb" translate="yes" xml:space="preserve">
          <source>A parameterized type is to be considered as an embedded type. Each time such a type is referenced, an instance of it is defined. Thus, in the following example a record with name &lt;code&gt;'Seq_b'&lt;/code&gt; is generated in the &lt;code&gt;.hrl&lt;/code&gt; file and is used to hold values:</source>
          <target state="translated">パラメータ化された型は、埋め込み型と見なされます。そのような型が参照されるたびに、そのインスタンスが定義されます。したがって、次の例では、 &lt;code&gt;'Seq_b'&lt;/code&gt; という名前のレコードが &lt;code&gt;.hrl&lt;/code&gt; ファイルに生成され、値を保持するために使用されます。</target>
        </trans-unit>
        <trans-unit id="024ff9d111af56355737a8c26860d8a633650503" translate="yes" xml:space="preserve">
          <source>A parenthesized subpattern (including assertions)</source>
          <target state="translated">括弧で囲まれたサブパターン(アサーションを含む</target>
        </trans-unit>
        <trans-unit id="3ea3805acd22f42cb11f366b367ef59a1e1dc7d4" translate="yes" xml:space="preserve">
          <source>A parse transformation that translates fun syntax into match specifications.</source>
          <target state="translated">fun構文をマッチ仕様に変換するパース変換。</target>
        </trans-unit>
        <trans-unit id="991f645ed0dc31daba5645f487f69d46fc37f314" translate="yes" xml:space="preserve">
          <source>A partial delivery failure. In the current implementation of the Erlang/SCTP binding, this event is internally converted into an &lt;code&gt;error&lt;/code&gt; term returned by &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">部分的な配信エラー。Erlang / SCTPバインディングの現在の実装では、このイベントは内部的に &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; によって返される &lt;code&gt;error&lt;/code&gt; 項に変換されます。</target>
        </trans-unit>
        <trans-unit id="fb726df29d93231b466c44dbe8038aa91fcb314b" translate="yes" xml:space="preserve">
          <source>A pattern can be selected to narrow the profiling. For instance a specific module can be selected, and only the code executed in that module will be profiled.</source>
          <target state="translated">パターンを選択してプロファイリングを絞り込むことができます。例えば、特定のモジュールを選択し、そのモジュールで実行されたコードのみをプロファイリングします。</target>
        </trans-unit>
        <trans-unit id="387373efa88307dec031353d353693de37d89f74" translate="yes" xml:space="preserve">
          <source>A pattern for an instruction consists of its name, followed by a pattern for each of its operands. The operand patterns are separated by spaces.</source>
          <target state="translated">命令のパターンは、命令名と、それに続く各オペランドのパターンで構成されています。オペランド・パターンはスペースで区切られています。</target>
        </trans-unit>
        <trans-unit id="c67b6c7226586d1f049336989af73704b318b899" translate="yes" xml:space="preserve">
          <source>A pattern has the same structure as a term but can contain unbound variables.</source>
          <target state="translated">パターンは項と同じ構造を持っていますが、束縛されていない変数を含むことができます。</target>
        </trans-unit>
        <trans-unit id="430efb2a85da18740aa7226ea60c97fb378ca179" translate="yes" xml:space="preserve">
          <source>A pattern is a term that can contain:</source>
          <target state="translated">パターンとは、含むことができる用語です。</target>
        </trans-unit>
        <trans-unit id="17c671d86e70778fccd78b1c171062748a656776" translate="yes" xml:space="preserve">
          <source>A pattern that matches a certain record is created in the same way as a record is created:</source>
          <target state="translated">特定のレコードにマッチするパターンは、レコードの作成と同じように作成されます。</target>
        </trans-unit>
        <trans-unit id="086559c23f422f88dfb22263e5064971fda50484" translate="yes" xml:space="preserve">
          <source>A peer's DiameterIdentity is not required when initiating a connection: the identify is received at capabilities exchange, at which time the connection can be rejected if the identity is objectionable.</source>
          <target state="translated">接続を開始する際には、ピアのDiameterIdentityは必要ありません。Identityは能力交換時に受信され、その時にIdentityが不愉快な場合は接続を拒否することができます。</target>
        </trans-unit>
        <trans-unit id="6ac1afaee6db30631244af22883394c04ea016de" translate="yes" xml:space="preserve">
          <source>A piece of data of any data type is called a &lt;strong&gt;term&lt;/strong&gt;.</source>
          <target state="translated">任意のデータ型のデータの一部は、&lt;strong&gt;用語&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="27a9280a59a327bcaa7fa4531cf4080082cc2a4d" translate="yes" xml:space="preserve">
          <source>A pointer to a function to execute in the created thread.</source>
          <target state="translated">作成されたスレッドで実行する関数へのポインタ。</target>
        </trans-unit>
        <trans-unit id="2425be4490c62b2d9ac48f8dfb6dca6c94bc6de8" translate="yes" xml:space="preserve">
          <source>A pointer to a thread identifier variable.</source>
          <target state="translated">スレッド識別子変数へのポインタ。</target>
        </trans-unit>
        <trans-unit id="bdca82216af70bfb4f52fcc1c479301f1b25be42" translate="yes" xml:space="preserve">
          <source>A pointer to an integer. The integer is used both for passing input and output sizes (see below).</source>
          <target state="translated">整数へのポインタ。この整数は、入力サイズと出力サイズを渡すために使用されます (後述)。</target>
        </trans-unit>
        <trans-unit id="9e7bc1ca5fcc169a07a734702da7afb3a87a923b" translate="yes" xml:space="preserve">
          <source>A pointer to an output buffer.</source>
          <target state="translated">出力バッファへのポインタ。</target>
        </trans-unit>
        <trans-unit id="78c2fb1c9ead9f20103777b7ae3edafb6a2eea4e" translate="yes" xml:space="preserve">
          <source>A pointer to another port structure, which is either the listen port from which this port is accepting a connection or conversely. The &quot;partner relation&quot; is always bidirectional.</source>
          <target state="translated">別のポート構造体へのポインタであり、このポートが接続を受け入れているリッスンポートであるか、逆に接続を受け入れているかのいずれかである。パートナー関係」は常に双方向である。</target>
        </trans-unit>
        <trans-unit id="aae44b20ecd8d8611c610749c380b8aec87c9bfa" translate="yes" xml:space="preserve">
          <source>A pointer to argument to the &lt;code&gt;func&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;func&lt;/code&gt; 関数への引数へのポインター。</target>
        </trans-unit>
        <trans-unit id="2f4cacb4211d371a86050f3b2bf4514f77eeffa8" translate="yes" xml:space="preserve">
          <source>A pointer to the contents of &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;t&lt;/code&gt; の内容へのポインター。</target>
        </trans-unit>
        <trans-unit id="ec5991945ec65c59205cb652ca3121b479552f42" translate="yes" xml:space="preserve">
          <source>A pointer to the function that implements the NIF.</source>
          <target state="translated">NIFを実装した関数へのポインタ。</target>
        </trans-unit>
        <trans-unit id="d4bf94b670a866ff43aac180a11292d00d614edb" translate="yes" xml:space="preserve">
          <source>A pointer to thread options to use or &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">使用するスレッドオプションへのポインタまたは &lt;code&gt;NULL&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1206cda26f132192edd3659328975e4d3cafd278" translate="yes" xml:space="preserve">
          <source>A port can be set to use binaries instead of lists of bytes. It is then not necessary to invent any encoding/decoding scheme. Erl_Interface functions are used for unpacking the binary and convert it into a struct similar to an Erlang term. Such a struct can be manipulated in different ways, be converted to the Erlang external format, and sent to Erlang.</source>
          <target state="translated">ポートは、バイトのリストの代わりにバイナリを使用するように設定することができます。そうすれば、エンコーディング/デコーディングのスキームを考案する必要はありません。Erl_Interface関数はバイナリを解凍してErlang用語に似た構造体に変換するために使われます。このような構造体は様々な方法で操作でき、Erlangの外部フォーマットに変換してErlangに送ることができます。</target>
        </trans-unit>
        <trans-unit id="7a9af688d21b53184095c38ddf61f01deed4f70c" translate="yes" xml:space="preserve">
          <source>A port data lock is reference counted, and when the reference count reaches zero, it is destroyed. The emulator at least increments the reference count once when the lock is created and decrements it once the port associated with the lock terminates. The emulator also increments the reference count when an async job is enqueued and decrements it when an async job has been invoked. Also, the driver is responsible for ensuring that the reference count does not reach zero before the last use of the lock by the driver has been made. The reference count can be read, incremented, and decremented by &lt;code&gt;&lt;a href=&quot;#driver_pdl_get_refc&quot;&gt; driver_pdl_get_refc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#driver_pdl_inc_refc&quot;&gt; driver_pdl_inc_refc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#driver_pdl_dec_refc&quot;&gt; driver_pdl_dec_refc&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">ポートデータロックは参照カウントされ、参照カウントがゼロに達すると破棄されます。エミュレータは、ロックが作成されると少なくとも1回は参照カウントをインクリメントし、ロックに関連付けられたポートが終了すると参照カウントをデクリメントします。エミュレーターは、非同期ジョブがキューに入れられると参照カウントをインクリメントし、非同期ジョブが呼び出されると参照カウントをデクリメントします。また、ドライバーは、ドライバーによるロックの最後の使用が行われる前に、参照カウントがゼロに達しないようにする責任があります。参照カウントは、 &lt;code&gt;&lt;a href=&quot;#driver_pdl_get_refc&quot;&gt; driver_pdl_get_refc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#driver_pdl_inc_refc&quot;&gt; driver_pdl_inc_refc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#driver_pdl_dec_refc&quot;&gt; driver_pdl_dec_refc&lt;/a&gt;&lt;/code&gt; によってそれぞれ読み取り、インクリメント、およびデクリメントできます。</target>
        </trans-unit>
        <trans-unit id="c39dd0f30e9a0ba72b5dacc6b581f2019abf49ac" translate="yes" xml:space="preserve">
          <source>A port data lock is reference counted, and when the reference count reaches zero, it is destroyed. The emulator at least increments the reference count once when the lock is created and decrements it once the port associated with the lock terminates. The emulator also increments the reference count when an async job is enqueued and decrements it when an async job has been invoked. Also, the driver is responsible for ensuring that the reference count does not reach zero before the last use of the lock by the driver has been made. The reference count can be read, incremented, and decremented by &lt;code&gt;&lt;a href=&quot;#driver_pdl_get_refc&quot;&gt;driver_pdl_get_refc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#driver_pdl_inc_refc&quot;&gt;driver_pdl_inc_refc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#driver_pdl_dec_refc&quot;&gt;driver_pdl_dec_refc&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">ポートデータロックは参照カウントされ、参照カウントがゼロに達すると破棄されます。エミュレータは、ロックが作成されたときに少なくとも1回参照カウントをインクリメントし、ロックに関連付けられたポートが終了すると参照カウントをデクリメントします。エミュレータは、非同期ジョブがキューに登録されたときに参照カウントをインクリメントし、非同期ジョブが呼び出されたときにデクリメントします。また、ドライバーは、ドライバーによるロックの最後の使用が行われる前に参照カウントがゼロに達しないようにする責任があります。参照カウントは、 &lt;code&gt;&lt;a href=&quot;#driver_pdl_get_refc&quot;&gt;driver_pdl_get_refc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#driver_pdl_inc_refc&quot;&gt;driver_pdl_inc_refc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#driver_pdl_dec_refc&quot;&gt;driver_pdl_dec_refc&lt;/a&gt;&lt;/code&gt; によって、それぞれ読み取り、インクリメント、およびデクリメントできます。</target>
        </trans-unit>
        <trans-unit id="293c8a353a9462ae3b6bfddcb9d1223abb498be9" translate="yes" xml:space="preserve">
          <source>A port driver is a linked-in driver that is accessible as a port from an Erlang program. It is a shared library (SO in UNIX, DLL in Windows), with special entry points. The Erlang runtime system calls these entry points when the driver is started and when data is sent to the port. The port driver can also send data to Erlang.</source>
          <target state="translated">ポートドライバとは、Erlangプログラムからポートとしてアクセスできるリンクインドライバのことです。これは共有ライブラリ(UNIXではSO、WindowsではDLL)で、特別なエントリーポイントを持っています。Erlangランタイムシステムはドライバが起動したときとデータがポートに送られたときにこれらのエントリーポイントを呼び出します。ポートドライバはErlangにデータを送ることもできます。</target>
        </trans-unit>
        <trans-unit id="3c0708dd623cb47c7df1202d9dbfe1fbb7d19e65" translate="yes" xml:space="preserve">
          <source>A port identifier identifies an Erlang port.</source>
          <target state="translated">ポート識別子はErlangのポートを識別します。</target>
        </trans-unit>
        <trans-unit id="19b3ddd399fc086f92748ad13d0d6c9f12e76af1" translate="yes" xml:space="preserve">
          <source>A port identifier refers into a port table and a node table, which also consumes memory.</source>
          <target state="translated">ポート識別子は、ポートテーブルとノードテーブルを参照し、メモリも消費します。</target>
        </trans-unit>
        <trans-unit id="18856ffa7bc1d834314eb745f89d3f4ac81cef62" translate="yes" xml:space="preserve">
          <source>A port identifier. In contrast to port ID terms (instances of &lt;code&gt;ERL_NIF_TERM&lt;/code&gt;), &lt;code&gt;ErlNifPort&lt;/code&gt;s are self-contained and not bound to any &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ErlNifPort&lt;/code&gt; is an opaque type.</source>
          <target state="translated">ポート識別子。ポートIDの用語（ &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; のインスタンス）とは &lt;code&gt;ErlNifPort&lt;/code&gt; 、ErlNifPortは自己完結型であり、どの &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt; にもバインドされていません。 &lt;code&gt;ErlNifPort&lt;/code&gt; は不透明なタイプです。</target>
        </trans-unit>
        <trans-unit id="ea470bfa2ec4cfaf642ebb2fc7a49f8233c8c023" translate="yes" xml:space="preserve">
          <source>A port identifier. In contrast to port ID terms (instances of &lt;code&gt;ERL_NIF_TERM&lt;/code&gt;), &lt;code&gt;ErlNifPort&lt;/code&gt;s are self-contained and not bound to any &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ErlNifPort&lt;/code&gt; is an opaque type. It can be copied, moved in memory, forgotten, and so on.</source>
          <target state="translated">ポート識別子。ポートID用語（ &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; のインスタンス）とは対照的に、 &lt;code&gt;ErlNifPort&lt;/code&gt; は自己完結型であり、どの &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt; にもバインドされていません。 &lt;code&gt;ErlNifPort&lt;/code&gt; は不透明（OPAQUE）型です。コピーしたり、メモリ内に移動したり、忘れたりすることができます。</target>
        </trans-unit>
        <trans-unit id="a5794b57a917a22a654e45737ed3a63e4f792f19" translate="yes" xml:space="preserve">
          <source>A port that is connected to a listen socket. This port does not do much, no data pumping is done on this socket, but read data is available when one is trying to do an accept on the port.</source>
          <target state="translated">リッスンソケットに接続されているポート。このポートはあまり何もしません。このソケットではデータのポンピングは行われませんが、ポートでアクセプタンスを行おうとしているときにデータを読むことができます。</target>
        </trans-unit>
        <trans-unit id="e728f787c7fc14ca780c0ed99792cf4bab0d04bc" translate="yes" xml:space="preserve">
          <source>A positive integer or &lt;code&gt;infinity&lt;/code&gt;, defaults to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">正の整数または &lt;code&gt;infinity&lt;/code&gt; 、デフォルトは &lt;code&gt;infinity&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2ff16a10dbcc92f0a90f938ecb26a69d5a07cb38" translate="yes" xml:space="preserve">
          <source>A positive integer or the atom &lt;code&gt;undefined_serial&lt;/code&gt; (in case no messages has been sent).</source>
          <target state="translated">正の整数またはアトム &lt;code&gt;undefined_serial&lt;/code&gt; （メッセージが送信されていない場合）。</target>
        </trans-unit>
        <trans-unit id="a0b0b2de29f48def22ce618959435b19ac7becd8" translate="yes" xml:space="preserve">
          <source>A positive integer representing the absolute maximum size a string returned from this formatter can have. If the formatted string is longer, after possibly being limited by &lt;code&gt;chars_limit&lt;/code&gt; or &lt;code&gt;depth&lt;/code&gt;, it is truncated.</source>
          <target state="translated">このフォーマッターから返される文字列が持つことができる絶対最大サイズを表す正の整数。フォーマットされた文字列が長い場合、 &lt;code&gt;chars_limit&lt;/code&gt; または &lt;code&gt;depth&lt;/code&gt; によって制限された後、切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="8432f1221b4e6180daa30dde8c243b5ace3ee8ed" translate="yes" xml:space="preserve">
          <source>A positive integer representing the maximum depth to which terms shall be printed by this formatter. Format strings passed to this formatter are rewritten. The format controls ~p and ~w are replaced with ~P and ~W, respectively, and the value is used as the depth parameter. For details, see &lt;code&gt;io:format/2,3&lt;/code&gt; in STDLIB.</source>
          <target state="translated">このフォーマッタによって用語が印刷される最大深度を表す正の整数。このフォーマッターに渡されるフォーマット文字列は書き換えられます。フォーマットコントロール〜pと〜wは、それぞれ〜Pと〜Wに置き換えられ、その値が深度パラメーターとして使用されます。詳細については、STDLIBの &lt;code&gt;io:format/2,3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c0c5f0649daa5aaf66aa8692a46961fb52172dd0" translate="yes" xml:space="preserve">
          <source>A positive integer representing the value of the option with the same name to be used when calling &lt;code&gt; io_lib:format/3&lt;/code&gt;. This value limits the total number of characters printed for each log event. Notice that this is a soft limit. For a hard truncation limit, see option &lt;code&gt;max_size&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt; io_lib:format/3&lt;/code&gt; を呼び出すときに使用される同じ名前のオプションの値を表す正の整数。この値は、ログイベントごとに出力される文字の総数を制限します。これはソフト制限であることに注意してください。ハード切り捨ての制限については、オプション &lt;code&gt;max_size&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4b666ac2b38c4545ad7cf98d3da66419760a1f1f" translate="yes" xml:space="preserve">
          <source>A positive integer representing the value of the option with the same name to be used when calling &lt;code&gt;io_lib:format/3&lt;/code&gt;. This value limits the total number of characters printed for each log event. Notice that this is a soft limit. For a hard truncation limit, see option &lt;code&gt;max_size&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;io_lib:format/3&lt;/code&gt; を呼び出すときに使用される同じ名前のオプションの値を表す正の整数。この値は、各ログイベントに出力される文字の総数を制限します。これは弱い制限であることに注意してください。ハードトランケーション制限については、オプション &lt;code&gt;max_size&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="00810275831c468fa832818d7831816d4d68cc76" translate="yes" xml:space="preserve">
          <source>A positive integer, defaults to 1.</source>
          <target state="translated">正の整数で、デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="eae0729316a72e8195f927b7d08f3a3e873b0f72" translate="yes" xml:space="preserve">
          <source>A possible output from the system's &lt;code&gt;sequential_tracer&lt;/code&gt; can be like this:</source>
          <target state="translated">システムの &lt;code&gt;sequential_tracer&lt;/code&gt; からの可能な出力は次のようになります：</target>
        </trans-unit>
        <trans-unit id="af7898411039ac7f27c7f7c532905e5b1d3ef4a9" translate="yes" xml:space="preserve">
          <source>A predicate &lt;code&gt;Big(X)&lt;/code&gt; is defined, which is &lt;code&gt;true&lt;/code&gt; if its argument is greater that 10:</source>
          <target state="translated">述語 &lt;code&gt;Big(X)&lt;/code&gt; が定義されています。これは、引数が10より大きい場合に &lt;code&gt;true&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e7d9312c9e6373085b2581d401f52947630c30ca" translate="yes" xml:space="preserve">
          <source>A predicate is a function that returns &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;any&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; if there is a term &lt;code&gt;X&lt;/code&gt; in the list such that &lt;code&gt;P(X)&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">述語は、 &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; を返す関数です。リストに項 &lt;code&gt;X&lt;/code&gt; があり、 &lt;code&gt;P(X)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; 場合、 &lt;code&gt;any&lt;/code&gt; はtrue です。</target>
        </trans-unit>
        <trans-unit id="9a559512ddfd19a254b3dc8766e06627c3cf21e5" translate="yes" xml:space="preserve">
          <source>A prefix is optional but can be be used to disambiguate between record and constant names resulting from similarly named messages and AVPs in different Diameter applications.</source>
          <target state="translated">プレフィックスはオプションですが、異なるDiameterアプリケーション内の類似した名前のメッセージやAVPから得られるレコード名と定数名を区別するために使用できます。</target>
        </trans-unit>
        <trans-unit id="c17bae9646cdd5e9bda0a78a3791df32fbe7c33e" translate="yes" xml:space="preserve">
          <source>A previously loaded module contains an &lt;code&gt;-on_load&lt;/code&gt; function that never finished.</source>
          <target state="translated">以前にロードされたモジュールには、終了しない &lt;code&gt;-on_load&lt;/code&gt; 関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="1b8f8657029f4d6aa6e01af505f0ff328ca9512f" translate="yes" xml:space="preserve">
          <source>A problem can arise if a replicated table on one node is initiated, but &lt;code&gt;Mnesia&lt;/code&gt; deduces that another (remote) replica is more recent than the replica existing on the local node, and the initialization procedure does not proceed. In this situation, a call to &lt;code&gt;&lt;a href=&quot;mnesia#wait_for_tables-2&quot;&gt;mnesia:wait_for_tables/2&lt;/a&gt;&lt;/code&gt;, suspends the caller until the remote node has initialized the table from its local disc and the node has copied the table over the network to the local node.</source>
          <target state="translated">あるノードでレプリケートされたテーブルが開始された場合、問題が発生する可能性がありますが、 &lt;code&gt;Mnesia&lt;/code&gt; は、別の（リモート）レプリカがローカルノードに存在するレプリカよりも新しいと推定し、初期化手順は続行されません。この状況では、 &lt;code&gt;&lt;a href=&quot;mnesia#wait_for_tables-2&quot;&gt;mnesia:wait_for_tables/2&lt;/a&gt;&lt;/code&gt; への呼び出しは、リモートノードがローカルディスクからテーブルを初期化し、ノードがネットワーク経由でテーブルをローカルノードにコピーするまで、呼び出し元を一時停止します。</target>
        </trans-unit>
        <trans-unit id="6f4802cb3c2b14a3f4d0a0759994b3bcff8bf5ac" translate="yes" xml:space="preserve">
          <source>A process bound environment contains transient information about the calling Erlang process. The environment is only valid in the thread where it was supplied as argument until the NIF returns. It is thus useless and dangerous to store pointers to process bound environments between NIF calls.</source>
          <target state="translated">プロセスバインド環境は呼び出したErlangプロセスの過渡的な情報を含んでいます。この環境は引数として与えられたスレッドの中でのみ有効です。したがって、NIF呼び出しの間にプロセスバインド環境へのポインタを保存するのは無意味で危険です。</target>
        </trans-unit>
        <trans-unit id="8ebbb1fef06e8f55da3f26cfd1b065a870dd9421" translate="yes" xml:space="preserve">
          <source>A process calling &lt;code&gt;spawn&lt;/code&gt;, &lt;code&gt;spawn_link&lt;/code&gt;, &lt;code&gt;spawn_monitor&lt;/code&gt;, or &lt;code&gt;spawn_opt&lt;/code&gt; is scheduled out immediately after completing the call. When higher modified timing levels are used, the caller also sleeps for a while after it is scheduled out.</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; 、 &lt;code&gt;spawn_link&lt;/code&gt; 、 &lt;code&gt;spawn_monitor&lt;/code&gt; 、または &lt;code&gt;spawn_opt&lt;/code&gt; を呼び出すプロセスは、呼び出しが完了した直後にスケジュールされます。より高い変更されたタイミングレベルが使用される場合、発信者はスケジュールされた後もしばらくスリープします。</target>
        </trans-unit>
        <trans-unit id="072b0b4dc3c07ad9ff81bf5af27f95232daef7d4" translate="yes" xml:space="preserve">
          <source>A process can also be terminated if it receives an exit signal with another exit reason than &lt;code&gt;normal&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#errors&quot;&gt;Error Handling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスが &lt;code&gt;normal&lt;/code&gt; 以外の終了理由で終了信号を受信した場合も、プロセスを終了できます。 &lt;code&gt;&lt;a href=&quot;#errors&quot;&gt;Error Handling&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="f16a41a56038d323a59c139120b39c4d98df3227" translate="yes" xml:space="preserve">
          <source>A process can also call the function &lt;code&gt;exit(Pid,Reason)&lt;/code&gt;. This results in an exit signal with exit reason &lt;code&gt;Reason&lt;/code&gt; being emitted to &lt;code&gt;Pid&lt;/code&gt;, but does not affect the calling process.</source>
          <target state="translated">プロセスは、関数 &lt;code&gt;exit(Pid,Reason)&lt;/code&gt; 呼び出すこともできます。これにより、終了理由 &lt;code&gt;Reason&lt;/code&gt; が &lt;code&gt;Pid&lt;/code&gt; に発行される終了信号が生成されますが、呼び出しプロセスには影響しません。</target>
        </trans-unit>
        <trans-unit id="e6966f7ea916abf9765baf180b15bfc451003b50" translate="yes" xml:space="preserve">
          <source>A process can be set to trap exit signals by calling:</source>
          <target state="translated">呼び出して終了信号をトラップするようにプロセスを設定することができます。</target>
        </trans-unit>
        <trans-unit id="49077ba72c45965099e62393fc4505d1bc5f8e7a" translate="yes" xml:space="preserve">
          <source>A process can be suspended by multiple processes and can be suspended multiple times by a single process. A suspended process does not leave the suspended state until its suspend count reaches zero. The suspend count of &lt;code&gt;Suspendee&lt;/code&gt; is decreased when &lt;code&gt;&lt;a href=&quot;#resume_process-1&quot;&gt; erlang:resume_process(Suspendee)&lt;/a&gt;&lt;/code&gt; is called by the same process that called &lt;code&gt;erlang:suspend_process(Suspendee)&lt;/code&gt;. All increased suspend counts on other processes acquired by a process are automatically decreased when the process terminates.</source>
          <target state="translated">プロセスは複数のプロセスによって一時停止でき、単一のプロセスによって複数回一時停止できます。中断されたプロセスは、中断カウントがゼロに達するまで中断状態を離れません。 &lt;code&gt;&lt;a href=&quot;#resume_process-1&quot;&gt; erlang:resume_process(Suspendee)&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;erlang:suspend_process(Suspendee)&lt;/code&gt; と同じプロセスによって呼び出されると、 &lt;code&gt;Suspendee&lt;/code&gt; のサスペンドカウントが減少します。プロセスによって取得された他のプロセスのすべての増加したサスペンドカウントは、プロセスが終了すると自動的に減少します。</target>
        </trans-unit>
        <trans-unit id="51d9fe10dcef55d7d44c0442f222152ab34ddbe3" translate="yes" xml:space="preserve">
          <source>A process can be suspended by multiple processes and can be suspended multiple times by a single process. A suspended process does not leave the suspended state until its suspend count reaches zero. The suspend count of &lt;code&gt;Suspendee&lt;/code&gt; is decreased when &lt;code&gt;&lt;a href=&quot;#resume_process-1&quot;&gt;erlang:resume_process(Suspendee)&lt;/a&gt;&lt;/code&gt; is called by the same process that called &lt;code&gt;erlang:suspend_process(Suspendee)&lt;/code&gt;. All increased suspend counts on other processes acquired by a process are automatically decreased when the process terminates.</source>
          <target state="translated">プロセスは複数のプロセスによって一時停止でき、単一のプロセスによって複数回一時停止できます。一時停止されたプロセスは、その一時停止カウントがゼロに達するまで、一時停止状態を解除しません。 &lt;code&gt;erlang:suspend_process(Suspendee)&lt;/code&gt; を呼び出したのと同じプロセスによって &lt;code&gt;&lt;a href=&quot;#resume_process-1&quot;&gt;erlang:resume_process(Suspendee)&lt;/a&gt;&lt;/code&gt; が呼び出されると、 &lt;code&gt;Suspendee&lt;/code&gt; の中断カウントが減少します。プロセスが取得した他のプロセスで増加したすべての中断カウントは、プロセスが終了すると自動的に減少します。</target>
        </trans-unit>
        <trans-unit id="32f69066cd227a9815efdfec6c96cb7e6e8de0aa" translate="yes" xml:space="preserve">
          <source>A process can terminate itself by calling one of the following BIFs:</source>
          <target state="translated">プロセスは、以下のBIFのいずれかを呼び出すことで、自分自身を終了させることができます。</target>
        </trans-unit>
        <trans-unit id="b321553d2b5e342e2d1b929ffc0921e013068c69" translate="yes" xml:space="preserve">
          <source>A process created due to a spawn request that has been abandoned may communicate with its parent as any other process. It is &lt;strong&gt;only&lt;/strong&gt; the direct effects on the parent of the actual spawn request, that will be canceled by abandoning a spawn request.</source>
          <target state="translated">放棄されたスポーン要求のために作成されたプロセスは、他のプロセスと同様にその親と通信できます。それは&lt;strong&gt;唯一の&lt;/strong&gt;産卵要求を放棄することで解除されます実際の産卵要求、の親に直接影響。</target>
        </trans-unit>
        <trans-unit id="bd5238f73e1d44a290b4f80529059292d57da507" translate="yes" xml:space="preserve">
          <source>A process fixes a table by calling &lt;code&gt;safe_fixtable(Tab, true)&lt;/code&gt;. The table remains fixed until the process releases it by calling &lt;code&gt;safe_fixtable(Tab, false)&lt;/code&gt;, or until the process terminates.</source>
          <target state="translated">プロセスは &lt;code&gt;safe_fixtable(Tab, true)&lt;/code&gt; 呼び出してテーブルを修正します。テーブルは、プロセスが &lt;code&gt;safe_fixtable(Tab, false)&lt;/code&gt; 呼び出して解放するまで、またはプロセスが終了するまで固定されたままです。</target>
        </trans-unit>
        <trans-unit id="42b2c1b73ec6ef9ef96e79e9e9449854c76818bb" translate="yes" xml:space="preserve">
          <source>A process identifier (pid). In contrast to pid terms (instances of &lt;code&gt;ERL_NIF_TERM&lt;/code&gt;), &lt;code&gt;ErlNifPid&lt;/code&gt;s are self-contained and not bound to any &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ErlNifPid&lt;/code&gt; is an opaque type.</source>
          <target state="translated">プロセス識別子（pid）。pid用語（ &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; のインスタンス）とは対照的に、 &lt;code&gt;ErlNifPid&lt;/code&gt; は自己完結型であり、どの &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt; にもバインドされていません。 &lt;code&gt;ErlNifPid&lt;/code&gt; は不透明なタイプです。</target>
        </trans-unit>
        <trans-unit id="ba9734ec123feb8eec22b585c124792c0472e055" translate="yes" xml:space="preserve">
          <source>A process identifier (pid). In contrast to pid terms (instances of &lt;code&gt;ERL_NIF_TERM&lt;/code&gt;), &lt;code&gt;ErlNifPid&lt;/code&gt;s are self-contained and not bound to any &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ErlNifPid&lt;/code&gt; is an opaque type. It can be copied, moved in memory, forgotten, and so on.</source>
          <target state="translated">プロセス識別子（pid）。pid用語（ &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; のインスタンス）とは対照的に、 &lt;code&gt;ErlNifPid&lt;/code&gt; は自己完結型であり、どの &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;environment&lt;/a&gt;&lt;/code&gt; にもバインドされていません。 &lt;code&gt;ErlNifPid&lt;/code&gt; は不透明（OPAQUE）型です。コピーしたり、メモリ内に移動したり、忘れたりすることができます。</target>
        </trans-unit>
        <trans-unit id="37148f5c507ec0173b138452557614229468263f" translate="yes" xml:space="preserve">
          <source>A process identifier as in &lt;code&gt;&lt;a href=&quot;#PID_EXT&quot;&gt;PID_EXT&lt;/a&gt;&lt;/code&gt;. Represents the process in which the fun was created.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#PID_EXT&quot;&gt;PID_EXT&lt;/a&gt;&lt;/code&gt; のようなプロセス識別子。ファンが作成されたプロセスを表します。</target>
        </trans-unit>
        <trans-unit id="10461d2fc7608d820f0dfe163bcb992712ebe48a" translate="yes" xml:space="preserve">
          <source>A process identifier refers into a process table and a node table, which also consumes memory.</source>
          <target state="translated">プロセス識別子は、プロセステーブルとノードテーブルを参照し、メモリも消費します。</target>
        </trans-unit>
        <trans-unit id="69b2f4b3ae91aebe493ff76d27f3c271b8cfb661" translate="yes" xml:space="preserve">
          <source>A process identifier, pid, identifies a process.</source>
          <target state="translated">プロセス識別子である pid はプロセスを識別します。</target>
        </trans-unit>
        <trans-unit id="98c8d95b2cf9ab7d1d26152983625cb3f9b34934" translate="yes" xml:space="preserve">
          <source>A process in a supervision tree is expected to terminate with the same reason as its parent.</source>
          <target state="translated">監督ツリー内のプロセスは、親と同じ理由で終了することが期待されます。</target>
        </trans-unit>
        <trans-unit id="d6ba7c3c946bdd4b03479883e86c12f1505bd1d6" translate="yes" xml:space="preserve">
          <source>A process is created by calling &lt;code&gt;spawn&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;spawn&lt;/code&gt; を呼び出すことによってプロセスが作成されます。</target>
        </trans-unit>
        <trans-unit id="655669bae8fcf2c6bd4e506e48fb385c11ebcc8b" translate="yes" xml:space="preserve">
          <source>A process is said to &lt;strong&gt;use&lt;/strong&gt; a module &lt;code&gt;Mod&lt;/code&gt; if &lt;code&gt;Mod&lt;/code&gt; is listed in the &lt;code&gt;Modules&lt;/code&gt; part of the child specification used to start the process, see &lt;code&gt;supervisor(3)&lt;/code&gt;. In the case of &lt;code&gt;gen_event&lt;/code&gt;, an event manager process is said to use &lt;code&gt;Mod&lt;/code&gt; if &lt;code&gt;Mod&lt;/code&gt; is an installed event handler.</source>
          <target state="translated">プロセスの開始に使用される子仕様の &lt;code&gt;Modules&lt;/code&gt; 部分に &lt;code&gt;Mod&lt;/code&gt; がリストされている場合、プロセスはモジュール &lt;code&gt;Mod&lt;/code&gt; を&lt;strong&gt;使用&lt;/strong&gt;すると言われます。supervisor &lt;code&gt;supervisor(3)&lt;/code&gt; 参照してください。 &lt;code&gt;gen_event&lt;/code&gt; の場合、 &lt;code&gt;Mod&lt;/code&gt; がインストール済みのイベントハンドラーである場合、イベントマネージャープロセスは &lt;code&gt;Mod&lt;/code&gt; を使用すると言われます。</target>
        </trans-unit>
        <trans-unit id="6ce5d54306fa5b34ccef5a88ec9ab67fc328d882" translate="yes" xml:space="preserve">
          <source>A process is said to terminate &lt;strong&gt;normally&lt;/strong&gt;, if the exit reason is the atom &lt;code&gt;normal&lt;/code&gt;. A process with no more code to execute terminates normally.</source>
          <target state="translated">終了理由が &lt;code&gt;normal&lt;/code&gt; のアトムである場合、プロセスは&lt;strong&gt;正常&lt;/strong&gt;に終了したと言います。実行するコードがなくなったプロセスは正常に終了します。</target>
        </trans-unit>
        <trans-unit id="fb8a0c82e2b3e6de1b3a292697b7dd18d1ac9e70" translate="yes" xml:space="preserve">
          <source>A process may join multiple groups. It may join the same group multiple times. It is only allowed to join processes running on local node.</source>
          <target state="translated">プロセスは複数のグループに参加することができます。同じグループに複数回参加することができます。ローカルノード上で実行されているプロセスにのみ参加できます。</target>
        </trans-unit>
        <trans-unit id="5476607e3cda2543b898df9573ff320bd9b1b5a4" translate="yes" xml:space="preserve">
          <source>A process must complete the sending of a fragmented message before it can start sending any other message on the same distribution channel.</source>
          <target state="translated">プロセスは、断片化されたメッセージの送信を完了させてから、同じ配信チャネル上で他のメッセージの送信を開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="262937e9bbf32c8d0ea317c09244f8bdfd384e14" translate="yes" xml:space="preserve">
          <source>A process spawn is represented as multiple information transfers. At least one spawn request and one spawn reply. The actual amount of information transfers depends on what type of spawn it is and may also change in future implementations. Note that this is more or less an internal protocol that you are peeking at. The spawn request will be represented as a tuple with the first element containing the atom &lt;code&gt;spawn_request&lt;/code&gt;, but this is more or less all that you can depend on.</source>
          <target state="translated">プロセススポーンは、複数の情報転送として表されます。少なくとも1つのスポーン要求と1つのスポーン応答。情報転送の実際の量は、スポーンのタイプによって異なり、将来の実装でも変更される可能性があります。これは多かれ少なかれあなたが覗いている内部プロトコルであることに注意してください。スポーンリクエストは、アトム &lt;code&gt;spawn_request&lt;/code&gt; を含む最初の要素を持つタプルとして表されますが、これは多かれ少なかれ信頼できるすべてです。</target>
        </trans-unit>
        <trans-unit id="c38c68c3f6186a6925602a46f9f750d6d6a871ba" translate="yes" xml:space="preserve">
          <source>A process started using one of these functions stores information (for example, about the ancestors and initial call) that is needed for a process in a supervision tree.</source>
          <target state="translated">これらの関数のいずれかを使用して開始されたプロセスは、監督ツリー内のプロセスに必要な情報(例えば、先祖や初期呼び出しに関する情報)を格納します。</target>
        </trans-unit>
        <trans-unit id="8a720c57ae355af10862b0bdc7f574cf5fde79d5" translate="yes" xml:space="preserve">
          <source>A process terminates when there is nothing more for it to do, that is, the last function it calls simply returns and does not call another function. Another way for a process to terminate is for it to call &lt;code&gt;exit/1&lt;/code&gt;. The argument to &lt;code&gt;exit/1&lt;/code&gt; has a special meaning, which is discussed later. In this example, &lt;code&gt;exit(normal)&lt;/code&gt; is done, which has the same effect as a process running out of functions to call.</source>
          <target state="translated">プロセスは、実行する必要がなくなったときに終了します。つまり、プロセスが呼び出す最後の関数は単に戻り、別の関数を呼び出さないだけです。プロセスを終了する別の方法は、プロセスが &lt;code&gt;exit/1&lt;/code&gt; を呼び出すことです。 &lt;code&gt;exit/1&lt;/code&gt; への引数には特別な意味があります。これについては後で説明します。この例では、 &lt;code&gt;exit(normal)&lt;/code&gt; が実行されます。これは、呼び出す関数が不足しているプロセスと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="b7284987fd39b3d4aa792c2690fb0c00bf937e45" translate="yes" xml:space="preserve">
          <source>A process terminates with an exit reason &lt;code&gt;{Reason,Stack}&lt;/code&gt; when a run-time error occurs. See &lt;code&gt;&lt;a href=&quot;errors#exit_reasons&quot;&gt;Exit Reasons&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実行時エラーが発生すると、プロセスは終了理由 &lt;code&gt;{Reason,Stack}&lt;/code&gt; 終了します。 &lt;code&gt;&lt;a href=&quot;errors#exit_reasons&quot;&gt;Exit Reasons&lt;/a&gt;&lt;/code&gt; ご覧ください。</target>
        </trans-unit>
        <trans-unit id="d3f5ab350433257813ae5457fda256563bb26173" translate="yes" xml:space="preserve">
          <source>A process that has subscribed receives the messages &lt;code&gt;{nodeup, Node}&lt;/code&gt; and &lt;code&gt;{nodedown, Node}&lt;/code&gt; when a group node connects or disconnects, respectively.</source>
          <target state="translated">サブスクライブしたプロセスは、グループノードが接続または切断するときに、それぞれ &lt;code&gt;{nodeup, Node}&lt;/code&gt; および &lt;code&gt;{nodedown, Node}&lt;/code&gt; のメッセージを受け取ります。</target>
        </trans-unit>
        <trans-unit id="88f957222cd12e5811bc10dccb60ff786260ced6" translate="yes" xml:space="preserve">
          <source>A process that mostly have short-lived data is fullsweeped seldom or never, that is, the old heap contains mostly garbage. To ensure a fullsweep occasionally, set &lt;code&gt;Number&lt;/code&gt; to a suitable value, such as 10 or 20.</source>
          <target state="translated">存続期間が短いデータがほとんどあるプロセスは、全滅することはめったにないか、まったくありません。つまり、古いヒープにはほとんどゴミが含まれています。時々フルスイープするようにするには、 &lt;code&gt;Number&lt;/code&gt; を10や20などの適切な値に設定します。</target>
        </trans-unit>
        <trans-unit id="b02ce9655d7ee12a68cc9c922758cfe90268e361" translate="yes" xml:space="preserve">
          <source>A process that terminates emits an &lt;strong&gt;exit signal&lt;/strong&gt; with an &lt;strong&gt;exit reason&lt;/strong&gt; that says something about which error has occurred. Normally, some information about the error is printed to the terminal.</source>
          <target state="translated">終了するプロセスは、どのエラーが発生したかについて何かを示す&lt;strong&gt;終了理由&lt;/strong&gt;とともに&lt;strong&gt;終了信号&lt;/strong&gt;を発行します。通常、エラーに関する一部の情報は端末に出力されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4c1ad1b1dc6212b6747cc5b78c88b6a9bc5616a4" translate="yes" xml:space="preserve">
          <source>A process uses a module if the name is listed in &lt;code&gt;Modules&lt;/code&gt; in the child specification for the process.</source>
          <target state="translated">名前がプロセスの子仕様の &lt;code&gt;Modules&lt;/code&gt; にリストされている場合、プロセスはモジュールを使用します。</target>
        </trans-unit>
        <trans-unit id="d52b7cef11e2674343ad2926d3e4df68d2f02770" translate="yes" xml:space="preserve">
          <source>A process which encounters a runtime error (for example, divide by zero, bad match, trying to call a function that does not exist and so on) exits with an error, that is, has an &lt;strong&gt;abnormal&lt;/strong&gt; exit. A process which executes &lt;code&gt;exit(Reason)&lt;/code&gt; where &lt;code&gt;Reason&lt;/code&gt; is any Erlang term except the atom &lt;code&gt;normal&lt;/code&gt;, also has an abnormal exit.</source>
          <target state="translated">ランタイムエラー（たとえば、ゼロ除算、不正な一致、存在しない関数を呼び出そうとしたなど）が発生したプロセスは、エラーで終了します。つまり、&lt;strong&gt;異常&lt;/strong&gt;終了します。 &lt;code&gt;Reason&lt;/code&gt; がアトム &lt;code&gt;normal&lt;/code&gt; 以外の任意のErlang用語である &lt;code&gt;exit(Reason)&lt;/code&gt; を実行するプロセスにも、異常終了があります。</target>
        </trans-unit>
        <trans-unit id="d8cf739fd5b866124284242faae0350386ccbc38" translate="yes" xml:space="preserve">
          <source>A process which executes &lt;code&gt;exit(normal)&lt;/code&gt; or simply runs out of things to do has a &lt;strong&gt;normal&lt;/strong&gt; exit.</source>
          <target state="translated">&lt;code&gt;exit(normal)&lt;/code&gt; を実行する、または単に実行する処理が不足するプロセスには、&lt;strong&gt;通常の&lt;/strong&gt; exitがあります。</target>
        </trans-unit>
        <trans-unit id="d70973a9129b09df85556ba1f21b22c9c9188ac7" translate="yes" xml:space="preserve">
          <source>A process-bound environment contains transient information about the calling Erlang process. The environment is only valid in the thread where it was supplied as argument until the NIF returns. It is thus useless and dangerous to store pointers to process-bound environments between NIF calls.</source>
          <target state="translated">プロセスバインド環境は呼び出したErlangプロセスに関する過渡的な情報を含んでいます。この環境は引数として提供されたスレッドでのみ有効で、NIFが戻るまで有効です。したがって、NIF呼び出しの間にプロセスバインド環境へのポインタを保存するのは無意味で危険です。</target>
        </trans-unit>
        <trans-unit id="8439869a5f898e9ec34e7c4ce1fd0dfa05b36050" translate="yes" xml:space="preserve">
          <source>A program development technique where you continuously write tests &lt;strong&gt;before&lt;/strong&gt; you implement the code that is supposed to pass those tests. This can help you focus on solving the right problems, and not make a more complicated implementation than necessary, by letting the unit tests determine when a program is &quot;done&quot;: if it fulfils its specifications, there is no need to keep adding functionality.</source>
          <target state="translated">テスト&lt;strong&gt;に&lt;/strong&gt;合格するはずのコードを実装する&lt;strong&gt;前に&lt;/strong&gt;、テストを継続的に作成するプログラム開発手法。これにより、ユニットテストでプログラムが「完了」するタイミングを判断できるため、適切な問題の解決に集中でき、必要以上に複雑な実装を行う必要がなくなります。プログラムが仕様を満たしている場合は、機能を追加し続ける必要はありません。</target>
        </trans-unit>
        <trans-unit id="31698109f367fecfe3048c58496050f0b7013f39" translate="yes" xml:space="preserve">
          <source>A program works regardless of the data location. It makes no difference whether the data resides on the local node or on a remote node.</source>
          <target state="translated">プログラムはデータの場所に関係なく動作します。データがローカルノードにあるかリモートノードにあるかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="31abad1a30c128c77e1602c287c4f23c333d4d5c" translate="yes" xml:space="preserve">
          <source>A programming language is not much use if you only can run code from the shell. So here is a small Erlang program. Enter it into a file named &lt;code&gt;tut.erl&lt;/code&gt; using a suitable text editor. The file name &lt;code&gt;tut.erl&lt;/code&gt; is important, and also that it is in the same directory as the one where you started &lt;code&gt;erl&lt;/code&gt;). If you are lucky your editor has an Erlang mode that makes it easier for you to enter and format your code nicely (see &lt;code&gt;The Erlang mode for Emacs&lt;/code&gt; in Tools User's Guide), but you can manage perfectly well without. Here is the code to enter:</source>
          <target state="translated">シェルからのみコードを実行できる場合、プログラミング言語はあまり使用されません。ここに小さなErlangプログラムがあります。適切なテキストエディタを使用して、 &lt;code&gt;tut.erl&lt;/code&gt; という名前のファイルに入力します。ファイル名 &lt;code&gt;tut.erl&lt;/code&gt; は重要です。また、ファイル名は &lt;code&gt;erl&lt;/code&gt; を起動したディレクトリと同じディレクトリにあります。運が良ければ、エディターにErlangモードがあり、コードの入力と書式設定を簡単に行うことができます（ 『Tools User's Guide』の &lt;code&gt;The Erlang mode for Emacs&lt;/code&gt; 参照）が、完全にうまく管理できます。入力するコードは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="01bea3eff51113f444f36e486039be93438b9aa1" translate="yes" xml:space="preserve">
          <source>A progress report is issued when a supervisor starts or restarts a child. A progress report contains the following items:</source>
          <target state="translated">進捗報告書は、監督者が子どもを開始または再開するときに発行されます。進捗報告書には以下の項目が含まれています。</target>
        </trans-unit>
        <trans-unit id="7a2323a209e1a22ed12fa10ec6f9c3cae4a441ed" translate="yes" xml:space="preserve">
          <source>A proper list of arguments to use in the call to the entry point.</source>
          <target state="translated">エントリポイントへの呼び出しで使用する引数の適切なリスト。</target>
        </trans-unit>
        <trans-unit id="6fc5b72e9976f09f432e0a687f016f57f9a5aece" translate="yes" xml:space="preserve">
          <source>A proper list of spawn options to use when spawning.</source>
          <target state="translated">スポーン時に使用するスポーンオプションの適切なリスト。</target>
        </trans-unit>
        <trans-unit id="dfa1a1d7586f8b047c09414dbfe4922da8132644" translate="yes" xml:space="preserve">
          <source>A protocol-independent equivalent of &lt;code&gt;tos&lt;/code&gt; above. Setting priority implies setting &lt;code&gt;tos&lt;/code&gt; as well.</source>
          <target state="translated">上記の &lt;code&gt;tos&lt;/code&gt; に相当するプロトコルに依存しないもの。優先順位を設定すると、 &lt;code&gt;tos&lt;/code&gt; も設定されます。</target>
        </trans-unit>
        <trans-unit id="4dcc85d5e6a8d3b2dabc11b50011d74738e45c9a" translate="yes" xml:space="preserve">
          <source>A proxy-authorization header using the provided username and password is added to the request.</source>
          <target state="translated">提供されたユーザー名とパスワードを使用したプロキシ承認ヘッダーが リクエストに追加される。</target>
        </trans-unit>
        <trans-unit id="fca72e9fdf4fbe435757ecdf4f89e484c25bdd95" translate="yes" xml:space="preserve">
          <source>A pseudo-terminal has been requested for the session. &lt;code&gt;Terminal&lt;/code&gt; is the value of the TERM environment variable value, that is, &lt;code&gt;vt100&lt;/code&gt;. Zero dimension parameters must be ignored. The character/row dimensions override the pixel dimensions (when non-zero). Pixel dimensions refer to the drawable area of the window. &lt;code&gt;Opcode&lt;/code&gt; in the &lt;code&gt;TerminalModes&lt;/code&gt; list is the mnemonic name, represented as a lowercase Erlang atom, defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt;, Section 8. It can also be an &lt;code&gt;Opcode&lt;/code&gt; if the mnemonic name is not listed in the RFC. Example: &lt;code&gt;OP code: 53, mnemonic name ECHO erlang atom: echo&lt;/code&gt;. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#ptty_alloc-4&quot;&gt;ssh_connection:ptty_alloc/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">セッションに対して疑似端末が要求されました。 &lt;code&gt;Terminal&lt;/code&gt; は、TERM環境変数の値、つまり &lt;code&gt;vt100&lt;/code&gt; の値です。ゼロ次元パラメーターは無視する必要があります。文字/行の寸法はピクセルの寸法を上書きします（ゼロ以外の場合）。ピクセル寸法は、ウィンドウの描画可能領域を指します。 &lt;code&gt;TerminalModes&lt;/code&gt; リストの &lt;code&gt;Opcode&lt;/code&gt; は、小文字のErlangアトムとして表されるニーモニック名であり、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt; のセクション8 で定義されています。ニーモニック名がRFCにリストされていない場合は、 &lt;code&gt;Opcode&lt;/code&gt; にすることもできます。例： &lt;code&gt;OP code: 53, mnemonic name ECHO erlang atom: echo&lt;/code&gt; 。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#ptty_alloc-4&quot;&gt;ssh_connection:ptty_alloc/4&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="1fc5e44171b910f411dd9eff54be6144ce19b764" translate="yes" xml:space="preserve">
          <source>A pseudo-terminal has been requested for the session. &lt;code&gt;Terminal&lt;/code&gt; is the value of the TERM environment variable value, that is, &lt;code&gt;vt100&lt;/code&gt;. Zero dimension parameters must be ignored. The character/row dimensions override the pixel dimensions (when non-zero). Pixel dimensions refer to the drawable area of the window. &lt;code&gt;Opcode&lt;/code&gt; in the &lt;code&gt;TerminalModes&lt;/code&gt; list is the mnemonic name, represented as a lowercase Erlang atom, defined in &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4254#section/8&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt;, Section 8. It can also be an &lt;code&gt;Opcode&lt;/code&gt; if the mnemonic name is not listed in the RFC. Example: &lt;code&gt;OP code: 53, mnemonic name ECHO erlang atom: echo&lt;/code&gt;. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#ptty_alloc-4&quot;&gt;ssh_connection:ptty_alloc/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">セッションに疑似端末が要求されました。 &lt;code&gt;Terminal&lt;/code&gt; は、TERM環境変数値の値、つまり &lt;code&gt;vt100&lt;/code&gt; です。ゼロ次元パラメータは無視する必要があります。文字/行の寸法はピクセルの寸法を上書きします（ゼロ以外の場合）。ピクセルの寸法は、ウィンドウの描画可能な領域を指します。 &lt;code&gt;TerminalModes&lt;/code&gt; リストの &lt;code&gt;Opcode&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4254#section/8&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt; のセクション8で定義されている小文字のErlangアトムとして表されるニーモニック名です。ニーモニック名がRFCにリストされていない場合は、 &lt;code&gt;Opcode&lt;/code&gt; にすることもできます。例： &lt;code&gt;OP code: 53, mnemonic name ECHO erlang atom: echo&lt;/code&gt; 。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#ptty_alloc-4&quot;&gt;ssh_connection:ptty_alloc/4&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="d53dd83df64a4aed582356aeff9d756b34b98db4" translate="yes" xml:space="preserve">
          <source>A qualifier Q is one of the following:</source>
          <target state="translated">予選詞Qは、次のいずれかに該当します。</target>
        </trans-unit>
        <trans-unit id="16e918dd54f68fd1cee2a154501ced6dc2ab06fa" translate="yes" xml:space="preserve">
          <source>A query handle is evaluated in the following order:</source>
          <target state="translated">クエリハンドルは、以下の順序で評価されます。</target>
        </trans-unit>
        <trans-unit id="0e8baf0d28cdf7d93d387dd8846b5f6b10083008" translate="yes" xml:space="preserve">
          <source>A raw option request &lt;code&gt;RawOptReq = {raw, Protocol, OptionNum, ValueSpec}&lt;/code&gt; can be used to get information about socket options not (explicitly) supported by the emulator. The use of raw socket options makes the code non-portable, but allows the Erlang programmer to take advantage of unusual features present on a particular platform.</source>
          <target state="translated">rawオプション要求 &lt;code&gt;RawOptReq = {raw, Protocol, OptionNum, ValueSpec}&lt;/code&gt; を使用して、エミュレーターで（明示的に）サポートされていないソケットオプションに関する情報を取得できます。rawソケットオプションを使用すると、コードは移植性がなくなりますが、Erlangプログラマーは特定のプラットフォームに存在する珍しい機能を利用できます。</target>
        </trans-unit>
        <trans-unit id="f61712a9538d9f895b83ffb3d3be147091cb2096" translate="yes" xml:space="preserve">
          <source>A raw option request &lt;code&gt;RawOptReq = {raw, Protocol, OptionNum, ValueSpec}&lt;/code&gt; can be used to get information about socket options not (explicitly) supported by the emulator. The use of raw socket options makes the code non-portable, but allows the Erlang programmer to take advantage of unusual features present on the current platform.</source>
          <target state="translated">生のオプション要求 &lt;code&gt;RawOptReq = {raw, Protocol, OptionNum, ValueSpec}&lt;/code&gt; を使用して、エミュレータで（明示的に）サポートされていないソケットオプションに関する情報を取得できます。rawソケットオプションを使用すると、コードは移植できなくなりますが、Erlangプログラマーは現在のプラットフォームに存在する異常な機能を利用できます。</target>
        </trans-unit>
        <trans-unit id="3ebff0e214120dc5d32ac8a4a0637ce5cce89676" translate="yes" xml:space="preserve">
          <source>A read event was cancelled by &lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; or &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; and is guaranteed not to generate a &lt;code&gt;ready_input&lt;/code&gt; notification message.</source>
          <target state="translated">読み取りイベントは &lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; または &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; によってキャンセルされ、 &lt;code&gt;ready_input&lt;/code&gt; 通知メッセージを生成しないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="8ff008f39f98c26bb673531ccb371655a692f01c" translate="yes" xml:space="preserve">
          <source>A recommended starting point for the first-time user is the documentation of the &lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; data type, and the function &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">初めてのユーザーに推奨される開始点は、 &lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; データ型と関数 &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="eb56dddcb8b70cd19ebdc2bcc639e335bb693c26" translate="yes" xml:space="preserve">
          <source>A recommended starting point for the first-time user is the documentation of the function &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">初めてのユーザーに推奨される出発点は、関数 &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; のドキュメントです。</target>
        </trans-unit>
        <trans-unit id="1e58752debf6eb10b77ef1dd1dbb8c914a8de4f8" translate="yes" xml:space="preserve">
          <source>A record definition can be placed anywhere among the attributes and function declarations of a module, but the definition must come before any usage of the record.</source>
          <target state="translated">レコードの定義は、モジュールの属性や関数の宣言のどこにでも置くことができますが、定義はレコードを使用する前に来なければなりません。</target>
        </trans-unit>
        <trans-unit id="ba583d421bbddc518a0b6122d30465ab600660d3" translate="yes" xml:space="preserve">
          <source>A record definition consists of the name of the record, followed by the field names of the record. Record and field names must be atoms. Each field can be given an optional default value. If no default value is supplied, &lt;code&gt;undefined&lt;/code&gt; is used.</source>
          <target state="translated">レコード定義は、レコードの名前と、それに続くレコードのフィールド名で構成されます。レコード名とフィールド名はアトムでなければなりません。各フィールドには、オプションのデフォルト値を指定できます。デフォルト値が指定されていない場合、 &lt;code&gt;undefined&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="1bbaae8298ac3d9e6e938e77fc79043b34deaf0a" translate="yes" xml:space="preserve">
          <source>A record has possibly been deleted with &lt;code&gt;&lt;a href=&quot;mnesia#delete_object-1&quot;&gt;mnesia:delete_object/1&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;OldRecord&lt;/code&gt; contains the value of the old record, as stated as argument by the application. Notice that other records with the same key can remain in the table if it is of type &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">レコードは &lt;code&gt;&lt;a href=&quot;mnesia#delete_object-1&quot;&gt;mnesia:delete_object/1&lt;/a&gt;&lt;/code&gt; で削除された可能性があります。 &lt;code&gt;OldRecord&lt;/code&gt; には、アプリケーションによって引数として指定された、古いレコードの値が含まれています。タイプが &lt;code&gt;bag&lt;/code&gt; の場合、同じキーを持つ他のレコードがテーブルに残る可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="72d63fe5211c7ae3ef0a86204219aaaa2f059f47" translate="yes" xml:space="preserve">
          <source>A record is a data structure for storing a fixed number of elements. It has named fields and is similar to a struct in C. However, a record is not a true data type. Instead, record expressions are translated to tuple expressions during compilation. Therefore, record expressions are not understood by the shell unless special actions are taken. For details, see the &lt;code&gt;shell(3)&lt;/code&gt; manual page in STDLIB).</source>
          <target state="translated">レコードは、固定数の要素を格納するためのデータ構造です。名前付きフィールドがあり、Cの構造体に似ています。ただし、レコードは真のデータ型ではありません。代わりに、レコード式はコンパイル時にタプル式に変換されます。したがって、特別なアクションが実行されない限り、レコード式はシェルによって理解されません。詳細については、STDLIBの &lt;code&gt;shell(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="10b1bbed2ccfee04b70ac0a61eb0d3ccdccb28c7" translate="yes" xml:space="preserve">
          <source>A record is a data structure for storing a fixed number of elements. It has named fields and is similar to a struct in C. Record expressions are translated to tuple expressions during compilation. Therefore, record expressions are not understood by the shell unless special actions are taken. For details, see the &lt;code&gt;shell(3)&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">レコードは、固定数の要素を格納するためのデータ構造です。名前付きフィールドがあり、Cの構造体に似ています。レコード式は、コンパイル時にタプル式に変換されます。したがって、特別なアクションが実行されない限り、レコード式はシェルによって理解されません。詳細については、STDLIBの &lt;code&gt;shell(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="c08da4f4936f6c7ef6c5c849615f4e5aa16f8d6a" translate="yes" xml:space="preserve">
          <source>A record is defined as:</source>
          <target state="translated">レコードとは、以下のように定義されています。</target>
        </trans-unit>
        <trans-unit id="2caff8ac97a88a40d8081c22ddabb3164e9d8ee2" translate="yes" xml:space="preserve">
          <source>A record that describes an employee can look as follows:</source>
          <target state="translated">従業員を記述した記録は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="ea49bf259e7f3ffbeb1c63e53edd2986c4da3837" translate="yes" xml:space="preserve">
          <source>A reference is a term that is unique in an Erlang runtime system, created by calling &lt;code&gt;make_ref/0&lt;/code&gt;.</source>
          <target state="translated">参照は、 &lt;code&gt;make_ref/0&lt;/code&gt; を呼び出すことによって作成された、Erlangランタイムシステムで一意の用語です。</target>
        </trans-unit>
        <trans-unit id="14e8331cdb8c151b2856ff19909f37919f2942e9" translate="yes" xml:space="preserve">
          <source>A reference refers into a node table, which also consumes memory.</source>
          <target state="translated">参照はノードテーブルを参照しますが、これもメモリを消費します。</target>
        </trans-unit>
        <trans-unit id="f5a40d0612040493ede164c97573dfd19a4e473a" translate="yes" xml:space="preserve">
          <source>A reference that uniquely identifies the (select) operation.</source>
          <target state="translated">(select)操作を一意に識別する参照。</target>
        </trans-unit>
        <trans-unit id="0a4f0d6f1f9b5df543605d7bc8edbd15d630e93c" translate="yes" xml:space="preserve">
          <source>A registered name.</source>
          <target state="translated">登録された名前。</target>
        </trans-unit>
        <trans-unit id="4417be038ecab856e8399ba11dec3102f33f7d40" translate="yes" xml:space="preserve">
          <source>A registered send operation has occurred and &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; contains the pid of the sender. The message is in &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt;.</source>
          <target state="translated">登録された送信操作が発生し、 &lt;code&gt;emsg-&amp;gt;from&lt;/code&gt; に送信者のPIDが含まれています。メッセージは &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="e77a6a05b56401cd9d0ab970f691941ff41f5126" translate="yes" xml:space="preserve">
          <source>A registered send operation occurred. &lt;code&gt;msg-&amp;gt;from&lt;/code&gt; contains the pid of the sender.</source>
          <target state="translated">登録された送信操作が発生しました。 &lt;code&gt;msg-&amp;gt;from&lt;/code&gt; には、送信者のPIDが含まれています。</target>
        </trans-unit>
        <trans-unit id="f8d3748e235b7729da3350a0d2920104b36dba36" translate="yes" xml:space="preserve">
          <source>A registry that has previously been created with &lt;code&gt;ei_reg_open()&lt;/code&gt; is closed, and all the objects it contains are freed.</source>
          <target state="translated">以前に &lt;code&gt;ei_reg_open()&lt;/code&gt; で作成されたレジストリが閉じられ、そこに含まれるすべてのオブジェクトが解放されます。</target>
        </trans-unit>
        <trans-unit id="d54a6449f65944104c58b103284695849e8fb0c0" translate="yes" xml:space="preserve">
          <source>A regular expression based lexical analyzer generator for Erlang, similar to lex or flex.</source>
          <target state="translated">正規表現ベースのErlang用の語彙解析ジェネレータで、lexやflexに似ています。</target>
        </trans-unit>
        <trans-unit id="d1dac6b0a35eaa9eeb715296367bf1003d8ca372" translate="yes" xml:space="preserve">
          <source>A regular expression is a pattern that is matched against a subject string from left to right. Most characters stand for themselves in a pattern and match the corresponding characters in the subject. As a trivial example, the following pattern matches a portion of a subject string that is identical to itself:</source>
          <target state="translated">正規表現とは、サブジェクトの文字列に対して左から右へとマッチするパターンのことです。ほとんどの文字はパターンの中で自分自身を表し、サブジェクト内の対応する文字と一致します。些細な例として、以下のパターンは、それ自身と同一のサブジェクト文字列の一部にマッチします。</target>
        </trans-unit>
        <trans-unit id="72879a85f0e7c023321bf2bf93898f7dd0d964ea" translate="yes" xml:space="preserve">
          <source>A relation R in X is &lt;strong&gt;reflexive&lt;/strong&gt; if x R x for every element x of X, it is &lt;strong&gt;symmetric&lt;/strong&gt; if x R y implies that y R x, and it is &lt;strong&gt;transitive&lt;/strong&gt; if x R y and y R z imply that x R z.</source>
          <target state="translated">Xの関係Rは、Xのすべての要素xについてx R xの場合は&lt;strong&gt;再帰的&lt;/strong&gt;であり、x R yがy R xの場合は&lt;strong&gt;対称&lt;/strong&gt;であり、x R yとy R zがx R zの場合は&lt;strong&gt;推移的&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="d4e299db49e468c2bde2833d058721d987434955" translate="yes" xml:space="preserve">
          <source>A relation in a set is an &lt;strong&gt;equivalence relation&lt;/strong&gt; if it is reflexive, symmetric, and transitive.</source>
          <target state="translated">セット内の関係は、それが再帰的、対称的、推移的である場合、&lt;strong&gt;同値関係&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="0ebab014aefe1952987eeb358deade3e55cb740e" translate="yes" xml:space="preserve">
          <source>A relational/object hybrid data model that is suitable for telecommunications applications.</source>
          <target state="translated">通信アプリケーションに適したリレーショナル/オブジェクトハイブリッドデータモデル。</target>
        </trans-unit>
        <trans-unit id="bdbc21562cd7fcdf1a6c8c8fdaf7713b768b8540" translate="yes" xml:space="preserve">
          <source>A release package can also contain:</source>
          <target state="translated">リリースパッケージには、以下のようなものが含まれていることもあります。</target>
        </trans-unit>
        <trans-unit id="70a237d6b6ad6eae7ebaff5d81629ed2d641cc80" translate="yes" xml:space="preserve">
          <source>A release package is always to contain:</source>
          <target state="translated">リリースパッケージは常に含まれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="ec17e9f9c454053a070fd20ff7eeb8af0a65c4c3" translate="yes" xml:space="preserve">
          <source>A release resource file, &lt;code&gt;Name.rel&lt;/code&gt;</source>
          <target state="translated">リリースリソースファイル &lt;code&gt;Name.rel&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="fa054e2d79bd8ac06f390024625251631581f417" translate="yes" xml:space="preserve">
          <source>A release upgrade file, &lt;code&gt;relup&lt;/code&gt;</source>
          <target state="translated">リリースアップグレードファイル &lt;code&gt;relup&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7fe2e6189285d97d6577d1e21b467c08a9445c7c" translate="yes" xml:space="preserve">
          <source>A released application must follow a certain structure.</source>
          <target state="translated">リリースされたアプリケーションは、一定の構造に従わなければなりません。</target>
        </trans-unit>
        <trans-unit id="1ffc64bafad7783a2c6df745a520b71eddb2ea11" translate="yes" xml:space="preserve">
          <source>A relup script can only have one &lt;code&gt;restart_emulator&lt;/code&gt; instruction and it must always be placed at the end. If the relup is generated by &lt;code&gt;systools:make_relup/3,4&lt;/code&gt;, this is automatically ensured.</source>
          <target state="translated">relupスクリプトには、 &lt;code&gt;restart_emulator&lt;/code&gt; 命令を1つだけ含めることができ、常に最後に配置する必要があります。 &lt;code&gt;systools:make_relup/3,4&lt;/code&gt; によって生成される場合、これは自動的に保証されます。</target>
        </trans-unit>
        <trans-unit id="c55e43ee14cb55c89c46dda7dd3c64e06ed074e9" translate="yes" xml:space="preserve">
          <source>A remote Erlang file server cannot be used. The computer on which the Erlang node is running must have access to the file system (directly or through NFS).</source>
          <target state="translated">リモートのErlangファイルサーバーは使えません。Erlangノードが動いているコンピュータはファイルシステムにアクセスできなければなりません(直接かNFSを使って)。</target>
        </trans-unit>
        <trans-unit id="a57b69cf3ad43e824a3831ee7e57db92ae3dde80" translate="yes" xml:space="preserve">
          <source>A remote execution can terminate violently because of a signal. Then this message can be received. For details on valid string values, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt; Section 6.10, which shows a special case of these signals.</source>
          <target state="translated">シグナルが原因でリモート実行が激しく終了する可能性があります。その後、このメッセージを受信できます。有効な文字列値の詳細については、これらの信号の特殊なケースを示す &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt; セクション6.10を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c596892eeac26bffdaa259eeeee428644ec4341" translate="yes" xml:space="preserve">
          <source>A remote execution can terminate violently because of a signal. Then this message can be received. For details on valid string values, see &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4254#section-6.10&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt; Section 6.10, which shows a special case of these signals.</source>
          <target state="translated">リモート実行は、シグナルが原因で激しく終了する可能性があります。その後、このメッセージを受信できます。有効な文字列値の詳細については、 &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc4254#section-6.10&quot;&gt;RFC 4254&lt;/a&gt;&lt;/code&gt; セクション6.10を参照してください。これは、これらの信号の特殊なケースを示しています。</target>
        </trans-unit>
        <trans-unit id="cfa0f3b36cc97b41ae10c4a61219216ab07da247" translate="yes" xml:space="preserve">
          <source>A remote node Y must be known to node X if there exists any pids, ports, references, or funs (Erlang data types) from Y on X, or if X and Y are connected. The maximum number of remote nodes simultaneously/ever known to a node is limited by the &lt;code&gt;&lt;a href=&quot;#atoms&quot;&gt;maximum number of atoms&lt;/a&gt;&lt;/code&gt; available for node names. All data concerning remote nodes, except for the node name atom, are garbage-collected.</source>
          <target state="translated">X上のYからPID、ポート、参照、またはファン（Erlangデータ型）が存在する場合、またはXとYが接続されている場合、リモートノードYはノードXに認識されている必要があります。ノードが同時に/常に認識するリモートノードの &lt;code&gt;&lt;a href=&quot;#atoms&quot;&gt;maximum number of atoms&lt;/a&gt;&lt;/code&gt; 、ノード名に使用できるアトムの最大数によって制限されます。ノード名アトムを除く、リモートノードに関するすべてのデータはガベージコレクションされます。</target>
        </trans-unit>
        <trans-unit id="2ef0e40b8a94e3602eaf0a08318e503302907b08" translate="yes" xml:space="preserve">
          <source>A reply sent with this function is not visible in &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; debug output.</source>
          <target state="translated">この関数で送信された応答は、 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; デバッグ出力には表示されません。</target>
        </trans-unit>
        <trans-unit id="968b931f26a7eb0a1ce8e38bc2b4799ef2fd705f" translate="yes" xml:space="preserve">
          <source>A report callback is used by the formatter to transform log messages on report form to a format string and arguments. The report callback can be specified in the metadata for the log event. If no report callback exists in metadata, &lt;code&gt;logger_formatter&lt;/code&gt; will use &lt;code&gt;&lt;a href=&quot;logger#format_report-1&quot;&gt; logger:format_report/1&lt;/a&gt;&lt;/code&gt; as default callback.</source>
          <target state="translated">レポートコールバックは、レポートフォームのログメッセージをフォーマット文字列と引数に変換するためにフォーマッタによって使用されます。レポートコールバックは、ログイベントのメタデータで指定できます。メタデータにレポートコールバックが存在しない場合、 &lt;code&gt;logger_formatter&lt;/code&gt; はデフォルトのコールバックとして &lt;code&gt;&lt;a href=&quot;logger#format_report-1&quot;&gt; logger:format_report/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d65b57be2761081067ca64ced4646ffe5f623f66" translate="yes" xml:space="preserve">
          <source>A report callback is used by the formatter to transform log messages on report form to a format string and arguments. The report callback can be specified in the metadata for the log event. If no report callback exists in metadata, &lt;code&gt;logger_formatter&lt;/code&gt; will use &lt;code&gt;&lt;a href=&quot;logger#format_report-1&quot;&gt;logger:format_report/1&lt;/a&gt;&lt;/code&gt; as default callback.</source>
          <target state="translated">レポートコールバックは、レポートフォームのログメッセージをフォーマット文字列と引数に変換するためにフォーマッターによって使用されます。レポートコールバックは、ログイベントのメタデータで指定できます。メタデータにレポートコールバックが存在しない場合、 &lt;code&gt;logger_formatter&lt;/code&gt; はデフォルトのコールバックとして &lt;code&gt;&lt;a href=&quot;logger#format_report-1&quot;&gt;logger:format_report/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3cb325283449bed9030a0b8eb054228f9049d2fb" translate="yes" xml:space="preserve">
          <source>A representaion of a part (or range) in a binary. &lt;code&gt;Start&lt;/code&gt; is a zero-based offset into a &lt;code&gt;binary()&lt;/code&gt; and &lt;code&gt;Length&lt;/code&gt; is the length of that part. As input to functions in this module, a reverse part specification is allowed, constructed with a negative &lt;code&gt;Length&lt;/code&gt;, so that the part of the binary begins at &lt;code&gt;Start&lt;/code&gt; + &lt;code&gt;Length&lt;/code&gt; and is -&lt;code&gt;Length&lt;/code&gt; long. This is useful for referencing the last &lt;code&gt;N&lt;/code&gt; bytes of a binary as &lt;code&gt;{size(Binary), -N}&lt;/code&gt;. The functions in this module always return &lt;code&gt;part()&lt;/code&gt;s with positive &lt;code&gt;Length&lt;/code&gt;.</source>
          <target state="translated">バイナリの一部（または範囲）の表現。 &lt;code&gt;Start&lt;/code&gt; は &lt;code&gt;binary()&lt;/code&gt; へのゼロベースのオフセットで、 &lt;code&gt;Length&lt;/code&gt; はその部分の長さです。このモジュール内の関数への入力として、逆部品仕様は、許容される負で構築 &lt;code&gt;Length&lt;/code&gt; バイナリの一部で始まるように、 &lt;code&gt;Start&lt;/code&gt; +の &lt;code&gt;Length&lt;/code&gt; -とある &lt;code&gt;Length&lt;/code&gt; の長いです。これは、バイナリの最後の &lt;code&gt;N&lt;/code&gt; バイトを &lt;code&gt;{size(Binary), -N}&lt;/code&gt; として参照するのに役立ちます。このモジュールの関数は、常に正の &lt;code&gt;Length&lt;/code&gt; の &lt;code&gt;part()&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2f1aa5116d3fb4b00376ef8dcd3fa6e2ce235d63" translate="yes" xml:space="preserve">
          <source>A representation of a part (or range) in a binary. &lt;code&gt;Start&lt;/code&gt; is a zero-based offset into a &lt;code&gt;binary()&lt;/code&gt; and &lt;code&gt;Length&lt;/code&gt; is the length of that part. As input to functions in this module, a reverse part specification is allowed, constructed with a negative &lt;code&gt;Length&lt;/code&gt;, so that the part of the binary begins at &lt;code&gt;Start&lt;/code&gt; + &lt;code&gt;Length&lt;/code&gt; and is -&lt;code&gt;Length&lt;/code&gt; long. This is useful for referencing the last &lt;code&gt;N&lt;/code&gt; bytes of a binary as &lt;code&gt;{size(Binary), -N}&lt;/code&gt;. The functions in this module always return &lt;code&gt;part()&lt;/code&gt;s with positive &lt;code&gt;Length&lt;/code&gt;.</source>
          <target state="translated">バイナリ内のパーツ（または範囲）の表現。 &lt;code&gt;Start&lt;/code&gt; は &lt;code&gt;binary()&lt;/code&gt; へのゼロベースのオフセットであり、 &lt;code&gt;Length&lt;/code&gt; はその部分の長さです。このモジュールの関数への入力として、負の &lt;code&gt;Length&lt;/code&gt; で構成された逆の部分の指定が許可されているため、バイナリの部分は &lt;code&gt;Start&lt;/code&gt; + &lt;code&gt;Length&lt;/code&gt; 始まり、- &lt;code&gt;Length&lt;/code&gt; です。これは、バイナリの最後の &lt;code&gt;N&lt;/code&gt; バイトを &lt;code&gt;{size(Binary), -N}&lt;/code&gt; として参照する場合に役立ちます。このモジュールの関数は、常に正の &lt;code&gt;Length&lt;/code&gt; の &lt;code&gt;part()&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3cd076e54cc70b0a6f690c2fbc8ae7eee141d7ed" translate="yes" xml:space="preserve">
          <source>A representation of the current context of the pretty-printer. Can be accessed in hook functions.</source>
          <target state="translated">pretty-printer の現在のコンテキストの表現。フック関数でアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e2faa414df8b457497c58bbac25134eed33ca746" translate="yes" xml:space="preserve">
          <source>A request handle, see &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt; send_request/2 &lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">リクエストハンドル。詳細については、 &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt; send_request/2 &lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="060acb73f9bf52d61dfcf27189e091e2a0ff80f3" translate="yes" xml:space="preserve">
          <source>A request handle, see &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt; send_request/3 &lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">リクエストハンドル。詳細については、 &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt; send_request/3 &lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="489f7c9165ae17355e87065058b1cd9bf9bd345f" translate="yes" xml:space="preserve">
          <source>A request to http://your.server.org/cgi-bin/example/httpd_example:yahoo would refer to httpd_example:yahoo/3 or, if that does not exist, httpd_example:yahoo/2 and http://your.server.org/cgi-bin/example/other:yahoo would not be allowed to execute.</source>
          <target state="translated">http://your.server.org/cgi-bin/example/httpd_example:yahoo へのリクエストは httpd_example:yahoo/3 を参照するか、それが存在しない場合は httpd_example:yahoo/2 と http://your.server.org/cgi-bin/example/other:yahoo は実行を許可されません。</target>
        </trans-unit>
        <trans-unit id="aa222544811c186e688c873a3b1f9169cad3037b" translate="yes" xml:space="preserve">
          <source>A request to terminate the transport process after having received DPA in response to DPR. The transport process should exit. &lt;code&gt;Pid&lt;/code&gt; is the pid() of the parent process.</source>
          <target state="translated">DPRに応答してDPAを受信した後、トランスポートプロセスを終了する要求。トランスポートプロセスは終了します。 &lt;code&gt;Pid&lt;/code&gt; は、親プロセスのpid（）です。</target>
        </trans-unit>
        <trans-unit id="7e78eeac55809d5c5a5db06a988ff97769682bea" translate="yes" xml:space="preserve">
          <source>A required variable can also be given a default value to be used if the variable is not found in any configuration file. To specify a default value, add a tuple on the form &lt;code&gt;{default_config,ConfigVariableName,Value}&lt;/code&gt; to the test case information list (the position in the list is irrelevant).</source>
          <target state="translated">必要な変数には、その変数が構成ファイルで見つからない場合に使用されるデフォルト値を指定することもできます。デフォルト値を指定するには、 &lt;code&gt;{default_config,ConfigVariableName,Value}&lt;/code&gt; の形式でタプルをテストケース情報リストに追加します（リスト内の位置は関係ありません）。</target>
        </trans-unit>
        <trans-unit id="c1229803283f11562375509c222552c10accf62d" translate="yes" xml:space="preserve">
          <source>A resource term can be serialized with &lt;code&gt;term_to_binary&lt;/code&gt; and later be fully recreated if the resource object is still alive when &lt;code&gt;binary_to_term&lt;/code&gt; is called. A &lt;strong&gt;stale&lt;/strong&gt; resource term will be returned from &lt;code&gt;binary_to_term&lt;/code&gt; if the resource object has been deallocated. &lt;code&gt;&lt;a href=&quot;#enif_get_resource&quot;&gt;enif_get_resource&lt;/a&gt;&lt;/code&gt; will return false for stale resource terms.</source>
          <target state="translated">リソース用語は、 &lt;code&gt;term_to_binary&lt;/code&gt; でシリアル化でき、 &lt;code&gt;binary_to_term&lt;/code&gt; が呼び出されたときにリソースオブジェクトがまだ生きている場合は、後で完全に再作成できます。&lt;strong&gt;古くなった&lt;/strong&gt;リソース用語から返される &lt;code&gt;binary_to_term&lt;/code&gt; リソースオブジェクトの割り当てが解除された場合。 &lt;code&gt;&lt;a href=&quot;#enif_get_resource&quot;&gt;enif_get_resource&lt;/a&gt;&lt;/code&gt; は、古いリソース条件に対してfalseを返します。</target>
        </trans-unit>
        <trans-unit id="50ae922c622293c13dbc2965d257c86fc95a1f21" translate="yes" xml:space="preserve">
          <source>A resource to be managed is represented by a managed object, which resides in the MIB. In an SNMP MIB, the managed objects are either:</source>
          <target state="translated">管理されるリソースは、MIBに存在するマネージドオブジェクトで表されます。SNMP MIBでは、管理されるオブジェクトは次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="8e4eb7e095c0c09d5767bd5279f5cdff3096b732" translate="yes" xml:space="preserve">
          <source>A restricted set of &lt;code&gt;&lt;a href=&quot;#type-spawn_option&quot;&gt;spawn options&lt;/a&gt;&lt;/code&gt;. Most notably &lt;code&gt;monitor&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; part of these options.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-spawn_option&quot;&gt;spawn options&lt;/a&gt;&lt;/code&gt; 制限されたセット。特に、 &lt;code&gt;monitor&lt;/code&gt; はこれらのオプションの一部ではあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d797a366df3377e950dd7503223fc79e6918d3ba" translate="yes" xml:space="preserve">
          <source>A returned error reason can be converted into a readable string using &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">返されたエラー理由は、 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; を使用して読み取り可能な文字列に変換できます。</target>
        </trans-unit>
        <trans-unit id="e1717e1bc6c4fa58d53cbf11fb5819e00bdd83ca" translate="yes" xml:space="preserve">
          <source>A rudimentary DNS client.</source>
          <target state="translated">初歩的なDNSクライアント。</target>
        </trans-unit>
        <trans-unit id="59d2054b44ad5d0ec1cf63133801ae0786ec3996" translate="yes" xml:space="preserve">
          <source>A rule is recognized by its right-pointer arrow: &lt;code&gt;=&amp;gt;&lt;/code&gt;. To the left of the arrow is one or more instruction patterns, separated by &lt;code&gt;|&lt;/code&gt;. To the right of the arrow is zero or more instructions, separated by &lt;code&gt;|&lt;/code&gt;. If the instructions from the BEAM code matches the instruction patterns on the left side, they will be replaced with instructions on the right side (or removed if there are no instructions on the right).</source>
          <target state="translated">ルールは、右向き矢印で認識されます： &lt;code&gt;=&amp;gt;&lt;/code&gt; 。矢印の左側には、 &lt;code&gt;|&lt;/code&gt; で区切られた1つ以上の命令パターンがあります。。矢印の右側には、 &lt;code&gt;|&lt;/code&gt; で区切られた0個以上の命令があります。。BEAMコードからの命令が左側の命令パターンと一致する場合、それらは右側の命令に置き換えられます（または、右側に命令がない場合は削除されます）。</target>
        </trans-unit>
        <trans-unit id="23ab6d0ea4f0599f5b342196442f9968fded07ef" translate="yes" xml:space="preserve">
          <source>A run queue has four queues for processes of different priority and one queue for ports. The scheduler thread associated with the run queue switch evenly between execution of processes and execution of ports while both processes and ports exist in the queue. This is not completely true, but not important for this discussion. A port that is in a run queue also has a queue of tasks to execute. Each task corresponds to an in- or outgoing signal. When the port is selected for execution each task will be executed in sequence. The run queue locks not only protected the queues of ports, but also the queues of port tasks.</source>
          <target state="translated">ランキューは、優先度の異なるプロセス用の4つのキューと、ポート用の1つのキューを持ちます。ランキューに関連付けられたスケジューラースレッドは、プロセスとポートの両方がキューに存在する間、プロセスの実行とポートの実行を均等に切り替えます。これは完全に正しいわけではありませんが、この議論では重要ではありません。ランキューにあるポートは、実行するタスクのキューも持っています。各タスクは、入出庫信号に対応しています。ポートが実行のために選択されると、各タスクは順番に実行されます。ランキューロックは、ポートのキューだけでなく、ポートタスクのキューも保護しました。</target>
        </trans-unit>
        <trans-unit id="dd25b98d67a3d5acbff27d930ee3340ca6349672" translate="yes" xml:space="preserve">
          <source>A run-time error can also be emulated by calling &lt;code&gt;erlang:error(Reason)&lt;/code&gt; or &lt;code&gt;erlang:error(Reason, Args)&lt;/code&gt;.</source>
          <target state="translated">実行時エラーは、 &lt;code&gt;erlang:error(Reason)&lt;/code&gt; または &lt;code&gt;erlang:error(Reason, Args)&lt;/code&gt; 呼び出すことによってもエミュレートできます。</target>
        </trans-unit>
        <trans-unit id="bb56303785fbc88fcc2408a8fd31a4003ffe1f34" translate="yes" xml:space="preserve">
          <source>A run-time error is another name for an exception of class &lt;code&gt;error&lt;/code&gt;.</source>
          <target state="translated">実行時エラーは、クラス &lt;code&gt;error&lt;/code&gt; 例外の別名です。</target>
        </trans-unit>
        <trans-unit id="608acd283e8c59f26f33232a215b266093ace6dd" translate="yes" xml:space="preserve">
          <source>A run-time error is when a crash occurs. An example is when an operator is applied to arguments of the wrong type. The Erlang programming language has built-in features for handling of run-time errors.</source>
          <target state="translated">ランタイムエラーとは、クラッシュが発生した場合のことです。例えば、演算子が間違った型の引数に適用されたときです。Erlangプログラミング言語にはランタイムエラーを処理するための機能が組み込まれています。</target>
        </trans-unit>
        <trans-unit id="fe2de4d023b6ff93a7868d6e63e1e0f0f608db09" translate="yes" xml:space="preserve">
          <source>A runtime error occurred which raised and error exception while applying the function, and the applied function did not catch the exception. The error reason &lt;code&gt;ErrorReason&lt;/code&gt; indicates the type of error that occurred. &lt;code&gt;StackTrace&lt;/code&gt; is formatted as when caught in a &lt;code&gt;try/catch&lt;/code&gt; construct. The &lt;code&gt;StackTrace&lt;/code&gt; is limited to the applied function and functions called by it.</source>
          <target state="translated">関数の適用中に例外が発生するランタイムエラーが発生し、適用された関数は例外をキャッチしませんでした。エラー理由 &lt;code&gt;ErrorReason&lt;/code&gt; は、発生したエラーのタイプを示します。 &lt;code&gt;StackTrace&lt;/code&gt; は、 &lt;code&gt;try/catch&lt;/code&gt; コンストラクトでキャッチされたときと同じようにフォーマットされます。 &lt;code&gt;StackTrace&lt;/code&gt; は、それによって呼び出さ応用機能や機能に限定されています。</target>
        </trans-unit>
        <trans-unit id="1f38ec391b2ae32351853cf5569dd5468c7febd8" translate="yes" xml:space="preserve">
          <source>A runtime system Lock Profiling tool.</source>
          <target state="translated">ランタイムシステムのロックプロファイリングツール。</target>
        </trans-unit>
        <trans-unit id="95c23e7c0085aa6a0c7d2ad3fa2a9bf1781844a4" translate="yes" xml:space="preserve">
          <source>A second use of backslash provides a way of encoding non-printing characters in patterns in a visible manner. There is no restriction on the appearance of non-printing characters, apart from the binary zero that terminates a pattern. When a pattern is prepared by text editing, it is often easier to use one of the following escape sequences than the binary character it represents:</source>
          <target state="translated">バックスラッシュの第二の使用は、パターン内の非印刷文字を目に見える形で符号化する方法を提供します。パターンを終了させるバイナリゼロを除けば、非印刷文字の出現には何の制限もない。テキスト編集によってパターンが用意される場合、それが表すバイナリ文字よりも、次のエスケープシーケンスのいずれかを使用する方が容易であることが多い。</target>
        </trans-unit>
        <trans-unit id="a201830f8803ef3e185325b4733be9adee2043a8" translate="yes" xml:space="preserve">
          <source>A second way to specify the configuration file is to set environment variable &lt;code&gt;ERL_INETRC&lt;/code&gt; to the full name of the file. Example (bash):</source>
          <target state="translated">構成ファイルを指定する2番目の方法は、環境変数 &lt;code&gt;ERL_INETRC&lt;/code&gt; をファイルの完全な名前に設定することです。例（bash）：</target>
        </trans-unit>
        <trans-unit id="7c03bbcb91f237153974d54fa53f5db174271fa2" translate="yes" xml:space="preserve">
          <source>A seed value for the generator.</source>
          <target state="translated">ジェネレーターのシード値。</target>
        </trans-unit>
        <trans-unit id="3ab326930bafdf3ccbffeefe99fd3e37e21b2a36" translate="yes" xml:space="preserve">
          <source>A segment of type &lt;code&gt;utf16&lt;/code&gt; can match 2 or 4 bytes in the binary. The match fails if the binary at the match position does not contain a legal UTF-16 encoding of a Unicode code point. (See RFC-2781 or the Unicode standard.)</source>
          <target state="translated">タイプ &lt;code&gt;utf16&lt;/code&gt; のセグメントは、バイナリの2バイトまたは4バイトと一致できます。一致位置のバイナリにUnicodeコードポイントの有効なUTF-16エンコーディングが含まれていない場合、一致は失敗します。（RFC-2781またはUnicode標準を参照してください。）</target>
        </trans-unit>
        <trans-unit id="39d79b140754fe8ea4a56be0590e56af2f7d1ffd" translate="yes" xml:space="preserve">
          <source>A segment of type &lt;code&gt;utf32&lt;/code&gt; can match 4 bytes in the binary in the same way as an &lt;code&gt;integer&lt;/code&gt; segment matches 32 bits. The match fails if the resulting integer is outside the legal ranges mentioned above.</source>
          <target state="translated">タイプ &lt;code&gt;utf32&lt;/code&gt; のセグメントは、 &lt;code&gt;integer&lt;/code&gt; セグメントが32ビットと一致するのと同じ方法で、バイナリの4バイトと一致できます。結果の整数が上記の正当な範囲外の場合、一致は失敗します。</target>
        </trans-unit>
        <trans-unit id="9984182f8f78656080573a1d2d8804143caf4c98" translate="yes" xml:space="preserve">
          <source>A segment of type &lt;code&gt;utf8&lt;/code&gt; matches 1-4 bytes in the binary, if the binary at the match position contains a valid UTF-8 sequence. (See RFC-3629 or the Unicode standard.)</source>
          <target state="translated">タイプ &lt;code&gt;utf8&lt;/code&gt; のセグメントは、一致位置のバイナリに有効なUTF-8シーケンスが含まれている場合、バイナリの1〜4バイトに一致します。（RFC-3629またはUnicode標準を参照してください。）</target>
        </trans-unit>
        <trans-unit id="a68e30a75c41fb283b1d801f37a87f7e17458fd0" translate="yes" xml:space="preserve">
          <source>A selective receive cannot be used from a &lt;code&gt;gen_statem&lt;/code&gt; behavior as for any &lt;code&gt;gen_*&lt;/code&gt; behavior, as the receive statement is within the &lt;code&gt;gen_*&lt;/code&gt; engine itself. It must be there because all &lt;code&gt;sys&lt;/code&gt; compatible behaviors must respond to system messages and therefore do that in their engine receive loop, passing non-system messages to the callback module.</source>
          <target state="translated">receiveステートメントは &lt;code&gt;gen_*&lt;/code&gt; エンジン自体内にあるため、 &lt;code&gt;gen_*&lt;/code&gt; 動作の場合と同様に、 &lt;code&gt;gen_statem&lt;/code&gt; 動作からの選択的受信は使用できません。 &lt;code&gt;sys&lt;/code&gt; 互換のすべての動作がシステムメッセージに応答する必要があるため、エンジンの受信ループでそれを行い、非システムメッセージをコールバックモジュールに渡すため、そこにある必要があります。</target>
        </trans-unit>
        <trans-unit id="0745a97f08a27b99c095a4208fa9ad69e20c8725" translate="yes" xml:space="preserve">
          <source>A selective receive cannot be used from a &lt;code&gt;gen_statem&lt;/code&gt; behaviour (or from any &lt;code&gt;gen_*&lt;/code&gt; behaviour), as the receive statement is within the &lt;code&gt;gen_*&lt;/code&gt; engine itself. It must be there because all &lt;code&gt;sys&lt;/code&gt; compatible behaviours must respond to system messages and therefore do that in their engine receive loop, passing non-system messages to the &lt;strong&gt;callback module&lt;/strong&gt;.</source>
          <target state="translated">receiveステートメントは &lt;code&gt;gen_*&lt;/code&gt; エンジン自体の内部にあるため、選択的受信は &lt;code&gt;gen_statem&lt;/code&gt; 動作（または &lt;code&gt;gen_*&lt;/code&gt; 動作）からは使用できません。すべての &lt;code&gt;sys&lt;/code&gt; 互換動作はシステムメッセージに応答する必要があるため、そこにある必要があります。したがって、エンジン受信ループでそれを実行し、非システムメッセージを&lt;strong&gt;コールバックモジュール&lt;/strong&gt;に渡し&lt;strong&gt;ます&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="784ef7e594348fdd6dc02214ab3a2844aad416d3" translate="yes" xml:space="preserve">
          <source>A sequence group can have subgroups. Such subgroups can have any property, that is, they are not required to also be sequences. If you want the status of the subgroup to affect the sequence on the level above, return &lt;code&gt;{return_group_result,Status}&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt;, as described in section &lt;code&gt;&lt;a href=&quot;write_test_chapter#repeated_groups&quot;&gt;Repeated Groups&lt;/a&gt;&lt;/code&gt; in Writing Test Suites. A failed subgroup (&lt;code&gt;Status == failed&lt;/code&gt;) causes the execution of a sequence to fail in the same way a test case does.</source>
          <target state="translated">シーケンスグループはサブグループを持つことができます。そのようなサブグループは任意のプロパティを持つことができます。つまり、それらはシーケンスである必要もありません。サブグループのステータスが上のレベルのシーケンスに影響するようにしたい場合は、「テストスイートの記述における &lt;code&gt;&lt;a href=&quot;write_test_chapter#repeated_groups&quot;&gt;Repeated Groups&lt;/a&gt;&lt;/code&gt; セクションで説明されているように、 &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;{return_group_result,Status}&lt;/code&gt; を返します。失敗したサブグループ（ &lt;code&gt;Status == failed&lt;/code&gt; ）は、テストケースと同じようにシーケンスの実行を失敗させます。</target>
        </trans-unit>
        <trans-unit id="93d62b825639ee7da64906b6efb6ddcaeabea4e9" translate="yes" xml:space="preserve">
          <source>A sequence group can have subgroups. Such subgroups can have any property, that is, they are not required to also be sequences. If you want the status of the subgroup to affect the sequence on the level above, return &lt;code&gt;{return_group_result,Status}&lt;/code&gt; from &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt;, as described in section &lt;code&gt;&lt;a href=&quot;write_test_chapter#repeated_groups&quot;&gt;Repeated Groups&lt;/a&gt;&lt;/code&gt; in Writing Test Suites. A failed subgroup (&lt;code&gt;Status == failed&lt;/code&gt;) causes the execution of a sequence to fail in the same way a test case does.</source>
          <target state="translated">シーケンスグループはサブグループを持つことができます。このようなサブグループは、任意のプロパティを持つことができます。つまり、シーケンスである必要はありません。サブグループのステータスが上記のレベルのシーケンスに影響を与えるようにする場合は、「テストスイートの作成の &lt;code&gt;&lt;a href=&quot;write_test_chapter#repeated_groups&quot;&gt;Repeated Groups&lt;/a&gt;&lt;/code&gt; セクションで説明されているように、 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt; から &lt;code&gt;{return_group_result,Status}&lt;/code&gt; を返します。失敗したサブグループ（ &lt;code&gt;Status == failed&lt;/code&gt; ）により、テストケースと同じようにシーケンスの実行が失敗します。</target>
        </trans-unit>
        <trans-unit id="3b0188d5cbf054170629f3b385114881c263276f" translate="yes" xml:space="preserve">
          <source>A sequence of &lt;code&gt;Len&lt;/code&gt; big-endian unsigned integers (4 bytes each, so &lt;code&gt;N'&lt;/code&gt; = 4 * &lt;code&gt;Len&lt;/code&gt;), but is to be regarded as uninterpreted data.</source>
          <target state="translated">&lt;code&gt;Len&lt;/code&gt; ビッグエンディアンの符号なし整数のシーケンス（それぞれ4バイト、つまり &lt;code&gt;N'&lt;/code&gt; = 4 * &lt;code&gt;Len&lt;/code&gt; ）ですが、解釈されていないデータと見なされます。</target>
        </trans-unit>
        <trans-unit id="d3c229a36faac40695a5902fc9fc7dd25d6c2813" translate="yes" xml:space="preserve">
          <source>A sequence of test cases is defined as a test case group with a &lt;code&gt;sequence&lt;/code&gt; property. Test case groups are defined through function &lt;code&gt;groups/0&lt;/code&gt; in the test suite (for details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テストケースのシーケンスは、 &lt;code&gt;sequence&lt;/code&gt; プロパティを持つテストケースグループとして定義されます。テストケースグループは、テストスイートの関数 &lt;code&gt;groups/0&lt;/code&gt; を通じて定義されます（詳細については、「 &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; 」を参照してください）。</target>
        </trans-unit>
        <trans-unit id="c3bba90a5446a96b415be975533162f2c93173c4" translate="yes" xml:space="preserve">
          <source>A server (daemon) is started with &lt;code&gt;&lt;a href=&quot;#daemon-2&quot;&gt;daemon/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#daemon-2&quot;&gt;daemon/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#daemon-2&quot;&gt;daemon/3&lt;/a&gt;&lt;/code&gt;. Possible channel handlers (subsystems) are declared with the &lt;code&gt;&lt;a href=&quot;#type-subsystem_daemon_option&quot;&gt;subsystem&lt;/a&gt;&lt;/code&gt; option when the daemon is started.</source>
          <target state="translated">サーバー（デーモン）は、 &lt;code&gt;&lt;a href=&quot;#daemon-2&quot;&gt;daemon/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#daemon-2&quot;&gt;daemon/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#daemon-2&quot;&gt;daemon/3&lt;/a&gt;&lt;/code&gt; で起動されます。可能なチャネルハンドラー（サブシステム）は、デーモンの起動時に &lt;code&gt;&lt;a href=&quot;#type-subsystem_daemon_option&quot;&gt;subsystem&lt;/a&gt;&lt;/code&gt; オプションで宣言されます。</target>
        </trans-unit>
        <trans-unit id="c393c06211d748a66541912f6034dffb6bc6e68b" translate="yes" xml:space="preserve">
          <source>A server (daemon) will use the user name &lt;code&gt;foo&lt;/code&gt;, and a client will use the name &lt;code&gt;bar&lt;/code&gt;.</source>
          <target state="translated">サーバー（デーモン）はユーザー名 &lt;code&gt;foo&lt;/code&gt; を使用し、クライアントは名前 &lt;code&gt;bar&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="7591fe377fd82c97d5cbe48dffa3dba89975a255" translate="yes" xml:space="preserve">
          <source>A server only does x509-path validation in mode &lt;code&gt;verify_peer&lt;/code&gt;, as it then sends a certificate request to the client (this message is not sent if the verify option is &lt;code&gt;verify_none&lt;/code&gt;). You can then also want to specify option &lt;code&gt;fail_if_no_peer_cert&lt;/code&gt;.</source>
          <target state="translated">サーバーは、モード &lt;code&gt;verify_peer&lt;/code&gt; でx509パス検証のみを実行し、証明書要求をクライアントに送信します（このメッセージは、verifyオプションが &lt;code&gt;verify_none&lt;/code&gt; の場合は送信されません）。次に、オプション &lt;code&gt;fail_if_no_peer_cert&lt;/code&gt; を指定することもできます。</target>
        </trans-unit>
        <trans-unit id="4e1655ac106f00ec7e87a3349502f0ed6e2829f5" translate="yes" xml:space="preserve">
          <source>A server receiving a ClientHello MUST correctly ignore all unrecognized cipher suites, extensions, and other parameters. Otherwise, it may fail to interoperate with newer clients. In TLS 1.3, a client receiving a CertificateRequest or NewSessionTicket MUST also ignore all unrecognized extensions.</source>
          <target state="translated">ClientHello を受信したサーバは、認識されていない暗号スイート、拡張、その他のパラメー タをすべて正しく無視しなければなりません[MUST]。そうしないと、新しいクライアントとの相互運用に失敗する可能性があります。TLS 1.3では、CertificateRequestまたはNewSessionTicketを受け取るクライアントは、未認識の拡張をすべて無視しなければならない[MUST]。</target>
        </trans-unit>
        <trans-unit id="d55cabe8354d1d604d4df37a3e5535ff9d3abddc" translate="yes" xml:space="preserve">
          <source>A server which receives just enough requests to never become idle will score a CPU utilization of 100%. If the server receives 50% more requests, it will still score 100%. When the system load is calculated with the percentage formula shown previously, the load will increase from 80% to 87%.</source>
          <target state="translated">アイドル状態になることのないように十分なリクエストを受信したサーバは、CPU使用率が100%のスコアになります。50%以上のリクエストを受けた場合でも、100%のスコアになります。先ほどのパーセンテージの計算式でシステム負荷を計算すると、80%から87%になります。</target>
        </trans-unit>
        <trans-unit id="49249370ad03c7d756d03cbc940860544a07d772" translate="yes" xml:space="preserve">
          <source>A server- or client-channel process can choose to close their session by sending a close event.</source>
          <target state="translated">サーバまたはクライアントチャネルのプロセスは、closeイベントを送信することでセッションを閉じることを選択できます。</target>
        </trans-unit>
        <trans-unit id="80df1578413d7127e8d72a01fdf816a3b3d60cac" translate="yes" xml:space="preserve">
          <source>A server-side subssystem (channel) server is requested by the client with &lt;code&gt;&lt;a href=&quot;ssh_connection#subsystem-4&quot;&gt;ssh_connection:subsystem/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サーバー側の &lt;code&gt;&lt;a href=&quot;ssh_connection#subsystem-4&quot;&gt;ssh_connection:subsystem/4&lt;/a&gt;&lt;/code&gt; （チャネル）サーバーは、クライアントからssh_connection：subsystem / 4で要求されます。</target>
        </trans-unit>
        <trans-unit id="6d3204ae6a9c144bcf2930bab159f079cdea0012" translate="yes" xml:space="preserve">
          <source>A service defines a locally-implemented Diameter node, specifying the capabilities to be advertised during capabilities exchange. Transports are added to a service using &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サービスは、ローカルに実装されたDiameterノードを定義し、機能交換時にアドバタイズされる機能を指定します。トランスポートは、 &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; を使用してサービスに追加されます。</target>
        </trans-unit>
        <trans-unit id="b4b0724093ca8cf67b42fd8065ef62234f98ab2d" translate="yes" xml:space="preserve">
          <source>A service must configure one tuple for each Diameter application it intends to support. For an outgoing request, the relevant &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#application_alias&quot;&gt;application_alias()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; is passed to &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt;, while for an incoming request the application identifier in the message header determines the application, the identifier being specified in the application's &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;dictionary&lt;/a&gt;&lt;/code&gt; file.</source>
          <target state="translated">サービスは、サポートする予定のDiameterアプリケーションごとに1つのタプルを構成する必要があります。発信リクエストの場合、関連する &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#application_alias&quot;&gt;application_alias()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; に渡されますが、着信リクエストの場合、メッセージヘッダーのアプリケーション識別子がアプリケーションを決定します。この識別子は、アプリケーションの &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;dictionary&lt;/a&gt;&lt;/code&gt; ファイルで指定されます。</target>
        </trans-unit>
        <trans-unit id="aaffe8ed9bffeb5034f89141848d697c4f8ddf46" translate="yes" xml:space="preserve">
          <source>A service started as &lt;code&gt;stand_alone&lt;/code&gt;, that is, the service is not started as part of the &lt;code&gt;Inets&lt;/code&gt; application, lose all OTP application benefits, such as soft upgrade. The &lt;code&gt;stand_alone&lt;/code&gt;-service is linked to the process that started it. Usually some supervision functionality is still in place and in some sense the calling process becomes the top supervisor.</source>
          <target state="translated">&lt;code&gt;stand_alone&lt;/code&gt; として開始されたサービス、つまりサービスが &lt;code&gt;Inets&lt;/code&gt; アプリケーションの一部として開始されていない場合、ソフトアップグレードなどのOTPアプリケーションの利点がすべて失われます。 &lt;code&gt;stand_alone&lt;/code&gt; の -serviceは、それを開始したプロセスにリンクされています。通常、一部の監視機能はまだ有効であり、ある意味で、呼び出しプロセスが最上位の監視者になります。</target>
        </trans-unit>
        <trans-unit id="e8a6a012891bda48b015b0c9afa1553acf746ed9" translate="yes" xml:space="preserve">
          <source>A service that does not use shared peers will always pass the empty list as the second argument of &lt;code&gt;pick_peer/4&lt;/code&gt; callbacks.</source>
          <target state="translated">共有ピアを使用しないサービスは、 &lt;code&gt;pick_peer/4&lt;/code&gt; コールバックの2番目の引数として常に空のリストを渡します。</target>
        </trans-unit>
        <trans-unit id="10b22bcc7e1248f51cdd1cbb03116a8abb78e603" translate="yes" xml:space="preserve">
          <source>A service to read internally formatted wrap disk logs.</source>
          <target state="translated">内部でフォーマットされたラップディスクのログを読み込むサービス。</target>
        </trans-unit>
        <trans-unit id="948069c04efacc3c5dcde4803a65b30408e7f31d" translate="yes" xml:space="preserve">
          <source>A session opened in this way is closed using function &lt;code&gt;&lt;a href=&quot;#close&quot;&gt;close&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この方法で開かれたセッションは、関数 &lt;code&gt;&lt;a href=&quot;#close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; を使用して閉じられます。</target>
        </trans-unit>
        <trans-unit id="f8dce1ed875eff8e76251a001abc25f652960e66" translate="yes" xml:space="preserve">
          <source>A set of calls between strongly connected components is a sorted list without duplicates of &lt;code&gt;ComponentCall&lt;/code&gt;.</source>
          <target state="translated">強く接続されたコンポーネント間の一連の呼び出しは、 &lt;code&gt;ComponentCall&lt;/code&gt; の重複のないソートされたリストです。</target>
        </trans-unit>
        <trans-unit id="710107e57e111e349884878304dfebbb60768c1a" translate="yes" xml:space="preserve">
          <source>A set of calls is represented by a sorted list without duplicates of &lt;code&gt;call()&lt;/code&gt;.</source>
          <target state="translated">呼び出しのセットは、 &lt;code&gt;call()&lt;/code&gt; の重複のないソートされたリストで表されます。</target>
        </trans-unit>
        <trans-unit id="a5ec339bfafa729e7589bcb584094f5693b62949" translate="yes" xml:space="preserve">
          <source>A set of constants is represented by a sorted list without duplicates of &lt;code&gt;constant()&lt;/code&gt;.</source>
          <target state="translated">一連の定数は、 &lt;code&gt;constant()&lt;/code&gt; の重複のないソートされたリストで表されます。</target>
        </trans-unit>
        <trans-unit id="b8184ec1b26baabe0df7138952aceaf16df4b13b" translate="yes" xml:space="preserve">
          <source>A set of functions is provided for sending and receiving contiguous parts of a file to be stored in a remote file. For send, see &lt;code&gt;send_chunk_start/2&lt;/code&gt;, &lt;code&gt;send_chunk/2&lt;/code&gt;, and &lt;code&gt;send_chunk_end/1&lt;/code&gt;. For receive, see &lt;code&gt;recv_chunk_start/2&lt;/code&gt; and &lt;code&gt;recv_chunk/&lt;/code&gt;).</source>
          <target state="translated">リモートファイルに保存されるファイルの連続部分を送受信するための一連の関数が提供されています。sendについては、 &lt;code&gt;send_chunk_start/2&lt;/code&gt; 、 &lt;code&gt;send_chunk/2&lt;/code&gt; 、および &lt;code&gt;send_chunk_end/1&lt;/code&gt; を参照してください。受信については、 &lt;code&gt;recv_chunk_start/2&lt;/code&gt; および &lt;code&gt;recv_chunk/&lt;/code&gt; 参照してください）。</target>
        </trans-unit>
        <trans-unit id="46692ec19a49b0489e3ac224ff31df52bd24aef0" translate="yes" xml:space="preserve">
          <source>A set of functions is provvided for sending and receiving contiguous parts of a file to be stored in a remote file. For send, see &lt;code&gt;send_chunk_start/2&lt;/code&gt;, &lt;code&gt;send_chunk/2&lt;/code&gt;, and &lt;code&gt;send_chunk_end/1&lt;/code&gt;. For receive, see &lt;code&gt;recv_chunk_start/2&lt;/code&gt; and &lt;code&gt;recv_chunk/&lt;/code&gt;).</source>
          <target state="translated">リモートファイルに格納されるファイルの連続した部分を送受信するための一連の関数が用意されています。送信については、 &lt;code&gt;send_chunk_start/2&lt;/code&gt; 、 &lt;code&gt;send_chunk/2&lt;/code&gt; 、および &lt;code&gt;send_chunk_end/1&lt;/code&gt; を参照してください。受信については、 &lt;code&gt;recv_chunk_start/2&lt;/code&gt; および &lt;code&gt;recv_chunk/&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="9a9d7c3dd3508b04f4667584c78e7f619f9eb1de" translate="yes" xml:space="preserve">
          <source>A set of line numbered function calls is represented by a sorted list without duplicates of &lt;code&gt;CallAt&lt;/code&gt;.</source>
          <target state="translated">行番号の付いた関数呼び出しのセットは、 &lt;code&gt;CallAt&lt;/code&gt; の重複のないソートされたリストで表されます。</target>
        </trans-unit>
        <trans-unit id="6b7c151fe3e99d8bd5f4ffa52f47c3f04812cf74" translate="yes" xml:space="preserve">
          <source>A set of line numbered functions and function calls is represented by a sorted list without duplicates of &lt;code&gt;AllLines&lt;/code&gt;.</source>
          <target state="translated">行番号が付けられた関数と関数呼び出しのセットは、 &lt;code&gt;AllLines&lt;/code&gt; の重複のないソートされたリストで表されます。</target>
        </trans-unit>
        <trans-unit id="840dbd2f93a5198291444ddc8bbccef2c8f9c9ff" translate="yes" xml:space="preserve">
          <source>A set of line numbered functions is represented by a sorted list without duplicates of &lt;code&gt;DefineAt&lt;/code&gt;.</source>
          <target state="translated">行番号の付いた関数のセットは、 &lt;code&gt;DefineAt&lt;/code&gt; の重複のないソートされたリストで表されます。</target>
        </trans-unit>
        <trans-unit id="3a5c61082d9404d5c0adf57236aa5f42fbc02337" translate="yes" xml:space="preserve">
          <source>A set of strongly connected components is a sorted list without duplicates of &lt;code&gt;Component&lt;/code&gt;.</source>
          <target state="translated">強く接続されたコンポーネントのセットは、 &lt;code&gt;Component&lt;/code&gt; の重複のないソートされたリストです。</target>
        </trans-unit>
        <trans-unit id="ac0087ee308abd483706f991654adce8870956a6" translate="yes" xml:space="preserve">
          <source>A set of tables is created. The function &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table(Name, ArgList)&lt;/a&gt;&lt;/code&gt; creates the required database tables. The options available with &lt;code&gt;ArgList&lt;/code&gt; are explained in &lt;code&gt;&lt;a href=&quot;mnesia_chap3#create_tables&quot;&gt;Create New Tables&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルのセットが作成されます。関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table(Name, ArgList)&lt;/a&gt;&lt;/code&gt; は、必要なデータベーステーブルを作成します。 &lt;code&gt;ArgList&lt;/code&gt; で使用できるオプションについては、 &lt;code&gt;&lt;a href=&quot;mnesia_chap3#create_tables&quot;&gt;Create New Tables&lt;/a&gt;&lt;/code&gt; 説明しています。</target>
        </trans-unit>
        <trans-unit id="19f06211d11839665e84e1ea20d520a0f11afac6" translate="yes" xml:space="preserve">
          <source>A set of test cases sharing configuration functions and execution properties. The execution properties specify if the test cases in the group are to be executed in random order, in parallel, or in sequence, and if the execution of the group is be repeated. Test case groups can also be nested. That is, a group can, besides test cases, contain subgroups.</source>
          <target state="translated">設定関数と実行プロパティを共有するテストケースのセット。実行プロパティは、グループ内のテストケースをランダムな順序で実行するのか、並列で実行するのか、順番に実行するのか、グループの実行を繰り返すのかを指定します。テストケースグループは入れ子にすることもできます。つまり、グループはテストケースの他にサブグループを含むことができます。</target>
        </trans-unit>
        <trans-unit id="12949a595f1f2f62a415607d8b62df7565321239" translate="yes" xml:space="preserve">
          <source>A short form for both &lt;code&gt;report_errors&lt;/code&gt; and &lt;code&gt;report_warnings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;report_errors&lt;/code&gt; と &lt;code&gt;report_warnings&lt;/code&gt; の両方の短い形式。</target>
        </trans-unit>
        <trans-unit id="63beb5981caaa740ca850381d113e7457110327c" translate="yes" xml:space="preserve">
          <source>A short form for both &lt;code&gt;return_errors&lt;/code&gt; and &lt;code&gt;return_warnings&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;return_errors&lt;/code&gt; と &lt;code&gt;return_warnings&lt;/code&gt; の両方の短い形式。</target>
        </trans-unit>
        <trans-unit id="7ea5611de1365c235cc088e3d33261341dcca035" translate="yes" xml:space="preserve">
          <source>A signal can be delivered to the remote process/service using the following message. Some systems do not support signals, in which case they are to ignore this message. There is currently no function to generate this event as the signals referred to are on OS-level and not something generated by an Erlang program.</source>
          <target state="translated">シグナルは、以下のメッセージを使用してリモートプロセス/サービスに配信することができます。いくつかのシステムはシグナルをサポートしていないので、その場合はこのメッセージを無視してください。シグナルはOSレベルのものであり、Erlangプログラムで生成されたものではないので、現在のところこのイベントを生成する機能はありません。</target>
        </trans-unit>
        <trans-unit id="42eda09ed588353be26cc09cfa2d978f18b6e4d1" translate="yes" xml:space="preserve">
          <source>A signed 64-bit integer type for representation of time.</source>
          <target state="translated">時間を表現するための符号付き64ビット整数型。</target>
        </trans-unit>
        <trans-unit id="2ec4fc4bbc8342af35d07fe169518f0743782cba" translate="yes" xml:space="preserve">
          <source>A signed 64-bit integer type for time representation.</source>
          <target state="translated">時間表現のための符号付き64ビット整数型。</target>
        </trans-unit>
        <trans-unit id="38a842896cfe88c4a3ddef8d3cf91788c49c732c" translate="yes" xml:space="preserve">
          <source>A signed integer type, the size of &lt;code&gt;ErlDrvSizeT&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ErlDrvSizeT&lt;/code&gt; のサイズである符号付き整数型。</target>
        </trans-unit>
        <trans-unit id="1024fdaa70807f16fbbe54892e86672633b5e291" translate="yes" xml:space="preserve">
          <source>A significant number of middleboxes misbehave when a TLS 1.3 connection is negotiated. Implementations can increase the chance of making connections through those middleboxes by making the TLS 1.3 handshake more like a TLS 1.2 handshake.</source>
          <target state="translated">TLS 1.3 接続がネゴシエートされると、かなりの数のミドルボックスが誤動作を起こします。実装では、TLS 1.3 のハンドシェイクを TLS 1.2 のハンドシェイクのようにすることで、これらのミドルボックスを介して接続を行う機会を増やすことができます。</target>
        </trans-unit>
        <trans-unit id="0a0fe9a2b6f1d0a57855755f4b057af6a3783f46" translate="yes" xml:space="preserve">
          <source>A similar syntax as for module attributes is used for specifying types and function specifications:</source>
          <target state="translated">型や関数の指定には、モジュール属性と同様の構文が使用されます。</target>
        </trans-unit>
        <trans-unit id="8a8c55df8388e2c8abf4b42d441b92ec7fc5ed46" translate="yes" xml:space="preserve">
          <source>A simple Call Count Profiling Tool using breakpoints for minimal runtime performance impact.</source>
          <target state="translated">ブレークポイントを使用したシンプルなコールカウントプロファイリングツールで、実行時のパフォーマンスへの影響を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="c5cb837e5d2ca7e262291078f0d5802db7966be5" translate="yes" xml:space="preserve">
          <source>A simple Erlang SCTP client that uses the &lt;code&gt;connect_init&lt;/code&gt; API:</source>
          <target state="translated">&lt;code&gt;connect_init&lt;/code&gt; API を使用する単純なErlang SCTPクライアント：</target>
        </trans-unit>
        <trans-unit id="d0c9a192d81f4fa039cbd886ce4bd4a73ce2b099" translate="yes" xml:space="preserve">
          <source>A simple configuration handling driver, asking an external server for configuration data, can be implemented as follows:</source>
          <target state="translated">外部サーバに設定データを問い合わせるシンプルな設定処理ドライバは、以下のように実装することができます。</target>
        </trans-unit>
        <trans-unit id="94159518c423ba9ecd622c20fd73db453e69d787" translate="yes" xml:space="preserve">
          <source>A simple distributed agent can be managed without sub-agents. The instrumentation functions can use distributed Erlang to communicate with other parts of the application. However, a sub-agent can be used on each node if this generates too much unnecessary traffic. A sub-agent processes requests per incoming SNMP request, not per variable. Therefore the network traffic is minimized.</source>
          <target state="translated">シンプルな分散エージェントであれば、サブエージェントを使わずに管理することができます。計装機能は分散Erlangを使ってアプリケーションの他の部分と通信することができます。しかし、不必要なトラフィックが多く発生する場合は、各ノードでサブエージェントを使用することができます。サブエージェントは、変数ごとではなく、着信SNMPリクエストごとにリクエストを処理します。そのため、ネットワークトラフィックは最小限に抑えられます。</target>
        </trans-unit>
        <trans-unit id="37a291b9ccd26ae2e858205df24cc14753b44a96" translate="yes" xml:space="preserve">
          <source>A simple example of how to use the manager component of the SNMP Development Toolkit.</source>
          <target state="translated">SNMP開発ツールキットのマネージャコンポーネントの使用方法の簡単な例です。</target>
        </trans-unit>
        <trans-unit id="e0d43223e0be204bdc5f431e2cd09f2620cd3cba" translate="yes" xml:space="preserve">
          <source>A simple example of how to write agent test cases, using the new manager.</source>
          <target state="translated">新マネージャを使ったエージェントテストケースの書き方の簡単な例です。</target>
        </trans-unit>
        <trans-unit id="a47de2d4ec5f53818458005215063c067e9f2a3e" translate="yes" xml:space="preserve">
          <source>A simple example. A single quad core processor can be described as follows:</source>
          <target state="translated">簡単な例です。単一のクアッドコアプロセッサは、以下のように記述することができる。</target>
        </trans-unit>
        <trans-unit id="dd61143e005b303fe8d62ae782f18058638458a2" translate="yes" xml:space="preserve">
          <source>A simple handler that prints to the terminal can be implemented as follows:</source>
          <target state="translated">端末に印刷するシンプルなハンドラは、以下のように実装することができます。</target>
        </trans-unit>
        <trans-unit id="d231f36ed1b4dce67cc3b50e0ae15aa4df7e9395" translate="yes" xml:space="preserve">
          <source>A simple interactive configuration tool. Simple configuration files can be generated, but more complex configurations still have to be edited manually.</source>
          <target state="translated">シンプルでインタラクティブな設定ツールです。シンプルな設定ファイルを生成することができますが、より複雑な設定は手動で編集する必要があります。</target>
        </trans-unit>
        <trans-unit id="9bb0a791b7816e17ce1b48c1aee66bf6abe2e694" translate="yes" xml:space="preserve">
          <source>A simple solution would be to use the &lt;code&gt;name&lt;/code&gt; field as the key instead of the &lt;code&gt;idno&lt;/code&gt; field, but that would cause problems if the names were not unique. A more general solution would be to create a second table with &lt;code&gt;name&lt;/code&gt; as key and &lt;code&gt;idno&lt;/code&gt; as data, that is, to index (invert) the table regarding the &lt;code&gt;name&lt;/code&gt; field. Clearly, the second table would have to be kept consistent with the master table. Mnesia can do this for you, but a home brew index table can be very efficient compared to the overhead involved in using Mnesia.</source>
          <target state="translated">簡単な解決策は、 &lt;code&gt;idno&lt;/code&gt; フィールドの代わりに &lt;code&gt;name&lt;/code&gt; フィールドをキーとして使用することですが、名前が一意でない場合は問題が発生します。より一般的な解決策は、キーとして &lt;code&gt;name&lt;/code&gt; 、データとして &lt;code&gt;idno&lt;/code&gt; を持つ2番目のテーブルを作成することです。つまり、 &lt;code&gt;name&lt;/code&gt; フィールドに関してテーブルにインデックス（反転）を付けることです。明らかに、2番目のテーブルはマスターテーブルと一貫性を保つ必要があります。Mnesiaがこれを行うことができますが、自家製のインデックステーブルは、Mnesiaの使用に伴うオーバーヘッドに比べて非常に効率的です。</target>
        </trans-unit>
        <trans-unit id="a677c35bea852cdbf8756b158d2b8bcbf8d2e71c" translate="yes" xml:space="preserve">
          <source>A simple way to do this is to issue the following commands:</source>
          <target state="translated">簡単な方法は、以下のコマンドを発行することです。</target>
        </trans-unit>
        <trans-unit id="464b91e40e2a3cb96819c357b1617d8db059e71c" translate="yes" xml:space="preserve">
          <source>A simple way to do this is to issue these commands:</source>
          <target state="translated">簡単な方法は、これらのコマンドを発行することです。</target>
        </trans-unit>
        <trans-unit id="eea77823d49a9512680d9b481e0a65ed1b7a8abb" translate="yes" xml:space="preserve">
          <source>A single &lt;code&gt;~&lt;/code&gt; is expected in the input.</source>
          <target state="translated">入力では &lt;code&gt;~&lt;/code&gt; が1つ必要です。</target>
        </trans-unit>
        <trans-unit id="8d3145e708c1deab465a16f4608e04895d3f01b3" translate="yes" xml:space="preserve">
          <source>A single atom represents a module name, and is equivalent to &lt;code&gt;{module, ModuleName}&lt;/code&gt;. This is often used as in the call &lt;code&gt;eunit:test(some_module)&lt;/code&gt;.</source>
          <target state="translated">単一のアトムはモジュール名を表し、 &lt;code&gt;{module, ModuleName}&lt;/code&gt; と同等です。これはしばしば &lt;code&gt;eunit:test(some_module)&lt;/code&gt; の呼び出しのように使用されます。</target>
        </trans-unit>
        <trans-unit id="437abe5f66fc807f023b84e5b53bea27300039ac" translate="yes" xml:space="preserve">
          <source>A single binary can be sent with &lt;code&gt;driver_output_binary()&lt;/code&gt;.</source>
          <target state="translated">単一のバイナリは、 &lt;code&gt;driver_output_binary()&lt;/code&gt; で送信できます。</target>
        </trans-unit>
        <trans-unit id="d82ab9afcf3b874d81d1b01e2b29a3023c6ead3c" translate="yes" xml:space="preserve">
          <source>A single line (as in former example) is requested with the following &lt;code&gt;Request&lt;/code&gt;:</source>
          <target state="translated">（前の例のように）1行が次の &lt;code&gt;Request&lt;/code&gt; ます：</target>
        </trans-unit>
        <trans-unit id="91eb11dd51a7d947aa277af7b00518dd07ecd8dd" translate="yes" xml:space="preserve">
          <source>A single string represents the path of a file or directory, and is equivalent to &lt;code&gt;{file, Path}&lt;/code&gt;, or &lt;code&gt;{dir, Path}&lt;/code&gt;, respectively, depending on what &lt;code&gt;Path&lt;/code&gt; refers to in the file system.</source>
          <target state="translated">単一の文字列は、ファイルまたはディレクトリのパスを表し、ファイルシステムでの &lt;code&gt;Path&lt;/code&gt; の参照に応じて、それぞれ &lt;code&gt;{file, Path}&lt;/code&gt; または &lt;code&gt;{dir, Path}&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f128070bab19006a2ef91c51aaca808921167bc6" translate="yes" xml:space="preserve">
          <source>A single test included in a test suite. A test case is implemented as a function in a test suite module.</source>
          <target state="translated">テストスイートに含まれる単一のテスト。テストケースは、テストスイートモジュールの関数として実装されています。</target>
        </trans-unit>
        <trans-unit id="c6134a35a4b3aed44a3d6f996738074a3183b087" translate="yes" xml:space="preserve">
          <source>A single, well-defined test, that somehow can be uniquely identified. When executed, the test case either &lt;strong&gt;passes&lt;/strong&gt; or &lt;strong&gt;fails&lt;/strong&gt;; the test report should identify exactly which test cases failed.</source>
          <target state="translated">明確に定義された単一のテストで、何らかの方法で一意に識別できます。テストケースが実行されると、&lt;strong&gt;成功&lt;/strong&gt;または&lt;strong&gt;失敗します&lt;/strong&gt;。テストレポートでは、失敗したテストケースを正確に特定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ff7e932fb59b9670681676d154f390a5b9707270" translate="yes" xml:space="preserve">
          <source>A situation where it might be useful to add an algorithm is when one need to use a supported but disabled one. An example is the &lt;code&gt;'diffie-hellman-group1-sha1'&lt;/code&gt; which nowadays is very unsecure and therefore disabled. It is however still supported and might be used.</source>
          <target state="translated">アルゴリズムを追加すると便利な場合があるのは、サポートされているが無効になっているアルゴリズムを使用する必要がある場合です。例としては、 &lt;code&gt;'diffie-hellman-group1-sha1'&lt;/code&gt; あり、現在は非常に安全ではないため、無効になっています。ただし、まだサポートされており、使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c8a737055966988fa33536560d8ee3886f563bb5" translate="yes" xml:space="preserve">
          <source>A skeleton is a piece of pre-written code that can be inserted into the buffer. Erlang mode comes with a set of predefined skeletons. The skeletons can be accessed either from the Erlang menu of from commands named &lt;code&gt;tempo-template-erlang-*&lt;/code&gt;, as the skeletons is defined using the standard Emacs package &quot;tempo&quot;. Here follows a brief description of the available skeletons:</source>
          <target state="translated">スケルトンは、バッファに挿入できる事前に記述されたコードです。Erlangモードには、事前定義されたスケルトンのセットが付属しています。スケルトンは標準のEmacsパッケージ「tempo」を使用して定義されているため、スケルトンには、Erlangメニューから、または &lt;code&gt;tempo-template-erlang-*&lt;/code&gt; という名前のコマンドからアクセスできます。次に、使用可能なスケルトンの簡単な説明を示します。</target>
        </trans-unit>
        <trans-unit id="3fbeb5f6d202d2f6a94d6926e8772e60f8395d0b" translate="yes" xml:space="preserve">
          <source>A sketch of the procedure employed:</source>
          <target state="translated">採用された手順のスケッチ。</target>
        </trans-unit>
        <trans-unit id="347ad9db1092bfae38de28e8384c541f8eda0f16" translate="yes" xml:space="preserve">
          <source>A slogan indicating the reason for the dump</source>
          <target state="translated">ゴミ捨ての理由を示すスローガン</target>
        </trans-unit>
        <trans-unit id="c82db0ac725e371be4e92cf842d525309be1a960" translate="yes" xml:space="preserve">
          <source>A small &lt;code&gt;ssh&lt;/code&gt; subsystem that echoes N bytes can be implemented as shown in the following example:</source>
          <target state="translated">次の例に示すように、Nバイトをエコーする小さな &lt;code&gt;ssh&lt;/code&gt; サブシステムを実装できます。</target>
        </trans-unit>
        <trans-unit id="ee793e88b05c2c54637d37d2dc3b6df251a95612" translate="yes" xml:space="preserve">
          <source>A small note about each failed test case.</source>
          <target state="translated">各失敗したテストケースについての小さなメモ。</target>
        </trans-unit>
        <trans-unit id="89269626521455c0533dcc1024e681dcdd2fe91d" translate="yes" xml:space="preserve">
          <source>A small number of &quot;-&quot; flags exist, which now actually are emulator flags, see the description below.</source>
          <target state="translated">少数の &quot;-&quot; フラグが存在しますが、これは実際にはエミュレータフラグです。</target>
        </trans-unit>
        <trans-unit id="b8571dea892b8010a396168429a316241eeb9263" translate="yes" xml:space="preserve">
          <source>A soft limit on the number of characters returned. When the number of characters is reached, remaining structures are replaced by &quot;&lt;code&gt;...&lt;/code&gt;&quot;. &lt;code&gt;CharsLimit&lt;/code&gt; defaults to -1, which means no limit on the number of characters returned.</source>
          <target state="translated">返される文字数の弱い制限。文字数に達すると、残りの構造は「 &lt;code&gt;...&lt;/code&gt; 」に置き換えられます。 &lt;code&gt;CharsLimit&lt;/code&gt; のデフォルトは-1です。これは、返される文字数に制限がないことを意味します。</target>
        </trans-unit>
        <trans-unit id="c5403e8588747737164215b85effd60defff4f50" translate="yes" xml:space="preserve">
          <source>A sorted list of &lt;code&gt;{Node, Count}&lt;/code&gt; tuples that are sorted in increasing &lt;code&gt;Count&lt;/code&gt; order. &lt;code&gt;Count&lt;/code&gt; is the total number of replicas that this fragmented table hosts on each &lt;code&gt;Node&lt;/code&gt;. The list always contains at least all nodes in &lt;code&gt;node_pool&lt;/code&gt;. Nodes that do not belong to &lt;code&gt;node_pool&lt;/code&gt; are put last in the list even if their &lt;code&gt;Count&lt;/code&gt; is lower.</source>
          <target state="translated">&lt;code&gt;Count&lt;/code&gt; 増加順にソートされた &lt;code&gt;{Node, Count}&lt;/code&gt; タプルのソートされたリスト。 &lt;code&gt;Count&lt;/code&gt; は、このフラグメントテーブルが各 &lt;code&gt;Node&lt;/code&gt; ホストするレプリカの総数です。リストには常に、少なくとも &lt;code&gt;node_pool&lt;/code&gt; 内のすべてのノードが含まれています。 &lt;code&gt;node_pool&lt;/code&gt; に属していないノードは、それらの &lt;code&gt;Count&lt;/code&gt; が小さくても、リストの最後に配置されます。</target>
        </trans-unit>
        <trans-unit id="920a6a7e45bffb0b7a8b87d5da85daae27b47541" translate="yes" xml:space="preserve">
          <source>A space-separated string specifying the program to be executed. The second field is typically a command name such as &lt;code&gt;erl&lt;/code&gt;.</source>
          <target state="translated">実行するプログラムを指定するスペース区切りの文字列。2番目のフィールドは通常、 &lt;code&gt;erl&lt;/code&gt; などのコマンド名です。</target>
        </trans-unit>
        <trans-unit id="1636d9fe46ac8e8fc16a7c4f98f7781df515d1ba" translate="yes" xml:space="preserve">
          <source>A spawn reply message will be sent to the caller regardless of whether the operation succeeds or not. If the call to &lt;code&gt;spawn_request()&lt;/code&gt; returns without raising an exception and the &lt;code&gt;reply&lt;/code&gt; option is set to &lt;code&gt;yes&lt;/code&gt;, the caller is guaranteed to be delivered either a &lt;code&gt;&lt;a href=&quot;#spawn_request_success_message&quot;&gt;&lt;i&gt;success message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; or an &lt;code&gt;&lt;a href=&quot;#spawn_request_error_message&quot;&gt;&lt;i&gt;error message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;reply&lt;/code&gt; option is by default set to &lt;code&gt;yes&lt;/code&gt;.</source>
          <target state="translated">操作が成功したかどうかに関係なく、スポーン応答メッセージが呼び出し元に送信されます。 &lt;code&gt;spawn_request()&lt;/code&gt; の呼び出しが例外を発生させずに戻り、 &lt;code&gt;reply&lt;/code&gt; オプションが &lt;code&gt;yes&lt;/code&gt; に設定されている場合、呼び出し元には &lt;code&gt;&lt;a href=&quot;#spawn_request_success_message&quot;&gt;&lt;i&gt;success message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#spawn_request_error_message&quot;&gt;&lt;i&gt;error message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; いずれかが配信されることが保証され&lt;i&gt;ます&lt;/i&gt;。 &lt;code&gt;reply&lt;/code&gt; オプションがデフォルトに設定さである &lt;code&gt;yes&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5d70a605fe0829e66ec6bd35120d29d1093a9d34" translate="yes" xml:space="preserve">
          <source>A spawn request can be abandoned by calling &lt;code&gt;&lt;a href=&quot;#spawn_request_abandon-1&quot;&gt;spawn_request_abandon/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#spawn_request_abandon-1&quot;&gt;spawn_request_abandon/1&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、スポーン要求を破棄できます。</target>
        </trans-unit>
        <trans-unit id="8db8ca18baf39ee044af1edfffece3234114b4cf" translate="yes" xml:space="preserve">
          <source>A spawn request can only be successfully abandoned until the spawn request has completed. When a spawn request has been successfully abandoned, the caller will not be effected by future direct effects of the spawn request itself. For example, it will not receive a spawn reply message. The request is however not withdrawn, so a new process may or may not be created due to the request. If a new process is created after the spawn request was abandoned, no monitors nor links will be set up to the caller of &lt;code&gt;spawn_request_abandon/1&lt;/code&gt; due to the spawn request. If the spawn request included the &lt;code&gt;link&lt;/code&gt; option, the process created due to this request will be sent an exit signal from its parent with the exit reason &lt;code&gt;abandoned&lt;/code&gt; when it is detected that the spawn operation has succeeded.</source>
          <target state="translated">スポーンリクエストは、スポーンリクエストが完了するまで正常に破棄できません。スポーン要求が正常に破棄された場合、呼び出し元は、スポーン要求自体の将来の直接的な影響の影響を受けません。たとえば、スポーン応答メッセージは受信されません。ただし、リクエストは取り下げられないため、リクエストによって新しいプロセスが作成される場合と作成されない場合があります。スポーン要求が破棄された後に新しいプロセスが作成された場合、スポーン要求のために、 &lt;code&gt;spawn_request_abandon/1&lt;/code&gt; の呼び出し元へのモニターもリンクも設定されません。スポーンリクエストに &lt;code&gt;link&lt;/code&gt; オプションが含まれている場合、このリクエストによって作成されたプロセスには、終了理由が &lt;code&gt;abandoned&lt;/code&gt; 状態で、親から終了シグナルが送信されます。 スポーン操作が成功したことが検出されたとき。</target>
        </trans-unit>
        <trans-unit id="5bbb00e915060a377363fa9765e2fd6a815cb4ee" translate="yes" xml:space="preserve">
          <source>A special item that consists of (? followed by a number &amp;gt; 0 and a closing parenthesis is a recursive subroutine call of the subpattern of the given number, if it occurs inside that subpattern. (If not, it is a non-recursive subroutine call, which is described in the next section.) The special item (?R) or (?0) is a recursive call of the entire regular expression.</source>
          <target state="translated">（？の後に番号&amp;gt; 0と閉じ括弧が続く特別な項目は、指定された番号のサブパターンがそのサブパターン内で発生した場合、そのサブパターンの再帰的なサブルーチンコールです。そうでない場合、それは非再帰的なサブルーチンコールです。 。次のセクションで説明します。）特別項目（？R）または（？0）は、正規表現全体の再帰呼び出しです。</target>
        </trans-unit>
        <trans-unit id="61cc845c2afb7bd85647ca3d1e06f065258da29c" translate="yes" xml:space="preserve">
          <source>A special routine invoked with &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt;. It works a little like an &quot;ioctl&quot; for Erlang drivers. The data specified to &lt;code&gt;port_control/3&lt;/code&gt; arrives in &lt;code&gt;buf&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt;. The driver can send data back, using &lt;code&gt;*rbuf&lt;/code&gt; and &lt;code&gt;rlen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt; で呼び出される特別なルーチン。Erlangドライバーの「ioctl」のように機能します。 &lt;code&gt;port_control/3&lt;/code&gt; に指定されたデータは、 &lt;code&gt;buf&lt;/code&gt; と &lt;code&gt;len&lt;/code&gt; に到着します。ドライバーは、 &lt;code&gt;*rbuf&lt;/code&gt; および &lt;code&gt;rlen&lt;/code&gt; を使用して、データを送り返すことができます。</target>
        </trans-unit>
        <trans-unit id="b5d7d4630bf6e699f86315587f52b147af8c7634" translate="yes" xml:space="preserve">
          <source>A special routine invoked with &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt;. It works a little like an &quot;ioctl&quot; for Erlang drivers. The data specified to &lt;code&gt;port_control/3&lt;/code&gt; arrives in &lt;code&gt;buf&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt;. The driver can send data back, using &lt;code&gt;*rbuf&lt;/code&gt; and &lt;code&gt;rlen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; で呼び出される特別なルーチン。Erlangドライバーの「ioctl」と少し似ています。 &lt;code&gt;port_control/3&lt;/code&gt; に指定されたデータは &lt;code&gt;buf&lt;/code&gt; と &lt;code&gt;len&lt;/code&gt; に到着します。ドライバは、 &lt;code&gt;*rbuf&lt;/code&gt; および &lt;code&gt;rlen&lt;/code&gt; を使用してデータを送り返すことができます。</target>
        </trans-unit>
        <trans-unit id="818bed6690afd85a8e837d5ce544a94b65462268" translate="yes" xml:space="preserve">
          <source>A special type of error is when no actual invalid integers or bytes are found, but a trailing &lt;code&gt;binary()&lt;/code&gt; consists of too few bytes to decode the last character. This error can occur if bytes are read from a file in chunks or if binaries in other ways are split on non-UTF character boundaries. An &lt;code&gt;incomplete&lt;/code&gt; tuple is then returned instead of the &lt;code&gt;error&lt;/code&gt; tuple. It consists of the same parts as the &lt;code&gt;error&lt;/code&gt; tuple, but the tag is &lt;code&gt;incomplete&lt;/code&gt; instead of &lt;code&gt;error&lt;/code&gt; and the last element is always guaranteed to be a binary consisting of the first part of a (so far) valid UTF character.</source>
          <target state="translated">特別なタイプのエラーは、実際の無効な整数またはバイトが見つからないが、後続の &lt;code&gt;binary()&lt;/code&gt; がバイト数が少なすぎて、最後の文字をデコードできない場合です。このエラーは、バイトがチャンクでファイルから読み取られる場合、または他の方法でバイナリが非UTF文字境界で分割される場合に発生する可能性があります。 &lt;code&gt;incomplete&lt;/code&gt; タプルは、その後の代わりに返される &lt;code&gt;error&lt;/code&gt; タプル。 &lt;code&gt;error&lt;/code&gt; タプルと同じ部分で構成されていますが、タグは &lt;code&gt;error&lt;/code&gt; ではなく &lt;code&gt;incomplete&lt;/code&gt; であり、最後の要素は常に（これまでのところ）有効なUTF文字の最初の部分で構成されるバイナリであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="3916fb4d3122880bb80b867dc9d2527f278db29f" translate="yes" xml:space="preserve">
          <source>A specific instruction can have at most 6 operands.</source>
          <target state="translated">特定の命令は、最大で6つのオペランドを持つことができます。</target>
        </trans-unit>
        <trans-unit id="5eb0a5535ecc63bd01763b04dca57f5130132dad" translate="yes" xml:space="preserve">
          <source>A specific instruction is defined by first giving its name followed by the types for each operand. For example:</source>
          <target state="translated">特定の命令は、最初にその名前の後に各オペランドの型が続くことで定義されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="eebe590a8a4fd637cbd36f90802e9523ed6a4512" translate="yes" xml:space="preserve">
          <source>A specification (or contract) for a function is given using the &lt;code&gt;-spec&lt;/code&gt; attribute. The general format is as follows:</source>
          <target state="translated">関数の仕様（またはコントラクト）は、 &lt;code&gt;-spec&lt;/code&gt; 属性を使用して指定します。一般的な形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7dc4ccb3d8ddcce0db9cf1c2ea5d5fda23fcb4be" translate="yes" xml:space="preserve">
          <source>A state change cancels a &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; and any new transition option of this type belongs to the new state.</source>
          <target state="translated">状態が変化すると、 &lt;code&gt;&lt;a href=&quot;#type-state_timeout&quot;&gt;state_timeout()&lt;/a&gt;&lt;/code&gt; がキャンセルされ、このタイプの新しい遷移オプションはすべて新しい状態に属します。</target>
        </trans-unit>
        <trans-unit id="c48da406465f6ed9b4beb63690dac21a0092fc89" translate="yes" xml:space="preserve">
          <source>A stateful session ticket is a database reference to internal state information. A stateless session ticket is a self-encrypted binary that contains both cryptographic keying material and state data.</source>
          <target state="translated">ステートフルセッションチケットは、内部状態情報へのデータベース参照です。ステートレスセッションチケットは自己暗号化されたバイナリであり、暗号化キーと状態データの両方を含んでいます。</target>
        </trans-unit>
        <trans-unit id="1ce1fae1923f3d7397b496fc579d7f7f29266cd7" translate="yes" xml:space="preserve">
          <source>A status, which is &lt;strong&gt;active&lt;/strong&gt; or &lt;strong&gt;inactive&lt;/strong&gt;. An inactive breakpoint is ignored.</source>
          <target state="translated">&lt;strong&gt;アクティブ&lt;/strong&gt;または&lt;strong&gt;非アクティブな&lt;/strong&gt;ステータス。非アクティブなブレークポイントは無視されます。</target>
        </trans-unit>
        <trans-unit id="cb3254f6f71d42ad5babf60af6c4beadc5fe794a" translate="yes" xml:space="preserve">
          <source>A sticky lock is a lock that stays in place at a node, after the transaction that first acquired the lock has terminated. To illustrate this, assume that the following transaction is executed:</source>
          <target state="translated">スティッキー・ロックとは、最初にロックを取得したトランザクションが終了した後も、ノードに留まるロックのことです。これを説明するために、次のようなトランザクションが実行されたとします。</target>
        </trans-unit>
        <trans-unit id="167c0844b749b5b3dade41e2fb760895a3da7567" translate="yes" xml:space="preserve">
          <source>A string containing the OTP release number (the same as returned by &lt;code&gt;&lt;a href=&quot;erlang#system_info_otp_release&quot;&gt; erlang:system_info(otp_release)&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">OTPリリース番号を含む文字列（ &lt;code&gt;&lt;a href=&quot;erlang#system_info_otp_release&quot;&gt; erlang:system_info(otp_release)&lt;/a&gt;&lt;/code&gt; によって返されるものと同じ）。</target>
        </trans-unit>
        <trans-unit id="0d036eed01d979d152da2689054b2a8a3616ab3b" translate="yes" xml:space="preserve">
          <source>A string containing the OTP release number (the same as returned by &lt;code&gt;&lt;a href=&quot;erlang#system_info_otp_release&quot;&gt;erlang:system_info(otp_release)&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">OTPリリース番号を含む文字列（ &lt;code&gt;&lt;a href=&quot;erlang#system_info_otp_release&quot;&gt;erlang:system_info(otp_release)&lt;/a&gt;&lt;/code&gt; によって返されるものと同じ）。</target>
        </trans-unit>
        <trans-unit id="7a887f90504538f7764832dfb1ec18f08b3d4d4e" translate="yes" xml:space="preserve">
          <source>A string containing the regular expression</source>
          <target state="translated">正規表現を含む文字列</target>
        </trans-unit>
        <trans-unit id="6a30a94b91175e13eab64a9eaaf574ffd247249b" translate="yes" xml:space="preserve">
          <source>A string containing the version number of the runtime system (the same as returned by &lt;code&gt;&lt;a href=&quot;erlang#system_info_version&quot;&gt; erlang:system_info(version)&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ランタイムシステムのバージョン番号を含む文字列（ &lt;code&gt;&lt;a href=&quot;erlang#system_info_version&quot;&gt; erlang:system_info(version)&lt;/a&gt;&lt;/code&gt; によって返されるものと同じ）。</target>
        </trans-unit>
        <trans-unit id="e0f49966a17385c888cdd7ff3581d6cc3b4a55ee" translate="yes" xml:space="preserve">
          <source>A string containing the version number of the runtime system (the same as returned by &lt;code&gt;&lt;a href=&quot;erlang#system_info_version&quot;&gt;erlang:system_info(version)&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ランタイムシステムのバージョン番号を含む文字列（ &lt;code&gt;&lt;a href=&quot;erlang#system_info_version&quot;&gt;erlang:system_info(version)&lt;/a&gt;&lt;/code&gt; によって返されるものと同じ）。</target>
        </trans-unit>
        <trans-unit id="a067c189aea167f729e4e4094e5cef684c3ebe5a" translate="yes" xml:space="preserve">
          <source>A string containing valid characters on the specific OS for environment variable names using &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;file:native_name_encoding()&lt;/a&gt;&lt;/code&gt; encoding. Note that specifically null characters (integer value zero) and &lt;code&gt;$=&lt;/code&gt; characters are not allowed. However, note that not all invalid characters necessarily will cause the primitiv operations to fail, but may instead produce invalid results.</source>
          <target state="translated">特定のOSで &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;file:native_name_encoding()&lt;/a&gt;&lt;/code&gt; エンコーディングを使用した環境変数名の有効な文字を含む文字列。特にnull文字（整数値0）および &lt;code&gt;$=&lt;/code&gt; 文字は許可されないことに注意してください。ただし、すべての無効な文字が必ずしもprimitiv操作の失敗を引き起こすわけではなく、代わりに無効な結果を生成する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="70f78f37d5d4757bbdf76a8e2359db2143d09529" translate="yes" xml:space="preserve">
          <source>A string containing valid characters on the specific OS for environment variable values using &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;file:native_name_encoding()&lt;/a&gt;&lt;/code&gt; encoding. Note that specifically null characters (integer value zero) are not allowed. However, note that not all invalid characters necessarily will cause the primitiv operations to fail, but may instead produce invalid results.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;file:native_name_encoding()&lt;/a&gt;&lt;/code&gt; エンコーディングを使用して、特定のOSで環境変数値に有効な文字を含む文字列。特にnull文字（整数値0）は許可されないことに注意してください。ただし、すべての無効な文字が必ずしもprimitiv操作の失敗を引き起こすわけではなく、代わりに無効な結果を生成する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9de478315c2065a78cf4db328a67478bae83694c" translate="yes" xml:space="preserve">
          <source>A string describing the error is obtained with the following call:</source>
          <target state="translated">以下の呼び出しでエラーを記述した文字列を取得します。</target>
        </trans-unit>
        <trans-unit id="ee46978e6166eeae1dd2570aa404c6015d82f71d" translate="yes" xml:space="preserve">
          <source>A string identifying the created thread. It is used to identify the thread in planned future debug functionality.</source>
          <target state="translated">作成されたスレッドを識別する文字列。これは、将来のデバッグ機能でスレッドを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="759a963eafd4f199bcd9d735f8b965dcd00ef19c" translate="yes" xml:space="preserve">
          <source>A string in this module is represented by &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt; unicode:chardata()&lt;/a&gt;&lt;/code&gt;, that is, a list of codepoints, binaries with UTF-8-encoded codepoints (&lt;strong&gt;UTF-8 binaries&lt;/strong&gt;), or a mix of the two.</source>
          <target state="translated">このモジュールの文字列は、 &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt; unicode:chardata()&lt;/a&gt;&lt;/code&gt; 、つまり、コードポイントのリスト、UTF-8でエンコードされたコードポイントを持つバイナリ（&lt;strong&gt;UTF-8バイナリ&lt;/strong&gt;）、またはその2つの組み合わせで表されます。</target>
        </trans-unit>
        <trans-unit id="a6d553d44ab1b8299b71777d9750b77ba466363e" translate="yes" xml:space="preserve">
          <source>A string in this module is represented by &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;, that is, a list of codepoints, binaries with UTF-8-encoded codepoints (&lt;strong&gt;UTF-8 binaries&lt;/strong&gt;), or a mix of the two.</source>
          <target state="translated">このモジュールの文字列は、 &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; で表されます。つまり、コードポイントのリスト、UTF-8でエンコードされたコードポイントの&lt;strong&gt;バイナリ&lt;/strong&gt;（&lt;strong&gt;UTF-8バイナリ&lt;/strong&gt;）、またはその2つの組み合わせです。</target>
        </trans-unit>
        <trans-unit id="d11f0427336c725f5ed476d29c20afbd08fe897b" translate="yes" xml:space="preserve">
          <source>A string of non-whitespace characters is read. If a field width has been specified, this number of characters are read and all trailing whitespace characters are stripped. An Erlang string (list of characters) is returned.</source>
          <target state="translated">空白以外の文字列が読み込まれます。フィールド幅が指定されている場合は、この文字数が読み込まれ、最後の空白文字はすべて削除されます。Erlang文字列(文字のリスト)が返されます。</target>
        </trans-unit>
        <trans-unit id="64783b9aab5a7910a29cafe20f9a64dc124f28e3" translate="yes" xml:space="preserve">
          <source>A string representing atom &lt;code&gt;t&lt;/code&gt;.</source>
          <target state="translated">アトム &lt;code&gt;t&lt;/code&gt; を表す文字列。</target>
        </trans-unit>
        <trans-unit id="3d7e23be6d1d7577f504730a2152e66a4301352e" translate="yes" xml:space="preserve">
          <source>A string that describes the error is obtained with the following call:</source>
          <target state="translated">エラーを記述した文字列は、以下の呼び出しで取得されます。</target>
        </trans-unit>
        <trans-unit id="6b058a7796b9b771b09e5ec69321b91ea4d6b069" translate="yes" xml:space="preserve">
          <source>A string version of &lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt;. When the query handle is evaluated, the fun created by the parse transform is interpreted by &lt;code&gt;&lt;a href=&quot;erl_eval&quot;&gt;erl_eval(3)&lt;/a&gt;&lt;/code&gt;. The query string is to be one single QLC terminated by a period.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#q-1&quot;&gt;q/1,2&lt;/a&gt;&lt;/code&gt; の文字列バージョン。クエリハンドルが評価されると、解析変換によって作成されたfunが &lt;code&gt;&lt;a href=&quot;erl_eval&quot;&gt;erl_eval(3)&lt;/a&gt;&lt;/code&gt; によって解釈されます。クエリ文字列は、ピリオドで終了する単一のQLCです。</target>
        </trans-unit>
        <trans-unit id="e691523a7275fa4ec7b2002f9ce045f810aebbb7" translate="yes" xml:space="preserve">
          <source>A string with no adjacent dots.</source>
          <target state="translated">隣接するドットがない文字列。</target>
        </trans-unit>
        <trans-unit id="7b45ae634d5f2aacf52f18c9890284a21d2682fc" translate="yes" xml:space="preserve">
          <source>A stub module descriptor contains the module name, a list of exported functions, and a list of module attributes. Each function is described by its name (which includes its arity), and the corresponding module and function that it calls. (The arities should always match.) The attributes are simply described by key-value pairs.</source>
          <target state="translated">スタブ・モジュール記述子には、モジュール名、エクスポートされた関数のリスト、およびモジュール属性のリストが含まれます。各関数は、その名前(アリティを含む)と、それが呼び出す対応するモジュールと関数によって記述されます(アリティは常に一致していなければなりません)。アリティは常に一致していなければなりません)属性は、単純にキーと値のペアで記述されます。</target>
        </trans-unit>
        <trans-unit id="8dff76e790c867438fab881dad7f0b72bb5ec367" translate="yes" xml:space="preserve">
          <source>A subpattern that does not contain a | character is just a part of the enclosing alternative; it is not a nested alternation with only one alternative. The effect of (*THEN) extends beyond such a subpattern to the enclosing alternative. Consider the following pattern, where A, B, and so on, are complex pattern fragments that do not contain any | characters at this level:</source>
          <target state="translated">文字を含まないサブパターンは、それを囲む代替案の一部に過ぎない。(*THEN)の効果は、そのようなサブパターンを超えて、囲みの代替案にまで及んでいます。以下のパターンを考えてみましょう。A,B,などは、このレベルでは | 文字を含まない複雑なパターンの断片です。</target>
        </trans-unit>
        <trans-unit id="359594612c2eb9a5932465070d74beae6a372eb0" translate="yes" xml:space="preserve">
          <source>A subpattern that is referenced by name can appear in the pattern before or after the reference.</source>
          <target state="translated">名前で参照されるサブパターンは、参照の前後にパターン内に現れることができます。</target>
        </trans-unit>
        <trans-unit id="d8554111ace0a51aa20ae047b50f0d90058ec0d6" translate="yes" xml:space="preserve">
          <source>A subroutine call to a subpattern (recursive or otherwise)</source>
          <target state="translated">サブパターンへのサブルーチン呼び出し(再帰的かどうかは別として</target>
        </trans-unit>
        <trans-unit id="1e9e2570d27c2595d94b29222dcc52f4683b8c79" translate="yes" xml:space="preserve">
          <source>A subset of all semantic checks on types are implemented. For example, strictly the &lt;code&gt;TimeTicks&lt;/code&gt; may not be sub-classed but the compiler allows this (standard MIBs must pass through the compiler) (deviates from SMIv2 only).</source>
          <target state="translated">型のすべてのセマンティックチェックのサブセットが実装されています。たとえば、厳密には &lt;code&gt;TimeTicks&lt;/code&gt; はサブクラス化されない場合がありますが、コンパイラーはこれを許可します（標準MIBはコンパイラーを通過する必要があります）（SMIv2からのみ逸脱）。</target>
        </trans-unit>
        <trans-unit id="29bc759fe88a2b272d7f7e146c9840a7ce6ba6f5" translate="yes" xml:space="preserve">
          <source>A successful match of a segment of a &lt;code&gt;utf&lt;/code&gt; type, results in an integer in the range 0..16#D7FF or 16#E000..16#10FFFF. The match fails if the returned value falls outside those ranges.</source>
          <target state="translated">&lt;code&gt;utf&lt;/code&gt; タイプのセグメントが正常に一致すると、0..16＃D7FFまたは16＃E000..16＃10FFFFの範囲の整数になります。戻り値がこれらの範囲外の場合、一致は失敗します。</target>
        </trans-unit>
        <trans-unit id="0dd5399d68fd62c8aa61dea1b9cd129c66c4e135" translate="yes" xml:space="preserve">
          <source>A suggestion, in kilowords, on how large a stack to use. A value &amp;lt; 0 means default size.</source>
          <target state="translated">使用するスタックの大きさに関するキロワード単位の提案。値&amp;lt;0は、デフォルトのサイズを意味します。</target>
        </trans-unit>
        <trans-unit id="d2bcf77bf32e3c737f6132f4ba89272aa61deb33" translate="yes" xml:space="preserve">
          <source>A suitable &lt;code&gt;erlang_pid&lt;/code&gt; can be constructed from the &lt;code&gt;ei_cnode&lt;/code&gt; structure by the following example code:</source>
          <target state="translated">適切な &lt;code&gt;erlang_pid&lt;/code&gt; は、次のコード &lt;code&gt;ei_cnode&lt;/code&gt; 構造から構築できます。</target>
        </trans-unit>
        <trans-unit id="c330db35fee146e2f49165430e3031752b587566" translate="yes" xml:space="preserve">
          <source>A suitable &lt;code&gt;erlang_pid&lt;/code&gt; can be retrieved from the &lt;code&gt;ei_cnode&lt;/code&gt; structure by calling &lt;code&gt;ei_self(cnode_pointer)&lt;/code&gt;.</source>
          <target state="translated">適切な &lt;code&gt;erlang_pid&lt;/code&gt; は、 &lt;code&gt;ei_self(cnode_pointer)&lt;/code&gt; を呼び出すことによって &lt;code&gt;ei_cnode&lt;/code&gt; 構造から取得できます。</target>
        </trans-unit>
        <trans-unit id="e635ab7a6524cfed54f5074b2c5f201fa29a542e" translate="yes" xml:space="preserve">
          <source>A summary of all the run test cases.</source>
          <target state="translated">すべての実行テストケースの概要。</target>
        </trans-unit>
        <trans-unit id="490b87fb70901b3cf146b436d3ad3d6969ae85d3" translate="yes" xml:space="preserve">
          <source>A summary of allocated block sizes (including their headers) grouped by their &lt;code&gt;Origin&lt;/code&gt; and &lt;code&gt;Type&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Origin&lt;/code&gt; と &lt;code&gt;Type&lt;/code&gt; でグループ化された、割り当てられたブロックサイズ（ヘッダーを含む）の概要。</target>
        </trans-unit>
        <trans-unit id="555b82edcc9a51ba9b0a8648b94fe2cee0f8eb4a" translate="yes" xml:space="preserve">
          <source>A super carrier is large memory area, allocated at VM start, which can be used during runtime to allocate normal carriers from.</source>
          <target state="translated">スーパーキャリアとは、VMの起動時に割り当てられる大容量のメモリ領域で、実行時に通常のキャリアを割り当てるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="c019e1f1b48948e812995eacd1c55f50920bdf21" translate="yes" xml:space="preserve">
          <source>A super carrier needs to satisfy two slightly different kinds of allocation requests; multi block carriers (MBC) and single block carriers (SBC). They are both rather large blocks of continious memory, but MBCs and SBCs have different demands on alignment and size.</source>
          <target state="translated">スーパーキャリアは、マルチブロックキャリア(MBC)とシングルブロックキャリア(SBC)の2つの少し異なる種類の割り当て要求を満たす必要があります。これらはどちらもかなり大きな連続メモリのブロックですが、MBCとSBCでは、アラインメントとサイズに対する要求が異なります。</target>
        </trans-unit>
        <trans-unit id="42e4170b78b8fb9e3847e667242b4de5cec174c5" translate="yes" xml:space="preserve">
          <source>A supervisor bridge assumes the functions for starting and stopping the subsystem to be located in a callback module exporting a predefined set of functions.</source>
          <target state="translated">スーパバイザブリッジは、あらかじめ定義された関数のセットをエクスポートするコールバックモジュールに配置されるサブシステムの起動と停止のための関数を想定しています。</target>
        </trans-unit>
        <trans-unit id="f8e585f469018050c24b2320c6df8c355fe43361" translate="yes" xml:space="preserve">
          <source>A supervisor can have one of the following &lt;strong&gt;restart strategies&lt;/strong&gt; specified with the &lt;code&gt;strategy&lt;/code&gt; key in the above map:</source>
          <target state="translated">スーパーバイザは、上記のマップの &lt;code&gt;strategy&lt;/code&gt; キーで指定された次の&lt;strong&gt;再起動戦略の&lt;/strong&gt; 1つを持つことができます。</target>
        </trans-unit>
        <trans-unit id="2b7d18f5eb25e50d03987db777d14f147e150acb" translate="yes" xml:space="preserve">
          <source>A supervisor expects the definition of which child processes to supervise to be specified in a callback module exporting a predefined set of functions.</source>
          <target state="translated">スーパバイザは、どの子プロセスを監督するかの定義が、定義済みの関数セットをエクスポートするコールバックモジュールで指定されることを期待しています。</target>
        </trans-unit>
        <trans-unit id="f82d3f2d9f94a9fc80489eaf4729fa8c31535cf1" translate="yes" xml:space="preserve">
          <source>A supervisor for the SNMP agent Processes</source>
          <target state="translated">SNMPエージェントのスーパーバイザ プロセス</target>
        </trans-unit>
        <trans-unit id="07d7e065bf97522ff7b29841ee97a5f3abaaa707" translate="yes" xml:space="preserve">
          <source>A supervisor is responsible for starting, stopping, and monitoring its child processes. The basic idea of a supervisor is that it is to keep its child processes alive by restarting them when necessary.</source>
          <target state="translated">スーパーバイザは、その子プロセスの起動、停止、監視に責任を負う。スーパーバイザの基本的な考え方は、必要に応じて子プロセスを再起動することで、子プロセスを存続させることです。</target>
        </trans-unit>
        <trans-unit id="8efae13f8c7942b2ac38b9a2a73eb196c3d0a6ff" translate="yes" xml:space="preserve">
          <source>A supervisor report is issued when a supervised child terminates unexpectedly. A supervisor report contains the following items:</source>
          <target state="translated">監督下にある子どもが予期せず終了した場合、スーパーバイザー報告書が発行されます。スーパーバイザー報告書には以下の項目が含まれています。</target>
        </trans-unit>
        <trans-unit id="2d5726e30c2bfdd999c9a419984c8b7f106bff81" translate="yes" xml:space="preserve">
          <source>A supervisor with restart strategy &lt;code&gt;simple_one_for_one&lt;/code&gt; is a simplified &lt;code&gt;one_for_one&lt;/code&gt; supervisor, where all child processes are dynamically added instances of the same process.</source>
          <target state="translated">再起動戦略 &lt;code&gt;simple_one_for_one&lt;/code&gt; を持つスーパーバイザは、単純化された &lt;code&gt;one_for_one&lt;/code&gt; スーパーバイザであり、すべての子プロセスは同じプロセスの動的に追加されたインスタンスです。</target>
        </trans-unit>
        <trans-unit id="4a17c6d57373e353ac6abb1cd3af415a947ff039" translate="yes" xml:space="preserve">
          <source>A suspend request is sent to the process identified by &lt;code&gt;Suspendee&lt;/code&gt;. &lt;code&gt;Suspendee&lt;/code&gt; eventually suspends unless it is resumed before it could suspend. The caller of &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; returns immediately, regardless of whether &lt;code&gt;Suspendee&lt;/code&gt; has suspended yet or not. The point in time when &lt;code&gt;Suspendee&lt;/code&gt; suspends cannot be deduced from other events in the system. It is only guaranteed that &lt;code&gt;Suspendee&lt;/code&gt;&lt;strong&gt;eventually&lt;/strong&gt; suspends (unless it is resumed). If no &lt;code&gt;asynchronous&lt;/code&gt; options has been passed, the caller of &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; is blocked until &lt;code&gt;Suspendee&lt;/code&gt; has suspended.</source>
          <target state="translated">サスペンド要求は、 &lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスに送信されます。 &lt;code&gt;Suspendee&lt;/code&gt; は、中断する前に再開されない限り、最終的に中断します。 &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; の呼び出し元は、 &lt;code&gt;Suspendee&lt;/code&gt; がまだ中断しているかどうかに関係なく、すぐに戻ります。 &lt;code&gt;Suspendee&lt;/code&gt; が一時停止する時点は、システム内の他のイベントから推定することはできません。 &lt;code&gt;Suspendee&lt;/code&gt; が（再開されない限り）&lt;strong&gt;最終的に&lt;/strong&gt;中断することが保証されるだけです。 &lt;code&gt;asynchronous&lt;/code&gt; オプションが渡されていない場合、 &lt;code&gt;Suspendee&lt;/code&gt; がサスペンドされるまで、 &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; の呼び出し元はブロックされます。</target>
        </trans-unit>
        <trans-unit id="25b4e7d3e689427411ff502e735d917aa357caf7" translate="yes" xml:space="preserve">
          <source>A suspend request is sent to the process identified by &lt;code&gt;Suspendee&lt;/code&gt;. When the suspend request has been processed, a reply message is sent to the caller of this function. The reply is on the form &lt;code&gt;{ReplyTag, State}&lt;/code&gt; where &lt;code&gt;State&lt;/code&gt; is either:</source>
          <target state="translated">サスペンド要求は、 &lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスに送信されます。サスペンド要求が処理されると、この関数の呼び出し元に応答メッセージが送信されます。応答は、フォーム上にある &lt;code&gt;{ReplyTag, State}&lt;/code&gt; &lt;code&gt;State&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="aa31c4e6104829ed1e5940c6b760d5e5f8223aa4" translate="yes" xml:space="preserve">
          <source>A symbolic link in the path points above the root of the relative path.</source>
          <target state="translated">相対パスのルートの上を指すパス内のシンボリックリンク。</target>
        </trans-unit>
        <trans-unit id="dab5b92521d5334adcd3b34a7cd584da12e53036" translate="yes" xml:space="preserve">
          <source>A syntax tree can be transformed to the &lt;code&gt;&lt;a href=&quot;#type-erl_parse&quot;&gt;erl_parse()&lt;/a&gt;&lt;/code&gt; representation with the &lt;code&gt;&lt;a href=&quot;#revert-1&quot;&gt;revert/1&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">構文ツリーは、 &lt;code&gt;&lt;a href=&quot;#revert-1&quot;&gt;revert/1&lt;/a&gt;&lt;/code&gt; 関数を使用して &lt;code&gt;&lt;a href=&quot;#type-erl_parse&quot;&gt;erl_parse()&lt;/a&gt;&lt;/code&gt; 表現に変換できます。</target>
        </trans-unit>
        <trans-unit id="7fe7a01f61caca49ad408b9e314c2eab8ae04b7a" translate="yes" xml:space="preserve">
          <source>A system I/O vector, as used by &lt;code&gt;writev&lt;/code&gt; on Unix and &lt;code&gt;WSASend&lt;/code&gt; on Win32. It is used in &lt;code&gt;ErlIOVec&lt;/code&gt;.</source>
          <target state="translated">Unixの &lt;code&gt;writev&lt;/code&gt; とWin32の &lt;code&gt;WSASend&lt;/code&gt; で使用されるシステムI / Oベクトル。 &lt;code&gt;ErlIOVec&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="0af2eabcce5a60d4fed7164c28fadc9a20e4493d" translate="yes" xml:space="preserve">
          <source>A system I/O vector, as used by &lt;code&gt;writev&lt;/code&gt; on Unix and &lt;code&gt;WSASend&lt;/code&gt; on Win32. It is used in &lt;code&gt;ErlNifIOVec&lt;/code&gt; and by &lt;code&gt;&lt;a href=&quot;#enif_ioq_peek&quot;&gt;enif_ioq_peek&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Unixの &lt;code&gt;writev&lt;/code&gt; とWin32の &lt;code&gt;WSASend&lt;/code&gt; で使用されるシステムI / Oベクトル。それはで使用され &lt;code&gt;ErlNifIOVec&lt;/code&gt; とによって &lt;code&gt;&lt;a href=&quot;#enif_ioq_peek&quot;&gt;enif_ioq_peek&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="616d063d630bdaee784166c5d2aa3d7079333cc2" translate="yes" xml:space="preserve">
          <source>A system configuration file, &lt;code&gt;sys.config&lt;/code&gt;</source>
          <target state="translated">システム構成ファイル &lt;code&gt;sys.config&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="2a27085bf58c10c3bac131eedf2381b0839b7998" translate="yes" xml:space="preserve">
          <source>A system configuration source file, &lt;code&gt;sys.config.src&lt;/code&gt;</source>
          <target state="translated">システム構成ソースファイル &lt;code&gt;sys.config.src&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="475c3957e8fbb0321adf13488719ce7f864fd2ec" translate="yes" xml:space="preserve">
          <source>A system limit has been reached. See &lt;code&gt; Efficiency Guide&lt;/code&gt; for information about system limits.</source>
          <target state="translated">システム制限に達しました。システム制限については、 &lt;code&gt; Efficiency Guide&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c879d34c3ec9d9665df9efe9db8cf8d5df6abde2" translate="yes" xml:space="preserve">
          <source>A system limit has been reached. See &lt;code&gt;Efficiency Guide&lt;/code&gt; for information about system limits.</source>
          <target state="translated">システム制限に達しました。システムの制限については、 &lt;code&gt;Efficiency Guide&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8b8fdecfc617b9fa3706b79edfcf234ce5f241ff" translate="yes" xml:space="preserve">
          <source>A tab followed by character &quot;3&quot;</source>
          <target state="translated">タブの後に「3」の文字が続くもの</target>
        </trans-unit>
        <trans-unit id="7d11781c842639135820e9eada3b27c9a8d0d9ad" translate="yes" xml:space="preserve">
          <source>A table called &lt;code&gt;myTable&lt;/code&gt; has five columns. The first two are keys (not accessible), and the table has three rows. The instrumentation function for this table is called &lt;code&gt;my_table&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;myTable&lt;/code&gt; というテーブルには5つの列があります。最初の2つはキー（アクセス不可）で、テーブルには3つの行があります。このテーブルのインストルメンテーション関数は &lt;code&gt;my_table&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="75534734c58db0aa05f9239f37f6428de398c20c" translate="yes" xml:space="preserve">
          <source>A table identifier, as returned by &lt;code&gt;&lt;a href=&quot;#new-2&quot;&gt;new/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#new-2&quot;&gt;new/2&lt;/a&gt;&lt;/code&gt; によって返されるテーブル識別子。</target>
        </trans-unit>
        <trans-unit id="9f0fe364ceb37c8d8dc5f9217f78c519dc139c59" translate="yes" xml:space="preserve">
          <source>A table may contain columns that are used internally, but should not be visible to a manager. These internal columns must be the last columns in the table. The &lt;code&gt;set&lt;/code&gt; operation will not work with this arrangement, because there are columns that the agent does not know about. This situation is handled by adding values for the internal columns in the &lt;code&gt;set&lt;/code&gt; function.</source>
          <target state="translated">テーブルには、内部的に使用される列が含まれる場合がありますが、マネージャーからは見えません。これらの内部列は、テーブルの最後の列でなければなりません。 &lt;code&gt;set&lt;/code&gt; エージェントが認識できない列があるため、操作は、この構成では動作しません。この状況は、 &lt;code&gt;set&lt;/code&gt; 関数の内部列に値を追加することで処理されます。</target>
        </trans-unit>
        <trans-unit id="3ccf87ca282ead9bb584834a165823229be63f73" translate="yes" xml:space="preserve">
          <source>A table object</source>
          <target state="translated">テーブルオブジェクト</target>
        </trans-unit>
        <trans-unit id="57b2065e432402661ed8ccb643e2901e6965c10a" translate="yes" xml:space="preserve">
          <source>A table of type &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;ordered_set&lt;/code&gt; has either zero or one record per key, whereas a table of type &lt;code&gt;bag&lt;/code&gt; can have an arbitrary number of records per key. The key for each record is always the first attribute of the record.</source>
          <target state="translated">タイプ &lt;code&gt;set&lt;/code&gt; または &lt;code&gt;ordered_set&lt;/code&gt; のテーブルには、キーごとにゼロまたは1つのレコードがありますが、 &lt;code&gt;bag&lt;/code&gt; タイプのテーブルには、キーごとに任意の数のレコードを含めることができます。各レコードのキーは、常にレコードの最初の属性です。</target>
        </trans-unit>
        <trans-unit id="a88c8b440b3f81b0c6b1eb623a7b8614ba6ccb2c" translate="yes" xml:space="preserve">
          <source>A table traversal is &lt;strong&gt;safe&lt;/strong&gt; if either</source>
          <target state="translated">どちらかがあれば、テーブルトラバーサルは&lt;strong&gt;安全&lt;/strong&gt;です</target>
        </trans-unit>
        <trans-unit id="8be8a69bc11325d2a87005532e2b29bbd011c378" translate="yes" xml:space="preserve">
          <source>A tag that describes the (select) operation.</source>
          <target state="translated">(セレクト)操作を記述するタグ。</target>
        </trans-unit>
        <trans-unit id="338d3dd5c9171dcfa74ab3490bd081525d78c330" translate="yes" xml:space="preserve">
          <source>A tail-recursive function that does not need to reverse the list at the end is faster than a body-recursive function, as are tail-recursive functions that do not construct any terms at all (for example, a function that sums all integers in a list).</source>
          <target state="translated">最後にリストを反転させる必要のない末尾再帰関数は,項を全く構築しない末尾再帰関数(例えば,リスト内のすべての整数を合計する関数)と同様に,ボディ再帰関数よりも高速です.</target>
        </trans-unit>
        <trans-unit id="6ed306bfabb588bedad1a38ebc28c88dc1ee79a9" translate="yes" xml:space="preserve">
          <source>A target system may have several releases but the one given as &lt;code&gt;boot_rel&lt;/code&gt; will be used as default when the system is booting up.</source>
          <target state="translated">ターゲットシステムには複数のリリースがある場合がありますが、 &lt;code&gt;boot_rel&lt;/code&gt; として指定されたものは、システムの起動時にデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="af9eae26f481905b914e12255a1f498f1501fe7a" translate="yes" xml:space="preserve">
          <source>A task that can be aborted is referred via another data structure from other parts of the system, so that a thread that needs to abort the task can reach it. In order to be sure to safely deallocate a task that is no longer used, we first clear this reference and then use the thread progress functionality in order to make sure no references can exist to the task. Unfortunately, also unmanaged threads might abort tasks. This is very infrequent, but might occur. This could be handled locally for each port, but would require extra information in each port structure which very infrequently would be used. Instead of implementing this in each port, we implemented general functionality that can be used from unmanaged threads to delay thread progress.</source>
          <target state="translated">中止可能なタスクは、システムの他の部分から別のデータ構造を介して参照され、タスクを中止する必要があるスレッドがそれに到達できるようにします。使用されなくなったタスクを安全に解放するために、まずこの参照をクリアしてからスレッドプログレス機能を使用して、タスクへの参照が存在しないことを確認します。残念ながら、管理されていないスレッドもタスクをアボートすることがあります。これは非常にまれですが、発生する可能性があります。これは各ポートごとにローカルで処理することができますが、各ポート構造体に余分な情報が必要となり、使用される頻度は非常に低いでしょう。これを各ポートに実装する代わりに、スレッドの進行を遅延させるためにアンマネージドスレッドから使用できる一般的な機能を実装しました。</target>
        </trans-unit>
        <trans-unit id="3ba0e9f6775914dcfade32d5d8265e1ed8ccd90d" translate="yes" xml:space="preserve">
          <source>A temporary process will be created for each callback call.</source>
          <target state="translated">コールバックコールごとにテンポラリプロセスが作成されます。</target>
        </trans-unit>
        <trans-unit id="92a162c972e0a2da1ef36842b8e1183dc63976d3" translate="yes" xml:space="preserve">
          <source>A term in which the state machine implementation is to store any server data it needs. The difference between this and the &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; itself is that a change in this data does not cause postponed events to be retried. Hence, if a change in this data would change the set of events that are handled, then that data item is to be made a part of the state.</source>
          <target state="translated">ステートマシンの実装で、必要なサーバーデータを格納するという用語。thisと &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; 自体の違いは、このデータを変更しても延期されたイベントが再試行されないことです。したがって、このデータの変更が処理されるイベントのセットを変更する場合、そのデータ項目は状態の一部になります。</target>
        </trans-unit>
        <trans-unit id="3c82bdf9ca846d33c59020cff263330ebd6a6321" translate="yes" xml:space="preserve">
          <source>A term of type &lt;code&gt;&lt;a href=&quot;#type-iovec&quot;&gt;iovec()&lt;/a&gt;&lt;/code&gt;, structured according to the Erlang external term format.</source>
          <target state="translated">アーラン外部用語形式に従って構造化された &lt;code&gt;&lt;a href=&quot;#type-iovec&quot;&gt;iovec()&lt;/a&gt;&lt;/code&gt; 型の用語。</target>
        </trans-unit>
        <trans-unit id="f59430379cf9648470c25a50d2a2c81bb2b89218" translate="yes" xml:space="preserve">
          <source>A term, if the event handler is removed because of an error. Which term depends on the error.</source>
          <target state="translated">エラーのためにイベントハンドラが削除された場合の項。どの項がエラーになるかは、エラーに依存します。</target>
        </trans-unit>
        <trans-unit id="9594dc172a1a303c23e2c7f885380aa1c05fad93" translate="yes" xml:space="preserve">
          <source>A test case can handle several connections to one or more target systems, instruments, and traffic generators in parallel to perform the necessary actions for a test. The handling of many connections in parallel is one of the major strengths of &lt;code&gt;Common Test&lt;/code&gt;, thanks to the efficient support for concurrency in the Erlang runtime system, which &lt;code&gt;Common Test&lt;/code&gt; users can take great advantage of.</source>
          <target state="translated">テストケースは、1つ以上のターゲットシステム、計測器、およびトラフィックジェネレータへの複数の接続を並行して処理して、テストに必要なアクションを実行できます。多数の接続を並行して処理することは、Erlangランタイムシステムでの同時実行の効率的なサポートのおかげで、 &lt;code&gt;Common Test&lt;/code&gt; ユーザーが大きなメリットを享受できるため、 &lt;code&gt;Common Test&lt;/code&gt; の主要な強みの1つです。</target>
        </trans-unit>
        <trans-unit id="3f0276c5d34cae70dd7c0725d3127cfdb7e17a06" translate="yes" xml:space="preserve">
          <source>A test case failure is specified as a runtime error (a crash), no matter what the reason for termination is. If you use Erlang pattern matching effectively, you can take advantage of this property. The result is concise and readable test case functions that look much more like scripts than actual programs. A simple example:</source>
          <target state="translated">テストケースの失敗は、終了理由が何であれ実行時エラー(クラッシュ)として指定されます。Erlangのパターンマッチングを効果的に使えば、この特性を利用することができます。その結果、簡潔で読みやすいテストケース関数ができ、実際のプログラムよりもスクリプトのように見えます。簡単な例を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="57803d84844b81148f638909cfbdf834fb63a201" translate="yes" xml:space="preserve">
          <source>A test case group can be repeated a certain number of times (specified by an integer) or indefinitely (specified by &lt;code&gt;forever&lt;/code&gt;). The repetition can also be stopped too early if any or all cases fail or succeed, that is, if any of the properties &lt;code&gt;repeat_until_any_fail&lt;/code&gt;, &lt;code&gt;repeat_until_any_ok&lt;/code&gt;, &lt;code&gt;repeat_until_all_fail&lt;/code&gt;, or &lt;code&gt;repeat_until_all_ok&lt;/code&gt; is used. If the basic &lt;code&gt;repeat&lt;/code&gt; property is used, status of test cases is irrelevant for the repeat operation.</source>
          <target state="translated">テストケースグループは、特定の回数（整数で指定）または無制限（ &lt;code&gt;forever&lt;/code&gt; で指定）に繰り返すことができます。いずれかまたは全てのケースが失敗するか成功した場合の繰り返しも、プロパティのいずれかの場合には、あること、あまりにも早く停止することができ &lt;code&gt;repeat_until_any_fail&lt;/code&gt; 、 &lt;code&gt;repeat_until_any_ok&lt;/code&gt; 、 &lt;code&gt;repeat_until_all_fail&lt;/code&gt; 、または &lt;code&gt;repeat_until_all_ok&lt;/code&gt; が使用されています。基本的な &lt;code&gt;repeat&lt;/code&gt; プロパティが使用されている場合、テストケースのステータスは繰り返し操作には関係ありません。</target>
        </trans-unit>
        <trans-unit id="70f3b406878b1ad27d06f47209f488fb0090bedb" translate="yes" xml:space="preserve">
          <source>A test case group is a set of test cases sharing configuration functions and execution properties. Test case groups are defined by function &lt;code&gt;&lt;a href=&quot;common_test#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; according to the following syntax:</source>
          <target state="translated">テストケースグループは、構成機能と実行プロパティを共有するテストケースのセットです。テストケースグループは、次の構文に従って関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="6615fe68020574c9d51502afda77dbb501f32348" translate="yes" xml:space="preserve">
          <source>A test case group is a set of test cases sharing configuration functions and execution properties. Test case groups are defined by function &lt;code&gt;&lt;a href=&quot;ct_suite#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; according to the following syntax:</source>
          <target state="translated">テストケースグループは、構成関数と実行プロパティを共有するテストケースのセットです。テストケースグループは、次の構文に従って関数 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:groups-0&quot;&gt;groups/0&lt;/a&gt;&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="e797bd2be17f58c7efe8dfeff204b02c5adaa5d5" translate="yes" xml:space="preserve">
          <source>A test case is considered successful if it returns to the caller, no matter what the returned value is. However, a few return values have special meaning as follows:</source>
          <target state="translated">テストケースは、戻り値がどのようなものであっても、それが呼び出し元に返ってきた場合には成功とみなされます。しかし、いくつかの戻り値は以下のように特別な意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="dcc50de966066784aa8d897c8ffe49a70bbe3620" translate="yes" xml:space="preserve">
          <source>A test is performed by running one or more test suites. A test suite consists of test cases, configuration functions, and information functions. Test cases can be grouped in so called test case groups. A test suite is an Erlang module and test cases are implemented as Erlang functions. Test suites are stored in test directories.</source>
          <target state="translated">テストは、1つまたは複数のテストスイートを実行することで実行されます。テストスイートは、テストケース、設定機能、情報機能から構成されます。テストケースはテストケースグループと呼ばれるグループにまとめることができます。テストスイートはErlangモジュールであり、テストケースはErlang関数として実装されています。テストスイートはテストディレクトリに格納されます。</target>
        </trans-unit>
        <trans-unit id="82b0d4348a040296baa971a336f70137d0143756" translate="yes" xml:space="preserve">
          <source>A test set can be easily created by placing a sequence of test objects in a list. If &lt;code&gt;T_1&lt;/code&gt;, ..., &lt;code&gt;T_N&lt;/code&gt; are individual test objects, then &lt;code&gt;[T_1, ..., T_N]&lt;/code&gt; is a test set consisting of those objects (in that order).</source>
          <target state="translated">テストセットは、一連のテストオブジェクトをリストに配置することで簡単に作成できます。場合 &lt;code&gt;T_1&lt;/code&gt; 、...、 &lt;code&gt;T_N&lt;/code&gt; が個々のテストオブジェクトは、その後、 &lt;code&gt;[T_1, ..., T_N]&lt;/code&gt; （その順序で）これらのオブジェクトからなるテストセットです。</target>
        </trans-unit>
        <trans-unit id="850a2b153e54fe3302effc5897fd48daf6d71d85" translate="yes" xml:space="preserve">
          <source>A test suite is an ordinary Erlang module that contains test cases. It is recommended that the module has a name on the form &lt;code&gt;*_SUITE.erl&lt;/code&gt;. Otherwise, the directory and auto compilation function in &lt;code&gt;Common Test&lt;/code&gt; cannot locate it (at least not by default).</source>
          <target state="translated">テストスイートは、テストケースを含む通常のErlangモジュールです。モジュールには &lt;code&gt;*_SUITE.erl&lt;/code&gt; という形式の名前を付けることをお勧めします。そうしないと、 &lt;code&gt;Common Test&lt;/code&gt; のディレクトリと自動コンパイル機能がそれを見つけることができません（少なくともデフォルトでは）。</target>
        </trans-unit>
        <trans-unit id="c6a46a09bfa35f6d6a3e0deef8196b3ea6cd2281" translate="yes" xml:space="preserve">
          <source>A test term can also specify one or more test suites, groups, or test cases to be skipped. Skipped suites, groups, and cases are not executed and show up in the HTML log files as &lt;code&gt;SKIPPED&lt;/code&gt;.</source>
          <target state="translated">テスト用語は、スキップする1つ以上のテストスイート、グループ、またはテストケースを指定することもできます。スキップされたスイート、グループ、およびケースは実行されず、HTMLログファイルに &lt;code&gt;SKIPPED&lt;/code&gt; として表示されます。</target>
        </trans-unit>
        <trans-unit id="fc9a7da069ee22047038749756cf97523761175f" translate="yes" xml:space="preserve">
          <source>A textual comment describing the service. Not mandatory, but shows up as the service description in the Windows service manager.</source>
          <target state="translated">サービスを説明するテキストコメント。必須ではありませんが、Windows サービスマネージャではサービスの説明として表示されます。</target>
        </trans-unit>
        <trans-unit id="1b69647db9e6ba8a0e002c236579c1374755b41d" translate="yes" xml:space="preserve">
          <source>A the time of writing this, the latest released version of SystemTap is version 1.6. Erlang's DTrace support requires a MACRO that was introduced after that release. So either get a newer release or build SystemTap from git yourself (see: http://sourceware.org/systemtap/getinvolved.html)</source>
          <target state="translated">これを書いている時点で、SystemTapの最新バージョンはバージョン1.6です。ErlangのDTraceサポートには、そのリリース以降に導入されたMACROが必要です。そのため、新しいリリースを手に入れるか、自分でgitからSystemTapをビルドしてください (参照:http://sourceware.org/systemtap/getinvolved.html)。</target>
        </trans-unit>
        <trans-unit id="9b18f6bb3b01d76a4dfa566d98c87a28d7f6b44e" translate="yes" xml:space="preserve">
          <source>A third alternative is to download and install MSYS2 from:</source>
          <target state="translated">3つ目の方法は、MSYS2をダウンロードしてインストールすることです。</target>
        </trans-unit>
        <trans-unit id="1d370bfacb3e303ae0b301510d2fd8f9fe73b2f2" translate="yes" xml:space="preserve">
          <source>A third feature is to have the super carrier limit the &lt;strong&gt;maximum&lt;/strong&gt; amount of memory used by the VM. If +MMsco (Super Carrier Only) is set to true, which is default, allocations will only be done from the super carrier. When the super carrier gets full, the VM will fail due to out of memory. If +MMsco is false, allocations will use mmap directly if the super carrier is full.</source>
          <target state="translated">3番目の機能は、VMが使用するメモリの&lt;strong&gt;最大&lt;/strong&gt;量をスーパーキャリアに制限させることです。+ MMsco（スーパーキャリアのみ）がデフォルトのtrueに設定されている場合、割り当てはスーパーキャリアからのみ行われます。スーパーキャリアがいっぱいになると、メモリ不足のためにVMに障害が発生します。+ MMscoがfalseの場合、スーパーキャリアがいっぱいであれば、割り当てはmmapを直接使用します。</target>
        </trans-unit>
        <trans-unit id="a52be3095703dc09da3f8d9ef4629a28e6444954" translate="yes" xml:space="preserve">
          <source>A third problem was management of low memory in the halfword emulator. The implementation used a naive linear search structure to hold free segments which would lead to poor performance when fragmentation increased.</source>
          <target state="translated">3番目の問題は、ハーフワードエミュレータの低メモリの管理でした。この実装では、フリーセグメントを保持するためにナイーブな線形探索構造を使用していましたが、これは断片化が進むとパフォーマンスが低下する原因となります。</target>
        </trans-unit>
        <trans-unit id="f9c4754ee9c691b3be255533c56967a9f65767a3" translate="yes" xml:space="preserve">
          <source>A third usage is to block login attempts from a missbehaving peer. The &lt;code&gt;State&lt;/code&gt; described above can be used for this. The return value &lt;code&gt;disconnect&lt;/code&gt; is useful for this.</source>
          <target state="translated">3番目の使用法は、動作不良のピアからのログイン試行をブロックすることです。これには、前述の &lt;code&gt;State&lt;/code&gt; 使用できます。これには、戻り値の &lt;code&gt;disconnect&lt;/code&gt; が役立ちます。</target>
        </trans-unit>
        <trans-unit id="dd9a2152eb9572e05f0a61d8511698051e7c78f8" translate="yes" xml:space="preserve">
          <source>A thread can only be joined once. The behavior of joining more than once is undefined, an emulator crash is likely. If &lt;code&gt;exit_value == NULL&lt;/code&gt;, the exit value of the terminated thread is ignored, otherwise the exit value of the terminated thread is stored at &lt;code&gt;*exit_value&lt;/code&gt;.</source>
          <target state="translated">スレッドは一度だけ結合できます。複数回参加する動作は定義されていないため、エミュレータがクラッシュする可能性があります。 &lt;code&gt;exit_value == NULL&lt;/code&gt; 場合、終了したスレッドの終了値は無視されます。それ以外の場合、終了したスレッドの終了値は &lt;code&gt;*exit_value&lt;/code&gt; に格納されます。</target>
        </trans-unit>
        <trans-unit id="713f4e1d5b50f7df039ee9fe6e1996e2572d7a3a" translate="yes" xml:space="preserve">
          <source>A thread identifier can be reused very quickly after a thread has terminated. Therefore, if a thread corresponding to one of the involved thread identifiers has terminated since the thread identifier was saved, the result of &lt;code&gt;erl_drv_equal_tids&lt;/code&gt; does possibly not give the expected result.</source>
          <target state="translated">スレッドが終了した後、スレッド識別子は非常に迅速に再利用できます。したがって、スレッドIDが保存されてから、関連するスレッドIDの1つに対応するスレッドが終了した場合、 &lt;code&gt;erl_drv_equal_tids&lt;/code&gt; の結果は、期待した結果にならない可能性があります。</target>
        </trans-unit>
        <trans-unit id="cad763d5e07983c99c13f14998b109764ecd9488" translate="yes" xml:space="preserve">
          <source>A time stamp as returned by the BIF &lt;code&gt;now()&lt;/code&gt;.</source>
          <target state="translated">BIF &lt;code&gt;now()&lt;/code&gt; によって返されるタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="09f8c7e2d1b4631a8a0fd8e3a936590e5cfc3d7c" translate="yes" xml:space="preserve">
          <source>A time warp is a leap forwards or backwards in time. That is, the difference of time values taken before and after the time warp does not correspond to the actual elapsed time.</source>
          <target state="translated">タイムワープとは、時間を前後に飛躍させることです。つまり、タイムワープ前後の時間値の差は、実際の経過時間とは一致しません。</target>
        </trans-unit>
        <trans-unit id="cd86c3e0b5292795cee07d9ad33f244af7a25314" translate="yes" xml:space="preserve">
          <source>A time-out feature inherited from &lt;code&gt;gen_statem&lt;/code&gt;'s predecessor &lt;code&gt;gen_fsm&lt;/code&gt;, is an event time-out, that is, if an event arrives the timer is cancelled. You get either an event or a time-out, but not both.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; の前身である &lt;code&gt;gen_fsm&lt;/code&gt; から継承されたタイムアウト機能は、イベントタイムアウトです。つまり、イベントが到着すると、タイマーがキャンセルされます。イベントまたはタイムアウトのいずれかを取得しますが、両方は取得しません。</target>
        </trans-unit>
        <trans-unit id="e4e7c858b3f4a06a0ae20e24345812eb57867da0" translate="yes" xml:space="preserve">
          <source>A time-out value of &lt;code&gt;0&lt;/code&gt; (zero) means that time-outs are disabled. Calling a &lt;code&gt;_tmo&lt;/code&gt; function with the last argument as &lt;code&gt;0&lt;/code&gt; is therefore the same thing as calling the function without the &lt;code&gt;_tmo&lt;/code&gt; suffix.</source>
          <target state="translated">タイムアウト値 &lt;code&gt;0&lt;/code&gt; （ゼロ）は、タイムアウトが無効であることを意味します。呼び出し &lt;code&gt;_tmo&lt;/code&gt; のよう最後の引数を持つ関数を &lt;code&gt;0&lt;/code&gt; がゆえせずに関数を呼び出すことと同じことである &lt;code&gt;_tmo&lt;/code&gt; のサフィックス。</target>
        </trans-unit>
        <trans-unit id="e51396500c23760a237e8c8ce1759124abbdb2b6" translate="yes" xml:space="preserve">
          <source>A timeout, in seconds, for how long the &lt;code&gt;memsup&lt;/code&gt; process should wait for a result from a memory check. If the timeout expires, a warning message &lt;code&gt;&quot;OS_MON (memsup) timeout&quot;&lt;/code&gt; is issued via &lt;code&gt;error_logger&lt;/code&gt; and any pending, synchronous client calls will return a dummy value. Normally, this situation should not occur. There have been cases on Linux, however, where the pseudo file from which system data is read is temporarily unavailable when the system is heavily loaded.</source>
          <target state="translated">&lt;code&gt;memsup&lt;/code&gt; プロセスがメモリチェックの結果を待つ時間（秒単位）。タイムアウトの期限が切れると、 &lt;code&gt;error_logger&lt;/code&gt; を介して警告メッセージ &lt;code&gt;&quot;OS_MON (memsup) timeout&quot;&lt;/code&gt; が発行され、保留中の同期クライアント呼び出しはダミー値を返します。通常、この状況は発生しません。ただし、Linuxでは、システムの負荷が高いときに、システムデータの読み取り元の疑似ファイルが一時的に利用できない場合がありました。</target>
        </trans-unit>
        <trans-unit id="68ff3c996ac6d98f27aaaac3ca2c11d67e8039ea" translate="yes" xml:space="preserve">
          <source>A timer can always be removed by calling &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイマーは、いつでも &lt;code&gt;&lt;a href=&quot;#cancel-1&quot;&gt;cancel/1&lt;/a&gt;&lt;/code&gt; を呼び出すことで削除できます。</target>
        </trans-unit>
        <trans-unit id="726a053f638d7072079d375380c92439b2bbdb5e" translate="yes" xml:space="preserve">
          <source>A timer reference.</source>
          <target state="translated">タイマーリファレンスです。</target>
        </trans-unit>
        <trans-unit id="fb8ee6e4fe82a072a334ccee3c68e3012d95b6b8" translate="yes" xml:space="preserve">
          <source>A timestamp produced with &lt;code&gt;&lt;a href=&quot;#timestamp-0&quot;&gt; logger:timestamp()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#timestamp-0&quot;&gt; logger:timestamp()&lt;/a&gt;&lt;/code&gt; で生成されたタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="94ea6da4ccb85a54c3d9ad09e70c59b90ddafcec" translate="yes" xml:space="preserve">
          <source>A timestamp produced with &lt;code&gt;erlang:system_time(microsecond)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:system_time(microsecond)&lt;/code&gt; で生成されたタイムスタンプ。</target>
        </trans-unit>
        <trans-unit id="224b47a99ccb8f9ad2636eb28064f8326a8f1842" translate="yes" xml:space="preserve">
          <source>A timetrap can also be set or reset dynamically during the execution of a test case, or configuration function. This is done by calling &lt;code&gt;&lt;a href=&quot;ct#timetrap-1&quot;&gt;ct:timetrap/1&lt;/a&gt;&lt;/code&gt;. This function cancels the current timetrap and starts a new one (that stays active until time-out, or end of the current function).</source>
          <target state="translated">タイムトラップは、テストケースまたは構成機能の実行中に動的に設定またはリセットすることもできます。これは、 &lt;code&gt;&lt;a href=&quot;ct#timetrap-1&quot;&gt;ct:timetrap/1&lt;/a&gt;&lt;/code&gt; を呼び出すことによって行われます。この関数は、現在のタイムトラップをキャンセルして新しいタイムトラップを開始します（タイムアウトになるか、現在の関数が終了するまでアクティブのままです）。</target>
        </trans-unit>
        <trans-unit id="8f213ae236a5f4c3df724a5656b6f24789d1f1a8" translate="yes" xml:space="preserve">
          <source>A tool for applying XSLT stylesheets to XML documents. Download xsltproc from &lt;code&gt;&lt;a href=&quot;http://xmlsoft.org/XSLT/xsltproc2.html&quot;&gt;http://xmlsoft.org/XSLT/xsltproc2.html&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">XSLTスタイルシートをXMLドキュメントに適用するためのツール。xsltprocを &lt;code&gt;&lt;a href=&quot;http://xmlsoft.org/XSLT/xsltproc2.html&quot;&gt;http://xmlsoft.org/XSLT/xsltproc2.html&lt;/a&gt;&lt;/code&gt; からダウンロードします。</target>
        </trans-unit>
        <trans-unit id="08f1e7c2bddf5c69b2f61fa1070545348579586c" translate="yes" xml:space="preserve">
          <source>A trace port is an Erlang port to a dynamically linked in driver that handles trace messages directly, without the overhead of sending them as messages in the Erlang virtual machine.</source>
          <target state="translated">トレースポートとは、Erlang仮想マシンでメッセージとして送信するオーバーヘッドなしに、トレースメッセージを直接処理する動的にリンクされたドライバへのErlangポートのことです。</target>
        </trans-unit>
        <trans-unit id="12ee06a6ceec6852b8fcedb1fbb55e6e9c5f6756" translate="yes" xml:space="preserve">
          <source>A trace server started in this way will simply display the trace messages in a formatted way in the Erlang shell (i. e. use io:format). See &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt; for a description of how the trace message handler can be customized.</source>
          <target state="translated">この方法で起動したトレースサーバーは、Erlangシェルでフォーマットされた方法でトレースメッセージを表示するだけです（つまり、io：formatを使用します）。トレースメッセージハンドラーのカスタマイズ方法については、 &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c312d23149bf55415c7facde91760776534bda23" translate="yes" xml:space="preserve">
          <source>A trace token contains a label and a set of flags. Both the label and the flags are set in both alternatives above.</source>
          <target state="translated">トレーストークンはラベルとフラグのセットを含みます。ラベルとフラグは両方とも上記の選択肢で設定されています。</target>
        </trans-unit>
        <trans-unit id="a0a3ada2bd3e540543826094f00fde5f11b86200" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables a strict monotonic timestamp to be generated for each traced event. Default is &lt;code&gt;false&lt;/code&gt;. Timestamps will consist of &lt;code&gt;Erlang monotonic time&lt;/code&gt; and a monotonically increasing integer. The time-stamp has the same format and value as produced by &lt;code&gt;{erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])}&lt;/code&gt;.</source>
          <target state="translated">トレースされたイベントごとに生成される厳密な単調なタイムスタンプを有効/無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。タイムスタンプは、 &lt;code&gt;Erlang monotonic time&lt;/code&gt; と単調に増加する整数で構成されます。タイムスタンプの形式と値は、 &lt;code&gt;{erlang:monotonic_time(nanosecond), erlang:unique_integer([monotonic])}&lt;/code&gt; によって生成されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="60097663814cb4e095c2a6a722349f6b5a5bf437" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables a strict monotonic timestamp to be generated for each traced event. Default is &lt;code&gt;false&lt;/code&gt;. Timestamps will use &lt;code&gt;Erlang monotonic time&lt;/code&gt;. The time-stamp has the same format and value as produced by &lt;code&gt;erlang:monotonic_time(nanosecond)&lt;/code&gt;.</source>
          <target state="translated">トレースされたイベントごとに生成される厳密な単調なタイムスタンプを有効/無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。タイムスタンプは &lt;code&gt;Erlang monotonic time&lt;/code&gt; を使用します。タイムスタンプの形式と値は、 &lt;code&gt;erlang:monotonic_time(nanosecond)&lt;/code&gt; によって生成されるものと同じです。</target>
        </trans-unit>
        <trans-unit id="82d8ecb25fb90aa7ddd424dd220b83a7b34ebd81" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables a timestamp to be generated for each traced event. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">トレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）は、トレースされるイベントごとにタイムスタンプの生成を有効または無効にします。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c3e634022f908badf152e1987898bd0b2c230015" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables tracing on explicit calls to &lt;code&gt;seq_trace:print/1&lt;/code&gt;. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seq_trace:print/1&lt;/code&gt; への明示的な呼び出しのトレースを有効または無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f928f7c9e2d7e89a32e5aa2b16d563a9022c4418" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables tracing on information reception. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">情報受信時のトレースを有効/無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="44f03f78eba803fb7a7f1c41468a0fa1580e2a31" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables tracing on information sending. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">情報送信のトレースを有効/無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bde9aedc5e9c949b0aa2b17f37ee8c40d03b21b6" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables tracing on message reception. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">メッセージ受信時のトレースを有効/無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d9c367670f41b59db0e6ecd2630bb172d3da0c69" translate="yes" xml:space="preserve">
          <source>A trace token flag (&lt;code&gt;true | false&lt;/code&gt;) which enables/disables tracing on message sending. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">メッセージ送信時のトレースを有効/無効にするトレーストークンフラグ（ &lt;code&gt;true | false&lt;/code&gt; ）。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bb16a1ee7cb5dc148d050fd7c6dc758d85f029eb" translate="yes" xml:space="preserve">
          <source>A traditional 3-tuple of integers seed is passed through algorithm-dependent hashing functions to create the generator's initial state.</source>
          <target state="translated">伝統的な 3 タプルの整数のシードは、アルゴリズムに依存するハッシュ関数に渡され、ジェネレータの初期状態を作成します。</target>
        </trans-unit>
        <trans-unit id="fef110e2f0ab9e0376d172bcb7bfe8b65a404cd6" translate="yes" xml:space="preserve">
          <source>A transaction system makes it possible to execute two or more processes concurrently that manipulate the same record. The programmer does not need to check that the updates are synchronous; this is overseen by the transaction handler. All programs accessing the database through the transaction system can be written as if they had sole access to the data.</source>
          <target state="translated">トランザクションシステムは、同じレコードを操作する2つ以上のプロセスを同時に実行することを可能にします。プログラマは更新が同期しているかどうかをチェックする必要はありません。トランザクションシステムを介してデータベースにアクセスするすべてのプログラムは、あたかも自分たちだけがデータにアクセスしているかのように書くことができます。</target>
        </trans-unit>
        <trans-unit id="040494e8706d570977340364653c32d0f74758d8" translate="yes" xml:space="preserve">
          <source>A transport can both override its service's capabilities and restrict its supported Diameter applications so &quot;service = Diameter node as identified by Origin-Host&quot; is not necessarily the case.</source>
          <target state="translated">トランスポートは、サービスの機能をオーバーライドすることも、サポートするDiameterアプリケーションを制限することもできるので、「サービス=Diameter node as identified by Origin-Host」が必ずしもそうとは限りません。</target>
        </trans-unit>
        <trans-unit id="023338b0c93aa9ea43a308354e8c6cb312d2e262" translate="yes" xml:space="preserve">
          <source>A transport process can expect messages of the following types from its parent.</source>
          <target state="translated">トランスポートプロセスは、親から以下のタイプのメッセージを期待できる。</target>
        </trans-unit>
        <trans-unit id="c02ea719b68545a61ef8005dfcb9fa67f5f85090" translate="yes" xml:space="preserve">
          <source>A transport process must implement the message interface documented below. It should retain the pid of its parent, monitor the parent and terminate if it dies. It should not link to the parent. It should exit if its transport connection with its peer is lost.</source>
          <target state="translated">トランスポートプロセスは、以下に文書化されたメッセージインターフェースを実装しな ければならない。トランスポートプロセスは親のpidを保持し、親を監視し、親が死んだら終了するべきである。それは親にリンクしてはならない。それは、ピアとのトランスポート接続が失われた場合に終了すべきである。</target>
        </trans-unit>
        <trans-unit id="22cab074839dd6633c044492cf9e00d79ad7b9b9" translate="yes" xml:space="preserve">
          <source>A transport process should send messages of the following types to its parent.</source>
          <target state="translated">トランスポートプロセスは、以下のタイプのメッセージを親に送るべきである。</target>
        </trans-unit>
        <trans-unit id="90161712010dfd82bbaf6035b7ca236a047b2d07" translate="yes" xml:space="preserve">
          <source>A trigger action. When a breakpoint is reached, the trigger action specifies if the breakpoint is to continue as active (&lt;strong&gt;enable&lt;/strong&gt;), or to become inactive (&lt;strong&gt;disable&lt;/strong&gt;), or to be removed (&lt;strong&gt;delete&lt;/strong&gt;).</source>
          <target state="translated">トリガーアクション。ブレークポイントに到達すると、トリガーアクションは、ブレークポイントをアクティブとして続行&lt;strong&gt;する&lt;/strong&gt;か（&lt;strong&gt;enable&lt;/strong&gt;）、非アクティブになるか（&lt;strong&gt;disable&lt;/strong&gt;）、または&lt;strong&gt;削除する&lt;/strong&gt;か（&lt;strong&gt;delete&lt;/strong&gt;）を指定します。</target>
        </trans-unit>
        <trans-unit id="f841f79d498699c727c107e3b0ca4c79fda4714f" translate="yes" xml:space="preserve">
          <source>A true embedded system must start when the system boots. This section accounts for the necessary configurations needed to achieve that.</source>
          <target state="translated">真の組込みシステムは、システムの起動時に起動しなければなりません。このセクションでは、そのために必要な設定を説明します。</target>
        </trans-unit>
        <trans-unit id="1e80ac87b4ba604d5c15b3ca4c06f00704683ae7" translate="yes" xml:space="preserve">
          <source>A tuple &lt;code&gt;{HashAlgoSpec, accept_callback}&lt;/code&gt;. The &lt;code&gt;HashAlgoSpec&lt;/code&gt; specifies which hash algorithm shall be used to calculate the fingerprint used in the call of the &lt;code&gt;accept_callback()&lt;/code&gt;. The &lt;code&gt;HashALgoSpec&lt;/code&gt; is either an atom or a list of atoms as the first argument in &lt;code&gt;public_key:ssh_hostkey_fingerprint/2&lt;/code&gt;. If it is a list of hash algorithm names, the &lt;code&gt;FingerPrint&lt;/code&gt; argument in the &lt;code&gt;accept_callback()&lt;/code&gt; will be a list of fingerprints in the same order as the corresponding name in the &lt;code&gt;HashAlgoSpec&lt;/code&gt; list.</source>
          <target state="translated">タプル &lt;code&gt;{HashAlgoSpec, accept_callback}&lt;/code&gt; 。 &lt;code&gt;HashAlgoSpec&lt;/code&gt; の指紋を計算するために使用されなければならないハッシュアルゴリズムを指定は、の呼び出しに使用 &lt;code&gt;accept_callback()&lt;/code&gt; 。 &lt;code&gt;HashALgoSpec&lt;/code&gt; は、原子または最初の引数としての原子のリストのいずれかである &lt;code&gt;public_key:ssh_hostkey_fingerprint/2&lt;/code&gt; 。それは、ハッシュアルゴリズム名のリストである場合は、 &lt;code&gt;FingerPrint&lt;/code&gt; 内の引数 &lt;code&gt;accept_callback()&lt;/code&gt; 内の対応する名前と同じ順序で指紋のリストになります &lt;code&gt;HashAlgoSpec&lt;/code&gt; のリスト。</target>
        </trans-unit>
        <trans-unit id="cf7e5e9de3bf6f4c7060bdc6cec37d2c3b2e6d0c" translate="yes" xml:space="preserve">
          <source>A tuple &lt;code&gt;{Major,Minor}&lt;/code&gt; containing the major and minor version of the file format for ETS table dumps. This version field was added beginning with STDLIB 1.5.1. Files dumped with older versions return &lt;code&gt;{0,0}&lt;/code&gt; in this field.</source>
          <target state="translated">ETSテーブルダンプのファイル形式のメジャーバージョンとマイナーバージョンを含むタプル &lt;code&gt;{Major,Minor}&lt;/code&gt; 。このバージョンフィールドは、STDLIB 1.5.1以降で追加されました。古いバージョンでダンプされたファイルは、このフィールドに &lt;code&gt;{0,0}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="07bab1189c6299dfc8d87b9698a9d20069024cab" translate="yes" xml:space="preserve">
          <source>A tuple &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; for function calls</source>
          <target state="translated">関数呼び出し用のタプル &lt;code&gt;{Module, Function, Arity}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85c425ef8b5c09edd293415683557a467b94cc4b" translate="yes" xml:space="preserve">
          <source>A tuple &lt;code&gt;{registered_name,node_name}&lt;/code&gt; is used instead of just the &lt;code&gt;registered_name&lt;/code&gt;.</source>
          <target state="translated">タプル &lt;code&gt;{registered_name,node_name}&lt;/code&gt; は、 &lt;code&gt;registered_name&lt;/code&gt; の代わりに使用されます。</target>
        </trans-unit>
        <trans-unit id="8f3f0f1a112bc371fc9fac3b642164488b8dd6fb" translate="yes" xml:space="preserve">
          <source>A tuple &lt;code&gt;{test, ModuleName, FunctionName}&lt;/code&gt;, where &lt;code&gt;ModuleName&lt;/code&gt; and &lt;code&gt;FunctionName&lt;/code&gt; are atoms, referring to the function &lt;code&gt;ModuleName:FunctionName/0&lt;/code&gt;</source>
          <target state="translated">タプル &lt;code&gt;{test, ModuleName, FunctionName}&lt;/code&gt; 。ここで、 &lt;code&gt;ModuleName&lt;/code&gt; および &lt;code&gt;FunctionName&lt;/code&gt; はアトムであり、関数 &lt;code&gt;ModuleName:FunctionName/0&lt;/code&gt; を参照します。</target>
        </trans-unit>
        <trans-unit id="7faaaea4addaa524ef387ae744a4927d4b84f230" translate="yes" xml:space="preserve">
          <source>A tuple is a compound data type with a fixed number of terms:</source>
          <target state="translated">タプルは、固定の項数を持つ複合データ型です。</target>
        </trans-unit>
        <trans-unit id="df982bb074bb2bcc07a3f3574312720f45bcca1f" translate="yes" xml:space="preserve">
          <source>A tuple must be specified with the number of elements. (The elements precede the &lt;code&gt;ERL_DRV_TUPLE&lt;/code&gt; term.)</source>
          <target state="translated">タプルは要素数で指定する必要があります。（要素は &lt;code&gt;ERL_DRV_TUPLE&lt;/code&gt; 用語の前にあります。）</target>
        </trans-unit>
        <trans-unit id="694f68c6889d3f88be664ff0fedc1704129e38dd" translate="yes" xml:space="preserve">
          <source>A tuple of a size equal to &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt; erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; is returned. The tuple elements are integers or the atom &lt;code&gt;unbound&lt;/code&gt;. Logical processor identifiers are represented as integers. The &lt;code&gt;N&lt;/code&gt;th element of the tuple equals the current binding for the scheduler with the scheduler identifier equal to &lt;code&gt;N&lt;/code&gt;. For example, if the schedulers are bound, &lt;code&gt;element(erlang:system_info(scheduler_id), erlang:system_info(scheduler_bindings))&lt;/code&gt; returns the identifier of the logical processor that the calling process is executing on.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt; erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; に等しいサイズのタプルが返されます。タプル要素は整数またはアトム &lt;code&gt;unbound&lt;/code&gt; です。論理プロセッサ識別子は整数として表されます。タプルの &lt;code&gt;N&lt;/code&gt; 番目の要素は、スケジューラーIDが &lt;code&gt;N&lt;/code&gt; に等しいスケジューラーの現在のバインディングに等しくなります。たとえば、スケジューラーがバインドされている場合、 &lt;code&gt;element(erlang:system_info(scheduler_id), erlang:system_info(scheduler_bindings))&lt;/code&gt; は、呼び出しプロセスが実行されている論理プロセッサーのIDを返します。</target>
        </trans-unit>
        <trans-unit id="d813ebdb5f103f06a944c56ba2c1950a8ea79499" translate="yes" xml:space="preserve">
          <source>A tuple of a size equal to &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; is returned. The tuple elements are integers or the atom &lt;code&gt;unbound&lt;/code&gt;. Logical processor identifiers are represented as integers. The &lt;code&gt;N&lt;/code&gt;th element of the tuple equals the current binding for the scheduler with the scheduler identifier equal to &lt;code&gt;N&lt;/code&gt;. For example, if the schedulers are bound, &lt;code&gt;element(erlang:system_info(scheduler_id), erlang:system_info(scheduler_bindings))&lt;/code&gt; returns the identifier of the logical processor that the calling process is executing on.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; に等しいサイズのタプルが返されます。タプル要素は整数またはアトム &lt;code&gt;unbound&lt;/code&gt; です。論理プロセッサーIDは整数として表されます。タプルの &lt;code&gt;N&lt;/code&gt; 番目の要素は、スケジューラIDが &lt;code&gt;N&lt;/code&gt; であるスケジューラの現在のバインディングと同じです。たとえば、スケジューラがバインドされている場合、 &lt;code&gt;element(erlang:system_info(scheduler_id), erlang:system_info(scheduler_bindings))&lt;/code&gt; は、呼び出しプロセスが実行されている論理プロセッサの識別子を返します。</target>
        </trans-unit>
        <trans-unit id="810d5b526b8906970f984c1b3db62a6c47f80147" translate="yes" xml:space="preserve">
          <source>A tuple of size three containing: the segment number, the &lt;code&gt;last segment indicator&lt;/code&gt; and finally a list of 'ActionReply' records possibly containing error indications. This is of course only possible if the reply was segmented.</source>
          <target state="translated">サイズ3のタプルには、セグメント番号、 &lt;code&gt;last segment indicator&lt;/code&gt; 、最後に「ActionReply」レコードのリストが含まれ、エラーの表示が含まれる可能性があります。もちろん、これは応答がセグメント化されている場合にのみ可能です。</target>
        </trans-unit>
        <trans-unit id="3dd7bc1a3405fbef606b572d8949507a33cc4df9" translate="yes" xml:space="preserve">
          <source>A tuple of the bindings and a continuation is returned, unless the table is empty, in which case &lt;code&gt;'$end_of_table'&lt;/code&gt; is returned. The continuation is to be used when matching further objects by calling &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">バインディングと継続のタプルが返されます。ただし、テーブルが空の場合を除きます。この場合、 &lt;code&gt;'$end_of_table'&lt;/code&gt; が返されます。継続は、 &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt; を呼び出してさらにオブジェクトを照合するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="6c722068339f5605671934079ecb1e3f17e82123" translate="yes" xml:space="preserve">
          <source>A tuple of the results of applying the match specification and a continuation is returned, unless the table is empty, in which case &lt;code&gt;'$end_of_table'&lt;/code&gt; is returned. The continuation is to be used when matching more objects by calling &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルが空でない場合を除いて、一致指定と継続の適用結果のタプルが返されます。テーブルが空の場合、 &lt;code&gt;'$end_of_table'&lt;/code&gt; が返されます。継続は、 &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; を呼び出してより多くのオブジェクトを照合するときに使用されます。</target>
        </trans-unit>
        <trans-unit id="24035af62a2fdeb2d8901fd0ee530961ccde951f" translate="yes" xml:space="preserve">
          <source>A tuple passed using the external format of Erlang.</source>
          <target state="translated">Erlangの外部フォーマットを使って渡されるタプル。</target>
        </trans-unit>
        <trans-unit id="8690cf67b400404bcc0f4ff1dceb7bb83944c22f" translate="yes" xml:space="preserve">
          <source>A tuple where the elements are of type &lt;code&gt;T&lt;/code&gt;.</source>
          <target state="translated">要素が &lt;code&gt;T&lt;/code&gt; 型であるタプル。</target>
        </trans-unit>
        <trans-unit id="b4c3a805c0c5a81f38e677fa3cd9def6b983c21d" translate="yes" xml:space="preserve">
          <source>A tuple with the string and the options for compilation</source>
          <target state="translated">文字列とコンパイル用のオプションを持つタプル</target>
        </trans-unit>
        <trans-unit id="151bd15a2cb84f42df927246cfbe8c0dd7313819" translate="yes" xml:space="preserve">
          <source>A type specifier list TSL for a bitstring element is a sequence of type specifiers &lt;code&gt;TS_1 - ... - TS_k&lt;/code&gt;, and Rep(TSL) = &lt;code&gt;[Rep(TS_1), ..., Rep(TS_k)]&lt;/code&gt;.</source>
          <target state="translated">ビット文字列要素の型指定子リストTSLは、型指定子 &lt;code&gt;TS_1 - ... - TS_k&lt;/code&gt; 、およびRep（TSL）= &lt;code&gt;[Rep(TS_1), ..., Rep(TS_k)]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="08976fc5cbfe03343391c63ca50f5f50c10b8d0b" translate="yes" xml:space="preserve">
          <source>A typical (compress) usage is as follows:</source>
          <target state="translated">典型的な(圧縮された)使い方は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="126a0170061e6a79a71ccf9406ef6f3af55349d4" translate="yes" xml:space="preserve">
          <source>A typical &lt;code&gt;.erlang&lt;/code&gt; file contains a set of search paths, for example:</source>
          <target state="translated">典型的な &lt;code&gt;.erlang&lt;/code&gt; ファイルには、次のような一連の検索パスが含まれています。</target>
        </trans-unit>
        <trans-unit id="72082aa56cd4d1e59057d7f28996bf925833376c" translate="yes" xml:space="preserve">
          <source>A typical &lt;code&gt;Common Test&lt;/code&gt; test suite using &lt;code&gt;ct_property_test&lt;/code&gt; is organized as follows:</source>
          <target state="translated">&lt;code&gt;ct_property_test&lt;/code&gt; を使用した &lt;code&gt;Common Test&lt;/code&gt; 的なCommon Testテストスイートは、次のように構成されています。</target>
        </trans-unit>
        <trans-unit id="6ef96d247bf0039ba1ccb9fddcabd0176ac0a0c3" translate="yes" xml:space="preserve">
          <source>A typical error reason is:</source>
          <target state="translated">典型的なエラー理由は</target>
        </trans-unit>
        <trans-unit id="05d8d9f5d6888b35439d18b6e544520b23957a25" translate="yes" xml:space="preserve">
          <source>A typical error reason:</source>
          <target state="translated">典型的なエラー理由。</target>
        </trans-unit>
        <trans-unit id="9061494e205704eb0cdfcf7a4c046c23d96666b9" translate="yes" xml:space="preserve">
          <source>A typical implementation on Unix is to do &lt;code&gt;close((int)event)&lt;/code&gt;.</source>
          <target state="translated">Unixでの一般的な実装は、 &lt;code&gt;close((int)event)&lt;/code&gt; を実行することです。</target>
        </trans-unit>
        <trans-unit id="541396ef46ffec4bf5fa435c55b2863004f29300" translate="yes" xml:space="preserve">
          <source>A typical operation could include the following steps:</source>
          <target state="translated">典型的な操作は、以下のステップを含むことができます。</target>
        </trans-unit>
        <trans-unit id="50f89c2180f830349252137c0faf845e512001e7" translate="yes" xml:space="preserve">
          <source>A typical overload situation occurs when the applications perform more updates on disc resident tables than &lt;code&gt;Mnesia&lt;/code&gt; can handle. Ignoring this kind of overload can lead to a situation where the disc space is exhausted (regardless of the size of the tables stored on disc).</source>
          <target state="translated">典型的な過負荷状態は、アプリケーションが &lt;code&gt;Mnesia&lt;/code&gt; が処理できるよりも多くの更新をディスク常駐テーブルで実行するときに発生します。この種類の過負荷を無視すると、ディスクに保存されているテーブルのサイズに関係なく、ディスク領域が使い果たされる状況が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="acb703e9dec014081d4b1835cb51aaeb3d0b76b2" translate="yes" xml:space="preserve">
          <source>A typical use of this function is to replace unbounded-size control sequences like &lt;code&gt;~w&lt;/code&gt; and &lt;code&gt;~p&lt;/code&gt; with the depth-limited variants &lt;code&gt;~W&lt;/code&gt; and &lt;code&gt;~P&lt;/code&gt; before formatting to text in, for example, a logger.</source>
          <target state="translated">この機能の一般的な使用は次のように無制限サイズの制御シーケンスを交換することである &lt;code&gt;~w&lt;/code&gt; と &lt;code&gt;~p&lt;/code&gt; 深さが制限された変種で &lt;code&gt;~W&lt;/code&gt; 及び &lt;code&gt;~P&lt;/code&gt; 、例えば、テキストにロガーをフォーマットする前に。</target>
        </trans-unit>
        <trans-unit id="3807873b97b8b82278afb2ef76e8ea8f9bb29594" translate="yes" xml:space="preserve">
          <source>A unique identifier for a filter.</source>
          <target state="translated">フィルタの一意の識別子。</target>
        </trans-unit>
        <trans-unit id="aeb6160c71f6b3c49b7dc45e065a90d43611f9a7" translate="yes" xml:space="preserve">
          <source>A unique identifier for a handler instance.</source>
          <target state="translated">ハンドラインスタンスの一意の識別子。</target>
        </trans-unit>
        <trans-unit id="35c6d039fac0be1661199d1ae0d64a6d99224787" translate="yes" xml:space="preserve">
          <source>A useful dispatch function that can be used from client functions. It returns a process on the local node, if such a process exists. Otherwise, it selects one randomly.</source>
          <target state="translated">クライアント関数から利用できる便利なディスパッチ関数です。ローカルノード上にプロセスが存在する場合,そのプロセスを返します.そうでなければ,ランダムにプロセスを選択します.</target>
        </trans-unit>
        <trans-unit id="f5bfc38acae2f40bfaee12c264aaf4416d8847f9" translate="yes" xml:space="preserve">
          <source>A useful number.</source>
          <target state="translated">役に立つ数字。</target>
        </trans-unit>
        <trans-unit id="5f280d2fcfe90c0ab1a22509cb3602587fb270ec" translate="yes" xml:space="preserve">
          <source>A useful way of looking at parts of lists, is by using &quot;|&quot;. This is best explained by an example using the shell:</source>
          <target state="translated">リストの一部を見るのに便利な方法は、&quot;|&quot;を使うことです。これはシェルを使った例で説明するのが一番です。</target>
        </trans-unit>
        <trans-unit id="14fd4e6872c372a6c8cb217dbc2352699bd53754" translate="yes" xml:space="preserve">
          <source>A user defined identity representing this notification send operation.</source>
          <target state="translated">この通知送信操作を表すユーザー定義の ID。</target>
        </trans-unit>
        <trans-unit id="2a353ec2b424bd07df4385f13b10e3ea7d64ca54" translate="yes" xml:space="preserve">
          <source>A user is being blocked from access.</source>
          <target state="translated">ユーザーがアクセスをブロックされています。</target>
        </trans-unit>
        <trans-unit id="0c5079fbb762cb2270895845abfb45816e3f4e3e" translate="yes" xml:space="preserve">
          <source>A user is being removed from the block list.</source>
          <target state="translated">ユーザーがブロックリストから削除されています。</target>
        </trans-unit>
        <trans-unit id="101ba63129c1dab0968eb1083541b31cda478b02" translate="yes" xml:space="preserve">
          <source>A user is identified by its UserMid, which must be a legal Megaco MID.</source>
          <target state="translated">ユーザーはそのUserMidによって識別されますが、これは合法的なMegaco MIDでなければなりません。</target>
        </trans-unit>
        <trans-unit id="fd3a9f3997e885cf7dcc7677ac20d4c9631d90cc" translate="yes" xml:space="preserve">
          <source>A user may either be statically configured in a .config file according to the application concept of Erlang/OTP or dynamically started with the configuration settings as arguments to megaco:start_user/2. These configuration settings may be updated later on with megaco:update_conn_info/2.</source>
          <target state="translated">ユーザはErlang/OTPのアプリケーションコンセプトにしたがって.configファイルに静的に設定するか、megaco:start_user/2の引数として設定した設定で動的に起動します。 これらの設定は後でmegaco:update_conn_info/2で更新することができます。</target>
        </trans-unit>
        <trans-unit id="1504430f3d4afc3f6c812eb47a15e10f01419f56" translate="yes" xml:space="preserve">
          <source>A user may have a number of &quot;virtual&quot; connections to other users. An MG is connected to at most one MGC, while an MGC may be connected to any number of MG's. For each connection the user selects a transport service, an encoding scheme and a user callback module.</source>
          <target state="translated">一人のユーザは、他のユーザとの「仮想的な」接続をいくつも有していてもよい。1つのMGは最大1つのMGCに接続されていますが、1つのMGCは任意の数のMGに接続することができます。各接続に対して、ユーザはトランスポートサービス、符号化方式、ユーザコールバックモジュールを選択します。</target>
        </trans-unit>
        <trans-unit id="e67f458b7905dc65a23e9c34758bfcdd553eff54" translate="yes" xml:space="preserve">
          <source>A user process can subscribe on the events generated by &lt;code&gt;Mnesia&lt;/code&gt;. The following two functions are provided:</source>
          <target state="translated">ユーザープロセスは、 &lt;code&gt;Mnesia&lt;/code&gt; によって生成されたイベントをサブスクライブできます。次の2つの機能が提供されます。</target>
        </trans-unit>
        <trans-unit id="a930c1684ddd9a6efd75c38df17f190cbc0c2e7d" translate="yes" xml:space="preserve">
          <source>A user variable is employed for holding the &lt;code&gt;digraph&lt;/code&gt; representation of the function graph for use in many queries. The reason is efficiency. As opposed to the &lt;code&gt;=&lt;/code&gt; operator, the &lt;code&gt;:=&lt;/code&gt; operator saves a value for subsequent analyses. Here might be the place to note that equal subexpressions within a query are evaluated only once; &lt;code&gt;=&lt;/code&gt; cannot be used for speeding things up.</source>
          <target state="translated">ユーザー変数は、多くのクエリで使用する関数グラフの &lt;code&gt;digraph&lt;/code&gt; 表現を保持するために使用されます。その理由は効率です。 &lt;code&gt;=&lt;/code&gt; 演算子とは対照的に、 &lt;code&gt;:=&lt;/code&gt; 演算子は後続の分析のために値を保存します。クエリ内の等しい部分式は1回だけ評価されることに注意してください。 &lt;code&gt;=&lt;/code&gt; 高速化には使用できません。</target>
        </trans-unit>
        <trans-unit id="5dca3db2b5e814aa2f8b6c5ddad967e0eb6d4fd1" translate="yes" xml:space="preserve">
          <source>A user-defined instrumentation function for each object attaches the managed objects to real resources. This function is called by the agent on a &lt;code&gt;get&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt; operation. The function could read some hardware register, perform a calculation, or whatever is necessary to implement the semantics associated with the conceptual variable. These functions must be written both for scalar variables and for tables. They are specified in the association file, which is a text file. In this file, the &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt;, or symbolic name for each managed object, is associated with an Erlang tuple &lt;code&gt;{Module,&lt;/code&gt;&lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;ListOfExtraArguments}&lt;/code&gt;.</source>
          <target state="translated">各オブジェクトのユーザー定義の計測機能は、管理対象オブジェクトを実際のリソースにアタッチします。この関数は、 &lt;code&gt;get&lt;/code&gt; または &lt;code&gt;set&lt;/code&gt; 操作でエージェントによって呼び出されます。関数は、一部のハードウェアレジスタを読み取ったり、計算を実行したり、概念変数に関連付けられたセマンティクスを実装するために必要なものを実行したりできます。これらの関数は、スカラー変数とテーブルの両方に対して作成する必要があります。それらはテキストファイルである関連付けファイルで指定されます。このファイルでは、 &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; 、または各管理対象オブジェクトのシンボル名が、Erlangタプル &lt;code&gt;{Module,&lt;/code&gt; &lt;code&gt;Function&lt;/code&gt; 、 &lt;code&gt;ListOfExtraArguments}&lt;/code&gt; に関連付けられています。</target>
        </trans-unit>
        <trans-unit id="3c4272ec5ada9781d28edc9d23bde5292b08de6e" translate="yes" xml:space="preserve">
          <source>A user-defined parameter passed from the function &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt;. It is used in the return value of &lt;code&gt;&lt;a href=&quot;release_handler#install_release-1&quot;&gt;release_handler:install_release/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt; から渡されるユーザー定義のパラメーター。 &lt;code&gt;&lt;a href=&quot;release_handler#install_release-1&quot;&gt;release_handler:install_release/1,2&lt;/a&gt;&lt;/code&gt; の戻り値で使用されます。</target>
        </trans-unit>
        <trans-unit id="ab19e68c658754f6d616e8a9359af12c979f8b2d" translate="yes" xml:space="preserve">
          <source>A user-perceived character, consisting of one or more codepoints.</source>
          <target state="translated">1つ以上のコードポイントで構成された、ユーザーが認識した文字。</target>
        </trans-unit>
        <trans-unit id="b6da77940e722515281bb6aabce021b2bbcff9af" translate="yes" xml:space="preserve">
          <source>A valid chain must have at least a ROOT and a peer cert. The root cert can be given either as a cert pre-generated by &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt; pkix_test_root_cert/2 &lt;/a&gt;&lt;/code&gt;, or as root cert generation options.    A root certificate generated by &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt; pkix_test_root_cert/2 &lt;/a&gt;&lt;/code&gt;.   For available options see &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt; cert_opt()&lt;/a&gt;&lt;/code&gt; below.    This is a subset of the type &lt;code&gt; ssl:tls_option()&lt;/code&gt;. &lt;code&gt;PrivateKey&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt; returns.</source>
          <target state="translated">有効なチェーンには、少なくともROOTとピア証明書が必要です。ルート証明書は、 &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt; pkix_test_root_cert/2 &lt;/a&gt;&lt;/code&gt; によって事前に生成された証明書として、またはルート証明書生成オプションとして指定できます。 &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt; pkix_test_root_cert/2 &lt;/a&gt;&lt;/code&gt; によって生成されたルート証明書。使用可能なオプションについては、以下の &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt; cert_opt()&lt;/a&gt;&lt;/code&gt; を参照してください。これは、タイプ &lt;code&gt; ssl:tls_option()&lt;/code&gt; のサブセットです。 &lt;code&gt;PrivateKey&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt; が返すものです。</target>
        </trans-unit>
        <trans-unit id="8c487c4839c1da9e5bc76ca352a5448a09547f8c" translate="yes" xml:space="preserve">
          <source>A valid chain must have at least a ROOT and a peer cert. The root cert can be given either as a cert pre-generated by &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt;pkix_test_root_cert/2&lt;/a&gt;&lt;/code&gt;, or as root cert generation options.    A root certificate generated by &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt;pkix_test_root_cert/2&lt;/a&gt;&lt;/code&gt;.   For available options see &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt;cert_opt()&lt;/a&gt;&lt;/code&gt; below.    This is a subset of the type &lt;code&gt;ssl:ssl_option()&lt;/code&gt;. &lt;code&gt;PrivateKey&lt;/code&gt; is what &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt; returns.</source>
          <target state="translated">有効なチェーンには、少なくともROOTとピア証明書が必要です。ルート証明書は、 &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt;pkix_test_root_cert/2&lt;/a&gt;&lt;/code&gt; によって事前に生成された証明書として、またはルート証明書生成オプションとして指定できます。 &lt;code&gt;&lt;a href=&quot;#pkix_test_root_cert-2&quot;&gt;pkix_test_root_cert/2&lt;/a&gt;&lt;/code&gt; によって生成されたルート証明書。利用可能なオプションについては、以下の &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt;cert_opt()&lt;/a&gt;&lt;/code&gt; を参照してください。これは &lt;code&gt;ssl:ssl_option()&lt;/code&gt; 型のサブセットです。 &lt;code&gt;PrivateKey&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt; が返すものです。</target>
        </trans-unit>
        <trans-unit id="d8b7f3becec263c2ea738b6691bf529e9d0210ac" translate="yes" xml:space="preserve">
          <source>A value &lt;code&gt;!= 0&lt;/code&gt; if the runtime system has SMP support; otherwise &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">ランタイムシステムにSMPサポートがある場合、値 &lt;code&gt;!= 0&lt;/code&gt; 。それ以外の場合は &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6ac91e865bee333c1075b80d53873b9d3418a7c3" translate="yes" xml:space="preserve">
          <source>A value &lt;code&gt;!= 0&lt;/code&gt; if the runtime system has support for dirty scheduler threads; otherwise &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">ランタイムシステムがダーティスケジューラスレッドをサポートしている場合、値 &lt;code&gt;!= 0&lt;/code&gt; 。それ以外の場合は &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ec437d87d8ab2a59f963ce8195782385431267f" translate="yes" xml:space="preserve">
          <source>A value &lt;code&gt;!= 0&lt;/code&gt; if the runtime system has thread support; otherwise &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">ランタイムシステムにスレッドサポートがある場合、値 &lt;code&gt;!= 0&lt;/code&gt; 。それ以外の場合は &lt;code&gt;0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d4ba959b8daba0b753bc8f2d86eb3f9db8c6578e" translate="yes" xml:space="preserve">
          <source>A value in the &lt;code&gt;msg&lt;/code&gt; field does &lt;strong&gt;not&lt;/strong&gt; imply an absence of decode errors. The &lt;code&gt;errors&lt;/code&gt; field should also be examined.</source>
          <target state="translated">&lt;code&gt;msg&lt;/code&gt; フィールドの値は、デコードエラーが&lt;strong&gt;ない&lt;/strong&gt;ことを意味するものではありませ&lt;strong&gt;ん&lt;/strong&gt;。 &lt;code&gt;errors&lt;/code&gt; フィールドも検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="24b9fc9ee791392b2ee5f6e020d0a3fa901804d7" translate="yes" xml:space="preserve">
          <source>A value must be provided for all variables, which lack default values in the MIB.</source>
          <target state="translated">MIB のデフォルト値を持たないすべての変数に値を与えなければなりません。</target>
        </trans-unit>
        <trans-unit id="c6977869e984d6fd810d1cba7c1d446b28da9624" translate="yes" xml:space="preserve">
          <source>A value must have length at least 1.</source>
          <target state="translated">値の長さは1以上でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5445236ba06b6cb9e9bcd38ff5b377fb1c4caffb" translate="yes" xml:space="preserve">
          <source>A value of this type is encoded as an &lt;code&gt;open type&lt;/code&gt;.</source>
          <target state="translated">このタイプの値は、 &lt;code&gt;open type&lt;/code&gt; としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="c03ee0717973a910f7c750d1a0679fb27eb9cdb9" translate="yes" xml:space="preserve">
          <source>A variable cannot be assigned a new value unless first removed. Variables assigned to by the &lt;code&gt;=&lt;/code&gt; operator are removed at the end of the query, while variables assigned to by the &lt;code&gt;:=&lt;/code&gt; operator can only be removed by calls to &lt;code&gt;forget&lt;/code&gt;. There are no user variables when module data need to be set up again; if any of the functions that make it necessary to set up module data again is called, all user variables are forgotten.</source>
          <target state="translated">最初に削除しない限り、変数に新しい値を割り当てることはできません。 &lt;code&gt;=&lt;/code&gt; 演算子によって割り当てられた変数はクエリの最後で削除されますが、 &lt;code&gt;:=&lt;/code&gt; 演算子によって割り当てられた変数は &lt;code&gt;forget&lt;/code&gt; の呼び出しによってのみ削除できます。モジュールデータを再度セットアップする必要がある場合、ユーザー変数はありません。モジュールデータを再度セットアップする必要がある関数のいずれかが呼び出されると、すべてのユーザー変数が忘れられます。</target>
        </trans-unit>
        <trans-unit id="cebe1918886957c15927cc44d43277357c762515" translate="yes" xml:space="preserve">
          <source>A variable definition binds a variable to a Perl variable. It is only meaningful to add a new definition if &lt;strong&gt;beam_makeops&lt;/strong&gt; is updated at the same time to use the variable. A variable definition looks this:</source>
          <target state="translated">変数定義は、変数をPerl変数にバインドします。変数を使用するために&lt;strong&gt;beam_makeops&lt;/strong&gt;が同時に更新される場合にのみ、新しい定義を追加することは意味があります。変数定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="5646fa290bab26490d3e95c3eda24f90bfb3cb85" translate="yes" xml:space="preserve">
          <source>A variable is an expression. If a variable is bound to a value, the return value is this value. Unbound variables are only allowed in patterns.</source>
          <target state="translated">変数は式です。変数が値にバインドされている場合、戻り値はこの値になります。束縛されていない変数は、パターンでのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="ad98bc5cb949befd1ed83fe57c5fe19294f99fe2" translate="yes" xml:space="preserve">
          <source>A variable name that is not in the environment results in an error.</source>
          <target state="translated">環境にない変数名はエラーになります。</target>
        </trans-unit>
        <trans-unit id="d4d78baa7493d760df88a559b3a2f6209c0e9bbb" translate="yes" xml:space="preserve">
          <source>A variant of this is to use a &lt;code&gt;&lt;a href=&quot;#Complex%20State&quot;&gt;Complex State&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;#One%20Event%20Handler&quot;&gt;One Event Handler&lt;/a&gt;&lt;/code&gt;. The state is then modeled with for example a tuple &lt;code&gt;{MainFSMState,SubFSMState}&lt;/code&gt;.</source>
          <target state="translated">これの変形は、 &lt;code&gt;&lt;a href=&quot;#One%20Event%20Handler&quot;&gt;One Event Handler&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#Complex%20State&quot;&gt;Complex State&lt;/a&gt;&lt;/code&gt; を使用することです。次に、状態は例えばタプル &lt;code&gt;{MainFSMState,SubFSMState}&lt;/code&gt; モデル化されます。</target>
        </trans-unit>
        <trans-unit id="bde8699f3ff9312f778d465383636d7d89e8acf7" translate="yes" xml:space="preserve">
          <source>A variant of this is to use a &lt;code&gt;&lt;a href=&quot;#Complex%20State&quot;&gt;complex state&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;#One%20State%20Callback&quot;&gt;&lt;strong&gt;one state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;. The state is then modeled with for example a tuple &lt;code&gt;{MainFSMState,SubFSMState}&lt;/code&gt;.</source>
          <target state="translated">これの変形は、 &lt;code&gt;&lt;a href=&quot;#One%20State%20Callback&quot;&gt;&lt;strong&gt;one state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#Complex%20State&quot;&gt;complex state&lt;/a&gt;&lt;/code&gt; を使用することです。次に、状態は、たとえばタプル &lt;code&gt;{MainFSMState,SubFSMState}&lt;/code&gt; モデル化されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="d89b8938a6cae035d7fea046259542e22b9f6ee1" translate="yes" xml:space="preserve">
          <source>A web server can be configured to start when starting the &lt;code&gt;Inets&lt;/code&gt; application, or dynamically in runtime by calling the &lt;code&gt;Inets&lt;/code&gt; application API &lt;code&gt;inets:start(httpd, ServiceConfig)&lt;/code&gt; or &lt;code&gt;inets:start(httpd, ServiceConfig, How)&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;inets&quot;&gt;inets(3)&lt;/a&gt;&lt;/code&gt;. The configuration options, also called properties, are as follows:</source>
          <target state="translated">Webサーバーは、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションの起動時に起動するように、または &lt;code&gt;Inets&lt;/code&gt; アプリケーションAPI &lt;code&gt;inets:start(httpd, ServiceConfig)&lt;/code&gt; または &lt;code&gt;inets:start(httpd, ServiceConfig, How)&lt;/code&gt; 呼び出して実行時に動的に起動するように構成できます &lt;code&gt;&lt;a href=&quot;inets&quot;&gt;inets(3)&lt;/a&gt;&lt;/code&gt; 参照してください。プロパティとも呼ばれる構成オプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b7054606b43999cf69240d9ae96069173e833e99" translate="yes" xml:space="preserve">
          <source>A word boundary is a position in the subject string where the current character and the previous character do not both match \w or \W (that is, one matches \w and the other matches \W), or the start or end of the string if the first or last character matches \w, respectively. In UTF mode, the meanings of \w and \W can be changed by setting option &lt;code&gt;ucp&lt;/code&gt;. When this is done, it also affects \b and \B. PCRE and Perl do not have a separate &quot;start of word&quot; or &quot;end of word&quot; metasequence. However, whatever follows \b normally determines which it is. For example, the fragment \ba matches &quot;a&quot; at the start of a word.</source>
          <target state="translated">単語の境界は、現在の文字と前の文字の両方が\ wまたは\ Wに一致しない（つまり、1つが\ wに一致し、もう1つが\ Wに一致する）か、または最初または最後の文字がそれぞれ\ wと一致する場合の文字列。 UTFモードでは、オプション &lt;code&gt;ucp&lt;/code&gt; を設定することにより、\ wおよび\ Wの意味を変更できます。これが行われると、\ bと\ Bにも影響します。 PCREとPerlには、個別の「単語の始まり」または「単語の終わり」のメタシーケンスはありません。ただし、通常は\ bに続くものが何であるかを決定します。たとえば、フラグメント\ baは単語の先頭の「a」に一致します。</target>
        </trans-unit>
        <trans-unit id="62d9a28c75bb240da271eb7051702080009f9364" translate="yes" xml:space="preserve">
          <source>A wrap disk log file consists of many files, called index files. A log file can be opened and closed. Also, a single index file can be opened separately. If a non-existent or non-internally formatted file is opened, an error message is returned. If the file is corrupt, no attempt is made to repair it, but an error message is returned.</source>
          <target state="translated">ラップディスクのログファイルは、インデックスファイルと呼ばれる多数のファイルから構成されています。1つのログファイルを開いたり閉じたりすることができます。また、一つのインデックスファイルを個別に開くこともできます。存在しないファイルや内部フォーマットされていないファイルを開くと、エラーメッセージが返されます。ファイルが破損している場合は、修復は試みられませんが、エラーメッセージが返されます。</target>
        </trans-unit>
        <trans-unit id="0eb179692808865df9fddfd61d123acd14ceb6dd" translate="yes" xml:space="preserve">
          <source>A wrap files specification is used to limit the disk space consumed by the trace. The trace is written to a limited number of files each with a limited size. The actual filenames are &lt;code&gt;Filename ++ SeqCnt ++ Suffix&lt;/code&gt;, where &lt;code&gt;SeqCnt&lt;/code&gt; counts as a decimal string from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;WrapCnt&lt;/code&gt; and then around again from &lt;code&gt;0&lt;/code&gt;. When a trace term written to the current file makes it longer than &lt;code&gt;WrapSize&lt;/code&gt;, that file is closed, if the number of files in this wrap trace is as many as &lt;code&gt;WrapCnt&lt;/code&gt; the oldest file is deleted then a new file is opened to become the current. Thus, when a wrap trace has been stopped, there are at most &lt;code&gt;WrapCnt&lt;/code&gt; trace files saved with a size of at least &lt;code&gt;WrapSize&lt;/code&gt; (but not much bigger), except for the last file that might even be empty. The default values are &lt;code&gt;WrapSize = 128*1024&lt;/code&gt; and &lt;code&gt;WrapCnt = 8&lt;/code&gt;.</source>
          <target state="translated">ラップファイル指定は、トレースによって消費されるディスク領域を制限するために使用されます。トレースは、それぞれ限られたサイズの限られた数のファイルに書き込まれます。実際のファイル名は &lt;code&gt;Filename ++ SeqCnt ++ Suffix&lt;/code&gt; 、 &lt;code&gt;SeqCnt&lt;/code&gt; は 10進文字列としてカウント &lt;code&gt;0&lt;/code&gt; まで &lt;code&gt;WrapCnt&lt;/code&gt; から周りに再びと &lt;code&gt;0&lt;/code&gt; 。現在のファイルに書き込まれたトレース項が &lt;code&gt;WrapSize&lt;/code&gt; より長くなると、そのファイルは閉じられます。このラップトレース内のファイル数が &lt;code&gt;WrapCnt&lt;/code&gt; と同じである場合、最も古いファイルが削除され、新しいファイルが開かれて現在のファイルになります。したがって、ラップトレースが停止した場合、最大で &lt;code&gt;WrapCnt&lt;/code&gt; が存在します。空である可能性のある最後のファイルを除いて、少なくとも &lt;code&gt;WrapSize&lt;/code&gt; （ただし、それほど大きくはない）のサイズで保存されたトレースファイル。デフォルト値は &lt;code&gt;WrapSize = 128*1024&lt;/code&gt; および &lt;code&gt;WrapCnt = 8&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d6a037e42e51e318b55fc1948fa5a1661147cd7c" translate="yes" xml:space="preserve">
          <source>A wrapper function for &lt;code&gt;mnesia:create_table/2&lt;/code&gt;, which creates a table (if there is no existing table) with an appropriate set of &lt;code&gt;attributes&lt;/code&gt;. The attributes and &lt;code&gt;TabDef&lt;/code&gt; are forwarded to &lt;code&gt;mnesia:create_table/2&lt;/code&gt;. For example, if the table is to reside as &lt;code&gt;disc_only_copies&lt;/code&gt; on all nodes, a call looks as follows:</source>
          <target state="translated">&lt;code&gt;mnesia:create_table/2&lt;/code&gt; のラッパー関数。適切な一連の &lt;code&gt;attributes&lt;/code&gt; を持つテーブル（既存のテーブルがない場合）を作成します。属性と &lt;code&gt;TabDef&lt;/code&gt; は &lt;code&gt;mnesia:create_table/2&lt;/code&gt; に転送されます。たとえば、テーブルがすべてのノードに &lt;code&gt;disc_only_copies&lt;/code&gt; として存在する場合、呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="36b94a437ad5d966a2bc660ff3e1289bcc1b9fd7" translate="yes" xml:space="preserve">
          <source>A wrapper function for &lt;code&gt;mnesia:create_table/2&lt;/code&gt;, which creates a table (if there is no existing table) with an appropriate set of &lt;code&gt;attributes&lt;/code&gt;. The table only resides on the local node and its storage type is the same as the &lt;code&gt;schema&lt;/code&gt; table on the local node, that is, &lt;code&gt;{ram_copies,[node()]}&lt;/code&gt; or &lt;code&gt;{disc_copies,[node()]}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:create_table/2&lt;/code&gt; のラッパー関数。適切な一連の &lt;code&gt;attributes&lt;/code&gt; を持つテーブル（既存のテーブルがない場合）を作成します。テーブルはローカルノードにのみ存在し、そのストレージタイプはローカルノードの &lt;code&gt;schema&lt;/code&gt; テーブルと同じです。つまり、 &lt;code&gt;{ram_copies,[node()]}&lt;/code&gt; または &lt;code&gt;{disc_copies,[node()]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8fbfb3b2a70e7676f439e216ddfb41c8f42fcb5d" translate="yes" xml:space="preserve">
          <source>A write event was cancelled by &lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; or &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; and is guaranteed not to generate a &lt;code&gt;ready_output&lt;/code&gt; notification message.</source>
          <target state="translated">書き込みイベントは &lt;code&gt;ERL_NIF_SELECT_CANCEL&lt;/code&gt; または &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; によってキャンセルされ、 &lt;code&gt;ready_output&lt;/code&gt; 通知メッセージを生成しないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="7bab14cb554b0f0419a6e027fa857770d1ae7636" translate="yes" xml:space="preserve">
          <source>A write operation on a &lt;code&gt;disc_copies&lt;/code&gt; table replica is performed in two steps. First the write operation is appended to a log file, then the actual operation is performed in RAM.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; テーブルのレプリカに対する書き込み操作は、2つのステップで実行されます。最初に書き込み操作がログファイルに追加され、次に実際の操作がRAMで実行されます。</target>
        </trans-unit>
        <trans-unit id="d9843d85d25b1bd741fdb98939b327e3138b2bfb" translate="yes" xml:space="preserve">
          <source>A zlib stream, see &lt;code&gt;&lt;a href=&quot;#open-0&quot;&gt;open/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">zlibストリーム。open &lt;code&gt;&lt;a href=&quot;#open-0&quot;&gt;open/0&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="17afbf6d1d5b871c5ae0cee1ba18a4f7071dc38b" translate="yes" xml:space="preserve">
          <source>A: Cygwin, MSYS or MSYS2 is the environment, which closely resembles the environment found on any Unix machine. It's almost like you had a virtual Unix machine inside Windows. Configure, given certain parameters, then creates makefiles that are used by the environment's gnu-make to built the system. Most of the actual compilers etc are not, however, Cygwin/MSYS/MSYS2 tools, so we've written a couple of wrappers (Bourne-shell scripts), which reside in &lt;code&gt;$ERL_TOP/etc/win32/cygwin_tools&lt;/code&gt; and &lt;code&gt;$ERL_TOP/etc/win32/msys_tools&lt;/code&gt;. They all do conversion of parameters and switches common in the Unix environment to fit the native Windows tools. Most notable is of course the paths, which in Cygwin/MSYS/MSYS2 are Unix-like paths with &quot;forward slashes&quot; (/) and no drive letters. The Cygwin specific command &lt;code&gt;cygpath&lt;/code&gt; is used for most of the path conversions in a Cygwin environment. Other tools are used (when needed) in the corresponding MSYS and MSYS2 environment. Luckily most compilers accept forward slashes instead of backslashes as path separators, but one still have to get the drive letters etc right, though. The wrapper scripts are not general in the sense that, for example, cc.sh would understand and translate every possible gcc option and pass correct options to cl.exe. The principle is that the scripts are powerful enough to allow building of Erlang/OTP, no more, no less. They might need extensions to cope with changes during the development of Erlang, and that's one of the reasons we made them into shell-scripts and not Perl-scripts. We believe they are easier to understand and change that way.</source>
          <target state="translated">A：Cygwin、MSYS、またはMSYS2は、Unixマシンの環境とよく似ています。 Windowsの内部に仮想Unixマシンがあったようなものです。特定のパラメーターを指定して構成し、環境のgnu-makeがシステムを構築するために使用するメイクファイルを作成します。しかし、実際のコンパイラーなどのほとんどはCygwin / MSYS / MSYS2ツールではないため、 &lt;code&gt;$ERL_TOP/etc/win32/cygwin_tools&lt;/code&gt; および &lt;code&gt;$ERL_TOP/etc/win32/msys_tools&lt;/code&gt; あるラッパー（ボーンシェルスクリプト）をいくつか作成しました/ win32 / msys_tools。これらはすべて、ネイティブWindowsツールに適合するように、Unix環境で一般的なパラメーターとスイッチの変換を行います。もちろん、最も注目すべきはパスです。Cygwin/ MSYS / MSYS2では、「スラッシュ」（/）がありドライブ文字のないUnix風のパスです。 Cygwin固有のコマンド &lt;code&gt;cygpath&lt;/code&gt; Cygwin環境でのほとんどのパス変換に使用されます。その他のツールは、対応するMSYSおよびMSYS2環境で（必要な場合）使用されます。幸いなことに、ほとんどのコンパイラーはパス区切り文字としてバックスラッシュの代わりにスラッシュを受け入れますが、ドライブ文字などを正しく取得する必要があります。ラッパースクリプトは、たとえばcc.shがすべての可能なgccオプションを理解して変換し、正しいオプションをcl.exeに渡すという意味では一般的ではありません。原則は、スクリプトがErlang / OTPの構築を可能にするほど強力であるということです。 Erlangの開発中の変更に対処するために拡張機能が必要になる場合があります。それが、Perlスクリプトではなくシェルスクリプトにした理由の1つです。私たちはそれらが理解しやすく、そのように変更すると信じています。</target>
        </trans-unit>
        <trans-unit id="4d1ee8b13defdb6f13a0a5e7daa4cf8a74b29540" translate="yes" xml:space="preserve">
          <source>A: For Cygwin, MSYS and MSYS2 alike, we try to use the latest releases available when building. What versions you use shouldn't really matter. We try to include workarounds for the bugs we've found in different Cygwin/MSYS/MSYS2 releases. Please help us add workarounds for new Cygwin/MSYS/MSYS2-related bugs as soon as you encounter them. Also please do submit bug reports to the appropriate Cygwin, MSYS and/or MSYS2 developers. The GCC we used for 21 was version 4.8.1 (MinGW 32bit) and 4.8.5 (MSYS2 64bit). We used VC++ 12.0 (i.e. Visual studio 2013), Sun's JDK 1.6.0_45 (32bit) and Sun's JDK 1.7.0_1 (64bit), NSIS 2.46, and Win32 OpenSSL 1.0.2d. Please read the next section for details on what you need.</source>
          <target state="translated">A:Cygwin、MSYS、MSYS2の場合も同様に、ビルド時には最新のリリースを使用するようにしています。どのバージョンを使用しているかは重要ではありません。Cygwin/MSYS/MSYS2の異なるリリースで発見したバグに対する回避策を含めるようにしています。Cygwin/MSYS/MSYS2関連の新しいバグに遭遇したら、すぐに回避策を追加するのを手伝ってください。また、適切なCygwin、MSYS、MSYS2の開発者にバグレポートを提出してください。21で使用したGCCは、バージョン4.8.1 (MinGW 32bit)と4.8.5 (MSYS2 64bit)です。VC++12.0 (すなわちVisual studio 2013)、SunのJDK 1.6.0_45 (32bit)とSunのJDK 1.7.0_1 (64bit)、NSIS 2.46、Win32 OpenSSL 1.0.2dを使用しました。必要なものについては次項をお読みください。</target>
        </trans-unit>
        <trans-unit id="731d5bc0547d3ee14b9d073a740322bb562e4b26" translate="yes" xml:space="preserve">
          <source>A: No, never. The hassle of keeping the project files up to date and do all the steps that constitute an OTP build from within the VC++ GUI is simply not worth it, maybe even impossible. A VC++ project file for Erlang/OTP will never happen.</source>
          <target state="translated">A:いいえ、絶対にありません。プロジェクトファイルを最新の状態に保ち、VC++GUIからOTPビルドを構成するすべてのステップを行う手間は、単に価値がないだけで、不可能かもしれません。Erlang/OTP用のVC++プロジェクトファイルは絶対にありえません。</target>
        </trans-unit>
        <trans-unit id="521d37ede1551a08a3beff1206807c9cd55ca94a" translate="yes" xml:space="preserve">
          <source>A: No, not really, but see this as a step in the right direction.</source>
          <target state="translated">A:いや、そうではありませんが、これは正しい方向への一歩だと考えています。</target>
        </trans-unit>
        <trans-unit id="58e458048a7a9548592140528083c14b19023a3f" translate="yes" xml:space="preserve">
          <source>A: No, the result will be a pure Windows binary, and as far as I know, it's not possible to make a Cygwin binary yet. That is of course something desirable, but there are still some problems with the dynamic linking (dynamic Erlang driver loading) as well as the TCP/IP emulation in Cygwin, which, I'm sure of, will improve, but still has some problems. Fixing those problems might be easy or might be hard. I suggest you try yourself and share your experience. No one would be happier if a simple &lt;code&gt;./configure &amp;amp;&amp;amp; make&lt;/code&gt; would produce a fully fledged Cygwin binary.</source>
          <target state="translated">A：いいえ、結果は純粋なWindowsバイナリになります。私の知る限り、Cygwinバイナリをまだ作成することはできません。これはもちろん望ましいことですが、動的リンク（動的Erlangドライバーの読み込み）とCygwinのTCP / IPエミュレーションにはまだいくつかの問題があります。これはきっと改善されると思いますが、それでもいくつかの問題があります。 。これらの問題の修正は簡単な場合と難しい場合があります。自分で試して、経験を共有することをお勧めします。単純な &lt;code&gt;./configure &amp;amp;&amp;amp; make&lt;/code&gt; で本格的なCygwinバイナリが生成されるとしたら、誰もが幸せになります。</target>
        </trans-unit>
        <trans-unit id="f58ec10da79cf14638b87d58a71fefc5754e9d5f" translate="yes" xml:space="preserve">
          <source>A: No, unfortunately not. You'll need Microsoft's Visual C++ still. A Bourne-shell script (cc.sh) wraps the Visual C++ compiler and runs it from within the Cygwin environment. All other tools needed to build Erlang are free-ware/open source, but not the C compiler. The Windows SDK is however enough to build Erlang, you do not need to buy Visual C++, just download the SDK (SDK version 8.1 == Visual studio 2013).</source>
          <target state="translated">A:いいえ、残念ながらそうではありません。やはりMicrosoftのVisual C++が必要です。Bourne-shellスクリプト(cc.sh)がVisual C++コンパイラをラップしてCygwin環境から実行します。Erlangをビルドするのに必要な他のツールはすべてフリーウェア/オープンソースですが、Cコンパイラは含まれていません。Visual C++を買う必要はなく、SDKをダウンロードしてください(SDK version 8.1 ==Visual studio 2013)。</target>
        </trans-unit>
        <trans-unit id="85724e56e3dcb9f76cc960c4345313a7227e07b7" translate="yes" xml:space="preserve">
          <source>A: No, unfortunately not. You'll need Microsoft's Visual C++ still. A Bourne-shell script (cc.sh) wraps the Visual C++ compiler and runs it from within the WSL environment. All other tools needed to build Erlang are free-ware/open source, but not the C compiler.</source>
          <target state="translated">A:いいえ、残念ながらそうではありません。やはりMicrosoftのVisual C++が必要です。Bourne-shellスクリプト(cc.sh)がVisual C++コンパイラをラップしてWSL環境から実行します。Erlangをビルドするのに必要な他のツールはすべてフリーウェア/オープンソースですが、Cコンパイラは必要ありません。</target>
        </trans-unit>
        <trans-unit id="a599e8e13ccfd4f3e0504f6192bcbcf31a59938f" translate="yes" xml:space="preserve">
          <source>A: No, unfortunately we haven't got time to help with Cygwin/MSYS/MSYS2 related user problems, please read related websites, newsgroups and mailing lists.</source>
          <target state="translated">A:いいえ、残念ながら、Cygwin/MSYS/MSYS2に関連するユーザーの問題を解決する時間がありませんので、関連するウェブサイトやニュースグループ、メーリングリストをご覧ください。</target>
        </trans-unit>
        <trans-unit id="210dcbb21de47a153ba938b86b20600d7d480a0c" translate="yes" xml:space="preserve">
          <source>A: OK, I admit, one of the files is compiled using Cygwin's or MinGW's GCC and the resulting object code is then converted to MS VC++ compatible coff using a small C hack. It's because that particular file, &lt;code&gt;beam_emu.c&lt;/code&gt; benefits immensely from being able to use the GCC labels-as-values extension, which boosts emulator performance by up to 50%. That does unfortunately not (yet) mean that all of OTP could be compiled using GCC. That particular source code does not do anything system specific and actually is adopted to the fact that GCC is used to compile it on Windows.</source>
          <target state="translated">A：はい、認めます。ファイルの1つがCygwinまたはMinGWのGCCを使用してコンパイルされ、結果のオブジェクトコードが小さなCハックを使用してMS VC ++互換のcoffに変換されます。これは、その特定のファイルである &lt;code&gt;beam_emu.c&lt;/code&gt; 、GCCのラベルとしてのラベル拡張機能を使用できるため、エミュレータのパフォーマンスを最大50％向上させることができるため、非常にメリットがあるためです。残念ながら、（まだ）OTPのすべてをGCCを使用してコンパイルできるという意味ではありません。その特定のソースコードはシステム固有の処理を行わず、実際にGCCがWindowsでのコンパイルに使用されているという事実に採用されています。</target>
        </trans-unit>
        <trans-unit id="81af1c0ed56bada7f1365c496431c92fc23f483c" translate="yes" xml:space="preserve">
          <source>A: OK, I admit, one of the files is compiled using MinGW's GCC and the resulting object code is then converted to MS VC++ compatible coff using a small C hack. It's because that particular file, &lt;code&gt;beam_emu.c&lt;/code&gt; benefits immensely from being able to use the GCC labels-as-values extension, which boosts emulator performance by up to 50%. That does unfortunately not (yet) mean that all of OTP could be compiled using GCC. That particular source code does not do anything system specific and actually is adopted to the fact that GCC is used to compile it on Windows.</source>
          <target state="translated">A：はい、確かに、ファイルの1つはMinGWのGCCを使用してコンパイルされ、結果のオブジェクトコードは小さなCハックを使用してMS VC ++互換のcoffに変換されます。これは、その特定のファイルである &lt;code&gt;beam_emu.c&lt;/code&gt; が、エミュレータのパフォーマンスを最大50％向上させるGCCの値としてのラベル拡張機能を使用できることから大きなメリットを得ているためです。残念ながら、それは（まだ）すべてのOTPがGCCを使用してコンパイルできることを意味するわけではありません。その特定のソースコードはシステム固有のことは何もせず、実際にはGCCがWindowsでのコンパイルに使用されるという事実に採用されています。</target>
        </trans-unit>
        <trans-unit id="f9e36bf356b0e8d7e06efee09f6d96691782df63" translate="yes" xml:space="preserve">
          <source>A: WSL/Ubuntu is the environment, it's almost like you had a virtual Unix machine inside Windows. Configure, given certain parameters, then creates makefiles that are used by the environment's gnu-make to built the system. Most of the actual compilers etc are not, however, WSL tools, so we've written a couple of wrappers (Bourne-shell scripts), which reside in &lt;code&gt;$ERL_TOP/etc/win32/wsl_tools&lt;/code&gt;. They all do conversion of parameters and switches common in the Unix environment to fit the native Windows tools. Most notable is of course the paths, which in WSL are Unix-like paths with &quot;forward slashes&quot; (/) and no drive letters. The WSL specific command &lt;code&gt;wslpath&lt;/code&gt; is used for most of the path conversions in a WSL environment. Luckily most compilers accept forward slashes instead of backslashes as path separators, but one still have to get the drive letters etc right, though. The wrapper scripts are not general in the sense that, for example, cc.sh would understand and translate every possible gcc option and pass correct options to cl.exe. The principle is that the scripts are powerful enough to allow building of Erlang/OTP, no more, no less. They might need extensions to cope with changes during the development of Erlang, and that's one of the reasons we made them into shell-scripts and not Perl-scripts. We believe they are easier to understand and change that way.</source>
          <target state="translated">A：WSL / Ubuntuは環境であり、Windows内に仮想Unixマシンを持っているようなものです。特定のパラメーターを指定して構成し、環境のgnu-makeがシステムを構築するために使用するmakefileを作成します。ただし、実際のコンパイラなどのほとんどはWSLツールではないため、 &lt;code&gt;$ERL_TOP/etc/win32/wsl_tools&lt;/code&gt; あるいくつかのラッパー（Bourneシェルスクリプト）を作成しました。これらはすべて、ネイティブのWindowsツールに合うようにUnix環境で一般的なパラメータとスイッチの変換を行います。もちろん、最も注目に値するのはパスです。これは、WSLでは「スラッシュ」（/）があり、ドライブ文字がないUnixライクなパスです。 WSL固有のコマンド &lt;code&gt;wslpath&lt;/code&gt; WSL環境でのほとんどのパス変換に使用されます。幸いなことに、ほとんどのコンパイラはパス区切り文字としてバックスラッシュではなくスラッシュを受け入れますが、それでもドライブ文字などを正しく取得する必要があります。ラッパースクリプトは、たとえば、cc.shがすべての可能なgccオプションを理解して変換し、正しいオプションをcl.exeに渡すという意味で一般的ではありません。原則として、スクリプトはErlang / OTPの構築を可能にするほど強力であり、それ以上でもそれ以下でもありません。 Erlangの開発中の変更に対処するために拡張機能が必要になる場合があります。これが、Perlスクリプトではなくシェルスクリプトにした理由の1つです。私たちは、彼らがそのように理解し、変更するのがより簡単であると信じています。</target>
        </trans-unit>
        <trans-unit id="7b2634e5d15aa84185c8c93ac17bc4f970898371" translate="yes" xml:space="preserve">
          <source>A: We use WSL 1 with Ubuntu 18.04. The GCC we used for 23 was version 7.3-win32. We used Visual studio 2019, Sun's JDK 1.8.0_241, NSIS 3.05, Win32 OpenSSL 1.1.1d and wxWidgets-3.1.3.</source>
          <target state="translated">A:Ubuntu 18.04でWSL 1を使用しています。23で使用したGCCはバージョン7.3-win32でした。Visual studio 2019、SunのJDK 1.8.0_241、NSIS 3.05、Win32 OpenSSL 1.1.1.1d、wxWidgets-3.1.3を使用しました。</target>
        </trans-unit>
        <trans-unit id="97fcb970b445ac9a87b96b37bf7ea3a4ab4cab29" translate="yes" xml:space="preserve">
          <source>A: Well, it's not expensive, it's free (as in free beer). Just download and install the latest Windows SDK from Microsoft and all the tools you need are there. The included debugger (WinDbg) is also quite usable. That's what I used when porting Erlang to 64bit Windows. Another reason to use later Microsoft compilers is DLL compatibility. DLL's using a new version of the standard library might not load if the VM is compiled with an old VC++ version. So we should aim to use the latest freely available SDK and compiler.</source>
          <target state="translated">A:まあ、高いわけではなく、無料です(タダのビールのように)。Microsoftから最新のWindows SDKをダウンロードしてインストールするだけで、必要なツールはすべてそこにあります。付属のデバッガ(WinDbg)もかなり使える。私はErlangを64bitのWindowsに移植したときに使いました。Microsoftのコンパイラを使うもう一つの理由はDLLの互換性です。新しいバージョンの標準ライブラリを使っているDLLは、古いバージョンのVC++でコンパイルされたVMではロードできないかもしれません。そのため、最新のフリーのSDKとコンパイラを使うようにしましょう。</target>
        </trans-unit>
        <trans-unit id="c041ae7e57578688a11137a9916f0588de32a73f" translate="yes" xml:space="preserve">
          <source>A: Well, partly because it's a good compiler - really! Actually it's been possible in late R11-releases to build using mingw instead of visual C++ (you might see the remnants of that in some scripts and directories). Unfortunately the development of the SMP version for Windows broke the mingw build and we chose to focus on the VC++ build as the performance has been much better in the VC++ versions. The mingw build will possibly be back, but as long as VC++ gives better performance, the commercial build will be a VC++ one.</source>
          <target state="translated">A:まあ、良いコンパイラだからというのもありますが-本当に! 実際、R11後期のリリースでは、visual C++の代わりにmingwを使ってビルドすることが可能になりました(スクリプトやディレクトリの中にその名残が見られるかもしれません)。残念ながら、Windows用のSMPバージョンの開発でmingwビルドが壊れてしまい、VC++バージョンの方がパフォーマンスがずっと良かったので、VC++ビルドに集中することにしました。mingwビルドは復活するかもしれませんが、VC++がより良いパフォーマンスを提供する限り、商用ビルドはVC++のものになるでしょう。</target>
        </trans-unit>
        <trans-unit id="8315e42a391d74c84bc127e20d99aa2c7b6bc114" translate="yes" xml:space="preserve">
          <source>A: Yes, we use the exact same build procedure.</source>
          <target state="translated">A:はい、全く同じビルド手順を使用しています。</target>
        </trans-unit>
        <trans-unit id="c88a17178680779495642b56e9c7d27ea864c737" translate="yes" xml:space="preserve">
          <source>AH(NeedStack, NeedHeap, Live)</source>
          <target state="translated">AH(NeedStack,NeedHeap,Live)</target>
        </trans-unit>
        <trans-unit id="be36dfbb5116564a40ed7d5b4cbdf3999ccff9dc" translate="yes" xml:space="preserve">
          <source>API Description</source>
          <target state="translated">APIの説明</target>
        </trans-unit>
        <trans-unit id="436942b9131313ac7f725ef0106016a7cb814a52" translate="yes" xml:space="preserve">
          <source>API for a SSL/TLS CRL (Certificate Revocation List) cache.</source>
          <target state="translated">SSL/TLS CRL (Certificate Revocation List)キャッシュ用の API です。</target>
        </trans-unit>
        <trans-unit id="01fc1fc29ee3bdfac97c802f999cf7358e251132" translate="yes" xml:space="preserve">
          <source>API for a TLS CRL (Certificate Revocation List) cache.</source>
          <target state="translated">TLS CRL (Certificate Revocation List)キャッシュ用の API。</target>
        </trans-unit>
        <trans-unit id="a23c8e20572073978952d048d9433a8575f6a97d" translate="yes" xml:space="preserve">
          <source>API functions for an Erlang NIF library.</source>
          <target state="translated">Erlang NIFライブラリのAPI関数。</target>
        </trans-unit>
        <trans-unit id="361d551affb47befd80fca6479fe8a167dc7036d" translate="yes" xml:space="preserve">
          <source>API functions for an Erlang driver.</source>
          <target state="translated">ErlangドライバのAPI関数。</target>
        </trans-unit>
        <trans-unit id="e80b30d77b2cab01b81ccc87fb312659f6e0dd98" translate="yes" xml:space="preserve">
          <source>API functions in the module &lt;code&gt;httpd_conf&lt;/code&gt; was deprecated in favor of standard modules such as &lt;code&gt;lists&lt;/code&gt;, &lt;code&gt;string&lt;/code&gt;, &lt;code&gt;filelib&lt;/code&gt;, and &lt;code&gt;erlang&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;httpd_conf&lt;/code&gt; のAPI関数は廃止され、 &lt;code&gt;lists&lt;/code&gt; 、 &lt;code&gt;string&lt;/code&gt; 、 &lt;code&gt;filelib&lt;/code&gt; 、 &lt;code&gt;erlang&lt;/code&gt; などの標準モジュールが採用されました。</target>
        </trans-unit>
        <trans-unit id="d310425c434730e2f59306f932cf1691ae572d78" translate="yes" xml:space="preserve">
          <source>API functions to write customized SSH clients and servers applications</source>
          <target state="translated">カスタマイズされたSSHクライアントやサーバアプリケーションを記述するためのAPI機能</target>
        </trans-unit>
        <trans-unit id="de210df0a505b46fa42dc263d10d332cce666788" translate="yes" xml:space="preserve">
          <source>API kept from previous versions</source>
          <target state="translated">以前のバージョンから保存されているAPI</target>
        </trans-unit>
        <trans-unit id="72bf5fea06a2041d232930267f67048618c99f45" translate="yes" xml:space="preserve">
          <source>API module for Logger, the standard logging facility in Erlang/OTP.</source>
          <target state="translated">Erlang/OTPの標準的なロギング機能であるLoggerのAPIモジュールです。</target>
        </trans-unit>
        <trans-unit id="0be52be7a0efe4a62d99e98efb97a08aef84fe41" translate="yes" xml:space="preserve">
          <source>API module for public-key infrastructure.</source>
          <target state="translated">公開鍵インフラストラクチャ用のAPIモジュール。</target>
        </trans-unit>
        <trans-unit id="76827dde5bd6ab1accea3ccbe25374a63afc24e6" translate="yes" xml:space="preserve">
          <source>ARM: ARMv5TE (i.e. XScale) processors should work. Both big-endian and little-endian modes are supported.</source>
          <target state="translated">ARMです。ARMv5TE (すなわち XScale)プロセッサが動作します。ビッグエンディアンとリトルエンディアンの両方のモードがサポートされています。</target>
        </trans-unit>
        <trans-unit id="ca8c02ce6c85a255754680e86371209b9b2680ce" translate="yes" xml:space="preserve">
          <source>ARM: Linux</source>
          <target state="translated">ARMです。Linux</target>
        </trans-unit>
        <trans-unit id="d9932f6f9e0505be61dc8fcd25736c1bf8cf818f" translate="yes" xml:space="preserve">
          <source>ASCII value or unicode code-point of the character &lt;strong&gt;&lt;code&gt;char&lt;/code&gt;&lt;/strong&gt;.</source>
          <target state="translated">文字&lt;strong&gt; &lt;code&gt;char&lt;/code&gt; の&lt;/strong&gt; ASCII値またはUnicodeコードポイント。</target>
        </trans-unit>
        <trans-unit id="196ab313cd92b6ea93995c7fc93f081f77b30992" translate="yes" xml:space="preserve">
          <source>ASN.1 DER-encoded entity as an Erlang binary.</source>
          <target state="translated">ASN.1 ErlangバイナリとしてのDERエンコードされた実体。</target>
        </trans-unit>
        <trans-unit id="5fa4ef6c7f4c743ebd97fa57feafd946e53e8d8c" translate="yes" xml:space="preserve">
          <source>ASN.1 Specifications, Messages, and Configuration</source>
          <target state="translated">ASN.1 仕様、メッセージ、構成</target>
        </trans-unit>
        <trans-unit id="368efd7c5142e650553f401aa461d1b76d069901" translate="yes" xml:space="preserve">
          <source>ASN.1 compiler and compile-time support functions</source>
          <target state="translated">ASN.1 コンパイラとコンパイル時のサポート機能</target>
        </trans-unit>
        <trans-unit id="c009d6d020f91e9075e192687145f1f9183e3b17" translate="yes" xml:space="preserve">
          <source>ASN.1 has both primitive and constructed types:</source>
          <target state="translated">ASN.1にはプリミティブ型とコンストラクト型があります。</target>
        </trans-unit>
        <trans-unit id="cfcd66d008f9b63d7b919bdf916303779861fe19" translate="yes" xml:space="preserve">
          <source>ASN.1 is a formal language for describing data structures to be exchanged between distributed computer systems. The purpose of ASN.1 is to have a platform and programming language independent notation to express types using a standardized set of rules for the transformation of values of a defined type into a stream of bytes. This stream of bytes can then be sent on any type of communication channel. This way, two applications written in different programming languages running on different computers, and with different internal representation of data, can exchange instances of structured data types.</source>
          <target state="translated">ASN.1は、分散型コンピュータシステム間で交換されるデータ構造を記述するための正式な言語です。ASN.1の目的は、定義された型の値をバイトのストリームに変換するための標準化されたルールのセットを使用して型を表現するためのプラットフォームとプログラミング言語に依存しない記法を持つことである。このバイトのストリームは、どのようなタイプの通信チャネルでも送信することができます。このようにして、異なるコンピュータ上で動作する異なるプログラミング言語で書かれ、データの内部表現が異なる2つのアプリケーションは、構造化されたデータ型のインスタンスを交換することができます。</target>
        </trans-unit>
        <trans-unit id="3b1ea2d9df3b25e2e5fe146441abf268990d9a8f" translate="yes" xml:space="preserve">
          <source>ASN.1 is used in two different ways in SNMP. The SMI is based on ASN.1, and the messages in the protocol are defined by using ASN.1.</source>
          <target state="translated">ASN.1はSNMPでは2種類の方法で使用されています。SMIはASN.1をベースにしており、プロトコル内のメッセージはASN.1を使用して定義されています。</target>
        </trans-unit>
        <trans-unit id="18afe0241096372d9207a097906f4cc9e96ca40a" translate="yes" xml:space="preserve">
          <source>ASN.1 itself specifies indefinitely large integers. Erlang systems with version 4.3 and higher support very large integers, in practice indefinitely large integers.</source>
          <target state="translated">ASN.1自身は無限に大きな整数を指定しています。バージョン4.3以降のErlangシステムは非常に大きな整数をサポートしていますが、実際には無限に大きな整数をサポートしています。</target>
        </trans-unit>
        <trans-unit id="1b5feca556ffbb7ecdf53e29fcc97d476a5bf5f3" translate="yes" xml:space="preserve">
          <source>ASN.1 module &lt;code&gt;People&lt;/code&gt; is now accepted and the abstract syntax tree is saved in file &lt;code&gt;People.asn1db&lt;/code&gt;. The generated Erlang code is compiled using the Erlang compiler and loaded into the Erlang runtime system. There is now an API for &lt;code&gt;encode/2&lt;/code&gt; and &lt;code&gt;decode/2&lt;/code&gt; in module &lt;code&gt;People&lt;/code&gt;, which is called like:</source>
          <target state="translated">ASN.1モジュール &lt;code&gt;People&lt;/code&gt; が受け入れられ、抽象構文ツリーが &lt;code&gt;People.asn1db&lt;/code&gt; ファイルに保存されます。生成されたErlangコードは、Erlangコンパイラを使用してコンパイルされ、Erlangランタイムシステムにロードされます。モジュール &lt;code&gt;People&lt;/code&gt; に &lt;code&gt;encode/2&lt;/code&gt; と &lt;code&gt;decode/2&lt;/code&gt; の APIが追加されました。</target>
        </trans-unit>
        <trans-unit id="38ab94405d2e97c97a998a6475af5251fa89b825" translate="yes" xml:space="preserve">
          <source>ASN.1 supports a wide variety of character sets. The main difference between an &lt;code&gt;OCTET STRING&lt;/code&gt; and a character string is that the &lt;code&gt;OCTET STRING&lt;/code&gt; has no imposed semantics on the bytes delivered.</source>
          <target state="translated">ASN.1は、さまざまな文字セットをサポートしています。主な違い &lt;code&gt;OCTET STRING&lt;/code&gt; と文字列がないことである &lt;code&gt;OCTET STRING&lt;/code&gt; 何も配信バイトのセマンティクスを課しています。</target>
        </trans-unit>
        <trans-unit id="00118b8d7398e0597bbf5e3a9b1a946f91c275ba" translate="yes" xml:space="preserve">
          <source>ASN.1 type present in the Public Key applications ASN.1 specifications.</source>
          <target state="translated">公開鍵アプリケーションASN.1仕様に存在するASN.1タイプ。</target>
        </trans-unit>
        <trans-unit id="999234c8b850d2864e4971ba3f6a923f854d60c2" translate="yes" xml:space="preserve">
          <source>ASN1 file. It creates an &lt;code&gt;.erl&lt;/code&gt;, &lt;code&gt;.hrl&lt;/code&gt;, and &lt;code&gt;.asn1db&lt;/code&gt; file from an &lt;code&gt;.asn1&lt;/code&gt; file. Also compiles the &lt;code&gt;.erl&lt;/code&gt; using the Erlang compiler unless option &lt;code&gt;+noobj&lt;/code&gt; is specified.</source>
          <target state="translated">ASN1ファイル。これは、作成し &lt;code&gt;.erl&lt;/code&gt; 、 &lt;code&gt;.hrl&lt;/code&gt; 、および &lt;code&gt;.asn1db&lt;/code&gt; からファイルを &lt;code&gt;.asn1&lt;/code&gt; ファイル。また、オプション &lt;code&gt;+noobj&lt;/code&gt; が指定されていない限り、Erlangコンパイラを使用して &lt;code&gt;.erl&lt;/code&gt; をコンパイルします。</target>
        </trans-unit>
        <trans-unit id="3f4ea8e8df4b539a09e4694a57b64fe87acc6aa2" translate="yes" xml:space="preserve">
          <source>AVP Codes</source>
          <target state="translated">AVPコード</target>
        </trans-unit>
        <trans-unit id="5f07924d7df0ed6c7a91768f9fe2d84ed905e783" translate="yes" xml:space="preserve">
          <source>AVP Considerations</source>
          <target state="translated">AVPの考察</target>
        </trans-unit>
        <trans-unit id="358dba47c0c1d2a1ab4897c5be6e756cf7939cf1" translate="yes" xml:space="preserve">
          <source>AVP Flags</source>
          <target state="translated">AVPフラグ</target>
        </trans-unit>
        <trans-unit id="147e947b2ccddb2127e44e91cd77c7172c834c87" translate="yes" xml:space="preserve">
          <source>AVP Header</source>
          <target state="translated">AVPヘッダー</target>
        </trans-unit>
        <trans-unit id="db689f171790fb1bc972a968ef05e4c119e28132" translate="yes" xml:space="preserve">
          <source>AVP Occurrence Tables</source>
          <target state="translated">AVPの発生表</target>
        </trans-unit>
        <trans-unit id="7b38fc4069f3bc947361bf1d7d5e19953586e35e" translate="yes" xml:space="preserve">
          <source>AVP Values</source>
          <target state="translated">AVPの値</target>
        </trans-unit>
        <trans-unit id="c483ce0c3913a6678d954f208b0703dcb0e25b18" translate="yes" xml:space="preserve">
          <source>AVP values sent in outgoing CER or CEA messages during capabilities exchange. Can be configured both on a service and a transport, values on the latter taking precedence. Has one of the following types.</source>
          <target state="translated">能力交換中に発信CERまたはCEAメッセージで送られるAVP値。サービスとトランスポートの両方で構成でき、後者の値が優先される。以下のタイプのいずれかを持つ。</target>
        </trans-unit>
        <trans-unit id="2c0e57636791ead050a384bc77e79f8d2fe33260" translate="yes" xml:space="preserve">
          <source>AVPs are decoded into a list of diameter_avp records in &lt;code&gt;avps&lt;/code&gt; field of diameter_packet records independently of &lt;code&gt;decode_format&lt;/code&gt;.</source>
          <target state="translated">AVPは、中diameter_avpレコードのリストにデコードされ &lt;code&gt;avps&lt;/code&gt; 独立のdiameter_packetレコードのフィールド &lt;code&gt;decode_format&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84bf21f5193b0af6e24655608ac0e30ceef7e07a" translate="yes" xml:space="preserve">
          <source>AVPs defined in the RFC are defined in dictionaries provided by diameter. Their proper use in application messages is the responsibility of the user.</source>
          <target state="translated">RFCで定義されているAVPは、diameterが提供する辞書で定義されています。アプリケーションメッセージでのそれらの適切な使用は、ユーザの責任です。</target>
        </trans-unit>
        <trans-unit id="6734299ae0f748faa6b52d7e11abf2d0c25ca64f" translate="yes" xml:space="preserve">
          <source>AVPs used to construct outgoing CER/CEA messages. Values take precedence over any specified on the service in question.</source>
          <target state="translated">送信する CER/CEA メッセージを構築するために使用される AVP。値は、該当するサービスで指定されたものよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="5816a66e2c13a6d76644d2e1d9520bcb6dbe4591" translate="yes" xml:space="preserve">
          <source>Aa a list of binary digits (0 or 1). This format is accepted as input to the encode functions, and a &lt;code&gt;BIT STRING&lt;/code&gt; is decoded to this format if option &lt;strong&gt;legacy_bit_string&lt;/strong&gt; is given.</source>
          <target state="translated">Aa 2進数のリスト（0または1）。このフォーマットはエンコード関数への入力として受け入れられ、オプション&lt;strong&gt;legacy_bit_string&lt;/strong&gt;が指定されている場合、 &lt;code&gt;BIT STRING&lt;/code&gt; &lt;strong&gt;ストリング&lt;/strong&gt;はこのフォーマットにデコードされます。</target>
        </trans-unit>
        <trans-unit id="c2fc2e3239e8ec3bf7008184c81466440651887a" translate="yes" xml:space="preserve">
          <source>Abandon a previously issued spawn request. &lt;code&gt;ReqId&lt;/code&gt; corresponds to a request identifier previously returned by &lt;code&gt;&lt;a href=&quot;#spawn_request-5&quot;&gt;spawn_request()&lt;/a&gt;&lt;/code&gt; in a call from current process. That is, only the process that has made the request can abandon the request.</source>
          <target state="translated">以前に発行されたスポーンリクエストを破棄します。 &lt;code&gt;ReqId&lt;/code&gt; は、現在のプロセスからの呼び出しで &lt;code&gt;&lt;a href=&quot;#spawn_request-5&quot;&gt;spawn_request()&lt;/a&gt;&lt;/code&gt; によって以前に返された要求識別子に対応します。つまり、リクエストを行ったプロセスのみがリクエストを破棄できます。</target>
        </trans-unit>
        <trans-unit id="d5bdc897b18ae8c316a38939d3d1d0e98477ad32" translate="yes" xml:space="preserve">
          <source>Abandon carrier free block min limit. A valid &lt;code&gt;&amp;lt;bytes&amp;gt;&lt;/code&gt; is a positive integer representing a block size limit. The largest free block in a carrier must be at least &lt;code&gt;bytes&lt;/code&gt; large, for the carrier to be abandoned. The default is zero but can be changed in the future.</source>
          <target state="translated">キャリアフリーブロックの最小制限を破棄します。有効な &lt;code&gt;&amp;lt;bytes&amp;gt;&lt;/code&gt; は、ブロックサイズの制限を表す正の整数です。キャリアが放棄されるには、キャリアの最大の空きブロックが少なくとも &lt;code&gt;bytes&lt;/code&gt; サイズである必要があります。デフォルトはゼロですが、将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="2e058521811c5ddbaf236521691a6aac5c91e2d2" translate="yes" xml:space="preserve">
          <source>Abandon carrier number limit. A valid &lt;code&gt;&amp;lt;amount&amp;gt;&lt;/code&gt; is a positive integer representing max number of abandoned carriers per allocator instance. Defaults to 1000 which will practically disable the limit, but this can be changed in the future.</source>
          <target state="translated">キャリア数の制限を放棄します。有効な &lt;code&gt;&amp;lt;amount&amp;gt;&lt;/code&gt; は、アロケーターインスタンスごとの放棄キャリアの最大数を表す正の整数です。デフォルトでは1000に設定されており、実際には制限が無効になりますが、これは将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="ddd8504b781a1a9f6d7b92f1aa500221a0c4787e" translate="yes" xml:space="preserve">
          <source>Abandon carrier utilization limit. A valid &lt;code&gt;&amp;lt;utilization&amp;gt;&lt;/code&gt; is an integer in the range &lt;code&gt;[0, 100]&lt;/code&gt; representing utilization in percent. When a utilization value &amp;gt; 0 is used, allocator instances are allowed to abandon multiblock carriers. If &lt;code&gt;de&lt;/code&gt; (default enabled) is passed instead of a &lt;code&gt;&amp;lt;utilization&amp;gt;&lt;/code&gt;, a recommended non-zero utilization value is used. The value chosen depends on the allocator type and can be changed between ERTS versions. Defaults to &lt;code&gt;de&lt;/code&gt;, but this can be changed in the future.</source>
          <target state="translated">キャリア利用制限を破棄します。有効な &lt;code&gt;&amp;lt;utilization&amp;gt;&lt;/code&gt; は、使用率をパーセントで表す &lt;code&gt;[0, 100]&lt;/code&gt; 範囲の整数です。使用率の値が0より大きい場合、アロケータインスタンスはマルチブロックキャリアを放棄できます。場合は &lt;code&gt;de&lt;/code&gt; （デフォルトは有効）の代わりに渡された &lt;code&gt;&amp;lt;utilization&amp;gt;&lt;/code&gt; 、推奨ゼロ以外利用価値が使用されます。選択される値はアロケータタイプによって異なり、ERTSバージョン間で変更できます。デフォルトは &lt;code&gt;de&lt;/code&gt; ですが、これは将来変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="99ed550f3cfb54b7e586b3d6dae1d5c6c29740db" translate="yes" xml:space="preserve">
          <source>Ability to start an Erlang emulator with more flags (any flags supported by &lt;code&gt;erl&lt;/code&gt; are supported).</source>
          <target state="translated">より多くのフラグを使用してErlangエミュレーターを開始する機能（ &lt;code&gt;erl&lt;/code&gt; でサポートされているすべてのフラグがサポートされています）。</target>
        </trans-unit>
        <trans-unit id="31592e98a78da975e62737d1409cd4fb77bffb8e" translate="yes" xml:space="preserve">
          <source>Abnormally terminates the association specified by &lt;code&gt;Assoc&lt;/code&gt;, without flushing of unsent data. The socket itself remains open. Other associations opened on this socket are still valid, and the socket can be used in new associations.</source>
          <target state="translated">&lt;code&gt;Assoc&lt;/code&gt; で指定された関連付けを異常終了します。未送信のデータはフラッシュされません。ソケット自体は開いたままです。このソケットで開かれた他の関連付けは引き続き有効であり、ソケットは新しい関連付けで使用できます。</target>
        </trans-unit>
        <trans-unit id="54e07c4e032173c30d3e1d7eccc1fc09c4351b63" translate="yes" xml:space="preserve">
          <source>Abort-Session-Answer</source>
          <target state="translated">Abort-Session-Answer</target>
        </trans-unit>
        <trans-unit id="aa6a977eb79f01d2748881fca70eaba063d40819" translate="yes" xml:space="preserve">
          <source>Abort-Session-Request</source>
          <target state="translated">Abort-Session-Request</target>
        </trans-unit>
        <trans-unit id="53f8d6aa2f451847b8dbd7813ad859f16188a7eb" translate="yes" xml:space="preserve">
          <source>Aborting a Session</source>
          <target state="translated">セッションの中止</target>
        </trans-unit>
        <trans-unit id="19fdf66eca72538f9393a1351c5653c5dbe6dba0" translate="yes" xml:space="preserve">
          <source>Aborts the connection when it is closed. Discards any data still remaining in the send buffers and sends RST to the peer.</source>
          <target state="translated">接続が終了すると接続を中断します。送信バッファに残っているデータを破棄し、相手にRSTを送信します。</target>
        </trans-unit>
        <trans-unit id="b90030936dbb152015b9486771f1ada8423bb6a8" translate="yes" xml:space="preserve">
          <source>Aborts the current association without flushing any unsent data</source>
          <target state="translated">未送信データをフラッシュせずに現在のアソシエーションを中止します。</target>
        </trans-unit>
        <trans-unit id="32505d42e4f66e192dcee78817ac876d40a66d28" translate="yes" xml:space="preserve">
          <source>Aborts the currently executing test case. The user must know with certainty which test case is currently executing. The function is therefore only safe to call from a function that has been called (or synchronously invoked) by the test case.</source>
          <target state="translated">現在実行中のテストケースを中止します。ユーザーは、どのテストケースが現在実行中であるかを確実に知る必要があります。そのため、この関数は、テストケースから呼び出された(または同期的に呼び出された)関数からのみ安全に呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="d5a894573c68d878cab4cb98be562e26f9a7f0d1" translate="yes" xml:space="preserve">
          <source>Aborts the test run if one or more suites fail to compile (described earlier).</source>
          <target state="translated">1つ以上のスイートがコンパイルに失敗した場合、テスト実行を中止します(前述)。</target>
        </trans-unit>
        <trans-unit id="0744eff0f05c525e12f11abc8717d631608439c4" translate="yes" xml:space="preserve">
          <source>Absolute &lt;code&gt;Time&lt;/code&gt; value. The &lt;code&gt;Time&lt;/code&gt; value is interpreted as an absolute Erlang monotonic time in milliseconds.</source>
          <target state="translated">絶対 &lt;code&gt;Time&lt;/code&gt; 値。 &lt;code&gt;Time&lt;/code&gt; 値は、ミリ秒単位の絶対アーラン単調な時間として解釈されます。</target>
        </trans-unit>
        <trans-unit id="6f0553231a05faffe297bc7acf9cdaa15d3ad0d6" translate="yes" xml:space="preserve">
          <source>Absolute maximum cache bad fit (in kilobytes). A segment in the memory segment cache is not reused if its size exceeds the requested size with more than the value of this parameter. Defaults to &lt;code&gt;4096&lt;/code&gt;.</source>
          <target state="translated">絶対最大キャッシュ不良フィット（キロバイト単位）。メモリセグメントキャッシュ内のセグメントは、そのサイズがこのパラメーターの値を超えて要求されたサイズを超えた場合、再利用されません。デフォルトは &lt;code&gt;4096&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="06e7393a1c9fa0746c02d1ffbcea8603bb27631f" translate="yes" xml:space="preserve">
          <source>Absolute offset.</source>
          <target state="translated">絶対オフセット。</target>
        </trans-unit>
        <trans-unit id="44496adc987c03d870e59213dad3144a175329ee" translate="yes" xml:space="preserve">
          <source>Absolute singleblock carrier shrink threshold (in kilobytes). When a block located in an &lt;code&gt;mseg_alloc&lt;/code&gt; singleblock carrier is shrunk, the carrier is left unchanged if the amount of unused memory is less than this threshold, otherwise the carrier is shrunk. See also &lt;code&gt;&lt;a href=&quot;#M_rsbcst&quot;&gt;rsbcst&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">単一ブロックの絶対キャリア縮小しきい値（キロバイト単位）。 &lt;code&gt;mseg_alloc&lt;/code&gt; シングルブロックキャリアにあるブロックが縮小されると、未使用メモリの量がこのしきい値より少ない場合、キャリアは変更されずに残ります。それ以外の場合、キャリアは縮小されます。 &lt;code&gt;&lt;a href=&quot;#M_rsbcst&quot;&gt;rsbcst&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="ff57be685f71df6825a00bb0dd0675ff72e59819" translate="yes" xml:space="preserve">
          <source>Absolute time-out time</source>
          <target state="translated">絶対的なタイムアウト時間</target>
        </trans-unit>
        <trans-unit id="87b7af24fbc7dca667aaef7cedf788bba72797a9" translate="yes" xml:space="preserve">
          <source>Abstract Data Type for SNMP Indexing</source>
          <target state="translated">SNMPインデキシングのための抽象データ型</target>
        </trans-unit>
        <trans-unit id="5609a156333d78829625afc9b9f892be80c713da" translate="yes" xml:space="preserve">
          <source>Abstract Erlang syntax trees.</source>
          <target state="translated">抽象的なErlangの構文木。</target>
        </trans-unit>
        <trans-unit id="0fc0a26f5661ecd86fced093abdeb714aebff28c" translate="yes" xml:space="preserve">
          <source>Abstract data type for FIFO queues.</source>
          <target state="translated">FIFO キューの抽象的なデータ型。</target>
        </trans-unit>
        <trans-unit id="0036b597c9166dc75f5f416f3d4f8e2976e568cd" translate="yes" xml:space="preserve">
          <source>Abstract datatype for the annotations of the Erlang Compiler.</source>
          <target state="translated">Erlangコンパイラのアノテーションのための抽象的なデータ型。</target>
        </trans-unit>
        <trans-unit id="60de543c8b0a2bf7a7b2b18c9b9c6e2e54182daa" translate="yes" xml:space="preserve">
          <source>Abstract form of an Erlang clause.</source>
          <target state="translated">Erlang節の抽象形。</target>
        </trans-unit>
        <trans-unit id="d6672e8badf7c19620dd4aaaf05ad582f5d5750e" translate="yes" xml:space="preserve">
          <source>Abstract form of an Erlang expression.</source>
          <target state="translated">Erlang式の抽象形。</target>
        </trans-unit>
        <trans-unit id="39fe847d06d62d8e80b55d37a59200693c709fd2" translate="yes" xml:space="preserve">
          <source>Abstract form of an Erlang form.</source>
          <target state="translated">Erlangの抽象形。</target>
        </trans-unit>
        <trans-unit id="b2f998c312eeafe0281400d148af41f390922671" translate="yes" xml:space="preserve">
          <source>Abstract form of an Erlang type.</source>
          <target state="translated">Erlang型の抽象形。</target>
        </trans-unit>
        <trans-unit id="5a9b296f4df7477eb5b5b50aeb9d835778376408" translate="yes" xml:space="preserve">
          <source>Abstract representation of a generator or a bitstring generator.</source>
          <target state="translated">ジェネレータまたはビット列ジェネレータの抽象表現。</target>
        </trans-unit>
        <trans-unit id="492e4e253beefd260963df05d99c417ca4290bfc" translate="yes" xml:space="preserve">
          <source>Abstract representation of a record field.</source>
          <target state="translated">レコードフィールドの抽象表現。</target>
        </trans-unit>
        <trans-unit id="c00f2a5860c99ba7cb396e03f0dc272d78b0cc94" translate="yes" xml:space="preserve">
          <source>Abstract representation of a remote function call.</source>
          <target state="translated">リモート関数呼び出しの抽象表現。</target>
        </trans-unit>
        <trans-unit id="8f5c131fe9c0f70e4b39d2d2baddcf228a489a93" translate="yes" xml:space="preserve">
          <source>Abstract representation of an element of a bitstring.</source>
          <target state="translated">ビット文字列の要素の抽象表現。</target>
        </trans-unit>
        <trans-unit id="06c262fbcd830c7cce729c33d7fe8e67175762f3" translate="yes" xml:space="preserve">
          <source>Accept a connection on a socket.</source>
          <target state="translated">ソケットでの接続を受け付ける。</target>
        </trans-unit>
        <trans-unit id="cf4a58616d72eca00517c5490fb42e2012ac253a" translate="yes" xml:space="preserve">
          <source>Accept connections on the listen socket identified by &lt;code&gt;*ctx&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*ctx&lt;/code&gt; で識別されるリッスンソケットで接続を受け入れます。</target>
        </trans-unit>
        <trans-unit id="9e50abdb48c5e81f25cc8ea3044d328ca8ac2fce" translate="yes" xml:space="preserve">
          <source>Accept the connection.</source>
          <target state="translated">接続を受け入れる。</target>
        </trans-unit>
        <trans-unit id="f62959ef635bf54ce8db016df3aaff0dd63a1788" translate="yes" xml:space="preserve">
          <source>Accepts an incoming connection request on a listen socket. &lt;code&gt;ListenSocket&lt;/code&gt; must be a socket returned from &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt; listen/2&lt;/a&gt;&lt;/code&gt;. The socket returned is to be passed to &lt;code&gt;&lt;a href=&quot;#handshake-2&quot;&gt; handshake/[2,3]&lt;/a&gt;&lt;/code&gt; to complete handshaking, that is, establishing the TLS/DTLS connection.</source>
          <target state="translated">リッスンソケットで着信接続要求を受け入れます。 &lt;code&gt;ListenSocket&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt; listen/2&lt;/a&gt;&lt;/code&gt; から返されるソケットである必要があります。返されたソケットは、 &lt;code&gt;&lt;a href=&quot;#handshake-2&quot;&gt; handshake/[2,3]&lt;/a&gt;&lt;/code&gt; に渡され、ハンドシェイクが完了します。つまり、TLS / DTLS接続が確立されます。</target>
        </trans-unit>
        <trans-unit id="632efb93ff14184018a35197a6178c2417c5bf58" translate="yes" xml:space="preserve">
          <source>Accepts an incoming connection request on a listen socket. &lt;code&gt;ListenSocket&lt;/code&gt; must be a socket returned from &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt;. The socket returned is to be passed to &lt;code&gt;&lt;a href=&quot;#handshake-2&quot;&gt;handshake/[2,3]&lt;/a&gt;&lt;/code&gt; to complete handshaking, that is, establishing the SSL/TLS/DTLS connection.</source>
          <target state="translated">待機ソケットで着信接続要求を受け入れます。 &lt;code&gt;ListenSocket&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; から返されたソケットでなければなりません。返されたソケットは、 &lt;code&gt;&lt;a href=&quot;#handshake-2&quot;&gt;handshake/[2,3]&lt;/a&gt;&lt;/code&gt; に渡され、ハンドシェイクを完了します。つまり、SSL / TLS / DTLS接続を確立します。</target>
        </trans-unit>
        <trans-unit id="69d043ef57e7745987475e175cb8e488f0827aa5" translate="yes" xml:space="preserve">
          <source>Accepts an incoming connection request on a listening socket. &lt;code&gt;Socket&lt;/code&gt; must be a socket returned from &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Timeout&lt;/code&gt; specifies a time-out value in milliseconds. Defaults to &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">待機ソケットで着信接続要求を受け入れます。 &lt;code&gt;Socket&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; から返されたソケットでなければなりません。 &lt;code&gt;Timeout&lt;/code&gt; は、ミリ秒単位でタイムアウト値を指定します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0cebb4f984dd0627e66700aca28cb0e1a5e9b377" translate="yes" xml:space="preserve">
          <source>Accepts from the listen socket identified by the specified identification number. The identification number is retrieved with the &lt;code&gt;uds_control&lt;/code&gt; routine.</source>
          <target state="translated">指定された識別番号で識別される待機ソケットから受け入れます。識別番号は &lt;code&gt;uds_control&lt;/code&gt; ルーチンで取得されます。</target>
        </trans-unit>
        <trans-unit id="376e9046cc5fd2842ce29e30d9b75eab2742e487" translate="yes" xml:space="preserve">
          <source>Access Restrictions</source>
          <target state="translated">アクセス制限</target>
        </trans-unit>
        <trans-unit id="804ff6a7ca49a544473ae24cb9339afd2154136e" translate="yes" xml:space="preserve">
          <source>Access globally registered names.</source>
          <target state="translated">グローバルに登録された名前にアクセスします。</target>
        </trans-unit>
        <trans-unit id="119dea3e192ecc9326f47133ed54d5f5ec4367c3" translate="yes" xml:space="preserve">
          <source>Access rights must be set so that all nodes in the pool have the authority to access each other.</source>
          <target state="translated">アクセス権は、プール内のすべてのノードが相互にアクセスする権限を持つように設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7a783c4df63409ddf4859d4d9c63884928a701bd" translate="yes" xml:space="preserve">
          <source>Access to TCP/IP protocols.</source>
          <target state="translated">TCP/IPプロトコルへのアクセス。</target>
        </trans-unit>
        <trans-unit id="cb621788e34fed8e0f28301fdda0b265d5b636b7" translate="yes" xml:space="preserve">
          <source>Access to http://your.server.org/cgi-bin/17/foo would cause the server to run the script /web/17/cgi-bin/foo.</source>
          <target state="translated">http://your.server.org/cgi-bin/17/foo にアクセスすると、サーバーはスクリプト /web/17/cgi-bin/foo を実行します。</target>
        </trans-unit>
        <trans-unit id="a462746b4ce0075f7024ce8c93ee0d727108ca1e" translate="yes" xml:space="preserve">
          <source>Access to http://your.server.org/cgi-bin/foo would cause the server to run the script /web/cgi-bin/foo.</source>
          <target state="translated">http://your.server.org/cgi-bin/foo にアクセスすると、サーバはスクリプト /web/cgi-bin/foo を実行します。</target>
        </trans-unit>
        <trans-unit id="50c06117af6e8e6670291bbfd27326b9ace3849a" translate="yes" xml:space="preserve">
          <source>Access to http://your.server.org/docs/ would return http://your.server.org/docs/index.html or http://your.server.org/docs/welcome.html if index.html does not exist.</source>
          <target state="translated">http://your.server.org/docs/へのアクセスは、index.html が存在しない場合は http://your.server.org/docs/index.html または http://your.server.org/docs/welcome.html を返します。</target>
        </trans-unit>
        <trans-unit id="55663d7fd0c514824e934bdabda94079e8fc90bd" translate="yes" xml:space="preserve">
          <source>Access to http://your.server.org/image/foo.gif would refer to the file /ftp/pub/image/foo.gif.</source>
          <target state="translated">http://your.server.org/image/foo.gif へのアクセスは、ファイル /ftp/pub/image/foo.gif を参照してください。</target>
        </trans-unit>
        <trans-unit id="427eed565a2163db52b5b617c51105003a80c4da" translate="yes" xml:space="preserve">
          <source>Access to http://your.server.org/~bob/foo.gif would refer to the file /home/bob/public/foo.gif.</source>
          <target state="translated">http://your.server.org/~bob/foo.gif へのアクセスは、/home/bob/public/foo.gif ファイルを参照します。</target>
        </trans-unit>
        <trans-unit id="7455d0c1b31ee765842e7d4c484ec0f7dd272b9e" translate="yes" xml:space="preserve">
          <source>Access to http://your.server.org/~bob/foo.gif would refer to the file /home/bob/public/foo.gif. In an Apache-like configuration file, &lt;code&gt;Re&lt;/code&gt; is separated from &lt;code&gt;Replacement&lt;/code&gt; with one single space, and as expected backslashes do not need to be backslash escaped, the same example would become:</source>
          <target state="translated">http://your.server.org/~bob/foo.gifへのアクセスは、ファイル/home/bob/public/foo.gifを参照します。Apacheのような構成ファイルでは、 &lt;code&gt;Re&lt;/code&gt; は &lt;code&gt;Replacement&lt;/code&gt; から1つの単一スペースで分離されており、予期されるバックスラッシュはバックスラッシュでエスケープする必要がないため、同じ例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="a5376bb41fa3654f4b966a3b6b6e89c5279df85f" translate="yes" xml:space="preserve">
          <source>AccessMod:all_keys(ActivityId, Opaque, Tab, LockKind)</source>
          <target state="translated">AccessMod:all_keys(ActivityId,Opaque,Tab,LockKind)</target>
        </trans-unit>
        <trans-unit id="6f94df94a3e7a36d86e327efa5167226380b0374" translate="yes" xml:space="preserve">
          <source>AccessMod:delete(ActivityId, Opaque, Tab, Key, LockKind)</source>
          <target state="translated">AccessMod:delete(ActivityId,Opaque,Tab,Key,LockKind)</target>
        </trans-unit>
        <trans-unit id="b5445c5aafa2ff9673bac795581de2bbc41c0c0f" translate="yes" xml:space="preserve">
          <source>AccessMod:delete_object(ActivityId, Opaque, Tab, RecXS, LockKind)</source>
          <target state="translated">AccessMod:delete_object(ActivityId,Opaque,Tab,RecXS,LockKind)</target>
        </trans-unit>
        <trans-unit id="3e7316c12d79f02736aee472f82ff47536afd350" translate="yes" xml:space="preserve">
          <source>AccessMod:first(ActivityId, Opaque, Tab)</source>
          <target state="translated">AccessMod:first(ActivityId,Opaque,Tab)</target>
        </trans-unit>
        <trans-unit id="b3f5ad115c23452c24775618b9441d204cbd0d17" translate="yes" xml:space="preserve">
          <source>AccessMod:index_match_object(ActivityId, Opaque, Tab, Pattern, Attr, LockKind)</source>
          <target state="translated">AccessMod:index_match_object(ActivityId,Opaque,Tab,Pattern,Attr,LockKind)</target>
        </trans-unit>
        <trans-unit id="64b8364a718a756d7a35ce5b28a17687b5f7875e" translate="yes" xml:space="preserve">
          <source>AccessMod:index_read(ActivityId, Opaque, Tab, SecondaryKey, Attr, LockKind)</source>
          <target state="translated">AccessMod:index_read(ActivityId,Opaque,Tab,SecondaryKey,Attr,LockKind)</target>
        </trans-unit>
        <trans-unit id="405ecfd3752c77ca520244aedede4b5587dbac66" translate="yes" xml:space="preserve">
          <source>AccessMod:last(ActivityId, Opaque, Tab)</source>
          <target state="translated">AccessMod:last(ActivityId,Opaque,Tab)</target>
        </trans-unit>
        <trans-unit id="0fe0be60df449ead6d34747d5036ed4f5deeb071" translate="yes" xml:space="preserve">
          <source>AccessMod:lock(ActivityId, Opaque, LockItem, LockKind)</source>
          <target state="translated">AccessMod:lock(ActivityId,Opaque,LockItem,LockKind)</target>
        </trans-unit>
        <trans-unit id="7f89b76e80a1cb03dd0d79dad619cfd7ed1b75a0" translate="yes" xml:space="preserve">
          <source>AccessMod:match_object(ActivityId, Opaque, Tab, Pattern, LockKind)</source>
          <target state="translated">AccessMod:match_object(ActivityId,Opaque,Tab,Pattern,LockKind)</target>
        </trans-unit>
        <trans-unit id="2eb39b70c8643684acb852d676bca64e66ecf08b" translate="yes" xml:space="preserve">
          <source>AccessMod:next(ActivityId, Opaque, Tab, Key)</source>
          <target state="translated">AccessMod:next(ActivityId,Opaque,Tab,Key)</target>
        </trans-unit>
        <trans-unit id="377e160f1491a996cf09b6412ddf1f19b01e4596" translate="yes" xml:space="preserve">
          <source>AccessMod:prev(ActivityId, Opaque, Tab, Key)</source>
          <target state="translated">AccessMod:prev(ActivityId,Opaque,Tab,Key)</target>
        </trans-unit>
        <trans-unit id="3240408ebba47649936190643d81115a2facdad7" translate="yes" xml:space="preserve">
          <source>AccessMod:read(ActivityId, Opaque, Tab, Key, LockKind)</source>
          <target state="translated">AccessMod:read(ActivityId,Opaque,Tab,Key,LockKind)</target>
        </trans-unit>
        <trans-unit id="f4ae75249d02d33c6b19d3db539b11ddf2e8c3b7" translate="yes" xml:space="preserve">
          <source>AccessMod:table_info(ActivityId, Opaque, Tab, InfoItem)</source>
          <target state="translated">AccessMod:table_info(ActivityId,Opaque,Tab,InfoItem)</target>
        </trans-unit>
        <trans-unit id="593b1df980f5bc3e0025a26bd60fd36b84ab2a86" translate="yes" xml:space="preserve">
          <source>AccessMod:write(ActivityId, Opaque, Tab, Rec, LockKind)</source>
          <target state="translated">AccessMod:write(ActivityId,Opaque,Tab,Rec,LockKind)</target>
        </trans-unit>
        <trans-unit id="21658514a1a49042d074927498970b49e42450f1" translate="yes" xml:space="preserve">
          <source>AccessMode :: write | read,</source>
          <target state="translated">AccessMode ::write | read.</target>
        </trans-unit>
        <trans-unit id="38bb0b3771b790d4a4246ea93a50f0538d3b9ae5" translate="yes" xml:space="preserve">
          <source>Accessing &lt;code&gt;Mnesia&lt;/code&gt; tables from a QLC list comprehension must always be done within a transaction. Consider the following function:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; リスト内包からMnesiaテーブルへのアクセスは、常にトランザクション内で行う必要があります。次の関数を考えます。</target>
        </trans-unit>
        <trans-unit id="d4e0ceeb0457db320ec7c5e806ad2aa7f79465dd" translate="yes" xml:space="preserve">
          <source>Accessing an entry beyond the last set entry also returns the default value, if the array does not have fixed size:</source>
          <target state="translated">最後に設定されたエントリを超えたエントリにアクセスすると、配列のサイズが固定されていない場合はデフォルト値も返されます。</target>
        </trans-unit>
        <trans-unit id="555bba9fd6c14d06717b8dc43b3cc1f3a8debed5" translate="yes" xml:space="preserve">
          <source>Accessing an unset entry returns default value:</source>
          <target state="translated">未設定のエントリにアクセスすると、デフォルト値が返されます。</target>
        </trans-unit>
        <trans-unit id="436be26b911d05b439e447f05501826f189bbbef" translate="yes" xml:space="preserve">
          <source>According to good practices certificates should not use IP-addresses as &quot;server names&quot;. It would be very surprising if this happen outside a closed network.</source>
          <target state="translated">グッドプラクティスによると、証明書はIPアドレスを「サーバ名」として使用すべきではありません。これが閉ざされたネットワークの外で起こったら非常に驚くべきことです。</target>
        </trans-unit>
        <trans-unit id="89a4478d0cf104e90423519324b8b69d771bbee7" translate="yes" xml:space="preserve">
          <source>According to the myth, using a tail-recursive function that builds a list in reverse followed by a call to &lt;code id=&quot;tail_recursive&quot;&gt;lists:reverse/1&lt;/code&gt; is faster than a body-recursive function that builds the list in correct order; the reason being that body-recursive functions use more memory than tail-recursive functions.</source>
          <target state="translated">神話によると、リストを逆順に作成する末尾再帰関数を使用してから、 &lt;code id=&quot;tail_recursive&quot;&gt;lists:reverse/1&lt;/code&gt; を呼び出すほうが、リストを正しい順序で作成する本体再帰関数よりも高速です。その理由は、ボディ再帰関数はテール再帰関数よりも多くのメモリを使用するためです。</target>
        </trans-unit>
        <trans-unit id="2c1de79f36acb95726c8b2c2f40931be25c53188" translate="yes" xml:space="preserve">
          <source>Accounting</source>
          <target state="translated">Accounting</target>
        </trans-unit>
        <trans-unit id="576eaeceb1da93e9cd8653f97cabbf793c67007b" translate="yes" xml:space="preserve">
          <source>Accounting AVP Table</source>
          <target state="translated">会計AVPテーブル</target>
        </trans-unit>
        <trans-unit id="76507b1aa8142b5faffaa0f07c625ec43966a2b9" translate="yes" xml:space="preserve">
          <source>Accounting AVPs</source>
          <target state="translated">会計AVP</target>
        </trans-unit>
        <trans-unit id="9a7ff18e07e31b5c000920070a2994c9d40115bb" translate="yes" xml:space="preserve">
          <source>Accounting Application Extension and Requirements</source>
          <target state="translated">会計アプリケーションの拡張と要件</target>
        </trans-unit>
        <trans-unit id="e635c0e384e30717aefe63c449ad41cb13b32539" translate="yes" xml:space="preserve">
          <source>Accounting Command Codes</source>
          <target state="translated">会計コマンドコード</target>
        </trans-unit>
        <trans-unit id="50de3db981430abf69687c31bfddbc582f239b78" translate="yes" xml:space="preserve">
          <source>Accounting Records</source>
          <target state="translated">会計記録</target>
        </trans-unit>
        <trans-unit id="44b909aba948aa304a039b3c325904ad3054b180" translate="yes" xml:space="preserve">
          <source>Accounting Session State Machine</source>
          <target state="translated">課金セッションステートマシン</target>
        </trans-unit>
        <trans-unit id="c15004aaef4f7a17d065e02f132efa0a95238fb5" translate="yes" xml:space="preserve">
          <source>Accounting is the responsibility of the user: diameter does not implement this state machine.</source>
          <target state="translated">課金はユーザーの責任である:diameterはこのステートマシンを実装していない。</target>
        </trans-unit>
        <trans-unit id="3abb791315e4021643390d032dcd3ee861202b30" translate="yes" xml:space="preserve">
          <source>Accounting-Answer</source>
          <target state="translated">Accounting-Answer</target>
        </trans-unit>
        <trans-unit id="348fbc285b20d73c4251ffc831b8fc2daa3046c1" translate="yes" xml:space="preserve">
          <source>Accounting-Realtime-Required AVP</source>
          <target state="translated">経理-リアルタイム必須 AVP</target>
        </trans-unit>
        <trans-unit id="4913676d8f98f760d1dc436d2423796cf2783306" translate="yes" xml:space="preserve">
          <source>Accounting-Realtime-Required AVP Values</source>
          <target state="translated">会計-リアルタイム必須のAVP値</target>
        </trans-unit>
        <trans-unit id="a41e3ac9cf5023d32cd91b4a3e716042b6c367b5" translate="yes" xml:space="preserve">
          <source>Accounting-Record-Number AVP</source>
          <target state="translated">会計記録番号AVP</target>
        </trans-unit>
        <trans-unit id="b804c4b652a1521f5cb9135277fefe013043b5f6" translate="yes" xml:space="preserve">
          <source>Accounting-Record-Type AVP</source>
          <target state="translated">会計記録型AVP</target>
        </trans-unit>
        <trans-unit id="8df79aebdffebcd5564a4906eb6116d78fd976e9" translate="yes" xml:space="preserve">
          <source>Accounting-Record-Type AVP Values</source>
          <target state="translated">会計記録タイプのAVP値</target>
        </trans-unit>
        <trans-unit id="3f4954249bb9c6c0d9946303733718179dac9afc" translate="yes" xml:space="preserve">
          <source>Accounting-Request</source>
          <target state="translated">Accounting-Request</target>
        </trans-unit>
        <trans-unit id="cb2f33108011b0c4743b447ccd4a9acfb53d2777" translate="yes" xml:space="preserve">
          <source>Accounting-Sub-Session-Id AVP</source>
          <target state="translated">会計-サブセッション-ID AVP</target>
        </trans-unit>
        <trans-unit id="356f92ff6ca6eed8d6a653c61fd409eb10ae68df" translate="yes" xml:space="preserve">
          <source>Accounting-related messages and AVPs are defined in provided dictionaries. Their proper use is the user's responsibility.</source>
          <target state="translated">会計関連のメッセージやAVPは、提供されている辞書で定義されています。それらを適切に使用するのはユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="4b31db96c0a841f9a7113ac5bbc52a214e1829fa" translate="yes" xml:space="preserve">
          <source>Acct-Application-Id AVP</source>
          <target state="translated">会計申請ID AVP</target>
        </trans-unit>
        <trans-unit id="4cabe3c0597d0d6af37709b22cdb0a59a5dae54e" translate="yes" xml:space="preserve">
          <source>Acct-Interim-Interval AVP</source>
          <target state="translated">決算期中間インターバル AVP</target>
        </trans-unit>
        <trans-unit id="1e0b1bf1afd755a9ceed94d413ee8713ddf31cc4" translate="yes" xml:space="preserve">
          <source>Acct-Multi-Session-Id AVP</source>
          <target state="translated">会計マルチセッションID AVP</target>
        </trans-unit>
        <trans-unit id="73a3b6a3e03bc80ba04f6bde167f6434da42cc10" translate="yes" xml:space="preserve">
          <source>Acct-Session-Id AVP</source>
          <target state="translated">口座セッションID AVP</target>
        </trans-unit>
        <trans-unit id="1a968060d9b2a6b964d729cfbd1eea55cfdc2c19" translate="yes" xml:space="preserve">
          <source>Accumulated waiting time for this lock. This could be greater than actual wall clock time, it is accumulated for all threads. Trylock conflicts does not accumulate time.</source>
          <target state="translated">このロックのために蓄積された待ち時間。これは実際のウォールクロック時間よりも大きい可能性があり、すべてのスレッドに対して蓄積されます。Trylock conflicts は時間を蓄積しません。</target>
        </trans-unit>
        <trans-unit id="d9ecd9efddc0ef5836c8bbbde646a0d66732f097" translate="yes" xml:space="preserve">
          <source>Accumulates cover results over multiple tests. See section &lt;code&gt;&lt;a href=&quot;cover_chapter#cross_cover&quot;&gt;Cross Cover Analysis&lt;/a&gt;&lt;/code&gt; in the Users's Guide.</source>
          <target state="translated">複数のテストにわたるカバー結果を蓄積します。 &lt;code&gt;&lt;a href=&quot;cover_chapter#cross_cover&quot;&gt;Cross Cover Analysis&lt;/a&gt;&lt;/code&gt; 参照してくださいユーザーズガイドの。</target>
        </trans-unit>
        <trans-unit id="be2701277b8bc3bbce61a03a361606bf878d1187" translate="yes" xml:space="preserve">
          <source>Accuracy and precision of &lt;code&gt;&lt;a href=&quot;#OS_Monotonic_Time&quot;&gt;OS monotonic time&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#OS_Monotonic_Time&quot;&gt;OS monotonic time&lt;/a&gt;&lt;/code&gt; 精度と精度</target>
        </trans-unit>
        <trans-unit id="875e7dcdc327d43caf0dcdf9d04b310d14d9feaf" translate="yes" xml:space="preserve">
          <source>Accuracy and precision of &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; 精度と精度</target>
        </trans-unit>
        <trans-unit id="58eae709361b11b3ca7bd3fc358b5d94391cf26b" translate="yes" xml:space="preserve">
          <source>Acknowledges the start of the port.</source>
          <target state="translated">ポートの開始を確認します。</target>
        </trans-unit>
        <trans-unit id="788233b34a130f2756fb1eaafa64431bb5c3d2da" translate="yes" xml:space="preserve">
          <source>Acknowledgment of a successful TLS handshake. &lt;code&gt;Ref&lt;/code&gt; is the reference() received in the &lt;code&gt;{diameter, {tls, Ref, Type, Bool}}&lt;/code&gt; message in response to which the reply is sent. A transport must exit if a handshake is not successful.</source>
          <target state="translated">TLSハンドシェイクが成功したことの確認。 &lt;code&gt;Ref&lt;/code&gt; は &lt;code&gt;{diameter, {tls, Ref, Type, Bool}}&lt;/code&gt; 受け取ったreference（）です返信の送信に応じてメッセージでです。ハンドシェイクが成功しない場合、トランスポートは終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="f975f613537adf39477a68ad11e1dc4894dd6870" translate="yes" xml:space="preserve">
          <source>Action Mappings</source>
          <target state="translated">アクションマッピング</target>
        </trans-unit>
        <trans-unit id="2440fec108b517d1d709ba90c75d4f7a63c7e81f" translate="yes" xml:space="preserve">
          <source>ActionCall ::= {ActionFunction} | {ActionFunction, ActionTerm, ...}</source>
          <target state="translated">ActionCall ::={ActionFunction}の場合 | {ActionFunction,ActionTerm,...}</target>
        </trans-unit>
        <trans-unit id="5590c86022b5bc14c1ea74cf910bca92aa274578" translate="yes" xml:space="preserve">
          <source>ActionFunction ::= &lt;code&gt;set_seq_token&lt;/code&gt; | &lt;code&gt;get_seq_token&lt;/code&gt; | &lt;code&gt;message&lt;/code&gt; | &lt;code&gt;return_trace&lt;/code&gt; | &lt;code&gt;exception_trace&lt;/code&gt; | &lt;code&gt;process_dump&lt;/code&gt; | &lt;code&gt;enable_trace&lt;/code&gt; | &lt;code&gt;disable_trace&lt;/code&gt; | &lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;display&lt;/code&gt; | &lt;code&gt;caller&lt;/code&gt; | &lt;code&gt;set_tcw&lt;/code&gt; | &lt;code&gt;silent&lt;/code&gt;</source>
          <target state="translated">ActionFunction :: = &lt;code&gt;set_seq_token&lt;/code&gt; | &lt;code&gt;get_seq_token&lt;/code&gt; | &lt;code&gt;message&lt;/code&gt; | &lt;code&gt;return_trace&lt;/code&gt; | &lt;code&gt;exception_trace&lt;/code&gt; | &lt;code&gt;process_dump&lt;/code&gt; | &lt;code&gt;enable_trace&lt;/code&gt; | &lt;code&gt;disable_trace&lt;/code&gt; | &lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;display&lt;/code&gt; | &lt;code&gt;caller&lt;/code&gt; | &lt;code&gt;set_tcw&lt;/code&gt; | &lt;code&gt;silent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51c493fd8bfe5291ac344e060529e5b42558f385" translate="yes" xml:space="preserve">
          <source>ActionTerm ::= ConditionExpression | ActionCall</source>
          <target state="translated">ActionTerm ::=ConditionExpression | ActionCall</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="89ff6dbfdb936ca69e6587ae4d22e9a120904bf2" translate="yes" xml:space="preserve">
          <source>Actions :: [&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;] | &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">アクション:: [ &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; ] | &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="61334da16104ac9d91a8736e913a8cbee03e40e6" translate="yes" xml:space="preserve">
          <source>Actions are executed in the containing list order.</source>
          <target state="translated">アクションは、リストを含む順に実行されます。</target>
        </trans-unit>
        <trans-unit id="4975204a056c5025b62a4a29c1e32e8f3dc531af" translate="yes" xml:space="preserve">
          <source>Actions that set &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt; transition options &lt;/a&gt;&lt;/code&gt; override any previous of the same type, so the last in the containing list wins. For example, the last &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; overrides any previous &lt;code&gt;postpone()&lt;/code&gt; in the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt; transition options &lt;/a&gt;&lt;/code&gt; を設定するアクションは、同じタイプの以前のものをオーバーライドするため、含まれているリストの最後のものが優先されます。例えば、最後の &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; 以前にオーバーライド &lt;code&gt;postpone()&lt;/code&gt; リストに。</target>
        </trans-unit>
        <trans-unit id="6ef0f3b4c93f31bddb43b327dd452b51df2f0936" translate="yes" xml:space="preserve">
          <source>Actions that set &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; override any previous of the same type, so the last in the containing list wins. For example, the last &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; overrides any previous &lt;code&gt;event_timeout()&lt;/code&gt; in the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; を設定するアクションは、同じタイプの以前のタイプをオーバーライドするため、含まれているリストの最後のものが優先されます。たとえば、最後の &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; は以前の &lt;code&gt;event_timeout()&lt;/code&gt; をオーバーライドしますリストです。</target>
        </trans-unit>
        <trans-unit id="b1964869d062538b54d1a15f6f4171d706fef3d8" translate="yes" xml:space="preserve">
          <source>Actions that set &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; override any previous of the same type, so the last in the containing list wins. For example, the last &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; overrides any previous &lt;code&gt;postpone()&lt;/code&gt; in the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; を設定するアクションは、同じタイプの以前のタイプをオーバーライドするため、含まれているリストの最後のものが優先されます。例えば、最後の &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; 以前にオーバーライド &lt;code&gt;postpone()&lt;/code&gt; リストに。</target>
        </trans-unit>
        <trans-unit id="13b1df2d40bde8a02c4921e1004b0065de68e10c" translate="yes" xml:space="preserve">
          <source>Activates a connection to a remote user. When this is done the connection can be used to send messages (with SendMod:send_message/2). The ControlPid is the identifier of a process that controls the connection. That process will be supervised and if it dies, this will be detected and the UserMod:handle_disconnect/2 callback function will be invoked. See the megaco_user module for more info about the callback arguments. The connection may also explicitly be deactivated by invoking megaco:disconnect/2.</source>
          <target state="translated">リモートユーザへの接続を有効にします。これが行われると、その接続を使ってメッセージを送信することができます (SendMod:send_message/2 で)。ControlPid は接続を制御するプロセスの識別子です。そのプロセスは監視され、プロセスが終了した場合はそれが検出され、UserMod:handle_disconnect/2 コールバック関数が呼び出されます。コールバック引数の詳細については megaco_user モジュールを参照してください。megaco:disconnect/2 を呼び出すことで、接続を明示的に停止することもできます。</target>
        </trans-unit>
        <trans-unit id="f69ba29b1f84217c9d2ca2dc152317da71e06308" translate="yes" xml:space="preserve">
          <source>Activates a new checkpoint covering all Mnesia tables, including the schema, with maximum degree of redundancy, and performs a backup using &lt;code&gt;backup_checkpoint/2/3&lt;/code&gt;. The default value of the backup callback module &lt;code&gt;BackupMod&lt;/code&gt; is obtained by &lt;code&gt;mnesia:system_info(backup_module)&lt;/code&gt;.</source>
          <target state="translated">スキーマを含むすべてのMnesiaテーブルをカバーする新しいチェックポイントを最大限の冗長性でアクティブ化し、 &lt;code&gt;backup_checkpoint/2/3&lt;/code&gt; を使用してバックアップを実行します。バックアップコールバックモジュール &lt;code&gt;BackupMod&lt;/code&gt; のデフォルト値は、 &lt;code&gt;mnesia:system_info(backup_module)&lt;/code&gt; によって取得されます。</target>
        </trans-unit>
        <trans-unit id="0574212bd6baf73e32ac9c415b72677146bade9b" translate="yes" xml:space="preserve">
          <source>Activates all events at the debug level. On this level, the &lt;code&gt;Mnesia&lt;/code&gt; event handler starts subscribing to updates on all &lt;code&gt;Mnesia&lt;/code&gt; tables. This level is intended only for debugging small toy systems, as many large events can be generated.</source>
          <target state="translated">すべてのイベントをデバッグレベルでアクティブにします。このレベルでは、 &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーがすべての &lt;code&gt;Mnesia&lt;/code&gt; テーブルの更新のサブスクライブを開始します。多くの大きなイベントが生成される可能性があるため、このレベルは小さなおもちゃのシステムのデバッグのみを目的としています。</target>
        </trans-unit>
        <trans-unit id="1473502b15ef43d2fc312f7968ec2627f8afe701" translate="yes" xml:space="preserve">
          <source>Activates all events at the debug level. On this level, the Mnesia event handler starts subscribing to updates on all Mnesia tables. This level is intended only for debugging small toy systems, as many large events can be generated.</source>
          <target state="translated">デバッグレベルですべてのイベントをアクティブにします。このレベルでは、Mnesia イベントハンドラは、すべての Mnesia テーブルの更新のサブスクライブを開始します。このレベルは、多くの大規模なイベントを生成できるので、小さな玩具システムのデバッグ用にのみ意図されています。</target>
        </trans-unit>
        <trans-unit id="a11fef95fdd152ac782e603cddf000bf9537358d" translate="yes" xml:space="preserve">
          <source>Activates all events at the verbose level plus full trace of all debug events. These debug events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with &lt;code&gt;mnesia:subscribe/1&lt;/code&gt;. The events are always sent to the Mnesia event handler. On this debug level, the Mnesia event handler starts subscribing to updates in the schema table.</source>
          <target state="translated">詳細レベルのすべてのイベントと、すべてのデバッグイベントの完全なトレースをアクティブにします。これらのデバッグイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは &lt;code&gt;mnesia:subscribe/1&lt;/code&gt; でこれらのイベントをサブスクライブできます。イベントは常にMnesiaイベントハンドラーに送信されます。このデバッグレベルでは、Mnesiaイベントハンドラーがスキーマテーブルの更新のサブスクライブを開始します。</target>
        </trans-unit>
        <trans-unit id="d10f11346b4f9c94838ab97da164ecb5b326c009" translate="yes" xml:space="preserve">
          <source>Activates all events at the verbose level plus traces of all debug events. These debug events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with &lt;code&gt;mnesia:subscribe/1&lt;/code&gt;. The events are always sent to the &lt;code&gt;Mnesia&lt;/code&gt; event handler. On this debug level, the &lt;code&gt;Mnesia&lt;/code&gt; event handler starts subscribing to updates in the schema table.</source>
          <target state="translated">詳細レベルのすべてのイベントとすべてのデバッグイベントのトレースをアクティブにします。これらのデバッグイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは、 &lt;code&gt;mnesia:subscribe/1&lt;/code&gt; を使用してこれらのイベントをサブスクライブできます。イベントは常に &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーに送信されます。このデバッグレベルでは、 &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーがスキーマテーブルの更新のサブスクライブを開始します。</target>
        </trans-unit>
        <trans-unit id="6ded0de3f180c32378392899db72b086ca5f1741" translate="yes" xml:space="preserve">
          <source>Activates read data buffering. If &lt;code&gt;read/2&lt;/code&gt; calls are for significantly less than &lt;code&gt;Size&lt;/code&gt; bytes, read operations to the operating system are still performed for blocks of &lt;code&gt;Size&lt;/code&gt; bytes. The extra data is buffered and returned in subsequent &lt;code&gt;read/2&lt;/code&gt; calls, giving a performance gain as the number of operating system calls is reduced.</source>
          <target state="translated">読み取りデータのバッファリングをアクティブにします。場合は &lt;code&gt;read/2&lt;/code&gt; の呼び出しが大幅未満のためのものである &lt;code&gt;Size&lt;/code&gt; バイト、まだのブロックに対して実行されているオペレーティングシステムに読み取り操作 &lt;code&gt;Size&lt;/code&gt; バイト。余分なデータはバッファーに入れられ、後続の &lt;code&gt;read/2&lt;/code&gt; 呼び出しで返されます。これにより、オペレーティングシステムの呼び出し回数が減るので、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="eb6a9b28d658257a2883ec371985ebb9360570ed" translate="yes" xml:space="preserve">
          <source>Activates the fragmentation properties of an existing table. &lt;code&gt;FragProps&lt;/code&gt; is either to contain &lt;code&gt;{node_pool, Nodes}&lt;/code&gt; or be empty.</source>
          <target state="translated">既存のテーブルの断片化プロパティをアクティブ化します。 &lt;code&gt;FragProps&lt;/code&gt; は、 &lt;code&gt;{node_pool, Nodes}&lt;/code&gt; を含むか、空にするかのいずれかです。</target>
        </trans-unit>
        <trans-unit id="532f0aa046ec26e3e6682e682916731e989482e8" translate="yes" xml:space="preserve">
          <source>Activates tracing of important debug events. These events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with &lt;code&gt;mnesia:subscribe/1&lt;/code&gt;. The events are always sent to the Mnesia event handler.</source>
          <target state="translated">重要なデバッグイベントのトレースをアクティブにします。これらのイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは、 &lt;code&gt;mnesia:subscribe/1&lt;/code&gt; を使用してこれらのイベントをサブスクライブできます。イベントは常にMnesiaイベントハンドラーに送信されます。</target>
        </trans-unit>
        <trans-unit id="e0f95d91404d34111854383ce61fa17d9871d976" translate="yes" xml:space="preserve">
          <source>Activates tracing of important debug events. These events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with the function &lt;code&gt;&lt;a href=&quot;mnesia#subscribe-1&quot;&gt;mnesia:subscribe/1&lt;/a&gt;&lt;/code&gt;. The events are always sent to the &lt;code&gt;Mnesia&lt;/code&gt; event handler.</source>
          <target state="translated">重要なデバッグイベントのトレースをアクティブにします。これらのイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#subscribe-1&quot;&gt;mnesia:subscribe/1&lt;/a&gt;&lt;/code&gt; を使用してこれらのイベントをサブスクライブできます。イベントは常に &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーに送信されます。</target>
        </trans-unit>
        <trans-unit id="7f2c331b898e66e4e4d774932df99c6432852c98" translate="yes" xml:space="preserve">
          <source>Activates/deactivates tracing by changing the current trace pattern.</source>
          <target state="translated">現在のトレースパターンを変更してトレースを有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="29f45195e4be19fb8b96702dcdd15944ea37fdad" translate="yes" xml:space="preserve">
          <source>Active breakpoints are displayed in red and inactive breakpoints in blue.</source>
          <target state="translated">アクティブなブレークポイントは赤で、非アクティブなブレークポイントは青で表示されます。</target>
        </trans-unit>
        <trans-unit id="2ec1ddc09f5f20f205f66ac493ee50b1fd7b2567" translate="yes" xml:space="preserve">
          <source>Activity Events</source>
          <target state="translated">活動イベント</target>
        </trans-unit>
        <trans-unit id="a903c4b66a2fb224f4d96a51df759ac9a67bfc6d" translate="yes" xml:space="preserve">
          <source>Activity concept and various access contexts</source>
          <target state="translated">活動のコンセプトと様々なアクセスの文脈</target>
        </trans-unit>
        <trans-unit id="713a8072ef62aa0b1fde6095af47e4a910316756" translate="yes" xml:space="preserve">
          <source>Actual protocol version.</source>
          <target state="translated">現在のプロトコルのバージョン。</target>
        </trans-unit>
        <trans-unit id="c3e87cfb1bb3f9be88098c653af2df64757bc8b0" translate="yes" xml:space="preserve">
          <source>Actual ticket age shall be less than the ticket lifetime (stateless session tickets contain the servers timestamp when the ticket was issued).</source>
          <target state="translated">実際のチケットの年齢は、チケットの有効期限よりも短いものとします(ステートレスセッションチケットには、チケットが発行されたサーバーのタイムスタンプが含まれています)。</target>
        </trans-unit>
        <trans-unit id="91282b72e27e9203f0008e0bb427b78168c9ee89" translate="yes" xml:space="preserve">
          <source>Add 'makensis.exe' to your path environment:</source>
          <target state="translated">makensis.exe をパス環境に追加します。</target>
        </trans-unit>
        <trans-unit id="134344cda8fb9734c656b66e40554d208ac6e58b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;-ct_hooks&lt;/code&gt; as an argument to &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;. To add multiple CTHs using this method, append them to each other using the keyword &lt;code&gt;and&lt;/code&gt;, that is, &lt;code&gt;ct_run -ct_hooks cth1 [{debug,true}] and cth2 ...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-ct_hooks&lt;/code&gt; の引数として-ct_hooksを追加し &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; 。この方法を使用して複数のCTHを追加するには、キーワード &lt;code&gt;and&lt;/code&gt; を使用してそれらを互いに追加します。つまり、 &lt;code&gt;ct_run -ct_hooks cth1 [{debug,true}] and cth2 ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c736205df679d1eb6863a5f647010553ce017bf9" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;Incr&lt;/code&gt; to atomic.</source>
          <target state="translated">&lt;code&gt;Incr&lt;/code&gt; をアトミックに追加します。</target>
        </trans-unit>
        <trans-unit id="d03f5ebcb056f1a256b52c0c938b58b71f342864" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;Incr&lt;/code&gt; to counter at index &lt;code&gt;Ix&lt;/code&gt;.</source>
          <target state="translated">インデックス &lt;code&gt;Ix&lt;/code&gt; のカウンターに &lt;code&gt;Incr&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="d8718d4f36d948a3675c6bdc12db7b8c27966873" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;return_trace&lt;/code&gt; message if the function is of arity 3:</source>
          <target state="translated">関数がarity 3の場合は、 &lt;code&gt;return_trace&lt;/code&gt; メッセージを追加します。</target>
        </trans-unit>
        <trans-unit id="dcfe51c34611d10c0d112932679c857d2a6476fa" translate="yes" xml:space="preserve">
          <source>Add a filter to the specified handler.</source>
          <target state="translated">指定したハンドラにフィルタを追加します。</target>
        </trans-unit>
        <trans-unit id="95b618e55bafddbb2a2984de23f6ce57bb36d2c0" translate="yes" xml:space="preserve">
          <source>Add a handler that prints &lt;code&gt;debug&lt;/code&gt; log events to a file, while the default handler prints only up to &lt;code&gt;notice&lt;/code&gt; level events to standard out.</source>
          <target state="translated">&lt;code&gt;debug&lt;/code&gt; ログイベントをファイルに出力するハンドラーを追加しますが、デフォルトのハンドラーは、 &lt;code&gt;notice&lt;/code&gt; レベルのイベントまでのみ標準出力に出力します。</target>
        </trans-unit>
        <trans-unit id="988a7e297bf981c7e71c06b09b7717bd00d611be" translate="yes" xml:space="preserve">
          <source>Add a handler with the given configuration.</source>
          <target state="translated">与えられた設定でハンドラを追加します。</target>
        </trans-unit>
        <trans-unit id="07e4c199b9f19567f7bbd64299d17b2cc8c094ac" translate="yes" xml:space="preserve">
          <source>Add a primary filter to Logger.</source>
          <target state="translated">Logger にプライマリ フィルタを追加します。</target>
        </trans-unit>
        <trans-unit id="1970f7a8e650aa5473c699a8c07cc9a162ef1004" translate="yes" xml:space="preserve">
          <source>Add address (and port, if other than default) of the primary nameserver to use for &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_res(3)&lt;/code&gt; に使用するプライマリネームサーバーのアドレス（およびデフォルト以外の場合はポート）を追加します。</target>
        </trans-unit>
        <trans-unit id="1cfc1bd9fd579f7622617b9af78a944445ba8847" translate="yes" xml:space="preserve">
          <source>Add address (and port, if other than default) of the secondary nameserver for &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_res(3)&lt;/code&gt; のセカンダリネームサーバーのアドレス（およびデフォルト以外の場合はポート）を追加します。</target>
        </trans-unit>
        <trans-unit id="d8a12963c05fa3aec6cf7012ff1f7fc0a2d99e08" translate="yes" xml:space="preserve">
          <source>Add an entry. The entry must not exist.</source>
          <target state="translated">エントリを追加します。エントリは存在しない必要があります。</target>
        </trans-unit>
        <trans-unit id="6652a41804b950794ec5752c7d6fd942b05025cf" translate="yes" xml:space="preserve">
          <source>Add file and line number to log entries</source>
          <target state="translated">ログエントリにファイルと行番号を追加</target>
        </trans-unit>
        <trans-unit id="1e310729251dbd2e2aab36a457e446b150b20e5e" translate="yes" xml:space="preserve">
          <source>Add host entry to the hosts table.</source>
          <target state="translated">hostsテーブルにhostsエントリを追加します。</target>
        </trans-unit>
        <trans-unit id="064eb4472489455e1a24510aa444bd6d5e585d65" translate="yes" xml:space="preserve">
          <source>Add javac &lt;strong&gt;LAST&lt;/strong&gt; to your path environment in bash, in my case this means:</source>
          <target state="translated">javac &lt;strong&gt;LAST&lt;/strong&gt;をbashのパス環境に追加します。私の場合、これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="246e6fb32e5a050387dbde2f21177185267ea2d6" translate="yes" xml:space="preserve">
          <source>Add javac to your path environment, in my case this means:</source>
          <target state="translated">パス環境に javac を追加します。</target>
        </trans-unit>
        <trans-unit id="3c0bb0d661a36f1c95bc663da03400bb07c43351" translate="yes" xml:space="preserve">
          <source>Add or update configuration data for the specified handler. If the given &lt;code&gt;Key&lt;/code&gt; already exists, its associated value will be changed to &lt;code&gt;Value&lt;/code&gt;. If it does not exist, it will be added.</source>
          <target state="translated">指定されたハンドラーの構成データを追加または更新します。指定された &lt;code&gt;Key&lt;/code&gt; すでに存在する場合、それに関連付けられた値は &lt;code&gt;Value&lt;/code&gt; に変更されます。存在しない場合は追加されます。</target>
        </trans-unit>
        <trans-unit id="7bc4a78cb8fcc809731f59f9c373269672f429fa" translate="yes" xml:space="preserve">
          <source>Add or update configuration data for the specified handler. If the given &lt;code&gt;Key&lt;/code&gt; already exists, its associated value will be changed to the given value. If it does not exist, it will be added.</source>
          <target state="translated">指定されたハンドラーの構成データを追加または更新します。指定された &lt;code&gt;Key&lt;/code&gt; すでに存在する場合、それに関連付けられた値は指定された値に変更されます。存在しない場合は追加されます。</target>
        </trans-unit>
        <trans-unit id="2e23ac8cf9bd396ad94605da91fe04cfdf9b6acd" translate="yes" xml:space="preserve">
          <source>Add or update primary configuration data for Logger. If the given &lt;code&gt;Key&lt;/code&gt; already exists, its associated value will be changed to &lt;code&gt;Value&lt;/code&gt;. If it does not exist, it will be added.</source>
          <target state="translated">ロガーのプライマリ設定データを追加または更新します。指定された &lt;code&gt;Key&lt;/code&gt; すでに存在する場合、それに関連付けられた値は &lt;code&gt;Value&lt;/code&gt; に変更されます。存在しない場合は追加されます。</target>
        </trans-unit>
        <trans-unit id="21e8ff5c385c237ae3065c84dd8d4d8e0844640c" translate="yes" xml:space="preserve">
          <source>Add or update primary configuration data for Logger. If the given &lt;code&gt;Key&lt;/code&gt; already exists, its associated value will be changed to the given value. If it does not exist, it will be added.</source>
          <target state="translated">Loggerのプライマリ構成データを追加または更新します。指定された &lt;code&gt;Key&lt;/code&gt; すでに存在する場合、それに関連付けられた値は指定された値に変更されます。存在しない場合は追加されます。</target>
        </trans-unit>
        <trans-unit id="fa1f218791abec296d536eef9aee8fee9c4907e8" translate="yes" xml:space="preserve">
          <source>Add search domains for &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_res(3)&lt;/code&gt; の検索ドメインを追加します。</target>
        </trans-unit>
        <trans-unit id="1ed69d0e5ae060c18a4527cc0780a8f4a4070ca5" translate="yes" xml:space="preserve">
          <source>Add tag &lt;code&gt;ct_hooks&lt;/code&gt; to your &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt; Test Specification&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;ct_hooks&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt; Test Specification&lt;/a&gt;&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="fd1016b584a0c08284e356371e0b67d2c6544a4a" translate="yes" xml:space="preserve">
          <source>Add tag &lt;code&gt;ct_hooks&lt;/code&gt; to your &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specification&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;ct_hooks&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specification&lt;/a&gt;&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="62bfcf8bed94dcc27f1ebd702bd7df63f5908679" translate="yes" xml:space="preserve">
          <source>Add tag &lt;code&gt;ct_hooks&lt;/code&gt; to your call to &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; への呼び出しにタグ &lt;code&gt;ct_hooks&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="bb8bd196c7c5b5791600663f12d69529068e2cf5" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;{scanner, flex}&lt;/code&gt; (or similar) directive to an Erlang system config file for the megaco app (see &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; chapter for details).</source>
          <target state="translated">追加 &lt;code&gt;{scanner, flex}&lt;/code&gt; （参照MEGACOアプリのアーランシステム設定ファイルに（または類似の）指示を &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; 詳細については、章）。</target>
        </trans-unit>
        <trans-unit id="a2012ba10173073b8d6e03fc90ee362531d7db30" translate="yes" xml:space="preserve">
          <source>Add the applications Crypto, Public Key, and SSL with their current version numbers after the STDLIB application.</source>
          <target state="translated">STDLIBアプリケーションの後に、Crypto、Public Key、SSLのアプリケーションを現在のバージョン番号で追加します。</target>
        </trans-unit>
        <trans-unit id="3f47e924c15f0cebe23f7a60a12208b6f3fe188b" translate="yes" xml:space="preserve">
          <source>Add the engine to OpenSSL's internal list.</source>
          <target state="translated">エンジンをOpenSSLの内部リストに追加します。</target>
        </trans-unit>
        <trans-unit id="fc1eaff143827738e997da2b572220e89eec79fb" translate="yes" xml:space="preserve">
          <source>Add the filter</source>
          <target state="translated">フィルターを追加</target>
        </trans-unit>
        <trans-unit id="cf34fb9a5fda73afda9f1d571b702839ff2f58b3" translate="yes" xml:space="preserve">
          <source>Add the following directive to the module:</source>
          <target state="translated">モジュールに以下のディレクティブを追加します。</target>
        </trans-unit>
        <trans-unit id="497564ebabd956c895ba8a4ea1a4bb25e8ed7093" translate="yes" xml:space="preserve">
          <source>Add transport capability to a service.</source>
          <target state="translated">サービスにトランスポート機能を追加します。</target>
        </trans-unit>
        <trans-unit id="ae43487688376dc95ae859ba01f32a0ade700fa9" translate="yes" xml:space="preserve">
          <source>Add-On Application</source>
          <target state="translated">アドオンアプリケーション</target>
        </trans-unit>
        <trans-unit id="a34d04c7e63a5b637ab5047d8987b49d86783a46" translate="yes" xml:space="preserve">
          <source>Added in OTP 23.2</source>
          <target state="translated">OTP 23.2で追加</target>
        </trans-unit>
        <trans-unit id="e83212da8655f0855cd75f303dd85d4cf0dc4e2d" translate="yes" xml:space="preserve">
          <source>Adding Own Actions</source>
          <target state="translated">独自のアクションの追加</target>
        </trans-unit>
        <trans-unit id="6a12811718bf0eb0d5f20cc44584c455597c9de0" translate="yes" xml:space="preserve">
          <source>Adding Patches</source>
          <target state="translated">パッチの追加</target>
        </trans-unit>
        <trans-unit id="e1377afcaa6077fc60c3ef67a50fc7f61a7ad112" translate="yes" xml:space="preserve">
          <source>Adding Records and Relationships to Database</source>
          <target state="translated">データベースにレコードと関係性を追加する</target>
        </trans-unit>
        <trans-unit id="22ba7777616ece673914dfbc3af9096a68b87e29" translate="yes" xml:space="preserve">
          <source>Adding an application means that the modules defined by the &lt;code&gt;modules&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file are loaded using &lt;code&gt;add_module&lt;/code&gt;.</source>
          <target state="translated">アプリケーションを追加するということは、 &lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;modules&lt;/code&gt; キーで定義されたモジュールが &lt;code&gt;add_module&lt;/code&gt; を使用してロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="19baa62e86ec3c161512eb728cf268b6e381fb8a" translate="yes" xml:space="preserve">
          <source>Adding an application means that the modules defined by the &lt;code&gt;modules&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file are loaded using a number of &lt;code&gt;add_module&lt;/code&gt; instructions, and then the application is started.</source>
          <target state="translated">アプリケーションの追加とは、 &lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;modules&lt;/code&gt; キーで定義されたモジュールが、いくつかの &lt;code&gt;add_module&lt;/code&gt; 命令を使用してロードされ、その後アプリケーションが起動されることを意味します。</target>
        </trans-unit>
        <trans-unit id="6dd28665b92c3d1eafe29d80d8f4b9041dfdeca0" translate="yes" xml:space="preserve">
          <source>Adding and Deleting Child Processes</source>
          <target state="translated">子プロセスの追加と削除</target>
        </trans-unit>
        <trans-unit id="4a2fed64edcf79517387cddb884610573fd90ba1" translate="yes" xml:space="preserve">
          <source>Adding patches</source>
          <target state="translated">パッチの追加</target>
        </trans-unit>
        <trans-unit id="9aa3df6db85161c52e69b8f34d6e3268949dc0a1" translate="yes" xml:space="preserve">
          <source>Adding the &lt;code&gt;fop&lt;/code&gt; script (in &lt;code&gt;$FOP_HOME&lt;/code&gt;) to your &lt;code&gt;$PATH&lt;/code&gt;, either by adding &lt;code&gt;$FOP_HOME&lt;/code&gt; to &lt;code&gt;$PATH&lt;/code&gt;, or by copying the &lt;code&gt;fop&lt;/code&gt; script to a directory already in your &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">追加 &lt;code&gt;fop&lt;/code&gt; （でスクリプト &lt;code&gt;$FOP_HOME&lt;/code&gt; あなたに） &lt;code&gt;$PATH&lt;/code&gt; 追加することにより、いずれか、 &lt;code&gt;$FOP_HOME&lt;/code&gt; する &lt;code&gt;$PATH&lt;/code&gt; 、またはコピーすることにより、 &lt;code&gt;fop&lt;/code&gt; あなたにすでにディレクトリにスクリプトを &lt;code&gt;$PATH&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38751bf8e4b616e26910db8b22c357a8c20a53f2" translate="yes" xml:space="preserve">
          <source>Adding the location of your installation of &lt;code&gt;fop&lt;/code&gt; in &lt;code&gt;$FOP_HOME&lt;/code&gt;.</source>
          <target state="translated">インストールの場所の追加 &lt;code&gt;fop&lt;/code&gt; で &lt;code&gt;$FOP_HOME&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab0b27d891b1318285ee4899ad6b140de6e4ed3b" translate="yes" xml:space="preserve">
          <source>Additional information and links of interest for Erlang programmers can be found on the Erlang Open Source site &lt;a href=&quot;http://www.erlang.org/&quot;&gt;http://www.erlang.org&lt;/a&gt;.</source>
          <target state="translated">Erlangプログラマー向けの追加情報および興味のあるリンクは、Erlangオープンソースサイト&lt;a href=&quot;http://www.erlang.org/&quot;&gt;http://www.erlang.orgにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6afdeb8447e9059c599becedc9101b844f957850" translate="yes" xml:space="preserve">
          <source>Additionally, values that can be encoded are limited by way of their encoding as four octets as required by RFC 6733 with the required extension from RFC 2030. In particular, only values between &lt;code&gt;{{1968,1,20},{3,14,8}}&lt;/code&gt; and &lt;code&gt;{{2104,2,26},{9,42,23}}&lt;/code&gt; (both inclusive) can be encoded.</source>
          <target state="translated">さらに、エンコードできる値は、RFC 6733で要求されているように、RFC 2030からの必要な拡張子を持つ4オクテットとしてのエンコードによって制限されています。特に、 &lt;code&gt;{{1968,1,20},{3,14,8}}&lt;/code&gt; および &lt;code&gt;{{2104,2,26},{9,42,23}}&lt;/code&gt; （両方を含む）をエンコードできます。</target>
        </trans-unit>
        <trans-unit id="cb4f94d5cabe0fc39f4035959e69499b50e9e3b2" translate="yes" xml:space="preserve">
          <source>Address-to-name translation in a protocol-independant manner.</source>
          <target state="translated">プロトコルに依存しない方法でのアドレスから名前への変換。</target>
        </trans-unit>
        <trans-unit id="74fda4b3ec4ffdc7738f6833bc3191a5b59bbcea" translate="yes" xml:space="preserve">
          <source>Addresses as inputs to functions can be either a string or a tuple. For example, the IP address 150.236.20.73 can be passed to &lt;code&gt;gethostbyaddr/1&lt;/code&gt;, either as string &lt;code&gt;&quot;150.236.20.73&quot;&lt;/code&gt; or as tuple &lt;code&gt;{150, 236, 20, 73}&lt;/code&gt;.</source>
          <target state="translated">関数への入力としてのアドレスは、文字列またはタプルです。たとえば、IPアドレス150.236.20.73は、文字列 &lt;code&gt;&quot;150.236.20.73&quot;&lt;/code&gt; またはタプル &lt;code&gt;{150, 236, 20, 73}&lt;/code&gt; 150、236、20、73}として &lt;code&gt;gethostbyaddr/1&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="f6ffba73db48bc15c7ed64cbfce1198067c6f6ff" translate="yes" xml:space="preserve">
          <source>Addresses besides &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt; ip_address() &lt;/a&gt;&lt;/code&gt; ones that are returned from socket API functions. See in particular &lt;code&gt;&lt;a href=&quot;#type-local_address&quot;&gt; local_address(). &lt;/a&gt;&lt;/code&gt; The &lt;code&gt;unspec&lt;/code&gt; family corresponds to AF_UNSPEC and can occur if the other side has no socket address. The &lt;code&gt;undefined&lt;/code&gt; family can only occur in the unlikely event of an address family that the VM does not recognize.</source>
          <target state="translated">ソケットAPI関数から返される &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt; ip_address() &lt;/a&gt;&lt;/code&gt; 以外のアドレス。特に &lt;code&gt;&lt;a href=&quot;#type-local_address&quot;&gt; local_address(). &lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;unspec&lt;/code&gt; 家族がAF_UNSPECに対応し、他側は何のソケットアドレスを持っていない場合に発生することができます。 &lt;code&gt;undefined&lt;/code&gt; 家族は唯一のVMが認識されないことをアドレスファミリの万が一に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="919ffc168cee16019d09aa5279148893d8d24a34" translate="yes" xml:space="preserve">
          <source>Addresses besides &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; ones that are returned from socket API functions. See in particular &lt;code&gt;&lt;a href=&quot;#type-local_address&quot;&gt;local_address().&lt;/a&gt;&lt;/code&gt; The &lt;code&gt;unspec&lt;/code&gt; family corresponds to AF_UNSPEC and can occur if the other side has no socket address. The &lt;code&gt;undefined&lt;/code&gt; family can only occur in the unlikely event of an address family that the VM does not recognize.</source>
          <target state="translated">ソケットAPI関数から返される &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; 以外のアドレス。特に &lt;code&gt;&lt;a href=&quot;#type-local_address&quot;&gt;local_address().&lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;unspec&lt;/code&gt; 家族がAF_UNSPECに対応し、他側は何のソケットアドレスを持っていない場合に発生することができます。 &lt;code&gt;undefined&lt;/code&gt; 家族は唯一のVMが認識されないことをアドレスファミリの万が一に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e5d78a2b44c9f8c46bb6a05a403783dea60e8b77" translate="yes" xml:space="preserve">
          <source>Addresses to the test plant or other instruments</source>
          <target state="translated">テストプラントやその他の機器への住所</target>
        </trans-unit>
        <trans-unit id="e2dc16d39802f8e13757680f2285e270d512d4d0" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Dir&lt;/code&gt; to the beginning of the code path. If &lt;code&gt;Dir&lt;/code&gt; exists, it is removed from the old position in the code path.</source>
          <target state="translated">コードパスの先頭に &lt;code&gt;Dir&lt;/code&gt; を追加します。 &lt;code&gt;Dir&lt;/code&gt; が存在する場合は、コードパスの古い位置から削除されます。</target>
        </trans-unit>
        <trans-unit id="926f262a813d5bf3968371cfef08e827663b2a16" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Dir&lt;/code&gt; to the code path. The directory is added as the last directory in the new path. If &lt;code&gt;Dir&lt;/code&gt; already exists in the path, it is not added.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; をコードパスに追加します。ディレクトリは、新しいパスの最後のディレクトリとして追加されます。 &lt;code&gt;Dir&lt;/code&gt; がパスに既に存在する場合、それは追加されません。</target>
        </trans-unit>
        <trans-unit id="ca41b9b5a14be7cc19bac8bafe3b381efcc40caa" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Dir&lt;/code&gt; to the list of directories to be searched when including a file. When encountering an &lt;code&gt;-include&lt;/code&gt; or &lt;code&gt;-include_lib&lt;/code&gt; directive, the compiler searches for header files in the following directories:</source>
          <target state="translated">ファイルを含めるときに検索するディレクトリのリストに &lt;code&gt;Dir&lt;/code&gt; を追加します。遭遇したとき &lt;code&gt;-include&lt;/code&gt; や &lt;code&gt;-include_lib&lt;/code&gt; ディレクティブ、次のディレクトリにあるヘッダファイルのコンパイラ検索を：</target>
        </trans-unit>
        <trans-unit id="5307e57c8c5d61db386c45a450b3023f9b59e82e" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;IncludeDir&lt;/code&gt; to the search-path for &lt;code&gt;.asn1db&lt;/code&gt; and &lt;code&gt;ASN.1&lt;/code&gt; source files. The compiler tries to open an &lt;code&gt;.asn1db&lt;/code&gt; file when a module imports definitions from another &lt;code&gt;ASN.1&lt;/code&gt; module. If no &lt;code&gt;.asn1db&lt;/code&gt; file is found, the &lt;code&gt;ASN.1&lt;/code&gt; source file is parsed. Several &lt;code&gt;{i, IncludeDir}&lt;/code&gt; can be given.</source>
          <target state="translated">&lt;code&gt;IncludeDir&lt;/code&gt; を &lt;code&gt;.asn1db&lt;/code&gt; および &lt;code&gt;ASN.1&lt;/code&gt; ソースファイルの検索パスに追加します。モジュールが別の &lt;code&gt;ASN.1&lt;/code&gt; モジュールから定義をインポートすると、コンパイラーは &lt;code&gt;.asn1db&lt;/code&gt; ファイルを開こうとします。 &lt;code&gt;.asn1db&lt;/code&gt; ファイルが見つからない場合、 &lt;code&gt;ASN.1&lt;/code&gt; ソースファイルが解析されます。いくつかの &lt;code&gt;{i, IncludeDir}&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="595c4b05c70f5ee3afd4c0ee71bd2a9507a8d8e9" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Increment&lt;/code&gt; to the value associated with &lt;code&gt;Key&lt;/code&gt; and store this value. If &lt;code&gt;Key&lt;/code&gt; is not present in the dictionary, &lt;code&gt;Increment&lt;/code&gt; is stored as the first value.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 関連付けられた値に &lt;code&gt;Increment&lt;/code&gt; を追加し、この値を格納します。辞書に &lt;code&gt;Key&lt;/code&gt; が存在しない場合、 &lt;code&gt;Increment&lt;/code&gt; が最初の値として格納されます。</target>
        </trans-unit>
        <trans-unit id="9cf5a5933a7780d09616786318d8b162063b8502" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Increment&lt;/code&gt; to the value associated with &lt;code&gt;Key&lt;/code&gt; and stores this value. If &lt;code&gt;Key&lt;/code&gt; is not present in the dictionary, &lt;code&gt;Increment&lt;/code&gt; is stored as the first value.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 関連付けられた値に &lt;code&gt;Increment&lt;/code&gt; を追加し、この値を格納します。辞書に &lt;code&gt;Key&lt;/code&gt; が存在しない場合、 &lt;code&gt;Increment&lt;/code&gt; が最初の値として格納されます。</target>
        </trans-unit>
        <trans-unit id="608d4ac3b1f40dea43a70f3ee04cd69ef181057c" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;Slave&lt;/code&gt; node to the list of allowed slave hosts.</source>
          <target state="translated">許可されたスレーブホストのリストに &lt;code&gt;Slave&lt;/code&gt; ノードを追加します。</target>
        </trans-unit>
        <trans-unit id="c8419b1c93b9fd6c91cbede4425bbc8634cca3f1" translate="yes" xml:space="preserve">
          <source>Adds a USM security data (user) to the agent config. Equivalent to one line in the &lt;code&gt;usm.conf&lt;/code&gt; file.</source>
          <target state="translated">USMセキュリティデータ（ユーザー）をエージェント構成に追加します。 &lt;code&gt;usm.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="608718b6fe3ec7101404f6c3f283054c442dd2b4" translate="yes" xml:space="preserve">
          <source>Adds a access definition to the agent config. Equivalent to one vacmAccess-line in the &lt;code&gt;vacm.conf&lt;/code&gt; file.</source>
          <target state="translated">エージェント構成にアクセス定義を追加します。 &lt;code&gt;vacm.conf&lt;/code&gt; ファイルの1つのvacmAccess行に相当します。</target>
        </trans-unit>
        <trans-unit id="56be82c63eeffefdb9fecc96c8582dde485169c1" translate="yes" xml:space="preserve">
          <source>Adds a comment to the zip archive.</source>
          <target state="translated">zip アーカイブにコメントを追加します。</target>
        </trans-unit>
        <trans-unit id="43e098c039b116cd95896a1756a343c44df7c071" translate="yes" xml:space="preserve">
          <source>Adds a community to the agent config. Equivalent to one line in the &lt;code&gt;community.conf&lt;/code&gt; file.</source>
          <target state="translated">コミュニティをエージェント構成に追加します。 &lt;code&gt;community.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="45955c71ab38b246ddf99aa7e08be1cf306c82b3" translate="yes" xml:space="preserve">
          <source>Adds a context to the agent config. Equivalent to one line in the &lt;code&gt;context.conf&lt;/code&gt; file.</source>
          <target state="translated">コンテキストをエージェント構成に追加します。 &lt;code&gt;context.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="6c32cf7ccbd49be4e1811292b2c307f4eba42f61" translate="yes" xml:space="preserve">
          <source>Adds a driver entry to the list of drivers known by Erlang. The &lt;code&gt;&lt;a href=&quot;driver_entry#init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; function of parameter &lt;code&gt;de&lt;/code&gt; is called.</source>
          <target state="translated">Erlangが認識しているドライバーのリストにドライバーエントリを追加します。パラメータ &lt;code&gt;de&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;driver_entry#init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d07970fe182b9d81897e40e78d3b14e7a4e7a0d7" translate="yes" xml:space="preserve">
          <source>Adds a file to a tar file that has been opened for writing by &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; によって書き込み用に開かれたtarファイルにファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="b2fca474d01b00ce9ba861cfe769df64577ac35b" translate="yes" xml:space="preserve">
          <source>Adds a file to a tar file that has been opened for writing by &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;. This function accepts the same options as &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; によって書き込み用に開かれたtarファイルにファイルを追加します。この関数は、 &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3&lt;/a&gt;&lt;/code&gt; と同じオプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5eccbecba42ae4288806c579ad8b8fbf3b51a728" translate="yes" xml:space="preserve">
          <source>Adds a fragment to a fragmented table. All records in one of the old fragments are rehashed and about half of them are moved to the new (last) fragment. All other fragmented tables, which refer to this table in their foreign key, automatically get a new fragment. Also, their records are dynamically rehashed in the same manner as for the main table.</source>
          <target state="translated">フラグメント化されたテーブルにフラグメントを追加します。古いフラグメントの1つに含まれるすべてのレコードが再配置され、その約半分が新しいフラグメントに移動されます。他のすべてのフラグメント化されたテーブルは、外部キーでこのテーブルを参照しているため、自動的に新しいフラグメントを取得します。また、それらのレコードは、メインテーブルの場合と同じように動的にリハッシュされます。</target>
        </trans-unit>
        <trans-unit id="d84d2fb93ae834309e6167a0b3e43d9fab2545e1" translate="yes" xml:space="preserve">
          <source>Adds a host key to the set of trusted host keys.</source>
          <target state="translated">信頼できるホスト鍵のセットにホスト鍵を追加します。</target>
        </trans-unit>
        <trans-unit id="2d77c18b4124fe87017036ce4362ca94cf644272" translate="yes" xml:space="preserve">
          <source>Adds a module and its &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The module will not be member of any application. Returns the name of the module.</source>
          <target state="translated">モジュールとその &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。モジュールはどのアプリケーションのメンバーにもなりません。モジュールの名前を返します。</target>
        </trans-unit>
        <trans-unit id="32c8a7869e19433d754f5fcd1913f72de6ee2803" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;Key&lt;/code&gt; to the process dictionary, associated with the value &lt;code&gt;Val&lt;/code&gt;, and returns &lt;code&gt;undefined&lt;/code&gt;. If &lt;code&gt;Key&lt;/code&gt; exists, the old value is deleted and replaced by &lt;code&gt;Val&lt;/code&gt;, and the function returns the old value. Example:</source>
          <target state="translated">値 &lt;code&gt;Val&lt;/code&gt; に関連付けられた新しい &lt;code&gt;Key&lt;/code&gt; をプロセスディクショナリに追加し、 &lt;code&gt;undefined&lt;/code&gt; を返します。場合は &lt;code&gt;Key&lt;/code&gt; 存在する場合、古い値が削除さに置き換えられ &lt;code&gt;Val&lt;/code&gt; 、および機能は、以前の値を返します。例：</target>
        </trans-unit>
        <trans-unit id="72a77907fe15211efb4ac1705211f4a6082a3750" translate="yes" xml:space="preserve">
          <source>Adds a new event handler in the same way as &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;, but also supervises the connection between the event handler and the calling process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; と同じ方法で新しいイベントハンドラーを追加しますが、イベントハンドラーと呼び出しプロセス間の接続も監視します。</target>
        </trans-unit>
        <trans-unit id="e9446fd51850eeb6666eac3dc67fdb3d82b72082" translate="yes" xml:space="preserve">
          <source>Adds a new event handler to event manager &lt;code&gt;EventMgrRef&lt;/code&gt;. The event manager calls &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; to initiate the event handler and its internal state.</source>
          <target state="translated">新しいイベントハンドラーをイベントマネージャー &lt;code&gt;EventMgrRef&lt;/code&gt; に追加します。イベントマネージャは &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; を呼び出して、イベントハンドラとその内部状態を開始します。</target>
        </trans-unit>
        <trans-unit id="be923232cecb872d45d1007a0378c8bbbe25c6cc" translate="yes" xml:space="preserve">
          <source>Adds a new event handler to the error logger. The event handler must be implemented as a &lt;code&gt;gen_event&lt;/code&gt; callback module, see &lt;code&gt;gen_event(3)&lt;/code&gt;.</source>
          <target state="translated">エラーロガーに新しいイベントハンドラーを追加します。イベントハンドラーは、 &lt;code&gt;gen_event&lt;/code&gt; コールバックモジュールとして実装する必要があります &lt;code&gt;gen_event(3)&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="346f98f933f954790f0ea34b8324039679ac74dd" translate="yes" xml:space="preserve">
          <source>Adds a node to &lt;code&gt;node_pool&lt;/code&gt;. The new node pool affects the list returned from the function &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, frag_dist)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ノードを &lt;code&gt;node_pool&lt;/code&gt; に追加します。新しいノードプールは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, frag_dist)&lt;/a&gt;&lt;/code&gt; から返されるリストに影響します。</target>
        </trans-unit>
        <trans-unit id="35b3eb9263608d380a272fe1f7c6c1eafd65bf84" translate="yes" xml:space="preserve">
          <source>Adds a notify definition to the agent config. Equivalent to one line in the &lt;code&gt;notify.conf&lt;/code&gt; file.</source>
          <target state="translated">通知定義をエージェント構成に追加します。 &lt;code&gt;notify.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="13890bf5b34b3baf9845e8775db87c295022c6ec" translate="yes" xml:space="preserve">
          <source>Adds a phony target for each dependency.</source>
          <target state="translated">依存関係ごとに偽のターゲットを追加します。</target>
        </trans-unit>
        <trans-unit id="07656b9ba19395d09fa6add9f69eacc86c1efcdf" translate="yes" xml:space="preserve">
          <source>Adds a reference to resource object &lt;code&gt;obj&lt;/code&gt; obtained from &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt; enif_alloc_resource&lt;/a&gt;&lt;/code&gt;. Each call to &lt;code&gt;enif_keep_resource&lt;/code&gt; for an object must be balanced by a call to &lt;code&gt;&lt;a href=&quot;#enif_release_resource&quot;&gt; enif_release_resource&lt;/a&gt;&lt;/code&gt; before the object is destructed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt; enif_alloc_resource&lt;/a&gt;&lt;/code&gt; から取得したリソースオブジェクト &lt;code&gt;obj&lt;/code&gt; への参照を追加します。オブジェクトに対する &lt;code&gt;enif_keep_resource&lt;/code&gt; の各呼び出しは、オブジェクトが破棄される前に &lt;code&gt;&lt;a href=&quot;#enif_release_resource&quot;&gt; enif_release_resource&lt;/a&gt;&lt;/code&gt; の呼び出しとバランスを取る必要があります。</target>
        </trans-unit>
        <trans-unit id="29b1ac0ca171003684f30d397e314620318042ec" translate="yes" xml:space="preserve">
          <source>Adds a reference to resource object &lt;code&gt;obj&lt;/code&gt; obtained from &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt;. Each call to &lt;code&gt;enif_keep_resource&lt;/code&gt; for an object must be balanced by a call to &lt;code&gt;&lt;a href=&quot;#enif_release_resource&quot;&gt;enif_release_resource&lt;/a&gt;&lt;/code&gt; before the object is destructed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt; から取得したリソースオブジェクト &lt;code&gt;obj&lt;/code&gt; への参照を追加します。オブジェクトを &lt;code&gt;&lt;a href=&quot;#enif_release_resource&quot;&gt;enif_release_resource&lt;/a&gt;&lt;/code&gt; 前に、オブジェクトのenif_keep_resourceを呼び出すたびに、enif_release_resourceを呼び出してバランスを &lt;code&gt;enif_keep_resource&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="ac2aa5a6a26bf2accad0209a44849095d34310fd" translate="yes" xml:space="preserve">
          <source>Adds a release, the applications of the release, the modules of the applications, and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of the modules to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The applications will be members of the release, and the modules will be members of the applications. The default is to use the base name of the directory as release name, but this can be overridden by the &lt;code&gt;name&lt;/code&gt; option. Returns the name of the release.</source>
          <target state="translated">リリース、リリースのアプリケーション、アプリケーションのモジュール、および &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。アプリケーションはリリースのメンバーになり、モジュールはアプリケーションのメンバーになります。デフォルトでは、ディレクトリのベース名をリリース名として使用しますが、これは &lt;code&gt;name&lt;/code&gt; オプションで上書きできます。リリースの名前を返します。</target>
        </trans-unit>
        <trans-unit id="5963e0eadddadc6570ac86b11276f6f4e83b3156" translate="yes" xml:space="preserve">
          <source>Adds a security to group definition to the agent config. Equivalent to one vacmSecurityToGroup-line in the &lt;code&gt;vacm.conf&lt;/code&gt; file.</source>
          <target state="translated">セキュリティをグループ定義にエージェント構成に追加します。 &lt;code&gt;vacm.conf&lt;/code&gt; ファイルの1つのvacmSecurityToGroup行に相当します。</target>
        </trans-unit>
        <trans-unit id="d4f785833568b0e86ada1e532e1405f500e20a42" translate="yes" xml:space="preserve">
          <source>Adds a small tag to each allocated block that contains basic information about what it is and who allocated it. See &lt;code&gt;&lt;a href=&quot;#M_atags&quot;&gt;+M&amp;lt;S&amp;gt;atags&lt;/a&gt;&lt;/code&gt; for a more complete description.</source>
          <target state="translated">割り当てられた各ブロックに、それが何で、誰が割り当てたかについての基本情報を含む小さなタグを追加します。詳細な説明については、 &lt;code&gt;&lt;a href=&quot;#M_atags&quot;&gt;+M&amp;lt;S&amp;gt;atags&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0dfd9dbecdeed6491e670fb60727a24505e80431" translate="yes" xml:space="preserve">
          <source>Adds a small tag to each allocated block that contains basic information about what it is and who allocated it. Use the &lt;code&gt;instrument&lt;/code&gt; module to inspect this information.</source>
          <target state="translated">割り当てられた各ブロックに、それが何で、誰が割り当てたかについての基本情報を含む小さなタグを追加します。 &lt;code&gt;instrument&lt;/code&gt; モジュールを使用して、この情報を検査してください。</target>
        </trans-unit>
        <trans-unit id="e4864b206394f8b2d7b76e4230a5c12a58cc9d0e" translate="yes" xml:space="preserve">
          <source>Adds a target address definition to the agent config. Equivalent to one line in the &lt;code&gt;target_addr.conf&lt;/code&gt; file.</source>
          <target state="translated">ターゲットアドレス定義をエージェント構成に追加します。 &lt;code&gt;target_addr.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="82b2d6b8384860d53fc589e045f4515d51086799" translate="yes" xml:space="preserve">
          <source>Adds a target parameter definition to the agent config. Equivalent to one line in the &lt;code&gt;target_params.conf&lt;/code&gt; file.</source>
          <target state="translated">ターゲットパラメータ定義をエージェント構成に追加します。 &lt;code&gt;target_params.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="5794b16429f3c188c00edeb3043c4596518ea624" translate="yes" xml:space="preserve">
          <source>Adds a view tree family definition to the agent config. Equivalent to one vacmViewTreeFamily-line in the &lt;code&gt;vacm.conf&lt;/code&gt; file.</source>
          <target state="translated">ビューツリーファミリ定義をエージェント構成に追加します。 &lt;code&gt;vacm.conf&lt;/code&gt; ファイルの1つのvacmViewTreeFamily行に相当します。</target>
        </trans-unit>
        <trans-unit id="10d0b1e780ad0788836f31276e65ce6efb15e764" translate="yes" xml:space="preserve">
          <source>Adds an application, the modules of the application and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of the modules to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The modules will be members of the application. The default is to use the base name of the directory with the version removed as application name, but this can be overridden by the &lt;code&gt;name&lt;/code&gt; option. Returns the name of the application.</source>
          <target state="translated">アプリケーション、アプリケーションのモジュール、および &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。モジュールはアプリケーションのメンバーになります。デフォルトでは、バージョンが削除されたディレクトリのベース名をアプリケーション名として使用しますが、これは &lt;code&gt;name&lt;/code&gt; オプションで上書きできます。アプリケーションの名前を返します。</target>
        </trans-unit>
        <trans-unit id="110ffd01521ffa85d725f633c684562720f4ba39" translate="yes" xml:space="preserve">
          <source>Adds binding &lt;code&gt;Name=Value&lt;/code&gt; to &lt;code&gt;BindingStruct&lt;/code&gt;. Returns an updated binding structure.</source>
          <target state="translated">&lt;code&gt;BindingStruct&lt;/code&gt; にバインディング &lt;code&gt;Name=Value&lt;/code&gt; を追加します。更新されたバインディング構造を返します。</target>
        </trans-unit>
        <trans-unit id="166b6b5a44b378b7ef528300e6dd1ab66edcbe83" translate="yes" xml:space="preserve">
          <source>Adds nodes to current cover test. Notice that this only works if cover support is active.</source>
          <target state="translated">現在のカバーテストにノードを追加します。これは、カバーのサポートがアクティブな場合にのみ機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ebbd57f6aab385f9f5cefe84013bbde0f94bd2a8" translate="yes" xml:space="preserve">
          <source>Adds optional capabilities and sends a &lt;code&gt;hello&lt;/code&gt; message to the server and waits for the return.</source>
          <target state="translated">オプション機能を追加し、サーバーに &lt;code&gt;hello&lt;/code&gt; メッセージを送信して、返送を待ちます。</target>
        </trans-unit>
        <trans-unit id="f4e867c0e696fbab1087c9d79da2f2d90aa8bb6f" translate="yes" xml:space="preserve">
          <source>Adds or updates annotations on nodes in a syntax tree. &lt;code&gt;Bindings&lt;/code&gt; specifies the set of bound variables in the environment of the top level node. The following annotations are affected:</source>
          <target state="translated">構文ツリーのノードに注釈を追加または更新します。 &lt;code&gt;Bindings&lt;/code&gt; は、最上位ノードの環境でバインドされた変数のセットを指定します。次の注釈が影響を受けます。</target>
        </trans-unit>
        <trans-unit id="b3ac712b8a650dd6e42451afed1ca538238431c7" translate="yes" xml:space="preserve">
          <source>Adds or updates annotations on nodes in a syntax tree. Equivalent to &lt;code&gt;annotate_bindings(Tree, Bindings)&lt;/code&gt; where the top-level environment &lt;code&gt;Bindings&lt;/code&gt; is taken from the annotation &lt;code&gt;{env, Bindings}&lt;/code&gt; on the root node of &lt;code&gt;Tree&lt;/code&gt;. An exception is thrown if no such annotation should exist.</source>
          <target state="translated">構文ツリーのノードに注釈を追加または更新します。最上位の環境の &lt;code&gt;Bindings&lt;/code&gt; が &lt;code&gt;Tree&lt;/code&gt; のルートノードの注釈 &lt;code&gt;{env, Bindings}&lt;/code&gt; から取得される &lt;code&gt;annotate_bindings(Tree, Bindings)&lt;/code&gt; 同等です。そのような注釈が存在してはならない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7bbf9ca1c736db15763a8239f95f4d5c1b66558d" translate="yes" xml:space="preserve">
          <source>Adds the directories in &lt;code&gt;Dirs&lt;/code&gt; to the end of the code path. If a &lt;code&gt;Dir&lt;/code&gt; exists, it is not added.</source>
          <target state="translated">&lt;code&gt;Dirs&lt;/code&gt; 内のディレクトリをコードパスの最後に追加します。 &lt;code&gt;Dir&lt;/code&gt; が存在する場合、追加されません。</target>
        </trans-unit>
        <trans-unit id="c8d419cc2314f6341b04eb8bad24bf2f277d7f87" translate="yes" xml:space="preserve">
          <source>Adds the modules found in the given directory and the &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;modules' data&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The default is not to examine subdirectories, but if the option &lt;code&gt;recurse&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;, modules are searched for in subdirectories on all levels as well as in the given directory. Returns a sorted list of the names of the added modules.</source>
          <target state="translated">指定されたディレクトリで見つかったモジュールと &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;modules' data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。デフォルトではサブディレクトリは検査されませんが、オプション &lt;code&gt;recurse&lt;/code&gt; の値が &lt;code&gt;true&lt;/code&gt; の場合、モジュールはすべてのレベルのサブディレクトリと指定されたディレクトリで検索されます。追加されたモジュールの名前のソートされたリストを返します。</target>
        </trans-unit>
        <trans-unit id="34d712dcc34471fdb6acaa22554dc0975d1f5dc6" translate="yes" xml:space="preserve">
          <source>Adds the registered name of the process. This can be useful when tracing on many nodes, as processes with that name are then traced on all traced nodes.</source>
          <target state="translated">プロセスの登録名を追加します。これは、多くのノードでトレースする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="6bbf14dbe70908fe6ce0549e066a68aa359629b3" translate="yes" xml:space="preserve">
          <source>Adds the selected process and all processes below, right of it, to tab &lt;strong&gt;Trace Overview&lt;/strong&gt;.</source>
          <target state="translated">選択したプロセスとそのすぐ下にあるすべてのプロセスを[ &lt;strong&gt;トレースの概要&lt;/strong&gt; ]タブに追加します。</target>
        </trans-unit>
        <trans-unit id="3fcbc67018c8db0d7d54f40db7c26439211fb94f" translate="yes" xml:space="preserve">
          <source>Adds the selected process identifier to tab &lt;strong&gt;Trace Overview&lt;/strong&gt; plus the node that the process resides on.</source>
          <target state="translated">選択したプロセス識別子を[ &lt;strong&gt;Trace Overview&lt;/strong&gt; ]タブに加えて、プロセスが存在するノードを追加します。</target>
        </trans-unit>
        <trans-unit id="31b3e1e7afc7441a8de7e4b30d8d409a2bd10a0f" translate="yes" xml:space="preserve">
          <source>Adds the specified directories to the beginning of the code path, similar to &lt;code&gt; code:add_pathsa/1&lt;/code&gt;. Note that the order of the given directories will be reversed in the resulting path.</source>
          <target state="translated">&lt;code&gt; code:add_pathsa/1&lt;/code&gt; と同様に、指定したディレクトリをコードパスの先頭に追加します。結果のパスでは、指定されたディレクトリの順序が逆になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3aebb82fdca9aa95c0538fef0af13a3b616d5fe2" translate="yes" xml:space="preserve">
          <source>Adds the specified directories to the beginning of the code path, similar to &lt;code&gt;code:add_pathsa/1&lt;/code&gt;. Note that the order of the given directories will be reversed in the resulting path.</source>
          <target state="translated">&lt;code&gt;code:add_pathsa/1&lt;/code&gt; と同様に、指定されたディレクトリをコードパスの先頭に追加します。結果のパスでは、指定されたディレクトリの順序が逆になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0a1c883186e0d00a77adaf41f013ddc82c811398" translate="yes" xml:space="preserve">
          <source>Adds the specified directories to the end of the code path, similar to &lt;code&gt;code:add_pathsz/1&lt;/code&gt;; see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;code:add_pathsz/1&lt;/code&gt; のように、指定したディレクトリをコードパスの最後に追加します。 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d2e0e96fcba01247b2f834ed2a0365db181f6d4" translate="yes" xml:space="preserve">
          <source>Adds the specified primary filters.</source>
          <target state="translated">指定したプライマリフィルタを追加します。</target>
        </trans-unit>
        <trans-unit id="d613e82163d56d8326249e8169f52e84f75a04cb" translate="yes" xml:space="preserve">
          <source>Adds these extensions to the list of compress extensions.</source>
          <target state="translated">これらの拡張子を圧縮拡張子のリストに追加します。</target>
        </trans-unit>
        <trans-unit id="25822e567273ecdc04d1dd713da5a9ee0671d675" translate="yes" xml:space="preserve">
          <source>Adds these extensions to the list of uncompress extensions.</source>
          <target state="translated">これらの拡張子を解凍した拡張子のリストに追加します。</target>
        </trans-unit>
        <trans-unit id="2f502d97e1ab810c3754afd45a8594c92efa30f8" translate="yes" xml:space="preserve">
          <source>Adds to &lt;code&gt;Forms&lt;/code&gt; the code for the standard pre-defined functions (such as &lt;code&gt;module_info/0&lt;/code&gt;) that are to be included in every module.</source>
          <target state="translated">すべてのモジュールに含まれる標準の定義済み関数（ &lt;code&gt;module_info/0&lt;/code&gt; など）のコードを &lt;code&gt;Forms&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="bb8f1512f2d702beeef48e8c7223a0b1dde1e4a0" translate="yes" xml:space="preserve">
          <source>Adjust the process(&quot;beam&quot;) reference to your beam version and attach the script to a running &quot;beam&quot; instance:</source>
          <target state="translated">process(&quot;beam&quot;)の参照をビームのバージョンに合わせて、実行中の &quot;beam &quot;インスタンスにスクリプトをアタッチします。</target>
        </trans-unit>
        <trans-unit id="c57f256463601b2a2c62f254f5126bfecb16a4d2" translate="yes" xml:space="preserve">
          <source>Adjusts the SSH flow control window. This is to be done by both the client- and server-side channel processes.</source>
          <target state="translated">SSH フロー制御ウィンドウを調整します。これはクライアント側とサーバ側のチャネルプロセスの両方で行われます。</target>
        </trans-unit>
        <trans-unit id="980e8823b26ab3a416e4eec330a78a5f567d8a4d" translate="yes" xml:space="preserve">
          <source>Affects SSL-3.0 and TLS-1.0 connections only. Used to change the BEAST mitigation strategy to interoperate with legacy software. Defaults to &lt;code&gt;one_n_minus_one&lt;/code&gt;.</source>
          <target state="translated">SSL-3.0およびTLS-1.0接続にのみ影響します。従来のソフトウェアと相互運用するようにBEAST緩和戦略を変更するために使用されます。デフォルトは &lt;code&gt;one_n_minus_one&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c6004ea02cc23d09682422b618c26d349782aa93" translate="yes" xml:space="preserve">
          <source>Affects TLS-1.0 connections only. If set to &lt;code&gt;false&lt;/code&gt;, it disables the block cipher padding check to be able to interoperate with legacy software.</source>
          <target state="translated">TLS-1.0接続にのみ影響します。 &lt;code&gt;false&lt;/code&gt; に設定すると、ブロック暗号パディングチェックが無効になり、レガシーソフトウェアと相互運用できるようになります。</target>
        </trans-unit>
        <trans-unit id="debeed9026878cefb793f6e84d87d4b3c12ed8e6" translate="yes" xml:space="preserve">
          <source>Affects TLS-1.0 connections only. Used to change the BEAST mitigation strategy to interoperate with legacy software. Defaults to &lt;code&gt;one_n_minus_one&lt;/code&gt;.</source>
          <target state="translated">TLS-1.0接続にのみ影響します。レガシーソフトウェアと相互運用するためにBEAST緩和戦略を変更するために使用されます。デフォルトは &lt;code&gt;one_n_minus_one&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4b6ffc59171bd18b8e61a3e781dab573deabf10a" translate="yes" xml:space="preserve">
          <source>Affects ports to external programs on Windows only. The standard input and standard output handles of the port program are, if this option is supplied, opened with flag &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt;, so that the port program can (and must) do overlapped I/O on its standard handles. This is not normally the case for simple port programs, but an option of value for the experienced Windows programmer. &lt;strong&gt;On all other platforms, this option is silently discarded.&lt;/strong&gt;</source>
          <target state="translated">Windows上の外部プログラムへのポートにのみ影響します。ポートプログラムの標準入力ハンドルと標準出力ハンドルは、このオプションが指定されている場合、フラグ &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; で開かれます。これにより、ポートプログラムは、その標準ハンドルで重複したI / Oを実行できます（する必要があります）。これは通常、単純なポートプログラムには当てはまりませんが、経験豊富なWindowsプログラマにとって価値のあるオプションです。&lt;strong&gt;他のすべてのプラットフォームでは、このオプションは通知なく破棄されます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf4fb0d4263b60ac21dc80f51c2dec3dcfb5747e" translate="yes" xml:space="preserve">
          <source>Affects ports to external programs. The executed program gets its standard error file redirected to its standard output file. &lt;code&gt;stderr_to_stdout&lt;/code&gt; and &lt;code&gt;nouse_stdio&lt;/code&gt; are mutually exclusive.</source>
          <target state="translated">外部プログラムへの移植に影響します。実行されたプログラムは、標準エラーファイルを標準出力ファイルにリダイレクトします。 &lt;code&gt;stderr_to_stdout&lt;/code&gt; と &lt;code&gt;nouse_stdio&lt;/code&gt; は相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="1e538da53759cfec60cd8a151505e38fb92a9633" translate="yes" xml:space="preserve">
          <source>After &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1089&quot;&gt;all terms&lt;/a&gt;&lt;/code&gt; referenced by the root-set have been copied, the collector scans the &lt;strong&gt;to space&lt;/strong&gt; and copies all terms that these terms reference. When scanning, the collector steps through each term on the &lt;strong&gt;to space&lt;/strong&gt; and any term still referencing the &lt;strong&gt;from space&lt;/strong&gt; is copied over to the &lt;strong&gt;to space&lt;/strong&gt;. Some terms contain non-term data (the payload of a on heap binary for instance). When encountered by the collector, these values are simply skipped.</source>
          <target state="translated">後に &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1089&quot;&gt;all terms&lt;/a&gt;&lt;/code&gt; ルートセットによって参照されるが、コピーされた、コレクタが走査&lt;strong&gt;空間に&lt;/strong&gt;これらの用語を参照することをコピーすべての用語を。スキャンするとき、コレクターは&lt;strong&gt;toスペースの&lt;/strong&gt;各用語をステップスルーし、&lt;strong&gt;fromスペースを&lt;/strong&gt;参照している用語はすべて&lt;strong&gt;toスペースに&lt;/strong&gt;コピーさ&lt;strong&gt;れます&lt;/strong&gt;。一部の用語には、用語以外のデータが含まれています（たとえば、ヒープ上のバイナリのペイロード）。コレクターが検出すると、これらの値は単にスキップされます。</target>
        </trans-unit>
        <trans-unit id="76c066b0f9a1e6496e99cead0881b8f872728f45" translate="yes" xml:space="preserve">
          <source>After LTTng is properly installed on the system Erlang/OTP can be built with LTTng support.</source>
          <target state="translated">LTTngがシステムに正しくインストールされていれば、LTTng対応でErlang/OTPを構築することができます。</target>
        </trans-unit>
        <trans-unit id="093311043e9bea9fbc9705d1e98f8e3acfd08364" translate="yes" xml:space="preserve">
          <source>After STDLIB 3.4 (OTP 20.0) compiled match specifications have an external representation as a node specific reference to the original compiled match specification. If passed through &lt;code&gt;binary_to_term(term_to_binary(CMS))&lt;/code&gt; or sent to another node and back, the result &lt;strong&gt;may or may not&lt;/strong&gt; be a valid compiled match specification depending on if the original compiled match specification was still alive.</source>
          <target state="translated">STDLIB 3.4（OTP 20.0）以降、コンパイルされた一致仕様には、元のコンパイルされた一致仕様へのノード固有の参照として外部表現があります。 &lt;code&gt;binary_to_term(term_to_binary(CMS))&lt;/code&gt; を通過するか、別のノードに送信されて返される場合、元のコンパイル済み一致仕様がまだ有効であるかどうかによって、結果&lt;strong&gt;が&lt;/strong&gt;有効なコンパイル済み一致仕様になる場合とそうでない場合があります。</target>
        </trans-unit>
        <trans-unit id="1facbcf11ae5793aa1bc80ef16d286aebd0fc34d" translate="yes" xml:space="preserve">
          <source>After \0 up to two further octal digits are read. If there are fewer than two digits, just those that are present are used. Thus the sequence \0\x\015 specifies two binary zeros followed by a CR character (code value 13). Make sure you supply two digits after the initial zero if the pattern character that follows is itself an octal digit.</source>
          <target state="translated">0の後に、さらに2桁までの8進数が読み込まれます。2桁より少ない場合、存在するそれらだけが使用されます。従って、シーケンスは、2つのバイナリ・ゼロの後にCR文字(コード値13)が続くことを指定します。最初のゼロの後に続くパターン文字がそれ自体が 8 進数である場合は、最初のゼロの後に 2 桁の数字を供給することを確認してください。</target>
        </trans-unit>
        <trans-unit id="ec54f9531929f3cd1ca22e8febfcaf52fc58636a" translate="yes" xml:space="preserve">
          <source>After a call to &lt;code&gt;&lt;a href=&quot;#crypto_final-1&quot;&gt;crypto_final/1&lt;/a&gt;&lt;/code&gt; it contains the number of bytes padded. Otherwise 0.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#crypto_final-1&quot;&gt;crypto_final/1&lt;/a&gt;&lt;/code&gt; の呼び出し後、パディングされたバイト数が含まれます。それ以外の場合は0。</target>
        </trans-unit>
        <trans-unit id="d732389ea2448ab3a2fa3d0a36ca3e321f1eb8c8" translate="yes" xml:space="preserve">
          <source>After a partial match or a failed match, the last encountered name in the entire match process is returned, for example:</source>
          <target state="translated">部分一致または失敗した一致の後、例えば、一致プロセス全体で最後に見つかった名前が返されます。</target>
        </trans-unit>
        <trans-unit id="5fc9546102b17d8235883e41d7c9f9c95505b3d1" translate="yes" xml:space="preserve">
          <source>After a succesful incoming authentication, a new process runs as the just authenticated user.</source>
          <target state="translated">着信認証に成功すると、認証されたばかりのユーザとして新しいプロセスが実行されます。</target>
        </trans-unit>
        <trans-unit id="a46c18eae1ac24b22616197a0acee7d1074a413c" translate="yes" xml:space="preserve">
          <source>After a successful authentication an</source>
          <target state="translated">認証に成功した後</target>
        </trans-unit>
        <trans-unit id="18ee0e3703c2647b03b1406f234f9cc3d123429d" translate="yes" xml:space="preserve">
          <source>After adding more records to the &lt;code&gt;Company&lt;/code&gt; database, the result can be the following records:</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; データベースにレコードを追加すると、結果は次のレコードになります。</target>
        </trans-unit>
        <trans-unit id="93fdc04d975de9f436b576b59d005bc9bf8bf315" translate="yes" xml:space="preserve">
          <source>After all name servers have been tried, there is a timeout before the name servers are tried again. This is to prevent the server from answering the query with what's in the servfail cache, &lt;code&gt;inet_res(3)&lt;/code&gt;. Defaults to 1500 milli seconds .</source>
          <target state="translated">すべてのネームサーバーが試行された後、ネームサーバーが再試行される前にタイムアウトが発生します。これは、サーバーがservfailキャッシュ &lt;code&gt;inet_res(3)&lt;/code&gt; にあるものでクエリに応答するのを防ぐためです。デフォルトは1500ミリ秒です。</target>
        </trans-unit>
        <trans-unit id="22669be288b8402f937e20a5b4c0d8be02ada8ae" translate="yes" xml:space="preserve">
          <source>After an analysis, you can inspect this information. In the &lt;strong&gt;PLT&lt;/strong&gt; menu you can choose to either search the PLT or inspect the contents of the whole PLT. The information is presented in &lt;code&gt;EDoc&lt;/code&gt; format.</source>
          <target state="translated">分析後、この情報を検査できます。&lt;strong&gt;PLT&lt;/strong&gt;メニューでは、&lt;strong&gt;PLTを&lt;/strong&gt;検索するか、PLT全体の内容を検査するかを選択できます。情報は &lt;code&gt;EDoc&lt;/code&gt; 形式で表示されます。</target>
        </trans-unit>
        <trans-unit id="6ef9c0c6bbe4e27c696f859b427107c4e849d03c" translate="yes" xml:space="preserve">
          <source>After any post hook has been executed for all installed CTHs, &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_fail-4&quot;&gt;on_tc_fail&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_skip-4&quot;&gt;on_tc_skip&lt;/a&gt;&lt;/code&gt; is called if the testcase failed or was skipped, respectively. You cannot affect the outcome of the tests any further at this point.</source>
          <target state="translated">インストールされているすべてのCTHに対してポストフックが実行された後、テストケースが失敗した場合またはスキップされた場合に、 &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_fail-4&quot;&gt;on_tc_fail&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_skip-4&quot;&gt;on_tc_skip&lt;/a&gt;&lt;/code&gt; がそれぞれ呼び出されます。この時点では、テストの結果にこれ以上影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="f056750b4e33f30fb9d5942f6265a2d4f346b9dc" translate="yes" xml:space="preserve">
          <source>After at least one tab-character, the line added is to contain the full name of the named pipe where &lt;code&gt;syslogd&lt;/code&gt; writes its information. The path must be the same as for the files &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; and &lt;code&gt;syslog.conf.OTP&lt;/code&gt;. The filename must be &lt;code&gt;syslog.otp&lt;/code&gt;.</source>
          <target state="translated">少なくとも1つのタブ文字の後に、追加された行には、 &lt;code&gt;syslogd&lt;/code&gt; が情報を書き込む名前付きパイプの完全な名前が含まれます。パスは、 &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; および &lt;code&gt;syslog.conf.OTP&lt;/code&gt; ファイルと同じでなければなりません。ファイル名は &lt;code&gt;syslog.otp&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5ce4ab81087082fd95156bdaf8c2e0786410e8e3" translate="yes" xml:space="preserve">
          <source>After completing all the normal building steps described above a debug enabled runtime system can be built. To do this you have to change directory to &lt;code&gt;$ERL_TOP/erts/emulator&lt;/code&gt; and execute:</source>
          <target state="translated">上記の通常のビルド手順をすべて完了すると、デバッグが有効なランタイムシステムをビルドできます。これを行うには、ディレクトリを &lt;code&gt;$ERL_TOP/erts/emulator&lt;/code&gt; して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="9cd742cd300933dfb65e0a535f4d15de36d37f01" translate="yes" xml:space="preserve">
          <source>After decoding a message various user callback functions are invoked in order to allow the user to act properly. See the megaco_user module for more info about the callback arguments.</source>
          <target state="translated">メッセージをデコードした後、ユーザが適切に動作できるようにするために、様々なユーザコールバック関数が呼び出されます。コールバック引数の詳細については、megaco_user モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="dc240b1130d5df1612bf5772e5400cd74e1cad80" translate="yes" xml:space="preserve">
          <source>After flag fields for atom cache references, another half byte flag field is located with the following format:</source>
          <target state="translated">アトムキャッシュ参照のためのフラグフィールドの後に、別のハーフバイトのフラグフィールドが以下のフォーマットで配置されています。</target>
        </trans-unit>
        <trans-unit id="8aca18c81b4ecc6e98bd69677c9d22a41d1f8407" translate="yes" xml:space="preserve">
          <source>After initialization, you set up the connection to the Erlang node. To specify the Erlang node you want to connect to, use &lt;code&gt;erl_connect()&lt;/code&gt;. The following example sets up the connection and is to result in a valid socket file descriptor:</source>
          <target state="translated">初期化後、Erlangノードへの接続をセットアップします。接続したいErlangノードを指定するには、 &lt;code&gt;erl_connect()&lt;/code&gt; を使用します。次の例は、接続をセットアップし、有効なソケットファイル記述子を生成します。</target>
        </trans-unit>
        <trans-unit id="d230e040d4a295e72e3f66c85d88ac7727295ab3" translate="yes" xml:space="preserve">
          <source>After initialization, you set up the connection to the Erlang node. To specify the Erlang node you want to connect to, use the &lt;code&gt;ei_connect_*()&lt;/code&gt; family of functions. The following example sets up the connection and is to result in a valid socket file descriptor:</source>
          <target state="translated">初期化後、Erlangノードへの接続をセットアップします。接続するErlangノードを指定するには、 &lt;code&gt;ei_connect_*()&lt;/code&gt; ファミリーの関数を使用します。次の例では、接続を設定し、有効なソケットファイル記述子を作成します。</target>
        </trans-unit>
        <trans-unit id="71297d463c83eda2a6c9154b983ee09e837036ff" translate="yes" xml:space="preserve">
          <source>After installation you can access the documentation by</source>
          <target state="translated">インストール後、以下の方法でドキュメントにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="6b0c5270a184c48e498da3c725b4712069c50f99" translate="yes" xml:space="preserve">
          <source>After matching all six digits and then failing to match &quot;foo&quot;, the normal action of the matcher is to try again with only five digits matching item \d+, and then with four, and so on, before ultimately failing. &quot;Atomic grouping&quot; (a term taken from Jeffrey Friedl's book) provides the means for specifying that once a subpattern has matched, it is not to be re-evaluated in this way.</source>
          <target state="translated">6桁すべてにマッチした後、&quot;foo &quot;にマッチしなかった場合、マッチャーの通常の動作は、項目&quot;\d+&quot;にマッチする5桁の数字だけで再試行し、4桁の数字で再試行してから、最終的に失敗するというものです。&quot;Atomic grouping&quot;(Jeffrey Friedlの本から引用した用語)は、一度マッチしたサブパターンは、このように再評価されないことを指定する手段を提供します。</target>
        </trans-unit>
        <trans-unit id="ae043d6d909deeb13bd861dc2fdf16fc111c0f4f" translate="yes" xml:space="preserve">
          <source>After reading the &lt;code&gt;erts_alloc(3)&lt;/code&gt; documentation, the returned information more or less speaks for itself, but it can be worth explaining some things. Call counts are presented by two values, the first value is giga calls, and the second value is calls. &lt;code&gt;mbcs&lt;/code&gt; and &lt;code&gt;sbcs&lt;/code&gt; denote multi-block carriers, and single-block carriers, respectively. Sizes are presented in bytes. When a size is not presented, it is the amount of something. Sizes and amounts are often presented by three values:</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; のドキュメントを読んだ後、返された情報は多かれ少なかれそれ自体を物語っていますが、いくつかのことを説明する価値があるかもしれません。コールカウントは2つの値で表されます。最初の値はギガコールで、2番目の値はコールです。 &lt;code&gt;mbcs&lt;/code&gt; と &lt;code&gt;sbcs&lt;/code&gt; は、それぞれマルチブロックキャリアとシングルブロックキャリアを示します。サイズはバイト単位で表示されます。サイズが提示されていない場合、それは何かの量です。サイズと量は、多くの場合3つの値で表されます。</target>
        </trans-unit>
        <trans-unit id="90a4520417596de12836632d1f1ef59e2dcef82d" translate="yes" xml:space="preserve">
          <source>After registering the name, use &lt;code&gt;&lt;a href=&quot;ei_connect#ei_accept&quot;&gt; ei_accept&lt;/a&gt;&lt;/code&gt; to wait for incoming connections.</source>
          <target state="translated">名前を登録した後、 &lt;code&gt;&lt;a href=&quot;ei_connect#ei_accept&quot;&gt; ei_accept&lt;/a&gt;&lt;/code&gt; を使用して着信接続を待ちます。</target>
        </trans-unit>
        <trans-unit id="e9095c6393c06f16504fcb2b9e560f38a38a063b" translate="yes" xml:space="preserve">
          <source>After registering the name, use &lt;code&gt;&lt;a href=&quot;erl_connect#erl_accept&quot;&gt;erl_connect:erl_accept&lt;/a&gt;&lt;/code&gt; to wait for incoming connections.</source>
          <target state="translated">名前を登録した後、 &lt;code&gt;&lt;a href=&quot;erl_connect#erl_accept&quot;&gt;erl_connect:erl_accept&lt;/a&gt;&lt;/code&gt; を使用して、着信接続を待ちます。</target>
        </trans-unit>
        <trans-unit id="d3c38468398c9f7ba65583a0574f32622bbcf3f0" translate="yes" xml:space="preserve">
          <source>After sending the message &lt;code&gt;pong&lt;/code&gt; to the process &quot;ping&quot;, &quot;pong&quot; calls the &lt;code&gt;pong&lt;/code&gt; function again, which causes it to get back to the &lt;code&gt;receive&lt;/code&gt; again and wait for another message.</source>
          <target state="translated">プロセス「ping」にメッセージ &lt;code&gt;pong&lt;/code&gt; を送信した後、「pong」は &lt;code&gt;pong&lt;/code&gt; 関数を再度呼び出します。これにより、再びpong関数が &lt;code&gt;receive&lt;/code&gt; 戻り、別のメッセージを待ちます。</target>
        </trans-unit>
        <trans-unit id="e36306045d856ed44b3178bdde7ee2e0ace1e9c1" translate="yes" xml:space="preserve">
          <source>After setting the dictionary the inflate operation should be retried without new input.</source>
          <target state="translated">辞書を設定した後は、新たな入力を行わずにインフレーション操作を再実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="46b2484894cf1b418bcc258ea3f4b87e3bcd685f" translate="yes" xml:space="preserve">
          <source>After testing that the client process exists:</source>
          <target state="translated">クライアントプロセスが存在することをテストした後</target>
        </trans-unit>
        <trans-unit id="22756028dc88f951673801206c8f0149ec02c1b4" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;Flags&lt;/code&gt; field follow the &lt;code&gt;AtomCacheRefs&lt;/code&gt;. The first &lt;code&gt;AtomCacheRef&lt;/code&gt; is the one corresponding to &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 0. Higher indices follow in sequence up to index &lt;code&gt;NumberOfAtomCacheRefs - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; フィールドの後は &lt;code&gt;AtomCacheRefs&lt;/code&gt; に従います。最初の &lt;code&gt;AtomCacheRef&lt;/code&gt; は、 &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 0に対応するものです。より高いインデックスは、インデックス &lt;code&gt;NumberOfAtomCacheRefs - 1&lt;/code&gt; まで順番に続きます。</target>
        </trans-unit>
        <trans-unit id="dca4e4c96c0a14c7be226e5bd7489709c72d0c43" translate="yes" xml:space="preserve">
          <source>After the application specifications have been updated, the instructions in the script are evaluated and the function returns &lt;code&gt;{ok,OtherVsn,Descr}&lt;/code&gt; if successful. &lt;code&gt;OtherVsn&lt;/code&gt; and &lt;code&gt;Descr&lt;/code&gt; are the version (&lt;code&gt;UpFromVsn&lt;/code&gt; or &lt;code&gt;Vsn&lt;/code&gt;) and description (&lt;code&gt;Descr1&lt;/code&gt; or &lt;code&gt;Descr2&lt;/code&gt;) as specified in the script.</source>
          <target state="translated">アプリケーションの仕様が更新された後、スクリプト内の指示が評価され、成功した場合、関数は &lt;code&gt;{ok,OtherVsn,Descr}&lt;/code&gt; 返します。 &lt;code&gt;OtherVsn&lt;/code&gt; および &lt;code&gt;Descr&lt;/code&gt; は、スクリプトで指定されているバージョン（ &lt;code&gt;UpFromVsn&lt;/code&gt; または &lt;code&gt;Vsn&lt;/code&gt; ）および説明（ &lt;code&gt;Descr1&lt;/code&gt; または &lt;code&gt;Descr2&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="0d4f7a31773a30c9ab44ee914a380f7ad8d9358d" translate="yes" xml:space="preserve">
          <source>After the change, 5 lines are presented as follows:</source>
          <target state="translated">変更後は、以下のように5行が提示されています。</target>
        </trans-unit>
        <trans-unit id="2c691aee72f4af2559c4df9a131c0a55a89cadf0" translate="yes" xml:space="preserve">
          <source>After the database is deleted, it can still be possible to start Mnesia as a disc-less node. This depends on how configuration parameter &lt;code&gt;schema_location&lt;/code&gt; is set.</source>
          <target state="translated">データベースを削除した後でも、Mnesiaをディスクなしのノードとして起動することができます。これは、構成パラメーター &lt;code&gt;schema_location&lt;/code&gt; の設定方法によって異なります。</target>
        </trans-unit>
        <trans-unit id="d5839b9af149f08b9df4808444dfa4c5b3879065" translate="yes" xml:space="preserve">
          <source>After the handshake is performed, the user process receives messages with the tickets sent by the server.</source>
          <target state="translated">握手が行われた後、ユーザプロセスは、サーバから送信されたチケットが記載されたメッセージを受信する。</target>
        </trans-unit>
        <trans-unit id="4298986c5c1910d7ad391031923615fdac4c6079" translate="yes" xml:space="preserve">
          <source>After the header word has been copied a &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.h#L45-L46&quot;&gt;move marker&lt;/a&gt;&lt;/code&gt; is destructively placed in it pointing to the term in the &lt;strong&gt;to space&lt;/strong&gt;. Any other term that points to the already moved term will &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1125&quot;&gt;see this move marker&lt;/a&gt;&lt;/code&gt; and copy the referring pointer instead. For example, if the have the following Erlang code:</source>
          <target state="translated">ヘッダーワードがコピーされた後、 &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.h#L45-L46&quot;&gt;move marker&lt;/a&gt;&lt;/code&gt; が破壊的に配置され、&lt;strong&gt;toスペース内の&lt;/strong&gt;用語を指し&lt;strong&gt;ます&lt;/strong&gt;。すでに移動された用語を指す他の用語は、 &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1125&quot;&gt;see this move marker&lt;/a&gt;&lt;/code&gt; を参照し、代わりに参照ポインターをコピーします。たとえば、次のErlangコードがある場合：</target>
        </trans-unit>
        <trans-unit id="e4e458fe2735510f2a3f94986ee2e1c2798b1558" translate="yes" xml:space="preserve">
          <source>After the insertion of the employee named &lt;code&gt;klacke&lt;/code&gt;, the database has the following records:</source>
          <target state="translated">&lt;code&gt;klacke&lt;/code&gt; という名前の従業員を挿入すると、データベースには次のレコードが含まれます。</target>
        </trans-unit>
        <trans-unit id="014d2e6e6b7efad4c0429a37b959bc880d48f38c" translate="yes" xml:space="preserve">
          <source>After the installation, the application controller compares the old and new configuration parameters for all running applications and call the callback function:</source>
          <target state="translated">インストール後、アプリケーションコントローラは、実行中のすべてのアプリケーションの新旧の設定パラメータを比較し、コールバック関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8b5bb17b2c511826d46800999f421579e3ca514c" translate="yes" xml:space="preserve">
          <source>After the restore operation, the entire contents of the registry is marked as unmodified. Notice that this includes any objects that were modified before the restore and not overwritten by the restore.</source>
          <target state="translated">復元操作の後、レジストリの内容全体が変更されていないとマークされます。これには、復元前に変更され、復元によって上書きされなかったオブジェクトも含まれます。</target>
        </trans-unit>
        <trans-unit id="c4f3acb2fc60165a466769fee1869d300231ddf6" translate="yes" xml:space="preserve">
          <source>After the rootsymbol declaration comes an optional declaration of the &lt;code&gt;end_of_input&lt;/code&gt; symbol that your scanner is expected to use. For example:</source>
          <target state="translated">rootsymbol宣言の後に、スキャナーが使用すると予想される &lt;code&gt;end_of_input&lt;/code&gt; シンボルのオプションの宣言が続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="2770f0bd427f63fd51d60a2a398782f6d81807ca" translate="yes" xml:space="preserve">
          <source>After the successful build it's time to patch. The source tree directory, the directory of the installation and the applications to patch are given as arguments to &lt;code&gt;otp_patch_apply&lt;/code&gt;. The dependencies of each application are validated against the applications in the installation and the other applications given as arguments. If a dependency error is detected, the script will be aborted.</source>
          <target state="translated">ビルドが成功したら、パッチを適用します。ソースツリーディレクトリ、インストールのディレクトリ、およびパッチを適用するアプリケーションは、 &lt;code&gt;otp_patch_apply&lt;/code&gt; への引数として指定されます。各アプリケーションの依存関係は、インストール内のアプリケーションおよび引数として指定された他のアプリケーションに対して検証されます。依存関係エラーが検出されると、スクリプトは中止されます。</target>
        </trans-unit>
        <trans-unit id="59c978cfe3812d62d5db4509ebca4d4c5513e4b6" translate="yes" xml:space="preserve">
          <source>After the system has been cross built you can build and install the documentation the same way as after a native build of the system. See the &lt;code&gt;&lt;a href=&quot;install#How-to-Build-and-Install-ErlangOTP_How-to-Build-the-Documentation&quot;&gt;How to Build the Documentation&lt;/a&gt;&lt;/code&gt; section in the &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; document for information on how to build the documentation.</source>
          <target state="translated">システムがクロスビルドされた後、システムのネイティブビルドの後と同じ方法でドキュメントをビルドしてインストールできます。 &lt;code&gt;&lt;a href=&quot;install#How-to-Build-and-Install-ErlangOTP_How-to-Build-the-Documentation&quot;&gt;How to Build the Documentation&lt;/a&gt;&lt;/code&gt; については、 &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; ドキュメントの「ドキュメントの作成方法」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0aad644b2254828a652fc4d00f391c4ee2e9798e" translate="yes" xml:space="preserve">
          <source>After these steps, the intermediate data structure, an &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt;, is fully normalized. The last step is applying &lt;code&gt;&lt;a href=&quot;uri_string#recompose-1&quot;&gt;uri_string:recompose/1&lt;/a&gt;&lt;/code&gt; that converts the intermediate structure into a valid canonical URI string.</source>
          <target state="translated">これらの手順の後、中間データ構造 &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; は完全に正規化されます。最後のステップは、中間構造を有効な正規URI文字列に変換する &lt;code&gt;&lt;a href=&quot;uri_string#recompose-1&quot;&gt;uri_string:recompose/1&lt;/a&gt;&lt;/code&gt; を適用することです。</target>
        </trans-unit>
        <trans-unit id="9b3f9b5771b4280d0c55a70767959a27ea46eb52" translate="yes" xml:space="preserve">
          <source>After this is compiled and the file &lt;code&gt;tut19.beam&lt;/code&gt; is copied to the necessary directories, the following is seen on (pong@kosken):</source>
          <target state="translated">これがコンパイルされ、ファイル &lt;code&gt;tut19.beam&lt;/code&gt; が必要なディレクトリにコピーされると、（pong @ kosken）に次のようになります。</target>
        </trans-unit>
        <trans-unit id="c6e5f33003aed8582bf379cb6df791e38f259eef" translate="yes" xml:space="preserve">
          <source>After thread progress, commit the staging area by assigning &lt;code&gt;the_staging_code_index&lt;/code&gt; to &lt;code&gt;the_active_code_index&lt;/code&gt;.</source>
          <target state="translated">スレッドの進行後、 &lt;code&gt;the_staging_code_index&lt;/code&gt; を &lt;code&gt;the_active_code_index&lt;/code&gt; に割り当てて、ステージング領域をコミットします。</target>
        </trans-unit>
        <trans-unit id="e0717a39ec07e9aad70e9e475eae5bb9f752c8e1" translate="yes" xml:space="preserve">
          <source>Again, the &lt;code&gt;relup&lt;/code&gt; file is created manually. Either from scratch or by editing a generated version. Load all code for &lt;code&gt;ch_app&lt;/code&gt; first, and also load the application specification, before &lt;code&gt;prim_sup&lt;/code&gt; is updated. When downgrading, &lt;code&gt;prim_sup&lt;/code&gt; is to updated first, before the code for &lt;code&gt;ch_app&lt;/code&gt; and its application specification are unloaded.</source>
          <target state="translated">ここでも、 &lt;code&gt;relup&lt;/code&gt; ファイルは手動で作成されます。ゼロから、または生成されたバージョンを編集して。 &lt;code&gt;prim_sup&lt;/code&gt; が更新される前に、まず &lt;code&gt;ch_app&lt;/code&gt; のすべてのコードをロードし、アプリケーション仕様もロードします。ダウングレードする場合、 &lt;code&gt;prim_sup&lt;/code&gt; をするためのコードの前に、最初に更新され &lt;code&gt;ch_app&lt;/code&gt; そのアプリケーション仕様がアンロードされています。</target>
        </trans-unit>
        <trans-unit id="1b5e61e0895721c0ebf450f07d288833226aa589" translate="yes" xml:space="preserve">
          <source>Again, this works in Perl, but not in PCRE, and for the same reason. When a deeper recursion has matched a single character, it cannot be entered again to match an empty string. The solution is to separate the two cases, and write out the odd and even cases as alternatives at the higher level:</source>
          <target state="translated">繰り返しになりますが、これはPerlでは動作しますが、PCREでは動作しません。深層の再帰が1文字にマッチした場合、空の文字列にマッチするように再度入力することはできません。解決策は、2つのケースを分離して、奇数と偶数のケースを上位レベルで代替として書き出すことです。</target>
        </trans-unit>
        <trans-unit id="3b2767e308e62a98e4db59a3a9f824fa516512cb" translate="yes" xml:space="preserve">
          <source>Agent configuration:</source>
          <target state="translated">エージェントの設定。</target>
        </trans-unit>
        <trans-unit id="3ec3b79e0abd28ca38f812dac049f7131b92ea23" translate="yes" xml:space="preserve">
          <source>Agent semantics</source>
          <target state="translated">エージェントセマンティクス</target>
        </trans-unit>
        <trans-unit id="292ef3c4e0286769b6dbb07a9c3a55d1d989a61e" translate="yes" xml:space="preserve">
          <source>Agent specific config options and types:</source>
          <target state="translated">エージェント固有の設定オプションとタイプ。</target>
        </trans-unit>
        <trans-unit id="9183ce25ce4e057cce5e3b5d3d28a86f4aa93b15" translate="yes" xml:space="preserve">
          <source>Agents to be accessed by the manager needs to be registered by a user. Once registered, they can be accessed by all registered users.</source>
          <target state="translated">管理者がアクセスするエージェントは、ユーザーが登録する必要があります。登録されたエージェントは、登録されている全てのユーザからアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="b321e7cb00697b98b1069def622912b90e34756e" translate="yes" xml:space="preserve">
          <source>Aho &amp;amp; Johnson: 'LR Parsing', ACM Computing Surveys, vol. 6:2, 1974.</source>
          <target state="translated">Aho＆Johnson：「LR Parsing」、ACM Computing Surveys、vol。6：2、1974。</target>
        </trans-unit>
        <trans-unit id="8314c1bccd7fbe31d59f08ffd330d112f0923137" translate="yes" xml:space="preserve">
          <source>Aim for finding bugs. Write whatever test that has the highest probability of finding a bug, now or in the future. Concentrate more on the critical parts. Bugs in critical subsystems are much more expensive than others.</source>
          <target state="translated">バグ発見を目指す。今も将来も、バグを発見する確率が最も高いテストを書く。重要な部分に集中する。重要なサブシステムのバグは、他のものよりもはるかに高い。</target>
        </trans-unit>
        <trans-unit id="2e73e04c930e7b3b6a12e1613006c2d06e333b4f" translate="yes" xml:space="preserve">
          <source>Aim for functionality testing rather than implementation details. Implementation details change quite often, and the test suites are to be long lived. Implementation details often differ on different platforms and versions. If implementation details must be tested, try to factor them out into separate test cases. These test cases can later be rewritten or skipped.</source>
          <target state="translated">実装の詳細よりも機能テストを目指す。実装の詳細は頻繁に変更され、テストスイートは長持ちするようにしなければなりません。実装の詳細は、プラットフォームやバージョンによって異なることがよくあります。実装の詳細をテストしなければならない場合は、それらを別々のテストケースにまとめるようにしてください。これらのテストケースは後で書き換えたり、スキップしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="5204c24c2356e334c01209b09953d29e8b1c732c" translate="yes" xml:space="preserve">
          <source>Alarm handling</source>
          <target state="translated">アラーム処理</target>
        </trans-unit>
        <trans-unit id="07994d0d2fea2b8ccddc2fe4a57609e0e8cf0605" translate="yes" xml:space="preserve">
          <source>Alarm, that is, the BEL character (hex 07)</source>
          <target state="translated">アラーム、つまり BEL 文字 (16 進数 07)</target>
        </trans-unit>
        <trans-unit id="44b68bd3aa7ebc745c49072e3fc9224605032491" translate="yes" xml:space="preserve">
          <source>Alarms are reported to the SASL alarm handler, see &lt;code&gt;alarm_handler(3)&lt;/code&gt;. To set an alarm, &lt;code&gt;alarm_handler:set_alarm(Alarm)&lt;/code&gt; is called where &lt;code&gt;Alarm&lt;/code&gt; is either of the alarms specified above.</source>
          <target state="translated">アラームはSASLアラームハンドラーに報告されます &lt;code&gt;alarm_handler(3)&lt;/code&gt; 参照してください。アラームを設定するには、 &lt;code&gt;alarm_handler:set_alarm(Alarm)&lt;/code&gt; を呼び出します。ここで、 &lt;code&gt;Alarm&lt;/code&gt; は上記で指定したアラームのいずれかです。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
