<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="243bac6201188d4c8745d8544eb1a7983b8606fa" translate="yes" xml:space="preserve">
          <source>Depending on current directory, and writing there:</source>
          <target state="translated">カレントディレクトリに依存し、そこに書き込む。</target>
        </trans-unit>
        <trans-unit id="cdde803659c57ac2ddc339522c646af01e6694a2" translate="yes" xml:space="preserve">
          <source>Depending on execution order:</source>
          <target state="translated">執行順序によっては</target>
        </trans-unit>
        <trans-unit id="4e25fe3d3f1520c00d56f174734b9eb9bce227c1" translate="yes" xml:space="preserve">
          <source>Depending on how your state machine is specified, this can be a very useful feature, but it forces you to handle the &lt;strong&gt;state enter calls&lt;/strong&gt; in all states. See also the &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Actions&quot;&gt; State Enter Actions &lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="translated">ステートマシンの指定方法によっては、これは非常に便利な機能です&lt;strong&gt;が&lt;/strong&gt;、すべての状態で&lt;strong&gt;状態入力呼び出し&lt;/strong&gt;を処理&lt;strong&gt;する必要&lt;/strong&gt;があります。「 &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Actions&quot;&gt; State Enter Actions &lt;/a&gt;&lt;/code&gt; セクションも参照してください。</target>
        </trans-unit>
        <trans-unit id="8dee5fe53ac8542b7adfcc26071a2cc098a90e75" translate="yes" xml:space="preserve">
          <source>Depending on how your state machine is specified, this can be a very useful feature, but it forces you to handle the state enter calls in all states. See also the &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Actions&quot;&gt;State Enter Actions&lt;/a&gt;&lt;/code&gt; chapter.</source>
          <target state="translated">ステートマシンの指定方法によっては、これは非常に便利な機能ですが、すべてのステートでステートエンターコールを処理する必要があります。 &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Actions&quot;&gt;State Enter Actions&lt;/a&gt;&lt;/code&gt; の章も参照してください。</target>
        </trans-unit>
        <trans-unit id="9291af56bff8b9929663e0373b04939eaa6165fd" translate="yes" xml:space="preserve">
          <source>Depending on the application, it can be a good idea to use the dirty functions for certain operations. Almost all Mnesia functions that can be called within transactions have a dirty equivalent, which is much more efficient.</source>
          <target state="translated">アプリケーションによっては、特定の操作にダーティな関数を使用するのが良いでしょう。トランザクション内で呼び出せるムネシアの関数のほとんどがダーティに相当するものを持っていて、その方がはるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="dabd0167e15f1eb7094245774e052022449eed10" translate="yes" xml:space="preserve">
          <source>Depending on the encoding rules, the encoder can also compare the given value to the default value and automatically omit the encoding if the values are equal. How much effort the encoder makes to compare the values depends on the encoding rules. The DER encoding rules forbid encoding a value equal to the default value, so it has a more thorough and time-consuming comparison than the encoders for the other encoding rules.</source>
          <target state="translated">エンコーディングルールに応じて、エンコーダは与えられた値をデフォルト値と比較し、値が等しい場合は自動的にエンコーディングを省略することもできます。エンコーダが値を比較するためにどれだけの努力をするかは、エンコーディングルールに依存します。DERのエンコーディングルールでは、デフォルト値と等しい値をエンコーディングすることを禁止しているため、他のエンコーディングルールのエンコーダーよりも徹底した比較を行い、時間をかけて比較します。</target>
        </trans-unit>
        <trans-unit id="08626437fb40efba7dbca9b44d332c33a8162802" translate="yes" xml:space="preserve">
          <source>Depending on the encoding, different methods of reading and writing data is preferred. The default encoding of &lt;code&gt;latin1&lt;/code&gt; implies using this module (&lt;code&gt;file&lt;/code&gt;) for reading and writing data as the interfaces provided here work with byte-oriented data. Using other (Unicode) encodings makes the &lt;code&gt;io(3)&lt;/code&gt; functions &lt;code&gt;get_chars&lt;/code&gt;, &lt;code&gt;get_line&lt;/code&gt;, and &lt;code&gt;put_chars&lt;/code&gt; more suitable, as they can work with the full Unicode range.</source>
          <target state="translated">エンコーディングに応じて、データの読み取りと書き込みの異なる方法が推奨されます。ここで提供されるインターフェイスはバイト指向のデータを処理するため、 &lt;code&gt;latin1&lt;/code&gt; のデフォルトのエンコーディングは、データの読み取りと書き込みにこのモジュール（ &lt;code&gt;file&lt;/code&gt; ）を使用することを意味します。他の（Unicode）エンコーディングを使用すると、 &lt;code&gt;io(3)&lt;/code&gt; 関数の &lt;code&gt;get_chars&lt;/code&gt; 、 &lt;code&gt;get_line&lt;/code&gt; 、および &lt;code&gt;put_chars&lt;/code&gt; が、Unicodeの全範囲で機能するため、より適切になります。</target>
        </trans-unit>
        <trans-unit id="3a4a2bd194c4b302cc838a7198f9734aad7fbc66" translate="yes" xml:space="preserve">
          <source>Depending on the platform, the value may need to be quoted if the shell itself interprets certain characters. On Unix, terms containing tuples and lists must be quoted. Terms containing spaces must be quoted on all platforms.</source>
          <target state="translated">プラットフォームによっては、シェル自身が特定の文字を解釈する場合、値を引用符で囲む必要があるかもしれません。Unix では、タプルやリストを含む用語は引用符で囲まなければなりません。スペースを含む用語は、すべてのプラットフォームで引用符で囲まれなければなりません。</target>
        </trans-unit>
        <trans-unit id="03c613c2a141cff91e371843ee43ffefd0b81ace" translate="yes" xml:space="preserve">
          <source>Depending on the type of &lt;code&gt;Node&lt;/code&gt;, the size of some groups may be variable (e.g., the group consisting of all the elements of a tuple), while others always contain the same number of elements - usually exactly one (e.g., the group containing the argument expression of a case-expression). Note, however, that the exact structure of the returned list (for a given node type) should in general not be depended upon, since it might be subject to change without notice.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; のタイプに応じて、一部のグループのサイズは変化する可能性があります（たとえば、タプルのすべての要素で構成されるグループ）。一方、他のグループは常に同じ数の要素を含みます-通常は1つだけです（たとえば、ケース式の引数式）。ただし、返されるリストの（特定のノードタイプの）正確な構造は、予告なしに変更される可能性があるため、一般に依存すべきではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="377f14389e9e0ac790724578e98e3d818a0aadfe" translate="yes" xml:space="preserve">
          <source>Depending on the underlying OS:es links might be followed and info on the final file, directory etc is returned. See &lt;code&gt;&lt;a href=&quot;#read_link_info-2&quot;&gt;read_link_info/2&lt;/a&gt;&lt;/code&gt; on how to get information on links instead.</source>
          <target state="translated">基盤となるOSによっては、リンクがたどられ、最終的なファイル、ディレクトリなどの情報が返される場合があります。代わりに、リンクに関する情報を取得する方法については、 &lt;code&gt;&lt;a href=&quot;#read_link_info-2&quot;&gt;read_link_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f72e0a79aede683f74da3cac9428753ce30b12f5" translate="yes" xml:space="preserve">
          <source>Depending on the underlying OS:es links might be followed and info on the final file, directory etc is returned. See &lt;code&gt;&lt;a href=&quot;#read_link_info-2&quot;&gt;ssh_sftp::read_link_info/2&lt;/a&gt;&lt;/code&gt; on how to get information on links instead.</source>
          <target state="translated">基盤となるOSによっては、リンクがたどられ、最終的なファイル、ディレクトリなどの情報が返される場合があります。代わりにリンクの情報を取得する方法については、 &lt;code&gt;&lt;a href=&quot;#read_link_info-2&quot;&gt;ssh_sftp::read_link_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ccc799c653ce6450978e4f7f091a0e0d6ab495d4" translate="yes" xml:space="preserve">
          <source>Depending on the value of the &lt;code&gt;open/1&lt;/code&gt; options &lt;code&gt;head&lt;/code&gt; and &lt;code&gt;head_func&lt;/code&gt;, or set by function &lt;code&gt;change_header/2&lt;/code&gt;, the value of &lt;code&gt;Head&lt;/code&gt; is &lt;code&gt;none&lt;/code&gt; (default), &lt;code&gt;{head, H}&lt;/code&gt; (&lt;code&gt;head&lt;/code&gt; option), or &lt;code&gt;{M,F,A}&lt;/code&gt; (&lt;code&gt;head_func&lt;/code&gt; option).</source>
          <target state="translated">&lt;code&gt;open/1&lt;/code&gt; オプションの &lt;code&gt;head&lt;/code&gt; と &lt;code&gt;head_func&lt;/code&gt; の値、または関数 &lt;code&gt;change_header/2&lt;/code&gt; によって設定された値に応じて、 &lt;code&gt;Head&lt;/code&gt; の値は &lt;code&gt;none&lt;/code&gt; （デフォルト）、 &lt;code&gt;{head, H}&lt;/code&gt; （ &lt;code&gt;head&lt;/code&gt; オプション）、または &lt;code&gt;{M,F,A}&lt;/code&gt; （ &lt;code&gt;head_func&lt;/code&gt; オプション）。</target>
        </trans-unit>
        <trans-unit id="28c197c51b5a2b60df55d2b8e85ac6377c6edcdf" translate="yes" xml:space="preserve">
          <source>Depending on use, issue appropriate memory barrier.</source>
          <target state="translated">用途に応じて、適切なメモリバリアを発行してください。</target>
        </trans-unit>
        <trans-unit id="7bb075a29d7a66c030bf16e5aa81d3289b5d0649" translate="yes" xml:space="preserve">
          <source>Deprecated Functions. All deprecated exported functions and all used deprecated BIFs.</source>
          <target state="translated">非推奨関数。非推奨のエクスポートされたすべての関数と、非推奨のBIFを使用したすべての関数。</target>
        </trans-unit>
        <trans-unit id="a556f0c9e78725f0dc7ec5f5f6ccfab7c94fba9a" translate="yes" xml:space="preserve">
          <source>Deprecated Functions. All deprecated functions to be removed in next version or next major release.</source>
          <target state="translated">廃止予定の機能。すべての非推奨関数は、次のバージョンまたは次のメジャーリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="d7d871c4d8fedf1c0044ae045b46fd1f875d4207" translate="yes" xml:space="preserve">
          <source>Deprecated Functions. All deprecated functions to be removed in next version, next major release, or later.</source>
          <target state="translated">廃止予定の機能。すべての非推奨関数は、次のバージョン、次のメジャーリリース以降に削除される予定です。</target>
        </trans-unit>
        <trans-unit id="f45d730453472e45c49f2d3ea99fe5527787aad8" translate="yes" xml:space="preserve">
          <source>Deprecated Functions. All deprecated functions to be removed in next version.</source>
          <target state="translated">廃止予定の機能。すべての非推奨関数は次のバージョンで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="5da4152a4415189ae859a586a766eb23b8a72225" translate="yes" xml:space="preserve">
          <source>Deprecated Representations for BIT STRING</source>
          <target state="translated">BIT STRING の非推奨表現</target>
        </trans-unit>
        <trans-unit id="362d66bda77ba72de253405d1082913585d5d87f" translate="yes" xml:space="preserve">
          <source>Deprecated and replaced by &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">廃止され、 &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; に置き換えられました</target>
        </trans-unit>
        <trans-unit id="8dfe918164e8ddccb6f55f262eee83b0adbb2128" translate="yes" xml:space="preserve">
          <source>Deprecated and replaced by gen_statem</source>
          <target state="translated">非推奨となり、gen_statem に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="2d09e5160c09486ccb7f3219abc0b47f86c4eaad" translate="yes" xml:space="preserve">
          <source>Deprecated functionality will be documented as deprecated, and compiler warnings will be issued, when appropriate, as early as possible. That is, the new preferred functionality will appear at the same time as the deprecation is issued. A new deprecation will at least be announced in a release note and the documentation.</source>
          <target state="translated">非推奨の機能は非推奨として文書化され、適切な場合は可能な限り早期にコンパイラの警告が発行されます。つまり、推奨される新しい機能は、非推奨になった機能が発表されるのと同時に表示されます。新しい非推奨機能は、少なくともリリースノートとドキュメントで発表されます。</target>
        </trans-unit>
        <trans-unit id="5501a25bd160cca4c73c256fc484e054f744501e" translate="yes" xml:space="preserve">
          <source>Deprecated functions which for the time being are kept for backwards compatibility. Invokes &lt;code&gt;et:trace_me/4&lt;/code&gt; and &lt;code&gt;et:trace_me/5&lt;/code&gt; respectively.</source>
          <target state="translated">当面は下位互換性のために残されている非推奨の関数。 &lt;code&gt;et:trace_me/4&lt;/code&gt; と &lt;code&gt;et:trace_me/5&lt;/code&gt; をそれぞれ呼び出します。</target>
        </trans-unit>
        <trans-unit id="965c6319eb78a51b51236820480c381b647f09bb" translate="yes" xml:space="preserve">
          <source>Deprecated in OTP 21, use &lt;code&gt;&lt;a href=&quot;#cipher_suites-2&quot;&gt;cipher_suites/2&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">OTP 21では非推奨で、代わりに &lt;code&gt;&lt;a href=&quot;#cipher_suites-2&quot;&gt;cipher_suites/2&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="25f06dfe2aac9021d2c4c0bc121eaf600a0aee3b" translate="yes" xml:space="preserve">
          <source>Deprecated in OTP 21, use &lt;code&gt;&lt;a href=&quot;#handshake-1&quot;&gt;handshake/[1,2]&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">OTP 21では非推奨で、代わりに &lt;code&gt;&lt;a href=&quot;#handshake-1&quot;&gt;handshake/[1,2]&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="8b63d6692da10960246b76d0c20aee73217670bc" translate="yes" xml:space="preserve">
          <source>Deprecated in OTP 21, use &lt;code&gt;&lt;a href=&quot;#handshake-3&quot;&gt;handshake/[2,3]&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">OTP 21で非推奨、代わりに &lt;code&gt;&lt;a href=&quot;#handshake-3&quot;&gt;handshake/[2,3]&lt;/a&gt;&lt;/code&gt; を使用。</target>
        </trans-unit>
        <trans-unit id="5a7061dbbf40f9e3bde38b8239ae3785a056588f" translate="yes" xml:space="preserve">
          <source>Deprecated since OTP-17, has no affect.</source>
          <target state="translated">OTP-17以降非推奨、影響なし。</target>
        </trans-unit>
        <trans-unit id="5abdc016e3ae09e4ee089a39076e52bb4e75f1b8" translate="yes" xml:space="preserve">
          <source>Deprecated symbolic representations kept for backwards-compatibility.</source>
          <target state="translated">下位互換性のために保持されている非推奨の記号表現。</target>
        </trans-unit>
        <trans-unit id="e933a4c105525e5dfc66dc5b016c7a5b06ca6392" translate="yes" xml:space="preserve">
          <source>Dequeue &lt;code&gt;count&lt;/code&gt; bytes from the I/O queue. If &lt;code&gt;size&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, the new size of the queue is placed there.</source>
          <target state="translated">I / Oキューから &lt;code&gt;count&lt;/code&gt; バイトをデキューします。 &lt;code&gt;size&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、キューの新しいサイズがそこに配置されます。</target>
        </trans-unit>
        <trans-unit id="8547a26aec952c41fbd7b425889713b88c8b7d6f" translate="yes" xml:space="preserve">
          <source>Dequeues data by moving the head pointer forward in the driver queue by &lt;code&gt;size&lt;/code&gt; bytes. The data in the queue is deallocated.</source>
          <target state="translated">ドライバーのキュー内でヘッドポインターを &lt;code&gt;size&lt;/code&gt; バイトだけ前方に移動することにより、データをデキューします。キュー内のデータは割り当て解除されます。</target>
        </trans-unit>
        <trans-unit id="b853231d0010f08413d6054783b30b188c434c4a" translate="yes" xml:space="preserve">
          <source>Derefrence aliases only in finding the base.</source>
          <target state="translated">基地を見つけることだけがデレフェレンス・エイリアスです。</target>
        </trans-unit>
        <trans-unit id="5c2b102c8b83b66f415c2f7f1cf6b0396528bb0f" translate="yes" xml:space="preserve">
          <source>Derefrence aliases only when searching.</source>
          <target state="translated">検索時にのみ、エイリアスを削除します。</target>
        </trans-unit>
        <trans-unit id="755b53dcef95fd29638c16d7fa9871ffe3d7b5e1" translate="yes" xml:space="preserve">
          <source>Derived AVP Data Formats</source>
          <target state="translated">派生 AVP データフォーマット</target>
        </trans-unit>
        <trans-unit id="d6478c428f7d07b93ad21693c15abb2cd2e82f3b" translate="yes" xml:space="preserve">
          <source>Descend recursively down all the directories in &lt;code&gt;DirList&lt;/code&gt; and create a &lt;code&gt;TAGS&lt;/code&gt; file based on all files found.</source>
          <target state="translated">&lt;code&gt;DirList&lt;/code&gt; 内のすべてのディレクトリを再帰的に下降し、見つかったすべてのファイルに基づいて &lt;code&gt;TAGS&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="4cc3d8cf36128f6171cdd77d236ce5ede8a12c4f" translate="yes" xml:space="preserve">
          <source>Descend recursively down the directory &lt;code&gt;Dir&lt;/code&gt; and create a &lt;code&gt;TAGS&lt;/code&gt; file based on all files found.</source>
          <target state="translated">ディレクトリ &lt;code&gt;Dir&lt;/code&gt; を再帰的に下降し、見つかったすべてのファイルに基づいて &lt;code&gt;TAGS&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="891725ab5273cf87959338e5bc21f141aba5aa78" translate="yes" xml:space="preserve">
          <source>Describes a NIF by its name, arity, and implementation.</source>
          <target state="translated">NIF を名前、アリティ、および実装で記述します。</target>
        </trans-unit>
        <trans-unit id="55f8ebc805e65b5b71ddafdae390e3be2bcd69af" translate="yes" xml:space="preserve">
          <source>Description</source>
          <target state="translated">Description</target>
        </trans-unit>
        <trans-unit id="499f6cd092c8652ffec52836471379de11dd40d4" translate="yes" xml:space="preserve">
          <source>Description of &lt;code&gt;UtilDesc = {Cpus, Busy, NonBusy, Misc}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;UtilDesc = {Cpus, Busy, NonBusy, Misc}&lt;/code&gt; 説明= {Cpus、Busy、NonBusy、Misc}：</target>
        </trans-unit>
        <trans-unit id="412f84d6c51e529e7f68c4a06240d52b125fd201" translate="yes" xml:space="preserve">
          <source>Description of the Document Set</source>
          <target state="translated">ドキュメントセットの説明</target>
        </trans-unit>
        <trans-unit id="d59825af02793e907b66e437b654eff9f3807b1e" translate="yes" xml:space="preserve">
          <source>Description of the host that owns the &lt;code&gt;PublicHostKey&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PublicHostKey&lt;/code&gt; を所有するホストの説明。</target>
        </trans-unit>
        <trans-unit id="292c41cb165afd021dffaa514987a15d6445b9ee" translate="yes" xml:space="preserve">
          <source>Description of the host with one or more IP addresses or hostnames.</source>
          <target state="translated">1つ以上のIPアドレスまたはホスト名を持つホストの説明。</target>
        </trans-unit>
        <trans-unit id="87643cd5a8d832b71e24272865a5a2ded4e2c63e" translate="yes" xml:space="preserve">
          <source>Description of the host.</source>
          <target state="translated">ホストの説明。</target>
        </trans-unit>
        <trans-unit id="04f0f87cdf30f41863595935bdd7b915c84a0c3d" translate="yes" xml:space="preserve">
          <source>Deseret</source>
          <target state="translated">Deseret</target>
        </trans-unit>
        <trans-unit id="83c759c4a62a19e65caab6e8de56c9cb7053ee02" translate="yes" xml:space="preserve">
          <source>Desired SFTP protocol version. The actual version is the minimum of the desired version and the maximum supported versions by the SFTP server.</source>
          <target state="translated">希望する SFTP プロトコルのバージョンを指定します。実際のバージョンは、希望するバージョンの最小値と SFTP サーバーがサポートする最大値です。</target>
        </trans-unit>
        <trans-unit id="652ab8315d7abab90d9e337481a24abc1229eff3" translate="yes" xml:space="preserve">
          <source>Despite its name, the &lt;code&gt;write_concurrency&lt;/code&gt; optimization does not improve &lt;code&gt;put&lt;/code&gt;. A call to &lt;code&gt;put&lt;/code&gt; is a relatively heavy operation compared to the very lightweight and scalable &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#sub-3&quot;&gt; sub&lt;/a&gt;&lt;/code&gt;. The cost for a &lt;code&gt;put&lt;/code&gt; with &lt;code&gt;write_concurrency&lt;/code&gt; is like a &lt;code&gt;&lt;a href=&quot;#get-2&quot;&gt;get &lt;/a&gt;&lt;/code&gt; plus a &lt;code&gt;put&lt;/code&gt; without &lt;code&gt;write_concurrency&lt;/code&gt;.</source>
          <target state="translated">その名前にもかかわらず、 &lt;code&gt;write_concurrency&lt;/code&gt; 最適化は &lt;code&gt;put&lt;/code&gt; を改善しません。 &lt;code&gt;put&lt;/code&gt; の呼び出しは、非常に軽量でスケーラブルな &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#sub-3&quot;&gt; sub&lt;/a&gt;&lt;/code&gt; と比較して、比較的重い操作です。コスト &lt;code&gt;put&lt;/code&gt; と &lt;code&gt;write_concurrency&lt;/code&gt; は似ている &lt;code&gt;&lt;a href=&quot;#get-2&quot;&gt;get &lt;/a&gt;&lt;/code&gt; プラス &lt;code&gt;put&lt;/code&gt; なし &lt;code&gt;write_concurrency&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="019fcd14827e4a50079afc44c4fe1765763ca455" translate="yes" xml:space="preserve">
          <source>Dest :: term(),</source>
          <target state="translated">Dest ::term()。</target>
        </trans-unit>
        <trans-unit id="b52d2e5001c6beab510f1e417136efb8ee6c86c6" translate="yes" xml:space="preserve">
          <source>DestMod :: module(),</source>
          <target state="translated">DestMod ::module()。</target>
        </trans-unit>
        <trans-unit id="d01e9be8767f7e2e6949f04a35d1a79f0e103c92" translate="yes" xml:space="preserve">
          <source>Destination to use when replying through, for example, the &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{reply,From,Reply}&lt;/code&gt; to a process that has called the &lt;code&gt;gen_statem&lt;/code&gt; server using &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;gen_statem&lt;/code&gt; サーバーを呼び出したプロセスに &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{reply,From,Reply}&lt;/code&gt; を介して応答するときに使用する宛先。</target>
        </trans-unit>
        <trans-unit id="8ddcb395a27a31d4dfd5b2bb0dc66b34ad576576" translate="yes" xml:space="preserve">
          <source>Destination-Host AVP</source>
          <target state="translated">宛先ホスト AVP</target>
        </trans-unit>
        <trans-unit id="b299ccf590d9a47c91911a41b7d51c688221f560" translate="yes" xml:space="preserve">
          <source>Destination-Realm AVP</source>
          <target state="translated">デスティネーション-リアルム AVP</target>
        </trans-unit>
        <trans-unit id="fc2125ded371f86e9696529d4db25dedd6c7c623" translate="yes" xml:space="preserve">
          <source>Destroy the I/O queue and free all of it's contents</source>
          <target state="translated">I/Oキューを破壊し、その内容をすべて解放します。</target>
        </trans-unit>
        <trans-unit id="686336652b0b8485839d71165534446f3f08ddd2" translate="yes" xml:space="preserve">
          <source>Destroys a condition variable previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_cond_create&quot;&gt; erl_drv_cond_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以前に &lt;code&gt;&lt;a href=&quot;#erl_drv_cond_create&quot;&gt; erl_drv_cond_create&lt;/a&gt;&lt;/code&gt; によって作成された条件変数を破棄します。</target>
        </trans-unit>
        <trans-unit id="6b90c654815fb3f69b2082f0f64d7d604be536d4" translate="yes" xml:space="preserve">
          <source>Destroys a condition variable previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_cond_create&quot;&gt;erl_drv_cond_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_cond_create&quot;&gt;erl_drv_cond_create&lt;/a&gt;&lt;/code&gt; によって以前に作成された条件変数を破棄します。</target>
        </trans-unit>
        <trans-unit id="4fded6dd473e9af526f374078b9cb9f47a5c41b7" translate="yes" xml:space="preserve">
          <source>Destroys a map iterator created by &lt;code&gt;&lt;a href=&quot;#enif_map_iterator_create&quot;&gt; enif_map_iterator_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_map_iterator_create&quot;&gt; enif_map_iterator_create&lt;/a&gt;&lt;/code&gt; によって作成されたマップイテレータを破棄します。</target>
        </trans-unit>
        <trans-unit id="e9ccd649edff0e0054033a6999d53c7cb699f818" translate="yes" xml:space="preserve">
          <source>Destroys a map iterator created by &lt;code&gt;&lt;a href=&quot;#enif_map_iterator_create&quot;&gt;enif_map_iterator_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_map_iterator_create&quot;&gt;enif_map_iterator_create&lt;/a&gt;&lt;/code&gt; によって作成されたマップイテレータを破棄します。</target>
        </trans-unit>
        <trans-unit id="bdf95201e16b693cf6f94bf4481ff5340ba5d6a7" translate="yes" xml:space="preserve">
          <source>Destroys a mutex previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_mutex_create&quot;&gt; erl_drv_mutex_create&lt;/a&gt;&lt;/code&gt;. The mutex must be in an unlocked state before it is destroyed.</source>
          <target state="translated">以前に &lt;code&gt;&lt;a href=&quot;#erl_drv_mutex_create&quot;&gt; erl_drv_mutex_create&lt;/a&gt;&lt;/code&gt; によって作成されたミューテックスを破棄します。ミューテックスは、破棄される前にロック解除状態になっている必要があります。</target>
        </trans-unit>
        <trans-unit id="edc5f8f0098d5350b10b0be3993f3fb15f2a5f4d" translate="yes" xml:space="preserve">
          <source>Destroys a mutex previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_mutex_create&quot;&gt;erl_drv_mutex_create&lt;/a&gt;&lt;/code&gt;. The mutex must be in an unlocked state before it is destroyed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_mutex_create&quot;&gt;erl_drv_mutex_create&lt;/a&gt;&lt;/code&gt; によって以前に作成されたミューテックスを破棄します。ミューテックスは、破棄される前にロック解除状態でなければなりません。</target>
        </trans-unit>
        <trans-unit id="bc40d70420852faca2590402be5acb9907ef63f2" translate="yes" xml:space="preserve">
          <source>Destroys a thread-specific data key previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_key_create&quot;&gt; erl_drv_tsd_key_create&lt;/a&gt;&lt;/code&gt;. All thread-specific data using this key in all threads must be cleared (see &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_set&quot;&gt; erl_drv_tsd_set&lt;/a&gt;&lt;/code&gt;) before the call to &lt;code&gt;erl_drv_tsd_key_destroy&lt;/code&gt;.</source>
          <target state="translated">以前に &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_key_create&quot;&gt; erl_drv_tsd_key_create&lt;/a&gt;&lt;/code&gt; によって作成されたスレッド固有のデータキーを破棄します。すべてのスレッドで、このキーを使用してすべてのスレッド固有データ（参照クリアする必要があります &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_set&quot;&gt; erl_drv_tsd_set&lt;/a&gt;&lt;/code&gt; を呼び出しの前に） &lt;code&gt;erl_drv_tsd_key_destroy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d44a717d9aab8a55fea66c1028c0d144717bb04" translate="yes" xml:space="preserve">
          <source>Destroys a thread-specific data key previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_key_create&quot;&gt;erl_drv_tsd_key_create&lt;/a&gt;&lt;/code&gt;. All thread-specific data using this key in all threads must be cleared (see &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_set&quot;&gt;erl_drv_tsd_set&lt;/a&gt;&lt;/code&gt;) before the call to &lt;code&gt;erl_drv_tsd_key_destroy&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_key_create&quot;&gt;erl_drv_tsd_key_create&lt;/a&gt;&lt;/code&gt; によって以前に作成されたスレッド固有のデータキーを破棄します。すべてのスレッドで、このキーを使用してすべてのスレッド固有データ（参照クリアする必要があります &lt;code&gt;&lt;a href=&quot;#erl_drv_tsd_set&quot;&gt;erl_drv_tsd_set&lt;/a&gt;&lt;/code&gt; を呼び出しの前に） &lt;code&gt;erl_drv_tsd_key_destroy&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e658c382534c856d431058beb111c01082645188" translate="yes" xml:space="preserve">
          <source>Destroys an rwlock previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_rwlock_create&quot;&gt; erl_drv_rwlock_create&lt;/a&gt;&lt;/code&gt;. The rwlock must be in an unlocked state before it is destroyed.</source>
          <target state="translated">以前にerl_drv_rwlock_createによって作成された &lt;code&gt;&lt;a href=&quot;#erl_drv_rwlock_create&quot;&gt; erl_drv_rwlock_create&lt;/a&gt;&lt;/code&gt; ます。rwlockは、破棄される前にロック解除状態になっている必要があります。</target>
        </trans-unit>
        <trans-unit id="21b3af691689dac990e8e2ccddd4e24df729f48e" translate="yes" xml:space="preserve">
          <source>Destroys an rwlock previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_rwlock_create&quot;&gt;erl_drv_rwlock_create&lt;/a&gt;&lt;/code&gt;. The rwlock must be in an unlocked state before it is destroyed.</source>
          <target state="translated">erl_drv_rwlock_createによって以前に作成された &lt;code&gt;&lt;a href=&quot;#erl_drv_rwlock_create&quot;&gt;erl_drv_rwlock_create&lt;/a&gt;&lt;/code&gt; ます。破棄する前に、rwlockをロック解除状態にする必要があります。</target>
        </trans-unit>
        <trans-unit id="a4e23cf2d48d29757ae624f3a6516ed15e25c39f" translate="yes" xml:space="preserve">
          <source>Destroys thread options previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_opts_create&quot;&gt; erl_drv_thread_opts_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以前に &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_opts_create&quot;&gt; erl_drv_thread_opts_create&lt;/a&gt;&lt;/code&gt; によって作成されたスレッドオプションを破棄します。</target>
        </trans-unit>
        <trans-unit id="6f60f49d47af6ed0c00205d050757b397270ed04" translate="yes" xml:space="preserve">
          <source>Destroys thread options previously created by &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_opts_create&quot;&gt;erl_drv_thread_opts_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_thread_opts_create&quot;&gt;erl_drv_thread_opts_create&lt;/a&gt;&lt;/code&gt; によって以前に作成されたスレッドオプションを破棄します。</target>
        </trans-unit>
        <trans-unit id="db7dbdd40f8bae0fb5f7afe2f1bddf7982c90e55" translate="yes" xml:space="preserve">
          <source>Details of these features are described in the following sections.</source>
          <target state="translated">これらの特徴の詳細については、以下の項で説明する。</target>
        </trans-unit>
        <trans-unit id="3e7cdda7f4aca965020ab0e29b81d2360a041c83" translate="yes" xml:space="preserve">
          <source>Determine Order of Events</source>
          <target state="translated">イベントの順番を決める</target>
        </trans-unit>
        <trans-unit id="6ad97781dba7865aa1783063debcdb2d537a0ac1" translate="yes" xml:space="preserve">
          <source>Determine Order of Events with Time of the Event</source>
          <target state="translated">イベントの時間でイベントの順番を決める</target>
        </trans-unit>
        <trans-unit id="aa1c5cb64107d746ebde75e0958a8f3a6e27958e" translate="yes" xml:space="preserve">
          <source>Determine the order of events by saving a time stamp with &lt;code&gt;erlang:now/0&lt;/code&gt; when the event occurs.</source>
          <target state="translated">イベントが発生したときに &lt;code&gt;erlang:now/0&lt;/code&gt; でタイムスタンプを保存することにより、イベントの順序を決定します。</target>
        </trans-unit>
        <trans-unit id="24c4a586b3011bab7b0f4e3856359ff4e771deb5" translate="yes" xml:space="preserve">
          <source>Determine the order of events by saving a tuple containing &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;monotonic time&lt;/a&gt;&lt;/code&gt; and a &lt;code&gt;&lt;a href=&quot;erlang#unique_integer-1&quot;&gt;strictly monotonically increasing integer&lt;/a&gt;&lt;/code&gt; as follows:</source>
          <target state="translated">次のように、 &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-0&quot;&gt;monotonic time&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;erlang#unique_integer-1&quot;&gt;strictly monotonically increasing integer&lt;/a&gt;&lt;/code&gt; を含むタプルを保存して、イベントの順序を決定します。</target>
        </trans-unit>
        <trans-unit id="caceed1b4e4a0639759a625df6beeb4bac2b9f9c" translate="yes" xml:space="preserve">
          <source>Determine the order of events by saving the integer returned by &lt;code&gt;&lt;a href=&quot;erlang#unique_integer-1&quot;&gt; erlang:unique_integer([monotonic])&lt;/a&gt;&lt;/code&gt; when the event occurs. These integers are strictly monotonically ordered on current runtime system instance corresponding to creation time.</source>
          <target state="translated">イベントが発生したときに &lt;code&gt;&lt;a href=&quot;erlang#unique_integer-1&quot;&gt; erlang:unique_integer([monotonic])&lt;/a&gt;&lt;/code&gt; によって返される整数を保存して、イベントの順序を決定します。これらの整数は、作成時間に対応する現在のランタイムシステムインスタンスで厳密に単調に順序付けられます。</target>
        </trans-unit>
        <trans-unit id="8ae8da9095099ca068859dc483a63073a1a878ab" translate="yes" xml:space="preserve">
          <source>Determine the order of events by saving the integer returned by &lt;code&gt;&lt;a href=&quot;erlang#unique_integer-1&quot;&gt;erlang:unique_integer([monotonic])&lt;/a&gt;&lt;/code&gt; when the event occurs. These integers are strictly monotonically ordered on current runtime system instance corresponding to creation time.</source>
          <target state="translated">イベントの発生時に &lt;code&gt;&lt;a href=&quot;erlang#unique_integer-1&quot;&gt;erlang:unique_integer([monotonic])&lt;/a&gt;&lt;/code&gt; によって返された整数を保存することにより、イベントの順序を決定します。これらの整数は、作成時間に対応する現在のランタイムシステムインスタンスで厳密に単調に並べられます。</target>
        </trans-unit>
        <trans-unit id="fdebe34699b9ee4d99aed0852756308878b8bc53" translate="yes" xml:space="preserve">
          <source>Determine the type of currently executing thread. A positive value indicates a scheduler thread while a negative value or zero indicates another type of thread. Currently the following specific types exist (which may be extended in the future):</source>
          <target state="translated">現在実行中のスレッドのタイプを決定します。正の値はスケジューラースレッドを示し、負の値またはゼロは別のタイプのスレッドを示します。現在、以下のような特定のタイプが存在します (将来的に拡張される可能性があります)。</target>
        </trans-unit>
        <trans-unit id="adde7c24299e69435a0426b9738108140c225ee8" translate="yes" xml:space="preserve">
          <source>Determine where the top directory of your OTP installation is. To find this, start Erlang and enter the following command at the Eshell prompt:</source>
          <target state="translated">OTPインストールのトップディレクトリがどこにあるか確認してください。これを見つけるには、Erlangを起動してEshellプロンプトで以下のコマンドを入力してください。</target>
        </trans-unit>
        <trans-unit id="cac67eecea540c0d8b80ffd58fa1854184fabfdc" translate="yes" xml:space="preserve">
          <source>Determines association parameters for the association(s) specified by &lt;code&gt;assoc_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assoc_id&lt;/code&gt; で指定された関連付けの関連付けパラメーターを決定します。</target>
        </trans-unit>
        <trans-unit id="077579a209e2327105a616031f529dd3c6552c1e" translate="yes" xml:space="preserve">
          <source>Determines if garbage collection is allowed when performing the operation. If &lt;code&gt;{allow_gc, false}&lt;/code&gt; is passed, and a garbage collection is needed to determine the result of the operation, the operation is aborted (see information on &lt;code&gt;CheckResult&lt;/code&gt; below). The default is to allow garbage collection, that is, &lt;code&gt;{allow_gc, true}&lt;/code&gt;.</source>
          <target state="translated">操作の実行時にガベージコレクションを許可するかどうかを決定します。場合 &lt;code&gt;{allow_gc, false}&lt;/code&gt; 渡され、ガベージコレクションは、操作の結果を決定するために必要とされ、動作が（上の情報を参照中止さ &lt;code&gt;CheckResult&lt;/code&gt; 以下参照）。デフォルトでは、ガベージコレクションが許可されます。 &lt;code&gt;{allow_gc, true}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="53ce682c952fe8edaea9c1423565e6576408341f" translate="yes" xml:space="preserve">
          <source>Determines if the FTP communication is to be verbose or not.</source>
          <target state="translated">FTP通信を冗長にするかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="494dbc80105974dbc6fb49506b454d2e0d793029" translate="yes" xml:space="preserve">
          <source>Determines retransmission time-out parameters, in milliseconds, for the association(s) specified by &lt;code&gt;assoc_id&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assoc_id&lt;/code&gt; で指定された関連付けの再送信タイムアウトパラメータをミリ秒単位で決定します。</target>
        </trans-unit>
        <trans-unit id="c58d40a211958b5e215990f2db8b6a14f80c8fc1" translate="yes" xml:space="preserve">
          <source>Determines the behaviour of the &lt;code&gt;&lt;a href=&quot;#get_system_memory_data-0&quot;&gt;get_system_memory_data()&lt;/a&gt;&lt;/code&gt; function. When this configuration parameter is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;get_system_memory_data()&lt;/code&gt; behaves as it has done up until the point of the introduction of the configuration parameter. When set to &lt;code&gt;true&lt;/code&gt; new tagged tuples are allowed in the result. Such new tuples may be introduced at any time without prior notice. The classification of &lt;code&gt;cached_memory&lt;/code&gt; on Linux systems will also change so that more memory is classified as &lt;code&gt;cached_memory&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#get_system_memory_data-0&quot;&gt;get_system_memory_data()&lt;/a&gt;&lt;/code&gt; 関数の動作を決定します。この構成パラメーターが &lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;get_system_memory_data()&lt;/code&gt; は、構成パラメーターの導入時点までと同じように動作します。 &lt;code&gt;true&lt;/code&gt; に設定すると、新しいタグ付きタプルが結果に許可されます。このような新しいタプルは、事前の通知なしにいつでも導入できます。Linuxシステムでの &lt;code&gt;cached_memory&lt;/code&gt; の分類も変更され、より多くのメモリが &lt;code&gt;cached_memory&lt;/code&gt; として分類されるようになります。</target>
        </trans-unit>
        <trans-unit id="083ff9a731e189edd69feae97ddfd7141e0e3a9e" translate="yes" xml:space="preserve">
          <source>Determines the buffer space that would be needed by &lt;code&gt;t&lt;/code&gt; if it were encoded into Erlang external format by &lt;code&gt;erl_encode()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_encode()&lt;/code&gt; によってErlang外部形式にエンコードされた場合に &lt;code&gt;t&lt;/code&gt; が必要とするバッファースペースを決定します。</target>
        </trans-unit>
        <trans-unit id="77798bfac995896462ccc3ef147a4e0ae7afccf2" translate="yes" xml:space="preserve">
          <source>Determines the default parameters that this socket tries to negotiate with its peer while establishing an association with it. Is to be set after &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/*&lt;/a&gt;&lt;/code&gt; but before the first &lt;code&gt;&lt;a href=&quot;#connect-4&quot;&gt;connect/*&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;#sctp_initmsg{}&lt;/code&gt; can also be used as ancillary data with the first call of &lt;code&gt;&lt;a href=&quot;#send-3&quot;&gt;send/*&lt;/a&gt;&lt;/code&gt; to a new peer (when a new association is created).</source>
          <target state="translated">このソケットが、ピアとのアソシエーションを確立するときに、ピアとのネゴシエーションを試みるデフォルトのパラメーターを決定します。 &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/*&lt;/a&gt;&lt;/code&gt; の後、最初の &lt;code&gt;&lt;a href=&quot;#connect-4&quot;&gt;connect/*&lt;/a&gt;&lt;/code&gt; の前に設定されます。 &lt;code&gt;#sctp_initmsg{}&lt;/code&gt; は、新しいピアへの &lt;code&gt;&lt;a href=&quot;#send-3&quot;&gt;send/*&lt;/a&gt;&lt;/code&gt; の最初の呼び出しで補助データとして使用することもできます（新しい関連付けが作成されたとき）。</target>
        </trans-unit>
        <trans-unit id="55a2f53f97f755fd2dbcd1b670c65f1dc001d09f" translate="yes" xml:space="preserve">
          <source>Determines the length of a proper list.</source>
          <target state="translated">適切なリストの長さを決定します。</target>
        </trans-unit>
        <trans-unit id="e2a8218334957019102a6de9a1ec80fa4cca7917" translate="yes" xml:space="preserve">
          <source>Determines the maximum chunk size if message fragmentation is used. If &lt;code&gt;0&lt;/code&gt;, the chunk size is limited by the Path MTU only.</source>
          <target state="translated">メッセージの断片化を使用する場合の最大チャンクサイズを決定します。場合は &lt;code&gt;0&lt;/code&gt; 、チャンクサイズは、パスMTUによって制限されています。</target>
        </trans-unit>
        <trans-unit id="7a2c66961d77ac3d187d28893d33c58111b6ef76" translate="yes" xml:space="preserve">
          <source>Determines the time, in seconds, after which an idle association is automatically closed. &lt;code&gt;0&lt;/code&gt; means that the association is never automatically closed.</source>
          <target state="translated">アイドル状態の関連付けが自動的に閉じられるまでの時間を秒単位で決定します。 &lt;code&gt;0&lt;/code&gt; は、関連付けが自動的に閉じられないことを意味します。</target>
        </trans-unit>
        <trans-unit id="515405b131cb1928594e2abd951d111519cdd02e" translate="yes" xml:space="preserve">
          <source>Determines the time-out, in seconds, for flushing unsent data in the &lt;code&gt;close/1&lt;/code&gt; socket call.</source>
          <target state="translated">&lt;code&gt;close/1&lt;/code&gt; ソケット呼び出しで未送信のデータをフラッシュするためのタイムアウトを秒単位で決定します。</target>
        </trans-unit>
        <trans-unit id="dfea908ad3f80022ee7a6824d7720b3ffbfb7ffe" translate="yes" xml:space="preserve">
          <source>Determines the time-out, in seconds, for flushing unsent data in the &lt;code&gt;close/1&lt;/code&gt; socket call. If the first component of the value tuple is &lt;code&gt;false&lt;/code&gt;, the second is ignored. This means that &lt;code&gt;close/1&lt;/code&gt; returns immediately, not waiting for data to be flushed. Otherwise, the second component is the flushing time-out, in seconds.</source>
          <target state="translated">&lt;code&gt;close/1&lt;/code&gt; ソケットコールで未送信データをフラッシュするためのタイムアウトを秒単位で決定します。値タプルの最初のコンポーネントが &lt;code&gt;false&lt;/code&gt; の場合、2番目のコンポーネントは無視されます。これは、データがフラッシュされるのを待たずに、 &lt;code&gt;close/1&lt;/code&gt; がすぐに戻ることを意味します。それ以外の場合、2番目のコンポーネントは、フラッシュタイムアウト（秒単位）です。</target>
        </trans-unit>
        <trans-unit id="731b42a8df83c81b419568ef3bb86ac028eef737" translate="yes" xml:space="preserve">
          <source>Determines the type of data returned from &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/1,2&lt;/a&gt;&lt;/code&gt; から返されるデータのタイプを決定します。</target>
        </trans-unit>
        <trans-unit id="66920f12401db8094f5300be52c85662ab8939e0" translate="yes" xml:space="preserve">
          <source>Determines the type of the given term. The term must be an ordinary Erlang term and not one of the special terms returned by &lt;code&gt;&lt;a href=&quot;#enif_raise_exception&quot;&gt; enif_raise_exception&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#enif_schedule_nif&quot;&gt; enif_schedule_nif&lt;/a&gt;&lt;/code&gt;, or similar.</source>
          <target state="translated">指定された用語のタイプを決定します。この用語は通常のErlang用語である必要があり、 &lt;code&gt;&lt;a href=&quot;#enif_raise_exception&quot;&gt; enif_raise_exception&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#enif_schedule_nif&quot;&gt; enif_schedule_nif&lt;/a&gt;&lt;/code&gt; などによって返される特別な用語の1つであってはなりません。</target>
        </trans-unit>
        <trans-unit id="df0c701d33903386824172bab733ce9700d585ae" translate="yes" xml:space="preserve">
          <source>Determines various per-address parameters for the association specified by &lt;code&gt;assoc_id&lt;/code&gt; and the peer address &lt;code&gt;address&lt;/code&gt; (the SCTP protocol supports multi-homing, so more than one address can correspond to a specified association).</source>
          <target state="translated">&lt;code&gt;assoc_id&lt;/code&gt; で指定された関連付けとピアアドレス &lt;code&gt;address&lt;/code&gt; さまざまなアドレスごとのパラメーターを決定します（SCTPプロトコルはマルチホーミングをサポートしているため、指定された関連付けに複数のアドレスが対応できます）。</target>
        </trans-unit>
        <trans-unit id="ff32eb1db11aaa5dba28236c5193d1eda53b59af" translate="yes" xml:space="preserve">
          <source>Determines whether the compiler generates a &lt;code&gt;beam&lt;/code&gt; file with the given options. &lt;code&gt;true&lt;/code&gt; means that a &lt;code&gt;beam&lt;/code&gt; file is generated. &lt;code&gt;false&lt;/code&gt; means that the compiler generates some listing file, returns a binary, or merely checks the syntax of the source code.</source>
          <target state="translated">コンパイラが指定されたオプションで &lt;code&gt;beam&lt;/code&gt; ファイルを生成するかどうかを決定します。 &lt;code&gt;true&lt;/code&gt; は、 &lt;code&gt;beam&lt;/code&gt; ファイルが生成されることを意味します。 &lt;code&gt;false&lt;/code&gt; は、コンパイラーがリスト・ファイルを生成するか、バイナリーを戻すか、または単にソース・コードの構文をチェックすることを意味します。</target>
        </trans-unit>
        <trans-unit id="0fde766270c08bb2c143bb1ffbdcba5107b28312" translate="yes" xml:space="preserve">
          <source>Determines whether the parser generator should give full information about resolved and unresolved parse action conflicts (&lt;code&gt;true&lt;/code&gt;), or only about those conflicts that prevent a parser from being generated from the input grammar (&lt;code&gt;false&lt;/code&gt;, the default).</source>
          <target state="translated">パーサージェネレーターが解決済みおよび未解決の解析アクションの競合に関する完全な情報を提供するか（ &lt;code&gt;true&lt;/code&gt; ）、入力構文からパーサーが生成されないようにする競合のみ（ &lt;code&gt;false&lt;/code&gt; 、デフォルト）を提供するかを決定します。</target>
        </trans-unit>
        <trans-unit id="f5765dc87a449f2a174d7f995a9dba949217fc42" translate="yes" xml:space="preserve">
          <source>Determines which module to call for accessing the file server. The default value is &lt;code&gt;ssh_sftpd_file&lt;/code&gt;, which uses the &lt;code&gt;file&lt;/code&gt; and &lt;code&gt;filelib&lt;/code&gt; APIs to access the standard OTP file server. This option can be used to plug in other file servers.</source>
          <target state="translated">ファイルサーバーにアクセスするために呼び出すモジュールを決定します。デフォルト値は &lt;code&gt;ssh_sftpd_file&lt;/code&gt; で、 &lt;code&gt;file&lt;/code&gt; および &lt;code&gt;filelib&lt;/code&gt; APIを使用して標準のOTPファイルサーバーにアクセスします。このオプションを使用して、他のファイルサーバーを接続できます。</target>
        </trans-unit>
        <trans-unit id="194e22e942d1687afcd0c6b99914e56add4b87df" translate="yes" xml:space="preserve">
          <source>Determining what data to keep after a communication failure is outside the scope of &lt;code&gt;Mnesia&lt;/code&gt;. One approach is to determine which &quot;island&quot; contains most of the nodes. Using option &lt;code&gt;{majority,true}&lt;/code&gt; for critical tables can be a way to ensure that nodes that are not part of a &quot;majority island&quot; cannot update those tables. Notice that this constitutes a reduction in service on the minority nodes. This would be a tradeoff in favor of higher consistency guarantees.</source>
          <target state="translated">通信障害後に保持するデータの決定は、 &lt;code&gt;Mnesia&lt;/code&gt; の範囲外です。1つのアプローチは、どの「アイランド」にほとんどのノードが含まれるかを判別することです。重要なテーブルにオプション &lt;code&gt;{majority,true}&lt;/code&gt; を使用すると、「マジョリティアイランド」の一部ではないノードがこれらのテーブルを更新できないようにすることができます。これにより、少数ノードでのサービスが減少することに注意してください。これは、より高い一貫性の保証を支持するトレードオフになります。</target>
        </trans-unit>
        <trans-unit id="08783d6c0e8f974bda4d0f0259a9bced7702d406" translate="yes" xml:space="preserve">
          <source>Dets organizes data as a linear hash list and the hash list grows gracefully as more data is inserted into the table. Space management on the file is performed by what is called a buddy system. The current implementation keeps the entire buddy system in RAM, which implies that if the table gets heavily fragmented, quite some memory can be used up. The only way to defragment a table is to close it and then open it again with option &lt;code&gt;repair&lt;/code&gt; set to &lt;code&gt;force&lt;/code&gt;.</source>
          <target state="translated">Detsはデータを線形ハッシュリストとして編成します。ハッシュリストは、テーブルにデータが挿入されるにつれて適切に拡大します。ファイルのスペース管理は、いわゆるバディシステムによって実行されます。現在の実装では、バディシステム全体がRAMに保持されます。つまり、テーブルが大幅に断片化されると、かなりのメモリが使い果たされる可能性があります。テーブルを最適化する唯一の方法は、テーブルを閉じてから、オプション &lt;code&gt;repair&lt;/code&gt; を &lt;code&gt;force&lt;/code&gt; に設定して再度開くことです。</target>
        </trans-unit>
        <trans-unit id="d589e63f8dc652ae3141561171bed423eef70c79" translate="yes" xml:space="preserve">
          <source>Dets tables must be opened before they can be updated or read, and when finished they must be properly closed. If a table is not properly closed, Dets automatically repairs the table. This can take a substantial time if the table is large. A Dets table is closed when the process which opened the table terminates. If many Erlang processes (users) open the same Dets table, they share the table. The table is properly closed when all users have either terminated or closed the table. Dets tables are not properly closed if the Erlang runtime system terminates abnormally.</source>
          <target state="translated">Detsのテーブルは、更新や読み込みを行う前に開かなければならず、終了したら適切に閉じなければなりません。テーブルが適切に閉じられていない場合、Detsは自動的にテーブルを修復します。これは、テーブルが大きい場合にはかなりの時間がかかることがあります。Detsのテーブルは、テーブルを開いたプロセスが終了すると閉じます。多くのErlangプロセス(ユーザ)が同じDetsテーブルを開いた場合、テーブルを共有します。すべてのユーザが終了するかテーブルを閉じたときにテーブルは適切に閉じられます。Erlangランタイムシステムが異常終了した場合、Detsテーブルは適切に閉じられません。</target>
        </trans-unit>
        <trans-unit id="c3376a9770679682419b8a2b1d090a087ba2468b" translate="yes" xml:space="preserve">
          <source>Devanagari</source>
          <target state="translated">Devanagari</target>
        </trans-unit>
        <trans-unit id="456219399c5e2e2d6869a33bf75f63ddc05cd05c" translate="yes" xml:space="preserve">
          <source>Developers must always invoke the &lt;code&gt;debug_info/4&lt;/code&gt; function and never rely on the &lt;code&gt;Data&lt;/code&gt; stored in the &lt;code&gt;debug_info&lt;/code&gt; chunk, as it is opaque and may change at any moment. &lt;code&gt;no_debug_info&lt;/code&gt; means that chunk &lt;code&gt;&quot;Dbgi&quot;&lt;/code&gt; is present, but empty.</source>
          <target state="translated">開発者は常に &lt;code&gt;debug_info/4&lt;/code&gt; 関数を呼び出す必要があり、 &lt;code&gt;debug_info&lt;/code&gt; チャンクに格納されている &lt;code&gt;Data&lt;/code&gt; は不透明であり、いつでも変更される可能性があるため、依存しないでください。 &lt;code&gt;no_debug_info&lt;/code&gt; は、チャンク &lt;code&gt;&quot;Dbgi&quot;&lt;/code&gt; は存在するが空であることを意味します。</target>
        </trans-unit>
        <trans-unit id="16446bdea2b981010fbb150f3aca921d223adb77" translate="yes" xml:space="preserve">
          <source>Developers should rely on stacktrace entries only for debugging purposes.</source>
          <target state="translated">開発者は、デバッグ目的のためだけに stacktrace エントリに頼るべきです。</target>
        </trans-unit>
        <trans-unit id="5c2648f2b3ce72e567281814263f70dc09c18843" translate="yes" xml:space="preserve">
          <source>Deviations from the standard</source>
          <target state="translated">標準からの逸脱</target>
        </trans-unit>
        <trans-unit id="cb81d10268def1ddcd9e7ea7d13651d61cbb6e0a" translate="yes" xml:space="preserve">
          <source>Device-Watchdog-Answer</source>
          <target state="translated">Device-Watchdog-Answer</target>
        </trans-unit>
        <trans-unit id="ded250e2e75f5d9108516c8323ac1f5e2d1f881d" translate="yes" xml:space="preserve">
          <source>Device-Watchdog-Request</source>
          <target state="translated">Device-Watchdog-Request</target>
        </trans-unit>
        <trans-unit id="64f91465847372ce990aad877a06eb2ed199d44b" translate="yes" xml:space="preserve">
          <source>Dialyzer GUI version.</source>
          <target state="translated">DialyzerのGUI版。</target>
        </trans-unit>
        <trans-unit id="4147ae5f76685fdd79ca81b8faa42c7d8a8edcc8" translate="yes" xml:space="preserve">
          <source>Dialyzer can also be used directly from Erlang. See &lt;code&gt;&lt;a href=&quot;dialyzer&quot;&gt;dialyzer(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Dialyzerは、Erlangから直接使用することもできます。 &lt;code&gt;&lt;a href=&quot;dialyzer&quot;&gt;dialyzer(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="628db5ea350d60eef0f983d37cdceaf38ea7f18b" translate="yes" xml:space="preserve">
          <source>Dialyzer can be called from the command line, from Erlang, and from a GUI.</source>
          <target state="translated">Dialyzerはコマンドラインからでも、Erlangからでも、GUIからでも呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="2e7d2d8ec7f1493ae5e9513f0acbf5fb6b111813" translate="yes" xml:space="preserve">
          <source>Dialyzer can be used directly from Erlang. Both the GUI and the command-line versions are also available. The options are similar to the ones given from the command line, see section &lt;code&gt;&lt;a href=&quot;#command_line&quot;&gt; Using Dialyzer from the Command Line&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DialyzerはErlangから直接使用できます。GUIバージョンとコマンドラインバージョンの両方も利用できます。オプションは、コマンドラインから指定されたものと同様です。 &lt;code&gt;&lt;a href=&quot;#command_line&quot;&gt; Using Dialyzer from the Command Line&lt;/a&gt;&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1d35fb792c27e96d88efcff82ddb3bdb62e1411a" translate="yes" xml:space="preserve">
          <source>Dialyzer can be used directly from Erlang. Both the GUI and the command-line versions are also available. The options are similar to the ones given from the command line, see section &lt;code&gt;&lt;a href=&quot;#command_line&quot;&gt;Using Dialyzer from the Command Line&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Dialyzerは、Erlangから直接使用できます。GUIとコマンドラインバージョンの両方も使用できます。オプションは、コマンドラインから与えられるものと同様です。セクション &lt;code&gt;&lt;a href=&quot;#command_line&quot;&gt;Using Dialyzer from the Command Line&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d8021a0b92f30253eca0f240a4f65bb36bd5a3b5" translate="yes" xml:space="preserve">
          <source>Dialyzer command-line version.</source>
          <target state="translated">Dialyzer コマンドライン版。</target>
        </trans-unit>
        <trans-unit id="efa6b71916bdfbf21fa4dff08a93a9d1ac41b102" translate="yes" xml:space="preserve">
          <source>Dialyzer has a command-line version for automated use. See &lt;code&gt;&lt;a href=&quot;dialyzer&quot;&gt;dialyzer(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Dialyzerには、自動使用のためのコマンドラインバージョンがあります。 &lt;code&gt;&lt;a href=&quot;dialyzer&quot;&gt;dialyzer(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="da84b06d671a1c03ee7934e17676e95918b41dab" translate="yes" xml:space="preserve">
          <source>Dialyzer has a command-line version for automated use. This section provides a brief description of the options. The same information can be obtained by writing the following in a shell:</source>
          <target state="translated">Dialyzerには、自動で使用するためのコマンドライン版があります。ここでは、オプションについて簡単に説明します。シェルで以下のように記述しても同様の情報が得られます。</target>
        </trans-unit>
        <trans-unit id="21cb03f781be29c029b6c322b9928599481570de" translate="yes" xml:space="preserve">
          <source>Dialyzer has two analysis modes: &quot;Byte Code&quot; and &quot;Source Code&quot;. They are controlled by the buttons in the top-middle part of the main window, under &lt;strong&gt;Analysis Options&lt;/strong&gt;.</source>
          <target state="translated">Dialyzerには、「バイトコード」と「ソースコード」の2つの分析モードがあります。これらは、メインウィンドウの上部中央にある[ &lt;strong&gt;分析オプション]の&lt;/strong&gt;下のボタンによって制御されます。</target>
        </trans-unit>
        <trans-unit id="7a5351192a936d150a3e55c047000d982954a92b" translate="yes" xml:space="preserve">
          <source>Dialyzer is a static analysis tool that identifies software discrepancies, such as definite type errors, code that has become dead or unreachable because of programming error, and unnecessary tests, in single Erlang modules or entire (sets of) applications.</source>
          <target state="translated">Dialyzerは静的解析ツールで、単一のErlangモジュールやアプリケーション全体(セット)の中で、定型エラー、プログラミングエラーのために死んでしまったコードや到達できないコード、不要なテストなどのソフトウェアの不一致を特定することができます。</target>
        </trans-unit>
        <trans-unit id="4856ad4cc2225ddaaa94171f074e8b6f1592a9b9" translate="yes" xml:space="preserve">
          <source>Dialyzer looks if there is an environment variable called &lt;code&gt;DIALYZER_PLT&lt;/code&gt; and places the PLT at this location. If no such variable is set, Dialyzer places the PLT at &lt;code&gt;$HOME/.dialyzer_plt&lt;/code&gt;. The placement can also be specified using the options &lt;code&gt;--plt&lt;/code&gt; or &lt;code&gt;--output_plt&lt;/code&gt;.</source>
          <target state="translated">Dialyzerは、 &lt;code&gt;DIALYZER_PLT&lt;/code&gt; と呼ばれる環境変数があるかどうかを調べ、PLTをこの場所に配置します。そのような変数が設定されていない場合、DialyzerはPLTを &lt;code&gt;$HOME/.dialyzer_plt&lt;/code&gt; ます。配置は、オプション &lt;code&gt;--plt&lt;/code&gt; または &lt;code&gt;--output_plt&lt;/code&gt; を使用して指定することもできます。</target>
        </trans-unit>
        <trans-unit id="a144d9aa62d8283331e0453d170211eae479447c" translate="yes" xml:space="preserve">
          <source>Dialyzer starts its analysis from either debug-compiled BEAM bytecode or from Erlang source code. The file and line number of a discrepancy is reported along with an indication of what the discrepancy is about. Dialyzer bases its analysis on the concept of success typings, which allows for sound warnings (no false positives).</source>
          <target state="translated">DialyzerはデバッグコンパイルされたBEAMバイトコードかErlangソースコードから解析を開始します。不一致のファイルと行番号は、その不一致が何であるかを示す表示とともに報告されます。Dialyzerは成功型の概念に基づいて解析を行います。</target>
        </trans-unit>
        <trans-unit id="10608feb501f52bd03b6ddf98a4210f55bd5af23" translate="yes" xml:space="preserve">
          <source>Dialyzer stores the information of the analyzed functions in a Persistent Lookup Table (PLT), see section &lt;code&gt;&lt;a href=&quot;#plt&quot;&gt;The Persistent Lookup Table&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Dialyzerは、分析された関数の情報を永続的ルックアップテーブル（PLT）に保存します。 &lt;code&gt;&lt;a href=&quot;#plt&quot;&gt;The Persistent Lookup Table&lt;/a&gt;&lt;/code&gt; 」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="494e2325bcc3322adec1ce4f072ada1bb99b4f8d" translate="yes" xml:space="preserve">
          <source>Dialyzer stores the result of an analysis in a Persistent Lookup Table (PLT). The PLT can then be used as a starting point for later analyses. It is recommended to build a PLT with the Erlang/OTP applications that you are using, but also to include your own applications that you are using frequently.</source>
          <target state="translated">ダイアライザーは、分析結果を永続的なルックアップ・テーブル (PLT)に保存します。このPLTは後の分析の出発点として使うことができます。あなたが使っているErlang/OTPアプリケーションと一緒にPLTを構築することをお勧めしますが、頻繁に使っているあなた自身のアプリケーションも含めることもできます。</target>
        </trans-unit>
        <trans-unit id="838da0bec6523e8f2f3da58812e9f1ef6f9a9fc7" translate="yes" xml:space="preserve">
          <source>Dialyzer then reanalyzes the changed files and the files that depend on these files. Notice that this consistency check is performed automatically the next time you run Dialyzer with this PLT. Option &lt;code&gt;--check_plt&lt;/code&gt; is only for doing so without doing any other analysis.</source>
          <target state="translated">次に、Dialyzerは変更されたファイルとこれらのファイルに依存するファイルを再分析します。この整合性チェックは、次回このPLTでDialyzerを実行するときに自動的に実行されることに注意してください。オプション &lt;code&gt;--check_plt&lt;/code&gt; は、他の分析を行わずに行うためのものです。</target>
        </trans-unit>
        <trans-unit id="510a8a06e0d737b5aa0df793bf420e94ca04a8ea" translate="yes" xml:space="preserve">
          <source>Dialyzer, a DIscrepancy AnaLYZer for ERlang programs.</source>
          <target state="translated">Dialyzer,ERlangプログラムのためのDIscrepancy AnaLYZer。</target>
        </trans-unit>
        <trans-unit id="07d09b590e7c65396fb0af8b4e685bc5f08fc46f" translate="yes" xml:space="preserve">
          <source>Diameter AVPs</source>
          <target state="translated">直径AVP</target>
        </trans-unit>
        <trans-unit id="595221e9670fe2806542b1909df3759ecc51c609" translate="yes" xml:space="preserve">
          <source>Diameter Answer Processing</source>
          <target state="translated">ダイアモンドアンサー処理</target>
        </trans-unit>
        <trans-unit id="492ddd4795919309b00e3cb99b03e084593644b2" translate="yes" xml:space="preserve">
          <source>Diameter Application Compliance</source>
          <target state="translated">直径アプリケーションのコンプライアンス</target>
        </trans-unit>
        <trans-unit id="233b44598089548f0cb439d8260d802c42d8d926" translate="yes" xml:space="preserve">
          <source>Diameter Base Protocol AVPs</source>
          <target state="translated">直径ベースプロトコルAVP</target>
        </trans-unit>
        <trans-unit id="95745ee3caa29c97347231fc7062812cc1cabc48" translate="yes" xml:space="preserve">
          <source>Diameter Command Naming Conventions</source>
          <target state="translated">直径コマンドの命名規則</target>
        </trans-unit>
        <trans-unit id="f8e96b9bc84f819f28cac97e61334c92e49b6d2c" translate="yes" xml:space="preserve">
          <source>Diameter Header</source>
          <target state="translated">直径ヘッダー</target>
        </trans-unit>
        <trans-unit id="fb85483589f2a0d213806104d451a8bbb89a7a0f" translate="yes" xml:space="preserve">
          <source>Diameter Message Processing</source>
          <target state="translated">直径メッセージ処理</target>
        </trans-unit>
        <trans-unit id="cf7b0cf80edb413895d382c150dbc8ff733c12d1" translate="yes" xml:space="preserve">
          <source>Diameter Path Authorization</source>
          <target state="translated">径路認可</target>
        </trans-unit>
        <trans-unit id="07688cd69d8a46c450445f8b85d3d9fe42582147" translate="yes" xml:space="preserve">
          <source>Diameter Peer Discovery</source>
          <target state="translated">ダイアモンドピアディスカバリー</target>
        </trans-unit>
        <trans-unit id="de4ce74cc36fc385d21c9d15a70dc2b2131b85a5" translate="yes" xml:space="preserve">
          <source>Diameter Peers</source>
          <target state="translated">直径のピア</target>
        </trans-unit>
        <trans-unit id="305ef1f7771347650724f9757c11f8edfa0beab3" translate="yes" xml:space="preserve">
          <source>Diameter Protocol</source>
          <target state="translated">直径プロトコル</target>
        </trans-unit>
        <trans-unit id="2877c6abfd87eef90c657292849be45de67435cd" translate="yes" xml:space="preserve">
          <source>Diameter Protocol-Related Configurable Parameters</source>
          <target state="translated">直径プロトコル関連の設定可能パラメータ</target>
        </trans-unit>
        <trans-unit id="41c8a11b72baca5ae179f4f1fcd33229819687ce" translate="yes" xml:space="preserve">
          <source>Diameter Request Routing Overview</source>
          <target state="translated">直径リクエストルーティングの概要</target>
        </trans-unit>
        <trans-unit id="32dcfb391752d0e475c6c43a642bd9b52b1747e5" translate="yes" xml:space="preserve">
          <source>Diameter User Sessions</source>
          <target state="translated">ダイアモンドユーザーセッション</target>
        </trans-unit>
        <trans-unit id="803d3673bba0aa163b1bd90094ca9f273861f900" translate="yes" xml:space="preserve">
          <source>Diameter applications to which the transport should be restricted. Defaults to all applications configured on the service in question. Applications not configured on the service in question are ignored.</source>
          <target state="translated">トランスポートを制限する必要がある Diameter アプリケーション。デフォルトは、対象のサービスで構成されているすべてのアプリケーションに設定されます。対象のサービスで構成されていないアプリケーションは無視されます。</target>
        </trans-unit>
        <trans-unit id="a6fa8fdf84e2a98961b3740684166200004f3961" translate="yes" xml:space="preserve">
          <source>Diameter dictionary compilation.</source>
          <target state="translated">直径の辞書をコンパイルします。</target>
        </trans-unit>
        <trans-unit id="2addd157d30e019e6a4e7e180d209a97e4c55ca4" translate="yes" xml:space="preserve">
          <source>Diameter transport interface.</source>
          <target state="translated">直径トランスポートインターフェース。</target>
        </trans-unit>
        <trans-unit id="43b3cac5780593e4e3d7bc6239e48a349da15068" translate="yes" xml:space="preserve">
          <source>Diameter transport over SCTP.</source>
          <target state="translated">SCTP上での直径輸送。</target>
        </trans-unit>
        <trans-unit id="acdb14fc245c23daf5748b9e75a3fe1897608e0b" translate="yes" xml:space="preserve">
          <source>Diameter transport over TCP.</source>
          <target state="translated">TCP 上での直径輸送。</target>
        </trans-unit>
        <trans-unit id="7b58dbac06038c0f0528d8a4e1d07f33a1316add" translate="yes" xml:space="preserve">
          <source>Dictionary as returned by &lt;code&gt;&lt;a href=&quot;#new-0&quot;&gt;new/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#new-0&quot;&gt;new/0&lt;/a&gt;&lt;/code&gt; によって返される辞書。</target>
        </trans-unit>
        <trans-unit id="87d89e495b6fa6aeacaa5f11b3b341c160db5603" translate="yes" xml:space="preserve">
          <source>Dictionary interface of the diameter application.</source>
          <target state="translated">直径アプリケーションの辞書インターフェース。</target>
        </trans-unit>
        <trans-unit id="8e8972c07f023589103328ced29174f0a45e8b6f" translate="yes" xml:space="preserve">
          <source>Dictionary module generation also results in a hrl file that defines records for the messages and Grouped AVPs defined by the dictionary, these records being what a user of the diameter application sends and receives, modulo other possible formats as discussed in &lt;code&gt;diameter_app(3)&lt;/code&gt;. These records and the underlying Erlang data types corresponding to Diameter data formats are discussed in &lt;code&gt;&lt;a href=&quot;#MESSAGE_RECORDS&quot;&gt;MESSAGE RECORDS&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#DATA_TYPES&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt; respectively. The generated hrl also contains macro definitions for the possible values of AVPs of type Enumerated.</source>
          <target state="translated">ディクショナリモジュールの生成により、hrlファイルも作成されます。これは、メッセージのレコードとディクショナリによって定義されたグループ化されたAVPを定義します。これらのレコードは、 &lt;code&gt;diameter_app(3)&lt;/code&gt; で説明されている他の可能な形式を法として、diameterアプリケーションのユーザーが送受信するものです。これらのレコードと、Diameterデータ形式に対応する基になるErlangデータ型については、それぞれ &lt;code&gt;&lt;a href=&quot;#MESSAGE_RECORDS&quot;&gt;MESSAGE RECORDS&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#DATA_TYPES&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt; で説明します。生成されたhrlには、EnumeratedタイプのAVPの可能な値のマクロ定義も含まれています。</target>
        </trans-unit>
        <trans-unit id="2239e5358e76aa29c75a70053325a0133f68eb6a" translate="yes" xml:space="preserve">
          <source>Different Information Transfers</source>
          <target state="translated">異なる情報の転送</target>
        </trans-unit>
        <trans-unit id="f28cb22fc88809e7a4c9bd4d34ed7db7571189a7" translate="yes" xml:space="preserve">
          <source>Different applications using this library may have very different requirements. One application could be running on a high performance server, while another is running on a small device with very limited cpu capacity. For example, the first one may accept many users simultaneously logged in, while the second one wants to limit them to only one.</source>
          <target state="translated">このライブラリを使用しているアプリケーションによっては、非常に異なる要件を持っているかもしれません。あるアプリケーションは高性能なサーバ上で動作しているかもしれませんし、別のアプリケーションは非常に限られた CPU 容量の小さなデバイス上で動作しているかもしれません。例えば、最初のアプリケーションでは多くのユーザを同時にログインさせたいが、2番目のアプリケーションでは1人だけに制限したいとします。</target>
        </trans-unit>
        <trans-unit id="6883ae1d8644737fc04ee8e419ba151be5af18e0" translate="yes" xml:space="preserve">
          <source>Different databases may also support creating of procedures that contains more than one SQL query. For example, the following SQLServer-specific statement creates a procedure that returns a result set containing information about employees that work at the department and a result set listing the customers of that department.</source>
          <target state="translated">異なるデータベースでは、複数のSQLクエリを含むプロシージャの作成もサポートしている場合があります。例えば、以下のSQLServer固有のステートメントは、その部門で働く従業員に関する情報を含む結果セットと、その部門の顧客のリストを含む結果セットを返すプロシージャを作成します。</target>
        </trans-unit>
        <trans-unit id="5612af3537f6d424dafb548b8d0f2861de1fab1e" translate="yes" xml:space="preserve">
          <source>Different definitions exist for the week of the year. This module contains a week of the year implementation conforming to the ISO 8601 standard. As the week number for a specified date can fall on the previous, the current, or on the next year, it is important to specify both the year and the week number. Functions &lt;code&gt;iso_week_number/0&lt;/code&gt; and &lt;code&gt;iso_week_number/1&lt;/code&gt; return a tuple of the year and the week number.</source>
          <target state="translated">年間の週ごとに異なる定義が存在します。このモジュールには、ISO 8601規格に準拠した1週間の実装が含まれています。指定した日付の週番号は、前年、現在、または翌年になる可能性があるため、年と週番号の両方を指定することが重要です。関数 &lt;code&gt;iso_week_number/0&lt;/code&gt; および &lt;code&gt;iso_week_number/1&lt;/code&gt; は、年と週番号のタプルを返します。</target>
        </trans-unit>
        <trans-unit id="ce0e98d45f7debe7b95b821f0db8cec8b4e61285" translate="yes" xml:space="preserve">
          <source>Different hardware architectures have different memory models. Some architectures allows very aggressive reordering of memory accesses while other architectures only reorder a few specific cases. Common to all modern hardware is, however, that some type of reordering will occur. When using locks to protect all memory accesses made from multiple threads such reorderings will not be visible. The locking primitives will ensure that the memory accesses will be ordered. When using lock free algorithms one do however have to take this reordering made by the hardware into account.</source>
          <target state="translated">異なるハードウェアアーキテクチャには、異なるメモリモデルがあります。いくつかのアーキテクチャでは、メモリアクセスの非常に積極的な再順序付けが可能であるのに対し、他のアーキテクチャではいくつかの特定のケースのみを再順序付けしています。しかし、すべての最新のハードウェアに共通しているのは、ある種の並べ替えが発生するということです。複数のスレッドからのすべてのメモリアクセスを保護するためにロックを使用している場合、そのような並べ替えは目に見えません。ロックプリミティブはメモリアクセスの順序付けを確実にします。ロックフリーのアルゴリズムを使用する場合、ハードウェアによるこの順序変更を考慮に入れなければなりません。</target>
        </trans-unit>
        <trans-unit id="a780becc239b49b491b75f64fbceae7f3572be1d" translate="yes" xml:space="preserve">
          <source>Different operating systems and tools support different encodings. For example, Linux and MacOS X have chosen the UTF-8 encoding, which is backward compatible with 7-bit ASCII and therefore affects programs written in plain English the least. Windows supports a limited version of UTF-16, namely all the code planes where the characters can be stored in one single 16-bit entity, which includes most living languages.</source>
          <target state="translated">オペレーティングシステムやツールによってサポートしているエンコーディングは異なります。た と えば、Linux と MacOS X は UTF-8 エン コ ーデ ィ ン グ を選択 し てお り 、 こ れは 7 ビ ッ ト ASCII と の下位互換性があ る ため、 プ レーンイングリッシュで書かれたプ ログ ラ ムへの影響が最も少な く な り ます。Windows は UTF-16 の限定バージ ョ ンに対応 し てお り 、 すなわち、 キ ャ ラ ク タ が 1 個の 16 ビ ッ ト エン テ ィ テ ィ テ ィ の中に格納で き る すべての コ ー ド プ レーンに対応 し てお り 、 こ れにはほとんどの生きた言語が含まれています。</target>
        </trans-unit>
        <trans-unit id="2e33264a68973aa9eaf05e50aaef661eca484cb2" translate="yes" xml:space="preserve">
          <source>Different parts of the system will be handled differently regarding compatibility. The following items describe how different parts of the system are handled.</source>
          <target state="translated">互換性に関しては、システムの異なる部分の扱いが異なります。以下の項目では、システムの異なる部分がどのように扱われるかを説明します。</target>
        </trans-unit>
        <trans-unit id="0cabc30640c262e4e1ee03e71abfde75a1286e90" translate="yes" xml:space="preserve">
          <source>Different runtime system instances will use different unspecified points in time as base for their Erlang monotonic clocks. That is, it is &lt;strong&gt;pointless&lt;/strong&gt; comparing monotonic times from different runtime system instances. Different runtime system instances can also place this unspecified point in time different relative runtime system start. It can be placed in the future (time at start is a negative value), the past (time at start is a positive value), or the runtime system start (time at start is zero). The monotonic time at runtime system start can be retrieved by calling &lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt; erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">異なるランタイムシステムインスタンスは、Erlang単調クロックのベースとして異なる不特定の時点を使用します。つまり、異なるランタイムシステムインスタンスからの単調な時間を比較することは&lt;strong&gt;無意味&lt;/strong&gt;です。異なるランタイムシステムインスタンスは、この不特定の時点を異なる相対ランタイムシステム起動に置くこともできます。将来（開始時の時間が負の値）、過去（開始時の時間が正の値）、またはランタイムシステムの開始（開始時の時間がゼロ）に配置できます。実行時のシステム起動時の単調な時間は、 &lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt; erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt; を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="aed32969a09a784815b2c2d1e9d839fe9acde992" translate="yes" xml:space="preserve">
          <source>Different runtime system instances will use different unspecified points in time as base for their Erlang monotonic clocks. That is, it is &lt;strong&gt;pointless&lt;/strong&gt; comparing monotonic times from different runtime system instances. Different runtime system instances can also place this unspecified point in time different relative runtime system start. It can be placed in the future (time at start is a negative value), the past (time at start is a positive value), or the runtime system start (time at start is zero). The monotonic time at runtime system start can be retrieved by calling &lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt;erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">異なるランタイムシステムインスタンスは、指定されていない異なる時点をErlang単調時計のベースとして使用します。つまり、異なるランタイムシステムインスタンスからの単調な時間を比較しても&lt;strong&gt;意味&lt;/strong&gt;があり&lt;strong&gt;ません&lt;/strong&gt;。異なるランタイムシステムインスタンスは、この未指定の特定の時点で、異なる相対ランタイムシステムを起動することもできます。未来（開始時刻は負の値）、過去（開始時刻は正の値）、またはランタイムシステムの開始（開始時刻はゼロ）に配置できます。実行時のシステム開始時の単調な時間は、 &lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt;erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt; を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="3b3df3df2ca9d872263d17d4c6946b215d1cf6da" translate="yes" xml:space="preserve">
          <source>Different transaction managers employ different strategies to satisfy the isolation property. &lt;code&gt;Mnesia&lt;/code&gt; uses the standard technique of two phase locking. That is, locks are set on records before they are read or written. &lt;code&gt;Mnesia&lt;/code&gt; uses the following lock types:</source>
          <target state="translated">トランザクションマネージャーが異なれば、分離特性を満たすために異なる戦略が採用されます。 &lt;code&gt;Mnesia&lt;/code&gt; は、2フェーズロックの標準的な手法を使用しています。つまり、読み取りまたは書き込みの前に、レコードにロックが設定されます。 &lt;code&gt;Mnesia&lt;/code&gt; は次のロックタイプを使用します。</target>
        </trans-unit>
        <trans-unit id="5f30aa1d84a5056694b8a279afb906ca8147af45" translate="yes" xml:space="preserve">
          <source>Diffie-Hellman</source>
          <target state="translated">Diffie-Hellman</target>
        </trans-unit>
        <trans-unit id="1799dfd79ce2607c8a41d935527b9f4ab8fcdd66" translate="yes" xml:space="preserve">
          <source>Diffie-Hellman Keys and parameters</source>
          <target state="translated">Diffie-Hellman キーとパラメータ</target>
        </trans-unit>
        <trans-unit id="335eaacb0e06e9f01d986f626e623ea878a4ed44" translate="yes" xml:space="preserve">
          <source>Diffie-Hellman computations are available with OpenSSL versions compatible with Erlang CRYPTO if not disabled by configuration. To dynamically check availability, check that the atom &lt;code&gt;dh&lt;/code&gt; is present in the list returned by &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Diffie-Hellman計算は、構成によって無効にされていない場合、ErlangCRYPTOと互換性のあるOpenSSLバージョンで使用できます。可用性を動的にチェックするには、 &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt; によって返されるリストにアトム &lt;code&gt;dh&lt;/code&gt; が存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="cef6fbd636e82ab4f62121042f17cc0a73b0b502" translate="yes" xml:space="preserve">
          <source>DigestType ::</source>
          <target state="translated">DigestType :.</target>
        </trans-unit>
        <trans-unit id="132c55c7377232a793fc2764c202db07a983c1ab" translate="yes" xml:space="preserve">
          <source>Digests and hash</source>
          <target state="translated">ダイジェストとハッシュ</target>
        </trans-unit>
        <trans-unit id="cc94430bcd2bf3633999f075c4aa5f4c6e00a26c" translate="yes" xml:space="preserve">
          <source>Digital signatures &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/publications/drafts/fips186-3/fips_186-3.pdf&quot;&gt;Digital Signature Standard (DSS)&lt;/a&gt;&lt;/code&gt; and&lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/groups/STM/cavp/documents/dss2/ecdsa2vs.pdf&quot;&gt; Elliptic Curve Digital Signature Algorithm (ECDSA) &lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">デジタル署名 &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/publications/drafts/fips186-3/fips_186-3.pdf&quot;&gt;Digital Signature Standard (DSS)&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/groups/STM/cavp/documents/dss2/ecdsa2vs.pdf&quot;&gt; Elliptic Curve Digital Signature Algorithm (ECDSA) &lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f2d1527ad440c65c78936fafa709eaae0056a11c" translate="yes" xml:space="preserve">
          <source>Digraph &lt;code&gt;G&lt;/code&gt; is traversed in a breadth-first manner, and the first found path is returned.</source>
          <target state="translated">ダイグラフ &lt;code&gt;G&lt;/code&gt; は幅優先でトラバースされ、最初に見つかったパスが返されます。</target>
        </trans-unit>
        <trans-unit id="70e541d54d4571932b5458248248c88322d737b3" translate="yes" xml:space="preserve">
          <source>Digraph &lt;code&gt;G&lt;/code&gt; is traversed in a depth-first manner, and the first found path is returned.</source>
          <target state="translated">有向グラフ &lt;code&gt;G&lt;/code&gt; は深さ優先でトラバースされ、最初に見つかったパスが返されます。</target>
        </trans-unit>
        <trans-unit id="93dca2efcca5c19009fb242e9a74ae8b5859f1a9" translate="yes" xml:space="preserve">
          <source>Digraphs can be annotated with more information. Such information can be attached to the vertices and to the edges of the digraph. An annotated digraph is called a &lt;strong&gt;labeled digraph&lt;/strong&gt;, and the information attached to a vertex or an edge is called a &lt;strong id=&quot;label&quot;&gt;label&lt;/strong&gt;.</source>
          <target state="translated">ダイグラフには、より多くの情報で注釈を付けることができます。このような情報は、頂点とダイグラフのエッジに添付できます。注釈付きダイグラフは&lt;strong&gt;ラベル&lt;/strong&gt;付きダイグラフと呼ばれ、頂点またはエッジに添付された情報は&lt;strong id=&quot;label&quot;&gt;ラベル&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="2bdb5f32ccbfb6d3d1a3147e65f438a4ec636024" translate="yes" xml:space="preserve">
          <source>Digraphs can be annotated with more information. Such information can be attached to the vertices and to the edges of the digraph. An annotated digraph is called a &lt;strong&gt;labeled digraph&lt;/strong&gt;, and the information attached to a vertex or an edge is called a &lt;strong id=&quot;label&quot;&gt;label&lt;/strong&gt;. Labels are Erlang terms.</source>
          <target state="translated">ダイグラフには、より多くの情報で注釈を付けることができます。このような情報は、頂点とダイグラフのエッジに添付できます。注釈付きダイグラフは&lt;strong&gt;ラベル&lt;/strong&gt;付きダイグラフと呼ばれ、頂点またはエッジに添付された情報は&lt;strong id=&quot;label&quot;&gt;ラベル&lt;/strong&gt;と呼ばれます。ラベルはErlang用語です。</target>
        </trans-unit>
        <trans-unit id="8c283a0fe4d5df5390c92bd0efb703342217ba6b" translate="yes" xml:space="preserve">
          <source>Digraphs will not be garbage collected. The ETS tables used for a digraph will only be deleted when &lt;code&gt;&lt;a href=&quot;#delete-1&quot;&gt;delete/1&lt;/a&gt;&lt;/code&gt; is called or the process that created the digraph terminates.</source>
          <target state="translated">有向グラフはガベージコレクションされません。有向グラフに使用されるETSテーブルは、 &lt;code&gt;&lt;a href=&quot;#delete-1&quot;&gt;delete/1&lt;/a&gt;&lt;/code&gt; が呼び出されたとき、または有向グラフを作成したプロセスが終了したときにのみ削除されます。</target>
        </trans-unit>
        <trans-unit id="a5e38d6b903ccda016759402d329e33a83548707" translate="yes" xml:space="preserve">
          <source>Dir :: &lt;code&gt;&lt;a href=&quot;#type-filename&quot;&gt;filename()&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">Dir :: &lt;code&gt;&lt;a href=&quot;#type-filename&quot;&gt;filename()&lt;/a&gt;&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="ad2c0ce42ca198c5519523a969e131463983adf5" translate="yes" xml:space="preserve">
          <source>Directed graphs.</source>
          <target state="translated">有向グラフ。</target>
        </trans-unit>
        <trans-unit id="243cff888dae22be4e6f01a534ee25469aa6a683" translate="yes" xml:space="preserve">
          <source>Directly by using module &lt;code&gt;seq_trace&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;seq_trace&lt;/code&gt; を使用して直接。</target>
        </trans-unit>
        <trans-unit id="c9ecc417c112f66b0e63b1f01eb83e8458007c11" translate="yes" xml:space="preserve">
          <source>Directories containing Erlang modules to be included in a code coverage test must exist in the code server path. Otherwise, the Cover tool fails to recompile the modules. It is not sufficient to specify these directories in the cover specification file for &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">コードカバレッジテストに含めるErlangモジュールを含むディレクトリは、コードサーバーパスに存在する必要があります。それ以外の場合、カバーツールはモジュールの再コンパイルに失敗します。 &lt;code&gt;Common Test&lt;/code&gt; のカバー仕様ファイルでこれらのディレクトリを指定するだけでは不十分です。</target>
        </trans-unit>
        <trans-unit id="5ab4b58d628fe3f03e24fefd9e79c9cd5305431f" translate="yes" xml:space="preserve">
          <source>Directories passed to &lt;code&gt;Common Test&lt;/code&gt; can have either relative or absolute paths.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; に渡されるディレクトリには、相対パスまたは絶対パスのいずれかを含めることができます。</target>
        </trans-unit>
        <trans-unit id="1f6cb58a29cb92f80451b089ee8dcc6df2383846" translate="yes" xml:space="preserve">
          <source>Directory &lt;code&gt;Dir&lt;/code&gt; is to be added to the code path.</source>
          <target state="translated">ディレクトリ &lt;code&gt;Dir&lt;/code&gt; をコードパスに追加します。</target>
        </trans-unit>
        <trans-unit id="37da76e6522f5231ccef0cde70e3579a65e938f9" translate="yes" xml:space="preserve">
          <source>Directory Listings</source>
          <target state="translated">ディレクトリリスティング</target>
        </trans-unit>
        <trans-unit id="fd7d9fd644987840c54fd62d80a891889bfcc421" translate="yes" xml:space="preserve">
          <source>Directory Structure Guidelines for a Development Environment</source>
          <target state="translated">開発環境のディレクトリ構造ガイドライン</target>
        </trans-unit>
        <trans-unit id="ef0d89c504070d30a057e3e2666364d93ceb17ea" translate="yes" xml:space="preserve">
          <source>Directory contents</source>
          <target state="translated">ディレクトリの内容</target>
        </trans-unit>
        <trans-unit id="406373555c5db06a112c39c5633ef075b4eb9b4c" translate="yes" xml:space="preserve">
          <source>Directory names not starting with &lt;code&gt;/&lt;/code&gt; are assumed to be relative the current working directory.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; で始まらないディレクトリ名は、現在の作業ディレクトリに相対的であると見なされます。</target>
        </trans-unit>
        <trans-unit id="69c1b321a3a3f10dbb43a3ed72a72c42e77de3a4" translate="yes" xml:space="preserve">
          <source>Directory names should not be capitalized.</source>
          <target state="translated">ディレクトリ名は大文字にしてはいけません。</target>
        </trans-unit>
        <trans-unit id="a65c287fbc14b015d2a237c8c17c5222537b05bb" translate="yes" xml:space="preserve">
          <source>Directory names starting with &lt;code&gt;/&lt;/code&gt; are assumed to be absolute path names.</source>
          <target state="translated">&lt;code&gt;/&lt;/code&gt; で始まるディレクトリ名は、絶対パス名と見なされます。</target>
        </trans-unit>
        <trans-unit id="f87cbc37768d43bb57fe075ed3cecacb04c89d4c" translate="yes" xml:space="preserve">
          <source>Directory separators must always be written as &lt;code&gt;/&lt;/code&gt;, even on Windows.</source>
          <target state="translated">Windowsであっても、ディレクトリセパレータは常に &lt;code&gt;/&lt;/code&gt; として記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="caac219f13e886f255200fff4fa6a28d1f9a338f" translate="yes" xml:space="preserve">
          <source>Directory where the profile can save persistent data. If omitted, all cookies are treated as session cookies.</source>
          <target state="translated">プロファイルが永続的なデータを保存できるディレクトリ。省略した場合、すべてのクッキーはセッションクッキーとして扱われます。</target>
        </trans-unit>
        <trans-unit id="284afc0808fc43fcb8ad33e37b614c07e484dbef" translate="yes" xml:space="preserve">
          <source>Dirty IO schedulers will have scheduler identifiers in the range &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt; erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;+&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt; erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) +&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_dirty_io_schedulers&quot;&gt; erlang:system_info(dirty_io_schedulers)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ダーティIOスケジューラーのスケジューラーIDは、 &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt; erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt; erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt; （schedulers） &lt;code&gt;+&lt;/code&gt; erlang：system_info（dirty_cpu_schedulers） &lt;code&gt;&amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) +&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_dirty_io_schedulers&quot;&gt; erlang:system_info(dirty_io_schedulers)&lt;/a&gt;&lt;/code&gt; system_info（dirty_cpu_schedulers）+ erlang：system_info（dirty_）の範囲になります。</target>
        </trans-unit>
        <trans-unit id="8dde8a410b2cef8745dc367bbeecd37822cd25d7" translate="yes" xml:space="preserve">
          <source>Dirty IO schedulers will have scheduler identifiers in the range &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;+&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) +&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_dirty_io_schedulers&quot;&gt;erlang:system_info(dirty_io_schedulers)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ダーティIOスケジューラは、範囲内のスケジューラ識別子を有することになる &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) + erlang:system_info(dirty_cpu_schedulers) +&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_dirty_io_schedulers&quot;&gt;erlang:system_info(dirty_io_schedulers)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03c764c23e6f3e21522962d8392207a9aec42ffc" translate="yes" xml:space="preserve">
          <source>Dirty NIF support is available only when the emulator is configured with dirty scheduler support. As of ERTS version 9.0, dirty scheduler support is enabled by default on the runtime system with SMP support. The Erlang runtime without SMP support does &lt;strong&gt;not&lt;/strong&gt; support dirty schedulers even when the dirty scheduler support is explicitly enabled. To check at runtime for the presence of dirty scheduler threads, code can use the &lt;code&gt;&lt;a href=&quot;#enif_system_info&quot;&gt; enif_system_info()&lt;/a&gt;&lt;/code&gt; API function.</source>
          <target state="translated">ダーティNIFサポートは、エミュレーターがダーティスケジューラーサポートで構成されている場合にのみ使用できます。ERTSバージョン9.0以降、ダーティスケジューラのサポートは、SMPをサポートするランタイムシステムでデフォルトで有効になっています。SMPをサポートし&lt;strong&gt;ない&lt;/strong&gt;Erlangランタイムは、ダーティスケジューラのサポートが明示的に有効になっている場合でも、ダーティスケジューラをサポートしませ&lt;strong&gt;ん&lt;/strong&gt;。実行時にダーティスケジューラスレッドの存在を確認するために、コードは &lt;code&gt;&lt;a href=&quot;#enif_system_info&quot;&gt; enif_system_info()&lt;/a&gt;&lt;/code&gt; API関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="f776c53728b9a78e34582415361299583c2f7ae1" translate="yes" xml:space="preserve">
          <source>Dirty NIF support is available only when the emulator is configured with dirty scheduler support. As of ERTS version 9.0, dirty scheduler support is enabled by default on the runtime system with SMP support. The Erlang runtime without SMP support does &lt;strong&gt;not&lt;/strong&gt; support dirty schedulers even when the dirty scheduler support is explicitly enabled. To check at runtime for the presence of dirty scheduler threads, code can use the &lt;code&gt;&lt;a href=&quot;#enif_system_info&quot;&gt;enif_system_info()&lt;/a&gt;&lt;/code&gt; API function.</source>
          <target state="translated">ダーティNIFサポートは、エミュレータがダーティスケジューラサポートで構成されている場合にのみ使用できます。ERTSバージョン9.0以降、SMPをサポートするランタイムシステムでは、ダーティスケジューラのサポートがデフォルトで有効になっています。SMPサポートのないErlangランタイムは、ダーティスケジューラサポートが明示的に有効になっている場合でも、ダーティスケジューラをサポートしませ&lt;strong&gt;ん&lt;/strong&gt;。実行時にダーティスケジューラスレッドの存在をチェックするために、コードは &lt;code&gt;&lt;a href=&quot;#enif_system_info&quot;&gt;enif_system_info()&lt;/a&gt;&lt;/code&gt; API関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="a963571ffbcc2363316cb4131267d7bb18e560a3" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:all_keys/1&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:all_keys/1&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="6730f17243320e93c4820bdb3347a524eb6f76be" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:delete/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:delete/3&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="4803a712add1388359b074286a97c71ac03a18ec" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:delete_object/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:delete_object/3&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="9819320bcc19465d5dbe72db932ce31e969e4f47" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:index_match_object/4&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:index_match_object/4&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="ae95fb440f9f0e27b1eda44b2c952a05213b976d" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:index_read/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:index_read/3&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="064b2b60b7cec261b9641cfb6150d6b98fa5d361" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:match_object/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:match_object/3&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="d027124011b6d5898913193904cb44d1bf7613d9" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:read/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:read/3&lt;/code&gt; と同等のダーティ。</target>
        </trans-unit>
        <trans-unit id="8d5501c6a210dcc1de9608082f9d1e416032c68f" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:select/2&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:select/2&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="18d67f692bf5bd1046b2d5956ee8e53a74a3f5c6" translate="yes" xml:space="preserve">
          <source>Dirty equivalent of the function &lt;code&gt;mnesia:write/3&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:write/3&lt;/code&gt; のダーティな同等物。</target>
        </trans-unit>
        <trans-unit id="72b8a4c5a40ea145e7c00b5e635182a9120bdea4" translate="yes" xml:space="preserve">
          <source>Dirty operation are often useful, for example, in a datagram routing application where &lt;code&gt;Mnesia&lt;/code&gt; stores the routing table, and it is time consuming to start a whole transaction every time a packet is received. &lt;code&gt;Mnesia&lt;/code&gt; has therefore functions that manipulate tables without using transactions. This alternative to processing is known as a dirty operation. However, notice the trade-off in avoiding the overhead of transaction processing:</source>
          <target state="translated">たとえば、 &lt;code&gt;Mnesia&lt;/code&gt; がルーティングテーブルを格納するデータグラムルーティングアプリケーションでは、ダーティー操作が役立つことが多く、パケットを受信するたびにトランザクション全体を開始するには時間がかかります。したがって &lt;code&gt;Mnesia&lt;/code&gt; には、トランザクションを使用せずにテーブルを操作する関数があります。この処理の代替方法は、ダーティオペレーションと呼ばれます。ただし、トランザクション処理のオーバーヘッドを回避する上でのトレードオフに注意してください。</target>
        </trans-unit>
        <trans-unit id="136014a72498b6b9b3b61aa360cdefc56a3dc1d1" translate="yes" xml:space="preserve">
          <source>Dirty operations</source>
          <target state="translated">ダーティオペレーション</target>
        </trans-unit>
        <trans-unit id="c4275fbd897af2315c2118648b50df4435cebdd9" translate="yes" xml:space="preserve">
          <source>Dirty operations always contain only one update and thus no activity event is sent.</source>
          <target state="translated">ダーティ操作は常に1つの更新しか含まれていないため、アクティビティイベントは送信されません。</target>
        </trans-unit>
        <trans-unit id="aa50ffb6abfb356d785f0330d2d417505b69d837" translate="yes" xml:space="preserve">
          <source>Dirty operations are written to disc if they are performed on a table of type &lt;code&gt;disc_copies&lt;/code&gt; or type &lt;code&gt;disc_only_copies&lt;/code&gt;. &lt;code&gt;Mnesia&lt;/code&gt; also ensures that all replicas of a table are updated if a dirty write operation is performed on a table.</source>
          <target state="translated">タイプが &lt;code&gt;disc_copies&lt;/code&gt; またはタイプが &lt;code&gt;disc_only_copies&lt;/code&gt; のテーブルで実行される場合、ダーティー操作はディスクに書き込まれます。 &lt;code&gt;Mnesia&lt;/code&gt; はまた、ダーティ書き込み操作がテーブルで実行された場合、テーブルのすべてのレプリカが更新されることを保証します。</target>
        </trans-unit>
        <trans-unit id="853438de86dac28cac55a35b9641e0bd67c6f648" translate="yes" xml:space="preserve">
          <source>DirtyCPUSchedulersOnline) -&amp;gt;</source>
          <target state="translated">DirtyCPUSchedulersOnline）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="46015467f190d633f418a569f23109bb67051807" translate="yes" xml:space="preserve">
          <source>Disable automatic gc of the mib server cache.</source>
          <target state="translated">mibサーバーキャッシュの自動gcを無効にします。</target>
        </trans-unit>
        <trans-unit id="bbc557db02430ed632f545e4b3a20960ff5fe9b2" translate="yes" xml:space="preserve">
          <source>Disable one-time execution.</source>
          <target state="translated">1回限りの実行を無効にします。</target>
        </trans-unit>
        <trans-unit id="76bd3c5c018e2a61d5610b964b32a5deefa1bba1" translate="yes" xml:space="preserve">
          <source>Disable the auto-compilation feature (similar to &lt;code&gt;ct_run -no_auto_compile&lt;/code&gt;).</source>
          <target state="translated">自動コンパイル機能を無効にします（ &lt;code&gt;ct_run -no_auto_compile&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="197dd9bc80386b0df3c823b696ec70695af97e98" translate="yes" xml:space="preserve">
          <source>Disable the mib server cache.</source>
          <target state="translated">mib サーバーキャッシュを無効にします。</target>
        </trans-unit>
        <trans-unit id="73f00fae8033ed7aa00f57da49d8f4afc54218e6" translate="yes" xml:space="preserve">
          <source>Disables SAC delay</source>
          <target state="translated">SACの遅延を無効にします。</target>
        </trans-unit>
        <trans-unit id="5b110f63f186be3c7c93c8e0719d6c40201f32e3" translate="yes" xml:space="preserve">
          <source>Disables all allocators that can be disabled.</source>
          <target state="translated">無効化可能なすべてのロケータを無効化します。</target>
        </trans-unit>
        <trans-unit id="b1603559997a45d4ab53133ad023c7c6fbd13e90" translate="yes" xml:space="preserve">
          <source>Disables all breakpoints.</source>
          <target state="translated">すべてのブレークポイントを無効にします。</target>
        </trans-unit>
        <trans-unit id="f0f1900b113d92659c235dfcb60389ba9de8dc08" translate="yes" xml:space="preserve">
          <source>Disables automatic Path MTU discovery</source>
          <target state="translated">パスMTUの自動検出を無効にします。</target>
        </trans-unit>
        <trans-unit id="5ab25d2aff103bc762d22d0efc7b35138f46952e" translate="yes" xml:space="preserve">
          <source>Disables automatic escaping of special HTML characters. See the &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;Logging chapter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">特殊なHTML文字の自動エスケープを無効にします。 &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;Logging chapter&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="63f7882a53b38e4243f12b5b79a4cd7893cd5b26" translate="yes" xml:space="preserve">
          <source>Disables busy port message queue functionality. For more information, see &lt;code&gt;&lt;a href=&quot;erl_driver#erl_drv_busy_msgq_limits&quot;&gt; erl_driver:erl_drv_busy_msgq_limits&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ビジーポートメッセージキュー機能を無効にします。詳細については、 &lt;code&gt;&lt;a href=&quot;erl_driver#erl_drv_busy_msgq_limits&quot;&gt; erl_driver:erl_drv_busy_msgq_limits&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7593253a728d7cf78461e61c33450c17030aafde" translate="yes" xml:space="preserve">
          <source>Disables busy port message queue functionality. For more information, see &lt;code&gt;&lt;a href=&quot;erl_driver#erl_drv_busy_msgq_limits&quot;&gt;erl_driver:erl_drv_busy_msgq_limits&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ビジーポートメッセージキュー機能を無効にします。詳細については、 &lt;code&gt;&lt;a href=&quot;erl_driver#erl_drv_busy_msgq_limits&quot;&gt;erl_driver:erl_drv_busy_msgq_limits&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="70bb3a7d47ffdd3bc94f55af3bbfd79dcc5fd262" translate="yes" xml:space="preserve">
          <source>Disables features that cannot be enabled while creating an allocator configuration with &lt;code&gt; erts_alloc_config(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt; erts_alloc_config(3)&lt;/code&gt; を使用してアロケーター構成を作成しているときに有効にできない機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="37be9cbf19e8c4d94f4cdadb90d4e87688cdbc77" translate="yes" xml:space="preserve">
          <source>Disables features that cannot be enabled while creating an allocator configuration with &lt;code&gt;erts_alloc_config(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config(3)&lt;/code&gt; を使用してアロケータ構成を作成しているときに有効にできない機能を無効にします。</target>
        </trans-unit>
        <trans-unit id="a614d492ceaa156affdf5d4bdefafec5576bcceb" translate="yes" xml:space="preserve">
          <source>Disables heartbeat</source>
          <target state="translated">心臓の鼓動を無効にする</target>
        </trans-unit>
        <trans-unit id="ef9f0619eb9caef8a34d63963c121785d1466e86" translate="yes" xml:space="preserve">
          <source>Disables optimization that can malfunction if &quot;Special start-of-pattern items&quot; are present in the regular expression. A typical example would be when matching &quot;DEFABC&quot; against &quot;(*COMMIT)ABC&quot;, where the start optimization of PCRE would skip the subject up to &quot;A&quot; and never realize that the (*COMMIT) instruction is to have made the matching fail. This option is only relevant if you use &quot;start-of-pattern items&quot;, as discussed in section &lt;code&gt;&lt;a href=&quot;#regexp_syntax_details&quot;&gt;PCRE Regular Expression Details&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">正規表現に「特別なパターンの開始項目」が存在する場合に誤動作する可能性がある最適化を無効にします。典型的な例は、 &quot;DEFABC&quot;を &quot;（* COMMIT）ABC&quot;と照合する場合です。この場合、PCREの開始最適化は、サブジェクトを &quot;A&quot;までスキップし、（* COMMIT）命令が不合格。このオプションは、セクション &lt;code&gt;&lt;a href=&quot;#regexp_syntax_details&quot;&gt;PCRE Regular Expression Details&lt;/a&gt;&lt;/code&gt; 説明されているように、「パターン開始項目」を使用する場合にのみ関連します。</target>
        </trans-unit>
        <trans-unit id="c404f858a3fcd9bae301bbd98fe536b9fe7a1a7c" translate="yes" xml:space="preserve">
          <source>Disables the &lt;code&gt;os_sup&lt;/code&gt; service. Needed on Solaris only.</source>
          <target state="translated">&lt;code&gt;os_sup&lt;/code&gt; サービスを無効にします。Solarisでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="d93c1136104c42e8c7c1536818cabe58700fba0c" translate="yes" xml:space="preserve">
          <source>Disables the automatic test suite compilation feature (described earlier).</source>
          <target state="translated">テストスイートの自動コンパイル機能を無効にします(前述)。</target>
        </trans-unit>
        <trans-unit id="91d420658fc46ab94b4ff3545d61fc2d3c8cde2c" translate="yes" xml:space="preserve">
          <source>Disables the default handler. This allows another application to add its own default handler.</source>
          <target state="translated">デフォルトのハンドラを無効にします。これにより、別のアプリケーションが独自のデフォルトハンドラを追加できるようになります。</target>
        </trans-unit>
        <trans-unit id="133d6494dcd6c46493ddf1685293a36623e293f5" translate="yes" xml:space="preserve">
          <source>Disables the sticky directory facility of the Erlang code server; see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">Erlangコードサーバーのスティッキディレクトリ機能を無効にします。 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8303ac8a6039acc7c220b67fab46629f1b907fc" translate="yes" xml:space="preserve">
          <source>Disables the use of numbered capturing parentheses in the pattern. Any opening parenthesis that is not followed by &lt;code&gt;?&lt;/code&gt; behaves as if it is followed by &lt;code&gt;?:&lt;/code&gt;. Named parentheses can still be used for capturing (and they acquire numbers in the usual way). There is no equivalent option in Perl.</source>
          <target state="translated">パターン内の番号付きキャプチャ括弧の使用を無効にします。 &lt;code&gt;?&lt;/code&gt; が続かない左括弧 &lt;code&gt;?:&lt;/code&gt; が後に続くかのように動作します。名前付き括弧は引き続きキャプチャに使用できます（通常の方法で番号を取得します）。Perlには同等のオプションはありません。</target>
        </trans-unit>
        <trans-unit id="62c3939a2d0370b4df3b4f65b029525d3f10ac74" translate="yes" xml:space="preserve">
          <source>Disables time correction.</source>
          <target state="translated">時刻補正を無効にします。</target>
        </trans-unit>
        <trans-unit id="f747dca83f7e533bc9f21ec112a00de20b04ac59" translate="yes" xml:space="preserve">
          <source>Disables tracing for all received messages. Any match specification is removed.</source>
          <target state="translated">受信したすべてのメッセージのトレースを無効にします。マッチ指定はすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="d3c6f60ed2d58ddd2546f1c92f3b23c7fc7b8db7" translate="yes" xml:space="preserve">
          <source>Disables tracing for all sent messages. Any match specification is removed.</source>
          <target state="translated">すべての送信メッセージのトレースを無効にします。マッチ指定はすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="052bd1ec9b7d0195d48f3445314353c790266505" translate="yes" xml:space="preserve">
          <source>Disables tracing for the matching functions. Any match specification is removed.</source>
          <target state="translated">マッチング関数のトレースを無効にします。マッチ指定はすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="b4b4aed9d646971376493a208349a826cb4c12b9" translate="yes" xml:space="preserve">
          <source>Disabling arity checks affects the form of messages at encode/decode. In particular, decoded AVPs are represented as lists of values, regardless of the AVP's arity (ie. expected number in the message/AVP grammar in question), and values are expected to be supplied as lists at encode. This differs from the historic decode behaviour of representing AVPs of arity 1 as bare values, not wrapped in a list.</source>
          <target state="translated">アリティチェックを無効にすることは、エンコード/デコード時のメッセージの形式に影響を与えます。特に、デコードされた AVP は AVP のアリティ (すなわち、問題のメッセージ/AVP 文法における期待される数)に関係なく、値のリストとして表現され、値はエンコード時にリストとして提供されることが期待されます。これは、アリティ 1 の AVP をリストに包まれていない裸の値として表現するという歴史的なデコードの動作とは異なります。</target>
        </trans-unit>
        <trans-unit id="019544662459c34c84ab1f2f72c6fedddbe538f0" translate="yes" xml:space="preserve">
          <source>Disabling counters is a performance improvement, but means that the omitted counters are not returned by &lt;code&gt;&lt;a href=&quot;#service_info-2&quot;&gt;service_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">カウンターを無効にすることはパフォーマンスの向上ですが、省略されたカウンターは &lt;code&gt;&lt;a href=&quot;#service_info-2&quot;&gt;service_info/2&lt;/a&gt;&lt;/code&gt; によって返されないことを意味します。</target>
        </trans-unit>
        <trans-unit id="76a831e0997e7ea4fb9c444b8f508021eca00f12" translate="yes" xml:space="preserve">
          <source>Disabling shell and exec in a daemon</source>
          <target state="translated">デーモンでシェルと exec を無効にする</target>
        </trans-unit>
        <trans-unit id="30dcc2129cb59bbec6b75af27e09310eb15a967b" translate="yes" xml:space="preserve">
          <source>Disaster Recovery</source>
          <target state="translated">災害復旧</target>
        </trans-unit>
        <trans-unit id="ad694189656d6d69aa0303359764d4f191934c22" translate="yes" xml:space="preserve">
          <source>Disc-less nodes</source>
          <target state="translated">ディスクレスノード</target>
        </trans-unit>
        <trans-unit id="ba6ed47955f40df472a5f8beac813210c9595e35" translate="yes" xml:space="preserve">
          <source>Disclaimer: The author accepts no responsibility for errors introduced in code that has been processed by the program. It has been reasonably well tested, but the possibility of errors remains. Keep backups of your original code safely stored, until you feel confident that the new, modified code can be trusted.</source>
          <target state="translated">免責事項:作者は、プログラムによって処理されたコードに導入されたエラーについて、一切の責任を負いません。それは合理的に十分にテストされていますが、エラーの可能性は残っています。新しい修正されたコードが信頼できると確信できるようになるまで、オリジナルコードのバックアップを安全に保存しておきましょう。</target>
        </trans-unit>
        <trans-unit id="cfd988cdc067039f90d04d2baa7c90c660553b55" translate="yes" xml:space="preserve">
          <source>Disclaimer: the author of this program takes no responsibility for the correctness of the produced output, or for any effects of its execution. In particular, the author may not be held responsible should Igor include the code of a deceased madman in the result.</source>
          <target state="translated">免責事項:このプログラムの作者は、生成された出力の正しさ、またはその実行による影響について、一切の責任を負いません。特に、イゴールが死んだ狂人のコードを結果に含んでいた場合、作者は責任を負わないかもしれません。</target>
        </trans-unit>
        <trans-unit id="6a2cce7325057892153f44eaa30a90a3c86e5de3" translate="yes" xml:space="preserve">
          <source>Disconnect-Cause AVP</source>
          <target state="translated">ディスコネクト原因AVP</target>
        </trans-unit>
        <trans-unit id="ff1396a2181372840b5ab3bd74b8cad283adf658" translate="yes" xml:space="preserve">
          <source>Disconnect-Cause AVP Values</source>
          <target state="translated">Disconnect-Cause AVP値</target>
        </trans-unit>
        <trans-unit id="f14abc14828dff0b3991be236d7f7cf54da51f12" translate="yes" xml:space="preserve">
          <source>Disconnect-Cause to send, &lt;code&gt;REBOOTING&lt;/code&gt;, &lt;code&gt;BUSY&lt;/code&gt; and &lt;code&gt;DO_NOT_WANT_TO_TALK_TO_YOU&lt;/code&gt; respectively. Defaults to &lt;code&gt;rebooting&lt;/code&gt; for &lt;code&gt;Reason=service|application&lt;/code&gt; and &lt;code&gt;goaway&lt;/code&gt; for &lt;code&gt;Reason=transport&lt;/code&gt;.</source>
          <target state="translated">Disconnect-Causeを送信、 &lt;code&gt;REBOOTING&lt;/code&gt; 、 &lt;code&gt;BUSY&lt;/code&gt; 、および &lt;code&gt;DO_NOT_WANT_TO_TALK_TO_YOU&lt;/code&gt; のそれぞれ。デフォルトは &lt;code&gt;rebooting&lt;/code&gt; 用 &lt;code&gt;Reason=service|application&lt;/code&gt; と &lt;code&gt;goaway&lt;/code&gt; ための &lt;code&gt;Reason=transport&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0cb6f5b85df7280837caa7684c21ebca654127f2" translate="yes" xml:space="preserve">
          <source>Disconnect-Peer-Answer</source>
          <target state="translated">Disconnect-Peer-Answer</target>
        </trans-unit>
        <trans-unit id="ac00be15043552408adbb950359743263da6af3c" translate="yes" xml:space="preserve">
          <source>Disconnect-Peer-Request</source>
          <target state="translated">Disconnect-Peer-Request</target>
        </trans-unit>
        <trans-unit id="0b89ba1fee4ae5db5b5cbdc2a3e20cb0bb715a06" translate="yes" xml:space="preserve">
          <source>Disconnecting Peer Connections</source>
          <target state="translated">ピア接続の切断</target>
        </trans-unit>
        <trans-unit id="4130fdb42bbd68fda4590cd56ee038ef4ac9d67b" translate="yes" xml:space="preserve">
          <source>Disconnecting a client from the server</source>
          <target state="translated">クライアントをサーバーから切断する</target>
        </trans-unit>
        <trans-unit id="4777f6524a18a233a6b8a935dab6c2675a1c7aaf" translate="yes" xml:space="preserve">
          <source>Discovery can only be performed towards one manager at a time.</source>
          <target state="translated">ディスカバリーは、一度に一人のマネージャーに向かってしか行うことができません。</target>
        </trans-unit>
        <trans-unit id="fcb2aee26678c8fa201281e24483d3205c8e34b7" translate="yes" xml:space="preserve">
          <source>Disk log format. Defaults to &lt;code&gt;internal&lt;/code&gt;.</source>
          <target state="translated">ディスクログフォーマット。デフォルトは &lt;code&gt;internal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4601cd5c257aa63f669ff263176f89589ca3b4c9" translate="yes" xml:space="preserve">
          <source>Disk-Less and/or Read-Only Clients</source>
          <target state="translated">ディスクレスおよび/または読み取り専用のクライアント</target>
        </trans-unit>
        <trans-unit id="17a3fc955cb5b0276df9b096dfd6ba69365aa9bf" translate="yes" xml:space="preserve">
          <source>Disk-based term storage</source>
          <target state="translated">ディスクベースのタームストレージ</target>
        </trans-unit>
        <trans-unit id="e1031ece5a091584f5140674ba7245074e05f5c1" translate="yes" xml:space="preserve">
          <source>Diskless Node</source>
          <target state="translated">ディスクレスノード</target>
        </trans-unit>
        <trans-unit id="0ec64952288dde39e7db9059f483c43d01b58273" translate="yes" xml:space="preserve">
          <source>Display the full path names of files for which warnings are emitted.</source>
          <target state="translated">警告を発するファイルのフルパス名を表示します。</target>
        </trans-unit>
        <trans-unit id="407bbaf1e0c2d0df752601703a3d425897a28222" translate="yes" xml:space="preserve">
          <source>Displays a brief help text.</source>
          <target state="translated">簡単なヘルプテキストを表示します。</target>
        </trans-unit>
        <trans-unit id="809fd057f19b915d80930c6f7d96f0ece197660c" translate="yes" xml:space="preserve">
          <source>Displays a sequence chart for trace events (messages/actions)</source>
          <target state="translated">トレースイベント(メッセージ/アクション)のシーケンスチャートを表示します。</target>
        </trans-unit>
        <trans-unit id="b4addbd06f3a7b652cedffa28ba11f824f0e54ed" translate="yes" xml:space="preserve">
          <source>Displays help information: all valid shell internal commands, and commands in this module.</source>
          <target state="translated">ヘルプ情報を表示します:すべての有効なシェル内部コマンド、およびこのモジュールのコマンドを表示します。</target>
        </trans-unit>
        <trans-unit id="ee3534b5896b26b70a09071e094b09fecc246f93" translate="yes" xml:space="preserve">
          <source>Displays information about &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; に関する情報を表示します。</target>
        </trans-unit>
        <trans-unit id="1e2cdacb04ccc59eb03b366e2ce6107106171ce9" translate="yes" xml:space="preserve">
          <source>Displays information about a process, Equivalent to &lt;code&gt;process_info(pid(X, Y, Z))&lt;/code&gt;, but location transparent.</source>
          <target state="translated">プロセスに関する情報を表示します &lt;code&gt;process_info(pid(X, Y, Z))&lt;/code&gt; と同等ですが、場所は透過的です。</target>
        </trans-unit>
        <trans-unit id="8676997e6d31e5d1792fc72017136c1969e4743f" translate="yes" xml:space="preserve">
          <source>Displays information about all ETS tables on a terminal.</source>
          <target state="translated">端末上のすべてのETSテーブルの情報を表示します。</target>
        </trans-unit>
        <trans-unit id="af76d957f2761590236e17f9749346c28a31a1c0" translate="yes" xml:space="preserve">
          <source>Displays information about all traced processes and ports.</source>
          <target state="translated">トレースされたすべてのプロセスとポートに関する情報を表示します。</target>
        </trans-unit>
        <trans-unit id="492951a4c4a95971c08b9e19f0dc88adebe37075" translate="yes" xml:space="preserve">
          <source>Displays information about the loaded modules, including the files from which they have been loaded.</source>
          <target state="translated">読み込まれたモジュールの情報を表示します。</target>
        </trans-unit>
        <trans-unit id="ee93296f3843197e51b182a1bafc98d3a64cbf54" translate="yes" xml:space="preserve">
          <source>Displays more details about the running tests.</source>
          <target state="translated">実行中のテストの詳細を表示します。</target>
        </trans-unit>
        <trans-unit id="e0eaa044d1402f6158dbb94e6f37cec632aa9c72" translate="yes" xml:space="preserve">
          <source>Displays online help information.</source>
          <target state="translated">オンラインヘルプ情報を表示します。</target>
        </trans-unit>
        <trans-unit id="df72e35e6b1d65a27a8d6d508bdb3a1cdc2b8d9e" translate="yes" xml:space="preserve">
          <source>Displays the back trace of the process, a summary of the current function calls on the stack, in the Trace area. Requires that the Trace area is visible and that the Stack Trace option is &lt;strong&gt;Stack On, Tail&lt;/strong&gt; or &lt;strong&gt;Stack On, No Tail&lt;/strong&gt;.</source>
          <target state="translated">プロセスのバックトレース、スタック上の現在の関数呼び出しの概要をトレース領域に表示します。[トレース]領域が表示されていて、[スタックトレース]オプションが[ &lt;strong&gt;スタックオン、テール]&lt;/strong&gt;または[ &lt;strong&gt;スタックオン、テールなし]である必要があり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="b1b1e3477e899e5e51d8015f9d12fef517565150" translate="yes" xml:space="preserve">
          <source>Displays the help message above.</source>
          <target state="translated">上記のヘルプメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="5e637c32ead50fb05a7176006aa2e317c3d4a119" translate="yes" xml:space="preserve">
          <source>Displays the help of &lt;code&gt;etop&lt;/code&gt; and its options.</source>
          <target state="translated">&lt;code&gt;etop&lt;/code&gt; とそのオプションのヘルプを表示します。</target>
        </trans-unit>
        <trans-unit id="5a62bffd61747c2b3f643917a2167e1db67450af" translate="yes" xml:space="preserve">
          <source>Displays the manual page for the Erlang module &lt;code&gt;Module&lt;/code&gt;. Only supported on Unix.</source>
          <target state="translated">Erlangモジュール &lt;code&gt;Module&lt;/code&gt; のマニュアルページを表示します。Unixでのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="5a8997e7d54421e54131f64252ff4df84aeddf01" translate="yes" xml:space="preserve">
          <source>Displays the reports that match the provided filters.</source>
          <target state="translated">提供されたフィルタに一致するレポートを表示します。</target>
        </trans-unit>
        <trans-unit id="7d09436ef1c7f1d4275b15c0e3bfd26a0e52a4a3" translate="yes" xml:space="preserve">
          <source>Dissecting form-urlencoded query strings into a list of key-value pairs</source>
          <target state="translated">フォームurlencodeされたクエリ文字列をキーと値のペアのリストに分解する</target>
        </trans-unit>
        <trans-unit id="6639179da9a9db22208ccf1f96fbd66121e3d490" translate="yes" xml:space="preserve">
          <source>Dissects an urlencoded &lt;code&gt;QueryString&lt;/code&gt; and returns a &lt;code&gt;QueryList&lt;/code&gt;, a list of non-percent-encoded key-value pairs. Form-urlencoding is defined in section 4.10.21.6 of the &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt; specification and in section 4.10.22.6 of the &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML 5.0&lt;/a&gt;&lt;/code&gt; specification for non-UTF-8 encodings.</source>
          <target state="translated">URLエンコードされた &lt;code&gt;QueryString&lt;/code&gt; を &lt;code&gt;QueryList&lt;/code&gt; 、パーセントでエンコードされていないキーと値のペアのリストであるQueryListを返します。Form-urlencodingは、 &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt; 仕様のセクション4.10.21.6および非UTF-8エンコーディングの &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML 5.0&lt;/a&gt;&lt;/code&gt; 仕様のセクション4.10.22.6で定義されています。</target>
        </trans-unit>
        <trans-unit id="357d35fa45410f9789ac601d8a4028142c2abc4b" translate="yes" xml:space="preserve">
          <source>Distinguish between different exception classes.</source>
          <target state="translated">異なる例外クラスを区別します。</target>
        </trans-unit>
        <trans-unit id="3154ac05c2e6649bcc819cae0791db7441479164" translate="yes" xml:space="preserve">
          <source>Distinguished Encoding Rules (DER), a specialized form of BER that is used in security-conscious applications</source>
          <target state="translated">識別符号化規則(DER)は、セキュリティを意識したアプリケーションで使用されるBERの特殊な形式です。</target>
        </trans-unit>
        <trans-unit id="9f5bcc7ade38e78551b447d80b79861812a69887" translate="yes" xml:space="preserve">
          <source>Distributed Disk Logs</source>
          <target state="translated">分散ディスクログ</target>
        </trans-unit>
        <trans-unit id="d179b3dee705e502ba9df5acd57b35bada26be1a" translate="yes" xml:space="preserve">
          <source>Distributed Erlang</source>
          <target state="translated">分散アーラン</target>
        </trans-unit>
        <trans-unit id="df5f720cb5c3693e400bc2af610c190506b2e22e" translate="yes" xml:space="preserve">
          <source>Distributed applications are controlled by both the application controller and a distributed application controller process, &lt;code&gt;dist_ac&lt;/code&gt;. Both these processes are part of the Kernel application. Distributed applications are thus specified by configuring the Kernel application, using the following configuration parameter (see also &lt;code&gt;kernel(6)&lt;/code&gt;):</source>
          <target state="translated">分散アプリケーションは、アプリケーションコントローラーと分散アプリケーションコントローラープロセス &lt;code&gt;dist_ac&lt;/code&gt; の両方によって制御されます。これらのプロセスは両方とも、カーネルアプリケーションの一部です。したがって、分散アプリケーションは、次の構成パラメーターを使用してカーネルアプリケーションを構成することにより指定されます（ &lt;code&gt;kernel(6)&lt;/code&gt; も参照）。</target>
        </trans-unit>
        <trans-unit id="777820c0dccfcaf6763a1dc23065b452f73b88aa" translate="yes" xml:space="preserve">
          <source>Distributed data because of distributed applications</source>
          <target state="translated">アプリケーションが分散しているため、データが分散している</target>
        </trans-unit>
        <trans-unit id="1058cfc322dd64ad274d9afc48318f15475644a8" translate="yes" xml:space="preserve">
          <source>Distributed message sending, that is, if &lt;code&gt;Expr1&lt;/code&gt; evaluates to a tuple &lt;code&gt;{Name,Node}&lt;/code&gt; (or a pid located at another node), also never fails.</source>
          <target state="translated">分散メッセージの送信、つまり &lt;code&gt;Expr1&lt;/code&gt; がタプル &lt;code&gt;{Name,Node}&lt;/code&gt; （または別のノードにあるpid）に評価される場合も、失敗することはありません。</target>
        </trans-unit>
        <trans-unit id="646778caa7cd85accfc80935a72b9a69681a64bf" translate="yes" xml:space="preserve">
          <source>Distributed named process groups.</source>
          <target state="translated">分散された名前付きプロセスグループ。</target>
        </trans-unit>
        <trans-unit id="fe70fcb303dd369d876e8b04a66fbb3f051957f9" translate="yes" xml:space="preserve">
          <source>Distributed tables</source>
          <target state="translated">分散テーブル</target>
        </trans-unit>
        <trans-unit id="ef3a717afb5526323e5d0fa2e1c8c91f28e31043" translate="yes" xml:space="preserve">
          <source>Distributed test execution control for &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; の分散テスト実行制御。</target>
        </trans-unit>
        <trans-unit id="f23d56f2b96b77ba15c94f5727ade9fc8a5345f9" translate="yes" xml:space="preserve">
          <source>Distributed test execution control for Common Test.</source>
          <target state="translated">Common Testのための分散テスト実行制御</target>
        </trans-unit>
        <trans-unit id="6b1412269556b8a825737e56637796f585ef89c0" translate="yes" xml:space="preserve">
          <source>Distributes the value &lt;code&gt;X&lt;/code&gt; over the unary functions in the list, turning them into nullary test functions. An &lt;code&gt;AbstractTestFun&lt;/code&gt; is like an ordinary test fun, but takes one argument instead of zero - it's basically missing some information before it can be a proper test. In practice, &lt;code&gt;{with, X, [F_1, ..., F_N]}&lt;/code&gt; is equivalent to &lt;code&gt;[fun () -&amp;gt; F_1(X) end, ..., fun () -&amp;gt; F_N(X) end]&lt;/code&gt;. This is particularly useful if your abstract test functions are already implemented as proper functions: &lt;code&gt;{with, FD, [fun filetest_a/1, fun filetest_b/1, fun filetest_c/1]}&lt;/code&gt; is equivalent to &lt;code&gt;[fun () -&amp;gt; filetest_a(FD) end, fun () -&amp;gt; filetest_b(FD) end, fun () -&amp;gt; filetest_c(FD) end]&lt;/code&gt;, but much more compact. See also &lt;code&gt;&lt;a href=&quot;#Fixtures&quot;&gt;Fixtures&lt;/a&gt;&lt;/code&gt;, below.</source>
          <target state="translated">値 &lt;code&gt;X&lt;/code&gt; をリスト内の単項関数に分散し、それらをゼロのテスト関数に変換します。アン &lt;code&gt;AbstractTestFun&lt;/code&gt; は、通常のテストの楽しみのようなものですが、ゼロの代わりに一つの引数を取る-それは適切なテストすることができ前に、それは基本的にいくつかの情報が欠けています。実際には、 &lt;code&gt;{with, X, [F_1, ..., F_N]}&lt;/code&gt; は &lt;code&gt;[fun () -&amp;gt; F_1(X) end, ..., fun () -&amp;gt; F_N(X) end]&lt;/code&gt; です。これは、抽象テスト関数がすでに適切な関数として実装されている場合に特に役立ちます。 &lt;code&gt;{with, FD, [fun filetest_a/1, fun filetest_b/1, fun filetest_c/1]}&lt;/code&gt; は &lt;code&gt;[fun () -&amp;gt; filetest_a(FD) end, fun () -&amp;gt; filetest_b(FD) end, fun () -&amp;gt; filetest_c(FD) end]&lt;/code&gt; ですが、はるかにコンパクトです。こちらもご覧ください &lt;code&gt;&lt;a href=&quot;#Fixtures&quot;&gt;Fixtures&lt;/a&gt;&lt;/code&gt; 以下の備品。</target>
        </trans-unit>
        <trans-unit id="1d3c457cbe3e35739086346e0a4048653efa42e7" translate="yes" xml:space="preserve">
          <source>Distribution</source>
          <target state="translated">Distribution</target>
        </trans-unit>
        <trans-unit id="1fb2ec77dec0827e6e0ae703f668a7a543d0ca5f" translate="yes" xml:space="preserve">
          <source>Distribution and fault tolerance</source>
          <target state="translated">ディストリビューションとフォールトトレランス</target>
        </trans-unit>
        <trans-unit id="c005e1759172af47ea6a2a358db5688f108d75cf" translate="yes" xml:space="preserve">
          <source>Distribution of applications is highly dependent of the global group definitions. It is not recommended that an application is distributed over many global groups, as the registered names can be moved to another global group at failover/takeover. Nothing prevents this to be done, but the application code must then handle the situation.</source>
          <target state="translated">アプリケーションの配布は、グローバルグループの定義に大きく依存します。アプリケーションを多くのグローバルグループに分散させることは推奨されません。これを妨げるものは何もありませんが、アプリケーションコードはこのような状況を処理しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3cf125e37f22237a163b399ac03840410729489d" translate="yes" xml:space="preserve">
          <source>Distribution over TLS/SSL, See the &lt;code&gt; Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="translated">TLS / SSLを介した配布。安全な分散ノードを設定する方法の詳細については、 『 &lt;code&gt; Using SSL for Erlang Distribution&lt;/code&gt; ユーザーズガイド』を参照してください。</target>
        </trans-unit>
        <trans-unit id="9dfeb8d1362ff3508945cdb79fdb677bffbb7cb3" translate="yes" xml:space="preserve">
          <source>Distribution over TLS/SSL, See the &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="translated">TLS / SSLを介した配布。セキュアな分散ノードをセットアップする方法の詳細については &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; ユーザーガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="19983b43869ec19057fd09428fe2401294f12747" translate="yes" xml:space="preserve">
          <source>Distribution sequential/parallel</source>
          <target state="translated">ディストリビューション 順次/並列</target>
        </trans-unit>
        <trans-unit id="22bdf47be3fd0a53ecdf5d6edbde0a2c6b97f0e0" translate="yes" xml:space="preserve">
          <source>Do</source>
          <target state="translated">Do</target>
        </trans-unit>
        <trans-unit id="47613c6fda4292bd08e25bf20eb869bc678389c9" translate="yes" xml:space="preserve">
          <source>Do &lt;strong&gt;not&lt;/strong&gt; declare the &lt;code&gt;driver_entry&lt;/code&gt;&lt;code&gt;const&lt;/code&gt;. This because the emulator must modify the &lt;code&gt;handle&lt;/code&gt; and the &lt;code&gt;handle2&lt;/code&gt; fields. A statically allocated, and &lt;code&gt;const&lt;/code&gt;-declared &lt;code&gt;driver_entry&lt;/code&gt; can be located in read-only memory, which causes the emulator to crash.</source>
          <target state="translated">&lt;code&gt;driver_entry&lt;/code&gt; &lt;code&gt;const&lt;/code&gt; を宣言し&lt;strong&gt;ないで&lt;/strong&gt;ください。これは、エミュレーターが &lt;code&gt;handle&lt;/code&gt; と &lt;code&gt;handle2&lt;/code&gt; フィールドを変更する必要があるためです。静的に割り当てられ、 &lt;code&gt;const&lt;/code&gt; で宣言された &lt;code&gt;driver_entry&lt;/code&gt; は読み取り専用メモリに配置できるため、エミュレータがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="156a410dd8c4aec29054efddcf1aca187e334ab2" translate="yes" xml:space="preserve">
          <source>Do a one-time execution of a remote command over &lt;code&gt;ssh&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; を介してリモートコマンドを1回実行します。</target>
        </trans-unit>
        <trans-unit id="61182cd5c5652e8bcee439979d35fb7735c6a0ae" translate="yes" xml:space="preserve">
          <source>Do an one-time execution of a remote OS command (&quot;pwd&quot;) over &lt;code&gt;ssh&lt;/code&gt; to the ssh server of the OS at the host &quot;tarlop&quot;:</source>
          <target state="translated">ホスト「tarlop」にあるOSのsshサーバーに対して &lt;code&gt;ssh&lt;/code&gt; を介してリモートOSコマンド（「pwd」）を1回実行します。</target>
        </trans-unit>
        <trans-unit id="d221ae72367256bfa0f670f2336dceacee61b0d4" translate="yes" xml:space="preserve">
          <source>Do as follows:</source>
          <target state="translated">以下のようにしてください。</target>
        </trans-unit>
        <trans-unit id="f27b06d07e1966b0b6864e00ebac2e38b9abf992" translate="yes" xml:space="preserve">
          <source>Do not assume that the fastest implementation of a given algorithm on computer architecture X is also the fastest on computer architecture Y.</source>
          <target state="translated">コンピュータアーキテクチャXで与えられたアルゴリズムの最速の実装が、コンピュータアーキテクチャYでも最速であると仮定してはいけません。</target>
        </trans-unit>
        <trans-unit id="60772b6696dbf4ac12380ab3e94aae181f9d5c26" translate="yes" xml:space="preserve">
          <source>Do not auto-import any functions from &lt;code&gt;erlang&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;erlang&lt;/code&gt; モジュールから関数を自動インポートしないでください。</target>
        </trans-unit>
        <trans-unit id="3d5e059893acb8b0449b6d1e96a2752f9bacf037" translate="yes" xml:space="preserve">
          <source>Do not break Hangul (a Korean script) syllable sequences. Hangul characters are of five types: L, V, T, LV, and LVT. An L character can be followed by an L, V, LV, or LVT character. An LV or V character can be followed by a V or T character. An LVT or T character can be followed only by a T character.</source>
          <target state="translated">ハングル(韓国語の文字)の音節列を崩さないようにしましょう。ハングル文字には5種類あります。L、V、T、LV、LVTの5種類です。L文字の後には、L、V、LV、LVT文字が続きます。LVまたはV文字の後には、VまたはT文字を付けることができます。LVTまたはT文字の後には、T文字のみが続きます。</target>
        </trans-unit>
        <trans-unit id="651bee959850d9f68d5849e0d8ebd34b2d42f910" translate="yes" xml:space="preserve">
          <source>Do not call &lt;code&gt;port_call&lt;/code&gt; with an unknown &lt;code&gt;Port&lt;/code&gt; identifier and expect &lt;code&gt;badarg&lt;/code&gt; exception. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the supplied arguments.</source>
          <target state="translated">呼び出さないでください &lt;code&gt;port_call&lt;/code&gt; を不明と &lt;code&gt;Port&lt;/code&gt; 識別子と期待 &lt;code&gt;badarg&lt;/code&gt; 例外を。ポートドライバーが指定された引数をどのように解釈するかに応じて、未定義の動作（ノードのクラッシュを含む）が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="5c9ced6e360a50fea15816bc67ccef8964b7f8f6" translate="yes" xml:space="preserve">
          <source>Do not call &lt;code&gt;port_control/3&lt;/code&gt; with an unknown &lt;code&gt;Port&lt;/code&gt; identifier and expect &lt;code&gt;badarg&lt;/code&gt; exception. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the supplied arguments.</source>
          <target state="translated">不明な &lt;code&gt;Port&lt;/code&gt; 識別子を使用して &lt;code&gt;port_control/3&lt;/code&gt; を呼び出さず、 &lt;code&gt;badarg&lt;/code&gt; 例外を予期してください。ポートドライバーが指定された引数をどのように解釈するかに応じて、未定義の動作（ノードのクラッシュを含む）が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b521b45cda7d42ddb8d4e9de9054fb540ecd742d" translate="yes" xml:space="preserve">
          <source>Do not compile (that is, do not produce object code) the generated &lt;code&gt;.erl&lt;/code&gt; file. If this option is omitted, the generated Erlang module is compiled.</source>
          <target state="translated">生成された &lt;code&gt;.erl&lt;/code&gt; ファイルをコンパイルしないでください（つまり、オブジェクトコードを生成しません）。このオプションを省略すると、生成されたErlangモジュールがコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="14f32868df4cab74a92ca7e529102aa97cd5b714" translate="yes" xml:space="preserve">
          <source>Do not confuse item (?R) with condition (R), which tests for recursion. Consider the following pattern, which matches text in angle brackets, allowing for arbitrary nesting. Only digits are allowed in nested brackets (that is, when recursing), while any characters are permitted at the outer level.</source>
          <target state="translated">項目 (?R)と条件 (R)を混同しないでください。次のパターンを考えてみましょう。角括弧内のテキストにマッチし、任意の入れ子を可能にします。入れ子になった大括弧の中では数字だけが許可され(つまり、再帰の場合)、外側のレベルでは任意の文字が許可されます。</target>
        </trans-unit>
        <trans-unit id="37e72f477291161d4ca7e88c63da4fba798ca16b" translate="yes" xml:space="preserve">
          <source>Do not confuse this feature with the &lt;code&gt;repeat&lt;/code&gt; property of a test case group. The options described here are used to repeat execution of entire test runs, while the &lt;code&gt;repeat&lt;/code&gt; property of a test case group makes it possible to repeat execution of sets of test cases within a suite. For more information about the latter, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups &lt;/a&gt;&lt;/code&gt; in section Writing Test Suites.</source>
          <target state="translated">この機能をテストケースグループの &lt;code&gt;repeat&lt;/code&gt; プロパティと混同しないでください。ここで説明するオプションは、テスト実行全体の実行を繰り返すために使用されますが、テストケースグループの &lt;code&gt;repeat&lt;/code&gt; プロパティを使用すると、スイート内でテストケースのセットの実行を繰り返すことができます。後者の詳細については、「テストスイートの作成」セクションの「 &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups &lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="15b14d23d02c2d810eb7ff4dafcb04db866620a8" translate="yes" xml:space="preserve">
          <source>Do not confuse this feature with the &lt;code&gt;repeat&lt;/code&gt; property of a test case group. The options described here are used to repeat execution of entire test runs, while the &lt;code&gt;repeat&lt;/code&gt; property of a test case group makes it possible to repeat execution of sets of test cases within a suite. For more information about the latter, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; in section Writing Test Suites.</source>
          <target state="translated">この機能をテストケースグループの &lt;code&gt;repeat&lt;/code&gt; プロパティと混同しないでください。ここで説明するオプションは、テストラン全体の実行を繰り返すために使用されます。一方、テストケースグループの &lt;code&gt;repeat&lt;/code&gt; プロパティは、スイート内でテストケースのセットの実行を繰り返すことを可能にします。後者の詳細については、「テストスイートの &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; 」の「テストケースグループ」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5fd5a1472c6fe43a652bdd8bc5aa386723882a15" translate="yes" xml:space="preserve">
          <source>Do not depend on the current working directory for reading and writing data files, as this is not portable. All scratch files are to be written in the &lt;code&gt;priv_dir&lt;/code&gt; and all data files are to be located in &lt;code&gt;data_dir&lt;/code&gt;. Also, the &lt;code&gt;Common Test&lt;/code&gt; server sets the current working directory to the test case log directory at the start of every case.</source>
          <target state="translated">これは移植性がないため、データファイルの読み取りと書き込みを現在の作業ディレクトリに依存しないでください。すべてのスクラッチファイルは &lt;code&gt;priv_dir&lt;/code&gt; に書き込まれ、すべてのデータファイルは &lt;code&gt;data_dir&lt;/code&gt; に配置されます。また、 &lt;code&gt;Common Test&lt;/code&gt; サーバーは、すべてのケースの開始時に、現在の作業ディレクトリをテストケースログディレクトリに設定します。</target>
        </trans-unit>
        <trans-unit id="7194a989708cb9ceda8cc7192a66b9bda23def2c" translate="yes" xml:space="preserve">
          <source>Do not depend on the scheduling to remain exactly as it is today. Scheduling is likely to be changed in a future release to use available processor cores better.</source>
          <target state="translated">スケジューリングが現在のままであることに依存しないでください。将来のリリースでは、利用可能なプロセッサコアをより良く使用するためにスケジューリングが変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="a2f31ff69a8594f7ef57326c9ad5ac44bf992a75" translate="yes" xml:space="preserve">
          <source>Do not disable the Erlang shell while running the GUI.</source>
          <target state="translated">GUIを実行している間はErlangシェルを無効にしないでください。</target>
        </trans-unit>
        <trans-unit id="9940ce9bb1d237e4d18a0edeb4db476b18a97e5d" translate="yes" xml:space="preserve">
          <source>Do not enable &lt;code&gt;parallel_logins&lt;/code&gt; without protecting the server by other means, for example, by the &lt;code&gt;max_sessions&lt;/code&gt; option or a firewall configuration. If set to &lt;code&gt;true&lt;/code&gt;, there is no protection against DOS attacks.</source>
          <target state="translated">&lt;code&gt;max_sessions&lt;/code&gt; オプションやファイアウォール構成などの他の手段でサーバーを保護せずに、 &lt;code&gt;parallel_logins&lt;/code&gt; を有効にしないでください。 &lt;code&gt;true&lt;/code&gt; に設定した場合、DOS攻撃に対する保護はありません。</target>
        </trans-unit>
        <trans-unit id="c71ebfa08b5476018b372c85a3329c913b294dc2" translate="yes" xml:space="preserve">
          <source>Do not end after prepend characters.</source>
          <target state="translated">前置文字の後には終了しないでください。</target>
        </trans-unit>
        <trans-unit id="d8c471ab6552051ae9d3261971ab9ca63bf52f14" translate="yes" xml:space="preserve">
          <source>Do not end before extending characters or spacing marks. Characters with the &quot;mark&quot; property always have the &quot;extend&quot; grapheme breaking property.</source>
          <target state="translated">文字やマークを拡張する前に終了しないようにします。mark&quot; プロパティを持つ文字は、常に &quot;extend&quot; grapheme breaking プロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="3c01623e5d9ea8f28b667a75484db29adf450c8b" translate="yes" xml:space="preserve">
          <source>Do not end between CR and LF; otherwise end after any control character.</source>
          <target state="translated">CRとLFの間で終了しないでください。そうでない場合は、任意の制御文字の後で終了します。</target>
        </trans-unit>
        <trans-unit id="8d0cf1528511fb26d91115dbca4234d18f655418" translate="yes" xml:space="preserve">
          <source>Do not fetch data that you already have.</source>
          <target state="translated">すでに持っているデータを取得しないでください。</target>
        </trans-unit>
        <trans-unit id="188b0c662f5109429f4e7982a599520d181b7813" translate="yes" xml:space="preserve">
          <source>Do not forget to consider the burst rate. If you set intensity to 1 and period to 6, it gives the same sustained error rate as 5/30 or 10/60, but will not allow even 2 restart attempts in quick succession. This is probably not what you wanted.</source>
          <target state="translated">バーストレートを考慮することを忘れないでください。インテンシティを1、ピリオドを6に設定した場合、5/30や10/60と同じ持続的なエラーレートが得られますが、2回の再起動を素早く連続して行うことはできません。これはおそらくあなたが望んでいたものではありません。</target>
        </trans-unit>
        <trans-unit id="cb6ff35f68a8fe238498bd152090f1aefc3c00b3" translate="yes" xml:space="preserve">
          <source>Do not insert line breaks in types, contracts, and Erlang Code when formatting warnings.</source>
          <target state="translated">警告をフォーマットするときに、型、コントラクト、Erlangコードで改行を挿入しないでください。</target>
        </trans-unit>
        <trans-unit id="78a25e53c1d1a1e9e8efea26b3a8a018a5711c79" translate="yes" xml:space="preserve">
          <source>Do not rely too much on the order of &lt;code&gt;Flag&lt;/code&gt; atoms or &lt;code&gt;Ifopt&lt;/code&gt; tuples. There are however some rules:</source>
          <target state="translated">&lt;code&gt;Flag&lt;/code&gt; アトムまたは &lt;code&gt;Ifopt&lt;/code&gt; タプルの順序にあまり依存しないでください。ただし、いくつかのルールがあります。</target>
        </trans-unit>
        <trans-unit id="ed5a829acbf86b446537c7e77035b74ae3ff6884" translate="yes" xml:space="preserve">
          <source>Do not rely too much on the order of &lt;code&gt;Flags&lt;/code&gt; atoms or the &lt;code&gt;Ifopt&lt;/code&gt; tuples. There are however some rules:</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; アトムまたは &lt;code&gt;Ifopt&lt;/code&gt; タプルの順序にあまり依存しないでください。ただし、いくつかのルールがあります。</target>
        </trans-unit>
        <trans-unit id="e1c9c02fa7973c5d114818811d89f50e2cadfc9c" translate="yes" xml:space="preserve">
          <source>Do not segment outgoing reply messages. This is useful when either it is known that messages are never to large or that the transport protocol can handle such things on its own (e.g. TCP or SCTP).</source>
          <target state="translated">送信応答メッセージをセグメント化しないでください。これは、メッセージが決して大きくないことがわかっている場合や、トランスポートプロトコルがそのようなことを独自に処理できる場合に便利です (例:TCP や SCTP)。</target>
        </trans-unit>
        <trans-unit id="80935dcf9b5a6ea229aecf6d20098f3db3dec414" translate="yes" xml:space="preserve">
          <source>Do not send data to an unknown port. Any undefined behavior is possible (including node crash) depending on how the port driver interprets the data.</source>
          <target state="translated">未知のポートにデータを送信しないでください。ポートドライバがどのようにデータを解釈するかによっては、未定義の動作(ノードクラッシュを含む)が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7d463f746b0b7fd7109b1a49ad6fea1f1a13ac94" translate="yes" xml:space="preserve">
          <source>Do not send messages or issue port commands to the &lt;code&gt;Tracee&lt;/code&gt; in any of the callbacks. This is not allowed and can cause all sorts of strange behavior, including, but not limited to, infinite recursions.</source>
          <target state="translated">メッセージや、問題のポートコマンドを送信しないでください &lt;code&gt;Tracee&lt;/code&gt; コールバックのいずれかで。これは許可されておらず、無限再帰を含むがそれに限定されない、あらゆる種類の奇妙な動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="8a73abdea57b18933ecedd87b093ff6419e3300f" translate="yes" xml:space="preserve">
          <source>Do not set the period to a very high value if you want to tolerate bursts. If you set intensity to 5 and period to 3600 (one hour), the supervisor will allow a short burst of 5 restarts, but then gives up if it sees another single restart almost an hour later. You probably want to regard those crashes as separate incidents, so setting the period to 5 or 10 minutes will be more reasonable.</source>
          <target state="translated">バーストを許容したい場合は、ピリオドをあまり高い値に設定しないでください。インテンシティを5に設定し、ピリオドを3600(1時間)に設定した場合、スーパーバイザは5回の再起動の短いバーストを許可しますが、1時間近く後に別の1回の再起動を見た場合は諦めます。おそらく、これらのクラッシュを別個のインシデントと見なしたいのでしょうから、期間を5分または10分に設定するのがより合理的でしょう。</target>
        </trans-unit>
        <trans-unit id="b65301fb79ef8b7b35e60f636541eaf5d9009d6f" translate="yes" xml:space="preserve">
          <source>Do not tamper with the socket options &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;binary&lt;/code&gt;, &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;packet&lt;/code&gt;, &lt;code&gt;nodelay&lt;/code&gt; and &lt;code&gt;deliver&lt;/code&gt; since they are used by the distribution protocol handler itself. Other raw socket options such as &lt;code&gt;packet_size&lt;/code&gt; may interfere severely, so beware!</source>
          <target state="translated">ソケットオプション &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;binary&lt;/code&gt; 、 &lt;code&gt;active&lt;/code&gt; 、 &lt;code&gt;packet&lt;/code&gt; 、 &lt;code&gt;nodelay&lt;/code&gt; 、 &lt;code&gt;deliver&lt;/code&gt; 改ざんしないでください。これらは、配信プロトコルハンドラ自体によって使用されるためです。 &lt;code&gt;packet_size&lt;/code&gt; などの他のrawソケットオプションは深刻な干渉を引き起こす可能性があるため、注意してください。</target>
        </trans-unit>
        <trans-unit id="d8589c5d62b43bc732186af17da7031d4ee16b0e" translate="yes" xml:space="preserve">
          <source>Do not try to work around these problems by using alternative implementations of the missing algorithms! An application can only claim to be using a FIPS 140-2 validated cryptographic module if it uses it exclusively for every cryptographic operation.</source>
          <target state="translated">欠けているアルゴリズムの代替実装を使用して、これらの問題を回避しようとしないでください。アプリケーションは、FIPS 140-2で検証された暗号モジュールをすべての暗号処理に排他的に使用している場合にのみ、FIPS 140-2で検証された暗号モジュールを使用していると主張することができます。</target>
        </trans-unit>
        <trans-unit id="c5651954dc46885391a1490aca0bd0b8cd7aaad8" translate="yes" xml:space="preserve">
          <source>Do not use a &lt;code&gt;Context&lt;/code&gt; as argument in more than one call to hmac_update or hmac_final. The semantics of reusing old contexts in any way is undefined and could even crash the VM in earlier releases. The reason for this limitation is a lack of support in the underlying OpenSSL API.</source>
          <target state="translated">hmac_updateまたはhmac_finalへの複数の呼び出しで引数として &lt;code&gt;Context&lt;/code&gt; を使用しないでください。古いコンテキストを何らかの方法で再利用するセマンティクスは定義されておらず、以前のリリースではVMをクラッシュさせることさえありました。この制限の理由は、基になるOpenSSL APIのサポートの欠如です。</target>
        </trans-unit>
        <trans-unit id="f5aebc45ba913c9940dd21c63300e4d022b07a05" translate="yes" xml:space="preserve">
          <source>Do not use a &lt;code&gt;Context&lt;/code&gt; as argument in more than one call to hmac_update or hmac_final. The semantics of reusing old contexts in any way is undefined and could even crash the VM in earlier releases. The reason for this limitation is a lack of support in the underlying libcrypto API.</source>
          <target state="translated">hmac_updateまたはhmac_finalへの複数の呼び出しで引数として &lt;code&gt;Context&lt;/code&gt; を使用しないでください。古いコンテキストを何らかの方法で再利用するセマンティクスは未定義であり、以前のリリースではVMをクラッシュさせる可能性さえありました。この制限の理由は、基盤となるlibcryptoAPIがサポートされていないためです。</target>
        </trans-unit>
        <trans-unit id="71cc879e1a9b34f9f8f3f275c6f8a0b14927f088" translate="yes" xml:space="preserve">
          <source>Do not use any of the keys in these examples. Use your own keys.</source>
          <target state="translated">これらの例のキーは使用しないでください。独自のキーを使用してください。</target>
        </trans-unit>
        <trans-unit id="3e3d2471e72d9c62935331dbceb31a316086f28e" translate="yes" xml:space="preserve">
          <source>Do not use atom cache over this connection.</source>
          <target state="translated">この接続ではアトムキャッシュを使用しないでください。</target>
        </trans-unit>
        <trans-unit id="25bba2adbeee67303d12a8d397918f4ee984e826" translate="yes" xml:space="preserve">
          <source>Do not use the &lt;code&gt;&lt;a href=&quot;#compile_server&quot;&gt;compile server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#compile_server&quot;&gt;compile server&lt;/a&gt;&lt;/code&gt; は使用しないでください。</target>
        </trans-unit>
        <trans-unit id="1356865819ece0e9984d524eb4ee4ec65b6f89d1" translate="yes" xml:space="preserve">
          <source>Do recover from a testcase failure using CTHs only a last resort. If used wrongly, it can be very difficult to determine which tests that pass or fail in a test run.</source>
          <target state="translated">CTH を使用してテストケースの失敗から回復するのは、最後の手段に過ぎません。使用方法を間違えると、どのテストがテストランで合否を判断するのが非常に難しくなります。</target>
        </trans-unit>
        <trans-unit id="42c7dd7ef6767859363ae1932a37452672de1454" translate="yes" xml:space="preserve">
          <source>Do something like this:</source>
          <target state="translated">このようなことをしてください。</target>
        </trans-unit>
        <trans-unit id="038970f21cbb8e0488428da90f3fabf1886c4212" translate="yes" xml:space="preserve">
          <source>Do the following:</source>
          <target state="translated">以下のようにしてください。</target>
        </trans-unit>
        <trans-unit id="a21d03cec610102299b9a7e2e16ecfa597e7dd26" translate="yes" xml:space="preserve">
          <source>Do this on the command line or add the flags to the &lt;code&gt;LDFLAGS&lt;/code&gt; definition in your &lt;code&gt;Makefile&lt;/code&gt;.</source>
          <target state="translated">コマンドラインでこれを行うか、 &lt;code&gt;Makefile&lt;/code&gt; の &lt;code&gt;LDFLAGS&lt;/code&gt; 定義にフラグを追加します。</target>
        </trans-unit>
        <trans-unit id="a47ab2b6ee02bee6a7cd7e90891dab0064937d7b" translate="yes" xml:space="preserve">
          <source>DoS (Denial of Service) attacks are hard to fight at the node level. Here are firewalls and other means needed, but that is out of scope for this guide. However, some measures could be taken in the configuration of the SSH server to increase the resilence. The options to use are:</source>
          <target state="translated">DoS(サービス拒否)攻撃は、ノードレベルで戦うのは難しい。ここではファイアウォールなどの対策が必要ですが、それはこのガイドの範囲外です。しかし、SSHサーバの設定で耐障害性を高めるための対策をとることができます。使用する選択肢は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="70b871cacc7e26cab738e21fdfbb99e29543867f" translate="yes" xml:space="preserve">
          <source>Documents can be joined into a single new document using the constructor functions of this module. Note that the new document often represents a larger number of possible layouts than just the sum of the components.</source>
          <target state="translated">ドキュメントは、このモジュールのコンストラクタ関数を使って一つの新しいドキュメントに結合することができます。新しいドキュメントは、コンポーネントの合計だけではなく、より多くの可能性のあるレイアウトを表すことが多いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="95accc1330c740146e565879f30ee3adeae7d539" translate="yes" xml:space="preserve">
          <source>Does a combined map/fold operation on the nodes of the tree. It begins by calling &lt;code&gt;Pre&lt;/code&gt; on the tree, using the &lt;code&gt;Initial&lt;/code&gt; value. It then deconstructs the top node of the returned tree and recurses on the children, using the returned value as the new initial and carrying the returned values from one call to the next. Finally it reassembles the top node from the children, calls &lt;code&gt;Post&lt;/code&gt; on it and returns the result.</source>
          <target state="translated">ツリーのノードでマップ/フォールドの組み合わせ操作を実行します。 &lt;code&gt;Initial&lt;/code&gt; 、初期値を使用してツリーで &lt;code&gt;Pre&lt;/code&gt; を呼び出します。次に、返されたツリーの最上位ノードを分解し、子に対して再帰します。戻り値を新しいイニシャルとして使用し、ある呼び出しから次の呼び出しに戻り値を運びます。最後に、子から最上位ノードを再構築し、 &lt;code&gt;Post&lt;/code&gt; を呼び出して、結果を返します。</target>
        </trans-unit>
        <trans-unit id="8fa79c867895a507674579a9fc26baed8ad72e50" translate="yes" xml:space="preserve">
          <source>Does a combined map/fold operation on the nodes of the tree. This is similar to &lt;code&gt;map/2&lt;/code&gt;, but also propagates a value from each application of &lt;code&gt;Function&lt;/code&gt; to the next, starting with the given value &lt;code&gt;Initial&lt;/code&gt;, while doing a post-order traversal of the tree, much like &lt;code&gt;fold/3&lt;/code&gt;.</source>
          <target state="translated">ツリーのノードでマップ/フォールドの組み合わせ操作を実行します。これはに似て &lt;code&gt;map/2&lt;/code&gt; するだけでなく、それぞれのアプリケーションから値を伝播 &lt;code&gt;Function&lt;/code&gt; 指定された値で始まる、次の &lt;code&gt;Initial&lt;/code&gt; ずっと同じように、木の帰りがけ順をしながら、 &lt;code&gt;fold/3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f98f19de9abb11350f639509d2fefdec19472e9" translate="yes" xml:space="preserve">
          <source>Does a fold operation over the nodes of the tree. The result is the value of &lt;code&gt;Function(X1, Function(X2, ... Function(Xn, Unit) ... ))&lt;/code&gt;, where &lt;code&gt;X1, ..., Xn&lt;/code&gt; are the nodes of &lt;code&gt;Tree&lt;/code&gt; in a post-order traversal.</source>
          <target state="translated">ツリーのノードに対してフォールド操作を実行します。結果は、 &lt;code&gt;Function(X1, Function(X2, ... Function(Xn, Unit) ... ))&lt;/code&gt; 。ここで、 &lt;code&gt;X1, ..., Xn&lt;/code&gt; は、ポストオーダートラバーサルの &lt;code&gt;Tree&lt;/code&gt; のノードです。</target>
        </trans-unit>
        <trans-unit id="b1cfa809f5e0beeb3084719dfa48bc7be279ead2" translate="yes" xml:space="preserve">
          <source>Does a mapfold operation over the immediate subtrees of a syntax tree. This is similar to &lt;code&gt;mapfold/3&lt;/code&gt;, but only on the immediate subtrees of &lt;code&gt;Tree&lt;/code&gt;, in left-to-right order; it does not include the root node of &lt;code&gt;Tree&lt;/code&gt;.</source>
          <target state="translated">構文ツリーの直接のサブツリーに対してマップフォールド操作を実行します。これは &lt;code&gt;mapfold/3&lt;/code&gt; に似ていますが、左から右の順序で、 &lt;code&gt;Tree&lt;/code&gt; の直接のサブツリー上でのみです。 &lt;code&gt;Tree&lt;/code&gt; のルートノードは含まれません。</target>
        </trans-unit>
        <trans-unit id="7c7eea79bea4b2b9cde4e71269ff5f714a49433e" translate="yes" xml:space="preserve">
          <source>Does any calculated expression give the same result each time?</source>
          <target state="translated">どの計算式も毎回同じ結果になりますか?</target>
        </trans-unit>
        <trans-unit id="bba1dfbc290a2c0b8836c89e393aabd52f91892a" translate="yes" xml:space="preserve">
          <source>Does the IO polling for the emulator. See &lt;code&gt;erl +IOt&lt;/code&gt; for more details.</source>
          <target state="translated">エミュレーターのIOポーリングを行います。詳細については、 &lt;code&gt;erl +IOt&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7bb0a8f4f91e9cee2cc8f3782dde3817b9d0995c" translate="yes" xml:space="preserve">
          <source>Does the same as &lt;code&gt;compile/1,2&lt;/code&gt;, but uses an existing &lt;code&gt;.beam&lt;/code&gt; file as base, i.e. the module is not compiled from source. Thus &lt;code&gt;compile_beam/1&lt;/code&gt; is faster than &lt;code&gt;compile/1,2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;compile/1,2&lt;/code&gt; と同じですが、既存の &lt;code&gt;.beam&lt;/code&gt; ファイルをベースとして使用します。つまり、モジュールはソースからコンパイルされません。したがって、 &lt;code&gt;compile_beam/1&lt;/code&gt; は &lt;code&gt;compile/1,2&lt;/code&gt; よりも高速です。</target>
        </trans-unit>
        <trans-unit id="75b2ead98f7bae72a0d0db8e893db529be8b23f3" translate="yes" xml:space="preserve">
          <source>Does this mean that 3 is in inches? Or does it mean that 3 is in centimeters and is to be converted to inches? Erlang has a way to group things together to make things more understandable. These are called &lt;strong&gt;tuples&lt;/strong&gt; and are surrounded by curly brackets, &quot;{&quot; and &quot;}&quot;.</source>
          <target state="translated">これは、3がインチであることを意味しますか？それとも、3はセンチメートルであり、インチに変換されるという意味ですか？Erlangには、物事をよりわかりやすくするためにグループ化する方法があります。これらは&lt;strong&gt;タプル&lt;/strong&gt;と呼ばれ、中かっこ「{」と「}」で囲まれています。</target>
        </trans-unit>
        <trans-unit id="6ed065e8e03cc0ab27b9fb8825a8074464256599" translate="yes" xml:space="preserve">
          <source>Doing &lt;code&gt;./otp_build save_bootstrap&lt;/code&gt; from the &lt;code&gt;$ERL_TOP&lt;/code&gt; directory before doing &lt;code&gt;make clean&lt;/code&gt; will ensure that it will be possible to build after doing &lt;code&gt;make clean&lt;/code&gt;. &lt;code&gt;./otp_build save_bootstrap&lt;/code&gt; will be invoked automatically when &lt;code&gt;make&lt;/code&gt; is invoked from &lt;code&gt;$ERL_TOP&lt;/code&gt; with either the &lt;code&gt;clean&lt;/code&gt; target, or the default target. It is also automatically invoked if &lt;code&gt;./otp_build remove_prebuilt_files&lt;/code&gt; is invoked.</source>
          <target state="translated">こう &lt;code&gt;./otp_build save_bootstrap&lt;/code&gt; をから &lt;code&gt;$ERL_TOP&lt;/code&gt; 行う前に、ディレクトリ &lt;code&gt;make clean&lt;/code&gt; 、それはやって後に構築することが可能になることが保証されます &lt;code&gt;make clean&lt;/code&gt; 。 &lt;code&gt;./otp_build save_bootstrap&lt;/code&gt; は、 &lt;code&gt;make&lt;/code&gt; が &lt;code&gt;$ERL_TOP&lt;/code&gt; から &lt;code&gt;clean&lt;/code&gt; ターゲットまたはデフォルトターゲットのいずれかで呼び出されたときに自動的に呼び出されます。 &lt;code&gt;./otp_build remove_prebuilt_files&lt;/code&gt; が呼び出された場合も、自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d5095e2d590b30dd7a9838e94c8dcfb9378c175e" translate="yes" xml:space="preserve">
          <source>Doing &lt;code&gt;make clean&lt;/code&gt; in an arbitrary directory of the source tree, may remove files needed for bootstrapping the build.</source>
          <target state="translated">やって &lt;code&gt;make clean&lt;/code&gt; ソースツリーの任意のディレクトリに、ビルドをブートストラップするために必要なファイルを削除することがあります。</target>
        </trans-unit>
        <trans-unit id="9ce2e932ba7981e63888adfbaf825292b137d8d5" translate="yes" xml:space="preserve">
          <source>Doing it this way we will get a communication pattern of information going from the leader thread out to all other managed threads and then back from the other threads to the leader thread. This since only the leader thread will write to the global counter and all other threads will only read it, and since each confirmation cache lines will only be written by one specific thread and only read by the leader thread. When each managed thread is distributed over different processors, the communication between processors will be a reflection of this communication pattern between threads.</source>
          <target state="translated">このようにすると、情報の通信パターンがリーダースレッドから他の管理されている全てのスレッドに行き、他のスレッドからリーダースレッドに戻ることになります。これは、リーダースレッドだけがグローバルカウンタに書き込み、他のすべてのスレッドがそれを読むだけであり、各確認キャッシュ行は特定のスレッドによってのみ書き込まれ、リーダースレッドによってのみ読み込まれるためです。各管理スレッドが異なるプロセッサに分散している場合、プロセッサ間の通信は、このスレッド間の通信パターンを反映したものになります。</target>
        </trans-unit>
        <trans-unit id="7bc2ad929348c83942c5653f9bd9442fa893930a" translate="yes" xml:space="preserve">
          <source>Doing it this way we will preserve the low latency at the expense of lost potential parallel execution of the signal and other code in the process sending the signal. This default behaviour can however be changed on port basis or system wide, forcing scheduling of all signals from processes to ports that are not part of a synchronous communication. That is, an unconditional request/response pair of asynchronous signals. In this case it is no potential for parallelism, and by that no point forcing scheduling of the request signal.</source>
          <target state="translated">このようにすることで、シグナルとシグナルを送信するプロセス内の他のコードの並列実行の可能性が失われることを犠牲にしても、低レイテンシを維持することができます。しかし、このデフォルトの動作はポート単位またはシステム全体で変更することができ、同期通信の一部ではないポートへのプロセスからの全てのシグナルのスケジューリングを強制します。つまり、非同期信号の無条件のリクエスト/レスポンスのペアです。この場合、並列化の可能性はありませんし、それによってリクエスト信号のスケジューリングを強制する意味はありません。</target>
        </trans-unit>
        <trans-unit id="8c13571de66cf331de3075eb6e61e83544211de9" translate="yes" xml:space="preserve">
          <source>Doing too much work in each NIF call will &lt;code&gt;degrade responsiveness of the VM&lt;/code&gt;. Doing too little work may mean that the gain of the faster processing in the NIF is eaten up by the overhead of calling the NIF and checking the arguments.</source>
          <target state="translated">各NIF呼び出しで実行する作業が多すぎる &lt;code&gt;degrade responsiveness of the VM&lt;/code&gt; が低下します。実行する作業が少なすぎると、NIFを呼び出して引数をチェックするオーバーヘッドによって、NIFでのより高速な処理の利点が失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="4f3e8da48850a3c1cd0e52b36112de4478075ac8" translate="yes" xml:space="preserve">
          <source>Doing, for example, a &lt;code&gt;file:list_dir/1&lt;/code&gt; on one of these systems can return Unicode lists with code points &amp;gt; 255, depending on the content of the file system.</source>
          <target state="translated">たとえば、これらのシステムの1つで &lt;code&gt;file:list_dir/1&lt;/code&gt; を実行すると、ファイルシステムの内容に応じて、コードポイントが255を超えるUnicodeリストが返されます。</target>
        </trans-unit>
        <trans-unit id="79f88a9bb9f4ec699c8ec64acf057a2ef9a2bf7c" translate="yes" xml:space="preserve">
          <source>Domain name</source>
          <target state="translated">ドメイン名</target>
        </trans-unit>
        <trans-unit id="a0d641b3f1afe93a0323a0128a013778c7d8ae93" translate="yes" xml:space="preserve">
          <source>Domains</source>
          <target state="translated">Domains</target>
        </trans-unit>
        <trans-unit id="a3f7119b88e739226568a8bca00099c4a3fd6f89" translate="yes" xml:space="preserve">
          <source>Domains are used to specify which subsystem a certain log event originates from. The default handler will by default only log events with the domain &lt;code&gt;[otp]&lt;/code&gt; or without a domain. If you would like to include SSL log events into the default handler log you could do this:</source>
          <target state="translated">ドメインは、特定のログイベントが発生するサブシステムを指定するために使用されます。デフォルトのハンドラーは、デフォルトで、ドメイン &lt;code&gt;[otp]&lt;/code&gt; があるイベントまたはドメインがないイベントのみをログに記録します。SSLログイベントをデフォルトのハンドラログに含めたい場合は、次のようにすることができます。</target>
        </trans-unit>
        <trans-unit id="bfed24b7dd9052ba2e02af6212f78e990e171c40" translate="yes" xml:space="preserve">
          <source>Don't</source>
          <target state="translated">Don't</target>
        </trans-unit>
        <trans-unit id="630fe2c2ec0f26d7c7ab82e064c7272e10c58466" translate="yes" xml:space="preserve">
          <source>Don't trace the &lt;code&gt;user&lt;/code&gt; process if using the default trace handler function.</source>
          <target state="translated">デフォルトのトレースハンドラー関数を &lt;code&gt;user&lt;/code&gt; する場合は、ユーザープロセスをトレースしません。</target>
        </trans-unit>
        <trans-unit id="d72584f09d299f253db50d82b0ad0f89ba8e4dfc" translate="yes" xml:space="preserve">
          <source>Don't trace the group leader of the tracer process. If tracing has been switched on for all processes, call &lt;code&gt;dbg:p(TracerGLPid,clear)&lt;/code&gt; to stop tracing the group leader (&lt;code&gt;TracerGLPid&lt;/code&gt;). &lt;code&gt;process_info(TracerPid,group_leader)&lt;/code&gt; tells you which process this is (&lt;code&gt;TracerPid&lt;/code&gt; is returned from &lt;code&gt;dbg:get_tracer/0&lt;/code&gt;).</source>
          <target state="translated">トレーサープロセスのグループリーダーを追跡しないでください。すべてのプロセスでトレースがオンになっている場合は、 &lt;code&gt;dbg:p(TracerGLPid,clear)&lt;/code&gt; を呼び出して、グループリーダー（ &lt;code&gt;TracerGLPid&lt;/code&gt; ）のトレースを停止します。 &lt;code&gt;process_info(TracerPid,group_leader)&lt;/code&gt; は、これがどのプロセスであるかを通知します（ &lt;code&gt;TracerPid&lt;/code&gt; は &lt;code&gt;dbg:get_tracer/0&lt;/code&gt; から返されます）。</target>
        </trans-unit>
        <trans-unit id="054d20e29b31a7dc242eecac1da33a510fa0468c" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#mac-3&quot;&gt;mac/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;crypto#macN-4&quot;&gt;macN/4&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#mac-3&quot;&gt;mac/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;crypto#macN-4&quot;&gt;macN/4&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="e8ba45b217c72f3f75416d0775d28dd10e48873a" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#mac-4&quot;&gt;mac/4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;crypto#macN-5&quot;&gt;macN/5&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#mac-4&quot;&gt;mac/4&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;crypto#macN-5&quot;&gt;macN/5&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3b547dd5eb8a9ab71774df482eaf9a63b99216e9" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#mac_final-1&quot;&gt;mac_final/1&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#mac_final-1&quot;&gt;mac_final/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f3c1eb5c704da26324afa628da4101d147e12985" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#mac_finalN-2&quot;&gt;mac_finalN/2&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#mac_finalN-2&quot;&gt;mac_finalN/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3f4bf31835f16c522a03db912ad57fda743aa9ac" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#mac_init-3&quot;&gt;mac_init/3&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#mac_init-3&quot;&gt;mac_init/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="d0d36416c033d36d114a19002281936f351061e7" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#mac_update-2&quot;&gt;mac_update/2&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#mac_update-2&quot;&gt;mac_update/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="29e0ca68b6e317c3f3073a2a5d354b33b114b9e8" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;supports/1&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;supports/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="93f156c9d5846e41687691e96e6feaa98351982e" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;the new api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the new api&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="556496238ed71dda06d56a97bfeabfb740671257" translate="yes" xml:space="preserve">
          <source>Don't use this function for new programs! Use &lt;code&gt;the-new-api&lt;/code&gt;.</source>
          <target state="translated">この機能を新しいプログラムに使用しないでください。 &lt;code&gt;the-new-api&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="a383c2a1d1bc03092c280bce505afe5bc0da6bba" translate="yes" xml:space="preserve">
          <source>Double UTF-8 Encoding</source>
          <target state="translated">デュアルUTF-8エンコーディング</target>
        </trans-unit>
        <trans-unit id="3ecae28cccab7ebddc79205dd193d3992e39be12" translate="yes" xml:space="preserve">
          <source>Double click on a module to launch its module window.</source>
          <target state="translated">モジュールをダブルクリックしてモジュールウィンドウを起動します。</target>
        </trans-unit>
        <trans-unit id="524d6b5e2eb391c06d7d662842ea304a3428ac3a" translate="yes" xml:space="preserve">
          <source>Double click on an application name to launch an application window.</source>
          <target state="translated">アプリケーション名をダブルクリックすると、アプリケーションウィンドウが起動します。</target>
        </trans-unit>
        <trans-unit id="717495e0494703ed6df39cf7df4eec3540f9699b" translate="yes" xml:space="preserve">
          <source>Double click on an application to launch its application window.</source>
          <target state="translated">アプリケーションをダブルクリックして、そのアプリケーションウィンドウを起動します。</target>
        </trans-unit>
        <trans-unit id="e3ef104fbe6551b62e8dd5aed2698114cc2960eb" translate="yes" xml:space="preserve">
          <source>Double click on an module name to launch a module window.</source>
          <target state="translated">モジュール名をダブルクリックすると、モジュールウィンドウが起動します。</target>
        </trans-unit>
        <trans-unit id="c9ca655edf4df9beaad28b4f1e93729b97bd7328" translate="yes" xml:space="preserve">
          <source>Double quote</source>
          <target state="translated">ダブルクォート</target>
        </trans-unit>
        <trans-unit id="03b4a91fa37fa8f5be07f6954e031f5c6ab94101" translate="yes" xml:space="preserve">
          <source>Double-click to view the table content, or right-click and select option &lt;strong&gt;Show Table Content&lt;/strong&gt;. To view table information, select the table and activate menu &lt;strong&gt;View &amp;gt; Table information&lt;/strong&gt;, or right-click and select option &lt;strong&gt;Table info&lt;/strong&gt;.</source>
          <target state="translated">ダブルクリックしてテーブルコンテンツを表示するか、右クリックして[ &lt;strong&gt;テーブルコンテンツの表示&lt;/strong&gt; ]オプションを選択します。テーブル情報を表示するには、テーブルを選択してメニューの&lt;strong&gt;[表示]&amp;gt; [テーブル情報&lt;/strong&gt; ]をアクティブにするか、右クリックして[ &lt;strong&gt;テーブル情報&lt;/strong&gt; ]オプションを選択します。</target>
        </trans-unit>
        <trans-unit id="a5ea8d16867528d169d37b0acf9151c1e9bd53c9" translate="yes" xml:space="preserve">
          <source>Double-clicking a module brings up the View Module window.</source>
          <target state="translated">モジュールをダブルクリックすると、View Module ウィンドウが表示されます。</target>
        </trans-unit>
        <trans-unit id="bc28dc5bddbb75b67327c00dba2ea708871fd1af" translate="yes" xml:space="preserve">
          <source>Double-clicking a row in the &lt;strong&gt;Funs&lt;/strong&gt; tab has no effect.</source>
          <target state="translated">[ &lt;strong&gt;ファン&lt;/strong&gt; ]タブの行をダブルクリックしても効果はありません。</target>
        </trans-unit>
        <trans-unit id="32db7d6a7602f3bd7441157fad4ae41131e6d87d" translate="yes" xml:space="preserve">
          <source>Double-clicking a row in the &lt;strong&gt;Timers&lt;/strong&gt; tab has no effect.</source>
          <target state="translated">[ &lt;strong&gt;タイマー&lt;/strong&gt; ]タブの行をダブルクリックしても効果はありません。</target>
        </trans-unit>
        <trans-unit id="124373b861cdaa55ee48064bb5c358db179e8021" translate="yes" xml:space="preserve">
          <source>Downgrades an application &lt;code&gt;App&lt;/code&gt; from the current version to a previous version &lt;code&gt;OldVsn&lt;/code&gt; located in &lt;code&gt;Dir&lt;/code&gt; according to the &lt;code&gt;.appup&lt;/code&gt; file.</source>
          <target state="translated">&lt;code&gt;.appup&lt;/code&gt; ファイルに従って、アプリケーション &lt;code&gt;App&lt;/code&gt; を現在のバージョンから &lt;code&gt;Dir&lt;/code&gt; にある以前のバージョンの &lt;code&gt;OldVsn&lt;/code&gt; にダウングレードします。</target>
        </trans-unit>
        <trans-unit id="700c1cf0a5db3e391a57da8114050240b46bbc58" translate="yes" xml:space="preserve">
          <source>Download and run the installer from: URL: &lt;code&gt;&lt;a href=&quot;http://nsis.sourceforge.net/download&quot;&gt;http://nsis.sourceforge.net/download&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">インストーラーをダウンロードして実行します：URL： &lt;code&gt;&lt;a href=&quot;http://nsis.sourceforge.net/download&quot;&gt;http://nsis.sourceforge.net/download&lt;/a&gt;&lt;/code&gt; ：//nsis.sourceforge.net/download</target>
        </trans-unit>
        <trans-unit id="213b68c824beb73900e74352c19c9f193673f2e0" translate="yes" xml:space="preserve">
          <source>Download from &lt;code&gt;&lt;a href=&quot;http://sourceforge.net/projects/wxwindows/files/3.0.0/&quot;&gt;http://sourceforge.net/projects/wxwindows/files/3.0.0/&lt;/a&gt;&lt;/code&gt; or get it from GitHub: &lt;code&gt;&lt;a href=&quot;https://github.com/wxWidgets/wxWidgets&quot;&gt;https://github.com/wxWidgets/wxWidgets&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://sourceforge.net/projects/wxwindows/files/3.0.0/&quot;&gt;http://sourceforge.net/projects/wxwindows/files/3.0.0/&lt;/a&gt;&lt;/code&gt; からダウンロードするか、GitHubから入手してください： &lt;code&gt;&lt;a href=&quot;https://github.com/wxWidgets/wxWidgets&quot;&gt;https://github.com/wxWidgets/wxWidgets&lt;/a&gt;&lt;/code&gt; : //github.com/wxWidgets/wxWidgets</target>
        </trans-unit>
        <trans-unit id="8386933fe8a4856441fadd580fff299db5a4ba8b" translate="yes" xml:space="preserve">
          <source>Download from &lt;code&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads&lt;/a&gt;&lt;/code&gt;. We have also tested with IBM's JDK 1.6.0.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.oracle.com/technetwork/java/javase/downloads&quot;&gt;http://www.oracle.com/technetwork/java/javase/downloads&lt;/a&gt;&lt;/code&gt; からダウンロードします。IBMのJDK 1.6.0でもテストしました。</target>
        </trans-unit>
        <trans-unit id="a9768700bae7b9637335b2ee2dad1a46acc972fd" translate="yes" xml:space="preserve">
          <source>Driver binaries are created with &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt; driver_alloc_binary&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ドライバーバイナリは、 &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt; driver_alloc_binary&lt;/a&gt;&lt;/code&gt; で作成されます。</target>
        </trans-unit>
        <trans-unit id="8b39a8d218c5ca3f8fc57bb3b20d659b2903e3cd" translate="yes" xml:space="preserve">
          <source>Driver binaries are created with &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt;driver_alloc_binary&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ドライババイナリは、 &lt;code&gt;&lt;a href=&quot;#driver_alloc_binary&quot;&gt;driver_alloc_binary&lt;/a&gt;&lt;/code&gt; を使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="b2925af43f193d05bd9c132c6b819683491e75cf" translate="yes" xml:space="preserve">
          <source>Driver binaries are used in the &lt;code&gt;driver_output2&lt;/code&gt; and &lt;code&gt;driver_outputv&lt;/code&gt; calls, and in the queue. Also the driver callback &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt; outputv&lt;/a&gt;&lt;/code&gt; uses driver binaries.</source>
          <target state="translated">ドライバーバイナリは、 &lt;code&gt;driver_output2&lt;/code&gt; と &lt;code&gt;driver_outputv&lt;/code&gt; の呼び出し、およびキューで使用されます。また、ドライバーコールバック &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt; outputv&lt;/a&gt;&lt;/code&gt; はドライバーバイナリを使用します。</target>
        </trans-unit>
        <trans-unit id="226324127bebbb68d2978adef667b4d99ce22ea6" translate="yes" xml:space="preserve">
          <source>Driver binaries are used in the &lt;code&gt;driver_output2&lt;/code&gt; and &lt;code&gt;driver_outputv&lt;/code&gt; calls, and in the queue. Also the driver callback &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; uses driver binaries.</source>
          <target state="translated">ドライバーバイナリは、 &lt;code&gt;driver_output2&lt;/code&gt; と &lt;code&gt;driver_outputv&lt;/code&gt; 呼び出し、およびキューで使用されます。また、ドライバーコールバック &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; はドライバーバイナリを使用します。</target>
        </trans-unit>
        <trans-unit id="124a28d8951fffb18c027deaea920077ee90b6a5" translate="yes" xml:space="preserve">
          <source>Driver callback &lt;code&gt;&lt;a href=&quot;driver_entry#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; now gets &lt;code&gt;ErlDrvSizeT&lt;/code&gt; as 4th and 6th arguments instead of previously &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">ドライバーのコールバック &lt;code&gt;&lt;a href=&quot;driver_entry#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; は、以前の &lt;code&gt;int&lt;/code&gt; ではなく、4番目と6番目の引数として &lt;code&gt;ErlDrvSizeT&lt;/code&gt; を取得するようになりました。</target>
        </trans-unit>
        <trans-unit id="d01a22bd67104135a24eaf6baba00db329c9e8ca" translate="yes" xml:space="preserve">
          <source>Driver callback &lt;code&gt;&lt;a href=&quot;driver_entry#control&quot;&gt;control&lt;/a&gt;&lt;/code&gt; now gets &lt;code&gt;ErlDrvSizeT&lt;/code&gt; as 4th and 6th arguments instead of previously &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">ドライバーコールバック &lt;code&gt;&lt;a href=&quot;driver_entry#control&quot;&gt;control&lt;/a&gt;&lt;/code&gt; は、以前の &lt;code&gt;int&lt;/code&gt; ではなく、4番目と6番目の引数として &lt;code&gt;ErlDrvSizeT&lt;/code&gt; を取得するようになりました。</target>
        </trans-unit>
        <trans-unit id="1ecab8b8577923531622a9e5fde5fb02223fdfd2" translate="yes" xml:space="preserve">
          <source>Driver callback &lt;code&gt;&lt;a href=&quot;driver_entry#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; now gets &lt;code&gt;ErlDrvSizeT&lt;/code&gt; as 3rd argument instead of previously &lt;code&gt;int&lt;/code&gt;.</source>
          <target state="translated">ドライバーコールバック &lt;code&gt;&lt;a href=&quot;driver_entry#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; は、以前の &lt;code&gt;int&lt;/code&gt; ではなく、 &lt;code&gt;ErlDrvSizeT&lt;/code&gt; を3番目の引数として取得するようになりました。</target>
        </trans-unit>
        <trans-unit id="114ae7f217d84b109210122fb59fad19e5bf87ab" translate="yes" xml:space="preserve">
          <source>Driver entries added by the &lt;code&gt;erl_ddll&lt;/code&gt; Erlang interface cannot be removed by using this interface.</source>
          <target state="translated">&lt;code&gt;erl_ddll&lt;/code&gt; Erlangインターフェイスによって追加されたドライバーエントリは、このインターフェイスを使用して削除することはできません。</target>
        </trans-unit>
        <trans-unit id="82d2f62d7632df80ba77337f6c50bfc5274b667e" translate="yes" xml:space="preserve">
          <source>Driver reload is already requested by another &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; when option &lt;code&gt;{reload, ReloadOption}&lt;/code&gt; was specified.</source>
          <target state="translated">オプション &lt;code&gt;{reload, ReloadOption}&lt;/code&gt; が指定されている場合、ドライバーの再ロードは別の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; によって既に要求されています。</target>
        </trans-unit>
        <trans-unit id="7e9c5911b425f5ebbb8cd801d9119d40f84c087f" translate="yes" xml:space="preserve">
          <source>Drivers in General</source>
          <target state="translated">一般的なドライバー</target>
        </trans-unit>
        <trans-unit id="bdb0405c87a9568c87483f079e1ba66cba5e95d4" translate="yes" xml:space="preserve">
          <source>Drops elements &lt;code&gt;Elem&lt;/code&gt; from &lt;code&gt;List1&lt;/code&gt; while &lt;code&gt;Pred(Elem)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; and returns the remaining list.</source>
          <target state="translated">&lt;code&gt;Pred(Elem)&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返し、残りのリストを返す間に、 &lt;code&gt;List1&lt;/code&gt; から要素 &lt;code&gt;Elem&lt;/code&gt; を削除します。</target>
        </trans-unit>
        <trans-unit id="57da8705f25d5b4e6976bd3ef06dda9c36e25b6f" translate="yes" xml:space="preserve">
          <source>Drops the last element of a &lt;code&gt;List&lt;/code&gt;. The list is to be non-empty, otherwise the function crashes with a &lt;code&gt;function_clause&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List&lt;/code&gt; の最後の要素を削除します。リストは空ではありません。空でない場合、関数はfunction_clauseでクラッシュし &lt;code&gt;function_clause&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7cc89c1203fd6f662ab09bafe6724b5d26d8fe8d" translate="yes" xml:space="preserve">
          <source>Drops usage of the latin1 atom encoding and unconditionally use utf8 encoding for all atoms. This will be changed to the default in a future major release of Erlang/OTP. Erlang/OTP systems as of R16B can decode this representation.</source>
          <target state="translated">latin1のアトムエンコーディングを削除し、すべてのアトムに無条件でutf8エンコーディングを使うようになりました。これはErlang/OTPの将来のメジャーリリースでデフォルトに変更される予定です。R16Bの時点でのErlang/OTPシステムはこの表現をデコードすることができます。</target>
        </trans-unit>
        <trans-unit id="6da6b942d555f9de8c518f3adfc3e33593613231" translate="yes" xml:space="preserve">
          <source>Due to a known bug in the underlying zlib library, &lt;code&gt;WindowBits&lt;/code&gt; values 8 and -8 do not work as expected. In zlib versions before 1.2.9 values 8 and -8 are automatically changed to 9 and -9. &lt;strong&gt;From zlib version 1.2.9 value -8 is rejected&lt;/strong&gt; causing &lt;code&gt;zlib:deflateInit/6&lt;/code&gt; to fail (8 is still changed to 9). It also seem possible that future versions of zlib may fix this bug and start accepting 8 and -8 as is.</source>
          <target state="translated">基礎となるzlibライブラリの既知のバグのため、 &lt;code&gt;WindowBits&lt;/code&gt; 値8および-8は期待どおりに機能しません。 1.2.9より前のバージョンのzlibでは、値8および-8は自動的に9および-9に変更されます。&lt;strong&gt;zlibバージョン1.2.9以降、値-8が拒否され&lt;/strong&gt;、 &lt;code&gt;zlib:deflateInit/6&lt;/code&gt; が失敗します（8は引き続き9に変更されます）。また、zlibの将来のバージョンでこのバグが修正され、8と-8がそのまま受け入れられるようになる可能性もあります。</target>
        </trans-unit>
        <trans-unit id="2822bca8453c024a99d2e74a4a983430ebe051e4" translate="yes" xml:space="preserve">
          <source>Due to irregular naming conventions, some cipher names in the old api are substitued by new names in the new api. For a list of retired names, see &lt;code&gt;Retired cipher names&lt;/code&gt;.</source>
          <target state="translated">不規則な命名規則により、古いAPIの一部の暗号名は、新しいAPIの新しい名前に置き換えられます。廃止された名前のリストについては、廃止された &lt;code&gt;Retired cipher names&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d53965dff14f4c80f0cc877167f2591ff39df7af" translate="yes" xml:space="preserve">
          <source>Due to the above, pull requests are only accepted on the &lt;code&gt;maint&lt;/code&gt; and the &lt;code&gt;master&lt;/code&gt; branches in our &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp&quot;&gt;git repository&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;maint&lt;/code&gt; branch contains changes planned for the next &lt;code&gt;&lt;a href=&quot;versions#releases_and_patches&quot;&gt;maintenance patch package&lt;/a&gt;&lt;/code&gt; on the latest OTP release and the &lt;code&gt;master&lt;/code&gt; branch contain changes planned for the upcoming OTP release.</source>
          <target state="translated">上記のため、プルリクエストは &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp&quot;&gt;git repository&lt;/a&gt;&lt;/code&gt; &lt;code&gt;maint&lt;/code&gt; ブランチと &lt;code&gt;master&lt;/code&gt; ブランチでのみ受け入れられます。 &lt;code&gt;maint&lt;/code&gt; ブランチは次のために計画の変更が含ま &lt;code&gt;&lt;a href=&quot;versions#releases_and_patches&quot;&gt;maintenance patch package&lt;/a&gt;&lt;/code&gt; の最新OTPのリリースにと &lt;code&gt;master&lt;/code&gt; ブランチを今後のOTPのリリースで計画変更が含まれています。</target>
        </trans-unit>
        <trans-unit id="e660da5a81bd948d3a902e014b76d86f2073ccc5" translate="yes" xml:space="preserve">
          <source>Due to the specific event handlers, the output format slightly differed from other log events.</source>
          <target state="translated">特定のイベントハンドラのため、出力形式が他のログイベントと若干異なります。</target>
        </trans-unit>
        <trans-unit id="3b3085bf736f2191e0ea07d229bfdc596b32d81d" translate="yes" xml:space="preserve">
          <source>Due to this, it impossible to list in documentation what algorithms that are available in a certain installation.</source>
          <target state="translated">このため、特定のインストールで利用可能なアルゴリズムをドキュメントに記載することができません。</target>
        </trans-unit>
        <trans-unit id="ca23fb39635657b375eb678fc3b116eafb204f3f" translate="yes" xml:space="preserve">
          <source>Dump All Data from EPMD</source>
          <target state="translated">EPMDからすべてのデータをダンプ</target>
        </trans-unit>
        <trans-unit id="ce420c0f0f57998f7dfd12f03c2f66c6e5fb8dfe" translate="yes" xml:space="preserve">
          <source>Dump support for registries in erl_interface.</source>
          <target state="translated">erl_interfaceのレジストリのサポートをダンプ。</target>
        </trans-unit>
        <trans-unit id="1f4861e7450b77c73b64988357d50c9f18f21437" translate="yes" xml:space="preserve">
          <source>Dump the call graph into the specified file whose format is determined by the filename extension. Supported extensions are: &lt;code&gt;raw&lt;/code&gt;, &lt;code&gt;dot&lt;/code&gt;, and &lt;code&gt;ps&lt;/code&gt;. If something else is used as filename extension, default format &lt;code&gt;.raw&lt;/code&gt; is used.</source>
          <target state="translated">コールグラフを、ファイル名拡張子によって形式が決定される指定されたファイルにダンプします。サポートされる拡張機能は、 &lt;code&gt;raw&lt;/code&gt; 、 &lt;code&gt;dot&lt;/code&gt; 、および &lt;code&gt;ps&lt;/code&gt; です。ファイル名の拡張子として別のものが使用されている場合は、デフォルトのフォーマット &lt;code&gt;.raw&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="7184caff176c543302376cf7fec1ce54dda7f0ad" translate="yes" xml:space="preserve">
          <source>Dump the mib-server data to &lt;code&gt;stdio&lt;/code&gt; (Destination = &lt;code&gt;io&lt;/code&gt;) or the specified file.</source>
          <target state="translated">mib-serverデータを &lt;code&gt;stdio&lt;/code&gt; （Destination = &lt;code&gt;io&lt;/code&gt; ）または指定されたファイルにダンプします。</target>
        </trans-unit>
        <trans-unit id="b43f288c439d0cc70ad21f7402ed35ef10441966" translate="yes" xml:space="preserve">
          <source>Dumping tables</source>
          <target state="translated">ダンピングテーブル</target>
        </trans-unit>
        <trans-unit id="0e499b1b81d04e4a0963798172f050c39de889ef" translate="yes" xml:space="preserve">
          <source>Dumps a set of &lt;code&gt;ram_copies&lt;/code&gt; tables to disc. The next time the system is started, these tables are initiated with the data found in the files that are the result of this dump. None of the tables can have disc-resident replicas.</source>
          <target state="translated">&lt;code&gt;ram_copies&lt;/code&gt; テーブルのセットをディスクにダンプします。次にシステムが起動したときに、これらのテーブルは、このダンプの結果であるファイル内で見つかったデータを使用して開始されます。ディスクに常駐するレプリカを持つテーブルはありません。</target>
        </trans-unit>
        <trans-unit id="618d5bf84eb8eca747b739ce93060fbefb9445fd" translate="yes" xml:space="preserve">
          <source>Dumps all local tables of a Mnesia system into a text file, which can be edited (by a normal text editor) and then be reloaded with &lt;code&gt;mnesia:load_textfile/1&lt;/code&gt;. Only use this function for educational purposes. Use other functions to deal with real backups.</source>
          <target state="translated">Mnesiaシステムのすべてのローカルテーブルをテキストファイルにダンプします。テキストファイルは（通常のテキストエディターで）編集でき、 &lt;code&gt;mnesia:load_textfile/1&lt;/code&gt; で再ロードできます。この機能は教育目的でのみ使用してください。他の機能を使用して、実際のバックアップを処理します。</target>
        </trans-unit>
        <trans-unit id="2352588b3802464c989b95a72e96df7dfb9c6a62" translate="yes" xml:space="preserve">
          <source>Dumps table &lt;code&gt;Tab&lt;/code&gt; to file &lt;code&gt;Filename&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Tab&lt;/code&gt; をファイル &lt;code&gt;Filename&lt;/code&gt; にダンプします。</target>
        </trans-unit>
        <trans-unit id="64618333cf2b9688dec82445992bc0cf066f76aa" translate="yes" xml:space="preserve">
          <source>Dumps the contents of a registry to a &lt;code&gt;Mnesia&lt;/code&gt; table in an atomic manner, that is, either all data or no data is updated. If any errors are encountered while backing up the data, the entire operation is aborted.</source>
          <target state="translated">レジストリの内容をアトミックな方法で &lt;code&gt;Mnesia&lt;/code&gt; テーブルにダンプします。つまり、すべてのデータを更新するか、データを更新しないかのどちらかです。データのバックアップ中にエラーが発生した場合、操作全体が中止されます。</target>
        </trans-unit>
        <trans-unit id="381fbf5f76a0f53fc2e4740d2ab79b2103d820ba" translate="yes" xml:space="preserve">
          <source>Dumps the current display to a text file.</source>
          <target state="translated">現在の表示をテキストファイルにダンプします。</target>
        </trans-unit>
        <trans-unit id="be9c5accb485dc0af7b5ea90f3fd262da4a6064d" translate="yes" xml:space="preserve">
          <source>Dumps the current microstate statistics counters to a file that can be parsed with &lt;code&gt; file:consult/1&lt;/code&gt;.</source>
          <target state="translated">現在のマイクロステート統計カウンターを、 &lt;code&gt; file:consult/1&lt;/code&gt; で解析できるファイルにダンプします。</target>
        </trans-unit>
        <trans-unit id="bf5d48b8bd681f58ec639f6849aa1f7b2833bc07" translate="yes" xml:space="preserve">
          <source>Dumps the current microstate statistics counters to a file that can be parsed with &lt;code&gt;file:consult/1&lt;/code&gt;.</source>
          <target state="translated">現在のマイクロステート統計カウンターを &lt;code&gt;file:consult/1&lt;/code&gt; で解析できるファイルにダンプします。</target>
        </trans-unit>
        <trans-unit id="ce3c464e1eb2b91ec8a590cec1b8615bf230f5fd" translate="yes" xml:space="preserve">
          <source>Duplicate keys are allowed in matching and match each pattern associated to the keys:</source>
          <target state="translated">マッチングでは、キーの重複が許可され、キーに関連付けられた各パターンにマッチします。</target>
        </trans-unit>
        <trans-unit id="6d0d7bffffa2a241910a42a63e36f337c3babbe2" translate="yes" xml:space="preserve">
          <source>Duployan</source>
          <target state="translated">Duployan</target>
        </trans-unit>
        <trans-unit id="74dd08678521bd750ecafbc34a117a08ebb03272" translate="yes" xml:space="preserve">
          <source>Durability</source>
          <target state="translated">Durability</target>
        </trans-unit>
        <trans-unit id="d87dba077b41e186992c67cc1c5d9b2114870c66" translate="yes" xml:space="preserve">
          <source>During OTP adaptation it was tested on:</source>
          <target state="translated">OTP適応時にはテストされました。</target>
        </trans-unit>
        <trans-unit id="c602387b4583b4dcd026c20a3a1e8e7bf61738f3" translate="yes" xml:space="preserve">
          <source>During VM execution, code is accessed through a number of data structures. These &lt;strong&gt;code access structures&lt;/strong&gt; are</source>
          <target state="translated">VMの実行中、コードはいくつかのデータ構造を介してアクセスされます。これらの&lt;strong&gt;コードアクセス構造&lt;/strong&gt;は</target>
        </trans-unit>
        <trans-unit id="fc319898536d39c91dbdba24fb8261626c9c368d" translate="yes" xml:space="preserve">
          <source>During decoding, the &lt;code&gt;b&lt;/code&gt; field of the record gets the decoded value of the &lt;code&gt;b&lt;/code&gt; component, if present, otherwise the value &lt;code&gt;asn1_NOVALUE&lt;/code&gt;.</source>
          <target state="translated">デコード中、レコードの &lt;code&gt;b&lt;/code&gt; フィールドは、 &lt;code&gt;b&lt;/code&gt; コンポーネントのデコードされた値を取得します（存在する場合 &lt;code&gt;asn1_NOVALUE&lt;/code&gt; 。それ以外の場合は、値asn1_NOVALUEを取得します。</target>
        </trans-unit>
        <trans-unit id="5902a6cefe9cb9c77a6268f9ff9e2f539dc55d82" translate="yes" xml:space="preserve">
          <source>During development of test suites, make no assumptions on the execution order of the test cases or suites. For example, a test case must not assume that a server it depends on is already started by a previous test case. Reasons for this follows:</source>
          <target state="translated">テストスイートの開発中は、テストケースやスイートの実行順序を想定してはいけません。例えば、テストケースは、依存するサーバが前のテストケースによって既に起動されていることを想定してはいけません。その理由は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a18568484e447163575693c3283eebfe40833924" translate="yes" xml:space="preserve">
          <source>During development, this implementation was tested on:</source>
          <target state="translated">開発中に、この実装をテストしました。</target>
        </trans-unit>
        <trans-unit id="60d0badad83e33a80707cc8700ad85c090cff46a" translate="yes" xml:space="preserve">
          <source>During evaluation of a function, no calls can be made to local functions. An undefined function error would be generated. However, the optional argument &lt;code&gt;LocalFunctionHandler&lt;/code&gt; can be used to define a function that is called when there is a call to a local function. The argument can have the following formats:</source>
          <target state="translated">関数の評価中は、ローカル関数を呼び出すことはできません。未定義の関数エラーが生成されます。ただし、オプションの引数 &lt;code&gt;LocalFunctionHandler&lt;/code&gt; を使用して、ローカル関数が呼び出されたときに呼び出される関数を定義できます。引数の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="7e943e84a017c01c905cb5e4d5d51f8602aca5de" translate="yes" xml:space="preserve">
          <source>During execution of tests started with &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;, the Erlang shell process, controlling &lt;code&gt;stdin&lt;/code&gt;, remains the top-level process of the &lt;code&gt;Common Test&lt;/code&gt; system of processes. Consequently, the Erlang shell is not available for interaction during the test run. If this is not desirable, for example, because the shell is needed for debugging purposes or for interaction with the SUT during test execution, set start option &lt;code&gt;release_shell&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; (in the call to &lt;code&gt;ct:run_test/1&lt;/code&gt; or by using the corresponding test specification term, described later). This makes &lt;code&gt;Common Test&lt;/code&gt; release the shell immediately after the test suite compilation stage. To accomplish this, a test runner process is spawned to take control of the test execution. The effect is that &lt;code&gt;ct:run_test/1&lt;/code&gt; returns the pid of this process rather than the test result, which instead is printed to tty at the end of the test run.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; で開始されたテストの実行中、 &lt;code&gt;stdin&lt;/code&gt; を制御するErlangシェルプロセスは、プロセスの &lt;code&gt;Common Test&lt;/code&gt; システムの最上位プロセスのままです。したがって、Erlangシェルは、テスト実行中の対話には使用できません。これが望ましくない場合、たとえば、デバッグの目的で、またはテスト実行中のSUTとの対話にシェルが必要であるため、開始オプション &lt;code&gt;release_shell&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します（ &lt;code&gt;ct:run_test/1&lt;/code&gt; への呼び出しで、または対応するテスト仕様を使用して）用語、後述）。これは &lt;code&gt;Common Test&lt;/code&gt; テストスイートのコンパイル段階の直後にシェルを解放します。これを実現するために、テストランナープロセスが生成され、テストの実行を制御します。その結果、 &lt;code&gt;ct:run_test/1&lt;/code&gt; は、テスト結果ではなく、このプロセスのpidを返します。代わりに、テスト実行の最後にttyに出力されます。</target>
        </trans-unit>
        <trans-unit id="13400d5db5a1edd12b574982f7247626a4d1afa8" translate="yes" xml:space="preserve">
          <source>During finalization, the time offset is adjusted and fixed so that current Erlang system time aligns with the current OS system time. As the time offset can change during the finalization, Erlang system time can do a time warp at this point. The time offset is from now on fixed until the runtime system terminates. If time correction has been enabled, the time correction from now on also makes adjustments to align Erlang system time with OS system time. When the system is in the final phase, it behaves exactly as in &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイナライズ中に、現在のErlangシステム時刻が現在のOSシステム時刻と一致するように、時間オフセットが調整および修正されます。時間オフセットはファイナライズ中に変更される可能性があるため、Erlangシステム時間はこの時点でタイムワープを実行できます。時間オフセットは、ランタイムシステムが終了するまで固定されます。時刻修正が有効になっている場合は、今後、時刻修正によってErlangシステム時刻とOSシステム時刻を合わせるための調整も行われます。システムが最終フェーズにある場合 &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; まったく同じように動作します。</target>
        </trans-unit>
        <trans-unit id="b5ae35332de729b88634ea8fa41480ea60f856d4" translate="yes" xml:space="preserve">
          <source>During high load scenarios, the length of the handler message queue rarely grows in a linear and predictable way. Instead, whenever the handler process is scheduled in, it can have an almost arbitrary number of messages waiting in the message queue. It is for this reason that the overload protection mechanism is focused on acting quickly, and quite drastically, such as immediately dropping or flushing messages, when a large queue length is detected.</source>
          <target state="translated">高負荷のシナリオでは、ハンドラメッセージキューの長さが直線的で予測可能な方法で成長することはほとんどありません。その代わり、ハンドラプロセスがスケジューリングされているときはいつでも、メッセージキューで待っているメッセージの数がほぼ任意の数になることがあります。過負荷保護メカニズムが、大きなキュー長が検出されたときに、即座にメッセージを削除したりフラッシュしたりするなど、迅速かつかなり劇的に行動することに焦点を当てているのは、このような理由からです。</target>
        </trans-unit>
        <trans-unit id="7aee45b439d948d5b7d76272a33b0c86bf4997e8" translate="yes" xml:space="preserve">
          <source>During model testing, the first test results in &lt;code&gt;{badmatch,16}&lt;/code&gt; in &lt;code&gt;{toy,start,1}&lt;/code&gt;, why?</source>
          <target state="translated">モデルテスト中、最初のテストの結果は &lt;code&gt;{toy,start,1}&lt;/code&gt; &lt;code&gt;{badmatch,16}&lt;/code&gt; になります。なぜですか？</target>
        </trans-unit>
        <trans-unit id="455e439587f82803aed60d48bf6da00489a0f0b5" translate="yes" xml:space="preserve">
          <source>During release handling, non-affected processes continue normal execution. This can lead to time-outs or other problems. For example, new processes created in the time window between suspending processes using a certain module, and loading a new version of this module, can execute old code.</source>
          <target state="translated">リリース処理中、影響を受けないプロセスは通常の実行を継続します。これにより、タイムアウトなどの問題が発生する可能性があります。例えば、特定のモジュールを使用してプロセスを中断してから、このモジュールの新しいバージョンをロードするまでの間に作成された新しいプロセスは、古いコードを実行する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c18e5c5d63b2a2373e5f2ba0870a87b60d5f9fcf" translate="yes" xml:space="preserve">
          <source>During runtime, Logger configuration is changed via API functions. See section &lt;code&gt;&lt;a href=&quot;logger#configuration_API&quot;&gt;Configuration API Functions&lt;/a&gt;&lt;/code&gt; in the &lt;code&gt;logger(3)&lt;/code&gt; manual page.</source>
          <target state="translated">実行時に、ロガー構成はAPI関数を介して変更されます。セクションを参照してください &lt;code&gt;&lt;a href=&quot;logger#configuration_API&quot;&gt;Configuration API Functions&lt;/a&gt;&lt;/code&gt; 中に &lt;code&gt;logger(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="379217a163897fd309c000e61bde6b6a65a2d7a3" translate="yes" xml:space="preserve">
          <source>During the lifetime of a socket, the file descriptor &lt;strong&gt;has&lt;/strong&gt; to remain the same. That is, repeated calls to this callback with the same context &lt;code&gt;should&lt;/code&gt; always report the same file descriptor.</source>
          <target state="translated">ソケットの存続期間中、ファイル記述子&lt;strong&gt;は&lt;/strong&gt;同じままである必要があります。これは、同じ文脈で、このコールバックへの呼び出しを繰り返している &lt;code&gt;should&lt;/code&gt; 、常に同じファイルディスクリプタを報告しています。</target>
        </trans-unit>
        <trans-unit id="5f4912b2aa75fe22c51b1c959d8391db7589b749" translate="yes" xml:space="preserve">
          <source>During the lifetime of a socket, the pointer &lt;code&gt;*ctx&lt;/code&gt;&lt;strong&gt;has&lt;/strong&gt; to remain the same. That is, it cannot later be relocated.</source>
          <target state="translated">ソケットの存続期間中、ポインター &lt;code&gt;*ctx&lt;/code&gt; &lt;strong&gt;は&lt;/strong&gt;同じままである必要があります。つまり、後で再配置することはできません。</target>
        </trans-unit>
        <trans-unit id="20bc30338e4de5739d661e0625d9f9d24eeca0b3" translate="yes" xml:space="preserve">
          <source>During the start of a system, when a client application &lt;strong&gt;could&lt;/strong&gt; start prior to the SNMP manager but is dependent upon it, and therefor has to wait for it to start.</source>
          <target state="translated">システムの起動時に、クライアントアプリケーション&lt;strong&gt;が&lt;/strong&gt; SNMPマネージャーの前に起動&lt;strong&gt;できたが&lt;/strong&gt;、SNMPマネージャーに依存しているため、起動するまで待機する必要がある場合。</target>
        </trans-unit>
        <trans-unit id="6fcbdddd017956cd0019e350d24a1939cbcd022e" translate="yes" xml:space="preserve">
          <source>During use of a port opened using &lt;code&gt;{spawn, Name}&lt;/code&gt;, &lt;code&gt;{spawn_driver, Name}&lt;/code&gt;, or &lt;code&gt;{spawn_executable, Name}&lt;/code&gt;, errors arising when sending messages to it are reported to the owning process using signals of the form &lt;code&gt;{'EXIT', Port, PosixCode}&lt;/code&gt;. For the possible values of &lt;code&gt;PosixCode&lt;/code&gt;, see &lt;code&gt;file(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{spawn, Name}&lt;/code&gt; 、 &lt;code&gt;{spawn_driver, Name}&lt;/code&gt; 、または &lt;code&gt;{spawn_executable, Name}&lt;/code&gt; を使用して開いたポートの使用中に、ポートにメッセージを送信するときに発生したエラーは、 &lt;code&gt;{'EXIT', Port, PosixCode}&lt;/code&gt; 形式のシグナルを使用して所有プロセスに報告されます、PosixCode}。 &lt;code&gt;PosixCode&lt;/code&gt; の可能な値については、 &lt;code&gt;file(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b34f8bde4114e100ca5b54c517844199b48657fc" translate="yes" xml:space="preserve">
          <source>Dynamic Erlang Driver Linking</source>
          <target state="translated">ダイナミックなErlangドライバのリンク</target>
        </trans-unit>
        <trans-unit id="a44067361315b05c273ea0405f7864e1bd1bf576" translate="yes" xml:space="preserve">
          <source>Dynamic driver loader and linker.</source>
          <target state="translated">動的なドライバローダとリンカ。</target>
        </trans-unit>
        <trans-unit id="8d5b8175b7f2d3d1d7c21e7c0e5bbee352f3bc51" translate="yes" xml:space="preserve">
          <source>Dynamic node name. This is not a capability but rather used as a request from the connecting node to receive its node name from the accepting node as part of the handshake.</source>
          <target state="translated">動的ノード名。これはケイパビリティではなく、接続ノードがハンドシェイクの一部として受け入れノードからそのノード名を受け取るためのリクエストとして使用されます。</target>
        </trans-unit>
        <trans-unit id="d13cc2f7953cdc9f758c18be9f7b8a02412bfdd7" translate="yes" xml:space="preserve">
          <source>Dynamic reconfiguration</source>
          <target state="translated">動的再構成</target>
        </trans-unit>
        <trans-unit id="13aa9a50086b6ac76b1cb8c6f3e9af0f9dba8709" translate="yes" xml:space="preserve">
          <source>Dynamic version detection</source>
          <target state="translated">動的バージョン検出</target>
        </trans-unit>
        <trans-unit id="8c2f2c4c8b8adb6ccd5249a4e952ee59713af7b6" translate="yes" xml:space="preserve">
          <source>Dynamically adds a child specification to supervisor &lt;code&gt;SupRef&lt;/code&gt;, which starts the corresponding child process.</source>
          <target state="translated">子仕様をスーパーバイザー &lt;code&gt;SupRef&lt;/code&gt; に動的に追加し、対応する子プロセスを開始します。</target>
        </trans-unit>
        <trans-unit id="d3ec976f32b93a40ffe278626358ad5300808f4e" translate="yes" xml:space="preserve">
          <source>Dynamically load an engine from default directory</source>
          <target state="translated">デフォルトのディレクトリからエンジンを動的にロード</target>
        </trans-unit>
        <trans-unit id="fdde27315f8fe4afa9c39d16385e94b637fcfb0c" translate="yes" xml:space="preserve">
          <source>Dynamically loaded into the Erlang machines address space, which is the only alternative if a precompiled version of Erlang is to be used</source>
          <target state="translated">Erlangマシンのアドレス空間に動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="47cb4a6e83f17f59d314ef1f01f8353a46aca8ff" translate="yes" xml:space="preserve">
          <source>Dynamically started services are not handled by application takeover and failover behavior when &lt;code&gt;Inets&lt;/code&gt; is run as a distributed application. Nor are they automatically restarted when the &lt;code&gt;Inets&lt;/code&gt; application is restarted. As long as the &lt;code&gt;Inets&lt;/code&gt; application is operational, they are supervised and can be soft code upgraded.</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; が分散アプリケーションとして実行されている場合、動的に開始されるサービスは、アプリケーションのテイクオーバーとフェイルオーバーの動作によって処理されません。また、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションの再起動時に自動的に再起動されることもありません。 &lt;code&gt;Inets&lt;/code&gt; アプリケーションが動作している限り、監視され、ソフトコードをアップグレードできます。</target>
        </trans-unit>
        <trans-unit id="36f230b8bfa12c208281cb0fc0f2a5f1622391c2" translate="yes" xml:space="preserve">
          <source>Dynamically starts an &lt;code&gt;FTP&lt;/code&gt; session after the &lt;code&gt;ftp&lt;/code&gt; application has been started.</source>
          <target state="translated">&lt;code&gt;ftp&lt;/code&gt; アプリケーションが開始された後、動的に &lt;code&gt;FTP&lt;/code&gt; セッションを開始します。</target>
        </trans-unit>
        <trans-unit id="1096e1dba137c5f15869f0236240de198946ed71" translate="yes" xml:space="preserve">
          <source>Dynamically starts an &lt;code&gt;Inets&lt;/code&gt; service after the &lt;code&gt;Inets&lt;/code&gt; application has been started.</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; アプリケーションが開始された後、 &lt;code&gt;Inets&lt;/code&gt; サービスを動的に開始します。</target>
        </trans-unit>
        <trans-unit id="3be880303bce628299b41c673e201ce5941eb9d6" translate="yes" xml:space="preserve">
          <source>Dynamically updates the compression level and compression strategy. The interpretation of &lt;code&gt;Level&lt;/code&gt; and &lt;code&gt;Strategy&lt;/code&gt; is as in &lt;code&gt;&lt;a href=&quot;#deflateInit-6&quot;&gt;deflateInit/6&lt;/a&gt;&lt;/code&gt;. This can be used to switch between compression and straight copy of the input data, or to switch to a different kind of input data requiring a different strategy. If the compression level is changed, the input available so far is compressed with the old level (and can be flushed); the new level takes effect only at the next call of &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">圧縮レベルと圧縮戦略を動的に更新します。 &lt;code&gt;Level&lt;/code&gt; と &lt;code&gt;Strategy&lt;/code&gt; の解釈は &lt;code&gt;&lt;a href=&quot;#deflateInit-6&quot;&gt;deflateInit/6&lt;/a&gt;&lt;/code&gt; と同じです。これを使用して、入力データの圧縮と直接コピーを切り替えるか、別の方法を必要とする別の種類の入力データに切り替えることができます。圧縮レベルが変更された場合、これまでに使用可能な入力は古いレベルで圧縮されます（フラッシュすることもできます）。新しいレベルは、 &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt; の次の呼び出しでのみ有効になります。</target>
        </trans-unit>
        <trans-unit id="2ff063a21bc0ed86e6a4e8962b8993962632c55d" translate="yes" xml:space="preserve">
          <source>ECDSA</source>
          <target state="translated">ECDSA</target>
        </trans-unit>
        <trans-unit id="80e3d524de972452501598eb804f71534022451d" translate="yes" xml:space="preserve">
          <source>ECDSA is available with OpenSSL 0.9.8o or later if not disabled by configuration. To dynamically check availability, check that the atom &lt;code&gt;ecdsa&lt;/code&gt; is present in the list returned by &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt;. If the atom &lt;code&gt;ec_gf2m&lt;/code&gt; also is present, the characteristic two field curves are available.</source>
          <target state="translated">ECDSAは、構成によって無効にされていない場合、OpenSSL0.9.8o以降で使用できます。可用性を動的にチェックするには、 &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt; によって返されるリストにアトム &lt;code&gt;ecdsa&lt;/code&gt; が存在することを確認します。原子 &lt;code&gt;ec_gf2m&lt;/code&gt; も存在する場合、特徴的な2つのフィールド曲線を使用できます。</target>
        </trans-unit>
        <trans-unit id="0ebc0a5394d8ebbe656f6c55943154c331bf1d57" translate="yes" xml:space="preserve">
          <source>EEP 40 suggests that the language is also to allow for Unicode characters &amp;gt; 255 in variable names. Whether to implement that EEP is yet to be decided.</source>
          <target state="translated">EEP 40は、言語が変数名で255を超えるUnicode文字を許可することも示唆しています。そのEEPを実装するかどうかはまだ決定されていません。</target>
        </trans-unit>
        <trans-unit id="db5d4c5f39084ed8a98f2f308319f6fc3f3fec69" translate="yes" xml:space="preserve">
          <source>ERL Scheme</source>
          <target state="translated">ERLスキーム</target>
        </trans-unit>
        <trans-unit id="778ad9b263b62197707df5c99c6055f019a776e0" translate="yes" xml:space="preserve">
          <source>ERTS</source>
          <target state="translated">ERTS</target>
        </trans-unit>
        <trans-unit id="084c82f27172e39caac8b32a5c5a3de227cdada9" translate="yes" xml:space="preserve">
          <source>ERTS 5.9 introduced two new integer types, &lt;code&gt;&lt;a href=&quot;#ErlDrvSizeT&quot;&gt;ErlDrvSizeT&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#ErlDrvSSizeT&quot;&gt;ErlDrvSSizeT&lt;/a&gt;&lt;/code&gt;, which can hold 64-bit sizes if necessary.</source>
          <target state="translated">ERTS 5.9では、必要に応じて64ビットサイズを保持できる &lt;code&gt;&lt;a href=&quot;#ErlDrvSizeT&quot;&gt;ErlDrvSizeT&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#ErlDrvSSizeT&quot;&gt;ErlDrvSSizeT&lt;/a&gt;&lt;/code&gt; の 2つの新しい整数型が導入されました。</target>
        </trans-unit>
        <trans-unit id="85dc1296e2947a844efb66d65438ec8b2ad8252a" translate="yes" xml:space="preserve">
          <source>ERTS User's Guide</source>
          <target state="translated">ERTSユーザーズガイド</target>
        </trans-unit>
        <trans-unit id="44f592d8979778308c2fb81544db747d809abcc9" translate="yes" xml:space="preserve">
          <source>ERTS version the release is intended for.</source>
          <target state="translated">リリースが対象としているERTSのバージョン。</target>
        </trans-unit>
        <trans-unit id="b612ad3744b82b6590ec2ed7801b6b4e71c44b19" translate="yes" xml:space="preserve">
          <source>ERTS/erl_driver</source>
          <target state="translated">ERTS/erl_driver</target>
        </trans-unit>
        <trans-unit id="c73f4aaaa252f5447d44e10d202890c287a9dd79" translate="yes" xml:space="preserve">
          <source>ERTS/erl_nif</source>
          <target state="translated">ERTS/erl_nif</target>
        </trans-unit>
        <trans-unit id="6dba289d5b794a18ff5aa78141b1611e24fd604f" translate="yes" xml:space="preserve">
          <source>ERTS/erl_prim_loader</source>
          <target state="translated">ERTS/erl_prim_loader</target>
        </trans-unit>
        <trans-unit id="003545865b7dee179c081e0d8ec83daa48033c14" translate="yes" xml:space="preserve">
          <source>ERTS/erl_tracer</source>
          <target state="translated">ERTS/erl_tracer</target>
        </trans-unit>
        <trans-unit id="207651703485ebb3590aa930b3610f9237b9b992" translate="yes" xml:space="preserve">
          <source>ERTS/erlang</source>
          <target state="translated">ERTS/erlang</target>
        </trans-unit>
        <trans-unit id="b64df6cef05617dfbd4d20c2d8b1cc669b3edfb0" translate="yes" xml:space="preserve">
          <source>ERTS/init</source>
          <target state="translated">ERTS/init</target>
        </trans-unit>
        <trans-unit id="95d08dc392df8636331cdbdbd25742c1d876eac5" translate="yes" xml:space="preserve">
          <source>ERTS/zlib</source>
          <target state="translated">ERTS/zlib</target>
        </trans-unit>
        <trans-unit id="4ecfa2773154e370fba9b018a43ed42a95f19d49" translate="yes" xml:space="preserve">
          <source>ESI</source>
          <target state="translated">ESI</target>
        </trans-unit>
        <trans-unit id="4bfaf341d88c4cc708fd53de2a4d0b2f36cb3596" translate="yes" xml:space="preserve">
          <source>ESI Callback Functions</source>
          <target state="translated">ESIコールバック関数</target>
        </trans-unit>
        <trans-unit id="7eceb14d6ed554f3e39c3487db659c8d63e28acd" translate="yes" xml:space="preserve">
          <source>ETS</source>
          <target state="translated">ETS</target>
        </trans-unit>
        <trans-unit id="535109603d1d3983bd1504d46e58246d0b9b5c5b" translate="yes" xml:space="preserve">
          <source>ETS match specifications produce a return value. Usually the &lt;code&gt;MatchBody&lt;/code&gt; contains one single &lt;code&gt;ConditionExpression&lt;/code&gt; that defines the return value without any side effects. Calls with side effects are not allowed in the ETS context.</source>
          <target state="translated">ETS一致仕様は戻り値を生成します。通常、 &lt;code&gt;MatchBody&lt;/code&gt; には、副作用なしで戻り値を定義する1つの &lt;code&gt;ConditionExpression&lt;/code&gt; が含まれています。副作用のある呼び出しは、ETSコンテキストでは許可されていません。</target>
        </trans-unit>
        <trans-unit id="46b5844c30f17802c3dbe2a6160c75fb2768d9bb" translate="yes" xml:space="preserve">
          <source>EUnit builds on ideas from the family of unit testing frameworks for Object Oriented languages that originated with JUnit by Beck and Gamma (and Beck's previous framework SUnit for Smalltalk). However, EUnit uses techniques more adapted to functional and concurrent programming, and is typically less verbose than its relatives.</source>
          <target state="translated">EUnit は、Beck と Gamma による JUnit (および Beck の以前のフレームワークである SUnit for Smalltalk)を基にしたオブジェクト指向言語用のユニットテストフレームワークをベースにしています。しかし、EUnit は機能的なプログラミングや並行プログラミングに適応した技術を使用しており、一般的にはその親戚のものよりも冗長ではありません。</target>
        </trans-unit>
        <trans-unit id="bb84cfb674cc9c07befa3e836772f6d49451b0b9" translate="yes" xml:space="preserve">
          <source>EUnit is a unit testing framework for Erlang. It is very powerful and flexible, is easy to use, and has small syntactical overhead.</source>
          <target state="translated">EUnitはErlangのためのユニットテストフレームワークです。非常に強力で柔軟性があり、使いやすく、構文的なオーバーヘッドも少ないです。</target>
        </trans-unit>
        <trans-unit id="dcb5c9416725af47e0dde86a44e3726fa172542f" translate="yes" xml:space="preserve">
          <source>EVAL Scheme</source>
          <target state="translated">エバールスキーム</target>
        </trans-unit>
        <trans-unit id="e986cd2e713da6eeece44cdc6f88d025029df261" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL support in &lt;code&gt;Common Test&lt;/code&gt; for calling property-based tests.</source>
          <target state="translated">プロパティベースの &lt;code&gt;Common Test&lt;/code&gt; を呼び出すためのCommon Testの実験的サポート。</target>
        </trans-unit>
        <trans-unit id="3535800729023232937a5a75329edb6d668dc3ac" translate="yes" xml:space="preserve">
          <source>EXPERIMENTAL support in Common Test for calling property-based tests.</source>
          <target state="translated">プロパティベースのテストを呼び出すために、Common TestでEXPERIMENTALがサポートされました。</target>
        </trans-unit>
        <trans-unit id="d179ef076d3ba549c1eaefd6c4000085c521b739" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;-spec&lt;/code&gt; contract is to be a subtype of the respective &lt;code&gt;-callback&lt;/code&gt; contract.</source>
          <target state="translated">各 &lt;code&gt;-spec&lt;/code&gt; 契約は、それぞれの &lt;code&gt;-callback&lt;/code&gt; 契約のサブタイプになります。</target>
        </trans-unit>
        <trans-unit id="bbeba8f50a6d88947fa61a1c562fdec9908b5f80" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;&lt;a href=&quot;#cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; is included in some strongly connected component, which implies that a &lt;code&gt;&lt;a href=&quot;#topsort&quot;&gt;topological ordering&lt;/a&gt;&lt;/code&gt; of the created digraph always exists.</source>
          <target state="translated">各 &lt;code&gt;&lt;a href=&quot;#cycle&quot;&gt;cycle&lt;/a&gt;&lt;/code&gt; は、強く関連するコンポーネントに含まれています。これは、作成されたダイグラフの &lt;code&gt;&lt;a href=&quot;#topsort&quot;&gt;topological ordering&lt;/a&gt;&lt;/code&gt; が常に存在することを意味します。</target>
        </trans-unit>
        <trans-unit id="b91672b8b9d9c1074d5c3616da5bbe87be145768" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver use &lt;strong&gt;literally&lt;/strong&gt; the same pathname for the driver when demanding load, but the &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; are not concerned with if the driver is already loaded from the file system or if the object code must be loaded from file system.</source>
          <target state="translated">ドライバーの各 &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; は、ロードを要求するときに&lt;strong&gt;文字通り&lt;/strong&gt;同じドライバーのパス名を使用し &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; が、ドライバーがファイルシステムから既にロードされているかどうか、またはオブジェクトコードをファイルシステムからロードする必要があるかどうかは関係ありません。</target>
        </trans-unit>
        <trans-unit id="4b7b0c5e0a6ab9f7071cc3d4509396575aab0f1b" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Application&lt;/code&gt; (atom) and &lt;code&gt;AppVsn&lt;/code&gt; is the name and version of an application included in the release. The minimal release based on Erlang/OTP consists of the Kernel and STDLIB applications, so these applications must be included in the list.</source>
          <target state="translated">各 &lt;code&gt;Application&lt;/code&gt; （アトム）と &lt;code&gt;AppVsn&lt;/code&gt; は、リリースに含まれているアプリケーションの名前とバージョンです。Erlang / OTPに基づく最小リリースは、カーネルお​​よびSTDLIBアプリケーションで構成されているため、これらのアプリケーションをリストに含める必要があります。</target>
        </trans-unit>
        <trans-unit id="756a2cbaa3819961fd2a604970deabef7e47b59c" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;DownToVsn&lt;/code&gt; is a previous version of the application to downgrade to.</source>
          <target state="translated">各 &lt;code&gt;DownToVsn&lt;/code&gt; は、ダウングレードするアプリケーションの以前のバージョンです。</target>
        </trans-unit>
        <trans-unit id="00de80a9bd6be23947f13b18c11247e44b2c0111" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Instructions&lt;/code&gt; is a list of release handling instructions.</source>
          <target state="translated">各 &lt;code&gt;Instructions&lt;/code&gt; は、リリース処理手順のリストです。</target>
        </trans-unit>
        <trans-unit id="cc4e66320e4a665094adabc03dbd562a3b958289" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Opt&lt;/code&gt; is a tuple &lt;code&gt;{Key,Value}&lt;/code&gt;, which define a certain property of the application. All keys are optional. Default values are used for any omitted keys.</source>
          <target state="translated">各 &lt;code&gt;Opt&lt;/code&gt; は、アプリケーションの特定のプロパティを定義するタプル &lt;code&gt;{Key,Value}&lt;/code&gt; です。すべてのキーはオプションです。省略されたキーにはデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="12aba37f1fd213ff8df833310991e7fddad7fb81" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;Opt&lt;/code&gt; is a tuple &lt;code&gt;{Key,Value}&lt;/code&gt;, which defines a certain property of the application. All keys are optional. Default values are used for any omitted keys.</source>
          <target state="translated">各 &lt;code&gt;Opt&lt;/code&gt; はタプル &lt;code&gt;{Key,Value}&lt;/code&gt; であり、アプリケーションの特定のプロパティを定義します。すべてのキーはオプションです。省略されたキーにはデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="481b5fd9f4ed559d8d313890de73dd0798ebaefc" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;UpFromVsn&lt;/code&gt; is a previous version of the application to upgrade from.</source>
          <target state="translated">各 &lt;code&gt;UpFromVsn&lt;/code&gt; は、アップグレード元のアプリケーションの以前のバージョンです。</target>
        </trans-unit>
        <trans-unit id="67d62d9c347c69602abcb833f8f9c4300f1c4701" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;declaration&lt;/code&gt; or &lt;code&gt;rule&lt;/code&gt; ends with a dot (the character &lt;code&gt;'.'&lt;/code&gt;).</source>
          <target state="translated">各 &lt;code&gt;declaration&lt;/code&gt; または &lt;code&gt;rule&lt;/code&gt; は、ドット（文字 &lt;code&gt;'.'&lt;/code&gt; ）で終わります。</target>
        </trans-unit>
        <trans-unit id="65770ef193425908bddd8a2670963b17addf7cbb" translate="yes" xml:space="preserve">
          <source>Each &lt;code&gt;vacmViewTreeFamilyViewName&lt;/code&gt; refers to a collection of sub-trees.</source>
          <target state="translated">各 &lt;code&gt;vacmViewTreeFamilyViewName&lt;/code&gt; は、サブツリーのコレクションを参照します。</target>
        </trans-unit>
        <trans-unit id="5ed7282900bb5fdbff5958dd466870a2cefa9c4c" translate="yes" xml:space="preserve">
          <source>Each CPU will be specified separately (assuming this information can be retrieved from the operating system), that is, a list with one &lt;code&gt;UtilDesc&lt;/code&gt; per CPU will be returned.</source>
          <target state="translated">各CPUは個別に指定されます（この情報がオペレーティングシステムから取得できる場合）、つまり、CPUごとに1 つの &lt;code&gt;UtilDesc&lt;/code&gt; を持つリストが返されます。</target>
        </trans-unit>
        <trans-unit id="34310bfb92de50fb3fdb84c9be6468f58c6dd477" translate="yes" xml:space="preserve">
          <source>Each Diameter application defined on a service is configured with a callback module that implements the &lt;code&gt;application interface&lt;/code&gt; through which diameter communicates the connectivity of remote peers, requests peer selection for outgoing requests, and communicates the reception of incoming Diameter request and answer messages. An application using diameter implements these application callback modules to provide the functionality of the Diameter node(s) it implements.</source>
          <target state="translated">サービスで定義された各Diameterアプリケーションは、diameterがリモートピアの接続を通信し、発信要求のピア選択を要求し、着信Diameter要求と応答メッセージの受信を通信する &lt;code&gt;application interface&lt;/code&gt; を実装するコールバックモジュールで構成されます。Diameterを使用するアプリケーションは、これらのアプリケーションコールバックモジュールを実装して、実装するDiameterノードの機能を提供します。</target>
        </trans-unit>
        <trans-unit id="55244236933611821163d373997b240e1ad6204a" translate="yes" xml:space="preserve">
          <source>Each Diameter application is also configured with a dictionary module that provide encode/decode functionality for outgoing/incoming Diameter messages belonging to the application. A dictionary module is generated from a &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;dictionary file&lt;/a&gt;&lt;/code&gt; using the &lt;code&gt;&lt;a href=&quot;diameterc&quot;&gt;diameterc&lt;/a&gt;&lt;/code&gt; utility. Dictionaries for the RFC 6733 Diameter Common Messages, Base Accounting and Relay applications are provided with the diameter application.</source>
          <target state="translated">各Diameterアプリケーションには、アプリケーションに属する発信/着信Diameterメッセージのエンコード/デコード機能を提供する辞書モジュールも設定されています。辞書モジュールは、 &lt;code&gt;&lt;a href=&quot;diameterc&quot;&gt;diameterc&lt;/a&gt;&lt;/code&gt; ユーティリティを使用して &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;dictionary file&lt;/a&gt;&lt;/code&gt; から生成されます。 RFC 6733 Diameter共通メッセージ、基本アカウンティング、およびリレーアプリケーションの辞書は、diameterアプリケーションとともに提供されます。</target>
        </trans-unit>
        <trans-unit id="a1a9b6fe619d4d507768382269489dfde40d427b" translate="yes" xml:space="preserve">
          <source>Each Erlang process has its own stack and heap which are allocated in the same memory block and grow towards each other. When the stack and the heap &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/beam_emu.c#L387&quot;&gt;meet&lt;/a&gt;&lt;/code&gt;, the garbage collector is triggered and memory is reclaimed. If not enough memory was reclaimed, the heap will grow.</source>
          <target state="translated">各Erlangプロセスには独自のスタックとヒープがあり、これらは同じメモリブロックに割り当てられ、互いに向かって成長します。スタックとヒープが &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/beam_emu.c#L387&quot;&gt;meet&lt;/a&gt;&lt;/code&gt; と、ガベージコレクターがトリガーされ、メモリが再利用されます。十分なメモリが回収されなかった場合、ヒープは大きくなります。</target>
        </trans-unit>
        <trans-unit id="8b240e5a20e54b9eb0bd09de0e35e15bc9e2fc55" translate="yes" xml:space="preserve">
          <source>Each Logger handler has a configured formatter specified as a module and a configuration term. The purpose of the formatter is to translate the log events to a final printable string (&lt;code&gt;unicode:chardata() &lt;/code&gt;) which can be written to the output device of the handler. See sections &lt;code&gt;&lt;a href=&quot;logger_chapter#handlers&quot;&gt;Handlers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger_chapter#formatters&quot;&gt;Formatters&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide for more information.</source>
          <target state="translated">各ロガーハンドラーには、モジュールおよび構成用語として指定された構成済みフォーマッターがあります。フォーマッタの目的は、ログイベントを、ハンドラの出力デバイスに書き込むことができる最終的な印刷可能な文字列（ &lt;code&gt;unicode:chardata() &lt;/code&gt; ）に変換することです。詳細については、 『カーネルユーザーズガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter#handlers&quot;&gt;Handlers&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;logger_chapter#formatters&quot;&gt;Formatters&lt;/a&gt;&lt;/code&gt; 」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b9eadf73a0c0284009b59a288825d06c68918732" translate="yes" xml:space="preserve">
          <source>Each Logger handler has a configured formatter specified as a module and a configuration term. The purpose of the formatter is to translate the log events to a final printable string (&lt;code&gt;unicode:chardata()&lt;/code&gt;) which can be written to the output device of the handler. See sections &lt;code&gt;&lt;a href=&quot;logger_chapter#handlers&quot;&gt;Handlers&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger_chapter#formatters&quot;&gt;Formatters&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide for more information.</source>
          <target state="translated">各ロガーハンドラーには、モジュールおよび構成用語として指定された構成済みフォーマッターがあります。フォーマッタの目的は、ログイベントを、ハンドラの出力デバイスに書き込むことができる最終的な印刷可能な文字列（ &lt;code&gt;unicode:chardata()&lt;/code&gt; ）に変換することです。詳細については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter#handlers&quot;&gt;Handlers&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;logger_chapter#formatters&quot;&gt;Formatters&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="5a2217ea4fb630dde08bc31f8f4df9f225a8d461" translate="yes" xml:space="preserve">
          <source>Each MIB is contained in one application. The MIB text files are stored under &lt;code&gt;mibs/&amp;lt;MIB&amp;gt;.mib&lt;/code&gt; in the application directory. The generated &lt;code&gt;.hrl&lt;/code&gt; files with constant declarations are stored under &lt;code&gt;include/&amp;lt;MIB&amp;gt;.hrl&lt;/code&gt;, and the compiled MIBs are stored under &lt;code&gt;priv/mibs/&amp;lt;MIB&amp;gt;.bin&lt;/code&gt;.</source>
          <target state="translated">各MIBは1つのアプリケーションに含まれています。MIBテキストファイルは、アプリケーションディレクトリの &lt;code&gt;mibs/&amp;lt;MIB&amp;gt;.mib&lt;/code&gt; に保存されます。定数宣言で生成された &lt;code&gt;.hrl&lt;/code&gt; ファイル &lt;code&gt;include/&amp;lt;MIB&amp;gt;.hrl&lt;/code&gt; に保存され、コンパイルされたMIBは &lt;code&gt;priv/mibs/&amp;lt;MIB&amp;gt;.bin&lt;/code&gt; に保存されます。</target>
        </trans-unit>
        <trans-unit id="f596e5edca19c4fb206995b44af1186fe1cc57ca" translate="yes" xml:space="preserve">
          <source>Each MIB is contained in one application. The MIB text files are stored under &lt;code&gt;mibs/&amp;lt;MIB&amp;gt;.mib&lt;/code&gt; in the application directory. The generated &lt;code&gt;.hrl&lt;/code&gt; files with constant declarations are stored under &lt;code&gt;include/&amp;lt;MIB&amp;gt;.hrl&lt;/code&gt;, and the compiled MIBs are stored under &lt;code&gt;priv/mibs/&amp;lt;MIB&amp;gt;.bin&lt;/code&gt;. For example, the &lt;code&gt;OTP-MIB&lt;/code&gt; is included in the SASL application:</source>
          <target state="translated">各MIBは1つのアプリケーションに含まれています。MIBテキストファイルは、アプリケーションディレクトリの &lt;code&gt;mibs/&amp;lt;MIB&amp;gt;.mib&lt;/code&gt; に保存されます。定数宣言を &lt;code&gt;include/&amp;lt;MIB&amp;gt;.hrl&lt;/code&gt; 生成された &lt;code&gt;.hrl&lt;/code&gt; ファイルはinclude / &amp;lt;MIB&amp;gt; .hrlに格納され、コンパイルされたMIBは &lt;code&gt;priv/mibs/&amp;lt;MIB&amp;gt;.bin&lt;/code&gt; に格納されます。たとえば、 &lt;code&gt;OTP-MIB&lt;/code&gt; はSASLアプリケーションに含まれています。</target>
        </trans-unit>
        <trans-unit id="9402652033c3052c1ef00f2688bbca891d3a41f8" translate="yes" xml:space="preserve">
          <source>Each NIF must have an implementation in Erlang to be invoked if the function is called before the NIF library is successfully loaded. A typical such stub implementation is to call &lt;code&gt;&lt;a href=&quot;erlang#nif_error-1&quot;&gt; erlang:nif_error&lt;/a&gt;&lt;/code&gt; which will raise an exception. The Erlang function can also be used as a fallback implementation if the NIF library lacks implementation for some OS or hardware architecture for example.</source>
          <target state="translated">NIFライブラリが正常にロードされる前に関数が呼び出された場合に呼び出されるには、各NIFにErlangの実装が必要です。典型的なそのようなスタブの実装は、例外を発生させる &lt;code&gt;&lt;a href=&quot;erlang#nif_error-1&quot;&gt; erlang:nif_error&lt;/a&gt;&lt;/code&gt; を呼び出すことです。Erlang関数は、たとえばNIFライブラリに一部のOSまたはハードウェアアーキテクチャの実装がない場合のフォールバック実装としても使用できます。</target>
        </trans-unit>
        <trans-unit id="96c9a5aa6202f44778f708491759e58be7229aa8" translate="yes" xml:space="preserve">
          <source>Each OAM component in OTP is implemented as one sub-application, which can be included in a management application for the system. Notice that such a complete management application is not in the scope of this generic functionality. However, this section includes examples illustrating how such an application can be built.</source>
          <target state="translated">OTP の各 OAM コンポーネントは、1 つのサブアプリケーションとして実装され、システムの管理アプリケーションに含めることができます。このような完全な管理アプリケーションは、この一般的な機能の範囲外であることに注意してください。しかし、このセクションでは、そのようなアプリケーションをどのように構築することができるかを例示しています。</target>
        </trans-unit>
        <trans-unit id="c6f070d243c99f1d0073b04e83aa5a92016f0467" translate="yes" xml:space="preserve">
          <source>Each Object Identifier (OID) is made up of a table name and a key. For example, if an employee record is represented by the tuple &lt;code&gt;{employee, 104732, klacke, 7, male, 98108, {221, 015}}&lt;/code&gt;, this record has an OID, which is the tuple &lt;code&gt;{employee, 104732}&lt;/code&gt;.</source>
          <target state="translated">各オブジェクト識別子（OID）は、テーブル名とキーで構成されています。たとえば、従業員レコードがタプル &lt;code&gt;{employee, 104732, klacke, 7, male, 98108, {221, 015}}&lt;/code&gt; 場合、このレコードにはOIDがあり、これはタプル &lt;code&gt;{employee, 104732}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="407a711f08b93a1ab121c3edfb578a68342eed52" translate="yes" xml:space="preserve">
          <source>Each SSH client or daemon presents themselves to each other with brand and version. This may look like</source>
          <target state="translated">それぞれの SSH クライアントやデーモンは、お互いにブランドとバージョンを提示します。これは次のように見えます。</target>
        </trans-unit>
        <trans-unit id="19d3a9c7f3953415557107b9a4fed3fe829f6388" translate="yes" xml:space="preserve">
          <source>Each Xref server is referred to by a unique name. The name is given when creating the server:</source>
          <target state="translated">各 Xref サーバは一意の名前で参照されます。この名前はサーバを作成する際に与えられます。</target>
        </trans-unit>
        <trans-unit id="305e27dbe27580eb3422e180a4b909efd7529202" translate="yes" xml:space="preserve">
          <source>Each allocator instance keeps track of the current utilization of its multi-block carriers. When the total utilization falls below the &quot;abandon carrier utilization limit&quot; it starts to inspect the utilization of the current carrier when deallocations are made. If also the utilization of the carrier falls below the &quot;abandon carrier utilization limit&quot; it unlinks the carrier from its data structure of available free blocks and inserts the carrier into the pool.</source>
          <target state="translated">各アロケータインスタンスは、そのマルチブロックキャリアの現在の利用率を追跡する。総利用率が「放棄されたキャリアの利用率制限」を下回ると、デアロケートが行われたときに現在のキャリアの利用率の検査を開始します。キャリアの利用率が「放棄されたキャリアの利用率制限」を下回った場合、キャリアを利用可能な空きブロックのデータ構造からリンクを解除し、そのキャリアをプールに挿入します。</target>
        </trans-unit>
        <trans-unit id="55f7fd00c871ae23ab70f17a8c5addef99b7eb4f" translate="yes" xml:space="preserve">
          <source>Each breakpoint has a &lt;strong&gt;trigger action&lt;/strong&gt; that specifies what is to happen when a process has reached it (and stopped):</source>
          <target state="translated">各ブレークポイントには、プロセスが到達して停止したときに何が起こるかを指定する&lt;strong&gt;トリガーアクション&lt;/strong&gt;があります。</target>
        </trans-unit>
        <trans-unit id="74b7aaf3eab007c9a636fe0aee9104cf045a98ec" translate="yes" xml:space="preserve">
          <source>Each carrier has an atomic word containing a pointer to the employing allocator instance and three bit flags; IN_POOL, BUSY and HOMECOMING.</source>
          <target state="translated">各キャリアは、使用するアロケータインスタンスへのポインタと、IN_POOL、BUSY、HOMECOMINGの3つのビットフラグを含むアトミックワードを持っています。</target>
        </trans-unit>
        <trans-unit id="37cf7b36c1772164368bfd9e88986c528dd6631f" translate="yes" xml:space="preserve">
          <source>Each certificate in the certificate chain is issued by the previous one.</source>
          <target state="translated">証明書チェーンの各証明書は、前の証明書によって発行されます。</target>
        </trans-unit>
        <trans-unit id="69b524a56767c5a464e26aa46fb5fd446cb873ad" translate="yes" xml:space="preserve">
          <source>Each channel is an isolated &quot;pipe&quot; between a client-side process and a server-side process. Thoose process pairs could handle for example file transfers (sftp) or remote command execution (shell, exec and/or cli). If a custom shell is implemented, the user of the client could execute the special commands remotely. Note that the user is not necessarily a human but probably a system interfacing the SSH app.</source>
          <target state="translated">各チャネルは、クライアント側プロセスとサーバ側プロセスの間の分離された「パイプ」です。これらのプロセスペアは、例えばファイル転送(sftp)やリモートコマンド実行(shell,exec および/または cli)を処理することができます。カスタムシェルが実装されている場合、クライアントのユーザがリモートで特別なコマンドを実行することができます。ユーザは必ずしも人間とは限りませんが、おそらくは SSH アプリに接続するシステムであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dfca402560954e5b142511c310fe441400c48117" translate="yes" xml:space="preserve">
          <source>Each channel is an isolated &quot;pipe&quot; between a client-side process and a server-side process. Those process pairs could handle for example file transfers (sftp) or remote command execution (shell, exec and/or cli). If a custom shell is implemented, the user of the client could execute the special commands remotely. Note that the user is not necessarily a human but probably a system interfacing the SSH app.</source>
          <target state="translated">各チャネルは、クライアント側プロセスとサーバ側プロセスの間の分離された「パイプ」です。これらのプロセスペアは、例えばファイル転送(sftp)やリモートコマンド実行(shell,exec および/または cli)を処理することができます。カスタムシェルが実装されている場合、クライアントのユーザがリモートで特別なコマンドを実行することができます。ユーザは必ずしも人間とは限りませんが、おそらくは SSH アプリに接続するシステムであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ab979cd854906b4b575e775a64fa69a8a251b961" translate="yes" xml:space="preserve">
          <source>Each character has exactly one Unicode general category property, specified by a two-letter acronym. For compatibility with Perl, negation can be specified by including a circumflex between the opening brace and the property name. For example, \p{^Lu} is the same as \P{Lu}.</source>
          <target state="translated">各キャラクタは、2 文字の頭字語で指定された Unicode 一般カテゴリプロパティを正確に 1 つ持ちます。Perlとの互換性のために、開中括弧とプロパティ名の間に円弧を含めることで否定を指定することができます。例えば、\p{^Lu}は、\P{Lu}と同じです。</target>
        </trans-unit>
        <trans-unit id="ee28d4558757e9383cb566bdb9b21b23482e6efe" translate="yes" xml:space="preserve">
          <source>Each character in the entry's name and value that cannot be expressed using the selected character encoding, is replaced by a string consisting of a U+0026 AMPERSAND character (&amp;amp;), a &quot;#&quot; (U+0023) character, one or more ASCII digits representing the Unicode code point of the character in base ten, and finally a &quot;;&quot; (U+003B) character.</source>
          <target state="translated">選択した文字エンコーディングを使用して表現できないエントリの名前と値の各文字は、U + 0026 AMPERSAND文字（＆）、 &quot;＃&quot;（U + 0023）文字、1つ以上のASCIIで構成される文字列に置き換えられます10進数の文字のUnicodeコードポイントを表す数字、最後に「;」（U + 003B）文字。</target>
        </trans-unit>
        <trans-unit id="4e32cc8ee72e653d2a8bc902dfb063ec8881e171" translate="yes" xml:space="preserve">
          <source>Each character is stored in one to four bytes depending on code point. The encoding is backward compatible with bytewise representation of 7-bit ASCII, as all 7-bit characters are stored in one single byte in UTF-8. The characters beyond code point 127 are stored in more bytes, letting the most significant bit in the first character indicate a multi-byte character. For details on the encoding, the RFC is publicly available.</source>
          <target state="translated">各文字はコードポイントに応じて1~4バイトで格納されます。すべての 7 ビ ッ ト 文字が UTF-8 の 1 バ イ ト に格納 さ れてい る ので、 エン コ ーデ ィ ン グは 7 ビ ッ ト ASCII の 1 バ イ ト 単位での表現 と 互換性があ り ます。コ ー ド ポ イ ン ト 127 を超え る キ ャ ラ ク タ は、 先頭キ ャ ラ ク タ の最上位ビ ッ ト がマルチバ イ ト キ ャ ラ ク タ を示す よ う に、 よ り 多 く のバ イ ト 単位で格納 さ れます。エンコーディングの詳細については、RFCが公開されています。</target>
        </trans-unit>
        <trans-unit id="4fc3cbdbc904d26469c742d8bcc9d626c6068c21" translate="yes" xml:space="preserve">
          <source>Each client and server in &lt;code&gt;Inets&lt;/code&gt; is viewed as a service. Services can be configured to be started at application startup or dynamically in runtime. To run &lt;code&gt;Inets&lt;/code&gt; as a distributed application that handles application failover and takeover, configure the services to be started at application startup. When starting the &lt;code&gt;Inets&lt;/code&gt; application, the &lt;code&gt;Inets&lt;/code&gt; top supervisor starts a number of subsupervisors and worker processes for handling the provided services. When starting services dynamically, new children are added to the supervision tree, unless the service is started with the standalone option. In this case the service is linked to the calling process and all OTP application features, such as soft upgrade, are lost.</source>
          <target state="translated">&lt;code&gt;Inets&lt;/code&gt; の各クライアントとサーバーはサービスとして表示されます。サービスは、アプリケーションの起動時に、または実行時に動的に開始するように構成できます。アプリケーションのフェイルオーバーとテイクオーバーを処理する分散アプリケーションとして &lt;code&gt;Inets&lt;/code&gt; を実行するには、アプリケーションの起動時にサービスが開始されるように構成します。 &lt;code&gt;Inets&lt;/code&gt; アプリケーションを開始すると、 &lt;code&gt;Inets&lt;/code&gt; トップスーパーバイザは、提供されたサービスを処理するための多数のサブスーパーバイザとワーカープロセスを開始します。サービスを動的に開始すると、サービスがスタンドアロンオプションで開始されない限り、新しい子が監視ツリーに追加されます。この場合、サービスは呼び出しプロセスにリンクされ、ソフトアップグレードなどのすべてのOTPアプリケーション機能が失われます。</target>
        </trans-unit>
        <trans-unit id="ea67a6cd5709298d77de8bb9187376f1a4c88dd1" translate="yes" xml:space="preserve">
          <source>Each connection may have its own configuration of callback modules, re-send timers, transaction id ranges etc. and they may be re-configured on-the-fly.</source>
          <target state="translated">各接続は、コールバックモジュール、再送タイマー、トランザクションIDの範囲などを独自に設定し、その場で再設定することができます。</target>
        </trans-unit>
        <trans-unit id="20dd79dc25ece038d84ac0a232d7057d3f1bdbf6" translate="yes" xml:space="preserve">
          <source>Each directory in the path to the requested asset is searched for an access file (default is &lt;code&gt;.htaccess&lt;/code&gt;), which restricts the web servers rights to respond to a request. If an access file is found, the rules in that file is applied to the request.</source>
          <target state="translated">リクエストされたアセットへのパスにある各ディレクトリでアクセスファイルが検索され（デフォルトは &lt;code&gt;.htaccess&lt;/code&gt; ）、リクエストに応答するWebサーバーの権限が制限されます。アクセスファイルが見つかると、そのファイルのルールがリクエストに適用されます。</target>
        </trans-unit>
        <trans-unit id="b25bd9fdb05a15b59ad44d21195b54cd7e275826" translate="yes" xml:space="preserve">
          <source>Each driver instance is associated with a port. Every port has a port owner process. Communication with the port is normally done through the port owner process. Most of the functions take the &lt;code&gt;port&lt;/code&gt; handle as an argument. This identifies the driver instance. Notice that this port handle must be stored by the driver, it is not given when the driver is called from the emulator (see &lt;code&gt;&lt;a href=&quot;driver_entry#emulator&quot;&gt; driver_entry&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">各ドライバーインスタンスはポートに関連付けられています。すべてのポートには、ポート所有者プロセスがあります。ポートとの通信は通常、ポート所有者プロセスを通じて行われます。ほとんどの関数は、 &lt;code&gt;port&lt;/code&gt; ハンドルを引数として取ります。これにより、ドライバーインスタンスが識別されます。このポートハンドルはドライバーによって保存される必要があることに注意してください。エミュレーターからドライバーが呼び出されたときに指定されません（ &lt;code&gt;&lt;a href=&quot;driver_entry#emulator&quot;&gt; driver_entry&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="2e833d3f6d71147154bc1a01e9a0319de7a5932f" translate="yes" xml:space="preserve">
          <source>Each driver instance is associated with a port. Every port has a port owner process. Communication with the port is normally done through the port owner process. Most of the functions take the &lt;code&gt;port&lt;/code&gt; handle as an argument. This identifies the driver instance. Notice that this port handle must be stored by the driver, it is not given when the driver is called from the emulator (see &lt;code&gt;&lt;a href=&quot;driver_entry#emulator&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">各ドライバインスタンスはポートに関連付けられています。すべてのポートにはポート所有者プロセスがあります。ポートとの通信は通常、ポート所有者プロセスを通じて行われます。ほとんどの関数は、引数として &lt;code&gt;port&lt;/code&gt; ハンドルを取ります。これは、ドライバーのインスタンスを識別します。このポートハンドルはドライバーによって格納される必要があることに注意してください。エミュレーターからドライバーが呼び出された場合は指定されません（ &lt;code&gt;&lt;a href=&quot;driver_entry#emulator&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="56bbcc2fd8950bda744a20f900b28a4f1c7248c3" translate="yes" xml:space="preserve">
          <source>Each element &lt;code&gt;Ei&lt;/code&gt; specifies a &lt;strong&gt;segment&lt;/strong&gt; of the bit string. Each element &lt;code&gt;Ei&lt;/code&gt; is a value, followed by an optional &lt;strong&gt;size expression&lt;/strong&gt; and an optional &lt;strong&gt;type specifier list&lt;/strong&gt;.</source>
          <target state="translated">各要素 &lt;code&gt;Ei&lt;/code&gt; は、ビット文字列の&lt;strong&gt;セグメント&lt;/strong&gt;を指定します。各要素 &lt;code&gt;Ei&lt;/code&gt; は値であり、その後にオプションの&lt;strong&gt;サイズ式&lt;/strong&gt;とオプションの&lt;strong&gt;タイプ指定子リストが&lt;/strong&gt;続き&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="003d91a46f3f2bb18a1d90076a666cbaafc26e27" translate="yes" xml:space="preserve">
          <source>Each element specifies a certain &lt;strong&gt;segment&lt;/strong&gt; of the bitstring. A segment is a set of contiguous bits of the binary (not necessarily on a byte boundary). The first element specifies the initial segment, the second element specifies the following segment, and so on.</source>
          <target state="translated">各要素は、ビット文字列の特定の&lt;strong&gt;セグメント&lt;/strong&gt;を指定します。セグメントは、バイナリの連続するビットのセットです（バイト境界にある必要はありません）。最初の要素は最初のセグメントを指定し、2番目の要素は次のセグメントを指定します。</target>
        </trans-unit>
        <trans-unit id="5dc571d2da8f66291be308f1e1c565752924414f" translate="yes" xml:space="preserve">
          <source>Each employee works on a number of projects, hence the &lt;code&gt;in_proj&lt;/code&gt; relationship.</source>
          <target state="translated">各従業員はいくつかのプロジェクトに取り組んでいるため、 &lt;code&gt;in_proj&lt;/code&gt; 関係にあります。</target>
        </trans-unit>
        <trans-unit id="94646e4e155f2a1439c478997cfa6928f0711fd2" translate="yes" xml:space="preserve">
          <source>Each entry in the resulting list contains the following corresponding information about the program forms:</source>
          <target state="translated">結果として得られるリストの各エントリには、プログラムフォームに関する以下の対応する情報が含まれている。</target>
        </trans-unit>
        <trans-unit id="864db500c08a498afdb397e4ebfd890146597d0d" translate="yes" xml:space="preserve">
          <source>Each entry is a term:</source>
          <target state="translated">各エントリは用語です。</target>
        </trans-unit>
        <trans-unit id="70625b8b976b15fa4bf08d632aae581c8cb53c9f" translate="yes" xml:space="preserve">
          <source>Each entry is a tuple of size four:</source>
          <target state="translated">各エントリはサイズ4のタプルです。</target>
        </trans-unit>
        <trans-unit id="ef1dcdb71453a9f45d4f9107238b7424b3b3c1cb" translate="yes" xml:space="preserve">
          <source>Each entry is a tuple of size two:</source>
          <target state="translated">各エントリはサイズ2のタプルです。</target>
        </trans-unit>
        <trans-unit id="a06e8aaaa5386a6a92b409b8c6444e276227cb07" translate="yes" xml:space="preserve">
          <source>Each entry is a tuple:</source>
          <target state="translated">各エントリはタプルです。</target>
        </trans-unit>
        <trans-unit id="d485e82d6d63995f59c4df6b1bc20bfb19eec6ff" translate="yes" xml:space="preserve">
          <source>Each entry is one of the terms, one entry corresponds to one row in one of the tables.</source>
          <target state="translated">各エントリは用語の1つであり、1つのエントリはテーブルの1つの行に対応しています。</target>
        </trans-unit>
        <trans-unit id="4b7bb37e8a1565d711f264425424279d0037ae37" translate="yes" xml:space="preserve">
          <source>Each event handler is implemented as a callback module exporting a predefined set of functions. The relationship between the behavior functions and the callback functions is as follows:</source>
          <target state="translated">各イベントハンドラは、定義済みの関数セットをエクスポートするコールバックモジュールとして実装されています。振る舞い関数とコールバック関数の関係は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d2b50254a125e7c325c0c24b3cf7ecc55cb97d9a" translate="yes" xml:space="preserve">
          <source>Each execution of a match specification is done against a match target term. The format and content of the target term depends on the context in which the match is done. The match target for ETS is always a full table tuple. The match target for call trace is always a list of all function arguments. The match target for event trace depends on the event type, see table below.</source>
          <target state="translated">マッチ指定の各実行は、マッチ対象語に対して行われます。ターゲットタームの形式と内容は、マッチが実行されるコンテキストに依存します。ETS のマッチ ターゲットは、常に完全なテーブル タプルです。呼び出しトレースのマッチ ターゲットは、常にすべての関数引数のリストです。イベント トレースのマッチ ターゲットは、イベント タイプに依存します。</target>
        </trans-unit>
        <trans-unit id="6e17c8755f13e7dc1db4b809ecd86d0b89dadb10" translate="yes" xml:space="preserve">
          <source>Each field in a record declaration can have an optional, explicit, default initializer expression, and an optional type.</source>
          <target state="translated">レコード宣言の各フィールドは、オプションで明示的なデフォルトのイニシャライザ式とオプションの型を持つことができます。</target>
        </trans-unit>
        <trans-unit id="35a4d77421dde7b897b30082bb04311e87287900" translate="yes" xml:space="preserve">
          <source>Each file in the list will be read and processed separately. For every file, each reference to some module M, such that there is an entry &lt;code&gt;{&amp;lt;em&amp;gt;M&amp;lt;/em&amp;gt;, &amp;lt;em&amp;gt;M1&amp;lt;/em&amp;gt;}&lt;/code&gt; in &lt;code&gt;Renamings&lt;/code&gt;, will be changed to the corresponding M1. Furthermore, if a file F defines module M, and there is an entry &lt;code&gt;{&amp;lt;em&amp;gt;M&amp;lt;/em&amp;gt;, &amp;lt;em&amp;gt;M1&amp;lt;/em&amp;gt;}&lt;/code&gt; in &lt;code&gt;Renamings&lt;/code&gt;, a new file named &lt;code&gt;&amp;lt;em&amp;gt;M1&amp;lt;/em&amp;gt;.erl&lt;/code&gt; will be created in the same directory as F, containing the source code for module M, renamed to M1. If M does not have an entry in &lt;code&gt;Renamings&lt;/code&gt;, the module is not renamed, only updated, and the resulting source code is written to &lt;code&gt;&amp;lt;em&amp;gt;M&amp;lt;/em&amp;gt;.erl&lt;/code&gt; (typically, this overwrites the original file). The &lt;code&gt;suffix&lt;/code&gt; option (see below) can be used to change the default &quot;&lt;code&gt;.erl&lt;/code&gt;&quot; suffix for the generated files.</source>
          <target state="translated">リスト内の各ファイルは個別に読み取られて処理されます。すべてのファイルのために、いくつかのモジュールMへの各参照は、エントリが存在するよう &lt;code&gt;{&amp;lt;em&amp;gt;M&amp;lt;/em&amp;gt;, &amp;lt;em&amp;gt;M1&amp;lt;/em&amp;gt;}&lt;/code&gt; で &lt;code&gt;Renamings&lt;/code&gt; は、対応するM1に変更されます。さらに、ファイルFがモジュールMを定義し、 &lt;code&gt;{&amp;lt;em&amp;gt;M&amp;lt;/em&amp;gt;, &amp;lt;em&amp;gt;M1&amp;lt;/em&amp;gt;}&lt;/code&gt; エントリ{&amp;lt;em&amp;gt; M &amp;lt;/ em&amp;gt;、&amp;lt;em&amp;gt; M1 &amp;lt;/ em&amp;gt;}がある場合、 &lt;code&gt;&amp;lt;em&amp;gt;M1&amp;lt;/em&amp;gt;.erl&lt;/code&gt; という &lt;code&gt;Renamings&lt;/code&gt; の新しいファイルになります。 erlはFと同じディレクトリに作成され、モジュールMのソースコードを含み、名前がM1に変更されます。 Mの &lt;code&gt;&amp;lt;em&amp;gt;M&amp;lt;/em&amp;gt;.erl&lt;/code&gt; エントリがない場合、モジュールの &lt;code&gt;Renamings&lt;/code&gt; は変更されず、更新のみが行われ、結果のソースコードは&amp;lt;em&amp;gt; M &amp;lt;/ em&amp;gt; .erlに書き込まれます（通常、これにより元のファイルが上書きされます）。の &lt;code&gt;suffix&lt;/code&gt; オプション（以下を参照）を使用して、生成されたファイルのデフォルトの「 &lt;code&gt;.erl&lt;/code&gt; 」サフィックスを変更できます。</target>
        </trans-unit>
        <trans-unit id="49eefe6dc97d048f34dac5cabf7a205b16b70416" translate="yes" xml:space="preserve">
          <source>Each filter set consists of a &lt;strong&gt;log level check&lt;/strong&gt;, followed by zero or more &lt;strong&gt;filter functions&lt;/strong&gt;.</source>
          <target state="translated">各フィルターセットは、&lt;strong&gt;ログレベルチェックと&lt;/strong&gt;、その後に続く0個以上の&lt;strong&gt;フィルター関数&lt;/strong&gt;で構成されます。</target>
        </trans-unit>
        <trans-unit id="a9677f896b4c452b2ab214f54b61495167737353" translate="yes" xml:space="preserve">
          <source>Each function takes the argument &lt;code&gt;NameDb&lt;/code&gt;, which is a tuple &lt;code&gt;{Name, Db}&lt;/code&gt;, to identify which database the functions should use. &lt;code&gt;Name&lt;/code&gt; is the symbolic name of the managed object as defined in the MIB, and &lt;code&gt;Db&lt;/code&gt; is either &lt;code&gt;volatile&lt;/code&gt;, &lt;code&gt;persistent&lt;/code&gt;, or &lt;code&gt;mnesia&lt;/code&gt;. If it is &lt;code&gt;mnesia&lt;/code&gt;, all variables are stored in the Mnesia table &lt;code&gt;snmp_variables&lt;/code&gt; which must be a table with two attributes (not a Mnesia SNMP table). The SNMP tables are stored in Mnesia tables with the same names as the SNMP tables. All functions assume that a Mnesia table exists with the correct name and attributes. It is the programmer's responsibility to ensure this. Specifically, if variables are stored in Mnesia, the table &lt;code&gt;snmp_variables&lt;/code&gt; must be created by the programmer. The record definition for this table is defined in the file &lt;code&gt;snmp/include/snmp_types.hrl&lt;/code&gt;.</source>
          <target state="translated">各関数はタプル &lt;code&gt;{Name, Db}&lt;/code&gt; である引数 &lt;code&gt;NameDb&lt;/code&gt; を取り、関数が使用するデータベースを識別します。 &lt;code&gt;Name&lt;/code&gt; は、MIBで定義された管理対象オブジェクトの記号名であり、 &lt;code&gt;Db&lt;/code&gt; は、 &lt;code&gt;volatile&lt;/code&gt; 、 &lt;code&gt;persistent&lt;/code&gt; 、または &lt;code&gt;mnesia&lt;/code&gt; のいずれかです。 &lt;code&gt;mnesia&lt;/code&gt; の場合、すべての変数はMnesiaテーブルの &lt;code&gt;snmp_variables&lt;/code&gt; に格納されますこれは、2つの属性を持つテーブルでなければなりません（Mnesia SNMPテーブルではありません）。SNMPテーブルは、SNMPテーブルと同じ名前のMnesiaテーブルに格納されます。すべての関数は、正しい名前と属性を持つMnesiaテーブルが存在することを前提としています。これを保証するのはプログラマの責任です。具体的には、変数がMnesiaに格納されている場合、テーブル &lt;code&gt;snmp_variables&lt;/code&gt; はプログラマーが作成する必要があります。このテーブルのレコード定義は、ファイル &lt;code&gt;snmp/include/snmp_types.hrl&lt;/code&gt; で定義されています。</target>
        </trans-unit>
        <trans-unit id="9c3a776596635896e94dd107e595da2486f16447" translate="yes" xml:space="preserve">
          <source>Each generic instruction has an opcode. The opcode is an integer, greater than or equal to 1. For an external generic instruction, it must be explicitly given &lt;code&gt;genop.tab&lt;/code&gt;, while internal generic instructions are automatically numbered by &lt;strong&gt;beam_makeops&lt;/strong&gt;.</source>
          <target state="translated">各汎用命令にはオペコードがあります。オペコードは1以上の整数です。外部ジェネリック命令の場合、明示的に &lt;code&gt;genop.tab&lt;/code&gt; を指定する必要がありますが、内部ジェネリック命令には、&lt;strong&gt;beam_makeops&lt;/strong&gt;によって自動的に番号が付けられ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="4c1190978962592425d6b4592ae603c7ba88ca4d" translate="yes" xml:space="preserve">
          <source>Each instance of &lt;code&gt;ErlNifResourceType&lt;/code&gt; represents a class of memory-managed resource objects that can be garbage collected. Each resource type has a unique name and a destructor function that is called when objects of its type are released.</source>
          <target state="translated">&lt;code&gt;ErlNifResourceType&lt;/code&gt; の各インスタンスは、ガベージコレクション可能なメモリ管理リソースオブジェクトのクラスを表します。各リソースタイプには一意の名前と、そのタイプのオブジェクトが解放されたときに呼び出されるデストラクタ関数があります。</target>
        </trans-unit>
        <trans-unit id="45e1ea35cab57f7ba717000c69e30acd0ba46d49" translate="yes" xml:space="preserve">
          <source>Each key part is 64 bits (in CBC mode only 8 bits are used)</source>
          <target state="translated">各キー部は64ビット(CBCモードでは8ビットのみ使用</target>
        </trans-unit>
        <trans-unit id="35103fefad295298276e9cfdc33729d99099ac1d" translate="yes" xml:space="preserve">
          <source>Each key-value association in the map is called an &lt;strong&gt;association pair&lt;/strong&gt;. The key and value parts of the pair are called &lt;strong&gt;elements&lt;/strong&gt;. The number of association pairs is said to be the &lt;strong&gt;size&lt;/strong&gt; of the map.</source>
          <target state="translated">マップ内の各キーと値の関連付けは、&lt;strong&gt;関連ペア&lt;/strong&gt;と呼ばれます。ペアのキーと値の部分は&lt;strong&gt;要素&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。関連ペアの数は、マップの&lt;strong&gt;サイズ&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="603c93584be31e061e41c3144cba0c9593d7cc4e" translate="yes" xml:space="preserve">
          <source>Each list element is copied only once. The growing result &lt;code&gt;Acc&lt;/code&gt; is the right operand for the &lt;code&gt;++&lt;/code&gt; operator, and it is &lt;strong&gt;not&lt;/strong&gt; copied.</source>
          <target state="translated">各リスト要素は一度だけコピーされます。増加する結果 &lt;code&gt;Acc&lt;/code&gt; は &lt;code&gt;++&lt;/code&gt; 演算子の正しいオペランドであり、コピーされ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="53cec8595242fffcee11b05ab4b26518e9f93ca7" translate="yes" xml:space="preserve">
          <source>Each managed object can exist in many instances within a SNMP entity. To identify the instances, specified by an MIB module, a method to distinguish the actual instance by its 'scope' or context is used. Often the context is a physical or a logical device. It can include multiple devices, a subset of a single device or a subset of multiple devices, but the context is always defined as a subset of a single SNMP entity. To be able to identify a specific item of management information within an SNMP entity, the context, the object type and its instance must be used.</source>
          <target state="translated">各管理対象オブジェクトは、SNMPエンティティ内に多数のインスタンスで存在することができます。MIBモジュールで指定されたインスタンスを識別するために、実際のインスタンスを「スコープ」またはコンテキストで区別する方法が使用されます。コンテキストは、物理デバイスまたは論理デバイスであることが多いです。複数のデバイス、単一のデバイスのサブセット、または複数のデバイスのサブセットを含むことができますが、コンテキストは常に単一のSNMPエンティティのサブセットとして定義されます。SNMPエンティティ内の管理情報の特定の項目を識別できるようにするには、コンテキスト、オブジェクトタイプ、およびそのインスタンスを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="19f263cbfb73620501381b721ea1278aa4679eb0" translate="yes" xml:space="preserve">
          <source>Each match spec in the file ends with a full stop (&lt;code&gt;.&lt;/code&gt;) and new (syntactically correct) match specifications can be added to the file manually.</source>
          <target state="translated">ファイル内の各一致仕様は、完全停止（ &lt;code&gt;.&lt;/code&gt; ）で終わり、新しい（構文的に正しい）一致仕様を手動でファイルに追加できます。</target>
        </trans-unit>
        <trans-unit id="452318e4e784ce1e7d0ad04612ebccef8576f3c0" translate="yes" xml:space="preserve">
          <source>Each megaco application maintains its own set of counters. So in a large (distributed) MG/MGC it could be necessary to collect the statistics from several nodes (each) running the megaco application (only one of them with the transport).</source>
          <target state="translated">各メガアプリケーションは、独自のカウンタセットを保持しています。そのため、大規模な(分散した)MG/MGCでは、メガアプリケーションを実行している複数のノード(それぞれ)から統計情報を収集する必要があるかもしれません(トランスポートを使用しているノードはそのうちの1つだけです)。</target>
        </trans-unit>
        <trans-unit id="4a78fbb6a60dc9e6fef3ef416e95740b3e7b0bfe" translate="yes" xml:space="preserve">
          <source>Each module that implements server functionality using the Erlang web server API is to implement the following call back functions:</source>
          <target state="translated">ErlangのWebサーバAPIを使ってサーバ機能を実装している各モジュールは、以下のコールバック関数を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="93853d05ce58ebbbdc0ba0d0956af3c6652ad3e5" translate="yes" xml:space="preserve">
          <source>Each name in &lt;code&gt;Element_List&lt;/code&gt; must be a constructed type except the last name, which can be any type.</source>
          <target state="translated">&lt;code&gt;Element_List&lt;/code&gt; の各名前は、姓を除く構成タイプである必要があります。姓は任意のタイプにすることができます。</target>
        </trans-unit>
        <trans-unit id="01165d972ec961ccac57f0f5b0159f2b826a6985" translate="yes" xml:space="preserve">
          <source>Each normal scheduler has one run queue that it manages. If dirty schedulers schedulers are supported, all dirty CPU schedulers share one run queue, and all dirty IO schedulers share one run queue. That is, we have multiple normal run queues, one dirty CPU run queue and one dirty IO run queue. Work can &lt;strong&gt;not&lt;/strong&gt; migrate between the different types of run queues. Only work in normal run queues can migrate to other normal run queues. This has to be taken into account when evaluating the result.</source>
          <target state="translated">通常の各スケジューラには、管理する実行キューが1つあります。ダーティスケジューラスケジューラがサポートされている場合、すべてのダーティCPUスケジューラは1つの実行キューを共有し、すべてのダーティIOスケジューラは1つの実行キューを共有します。つまり、複数の通常の実行キュー、1つのダーティCPU実行キューと1つのダーティIO実行キューがあります。異なるタイプの実行キュー間で作業を移行すること&lt;strong&gt;は&lt;/strong&gt;でき&lt;strong&gt;ません&lt;/strong&gt;。通常の実行キューでの作業のみが、他の通常の実行キューに移行できます。これは、結果を評価するときに考慮に入れる必要があります。</target>
        </trans-unit>
        <trans-unit id="353f12c04da0c03581d99ccf42ebe1a0217c5270" translate="yes" xml:space="preserve">
          <source>Each of the &lt;code&gt;...&lt;/code&gt; can be a &lt;code&gt;algs_list()&lt;/code&gt; as the argument to the &lt;code&gt;preferred_algorithms&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;...&lt;/code&gt; のそれぞれは、 &lt;code&gt;preferred_algorithms&lt;/code&gt; オプションの引数として &lt;code&gt;algs_list()&lt;/code&gt; にすることができます。</target>
        </trans-unit>
        <trans-unit id="d164e93e542a99949cf0db6b6c3b3b7a076d10ae" translate="yes" xml:space="preserve">
          <source>Each of the following examples shows a simple system configuration file that configures Logger according to the description.</source>
          <target state="translated">次の各例では、記述に従って Logger を設定する簡単なシステム設定ファイルを示しています。</target>
        </trans-unit>
        <trans-unit id="4dbc90fa1fdea3ab66bbf8b0c21d295490ffe46d" translate="yes" xml:space="preserve">
          <source>Each of the following macros takes a single &lt;code&gt;ETERM&lt;/code&gt; pointer as an argument. The macros return a non-zero value if the test is true, otherwise &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">以下の各マクロは、単一の &lt;code&gt;ETERM&lt;/code&gt; ポインターを引数として取ります。テストが真の場合、マクロはゼロ以外の値を返し、そうでない場合は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="179773253948546e5bdc1e564395d6ef5da831bc" translate="yes" xml:space="preserve">
          <source>Each of the functions described below accept either the filename (as a string) or a binary containing the BEAM module.</source>
          <target state="translated">以下に説明する各関数は、ファイル名(文字列)またはBEAMモジュールを含むバイナリのいずれかを受け取ります。</target>
        </trans-unit>
        <trans-unit id="71dbb11141d1b29bdf605883a9525fa04b5926c7" translate="yes" xml:space="preserve">
          <source>Each of the functions described below accept either the module name, the filename, or a binary containing the BEAM module.</source>
          <target state="translated">以下に説明する各関数は、モジュール名、ファイル名、またはBEAMモジュールを含むバイナリのいずれかを受け取ります。</target>
        </trans-unit>
        <trans-unit id="8027ec76b3d9944bc76e04598ff295232263ba37" translate="yes" xml:space="preserve">
          <source>Each operand of a generic instruction is tagged with its type. A generic instruction can have one of the following types:</source>
          <target state="translated">汎用命令の各オペランドには、その型がタグ付けされています。汎用命令は以下の型のいずれかを持つことができます。</target>
        </trans-unit>
        <trans-unit id="d3a9a70f579bb2d61aec78b5a4d09bff55e0674f" translate="yes" xml:space="preserve">
          <source>Each pair of lowercase and uppercase escape sequences partitions the complete set of characters into two disjoint sets. Any given character matches one, and only one, of each pair. The sequences can appear both inside and outside character classes. They each match one character of the appropriate type. If the current matching point is at the end of the subject string, all fail, as there is no character to match.</source>
          <target state="translated">小文字と大文字のエスケープシーケンスの各ペアは、文字の完全なセットを2つの不連続なセットに分割します。任意の文字は、各ペアのうちの 1 つにマッチします。シーケンスは、文字クラスの内側にも外側にも現れることができます。これらはそれぞれ、適切な型の 1 文字にマッチします。カ レ ン ト マ ッ チポ イ ン ト がサブジ ェ ク ト 文字列の末尾にあ る 場合は、 マ ッ チす る キ ャ ラ ク タ があ り ませんので、 すべて失敗 し ます。</target>
        </trans-unit>
        <trans-unit id="5f109778bad8f5715e79853119dab9d94dca5e64" translate="yes" xml:space="preserve">
          <source>Each port is protected by its own lock to protect against simultaneous execution in multiple threads. Previously when a process, executing on a scheduler thread, sent a port a signal, it locked the port lock and synchronously executed the code corresponding to the signal. If the lock was busy, the scheduler thread blocked waiting until it could lock the lock. If multiple processes executing simultaneously on different scheduler threads, sent signals to the same port, schedulers suffered from heavy lock contention. Such contention could also occur between I/O signals for the port executing on one scheduler thread, and a signal from a process to the port executing on another scheduler thread. Beside the contention issues, we also loose potential work to execute in parallel on different scheduler threads. This since the process sending the &lt;strong&gt;asynchronous&lt;/strong&gt; signal is blocked while the code implementing the signal is executed synchronously.</source>
          <target state="translated">各ポートは、複数のスレッドでの同時実行から保護するために、独自のロックによって保護されています。以前は、スケジューラスレッドで実行されているプロセスがポートにシグナルを送信すると、ポートロックがロックされ、シグナルに対応するコードが同期的に実行されていました。ロックがビジーの場合、スケジューラスレッドはロックをロックできるようになるまで待機をブロックしました。複数のプロセスが異なるスケジューラスレッドで同時に実行され、同じポートに信号を送信した場合、スケジューラは激しいロック競合に悩まされていました。このような競合は、あるスケジューラスレッドで実行されているポートのI / O信号と、別のスケジューラスレッドで実行されているプロセスからポートへの信号の間でも発生する可能性があります。競合の問題に加えて、さまざまなスケジューラスレッドで並行して実行する潜在的な作業も失われます。これは、送信プロセスが&lt;strong&gt;&lt;/strong&gt;シグナルを実装するコードが同期的に実行されている間、&lt;strong&gt;非同期&lt;/strong&gt;シグナルはブロックされます。</target>
        </trans-unit>
        <trans-unit id="541ed98ae654af7db259dfc961c4315c8d1d922e" translate="yes" xml:space="preserve">
          <source>Each predefined analysis is a shorthand for a &lt;code&gt;&lt;a href=&quot;xref#query&quot;&gt;query&lt;/a&gt;&lt;/code&gt;, a sentence of a tiny language providing cross reference data as values of &lt;code&gt;&lt;a href=&quot;xref#predefined_variable&quot;&gt;predefined variables&lt;/a&gt;&lt;/code&gt;. The check for calls to undefined functions can thus be stated as a query:</source>
          <target state="translated">事前定義された各分析は、 &lt;code&gt;&lt;a href=&quot;xref#predefined_variable&quot;&gt;predefined variables&lt;/a&gt;&lt;/code&gt; 値として相互参照データを提供する小さな言語の文である &lt;code&gt;&lt;a href=&quot;xref#query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; 省略表現です。したがって、未定義の関数の呼び出しのチェックは、クエリとして記述できます。</target>
        </trans-unit>
        <trans-unit id="b3bb6f4a5547e885fc3c22cefa6ca8cc6b8272be" translate="yes" xml:space="preserve">
          <source>Each process can only be traced by one tracer. Therefore, attempts to trace an already traced process fail.</source>
          <target state="translated">各プロセスは、1 つのトレーサーでしかトレースできません。したがって、既にトレースされたプロセスをトレースしようとすると失敗します。</target>
        </trans-unit>
        <trans-unit id="f53dfe1cf607f1f76b3cdacc1a7c9ad3df04d899" translate="yes" xml:space="preserve">
          <source>Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">各プロセスはそれぞれのメッセージをエンコードし、デコードします。合計で処理されたメッセージの数(全プロセスの)がmstone値となります。</target>
        </trans-unit>
        <trans-unit id="8ce0c9866e7ef56611d672edfd84466b1d3ddb78" translate="yes" xml:space="preserve">
          <source>Each process has a &lt;strong&gt;trace token&lt;/strong&gt;, which can be empty or not empty. When not empty, the trace token can be seen as the tuple &lt;code&gt;{Label, Flags, Serial, From}&lt;/code&gt;. The trace token is passed invisibly when information is passed between processes. In most cases the information is passed in ordinary messages between processes, but information is also passed between processes by other means. For example, by spawning a new process. An information transfer between two processes is represented by a send event and a receive event regardless of how it is passed.</source>
          <target state="translated">各プロセスには&lt;strong&gt;トレーストークンがあり&lt;/strong&gt;、空でも空でもありません。空でない場合、トレーストークンはタプル &lt;code&gt;{Label, Flags, Serial, From}&lt;/code&gt; ます。トレーストークンは、プロセス間で情報が渡されるときに目に見えない形で渡されます。ほとんどの場合、情報はプロセス間で通常のメッセージで渡されますが、他の方法でプロセス間でも情報が渡されます。たとえば、新しいプロセスを生成することによって。2つのプロセス間の情報転送は、受け渡し方法に関係なく、送信イベントと受信イベントで表されます。</target>
        </trans-unit>
        <trans-unit id="9a21488145b83b166a252047079205488e77b957" translate="yes" xml:space="preserve">
          <source>Each process has a &lt;strong&gt;trace token&lt;/strong&gt;, which can be empty or not empty. When not empty, the trace token can be seen as the tuple &lt;code&gt;{Label, Flags, Serial, From}&lt;/code&gt;. The trace token is passed invisibly with each message.</source>
          <target state="translated">各プロセスには&lt;strong&gt;トレーストークンがあり&lt;/strong&gt;、これは空でも空でもかまいません。空でない場合、トレーストークンはタプル &lt;code&gt;{Label, Flags, Serial, From}&lt;/code&gt; 見なすことができます。トレーストークンは、各メッセージとともに目に見えない形で渡されます。</target>
        </trans-unit>
        <trans-unit id="62f3da47feea5422680300f867c5ab0500b7eef7" translate="yes" xml:space="preserve">
          <source>Each process has a current trace token which is &quot;invisibly&quot; passed from the parent process on creation of the process.</source>
          <target state="translated">各プロセスは、プロセスの作成時に親プロセスから &quot;見えないように &quot;渡される現在のトレーストークンを持っています。</target>
        </trans-unit>
        <trans-unit id="e73293ff85edf8b221fca58a7375966b63368aa5" translate="yes" xml:space="preserve">
          <source>Each process has a current trace token. Initially, the token is empty. When the process sends a message to another process, a copy of the current token is sent &quot;invisibly&quot; along with the message.</source>
          <target state="translated">各プロセスは、現在のトレース・トークンを持っています。初期状態では、トークンは空です。プロセスが他のプロセスにメッセージを送信すると、現在のトークンのコピーがメッセージと一緒に「見えないように」送信されます。</target>
        </trans-unit>
        <trans-unit id="5144322b868d1af68042a24893fdf17ce8ae7e7a" translate="yes" xml:space="preserve">
          <source>Each process has a heap reserved for its use and no references between heaps of different processes are allowed. Messages passed between processes are copied between heaps.</source>
          <target state="translated">各プロセスはその使用のために予約されたヒープを持ち、異なるプロセスのヒープ間の参照は許可されていません。プロセス間で渡されたメッセージは、ヒープ間でコピーされます。</target>
        </trans-unit>
        <trans-unit id="d795f27c853b15d567e346c313ca515710ccd7a9" translate="yes" xml:space="preserve">
          <source>Each process has a virtual binary heap associated with it that has the size of all the current off-heap binaries that the process has references to. The virtual binary heap also has a limit and grows and shrinks depending on how off-heap binaries are used by the process. The same growth and shrink mechanisms are used for the binary heap and for the term heap, so first a Fibonacci like series and then 20% growth.</source>
          <target state="translated">各プロセスは、そのプロセスが参照しているすべての現在のオフヒープバイナリのサイズを持つ仮想バイナリヒープを持っています。仮想バイナリヒープにも限界があり、プロセスが使用するオフヒープバイナリの量に応じて成長と縮小が行われます。バイナリヒープとタームヒープには同じ成長と収縮のメカニズムが使用され、最初はフィボナッチ級数のような系列で、その後20%の成長が行われます。</target>
        </trans-unit>
        <trans-unit id="096913c6437e32f4cf474b346e119faa89b965e8" translate="yes" xml:space="preserve">
          <source>Each process has its own input queue for messages it receives. New messages received are put at the end of the queue. When a process executes a &lt;code&gt;receive&lt;/code&gt;, the first message in the queue is matched against the first pattern in the &lt;code&gt;receive&lt;/code&gt;. If this matches, the message is removed from the queue and the actions corresponding to the pattern are executed.</source>
          <target state="translated">各プロセスには、受信するメッセージ用の独自の入力キューがあります。受信した新しいメッセージは、キューの最後に置かれます。プロセスが &lt;code&gt;receive&lt;/code&gt; 実行すると、キュー内の最初のメッセージが受信内の最初のパターンと照合され &lt;code&gt;receive&lt;/code&gt; 。これが一致した場合、メッセージはキューから削除され、パターンに対応するアクションが実行されます。</target>
        </trans-unit>
        <trans-unit id="3a4ee2d15983f4a7bc92b54819b47d8c32a6e680" translate="yes" xml:space="preserve">
          <source>Each process has its own process dictionary, accessed by calling the following BIFs:</source>
          <target state="translated">各プロセスはそれ自身のプロセス辞書を持っており、以下のBIFを呼び出すことでアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="c1effb1c4303b519ce39735425f5a670ab0dcb4b" translate="yes" xml:space="preserve">
          <source>Each release version has a status, which can be &lt;code&gt;unpacked&lt;/code&gt;, &lt;code&gt;current&lt;/code&gt;, &lt;code&gt;permanent&lt;/code&gt;, or &lt;code&gt;old&lt;/code&gt;. There is always one latest release, which either has status &lt;code&gt;permanent&lt;/code&gt; (normal case) or &lt;code&gt;current&lt;/code&gt; (installed, but not yet made permanent). The meaning of the status values are illustrated in the following table:</source>
          <target state="translated">各リリースバージョンにはステータスがあり、 &lt;code&gt;unpacked&lt;/code&gt; 、 &lt;code&gt;current&lt;/code&gt; 、 &lt;code&gt;permanent&lt;/code&gt; 、または &lt;code&gt;old&lt;/code&gt; です。常に最新のリリースが1つあり、ステータスは &lt;code&gt;permanent&lt;/code&gt; （通常の場合）または &lt;code&gt;current&lt;/code&gt; （インストール済みですが、永続的ではありません）です。ステータス値の意味を次の表に示します。</target>
        </trans-unit>
        <trans-unit id="b22912e88f3fff6681ff427aa02b35651d16061b" translate="yes" xml:space="preserve">
          <source>Each request &lt;code&gt;*_REQ&lt;/code&gt; is preceded by a 2 byte length field. Thus, the overall request format is as follows:</source>
          <target state="translated">各要求 &lt;code&gt;*_REQ&lt;/code&gt; の前には、2バイトの長さフィールドがあります。したがって、全体的な要求形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="214cfe9188b99ecc651497388a529d4ed886ff20" translate="yes" xml:space="preserve">
          <source>Each row defines a &lt;strong&gt;manager user&lt;/strong&gt; of the manager.</source>
          <target state="translated">各行は、&lt;strong&gt;マネージャーのマネージャーユーザー&lt;/strong&gt;を定義し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="ca374bc8a75c956aa890688fd1192654850ec9a4" translate="yes" xml:space="preserve">
          <source>Each row defines a context in the agent. This information is used in the table &lt;code&gt;vacmContextTable&lt;/code&gt; in the SNMP-VIEW-BASED-ACM-MIB.</source>
          <target state="translated">各行は、エージェントのコンテキストを定義します。この情報は、SNMP-VIEW-BASED-ACM-MIB のテーブル &lt;code&gt;vacmContextTable&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="8644f9741490487b00047e43487ce1247a0d6219" translate="yes" xml:space="preserve">
          <source>Each row specifies which security model to use, along with security level and security parameters.</source>
          <target state="translated">各行は、使用するセキュリティモデルを、セキュリティレベルとセキュリティパラメータとともに指定します。</target>
        </trans-unit>
        <trans-unit id="2b467749361658abb4d12ab5e9dc82af9af422e5" translate="yes" xml:space="preserve">
          <source>Each scheduler thread has its own set of references, and all other threads have a shared set of references. Each set of references consist of &lt;code&gt;2⁶⁴ - 1&lt;/code&gt; unique references. That is, the total amount of unique references that can be produced on a runtime system instance is &lt;code&gt;(NoSchedulers + 1) &amp;times; (2⁶⁴ - 1)&lt;/code&gt;.</source>
          <target state="translated">各スケジューラスレッドには独自の参照セットがあり、他のすべてのスレッドには参照セットが共有されています。参照の各セットは、 &lt;code&gt;2⁶⁴ - 1&lt;/code&gt; 一意の参照で構成されています。つまり、ランタイムシステムインスタンスで生成できる一意の参照の総数は、 &lt;code&gt;(NoSchedulers + 1) &amp;times; (2⁶⁴ - 1)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bd0f886f081fb98e606d025bb4bf36be701fdf0b" translate="yes" xml:space="preserve">
          <source>Each schema has a unique cookie, which can be regarded as a unique schema identifier. The cookie must be the same on all nodes where Mnesia is supposed to run. For details, see the User's Guide.</source>
          <target state="translated">各スキーマは一意のスキーマ識別子とみなすことができる一意のクッキーを持っています。クッキーは、Mnesiaが実行されることになっているすべてのノードで同じでなければなりません。詳細については、ユーザーガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="549337d666fba4ddace993e54e248a26130c024d" translate="yes" xml:space="preserve">
          <source>Each segment has the following general syntax:</source>
          <target state="translated">各セグメントには、以下の一般的な構文があります。</target>
        </trans-unit>
        <trans-unit id="1cd372994dfc3344f859a57d088fd0676fe4b69b" translate="yes" xml:space="preserve">
          <source>Each segment in a binary can consist of zero or more bits. A segment of type &lt;code&gt;binary&lt;/code&gt; must have a size evenly divisible by 8 (or divisible by the unit size, if the unit size has been changed). A segment of type &lt;code&gt;bitstring&lt;/code&gt; has no restrictions on the size.</source>
          <target state="translated">バイナリの各セグメントは、0個以上のビットで構成できます。タイプが &lt;code&gt;binary&lt;/code&gt; のセグメントは、8で割り切れるサイズ（または、ユニットサイズが変更されている場合は、ユニットサイズで割り切れるサイズ）でなければなりません。タイプ &lt;code&gt;bitstring&lt;/code&gt; のセグメントは、サイズに制限はありません。</target>
        </trans-unit>
        <trans-unit id="1aa9835051b7281d11e9f067f29f705681499a78" translate="yes" xml:space="preserve">
          <source>Each segment in a binary can consist of zero or more bits. A segment of type &lt;code&gt;binary&lt;/code&gt; must have a size evenly divisible by 8 (or divisible by the unit size, if the unit size has been changed). A segment of type &lt;code&gt;bitstring&lt;/code&gt; has no restrictions on the size. A segment of type &lt;code&gt;float&lt;/code&gt; must have size 64 or 32.</source>
          <target state="translated">バイナリの各セグメントは、0ビット以上で構成できます。 &lt;code&gt;binary&lt;/code&gt; 型のセグメントのサイズは、8で均等に割り切れる（または、単位サイズが変更されている場合は、単位サイズで割り切れる）必要があります。 &lt;code&gt;bitstring&lt;/code&gt; 型のセグメントには、サイズの制限はありません。 &lt;code&gt;float&lt;/code&gt; 型のセグメントのサイズは64または32である必要があります。</target>
        </trans-unit>
        <trans-unit id="f1671b1a7b09bbb4a1297d80f839111ba93c1ee9" translate="yes" xml:space="preserve">
          <source>Each segment in a binary can consist of zero or more bits. There are no alignment rules for individual segments of type &lt;code&gt;integer&lt;/code&gt; and &lt;code&gt;float&lt;/code&gt;. For binaries and bitstrings without size, the unit specifies the alignment. Since the default alignment for the &lt;code&gt;binary&lt;/code&gt; type is 8, the size of a binary segment must be a multiple of 8 bits, that is, only whole bytes.</source>
          <target state="translated">バイナリの各セグメントは、0個以上のビットで構成できます。 &lt;code&gt;integer&lt;/code&gt; 型と &lt;code&gt;float&lt;/code&gt; 型の個々のセグメントには位置合わせ規則はありません。サイズのないバイナリおよびビット文字列の場合、単位は配置を指定します。 &lt;code&gt;binary&lt;/code&gt; タイプのデフォルトの配置は8であるため、バイナリセグメントのサイズは8ビットの倍数、つまりバイト全体でなければなりません。</target>
        </trans-unit>
        <trans-unit id="e9282b1591676f5d2f51bfb0beccffd06d1eb513" translate="yes" xml:space="preserve">
          <source>Each separate (variable) package is generated as a separate file in the same directory as the &lt;code&gt;ReleaseName.tar.gz&lt;/code&gt; file.</source>
          <target state="translated">個別の（可変）パッケージは、 &lt;code&gt;ReleaseName.tar.gz&lt;/code&gt; ファイルと同じディレクトリに個別のファイルとして生成されます。</target>
        </trans-unit>
        <trans-unit id="024f41e5f9df7f8bc9804c8c5a80f4b99f3d7274" translate="yes" xml:space="preserve">
          <source>Each separate (variable) package is included in the main &lt;code&gt;ReleaseName.tar.gz&lt;/code&gt; file. This is the default.</source>
          <target state="translated">個別の（可変）パッケージはそれぞれ、メインの &lt;code&gt;ReleaseName.tar.gz&lt;/code&gt; ファイルに含まれています。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="c3e8c329b13e4f651f71df7ff5c490cb04afca90" translate="yes" xml:space="preserve">
          <source>Each signal my be set to one of the following options:</source>
          <target state="translated">各シグナルは以下のオプションのいずれかに設定されています。</target>
        </trans-unit>
        <trans-unit id="14b191f37496bd40bb6e48f5c7122d0518587ab2" translate="yes" xml:space="preserve">
          <source>Each specific instructions is defined by following the name of the instruction with the types for each operand. An operand type is a single letter. For example, &lt;code&gt;x&lt;/code&gt; means an X register, &lt;code&gt;y&lt;/code&gt; means a Y register, and &lt;code&gt;c&lt;/code&gt; is a &quot;constant&quot; (a tagged term such as an integer, an atom, or a literal).</source>
          <target state="translated">それぞれの特定の命令は、命令の名前と各オペランドのタイプをたどることによって定義されます。オペランドタイプは1文字です。たとえば、 &lt;code&gt;x&lt;/code&gt; はXレジスタ、 &lt;code&gt;y&lt;/code&gt; はYレジスタ、 &lt;code&gt;c&lt;/code&gt; は「定数」（整数、アトム、リテラルなどのタグ付き用語）を意味します。</target>
        </trans-unit>
        <trans-unit id="4d75df3fed93d33a1b26f0df41aacf7a9c5e0bb4" translate="yes" xml:space="preserve">
          <source>Each sub-agent calls the instrumentation for its loaded MIBs.</source>
          <target state="translated">各サブエージェントは、ロードされたMIBのインストルメンテーションを呼び出します。</target>
        </trans-unit>
        <trans-unit id="a920af7f1bd15ab26a0a0f35363ebaf253b19753" translate="yes" xml:space="preserve">
          <source>Each sub-agent can implement its own mechanisms for &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt; and &lt;code&gt;get-next&lt;/code&gt;. For example, if the application requires the &lt;code&gt;get&lt;/code&gt; mechanism to be asynchronous, or needs a N-phase &lt;code&gt;set&lt;/code&gt; mechanism, a specialized sub-agent should be used.</source>
          <target state="translated">各サブエージェントは、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; および &lt;code&gt;get-next&lt;/code&gt; の独自のメカニズムを実装できます。たとえば、アプリケーションで &lt;code&gt;get&lt;/code&gt; メカニズムを非同期にする必要がある場合、またはNフェーズの &lt;code&gt;set&lt;/code&gt; メカニズムが必要な場合は、専用のサブエージェントを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="82ff02bedfa4335374a1f6b3ca8faa6ef8a2d000" translate="yes" xml:space="preserve">
          <source>Each tab in the main window contains an information page. If no information is found for an item, the page is empty. The reason for not finding information about an item can be the following:</source>
          <target state="translated">メインウィンドウの各タブには情報ページがあります。アイテムに関する情報が見つからない場合、そのページは空です。アイテムに関する情報が見つからない理由としては、以下のようなことが考えられます。</target>
        </trans-unit>
        <trans-unit id="552992daca4c23db6bff1830043b762334b97510" translate="yes" xml:space="preserve">
          <source>Each table retains its old contents in a checkpoint retainer. For performance critical applications, it can be important to realize the processing overhead associated with checkpoints. In a worst case scenario, the checkpoint retainer consumes more memory than the table itself. Also, each update becomes slightly slower on those nodes where checkpoint retainers are attached to the tables.</source>
          <target state="translated">各テーブルは、チェックポイント保持器で古い内容を保持します。パフォーマンスが重要なアプリケーションでは、チェックポイントに関連する処理オーバーヘッドを実現することが重要になる場合があります。最悪の場合、チェックポイントリテーナはテーブル自体よりも多くのメモリを消費します。また、チェックポイントリテーナがテーブルにアタッチされているノードでは、各更新が若干遅くなります。</target>
        </trans-unit>
        <trans-unit id="791a1f2a4037ba80b05edb94447b37b4e2364aa6" translate="yes" xml:space="preserve">
          <source>Each term &lt;code&gt;Term&lt;/code&gt; in the list is called an &lt;strong&gt;element&lt;/strong&gt;. The number of elements is said to be the &lt;strong&gt;length&lt;/strong&gt; of the list.</source>
          <target state="translated">各用語の &lt;code&gt;Term&lt;/code&gt; リストでは、と呼ばれている&lt;strong&gt;要素&lt;/strong&gt;。要素の数はリストの&lt;strong&gt;長さ&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="ed00d75d5c4d6192c54f9d2b21cf805e6461e449" translate="yes" xml:space="preserve">
          <source>Each term &lt;code&gt;Term&lt;/code&gt; in the tuple is called an &lt;strong&gt;element&lt;/strong&gt;. The number of elements is said to be the &lt;strong&gt;size&lt;/strong&gt; of the tuple.</source>
          <target state="translated">各用語の &lt;code&gt;Term&lt;/code&gt; タプルでは呼ばれる&lt;strong&gt;要素&lt;/strong&gt;。要素の数はタプルの&lt;strong&gt;サイズ&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="5abbd52c08a811a8e991cd9188a923d201e7731f" translate="yes" xml:space="preserve">
          <source>Each test case is executed by a dedicated Erlang process. The process is spawned when the test case starts, and terminated when the test case is finished. The configuration functions &lt;code&gt;init_per_testcase&lt;/code&gt; and &lt;code&gt;end_per_testcase&lt;/code&gt; execute on the same process as the test case.</source>
          <target state="translated">各テストケースは、専用のErlangプロセスによって実行されます。プロセスは、テストケースの開始時に生成され、テストケースの終了時に終了します。構成関数 &lt;code&gt;init_per_testcase&lt;/code&gt; および &lt;code&gt;end_per_testcase&lt;/code&gt; は、テストケースと同じプロセスで実行されます。</target>
        </trans-unit>
        <trans-unit id="5c925270da28c693f61f4f9343e6c13b128264b9" translate="yes" xml:space="preserve">
          <source>Each test suite module can contain the optional configuration functions &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite/1&lt;/a&gt;&lt;/code&gt;. If the init function is defined, so must the end function be.</source>
          <target state="translated">各テストスイートモジュールには、オプションの構成関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_suite-1&quot;&gt;end_per_suite/1&lt;/a&gt;&lt;/code&gt; を含めることができます。init関数が定義されている場合、end関数も定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="fa673338880fff3b8ab5d57c56ce74931075ef5e" translate="yes" xml:space="preserve">
          <source>Each test suite module can contain the optional configuration functions &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt;. If the init function is defined, so must the end function be.</source>
          <target state="translated">各テストスイートモジュールには、オプションの構成関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;common_test#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; を含めることができます。init関数が定義されている場合、end関数も定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="9be9dbf46883bfb6649b9dde3024776b2bfb78fc" translate="yes" xml:space="preserve">
          <source>Each test suite module can contain the optional configuration functions &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_suite-1&quot;&gt;end_per_suite/1&lt;/a&gt;&lt;/code&gt;. If the init function is defined, so must the end function be.</source>
          <target state="translated">各テストスイートモジュールには、オプションの構成関数 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_suite-1&quot;&gt;end_per_suite/1&lt;/a&gt;&lt;/code&gt; を含めることができます。init関数が定義されている場合は、end関数も定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="5dab76f0335fb30cc022494a15a9102a1b1aa7be" translate="yes" xml:space="preserve">
          <source>Each test suite module can contain the optional configuration functions &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt;. If the init function is defined, so must the end function be.</source>
          <target state="translated">各テストスイートモジュールには、オプションの構成関数 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ct_suite#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; を含めることができます。init関数が定義されている場合は、end関数も定義されている必要があります。</target>
        </trans-unit>
        <trans-unit id="c5862fbfb3f074c11d24b7727c36cf9bdbbbda72" translate="yes" xml:space="preserve">
          <source>Each test suite module must export function &lt;code&gt;&lt;a href=&quot;common_test#Module:all-0&quot;&gt;all/0&lt;/a&gt;&lt;/code&gt;, which returns the list of all test case groups and test cases to be executed in that module.</source>
          <target state="translated">各テストスイートモジュールは関数 &lt;code&gt;&lt;a href=&quot;common_test#Module:all-0&quot;&gt;all/0&lt;/a&gt;&lt;/code&gt; をエクスポートする必要があります。これにより、そのモジュールで実行されるすべてのテストケースグループとテストケースのリストが返されます。</target>
        </trans-unit>
        <trans-unit id="fd56725b7b7c70889ceb04697172f3594442c52b" translate="yes" xml:space="preserve">
          <source>Each test suite module must export function &lt;code&gt;&lt;a href=&quot;ct_suite#Module:all-0&quot;&gt;all/0&lt;/a&gt;&lt;/code&gt;, which returns the list of all test case groups and test cases to be executed in that module.</source>
          <target state="translated">各テストスイートモジュールは、関数 &lt;code&gt;&lt;a href=&quot;ct_suite#Module:all-0&quot;&gt;all/0&lt;/a&gt;&lt;/code&gt; をエクスポートする必要があります。これにより、そのモジュールで実行されるすべてのテストケースグループとテストケースのリストが返されます。</target>
        </trans-unit>
        <trans-unit id="a82d0b878fdfaab3c22f520d67abc9156fa79d67" translate="yes" xml:space="preserve">
          <source>Each time a function in a Cover compiled module is called, information about the call is added to an internal database of Cover. The coverage analysis is performed by examining the contents of the Cover database. The output &lt;code&gt;Answer&lt;/code&gt; is determined by two parameters, &lt;code&gt;Level&lt;/code&gt; and &lt;code&gt;Analysis&lt;/code&gt;.</source>
          <target state="translated">Coverコンパイル済みモジュールの関数が呼び出されるたびに、その呼び出しに関する情報がCoverの内部データベースに追加されます。カバレッジ分析は、Coverデータベースの内容を調べることによって実行されます。出力 &lt;code&gt;Answer&lt;/code&gt; は、 &lt;code&gt;Level&lt;/code&gt; と &lt;code&gt;Analysis&lt;/code&gt; という 2つのパラメーターによって決定されます。</target>
        </trans-unit>
        <trans-unit id="d291b759129a65a7c92477a04e632cac3277ae53" translate="yes" xml:space="preserve">
          <source>Each time a function in the Cover compiled module &lt;code&gt;channel&lt;/code&gt; is called, information about the call will be added to the Cover database. Run the test case:</source>
          <target state="translated">Coverコンパイル済みモジュール &lt;code&gt;channel&lt;/code&gt; 関数が呼び出されるたびに、呼び出しに関する情報がCoverデータベースに追加されます。テストケースを実行します。</target>
        </trans-unit>
        <trans-unit id="9e8ff16c70c1fc0240fb75f09e0d951deab35788" translate="yes" xml:space="preserve">
          <source>Each tuple contains an atom describing the type of memory as first element and the amount of allocated memory in bytes as second element. When information about allocated and used memory is present, also a third element is present, containing the amount of used memory in bytes.</source>
          <target state="translated">各タプルは、第一要素としてメモリの種類を記述したアトムを、第二要素として割り当てられたメモリのバイト数を記述したアトムを含む。割り当てられたメモリと使用されたメモリの情報がある場合は、使用されたメモリの量をバイト単位で記述した第三の要素も存在する。</target>
        </trans-unit>
        <trans-unit id="3fbaab76ee048157643094a4fa7baae8b1f26b60" translate="yes" xml:space="preserve">
          <source>Each tuple will produce one table in the order of their places in the list.</source>
          <target state="translated">それぞれのタプルは、リスト内の場所順に1つのテーブルを生成します。</target>
        </trans-unit>
        <trans-unit id="51cb2aa921488217e96ac224fc5c13f88ab59cb5" translate="yes" xml:space="preserve">
          <source>Each undecoded part that is to be decoded must be fed into function &lt;code&gt;decode_part/2&lt;/code&gt; as follows:</source>
          <target state="translated">デコードされるデコードされていない各部分は、次のように関数 &lt;code&gt;decode_part/2&lt;/code&gt; に入力する必要があります。</target>
        </trans-unit>
        <trans-unit id="a3eef4129b67bd506209f344f64f0d81fa4e275d" translate="yes" xml:space="preserve">
          <source>Each update is appended to the transaction log and occasionally (depending on how it is configured) dumped to the tables files. The table file storage is more compact than the transaction log storage, especially if the same record is updated repeatedly. If the thresholds for dumping the transaction log are reached before the previous dump is finished, an overload event is triggered.</source>
          <target state="translated">各更新はトランザクションログに追加され、時折(設定方法によっては)テーブルファイルにダンプされます。テーブルファイルのストレージは、特に同じレコードが繰り返し更新される場合には、トランザクションログのストレージよりもコンパクトになります。前回のダンプが終了する前にトランザクションログをダンプするためのしきい値に達すると、オーバーロードイベントが発生します。</target>
        </trans-unit>
        <trans-unit id="91222363ea25938785424fffb48446fa72022ad1" translate="yes" xml:space="preserve">
          <source>Each user is represented by a tuple with the Mid of the user and a list of config parameters (each parameter is in turn a tuple: &lt;code&gt;{Item, Value}&lt;/code&gt;).</source>
          <target state="translated">各ユーザーは、ユーザーのMidと構成パラメーターのリストを持つタプルで表されます（各パラメーターは、タプル： &lt;code&gt;{Item, Value}&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="c5960487e6583117a3e71addee6d735530434ddc" translate="yes" xml:space="preserve">
          <source>Earlier it was mentioned that a variable can only be given a value once in its scope. In the above you see that &lt;code&gt;Result_so_far&lt;/code&gt; is given several values. This is OK since every time you call &lt;code&gt;list_max/2&lt;/code&gt; you create a new scope and one can regard &lt;code&gt;Result_so_far&lt;/code&gt; as a different variable in each scope.</source>
          <target state="translated">以前に、変数にはそのスコープ内で一度だけ値を与えることができると述べました。上記では、 &lt;code&gt;Result_so_far&lt;/code&gt; にいくつかの値が与えられていることがわかります。 &lt;code&gt;list_max/2&lt;/code&gt; を呼び出すたびに新しいスコープを作成し、 &lt;code&gt;Result_so_far&lt;/code&gt; を各スコープの異なる変数と見なすことができるため、これは問題ありません。</target>
        </trans-unit>
        <trans-unit id="ed6caed0e440a7ff0deaaa66f177152c69eb3afa" translate="yes" xml:space="preserve">
          <source>Earlier version of the release to downgrade to.</source>
          <target state="translated">ダウングレードするためのリリースの早期バージョン。</target>
        </trans-unit>
        <trans-unit id="4f12071fcb232719f7acbb29f4900300360385fd" translate="yes" xml:space="preserve">
          <source>Earlier version of the release to upgrade from.</source>
          <target state="translated">アップグレードするリリースの旧バージョン。</target>
        </trans-unit>
        <trans-unit id="65cd0c7004f4d160355d98a242b0f8b159d1373f" translate="yes" xml:space="preserve">
          <source>Earlier versions of Perl and PCRE used to give an error at compile time for such patterns. However, as there are cases where this can be useful, such patterns are now accepted. However, if any repetition of the subpattern matches no characters, the loop is forcibly broken.</source>
          <target state="translated">以前のバージョンのPerlやPCREでは、このようなパターンではコンパイル時にエラーが発生していました。しかし、これが有用な場合もあるので、現在ではそのようなパターンも受け入れられるようになっています。ただし、サブパターンの繰り返しが何も文字にマッチしない場合、ループは強制的に破られます。</target>
        </trans-unit>
        <trans-unit id="a53b52768e55858c81dd4d8fab520a67888c0d03" translate="yes" xml:space="preserve">
          <source>Earlier versions of the ASN.1 compiler required that modules that were imported from had to be compiled before the module that imported. This caused problems when ASN.1 modules had circular dependencies.</source>
          <target state="translated">ASN.1コンパイラの以前のバージョンでは、インポート元のモジュールをインポート元のモジュールよりも前にコンパイルする必要がありました。これは、ASN.1モジュールが循環的な依存関係を持つ場合に問題を引き起こしました。</target>
        </trans-unit>
        <trans-unit id="e9d22090baa7934a13d02450261873967d2a0be1" translate="yes" xml:space="preserve">
          <source>Earlier, &lt;code&gt;Fun&lt;/code&gt; could also be specified as &lt;code&gt;{Module, Function}&lt;/code&gt;, equivalent to &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt;. &lt;strong&gt;This use is deprecated and will stop working in a future release.&lt;/strong&gt;</source>
          <target state="translated">以前は、 &lt;code&gt;Fun&lt;/code&gt; は &lt;code&gt;{Module, Function}&lt;/code&gt; として指定することもでき、 &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; と同等でした。&lt;strong&gt;この使用は非推奨であり、将来のリリースでは機能しなくなります。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a827c06f458eb4b34a5493fad94681c358ea9853" translate="yes" xml:space="preserve">
          <source>Early data and 0-RTT not supported</source>
          <target state="translated">初期データと0-RTTはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e93bb4ae1ee898eabe1fd55cee195f346cb5664b" translate="yes" xml:space="preserve">
          <source>Early versions of the SMP support for the runtime system completely relied on locking in order to protect data accesses from multiple threads. In some cases this isn't that problematic, but in some cases it really is. It complicates the code, ensuring all locks needed are actually held, and ensuring that all locks are acquired in such an order that no deadlock occur. Acquiring locks in the right order often also involve releasing locks held, forcing threads to reread data already read. A good recipe for creation of bugs. Trying to use more fine-grained locking in order to increase possible parallelism in the system makes the complexity situation even worse. Having to acquire a bunch of locks when doing operations also often cause heavy lock contention which cause poor scalability.</source>
          <target state="translated">ランタイムシステムのSMPサポートの初期バージョンでは、複数のスレッドからのデータアクセスを保護するために、ロックに完全に依存していました。いくつかのケースでは、これはそれほど問題ではありませんが、いくつかのケースでは本当に問題になります。これはコードを複雑にし、必要なすべてのロックが実際に保持されていることを確認し、デッドロックが発生しないような順序ですべてのロックが取得されていることを確認します。正しい順序でロックを取得することは、保持しているロックを解放することにもなり、スレッドはすでに読み込まれたデータを再読まざるを得なくなります。これは、バグを生み出すための良いレシピです。システムの並列性を高めるために、より細かなロックを使用しようとすると、 複雑な状況はさらに悪化します。操作を行う際に多くのロックを取得しなければならないことは、しばしば重いロックの競合を引き起こし、スケーラビリティを低下させる原因にもなります。</target>
        </trans-unit>
        <trans-unit id="c686e62b44ec832b4f549d529f5cabc55a92a0e4" translate="yes" xml:space="preserve">
          <source>Easy-to-use time-outs (&lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt; (named time-outs))</source>
          <target state="translated">使いやすいタイムアウト（ &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt; タイムアウト、 &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-Outs&lt;/a&gt;&lt;/code&gt; タイムアウト（名前付きタイムアウト））</target>
        </trans-unit>
        <trans-unit id="5887655182350a5c85026cd7362d3a2f232dbf4f" translate="yes" xml:space="preserve">
          <source>Easy-to-use timeouts (&lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-outs&lt;/a&gt;&lt;/code&gt; (named time-outs))</source>
          <target state="translated">使いやすいタイムアウト（ &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Outs&lt;/a&gt;&lt;/code&gt; タイムアウト、 &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Outs&lt;/a&gt;&lt;/code&gt; タイムアウト、 &lt;code&gt;&lt;a href=&quot;#Generic%20Time-Outs&quot;&gt;Generic Time-outs&lt;/a&gt;&lt;/code&gt; （名前付きタイムアウト））</target>
        </trans-unit>
        <trans-unit id="b7a4d28f1dcb53979e4d42597be409788c8c24e0" translate="yes" xml:space="preserve">
          <source>EdDSA</source>
          <target state="translated">EdDSA</target>
        </trans-unit>
        <trans-unit id="acaad14ae3e35bc5c73d5e321dcb75cadd81a530" translate="yes" xml:space="preserve">
          <source>EdDSA is available with OpenSSL 1.1.1 or later if not disabled by configuration. To dynamically check availability, check that the atom &lt;code&gt;eddsa&lt;/code&gt; is present in the list returned by &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">EdDSAは、構成によって無効にされていない場合、OpenSSL1.1.1以降で使用できます。可用性を動的にチェックするには、 &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt; によって返されるリストにアトム &lt;code&gt;eddsa&lt;/code&gt; が存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="31ae59bd2171bda6147d55588f9a8b6efcfaac82" translate="yes" xml:space="preserve">
          <source>Edit - Arrows</source>
          <target state="translated">編集-矢印</target>
        </trans-unit>
        <trans-unit id="387693905beccb2acf0088228590ecc875a53e2d" translate="yes" xml:space="preserve">
          <source>Edit - Comment/Uncomment Region</source>
          <target state="translated">編集-コメント/コメントなし領域</target>
        </trans-unit>
        <trans-unit id="3bc821a9e3f4964085c2a30d0c26d8c14aa5da39" translate="yes" xml:space="preserve">
          <source>Edit - Fill Comment</source>
          <target state="translated">編集-塗りつぶしコメント</target>
        </trans-unit>
        <trans-unit id="c2dac947ec0acff1f5944051e24327213806c67c" translate="yes" xml:space="preserve">
          <source>Edit - Function Header Commands</source>
          <target state="translated">編集-関数ヘッダーコマンド</target>
        </trans-unit>
        <trans-unit id="7b76420fb41ff4f81dc37493d7f65967ae412e88" translate="yes" xml:space="preserve">
          <source>Edit - Marking</source>
          <target state="translated">編集-マーキング</target>
        </trans-unit>
        <trans-unit id="fd879ab973df7fb91e2bc55f2a3c82dc78b25bb9" translate="yes" xml:space="preserve">
          <source>Edit - Moving the marker</source>
          <target state="translated">編集-マーカーの移動</target>
        </trans-unit>
        <trans-unit id="33c5225e7c12b757b24805fea66268f9fbf3a6f5" translate="yes" xml:space="preserve">
          <source>Edit Menu</source>
          <target state="translated">編集メニュー</target>
        </trans-unit>
        <trans-unit id="ff096aaeb82c6666e39fc680c917cdb6ff501824" translate="yes" xml:space="preserve">
          <source>Edits configuration data.</source>
          <target state="translated">設定データを編集します。</target>
        </trans-unit>
        <trans-unit id="07db18ae9dcddd7fea233a4299ad559f0aca25b2" translate="yes" xml:space="preserve">
          <source>Edits the environment block for the service. Every environment variable specified is added to the system environment block. If a variable specified here has the same name as a system-wide environment variable, the specified value overrides the system-wide. Environment variables are added to this list by specifying &amp;lt;variable&amp;gt;=&amp;lt;value&amp;gt; and deleted from the list by specifying &amp;lt;variable&amp;gt; alone. The environment block is automatically sorted. Any number of &lt;code&gt;-env&lt;/code&gt; options can be specified in one command. Default is to use the system environment block unmodified (except for two additions, see section &lt;code&gt;&lt;a href=&quot;#002&quot;&gt;Environment&lt;/a&gt;&lt;/code&gt; below).</source>
          <target state="translated">サービスの環境ブロックを編集します。指定されたすべての環境変数がシステム環境ブロックに追加されます。ここで指定された変数がシステム全体の環境変数と同じ名前である場合、指定された値はシステム全体をオーバーライドします。環境変数は、&amp;lt;variable&amp;gt; = &amp;lt;value&amp;gt;を指定してこのリストに追加され、&amp;lt;variable&amp;gt;のみを指定してリストから削除されます。環境ブロックは自動的にソートされます。1つのコマンドで任意の数の &lt;code&gt;-env&lt;/code&gt; オプションを指定できます。デフォルトでは、システム環境ブロックを変更せずに使用します（2つの追加を除き、以下の「 &lt;code&gt;&lt;a href=&quot;#002&quot;&gt;Environment&lt;/a&gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="7c924cdd3b737d8ecc484367e45f459b20ec7e9f" translate="yes" xml:space="preserve">
          <source>Effects like this are improbable but possible. The probability will further be reduced (if not vanish) if table option &lt;code&gt;&lt;a href=&quot;#new_2_write_concurrency&quot;&gt;write_concurrency&lt;/a&gt;&lt;/code&gt; is not enabled. This can also only be a potential concern for &lt;code&gt;ordered_set&lt;/code&gt; where the traversal order is defined.</source>
          <target state="translated">このような影響はありそうにありませんが、可能です。テーブルオプション &lt;code&gt;&lt;a href=&quot;#new_2_write_concurrency&quot;&gt;write_concurrency&lt;/a&gt;&lt;/code&gt; が有効になっていない場合、確率はさらに低下します（消えない場合）。これは、トラバーサル順序が定義されている &lt;code&gt;ordered_set&lt;/code&gt; の潜在的な懸念事項になる可能性もあります。</target>
        </trans-unit>
        <trans-unit id="2a956986208caa4daeb338ab4f70268aa64edc8b" translate="yes" xml:space="preserve">
          <source>Efficient code can be well-structured and clean, based on a sound overall architecture and sound algorithms. Efficient code can be highly implementation-code that bypasses documented interfaces and takes advantage of obscure quirks in the current implementation.</source>
          <target state="translated">効率的なコードは、健全な全体的なアーキテクチャと健全なアルゴリズムに基づいた、よく構造化されたクリーンなコードになります。効率的なコードは、文書化されたインターフェイスを迂回し、現在の実装の不明瞭な癖を利用した高度な実装コードであることがあります。</target>
        </trans-unit>
        <trans-unit id="95eb187386528f0442d2d1a0d814ad6080e6245c" translate="yes" xml:space="preserve">
          <source>Efficiently reads the terms that are appended to an internally formatted log. It minimizes disk I/O by reading 64 kilobyte chunks from the file. Functions &lt;code&gt;bchunk/2,3&lt;/code&gt; return the binaries read from the file, they do not call &lt;code&gt;binary_to_term()&lt;/code&gt;. Apart from that, they work just like &lt;code&gt;chunk/2,3&lt;/code&gt;.</source>
          <target state="translated">内部的にフォーマットされたログに追加された用語を効率的に読み取ります。ファイルから64キロバイトのチャンクを読み取ることにより、ディスクI / Oを最小限に抑えます。関数 &lt;code&gt;bchunk/2,3&lt;/code&gt; は、ファイルから読み取ったバイナリを返します &lt;code&gt;binary_to_term()&lt;/code&gt; は呼び出しません。それ以外は、 &lt;code&gt;chunk/2,3&lt;/code&gt; 同じように機能します。</target>
        </trans-unit>
        <trans-unit id="bb212465dbae7203df4ab62ae8863407da33e722" translate="yes" xml:space="preserve">
          <source>Egyptian_Hieroglyphs</source>
          <target state="translated">Egyptian_Hieroglyphs</target>
        </trans-unit>
        <trans-unit id="b605c9a1d38aeb2128970f4cfddf46cfbbab5716" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;Location&lt;/code&gt; is illegal, or it is evaluated to a negative offset in the file. Notice that if the resulting position is a negative value, the result is an error, and after the call the file position is undefined.</source>
          <target state="translated">どちらの &lt;code&gt;Location&lt;/code&gt; 違法である、またはそれは、ファイル内のオフセットマイナスに評価されます。結果の位置が負の値の場合、結果はエラーとなり、呼び出し後のファイル位置は未定義であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="821623002947dfb13bf46c9ba373aec903676684" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;*bitoffsp&lt;/code&gt; returns the number of unused bits in the first byte pointed to by &lt;code&gt;*pp&lt;/code&gt;. The value of &lt;code&gt;*bitoffsp&lt;/code&gt; is between 0 and 7. Unused bits in the first byte are the most significant bits.</source>
          <target state="translated">いずれかの &lt;code&gt;NULL&lt;/code&gt; または &lt;code&gt;*bitoffsp&lt;/code&gt; は、最初のバイトの未使用ビット数がによって指さ戻り &lt;code&gt;*pp&lt;/code&gt; 。 &lt;code&gt;*bitoffsp&lt;/code&gt; の値は0〜7です。最初のバイトの未使用ビットが最上位ビットです。</target>
        </trans-unit>
        <trans-unit id="38b33826fe0b1c666930574c956c3943ee063250" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;*nbitsp&lt;/code&gt; returns the length of the bit string in &lt;strong&gt;bits&lt;/strong&gt;.</source>
          <target state="translated">いずれかの &lt;code&gt;NULL&lt;/code&gt; または &lt;code&gt;*nbitsp&lt;/code&gt; は、ビット列の長さを返し&lt;strong&gt;ビット&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5e8e8cc57d2a9968ec2ba254f6454f8c8cc973ee" translate="yes" xml:space="preserve">
          <source>Either &lt;code&gt;NULL&lt;/code&gt; or &lt;code&gt;*pp&lt;/code&gt; returns a pointer to the first byte of the bit string. The returned bit string is readable as long as the buffer pointed to by &lt;code&gt;buf&lt;/code&gt; is readable and not written to.</source>
          <target state="translated">どちらか &lt;code&gt;NULL&lt;/code&gt; または &lt;code&gt;*pp&lt;/code&gt; がビット列の最初のバイトへのポインタを返します。返されるビット文字列は、 &lt;code&gt;buf&lt;/code&gt; が指すバッファが読み取り可能であり、書き込まれない限り、読み取り可能です。</target>
        </trans-unit>
        <trans-unit id="d30f451140817c7d120ec001c6cece0c48331e09" translate="yes" xml:space="preserve">
          <source>Either a back reference, or the two characters &quot;8&quot; and &quot;1&quot;</source>
          <target state="translated">バックリファレンスか、&quot;8 &quot;と &quot;1 &quot;の2文字のどちらかです。</target>
        </trans-unit>
        <trans-unit id="cd46349522982f37a5a0818f644ecd4fc728303c" translate="yes" xml:space="preserve">
          <source>Either sends a message and returns &lt;code&gt;ok&lt;/code&gt;, or does not send the message but returns something else (see below). Otherwise the same as &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;erlang:send/2&lt;/a&gt;&lt;/code&gt;. For more detailed explanation and warnings, see &lt;code&gt;&lt;a href=&quot;#send_nosuspend-2&quot;&gt; erlang:send_nosuspend/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージを送信して &lt;code&gt;ok&lt;/code&gt; を返すか、メッセージを送信せずに別のものを返します（以下を参照）。それ以外は &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;erlang:send/2&lt;/a&gt;&lt;/code&gt; と同じです。詳細な説明と警告については、 &lt;code&gt;&lt;a href=&quot;#send_nosuspend-2&quot;&gt; erlang:send_nosuspend/2,3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d6f7085abc2ccef85b192b8c6868e5479f1516a2" translate="yes" xml:space="preserve">
          <source>Either sends a message and returns &lt;code&gt;ok&lt;/code&gt;, or does not send the message but returns something else (see below). Otherwise the same as &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;erlang:send/2&lt;/a&gt;&lt;/code&gt;. For more detailed explanation and warnings, see &lt;code&gt;&lt;a href=&quot;#send_nosuspend-2&quot;&gt;erlang:send_nosuspend/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージを送信して &lt;code&gt;ok&lt;/code&gt; を返すか、メッセージを送信せずに何かを返します（以下を参照）。それ以外は &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;erlang:send/2&lt;/a&gt;&lt;/code&gt; と同じです。詳細な説明と警告については、 &lt;code&gt;&lt;a href=&quot;#send_nosuspend-2&quot;&gt;erlang:send_nosuspend/2,3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9c7329b4b0e253e39f89da454478a65965c06ad0" translate="yes" xml:space="preserve">
          <source>Either set all or none of the &lt;code&gt;DED_LD*&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;DED_LD*&lt;/code&gt; 変数をすべて設定するか、まったく設定しないかのいずれかです。</target>
        </trans-unit>
        <trans-unit id="4e7799671ee9bcf125ace44830967d9f98d8d690" translate="yes" xml:space="preserve">
          <source>Either set all or none of the &lt;code&gt;LFS_*&lt;/code&gt; variables.</source>
          <target state="translated">&lt;code&gt;LFS_*&lt;/code&gt; 変数をすべて設定するか、まったく設定しないかのいずれかです。</target>
        </trans-unit>
        <trans-unit id="93c3f6c0504a02d19f3c9ca403c6b9bad1813d62" translate="yes" xml:space="preserve">
          <source>Either the atom &lt;code&gt;longnames&lt;/code&gt; or the atom &lt;code&gt;shortnames&lt;/code&gt; indicating whether long or short names is used.</source>
          <target state="translated">いずれかの原子 &lt;code&gt;longnames&lt;/code&gt; 又は原子 &lt;code&gt;shortnames&lt;/code&gt; 長いか短い名前が使用されているか否かを示します。</target>
        </trans-unit>
        <trans-unit id="487f7c8a7538e9346944b722752c3236ffa482d3" translate="yes" xml:space="preserve">
          <source>Either the exit reason of the process, &lt;code&gt;noproc&lt;/code&gt; (process or port did not exist at the time of monitor creation), or &lt;code&gt;noconnection&lt;/code&gt; (no connection to the node where the monitored process resides).</source>
          <target state="translated">プロセスの終了理由、 &lt;code&gt;noproc&lt;/code&gt; （モニターの作成時にプロセスまたはポートが存在しなかった）、または &lt;code&gt;noconnection&lt;/code&gt; （モニターされたプロセスが存在するノードへの接続がない）。</target>
        </trans-unit>
        <trans-unit id="c34e480bf57ef7e38dbf93bd6c9f5b3abdddea2f" translate="yes" xml:space="preserve">
          <source>Elbasan</source>
          <target state="translated">Elbasan</target>
        </trans-unit>
        <trans-unit id="92bdb0ad601fb48f836694c9ca704b151de6f4e6" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;GroupSpec&lt;/code&gt; makes it possible to specify group execution properties that overrides those in the group definition (that is, in &lt;code&gt;groups/0&lt;/code&gt;). Execution properties for subgroups might be overridden as well. This feature makes it possible to change properties of groups at the time of execution, without having to edit the test suite. The same feature is available for &lt;code&gt;group&lt;/code&gt; elements in the &lt;code&gt;Suite:all/0&lt;/code&gt; list. For details and examples, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt; Test Case Groups&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要素 &lt;code&gt;GroupSpec&lt;/code&gt; を使用すると、グループ定義（つまり、 &lt;code&gt;groups/0&lt;/code&gt; ）のプロパティをオーバーライドするグループ実行プロパティを指定できます。サブグループの実行プロパティも上書きされる可能性があります。この機能により、テストスイートを編集しなくても、実行時にグループのプロパティを変更できます。 &lt;code&gt;Suite:all/0&lt;/code&gt; リストの &lt;code&gt;group&lt;/code&gt; 要素にも同じ機能を使用できます。詳細と例については、「 &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt; Test Case Groups&lt;/a&gt;&lt;/code&gt; 」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="a3ca208403466a4841f552219491c8eba018e929" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;GroupSpec&lt;/code&gt; makes it possible to specify group execution properties that overrides those in the group definition (that is, in &lt;code&gt;groups/0&lt;/code&gt;). Execution properties for subgroups might be overridden as well. This feature makes it possible to change properties of groups at the time of execution, without having to edit the test suite. The same feature is available for &lt;code&gt;group&lt;/code&gt; elements in the &lt;code&gt;Suite:all/0&lt;/code&gt; list. For details and examples, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">要素 &lt;code&gt;GroupSpec&lt;/code&gt; を使用すると、グループ定義（つまり &lt;code&gt;groups/0&lt;/code&gt; ）のプロパティをオーバーライドするグループ実行プロパティを指定できます。サブグループの実行プロパティもオーバーライドされる場合があります。この機能により、テストスイートを編集しなくても、実行時にグループのプロパティを変更できます。同じ機能は、 &lt;code&gt;Suite:all/0&lt;/code&gt; リストの &lt;code&gt;group&lt;/code&gt; 要素にも使用できます。詳細と例については、「 &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7e3308f88fa7e4a90eab00a6aeedd94b192c76f8" translate="yes" xml:space="preserve">
          <source>Element &lt;code&gt;Location&lt;/code&gt; at the end is optional. Omitting it is equivalent to specifying an empty list.</source>
          <target state="translated">末尾の要素の &lt;code&gt;Location&lt;/code&gt; はオプションです。これを省略することは、空のリストを指定することと同じです。</target>
        </trans-unit>
        <trans-unit id="ec9d8fff696522dd91cca874c3d28af6c174f71c" translate="yes" xml:space="preserve">
          <source>Element is any of:</source>
          <target state="translated">要素は、いずれかのものです。</target>
        </trans-unit>
        <trans-unit id="968e60ba1bd927549a1b23411ba40213ea222600" translate="yes" xml:space="preserve">
          <source>Elements from the &lt;code&gt;Config&lt;/code&gt; list can, for example, be read with &lt;code&gt;proplists:get_value/2&lt;/code&gt; in STDLIB (or the macro &lt;code&gt;?config&lt;/code&gt; defined in &lt;code&gt;ct.hrl&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Config&lt;/code&gt; リストの要素は、たとえば、 &lt;code&gt;proplists:get_value/2&lt;/code&gt; （または &lt;code&gt;ct.hrl&lt;/code&gt; で定義されたマクロ &lt;code&gt;?config&lt;/code&gt; ）で読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="eb2cb18900c542ca840a5c213e23f0b3dc15b660" translate="yes" xml:space="preserve">
          <source>Elements in a tuple</source>
          <target state="translated">タプル内の要素</target>
        </trans-unit>
        <trans-unit id="d545793775877375fff2627af68fdce76d7bc2fa" translate="yes" xml:space="preserve">
          <source>Elen</source>
          <target state="translated">Elen</target>
        </trans-unit>
        <trans-unit id="5da3766347deb74cc1b458df110c22be94db592b" translate="yes" xml:space="preserve">
          <source>Elliptic Curve Diffie-Hellman</source>
          <target state="translated">楕円曲線ディフィー・エルマン</target>
        </trans-unit>
        <trans-unit id="fa431301195dd48fed6f23a7bbd84655388a6540" translate="yes" xml:space="preserve">
          <source>Elliptic Curve Diffie-Hellman is available with OpenSSL 0.9.8o or later if not disabled by configuration. To dynamically check availability, check that the atom &lt;code&gt;ecdh&lt;/code&gt; is present in the list returned by &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Elliptic Curve Diffie-Hellmanは、構成によって無効にされていない場合、OpenSSL0.9.8o以降で使用できます。可用性を動的にチェックするには、 &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(public_keys)&lt;/a&gt;&lt;/code&gt; によって返されるリストにアトム &lt;code&gt;ecdh&lt;/code&gt; が存在することを確認します。</target>
        </trans-unit>
        <trans-unit id="e73e966bd4df71c027a4c118ea65eb7371a4243d" translate="yes" xml:space="preserve">
          <source>Elliptic Curve cipher suites are supported if the Crypto application supports it and named curves are used.</source>
          <target state="translated">楕円曲線暗号スイートは、Cryptoアプリケーションがサポートしており、名前付き曲線が使用されている場合にサポートされます。</target>
        </trans-unit>
        <trans-unit id="e700b1007a66e60f0a7f4f535b564650dfff800d" translate="yes" xml:space="preserve">
          <source>Elliptic Curves</source>
          <target state="translated">楕円曲線</target>
        </trans-unit>
        <trans-unit id="2c85b928f430187c761aebf5278e8b29dec297af" translate="yes" xml:space="preserve">
          <source>Else the subdirectory &lt;code&gt;.ssh&lt;/code&gt; in the home directory of the user executing the OS process of the Erlang emulator is used.</source>
          <target state="translated">それ以外の場合は、ErlangエミュレーターのOSプロセスを実行しているユーザーのホームディレクトリにあるサブディレクトリ &lt;code&gt;.ssh&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="b9ce2f8df70b3b9f7f699376e6dadcb10ce14fcd" translate="yes" xml:space="preserve">
          <source>Else, If the option &lt;code&gt;user_dir&lt;/code&gt; is defined, that directory is used,</source>
          <target state="translated">それ以外の場合、オプション &lt;code&gt;user_dir&lt;/code&gt; が定義されている場合、そのディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="ee7b0201083ca11d6276fbd37e317c08dff08162" translate="yes" xml:space="preserve">
          <source>Else, if the &lt;code&gt;user_passwords&lt;/code&gt; option is defined and the username and the password matches, the authentication is a success.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;user_passwords&lt;/code&gt; オプションが定義されていて、ユーザー名とパスワードが一致している場合、認証は成功です。</target>
        </trans-unit>
        <trans-unit id="a589281f720ad2a72d778b5bb32dc24d843f4342" translate="yes" xml:space="preserve">
          <source>Else, if the option &lt;code&gt;password&lt;/code&gt; is defined and matches the password the authentication is a success. Note that the use of this option is not recommended in non-test code.</source>
          <target state="translated">それ以外の場合、オプションの &lt;code&gt;password&lt;/code&gt; が定義されていて、パスワードと一致する場合、認証は成功します。このオプションの使用は、非テストコードでは推奨されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4222989fc4f8ea6a86e6368dd890fe3a7e3a9888" translate="yes" xml:space="preserve">
          <source>Em quad</source>
          <target state="translated">クワッドで</target>
        </trans-unit>
        <trans-unit id="b895da879ed23d9e84111f08fcadea33bce091c1" translate="yes" xml:space="preserve">
          <source>Em space</source>
          <target state="translated">宇宙では</target>
        </trans-unit>
        <trans-unit id="9bf49a8e8e16e64d1e80f11162b14dd5a6925b12" translate="yes" xml:space="preserve">
          <source>Emacs integration</source>
          <target state="translated">Emacs の統合</target>
        </trans-unit>
        <trans-unit id="74ecfadd2780297c01438b6cea78b633f6b22ee8" translate="yes" xml:space="preserve">
          <source>Emakefile</source>
          <target state="translated">Emakefile</target>
        </trans-unit>
        <trans-unit id="57277b8bd9c47d99e492b166fbdc87545de80f47" translate="yes" xml:space="preserve">
          <source>Embedded Named Types</source>
          <target state="translated">埋め込み型の名前付きタイプ</target>
        </trans-unit>
        <trans-unit id="53217bbe98515c64d0537b3a416e9cda98f14cfd" translate="yes" xml:space="preserve">
          <source>Embedded Structured Types</source>
          <target state="translated">埋め込み構造化タイプ</target>
        </trans-unit>
        <trans-unit id="1a9e1619cb718522f7ab0f0dba6e08852aa8d86c" translate="yes" xml:space="preserve">
          <source>Emits warnings for all implicitly exported variables referred to after the primitives where they were first defined. By default, the compiler only emits warnings for exported variables referred to in a pattern.</source>
          <target state="translated">最初に定義されたプリミティブの後で参照されるすべての暗黙のうちにエクスポートされた変数に対して警告を表示します。既定では、コンパイラはパターンで参照されるエクスポートされた変数に対してのみ警告を発します。</target>
        </trans-unit>
        <trans-unit id="d4c2117b6ef3fcf84bfe3899fed68d89773c2661" translate="yes" xml:space="preserve">
          <source>Emits warnings for unused imported functions. Default is to emit no warnings for unused imported functions.</source>
          <target state="translated">未使用のインポート関数に対して警告を表示します。デフォルトでは、未使用のインポート関数に対して警告を表示しません。</target>
        </trans-unit>
        <trans-unit id="d8599dc127f27a271f0836cf6a62d5941fe3178a" translate="yes" xml:space="preserve">
          <source>Emitting Exit Signals</source>
          <target state="translated">出口信号を発する</target>
        </trans-unit>
        <trans-unit id="d901413f50becfae6fdd27d649c08a5d538e0014" translate="yes" xml:space="preserve">
          <source>Empty documents are occasionally useful; in particular, they have the property that &lt;code&gt;above(X, empty())&lt;/code&gt; will force a new line after &lt;code&gt;X&lt;/code&gt; without leaving an empty line below it; since this is a common idiom, the utility function &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;break/1&lt;/a&gt;&lt;/code&gt; will place a given document in such a context.</source>
          <target state="translated">空のドキュメントが役立つ場合があります。特に、 &lt;code&gt;above(X, empty())&lt;/code&gt; は、 &lt;code&gt;X&lt;/code&gt; の下に空行を残さずに新しい行を強制するというプロパティを持っています。これは一般的なイディオムであるため、ユーティリティ関数 &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;break/1&lt;/a&gt;&lt;/code&gt; は特定のドキュメントをそのようなコンテキストに配置します。</target>
        </trans-unit>
        <trans-unit id="fc00f52599abed8376aa0a197e15e0ea835df63f" translate="yes" xml:space="preserve">
          <source>Emulator flag &lt;code&gt;+fnu&lt;/code&gt; is ignored.</source>
          <target state="translated">エミュレータフラグ &lt;code&gt;+fnu&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="55e05c2f7b68cf5e80a54adf43f642d47a0f59b3" translate="yes" xml:space="preserve">
          <source>En quad</source>
          <target state="translated">エンクアッド</target>
        </trans-unit>
        <trans-unit id="5b62229c904d32c8112d3be27a54257af67d740a" translate="yes" xml:space="preserve">
          <source>En space</source>
          <target state="translated">エンスペース</target>
        </trans-unit>
        <trans-unit id="25ffb040887bf2788091d6954b71659dc5c37d66" translate="yes" xml:space="preserve">
          <source>Enable automatic gc of the mib server cache.</source>
          <target state="translated">mibサーバーキャッシュの自動gcを有効にします。</target>
        </trans-unit>
        <trans-unit id="fd6f2bb237a816f3fbfe6d4d2c6878e556d33f2f" translate="yes" xml:space="preserve">
          <source>Enable code coverage analysis (similar to &lt;code&gt;ct_run -cover&lt;/code&gt;).</source>
          <target state="translated">コードカバレッジ分析を有効にします（ &lt;code&gt;ct_run -cover&lt;/code&gt; と同様）。</target>
        </trans-unit>
        <trans-unit id="90a330d2bc3b5e0f4b42739d294b1f200e628844" translate="yes" xml:space="preserve">
          <source>Enable or disable debug during the open call.</source>
          <target state="translated">オープンコール中のデバッグを有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="c21cd0052bbd4aec688bd575486e424a3296ba0c" translate="yes" xml:space="preserve">
          <source>Enable or disable use of the socket registry for this socket. This overrides the global value.</source>
          <target state="translated">このソケットのソケットレジストリの使用を有効または無効にします。これはグローバル値よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="47033a4bb8f28d29d58e4994c4d9050176047e9e" translate="yes" xml:space="preserve">
          <source>Enable process tracing for new processes and use &lt;code&gt;dyntrace&lt;/code&gt; as tracer backend.</source>
          <target state="translated">新しいプロセスのプロセストレースを有効にし、 &lt;code&gt;dyntrace&lt;/code&gt; バックエンドとしてdyntraceを使用します。</target>
        </trans-unit>
        <trans-unit id="42b73ef7216dacb5d34f7ba030c613404e7e43a1" translate="yes" xml:space="preserve">
          <source>Enable the mib server cache.</source>
          <target state="translated">mibサーバーキャッシュを有効にします。</target>
        </trans-unit>
        <trans-unit id="4d4a9638a58d251377650d5cc7a8a58f9862c35d" translate="yes" xml:space="preserve">
          <source>Enable the process_register LTTng tracepoint for Erlang.</source>
          <target state="translated">Erlangのprocess_register LTTng tracepointを有効にします。</target>
        </trans-unit>
        <trans-unit id="9a59268c48f3b857ba83c67b5ea54f91ebdaa5a0" translate="yes" xml:space="preserve">
          <source>Enables (&lt;code&gt;Enable = true&lt;/code&gt;) or disables (&lt;code&gt;Enable = false&lt;/code&gt;) FIPS mode. Returns &lt;code&gt;true&lt;/code&gt; if the operation was successful or &lt;code&gt;false&lt;/code&gt; otherwise.</source>
          <target state="translated">FIPSモードを有効（ &lt;code&gt;Enable = true&lt;/code&gt; ）または無効（ &lt;code&gt;Enable = false&lt;/code&gt; ）にします。操作が成功した場合は &lt;code&gt;true&lt;/code&gt; を返し、そうでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="086f907d75188b886010563f8bd5580d7dfa5ad7" translate="yes" xml:space="preserve">
          <source>Enables (&lt;code&gt;Flag == true&lt;/code&gt;) or disables (&lt;code&gt;Flag == false&lt;/code&gt;) printout of standard events to the terminal.</source>
          <target state="translated">端末への標準イベントの出力を有効（ &lt;code&gt;Flag == true&lt;/code&gt; ）または無効（ &lt;code&gt;Flag == false&lt;/code&gt; ）にします。</target>
        </trans-unit>
        <trans-unit id="c455979edd964441a42bf74cc46c686c8c9674e4" translate="yes" xml:space="preserve">
          <source>Enables (&lt;code&gt;true&lt;/code&gt;) or disables (&lt;code&gt;false&lt;/code&gt;) the possibility to tunnel a TCP/IP connection in to a &lt;code&gt;server&lt;/code&gt;. Disabled per default.</source>
          <target state="translated">TCP / IP接続を &lt;code&gt;server&lt;/code&gt; にトンネリングする可能性を有効（ &lt;code&gt;true&lt;/code&gt; ）または無効（ &lt;code&gt;false&lt;/code&gt; ）にします。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="c34c585883308ccf10a9a0f2b7ca4c0bea6cad17" translate="yes" xml:space="preserve">
          <source>Enables (&lt;code&gt;true&lt;/code&gt;) or disables (&lt;code&gt;false&lt;/code&gt;) the possibility to tunnel a TCP/IP connection out of a &lt;code&gt;server&lt;/code&gt;. Disabled per default.</source>
          <target state="translated">&lt;code&gt;server&lt;/code&gt; からTCP / IP接続をトンネリングする可能性を有効（ &lt;code&gt;true&lt;/code&gt; ）または無効（ &lt;code&gt;false&lt;/code&gt; ）にします。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="19643cf04bb22173cf35df90be432b41c2c0c80f" translate="yes" xml:space="preserve">
          <source>Enables &lt;code&gt;sys_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sys_alloc&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="2925b3bafb5ae4152db5d7ac7ad43b60459fcd09" translate="yes" xml:space="preserve">
          <source>Enables SAC delay</source>
          <target state="translated">SAC遅延を有効にします。</target>
        </trans-unit>
        <trans-unit id="60585639720a7d6f2dcd45081510159d2d44e676" translate="yes" xml:space="preserve">
          <source>Enables a table-specific parameterization of a generic hash module. This property can explicitly be set at table creation. Default is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">汎用ハッシュモジュールのテーブル固有のパラメーター化を有効にします。このプロパティは、テーブルの作成時に明示的に設定できます。デフォルトは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a8e12000a8c8fd6dc64847bf440cb7b251ca8594" translate="yes" xml:space="preserve">
          <source>Enables all allocators (default).</source>
          <target state="translated">すべてのアロケータを有効にします(デフォルト)。</target>
        </trans-unit>
        <trans-unit id="66de0b189789174995d11e9a7ecdc4b4c55056e9" translate="yes" xml:space="preserve">
          <source>Enables all breakpoints.</source>
          <target state="translated">すべてのブレークポイントを有効にします。</target>
        </trans-unit>
        <trans-unit id="77e83ac48ceff1b4f43eaffc497baace9759de30" translate="yes" xml:space="preserve">
          <source>Enables allocator &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">アロケータ &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; を有効にします。</target>
        </trans-unit>
        <trans-unit id="2df58c7f8ed4e32b890b81f44943b59779b18455" translate="yes" xml:space="preserve">
          <source>Enables autoload tracing, displaying information while loading code.</source>
          <target state="translated">自動ロードトレースを有効にし、コードをロード中に情報を表示します。</target>
        </trans-unit>
        <trans-unit id="e63213e4ec392a2d1540f7cfff72fc5cfb579a1d" translate="yes" xml:space="preserve">
          <source>Enables automatic &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;timetrap time-out&lt;/a&gt;&lt;/code&gt; scaling.</source>
          <target state="translated">自動 &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;timetrap time-out&lt;/a&gt;&lt;/code&gt; スケーリングを有効にします。</target>
        </trans-unit>
        <trans-unit id="7c1880c250eb08af05373e2f459afdf06f86ade5" translate="yes" xml:space="preserve">
          <source>Enables automatic Path MTU discovery</source>
          <target state="translated">パスMTUの自動検出を有効にします。</target>
        </trans-unit>
        <trans-unit id="4a450a6d403248f14eea46a3f225948ab6482c2b" translate="yes" xml:space="preserve">
          <source>Enables checking of the &lt;code&gt;&lt;a href=&quot;#type-authentication_client_options&quot;&gt;client's user name&lt;/a&gt;&lt;/code&gt; in the server when doing public key authentication. It is disabled by default.</source>
          <target state="translated">公開鍵認証を行うときに、サーバー内の &lt;code&gt;&lt;a href=&quot;#type-authentication_client_options&quot;&gt;client's user name&lt;/a&gt;&lt;/code&gt; チェックを有効にします。デフォルトでは無効になっています。</target>
        </trans-unit>
        <trans-unit id="1aaeb3427c0032642a4226c0cd3b5f50f5fb209d" translate="yes" xml:space="preserve">
          <source>Enables debug output. The more &lt;code&gt;-d&lt;/code&gt; flags specified, the more debug output you will get (to a certain limit). This option is most useful when the &lt;code&gt;epmd&lt;/code&gt; daemon is not started as a daemon.</source>
          <target state="translated">デバッグ出力を有効にします。 &lt;code&gt;-d&lt;/code&gt; フラグをより多く指定すると、より多くのデバッグ出力が得られます（特定の制限まで）。このオプションは、 &lt;code&gt;epmd&lt;/code&gt; デーモンがデーモンとして開始されていない場合に最も役立ちます。</target>
        </trans-unit>
        <trans-unit id="dc4bb9c9b6967fcf2db9ac785f5fa835fda825a8" translate="yes" xml:space="preserve">
          <source>Enables definition of an alternative hashing scheme. The module must implement the &lt;code&gt;&lt;a href=&quot;mnesia_frag_hash&quot;&gt;mnesia_frag_hash&lt;/a&gt;&lt;/code&gt; callback behavior. This property can explicitly be set at table creation. Default is &lt;code&gt;mnesia_frag_hash&lt;/code&gt;.</source>
          <target state="translated">代替ハッシュスキームの定義を有効にします。モジュールは &lt;code&gt;&lt;a href=&quot;mnesia_frag_hash&quot;&gt;mnesia_frag_hash&lt;/a&gt;&lt;/code&gt; コールバック動作を実装する必要があります。このプロパティは、テーブルの作成時に明示的に設定できます。デフォルトは &lt;code&gt;mnesia_frag_hash&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3a700ff4718bb88a01bb446ce6cbb93500e0f99a" translate="yes" xml:space="preserve">
          <source>Enables fetching of CRLs specified as http URIs in&lt;code&gt;X509 certificate extensions&lt;/code&gt;. Requires the OTP inets application.</source>
          <target state="translated">&lt;code&gt;X509 certificate extensions&lt;/code&gt; でhttp URIとして指定されたCRLのフェッチを有効にします。OTP inetsアプリケーションが必要です。</target>
        </trans-unit>
        <trans-unit id="ad67ee1b0fedae077d66e983c37484352f51633e" translate="yes" xml:space="preserve">
          <source>Enables heartbeat</source>
          <target state="translated">心臓の鼓動を有効にする</target>
        </trans-unit>
        <trans-unit id="a3907a70a0b2989a151817232d2aeddc263d8c16" translate="yes" xml:space="preserve">
          <source>Enables installation of alternative debug functions. An example of such a function is a trigger, a function that waits for some special event and performs some action when the event is generated. For example, turning on low-level tracing.</source>
          <target state="translated">代替のデバッグ関数のインストールを可能にします。このような関数の例としては、トリガー、つまり特別なイベントを待ち、イベントが発生したときに何らかのアクションを実行する関数があります。例えば、低レベルのトレースをオンにします。</target>
        </trans-unit>
        <trans-unit id="ffe6f57150e2b9c16f36b6e2673242748d6ce067" translate="yes" xml:space="preserve">
          <source>Enables modification of the logging behavior, see &lt;code&gt;&lt;a href=&quot;run_test_chapter#logopts&quot;&gt;Log options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ロギング動作の変更を有効にし &lt;code&gt;&lt;a href=&quot;run_test_chapter#logopts&quot;&gt;Log options&lt;/a&gt;&lt;/code&gt; 。ログオプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="357280b780d03061af846c26360d95eeff0c67f7" translate="yes" xml:space="preserve">
          <source>Enables modified timing and sets the modified timing level. Valid range is 0-9. The timing of the runtime system is changed. A high level usually means a greater change than a low level. Changing the timing can be very useful for finding timing-related bugs.</source>
          <target state="translated">修正タイミングを有効にし、修正タイミングレベルを設定します。有効範囲は0~9です。ランタイムシステムのタイミングが変更される。高いレベルは通常、低いレベルよりも大きな変化を意味します。タイミングを変更することは、タイミング関連のバグを見つけるのに非常に便利です。</target>
        </trans-unit>
        <trans-unit id="2af7dc33c7cb12530925d2f6df368f232e29cfaa" translate="yes" xml:space="preserve">
          <source>Enables or disables &lt;code&gt; scheduler utilization&lt;/code&gt; balancing of load. By default scheduler utilization balancing is disabled and instead scheduler compaction of load is enabled, which strives for a load distribution that causes as many scheduler threads as possible to be fully loaded (that is, not run out of work). When scheduler utilization balancing is enabled, the system instead tries to balance scheduler utilization between schedulers. That is, strive for equal scheduler utilization on all schedulers.</source>
          <target state="translated">負荷の &lt;code&gt; scheduler utilization&lt;/code&gt; バランシングを有効または無効にします。デフォルトでは、スケジューラー使用率のバランシングは無効になっており、代わりにスケジューラーによる負荷の圧縮が有効になっています。これにより、可能な限り多くのスケジューラースレッドが完全にロードされる（つまり、作業が不足しない）負荷分散が実現されます。スケジューラー使用率バランシングが有効になっている場合、システムは代わりにスケジューラー間でスケジューラー使用率のバランスをとろうとします。つまり、すべてのスケジューラーでスケジューラーの使用率が等しくなるように努めます。</target>
        </trans-unit>
        <trans-unit id="615f0c0aff5e4fca8ae52bd7ab1a8c331579d793" translate="yes" xml:space="preserve">
          <source>Enables or disables &lt;code&gt;&lt;a href=&quot;time_correction#Time_Correction&quot;&gt;time correction&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Time_Correction&quot;&gt;time correction&lt;/a&gt;&lt;/code&gt; を有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="d823391dc2d43021b24dfe428d56fd43f464182a" translate="yes" xml:space="preserve">
          <source>Enables or disables &lt;code&gt;scheduler utilization&lt;/code&gt; balancing of load. By default scheduler utilization balancing is disabled and instead scheduler compaction of load is enabled, which strives for a load distribution that causes as many scheduler threads as possible to be fully loaded (that is, not run out of work). When scheduler utilization balancing is enabled, the system instead tries to balance scheduler utilization between schedulers. That is, strive for equal scheduler utilization on all schedulers.</source>
          <target state="translated">負荷の &lt;code&gt;scheduler utilization&lt;/code&gt; バランシングを有効または無効にします。デフォルトでは、スケジューラ使用率の分散は無効になっており、代わりに負荷のスケジューラ圧縮が有効になっています。これにより、可能な限り多くのスケジューラスレッドが完全に読み込まれる（つまり、作業が不足しない）負荷分散を目指します。スケジューラー使用率バランシングが有効になっている場合、システムは代わりにスケジューラー間のスケジューラー使用率のバランスを取ろうとします。つまり、すべてのスケジューラでスケジューラの使用率が等しくなるように努めます。</target>
        </trans-unit>
        <trans-unit id="1e32eab9107eaf08c77b89032d18371faffb6cdc" translate="yes" xml:space="preserve">
          <source>Enables or disables &lt;strong&gt;call tracing&lt;/strong&gt; for one or more functions. Must be combined with &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; to set the &lt;code&gt;call&lt;/code&gt; trace flag for one or more processes.</source>
          <target state="translated">1つ以上の関数の&lt;strong&gt;呼び出しトレース&lt;/strong&gt;を有効または無効にします。1つ以上のプロセスの &lt;code&gt;call&lt;/code&gt; トレースフラグを設定するには、 &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; と組み合わせる必要があります。</target>
        </trans-unit>
        <trans-unit id="2526ae91dd204d3d2ab7ffcfeb2b5857d6c093f2" translate="yes" xml:space="preserve">
          <source>Enables or disables OS signals.</source>
          <target state="translated">OS 信号の有効・無効を設定します。</target>
        </trans-unit>
        <trans-unit id="1c4032d67b9cd3bef26458eda1149afa48dbaf5f" translate="yes" xml:space="preserve">
          <source>Enables or disables printout of standard events to a file.</source>
          <target state="translated">標準イベントのファイルへの印刷を有効または無効にします。</target>
        </trans-unit>
        <trans-unit id="f873933c3614b84347efc49bd44a15cf27eb0ad2" translate="yes" xml:space="preserve">
          <source>Enables or disables scheduler compaction of load. By default scheduler compaction of load is enabled. When enabled, load balancing strives for a load distribution, which causes as many scheduler threads as possible to be fully loaded (that is, not run out of work). This is accomplished by migrating load (for example, runnable processes) into a smaller set of schedulers when schedulers frequently run out of work. When disabled, the frequency with which schedulers run out of work is not taken into account by the load balancing logic.</source>
          <target state="translated">スケジューラによる負荷の圧縮を有効または無効にします。デフォルトでは、スケジューラによる負荷の圧縮は有効になっています。有効にすると、ロードバランシングは負荷分散を行い、できるだけ多くのスケジューラスレッドが完全にロードされるようにします(つまり、仕事が尽きないようにします)。これは、スケジューラが頻繁に仕事を使い果たした場合に、負荷(例えば、実行可能なプロセス)をより小さなスケジューラのセットに移行することで達成されます。この機能を無効にすると、スケジューラがワークアウトする頻度は、負荷分散ロジックでは考慮されません。</target>
        </trans-unit>
        <trans-unit id="8cac6a4d74e5fb7ad5378afd8802105af7c1d25f" translate="yes" xml:space="preserve">
          <source>Enables or disables the collection of statistics. If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;get&lt;/code&gt;, the statistical collection is returned.</source>
          <target state="translated">統計の収集を有効または無効にします。場合は &lt;code&gt;Flag&lt;/code&gt; ある &lt;code&gt;get&lt;/code&gt; 、統計的なコレクションが返されます。</target>
        </trans-unit>
        <trans-unit id="38ff1c7d6436d6406a601e79d21b1dc7a693e097" translate="yes" xml:space="preserve">
          <source>Enables or disables the logging of all system events in text format to the file. The events are formatted with a function that is defined by the process that generated the event (with a call to &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4&lt;/a&gt;&lt;/code&gt;). The file is opened with encoding UTF-8.</source>
          <target state="translated">テキスト形式のすべてのシステムイベントのファイルへのロギングを有効または無効にします。イベントは、（ &lt;code&gt;&lt;a href=&quot;#handle_debug-4&quot;&gt;handle_debug/4&lt;/a&gt;&lt;/code&gt; の呼び出しを使用して）イベントを生成したプロセスによって定義された関数でフォーマットされます。ファイルはUTF-8エンコードで開かれます。</target>
        </trans-unit>
        <trans-unit id="706a0f363687eafe06b91d6585ebbab3881c8cb3" translate="yes" xml:space="preserve">
          <source>Enables saving of abstract structure on file for debugging purpose.</source>
          <target state="translated">デバッグ用に抽象構造体をファイルに保存できるようにします。</target>
        </trans-unit>
        <trans-unit id="d9853ba1a8ea65043efdb893f1250a28d51ec84b" translate="yes" xml:space="preserve">
          <source>Enables the &lt;code&gt;os_sup&lt;/code&gt; service. Needed on Solaris only.</source>
          <target state="translated">&lt;code&gt;os_sup&lt;/code&gt; サービスを有効にします。Solarisでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="3299ed2aa6cc796f27c06b5528ac008312e30a87" translate="yes" xml:space="preserve">
          <source>Enables the TLS/DTLS server to have a local policy for deciding if a session is to be reused or not. Meaningful only if &lt;code&gt;reuse_sessions&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;. &lt;code&gt;SuggestedSessionId&lt;/code&gt; is a &lt;code&gt;binary()&lt;/code&gt;, &lt;code&gt;PeerCert&lt;/code&gt; is a DER-encoded certificate, &lt;code&gt;Compression&lt;/code&gt; is an enumeration integer, and &lt;code&gt;CipherSuite&lt;/code&gt; is of type &lt;code&gt;ciphersuite()&lt;/code&gt;.</source>
          <target state="translated">TLS / DTLSサーバーが、セッションを再利用するかどうかを決定するためのローカルポリシーを持つことができるようにします。 &lt;code&gt;reuse_sessions&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合にのみ意味があります。 &lt;code&gt;SuggestedSessionId&lt;/code&gt; は &lt;code&gt;binary()&lt;/code&gt; 、 &lt;code&gt;PeerCert&lt;/code&gt; はDERエンコードされた証明書、 &lt;code&gt;Compression&lt;/code&gt; は列挙整数、 &lt;code&gt;CipherSuite&lt;/code&gt; はタイプ &lt;code&gt;ciphersuite()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c522128b3a7019b49d9a0b8a5e0473a314dfc7fa" translate="yes" xml:space="preserve">
          <source>Enables the autoresume feature. When enabled, remote nodes try to reconnect to the controlling node if they are restarted. The feature requires application Runtime_Tools to be started (so it has to be present in the &lt;code&gt;.boot&lt;/code&gt; scripts if the traced nodes run with embedded Erlang). If this is not possible, resume can be performed manually by starting &lt;code&gt;Runtime_Tools&lt;/code&gt; remotely using &lt;code&gt;rpc:call/4&lt;/code&gt;.</source>
          <target state="translated">自動再開機能を有効にします。有効にすると、リモートノードが再起動すると、制御ノードへの再接続を試みます。この機能を使用するには、アプリケーションのRuntime_Toolsを起動する必要があります（トレースされたノードが埋め込みErlangで実行されている場合は、 &lt;code&gt;.boot&lt;/code&gt; スクリプトに存在する必要があります）。これが不可能な場合は、 &lt;code&gt;rpc:call/4&lt;/code&gt; を使用してリモートで &lt;code&gt;Runtime_Tools&lt;/code&gt; を開始することにより、手動で再開できます。</target>
        </trans-unit>
        <trans-unit id="44c529662c2d69b9e4411fc182619f06a2aa4994" translate="yes" xml:space="preserve">
          <source>Enables the code path cache of the code server; see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">コードサーバーのコードパスキャッシュを有効にします。 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="27f7a0694e3964dbe3f3f0deff4a82e761a20c55" translate="yes" xml:space="preserve">
          <source>Enables time correction. This is the default if time correction is supported on the specific platform.</source>
          <target state="translated">時刻補正を有効にします。これは、特定のプラットフォームで時刻補正がサポートされている場合のデフォルトです。</target>
        </trans-unit>
        <trans-unit id="1f48bf86a5ea414b568d06bccd0c39df4107ada1" translate="yes" xml:space="preserve">
          <source>Enables to efficiently read the terms that are appended to a log. Minimises disk I/O by reading 64 kilobyte chunks from the file.</source>
          <target state="translated">ログに追加された用語を効率的に読み込めるようにします。ファイルから64キロバイトのチャンクを読み込むことで、ディスクI/Oを最小化します。</target>
        </trans-unit>
        <trans-unit id="9a0c56d593d7b6385220fb5c3c0f22c02a031e9c" translate="yes" xml:space="preserve">
          <source>Enables tracing for all received messages (to &lt;code&gt;'receive'&lt;/code&gt; traced processes). Any match specification is removed. &lt;strong&gt;This is the default&lt;/strong&gt;.</source>
          <target state="translated">受信したすべてのメッセージのトレースを有効にします（トレースされたプロセスを &lt;code&gt;'receive'&lt;/code&gt; するため）。一致指定はすべて削除されます。&lt;strong&gt;これがデフォルトです&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c0650d46dedcd7a949e16c3270a03871e5edb6c2" translate="yes" xml:space="preserve">
          <source>Enables tracing for all sent messages (from &lt;code&gt;send&lt;/code&gt; traced processes). Any match specification is removed. &lt;strong&gt;This is the default&lt;/strong&gt;.</source>
          <target state="translated">（ &lt;code&gt;send&lt;/code&gt; トレースプロセスからの）すべての送信メッセージのトレースを有効にします。一致指定はすべて削除されます。&lt;strong&gt;これがデフォルトです&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="24884b0a02a3d3730cdbdf4ea864f21b5887858d" translate="yes" xml:space="preserve">
          <source>Enables tracing for the matching functions. Any match specification is removed.</source>
          <target state="translated">マッチング関数のトレースを有効にします。マッチ指定はすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="4dbe510dd55a873bed641c91ad586814883d3ac4" translate="yes" xml:space="preserve">
          <source>Enables verbose output.</source>
          <target state="translated">冗長出力を有効にします。</target>
        </trans-unit>
        <trans-unit id="1d63208713c20c60f36d4a0bd52fdfeeaac74557" translate="yes" xml:space="preserve">
          <source>Enables/disables periodic transmission on a connected socket when no other data is exchanged. If the other end does not respond, the connection is considered broken and an error message is sent to the controlling process. Defaults to &lt;code&gt;disabled&lt;/code&gt;.</source>
          <target state="translated">他のデータが交換されない場合に、接続されたソケットでの定期的な送信を有効または無効にします。もう一方の端が応答しない場合、接続は切断されたと見なされ、エラーメッセージが制御プロセスに送信されます。デフォルトは &lt;code&gt;disabled&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc8852a728863245cf6c2ea5864c53ec32099900" translate="yes" xml:space="preserve">
          <source>Enables/disables permission to send broadcasts.</source>
          <target state="translated">ブロードキャストの送信許可を有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="50b6e1cb035c7e1653d306c33b0528a17000184c" translate="yes" xml:space="preserve">
          <source>Enables/disables routing bypass for outgoing messages.</source>
          <target state="translated">送信メッセージのルーティングバイパスを有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="9fcc3abb54019e5dbbe11160d545772b5ffb3c9a" translate="yes" xml:space="preserve">
          <source>Enabling FIPS mode will also disable algorithms and features.</source>
          <target state="translated">FIPS モードを有効にすると、アルゴリズムと機能も無効になります。</target>
        </trans-unit>
        <trans-unit id="573a8fde2e1fa269c9fcf8e97134769f903a40af" translate="yes" xml:space="preserve">
          <source>Enabling the service includes actions which require root privileges, such as change of ownership and file privileges of an executable binary file, and creating a modified copy of the configuration file for &lt;code&gt;syslogd&lt;/code&gt;. When &lt;code&gt;os_sup&lt;/code&gt; is terminated, the service must be disabled, meaning the original configuration must be restored. Enabling/disabling can be done either outside or inside &lt;code&gt;os_sup&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#config&quot;&gt;Configuration&lt;/a&gt;&lt;/code&gt; below.</source>
          <target state="translated">サービスの有効化には、実行可能バイナリファイルの所有権やファイル特権の変更、 &lt;code&gt;syslogd&lt;/code&gt; の構成ファイルの変更されたコピーの作成など、ルート特権を必要とするアクションが含まれます。 &lt;code&gt;os_sup&lt;/code&gt; が終了したら、サービスを無効にする必要があります。つまり、元の構成を復元する必要があります。有効化/無効化は、 &lt;code&gt;os_sup&lt;/code&gt; の外部または内部で実行できます。以下の &lt;code&gt;&lt;a href=&quot;#config&quot;&gt;Configuration&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d9f192da9606fd7fd5869526f37b21f3dd2a7c7e" translate="yes" xml:space="preserve">
          <source>Enabling the service includes actions which require root privileges, such as change of ownership and file privileges of an executable binary file, and creating a modified copy of the configuration file for &lt;code&gt;syslogd&lt;/code&gt;. When &lt;code&gt;os_sup&lt;/code&gt; is terminated, the service must be disabled, meaning the original configuration must be restored. Enabling/disabling can be done either outside or inside &lt;code&gt;os_sup&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;#config&quot;&gt;Configuration&lt;/a&gt;&lt;/code&gt; below.</source>
          <target state="translated">サービスの有効化には、実行可能バイナリファイルの所有権やファイル権限の変更、 &lt;code&gt;syslogd&lt;/code&gt; の構成ファイルの変更されたコピーの作成など、root権限を必要とするアクションが含まれます。 &lt;code&gt;os_sup&lt;/code&gt; を終了するときは、サービスを無効にする必要があります。つまり、元の構成を復元する必要があります。有効化/無効化は、 &lt;code&gt;os_sup&lt;/code&gt; の外部または内部で実行できます。以下の &lt;code&gt;&lt;a href=&quot;#config&quot;&gt;Configuration&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="c23d78e950c37608799201d0c2cc33f07da966c6" translate="yes" xml:space="preserve">
          <source>EncFlag :: true) -&amp;gt;</source>
          <target state="translated">EncFlag :: true) -&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c511033aa027d017fda29e8a006bfb9f353b3a48" translate="yes" xml:space="preserve">
          <source>EncFlag) -&amp;gt;</source>
          <target state="translated">EncFlag) -&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f4393b5f9d380987d4ced572aaef9ee8a74133bf" translate="yes" xml:space="preserve">
          <source>Enclosing mark</source>
          <target state="translated">封入マーク</target>
        </trans-unit>
        <trans-unit id="bca8cc4256c0c31c63935cf063643e54997e3d43" translate="yes" xml:space="preserve">
          <source>Encode (generate) an SDP construct.</source>
          <target state="translated">SDP 構成をエンコード (生成)する。</target>
        </trans-unit>
        <trans-unit id="bc6b76a0bae3808e8c4c861292502c13fd082970" translate="yes" xml:space="preserve">
          <source>Encode a Diameter message.</source>
          <target state="translated">Diameterメッセージをエンコードします。</target>
        </trans-unit>
        <trans-unit id="f48c48f6cdcaa4ee965faed6f3e5d2dd4fe0ed0a" translate="yes" xml:space="preserve">
          <source>Encode a megaco action reply. If this, for whatever reason, is not supported, the function should return the error reason &lt;code&gt;not_implemented&lt;/code&gt;.</source>
          <target state="translated">megacoアクション応答をエンコードします。何らかの理由でこれがサポートされていない場合、関数はエラー理由 &lt;code&gt;not_implemented&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="919696abd8a16da6f19a76ce339cffb55a6348e1" translate="yes" xml:space="preserve">
          <source>Encode a megaco message.</source>
          <target state="translated">メガメッセージをエンコードします。</target>
        </trans-unit>
        <trans-unit id="267e2bf6ea12bf30c6d27046637855d09ac7cfca" translate="yes" xml:space="preserve">
          <source>Encode a megaco transaction. If this, for whatever reason, is not supported, the function should return the error reason &lt;code&gt;not_implemented&lt;/code&gt;.</source>
          <target state="translated">megacoトランザクションをエンコードします。何らかの理由でこれがサポートされていない場合、関数はエラー理由 &lt;code&gt;not_implemented&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="70ef8fa05ae9c6457354b1cad354772ba81b3d6f" translate="yes" xml:space="preserve">
          <source>Encode and Decode Functions for SNMP PDUs</source>
          <target state="translated">SNMP PDUのエンコードおよびデコード機能</target>
        </trans-unit>
        <trans-unit id="102d654a81f03bcc7db3fbb3416263b493d476e7" translate="yes" xml:space="preserve">
          <source>Encode megaco action requests. This function is called when the user calls the function &lt;code&gt;&lt;a href=&quot;megaco#encode_actions&quot;&gt;encode_actions/3&lt;/a&gt;&lt;/code&gt;. If that function is never used or if the codec cannot support this (the encoding of individual actions), then return with error reason &lt;code&gt;not_implemented&lt;/code&gt;.</source>
          <target state="translated">megacoアクション要求をエンコードします。この関数は、ユーザーが関数 &lt;code&gt;&lt;a href=&quot;megaco#encode_actions&quot;&gt;encode_actions/3&lt;/a&gt;&lt;/code&gt; を呼び出したときに呼び出されます。その関数が使用されない場合、またはコーデックがこれをサポートできない場合（個々のアクションのエンコーディング）、エラー理由 &lt;code&gt;not_implemented&lt;/code&gt; で戻ります。</target>
        </trans-unit>
        <trans-unit id="27f649a79f32171afe094c758b92176d7cfd9a23" translate="yes" xml:space="preserve">
          <source>Encoded as an atom, using &lt;code&gt;&lt;a href=&quot;#ATOM_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt; ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;. Is the module that the fun is implemented in.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ATOM_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt; ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; を使用して、アトムとしてエンコードされます。楽しみが実装されているモジュールです。</target>
        </trans-unit>
        <trans-unit id="cc7359ada67aed32ddecafb9495d6e88769570ad" translate="yes" xml:space="preserve">
          <source>Encoded as an atom, using &lt;code&gt;&lt;a href=&quot;#ATOM_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;. Is the module that the fun is implemented in.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ATOM_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; を使用して、アトムとしてエンコードされます。funが実装されているモジュールです。</target>
        </trans-unit>
        <trans-unit id="e3b928bc70891ebc97a0d114e15fcabc81155c57" translate="yes" xml:space="preserve">
          <source>Encoded as an atom, using &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt; ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;. This is the module that the fun is implemented in.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt; ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; を使用して、アトムとしてエンコードされます。これは、funが実装されているモジュールです。</target>
        </trans-unit>
        <trans-unit id="a95dc8048f6280b2e1bb9aeb3ae170e17dd6166e" translate="yes" xml:space="preserve">
          <source>Encoded as an atom, using &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;. This is the module that the fun is implemented in.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; を使用して、アトムとしてエンコードされます。これはfunが実装されているモジュールです。</target>
        </trans-unit>
        <trans-unit id="5443536e350a97a2172212037b9f508ff80ac36e" translate="yes" xml:space="preserve">
          <source>Encodes SNMP UsmSecurityParameters into a list of bytes.</source>
          <target state="translated">SNMP UsmSecurityParametersをバイトのリストにエンコードします。</target>
        </trans-unit>
        <trans-unit id="05c49e564fbd4be907c60f1d9484dc8cfc4ffd8d" translate="yes" xml:space="preserve">
          <source>Encodes a GCC &lt;code&gt;long long&lt;/code&gt; or Visual C++ &lt;code&gt;__int64&lt;/code&gt; (64-bit) integer in the binary format.</source>
          <target state="translated">GCCをコードする &lt;code&gt;long long&lt;/code&gt; またはVisual C ++ &lt;code&gt;__int64&lt;/code&gt; バイナリ形式（64ビット）の整数。</target>
        </trans-unit>
        <trans-unit id="8ea1eab2759b39f44eff8aedf3f696f0b6c8fa67" translate="yes" xml:space="preserve">
          <source>Encodes a GCC &lt;code&gt;long long&lt;/code&gt; or Visual C++ &lt;code&gt;__int64&lt;/code&gt; (64-bit) integer in the binary format. This function is missing in the VxWorks port.</source>
          <target state="translated">GCC &lt;code&gt;long long&lt;/code&gt; またはVisual C ++ &lt;code&gt;__int64&lt;/code&gt; （64ビット）整数をバイナリ形式でエンコードします。この機能はVxWorksポートにありません。</target>
        </trans-unit>
        <trans-unit id="d64be51e43c6327060d25b2637eaf89a5fdf21ec" translate="yes" xml:space="preserve">
          <source>Encodes a GCC &lt;code&gt;unsigned long long&lt;/code&gt; or Visual C++ &lt;code&gt;unsigned __int64&lt;/code&gt; (64-bit) integer in the binary format.</source>
          <target state="translated">GCC &lt;code&gt;unsigned long long&lt;/code&gt; &lt;code&gt;unsigned __int64&lt;/code&gt; またはVisualC ++ unsigned __int64（64ビット）整数をバイナリ形式でエンコードします。</target>
        </trans-unit>
        <trans-unit id="39db68723a1e70c2f41cfe15c0c139b726cce330" translate="yes" xml:space="preserve">
          <source>Encodes a GCC &lt;code&gt;unsigned long long&lt;/code&gt; or Visual C++ &lt;code&gt;unsigned __int64&lt;/code&gt; (64-bit) integer in the binary format. This function is missing in the VxWorks port.</source>
          <target state="translated">GCC &lt;code&gt;unsigned long long&lt;/code&gt; またはVisual C ++ &lt;code&gt;unsigned __int64&lt;/code&gt; （64ビット）整数をバイナリ形式でエンコードします。この機能はVxWorksポートにありません。</target>
        </trans-unit>
        <trans-unit id="55cf245f3abef1d97562ca0510d5aa54ddef2103" translate="yes" xml:space="preserve">
          <source>Encodes a GMP &lt;code&gt;mpz_t&lt;/code&gt; integer to binary format. To use this function, the &lt;code&gt;ei&lt;/code&gt; library must be configured and compiled to use the GMP library.</source>
          <target state="translated">GMP &lt;code&gt;mpz_t&lt;/code&gt; 整数をバイナリ形式にエンコードします。この関数を使用するには、GMPライブラリーを使用するように &lt;code&gt;ei&lt;/code&gt; ライブラリーを構成およびコンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="544dc6535c1f9dfc1c63c385c2a64dabd5493e6d" translate="yes" xml:space="preserve">
          <source>Encodes a binary in the binary format. The data is at &lt;code&gt;p&lt;/code&gt;, of &lt;code&gt;len&lt;/code&gt; bytes length.</source>
          <target state="translated">バイナリをバイナリ形式でエンコードします。データは &lt;code&gt;p&lt;/code&gt; にあり、長さは &lt;code&gt;len&lt;/code&gt; バイトです。</target>
        </trans-unit>
        <trans-unit id="d8c975263ee4e63639cef44170082c635d8ecbe5" translate="yes" xml:space="preserve">
          <source>Encodes a bit string in the binary format.</source>
          <target state="translated">ビット文字列をバイナリ形式でエンコードします。</target>
        </trans-unit>
        <trans-unit id="299ae563f3b560341ecaf360dad29cc4e64c195f" translate="yes" xml:space="preserve">
          <source>Encodes a boolean value as the atom &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;p&lt;/code&gt; is not zero, or &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;p&lt;/code&gt; is zero.</source>
          <target state="translated">原子としてブール値をエンコードし &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;p&lt;/code&gt; ゼロ、またはでない &lt;code&gt;false&lt;/code&gt; 場合 &lt;code&gt;p&lt;/code&gt; ゼロです。</target>
        </trans-unit>
        <trans-unit id="142d43fe975c5f4b8920a4641578639d19a398ce" translate="yes" xml:space="preserve">
          <source>Encodes a char (8-bit) as an integer between 0-255 in the binary format. For historical reasons the integer argument is of type &lt;code&gt;char&lt;/code&gt;. Your C code is to consider the specified argument to be of type &lt;code&gt;unsigned char&lt;/code&gt; even if the C compilers and system may define &lt;code&gt;char&lt;/code&gt; to be signed.</source>
          <target state="translated">char（8ビット）をバイナリ形式の0〜255の整数としてエンコードします。歴史的な理由から、整数の引数は &lt;code&gt;char&lt;/code&gt; 型です。Cコードでは、Cコンパイラとシステムが &lt;code&gt;char&lt;/code&gt; に署名を定義している場合でも、指定された引数は &lt;code&gt;unsigned char&lt;/code&gt; 型であると見なします。</target>
        </trans-unit>
        <trans-unit id="67efd073e483aab3ad7bd50ac03659126a68c7e9" translate="yes" xml:space="preserve">
          <source>Encodes a double-precision (64-bit) floating point number in the binary format.</source>
          <target state="translated">倍精度(64 ビット)浮動小数点数をバイナリ形式でエンコードします。</target>
        </trans-unit>
        <trans-unit id="db6231d4a9f50aa12152f662f310840279de88e9" translate="yes" xml:space="preserve">
          <source>Encodes a fun in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to an &lt;code&gt;erlang_fun&lt;/code&gt; structure. The &lt;code&gt;erlang_fun&lt;/code&gt; is not freed automatically, the &lt;code&gt;free_fun&lt;/code&gt; is to be called if the fun is not needed after encoding.</source>
          <target state="translated">funをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;erlang_fun&lt;/code&gt; 構造を指します。 &lt;code&gt;erlang_fun&lt;/code&gt; が自動的に解放されていない、 &lt;code&gt;free_fun&lt;/code&gt; は楽しいがエンコード後に必要とされていない場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f3eb79e01a1e1ed3ff93bc0825828edeff65ab2a" translate="yes" xml:space="preserve">
          <source>Encodes a hexadecimal encoded URI.</source>
          <target state="translated">16進数でエンコードされたURIをエンコードする。</target>
        </trans-unit>
        <trans-unit id="5399714ce3209e4c7dc2e47140aed28f61fcb18b" translate="yes" xml:space="preserve">
          <source>Encodes a list header, with a specified arity. The next &lt;code&gt;arity+1&lt;/code&gt; terms are the elements (actually its &lt;code&gt;arity&lt;/code&gt; cons cells) and the tail of the list. Lists and tuples are encoded recursively, so that a list can contain another list or tuple.</source>
          <target state="translated">指定されたアリティを使用して、リストヘッダーをエンコードします。次の &lt;code&gt;arity+1&lt;/code&gt; 用語は、要素（実際にはその &lt;code&gt;arity&lt;/code&gt; コンスセル）とリストの末尾です。リストとタプルは再帰的にエンコードされるため、リストには別のリストまたはタプルを含めることができます。</target>
        </trans-unit>
        <trans-unit id="c38845bcb5dace03433d108ba34545ffac9a2ca1" translate="yes" xml:space="preserve">
          <source>Encodes a list of SSH file entries (public keys and attributes) to a binary. Possible attributes depend on the file type, see &lt;code&gt;&lt;a href=&quot;#ssh_decode-2&quot;&gt; ssh_decode/2 &lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SSHファイルエントリ（公開鍵と属性）のリストをバイナリにエンコードします。可能な属性はファイルタイプによって異なります &lt;code&gt;&lt;a href=&quot;#ssh_decode-2&quot;&gt; ssh_decode/2 &lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="147dc6f64e18686ce3670e474f6c9a004c8a9d94" translate="yes" xml:space="preserve">
          <source>Encodes a list of SSH file entries (public keys and attributes) to a binary. Possible attributes depend on the file type, see &lt;code&gt;&lt;a href=&quot;#ssh_decode-2&quot;&gt;ssh_decode/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SSHファイルエントリ（公開キーと属性）のリストをバイナリにエンコードします。可能な属性はファイルタイプによって異なります &lt;code&gt;&lt;a href=&quot;#ssh_decode-2&quot;&gt;ssh_decode/2&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="6f31b421de29ccdfdf7d6795da67adc1e51b10ef" translate="yes" xml:space="preserve">
          <source>Encodes a long integer in the binary format. If the code is 64 bits, the function &lt;code&gt;ei_encode_long()&lt;/code&gt; is the same as &lt;code&gt;ei_encode_longlong()&lt;/code&gt;.</source>
          <target state="translated">長整数をバイナリ形式でエンコードします。コードは64ビットである場合、関数 &lt;code&gt;ei_encode_long()&lt;/code&gt; と同じである &lt;code&gt;ei_encode_longlong()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e21387f38bf5a4c0a9713f0fa95d428b5ff9e790" translate="yes" xml:space="preserve">
          <source>Encodes a map header, with a specified arity. The next &lt;code&gt;arity*2&lt;/code&gt; terms encoded will be the keys and values of the map encoded in the following order: &lt;code&gt;K1, V1, K2, V2, ..., Kn, Vn&lt;/code&gt;.</source>
          <target state="translated">指定されたアリティを使用して、マップヘッダーをエンコードします。エンコードされる次の &lt;code&gt;arity*2&lt;/code&gt; の用語は、 &lt;code&gt;K1, V1, K2, V2, ..., Kn, Vn&lt;/code&gt; 順序でエンコードされたマップのキーと値になります。</target>
        </trans-unit>
        <trans-unit id="2546def3bbd440ddf28860d54071b17b07162883" translate="yes" xml:space="preserve">
          <source>Encodes a map. The &lt;code&gt;Arity&lt;/code&gt; field is an unsigned 4 byte integer in big-endian format that determines the number of key-value pairs in the map. Key and value pairs (&lt;code&gt;Ki =&amp;gt; Vi&lt;/code&gt;) are encoded in section &lt;code&gt;Pairs&lt;/code&gt; in the following order: &lt;code&gt;K1, V1, K2, V2,..., Kn, Vn&lt;/code&gt;. Duplicate keys are &lt;strong&gt;not allowed&lt;/strong&gt; within the same map.</source>
          <target state="translated">マップをエンコードします。 &lt;code&gt;Arity&lt;/code&gt; フィールドは、マップ内のキーと値のペアの数を決定ビッグエンディアン形式の符号なし4バイトの整数です。キーと値のペア（ &lt;code&gt;Ki =&amp;gt; Vi&lt;/code&gt; ）は、 &lt;code&gt;Pairs&lt;/code&gt; セクションで次の順序でエンコードされます： &lt;code&gt;K1, V1, K2, V2,..., Kn, Vn&lt;/code&gt; 。同じマップ内で重複するキーを使用することは&lt;strong&gt;できません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b27883b4382c2510b413fda75eddb65df243c0c9" translate="yes" xml:space="preserve">
          <source>Encodes a message record to a list of bytes.</source>
          <target state="translated">メッセージレコードをバイトのリストにエンコードします。</target>
        </trans-unit>
        <trans-unit id="b6f25f641b062915fd5ff3685b3d015468c770da" translate="yes" xml:space="preserve">
          <source>Encodes a plain ASCII string into base64. The result is 33% larger than the data.</source>
          <target state="translated">プレーンなASCII文字列をbase64にエンコードします。結果はデータの33%の大きさになります。</target>
        </trans-unit>
        <trans-unit id="b802ae599eede9a33aeccb37997540cbabbc2e45" translate="yes" xml:space="preserve">
          <source>Encodes a port identifier (obtained from &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt;). &lt;code&gt;Node&lt;/code&gt; is an encoded atom, that is, &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;ID&lt;/code&gt; is a 32-bit big endian unsigned integer. Only 28 bits are significant; the rest are to be 0. The &lt;code&gt;Creation&lt;/code&gt; works just like in &lt;code&gt;&lt;a href=&quot;#NEW_PID_EXT&quot;&gt;NEW_PID_EXT&lt;/a&gt;&lt;/code&gt;. Port operations are not allowed across node boundaries.</source>
          <target state="translated">ポート識別子をエンコードします（ &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; から取得）。 &lt;code&gt;Node&lt;/code&gt; はエンコードされたアトム、つまり &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; です。 &lt;code&gt;ID&lt;/code&gt; は、32ビットのビッグエンディアンの符号なし整数です。重要なのは28ビットだけです。残りは0になります。 &lt;code&gt;Creation&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#NEW_PID_EXT&quot;&gt;NEW_PID_EXT&lt;/a&gt;&lt;/code&gt; と同じように機能します。ノードの境界を越えたポート操作は許可されていません。</target>
        </trans-unit>
        <trans-unit id="f259a9111053ee9b0ff27ad8b8e26394495297ef" translate="yes" xml:space="preserve">
          <source>Encodes a port object (obtained from &lt;code&gt;erlang:open_port/2&lt;/code&gt;). The &lt;code&gt;ID&lt;/code&gt; is a node-specific identifier for a local port. Port operations are not allowed across node boundaries. The &lt;code&gt;Creation&lt;/code&gt; works just like in &lt;code&gt;&lt;a href=&quot;#REFERENCE_EXT&quot;&gt;REFERENCE_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポートオブジェクト（ &lt;code&gt;erlang:open_port/2&lt;/code&gt; から取得）をエンコードします。 &lt;code&gt;ID&lt;/code&gt; は、ローカルポートのノードに固有の識別子です。ノードの境界を越えたポート操作は許可されていません。 &lt;code&gt;Creation&lt;/code&gt; ちょうどのように動作します &lt;code&gt;&lt;a href=&quot;#REFERENCE_EXT&quot;&gt;REFERENCE_EXT&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="932182b383208ca8056944faa1099a6c8e6ac0c8" translate="yes" xml:space="preserve">
          <source>Encodes a process identifier object (obtained from &lt;code&gt;erlang:spawn/3&lt;/code&gt; or friends). The &lt;code&gt;ID&lt;/code&gt; and &lt;code&gt;Creation&lt;/code&gt; fields works just like in &lt;code&gt;&lt;a href=&quot;#REFERENCE_EXT&quot;&gt;REFERENCE_EXT&lt;/a&gt;&lt;/code&gt;, while the &lt;code&gt;Serial&lt;/code&gt; field is used to improve safety. In &lt;code&gt;ID&lt;/code&gt;, only 15 bits are significant; the rest are to be 0.</source>
          <target state="translated">プロセス識別子オブジェクト（ &lt;code&gt;erlang:spawn/3&lt;/code&gt; またはその友達から取得）をエンコードします。 &lt;code&gt;ID&lt;/code&gt; と &lt;code&gt;Creation&lt;/code&gt; 分野は、ちょうどのように動作し &lt;code&gt;&lt;a href=&quot;#REFERENCE_EXT&quot;&gt;REFERENCE_EXT&lt;/a&gt;&lt;/code&gt; ながら、 &lt;code&gt;Serial&lt;/code&gt; フィールドは、安全性を向上させるために使用されます。に &lt;code&gt;ID&lt;/code&gt; 、わずか15ビットが重要です。残りは0です。</target>
        </trans-unit>
        <trans-unit id="d1d57a8c127d4d4f839416c50c0fbbba2f4d4ff0" translate="yes" xml:space="preserve">
          <source>Encodes a public-key entity with ASN.1 DER encoding.</source>
          <target state="translated">公開鍵エンティティをASN.1 DERエンコーディングでエンコードします。</target>
        </trans-unit>
        <trans-unit id="d5c308d0994008ccda7fbbad7266dbb74c32be53" translate="yes" xml:space="preserve">
          <source>Encodes a reference object (an object generated with &lt;code&gt;erlang:make_ref/0&lt;/code&gt;). The &lt;code&gt;Node&lt;/code&gt; term is an encoded atom, that is, &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;ID&lt;/code&gt; field contains a big-endian unsigned integer, but &lt;strong&gt;is to be regarded as uninterpreted data&lt;/strong&gt;, as this field is node-specific. &lt;code&gt;Creation&lt;/code&gt; is a byte containing a node serial number, which makes it possible to separate old (crashed) nodes from a new one.</source>
          <target state="translated">参照オブジェクト（ &lt;code&gt;erlang:make_ref/0&lt;/code&gt; で生成されたオブジェクト）をエンコードします。 &lt;code&gt;Node&lt;/code&gt; という用語は、ある符号化された原子、 &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#SMALL_ATOM_UTF8_EXT&quot;&gt;SMALL_ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; 、又は &lt;code&gt;&lt;a href=&quot;#ATOM_CACHE_REF&quot;&gt;ATOM_CACHE_REF&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;ID&lt;/code&gt; のフィールドは、ビッグエンディアンの符号なし整数を含むが、&lt;strong&gt;未解釈のデータとみなされるべきであり&lt;/strong&gt;、このフィールドはノード固有であるように、。 &lt;code&gt;Creation&lt;/code&gt; は、ノードのシリアル番号を含むバイトです。これにより、古い（クラッシュした）ノードを新しいノードから分離することができます。</target>
        </trans-unit>
        <trans-unit id="24deef8b706bf9138b53949d3749385135e65888" translate="yes" xml:space="preserve">
          <source>Encodes a reference term generated with &lt;code&gt;erlang:make_ref/0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:make_ref/0&lt;/code&gt; で生成された参照用語をエンコードします。</target>
        </trans-unit>
        <trans-unit id="6983fa67de59179a533f84dd86b3b1e63cddb353" translate="yes" xml:space="preserve">
          <source>Encodes a string in the binary format. (A string in Erlang is a list, but is encoded as a character array in the binary format.) The string is to be &lt;code&gt;NULL&lt;/code&gt;-terminated, except for the &lt;code&gt;ei_x_encode_string_len()&lt;/code&gt; function.</source>
          <target state="translated">文字列をバイナリ形式でエンコードします。（Erlangの文字列はリストですが、バイナリ形式の文字配列としてエンコードされます。）文字列は &lt;code&gt;NULL&lt;/code&gt; で終了しますが、 &lt;code&gt;ei_x_encode_string_len()&lt;/code&gt; 関数ます。</target>
        </trans-unit>
        <trans-unit id="e2ae83f97c681fcce7637008f4816fc10f123e4c" translate="yes" xml:space="preserve">
          <source>Encodes a tuple header, with a specified arity. The next &lt;code&gt;arity&lt;/code&gt; terms encoded will be the elements of the tuple. Tuples and lists are encoded recursively, so that a tuple can contain another tuple or list.</source>
          <target state="translated">指定されたアリティを使用して、タプルヘッダーをエンコードします。次の &lt;code&gt;arity&lt;/code&gt; エンコードされる用語は、タプルの要素になります。タプルとリストは再帰的にエンコードされるため、タプルには別のタプルまたはリストを含めることができます。</target>
        </trans-unit>
        <trans-unit id="af2b02a0991d4ce3fe7390de348cf477759d00a2" translate="yes" xml:space="preserve">
          <source>Encodes a tuple. The &lt;code&gt;Arity&lt;/code&gt; field is an unsigned byte that determines how many elements that follows in section &lt;code&gt;Elements&lt;/code&gt;.</source>
          <target state="translated">タプルをエンコードします。 &lt;code&gt;Arity&lt;/code&gt; フィールドは、セクションで、次の要素数を決定する符号なしバイトである &lt;code&gt;Elements&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff2f2a72085c885a819e529abe0ff0a7d2d676e0" translate="yes" xml:space="preserve">
          <source>Encodes a version magic number for the binary format. Must be the first token in a binary term.</source>
          <target state="translated">バイナリ形式のバージョンマジックナンバーをエンコードします。バイナリ用語の最初のトークンでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ae0c72ad2f8d0c485999de767a4b3183dca88051" translate="yes" xml:space="preserve">
          <source>Encodes an &lt;code&gt;ETERM&lt;/code&gt;, as obtained from &lt;code&gt;erl_interface&lt;/code&gt;. Parameter &lt;code&gt;t&lt;/code&gt; is actually an &lt;code&gt;ETERM&lt;/code&gt; pointer. This function does not free the &lt;code&gt;ETERM&lt;/code&gt;.</source>
          <target state="translated">コード &lt;code&gt;ETERM&lt;/code&gt; をから得られる、 &lt;code&gt;erl_interface&lt;/code&gt; 。パラメータ &lt;code&gt;t&lt;/code&gt; は実際には &lt;code&gt;ETERM&lt;/code&gt; ポインタです。この関数は &lt;code&gt;ETERM&lt;/code&gt; を解放しません。</target>
        </trans-unit>
        <trans-unit id="10d886679d977f90bbba34649f46a0bc55f76d91" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang port in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to a &lt;code&gt;erlang_port&lt;/code&gt; structure (which should have been obtained earlier with &lt;code&gt;ei_decode_port()&lt;/code&gt;).</source>
          <target state="translated">Erlangポートをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;erlang_port&lt;/code&gt; 構造体を指します（これは、 &lt;code&gt;ei_decode_port()&lt;/code&gt; で以前に取得されているはずです）。</target>
        </trans-unit>
        <trans-unit id="57c2dd5bf4d9ab71118fad79de37a4af2bd1eb60" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang port in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to an &lt;code&gt;erlang_port&lt;/code&gt; structure which should have been obtained earlier with &lt;code&gt;&lt;a href=&quot;#ei_decode_port&quot;&gt;ei_decode_port()&lt;/a&gt;&lt;/code&gt;,</source>
          <target state="translated">アーランポートをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#ei_decode_port&quot;&gt;ei_decode_port()&lt;/a&gt;&lt;/code&gt; で以前に取得されているはずの &lt;code&gt;erlang_port&lt;/code&gt; 構造体を指します。</target>
        </trans-unit>
        <trans-unit id="84cff2ec5d925031dfc127de573af284d6e74099" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang process identifier (pid) in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to an &lt;code&gt;erlang_pid&lt;/code&gt; structure (which should have been obtained earlier with &lt;code&gt;ei_decode_pid()&lt;/code&gt;).</source>
          <target state="translated">Erlangプロセス識別子（pid）をバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;erlang_pid&lt;/code&gt; 構造体を指します（これは &lt;code&gt;ei_decode_pid()&lt;/code&gt; で以前に取得されているはずです）。</target>
        </trans-unit>
        <trans-unit id="76d4026c81383707cf21ce4f5ea832412535d302" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang process identifier (pid) in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to an &lt;code&gt;erlang_pid&lt;/code&gt; structure which should either have been obtained earlier with &lt;code&gt;&lt;a href=&quot;#ei_decode_pid&quot;&gt;ei_decode_pid()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ei_connect#ei_self&quot;&gt;ei_self()&lt;/a&gt;&lt;/code&gt; or created by &lt;code&gt;&lt;a href=&quot;ei_connect#ei_make_pid&quot;&gt;ei_make_pid()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangプロセス識別子（pid）をバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; に点 &lt;code&gt;erlang_pid&lt;/code&gt; いずれかで以前に得られているべきである構造 &lt;code&gt;&lt;a href=&quot;#ei_decode_pid&quot;&gt;ei_decode_pid()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ei_connect#ei_self&quot;&gt;ei_self()&lt;/a&gt;&lt;/code&gt; 等により作成 &lt;code&gt;&lt;a href=&quot;ei_connect#ei_make_pid&quot;&gt;ei_make_pid()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3be5890e73faf95f1e9738591e16dd49e1a75403" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang process identifier object.</source>
          <target state="translated">Erlangのプロセス識別子オブジェクトをエンコードします。</target>
        </trans-unit>
        <trans-unit id="9ce17988f46a89b28dc4f99e5d98e8c260c68401" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang reference in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to a &lt;code&gt;erlang_ref&lt;/code&gt; structure (which should have been obtained earlier with &lt;code&gt;ei_decode_ref()&lt;/code&gt;).</source>
          <target state="translated">Erlang参照をバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;erlang_ref&lt;/code&gt; 構造体を指します（これは &lt;code&gt;ei_decode_ref()&lt;/code&gt; で以前に取得されているはずです）。</target>
        </trans-unit>
        <trans-unit id="42aec85ff02503e0f4c4f2565e162785b5c185dc" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang reference in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to an &lt;code&gt;erlang_ref&lt;/code&gt; structure which either should have been obtained earlier with &lt;code&gt;&lt;a href=&quot;#ei_decode_ref&quot;&gt;ei_decode_ref()&lt;/a&gt;&lt;/code&gt;, or created by &lt;code&gt;&lt;a href=&quot;ei_connect#ei_make_ref&quot;&gt;ei_make_ref()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アーラン参照をバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; に点 &lt;code&gt;erlang_ref&lt;/code&gt; のいずれかを用いて以前に得られているべきである構造 &lt;code&gt;&lt;a href=&quot;#ei_decode_ref&quot;&gt;ei_decode_ref()&lt;/a&gt;&lt;/code&gt; によって、または作成 &lt;code&gt;&lt;a href=&quot;ei_connect#ei_make_ref&quot;&gt;ei_make_ref()&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0c685069d4686caf8919a29aeb6dfc4a6579c5a" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang trace token in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to a &lt;code&gt;erlang_trace&lt;/code&gt; structure (which should have been obtained earlier with &lt;code&gt;ei_decode_trace()&lt;/code&gt;).</source>
          <target state="translated">Erlangトレーストークンをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は &lt;code&gt;erlang_trace&lt;/code&gt; 構造体を指します（これは、 &lt;code&gt;ei_decode_trace()&lt;/code&gt; で以前に取得されているはずです）。</target>
        </trans-unit>
        <trans-unit id="cccb0cf6d3e8be746acb491ce06d7536ce870985" translate="yes" xml:space="preserve">
          <source>Encodes an Erlang trace token in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; points to a &lt;code&gt;erlang_trace&lt;/code&gt; structure which should have been obtained earlier with &lt;code&gt;&lt;a href=&quot;#ei_decode_trace&quot;&gt;ei_decode_trace()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アーラントレーストークンをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#ei_decode_trace&quot;&gt;ei_decode_trace()&lt;/a&gt;&lt;/code&gt; で以前に取得されているはずの &lt;code&gt;erlang_trace&lt;/code&gt; 構造体を指します。</target>
        </trans-unit>
        <trans-unit id="b9f856403e1104e3c2f173fa6a9b9b6e634523b8" translate="yes" xml:space="preserve">
          <source>Encodes an SNMP Pdu into a list of bytes.</source>
          <target state="translated">SNMP Pdu をバイトのリストにエンコードします。</target>
        </trans-unit>
        <trans-unit id="9d75b733671e6cee7bbd4d4fc7c1ed464bbc1703" translate="yes" xml:space="preserve">
          <source>Encodes an SNMP ScopedPdu into a list of bytes, which can be encrypted, and after encryption, encoded with a call to &lt;code&gt;enc_encrypted_scoped_pdu/1&lt;/code&gt;; or it can be used as the &lt;code&gt;data&lt;/code&gt; field in a &lt;code&gt;message&lt;/code&gt; record, which then can be encoded with &lt;code&gt;enc_message_only/1&lt;/code&gt;.</source>
          <target state="translated">SNMP ScopedPduを暗号化できるバイトのリストにエンコードし、暗号化後に &lt;code&gt;enc_encrypted_scoped_pdu/1&lt;/code&gt; への呼び出しでエンコードします。または、 &lt;code&gt;message&lt;/code&gt; レコードの &lt;code&gt;data&lt;/code&gt; フィールドとして使用でき、 &lt;code&gt;enc_message_only/1&lt;/code&gt; でエンコードできます。</target>
        </trans-unit>
        <trans-unit id="7fa4782273dd88937b487ef08be79b1c172a8262" translate="yes" xml:space="preserve">
          <source>Encodes an atom in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; is the name of the atom in Latin-1 encoding. Only up to &lt;code&gt;MAXATOMLEN-1&lt;/code&gt; bytes are encoded. The name is to be &lt;code&gt;NULL&lt;/code&gt;-terminated, except for the &lt;code&gt;ei_x_encode_atom_len()&lt;/code&gt; function.</source>
          <target state="translated">アトムをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は、Latin-1エンコーディングのアトムの名前です。最大 &lt;code&gt;MAXATOMLEN-1&lt;/code&gt; バイトのみがエンコードされます。 &lt;code&gt;ei_x_encode_atom_len()&lt;/code&gt; を除き、名前は &lt;code&gt;NULL&lt;/code&gt; で終了します関数ます。</target>
        </trans-unit>
        <trans-unit id="f94986d6669031c5feff3d3d35f84974a46d32f0" translate="yes" xml:space="preserve">
          <source>Encodes an atom in the binary format. Parameter &lt;code&gt;p&lt;/code&gt; is the name of the atom with character encoding &lt;code&gt;&lt;a href=&quot;#erlang_char_encoding&quot;&gt;from_enc&lt;/a&gt;&lt;/code&gt; (ASCII, Latin-1, or UTF-8). The name must either be &lt;code&gt;NULL&lt;/code&gt;-terminated or a function variant with a &lt;code&gt;len&lt;/code&gt; parameter must be used.</source>
          <target state="translated">アトムをバイナリ形式でエンコードします。パラメータ &lt;code&gt;p&lt;/code&gt; は、文字エンコード &lt;code&gt;&lt;a href=&quot;#erlang_char_encoding&quot;&gt;from_enc&lt;/a&gt;&lt;/code&gt; （ASCII、Latin-1、またはUTF-8）を使用したアトムの名前です。名前は、 &lt;code&gt;NULL&lt;/code&gt; で終了するか、 &lt;code&gt;len&lt;/code&gt; を含む関数バリアントでなければなりませんパラメータを使用使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3e3d0bd7014773a7515a0eaf7ab7f8024249203d" translate="yes" xml:space="preserve">
          <source>Encodes an empty list. It is often used at the tail of a list.</source>
          <target state="translated">空のリストをエンコードします。リストの末尾によく使われます。</target>
        </trans-unit>
        <trans-unit id="4c2b02552e4f57bba027c20fbe76f0bfb0d75eba" translate="yes" xml:space="preserve">
          <source>Encodes an encrypted SNMP ScopedPdu into an OCTET STRING that can be used as the &lt;code&gt;data&lt;/code&gt; field in a &lt;code&gt;message&lt;/code&gt; record, that later can be encoded with a call to &lt;code&gt;enc_message_only/1&lt;/code&gt;.</source>
          <target state="translated">暗号化されたSNMP ScopedPduをOCTET STRINGにエンコードします。これは &lt;code&gt;message&lt;/code&gt; レコードの &lt;code&gt;data&lt;/code&gt; フィールドとして使用でき、後で &lt;code&gt;enc_message_only/1&lt;/code&gt; への呼び出しでエンコードできます。。</target>
        </trans-unit>
        <trans-unit id="962d839134381a7bc1e8c5ef4283f55dd77d150b" translate="yes" xml:space="preserve">
          <source>Encodes an unsigned long integer in the binary format. If the code is 64 bits, the function &lt;code&gt;ei_encode_ulong()&lt;/code&gt; is the same as &lt;code&gt;ei_encode_ulonglong()&lt;/code&gt;.</source>
          <target state="translated">符号なし長整数をバイナリ形式でエンコードします。コードは64ビットである場合、関数 &lt;code&gt;ei_encode_ulong()&lt;/code&gt; と同じである &lt;code&gt;ei_encode_ulonglong()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e5e1d27c122466d30fe5743763ed3cb3299cfda" translate="yes" xml:space="preserve">
          <source>Encodes lists of action requests for one or more transaction request(s).</source>
          <target state="translated">1つ以上のトランザクションリクエストに対するアクションリクエストのリストをエンコードする。</target>
        </trans-unit>
        <trans-unit id="bbe3771766e51314eec821af32519256d9e1cc6d" translate="yes" xml:space="preserve">
          <source>Encodes the message into a sequence of bytes.</source>
          <target state="translated">メッセージをバイト列にエンコードします。</target>
        </trans-unit>
        <trans-unit id="a2c2a3dc80ffb53312ecf36ad1055545de7126f8" translate="yes" xml:space="preserve">
          <source>Encoding Public-Key Data to PEM Format</source>
          <target state="translated">公開鍵データをPEM形式に暗号化</target>
        </trans-unit>
        <trans-unit id="cf6e4cd7c6b0e3f5f929b22e1120f33b38cfc968" translate="yes" xml:space="preserve">
          <source>Encoding and decoding a string with Unicode characters:</source>
          <target state="translated">Unicode 文字で文字列をエンコードおよびデコードします。</target>
        </trans-unit>
        <trans-unit id="a833e98a67285a4ac9faa7fbff167440c5860f43" translate="yes" xml:space="preserve">
          <source>Encoding and decoding must be done explicitly when writing your own Net if process.</source>
          <target state="translated">自作の Net if プロセスを書く際には、明示的にエンコードとデコードを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="821139729ae337d85e016cf0241920c56421ecd7" translate="yes" xml:space="preserve">
          <source>Encoding and decoding of Erlang data types for transmission or storage</source>
          <target state="translated">Erlangのデータ型のエンコードとデコードを伝送や保存のために行う</target>
        </trans-unit>
        <trans-unit id="f9f2b1897f0182522c31ea4a8622e8b2d5090ec8" translate="yes" xml:space="preserve">
          <source>Encoding and decoding of Erlang terms.</source>
          <target state="translated">Erlang用語のエンコードとデコード。</target>
        </trans-unit>
        <trans-unit id="362851a55df47e950b8ac4b7e6c244c360537b26" translate="yes" xml:space="preserve">
          <source>Encoding and decoding some strings:</source>
          <target state="translated">いくつかの文字列をエンコード、デコードします。</target>
        </trans-unit>
        <trans-unit id="957bacdea81312911c1ae130271010f5a65da159" translate="yes" xml:space="preserve">
          <source>Encoding callback module which exports encode_message/2 and decode_message/2. The function EncodingMod:encode_message(EncodingConfig, MegacoMessage) is invoked whenever a 'MegacoMessage' record needs to be translated into an Erlang binary. The function EncodingMod:decode_message(EncodingConfig, Binary) is invoked whenever an Erlang binary needs to be translated into a 'MegacoMessage' record.</source>
          <target state="translated">encode_message/2 と decode_message/2 をエクスポートするエンコーディングコールバックモジュールです。関数 EncodingMod:encode_message(EncodingConfig,MegacoMessage)は 'MegacoMessage' レコードを Erlang バイナリに翻訳する必要があるときに呼び出されます。関数 EncodingMod:decode_message(EncodingConfig,Binary)は、Erlang バイナリを 'MegacoMessage' レコードに変換する必要があるときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="3b6dcbba484d1d5cfa44ed74c9d6e15650c65e9b" translate="yes" xml:space="preserve">
          <source>Encoding is &quot;overlong&quot;, meaning that a number should have been encoded in fewer bytes.</source>
          <target state="translated">エンコードは「オーバーロング」で、数字はより少ないバイト数でエンコードされているはずです。</target>
        </trans-unit>
        <trans-unit id="07619d75ac86081189ed5a07edb91fcbca8bed3f" translate="yes" xml:space="preserve">
          <source>Encoding module config.</source>
          <target state="translated">エンコーディングモジュールの設定。</target>
        </trans-unit>
        <trans-unit id="5fb7ced99a059fd0dc7bab3f9bf3bb8440646b2e" translate="yes" xml:space="preserve">
          <source>Encoding, decoding, and sending Erlang terms</source>
          <target state="translated">Erlang用語のエンコード、デコード、送信</target>
        </trans-unit>
        <trans-unit id="df2853591e29cd99c0fa5882b318aef52125c157" translate="yes" xml:space="preserve">
          <source>Encrypt &lt;code&gt;PlainText&lt;/code&gt; according to &lt;code&gt;Type&lt;/code&gt; block cipher.</source>
          <target state="translated">暗号化 &lt;code&gt;PlainText&lt;/code&gt; に従って &lt;code&gt;Type&lt;/code&gt; ブロック暗号を。</target>
        </trans-unit>
        <trans-unit id="43483bf8b1f6e3650db5b3d5c23dd089bcdb2fa2" translate="yes" xml:space="preserve">
          <source>Encrypt &lt;code&gt;PlainText&lt;/code&gt; according to &lt;code&gt;Type&lt;/code&gt; block cipher. &lt;code&gt;IVec&lt;/code&gt; is an arbitrary initializing vector.</source>
          <target state="translated">暗号化 &lt;code&gt;PlainText&lt;/code&gt; に従って &lt;code&gt;Type&lt;/code&gt; ブロック暗号を。 &lt;code&gt;IVec&lt;/code&gt; は任意の初期化ベクトルです。</target>
        </trans-unit>
        <trans-unit id="381b8d80049d7a04cdf2994121808a8cdf165223" translate="yes" xml:space="preserve">
          <source>Encrypt with the private key:</source>
          <target state="translated">秘密鍵で暗号化します。</target>
        </trans-unit>
        <trans-unit id="9703c3f11251af2de6116ae0c93744a07f772858" translate="yes" xml:space="preserve">
          <source>Encrypt with the public key:</source>
          <target state="translated">公開鍵で暗号化します。</target>
        </trans-unit>
        <trans-unit id="80dae3701dd53c67de85f8a43dc357a2e8e2e978" translate="yes" xml:space="preserve">
          <source>Encrypted Debug Information</source>
          <target state="translated">暗号化されたデバッグ情報</target>
        </trans-unit>
        <trans-unit id="3a59ab59dac8804687753e19c3d53c00d3eedb1a" translate="yes" xml:space="preserve">
          <source>Encryption and authentication is added.</source>
          <target state="translated">暗号化と認証が追加されています。</target>
        </trans-unit>
        <trans-unit id="d09656784058ea42ea6ac009c67cf6b347770cc2" translate="yes" xml:space="preserve">
          <source>Encryption and decryption</source>
          <target state="translated">暗号化と復号化</target>
        </trans-unit>
        <trans-unit id="5e0dab077d689a486cbd877d4183f36242417a19" translate="yes" xml:space="preserve">
          <source>Encrypts &lt;code&gt;PlainText&lt;/code&gt; according to the stream cipher &lt;code&gt;Type&lt;/code&gt; specified in stream_init/3. &lt;code&gt;Text&lt;/code&gt; can be any number of bytes. The initial &lt;code&gt;State&lt;/code&gt; is created using &lt;code&gt;&lt;a href=&quot;#stream_init-2&quot;&gt;stream_init&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;NewState&lt;/code&gt; must be passed into the next call to &lt;code&gt;stream_encrypt&lt;/code&gt;.</source>
          <target state="translated">暗号化 &lt;code&gt;PlainText&lt;/code&gt; ストリーム暗号に従って &lt;code&gt;Type&lt;/code&gt; stream_init / 3で指定されました。 &lt;code&gt;Text&lt;/code&gt; は任意のバイト数にすることができます。初期 &lt;code&gt;State&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#stream_init-2&quot;&gt;stream_init&lt;/a&gt;&lt;/code&gt; を使用して作成されます。 &lt;code&gt;NewState&lt;/code&gt; は、 &lt;code&gt;stream_encrypt&lt;/code&gt; の次の呼び出しに渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="9217b6473788c015aacdede9c8b8e5f29a5c7690" translate="yes" xml:space="preserve">
          <source>Encrypts the &lt;code&gt;PlainText&lt;/code&gt; (message digest) using the &lt;code&gt;PublicKey&lt;/code&gt; and returns the &lt;code&gt;CipherText&lt;/code&gt;. This is a low level signature operation used for instance by older versions of the SSL protocol. See also &lt;code&gt;public_key:encrypt_public/[2,3]&lt;/code&gt;</source>
          <target state="translated">暗号化し &lt;code&gt;PlainText&lt;/code&gt; 使用（メッセージダイジェスト） &lt;code&gt;PublicKey&lt;/code&gt; 戻る &lt;code&gt;CipherText&lt;/code&gt; 。これは、古いバージョンのSSLプロトコルなどで使用される低レベルの署名操作です。 &lt;code&gt;public_key:encrypt_public/[2,3]&lt;/code&gt; も参照してください</target>
        </trans-unit>
        <trans-unit id="6aba32daed03d9e5587e8d7857b21ac52bb10760" translate="yes" xml:space="preserve">
          <source>Encrypts the &lt;code&gt;PlainText&lt;/code&gt; using the &lt;code&gt;PrivateKey&lt;/code&gt; and returns the ciphertext. This is a low level signature operation used for instance by older versions of the SSL protocol. See also &lt;code&gt;public_key:encrypt_private/[2,3]&lt;/code&gt;</source>
          <target state="translated">暗号化 &lt;code&gt;PlainText&lt;/code&gt; 使用して &lt;code&gt;PrivateKey&lt;/code&gt; し、暗号文を返します。これは、古いバージョンのSSLプロトコルなどで使用される低レベルの署名操作です。 &lt;code&gt;public_key:encrypt_private/[2,3]&lt;/code&gt; も参照してください</target>
        </trans-unit>
        <trans-unit id="1a45a71f8411b2012ac69eee03c3cb9761ef63f0" translate="yes" xml:space="preserve">
          <source>Encrypts the source configuration file with DES3 and saves the result in file &lt;code&gt;EncryptFileName&lt;/code&gt;. The key, a string, must be available in a text file named &lt;code&gt;.ct_config.crypt&lt;/code&gt;, either in the current directory, or the home directory of the user (it is searched for in that order).</source>
          <target state="translated">ソース構成ファイルをDES3で暗号化し、結果をファイル &lt;code&gt;EncryptFileName&lt;/code&gt; に保存します。キーである文字列は、 &lt;code&gt;.ct_config.crypt&lt;/code&gt; という名前のテキストファイルで、現在のディレクトリまたはユーザーのホームディレクトリ（この順序で検索されます）にある必要があります。</target>
        </trans-unit>
        <trans-unit id="e1b7e8ad6b293828786733653b84e98f56e63171" translate="yes" xml:space="preserve">
          <source>Encrypts the source configuration file with DES3 and saves the result in the target file &lt;code&gt;EncryptFileName&lt;/code&gt;. The encryption key to use is either the value in &lt;code&gt;{key,Key}&lt;/code&gt; or the value stored in the file specified by &lt;code&gt;{file,File}&lt;/code&gt;.</source>
          <target state="translated">ソース構成ファイルをDES3で暗号化し、結果をターゲットファイル &lt;code&gt;EncryptFileName&lt;/code&gt; に保存します。使用する暗号化キーは、 &lt;code&gt;{key,Key}&lt;/code&gt; の値、または &lt;code&gt;{file,File}&lt;/code&gt; 指定されたファイルに保存されている値のいずれかです。</target>
        </trans-unit>
        <trans-unit id="a2bb9d34b8a1a79665858d354585cf147e0dee4e" translate="yes" xml:space="preserve">
          <source>End</source>
          <target state="translated">End</target>
        </trans-unit>
        <trans-unit id="de60abfb17a90423ee6919dc63adf8282f5b06fb" translate="yes" xml:space="preserve">
          <source>End at the end of the subject string.</source>
          <target state="translated">件名文字列の末尾で終了します。</target>
        </trans-unit>
        <trans-unit id="57a63878b5826fd26a531b55737bab2bbbbaebcc" translate="yes" xml:space="preserve">
          <source>End of file was encountered before any more tokens.</source>
          <target state="translated">それ以上のトークンが出る前にファイルの終了が発生しました。</target>
        </trans-unit>
        <trans-unit id="026ff6a17a44a34ca50397b4a1b628c91e49b9d7" translate="yes" xml:space="preserve">
          <source>End of file was encountered by the I/O server.</source>
          <target state="translated">I/Oサーバでファイルの終了が発生しました。</target>
        </trans-unit>
        <trans-unit id="e31ad58996b6f675a81eae4e18dab4de0ed09a2f" translate="yes" xml:space="preserve">
          <source>End of file was encountered by the tokenizer.</source>
          <target state="translated">トークナイザーでファイルの終了が検出されました。</target>
        </trans-unit>
        <trans-unit id="a212d4671531affb8d170219150ca3d881db83f3" translate="yes" xml:space="preserve">
          <source>End of file was encountered.</source>
          <target state="translated">ファイルの終了が発生しました。</target>
        </trans-unit>
        <trans-unit id="9e3ce0d3bac0fd9f1bf58f3420981013f4efbb94" translate="yes" xml:space="preserve">
          <source>End of file was encountered. &lt;code&gt;LeftOverChars&lt;/code&gt; are the input characters not used.</source>
          <target state="translated">ファイルの終わりが検出されました。 &lt;code&gt;LeftOverChars&lt;/code&gt; は使用されない入力文字です。</target>
        </trans-unit>
        <trans-unit id="a8e61f729a44e47cf20e58421010bf77fedcd7c3" translate="yes" xml:space="preserve">
          <source>End of line</source>
          <target state="translated">行の終わり</target>
        </trans-unit>
        <trans-unit id="60aa06caf4ce9d91f78983d5c80292d55ad0043f" translate="yes" xml:space="preserve">
          <source>End subpattern</source>
          <target state="translated">エンドサブパターン</target>
        </trans-unit>
        <trans-unit id="b750001d7ab130d7ac487cd2ca42bd5cd9f92224" translate="yes" xml:space="preserve">
          <source>End the scope of a prefix-URI mapping.</source>
          <target state="translated">prefix-URIマッピングのスコープを終了します。</target>
        </trans-unit>
        <trans-unit id="21e320b076f89e4cd5f68347182e92594c72d3c2" translate="yes" xml:space="preserve">
          <source>Ends an FTP session, created using function &lt;code&gt;&lt;a href=&quot;#open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; を使用して作成されたFTPセッションを終了します。</target>
        </trans-unit>
        <trans-unit id="95951d40d8039b0e33d4c019627487ef398366d4" translate="yes" xml:space="preserve">
          <source>Ends the deflate session and cleans all data used. Notice that this function throws a &lt;code&gt;data_error&lt;/code&gt; exception if the last call to &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt; was not called with &lt;code&gt;Flush&lt;/code&gt; set to &lt;code&gt;finish&lt;/code&gt;.</source>
          <target state="translated">収縮セッションを終了し、使用されたすべてのデータを消去します。 &lt;code&gt;Flush&lt;/code&gt; を &lt;code&gt;finish&lt;/code&gt; に設定して &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt; への最後の呼び出しが呼び出されなかった場合、この関数は &lt;code&gt;data_error&lt;/code&gt; 例外をスローすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8b45853fd46d5ba321de71a27af54573d044a5ee" translate="yes" xml:space="preserve">
          <source>Ends the inflate session and cleans all data used. Notice that this function throws a &lt;code&gt;data_error&lt;/code&gt; exception if no end of stream was found (meaning that not all data has been uncompressed).</source>
          <target state="translated">膨張セッションを終了し、使用されたすべてのデータを消去します。この関数は &lt;code&gt;data_error&lt;/code&gt; をスローすることに注意してくださいストリームの終わりが見つからなかった場合（つまり、すべてのデータが圧縮されていないわけではない）例外を。</target>
        </trans-unit>
        <trans-unit id="ab9116cba897b6ab266baa70720fa04bcdb04dc2" translate="yes" xml:space="preserve">
          <source>Enforces chunking of a HTTP PUT or POST body data to be deliverd to the mod_esi callback. Note this is not supported for mod_cgi. Default is no limit e.i the whole body is deliverd as one entity, which could be very memory consuming. &lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">mod_esiコールバックに配信されるHTTP PUTまたはPOST本体データのチャンク化を強制します。これはmod_cgiではサポートされていないことに注意してください。デフォルトは無制限です。つまり、全身が1つのエンティティとして配信されるため、メモリを大量に消費する可能性があります。 &lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df9bb310faa70aa0d761987d05cd45db9928b704" translate="yes" xml:space="preserve">
          <source>Engine API</source>
          <target state="translated">エンジンAPI</target>
        </trans-unit>
        <trans-unit id="4274910e7ccb1de8bd66b8871cfb848933020382" translate="yes" xml:space="preserve">
          <source>Enhanced Remote Procedure Call</source>
          <target state="translated">拡張リモートプロシージャコール</target>
        </trans-unit>
        <trans-unit id="f62489d96dcaee9fe090844ec3761e76e272966a" translate="yes" xml:space="preserve">
          <source>Enhanced error codes.</source>
          <target state="translated">エラーコードを強化しました。</target>
        </trans-unit>
        <trans-unit id="b0af252697cfc3bd079e25301b747579d8cb929b" translate="yes" xml:space="preserve">
          <source>Enqueue the &lt;code&gt;bin&lt;/code&gt; into &lt;code&gt;q&lt;/code&gt; skipping the first &lt;code&gt;skip&lt;/code&gt; bytes.</source>
          <target state="translated">最初の &lt;code&gt;skip&lt;/code&gt; バイトをスキップして、 &lt;code&gt;bin&lt;/code&gt; を &lt;code&gt;q&lt;/code&gt; にエンキューします。</target>
        </trans-unit>
        <trans-unit id="f6dbd5b5f41e43310556c16363a928d564f24e99" translate="yes" xml:space="preserve">
          <source>Enqueue the &lt;code&gt;iovec&lt;/code&gt; into &lt;code&gt;q&lt;/code&gt; skipping the first &lt;code&gt;skip&lt;/code&gt; bytes.</source>
          <target state="translated">最初の &lt;code&gt;skip&lt;/code&gt; バイトをスキップして、 &lt;code&gt;iovec&lt;/code&gt; を &lt;code&gt;q&lt;/code&gt; にエンキューします。</target>
        </trans-unit>
        <trans-unit id="c52745843cb391f37a0d2a1328df5d9cae8a3eb4" translate="yes" xml:space="preserve">
          <source>Enqueues a driver binary in the driver queue. The data in &lt;code&gt;bin&lt;/code&gt; at &lt;code&gt;offset&lt;/code&gt; with length &lt;code&gt;len&lt;/code&gt; is placed at the end of the queue. This function is most often faster than &lt;code&gt;&lt;a href=&quot;#driver_enq&quot;&gt;driver_enq&lt;/a&gt;&lt;/code&gt;, because no data must be copied.</source>
          <target state="translated">ドライバーバイナリをドライバーキューに入れます。データ &lt;code&gt;bin&lt;/code&gt; における &lt;code&gt;offset&lt;/code&gt; 長と &lt;code&gt;len&lt;/code&gt; キューの末尾に配置されています。ほとんどの場合、データをコピーする必要がないため、この関数は &lt;code&gt;&lt;a href=&quot;#driver_enq&quot;&gt;driver_enq&lt;/a&gt;&lt;/code&gt; よりも高速です。</target>
        </trans-unit>
        <trans-unit id="5687001b5e2fa4b62bebc2dc93d279fbbdd53c1f" translate="yes" xml:space="preserve">
          <source>Enqueues data in the driver queue. The data in &lt;code&gt;buf&lt;/code&gt; is copied (&lt;code&gt;len&lt;/code&gt; bytes) and placed at the end of the driver queue. The driver queue is normally used in a FIFO way.</source>
          <target state="translated">ドライバキューにデータをエンキューします。 &lt;code&gt;buf&lt;/code&gt; 内のデータがコピーされ（ &lt;code&gt;len&lt;/code&gt; バイト）、ドライバーキューの最後に配置されます。通常、ドライバーキューはFIFOの方法で使用されます。</target>
        </trans-unit>
        <trans-unit id="da9bea378d6eda4a2eccc46e57c3a42efdd7761b" translate="yes" xml:space="preserve">
          <source>Enqueues the data in &lt;code&gt;ev&lt;/code&gt;, skipping the first &lt;code&gt;skip&lt;/code&gt; bytes of it, at the end of the driver queue. It is faster than &lt;code&gt;&lt;a href=&quot;#driver_enq&quot;&gt;driver_enq&lt;/a&gt;&lt;/code&gt;, because no data must be copied.</source>
          <target state="translated">ドライバーキューの最後で、データの最初の &lt;code&gt;skip&lt;/code&gt; バイトをスキップして、データを &lt;code&gt;ev&lt;/code&gt; にエンキューします。データをコピーする必要がないため、 &lt;code&gt;&lt;a href=&quot;#driver_enq&quot;&gt;driver_enq&lt;/a&gt;&lt;/code&gt; より高速です。</target>
        </trans-unit>
        <trans-unit id="014cabf718cf24ef9b31ec84cd11c02beef4f694" translate="yes" xml:space="preserve">
          <source>Ensure that all nodes (Erlang-, C-, and Java nodes) of a distributed Erlang system is of the same Erlang/OTP release, or from two different Erlang/OTP releases X and Y, where &lt;strong&gt;all&lt;/strong&gt; Y nodes have compatibility mode X.</source>
          <target state="translated">分散Erlangシステムのすべてのノード（Erlang-、C-、およびJavaノード）が同じErlang / OTPリリース、または2つの異なるErlang / OTPリリースXおよびYからのものであることを確認します。&lt;strong&gt;すべての&lt;/strong&gt; Yノードは互換モードXを持っています。</target>
        </trans-unit>
        <trans-unit id="958b68eb429026f1debb7fb95959ba06f9687fcd" translate="yes" xml:space="preserve">
          <source>Ensure that the &lt;code&gt;priv&lt;/code&gt; directory, where the C program is located, is included in the new release package:</source>
          <target state="translated">Cプログラムが配置されている &lt;code&gt;priv&lt;/code&gt; ディレクトリが新しいリリースパッケージに含まれていることを確認します。</target>
        </trans-unit>
        <trans-unit id="b4983262d3266b73c45b4b7746403f7f7b7d9740" translate="yes" xml:space="preserve">
          <source>Ensure that the configuration parameters for the &lt;code&gt;os_sup&lt;/code&gt; module in the &lt;code&gt;os_mon&lt;/code&gt; application are correct.</source>
          <target state="translated">&lt;code&gt;os_mon&lt;/code&gt; アプリケーションの &lt;code&gt;os_sup&lt;/code&gt; モジュールの構成パラメーターが正しいことを確認してください。</target>
        </trans-unit>
        <trans-unit id="6fc8dbfdde6b1e68d82e36f6f6fa0143435b8681" translate="yes" xml:space="preserve">
          <source>Ensure that the following configuration parameters have correct values:</source>
          <target state="translated">以下の構成パラメータが正しい値であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="3c544c06d01afec781e1835ca1c990d2bf3d3fdb" translate="yes" xml:space="preserve">
          <source>Ensure that the header is included when using &lt;code&gt;ets&lt;/code&gt; and &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; in compiled code.</source>
          <target state="translated">コンパイルされたコードで &lt;code&gt;ets&lt;/code&gt; および &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; を使用する場合は、ヘッダーが含まれていることを確認してください。</target>
        </trans-unit>
        <trans-unit id="5c48b0c8103147c698d11fdc42ece8fa98d1b45c" translate="yes" xml:space="preserve">
          <source>Ensure you know what a binary contains before converting it to a string. If no other option exists, try heuristics:</source>
          <target state="translated">バイナリを文字列に変換する前に、バイナリに何が含まれているかを確認してください。他のオプションがない場合は、ヒューリスティックを試してみてください。</target>
        </trans-unit>
        <trans-unit id="b1ea6f53738aaf6c0f29ca61cdc22d0e4ce92e45" translate="yes" xml:space="preserve">
          <source>Ensures that a copy of all events of type &lt;code&gt;Event-Category&lt;/code&gt; are sent to the calling process</source>
          <target state="translated">タイプ &lt;code&gt;Event-Category&lt;/code&gt; のすべてのイベントのコピーが呼び出しプロセスに送信されるようにします</target>
        </trans-unit>
        <trans-unit id="5dced8b350b5f94877c96cbc4ab7c21ba7f688da" translate="yes" xml:space="preserve">
          <source>Ensures that a copy of all events of type &lt;code&gt;EventCategory&lt;/code&gt; is sent to the caller. The available event types are described in the &lt;code&gt;&lt;a href=&quot;mnesia_chap5#event_handling&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;EventCategory&lt;/code&gt; のすべてのイベントのコピーが呼び出し元に送信されるようにします。使用可能なイベントタイプについては、 &lt;code&gt;&lt;a href=&quot;mnesia_chap5#event_handling&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 説明があります。</target>
        </trans-unit>
        <trans-unit id="ef731b04fa2fb82f85b737d70f620dea873787e1" translate="yes" xml:space="preserve">
          <source>Ensures that a pool master is running and includes &lt;code&gt;Node&lt;/code&gt; in the pool master's pool of nodes.</source>
          <target state="translated">プールマスタを実行して含まれることを確実に &lt;code&gt;Node&lt;/code&gt; ノードのプールマスタのプールで。</target>
        </trans-unit>
        <trans-unit id="d5e41d06cf30ae1415f82183a24356df8156803f" translate="yes" xml:space="preserve">
          <source>Ensures that all parent directories for the specified file or directory name &lt;code&gt;Name&lt;/code&gt; exist, trying to create them if necessary.</source>
          <target state="translated">指定されたファイルまたはディレクトリ名 &lt;code&gt;Name&lt;/code&gt; のすべての親ディレクトリが存在することを確認し、必要に応じてそれらを作成しようとします。</target>
        </trans-unit>
        <trans-unit id="6c6ccaf34a6cba3c5b5de6abfd26bbd92cd970b6" translate="yes" xml:space="preserve">
          <source>Ensures that all updates made to table &lt;code&gt;Name&lt;/code&gt; are written to disk. This also applies to tables that have been opened with flag &lt;code&gt;ram_file&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt;. In this case, the contents of the RAM file are flushed to disk.</source>
          <target state="translated">テーブル &lt;code&gt;Name&lt;/code&gt; に対して行われたすべての更新がディスクに書き込まれるようにします。これは、フラグ &lt;code&gt;ram_file&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定して開いたテーブルにも適用されます。この場合、RAMファイルの内容はディスクにフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="179be22883a6aff731d18c72553f15ebd6342f7c" translate="yes" xml:space="preserve">
          <source>Ensures that any buffers kept by the operating system (not by the Erlang runtime system) are written to disk. In many ways it resembles &lt;code&gt;fsync&lt;/code&gt; but it does not update some of the metadata of the file, such as the access time. On some platforms this function has no effect.</source>
          <target state="translated">オペレーティングシステム（Erlangランタイムシステムではない）によって保持されているバッファーがディスクに書き込まれるようにします。多くの点で &lt;code&gt;fsync&lt;/code&gt; に似ていますが、アクセス時間など、ファイルのメタデータの一部は更新されません。一部のプラットフォームでは、この関数は効果がありません。</target>
        </trans-unit>
        <trans-unit id="52b1c024e514cd8bc30b642609203a562f517997" translate="yes" xml:space="preserve">
          <source>Ensures that any buffers kept by the operating system (not by the Erlang runtime system) are written to disk. On some platforms, this function might have no effect.</source>
          <target state="translated">オペレーティングシステム(Erlangランタイムシステムではなく)が保持しているバッファがディスクに書き込まれるようにします。プラットフォームによっては、この関数が効果を発揮しない場合があります。</target>
        </trans-unit>
        <trans-unit id="7bf2bc1e9755470f51dfd03724a8f65fe715b5ae" translate="yes" xml:space="preserve">
          <source>Ensures that the Erlang runtime system never tries to read any input. Implies &lt;code&gt;-noshell&lt;/code&gt;.</source>
          <target state="translated">Erlangランタイムシステムが入力を読み取らないようにします。意味 &lt;code&gt;-noshell&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe6fc0efb68605c111d7aad1e10930fb3e4c27d7" translate="yes" xml:space="preserve">
          <source>Ensures that the contents of the log are written to the disk. This is usually a rather expensive operation.</source>
          <target state="translated">ログの内容がディスクに書き込まれることを保証します。これは通常、かなり高価な操作です。</target>
        </trans-unit>
        <trans-unit id="483ad84b3b9a9460f181b8df2506d3da9749a272" translate="yes" xml:space="preserve">
          <source>Ensures that the local transaction log file is synced to disk. On a single node system, data written to disk tables since the last dump can be lost if there is a power outage. See &lt;code&gt;&lt;a href=&quot;#dump_log-0&quot;&gt;dump_log/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ローカルトランザクションログファイルがディスクに同期されていることを確認します。単一ノードシステムでは、停電が発生すると、最後のダンプ以降にディスクテーブルに書き込まれたデータが失われる可能性があります。 &lt;code&gt;&lt;a href=&quot;#dump_log-0&quot;&gt;dump_log/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7b10764358fd20fca794865132b50fac708751e7" translate="yes" xml:space="preserve">
          <source>Enter command &lt;code&gt;&lt;a href=&quot;rb#help-0&quot;&gt;rb:help()&lt;/a&gt;&lt;/code&gt; to access the report browser online help system.</source>
          <target state="translated">コマンド &lt;code&gt;&lt;a href=&quot;rb#help-0&quot;&gt;rb:help()&lt;/a&gt;&lt;/code&gt; を入力して、レポートブラウザーのオンラインヘルプシステムにアクセスします。</target>
        </trans-unit>
        <trans-unit id="6c4d5a3c58a4c3838082c4cf0b51e1e37c9596f3" translate="yes" xml:space="preserve">
          <source>Enter shell break mode</source>
          <target state="translated">シェルブレークモードを入力します。</target>
        </trans-unit>
        <trans-unit id="934d0063917157179a390d3ca343867e46640984" translate="yes" xml:space="preserve">
          <source>Enter the &lt;code&gt;telnet_settings&lt;/code&gt; term in a configuration file included in the test and &lt;code&gt;ct_telnet&lt;/code&gt; retrieves the information automatically.</source>
          <target state="translated">テストに含まれる構成ファイルに &lt;code&gt;telnet_settings&lt;/code&gt; 用語を入力すると、 &lt;code&gt;ct_telnet&lt;/code&gt; が情報を自動的に取得します。</target>
        </trans-unit>
        <trans-unit id="8246546eefded8a17ce0a5c88984bec6f308377e" translate="yes" xml:space="preserve">
          <source>Enter the following code in a file named &lt;code&gt;tut1.erl&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;tut1.erl&lt;/code&gt; という名前のファイルに次のコードを入力します。</target>
        </trans-unit>
        <trans-unit id="4b1f029dd1bd7aa1c9278ca0308da576f46de6b2" translate="yes" xml:space="preserve">
          <source>Enter the next program in a file named &lt;code&gt;tut2.erl&lt;/code&gt;). It can be useful for converting from inches to centimeters and conversely:</source>
          <target state="translated">&lt;code&gt;tut2.erl&lt;/code&gt; という名前のファイルに次のプログラムを入力します。これは、インチからセンチメートルへの変換、およびその逆に役立ちます。</target>
        </trans-unit>
        <trans-unit id="115b9de9f1e80ff76c3ea96d77950a47bd332297" translate="yes" xml:space="preserve">
          <source>Entering and leaving FIPS mode on a node already running crypto is not supported. The reason is that OpenSSL is designed to prevent an application requesting FIPS mode to end up accidentally running in non-FIPS mode. If entering FIPS mode fails (e.g. the Object Module is not found or is compromised) any subsequent use of the OpenSSL API would terminate the emulator.</source>
          <target state="translated">すでに暗号化を実行しているノードでの FIPS モードの入退出はサポートされていません。その理由は、OpenSSL は、FIPS モードを要求するアプリケーションが誤って非 FIPS モードで実行されてしまうことを防ぐために設計されているからです。FIPS モードへの移行に失敗した場合 (オブジェクトモジュールが見つからない、または危殆化しているなど)、その後の OpenSSL API の使用はエミュレータを終了させてしまいます。</target>
        </trans-unit>
        <trans-unit id="ef0d6a83dcf4276ea47f6fec92e31ab033e3e3cf" translate="yes" xml:space="preserve">
          <source>Entering at the front and exiting at the rear are reverse operations on the queue.</source>
          <target state="translated">前方で入室し、後方で退室することは、キューの逆操作となります。</target>
        </trans-unit>
        <trans-unit id="f6b1269b202f34cf628bd423eacf8afa6ad2feb0" translate="yes" xml:space="preserve">
          <source>Entries in &lt;code&gt;Comments&lt;/code&gt; represent multi-line comments. For each entry, &lt;code&gt;Line&lt;/code&gt; is the line number and &lt;code&gt;Column&lt;/code&gt; the left column of the comment (the column of the first comment-introducing &quot;&lt;code&gt;%&lt;/code&gt;&quot; character). &lt;code&gt;Indentation&lt;/code&gt; is the number of character positions between the last non-whitespace character before the comment (or the left margin) and the left column of the comment. &lt;code&gt;Text&lt;/code&gt; is a list of strings representing the consecutive comment lines in top-down order, where each string contains all characters following (but not including) the comment-introducing &quot;&lt;code&gt;%&lt;/code&gt;&quot; and up to (but not including) the terminating newline. (Cf. module &lt;code&gt;erl_comment_scan&lt;/code&gt;.)</source>
          <target state="translated">&lt;code&gt;Comments&lt;/code&gt; エントリは複数行のコメントを表します。各エントリの &lt;code&gt;Line&lt;/code&gt; は行番号、 &lt;code&gt;Column&lt;/code&gt; はコメントの左側の列（最初のコメントを示す「 &lt;code&gt;%&lt;/code&gt; 」文字の列）です。 &lt;code&gt;Indentation&lt;/code&gt; は、コメントの前の空白以外の最後の文字（または左マージン）とコメントの左の列の間の文字位置の数です。 &lt;code&gt;Text&lt;/code&gt; は、連続したコメント行を上から下に表す文字列のリストです。各文字列には、コメントを導入する「 &lt;code&gt;%&lt;/code&gt; 」から最後の改行まで（含まない）のすべての文字が含まれます。 （cf.モジュール &lt;code&gt;erl_comment_scan&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="f83c27f29cda32a5c88a37a073106cf111ae03bb" translate="yes" xml:space="preserve">
          <source>Entry point for the the new process.</source>
          <target state="translated">新しいプロセスのためのエントリーポイント。</target>
        </trans-unit>
        <trans-unit id="d443a1185575c125d61e0af393b044d7b06ef572" translate="yes" xml:space="preserve">
          <source>Environment</source>
          <target state="translated">Environment</target>
        </trans-unit>
        <trans-unit id="6749984c5ebae89f18b1be2a7e0c97e3f86eb6c8" translate="yes" xml:space="preserve">
          <source>Environment Variable Passing (RFC 4254, section 6.4)</source>
          <target state="translated">環境変数の受け渡し (RFC 4254,セクション 6.4)</target>
        </trans-unit>
        <trans-unit id="d714f219a186c0491f87d10110aaba7764529397" translate="yes" xml:space="preserve">
          <source>Environment variable &lt;code&gt;ERL_LIBS&lt;/code&gt; (defined in the operating system) can be used to define more library directories to be handled in the same way as the standard OTP library directory described above, except that directories without an &lt;code&gt;ebin&lt;/code&gt; directory are ignored.</source>
          <target state="translated">環境変数 &lt;code&gt;ERL_LIBS&lt;/code&gt; （オペレーティングシステムで定義）を使用して、 &lt;code&gt;ebin&lt;/code&gt; ディレクトリのないディレクトリが無視されることを除いて、上記の標準OTPライブラリディレクトリと同じ方法で処理されるライブラリディレクトリを定義できます。</target>
        </trans-unit>
        <trans-unit id="b6daa47d47d30c06a68597fafd923e987f5a36cd" translate="yes" xml:space="preserve">
          <source>Environment variable &lt;code&gt;ERL_LIBS&lt;/code&gt; (if defined) is to contain a colon-separated (for Unix-like systems) or semicolon-separated (for Windows) list of additional libraries.</source>
          <target state="translated">環境変数 &lt;code&gt;ERL_LIBS&lt;/code&gt; （定義されている場合）には、コロンで区切られた（Unixのようなシステムの場合）またはセミコロンで区切られた（Windowsの場合）追加のライブラリのリストが含まれます。</target>
        </trans-unit>
        <trans-unit id="c57186053f185252b9718153515cfe2460506345" translate="yes" xml:space="preserve">
          <source>Environment variable &lt;code&gt;RELDIR&lt;/code&gt; can be set before calling this example, which sets the directory where to find the release files.</source>
          <target state="translated">環境変数 &lt;code&gt;RELDIR&lt;/code&gt; は、この例を呼び出す前に設定できます。これは、リリースファイルを見つけるディレクトリを設定します。</target>
        </trans-unit>
        <trans-unit id="b1eaa79bc837d6866d6b6f457d286e20d9c99f7f" translate="yes" xml:space="preserve">
          <source>Environment variables and their interpretation are handled much in the same way as filenames. If Unicode filenames are enabled, environment variables as well as parameters to the Erlang VM are expected to be in Unicode.</source>
          <target state="translated">環境変数とその解釈はファイル名と同じように扱われます。もしUnicodeファイル名が有効になっていれば、環境変数とErlang VMへのパラメータはUnicodeであることが期待されます。</target>
        </trans-unit>
        <trans-unit id="cd7c85d03b98190d36904693a2164d38b1a38d5f" translate="yes" xml:space="preserve">
          <source>Environment variables can be passed before starting the shell/command. Is to be called by a client channel processes.</source>
          <target state="translated">シェル/コマンドを起動する前に環境変数を渡すことができます。クライアントチャネルのプロセスから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="39882a4b7ec9443b18dbf778a96b5f0d21018ee8" translate="yes" xml:space="preserve">
          <source>Environment variables can be passed to the shell/command to be started later. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#setenv-5&quot;&gt; ssh_connection:setenv/5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">環境変数をシェル/コマンドに渡して、後で開始することができます。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#setenv-5&quot;&gt; ssh_connection:setenv/5&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="bfb3775bf1b5456a3e06e36f98664cca58126e02" translate="yes" xml:space="preserve">
          <source>Environment variables can be passed to the shell/command to be started later. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#setenv-5&quot;&gt;ssh_connection:setenv/5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">環境変数をシェル/コマンドに渡して、後で起動できます。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#setenv-5&quot;&gt;ssh_connection:setenv/5&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="44890b07830149c521ba5c9ad6cfa1ad85c5f3e9" translate="yes" xml:space="preserve">
          <source>Ephemeral Diffie-Hellman cipher suites are supported, but not Diffie Hellman Certificates cipher suites.</source>
          <target state="translated">エフェメラル Diffie-Hellman 暗号スイートはサポートされていますが、Diffie-Hellman 証明書暗号スイートはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="13b9a04dcb3e0ce7661aca803fc0ceecf849e1d8" translate="yes" xml:space="preserve">
          <source>Equal to</source>
          <target state="translated">に等しい</target>
        </trans-unit>
        <trans-unit id="dcf80d8cab4aa6589affe9378df2d8dcf3a48955" translate="yes" xml:space="preserve">
          <source>Equal to 1 + n + m.</source>
          <target state="translated">1+n+mに等しい。</target>
        </trans-unit>
        <trans-unit id="09bb5e7c769262bf6d1a2aaff9bd4edf5501c760" translate="yes" xml:space="preserve">
          <source>Equal to &lt;code&gt;112&lt;/code&gt; (pass through).</source>
          <target state="translated">&lt;code&gt;112&lt;/code&gt; に等しい（パススルー）。</target>
        </trans-unit>
        <trans-unit id="05c13973f975cc581a5888850198e264ef30dee6" translate="yes" xml:space="preserve">
          <source>Equal to d + n + m.</source>
          <target state="translated">d+n+mに等しい。</target>
        </trans-unit>
        <trans-unit id="16b53a690e60aff7bf7cb6594412ef2ab0ee11e0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#ann_c_bitstr-6&quot;&gt;ann_c_bitstr(As, Value, Size, abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ann_c_bitstr-6&quot;&gt;ann_c_bitstr(As, Value, Size, abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="4371bb175da3106bcb8069b1e138ae8955b39c79" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#ann_c_clause-4&quot;&gt;ann_c_clause(As, Patterns, c_atom(true), Body)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ann_c_clause-4&quot;&gt;ann_c_clause(As, Patterns, c_atom(true), Body)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="426e43a8cca6f35d12cbaa419095ab24bb54a147" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#ann_c_receive-4&quot;&gt;ann_c_receive(As, Clauses, c_atom(infinity), c_atom(true))&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;&lt;a href=&quot;#ann_c_receive-4&quot;&gt;ann_c_receive(As, Clauses, c_atom(infinity), c_atom(true))&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="57131c4f5251e48576073e9ae91ab0dd3431ac0f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#ann_c_var-2&quot;&gt;ann_c_var(As, {Atom, Arity})&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ann_c_var-2&quot;&gt;ann_c_var(As, {Atom, Arity})&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="5a2eecf99e77358f8e73373df62b8ac930c49352" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#ann_make_list-3&quot;&gt;ann_make_list(As, List, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ann_make_list-3&quot;&gt;ann_make_list(As, List, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f1b3143e9955ab9adddb2b4dd2f3b4517e127a1a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#attribute-2&quot;&gt;attribute(Name, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#attribute-2&quot;&gt;attribute(Name, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="4ae4ec2e93db85feb5a2578e005f1e4886d234c3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#basedir-3&quot;&gt;basedir(Type,Application, #{})&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#basedir-3&quot;&gt;basedir(Type,Application, #{})&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f4b1f57c66209d56e715b24a7143c02e424c2a1e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#basedir_3_1&quot;&gt; basedir(PathType, Application, #{})&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#basedir_3_2&quot;&gt; basedir(PathsType, Application, #{})&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;&lt;a href=&quot;#basedir_3_1&quot;&gt; basedir(PathType, Application, #{})&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#basedir_3_2&quot;&gt; basedir(PathsType, Application, #{})&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="582aebe00b21d5836a2498deb6d665024c07f6cb" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#best-2&quot;&gt;best(Tree, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#best-2&quot;&gt;best(Tree, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f918eb40249a6defccff4175d40e68cfa2e2dee0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#binary_field-2&quot;&gt;binary_field(Body, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#binary_field-2&quot;&gt;binary_field(Body, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="a6125894016cef185475df8034bb52c772f1e365" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#c_bitstr-5&quot;&gt;c_bitstr(Value, Size, abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#c_bitstr-5&quot;&gt;c_bitstr(Value, Size, abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="91416c2a47641a61221f60e3af3ff79f8fc791fa" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#c_bitstr-5&quot;&gt;c_bitstr(Value, abstract(all), abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#c_bitstr-5&quot;&gt;c_bitstr(Value, abstract(all), abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="e083c319e8db2f5270e0830102043f89b198f901" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#c_clause-3&quot;&gt;c_clause(Patterns, c_atom(true), Body)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#c_clause-3&quot;&gt;c_clause(Patterns, c_atom(true), Body)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="ce39d94d40077a836dd6fc4a347035c2aff1db6e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#c_module-4&quot;&gt;c_module(Name, Exports, [], Definitions)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#c_module-4&quot;&gt;c_module(Name, Exports, [], Definitions)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="102237203e3bbf092a460bf7f8aa761f4ba6d295" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#c_receive-3&quot;&gt;c_receive(Clauses, c_atom(infinity), c_atom(true))&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;&lt;a href=&quot;#c_receive-3&quot;&gt;c_receive(Clauses, c_atom(infinity), c_atom(true))&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d54191892c882d880f2a51b32fc5643c07541c4f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#c_var-1&quot;&gt;c_var({Name, Arity})&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#c_var-1&quot;&gt;c_var({Name, Arity})&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="c852d2a7e09eb55c48f03a8f28bb6f72b6141d58" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#capture_get-1&quot;&gt;ct:capture_get([default])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#capture_get-1&quot;&gt;ct:capture_get([default])&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="e1c49fe52a91556ff0aaa7944a2bc8b6e613b0b7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#clause-3&quot;&gt;clause([], Guard, Body)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#clause-3&quot;&gt;clause([], Guard, Body)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="1aa8a2e37f287064a6e3f946a19187bec0ce0ac5" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#cmd-3&quot;&gt;ct_telnet:cmd(Connection, Cmd, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#cmd-3&quot;&gt;ct_telnet:cmd(Connection, Cmd, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="928a260bdb3b3e5d3caf0e440128bbb17938454c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#cmdf-4&quot;&gt;ct_telnet:cmdf(Connection, CmdFormat, Args, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#cmdf-4&quot;&gt;ct_telnet:cmdf(Connection, CmdFormat, Args, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="684e9655a8ec58d496dd036380b5470505aec75d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#comment-2&quot;&gt;comment(none, Strings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#comment-2&quot;&gt;comment(none, Strings)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="ddbe0b3f767b85def18a6f538394f315db70b95f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile(Code, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile(Code, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="4746c2d2b85dce9582bc7fd1835cfb6190066aff" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#compile_and_load-2&quot;&gt;compile_and_load(Code, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#compile_and_load-2&quot;&gt;compile_and_load(Code, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="34c3413e854719b0fdea410e48287f5f055af37f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;ct_ssh:connect(KeyOrName, ConnType, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;ct_ssh:connect(KeyOrName, ConnType, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="aa210fba1d3569a7a58c6f3bf220d9b782fa4cc2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;ct_ssh:connect(KeyOrName, host, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;ct_ssh:connect(KeyOrName, host, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="2c9d6a6a81b7654b8215baad7f8ccd2d21ee286d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#cont_state-2&quot;&gt;cont_state(ContinuationState, S)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#cont_state-2&quot;&gt;cont_state(ContinuationState, S)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="32756e4dc130dec691ae949f865ea7edf04d260d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#deflateEnd-1&quot;&gt;deflateEnd/1&lt;/a&gt;&lt;/code&gt; followed by &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit/1,2,6&lt;/a&gt;&lt;/code&gt;, but does not free and reallocate all the internal compression state. The stream keeps the same compression level and any other attributes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#deflateEnd-1&quot;&gt;deflateEnd/1&lt;/a&gt;&lt;/code&gt; の後に &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit/1,2,6&lt;/a&gt;&lt;/code&gt; 1,2,6が続くのと同じですが、すべての内部圧縮状態を解放して再割り当てしません。ストリームは同じ圧縮レベルとその他の属性を保持します。</target>
        </trans-unit>
        <trans-unit id="0b6695db18a2f2dd98d7dd3f365cdbbbafda43a3" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#dir-1&quot;&gt;dir(&quot;&quot;)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#dir-1&quot;&gt;dir(&quot;&quot;)&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="2c23622ea4c2372f9268551a9c4cc18a67a0a649" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#dir-2&quot;&gt;dir(Dir, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#dir-2&quot;&gt;dir(Dir, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="652b45ea11a1ce0fa9b4d6dc294b0e3c62bfcff8" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#enif_fprintf&quot;&gt;enif_fprintf&lt;/a&gt;&lt;/code&gt; except that its called with a &lt;code&gt;va_list&lt;/code&gt; instead of a variable number of arguments.</source>
          <target state="translated">可変数の引数の代わりに &lt;code&gt;va_list&lt;/code&gt; で呼び出されることを除いて、 &lt;code&gt;&lt;a href=&quot;#enif_fprintf&quot;&gt;enif_fprintf&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="ce8f3d87e78ddae6d3f4b53dea2eed3842f805e4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#enif_snprintf&quot;&gt;enif_snprintf&lt;/a&gt;&lt;/code&gt; except that its called with a &lt;code&gt;va_list&lt;/code&gt; instead of a variable number of arguments.</source>
          <target state="translated">可変数の引数の代わりに &lt;code&gt;va_list&lt;/code&gt; で呼び出されることを除いて、 &lt;code&gt;&lt;a href=&quot;#enif_snprintf&quot;&gt;enif_snprintf&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="40e5dfc329510d56dfeca51783615fe5be99ae88" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#event_state-2&quot;&gt;event_state(EventState, S)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#event_state-2&quot;&gt;event_state(EventState, S)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="0822b99fc1db87c102d8944b91b0d47d78c92c70" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#exec-3&quot;&gt;ct_ssh:exec(SSH, Command, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#exec-3&quot;&gt;ct_ssh:exec(SSH, Command, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="2f749471e89ae46c17f92a3f8623d58c76ab4410" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#expect-3&quot;&gt;ct_telnet:expect(Connections, Patterns, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#expect-3&quot;&gt;ct_telnet:expect(Connections, Patterns, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="53258dbd9b4c7a9e2fd1a5cca64f75032c0d6e84" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#export-3&quot;&gt;export(Data, Callback, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#export-3&quot;&gt;export(Data, Callback, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d4cc4c14f33a49c9f42d6c4d916b5e3b17d0d09f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#export_simple-3&quot;&gt;export_simple(Content, Callback, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#export_simple-3&quot;&gt;export_simple(Content, Callback, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="5479a778e5dff6538cd581dcd60edf566f436a01" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#fetch_state-2&quot;&gt;fetch_state(FetchState, S)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#fetch_state-2&quot;&gt;fetch_state(FetchState, S)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="bf3f8d846a3d7912cbd2a46e4afbf7705e4e3dbd" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#file-2&quot;&gt;file(Filename, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#file-2&quot;&gt;file(Filename, [])&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f40228bea002526f6dd9192eca4c4d2a44c23921" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#file-2&quot;&gt;file(Name, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#file-2&quot;&gt;file(Name, [])&lt;/a&gt;&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="0b11106b6d688183433883568c03ecb5e7c95160" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#floating-3&quot;&gt;floating(D, 0, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#floating-3&quot;&gt;floating(D, 0, 0)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="7409ce92240a99bb687331e86d1562839b83251f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#follow-3&quot;&gt;follow(D1, D2, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当する &lt;code&gt;&lt;a href=&quot;#follow-3&quot;&gt;follow(D1, D2, 0)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e87ef28b8ea2817254f842c3a48fc6a838b2ab2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt; format(CrashReport, latin1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt; format(CrashReport, latin1)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="c489e8c7139b8f43147689cd42f9bc1c6af4163b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format(CrashReport, latin1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format(CrashReport, latin1)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="70e8c43e3058793de183c9f16830fd6cfbc7d1fb" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format(D, 80)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当する &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format(D, 80)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2b4d0ee5dd2b855eb33bd99a8a50f0cf9bc94f6a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format(Tree, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#format-2&quot;&gt;format(Tree, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="6d1a5fec2195ff4e40181e992b455c707bba03aa" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format(D, PaperWidth, 65)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当する &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format(D, PaperWidth, 65)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7fae69455d869a0b7ebb1ada8defd3089ff9387" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#from_list-2&quot;&gt;from_list(List, undefined)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#from_list-2&quot;&gt;from_list(List, undefined)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="99e70718d2848b64a547637e78268770d0aaf785" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#from_orddict-2&quot;&gt;from_orddict(Orddict, undefined)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#from_orddict-2&quot;&gt;from_orddict(Orddict, undefined)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="5608d95603de58cc55eae36484f15c095b2086bc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#function_type-2&quot;&gt;function_type(any_arity, Type)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#function_type-2&quot;&gt;function_type(any_arity, Type)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="ebc826b0fca1c5dadf35269879027b11f5557ead" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#get_config-3&quot;&gt;ct:get_config(Required, Default, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#get_config-3&quot;&gt;ct:get_config(Required, Default, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="31d74b3bb9d8e21565792d25a739f19c3dced447" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#get_config-3&quot;&gt;ct:get_config(Required, undefined, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#get_config-3&quot;&gt;ct:get_config(Required, undefined, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="de26403ff29a5f94199e561aaaf5a64b1a96fee6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#hook_state-2&quot;&gt;hook_state(HookState, S)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#hook_state-2&quot;&gt;hook_state(HookState, S)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="4ef8b521ad0c1199b211d0467922ee92c5e23a6b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#inflate-3&quot;&gt;inflate(Z, Data, [])&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#inflate-3&quot;&gt;inflate(Z, Data, [])&lt;/a&gt;&lt;/code&gt; 同等</target>
        </trans-unit>
        <trans-unit id="b9453f561abca3673472314180640b1dd67d37e0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#inflateEnd-1&quot;&gt;inflateEnd/1&lt;/a&gt;&lt;/code&gt; followed by &lt;code&gt;&lt;a href=&quot;#inflateInit-1&quot;&gt;inflateInit/1&lt;/a&gt;&lt;/code&gt;, but does not free and reallocate all the internal decompression state. The stream will keep attributes that could have been set by &lt;code&gt;inflateInit/1,2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#inflateEnd-1&quot;&gt;inflateEnd/1&lt;/a&gt;&lt;/code&gt; に続いて &lt;code&gt;&lt;a href=&quot;#inflateInit-1&quot;&gt;inflateInit/1&lt;/a&gt;&lt;/code&gt; と同等ですが、すべての内部解凍状態を解放して再割り当てしません。ストリームは、 &lt;code&gt;inflateInit/1,2&lt;/code&gt; によって設定された可能性のある属性を保持します。</target>
        </trans-unit>
        <trans-unit id="493def41aaecfc7ac142be1b24f624231144cb36" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#label-2&quot;&gt;label(Tree, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#label-2&quot;&gt;label(Tree, 0)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="7229176aa8687e3ace20595b98b2167d75c17ad2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#layout-2&quot;&gt;layout(Tree, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#layout-2&quot;&gt;layout(Tree, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="495ce089c721e454dbee6f4d4c9f70c5eed41844" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#list-2&quot;&gt;list(List, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#list-2&quot;&gt;list(List, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="22ede575071e89d794133470da9ef9e63ed3be8b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(alert,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(alert,...)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="96fc6e6987a2592263865919948ca920427939ae" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(critical,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(critical,...)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bdbbee6065747c1e726e943a8952d721bfb3041c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(debug,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(debug,...)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="30ac05a356e0df5a38b45ed160d3843d24041880" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(emergency,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(emergency,...)&lt;/a&gt;&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="843545483e6b90487c50735820ade8a00f8c158f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(error,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(error,...)&lt;/a&gt;&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="07f018f04f3b382e02d814f5ca34e99f73093dbc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(info,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(info,...)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="effe595c7e33bea5f348ed478d2dd412222f5593" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(notice,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(notice,...)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="909dd42f0266829be1bcfc81baf284b864756039" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(warning,...)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-2&quot;&gt;log(warning,...)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="031e62392f8b08c26ecfd5a63b767af5b2410005" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-5&quot;&gt;ct:log(Category, Importance, Format, FormatArgs, Opts)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#log-5&quot;&gt;ct:log(Category, Importance, Format, FormatArgs, Opts)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f78c74016c2ef95eb55b46f915e05a429b746c54" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-5&quot;&gt;ct:log(Category, Importance, Format, FormatArgs, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#log-5&quot;&gt;ct:log(Category, Importance, Format, FormatArgs, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="505fd95ce8db366d54edc502b7dee81fbdde38c6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#log-5&quot;&gt;ct:log(default, 50, Format, [], [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#log-5&quot;&gt;ct:log(default, 50, Format, [], [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="c9aae0057a0fab531d0ad07f8b10a8cc7377ee3f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#macro-2&quot;&gt;macro(Name, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#macro-2&quot;&gt;macro(Name, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="6f7c5f5029244f4d68c3600f0d04a632db381519" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#make_list-2&quot;&gt;make_list(List, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#make_list-2&quot;&gt;make_list(List, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="b2b356415f1c1d0fd662228c416ab1a936d4a3a2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#map_expr-2&quot;&gt;map_expr(none, Fields)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#map_expr-2&quot;&gt;map_expr(none, Fields)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d1b1c0a4d526bb9484aac2f70daf6dbda88b735c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#map_type-1&quot;&gt;map_type(any_size)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#map_type-1&quot;&gt;map_type(any_size)&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="c8460b3918f4611b439fc4fabc2dabf75810d353" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#merge-3&quot;&gt;merge(Name, Files, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#merge-3&quot;&gt;merge(Name, Files, [])&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="058dca5fef272e099ea76f35dd557286960d85df" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#merge_files-4&quot;&gt;merge_files(Name, [], Files, Options)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#merge_files-4&quot;&gt;merge_files(Name, [], Files, Options)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d8b5be16c6e3ce9dce377c124b8b86e0dd70e104" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#module-2&quot;&gt;module(Forms, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#module-2&quot;&gt;module(Forms, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="9dff7bc3a95b3d2751d732f4f61bae3bff575214" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#node_cookie-2&quot;&gt;node_cookie(Node, Cookie)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#node_cookie-2&quot;&gt;node_cookie(Node, Cookie)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="fbe56e3a6d4c4c4d056d19f87306c2b02cda9418" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;ct_telnet:open(Name, telnet)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;ct_telnet:open(Name, telnet)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="9074015814dfdcda73445d0bb6e483a88fb30e37" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#open-4&quot;&gt;ct_telnet:ct_telnet:open(KeyOrName, ConnType, TargetMod, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;&lt;a href=&quot;#open-4&quot;&gt;ct_telnet:ct_telnet:open(KeyOrName, ConnType, TargetMod, [])&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2fe23231fc9809b7b87073f0fedc1728bd143d12" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#pal-5&quot;&gt;ct:pal(Category, Importance, Format, FormatArgs, Opts)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;&lt;a href=&quot;#pal-5&quot;&gt;ct:pal(Category, Importance, Format, FormatArgs, Opts)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fddf0305a41900f720db893c1b025d24f5d57976" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#pal-5&quot;&gt;ct:pal(Category, Importance, Format, FormatArgs, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#pal-5&quot;&gt;ct:pal(Category, Importance, Format, FormatArgs, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="2db3eb8f9e318ab9cb1176763427f045aa1eaa3d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#pal-5&quot;&gt;ct:pal(default, 50, Format, [], [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#pal-5&quot;&gt;ct:pal(default, 50, Format, [], [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="e694e97a0df6b8bd3fe42d77130aff60cc089d7c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par(Ds, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par(Ds, 0)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="a79ecf48b582b5855fe12375ff3b195eb0c23cb0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#parse-2&quot;&gt;parse(IODevice, 1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#parse-2&quot;&gt;parse(IODevice, 1)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="1d3131562cf48362cfd9a9e385cf4a230fb3e6c4" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#parse-3&quot;&gt;parse(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#parse-3&quot;&gt;parse(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="28d88e4a38d4759d866979030f4ad9a3e958000c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file(File, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file(File, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="916c501e4401286d2e8e7591743632d2e9e079da" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#parse_form-3&quot;&gt;parse_form(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#parse_form-3&quot;&gt;parse_form(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="10ee37c4b617207780a88dcbc33d40ef16cffd02" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#peernames-2&quot;&gt;peernames(Socket, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#peernames-2&quot;&gt;peernames(Socket, 0)&lt;/a&gt;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="7b5796bfde1378041039e80c7d77bc7ef1952313" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#print-5&quot;&gt;ct:print(Category, Importance, Format, FormatArgs, Opts)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#print-5&quot;&gt;ct:print(Category, Importance, Format, FormatArgs, Opts)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe90e72bb9403cedd2354abb523c2f6b59eaade1" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#print-5&quot;&gt;ct:print(Category, Importance, Format, FormatArgs, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#print-5&quot;&gt;ct:print(Category, Importance, Format, FormatArgs, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d53de3e423970ed78f487a85dc4ee2dfc925444b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#print-5&quot;&gt;ct:print(default, 50, Format, [], [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#print-5&quot;&gt;ct:print(default, 50, Format, [], [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="685bd8420dff68959c9c4bac76f0135fc06c0392" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#process_schema-2&quot;&gt;process_schema(Schema, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#process_schema-2&quot;&gt;process_schema(Schema, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="0281413d62a4d2a6f4f3901d8ea1c0c99c3ec440" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#process_schema-2&quot;&gt;process_schema(Schemas, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#process_schema-2&quot;&gt;process_schema(Schemas, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="2307340747392bf7458f2055790759706fe2d6cb" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#process_validate-3&quot;&gt;process_validate(Schema, Xml, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#process_validate-3&quot;&gt;process_validate(Schema, Xml, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="7f2a5c5b7acd67a6550329c7640c70eadfa9bbdc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#quick_parse-2&quot;&gt;quick_parse(IODevice, 1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#quick_parse-2&quot;&gt;quick_parse(IODevice, 1)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="1de891905e2e1a7b28384d0a8089b088c42cdf02" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#quick_parse-3&quot;&gt;quick_parse(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#quick_parse-3&quot;&gt;quick_parse(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="db445508d4699ebd2d86938da09208b59a495f31" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#quick_parse_file-2&quot;&gt;quick_parse_file(File, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#quick_parse_file-2&quot;&gt;quick_parse_file(File, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="981024e7eceead14c19c9252f00804dea25cf405" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#quick_parse_form-3&quot;&gt;quick_parse_form(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#quick_parse_form-3&quot;&gt;quick_parse_form(IODevice, StartLine, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="86599ee28ea3d0bf9edecbffc71bbd8071a2bb71" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#receive_expr-3&quot;&gt;receive_expr(Clauses, none, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#receive_expr-3&quot;&gt;receive_expr(Clauses, none, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="192a0c055b0a7f305086e17c8d52a91bbdb3e3dc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#receive_response-3&quot;&gt;ct_ssh:receive_response(SSH, ChannelId, close)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#receive_response-3&quot;&gt;ct_ssh:receive_response(SSH, ChannelId, close)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="a152765304b128f527af338bc05c41eab2dcc311" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#receive_response-4&quot;&gt;ct_ssh:receive_response(SSH, ChannelId, End, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#receive_response-4&quot;&gt;ct_ssh:receive_response(SSH, ChannelId, End, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="3d250fdf49915e189b7b0130f0aa3faa67965d0f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#record_expr-3&quot;&gt;record_expr(none, Type, Fields)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#record_expr-3&quot;&gt;record_expr(none, Type, Fields)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f487a795ccb5b3fdfb85baefaa33578a7eb710e2" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#record_field-2&quot;&gt;record_field(Name, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#record_field-2&quot;&gt;record_field(Name, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="38656cab93b86ea74a998970c9b0544d386c6958" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#reduce-2&quot;&gt;reduce(Cs, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#reduce-2&quot;&gt;reduce(Cs, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="696d369384e5d978cb226b92c9abd9144508c96f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#rename-3&quot;&gt;rename(Files, Renamings, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#rename-3&quot;&gt;rename(Files, Renamings, [])&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="597e95a32f82e2835176c69b48afb4438664a140" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#rules_state-2&quot;&gt;rules_state(RulesState, S)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#rules_state-2&quot;&gt;rules_state(RulesState, S)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="eb92da3443dcfab77967e8cf4e2bc5e36700dc84" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#run-4&quot;&gt;ct_master:run(TestSpecs, false, InclNodes, ExclNodes)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;&lt;a href=&quot;#run-4&quot;&gt;ct_master:run(TestSpecs, false, InclNodes, ExclNodes)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3135af91c20771eb093b83d0faf3312b92b6f30c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#run-4&quot;&gt;ct_master:run(TestSpecs, false, [], [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#run-4&quot;&gt;ct_master:run(TestSpecs, false, [], [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="32ffd1be0fd6193cee701eaac01c190adaef08e0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#run_on_node-3&quot;&gt;ct_master:run_on_node(TestSpecs, false, Node)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#run_on_node-3&quot;&gt;ct_master:run_on_node(TestSpecs, false, Node)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="7b32b5b0e405a63e2563aa6475f1fddf39e3b546" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#send-3&quot;&gt;ct_telnet:send(Connection, Cmd, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send-3&quot;&gt;ct_telnet:send(Connection, Cmd, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="63f62404934f90ad154a6a24bcde3026eed8da1f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#send-5&quot;&gt;ct_ssh:send(SSH, ChannelId, 0, Data, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send-5&quot;&gt;ct_ssh:send(SSH, ChannelId, 0, Data, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="ffc923e4fd5096607780b11e6dd43151ead2d96d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#send-5&quot;&gt;ct_ssh:send(SSH, ChannelId, 0, Data, Timeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send-5&quot;&gt;ct_ssh:send(SSH, ChannelId, 0, Data, Timeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="fb108cc17a2794d7db63f1d180faebf6e2d46a5e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#send_and_receive-4&quot;&gt;ct_ssh:send_and_receive(SSH, ChannelId, Data, close)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send_and_receive-4&quot;&gt;ct_ssh:send_and_receive(SSH, ChannelId, Data, close)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="093aebead82785744f51a5f644ae70298b854a6c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#send_and_receive-6&quot;&gt;ct_ssh:send_and_receive(SSH, ChannelId, 0, Data, End, Timeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send_and_receive-6&quot;&gt;ct_ssh:send_and_receive(SSH, ChannelId, 0, Data, End, Timeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="a308097eb51467b4d7a5348b10aabe977ac9ca34" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#send_and_receive-6&quot;&gt;ct_ssh;send_and_receive(SSH, ChannelId, 0, Data, End, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send_and_receive-6&quot;&gt;ct_ssh;send_and_receive(SSH, ChannelId, 0, Data, End, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="5531a67354abe2466d4f6bdcf4cb300aed1b289a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#sendf-4&quot;&gt;ct_telnet:sendf(Connection, CmdFormat, Args, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#sendf-4&quot;&gt;ct_telnet:sendf(Connection, CmdFormat, Args, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="28d60fb429ec157bfba67f0024b3f13e4b30f298" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#session_open-2&quot;&gt;ct_ssh:session_open(SSH, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#session_open-2&quot;&gt;ct_ssh:session_open(SSH, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="748fc47780e0cffa40f2a4d6684163ed9f8a388d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#shell-3&quot;&gt;ct_ssh:shell(SSH, ChannelId, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#shell-3&quot;&gt;ct_ssh:shell(SSH, ChannelId, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="5847b1d6a4c1cbd5f9c7a9d17a643c6495212b2b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#socknames-2&quot;&gt;socknames(Socket, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#socknames-2&quot;&gt;socknames(Socket, 0)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="984186eb7309dbab51162e38d9773627b7539190" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; except it returns &lt;code&gt;ok&lt;/code&gt; for already started applications.</source>
          <target state="translated">同等 &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; 、それが返すことを除いて &lt;code&gt;ok&lt;/code&gt; すでに開始アプリケーションのために。</target>
        </trans-unit>
        <trans-unit id="559f72d708af708ecaccec78db858d90a2a93952" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;ct_snmp:start(Config, MgrAgentConfName, undefined)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;ct_snmp:start(Config, MgrAgentConfName, undefined)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="7465f3b70b812611f2b839f4be2f68f7756bd422" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#stop-3&quot;&gt; stop(Process, normal, infinity)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#stop-3&quot;&gt; stop(Process, normal, infinity)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="87d4bb462cb2b05b3682a59f158cf0c1eac2da50" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#stop-3&quot;&gt;stop(Process, normal, infinity)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#stop-3&quot;&gt;stop(Process, normal, infinity)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="8fc48bb6764fb6905d96cb3af30a21cb3522075e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#string-2&quot;&gt;string(Test, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#string-2&quot;&gt;string(Test, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="3082ff8847953fbb53b67ee205753da5412f05b0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#string-2&quot;&gt;string(Text, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#string-2&quot;&gt;string(Text, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="3983bb17205ecce0781b18cfc33ffa250f3f9b17" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#string-3&quot;&gt;string(Str, Doc, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#string-3&quot;&gt;string(Str, Doc, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="1e0f34e497a773dfe8e54c1c139a731148987e9d" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#string-5&quot;&gt;string(Str, Doc, [], Doc, Options)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#string-5&quot;&gt;string(Str, Doc, [], Doc, Options)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="da1e8a62e145e55d0bd478bbeb5ac881b7ffeacb" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#subsystem-4&quot;&gt;ct_ssh:subsystem(SSH, ChannelId, Subsystem, DefaultTimeout)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#subsystem-4&quot;&gt;ct_ssh:subsystem(SSH, ChannelId, Subsystem, DefaultTimeout)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="78f28f79846ca0d9d0380c448740fa3ab461f085" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#test-2&quot;&gt;test(Tests, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#test-2&quot;&gt;test(Tests, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="46bdb4ffd5f07ccfe657f5f363eace18e995517c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#text_par-2&quot;&gt;text_par(Text, 0)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#text_par-2&quot;&gt;text_par(Text, 0)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="cc2c778c9538e4aaf70ffe1027c64dcd4ad52318" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#to_comment-2&quot;&gt;to_comment(Tree, &quot;% &quot;)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#to_comment-2&quot;&gt;to_comment(Tree, &quot;% &quot;)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="172f30366b5eca51448ccd156117ffe4ef4dd270" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#tree-2&quot;&gt;tree(Type, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#tree-2&quot;&gt;tree(Type, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="b4290fa5b9abeafbfbee520a470759133a359776" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#try_expr-3&quot;&gt;try_expr(Body, [], Handlers)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#try_expr-3&quot;&gt;try_expr(Body, [], Handlers)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="a98cc95b855b196a73d2dbe2e87621b4e9461e44" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#try_expr-4&quot;&gt;try_expr(Body, Clauses, Handlers, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#try_expr-4&quot;&gt;try_expr(Body, Clauses, Handlers, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="393eab34c4091b6c396a9cb3f5afdce92b4d5690" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#try_expr-4&quot;&gt;try_expr(Body, [], [], After)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#try_expr-4&quot;&gt;try_expr(Body, [], [], After)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="3525075cc649f0b865bf28dc206116f3a75e6bb0" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#tuple_type-1&quot;&gt;tuple_type(any_size)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#tuple_type-1&quot;&gt;tuple_type(any_size)&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="a65926c5005cfc07b105de8bdb2f49ec2fd7bd0b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#update_c_bitstr-6&quot;&gt;update_c_bitstr(Node, Value, Size, abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#update_c_bitstr-6&quot;&gt;update_c_bitstr(Node, Value, Size, abstract(1), Type, Flags)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="0b300fe7fb5ee04fa800d8b1594780a62dd5668f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#update_c_var-2&quot;&gt;update_c_var(Old, {Atom, Arity})&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#update_c_var-2&quot;&gt;update_c_var(Old, {Atom, Arity})&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="1e0ae2cb3c1ac8a7815d4c943853ad68b65894a7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#update_list-3&quot;&gt;update_list(Old, List, none)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#update_list-3&quot;&gt;update_list(Old, List, none)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="e65f3d4be993cb540daefebbf089c080fd2bcc0a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#user_state-2&quot;&gt;user_state(UserState, S)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#user_state-2&quot;&gt;user_state(UserState, S)&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="0a648640af68a7a3424b5fa2d1643a50975caaa7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;&lt;a href=&quot;#validate-3&quot;&gt;validate(Element, State, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#validate-3&quot;&gt;validate(Element, State, [])&lt;/a&gt;&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="873f285eec04cc2d338a6f123c329f06b8d6906b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;abcast([node()|nodes()], Name, Msg)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;abcast([node()|nodes()], Name, Msg)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="3e2314ba79d059b9f70d68a46f23db90b5096b14" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;assert(not (BoolExpr))&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;assert(not (BoolExpr))&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="49d07bde253c258b6e5119a225803e592c5bd6ac" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;c(Mod, Fun, Args, all)&lt;/code&gt;.</source>
          <target state="translated">同等の &lt;code&gt;c(Mod, Fun, Args, all)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7b0942fc111607cfd507cff77f9604132227b3e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;clause_arity(hd(case_clauses(Node)))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">&lt;code&gt;clause_arity(hd(case_clauses(Node)))&lt;/code&gt; と同等ですが、より効率的である可能性があります。</target>
        </trans-unit>
        <trans-unit id="0d2693afafa3a4f522422a66ff265fc275322d11" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_accept&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_accept&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe93afc73c3f9764478bef4e6997aedccefb7c5e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_connect&lt;/code&gt; and &lt;code&gt;ei_xconnect&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_connect&lt;/code&gt; および &lt;code&gt;ei_xconnect&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="c1d69ae914c44fa51e4abff901abcf4cf2e12608" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_connect&lt;/code&gt;, &lt;code&gt;ei_xconnect&lt;/code&gt;, &lt;code&gt;ei_connect_host_port&lt;/code&gt; and &lt;code&gt;ei_xconnect_host_port&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_connect&lt;/code&gt; 、 &lt;code&gt;ei_xconnect&lt;/code&gt; 、 &lt;code&gt;ei_connect_host_port&lt;/code&gt; 、および &lt;code&gt;ei_xconnect_host_port&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="a6766d6e6f0ca259b2b4fe7c18d6a021733bb029" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_publish&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_publish&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="357549a951b93d2fe1f08d3b6ce8fccccc5909f8" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_receive&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_receive&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="9ed6d9c26f3211088345464d7195820fb0b683b7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_receive_encoded&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_receive_encoded&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="0dea09ecf0ce4ef083abe1c68f78072b2acdfe8e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_receive_msg&lt;/code&gt; and &lt;code&gt;ei_xreceive_msg&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_receive_msg&lt;/code&gt; および &lt;code&gt;ei_xreceive_msg&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="1daf5aab84994ce8b1b17f8217407ad9a9421362" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_reg_send&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_reg_send&lt;/code&gt; と同等です。このマニュアルページの最初にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="0f5b7ce6688fd79fb13af97726b953d122ae14a5" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_send&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_send&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="aa3a62b004169854deb46f3ea23711d52ec99e19" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_send_encoded&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_send_encoded&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="fdbbdcd826b12d9b063c0edb20f26039bf62f2c5" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_send_reg_encoded&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_send_reg_encoded&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="3771da7911206304296a139bb6ab1cd431ea448f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;ei_unpublish&lt;/code&gt; with an optional time-out argument, see the description at the beginning of this manual page.</source>
          <target state="translated">オプションのタイムアウト引数を指定した &lt;code&gt;ei_unpublish&lt;/code&gt; と同等です。このマニュアルページの冒頭にある説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="8372ca82b2bf9f43c79046f3c267b8c75e3fba27" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;epp:open([{name, FileName}, {includes, IncludePath}, {macros, PredefMacros}])&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;epp:open([{name, FileName}, {includes, IncludePath}, {macros, PredefMacros}])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="198cb07298ed627519d26597d6831ad8e028d1bc" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;epp:open([{name, FileName}, {includes, IncludePath}])&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;epp:open([{name, FileName}, {includes, IncludePath}])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53d242559dae93c7b2e26e415d4624b964dba226" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;epp:parse_file(FileName, [{includes, IncludePath}, {macros, PredefMacros}])&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;epp:parse_file(FileName, [{includes, IncludePath}, {macros, PredefMacros}])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0b0a7825fa600d273f72548e8689855e692d68f" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;eval_everywhere([node()|nodes()], Module, Function, Args)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eval_everywhere([node()|nodes()], Module, Function, Args)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d4f2381fc4af295f43d8475e70b96168d889f6df" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;file2tab(Filename, [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;file2tab(Filename, [])&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="842a9683942021cace77766f96d9ce37582d38fd" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;find_source(Base, Dir)&lt;/code&gt;, where &lt;code&gt;Dir&lt;/code&gt; is &lt;code&gt;filename:dirname(FilePath)&lt;/code&gt; and &lt;code&gt;Base&lt;/code&gt; is &lt;code&gt;filename:basename(FilePath)&lt;/code&gt;.</source>
          <target state="translated">相当 &lt;code&gt;find_source(Base, Dir)&lt;/code&gt; 、 &lt;code&gt;Dir&lt;/code&gt; ある &lt;code&gt;filename:dirname(FilePath)&lt;/code&gt; と &lt;code&gt;Base&lt;/code&gt; ある &lt;code&gt;filename:basename(FilePath)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bb51d51da2854ce584486e5a63cedf1b672710c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;flush_trace_port(node())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;flush_trace_port(node())&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="cfe7f1272df44e504d688e8961f8495f03a9acf6" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;format(File,[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;format(File,[])&lt;/code&gt; 同じです。</target>
        </trans-unit>
        <trans-unit id="3b7507752d4a1ae2cdc8159320ce2dc9fd525a44" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;get_tracer(node())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_tracer(node())&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="8675407d0eefd7e1fa96e369c0e4f4fdca1b2267" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;get_value(Key, List, undefined)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_value(Key, List, undefined)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="cba1efd80b03330c9f85a8c53359c4a37ca62862" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;httpc:request(get, {Url, []}, [], [])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;httpc:request(get, {Url, []}, [], [])&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="676ae76dfcb047db9b4cd53c668edaa9a70d3c1b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;length(flatten(DeepList))&lt;/code&gt;, but more efficient.</source>
          <target state="translated">&lt;code&gt;length(flatten(DeepList))&lt;/code&gt; と同等ですが、より効率的です。</target>
        </trans-unit>
        <trans-unit id="1f8190e1f3904664c2b059b79267ce3617135122" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;limit(Tree, Depth, Text)&lt;/code&gt; using the text &lt;code&gt;&quot;...&quot;&lt;/code&gt; as default replacement.</source>
          <target state="translated">デフォルトの置換としてテキスト &lt;code&gt;&quot;...&quot;&lt;/code&gt; を使用した &lt;code&gt;limit(Tree, Depth, Text)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="be09fc87aab378494fce066f0485d5a0d7499916" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;multi_server_call([node()|nodes()], Name, Msg)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;multi_server_call([node()|nodes()], Name, Msg)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="7ffd80c51ac16407654fdc702f764a022d0760d1" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;multicall(Nodes, Module, Function, Args, infinity)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;multicall(Nodes, Module, Function, Args, infinity)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="2c65892943e712456d18bca5e8a8e46eef1b642c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;multicall([node()|nodes()], Module, Function, Args, Timeout)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;multicall([node()|nodes()], Module, Function, Args, Timeout)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="faabbe69bfb964b589ccd6cd72f8899c84ab075e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;multicall([node()|nodes()], Module, Function, Args, infinity)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;multicall([node()|nodes()], Module, Function, Args, infinity)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="cc35a1c84693226736068e8931d9c9ad030d643e" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;nb_yield(Key, 0)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;nb_yield(Key, 0)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="6261c8ba9c7577bfb3094bced71d443552a3aece" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;new([])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new([])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="311411e636025da0e8fca30ce8313dba2f022a6c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;p(Item, [m])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;p(Item, [m])&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f746dc814af09ad51f8158cdfa5e12800a67f5a9" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;sbcast([node()|nodes()], Name, Msg)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sbcast([node()|nodes()], Name, Msg)&lt;/code&gt; 同等です。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
