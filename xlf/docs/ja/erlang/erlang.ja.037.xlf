<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="0f9944b699387d7c11ea7cd1be3bab23ba4afdef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.appup&lt;/code&gt; file contains one single Erlang term, which defines the instructions used to upgrade or downgrade the application. The file has the following syntax:</source>
          <target state="translated">&lt;code&gt;.appup&lt;/code&gt; のファイルには、アプリケーションをアップグレードまたはダウングレードするために使用される命令を定義する1つのErlangの用語が含まれています。ファイルの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="0a4e2f387f9c84aa65d3380a5a44029b602ea3fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.erlang.cookie&lt;/code&gt; file is to contain a line with the same atom. For example, on Linux or UNIX, in the OS shell:</source>
          <target state="translated">&lt;code&gt;.erlang.cookie&lt;/code&gt; のファイルは、同じ原子の行を含むことになります。たとえば、LinuxまたはUNIXのOSシェルでは、次のようになります。</target>
        </trans-unit>
        <trans-unit id="0032fcf48e0da685e59294f0a4f697a2db8dcacb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.funcs&lt;/code&gt; file would look like:</source>
          <target state="translated">&lt;code&gt;.funcs&lt;/code&gt; のファイルには、次のようになります。</target>
        </trans-unit>
        <trans-unit id="14e7547174b37977afa693aeffb001d289cd5a55" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.hrl&lt;/code&gt; files are generated with &lt;code&gt;snmpc:mib_to_hrl/1&lt;/code&gt;. Include these files in your code as in the following example:</source>
          <target state="translated">&lt;code&gt;.hrl&lt;/code&gt; ファイルが生成されて &lt;code&gt;snmpc:mib_to_hrl/1&lt;/code&gt; 。次の例のように、これらのファイルをコードに含めます。</target>
        </trans-unit>
        <trans-unit id="3f3c52adfe9451ed557d5cb72636a16ce9b8cff5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; のファイル</target>
        </trans-unit>
        <trans-unit id="f61412bcc5809a8e7db35485d4bc2ee4c582bd3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file contains information about the release: its name, version, and which ERTS and application versions it uses.</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; の名前、バージョン、およびERTSおよびそれが使用するアプリケーションのバージョン：ファイルがリリースに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="fba0dc5cd4e50a75950facea5ebefcde4b2c40d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file contains one single Erlang term, which is called a &lt;strong&gt;release specification&lt;/strong&gt;. The file has the following syntax:</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; のファイルが呼ばれる1つのErlangの用語、含まれている&lt;strong&gt;リリースの仕様を&lt;/strong&gt;。ファイルの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="9be75095f9fcc28e6742d9c5c6b665ebdc21fd1d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.rel&lt;/code&gt; file must also contain &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;stdlib&lt;/code&gt;, and &lt;code&gt;sasl&lt;/code&gt;, as these applications are required by &lt;code&gt;ch_app&lt;/code&gt;. The file is called &lt;code&gt;ch_rel-1.rel&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;.rel&lt;/code&gt; のファイルも含まれている必要があり &lt;code&gt;kernel&lt;/code&gt; 、 &lt;code&gt;stdlib&lt;/code&gt; 、および &lt;code&gt;sasl&lt;/code&gt; これらのアプリケーションがで必要とされる、 &lt;code&gt;ch_app&lt;/code&gt; 。ファイルの名前は &lt;code&gt;ch_rel-1.rel&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="13be72d295c9d3a74b0ba266a8b6d753044e4f9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;.script&lt;/code&gt; file is generated by &lt;code&gt;systools&lt;/code&gt; from a &lt;code&gt;.rel&lt;/code&gt; file and from &lt;code&gt;.app&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;.script&lt;/code&gt; ファイルがで生成される &lt;code&gt;systools&lt;/code&gt; から &lt;code&gt;.rel&lt;/code&gt; のファイルおよびから &lt;code&gt;.app&lt;/code&gt; ファイル。</target>
        </trans-unit>
        <trans-unit id="8952d3b159688281512664b4559315ca46a6b2ac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#ErlNifPid&quot;&gt;ErlNifPid&lt;/a&gt;&lt;/code&gt; in which the resolved process id is stored.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlNifPid&quot;&gt;ErlNifPid&lt;/a&gt;&lt;/code&gt; 分解プロセスIDが格納されています。</target>
        </trans-unit>
        <trans-unit id="7f0ba8ce42f3241f6f1e8ce8e3ec88bd285be952" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#ErlNifPort&quot;&gt;ErlNifPort&lt;/a&gt;&lt;/code&gt; in which the resolved port id is stored.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlNifPort&quot;&gt;ErlNifPort&lt;/a&gt;&lt;/code&gt; 解決ポートIDが格納されています。</target>
        </trans-unit>
        <trans-unit id="9be61e44d94622615ce4101938ee713afd7cdab2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;default time warp mode&lt;/a&gt;&lt;/code&gt; has the same behavior as before, and the old API still works. Thus, you are not required to change anything unless you want to. However, &lt;strong&gt;you are strongly encouraged to use the new API&lt;/strong&gt; instead of the old API based on &lt;code&gt;&lt;a href=&quot;erlang#now-0&quot;&gt;erlang:now/0&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;erlang:now/0&lt;/code&gt; is deprecated, as it is and will be a scalability bottleneck.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;default time warp mode&lt;/a&gt;&lt;/code&gt; 前と同じ動作を持っており、古いAPIはまだ動作します。したがって、必要な場合以外は何も変更する必要はありません。ただし、 &lt;code&gt;&lt;a href=&quot;erlang#now-0&quot;&gt;erlang:now/0&lt;/a&gt;&lt;/code&gt; に基づく古いAPIではなく&lt;strong&gt;、新しいAPIを使用することを強くお勧めします&lt;/strong&gt;。 &lt;code&gt;erlang:now/0&lt;/code&gt; は、スケーラビリティのボトルネックになるため、廃止される予定です。</target>
        </trans-unit>
        <trans-unit id="18bf0f08971899dc4f16a1b00f5aad47c098d502" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Action&lt;/a&gt;&lt;/code&gt;&lt;code&gt;postpone&lt;/code&gt; is designed to model selective receives. A selective receive implicitly postpones any not received events, but the &lt;code&gt;postpone&lt;/code&gt; state transition action explicitly postpones one received event.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#State%20Transition%20Actions&quot;&gt;State Transition Action&lt;/a&gt;&lt;/code&gt; &lt;code&gt;postpone&lt;/code&gt; の選択を受けるモデル化するように設計されています。選択的受信は、未受信のイベントを暗黙的に延期しますが、 &lt;code&gt;postpone&lt;/code&gt; 状態遷移アクションは、受信した1つのイベントを明示的に延期します。</target>
        </trans-unit>
        <trans-unit id="2e521122544eb6fa9ab0cd68ed9751d9d365e33f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; of Erlang monotonic time heavily depends on the following:</source>
          <target state="translated">Erlang単調時間の &lt;code&gt;&lt;a href=&quot;#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; は、次の要素に大きく依存します。</target>
        </trans-unit>
        <trans-unit id="da959f4f913bd754095c0cffc4af1e4cec02fe00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#Transition%20Actions&quot;&gt; &lt;strong&gt;transition action&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt;&lt;code&gt;postpone&lt;/code&gt; is designed to model selective receives. A selective receive implicitly postpones any not received events, but the &lt;code&gt;postpone&lt;/code&gt;&lt;strong&gt;transition action&lt;/strong&gt; explicitly postpones one received event.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Transition%20Actions&quot;&gt; &lt;strong&gt;transition action&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; &lt;code&gt;postpone&lt;/code&gt; 選択的に受けるモデル化するように設計されています。選択的には、暗黙のうち任意のない受信したイベントを延期受けるが、 &lt;code&gt;postpone&lt;/code&gt; &lt;strong&gt;遷移アクションは、&lt;/strong&gt;明示的に1つの受信したイベントを延期します。 &lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ee853e7e00e08008dc7e059fac73729f774dbe00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#enif_consume_timeslice&quot;&gt; enif_consume_timeslice()&lt;/a&gt;&lt;/code&gt; function can be used to inform the runtime system about the length of the NIF call. It is typically always to be used unless the NIF executes very fast.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_consume_timeslice&quot;&gt; enif_consume_timeslice()&lt;/a&gt;&lt;/code&gt; 関数は、NIFのコールの長さについてのランタイムシステムに通知するために使用することができます。NIFが非常に高速に実行されない限り、通常は常に使用されます。</target>
        </trans-unit>
        <trans-unit id="6f631a391a9754e49e6ee1bde4ff6f90ac52a87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#enif_consume_timeslice&quot;&gt;enif_consume_timeslice()&lt;/a&gt;&lt;/code&gt; function can be used to inform the runtime system about the length of the NIF call. It is typically always to be used unless the NIF executes very fast.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_consume_timeslice&quot;&gt;enif_consume_timeslice()&lt;/a&gt;&lt;/code&gt; 関数は、NIFのコールの長さについてのランタイムシステムに通知するために使用することができます。NIFが非常に高速に実行されない限り、通常は常に使用されます。</target>
        </trans-unit>
        <trans-unit id="42203200dce5d30a841bfbad273ab03cca628668" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#packet&quot;&gt;packet()&lt;/a&gt;&lt;/code&gt; records below are defined in diameter.hrl, which can be included as follows.</source>
          <target state="translated">以下の &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#packet&quot;&gt;packet()&lt;/a&gt;&lt;/code&gt; レコードは、diameter.hrlで定義されており、次のように含めることができます。</target>
        </trans-unit>
        <trans-unit id="5443a5673cfdeb62b70cfaa66a1a4d05ea2c10ee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#interpret&quot;&gt;Interpret Modules window&lt;/a&gt;&lt;/code&gt; is displayed.</source>
          <target state="translated">「 &lt;code&gt;&lt;a href=&quot;#interpret&quot;&gt;Interpret Modules window&lt;/a&gt;&lt;/code&gt; の解釈」ウィンドウが表示されます。</target>
        </trans-unit>
        <trans-unit id="64917e182873d825bb4118b082544cb5020d55ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#is_tree-1&quot;&gt;is_tree/1&lt;/a&gt;&lt;/code&gt; test is not completely foolproof. For a few special node types (e.g. &lt;code&gt;arity_qualifier&lt;/code&gt;), if such a node occurs in a context where it is not expected, it will be left unchanged as a non-reverted subtree of the result. This can only happen if &lt;code&gt;Tree&lt;/code&gt; does not actually represent legal Erlang code.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#is_tree-1&quot;&gt;is_tree/1&lt;/a&gt;&lt;/code&gt; 試験は完全にフールプルーフではありません。いくつかの特別なノードタイプ（例： &lt;code&gt;arity_qualifier&lt;/code&gt; ）では、そのようなノードが予期しないコンテキストで発生した場合、結果の元に戻されないサブツリーとして変更されません。これは、 &lt;code&gt;Tree&lt;/code&gt; が実際に正当なErlangコードを表していない場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="8bdddf2d9e89b5afec27570549313f0a00dfb66c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor window&lt;/a&gt;&lt;/code&gt; is displayed with information about all debugged processes, interpreted modules, and selected options. Initially there are normally no debugged processes. First, it must be specified which modules that are to be &lt;strong&gt;debugged&lt;/strong&gt; (also called &lt;strong&gt;interpreted&lt;/strong&gt;). Proceed as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor window&lt;/a&gt;&lt;/code&gt; 、すべてのデバッグプロセスに関する情報、解釈モジュール、および選択したオプションが表示されます。最初は通常、デバッグされるプロセスはありません。まず、&lt;strong&gt;デバッグ&lt;/strong&gt;するモジュール（&lt;strong&gt;インタプリタ&lt;/strong&gt;とも呼ば&lt;strong&gt;れる&lt;/strong&gt;）を指定する必要があります。次のように実行します。</target>
        </trans-unit>
        <trans-unit id="d1371003c4109f45bb7c590d9e6bfcf741d3783e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;native&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; at the time when current Erlang runtime system instance started.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;native&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time unit&lt;/a&gt;&lt;/code&gt; 現在Erlangのランタイムシステムインスタンスが起動時に。</target>
        </trans-unit>
        <trans-unit id="c54a199fd4640b0c1f2d1a7d7f234a5d11ebf160" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#regexp_syntax&quot;&gt;regular expression&lt;/a&gt;&lt;/code&gt; syntax and semantics resemble that of Perl.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#regexp_syntax&quot;&gt;regular expression&lt;/a&gt;&lt;/code&gt; 構文と意味論は、Perlのそれに似ています。</target>
        </trans-unit>
        <trans-unit id="86910d8a99b113804f6c41ebe30ba830eeca44e9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; can insert events using the &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;&lt;strong&gt;transition actions&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;&lt;code&gt;next_event&lt;/code&gt; and such an event is inserted in the event queue as the next to call the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; with. That is, as if it is the oldest incoming event. A dedicated &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;internal&lt;/code&gt; can be used for such events making them impossible to mistake for external events.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 使用してイベントを挿入することができ &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;&lt;strong&gt;transition actions&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; &lt;code&gt;next_event&lt;/code&gt; そのようなイベントが呼び出すために次のようにイベント・キューに挿入された &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 有します。つまり、それが最も古い着信イベントであるかのようになります。このようなイベントには専用の &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;internal&lt;/code&gt; を使用できるため、外部イベントと間違えることはありません。</target>
        </trans-unit>
        <trans-unit id="ddaf5a8cfd6684f5a32a7cfde1c55113cf46f155" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; may return &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;&lt;strong&gt;transition actions&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; for &lt;code&gt;gen_statem&lt;/code&gt; to execute during the &lt;strong&gt;state transition&lt;/strong&gt;, for example to reply to a &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;gen_statem:call/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 返すことができる &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;&lt;strong&gt;transition actions&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; ため &lt;code&gt;gen_statem&lt;/code&gt; 中に実行するため&lt;strong&gt;の状態遷移&lt;/strong&gt;に応答するために、例えば、 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;gen_statem:call/2,3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7246167f3c09c6525874f60b11ba89db7e2744c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; can insert events using the &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;next_event&lt;/code&gt; and such an event is inserted as the next to present to the state callback. That is, as if it is the oldest incoming event. A dedicated &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;internal&lt;/code&gt; can be used for such events making them impossible to mistake for external events.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 使用してイベントを挿入することができる &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;next_event&lt;/code&gt; 、そのようなイベントは、状態コールバックに存在する次のように挿入されています。つまり、最も古い着信イベントであるかのように。そのようなイベントには専用の &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;internal&lt;/code&gt; を使用して、外部イベントと間違えることを防ぐことができます。</target>
        </trans-unit>
        <trans-unit id="8dc397f4aad495e70f783e4e9f18314a11b4699a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; are executed when entering the first &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; just as for a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, except that the action &lt;code&gt;postpone&lt;/code&gt; is forced to &lt;code&gt;false&lt;/code&gt; since there is no event to postpone.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; 最初に入るときに実行されている &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; ちょうどのためのよう &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; アクションがあることを除いて、 &lt;code&gt;postpone&lt;/code&gt; を余儀なくされた &lt;code&gt;false&lt;/code&gt; 延期するイベントがないからです。</target>
        </trans-unit>
        <trans-unit id="d79b4de0faec73ea8a56c3d33b4728d0d0f13117" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; are executed when entering the first &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; just as for a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;, except that the action &lt;code&gt;postpone&lt;/code&gt; is forced to &lt;code&gt;false&lt;/code&gt; since there is no event to postpone.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; 最初に入るときに実行されている &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; ちょうどのためのよう &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; アクションがあることを除いて、 &lt;code&gt;postpone&lt;/code&gt; を余儀なくされた &lt;code&gt;false&lt;/code&gt; 延期するイベントがないからです。</target>
        </trans-unit>
        <trans-unit id="4b95289b0c26b39ec2e6bba34c2ea61ee391b999" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-exec_daemon_option&quot;&gt;exec-option&lt;/a&gt;&lt;/code&gt; has existed for a long time but has not previously been documented. The old definition and behaviour are retained but obey the rules 1-6 above if conflicting. The old and undocumented style should not be used in new programs.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-exec_daemon_option&quot;&gt;exec-option&lt;/a&gt;&lt;/code&gt; 長い時間のために存在しているが、以前に記載されていません。古い定義と動作は保持されますが、矛盾する場合は上記のルール1〜6に従います。古くて文書化されていないスタイルは、新しいプログラムでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="99afc1abdda369a0914949188ce7fb06901f6f8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-exec_daemon_option&quot;&gt;exec_spec&lt;/a&gt;&lt;/code&gt;&lt;code&gt;fun()&lt;/code&gt; is called with the same number of parameters as the arity of the fun, and the result is returned to the client. Shell-requests are not affected, they follow the &lt;code&gt;&lt;a href=&quot;#type-shell_daemon_option&quot;&gt;shell_spec&lt;/a&gt;&lt;/code&gt;'s value.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-exec_daemon_option&quot;&gt;exec_spec&lt;/a&gt;&lt;/code&gt; &lt;code&gt;fun()&lt;/code&gt; の楽しみのアリティなどのパラメータの数が同じで呼び出され、その結果がクライアントに返されます。シェルリクエストは影響を受けません &lt;code&gt;&lt;a href=&quot;#type-shell_daemon_option&quot;&gt;shell_spec&lt;/a&gt;&lt;/code&gt; の値に従います。</target>
        </trans-unit>
        <trans-unit id="04249803fd25f8d18a129af7ec7559589758bac1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-host_accepting_client_options&quot;&gt;host_accepting_client_options()&lt;/a&gt;&lt;/code&gt; are associated with this list of keys.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-host_accepting_client_options&quot;&gt;host_accepting_client_options()&lt;/a&gt;&lt;/code&gt; キーのリストに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="c47299082b86fea81f7b73b85c3b481aabd9d033" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-server_id&quot;&gt;server_id()&lt;/a&gt;&lt;/code&gt; or an associated &lt;code&gt;&lt;a href=&quot;ct#type-target_name&quot;&gt;ct:target_name()&lt;/a&gt;&lt;/code&gt; can then be passed to the aforementioned functions to use the referenced configuration.</source>
          <target state="translated">次に、 &lt;code&gt;&lt;a href=&quot;#type-server_id&quot;&gt;server_id()&lt;/a&gt;&lt;/code&gt; または関連する &lt;code&gt;&lt;a href=&quot;ct#type-target_name&quot;&gt;ct:target_name()&lt;/a&gt;&lt;/code&gt; を前述の関数に渡して、参照されている構成を使用できます。</target>
        </trans-unit>
        <trans-unit id="0e395a27eee95c6082f8cf61222aaf962540cea2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type-server_id&quot;&gt;server_id()&lt;/a&gt;&lt;/code&gt; or an associated &lt;code&gt;&lt;a href=&quot;ct#type-target_name&quot;&gt;ct:target_name()&lt;/a&gt;&lt;/code&gt; must then be used in calls to &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">その後、 &lt;code&gt;&lt;a href=&quot;#type-server_id&quot;&gt;server_id()&lt;/a&gt;&lt;/code&gt; または関連する &lt;code&gt;&lt;a href=&quot;ct#type-target_name&quot;&gt;ct:target_name()&lt;/a&gt;&lt;/code&gt; を、 &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; の呼び出しで使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="e3dc033ce6bd037856bac83ebd4f39855340ec51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time_unit()&lt;/a&gt;&lt;/code&gt; type also consist of the following &lt;strong&gt;deprecated&lt;/strong&gt; symbolic time units:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type_time_unit&quot;&gt;time_unit()&lt;/a&gt;&lt;/code&gt; 型は、以下から成る&lt;strong&gt;非推奨&lt;/strong&gt;シンボリック時間単位：</target>
        </trans-unit>
        <trans-unit id="88d76a69dffe86852b03f6f2771d64a235602ffa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; is expected to know if reloading is demanded before creating a monitor for loading.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; リロードをロードするためのモニターを作成する前に要求されているかどうかを知ることが予想されます。</target>
        </trans-unit>
        <trans-unit id="6529c6f67bbc8e3a2934d327ad30e40ae74a06cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;crypto#next_iv-2&quot;&gt;next_iv/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;crypto#next_iv-3&quot;&gt;next_iv/3&lt;/a&gt;&lt;/code&gt; is not needed since the &lt;code&gt;crypto_init&lt;/code&gt; and &lt;code&gt;crypto_update&lt;/code&gt; includes this functionality.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;crypto#next_iv-2&quot;&gt;next_iv/2&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;crypto#next_iv-3&quot;&gt;next_iv/3&lt;/a&gt;&lt;/code&gt; ので必要とされない &lt;code&gt;crypto_init&lt;/code&gt; と &lt;code&gt;crypto_update&lt;/code&gt; がこの機能を備えています。</target>
        </trans-unit>
        <trans-unit id="4ef4e16c6d6043c0d934f6a3edee0c7cc5aa2fe6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; module provides the main interface for writing test cases. This includes for example, the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; モジュールは、テストケースを記述するための主要なインターフェイスを提供します。これには、たとえば、次のものが含まれます。</target>
        </trans-unit>
        <trans-unit id="24d2428c5253a289420ac3c56a797aad5738f051" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct#log-1&quot;&gt;log/1,2,3,4,5&lt;/a&gt;&lt;/code&gt; function prints a string to the test case log file. The &lt;code&gt;&lt;a href=&quot;ct#print-1&quot;&gt;print/1,2,3,4&lt;/a&gt;&lt;/code&gt; function prints the string to screen. The &lt;code&gt;&lt;a href=&quot;ct#pal-1&quot;&gt;pal/1,2,3,4&lt;/a&gt;&lt;/code&gt; function prints the same string both to file and screen. The functions are described in module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct#log-1&quot;&gt;log/1,2,3,4,5&lt;/a&gt;&lt;/code&gt; 機能は、テストケースのログファイルに文字列を出力します。 &lt;code&gt;&lt;a href=&quot;ct#print-1&quot;&gt;print/1,2,3,4&lt;/a&gt;&lt;/code&gt; 機能は、画面に文字列を出力します。 &lt;code&gt;&lt;a href=&quot;ct#pal-1&quot;&gt;pal/1,2,3,4&lt;/a&gt;&lt;/code&gt; 機能は、両方のファイルと画面に同じ文字列を出力します。関数はモジュール &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; で説明されています。</target>
        </trans-unit>
        <trans-unit id="f487c24dcce56661b796ae49d9fa184c1120f87f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct_property_test&quot;&gt;ct_property_test&lt;/a&gt;&lt;/code&gt; module does the following:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct_property_test&quot;&gt;ct_property_test&lt;/a&gt;&lt;/code&gt; モジュールは、次のことを行います。</target>
        </trans-unit>
        <trans-unit id="7520b5a1282410b50e8ce82d773253694bcb5f8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct_property_test#present_result-4&quot;&gt;ct_property_test:present_result/4&lt;/a&gt;&lt;/code&gt; is a help function for printing some statistics in the CommonTest log file.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct_property_test#present_result-4&quot;&gt;ct_property_test:present_result/4&lt;/a&gt;&lt;/code&gt; CommonTestログファイルにいくつかの統計情報を印刷するためのヘルプ機能です。</target>
        </trans-unit>
        <trans-unit id="2225a95d59e4a2a00a916261ffc2ac6e972545a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; program can be used for running tests from the OS command line, for example, as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; の以下のようなプログラムは、例えば、OSのコマンドラインからテストを実行するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="45351661ad4006c4669c2ebdd26490749b02b241" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;erl_format#erl_match&quot;&gt;erl_format:erl_match&lt;/a&gt;&lt;/code&gt; function performs pattern matching. It takes a pattern and a term and tries to match them. As a side effect any unbound variables in the pattern will be bound. In the following example, a pattern is created with a variable &lt;code&gt;Age&lt;/code&gt;, which is included at two positions in the tuple. The pattern match is performed as follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erl_format#erl_match&quot;&gt;erl_format:erl_match&lt;/a&gt;&lt;/code&gt; 機能を行うパターンマッチング。それはパターンと用語を取り、それらを一致させようとします。副作用として、パターン内のバインドされていない変数がバインドされます。次の例では、タプルの2つの位置に含まれる変数 &lt;code&gt;Age&lt;/code&gt; を使用してパターンが作成されます。パターン照合は次のように実行されます。</target>
        </trans-unit>
        <trans-unit id="f58e8b7ebcca47b5fa5b9e432d29b5c35a2acf4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt; callback, which is used a lot in this implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt; この実装で多く使用されるコールバック、。</target>
        </trans-unit>
        <trans-unit id="5d913aee0ec20f5c99548c0d67120c8b7390405c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; callback, which is used a lot in this implementation.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; この実装で多く使用されるコールバック、。</target>
        </trans-unit>
        <trans-unit id="5df35aa6c58680e6606845e3cb0a4b184a4d606d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;SSH Connection Protocol&lt;/a&gt;&lt;/code&gt; is used by clients and servers, that is, SSH channels, to communicate over the SSH connection. The API functions in this module send SSH Connection Protocol events, which are received as messages by the remote channel handling the remote channel. The Erlang format of thoose messages is (see also &lt;code&gt;&lt;a href=&quot;#type-event&quot;&gt;below&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;SSH Connection Protocol&lt;/a&gt;&lt;/code&gt; SSH接続を介して通信するために、クライアントとサーバであり、SSHチャネルで使用されています。このモジュールのAPI関数は、SSH接続プロトコルイベントを送信します。このイベントは、リモートチャネルを処理するリモートチャネルによってメッセージとして受信されます。これらのメッセージのErlang形式は次のとおりです（ &lt;code&gt;&lt;a href=&quot;#type-event&quot;&gt;below&lt;/a&gt;&lt;/code&gt; も参照）。</target>
        </trans-unit>
        <trans-unit id="e04d20c0a21a342accdbeea00bdc89554c9bbc2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;SSH Connection Protocol&lt;/a&gt;&lt;/code&gt; is used by clients and servers, that is, SSH channels, to communicate over the SSH connection. The API functions in this module send SSH Connection Protocol events, which are received as messages by the remote channel. If the receiving channel is an Erlang process, the messages have the format &lt;code&gt;{ssh_cm, connection_ref(), ssh_event_msg()}&lt;/code&gt;. If the &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; behavior is used to implement the channel process, these messages are handled by &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt;SSH Connection Protocol&lt;/a&gt;&lt;/code&gt; SSH接続を介して通信するために、クライアントとサーバであり、SSHチャネルで使用されています。このモジュールのAPI関数は、リモートチャネルがメッセージとして受信するSSH接続プロトコルイベントを送信します。受信チャネルがErlangプロセスの場合、メッセージの形式は &lt;code&gt;{ssh_cm, connection_ref(), ssh_event_msg()}&lt;/code&gt; です。 &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; 動作を使用してチャネルプロセスを実装する場合、これらのメッセージは &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="bb9446bc2906454d7543c5cf2f665a89704ad38a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_process.h#L1021&quot;&gt;high-watermark&lt;/a&gt;&lt;/code&gt; is placed where the previous garbage collection (described in &lt;code&gt;&lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt;&lt;/code&gt;) ended and we have introduced a new area called the old heap. When doing the normal garbage collection pass, any term that is located below the high-watermark is copied to the old &lt;strong&gt;to space&lt;/strong&gt; instead of the young.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_process.h#L1021&quot;&gt;high-watermark&lt;/a&gt;&lt;/code&gt; （で説明した前回のガベージコレクション場所に配置された &lt;code&gt;&lt;a href=&quot;#Overview&quot;&gt;Overview&lt;/a&gt;&lt;/code&gt; ）終わったと私たちは古いヒープと呼ばれる新しいエリアを導入しました。通常のガベージコレクションパスを実行すると、最高水準点より下にある用語は、若いものではなく古いもの&lt;strong&gt;からスペース&lt;/strong&gt;にコピーされます。</target>
        </trans-unit>
        <trans-unit id="bcd1b00c890947931beb8fe9dcb1f1a330520a4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/global.h#L1452-L1465&quot;&gt;`erts_is_literal`&lt;/a&gt;&lt;/code&gt; check works differently on different architectures and operating systems.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-19.0/erts/emulator/beam/global.h#L1452-L1465&quot;&gt;`erts_is_literal`&lt;/a&gt;&lt;/code&gt; チェックは異なるアーキテクチャとオペレーティングシステム上で動作が異なります。</target>
        </trans-unit>
        <trans-unit id="29f892246d7df69546254cbfcc798654f3646997" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC 6125&lt;/a&gt;&lt;/code&gt; defines</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc6125&quot;&gt;RFC 6125&lt;/a&gt;&lt;/code&gt; 定義</target>
        </trans-unit>
        <trans-unit id="7dcb6a1e5d8b3f03deff03d3241d42eac28f4c9f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; module makes it possible to map different parts of the host file system into the document tree, that is, creates aliases and redirections.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_alias&quot;&gt;mod_alias&lt;/a&gt;&lt;/code&gt; のモジュールは、あるドキュメントツリーの中にホストファイルシステムのさまざまな部分をマッピングすることが可能となるエイリアスとリダイレクトを作成します。</target>
        </trans-unit>
        <trans-unit id="fcc4b78316a4143698c35ef4043e086c3252f889" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt; module provides for basic user authentication using textual files, Dets databases as well as Mnesia databases.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt; モジュールは、テキストファイル、DETSデータベースだけでなく、Mnesiaデータベースを使用して基本的なユーザー認証を提供します。</target>
        </trans-unit>
        <trans-unit id="461a1eaddbc542451f83c2ca184fe0b61bd2923e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt; module implements the Erlang Server Interface (ESI) providing a tight and efficient interface to the execution of Erlang functions.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_esi&quot;&gt;mod_esi(3)&lt;/a&gt;&lt;/code&gt; モジュールの実装アーラン・サーバ・インタフェース（ESI）はErlangの機能の実行にタイトかつ効率的なインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="451822a0390939c5b7aa871766fbf59707a840eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;mod_security&quot;&gt;mod_security&lt;/a&gt;&lt;/code&gt; module serves as a filter for authenticated requests handled in &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt;. It provides a possibility to restrict users from access for a specified amount of time if they fail to authenticate several times. It logs failed authentication as well as blocking of users, and it calls a configurable callback module when the events occur.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mod_security&quot;&gt;mod_security&lt;/a&gt;&lt;/code&gt; のモジュールはで処理認証要求のためのフィルタとして機能する &lt;code&gt;&lt;a href=&quot;mod_auth&quot;&gt;mod_auth(3)&lt;/a&gt;&lt;/code&gt; 。これは、ユーザーが数回認証に失敗した場合に、指定された時間の間ユーザーのアクセスを制限する可能性を提供します。失敗した認証とユーザーのブロックをログに記録し、イベントが発生すると構成可能なコールバックモジュールを呼び出します。</target>
        </trans-unit>
        <trans-unit id="cca463bd9735d9ae37813de52272ea12a3c25d3e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run program&lt;/a&gt;&lt;/code&gt; for an overview of available start flags (as most flags have a corresponding configuration term)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run program&lt;/a&gt;&lt;/code&gt; 可能なスタート・フラグの概要については、（ほとんどのフラグは、対応するコンフィギュレーションの項を持っているとして）</target>
        </trans-unit>
        <trans-unit id="41608b3a764923c262561e0c2d97e667f71e82d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_runprogram&lt;/a&gt;&lt;/code&gt; for an overview of available start flags (as most flags have a corresponding configuration term)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_runprogram&lt;/a&gt;&lt;/code&gt; 利用可能なスタートフラグの概要について（最もフラグは、対応する構成用語を持っているように）</target>
        </trans-unit>
        <trans-unit id="3f97cdf73ff78f958f92c1082d9981899a202f74" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;ssh_file#type-system_dir_daemon_option&quot;&gt;system_dir&lt;/a&gt;&lt;/code&gt; option must be a directory containing a host key file and it defaults to &lt;code&gt;/etc/ssh&lt;/code&gt;. For details, see Section Configuration Files in &lt;code&gt;ssh(6)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh_file#type-system_dir_daemon_option&quot;&gt;system_dir&lt;/a&gt;&lt;/code&gt; のオプションは、ホスト鍵ファイルを含むディレクトリで、そのデフォルトにしなければならない &lt;code&gt;/etc/ssh&lt;/code&gt; 。詳細については、 &lt;code&gt;ssh(6)&lt;/code&gt; のセクション構成ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="8c2bdaafc19f8eda6fa7e095397c6b638b7731c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; module can be used for debugging a supervisor bridge.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; モジュールには、スーパバイザ・ブリッジをデバッグするために使用することができます。</target>
        </trans-unit>
        <trans-unit id="1915b4761876d96adb7cfdaf20279417ba58c6b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;tftp#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; function starts a daemon process listening for UDP packets on a port. When it receives a request for read or write, it spawns a temporary server process handling the transfer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;tftp#start-1&quot;&gt;start/1&lt;/a&gt;&lt;/code&gt; の機能は、ポート上のUDPパケットのデーモンプロセスのリスニングを開始します。読み取りまたは書き込みの要求を受信すると、転送を処理する一時的なサーバープロセスを生成します。</target>
        </trans-unit>
        <trans-unit id="34bf65dbe208c89793330cc690692124bc99f1eb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt; multi-time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt; multi-time warp mode&lt;/a&gt;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="8e817126baaf83dd2177ff4d3961b1bf92117ec3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="7d9a2bc15a65c27354714aedd36bc465c988bc11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt; no time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt; no time warp mode&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="bac6d07dd79fabf515998a51c2c8ccd52cb9e6e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="e6a0707134722e646e7cc1eaf4404ec443d34378" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt; single time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt; single time warp mode&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="11b934f9948e4845a2b33851b5932f94d59f1d45" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt;single time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt;single time warp mode&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="40c216921e0f08c2b36308cbbb132054a41492aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;users_guide&quot;&gt;CRYPTO User's Guide&lt;/a&gt;&lt;/code&gt; has more information on FIPS, Engines and Algorithm Details like key lengths.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;users_guide&quot;&gt;CRYPTO User's Guide&lt;/a&gt;&lt;/code&gt; キーの長さなどのFIPS、エンジン及びアルゴリズムの詳細についてより多くの情報を持っています。</target>
        </trans-unit>
        <trans-unit id="842d1fd61ccfd8c7f0a3b2ea51238f75d1a39f94" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;&lt;a href=&quot;users_guide&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; has examples and a &lt;code&gt;&lt;a href=&quot;using_ssh&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt; section.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;users_guide&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 例と持って &lt;code&gt;&lt;a href=&quot;using_ssh&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt; セクションを。</target>
        </trans-unit>
        <trans-unit id="7213ba1d558f14b69b4e8a3edef214d04ef9e98a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?Q&lt;/code&gt; macros turn the quoted code fragments into ASTs, and lifts metavariables such as &lt;code&gt;_@Tuple&lt;/code&gt; and &lt;code&gt;_@Number&lt;/code&gt; to the level of your Erlang code, so you can use the corresponding Erlang variables &lt;code&gt;Tuple&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt; directly. This is the most straightforward way to use Merl, and in many cases it's all you need.</source>
          <target state="translated">&lt;code&gt;?Q&lt;/code&gt; のマクロはASTのに引用されたコードフラグメントを回し、そしてなどのメタ変数リフト &lt;code&gt;_@Tuple&lt;/code&gt; と &lt;code&gt;_@Number&lt;/code&gt; 使用すると、対応するErlangの変数を使用することができますので、あなたのErlangコードのレベルに &lt;code&gt;Tuple&lt;/code&gt; と &lt;code&gt;Number&lt;/code&gt; 直接。これはMerlを使用する最も簡単な方法であり、多くの場合それで十分です。</target>
        </trans-unit>
        <trans-unit id="15c579f9adfb6704c3bcff309334cae348b5e5b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;?assert(Expression)&lt;/code&gt; macro will evaluate &lt;code&gt;Expression&lt;/code&gt;, and if that does not evaluate to &lt;code&gt;true&lt;/code&gt;, it will throw an exception; otherwise it just returns &lt;code&gt;ok&lt;/code&gt;. In the above example, the test will thus fail if the call to &lt;code&gt;length&lt;/code&gt; does not return 3.</source>
          <target state="translated">&lt;code&gt;?assert(Expression)&lt;/code&gt; マクロは評価する &lt;code&gt;Expression&lt;/code&gt; し、それが評価されない場合は &lt;code&gt;true&lt;/code&gt; 、それは例外がスローされます。それ以外の場合は、単に &lt;code&gt;ok&lt;/code&gt; を返します。したがって、上記の例では、 &lt;code&gt;length&lt;/code&gt; の呼び出しが3を返さない場合、テストは失敗します。</target>
        </trans-unit>
        <trans-unit id="824fe9ddd06f6c4a1a05c0b0fcb9265f7a7b2017" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ASN.1&lt;/code&gt; application provides the following two separate user interfaces:</source>
          <target state="translated">&lt;code&gt;ASN.1&lt;/code&gt; のアプリケーションは、次の2つの別個のユーザインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="ad1896e2fd3770f39ede02112fb63bbac81b7df1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Address&lt;/code&gt; field is the second element.</source>
          <target state="translated">&lt;code&gt;Address&lt;/code&gt; フィールドは、第二の要素です。</target>
        </trans-unit>
        <trans-unit id="90bfd70e3f20f8f506d98edda14b178d797720e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;AlgorithmId&lt;/code&gt; is the signature OID from a certificate or a certificate revocation list.</source>
          <target state="translated">&lt;code&gt;AlgorithmId&lt;/code&gt; は、証明書または証明書失効リストから署名OIDです。</target>
        </trans-unit>
        <trans-unit id="e284c989131372b49e03051b62849870dd521425" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BIT STRING&lt;/code&gt; type is decoded to &quot;compact notation&quot;. &lt;strong&gt;This option is not recommended for new code.&lt;/strong&gt; This option cannot be combined with the option &lt;code&gt;maps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BIT STRING&lt;/code&gt; タイプが「コンパクト表記」に復号されます。&lt;strong&gt;このオプションは、新しいコードには推奨されません。&lt;/strong&gt;このオプションをオプション &lt;code&gt;maps&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="d727373c971108a708085cfa309ebdb4fa5bc28b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BIT STRING&lt;/code&gt; type is decoded to the legacy format, that is, a list of zeroes and ones. &lt;strong&gt;This option is not recommended for new code.&lt;/strong&gt; This option cannot be combined with the option &lt;code&gt;maps&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;BIT STRING&lt;/code&gt; 型は、0と1のリストであるレガシー形式にデコードされます。&lt;strong&gt;このオプションは、新しいコードには推奨されません。&lt;/strong&gt;このオプションをオプション &lt;code&gt;maps&lt;/code&gt; と組み合わせることはできません。</target>
        </trans-unit>
        <trans-unit id="3c84e077a6dbf3c771cfd255a8a9895e6702d3a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Bitstring&lt;/code&gt; variable can consist of any number of bits, for example, 0, 1, 8, 11, 17, 42, and so on. This is because the default &lt;code&gt;unit&lt;/code&gt; for bitstrings is 1.</source>
          <target state="translated">&lt;code&gt;Bitstring&lt;/code&gt; 変数は、0、1、8、11、17、42など、任意の数のビットで構成できます。これは、ビット文字列のデフォルトの &lt;code&gt;unit&lt;/code&gt; が1であるためです。</target>
        </trans-unit>
        <trans-unit id="94a1488efe62c17d8ba98c01afd1b232f7321a33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Block&lt;/code&gt; argument indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Block&lt;/code&gt; ログには、変換時にブロックされる必要がある場合、引数を示します。これは、大きなログを変換する場合に役立ちます（そうでない場合、変換中にログがラップする可能性があります）。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4ab5f211e8f18fd1c4ca859d11a5d3fcd218d631" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Block&lt;/code&gt; option indicates if the log should be blocked during conversion. This could be usefull when converting large logs (when otherwise the log could wrap during conversion). Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">[ &lt;code&gt;Block&lt;/code&gt; ]オプションは、変換中にログをブロックする必要があるかどうかを示します。これは、大きなログを変換する場合に役立ちます（そうでない場合、変換中にログがラップする可能性があります）。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c2a775047eba8dcca0470291f62d589146470f7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;BufSz&lt;/code&gt; argument basically defines the size of the receive buffer. By setting the value to zero (0), the configured size (setopt with &lt;code&gt;Level&lt;/code&gt; = &lt;code&gt;otp&lt;/code&gt; and &lt;code&gt;Key&lt;/code&gt; = &lt;code&gt;rcvbuf&lt;/code&gt;) is used.</source>
          <target state="translated">&lt;code&gt;BufSz&lt;/code&gt; の引数は、基本的に受信バッファのサイズを規定します。値をゼロ（0）に設定すると、構成されたサイズ（ &lt;code&gt;Level&lt;/code&gt; = &lt;code&gt;otp&lt;/code&gt; および &lt;code&gt;Key&lt;/code&gt; = &lt;code&gt;rcvbuf&lt;/code&gt; でsetopt）が使用されます。</target>
        </trans-unit>
        <trans-unit id="2acfbefe2ee37310ba387213e5e15aa6901a988c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Callback&lt;/code&gt; module should contain hook functions for all tags present in the data structure. A hook function must have the following format:</source>
          <target state="translated">&lt;code&gt;Callback&lt;/code&gt; モジュールは、データ構造内に存在するすべてのタグのためにフック関数を含める必要があります。フック関数の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="883390db9451e13b3d5a5f85d744ec9ca06a2b24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CallbackMode&lt;/code&gt; is either just &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; or a list containing &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; and possibly the atom &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CallbackMode&lt;/code&gt; はどちらかだけである &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; 又は含むリスト &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback_mode()&lt;/a&gt;&lt;/code&gt; およびおそらく原子 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7a580d51d45e0183e4b31ffec1224002d11cfbe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CharSpec&lt;/code&gt;&lt;code&gt;eof&lt;/code&gt; signals end of file. &lt;code&gt;LeftOverChars&lt;/code&gt; then takes the value &lt;code&gt;eof&lt;/code&gt; as well.</source>
          <target state="translated">&lt;code&gt;CharSpec&lt;/code&gt; &lt;code&gt;eof&lt;/code&gt; 信号は、ファイルの末尾。次に、 &lt;code&gt;LeftOverChars&lt;/code&gt; は &lt;code&gt;eof&lt;/code&gt; の値も受け取ります。</target>
        </trans-unit>
        <trans-unit id="64d980b4c7c9584d2e8b4e055ab6694f99c89599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChildSpecs&lt;/code&gt; variable in the return value from &lt;code&gt;init/1&lt;/code&gt; is a list of &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specifications&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init/1&lt;/code&gt; からの戻り値の &lt;code&gt;ChildSpecs&lt;/code&gt; 変数は、 &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;child specifications&lt;/a&gt;&lt;/code&gt; リストです。</target>
        </trans-unit>
        <trans-unit id="e5232c85e790e4f73652dc642ce50e6888594555" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ChunkSize&lt;/code&gt; defines the size of the &lt;code&gt;PlainBin&lt;/code&gt;s that &lt;code&gt;EncodeFun&lt;/code&gt; is applied to. If the &lt;code&gt;ChunkSize&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt;, the size of the &lt;code&gt;PlainBin&lt;/code&gt;s varies, because this is intended for stream crypto, whereas a fixed &lt;code&gt;ChunkSize&lt;/code&gt; is intended for block crypto. &lt;code&gt;ChunkSize&lt;/code&gt;s can be changed in the return from the &lt;code&gt;EncryptFun&lt;/code&gt; or &lt;code&gt;DecryptFun&lt;/code&gt;. The value can be changed between &lt;code&gt;pos_integer()&lt;/code&gt; and &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ChunkSize&lt;/code&gt; サイズ定義 &lt;code&gt;PlainBin&lt;/code&gt; のその &lt;code&gt;EncodeFun&lt;/code&gt; に適用されます。場合 &lt;code&gt;ChunkSize&lt;/code&gt; され &lt;code&gt;undefined&lt;/code&gt; のサイズ &lt;code&gt;PlainBin&lt;/code&gt; これは固定され、一方、ストリーム暗号のために意図されているので、S変化し、 &lt;code&gt;ChunkSize&lt;/code&gt; ブロック暗号のために意図されています。 &lt;code&gt;ChunkSize&lt;/code&gt; は、 &lt;code&gt;EncryptFun&lt;/code&gt; または &lt;code&gt;DecryptFun&lt;/code&gt; からの戻りで変更できます。値は &lt;code&gt;pos_integer()&lt;/code&gt; と &lt;code&gt;undefined&lt;/code&gt; の間で変更できます。</target>
        </trans-unit>
        <trans-unit id="e8a7a9966f0b85d64cc4feece108959a21b830fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collector&lt;/code&gt; API does also allow you to save the collected &lt;code&gt;Events&lt;/code&gt; to file and later load them in a later session.</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; APIはまた、あなたが収集し保存することができない &lt;code&gt;Events&lt;/code&gt; ファイルへの以降後のセッションでそれらをロードします。</target>
        </trans-unit>
        <trans-unit id="fceb8c2c1f65a97284385a3f23405d68267725fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collector&lt;/code&gt; automatically registers itself to listen for trace &lt;code&gt;Events&lt;/code&gt;, so all you have to do is enable them.</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; 自動的にトレースをリッスンするために自分自身を登録 &lt;code&gt;Events&lt;/code&gt; あなたがしなければならないすべてはそれらを有効であるので、。</target>
        </trans-unit>
        <trans-unit id="ec20677889045987c82a0d9f6c4d053fcf85822c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Collector&lt;/code&gt; manages a key/value based dictionary, where the filters are stored. Updates of the dictionary is propagated to all subscribing processes. When a &lt;code&gt;Viewer&lt;/code&gt; is started it is registered as a subscriber of dictionary updates.</source>
          <target state="translated">&lt;code&gt;Collector&lt;/code&gt; フィルタが保存されているキー/値ベースの辞書を管理します。辞書の更新は、すべてのサブスクライブプロセスに伝達されます。ときに &lt;code&gt;Viewer&lt;/code&gt; 起動され、それは、辞書更新の加入者として登録されています。</target>
        </trans-unit>
        <trans-unit id="e368c10bff22300d3fab811f6f50a4674a69667b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Framework Log page includes links to the Pre- and Post Test I/O Log. In this log, &lt;code&gt;Common Test&lt;/code&gt; saves printouts made with &lt;code&gt;ct:log/1,2,3,4,5&lt;/code&gt; and &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt;, as well as captured system error- and progress reports, which take place before, and after, the test run. Examples of this are printouts from a CT hook init- or terminate function, or progress reports generated when an OTP application is started from a CT hook init function. Another example is an error report generated because of a failure when an external application is stopped from a CT hook terminate function. All information in these examples ends up in the Pre- and Post Test I/O Log. For more information on how to synchronize test runs with external user applications, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#synchronizing&quot;&gt;Synchronizing&lt;/a&gt;&lt;/code&gt; in section Common Test Hooks.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークログページには、前後のテストI / Oログへのリンクが含まれています。このログでは、 &lt;code&gt;Common Test&lt;/code&gt; は &lt;code&gt;ct:log/1,2,3,4,5&lt;/code&gt; および &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt; で作成された印刷出力を保存します、およびキャプチャされたシステムエラーと進行状況レポート。テスト実行の前後に実行されます。この例としては、CTフックの初期化または終了機能からの印刷出力、またはOTPアプリケーションがCTフックの初期化機能から開始されたときに生成される進行状況レポートがあります。別の例は、外部アプリケーションがCTフック終了関数から停止したときに障害が原因で生成されたエラーレポートです。これらの例のすべての情報は、テスト前とテスト後のI / Oログに記録されます。テスト実行を外部ユーザーアプリケーションと同期する方法の詳細については、「共通テストフック」セクションの「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#synchronizing&quot;&gt;Synchronizing&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="2b15f94344ef9977a91750baa9dddf1dbad0746d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Master API is exported by module &lt;code&gt;&lt;a href=&quot;ct_master&quot;&gt;ct_master&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; マスターAPIはモジュールによってエクスポートされ &lt;code&gt;&lt;a href=&quot;ct_master&quot;&gt;ct_master&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1eb6fe3660c4d65491500f6426215f629639619" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Master server runs on one dedicated Erlang node and uses distributed Erlang to communicate with any number of &lt;code&gt;Common Test&lt;/code&gt; test nodes, each hosting a regular &lt;code&gt;Common Test&lt;/code&gt; server. Test specifications are used as input to specify what to test on which test nodes, using what configuration.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; マスターサーバーつの専用アーラン・ノード上で実行され、用途は任意の数と通信するアーラン分散 &lt;code&gt;Common Test&lt;/code&gt; テストノード、各ホスティング正規 &lt;code&gt;Common Test&lt;/code&gt; サーバー。テスト仕様は、どの構成を使用して、どのテストノードで何をテストするかを指定するための入力として使用されます。</target>
        </trans-unit>
        <trans-unit id="d910e14beb83938480f0c5db0900211c5bc5ac30" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; Master server writes progress information to HTML log files similarly to the regular &lt;code&gt;Common Test&lt;/code&gt; server. The logs contain test statistics and links to the log files written by each independent &lt;code&gt;Common Test&lt;/code&gt; server.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; マスターサーバーは、同様に、通常のHTMLにログファイルへの進捗情報を書き込み &lt;code&gt;Common Test&lt;/code&gt; サーバー。ログには、テスト統計と、独立した各 &lt;code&gt;Common Test&lt;/code&gt; サーバーによって書き込まれたログファイルへのリンクが含まれています。</target>
        </trans-unit>
        <trans-unit id="4e124139583e4b5d8918f07bb2c0c03bd8d6c703" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; application also includes other modules named &lt;code&gt;ct_&amp;lt;component&amp;gt;&lt;/code&gt;, which provide various support, mainly simplified use of communication protocols such as RPC, SNMP, FTP, Telnet, and others.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; アプリケーションは、名前の他のモジュール含ま &lt;code&gt;ct_&amp;lt;component&amp;gt;&lt;/code&gt; 様々なサポートを提供し、主にRPC、SNMP、FTP、Telnet、およびその他のような通信プロトコルの使用を簡素化します。</target>
        </trans-unit>
        <trans-unit id="03a84fce685f88578ce41de6a729049cb8fac0fa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; application is installed with the Erlang/OTP system. No extra installation step is required to start using &lt;code&gt;Common Test&lt;/code&gt; through the &lt;code&gt;ct_run&lt;/code&gt; executable program, and/or the interface functions in the &lt;code&gt;ct&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; アプリケーションはアーラン/ OTPシステムがインストールされています。 &lt;code&gt;ct_run&lt;/code&gt; 実行可能プログラムおよび/または &lt;code&gt;ct&lt;/code&gt; モジュールのインターフェイス関数を介して &lt;code&gt;Common Test&lt;/code&gt; の使用を開始するために、追加のインストール手順は必要ありません。</target>
        </trans-unit>
        <trans-unit id="78a22725d0c7f0f676d4ba2a90661e795ebb56c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; framework is a tool that supports implementation and automated execution of test cases to any types of target systems. &lt;code&gt;Common Test&lt;/code&gt; is the main tool being used in all testing- and verification activities that are part of Erlang/OTP system development and maintenance.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークは、ターゲットシステムのいずれかのタイプに実装し、テストケースの自動化された実行をサポートするツールです。 &lt;code&gt;Common Test&lt;/code&gt; は、Erlang / OTPシステムの開発と保守の一部であるすべてのテストおよび検証アクティビティで使用される主要なツールです。</target>
        </trans-unit>
        <trans-unit id="18e9917f7eb0c975fe2d0bf461322b555cc56962" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; framework is an environment for implementing and performing automatic and semi-automatic execution of test cases.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークは、テストケースの自動および半自動実行を実装し、実行するための環境です。</target>
        </trans-unit>
        <trans-unit id="c32a30ee7b6005326d0a472ffa1a54f5ce95df96" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; framework provides a high-level operator interface for testing, providing the following features:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークは、次の機能を提供し、テストのための高レベルのオペレータインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="ad9b65cad13beffef2e82d575de6699dcf88a08a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Common Test&lt;/code&gt; test server requires that the test suite defines and exports the following mandatory or optional callback functions:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; テストサーバが必要とするテストスイートが定義およびエクスポート次の必須またはオプションのコールバック関数：</target>
        </trans-unit>
        <trans-unit id="b3f5974325a1f6adb2e7a53fd6b80b396429c849" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Company&lt;/code&gt; database is now initialized and contains data.</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; データベースが初期化され、データが含まれています。</target>
        </trans-unit>
        <trans-unit id="84399fbfc3c32ddc0958865c1bc7e66e07f291b5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Company&lt;/code&gt; database, introduced in &lt;code&gt;&lt;a href=&quot;mnesia_chap2#getting_started&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt;, has three tables that store records (&lt;code&gt;employee&lt;/code&gt;, &lt;code&gt;dept&lt;/code&gt;, &lt;code&gt;project&lt;/code&gt;), and three tables that store relationships (&lt;code&gt;manager&lt;/code&gt;, &lt;code&gt;at_dep&lt;/code&gt;, &lt;code&gt;in_proj&lt;/code&gt;). This is a normalized data model, which has some advantages over a non-normalized data model.</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; で導入されたデータベース、 &lt;code&gt;&lt;a href=&quot;mnesia_chap2#getting_started&quot;&gt;Getting Started&lt;/a&gt;&lt;/code&gt; 、3つのテーブルを持っている店レコード（ &lt;code&gt;employee&lt;/code&gt; 、 &lt;code&gt;dept&lt;/code&gt; 、 &lt;code&gt;project&lt;/code&gt; ）、および3つのテーブルその店舗の関係（ &lt;code&gt;manager&lt;/code&gt; 、 &lt;code&gt;at_dep&lt;/code&gt; 、 &lt;code&gt;in_proj&lt;/code&gt; ）。これは正規化されたデータモデルであり、非正規化されたデータモデルに比べていくつかの利点があります。</target>
        </trans-unit>
        <trans-unit id="5b4167561d4c9786e75acf722fa5255d76e1f375" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ControlMessage&lt;/code&gt; is a tuple, where the first element indicates which distributed operation it encodes:</source>
          <target state="translated">&lt;code&gt;ControlMessage&lt;/code&gt; は、最初の要素は、それがコード分散れる動作を示しタプルです。</target>
        </trans-unit>
        <trans-unit id="a9bce474e15518f3622f365b9755866898515b9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;CtrlSz&lt;/code&gt; argument basically defines the size of the receive buffer for the control messages. By setting the value to zero (0), the configured size (setopt with &lt;code&gt;Level&lt;/code&gt; = &lt;code&gt;otp&lt;/code&gt;) is used.</source>
          <target state="translated">&lt;code&gt;CtrlSz&lt;/code&gt; の引数は、基本的には、制御メッセージのための受信バッファのサイズを規定します。値をゼロ（0）に設定すると、構成されたサイズ（ &lt;code&gt;Level&lt;/code&gt; = &lt;code&gt;otp&lt;/code&gt; でsetopt）が使用されます。</target>
        </trans-unit>
        <trans-unit id="b53e02a747463b517e8ec15e14ceddfb049c6d05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DAT&lt;/code&gt; files must always be opened with option &lt;code&gt;{repair, false}&lt;/code&gt;. This ensures that these files are not automatically repaired. Without this option, the database can become inconsistent, because &lt;code&gt;Mnesia&lt;/code&gt; can believe that the files were properly closed. For information about configuration parameter &lt;code&gt;auto_repair&lt;/code&gt;, see the Reference Manual.</source>
          <target state="translated">&lt;code&gt;DAT&lt;/code&gt; のファイルは常にオプションでオープンする必要があります &lt;code&gt;{repair, false}&lt;/code&gt; 。これにより、これらのファイルが自動的に修復されなくなります。このオプションがないと、 &lt;code&gt;Mnesia&lt;/code&gt; はファイルが適切に閉じられたと信じることができるため、データベースが不整合になる可能性があります。設定パラメータ &lt;code&gt;auto_repair&lt;/code&gt; の詳細については、リファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="5873af1928aed9c59ec2db4bf69bcbdd1c33d63f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Data&lt;/code&gt; received can be a &lt;code&gt;binary()&lt;/code&gt; or a &lt;code&gt;list()&lt;/code&gt; of bytes (integers in the range 0 through 255) depending on the socket mode, or an SCTP event.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; 受信であることができる &lt;code&gt;binary()&lt;/code&gt; または &lt;code&gt;list()&lt;/code&gt; ソケット・モード、またはSCTPイベントに応じて（範囲0〜255の整数）バイトを。</target>
        </trans-unit>
        <trans-unit id="69f5b6911daa714868434e1a90189319187674c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DbgExtra&lt;/code&gt; options are described in section &lt;code&gt;&lt;a href=&quot;#debug_flags&quot;&gt;DbgExtra Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;DbgExtra&lt;/code&gt; のオプションは、セクションに記載されている &lt;code&gt;&lt;a href=&quot;#debug_flags&quot;&gt;DbgExtra Options&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16f5677b6ef24617d1e07a7aa94edc055731eaee" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;DiscoHandler&lt;/code&gt; module is used during the discovery process. See &lt;code&gt;&lt;a href=&quot;snmpa_discovery_handler&quot;&gt;discovery handler&lt;/a&gt;&lt;/code&gt; for more info.</source>
          <target state="translated">&lt;code&gt;DiscoHandler&lt;/code&gt; モジュールが発見プロセス中に使用されます。詳細については、 &lt;code&gt;&lt;a href=&quot;snmpa_discovery_handler&quot;&gt;discovery handler&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="510046e751218ed5f95a1059673c4d8fbf2a7fa0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Dst&lt;/code&gt; map is updated with new channel values. The syntax for updating an existing key with a new value is with the &lt;code&gt;:=&lt;/code&gt; operator.</source>
          <target state="translated">&lt;code&gt;Dst&lt;/code&gt; 接続マップは、新しいチャネルの値で更新されます。既存のキーを新しい値で更新する構文は、 &lt;code&gt;:=&lt;/code&gt; 演算子を使用します。</target>
        </trans-unit>
        <trans-unit id="30f4f4e3c2c9185266f65e6f7d9040faa980d49a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; term type is used for passing a term encoded with the &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt;, that is, a term that has been encoded by &lt;code&gt;&lt;a href=&quot;erlang#term_to_binary-2&quot;&gt; erlang:term_to_binary&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;erl_interface:ei(3)&lt;/code&gt;, and so on. For example, if &lt;code&gt;binp&lt;/code&gt; is a pointer to an &lt;code&gt;ErlDrvBinary&lt;/code&gt; that contains term &lt;code&gt;{17, 4711}&lt;/code&gt; encoded with the &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt;, and you want to wrap it in a two-tuple with the tag &lt;code&gt;my_tag&lt;/code&gt;, that is, &lt;code&gt;{my_tag, {17, 4711}}&lt;/code&gt;, you can do as follows:</source>
          <target state="translated">&lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; の用語のタイプを用いて符号化された用語通過させるために使用される &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt; で符号化された用語であり、 &lt;code&gt;&lt;a href=&quot;erlang#term_to_binary-2&quot;&gt; erlang:term_to_binary&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;erl_interface:ei(3)&lt;/code&gt; など。たとえば、 &lt;code&gt;binp&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt; でエンコードされた用語 &lt;code&gt;{17, 4711}&lt;/code&gt; &lt;code&gt;ErlDrvBinary&lt;/code&gt; を含むErlDrvBinaryへのポインタであり、タグ &lt;code&gt;my_tag&lt;/code&gt; を使用して2つのタプルでラップする場合、つまり &lt;code&gt;{my_tag, {17, 4711}}&lt;/code&gt; 、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="d0e5af70acd62ed71f0140803a094eed25236db0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; term type is used for passing a term encoded with the &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt;, that is, a term that has been encoded by &lt;code&gt;&lt;a href=&quot;erlang#term_to_binary-2&quot;&gt;erlang:term_to_binary&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;erl_interface:ei(3)&lt;/code&gt;, and so on. For example, if &lt;code&gt;binp&lt;/code&gt; is a pointer to an &lt;code&gt;ErlDrvBinary&lt;/code&gt; that contains term &lt;code&gt;{17, 4711}&lt;/code&gt; encoded with the &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt;, and you want to wrap it in a two-tuple with the tag &lt;code&gt;my_tag&lt;/code&gt;, that is, &lt;code&gt;{my_tag, {17, 4711}}&lt;/code&gt;, you can do as follows:</source>
          <target state="translated">&lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; の用語のタイプを用いて符号化された用語通過させるために使用される &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt; で符号化された用語であり、 &lt;code&gt;&lt;a href=&quot;erlang#term_to_binary-2&quot;&gt;erlang:term_to_binary&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;erl_interface:ei(3)&lt;/code&gt; など。たとえば、 &lt;code&gt;binp&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;erl_ext_dist&quot;&gt;external format&lt;/a&gt;&lt;/code&gt; でエンコードされた用語 &lt;code&gt;{17, 4711}&lt;/code&gt; &lt;code&gt;ErlDrvBinary&lt;/code&gt; を含むErlDrvBinaryへのポインターであり、タグ &lt;code&gt;my_tag&lt;/code&gt; を使用して2つのタプルにラップする場合、つまり &lt;code&gt;{my_tag, {17, 4711}}&lt;/code&gt; 、次のように実行できます。</target>
        </trans-unit>
        <trans-unit id="8c0ac01302ce56a5538e783afbe86c0e3ca92aac" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; term is a way to construct strings. It works differently from how &lt;code&gt;ERL_DRV_STRING&lt;/code&gt; works. &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; builds a string list in reverse order (as opposed to how &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; works), concatenating the strings added to a list. The tail must be specified before &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; の用語は、文字列を構築する方法です。 &lt;code&gt;ERL_DRV_STRING&lt;/code&gt; の動作とは異なる動作をします。 &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; は、（ &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; の動作とは対照的に）文字列リストを逆の順序で作成し、リストに追加された文字列を連結します。テールは &lt;code&gt;ERL_DRV_STRING_CONS&lt;/code&gt; の前に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="7fe5603a0b688982ee095c5b6eb8b3abf301f57c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_DRV_UINT&lt;/code&gt;, &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt;, and &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; term types were introduced in ERTS 5.6.</source>
          <target state="translated">&lt;code&gt;ERL_DRV_UINT&lt;/code&gt; 、 &lt;code&gt;ERL_DRV_BUF2BINARY&lt;/code&gt; 、および &lt;code&gt;ERL_DRV_EXT2TERM&lt;/code&gt; の用語の種類がERTS 5.6で導入されました。</target>
        </trans-unit>
        <trans-unit id="78c7a39595ca5fe9252d32999a603c6e910dd570" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ERL_FLAGS&lt;/code&gt; environment variable can be used to store the complicated parameters in:</source>
          <target state="translated">&lt;code&gt;ERL_FLAGS&lt;/code&gt; の環境変数が複雑にパラメータを格納するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0a3584a359b0427b176ceaff9674304e574ffce0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Emakefile&lt;/code&gt; (if it exists) in the current directory is searched for compiler options for each module. If a given module does not exist in &lt;code&gt;Emakefile&lt;/code&gt; or if &lt;code&gt;Emakefile&lt;/code&gt; does not exist, the module is still compiled.</source>
          <target state="translated">&lt;code&gt;Emakefile&lt;/code&gt; （存在する場合）は、現在のディレクトリには、各モジュールのコンパイラオプションを検索します。 &lt;code&gt;Emakefile&lt;/code&gt; に特定のモジュールが存在しない場合、または &lt;code&gt;Emakefile&lt;/code&gt; が存在しない場合でも、モジュールはコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="da28c7ffe618c58fd36df47a840c22abe8ebdbed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Encoding&lt;/code&gt; says how the characters in the request are represented. We want to store the characters as lists in the ETS table, so we convert them to lists using function &lt;code&gt;unicode:characters_to_list/2&lt;/code&gt;. The conversion function conveniently accepts the encoding types &lt;code&gt;unicode&lt;/code&gt; and &lt;code&gt;latin1&lt;/code&gt;, so we can use &lt;code&gt;Encoding&lt;/code&gt; directly.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 、要求内の文字を表現する方法を述べています。文字をリストとしてETSテーブルに格納したいので、関数 &lt;code&gt;unicode:characters_to_list/2&lt;/code&gt; を使用してそれらをリストに変換します。変換関数は、エンコードタイプ &lt;code&gt;unicode&lt;/code&gt; および &lt;code&gt;latin1&lt;/code&gt; を簡単に受け入れるため、直接 &lt;code&gt;Encoding&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="e3c694d3baa325d31ca5ef434295459f7fd84d35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvBinary&lt;/code&gt; structure is a binary, as sent between the emulator and the driver. All binaries are reference counted; when &lt;code&gt;driver_binary_free&lt;/code&gt; is called, the reference count is decremented, when it reaches zero, the binary is deallocated. &lt;code&gt;orig_size&lt;/code&gt; is the binary size and &lt;code&gt;orig_bytes&lt;/code&gt; is the buffer. &lt;code&gt;ErlDrvBinary&lt;/code&gt; has not a fixed size, its size is &lt;code&gt;orig_size + 2 * sizeof(int)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ErlDrvBinary&lt;/code&gt; エミュレータとドライバ間で送信されるような構造は、バイナリです。すべてのバイナリは参照カウントされます。場合 &lt;code&gt;driver_binary_free&lt;/code&gt; が呼び出され、参照カウントは、それがゼロに達したときに、バイナリが解放され、デクリメントされます。 &lt;code&gt;orig_size&lt;/code&gt; はバイナリサイズで、 &lt;code&gt;orig_bytes&lt;/code&gt; はバッファです。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; には固定サイズがなく、サイズは &lt;code&gt;orig_size + 2 * sizeof(int)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c86b87f3b0b95eba095182c55f0fcc45cc6647fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvNowData&lt;/code&gt; structure holds a time stamp consisting of three values measured from some arbitrary point in the past. The three structure members are:</source>
          <target state="translated">&lt;code&gt;ErlDrvNowData&lt;/code&gt; の構造は、過去のいくつかの任意の点から測定された3つの値からなるタイムスタンプを保持します。3つの構造体メンバーは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="4c525691955a7766948a2ab00688137550480556" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; structure is used for storage of information about the Erlang runtime system. &lt;code&gt;&lt;a href=&quot;#driver_system_info&quot;&gt; driver_system_info&lt;/a&gt;&lt;/code&gt; writes the system information when passed a reference to a &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; structure. The fields in the structure are as follows:</source>
          <target state="translated">&lt;code&gt;ErlDrvSysInfo&lt;/code&gt; の構造は、Erlangのランタイムシステムについての情報を格納するために使用されています。 &lt;code&gt;&lt;a href=&quot;#driver_system_info&quot;&gt; driver_system_info&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; 構造体への参照が渡されると、システム情報を書き込みます。構造体のフィールドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="89f846aa2a9d3bbb835eaa5c58e3ac257c0f2247" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; structure is used for storage of information about the Erlang runtime system. &lt;code&gt;&lt;a href=&quot;#driver_system_info&quot;&gt;driver_system_info&lt;/a&gt;&lt;/code&gt; writes the system information when passed a reference to a &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; structure. The fields in the structure are as follows:</source>
          <target state="translated">&lt;code&gt;ErlDrvSysInfo&lt;/code&gt; の構造は、Erlangのランタイムシステムについての情報を格納するために使用されています。 &lt;code&gt;&lt;a href=&quot;#driver_system_info&quot;&gt;driver_system_info&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;ErlDrvSysInfo&lt;/code&gt; 構造体への参照が渡されると、システム情報を書き込みます。構造内のフィールドは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a097b8521d625c64b18dfa0ef6d0bb28ad84fb42" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Erl_Interface&lt;/code&gt; library contains functions that help you integrate programs written in C and Erlang. The functions in &lt;code&gt;Erl_Interface&lt;/code&gt; support the following:</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; のライブラリには、CとErlangで書かれたプログラムを統合ヘルプ機能が含まれています。 &lt;code&gt;Erl_Interface&lt;/code&gt; の関数は以下をサポートします。</target>
        </trans-unit>
        <trans-unit id="6e029ea371407136acd36ef3f94ae9b566be79a0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Erl_Interface&lt;/code&gt; library supports this activity. It has several C functions that create and manipulate Erlang data structures. The following example shows how to create and encode an Erlang tuple &lt;code&gt;{tobbe,3928}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; のライブラリは、この活動をサポートしています。Erlangデータ構造を作成および操作するいくつかのC関数があります。次の例は、Erlangタプル &lt;code&gt;{tobbe,3928}&lt;/code&gt; を作成してエンコードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="c0bb8f936d4589865a80fe604ad9b594bedb70df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Erl_Interface&lt;/code&gt; library supports this activity. It has several C functions that create and manipulate Erlang data structures. The library also contains an encode and a decode function. The following example shows how to create and encode an Erlang tuple &lt;code&gt;{tobbe,3928}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; のライブラリは、この活動をサポートしています。Erlangのデータ構造を作成および操作するC関数がいくつかあります。ライブラリには、エンコードおよびデコード機能も含まれています。次の例は、Erlangタプル &lt;code&gt;{tobbe,3928}&lt;/code&gt; を作成してエンコードする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="57a4e297c09c6f1e5049ba6a6a04c4f9715c1746" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorDesc&lt;/code&gt; returned is an opaque value to be passed further on to function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;. For more control over the operation, use the &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;ErrorDesc&lt;/code&gt; は、機能上にさらに渡される不透明な値で返さ &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; 。操作をさらに制御するには、 &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; インターフェースを使用します。</target>
        </trans-unit>
        <trans-unit id="0a7a560a95e6aefba3bb607f84b70fa45da9fcef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorInfo&lt;/code&gt; mentioned earlier is the standard &lt;code&gt;ErrorInfo&lt;/code&gt; structure, which is returned from all I/O modules. It has the following format:</source>
          <target state="translated">前述の &lt;code&gt;ErrorInfo&lt;/code&gt; は、すべてのI / Oモジュールから返される標準の &lt;code&gt;ErrorInfo&lt;/code&gt; 構造です。次の形式があります。</target>
        </trans-unit>
        <trans-unit id="46cd6a74f6ad42247387aa8b77c1e43606850bb5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ErrorInfo&lt;/code&gt; mentioned in this module is the standard &lt;code&gt;ErrorInfo&lt;/code&gt; structure that is returned from all I/O modules. It has the following format:</source>
          <target state="translated">&lt;code&gt;ErrorInfo&lt;/code&gt; は、このモジュールに記載された標準である &lt;code&gt;ErrorInfo&lt;/code&gt; すべてのI / Oモジュールから返された構造。次の形式があります。</target>
        </trans-unit>
        <trans-unit id="93b9c6c6a8848b5cb82997ba3624a2f0fabf1b76" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event Records&lt;/code&gt; in the Ets table are ordered by their timestamp. Which timestamp that should be used is controlled via the &lt;code&gt;event_order&lt;/code&gt; parameter. Default is &lt;code&gt;trace_ts&lt;/code&gt; which means the time when the trace data was generated. &lt;code&gt;event_ts&lt;/code&gt; means the time when the trace data was parsed (transformed into an &lt;code&gt;Event Record&lt;/code&gt;).</source>
          <target state="translated">Etsテーブルの &lt;code&gt;Event Records&lt;/code&gt; は、タイムスタンプ順になっています。使用するタイムスタンプは、 &lt;code&gt;event_order&lt;/code&gt; パラメータで制御されます。デフォルトは &lt;code&gt;trace_ts&lt;/code&gt; で、トレースデータが生成された時刻を意味します。 &lt;code&gt;event_ts&lt;/code&gt; は、トレースデータが解析された（ &lt;code&gt;Event Record&lt;/code&gt; 変換された）時間を意味します。</target>
        </trans-unit>
        <trans-unit id="78b79ae16c44e1321dea0365d3ec779b8f949891" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event Tracer (ET)&lt;/code&gt; uses named filters in various contexts. An Event Trace filter is an &lt;code&gt;Erlang fun&lt;/code&gt; that takes some trace data as input and returns a possibly modified version of it:</source>
          <target state="translated">&lt;code&gt;Event Tracer (ET)&lt;/code&gt; さまざまなコンテキストで名前のフィルタを使用しています。イベントトレースフィルターは、いくつかのトレースデータを入力として受け取り、変更された可能性があるバージョンを返す &lt;code&gt;Erlang fun&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="272a43aecd37d28c1a13622b7271bed26dc65387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Event Tracer (ET)&lt;/code&gt; uses the built-in trace mechanism in Erlang and provides tools for collection and graphical viewing of trace data.</source>
          <target state="translated">&lt;code&gt;Event Tracer (ET)&lt;/code&gt; Erlangでトレースメカニズムを内蔵し、収集し、トレースデータをグラフィカルに表示するためのツールを提供を使用しています。</target>
        </trans-unit>
        <trans-unit id="7b3f5424185756e71f4988bcc6cd871d1c3dd01e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Expire&lt;/code&gt; time indicates for how long the request is valid (after which the manager is free to delete it).</source>
          <target state="translated">&lt;code&gt;Expire&lt;/code&gt; 時間（マネージャはそれを削除して自由になるまでの）要求が有効であるどのくらいのために示します。</target>
        </trans-unit>
        <trans-unit id="39bea9e5ae5bbc7a2dffd8b8ca100b554fe6e7ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Extra&lt;/code&gt; parameter is specified when adding the filter via &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt; logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 介してフィルタを追加するとき、パラメータが指定され &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt; logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8e6c34cadce8690c6e2555787337ac8b727e225e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Extra&lt;/code&gt; parameter is specified when adding the filter via &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Extra&lt;/code&gt; 介してフィルタを追加するとき、パラメータが指定され &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="727df65f2f4d2a5696a95b4aebc0f85f3f6e4431" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Extra&lt;/code&gt; parameter to the &lt;code&gt;domain/2&lt;/code&gt; function is specified when adding the filter via &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt; logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;domain/2&lt;/code&gt; 関数の &lt;code&gt;Extra&lt;/code&gt; パラメーターは、 &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt; logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; を介してフィルターを追加するときに指定されます。</target>
        </trans-unit>
        <trans-unit id="229acf43839cafb043149ab1533fb570fa7aafb6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Extra&lt;/code&gt; parameter to the &lt;code&gt;domain/2&lt;/code&gt; function is specified when adding the filter via &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; を介してフィルターを追加するときに、 &lt;code&gt;domain/2&lt;/code&gt; 関数の &lt;code&gt;Extra&lt;/code&gt; パラメーターを指定します。</target>
        </trans-unit>
        <trans-unit id="52e94c11f02389a5bccbbedf86c2e899b3c665d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraArgument&lt;/code&gt; parameter is the empty list. For example, when the agent receives a get-request for the &lt;code&gt;ipAdr&lt;/code&gt; variable, a call will be made to &lt;code&gt;ip_access(get)&lt;/code&gt;. The value returned by this function is the answer to the get-request.</source>
          <target state="translated">&lt;code&gt;ExtraArgument&lt;/code&gt; のパラメータは空のリストです。たとえば、エージェントが &lt;code&gt;ipAdr&lt;/code&gt; 変数のget-requestを受け取ると、 &lt;code&gt;ip_access(get)&lt;/code&gt; が呼び出されます。この関数によって返される値は、get-requestに対する回答です。</target>
        </trans-unit>
        <trans-unit id="fb7a37656b5be6c6e17b2389894ea550dae8ed86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraInfo&lt;/code&gt; argument is passed on from the &lt;code&gt;&lt;a href=&quot;snmpa#discovery&quot;&gt;discovery&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 引数はから渡される &lt;code&gt;&lt;a href=&quot;snmpa#discovery&quot;&gt;discovery&lt;/a&gt;&lt;/code&gt; 機能。</target>
        </trans-unit>
        <trans-unit id="f30e53e02c0d2cd4e451fab992fbc868cf17c42e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ExtraInfo&lt;/code&gt; argument is passed on to the callback functions of the &lt;code&gt;DiscoHandler&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ExtraInfo&lt;/code&gt; 引数はのコールバック関数に渡される &lt;code&gt;DiscoHandler&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="289abc6fff4535554475e47566270dcbf6237037" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Freeze&lt;/code&gt; button starts/stops the redrawing of the graph. &lt;code&gt;Reset&lt;/code&gt; moves the graph to the middle of the window and resets all graph settings to default, with the exception of deleted nodes.</source>
          <target state="translated">「 &lt;code&gt;Freeze&lt;/code&gt; ボタンは、グラフの再描画を開始/停止します。 &lt;code&gt;Reset&lt;/code&gt; は、グラフをウィンドウの中央に移動し、削除されたノードを除いて、すべてのグラフ設定をデフォルトにリセットします。</target>
        </trans-unit>
        <trans-unit id="0da0ebb6c63a989a7a4138310af5788ea3268e7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; is called when the tar function wants to do a low-level operation, like writing a block to a file. The &lt;code&gt;Fun&lt;/code&gt; is called as &lt;code&gt;Fun(Op, {UserData,Parameters...})&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is the operation name, &lt;code&gt;UserData&lt;/code&gt; is the term passed as the first argument to &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;Parameters...&lt;/code&gt; are the data added by the tar function to be passed down to the storage handling function.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; タール機能は、ファイルにブロックを書きたい、低レベルの操作をしたいときに呼び出されます。 &lt;code&gt;Fun&lt;/code&gt; と呼ばれる &lt;code&gt;Fun(Op, {UserData,Parameters...})&lt;/code&gt; 、 &lt;code&gt;Op&lt;/code&gt; 操作名であるが、 &lt;code&gt;UserData&lt;/code&gt; のは、最初の引数として渡される用語である &lt;code&gt;init/1&lt;/code&gt; 及び &lt;code&gt;Parameters...&lt;/code&gt; データは、によって追加さストレージ処理関数に渡されるtar関数。</target>
        </trans-unit>
        <trans-unit id="bb27036c1560c4a25ff7bd106092a75ea724c349" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; is called when the tar function wants to do a low-level operation, like writing a block to a file. The &lt;code&gt;Fun&lt;/code&gt; is called as &lt;code&gt;Fun(Op, {UserPrivate,Parameters...})&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is the operation name, &lt;code&gt;UserPrivate&lt;/code&gt; is the term passed as the first argument to &lt;code&gt;init/1&lt;/code&gt; and &lt;code&gt;Parameters...&lt;/code&gt; are the data added by the tar function to be passed down to the storage handling function.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; タール機能は、ファイルにブロックを書きたい、低レベルの操作をしたいときに呼び出されます。 &lt;code&gt;Fun&lt;/code&gt; と呼ばれる &lt;code&gt;Fun(Op, {UserPrivate,Parameters...})&lt;/code&gt; 、 &lt;code&gt;Op&lt;/code&gt; 操作名であるが、 &lt;code&gt;UserPrivate&lt;/code&gt; が最初の引数として渡される用語である &lt;code&gt;init/1&lt;/code&gt; 及び &lt;code&gt;Parameters...&lt;/code&gt; データは、によって追加さストレージ処理関数に渡されるtar関数。</target>
        </trans-unit>
        <trans-unit id="5d186993003ed1ccd81976e2681cc3264ce79a2b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; is the definition of what to do when the different storage operations functions are to be called from the higher tar handling functions (such as &lt;code&gt;add/3&lt;/code&gt;, &lt;code&gt;add/4&lt;/code&gt;, and &lt;code&gt;close/1&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 異なるストレージ操作機能は機能処理高いタールから呼び出されるときに何をすべきかの定義である（例えば、 &lt;code&gt;add/3&lt;/code&gt; 、 &lt;code&gt;add/4&lt;/code&gt; 、及び &lt;code&gt;close/1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="ca0ec970a34ee33c7f128926a1e15f48a39b7957" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Fun&lt;/code&gt; must return a new accumulator, which is passed to the next call. &lt;code&gt;foldl/3&lt;/code&gt; returns the final accumulator value. &lt;code&gt;Acc0&lt;/code&gt; is returned if the archive is empty. It is not necessary to iterate over all files in the archive. The iteration can be ended prematurely in a controlled manner by throwing an exception.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; 次の呼び出しに渡される新しいアキュムレータを、返さなければなりません。 &lt;code&gt;foldl/3&lt;/code&gt; は最終的なアキュムレータ値を返します。アーカイブが空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。アーカイブ内のすべてのファイルを反復処理する必要はありません。例外をスローすることにより、制御された方法で反復を途中で終了できます。</target>
        </trans-unit>
        <trans-unit id="387a945d1ef3c3c3d8058c83966af63af2d4d8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Guard&lt;/code&gt; section can also contain logic and arithmetic operations, which are written with the same syntax as the guard tests (prefix notation), so that the following guard test written in Erlang:</source>
          <target state="translated">&lt;code&gt;Guard&lt;/code&gt; 区間は、次のガード試験はErlangで書かれたように、ガード試験（接頭表記）と同じ構文で書き込まれ、論理演算と算術演算を含むことができます。</target>
        </trans-unit>
        <trans-unit id="0ed2562e6fd2d312da06422aef22e77ebef5ba9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Guard&lt;/code&gt;s are constructed as tuples, where the first element is the test name and the remaining elements are the test parameters. To check for a specific type (say a list) of the element bound to the match variable &lt;code&gt;'$1'&lt;/code&gt;, one would write the test as &lt;code&gt;{is_list, '$1'}&lt;/code&gt;. If the test fails, the object in the table does not match and the next &lt;code&gt;MatchFunction&lt;/code&gt; (if any) is tried. Most guard tests present in Erlang can be used, but only the new versions prefixed &lt;code&gt;is_&lt;/code&gt; are allowed (&lt;code&gt;is_float&lt;/code&gt;, &lt;code&gt;is_atom&lt;/code&gt;, and so on).</source>
          <target state="translated">&lt;code&gt;Guard&lt;/code&gt; Sは、最初の要素はテスト名であり、残りの要素は、試験パラメータでタプルとして構成されています。一致変数 &lt;code&gt;'$1'&lt;/code&gt; にバインドされている要素の特定のタイプ（リストなど）を確認するには、テストを &lt;code&gt;{is_list, '$1'}&lt;/code&gt; と記述します。テストが失敗した場合、テーブル内のオブジェクトは一致せず、次の &lt;code&gt;MatchFunction&lt;/code&gt; （存在する場合）が試行されます。Erlangに存在するほとんどのガードテストを使用できますが、許可されるのは、プレフィックスが &lt;code&gt;is_&lt;/code&gt; の新しいバージョン（ &lt;code&gt;is_float&lt;/code&gt; 、 &lt;code&gt;is_atom&lt;/code&gt; など）のみです。</target>
        </trans-unit>
        <trans-unit id="3de2a50d3651924af28c65d29b6c75e407eb8165" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HTTP&lt;/code&gt; version of the request, that is, &quot;HTTP/0.9&quot;, &quot;HTTP/1.0&quot;, or &quot;HTTP/1.1&quot;.</source>
          <target state="translated">リクエストの &lt;code&gt;HTTP&lt;/code&gt; バージョン、つまり「HTTP / 0.9」、「HTTP / 1.0」、または「HTTP / 1.1」。</target>
        </trans-unit>
        <trans-unit id="462a5eb6a4e1b7237b73c6e94eed8c647d921612" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;HostName&lt;/code&gt; will also be used in the hostname verification of the peer certificate using &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;HostName&lt;/code&gt; また、使用してピアの証明書のホスト名の検証に使用される &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fe5414d8d8a859939f8d4935fe18c2a11ba8b69" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Id&lt;/code&gt; identifies a CTH instance uniquely. If two CTHs return the same &lt;code&gt;Id&lt;/code&gt;, the second CTH is ignored and subsequent calls to the CTH are only made to the first instance. For details, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Installing a CTH&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; は一意CTHインスタンスを識別する。2つのCTHが同じ &lt;code&gt;Id&lt;/code&gt; を返す場合、2番目のCTHは無視され、CTHへの後続の呼び出しは最初のインスタンスに対してのみ行われます。詳細については、ユーザーズガイドのセクション「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#installing&quot;&gt;Installing a CTH&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c260809e9afd9c349ba39adc0e706099bd4227f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InclNodes&lt;/code&gt; argument to &lt;code&gt;run/3&lt;/code&gt; is a list of node names. Function &lt;code&gt;run/3&lt;/code&gt; runs the tests in &lt;code&gt;TestSpecs&lt;/code&gt; just like &lt;code&gt;run/1&lt;/code&gt;, but also takes any test in &lt;code&gt;TestSpecs&lt;/code&gt;, which is not explicitly tagged with a particular node name, and execute it on the nodes listed in &lt;code&gt;InclNodes&lt;/code&gt;. By using &lt;code&gt;run/3&lt;/code&gt; this way, any test specification can be used, with or without node information, in a large-scale test environment.</source>
          <target state="translated">&lt;code&gt;run/3&lt;/code&gt; の &lt;code&gt;InclNodes&lt;/code&gt; 引数はノード名のリストです。機能の &lt;code&gt;run/3&lt;/code&gt; でテスト実行 &lt;code&gt;TestSpecs&lt;/code&gt; だけ様 &lt;code&gt;run/1&lt;/code&gt; だけでなく、内の任意の試験かかり &lt;code&gt;TestSpecs&lt;/code&gt; 明示的に特定のノード名とタグ付けされていない、とに記載されているノード上でそれを実行 &lt;code&gt;InclNodes&lt;/code&gt; 。このように &lt;code&gt;run/3&lt;/code&gt; を使用すると、ノード情報の有無にかかわらず、大規模なテスト環境で任意のテスト仕様を使用できます。</target>
        </trans-unit>
        <trans-unit id="728f2fde5e1be51dec6dbadf7fd8bb23ae8a8436" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InfoTuple&lt;/code&gt;s with the following items are part of the result:</source>
          <target state="translated">&lt;code&gt;InfoTuple&lt;/code&gt; 秒以下の項目では、結果の一部です：</target>
        </trans-unit>
        <trans-unit id="18a616360c14e89869b3ee8a191e8982efcb7c70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;InitFun&lt;/code&gt; is applied once prior to any other &lt;code&gt;crypto&lt;/code&gt; operation. The returned &lt;code&gt;CryptoState&lt;/code&gt; is then folded into repeated applications of the &lt;code&gt;EncryptFun&lt;/code&gt; or &lt;code&gt;DecryptFun&lt;/code&gt;. The binary returned from those funs are sent further to the remote SFTP server. Finally, if doing encryption, the &lt;code&gt;CloseFun&lt;/code&gt; is applied to the last piece of data. The &lt;code&gt;CloseFun&lt;/code&gt; is responsible for padding (if needed) and encryption of that last piece.</source>
          <target state="translated">&lt;code&gt;InitFun&lt;/code&gt; は一度前に、他に適用される &lt;code&gt;crypto&lt;/code&gt; 操作。返された &lt;code&gt;CryptoState&lt;/code&gt; は、 &lt;code&gt;EncryptFun&lt;/code&gt; または &lt;code&gt;DecryptFun&lt;/code&gt; の繰り返しアプリケーションに折りたたまれます。これらのfunから返されたバイナリは、リモートSFTPサーバーにさらに送信されます。最後に、暗号化を行う場合、 &lt;code&gt;CloseFun&lt;/code&gt; は最後のデータに適用されます。 &lt;code&gt;CloseFun&lt;/code&gt; は、その最後のピースのパディング（必要な場合）と暗号化を担当しています。</target>
        </trans-unit>
        <trans-unit id="f831068a66059cf58bd10807a62c5026adc8c387" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Install&lt;/code&gt; script should currently be invoked as follows in the directory where it resides (the top directory):</source>
          <target state="translated">現在、 &lt;code&gt;Install&lt;/code&gt; スクリプトは、スクリプトが存在するディレクトリ（トップディレクトリ）で次のように呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="151c25d0c87229840b1a357c4265bc6b194406ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Install&lt;/code&gt; script used when installing Erlang/OTP requires common Unix tools such as &lt;code&gt;sed&lt;/code&gt; to be present in your &lt;code&gt;$PATH&lt;/code&gt;. If your target system does not have such tools, you need to run the &lt;code&gt;Install&lt;/code&gt; script on your build machine before packaging Erlang/OTP. The &lt;code&gt;Install&lt;/code&gt; script should currently be invoked as follows in the directory where it resides (the top directory):</source>
          <target state="translated">&lt;code&gt;Install&lt;/code&gt; のErlang / OTPをインストールする際に使用されるスクリプトは、このような一般的なUnixツールが必要です &lt;code&gt;sed&lt;/code&gt; はあなたの中に存在すること &lt;code&gt;$PATH&lt;/code&gt; 。ターゲットシステムにそのようなツールがない場合、Erlang / OTPをパッケージ化する前にビルドマシンで &lt;code&gt;Install&lt;/code&gt; スクリプトを実行する必要があります。現在、 &lt;code&gt;Install&lt;/code&gt; スクリプトは、スクリプトが存在するディレクトリ（トップディレクトリ）で次のように呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="63ceadf10aefd8db61da0846c16f50dd4c57bf68" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Issuer&lt;/code&gt; argument contains the issuer name of the certificate to be checked. Normally the returned CRL should be issued by this issuer, except if the &lt;code&gt;cRLIssuer&lt;/code&gt; field of &lt;code&gt;DistributionPoint&lt;/code&gt; has a value, in which case that value should be used instead.</source>
          <target state="translated">&lt;code&gt;Issuer&lt;/code&gt; 引数は、証明書の発行者名のチェックが含まれています。通常、返されたCRLはこの発行者が発行する必要があります。ただし、 &lt;code&gt;DistributionPoint&lt;/code&gt; の &lt;code&gt;cRLIssuer&lt;/code&gt; フィールドに値がある場合は、その値を代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="1df86fa6a13d4782f56f4b70368193619f74ccce" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;JCL&lt;/code&gt; commands have the following meaning:</source>
          <target state="translated">&lt;code&gt;JCL&lt;/code&gt; のコマンドは、以下の意味があります。</target>
        </trans-unit>
        <trans-unit id="eb0d6b265bbd8a2ede63c784c4e76e0b9b25a09c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LANG&lt;/code&gt; or &lt;code&gt;LC_CTYPE&lt;/code&gt; setting are to be consistent with what the terminal is capable of. There is no portable way for Erlang to ask the terminal about its UTF-8 capacity, we have to rely on the language and character type settings.</source>
          <target state="translated">&lt;code&gt;LANG&lt;/code&gt; または &lt;code&gt;LC_CTYPE&lt;/code&gt; の設定は、端末が可能であるものと一致しなければなりません。Erlangが端末にそのUTF-8容量について尋ねるポータブルな方法はありません。言語と文字タイプの設定に依存する必要があります。</target>
        </trans-unit>
        <trans-unit id="6dcd5eb8b8d30040b44118c19bb40f40ac2fd675" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Lin&lt;/code&gt; (&lt;code&gt;LLin&lt;/code&gt;, &lt;code&gt;XLin&lt;/code&gt;) operator assigns the lines where calls (local calls, external calls) are made. The &lt;code&gt;ELin&lt;/code&gt; operator assigns to each call (From, To), for which it is defined, every line L such that there is a chain of calls from From to To beginning with a call on line L.</source>
          <target state="translated">&lt;code&gt;Lin&lt;/code&gt; （ &lt;code&gt;LLin&lt;/code&gt; 、 &lt;code&gt;XLin&lt;/code&gt; ）オペレータがコール（ローカル電話、外部コール）が形成されている行を割り当てます。 &lt;code&gt;ELin&lt;/code&gt; 、それが定義されている（TO、から）各コール、からからラインL上の呼び出しで始まるへの呼び出しの連鎖が存在するように、各ラインLにオペレータ割り当てます</target>
        </trans-unit>
        <trans-unit id="ddd6ecd801eba0297210dd779a386d2f9b34f307" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ListOfExtraArguments&lt;/code&gt; can be used to write generic functions. This list is appended to the standard arguments for each function. Consider two read-only variables for a device, &lt;code&gt;ipAdr&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; with object identifiers 1.1.23.4 and 1.1.7 respectively. To access these variables, one could implement the two Erlang functions &lt;code&gt;ip_access&lt;/code&gt; and &lt;code&gt;name_access&lt;/code&gt;, which will be in the MIB. The functions could be specified in a text file as follows:</source>
          <target state="translated">&lt;code&gt;ListOfExtraArguments&lt;/code&gt; は、汎用的な関数を作成するために使用することができます。このリストは、各関数の標準引数に追加されます。デバイスの2つの読み取り専用変数、 &lt;code&gt;ipAdr&lt;/code&gt; とオブジェクト識別子がそれぞれ1.1.23.4と1.1.7の &lt;code&gt;name&lt;/code&gt; について考えます。これらの変数にアクセスするには、2つのErlang関数 &lt;code&gt;ip_access&lt;/code&gt; と &lt;code&gt;name_access&lt;/code&gt; を実装します。これらはMIBにあります。関数は、テキストファイルで次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="e1503197789ab51916ae2782b9a6115c1230e790" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Listen&lt;/code&gt; argument will be the same as the &lt;code&gt;Listen&lt;/code&gt; handle part of the return value of the &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/1&lt;/a&gt;&lt;/code&gt; callback above. &lt;code&gt;accept/1&lt;/code&gt; is called only once when the distribution protocol is started.</source>
          <target state="translated">&lt;code&gt;Listen&lt;/code&gt; と引数は同じになります &lt;code&gt;Listen&lt;/code&gt; の戻り値のハンドル部 &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/1&lt;/a&gt;&lt;/code&gt; 上記のコールバックを。 &lt;code&gt;accept/1&lt;/code&gt; は、配布プロトコルが開始されたときに一度だけ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="431a15a498450f82a9cfae588ffa70427314b380" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;LoadOrder&lt;/code&gt; priority is by default &lt;code&gt;0&lt;/code&gt; (zero) but can be set to any integer. The tables with the highest &lt;code&gt;LoadOrder&lt;/code&gt; priority are loaded first at startup.</source>
          <target state="translated">&lt;code&gt;LoadOrder&lt;/code&gt; の優先度はデフォルトで &lt;code&gt;0&lt;/code&gt; （ゼロ）が、任意の整数に設定することができます。 &lt;code&gt;LoadOrder&lt;/code&gt; 優先順位が最も高いテーブルが、起動時に最初にロードされます。</target>
        </trans-unit>
        <trans-unit id="c0d1ccb772696ffcb0ff02e3e38d3edd067a8070" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Low&lt;/code&gt; limit is automatically adjusted to the same as &lt;code&gt;High&lt;/code&gt; if it is set larger then &lt;code&gt;High&lt;/code&gt;. Valid range of values for &lt;code&gt;Low&lt;/code&gt; and &lt;code&gt;High&lt;/code&gt; is &lt;code&gt;[1, (1 bsl (8*erlang:system_info(wordsize)))-2]&lt;/code&gt;. If the atom &lt;code&gt;disabled&lt;/code&gt; is passed, the port message queue will never enter the busy state.</source>
          <target state="translated">&lt;code&gt;Low&lt;/code&gt; 制限は自動的に同じに調整される &lt;code&gt;High&lt;/code&gt; それが次に大きく設定されている場合、 &lt;code&gt;High&lt;/code&gt; 。 &lt;code&gt;Low&lt;/code&gt; と &lt;code&gt;High&lt;/code&gt; の有効な値の範囲は &lt;code&gt;[1, (1 bsl (8*erlang:system_info(wordsize)))-2]&lt;/code&gt; です。 &lt;code&gt;disabled&lt;/code&gt; たアトムが渡された場合、ポートメッセージキューがビジー状態になることはありません。</target>
        </trans-unit>
        <trans-unit id="6ca11762016f06296699f63500e41a8f8017d459" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Low&lt;/code&gt; limit is automatically adjusted to the same as &lt;code&gt;High&lt;/code&gt; if it is set larger then &lt;code&gt;High&lt;/code&gt;. Valid range of values for &lt;code&gt;Low&lt;/code&gt; and &lt;code&gt;High&lt;/code&gt; is &lt;code&gt;[1, (1 bsl (8*erlang:system_info(wordsize)))-2]&lt;/code&gt;. If the atom &lt;code&gt;disabled&lt;/code&gt; is passed, the port will never enter the busy state.</source>
          <target state="translated">&lt;code&gt;Low&lt;/code&gt; 制限は自動的に同じに調整される &lt;code&gt;High&lt;/code&gt; それが次に大きく設定されている場合、 &lt;code&gt;High&lt;/code&gt; 。 &lt;code&gt;Low&lt;/code&gt; と &lt;code&gt;High&lt;/code&gt; の有効な値の範囲は &lt;code&gt;[1, (1 bsl (8*erlang:system_info(wordsize)))-2]&lt;/code&gt; です。 &lt;code&gt;disabled&lt;/code&gt; たアトムが渡された場合、ポートはビジー状態になりません。</target>
        </trans-unit>
        <trans-unit id="6ca1036527f7b7c9ab7ab8a36cae20db5fe67ec0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MEDIA-GATEWAY-CONTROL&lt;/code&gt; configuration was as follows:</source>
          <target state="translated">&lt;code&gt;MEDIA-GATEWAY-CONTROL&lt;/code&gt; の次のように設定されました：</target>
        </trans-unit>
        <trans-unit id="d517f2a191b0a2929a426e74c5d9977a2a92791e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;MIB.Object&lt;/code&gt; syntax is not implemented (since all objects must be unique anyway).</source>
          <target state="translated">&lt;code&gt;MIB.Object&lt;/code&gt; の（すべてのオブジェクトは一意とにかくなければならないので）構文が実装されていません。</target>
        </trans-unit>
        <trans-unit id="431d9a802a4fe9bcef002e403293ba1753c616e6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mac&lt;/code&gt; result will have a default length depending on the &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;SubType&lt;/code&gt;. To set a shorter length, use &lt;code&gt;&lt;a href=&quot;#macN-4&quot;&gt;macN/4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#macN-5&quot;&gt;macN/5&lt;/a&gt;&lt;/code&gt; instead. The default length is documented in &lt;code&gt;&lt;a href=&quot;algorithm_details#message-authentication-codes--macs-&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;Mac&lt;/code&gt; 結果は、に応じて、デフォルトの長さを持つことになります &lt;code&gt;Type&lt;/code&gt; と &lt;code&gt;SubType&lt;/code&gt; 。より短い長さを設定するには、代わりに &lt;code&gt;&lt;a href=&quot;#macN-4&quot;&gt;macN/4&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#macN-5&quot;&gt;macN/5&lt;/a&gt;&lt;/code&gt; を使用してください。デフォルトの長さは、ユーザーガイドの &lt;code&gt;&lt;a href=&quot;algorithm_details#message-authentication-codes--macs-&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; れています。</target>
        </trans-unit>
        <trans-unit id="9b5dc880ea5414559476926c86f0abfef7e6942b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Makefile&lt;/code&gt; for building the emulator currently defines the following symbols by using the &lt;code&gt;-D&lt;/code&gt; option on the command line for &lt;strong&gt;beam_makeops&lt;/strong&gt;.</source>
          <target state="translated">エミュレーターをビルドするための &lt;code&gt;Makefile&lt;/code&gt; は、現在、&lt;strong&gt;beam_makeopsの&lt;/strong&gt;コマンドラインで &lt;code&gt;-D&lt;/code&gt; オプションを使用して、次のシンボルを定義しています。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="636dca28dbd87863b36f206b257464a2e654c483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Max Carrier size&lt;/code&gt; column shows the maximum value seen by observer since the last node change or since the start of the application, i.e. switching nodes will reset the max column. Values are sampled so higher values may have existed than what is shown.</source>
          <target state="translated">[ &lt;code&gt;Max Carrier size&lt;/code&gt; ]列には、最後のノードの変更以降、またはアプリケーションの開始以降にオブザーバーが確認した最大値が表示されます。つまり、ノードを切り替えると、最大列がリセットされます。値はサンプリングされているため、表示されている値よりも高い値が存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="cc6e05d560929a4a9cfa001cecdf62f1726f815c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; programmer cannot prioritize one particular transaction to execute before other transactions that are waiting to execute. As a result, the &lt;code&gt;Mnesia&lt;/code&gt; DBMS transaction system is not suitable for hard real-time applications. However, &lt;code&gt;Mnesia&lt;/code&gt; contains other features that have real-time properties.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のプログラマは、実行するために待っている他のトランザクションの前に実行するためにある特定のトランザクションの優先順位を設定することはできません。その結果、 &lt;code&gt;Mnesia&lt;/code&gt; DBMSトランザクションシステムは、ハードリアルタイムアプリケーションには適していません。ただし、 &lt;code&gt;Mnesia&lt;/code&gt; には、リアルタイムプロパティを持つ他の機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="2398df613eed0972c6702e33c30169f57db4a6c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; record identifiers (&lt;code&gt;{Tab, Key}&lt;/code&gt;) can also be used as references. In this case, attribute &lt;code&gt;dept&lt;/code&gt; would be set to value &lt;code&gt;{dept, 'B/SFR'}&lt;/code&gt; instead of &lt;code&gt;'B/SFR'&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のレコード識別子（ &lt;code&gt;{Tab, Key}&lt;/code&gt; ）も参照として使用することができます。この場合、属性 &lt;code&gt;dept&lt;/code&gt; 値に設定されることになる &lt;code&gt;{dept, 'B/SFR'}&lt;/code&gt; の代わりに &lt;code&gt;'B/SFR'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="90246ca10a3686ec4547ee9155bf07c76827f547" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; transaction system facilitates the construction of reliable, distributed systems by providing the following important properties:</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; の取引システムは、以下の重要な特性を提供することにより、信頼性の高い、分散システムの構築を容易に：</target>
        </trans-unit>
        <trans-unit id="05c05e9d6716d8728951521a8360d9cad3bf485c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Mnesia&lt;/code&gt; transactions have four important properties, called &lt;strong&gt;A&lt;/strong&gt;tomicity, &lt;strong&gt;C&lt;/strong&gt;onsistency, &lt;strong&gt;I&lt;/strong&gt;solation, and &lt;strong&gt;D&lt;/strong&gt;urability (ACID). These properties are described in the following sections.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; のトランザクションは、4つの重要な特性と呼ばれる、有するtomicity、&lt;strong&gt;Cの&lt;/strong&gt; onsistency、&lt;strong&gt;Iの&lt;/strong&gt;ゾル化、および&lt;strong&gt;Dの&lt;/strong&gt; urability（酸）。これらのプロパティについては、次のセクションで説明します。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="34969f65d94bd140bef4861a2be0633f1edd4059" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Module:callback_mode()&lt;/code&gt; function may also return a list containing the callback mode and the atom &lt;code&gt;state_enter&lt;/code&gt; in which case &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt; are activated for the callback mode.</source>
          <target state="translated">&lt;code&gt;Module:callback_mode()&lt;/code&gt; 関数は、コールバックモードと原子含むリストを返すことがあり &lt;code&gt;state_enter&lt;/code&gt; 、その場合には &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;State Enter Calls&lt;/a&gt;&lt;/code&gt; 、コールバックモードのために起動されます。</target>
        </trans-unit>
        <trans-unit id="40a0e269f3ccc50144dceff290b7ec1e5d3d30c6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Msg&lt;/code&gt; is either the binary &quot;plain text&quot; data or it is the hashed value of &quot;plain text&quot;, that is, the digest.</source>
          <target state="translated">&lt;code&gt;Msg&lt;/code&gt; バイナリ「プレーンテキスト」データであるか、それは、ダイジェストである「プレーンテキスト」のハッシュされた値です。</target>
        </trans-unit>
        <trans-unit id="aa7575828f011f723e11b39b2169db4b9db4b1aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Msg&lt;/code&gt; is either the binary &quot;plain text&quot; data to be signed or it is the hashed value of &quot;plain text&quot;, that is, the digest.</source>
          <target state="translated">&lt;code&gt;Msg&lt;/code&gt; のいずれかであるバイナリ「プレーンテキスト」データが署名されるかは、ダイジェストは「平文」のハッシュ値です。</target>
        </trans-unit>
        <trans-unit id="caed8c29d6ad9904a92815ee1e45441de9aec981" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; and &lt;code&gt;Path&lt;/code&gt; parameters have exactly the same meaning as when calling the plain function &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; と &lt;code&gt;Path&lt;/code&gt; パラメータは、プレーン関数呼び出したときとまったく同じ意味を持つ &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="27916491cb8658a94525ccdce76cf8ccb4103b9d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; field is the first element of the tuple.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; フィールドには、タプルの最初の要素です。</target>
        </trans-unit>
        <trans-unit id="771b9f2fcc80d7e7468afb27c626f330320484ed" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; is &lt;code&gt;&quot;sftp&quot;&lt;/code&gt; and &lt;code&gt;CbMod&lt;/code&gt; is the name of the Erlang module implementing the subsystem using the &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; (replaces ssh_daemon_channel) behaviour.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; ある &lt;code&gt;&quot;sftp&quot;&lt;/code&gt; と &lt;code&gt;CbMod&lt;/code&gt; は、使用してサブシステムを実装するErlangのモジュールの名前です &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; （置き換えssh_daemon_channel）行動を。</target>
        </trans-unit>
        <trans-unit id="3ca819160319b409a2f4c421438e5784e6c81c13" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Name&lt;/code&gt; specified is to correspond to the filename of the dynamically loadable object file residing in the directory specified as &lt;code&gt;Path&lt;/code&gt;, but &lt;strong&gt;without&lt;/strong&gt; the extension (that is, &lt;code&gt;.so&lt;/code&gt;). The driver name provided in the driver initialization routine must correspond with the filename, in much the same way as Erlang module names correspond to the names of the &lt;code&gt;.beam&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; として指定されたディレクトリに存在する動的にロード可能なオブジェクトファイルのファイル名に対応するように指定された &lt;code&gt;Path&lt;/code&gt; が、&lt;strong&gt;なし&lt;/strong&gt;（すなわち、拡張 &lt;code&gt;.so&lt;/code&gt; ）。ドライバー初期化ルーチンで提供されるドライバー名は、Erlangモジュール名が &lt;code&gt;.beam&lt;/code&gt; ファイルの名前に対応するのとほぼ同じ方法で、ファイル名に対応する必要があります。</target>
        </trans-unit>
        <trans-unit id="a8577668ea7b4d3a7d25c6ddf13c9da38e01e030" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;NegotiationTimeout&lt;/code&gt; is in milli-seconds. The default value is &lt;code&gt;infinity&lt;/code&gt;. For connection timeout, use the option &lt;code&gt;&lt;a href=&quot;#type-connect_timeout_client_option&quot;&gt;connect_timeout&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;NegotiationTimeout&lt;/code&gt; はミリ秒です。デフォルト値は &lt;code&gt;infinity&lt;/code&gt; です。接続タイムアウトの場合は、オプション &lt;code&gt;&lt;a href=&quot;#type-connect_timeout_client_option&quot;&gt;connect_timeout&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="25cf803e685b877b848b6e92d88b9c3e6c3210a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; is an important type and it is widely used within different standards to identify various objects uniquely. Dubuisson: ASN.1 - Communication Between Heterogeneous Systems includes an easy-to-understand description of the use of &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; 重要なタイプであり、広く一意にさまざまなオブジェクトを識別するために、異なる規格内で使用されています。Dubuisson：ASN.1-異機種間システム間の通信には、 &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; の使用に関する理解しやすい説明が含まれています。</target>
        </trans-unit>
        <trans-unit id="d89a49f90db529d1a87ec8ebe643fd609dd3d3b7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; value is simply a tuple with the consecutive values, which must be integers.</source>
          <target state="translated">&lt;code&gt;OBJECT IDENTIFIER&lt;/code&gt; 値は、単に、整数でなければならない連続した値との組です。</target>
        </trans-unit>
        <trans-unit id="a30b8da746d4069e2cdb144e9b76560cd1897c56" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Old API&lt;/code&gt; is now deprecated and has also been &lt;code&gt;&lt;a href=&quot;scheduled_for_removal#otp-24&quot;&gt;scheduled for removal&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Old API&lt;/code&gt; 廃止され、またされた &lt;code&gt;&lt;a href=&quot;scheduled_for_removal#otp-24&quot;&gt;scheduled for removal&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b07c15aa636f0544d2756cdbf51bdac039857354" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Old API&lt;/code&gt; will be removed as of OTP 24. The support was formally deprecated as of OTP 23.</source>
          <target state="translated">&lt;code&gt;Old API&lt;/code&gt; サポートが正式にOTP 23で廃止されたOTP 24のように削除されます。</target>
        </trans-unit>
        <trans-unit id="291813bf4581fd45b017cff8a605850835e5740d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Operation&lt;/code&gt; can be &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;is_set_ok&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt;, or &lt;code&gt;undo&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; することができ &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;is_set_ok&lt;/code&gt; 、 &lt;code&gt;set&lt;/code&gt; 、または &lt;code&gt;undo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0de93bd973f344208a44803393d2336ed72a592" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Operation&lt;/code&gt; can be &lt;code&gt;new&lt;/code&gt;, &lt;code&gt;delete&lt;/code&gt;, &lt;code&gt;get&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;is_set_ok&lt;/code&gt;, &lt;code&gt;undo&lt;/code&gt; or &lt;code&gt;set&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; することができ &lt;code&gt;new&lt;/code&gt; 、 &lt;code&gt;delete&lt;/code&gt; 、 &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;is_set_ok&lt;/code&gt; 、 &lt;code&gt;undo&lt;/code&gt; や &lt;code&gt;set&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9dd3e602f768fecc29440b2334d159be22f01871" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Opts&lt;/code&gt; argument is intended for &quot;other&quot; options. The supported option(s) are described below:</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 引数は、「その他」のオプションを対象としています。サポートされているオプションを以下に説明します。</target>
        </trans-unit>
        <trans-unit id="98288c1e55f84bdd812985a5fd086264e78ad4f6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Opts&lt;/code&gt; argument is intended for providing extra information for the open call:</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; 引数はオープン呼び出しのための余分な情報を提供するために意図されています。</target>
        </trans-unit>
        <trans-unit id="1c435f50eeeff168b9ba4f24d7c44a547a62546d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Opts&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt; when only the &lt;code&gt;Module&lt;/code&gt; is specified.</source>
          <target state="translated">&lt;code&gt;Opts&lt;/code&gt; デフォルトは &lt;code&gt;[]&lt;/code&gt; のみ &lt;code&gt;Module&lt;/code&gt; 指定されています。</target>
        </trans-unit>
        <trans-unit id="fb29cec4d8746b25b30ed76f21784b67fd7d4bbc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Phone&lt;/code&gt; field is the third element.</source>
          <target state="translated">&lt;code&gt;Phone&lt;/code&gt; フィールドは、第三の要素です。</target>
        </trans-unit>
        <trans-unit id="9a36c74c23cadea74c3943787187639b86600b99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Pid&lt;/code&gt; is the process handling the supervision of the SNMP manager start. When the manager has started a completion message will be sent to the client from this process: &lt;code&gt;{snmpm_started, Pid}&lt;/code&gt;. If the SNMP manager was not started in time, a timeout message will be sent to the client: &lt;code&gt;{snmpm_start_timeout, Pid}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; SNMPマネージャ開始の監督を処理するプロセスです。マネージャーが開始すると、このプロセスからクライアントに完了メッセージが送信されます： &lt;code&gt;{snmpm_started, Pid}&lt;/code&gt; 。SNMPマネージャーが時間内に開始されなかった場合、タイムアウトメッセージがクライアントに送信されます： &lt;code&gt;{snmpm_start_timeout, Pid}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b30293a63b2a3b26c593085f1e5a77514ed0092c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PingTO&lt;/code&gt; time specifies the between a successful ping (or start) and the time when a &lt;code&gt;&lt;a href=&quot;snmp_manager_netif#im_ping&quot;&gt;ping&lt;/a&gt;&lt;/code&gt; message is to be sent to the net-if process (basically the time between ping:s).</source>
          <target state="translated">&lt;code&gt;PingTO&lt;/code&gt; の時間が成功ピング（または開始）と時間との指定 &lt;code&gt;&lt;a href=&quot;snmp_manager_netif#im_ping&quot;&gt;ping&lt;/a&gt;&lt;/code&gt; メッセージは、ネット-IF処理（：Sピング間の基本的に時間）に送信されるべきです。</target>
        </trans-unit>
        <trans-unit id="523184d1586b2a64475008cf790d421779a2a4e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;PongTO&lt;/code&gt; time specifies how long time the net-if process has to respond to a ping message, with a &lt;code&gt;&lt;a href=&quot;snmp_manager_netif#om_pong&quot;&gt;pong&lt;/a&gt;&lt;/code&gt; message. It starts counting when the ping message has been sent.</source>
          <target state="translated">&lt;code&gt;PongTO&lt;/code&gt; の時間指定どのくらいの時間ネット-場合、プロセスはと、pingメッセージに応答するまで &lt;code&gt;&lt;a href=&quot;snmp_manager_netif#om_pong&quot;&gt;pong&lt;/a&gt;&lt;/code&gt; メッセージ。pingメッセージが送信されるとカウントを開始します。</target>
        </trans-unit>
        <trans-unit id="5ad1ec7b826ce17efed8a480d14fb2c2d7c83c24" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ProtocolVersion&lt;/code&gt; version is the version actually encoded in the reply message.</source>
          <target state="translated">&lt;code&gt;ProtocolVersion&lt;/code&gt; バージョンは、実際には、応答メッセージにエンコードされたバージョンです。</target>
        </trans-unit>
        <trans-unit id="cc15bf57b674de665a3aa4e09be58f12e93f6528" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RELATIVE-OID&lt;/code&gt; type for relative object identifiers is fully supported.</source>
          <target state="translated">相対オブジェクト識別子の &lt;code&gt;RELATIVE-OID&lt;/code&gt; タイプは完全にサポートされています。</target>
        </trans-unit>
        <trans-unit id="500392beab058916677f3be61233265c489d27bd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reason&lt;/code&gt; parameter in the &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_error&quot;&gt;handle_error&lt;/a&gt;&lt;/code&gt; user callback function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;snmpm_user#handle_error&quot;&gt;handle_error&lt;/a&gt;&lt;/code&gt; ユーザーコールバック関数の &lt;code&gt;Reason&lt;/code&gt; パラメーター。</target>
        </trans-unit>
        <trans-unit id="6b9fce90dd7e0310098f64ad13d29f2262c2551d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Reason&lt;/code&gt; returned value if any of the sync/async get/get-next/set/get-bulk functions returns &lt;code&gt;{error, Reason}&lt;/code&gt;</source>
          <target state="translated">sync / async get / get-next / set / get-bulk関数のいずれかが &lt;code&gt;{error, Reason}&lt;/code&gt; 返した場合の &lt;code&gt;Reason&lt;/code&gt; の戻り値</target>
        </trans-unit>
        <trans-unit id="1adaa6337c0136bccefb9d645f47ac7a3dea29f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ReplyData&lt;/code&gt; defaults to &lt;code&gt;megaco:lookup(ConnHandle, reply_data)&lt;/code&gt;, but may be explicitly overridden by a &lt;code&gt;megaco:cast/3&lt;/code&gt; option in order to forward info about the calling context of the originating process.</source>
          <target state="translated">&lt;code&gt;ReplyData&lt;/code&gt; はデフォルト &lt;code&gt;megaco:lookup(ConnHandle, reply_data)&lt;/code&gt; が、明示的で上書きすることができる &lt;code&gt;megaco:cast/3&lt;/code&gt; 元のプロセスの呼び出しコンテキストに関する前方情報へ順番にオプション。</target>
        </trans-unit>
        <trans-unit id="5dcd8c369c6500e932ff1e1629f6fafbdc39108e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request-Line&lt;/code&gt; as defined in&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;, for example, &lt;code&gt;&quot;GET /cgi-bin/find.pl?person=jocke HTTP/1.0&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request-Line&lt;/code&gt; で定義された &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; 、例えば、 &lt;code&gt;&quot;GET /cgi-bin/find.pl?person=jocke HTTP/1.0&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="560f996f8e0b32b35d673e574bfba7c7f5732599" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request-URI&lt;/code&gt; as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;, for example, &lt;code&gt;&quot;/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Request-URI&lt;/code&gt; で定義され &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; 、例えば、 &lt;code&gt;&quot;/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09cc862e08384f6496c068b1ef00d8543bcd2fea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Request&lt;/code&gt; element can in itself contain many &lt;code&gt;Request&lt;/code&gt;s by using the following format:</source>
          <target state="translated">&lt;code&gt;Request&lt;/code&gt; 自体の要素の缶が多く含まれている &lt;code&gt;Request&lt;/code&gt; の次の形式を使用しました：</target>
        </trans-unit>
        <trans-unit id="df3736ae6d527f6dc758c7bc44a6f372a5715a61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Root directory&lt;/code&gt; can be edited by selecting the line where the path of the root directory is displayed and clicking the right mouse button. Choose edit in the menu that pops up.</source>
          <target state="translated">&lt;code&gt;Root directory&lt;/code&gt; ルートディレクトリのパスが表示されている行を選択し、マウスの右ボタンをクリックすることで編集することができます。ポップアップメニューで[編集]を選択します。</target>
        </trans-unit>
        <trans-unit id="84770d839ef4e410e85af06b8af1e00bd08e41e0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;RowIndex&lt;/code&gt; argument may refer to an existing row or a non-existing row, or it may be unspecified. The &lt;code&gt;Cols&lt;/code&gt; list may refer to inaccessible columns or non-existing columns. For each column in the &lt;code&gt;Cols&lt;/code&gt; list, the corresponding next instance is determined, and the last part of its OBJECT IDENTIFIER and its value is returned.</source>
          <target state="translated">&lt;code&gt;RowIndex&lt;/code&gt; 引数は、既存の行または非既存の行を指すことができる、またはそれは未指定であってもよいです。 &lt;code&gt;Cols&lt;/code&gt; はのリストにはアクセスできない列または非既存の列を参照することができます。 &lt;code&gt;Cols&lt;/code&gt; リストの各列について、対応する次のインスタンスが決定され、そのOBJECT IDENTIFIERの最後の部分とその値が返されます。</target>
        </trans-unit>
        <trans-unit id="b8d86bbb9ebe74c2dccf692588c950366f9986be" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SecurityCallbackModule&lt;/code&gt; is a user-written module that can receive events from the &lt;code&gt;mod_security&lt;/code&gt; Erlang web server API module. This module only exports the functions event/[4,5] which are described here.</source>
          <target state="translated">&lt;code&gt;SecurityCallbackModule&lt;/code&gt; はからイベントを受け取ることができ、ユーザが記述したモジュールである &lt;code&gt;mod_security&lt;/code&gt; の ErlangのWebサーバのAPIモジュール。このモジュールは、ここで説明されている関数event / [4,5]のみをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="6af65a9600faa054b3af4ac9bf04b32c2eda0702" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SeqCnt&lt;/code&gt; values in the filenames are all in the range &lt;code&gt;0&lt;/code&gt; through &lt;code&gt;WrapCnt&lt;/code&gt; with a gap in the circular sequence. The gap is needed to find the end of the trace.</source>
          <target state="translated">ファイル名の &lt;code&gt;SeqCnt&lt;/code&gt; 値はすべて &lt;code&gt;0&lt;/code&gt; から &lt;code&gt;WrapCnt&lt;/code&gt; の範囲で、循環シーケンスにギャップがあります。ギャップは、トレースの終わりを見つけるために必要です。</target>
        </trans-unit>
        <trans-unit id="c2214d4ed634c1087714e34b7518b2efdc6127b8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; or the &lt;code&gt;TypeSpecifier&lt;/code&gt;, or both, can be omitted. Thus, the following variants are allowed:</source>
          <target state="translated">&lt;code&gt;Size&lt;/code&gt; や &lt;code&gt;TypeSpecifier&lt;/code&gt; 、またはその両方が、省略することができます。したがって、次のバリアントが許可されます。</target>
        </trans-unit>
        <trans-unit id="4401af203194a6b8a2b7ece91e21c535b2bfb4cc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Size&lt;/code&gt; part of the segment multiplied by the unit in &lt;code&gt;TypeSpecifierList&lt;/code&gt; (described later) gives the number of bits for the segment. In construction, &lt;code&gt;Size&lt;/code&gt; is any expression that evaluates to an integer. In matching, &lt;code&gt;Size&lt;/code&gt; must be a constant expression or a variable.</source>
          <target state="translated">&lt;code&gt;TypeSpecifierList&lt;/code&gt; （後述）の単位を掛けたセグメントの &lt;code&gt;Size&lt;/code&gt; 部分は、セグメントのビット数を示します。構築では、 &lt;code&gt;Size&lt;/code&gt; は整数に評価される任意の式です。マッチングでは、 &lt;code&gt;Size&lt;/code&gt; は定数式または変数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="fa124ccd13ea8b5e4811fb40dda4e89bf8e0ab6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Socket&lt;/code&gt; shall be in passive mode ({active, false}) before calling this function or else the behavior of this function is undefined.</source>
          <target state="translated">&lt;code&gt;Socket&lt;/code&gt; この関数の動作は未定義である他に、この関数を呼び出す前に、またはパッシブモード（{活性、偽}）でなければなりません。</target>
        </trans-unit>
        <trans-unit id="71d2c0146fa0a8ad0d23a9f16dafb29d093033b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;State0&lt;/code&gt; is the State value originally from a MAC init function, that is &lt;code&gt;&lt;a href=&quot;#mac_init-2&quot;&gt;mac_init/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#mac_init-3&quot;&gt;mac_init/3&lt;/a&gt;&lt;/code&gt; or a previous call of &lt;code&gt;mac_update/2&lt;/code&gt;. The value &lt;code&gt;State0&lt;/code&gt; is returned unchanged by the function as &lt;code&gt;State&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State0&lt;/code&gt; ある元々のMAC init関数からの状態値である &lt;code&gt;&lt;a href=&quot;#mac_init-2&quot;&gt;mac_init/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#mac_init-3&quot;&gt;mac_init/3&lt;/a&gt;&lt;/code&gt; または以前の呼び出し &lt;code&gt;mac_update/2&lt;/code&gt; 。値 &lt;code&gt;State0&lt;/code&gt; は、 &lt;code&gt;State&lt;/code&gt; として関数によって変更されずに返されます。</target>
        </trans-unit>
        <trans-unit id="9a112d3244fe07cff9e8f015a14975b38bd7df44" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;StatisticsSpec&lt;/code&gt; is a list of the tuples:</source>
          <target state="translated">&lt;code&gt;StatisticsSpec&lt;/code&gt; はタプルのリストです：</target>
        </trans-unit>
        <trans-unit id="7eae7e5127eb1df08b89e0018b0917cb18f30c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;SupFlags&lt;/code&gt; variable in the return value from &lt;code&gt;init/1&lt;/code&gt; represents the &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;supervisor flags&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init/1&lt;/code&gt; からの戻り値の &lt;code&gt;SupFlags&lt;/code&gt; 変数は、 &lt;code&gt;&lt;a href=&quot;#flags&quot;&gt;supervisor flags&lt;/a&gt;&lt;/code&gt; 表します。</target>
        </trans-unit>
        <trans-unit id="4b2315a984f49c0998e8d5af6001ef3acd45c41f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TEST&lt;/code&gt; macro can also be used to override the &lt;code&gt;NOTEST&lt;/code&gt; macro. If &lt;code&gt;TEST&lt;/code&gt; is defined &lt;strong&gt;before&lt;/strong&gt; the EUnit header file is included (even if &lt;code&gt;NOTEST&lt;/code&gt; is also defined), then the code will be compiled with EUnit enabled.</source>
          <target state="translated">&lt;code&gt;TEST&lt;/code&gt; マクロはまた、オーバーライドするために使用することができる &lt;code&gt;NOTEST&lt;/code&gt; マクロ。場合 &lt;code&gt;TEST&lt;/code&gt; が定義される&lt;strong&gt;前&lt;/strong&gt; EUNITヘッダファイルが含まれている（場合でも &lt;code&gt;NOTEST&lt;/code&gt; をも定義される）、次いでコードが有効EUNITでコンパイルされます。</target>
        </trans-unit>
        <trans-unit id="838665ed4c5367a2b5c2a4be4ad60949587a0665" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TarDescriptor&lt;/code&gt; term is not a file descriptor. You are advised not to rely on the specific contents of this term, as it can change in future Erlang/OTP releases when more features are added to this module.</source>
          <target state="translated">&lt;code&gt;TarDescriptor&lt;/code&gt; の用語は、ファイル記述子ではありません。このモジュールに機能が追加されると、将来のErlang / OTPリリースで変更される可能性があるため、この用語の特定の内容に依存しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="465bc37c25caf4b34efb2c4086ab264294ebb922" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TarDescriptor&lt;/code&gt; term is not a file descriptor. You are advised not to rely on the specific contents of this term, as it can change in future Erlang/OTP releases when more features are added to this module..</source>
          <target state="translated">&lt;code&gt;TarDescriptor&lt;/code&gt; の用語は、ファイル記述子ではありません。このモジュールに機能が追加されると、将来のErlang / OTPリリースで変更される可能性があるため、この用語の特定の内容に依存しないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0454f0125983aa193be8922f905a4526ad0af9b6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Timeout&lt;/code&gt; is the time the request is valid. The value has to be greater then zero.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; 要求が有効である時間です。値はゼロより大きくなければなりません。</target>
        </trans-unit>
        <trans-unit id="7d17ac7ee8e9756a5bbf3de834214c031df9a61a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Timeout&lt;/code&gt; parameter is for the actual tls upgrade (phase 2) while the timeout in &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; is used for the initial negotiation about upgrade (phase 1).</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; でタイムアウトしながら、実際のTLSは（フェーズ2）をアップグレードするためにパラメータがある &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; アップグレード（フェーズ1）についての最初のネゴシエーションに使用されます。</target>
        </trans-unit>
        <trans-unit id="2880ac4f009b868dac04469b39959fc855b2bc2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Timeout&lt;/code&gt; value in milliseconds sets an upper time limit for all &lt;code&gt;call&lt;/code&gt; operations to complete.</source>
          <target state="translated">ミリ秒単位の &lt;code&gt;Timeout&lt;/code&gt; 値は、すべての &lt;code&gt;call&lt;/code&gt; 操作が完了するまでの時間の上限を設定します。</target>
        </trans-unit>
        <trans-unit id="7e76487200ab118ffd183bce3e76d073d0b42eca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Trace Pattern&lt;/code&gt; is basically a tuple of a &lt;code&gt;module&lt;/code&gt; and a &lt;code&gt;detail level&lt;/code&gt; (either an integer or the atom max for full detail). In most cases the &lt;code&gt;Trace Pattern&lt;/code&gt;&lt;code&gt;{et,max}&lt;/code&gt; does suffice. But if you do not want any runtime dependency of &lt;code&gt;et&lt;/code&gt; you can implement your own &lt;code&gt;trace_me/5&lt;/code&gt; function in some module and refer to that module in the &lt;code&gt;Trace Pattern&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Trace Pattern&lt;/code&gt; 基本的にのタプルである &lt;code&gt;module&lt;/code&gt; と &lt;code&gt;detail level&lt;/code&gt; （整数または完全詳細は原子の最大のいずれか）。ほとんどの場合、 &lt;code&gt;Trace Pattern&lt;/code&gt; &lt;code&gt;{et,max}&lt;/code&gt; 十分です。ただし、 &lt;code&gt;et&lt;/code&gt; の実行時の依存関係が必要ない場合は、独自の &lt;code&gt;trace_me/5&lt;/code&gt; 関数をいくつかのモジュールに実装し、 &lt;code&gt;Trace Pattern&lt;/code&gt; でそのモジュールを参照できます。</target>
        </trans-unit>
        <trans-unit id="c7f49e5bd7c0b07a911f5147dffd68a5a99e4dbb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TraceStartOption&lt;/code&gt; is any option allowed for &lt;code&gt;trace/1&lt;/code&gt;. The options &lt;code&gt;[start, {procs, [self() | PidList]} | OptList]&lt;/code&gt; are given to &lt;code&gt;trace/1&lt;/code&gt;, where &lt;code&gt;OptList&lt;/code&gt; is &lt;code&gt;OptionList&lt;/code&gt; with &lt;code&gt;continue&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;{procs, _}&lt;/code&gt; options removed.</source>
          <target state="translated">&lt;code&gt;TraceStartOption&lt;/code&gt; はに許可される任意のオプションで &lt;code&gt;trace/1&lt;/code&gt; 。オプション &lt;code&gt;[start, {procs, [self() | PidList]} | OptList]&lt;/code&gt; は &lt;code&gt;trace/1&lt;/code&gt; に指定されます。ここで、 &lt;code&gt;OptList&lt;/code&gt; は &lt;code&gt;OptionList&lt;/code&gt; で、 &lt;code&gt;continue&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、および &lt;code&gt;{procs, _}&lt;/code&gt; オプションが削除されています。</target>
        </trans-unit>
        <trans-unit id="d2aed641ea18d80129eeabfddfeb6dc4dea97713" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TraceTag&lt;/code&gt;&lt;code&gt;seq_trace&lt;/code&gt; is handled slightly differently. There is no &lt;code&gt;Tracee&lt;/code&gt; for &lt;code&gt;seq_trace&lt;/code&gt;, instead the &lt;code&gt;Label&lt;/code&gt; associated with the &lt;code&gt;seq_trace&lt;/code&gt; event is specified.</source>
          <target state="translated">&lt;code&gt;TraceTag&lt;/code&gt; の &lt;code&gt;seq_trace&lt;/code&gt; は多少異なる方法で処理されます。何もありません &lt;code&gt;Tracee&lt;/code&gt; はため &lt;code&gt;seq_trace&lt;/code&gt; 代わりに、 &lt;code&gt;Label&lt;/code&gt; に関連付けられている &lt;code&gt;seq_trace&lt;/code&gt; のイベントが指定されています。</target>
        </trans-unit>
        <trans-unit id="0e7aee8b9587689f8640e087123cb9269b76c67d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;TypeSpecifierList&lt;/code&gt; is a list of type specifiers separated by hyphens.</source>
          <target state="translated">&lt;code&gt;TypeSpecifierList&lt;/code&gt; は、ハイフンで区切られた型指定子のリストです。</target>
        </trans-unit>
        <trans-unit id="cf30b67e2b9d6eefe96e2a44b56b701c3a71843b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Value&lt;/code&gt; part is any expression, when used in binary construction. Used in binary matching, the &lt;code&gt;Value&lt;/code&gt; part must be a literal or a variable. For more information about the &lt;code&gt;Value&lt;/code&gt; part, see &lt;code&gt;&lt;a href=&quot;#Constructing%20Binaries%20and%20Bitstrings&quot;&gt;Constructing Binaries and Bitstrings&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Matching%20Binaries&quot;&gt;Matching Binaries&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Value&lt;/code&gt; バイナリ構築に使用した場合の部分は、任意の式です。バイナリマッチングで使用する場合、 &lt;code&gt;Value&lt;/code&gt; 部分はリテラルまたは変数である必要があります。詳細については &lt;code&gt;Value&lt;/code&gt; 一部、見 &lt;code&gt;&lt;a href=&quot;#Constructing%20Binaries%20and%20Bitstrings&quot;&gt;Constructing Binaries and Bitstrings&lt;/a&gt;&lt;/code&gt; し、 &lt;code&gt;&lt;a href=&quot;#Matching%20Binaries&quot;&gt;Matching Binaries&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db41e1083994609150ba03a58467ce1564f93559" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Viewer&lt;/code&gt; will automatically pull events from the &lt;code&gt;Collector&lt;/code&gt; and display them on the screen.</source>
          <target state="translated">&lt;code&gt;Viewer&lt;/code&gt; は自動的からイベントを引っ張ってくる &lt;code&gt;Collector&lt;/code&gt; と、画面上に表示します。</target>
        </trans-unit>
        <trans-unit id="8afb3e18be8e7e2fb56c7adc4a8999ad88a05635" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;Viewer&lt;/code&gt; will by default create a &lt;code&gt;Collector&lt;/code&gt; for you. With a few options and some configuration settings you can start collecting &lt;code&gt;Events&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Viewer&lt;/code&gt; は、デフォルトで作成される &lt;code&gt;Collector&lt;/code&gt; あなたのため。いくつかのオプションといくつかの構成設定を使用して、 &lt;code&gt;Events&lt;/code&gt; 収集を開始できます。</target>
        </trans-unit>
        <trans-unit id="12a1a53435b86d328cae136152477d1bdb078001" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;XXL&lt;/code&gt; operator is defined for the interpretation of any of the LineOp operators applied to a set of function calls. The result is that of replacing the function call with a line numbered function call, that is, each of the two functions of the call is replaced by a pair of the function and the line where the function is defined. The effect of the &lt;code&gt;XXL&lt;/code&gt; operator can be undone by the LineOp operators. For instance, &lt;code&gt;(Lin)&amp;nbsp;(XXL)&amp;nbsp;(Lin)&amp;nbsp;E&lt;/code&gt; is equivalent to &lt;code&gt;(Lin)&amp;nbsp;E&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;XXL&lt;/code&gt; のオペレータは、関数呼び出しのセットに適用LineOpオペレータの任意の解釈のために定義されています。その結果は、関数呼び出しを行番号付きの関数呼び出しで置き換えることです。つまり、呼び出しの2つの関数はそれぞれ、関数と関数が定義されている行のペアで置き換えられます。 &lt;code&gt;XXL&lt;/code&gt; オペレーターの効果は、LineOpオペレーターによって元に戻すことができます。例えば、 &lt;code&gt;(Lin)&amp;nbsp;(XXL)&amp;nbsp;(Lin)&amp;nbsp;E&lt;/code&gt; と等価である &lt;code&gt;(Lin)&amp;nbsp;E&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="773f8eacbf90d517d7610d94842c0bab01a3934c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ZipHandle&lt;/code&gt; is closed if the process that originally opened the archive dies.</source>
          <target state="translated">&lt;code&gt;ZipHandle&lt;/code&gt; は、プロセスが最初にアーカイブ金型を開いている場合は閉じています。</target>
        </trans-unit>
        <trans-unit id="557e22236c78cd7d079417146126bba5baaa6036" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;[&amp;lt;&amp;lt;&quot;First bytes&quot;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&quot;Second bytes&quot;&amp;gt;&amp;gt;]&lt;/code&gt; could of course have been one single binary: &lt;code&gt;&amp;lt;&amp;lt;&quot;First bytesSecond bytes&quot;&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;[&amp;lt;&amp;lt;&quot;First bytes&quot;&amp;gt;&amp;gt;,&amp;lt;&amp;lt;&quot;Second bytes&quot;&amp;gt;&amp;gt;]&lt;/code&gt; もちろん1つのバイナリされている可能性が： &lt;code&gt;&amp;lt;&amp;lt;&quot;First bytesSecond bytes&quot;&amp;gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6a10f4396b335e787b9182ce75a8ccae749ae857" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;_test&lt;/code&gt; macro takes any expression (the &quot;body&quot;) as argument, and places it within a fun-expression (along with some extra information). The body can be any kind of test expression, just like the body of a simple test function.</source>
          <target state="translated">&lt;code&gt;_test&lt;/code&gt; マクロは引数として任意の式（「体」）をとり、（いくつかの余分な情報と一緒に）楽しい式の中でそれを配置します。本体は、単純なテスト関数の本体と同様に、任意の種類のテスト式にすることができます。</target>
        </trans-unit>
        <trans-unit id="21e2f2fedc48b32638d6fb2b72fe74559f091a86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;accept&lt;/code&gt; call does &lt;strong&gt;not&lt;/strong&gt; have to be issued from the socket owner process. Using version 5.5.3 and higher of the emulator, multiple simultaneous accept calls can be issued from different processes, which allows for a pool of acceptor processes handling incoming connections.</source>
          <target state="translated">&lt;code&gt;accept&lt;/code&gt; 呼び出しがない&lt;strong&gt;ではない&lt;/strong&gt;ソケットの所有者のプロセスから発行する必要があります。エミュレーターのバージョン5.5.3以降を使用すると、複数の同時受け入れ呼び出しを異なるプロセスから発行できるため、着信接続を処理する受け入れプロセスのプールが可能になります。</target>
        </trans-unit>
        <trans-unit id="118d34eb87604b965b95931c52d7927f1d1dca61" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addr&lt;/code&gt; and &lt;code&gt;len&lt;/code&gt; arguments are both input and output arguments. When called &lt;code&gt;addr&lt;/code&gt; points to an address structure of lenght &lt;code&gt;*len&lt;/code&gt; containing information on how to bind the socket. Uppon return this callback should have updated the structure referred by &lt;code&gt;addr&lt;/code&gt; with information on how the socket actually was bound. &lt;code&gt;*len&lt;/code&gt; should be updated to reflect the size of &lt;code&gt;*addr&lt;/code&gt; updated. &lt;code&gt;backlog&lt;/code&gt; identifies the size of the backlog for the listen socket.</source>
          <target state="translated">&lt;code&gt;addr&lt;/code&gt; と &lt;code&gt;len&lt;/code&gt; の引数は、入力と出力の両方の引数です。呼び出されると、 &lt;code&gt;addr&lt;/code&gt; は、ソケットをバインドする方法に関する情報を含むlenght &lt;code&gt;*len&lt;/code&gt; のアドレス構造を指します。 Uppon returnこのコールバックは、ソケットが実際にどのようにバインドされたかに関する情報で &lt;code&gt;addr&lt;/code&gt; によって参照される構造を更新する必要があります。 &lt;code&gt;*len&lt;/code&gt; は、更新された &lt;code&gt;*addr&lt;/code&gt; のサイズを反映するように更新する必要があります。 &lt;code&gt;backlog&lt;/code&gt; は、リッスンソケットのバックログのサイズを識別します。</target>
        </trans-unit>
        <trans-unit id="d5a0f81704a04cf2f958a3cb5b26d7a07f57fb43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;addr&lt;/code&gt; argument of the &lt;code&gt;listen&lt;/code&gt;, &lt;code&gt;accept&lt;/code&gt;, and &lt;code&gt;connect&lt;/code&gt; callbacks refer to appropriate address structure for currently used protocol. Currently &lt;code&gt;ei&lt;/code&gt; only supports IPv4. That is, at this time &lt;code&gt;addr&lt;/code&gt; always points to a &lt;code&gt;struct sockaddr_in&lt;/code&gt; structure.</source>
          <target state="translated">&lt;code&gt;listen&lt;/code&gt; 、 &lt;code&gt;accept&lt;/code&gt; 、および &lt;code&gt;connect&lt;/code&gt; コールバックの &lt;code&gt;addr&lt;/code&gt; 引数は、現在使用されているプロトコルの適切なアドレス構造を参照します。現在、 &lt;code&gt;ei&lt;/code&gt; はIPv4のみをサポートしています。つまり、この時点で、 &lt;code&gt;addr&lt;/code&gt; は常に &lt;code&gt;struct sockaddr_in&lt;/code&gt; 構造体を指します。</target>
        </trans-unit>
        <trans-unit id="b97c48085c09e86337df00a4b0a18e9e9f983484" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apread/4&lt;/code&gt; function reads from a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#aread-3&quot;&gt;aread/3&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;apread/4&lt;/code&gt; 機能を組み合わせ、指定された位置から読み取り &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#aread-3&quot;&gt;aread/3&lt;/a&gt;&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="6e1ba830557bf0975fcfe18ee483f0f3bec5d278" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;apwrite/4&lt;/code&gt; function writes to a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#awrite-3&quot;&gt;awrite/3&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;apwrite/4&lt;/code&gt; 機能を組み合わせ、指定された位置に書き込む &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#awrite-3&quot;&gt;awrite/3&lt;/a&gt;&lt;/code&gt; 機能を。</target>
        </trans-unit>
        <trans-unit id="00d3c3634428cbc77b5aceea9f983ec649758967" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;assert&lt;/code&gt; macro can be used anywhere in a program, not just in unit tests, to check pre/postconditions and invariants. For example:</source>
          <target state="translated">&lt;code&gt;assert&lt;/code&gt; マクロは、事前/事後条件および不変条件をチェックするだけではなく、ユニットテストでは、プログラムで使用どこでもすることができます。例えば：</target>
        </trans-unit>
        <trans-unit id="108ceadd98496de12d8902f0058bac96f4aa9204" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_data&lt;/code&gt; is passed to the &lt;code&gt;do_perm&lt;/code&gt; function. We do not use a &lt;code&gt;async_free&lt;/code&gt; function (the last argument to &lt;code&gt;driver_async&lt;/code&gt;), it is only used if the task is cancelled programmatically.</source>
          <target state="translated">&lt;code&gt;async_data&lt;/code&gt; はに渡される &lt;code&gt;do_perm&lt;/code&gt; の機能。私たちが使用していない &lt;code&gt;async_free&lt;/code&gt; の機能（最後の引数 &lt;code&gt;driver_async&lt;/code&gt; を）、それが唯一のタスクがプログラムにキャンセルされた場合に使用されています。</target>
        </trans-unit>
        <trans-unit id="4cd04a38dd6fcdc2cd251ae665b899f10977e42f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;async_data&lt;/code&gt; is the argument to the functions &lt;code&gt;async_invoke&lt;/code&gt; and &lt;code&gt;async_free&lt;/code&gt;. It is typically a pointer to a structure containing a pipe or event that can be used to signal that the async operation completed. The data is to be freed in &lt;code&gt;async_free&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;async_data&lt;/code&gt; は、関数の引数である &lt;code&gt;async_invoke&lt;/code&gt; と &lt;code&gt;async_free&lt;/code&gt; 。これは通常、非同期操作が完了したことを通知するために使用できるパイプまたはイベントを含む構造へのポインターです。データは &lt;code&gt;async_free&lt;/code&gt; で解放されます。</target>
        </trans-unit>
        <trans-unit id="10c62ebaa7dc721acc77acfe725a467db8e1f296" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;atom()&lt;/code&gt; value is formed from the sftp error codes in the protocol-level responses as defined in &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#page-49&quot;&gt;draft-ietf-secsh-filexfer-13&lt;/a&gt;&lt;/code&gt; section 9.1. The codes are named as &lt;code&gt;SSH_FX_*&lt;/code&gt; which are transformed into lowercase of the star-part. E.g. the error code &lt;code&gt;SSH_FX_NO_SUCH_FILE&lt;/code&gt; will cause the &lt;code&gt;reason()&lt;/code&gt; to be &lt;code&gt;no_such_file&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;atom()&lt;/code&gt; で定義された値は、プロトコルレベルの応答にSFTPエラーコードから形成されている &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-secsh-filexfer-13#page-49&quot;&gt;draft-ietf-secsh-filexfer-13&lt;/a&gt;&lt;/code&gt; のセクション9.1。コードは &lt;code&gt;SSH_FX_*&lt;/code&gt; という名前で、スター部分の小文字に変換されます。たとえば、エラーコード &lt;code&gt;SSH_FX_NO_SUCH_FILE&lt;/code&gt; を使用すると、 &lt;code&gt;reason()&lt;/code&gt; は &lt;code&gt;no_such_file&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="61c5f2724e8a89f933cb80bf3b2eb6cc8b3b6977" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;avg1/0&lt;/code&gt;, &lt;code&gt;avg5/0&lt;/code&gt;, and &lt;code&gt;avg15/0&lt;/code&gt; functions can be used for retrieving system load values, and the &lt;code&gt;util/0&lt;/code&gt; and &lt;code&gt;util/1&lt;/code&gt; functions can be used for retrieving CPU utilization values.</source>
          <target state="translated">&lt;code&gt;avg1/0&lt;/code&gt; 、 &lt;code&gt;avg5/0&lt;/code&gt; 、及び &lt;code&gt;avg15/0&lt;/code&gt; 関数は、システムの負荷値を取得するために使用することができる、及び &lt;code&gt;util/0&lt;/code&gt; 及び &lt;code&gt;util/1&lt;/code&gt; の機能は、CPU使用率の値を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="a43d2dcf5e0e967eda5efa53bd70665dc5d59efa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;blog()&lt;/code&gt; functions can also be used for internally formatted logs, but in this case they must be called with binaries constructed with calls to &lt;code&gt;term_to_binary/1&lt;/code&gt;. There is no check to ensure this, it is entirely the responsibility of the caller. If these functions are called with binaries that do not correspond to Erlang terms, the &lt;code&gt;&lt;a href=&quot;#chunk-2&quot;&gt;chunk/2,3&lt;/a&gt;&lt;/code&gt; and automatic repair functions fail. The corresponding terms (not the binaries) are returned when &lt;code&gt;chunk/2,3&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;blog()&lt;/code&gt; 関数は、内部でもフォーマットされたログに使用することができますが、この場合には、彼らはへの呼び出しで構成バイナリで呼び出さなければなりません &lt;code&gt;term_to_binary/1&lt;/code&gt; 。これを確認するためのチェックはありません。それは完全に呼び出し元の責任です。これらの関数がErlangの用語に対応しないバイナリで呼び出されると、 &lt;code&gt;&lt;a href=&quot;#chunk-2&quot;&gt;chunk/2,3&lt;/a&gt;&lt;/code&gt; および自動修復関数は失敗します。対応する用語（バイナリではない）は、 &lt;code&gt;chunk/2,3&lt;/code&gt; が呼び出されたときに返されます。</target>
        </trans-unit>
        <trans-unit id="c6a9390501bbca6818af22e2d682ca803f60bdab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;c&lt;/code&gt; operand can encode any literal value, including NIL. The &lt;code&gt;n&lt;/code&gt; operand only works for NIL. If we have the generic instruction &lt;code&gt;{move,nil,{x,1}}&lt;/code&gt;, the loader will translate it to &lt;code&gt;move_nx 1&lt;/code&gt; because &lt;code&gt;move n x&lt;/code&gt; is more specific. &lt;code&gt;move_nx&lt;/code&gt; could be slightly faster or smaller (depending on the architecture), because the &lt;code&gt;[]&lt;/code&gt; is not stored explicitly as an operand.</source>
          <target state="translated">&lt;code&gt;c&lt;/code&gt; オペランドはNILを含む任意のリテラル値を符号化することができます。 &lt;code&gt;n&lt;/code&gt; 個のオペランドはNILのために働きます。汎用命令 &lt;code&gt;{move,nil,{x,1}}&lt;/code&gt; 場合、 &lt;code&gt;move n x&lt;/code&gt; はより具体的であるため、ローダーはそれを &lt;code&gt;move_nx 1&lt;/code&gt; 変換します。 &lt;code&gt;[]&lt;/code&gt; はオペランドとして明示的に格納されていないため、 &lt;code&gt;move_nx&lt;/code&gt; は（アーキテクチャに応じて）わずかに高速または小型になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="9287c794d6838f0d9c560c6cf16a390d870948c9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call()&lt;/code&gt; function only returns if the applied function successfully returned without raising any uncaught exceptions, the operation did not time out, and no failures occurred. In all other cases an exception is raised. The following exceptions, listed by exception class, can currently be raised by &lt;code&gt;erpc:call()&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;call()&lt;/code&gt; 関数は、のみに適用機能が正常にキャッチされない例外を上げずに返された場合、操作はタイムアウトしませんでしたし、何の障害が発生していないが返されます。他のすべての場合、例外が発生します。例外クラス &lt;code&gt;erpc:call()&lt;/code&gt; にリストされている次の例外は、現在erpc：call（）によって発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="725661331a506e2dce5360076476c39f4c67eeff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call&lt;/code&gt; operation for this specific node raised an exception of class &lt;code&gt;Class&lt;/code&gt; with exception reason &lt;code&gt;ExceptionReason&lt;/code&gt;. These corresponds the the exceptions that &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;erpc:call/5&lt;/a&gt;&lt;/code&gt; can raise.</source>
          <target state="translated">この特定のノードの &lt;code&gt;call&lt;/code&gt; 操作により、例外理由 &lt;code&gt;ExceptionReason&lt;/code&gt; でクラス &lt;code&gt;Class&lt;/code&gt; の例外が発生しました。これらは、 &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;erpc:call/5&lt;/a&gt;&lt;/code&gt; が発生する可能性のある例外に対応しています。</target>
        </trans-unit>
        <trans-unit id="3190218027bddfcb10c66d83569c4e030fe8e281" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call&lt;/code&gt; operation for this specific node returned &lt;code&gt;Result&lt;/code&gt;.</source>
          <target state="translated">この特定のノードの &lt;code&gt;call&lt;/code&gt; 操作は &lt;code&gt;Result&lt;/code&gt; 返しました。</target>
        </trans-unit>
        <trans-unit id="20c4b6b511dd79e662208e902c57d062a8c73aa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;call_ext&lt;/code&gt; instruction can be used to call functions written in Erlang as well as BIFs (or more properly called SNIFs). The &lt;code&gt;u$is_bif&lt;/code&gt; constraint will match if the operand refers to a BIF (that is, if it is listed in the file &lt;code&gt;bif.tab&lt;/code&gt;). Note that &lt;code&gt;u$is_bif&lt;/code&gt; should only be applied to operands that are known to contain an index to the import table chunk in the BEAM file (such operands have the type &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;e&lt;/code&gt; in the corresponding specific instruction). If applied to other &lt;code&gt;u&lt;/code&gt; operands, it will at best return a nonsense result.</source>
          <target state="translated">&lt;code&gt;call_ext&lt;/code&gt; 命令はErlangで書かれた機能ならびに（適切SNIFs呼ば以上）のBIFを呼び出すために使用することができます。 &lt;code&gt;u$is_bif&lt;/code&gt; オペランドが（それがファイルにリストされている場合、あるBIFを参照している場合に制約が一致します &lt;code&gt;bif.tab&lt;/code&gt; ）。 &lt;code&gt;u$is_bif&lt;/code&gt; は、BEAMファイルのインポートテーブルチャンクへのインデックスを含むことがわかっているオペランドにのみ適用する必要があることに注意してください（このようなオペランドは、対応する特定の命令でタイプ &lt;code&gt;b&lt;/code&gt; または &lt;code&gt;e&lt;/code&gt; を持ちます）。他の &lt;code&gt;u&lt;/code&gt; オペランドに適用すると、せいぜい意味のない結果が返されます。</target>
        </trans-unit>
        <trans-unit id="37d74f76daa8e51f123951ddaf373680517fc012" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;channel_callback&lt;/code&gt; is the module that implements the &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; (replaces ssh_daemon_channel) behaviour in the daemon. See the section &lt;code&gt;&lt;a href=&quot;using_ssh#usersguide_creating_a_subsystem&quot;&gt;Creating a Subsystem&lt;/a&gt;&lt;/code&gt; in the User's Guide for more information and an example.</source>
          <target state="translated">&lt;code&gt;channel_callback&lt;/code&gt; は実装モジュールである &lt;code&gt;&lt;a href=&quot;ssh_server_channel&quot;&gt;ssh_server_channel&lt;/a&gt;&lt;/code&gt; デーモンに（置き換えssh_daemon_channel）の動作を。詳細と例については、 『ユーザーズガイド』の「 &lt;code&gt;&lt;a href=&quot;using_ssh#usersguide_creating_a_subsystem&quot;&gt;Creating a Subsystem&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b8493f2b264f76e709a289fe048f59895e05cdc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;chmod&lt;/code&gt; above makes the &lt;code&gt;.erlang.cookie&lt;/code&gt; file accessible only by the owner of the file. This is a requirement.</source>
          <target state="translated">上記の &lt;code&gt;chmod&lt;/code&gt; は、 &lt;code&gt;.erlang.cookie&lt;/code&gt; ファイルにファイルの所有者のみがアクセスできるようにします。これは要件です。</target>
        </trans-unit>
        <trans-unit id="067ed8257f3ed48d1dd77d1c82e5f73c03791be2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;client_directory&lt;/code&gt; in the directory structure of the master nodes must be specified.</source>
          <target state="translated">マスターノードのディレクトリ構造の &lt;code&gt;client_directory&lt;/code&gt; を指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="97ad2677bec8a2ec1b2eaf275491aa26823e6cdf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;clients&lt;/code&gt; directory is to have one subdirectory per supported client node. The name of each client directory is to be the name of the corresponding client node. As a minimum, each client directory is to contain the &lt;code&gt;bin&lt;/code&gt; and &lt;code&gt;releases&lt;/code&gt; subdirectories. These directories are used to store information about installed releases and to appoint the current release to the client. The &lt;code&gt;$ROOT&lt;/code&gt; directory thus contains the following:</source>
          <target state="translated">&lt;code&gt;clients&lt;/code&gt; ディレクトリには、サポートされているクライアントノードごとに1つのサブディレクトリを持つことです。各クライアントディレクトリの名前は、対応するクライアントノードの名前になります。少なくとも、各クライアントディレクトリには &lt;code&gt;bin&lt;/code&gt; および &lt;code&gt;releases&lt;/code&gt; サブディレクトリが含まれます。これらのディレクトリは、インストールされているリリースに関する情報を格納し、クライアントに現在のリリースを指定するために使用されます。したがって、 &lt;code&gt;$ROOT&lt;/code&gt; ディレクトリには以下が含まれます。</target>
        </trans-unit>
        <trans-unit id="fef0ac1b98cce64ffd1d82b4509565a3e18b84ea" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;code_change&lt;/code&gt; method must also be implemented.</source>
          <target state="translated">&lt;code&gt;code_change&lt;/code&gt; の方法も実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="dfba9577e3cba70bb212c1548338d8d33c8f09a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;combined&lt;/code&gt; format is one line looking like this: &lt;code&gt;remotehost rfc931 authuser [date] &quot;request&quot; status bytes &quot;referer&quot; &quot;user_agent&quot;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;combined&lt;/code&gt; 形式は次のように見て一列である： &lt;code&gt;remotehost rfc931 authuser [date] &quot;request&quot; status bytes &quot;referer&quot; &quot;user_agent&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="630925a2786b7b59d8f4c833942afd22d020f670" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compatibility_only_hash()&lt;/code&gt; algorithms are recommended only for compatibility with existing applications.</source>
          <target state="translated">&lt;code&gt;compatibility_only_hash()&lt;/code&gt; アルゴリズムは、既存のアプリケーションとの互換性のために推奨されています。</target>
        </trans-unit>
        <trans-unit id="1b60f349fe6a82d8f3ab2d525a727ef964290939" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;complex&lt;/code&gt; process does the following:</source>
          <target state="translated">&lt;code&gt;complex&lt;/code&gt; プロセスは、以下のことを実行します。</target>
        </trans-unit>
        <trans-unit id="ceca332ed5fece3a22bbc2b65250bbdfb9575097" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;complex&lt;/code&gt; process performs the following:</source>
          <target state="translated">&lt;code&gt;complex&lt;/code&gt; プロセスは、以下を実行します：</target>
        </trans-unit>
        <trans-unit id="0e88a24bce8d7b2a409cde6bc42dab540256c0b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compressed&lt;/code&gt; and &lt;code&gt;cooked&lt;/code&gt; flags are invalid when passing a file descriptor with &lt;code&gt;{file,Fd}&lt;/code&gt;. The file is assumed to have been opened with the appropriate flags.</source>
          <target state="translated">&lt;code&gt;compressed&lt;/code&gt; 及び &lt;code&gt;cooked&lt;/code&gt; のファイル記述子を通過する際にフラグが無効である &lt;code&gt;{file,Fd}&lt;/code&gt; 。ファイルは適切なフラグで開かれていると見なされます。</target>
        </trans-unit>
        <trans-unit id="45da19705e860c5554e30ca96214a35258f720dc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;compressed&lt;/code&gt; and &lt;code&gt;cooked&lt;/code&gt; flags are invalid when passing a file descriptor with &lt;code&gt;{file,Fd}&lt;/code&gt;. The file must already be opened with the appropriate flags.</source>
          <target state="translated">&lt;code&gt;compressed&lt;/code&gt; 及び &lt;code&gt;cooked&lt;/code&gt; のファイル記述子を通過する際にフラグが無効である &lt;code&gt;{file,Fd}&lt;/code&gt; 。ファイルは、適切なフラグを使用して既に開かれている必要があります。</target>
        </trans-unit>
        <trans-unit id="3748b6dda37726d1886cb8a28dacde2fa7798fe9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;config&lt;/code&gt; macro is defined in &lt;code&gt;ct.hrl&lt;/code&gt;. This macro is to be used to retrieve information from the &lt;code&gt;Config&lt;/code&gt; variable sent to all test cases. It is used with two arguments; the first is the name of the configuration variable to retrieve, the second is the &lt;code&gt;Config&lt;/code&gt; variable supplied to the test case.</source>
          <target state="translated">&lt;code&gt;config&lt;/code&gt; マクロはで定義され &lt;code&gt;ct.hrl&lt;/code&gt; 。このマクロは、すべてのテストケースに送信される &lt;code&gt;Config&lt;/code&gt; 変数から情報を取得するために使用されます。2つの引数とともに使用されます。1つ目は取得する構成変数の名前、2つ目はテストケースに提供される &lt;code&gt;Config&lt;/code&gt; 変数です。</target>
        </trans-unit>
        <trans-unit id="3402fd646c2b066512d58aeec8dd8cb2dfa256aa" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configure&lt;/code&gt; script will issue a warning when a default value is used. When a variable has been set, no warning will be issued.</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; のデフォルト値が使用されている場合、スクリプトは警告を発行します。変数が設定されている場合、警告は発行されません。</target>
        </trans-unit>
        <trans-unit id="6288c90b6c5e2f3d2b468cb02b51d6affc24bf92" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;configure&lt;/code&gt; scripts are generated by invoking &lt;code&gt;./otp_build autoconf&lt;/code&gt; in the &lt;code&gt;$ERL_TOP&lt;/code&gt; directory. The &lt;code&gt;configure&lt;/code&gt; scripts also have to be regenerated when a &lt;code&gt;configure.in&lt;/code&gt; or &lt;code&gt;aclocal.m4&lt;/code&gt; file has been modified. Note that when checking out a branch a &lt;code&gt;configure.in&lt;/code&gt; or &lt;code&gt;aclocal.m4&lt;/code&gt; file may change content, and you may therefore have to regenerate the &lt;code&gt;configure&lt;/code&gt; scripts when checking out a branch. Regenerated &lt;code&gt;configure&lt;/code&gt; scripts imply that you have to run &lt;code&gt;configure&lt;/code&gt; and build again.</source>
          <target state="translated">&lt;code&gt;configure&lt;/code&gt; スクリプトは、呼び出すことによって生成された &lt;code&gt;./otp_build autoconf&lt;/code&gt; で &lt;code&gt;$ERL_TOP&lt;/code&gt; ディレクトリ。 &lt;code&gt;configure&lt;/code&gt; スクリプトは、ときにも再生成する必要が &lt;code&gt;configure.in&lt;/code&gt; か &lt;code&gt;aclocal.m4&lt;/code&gt; ファイルが変更されました。ブランチをチェックアウトするとき、 &lt;code&gt;configure.in&lt;/code&gt; または &lt;code&gt;aclocal.m4&lt;/code&gt; ファイルはコンテンツを変更する可能性があるため、ブランチをチェックアウトするときに &lt;code&gt;configure&lt;/code&gt; スクリプトを再生成する必要があることに注意してください。再生成された &lt;code&gt;configure&lt;/code&gt; スクリプトは、 &lt;code&gt;configure&lt;/code&gt; を実行して再度ビルドする必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="208c163b5d9b18adfd658c53d3afa3ceb105c168" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;connect&lt;/code&gt; function looks a bit different too. We connect using the asynchronous &lt;code&gt;PQconnectStart&lt;/code&gt; function. After the connection is started, we retrieve the socket for the connection with &lt;code&gt;PQsocket&lt;/code&gt;. This socket is used with the &lt;code&gt;driver_select&lt;/code&gt; function to wait for connection. When the socket is ready for input or for output, the &lt;code&gt;ready_io&lt;/code&gt; function is called.</source>
          <target state="translated">&lt;code&gt;connect&lt;/code&gt; 機能は、あまりにも少し異なって見えます。非同期の &lt;code&gt;PQconnectStart&lt;/code&gt; 関数を使用して接続します。接続が開始され &lt;code&gt;PQsocket&lt;/code&gt; 、PQsocketを使用して接続用のソケットを取得します。このソケットは、 &lt;code&gt;driver_select&lt;/code&gt; 関数と共に使用され、接続を待機します。ソケットの入力または出力の準備ができると、 &lt;code&gt;ready_io&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="72241940e6969f3882cb2063d805e933d9f13162" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;console&lt;/code&gt; option is &lt;strong&gt;not&lt;/strong&gt; intended for production. It is &lt;strong&gt;only&lt;/strong&gt; a convenient way to debug Erlang services during development.</source>
          <target state="translated">&lt;code&gt;console&lt;/code&gt; オプションはされ&lt;strong&gt;ない&lt;/strong&gt;生産のためのもの。これは、開発中にErlangサービスをデバッグするための便利な方法に&lt;strong&gt;すぎません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="09d03cd7b2afda946d29b4dfa4871ca45c957a3b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;content&lt;/code&gt; field of the top element is a list of records that shows the structure and data of the document. If it is a simple document like:</source>
          <target state="translated">先頭の要素の &lt;code&gt;content&lt;/code&gt; フィールドは、ドキュメントの構造とデータを示すレコードのリストです。次のような単純なドキュメントの場合：</target>
        </trans-unit>
        <trans-unit id="838c0fd05d2d1deb4094b06de0e616a5af7c6e8e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;continue&lt;/code&gt; option inhibits the call to &lt;code&gt;trace(stop)&lt;/code&gt; and leaves it up to the caller to stop tracing at a suitable time.</source>
          <target state="translated">&lt;code&gt;continue&lt;/code&gt; オプションがへの呼び出し阻害 &lt;code&gt;trace(stop)&lt;/code&gt; 適切な時間にトレースを停止すると、発信者への葉、それをアップします。</target>
        </trans-unit>
        <trans-unit id="5e5e4cf83680d9fc0726d1fa4e444a1ac9be072e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;control&lt;/code&gt; entry is called from the emulator when the Erlang code calls &lt;code&gt;port_control/3&lt;/code&gt;, to do the actual work. We have defined a simple set of commands: &lt;code&gt;connect&lt;/code&gt; to log in to the database, &lt;code&gt;disconnect&lt;/code&gt; to log out, and &lt;code&gt;select&lt;/code&gt; to send a SQL-query and get the result. All results are returned through &lt;code&gt;rbuf&lt;/code&gt;. The library &lt;code&gt;ei&lt;/code&gt; in &lt;code&gt;erl_interface&lt;/code&gt; is used to encode data in binary term format. The result is returned to the emulator as binary terms, so &lt;code&gt;binary_to_term&lt;/code&gt; is called in Erlang to convert the result to term form.</source>
          <target state="translated">&lt;code&gt;control&lt;/code&gt; Erlangのコードを呼び出したときにエントリはエミュレータから呼び出され &lt;code&gt;port_control/3&lt;/code&gt; を実際の作業を行うには、。データベースにログイン &lt;code&gt;connect&lt;/code&gt; し、ログアウトするために &lt;code&gt;disconnect&lt;/code&gt; し、SQLクエリを送信して結果を取得することを &lt;code&gt;select&lt;/code&gt; する、単純なコマンドセットを定義しました。すべての結果は &lt;code&gt;rbuf&lt;/code&gt; を介して返されます。 &lt;code&gt;erl_interface&lt;/code&gt; のライブラリ &lt;code&gt;ei&lt;/code&gt; を使用して、データをバイナリ項形式でエンコードします。結果はバイナリ用語としてエミュレータに返されるため、Erlangで &lt;code&gt;binary_to_term&lt;/code&gt; が呼び出され、結果が用語形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="26bab11093554a028ef86c3afb6f974cfc496b9e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;convert_to_c&lt;/code&gt; function is the same as before, but here it is used as a fun:</source>
          <target state="translated">&lt;code&gt;convert_to_c&lt;/code&gt; 機能は以前と同じですが、ここではそれが楽しみとして使用されます。</target>
        </trans-unit>
        <trans-unit id="77c0725ecb5968616addeb9bf220dfefe059032f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cprof&lt;/code&gt; module is used to profile a program to find out how many times different functions are called. Breakpoints similar to local call trace, but containing a counter, are used to minimise runtime performance impact.</source>
          <target state="translated">&lt;code&gt;cprof&lt;/code&gt; のモジュールは異なる機能が呼び出された回数を調べるためにプログラムをプロファイリングするために使用されます。ローカルコールトレースに似ていますが、カウンターを含むブレークポイントを使用して、実行時のパフォーマンスへの影響を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="9716455d32bb78ba694b642a2f677996c5c94a39" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; mode option is applied to the generated stream of bytes prior to sending them to the SFTP server. This is intended for encryption but can be used for other purposes.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モードオプションは、SFTPサーバに送信する前にバイトの生成されたストリームに適用されます。これは暗号化を目的としていますが、他の目的にも使用できます。</target>
        </trans-unit>
        <trans-unit id="fae5817bafe1b274a413d2d8be87f3d34ec23f9a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto&lt;/code&gt; mode option is explained in the data types section above, see &lt;code&gt;&lt;a href=&quot;#Crypto%20operations%20for%20open_tar&quot;&gt;Crypto operations for open_tar&lt;/a&gt;&lt;/code&gt;. Encryption is assumed if the &lt;code&gt;Mode&lt;/code&gt; contains &lt;code&gt;write&lt;/code&gt;, and decryption if the &lt;code&gt;Mode&lt;/code&gt; contains &lt;code&gt;read&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; モードオプションは上記のデータ型のセクションで説明され、参照 &lt;code&gt;&lt;a href=&quot;#Crypto%20operations%20for%20open_tar&quot;&gt;Crypto operations for open_tar&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;Mode&lt;/code&gt; に &lt;code&gt;write&lt;/code&gt; が含まれている場合は暗号化が想定され、 &lt;code&gt;Mode&lt;/code&gt; に &lt;code&gt;read&lt;/code&gt; が含まれている場合は復号化が想定されます。</target>
        </trans-unit>
        <trans-unit id="e5cee4c61a0a375534a2fba35a2573413a78af60" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto_init&lt;/code&gt; initialies an internal cipher state, and one or more calls of &lt;code&gt;crypto_update&lt;/code&gt; does the acual encryption or decryption. Note that AEAD ciphers can't be handled this way due to their nature.</source>
          <target state="translated">&lt;code&gt;crypto_init&lt;/code&gt; は、内部暗号状態をinitialies、との一回の以上のコール &lt;code&gt;crypto_update&lt;/code&gt; acual暗号化または復号化を行います。AEAD暗号は、その性質上、この方法では処理できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7b046fe6dab519074b82c93250ff16e0a704aba7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;crypto_one_time_aead&lt;/code&gt; functions are for the ciphers of mode &lt;code&gt;ccm&lt;/code&gt; or &lt;code&gt;gcm&lt;/code&gt;, and for the cipher &lt;code&gt;chacha20-poly1305&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;crypto_one_time_aead&lt;/code&gt; 機能は、モードの暗号のためのものである &lt;code&gt;ccm&lt;/code&gt; または &lt;code&gt;gcm&lt;/code&gt; 、および暗号用 &lt;code&gt;chacha20-poly1305&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f1ea90a542fdde5c9bfa793410f97e64b38fc90e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cryptolib_padding&lt;/code&gt; are paddings that may be present in the underlying cryptolib linked to the Erlang/OTP crypto app.</source>
          <target state="translated">&lt;code&gt;cryptolib_padding&lt;/code&gt; はアーラン/ OTP暗号アプリケーションにリンクされている下地cryptolib中に存在してもよいパディングです。</target>
        </trans-unit>
        <trans-unit id="f05085fc1befe3aa6ba53fe6204755e8c7f0ad8b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ct_hooks&lt;/code&gt; statement must look as follows:</source>
          <target state="translated">&lt;code&gt;ct_hooks&lt;/code&gt; のステートメントは次のように見える必要があります。</target>
        </trans-unit>
        <trans-unit id="195e3e1b4f16da2ed99752167d29e762d1e2035f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ct_run&lt;/code&gt; program is automatically installed with Erlang/OTP and the &lt;code&gt;Common Test&lt;/code&gt; application (for more information, see section &lt;code&gt;&lt;a href=&quot;install_chapter&quot;&gt;Installation&lt;/a&gt;&lt;/code&gt; in the User's Guide). The program accepts different start flags. Some flags trigger &lt;code&gt;ct_run&lt;/code&gt; to start &lt;code&gt;Common Test&lt;/code&gt; and pass on data to it. Some flags start an Erlang node prepared for running &lt;code&gt;Common Test&lt;/code&gt; in a particular mode.</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; のプログラムが自動的にアーラン/ OTPと一緒にインストールされた &lt;code&gt;Common Test&lt;/code&gt; （セクションの詳細については、アプリケーション &lt;code&gt;&lt;a href=&quot;install_chapter&quot;&gt;Installation&lt;/a&gt;&lt;/code&gt; ユーザーズガイドを）。プログラムは異なる開始フラグを受け入れます。一部のフラグは、 &lt;code&gt;ct_run&lt;/code&gt; をトリガーして &lt;code&gt;Common Test&lt;/code&gt; を開始し、それにデータを渡します。一部のフラグは、特定のモードで &lt;code&gt;Common Test&lt;/code&gt; を実行するために準備されたErlangノードを開始します。</target>
        </trans-unit>
        <trans-unit id="0bead0eeaff46c7e466e0712fc0054654e293c43" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ct_run&lt;/code&gt; program sets the exit status before shutting down. The following values are defined:</source>
          <target state="translated">&lt;code&gt;ct_run&lt;/code&gt; のプログラムがシャットダウンする前に終了ステータスを設定します。次の値が定義されています。</target>
        </trans-unit>
        <trans-unit id="5e688bf44ef358ec92d20ce42ff6bf380d1fb9a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;cth_conn_log&lt;/code&gt; hook performs unformatted logging of Telnet data to a separate text file. All Telnet communication is captured and printed, including any data sent from the server. The link to this text file is located at the top of the test case HTML log.</source>
          <target state="translated">&lt;code&gt;cth_conn_log&lt;/code&gt; 別のテキストファイルへのTelnetデータのフックを行い、未フォーマットのログ。サーバーから送信されたデータを含むすべてのTelnet通信がキャプチャされ、印刷されます。このテキストファイルへのリンクは、テストケースのHTMLログの上部にあります。</target>
        </trans-unit>
        <trans-unit id="a68179b6708f261780e3204a93ccf67ebff3b412" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg&lt;/code&gt; module is primarily targeted towards tracing through the &lt;code&gt;erlang:trace/3&lt;/code&gt; function. It is sometimes desired to trace messages in a more delicate way, which can be done with the help of the &lt;code&gt;seq_trace&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; モジュールは、主にを通じてトレースを対象として &lt;code&gt;erlang:trace/3&lt;/code&gt; 機能。 &lt;code&gt;seq_trace&lt;/code&gt; モジュールの助けを借りて行うことができるより繊細な方法でメッセージをトレースすることが時々望まれます。</target>
        </trans-unit>
        <trans-unit id="4ec06ab24b2bef8a81af6b12d4353768a1844399" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg&lt;/code&gt; server keeps a list of nodes where tracing should be performed. Whenever a &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; call or a &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; call is made, it is executed for all nodes in this list including the local node (except for &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; with a specific &lt;code&gt;pid()&lt;/code&gt; or &lt;code&gt;port()&lt;/code&gt; as first argument, in which case the command is executed only on the node where the designated process or port resides).</source>
          <target state="translated">&lt;code&gt;dbg&lt;/code&gt; サーバーは、トレースが実行されるべきノードのリストを保持します。たび &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; コール又は &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; 呼び出しが行われ、それは、ローカル以外のノード（を含む、このリスト内のすべてのノードに対して実行される &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; 特定部と &lt;code&gt;pid()&lt;/code&gt; または &lt;code&gt;port()&lt;/code&gt; の最初の引数として、コマンドが指定されたプロセスまたはポートが存在するノードでのみ実行される場合）。</target>
        </trans-unit>
        <trans-unit id="c217008a9ef77e9f7c9c82997e3edae1e2b0a1c7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dbg&lt;/code&gt; variants of match specifications have an imperative approach to the match specification body, the ETS dialect has not. The fun body for &lt;code&gt;ets:fun2ms/1&lt;/code&gt; returns the result without side effects. As matching (&lt;code&gt;=&lt;/code&gt;) in the body of the match specifications is not allowed (for performance reasons) the only thing left, more or less, is term construction.</source>
          <target state="translated">マッチ仕様の &lt;code&gt;dbg&lt;/code&gt; バリアントは、マッチ仕様の本体に対して必須のアプローチを持っていますが、ETS方言は持っていません。 &lt;code&gt;ets:fun2ms/1&lt;/code&gt; のfun body は、副作用なしで結果を返します。（パフォーマンス上の理由から）一致指定の本体での一致（ &lt;code&gt;=&lt;/code&gt; ）は許可されないため、残された唯一の事柄は、多かれ少なかれ、用語構築です。</target>
        </trans-unit>
        <trans-unit id="8b1d45e514e2b4bb0f72c0e576b456b901110516" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug_info&lt;/code&gt; option ensures that the BEAM file contains debug information, which makes it possible to find unused local functions.</source>
          <target state="translated">&lt;code&gt;debug_info&lt;/code&gt; BEAMファイルが使用されていない地元の機能を発見することが可能となり、デバッグ情報が含まれていることのオプションを保証します。</target>
        </trans-unit>
        <trans-unit id="f272f87848e9520c4164ada69cea273706e63692" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;debug_info&lt;/code&gt; parameter controls whether the debug information in the beam file should be kept (&lt;code&gt;keep&lt;/code&gt;) or stripped &lt;code&gt;strip&lt;/code&gt; when the file is copied to the target system.</source>
          <target state="translated">&lt;code&gt;debug_info&lt;/code&gt; ビーム・ファイル内のデバッグ情報（保たれるべきであるかどうかのパラメータを制御 &lt;code&gt;keep&lt;/code&gt; ）または剥離 &lt;code&gt;strip&lt;/code&gt; ファイルがターゲット・システムにコピーされたとき。</target>
        </trans-unit>
        <trans-unit id="6fb823bf619fb63ef67310a79ad7a561ee4d0a34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; function does not delete the table from the database since unloading an MIB does not necessarily mean that the table should be destroyed.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 機能は、必ずしもテーブルが破壊されなければならないことを意味するものではないMIBをアンロードするためのデータベースからテーブルを削除しません。</target>
        </trans-unit>
        <trans-unit id="9bb6d436299249f5caa30b07b29030812a609536" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; function does not delete the variable from the database.</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 機能は、データベースから変数を削除しません。</target>
        </trans-unit>
        <trans-unit id="7056e5309dbe8cb35a67254e724ea1561fd3590e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;delete&lt;/code&gt; operation is considered successful if the element was not present in the table. Hence all attempts to check that the element is present in the Ets/Mnesia table before deletion are unnecessary. Here follows an example for Ets tables:</source>
          <target state="translated">&lt;code&gt;delete&lt;/code&gt; 要素がテーブルに存在していなかった場合は、操作が成功したとみなされます。したがって、削除する前に要素がEts / Mnesiaテーブルに存在することを確認するすべての試みは不要です。以下はEtsテーブルの例です：</target>
        </trans-unit>
        <trans-unit id="9843826cc8a81d332dd5ca58dc2e4d273cfa0a51" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dh_der&lt;/code&gt; option is not supported by TLS 1.3. Use the &lt;code&gt;supported_groups&lt;/code&gt; option instead.</source>
          <target state="translated">&lt;code&gt;dh_der&lt;/code&gt; のオプションは、TLS 1.3でサポートされていません。代わりに &lt;code&gt;supported_groups&lt;/code&gt; オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="2d506578ec68dd2a9fa7f8cceed364aba6b39394" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dh_file&lt;/code&gt; option is not supported by TLS 1.3. Use the &lt;code&gt;supported_groups&lt;/code&gt; option instead.</source>
          <target state="translated">&lt;code&gt;dh_file&lt;/code&gt; のオプションは、TLS 1.3でサポートされていません。代わりに &lt;code&gt;supported_groups&lt;/code&gt; オプションを使用してください。</target>
        </trans-unit>
        <trans-unit id="3ec29833516e95ca8c52bcd06ca0329b6a9912b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disc_copies&lt;/code&gt; tables are stored on disk with &lt;code&gt;.DCL&lt;/code&gt; and &lt;code&gt;.DCD&lt;/code&gt; files, which are standard &lt;code&gt;disk_log&lt;/code&gt; files.</source>
          <target state="translated">&lt;code&gt;disc_copies&lt;/code&gt; のテーブルが持つディスクに格納され &lt;code&gt;.DCL&lt;/code&gt; と &lt;code&gt;.DCD&lt;/code&gt; 標準装備されたファイル、 &lt;code&gt;disk_log&lt;/code&gt; のファイル。</target>
        </trans-unit>
        <trans-unit id="0566aa9127b7a16298ed02e87fbca3df443437c0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;disk_log&lt;/code&gt; module does not report errors to the &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; module. It is up to the caller to decide whether to employ the error logger. Function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; can be used to produce readable messages from error replies. However, information events are sent to the error logger in two situations, namely when a log is repaired, or when a file is missing while reading chunks.</source>
          <target state="translated">&lt;code&gt;disk_log&lt;/code&gt; モジュールは、にエラーを報告しません &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; のモジュール。エラーロガーを使用するかどうかは、呼び出し元が決定します。関数 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; を使用して、エラー応答から読み取り可能なメッセージを生成できます。ただし、ログが修復されたとき、またはチャンクの読み取り中にファイルが欠落したときの2つの状況で、情報イベントがエラーロガーに送信されます。</target>
        </trans-unit>
        <trans-unit id="cfcfef3897d14b434ad165428853c39b5f2890f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;dist_util:handshake_we_started/1&lt;/code&gt; and &lt;code&gt;dist_util:handshake_other_started/1&lt;/code&gt; functions takes a &lt;code&gt;#hs_data{}&lt;/code&gt; record as argument. There are quite a lot of fields in this record that you need to set. The record is defined in &lt;code&gt;kernel/include/dist_util.hrl&lt;/code&gt;. Not documented fields should not be set, i.e., should be left as &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;dist_util:handshake_we_started/1&lt;/code&gt; と &lt;code&gt;dist_util:handshake_other_started/1&lt;/code&gt; の機能がかかり &lt;code&gt;#hs_data{}&lt;/code&gt; 引数としてレコード。このレコードには、設定が必要なフィールドがかなりあります。レコードは &lt;code&gt;kernel/include/dist_util.hrl&lt;/code&gt; で定義されています。文書化されていないフィールドは設定しないでください。つまり、 &lt;code&gt;undefined&lt;/code&gt; のままにしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="83c7e0ed34c372831d8c8f2866d0a4d8b8af47d2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;do_select&lt;/code&gt; function initiates a select, and returns if there is no immediate error. The result is returned when &lt;code&gt;ready_io&lt;/code&gt; is called.</source>
          <target state="translated">&lt;code&gt;do_select&lt;/code&gt; の即時エラーがない場合、この関数は、選択、およびリターンを開始します。結果は、 &lt;code&gt;ready_io&lt;/code&gt; が呼び出されたときに返されます。</target>
        </trans-unit>
        <trans-unit id="9e898d68f399dcaad71bedb473b4e1db27a86822" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;driver_entry&lt;/code&gt; structure is a C struct that all Erlang drivers define. It contains entry points for the Erlang driver, which are called by the Erlang emulator when Erlang code accesses the driver.</source>
          <target state="translated">&lt;code&gt;driver_entry&lt;/code&gt; の構造は、全てのアーランドライバが定義するC言語の構造体です。これには、ErlangコードがドライバーにアクセスするときにErlangエミュレーターによって呼び出されるErlangドライバーのエントリーポイントが含まれています。</target>
        </trans-unit>
        <trans-unit id="e2f343471e0cd9e732eb94fa594ad01445d525d6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;entity-Body&lt;/code&gt; as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;, for example, data sent from a CGI script using the POST method.</source>
          <target state="translated">&lt;code&gt;entity-Body&lt;/code&gt; において定義される &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; 、例えば、データは、POSTメソッドを使用してCGIスクリプトから送信されました。</target>
        </trans-unit>
        <trans-unit id="8485e195c6ca973415a83d30d66c767c905bacbd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;epmd&lt;/code&gt; daemon accepts messages from both the local host and remote hosts. However, only the query commands are answered (and acted upon) if the query comes from a remote host. It is always an error to try to register a node name if the client is not a process on the same host as the &lt;code&gt;epmd&lt;/code&gt; instance is running on. Such requests are considered hostile and the connection is closed immediately.</source>
          <target state="translated">&lt;code&gt;epmd&lt;/code&gt; デーモンは、ローカルホストとリモートホストの両方からのメッセージを受け付けます。ただし、クエリがリモートホストからのものである場合は、クエリコマンドのみが応答（および処理）されます。クライアントが &lt;code&gt;epmd&lt;/code&gt; インスタンスが実行されているのと同じホスト上のプロセスでない場合、ノード名を登録しようとすると常にエラーになります。このような要求は敵対的であると見なされ、接続はすぐに閉じられます。</target>
        </trans-unit>
        <trans-unit id="1a8cdcc41303bad80d1836231fd657575e8b7da9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl&lt;/code&gt; program starts an Erlang runtime system. The exact details (for example, whether &lt;code&gt;erl&lt;/code&gt; is a script or a program and which other programs it calls) are system-dependent.</source>
          <target state="translated">&lt;code&gt;erl&lt;/code&gt; プログラムは、Erlangのランタイムシステムを起動します。正確な詳細（たとえば、 &lt;code&gt;erl&lt;/code&gt; がスクリプトまたはプログラムのどちらであるか、およびそれが呼び出す他のプログラム）はシステムに依存します。</target>
        </trans-unit>
        <trans-unit id="23033c746a70348dcd7ee413398f764a041fafc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl_boot_server&lt;/code&gt; can read regular files and files in archives. See &lt;code&gt;&lt;a href=&quot;code&quot;&gt;code(3)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;erl_prim_loader(3)&lt;/code&gt; in ERTS.</source>
          <target state="translated">&lt;code&gt;erl_boot_server&lt;/code&gt; は、アーカイブ内の通常のファイルとファイルを読み込むことができます。 &lt;code&gt;erl_prim_loader(3)&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;code&quot;&gt;code(3)&lt;/a&gt;&lt;/code&gt; およびerl_prim_loader（3）を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc1db4ac366acb55e5dbd23b870fee87dcf6984d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erl_prim_loader&lt;/code&gt; module interprets the following command-line flags:</source>
          <target state="translated">&lt;code&gt;erl_prim_loader&lt;/code&gt; のモジュールは、次のコマンドラインフラグを解釈します。</target>
        </trans-unit>
        <trans-unit id="a9f75e2ebb8bacf1be148858ac754ee91aff0b2c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlang:processes/1&lt;/code&gt; and &lt;code&gt;erlang:port/1&lt;/code&gt; BIFs iterate over the tables and return corresponding identifiers. These BIF should return a consistent snapshot of the table content during some time when the BIF is executing. In order to implement this we use locking in a strange way. We use an &quot;inverted rwlock&quot;.</source>
          <target state="translated">&lt;code&gt;erlang:processes/1&lt;/code&gt; と &lt;code&gt;erlang:port/1&lt;/code&gt; のBIFは、テーブルを反復処理し、対応する識別子を返します。これらのBIFは、BIFの実行中に、テーブルコンテンツの一貫したスナップショットを返す必要があります。これを実装するために、奇妙な方法でロックを使用します。「逆rwlock」を使用します。</target>
        </trans-unit>
        <trans-unit id="9c8443a325361f346c54c5b5b79ecfd176dc3cc8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlang:timestamp()&lt;/code&gt; BIF is equivalent to:</source>
          <target state="translated">&lt;code&gt;erlang:timestamp()&lt;/code&gt; BIFは同等です：</target>
        </trans-unit>
        <trans-unit id="674c071fef1bb6c50be069bf2fac5cfa5b02ddff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlc&lt;/code&gt; commands can be used to compile SNMP MIBs. Example:</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; のコマンドは、SNMP MIBをコンパイルするために使用することができます。例：</target>
        </trans-unit>
        <trans-unit id="62bad1fda35fe8631456e7f852e564c8e9c8e268" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlc&lt;/code&gt; program provides a common way to run all compilers in the Erlang system. Depending on the extension of each input file, &lt;code&gt;erlc&lt;/code&gt; invokes the appropriate compiler. Regardless of which compiler is used, the same flags are used to provide parameters, such as include paths and output directory.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; プログラムは、Erlangのシステム内のすべてのコンパイラを実行する一般的な方法を提供します。各入力ファイルの拡張子に応じて、 &lt;code&gt;erlc&lt;/code&gt; は適切なコンパイラーを呼び出します。使用するコンパイラーに関係なく、同じフラグを使用して、インクルードパスや出力ディレクトリなどのパラメーターを提供します。</target>
        </trans-unit>
        <trans-unit id="04a181b53380c41c65d2013dd7fbc831073b3697" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erlc&lt;/code&gt; program provides an even better way to compile modules from the shell, see the &lt;code&gt;erlc(1)&lt;/code&gt; manual page in ERTS. It understands a number of flags that can be used to define macros, add search paths for include files, and more.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; プログラムが参照、シェルからモジュールをコンパイルするためのより良い方法を提供し &lt;code&gt;erlc(1)&lt;/code&gt; ERTSでマニュアルページを。マクロの定義、インクルードファイルの検索パスの追加などに使用できるいくつかのフラグを理解しています。</target>
        </trans-unit>
        <trans-unit id="8ef81ea9999fef9d6386667fd464ac528873e195" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erpc&lt;/code&gt; operation failed due to some system limit being reached. This typically due to failure to create a process on the remote node &lt;code&gt;Node&lt;/code&gt;, but can be other things as well.</source>
          <target state="translated">&lt;code&gt;erpc&lt;/code&gt; いくつかのシステムの制限のために失敗した操作が到達しています。これは通常、リモートノード &lt;code&gt;Node&lt;/code&gt; でプロセスを作成できなかったことが原因ですが、他の原因も考えられます。</target>
        </trans-unit>
        <trans-unit id="ef05a4f26d361fa5f7db9630f59b90887dc5e15f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erpc&lt;/code&gt; operation failed. The following &lt;code&gt;ERpcErrorReason&lt;/code&gt;s are the most common ones:</source>
          <target state="translated">&lt;code&gt;erpc&lt;/code&gt; 操作に失敗しました。次の &lt;code&gt;ERpcErrorReason&lt;/code&gt; は、最も一般的なものです。</target>
        </trans-unit>
        <trans-unit id="ecee252d04d93f7d74c1c1a56f12a612505d489e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erpc&lt;/code&gt; operation timed out. The function may or may not be applied.</source>
          <target state="translated">&lt;code&gt;erpc&lt;/code&gt; 操作がタイムアウトしました。この機能は適用される場合とされない場合があります。</target>
        </trans-unit>
        <trans-unit id="cd3c7d4f5dac617c7aad52a992257a0165d9e724" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_logger&lt;/code&gt; API still exists, but should only be used by legacy code. It will be removed in a later release.</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; の APIはまだ存在しているが、唯一のレガシーコードで使用する必要があります。今後のリリースで削除される予定です。</target>
        </trans-unit>
        <trans-unit id="cecfe06c35cc22d6fbeab34699c031b77ba0b013" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_logger_format_depth&lt;/code&gt; variable is &lt;code&gt; deprecated&lt;/code&gt; since the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger API&lt;/a&gt;&lt;/code&gt; was introduced in Erlang/OTP 21.0. The variable, and this function, are kept for backwards compatibility since they still might be used by legacy report handlers.</source>
          <target state="translated">&lt;code&gt;error_logger_format_depth&lt;/code&gt; の変数がされ &lt;code&gt; deprecated&lt;/code&gt; 以来 &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger API&lt;/a&gt;&lt;/code&gt; アーラン/ OTP 21.0で導入されました。変数とこの関数は、レガシーレポートハンドラーによって引き続き使用される可能性があるため、下位互換性のために保持されています。</target>
        </trans-unit>
        <trans-unit id="d68556b2eb1fae2f09bd4af885781dca52da64d8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;error_logger_format_depth&lt;/code&gt; variable is &lt;code&gt;deprecated&lt;/code&gt; since the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger API&lt;/a&gt;&lt;/code&gt; was introduced in Erlang/OTP 21.0. The variable, and this function, are kept for backwards compatibility since they still might be used by legacy report handlers.</source>
          <target state="translated">&lt;code&gt;error_logger_format_depth&lt;/code&gt; の変数がされ &lt;code&gt;deprecated&lt;/code&gt; 以来 &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;Logger API&lt;/a&gt;&lt;/code&gt; アーラン/ OTP 21.0で導入されました。変数とこの関数は、従来のレポートハンドラーで引き続き使用される可能性があるため、下位互換性のために保持されています。</target>
        </trans-unit>
        <trans-unit id="7c78dbc6e06eb7032ca1037abf4bb7cf984ec4a7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;erts_alloc_config(3)&lt;/code&gt; tool can be used to aid creation of an &lt;code&gt;erts_alloc&lt;/code&gt; configuration that is suitable for a limited number of runtime scenarios.</source>
          <target state="translated">&lt;code&gt;erts_alloc_config(3)&lt;/code&gt; ツールは、の作成を補助するために使用することができる &lt;code&gt;erts_alloc&lt;/code&gt; のランタイム・シナリオの限られた数の適した構成を。</target>
        </trans-unit>
        <trans-unit id="6d445f376d6f420d187f6eefce3f926292a91d52" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;et&lt;/code&gt; module is not like other modules. It contains a function called &lt;code&gt;et:trace_me/5&lt;/code&gt;. Which is a function that does not do any useful stuff at all. Its sole purpose is to be a function that is easy to trace. A call to it may be something like:</source>
          <target state="translated">&lt;code&gt;et&lt;/code&gt; モジュールは他のモジュールと同様ではありません。 &lt;code&gt;et:trace_me/5&lt;/code&gt; という関数が含まれています。これは、何の役にも立たない機能です。その唯一の目的は、追跡しやすい関数であることです。それへの呼び出しは次のようなものです：</target>
        </trans-unit>
        <trans-unit id="bed59c1de102975ce15ed3e675ac3119209f047d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;etags&lt;/code&gt; program of fairly modern versions of Emacs and XEmacs has native support for Erlang. To check if your version does include this support, issue the command &lt;code&gt;etags --help&lt;/code&gt; at a the command line prompt. At the end of the help text there is a list of supported languages. Unless Erlang is a member of this list I suggest that you should upgrade to a newer version of Emacs.</source>
          <target state="translated">EmacsとXEmacsのかなり最近のバージョンの &lt;code&gt;etags&lt;/code&gt; プログラムは、Erlangをネイティブでサポートしています。バージョンにこのサポートが含まれているかどうかを確認するには、コマンドラインプロンプトで &lt;code&gt;etags --help&lt;/code&gt; コマンドを発行します。ヘルプテキストの最後に、サポートされている言語のリストがあります。Erlangがこのリストのメンバーでない限り、Emacsの新しいバージョンにアップグレードすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="47e6f553b59c8cd440ae6bcf427e51798ed42721" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;etags&lt;/code&gt; utility can also read a list of files from its standard input by supplying a single dash in place of the file names. This feature is useful when a project consists of a large number of files. The standard UNIX command &lt;code&gt;find&lt;/code&gt; can be used to generate the list of files, e.g:</source>
          <target state="translated">&lt;code&gt;etags&lt;/code&gt; ののユーティリティは、ファイル名の代わりに単一のダッシュを供給することにより、標準入力からファイルのリストを読み込むことができます。この機能は、プロジェクトが多数のファイルで構成されている場合に役立ちます。標準のUNIXコマンド &lt;code&gt;find&lt;/code&gt; を使用して、ファイルのリストを生成できます。例：</target>
        </trans-unit>
        <trans-unit id="e41a30417c9eb9b7fd9125a0948a761a185309da" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ets:select/2&lt;/code&gt; call conceptually looks like this in the resulting code:</source>
          <target state="translated">&lt;code&gt;ets:select/2&lt;/code&gt; コールは、概念的には結果のコードに次のようになります。</target>
        </trans-unit>
        <trans-unit id="c0a28f71fbf02463cf528426b0591cc67a7a02b0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;example_drv_start&lt;/code&gt;, is the only function that is called with a handle to the port instance, so this must be saved. It is customary to use an allocated driver-defined structure for this one, and to pass a pointer back as a reference.</source>
          <target state="translated">&lt;code&gt;example_drv_start&lt;/code&gt; は、ポートのインスタンスへのハンドルと呼ばれている唯一の機能であるので、これを保存しなければなりません。これには、割り当てられたドライバー定義の構造を使用し、ポインターを参照として返すのが通例です。</target>
        </trans-unit>
        <trans-unit id="d0356d1c5d4e8ef894f1ca0204010b1f0f916038" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extended_errors&lt;/code&gt; option enables extended ODBC error information when an operation fails. Rather than returning &lt;code&gt;{error, Reason}&lt;/code&gt;, the failing function will reutrn &lt;code&gt;{error, {ODBCErrorCode, NativeErrorCode, Reason}}&lt;/code&gt;. Note that this information is probably of little use when writing database-independent code, but can be of assistance in providing more sophisticated error handling when dealing with a known underlying database.</source>
          <target state="translated">&lt;code&gt;extended_errors&lt;/code&gt; の操作が失敗したときにオプションが拡張されたODBCエラー情報を可能にします。 &lt;code&gt;{error, Reason}&lt;/code&gt; 返すのではなく、失敗した関数は &lt;code&gt;{error, {ODBCErrorCode, NativeErrorCode, Reason}}&lt;/code&gt; ます。この情報は、データベースに依存しないコードを作成する場合にはほとんど役に立ちませんが、既知の基礎となるデータベースを処理するときに、より高度なエラー処理を提供するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="c59051a0d238b0abf7c9e7050c91b5361d579937" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;extra&lt;/code&gt; info is not normally interpreted by the agent, instead it is passed through to the &lt;code&gt;&lt;a href=&quot;snmp_agent_netif&quot;&gt;net-if&lt;/a&gt;&lt;/code&gt; process. It is up to the implementor of that process to make use of this data.</source>
          <target state="translated">&lt;code&gt;extra&lt;/code&gt; 情報は通常、代わりにそれが通過され、エージェントによって解釈されていない &lt;code&gt;&lt;a href=&quot;snmp_agent_netif&quot;&gt;net-if&lt;/a&gt;&lt;/code&gt; 、プロセス。このデータを利用するのは、そのプロセスの実装者次第です。</target>
        </trans-unit>
        <trans-unit id="57ed5e1b23df723cf600bd41057a5b61adc0bf3f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;family&lt;/code&gt; field can only have the (above) specified values (and not all the values of socket:domain()).</source>
          <target state="translated">&lt;code&gt;family&lt;/code&gt; フィールドは、（上記の）指定された値持つことができます（とないすべてのソケットの値：ドメインを（））。</target>
        </trans-unit>
        <trans-unit id="9363097de66681822e14d18a16cae53b07a71b33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; module accepts raw filenames as input. &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; also accepts them. As mentioned earlier, the arguments specified in the option list to &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; undergo the same conversion as the filenames, meaning that the executable is provided with arguments in UTF-8 as well. This translation is avoided consistently with how the filenames are treated, by giving the argument as a binary.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; モジュールは、入力として生のファイル名を受け入れます。 &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; もそれらを受け入れます。前述のように、オプションリストで &lt;code&gt;open_port({spawn_executable, ...} ...)&lt;/code&gt; 指定された引数は、ファイル名と同じ変換を受けます。つまり、実行可能ファイルにはUTF-8の引数も提供されます。この変換は、引数をバイナリとして与えることにより、ファイル名の処理方法と一貫して回避されます。</target>
        </trans-unit>
        <trans-unit id="56811d8968fc7cff92a38ee6c1b86759f5455dad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;file&lt;/code&gt; module already spread's tags, so there is noo need to manually call these function to get user tags spread to the efile driver through that module.</source>
          <target state="translated">&lt;code&gt;file&lt;/code&gt; モジュールすでに普及のタグ、手動でそのモジュールを介してefileドライバへのユーザータグの広がりを取得するために、これらの関数を呼び出すためのお取置きが必要です。</target>
        </trans-unit>
        <trans-unit id="d1888f67852ce013eb515b48a1f7e3f5fb2b5677" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;foo&lt;/code&gt; table is replicated on the two nodes &lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;foo&lt;/code&gt; テーブルは、2つのノードで複製され &lt;code&gt;N1&lt;/code&gt; 及び &lt;code&gt;N2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="58cb0b27674de03ef7e6aa8a782a3f05022f6202" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fprof&lt;/code&gt; module uses tracing to collect profiling data, hence there is no need for special compilation of any module to be profiled. When it starts tracing, &lt;code&gt;fprof&lt;/code&gt; will erase all previous tracing in the node and set the necessary trace flags on the profiling target processes as well as local call trace on all functions in all loaded modules and all modules to be loaded. &lt;code&gt;fprof&lt;/code&gt; erases all tracing in the node when it stops tracing.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; プロファイリングデータを収集するためのトレースモジュールの用途、したがって、プロファイリングするための任意のモジュールの特別なコンパイルの必要はありません。トレースが開始されると、 &lt;code&gt;fprof&lt;/code&gt; はノード内の以前のトレースをすべて消去し、プロファイリングターゲットプロセスに必要なトレースフラグを設定します。また、読み込まれるすべてのモジュールと読み込まれるすべてのモジュールのすべての関数にローカル呼び出しトレースを設定します。 &lt;code&gt;fprof&lt;/code&gt; は、トレースを停止すると、ノード内のすべてのトレースを消去します。</target>
        </trans-unit>
        <trans-unit id="2499ac11d982c28fc125b257bd3bdd2fea444c7a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fqdn_fun&lt;/code&gt; extracts hostnames (Fully Qualified Domain Names) from uri_id or other ReferenceIDs that are not pre-defined in the public_key function. Suppose you have some URI with a very special protocol-part: &lt;code&gt;myspecial://example.com&quot;&lt;/code&gt;. Since this a non-standard URI there will be no hostname extracted for matching CN-names in the &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fqdn_fun&lt;/code&gt; の PUBLIC_KEY機能にあらかじめ定義されていないuri_idまたは他のReferenceIDsから抽出したホスト名（完全修飾ドメイン名）。非常に特別なprotocol-part： &lt;code&gt;myspecial://example.com&quot;&lt;/code&gt; URIがあるとします。これは非標準のURIであるため、 &lt;code&gt;Subject&lt;/code&gt; 内の一致するCN名のホスト名は抽出されません。</target>
        </trans-unit>
        <trans-unit id="122806faca6d67fa7fa167376a0e47c2c49bcb48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;from&lt;/code&gt;, &lt;code&gt;to&lt;/code&gt;, and &lt;code&gt;message&lt;/code&gt; parameters are exactly what they sound like. &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; are visualized in the &lt;code&gt;Viewer&lt;/code&gt; as &quot;lifelines&quot;, with the message passing from one to the other. If &lt;code&gt;from&lt;/code&gt; and &lt;code&gt;to&lt;/code&gt; are the same value, then it is displayed next to the lifeline as an &quot;action&quot;. The &lt;code&gt;extra_stuff&lt;/code&gt;value is simply data that you can attach that will be displayed when someone actually clicks on the action or message in the &lt;code&gt;Viewer&lt;/code&gt; window.</source>
          <target state="translated">&lt;code&gt;to&lt;/code&gt; 、および &lt;code&gt;message&lt;/code&gt; パラメータは、彼らはのように聞こえる、まさにです。 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; は &lt;code&gt;Viewer&lt;/code&gt; で「ライフライン」として視覚化され、メッセージは一方から他方へ渡されます。場合 &lt;code&gt;from&lt;/code&gt; と &lt;code&gt;to&lt;/code&gt; 同じ値であり、それは次の「アクション」などライフラインに表示されます。 &lt;code&gt;extra_stuff&lt;/code&gt; の値は、単に誰かが実際にアクションやメッセージをクリックしたときに表示されます、あなたがそれを添付することができないデータである &lt;code&gt;Viewer&lt;/code&gt; ウィンドウ。 &lt;code&gt;from&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="87548be67a9ff93c1ef1ff4d3cbb19180b6403f2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ftp&lt;/code&gt; module normally accesses the tar file on disk using the &lt;code&gt;file&lt;/code&gt; module. When other needs arise, you can define your own low-level Erlang functions to perform the writing and reading on the storage media; use function &lt;code&gt;&lt;a href=&quot;#init-3&quot;&gt;init/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ftp&lt;/code&gt; モジュールは、通常使用して、ディスク上のtarファイルアクセス &lt;code&gt;file&lt;/code&gt; のモジュールを。他のニーズが発生した場合は、独自の低レベルErlang関数を定義して、ストレージメディアで書き込みと読み取りを実行できます。関数 &lt;code&gt;&lt;a href=&quot;#init-3&quot;&gt;init/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="97a262c9e6ae8c813f3758420838640077d62040" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun()&lt;/code&gt; in the exec option could take up to three arguments (&lt;code&gt;Cmd&lt;/code&gt;, &lt;code&gt;User&lt;/code&gt; and &lt;code&gt;ClientAddress&lt;/code&gt;). See the &lt;code&gt;&lt;a href=&quot;ssh#type-exec_daemon_option&quot;&gt;exec_daemon_option()&lt;/a&gt;&lt;/code&gt; for the details.</source>
          <target state="translated">execオプションの &lt;code&gt;fun()&lt;/code&gt; は、最大3つの引数（ &lt;code&gt;Cmd&lt;/code&gt; 、 &lt;code&gt;User&lt;/code&gt; 、 &lt;code&gt;ClientAddress&lt;/code&gt; ）を取ることができます。詳細については、 &lt;code&gt;&lt;a href=&quot;ssh#type-exec_daemon_option&quot;&gt;exec_daemon_option()&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="601051b0fdf8cf4c5f5015c05c1f7676f5366f6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun()&lt;/code&gt; is very restricted, it can take only a single parameter (the parameter list to match), a sole variable or a list. It needs to use the &lt;code&gt;is_&lt;/code&gt;XXX guard tests and one cannot use language constructs that have no representation in a match_spec (like &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;case&lt;/code&gt;, &lt;code&gt;receive&lt;/code&gt; etc). The return value from the fun will be the return value of the resulting match_spec.</source>
          <target state="translated">&lt;code&gt;fun()&lt;/code&gt; 非常に制限されている、それだけで、単一のパラメータ（パラメータリストが一致するように）、唯一の変数やリストを取ることができます。 &lt;code&gt;is_&lt;/code&gt; XXXガードテストを使用する必要があり、match_specで表現を持たない言語構造（ &lt;code&gt;if&lt;/code&gt; 、 &lt;code&gt;case&lt;/code&gt; 、 &lt;code&gt;receive&lt;/code&gt; など）を使用することはできません。funの戻り値は、結果のmatch_specの戻り値になります。</target>
        </trans-unit>
        <trans-unit id="000806ecedbeddab2e6bf12ee5fe07ca1e33c2e1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;fun/2&lt;/code&gt; in this option replaces the default host name matching rules. The fun should return a boolean to tell if the Reference ID and Presented ID matches or not. The fun can also return a third value, the atom &lt;code&gt;default&lt;/code&gt;, if the default matching rules shall apply. This makes it possible to augment the tests with a special case:</source>
          <target state="translated">このオプションの &lt;code&gt;fun/2&lt;/code&gt; は、デフォルトのホスト名マッチングルールを置き換えます。funは、参照IDと提示されたIDが一致するかどうかを示すブール値を返す必要があります。funは、デフォルトのマッチング規則が適用される場合、3番目の値、アトム &lt;code&gt;default&lt;/code&gt; も返すことができます。これにより、特別なケースでテストを補強することができます。</target>
        </trans-unit>
        <trans-unit id="f52884fca2fcf6439eaac6506d404d211516c579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;functions&lt;/code&gt; filter shows each function as a vertical line in the sequence diagram. A function calling itself is shown as an activity within a function, and all other function calls are shown as interactions between functions.</source>
          <target state="translated">&lt;code&gt;functions&lt;/code&gt; フィルタは、シーケンス図の縦線として各機能を示しています。関数呼び出し自体は関数内のアクティビティとして表示され、他のすべての関数呼び出しは関数間の相互作用として表示されます。</target>
        </trans-unit>
        <trans-unit id="3f981dcbf4ac48552e64e421603989d6797ca936" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;garbage_collect&lt;/code&gt; pseudo function has not got an OWN time of zero like &lt;code&gt;suspend&lt;/code&gt;, instead it is equal to the ACC time.</source>
          <target state="translated">&lt;code&gt;garbage_collect&lt;/code&gt; の擬似機能のようなゼロの自身の時間だしていない &lt;code&gt;suspend&lt;/code&gt; 代わりに、それはACC時間に等しいです。</target>
        </trans-unit>
        <trans-unit id="65be8dbec39cb8799bd4b2ae3b3d10e864f2a323" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_event&lt;/code&gt; process can go into hibernation (see &lt;code&gt; erlang:hibernate/3&lt;/code&gt;) if a callback function in a handler module specifies &lt;code&gt;hibernate&lt;/code&gt; in its return value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each event handled by a busy event manager.</source>
          <target state="translated">&lt;code&gt;gen_event&lt;/code&gt; の冬眠に入ることができるプロセスは、（参照 &lt;code&gt; erlang:hibernate/3&lt;/code&gt; ハンドラモジュールの指定でコールバック関数があれば）、 &lt;code&gt;hibernate&lt;/code&gt; 戻り値に。これは、サーバーが長時間アイドル状態になると予想される場合に役立ちます。ただし、休止状態は少なくとも2つのガベージコレクション（休止状態のときとウェイクアップ直後）を意味し、忙しいイベントマネージャーが処理する各イベント間で実行したいことではないため、この機能は注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="044322659b6e8af2be19d4c036e45080be4df433" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_event&lt;/code&gt; process can go into hibernation (see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;) if a callback function in a handler module specifies &lt;code&gt;hibernate&lt;/code&gt; in its return value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each event handled by a busy event manager.</source>
          <target state="translated">&lt;code&gt;gen_event&lt;/code&gt; の冬眠に入ることができるプロセスは、（参照 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; ハンドラモジュールの指定でコールバック関数があれば）、 &lt;code&gt;hibernate&lt;/code&gt; 戻り値に。これは、サーバーが長時間アイドル状態であることが予想される場合に役立ちます。ただし、ハイバネーションは少なくとも2つのガベージコレクションを意味し（ハイバネーション時とウェイクアップの直後）、この機能は慎重に使用してください。これは、ビジーなイベントマネージャーによって処理される各イベント間では実行したくないことです。</target>
        </trans-unit>
        <trans-unit id="f841b959e8263c246a84615eb245e9aa9e79a66a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; リクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="26a989bcc28ed3e808b806405714b19049fd235b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; to initialize. To ensure a synchronized startup procedure, &lt;code&gt;start_link/3,4&lt;/code&gt; does not return until &lt;code&gt;Module:init/1&lt;/code&gt; has returned.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; 初期化します。同期された起動手順を確実にするために、 &lt;code&gt;start_link/3,4&lt;/code&gt; は &lt;code&gt;Module:init/1&lt;/code&gt; が戻るまで戻りません。</target>
        </trans-unit>
        <trans-unit id="d7490f34408e79e925356758b66c95f52679a6c5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process can go into hibernation (see &lt;code&gt; erlang:hibernate/3&lt;/code&gt;) if a callback function specifies &lt;code&gt;'hibernate'&lt;/code&gt; instead of a time-out value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each call to a busy server.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; の冬眠に入ることができるプロセスは、（参照 &lt;code&gt; erlang:hibernate/3&lt;/code&gt; コールバック関数を指定する場合） &lt;code&gt;'hibernate'&lt;/code&gt; 代わりにタイムアウト値の。これは、サーバーが長時間アイドル状態になると予想される場合に役立ちます。ただし、休止状態は少なくとも2つのガベージコレクション（休止状態のときとウェイクアップ直後）を意味し、ビジー状態のサーバーへの各呼び出しの間に実行したいことではないため、この機能は注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="fa0125aacc8a9ef2d0db488477563acd091e114f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process can go into hibernation (see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;) if a callback function specifies &lt;code&gt;'hibernate'&lt;/code&gt; instead of a time-out value. This can be useful if the server is expected to be idle for a long time. However, use this feature with care, as hibernation implies at least two garbage collections (when hibernating and shortly after waking up) and is not something you want to do between each call to a busy server.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; の冬眠に入ることができるプロセスは、（参照 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; コールバック関数を指定する場合） &lt;code&gt;'hibernate'&lt;/code&gt; 代わりにタイムアウト値の。これは、サーバーが長時間アイドル状態であることが予想される場合に役立ちます。ただし、ハイバネーションは少なくとも2つのガベージコレクションを意味し（ハイバネーション時とウェイクアップの直後）、ビジー状態のサーバーへの各呼び出しの間に実行したくないため、この機能は注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="93b11bb8bc3cc58fae8df0b4cde4e2b1b7508719" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process has been set to trap exit signals.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスは、トラップ出口信号に設定されています。</target>
        </trans-unit>
        <trans-unit id="1a0a8f650014835d8fac6303db526f6a6997059c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_server&lt;/code&gt; process terminates abnormally and logs an error. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;terminate&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; のプロセスが異常終了し、エラーをログに記録します。 &lt;code&gt;Opt&lt;/code&gt; はアトム &lt;code&gt;terminate&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="a177f7b03da7ce677026ac74a7f1eaf2f38ab48b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; behavior can if this is enabled, regardless of callback mode, automatically &lt;code&gt;call the state callback&lt;/code&gt; with special arguments whenever the state changes so you can write state enter actions near the rest of the state transition rules. It typically looks like this:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 行動缶これが有効になっている場合は、関係なく、コールバックモードの、自動的に &lt;code&gt;call the state callback&lt;/code&gt; あなたは状態が状態遷移規則の残りの部分の近くにアクションを入力して書くことができるように状態が変化するたびに、特別な引数を持ちます。通常は次のようになります。</target>
        </trans-unit>
        <trans-unit id="bed0fd34af6e417a5ed2971b378b4cefa2ed46b4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; behavior supports two callback modes:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; の挙動は、2つのコールバックモードをサポートしています。</target>
        </trans-unit>
        <trans-unit id="0853cf94b65372cd43a3f0b5a15fa90c0eef1c14" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; behaviour can if this is enabled, regardless of &lt;strong&gt;callback mode&lt;/strong&gt;, automatically &lt;code&gt; call the state callback &lt;/code&gt; with special arguments whenever the state changes so you can write state enter actions near the rest of the &lt;strong&gt;state transition&lt;/strong&gt; rules. It typically looks like this:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; 行動缶これが有効になっている場合は、関係なく、&lt;strong&gt;コールバックモード&lt;/strong&gt;、自動的に &lt;code&gt; call the state callback &lt;/code&gt; あなたは状態が残りの近くアクション入る書くことができるように状態が変化するたびに特別な引数で&lt;strong&gt;状態遷移&lt;/strong&gt;規則を。通常、次のようになります。</target>
        </trans-unit>
        <trans-unit id="9bfee8de64aaf220d4aeed1c41aab972dbfcbf33" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; behaviour supports two &lt;strong&gt;callback modes&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; の挙動は、2つのをサポート&lt;strong&gt;コールバックモードを&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="202063559580002e499e6f482887a341d2fb543d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; calls the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{call,From}&lt;/code&gt; and event content &lt;code&gt;Request&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、コール &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 用いて &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{call,From}&lt;/code&gt; とイベントコンテンツ &lt;code&gt;Request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb6f22901bf82daa00ca3a8e82f1d85e746f57f5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; does a &lt;strong&gt;state transition&lt;/strong&gt; to &lt;code&gt;NextState&lt;/code&gt; (which can be the same as the current state), sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;. If &lt;code&gt;NextState =/= CurrentState&lt;/code&gt; the &lt;strong&gt;state transition&lt;/strong&gt; is a &lt;strong&gt;state change&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はない&lt;strong&gt;状態遷移&lt;/strong&gt;に &lt;code&gt;NextState&lt;/code&gt; （現在の状態と同じであることができる）、設定 &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。 &lt;code&gt;NextState =/= CurrentState&lt;/code&gt; 場合、&lt;strong&gt;状態遷移&lt;/strong&gt;は&lt;strong&gt;状態変化&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="17680806ff10db88faa8089ccb57cda1bbf46d1e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; does a state transition to &lt;code&gt;NextState&lt;/code&gt; (which can be the same as the current state), sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はへの状態遷移ない &lt;code&gt;NextState&lt;/code&gt; （現在の状態と同じであることができる）、設定 &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5b1ba800b2bd8eddab3c29205a82310973e51fec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; does a state transition to &lt;code&gt;State&lt;/code&gt;, which has to be the current state, sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はへの状態遷移ない &lt;code&gt;State&lt;/code&gt; 、現在の状態である必要があり、設定 &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3869ef62f08e2a10aa5bf3ec284cea8fd875bec8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; engine can automatically make a specialized call to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; whenever a new state is entered; see &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter()&lt;/a&gt;&lt;/code&gt;. This is for writing code common to all state entries. Another way to do it is to explicitly insert an event at the &lt;strong&gt;state transition&lt;/strong&gt;, and/or to use a dedicated &lt;strong&gt;state transition&lt;/strong&gt; function, but that is something you will have to remember at every &lt;strong&gt;state transition&lt;/strong&gt; to the state(s) that need it.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のエンジンが自動的に特化したコールすることができます &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 新しい状態に入った時はいつでも。 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter()&lt;/a&gt;&lt;/code&gt; を参照してください。これは、すべての状態エントリに共通のコードを記述するためのものです。これを行う別の方法は、&lt;strong&gt;状態遷移&lt;/strong&gt;でイベントを明示的に挿入するか、専用の&lt;strong&gt;状態遷移&lt;/strong&gt;関数を使用することですが、それを必要とする&lt;strong&gt;状態への&lt;/strong&gt;すべての&lt;strong&gt;状態遷移で&lt;/strong&gt;覚えておく必要があります。</target>
        </trans-unit>
        <trans-unit id="1ff91dbdb67dc0752a1cb136935a70afdac9c712" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; engine can automatically make a specialized call to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; whenever a new state is entered; see &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter()&lt;/a&gt;&lt;/code&gt;. This is for writing code common to all state entries. Another way to do it is to insert an event at the state transition, and/or to use a dedicated state transition function, but that is something you will have to remember at every state transition to the state(s) that need it.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のエンジンが自動的に特化したコールすることができます &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 新しい状態に入った時はいつでも。 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state_enter()&lt;/a&gt;&lt;/code&gt; を参照してください。これは、すべての状態エントリに共通のコードを記述するためのものです。それを行う別の方法は、状態遷移でイベントを挿入すること、および/または専用の状態遷移関数を使用することですが、それは、それを必要とする状態へのすべての状態遷移で覚えておく必要があるものです。</target>
        </trans-unit>
        <trans-unit id="298787bc0880c606f6d382d6ec4eea28eb66cd16" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; engine will find out the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt; &lt;strong&gt;callback mode&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; of &lt;code&gt;NewModule&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt; NewModule:callback_mode/0 &lt;/a&gt;&lt;/code&gt; before the next &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のエンジンが出ています &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt; &lt;strong&gt;callback mode&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; の &lt;code&gt;NewModule&lt;/code&gt; を呼び出すことによって &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt; NewModule:callback_mode/0 &lt;/a&gt;&lt;/code&gt; 次の前 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 。 &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="609a55f5722ed6b61803cc1734f944814dbce653" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; enqueues incoming events in order of arrival and presents these to the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; in that order. The state callback can postpone an event so it is not retried in the current state. After a state change the queue restarts with the postponed events.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は到着やプレゼントこれらの順で着信イベントをエンキュー &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; そのためです。状態コールバックはイベントを延期できるため、現在の状態で再試行されません。状態の変更後、キューは再開されたイベントで再起動します。</target>
        </trans-unit>
        <trans-unit id="63345530db17175adac9ec3a019543d210266d03" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; event queue model is sufficient to emulate the normal process message queue with selective receive. Postponing an event corresponds to not matching it in a receive statement, and changing states corresponds to entering a new receive statement.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; イベントキューモデルは、選択受信して通常の処理メッセージキューをエミュレートするのに十分です。イベントを延期することは、受信ステートメントでイベントを一致させないことに対応し、状態を変更することは、新しい受信ステートメントを入力することに対応します。</target>
        </trans-unit>
        <trans-unit id="641237d979ff0a2d03c26c3ad66f07cb507fd0a3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; has been set to trap exit signals.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はトラップ出口信号に設定されています。</target>
        </trans-unit>
        <trans-unit id="154bbf6641ffd5663c5aefea121dd325520717a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is globally registered in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はグローバルに登録されている &lt;code&gt;global&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67b6a4a7c1fd3b7590f8afba5f3bf9c9be4abb6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is locally registered on another node.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、ローカルに別のノードに登録されています。</target>
        </trans-unit>
        <trans-unit id="85f1bfb26c1bebdbfe3ea8eee17c7ba7fcaa85f1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is locally registered.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; はローカルに登録されています。</target>
        </trans-unit>
        <trans-unit id="dff17e2a1fe994c2de42244386fbbe29172ce5a4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; is registered in an alternative process registry. The registry callback module &lt;code&gt;RegMod&lt;/code&gt; is to export functions &lt;code&gt;register_name/2&lt;/code&gt;, &lt;code&gt;unregister_name/1&lt;/code&gt;, &lt;code&gt;whereis_name/1&lt;/code&gt;, and &lt;code&gt;send/2&lt;/code&gt;, which are to behave like the corresponding functions in &lt;code&gt;global&lt;/code&gt;. Thus, &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; is the same as &lt;code&gt;{global,GlobalName}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、代替プロセス、レジストリに登録されています。レジストリコールバックモジュール &lt;code&gt;RegMod&lt;/code&gt; は、関数 &lt;code&gt;register_name/2&lt;/code&gt; 、 &lt;code&gt;unregister_name/1&lt;/code&gt; 、 &lt;code&gt;whereis_name/1&lt;/code&gt; 、および &lt;code&gt;send/2&lt;/code&gt; をエクスポートします。これらは、 &lt;code&gt;global&lt;/code&gt; 対応する関数のように動作します。したがって、 &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; は &lt;code&gt;{global,GlobalName}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="f744ffe4f5b7b57ef92ebf70203f5d38f475257a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state and data, or does a state transition to the current state if you like, and executes all &lt;code&gt;Actions&lt;/code&gt;. This is the same as &lt;code&gt;{repeat_state,CurrentData,Actions}&lt;/code&gt;. If the &lt;code&gt;gen_statem&lt;/code&gt; runs with &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, the state enter call is repeated, see type &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;repeat_state_and_data&lt;/code&gt; is the same as &lt;code&gt;keep_state_and_data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態とデータを保持し、またはあなたが好きならば、現在の状態への状態遷移を行い、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。これは &lt;code&gt;{repeat_state,CurrentData,Actions}&lt;/code&gt; と同じです。 &lt;code&gt;gen_statem&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; で実行される場合、state enter呼び出しが繰り返されます &lt;code&gt;repeat_state_and_data&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; 参照してください。それ以外の場合、repeat_state_and_dataはkeep_state_and_dataと同じ &lt;code&gt;keep_state_and_data&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d475ad84f6e39a68e71be16a98a5f4760d76809d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state or does a state transition to the current state if you like, keeps the current server data, and executes all &lt;code&gt;Actions&lt;/code&gt;. This is the same as &lt;code&gt;{next_state,CurrentState,CurrentData,Actions}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態を保つか、必要であれば、現在の状態への状態遷移を行い、現在のサーバのデータを保持し、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。これは &lt;code&gt;{next_state,CurrentState,CurrentData,Actions}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="6668d570fa47d65dc6496ac8a7e26666fa0a0e00" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state, or does a state transition to the current state if you like, sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;. If the &lt;code&gt;gen_statem&lt;/code&gt; runs with &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, the state enter call is repeated, see type &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;, otherwise &lt;code&gt;repeat_state&lt;/code&gt; is the same as &lt;code&gt;keep_state&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態を維持し、またはあなたが好きならば、現在の状態への状態遷移は、設定しない &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。 &lt;code&gt;gen_statem&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; で実行される場合、state enter呼び出しが繰り返されます &lt;code&gt;repeat_state&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; 参照してください。それ以外の場合、repeat_stateはkeep_stateと同じ &lt;code&gt;keep_state&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d700edd0442a4b2cb750903fd91d19af04ce58f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; keeps the current state, or does a state transition to the current state if you like, sets &lt;code&gt;NewData&lt;/code&gt;, and executes all &lt;code&gt;Actions&lt;/code&gt;. This is the same as &lt;code&gt;{next_state,CurrentState,NewData,Actions}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は、現在の状態を維持し、またはあなたが好きならば、現在の状態への状態遷移は、設定しない &lt;code&gt;NewData&lt;/code&gt; 、すべての実行 &lt;code&gt;Actions&lt;/code&gt; 。これは &lt;code&gt;{next_state,CurrentState,NewData,Actions}&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="8501d306024ff238059935aefd0de35838afe886" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; to initialize the server. To ensure a synchronized startup procedure, &lt;code&gt;start_link/3,4&lt;/code&gt; does not return until &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; has returned.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; サーバーを初期化します。同期された起動手順を確実にするために、 &lt;code&gt;start_link/3,4&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; が戻るまで戻りません。</target>
        </trans-unit>
        <trans-unit id="238d457fbc3808fc222aef2d6327199e92b50362" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; process can go into hibernation; see &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;. It is done when a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; specifies &lt;code&gt;hibernate&lt;/code&gt; in the returned &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; list. This feature can be useful to reclaim process heap memory while the server is expected to be idle for a long time. However, use this feature with care, as hibernation can be too costly to use after every event; see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のプロセスが冬眠に入ることができます。 &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を参照してください。これは、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; が返された &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; リストで &lt;code&gt;hibernate&lt;/code&gt; を指定したときに実行されます。この機能は、サーバーが長時間アイドル状態であると予想されるときに、プロセスヒープメモリを再利用するのに役立ちます。ただし、休止状態はすべてのイベントの後に使用するにはコストがかかりすぎる可能性があるため、この機能は注意して使用してください。 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3a3de78075e1ead85abb08c9961b0132a2121787" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; process can go into hibernation; see &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;. It is done when a &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; specifies &lt;code&gt;hibernate&lt;/code&gt; in the returned &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; list. This feature can be useful to reclaim process heap memory while the server is expected to be idle for a long time. However, use this feature with care, as hibernation can be too costly to use after every event; see &lt;code&gt;erlang:hibernate/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; のプロセスが冬眠に入ることができます。 &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を参照してください。これは、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; が、返された &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; リストで &lt;code&gt;hibernate&lt;/code&gt; を指定したときに行われます。この機能は、サーバーが長時間アイドル状態であることが予想されるときに、プロセスヒープメモリを再利用するのに役立ちます。ただし、この機能は慎重に使用してください。休止状態になると、すべてのイベントの後に使用するにはコストがかかりすぎるためです。 &lt;code&gt;erlang:hibernate/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="881ead844dbebfad51980a814a9a4905aa6bf4c8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;gen_statem&lt;/code&gt; terminates abnormally and logs an error. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;terminate&lt;/code&gt; for this case.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は異常終了し、エラーをログに記録します。この場合、 &lt;code&gt;Opt&lt;/code&gt; はアトム &lt;code&gt;terminate&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="98d014159aa311c58e42eb49a30b95ce56872c5d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;get-bulk&lt;/code&gt; operation for transferring large amounts of data.</source>
          <target state="translated">大量のデータを転送するための &lt;code&gt;get-bulk&lt;/code&gt; 操作。</target>
        </trans-unit>
        <trans-unit id="ca7aa99a53f77bb03e023a14cb8a5dfa322719fd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;realm&lt;/code&gt; filters cause the Destination-Host and Destination-Realm AVPs to be extracted from the outgoing request, assuming it to be a record- or list-valued &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_codec#message&quot;&gt;diameter_codec:message()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;, and assuming at most one of each AVP. If this is not the case then the &lt;code&gt;{host|realm, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;}&lt;/code&gt; filters must be used to achieve the desired result. An empty &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; (which should not be typical) matches all hosts/realms for the purposes of filtering.</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; と &lt;code&gt;realm&lt;/code&gt; 宛先ホストおよび宛先レルムAVPの原因フィルターは、発信要求から抽出されたことが記録的またはリスト値であることを仮定する &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_codec#message&quot;&gt;diameter_codec:message()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; 、および各AVPの最大で1つを仮定します。そうでない場合は、 &lt;code&gt;{host|realm, &lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;}&lt;/code&gt; フィルターを使用して目的の結果を得る必要があります。空の &lt;code&gt;&lt;code&gt;&lt;a href=&quot;diameter_dict#DATA_TYPES&quot;&gt;DiameterIdentity()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; （これは一般的ではありません）は、フィルタリングの目的ですべてのホスト/レルムに一致します。</target>
        </trans-unit>
        <trans-unit id="1384604d97fc2fad058cb0b49328402f702a9c11" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;host&lt;/code&gt; was successfully decoded but the path contains at least one character with non-UTF-8 encoding. In order to be able to decode this, you have to make assumptions about the encoding used in these triplets. The most obvious choice is</source>
          <target state="translated">&lt;code&gt;host&lt;/code&gt; 復号に成功したが、パスは非UTF-8エンコーディングで少なくとも一つの文字が含まれていました。これをデコードできるようにするには、これらのトリプレットで使用されるエンコーディングについて想定する必要があります。最も明白な選択は</target>
        </trans-unit>
        <trans-unit id="6d366d9713f6b9c72596126187499371839fd52b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i&lt;/code&gt; module provides short forms for some of the functions used by the graphical Debugger and some of the functions in module &lt;code&gt;&lt;a href=&quot;int&quot;&gt;int&lt;/a&gt;&lt;/code&gt;, the Erlang interpreter.</source>
          <target state="translated">&lt;code&gt;i&lt;/code&gt; モジュールは、グラフィカルデバッガモジュールにおける機能の一部によって使用される機能のいくつかのための短い形態提供 &lt;code&gt;&lt;a href=&quot;int&quot;&gt;int&lt;/a&gt;&lt;/code&gt; 、Erlangのインタプリタを。</target>
        </trans-unit>
        <trans-unit id="d1d8b2c5a7a92df360a05d4f0b328a8a9dec2469" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i_fast_element/2&lt;/code&gt; instruction is faster because the tuple is already an untagged integer. It also knows that the index is at least 1, so it does not have to test for that. The &lt;code&gt;i_element/4&lt;/code&gt; instruction will have to fetch the index from a register, test that it is an integer, and untag the integer.</source>
          <target state="translated">&lt;code&gt;i_fast_element/2&lt;/code&gt; タプルが既にタグなし整数であるので、命令が速くなります。また、インデックスが少なくとも1であることも認識しているため、それをテストする必要はありません。 &lt;code&gt;i_element/4&lt;/code&gt; 命令は、それが整数であることをテスト、およびタグなし整数レジスタからインデックスを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="ffe8d3c73461c97195740001f84500385e3636a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;i_increment&lt;/code&gt; instruction is implemented like this:</source>
          <target state="translated">&lt;code&gt;i_increment&lt;/code&gt; 命令は次のように実装されています。</target>
        </trans-unit>
        <trans-unit id="56dd7d3b9f60436a9a9021776dba220b9a35a843" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; header represents the number of unique identifiers under a class when the option &lt;code&gt;{combine, true}&lt;/code&gt; is used (which is on by default). It will otherwise show the specific identifier. The &lt;code&gt;db_tab&lt;/code&gt; listing shows 722287 unique locks, it is one for each ets-table created and Mnesia creates one for each transaction.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; ヘッダオプションはクラス下の一意の識別子の数を表し &lt;code&gt;{combine, true}&lt;/code&gt; （デフォルトでオンになって）使用されます。それ以外の場合は、特定の識別子が表示されます。 &lt;code&gt;db_tab&lt;/code&gt; ショー722287のユニークなロックをリストは、それが作成された各ETS-テーブルの一つであり、Mnesiaは、各トランザクションのために作成されます。</target>
        </trans-unit>
        <trans-unit id="0fc657f0d7c1adea0e37abaf50e5955d09748ddb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;id&lt;/code&gt; key is mandatory.</source>
          <target state="translated">&lt;code&gt;id&lt;/code&gt; キーが必須です。</target>
        </trans-unit>
        <trans-unit id="543a86a9dbb014f2154dac485e637aa4987d5f47" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;index()&lt;/code&gt; type denotes an snmp index structure.</source>
          <target state="translated">&lt;code&gt;index()&lt;/code&gt; タイプは、SNMPインデックス構造を示しています。</target>
        </trans-unit>
        <trans-unit id="9e43b2120ef1641713607a20d5663b50e4bfd154" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; field of a &lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt; record. Can have one of the following types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#service_event&quot;&gt;service_event()&lt;/a&gt;&lt;/code&gt; レコードの &lt;code&gt;info&lt;/code&gt; フィールド。次のタイプのいずれかを持つことができます。</target>
        </trans-unit>
        <trans-unit id="1a3e0c6a3b85d7da20be620618cd94e4069d8c32" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;info&lt;/code&gt; functions return information as a list of pairs {Tag, term()} in some order about the state and the &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;info&lt;/code&gt; 機能は、ペア状態についてのいくつかのために{タグ、用語（）}とのリストなどの情報を返す &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe1b7238dd78cc738fd7a6138cfed66a0946104d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init:get_arguments()&lt;/code&gt; call verifies that the correct arguments are supplied to the emulator.</source>
          <target state="translated">&lt;code&gt;init:get_arguments()&lt;/code&gt; に正しい引数がエミュレータに供給されていることをコール検証。</target>
        </trans-unit>
        <trans-unit id="de26f216cc9cb8c745717da43fc15ae4239618cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; module interprets the following command-line flags:</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; モジュールは、次のコマンドラインフラグを解釈します。</target>
        </trans-unit>
        <trans-unit id="9159e5b3d2da59b16c5905eba93189ce3aa15286" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init&lt;/code&gt; process itself interprets some of these flags, the &lt;strong&gt;init flags&lt;/strong&gt;. It also stores any remaining flags, the &lt;strong&gt;user flags&lt;/strong&gt;. The latter can be retrieved by calling &lt;code&gt;init:get_argument/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init&lt;/code&gt; プロセス自体は、これらのフラグの一部、解釈&lt;strong&gt;のinitのフラグを&lt;/strong&gt;。また、残りのフラグである&lt;strong&gt;ユーザーフラグ&lt;/strong&gt;も格納し&lt;strong&gt;ます&lt;/strong&gt;。後者は &lt;code&gt;init:get_argument/1&lt;/code&gt; を呼び出すことで取得できます。</target>
        </trans-unit>
        <trans-unit id="808f537737de60102eb2d48a20a77f05a231d51c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;init_fun()&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;#type-tar_crypto_spec&quot;&gt;tar_crypto_spec&lt;/a&gt;&lt;/code&gt; is applied once prior to any other &lt;code&gt;crypto&lt;/code&gt; operation. The intention is that this function initiates the encryption or decryption for example by calling &lt;code&gt;crypto:crypto_init/4&lt;/code&gt; or similar. The &lt;code&gt;crypto_state()&lt;/code&gt; is the state such a function may return.</source>
          <target state="translated">&lt;code&gt;init_fun()&lt;/code&gt; 内 &lt;code&gt;&lt;a href=&quot;#type-tar_crypto_spec&quot;&gt;tar_crypto_spec&lt;/a&gt;&lt;/code&gt; は、他の前に一度適用される &lt;code&gt;crypto&lt;/code&gt; 操作。この関数は、たとえば &lt;code&gt;crypto:crypto_init/4&lt;/code&gt; などを呼び出すことによって暗号化または復号化を開始することを目的としています。 &lt;code&gt;crypto_state()&lt;/code&gt; は、このような関数が返すことができる状態です。</target>
        </trans-unit>
        <trans-unit id="a00463fc2a7f182be0da0183c5213eee9fd19f70" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;insert_emp/3&lt;/code&gt; arguments are as follows:</source>
          <target state="translated">&lt;code&gt;insert_emp/3&lt;/code&gt; 引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="35e63d83642fa80f496dd6056b90a430ea6b3ddf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;io&lt;/code&gt; module has been extended along with the actual I/O protocol to handle Unicode data. This means that many functions require binaries to be in UTF-8, and there are modifiers to format control sequences to allow for output of Unicode strings.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; モジュールは、Unicodeデータを処理するために、実際のI / Oプロトコルとともに拡張されています。つまり、多くの関数ではバイナリがUTF-8である必要があり、Unicode文字列の出力を可能にするために制御シーケンスをフォーマットする修飾子があります。</target>
        </trans-unit>
        <trans-unit id="abc6624cbf5af8be037d2670ec76b72f4b7f1113" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ip&lt;/code&gt; Reference ID takes an &lt;code&gt;inet:ip_address()&lt;/code&gt; or an ip address in string format (E.g &quot;10.0.1.1&quot; or &quot;1234::5678:9012&quot;) as second element.</source>
          <target state="translated">&lt;code&gt;ip&lt;/code&gt; リファレンスIDを取り &lt;code&gt;inet:ip_address()&lt;/code&gt; または文字列の形式（例： &quot;10.0.1.1&quot;または&quot;1234 :: 5678：9012&quot;）でIPアドレス第二の要素としては。</target>
        </trans-unit>
        <trans-unit id="a7ee8c582d46917ec81790ab0ac53e2589a28393" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;is_set_ok&lt;/code&gt; function checks that a row which is to be modified or deleted exists, and that a row which is to be created does not exist.</source>
          <target state="translated">&lt;code&gt;is_set_ok&lt;/code&gt; 機能の変更または削除すべき行が存在することをチェックし、作成する行が存在しません。</target>
        </trans-unit>
        <trans-unit id="3f824fe79494e6524fbde8189315044778985916" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;jer&lt;/code&gt; encoding rules (ITU-T X.697) are experimental in OTP 22. There is support for a subset of the X.697 standard, for example there is no support for:</source>
          <target state="translated">&lt;code&gt;jer&lt;/code&gt; ルールを符号化（ITU-T X.697）はOTP 22に実験的であるX.697規格のサブセットのためのサポートがあり、例えばためのサポートはありません。</target>
        </trans-unit>
        <trans-unit id="ff7f1bbdc59c16a06c62efdccc8b7854b7407424" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key()&lt;/code&gt; type correlates to the &lt;code&gt;key_types()&lt;/code&gt; type. If the &lt;code&gt;key_types()&lt;/code&gt; is a single atom, the corresponding &lt;code&gt;key()&lt;/code&gt; is a single type as well, but if the &lt;code&gt;key_types()&lt;/code&gt; is a tuple, &lt;code&gt;key&lt;/code&gt; must be a tuple of the same size.</source>
          <target state="translated">&lt;code&gt;key()&lt;/code&gt; と相関を入力 &lt;code&gt;key_types()&lt;/code&gt; タイプ。場合 &lt;code&gt;key_types()&lt;/code&gt; 単一の原子である、対応する &lt;code&gt;key()&lt;/code&gt; も単一型であるが、場合 &lt;code&gt;key_types()&lt;/code&gt; がタプルで、 &lt;code&gt;key&lt;/code&gt; 同じサイズのタプルでなければなりません。</target>
        </trans-unit>
        <trans-unit id="5cac72dd809c7185a7dcb83183f4f89c08277c85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key_types()&lt;/code&gt; type defines the types of the SNMP INDEX columns for the table. If the table has one single INDEX column, this type should be a single atom, but if the table has multiple INDEX columns, it should be a tuple with atoms.</source>
          <target state="translated">&lt;code&gt;key_types()&lt;/code&gt; タイプは、テーブルのSNMPインデックス列のタイプを定義します。テーブルに単一のINDEX列がある場合、この型は単一のアトムである必要がありますが、テーブルに複数のINDEX列がある場合、アトムを含むタプルである必要があります。</target>
        </trans-unit>
        <trans-unit id="a81df154de4b4c4f859872829034600f9ab7e463" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;key_types()&lt;/code&gt; type is used when creating the index structure, and the &lt;code&gt;key()&lt;/code&gt; type is used when inserting and deleting items from the structure.</source>
          <target state="translated">&lt;code&gt;key_types()&lt;/code&gt; のインデックス構造を作成する際に型が使用され、そして &lt;code&gt;key()&lt;/code&gt; 挿入した構造からアイテムを削除する際のタイプが使用されます。</target>
        </trans-unit>
        <trans-unit id="555d2dccfadbf0b7e5219e84813fd3bd45eaaf5a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;keypos&lt;/code&gt; of the table dumped to file, which is used when loading the table again.</source>
          <target state="translated">ファイルにダンプされたテーブルの &lt;code&gt;keypos&lt;/code&gt; 。テーブルを再度ロードするときに使用されます。</target>
        </trans-unit>
        <trans-unit id="f7afe180cd162bc0e597b4a20726157b5ac4e0bc" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;killproc&lt;/code&gt; procedure is not to be removed. The purpose is here to move from run level 3 (multi-user mode with networking resources) to run level 2 (multi-user mode without such resources), in which Erlang is not to run.</source>
          <target state="translated">&lt;code&gt;killproc&lt;/code&gt; の手順削除してはなりません。ここでの目的は、実行レベル3（ネットワークリソースを使用するマルチユーザーモード）から、Erlangを実行しない実行レベル2（このようなリソースを使用しないマルチユーザーモード）に移行することです。</target>
        </trans-unit>
        <trans-unit id="03c484e3840400c5a5e9dd6a195fc19b5d1faa2e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;label&lt;/code&gt; component is a term which identifies all events belonging to the same sequential trace. If several sequential traces can be active simultaneously, &lt;code&gt;label&lt;/code&gt; is used to identify the separate traces. Default is 0.</source>
          <target state="translated">&lt;code&gt;label&lt;/code&gt; コンポーネントは、同じ順次トレースに属するすべてのイベントを特定する用語です。複数の順次トレースを同時にアクティブにできる場合は、 &lt;code&gt;label&lt;/code&gt; を使用して個別のトレースを識別します。デフォルトは0です。</target>
        </trans-unit>
        <trans-unit id="8ada4b47638c77da9291a9bd47140e9b15fe504a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;largest_free&lt;/code&gt; and &lt;code&gt;number_of_free&lt;/code&gt; tags are currently only returned on a VxWorks system.</source>
          <target state="translated">&lt;code&gt;largest_free&lt;/code&gt; と &lt;code&gt;number_of_free&lt;/code&gt; タグは、現在、唯一のVxWorksのシステムに返されます。</target>
        </trans-unit>
        <trans-unit id="47c985889700e94be33eba8b924bf9a3dfed0540" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;lcnt&lt;/code&gt; module is used to profile the internal ethread locks in the Erlang Runtime System. With &lt;code&gt;lcnt&lt;/code&gt; enabled, internal counters in the runtime system are updated each time a lock is taken. The counters stores information about the number of acquisition tries and the number of collisions that has occurred during the acquisition tries. The counters also record the waiting time a lock has caused for a blocked thread when a collision has occurred.</source>
          <target state="translated">&lt;code&gt;lcnt&lt;/code&gt; モジュールは、アーランランタイムシステムにおける内部ETHREADロックをプロファイルするために使用されます。 &lt;code&gt;lcnt&lt;/code&gt; 有効になって、ランタイムシステムの内部カウンタは、ロックが取られるたびに更新されます。カウンターには、取得の試行回数と、取得の試行中に発生した衝突の数に関する情報が格納されます。カウンターは、衝突が発生したときに、ブロックされたスレッドに対してロックが引き起こした待機時間も記録します。</target>
        </trans-unit>
        <trans-unit id="b187fc5e5c5e9c948af3fd95dc59f5d10e6fe566" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;list_in&lt;/code&gt; term must belong to environment &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;list_in&lt;/code&gt; の用語は、環境に属している必要があり &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2831975c1bbe04314d3d0e20134569769f4c8e7e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;log_mf_h&lt;/code&gt; handler writes all reports to a report logging directory, which is specified when configuring the SASL application.</source>
          <target state="translated">&lt;code&gt;log_mf_h&lt;/code&gt; ハンドラは、SASLアプリケーションを構成するときに指定されたディレクトリをログレポートにすべてのレポートを書き込みます。</target>
        </trans-unit>
        <trans-unit id="c42c9a83ba0cfd927135745afcf8a51d16e0e657" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;map_in&lt;/code&gt; term must belong to environment &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;map_in&lt;/code&gt; の用語は、環境に属している必要があり &lt;code&gt;env&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4596e3e12adaafb27a37675223c89e5e8290b48e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;match_fun&lt;/code&gt; takes two arguments and returns either &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;default&lt;/code&gt;. The value &lt;code&gt;default&lt;/code&gt; will invoke the default match function.</source>
          <target state="translated">&lt;code&gt;match_fun&lt;/code&gt; は、いずれかの二つの引数とリターンを取る &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; または &lt;code&gt;default&lt;/code&gt; 。値 &lt;code&gt;default&lt;/code&gt; は、デフォルトの一致関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8b940d5eaace9d3d7a8384b7f450246290a324ec" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;max_path_length&lt;/code&gt; is the maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if &lt;code&gt;max_path_length&lt;/code&gt; is 0, the PEER must be signed by the trusted ROOT-CA directly, if it is 1, the path can be PEER, CA, ROOT-CA, if it is 2, the path can be PEER, CA, CA, ROOT-CA, and so on.</source>
          <target state="translated">&lt;code&gt;max_path_length&lt;/code&gt; は、有効な証明書パスにおけるピア証明書に従うことができ、自己発行でない中間証明書の最大数です。したがって、 &lt;code&gt;max_path_length&lt;/code&gt; が0の場合、PEERはトラステッドROOT-CAによって直接署名される必要があります。1の場合、パスはPEER、CA、ROOT-CA、2の場合、パスはPEER、CA、 CA、ROOT-CAなど。</target>
        </trans-unit>
        <trans-unit id="38b7f85ec648548ce222a27921a129e6b78760bf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mib_to_hrl&lt;/code&gt; generator can be invoked from the OS command line by using the command &lt;code&gt;erlc&lt;/code&gt;. &lt;code&gt;erlc&lt;/code&gt; recognizes the extension &lt;code&gt;.bin&lt;/code&gt;, and invokes this function for files with that extension.</source>
          <target state="translated">&lt;code&gt;mib_to_hrl&lt;/code&gt; の発生は、コマンド使用して、OSのコマンドラインから呼び出すことができる &lt;code&gt;erlc&lt;/code&gt; を。 &lt;code&gt;erlc&lt;/code&gt; は拡張子 &lt;code&gt;.bin&lt;/code&gt; を認識し、その拡張子を持つファイルに対してこの関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8c1d578ccfe04ced0a4858e6e98da0fd19d29b4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;mods_and_procs&lt;/code&gt; and &lt;code&gt;funcs_and_procs&lt;/code&gt; filters are equivalent to the &lt;code&gt;modules&lt;/code&gt; and &lt;code&gt;functions&lt;/code&gt; filters respectively, except that each module or function can have many vertical lines, one for each process it resides on.</source>
          <target state="translated">&lt;code&gt;mods_and_procs&lt;/code&gt; と &lt;code&gt;funcs_and_procs&lt;/code&gt; フィルタは、と等価である &lt;code&gt;modules&lt;/code&gt; 及び &lt;code&gt;functions&lt;/code&gt; 、各モジュールまたは機能が多くの垂直ライン、それが上に存在する各プロセスのための1つを持つことができることを除いて、それぞれフィルタ。</target>
        </trans-unit>
        <trans-unit id="629670db402f7cde732ec01282578c7159f3daad" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; option makes it possible for the user to provide their own callback module. The &lt;code&gt;receive_message/4&lt;/code&gt; or &lt;code&gt;process_received_message/4&lt;/code&gt; functions of this module is called when a new message is received (which one depends on the size of the message; small - receive_message, large - process_received_message). Default value is &lt;strong&gt;megaco&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オプションは、それが可能なユーザーは、独自のコールバックモジュールを提供できるようになります。このモジュールの &lt;code&gt;receive_message/4&lt;/code&gt; または &lt;code&gt;process_received_message/4&lt;/code&gt; 関数は、新しいメッセージが受信されたときに呼び出されます（メッセージのサイズによって異なります。small-receive_message、large-process_received_message）。デフォルト値は&lt;strong&gt;megaco&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="4039dc8c38a872b706a72298a0693bdeed53b2b9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module&lt;/code&gt; option makes it possible for the user to provide their own callback module. The functions &lt;code&gt;receive_message/4&lt;/code&gt; or &lt;code&gt;process_received_message/4&lt;/code&gt; of this module is called when a new message is received (which one depends on the size of the message; small - receive_message, large - process_received_message). Default value is &lt;strong&gt;megaco&lt;/strong&gt;.</source>
          <target state="translated">&lt;code&gt;module&lt;/code&gt; オプションは、それが可能なユーザーは、独自のコールバックモジュールを提供できるようになります。このモジュールの関数 &lt;code&gt;receive_message/4&lt;/code&gt; または &lt;code&gt;process_received_message/4&lt;/code&gt; は、新しいメッセージが受信されたときに呼び出されます（メッセージのサイズによって異なります。small-receive_message、large-process_received_message）。デフォルト値は&lt;strong&gt;megaco&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="1fa747bd68db4bc817397fca349049b0c0c2bdc3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;module_info/0&lt;/code&gt; function in each module, returns a list of &lt;code&gt;{Key,Value}&lt;/code&gt; tuples with information about the module. Currently, the list contain tuples with the following &lt;code&gt;Key&lt;/code&gt;s: &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;attributes&lt;/code&gt;, &lt;code&gt;compile&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt;, &lt;code&gt;md5&lt;/code&gt; and &lt;code&gt;native&lt;/code&gt;. The order and number of tuples may change without prior notice.</source>
          <target state="translated">各モジュールの &lt;code&gt;module_info/0&lt;/code&gt; 関数は、モジュールに関する情報を含む &lt;code&gt;{Key,Value}&lt;/code&gt; タプルのリストを返します。現在、リストには次の &lt;code&gt;Key&lt;/code&gt; 持つタプルが含まれています： &lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;attributes&lt;/code&gt; 、 &lt;code&gt;compile&lt;/code&gt; 、 &lt;code&gt;exports&lt;/code&gt; 、 &lt;code&gt;md5&lt;/code&gt; 、および &lt;code&gt;native&lt;/code&gt; 。タプルの順番や数は、予告なく変更される場合があります。</target>
        </trans-unit>
        <trans-unit id="13c3af4d94c692779fc270d51ec8836243a76c6e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; filter shows each module as a vertical line in the sequence diagram. External function calls/returns are shown as interactions between modules, and internal function calls/returns are shown as activities within a module.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; フィルタは、シーケンス図の縦線として、各モジュールを示しています。外部関数呼び出し/戻りはモジュール間の相互作用として示され、内部関数呼び出し/戻りはモジュール内のアクティビティとして示されます。</target>
        </trans-unit>
        <trans-unit id="220a661131b4c202e09615fa7794089d54019aa4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; key is optional. If it is not given, it defaults to &lt;code&gt;[M]&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; comes from the child's start &lt;code&gt;{M,F,A}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; キーはオプションです。指定しない場合、デフォルトは &lt;code&gt;[M]&lt;/code&gt; になり、 &lt;code&gt;M&lt;/code&gt; は子の開始 &lt;code&gt;{M,F,A}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3890e0d50c45d6e12a18dbc1aec19b335349f526" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;modules&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;[M]&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; comes from the child's start &lt;code&gt;{M,F,A}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;modules&lt;/code&gt; キーはオプションです。指定されていない場合、デフォルトは &lt;code&gt;[M]&lt;/code&gt; になり、 &lt;code&gt;M&lt;/code&gt; は子の開始 &lt;code&gt;{M,F,A}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b73b08f6879f5bf7ade5d9880f8cf1f512709fdb" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;native&lt;/code&gt; time unit is determined at runtime system start, and remains the same until the runtime system terminates. If a runtime system is stopped and then started again (even on the same machine), the &lt;code&gt;native&lt;/code&gt; time unit of the new runtime system instance can differ from the &lt;code&gt;native&lt;/code&gt; time unit of the old runtime system instance.</source>
          <target state="translated">&lt;code&gt;native&lt;/code&gt; 時間単位は、ランタイムシステムの開始時に決定、およびランタイムシステムが終了するまで同じままです。ランタイムシステムが停止して（でも同じマシン上で）再び開始されている場合は、 &lt;code&gt;native&lt;/code&gt; 新しいランタイムシステムインスタンスの時間単位が異なることが &lt;code&gt;native&lt;/code&gt; 古いランタイムシステムインスタンスの時間単位。</target>
        </trans-unit>
        <trans-unit id="e77d232e74f552cf373975f9713b96716de00e8d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net_kernel&lt;/code&gt; process terminated.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; のプロセスが終了しました。</target>
        </trans-unit>
        <trans-unit id="33c94a1185ccb7943d79b55ac568ef3bf3963cc5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;net_ticktime&lt;/code&gt; changes must be initiated on all nodes in the network (with the same &lt;code&gt;NetTicktime&lt;/code&gt;) before the end of any transition period on any node; otherwise connections can erroneously be disconnected.</source>
          <target state="translated">&lt;code&gt;net_ticktime&lt;/code&gt; 変化は、（同じで、ネットワーク内のすべてのノード上で開始されなければならない &lt;code&gt;NetTicktime&lt;/code&gt; 任意のノード上の任意の遷移期間が終了する前に）。そうしないと、接続が誤って切断される可能性があります。</target>
        </trans-unit>
        <trans-unit id="88d35276b805d419b7b2b451eec9f43dfbe3fb9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; and &lt;code&gt;reuse&lt;/code&gt; options might seem convenient in a production system, but consider that the logs grow indefinitely during the system lifetime and cannot be truncated, except if the service is restarted.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; および &lt;code&gt;reuse&lt;/code&gt; オプションは、生産システムに便利なように見えるが、ログは、システムの寿命の間に無限に成長し、サービスが再起動された場合を除き、切り捨てられることができないことを考えるかもしれません。</target>
        </trans-unit>
        <trans-unit id="ffcaa93ee15ba09c39cb246f4b83efb0388fde54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; function creates a new variable in the database with a default value as defined in the MIB, or a zero value (depending on the type).</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; 機能は、MIBで定義されているデフォルト値、又はゼロ値（タイプに応じて）を使用してデータベース内に新しい変数を作成します。</target>
        </trans-unit>
        <trans-unit id="2000d16d511f7d3865cad4dec402c68d50d75e6b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;new&lt;/code&gt; function creates the table if it does not exist, but only if the database is the SNMP internal db.</source>
          <target state="translated">&lt;code&gt;new&lt;/code&gt; それが存在しない場合、この関数は、テーブルを作成しますが、データベースは、SNMP内部DBの場合のみ。</target>
        </trans-unit>
        <trans-unit id="2d170f32fbd322133bb3d50a0e41f54d86fe7d23" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nteventlog&lt;/code&gt; module is used to implement &lt;code&gt;os_sup&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;nteventlog&quot;&gt;nteventlog(3)&lt;/a&gt;&lt;/code&gt;. Note that the start functions of &lt;code&gt;nteventlog&lt;/code&gt; does not need to be used, as in this case the process is started automatically as part of the OS_Mon supervision tree.</source>
          <target state="translated">&lt;code&gt;nteventlog&lt;/code&gt; モジュールは、os_supを実装するために使用され &lt;code&gt;os_sup&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;nteventlog&quot;&gt;nteventlog(3)&lt;/a&gt;&lt;/code&gt; を参照してください。 &lt;code&gt;nteventlog&lt;/code&gt; の開始関数を使用する必要がないことに注意してください。この場合、プロセスはOS_Mon監視ツリーの一部として自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="fe241cbaac0cb96b60c93ae96dc9889cf2b5f3f8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;nteventlog&lt;/code&gt; module is used to implement &lt;code&gt;os_sup&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;nteventlog&quot;&gt;nteventlog(3)&lt;/a&gt;&lt;/code&gt;. Note that the start functions of &lt;code&gt;nteventlog&lt;/code&gt; does not need to be used, in this case the process is started automatically as part of the OS_Mon supervision tree.</source>
          <target state="translated">&lt;code&gt;nteventlog&lt;/code&gt; モジュールは、os_supを実装するために使用され &lt;code&gt;os_sup&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;nteventlog&quot;&gt;nteventlog(3)&lt;/a&gt;&lt;/code&gt; を参照してください。 &lt;code&gt;nteventlog&lt;/code&gt; の開始関数を使用する必要がないことに注意してください。この場合、プロセスはOS_Mon監視ツリーの一部として自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="e2bfdbeebfa5a9fe7cf75fe729c76e05070db8fe" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;obj&lt;/code&gt; argument is a pointer to the resource. The only allowed use for the resource in the destructor is to access its user data one final time. The destructor is guaranteed to be the last callback before the resource is deallocated.</source>
          <target state="translated">&lt;code&gt;obj&lt;/code&gt; 引数は、リソースへのポインタです。デストラクタ内のリソースの唯一の許可された使用は、ユーザーデータに最後に1回アクセスすることです。デストラクタは、リソースが割り当て解除される前の最後のコールバックであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="7ceb6922f1bc2b55a11a196aefd83fd27d2d6cd6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;of&lt;/code&gt; operator returns &lt;code&gt;false&lt;/code&gt; if no chain of calls between the given constants can be found.</source>
          <target state="translated">オペレータが返し &lt;code&gt;false&lt;/code&gt; 所定の定数との間のコールのチェーンが見つからない場合。 &lt;code&gt;of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="edc8f1a9759344cda2be6a01281eb7cf8541e7d3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;of&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;after&lt;/code&gt; sections are all optional, as long as there is at least a &lt;code&gt;catch&lt;/code&gt; or an &lt;code&gt;after&lt;/code&gt; section. So the following are valid &lt;code&gt;try&lt;/code&gt; expressions:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; 、及び &lt;code&gt;after&lt;/code&gt; の節では、限り、少なくとも存在するように、全てのオプションで &lt;code&gt;catch&lt;/code&gt; または &lt;code&gt;after&lt;/code&gt; セクションでは。したがって、以下は有効な &lt;code&gt;try&lt;/code&gt; 式です。 &lt;code&gt;of&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ebc057ad457a36d0493c7c4827deec0d89f9db4c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;oid()&lt;/code&gt; type is used to represent an ASN.1 OBJECT IDENTIFIER.</source>
          <target state="translated">&lt;code&gt;oid()&lt;/code&gt; タイプはASN.1オブジェクト識別子を表すために使用されます。</target>
        </trans-unit>
        <trans-unit id="c317ddfbc946c81f789ac77305cd9d495bd67257" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ordered_set&lt;/code&gt; works on the &lt;strong&gt;Erlang term order&lt;/strong&gt; and no defined order exists between an &lt;code&gt;integer()&lt;/code&gt; and a &lt;code&gt;float()&lt;/code&gt; that extends to the same value. Hence the key &lt;code&gt;1&lt;/code&gt; and the key &lt;code&gt;1.0&lt;/code&gt; are regarded as equal in an &lt;code&gt;ordered_set&lt;/code&gt; table.</source>
          <target state="translated">&lt;code&gt;ordered_set&lt;/code&gt; は、上で動作&lt;strong&gt;Erlangの用語の順序&lt;/strong&gt;と全く定義された順序は、間に存在していない &lt;code&gt;integer()&lt;/code&gt; と &lt;code&gt;float()&lt;/code&gt; と同じ値まで延びています。したがって、キー &lt;code&gt;1&lt;/code&gt; とキー &lt;code&gt;1.0&lt;/code&gt; は、 &lt;code&gt;ordered_set&lt;/code&gt; テーブルでは等しいと見なされます。</target>
        </trans-unit>
        <trans-unit id="23f84a949184c1de5bc030233161e9c4c0b92121" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;originating&lt;/code&gt; options effects discovery initiated by this agent.</source>
          <target state="translated">&lt;code&gt;originating&lt;/code&gt; のオプションの効果の発見は、このエージェントによって開始しました。</target>
        </trans-unit>
        <trans-unit id="ccd973135b90cc097810c0c2b724141ea8487e4d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;otp_patch_apply&lt;/code&gt; syntax:</source>
          <target state="translated">&lt;code&gt;otp_patch_apply&lt;/code&gt; 構文：</target>
        </trans-unit>
        <trans-unit id="8bdd7004ea407fa82763663af39ba15a0e1f25f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;otp_patch_apply&lt;/code&gt; tool utilizes the &lt;code&gt;runtime_dependencies&lt;/code&gt; tag in the &lt;code&gt;application resource file&lt;/code&gt;. This information is used to determine if the patch can be installed in the given Erlang/OTP installation directory.</source>
          <target state="translated">&lt;code&gt;otp_patch_apply&lt;/code&gt; ツールが利用 &lt;code&gt;runtime_dependencies&lt;/code&gt; の中にタグを &lt;code&gt;application resource file&lt;/code&gt; 。この情報は、指定されたErlang / OTPインストールディレクトリにパッチをインストールできるかどうかを判断するために使用されます。</target>
        </trans-unit>
        <trans-unit id="8315d03358900e027c0447a981ac995840fffee4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;output&lt;/code&gt; function allocates the work area of the asynchronous function. As we use C++, we use a struct, and stuff the data in it. We must copy the original data, it is not valid after we have returned from the &lt;code&gt;output&lt;/code&gt; function, and the &lt;code&gt;do_perm&lt;/code&gt; function is called later, and from another thread. We return no data here, instead it is sent later from the &lt;code&gt;ready_async&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;output&lt;/code&gt; 関数は非同期関数の作業領域を確保します。C ++を使用しているため、構造体を使用し、その中にデータを入れています。元のデータをコピーする必要があります。 &lt;code&gt;output&lt;/code&gt; 関数から戻った後は無効になり、 &lt;code&gt;do_perm&lt;/code&gt; 関数が呼び出され、別のスレッドから呼び出されます。ここではデータは返されませんが、 &lt;code&gt;ready_async&lt;/code&gt; コールバックから送信されます。</target>
        </trans-unit>
        <trans-unit id="71aa4ffe227f9aa33da51854c389c54a822efeef" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;parse&lt;/code&gt; format is an internal representation that can be passed to &lt;code&gt;&lt;a href=&quot;#flatten-1&quot;&gt;flatten/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#format-1&quot;&gt;format/1&lt;/a&gt;&lt;/code&gt;, while the &lt;code&gt;forms&lt;/code&gt; format can be passed to &lt;code&gt;compile:forms/2&lt;/code&gt;. The &lt;code&gt;erl&lt;/code&gt; and &lt;code&gt;hrl&lt;/code&gt; formats are returned as iolists.</source>
          <target state="translated">&lt;code&gt;parse&lt;/code&gt; フォーマットをに渡すことができる内部表現である &lt;code&gt;&lt;a href=&quot;#flatten-1&quot;&gt;flatten/1&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#format-1&quot;&gt;format/1&lt;/a&gt;&lt;/code&gt; ながら、 &lt;code&gt;forms&lt;/code&gt; フォーマットに渡すことができる &lt;code&gt;compile:forms/2&lt;/code&gt; 。 &lt;code&gt;erl&lt;/code&gt; と &lt;code&gt;hrl&lt;/code&gt; フォーマットはiolistsとして返されます。</target>
        </trans-unit>
        <trans-unit id="9ac6e1b83188e6ba00253b80c4e4e283b31e07a1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;path&lt;/code&gt; option is used for pointing out the old version of all applications. (The new versions are already in the code path - assuming of course that the Erlang node on which this is executed is running the correct version of Erlang/OTP.)</source>
          <target state="translated">&lt;code&gt;path&lt;/code&gt; オプションは、すべてのアプリケーションの古いバージョンを指摘するために使用されています。（新しいバージョンはすでにコードパスにあります-もちろん、これが実行されるErlangノードが正しいバージョンのErlang / OTPを実行していると仮定します。）</target>
        </trans-unit>
        <trans-unit id="24e00a9507fa707a286aad7abe3e3cd07325080a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pending_driver&lt;/code&gt;&lt;code&gt;MonitorOption&lt;/code&gt; is by far the most useful. It must be used to ensure that the driver really is unloaded and the ports closed whenever option &lt;code&gt;kill_ports&lt;/code&gt; is used, or the driver can have been loaded with driver option &lt;code&gt;kill_ports&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pending_driver&lt;/code&gt; &lt;code&gt;MonitorOption&lt;/code&gt; 、これまでで最も有用です。これは、オプション &lt;code&gt;kill_ports&lt;/code&gt; を使用する場合は常にドライバーが実際にアンロードされ、ポートが閉じていることを確認するために使用する必要があります。または、ドライバーオプション &lt;code&gt;kill_ports&lt;/code&gt; でドライバーをロードできます。</target>
        </trans-unit>
        <trans-unit id="7752015e6089336570fa00078221b8ccabc19aba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perf_counter&lt;/code&gt; time unit behaves much in the same way as the &lt;code&gt;native&lt;/code&gt; time unit. That is, it can differ between runtime restarts. To get values of this type, call &lt;code&gt; os:perf_counter/0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;perf_counter&lt;/code&gt; の時間単位はずっと同じように動作 &lt;code&gt;native&lt;/code&gt; 時間単位。つまり、ランタイムの再起動間で異なる可能性があります。このタイプの値を取得するには、 &lt;code&gt; os:perf_counter/0&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="f36e06928220660615452de6fef2258f5362fc89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;perf_counter&lt;/code&gt; time unit behaves much in the same way as the &lt;code&gt;native&lt;/code&gt; time unit. That is, it can differ between runtime restarts. To get values of this type, call &lt;code&gt;os:perf_counter/0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;perf_counter&lt;/code&gt; の時間単位はずっと同じように動作 &lt;code&gt;native&lt;/code&gt; 時間単位。つまり、ランタイムの再起動によって異なる場合があります。このタイプの値を取得するには、 &lt;code&gt;os:perf_counter/0&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3b9f8d1ef7145eb704be87bd7e74e2fde38ff315" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pg2&lt;/code&gt; module is deprecated as of OTP 23 and scheduled for removal in OTP 24. You are advised to replace the usage of &lt;code&gt;pg2&lt;/code&gt; with &lt;code&gt;pg&lt;/code&gt;. &lt;code&gt;pg&lt;/code&gt; has a similar API, but with an implementation that is more scalable. See the documentation of &lt;code&gt;pg&lt;/code&gt; for more information about differences.</source>
          <target state="translated">&lt;code&gt;pg2&lt;/code&gt; モジュールは、OTP 23の非推奨とあなたがの利用置き換えることをお勧めしますOTP 24に除去するために予定されている &lt;code&gt;pg2&lt;/code&gt; して &lt;code&gt;pg&lt;/code&gt; 。 &lt;code&gt;pg&lt;/code&gt; にも同様のAPIがありますが、実装はよりスケーラブルです。違いの詳細については、 &lt;code&gt;pg&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d3ddb3f0153c3890640ae834ac81e6898f916068" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pid&lt;/code&gt; parameter is a pointer to a &lt;code&gt;erlang_pid&lt;/code&gt; that the function will update with the pid associated with the global name, if successful.</source>
          <target state="translated">&lt;code&gt;pid&lt;/code&gt; パラメータはへのポインタである &lt;code&gt;erlang_pid&lt;/code&gt; 関数が成功した場合、グローバル名に関連付けられたPIDで更新されていること。</target>
        </trans-unit>
        <trans-unit id="8ff6f3b7d18bc68a03a8f098e3306bea8afa3388" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pread/3,4&lt;/code&gt; function reads from a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#read-3&quot;&gt;read/3,4&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;pread/3,4&lt;/code&gt; 機能を組み合わせることで、指定された位置から読み取り &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#read-3&quot;&gt;read/3,4&lt;/a&gt;&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="1d5e46480f01a8aa86737f226ba56bdcb171312f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;prev&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; fields in the elements of the list contain the value of the pointer, a modification marker, and a deleted marker. Memory operations on these fields are done using atomic memory operations. When a thread has set the modification marker in a field, no-one except the thread that set the marker is allowed to modify the field. If multiple modification markers need to be set, we always begin with &lt;code&gt;next&lt;/code&gt; fields followed by &lt;code&gt;prev&lt;/code&gt; fields in the order following the actual pointers. This guarantees that no deadlocks will occur.</source>
          <target state="translated">リストの要素の &lt;code&gt;prev&lt;/code&gt; フィールドと &lt;code&gt;next&lt;/code&gt; フィールドには、ポインターの値、変更マーカー、および削除されたマーカーが含まれています。これらのフィールドのメモリ操作は、アトミックメモリ操作を使用して実行されます。スレッドがフィールドに変更マーカーを設定した場合、マーカーを設定したスレッド以外の誰もフィールドを変更できません。複数の変更マーカーを設定する必要がある場合は、常に &lt;code&gt;next&lt;/code&gt; フィールドから始めて、実際のポインターに続く順序で &lt;code&gt;prev&lt;/code&gt; フィールドが続きます。これにより、デッドロックが発生しないことが保証されます。</target>
        </trans-unit>
        <trans-unit id="8ade504b785b0942df35eaf3b82afa6476a54cf7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priv&lt;/code&gt; directory holds assets that the application needs during runtime. Executables should reside in &lt;code&gt;priv/bin&lt;/code&gt; and dynamically-linked libraries should reside in &lt;code&gt;priv/lib&lt;/code&gt;. Other assets are free to reside within the &lt;code&gt;priv&lt;/code&gt; directory but it is recommended it does so in a structured manner.</source>
          <target state="translated">&lt;code&gt;priv&lt;/code&gt; ディレクトリは、アプリケーションが実行時に必要であることの資産を保持しています。実行可能 &lt;code&gt;priv/bin&lt;/code&gt; はpriv / binに常駐し、動的にリンクされたライブラリは &lt;code&gt;priv/lib&lt;/code&gt; に常駐する必要があります。その他のアセットは、 &lt;code&gt;priv&lt;/code&gt; ディレクトリ内に自由に配置できますが、構造化された方法で配置することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="6b2507225c4f70efae176a5a0a6b4b0633e1f261" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;priv&lt;/code&gt; directory holds assets that the application needs during runtime. Executables should reside in &lt;code&gt;priv/bin&lt;/code&gt; and dynamically-linked libraries should reside in &lt;code&gt;priv/lib&lt;/code&gt;. Other assets are free to reside within the &lt;code&gt;priv&lt;/code&gt; directory but it is recommended they do so in a structured manner.</source>
          <target state="translated">&lt;code&gt;priv&lt;/code&gt; ディレクトリは、アプリケーションが実行時に必要であることの資産を保持しています。実行可能 &lt;code&gt;priv/bin&lt;/code&gt; はpriv / binに存在し、ダイナミックリンクライブラリは &lt;code&gt;priv/lib&lt;/code&gt; に存在する必要があります。他のアセットは &lt;code&gt;priv&lt;/code&gt; ディレクトリ内に自由に常駐できますが、構造化された方法で常駐することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="a744587962b51e3c606263db57ff07f274e44a97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;processes&lt;/code&gt; filter is the only filter showing all trace messages from a trace log. Each vertical line in the sequence diagram represents a process. Erlang messages, spawn, and link/unlink are typical interactions between processes. Function calls, scheduling, and garbage collection, are typical activities within a process. &lt;code&gt;processes&lt;/code&gt; is the default filter.</source>
          <target state="translated">&lt;code&gt;processes&lt;/code&gt; フィルタは、トレースログからのすべてのトレースメッセージを示すフィルタのみです。シーケンス図の各縦線はプロセスを表しています。Erlangメッセージ、スポーン、リンク/リンク解除は、プロセス間の典型的な相互作用です。関数呼び出し、スケジューリング、およびガベージコレクションは、プロセス内の典型的なアクティビティです。 &lt;code&gt;processes&lt;/code&gt; はデフォルトのフィルターです。</target>
        </trans-unit>
        <trans-unit id="3861f99e16c84fe5707ca3129e815480d2eca579" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;pwrite/3,4&lt;/code&gt; function writes to a specified position, combining the &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#write-3&quot;&gt;write/3,4&lt;/a&gt;&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;pwrite/3,4&lt;/code&gt; 関数は、合成、指定された位置に書き込む &lt;code&gt;&lt;a href=&quot;#position-3&quot;&gt;position/3&lt;/a&gt;&lt;/code&gt; 及び &lt;code&gt;&lt;a href=&quot;#write-3&quot;&gt;write/3,4&lt;/a&gt;&lt;/code&gt; 機能します。</target>
        </trans-unit>
        <trans-unit id="a4939b64de1d53ed04f7d5997288438bc45d2be8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qlc&lt;/code&gt; module evaluates this differently depending on the query handles &lt;code&gt;QH1&lt;/code&gt; and &lt;code&gt;QH2&lt;/code&gt;. If, for example, &lt;code&gt;X2&lt;/code&gt; is matched against the key of a QLC table, the lookup join method traverses the objects of &lt;code&gt;QH2&lt;/code&gt; while looking up key values in the table. However, if not &lt;code&gt;X2&lt;/code&gt; or &lt;code&gt;Y2&lt;/code&gt; is matched against the key or an indexed position of a QLC table, the merge join method ensures that &lt;code&gt;QH1&lt;/code&gt; and &lt;code&gt;QH2&lt;/code&gt; are both sorted on position 2 and next do the join by traversing the objects one by one.</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュール評価し、これは、異なるクエリハンドルに依存 &lt;code&gt;QH1&lt;/code&gt; と &lt;code&gt;QH2&lt;/code&gt; 。たとえば、 &lt;code&gt;X2&lt;/code&gt; がQLCテーブルのキーと照合される場合、ルックアップ結合メソッドは、テーブル内のキー値を検索しながら &lt;code&gt;QH2&lt;/code&gt; のオブジェクトをトラバースします。ただし、 &lt;code&gt;X2&lt;/code&gt; または &lt;code&gt;Y2&lt;/code&gt; がQLCテーブルのキーまたはインデックス付きの位置と一致しない場合、マージ結合メソッドにより、 &lt;code&gt;QH1&lt;/code&gt; と &lt;code&gt;QH2&lt;/code&gt; の両方が位置2でソートされ、次にオブジェクトを1つずつトラバースすることで結合が実行されます。</target>
        </trans-unit>
        <trans-unit id="7bdc283a4e0d387d9b4fe3c9cce9b3813bddfd9b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qlc&lt;/code&gt; module supports fast join of two query handles. Fast join is possible if some position &lt;code&gt;P1&lt;/code&gt; of one query handler and some position &lt;code&gt;P2&lt;/code&gt; of another query handler are tested for equality. Two fast join methods are provided:</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュール支持体は、高速2つのクエリハンドルの参加します。高速いくつかの位置の場合に可能である参加 &lt;code&gt;P1&lt;/code&gt; 1つのクエリハンドラと、いくつかの位置の &lt;code&gt;P2&lt;/code&gt; 別のクエリハンドラのは、平等のためにテストされています。2つの高速結合メソッドが提供されています。</target>
        </trans-unit>
        <trans-unit id="4dc69ce9649099f1a16568929e4dca5a9ec4a8ff" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;qlc&lt;/code&gt; module warns at compile time if a QLC combines query handles in such a way that more than one join is possible. That is, no query planner is provided that can select a good order between possible join operations. It is up to the user to order the joins by introducing query handles.</source>
          <target state="translated">&lt;code&gt;qlc&lt;/code&gt; モジュールは、QLCが複数の結合が可能な方法でクエリハンドルを組み合わせると、コンパイル時に警告します。つまり、可能な結合操作間で適切な順序を選択できるクエリプランナーは提供されません。クエリハンドルを導入して結合を順序付けるのはユーザー次第です。</target>
        </trans-unit>
        <trans-unit id="1ac4329d09995d8cc50dafbae48fcd60ee3ef172" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;re&lt;/code&gt; module allows for matching Unicode strings as a special option. As the library is centered on matching in binaries, the Unicode support is UTF-8-centered.</source>
          <target state="translated">&lt;code&gt;re&lt;/code&gt; モジュールは、特別なオプションとしてUnicode文字列を照合することができます。ライブラリはバイナリでのマッチングを中心としているため、UnicodeサポートはUTF-8を中心にしています。</target>
        </trans-unit>
        <trans-unit id="412cfcfb79171f8451db72dbfc6769aeeae48e5c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;read_ahead&lt;/code&gt; buffer is also highly used by function &lt;code&gt;read_line/1&lt;/code&gt; in &lt;code&gt;raw&lt;/code&gt; mode, therefore this option is recommended (for performance reasons) when accessing raw files using that function.</source>
          <target state="translated">&lt;code&gt;read_ahead&lt;/code&gt; バッファはまた、高度に機能によって使用される &lt;code&gt;read_line/1&lt;/code&gt; で &lt;code&gt;raw&lt;/code&gt; その関数を使用してRAWファイルにアクセスする場合、したがって、このオプションは、（パフォーマンス上の理由）が推奨されるモード。</target>
        </trans-unit>
        <trans-unit id="1d7e68fecfc79e8020cc09ac14cad9865216cb67" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ready_io&lt;/code&gt; function is called when the socket we got from postgres is ready for input or output. Here we first check if we are connecting to the database. In that case, we check connection status and return OK if the connection is successful, or error if it is not. If the connection is not yet established, we simply return; &lt;code&gt;ready_io&lt;/code&gt; is called again.</source>
          <target state="translated">&lt;code&gt;ready_io&lt;/code&gt; 我々はpostgresのから得たソケットが入力または出力のための準備ができたときに関数が呼び出されます。ここでは、まずデータベースに接続しているかどうかを確認します。その場合、接続ステータスをチェックし、接続が成功した場合はOKを返し、失敗した場合はエラーを返します。接続がまだ確立されていない場合は、単に戻ります。 &lt;code&gt;ready_io&lt;/code&gt; が再び呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c5f336c46236fef6d33a9737fecfbc45848cc85a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receive&lt;/code&gt; construct is used to allow processes to wait for messages from other processes. It has the following format:</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; 構築物のプロセスが他のプロセスからのメッセージを待つことを可能にするために使用されます。次の形式があります。</target>
        </trans-unit>
        <trans-unit id="37481113af1fc6bf67ec51a1b4573b5766d4940d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receive&lt;/code&gt; expression can be augmented with a timeout:</source>
          <target state="translated">&lt;code&gt;receive&lt;/code&gt; 式がタイムアウトで拡張することができます。</target>
        </trans-unit>
        <trans-unit id="42725fa1b02c7390bf310c7b5f650def33047bd8" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;receiver&lt;/code&gt; will first be sent the &lt;code&gt;snmp_targets&lt;/code&gt; message, and then for each address in &lt;code&gt;Addresses&lt;/code&gt; list, one of the two &lt;code&gt;snmp_notification&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;receiver&lt;/code&gt; 最初に送信される &lt;code&gt;snmp_targets&lt;/code&gt; の各アドレスに、メッセージを、および &lt;code&gt;Addresses&lt;/code&gt; リスト、二つのうちの一つ &lt;code&gt;snmp_notification&lt;/code&gt; のメッセージ。</target>
        </trans-unit>
        <trans-unit id="d783190c30a4c184095fc9fe7326cabca7bed37e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refc&lt;/code&gt; field has been removed. The reference count of an &lt;code&gt;ErlDrvBinary&lt;/code&gt; is now stored elsewhere. The reference count of an &lt;code&gt;ErlDrvBinary&lt;/code&gt; can be accessed through &lt;code&gt;&lt;a href=&quot;#driver_binary_get_refc&quot;&gt; driver_binary_get_refc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#driver_binary_inc_refc&quot;&gt; driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#driver_binary_dec_refc&quot;&gt; driver_binary_dec_refc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refc&lt;/code&gt; フィールドが削除されました。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; の参照カウントが別の場所に保存されるようになりました。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; の参照カウントには、 &lt;code&gt;&lt;a href=&quot;#driver_binary_get_refc&quot;&gt; driver_binary_get_refc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#driver_binary_inc_refc&quot;&gt; driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#driver_binary_dec_refc&quot;&gt; driver_binary_dec_refc&lt;/a&gt;&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="e35f7f5fad0e5d56316957219823696de6e6786c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;refc&lt;/code&gt; field has been removed. The reference count of an &lt;code&gt;ErlDrvBinary&lt;/code&gt; is now stored elsewhere. The reference count of an &lt;code&gt;ErlDrvBinary&lt;/code&gt; can be accessed through &lt;code&gt;&lt;a href=&quot;#driver_binary_get_refc&quot;&gt;driver_binary_get_refc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#driver_binary_inc_refc&quot;&gt;driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#driver_binary_dec_refc&quot;&gt;driver_binary_dec_refc&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;refc&lt;/code&gt; フィールドが削除されました。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; の参照カウントが別の場所に保存されるようになりました。 &lt;code&gt;ErlDrvBinary&lt;/code&gt; の参照カウントには、 &lt;code&gt;&lt;a href=&quot;#driver_binary_get_refc&quot;&gt;driver_binary_get_refc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#driver_binary_inc_refc&quot;&gt;driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#driver_binary_dec_refc&quot;&gt;driver_binary_dec_refc&lt;/a&gt;&lt;/code&gt; を介してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="82f0b91245f77a3b886c273dd05b9767b42d775d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;registry&lt;/code&gt; functionality part of &lt;code&gt;erl_interface&lt;/code&gt; is as of &lt;code&gt;&lt;a href=&quot;deprecations#otp-23&quot;&gt;OTP 23 deprecated&lt;/a&gt;&lt;/code&gt; and will be removed in OTP 24.</source>
          <target state="translated">&lt;code&gt;erl_interface&lt;/code&gt; の &lt;code&gt;registry&lt;/code&gt; 機能部分は、 &lt;code&gt;&lt;a href=&quot;deprecations#otp-23&quot;&gt;OTP 23 deprecated&lt;/a&gt;&lt;/code&gt; なり、OTP24で削除される予定です。</target>
        </trans-unit>
        <trans-unit id="660ed54d5ac1fcd2169600b38b40bd925d66cf86" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;release_handler&lt;/code&gt; copies these files to the &lt;code&gt;bin&lt;/code&gt; directory in the client directory at the master nodes whenever a new release is made permanent.</source>
          <target state="translated">&lt;code&gt;release_handler&lt;/code&gt; コピーに、これらのファイル &lt;code&gt;bin&lt;/code&gt; 新しいリリースは永久的なものにするたびに、マスタノードでのクライアントのディレクトリ内のディレクトリを。</target>
        </trans-unit>
        <trans-unit id="56830d582041a2d058cd8b9ca80ec725e5c3e287" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reload&lt;/code&gt; option can be either of the following:</source>
          <target state="translated">&lt;code&gt;reload&lt;/code&gt; オプションは、いずれか、次のことができます。</target>
        </trans-unit>
        <trans-unit id="207c0a4a6dd7d54555e6c470a0c170ec46378f8f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;relup&lt;/code&gt; file contains instructions for how to upgrade to, or downgrade from, this version of the release.</source>
          <target state="translated">&lt;code&gt;relup&lt;/code&gt; のファイルがにアップグレード、またはリリースのこのバージョンからダウングレードする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="eb051013f36a233ac41b404b8075c071558087a9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;relup&lt;/code&gt; file contains one single Erlang term, which defines the instructions used to upgrade the release. The file has the following syntax:</source>
          <target state="translated">&lt;code&gt;relup&lt;/code&gt; のファイルには、リリースをアップグレードするために使用される命令を定義する1つのErlangの用語が含まれています。ファイルの構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="d56076bd8991e00d489d3da464bc1ef66915e244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;reply_timer&lt;/code&gt; eventually times out.</source>
          <target state="translated">&lt;code&gt;reply_timer&lt;/code&gt; 最終的にタイムアウト。</target>
        </trans-unit>
        <trans-unit id="3918ee266b06587588695e693fc72ac650418ae7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart&lt;/code&gt; key is optional. If it is not given, the default value &lt;code&gt;permanent&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;restart&lt;/code&gt; キーはオプションです。指定しない場合、デフォルト値の &lt;code&gt;permanent&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="aa12db49496616557ec440b620daa191bf27cdc0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;permanent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;restart&lt;/code&gt; キーはオプションです。指定されていない場合、デフォルトで &lt;code&gt;permanent&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b6a92effc8d3efc4277861eec34f0f1caed07816" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction must always be the first instruction in a relup. If the relup is generated by &lt;code&gt;systools:make_relup/3,4&lt;/code&gt;, this is automatically ensured.</source>
          <target state="translated">&lt;code&gt;restart_new_emulator&lt;/code&gt; の命令は常にrelup内の最初の命令でなければなりません。 &lt;code&gt;systools:make_relup/3,4&lt;/code&gt; によって生成される場合、これは自動的に保証されます。</target>
        </trans-unit>
        <trans-unit id="11d3f640ffec2cfdf0c8a6e928ab7cecff319eaf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;run_erl&lt;/code&gt; program is specific to Unix systems. This program redirects the standard input and standard output streams so that all output can be logged. It also lets the program &lt;code&gt;to_erl&lt;/code&gt; connect to the Erlang console, making it possible to monitor and debug an embedded system remotely.</source>
          <target state="translated">&lt;code&gt;run_erl&lt;/code&gt; のプログラムは、UNIXシステムに固有のものです。このプログラムは、すべての出力をログに記録できるように、標準入力および標準出力ストリームをリダイレクトします。また、プログラム &lt;code&gt;to_erl&lt;/code&gt; をErlangコンソールに接続して、組み込みシステムをリモートで監視およびデバッグすることもできます。</target>
        </trans-unit>
        <trans-unit id="750c30ae5ba824b2f2aab4a171c99b419364a053" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;runtime_dependencies&lt;/code&gt; key was introduced in OTP 17.0. The type of its value might be subject to changes during the OTP 17 release.</source>
          <target state="translated">&lt;code&gt;runtime_dependencies&lt;/code&gt; のキーは、OTP 17.0で導入されました。その値のタイプは、OTP 17リリース中に変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="c0fc6c1e3ca6659e674892c5855367c57b82e3b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sasl&lt;/code&gt; application includes the example Erlang module &lt;code&gt;target_system.erl&lt;/code&gt;, which contains functions for creating and installing a target system. This module is used in the following examples. The source code of the module is listed in &lt;code&gt;&lt;a href=&quot;#listing%20of%20target%20system&quot;&gt; Listing of target_system.erl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sasl&lt;/code&gt; アプリケーションは、例えば、アーランモジュール含ま &lt;code&gt;target_system.erl&lt;/code&gt; 作成およびターゲット・システムをインストールするための機能が含まれ、。このモジュールは、次の例で使用されます。モジュールのソースコードは、 &lt;code&gt;&lt;a href=&quot;#listing%20of%20target%20system&quot;&gt; Listing of target_system.erl&lt;/a&gt;&lt;/code&gt; されています。</target>
        </trans-unit>
        <trans-unit id="49d8491d2a1375817a9cf2b814c2646acf960284" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sasl&lt;/code&gt; application includes the example Erlang module &lt;code&gt;target_system.erl&lt;/code&gt;, which contains functions for creating and installing a target system. This module is used in the following examples. The source code of the module is listed in &lt;code&gt;&lt;a href=&quot;#listing%20of%20target%20system&quot;&gt;Listing of target_system.erl&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;sasl&lt;/code&gt; アプリケーションは、例えば、アーランモジュール含ま &lt;code&gt;target_system.erl&lt;/code&gt; 作成およびターゲット・システムをインストールするための機能が含まれ、。このモジュールは、次の例で使用されます。モジュールのソースコードは、 &lt;code&gt;&lt;a href=&quot;#listing%20of%20target%20system&quot;&gt;Listing of target_system.erl&lt;/a&gt;&lt;/code&gt; されています。</target>
        </trans-unit>
        <trans-unit id="3906ed9fb14f8072e02da2d35e2b47f21b0a6292" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select&lt;/code&gt; expression matches all entries in table employee with the field &lt;code&gt;sex&lt;/code&gt; set to &lt;code&gt;female&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; 式は、フィールドとテーブルの従業員のすべてのエントリと一致した &lt;code&gt;sex&lt;/code&gt; にセット &lt;code&gt;female&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d221358022dcaa2231dd0fa112459ee9f7e4a5b2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;select_ref()&lt;/code&gt; is the same as was received in the &lt;code&gt;&lt;a href=&quot;socket#type-select_info&quot;&gt;SelectInfo&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;select_ref()&lt;/code&gt; 内に受信されたと同じである &lt;code&gt;&lt;a href=&quot;socket#type-select_info&quot;&gt;SelectInfo&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f5c2c9e1f5cbdb80c6a7e6b52821b6b12fa676f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;'receive'&lt;/code&gt; flags enable tracing of all messages sent and received by the process/port. Trace patterns set with &lt;code&gt;tpe&lt;/code&gt; may limit traced messages based on the message content, the sender, and/or the receiver.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; および &lt;code&gt;'receive'&lt;/code&gt; フラグは、プロセス/ポートによって送受信されるすべてのメッセージのトレースを使用可能にします。 &lt;code&gt;tpe&lt;/code&gt; で設定されたトレースパターンは、メッセージの内容、送信者、および/または受信者に基づいて、トレースされるメッセージを制限する場合があります。</target>
        </trans-unit>
        <trans-unit id="0233a943ab6f52106ec90bb0ab714ed2cd9deb4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send&lt;/code&gt; call does not accept a time-out option because time-outs on send is handled through socket option &lt;code&gt;send_timeout&lt;/code&gt;. The behavior of a send operation with no receiver is mainly defined by the underlying TCP stack and the network infrastructure. To write code that handles a hanging receiver that can eventually cause the sender to hang on a &lt;code&gt;send&lt;/code&gt; do like the following.</source>
          <target state="translated">&lt;code&gt;send&lt;/code&gt; センドのタイムアウトがソケットオプションを介して処理されるため、呼び出しがタイムアウトオプションを受け入れていない &lt;code&gt;send_timeout&lt;/code&gt; 。レシーバーを使用しない送信操作の動作は、主に、基盤となるTCPスタックとネットワークインフラストラクチャによって定義されます。最終的に送信側が送信でハングする原因となるハングしているレシーバを処理するコードを記述する &lt;code&gt;send&lt;/code&gt; は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="bdcf831f5f9a895f78c5ead8d39eb67c53d11a2d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send_notification/6&lt;/code&gt; function is the most general version of the function. A &lt;code&gt;ContextName&lt;/code&gt; must be specified, from which the notification will be sent. If this parameter is not specified, the default context (&lt;code&gt;&quot;&quot;&lt;/code&gt;) is used.</source>
          <target state="translated">&lt;code&gt;send_notification/6&lt;/code&gt; 関数は、関数の最も一般的なバージョンです。A &lt;code&gt;ContextName&lt;/code&gt; 通知が送信されるから、指定しなければなりません。このパラメーターが指定されていない場合、デフォルトのコンテキスト（ &lt;code&gt;&quot;&quot;&lt;/code&gt; ）が使用されます。</target>
        </trans-unit>
        <trans-unit id="e10004941e2f7c2be1fb735798912ba806d773f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;send_out_queue&lt;/code&gt; routine is as follows:</source>
          <target state="translated">&lt;code&gt;send_out_queue&lt;/code&gt; 次のようにルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="843b939f65952e899d6ea657ca1ebe102c72dbe3" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;server&lt;/code&gt; module corresponds, greatly simplified, to the Erlang/OTP behaviour &lt;code&gt;gen_server&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;server&lt;/code&gt; モジュールの対応は、大幅アーラン/ OTP挙動に、簡略化さ &lt;code&gt;gen_server&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3eede287bf30328bbe010a8372b63b7607963a54" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt; commands modifies or adds an Erlang service, respectively. The simplest form of an &lt;code&gt;add&lt;/code&gt; command is without any options in which case all default values (described above) apply. The service name is mandatory.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; と &lt;code&gt;add&lt;/code&gt; のコマンドを変更したり、それぞれ、Erlangのサービスを追加します。 &lt;code&gt;add&lt;/code&gt; コマンドの最も単純な形式はオプションなしであり、その場合、すべてのデフォルト値（前述）が適用されます。サービス名は必須です。</target>
        </trans-unit>
        <trans-unit id="7d5aec8c53556f4c4632141415f220fd68b8daa2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set&lt;/code&gt; function checks if it has enough information to make the row change its status from &lt;code&gt;notReady&lt;/code&gt; to &lt;code&gt;notInService&lt;/code&gt; (when a row has been been set to &lt;code&gt;createAndWait&lt;/code&gt;). If a row is set to &lt;code&gt;createAndWait&lt;/code&gt;, columns without a value are set to &lt;code&gt;noinit&lt;/code&gt;. If Mnesia is used, the set functionality is handled within a transaction.</source>
          <target state="translated">&lt;code&gt;set&lt;/code&gt; 関数のチェックは行から、そのステータスを変更するのに十分な情報がある場合 &lt;code&gt;notReady&lt;/code&gt; に &lt;code&gt;notInService&lt;/code&gt; の（行に設定されたとき &lt;code&gt;createAndWait&lt;/code&gt; にします）。行が &lt;code&gt;createAndWait&lt;/code&gt; に設定されている場合、値のない列は &lt;code&gt;noinit&lt;/code&gt; に設定されます。Mnesiaを使用する場合、設定機能はトランザクション内で処理されます。</target>
        </trans-unit>
        <trans-unit id="dffce6a86883fb98a441ee618f3e33a10bd8dd89" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;set_on_spawn&lt;/code&gt; option will active call time tracing for all processes spawned by processes in the rootset. This is the default behaviour.</source>
          <target state="translated">&lt;code&gt;set_on_spawn&lt;/code&gt; のオプションは、アクティブな通話時間rootset内のプロセスによって生成されたすべてのプロセスのためにトレースします。これがデフォルトの動作です。</target>
        </trans-unit>
        <trans-unit id="d7ea8237fdbb6c1e6e9cad779100829368078340" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shutdown&lt;/code&gt; key is optional. If it is not given, and the child is of type &lt;code&gt;worker&lt;/code&gt;, the default value &lt;code&gt;5000&lt;/code&gt; will be used; if the child is of type &lt;code&gt;supervisor&lt;/code&gt;, the default value &lt;code&gt;infinity&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; キーはオプションです。指定されておらず、子のタイプが &lt;code&gt;worker&lt;/code&gt; の場合、デフォルト値 &lt;code&gt;5000&lt;/code&gt; が使用されます。子のタイプが &lt;code&gt;supervisor&lt;/code&gt; の場合、デフォルト値の &lt;code&gt;infinity&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="2cb49de51c4b23fb4081f3a3f48b32fd97395704" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;shutdown&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;5000&lt;/code&gt; if the child is of type &lt;code&gt;worker&lt;/code&gt; and it defaults to &lt;code&gt;infinity&lt;/code&gt; if the child is of type &lt;code&gt;supervisor&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shutdown&lt;/code&gt; キーはオプションです。指定しない場合、子のタイプが &lt;code&gt;worker&lt;/code&gt; の場合はデフォルトで &lt;code&gt;5000&lt;/code&gt; になり、子のタイプが &lt;code&gt;supervisor&lt;/code&gt; の場合はデフォルトで &lt;code&gt;infinity&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="38a6562eb72c50374e4148dda56f4f2798a51836" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;silent&lt;/code&gt; trace flag facilitates setting up a trace on many or even all processes in the system. The trace can then be activated and deactivated using the match specification function &lt;code&gt;{silent,Bool}&lt;/code&gt;, giving a high degree of control of which functions with which arguments that trigger the trace.</source>
          <target state="translated">&lt;code&gt;silent&lt;/code&gt; トレースフラグは、システム内の多くの、あるいはすべてのプロセスのトレースをセットアップが容易。次に、一致指定関数 &lt;code&gt;{silent,Bool}&lt;/code&gt; を使用してトレースをアクティブ化および非アクティブ化できます。これにより、トレースをトリガーする引数と関数を高度に制御できます。</target>
        </trans-unit>
        <trans-unit id="57bdb45fe915c31143be502180221ee741783591" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; field changed from signed to unsigned. This can cause problems for, for example, loop termination conditions or error conditions if you only change the types all over the place.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; から変更フィールドは、符号なしに署名しました。これは、たとえば、場所全体でタイプを変更するだけの場合、ループ終了条件やエラー条件などの問題を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="240a989a5bf707c990bcb78e115aed91f3f04714" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;size&lt;/code&gt; field in &lt;code&gt;&lt;a href=&quot;#ErlIOVec&quot;&gt;ErlIOVec&lt;/a&gt;&lt;/code&gt; has been changed to &lt;code&gt;ErlDrvSizeT&lt;/code&gt; from &lt;code&gt;int&lt;/code&gt;. Check all code that use that field.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ErlIOVec&quot;&gt;ErlIOVec&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;size&lt;/code&gt; フィールドは、 &lt;code&gt;int&lt;/code&gt; から &lt;code&gt;ErlDrvSizeT&lt;/code&gt; に変更されました。そのフィールドを使用するすべてのコードを確認してください。</target>
        </trans-unit>
        <trans-unit id="a337f162f4c8e035168099f55089fef2894d81f9" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;src&lt;/code&gt; directory could be useful to release for debugging purposes but is not required. The &lt;code&gt;include&lt;/code&gt; directory should only be released if the applications has public include files.</source>
          <target state="translated">&lt;code&gt;src&lt;/code&gt; ディレクトリには、デバッグの目的でリリースすることが有用である可能性が、必須ではありません。 &lt;code&gt;include&lt;/code&gt; アプリケーションがパブリックファイルが含まれている場合は、ディレクトリにのみ解放されなければなりません。</target>
        </trans-unit>
        <trans-unit id="fc13993adad718eae8701221afde4693b532449e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssh&lt;/code&gt; application is an implementation of the SSH Transport, Connection and Authentication Layer Protocols in Erlang. It provides the following:</source>
          <target state="translated">&lt;code&gt;ssh&lt;/code&gt; アプリケーションは、SSH交通、アーランでの接続と認証層プロトコルの実装です。以下を提供します。</target>
        </trans-unit>
        <trans-unit id="1b351d65a63d0aa90f08b7937079a25c6920290a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;ssl_passive&lt;/code&gt; message is sent only when the socket is in &lt;code&gt;{active, N}&lt;/code&gt; mode and the counter dropped to 0. It indicates that the socket has transitioned to passive (&lt;code&gt;{active, false}&lt;/code&gt;) mode.</source>
          <target state="translated">&lt;code&gt;ssl_passive&lt;/code&gt; メッセージは、ソケットがである場合にのみ送信される &lt;code&gt;{active, N}&lt;/code&gt; これは、ソケットが受動的（に遷移したことを示しているモードと、カウンタは0に低下 &lt;code&gt;{active, false}&lt;/code&gt; ）モード。</target>
        </trans-unit>
        <trans-unit id="8f65d2a2ea4f4fd44a5c098586ac285ac95cdefd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt; commands communicates with the service manager for starting and stopping a service. The commands wait until the service is started or stopped. When disabling a service, it is not stopped, the disabled state does not take effect until the service is stopped. Enabling a service sets it in automatic mode, which is started at boot. This command cannot set the service to manual.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; サービスを開始し、停止するためのサービスマネージャと通信を指令します。コマンドは、サービスが開始または停止されるまで待機します。サービスを無効にしてもサービスは停止せず、サービスが停止するまで無効状態は有効になりません。サービスを有効にすると、サービスが起動時に開始される自動モードに設定されます。このコマンドは、サービスを手動に設定できません。</target>
        </trans-unit>
        <trans-unit id="d1f3d732c30aec74a57c16dda04003bb1543c716" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; entry is called when the driver is opened as a port with &lt;code&gt;open_port/2&lt;/code&gt;. Here we allocate memory for a user data structure. This user data is passed every time the emulator calls us. First we store the driver handle, as it is needed in later calls. We allocate memory for the connection handle that is used by LibPQ. We also set the port to return allocated driver binaries, by setting flag &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt;, calling &lt;code&gt;set_port_control_flags&lt;/code&gt;. (This is because we do not know if our data will fit in the result buffer of &lt;code&gt;control&lt;/code&gt;, which has a default size, 64 bytes, set up by the emulator.)</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; ドライバが有するポートとして開かれたときにエントリが呼び出され &lt;code&gt;open_port/2&lt;/code&gt; 。ここでは、ユーザーデータ構造にメモリを割り当てます。このユーザーデータは、エミュレーターから呼び出されるたびに渡されます。後の呼び出しで必要になるため、最初にドライバーハンドルを格納します。LibPQが使用する接続ハンドルにメモリを割り当てます。また、フラグ設定することで、割り当てられたドライバのバイナリを返すようにポートを設定し &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt; を呼び出し、 &lt;code&gt;set_port_control_flags&lt;/code&gt; を。（これは、データが &lt;code&gt;control&lt;/code&gt; の結果バッファーに収まるかどうかがわからないためです。これは、エミュレーターによってセットアップされたデフォルトサイズの64バイトです。）</target>
        </trans-unit>
        <trans-unit id="f756fe51eb87c21305c2536fa74b5434575da4c1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; key is mandatory.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; キーが必須です。</target>
        </trans-unit>
        <trans-unit id="7a89df12694a55231dbe9df289731067f34bf0ba" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; program is called when the machine is started.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; プログラムは、マシンの起動時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="34d8bb2f8c095328e05b319382abf621840539e7" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; script is an example script on how to start up the Erlang system in embedded mode on Unix.</source>
          <target state="translated">&lt;code&gt;start&lt;/code&gt; スクリプトは、Unix上で組み込みモードでErlangのシステムを起動する方法についてのスクリプトの例です。</target>
        </trans-unit>
        <trans-unit id="c9b5982012fe67cdfffd9b71b0eeb41c6d062f31" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start&lt;/code&gt; script is to be edited accordingly.</source>
          <target state="translated">それに応じて、 &lt;code&gt;start&lt;/code&gt; スクリプトを編集します。</target>
        </trans-unit>
        <trans-unit id="31e73008fe878f9797af9d091c4fba4b24889e97" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_disabled&lt;/code&gt; command operates on a service regardless of if it is enabled/disabled or started/stopped. It does this by first enabling it (regardless of if it is enabled or not), then starting it (if not already started), and then disabling it. The result is a disabled but started service, regardless of its earlier state. This is useful for starting services temporarily during a release upgrade. The difference between using &lt;code&gt;start_disabled&lt;/code&gt; and the sequence &lt;code&gt;enable&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt;, and &lt;code&gt;disable&lt;/code&gt; is that all other &lt;code&gt;erlsrv&lt;/code&gt; commands are locked out during the sequence of operations in &lt;code&gt;start_disable&lt;/code&gt;, making the operation atomic from an &lt;code&gt;erlsrv&lt;/code&gt; user's point of view.</source>
          <target state="translated">&lt;code&gt;start_disabled&lt;/code&gt; コマンドは関係なく、それが有効/無効または開始された場合のサービス上で動作/停止。これを行うには、まず有効にします（有効になっているかどうかに関係なく）、次に起動し（まだ起動していない場合）、次に無効にします。結果は、以前の状態に関係なく、無効になっているが開始されたサービスです。これは、リリースのアップグレード中に一時的にサービスを開始するのに役立ちます。 &lt;code&gt;start_disabled&lt;/code&gt; とシーケンス &lt;code&gt;enable&lt;/code&gt; 、 &lt;code&gt;start&lt;/code&gt; 、および &lt;code&gt;disable&lt;/code&gt; の使用の違いは、他のすべての &lt;code&gt;erlsrv&lt;/code&gt; コマンドがstart_disableでの操作のシーケンス中にロックアウトされ、操作を &lt;code&gt;start_disable&lt;/code&gt; からアトミックにすること &lt;code&gt;erlsrv&lt;/code&gt; ユーザーの視点。</target>
        </trans-unit>
        <trans-unit id="fc0272cbbd8f9392623927de4cb2fc5730b48880" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_erl&lt;/code&gt; program in its original form recognizes the following options:</source>
          <target state="translated">元の形式の &lt;code&gt;start_erl&lt;/code&gt; プログラムは、次のオプションを認識します。</target>
        </trans-unit>
        <trans-unit id="a046e5227b7bb73b869f5bee562322400ca78ede" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_erl&lt;/code&gt; program is specific to Windows NT/2000/XP (and later versions of Windows). Although there are programs with the same name on other platforms, their functionality is different.</source>
          <target state="translated">&lt;code&gt;start_erl&lt;/code&gt; プログラムは、Windows NT / 2000 / XP（およびそれ以降のバージョンのWindows）に固有のものです。他のプラットフォームでは同じ名前のプログラムがありますが、機能は異なります。</target>
        </trans-unit>
        <trans-unit id="dbb5a322b443d443c9f79ed8f50a8ce9c3dd4066" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;start_erl&lt;/code&gt; shell script is normally not to be altered by the user.</source>
          <target state="translated">&lt;code&gt;start_erl&lt;/code&gt; のシェル・スクリプトは、ユーザによって変更されることは通常ありません。</target>
        </trans-unit>
        <trans-unit id="f114d80543f043efa956ef10b8b8d871f223052b" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;stop&lt;/code&gt; entry is called when the port is closed.</source>
          <target state="translated">&lt;code&gt;stop&lt;/code&gt; ポートが閉じているときに、エントリが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d04747a932902a65b42336d22f13d3d5bc78329f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;strategy&lt;/code&gt; key is optional in this map. If it is not given, it defaults to &lt;code&gt;one_for_one&lt;/code&gt;.</source>
          <target state="translated">このマップでは、 &lt;code&gt;strategy&lt;/code&gt; キーはオプションです。指定しない場合、デフォルトで &lt;code&gt;one_for_one&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="677a0d7125364697331cecce3cb1b444380c3397" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string()&lt;/code&gt; reason is the error information from the server in case of an exit-signal. If that information is empty, the reason is the exit signal name.</source>
          <target state="translated">&lt;code&gt;string()&lt;/code&gt; 理由は、出口信号の場合には、サーバからのエラー情報です。その情報が空の場合、理由は出口シグナル名です。</target>
        </trans-unit>
        <trans-unit id="ac46c7648d961485339da72bde9519efe243649a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;string&lt;/code&gt; module works perfectly for Unicode strings and ISO Latin-1 strings, except the language-dependent functions &lt;code&gt;string:uppercase/1&lt;/code&gt; and &lt;code&gt;string:lowercase/1&lt;/code&gt;. These two functions can never function correctly for Unicode characters in their current form, as there are language and locale issues to consider when converting text between cases. Converting case in an international environment is a large subject not yet addressed in OTP.</source>
          <target state="translated">&lt;code&gt;string&lt;/code&gt; モジュールは、言語に依存する機能を除き、Unicode文字列とISO Latin-1の文字列のために完璧に動作し &lt;code&gt;string:uppercase/1&lt;/code&gt; と &lt;code&gt;string:lowercase/1&lt;/code&gt; 。ケース間でテキストを変換するときに考慮すべき言語とロケールの問題があるため、これらの2つの関数は、現在の形式のUnicode文字に対しては正しく機能しません。国際環境でのケースの変換は、OTPではまだ対処されていない大きなテーマです。</target>
        </trans-unit>
        <trans-unit id="bbf0fa4cdfc9cb3b3a98e97fea86cc7766872258" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;subsystem_name&lt;/code&gt; is the name that a client requests to start with for example &lt;code&gt;&lt;a href=&quot;ssh_connection#subsystem-4&quot;&gt;ssh_connection:subsystem/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;subsystem_name&lt;/code&gt; は、クライアントの要求は、例えば、のために開始することを名前である &lt;code&gt;&lt;a href=&quot;ssh_connection#subsystem-4&quot;&gt;ssh_connection:subsystem/4&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="09767c0926afa55480ccd26075dea864841952af" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;suspend&lt;/code&gt; pseudo function has got an OWN time of zero. This is to prevent the process total OWN time from including time in suspension. Whether suspend time is really ACC or OWN time is more of a philosophical question.</source>
          <target state="translated">&lt;code&gt;suspend&lt;/code&gt; 擬似関数がゼロの自分の時間を持っています。これは、プロセスの合計OWN時間に停止中の時間が含まれないようにするためです。一時停止時間が本当にACCなのかOWN時間なのかは、より哲学的な問題です。</target>
        </trans-unit>
        <trans-unit id="56fd6933946b063ca50f26b9fde4abf8abbc8167" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module has functions for simple debugging of processes implemented using behaviours. It also has functions that, together with functions in the &lt;code&gt;proc_lib&lt;/code&gt; module, can be used to implement a &lt;strong&gt;special process&lt;/strong&gt; that complies to the OTP design principles without using a standard behaviour. These functions can also be used to implement user-defined (non-standard) behaviours.</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールは、行動を使用して実施されるプロセスの簡単なデバッグのための機能を持っています。また、 &lt;code&gt;proc_lib&lt;/code&gt; モジュールの関数と共に、標準の動作を使用せずにOTP設計原則に準拠する&lt;strong&gt;特別なプロセス&lt;/strong&gt;を実装するために使用できる関数もあります。これらの関数は、ユーザー定義（非標準）の動作を実装するためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="a5f881a797bfc4fbe38f558b9ae2256b6de4f52c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;sys&lt;/code&gt; module has functions for simple debugging of processes implemented using behaviours. The &lt;code&gt;code_lock&lt;/code&gt; example from &lt;code&gt;&lt;a href=&quot;statem#Example&quot;&gt;gen_statem Behaviour&lt;/a&gt;&lt;/code&gt; is used to illustrate this:</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールは、行動を使用して実施されるプロセスの簡単なデバッグのための機能を持っています。これを説明するために、 &lt;code&gt;&lt;a href=&quot;statem#Example&quot;&gt;gen_statem Behaviour&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;code_lock&lt;/code&gt; の例が使用されています。</target>
        </trans-unit>
        <trans-unit id="d8d80e46d29a3b09620c79d01dfafc6546d08b34" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system&lt;/code&gt; value is not complete. Some allocated memory that is to be part of this value is not.</source>
          <target state="translated">&lt;code&gt;system&lt;/code&gt; 値は完全ではありません。この値の一部となる割り当て済みメモリは、そうではありません。</target>
        </trans-unit>
        <trans-unit id="26e392c3cf2f0ef617cba237c6220075b3ea4b25" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;system_dir&lt;/code&gt; option must be a directory containing a host key file and it defaults to &lt;code&gt;/etc/ssh&lt;/code&gt;. For details, see Section Configuration Files in &lt;code&gt;ssh(6)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;system_dir&lt;/code&gt; のオプションは、ホスト鍵ファイルを含むディレクトリで、そのデフォルトにしなければならない &lt;code&gt;/etc/ssh&lt;/code&gt; 。詳細については、 &lt;code&gt;ssh(6)&lt;/code&gt; のセクション構成ファイルを参照してください。</target>
        </trans-unit>
        <trans-unit id="8dc4b52b4a1a8766ffe6fbf819d4319fd568e3cf" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;systools:make_tar/1,2&lt;/code&gt; function takes a &lt;code&gt;.rel&lt;/code&gt; file as input and creates a zipped tar file with the code for the specified applications, a &lt;strong&gt;release package&lt;/strong&gt;:</source>
          <target state="translated">&lt;code&gt;systools:make_tar/1,2&lt;/code&gt; 関数がかかり &lt;code&gt;.rel&lt;/code&gt; の入力としてファイルを、指定されたアプリケーションのためのコードで圧縮されたtarファイル作成&lt;strong&gt;リリースパッケージを&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="301c4b01094f4be3c122bd03d67de7a461179ba6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;table_info/2&lt;/code&gt; function takes two arguments. The first is the name of a Mnesia table. The second is one of the following keys:</source>
          <target state="translated">&lt;code&gt;table_info/2&lt;/code&gt; 機能は2つの引数を取ります。最初は、Mnesiaテーブルの名前です。2番目は、次のキーのいずれかです。</target>
        </trans-unit>
        <trans-unit id="cc6490531af30f5ced0c442f4ca5f18223c8f2ab" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tag_receiver()&lt;/code&gt; will first be sent the &lt;code&gt;snmp_targets&lt;/code&gt; message, and then for each address in &lt;code&gt;Addresses&lt;/code&gt; list, one of the two &lt;code&gt;snmp_notification&lt;/code&gt; messages.</source>
          <target state="translated">&lt;code&gt;tag_receiver()&lt;/code&gt; が最初に送信される &lt;code&gt;snmp_targets&lt;/code&gt; の各アドレスに、メッセージを、および &lt;code&gt;Addresses&lt;/code&gt; リスト、二つのうちの一つ &lt;code&gt;snmp_notification&lt;/code&gt; のメッセージ。</target>
        </trans-unit>
        <trans-unit id="05b2bd26a182333de1bd8075c792a7cf0885382c" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;term&lt;/code&gt; structure contains the arity for a tuple or list, size for a binary, string, or atom. It contains a term if it is any of the following: integer, float, atom, pid, port, or ref.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; 構造は、タプルまたはリストのためのアリティ、バイナリ、文字列、または原子のサイズを含んでいます。integer、float、atom、pid、port、またはrefのいずれかである場合は、用語が含まれています。</target>
        </trans-unit>
        <trans-unit id="414ded4046829ee348e2029f26b1f968edf7170d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;terminating&lt;/code&gt; options effects discovery initiated by a manager.</source>
          <target state="translated">&lt;code&gt;terminating&lt;/code&gt; オプションの効果の発見は、管理者によって開始しました。</target>
        </trans-unit>
        <trans-unit id="7e88c128d4034b8d31e143d58083f1b627d669f0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;test&lt;/code&gt; functions use the &lt;code&gt;*.asn1db&lt;/code&gt; files for all included modules. If they are located in a different directory than the current working directory, use the &lt;code&gt;include&lt;/code&gt; option to add paths. This is only needed when automatically generating values. For static values using &lt;code&gt;Value&lt;/code&gt; no options are needed.</source>
          <target state="translated">&lt;code&gt;test&lt;/code&gt; 機能は使用 &lt;code&gt;*.asn1db&lt;/code&gt; すべて含まれるモジュールのファイルを。現在の作業ディレクトリとは別のディレクトリにある場合は、 &lt;code&gt;include&lt;/code&gt; オプションを使用してパスを追加します。これは、値を自動的に生成する場合にのみ必要です。 &lt;code&gt;Value&lt;/code&gt; を使用する静的な値の場合、オプションは必要ありません。</target>
        </trans-unit>
        <trans-unit id="83b7e0837f597d64ddcc824925c5e1f6e2d7ce99" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tftp&lt;/code&gt; application implements the following IETF standards:</source>
          <target state="translated">&lt;code&gt;tftp&lt;/code&gt; アプリケーションは、次のIETF標準を実装しています。</target>
        </trans-unit>
        <trans-unit id="6783b7d09b3f65f7bff4fe67aceb9dac10494244" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time_unit/0&lt;/code&gt; type can be extended. To convert time values between time units, use &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt; erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time_unit/0&lt;/code&gt; タイプを延ばすことができます。時間単位間で時間値を変換するには、 &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt; erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="4bd16215e29bac88188ec05db9e000d6b25c2a4e" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;time_unit/0&lt;/code&gt; type can be extended. To convert time values between time units, use &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;time_unit/0&lt;/code&gt; タイプを延ばすことができます。時間単位間で時間値を変換するには、 &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt;erlang:convert_time_unit/3&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="2d6b5da79accb971f070469104b62f5de13468c2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;timeout&lt;/code&gt; option in the &lt;code&gt;SearchOptions&lt;/code&gt; is for the ldap server, while the timeout in &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; is used for each individual request in the search operation.</source>
          <target state="translated">&lt;code&gt;SearchOptions&lt;/code&gt; の &lt;code&gt;timeout&lt;/code&gt; オプションはldapサーバー用であり、 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;eldap:open/2&lt;/a&gt;&lt;/code&gt; のタイムアウトは検索操作の個々のリクエストごとに使用されます。</target>
        </trans-unit>
        <trans-unit id="3469f460bad51d15abfb716bef8439dd19f5713d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;total&lt;/code&gt; value is supposed to be the total amount of memory dynamically allocated by the emulator. Shared libraries, the code of the emulator itself, and the emulator stacks are not supposed to be included. That is, the &lt;code&gt;total&lt;/code&gt; value is &lt;strong&gt;not&lt;/strong&gt; supposed to be equal to the total size of all pages mapped to the emulator.</source>
          <target state="translated">&lt;code&gt;total&lt;/code&gt; 値を動的エミュレータによって割り当てられたメモリの合計量であると考えられます。共有ライブラリ、エミュレータ自体のコード、およびエミュレータスタックは含まれていません。つまり、 &lt;code&gt;total&lt;/code&gt; 値は、エミュレーターにマップされたすべてのページの合計サイズと等しいとは&lt;strong&gt;限りません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="855a90cd384864cf599ca9011960a53bac88f853" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;trim&lt;/code&gt; behavior corresponds exactly to the Perl default. &lt;code&gt;{parts,N}&lt;/code&gt;, where N is a positive integer, corresponds exactly to the Perl behavior with a positive numerical third parameter. The default behavior of &lt;code&gt;split/3&lt;/code&gt; corresponds to the Perl behavior when a negative integer is specified as the third parameter for the Perl routine.</source>
          <target state="translated">&lt;code&gt;trim&lt;/code&gt; 動作は、Perlのデフォルトに正確に対応します。 &lt;code&gt;{parts,N}&lt;/code&gt; （Nは正の整数）は、正の数値の3番目のパラメーターを持つPerlの動作に正確に対応しています。 &lt;code&gt;split/3&lt;/code&gt; のデフォルトの動作は、Perlルーチンの3番目のパラメーターとして負の整数が指定されている場合のPerlの動作に対応しています。</target>
        </trans-unit>
        <trans-unit id="503ae720e5d8f3760c374c5a7724a46be581ffb1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; expression can also be augmented with an &lt;code&gt;after&lt;/code&gt; section, intended to be used for cleanup with side effects:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 表現もで拡張することができ &lt;code&gt;after&lt;/code&gt; のセクションでは、副作用をクリーンアップするために使用されることを意図しました：</target>
        </trans-unit>
        <trans-unit id="9aa8fddb846b9b7abd8af53c04dc022f8bbdb56d" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;try&lt;/code&gt; expression can have an &lt;code&gt;of&lt;/code&gt; section:</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 式が持つことができる &lt;code&gt;of&lt;/code&gt; セクションを：</target>
        </trans-unit>
        <trans-unit id="1247ef97bc2a099c330eff988713e9a5888387df" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;tuple()&lt;/code&gt; reason are other errors like for example &lt;code&gt;{exit_status,1}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tuple()&lt;/code&gt; 理由は、例えば、のような他のエラーである &lt;code&gt;{exit_status,1}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="874e9960e26401a3b617a3b1e2c19da394373ec5" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; key is optional. If it is not given, the default value &lt;code&gt;worker&lt;/code&gt; will be used.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; キーは任意です。指定しない場合、デフォルト値の &lt;code&gt;worker&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="6ce30d2f89579b051b36741023e812a759179d4a" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;type&lt;/code&gt; key is optional. If it is not specified, it defaults to &lt;code&gt;worker&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;type&lt;/code&gt; キーは任意です。指定しない場合、デフォルトで &lt;code&gt;worker&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="8ab52ef65eee07504a8c99112afca9e52efb72ca" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u$bif:Module:Name/Arity&lt;/code&gt; constraint tests whether the given operand refers to a specific BIF. Note that &lt;code&gt;Module:Name/Arity&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be an existing BIF defined in &lt;code&gt;bif.tab&lt;/code&gt;, or there will be a compilation error. It is useful when a call to a specific BIF should be replaced with an instruction as in this example:</source>
          <target state="translated">&lt;code&gt;u$bif:Module:Name/Arity&lt;/code&gt; 与えられたオペランドが特定のBIFを参照するかどうかの制約をテスト。 &lt;code&gt;Module:Name/Arity&lt;/code&gt; &lt;code&gt;bif.tab&lt;/code&gt; はbif.tabで定義された既存のBIFである&lt;strong&gt;必要&lt;/strong&gt;があることに注意してください。そうでない場合、コンパイルエラーが発生します。この例のように、特定のBIFへの呼び出しを命令に置き換える必要がある場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="d8f2c733d5f2c3ff7dc2fecb9f7616099b07cea0" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u$func:Module:Name/Arity&lt;/code&gt; will test whether the given operand is a a specific function. Here is an example:</source>
          <target state="translated">&lt;code&gt;u$func:Module:Name/Arity&lt;/code&gt; 与えられたオペランドがAA、特定の機能であるかどうかをテストします。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="58e0ceadd09742f3e89a0e0c489abdb4b9f52d05" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;u$is_not_bif&lt;/code&gt; constraint matches if the operand does not refer to a BIF (not listed in &lt;code&gt;bif.tab&lt;/code&gt;). For example:</source>
          <target state="translated">&lt;code&gt;u$is_not_bif&lt;/code&gt; オペランドがBIF（に記載されていないを参照していない場合には、制約が一致 &lt;code&gt;bif.tab&lt;/code&gt; ）。例えば：</target>
        </trans-unit>
        <trans-unit id="c8f1c69ed96b83a679b6a1461cadd4cb592d2117" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_command&lt;/code&gt; routine is the routine called when an Erlang process sends data to the port. This routine handles all asynchronous commands when the port is in &lt;code&gt;command&lt;/code&gt; mode and the sending of all data when the port is in &lt;code&gt;data&lt;/code&gt; mode:</source>
          <target state="translated">&lt;code&gt;uds_command&lt;/code&gt; のルーチンは、Erlangのプロセスは、ポートにデータを送信するときに呼び出されるルーチンです。このルーチンは、ポートが &lt;code&gt;command&lt;/code&gt; モードのときにすべての非同期コマンドを処理し、ポートが &lt;code&gt;data&lt;/code&gt; モードのときにすべてのデータを送信します。</target>
        </trans-unit>
        <trans-unit id="12d38078aadeb17f73f6143b46507ced220c8b0f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_input&lt;/code&gt; routine handles other input events (like non-blocking &lt;code&gt;accept&lt;/code&gt;), but most importantly handle data arriving at the socket by calling &lt;code&gt;do_recv&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;uds_input&lt;/code&gt; ルーチンハンドル（ノン・ブロッキングのような他の入力イベント &lt;code&gt;accept&lt;/code&gt; ）が、最も重要なの呼び出しによってソケットに到着するデータハンドル &lt;code&gt;do_recv&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="202a772c2bbbb0c73373b15e1d87ffd28aa29133" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_input&lt;/code&gt; routine is called when data is available on a file descriptor previously passed to the &lt;code&gt;driver_select&lt;/code&gt; routine. This occurs typically when a read command is issued and no data is available. The &lt;code&gt;do_recv&lt;/code&gt; routine is as follows:</source>
          <target state="translated">&lt;code&gt;uds_input&lt;/code&gt; のルーチンは、データが以前に渡されたファイル記述子で提供されたときに呼び出され &lt;code&gt;driver_select&lt;/code&gt; のルーチン。これは通常、読み取りコマンドが発行され、使用可能なデータがない場合に発生します。 &lt;code&gt;do_recv&lt;/code&gt; の次のようにルーチンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="afe5ea4f80f83ad57ad0aad31e10486a4f2bf930" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;uds_start&lt;/code&gt; routine is called when a port is opened from Erlang. In this case, we only allocate a structure and initialize it. Creating the actual socket is left to the &lt;code&gt;uds_command&lt;/code&gt; routine.</source>
          <target state="translated">&lt;code&gt;uds_start&lt;/code&gt; のポートはアーランから開いたときにルーチンが呼び出されます。この場合、構造体を割り当てて初期化するだけです。実際のソケットの作成は、 &lt;code&gt;uds_command&lt;/code&gt; ルーチンに任されています。</target>
        </trans-unit>
        <trans-unit id="8bfbb24810f0c5b15e0b6448d90f972fe31a6386" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;undo&lt;/code&gt; function does nothing.</source>
          <target state="translated">&lt;code&gt;undo&lt;/code&gt; 機能は何もしません。</target>
        </trans-unit>
        <trans-unit id="7969bdd4f7e8e8283016abfb83b747e28e6525e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;unicode&lt;/code&gt; module is clearly Unicode-aware. It contains functions for conversion between different Unicode formats and some utilities for identifying byte order marks. Few programs handling Unicode data survive without this module.</source>
          <target state="translated">&lt;code&gt;unicode&lt;/code&gt; モジュールは明らかにUnicode対応です。これには、異なるUnicode形式間の変換用の関数と、バイトオーダーマークを識別するためのユーティリティが含まれています。Unicodeデータを処理するいくつかのプログラムは、このモジュールなしで生き残ります。</target>
        </trans-unit>
        <trans-unit id="45fc4ab31edeed78de6dcc133ce43fa458252958" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; function is an alternative for updating module data of recompiled modules.</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 機能は、再コンパイルモジュールのモジュールデータを更新するための代替法です。</target>
        </trans-unit>
        <trans-unit id="e7a993cc2041a3a5e4126cbf7ea824172decdb48" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;update&lt;/code&gt; instruction must contain the tuple &lt;code&gt;{advanced,Extra}&lt;/code&gt;. The instruction makes the special process call the callback function &lt;code&gt;system_code_change/4&lt;/code&gt;, a function the user must implement. The term &lt;code&gt;Extra&lt;/code&gt;, in this case &lt;code&gt;[]&lt;/code&gt;, is passed as is to &lt;code&gt;system_code_change/4&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;update&lt;/code&gt; 命令は、タプル含まなければならない &lt;code&gt;{advanced,Extra}&lt;/code&gt; 。この命令により、特別なプロセスがコールバック関数 &lt;code&gt;system_code_change/4&lt;/code&gt; を呼び出します。これは、ユーザーが実装する必要がある関数です。 &lt;code&gt;Extra&lt;/code&gt; という用語、この場合は &lt;code&gt;[]&lt;/code&gt; がそのまま &lt;code&gt;system_code_change/4&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="55a52d1bdeacd91af756556ef9395d795b7ce705" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;user_args&lt;/code&gt; configuration parameter which may be used to extend the argument list of the callback functions. For example, the handle_connect function takes by default two arguments:</source>
          <target state="translated">&lt;code&gt;user_args&lt;/code&gt; のコールバック関数の引数リストを拡張するために使用することができる構成パラメータ。たとえば、handle_connect関数はデフォルトで2つの引数を取ります。</target>
        </trans-unit>
        <trans-unit id="c15ed8631e7be541ad2f112cab6d63b078785dc4" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmAccessTable&lt;/code&gt; maps the &lt;code&gt;groupName&lt;/code&gt; (found in &lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt;), &lt;code&gt;contextName&lt;/code&gt;, &lt;code&gt;securityModel&lt;/code&gt;, and &lt;code&gt;securityLevel&lt;/code&gt; to an MIB view for each type of operation (read, write, or notify). The MIB view is represented as a &lt;code&gt;viewName&lt;/code&gt;. The definition of the MIB view represented by the &lt;code&gt;viewName&lt;/code&gt; is found in the &lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;vacmAccessTable&lt;/code&gt; マップ &lt;code&gt;groupName&lt;/code&gt; （に見出さ &lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt; 内）、 &lt;code&gt;contextName&lt;/code&gt; は、 &lt;code&gt;securityModel&lt;/code&gt; 、そして &lt;code&gt;securityLevel&lt;/code&gt; 動作の各タイプ（読み書き、または通知）するためのMIBビューに。MIBビューは &lt;code&gt;viewName&lt;/code&gt; として表されます。 &lt;code&gt;viewName&lt;/code&gt; で表されるMIBビューの定義は、 &lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt; にあります</target>
        </trans-unit>
        <trans-unit id="a70d16c49aee0ecab7697bd61b2b47a75fed9fc2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmContextTable&lt;/code&gt; is a read-only table that lists all available contexts.</source>
          <target state="translated">&lt;code&gt;vacmContextTable&lt;/code&gt; 内には、リストのすべての利用可能なコンテキストという読み取り専用のテーブルです。</target>
        </trans-unit>
        <trans-unit id="ef9aac3e2a8987ec6dd80992e0534a1b71403af1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt; maps a &lt;code&gt;securityModel&lt;/code&gt; and a &lt;code&gt;securityName&lt;/code&gt; to a &lt;code&gt;groupName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;vacmSecurityToGroupTable&lt;/code&gt; 内には、マッピングさ &lt;code&gt;securityModel&lt;/code&gt; と &lt;code&gt;securityName&lt;/code&gt; に &lt;code&gt;groupName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="28801f1623b234b9de96cc740a98bd5f85c06c85" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt; is indexed by the &lt;code&gt;viewName&lt;/code&gt;, and defines which objects are included in the MIB view.</source>
          <target state="translated">&lt;code&gt;vacmViewTreeFamilyTable&lt;/code&gt; のはによって指標付けされ &lt;code&gt;viewName&lt;/code&gt; オブジェクトがMIBビューに含まれ、そして定義。</target>
        </trans-unit>
        <trans-unit id="1870424a39adeddc9df6d1301607365bb578c850" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;vfs&lt;/code&gt; layer of MacOS X enforces UTF-8 filenames in an aggressive way. Older versions did this by refusing to create non-UTF-8 conforming filenames, while newer versions replace offending bytes with the sequence &quot;%HH&quot;, where HH is the original character in hexadecimal notation. As Unicode translation is enabled by default on MacOS X, the only way to come up against this is to either start the VM with flag &lt;code&gt;+fnl&lt;/code&gt; or to use a raw filename in bytewise (&lt;code&gt;latin1&lt;/code&gt;) encoding. If using a raw filename, with a bytewise encoding containing characters from 127 through 255, to create a file, the file cannot be opened using the same name as the one used to create it. There is no remedy for this behavior, except keeping the filenames in the correct encoding.</source>
          <target state="translated">MacOS X の &lt;code&gt;vfs&lt;/code&gt; レイヤーは、積極的にUTF-8ファイル名を適用します。古いバージョンでは、UTF-8に準拠しないファイル名の作成を拒否することでこれを行いましたが、新しいバージョンでは、問題のあるバイトをシーケンス &quot;％HH&quot;に置き換えます。HHは16進表記の元の文字です。 MacOS XではUnicode変換がデフォルトで有効になっているため、これに &lt;code&gt;+fnl&lt;/code&gt; する唯一の方法は、フラグ+ fnlで VMを起動するか、バイト単位（ &lt;code&gt;latin1&lt;/code&gt; ）エンコーディングで未加工のファイル名を使用することです。 127から255までの文字を含むバイト単位のエンコードで生のファイル名を使用してファイルを作成する場合、ファイルの作成に使用したのと同じ名前を使用してファイルを開くことはできません。ファイル名を正しいエンコーディングで維持することを除いて、この動作の解決策はありません。</target>
        </trans-unit>
        <trans-unit id="831df5545d1b1c7760cea7009d162230198cc0e2" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;werl&lt;/code&gt; window is in many ways modeled after the &lt;code&gt;xterm&lt;/code&gt; window present on other platforms, as the &lt;code&gt;xterm&lt;/code&gt; model fits well with line-oriented command-based interaction. This means that selecting text is line-oriented rather than rectangle-oriented.</source>
          <target state="translated">&lt;code&gt;werl&lt;/code&gt; ウィンドウはをモデルにした多くの方法である &lt;code&gt;xterm&lt;/code&gt; など、他のプラットフォーム上のウィンドウの存在 &lt;code&gt;xterm&lt;/code&gt; モデルが行指向のコマンドベースの対話とよく合います。これは、テキストの選択が長方形ではなく行指向であることを意味します。</target>
        </trans-unit>
        <trans-unit id="cb0a24e0ba3c71a8aad37252c9a038696dacac35" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;whereis&lt;/code&gt; function-call verifies that the SSL application is started.</source>
          <target state="translated">&lt;code&gt;whereis&lt;/code&gt; は、関数呼び出しの検証は、SSLアプリケーションが起動されていること。</target>
        </trans-unit>
        <trans-unit id="e2ea2763aab3c4567e48b6fa3d1366d90dff0b7f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;write_concurrency&lt;/code&gt; option can be combined with the options &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt; read_concurrency&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#new_2_decentralized_counters&quot;&gt; decentralized_counters&lt;/a&gt;&lt;/code&gt;. You typically want to combine &lt;code&gt;write_concurrency&lt;/code&gt; with &lt;code&gt;read_concurrency&lt;/code&gt; when large concurrent read bursts and large concurrent write bursts are common; for more information, see option &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt; read_concurrency&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;decentralized_counters&lt;/code&gt; option is turned on by default for tables of type &lt;code&gt;ordered_set&lt;/code&gt; with the &lt;code&gt;write_concurrency&lt;/code&gt; option enabled, and the &lt;code&gt;decentralized_counters&lt;/code&gt; option is turned off by default for all other table types. For more information, see the documentation for the &lt;code&gt;&lt;a href=&quot;#new_2_decentralized_counters&quot;&gt; decentralized_counters&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">&lt;code&gt;write_concurrency&lt;/code&gt; のオプションは、オプションと組み合わせることができ &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt; read_concurrency&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#new_2_decentralized_counters&quot;&gt; decentralized_counters&lt;/a&gt;&lt;/code&gt; 。通常、大規模な同時読み取りバーストと大規模な同時書き込みバーストが一般的である場合は、 &lt;code&gt;write_concurrency&lt;/code&gt; と &lt;code&gt;read_concurrency&lt;/code&gt; を組み合わせる必要があります。詳細については、オプション &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt; read_concurrency&lt;/a&gt;&lt;/code&gt; を参照してください。 &lt;code&gt;decentralized_counters&lt;/code&gt; のオプションは、タイプのテーブルに対してデフォルトでオンになって &lt;code&gt;ordered_set&lt;/code&gt; で &lt;code&gt;write_concurrency&lt;/code&gt; のオプションが有効になっており、 &lt;code&gt;decentralized_counters&lt;/code&gt; のオプションは、他のすべてのテーブル型のため、デフォルトではオフになっています。詳細については、のドキュメントを参照してください。 &lt;code&gt;&lt;a href=&quot;#new_2_decentralized_counters&quot;&gt; decentralized_counters&lt;/a&gt;&lt;/code&gt; オプション。</target>
        </trans-unit>
        <trans-unit id="a6d05af96ec0e7231d4e09ddd7a1fc622f5621cd" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{OtherRefId,term()}&lt;/code&gt; is defined by the user and is passed to the &lt;code&gt;match_fun&lt;/code&gt;, if defined. If the term in &lt;code&gt;OtherRefId&lt;/code&gt; is a binary, it will be converted to a string.</source>
          <target state="translated">&lt;code&gt;{OtherRefId,term()}&lt;/code&gt; ユーザーによって定義され、に渡される &lt;code&gt;match_fun&lt;/code&gt; 定義されている場合、。 &lt;code&gt;OtherRefId&lt;/code&gt; の用語がバイナリの場合、文字列に変換されます。</target>
        </trans-unit>
        <trans-unit id="19e1b6293cd5c62e374c8457e4fbd9d95a253158" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{mod, {Module,StartArgs}}&lt;/code&gt; option must be included. This option is used to find the callback module &lt;code&gt;Module&lt;/code&gt; of the application. &lt;code&gt;StartArgs&lt;/code&gt; is ignored, as &lt;code&gt;Module:start/2&lt;/code&gt; is called only for the primary application.</source>
          <target state="translated">&lt;code&gt;{mod, {Module,StartArgs}}&lt;/code&gt; オプションが含まれていなければなりません。このオプションは、アプリケーションのコールバックモジュール &lt;code&gt;Module&lt;/code&gt; を見つけるために使用されます。 &lt;code&gt;Module:start/2&lt;/code&gt; はプライマリアプリケーションに対してのみ呼び出されるため、 &lt;code&gt;StartArgs&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="4668f1fd645c2ffa2dba60de3db8016985e65bc1" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{ok,tut}&lt;/code&gt; means that the compilation is OK. If it says &quot;error&quot; it means that there is some mistake in the text that you entered. Additional error messages gives an idea to what is wrong so you can modify the text and then try to compile the program again.</source>
          <target state="translated">&lt;code&gt;{ok,tut}&lt;/code&gt; コンパイルがOKであることを意味します。「エラー」と表示されている場合は、入力したテキストに誤りがあることを意味します。追加のエラーメッセージは、何が問題なのかを示しているので、テキストを変更してから、プログラムを再度コンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="37c82dec6529acb72fb125b0bac4fda347c61081" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{packet, N}&lt;/code&gt; and &lt;code&gt;{line, L}&lt;/code&gt; settings are mutually exclusive.</source>
          <target state="translated">&lt;code&gt;{packet, N}&lt;/code&gt; 及び &lt;code&gt;{line, L}&lt;/code&gt; の設定は相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="971d55e17028d3606b6c283922622f2c0932a483" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{port,PortNum}&lt;/code&gt; tuple is optional and if omitted, default Telnet port 23 is used. Also the &lt;code&gt;keep_alive&lt;/code&gt; tuple is optional, and the value defauls to &lt;code&gt;true&lt;/code&gt; (enabled).</source>
          <target state="translated">&lt;code&gt;{port,PortNum}&lt;/code&gt; タプルはオプションであり、省略された場合、デフォルトのTelnetポート23が使用されます。また、 &lt;code&gt;keep_alive&lt;/code&gt; タプルはオプションであり、値は &lt;code&gt;true&lt;/code&gt; （有効）にデフォルト設定されます。</target>
        </trans-unit>
        <trans-unit id="fa6ece2cc8b2e8dafa07d4e08292eb70bec23c2f" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;{start_phases, [{Phase,PhaseArgs}]}&lt;/code&gt; option must be included, and the set of specified phases must be a subset of the set of phases specified for the primary application.</source>
          <target state="translated">&lt;code&gt;{start_phases, [{Phase,PhaseArgs}]}&lt;/code&gt; オプションが含まれていなければならない、と指定された位相の集合は、プライマリアプリケーションのために指定された位相のセットのサブセットでなければなりません。</target>
        </trans-unit>
        <trans-unit id="ff25bb9b46c77ee1bd1587510f1046fea71955a6" translate="yes" xml:space="preserve">
          <source>The &lt;code&gt;||&lt;/code&gt; &quot;such that&quot; and the arrow &lt;code&gt;&amp;lt;-&lt;/code&gt; is read as &quot;taken from&quot;.</source>
          <target state="translated">&lt;code&gt;||&lt;/code&gt; 「そのような」と矢印 &lt;code&gt;&amp;lt;-&lt;/code&gt; は「から取られた」と読み取られます。</target>
        </trans-unit>
        <trans-unit id="8950a73316b6b3766c9706406f02f3f2dda35162" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;Cartesian_product&quot;&gt;Cartesian product&lt;/strong&gt; of two sets X and Y, denoted X &amp;times; Y, is the set {a : a = (x, y) for some x in X and for some y in Y}.</source>
          <target state="translated">X&amp;times;Yで表される2つのセットXとY の&lt;strong id=&quot;Cartesian_product&quot;&gt;デカルト積&lt;/strong&gt;は、セット{a：a =（x、y）for some x in X and some y in Y in}です。</target>
        </trans-unit>
        <trans-unit id="97f5043ae782de1e349c1f4e82a07bd359c0964c" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;converse&quot;&gt;converse&lt;/strong&gt; of R is the set {a : a = (y, x) for some (x, y) in R}.</source>
          <target state="translated">R の&lt;strong id=&quot;converse&quot;&gt;逆&lt;/strong&gt;は{a：a =（y、x）for some（x、y）in R}の集合です。</target>
        </trans-unit>
        <trans-unit id="c74f91b2df651d6f1d918e8b3fa79c423cad5e1b" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;difference&quot;&gt;difference&lt;/strong&gt; of two sets A and B is the set that contains all elements of A that do not belong to B.</source>
          <target state="translated">2つのセットAとB の&lt;strong id=&quot;difference&quot;&gt;違い&lt;/strong&gt;は、Bに属さないAのすべての要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="efd11e10dc9bffd3ce00966684d96fd8a122cb0d" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;domain&quot;&gt;domain&lt;/strong&gt; of R is the set {x : x R y for some y in Y}.</source>
          <target state="translated">R の&lt;strong id=&quot;domain&quot;&gt;ドメイン&lt;/strong&gt;は、集合{x：x R y for some y in Y}です。</target>
        </trans-unit>
        <trans-unit id="377184fb47eff2618a884d3371438181861419a0" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;field&quot;&gt;field&lt;/strong&gt; of a relation R in X is the union of the domain of R and the range of R.</source>
          <target state="translated">Xの関係R の&lt;strong id=&quot;field&quot;&gt;体&lt;/strong&gt;は、Rの領域とRの範囲の和集合です。</target>
        </trans-unit>
        <trans-unit id="1a9617de87db1af0121da59eba19d31a6b757eff" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;in_degree&quot;&gt;in-degree&lt;/strong&gt; of a vertex is the number of edges incident on that vertex.</source>
          <target state="translated">&lt;strong id=&quot;in_degree&quot;&gt;中度の&lt;/strong&gt;頂点は、その頂点にエッジ入射の数です。</target>
        </trans-unit>
        <trans-unit id="4c0e00f79ce45926299ee2f3508020fdf2f45df9" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;intersection&quot;&gt;intersection&lt;/strong&gt; of two sets A and B is the set that contains all elements of A that belong to B.</source>
          <target state="translated">2つのセットAとB の&lt;strong id=&quot;intersection&quot;&gt;共通&lt;/strong&gt;部分は、Bに属するAのすべての要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="3f1d912f47b338c33084d89f0c15a5a316197ecb" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;intersection_n&quot;&gt;intersection&lt;/strong&gt; of a non-empty collection of sets is the set that contains all elements that belong to every set of the collection.</source>
          <target state="translated">セットの空でないコレクションの&lt;strong id=&quot;intersection_n&quot;&gt;共通&lt;/strong&gt;部分は、コレクションのすべてのセットに属するすべての要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="429f2c89c9e807577354da0b8e15a8e248018d77" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;length&quot;&gt;length&lt;/strong&gt; of path P is k-1.</source>
          <target state="translated">パスP の&lt;strong id=&quot;length&quot;&gt;長さ&lt;/strong&gt;はk-1です。</target>
        </trans-unit>
        <trans-unit id="abc21b67f672b304bee1db7701b820f9b24de3c6" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;natural_join&quot;&gt;natural join&lt;/strong&gt; of an n-ary relation R and an m-ary relation S on coordinate i and j is defined to be the set {z : z = (x[1], ..., x[n], y[1], ..., y[j-1], y[j+1], ..., y[m]) for some (x[1], ..., x[n]) in R and for some (y[1], ..., y[m]) in S such that x[i] = y[j]}.</source>
          <target state="translated">座標iおよびj上のn項関係Rとm項関係S の&lt;strong id=&quot;natural_join&quot;&gt;自然結合&lt;/strong&gt;は、セット{z：z =（x [1]、...、x [n]、y [ 1]、...、y [j-1]、y [j + 1]、...、y [m]）Rの一部の（x [1]、...、x [n]） x [i] = y [j]}となるようなSの一部の（y [1]、...、y [m]）。</target>
        </trans-unit>
        <trans-unit id="adf6489e3c93a13ca7fd19239f3939863c02f11d" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;out_degree&quot;&gt;out-degree&lt;/strong&gt; of a vertex is the number of edges emanating from that vertex.</source>
          <target state="translated">&lt;strong id=&quot;out_degree&quot;&gt;アウト度&lt;/strong&gt;頂点は、その頂点から出る辺の数です。</target>
        </trans-unit>
        <trans-unit id="7c6a3c4f02bedbb63c4000218f9eaa4b3029b656" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;projection&quot;&gt;projection&lt;/strong&gt; of an n-ary relation R onto coordinate i is the set {x[i] : (x[1], ..., x[i], ..., x[n]) in R for some x[j] in X[j], 1 &amp;lt;= j &amp;lt;= n and not i = j}. The projections of a binary relation R onto the first and second coordinates are the domain and the range of R, respectively.</source>
          <target state="translated">座標iへのn項関係R の&lt;strong id=&quot;projection&quot;&gt;射影&lt;/strong&gt;は、あるxに対するRのセット{x [i]：（x [1]、...、x [i]、...、x [n]）です。 [j] X [j]では、1 &amp;lt;= j &amp;lt;= nであり、i = j}ではありません。2項関係Rの1番目と2番目の座標への投影は、それぞれRの領域と範囲です。</target>
        </trans-unit>
        <trans-unit id="928618861a3a7864fa16dc6571d48344039643c2" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;range&quot;&gt;range&lt;/strong&gt; of R is the set {y : x R y for some x in X}.</source>
          <target state="translated">R の&lt;strong id=&quot;range&quot;&gt;範囲&lt;/strong&gt;は集合{y：x R y for some x in X}です。</target>
        </trans-unit>
        <trans-unit id="a0513ff69692a7179c5c24f4ad25a5aa23d84d71" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;restriction&quot;&gt;restriction&lt;/strong&gt; of R to A is the set S defined so that x S y if and only if there exists an element x in A such that x R y.</source>
          <target state="translated">AへのR の&lt;strong id=&quot;restriction&quot;&gt;制限&lt;/strong&gt;は、Aにx R yとなるような要素xが存在する場合に限り、x S yが定義されるセットSです。</target>
        </trans-unit>
        <trans-unit id="53dd8e97ddf5e81c0a22de5f228a88721f6ccc8d" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;symmetric_difference&quot;&gt;symmetric difference&lt;/strong&gt; of two sets is the set that contains those element that belong to either of the two sets, but not both.</source>
          <target state="translated">2つのセットの&lt;strong id=&quot;symmetric_difference&quot;&gt;対称的な違い&lt;/strong&gt;は、2つのセットのいずれか一方に属し、両方には属さない要素を含むセットです。</target>
        </trans-unit>
        <trans-unit id="baf0cfcddb027f4d4f3dff2390047419348137ab" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;union&quot;&gt;union&lt;/strong&gt; of two sets A and B is the smallest set that contains all elements of A and all elements of B.</source>
          <target state="translated">2つのセットAとB の&lt;strong id=&quot;union&quot;&gt;和&lt;/strong&gt;集合は、Aのすべての要素とBのすべての要素を含む最小のセットです。</target>
        </trans-unit>
        <trans-unit id="81d4f87a2b598bff542bef7879776b07f0f811bb" translate="yes" xml:space="preserve">
          <source>The &lt;strong id=&quot;union_n&quot;&gt;union&lt;/strong&gt; of a collection of sets is the smallest set that contains all the elements that belong to at least one set of the collection.</source>
          <target state="translated">セットの集合の&lt;strong id=&quot;union_n&quot;&gt;和集合&lt;/strong&gt;は、コレクションの少なくとも1つのセットに属するすべての要素を含む最小のセットです。</target>
        </trans-unit>
        <trans-unit id="5d51e506fb7ebd09e0439b577c3665c859bbc0bf" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Auto Attach&lt;/strong&gt; boxes, &lt;strong&gt;Stack Trace&lt;/strong&gt; label, &lt;strong&gt;Back Trace Size&lt;/strong&gt; label, and &lt;strong&gt;Strings&lt;/strong&gt; box display some options set. For details about these options, see section &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;Options Menu&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;オートアタッチ&lt;/strong&gt;ボックス、&lt;strong&gt;スタック・トレース・&lt;/strong&gt;ラベル、&lt;strong&gt;バックトレース・サイズ・&lt;/strong&gt;ラベル、および&lt;strong&gt;文字列の&lt;/strong&gt;ボックスの表示設定オプションをいくつか。これらのオプションの詳細については、「 &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;Options Menu&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="abcaf1a971590700133b8016539b636c71ba876f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Break&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;, and &lt;strong&gt;Help&lt;/strong&gt; menus are the same as in the &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt;, except that the &lt;strong&gt;Break&lt;/strong&gt; menu applies only to local breakpoints.</source>
          <target state="translated">&lt;strong&gt;ブレーク&lt;/strong&gt;、&lt;strong&gt;Windowsの&lt;/strong&gt;、および&lt;strong&gt;ヘルプ&lt;/strong&gt;メニューはと同じである &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt; ことを除いて、&lt;strong&gt;ブレーク&lt;/strong&gt;メニューは地元のブレークポイントにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="a10eb03f19350fbdf85025a9eab01c5153042f77" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Break&lt;/strong&gt;, &lt;strong&gt;Windows&lt;/strong&gt;, and &lt;strong&gt;Help&lt;/strong&gt; menus are the same as in the &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt;, except that the &lt;strong&gt;Breaks&lt;/strong&gt; menu applies only to local breakpoints.</source>
          <target state="translated">&lt;strong&gt;ブレーク&lt;/strong&gt;、&lt;strong&gt;Windowsの&lt;/strong&gt;、および&lt;strong&gt;ヘルプ&lt;/strong&gt;メニューはと同じである &lt;code&gt;&lt;a href=&quot;#monitor&quot;&gt;Monitor Window&lt;/a&gt;&lt;/code&gt; ことを除いて、&lt;strong&gt;ブレークの&lt;/strong&gt;メニューは地元のブレークポイントにのみ適用されます。</target>
        </trans-unit>
        <trans-unit id="81208a589d29fcc1ae9246757bcbbd412aee1292" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Common Test Hook (CTH)&lt;/strong&gt; framework allows extensions of the default behavior of &lt;code&gt;Common Test&lt;/code&gt; by callbacks before and after all test suite calls. It is intended for advanced users of &lt;code&gt;Common Test&lt;/code&gt; who want to abstract out behavior that is common to multiple test suites.</source>
          <target state="translated">&lt;strong&gt;一般的なテストフック（CTH）&lt;/strong&gt;フレームワークは、デフォルトの動作を拡張できます &lt;code&gt;Common Test&lt;/code&gt; すべてテストスイートコールの前と後のコールバックで。これは、複数のテストスイートに共通する動作を抽象化したい &lt;code&gt;Common Test&lt;/code&gt; の上級ユーザーを対象としています。</target>
        </trans-unit>
        <trans-unit id="e6fc5c94241e7e52f12a5fd7bd3416eff9018efa" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Common Test Hook (CTH)&lt;/strong&gt; framework allows extensions of the default behavior of &lt;code&gt;Common Test&lt;/code&gt; using hooks before and after all test suite calls. CTHs allow advanced &lt;code&gt;Common Test&lt;/code&gt; users to abstract out behavior that is common to multiple test suites without littering all test suites with library calls. This can be used for logging, starting, and monitoring external systems, building C files needed by the tests, and so on.</source>
          <target state="translated">&lt;strong&gt;一般的なテストフック（CTH）&lt;/strong&gt;フレームワークは、デフォルトの動作を拡張できます &lt;code&gt;Common Test&lt;/code&gt; すべてのテストスイートコールの前と後のフックを使用しています。CTHを使用すると、高度な &lt;code&gt;Common Test&lt;/code&gt; ユーザーは、ライブラリ呼び出しですべてのテストスイートを散らかすことなく、複数のテストスイートに共通する動作を抽象化できます。これは、外部システムのログ記録、開始、監視、テストに必要なCファイルの構築などに使用できます。</target>
        </trans-unit>
        <trans-unit id="03e6f71f473d365a318259d6ca0121e4f4c728af" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;Common Test Property Testing Support (ct_property_test)&lt;/strong&gt; is an aid to run property based testing tools in Common Test test suites.</source>
          <target state="translated">&lt;strong&gt;共通のテストプロパティのテストのサポート（ct_property_test）は&lt;/strong&gt;、共通テストテストスイートのツールをテストベースのプロパティを実行するための援助です。</target>
        </trans-unit>
        <trans-unit id="18cdc049609d4e15a26ab891a990c31ae80de460" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;File&lt;/strong&gt; and &lt;strong&gt;Edit&lt;/strong&gt; menus are the same as in the &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process Window&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">[ &lt;strong&gt;ファイル]&lt;/strong&gt;メニューと&lt;strong&gt;[ &lt;/strong&gt;&lt;strong&gt;編集]&lt;/strong&gt;メニューは、&lt;strong&gt;[ &lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process Window&lt;/a&gt;&lt;/code&gt; のアタッチ]ウィンドウと同じです。</target>
        </trans-unit>
        <trans-unit id="ff4e15bb4c0b2061b264590ff96d04af89b93805" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;File&lt;/strong&gt; menu includes options to save the contents of the &lt;strong&gt;Log&lt;/strong&gt; window and the &lt;strong&gt;Warnings&lt;/strong&gt; window. Simply choose the options and enter the file to save the contents in.</source>
          <target state="translated">「&lt;strong&gt;ファイル」&lt;/strong&gt;メニューには、&lt;strong&gt;「ログ」&lt;/strong&gt;ウィンドウと「&lt;strong&gt;警告&lt;/strong&gt;&lt;strong&gt;」&lt;/strong&gt;ウィンドウの内容を保存するオプションが含まれています。オプションを選択し、コンテンツを保存するファイルを入力するだけです。</target>
        </trans-unit>
        <trans-unit id="370a6214852f8fdbb6373c8997912c0758173f20" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;File&lt;/strong&gt; window displays a listing of the current directory. Click your way to the directories/modules you want to add or type the correct path in the entry.</source>
          <target state="translated">「&lt;strong&gt;ファイル」&lt;/strong&gt;ウィンドウには、現在のディレクトリのリストが表示されます。追加するディレクトリ/モジュールに移動するか、エントリに正しいパスを入力します。</target>
        </trans-unit>
        <trans-unit id="8e3940de2fcf0c6b61297d85ec453fc7187e592a" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;OTP design principles&lt;/strong&gt; define how to structure Erlang code in terms of processes, modules, and directories.</source>
          <target state="translated">&lt;strong&gt;OTP設計原理は、&lt;/strong&gt;プロセス、モジュール、およびディレクトリの面でErlangのコードを構造化する方法を定義します。</target>
        </trans-unit>
        <trans-unit id="ce6dbe8f8ec89aa3b4f8a5fbd8bce3df7dce0384" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;anonymous variable&lt;/strong&gt; is denoted by underscore (_) and can be used when a variable is required but its value can be ignored.</source>
          <target state="translated">&lt;strong&gt;匿名の変数は、&lt;/strong&gt;アンダースコア（_）で表され、変数が必要とされますが、その値は無視することができたときに使用することができます。</target>
        </trans-unit>
        <trans-unit id="a6798179458a851b9ebec479cdde3c475bff4cbb" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;application resource file&lt;/strong&gt; specifies the resources an application uses, and how the application is started. There must always be one application resource file called &lt;code&gt;Application.app&lt;/code&gt; for each application &lt;code&gt;Application&lt;/code&gt; in the system.</source>
          <target state="translated">&lt;strong&gt;アプリケーションリソースファイルには、&lt;/strong&gt;アプリケーションが使用するリソースを指定し、アプリケーションがどのように起動されます。いつもと呼ばれる一つのアプリケーションのリソースファイルが存在しなければならない &lt;code&gt;Application.app&lt;/code&gt; 各アプリケーションのための &lt;code&gt;Application&lt;/code&gt; システムでは。</target>
        </trans-unit>
        <trans-unit id="f6e14a23d7c2ef8d516ebeb71a889d63ab7e5e5f" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;application upgrade file&lt;/strong&gt; defines how an application is upgraded or downgraded in a running system.</source>
          <target state="translated">&lt;strong&gt;アプリケーションのアップグレードファイルの&lt;/strong&gt;アプリケーションをアップグレードまたは実行中のシステムに格下げされる方法を定義します。</target>
        </trans-unit>
        <trans-unit id="6724ecd893c2f90d64929956a749eae932ffa031" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;beam_makeops&lt;/strong&gt; Perl script is used at build-time by both the compiler and runtime system. Given a number of input files (all with the extension &lt;code&gt;.tab&lt;/code&gt;), it will generate source files used by the Erlang compiler and by the runtime system to load and execute BEAM instructions.</source>
          <target state="translated">&lt;strong&gt;beam_makeops&lt;/strong&gt;のPerlスクリプトは、コンパイラとランタイムシステムの両方でビルド時に使用されます。多数の入力ファイル（すべて拡張子 &lt;code&gt;.tab&lt;/code&gt; ）が与えられると、ErlangコンパイラーとランタイムシステムがBEAM命令をロードして実行するために使用するソースファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="2db57b7456855f2efbc5591cfd1f43a7d95e2566" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;boot script&lt;/strong&gt; describes how the Erlang runtime system is started. It contains instructions on which code to load and which processes and applications to start.</source>
          <target state="translated">&lt;strong&gt;ブートスクリプト&lt;/strong&gt;は、Erlangランタイムシステムの&lt;strong&gt;起動&lt;/strong&gt;方法を記述します。どのコードをロードするか、どのプロセスとアプリケーションを開始するかの指示が含まれています。</target>
        </trans-unit>
        <trans-unit id="c43e23aec0edb2b1553fbf3a42ab629ff93e0727" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback mode&lt;/strong&gt; is a property of the &lt;strong&gt;callback module&lt;/strong&gt; and is set at server start. It may be changed due to a code upgrade/downgrade, or when changing the &lt;strong&gt;callback module&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;コールバックモードは&lt;/strong&gt;の財産である&lt;strong&gt;コールバックモジュール&lt;/strong&gt;とサーバ起動時に設定されます。コードのアップグレード/ダウングレードのため、または&lt;strong&gt;コールバックモジュールを&lt;/strong&gt;変更するときに変更される可能性があり&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="0117a440e83974bf851c56ecb41421105f272e12" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback mode&lt;/strong&gt; is selected by implementing a mandatory callback function &lt;code&gt; Module:callback_mode() &lt;/code&gt; that returns one of the &lt;strong&gt;callback modes&lt;/strong&gt;.</source>
          <target state="translated">&lt;strong&gt;コールバック・モードは、&lt;/strong&gt;必須のコールバック関数を実装することによって、選択され &lt;code&gt; Module:callback_mode() &lt;/code&gt; のいずれかを返し&lt;strong&gt;、コールバックモード&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="5741097334e8b8597284eb3550244c5de695e977" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback mode&lt;/strong&gt; is selected when starting the &lt;code&gt;gen_statem&lt;/code&gt; and after code change using the return value from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;コールバック・モードは、&lt;/strong&gt;起動時に選択される &lt;code&gt;gen_statem&lt;/code&gt; を、コード変更後からの戻り値を使用して &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9b41a677df62f29884be14a8c6c25a7497c11480" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback mode&lt;/strong&gt; is selected with the return value from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;コールバックモードは&lt;/strong&gt;からの戻り値で選択された &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5bffb738c6ff50eb3adeb56460c8af109c3f28df" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback mode&lt;/strong&gt;&lt;code&gt;handle_event_function&lt;/code&gt; enables using a non-atom state as described in section &lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt;Callback Modes&lt;/a&gt;&lt;/code&gt;, for example, a complex state term like a tuple.</source>
          <target state="translated">&lt;strong&gt;コールバック・モード&lt;/strong&gt; &lt;code&gt;handle_event_function&lt;/code&gt; がセクションで説明したように非原子の状態を使用可能にする &lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt;Callback Modes&lt;/a&gt;&lt;/code&gt; 、例えば、タプルのような複雑な状態用語。</target>
        </trans-unit>
        <trans-unit id="3427359c72c6325ce793c2593793b153f136ba5e" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback module&lt;/strong&gt; can be changed for a running server using any of the &lt;code&gt;&lt;a href=&quot;#Transition%20Actions&quot;&gt;transition actions&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{change_callback_module, NewModule}&lt;/code&gt;, &lt;code&gt;{push_callback_module, NewModule}&lt;/code&gt; or &lt;code&gt;pop_callback_module&lt;/code&gt;. Note that this is a pretty esoteric thing to do... The origin for this feature is a protocol that after version negotiation branches off into quite different state machines depending on the protocol version. There</source>
          <target state="translated">&lt;strong&gt;コールバックモジュールは、&lt;/strong&gt;任意の使用して、実行中のサーバに変更することができる &lt;code&gt;&lt;a href=&quot;#Transition%20Actions&quot;&gt;transition actions&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{change_callback_module, NewModule}&lt;/code&gt; 、 &lt;code&gt;{push_callback_module, NewModule}&lt;/code&gt; 又は &lt;code&gt;pop_callback_module&lt;/code&gt; を。これはかなり難解なことであることに注意してください...この機能の起源は、バージョンネゴシエーション後にプロトコルバージョンに応じてまったく異なるステートマシンに分岐するプロトコルです。そこ</target>
        </trans-unit>
        <trans-unit id="61740187206076da0d0e88e42b8dcd3ef778c9b8" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;callback module&lt;/strong&gt; contains functions that implement the state machine. When an event occurs, the &lt;code&gt;gen_statem&lt;/code&gt; behaviour engine calls a function in the &lt;strong&gt;callback module&lt;/strong&gt; with the event, current state and server data. This function performs the actions for this event, and returns the new state and server data and also actions to be performed by the behaviour engine.</source>
          <target state="translated">&lt;strong&gt;コールバックモジュールは、&lt;/strong&gt;ステートマシンを実装する機能が含まれています。イベントが発生すると、 &lt;code&gt;gen_statem&lt;/code&gt; 動作エンジンは、イベント、現在の状態、およびサーバーデータを使用して&lt;strong&gt;コールバックモジュールの&lt;/strong&gt;関数を呼び出します。この関数は、このイベントのアクションを実行し、新しい状態とサーバーのデータ、および動作エンジンによって実行されるアクションを返します。</target>
        </trans-unit>
        <trans-unit id="010c2dfc5017e7774d251ec3e8505c4cdafc0e30" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;detailed table events&lt;/strong&gt; are tuples like &lt;code&gt;{Oper, Table, Data, [OldRecs], ActivityId}&lt;/code&gt;, where:</source>
          <target state="translated">&lt;strong&gt;詳細テーブルイベントは&lt;/strong&gt;のようなタプルである &lt;code&gt;{Oper, Table, Data, [OldRecs], ActivityId}&lt;/code&gt; 、。</target>
        </trans-unit>
        <trans-unit id="790690408a0b723c21e944914ee3b6f33b9bfb5b" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;dynamic node name&lt;/strong&gt; feature is supported from OTP 23. Both the temporary client node and the first connected peer node (supplying the dynamic node name) must be at least OTP 23 for it to work.</source>
          <target state="translated">&lt;strong&gt;動的なノード名の&lt;/strong&gt;機能は、両方の一時的なクライアント・ノードOTP 23から支持されており（動的ノード名を供給する）第一接続ピアノードは仕事にするための少なくともOTP 23でなければなりません。</target>
        </trans-unit>
        <trans-unit id="60cb531fb67c541100e62d6289d443a02cba5fa3" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;empty set&lt;/strong&gt; contains no elements.</source>
          <target state="translated">&lt;strong&gt;空のセットには&lt;/strong&gt;何の要素が含まれていません。</target>
        </trans-unit>
        <trans-unit id="529d8e8336cfdf10118ffc9b093a47018a9c6171" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;mstone2&lt;/strong&gt; is similar to the &lt;strong&gt;mstone1&lt;/strong&gt; tool, but in this case, each created process makes only &lt;strong&gt;one&lt;/strong&gt; run through the messages and then exits. A soon as a process exits, a new process (with the same config and messages) is created to takes its place. The number of messages processed in total is the mstone2(1) value.</source>
          <target state="translated">&lt;strong&gt;mstone2は&lt;/strong&gt;に似て&lt;strong&gt;mstone1&lt;/strong&gt;ツールが、この場合には、各作成されたプロセスは、作る&lt;strong&gt;1&lt;/strong&gt;のメッセージと、その後終了して実行を。プロセスが終了するとすぐに、同じ構成とメッセージを持つ新しいプロセスが作成され、代わりに実行されます。合計で処理されるメッセージの数は、mstone2（1）の値です。</target>
        </trans-unit>
        <trans-unit id="b927187f56617f5aef02c9b312ff36f409a08649" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;ordered pair&lt;/strong&gt; of a and b, with first &lt;strong&gt;coordinate&lt;/strong&gt; a and second coordinate b, is denoted (a, b). An ordered pair is an &lt;strong&gt;ordered set&lt;/strong&gt; of two elements. In this module, ordered sets can contain one, two, or more elements, and parentheses are used to enclose the elements.</source>
          <target state="translated">第1 &lt;strong&gt;座標が&lt;/strong&gt; a、第2座標がb である、aとb の&lt;strong&gt;順序付けられたペア&lt;/strong&gt;は、（a、b）で表されます。順序付きペアは、2つの要素の&lt;strong&gt;順序付きセット&lt;/strong&gt;です。このモジュールでは、順序付きセットには1つ、2つ、またはそれ以上の要素を含めることができ、要素を囲むために括弧が使用されます。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c83c801cd635dbe318e9132115de7b55b1599720" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;receiver&lt;/strong&gt; is &lt;strong&gt;authoritative&lt;/strong&gt; for messages containing payload which expects a response (for example Get, GetNext, Get-Bulk, Set or Inform PDU).</source>
          <target state="translated">&lt;strong&gt;受信機は、&lt;/strong&gt;ある&lt;strong&gt;権限の&lt;/strong&gt;応答期待（例えばGET、GetNextのは、Get-バルク、セットまたはPDUを通知）ペイロードを含むメッセージの。</target>
        </trans-unit>
        <trans-unit id="ac92db4f0e00aaa89bb19e432441af806acad352" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;release handler&lt;/strong&gt; process belongs to the SASL application, which is responsible for &lt;strong&gt;release handling&lt;/strong&gt;, that is, unpacking, installation, and removal of release packages.</source>
          <target state="translated">&lt;strong&gt;リリースハンドラ&lt;/strong&gt;プロセスは責任があるSASLアプリケーションに属し&lt;strong&gt;リリース取り扱い&lt;/strong&gt;開梱、ある、インストール、およびリリースパッケージの除去。</target>
        </trans-unit>
        <trans-unit id="91dc52a591c8ca51fdb38124dea4daf9b7e6ea32" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;release resource file&lt;/strong&gt; specifies which applications are included in a release (system) based on Erlang/OTP.</source>
          <target state="translated">の &lt;strong&gt;リリースリソースファイル&lt;/strong&gt;のErlang / OTPベースのアプリケーションがリリース（システム）に含まれているかを指定します。</target>
        </trans-unit>
        <trans-unit id="ad1a94e9c3dc7a7604b7beecc0ad4192b022ebdc" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;release upgrade file&lt;/strong&gt; describes how a release is upgraded in a running system.</source>
          <target state="translated">&lt;strong&gt;リリースアップグレードファイル&lt;/strong&gt;リリースが稼働しているシステムでアップグレードする方法について説明します。</target>
        </trans-unit>
        <trans-unit id="df96a6a378319ab14151f9909dca99424881e367" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;sender&lt;/strong&gt; is &lt;strong&gt;authoritative&lt;/strong&gt; for messages containing payload which does &lt;strong&gt;not&lt;/strong&gt; expect a response (for example SNMPv2-Trap, Response or Report PDU).</source>
          <target state="translated">&lt;strong&gt;送信者は、&lt;/strong&gt;ある&lt;strong&gt;権威&lt;/strong&gt;んペイロードを含むメッセージのため&lt;strong&gt;ではないが&lt;/strong&gt;（例えば、SNMPv2のトラップ、応答またはレポートPDUのための）応答を期待します。</target>
        </trans-unit>
        <trans-unit id="4ac925cddc8d38d70b14e09284795baa1f665f91" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;simple table events&lt;/strong&gt; are tuples like &lt;code&gt;{Oper, Record, ActivityId}&lt;/code&gt;, where:</source>
          <target state="translated">&lt;strong&gt;単純なテーブル・イベントは、&lt;/strong&gt;のようなタプルである &lt;code&gt;{Oper, Record, ActivityId}&lt;/code&gt; 、。</target>
        </trans-unit>
        <trans-unit id="c7623d1fa21054abc3e3ac53a4bbc8066dac8120" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;socket registry&lt;/strong&gt; is how we keep track of sockets. There are two functions that can be used for interaction: &lt;code&gt;&lt;a href=&quot;socket#number_of-0&quot;&gt;socket:number_of/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;socket#which_sockets-1&quot;&gt;socket:which_sockets/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;ソケットのレジストリは&lt;/strong&gt;、我々は、ソケットを追跡する方法です。相互作用に使用できる関数は、 &lt;code&gt;&lt;a href=&quot;socket#number_of-0&quot;&gt;socket:number_of/0&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;socket#which_sockets-1&quot;&gt;socket:which_sockets/1&lt;/a&gt;&lt;/code&gt; の2つです。</target>
        </trans-unit>
        <trans-unit id="e42f516326a33814c075d0ef2dd476acfd28000d" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;state callback&lt;/strong&gt; for a specific &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; in a &lt;code&gt;gen_statem&lt;/code&gt; is the callback function that is called for all events in this state. It is selected depending on which &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; that the callback module defines with the callback function &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;strong&gt;状態コールバック&lt;/strong&gt;の特定のための &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;gen_statem&lt;/code&gt; は、この状態では、すべてのイベントに対して呼び出されるコールバック関数です。これは、コールバックモジュールがコールバック関数 &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; で定義するコール &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 応じて選択されます。</target>
        </trans-unit>
        <trans-unit id="39642072ab882c38d48ac8e225ecf14ced26e9ee" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;state callback&lt;/strong&gt; is the callback function that handles an event in the current state, and which function that is depends on the &lt;strong&gt;callback mode&lt;/strong&gt;:</source>
          <target state="translated">&lt;strong&gt;状態のコールバックは、&lt;/strong&gt;に依存である関数のコールバック現在の状態のイベントを処理する機能、ある&lt;strong&gt;コールバック・モード&lt;/strong&gt;：</target>
        </trans-unit>
        <trans-unit id="79b1ae1634c63df766310472c5f61e301e8fde51" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;state callback&lt;/strong&gt; return values are defined in the description of &lt;code&gt; Module:StateName/3 &lt;/code&gt; in the &lt;code&gt;gen_statem&lt;/code&gt; manual page, but here is a more readable list:</source>
          <target state="translated">&lt;strong&gt;状態コールバック&lt;/strong&gt;の戻り値は、の記述で定義されている &lt;code&gt; Module:StateName/3 &lt;/code&gt; で &lt;code&gt;gen_statem&lt;/code&gt; マニュアルページが、ここでは、より読みやすいリストであります：</target>
        </trans-unit>
        <trans-unit id="2fcc34c431d064d6d4c4085640be13ac8df36a55" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;system tracer&lt;/strong&gt; for sequential tracing is automatically initiated by &lt;code&gt;ttb&lt;/code&gt; when a trace port is started with &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt;.</source>
          <target state="translated">シーケンシャルトレースの&lt;strong&gt;システムトレーサー&lt;/strong&gt;は、 &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt; でトレースポートが開始されると、 &lt;code&gt;ttb&lt;/code&gt; によって自動的に開始されます。ます。</target>
        </trans-unit>
        <trans-unit id="c33df7c3d6f3cf265ee046f5bbcec06d7fee2046" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;unordered set&lt;/strong&gt; containing the elements a, b, and c is denoted {a, b, c}. This notation is not to be confused with tuples.</source>
          <target state="translated">&lt;strong&gt;順不同セット&lt;/strong&gt;、B、及びCが示されている要素{A、B、C}を含みます。この表記をタプルと混同しないでください。</target>
        </trans-unit>
        <trans-unit id="338f2ff3d932d37a0203031cf3c8ecd12e555100" translate="yes" xml:space="preserve">
          <source>The &lt;strong&gt;xmerl&lt;/strong&gt; XML parser is able to parse XML documents according to the XML 1.0 standard. As default it performs well-formed parsing, (syntax checks and checks of well-formed constraints). Optionally one can also use xmerl as a validating parser, (validate according to referenced DTD and validating constraints). By means of for example the xmerl_xs module it is possible to transform the parsed result to other formats, e.g. text, HTML, XML etc.</source>
          <target state="translated">&lt;strong&gt;xmerl&lt;/strong&gt; XMLパーサーはXML 1.0規格に準拠したXML文書を解析することができます。デフォルトでは、整形式の解析を実行します（構文チェックと整形式制約のチェック）。オプションで、検証パーサーとしてxmerlを使用することもできます（参照されるDTDおよび検証制約に従って検証）。たとえばxmerl_xsモジュールを使用すると、解析結果を他の形式（テキスト、HTML、XMLなど）に変換できます。</target>
        </trans-unit>
        <trans-unit id="639ddc138940995a6e19ca0db97584c255b5e3c9" translate="yes" xml:space="preserve">
          <source>The ACC time calculation is sometimes difficult to make correct, since it is difficult to define. This happens especially when a function occurs in several instances in the call stack, for example by calling itself perhaps through other functions and perhaps even non-tail recursively.</source>
          <target state="translated">ACC時間の計算は、定義が難しいため、正しい計算をするのが難しいことがあります。これは特に、ある関数がコールスタック内の複数のインスタンスで発生した場合、例えば、おそらく他の関数を経由して、おそらく非テール再帰的にそれ自身を呼び出すことによって発生します。</target>
        </trans-unit>
        <trans-unit id="57e2a8ffba28b7446bf70cbc1663f4839a28353c" translate="yes" xml:space="preserve">
          <source>The AND intersection of the list &lt;code&gt;L1&lt;/code&gt; and &lt;code&gt;L2&lt;/code&gt; is also easily defined:</source>
          <target state="translated">リスト &lt;code&gt;L1&lt;/code&gt; と &lt;code&gt;L2&lt;/code&gt; のAND交差も簡単に定義できます。</target>
        </trans-unit>
        <trans-unit id="03c2705073fe9051dbc22438c110997b433d5384" translate="yes" xml:space="preserve">
          <source>The API for logging consists of a set of &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt;, and a set of functions on the form &lt;code&gt;logger:Level/1,2,3&lt;/code&gt;, which are all shortcuts for &lt;code&gt;&lt;a href=&quot;logger#log-2&quot;&gt; logger:log(Level,Arg1[,Arg2[,Arg3]])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ロギング用のAPIは、 &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt; のセットと、 &lt;code&gt;logger:Level/1,2,3&lt;/code&gt; の形式の関数のセットで構成されています。これらはすべて &lt;code&gt;&lt;a href=&quot;logger#log-2&quot;&gt; logger:log(Level,Arg1[,Arg2[,Arg3]])&lt;/a&gt;&lt;/code&gt; ショートカットです。。</target>
        </trans-unit>
        <trans-unit id="79ddb999f667f09a910e3689c6469b160527272a" translate="yes" xml:space="preserve">
          <source>The API for logging consists of a set of &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt;, and a set of functions on the form &lt;code&gt;logger:Level/1,2,3&lt;/code&gt;, which are all shortcuts for &lt;code&gt;&lt;a href=&quot;logger#log-2&quot;&gt;logger:log(Level,Arg1[,Arg2[,Arg3]])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ロギング用のAPIは、一連の &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;logger:Level/1,2,3&lt;/code&gt; という形式の一連の関数で構成されます。これらはすべて &lt;code&gt;&lt;a href=&quot;logger#log-2&quot;&gt;logger:log(Level,Arg1[,Arg2[,Arg3]])&lt;/a&gt;&lt;/code&gt; ショートカットです。。</target>
        </trans-unit>
        <trans-unit id="38e9019f75b372bc1c195496de6c985d2c8006d1" translate="yes" xml:space="preserve">
          <source>The API functions in &lt;code&gt;uri_string&lt;/code&gt; work on two basic data types &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_string&quot;&gt;uri_string()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_string&quot;&gt;uri_string()&lt;/a&gt;&lt;/code&gt; represents a standard URI, while &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; is a wider datatype, that can represent URI components using &lt;code&gt;&lt;a href=&quot;unicode_usage#what-unicode-is&quot;&gt;Unicode&lt;/a&gt;&lt;/code&gt; characters. &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; is a convenient choice for enabling operations such as producing standard compliant URIs out of components that have special or &lt;code&gt;&lt;a href=&quot;unicode_usage#what-unicode-is&quot;&gt;Unicode&lt;/a&gt;&lt;/code&gt; characters. It is easier to explain this by an example.</source>
          <target state="translated">&lt;code&gt;uri_string&lt;/code&gt; のAPI関数は、2つの基本的なデータ型 &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_string&quot;&gt;uri_string()&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; で機能します。 &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_string&quot;&gt;uri_string()&lt;/a&gt;&lt;/code&gt; は標準URIを表しますが、 &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; はより広いデータ型であり、 &lt;code&gt;&lt;a href=&quot;unicode_usage#what-unicode-is&quot;&gt;Unicode&lt;/a&gt;&lt;/code&gt; 文字を使用してURIコンポーネントを表すことができます。 &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; は、特殊文字または &lt;code&gt;&lt;a href=&quot;unicode_usage#what-unicode-is&quot;&gt;Unicode&lt;/a&gt;&lt;/code&gt; 文字を含むコンポーネントから標準準拠のURIを生成するなどの操作を有効にするための便利な選択肢です。これを例で説明する方が簡単です。</target>
        </trans-unit>
        <trans-unit id="9d41ee39dfc3d3300eef2e7cc4120a5fd8d4f83d" translate="yes" xml:space="preserve">
          <source>The API is simple:</source>
          <target state="translated">APIはシンプルです。</target>
        </trans-unit>
        <trans-unit id="d4aca81b201537abe8dedf009dd68114d62d46d3" translate="yes" xml:space="preserve">
          <source>The API provided by Windows.</source>
          <target state="translated">Windowsが提供するAPI。</target>
        </trans-unit>
        <trans-unit id="ea6764678e9074dc87171f45bcd4511b8aa2d4d8" translate="yes" xml:space="preserve">
          <source>The ASN.1 application provides the following:</source>
          <target state="translated">ASN.1アプリケーションでは、以下のような機能を提供しています。</target>
        </trans-unit>
        <trans-unit id="9c1b6316b531e843db6912095bad2d7449901534" translate="yes" xml:space="preserve">
          <source>The ASN.1 code, the Erlang source code, and the generated &lt;code&gt;.hrl&lt;/code&gt; files for them are provided in the distribution and are placed in the directories &lt;code&gt;mibs&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt;, and &lt;code&gt;include&lt;/code&gt;, respectively, in the &lt;code&gt;snmp&lt;/code&gt; application.</source>
          <target state="translated">ASN.1コード、Erlangソースコード、およびそれらのために生成された &lt;code&gt;.hrl&lt;/code&gt; ファイルは、ディストリビューションで提供され、 &lt;code&gt;snmp&lt;/code&gt; アプリケーションのディレクトリ &lt;code&gt;mibs&lt;/code&gt; 、 &lt;code&gt;src&lt;/code&gt; 、および &lt;code&gt;include&lt;/code&gt; にそれぞれ配置されます。</target>
        </trans-unit>
        <trans-unit id="c4c076a03aaf6d1e948523fb216ccde0cc05b7f7" translate="yes" xml:space="preserve">
          <source>The ASN.1 compiler can be started directly from the command line by the &lt;code&gt;erlc&lt;/code&gt; program. This is convenient when compiling many ASN.1 files from the command line or when using Makefiles. Some examples of how the &lt;code&gt;erlc&lt;/code&gt; command can be used to start the ASN.1 compiler:</source>
          <target state="translated">ASN.1コンパイラーは、 &lt;code&gt;erlc&lt;/code&gt; プログラムによってコマンド行から直接開始できます。これは、コマンドラインから多くのASN.1ファイルをコンパイルする場合、またはMakefileを使用する場合に便利です。 &lt;code&gt;erlc&lt;/code&gt; コマンドを使用してASN.1コンパイラーを開始する方法の例：</target>
        </trans-unit>
        <trans-unit id="fb22058cd698b91ccb24c3e367daf392b4a590e1" translate="yes" xml:space="preserve">
          <source>The ASN.1 compiler takes an ASN.1 module as input and generates a corresponding Erlang module, which can encode and decode the specified data types. Alternatively, the compiler takes a specification module specifying all input modules, and generates a module with encode/decode functions. In addition, some generic functions can be used during development of applications that handles ASN.1 data (encoded as &lt;code&gt;BER&lt;/code&gt; or &lt;code&gt;PER&lt;/code&gt;).</source>
          <target state="translated">ASN.1コンパイラーはASN.1モジュールを入力として受け取り、指定されたデータ型をエンコードおよびデコードできる対応するErlangモジュールを生成します。あるいは、コンパイラーは、すべての入力モジュールを指定する仕様モジュールを取り、エンコード/デコード機能を持つモジュールを生成します。さらに、ASN.1データ（ &lt;code&gt;BER&lt;/code&gt; または &lt;code&gt;PER&lt;/code&gt; としてエンコード）を処理するアプリケーションの開発中に、いくつかの汎用関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="c60d4a11ddc52b500d299eda7e6852a95f2bae35" translate="yes" xml:space="preserve">
          <source>The ASN.1 specifications in the test were compiled with options &lt;code&gt;ber_bin, optimize, driver&lt;/code&gt; and &lt;code&gt;asn1config&lt;/code&gt;. Omitting option &lt;code&gt;driver&lt;/code&gt; gives higher values for &lt;code&gt;decode&lt;/code&gt; and &lt;code&gt;decode_part&lt;/code&gt;. These tests have not been rerun using NIFs, but are expected to perform about 5% better than the linked-in driver.</source>
          <target state="translated">テストのASN.1仕様は、オプション &lt;code&gt;ber_bin, optimize, driver&lt;/code&gt; 、および &lt;code&gt;asn1config&lt;/code&gt; を使用してコンパイルされています。オプション &lt;code&gt;driver&lt;/code&gt; を省略 &lt;code&gt;decode&lt;/code&gt; と、decodeおよび &lt;code&gt;decode_part&lt;/code&gt; の値が高くなります。これらのテストはNIFを使用して再実行されていませんが、リンクされたドライバーよりも約5％高いパフォーマンスが期待されています。</target>
        </trans-unit>
        <trans-unit id="2f22980605315f568d967ab23f6f0f04c10f0db4" translate="yes" xml:space="preserve">
          <source>The ASN.1 to Erlang compiler does not determine the correct interpretation of each BER string octet value with different character strings. The application is responsible for interpretation of octets. Therefore, from the BER string point of view, octets are very similar to character strings and are compiled in the same way.</source>
          <target state="translated">ASN.1からErlangコンパイラは、異なる文字列を持つBER文字列の各オクテット値の正しい解釈を決定しません。オクテットの解釈はアプリケーションに任されています。そのため、BER文字列の観点から見ると、オクテットは文字列と非常に似ており、同じようにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="e882c6bd57a43305a3640939f477df3d4ead459d" translate="yes" xml:space="preserve">
          <source>The ASN.1 type can be 'Certificate', 'OTPCertificate' or a subtype of either.</source>
          <target state="translated">ASN.1型は、'Certificate'、'OTPCertificate'、またはどちらかのサブタイプとすることができます。</target>
        </trans-unit>
        <trans-unit id="a7a7f7547a93bea8b589e07f519f153c18f157b7" translate="yes" xml:space="preserve">
          <source>The AVPs of the message. Ignored for an outgoing message if the &lt;code&gt;msg&lt;/code&gt; field is set to a value other than &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">メッセージのAVP。 &lt;code&gt;msg&lt;/code&gt; フィールドが &lt;code&gt;undefined&lt;/code&gt; 以外の値に設定されている場合、送信メッセージでは無視されます。</target>
        </trans-unit>
        <trans-unit id="bbe283419a75e9a012fbd1970d31d2b4f451187c" translate="yes" xml:space="preserve">
          <source>The Adler checksum of the dictionary is returned.</source>
          <target state="translated">辞書のアドラーチェックサムが返されます。</target>
        </trans-unit>
        <trans-unit id="396f5f5683edcca9c1f25e63c5cdd3210d9fa913" translate="yes" xml:space="preserve">
          <source>The Anti-Replay protection feature in stateless servers executes in the following steps when a new ClientHello is received:</source>
          <target state="translated">ステートレスサーバーのアンチリプレイ保護機能は、新しいClientHelloを受信すると、以下の手順で実行されます。</target>
        </trans-unit>
        <trans-unit id="c87eb8ebe47038b4ccdd22aaa97c4f88f2c5c087" translate="yes" xml:space="preserve">
          <source>The Application Id is set in the Diameter Header of outgoing messages of the application, and the value in the header of an incoming message is used to identify the relevant dictionary module.</source>
          <target state="translated">アプリケーションIDは、アプリケーションの発信メッセージのDiameter Headerに設定され、着信メッセージのヘッダ内の値は、関連する辞書モジュールを識別するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f5de0091f6607fa5ed052b8880c8cef363f44808" translate="yes" xml:space="preserve">
          <source>The Audit Trail Log is managed by the network interface process. So, it is this process that has to do the actual changing of the type.</source>
          <target state="translated">監査証跡ログは、ネットワークインタフェースのプロセスで管理されています。つまり、実際に型の変更をしなければならないのはこのプロセスなのです。</target>
        </trans-unit>
        <trans-unit id="4ffaae1f3e0b8fd90d36e73237642154e3434485" translate="yes" xml:space="preserve">
          <source>The Audit Trail Log is managed by the network interface process. So, it is this process that has to retrieve the actual log-type.</source>
          <target state="translated">監査証跡ログは、ネットワークインタフェースプロセスで管理されています。つまり、実際のログタイプを取得しなければならないのは、このプロセスです。</target>
        </trans-unit>
        <trans-unit id="56bc2b11b64e2a80365e104579b5470c818d8f1f" translate="yes" xml:space="preserve">
          <source>The Audit Trail Log is managed by the network interface process. So, it is this process that has to return the actual log-type.</source>
          <target state="translated">監査証跡ログは、ネットワークインタフェースプロセスで管理されています。つまり、実際のログタイプを返さなければならないのはこのプロセスです。</target>
        </trans-unit>
        <trans-unit id="5f534cf4748ee979b48f1dda16d8700a38a8db83" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;erlang:is_process_alive/1&lt;/code&gt; is the closest you can get to a process table lookup only. The BIF looks up the process corresponding to the process identifier passed as argument, and then checks if it is alive. By running multiple processes looping over this BIF checking the same process, we get a speedup between 20000-23000%. Conceptually this operation only involve read operations. In the implementation used in R16B also only read operation are performed, while the previous implementation need to lock structures in order to read the data, suffering from both lock contention and contention due to modifications of cache lines used by lock internal data structures and the reference counter on the process being looked up.</source>
          <target state="translated">BIF &lt;code&gt;erlang:is_process_alive/1&lt;/code&gt; は、プロセステーブルルックアップのみに到達できる最も近いものです。 BIFは、引数として渡されたプロセスIDに対応するプロセスを検索し、それが生きているかどうかを確認します。このBIFをループして同じプロセスをチェックする複数のプロセスを実行することにより、20000〜23000％のスピードアップが得られます。概念的には、この操作には読み取り操作のみが含まれます。 R16Bで使用される実装では、読み取り操作のみが実行されますが、以前の実装では、データを読み取るために構造をロックする必要があり、ロック内部データ構造と参照によって使用されるキャッシュラインの変更によるロック競合と競合の両方に悩まされています。調べているプロセスのカウンター。</target>
        </trans-unit>
        <trans-unit id="fb9967052a764c3afae20ad96d6a28a3fa28a91f" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; can also add match specifications to a function. A match specification comprises a pattern that the function arguments must match, a guard expression that must evaluate to &lt;code&gt;true&lt;/code&gt;, and an action to be performed. The default action is to send a trace message. If the pattern does not match or the guard fails, the action is not executed.</source>
          <target state="translated">BIF &lt;code&gt;erlang:trace_pattern/3&lt;/code&gt; は、関数に一致指定を追加することもできます。一致指定は、関数の引数が一致する必要があるパターン、 &lt;code&gt;true&lt;/code&gt; に評価される必要があるガード式、および実行されるアクションで構成されます。デフォルトのアクションは、トレースメッセージを送信することです。パターンが一致しない場合、またはガードが失敗した場合、アクションは実行されません。</target>
        </trans-unit>
        <trans-unit id="0e87dd32697c643963810be073120b237d9b1c65" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;open_port/2&lt;/code&gt; is documented in the &lt;code&gt;erlang&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">BIF &lt;code&gt;open_port/2&lt;/code&gt; は、ERTSの &lt;code&gt;erlang&lt;/code&gt; マニュアルページに記載されています。</target>
        </trans-unit>
        <trans-unit id="102d447ee7d66bcdc64a15b95caa727b7d5ec384" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;statistics(run_queue)&lt;/code&gt; is used for estimating future loads. It returns the length of the queue of ready to run processes in the Erlang runtime system.</source>
          <target state="translated">BIF &lt;code&gt;statistics(run_queue)&lt;/code&gt; は、将来の負荷を推定するために使用されます。これは、Erlangランタイムシステムで実行可能なプロセスのキューの長さを返します。</target>
        </trans-unit>
        <trans-unit id="a6a407c55efe87e4b70f70a1f8c95515dc9b4791" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;throw(Any)&lt;/code&gt; can be used for non-local return from a function. It must be evaluated within a &lt;code&gt;catch&lt;/code&gt;, which returns the value &lt;code&gt;Any&lt;/code&gt;.</source>
          <target state="translated">BIF &lt;code&gt;throw(Any)&lt;/code&gt; は、関数からの非ローカル戻りに使用できます。これは、値 &lt;code&gt;Any&lt;/code&gt; を返す &lt;code&gt;catch&lt;/code&gt; 内で評価する必要があります。</target>
        </trans-unit>
        <trans-unit id="30ca995f69db34040dadf8f4fb8f2daa8f294d98" translate="yes" xml:space="preserve">
          <source>The BIF &lt;code&gt;whereis(RegisteredName)&lt;/code&gt; checks if a registered process of name &lt;code&gt;RegisteredName&lt;/code&gt; exists. If it exists, the pid of that process is returned. If it does not exist, the atom &lt;code&gt;undefined&lt;/code&gt; is returned.</source>
          <target state="translated">BIF &lt;code&gt;whereis(RegisteredName)&lt;/code&gt; は、 &lt;code&gt;RegisteredName&lt;/code&gt; という名前の登録済みプロセスが存在するかどうかを確認します。存在する場合は、そのプロセスのPIDが返されます。存在しない場合は、 &lt;code&gt;undefined&lt;/code&gt; のアトムが返されます。</target>
        </trans-unit>
        <trans-unit id="6cbf1adc0d75868cfd46589662e75f0f79ed5cbb" translate="yes" xml:space="preserve">
          <source>The Bindings area, displaying all variables bindings. If you click a variable name, the value is displayed in the Evaluator area. Double-click a variable name to open a window where the variable value can be edited. Notice however that pid, port, reference, or fun values cannot be edited unless they can be represented in the running system.</source>
          <target state="translated">バインディング領域で、すべての変数のバインディングを表示します。変数名をクリックすると、評価者領域に値が表示されます。変数名をダブルクリックすると、変数値を編集できるウィンドウが開きます。ただし、pid,port,reference,fun の値は、実行中のシステムで表現できない限り編集できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4b6c3c38656309049129434a8a3888567bd5d33d" translate="yes" xml:space="preserve">
          <source>The Button area, with buttons for quick access to frequently used functions in the &lt;strong&gt;Process&lt;/strong&gt; menu.</source>
          <target state="translated">[ボタン]領域には、[ &lt;strong&gt;処理&lt;/strong&gt; ]メニューで頻繁に使用される機能にすばやくアクセスするためのボタンがあります。</target>
        </trans-unit>
        <trans-unit id="ada22f32dd020105bdc39ab625188b5d539d360a" translate="yes" xml:space="preserve">
          <source>The C driver is a module that is compiled and linked into a shared library. It uses a driver structure and includes the header file &lt;code&gt;erl_driver.h&lt;/code&gt;.</source>
          <target state="translated">Cドライバは、コンパイルされて共有ライブラリにリンクされるモジュールです。ドライバー構造を使用し、ヘッダーファイル &lt;code&gt;erl_driver.h&lt;/code&gt; をインクルードします。</target>
        </trans-unit>
        <trans-unit id="2a7c12f419c3e677f26c1d74131f78103f5ccbf9" translate="yes" xml:space="preserve">
          <source>The C node can act as a server or a client when setting up the Erlang-C communication. If it acts as a client, it connects to an Erlang node by calling &lt;code&gt;erl_connect()&lt;/code&gt;, which returns an open file descriptor at success:</source>
          <target state="translated">Cノードは、Erlang-C通信をセットアップするときにサーバーまたはクライアントとして機能できます。クライアントとして機能する場合は、 &lt;code&gt;erl_connect()&lt;/code&gt; を呼び出してErlangノードに接続し、成功するとオープンファイル記述子を返します。</target>
        </trans-unit>
        <trans-unit id="f778bcd020988cc52d7d8911bac363507b5bc1fe" translate="yes" xml:space="preserve">
          <source>The C node can receive a message from Erlang by calling &lt;code&gt;erl_receive msg()&lt;/code&gt;. This function reads data from the open file descriptor &lt;code&gt;fd&lt;/code&gt; into a buffer and puts the result in an &lt;code&gt;ErlMessage&lt;/code&gt; struct &lt;code&gt;emsg&lt;/code&gt;. &lt;code&gt;ErlMessage&lt;/code&gt; has a field &lt;code&gt;type&lt;/code&gt; defining what kind of data is received. In this case, the type of interest is &lt;code&gt;ERL_REG_SEND&lt;/code&gt; which indicates that Erlang sent a message to a registered process at the C node. The actual message, an &lt;code&gt;ETERM&lt;/code&gt;, is in the &lt;code&gt;msg&lt;/code&gt; field.</source>
          <target state="translated">Cノードは &lt;code&gt;erl_receive msg()&lt;/code&gt; を呼び出すことにより、Erlangからメッセージを受信できます。この関数は、開いているファイル記述子 &lt;code&gt;fd&lt;/code&gt; からデータをバッファーに読み取り、その結果を &lt;code&gt;ErlMessage&lt;/code&gt; struct &lt;code&gt;emsg&lt;/code&gt; に入れます。 &lt;code&gt;ErlMessage&lt;/code&gt; には、受信するデータの種類を定義するフィールド &lt;code&gt;type&lt;/code&gt; があります。この場合、関心のあるタイプは &lt;code&gt;ERL_REG_SEND&lt;/code&gt; で、ErlangがCノードの登録済みプロセスにメッセージを送信したことを示します。実際のメッセージ &lt;code&gt;ETERM&lt;/code&gt; は &lt;code&gt;msg&lt;/code&gt; フィールドにあります。</target>
        </trans-unit>
        <trans-unit id="ec592580544dfa8a13cf79ebfaf21d822174fe76" translate="yes" xml:space="preserve">
          <source>The C-node identified by &lt;code&gt;ec&lt;/code&gt; must have been initialized and must have received a name prior to the call to &lt;code&gt;ei_make_pid()&lt;/code&gt;. Initialization of the C-node is done by a call to &lt;code&gt;&lt;a href=&quot;#ei_connect_init&quot;&gt;ei_connect_init()&lt;/a&gt;&lt;/code&gt; or friends. If the name is dynamically assigned from the peer node, the C-node also has to be connected.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; によって識別されるCノードは、 &lt;code&gt;ei_make_pid()&lt;/code&gt; を呼び出す前に初期化されており、名前を受け取っている必要があります。Cノードの初期化は、 &lt;code&gt;&lt;a href=&quot;#ei_connect_init&quot;&gt;ei_connect_init()&lt;/a&gt;&lt;/code&gt; またはその仲間の呼び出しによって行われます。名前がピアノードから動的に割り当てられる場合は、Cノードも接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="e13c2586709436dfbebc6149ffb9c1b130da4a2e" translate="yes" xml:space="preserve">
          <source>The C-node identified by &lt;code&gt;ec&lt;/code&gt; must have been initialized and must have received a name prior to the call to &lt;code&gt;ei_make_ref()&lt;/code&gt;. Initialization of the C-node is done by a call to &lt;code&gt;&lt;a href=&quot;#ei_connect_init&quot;&gt;ei_connect_init()&lt;/a&gt;&lt;/code&gt; or friends. If the name is dynamically assigned from the peer node, the C-node also has to be connected.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; によって識別されるCノードは、 &lt;code&gt;ei_make_ref()&lt;/code&gt; を呼び出す前に初期化されており、名前を受け取っている必要があります。Cノードの初期化は、 &lt;code&gt;&lt;a href=&quot;#ei_connect_init&quot;&gt;ei_connect_init()&lt;/a&gt;&lt;/code&gt; またはその仲間の呼び出しによって行われます。名前がピアノードから動的に割り当てられる場合は、Cノードも接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="39af024e46f5af7c40347c42343f756bdbbc0a29" translate="yes" xml:space="preserve">
          <source>The C-node identified by &lt;code&gt;ec&lt;/code&gt; must have been initialized and must have received a name prior to the call to &lt;code&gt;ei_self()&lt;/code&gt;. Initialization of the C-node is done by a call to &lt;code&gt;&lt;a href=&quot;#ei_connect_init&quot;&gt;ei_connect_init()&lt;/a&gt;&lt;/code&gt; or friends. If the name is dynamically assigned from the peer node, the C-node also has to be connected.</source>
          <target state="translated">&lt;code&gt;ec&lt;/code&gt; によって識別されるCノードは、初期化されている必要があり、 &lt;code&gt;ei_self()&lt;/code&gt; を呼び出す前に名前を受け取っている必要があります。Cノードの初期化は、 &lt;code&gt;&lt;a href=&quot;#ei_connect_init&quot;&gt;ei_connect_init()&lt;/a&gt;&lt;/code&gt; またはその仲間の呼び出しによって行われます。名前がピアノードから動的に割り当てられる場合は、Cノードも接続する必要があります。</target>
        </trans-unit>
        <trans-unit id="44cfee0b8169b38821cf004612b6024fa4504a22" translate="yes" xml:space="preserve">
          <source>The CA certificates specified for the connection will be used to construct the certificate chain validating the CRLs.</source>
          <target state="translated">接続に指定された CA 証明書は、CRL を検証する証明書チェーンを構築するために使用されます。</target>
        </trans-unit>
        <trans-unit id="9b711437028a29fd162a39304f7e85e3b67e2c19" translate="yes" xml:space="preserve">
          <source>The CGI script response comprises a message header and a message body, separated by a blank line. The message header contains one or more header fields. The body can be empty.</source>
          <target state="translated">CGI スクリプトの応答は、空白行で区切られたメッセージヘッダーとメッセージボディで構成されています。メッセージヘッダーは1つ以上のヘッダーフィールドを含みます。ボディは空にすることができます。</target>
        </trans-unit>
        <trans-unit id="4c3c9d660d39101e158d800c72dc5b3c5f71e86f" translate="yes" xml:space="preserve">
          <source>The CNT column shows the total number of function calls that was found in the trace. In the ACC column is the total time of the trace from first timestamp to last. And in the OWN column is the sum of the execution time in functions found in the trace, not including called functions. In this case it is very close to the ACC time since the emulator had practically nothing else to do than to execute our test program.</source>
          <target state="translated">CNT 列には、トレースで見つかった関数呼び出しの総数が表示されます。ACC列には、最初のタイムスタンプから最後のタイムスタンプまでのトレースの合計時間が表示されます。そしてOWN列には、トレースで見つかった関数の実行時間の合計で、呼び出された関数は含まれていません。この場合、エミュレータはテストプログラムを実行する以外に何もすることがなかったので、ACCの時間に非常に近い値になります。</target>
        </trans-unit>
        <trans-unit id="0bca2724268527bcfe47363d53f453d381e52758" translate="yes" xml:space="preserve">
          <source>The CPU topology is used when binding schedulers to logical processors. If schedulers are already bound when the CPU topology is changed, the schedulers are sent a request to rebind according to the new CPU topology.</source>
          <target state="translated">CPUトポロジは、スケジューラを論理プロセッサにバインドする際に使用される。CPUトポロジが変更されたときに、すでにスケジューラがバインドされている場合は、新しいCPUトポロジに合わせてスケジューラをリバインドするためのリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="3e338f2c345acced3a85f3002b3cdda7b33768c1" translate="yes" xml:space="preserve">
          <source>The CPU utilization is defined as the sum of the percentage shares of the CPU cycles spent in all busy processor states (see &lt;code&gt;util/1&lt;/code&gt; below) in average on all CPUs.</source>
          <target state="translated">CPU使用率は、すべてのCPUで平均してすべてのビジープロセッサ状態（以下の &lt;code&gt;util/1&lt;/code&gt; を参照）で費やされたCPUサイクルの割合の合計として定義されます。</target>
        </trans-unit>
        <trans-unit id="aa86529ffc420dbda732a44a0aa8bd483c1ae653" translate="yes" xml:space="preserve">
          <source>The CRL entry extensions OID name atoms and their corresponding value types are as follows:</source>
          <target state="translated">CRL エントリ拡張 OID 名アトムとそれに対応する値タイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="270f1611da531780d2eaa5897949ee887332e027" translate="yes" xml:space="preserve">
          <source>The CRL extensions OID name atoms and their corresponding value types are as follows:</source>
          <target state="translated">CRL拡張OID名アトムとそれに対応する値タイプは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d9b7329cef621756a648262a641008c28933737d" translate="yes" xml:space="preserve">
          <source>The CRLs will be fetched from a local or external cache. See &lt;code&gt;ssl_crl_cache_api(3)&lt;/code&gt;.</source>
          <target state="translated">CRLは、ローカルまたは外部キャッシュからフェッチされます。 &lt;code&gt;ssl_crl_cache_api(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc03e6a9344836dc83866fc80ae58c6381b38386" translate="yes" xml:space="preserve">
          <source>The CRYPTO app has evolved during its lifetime. Since also the OpenSSL cryptolib has changed the API several times, there are parts of the CRYPTO app that uses a very old one internally and other parts that uses the latest one. The internal definitions of e.g cipher names was a bit hard to maintain.</source>
          <target state="translated">CRYPTOアプリは、その寿命の間に進化してきました。OpenSSL cryptolibも何度かAPIを変更しているため、CRYPTOアプリには内部的に古いものを使用している部分と、最新のものを使用している部分があります。暗号名などの内部定義のメンテナンスが少し大変でした。</target>
        </trans-unit>
        <trans-unit id="f3d829d39e1e62045ec8647a09fccc7a51c77978" translate="yes" xml:space="preserve">
          <source>The CT hook functions can call any logging function in the &lt;code&gt;ct&lt;/code&gt; interface to print information to the log files, or to add comments in the suite overview page.</source>
          <target state="translated">CTフック関数は、 &lt;code&gt;ct&lt;/code&gt; インターフェースのロギング関数を呼び出して、ログファイルに情報を出力したり、スイートの概要ページにコメントを追加したりできます。</target>
        </trans-unit>
        <trans-unit id="3ec67be87ba83be4a6a36f46cae0a249d6c031c6" translate="yes" xml:space="preserve">
          <source>The Call Graph is  represented by Erlang terms (the sets are lists), which is suitable for many analyses. But for analyses that look at chains of calls, a list representation is much too slow. Instead the representation offered by the &lt;code id=&quot;representation&quot;&gt;digraph&lt;/code&gt; module is used. The translation of the list representation of the Call Graph - or a subgraph thereof - to the &lt;code&gt;digraph&lt;/code&gt; representation does not come for free, so the language used for expressing queries to be described below has a special operator for this task and a possibility to save the &lt;code&gt;digraph&lt;/code&gt; representation for subsequent analyses.</source>
          <target state="translated">コールグラフは、Erlang用語（セットはリスト）で表され、多くの分析に適しています。しかし、一連の呼び出しを分析する場合、リストの表現は遅すぎます。代わりに、 &lt;code id=&quot;representation&quot;&gt;digraph&lt;/code&gt; モジュールによって提供される表現が使用されます。コールグラフのリスト表現またはそのサブグラフの &lt;code&gt;digraph&lt;/code&gt; 表現への変換は無料ではないため、以下で説明するクエリの表現に使用される言語には、このタスクのための特別な演算子があり、後続の分析のための &lt;code&gt;digraph&lt;/code&gt; 表現。</target>
        </trans-unit>
        <trans-unit id="bce56cac593ab0a42cef53b33869a05dc52b528e" translate="yes" xml:space="preserve">
          <source>The Code area, displaying the code being executed. The code is indented and each line is prefixed with its line number. If the process execution is stopped, the current line is marked with &lt;code&gt;--&amp;gt;&lt;/code&gt;. An existing break point at a line is marked with a stop symbol. In the example shown in the illustration, the execution stopped at line 6, before the execution of &lt;code&gt;fac/1&lt;/code&gt;.</source>
          <target state="translated">実行されているコードを表示するコード領域。コードはインデントされており、各行の先頭には行番号が付いています。プロセスの実行が停止すると、現在の行は &lt;code&gt;--&amp;gt;&lt;/code&gt; マークされます。行の既存のブレークポイントには、停止記号が付いています。図の例では、実行は6行目で停止してから &lt;code&gt;fac/1&lt;/code&gt; が実行されています。</target>
        </trans-unit>
        <trans-unit id="3c4163ad4ae86ebef487e34acf3cb3b300872a11" translate="yes" xml:space="preserve">
          <source>The Common Message and Relay applications are the only applications that diameter itself has any specific knowledge of. The Common Message application is used for messages that diameter itself handles: CER/CEA, DWR/DWA and DPR/DPA. The Relay application is given special treatment with regard to encode/decode since the messages and AVPs it handles are not specifically defined.</source>
          <target state="translated">Common MessageとRelayアプリケーションは、dameter自身が特別な知識を持っている唯一のアプリケーションです。Common Messageアプリケーションは、dameter自身が扱うメッセージに使用されます。CER/CEA、DWR/DWA、DPR/DPAです。Relayアプリケーションは、それが扱うメッセージとAVPが特に定義されていないため、エンコード/デコードに関して特別な扱いを受けます。</target>
        </trans-unit>
        <trans-unit id="314dbe1e2d1cb12d891485b91d81bb94162ddaf9" translate="yes" xml:space="preserve">
          <source>The Compliance column notes &lt;strong&gt;C&lt;/strong&gt; (Compliant) if the required functionality is implemented, &lt;strong&gt;PC&lt;/strong&gt; (Partially Compliant) if there are limitations, &lt;strong&gt;NC&lt;/strong&gt; (Not Compliant) if functionality is not implemented, or a dash if text is informational or only places requirements that must be met by the user's implementation.</source>
          <target state="translated">コンプライアンスの列には、必要な機能が実装されている場合は&lt;strong&gt;C&lt;/strong&gt;（準拠）、制限がある場合は&lt;strong&gt;PC&lt;/strong&gt;（部分的に準拠）、機能が実装されていない場合は&lt;strong&gt;NC&lt;/strong&gt;（非準拠）、またはテキストが情報であるか必要な要件のみが記載されている場合はダッシュが表示されます。ユーザーの実装によって満たされました。</target>
        </trans-unit>
        <trans-unit id="cb5797134c742f2284426627bbcaee9db9ff4f9b" translate="yes" xml:space="preserve">
          <source>The ControlPid may be the identity of a process residing on another Erlang node. This is useful when you want to distribute a user over several Erlang nodes. In such a case one of the nodes has the physical connection. When a user residing on one of the other nodes needs to send a request (with megaco:call/3 or megaco:cast/3), the message will encoded on the originating Erlang node, and then be forwarded to the node with the physical connection. When the reply arrives, it will be forwarded back to the originator. The distributed connection may explicitly be deactivated by a local call to megaco:disconnect/2 or implicitly when the physical connection is deactivated (with megaco:disconnect/2, killing the controlling process, halting the other node, ...).</source>
          <target state="translated">ControlPidは別のErlangノードにいるプロセスのIDです。これは複数のErlangノードにユーザーを分散させたいときに便利です。このような場合、ノードの1つが物理的な接続を持っています。他のノードにいるユーザがリクエストを送る必要があるとき(megaco:call/3やmegaco:cast/3を使って)、メッセージは元のErlangノードでエンコードされ、物理的に接続しているノードに転送されます。リプライが到着すると、元のノードに転送されます。分散接続は明示的にmegaco:disconnect/2へのローカルコールで解除されるか、物理接続が解除されたときに暗黙的に解除されます(megaco:disconnect/2で制御プロセスを停止させたり、他のノードを停止させたり、...)。</target>
        </trans-unit>
        <trans-unit id="78df27997f59e3cf7a226f97555796fd4db3b167" translate="yes" xml:space="preserve">
          <source>The Crashdump Viewer is a WxWidgets based tool for browsing Erlang crashdumps.</source>
          <target state="translated">Crashdump ViewerはWxWidgetsベースのErlangのクラッシュダンプを閲覧するためのツールです。</target>
        </trans-unit>
        <trans-unit id="e25b4f2128c61d45f1244bb1e42a65e6c254444f" translate="yes" xml:space="preserve">
          <source>The Cs (Surrogate) property applies only to characters in the range U+D800 to U+DFFF. Such characters are invalid in Unicode strings and so cannot be tested by PCRE. Perl does not support the Cs property.</source>
          <target state="translated">Cs(サロゲート)プロパティは、U+D800からU+DFFFの範囲の文字にのみ適用されます。このような文字はUnicode文字列では無効なので、PCREではテストできません。Perl は Cs プロパティをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="8d8b1e5940b411ae8301615a457804bfb0094984" translate="yes" xml:space="preserve">
          <source>The DER encoder omits the encoding for the same &lt;code&gt;BIT STRING&lt;/code&gt;:</source>
          <target state="translated">DERエンコーダーは、同じ &lt;code&gt;BIT STRING&lt;/code&gt; のエンコードを省略します。</target>
        </trans-unit>
        <trans-unit id="9e781b3302f49ad7b6f93f77b8bb63523e6ee75c" translate="yes" xml:space="preserve">
          <source>The DER-encoded Diffie-Hellman parameters. If specified, it overrides option &lt;code&gt;dhfile&lt;/code&gt;.</source>
          <target state="translated">DERエンコードされたDiffie-Hellmanパラメータ。指定すると、オプション &lt;code&gt;dhfile&lt;/code&gt; が上書きされます。</target>
        </trans-unit>
        <trans-unit id="b9e05b3ca4b742f1e879494bc5c683f33ec025ce" translate="yes" xml:space="preserve">
          <source>The DER-encoded trusted certificates. If this option is supplied it overrides option &lt;code&gt;cacertfile&lt;/code&gt;.</source>
          <target state="translated">DERエンコードされた信頼できる証明書。このオプションを指定すると、オプション &lt;code&gt;cacertfile&lt;/code&gt; が上書きされます。</target>
        </trans-unit>
        <trans-unit id="1ba530c04cbce9e372b32aee5f085b4acb4f0137" translate="yes" xml:space="preserve">
          <source>The DER-encoded user's private key or a map refering to a crypto engine and its key reference that optionally can be password protected, seealso &lt;code&gt; crypto:engine_load/4 &lt;/code&gt; and &lt;code&gt; Crypto's Users Guide&lt;/code&gt;. If this option is supplied, it overrides option &lt;code&gt;keyfile&lt;/code&gt;.</source>
          <target state="translated">DERでエンコードされたユーザーの秘密鍵または暗号エンジンを参照するマップと、オプションでパスワードで保護できるその鍵参照。crypto &lt;code&gt; crypto:engine_load/4 &lt;/code&gt; および &lt;code&gt; Crypto's Users Guide&lt;/code&gt; 。このオプションを指定すると、オプションの &lt;code&gt;keyfile&lt;/code&gt; 上書きされます。</target>
        </trans-unit>
        <trans-unit id="503452c36c49cb1fd0ea949662ea239d8f9105d2" translate="yes" xml:space="preserve">
          <source>The DER-encoded user's private key or a map refering to a crypto engine and its key reference that optionally can be password protected, seealso &lt;code&gt;crypto:engine_load/4&lt;/code&gt; and &lt;code&gt;Crypto's Users Guide&lt;/code&gt;. If this option is supplied, it overrides option &lt;code&gt;keyfile&lt;/code&gt;.</source>
          <target state="translated">DERでエンコードされたユーザーの秘密キーまたは暗号エンジンを参照するマップと、オプションでパスワードで保護できるキー参照。crypto &lt;code&gt;crypto:engine_load/4&lt;/code&gt; と &lt;code&gt;Crypto's Users Guide&lt;/code&gt; ご覧ください。このオプションを指定すると、オプション &lt;code&gt;keyfile&lt;/code&gt; が上書きされます。</target>
        </trans-unit>
        <trans-unit id="1412b8d79c31037e94ec8ee160cfa882f7bfb3fb" translate="yes" xml:space="preserve">
          <source>The DER-encoded users certificate. If this option is supplied, it overrides option &lt;code&gt;certfile&lt;/code&gt;.</source>
          <target state="translated">DERでエンコードされたユーザー証明書。このオプションを指定すると、オプション &lt;code&gt;certfile&lt;/code&gt; が上書きされます。</target>
        </trans-unit>
        <trans-unit id="62d494bd359efefc011e29e6ca8af7b8607707f9" translate="yes" xml:space="preserve">
          <source>The DER-encoded users certificate. Note that the cert option may also be a list of DER-encoded certificates where the first one is the users certificate and the rest of the certificates constitutes the certificate chain. For maximum interoperability the certificates in the chain should be in the correct order, the chain will be sent as is to the peer. If chain certificates are not provided, certificates from &lt;code&gt;&lt;a href=&quot;#type-client_cacerts&quot;&gt;client_cacerts()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-server_cacerts&quot;&gt;server_cacerts()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#type-client_cafile&quot;&gt;client_cafile()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-server_cafile&quot;&gt;server_cafile()&lt;/a&gt;&lt;/code&gt; are used to construct the chain. If this option is supplied, it overrides option &lt;code&gt;certfile&lt;/code&gt;.</source>
          <target state="translated">DERでエンコードされたユーザー証明書。証明書オプションは、DERでエンコードされた証明書のリストである場合もあり、最初の証明書はユーザー証明書であり、残りの証明書は証明書チェーンを構成することに注意してください。相互運用性を最大化するには、チェーン内の証明書が正しい順序である必要があります。チェーンはそのままピアに送信されます。チェーン証明書が提供されていない場合は、 &lt;code&gt;&lt;a href=&quot;#type-client_cacerts&quot;&gt;client_cacerts()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-server_cacerts&quot;&gt;server_cacerts()&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#type-client_cafile&quot;&gt;client_cafile()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-server_cafile&quot;&gt;server_cafile()&lt;/a&gt;&lt;/code&gt; からの証明書を使用してチェーンを構築します。このオプションを指定すると、オプション &lt;code&gt;certfile&lt;/code&gt; が上書きされます。</target>
        </trans-unit>
        <trans-unit id="b00e40d2bc93d885d8856a1b65b6e1164cd7cb96" translate="yes" xml:space="preserve">
          <source>The Data Structures of the Distribution Driver</source>
          <target state="translated">ディストリビューションドライバのデータ構造</target>
        </trans-unit>
        <trans-unit id="25f2f74a7edc47541dafb29c006cde23cd47d9fe" translate="yes" xml:space="preserve">
          <source>The Diameter header of the message. Can be (and typically should be) &lt;code&gt;undefined&lt;/code&gt; for an outgoing message in a non-relay application, in which case diameter provides appropriate values.</source>
          <target state="translated">メッセージのDiameterヘッダー。非リレーアプリケーションの送信メッセージに対して &lt;code&gt;undefined&lt;/code&gt; にすることができます（通常は未定義にする必要があります）。この場合、diameterは適切な値を提供します。</target>
        </trans-unit>
        <trans-unit id="5efc1791e653c1599eb1a85a25bc63fbc5f68900" translate="yes" xml:space="preserve">
          <source>The EPMD closes the socket when it has sent the information.</source>
          <target state="translated">EPMDは、情報を送信した時点でソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="e75f4961aac2a4105e4523a54d7cf3b30606ca91" translate="yes" xml:space="preserve">
          <source>The ERTS memory allocators manage memory blocks in two types of raw memory chunks. We call these chunks of raw memory &lt;strong&gt;carriers&lt;/strong&gt;. Single-block carriers which only contain one large block, and multi-block carriers which contain multiple blocks. A carrier is typically created using &lt;code&gt;mmap()&lt;/code&gt; on unix systems. However, how a carrier is created is of minor importance. An allocator instance typically manages a mixture of single- and multi-block carriers.</source>
          <target state="translated">ERTSメモリアロケータは、2種類のrawメモリチャンクのメモリブロックを管理します。これらの生のメモリ&lt;strong&gt;キャリアの&lt;/strong&gt;チャンクを呼びます。1つの大きなブロックのみを含むシングルブロックキャリア、および複数のブロックを含むマルチブロックキャリア。キャリアは通常、UNIXシステムで &lt;code&gt;mmap()&lt;/code&gt; を使用して作成されます。ただし、キャリアを作成する方法はそれほど重要ではありません。アロケータインスタンスは通常、シングルブロックキャリアとマルチブロックキャリアの混合を管理します。</target>
        </trans-unit>
        <trans-unit id="657accf9a74a7eb0b025905c51aa524bbb4f52c3" translate="yes" xml:space="preserve">
          <source>The ETS type of the dumped table (that is, &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt;, &lt;code&gt;duplicate_bag&lt;/code&gt;, or &lt;code&gt;ordered_set&lt;/code&gt;). This type is used when loading the table again.</source>
          <target state="translated">ダンプされたテーブルのETSタイプ（つまり、 &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;bag&lt;/code&gt; 、 &lt;code&gt;duplicate_bag&lt;/code&gt; 、または &lt;code&gt;ordered_set&lt;/code&gt; ）。このタイプは、テーブルを再度ロードするときに使用されます。</target>
        </trans-unit>
        <trans-unit id="37bd9159078f20014405583883e1e7838b1f320f" translate="yes" xml:space="preserve">
          <source>The EUnit framework makes it extremely easy to write unit tests in Erlang. There are a few different ways of writing them, though, so we start with the simplest:</source>
          <target state="translated">EUnitフレームワークはErlangでユニットテストを書くのを非常に簡単にしてくれます。しかし、いくつかの異なる書き方があります。</target>
        </trans-unit>
        <trans-unit id="fa53810c7a30463d78bce3f01ea7ecca8bb2337e" translate="yes" xml:space="preserve">
          <source>The Edward curves &lt;code&gt;x25519&lt;/code&gt; and &lt;code&gt;x448&lt;/code&gt; are supported with OpenSSL 1.1.1 or later if not disabled by configuration.</source>
          <target state="translated">&lt;code&gt;x25519&lt;/code&gt; 曲線x25519および &lt;code&gt;x448&lt;/code&gt; は、構成によって無効にされていない場合、OpenSSL1.1.1以降でサポートされます。</target>
        </trans-unit>
        <trans-unit id="25e6615a6259b426a5c1aa433aefd48dfe9f0730" translate="yes" xml:space="preserve">
          <source>The Election Process</source>
          <target state="translated">選挙の流れ</target>
        </trans-unit>
        <trans-unit id="d7e47fd1c3278cd7de4abd1246ff9d0b6caf0c35" translate="yes" xml:space="preserve">
          <source>The Encoding can be changed for a file &quot;on the fly&quot; by using function &lt;code&gt;io:setopts/2&lt;/code&gt;. So a file can be analyzed in latin1 encoding for, for example, a BOM, positioned beyond the BOM and then be set for the right encoding before further reading. For functions identifying BOMs, see module &lt;code&gt;unicode(3)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;io:setopts/2&lt;/code&gt; を使用して、「オンザフライ」でファイルのエンコーディングを変更できます。したがって、ファイルは、たとえばBOMのlatin1エンコーディングで分析し、BOMを超えて配置し、さらに読み取る前に正しいエンコーディングに設定できます。BOMを識別する関数については、モジュール &lt;code&gt;unicode(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a3ce07ca3d080f90844cafbb92cdb028293480a0" translate="yes" xml:space="preserve">
          <source>The Erlang &lt;strong&gt;error logger&lt;/strong&gt; is an event manager (see &lt;code&gt;OTP Design Principles&lt;/code&gt; and &lt;code&gt;gen_event(3)&lt;/code&gt;), registered as &lt;code&gt;error_logger&lt;/code&gt;.</source>
          <target state="translated">Erlang &lt;strong&gt;エラーロガー&lt;/strong&gt;は、 &lt;code&gt;error_logger&lt;/code&gt; として登録されたイベントマネージャー（ &lt;code&gt;OTP Design Principles&lt;/code&gt; と &lt;code&gt;gen_event(3)&lt;/code&gt; を参照）です。</target>
        </trans-unit>
        <trans-unit id="a6cec8bd2bf7434e290f227203641824a28b2253" translate="yes" xml:space="preserve">
          <source>The Erlang API allows using arbitrary curve parameters, but in FIPS mode only those allowed by the Security Policy shall be used.</source>
          <target state="translated">Erlang APIは任意の曲線パラメータを使うことができますが、FIPSモードではセキュリティポリシーで許可されたものだけが使われます。</target>
        </trans-unit>
        <trans-unit id="1e13d1897ff2db6a5ca229af1382794e443a1fe1" translate="yes" xml:space="preserve">
          <source>The Erlang API of the crypto application is identical regardless of building with or without FIPS support. However the nif code internally uses a different OpenSSL API.</source>
          <target state="translated">暗号アプリケーションのErlang APIはFIPSサポートの有無に関わらず同じです。しかし、nifのコードは内部的に異なるOpenSSL APIを使用しています。</target>
        </trans-unit>
        <trans-unit id="48490447d94b14d0abe2e04b21fbd8bf2b9b8cdb" translate="yes" xml:space="preserve">
          <source>The Erlang BIF &lt;code&gt;spawn&lt;/code&gt; is used to create a new process: &lt;code&gt;spawn(Module, Exported_Function, List of Arguments)&lt;/code&gt;. Consider the following module:</source>
          <target state="translated">Erlang BIF &lt;code&gt;spawn&lt;/code&gt; を使用して、新しいプロセスを作成します： &lt;code&gt;spawn(Module, Exported_Function, List of Arguments)&lt;/code&gt; 。次のモジュールについて考えてみます。</target>
        </trans-unit>
        <trans-unit id="bc260aee970be8377de4dc3244ea906f03e3f766" translate="yes" xml:space="preserve">
          <source>The Erlang BIFs.</source>
          <target state="translated">ErlangのBIF。</target>
        </trans-unit>
        <trans-unit id="8938c14ae46ae4bc9fd254a9382eb3df9c381a7c" translate="yes" xml:space="preserve">
          <source>The Erlang Distribution protocol is not by itself secure and does not aim to be so. In order to get secure distribution the distributed nodes should be configured to use distribution over tls. See the &lt;code&gt; Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="translated">アーラン分布プロトコルはそれ自体では安全ではなく、そうすることを目的としていません。安全な配布を取得するには、分散ノードがtlsを介した配布を使用するように構成する必要があります。参照してください &lt;code&gt; Using SSL for Erlang Distribution&lt;/code&gt; の設定方法への安全な分散ノードの詳細については、ユーザーズガイドを。</target>
        </trans-unit>
        <trans-unit id="99fe49d5ed45f059cc301355028f8dfef080429d" translate="yes" xml:space="preserve">
          <source>The Erlang Distribution protocol is not by itself secure and does not aim to be so. In order to get secure distribution the distributed nodes should be configured to use distribution over tls. See the &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; User's Guide for details on how to setup a secure distributed node.</source>
          <target state="translated">Erlang配布プロトコルは、それ自体は安全ではなく、そうであることを目指していません。安全な配布を行うには、tls経由の配布を使用するように分散ノードを構成する必要があります。参照してください &lt;code&gt;Using SSL for Erlang Distribution&lt;/code&gt; の設定方法への安全な分散ノードの詳細については、ユーザーズガイドを。</target>
        </trans-unit>
        <trans-unit id="a40f7e40db92a7107a9e3a5cac4b4ab65b30339c" translate="yes" xml:space="preserve">
          <source>The Erlang Emulator</source>
          <target state="translated">Erlangエミュレータ</target>
        </trans-unit>
        <trans-unit id="99377f0e14b45ce54e27b19f84ce7e618a01753c" translate="yes" xml:space="preserve">
          <source>The Erlang I/O-system has been designed (or at least used) in a way where you expect any I/O server to handle any string data. That is, however, no longer the case when working with Unicode characters. The Erlang programmer must now know the capabilities of the device where the data ends up. Also, ports in Erlang are byte-oriented, so an arbitrary string of (Unicode) characters cannot be sent to a port without first converting it to an encoding of choice.</source>
          <target state="translated">ErlangのI/OシステムはどんなI/Oサーバでも文字列データを扱えるように設計されています(少なくとも使われています)。しかし、Unicode文字を扱う場合はそうではありません。Erlangプログラマはデータの行き着く先のデバイスの能力を知っていなければなりません。また、Erlangのポートはバイト指向なので、任意の文字列(Unicode)をポートに送るには、最初に任意のエンコーディングに変換しなければなりません。</target>
        </trans-unit>
        <trans-unit id="81cc438ebd93249f6378dd48a6614f5a8c1d4ea2" translate="yes" xml:space="preserve">
          <source>The Erlang ODBC application consists of both &lt;code&gt;Erlang&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; code. The &lt;code&gt;C&lt;/code&gt; code is delivered as a precompiled executable for windows, solaris and linux (SLES10) in the commercial build. In the open source distribution it is built the same way as all other application using configure and make. You may want to provide the the path to your ODBC libraries using --with-odbc=PATH.</source>
          <target state="translated">Erlang ODBCアプリケーションは、 &lt;code&gt;Erlang&lt;/code&gt; と &lt;code&gt;C&lt;/code&gt; コードの両方で構成されています。 &lt;code&gt;C&lt;/code&gt; のコードは、市販のビルドの窓、SolarisおよびLinux（SLES10）のためのコンパイル済み実行ファイルとして配信されます。オープンソースディストリビューションでは、configureおよびmakeを使用する他のすべてのアプリケーションと同じ方法でビルドされます。--with-odbc = PATHを使用して、ODBCライブラリへのパスを提供することができます。</target>
        </trans-unit>
        <trans-unit id="8a4351bfa2f995c6bd330803859435f644586add" translate="yes" xml:space="preserve">
          <source>The Erlang ODBC application should run on all Unix dialects including Linux, Windows 2000, Windows XP and NT. But currently it is only tested for Solaris, Windows 2000, Windows XP and NT.</source>
          <target state="translated">Erlang ODBCアプリケーションはLinux、Windows 2000、Windows XP、NTを含むすべてのUnixの方言で動作するはずです。しかし、現在はSolaris、Windows 2000、Windows XP、NTでしかテストされていません。</target>
        </trans-unit>
        <trans-unit id="c54f824f83f969a528f4d85db8ff3bf2b47f63fe" translate="yes" xml:space="preserve">
          <source>The Erlang ODBC application should work for any relational database that has an ODBC driver. But currently it is only regularly tested for &lt;code&gt;sqlserver&lt;/code&gt; and &lt;code&gt;postgres&lt;/code&gt;.</source>
          <target state="translated">Erlang ODBCアプリケーションは、ODBCドライバーを持つすべてのリレーショナルデータベースで機能するはずです。しかし、現在は &lt;code&gt;sqlserver&lt;/code&gt; と &lt;code&gt;postgres&lt;/code&gt; に対してのみ定期的にテストされています。</target>
        </trans-unit>
        <trans-unit id="7d474f74418b8768698a57fb6613d328b379dec3" translate="yes" xml:space="preserve">
          <source>The Erlang ODBC interface is in principal database independent, e.i. an erlang program using the interface could be run without changes towards different databases. But as SQL is used it is alas possible to write database dependent programs. Even though SQL is an ANSI-standard meant to be database independent, different databases have proprietary extensions to SQL defining their own data types. If you keep to the ANSI data types you will minimize the problem. But unfortunately there is no guarantee that all databases actually treats the ANSI data types equivalently. For instance an installation of &lt;code&gt;Oracle Enterprise release 8.0.5.0.0 for unix&lt;/code&gt; will accept that you create a table column with the ANSI data type &lt;code&gt;integer&lt;/code&gt;, but when retrieving values from this column the driver reports that it is of type &lt;code&gt;SQL_DECIMAL(0, 38)&lt;/code&gt; and not &lt;code&gt;SQL_INTEGER&lt;/code&gt; as you may have expected.</source>
          <target state="translated">Erlang ODBCインターフェースは主にデータベースに依存していません。つまり、インターフェースを使用するerlangプログラムは、異なるデータベースに変更を加えることなく実行できます。しかし、SQLが使用されているため、データベースに依存するプログラムを作成することはできません。 SQLはデータベースに依存しないことを意図したANSI標準ですが、データベースごとに独自のデータ型を定義するSQLの独自の拡張機能があります。 ANSIデータ型を維持すると、問題を最小限に抑えることができます。しかし、残念ながら、すべてのデータベースが実際にANSIデータ型を同等に扱うという保証はありません。たとえば &lt;code&gt;Oracle Enterprise release 8.0.5.0.0 for unix&lt;/code&gt; インストールでは、ANSIデータ型 &lt;code&gt;integer&lt;/code&gt; テーブル列を作成することが受け入れられます。ただし、この列から値を取得するとき、ドライバーはそれが &lt;code&gt;SQL_DECIMAL(0, 38)&lt;/code&gt; タイプであり、 &lt;code&gt;SQL_INTEGER&lt;/code&gt; ではないことを予想どおり報告します。</target>
        </trans-unit>
        <trans-unit id="56a64c0ae629896e0d315a11fe6e47437de08daf" translate="yes" xml:space="preserve">
          <source>The Erlang Port Mapper Daemon &lt;strong&gt;epmd&lt;/strong&gt; is automatically started at every host where an Erlang node is started. It is responsible for mapping the symbolic node names to machine addresses. See the &lt;code&gt;epmd(1)&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">Erlangポートマッパーデーモン&lt;strong&gt;epmd&lt;/strong&gt;は、Erlangノードが開始されるすべてのホストで自動的に開始されます。シンボリックノード名をマシンアドレスにマッピングします。参照してください &lt;code&gt;epmd(1)&lt;/code&gt; ERTSでマニュアルページを。</target>
        </trans-unit>
        <trans-unit id="d980add9dd240554f189b1c3b37b65443fa21bb5" translate="yes" xml:space="preserve">
          <source>The Erlang Runtime System Application, ERTS, contains functionality necessary to run the Erlang system.</source>
          <target state="translated">Erlangランタイムシステムアプリケーション、ERTSにはErlangシステムを実行するために必要な機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="ec553e20bbac1faf44d07e9ebb7fae6ca5046122" translate="yes" xml:space="preserve">
          <source>The Erlang SSL application implements the SSL/TLS/DTLS protocol for the currently supported versions, see the &lt;code&gt;&lt;a href=&quot;ssl&quot;&gt;ssl(3)&lt;/a&gt;&lt;/code&gt; manual page.</source>
          <target state="translated">Erlang SSLアプリケーションは、現在サポートされているバージョンのSSL / TLS / DTLSプロトコルを実装してい &lt;code&gt;&lt;a href=&quot;ssl&quot;&gt;ssl(3)&lt;/a&gt;&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="6ca09abc1780869abd79ed38a1d8065b44531491" translate="yes" xml:space="preserve">
          <source>The Erlang SSL application implements the TLS/DTLS protocol for the currently supported versions, see the &lt;code&gt;&lt;a href=&quot;ssl&quot;&gt;ssl(3)&lt;/a&gt;&lt;/code&gt; manual page.</source>
          <target state="translated">Erlang SSLアプリケーションは、現在サポートされているバージョンのTLS / DTLSプロトコルを実装しています &lt;code&gt;&lt;a href=&quot;ssl&quot;&gt;ssl(3)&lt;/a&gt;&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="0c184aeafc9a6a8c3c28dfd4fc9896eddb1e7172" translate="yes" xml:space="preserve">
          <source>The Erlang Token Scanner returns tokens with a subset of the following annotations, depending on the options:</source>
          <target state="translated">Erlang Token Scannerはオプションに応じて、以下のアノテーションのサブセットを持つトークンを返します。</target>
        </trans-unit>
        <trans-unit id="f44e036ac3f33332c9617d1ca93feead49accb2d" translate="yes" xml:space="preserve">
          <source>The Erlang VM uses a PCRE library where heap memory is used when regular expression match recursion occurs. This therefore limits the use of machine heap, not C stack.</source>
          <target state="translated">Erlang VMはPCREライブラリを使っていて、正規表現マッチの再帰が発生したときにヒープメモリが使われます。そのため、Cスタックではなくマシンヒープの使用を制限しています。</target>
        </trans-unit>
        <trans-unit id="8d4936bbce5dce7c69c00ed9e6d923ffdcef1207" translate="yes" xml:space="preserve">
          <source>The Erlang archives are &lt;code&gt;ZIP&lt;/code&gt; files with extension &lt;code&gt;.ez&lt;/code&gt;. Erlang archives can also be enclosed in &lt;code&gt;escript&lt;/code&gt; files whose file extension is arbitrary.</source>
          <target state="translated">Erlangアーカイブは、拡張子が &lt;code&gt;.ez&lt;/code&gt; の &lt;code&gt;ZIP&lt;/code&gt; ファイルです。Erlangアーカイブは、ファイル拡張子が任意の &lt;code&gt;escript&lt;/code&gt; ファイルに含めることもできます。</target>
        </trans-unit>
        <trans-unit id="75458bb55fedfe4d27d190b85b2453fc10e6e94f" translate="yes" xml:space="preserve">
          <source>The Erlang code in the &quot;Erlang code.&quot; section is written into the output file directly after the module declaration and predefined exports declaration so it is possible to add extra exports, define imports and other attributes which are then visible in the whole file.</source>
          <target state="translated">Erlang code.&quot;セクションのErlangコードはモジュール宣言と定義済みエクスポート宣言の直後に出力ファイルに書き込まれるので、追加のエクスポートを追加したり、インポートやその他の属性を定義したりすることができます。</target>
        </trans-unit>
        <trans-unit id="9bada6b35e4702ac9e1f602bd85f459a9e5c8d11" translate="yes" xml:space="preserve">
          <source>The Erlang code is slightly different, as we do not return the result synchronously from &lt;code&gt;port_control&lt;/code&gt;, instead we get it from &lt;code&gt;driver_output&lt;/code&gt; as data in the message queue. The function &lt;code&gt;return_port_data&lt;/code&gt; above receives data from the port. As the data is in binary format, we use &lt;code&gt;binary_to_term/1&lt;/code&gt; to convert it to an Erlang term. Notice that the driver is opened in binary mode (&lt;code&gt;open_port/2&lt;/code&gt; is called with option &lt;code&gt;[binary]&lt;/code&gt;). This means that data sent from the driver to the emulator is sent as binaries. Without option &lt;code&gt;binary&lt;/code&gt;, they would have been lists of integers.</source>
          <target state="translated">Erlangのコードは少し異なります。これは、結果を &lt;code&gt;port_control&lt;/code&gt; から同期的に返すのではなく、メッセージキューのデータとして &lt;code&gt;driver_output&lt;/code&gt; から取得するためです。上記の関数 &lt;code&gt;return_port_data&lt;/code&gt; は、ポートからデータを受信します。データはバイナリ形式なので、 &lt;code&gt;binary_to_term/1&lt;/code&gt; を使用してErlang用語に変換します。ドライバーがバイナリー・モードで開かれていることに注意してください（ &lt;code&gt;open_port/2&lt;/code&gt; は &lt;code&gt;[binary]&lt;/code&gt; オプションで呼び出されます）。つまり、ドライバーからエミュレーターに送信されるデータはバイナリーとして送信されます。オプション &lt;code&gt;binary&lt;/code&gt; がなければ、それらは整数のリストでした。</target>
        </trans-unit>
        <trans-unit id="57d172985612cd6cd41a2f597d2b75bb27821e07" translate="yes" xml:space="preserve">
          <source>The Erlang code linter.</source>
          <target state="translated">Erlangのコードリンター。</target>
        </trans-unit>
        <trans-unit id="a5138a7c32b5f91b090191893db4bd11097e1026" translate="yes" xml:space="preserve">
          <source>The Erlang code preprocessor includes functions that are used by the &lt;code&gt;compile&lt;/code&gt; module to preprocess macros and include files before the parsing takes place.</source>
          <target state="translated">Erlangコードプリプロセッサには、 &lt;code&gt;compile&lt;/code&gt; モジュールがマクロを前処理するために使用する関数と、解析が行われる前にファイルを含める関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="392fc9728278e4892ea581cefb80f74c12d7912e" translate="yes" xml:space="preserve">
          <source>The Erlang crash dump had a major facelift in Erlang/OTP R9C. The information in this section is therefore not directly applicable for older dumps. However, if you use &lt;code&gt; crashdump_viewer(3)&lt;/code&gt; on older dumps, the crash dumps are translated into a format similar to this.</source>
          <target state="translated">Erlangのクラッシュダンプは、Erlang / OTPR9Cで大幅に改良されました。したがって、このセクションの情報は、古いダンプには直接適用できません。ただし、古いダンプで &lt;code&gt; crashdump_viewer(3)&lt;/code&gt; を使用すると、クラッシュダンプは次のような形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="5d403e45ee407cb0dd03528fe23bfb406bd2d6ae" translate="yes" xml:space="preserve">
          <source>The Erlang crash dump had a major facelift in Erlang/OTP R9C. The information in this section is therefore not directly applicable for older dumps. However, if you use &lt;code&gt;crashdump_viewer(3)&lt;/code&gt; on older dumps, the crash dumps are translated into a format similar to this.</source>
          <target state="translated">Erlangクラッシュダンプは、Erlang / OTP R9Cで大幅に改良されました。したがって、このセクションの情報は、古いダンプには直接適用できません。ただし、古いダンプで &lt;code&gt;crashdump_viewer(3)&lt;/code&gt; を使用すると、クラッシュダンプはこれに似た形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="737305746ee3808d6e58fd2718a7d171052eb3a2" translate="yes" xml:space="preserve">
          <source>The Erlang crash dump is a readable text file, but it can be difficult to read. Using the Crashdump Viewer tool in the &lt;code&gt;Observer&lt;/code&gt; application simplifies the task. This is a wx-widget-based tool for browsing Erlang crash dumps.</source>
          <target state="translated">Erlangクラッシュダンプは読み取り可能なテキストファイルですが、読みにくい場合があります。 &lt;code&gt;Observer&lt;/code&gt; アプリケーションでCrashdump Viewerツールを使用すると、タスクが簡単になります。これは、Erlangクラッシュダンプを参照するためのwxウィジェットベースのツールです。</target>
        </trans-unit>
        <trans-unit id="3019fbc7ca6a8b1745aa1cb4e5822a66509aa10a" translate="yes" xml:space="preserve">
          <source>The Erlang crashdump contains a listing of each living Erlang process in the system. The following fields can exist for a process:</source>
          <target state="translated">Erlang crashdumpはシステム内で生きているErlangプロセスのリストを含んでいます。プロセスには以下のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="db00cf758cc1a463b96d0532ae1f4b69cef5510a" translate="yes" xml:space="preserve">
          <source>The Erlang distribution can in theory use almost any connection-based protocol as bearer. However, a module that implements the protocol-specific parts of the connection setup is needed. The default distribution module is &lt;code&gt;inet_tcp_dist&lt;/code&gt; in the Kernel application. When starting an Erlang node distributed, &lt;code&gt;net_kernel&lt;/code&gt; uses this module to set up listen ports and connections.</source>
          <target state="translated">Erlangディストリビューションでは、理論的には、ほとんどすべての接続ベースのプロトコルをベアラとして使用できます。ただし、接続設定のプロトコル固有の部分を実装するモジュールが必要です。カーネルアプリケーションでは、デフォルトの配布モジュールは &lt;code&gt;inet_tcp_dist&lt;/code&gt; です。分散Erlangノードを開始するとき、 &lt;code&gt;net_kernel&lt;/code&gt; はこのモジュールを使用してリスンポートと接続をセットアップします。</target>
        </trans-unit>
        <trans-unit id="5c65eb0e7a3b5fcbd2b82941f0e7502510e7adf8" translate="yes" xml:space="preserve">
          <source>The Erlang driver thread API can be used in conjunction with the POSIX thread API on UN-ices and with the Windows native thread API on Windows. The Erlang driver thread API has the advantage of being portable, but there can exist situations where you want to use functionality from the POSIX thread API or the Windows native thread API.</source>
          <target state="translated">ErlangドライバスレッドAPIはUN-icesのPOSIXスレッドAPIやWindowsのWindowsネイティブスレッドAPIと組み合わせて使うことができます。ErlangドライバスレッドAPIは移植性に優れていますが、POSIXスレッドAPIやWindowsネイティブスレッドAPIの機能を使いたい場合もあります。</target>
        </trans-unit>
        <trans-unit id="cd35f4981de74aaf8658339a6b773ed029b97baf" translate="yes" xml:space="preserve">
          <source>The Erlang driver thread API only returns error codes when it is reasonable to recover from an error condition. If it is not reasonable to recover from an error condition, the whole runtime system is terminated. For example, if a create mutex operation fails, an error code is returned, but if a lock operation on a mutex fails, the whole runtime system is terminated.</source>
          <target state="translated">ErlangドライバのスレッドAPIは、エラー状態から回復するのが妥当な場合にのみエラーコードを返します。エラー状態から回復するのが妥当でない場合、ランタイムシステム全体が終了します。例えば、ミューテックスの作成操作が失敗した場合はエラーコードが返されますが、ミューテックスのロック操作が失敗した場合はランタイムシステム全体が終了します。</target>
        </trans-unit>
        <trans-unit id="f886f4ca7d89492a5c1356ea054f392597b34344" translate="yes" xml:space="preserve">
          <source>The Erlang editing mode provides a command that knows about the Erlang comment structure and can be used to fill text paragraphs in comments. Ex:</source>
          <target state="translated">Erlang編集モードはErlangのコメント構造を知っているコマンドを提供し、コメントの段落を埋めるのに使うことができます。例</target>
        </trans-unit>
        <trans-unit id="6381e25503c0fb716dfd00aadaa0608beadd9a69" translate="yes" xml:space="preserve">
          <source>The Erlang emulator is found by examining the registry keys for the emulator version specified in the release data file. The new emulator must be properly installed before the upgrade for this to work.</source>
          <target state="translated">Erlangエミュレータはリリースデータファイルで指定されたエミュレータバージョンのレジストリキーを調べて見つけます。アップグレードする前に新しいエミュレータを正しくインストールしておく必要があります。</target>
        </trans-unit>
        <trans-unit id="6339e932f018732bcd165eb1f04f836a77855588" translate="yes" xml:space="preserve">
          <source>The Erlang emulator keeps track of a &lt;strong&gt;stack trace&lt;/strong&gt;, information about recent function calls. This information is used if an error occurs, for example:</source>
          <target state="translated">Erlangエミュレーターは、最近の関数呼び出しに関する情報である&lt;strong&gt;スタックトレースを追跡し&lt;/strong&gt;ます。この情報は、エラーが発生した場合に使用されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="17cd3f882b4ce1af8737a7262e13ec5ab23b1f5e" translate="yes" xml:space="preserve">
          <source>The Erlang emulator.</source>
          <target state="translated">Erlangエミュレータです。</target>
        </trans-unit>
        <trans-unit id="5714cdd55594ddeb51b48625444a53558a829eec" translate="yes" xml:space="preserve">
          <source>The Erlang external term format is a representation of an Erlang term as a sequence of bytes, that is, a binary. Conversion between the two representations is done using the following BIFs:</source>
          <target state="translated">Erlang外部用語フォーマットはErlang用語をバイトのシーケンス、つまりバイナリで表現したものです。2つの表現間の変換は以下のBIFを使って行われます。</target>
        </trans-unit>
        <trans-unit id="152d4b6905d9f607d0072156b089899f65fd52eb" translate="yes" xml:space="preserve">
          <source>The Erlang implementation is &quot;clever&quot; and minimizes the number of times each message is tested against the patterns in each &lt;code&gt;receive&lt;/code&gt;.</source>
          <target state="translated">Erlangの実装は「賢い」ものであり、各メッセージが各 &lt;code&gt;receive&lt;/code&gt; のパターンに対してテストされる回数を最小限に抑えます。</target>
        </trans-unit>
        <trans-unit id="79a0b3cf2e8db83679b557ee8aff89fcae6b1c98" translate="yes" xml:space="preserve">
          <source>The Erlang interpreter can also be accessed through the interface module &lt;code&gt;&lt;a href=&quot;int&quot;&gt;int(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangインタプリタには、インターフェイスモジュール &lt;code&gt;&lt;a href=&quot;int&quot;&gt;int(3)&lt;/a&gt;&lt;/code&gt; からもアクセスできます。</target>
        </trans-unit>
        <trans-unit id="d3ca39c39b895d99de154868388ab2c941551645" translate="yes" xml:space="preserve">
          <source>The Erlang interpreter provides mechanisms for breakpoints and stepwise execution of code. It is primarily intended to be used by Debugger, see the User's Guide and &lt;code&gt;&lt;a href=&quot;debugger&quot;&gt;debugger(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangインタープリターは、ブレークポイントとコードの段階的実行のためのメカニズムを提供します。これは主にデバッガーで使用することを目的としてい &lt;code&gt;&lt;a href=&quot;debugger&quot;&gt;debugger(3)&lt;/a&gt;&lt;/code&gt; 。ユーザーズガイドとデバッガー（3）を参照してください。</target>
        </trans-unit>
        <trans-unit id="bfe42365ca090c07c2f31a18aa82078cc7413a46" translate="yes" xml:space="preserve">
          <source>The Erlang language is described in the &lt;a href=&quot;doc/reference_manual/users_guide&quot;&gt;Erlang Reference Manual&lt;/a&gt;. An Erlang tutorial can be found in &lt;a href=&quot;doc/getting_started/users_guide&quot;&gt; Getting Started With Erlang&lt;/a&gt;.</source>
          <target state="translated">Erlang言語については、&lt;a href=&quot;doc/reference_manual/users_guide&quot;&gt;Erlangリファレンスマニュアルで&lt;/a&gt;説明されています。Erlangチュートリアルは&lt;a href=&quot;doc/getting_started/users_guide&quot;&gt;Getting Started With Erlangにあり&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5c86834683bf25d823843edf61397923bc0c7af5" translate="yes" xml:space="preserve">
          <source>The Erlang language specification puts no limits on the number of processes, length of atoms, and so on. However, for performance and memory saving reasons, there will always be limits in a practical implementation of the Erlang language and execution environment.</source>
          <target state="translated">Erlang言語の仕様ではプロセスの数や原子の長さなどに制限はありません。しかし、パフォーマンスとメモリ節約の理由から、Erlang言語と実行環境の実用的な実装には常に制限があります。</target>
        </trans-unit>
        <trans-unit id="5868365d112b2d753afe38d0282d35341218fb05" translate="yes" xml:space="preserve">
          <source>The Erlang literal syntax for strings uses the &quot;\&quot; (backslash) character as an escape code. You need to escape backslashes in literal strings, both in your code and in the shell, with an extra backslash, that is, &quot;\\&quot;.</source>
          <target state="translated">Erlangの文字列のリテラル構文では&quot;\&quot; (バックスラッシュ)をエスケープコードとして使います。コードの中でもシェルの中でも、リテラル文字列のバックスラッシュをエスケープする必要があります。</target>
        </trans-unit>
        <trans-unit id="7436c6776e46ff0b0c98637a1562d8d93f74d6d7" translate="yes" xml:space="preserve">
          <source>The Erlang meta interpreter.</source>
          <target state="translated">Erlangメタインタプリタ。</target>
        </trans-unit>
        <trans-unit id="6dd0afebea808766c4e5ba67702ba9bcda564088" translate="yes" xml:space="preserve">
          <source>The Erlang mode does, of course, provide this feature. The layout used is based on the common use of the language.</source>
          <target state="translated">Erlangモードはもちろんこの機能を提供します。使用されているレイアウトは言語の一般的な使い方に基づいています。</target>
        </trans-unit>
        <trans-unit id="e03b514fa1c315e1fd202d5ceb91d82531266ba5" translate="yes" xml:space="preserve">
          <source>The Erlang mode for the Emacs editor includes two &lt;code&gt;Common Test&lt;/code&gt; test suite templates, one with extensive information in the function headers, and one with minimal information. A test suite template provides a quick start for implementing a suite from scratch and gives a good overview of the available callback functions. The two templates follows:</source>
          <target state="translated">EmacsエディターのErlangモードには、2つの &lt;code&gt;Common Test&lt;/code&gt; テストスイートテンプレートが含まれています。1つは関数ヘッダーに広範な情報があり、もう1つは最小限の情報があります。テストスイートテンプレートは、スイートを最初から実装するためのクイックスタートを提供し、使用可能なコールバック関数の概要を提供します。2つのテンプレートは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="bd1e16dd7e3186a437be6f5c58e6b98f95a1b6f2" translate="yes" xml:space="preserve">
          <source>The Erlang module can look as follows:</source>
          <target state="translated">Erlangモジュールは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="4e4823fe40646d231f25e1af4061079540646bbb" translate="yes" xml:space="preserve">
          <source>The Erlang nif library contains function for easily working with I/O vectors as used by the unix system call &lt;code&gt;writev&lt;/code&gt;. The I/O Queue is not thread safe, so some other synchronization mechanism has to be used.</source>
          <target state="translated">Erlang nifライブラリには、UNIXシステムコール &lt;code&gt;writev&lt;/code&gt; で使用されるI / Oベクトルを簡単に操作するための関数が含まれています。I / Oキューはスレッドセーフではないため、他の同期メカニズムを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="4fe4b7ddd1b6e3fddbfb0dc8eba68674fa92a0bc" translate="yes" xml:space="preserve">
          <source>The Erlang node is to be given the short name &lt;code&gt;e1&lt;/code&gt; and must be set to use the same magic cookie as the C node, &lt;code&gt;secretcookie&lt;/code&gt;:</source>
          <target state="translated">Erlangノードには短い名前 &lt;code&gt;e1&lt;/code&gt; が与えられ、Cノードと同じマジックcookie、 &lt;code&gt;secretcookie&lt;/code&gt; を使用するように設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="b252e3e3ea1acfeb31712ba10c8bb1164cc7e6f7" translate="yes" xml:space="preserve">
          <source>The Erlang nodes have different cookies.</source>
          <target state="translated">Erlangノードは異なるクッキーを持っています。</target>
        </trans-unit>
        <trans-unit id="2dac1fcc04ff2d796878d2e221f0d3d0504eeff3" translate="yes" xml:space="preserve">
          <source>The Erlang parser.</source>
          <target state="translated">Erlangパーサー。</target>
        </trans-unit>
        <trans-unit id="e3e1a66870ceefa4057accb399287057807ab241" translate="yes" xml:space="preserve">
          <source>The Erlang part of the asynchronous driver consists of the sample file &lt;code&gt;pg_async.erl&lt;/code&gt;.</source>
          <target state="translated">非同期ドライバーのErlang部分は、サンプルファイル &lt;code&gt;pg_async.erl&lt;/code&gt; で構成されています。</target>
        </trans-unit>
        <trans-unit id="8a9c70ac47d5fb1df5bdc0c1579a6d354d215f36" translate="yes" xml:space="preserve">
          <source>The Erlang pretty printer.</source>
          <target state="translated">Erlangの可愛いプリンタ。</target>
        </trans-unit>
        <trans-unit id="8092d1a007430220494c776fea5b8d0105151629" translate="yes" xml:space="preserve">
          <source>The Erlang process creating a port is said to be the &lt;strong&gt;port owner&lt;/strong&gt;, or the &lt;strong&gt;connected process&lt;/strong&gt; of the port. All communication to and from the port must go through the port owner. If the port owner terminates, so does the port (and the external program, if it is written correctly).</source>
          <target state="translated">ポートを作成するErlangプロセスは、&lt;strong&gt;ポート所有者&lt;/strong&gt;、または&lt;strong&gt;ポート&lt;/strong&gt;の&lt;strong&gt;接続されたプロセス&lt;/strong&gt;と呼ばれます。ポートとの間のすべての通信は、ポート所有者を経由する必要があります。ポートの所有者が終了すると、ポート（および、正しく記述されている場合は外部プログラム）も終了します。</target>
        </trans-unit>
        <trans-unit id="27d54a521c2a5287aa3d01d2b57bd9e14da9ddb9" translate="yes" xml:space="preserve">
          <source>The Erlang representation for &quot;BMPString&quot; and &quot;UniversalString&quot; is either a list of ASCII values or a list of quadruples. The quadruple representation associates to the Unicode standard representation of characters. The ASCII characters are all represented by quadruples beginning with three zeros like {0,0,0,65} for character 'A'. When decoding a value for these strings, the result is a list of quadruples, or integers when the value is an ASCII character.</source>
          <target state="translated">Erlangの &quot;BMPString &quot;と &quot;UniversalString &quot;の表現はASCII値のリストか四重項のリストです。四重項表現はUnicodeの標準的な文字表現に関連しています。ASCII 文字はすべて、文字 'A' の {0,0,0,65}のように、3 つのゼロから始まる四重項で表現されます。これらの文字列の値をデコードすると、結果は四重プルのリストとなり、値が ASCII 文字の場合は整数となります。</target>
        </trans-unit>
        <trans-unit id="fd34b0812f3e91023a25d2d60c73c4062e69913a" translate="yes" xml:space="preserve">
          <source>The Erlang representation of an ASN.1 &lt;code&gt;INTEGER&lt;/code&gt; is an integer or an atom if a &lt;code&gt;Named Number List&lt;/code&gt; (see &lt;code&gt;T6&lt;/code&gt; in the previous list) is specified.</source>
          <target state="translated">&lt;code&gt;Named Number List&lt;/code&gt; （前のリストの &lt;code&gt;T6&lt;/code&gt; を参照）が指定されている場合、ASN.1 &lt;code&gt;INTEGER&lt;/code&gt; のErlang表現は整数またはアトムです。</target>
        </trans-unit>
        <trans-unit id="6762086b168330d83da3710e72be56df1e3f3f82" translate="yes" xml:space="preserve">
          <source>The Erlang runtime system can use the complete 32-bit (or 64-bit) address space, but the operating system often limits a single process to use less than that.</source>
          <target state="translated">Erlangのランタイムシステムは32ビット(または64ビット)のアドレス空間を完全に使うことができますが、オペレーティングシステムは1つのプロセスがそれ以下のアドレス空間を使うことを制限していることがよくあります。</target>
        </trans-unit>
        <trans-unit id="b825bf5f9dd97f4fdde610e1f993f6d1d34418b7" translate="yes" xml:space="preserve">
          <source>The Erlang runtime system requires that the contents of the script used to boot the system is a binary Erlang term. This function transforms the &lt;code&gt;File.script&lt;/code&gt; boot script to a binary term, which is stored in the &lt;code&gt;File.boot&lt;/code&gt; file.</source>
          <target state="translated">Erlangランタイムシステムでは、システムの起動に使用されるスクリプトの内容がバイナリErlang用語である必要があります。この関数は、 &lt;code&gt;File.script&lt;/code&gt; ブートスクリプトを、 &lt;code&gt;File.boot&lt;/code&gt; ファイルに格納されているバイナリ項に変換します。</target>
        </trans-unit>
        <trans-unit id="a1ce0572c42ceec3f568ad1851dad4770b2b84b7" translate="yes" xml:space="preserve">
          <source>The Erlang runtime system uses a generational garbage collection scheme, using an &quot;old heap&quot; for data that has survived at least one garbage collection. When there is no more room on the old heap, a fullsweep garbage collection is done.</source>
          <target state="translated">Erlangのランタイムシステムは世代別ガベージコレクション方式を使っており、少なくとも1回のガベージコレクションで生き残ったデータには「古いヒープ」を使います。古いヒープに空きがなくなると、フルスイープのガベージコレクションが行われます。</target>
        </trans-unit>
        <trans-unit id="1b5c1cc2b8bfec92e6852fd54565f25ead94806c" translate="yes" xml:space="preserve">
          <source>The Erlang runtime systems view of &lt;code&gt;&lt;a href=&quot;#POSIX_Time&quot;&gt;POSIX time&lt;/a&gt;&lt;/code&gt;. To retrieve it, call &lt;code&gt;&lt;a href=&quot;erlang#system_time-0&quot;&gt; erlang:system_time()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#POSIX_Time&quot;&gt;POSIX time&lt;/a&gt;&lt;/code&gt; のErlangランタイムシステムビュー。それを取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#system_time-0&quot;&gt; erlang:system_time()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b9d9f6b0df9097bbff53b037dc4f96145ca6dbd2" translate="yes" xml:space="preserve">
          <source>The Erlang runtime systems view of &lt;code&gt;&lt;a href=&quot;#POSIX_Time&quot;&gt;POSIX time&lt;/a&gt;&lt;/code&gt;. To retrieve it, call &lt;code&gt;&lt;a href=&quot;erlang#system_time-0&quot;&gt;erlang:system_time()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#POSIX_Time&quot;&gt;POSIX time&lt;/a&gt;&lt;/code&gt; のErlangランタイムシステムビュー。それを取得するには、 &lt;code&gt;&lt;a href=&quot;erlang#system_time-0&quot;&gt;erlang:system_time()&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="175c0bd0d93fcd68af4b41f5bd3ed0c1384dfa2e" translate="yes" xml:space="preserve">
          <source>The Erlang scanner in the &lt;code&gt;io&lt;/code&gt; module can be used as a starting point when writing a new scanner. Study &lt;code&gt;yeccscan.erl&lt;/code&gt; in order to see how a filter can be added on top of &lt;code&gt;io:scan_erl_form/3&lt;/code&gt; to provide a scanner for Yecc that tokenizes grammar files before parsing them with the Yecc parser. A more general approach to scanner implementation is to use a scanner generator. A scanner generator in Erlang called &lt;code&gt;leex&lt;/code&gt; is under development.</source>
          <target state="translated">&lt;code&gt;io&lt;/code&gt; モジュールのErlangスキャナーは、新しいスキャナーを作成する際の出発点として使用できます。研究 &lt;code&gt;yeccscan.erl&lt;/code&gt; フィルタがの上に追加することができる方法を確認するために &lt;code&gt;io:scan_erl_form/3&lt;/code&gt; Yeccパーサでそれらを解析する前に文法ファイルをトークン化Yeccためのスキャナを提供します。スキャナー実装へのより一般的なアプローチは、スキャナージェネレーターを使用することです。Erlangで &lt;code&gt;leex&lt;/code&gt; と呼ばれるスキャナージェネレーターが開発中です。</target>
        </trans-unit>
        <trans-unit id="37265f6197faced222d42e8a4148f58e5b966cea" translate="yes" xml:space="preserve">
          <source>The Erlang server interface is implemented by module &lt;code&gt;mod_esi&lt;/code&gt;.</source>
          <target state="translated">Erlangサーバーインターフェイスはモジュール &lt;code&gt;mod_esi&lt;/code&gt; によって実装されます。</target>
        </trans-unit>
        <trans-unit id="fa8c45ba50425e13e797fcc4854bc1fcf3424403" translate="yes" xml:space="preserve">
          <source>The Erlang shell available over SSH</source>
          <target state="translated">SSH経由で利用できるErlangシェル</target>
        </trans-unit>
        <trans-unit id="fa1d76065068bd2589fcd099c8a0c8156db2a1c8" translate="yes" xml:space="preserve">
          <source>The Erlang shell understands the command &lt;code&gt;c(Module)&lt;/code&gt; which both compiles and loads &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">アーランシェルコマンド理解 &lt;code&gt;c(Module)&lt;/code&gt; の両方のコンパイルとロード &lt;code&gt;Module&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a5dceee96a25b9a8c7bf615c2130bf76584510ce" translate="yes" xml:space="preserve">
          <source>The Erlang shell.</source>
          <target state="translated">Erlangシェル。</target>
        </trans-unit>
        <trans-unit id="a51205151ea58d8438ebe29c7d0e6218f72ff948" translate="yes" xml:space="preserve">
          <source>The Erlang source code has support for the UTF-8 encoding and bytewise encoding. The default in Erlang/OTP R16B was bytewise (&lt;code&gt;latin1&lt;/code&gt;) encoding. It was changed to UTF-8 in Erlang/OTP 17.0. You can control the encoding by a comment like the following in the beginning of the file:</source>
          <target state="translated">Erlangソースコードは、UTF-8エンコーディングとバイト単位のエンコーディングをサポートしています。Erlang / OTP R16Bのデフォルトはバイト単位（ &lt;code&gt;latin1&lt;/code&gt; ）エンコーディングでした。Erlang / OTP 17.0でUTF-8に変更されました。ファイルの先頭にある次のようなコメントでエンコードを制御できます。</target>
        </trans-unit>
        <trans-unit id="469909cd3bb80b2a08960dcf0954a2e053c206c4" translate="yes" xml:space="preserve">
          <source>The Erlang source file &lt;code&gt;encoding&lt;/code&gt; is selected by a comment in one of the first two lines of the source file. The first string that matches the regular expression &lt;code&gt;coding\s*[:=]\s*([-a-zA-Z0-9])+&lt;/code&gt; selects the encoding. If the matching string is an invalid encoding, it is ignored. The valid encodings are &lt;code&gt;Latin-1&lt;/code&gt; and &lt;code&gt;UTF-8&lt;/code&gt;, where the case of the characters can be chosen freely.</source>
          <target state="translated">Erlangソースファイルの &lt;code&gt;encoding&lt;/code&gt; は、ソースファイルの最初の2行のいずれかのコメントによって選択されます。正規表現 &lt;code&gt;coding\s*[:=]\s*([-a-zA-Z0-9])+&lt;/code&gt; 一致する最初の文字列は、エンコーディングを選択します。一致する文字列が無効なエンコーディングである場合、それは無視されます。有効なエンコーディングは &lt;code&gt;Latin-1&lt;/code&gt; と &lt;code&gt;UTF-8&lt;/code&gt; で、文字の大文字と小文字は自由に選択できます。</target>
        </trans-unit>
        <trans-unit id="e7ddb53385af1f6753c8713a645cc1fc36907bac" translate="yes" xml:space="preserve">
          <source>The Erlang source file &lt;strong id=&quot;encoding&quot;&gt;encoding&lt;/strong&gt; is selected by a comment in one of the first two lines of the source file. The first string matching the regular expression &lt;code&gt;coding\s*[:=]\s*([-a-zA-Z0-9])+&lt;/code&gt; selects the encoding. If the matching string is not a valid encoding, it is ignored. The valid encodings are &lt;code&gt;Latin-1&lt;/code&gt; and &lt;code&gt;UTF-8&lt;/code&gt;, where the case of the characters can be chosen freely.</source>
          <target state="translated">Erlangソースファイルの&lt;strong id=&quot;encoding&quot;&gt;エンコーディング&lt;/strong&gt;は、ソースファイルの最初の2行のいずれかのコメントによって選択されます。正規表現 &lt;code&gt;coding\s*[:=]\s*([-a-zA-Z0-9])+&lt;/code&gt; 一致する最初の文字列は、エンコーディングを選択します。一致する文字列が有効なエンコーディングでない場合、無視されます。有効なエンコーディングは &lt;code&gt;Latin-1&lt;/code&gt; と &lt;code&gt;UTF-8&lt;/code&gt; で、文字の大文字と小文字は自由に選択できます。</target>
        </trans-unit>
        <trans-unit id="978c7190f27ebbf14f966c1feadf6f5410de9629" translate="yes" xml:space="preserve">
          <source>The Erlang system must be started.</source>
          <target state="translated">Erlangシステムを起動しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c9941ae0e376a140dd219d96c5fea5aedb3770d4" translate="yes" xml:space="preserve">
          <source>The Erlang token scanner.</source>
          <target state="translated">Erlangのトークンスキャナ。</target>
        </trans-unit>
        <trans-unit id="a16c12a6b02ac800a11334f62d3a994378ac0165" translate="yes" xml:space="preserve">
          <source>The Erlang web server API data types are as follows:</source>
          <target state="translated">ErlangのWebサーバーAPIのデータ型は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="682db584bdb9aa3dd1062d8f6e41de11a4e999fd" translate="yes" xml:space="preserve">
          <source>The Erlang/OTP SSH application is intended to be used in other applications as a library.</source>
          <target state="translated">Erlang/OTP SSHアプリケーションはライブラリとして他のアプリケーションで使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="834fb47d95be27590d99f014c1a5220c8d723132" translate="yes" xml:space="preserve">
          <source>The Erlang/OTP SSH server after a succesful authentication</source>
          <target state="translated">認証に成功した後の Erlang/OTP SSH サーバ</target>
        </trans-unit>
        <trans-unit id="1ce8792731cffaac51f7760932b74501269d8966" translate="yes" xml:space="preserve">
          <source>The Erlang/OTP SSH server checks the user name and password in the following order:</source>
          <target state="translated">Erlang/OTP SSHサーバは以下の順番でユーザ名とパスワードをチェックします。</target>
        </trans-unit>
        <trans-unit id="65d28c591e7208c326a531484ecbb2f3de4814d0" translate="yes" xml:space="preserve">
          <source>The Evaluator area, where you can evaluate functions within the context of the debugged process, if that process execution is stopped.</source>
          <target state="translated">評価者領域は、デバッグされたプロセスの実行が停止している場合に、デバッグされたプロセスのコンテキスト内で関数を評価することができます。</target>
        </trans-unit>
        <trans-unit id="b8f527b2c601f16975ba4c3206247d354cc52722" translate="yes" xml:space="preserve">
          <source>The FTP client always tries to use passive FTP mode and only resort to active FTP mode if this fails. This default behavior can be changed by start option &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">FTPクライアントは常にパッシブFTPモードを使用しようとし、これが失敗した場合にのみアクティブFTPモードに頼ります。このデフォルトの動作は、起動オプション &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; 変更できます。</target>
        </trans-unit>
        <trans-unit id="46eb4343e573b38e361697e41777d053a18c2fba" translate="yes" xml:space="preserve">
          <source>The FTP client can be started and stopped dynamically in runtime by calling the &lt;code&gt;ftp&lt;/code&gt; application API &lt;code&gt;ftp:start_service(ServiceConfig)&lt;/code&gt; and &lt;code&gt;ftp:stop_service(Pid)&lt;/code&gt;.</source>
          <target state="translated">FTPクライアントは、 &lt;code&gt;ftp&lt;/code&gt; アプリケーションAPIの &lt;code&gt;ftp:start_service(ServiceConfig)&lt;/code&gt; および &lt;code&gt;ftp:stop_service(Pid)&lt;/code&gt; を呼び出すことにより、実行時に動的に開始および停止できます。</target>
        </trans-unit>
        <trans-unit id="0ff37cf016753285c00cfe38b14f6b9064cd0bb5" translate="yes" xml:space="preserve">
          <source>The Flex scanner is a Megaco scanner written as a linked in driver (in C). There are two ways to get this working:</source>
          <target state="translated">Flexスキャナは、リンクインドライバ(C言語)で書かれたMegacoスキャナです。これを動作させるには2つの方法があります。</target>
        </trans-unit>
        <trans-unit id="8bd0f2f59d01566729720bb338392aa95bc03bec" translate="yes" xml:space="preserve">
          <source>The Fragment ID is used to number the fragments in a sequence. The id starts at the total number of fragments and then decrements to 1 (which is the final fragment). So if a sequence consists of 3 fragments the fragment id in the starting header will be 3, and then fragments 2 and 1 are sent.</source>
          <target state="translated">Fragment ID は、シーケンス内のフラグメントに番号を付けるために使用されます。ID はフラグメントの総数から始まり、1 (これが最終的なフラグメント)に減算されます。つまり、シーケンスが 3 つのフラグメントからなる場合、最初のヘッダのフラグメント ID は 3 になり、その後フラグメント 2 と 1 が送信されます。</target>
        </trans-unit>
        <trans-unit id="b6270c4ff6807ee1959a0d7d8287c7ee55db3319" translate="yes" xml:space="preserve">
          <source>The Fun can also be passed as an argument to the function &lt;code&gt;&lt;a href=&quot;mnesia#activity-2&quot;&gt;mnesia:activity/2,3,4&lt;/a&gt;&lt;/code&gt;, which enables use of customized activity access callback modules. It can either be obtained directly by stating the module name as argument, or implicitly by use of configuration parameter &lt;code&gt;access_module&lt;/code&gt;. A customized callback module can be used for several purposes, such as providing triggers, integrity constraints, runtime statistics, or virtual tables.</source>
          <target state="translated">Funは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#activity-2&quot;&gt;mnesia:activity/2,3,4&lt;/a&gt;&lt;/code&gt; に引数として渡すこともできます。これにより、カスタマイズされたアクティビティアクセスコールバックモジュールを使用できます。これは、モジュール名を引数として指定することによって直接取得することも、構成パラメーター &lt;code&gt;access_module&lt;/code&gt; を使用して暗黙的に取得することもできます。カスタマイズされたコールバックモジュールは、トリガー、整合性制約、ランタイム統計、仮想テーブルの提供など、いくつかの目的に使用できます。</target>
        </trans-unit>
        <trans-unit id="0817c2658a9f234929df429f0abce5aa05ce329d" translate="yes" xml:space="preserve">
          <source>The Fun can also be passed as an argument to the function &lt;code&gt;&lt;a href=&quot;mnesia#activity-4&quot;&gt;mnesia:activity/2,3,4&lt;/a&gt;&lt;/code&gt;, which enables use of customized activity access callback modules. It can either be obtained directly by stating the module name as argument, or implicitly by use of configuration parameter &lt;code&gt;access_module&lt;/code&gt;. A customized callback module can be used for several purposes, such as providing triggers, integrity constraints, runtime statistics, or virtual tables.</source>
          <target state="translated">Funは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#activity-4&quot;&gt;mnesia:activity/2,3,4&lt;/a&gt;&lt;/code&gt; に引数として渡すこともできます。これにより、カスタマイズされたアクティビティアクセスコールバックモジュールを使用できるようになります。引数としてモジュール名を指定して直接取得するか、構成パラメーター &lt;code&gt;access_module&lt;/code&gt; を使用して暗黙的に取得できます。カスタマイズされたコールバックモジュールは、トリガー、整合性制約、ランタイム統計、仮想テーブルの提供など、いくつかの目的に使用できます。</target>
        </trans-unit>
        <trans-unit id="279188337fe7d9611837624292436a6f0c6df988" translate="yes" xml:space="preserve">
          <source>The GC_REGEXP definition</source>
          <target state="translated">GC_REGEXP 定義</target>
        </trans-unit>
        <trans-unit id="491576369b07d94c026adb9d94add3cd468dc1c6" translate="yes" xml:space="preserve">
          <source>The GUI main window is opened when Crashdump Viewer has loaded a crashdump. It contains a title bar, a menu bar, information tabs, and a status bar.</source>
          <target state="translated">Crashdump Viewerがクラッシュダンプをロードすると、GUIメイン・ウィンドウが開きます。メイン・ウィンドウには、タイトル・バー、メニュー・バー、情報タブ、ステータス・バーがあります。</target>
        </trans-unit>
        <trans-unit id="468c9cc0468cc5c92ee919e07070c915b671da34" translate="yes" xml:space="preserve">
          <source>The GetNext Operation operation should only be defined for tables since the agent can find the next instance of plain variables in the MIB and call the instrumentation with the &lt;code&gt;get&lt;/code&gt; operation.</source>
          <target state="translated">エージェントはMIBでプレーン変数の次のインスタンスを見つけ、 &lt;code&gt;get&lt;/code&gt; 操作でインスツルメンテーションを呼び出すことができるため、GetNext操作操作はテーブルに対してのみ定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="ca4179f6bcde085d4b0d34f9240821a74141f758" translate="yes" xml:space="preserve">
          <source>The Gregorian calendar in this module is extended back to year 0. For a given date, the &lt;strong&gt;gregorian days&lt;/strong&gt; is the number of days up to and including the date specified. Similarly, the &lt;strong&gt;gregorian seconds&lt;/strong&gt; for a specified date and time is the number of seconds up to and including the specified date and time.</source>
          <target state="translated">このモジュールのグレゴリオ暦は0年まで拡張されます。特定の日付の場合、グレゴリオ暦の&lt;strong&gt;日数&lt;/strong&gt;は、指定された日付までの日数です。同様に、指定された日時の&lt;strong&gt;グレゴリオ秒&lt;/strong&gt;は、指定された日時までの秒数です。</target>
        </trans-unit>
        <trans-unit id="6a32364a7c7faf5d1cbacad811c6e3a642e6422e" translate="yes" xml:space="preserve">
          <source>The HTML overview log file is updated with test results.</source>
          <target state="translated">HTML概要ログファイルは、テスト結果とともに更新されます。</target>
        </trans-unit>
        <trans-unit id="7141eac40a2b0f12431f108b64d289e030f4933d" translate="yes" xml:space="preserve">
          <source>The HTML tags allowed in &lt;code&gt;application/erlang+html&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;application/erlang+html&lt;/code&gt; で許可されているHTMLタグ。</target>
        </trans-unit>
        <trans-unit id="aab4263cb8d1f32842025f35d2e34059d6bef33e" translate="yes" xml:space="preserve">
          <source>The HTML version of the test suite source code is not generated during the test run (and is consequently not available in the log file system).</source>
          <target state="translated">テストスイートのソースコードのHTMLバージョンは、テスト実行中には生成されません(結果的にログファイルシステムでは利用できません)。</target>
        </trans-unit>
        <trans-unit id="e41fc71ae08f56427cd0499723a4d95a81e54bc2" translate="yes" xml:space="preserve">
          <source>The HTTP client and server are HTTP 1.1 compliant as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">HTTPクライアントとサーバーは、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; で定義されているように、HTTP 1.1に準拠しています。</target>
        </trans-unit>
        <trans-unit id="0a3e013cebd4679eacc44ce278db16ae997e7553" translate="yes" xml:space="preserve">
          <source>The HTTP client default profile is started when the &lt;code&gt;Inets&lt;/code&gt; application is started and is then available to all processes on that Erlang node. Other profiles can also be started at application startup, or profiles can be started and stopped dynamically in runtime. Each client profile spawns a new process to handle each request, unless a persistent connection can be used with or without pipelining. The client adds a &lt;code&gt;host&lt;/code&gt; header and an empty &lt;code&gt;te&lt;/code&gt; header if there are no such headers present in the request.</source>
          <target state="translated">HTTPクライアントのデフォルトプロファイルは、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションの起動時に開始され、そのErlangノードのすべてのプロセスで使用できます。他のプロファイルもアプリケーションの起動時に開始できます。または、実行時にプロファイルを動的に開始および停止できます。パイプラインの有無にかかわらず永続的な接続を使用できる場合を除き、各クライアントプロファイルは、各リクエストを処理する新しいプロセスを生成します。クライアントは、追加 &lt;code&gt;host&lt;/code&gt; ヘッダーと空の &lt;code&gt;te&lt;/code&gt; 要求に存在しないようなヘッダが存在しない場合ヘッダを。</target>
        </trans-unit>
        <trans-unit id="7c7ba7538b9c9c0121b49c6ec91168734deba0dc" translate="yes" xml:space="preserve">
          <source>The HTTP server, also referred to as httpd, handles HTTP requests as described in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; with a few exceptions, such as gateway and proxy functionality. The server supports IPv6 as long as the underlying mechanisms also do so.</source>
          <target state="translated">HTTPサーバーは、httpdとも呼ばれ、ゲートウェイやプロキシ機能などのいくつかの例外を除いて、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; で説明されているようにHTTP要求を処理します。基盤となるメカニズムもIPv6をサポートしている限り、サーバーはIPv6をサポートします。</target>
        </trans-unit>
        <trans-unit id="ed5f93e75e8af313b179c6713c54eb1bf37d9eef" translate="yes" xml:space="preserve">
          <source>The HTTP standard requires them to be case insensitive. Use this feature only if there is no other way to communicate with the server or for testing purpose. When this option is used, no headers are automatically added. All necessary headers must be provided by the user.</source>
          <target state="translated">HTTP 標準では、大文字と小文字を区別しないことが要求されています。この機能は、サーバと通信するための他の方法がない場合やテスト目的の場合にのみ使用してください。このオプションを使用すると、ヘッダは自動的に追加されません。必要なヘッダはすべてユーザが提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="f2d85de81f5fcc8588a618440bb02e8ae50bca16" translate="yes" xml:space="preserve">
          <source>The HTTP status code returned to the client (&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">クライアントに返されたHTTPステータスコード（ &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1945.txt&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="aa0035abf3b99831613dc762c61fbb26c4588f4e" translate="yes" xml:space="preserve">
          <source>The Handshake in Detail</source>
          <target state="translated">握手の詳細</target>
        </trans-unit>
        <trans-unit id="1b82e39a63325ee5467a0018be1f905eeb2f7c52" translate="yes" xml:space="preserve">
          <source>The Hypertext Transfer Protocol. The packets are returned with the format according to &lt;code&gt;HttpPacket&lt;/code&gt; described earlier. A packet is either a request, a response, a header, or an end of header mark. Invalid lines are returned as &lt;code&gt;HttpError&lt;/code&gt;.</source>
          <target state="translated">ハイパーテキスト転送プロトコル。パケットは、前述の &lt;code&gt;HttpPacket&lt;/code&gt; に従った形式で返されます。パケットは、要求、応答、ヘッダー、またはヘッダー終了マークのいずれかです。無効な行は &lt;code&gt;HttpError&lt;/code&gt; として返されます。</target>
        </trans-unit>
        <trans-unit id="3946370c047884fbf4c2f18670e43abd4a1961c1" translate="yes" xml:space="preserve">
          <source>The Hypertext Transfer Protocol. The packets are returned with the format according to &lt;code&gt;HttpPacket&lt;/code&gt; described in &lt;code&gt; erlang:decode_packet/3&lt;/code&gt; in ERTS. A socket in passive mode returns &lt;code&gt;{ok, HttpPacket}&lt;/code&gt; from &lt;code&gt;gen_tcp:recv&lt;/code&gt; while an active socket sends messages like &lt;code&gt;{http, Socket, HttpPacket}&lt;/code&gt;.</source>
          <target state="translated">ハイパーテキスト転送プロトコル。パケットは、 &lt;code&gt;HttpPacket&lt;/code&gt; &lt;code&gt; erlang:decode_packet/3&lt;/code&gt; で説明されているHttpPacketに従った形式で返されます。パッシブモードのソケットは &lt;code&gt;gen_tcp:recv&lt;/code&gt; から &lt;code&gt;{ok, HttpPacket}&lt;/code&gt; を返し、アクティブソケットは &lt;code&gt;{http, Socket, HttpPacket}&lt;/code&gt; ようなメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="169734960811a4c34c5ce86c1d456ff7cf230d3e" translate="yes" xml:space="preserve">
          <source>The Hypertext Transfer Protocol. The packets are returned with the format according to &lt;code&gt;HttpPacket&lt;/code&gt; described in &lt;code&gt;erlang:decode_packet/3&lt;/code&gt; in ERTS. A socket in passive mode returns &lt;code&gt;{ok, HttpPacket}&lt;/code&gt; from &lt;code&gt;gen_tcp:recv&lt;/code&gt; while an active socket sends messages like &lt;code&gt;{http, Socket, HttpPacket}&lt;/code&gt;.</source>
          <target state="translated">ハイパーテキスト転送プロトコル。パケットは、 &lt;code&gt;HttpPacket&lt;/code&gt; &lt;code&gt;erlang:decode_packet/3&lt;/code&gt; に記述されているHttpPacketに従った形式で返されます。パッシブモードのソケットは &lt;code&gt;gen_tcp:recv&lt;/code&gt; から &lt;code&gt;{ok, HttpPacket}&lt;/code&gt; 返しますが、アクティブソケットは &lt;code&gt;{http, Socket, HttpPacket}&lt;/code&gt; などのメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="0fdd97c77238f0d4bc1a4b8495b731166db58155" translate="yes" xml:space="preserve">
          <source>The I/O device used when Erlang is started with the &quot;-oldshell&quot; or &quot;-noshell&quot; flags is by default set to &lt;code&gt;latin1&lt;/code&gt; encoding, meaning that any characters &amp;gt; codepoint 255 are escaped and that input is expected to be plain 8-bit ISO Latin-1. If the encoding is changed to Unicode, input and output from the standard file descriptors are in UTF-8 (regardless of operating system).</source>
          <target state="translated">Erlangが「-oldshell」または「-noshell」フラグで開始されたときに使用されるI / Oデバイスは、デフォルトで &lt;code&gt;latin1&lt;/code&gt; エンコーディングに設定されています。つまり、コードポイント255を超える文字はエスケープされ、入力はプレーンな8ビットであることが期待されますISO Latin-1。エンコーディングをUnicodeに変更すると、標準ファイル記述子からの入力と出力は、オペレーティングシステムに関係なくUTF-8になります。</target>
        </trans-unit>
        <trans-unit id="3a9ee44bfdadb9768492101f1c57f8171e2439fd" translate="yes" xml:space="preserve">
          <source>The I/O protocol in Erlang enables bi-directional communication between clients and servers.</source>
          <target state="translated">ErlangのI/Oプロトコルはクライアントとサーバ間の双方向通信を可能にします。</target>
        </trans-unit>
        <trans-unit id="da4b71eee53848cfe7e0ded6f806a23b361aa596" translate="yes" xml:space="preserve">
          <source>The I/O server can, for a list of requests, send any of the following valid results in the reply, depending on the requests in the list:</source>
          <target state="translated">I/Oサーバーは、リクエストのリストに対して、リスト内のリクエストに応じて、以下の有効な結果のいずれかを返信に送ることができます。</target>
        </trans-unit>
        <trans-unit id="7bf03aa38e2e7b2e9d865676ed62c6ed1b166de9" translate="yes" xml:space="preserve">
          <source>The I/O server is a process that handles the requests and performs the requested task on, for example, an I/O device.</source>
          <target state="translated">I/Oサーバは、要求を処理し、要求されたタスクを例えばI/Oデバイス上で実行するプロセスである。</target>
        </trans-unit>
        <trans-unit id="29324f42eeb70cb428190b9afb707250b51d08e0" translate="yes" xml:space="preserve">
          <source>The I/O server is to send one of the following as &lt;code&gt;Reply&lt;/code&gt;:</source>
          <target state="translated">I / Oサーバーは、次のいずれかを &lt;code&gt;Reply&lt;/code&gt; として送信します。</target>
        </trans-unit>
        <trans-unit id="cffff6188b7c071be58063158f15f52414545611" translate="yes" xml:space="preserve">
          <source>The I/O server is to send the &lt;code&gt;Reply&lt;/code&gt; as:</source>
          <target state="translated">I / Oサーバーは、 &lt;code&gt;Reply&lt;/code&gt; を次のように送信します。</target>
        </trans-unit>
        <trans-unit id="a68a34b093217c6e79f51f56360324a76a6607db" translate="yes" xml:space="preserve">
          <source>The I/O server replies to the client with an &lt;code&gt;io_reply&lt;/code&gt; tuple, where element &lt;code&gt;Reply&lt;/code&gt; is one of:</source>
          <target state="translated">I / Oサーバーはクライアントに &lt;code&gt;io_reply&lt;/code&gt; タプルで応答します。ここで、要素 &lt;code&gt;Reply&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="d6984e80e5ec40501eed04b79f0e90cd3e1a039b" translate="yes" xml:space="preserve">
          <source>The I/O server replies:</source>
          <target state="translated">I/Oサーバが応答します。</target>
        </trans-unit>
        <trans-unit id="615c499b56501d6b2d674044444c5cd252a3aa4d" translate="yes" xml:space="preserve">
          <source>The I/O vector used by the emulator and drivers is a list of binaries, with a &lt;code&gt;SysIOVec&lt;/code&gt; pointing to the buffers of the binaries. It is used in &lt;code&gt;driver_outputv&lt;/code&gt; and the &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; driver callback. Also, the driver queue is an &lt;code&gt;ErlIOVec&lt;/code&gt;.</source>
          <target state="translated">エミュレーターとドライバーが使用するI / Oベクトルはバイナリーのリストであり、 &lt;code&gt;SysIOVec&lt;/code&gt; はバイナリーのバッファーを指します。これは、 &lt;code&gt;driver_outputv&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;driver_entry#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; ドライバーコールバックで使用されます。また、ドライバーキューは &lt;code&gt;ErlIOVec&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="11486f73702f77793d0c501dded54bd9d9a0b366" translate="yes" xml:space="preserve">
          <source>The ID of the handler (which is &lt;code&gt;false&lt;/code&gt; if it was registered without an ID).</source>
          <target state="translated">ハンドラーのID（IDなしで登録された場合は &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5910e0f627e6ac1682f658faee394e4ef0132c80" translate="yes" xml:space="preserve">
          <source>The IDs contains normal fully qualified domain names like e.g &lt;code&gt;foo.example.com&lt;/code&gt;, but IP addresses are not recommended. The rfc describes why this is not recommended as well as security considerations about how to aquire the Reference IDs.</source>
          <target state="translated">IDには &lt;code&gt;foo.example.com&lt;/code&gt; などの通常の完全修飾ドメイン名が含まれますが、IPアドレスは推奨されません。rfcには、これが推奨されない理由と、参照IDを取得する方法に関するセキュリティ上の考慮事項が記載されています。</target>
        </trans-unit>
        <trans-unit id="ba43ecb0debcc2f97c4e2d5e92d1fb358277b19c" translate="yes" xml:space="preserve">
          <source>The IF() macro</source>
          <target state="translated">IF()マクロ</target>
        </trans-unit>
        <trans-unit id="b28f4dac9c4ee5d63c861a672e8fdeba64970c63" translate="yes" xml:space="preserve">
          <source>The IP addresses must be specified in the standard form (four decimal numbers separated by periods, for example, &lt;code&gt;&quot;150.236.20.74&quot;&lt;/code&gt;. Hosts names are not acceptable, but a broadcast address (preferably limited to the local network) is.</source>
          <target state="translated">IPアドレスは標準形式で指定する必要があります（ピリオドで区切られた4つの10進数、たとえば &lt;code&gt;&quot;150.236.20.74&quot;&lt;/code&gt; )。ホスト名は受け入れられませんが、ブロードキャストアドレス（ローカルネットワークに限定されることが望ましい）は受け入れられます。</target>
        </trans-unit>
        <trans-unit id="8e52fe37494dbcf6555873254ea719776b067efd" translate="yes" xml:space="preserve">
          <source>The IP_ADJUSTMENT pre-bound variable</source>
          <target state="translated">IP_ADJUSTMENTプリバウンド変数</target>
        </trans-unit>
        <trans-unit id="74be3487335549a3ba00af3a4220139041a986e4" translate="yes" xml:space="preserve">
          <source>The Inets services API.</source>
          <target state="translated">InetsサービスのAPIです。</target>
        </trans-unit>
        <trans-unit id="2bd655ea5793b54cfcef1365f007ad296dab65da" translate="yes" xml:space="preserve">
          <source>The Interpret Modules window is used for selecting which modules to interpret. Initially, the window displays the modules (&lt;code&gt;erl&lt;/code&gt; files) and subdirectories of the current working directory.</source>
          <target state="translated">「モジュールの解釈」ウィンドウは、解釈するモジュールを選択するために使用されます。最初に、ウィンドウには現在の作業ディレクトリのモジュール（ &lt;code&gt;erl&lt;/code&gt; ファイル）とサブディレクトリが表示されます。</target>
        </trans-unit>
        <trans-unit id="46568e5f2d41b68efc3d2efed445ca9d877dd874" translate="yes" xml:space="preserve">
          <source>The Kernel application has all the code necessary to run the Erlang runtime system: file servers, code servers, and so on.</source>
          <target state="translated">カーネルアプリケーションはErlangランタイムシステムを実行するのに必要なすべてのコードを持っています:ファイルサーバ、コードサーバなど。</target>
        </trans-unit>
        <trans-unit id="1d2901750e4e178866aa29af00b9514d934b8cb3" translate="yes" xml:space="preserve">
          <source>The Kernel application is the first application started. It is mandatory in the sense that the minimal system based on Erlang/OTP consists of Kernel and STDLIB. Kernel contains the following functional areas:</source>
          <target state="translated">Kernelアプリケーションは最初に起動するアプリケーションです。Erlang/OTPベースのミニマルシステムはKernelとSTDLIBで構成されているという意味で必須です。Kernelには以下の機能領域が含まれています。</target>
        </trans-unit>
        <trans-unit id="393233a88750cf4fe6f8a18919929901cb57f040" translate="yes" xml:space="preserve">
          <source>The Kernel configuration parameter &lt;code&gt;global_groups&lt;/code&gt; defines the global groups (see also &lt;code&gt;kernel(6)&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;config&quot;&gt;config(4)&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">カーネル構成パラメーター &lt;code&gt;global_groups&lt;/code&gt; は、グローバルグループを定義し &lt;code&gt;kernel(6)&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;config&quot;&gt;config(4)&lt;/a&gt;&lt;/code&gt; も参照）。</target>
        </trans-unit>
        <trans-unit id="329d0e8d9e7fbac7a43bba657580181c6f878afc" translate="yes" xml:space="preserve">
          <source>The Kernel/STDLIB applications are damaged or the start script is damaged.</source>
          <target state="translated">Kernel/STDLIBアプリケーションが破損しているか、スタートスクリプトが破損しています。</target>
        </trans-unit>
        <trans-unit id="ce538f925bf84002c38fbd4dc502029a22341ac9" translate="yes" xml:space="preserve">
          <source>The Leex module should be considered experimental as it will be subject to changes in future releases.</source>
          <target state="translated">Leexモジュールは将来のリリースで変更される可能性があるため、実験的なものと考えてください。</target>
        </trans-unit>
        <trans-unit id="c848076de058785ede6b2e785124e2cf00899a54" translate="yes" xml:space="preserve">
          <source>The Linux Trace Toolkit: next generation is an open source system software package for correlated tracing of the Linux kernel, user applications and libraries.</source>
          <target state="translated">Linux Trace Toolkit:next generationは、Linuxカーネル、ユーザアプリケーション、ライブラリの相関トレースを行うためのオープンソースのシステムソフトウェアパッケージです。</target>
        </trans-unit>
        <trans-unit id="9b5f802a372a8d9f81e47da8ffe942e03e117399" translate="yes" xml:space="preserve">
          <source>The Logger backend forwards log events from the API, first through a set of &lt;strong&gt;primary filters&lt;/strong&gt;, then through a set of secondary filters attached to each log handler. The secondary filters are in the following named &lt;strong&gt;handler filters&lt;/strong&gt;.</source>
          <target state="translated">ロガーバックエンドは、APIからログイベントを転送します。最初に一連の&lt;strong&gt;プライマリフィルター&lt;/strong&gt;を介して、次に各ログハンドラーに接続されている一連のセカンダリフィルターを介して転送します。セカンダリフィルターは、次の名前付き&lt;strong&gt;ハンドラーフィルターにあり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="30f7d257c062cf1d99aadf05acae5dcdc7db0748" translate="yes" xml:space="preserve">
          <source>The Logger proxy is an Erlang process which is part of the Kernel application's supervision tree. During startup, the proxy process registers itself as the &lt;code&gt;system_logger&lt;/code&gt;, meaning that log events produced by the emulator are sent to this process.</source>
          <target state="translated">ロガープロキシは、カーネルアプリケーションの監視ツリーの一部であるアーランプロセスです。起動時に、プロキシプロセスはそれ自体を &lt;code&gt;system_logger&lt;/code&gt; として登録します。これは、エミュレータによって生成されたログイベントがこのプロセスに送信されることを意味します。</target>
        </trans-unit>
        <trans-unit id="709c2b894a55cf0a9eb1d8fa9b54a57e464ba3b7" translate="yes" xml:space="preserve">
          <source>The M-bit on a component AVP of a Grouped AVP that does not set M is ignored: such AVPs are not regarded as erroneous at decode.</source>
          <target state="translated">M が設定されていないグループ化 AVP のコンポーネント AVP の M ビットは無視されます。</target>
        </trans-unit>
        <trans-unit id="b932f03ca4571cac226370cd6a0c3fc9c9dd133c" translate="yes" xml:space="preserve">
          <source>The MBC area is called &lt;strong&gt;sa&lt;/strong&gt; as in super aligned and the SBC area is called &lt;strong&gt;sua&lt;/strong&gt; as in super un-aligned.</source>
          <target state="translated">MBCエリアはスーパーアラインされた場合と同様に&lt;strong&gt;sa&lt;/strong&gt;と呼ばれ、SBCエリアはスーパーアラインされていない場合と同様に&lt;strong&gt;sua&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="6e65c3cb49c60d682bd3249d0c0dd54ec5a5739f" translate="yes" xml:space="preserve">
          <source>The MD5 Message-Digest Algorithm is &lt;strong&gt;not&lt;/strong&gt; considered safe for code-signing or software-integrity purposes.</source>
          <target state="translated">MD5メッセージダイジェストアルゴリズムは、コード署名やソフトウェア整合性の目的では安全と&lt;strong&gt;は&lt;/strong&gt;見なされ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f776c349863aa954c934ed6333465e82a978b325" translate="yes" xml:space="preserve">
          <source>The MFA alternative makes it possible for Megaco to start and supervise a scanner written by the user (see &lt;code&gt;supervisor:start_child&lt;/code&gt; for an explanation of the parameters).</source>
          <target state="translated">MFAの代替案を使用すると、Megacoはユーザーが作成したスキャナーを起動して監視できます（パラメーターの説明については、 &lt;code&gt;supervisor:start_child&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="1def19a97ae2b0656b00af132fb7f372cb973f9f" translate="yes" xml:space="preserve">
          <source>The MG may explicitly invoke megaco:connect/4 and use a provisioned MID of the MGC as the RemoteMid.</source>
          <target state="translated">MG は明示的に megaco:connect/4 を呼び出し、MGC のプロビジョニングされた MID を RemoteMid として使用することができます。</target>
        </trans-unit>
        <trans-unit id="d9b9106067cc9059d7c61d3ebb7b2686b953f307" translate="yes" xml:space="preserve">
          <source>The MG may explicitly invoke megaco:connect/4 with the atom 'preliminary_mid' as a temporary MID of the MGC, send an intial message, the Service Change Request, to the MGC and then wait for an initial message, the Service Change Reply. When the reply arrives, the Megaco application will pick the MID of the MGC from the message header and automatically upgrade the connection to be a &quot;normal&quot; connection. By using this method of establishing the connection, the callback function UserMod:handle_connect/2 to be invoked twice. First with a ConnHandle with the remote_mid-field set to preliminary_mid, and then when the connection upgrade is done with the remote_mid-field set to the actual MID of the MGC.</source>
          <target state="translated">MGC は、MGC の一時的な MID として、megaco:connect/4 を明示的に呼び出し、初期メッセージである Service Change Request を MGC に送信し、初期メッセージである Service Change Reply を待つことができます。返信が到着すると、MegacoアプリケーションはメッセージヘッダからMGCのMIDをピックアップし、自動的に「通常の」接続にアップグレードします。この方法で接続を確立することで、コールバック関数UserMod:handle_connect/2を2回呼び出すことができます。最初は、connHandle で remote_mid-field を preliminary_mid に設定し、次に接続のアップグレードが行われたときに remote_mid-field を MGC の実際の MID に設定します。</target>
        </trans-unit>
        <trans-unit id="aea17cec43c433cc7d5df78c11e5155adf50c978" translate="yes" xml:space="preserve">
          <source>The MIB compiler can be invoked from the OS command line by using the command &lt;code&gt;erlc&lt;/code&gt;. &lt;code&gt;erlc&lt;/code&gt; recognizes the extension &lt;code&gt;.mib&lt;/code&gt;, and invokes the SNMP MIB compiler for files with that extension. The options &lt;code&gt;db&lt;/code&gt;, &lt;code&gt;group_check&lt;/code&gt;, &lt;code&gt;deprecated&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, &lt;code&gt;verbosity&lt;/code&gt;, &lt;code&gt;imports&lt;/code&gt; and &lt;code&gt;module_identity&lt;/code&gt; have to be specified to &lt;code&gt;erlc&lt;/code&gt; using the syntax &lt;code&gt;+term&lt;/code&gt;. See &lt;code&gt;erlc(1)&lt;/code&gt; for details.</source>
          <target state="translated">MIBコンパイラーは、コマンド &lt;code&gt;erlc&lt;/code&gt; を使用して、OSコマンド行から呼び出すことができます。 &lt;code&gt;erlc&lt;/code&gt; は拡張子.mibを認識し、その拡張子を &lt;code&gt;.mib&lt;/code&gt; ファイルのSNMP MIBコンパイラーを呼び出します。オプション &lt;code&gt;db&lt;/code&gt; 、 &lt;code&gt;group_check&lt;/code&gt; 、 &lt;code&gt;deprecated&lt;/code&gt; 、 &lt;code&gt;description&lt;/code&gt; 、 &lt;code&gt;verbosity&lt;/code&gt; 、 &lt;code&gt;imports&lt;/code&gt; および &lt;code&gt;module_identity&lt;/code&gt; は、構文 &lt;code&gt;+term&lt;/code&gt; を使用して &lt;code&gt;erlc&lt;/code&gt; に指定する必要があります。詳細については、 &lt;code&gt;erlc(1)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f4f52d6224012981f65b2f6681c14c8ab8b0bbf8" translate="yes" xml:space="preserve">
          <source>The MIB compiler is started with a call to &lt;code&gt;snmpc:compile(&amp;lt;mibname&amp;gt;).&lt;/code&gt; For example:</source>
          <target state="translated">MIBコンパイラは、 &lt;code&gt;snmpc:compile(&amp;lt;mibname&amp;gt;).&lt;/code&gt; 呼び出しで開始されます。例えば：</target>
        </trans-unit>
        <trans-unit id="edd06159b7a6aba946136da4c7e4c2496fb5f976" translate="yes" xml:space="preserve">
          <source>The MIB compiler understands both SMIv1 and SMIv2 MIBs. It uses the &lt;code&gt;MODULE-IDENTITY&lt;/code&gt; statement to determine if the MIB is version 1 or 2.</source>
          <target state="translated">MIBコンパイラは、SMIv1とSMIv2の両方のMIBを理解します。これは、使用しています &lt;code&gt;MODULE-IDENTITY&lt;/code&gt; の MIBは、バージョン1または2であるかどうかを判断するためのステートメントを。</target>
        </trans-unit>
        <trans-unit id="f45016e5e003d17ae323b899458860dc734f4ec3" translate="yes" xml:space="preserve">
          <source>The MIB compiler understands both SMIv1 and SMIv2 MIBs. It uses the MODULE-IDENTITY statement to determinate if the MIB is written in SMI version 1 or 2.</source>
          <target state="translated">MIB コンパイラは SMIv1 と SMIv2 の両方の MIB を理解します。それはMODULE-IDENTITY文を使用して、MIBがSMIバージョン1か2で書かれているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="cd9d36a4d02e1cba5060187b622d24d58daaa77e" translate="yes" xml:space="preserve">
          <source>The MIB definition for the table looks as follows:</source>
          <target state="translated">テーブルのMIB定義は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3670a31f68beb5c49cf1fc0895f0360e583892d6" translate="yes" xml:space="preserve">
          <source>The MIB is specified in an adapted subset of the Abstract Syntax Notation One (ASN.1) language. This adapted subset is called the Structure of Management Information (SMI).</source>
          <target state="translated">MIB は、抽象構文表記法 1 (ASN.1)言語の適応サブセットで指定される。この適応されたサブセットは、管理情報の構造(SMI)と呼ばれる。</target>
        </trans-unit>
        <trans-unit id="ddf38993bb21f6943082354919313abcba92be9e" translate="yes" xml:space="preserve">
          <source>The MIB must be written as a text file in SMIv1 or SMIv2 using an ASN.1 notation before it will be compiled. This text file must have the same name as the MIB, but with the suffix &lt;code&gt;.mib&lt;/code&gt;. This is necessary for handling the &lt;code&gt;IMPORT&lt;/code&gt; statement.</source>
          <target state="translated">MIBは、コンパイルする前に、ASN.1表記を使用してSMIv1またはSMIv2でテキストファイルとして書き込む必要があります。このテキストファイルは、MIBと同じ名前である必要がありますが、サフィックス &lt;code&gt;.mib&lt;/code&gt; が付いています。これは、 &lt;code&gt;IMPORT&lt;/code&gt; ステートメントを処理するために必要です。</target>
        </trans-unit>
        <trans-unit id="28b5820bae2b823215328a884121f24cdebd6ac9" translate="yes" xml:space="preserve">
          <source>The MIB table shown in the previous section can be compiled as follows:</source>
          <target state="translated">前項で示したMIBテーブルは、以下のようにコンパイルすることができます。</target>
        </trans-unit>
        <trans-unit id="8ec9b6855efdcd50624fb2152240f9d6cfd37b82" translate="yes" xml:space="preserve">
          <source>The MIB used in this example is called EX1-MIB. It contains two objects, a variable with a name and a table with friends.</source>
          <target state="translated">この例で使用しているMIBはEX1-MIBと呼ばれています。これには、名前のついた変数と、友達のいるテーブルの2つのオブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="e2036f385fe7aec6b74107075c06d9fb946e725a" translate="yes" xml:space="preserve">
          <source>The Makefile rule generated by this option looks as follows:</source>
          <target state="translated">このオプションで生成されるMakefileルールは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="b70e5f8f89b4686cb29a4a908b91ac8e282aa8a9" translate="yes" xml:space="preserve">
          <source>The Manager sends a request to the Agent.</source>
          <target state="translated">マネージャーはエージェントにリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="46da3a78459a2791fe81dd4c8585eaa2e4cc0ded" translate="yes" xml:space="preserve">
          <source>The Master Agent decodes the incoming UDP packet.</source>
          <target state="translated">マスターエージェントは、受信UDPパケットをデコードします。</target>
        </trans-unit>
        <trans-unit id="373ff796c178ffe0a9fc192a5614c9c2aa28127a" translate="yes" xml:space="preserve">
          <source>The Master Agent determines which items in the request that should be processed here and which items should be forwarded to its subagent.</source>
          <target state="translated">マスターエージェントは、ここで処理すべきリクエストのどの項目を、そのサブエージェントに転送すべきかを決定します。</target>
        </trans-unit>
        <trans-unit id="efae611f18882de954fb6f64727d8f6c45904beb" translate="yes" xml:space="preserve">
          <source>The Megaco client (user) starts the flex scanner (load the driver).</source>
          <target state="translated">メガコクライアント(ユーザー)がフレックススキャナを起動(ドライバをロード)します。</target>
        </trans-unit>
        <trans-unit id="74b78735e0be983743300743d7f123f781d14b1d" translate="yes" xml:space="preserve">
          <source>The Megaco mib is as of yet not standardized and our implementation is based on &lt;strong&gt;draft-ietf-megaco-mib-04.txt&lt;/strong&gt;. Almost all of the mib cannot easily be implemented by the megaco application. Instead these things should be implemented by a user (of the megaco application).</source>
          <target state="translated">Megaco mibは&lt;strong&gt;現時点&lt;/strong&gt;ではまだ標準化されておらず、私たちの実装は&lt;strong&gt;draft-ietf-megaco-mib-04.txtに基づいてい&lt;/strong&gt;ます。ほとんどすべてのmibは、megacoアプリケーションで簡単に実装することはできません。代わりに、これらはmegacoアプリケーションのユーザーが実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="69ce7f3a78e528729b8eeea0590643ad39f48cc1" translate="yes" xml:space="preserve">
          <source>The Megaco/H.248 application contains implementations for the two protocols specified by the Megaco/H.248 standard; UDP, see &lt;code&gt;&lt;a href=&quot;megaco_udp&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt;, and TCP/TPKT, see &lt;code&gt;&lt;a href=&quot;megaco_tcp&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Megaco / H.248アプリケーションには、Megaco / H.248標準で指定された2つのプロトコルの実装が含まれています。UDP、参照 &lt;code&gt;&lt;a href=&quot;megaco_udp&quot;&gt;megaco_udp&lt;/a&gt;&lt;/code&gt; を、およびTCP / TPKTは、参照 &lt;code&gt;&lt;a href=&quot;megaco_tcp&quot;&gt;megaco_tcp&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="aad987e822802dc01bf9dc22e5bb8ea6068aa667" translate="yes" xml:space="preserve">
          <source>The Megaco/H.248 standard defines both a plain text encoding and a binary encoding (ASN.1 BER) and we have implemented encoders and decoders for both. We do in fact supply five different encoding/decoding modules.</source>
          <target state="translated">Megaco/H.248 規格では、プレーンテキストエンコーディングとバイナリエンコーディング(ASN.1 BER)の両方が定義されており、当社では両方のエンコーダーとデコーダーを実装しています。実際に5種類のエンコーディング/デコーディングモジュールを提供しています。</target>
        </trans-unit>
        <trans-unit id="aa06303bf449e60941f0fbd6f5db8a0257dfe140" translate="yes" xml:space="preserve">
          <source>The Megaco/H.248 standard defines both a plain text encoding and a binary encoding (ASN.1 BER) and we have implemented encoders and decoders for both. We do supply a bunch of different encoding/decoding modules and the user may in fact implement their own (like our erl_dist module). Using a non-standard encoding format has its obvious drawbacks, but may be useful in some configurations.</source>
          <target state="translated">Megaco/H.248 規格では、プレーンテキストエンコーディングとバイナリエンコーディング (ASN.1 BER)の両方が定義されており、我々は両方のエンコーディングとデコーダを実装しています。我々は多くの異なるエンコーディング/デコーディングモジュールを提供していますが、 実際にはユーザが独自に実装することもできます (erl_dist モジュールのように)。非標準のエンコーディングフォーマットを使うことには明らかな欠点がありますが、 いくつかの設定では有用かもしれません。</target>
        </trans-unit>
        <trans-unit id="4e6da9c94911e5ddf6ca86f3b535349fffeec5ca" translate="yes" xml:space="preserve">
          <source>The Metadata field exists to allow languages, tools and libraries to add custom information to each entry. This EEP documents the following metadata keys:</source>
          <target state="translated">メタデータフィールドは、言語、ツール、ライブラリが各エントリにカスタム情報を追加できるようにするために存在する。このEEPは、以下のメタデータキーを文書化している。</target>
        </trans-unit>
        <trans-unit id="1180df526f481dbe5f0436fa1406c56c4711af67" translate="yes" xml:space="preserve">
          <source>The Mnesia DBMS can be used for storing data of SNMP tables. This means that an SNMP table can be implemented as a Mnesia table, and that a Mnesia table can be made visible via SNMP. This mapping is largely automated.</source>
          <target state="translated">Mnesia DBMSは、SNMPテーブルのデータを格納するために使用することができます。つまり、SNMPテーブルをMnesiaテーブルとして実装し、SNMP経由でMnesiaテーブルを可視化することができます。このマッピングはほぼ自動化されています。</target>
        </trans-unit>
        <trans-unit id="a591b496e3da82473b635cc4b898494993b158a0" translate="yes" xml:space="preserve">
          <source>The Mnesia algorithm for table load can lead to a situation where a table cannot be loaded. This situation occurs when a node is started and Mnesia concludes, or suspects, that another copy of the table was active after this local copy became inactive because of a system crash.</source>
          <target state="translated">テーブルロードのためのMnesiaアルゴリズムは、テーブルをロードできない状況を引き起こす可能性があります。この状況は、ノードが起動され、システムクラッシュによりローカルコピーが非アクティブになった後、テーブルの別のコピーがアクティブになったとMnesiaが結論づけた場合、またはその疑いがある場合に発生します。</target>
        </trans-unit>
        <trans-unit id="5e84c0c6719410c924b39a7531b144a0635ce33f" translate="yes" xml:space="preserve">
          <source>The Mnesia application provides a heavy duty real-time distributed database.</source>
          <target state="translated">Mnesiaアプリケーションは、ヘビーデューティーなリアルタイム分散データベースを提供します。</target>
        </trans-unit>
        <trans-unit id="4e31cb2dccdf565dc1ca8c735031043aeea8bc8e" translate="yes" xml:space="preserve">
          <source>The Mnesia directory is to be set to &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">Mnesiaディレクトリーは &lt;code&gt;M&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="87981337ff090edb8a09d20ade88cd56c81fc2fc" translate="yes" xml:space="preserve">
          <source>The Mnesia tables can be manipulated without using transactions. This has some serious disadvantages, but is considerably faster, as the transaction manager is not involved and no locks are set. A dirty operation does, however, guarantee a certain level of consistency, and the dirty operations cannot return garbled records. All dirty operations provide location transparency to the programmer, and a program does not have to be aware of the whereabouts of a certain table to function.</source>
          <target state="translated">Mnesiaのテーブルは、トランザクションを使用せずに操作することができます。これにはいくつかの深刻な欠点がありますが、トランザクションマネージャが関与しておらず、ロックも設定されていないため、かなり高速です。しかし、ダーティ操作は一定レベルの一貫性を保証し、ダーティ操作は文字化けしたレコードを返すことはできません。すべてのダーティ操作はプログラマに位置の透過性を提供し、プログラムは機能するために特定のテーブルの位置を意識する必要はありません。</target>
        </trans-unit>
        <trans-unit id="12555ca4fb4e5c73fcfb7a6b579630e086477989" translate="yes" xml:space="preserve">
          <source>The Module, Function and/or Arity parts of the tuple may be specified as the atom &lt;code&gt;'_'&lt;/code&gt; which is a &quot;wild-card&quot; matching all modules/functions/arities. Note, if the Module is specified as &lt;code&gt;'_'&lt;/code&gt;, the Function and Arity parts have to be specified as '_' too. The same holds for the Functions relation to the Arity.</source>
          <target state="translated">タプルのモジュール、関数、および/またはアリティの部分は、すべてのモジュール/関数/アリティに一致する「ワイルドカード」であるアトム &lt;code&gt;'_'&lt;/code&gt; として指定できます。モジュールが &lt;code&gt;'_'&lt;/code&gt; として指定されている場合、関数とアリティの部分も '_'として指定する必要があることに注意してください。アリティとの関数の関係についても同様です。</target>
        </trans-unit>
        <trans-unit id="f0af3d5917bbe134a6abcdbbf9104dc4ecd4c736" translate="yes" xml:space="preserve">
          <source>The Monitor window is the main window of Debugger and displays the following:</source>
          <target state="translated">モニタウィンドウはデバッガのメインウィンドウで、以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="70b4cea5e362ae717c1192bf6736623910297884" translate="yes" xml:space="preserve">
          <source>The NETCONF client is also compliant with RFC 5277 NETCONF Event Notifications, which defines a mechanism for an asynchronous message notification delivery service for the NETCONF protocol.</source>
          <target state="translated">NETCONF クライアントは、NETCONF プロトコルの非同期メッセージ通知配信サービスのメカニズムを定義する RFC 5277 NETCONF Event Notifications にも準拠しています。</target>
        </trans-unit>
        <trans-unit id="99b3461576af86b2830e124486fcb6fbe5704dd5" translate="yes" xml:space="preserve">
          <source>The NETCONF client is compliant with RFC 4741 NETCONF Configuration Protocol and RFC 4742 Using the NETCONF Configuration Protocol over Secure SHell (SSH).</source>
          <target state="translated">NETCONF クライアントは、RFC 4741 NETCONF Configuration Protocol および RFC 4742 Using NETCONF Configuration Protocol over Secure SHell (SSH)に準拠しています。</target>
        </trans-unit>
        <trans-unit id="ddf8604513f6b03eececb0b12edf6062d8892eb4" translate="yes" xml:space="preserve">
          <source>The NETCONF server uses &lt;code&gt;error_logger&lt;/code&gt; for logging of NETCONF traffic. A special purpose error handler is implemented in &lt;code&gt;ct_conn_log_h&lt;/code&gt;. To use this error handler, add the &lt;code&gt;cth_conn_log&lt;/code&gt; hook in the test suite, for example:</source>
          <target state="translated">NETCONFサーバーは、NETCONFトラフィックのロギングに &lt;code&gt;error_logger&lt;/code&gt; を使用します。 &lt;code&gt;ct_conn_log_h&lt;/code&gt; には、特別な目的のエラーハンドラが実装されています。このエラーハンドラーを使用するには、テストスイートに &lt;code&gt;cth_conn_log&lt;/code&gt; フックを追加します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="c4e761f6142db929d9abebfe00caf12e6df69e08" translate="yes" xml:space="preserve">
          <source>The NEXT_INSTRUCTION is a pre-bound variable that is available in all instructions. It expands to the address of the next instruction.</source>
          <target state="translated">NEXT_INSTRUCTIONは、すべての命令で利用可能なプリバウンド変数です。これは次の命令のアドレスに展開されます。</target>
        </trans-unit>
        <trans-unit id="0ee36acc539fb496464c93f96bb31d20de406968" translate="yes" xml:space="preserve">
          <source>The NEXT_INSTRUCTION pre-bound variable</source>
          <target state="translated">プリバウンド変数 NEXT_INSTRUCTION</target>
        </trans-unit>
        <trans-unit id="2d107278e1a70d51b4fdd7f40141f0fe34ee6756" translate="yes" xml:space="preserve">
          <source>The NIF library must be explicitly loaded by Erlang code in the same module.</source>
          <target state="translated">NIFライブラリは同じモジュールのErlangコードから明示的にロードされなければなりません。</target>
        </trans-unit>
        <trans-unit id="41a4ad2b0dc5ffd6f13eaa47aa861d15ed3c8d0c" translate="yes" xml:space="preserve">
          <source>The NIFs of the module are compiled and linked into a shared library. Each NIF is implemented as a normal C function. The macro &lt;code&gt;ERL_NIF_INIT&lt;/code&gt; together with an array of structures defines the names, arity, and function pointers of all the NIFs in the module. The header file &lt;code&gt;erl_nif.h&lt;/code&gt; must be included. As the library is a shared module, not a program, no main function is to be present.</source>
          <target state="translated">モジュールのNIFがコンパイルされ、共有ライブラリにリンクされます。各NIFは通常のC関数として実装されます。マクロ &lt;code&gt;ERL_NIF_INIT&lt;/code&gt; と構造体の配列は、モジュール内のすべてのNIFの名前、アリティ、および関数ポインターを定義します。ヘッダーファイル &lt;code&gt;erl_nif.h&lt;/code&gt; をインクルードする必要があります。ライブラリはプログラムではなく共有モジュールであるため、メイン関数は存在しません。</target>
        </trans-unit>
        <trans-unit id="999daf79065332e5e6572460b7e99eb5b72cdc5f" translate="yes" xml:space="preserve">
          <source>The Network Interface (Net If) process delivers SNMP PDUs to a master agent, and receives SNMP PDUs from the master agent. The most common behaviour of a Net if process is that is receives bytes from a network, decodes them into an SNMP PDU, which it sends to a master agent. When the master agent has processed the PDU, it sends a response PDU to the Net if process, which encodes the PDU into bytes and transmits the bytes onto the network.</source>
          <target state="translated">ネットワークインターフェース(Net If)プロセスは、SNMP PDUをマスターエージェントに配信し、マスターエージェントからSNMP PDUを受信します。Net if プロセスの最も一般的な動作は、ネットワークからバイトを受信し、それを SNMP PDU にデコードしてマスターエージェントに送信することです。マスターエージェントがPDUを処理すると、レスポンスPDUをNet ifプロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="36f70502604dd2333d650c0bc04a8729a4f497af" translate="yes" xml:space="preserve">
          <source>The Network Interface (Net If) process delivers SNMP PDUs to the manager server, and receives SNMP PDUs from the manager server. The most common behaviour of a Net if process is that is receives request PDU from the manager server, encodes the PDU into bytes and transmits the bytes onto the network to an agent. When the reply from the agent is received by the Net if process, which it decodes into an SNMP PDU, which it sends to the manager server.</source>
          <target state="translated">ネットワークインターフェース(Net If)プロセスは、SNMP PDUをマネージャサーバに配信し、マネージャサーバからSNMP PDUを受信します。Net ifプロセスの最も一般的な動作は、マネージャサーバから要求PDUを受信し、PDUをバイトにエンコードし、そのバイトをネットワーク上のエージェントに送信することです。エージェントからの応答を Net if プロセスが受信すると、その応答は SNMP PDU にデコードされ、マネージャサーバに送信されます。</target>
        </trans-unit>
        <trans-unit id="fd402b6f90d216badbbd85762e2a8ddff6c71c0f" translate="yes" xml:space="preserve">
          <source>The Network Interface (Net if) process delivers SNMP PDUs to a master agent, and receives SNMP PDUs from the master agent. The most common behaviour of a Net if process is that is receives bytes from a network, decodes them into an SNMP PDU, which it sends to a master agent. When the master agent has processed the PDU, it sends a response PDU to the Net if process, which encodes the PDU into bytes and transmits the bytes onto the network.</source>
          <target state="translated">ネットワークインターフェース(Net if)プロセスは、SNMP PDUをマスターエージェントに配信し、マスターエージェントからSNMP PDUを受信します。Net if プロセスの最も一般的な動作は、ネットワークからバイトを受信し、それを SNMP PDU にデコードしてマスターエージェントに送信することです。マスターエージェントがPDUを処理すると、レスポンスPDUをNet ifプロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="976e6c5625eb166a7240dd083a2239c03ac8b8ec" translate="yes" xml:space="preserve">
          <source>The Network Interface (Net if) process delivers SNMP PDUs to the manager server, and receives SNMP PDUs from the manager server. The most common behaviour of a Net if process is that is receives request PDU from the manager server, encodes the PDU into bytes and transmits the bytes onto the network to an agent. When the reply from the agent is received by the Net if process, which it decodes into an SNMP PDU, which it sends to the manager server.</source>
          <target state="translated">ネットワークインターフェース(Net if)プロセスは、SNMP PDUをマネージャサーバに配信し、マネージャサーバからSNMP PDUを受信します。Net ifプロセスの最も一般的な動作は、マネージャサーバから要求PDUを受信し、PDUをバイトにエンコードし、そのバイトをネットワーク上のエージェントに送信することです。エージェントからの応答を Net if プロセスが受信すると、その応答は SNMP PDU にデコードされ、マネージャサーバに送信されます。</target>
        </trans-unit>
        <trans-unit id="e3ad1933c4b353741e7d3dd411a4625d945e51b1" translate="yes" xml:space="preserve">
          <source>The OAM components, and some other OTP applications, define SNMP MIBs. These MIBs are written in SNMPv2 SMI syntax, as defined in RFC 1902. For convenience we also deliver the SNMPv1 SMI equivalent. All MIBs are designed to be v1/v2 compatible, that is, the v2 MIBs do not use any construct not available in v1.</source>
          <target state="translated">OAMコンポーネントと他のいくつかのOTPアプリケーションは、SNMP MIBを定義します。これらのMIBは、RFC 1902で定義されているように、SNMPv2 SMI構文で書かれています。利便性のために、SNMPv1 SMIと同等のものも提供しています。すべてのMIBはv1/v2互換であるように設計されており、v2 MIBではv1で利用できない構成を使用しません。</target>
        </trans-unit>
        <trans-unit id="6a0dd4d53e9a9b356b53c2117149daa068221b0f" translate="yes" xml:space="preserve">
          <source>The OPERAND_POSITION() macro</source>
          <target state="translated">OPERAND_POSITION()マクロ</target>
        </trans-unit>
        <trans-unit id="dfa71a1f0f4b6ee0f7da7bee6b28148c4530dbc7" translate="yes" xml:space="preserve">
          <source>The OS failed to load the NIF library.</source>
          <target state="translated">OSがNIFライブラリのロードに失敗しました。</target>
        </trans-unit>
        <trans-unit id="0c8abadcc360635740ed383e0bd4f397be705277" translate="yes" xml:space="preserve">
          <source>The OTP SSH app can be configurated by a large amount of</source>
          <target state="translated">OTP SSHアプリは、大量の</target>
        </trans-unit>
        <trans-unit id="6c43c2d0328ac7bd67f0bc31e296a2b1639ba6e7" translate="yes" xml:space="preserve">
          <source>The OTP mibs are stored in the &lt;code&gt;$OTP_ROOT/lib/otp_mibs/mibs/&lt;/code&gt; directory. They are defined in SNMPv2 SMI syntax. An SNMPv1 version of the mib is delivered in the &lt;code&gt;mibs/v1&lt;/code&gt; directory. The compiled MIB is located under &lt;code&gt;priv/mibs&lt;/code&gt;, and the generated &lt;code&gt;.hrl&lt;/code&gt; file under the &lt;code&gt;include&lt;/code&gt; directory. To compile a MIB that IMPORTS a MIB in the OTP_Mibs application, give the option &lt;code&gt;{il, [&quot;otp_mibs/priv/mibs&quot;]}&lt;/code&gt; to the MIB compiler.</source>
          <target state="translated">OTP &lt;code&gt;$OTP_ROOT/lib/otp_mibs/mibs/&lt;/code&gt; は$ OTP_ROOT / lib / otp_mibs / mibs /ディレクトリに保存されています。これらはSNMPv2 SMI構文で定義されています。 &lt;code&gt;mibs/v1&lt;/code&gt; のSNMPv1バージョンは、mibs / v1ディレクトリで提供されます。コンパイルされたMIBは &lt;code&gt;priv/mibs&lt;/code&gt; &lt;code&gt;.hrl&lt;/code&gt; 下にあり、生成された.hrlファイルは &lt;code&gt;include&lt;/code&gt; ディレクトリの下にあります。OTP_MibsアプリケーションでMIBをインポートするMIBをコンパイルするには、MIBコンパイラにオプション &lt;code&gt;{il, [&quot;otp_mibs/priv/mibs&quot;]}&lt;/code&gt; を指定します。</target>
        </trans-unit>
        <trans-unit id="ef0289a2a348b65c119233c8ade03f223f5c8802" translate="yes" xml:space="preserve">
          <source>The OTP release that the currently executing ERTS application is part of, as an integer. For details, see &lt;code&gt;erlang:system_info(otp_release)&lt;/code&gt;. This macro was introduced in OTP release 21.</source>
          <target state="translated">現在実行中のERTSアプリケーションが含まれているOTPリリース（整数）。詳細については、 &lt;code&gt;erlang:system_info(otp_release)&lt;/code&gt; を参照してください。このマクロはOTPリリース21で導入されました。</target>
        </trans-unit>
        <trans-unit id="16e1639b18798e91125ecf1f057060589779b23c" translate="yes" xml:space="preserve">
          <source>The OTP-MIB mib represents information about Erlang nodes such as node name, number of running processes, virtual machine version etc. If the MIB should be used in a system, it should be loaded into an SNMP agent by using the API function &lt;code&gt;otp_mib:load/1&lt;/code&gt;.</source>
          <target state="translated">OTP-MIB mibは、ノード名、実行中のプロセスの数、仮想マシンのバージョンなど、Erlangノードに関する情報を表します &lt;code&gt;otp_mib:load/1&lt;/code&gt; をシステムで使用する必要がある場合は、API関数otp_mibを使用してSNMPエージェントにロードする必要があります。 load / 1。</target>
        </trans-unit>
        <trans-unit id="1d079c6127c093fd0bf885dc8ec3e524eee2389b" translate="yes" xml:space="preserve">
          <source>The OTP-REG mib defines the unique OTP subtree of object identifiers under the Ericsson subtree. Under the OTP subtree several object identifiers are defined. This module is typically included by OTP applications defining their own mibs, or ASN.1 modules in general, that require unique object identifiers under the OTP subtree.</source>
          <target state="translated">OTP-REG mib は、Ericsson サブツリーの下にあるオブジェクト識別子の固有の OTP サブツリーを定義します。OTP サブツリーの下には、いくつかのオブジェクト識別子が定義されています。このモジュールは通常、独自の mib を定義する OTP アプリケーションや、一般的に ASN.1 モジュールに含まれ、OTP サブツリーの下で一意のオブジェクト識別子を必要とする場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="7e4e2e6abc0df4b67e259520ad92410685d1db8d" translate="yes" xml:space="preserve">
          <source>The OTP-SNMPEA-MIB was used in earlier versions of the agent, before standard MIBs existed for access control, MIB views, and trap target specification. All objects in this MIB are now obsolete.</source>
          <target state="translated">OTP-SNMPEA-MIBは、アクセス制御、MIBビュー、およびトラップターゲット指定のための標準MIBが存在する前の、エージェントの以前のバージョンで使用されていました。このMIB内のすべてのオブジェクトは現在では廃止されています。</target>
        </trans-unit>
        <trans-unit id="dfdf456ec73d4195574c470386dbc5ef95b5e4be" translate="yes" xml:space="preserve">
          <source>The OTP-TC mib provides the textual convention datatype &lt;code&gt;OwnerString&lt;/code&gt;.</source>
          <target state="translated">OTP-TC mibは、テキスト表記のデータ型 &lt;code&gt;OwnerString&lt;/code&gt; を提供します。</target>
        </trans-unit>
        <trans-unit id="bdfd28142322083a6af658ff0e91ac0a22fe94e4" translate="yes" xml:space="preserve">
          <source>The OTP/SSH application first calls this function in the callback module, and then the old &lt;code&gt;Module:add_host_key/3&lt;/code&gt; for compatibilty.</source>
          <target state="translated">OTP / SSHアプリケーションは、最初にコールバックモジュールでこの関数を呼び出し、次に互換性のために古い &lt;code&gt;Module:add_host_key/3&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="22c83f8d2349d1be9c18b485bc1cd6600dd20f64" translate="yes" xml:space="preserve">
          <source>The OTP/SSH application first calls this function in the callback module, and then the old &lt;code&gt;Module:is_host_key/4&lt;/code&gt; for compatibilty.</source>
          <target state="translated">OTP / SSHアプリケーションは、最初にコールバックモジュールでこの関数を呼び出し、次に互換性のために古い &lt;code&gt;Module:is_host_key/4&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="370c0fa4230350b45a2bed8b159298418299327c" translate="yes" xml:space="preserve">
          <source>The Observer application is a container including the following tools for tracing and investigation of distributed systems:</source>
          <target state="translated">Observerアプリケーションは、分散システムのトレースや調査のための以下のツールを含むコンテナです。</target>
        </trans-unit>
        <trans-unit id="e53532ab978b0a1e5f72db0836d60dcb2627de7d" translate="yes" xml:space="preserve">
          <source>The Observer application is available on the trace control node.</source>
          <target state="translated">Observer アプリケーションはトレース制御ノードで利用できます。</target>
        </trans-unit>
        <trans-unit id="acca74abfba6c1293f4de6924079a0d77446f3db" translate="yes" xml:space="preserve">
          <source>The Observer application might not always be available on the node to be traced (in the following called the &quot;traced node&quot;). However, Trace Tool Builder can still be run from another node (in the following called the &quot;trace control node&quot;) as long as the following is fulfilled:</source>
          <target state="translated">Observerアプリケーションは、トレースするノード(以下では「トレースされたノード」と呼ぶ)上で利用できるとは限りません。しかし、トレースツールビルダは、以下の条件を満たしていれば、別のノード(以下では「トレース制御ノード」と呼ぶ)からでも実行することができます。</target>
        </trans-unit>
        <trans-unit id="40509725b1b94ac04bace7fdcf93e38e06d1990b" translate="yes" xml:space="preserve">
          <source>The Operation and Maintenance (OAM) support in OTP consists of a generic model for management subsystems in OTP, and some components to be used in these subsystems. This section describes the model.</source>
          <target state="translated">OTPにおけるOAM(Operation and Maintenance)サポートは、OTPにおける管理サブシステムの汎用モデルと、これらのサブシステムで使用されるいくつかのコンポーネントから構成されています。ここでは、このモデルについて説明する。</target>
        </trans-unit>
        <trans-unit id="808ca5db0eed6b5828cf7aea959f1c6d4f421b35" translate="yes" xml:space="preserve">
          <source>The P flag has been deprecated by RFC 6733.</source>
          <target state="translated">PフラグはRFC 6733で非推奨とされています。</target>
        </trans-unit>
        <trans-unit id="521a731b4b96b784ec12d6942621ae176f880a6a" translate="yes" xml:space="preserve">
          <source>The PCRE library sets a limit on how many times the internal match function can be called. Defaults to 10,000,000 in the library compiled for Erlang. If &lt;code&gt;{error, match_limit}&lt;/code&gt; is returned, the execution of the regular expression has reached this limit. This is normally to be regarded as a &lt;code&gt;nomatch&lt;/code&gt;, which is the default return value when this occurs, but by specifying &lt;code&gt;report_errors&lt;/code&gt;, you are informed when the match fails because of too many internal calls.</source>
          <target state="translated">PCREライブラリは、内部照合関数を呼び出すことができる回数に制限を設定します。Erlang用にコンパイルされたライブラリのデフォルトは10,000,000です。場合 &lt;code&gt;{error, match_limit}&lt;/code&gt; 返され、正規表現の実行は、この制限に達しています。これは通常、 &lt;code&gt;nomatch&lt;/code&gt; と見なされます。これは、これが発生したときのデフォルトの戻り値ですが、 &lt;code&gt;report_errors&lt;/code&gt; を指定することにより、内部呼び出しが多すぎるために一致が失敗したときに通知されます。</target>
        </trans-unit>
        <trans-unit id="315aa4b073a3e51b4182d67ae5a99c3e8dd60122" translate="yes" xml:space="preserve">
          <source>The PCRE-specific options &lt;code&gt;dupnames&lt;/code&gt;, &lt;code&gt;ungreedy&lt;/code&gt;, and &lt;code&gt;extra&lt;/code&gt; can be changed in the same way as the Perl-compatible options by using the characters J, U, and X respectively.</source>
          <target state="translated">PCRE固有のオプション &lt;code&gt;dupnames&lt;/code&gt; 、 &lt;code&gt;ungreedy&lt;/code&gt; 、および &lt;code&gt;extra&lt;/code&gt; は、J、U、およびXの文字をそれぞれ使用して、Perl互換のオプションと同じ方法で変更できます。</target>
        </trans-unit>
        <trans-unit id="3b60700ebcda31fdb446fa71f372ef2af6d7bcce" translate="yes" xml:space="preserve">
          <source>The PLT is built using option &lt;code&gt;--build_plt&lt;/code&gt; to Dialyzer. The following command builds the recommended minimal PLT for Erlang/OTP:</source>
          <target state="translated">PLTは、Dialyzerのオプション &lt;code&gt;--build_plt&lt;/code&gt; を使用してビルドされます。次のコマンドは、Erlang / OTPに推奨される最小限のPLTを構築します。</target>
        </trans-unit>
        <trans-unit id="068bb5f6b3073467febaec97d8dca8e259a70b70" translate="yes" xml:space="preserve">
          <source>The PLT is extended to also include the files specified with &lt;code&gt;-c&lt;/code&gt; and &lt;code&gt;-r&lt;/code&gt;. Use &lt;code&gt;--plt&lt;/code&gt; to specify which PLT to start from, and &lt;code&gt;--output_plt&lt;/code&gt; to specify where to put the PLT. Notice that the analysis possibly can include files from the PLT if they depend on the new files. This option only works for BEAM files.</source>
          <target state="translated">PLTが拡張され、 &lt;code&gt;-c&lt;/code&gt; および &lt;code&gt;-r&lt;/code&gt; で指定されたファイルも含まれるようになりました。使用は &lt;code&gt;--plt&lt;/code&gt; から始める、とするためにどのPLT指定する &lt;code&gt;--output_plt&lt;/code&gt; どこPLTを入れて指定します。新しいファイルに依存している場合、分析にPLTのファイルが含まれる可能性があることに注意してください。このオプションは、BEAMファイルに対してのみ機能します。</target>
        </trans-unit>
        <trans-unit id="060b8280a8288371c7c464debf7423fb50d4cb7c" translate="yes" xml:space="preserve">
          <source>The POSIX error codes are mostly come from the OS level socket interface, but this module may generate some appropriate POSIX codes.</source>
          <target state="translated">POSIXエラーコードはほとんどがOSレベルのソケットインターフェースからのものですが、このモジュールはいくつかの適切なPOSIXコードを生成することができます。</target>
        </trans-unit>
        <trans-unit id="a5ac14853a9b086e8f452912a23bfe90221af508" translate="yes" xml:space="preserve">
          <source>The Perl documentation states that it is probably useful only when combined with (?{}) or (??{}). Those are Perl features that are not present in PCRE.</source>
          <target state="translated">Perlのドキュメントには、(?{})や(? これらはPCREにはないPerlの機能です。</target>
        </trans-unit>
        <trans-unit id="7305fc245a21d67edcfb1e7040ab9604b3ab8839" translate="yes" xml:space="preserve">
          <source>The Port number of the Host.</source>
          <target state="translated">ホストのポート番号。</target>
        </trans-unit>
        <trans-unit id="2d7076aca020633109c1bf0af701628b144f387d" translate="yes" xml:space="preserve">
          <source>The Port number of the host.</source>
          <target state="translated">ホストのポート番号です。</target>
        </trans-unit>
        <trans-unit id="05f38ed5f44cf6a58fcb55ac9b9ba9cb03970efa" translate="yes" xml:space="preserve">
          <source>The ProtocolVersion version is the version actually encoded in the reply message.</source>
          <target state="translated">ProtocolVersionバージョンは、返信メッセージで実際にエンコードされたバージョンです。</target>
        </trans-unit>
        <trans-unit id="544a356532db2cd2759e24c6723c4194d33f11f5" translate="yes" xml:space="preserve">
          <source>The Public Key application deals with public-key related file formats, digital signatures, and &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5280.txt&quot;&gt; X-509 certificates&lt;/a&gt;&lt;/code&gt;. It is a library application that provides encode/decode, sign/verify, encrypt/decrypt, and similar functionality. It does not read or write files, it expects or returns file contents or partial file contents as binaries.</source>
          <target state="translated">公開鍵アプリケーションは、公開鍵関連のファイル形式、デジタル署名、および &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5280.txt&quot;&gt; X-509 certificates&lt;/a&gt;&lt;/code&gt; 扱います。これは、エンコード/デコード、署名/検証、暗号化/復号化などの機能を提供するライブラリアプリケーションです。ファイルの読み取りや書き込みは行わず、ファイルの内容または部分的なファイルの内容をバイナリとして予期または返します。</target>
        </trans-unit>
        <trans-unit id="7ebdf434e84c8ed49f35713ff4853c27de0d8e82" translate="yes" xml:space="preserve">
          <source>The Public Key decode- and encode-functions try to use the NIFs in the ASN.1 compilers runtime modules, if they can be found. Thus, to have the ASN1 application in the path of your system gives the best performance.</source>
          <target state="translated">公開鍵のデコードおよびエンコード関数は、ASN.1コンパイラのランタイムモジュールにあるNIFを使用しようとします。このように、ASN1アプリケーションをシステムのパスに置くことが、最高のパフォーマンスを提供します。</target>
        </trans-unit>
        <trans-unit id="efe14f45b872852caa29e8e8cc7c7d6e2482faaf" translate="yes" xml:space="preserve">
          <source>The RFC 3539 watchdog state machine has transitioned into (&lt;code&gt;up&lt;/code&gt;) or out of (&lt;code&gt;down&lt;/code&gt;) the OKAY state. If a &lt;code&gt;#diameter_packet{}&lt;/code&gt; is present in an &lt;code&gt;up&lt;/code&gt; event then there has been a capabilities exchange on a newly established transport connection and the record contains the received CER or CEA.</source>
          <target state="translated">RFC 3539ウォッチドッグステートマシンがOKAY状態に移行（ &lt;code&gt;up&lt;/code&gt; ）または終了（ &lt;code&gt;down&lt;/code&gt; ）しました。場合 &lt;code&gt;#diameter_packet{}&lt;/code&gt; 内に存在する &lt;code&gt;up&lt;/code&gt; イベント次いで能力があった新たに確立されたトランスポート接続上で交換し、レコードは、受信したCERまたはCEAを含有します。</target>
        </trans-unit>
        <trans-unit id="dc64b0c1b30970fb85a8fe63a3336e6b7a09937b" translate="yes" xml:space="preserve">
          <source>The RFC 3539 watchdog timer. An integer value is interpreted as the RFC's TwInit in milliseconds, a jitter of &amp;plusmn; 2 seconds being added at each rearming of the timer to compute the RFC's Tw. An MFA is expected to return the RFC's Tw directly, with jitter applied, allowing the jitter calculation to be performed by the callback.</source>
          <target state="translated">RFC 3539ウォッチドッグタイマー。整数値は、ミリ秒単位のRFCのTwInitとして解釈されます。RFCのTwを計算するために、タイマーを再設定するたびに&amp;plusmn;2秒のジッタが追加されます。 MFAはジッターが適用された状態でRFCのTwを直接返すことが期待されており、コールバックによってジッター計算を実行できます。</target>
        </trans-unit>
        <trans-unit id="fcc9e80a4124e3a42a057c7e5dbba54abf671c72" translate="yes" xml:space="preserve">
          <source>The RFC states that if a certificate defines Reference IDs in a &lt;code&gt;Subject Alternate Name&lt;/code&gt; field, the &lt;code&gt;Subject&lt;/code&gt; field MUST NOT be used for host name checking, even if it contains valid CN names. Therefore only &lt;code&gt;kb.example.org&lt;/code&gt; and &lt;code&gt;https://www.example.org&lt;/code&gt; matches. The match fails both for &lt;code&gt;example.com&lt;/code&gt; and &lt;code&gt;foo.example.com&lt;/code&gt; becuase they are in the &lt;code&gt;Subject&lt;/code&gt; field which is not checked because the &lt;code&gt;Subject Alternate Name&lt;/code&gt; field is present.</source>
          <target state="translated">RFCは、証明書が &lt;code&gt;Subject Alternate Name&lt;/code&gt; フィールドで参照IDを定義する場合、有効なCN名が含まれている場合でも、 &lt;code&gt;Subject&lt;/code&gt; フィールドをホスト名チェックに使用してはならないことを述べています。したがって、 &lt;code&gt;kb.example.org&lt;/code&gt; と &lt;code&gt;https://www.example.org&lt;/code&gt; のみが一致します。試合は両方のために失敗し &lt;code&gt;example.com&lt;/code&gt; と &lt;code&gt;foo.example.com&lt;/code&gt; becuase彼らがしている &lt;code&gt;Subject&lt;/code&gt; ので、チェックされていないフィールド &lt;code&gt;Subject Alternate Name&lt;/code&gt; フィールドが存在しています。</target>
        </trans-unit>
        <trans-unit id="e204403937648bc97742bc221c74abef96cbe2ca" translate="yes" xml:space="preserve">
          <source>The RSA options are experimental.</source>
          <target state="translated">RSAオプションは実験的なものです。</target>
        </trans-unit>
        <trans-unit id="8707a6b8a6bbf5e67f47a831acd5b638d6ca82c3" translate="yes" xml:space="preserve">
          <source>The Report Browser (RB) tool is used to browse and format error reports written by the error logger handler &lt;code&gt;log_mf_h&lt;/code&gt; in STDLIB.</source>
          <target state="translated">Report Browser（RB）ツールは、STDLIBのエラーロガーハンドラー &lt;code&gt;log_mf_h&lt;/code&gt; によって書き込まれたエラーレポートを参照およびフォーマットするために使用されます。</target>
        </trans-unit>
        <trans-unit id="e200f59605a43a83406a6a1c3aae57938231fe10" translate="yes" xml:space="preserve">
          <source>The Report Browser Tool</source>
          <target state="translated">レポートブラウザツール</target>
        </trans-unit>
        <trans-unit id="4692a2cbc9da1318b1c32468112fcf231936c7b1" translate="yes" xml:space="preserve">
          <source>The Runtime_Tools application is available on both the trace control node and the traced node.</source>
          <target state="translated">Runtime_Toolsアプリケーションは、トレース制御ノードとトレースされたノードの両方で利用できます。</target>
        </trans-unit>
        <trans-unit id="3e6f6adc881738e4e882b8995898a6ee34ae6866" translate="yes" xml:space="preserve">
          <source>The SASL application introduces three types of reports:</source>
          <target state="translated">SASLアプリケーションでは、3種類のレポートを紹介しています。</target>
        </trans-unit>
        <trans-unit id="a66565cf9194d0ac12d200f8341003bfd8ef9840" translate="yes" xml:space="preserve">
          <source>The SASL application provides support for:</source>
          <target state="translated">SASLアプリケーションはサポートを提供しています。</target>
        </trans-unit>
        <trans-unit id="d6eac0a2617b8363f4e9ff21a3e5cf89ae6de35c" translate="yes" xml:space="preserve">
          <source>The SASL error logging concept described in this section is deprecated since Erlang/OTP 21.0, when the new &lt;code&gt;logging API&lt;/code&gt; was introduced.</source>
          <target state="translated">このセクションで説明されているSASLエラーロギングの概念は、新しい &lt;code&gt;logging API&lt;/code&gt; が導入されたErlang / OTP 21.0以降では使用されていません。</target>
        </trans-unit>
        <trans-unit id="06f440d4cdd560b9a71ad7c9c8906b6fd30020a0" translate="yes" xml:space="preserve">
          <source>The SAX events that are sent to the user via the callback.</source>
          <target state="translated">コールバックを介してユーザーに送信される SAX イベント。</target>
        </trans-unit>
        <trans-unit id="6c62591fcbde98f13b883726ae2b16d26e6fd6e4" translate="yes" xml:space="preserve">
          <source>The SMP emulator (introduced in R11B) takes advantage of a multi-core or multi-CPU computer by running several Erlang scheduler threads (typically, the same as the number of cores). Each scheduler thread schedules Erlang processes in the same way as the Erlang scheduler in the non-SMP emulator.</source>
          <target state="translated">SMPエミュレータ(R11Bで導入)はマルチコアやマルチCPUのコンピュータを利用して、複数のErlangスケジューラースレッド(通常はコア数と同じ)を実行します。各スケジューラスレッドは非SMPエミュレータのErlangスケジューラと同じ方法でErlangプロセスをスケジュールします。</target>
        </trans-unit>
        <trans-unit id="886a9eb3b2cede92a51b83a792de6e157b89118c" translate="yes" xml:space="preserve">
          <source>The SNMP agent system consists of one Master Agent and optional Sub-agents.</source>
          <target state="translated">SNMPエージェントシステムは、1つのマスターエージェントとオプションのサブエージェントで構成されています。</target>
        </trans-unit>
        <trans-unit id="7abe087b7edee22ce1a0361250a19799bdfe6153" translate="yes" xml:space="preserve">
          <source>The SNMP agent system consists of one Master Agent and optional sub-agents. The Master Agent can be seen as a special kind of sub-agent. It implements the core agent functionality, UDP packet processing, type checking, access control, trap distribution, and so on. From a user perspective, it is used as an ordinary sub-agent.</source>
          <target state="translated">SNMPエージェントシステムは、1つのマスターエージェントとオプションのサブエージェントで構成されています。マスターエージェントは、特別な種類のサブエージェントと見ることができます。マスターエージェントは、エージェントのコア機能であるUDPパケット処理、タイプチェック、アクセス制御、トラップ配信などを実装しています。ユーザーから見れば、通常のサブエージェントとして使用されます。</target>
        </trans-unit>
        <trans-unit id="3265cc19f00c49d8349eff44b143ef435848cde4" translate="yes" xml:space="preserve">
          <source>The SNMP agent toolkit gets input from three different sources:</source>
          <target state="translated">SNMPエージェントツールキットは、3つの異なるソースからの入力を取得します。</target>
        </trans-unit>
        <trans-unit id="516cef785b21f525314dd4769fb5d4a3d8e52b36" translate="yes" xml:space="preserve">
          <source>The SNMP application consists of several entities, of which the agent is one. This function starts the agent entity of the application.</source>
          <target state="translated">SNMP アプリケーションは複数のエンティティで構成されており、そのうちの一つがエージェントです。本関数は、アプリケーションのエージェントエンティティを起動します。</target>
        </trans-unit>
        <trans-unit id="5a5e7e85ae81bf01406a4eba00ac814b17f5f063" translate="yes" xml:space="preserve">
          <source>The SNMP application consists of several entities, of which the manager is one. This function starts the manager entity of the application.</source>
          <target state="translated">SNMP アプリケーションは複数のエンティティで構成されており、そのうちの 1 つがマネージャです。この関数は、アプリケーションのマネージャエンティティを起動します。</target>
        </trans-unit>
        <trans-unit id="1c525a15cd833eca106834a5297df8dd9f3d8e99" translate="yes" xml:space="preserve">
          <source>The SNMP application should be used to start an SNMP agent. Then the API functions below can be used to load/unload the OTP-MIB into/from the agent. The instrumentation of the OTP-MIB uses Mnesia, hence Mnesia must be started prior to loading the OTP-MIB.</source>
          <target state="translated">SNMPエージェントを起動するには、SNMPアプリケーションを使用する必要があります。その後、以下のAPI関数を使用して、エージェントへのOTP-MIBのロード/アンロードを行います。OTP-MIBのインストルメンテーションはMnesiaを使用しているため、OTP-MIBをロードする前にMnesiaを起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="efcaf71f311ac8ed0a4c853a395724aa7b68ecca" translate="yes" xml:space="preserve">
          <source>The SNMP built-in database</source>
          <target state="translated">SNMP組み込みデータベース</target>
        </trans-unit>
        <trans-unit id="1f9b4daeb0c18439d5ab9d3febb86ba8cf3f41bc" translate="yes" xml:space="preserve">
          <source>The SNMP development tool provides an environment for rapid agent/manager prototyping and construction. With the following information provided, this tool is used to set up a running multi-lingual SNMP agent/manager:</source>
          <target state="translated">SNMP開発ツールは、迅速なエージェント/マネージャのプロトタイピングと構築のための環境を提供します。以下の情報を提供し、このツールを使用して、実行中の多言語SNMPエージェント/マネージャを設定します。</target>
        </trans-unit>
        <trans-unit id="4042139e11f084c5315473eee5bae69ee58a652c" translate="yes" xml:space="preserve">
          <source>The SNMP development toolkit contains the following parts:</source>
          <target state="translated">SNMP開発ツールキットには、以下の部分が含まれています。</target>
        </trans-unit>
        <trans-unit id="c676c0d7043a8420fb555224be79bdf5a57f0b38" translate="yes" xml:space="preserve">
          <source>The SNMP development toolkit works with all three versions of Standard Internet Management Framework; SNMPv1, SNMPv2 and SNMPv3. They all share the same basic structure and components. And they follow the same architecture.</source>
          <target state="translated">SNMP開発ツールキットは、SNMPv1、SNMPv2、SNMPv3の3つのバージョンすべてで動作します。これらはすべて同じ基本構造とコンポーネントを共有しています。また、同じアーキテクチャに従っています。</target>
        </trans-unit>
        <trans-unit id="4c98874c0a92d51a9659461230a55d2c1a730338" translate="yes" xml:space="preserve">
          <source>The SNMP-COMMUNITY-MIB defines managed objects that is used for coexistence between SNMPv1 and SNMPv2c with SNMPv3. Specifically, it contains objects for mapping between community strings and version-independent SNMP message parameters. In addition, this MIB provides a mechanism for performing source address validation on incoming requests, and for selecting community strings based on target addresses for outgoing notifications.</source>
          <target state="translated">SNMP-COMMUNITY-MIBは、SNMPv1、SNMPv2cとSNMPv3を共存させるための管理オブジェクトを定義しています。具体的には、コミュニティ文字列とバージョンに依存しないSNMPメッセージパラメータをマッピングするためのオブジェクトが含まれています。また、本MIBは、受信要求に対して送信元アドレスの検証を行い、発信通知の対象アドレスに基づいてコミュニティ文字列を選択するための仕組みを提供します。</target>
        </trans-unit>
        <trans-unit id="8668c117c3657ad50b4bac1040aadc9d90558e41" translate="yes" xml:space="preserve">
          <source>The SNMP-FRAMEWORK-MIB and SNMP-MPD-MIB define additional read-only managed objects, which is used in the generic SNMP framework defined in RFC2271 and the generic message processing and dispatching module defined in RFC2272. They are generic in the sense that they are not tied to any specific SNMP version.</source>
          <target state="translated">SNMP-FRAMEWORK-MIBおよびSNMP-MPD-MIBは、RFC2271で定義されている汎用SNMPフレームワークおよびRFC2272で定義されている汎用メッセージ処理およびディスパッチモジュールで使用される、追加の読み取り専用管理オブジェクトを定義します。これらは、特定のSNMPバージョンに縛られないという意味で汎用的なものです。</target>
        </trans-unit>
        <trans-unit id="45b5b2d3e04821e69bc6b70c4958af997f02dac7" translate="yes" xml:space="preserve">
          <source>The SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB define managed objects for configuration of notification receivers. They are described in detail in RFC2273. Only a brief description is given here.</source>
          <target state="translated">SNMP-TARGET-MIBおよびSNMP-NOTIFICATION-MIBは、通知受信機の設定のための管理オブジェクトを定義する。これらはRFC2273で詳細に記述されています。ここでは簡単な説明のみを行う。</target>
        </trans-unit>
        <trans-unit id="9d8ba60d5c67646e6a39ec77ff47623898401ff5" translate="yes" xml:space="preserve">
          <source>The SNMP-USER-BASED-SM-MIB defines managed objects that is used for the User-Based Security Model.</source>
          <target state="translated">SNMP-USER-BASED-SM-MIBは、ユーザベースセキュリティモデルで使用される管理オブジェクトを定義します。</target>
        </trans-unit>
        <trans-unit id="06a4a7a167128e9dfbd7bbf5787fec903cb71f3c" translate="yes" xml:space="preserve">
          <source>The SNMP-VIEW-BASED-ACM-MIB defines managed objects to control access to the the managed objects for the managers. The View Based Access Control Module (VACM) can be used with any SNMP version. However, if it is used with SNMPv1 or SNMPv2c, the SNMP-COMMUNITY-MIB defines additional objects to map community strings to VACM parameters.</source>
          <target state="translated">SNMP-VIEW-BASED-ACMIBは、管理者が管理対象オブジェクトへのアクセスを制御するための管理対象オブジェクトを定義します。ビューベースアクセス制御モジュール(VACM)は、どのSNMPバージョンでも使用することができます。ただし、SNMPv1またはSNMPv2cで使用する場合、SNMP-COMMUNITY-MIBは、コミュニティ文字列をVACMパラメータにマッピングするための追加オブジェクトを定義します。</target>
        </trans-unit>
        <trans-unit id="cf1237e4f8f3b9ace0c3f4bf9ded6dcb4f4634bb" translate="yes" xml:space="preserve">
          <source>The SNMPv3 specifications take a modular approach to SNMP. All modules are separated from each other, and can be extended or replaced individually. Examples of modules are Message definition, Security and Access Control. The main features of SNMPv3 are:</source>
          <target state="translated">SNMPv3仕様は、SNMPにモジュラーアプローチを採用しています。すべてのモジュールは互いに分離されており、個別に拡張または置換することができます。モジュールの例としては、メッセージ定義、セキュリティ、アクセス制御があります。SNMPv3の主な機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="49091ee8eff63f8735f82d85f410f0e974abd772" translate="yes" xml:space="preserve">
          <source>The SSH Authentication Protocol is a general-purpose user authentication protocol run over the SSH Transport Layer Protocol. The &lt;code&gt;ssh&lt;/code&gt; application supports user authentication as follows:</source>
          <target state="translated">SSH認証プロトコルは、SSHトランスポート層プロトコル上で実行される汎用ユーザー認証プロトコルです。 &lt;code&gt;ssh&lt;/code&gt; 次のようにアプリケーションがユーザ認証をサポートしています。</target>
        </trans-unit>
        <trans-unit id="7b0b1cec477594d6b882874c149d3fa88e25a3ad" translate="yes" xml:space="preserve">
          <source>The SSH Connection Protocol provides application-support services over the transport pipe, for example, channel multiplexing, flow control, remote program execution, signal propagation, and connection forwarding. Functions for handling the SSH Connection Protocol can be found in the module &lt;code&gt;&lt;a href=&quot;ssh_connection&quot;&gt;ssh_connection&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;ssh&lt;/code&gt;.</source>
          <target state="translated">SSH接続プロトコルは、チャネルの多重化、フロー制御、リモートプログラムの実行、信号の伝播、接続の転送など、トランスポートパイプを介したアプリケーションサポートサービスを提供します。SSH接続プロトコルを処理するための関数は、 &lt;code&gt;ssh&lt;/code&gt; のモジュール &lt;code&gt;&lt;a href=&quot;ssh_connection&quot;&gt;ssh_connection&lt;/a&gt;&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="509aa3afb50ca256dde1f08abd1d170febe86fc9" translate="yes" xml:space="preserve">
          <source>The SSH Transport Protocol is a secure, low-level transport. It provides strong encryption, cryptographic host authentication, and integrity protection. A minimum of Message Authentication Code (MAC) and encryption algorithms are supported. For details, see the &lt;code&gt;&lt;a href=&quot;ssh&quot;&gt;ssh(3)&lt;/a&gt;&lt;/code&gt; manual page in &lt;code&gt;ssh&lt;/code&gt;.</source>
          <target state="translated">SSHトランスポートプロトコルは、安全な低レベルのトランスポートです。強力な暗号化、暗号ホスト認証、および整合性保護を提供します。最小のメッセージ認証コード（MAC）と暗号化アルゴリズムがサポートされています。詳細については、 &lt;code&gt;&lt;a href=&quot;ssh&quot;&gt;ssh(3)&lt;/a&gt;&lt;/code&gt; でのマニュアルページ &lt;code&gt;ssh&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="744c82a62e8aa358bae0f2bd9bcd0a7ad67c79e1" translate="yes" xml:space="preserve">
          <source>The SSH app's mechanism</source>
          <target state="translated">SSHアプリの仕組み</target>
        </trans-unit>
        <trans-unit id="6cafe9a62d6f03f5d4b28fc5be0a442441723104" translate="yes" xml:space="preserve">
          <source>The SSH protocol therefore has a special operation defined -</source>
          <target state="translated">したがって、SSH プロトコルには特別な操作が定義されています。</target>
        </trans-unit>
        <trans-unit id="fbf96a70f08f9bc454fcd92af00d3c4835a1fd09" translate="yes" xml:space="preserve">
          <source>The SSH server on UNIX/Linux/etc after a succesful authentication</source>
          <target state="translated">認証に成功した後のUNIX/Linux/etc上のSSHサーバ</target>
        </trans-unit>
        <trans-unit id="24d33b22db4cc904f86f4d5db9025bf058eaf503" translate="yes" xml:space="preserve">
          <source>The SSL/TLS distribution options can be written into a file that is consulted when the node is started. This file name is then specified with the command line argument &lt;code&gt;-ssl_dist_optfile&lt;/code&gt;.</source>
          <target state="translated">SSL / TLS配布オプションは、ノードの起動時に参照されるファイルに書き込むことができます。このファイル名は、コマンドライン引数 &lt;code&gt;-ssl_dist_optfile&lt;/code&gt; で指定されます。</target>
        </trans-unit>
        <trans-unit id="a2ffdfd10003f355a79033be2fe1f79f1e9e6854" translate="yes" xml:space="preserve">
          <source>The Solaris (SunOS 5.x) messages are retrieved from the syslog daemon, &lt;code&gt;syslogd&lt;/code&gt;.</source>
          <target state="translated">Solaris（SunOS 5.x）メッセージは、syslogデーモン &lt;code&gt;syslogd&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="555d2ccf08ac60c2e06799bc61b70df2c88b6a2f" translate="yes" xml:space="preserve">
          <source>The Solaris (SunOS 5.x) messages are retrieved from the syslog-daemon, &lt;code&gt;syslogd&lt;/code&gt;.</source>
          <target state="translated">Solaris（SunOS 5.x）メッセージは、syslog-daemon、 &lt;code&gt;syslogd&lt;/code&gt; から取得されます。</target>
        </trans-unit>
        <trans-unit id="23097a6cf28465a184806bf15474a12dff162d12" translate="yes" xml:space="preserve">
          <source>The Standard Erlang Libraries application, &lt;strong&gt;STDLIB&lt;/strong&gt;, is mandatory in the sense that the minimal system based on Erlang/OTP consists of &lt;strong&gt;STDLIB&lt;/strong&gt; and &lt;strong&gt;Kernel&lt;/strong&gt;.</source>
          <target state="translated">標準のErlangライブラリアプリケーションである&lt;strong&gt;STDLIBは&lt;/strong&gt;、Erlang / OTPに基づく最小限のシステムが&lt;strong&gt;STDLIB&lt;/strong&gt;と&lt;strong&gt;Kernelで&lt;/strong&gt;構成されるという意味で必須です。</target>
        </trans-unit>
        <trans-unit id="5c2a74e481bb59b29d7198edb8d96d6f22f60622" translate="yes" xml:space="preserve">
          <source>The System Under Test (SUT) can consist of one or more target nodes. &lt;code&gt;Common Test&lt;/code&gt; contains a generic test server that, together with other test utilities, is used to perform test case execution. The tests can be started from a GUI, from the OS shell, or from an Erlang shell. &lt;strong&gt;Test suites&lt;/strong&gt; are files (Erlang modules) that contain the &lt;strong&gt;test cases&lt;/strong&gt; (Erlang functions) to be executed. &lt;strong&gt;Support modules&lt;/strong&gt; provide functions that the test cases use to do the tests.</source>
          <target state="translated">テスト対象システム（SUT）は、1つ以上のターゲットノードで構成できます。 &lt;code&gt;Common Test&lt;/code&gt; には、他のテストユーティリティと共に、テストケースの実行に使用される汎用テストサーバーが含まれています。テストは、GUI、OSシェル、またはErlangシェルから開始できます。&lt;strong&gt;テストスイート&lt;/strong&gt;は、実行される&lt;strong&gt;テストケース&lt;/strong&gt;（Erlang関数）を含むファイル（Erlangモジュール）です。&lt;strong&gt;サポートモジュール&lt;/strong&gt;は、テストケースがテストを実行するために使用する機能を提供します。</target>
        </trans-unit>
        <trans-unit id="eb87875630edf563277392030eee430765ee9a3b" translate="yes" xml:space="preserve">
          <source>The TCP/IP &lt;code&gt;epmd&lt;/code&gt; daemon only keeps track of the &lt;code&gt;Name&lt;/code&gt; (first) part of an Erlang node name. The &lt;code&gt;Host&lt;/code&gt; part (whatever is after the &lt;code&gt;@&lt;/code&gt;) is implicit in the node name where the &lt;code&gt;epmd&lt;/code&gt; daemon was contacted, as is the IP address where the Erlang node can be reached. Consistent and correct TCP naming services are therefore required for an Erlang network to function correctly.</source>
          <target state="translated">TCP / IP &lt;code&gt;epmd&lt;/code&gt; デーモンは、Erlangノード名の &lt;code&gt;Name&lt;/code&gt; （最初）の部分のみを追跡します。 &lt;code&gt;Host&lt;/code&gt; 部分は、（後にあるものは何でも &lt;code&gt;@&lt;/code&gt; ）ノード名に内在する &lt;code&gt;epmd&lt;/code&gt; Erlangのノードに到達できるIPアドレスであるとしてデーモンが、接触させました。したがって、Erlangネットワークが正しく機能するには、一貫性のある正しいTCPネームサービスが必要です。</target>
        </trans-unit>
        <trans-unit id="058df102c079061352735c937be80bdb1a45818f" translate="yes" xml:space="preserve">
          <source>The TCP/IP distribution uses a handshake that expects a connection-based protocol, that is, the protocol does not include any authentication after the handshake procedure.</source>
          <target state="translated">TCP/IP ディストリビューションでは、接続ベースのプロトコルを期待したハンドシェイク、つまりハンドシェイク手順後の認証を含まないプロトコルを使用しています。</target>
        </trans-unit>
        <trans-unit id="6657b1618f0a92c332d5f9a74326d92f2550bf02" translate="yes" xml:space="preserve">
          <source>The TCP_NODELAY option for the telnet socket is disabled (set to &lt;code&gt;false&lt;/code&gt;) per default</source>
          <target state="translated">デフォルトでは、telnetソケットのTCP_NODELAYオプションは無効になっています（ &lt;code&gt;false&lt;/code&gt; に設定されています）。</target>
        </trans-unit>
        <trans-unit id="27af0d178d9d81560da76e1bb5028c47f5e6d47a" translate="yes" xml:space="preserve">
          <source>The TFTP port where the daemon listens. Defaults is the standardized number 69. On the server side, it can sometimes make sense to set it to 0, meaning that the daemon just picks a free port (which one is returned by function &lt;code&gt;info/1&lt;/code&gt;).</source>
          <target state="translated">デーモンが待機するTFTPポート。デフォルトは標準化された番号69です。サーバー側では、0に設定すると意味がある場合があります。これは、デーモンが空きポート（関数 &lt;code&gt;info/1&lt;/code&gt; によって返されるポート）のみを選択することを意味します。</target>
        </trans-unit>
        <trans-unit id="1d58f1eb861475088c58d8cf25b2227f3e09eb03" translate="yes" xml:space="preserve">
          <source>The TLS 1.3 protocol does not provide inherent protection for replay of 0-RTT data but describes mechanisms that SHOULD be implemented by compliant server implementations. The implementation of TLS 1.3 in the SSL application employs all standard methods to prevent potential threats.</source>
          <target state="translated">TLS 1.3プロトコルは、0-RTTデータの再生のための固有の保護を提供するものではありませんが、準拠したサーバの実装によって実装されるべきメカニズムを記述しています。SSLアプリケーションにおけるTLS 1.3の実装は、潜在的な脅威を防ぐためにすべての標準的な方法を採用しています。</target>
        </trans-unit>
        <trans-unit id="efab23f28e335395659c14ebcb8051f53a7632c5" translate="yes" xml:space="preserve">
          <source>The TLS distribution options can be written into a file that is consulted when the node is started. This file name is then specified with the command line argument &lt;code&gt;-ssl_dist_optfile&lt;/code&gt;.</source>
          <target state="translated">TLS配布オプションは、ノードの起動時に参照されるファイルに書き込むことができます。このファイル名は、コマンドライン引数 &lt;code&gt;-ssl_dist_optfile&lt;/code&gt; で指定されます。</target>
        </trans-unit>
        <trans-unit id="75ccd2ece5259566f90ebb1a8f2c68746b4c7b93" translate="yes" xml:space="preserve">
          <source>The TLS/DTLS handshake protocol and data transfer is run on top of the TLS/DTLS Record Protocol, which uses a keyed-hash Message Authenticity Code (MAC), or a Hash-based MAC (HMAC), to protect the message data integrity. From the TLS RFC: &quot;A Message Authentication Code is a one-way hash computed from a message and some secret data. It is difficult to forge without knowing the secret data. Its purpose is to detect if the message has been altered.&quot;</source>
          <target state="translated">TLS/DTLS ハンドシェイクプロトコルとデータ転送は、TLS/DTLS レコードプロトコルの上で実行され、メッセージデータの整合性を保護するために、鍵付きハッシュのメッセージ認証コード (MAC)またはハッシュベースの MAC (HMAC)を使用します。TLS RFC より:「メッセージ認証コードは、メッセージといくつかの秘密データから計算される一方通行のハッシュです。秘密データを知らずに偽造することは困難です。その目的は、メッセージが改ざんされたかどうかを検出することです。</target>
        </trans-unit>
        <trans-unit id="ecf685e6c13939907b870d82ee6d0c05ec6e094e" translate="yes" xml:space="preserve">
          <source>The Text Based Trace Facility</source>
          <target state="translated">テキストベースのトレース機能</target>
        </trans-unit>
        <trans-unit id="e8fd67f45550805b41375cc84bc114e897e3206a" translate="yes" xml:space="preserve">
          <source>The Trace Tool Builder, &lt;code&gt;ttb&lt;/code&gt;, is a base for building trace tools for distributed systems.</source>
          <target state="translated">トレースツールビルダー &lt;code&gt;ttb&lt;/code&gt; は、分散システム用のトレースツールを構築するためのベースです。</target>
        </trans-unit>
        <trans-unit id="64d22e790fe528bf704a212bc1e1c0da643a949f" translate="yes" xml:space="preserve">
          <source>The Trace area also displays Back Trace, a summary of the current function calls on the stack.</source>
          <target state="translated">また、トレースエリアには、スタック上の現在の関数呼び出しの概要であるバックトレースも表示されます。</target>
        </trans-unit>
        <trans-unit id="b692df8320088d88e275d851ad60786d4e949a1f" translate="yes" xml:space="preserve">
          <source>The Trace area, which displays a trace output for the process.</source>
          <target state="translated">プロセスのトレース出力を表示するトレースエリアです。</target>
        </trans-unit>
        <trans-unit id="1b50d3d2fc04c4411539dfbb6e62512f2efa0130" translate="yes" xml:space="preserve">
          <source>The Trivial File Transfer Protocol or TFTP is a very simple protocol used to transfer files.</source>
          <target state="translated">Trivial File Transfer Protocol または TFTP は、ファイルを転送するために使用される非常にシンプルなプロトコルです。</target>
        </trans-unit>
        <trans-unit id="bf89156ef59750c4bb77ca15635b355ebce24e10" translate="yes" xml:space="preserve">
          <source>The Types are:</source>
          <target state="translated">タイプは</target>
        </trans-unit>
        <trans-unit id="a2becef736618dd80aea9ed87dc6889b0431226f" translate="yes" xml:space="preserve">
          <source>The URI parser tries all possible combinations to interpret the input and fails at the last attempt when it encounters the colon character &lt;code&gt;&quot;:&quot;&lt;/code&gt;. Note, that the inital fault occurs when the parser attempts to interpret the character &lt;code&gt;&quot;&amp;ouml;&quot;&lt;/code&gt; and after a failure back-tracks to the point where it has another possible parsing alternative.</source>
          <target state="translated">URIパーサーは、入力を解釈するために可能なすべての組み合わせを試行し、コロン文字 &lt;code&gt;&quot;:&quot;&lt;/code&gt; した最後の試行で失敗します。最初の障害は、パーサーが文字 &lt;code&gt;&quot;&amp;ouml;&quot;&lt;/code&gt; を解釈しようとしたときに発生し、障害が発生した後、別の可能な構文解析の選択肢があるポイントに戻ることに注意してください。</target>
        </trans-unit>
        <trans-unit id="2ea556d1f13405f24d60defd343780b8d63e1882" translate="yes" xml:space="preserve">
          <source>The URL the client was on before requesting the URL (if it could not be determined, a minus sign is placed in this field).</source>
          <target state="translated">クライアントがURLを要求する前にログオンしていたURL(判断できない場合は、この欄にマイナス記号を入れます)。</target>
        </trans-unit>
        <trans-unit id="2cd23bacb56d43630d70d816af467c37a05ab674" translate="yes" xml:space="preserve">
          <source>The UTF-8 variants were introduced in Erlang/OTP R16 and the string returned by &lt;code&gt;ERL_ATOM_PTR(atom)&lt;/code&gt; was not &lt;code&gt;NULL&lt;/code&gt;-terminated on older releases.</source>
          <target state="translated">UTF-8バリアントはErlang / OTP R16で導入され、 &lt;code&gt;ERL_ATOM_PTR(atom)&lt;/code&gt; によって返される文字列は、古いリリースでは &lt;code&gt;NULL&lt;/code&gt; で終了していませんでした。</target>
        </trans-unit>
        <trans-unit id="c76d8253124bd005c5e7c3968606bd5eebfe787e" translate="yes" xml:space="preserve">
          <source>The Unexpected I/O Log</source>
          <target state="translated">予期せぬI/Oログ</target>
        </trans-unit>
        <trans-unit id="615107616ab4a2ac637d22a3e97ccf0d1ff89d56" translate="yes" xml:space="preserve">
          <source>The Unicode characters need to be processed by the Erlang program, which is why library functions must be able to handle them. In some cases functionality has been added to already existing interfaces (as the &lt;code&gt;string&lt;/code&gt; module now can handle strings with any code points). In some cases new functionality or options have been added (as in the &lt;code&gt;io&lt;/code&gt; module, the file handling, the &lt;code&gt;unicode&lt;/code&gt; module, and the bit syntax). Today most modules in Kernel and STDLIB, as well as the VM are Unicode-aware.</source>
          <target state="translated">Unicode文字は、Erlangプログラムで処理する必要があるため、ライブラリ関数でUnicode文字を処理できる必要があります。場合によっては、既存のインターフェイスに機能が追加されています（ &lt;code&gt;string&lt;/code&gt; モジュールが任意のコードポイントの文字列を処理できるようになったため）。場合によっては、新しい機能またはオプションが追加されました（ &lt;code&gt;io&lt;/code&gt; モジュール、ファイル処理、 &lt;code&gt;unicode&lt;/code&gt; モジュール、ビット構文など）。現在、カーネルとSTDLIBのほとんどのモジュール、およびVMはUnicode対応です。</target>
        </trans-unit>
        <trans-unit id="d8a64b00a37fa70a62423e7afa68917e078e3bbf" translate="yes" xml:space="preserve">
          <source>The Unicode file naming support was introduced in Erlang/OTP R14B01. A VM operating in Unicode filename translation mode can work with files having names in any language or character set (as long as it is supported by the underlying operating system and file system). The Unicode character list is used to denote filenames or directory names. If the file system content is listed, you also get Unicode lists as return value. The support lies in the Kernel and STDLIB modules, which is why most applications (that do not explicitly require the filenames to be in the ISO Latin-1 range) benefit from the Unicode support without change.</source>
          <target state="translated">Unicodeファイル名のサポートはErlang/OTP R14B01で導入されました。Unicodeファイル名変換モードで動作しているVMは、どんな言語や文字セットでもファイル名を持つファイルを扱うことができます(基本となるオペレーティングシステムとファイルシステムでサポートされている限り)。Unicode 文字リストは、ファイル名またはディレクトリ名を示すために使用されます。ファイルシステムの内容がリストされている場合は、戻り値として Unicode リストも取得します。このサポートはカーネルと STDLIB モジュールにありますので、ほとんどのアプリケーションでは (ファイル名が ISO Latin-1 の範囲内にあることを明示的に要求しない)Unicode サポートを変更することなく恩恵を受けることができます。</target>
        </trans-unit>
        <trans-unit id="2e08532eda1cbb1ea06bfac649530b3d005afb89" translate="yes" xml:space="preserve">
          <source>The Unicode string is returned as a Unicode list, which is recognized as such, as the Erlang shell uses the Unicode encoding (and is started with all Unicode characters considered printable). The Unicode list is valid input to function &lt;code&gt;io:put_chars/2&lt;/code&gt;, so data can be output on any Unicode-capable device. If the device is a terminal, characters are output in format &lt;code&gt;\x{&lt;/code&gt;H...&lt;code&gt;}&lt;/code&gt; if encoding is &lt;code&gt;latin1&lt;/code&gt;. Otherwise in UTF-8 (for the non-interactive terminal: &quot;oldshell&quot; or &quot;noshell&quot;) or whatever is suitable to show the character properly (for an interactive terminal: the regular shell).</source>
          <target state="translated">Unicode文字列はUnicodeリストとして返されます。これは、ErlangシェルがUnicodeエンコーディングを使用するため、そのように認識されます（すべてのUnicode文字が印刷可能と見なされて開始されます）。 Unicodeリストは関数 &lt;code&gt;io:put_chars/2&lt;/code&gt; への有効な入力であるため、データは任意のUnicode対応デバイスで出力できます。デバイスが端末で、エンコーディングが &lt;code&gt;latin1&lt;/code&gt; の場合、文字は &lt;code&gt;\x{&lt;/code&gt; H ... &lt;code&gt;}&lt;/code&gt; の形式で出力されます。それ以外の場合はUTF-8（非インタラクティブ端末の場合： &quot;oldshell&quot;または &quot;noshell&quot;）または文字を適切に表示するのに適したもの（インタラクティブ端末の場合：通常のシェル）。</target>
        </trans-unit>
        <trans-unit id="917f1b5ccc007e44df82f5ad9e8e418e0762f6b0" translate="yes" xml:space="preserve">
          <source>The Unicode support is controlled by both command-line switches, some standard environment variables, and the OTP version you are using. Most options affect mainly how Unicode data is displayed, not the functionality of the APIs in the standard libraries. This means that Erlang programs usually do not need to concern themselves with these options, they are more for the development environment. An Erlang program can be written so that it works well regardless of the type of system or the Unicode options that are in effect.</source>
          <target state="translated">Unicode のサポートは、コマンドラインスイッチ、いくつかの標準環境変数、使用している OTP のバージョンの両方によって制御されます。ほとんどのオプションは主にUnicodeデータがどのように表示されるかに影響を与え、標準ライブラリのAPIの機能には影響を与えません。つまり、Erlangプログラムは通常これらのオプションを気にする必要はありません。Erlangプログラムはシステムの種類やUnicodeオプションに関係なくうまく動作するように書くことができます。</target>
        </trans-unit>
        <trans-unit id="9e4f13026f64ec5f7cdd6285c03d5258bacc1cd2" translate="yes" xml:space="preserve">
          <source>The Unicode translation modifier &lt;code&gt;t&lt;/code&gt; specifies how to treat characters outside the Latin-1 range of codepoints, in atoms, strings, and binaries. For example, printing an atom containing a character &amp;gt; 255:</source>
          <target state="translated">Unicode変換修飾子 &lt;code&gt;t&lt;/code&gt; は、Latin-1のコードポイントの範囲外にある文字を、アトム、文字列、バイナリで処理する方法を指定します。たとえば、255を超える文字を含むアトムを印刷します。</target>
        </trans-unit>
        <trans-unit id="e24a7d795c65b90caaa133aaf71048aad49fb98e" translate="yes" xml:space="preserve">
          <source>The Unicode translation modifier works as with &lt;code&gt;s&lt;/code&gt;:</source>
          <target state="translated">Unicode変換修飾子は &lt;code&gt;s&lt;/code&gt; と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="b61b21ce88bdc4622a6b58534472bd97a7d6b6d9" translate="yes" xml:space="preserve">
          <source>The Unix &lt;code&gt;DISPLAY&lt;/code&gt; environment variable is to be set to the display of the master node.</source>
          <target state="translated">Unix &lt;code&gt;DISPLAY&lt;/code&gt; 環境変数は、マスターノードのディスプレイに設定されます。</target>
        </trans-unit>
        <trans-unit id="7580a1c9657bbaca0bea72d41a48c1a2c9f178ef" translate="yes" xml:space="preserve">
          <source>The VM performs tail call optimization, which does not add new entries to the stacktrace, and also limits stacktraces to a certain depth. Furthermore, compiler options, optimizations and future changes may add or remove stacktrace entries, causing any code that expects the stacktrace to be in a certain order or contain specific items to fail.</source>
          <target state="translated">VM はテールコール最適化を実行し、スタックトレースに新しいエントリを追加せず、スタックトレースを一定の深さに制限します。さらに、コンパイラのオプション、最適化、および将来の変更により、スタックトレースのエントリが追加されたり削除されたりする可能性があり、スタックトレースが特定の順序であることや特定の項目を含むことを期待するコードはすべて失敗します。</target>
        </trans-unit>
        <trans-unit id="36921b8c054120393af51df837412dde5ebe77c2" translate="yes" xml:space="preserve">
          <source>The VM with SMP support makes quite a heavy use of atomic memory operations. An implementation providing native atomic memory operations is therefore very important when building Erlang/OTP. By default the VM will refuse to build if native atomic memory operations are not available.</source>
          <target state="translated">SMPをサポートしているVMはアトミックメモリ操作を多用します。したがって、ネイティブのアトミックメモリ操作を提供する実装はErlang/OTPをビルドする際に非常に重要です。デフォルトでは、ネイティブのアトミックメモリ操作が利用できない場合、VMはビルドを拒否します。</target>
        </trans-unit>
        <trans-unit id="883c00fb93b6833f40d7fa937a519315da18d85d" translate="yes" xml:space="preserve">
          <source>The View Module window displays the contents of an interpreted module and makes it possible to set breakpoints.</source>
          <target state="translated">View Module ウィンドウは、解釈されたモジュールの内容を表示し、ブレークポイントを設定することができます。</target>
        </trans-unit>
        <trans-unit id="818a2a38b6d37966404b0037603dc28865b80d3d" translate="yes" xml:space="preserve">
          <source>The Windows messages are retrieved from the eventlog file.</source>
          <target state="translated">Windows メッセージは eventlog ファイルから取得されます。</target>
        </trans-unit>
        <trans-unit id="1ef81693a27626a4d31fec58f2301060476cd06b" translate="yes" xml:space="preserve">
          <source>The Windows system is rebooted whenever the emulator stops (a more simple form of watchdog). This can be useful for less critical systems, otherwise use the heart functionality to accomplish this.</source>
          <target state="translated">Windows システムは、エミュレータが停止するたびに再起動されます (ウォッチドッグのより簡単な形式です)。これは重要度の低いシステムに便利ですが、そうでない場合はハート機能を使用してください。</target>
        </trans-unit>
        <trans-unit id="66afd9d96a38a37c4f7f94ff1bd05dfee703afea" translate="yes" xml:space="preserve">
          <source>The XML version shown earlier can also be used, but it is to be explicitly specified that the &lt;code&gt;ct_config_xml&lt;/code&gt; callback module is to be used by &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">前に示したXMLバージョンも使用できますが、 &lt;code&gt;ct_config_xml&lt;/code&gt; コールバックモジュールが &lt;code&gt;Common Test&lt;/code&gt; で使用されることを明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="252a4b864e9fb6b863b0c8c232185b5a96bbfa1c" translate="yes" xml:space="preserve">
          <source>The \A, \Z, and \z assertions differ from the traditional circumflex and dollar (described in the next section) in that they only ever match at the very start and end of the subject string, whatever options are set. Thus, they are independent of multiline mode. These three assertions are not affected by options &lt;code&gt;notbol&lt;/code&gt; or &lt;code&gt;noteol&lt;/code&gt;, which affect only the behavior of the circumflex and dollar metacharacters. However, if argument &lt;code&gt;startoffset&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; is non-zero, indicating that matching is to start at a point other than the beginning of the subject, \A can never match. The difference between \Z and \z is that \Z matches before a newline at the end of the string and at the very end, while \z matches only at the end.</source>
          <target state="translated">\ A、\ Z、および\ zアサーションは、オプションが設定されていても、サブジェクト文字列の最初と最後でのみ一致するという点で、従来のサーカムフレックスおよびドル（次のセクションで説明）とは異なります。したがって、これらはマルチラインモードから独立しています。これらの3つのアサーションは、サーカムフレックスとドルのメタキャラクターの動作のみに影響を与えるオプション &lt;code&gt;notbol&lt;/code&gt; または &lt;code&gt;noteol&lt;/code&gt; の影響を受けません。ただし、 &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;startoffset&lt;/code&gt; がゼロ以外であり、一致が件名の先頭以外の場所から始まることを示している場合、\ Aは決して一致できません。 \ Zと\ zの違いは、\ Zは文字列の最後と最後の改行の前で一致するのに対し、\ zは最後でのみ一致することです。</target>
        </trans-unit>
        <trans-unit id="943d4453f30bb5749d0c52004563365b21bda38a" translate="yes" xml:space="preserve">
          <source>The \C escape sequence</source>
          <target state="translated">The ¶ The C escape sequence</target>
        </trans-unit>
        <trans-unit id="4f34ba1108b5cb6716129944fbf4f4329a0a6235" translate="yes" xml:space="preserve">
          <source>The \C escape sequence is best avoided. However, one way of using it that avoids the problem of malformed UTF characters is to use a lookahead to check the length of the next character, as in the following pattern, which can be used with a UTF-8 string (ignore whitespace and line breaks):</source>
          <target state="translated">C エスケープシーケンスは避けた方がよいでしょう。しかし、不正な UTF 文字の問題を回避する方法の一つとして、次のパターンのように、ルックヘッドを使って次の文字の長さをチェックする方法があります。</target>
        </trans-unit>
        <trans-unit id="c3ea67e0b67cb019dc5aaa8e95c03b5cb7572754" translate="yes" xml:space="preserve">
          <source>The \G assertion is true only when the current matching position is at the start point of the match, as specified by argument &lt;code&gt;startoffset&lt;/code&gt; of &lt;code&gt;run/3&lt;/code&gt;. It differs from \A when the value of &lt;code&gt;startoffset&lt;/code&gt; is non-zero. By calling &lt;code&gt;run/3&lt;/code&gt; multiple times with appropriate arguments, you can mimic the Perl option &lt;code&gt;/g&lt;/code&gt;, and it is in this kind of implementation where \G can be useful.</source>
          <target state="translated">\ Gアサーションは、 &lt;code&gt;run/3&lt;/code&gt; の引数 &lt;code&gt;startoffset&lt;/code&gt; で指定されているように、現在の一致位置が一致の開始点にある場合にのみ真になります。 &lt;code&gt;startoffset&lt;/code&gt; の値がゼロ以外の場合、\ Aとは異なります。適切な引数を指定して &lt;code&gt;run/3&lt;/code&gt; を複数回呼び出すことにより、Perlオプション &lt;code&gt;/g&lt;/code&gt; を模倣できます。この種の実装では、\ Gが役立ちます。</target>
        </trans-unit>
        <trans-unit id="2f7f1b350c6833ef257bc14bd5940d6dff8095f3" translate="yes" xml:space="preserve">
          <source>The \Q...\E sequence is recognized both inside and outside character classes. An isolated \E that is not preceded by \Q is ignored. If \Q is not followed by \E later in the pattern, the literal interpretation continues to the end of the pattern (that is, \E is assumed at the end). If the isolated \Q is inside a character class, this causes an error, as the character class is not terminated.</source>
          <target state="translated">The \Q...\E sequence is recognized both inside and outside character class.A isolated \E that is not preceded by \Q is ignored.If \Q is not followed by \E later in the pattern,the literal interpretation continues to the end of the pattern (すなわち、最後に\E is assumed at the end)。孤立した\\Qが文字クラスの中にある場合は、文字クラスが終了しないため、エラーとなる。</target>
        </trans-unit>
        <trans-unit id="14658b1c2056da1457d1137feae50fbf03cef97b" translate="yes" xml:space="preserve">
          <source>The \R escape sequence</source>
          <target state="translated">The ¶ The R escape sequence</target>
        </trans-unit>
        <trans-unit id="4253fcd6879a11eec01b435167179d5e15f76711" translate="yes" xml:space="preserve">
          <source>The \X escape matches any number of Unicode characters that form an &quot;extended grapheme cluster&quot;, and treats the sequence as an atomic group (see below). Up to and including release 8.31, PCRE matched an earlier, simpler definition that was equivalent to &lt;code&gt;(?&amp;gt;\PM\pM*)&lt;/code&gt;. That is, it matched a character without the &quot;mark&quot; property, followed by zero or more characters with the &quot;mark&quot; property. Characters with the &quot;mark&quot; property are typically non-spacing accents that affect the preceding character.</source>
          <target state="translated">\ Xエスケープは、「拡張書記素クラスター」を形成する任意の数のUnicode文字と一致し、シーケンスをアトミックグループとして扱います（以下を参照）。リリース8.31までは、PCREは &lt;code&gt;(?&amp;gt;\PM\pM*)&lt;/code&gt; に相当する以前のより簡単な定義に一致していました。つまり、「mark」プロパティのない文字に一致し、その後に「mark」プロパティのあるゼロ個以上の文字が続きました。 「マーク」プロパティを持つ文字は、通常、前の文字に影響を与える非間隔アクセントです。</target>
        </trans-unit>
        <trans-unit id="fe0ff3b7597c9ca177e61f2b7394c84224900254" translate="yes" xml:space="preserve">
          <source>The \X escape sequence</source>
          <target state="translated">The X escape sequence</target>
        </trans-unit>
        <trans-unit id="1a667df5d1564a7cf0ddb2cbecc475bdb5eb483f" translate="yes" xml:space="preserve">
          <source>The \c facility was designed for use with ASCII characters, but with the extension to Unicode it is even less useful than it once was.</source>
          <target state="translated">c施設は、ASCII文字で使用するために設計されていましたが、Unicodeに拡張されたことで、かつてよりもさらに使い勝手が悪くなっています。</target>
        </trans-unit>
        <trans-unit id="269d02430fd6e138cda2800d0af71fa652dd1cf5" translate="yes" xml:space="preserve">
          <source>The ability to globally register names is a central concept in the programming of distributed Erlang systems. In this module, the equivalent of the &lt;code&gt;register/2&lt;/code&gt; and &lt;code&gt;whereis/1&lt;/code&gt; BIFs (for local name registration) are provided, but for a network of Erlang nodes. A registered name is an alias for a process identifier (pid). The global name server monitors globally registered pids. If a process terminates, the name is also globally unregistered.</source>
          <target state="translated">名前をグローバルに登録する機能は、分散Erlangシステムのプログラミングにおける中心的な概念です。このモジュールでは、 &lt;code&gt;register/2&lt;/code&gt; および &lt;code&gt;whereis/1&lt;/code&gt; BIF（ローカル名登録用）に相当するものが提供されていますが、Erlangノードのネットワーク用です。登録名は、プロセス識別子（pid）のエイリアスです。グローバルネームサーバーは、グローバルに登録されたPIDを監視します。プロセスが終了すると、名前もグローバルに登録解除されます。</target>
        </trans-unit>
        <trans-unit id="2cc8577a293410d9b2b2308f91ef8c7aeb7972a3" translate="yes" xml:space="preserve">
          <source>The ability to have nested transaction with identical semantics as top-level transaction makes it easier to write library functions that manipulate &lt;code&gt;Mnesia&lt;/code&gt; tables.</source>
          <target state="translated">最上位のトランザクションと同じセマンティクスでトランザクションをネストできるため、 &lt;code&gt;Mnesia&lt;/code&gt; テーブルを操作するライブラリ関数を簡単に作成できます。</target>
        </trans-unit>
        <trans-unit id="5d3f3d904255147f868f9a9b898334b0ed05f68e" translate="yes" xml:space="preserve">
          <source>The ability to prepare several modules in parallel is not currently used as almost all code loading is serialized by the code_server process. The BIF interface is however prepared for this.</source>
          <target state="translated">ほとんどすべてのコードロードはcode_serverプロセスによってシリアル化されるため、複数のモジュールを並列に準備する機能は現在のところ使用されていません。しかし、BIF インターフェースはこのために用意されています。</target>
        </trans-unit>
        <trans-unit id="89a04008ab968f22c43827dcb1f3ef8218af459a" translate="yes" xml:space="preserve">
          <source>The ability to reconfigure the system without stopping or suspending it.</source>
          <target state="translated">停止・中断せずに再設定できること。</target>
        </trans-unit>
        <trans-unit id="129e9c30a42ceaac73e62bd0dcc82cdd40af7c03" translate="yes" xml:space="preserve">
          <source>The above commands give a bit more information than the exact answers, but adequate information when manually searching for answers to these questions.</source>
          <target state="translated">上記のコマンドでは、正確な答えよりも少し多くの情報が得られますが、これらの質問に対する答えを手動で検索する場合には十分な情報が得られます。</target>
        </trans-unit>
        <trans-unit id="f248f43bea4cac68bcba54c041edea09e4c2df08" translate="yes" xml:space="preserve">
          <source>The above described implementation more or less minimizes the comunication needed before we can increment the global counter. The amount of communication in the system due to the thread progress functionality however also depend on the frequency with which managed threads call &lt;code&gt;erts_thr_progress_update()&lt;/code&gt;. Today each scheduler thread calls &lt;code&gt;erts_thr_progress_update()&lt;/code&gt; more or less each time an Erlang process is scheduled out. One way of further reducing communication due to the thread progress functionality is to only call &lt;code&gt;erts_thr_progress_update()&lt;/code&gt; every second, or third time an Erlang process is scheduled out, or even less frequently than that. However, by doing updates of thread progress less frequently all operations depending on the thread progress functionality will also take a longer time.</source>
          <target state="translated">上記の実装は、グローバルカウンターをインクリメントする前に、必要な通信を多かれ少なかれ最小限に抑えます。ただし、スレッド進行機能によるシステム内の通信量は、管理対象スレッドが &lt;code&gt;erts_thr_progress_update()&lt;/code&gt; を呼び出す頻度にも依存します。今日、各スケジューラスレッドは、Erlangプロセスがスケジュールされるたびに多かれ少なかれ &lt;code&gt;erts_thr_progress_update()&lt;/code&gt; を呼び出します。スレッド進行機能により通信をさらに削減する1つの方法は、 &lt;code&gt;erts_thr_progress_update()&lt;/code&gt; のみを呼び出すことです。Erlangプロセスがスケジュールされる毎秒または3回、またはそれよりも少ない頻度。ただし、スレッドの進行状況の更新をあまり頻繁に行わないため、スレッドの進行状況機能に応じたすべての操作にも時間がかかります。</target>
        </trans-unit>
        <trans-unit id="eaa2af3e34f5b33ee6c40efa2f89e63edd11857b" translate="yes" xml:space="preserve">
          <source>The above describes how it works if the configuration parameter &lt;code&gt;&lt;a href=&quot;#memsup_improved_system_memory_data&quot;&gt;memsup_improved_system_memory_data&lt;/a&gt;&lt;/code&gt; has been set to &lt;code&gt;false&lt;/code&gt; which currently also is the default behavior. If the configuration parameter is set to &lt;code&gt;true&lt;/code&gt; the behavior is slightly changed:</source>
          <target state="translated">上記は、構成パラメーター &lt;code&gt;&lt;a href=&quot;#memsup_improved_system_memory_data&quot;&gt;memsup_improved_system_memory_data&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; に設定されている場合の動作を説明しています。これは、現在デフォルトの動作でもあります。構成パラメーターが &lt;code&gt;true&lt;/code&gt; に設定されている場合、動作はわずかに変更されます。</target>
        </trans-unit>
        <trans-unit id="45b0784fdfa3b2b86ccd9506530ebe25156cc75c" translate="yes" xml:space="preserve">
          <source>The above domains are used for logs originating from Erlang/OTP. D1 specifies that the log event comes from Erlang/OTP in general, and D2 indicates that the log event is a so called &lt;code&gt;&lt;a href=&quot;logger_chapter#sasl_reports&quot;&gt;SASL report&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記のドメインは、Erlang / OTPからのログに使用されます。D1はログイベントが一般的にErlang / OTPからのものであることを指定し、D2はログイベントがいわゆる &lt;code&gt;&lt;a href=&quot;logger_chapter#sasl_reports&quot;&gt;SASL report&lt;/a&gt;&lt;/code&gt; あることを示します。</target>
        </trans-unit>
        <trans-unit id="4ad528c9654cb6b91e6a15396b85e360c22694a9" translate="yes" xml:space="preserve">
          <source>The above function specification uses multiple occurrences of the same type variable. That provides more type information than the following function specification, where the type variables are missing:</source>
          <target state="translated">上記の関数仕様では、同じ型変数を複数回使用しています。これは、型変数が欠落している以下の関数仕様よりも多くの型情報を提供します。</target>
        </trans-unit>
        <trans-unit id="6b3999c12af345ea4567453a651d6ad765544220" translate="yes" xml:space="preserve">
          <source>The above line will create a &lt;code&gt;TAGS&lt;/code&gt; file covering all the Erlang source files in the current directory, and in the subdirectories below.</source>
          <target state="translated">上記の行は、現在のディレクトリと以下のサブディレクトリにあるすべてのErlangソースファイルをカバーする &lt;code&gt;TAGS&lt;/code&gt; ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="e341eaf056f6757aa8744bf39e8ccfa82e2460c2" translate="yes" xml:space="preserve">
          <source>The above problem can also be solved as follows:</source>
          <target state="translated">また、上記の問題は以下のように解くことができます。</target>
        </trans-unit>
        <trans-unit id="492aee09cf585dc36dd1c47f1f73ebd941b86f64" translate="yes" xml:space="preserve">
          <source>The above publications can be found at &lt;code&gt;&lt;a href=&quot;http://www.ietf.org&quot;&gt;IETF&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記の出版物は &lt;code&gt;&lt;a href=&quot;http://www.ietf.org&quot;&gt;IETF&lt;/a&gt;&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="5dbb531e49f3781328d131d1418c3fc6c34074de" translate="yes" xml:space="preserve">
          <source>The above requirements makes the private task data structure a rather complex data structure. It has a queue of unprocessed tasks, and a busy queue. The busy queue contains blocked tasks corresponding to &lt;code&gt;command&lt;/code&gt; signals, and tasks with dependencies to such tasks. The busy queue is accompanied by a table over blocked tasks based on sender with a references into last task in the busy queue from a specific sender. This since we need check for dependencies when new tasks are processed in the queue of unprocessed tasks. When a new task is processed that needs to be blocked it isn't enqueued at the end of the busy queue, but instead directly after the last task with the same sender. This in order to easily be able to detect when we have tasks that no longer have any dependencies to tasks corresponding to &lt;code&gt;command&lt;/code&gt; signals which should be moved out of the busy queue. When the port executes, it switches between processing tasks from the busy queue, and processing directly from the unprocessed queue based on its busy state. When processing directly from the unprocessed queue it might, of course, have to move a task into the busy queue instead of executing it.</source>
          <target state="translated">上記の要件により、プライベートタスクのデータ構造はかなり複雑なデータ構造になります。未処理のタスクのキューとビジーキューがあります。ビジーキューには、 &lt;code&gt;command&lt;/code&gt; シグナルに対応するブロックされたタスクと、そのようなタスクに依存するタスクが含まれます。ビジーキューには、特定の送信者からのビジーキュー内の最後のタスクへの参照を含む、送信者に基づくブロックされたタスクのテーブルが付属しています。これは、未処理のタスクのキューで新しいタスクが処理されるときに依存関係をチェックする必要があるためです。ブロックする必要のある新しいタスクが処理されると、ビジーキューの最後ではなく、同じ送信者の最後のタスクの直後にキューに入れられます。これは、対応するタスクへの依存関係がなくなったタスクがある場合に簡単に検出できるようにするためです。 &lt;code&gt;command&lt;/code&gt; から移動する必要があるコマンド信号。ポートが実行されると、ビジー状態に基づいて、ビジーキューからの処理タスクと未処理キューからの直接処理が切り替わります。未処理のキューから直接処理する場合は、もちろん、タスクを実行するのではなく、ビジーキューに移動する必要があります。</target>
        </trans-unit>
        <trans-unit id="9d1f97ecba7e65750e03299b0da63791177dd464" translate="yes" xml:space="preserve">
          <source>The above return value and output after the call to &lt;code&gt;release_handler:install_release/1&lt;/code&gt; means that the &lt;code&gt;release_handler&lt;/code&gt; has restarted the node by using &lt;code&gt;heart&lt;/code&gt;. This is always done when the upgrade involves a change of the applications ERTS, Kernel, STDLIB, or SASL. For more information, see &lt;code&gt;&lt;a href=&quot;upgrade&quot;&gt; Upgrade when Erlang/OTP has Changed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記の戻り値と &lt;code&gt;release_handler:install_release/1&lt;/code&gt; の呼び出し後の出力は、 &lt;code&gt;release_handler&lt;/code&gt; が &lt;code&gt;heart&lt;/code&gt; を使用してノードを再起動したことを意味します。これは、アップグレードにアプリケーションERTS、カーネル、STDLIB、またはSASLの変更が含まれる場合に常に実行されます。詳細については &lt;code&gt;&lt;a href=&quot;upgrade&quot;&gt; Upgrade when Erlang/OTP has Changed&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="425de3e4a3c3f31918aace8062226e8cca18ed8a" translate="yes" xml:space="preserve">
          <source>The above return value and output after the call to &lt;code&gt;release_handler:install_release/1&lt;/code&gt; means that the &lt;code&gt;release_handler&lt;/code&gt; has restarted the node by using &lt;code&gt;heart&lt;/code&gt;. This is always done when the upgrade involves a change of the applications ERTS, Kernel, STDLIB, or SASL. For more information, see &lt;code&gt;&lt;a href=&quot;upgrade&quot;&gt;Upgrade when Erlang/OTP has Changed&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">上記の戻り値と &lt;code&gt;release_handler:install_release/1&lt;/code&gt; の呼び出し後の出力は、 &lt;code&gt;release_handler&lt;/code&gt; が &lt;code&gt;heart&lt;/code&gt; を使用してノードを再起動したことを意味します。これは、アップグレードにアプリケーションERTS、カーネル、STDLIB、またはSASLの変更が含まれる場合に常に行われます。詳細については、「 &lt;code&gt;&lt;a href=&quot;upgrade&quot;&gt;Upgrade when Erlang/OTP has Changed&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="7341074eb758fc408da665455635aa8abe3e6546" translate="yes" xml:space="preserve">
          <source>The above sequence did only describe adding a new breakpoint. We do basically the same sequence to update the settings of an existing breakpoint except step 2,3 and 6 can be skipped as it has already been done.</source>
          <target state="translated">上記のシーケンスでは、新しいブレークポイントを追加することを説明しただけです。既存のブレークポイントの設定を更新するために、ステップ2,3,6を省略できることを除いて、基本的には同じシーケンスを実行します。</target>
        </trans-unit>
        <trans-unit id="c6d29da5725e5abb5aa97c7b81d06a71c4261fa3" translate="yes" xml:space="preserve">
          <source>The above slogan is one of the more common reasons for Erlang to terminate. For unknown reasons the Erlang Run-Time System failed to allocate memory to use. When this happens a crash dump is generated that contains information about the state of the system as it ran out of memory. Use the &lt;code&gt;crashdump_viewer&lt;/code&gt; to get a view of the memory is being used. Look for processes with large heaps or many messages, large ets tables, etc.</source>
          <target state="translated">上記のスローガンは、アーランが終了する最も一般的な理由の1つです。不明な理由で、Erlangランタイムシステムは使用するメモリを割り当てることができませんでした。これが発生すると、メモリが不足したときのシステムの状態に関する情報を含むクラッシュダンプが生成されます。使用されているメモリのビューを取得するには、 &lt;code&gt;crashdump_viewer&lt;/code&gt; を使用します。大きなヒープまたは多くのメッセージ、大きなetsテーブルなどを持つプロセスを探します。</target>
        </trans-unit>
        <trans-unit id="782b35684c4c327f6b3806c4707f7ff71cfb9ed8" translate="yes" xml:space="preserve">
          <source>The above slogan is one of the more common reasons for Erlang to terminate. For unknown reasons the Erlang Run-Time System failed to allocate memory to use. When this happens a crash dump is generated that contains information about the state of the system as it ran out of mmeory. Use the &lt;code&gt;crashdump_viewer&lt;/code&gt; to get a view of the memory is being used. Look for processes with large heaps or many messages, large ets tables, etc.</source>
          <target state="translated">上記のスローガンは、Erlangが終了する最も一般的な理由の1つです。不明な理由により、Erlangランタイムシステムは使用するメモリの割り当てに失敗しました。これが発生すると、システムがmmeoryを使い果たしたときのシステムの状態に関する情報を含むクラッシュダンプが生成されます。 &lt;code&gt;crashdump_viewer&lt;/code&gt; を使用して、使用されているメモリのビューを取得します。大きなヒープまたは多くのメッセージ、大きなetsテーブルなどを持つプロセスを探します。</target>
        </trans-unit>
        <trans-unit id="a934d4536371eb6354c38319c0a6fa99eadfdfc1" translate="yes" xml:space="preserve">
          <source>The absence of warnings does not mean that there are no remaining errors in the code.</source>
          <target state="translated">警告がないということは、コードにエラーが残っていないということではありません。</target>
        </trans-unit>
        <trans-unit id="52e22f3960de9276ce93c1885ad7150854270f91" translate="yes" xml:space="preserve">
          <source>The absolute path of directory &lt;code&gt;chat_server/ebin&lt;/code&gt; is here passed to the code server. This is essential because relative paths are stored by the code server as relative, and &lt;code&gt;Common Test&lt;/code&gt; changes the current working directory of ERTS during the test run.</source>
          <target state="translated">ここで、ディレクトリ &lt;code&gt;chat_server/ebin&lt;/code&gt; の絶対パスがコードサーバーに渡されます。相対パスはコードサーバーによって相対パスとして格納され、 &lt;code&gt;Common Test&lt;/code&gt; はテスト実行中にERTSの現在の作業ディレクトリを変更するため、これは不可欠です。</target>
        </trans-unit>
        <trans-unit id="30fdf1cb46294b863f8e4eaed5259c72435c637c" translate="yes" xml:space="preserve">
          <source>The absolute point in time, the timer is set to expire on, must be in the interval &lt;code&gt;[&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt; erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_end_time&quot;&gt; erlang:system_info(end_time)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;]&lt;/code&gt;. If a relative time is specified, the &lt;code&gt;Time&lt;/code&gt; value is not allowed to be negative.</source>
          <target state="translated">タイマーが期限切れになるように設定されている絶対時点は、 &lt;code&gt;[&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt; erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_end_time&quot;&gt; erlang:system_info(end_time)&lt;/a&gt;&lt;/code&gt; （start_time） &lt;code&gt;,&lt;/code&gt; erlang：system_info（end_time） &lt;code&gt;]&lt;/code&gt; の間隔内にある必要があります。相対時間を指定する場合、 &lt;code&gt;Time&lt;/code&gt; 値を負にすることはできません。</target>
        </trans-unit>
        <trans-unit id="5539aa6980c3b1d4dc664f3e80f8e7768512fe3a" translate="yes" xml:space="preserve">
          <source>The absolute point in time, the timer is set to expire on, must be in the interval &lt;code&gt;[&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt;erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;,&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_end_time&quot;&gt;erlang:system_info(end_time)&lt;/a&gt;&lt;/code&gt;&lt;code&gt;]&lt;/code&gt;. If a relative time is specified, the &lt;code&gt;Time&lt;/code&gt; value is not allowed to be negative.</source>
          <target state="translated">タイマーの有効期限が切れるように設定されている絶対的な時点。 &lt;code&gt;[&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_start_time&quot;&gt;erlang:system_info(start_time)&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_end_time&quot;&gt;erlang:system_info(end_time)&lt;/a&gt;&lt;/code&gt; （start_time） &lt;code&gt;,&lt;/code&gt; erlang：system_info（end_time） &lt;code&gt;]&lt;/code&gt; の範囲内である必要があります。相対時間を指定する場合、 &lt;code&gt;Time&lt;/code&gt; 値を負にすることはできません。</target>
        </trans-unit>
        <trans-unit id="e18029dc4fbc0a03d56e79bb7184953e3744a063" translate="yes" xml:space="preserve">
          <source>The abstract layer (defined in &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt;) is nicely structured and the node types are context-independent. The layer makes it possible to transparently attach source-code comments and user annotations to nodes of the tree. Using the abstract layer makes applications less sensitive to changes in the &lt;code&gt;erl_parse(3)&lt;/code&gt; data structures, only requiring the &lt;code&gt;erl_syntax&lt;/code&gt; module to be up-to-date.</source>
          <target state="translated">抽象レイヤー（ &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; で定義）は適切に構造化されており、ノードタイプはコンテキストに依存しません。このレイヤーにより、ソースコードのコメントとユーザーの注釈をツリーのノードに透過的にアタッチできます。抽象層を使用すると、アプリケーションは &lt;code&gt;erl_parse(3)&lt;/code&gt; データ構造の変更に対する感度が低くなり、 &lt;code&gt;erl_syntax&lt;/code&gt; モジュールを最新にするだけで済みます。</target>
        </trans-unit>
        <trans-unit id="56d4f99e44e9cb3cc0a8743c790ec2277cddaac6" translate="yes" xml:space="preserve">
          <source>The accepted socket inherits the options set for &lt;code&gt;ListenSocket&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt; listen/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">受け入れられたソケットは、 &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt; listen/2&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;ListenSocket&lt;/code&gt; に設定されたオプションを継承します。</target>
        </trans-unit>
        <trans-unit id="4ebbf813506aec9cb5b7febd24547c187a92185e" translate="yes" xml:space="preserve">
          <source>The accepted socket inherits the options set for &lt;code&gt;ListenSocket&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">受け入れられたソケットは、 &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;ListenSocket&lt;/code&gt; に設定されたオプションを継承します。</target>
        </trans-unit>
        <trans-unit id="f6c1f48a70d3a03fcd08b9ecaf840df566c82062" translate="yes" xml:space="preserve">
          <source>The ack_action() is either:</source>
          <target state="translated">ack_action()はどちらかです。</target>
        </trans-unit>
        <trans-unit id="4df5499b046a3caa5c00b3bf34cda3b59c95dee6" translate="yes" xml:space="preserve">
          <source>The ack_data() argument to this function is the Erlang term returned by handle_trans_request/3.</source>
          <target state="translated">この関数の ack_data()引数は handle_trans_request/3 が返す Erlang 項です。</target>
        </trans-unit>
        <trans-unit id="573fc48700bb83712fa26ae3db5f4a997f5bdf7a" translate="yes" xml:space="preserve">
          <source>The action to take when the Erlang emulator stops unexpectedly. Default is to ignore.</source>
          <target state="translated">Erlangエミュレータが予期せず停止したときのアクション。デフォルトは無視です。</target>
        </trans-unit>
        <trans-unit id="0321983ca2ab7b420ed8780bad63ee4e244c660a" translate="yes" xml:space="preserve">
          <source>The actual behavior of compiled match specifications when recreated from external format has changed and may change in future releases, but this interface remains for backward compatibility. See &lt;code&gt;&lt;a href=&quot;#is_compiled_ms-1&quot;&gt;is_compiled_ms/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">外部形式から再作成されたときのコンパイル済み一致仕様の実際の動作は変更されており、将来のリリースで変更される可能性がありますが、このインターフェイスは下位互換性のために残っています。 &lt;code&gt;&lt;a href=&quot;#is_compiled_ms-1&quot;&gt;is_compiled_ms/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="40fdcbc6206b95ef9655638b626a5128e3d5dc2c" translate="yes" xml:space="preserve">
          <source>The actual encoded messages have been collected in one directory per encoding type, containing one file per encoded message.</source>
          <target state="translated">実際のエンコードされたメッセージは、エンコードタイプごとに1つのディレクトリに集められ、エンコードされたメッセージごとに1つのファイルが含まれています。</target>
        </trans-unit>
        <trans-unit id="1c694608beedd90d5cb7943b28c1a84362940fa0" translate="yes" xml:space="preserve">
          <source>The actual encryption or decryption is done by &lt;code&gt;&lt;a href=&quot;crypto#crypto_update-2&quot;&gt;crypto_update/2&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;crypto#crypto_dyn_iv_update-3&quot;&gt;crypto_dyn_iv_update/3&lt;/a&gt;&lt;/code&gt; ).</source>
          <target state="translated">実際の暗号化または復号化は、 &lt;code&gt;&lt;a href=&quot;crypto#crypto_update-2&quot;&gt;crypto_update/2&lt;/a&gt;&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;crypto#crypto_dyn_iv_update-3&quot;&gt;crypto_dyn_iv_update/3&lt;/a&gt;&lt;/code&gt; ）によって行われます。</target>
        </trans-unit>
        <trans-unit id="e7fed2c92bea1fa55e85c9f8695c1f69a2c7262b" translate="yes" xml:space="preserve">
          <source>The actual implementation of instructions are also defined in &lt;code&gt;.tab&lt;/code&gt; files processed by &lt;strong&gt;beam_makeops&lt;/strong&gt;. For practical reasons, instruction definitions are stored in several files, at the time of writing in the following files:</source>
          <target state="translated">命令の実際の実装もで定義されている &lt;code&gt;.tab&lt;/code&gt; によって処理されたファイル&lt;strong&gt;beam_makeops&lt;/strong&gt;。実用上の理由から、命令定義は、以下のファイルに書き込む時点で、いくつかのファイルに保存されています。</target>
        </trans-unit>
        <trans-unit id="bbf119f15e4a3e4c9e43ba3da03845ee142277be" translate="yes" xml:space="preserve">
          <source>The actual message returned by the RPC server is a 2-tuple &lt;code&gt;{rex,Reply}&lt;/code&gt;. If you use &lt;code&gt;erl_rpc_from()&lt;/code&gt; in your code, this is the message you will need to parse. If you use &lt;code&gt;erl_rpc()&lt;/code&gt;, the tuple itself is parsed for you, and the message returned to your program is the Erlang term containing &lt;code&gt;Reply&lt;/code&gt; only. Replies to RPC requests are always &lt;code&gt;ERL_SEND&lt;/code&gt; messages.</source>
          <target state="translated">RPCサーバーから返される実際のメッセージは、2タプルの &lt;code&gt;{rex,Reply}&lt;/code&gt; です。コードで &lt;code&gt;erl_rpc_from()&lt;/code&gt; を使用する場合、これは解析する必要があるメッセージです。 &lt;code&gt;erl_rpc()&lt;/code&gt; を使用すると、タプル自体が解析され、プログラムに返されるメッセージは、 &lt;code&gt;Reply&lt;/code&gt; のみを含むErlang用語になります。RPC要求への &lt;code&gt;ERL_SEND&lt;/code&gt; は常にERL_SENDメッセージです。</target>
        </trans-unit>
        <trans-unit id="3f712073d78ceb80ba4691c57506456b575aeca2" translate="yes" xml:space="preserve">
          <source>The actual number of fragments</source>
          <target state="translated">実際のフラグメント数</target>
        </trans-unit>
        <trans-unit id="605930eb2c9eb4fbbdc869cc2d2017c67143a7b6" translate="yes" xml:space="preserve">
          <source>The actual padding is performed by &lt;code&gt;&lt;a href=&quot;crypto#crypto_final-1&quot;&gt;crypto_final/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実際のパディングは &lt;code&gt;&lt;a href=&quot;crypto#crypto_final-1&quot;&gt;crypto_final/1&lt;/a&gt;&lt;/code&gt; によって実行されます。</target>
        </trans-unit>
        <trans-unit id="4322cef184ec5aecf9faa18423df4ee550bc1ca0" translate="yes" xml:space="preserve">
          <source>The actual supervision of execution times is in itself a CPU intensive activity. A message is written on the trace file for every function call that is made by the profiled code.</source>
          <target state="translated">実行時間の実際の監視は、それ自体がCPUを集中的に使用する活動です。プロファイリングされたコードによって行われる関数呼び出しごとに、トレースファイルにメッセージが書き込まれます。</target>
        </trans-unit>
        <trans-unit id="d6518471a4a1665322d5954e6611844bc734d8cd" translate="yes" xml:space="preserve">
          <source>The actual supported algorithms and features depends on their availability in the actual libcrypto used. See the &lt;code&gt;crypto (App)&lt;/code&gt; about dependencies.</source>
          <target state="translated">実際にサポートされているアルゴリズムと機能は、実際に使用されているlibcryptoでの可用性によって異なります。依存関係については、 &lt;code&gt;crypto (App)&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="95a53d335d6385335f1d9907f4b8a879470a71f4" translate="yes" xml:space="preserve">
          <source>The actual supported named curves could be checked by examining the list returned by &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(curves)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">実際にサポートされている名前付き曲線は、 &lt;code&gt;&lt;a href=&quot;crypto#supports-1&quot;&gt;crypto:supports(curves)&lt;/a&gt;&lt;/code&gt; によって返されるリストを調べることで確認できます。</target>
        </trans-unit>
        <trans-unit id="4d3571545f798bc55c8050de98e521a38384a9d2" translate="yes" xml:space="preserve">
          <source>The actual timer time.</source>
          <target state="translated">実際のタイマーの時間。</target>
        </trans-unit>
        <trans-unit id="27345ee3cabb8f446fd8fd55e223fda324b5bab0" translate="yes" xml:space="preserve">
          <source>The actual value is the quoted atom &lt;code&gt;'NULL'&lt;/code&gt;.</source>
          <target state="translated">実際の値は、引用符で囲まれたアトム &lt;code&gt;'NULL'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c72f4263f7e8c1e5785af3ae16a212b694d638c6" translate="yes" xml:space="preserve">
          <source>The address and port of the other end of the connection.</source>
          <target state="translated">接続の相手側のアドレスとポート。</target>
        </trans-unit>
        <trans-unit id="5ae3afdabf8d69b7f030903f34729a4d0a97bc17" translate="yes" xml:space="preserve">
          <source>The address must be the IP address and cannot be the hostname.</source>
          <target state="translated">アドレスはIPアドレスでなければならず、ホスト名にすることはできません。</target>
        </trans-unit>
        <trans-unit id="45c66a6604fd97ae44d5625424f5836d3c3179c8" translate="yes" xml:space="preserve">
          <source>The address of the fun's code when HiPE is enabled.</source>
          <target state="translated">HiPEが有効になっているときのファンのコードのアドレス。</target>
        </trans-unit>
        <trans-unit id="7ddf5f9487a859a28b6ed4d37dd3d9bebe9f2f6a" translate="yes" xml:space="preserve">
          <source>The address of the fun's code.</source>
          <target state="translated">ファンのコードのアドレス。</target>
        </trans-unit>
        <trans-unit id="7e8bf572fd0f0bc243c5923805f5fb20ef2fe37e" translate="yes" xml:space="preserve">
          <source>The address specified in &lt;code&gt;&lt;a href=&quot;#send-3&quot;&gt;send&lt;/a&gt;&lt;/code&gt; overwrites the primary peer address</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send-3&quot;&gt;send&lt;/a&gt;&lt;/code&gt; で指定されたアドレスは、プライマリピアアドレスを上書きします</target>
        </trans-unit>
        <trans-unit id="ba449fc5f30a23d575fa4c4396e275fa504dce46" translate="yes" xml:space="preserve">
          <source>The adjustment of system time could have been made smother than using a time warp approach, but we think that would be a bad choice. As we can express and measure time that is not connected to calendar time by the use of Erlang monotonic time, it is better to expose the change in Erlang system time immediately. This as the Erlang applications executing on the system can react on the change in system time as soon as possible. This is also more or less exactly how most operating systems handle this (OS monotonic time and OS system time). By adjusting system time smoothly, we would just hide the fact that system time changed and make it harder for the Erlang applications to react to the change in a sensible way.</source>
          <target state="translated">システム時間の調整は、タイムワープのアプローチを使うよりももっとスムーズにできたかもしれませんが、それは悪い選択だと考えています。Erlangのモノトニックタイムを使うことでカレンダータイムとは関係のない時間を表現したり計測したりすることができるので、Erlangのシステムタイムの変化はすぐに公開した方が良いでしょう。システム上で実行しているErlangアプリケーションはシステム時間の変化にすぐに反応することができるからです。これはほとんどのオペレーティングシステムがどのように処理しているかというと(OSのモノトニックタイムとOSのシステムタイム)です。システム時間をスムーズに調整することで、システム時間が変化したことを隠してしまい、Erlangアプリケーションがその変化に反応するのを難しくしてしまいます。</target>
        </trans-unit>
        <trans-unit id="5f9472dc1436a5862ca0454404828318f9e56d1f" translate="yes" xml:space="preserve">
          <source>The advantage of using an extensible (agent/manager) toolkit is to remove details such as type-checking, access rights, Protocol Data Unit (PDU), encoding, decoding, and trap distribution from the programmer, who only has to write the instrumentation functions, which implement the MIBs. The &lt;code&gt;get-next&lt;/code&gt; function only has to be implemented for tables, and not for every variable in the global naming tree. This information can be deduced from the ASN.1 file.</source>
          <target state="translated">拡張可能な（エージェント/マネージャー）ツールキットを使用する利点は、タイプチェック、アクセス権、プロトコルデータユニット（PDU）、エンコード、デコード、トラップ配布などの詳細をプログラマーから削除することです。 MIBを実装する関数。 &lt;code&gt;get-next&lt;/code&gt; 機能は、テーブルのみのためではなく、グローバル・ネーミングツリー内のすべての変数のために実装する必要があります。この情報は、ASN.1ファイルから推定できます。</target>
        </trans-unit>
        <trans-unit id="9fe8e4ddaca688413966f57d082a8c9a7e076fe3" translate="yes" xml:space="preserve">
          <source>The advantages of separating the table coordinator from the SNMP tool are:</source>
          <target state="translated">テーブルコーディネータとSNMPツールを分離するメリットは</target>
        </trans-unit>
        <trans-unit id="1e3ed41d7fd39c63d6b7f432ea91d01107779b41" translate="yes" xml:space="preserve">
          <source>The affected tables are write-locked during the restoration. However, regardless of the lock conflicts caused by this, the applications can continue to do their work while the restoration is being performed. The restoration is performed as one single transaction.</source>
          <target state="translated">影響を受けたテーブルは、リストア中に書き込みロックされます。しかし、これによるロックの競合に関係なく、アプリケーションはリストアが実行されている間、作業を継続することができます。復元は 1 つの単一トランザクションとして実行されます。</target>
        </trans-unit>
        <trans-unit id="eeb577e64047dee54287b4297431d9c8f5676c03" translate="yes" xml:space="preserve">
          <source>The age is defined in milliseconds.</source>
          <target state="translated">年齢はミリ秒単位で定義されています。</target>
        </trans-unit>
        <trans-unit id="e7020aa85de45cdbfd0f6571b7cc03a6fded1bbd" translate="yes" xml:space="preserve">
          <source>The agent and manager uses (application) configuration parameters to find out where these directories are located. The parameters should be defined in an Erlang system configuration file. The following configuration parameters are defined for the SNMP application:</source>
          <target state="translated">エージェントとマネージャは(アプリケーションの)設定パラメータを使って、これらのディレクトリがどこにあるかを見つけます。パラメータはErlangシステム設定ファイルで定義されていなければなりません。以下の設定パラメータはSNMPアプリケーションに定義されています。</target>
        </trans-unit>
        <trans-unit id="532498afa1ab407c6e18b6c76c06f1a8f9021335" translate="yes" xml:space="preserve">
          <source>The agent can be configured to be multi-threaded, to process one incoming request at a time, or to have a request limit enabled (this can be used for load control or to limit the effect of DoS attacks). If it is multi-threaded, read requests (&lt;code&gt;get&lt;/code&gt;, &lt;code&gt;get-next&lt;/code&gt; and &lt;code&gt;get-bulk&lt;/code&gt;) and traps are processed in parallel with each other and &lt;code&gt;set&lt;/code&gt; requests. However, all &lt;code&gt;set&lt;/code&gt; requests are serialized, which means that if the agent is waiting for the application to complete a complicated write operation, it will not process any new write requests until this operation is finished. It processes read requests and sends traps, concurrently. The reason for not handle write requests in parallel is that a complex locking mechanism would be needed even in the simplest cases. Even with the scheme described above, the user must be careful not to violate that the &lt;code&gt;set&lt;/code&gt; requests are atoms. If this is hard to do, do not use the multi-threaded feature.</source>
          <target state="translated">エージェントは、マルチスレッド、一度に1つの着信要求を処理する、または要求制限を有効にするように構成できます（これは、負荷制御やDoS攻撃の影響を制限するために使用できます）。マルチスレッドの場合、読み取り要求（ &lt;code&gt;get&lt;/code&gt; 、 &lt;code&gt;get-next&lt;/code&gt; 、 &lt;code&gt;get-bulk&lt;/code&gt; ）とトラップは互いに並行して処理され、要求を &lt;code&gt;set&lt;/code&gt; ます。ただし、すべての &lt;code&gt;set&lt;/code&gt; つまり、エージェントがアプリケーションが複雑な書き込み操作を完了するのを待っている場合、この操作が完了するまで、新しい書き込み要求は処理されません。読み取り要求を処理し、トラップを同時に送信します。書き込みリクエストを並行して処理しない理由は、最も単純なケースでも複雑なロックメカニズムが必要になるためです。上記のスキームでも、ユーザーは、 &lt;code&gt;set&lt;/code&gt; リクエストがアトムであることを違反しないように注意する必要があります。これが難しい場合は、マルチスレッド機能を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="1765275ae72c3c73846eb96f701861af075a2ade" translate="yes" xml:space="preserve">
          <source>The agent can both perform and respond to discovery.</source>
          <target state="translated">エージェントは、ディスカバリーを実行することも、ディスカバリーに応答することもできます。</target>
        </trans-unit>
        <trans-unit id="5fab26e9897ff23218adb34fca8afc8ac6df806b" translate="yes" xml:space="preserve">
          <source>The agent can spontaneously send a notification, for example, an alarm, to the manager.</source>
          <target state="translated">エージェントは、自発的に、例えばアラームなどの通知を管理者に送信することができます。</target>
        </trans-unit>
        <trans-unit id="d42efd7983ea3f540eeeb3f75427cd0a119a5f44" translate="yes" xml:space="preserve">
          <source>The agent communication is established through a UNIX domain socket. By default, the socket path will be fetched from the &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; enviroment variable, which is the default socket path in the agent implementation of &lt;code&gt;&lt;a href=&quot;http://www.openssh.com&quot;&gt;OpenSSH&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">エージェント通信は、UNIXドメインソケットを介して確立されます。デフォルトでは、ソケットパスは &lt;code&gt;SSH_AUTH_SOCK&lt;/code&gt; 環境変数からフェッチされます。これは、 &lt;code&gt;&lt;a href=&quot;http://www.openssh.com&quot;&gt;OpenSSH&lt;/a&gt;&lt;/code&gt; のエージェント実装のデフォルトのソケットパスです。</target>
        </trans-unit>
        <trans-unit id="88e6c01b1d22bf1009d4f112f5ef241f146f87bc" translate="yes" xml:space="preserve">
          <source>The agent does not check complex ranges specified for INTEGER objects. In these cases it just checks that the value lies within the minimum and maximum values specified. For example, if the range is specified as &lt;code&gt;1..10 | 12..20&lt;/code&gt; the agent would let 11 through, but not 0 or 21. The instrumentation functions must check the complex ranges itself.</source>
          <target state="translated">エージェントは、INTEGERオブジェクトに指定された複雑な範囲をチェックしません。これらの場合、値が指定された最小値と最大値の範囲内にあることを確認するだけです。たとえば、範囲が &lt;code&gt;1..10 | 12..20&lt;/code&gt; として指定されている場合、12..20エージェントは11を通過させますが、0または21は通過させません。計測機能は、複雑な範囲自体をチェックする必要があります。</target>
        </trans-unit>
        <trans-unit id="821394aba5a85ee9b738eccc0b641e5e87f98f1d" translate="yes" xml:space="preserve">
          <source>The agent information should be stored in a file called &lt;code&gt;agent.conf&lt;/code&gt;.</source>
          <target state="translated">エージェント情報は、 &lt;code&gt;agent.conf&lt;/code&gt; というファイルに保存する必要があります。</target>
        </trans-unit>
        <trans-unit id="7d5c2b0ecab378b92db71d78b459615c0be2b937" translate="yes" xml:space="preserve">
          <source>The agent is an entity that executes within a &lt;strong&gt;Network Element (NE)&lt;/strong&gt;. In OTP, the NE can be a distributed system, meaning that the distributed system is managed as one entity. Of course, the agent can be configured to be able to run on one of several nodes, making it a distributed OTP application.</source>
          <target state="translated">エージェントは、&lt;strong&gt;ネットワーク要素（NE）&lt;/strong&gt;内で実行されるエンティティです。OTPでは、NEを分散システムにすることができます。つまり、分散システムは1つのエンティティとして管理されます。もちろん、エージェントは、いくつかのノードの1つで実行できるように構成して、分散OTPアプリケーションにすることができます。</target>
        </trans-unit>
        <trans-unit id="b3d395baa2a805befd96447c7ba7e7fb38c483ae" translate="yes" xml:space="preserve">
          <source>The agent is configured with the configuration tool, using default suggestions for everything but the manager node.</source>
          <target state="translated">エージェントは、マネージャノード以外のすべてのものにデフォルトの提案を使用して、設定ツールを使用して設定されます。</target>
        </trans-unit>
        <trans-unit id="bafc8c1a76725000dfff5c337a6c7efd569cd586" translate="yes" xml:space="preserve">
          <source>The agent is highly fault tolerant. If the manager gets an unexpected response from the agent, it is possible that some instrumentation function has returned an erroneous value. The agent will not crash even if the instrumentation does. It should be noted that if an instrumentation function enters an infinite loop, the agent will also be blocked forever. The supervisor ,or the application, specifies how to restart the agent.</source>
          <target state="translated">エージェントは高い耐障害性を持っています。マネージャがエージェントから予期しない応答を取得する場合、いくつかの計装機能が誤った値を返した可能性があります。インスツルメンテーションが発生してもエージェントがクラッシュすることはありません。インスツルメンテーション関数が無限ループに入ると、エージェントも永遠にブロックされることに注意する必要があります。スーパーバイザまたはアプリケーションは、エージェントを再起動する方法を指定します。</target>
        </trans-unit>
        <trans-unit id="2c7ad18cc20a9d278d188273b0ceb93f154abb8c" translate="yes" xml:space="preserve">
          <source>The agent receives a request and maps it to calls to one or more instrumentation functions. These functions perform operations on the resources to implement the semantics associated with the MO.</source>
          <target state="translated">エージェントはリクエストを受け取り、それを1つ以上のインストルメンテーション関数への呼び出しにマッピングする。これらの関数は、MOに関連付けられたセマンティクスを実装するために、リソー スに対する操作を実行する。</target>
        </trans-unit>
        <trans-unit id="5394a28e8aa26b89d2b8f393dd3cca2d7c380d89" translate="yes" xml:space="preserve">
          <source>The agent responds to discovery autonomously, without interaction by the user.</source>
          <target state="translated">エージェントは、ユーザーによる相互作用なしに、自律的に発見に応答します。</target>
        </trans-unit>
        <trans-unit id="ebd412ca77c13dc418b2ee47def2c221adc4c0fa" translate="yes" xml:space="preserve">
          <source>The agent started is called &lt;code&gt;snmp_master_agent&lt;/code&gt;. Use &lt;code&gt;&lt;a href=&quot;#load_mibs-1&quot;&gt;ct_snmp:load_mibs/1&lt;/a&gt;&lt;/code&gt; to load MIBs into the agent.</source>
          <target state="translated">開始されたエージェントは &lt;code&gt;snmp_master_agent&lt;/code&gt; と呼ばれます。 &lt;code&gt;&lt;a href=&quot;#load_mibs-1&quot;&gt;ct_snmp:load_mibs/1&lt;/a&gt;&lt;/code&gt; を使用して、MIBをエージェントにロードします。</target>
        </trans-unit>
        <trans-unit id="35fefa07539d964d08302d135b6a045a731feaec" translate="yes" xml:space="preserve">
          <source>The agent stores the values in an internal volatile database, which is based on the standard module &lt;code&gt;ets&lt;/code&gt;. However, it is possible to let the MIB compiler generate functions which use an internal, persistent database, or the Mnesia DBMS. Refer to the Mnesia User Guide and the Reference Manual, section SNMP, module &lt;code&gt;snmp_generic&lt;/code&gt; for more information.</source>
          <target state="translated">エージェントは、標準モジュール &lt;code&gt;ets&lt;/code&gt; に基づく内部の揮発性データベースに値を保存します。ただし、MIBコンパイラーに、内部の永続データベースまたはMnesia DBMSを使用する関数を生成させることは可能です。詳細については、MnesiaユーザーガイドとリファレンスマニュアルのセクションSNMP、モジュール &lt;code&gt;snmp_generic&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="88cd9d752952f90596dc3746023ba01fb085191a" translate="yes" xml:space="preserve">
          <source>The agent will never generate the &lt;code&gt;wrongEncoding&lt;/code&gt; error. If a variable binding is erroneous encoded, the &lt;code&gt;asn1ParseError&lt;/code&gt; counter will be incremented.</source>
          <target state="translated">エージェントが &lt;code&gt;wrongEncoding&lt;/code&gt; エラーを生成することはありません。変数バインディングが誤ってエンコードされている場合、 &lt;code&gt;asn1ParseError&lt;/code&gt; カウンターが増分されます。</target>
        </trans-unit>
        <trans-unit id="31dc2849b5514caeb8ae4f58e7cc8579c0d02b0d" translate="yes" xml:space="preserve">
          <source>The alarm handler is part of the SASL application.</source>
          <target state="translated">アラーム・ハンドラはSASLアプリケーションの一部です。</target>
        </trans-unit>
        <trans-unit id="f225b02b835111c249a55da204c91a4c1ca4bd60" translate="yes" xml:space="preserve">
          <source>The alarm handler process is a &lt;code&gt;gen_event&lt;/code&gt; event manager process that receives alarms in the system. This process is not intended to be a complete alarm handler. It defines a place to which alarms can be sent. One simple event handler is installed in the alarm handler at startup, but users are encouraged to write and install their own handlers.</source>
          <target state="translated">アラームハンドラプロセスは、システムでアラームを受信する &lt;code&gt;gen_event&lt;/code&gt; イベントマネージャプロセスです。このプロセスは、完全なアラームハンドラを意図したものではありません。アラームを送信できる場所を定義します。起動時にアラームハンドラーに1つの単純なイベントハンドラーがインストールされますが、ユーザーは独自のハンドラーを作成してインストールすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="9a1c34ac82f222f7bf20fdb60c9c70070554269a" translate="yes" xml:space="preserve">
          <source>The alarms are cleared automatically when the alarm cause is no longer valid.</source>
          <target state="translated">アラーム原因が有効でなくなると、アラームは自動的にクリアされます。</target>
        </trans-unit>
        <trans-unit id="986d3b30b24eb7709dfdc0693fd6abc2a7ec4e8c" translate="yes" xml:space="preserve">
          <source>The algorithm for updating &lt;code&gt;Serial&lt;/code&gt; can be described as follows:</source>
          <target state="translated">&lt;code&gt;Serial&lt;/code&gt; を更新するアルゴリズムは、次のように説明できます。</target>
        </trans-unit>
        <trans-unit id="4dd9a185b05bfc6c5aca5b3488aeb8d588a949ea" translate="yes" xml:space="preserve">
          <source>The algorithm for wich the fun should implement the special matching rules</source>
          <target state="translated">お楽しみのアルゴリズムは、特別なマッチングルールを実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="7bb19b504df5c1a9303c7a6f511b1fc2dc8c9766" translate="yes" xml:space="preserve">
          <source>The algorithm in &lt;code&gt;ssh_hostkey_fingerprint/1&lt;/code&gt; is md5 to be compatible with older ssh-keygen commands. The string from the second variant is prepended by the algorithm name in uppercase as in newer ssh-keygen commands.</source>
          <target state="translated">&lt;code&gt;ssh_hostkey_fingerprint/1&lt;/code&gt; のアルゴリズムはmd5で、古いssh-keygenコマンドと互換性があります。2番目のバリアントからの文字列は、新しいssh-keygenコマンドの場合と同様に、アルゴリズム名が大文字で先頭に追加されます。</target>
        </trans-unit>
        <trans-unit id="b2f989a67b5ca0281a96030c126b7a3d77ef6b31" translate="yes" xml:space="preserve">
          <source>The algorithm is a modification of the version attributed to Richard A. O'Keefe in the standard Prolog library.</source>
          <target state="translated">このアルゴリズムは、標準PrologライブラリのRichard A.O'Keefeに帰属するバージョンを修正したものです。</target>
        </trans-unit>
        <trans-unit id="7f680b0d6e8d6f4e75e82db44978468dc45a6e99" translate="yes" xml:space="preserve">
          <source>The algorithm is the same as for send above.</source>
          <target state="translated">アルゴリズムは上記のsendと同じです。</target>
        </trans-unit>
        <trans-unit id="230091aa46aa0a9b37e9fd8c10519ddfe76dd814" translate="yes" xml:space="preserve">
          <source>The algorithm that is used to draw a graph with as few crossed links as possible is called force graph. A force graph consists of nodes and directed links between nodes. Each node is associated with a repulsive force that pushes nodes away from each other. This force can be adjusted with the left slider or with the mouse wheel. Each link is associated with an attractive force that pulls the nodes nearer to each other. This force can be adjusted with the right slider. If this force becomes too strong, the graph will be unstable. The third parameter that can be adjusted is the length of the links. It is adjusted with the middle slider.</source>
          <target state="translated">交差するリンクをできるだけ少なくしてグラフを描くアルゴリズムをフォースグラフという。フォースグラフは、ノードとノード間の有向リンクで構成される。各ノードには、ノードを互いに遠ざける反発力が関連付けられています。この力は左のスライダーやマウスホイールで調整できます。各リンクは、ノードを互いに近くに引き寄せる魅力的な力に関連付けられています。この力は、右のスライダで調整できます。この力が強すぎると、グラフが不安定になります。3番目のパラメータはリンクの長さです。これは真ん中のスライダーで調整します。</target>
        </trans-unit>
        <trans-unit id="e0be3089ed3cdab42290e47bafffab640f5507bb" translate="yes" xml:space="preserve">
          <source>The algorithms should be in the preferred order. Selected signature algorithm can restrict which hash functions that may be selected. Default support for {md5, rsa} removed in ssl-8.0</source>
          <target state="translated">アルゴリズムは好ましい順序であることが望ましい。選択された署名アルゴリズムは、選択される可能性のあるハッシュ関数を制限することができます。ssl-8.0では{md5,rsa}のデフォルトサポートが削除されました。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
