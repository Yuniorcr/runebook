<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="3435c3c7e119d453781030831229b00d2aae4308" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;seq_trigger_ms(all)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;seq_trigger_ms(all)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="12125f862bd88ba67965933061b1e8ffb497058a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;stop([])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stop([])&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="35fdfb7f45f55a2469fead73d0b0f2671d97aa22" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;tab2file(Tab, Filename,[])&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;tab2file(Tab, Filename,[])&lt;/code&gt; 同等</target>
        </trans-unit>
        <trans-unit id="8b1fd8e3324385e0025a248348ad69eb198a41c5" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;to_comment(Tree, Prefix, F)&lt;/code&gt; for a default formatting function &lt;code&gt;F&lt;/code&gt;. The default &lt;code&gt;F&lt;/code&gt; simply calls &lt;code&gt;erl_prettypr:format/1&lt;/code&gt;.</source>
          <target state="translated">デフォルトのフォーマット関数 &lt;code&gt;F&lt;/code&gt; の &lt;code&gt;to_comment(Tree, Prefix, F)&lt;/code&gt; と同等です。デフォルトの &lt;code&gt;F&lt;/code&gt; は &lt;code&gt;erl_prettypr:format/1&lt;/code&gt; を呼び出すだけです。</target>
        </trans-unit>
        <trans-unit id="eae2ce8662958c07749c55c574f853292bfec24b" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;trace_port_control(Nodename,flush)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;trace_port_control(Nodename,flush)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="d7578f48790610f3c44dbae5fef894577661b5e8" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;trace_port_control(node(),Operation)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;trace_port_control(node(),Operation)&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="4d377ab9696754c5e53d4550bc8ccdd97d5702b7" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;tracer(Nodes,[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tracer(Nodes,[])&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="51dffba3fc75e4144074621aa4d06793ca23672c" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;tracer(node())&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;tracer(node())&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="5c92a73c7b7a3415ff776f26258300b95c1f3363" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;write_config(ConfigFile,Config,[])&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;write_config(ConfigFile,Config,[])&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="26a44d24ef15f8e4aadea7c524d8bd844c799c7a" translate="yes" xml:space="preserve">
          <source>Equivalent to &lt;code&gt;{dpr, []}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{dpr, []}&lt;/code&gt; 同等です。</target>
        </trans-unit>
        <trans-unit id="f2e24525b720a66a0f4cff0fad463acab81e68a5" translate="yes" xml:space="preserve">
          <source>Equivalent to application:start(crypto).</source>
          <target state="translated">application:start(crypto)と同等。</target>
        </trans-unit>
        <trans-unit id="af72cbb19cb1ea6aed8b8fafa57bc55f3386bd44" translate="yes" xml:space="preserve">
          <source>Equivalent to application:stop(crypto).</source>
          <target state="translated">application:stop(crypto)と同等。</target>
        </trans-unit>
        <trans-unit id="a189385c50fd1586960cbb94f70e0e55e00a2f0e" translate="yes" xml:space="preserve">
          <source>Equivalent to calling</source>
          <target state="translated">コールに相当する</target>
        </trans-unit>
        <trans-unit id="50ff0ff33ea3806bd3418b7385cc22ceda26c315" translate="yes" xml:space="preserve">
          <source>Equivalent to calling &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; repeatedly on all dependencies that are not yet started for an application that is not yet started.</source>
          <target state="translated">まだ開始されていないアプリケーションに対して、まだ開始されていないすべての依存関係で &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; を繰り返し呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="8f01934dff95ed0df2af4b1190b1ed1b23bd3d4f" translate="yes" xml:space="preserve">
          <source>Equivalent to calling &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; repeatedly on all dependencies that are not yet started for an application.</source>
          <target state="translated">アプリケーションでまだ開始されていないすべての依存関係で &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; を繰り返し呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="e1c95de46e7f37381b50f0f067501b205e4ec058" translate="yes" xml:space="preserve">
          <source>Equivalent to not having configured the callback.</source>
          <target state="translated">コールバックを設定していないことと同じです。</target>
        </trans-unit>
        <trans-unit id="309b2ce75ed346c41b0f7688b01e1b9964e51029" translate="yes" xml:space="preserve">
          <source>Equivalent to returning &lt;code&gt;3010&lt;/code&gt;, DIAMETER_UNKNOWN_PEER.</source>
          <target state="translated">&lt;code&gt;3010&lt;/code&gt; を返すのと同じ、DIAMETER_UNKNOWN_PEER。</target>
        </trans-unit>
        <trans-unit id="8564df778b76368fd2684cc3f4148709d4d2914e" translate="yes" xml:space="preserve">
          <source>Equivalent to the call &lt;code&gt;&lt;a href=&quot;#crypto_init-4&quot;&gt;crypto_init(Cipher, Key, &amp;lt;&amp;lt;&amp;gt;&amp;gt;, FlagOrOptions)&lt;/a&gt;&lt;/code&gt;. It is intended for ciphers without an IV (nounce).</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#crypto_init-4&quot;&gt;crypto_init(Cipher, Key, &amp;lt;&amp;lt;&amp;gt;&amp;gt;, FlagOrOptions)&lt;/a&gt;&lt;/code&gt; の呼び出しと同等です。IV（nounce）のない暗号を対象としています。</target>
        </trans-unit>
        <trans-unit id="4b7dccc36149146faa2047d801514181d5f9cac7" translate="yes" xml:space="preserve">
          <source>Equivalent to {0,1}</source>
          <target state="translated">0,1}に相当</target>
        </trans-unit>
        <trans-unit id="43cdb03bb51b870ef04d25eaa356f6c9b28794a9" translate="yes" xml:space="preserve">
          <source>Equivalent to {0,}</source>
          <target state="translated">0,}に相当する</target>
        </trans-unit>
        <trans-unit id="1ad44885e8ba849ee1218be9acaf48c60756d49a" translate="yes" xml:space="preserve">
          <source>Equivalent to {1,}</source>
          <target state="translated">1,}に相当する</target>
        </trans-unit>
        <trans-unit id="7ff30f443573384e0d479f04dc2df0cb57021fd6" translate="yes" xml:space="preserve">
          <source>Erase the name for the persistent term with key &lt;code&gt;Key&lt;/code&gt;. The return value will be &lt;code&gt;true&lt;/code&gt; if there was a persistent term with the key &lt;code&gt;Key&lt;/code&gt;, and &lt;code&gt;false&lt;/code&gt; if there was no persistent term associated with the key.</source>
          <target state="translated">キー &lt;code&gt;Key&lt;/code&gt; を使用して永続用語の名前を消去します。戻り値は、キー &lt;code&gt;Key&lt;/code&gt; に永続的な用語があった場合は &lt;code&gt;true&lt;/code&gt; になり、キーに関連付けられた永続的な用語がなかった場合は &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="67472ae3b9ab0c8dab5081fc0a7a9c2a28b9c3e6" translate="yes" xml:space="preserve">
          <source>Erases all items with a given key from a dictionary.</source>
          <target state="translated">辞書から指定されたキーを持つすべての項目を消去します。</target>
        </trans-unit>
        <trans-unit id="2389d6e66e1a178c050d5866f28fd99d620e9a07" translate="yes" xml:space="preserve">
          <source>Erases all items with a specified key from a dictionary.</source>
          <target state="translated">辞書から指定されたキーを持つすべての項目を消去します。</target>
        </trans-unit>
        <trans-unit id="fd14539a55fcb71355bd4e9e655edff6c93ab401" translate="yes" xml:space="preserve">
          <source>Erl_Interface</source>
          <target state="translated">Erl_Interface</target>
        </trans-unit>
        <trans-unit id="73005778a4f4d967ddcff2ebbccae0f463990331" translate="yes" xml:space="preserve">
          <source>Erlang</source>
          <target state="translated">Erlang</target>
        </trans-unit>
        <trans-unit id="d468f8a6d1662b0ace9ee5869e60d86eac8f7f20" translate="yes" xml:space="preserve">
          <source>Erlang Compiler</source>
          <target state="translated">Erlangコンパイラ</target>
        </trans-unit>
        <trans-unit id="07e78ae258d0fee88dd13927dab4e096b0ed5647" translate="yes" xml:space="preserve">
          <source>Erlang Data Type</source>
          <target state="translated">Erlangデータ型</target>
        </trans-unit>
        <trans-unit id="42974f2bb9d18a74ea429f6e95309b53d51adf8d" translate="yes" xml:space="preserve">
          <source>Erlang Debugger for debugging and testing of Erlang programs.</source>
          <target state="translated">ErlangプログラムのデバッグとテストのためのErlangデバッガ。</target>
        </trans-unit>
        <trans-unit id="8f2d761cd21e540e8b0e3336b9b92b81c26e09f3" translate="yes" xml:space="preserve">
          <source>Erlang Debugger.</source>
          <target state="translated">Erlangデバッガ。</target>
        </trans-unit>
        <trans-unit id="8d3286fe51409f0b4f2583b6797c1f7db3fee195" translate="yes" xml:space="preserve">
          <source>Erlang Monotonic Time</source>
          <target state="translated">アーラン単調時間</target>
        </trans-unit>
        <trans-unit id="9c55c16bf805dad66b9e9bfaa7fd0b73d96feb2a" translate="yes" xml:space="preserve">
          <source>Erlang ODBC application</source>
          <target state="translated">Erlang ODBC アプリケーション</target>
        </trans-unit>
        <trans-unit id="c359a9304be13082be208b3d09fdb16a104ad53b" translate="yes" xml:space="preserve">
          <source>Erlang Port Mapper Daemon</source>
          <target state="translated">Erlangポートマッパーデーモン</target>
        </trans-unit>
        <trans-unit id="51487311d5683bce6222db94d0837e7af2b422c8" translate="yes" xml:space="preserve">
          <source>Erlang Scripting Interface (ESI)</source>
          <target state="translated">Erlang スクリプトインターフェイス (ESI)</target>
        </trans-unit>
        <trans-unit id="3f7cddcb48745ba54daa50369446d68368ed182f" translate="yes" xml:space="preserve">
          <source>Erlang Server Interface</source>
          <target state="translated">Erlangサーバインタフェース</target>
        </trans-unit>
        <trans-unit id="f56c72a2516dcc9b248eaf7b2d27312cd3a95974" translate="yes" xml:space="preserve">
          <source>Erlang Server Interface (ESI) functions provide a tight and efficient interface to the execution of Erlang functions. This interface, on the other hand, is &lt;code&gt;Inets&lt;/code&gt; specific.</source>
          <target state="translated">Erlangサーバーインターフェース（ESI）関数は、Erlang関数の実行にタイトで効率的なインターフェースを提供します。一方、このインターフェースは &lt;code&gt;Inets&lt;/code&gt; 固有です。</target>
        </trans-unit>
        <trans-unit id="0bba9cc20749d74fe42699272a7007ef30cb1510" translate="yes" xml:space="preserve">
          <source>Erlang System Time</source>
          <target state="translated">エラングシステムの時間</target>
        </trans-unit>
        <trans-unit id="a3a844688808d03cad721cc5dff89792d0f7e174" translate="yes" xml:space="preserve">
          <source>Erlang Top</source>
          <target state="translated">エラングトップ</target>
        </trans-unit>
        <trans-unit id="1b6617db302d2231ecda1838479a85b3fc8ddbc5" translate="yes" xml:space="preserve">
          <source>Erlang Top is a tool for presenting information about Erlang processes similar to the information presented by &quot;top&quot; in UNIX.</source>
          <target state="translated">Erlang Topは、UNIXの &quot;top &quot;で表示される情報に似たErlangプロセスの情報を表示するためのツールです。</target>
        </trans-unit>
        <trans-unit id="187ed2e2dd100a53b1edf9eb7daca74ec4d62361" translate="yes" xml:space="preserve">
          <source>Erlang Top, &lt;code&gt;etop&lt;/code&gt;, is a tool for presenting information about Erlang processes similar to the information presented by &lt;code&gt;top&lt;/code&gt; in UNIX.</source>
          <target state="translated">Erlang Top、 &lt;code&gt;etop&lt;/code&gt; は、UNIXの &lt;code&gt;top&lt;/code&gt; によって表示される情報と同様のErlangプロセスに関する情報を表示するためのツールです。</target>
        </trans-unit>
        <trans-unit id="cdc0797038958d6766acff3fe7dd54d7bdc38d68" translate="yes" xml:space="preserve">
          <source>Erlang alternate representation of PKIX certificate, also referred to as &lt;code&gt;otp&lt;/code&gt; type</source>
          <target state="translated">PKIX証明書のErlang代替表現 &lt;code&gt;otp&lt;/code&gt; タイプとも呼ばれます</target>
        </trans-unit>
        <trans-unit id="6bb00551b7c8a13bac98d39fc44b7d468d8e58e6" translate="yes" xml:space="preserve">
          <source>Erlang archive files can contain entire Erlang applications or parts of applications. The structure in an archive file is the same as the directory structure for an application. If you, for example, create an archive of &lt;code&gt;mnesia-4.4.7&lt;/code&gt;, the archive file must be named &lt;code&gt;mnesia-4.4.7.ez&lt;/code&gt; and it must contain a top directory named &lt;code&gt;mnesia-4.4.7&lt;/code&gt;. If the version part of the name is omitted, it must also be omitted in the archive. That is, a &lt;code&gt;mnesia.ez&lt;/code&gt; archive must contain a &lt;code&gt;mnesia&lt;/code&gt; top directory.</source>
          <target state="translated">Erlangアーカイブファイルには、Erlangアプリケーション全体またはアプリケーションの一部を含めることができます。アーカイブファイルの構造は、アプリケーションのディレクトリ構造と同じです。たとえば、 &lt;code&gt;mnesia-4.4.7&lt;/code&gt; のアーカイブを作成する場合、アーカイブファイルの名前は &lt;code&gt;mnesia-4.4.7.ez&lt;/code&gt; にする必要があり、アーカイブファイルには &lt;code&gt;mnesia-4.4.7&lt;/code&gt; という名前のトップディレクトリが含まれている必要があります。名前のバージョン部分を省略する場合は、アーカイブでも省略する必要があります。つまり、 &lt;code&gt;mnesia.ez&lt;/code&gt; アーカイブには、 &lt;code&gt;mnesia&lt;/code&gt; トップディレクトリが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="3d19420b4f26bc25d3f2b589c3db03baaba26b7a" translate="yes" xml:space="preserve">
          <source>Erlang assembler source code. It generates a &lt;code&gt;.beam&lt;/code&gt; file.</source>
          <target state="translated">Erlangアセンブラーのソースコード。 &lt;code&gt;.beam&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="2b8e5109d4052fa7d4dbe33fd696c214d943ce0c" translate="yes" xml:space="preserve">
          <source>Erlang code is divided into &lt;strong&gt;modules&lt;/strong&gt;. A module consists of a sequence of attributes and function declarations, each terminated by period (.).</source>
          <target state="translated">Erlangのコードは&lt;strong&gt;モジュールに&lt;/strong&gt;分かれてい&lt;strong&gt;ます&lt;/strong&gt;。モジュールは、一連の属性と関数宣言で構成され、それぞれがピリオド（。）で終了します。</target>
        </trans-unit>
        <trans-unit id="e3580f7edee6c63255527cb40cf39998af0eb91c" translate="yes" xml:space="preserve">
          <source>Erlang code server.</source>
          <target state="translated">Erlangのコードサーバー。</target>
        </trans-unit>
        <trans-unit id="a8b6ae591b2da2cd08772f799d4fead6ed20372d" translate="yes" xml:space="preserve">
          <source>Erlang core source code. It generates a &lt;code&gt;.beam&lt;/code&gt; file.</source>
          <target state="translated">Erlangコアソースコード。 &lt;code&gt;.beam&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="16513f82d634670fc9605c2661f8b142d4a02889" translate="yes" xml:space="preserve">
          <source>Erlang does not have a string data type. Instead, strings can be represented by lists of Unicode characters. This implies for example that the list &lt;code&gt;[97,98,99]&lt;/code&gt; is equivalent to &quot;abc&quot;. The Erlang shell is &quot;clever&quot; and guesses what list you mean and outputs it in what it thinks is the most appropriate form, for example:</source>
          <target state="translated">Erlangには文字列データ型がありません。代わりに、文字列はUnicode文字のリストで表すことができます。これは、たとえば、リスト &lt;code&gt;[97,98,99]&lt;/code&gt; が「abc」と同等であることを意味します。Erlangシェルは「賢い」ものであり、あなたが何を意味するのかを推測し、それが最も適切な形式であると考えるものに出力します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="2e644faa020a368af8ed4f13a6fd7ee4f1d44e74" translate="yes" xml:space="preserve">
          <source>Erlang drivers and NIF-shared objects still cannot be named with names containing code points &amp;gt; 127. This limitation will be removed in a future release. However, Erlang modules can, but it is definitely not a good idea and is still considered experimental.</source>
          <target state="translated">ErlangドライバーとNIF共有オブジェクトには、コードポイントが127を超える名前を付けることはできません。この制限は将来のリリースで削除される予定です。しかしながら、Erlangモジュールは可能ですが、それは間違いなく良い考えではなく、まだ実験的と考えられています。</target>
        </trans-unit>
        <trans-unit id="a9687abee379f1b2fda3153a94bdccbeb5044d34" translate="yes" xml:space="preserve">
          <source>Erlang error logger.</source>
          <target state="translated">Erlangのエラーロガー。</target>
        </trans-unit>
        <trans-unit id="ce6e28755c8636a9c1a78be038968d61ca25b8ec" translate="yes" xml:space="preserve">
          <source>Erlang has a built-in feature for error handling between processes. Terminating processes emit exit signals to all linked processes, which can terminate as well or handle the exit in some way. This feature can be used to build hierarchical program structures where some processes are supervising other processes, for example, restarting them if they terminate abnormally.</source>
          <target state="translated">Erlangにはプロセス間のエラー処理機能が組み込まれています。終了するプロセスはすべてのリンクされたプロセスに終了シグナルを出します。この機能は階層的なプログラム構造を構築するときに使うことができ、例えば、いくつかのプロセスが他のプロセスを監視していて、異常終了した場合には再起動させるといったことができます。</target>
        </trans-unit>
        <trans-unit id="d2f1997af9697075030acd004bcc111b8be8ff81" translate="yes" xml:space="preserve">
          <source>Erlang has a copying semi-space garbage collector. This means that when doing a garbage collection, the terms are copied from one distinct area, called the &lt;strong&gt;from space&lt;/strong&gt;, to a new clean area, called the &lt;strong&gt;to space&lt;/strong&gt;. The collector starts by &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1980&quot;&gt;scanning the root-set&lt;/a&gt;&lt;/code&gt; (stack, registers, etc).</source>
          <target state="translated">Erlangにはコピーセミスペースガベージコレクターがあります。これは、ガベージコレクションを実行するときに、用語が&lt;strong&gt;fromスペース&lt;/strong&gt;と呼ばれる1つの別個の領域&lt;strong&gt;から&lt;/strong&gt;、&lt;strong&gt;toスペース&lt;/strong&gt;と呼ばれる新しいクリーン領域にコピーされることを意味&lt;strong&gt;します&lt;/strong&gt;。コレクターは &lt;code&gt;&lt;a href=&quot;https://github.com/erlang/otp/blob/OTP-18.0/erts/emulator/beam/erl_gc.c#L1980&quot;&gt;scanning the root-set&lt;/a&gt;&lt;/code&gt; （スタック、レジスターなど）をスキャンすることから始めます。</target>
        </trans-unit>
        <trans-unit id="0ebc560c3bfda11ba0b7129d9ef5900027353cef" translate="yes" xml:space="preserve">
          <source>Erlang has many standard modules to help you do things. For example, the module &lt;code&gt;io&lt;/code&gt; contains many functions that help in doing formatted input/output. To look up information about standard modules, the command &lt;code&gt;erl -man&lt;/code&gt; can be used at the operating shell or command prompt (the same place as you started &lt;code&gt;erl&lt;/code&gt;). Try the operating system shell command:</source>
          <target state="translated">Erlangには、作業を支援する多くの標準モジュールがあります。たとえば、モジュール &lt;code&gt;io&lt;/code&gt; には、フォーマットされた入出力の実行に役立つ多くの関数が含まれています。標準モジュールに関する情報を検索するには、オペレーティングシェルまたはコマンドプロンプトでコマンド &lt;code&gt;erl -man&lt;/code&gt; を使用できます（ &lt;code&gt;erl&lt;/code&gt; を起動したのと同じ場所）。オペレーティングシステムのシェルコマンドを試します。</target>
        </trans-unit>
        <trans-unit id="5108e42bb50a05f01c9a9144f64dfb14695b92d1" translate="yes" xml:space="preserve">
          <source>Erlang has similarities to XSLT since both languages have a functional programming approach.</source>
          <target state="translated">ErlangはXSLTと類似しています。</target>
        </trans-unit>
        <trans-unit id="54da91f3063c85844ca2da712c147bc53ed995f2" translate="yes" xml:space="preserve">
          <source>Erlang has similarities to XSLT since both languages have a functional programming approach. Using &lt;code&gt;xmerl_xpath&lt;/code&gt; it is possible to write XSLT like transforms in Erlang.</source>
          <target state="translated">ErlangはXSLTと類似していますが、どちらの言語にも関数型プログラミングアプローチがあるからです。 &lt;code&gt;xmerl_xpath&lt;/code&gt; を使用すると、Erlangで変換のようなXSLTを作成できます。</target>
        </trans-unit>
        <trans-unit id="64af78c4b1b41cbbf7a74b3dce63a615349c373a" translate="yes" xml:space="preserve">
          <source>Erlang http server service start/stop</source>
          <target state="translated">Erlang httpサーバサービスの開始/停止</target>
        </trans-unit>
        <trans-unit id="765bdb0001f58fd4e091acc6a98e058df60ec1d0" translate="yes" xml:space="preserve">
          <source>Erlang interface towards epmd</source>
          <target state="translated">epmdに向けたErlangのインターフェース</target>
        </trans-unit>
        <trans-unit id="3689b2e7d9d045e61ec0c9d2ec01ad9fd859b5d2" translate="yes" xml:space="preserve">
          <source>Erlang is a dynamically typed language. Still, it comes with a notation for declaring sets of Erlang terms to form a particular type. This effectively forms specific subtypes of the set of all Erlang terms.</source>
          <target state="translated">Erlangは動的型付け言語です。しかし、Erlang用語の集合を宣言して特定の型を作るための記法があります。これは効果的にすべてのErlang用語の集合の特定のサブタイプを形成します。</target>
        </trans-unit>
        <trans-unit id="44d2d5a61dc6457e1bdbd30ffd05f99721b445df" translate="yes" xml:space="preserve">
          <source>Erlang is designed for massive concurrency. Erlang processes are lightweight (grow and shrink dynamically) with small memory footprint, fast to create and terminate, and the scheduling overhead is low.</source>
          <target state="translated">Erlangは大規模な同時実行のために設計されています。Erlangプロセスは軽量で(動的に成長したり縮小したり)、メモリフットプリントが小さく、作成や終了が速く、スケジューリングのオーバーヘッドが低いです。</target>
        </trans-unit>
        <trans-unit id="bc5bee2abda059985daa5adfd52b696f8c537b55" translate="yes" xml:space="preserve">
          <source>Erlang is started with &lt;code&gt;ex2.config&lt;/code&gt; as configuration and we check the default set of algorithms before starting ssh:</source>
          <target state="translated">Erlangは構成として &lt;code&gt;ex2.config&lt;/code&gt; で開始され、sshを開始する前にデフォルトのアルゴリズムセットをチェックします。</target>
        </trans-unit>
        <trans-unit id="c6840288d1fb39fbdf54c46257efa463f93fa5b7" translate="yes" xml:space="preserve">
          <source>Erlang libraries (for example, file handling).</source>
          <target state="translated">Erlangのライブラリ(例えばファイル処理)。</target>
        </trans-unit>
        <trans-unit id="a71829eb95cf63e3985cd27a8c6a2a813caca043" translate="yes" xml:space="preserve">
          <source>Erlang manages dynamic memory with a &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection&quot;&gt;tracing garbage collector&lt;/a&gt;&lt;/code&gt;. More precisely a per process generational semi-space copying collector using Cheney's copy collection algorithm together with a global large object space. (See C. J. Cheney in &lt;code&gt;&lt;a href=&quot;#References&quot;&gt;References&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">Erlangは &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Tracing_garbage_collection&quot;&gt;tracing garbage collector&lt;/a&gt;&lt;/code&gt; 動的メモリを管理します。より正確には、Cheneyのコピーコレクションアルゴリズムとグローバルラージオブジェクトスペースを使用した、プロセスごとの世代別セミスペースコピーコレクター。（ &lt;code&gt;&lt;a href=&quot;#References&quot;&gt;References&lt;/a&gt;&lt;/code&gt; CJ Cheneyを参照してください。）</target>
        </trans-unit>
        <trans-unit id="fcf0f0cf0019dc2c84ba4e7fff6df4fc0d3a3352" translate="yes" xml:space="preserve">
          <source>Erlang mode for Emacs</source>
          <target state="translated">Emacs の Erlang モード</target>
        </trans-unit>
        <trans-unit id="e08c0abcaf6055f73df5bed0a508f68c997e28c6" translate="yes" xml:space="preserve">
          <source>Erlang monotonic time as such is new as from ERTS 7.0. It is introduced to detach time measurements, such as elapsed time from calendar time. In many use cases there is a need to measure elapsed time or specify a time relative to another point in time without the need to know the involved times in UTC or any other globally defined time scale. By introducing a time scale with a local definition of where it starts, time that do not concern calendar time can be managed on that time scale. Erlang monotonic time uses such a time scale with a locally defined start.</source>
          <target state="translated">Erlangの単調時間はERTS 7.0から新しくなりました。これは経過時間などの時間計測をカレンダー時間から切り離すために導入されました。多くのユースケースでは、UTCやグローバルに定義されたタイムスケールを使わずに経過時間を計測したり、別の時点からの相対的な時間を指定したりする必要があります。どこから始まるのかをローカルに定義したタイムスケールを導入することで、カレンダーの時間に関係ない時間をそのタイムスケールで管理することができます。Erlangのモノトニックタイムはこのようなローカルに定義された開始点を持つタイムスケールを使っています。</target>
        </trans-unit>
        <trans-unit id="3d7c91bd498cf4f960de9d850e22a4c729687a73" translate="yes" xml:space="preserve">
          <source>Erlang network authentication server.</source>
          <target state="translated">Erlangネットワーク認証サーバ。</target>
        </trans-unit>
        <trans-unit id="29517dc6e2f8e2e0a4ff1233ee7c1466861445b4" translate="yes" xml:space="preserve">
          <source>Erlang networking kernel.</source>
          <target state="translated">Erlang ネットワークカーネル。</target>
        </trans-unit>
        <trans-unit id="62e719f2ccde088494394ba096cbfcf921b94352" translate="yes" xml:space="preserve">
          <source>Erlang nodes can communicate across at least two preceding and two subsequent releases.</source>
          <target state="translated">Erlangノードは少なくとも2つ前のリリースと2つ後のリリースをまたいで通信することができます。</target>
        </trans-unit>
        <trans-unit id="3e1ad4149d3076204cf6d8721d6a7b0e6aedb3e7" translate="yes" xml:space="preserve">
          <source>Erlang ports conceptually are very similar to Erlang processes. Erlang processes execute Erlang code in the virtual machine, while an Erlang port execute native code typically used for communication with the outside world. For example, when an Erlang process wants to communicate using TCP over the network, it communicates via an Erlang port implementing the TCP socket interface in native code. Both Erlang Processes and Ports communicate using asynchronous signaling. The native code executed by an Erlang port is a collection of callback functions, called a driver. Each callback more or less implements the code of a signal to, or from the port.</source>
          <target state="translated">Erlangポートは概念的にはErlangプロセスと非常に似ています。Erlangプロセスは仮想マシンの中でErlangコードを実行しますが、Erlangポートは外部との通信に使われるネイティブコードを実行します。例えば、Erlangプロセスがネットワーク上でTCPを使って通信したいとき、ネイティブコードでTCPソケットインターフェイスを実装したErlangポートを使って通信します。Erlangプロセスもポートも非同期シグナリングを使って通信します。Erlangポートによって実行されるネイティブコードはドライバと呼ばれるコールバック関数の集まりです。それぞれのコールバックは多かれ少なかれポートへのシグナルのコードを実装しています。</target>
        </trans-unit>
        <trans-unit id="c182e6ec8e232fd8d468621cfed562e80c94232b" translate="yes" xml:space="preserve">
          <source>Erlang process</source>
          <target state="translated">エラングプロセス</target>
        </trans-unit>
        <trans-unit id="e87b1cdc2bee4003f12076e20d8786d64b08abdc" translate="yes" xml:space="preserve">
          <source>Erlang programs must be &lt;strong&gt;compiled&lt;/strong&gt; to object code. The compiler can generate a new file that contains the object code. The current abstract machine, which runs the object code, is called BEAM, therefore the object files get the suffix &lt;code&gt;.beam&lt;/code&gt;. The compiler can also generate a binary which can be loaded directly.</source>
          <target state="translated">Erlangプログラムはオブジェクトコードに&lt;strong&gt;コンパイル&lt;/strong&gt;する必要があります。コンパイラは、オブジェクトコードを含む新しいファイルを生成できます。オブジェクトコードを実行する現在の抽象マシンはBEAMと呼ばれるため、オブジェクトファイルには &lt;code&gt;.beam&lt;/code&gt; というサフィックスが付きます。コンパイラーは、直接ロードできるバイナリーも生成できます。</target>
        </trans-unit>
        <trans-unit id="8327cd2cd6abd4152e444c64366c2297e16ac1e9" translate="yes" xml:space="preserve">
          <source>Erlang provides a number of data types, which are listed in this section.</source>
          <target state="translated">Erlangはいくつかのデータ型を提供しています。</target>
        </trans-unit>
        <trans-unit id="60affb0517ad2f1e7a6e468d34c6cf5a5d797985" translate="yes" xml:space="preserve">
          <source>Erlang records the following data in a local database if found in system &lt;code&gt;inet&lt;/code&gt; configuration files (or system registry):</source>
          <target state="translated">Erlangは、システムの &lt;code&gt;inet&lt;/code&gt; 構成ファイル（またはシステムレジストリ）で見つかった場合、次のデータをローカルデータベースに記録します。</target>
        </trans-unit>
        <trans-unit id="1291d12522a9a2448a438bb6ce42d1e9cd92828f" translate="yes" xml:space="preserve">
          <source>Erlang representation of &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3447.txt&quot;&gt; Rivest-Shamir-Adleman cryptosystem (RSA)&lt;/a&gt;&lt;/code&gt; keys follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3447.txt&quot;&gt; Rivest-Shamir-Adleman cryptosystem (RSA)&lt;/a&gt;&lt;/code&gt; 鍵のErlang表現は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="a76284d96d97fb63bf3fb9bc0a624b9d6415224e" translate="yes" xml:space="preserve">
          <source>Erlang representation of &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc6979.txt&quot;&gt;Digital Signature Algorithm (DSA)&lt;/a&gt;&lt;/code&gt; keys</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc6979.txt&quot;&gt;Digital Signature Algorithm (DSA)&lt;/a&gt;&lt;/code&gt; 鍵のErlang表現</target>
        </trans-unit>
        <trans-unit id="94414c346ee46d48c4cf5bab52d492c3b501407a" translate="yes" xml:space="preserve">
          <source>Erlang representation of &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc6979.txt&quot;&gt;Elliptic Curve Digital Signature Algorithm (ECDSA)&lt;/a&gt;&lt;/code&gt; keys follows:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc6979.txt&quot;&gt;Elliptic Curve Digital Signature Algorithm (ECDSA)&lt;/a&gt;&lt;/code&gt; キーのErlang表現は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="15d2a8b937fdd18453b5bd06e5c5ba28f1d01b2b" translate="yes" xml:space="preserve">
          <source>Erlang representation of &lt;code&gt;Asn1Type&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Asn1Type&lt;/code&gt; Erlang表現</target>
        </trans-unit>
        <trans-unit id="b0155a7a701bcba47e3587c70dd05599e2474e91" translate="yes" xml:space="preserve">
          <source>Erlang representation of &lt;code&gt;Asn1Type&lt;/code&gt;. If &lt;code&gt;Asn1Type&lt;/code&gt; is 'SubjectPublicKeyInfo', &lt;code&gt;Entity&lt;/code&gt; must be either an &lt;code&gt;rsa_public_key()&lt;/code&gt;, &lt;code&gt;dsa_public_key()&lt;/code&gt; or an &lt;code&gt;ec_public_key()&lt;/code&gt; and this function creates the appropriate 'SubjectPublicKeyInfo' entry.</source>
          <target state="translated">&lt;code&gt;Asn1Type&lt;/code&gt; Erlang表現。場合 &lt;code&gt;Asn1Type&lt;/code&gt; 「SubjectPublicKeyInfoで」は、 &lt;code&gt;Entity&lt;/code&gt; のいずれかでなければならない &lt;code&gt;rsa_public_key()&lt;/code&gt; 、 &lt;code&gt;dsa_public_key()&lt;/code&gt; または &lt;code&gt;ec_public_key()&lt;/code&gt; この関数は、適切な「SubjectPublicKeyInfoで」エントリを作成します。</target>
        </trans-unit>
        <trans-unit id="cc60c93e27f6c8b3751a0b9be2aef0b7c9ee6585" translate="yes" xml:space="preserve">
          <source>Erlang representation of CRL and CRL extensions profile derived from ASN.1 specifications and RFC 5280 are as follows:</source>
          <target state="translated">ASN.1仕様とRFC5280から派生したCRLとCRL拡張プロファイルのErlang表現は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7e7a74773d5822d3f5d9f95c718279c0a8e5cadf" translate="yes" xml:space="preserve">
          <source>Erlang representation of PKIX certificates derived from ASN.1 specifications see also &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5280.txt&quot;&gt;X509 certificates (RFC 5280)&lt;/a&gt;&lt;/code&gt;, also referred to as &lt;code&gt;plain&lt;/code&gt; type, are as follows:</source>
          <target state="translated">ASN.1仕様から派生したPKIX証明書のErlang表現は、 &lt;code&gt;plain&lt;/code&gt; タイプとも呼ばれる &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc5280.txt&quot;&gt;X509 certificates (RFC 5280)&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="49096fc777911b9b7aae166d989d964697ae34bf" translate="yes" xml:space="preserve">
          <source>Erlang representation of a PKCS#10 certification request derived from ASN.1 specifications and RFC 5280 are as follows:</source>
          <target state="translated">ASN.1仕様とRFC5280から派生したPKCS#10認証要求のErlang表現は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="85c25f9ae8fa9d9d39662ad16e02609d37617181" translate="yes" xml:space="preserve">
          <source>Erlang scripting support</source>
          <target state="translated">Erlang スクリプトのサポート</target>
        </trans-unit>
        <trans-unit id="68d6ef608f1df29338cbe204521ef8e485792adf" translate="yes" xml:space="preserve">
          <source>Erlang shell</source>
          <target state="translated">エラングシェル</target>
        </trans-unit>
        <trans-unit id="3ec6f33c2c87d2614a5f14675e151dcb88d2f6d2" translate="yes" xml:space="preserve">
          <source>Erlang source code. It generates a &lt;code&gt;.beam&lt;/code&gt; file.</source>
          <target state="translated">Erlangソースコード。 &lt;code&gt;.beam&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="394f59990698b35f3acf15e5b4733929802b64a2" translate="yes" xml:space="preserve">
          <source>Erlang ssl application is able to use private keys provided by OpenSSL engines using the following mechanism:</source>
          <target state="translated">Erlangのsslアプリケーションは、OpenSSLエンジンが提供する秘密鍵を以下のメカニズムを使って利用することができます。</target>
        </trans-unit>
        <trans-unit id="864cda352b2b7242047a4bdfcdd2ac33213d752a" translate="yes" xml:space="preserve">
          <source>Erlang strings in ISO Latin-1 are a subset of Unicode strings.</source>
          <target state="translated">ISO Latin-1のErlang文字列はUnicode文字列のサブセットです。</target>
        </trans-unit>
        <trans-unit id="65e5587caf81453e386959f97bcab82d41c225ab" translate="yes" xml:space="preserve">
          <source>Erlang style &lt;code&gt;comments&lt;/code&gt;, starting with a &lt;code&gt;'%'&lt;/code&gt;, are allowed in grammar files.</source>
          <target state="translated">文法ファイルでは、 &lt;code&gt;'%'&lt;/code&gt; で始まるErlangスタイルの &lt;code&gt;comments&lt;/code&gt; 使用できます。</target>
        </trans-unit>
        <trans-unit id="aac9baf56b360fdfc2b9cc3c5cbc1d06e716f4d2" translate="yes" xml:space="preserve">
          <source>Erlang style comments starting with a &lt;code&gt;%&lt;/code&gt; are allowed in scanner files. A definition file has the following format:</source>
          <target state="translated">&lt;code&gt;%&lt;/code&gt; で始まるErlangスタイルのコメントは、スキャナーファイルで許可されます。定義ファイルの形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ba2ee1db7cfb83a9a28a4d5fc176d79a34ec95de" translate="yes" xml:space="preserve">
          <source>Erlang supports change of code in a running system. Code replacement is done on module level.</source>
          <target state="translated">Erlangは実行中のシステムのコード変更をサポートしています。コードの置き換えはモジュールレベルで行われます。</target>
        </trans-unit>
        <trans-unit id="6e8d4d4b448e1b670d768db4e0a92608c3a95454" translate="yes" xml:space="preserve">
          <source>Erlang terms are encoded with a 1 byte tag that identifies the type of object, a 2- or 4-byte length field, and then the data itself. Specifically:</source>
          <target state="translated">Erlangの用語はオブジェクトのタイプを識別する1バイトのタグ、2バイトか4バイトの長さのフィールド、そしてデータそのものでエンコードされています。具体的には</target>
        </trans-unit>
        <trans-unit id="95649cce77176d28bea4f7f9813a087c9d5bff06" translate="yes" xml:space="preserve">
          <source>Erlang test suite - skeleton for a callback module for the erlang test server.</source>
          <target state="translated">Erlangテストスイート-erlangテストサーバのコールバックモジュールのスケルトン。</target>
        </trans-unit>
        <trans-unit id="dc86f979a787632108431c41a594f7100fff02e9" translate="yes" xml:space="preserve">
          <source>Erlang tracer behavior.</source>
          <target state="translated">Erlangのトレーサーの振る舞い。</target>
        </trans-unit>
        <trans-unit id="52a8e38416f8a3016af48ad3490b37ffcfecba30" translate="yes" xml:space="preserve">
          <source>Erlang tracing is a seething pile of pain that involves reasonably complex knowledge of clever ports, tracing return formats, and specialized tracing &lt;code&gt;MatchSpecs&lt;/code&gt; (which are really their own special kind of hell). The tracing mechanism is very powerful indeed, but it can be hard to grasp.</source>
          <target state="translated">Erlangトレースは、巧妙なポート、トレースの戻り形式、および特殊なトレース &lt;code&gt;MatchSpecs&lt;/code&gt; （実際には、独自の特別な種類の地獄）のかなり複雑な知識を伴う、山積みの痛みです。トレースメカニズムは確かに非常に強力ですが、把握するのが難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="ddceda35765ee0227c5090e371d8fdc61546e8f1" translate="yes" xml:space="preserve">
          <source>Erlang web server api callback functions</source>
          <target state="translated">Erlang ウェブサーバ api コールバック関数</target>
        </trans-unit>
        <trans-unit id="608a17c106581ea476e7483075a6103aecf265ea" translate="yes" xml:space="preserve">
          <source>Erlang web server api data types</source>
          <target state="translated">ErlangウェブサーバAPIのデータ型</target>
        </trans-unit>
        <trans-unit id="2b3867adf6f8205f09a3bd49e01fbcbdbf9da4fb" translate="yes" xml:space="preserve">
          <source>Erlang web server api help functions</source>
          <target state="translated">ErlangウェブサーバAPIヘルプ機能</target>
        </trans-unit>
        <trans-unit id="e977ff78a62ba0710c1b49f898ec553c8ecf5674" translate="yes" xml:space="preserve">
          <source>Erlang web server internal API for handling of, for example, interaction data exported by module &lt;code&gt;mod_alias&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;mod_alias&lt;/code&gt; によってエクスポートされたインタラクションデータなどを処理するためのErlang Webサーバー内部API 。</target>
        </trans-unit>
        <trans-unit id="9a307b26f697b741dfa644bc3ed165306ce52304" translate="yes" xml:space="preserve">
          <source>Erlang's selective receive statement is often used to describe simple state machine examples in straightforward Erlang code. The following is a possible implementation of the first example:</source>
          <target state="translated">Erlangの選択的受信文は、簡単なErlangコードの中のシンプルなステートマシンの例を記述するのによく使われます。以下は最初の例の実装です。</target>
        </trans-unit>
        <trans-unit id="33ba7d54e0f96d8437a94bb12fde30675b3aea12" translate="yes" xml:space="preserve">
          <source>Erlang, like most modern functional programming languages, has higher-order functions. Here is an example using the shell:</source>
          <target state="translated">Erlangはほとんどの最新の関数型プログラミング言語と同じように、高次の関数を持っています。これはシェルを使った例です。</target>
        </trans-unit>
        <trans-unit id="724caea7c7c627b75c378f119b8867f452d18c46" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 21.0</source>
          <target state="translated">Erlang/OTP 21.0</target>
        </trans-unit>
        <trans-unit id="a37aa0b2d81504b1c55927908b1946024faaaea8" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 21.0 provides a standard API for logging through &lt;code&gt;Logger&lt;/code&gt;, which is part of the Kernel application. Logger consists of the API for issuing log events, and a customizable backend where log handlers, filters and formatters can be plugged in.</source>
          <target state="translated">Erlang / OTP 21.0は、カーネルアプリケーションの一部である &lt;code&gt;Logger&lt;/code&gt; を介してロギングするための標準APIを提供します。ロガーは、ログイベントを発行するためのAPIと、ログハンドラー、フィルター、フォーマッターをプラグインできるカスタマイズ可能なバックエンドで構成されます。</target>
        </trans-unit>
        <trans-unit id="0370d36afb3ca9b24b17404852fd441ad337e632" translate="yes" xml:space="preserve">
          <source>Erlang/OTP 23.2</source>
          <target state="translated">Erlang/OTP 23.2</target>
        </trans-unit>
        <trans-unit id="4201df51d957ddf617682f4a2c5fb78010bb6804" translate="yes" xml:space="preserve">
          <source>Erlang/OTP R14B01 added support for Unicode filenames, but it was not complete and was by default disabled on platforms where no guarantee was given for the filename encoding.</source>
          <target state="translated">Erlang/OTP R14B01はUnicodeファイル名のサポートを追加しましたが、完全ではなく、ファイル名のエンコーディングが保証されていないプラットフォームではデフォルトで無効になっていました。</target>
        </trans-unit>
        <trans-unit id="81b7aeec5d6a5cc979cd67b4207b7f88c8c95d10" translate="yes" xml:space="preserve">
          <source>Erlang/OTP R7B and later versions have provision for asynchronous function calls, using a thread pool provided by Erlang. There is also a select call, which can be used for asynchronous drivers.</source>
          <target state="translated">Erlang/OTP R7Bとそれ以降のバージョンでは、Erlangが提供するスレッドプールを使って非同期関数呼び出しができるようになっています。セレクトコールもあり、これは非同期ドライバに使うことができます。</target>
        </trans-unit>
        <trans-unit id="9ff106d6880e027ac3e49797ee7acb3586fabd6f" translate="yes" xml:space="preserve">
          <source>Erlang/OTP adds a either padding of zeroes or padding with random bytes.</source>
          <target state="translated">Erlang/OTPはゼロのパディングかランダムバイトのパディングを追加します。</target>
        </trans-unit>
        <trans-unit id="c0713309ba690b66cdaebc859af475a2f049b598" translate="yes" xml:space="preserve">
          <source>Erlang/OTP comes with a number of components, each implementing some specific functionality. Components are with Erlang/OTP terminology called &lt;strong&gt;applications&lt;/strong&gt;. Examples of Erlang/OTP applications are Mnesia, which has everything needed for programming database services, and Debugger, which is used to debug Erlang programs. The minimal system based on Erlang/OTP consists of the following two applications:</source>
          <target state="translated">Erlang / OTPにはいくつかのコンポーネントが付属しており、それぞれに特定の機能が実装されています。コンポーネントには、&lt;strong&gt;アプリケーション&lt;/strong&gt;と呼ばれるErlang / OTP用語が使用されてい&lt;strong&gt;ます&lt;/strong&gt;。Erlang / OTPアプリケーションの例は、データベースサービスのプログラミングに必要なすべてを備えたMnesiaと、Erlangプログラムのデバッグに使用されるデバッガーです。Erlang / OTPに基づく最小限のシステムは、次の2つのアプリケーションで構成されています。</target>
        </trans-unit>
        <trans-unit id="abc2ca56e7a524de500413e513bdee4913c85b3e" translate="yes" xml:space="preserve">
          <source>Erlang/OTP comes with these boot scripts:</source>
          <target state="translated">Erlang/OTPにはこれらのブートスクリプトが付属しています。</target>
        </trans-unit>
        <trans-unit id="cf8121d23c3e906780a36e5718d7e3f386d37baa" translate="yes" xml:space="preserve">
          <source>Erlang/OTP contains several tools to help finding bottlenecks:</source>
          <target state="translated">Erlang/OTPにはボトルネックを見つけるのに役立つツールがいくつか含まれています。</target>
        </trans-unit>
        <trans-unit id="fd1ed92f97b5afe6df18bf3120dc1851420ed9d8" translate="yes" xml:space="preserve">
          <source>Erlang/OTP has two operators for testing term equality: &lt;code&gt;==/2&lt;/code&gt; and &lt;code&gt;=:=/2&lt;/code&gt;. The difference is all about the integers that can be represented by floats. For example, &lt;code&gt;2 == 2.0&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt; while &lt;code&gt;2 =:= 2.0&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt;. Normally this is a minor issue, but the &lt;code&gt;qlc&lt;/code&gt; module cannot ignore the difference, which affects the user's choice of operators in QLCs.</source>
          <target state="translated">Erlang / OTPには、用語の等価性をテストするための2つの演算子、 &lt;code&gt;==/2&lt;/code&gt; および &lt;code&gt;=:=/2&lt;/code&gt; があります。違いは、浮動小数点数で表すことができる整数についてです。たとえば、 &lt;code&gt;2 == 2.0&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; と評価され、 &lt;code&gt;2 =:= 2.0&lt;/code&gt; は &lt;code&gt;false&lt;/code&gt; と評価されます。通常、これは軽微な問題ですが、 &lt;code&gt;qlc&lt;/code&gt; モジュールは違いを無視できません。これは、QLCでのユーザーの演算子の選択に影響します。</target>
        </trans-unit>
        <trans-unit id="a238d21f86456ced8fadcb5e34be74b0e08d60ed" translate="yes" xml:space="preserve">
          <source>Erlang/OTP is divided into a number of OTP applications. An application normally contains Erlang modules. Some OTP applications, such as the C interface &lt;em&gt;erl_interface&lt;/em&gt;, are written in other languages and have no Erlang modules.</source>
          <target state="translated">Erlang / OTPはいくつかのOTPアプリケーションに分割されます。通常、アプリケーションにはErlangモジュールが含まれています。Cインターフェース&lt;em&gt;erl_interface&lt;/em&gt;などの一部のOTPアプリケーションは他の言語で記述されており、Erlangモジュールがありません。</target>
        </trans-unit>
        <trans-unit id="26162178bace97f7fcf849f4c1571479f8bb59d9" translate="yes" xml:space="preserve">
          <source>Erlang/OTP is not installed on the remote host.</source>
          <target state="translated">Erlang/OTPがリモートホストにインストールされていません。</target>
        </trans-unit>
        <trans-unit id="1e4edf668c9d05d04fe084e0a31ec6b936a6bcd3" translate="yes" xml:space="preserve">
          <source>Erlang/OTP itself provides implementations of native atomic memory operations that can be used when compiling with a &lt;code&gt;gcc&lt;/code&gt; compatible compiler for 32/64-bit x86, 32/64-bit SPARC V9, 32-bit PowerPC, or 32-bit Tile. When compiling with a &lt;code&gt;gcc&lt;/code&gt; compatible compiler for other architectures, the VM may be able to make use of native atomic operations using the &lt;code&gt;__atomic_*&lt;/code&gt; builtins (may be available when using a &lt;code&gt;gcc&lt;/code&gt; of at least version 4.7) and/or using the &lt;code&gt;__sync_*&lt;/code&gt; builtins (may be available when using a &lt;code&gt;gcc&lt;/code&gt; of at least version 4.1). If only the &lt;code&gt;gcc&lt;/code&gt;'s &lt;code&gt;__sync_*&lt;/code&gt; builtins are available, the performance will suffer. Such a configuration should only be used as a last resort. When compiling on Windows using a MicroSoft Visual C++ compiler native atomic memory operations are provided by Windows APIs.</source>
          <target state="translated">Erlang / OTP自体は、32/64ビットx86、32 / 64ビットSPARC V9、32ビットPowerPC、または32ビットタイル用の &lt;code&gt;gcc&lt;/code&gt; 互換コンパイラーでコンパイルするときに使用できるネイティブアトミックメモリ操作の実装を提供します。コンパイル時 &lt;code&gt;gcc&lt;/code&gt; 他のアーキテクチャと互換性コンパイラ、VMが使用してネイティブアトミック操作を使用することができるかもしれ &lt;code&gt;__atomic_*&lt;/code&gt; （使用可能な場合であってもよい組み込みコマンドを &lt;code&gt;gcc&lt;/code&gt; および/または使用の少なくともバージョン4.7）を &lt;code&gt;__sync_*&lt;/code&gt; 組み込み関数（少なくともバージョン4.1の &lt;code&gt;gcc&lt;/code&gt; を使用している場合に使用できる場合があります）。 &lt;code&gt;gcc&lt;/code&gt; の &lt;code&gt;__sync_*&lt;/code&gt; のみの場合ビルトインが利用可能な場合、パフォーマンスが低下します。このような構成は、最後の手段としてのみ使用してください。MicroSoft Visual C ++コンパイラを使用してWindowsでコンパイルする場合、ネイティブのアトミックメモリ操作はWindows APIによって提供されます。</target>
        </trans-unit>
        <trans-unit id="88359713fcd187262d19eaa372ae57551f27bfc9" translate="yes" xml:space="preserve">
          <source>Erlang/OTP, version R13B01 or later.</source>
          <target state="translated">Erlang/OTP、バージョンR13B01以降。</target>
        </trans-unit>
        <trans-unit id="00f13ff419cbefda4c6c03f79ee9281c4cf709dd" translate="yes" xml:space="preserve">
          <source>Error Bit</source>
          <target state="translated">エラービット</target>
        </trans-unit>
        <trans-unit id="5fff1f56919b006049c274c6c76fbbe56470ee4c" translate="yes" xml:space="preserve">
          <source>Error Handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="eba935f75ab2141800c78b960ea4ba301639db3b" translate="yes" xml:space="preserve">
          <source>Error Handling Between Processes</source>
          <target state="translated">プロセス間のエラー処理</target>
        </trans-unit>
        <trans-unit id="cdca065cbff5a828b04d0e4e49d1dcd5d7786c66" translate="yes" xml:space="preserve">
          <source>Error Handling Within Processes</source>
          <target state="translated">プロセス内でのエラー処理</target>
        </trans-unit>
        <trans-unit id="b9327ae340ba5e93e3a8ec3e3644f86f25a0245a" translate="yes" xml:space="preserve">
          <source>Error Information</source>
          <target state="translated">エラー情報</target>
        </trans-unit>
        <trans-unit id="a8d5b0c8bf1ebd0f07d81f6875b4394f8135c380" translate="yes" xml:space="preserve">
          <source>Error cause</source>
          <target state="translated">エラーの原因</target>
        </trans-unit>
        <trans-unit id="73631d7f0356fdbdeaa36f8e5dbad89c6aa15dc4" translate="yes" xml:space="preserve">
          <source>Error handling</source>
          <target state="translated">エラー処理</target>
        </trans-unit>
        <trans-unit id="9841f72db77d7dfc5d8fbb51c62aad7af9f607bd" translate="yes" xml:space="preserve">
          <source>Error handling is to be added here, for example, checking that the socket is still open, but this is only a simple example.</source>
          <target state="translated">ここでは、ソケットがまだ開いているかどうかをチェックするなどのエラー処理を追加しますが、これはあくまでも簡単な例です。</target>
        </trans-unit>
        <trans-unit id="b3c84d111f976acfbfdf69a2f3abdbf1e0500d30" translate="yes" xml:space="preserve">
          <source>Error in compiled code, &lt;code&gt;beam&lt;/code&gt; file damaged, or error in the compiler.</source>
          <target state="translated">コンパイルされたコードのエラー、 &lt;code&gt;beam&lt;/code&gt; ファイルの破損、またはコンパイラのエラー。</target>
        </trans-unit>
        <trans-unit id="496993d2f19645c9091ecc3aa210dbe3356845b1" translate="yes" xml:space="preserve">
          <source>Error information from the runtime system, that is, information about a process terminating because of an uncaught error exception, is by default written to terminal (tty):</source>
          <target state="translated">ランタイムシステムからのエラー情報、つまり、捕らえられなかったエラー例外によりプロセスが終了する情報は、デフォルトでターミナル(tty)に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="639e8ce426bc737468b74dc7c7bfaa46dc241c4b" translate="yes" xml:space="preserve">
          <source>Error logger also adds a &lt;code&gt;domain&lt;/code&gt; field with value &lt;code&gt;[Type]&lt;/code&gt; to this event's metadata, causing the filters of the default Logger handler to discard the event. A different Logger handler, or an error logger event handler, must be added to handle this event.</source>
          <target state="translated">エラーロガーは、値が &lt;code&gt;[Type]&lt;/code&gt; &lt;code&gt;domain&lt;/code&gt; フィールドもこのイベントのメタデータに追加するため、デフォルトのロガーハンドラーのフィルターがイベントを破棄します。このイベントを処理するには、別のロガーハンドラーまたはエラーロガーイベントハンドラーを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="9977542e45ff52428157c2369ca0bc9dccc2b506" translate="yes" xml:space="preserve">
          <source>Error logger forwards the event to Logger, including metadata that allows backwards compatibility with legacy error logger event handlers.</source>
          <target state="translated">エラー ロガーは、レガシー エラー ロガー イベント ハンドラとの下位互換性を可能にするメタデータを含めて、イベントをロガーに転送します。</target>
        </trans-unit>
        <trans-unit id="a77bbf54ef645a291af8493dbb1d5fc073efc973" translate="yes" xml:space="preserve">
          <source>Error logger is no longer started by default, but is automatically started when an event handler is added with &lt;code&gt;&lt;a href=&quot;#add_report_handler-1&quot;&gt; add_report_handler/1,2&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;error_logger&lt;/code&gt; module is then also added as a handler to the new logger, causing log events to be forwarded from logger to error logger, and consequently to all installed error logger event handlers.</source>
          <target state="translated">エラーロガーはデフォルトで開始されなくなりましたが、イベントハンドラーが &lt;code&gt;&lt;a href=&quot;#add_report_handler-1&quot;&gt; add_report_handler/1,2&lt;/a&gt;&lt;/code&gt; で追加されると自動的に開始されます。次に、 &lt;code&gt;error_logger&lt;/code&gt; モジュールもハンドラーとして新しいロガーに追加され、ログイベントがロガーからエラーロガーに転送され、その結果、インストールされているすべてのエラーロガーイベントハンドラーに転送されます。</target>
        </trans-unit>
        <trans-unit id="bc63651aa2a97a276609497fbbd0346eefff84ec" translate="yes" xml:space="preserve">
          <source>Error logger is no longer started by default, but is automatically started when an event handler is added with &lt;code&gt;&lt;a href=&quot;#add_report_handler-1&quot;&gt;add_report_handler/1,2&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;error_logger&lt;/code&gt; module is then also added as a handler to the new logger, causing log events to be forwarded from logger to error logger, and consequently to all installed error logger event handlers.</source>
          <target state="translated">エラーロガーはデフォルトでは開始されなくなりましたが、 &lt;code&gt;&lt;a href=&quot;#add_report_handler-1&quot;&gt;add_report_handler/1,2&lt;/a&gt;&lt;/code&gt; でイベントハンドラーが追加されると自動的に開始されます。次に、 &lt;code&gt;error_logger&lt;/code&gt; モジュールもハンドラーとして新しいロガーに追加され、ログイベントがロガーからエラーロガーに転送され、その結果、インストールされているすべてのエラーロガーイベントハンドラーに転送されます。</target>
        </trans-unit>
        <trans-unit id="f590673e3f81ff0de939209e8c1411495d888f75" translate="yes" xml:space="preserve">
          <source>Error logging</source>
          <target state="translated">エラーロギング</target>
        </trans-unit>
        <trans-unit id="39fd0fff48bcdc526e470bce9996f806cffba66e" translate="yes" xml:space="preserve">
          <source>Error message &lt;code&gt;no_such_log&lt;/code&gt; means that the specified disk log is not open. Nothing is said about whether the disk log files exist or not.</source>
          <target state="translated">エラーメッセージ &lt;code&gt;no_such_log&lt;/code&gt; は、指定されたディスクログが開いていないことを意味します。ディスクログファイルが存在するかどうかについては何も言われていません。</target>
        </trans-unit>
        <trans-unit id="1c16c465d099c60331de2e4b62e170e774878a5f" translate="yes" xml:space="preserve">
          <source>Error print routines.</source>
          <target state="translated">エラー印刷ルーチン。</target>
        </trans-unit>
        <trans-unit id="175d732720bb2b9ce4139516e31e0e7de404f821" translate="yes" xml:space="preserve">
          <source>Error responses from phase one will not affect the current encryption state of the connection. Those responses are:</source>
          <target state="translated">フェーズ 1 からのエラー応答は、現在の接続の暗号化状態には影響しません。これらの応答は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="fc407ac87a50f6f1cb8813ded47a2237216209a5" translate="yes" xml:space="preserve">
          <source>Error texts are returned on channel-type 1 which usually is piped to &lt;code&gt;stderr&lt;/code&gt; on e.g Linux systems. Texts from a successful execution are returned on channel-type 0 and will in similar manner be piped to &lt;code&gt;stdout&lt;/code&gt;. The exit-status code is set to 0 for success and 255 for errors. The exact results presented on the client side depends on the client and the client's operating system.</source>
          <target state="translated">エラーテキストはチャネルタイプ1で返されます。これは通常、Linuxシステムなどの &lt;code&gt;stderr&lt;/code&gt; にパイプされます。正常に実行されたテキストはチャネルタイプ0で返され、同様の方法で &lt;code&gt;stdout&lt;/code&gt; にパイプされます。終了ステータスコードは、成功の場合は0に、エラーの場合は255に設定されます。クライアント側に表示される正確な結果は、クライアントとクライアントのオペレーティングシステムによって異なります。</target>
        </trans-unit>
        <trans-unit id="248a0c0dec551ac1544ee55c87419da834b070bd" translate="yes" xml:space="preserve">
          <source>Error texts are returned on channel-type 1 which usually is piped to &lt;code&gt;stderr&lt;/code&gt; on e.g Linux systems. Texts from a successful execution will in similar manner be piped to &lt;code&gt;stdout&lt;/code&gt;. The exit-status code is set to 0 for success and -1 for errors. The exact results presented on the client side depends on the client and the client's operating system.</source>
          <target state="translated">エラーテキストは、チャネルタイプ1で返されます。これは通常、Linuxシステムなどで &lt;code&gt;stderr&lt;/code&gt; にパイプされます。正常に実行されたテキストは、同様に &lt;code&gt;stdout&lt;/code&gt; にパイプされます。終了ステータスコードは、成功の場合は0、エラーの場合は-1に設定されます。クライアント側に表示される正確な結果は、クライアントとクライアントのオペレーティングシステムによって異なります。</target>
        </trans-unit>
        <trans-unit id="c5162f960eaa3903c9aa79d1009292052fe0d91d" translate="yes" xml:space="preserve">
          <source>Error tuple indicating the type of error. Possible values of the second component:</source>
          <target state="translated">エラーの種類を示すエラータプル。2番目のコンポーネントの可能な値。</target>
        </trans-unit>
        <trans-unit id="791a69f19a69a95d78745770545e8504ba8e369a" translate="yes" xml:space="preserve">
          <source>Error types</source>
          <target state="translated">エラーの種類</target>
        </trans-unit>
        <trans-unit id="c0badf4d3cb54e5993b49d582242405e5f94e8ad" translate="yes" xml:space="preserve">
          <source>Error with error code in &lt;code&gt;errno&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;errno&lt;/code&gt; にエラーコードがあるエラー</target>
        </trans-unit>
        <trans-unit id="78b085a1df80396e71f3adf0641d42f27e66adf9" translate="yes" xml:space="preserve">
          <source>Error, &lt;code&gt;badarg&lt;/code&gt;</source>
          <target state="translated">エラー、 &lt;code&gt;badarg&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7784e7ae6084691f1646dc4a8244e866d12d88e5" translate="yes" xml:space="preserve">
          <source>Error-Message AVP</source>
          <target state="translated">エラーメッセージAVP</target>
        </trans-unit>
        <trans-unit id="36f0eba0495b4acdb4f3510131bb067a1134370c" translate="yes" xml:space="preserve">
          <source>Error-Reporting-Host AVP</source>
          <target state="translated">エラー報告-ホスト AVP</target>
        </trans-unit>
        <trans-unit id="805e86a8cbf628e38e4c45612c005a504009e79a" translate="yes" xml:space="preserve">
          <source>Errors</source>
          <target state="translated">Errors</target>
        </trans-unit>
        <trans-unit id="cf7c257161b6f7846270c6cdc8d3241e43fc4f5f" translate="yes" xml:space="preserve">
          <source>Errors and exceptions occur as in &lt;code&gt;&lt;a href=&quot;#characters_to_list-2&quot;&gt; characters_to_list/2&lt;/a&gt;&lt;/code&gt;, but the second element in tuple &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;incomplete&lt;/code&gt; is a &lt;code&gt;binary()&lt;/code&gt; and not a &lt;code&gt;list()&lt;/code&gt;.</source>
          <target state="translated">エラーと例外は &lt;code&gt;&lt;a href=&quot;#characters_to_list-2&quot;&gt; characters_to_list/2&lt;/a&gt;&lt;/code&gt; のように発生しますが、タプル &lt;code&gt;error&lt;/code&gt; または &lt;code&gt;incomplete&lt;/code&gt; 2番目の要素は &lt;code&gt;binary()&lt;/code&gt; であり、 &lt;code&gt;list()&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="45c5077316970972e1b57db18c00ca9dcce84b89" translate="yes" xml:space="preserve">
          <source>Errors and exceptions occur as in &lt;code&gt;&lt;a href=&quot;#characters_to_list-2&quot;&gt;characters_to_list/2&lt;/a&gt;&lt;/code&gt;, but the second element in tuple &lt;code&gt;error&lt;/code&gt; or &lt;code&gt;incomplete&lt;/code&gt; is a &lt;code&gt;binary()&lt;/code&gt; and not a &lt;code&gt;list()&lt;/code&gt;.</source>
          <target state="translated">エラーと例外は &lt;code&gt;&lt;a href=&quot;#characters_to_list-2&quot;&gt;characters_to_list/2&lt;/a&gt;&lt;/code&gt; の場合と同様に発生しますが、タプル &lt;code&gt;error&lt;/code&gt; または &lt;code&gt;incomplete&lt;/code&gt; 要素の2番目の要素は &lt;code&gt;binary()&lt;/code&gt; であり、 &lt;code&gt;list()&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="a3ea4e0cabd7710ec1eeb5a59e0efc86816c8ac2" translate="yes" xml:space="preserve">
          <source>Errors are reported differently for asynchronous log attempts and other uses of the &lt;code&gt;disk_log&lt;/code&gt; module. When used synchronously, this module replies with an error message, but when called asynchronously, this module does not know where to send the error message. Instead, owners subscribing to notifications receive an &lt;code&gt;error_status&lt;/code&gt; message.</source>
          <target state="translated">エラーは、非同期ログの試行や、 &lt;code&gt;disk_log&lt;/code&gt; モジュールの他の使用については異なる方法で報告されます。このモジュールは、同期的に使用されるとエラーメッセージで応答しますが、非同期的に呼び出されると、エラーメッセージの送信先がわかりません。代わりに、通知をサブスクライブする所有者は &lt;code&gt;error_status&lt;/code&gt; メッセージを受け取ります。</target>
        </trans-unit>
        <trans-unit id="f53a647e231f03245b04c614f9cd71627c52be9d" translate="yes" xml:space="preserve">
          <source>Errors can occur for various reasons, including the following:</source>
          <target state="translated">以下のような様々な理由でエラーが発生することがあります。</target>
        </trans-unit>
        <trans-unit id="3996c425aad218b73071a74049a8c0b13e440c8e" translate="yes" xml:space="preserve">
          <source>Errors can roughly be divided into four different types:</source>
          <target state="translated">エラーは大きく分けて4つのタイプに分けられます。</target>
        </trans-unit>
        <trans-unit id="15d90643c78f3e3b8be248597bc645ab1ae89ee4" translate="yes" xml:space="preserve">
          <source>Errors detected at compile-time are displayed on the screen together with line numbers indicating where in the source file the respective error was detected. If no errors are found, an Erlang ASN.1 module is created.</source>
          <target state="translated">コンパイル時に検出されたエラーは、ソースファイルのどこでエラーが検出されたかを示す行番号とともに画面に表示されます。エラーが見つからなければ、Erlang ASN.1モジュールが作成されます。</target>
        </trans-unit>
        <trans-unit id="31c61a29f2eabfdc1dd9e720efb9d7d06e09ced5" translate="yes" xml:space="preserve">
          <source>Errors detected at decode of an incoming message, as identified by a corresponding 5xxx series Result-Code (Permanent Failures). For an incoming request, these should be used to formulate an appropriate answer as documented for the &lt;code&gt;handle_request/3&lt;/code&gt; callback in &lt;code&gt;diameter_app(3)&lt;/code&gt;. For an incoming answer, the &lt;code&gt;&lt;a href=&quot;diameter#application_opt&quot;&gt;diameter:application_opt()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;answer_errors&lt;/code&gt; determines the behaviour.</source>
          <target state="translated">着信メッセージのデコード時に検出されたエラー。対応する5xxxシリーズの結果コード（永続的な障害）によって識別されます。着信要求の場合、これらを使用して、 &lt;code&gt;diameter_app(3)&lt;/code&gt; の &lt;code&gt;handle_request/3&lt;/code&gt; コールバックに記載されている適切な回答を作成する必要があります。着信応答の場合、 &lt;code&gt;&lt;a href=&quot;diameter#application_opt&quot;&gt;diameter:application_opt()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;answer_errors&lt;/code&gt; が動作を決定します。</target>
        </trans-unit>
        <trans-unit id="010ed185a2d162465cc0ce0b4b8aa2a3fd96c350" translate="yes" xml:space="preserve">
          <source>Errors discovered by the ODBC driver - If calls to the ODBC-driver fails due to circumstances that can not be controlled by the Erlang ODBC application programmer, an error string will be dug up from the driver. This string will be the &lt;code&gt;Reason&lt;/code&gt; in the &lt;code&gt;{error, Reason}&lt;/code&gt; return value. How good this error message is will of course be driver dependent. Examples of such circumstances are trying to insert the same key twice, invalid SQL-queries and that the database has gone off line.</source>
          <target state="translated">ODBCドライバーによって検出されたエラー-Erlang ODBCアプリケーションプログラマーが制御できない状況でODBCドライバーの呼び出しが失敗した場合、ドライバーからエラー文字列が掘り出されます。この文字列は、あろう &lt;code&gt;Reason&lt;/code&gt; で &lt;code&gt;{error, Reason}&lt;/code&gt; 戻り値。このエラーメッセージがどの程度優れているかは、もちろんドライバーによって異なります。このような状況の例としては、同じキーを2回挿入しようとしたり、SQLクエリが無効になったり、データベースがオフラインになったりします。</target>
        </trans-unit>
        <trans-unit id="5d626c84b97772a6774cb12c20d20611b4bf6b2f" translate="yes" xml:space="preserve">
          <source>Errors discovered by the ODBC driver - If calls to the ODBC-driver fails due to circumstances that cannot be controlled by the Erlang ODBC application programmer, an error string will be dug up from the driver. This string will be the &lt;code&gt;Reason&lt;/code&gt; in the &lt;code&gt;{error, Reason}&lt;/code&gt; return value. How good this error message is will of course be driver dependent. Examples of such circumstances are trying to insert the same key twice, invalid SQL-queries and that the database has gone off line.</source>
          <target state="translated">ODBCドライバーによって検出されたエラー-ErlangODBCアプリケーションプログラマーが制御できない状況のためにODBCドライバーの呼び出しが失敗した場合、エラー文字列がドライバーから掘り出されます。この文字列は、あろう &lt;code&gt;Reason&lt;/code&gt; で &lt;code&gt;{error, Reason}&lt;/code&gt; 戻り値。もちろん、このエラーメッセージがどれだけ優れているかは、ドライバーによって異なります。このような状況の例としては、同じキーを2回挿入しようとしたり、無効なSQLクエリを実行したり、データベースがオフラインになったりします。</target>
        </trans-unit>
        <trans-unit id="9f0f1f5888854ffc35c09cc9193ab7f680c3f6cd" translate="yes" xml:space="preserve">
          <source>Errors in the second phase will however end the connection:</source>
          <target state="translated">しかし、第2フェーズでのエラーは、接続を終了します。</target>
        </trans-unit>
        <trans-unit id="9c0f5bdd035851c9a2609fc02b643227fd96cb56" translate="yes" xml:space="preserve">
          <source>Errors occur for the following reasons:</source>
          <target state="translated">以下のような理由でエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="333ab74cacfd43c2053abbfca396c78273891243" translate="yes" xml:space="preserve">
          <source>Errors when loading the callback module is handled in different ways depending on how the restricted shell is activated:</source>
          <target state="translated">コールバックモジュールをロードする際のエラーは、制限されたシェルがどのように起動されているかによって異なる方法で処理されます。</target>
        </trans-unit>
        <trans-unit id="b67ac26ee09de27a753d6d1cddc8caee5a47e6fc" translate="yes" xml:space="preserve">
          <source>Erts specific configuration. See application level options below.</source>
          <target state="translated">Erts 固有の設定。以下のアプリケーションレベルのオプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b4cfe1f435f06beaae8e7d7c6d43e5dddbe640bb" translate="yes" xml:space="preserve">
          <source>Escape</source>
          <target state="translated">Escape</target>
        </trans-unit>
        <trans-unit id="a01558f834c010dceb8bf9e5bbb6298a94594c3d" translate="yes" xml:space="preserve">
          <source>Escape (hex 1B)</source>
          <target state="translated">脱出(ヘクス1B)</target>
        </trans-unit>
        <trans-unit id="67425f3fc09d5ba38f92d36a3d5af7553c1b88a0" translate="yes" xml:space="preserve">
          <source>Escape.</source>
          <target state="translated">Escape.</target>
        </trans-unit>
        <trans-unit id="79d974e085d4ddcf78e187e4a378b9fe39f97aea" translate="yes" xml:space="preserve">
          <source>Escript files can be added, edited or deleted. This is done by selecting the line where the path to an escript file is displayed and clicking the right mouse button. Choose add, edit or delete in the menu that pops up. New escripts can also be added by selecting the line &lt;code&gt;Escript files&lt;/code&gt; and clicking the right mouse button. Choose add in the menu that pops up.</source>
          <target state="translated">Escriptファイルは、追加、編集、または削除できます。これは、escriptファイルへのパスが表示されている行を選択し、マウスの右ボタンをクリックすることで行われます。ポップアップメニューで[追加]、[編集]、または[削除]を選択します。新しいEscriptを追加するには、 &lt;code&gt;Escript files&lt;/code&gt; の行を選択し、マウスの右ボタンをクリックします。ポップアップメニューで[追加]を選択します。</target>
        </trans-unit>
        <trans-unit id="1529f77453dd8025f2dc5c866ce1b0237ae561b5" translate="yes" xml:space="preserve">
          <source>Escript specific configuration. An escript has a mandatory file name and escript level options that are described below.</source>
          <target state="translated">Escript 固有の設定。escript には必須のファイル名と、以下に説明する escript レベルのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="02d8fbbe4bb9d16643ea1b274f4a27c88dbdc47e" translate="yes" xml:space="preserve">
          <source>Especially if &lt;code&gt;read_line/1&lt;/code&gt; is to be used on a &lt;code&gt;raw&lt;/code&gt; file, it is recommended to combine this option with option &lt;code&gt;{read_ahead, Size}&lt;/code&gt; as line-oriented I/O is inefficient without buffering.</source>
          <target state="translated">特に &lt;code&gt;read_line/1&lt;/code&gt; を &lt;code&gt;raw&lt;/code&gt; ファイルで使用する場合、このオプションをオプション &lt;code&gt;{read_ahead, Size}&lt;/code&gt; と組み合わせることをお勧めします。ライン指向のI / Oはバッファリングなしでは効率が悪いためです。</target>
        </trans-unit>
        <trans-unit id="a97f1993f795aad7d958e8c30ce30957ba32ad45" translate="yes" xml:space="preserve">
          <source>Essentially those &lt;code&gt;.tab&lt;/code&gt; files define:</source>
          <target state="translated">基本的に、これらの &lt;code&gt;.tab&lt;/code&gt; ファイルは以下を定義します。</target>
        </trans-unit>
        <trans-unit id="1fe378495971b1da6fa994754332b783d8bd92cd" translate="yes" xml:space="preserve">
          <source>Establish a &quot;virtual&quot; connection</source>
          <target state="translated">仮想」接続を確立する</target>
        </trans-unit>
        <trans-unit id="fcb93f5e646ee0b5e426c8887d88c062fa9c7e80" translate="yes" xml:space="preserve">
          <source>Established Automata Theory does not deal much with how a &lt;strong&gt;state transition&lt;/strong&gt; is triggered, but assumes that the output is a function of the input (and the state) and that they are some kind of values.</source>
          <target state="translated">確立されたオートマタ理論は、&lt;strong&gt;状態遷移&lt;/strong&gt;がどのようにトリガーされるかをあまり扱いませんが、出力が入力（および状態）の関数であり、それらが何らかの値であると想定しています。</target>
        </trans-unit>
        <trans-unit id="ad07376a44e1ad875e3b1dc0e6c9b97f9f2cae85" translate="yes" xml:space="preserve">
          <source>Established Automata Theory does not deal much with how a state transition is triggered, but assumes that the output is a function of the input (and the state) and that they are some kind of values.</source>
          <target state="translated">確立されたオートマタ理論は、状態遷移がどのようにトリガーされるかをあまり扱っていませんが、出力は入力(と状態)の関数であり、それらがある種の値であることを前提としています。</target>
        </trans-unit>
        <trans-unit id="cb0854bbf324d9cf45d6a1f72d7b27b62be601e1" translate="yes" xml:space="preserve">
          <source>Establishes a connection to &lt;code&gt;Node&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if a connection was established or was already established or if &lt;code&gt;Node&lt;/code&gt; is the local node itself. Returns &lt;code&gt;false&lt;/code&gt; if the connection attempt failed, and &lt;code&gt;ignored&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; への接続を確立します。接続が確立されているか、すでに確立されている場合、または &lt;code&gt;Node&lt;/code&gt; がローカルノード自体で &lt;code&gt;true&lt;/code&gt; 場合はtrueを返します。接続の試行が失敗した場合は &lt;code&gt;false&lt;/code&gt; を返し、ローカルノードが生きていない場合は &lt;code&gt;ignored&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="30d59ec1427585ded92ecb580ddfcf1f8baf5e0c" translate="yes" xml:space="preserve">
          <source>Establishes a connection to &lt;code&gt;Node&lt;/code&gt;. Returns &lt;code&gt;true&lt;/code&gt; if successful, &lt;code&gt;false&lt;/code&gt; if not, and &lt;code&gt;ignored&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; への接続を確立します。成功し &lt;code&gt;false&lt;/code&gt; 場合は &lt;code&gt;true&lt;/code&gt; 、失敗した場合はfalseを返し、ローカルノードがアクティブでない場合は &lt;code&gt;ignored&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="c3ec2861ccfadb381a463232dcf6f321848b34a4" translate="yes" xml:space="preserve">
          <source>Establishes a new association for socket &lt;code&gt;Socket&lt;/code&gt;, with the peer (SCTP server socket) specified by &lt;code&gt;Addr&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt;. &lt;code&gt;Timeout&lt;/code&gt;, is expressed in milliseconds. A socket can be associated with multiple peers.</source>
          <target state="translated">&lt;code&gt;Addr&lt;/code&gt; および &lt;code&gt;Port&lt;/code&gt; で指定されたピア（SCTPサーバーソケット）とのソケット &lt;code&gt;Socket&lt;/code&gt; の新しい関連付けを確立します。 &lt;code&gt;Timeout&lt;/code&gt; はミリ秒単位で表されます。ソケットは複数のピアに関連付けることができます。</target>
        </trans-unit>
        <trans-unit id="00db4029ecd811c05343cf8c7a310ae8a67ce3ec" translate="yes" xml:space="preserve">
          <source>Establishing a connection (ssh:connect et al) or starting a daemon (ssh:daemon)</source>
          <target state="translated">接続の確立 (ssh:connect など)またはデーモンの起動 (ssh:daemon)</target>
        </trans-unit>
        <trans-unit id="4dc2b41f9f62ae24f4ee1bdb98221a2c0df13e48" translate="yes" xml:space="preserve">
          <source>Ethiopic</source>
          <target state="translated">Ethiopic</target>
        </trans-unit>
        <trans-unit id="90fdae5c8a9bb06da32fa2f7b95792f9f1b0e769" translate="yes" xml:space="preserve">
          <source>Ets table</source>
          <target state="translated">エッツテーブル</target>
        </trans-unit>
        <trans-unit id="2f60a0607f41a772b32626fcd9af95377e60dffa" translate="yes" xml:space="preserve">
          <source>Evaluate any expressions before starting the test.</source>
          <target state="translated">テストを開始する前に、任意の式を評価します。</target>
        </trans-unit>
        <trans-unit id="eb8ea7896b33d449e264919d9bcd631090b1fdd3" translate="yes" xml:space="preserve">
          <source>Evaluate each &lt;code&gt;ActionTerm&lt;/code&gt; in the same way as the &lt;code&gt;MatchConditions&lt;/code&gt;, but ignore the return values. Regardless of what happens in this part, the match has succeeded.</source>
          <target state="translated">各評価 &lt;code&gt;ActionTerm&lt;/code&gt; を同じように &lt;code&gt;MatchConditions&lt;/code&gt; が、戻り値を無視します。この部分で何が発生しても、試合は成功しました。</target>
        </trans-unit>
        <trans-unit id="3a5ea62563bab660614ffd1fad208c7a58ff1100" translate="yes" xml:space="preserve">
          <source>Evaluate each &lt;code&gt;MatchCondition&lt;/code&gt; (where only &lt;code&gt;'$&amp;lt;number&amp;gt;'&lt;/code&gt; variables previously bound in the &lt;code&gt;MatchHead&lt;/code&gt; part can occur) and expect it to return the atom &lt;code&gt;true&lt;/code&gt;. When a condition does not evaluate to &lt;code&gt;true&lt;/code&gt;, the match fails. If any BIF call generates an exception, the match also fails.</source>
          <target state="translated">各 &lt;code&gt;MatchCondition&lt;/code&gt; を評価し（ &lt;code&gt;MatchHead&lt;/code&gt; パーツで以前にバインドされた &lt;code&gt;'$&amp;lt;number&amp;gt;'&lt;/code&gt; 変数のみが発生する可能性があります）、アトム &lt;code&gt;true&lt;/code&gt; を返すことを期待します。条件が &lt;code&gt;true&lt;/code&gt; に評価されない場合、一致は失敗します。いずれかのBIF呼び出しが例外を生成した場合、照合も失敗します。</target>
        </trans-unit>
        <trans-unit id="aac8f6b10ed12a4c561d3f9dd94e7c5c7b163cc7" translate="yes" xml:space="preserve">
          <source>Evaluate the expressions in order and return the value of the last expression (typically there is only one expression in this context).</source>
          <target state="translated">式を順番に評価し、最後の式の値を返します(通常、このコンテキストでは式は1つしかありません)。</target>
        </trans-unit>
        <trans-unit id="320a98f40b213cd2e550ffe03d7477c1d54038d0" translate="yes" xml:space="preserve">
          <source>Evaluate the following lines only if &lt;code&gt;Macro&lt;/code&gt; is defined.</source>
          <target state="translated">&lt;code&gt;Macro&lt;/code&gt; が定義されている場合のみ、次の行を評価します。</target>
        </trans-unit>
        <trans-unit id="15d3d37a1174660d21728e9897f6f8adebc66260" translate="yes" xml:space="preserve">
          <source>Evaluate the following lines only if &lt;code&gt;Macro&lt;/code&gt; is not defined.</source>
          <target state="translated">&lt;code&gt;Macro&lt;/code&gt; が定義されていない場合にのみ、次の行を評価してください。</target>
        </trans-unit>
        <trans-unit id="31974ecd27e63ca9472a0ef2140076495bf64b20" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Expr&lt;/code&gt; and matches the result against &lt;code&gt;GuardedPattern&lt;/code&gt;, if testing is enabled. If the match fails, an informative exception will be generated; see the &lt;code&gt;assert&lt;/code&gt; macro for further details. &lt;code&gt;GuardedPattern&lt;/code&gt; can be anything that you can write on the left hand side of the &lt;code&gt;-&amp;gt;&lt;/code&gt; symbol in a case-clause, except that it cannot contain comma-separated guard tests.</source>
          <target state="translated">テストが有効な場合、 &lt;code&gt;Expr&lt;/code&gt; を評価し、結果を &lt;code&gt;GuardedPattern&lt;/code&gt; と照合します。一致が失敗した場合、通知的な例外が生成されます。詳細については、 &lt;code&gt;assert&lt;/code&gt; マクロを参照してください。 &lt;code&gt;GuardedPattern&lt;/code&gt; は、case文節の &lt;code&gt;-&amp;gt;&lt;/code&gt; 記号の左側に記述できるものであれば何でもかまいませんが、コンマ区切りのガードテストを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="186d1d12038f51f269dca6fecb6562d5fb223ff2" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Expr&lt;/code&gt;, catching any exception and testing that it matches the expected &lt;code&gt;ClassPattern:TermPattern&lt;/code&gt;. If the match fails, or if no exception is thrown by &lt;code&gt;Expr&lt;/code&gt;, an informative exception will be generated; see the &lt;code&gt;assert&lt;/code&gt; macro for further details. The &lt;code&gt;assertError&lt;/code&gt;, &lt;code&gt;assertExit&lt;/code&gt;, and &lt;code&gt;assertThrow&lt;/code&gt; macros, are equivalent to using &lt;code&gt;assertException&lt;/code&gt; with a &lt;code&gt;ClassPattern&lt;/code&gt; of &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;exit&lt;/code&gt;, or &lt;code&gt;throw&lt;/code&gt;, respectively.</source>
          <target state="translated">&lt;code&gt;Expr&lt;/code&gt; を評価し、例外をキャッチして、予想される &lt;code&gt;ClassPattern:TermPattern&lt;/code&gt; と一致することをテストします。一致が失敗した場合、または &lt;code&gt;Expr&lt;/code&gt; によって例外がスローされなかった場合は、有益な例外が生成されます。詳細については、 &lt;code&gt;assert&lt;/code&gt; マクロを参照してください。 &lt;code&gt;assertError&lt;/code&gt; 、 &lt;code&gt;assertExit&lt;/code&gt; 、および &lt;code&gt;assertThrow&lt;/code&gt; のマクロは、使用するのと同じです &lt;code&gt;assertException&lt;/code&gt; をして &lt;code&gt;ClassPattern&lt;/code&gt; の &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;exit&lt;/code&gt; 、または &lt;code&gt;throw&lt;/code&gt; それぞれ。</target>
        </trans-unit>
        <trans-unit id="34c8cffaf67a90bfdc80a24acff0bae4a32b64c6" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Expression&lt;/code&gt; with the set of bindings &lt;code&gt;Bindings&lt;/code&gt;. &lt;code&gt;Expression&lt;/code&gt; is an expression in abstract syntax. For an explanation of when and how to use arguments &lt;code&gt;LocalFunctionHandler&lt;/code&gt; and &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt;, see sections &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt; Local Function Handler&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt; Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="translated">評価の &lt;code&gt;Expression&lt;/code&gt; バインディングのセットと &lt;code&gt;Bindings&lt;/code&gt; 。 &lt;code&gt;Expression&lt;/code&gt; は、抽象構文の式です。引数 &lt;code&gt;LocalFunctionHandler&lt;/code&gt; および &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt; をいつどのように使用するかについては、このモジュールの「 &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt; Local Function Handler&lt;/a&gt;&lt;/code&gt; および「 &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt; Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; ローカル関数ハンドラー」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0885bf046c38a399b1d97365e2c513324eb197cc" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Expression&lt;/code&gt; with the set of bindings &lt;code&gt;Bindings&lt;/code&gt;. &lt;code&gt;Expression&lt;/code&gt; is an expression in abstract syntax. For an explanation of when and how to use arguments &lt;code&gt;LocalFunctionHandler&lt;/code&gt; and &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt;, see sections &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt;Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="translated">バインディングのセット &lt;code&gt;Bindings&lt;/code&gt; を使用して &lt;code&gt;Expression&lt;/code&gt; を評価します。 &lt;code&gt;Expression&lt;/code&gt; は、抽象構文の式です。引数 &lt;code&gt;LocalFunctionHandler&lt;/code&gt; および &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt; をいつどのように使用するかの説明については、このモジュールの「 &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; および「 &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt;Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; ローカル関数ハンドラー」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b6c7e9e116e0851dc956b6950abb8622dd97b63" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Expressions&lt;/code&gt; with the set of bindings &lt;code&gt;Bindings&lt;/code&gt;, where &lt;code&gt;Expressions&lt;/code&gt; is a sequence of expressions (in abstract syntax) of a type that can be returned by &lt;code&gt;&lt;a href=&quot;io#parse_erl_exprs-2&quot;&gt; io:parse_erl_exprs/2&lt;/a&gt;&lt;/code&gt;. For an explanation of when and how to use arguments &lt;code&gt;LocalFunctionHandler&lt;/code&gt; and &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt;, see sections &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt; Local Function Handler&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt; Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="translated">バインディングのセットを使用して &lt;code&gt;Expressions&lt;/code&gt; を評価します &lt;code&gt;Bindings&lt;/code&gt; 。ここで、 &lt;code&gt;Expressions&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;io#parse_erl_exprs-2&quot;&gt; io:parse_erl_exprs/2&lt;/a&gt;&lt;/code&gt; によって返されるタイプの式のシーケンス（抽象構文）です。引数 &lt;code&gt;LocalFunctionHandler&lt;/code&gt; および &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt; をいつどのように使用するかについては、このモジュールの「 &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt; Local Function Handler&lt;/a&gt;&lt;/code&gt; および「 &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt; Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; ローカル関数ハンドラー」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="718a6a4c93730553e14409052cb19a533719a70b" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Expressions&lt;/code&gt; with the set of bindings &lt;code&gt;Bindings&lt;/code&gt;, where &lt;code&gt;Expressions&lt;/code&gt; is a sequence of expressions (in abstract syntax) of a type that can be returned by &lt;code&gt;&lt;a href=&quot;io#parse_erl_exprs-2&quot;&gt;io:parse_erl_exprs/2&lt;/a&gt;&lt;/code&gt;. For an explanation of when and how to use arguments &lt;code&gt;LocalFunctionHandler&lt;/code&gt; and &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt;, see sections &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt;Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="translated">一連のバインディング &lt;code&gt;Bindings&lt;/code&gt; を使用して &lt;code&gt;Expressions&lt;/code&gt; を評価します。ここで、 &lt;code&gt;Expressions&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;io#parse_erl_exprs-2&quot;&gt;io:parse_erl_exprs/2&lt;/a&gt;&lt;/code&gt; によって返される可能性のあるタイプの一連の式（抽象構文）です。引数 &lt;code&gt;LocalFunctionHandler&lt;/code&gt; および &lt;code&gt;NonLocalFunctionHandler&lt;/code&gt; をいつどのように使用するかの説明については、このモジュールの「 &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; および「 &lt;code&gt;&lt;a href=&quot;#non_local_function_handler&quot;&gt;Non-Local Function Handler&lt;/a&gt;&lt;/code&gt; ローカル関数ハンドラー」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f94b1089562ec2fdd21410eb823656a3d2e2ff7e" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Fun()&lt;/code&gt;. Otherwise the same as &lt;code&gt;tc/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Fun()&lt;/code&gt; を評価します。それ以外は &lt;code&gt;tc/2&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="525cce5537518016cdc2db7a3354e589328d9233" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Pid ! Message&lt;/code&gt; after &lt;code&gt;Time&lt;/code&gt; milliseconds. (&lt;code&gt;Pid&lt;/code&gt; can also be an atom of a registered name.)</source>
          <target state="translated">&lt;code&gt;Pid ! Message&lt;/code&gt; 評価します！ &lt;code&gt;Time&lt;/code&gt; ミリ秒後のメッセージ。（ &lt;code&gt;Pid&lt;/code&gt; は登録名のアトムにすることもできます。）</target>
        </trans-unit>
        <trans-unit id="84b37e1cf5abcde77821b9a70f52ec837e7d14b9" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;Pid ! Message&lt;/code&gt; repeatedly after &lt;code&gt;Time&lt;/code&gt; milliseconds. (&lt;code&gt;Pid&lt;/code&gt; can also be an atom of a registered name.)</source>
          <target state="translated">&lt;code&gt;Pid ! Message&lt;/code&gt; 評価します！ &lt;code&gt;Time&lt;/code&gt; ミリ秒後に繰り返しメッセージ。（ &lt;code&gt;Pid&lt;/code&gt; は登録名のアトムにすることもできます。）</target>
        </trans-unit>
        <trans-unit id="ad8c2ad7dec3069e70faa46184428742db08a0ff" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;TrueCase&lt;/code&gt; if &lt;code&gt;Cond&lt;/code&gt; evaluates to &lt;code&gt;true&lt;/code&gt;, or otherwise evaluates &lt;code&gt;FalseCase&lt;/code&gt; if &lt;code&gt;Cond&lt;/code&gt; evaluates to &lt;code&gt;false&lt;/code&gt;. (This is the same as &lt;code&gt;(case (Cond) of true-&amp;gt;(TrueCase); false-&amp;gt;(FalseCase) end)&lt;/code&gt;.) Note that it is an error if &lt;code&gt;Cond&lt;/code&gt; does not yield a boolean value.</source>
          <target state="translated">評価 &lt;code&gt;TrueCase&lt;/code&gt; 場合 &lt;code&gt;Cond&lt;/code&gt; あると評価 &lt;code&gt;true&lt;/code&gt; 、あるいは評価 &lt;code&gt;FalseCase&lt;/code&gt; を場合 &lt;code&gt;Cond&lt;/code&gt; あると評価 &lt;code&gt;false&lt;/code&gt; 。（これは同じである &lt;code&gt;(case (Cond) of true-&amp;gt;(TrueCase); false-&amp;gt;(FalseCase) end)&lt;/code&gt; 。注）場合には、エラーであることを &lt;code&gt;Cond&lt;/code&gt; ブール値を生じません。</target>
        </trans-unit>
        <trans-unit id="55df0f16abae4c065cfc03185075aa68796a3ea4" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Fun, Arguments)&lt;/code&gt;. Otherwise the same as &lt;code&gt;tc/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply(Fun, Arguments)&lt;/code&gt; 評価します。それ以外は &lt;code&gt;tc/3&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="4dcb2977bf62009bb2b5b07e88abed08c47b5a0f" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(M, F, A)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply(M, F, A)&lt;/code&gt; 評価します。</target>
        </trans-unit>
        <trans-unit id="3d4fac350f9859d200574cc2ce85393db9383eba" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt; and returns the corresponding value &lt;code&gt;Res&lt;/code&gt;, or &lt;code&gt;{badrpc, Reason}&lt;/code&gt; if the call fails.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価し、呼び出しが失敗した場合に対応する値 &lt;code&gt;Res&lt;/code&gt; または &lt;code&gt;{badrpc, Reason}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="05b453c4da4a47452aea8024a74992a40f89fd84" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt; and returns the corresponding value &lt;code&gt;Res&lt;/code&gt;, or &lt;code&gt;{badrpc, Reason}&lt;/code&gt; if the call fails. &lt;code&gt;Timeout&lt;/code&gt; is a time-out value in milliseconds. If the call times out, &lt;code&gt;Reason&lt;/code&gt; is &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価し、呼び出しが失敗した場合に対応する値 &lt;code&gt;Res&lt;/code&gt; または &lt;code&gt;{badrpc, Reason}&lt;/code&gt; を返します。 &lt;code&gt;Timeout&lt;/code&gt; は、ミリ秒単位のタイムアウト値です。呼び出しが &lt;code&gt;timeout&lt;/code&gt; した場合、 &lt;code&gt;Reason&lt;/code&gt; はtimeoutです。</target>
        </trans-unit>
        <trans-unit id="a58ba5fbf4d06592176f043dfeccb47f91ece3b8" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt; and returns the corresponding value &lt;code&gt;Res&lt;/code&gt;, or &lt;code&gt;{badrpc, Reason}&lt;/code&gt; if the call fails. The same as calling &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;rpc:call(Node, Module, Function, Args, infinity)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価し、対応する値 &lt;code&gt;Res&lt;/code&gt; 、または呼び出しが失敗した場合は &lt;code&gt;{badrpc, Reason}&lt;/code&gt; を返します。 &lt;code&gt;&lt;a href=&quot;#call-5&quot;&gt;rpc:call(Node, Module, Function, Args, infinity)&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="04e2f8225da4c956b51a080980d4fd19ddaadc57" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt; and returns the corresponding value &lt;code&gt;Result&lt;/code&gt;. &lt;code&gt;Timeout&lt;/code&gt; is an integer representing the timeout in milliseconds or the atom &lt;code&gt;infinity&lt;/code&gt; which prevents the operation from ever timing out.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価し、対応する値 &lt;code&gt;Result&lt;/code&gt; を返します。 &lt;code&gt;Timeout&lt;/code&gt; は、ミリ秒単位のタイムアウトまたは操作がタイムアウトしないようにするアトム &lt;code&gt;infinity&lt;/code&gt; を表す整数です。</target>
        </trans-unit>
        <trans-unit id="6163eb01c7d25b83c0125499be3734f5410e312d" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt;. No response is delivered and the calling process is not suspended until the evaluation is complete, as is the case with &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4,5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価します。 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4,5&lt;/a&gt;&lt;/code&gt; の場合と同様に、評価が完了するまで、応答は配信されず、呼び出しプロセスは中断されません。</target>
        </trans-unit>
        <trans-unit id="5293e5bf1ea6f4745218802a9beed4c981091c2f" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt;. No response is delivered to the calling process. &lt;code&gt;erpc:cast()&lt;/code&gt; returns immediately after the cast request has been sent. Any failures beside bad arguments are silently ignored.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価します。呼び出しプロセスに応答は配信されません。 &lt;code&gt;erpc:cast()&lt;/code&gt; は、キャスト要求が送信された直後に戻ります。悪い議論以外の失敗は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="3a4fa1540613a1c89c457f127276ed85ffd327ab" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on the node &lt;code&gt;Node&lt;/code&gt;. No response is delivered and the process that makes the call is not suspended until the evaluation is completed as in the case of &lt;code&gt;call/3,4&lt;/code&gt;. If &lt;code&gt;Node&lt;/code&gt; is &lt;code&gt;{Fun, FunArgs}&lt;/code&gt;, applying &lt;code&gt;Fun&lt;/code&gt; to &lt;code&gt;FunArgs&lt;/code&gt; is to return a node name.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価します。 &lt;code&gt;call/3,4&lt;/code&gt; の場合のように評価が完了するまで、応答は配信されず、呼び出しを行うプロセスは中断されません。場合 &lt;code&gt;Node&lt;/code&gt; ある &lt;code&gt;{Fun, FunArgs}&lt;/code&gt; 、適用 &lt;code&gt;Fun&lt;/code&gt; に &lt;code&gt;FunArgs&lt;/code&gt; するノード名を返すことです。</target>
        </trans-unit>
        <trans-unit id="0d2b64f22b86a4ebae9378df454694cf4b2d8e74" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on the node &lt;code&gt;Node&lt;/code&gt;. Returns either whatever &lt;code&gt;Function&lt;/code&gt; returns, or &lt;code&gt;{badrpc, Reason}&lt;/code&gt; if the remote procedure call fails. If &lt;code&gt;Node&lt;/code&gt; is &lt;code&gt;{Fun, FunArgs}&lt;/code&gt;, applying &lt;code&gt;Fun&lt;/code&gt; to &lt;code&gt;FunArgs&lt;/code&gt; is to return a node name.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価します。 &lt;code&gt;Function&lt;/code&gt; が返すものを返すか、リモートプロシージャコールが失敗した場合は &lt;code&gt;{badrpc, Reason}&lt;/code&gt; 返します。場合 &lt;code&gt;Node&lt;/code&gt; ある &lt;code&gt;{Fun, FunArgs}&lt;/code&gt; 、適用 &lt;code&gt;Fun&lt;/code&gt; に &lt;code&gt;FunArgs&lt;/code&gt; するノード名を返すことです。</target>
        </trans-unit>
        <trans-unit id="a890a2754fee2f65938a113b86ce5d0784d39805" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on the nodes &lt;code&gt;Nodes&lt;/code&gt;. No response is delivered to the calling process. &lt;code&gt;erpc:multicast()&lt;/code&gt; returns immediately after the cast requests have been sent. Any failures beside bad arguments are silently ignored.</source>
          <target state="translated">ノード &lt;code&gt;Nodes&lt;/code&gt; で &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価します。呼び出しプロセスに応答は配信されません。 &lt;code&gt;erpc:multicast()&lt;/code&gt; は、キャスト要求が送信された直後に戻ります。悪い議論以外の失敗は黙って無視されます。</target>
        </trans-unit>
        <trans-unit id="35443a5c50dc842d35a2bf954702893e927421f5" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on the specified nodes. No answers are collected.</source>
          <target state="translated">指定されたノードで &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; を評価します。回答は収集されません。</target>
        </trans-unit>
        <trans-unit id="aebb38b539b4b655f1010af603e51c027fc66659" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; after &lt;code&gt;Time&lt;/code&gt; milliseconds.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; ミリ秒後に &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; 評価します。</target>
        </trans-unit>
        <trans-unit id="e3df08321cff6582142c40f6af62b1df5af8fc6b" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; and measures the elapsed real time as reported by &lt;code&gt; erlang:monotonic_time/0&lt;/code&gt;.</source>
          <target state="translated">評価が &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; と措置によって報告されるようにリアルタイム経過 &lt;code&gt; erlang:monotonic_time/0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0abfd902f3cd50089673d52523c410577272d587" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; and measures the elapsed real time as reported by &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt;.</source>
          <target state="translated">評価が &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; と措置によって報告されるようにリアルタイム経過 &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8d6c33f34f27043a94550849ea0daa51f209638" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; repeatedly at intervals of &lt;code&gt;Time&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;apply(Module, Function, Arguments)&lt;/code&gt; を &lt;code&gt;Time&lt;/code&gt; の間隔で繰り返し評価します。</target>
        </trans-unit>
        <trans-unit id="00422cbf37158e86b6514c4e556ae0be92b0f4e4" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;apply(Module, Function, [Elem|ExtraArgs])&lt;/code&gt; for every element &lt;code&gt;Elem&lt;/code&gt; in &lt;code&gt;List1&lt;/code&gt;, in parallel. Returns the list of return values, in the same order as in &lt;code&gt;List1&lt;/code&gt;.</source>
          <target state="translated">評価は、 &lt;code&gt;apply(Module, Function, [Elem|ExtraArgs])&lt;/code&gt; すべての要素のため &lt;code&gt;Elem&lt;/code&gt; で &lt;code&gt;List1&lt;/code&gt; を並行して、。戻り値のリストを、 &lt;code&gt;List1&lt;/code&gt; と同じ順序で返します。</target>
        </trans-unit>
        <trans-unit id="f5e349f57e9e0c3b6266cd97f8fd0880686a4ed8" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;shell_default:c(Mod)&lt;/code&gt;. This compiles and loads the module &lt;code&gt;Mod&lt;/code&gt; and purges old versions of the code, if necessary. &lt;code&gt;Mod&lt;/code&gt; can be either a module name or a a source file path, with or without &lt;code&gt;.erl&lt;/code&gt; extension.</source>
          <target state="translated">&lt;code&gt;shell_default:c(Mod)&lt;/code&gt; を評価します。これにより、 &lt;code&gt;Mod&lt;/code&gt; モジュールがコンパイルおよびロードされ、必要に応じて古いバージョンのコードが削除されます。 &lt;code&gt;Mod&lt;/code&gt; は、 &lt;code&gt;.erl&lt;/code&gt; 拡張子の有無にかかわらず、モジュール名またはソースファイルパスのいずれかです。</target>
        </trans-unit>
        <trans-unit id="8a588f2b8c010920996b01b795f0cfedfcfd5686" translate="yes" xml:space="preserve">
          <source>Evaluates &lt;code&gt;shell_default:help()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;shell_default:help()&lt;/code&gt; を評価します。</target>
        </trans-unit>
        <trans-unit id="552b71dbc141ce9268baf0c0616e35bedcb40da3" translate="yes" xml:space="preserve">
          <source>Evaluates a &lt;code&gt;&lt;a href=&quot;#query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; in the context of an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;, and returns the value of the last statement. The syntax of the value depends on the expression:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; コンテキストで &lt;code&gt;&lt;a href=&quot;#query&quot;&gt;query&lt;/a&gt;&lt;/code&gt; を評価し、最後のステートメントの値を返します。値の構文は式によって異なります。</target>
        </trans-unit>
        <trans-unit id="759ed7b8fb983f2b5c7237afc5c69f1444f05946" translate="yes" xml:space="preserve">
          <source>Evaluates a list of expressions in parallel, using the same initial bindings for each expression. Attempts are made to merge the bindings returned from each evaluation. This function is useful in &lt;code&gt;LocalFunctionHandler&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt; Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="translated">各式に同じ初期バインディングを使用して、式のリストを並行して評価します。各評価から返されたバインディングをマージする試みが行われます。この関数は &lt;code&gt;LocalFunctionHandler&lt;/code&gt; で役立ちます。このモジュールの「 &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt; Local Function Handler&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="0295036ecab0fa78c9441c600527984547937e01" translate="yes" xml:space="preserve">
          <source>Evaluates a list of expressions in parallel, using the same initial bindings for each expression. Attempts are made to merge the bindings returned from each evaluation. This function is useful in &lt;code&gt;LocalFunctionHandler&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; in this module.</source>
          <target state="translated">各式に同じ初期バインディングを使用して、式のリストを並行して評価します。各評価から返されたバインディングをマージしようとします。この関数は &lt;code&gt;LocalFunctionHandler&lt;/code&gt; で役立ちます。このモジュールの「 &lt;code&gt;&lt;a href=&quot;#local_function_handler&quot;&gt;Local Function Handler&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="299206cdd99ef4eff0c5a8338168e3d80a700c44" translate="yes" xml:space="preserve">
          <source>Evaluates a predefined analysis. Returns a sorted list without duplicates of &lt;code id=&quot;analyze&quot;&gt;call()&lt;/code&gt; or &lt;code&gt;constant()&lt;/code&gt;, depending on the chosen analysis. The predefined analyses, which operate on all &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt;, are (analyses marked with (*) are available in &lt;code&gt;functions&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; only):</source>
          <target state="translated">事前定義された分析を評価します。選択した分析に応じて、 &lt;code id=&quot;analyze&quot;&gt;call()&lt;/code&gt; または &lt;code&gt;constant()&lt;/code&gt; の重複なしでソートされたリストを返します。すべての &lt;code&gt;&lt;a href=&quot;#analyzed_module&quot;&gt;analyzed modules&lt;/a&gt;&lt;/code&gt; で動作する事前定義された分析は次のとおりです（（*）でマークされた分析は、 &lt;code&gt;functions&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; のみ使用できます）。</target>
        </trans-unit>
        <trans-unit id="761059e344997a0cff5e70f5e10840cf6a39a442" translate="yes" xml:space="preserve">
          <source>Evaluates a query handle in the calling process and collects all answers in a list.</source>
          <target state="translated">呼び出しプロセスでクエリハンドルを評価し、すべての回答をリストに集めます。</target>
        </trans-unit>
        <trans-unit id="0264706c5cd0c4d08bc0417d537ce893d131636d" translate="yes" xml:space="preserve">
          <source>Evaluates all instructions that occur before the &lt;code&gt;point_of_no_return&lt;/code&gt; instruction in the release upgrade script.</source>
          <target state="translated">リリースアップグレードスクリプトの &lt;code&gt;point_of_no_return&lt;/code&gt; 命令の前に発生するすべての命令を評価します。</target>
        </trans-unit>
        <trans-unit id="71788d41b547ff6e0b386fd7309236a36a585ba6" translate="yes" xml:space="preserve">
          <source>Evaluates an application upgrade or downgrade script &lt;code&gt;Script&lt;/code&gt;, the result from calling &lt;code&gt;&lt;a href=&quot;#upgrade_script-2&quot;&gt;upgrade_script/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#downgrade_script-3&quot;&gt;downgrade_script/3&lt;/a&gt;&lt;/code&gt;, exactly in the same way as &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; does.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; とまったく同じ方法で、 &lt;code&gt;&lt;a href=&quot;#upgrade_script-2&quot;&gt;upgrade_script/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#downgrade_script-3&quot;&gt;downgrade_script/3&lt;/a&gt;&lt;/code&gt; を呼び出した結果である、アプリケーションのアップグレードまたはダウングレードスクリプト &lt;code&gt;Script&lt;/code&gt; を評価します。</target>
        </trans-unit>
        <trans-unit id="4d5eb160d86c2abca190393b9f040e9e0d7211ef" translate="yes" xml:space="preserve">
          <source>Evaluates the expression &lt;code&gt;BoolExpr&lt;/code&gt;, if testing is enabled. Unless the result is &lt;code&gt;true&lt;/code&gt;, an informative exception will be generated. If there is no exception, the result of the macro expression is the atom &lt;code&gt;ok&lt;/code&gt;, and the value of &lt;code&gt;BoolExpr&lt;/code&gt; is discarded. If testing is disabled, the macro will not generate any code except the atom &lt;code&gt;ok&lt;/code&gt;, and &lt;code&gt;BoolExpr&lt;/code&gt; will not be evaluated.</source>
          <target state="translated">テストが有効な場合、式 &lt;code&gt;BoolExpr&lt;/code&gt; を評価します。結果が &lt;code&gt;true&lt;/code&gt; でない限り、通知的な例外が生成されます。例外がない場合、マクロ式の結果はアトム &lt;code&gt;ok&lt;/code&gt; となり、 &lt;code&gt;BoolExpr&lt;/code&gt; の値は破棄されます。テストが無効になっている場合、マクロはアトム &lt;code&gt;ok&lt;/code&gt; 以外のコードを生成せず、 &lt;code&gt;BoolExpr&lt;/code&gt; は評価されません。</target>
        </trans-unit>
        <trans-unit id="9d6751618399ac3188a3a1ecfee1b03c688bfdf2" translate="yes" xml:space="preserve">
          <source>Evaluates the expression &lt;code&gt;apply(Mod, Fun, Args)&lt;/code&gt; with the trace flags in &lt;code&gt;Flags&lt;/code&gt; set. This is a convenient way to trace processes from the Erlang shell.</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; セットのトレースフラグを &lt;code&gt;apply(Mod, Fun, Args)&lt;/code&gt; 、式apply（Mod、Fun、Args）を評価します。これは、Erlangシェルからプロセスをトレースするのに便利な方法です。</target>
        </trans-unit>
        <trans-unit id="a4028294563978d899f8f51e917fa472ec1835de" translate="yes" xml:space="preserve">
          <source>Evaluates the expressions &lt;code&gt;Expect&lt;/code&gt; and &lt;code&gt;Expr&lt;/code&gt; and compares the results for equality, if testing is enabled. If the values are not equal, an informative exception will be generated; see the &lt;code&gt;assert&lt;/code&gt; macro for further details.</source>
          <target state="translated">テストが有効な場合、式 &lt;code&gt;Expect&lt;/code&gt; および &lt;code&gt;Expr&lt;/code&gt; を評価し、結果が等しいかどうかを比較します。値が等しくない場合は、有益な例外が生成されます。詳細については、 &lt;code&gt;assert&lt;/code&gt; マクロを参照してください。</target>
        </trans-unit>
        <trans-unit id="394af50da1736d0811b4e0353c50f53bf9ca0c4c" translate="yes" xml:space="preserve">
          <source>Evaluates the following lines only if &lt;code&gt;Condition&lt;/code&gt; evaluates to true.</source>
          <target state="translated">&lt;code&gt;Condition&lt;/code&gt; がtrueと評価された場合にのみ、次の行を評価します。</target>
        </trans-unit>
        <trans-unit id="92b564d165307bce2c74a78a154d6e802182a1a6" translate="yes" xml:space="preserve">
          <source>Evaluates the specified function call during system initialization. &lt;code&gt;Func&lt;/code&gt; defaults to &lt;code&gt;start&lt;/code&gt;. If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; as argument. All arguments are passed as atoms. If an exception is raised, Erlang stops with an error message.</source>
          <target state="translated">システムの初期化中に、指定された関数呼び出しを評価します。 &lt;code&gt;Func&lt;/code&gt; のデフォルトは &lt;code&gt;start&lt;/code&gt; です。引数が指定されていない場合、関数はアリティ0であると想定されます。それ以外の場合は、リスト &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; を引数として、アリティ1であると想定されます。すべての引数はアトムとして渡されます。例外が発生した場合、Erlangはエラーメッセージで停止します。</target>
        </trans-unit>
        <trans-unit id="5299e33fab3f3a3a931b1151cca86a3355a0fc6a" translate="yes" xml:space="preserve">
          <source>Evaluates the specified function call during system initialization. &lt;code&gt;Func&lt;/code&gt; defaults to &lt;code&gt;start&lt;/code&gt;. If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; as argument. All arguments are passed as strings. If an exception is raised, Erlang stops with an error message.</source>
          <target state="translated">システムの初期化中に、指定された関数呼び出しを評価します。 &lt;code&gt;Func&lt;/code&gt; のデフォルトは &lt;code&gt;start&lt;/code&gt; です。引数が指定されていない場合、関数はアリティ0であると想定されます。それ以外の場合は、リスト &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; を引数として、アリティ1であると想定されます。すべての引数は文字列として渡されます。例外が発生した場合、Erlangはエラーメッセージで停止します。</target>
        </trans-unit>
        <trans-unit id="45716b79c2b111e351cc11c2b95f015fc023bb5d" translate="yes" xml:space="preserve">
          <source>Evaluates, for every tuple in &lt;code&gt;FuncCalls&lt;/code&gt;, &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; on some node in the network. Returns the list of return values, in the same order as in &lt;code&gt;FuncCalls&lt;/code&gt;.</source>
          <target state="translated">評価は、内のすべてのタプルに対して &lt;code&gt;FuncCalls&lt;/code&gt; 、 &lt;code&gt;apply(Module, Function, Args)&lt;/code&gt; 、ネットワーク内のいくつかのノード上で。 &lt;code&gt;FuncCalls&lt;/code&gt; と同じ順序で戻り値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="72787ed6a5a8d4c62182fbbe7280c959360f8476" translate="yes" xml:space="preserve">
          <source>Evaluating &lt;code&gt;select&lt;/code&gt; gives the following result:</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; を評価すると、次の結果が得られます。</target>
        </trans-unit>
        <trans-unit id="ff7513853508e7c6e3aa07908df2a450a026eb88" translate="yes" xml:space="preserve">
          <source>Evaluation</source>
          <target state="translated">Evaluation</target>
        </trans-unit>
        <trans-unit id="594ba4d05eb1c3c63ddacc267d972f04ed3b36fe" translate="yes" xml:space="preserve">
          <source>Evaluation exits with reason &lt;code&gt;{bad_position, Pos}&lt;/code&gt; if the associated position information &lt;code&gt;Pos&lt;/code&gt; of some subtree in the input does not have a recognizable format, or with reason &lt;code&gt;{bad_tree, L, C}&lt;/code&gt; if insertion of a comment at line &lt;code&gt;L&lt;/code&gt;, column &lt;code&gt;C&lt;/code&gt;, fails because the tree structure is ill-formed.</source>
          <target state="translated">入力内のサブツリーの関連付けられた位置情報 &lt;code&gt;Pos&lt;/code&gt; が認識可能な形式でない場合、評価は理由 &lt;code&gt;{bad_position, Pos}&lt;/code&gt; 終了します。行 &lt;code&gt;L&lt;/code&gt; 、列 &lt;code&gt;C&lt;/code&gt; にコメントを挿入した場合 &lt;code&gt;{bad_tree, L, C}&lt;/code&gt; 理由{bad_tree、L、C}で終了します。ツリー構造の形式が正しくないため失敗します。</target>
        </trans-unit>
        <trans-unit id="d321bedd851843e36859f0f7b4ea6334ba853951" translate="yes" xml:space="preserve">
          <source>Evaluation exits with reason &lt;code&gt;{read, Reason}&lt;/code&gt; if a read error occurred, where &lt;code&gt;Reason&lt;/code&gt; is an atom corresponding to a Posix error code; see the module &lt;code&gt;file(3)&lt;/code&gt; for details.</source>
          <target state="translated">理由による評価が終了 &lt;code&gt;{read, Reason}&lt;/code&gt; リードエラーが発生した場合、 &lt;code&gt;Reason&lt;/code&gt; Posixのエラーコードに対応する原子です。詳細については、モジュール &lt;code&gt;file(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0bfcaca03a471a2ff8e9e73bb13da09aa62995d8" translate="yes" xml:space="preserve">
          <source>Evaluation has succeed and &lt;code&gt;m:fact(1)&lt;/code&gt; returns 1.</source>
          <target state="translated">評価は成功し、 &lt;code&gt;m:fact(1)&lt;/code&gt; は1を返します。</target>
        </trans-unit>
        <trans-unit id="be6d492a53abe8537b302ab0603b1f80a31c239e" translate="yes" xml:space="preserve">
          <source>Evaluation of a match expression failed. The value &lt;code&gt;V&lt;/code&gt; did not match.</source>
          <target state="translated">一致式の評価に失敗しました。値 &lt;code&gt;V&lt;/code&gt; が一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="2aa4b338758201aab140a13095a1391abff39c28" translate="yes" xml:space="preserve">
          <source>Evaluation starts at the first clause. The pattern &lt;code&gt;N&lt;/code&gt; is matched against argument 1. The matching succeeds and the guard (&lt;code&gt;N&amp;gt;0&lt;/code&gt;) is true, thus &lt;code&gt;N&lt;/code&gt; is bound to 1, and the corresponding body is evaluated:</source>
          <target state="translated">評価は最初の節から始まります。パターン &lt;code&gt;N&lt;/code&gt; は引数1と照合されます。照合は成功し、ガード（ &lt;code&gt;N&amp;gt;0&lt;/code&gt; ）が真であるため、 &lt;code&gt;N&lt;/code&gt; は1にバインドされ、対応する本文が評価されます。</target>
        </trans-unit>
        <trans-unit id="725047dadb8168b15c5eafc0e14a7c8b49bd7809" translate="yes" xml:space="preserve">
          <source>Evan McGinnis and David Perkins (1997), &quot;Understanding SNMP MIBs&quot;, Prentice-Hall</source>
          <target state="translated">Evan McGinnis and David Perkins (1997),&quot;Understanding SNMP MIBs&quot;,Prentice-Hall</target>
        </trans-unit>
        <trans-unit id="d24154971ec1999471c06222b0fd99c1ad8a0f60" translate="yes" xml:space="preserve">
          <source>Even experienced software developers often guess wrong about where the performance bottlenecks are in their programs. Therefore, profile your program to see where the performance bottlenecks are and concentrate on optimizing them.</source>
          <target state="translated">経験豊富なソフトウェア開発者でさえ、プログラムのどこにパフォーマンスのボトルネックがあるのかを間違って推測してしまうことがよくあります。そのため、プログラムをプロファイルしてパフォーマンスのボトルネックがどこにあるかを確認し、最適化に集中しましょう。</target>
        </trans-unit>
        <trans-unit id="a157d4036066195c1becda297706abb12364bfb8" translate="yes" xml:space="preserve">
          <source>Even if all functions of a module are NIFs, an Erlang module is still needed for two reasons:</source>
          <target state="translated">モジュールのすべての関数がNIFであっても、Erlangモジュールが必要なのには2つの理由があります。</target>
        </trans-unit>
        <trans-unit id="b6b124560bc78d785ea8b4ff1c056e6184c2e39e" translate="yes" xml:space="preserve">
          <source>Even if an exception occurs during evaluation of &lt;code&gt;Body&lt;/code&gt; or &lt;code&gt;ExceptionBody&lt;/code&gt;, &lt;code&gt;AfterBody&lt;/code&gt; is evaluated. In this case the exception is passed on after &lt;code&gt;AfterBody&lt;/code&gt; has been evaluated, so the exception from the &lt;code&gt;try&lt;/code&gt; expression is the same with an &lt;code&gt;after&lt;/code&gt; section as without.</source>
          <target state="translated">&lt;code&gt;Body&lt;/code&gt; または &lt;code&gt;ExceptionBody&lt;/code&gt; の評価中に例外が発生した場合でも、 &lt;code&gt;AfterBody&lt;/code&gt; が評価されます。この場合、 &lt;code&gt;AfterBody&lt;/code&gt; が評価された後に例外が渡されるため、 &lt;code&gt;try&lt;/code&gt; 式からの例外は &lt;code&gt;after&lt;/code&gt; セクションがある場合とない場合とで同じです。</target>
        </trans-unit>
        <trans-unit id="8528b9253b183573229e9ad3a8562a65d7d9161a" translate="yes" xml:space="preserve">
          <source>Even if some information about an item exists, there can be empty fields if the dump originates from an old OTP release.</source>
          <target state="translated">アイテムに関する情報が存在していても、ダンプが古いOTPリリースからのものであれば、空のフィールドが存在する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2871294647be6ab634cc08d7fa7c613e55d2ea5f" translate="yes" xml:space="preserve">
          <source>Even if the &lt;code&gt;gen_server&lt;/code&gt; process is &lt;strong&gt;not&lt;/strong&gt; part of a supervision tree, this function is called if it receives an &lt;code&gt;'EXIT'&lt;/code&gt; message from its parent. &lt;code&gt;Reason&lt;/code&gt; is the same as in the &lt;code&gt;'EXIT'&lt;/code&gt; message.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; プロセスが監視ツリーの一部では&lt;strong&gt;ない&lt;/strong&gt;場合でも、親から &lt;code&gt;'EXIT'&lt;/code&gt; メッセージを受信すると、この関数が呼び出されます。 &lt;code&gt;Reason&lt;/code&gt; は、 &lt;code&gt;'EXIT'&lt;/code&gt; メッセージの場合と同じです。</target>
        </trans-unit>
        <trans-unit id="1a59bd256ce000b0c0ca7626b5f70a4dad526a52" translate="yes" xml:space="preserve">
          <source>Even if the &lt;code&gt;gen_statem&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; part of a supervision tree, this function is called if it receives an &lt;code&gt;'EXIT'&lt;/code&gt; message from its parent. &lt;code&gt;Reason&lt;/code&gt; is the same as in the &lt;code&gt;'EXIT'&lt;/code&gt; message.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; が監視ツリーの一部では&lt;strong&gt;ない&lt;/strong&gt;場合でも、この関数は、親から &lt;code&gt;'EXIT'&lt;/code&gt; メッセージを受信すると呼び出されます。 &lt;code&gt;Reason&lt;/code&gt; は、 &lt;code&gt;'EXIT'&lt;/code&gt; メッセージの場合と同じです。</target>
        </trans-unit>
        <trans-unit id="828aa5e634ef4dca54637e853ec5ff52a33a73b9" translate="yes" xml:space="preserve">
          <source>Even if user interaction is allowed it can be suppressed by other options, such as &lt;code&gt;silently_accept_hosts&lt;/code&gt; and &lt;code&gt;password&lt;/code&gt;. However, those options are not always desirable to use from a security point of view.</source>
          <target state="translated">ユーザーの操作が許可されている場合でも、 &lt;code&gt;silently_accept_hosts&lt;/code&gt; や &lt;code&gt;password&lt;/code&gt; などの他のオプションによって抑制できます。ただし、これらのオプションをセキュリティの観点から使用することが常に望ましいとは限りません。</target>
        </trans-unit>
        <trans-unit id="756e62650be27b6a4f50c8c1adf6eb8a453a36cb" translate="yes" xml:space="preserve">
          <source>Even if you are operating without Unicode file naming translation automatically done by the VM, you can access and create files with names in UTF-8 encoding by using raw filenames encoded as UTF-8. Enforcing the UTF-8 encoding regardless of the mode the Erlang VM is started in can in some circumstances be a good idea, as the convention of using UTF-8 filenames is spreading.</source>
          <target state="translated">VMが自動的にUnicodeファイル名変換をしていなくても、UTF-8でエンコードされた生のファイル名を使えば、UTF-8エンコーディングのファイルにアクセスしたり作成したりすることができます。Erlang VMが起動されているモードに関係なくUTF-8エンコーディングを適用することは、状況によっては良いアイデアになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b2968dd27a91c20a70b11050bf3acf695afd1310" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;&amp;lt;&amp;lt;&quot;cd&quot;&amp;gt;&amp;gt;&lt;/code&gt; ends before &lt;code&gt;&amp;lt;&amp;lt;&quot;bcde&quot;&amp;gt;&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;&amp;lt;&quot;bcde&quot;&amp;gt;&amp;gt;&lt;/code&gt; begins first and is therefore the first match. If two overlapping matches begin at the same position, the longest is returned.</source>
          <target state="translated">にもかかわらず &lt;code&gt;&amp;lt;&amp;lt;&quot;cd&quot;&amp;gt;&amp;gt;&lt;/code&gt; 終了前 &lt;code&gt;&amp;lt;&amp;lt;&quot;bcde&quot;&amp;gt;&amp;gt;&lt;/code&gt; 、 &lt;code&gt;&amp;lt;&amp;lt;&quot;bcde&quot;&amp;gt;&amp;gt;&lt;/code&gt; 最初に始まるので、最初に一致しています。2つの重複する一致が同じ位置で始まる場合、最も長いものが返されます。</target>
        </trans-unit>
        <trans-unit id="55ac8610f6b9e916e4653311ba761cc1229f858f" translate="yes" xml:space="preserve">
          <source>Even though &lt;code&gt;trace_pattern&lt;/code&gt; use the same technique as the non-blocking code loading with replicated generations of data structures and an atomic switch, the implementations are quite separate from each other. One initial idea was to use the existing mechanism of code loading to do a dummy load operation that would make a copy of the affected modules. That copy could then be instrumented with breakpoints before making it reachable with the same atomic switch as done for code loading. This approach seems straight forward but has a number of shortcomings, one being the large memory footprint when many modules are instrumented. Another problem is how execution will reach the new instrumented code. Normally loaded code can only be reached through external functions calls. Trace settings must be activated instantaneously without the need of external function calls.</source>
          <target state="translated">&lt;code&gt;trace_pattern&lt;/code&gt; にもかかわらず複製された世代のデータ構造とアトミックスイッチを使用したノンブロッキングコードのロードと同じ手法を使用すると、実装は互いに完全に分離されます。最初のアイデアの1つは、コードの読み込みの既存のメカニズムを使用して、影響を受けるモジュールのコピーを作成するダミーの読み込み操作を実行することでした。次に、そのコピーにブレークポイントを設定してから、コードのロードと同じアトミックスイッチで到達可能にすることができます。このアプローチは簡単に思えますが、いくつかの欠点があります。1つは、多くのモジュールがインストルメントされている場合のメモリフットプリントが大きいことです。もう1つの問題は、実行が新しいインストルメント化されたコードにどのように到達するかです。通常ロードされるコードには、外部関数呼び出しを介してのみ到達できます。トレース設定は、外部関数呼び出しを必要とせずに即座にアクティブ化する必要があります。</target>
        </trans-unit>
        <trans-unit id="b6f454bc32749555ed88b79417ff36687c1d9758" translate="yes" xml:space="preserve">
          <source>Even though it is highly efficient to write test suites with the &lt;code&gt;Common Test&lt;/code&gt; framework, mistakes can be made, mainly because of illegal dependencies. Some of the more frequent mistakes from our own experience with running the Erlang/OTP test suites follows:</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークを使用してテストスイートを作成することは非常に効率的ですが、主に違法な依存関係が原因でミスが発生する可能性があります。Erlang / OTPテストスイートの実行に関する私たち自身の経験からのより頻繁な間違いのいくつかを次に示します。</target>
        </trans-unit>
        <trans-unit id="061a9ec170598340079688897e326df927fc762f" translate="yes" xml:space="preserve">
          <source>Even though processes and ports conceptually always have been very similar, the implementations have been very different. Originally, more or less all port signals were handled synchronously at the time they occurred. Very early in the development of the SMP support for the runtime system we recognized that this was a huge problem for signals between ports and the outside world. That is, I/O events to and from the outside world, or I/O signals. This was one of the first things that had to be rewritten in order to be able to do I/O in parallel at all. The solution was to implement scheduling of these signals. I/O signals corresponding to different ports could then be executed in parallel on different scheduler threads. Signals from processes to ports was not as big of a problem as the I/O signals, and the implementation of those was left as they were.</source>
          <target state="translated">プロセスとポートは概念的には常に非常に似ていますが、実装は非常に異なっています。元々、多かれ少なかれ全てのポートのシグナルは発生時に同期して処理されていました。ランタイムシステムのためのSMPサポートの開発の非常に早い段階で、これがポートと外部との間のシグナルにとって大きな問題であることを認識しました。つまり、外部世界との間のI/Oイベント、つまりI/O信号です。これは、I/Oを全く並列に行えるようにするために、最初に書き換えなければならないことの1つでした。解決策は、これらの信号のスケジューリングを実装することでした。異なるポートに対応するI/O信号を、異なるスケジューラースレッド上で並列に実行することができます。プロセスからポートへの信号は、I/O信号ほど大きな問題ではなく、実装はそのままにしておきました。</target>
        </trans-unit>
        <trans-unit id="581ac68d6b0bd423a6847fc21f0bf670de01124e" translate="yes" xml:space="preserve">
          <source>Even though the access of a single object is always guaranteed to be &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt;, each traversal through a table to find the next key is not done with such guarantees. This is often not a problem, but may cause rare subtle &quot;unexpected&quot; effects if a concurrent process inserts objects during a traversal. For example, consider one process doing</source>
          <target state="translated">単一のオブジェクトへのアクセスは常に &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt; されていることが保証されていますが、次のキーを見つけるためにテーブルをトラバースするたびに、そのような保証は行われません。これは多くの場合問題ではありませんが、並行プロセスがトラバーサル中にオブジェクトを挿入すると、まれに微妙な「予期しない」影響が生じる可能性があります。たとえば、1つのプロセスを実行するとします</target>
        </trans-unit>
        <trans-unit id="c5eebf65b04d5ee6473648862805d07be8c7eddd" translate="yes" xml:space="preserve">
          <source>Even though the following example shows one way to transform data from XML to HTML it also applies to transformations to other formats.</source>
          <target state="translated">次の例では、XMLからHTMLへのデータ変換の方法を示していますが、他の形式への変換にも適用されます。</target>
        </trans-unit>
        <trans-unit id="726faff0b96645aa4a47e5812a22604ba91baa69" translate="yes" xml:space="preserve">
          <source>Even with multi-threaded set to &lt;code&gt;extended&lt;/code&gt; there is still a risk for 'reorder' when sending inform-requsts, which require a response (and may therefor require resending).</source>
          <target state="translated">マルチスレッドが &lt;code&gt;extended&lt;/code&gt; に設定されている場合でも、inform-requstを送信するときに「reorder」のリスクがあります。これには応答が必要です（したがって、再送信が必要になる場合があります）。</target>
        </trans-unit>
        <trans-unit id="8956c2a53170e98ab442a8ae115c9727c0a96836" translate="yes" xml:space="preserve">
          <source>Event handler &lt;code&gt;my_evh1&lt;/code&gt; is started with &lt;code&gt;[]&lt;/code&gt; as argument to the init function. Event handler &lt;code&gt;my_evh2&lt;/code&gt; is started with the name of the current node in the init argument list.</source>
          <target state="translated">イベントハンドラー &lt;code&gt;my_evh1&lt;/code&gt; は、init関数の引数として &lt;code&gt;[]&lt;/code&gt; で開始されます。イベントハンドラー &lt;code&gt;my_evh2&lt;/code&gt; は、init引数リストの現在のノードの名前で開始されます。</target>
        </trans-unit>
        <trans-unit id="fd0a747770ffd37220ea7011e1dd286beea94778" translate="yes" xml:space="preserve">
          <source>Event handlers can also be plugged in using one of the following &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;test specification&lt;/a&gt;&lt;/code&gt; terms:</source>
          <target state="translated">イベントハンドラーは、次の &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;test specification&lt;/a&gt;&lt;/code&gt; 用語のいずれかを使用してプラグインすることもできます。</target>
        </trans-unit>
        <trans-unit id="eaae365de13b3365af4a53ef404441254081697c" translate="yes" xml:space="preserve">
          <source>Event handlers can be installed by an &lt;code&gt;event_handler&lt;/code&gt; start flag (&lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;) or option &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;, where the argument specifies the names of one or more event handler modules.</source>
          <target state="translated">イベントハンドラーは、 &lt;code&gt;event_handler&lt;/code&gt; 開始フラグ（ &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; ）またはオプション &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; によってインストールできます。ここで、引数は1つ以上のイベントハンドラーモジュールの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="eabc790d00812b33da77b202701e348d39479228" translate="yes" xml:space="preserve">
          <source>Event handling</source>
          <target state="translated">イベント処理</target>
        </trans-unit>
        <trans-unit id="57d0a9b4bb919f5ebea8ca7ad8aaf82293d64de9" translate="yes" xml:space="preserve">
          <source>Event notification messages sent as a result of calls to &lt;code&gt;&lt;a href=&quot;#create_subscription-2&quot;&gt;create_subscription/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#create_subscription-2&quot;&gt;create_subscription/2,3&lt;/a&gt;&lt;/code&gt; の呼び出しの結果として送信されるイベント通知メッセージ。</target>
        </trans-unit>
        <trans-unit id="26a93f947e954bbcd99f1efe0bea5871a3c244d3" translate="yes" xml:space="preserve">
          <source>Event postponing</source>
          <target state="translated">イベントの延期</target>
        </trans-unit>
        <trans-unit id="857ef522c704ef1c6115a69b01f24e2e3dd8f469" translate="yes" xml:space="preserve">
          <source>Event traces can be viewed in a generic message sequence chart tool, &lt;code&gt;et&lt;/code&gt;, or as standard output (events are written to stdio).</source>
          <target state="translated">イベントトレースは、一般的なメッセージシーケンスチャートツールで見ることができる &lt;code&gt;et&lt;/code&gt; 、または標準出力として（イベントは標準入出力に書き込まれます）。</target>
        </trans-unit>
        <trans-unit id="25c6c0e62c4a3f1be54b28d7858c4ad4673095ce" translate="yes" xml:space="preserve">
          <source>Event-Timestamp AVP</source>
          <target state="translated">イベントタイムスタンプ AVP</target>
        </trans-unit>
        <trans-unit id="c5497bca58468ae64aed6c0fd921109217988db3" translate="yes" xml:space="preserve">
          <source>Events</source>
          <target state="translated">Events</target>
        </trans-unit>
        <trans-unit id="9e56a09597470fd22e7fac6179093d49169582c0" translate="yes" xml:space="preserve">
          <source>Events are categorized in different &lt;code&gt;&lt;strong&gt;event types&lt;/strong&gt;&lt;/code&gt;. Events of all types are for a given state handled in the same callback function, and that function gets &lt;code&gt;EventType&lt;/code&gt; and &lt;code&gt;EventContent&lt;/code&gt; as arguments. The meaning of the &lt;code&gt;EventContent&lt;/code&gt; depends on the &lt;code&gt;EventType&lt;/code&gt;.</source>
          <target state="translated">イベントは、さまざまな &lt;code&gt;&lt;strong&gt;event types&lt;/strong&gt;&lt;/code&gt; 分類され&lt;strong&gt;ます&lt;/strong&gt;。すべてのタイプのイベントは、同じコールバック関数で処理される特定の状態に対するものであり、その関数は &lt;code&gt;EventType&lt;/code&gt; と &lt;code&gt;EventContent&lt;/code&gt; を引数として取得します。 &lt;code&gt;EventContent&lt;/code&gt; の意味は、 &lt;code&gt;EventType&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="7847d251c9660fc6d96dabda7ed27b680ad398c1" translate="yes" xml:space="preserve">
          <source>Events are categorized in different &lt;code&gt;event types&lt;/code&gt;. Events of all types are for a given state handled in the same callback function, and that function gets &lt;code&gt;EventType&lt;/code&gt; and &lt;code&gt;EventContent&lt;/code&gt; as arguments.</source>
          <target state="translated">イベントは、さまざまな &lt;code&gt;event types&lt;/code&gt; 分類されます。すべてのタイプのイベントは、同じコールバック関数で処理される特定の状態に対するものであり、その関数は引数として &lt;code&gt;EventType&lt;/code&gt; および &lt;code&gt;EventContent&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="165331d3b21b2eecb28815ac933dc3752823c675" translate="yes" xml:space="preserve">
          <source>Events are handled by one callback function per state.</source>
          <target state="translated">イベントは状態ごとに1つのコールバック関数で処理されます。</target>
        </trans-unit>
        <trans-unit id="45b4437bedf142adc160d31fd44923015b2f1648" translate="yes" xml:space="preserve">
          <source>Events are handled by one single callback function.</source>
          <target state="translated">イベントは1つのコールバック関数で処理されます。</target>
        </trans-unit>
        <trans-unit id="71fad69818049f257b3ce053cda1b27535bab8fa" translate="yes" xml:space="preserve">
          <source>Events are of different &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;types&lt;/a&gt;&lt;/code&gt;, so the callback functions can know the origin of an event and how to respond.</source>
          <target state="translated">イベントにはさまざまな &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;types&lt;/a&gt;&lt;/code&gt; があるため、コールバック関数はイベントの発生元と応答方法を知ることができます。</target>
        </trans-unit>
        <trans-unit id="9c62995c5001a4954ef586dc0d3e585c2eea79f3" translate="yes" xml:space="preserve">
          <source>Events are reported to the collector directly with the report function or indirectly via one or more trace clients. All reported events are first filtered thru the collector filter before they are stored by the collector. By replacing the default collector filter with a customized dito it is possible to allow any trace data as input. The collector filter is a dictionary entry with the predefined key {filter, collector} and the value is a fun of arity 1. See et_selector:make_event/1 for interface details, such as which erlang:trace/1 tuples that are accepted.</source>
          <target state="translated">イベントは、report 機能を使用して直接コレクタに報告されるか、1 つ以上のトレースクライアントを介して間接的に報告されます。報告されたすべてのイベントは、コレクタに保存される前に、最初にコレクタフィルタでフィルタリングされます。デフォルトのコレクタフィルタをカスタマイズした dito に置き換えることで、任意のトレースデータを入力として許可することができます。コレクターフィルタは、定義済みのキー {filter,collector}を持つ辞書エントリで、値はアリティ 1 の fun です。どの erlang:trace/1 タプルが受け入れられるかなどのインターフェースの詳細は et_selector:make_event/1 を参照してください。</target>
        </trans-unit>
        <trans-unit id="a9c736a11774dca76a58d3eb1d49de20b4881ef3" translate="yes" xml:space="preserve">
          <source>Events that include a &lt;code&gt;WantReply&lt;/code&gt; expect the event handling process to call &lt;code&gt;&lt;a href=&quot;ssh_connection#reply_request-4&quot;&gt;ssh_connection:reply_request/4&lt;/a&gt;&lt;/code&gt; with the boolean value of &lt;code&gt;WantReply&lt;/code&gt; as the second argument.</source>
          <target state="translated">&lt;code&gt;WantReply&lt;/code&gt; を含むイベントは、イベント処理プロセスが2番目の引数としてブール値の &lt;code&gt;WantReply&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;ssh_connection#reply_request-4&quot;&gt;ssh_connection:reply_request/4&lt;/a&gt;&lt;/code&gt; を呼び出すことを期待します。</target>
        </trans-unit>
        <trans-unit id="c77837dc77a2f8d9e868b2ce0c78db1ef18e1a8c" translate="yes" xml:space="preserve">
          <source>Every SSH server presents a public key - the</source>
          <target state="translated">すべての SSH サーバは公開鍵を提示します。</target>
        </trans-unit>
        <trans-unit id="fb80ed10e8bdc1055fae48fa100d04d8a65eb7ee" translate="yes" xml:space="preserve">
          <source>Every abstract syntax tree has a &lt;strong&gt;type&lt;/strong&gt;, given by the function &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt;. In addition, each syntax tree has a list of &lt;strong&gt;user annotations&lt;/strong&gt; (cf. &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt;), which are included in the Core Erlang syntax.</source>
          <target state="translated">すべての抽象構文木には、関数 &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; で指定される&lt;strong&gt;型&lt;/strong&gt;があります。さらに、各構文ツリーには、Core Erlang構文に含まれている&lt;strong&gt;ユーザー注釈の&lt;/strong&gt;リスト（ &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt; を参照）があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1db09d6e95601464c273e6d5a1621d9b7526c090" translate="yes" xml:space="preserve">
          <source>Every abstract syntax tree node has a &lt;strong&gt;type&lt;/strong&gt;, given by the function &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt;. Each node also has associated &lt;strong&gt;attributes&lt;/strong&gt;; see &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt; for details. The functions &lt;code&gt;&lt;a href=&quot;#make_tree-2&quot;&gt;make_tree/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#subtrees-1&quot;&gt;subtrees/1&lt;/a&gt;&lt;/code&gt; are generic constructor/decomposition functions for abstract syntax trees. The functions &lt;code&gt;&lt;a href=&quot;#abstract-1&quot;&gt;abstract/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#concrete-1&quot;&gt;concrete/1&lt;/a&gt;&lt;/code&gt; convert between constant Erlang terms and their syntactic representations. The set of syntax tree nodes is extensible through the &lt;code&gt;&lt;a href=&quot;#tree-2&quot;&gt;tree/2&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">すべての抽象構文ツリーノードには、関数 &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; で指定される&lt;strong&gt;タイプ&lt;/strong&gt;があります。各ノードには関連する&lt;strong&gt;属性&lt;/strong&gt;もあり&lt;strong&gt;ます&lt;/strong&gt;。詳細については、 &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt; を参照してください。関数 &lt;code&gt;&lt;a href=&quot;#make_tree-2&quot;&gt;make_tree/2&lt;/a&gt;&lt;/code&gt; およびsubtrees / &lt;code&gt;&lt;a href=&quot;#subtrees-1&quot;&gt;subtrees/1&lt;/a&gt;&lt;/code&gt; は、抽象構文ツリー用の汎用コンストラクター/分解関数です。関数 &lt;code&gt;&lt;a href=&quot;#abstract-1&quot;&gt;abstract/1&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#concrete-1&quot;&gt;concrete/1&lt;/a&gt;&lt;/code&gt; は、Erlangの定数項とその構文表現の間で変換を行います。構文ツリーノードのセットは、 &lt;code&gt;&lt;a href=&quot;#tree-2&quot;&gt;tree/2&lt;/a&gt;&lt;/code&gt; 関数を介して拡張できます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7dd58f86011ba4a1b6cef27d0e0dba439b5153e5" translate="yes" xml:space="preserve">
          <source>Every data item is initialized, so that no problems arise when a newly created port is closed (without there being any corresponding socket). This routine is called when &lt;code&gt;open_port({spawn, &quot;uds_drv&quot;},[])&lt;/code&gt; is called from Erlang.</source>
          <target state="translated">すべてのデータ項目が初期化されるため、新しく作成されたポートが閉じられても（対応するソケットがない場合）問題は発生しません。このルーチンは、Erlangから &lt;code&gt;open_port({spawn, &quot;uds_drv&quot;},[])&lt;/code&gt; が呼び出されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="cf159265ffc329d6f87d5f1f3acf869fdc230697" translate="yes" xml:space="preserve">
          <source>Every driver instance has an associated queue. This queue is a &lt;code&gt;SysIOVec&lt;/code&gt;, which works as a buffer. It is mostly used for the driver to buffer data that is to be written to a device, it is a byte stream. If the port owner process closes the driver, and the queue is not empty, the driver is not closed. This enables the driver to flush its buffers before closing.</source>
          <target state="translated">すべてのドライバインスタンスには、関連付けられたキューがあります。このキューは、バッファーとして機能する &lt;code&gt;SysIOVec&lt;/code&gt; です。これは主に、ドライバーがデバイスに書き込むデータをバッファーするために使用されます。これはバイトストリームです。ポート所有者プロセスがドライバーを閉じ、キューが空でない場合、ドライバーは閉じられません。これにより、ドライバーは閉じる前にバッファーをフラッシュできます。</target>
        </trans-unit>
        <trans-unit id="fe006e1d3501395c1f8302dec32bffa876b02599" translate="yes" xml:space="preserve">
          <source>Every example using Ets has a corresponding example in Mnesia. In general, all Ets examples also apply to Dets tables.</source>
          <target state="translated">Etsを使用したすべての例は、Mnesiaに対応する例を持っています。一般的に、すべての Ets の例は Dets テーブルにも適用されます。</target>
        </trans-unit>
        <trans-unit id="f98b751bedf90709a631ac9f5af2c36ba06f1b60" translate="yes" xml:space="preserve">
          <source>Every message in the handshake starts with a 16-bit big-endian integer, which contains the message length (not counting the two initial bytes). In Erlang this corresponds to option &lt;code&gt;{packet, 2}&lt;/code&gt; in &lt;code&gt;gen_tcp(3)&lt;/code&gt;. Notice that after the handshake, the distribution switches to 4 byte packet headers.</source>
          <target state="translated">ハンドシェイク内のすべてのメッセージは、メッセージ長を含む16ビットのビッグエンディアン整数で始まります（2つの最初のバイトはカウントしません）。Erlangでは、これは &lt;code&gt;gen_tcp(3)&lt;/code&gt; のオプション &lt;code&gt;{packet, 2}&lt;/code&gt; に対応します。ハンドシェイクの後、配布が4バイトのパケットヘッダーに切り替わることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c5d18488ccd5e8ec925e053a5841a60789f8af7c" translate="yes" xml:space="preserve">
          <source>Every occurrence of &lt;code&gt;?server_node&lt;/code&gt; in &lt;code&gt;mess_server.erl&lt;/code&gt; is now replaced by &lt;code&gt;messenger@super&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mess_server.erl&lt;/code&gt; 内のすべての &lt;code&gt;?server_node&lt;/code&gt; が &lt;code&gt;messenger@super&lt;/code&gt; 置き換えられました。</target>
        </trans-unit>
        <trans-unit id="22006f1bcd18f6440b909a3770c9fb3d13758168" translate="yes" xml:space="preserve">
          <source>Every option can be specified without parameters, the default value is then applied. Values to the options are supplied &lt;strong&gt;only&lt;/strong&gt; when the default is not to be used. For example, &lt;code&gt;erlsrv set myservice -prio -arg&lt;/code&gt; sets the default priority and removes all arguments.</source>
          <target state="translated">すべてのオプションはパラメーターなしで指定でき、デフォルト値が適用されます。オプションの値は、デフォルトが使用されない場合に&lt;strong&gt;のみ&lt;/strong&gt;提供されます。例えば、 &lt;code&gt;erlsrv set myservice -prio -arg&lt;/code&gt; はデフォルトの優先順位を設定し、すべての引数を削除します。</target>
        </trans-unit>
        <trans-unit id="badc67251af42d5f0d638c18181eea29b7067b0a" translate="yes" xml:space="preserve">
          <source>Every process is a member of some process group and all groups have a &lt;strong&gt;group leader&lt;/strong&gt;. All I/O from the group is channeled to the group leader. When a new process is spawned, it gets the same group leader as the spawning process. Initially, at system startup, &lt;code&gt;init&lt;/code&gt; is both its own group leader and the group leader of all processes.</source>
          <target state="translated">すべてのプロセスはいくつかのプロセスグループのメンバーであり、すべてのグループには&lt;strong&gt;グループリーダーがあり&lt;/strong&gt;ます。グループからのすべてのI / Oは、グループリーダーに送られます。新しいプロセスが生成されると、そのプロセスは生成プロセスと同じグループリーダーを取得します。最初は、システムの起動時に、 &lt;code&gt;init&lt;/code&gt; は自身のグループリーダーであり、すべてのプロセスのグループリーダーです。</target>
        </trans-unit>
        <trans-unit id="43c3a91d6b4ea7a02719788c26f7335b409720d6" translate="yes" xml:space="preserve">
          <source>Every term object we can reach is copied to the &lt;strong&gt;to space&lt;/strong&gt; and stored on top off the &lt;strong&gt;scan stop&lt;/strong&gt; line, and then the scan stop is moved to the end of the last object.</source>
          <target state="translated">到達できるすべての用語オブジェクトが&lt;strong&gt;toスペースに&lt;/strong&gt;コピーされ、&lt;strong&gt;スキャン停止&lt;/strong&gt;行の一番上に格納されてから、&lt;strong&gt;スキャン停止&lt;/strong&gt;が最後のオブジェクトの最後に移動されます。</target>
        </trans-unit>
        <trans-unit id="640d27e25498fb0f2f92c0b0862b959aec5e5da9" translate="yes" xml:space="preserve">
          <source>Every time a chunk of bytes is transferred the following call is made:</source>
          <target state="translated">バイトのチャンクが転送されるたびに、次のような呼び出しが行われます。</target>
        </trans-unit>
        <trans-unit id="c5357adfd99b22af4351c1d88ef0a99dd140b6fa" translate="yes" xml:space="preserve">
          <source>Every time a daemon &lt;code&gt;&lt;a href=&quot;#running-an-erlang-ssh-daemon&quot;&gt;is started&lt;/a&gt;&lt;/code&gt;, it enables one-time execution of commands as described in the &lt;code&gt;&lt;a href=&quot;#simple-client-example&quot;&gt;previous section&lt;/a&gt;&lt;/code&gt; unless explicitly disabled.</source>
          <target state="translated">デーモン &lt;code&gt;&lt;a href=&quot;#running-an-erlang-ssh-daemon&quot;&gt;is started&lt;/a&gt;&lt;/code&gt; たびに、明示的に無効にされて &lt;code&gt;&lt;a href=&quot;#simple-client-example&quot;&gt;previous section&lt;/a&gt;&lt;/code&gt; ない限り、前のセクションで説明したようにコマンドの1回限りの実行が可能になります。</target>
        </trans-unit>
        <trans-unit id="300d68a2f054e9edab4217e7742c82912ef03b64" translate="yes" xml:space="preserve">
          <source>Every time a random number is requested, a state is used to calculate it and a new state is produced. The state can either be implicit or be an explicit argument and return value.</source>
          <target state="translated">乱数が要求されるたびに、状態はそれを計算するために使用され、新しい状態が生成されます。状態は暗黙的なものか、明示的な引数と戻り値のどちらかになります。</target>
        </trans-unit>
        <trans-unit id="2b10cda9999da6d5b101f56f3f30001473abe8ca" translate="yes" xml:space="preserve">
          <source>Every time a random number is requested, a state is used to calculate it, and a new state is produced. The state can either be implicit (kept in the process dictionary) or be an explicit argument and return value. In this implementation, the state (the type &lt;code&gt;ran()&lt;/code&gt;) consists of a tuple of three integers.</source>
          <target state="translated">乱数が要求されるたびに、状態を使用してそれが計算され、新しい状態が生成されます。状態は、暗黙的（プロセスディクショナリに保持）または明示的な引数と戻り値のいずれかです。この実装では、状態（タイプ &lt;code&gt;ran()&lt;/code&gt; ）は3つの整数のタプルで構成されます。</target>
        </trans-unit>
        <trans-unit id="1d72125a0c8f02c7a0e8ecbae2be3404d4787cc4" translate="yes" xml:space="preserve">
          <source>Everything following &lt;code&gt;--&lt;/code&gt; up to the next flag (&lt;code&gt;-flag&lt;/code&gt; or &lt;code&gt;+flag&lt;/code&gt;) is considered plain arguments and can be retrieved using &lt;code&gt;init:get_plain_arguments/0&lt;/code&gt;.</source>
          <target state="translated">すべて下記 &lt;code&gt;--&lt;/code&gt; アップ次フラグを（ &lt;code&gt;-flag&lt;/code&gt; または &lt;code&gt;+flag&lt;/code&gt; ）普通の引数とみなされ、使用して取得することができる &lt;code&gt;init:get_plain_arguments/0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d95dd812bd3d238de2a55a6a4023e060a98b88e6" translate="yes" xml:space="preserve">
          <source>Everything following &lt;code&gt;--&lt;/code&gt; up to the next flag is considered plain arguments and can be retrieved using &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt; get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下のすべて &lt;code&gt;--&lt;/code&gt; アップ次のフラグには無地の引数とみなされ、使用して取得することができ &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt; get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="05a72a6b72c1a94decb7dbf00a0ed42ed8037983" translate="yes" xml:space="preserve">
          <source>Everything following &lt;code&gt;--&lt;/code&gt; up to the next flag is considered plain arguments and can be retrieved using &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以降のすべて &lt;code&gt;--&lt;/code&gt; 次のフラグまではプレーンな引数と &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="15ece633b6db7b6e6411aedb27fcb438934f6610" translate="yes" xml:space="preserve">
          <source>Everything following &lt;code&gt;-extra&lt;/code&gt; is considered plain arguments and can be retrieved using &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt; get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-extra&lt;/code&gt; に続くものはすべてプレーン引数と &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt; get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="15dc2091ac56caf50d53f7d394787b6e1d601a01" translate="yes" xml:space="preserve">
          <source>Everything following &lt;code&gt;-extra&lt;/code&gt; is considered plain arguments and can be retrieved using &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-extra&lt;/code&gt; に続くものはすべてプレーン引数と &lt;code&gt;&lt;a href=&quot;#get_plain_arguments-0&quot;&gt;get_plain_arguments/0&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="e18a20a8f88b47c5d6740bd605c3c315ac0e9a15" translate="yes" xml:space="preserve">
          <source>Everything following &lt;code&gt;-extra&lt;/code&gt; is considered plain arguments and can be retrieved using &lt;code&gt;init:get_plain_arguments/0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-extra&lt;/code&gt; に続くものはすべて単純な引数と &lt;code&gt;init:get_plain_arguments/0&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="e5b2d53da87bdb661a8a780b52c6879c89fb595d" translate="yes" xml:space="preserve">
          <source>Everything that &lt;code&gt;Common Test&lt;/code&gt; normally prints in the test case logs, are in the interactive mode written to a log named &lt;code&gt;ctlog.html&lt;/code&gt; in directory &lt;code&gt;ct_run.&amp;lt;timestamp&amp;gt;&lt;/code&gt;. A link to this file is available in the file named &lt;code&gt;last_interactive.html&lt;/code&gt; in the directory from which you execute &lt;code&gt;ct_run&lt;/code&gt;. Specifying a different root directory for the logs than the current working directory is not supported.</source>
          <target state="translated">ことをすべて &lt;code&gt;Common Test&lt;/code&gt; 正常にテストケースのログに出力しますが、指定されたログに書き込まれたインタラクティブモードになっている &lt;code&gt;ctlog.html&lt;/code&gt; ディレクトリに &lt;code&gt;ct_run.&amp;lt;timestamp&amp;gt;&lt;/code&gt; 。このファイルへのリンクは、名前のファイルで提供されています &lt;code&gt;last_interactive.html&lt;/code&gt; あなたが実行するディレクトリに &lt;code&gt;ct_run&lt;/code&gt; を。現在の作業ディレクトリとは異なるログのルートディレクトリを指定することはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="cc7d94692ef50a30f1f29540dc86e6c8c0dd9c08" translate="yes" xml:space="preserve">
          <source>Everything that is written as a function call is translated into a match specification call to a built-in function, so that the call &lt;code&gt;is_list(X)&lt;/code&gt; is translated to &lt;code&gt;{'is_list', '$1'}&lt;/code&gt; (&lt;code&gt;'$1'&lt;/code&gt; is only an example, the numbering can vary). If one tries to call a function that is not a match specification built-in, it causes an error.</source>
          <target state="translated">関数呼び出しとして記述されたものはすべて、組み込み関数の一致仕様呼び出しに変換されるため、呼び出し &lt;code&gt;is_list(X)&lt;/code&gt; は &lt;code&gt;{'is_list', '$1'}&lt;/code&gt; 変換されます（ &lt;code&gt;'$1'&lt;/code&gt; は単なる例です） 、番号付けは異なる場合があります）。組み込みの一致仕様ではない関数を呼び出そうとすると、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="aebb4f61c05e9fe7cd21d9f4c985e211fc4010be" translate="yes" xml:space="preserve">
          <source>Everything up to and including the call to the handler callbacks is executed on the client process, that is, the process where the log event was issued. It is up to the handler implementation if other processes are involved or not.</source>
          <target state="translated">ハンドラコールバックへの呼び出しを含むすべての処理は、クライアントプロセス、つまりログイベントが発行されたプロセスで実行されます。他のプロセスが関与しているかどうかはハンドラの実装次第です。</target>
        </trans-unit>
        <trans-unit id="4bd1b78f202fd8c93b4609c3c0d3da13ed54bafa" translate="yes" xml:space="preserve">
          <source>Everything written to &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; is logged in &lt;code&gt;log_dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;stdin&lt;/code&gt; と &lt;code&gt;stdout&lt;/code&gt; に書き込まれたものはすべて &lt;code&gt;log_dir&lt;/code&gt; に記録されます。</target>
        </trans-unit>
        <trans-unit id="56ea7b40a09edbdba2f39e8646b36c087ec023fb" translate="yes" xml:space="preserve">
          <source>Exact_Reductions_Since_Last_Call}</source>
          <target state="translated">Exact_Reductions_Since_Last_Call}</target>
        </trans-unit>
        <trans-unit id="9ab8e78e980fe707ae8c80e17edf332f42ac0a84" translate="yes" xml:space="preserve">
          <source>Exactly equal to</source>
          <target state="translated">完全に等しい</target>
        </trans-unit>
        <trans-unit id="814fd19cd915eb595cb9b5182a380533aba869ab" translate="yes" xml:space="preserve">
          <source>Exactly not equal to</source>
          <target state="translated">正確にはイコールではありません。</target>
        </trans-unit>
        <trans-unit id="0f01ed56a1e32a05e5ef96e4d779f34784af9a96" translate="yes" xml:space="preserve">
          <source>Example</source>
          <target state="translated">Example</target>
        </trans-unit>
        <trans-unit id="1a24428b6d1c88d4eb72b8f12702d80b49a1d77a" translate="yes" xml:space="preserve">
          <source>Example (continued from the previous sections)</source>
          <target state="translated">例(前節からの続き</target>
        </trans-unit>
        <trans-unit id="6dcd3f46d09547b62bf07ba9b2943c95d53ddae3" translate="yes" xml:space="preserve">
          <source>Example 1</source>
          <target state="translated">例1</target>
        </trans-unit>
        <trans-unit id="1c56ea49918b9baed94cf4bc0ee9f324efc8841a" translate="yes" xml:space="preserve">
          <source>Example 2</source>
          <target state="translated">例2</target>
        </trans-unit>
        <trans-unit id="fbf4dab701189a344fa5ab06d7b87c11a74e3da0" translate="yes" xml:space="preserve">
          <source>Example 3</source>
          <target state="translated">例3</target>
        </trans-unit>
        <trans-unit id="f4cd3ef194759e6a1bf205a2958b720d8edb10da" translate="yes" xml:space="preserve">
          <source>Example 4</source>
          <target state="translated">例4</target>
        </trans-unit>
        <trans-unit id="dcb2a7f833e9a3ee29881cf3f00069ceeab20571" translate="yes" xml:space="preserve">
          <source>Example 5</source>
          <target state="translated">例5</target>
        </trans-unit>
        <trans-unit id="69126e599801a8577cf34e537a3e5b119797d966" translate="yes" xml:space="preserve">
          <source>Example 6</source>
          <target state="translated">例6</target>
        </trans-unit>
        <trans-unit id="5da743f6856f59f85c81f30e766731f5631a39c2" translate="yes" xml:space="preserve">
          <source>Example 7</source>
          <target state="translated">例7</target>
        </trans-unit>
        <trans-unit id="bfa099b8439b91f3e877995de0b2196b1de1bcf9" translate="yes" xml:space="preserve">
          <source>Example &lt;code&gt;{ok, PemBin} = file:read_file(&quot;cert.pem&quot;). PemEntries = public_key:pem_decode(PemBin).&lt;/code&gt;</source>
          <target state="translated">例 &lt;code&gt;{ok, PemBin} = file:read_file(&quot;cert.pem&quot;). PemEntries = public_key:pem_decode(PemBin).&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ba2d7fa8ce21db441399ed03cb09095a03b028bc" translate="yes" xml:space="preserve">
          <source>Example &lt;code&gt;{ok, SshBin} = file:read_file(&quot;known_hosts&quot;)&lt;/code&gt;.  If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;public_key&lt;/code&gt; the binary can be either an RFC4716 public key or an OpenSSH public key.</source>
          <target state="translated">例 &lt;code&gt;{ok, SshBin} = file:read_file(&quot;known_hosts&quot;)&lt;/code&gt; 。 &lt;code&gt;Type&lt;/code&gt; が &lt;code&gt;public_key&lt;/code&gt; の場合、バイナリはRFC4716公開鍵またはOpenSSH公開鍵のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="0fc0baf4a8904cd2f39b8584a9758f9b555e1a6e" translate="yes" xml:space="preserve">
          <source>Example AVP with a Grouped Data Type</source>
          <target state="translated">グループ化されたデータ型を持つ AVP の例</target>
        </trans-unit>
        <trans-unit id="a16d51d95de1ddfa7c6f576aa0ae5013e3226291" translate="yes" xml:space="preserve">
          <source>Example log entry:</source>
          <target state="translated">ログエントリの例。</target>
        </trans-unit>
        <trans-unit id="cd7a90921a7718cc39b25f7cf95e96e90a9567e9" translate="yes" xml:space="preserve">
          <source>Example of Receiving Messages</source>
          <target state="translated">メッセージの受信例</target>
        </trans-unit>
        <trans-unit id="3e3428b47848dd7a6b86a04fc8ff8e144e7cf2f4" translate="yes" xml:space="preserve">
          <source>Example of Sending Messages</source>
          <target state="translated">メッセージの送信例</target>
        </trans-unit>
        <trans-unit id="c033f4cb1a39077831e4d18ec562f46497f70870" translate="yes" xml:space="preserve">
          <source>Example of Use</source>
          <target state="translated">使用例</target>
        </trans-unit>
        <trans-unit id="259e82c03c6d72a1534c5a285ed0a1db7171c095" translate="yes" xml:space="preserve">
          <source>Example of a simple client:</source>
          <target state="translated">シンプルなクライアントの例。</target>
        </trans-unit>
        <trans-unit id="92f4ee548532cd5f51debcfffc43bb04c687772e" translate="yes" xml:space="preserve">
          <source>Example of adding a disk_log handler:</source>
          <target state="translated">disk_logハンドラを追加した例。</target>
        </trans-unit>
        <trans-unit id="257937feb84c0e6400b75ebee327d1d5777a1942" translate="yes" xml:space="preserve">
          <source>Example of adding a standard handler:</source>
          <target state="translated">標準ハンドラを追加した例</target>
        </trans-unit>
        <trans-unit id="e61b0fec33e2bc15076eaa9e67698b83b16ba6fa" translate="yes" xml:space="preserve">
          <source>Example of an Erlang SCTP client interacting with the above server. Notice that in this example the client creates an association with the server with 5 outbound streams. Therefore, sending of &lt;code&gt;&quot;Test 0&quot;&lt;/code&gt; over stream 0 succeeds, but sending of &lt;code&gt;&quot;Test 5&quot;&lt;/code&gt; over stream 5 fails. The client then &lt;code&gt;abort&lt;/code&gt;s the association, which results in that the corresponding event is received on the server side.</source>
          <target state="translated">上記のサーバーと対話するErlang SCTPクライアントの例。この例では、クライアントが5つの送信ストリームを持つサーバーとの関連付けを作成していることに注意してください。したがって、ストリーム0を介した &lt;code&gt;&quot;Test 0&quot;&lt;/code&gt; の送信は成功しますが、ストリーム5を介した &lt;code&gt;&quot;Test 5&quot;&lt;/code&gt; の送信は失敗します。その後、クライアントは関連付けを &lt;code&gt;abort&lt;/code&gt; ます。これにより、対応するイベントがサーバー側で受信されます。</target>
        </trans-unit>
        <trans-unit id="3fd6e11a8bb0797932289d1cfbe298d6e0bf1187" translate="yes" xml:space="preserve">
          <source>Example of an Erlang SCTP server that receives SCTP messages and prints them on the standard output:</source>
          <target state="translated">SCTPメッセージを受信して標準出力に出力するErlang SCTPサーバの例。</target>
        </trans-unit>
        <trans-unit id="c892c47c216acb35b2b73747d814f80a00aef608" translate="yes" xml:space="preserve">
          <source>Example of an application callback module for packaging the supervision tree from &lt;code&gt;&lt;a href=&quot;sup_princ#ex&quot;&gt;Supervisor Behaviour&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sup_princ#ex&quot;&gt;Supervisor Behaviour&lt;/a&gt;&lt;/code&gt; からの監視ツリーをパッケージ化するためのアプリケーションコールバックモジュールの例：</target>
        </trans-unit>
        <trans-unit id="a5de6a649cc26a8a393636ddbbbe886cd7ead9a5" translate="yes" xml:space="preserve">
          <source>Example of binary sharing:</source>
          <target state="translated">バイナリ共有の例。</target>
        </trans-unit>
        <trans-unit id="2ed9364b6b6eda2982219aeedbe9334d5db4a40b" translate="yes" xml:space="preserve">
          <source>Example of code formatting a string in format &quot;DD Mon YYYY HH:MM:SS.mmmmmm&quot;, where DD is the day of month, Mon is the textual month name, YYYY is the year, HH:MM:SS is the time, and mmmmmm is the microseconds in six positions:</source>
          <target state="translated">DD Mon YYYY HH:MM:SS.mmmmmmm &quot;のフォーマットで文字列をフォーマットするコードの例です。DDは月の日、Monはテキストの月名、YYYYは年、HH:MM:SSは時間、mmmmmmmは6つの位置にあるマイクロ秒です。</target>
        </trans-unit>
        <trans-unit id="0247a3b1500c047105261cd1995debe4a9e51e84" translate="yes" xml:space="preserve">
          <source>Example of crypto_one_time/5</source>
          <target state="translated">crypto_one_time/5の例</target>
        </trans-unit>
        <trans-unit id="3989d5d63755f1628f5bdb305669cc612eb70348" translate="yes" xml:space="preserve">
          <source>Example of crypto_one_time_aead/6</source>
          <target state="translated">crypto_one_time_aead/6の例</target>
        </trans-unit>
        <trans-unit id="6ff82e78129f4624e6e01b48fadeda10f23ed3f1" translate="yes" xml:space="preserve">
          <source>Example of explicit inlining:</source>
          <target state="translated">明示的なインライン化の例。</target>
        </trans-unit>
        <trans-unit id="41239b64ed24527303ab88a73628c1b79d9ccf46" translate="yes" xml:space="preserve">
          <source>Example of implicit inlining:</source>
          <target state="translated">暗黙のインライン化の例。</target>
        </trans-unit>
        <trans-unit id="7761fdb7a43463d391b2cbd277d752ec9d80303c" translate="yes" xml:space="preserve">
          <source>Example of mac_init mac_update and mac_final</source>
          <target state="translated">mac_init mac_updateとmac_finalの例</target>
        </trans-unit>
        <trans-unit id="455ac420f5ccac25a8eff8f4bd83568d3ba54d9e" translate="yes" xml:space="preserve">
          <source>Example of modify_algorithms handling</source>
          <target state="translated">modify_algorithms の取り扱い例</target>
        </trans-unit>
        <trans-unit id="69c15f54f6b590ab9d5aa5d54ff663033104b7e4" translate="yes" xml:space="preserve">
          <source>Example of the difference between a scope and taking the binary apart before splitting:</source>
          <target state="translated">スコープとバイナリを分解してから分割する場合の違いの例</target>
        </trans-unit>
        <trans-unit id="d3ed33f631d347621c783c9afb4661ccb7def68b" translate="yes" xml:space="preserve">
          <source>Example of use of parameterization:</source>
          <target state="translated">パラメータ化の使用例。</target>
        </trans-unit>
        <trans-unit id="e3d123bd678798098b5c565abc608f2e839f2796" translate="yes" xml:space="preserve">
          <source>Example of writing and then reading a tar file follows:</source>
          <target state="translated">tarファイルを書き込んでから読み込む例は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="9f9b077b61bd8601d8f795dfc56887f0249c0476" translate="yes" xml:space="preserve">
          <source>Example on how the simple debugging functions in the &lt;code&gt;sys&lt;/code&gt; module can also be used for &lt;code&gt;ch4&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;sys&lt;/code&gt; モジュールの単純なデバッグ関数を &lt;code&gt;ch4&lt;/code&gt; に使用する方法の例：</target>
        </trans-unit>
        <trans-unit id="66faa77852fffe84221ab71b0648ab3d81646cf6" translate="yes" xml:space="preserve">
          <source>Example where the BER encoder is able to omit encoding of the default values:</source>
          <target state="translated">BER エンコーダがデフォルト値のエンコーディングを省略できる例。</target>
        </trans-unit>
        <trans-unit id="21d42770ccbe68c107da172aeb7c01ef2572447c" translate="yes" xml:space="preserve">
          <source>Example with a named &lt;code&gt;BIT STRING&lt;/code&gt; where the BER encoder does not omit the encoding:</source>
          <target state="translated">BERエンコーダーがエンコードを省略しない名前付き &lt;code&gt;BIT STRING&lt;/code&gt; の例：</target>
        </trans-unit>
        <trans-unit id="2e0e79bf70def092ed8def36eddd985bb90f55e1" translate="yes" xml:space="preserve">
          <source>Example with dbg</source>
          <target state="translated">dbgを使用した例</target>
        </trans-unit>
        <trans-unit id="f5b63d928048e9c9faf6383eb6026e9de3c6953f" translate="yes" xml:space="preserve">
          <source>Example with encryption</source>
          <target state="translated">暗号化した例</target>
        </trans-unit>
        <trans-unit id="071bf1611219ab8d85fa01f40dea82854fdc5a91" translate="yes" xml:space="preserve">
          <source>Example {ok, PemBin} = file:read_file(&quot;cert.pem&quot;).</source>
          <target state="translated">例 {ok,PemBin}=file:read_file(&quot;cert.pem&quot;)。</target>
        </trans-unit>
        <trans-unit id="0b596e219254e23717a6ee1ae566c501aed8e376" translate="yes" xml:space="preserve">
          <source>Example, format string and arguments:</source>
          <target state="translated">例、文字列の書式と引数。</target>
        </trans-unit>
        <trans-unit id="c7f3119075091db20fbaaa4b03e30bf30907b234" translate="yes" xml:space="preserve">
          <source>Example, original XSLT:</source>
          <target state="translated">例、オリジナルのXSLT。</target>
        </trans-unit>
        <trans-unit id="d2e1e9e85b4575594ca4919d15b945195fc1eabc" translate="yes" xml:space="preserve">
          <source>Example, report, and metadata with report callback:</source>
          <target state="translated">例、レポート、レポートコールバックによるメタデータ。</target>
        </trans-unit>
        <trans-unit id="b1772662009d00d418a5d08f50fc932734f65274" translate="yes" xml:space="preserve">
          <source>Example, string:</source>
          <target state="translated">例、文字列。</target>
        </trans-unit>
        <trans-unit id="c63737abd7347a7ae582cb9fbdf37d6c0e5b251e" translate="yes" xml:space="preserve">
          <source>Example:</source>
          <target state="translated">Example:</target>
        </trans-unit>
        <trans-unit id="2c85c5048a0fd6f2ad8a665b845c95aba030b32e" translate="yes" xml:space="preserve">
          <source>Example: &quot;*.ericsson.se&quot;</source>
          <target state="translated">例 &quot;*.ERICSON.SE&quot;</target>
        </trans-unit>
        <trans-unit id="b2ae51b4e97e5170ba3750d09dc6e2c5ace7a162" translate="yes" xml:space="preserve">
          <source>Example: &quot;134.138&quot; or &quot;[FEDC:BA98&quot; (all IP addresses starting with 134.138 or FEDC:BA98), &quot;66.35.250.150&quot; or &quot;[2010:836B:4179::836B:4179]&quot; (a complete IP address). &lt;code&gt;proxy&lt;/code&gt; defaults to &lt;code&gt;{undefined, []}&lt;/code&gt;, that is, no proxy is configured and &lt;code&gt;https_proxy&lt;/code&gt; defaults to the value of &lt;code&gt;proxy&lt;/code&gt;.  Maximum number of persistent connections to a host. Default is &lt;code&gt;2&lt;/code&gt;.  Maximum number of outstanding requests on the same connection to a host. Default is &lt;code&gt;5&lt;/code&gt;.  If a persistent connection is idle longer than the &lt;code&gt;keep_alive_timeout&lt;/code&gt; in milliseconds, the client closes the connection. The server can also have such a time-out but do not take that for granted. Default is &lt;code&gt;120000&lt;/code&gt; (= 2 min).  Maximum number of outstanding requests on a pipelined connection to a host. Default is &lt;code&gt;2&lt;/code&gt;.  If a persistent connection is idle longer than the &lt;code&gt;pipeline_timeout&lt;/code&gt; in milliseconds, the client closes the connection. Default is &lt;code&gt;0&lt;/code&gt;, which results in pipelining not being used.  If cookies are enabled, all valid cookies are automatically saved in the cookie database of the client manager. If option &lt;code&gt;verify&lt;/code&gt; is used, function &lt;code&gt;store_cookies/2&lt;/code&gt; has to be called for the cookies to be saved. Default is &lt;code&gt;disabled&lt;/code&gt;.  Default is &lt;code&gt;inet&lt;/code&gt;.  If the host has several network interfaces, this option specifies which one to use. See &lt;code&gt;gen_tcp:connect/3,4&lt;/code&gt; for details.  Local port number to use. See &lt;code&gt;gen_tcp:connect/3,4&lt;/code&gt; for details.  The options are appended to the socket options used by the client. These are the default values when a new request handler is started (for the initial connect). They are passed directly to the underlying transport (&lt;code&gt;gen_tcp&lt;/code&gt; or &lt;code&gt;SSL&lt;/code&gt;) &lt;strong&gt;without&lt;/strong&gt; verification.  Default is &lt;code&gt;false&lt;/code&gt;. This option is used to switch on (or off) different levels of Erlang trace on the client. It is a debug feature.  When started &lt;code&gt;stand_alone&lt;/code&gt; only the pid can be used.   Experimental option for sending HTTP requests over a unix domain socket. The value of &lt;code&gt;unix_socket&lt;/code&gt; shall be the full path to a unix domain socket file with read/write permissions for the erlang process. Default is &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">例：「134.138」または「[FEDC：BA98」（134.138またはFEDC：BA98で始まるすべてのIPアドレス）、「66.35.250.150」または「[2010：836B：4179 :: 836B：4179]」（完全なIPアドレス）。 &lt;code&gt;proxy&lt;/code&gt; のデフォルトは &lt;code&gt;{undefined, []}&lt;/code&gt; 。つまり、プロキシは構成されておらず、 &lt;code&gt;https_proxy&lt;/code&gt; のデフォルトは &lt;code&gt;proxy&lt;/code&gt; の値です。ホストへの永続的な接続の最大数。デフォルトは &lt;code&gt;2&lt;/code&gt; です。ホストへの同じ接続での未処理の要求の最大数。デフォルトは &lt;code&gt;5&lt;/code&gt; です。永続的な接続が &lt;code&gt;keep_alive_timeout&lt;/code&gt; よりミリ秒単位でアイドル状態の場合、クライアントは接続を閉じます。サーバーはこのようなタイムアウトを設定することもできますが、当然のことではありません。デフォルトは &lt;code&gt;120000&lt;/code&gt; です（= 2分）。ホストへのパイプライン接続での未処理のリクエストの最大数。デフォルトは &lt;code&gt;2&lt;/code&gt; です。永続的な接続が、ミリ秒単位の &lt;code&gt;pipeline_timeout&lt;/code&gt; よりも長い間アイドル状態である場合、クライアントは接続を閉じます。デフォルトは &lt;code&gt;0&lt;/code&gt; で、パイプラインは使用されません。 Cookieが有効になっている場合、有効なCookieはすべてクライアントマネージャーのCookieデータベースに自動的に保存されます。オプション &lt;code&gt;verify&lt;/code&gt; を使用する場合、cookieを保存するには、関数 &lt;code&gt;store_cookies/2&lt;/code&gt; を呼び出す必要があります。デフォルトは &lt;code&gt;disabled&lt;/code&gt; です。デフォルトは &lt;code&gt;inet&lt;/code&gt; です。ホストに複数のネットワークインターフェイスがある場合、このオプションはどちらを使用するかを指定します。 &lt;code&gt;gen_tcp:connect/3,4&lt;/code&gt; を参照してください詳細については。使用するローカルポート番号。詳細については、 &lt;code&gt;gen_tcp:connect/3,4&lt;/code&gt; を参照してください。オプションは、クライアントが使用するソケットオプションに追加されます。これらは、新しい要求ハンドラーが開始されたとき（初期接続用）のデフォルト値です。それらは、検証&lt;strong&gt;なしで&lt;/strong&gt;、基礎となるトランスポート（ &lt;code&gt;gen_tcp&lt;/code&gt; または &lt;code&gt;SSL&lt;/code&gt; ）に直接渡されます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。このオプションは、クライアントでさまざまなレベルのErlangトレースをオン（またはオフ）にするために使用されます。これはデバッグ機能です。始めたとき &lt;code&gt;stand_alone&lt;/code&gt; を PIDのみを使用することができます。 UNIXドメインソケットを介してHTTPリクエストを送信するための実験的なオプション。 &lt;code&gt;unix_socket&lt;/code&gt; の値&lt;strong&gt;&lt;/strong&gt;erlangプロセスの読み取り/書き込み権限を持つUNIXドメインソケットファイルへのフルパスです。デフォルトは &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5b3175948f95c9236a95514c9d3ce6d7dd382459" translate="yes" xml:space="preserve">
          <source>Example: &quot;localhost&quot; or &quot;foo.bar.se&quot;</source>
          <target state="translated">例 &quot;localhost&quot; または &quot;foo.bar.se&quot;</target>
        </trans-unit>
        <trans-unit id="1cbe235094a7eaf3982330da84d2f14f623438f6" translate="yes" xml:space="preserve">
          <source>Example: 8080</source>
          <target state="translated">例:8080</target>
        </trans-unit>
        <trans-unit id="9a831d667d70b70073d5aeb535e6c977f70c4cef" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;foo/bar, ../src&lt;/code&gt;</source>
          <target state="translated">例： &lt;code&gt;foo/bar, ../src&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dd8760bbb5b7eae747250f32afc437ca7e4f743f" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;ttb:format(Dir, [{handler, ttb:get_et_handler()}])&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;ttb:format(Dir, [{handler, ttb:get_et_handler()}])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75991fdff1875f6b31175141a766d22172489d1c" translate="yes" xml:space="preserve">
          <source>Example: &lt;code&gt;{ok, SshBin} = file:read_file(&quot;known_hosts&quot;)&lt;/code&gt;.</source>
          <target state="translated">例： &lt;code&gt;{ok, SshBin} = file:read_file(&quot;known_hosts&quot;)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7565f88b0cf269abb97f97f13ea8991917de3281" translate="yes" xml:space="preserve">
          <source>Example: A child specification to start another supervisor:</source>
          <target state="translated">例。もう一人の監督を始める子指定。</target>
        </trans-unit>
        <trans-unit id="43c8ff0fb5ae1694c8b3e3346c964f04ec161404" translate="yes" xml:space="preserve">
          <source>Example: A child specification to start the event manager from the chapter about &lt;code&gt;&lt;a href=&quot;events#mgr&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt;:</source>
          <target state="translated">例： &lt;code&gt;&lt;a href=&quot;events#mgr&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; に関する章からイベントマネージャを起動するための子仕様：</target>
        </trans-unit>
        <trans-unit id="a54abdb1cdbb3c9abb4ef5ebd2e8fccc5eeaee84" translate="yes" xml:space="preserve">
          <source>Example: Assuming the version of &lt;code&gt;Inets&lt;/code&gt; is 5.8.1, the server header string can look as follows for the different values of server-tokens:</source>
          <target state="translated">例： &lt;code&gt;Inets&lt;/code&gt; のバージョンが5.8.1であるとすると、サーバーヘッダー文字列は、サーバートークンのさまざまな値に対して次のようになります。</target>
        </trans-unit>
        <trans-unit id="04c6ad730af6ea5627d583f0288c57ab5396e115" translate="yes" xml:space="preserve">
          <source>Example: Generate XML result file in the current directory:</source>
          <target state="translated">例 カレントディレクトリにXML結果ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="ad841c501682e1a5e233e774ce900d32a3035590" translate="yes" xml:space="preserve">
          <source>Example: Process &lt;code&gt;A&lt;/code&gt; is &lt;code&gt;Tracee&lt;/code&gt;, port &lt;code&gt;B&lt;/code&gt; is tracer, and process &lt;code&gt;C&lt;/code&gt; is the port owner of &lt;code&gt;B&lt;/code&gt;. &lt;code&gt;C&lt;/code&gt; wants to close &lt;code&gt;B&lt;/code&gt; when &lt;code&gt;A&lt;/code&gt; exits. To ensure that the trace is not truncated, &lt;code&gt;C&lt;/code&gt; can call &lt;code&gt;erlang:trace_delivered(A)&lt;/code&gt; when &lt;code&gt;A&lt;/code&gt; exits, and wait for message &lt;code&gt;{trace_delivered, A, Ref}&lt;/code&gt; before closing &lt;code&gt;B&lt;/code&gt;.</source>
          <target state="translated">例：プロセス &lt;code&gt;A&lt;/code&gt; は &lt;code&gt;Tracee&lt;/code&gt; 、ポート &lt;code&gt;B&lt;/code&gt; はトレーサー、プロセス &lt;code&gt;C&lt;/code&gt; は &lt;code&gt;B&lt;/code&gt; のポート所有者です。 &lt;code&gt;C&lt;/code&gt; は、 &lt;code&gt;A&lt;/code&gt; の終了時に &lt;code&gt;B&lt;/code&gt; を閉じたいと考えています。トレースが切り捨てられないようにするために、 &lt;code&gt;C&lt;/code&gt; は &lt;code&gt;A&lt;/code&gt; の終了時に &lt;code&gt;erlang:trace_delivered(A)&lt;/code&gt; を呼び出し、メッセージ &lt;code&gt;{trace_delivered, A, Ref}&lt;/code&gt; を待ってから &lt;code&gt;B&lt;/code&gt; を閉じることができます。</target>
        </trans-unit>
        <trans-unit id="30ff092315e07341393e0f1ec7ed4811f357fab8" translate="yes" xml:space="preserve">
          <source>Example: http, https</source>
          <target state="translated">例:http、https</target>
        </trans-unit>
        <trans-unit id="a5fa274e21e33227f05790f6bde4a1cb52330ebc" translate="yes" xml:space="preserve">
          <source>Example: only allow debug level log events</source>
          <target state="translated">例:デバッグレベルのログイベントのみ許可</target>
        </trans-unit>
        <trans-unit id="20847720f513dab04a46ec7d45837973040fae8b" translate="yes" xml:space="preserve">
          <source>Example: stop all events with domain &lt;code&gt;[otp, sasl | _]&lt;/code&gt;</source>
          <target state="translated">例：ドメイン &lt;code&gt;[otp, sasl | _]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="eb01bf04c9a0e8a71c45816513df424f1c7ffedb" translate="yes" xml:space="preserve">
          <source>Examples</source>
          <target state="translated">Examples</target>
        </trans-unit>
        <trans-unit id="7cb35ec28680e86766ad9c7b78a73d27a9a3396d" translate="yes" xml:space="preserve">
          <source>Examples of SetFuns:</source>
          <target state="translated">SetFunsの例。</target>
        </trans-unit>
        <trans-unit id="134544bca135389228bc4e2d2db5e971d7ae00b6" translate="yes" xml:space="preserve">
          <source>Examples of algorithms are aes, chacha20 and des. The keysize is the number of bits and examples of the mode are cbc, ctr and gcm. The mode may be followed by a number depending on the mode. An example is the ccm mode which has a variant called ccm8 where the so called tag has a length of eight bits.</source>
          <target state="translated">アルゴリズムの例としては、aes,chacha20,desがある。鍵サイズはビット数であり、モードの例はcbc、ctr、gcmである。モードによっては、モードの後に数字が続く場合があります。例としては、CCMモードでは、CCM8と呼ばれるタグの長さが8ビットになっているものがあります。</target>
        </trans-unit>
        <trans-unit id="57b3113305345ea57409b2f56cb685edd560c14b" translate="yes" xml:space="preserve">
          <source>Examples of command-line flags used for distributed programming (for more information, see the &lt;code&gt;erl(1) &lt;/code&gt; manual page in ERTS:</source>
          <target state="translated">分散プログラミングに使用されるコマンドラインフラグの例（詳細については、ERTSの &lt;code&gt;erl(1) &lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="f1badc1ec0fc0b730bf23f5399aa9cf68a043cf4" translate="yes" xml:space="preserve">
          <source>Examples of command-line flags used for distributed programming (for more information, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS:</source>
          <target state="translated">分散プログラミングに使用されるコマンドラインフラグの例（詳細については、ERTSの &lt;code&gt;erl(1)&lt;/code&gt; のマニュアルページを参照してください：</target>
        </trans-unit>
        <trans-unit id="0b5173e6aa497770043b334811e44d9c05598971" translate="yes" xml:space="preserve">
          <source>Examples of constants are: &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;kernel-&amp;gt;stdlib&lt;/code&gt;, &lt;code&gt;[kernel, sasl]&lt;/code&gt;, &lt;code&gt;[pg -&amp;gt; mnesia, {tv, mnesia}] : Mod&lt;/code&gt;. It is an error if an instance of &lt;code&gt;Const&lt;/code&gt; does not match any vertex of any graph. If there are more than one vertex matching an untyped instance of &lt;code&gt;AtomConst&lt;/code&gt;, then the one of the most general type is chosen. A list of constants is interpreted as a set of constants, all of the same type. A tuple of constants constitute a chain of calls (which may, but does not have to, correspond to an actual chain of calls of some graph). Assigning a type to a list or tuple of &lt;code&gt;Constant&lt;/code&gt; is equivalent to assigning the type to each &lt;code&gt;Constant&lt;/code&gt;.</source>
          <target state="translated">定数の例は、 &lt;code&gt;kernel&lt;/code&gt; 、 &lt;code&gt;kernel-&amp;gt;stdlib&lt;/code&gt; 、 &lt;code&gt;[kernel, sasl]&lt;/code&gt; 、 &lt;code&gt;[pg -&amp;gt; mnesia, {tv, mnesia}] : Mod&lt;/code&gt; 。 &lt;code&gt;Const&lt;/code&gt; のインスタンスがどのグラフのどの頂点とも一致しない場合、エラーになります。 &lt;code&gt;AtomConst&lt;/code&gt; の型指定されていないインスタンスに一致する頂点が複数ある場合は、最も一般的な型の1つが選択されます。定数のリストは、すべて同じ型の定数のセットとして解釈されます。定数のタプルは、呼び出しのチェーンを構成します（これは、一部のグラフの実際の呼び出しのチェーンに対応する場合がありますが、必ずしもそうである必要はありません）。 &lt;code&gt;Constant&lt;/code&gt; リストまたはタプルに型を割り当てることは、各 &lt;code&gt;Constant&lt;/code&gt; 型を割り当てることと同じです。</target>
        </trans-unit>
        <trans-unit id="d8586462aa52f15b3de4a4e3527fbc4f359471a9" translate="yes" xml:space="preserve">
          <source>Examples of crypto_init/4 and crypto_update/2</source>
          <target state="translated">crypto_init/4 と crypto_update/2 の例</target>
        </trans-unit>
        <trans-unit id="4ced682e29b4a5d14fcb7d3570f707816e29c137" translate="yes" xml:space="preserve">
          <source>Examples of how to use ports and port drivers are provided in &lt;code&gt; Interoperability Tutorial&lt;/code&gt;. For information about the BIFs mentioned, see the &lt;code&gt;erlang(3)&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">ポートとポートドライバーの使用方法の例は、 &lt;code&gt; Interoperability Tutorial&lt;/code&gt; ます。上記のBIFの詳細については、ERTSの &lt;code&gt;erlang(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="d1b77ce0775b29f1ab9f94e7bccd248c49f3880a" translate="yes" xml:space="preserve">
          <source>Examples of how to use ports and port drivers are provided in &lt;code&gt;Interoperability Tutorial&lt;/code&gt;. For information about the BIFs mentioned, see the &lt;code&gt;erlang(3)&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">ポートとポートドライバーの使用例は、 &lt;code&gt;Interoperability Tutorial&lt;/code&gt; ます。上記のBIF については、ERTSの &lt;code&gt;erlang(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="10920cdcf5f72c6f65a01097947f1ccc92293ded" translate="yes" xml:space="preserve">
          <source>Examples of major implementation changes:</source>
          <target state="translated">主な実装変更の例。</target>
        </trans-unit>
        <trans-unit id="c37c7abc8abde091516cd99236738d5779d77aff" translate="yes" xml:space="preserve">
          <source>Examples of modules useful for distributed programming:</source>
          <target state="translated">分散プログラミングに便利なモジュールの例</target>
        </trans-unit>
        <trans-unit id="1574314a80bbb34762d52ba35aded63df5e16aaa" translate="yes" xml:space="preserve">
          <source>Examples of operator declarations:</source>
          <target state="translated">演算子宣言の例。</target>
        </trans-unit>
        <trans-unit id="65ff440fda324e1bc5a759b8541e472c74da0ecc" translate="yes" xml:space="preserve">
          <source>Examples of the two ways to configure the exec evaluator:</source>
          <target state="translated">exec評価子を設定する2つの方法の例。</target>
        </trans-unit>
        <trans-unit id="fb3447b632f6a431215776dcf254a01001a40c4f" translate="yes" xml:space="preserve">
          <source>Examples:</source>
          <target state="translated">Examples:</target>
        </trans-unit>
        <trans-unit id="b22f1170131d7c377523b5a417e571674b601b1c" translate="yes" xml:space="preserve">
          <source>Exceeded storage allocation (for current directory or dataset) [552].</source>
          <target state="translated">ストレージの割り当てを超えました (現在のディレクトリまたはデータセットの)[552]。</target>
        </trans-unit>
        <trans-unit id="057189a0abbff4fddcb1d8828627f2916b93faf9" translate="yes" xml:space="preserve">
          <source>Except for the &lt;code&gt;write&lt;/code&gt; atom, the following atoms can be added to &lt;code&gt;OpenModeList&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; アトムを除いて、次のアトムを &lt;code&gt;OpenModeList&lt;/code&gt; に追加できます。</target>
        </trans-unit>
        <trans-unit id="ad3a5af3d1d2354def5cd4f1a41fd6d5c99da884" translate="yes" xml:space="preserve">
          <source>Except for the process information, everything in the trace information file is passed on to the handler function when formatting. Parameter &lt;code&gt;TI&lt;/code&gt; is a list of &lt;code&gt;{Key,ValueList}&lt;/code&gt; tuples. The keys &lt;code&gt;flags&lt;/code&gt;, &lt;code&gt;handler&lt;/code&gt;, &lt;code&gt;file&lt;/code&gt;, and &lt;code&gt;node&lt;/code&gt; are used for information written directly by &lt;code&gt;ttb&lt;/code&gt;.</source>
          <target state="translated">プロセス情報を除いて、トレース情報ファイル内のすべてがフォーマット時にハンドラー関数に渡されます。パラメータ &lt;code&gt;TI&lt;/code&gt; は、 &lt;code&gt;{Key,ValueList}&lt;/code&gt; タプルのリストです。キー &lt;code&gt;flags&lt;/code&gt; 、 &lt;code&gt;handler&lt;/code&gt; 、 &lt;code&gt;file&lt;/code&gt; 、および &lt;code&gt;node&lt;/code&gt; によって直接書き込まれた情報のために使用されている &lt;code&gt;ttb&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ba1497eeccb53065b740dfe3efb3c41fa0d6f4e" translate="yes" xml:space="preserve">
          <source>Except where explicitly stated, using EUnit macros will never introduce run-time dependencies on the EUnit library code, regardless of whether your code is compiled with testing enabled or disabled.</source>
          <target state="translated">明示的に指定されている場合を除き、EUnitマクロを使用することで、テストを有効にしてコンパイルしているか無効にしているかに関わらず、EUnitライブラリのコードにランタイム依存性が発生することはありません。</target>
        </trans-unit>
        <trans-unit id="e71fab40c2c841bfad28dfde0c11c8cd0da23d63" translate="yes" xml:space="preserve">
          <source>Exception reason:</source>
          <target state="translated">例外的な理由。</target>
        </trans-unit>
        <trans-unit id="5c5967f5b2ce06f4ccd67ab0f5f71722e821b59b" translate="yes" xml:space="preserve">
          <source>Exceptions are calls to &lt;code&gt;erlang:apply/2,3&lt;/code&gt;; neither of the function handlers are called for such calls. The argument can have the following formats:</source>
          <target state="translated">例外は &lt;code&gt;erlang:apply/2,3&lt;/code&gt; の呼び出しです。このような呼び出しでは、どちらの関数ハンドラーも呼び出されません。引数の形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="050aacdca35417853d02285e213bc3bc1b1aba17" translate="yes" xml:space="preserve">
          <source>Exceptions are run-time errors or generated errors and are of three different classes, with different origins. The &lt;code&gt;&lt;a href=&quot;expressions#try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; expression can distinguish between the different classes, whereas the &lt;code&gt;&lt;a href=&quot;expressions#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; expression cannot. They are described in &lt;code&gt;&lt;a href=&quot;expressions&quot;&gt;Expressions &lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">例外は、実行時エラーまたは生成されたエラーであり、発生源が異なる3つの異なるクラスです。 &lt;code&gt;&lt;a href=&quot;expressions#try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; 一方式は、異なるクラスを区別することができます &lt;code&gt;&lt;a href=&quot;expressions#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 表現ができません。それらは &lt;code&gt;&lt;a href=&quot;expressions&quot;&gt;Expressions &lt;/a&gt;&lt;/code&gt; 説明されています。</target>
        </trans-unit>
        <trans-unit id="56ced67455f13a96efe231a70019f6213cd62354" translate="yes" xml:space="preserve">
          <source>Exceptions are run-time errors or generated errors and are of three different classes, with different origins. The &lt;code&gt;&lt;a href=&quot;expressions#try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; expression can distinguish between the different classes, whereas the &lt;code&gt;&lt;a href=&quot;expressions#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; expression cannot. They are described in &lt;code&gt;&lt;a href=&quot;expressions&quot;&gt;Expressions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">例外は、実行時エラーまたは生成されたエラーであり、発生元が異なる3つのクラスです。 &lt;code&gt;&lt;a href=&quot;expressions#try&quot;&gt;try&lt;/a&gt;&lt;/code&gt; 一方式は、異なるクラスを区別することができます &lt;code&gt;&lt;a href=&quot;expressions#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 表現ができません。これらについては、 &lt;code&gt;&lt;a href=&quot;expressions&quot;&gt;Expressions&lt;/a&gt;&lt;/code&gt; 説明しています。</target>
        </trans-unit>
        <trans-unit id="067869d4a45b070396125d0d90d80f63e7364a08" translate="yes" xml:space="preserve">
          <source>Exchanges &lt;code&gt;hello&lt;/code&gt; messages with the server.</source>
          <target state="translated">サーバーと &lt;code&gt;hello&lt;/code&gt; メッセージを交換します。</target>
        </trans-unit>
        <trans-unit id="9e4666e2512d21b33048b7568f49831b88225aea" translate="yes" xml:space="preserve">
          <source>Exchanges &lt;code&gt;hello&lt;/code&gt; messages with the server. Returns when the server hello has been received or after the specified timeout.</source>
          <target state="translated">サーバーと &lt;code&gt;hello&lt;/code&gt; メッセージを交換します。サーバーhelloが受信されたとき、または指定されたタイムアウト後に返されます。</target>
        </trans-unit>
        <trans-unit id="b6e23dcc4996af99cbf3517491282f2928b38371" translate="yes" xml:space="preserve">
          <source>Exclusive decode followed by &lt;code&gt;decode_part&lt;/code&gt; decodes is attractive if the parts are sent to different servers for decoding, or if you in some cases are not interested in all parts.</source>
          <target state="translated">デコードが後に続く &lt;code&gt;decode_part&lt;/code&gt; デコードは、パーツがデコードのために異なるサーバーに送信される場合、または場合によってはすべてのパーツに関心がない場合に魅力的です。</target>
        </trans-unit>
        <trans-unit id="c3970e0afd3925164ce333770cc51fbb9a52c794" translate="yes" xml:space="preserve">
          <source>Exec requests are executed by the default shell, but shell-requests are not executed.</source>
          <target state="translated">Exec リクエストはデフォルトのシェルで実行されますが、シェルリクエストは実行されません。</target>
        </trans-unit>
        <trans-unit id="b9176f55ce49754a3db5517afccf322ad39b3f18" translate="yes" xml:space="preserve">
          <source>Executable Lines</source>
          <target state="translated">実行可能な行</target>
        </trans-unit>
        <trans-unit id="8ccff560a031352a65ef95fe5f7cd2c0a87ec272" translate="yes" xml:space="preserve">
          <source>Execute an entry from the history buffer:</source>
          <target state="translated">履歴バッファからのエントリを実行します。</target>
        </trans-unit>
        <trans-unit id="f13f711eea30792db77a0fa6bd8ae2c24d36800b" translate="yes" xml:space="preserve">
          <source>Execute permission: group</source>
          <target state="translated">実行権限:グループ</target>
        </trans-unit>
        <trans-unit id="6c00bf858ad16c0fce251b0d9fb9da5a30cfa1c3" translate="yes" xml:space="preserve">
          <source>Execute permission: other</source>
          <target state="translated">実行許可:その他</target>
        </trans-unit>
        <trans-unit id="12940c2edb1f8ce9f4440c14b153196f63886ea3" translate="yes" xml:space="preserve">
          <source>Execute permission: owner</source>
          <target state="translated">許可の実行:所有者</target>
        </trans-unit>
        <trans-unit id="7cfbfb0ab7c27da1e9d10a7a57bdd6e1b1d13c1d" translate="yes" xml:space="preserve">
          <source>Execute the test case step-by-step and/or set execution breakpoints.</source>
          <target state="translated">テストケースを段階的に実行したり、実行のブレークポイントを設定したりします。</target>
        </trans-unit>
        <trans-unit id="2856048c5ac2e34188928138747788ea399dfeda" translate="yes" xml:space="preserve">
          <source>Executes &lt;code&gt;Command&lt;/code&gt; in a command shell of the target OS, captures the standard output of the command, and returns this result as a string.</source>
          <target state="translated">実行 &lt;code&gt;Command&lt;/code&gt; 、ターゲットOSのコマンドシェルでは、コマンドの標準出力をキャプチャし、文字列として、この結果を返します。</target>
        </trans-unit>
        <trans-unit id="4410bc3252e52411c710f6c5e378d946aacf6a5b" translate="yes" xml:space="preserve">
          <source>Executes a SQL SELECT query and associates the result set with the connection. A cursor is positioned before the first row in the result set and the tuple &lt;code&gt;{ok, NrRows}&lt;/code&gt; is returned.</source>
          <target state="translated">SQL SELECTクエリを実行し、結果セットを接続に関連付けます。カーソルは結果セットの最初の行の前に配置され、タプル &lt;code&gt;{ok, NrRows}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="bc039f7a758965a574e87f6b9db173f910615316" translate="yes" xml:space="preserve">
          <source>Executes a SQL query or a batch of SQL queries. If it is a SELECT query the result set is returned, on the format &lt;code&gt;{selected, ColNames, Rows}&lt;/code&gt;. For other query types the tuple &lt;code&gt;{updated, NRows}&lt;/code&gt; is returned, and for batched queries, if the driver supports them, this function can also return a list of result tuples.</source>
          <target state="translated">SQLクエリまたはSQLクエリのバッチを実行します。SELECTクエリの場合、結果セットは &lt;code&gt;{selected, ColNames, Rows}&lt;/code&gt; 形式で返されます。他のクエリタイプの場合、タプル &lt;code&gt;{updated, NRows}&lt;/code&gt; が返されます。バッチクエリの場合、ドライバーがそれらをサポートしている場合、この関数は結果タプルのリストを返すこともできます。</target>
        </trans-unit>
        <trans-unit id="97dd8551a740b8672495ad72222d926f68a833f2" translate="yes" xml:space="preserve">
          <source>Executes a parameterized SQL query. For an example see the &lt;code&gt;&lt;a href=&quot;getting_started#param_query&quot;&gt;&quot;Using the Erlang API&quot;&lt;/a&gt;&lt;/code&gt; in the Erlang ODBC User's Guide.</source>
          <target state="translated">パラメータ化されたSQLクエリを実行します。例については、Erlang ODBCユーザーガイドの &lt;code&gt;&lt;a href=&quot;getting_started#param_query&quot;&gt;&quot;Using the Erlang API&quot;&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="bb0f0c2b4b4b3349a1419a4ae2a544c852392bd0" translate="yes" xml:space="preserve">
          <source>Executes a regular expression matching, and returns &lt;code&gt;match/{match, Captured}&lt;/code&gt; or &lt;code&gt;nomatch&lt;/code&gt;. The regular expression can be specified either as &lt;code&gt;iodata()&lt;/code&gt; in which case it is automatically compiled (as by &lt;code&gt;compile/2&lt;/code&gt;) and executed, or as a precompiled &lt;code&gt;mp()&lt;/code&gt; in which case it is executed against the subject directly.</source>
          <target state="translated">正規表現マッチングを実行し、 &lt;code&gt;match/{match, Captured}&lt;/code&gt; または &lt;code&gt;nomatch&lt;/code&gt; を返します。正規表現は &lt;code&gt;iodata()&lt;/code&gt; として指定できます（この場合は &lt;code&gt;compile/2&lt;/code&gt; によって自動的にコンパイルされて実行されます）、またはプリコンパイルされた &lt;code&gt;mp()&lt;/code&gt; として指定された場合はサブジェクトに対して直接実行されます。</target>
        </trans-unit>
        <trans-unit id="a2aaa21aea670dcf3d60e12ad5fc7c21b85a05ef" translate="yes" xml:space="preserve">
          <source>Executes all configuration functions in the path to the specified group.</source>
          <target state="translated">指定したグループへのパス内の全ての設定機能を実行します。</target>
        </trans-unit>
        <trans-unit id="8581821ec585ac1a3e683f5e0d529885a1bc9bbc" translate="yes" xml:space="preserve">
          <source>Executes all entries in the specified configuration file. Notice that the history of the last trace is always available in file &lt;code&gt;ttb_last_config&lt;/code&gt;.</source>
          <target state="translated">指定された構成ファイルのすべてのエントリを実行します。最後のトレースの履歴は、ファイル &lt;code&gt;ttb_last_config&lt;/code&gt; で常に利用可能であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="34a1cd57176a4b0db96fcb2157e1e26a86ce0f2b" translate="yes" xml:space="preserve">
          <source>Executes all, or all matching, test cases in all subgroups of the group.&quot;</source>
          <target state="translated">グループのすべてのサブグループで、すべての、またはすべての一致するテストケースを実行します。&quot;</target>
        </trans-unit>
        <trans-unit id="55fe9fd565c7bd5c61110be70a042843ce83e689" translate="yes" xml:space="preserve">
          <source>Executes all, or all matching, test cases in this group.</source>
          <target state="translated">このグループ内のすべての、またはすべての一致するテストケースを実行します。</target>
        </trans-unit>
        <trans-unit id="099030a81433c9479293d4bb55f86ed9eb1cd493" translate="yes" xml:space="preserve">
          <source>Executes an action. If the return type is void, &lt;code&gt;ok&lt;/code&gt; is returned instead of &lt;code&gt;{ok,[simple_xml()]}&lt;/code&gt;.</source>
          <target state="translated">アクションを実行します。戻り値の型がvoidの場合、 &lt;code&gt;{ok,[simple_xml()]}&lt;/code&gt; ではなく &lt;code&gt;ok&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="66766aaa201697b0fb4e48e59099bc45c38ef0df" translate="yes" xml:space="preserve">
          <source>Executes selected entries from the specified configuration file. &lt;code&gt;NumList&lt;/code&gt; is a list of integers pointing out the entries to be executed.</source>
          <target state="translated">指定された構成ファイルから選択されたエントリを実行します。 &lt;code&gt;NumList&lt;/code&gt; は、実行されるエントリを指す整数のリストです。</target>
        </trans-unit>
        <trans-unit id="454eb9ba1e45b404982e0b599e8604dcd76a21fa" translate="yes" xml:space="preserve">
          <source>Executes the current code line and stop at the next line.</source>
          <target state="translated">現在のコード行を実行し、次の行で停止します。</target>
        </trans-unit>
        <trans-unit id="a35c6f61298f6a8322e44b79596d70c152cde8c4" translate="yes" xml:space="preserve">
          <source>Executes the current code line, stepping into any (interpreted) function calls.</source>
          <target state="translated">現在のコード行を実行し、任意の (解釈された)関数呼び出しにステップインします。</target>
        </trans-unit>
        <trans-unit id="bc5f62b22b5cb9608c21caec5067c32246f5a6f0" translate="yes" xml:space="preserve">
          <source>Executes the functional object &lt;code&gt;Fun&lt;/code&gt; with argument &lt;code&gt;Args&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Args&lt;/code&gt; で機能オブジェクト &lt;code&gt;Fun&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="1edddb03fbdb778c4a9dcf28f6ce54eb8b359f55" translate="yes" xml:space="preserve">
          <source>Executes the functional object &lt;code&gt;Fun&lt;/code&gt; with arguments &lt;code&gt;Args&lt;/code&gt; as a transaction.</source>
          <target state="translated">機能オブジェクト &lt;code&gt;Fun&lt;/code&gt; を引数 &lt;code&gt;Args&lt;/code&gt; でトランザクションとして実行します。</target>
        </trans-unit>
        <trans-unit id="8f114608d27a52f3f81355b37cfbcd66bc671be8" translate="yes" xml:space="preserve">
          <source>Executes the matching specified in a compiled &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; on a list of terms. Term &lt;code&gt;CompiledMatchSpec&lt;/code&gt; is to be the result of a call to &lt;code&gt;&lt;a href=&quot;#match_spec_compile-1&quot;&gt; match_spec_compile/1&lt;/a&gt;&lt;/code&gt; and is hence the internal representation of the match specification one wants to use.</source>
          <target state="translated">用語のリストに対して、コンパイルされた &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; で指定された一致を実行します。 &lt;code&gt;CompiledMatchSpec&lt;/code&gt; という用語は、 &lt;code&gt;&lt;a href=&quot;#match_spec_compile-1&quot;&gt; match_spec_compile/1&lt;/a&gt;&lt;/code&gt; の呼び出しの結果であるため、使用したい一致仕様の内部表現です。</target>
        </trans-unit>
        <trans-unit id="ab1b2f25a707b333e3118fd343298723469a9bab" translate="yes" xml:space="preserve">
          <source>Executes the matching specified in a compiled &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; on a list of terms. Term &lt;code&gt;CompiledMatchSpec&lt;/code&gt; is to be the result of a call to &lt;code&gt;&lt;a href=&quot;#match_spec_compile-1&quot;&gt;match_spec_compile/1&lt;/a&gt;&lt;/code&gt; and is hence the internal representation of the match specification one wants to use.</source>
          <target state="translated">用語のリストに対して、コンパイル済みの &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; で指定された一致を実行します。Term &lt;code&gt;CompiledMatchSpec&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#match_spec_compile-1&quot;&gt;match_spec_compile/1&lt;/a&gt;&lt;/code&gt; への呼び出しの結果であり、したがって、使用したい一致仕様の内部表現になります。</target>
        </trans-unit>
        <trans-unit id="5a237b8a02c80f8fd8b6f2de1f0a55a142290e64" translate="yes" xml:space="preserve">
          <source>Executes the specified entry or entries from the history list. To list history, use &lt;code&gt;list_history/0&lt;/code&gt;.</source>
          <target state="translated">履歴リストから指定されたエントリを実行します。履歴を一覧表示するには、 &lt;code&gt;list_history/0&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b68c3cb384e0feff36349cec8c45b67d0bba0ccd" translate="yes" xml:space="preserve">
          <source>Executing &lt;code&gt;ct_run&lt;/code&gt; without start flags is equal to the command: &lt;code&gt;ct_run -dir ./&lt;/code&gt;</source>
          <target state="translated">開始フラグなしで &lt;code&gt;ct_run&lt;/code&gt; を実行することは、コマンド &lt;code&gt;ct_run -dir ./&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="4a403828c3d10703e70bdc43a8a75ea7b3cbd30f" translate="yes" xml:space="preserve">
          <source>Executing BIFs, or any other runtime handling</source>
          <target state="translated">BIF の実行、またはその他のランタイム処理</target>
        </trans-unit>
        <trans-unit id="14a8f46932951d050e5742c68b3ab1a318085395" translate="yes" xml:space="preserve">
          <source>Executing code in kernel mode.</source>
          <target state="translated">カーネルモードでコードを実行します。</target>
        </trans-unit>
        <trans-unit id="fdf7cb24af490d954b302cb1dee97b67748a299f" translate="yes" xml:space="preserve">
          <source>Executing code in low priority (nice) user mode. This state is currently only identified on Linux.</source>
          <target state="translated">優先度の低い(ナイスな)ユーザモードでコードを実行しています。この状態は現在のところLinuxでのみ確認されています。</target>
        </trans-unit>
        <trans-unit id="14a9b6a90d62804010bc91938dc23c3cb795e5a2" translate="yes" xml:space="preserve">
          <source>Executing code in user mode.</source>
          <target state="translated">ユーザーモードでコードを実行します。</target>
        </trans-unit>
        <trans-unit id="a408325a213990ef13b5c07d16672e812ebc8358" translate="yes" xml:space="preserve">
          <source>Executing linked-in driver or NIF code</source>
          <target state="translated">連動ドライバまたはNIFコードの実行</target>
        </trans-unit>
        <trans-unit id="7f48d6939c052808c7f286b69486a97e3bdfb416" translate="yes" xml:space="preserve">
          <source>Executing process code</source>
          <target state="translated">プロセスコードの実行</target>
        </trans-unit>
        <trans-unit id="56ca38d0433fc0ad1a4cd65b67697c3812357f15" translate="yes" xml:space="preserve">
          <source>Execution of code in Cover compiled modules is slower and more memory consuming than for regularly compiled modules. As the Cover database contains information about each executable line in each Cover compiled module, performance decreases proportionally to the size and number of the Cover compiled modules.</source>
          <target state="translated">Cover コンパイルされたモジュールのコードの実行は、通常のコンパイルされたモジュールよりも遅く、メモリ消費量も多くなります。Cover データベースには、各 Cover コンパイルされたモジュールの各実行可能行に関する情報が含まれているため、パフォーマンスは Cover コンパイルされたモジュールのサイズと数に比例して低下します。</target>
        </trans-unit>
        <trans-unit id="82a37d9cbdc7bdd3cb72048a51d5df5ac360f924" translate="yes" xml:space="preserve">
          <source>Execution of interpreted code is naturally slower than for regularly compiled modules. Using Debugger also increases the number of processes in the system, as for each debugged process another process (the meta process) is created.</source>
          <target state="translated">解釈されたコードの実行は、通常のコンパイルされたモジュールよりも当然遅くなります。デバッガを使用すると、デバッグされたプロセスごとに別のプロセス (メタプロセス)が作成されるため、システム内のプロセス数も増えます。</target>
        </trans-unit>
        <trans-unit id="33b0a6b5ecbc66872d35925904e04ee3999b6571" translate="yes" xml:space="preserve">
          <source>Execution of interpreted code is slower than compiled code. If much of the execution takes place in interpreted code, it can be worthwhile to compile it, although the compilation itself takes a little while. Also, &lt;code&gt;native&lt;/code&gt; can be supplied instead of &lt;code&gt;compile&lt;/code&gt;. This compiles the script using the native flag and may or may not be worthwhile depending on the escript characteristics.</source>
          <target state="translated">解釈されたコードの実行は、コンパイルされたコードよりも遅くなります。実行の多くがインタープリターコードで行われる場合、コンパイル自体は少し時間がかかりますが、コンパイルする価値があります。また、 &lt;code&gt;compile&lt;/code&gt; の代わりに &lt;code&gt;native&lt;/code&gt; を提供することもできます。これにより、ネイティブフラグを使用してスクリプトがコンパイルされます。escriptの特性によっては、価値がある場合とない場合があります。</target>
        </trans-unit>
        <trans-unit id="4871bfc2d489f7006211641731ebe61530f90091" translate="yes" xml:space="preserve">
          <source>Execution of processes on priority &lt;code&gt;normal&lt;/code&gt; and &lt;code&gt;low&lt;/code&gt; are interleaved. Processes on priority &lt;code&gt;low&lt;/code&gt; are selected for execution less frequently than processes on priority &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">優先度が &lt;code&gt;normal&lt;/code&gt; および &lt;code&gt;low&lt;/code&gt; のプロセスの実行はインターリーブされます。優先度が &lt;code&gt;low&lt;/code&gt; プロセスは、 &lt;code&gt;normal&lt;/code&gt; 優先度のプロセスよりも実行頻度が低く選択されます。</target>
        </trans-unit>
        <trans-unit id="84c3994ca896404946abce07ad67cec1f552c808" translate="yes" xml:space="preserve">
          <source>Execution of test cases is handled as follows:</source>
          <target state="translated">テストケースの実行は以下のように処理されます。</target>
        </trans-unit>
        <trans-unit id="3e63775e93e1530ffe3e4a868c708bf7a1aa5801" translate="yes" xml:space="preserve">
          <source>Execution of user functions after a slave node is started. Functions can be specified as a list of &lt;code&gt;{Module, Function, Arguments}&lt;/code&gt; tuples.</source>
          <target state="translated">スレーブノード起動後のユーザー機能の実行。関数は、 &lt;code&gt;{Module, Function, Arguments}&lt;/code&gt; タプルのリストとして指定できます。</target>
        </trans-unit>
        <trans-unit id="680c39fd3e2cd2bb654d0e505725498ce7d879de" translate="yes" xml:space="preserve">
          <source>Execution properties with a group tuple in &lt;code&gt;all/0&lt;/code&gt;: &lt;code&gt;{group,GroupName,Properties}&lt;/code&gt; can also be specified. These properties override those specified in the group definition (see &lt;code&gt;groups/0&lt;/code&gt; earlier). This way, the same set of tests can be run, but with different properties, without having to make copies of the group definition in question.</source>
          <target state="translated">&lt;code&gt;all/0&lt;/code&gt; ： &lt;code&gt;{group,GroupName,Properties}&lt;/code&gt; グループタプルを持つ実行プロパティも指定できます。これらのプロパティは、グループ定義で指定されたプロパティをオーバーライドします（前述の &lt;code&gt;groups/0&lt;/code&gt; を参照）。このようにして、同じグループのテストを実行できますが、問題のグループ定義のコピーを作成する必要なく、異なるプロパティを使用できます。</target>
        </trans-unit>
        <trans-unit id="fe21c7cb35b2f0fc9b89a945f4bfb0726a108ff0" translate="yes" xml:space="preserve">
          <source>Existing event handlers provided by STDLIB and SASL are still available, but are no longer used by OTP.</source>
          <target state="translated">STDLIB と SASL によって提供される既存のイベントハンドラはまだ利用可能ですが、OTP によって使用されなくなりました。</target>
        </trans-unit>
        <trans-unit id="e87fdcc00c2f01223efb3db284b58f3809d51ee8" translate="yes" xml:space="preserve">
          <source>Exists only if &lt;code&gt;Function&lt;/code&gt; can be used with different clocks. &lt;code&gt;ClockId&lt;/code&gt; corresponds to the clock identifier used when calling &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Function&lt;/code&gt; が異なるクロックで使用できる場合にのみ存在します。 &lt;code&gt;ClockId&lt;/code&gt; は、 &lt;code&gt;Function&lt;/code&gt; を呼び出すときに使用されるクロック識別子に対応します。</target>
        </trans-unit>
        <trans-unit id="f9cf69cbe7afbd4a110543a47415697a57a30784" translate="yes" xml:space="preserve">
          <source>Exit by entering the command &lt;code&gt;halt()&lt;/code&gt;.</source>
          <target state="translated">コマンド &lt;code&gt;halt()&lt;/code&gt; を入力して終了します。</target>
        </trans-unit>
        <trans-unit id="105ec316e78b2e21f4200658aebb690c6bfce1c8" translate="yes" xml:space="preserve">
          <source>Exit status</source>
          <target state="translated">終了ステータス</target>
        </trans-unit>
        <trans-unit id="74f4feca416d0f38ee6c27d43bbe97ebe96761bf" translate="yes" xml:space="preserve">
          <source>Exit status is set before the program ends. Value &lt;code&gt;0&lt;/code&gt; indicates a successful test result, &lt;code&gt;1&lt;/code&gt; indicates one or more failed or auto-skipped test cases, and &lt;code&gt;2&lt;/code&gt; indicates test execution failure.</source>
          <target state="translated">プログラムが終了する前に終了ステータスが設定されます。値 &lt;code&gt;0&lt;/code&gt; は成功したテスト結果を示し、 &lt;code&gt;1&lt;/code&gt; は1つ以上の失敗または自動スキップされたテストケースを示し、 &lt;code&gt;2&lt;/code&gt; はテスト実行の失敗を示します。</target>
        </trans-unit>
        <trans-unit id="3f123e96265c1d6d0f52a428e14efbb1d4c1f296" translate="yes" xml:space="preserve">
          <source>Exits a normal shell and starts a restricted shell. &lt;code&gt;Module&lt;/code&gt; specifies the callback module for the functions &lt;code&gt;local_allowed/3&lt;/code&gt; and &lt;code&gt;non_local_allowed/3&lt;/code&gt;. The function is meant to be called from the shell.</source>
          <target state="translated">通常のシェルを終了し、制限付きシェルを開始します。 &lt;code&gt;Module&lt;/code&gt; は、関数 &lt;code&gt;local_allowed/3&lt;/code&gt; および &lt;code&gt;non_local_allowed/3&lt;/code&gt; のコールバックモジュールを指定します。この関数は、シェルから呼び出されることを意図しています。</target>
        </trans-unit>
        <trans-unit id="cc56d5b35d2040da569465e6723fe200f5898624" translate="yes" xml:space="preserve">
          <source>Exits a restricted shell and starts a normal shell. The function is meant to be called from the shell.</source>
          <target state="translated">制限されたシェルを終了し、通常のシェルを起動します。この関数はシェルから呼び出すことを意図しています。</target>
        </trans-unit>
        <trans-unit id="4f54898118242f94307cbafbf87d29680c0eb752" translate="yes" xml:space="preserve">
          <source>Exits the interactive mode.</source>
          <target state="translated">インタラクティブモードを終了します。</target>
        </trans-unit>
        <trans-unit id="1032820209a3487f302772fc3f6a6f4a914ef5c9" translate="yes" xml:space="preserve">
          <source>Expands a string containing environment variables between percent characters. Anything between two &lt;code&gt;%&lt;/code&gt; is taken for an environment variable, and is replaced by the value. Two consecutive &lt;code&gt;%&lt;/code&gt; are replaced by one &lt;code&gt;%&lt;/code&gt;.</source>
          <target state="translated">パーセント文字の間に環境変数を含む文字列を展開します。2つの &lt;code&gt;%&lt;/code&gt; の間にあるものはすべて環境変数と見なされ、値に置き換えられます。2つの連続する &lt;code&gt;%&lt;/code&gt; は1つの &lt;code&gt;%&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="58cf917bbeeddf7b26d3232197d693d61f9bb206" translate="yes" xml:space="preserve">
          <source>Expands all records in a module to use explicit tuple operations and adds explicit module names to calls to BIFs and imported functions. The returned module has no references to records, attributes, or code.</source>
          <target state="translated">モジュール内のすべてのレコードを展開して明示的なタプル操作を使用し、BIF およびインポートされた関数の呼び出しに明示的なモジュール名を追加します。返されるモジュールには、レコード、属性、コードへの参照はありません。</target>
        </trans-unit>
        <trans-unit id="272413c5242838c5162e04158e2df8033b015b64" translate="yes" xml:space="preserve">
          <source>Expands an abstract list skeleton to its most explicit form. If &lt;code&gt;Node&lt;/code&gt; represents &quot;&lt;code&gt;[E1, ..., En | Tail]&lt;/code&gt;&quot;, the result represents &quot;&lt;code&gt;[E1 | ... [En | Tail1] ... ]&lt;/code&gt;&quot;, where &lt;code&gt;Tail1&lt;/code&gt; is the result of &lt;code&gt;normalize_list(Tail)&lt;/code&gt;. If &lt;code&gt;Node&lt;/code&gt; represents &quot;&lt;code&gt;[E1, ..., En]&lt;/code&gt;&quot;, the result simply represents &quot;&lt;code&gt;[E1 | ... [En | []] ... ]&lt;/code&gt;&quot;. If &lt;code&gt;Node&lt;/code&gt; does not represent a list skeleton, &lt;code&gt;Node&lt;/code&gt; itself is returned.</source>
          <target state="translated">抽象リストのスケルトンを最も明示的な形式に拡張します。場合は &lt;code&gt;Node&lt;/code&gt; 表している&quot; &lt;code&gt;[E1, ..., En | Tail]&lt;/code&gt; &quot;、結果は示して、 &quot; &lt;code&gt;[E1 | ... [En | Tail1] ... ]&lt;/code&gt; &quot;、どこ &lt;code&gt;Tail1&lt;/code&gt; はの結果である &lt;code&gt;normalize_list(Tail)&lt;/code&gt; 。場合は &lt;code&gt;Node&lt;/code&gt; 表している&quot; &lt;code&gt;[E1, ..., En]&lt;/code&gt; &quot; &quot;結果は単に表し &lt;code&gt;[E1 | ... [En | []] ... ]&lt;/code&gt; &quot;。 &lt;code&gt;Node&lt;/code&gt; がリストのスケルトンを表していない場合、 &lt;code&gt;Node&lt;/code&gt; 自体が返されます。</target>
        </trans-unit>
        <trans-unit id="3360fce21e71106b586365c7542d07f8167af167" translate="yes" xml:space="preserve">
          <source>Expands particular properties to corresponding sets of properties (or other terms). For each pair &lt;code&gt;{Property, Expansion}&lt;/code&gt; in &lt;code&gt;Expansions&lt;/code&gt;: if &lt;code&gt;E&lt;/code&gt; is the first entry in &lt;code&gt;ListIn&lt;/code&gt; with the same key as &lt;code&gt;Property&lt;/code&gt;, and &lt;code&gt;E&lt;/code&gt; and &lt;code&gt;Property&lt;/code&gt; have equivalent normal forms, then &lt;code&gt;E&lt;/code&gt; is replaced with the terms in &lt;code&gt;Expansion&lt;/code&gt;, and any following entries with the same key are deleted from &lt;code&gt;ListIn&lt;/code&gt;.</source>
          <target state="translated">特定のプロパティを対応するプロパティのセット（または他の用語）に展開します。各ペアについて &lt;code&gt;{Property, Expansion}&lt;/code&gt; で &lt;code&gt;Expansions&lt;/code&gt; ：場合 &lt;code&gt;E&lt;/code&gt; は最初のエントリである &lt;code&gt;ListIn&lt;/code&gt; 同じキーを持つ &lt;code&gt;Property&lt;/code&gt; 、および &lt;code&gt;E&lt;/code&gt; と &lt;code&gt;Property&lt;/code&gt; 同等の正常な形態を有し、その後 &lt;code&gt;E&lt;/code&gt; は、中の用語に置き換えられる &lt;code&gt;Expansion&lt;/code&gt; 、および任意の次のエントリを持ちます同じキーが &lt;code&gt;ListIn&lt;/code&gt; から削除されます。</target>
        </trans-unit>
        <trans-unit id="9a66951bd36f0c5fdf0af6befea4f43532cc639b" translate="yes" xml:space="preserve">
          <source>Expands records in a module.</source>
          <target state="translated">モジュール内のレコードを展開します。</target>
        </trans-unit>
        <trans-unit id="70681060959ccc70e51752de8b0d3c9b00688d4e" translate="yes" xml:space="preserve">
          <source>Expect a command-line window to pop up with an output looking something like this:</source>
          <target state="translated">コマンドラインウィンドウには、このような出力が表示されることを期待してください。</target>
        </trans-unit>
        <trans-unit id="61366f2558235a4cca37f0664d40eec6f4fd2980" translate="yes" xml:space="preserve">
          <source>Experience with the Unicode support in Erlang has made it clear that understanding Unicode characters and encodings is not as easy as one would expect. The complexity of the field and the implications of the standard require thorough understanding of concepts rarely before thought of.</source>
          <target state="translated">ErlangのUnicodeサポートの経験から、Unicodeの文字とエンコーディングを理解することは思ったほど簡単ではないことが明らかになりました。この分野の複雑さと標準の意味合いは、これまで考えられていなかった概念を徹底的に理解することを必要とします。</target>
        </trans-unit>
        <trans-unit id="0dd77176636a57d058c034e08e3b71ccb8577cfd" translate="yes" xml:space="preserve">
          <source>Experienced Erlang programmers would write as follows:</source>
          <target state="translated">経験豊富なErlangプログラマーは以下のように書きます。</target>
        </trans-unit>
        <trans-unit id="1b22b4b21d1bbc1b132e79fcbe8a5f2b95edc4c6" translate="yes" xml:space="preserve">
          <source>Experimental-Result AVP</source>
          <target state="translated">実験結果 AVP</target>
        </trans-unit>
        <trans-unit id="b3321f75b55990de1ee876791b32d9b4270fe0bc" translate="yes" xml:space="preserve">
          <source>Experimental-Result-Code AVP</source>
          <target state="translated">実験結果コード AVP</target>
        </trans-unit>
        <trans-unit id="d62252c1ac11d9093891729d36abc7fc085ceba6" translate="yes" xml:space="preserve">
          <source>Experiments with Perl suggest that it too has similar optimizations, sometimes leading to anomalous results.</source>
          <target state="translated">Perlを使った実験では、Perlにも同様の最適化が施されており、時には異常な結果を招くことがあることが示唆されています。</target>
        </trans-unit>
        <trans-unit id="844a18267f7570ccd804466117309648571134db" translate="yes" xml:space="preserve">
          <source>Explanation:</source>
          <target state="translated">Explanation:</target>
        </trans-unit>
        <trans-unit id="c2afac37abccd850b732183ce0de424cf11118ee" translate="yes" xml:space="preserve">
          <source>Explicit batches</source>
          <target state="translated">明示的なバッチ</target>
        </trans-unit>
        <trans-unit id="da951366acbfd0fb0aa590f0d7767456d6128af6" translate="yes" xml:space="preserve">
          <source>Explicit batches an procedures described below will result in multiple results being returned from sql_query/[2,3]. while with parameterized queries only one result will be returned from param_query/[2,3].</source>
          <target state="translated">明示的なバッチは、以下に説明するプロシージャでは、sql_query/[2,3]から複数の結果が返されます。パラメータ化されたクエリでは、param_query/[2,3]からは1つの結果しか返されませんが、明示的なバッチは、sql_query/[2,3]から複数の結果が返されます。</target>
        </trans-unit>
        <trans-unit id="0562afa4f29033a4c48be8866998932a982b7102" translate="yes" xml:space="preserve">
          <source>Explicit version</source>
          <target state="translated">明示的なバージョン</target>
        </trans-unit>
        <trans-unit id="a02d741d3e01f379d49f626fe7fa4e84c830b0fa" translate="yes" xml:space="preserve">
          <source>Explicitly by the process itself, through a call to &lt;code&gt;seq_trace:set_token/1,2&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;seq_trace:set_token/1,2&lt;/code&gt; を呼び出して、プロセス自体によって明示的に</target>
        </trans-unit>
        <trans-unit id="3d586803ee5b3b1701927feac52b670c916bcfca" translate="yes" xml:space="preserve">
          <source>Explicitly instruct the manager to handle this USM user. Note that there is an alternate way to do the same thing: Add the usm user to the manager config files (see &lt;code&gt;&lt;a href=&quot;snmp_manager_config_files#usm_user&quot;&gt;usm.conf&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">このUSMユーザーを処理するようマネージャーに明示的に指示します。同じことを行う別の方法があることに注意してください：usmユーザーをmanager構成ファイルに追加します（ &lt;code&gt;&lt;a href=&quot;snmp_manager_config_files#usm_user&quot;&gt;usm.conf&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="f99d3000387a303b1ad0f58390b85c8025436718" translate="yes" xml:space="preserve">
          <source>Explicitly instruct the manager to handle this agent, with &lt;code&gt;UserId&lt;/code&gt; as the responsible user.</source>
          <target state="translated">責任あるユーザーとして &lt;code&gt;UserId&lt;/code&gt; を使用して、このエージェントを処理するようマネージャーに明示的に指示します。</target>
        </trans-unit>
        <trans-unit id="e44446ef6d172511be09e9797321be8dd9ee1e99" translate="yes" xml:space="preserve">
          <source>Explicitly instructs the manager to handle this USM user. Corresponds to making an entry in &lt;code&gt;usm.conf&lt;/code&gt;.</source>
          <target state="translated">このUSMユーザーを処理するようにマネージャーに明示的に指示します。 &lt;code&gt;usm.conf&lt;/code&gt; にエントリを作成することに対応します。</target>
        </trans-unit>
        <trans-unit id="046547ada5d0fdeff8744b21b0c161b60934aa92" translate="yes" xml:space="preserve">
          <source>Explicitly instructs the manager to handle this agent. Corresponds to making an entry in &lt;code&gt;agents.conf&lt;/code&gt;.</source>
          <target state="translated">このエージェントを処理するようにマネージャーに明示的に指示します。 &lt;code&gt;agents.conf&lt;/code&gt; にエントリを作成することに対応します。</target>
        </trans-unit>
        <trans-unit id="c838fc3b102436d86eb4fb0ac7bc4df5779541b4" translate="yes" xml:space="preserve">
          <source>Explicitly set the actual protocol version in the megaco_receive_handle.</source>
          <target state="translated">megaco_receive_handle に実際のプロトコルバージョンを明示的に設定します。</target>
        </trans-unit>
        <trans-unit id="c3d40bd480471a0edfc44e68a8f4d92762b3fb14" translate="yes" xml:space="preserve">
          <source>Explicitly. This is necessary only when a generic instruction does not have any corresponding specific instruction.</source>
          <target state="translated">明示的に。これは、汎用命令に対応する特定の命令がない場合にのみ必要です。</target>
        </trans-unit>
        <trans-unit id="368cb593ed8144f112260be7db1b6c21746fd2b7" translate="yes" xml:space="preserve">
          <source>Export cipher suites are not supported as the U.S. lifted its export restrictions in early 2000.</source>
          <target state="translated">米国が2000年初頭に輸出制限を解除したため、輸出暗号スイートはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="95990f81db58d8b8d896055c20b9ee29047d96e1" translate="yes" xml:space="preserve">
          <source>Export table. One entry for every exported function.</source>
          <target state="translated">エクスポートテーブル。エクスポートされた関数ごとに1つのエントリ。</target>
        </trans-unit>
        <trans-unit id="9be573704e1f54cb6bd4162ef130dbeefe8c80fc" translate="yes" xml:space="preserve">
          <source>Export the messages in the &lt;code&gt;MessagePackage&lt;/code&gt; (default is &lt;code&gt;time_test&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;MessagePackage&lt;/code&gt; でメッセージをエクスポートします（デフォルトは &lt;code&gt;time_test&lt;/code&gt; です）。</target>
        </trans-unit>
        <trans-unit id="aa18b9e4e76ab54d64606045aa4ee7f2f5a79d57" translate="yes" xml:space="preserve">
          <source>Exported Functions. All exported functions of analyzed modules and all used exported functions of library modules.</source>
          <target state="translated">エクスポートされた関数。解析されたモジュールのすべてのエクスポートされた関数と、ライブラリモジュールのすべての使用されたエクスポートされた関数。</target>
        </trans-unit>
        <trans-unit id="6dacbd5b09f2902da4cc8122e61cd3e469deac80" translate="yes" xml:space="preserve">
          <source>Exported functions. Specifies which of the functions, defined within the module, that are visible from outside the module.</source>
          <target state="translated">エクスポートされた関数。モジュール内で定義されている関数のうち、モジュール外から見える関数を指定します。</target>
        </trans-unit>
        <trans-unit id="0e16537914a0163e01ecd7e0945bc56c50eb3849" translate="yes" xml:space="preserve">
          <source>Exports</source>
          <target state="translated">Exports</target>
        </trans-unit>
        <trans-unit id="02caa1dd3e593e45252685d5d3c9f6436c944320" translate="yes" xml:space="preserve">
          <source>Exports &quot;simple-form&quot; XML content, using the specified callback-module.</source>
          <target state="translated">指定されたコールバックモジュールを使用して、&quot;simple-form&quot; XMLコンテンツをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="1660ee0c8536b4382a0b38edd1d7df44c43597d7" translate="yes" xml:space="preserve">
          <source>Exports a normal XML element directly, without further context.</source>
          <target state="translated">通常のXML要素を直接エクスポートします。</target>
        </trans-unit>
        <trans-unit id="d9a878ddd2bf9342d35539a556b12164fd300769" translate="yes" xml:space="preserve">
          <source>Exports a simple XML element directly, without further context.</source>
          <target state="translated">シンプルなXML要素を、それ以上のコンテキストなしで直接エクスポートします。</target>
        </trans-unit>
        <trans-unit id="ecc51082c5cea4b6d58955c29a11415a7a81b582" translate="yes" xml:space="preserve">
          <source>Exports normal XML content directly, without further context.</source>
          <target state="translated">通常の XML コンテンツを、それ以上のコンテキストを持たずに直接エクスポートします。</target>
        </trans-unit>
        <trans-unit id="8d1384f4e40ab996f10f281328007536bcbf5091" translate="yes" xml:space="preserve">
          <source>Exports normal, well-formed XML content, using the specified callback-module.</source>
          <target state="translated">指定されたコールバックモジュールを使用して、正常な XML コンテンツをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="22191cbcaa5de40a48cc520af737587909c49284" translate="yes" xml:space="preserve">
          <source>Exports simple XML content directly, without further context.</source>
          <target state="translated">シンプルなXMLコンテンツを、それ以上のコンテキストなしで直接エクスポートします。</target>
        </trans-unit>
        <trans-unit id="8133b6c3cc9eb768f8210de697b9f15ba0c94181" translate="yes" xml:space="preserve">
          <source>Exports the current coverage data for &lt;code&gt;Module&lt;/code&gt; to the file &lt;code&gt;ExportFile&lt;/code&gt;. It is recommended to name the &lt;code&gt;ExportFile&lt;/code&gt; with the extension &lt;code&gt;.coverdata&lt;/code&gt;, since other filenames can not be read by the web based interface to cover.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; の現在のカバレッジデータをファイル &lt;code&gt;ExportFile&lt;/code&gt; にエクスポートします。他のファイル名はWebベースのインターフェースで読み取れないため、 &lt;code&gt;ExportFile&lt;/code&gt; には拡張子 &lt;code&gt;.coverdata&lt;/code&gt; を付けることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1e62d1a4f45f69ecb6bff42b6c384a79e584d3a1" translate="yes" xml:space="preserve">
          <source>Exports the current coverage data for &lt;code&gt;Module&lt;/code&gt; to the file &lt;code&gt;ExportFile&lt;/code&gt;. It is recommended to name the &lt;code&gt;ExportFile&lt;/code&gt; with the extension &lt;code&gt;.coverdata&lt;/code&gt;, since other filenames cannot be read by the web based interface to cover.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; 現在のカバレッジデータをファイル &lt;code&gt;ExportFile&lt;/code&gt; にエクスポートします。名前を付けることをお勧めします &lt;code&gt;ExportFile&lt;/code&gt; を拡張して &lt;code&gt;.coverdata&lt;/code&gt; 他のファイル名は、カバーへのWebベースのインターフェイスで読み取ることができないため、。</target>
        </trans-unit>
        <trans-unit id="3ae61f2e92c3d90036fb83e9a1dc1c593ac0f549" translate="yes" xml:space="preserve">
          <source>Exports the following Erlang Web Server API interaction data, if possible:</source>
          <target state="translated">可能であれば、以下のErlang Web Server APIのインタラクションデータをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="35119743538b0a1138a1f17ebd68a12a0813f12e" translate="yes" xml:space="preserve">
          <source>Exports the following Erlang Web Server API interaction data:</source>
          <target state="translated">以下のErlang Web Server APIのインタラクションデータをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="d52f99749dd7bb710052730ab080e796489eb412" translate="yes" xml:space="preserve">
          <source>Exports the following Erlang web server API interaction data:</source>
          <target state="translated">以下のErlangウェブサーバAPIインタラクションデータをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="f24c92e4537680603c0273dabf8cded3fa6b1644" translate="yes" xml:space="preserve">
          <source>ExprMatchVariable ::= MatchVariable (bound in the MatchHead) | &lt;code&gt;'$_'&lt;/code&gt; | &lt;code&gt;'$$'&lt;/code&gt;</source>
          <target state="translated">ExprMatchVariable :: = MatchVariable（MatchHeadにバインド）| &lt;code&gt;'$_'&lt;/code&gt; | &lt;code&gt;'$$'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7f5eadb984da9ea8a315c53a713a326ef7f45498" translate="yes" xml:space="preserve">
          <source>Expression ::= &lt;code&gt;(&lt;/code&gt; Expression &lt;code&gt;)&lt;/code&gt;</source>
          <target state="translated">式:: = &lt;code&gt;(&lt;/code&gt; 式 &lt;code&gt;)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="addbb8e52b6d52535f3fc36c84596510e5968114" translate="yes" xml:space="preserve">
          <source>Expression ::= &lt;code&gt;(&lt;/code&gt; LineOp&lt;code&gt;)&lt;/code&gt; Expression</source>
          <target state="translated">式:: = &lt;code&gt;(&lt;/code&gt; LineOp &lt;code&gt;)&lt;/code&gt; 式</target>
        </trans-unit>
        <trans-unit id="6854eed889bdcb715b3709fe91c0cab8d178eebe" translate="yes" xml:space="preserve">
          <source>Expression ::= &lt;code&gt;(&lt;/code&gt; Type &lt;code&gt;)&lt;/code&gt; Expression</source>
          <target state="translated">式:: = &lt;code&gt;(&lt;/code&gt; タイプ &lt;code&gt;)&lt;/code&gt; 式</target>
        </trans-unit>
        <trans-unit id="9138649cd667c41cb747ddeed1bb4960f24911f4" translate="yes" xml:space="preserve">
          <source>Expression ::= &lt;code&gt;(&lt;/code&gt; XLineOp&lt;code&gt;)&lt;/code&gt; Expression</source>
          <target state="translated">式:: = &lt;code&gt;(&lt;/code&gt; XLineOp &lt;code&gt;)&lt;/code&gt; 式</target>
        </trans-unit>
        <trans-unit id="98c145886602ec6b6738774db3f3f5e1e78d2a8f" translate="yes" xml:space="preserve">
          <source>Expression ::= ClosureOp Expression</source>
          <target state="translated">Expression ::=ClosureOp Expression</target>
        </trans-unit>
        <trans-unit id="2fcaf78097d07e98f7885fb0f41d04479fa9edeb" translate="yes" xml:space="preserve">
          <source>Expression ::= Constants</source>
          <target state="translated">式 ::=定数</target>
        </trans-unit>
        <trans-unit id="3958c541b51093e3e5731e5a772219a3f6c7d46f" translate="yes" xml:space="preserve">
          <source>Expression ::= CountOp Expression</source>
          <target state="translated">式 ::=CountOp 式</target>
        </trans-unit>
        <trans-unit id="4f2ed1d429ac041e1da45ffb8e30358b49dfdb4c" translate="yes" xml:space="preserve">
          <source>Expression ::= Expression BinaryGraphOp Expression</source>
          <target state="translated">式 ::=式 BinaryGraphOp 式</target>
        </trans-unit>
        <trans-unit id="3e1f9f375aeddbcf09cbaa758ceaa7f9f3d0b627" translate="yes" xml:space="preserve">
          <source>Expression ::= Expression BinarySetOp Expression</source>
          <target state="translated">式 ::=式 BinarySetOp 式</target>
        </trans-unit>
        <trans-unit id="48081deaf20f580895caa16c82705df8520c69f5" translate="yes" xml:space="preserve">
          <source>Expression ::= Expression RestrOp Expression</source>
          <target state="translated">Expression ::=Expression RestrOp Expression</target>
        </trans-unit>
        <trans-unit id="3fb910532dc57f421d9bb1a6f16ad06188f34675" translate="yes" xml:space="preserve">
          <source>Expression ::= UnaryGraphOp Expression</source>
          <target state="translated">式 ::=UnaryGraphOp 式.</target>
        </trans-unit>
        <trans-unit id="c7f8e3e42259fae86cbb04e08dc5882e5e69d4f1" translate="yes" xml:space="preserve">
          <source>Expression ::= UnarySetOp Expression</source>
          <target state="translated">式 ::=UnarySetOp 式</target>
        </trans-unit>
        <trans-unit id="7186eedc6b9b139b5c92a1e1986721fabf723c19" translate="yes" xml:space="preserve">
          <source>Expression ::= Variable</source>
          <target state="translated">式 ::=変数</target>
        </trans-unit>
        <trans-unit id="514d16679bae990d5b3a90c9251b4df733d58974" translate="yes" xml:space="preserve">
          <source>Expressions in Patterns</source>
          <target state="translated">パターンの表現</target>
        </trans-unit>
        <trans-unit id="410ed2c6c88a60abc59543fb3bce3a7992e3bed0" translate="yes" xml:space="preserve">
          <source>Expressions that construct atoms, integer, floats, lists, tuples, records, binaries, and maps</source>
          <target state="translated">アトム,整数,フロート,リスト,タプル,レコード,バイナリ,マップを構築する式</target>
        </trans-unit>
        <trans-unit id="0bfece3f6f297352b30c69be5119d56dbb996b72" translate="yes" xml:space="preserve">
          <source>Expressions that update a map</source>
          <target state="translated">マップを更新する式</target>
        </trans-unit>
        <trans-unit id="f6d5b459bed57db121c8e780c1fb44610af3e9ec" translate="yes" xml:space="preserve">
          <source>Extend an existing configuration:</source>
          <target state="translated">既存の構成を拡張します。</target>
        </trans-unit>
        <trans-unit id="e03bf9ed7d7c461a0fd672724f98c8abbef6cad6" translate="yes" xml:space="preserve">
          <source>Extended API</source>
          <target state="translated">拡張API</target>
        </trans-unit>
        <trans-unit id="cfdd1285dd4e167898adf793eccf586f0f9bb5f6" translate="yes" xml:space="preserve">
          <source>Extending the Mnesia Table</source>
          <target state="translated">ムネシアテーブルの拡張</target>
        </trans-unit>
        <trans-unit id="551f67028c9496c2a9e43aecb97e31fc3321bcce" translate="yes" xml:space="preserve">
          <source>Extending the command line gives the following:</source>
          <target state="translated">コマンドラインを拡張すると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="dae2d0b450546f227bb86a8895fd22f264be8d2d" translate="yes" xml:space="preserve">
          <source>Extending the search mechanism</source>
          <target state="translated">検索機構の拡張</target>
        </trans-unit>
        <trans-unit id="e84d35946af53d80b6d807681846783d5ecae8f2" translate="yes" xml:space="preserve">
          <source>Extending, restructuring, and maintaining test suites with test case dependencies is difficult.</source>
          <target state="translated">テストケースに依存したテストスイートの拡張、再構築、維持は困難です。</target>
        </trans-unit>
        <trans-unit id="908bd73823d2a762ae1ac9b6a1dc240b1abdfd70" translate="yes" xml:space="preserve">
          <source>Extends &lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;timetrap time-out&lt;/a&gt;&lt;/code&gt; values.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;write_test_chapter#timetraps&quot;&gt;timetrap time-out&lt;/a&gt;&lt;/code&gt; 値を拡張します。</target>
        </trans-unit>
        <trans-unit id="376e7c5dbd73b2fd53fedf4bb27c6d8817a0e200" translate="yes" xml:space="preserve">
          <source>Extends the meaning of (, also 0 or 1 quantifier, also quantifier minimizer</source>
          <target state="translated">の意味を拡張します(また、0または1の定量化器、また定量化器ミニマム化器</target>
        </trans-unit>
        <trans-unit id="b285c62fbf4bef733e32c37f4eb5392d09953972" translate="yes" xml:space="preserve">
          <source>Extensibility for SEQUENCE and SET</source>
          <target state="translated">SEQUENCEとSETの拡張性</target>
        </trans-unit>
        <trans-unit id="1a935fd1e8e951bdb4c9324544889f10e7735fcc" translate="yes" xml:space="preserve">
          <source>Extensible CHOICE</source>
          <target state="translated">拡張可能な選択</target>
        </trans-unit>
        <trans-unit id="46921c8938be90a60a5c9f38175addf111add586" translate="yes" xml:space="preserve">
          <source>Extensions of Existing Functions</source>
          <target state="translated">既存機能の拡張</target>
        </trans-unit>
        <trans-unit id="882fc7968647fa2e905cb46fe2c42823925e7841" translate="yes" xml:space="preserve">
          <source>Extensions to include in the certificate.</source>
          <target state="translated">証明書に含める拡張機能。</target>
        </trans-unit>
        <trans-unit id="5d699fdd6e198d27b96ab42e8923343d94b9caac" translate="yes" xml:space="preserve">
          <source>External Calls (*).</source>
          <target state="translated">外部通話(*)に対応しています。</target>
        </trans-unit>
        <trans-unit id="76f32a5120631b73ab85cf2a34ee2880957bb1fb" translate="yes" xml:space="preserve">
          <source>External Configuration Data and Logging</source>
          <target state="translated">外部設定データとロギング</target>
        </trans-unit>
        <trans-unit id="a8108f93e2436ab415be7a15fb1200506ef33347" translate="yes" xml:space="preserve">
          <source>External calls within some module.</source>
          <target state="translated">いくつかのモジュール内での外部呼び出し。</target>
        </trans-unit>
        <trans-unit id="e69d9092c5e963be777f31d1f4e2210d63e7b838" translate="yes" xml:space="preserve">
          <source>External events are of 3 types: &lt;code&gt;{call,From}&lt;/code&gt;, &lt;code&gt;cast&lt;/code&gt;, or &lt;code&gt;info&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;Calls&lt;/a&gt;&lt;/code&gt; (synchronous) and &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;casts&lt;/a&gt;&lt;/code&gt; originate from the corresponding API functions. For calls, the event contains whom to reply to. Type &lt;code&gt;info&lt;/code&gt; originates from regular process messages sent to the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">外部イベントには3つのタイプがあります： &lt;code&gt;{call,From}&lt;/code&gt; 、 &lt;code&gt;cast&lt;/code&gt; 、または &lt;code&gt;info&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;Calls&lt;/a&gt;&lt;/code&gt; （同期）および &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;casts&lt;/a&gt;&lt;/code&gt; は、対応するAPI関数から発生します。通話の場合、イベントには誰に返信するかが含まれます。タイプ &lt;code&gt;info&lt;/code&gt; は、 &lt;code&gt;gen_statem&lt;/code&gt; に送信される通常のプロセスメッセージから発生します。</target>
        </trans-unit>
        <trans-unit id="82f09b3f7ef9941bc4d69e25e05d373371d2fefb" translate="yes" xml:space="preserve">
          <source>External events are of 3 types: &lt;code&gt;{call,From}&lt;/code&gt;, &lt;code&gt;cast&lt;/code&gt;, or &lt;code&gt;info&lt;/code&gt;. Type &lt;code&gt;call&lt;/code&gt; originates from the API functions &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt;. For calls, the event contains whom to reply to. Type &lt;code&gt;cast&lt;/code&gt; originates from the API function &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;cast/2&lt;/a&gt;&lt;/code&gt;. Type &lt;code&gt;info&lt;/code&gt; originates from regular process messages sent to the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">外部イベントには、 &lt;code&gt;{call,From}&lt;/code&gt; 、 &lt;code&gt;cast&lt;/code&gt; 、または &lt;code&gt;info&lt;/code&gt; の3つのタイプがあります。型 &lt;code&gt;call&lt;/code&gt; は、API関数 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; から発生します。通話の場合、イベントには誰に返信するかが含まれます。型 &lt;code&gt;cast&lt;/code&gt; は、API関数 &lt;code&gt;&lt;a href=&quot;#cast-2&quot;&gt;cast/2&lt;/a&gt;&lt;/code&gt; に由来します。タイプ &lt;code&gt;info&lt;/code&gt; は、 &lt;code&gt;gen_statem&lt;/code&gt; に送信される通常のプロセスメッセージから発生します。</target>
        </trans-unit>
        <trans-unit id="e4588d4f580caf2e1d0aa5345191898eb4a30cbc" translate="yes" xml:space="preserve">
          <source>External generic BEAM instructions are known to both the compiler and the runtime system. They remain stable between releases. A new major release may add more external generic instructions, but must not change the semantics for a previously defined instruction.</source>
          <target state="translated">外部の汎用BEAM命令は、コンパイラとランタイムシステムの両方で知られています。これらの命令はリリース間でも安定しています。新しいメジャーリリースでは、より多くの外部汎用命令を追加することができますが、以前に定義された命令のセマンティクスを変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="c0a67c0ff06e68b75c5859a47a5e836301668f6e" translate="yes" xml:space="preserve">
          <source>External generic BEAM instructions. They are the instructions that are known to both the compiler and the runtime system. Generic instructions are stable between releases. New generic instructions with high numbers than previous instructions can be added in major releases. The OTP 20 release has 159 external generic instructions.</source>
          <target state="translated">外部汎用BEAM命令。これは、コンパイラとランタイムシステムの両方が知っている命令です。ジェネリック命令はリリース間で安定しています。メジャーリリースでは、以前の命令よりも数が多い新しいジェネリック命令を追加することができます。OTP 20のリリースには159個の外部汎用命令があります。</target>
        </trans-unit>
        <trans-unit id="22307bf79de9067a9ce26d7af6a39faa6a7d4f8a" translate="yes" xml:space="preserve">
          <source>External unordered sets are represented as sorted lists. So, creating the image of a set under a relation R can traverse all elements of R (to that comes the sorting of results, the image). In &lt;code&gt;&lt;a href=&quot;#image-2&quot;&gt;image/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;BinRel&lt;/code&gt; is traversed once for each element of &lt;code&gt;SetOfSets&lt;/code&gt;, which can take too long. The following efficient function can be used instead under the assumption that the image of each element of &lt;code&gt;SetOfSets&lt;/code&gt; under &lt;code&gt;BinRel&lt;/code&gt; is non-empty:</source>
          <target state="translated">外部の順序付けられていないセットは、ソートされたリストとして表されます。したがって、リレーションRの下でセットのイメージを作成すると、Rのすべての要素をトラバースできます（結果の並べ替え、イメージ）。 &lt;code&gt;&lt;a href=&quot;#image-2&quot;&gt;image/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;BinRel&lt;/code&gt; は各要素に対して一度トラバースさ &lt;code&gt;SetOfSets&lt;/code&gt; 時間がかかりすぎることができ、。代わりに、 &lt;code&gt;SetOfSets&lt;/code&gt; 下の &lt;code&gt;BinRel&lt;/code&gt; 各要素の画像が空ではないという前提の下で、次の効率的な関数を使用できます。</target>
        </trans-unit>
        <trans-unit id="702f6004e5b0649a561e34b9923038a5fe581813" translate="yes" xml:space="preserve">
          <source>Externally Used Functions. Functions of all modules - including local functions - that have been used in some external call.</source>
          <target state="translated">外部で使用される関数。ローカル関数を含むすべてのモジュールの関数-何らかの外部呼び出しで使用された関数。</target>
        </trans-unit>
        <trans-unit id="9dc41b56ffb870aa8667296ee85faf8526c78e2d" translate="yes" xml:space="preserve">
          <source>Extra arguments to append to callbacks to the callback module in question. These are appended to any extra arguments configured on the callback itself. Multiple options append to the argument list.</source>
          <target state="translated">コールバックモジュールのコールバックに追加する引数を指定します。これらの引数は、コールバック自身で設定された追加引数に追加されます。複数のオプションを引数リストに追加します。</target>
        </trans-unit>
        <trans-unit id="24857f5df323016703cb6fdbfde355cc9374cd07" translate="yes" xml:space="preserve">
          <source>Extra arguments to the Erlang emulator. Avoid &lt;code&gt;-noinput&lt;/code&gt;, &lt;code&gt;-noshell&lt;/code&gt;, and &lt;code&gt;-sname&lt;/code&gt;/&lt;code&gt;-name&lt;/code&gt;. Default is no extra arguments. Remember that the services cookie file is not necessarily the same as the interactive users. The service runs as the local administrator. Specify all arguments together in one string, use double quotes (&quot;) to specify an argument string containing spaces, and use quoted quotes (\&quot;) to specify a quote within the argument string if necessary.</source>
          <target state="translated">Erlangエミュレーターへの追加の引数。 &lt;code&gt;-noinput&lt;/code&gt; 、 &lt;code&gt;-noshell&lt;/code&gt; 、および &lt;code&gt;-sname&lt;/code&gt; / &lt;code&gt;-name&lt;/code&gt; は避けてください。デフォルトでは、追加の引数はありません。サービスのCookieファイルは、必ずしもインタラクティブユーザーと同じではないことに注意してください。サービスはローカル管理者として実行されます。すべての引数を1つの文字列で一緒に指定し、二重引用符（ &quot;）を使用してスペースを含む引数文字列を指定し、引用符（\&quot;）を使用して必要に応じて引数文字列内の引用符を指定します。</target>
        </trans-unit>
        <trans-unit id="1a5ed847a392a0a62263f179dd2fc24c2f3db284" translate="yes" xml:space="preserve">
          <source>Extra field of &lt;code&gt;Elen&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;Elen&lt;/code&gt; バイトの追加フィールド。</target>
        </trans-unit>
        <trans-unit id="21fdf9672534e5b3289575836da1260c05091d37" translate="yes" xml:space="preserve">
          <source>Extract from &lt;code&gt;fact.erl&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;fact.erl&lt;/code&gt; から抽出：</target>
        </trans-unit>
        <trans-unit id="76499b81f508c818fc8ede2f6857319a78f6b78c" translate="yes" xml:space="preserve">
          <source>Extract the html archive in the installation directory.</source>
          <target state="translated">インストールディレクトリ内のhtmlアーカイブを展開します。</target>
        </trans-unit>
        <trans-unit id="b1255a61e7dfddc61222eeed560c46780e362532" translate="yes" xml:space="preserve">
          <source>Extracts a specified element from an Erlang tuple.</source>
          <target state="translated">Erlangタプルから指定された要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="2de52555eab2d85bd549c7c335845c6f805b8dc7" translate="yes" xml:space="preserve">
          <source>Extracts all files from a tar archive.</source>
          <target state="translated">tar アーカイブからすべてのファイルを抽出します。</target>
        </trans-unit>
        <trans-unit id="1e36ee460b66be04ca04bbcdacbb3b4fea7ec8e5" translate="yes" xml:space="preserve">
          <source>Extracts comments from a string containing Erlang source code. Except for reading directly from a string, the behaviour is the same as for &lt;code&gt;&lt;a href=&quot;#file-1&quot;&gt;file/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangソースコードを含む文字列からコメントを抽出します。文字列から直接読み取ることを除いて、動作は &lt;code&gt;&lt;a href=&quot;#file-1&quot;&gt;file/1&lt;/a&gt;&lt;/code&gt; の場合と同じです。</target>
        </trans-unit>
        <trans-unit id="e76ccbc0a9e27f91b1b488b109f8599dfdb46906" translate="yes" xml:space="preserve">
          <source>Extracts comments from an Erlang source code file. Returns a list of entries representing &lt;strong&gt;multi-line&lt;/strong&gt; comments, listed in order of increasing line-numbers. For each entry, &lt;code&gt;Text&lt;/code&gt; is a list of strings representing the consecutive comment lines in top-down order; the strings contain &lt;strong&gt;all&lt;/strong&gt; characters following (but not including) the first comment-introducing &lt;code&gt;%&lt;/code&gt; character on the line, up to (but not including) the line-terminating newline.</source>
          <target state="translated">Erlangソースコードファイルからコメントを抽出します。&lt;strong&gt;複数行&lt;/strong&gt;コメントを表すエントリのリストを、行番号の昇順で返します。各エントリの &lt;code&gt;Text&lt;/code&gt; は、連続したコメント行を上から下に表す文字列のリストです。文字列には、行の最初のコメント導入 &lt;code&gt;%&lt;/code&gt; 文字に続く（含まない）&lt;strong&gt;すべて&lt;/strong&gt;の文字が含まれます。</target>
        </trans-unit>
        <trans-unit id="56c5582329f83a654a52e6745e87c2ac598a8711" translate="yes" xml:space="preserve">
          <source>Extracts distribution points from the certificates extensions.</source>
          <target state="translated">証明書の拡張子から配布ポイントを抽出します。</target>
        </trans-unit>
        <trans-unit id="c27cd1b3613ae91223b4fc3f3ff7f52631b2bd7e" translate="yes" xml:space="preserve">
          <source>Extracts files from a tar archive.</source>
          <target state="translated">tar アーカイブからファイルを抽出します。</target>
        </trans-unit>
        <trans-unit id="fb1b3810288e1f952296f446cd12717a4d4c6389" translate="yes" xml:space="preserve">
          <source>Extracts individual comment lines from a source code string. Returns a list of comment lines found in the text, listed in order of &lt;strong&gt;decreasing&lt;/strong&gt; line-numbers, i.e., the last comment line in the input is first in the resulting list. &lt;code&gt;Text&lt;/code&gt; is a single string, containing all characters following (but not including) the first comment-introducing &lt;code&gt;%&lt;/code&gt; character on the line, up to (but not including) the line-terminating newline. For details on &lt;code&gt;Line&lt;/code&gt;, &lt;code&gt;Column&lt;/code&gt; and &lt;code&gt;Indent&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#file-1&quot;&gt;file/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ソースコード文字列から個々のコメント行を抽出します。テキストで見つかったコメント行のリストを、行番号の&lt;strong&gt;降順で&lt;/strong&gt;返します。つまり、入力の最後のコメント行が結果のリストの最初になります。 &lt;code&gt;Text&lt;/code&gt; は単一の文字列で、行の最初のコメント導入 &lt;code&gt;%&lt;/code&gt; 文字に続く（含まない）すべての文字を含み、行末の改行まで（含まない）です。 &lt;code&gt;Line&lt;/code&gt; 、 &lt;code&gt;Column&lt;/code&gt; 、 &lt;code&gt;Indent&lt;/code&gt; 詳細については、 &lt;code&gt;&lt;a href=&quot;#file-1&quot;&gt;file/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="655f37a384e7ab195c12d1a0e8c241b01afdcd35" translate="yes" xml:space="preserve">
          <source>Extracts one or all files from an open archive.</source>
          <target state="translated">開いているアーカイブから1つまたはすべてのファイルを抽出します。</target>
        </trans-unit>
        <trans-unit id="d955a7dca57b26304e4145b2d6808fe84fd62226" translate="yes" xml:space="preserve">
          <source>Extracts the first element from a list.</source>
          <target state="translated">リストから最初の要素を抽出します。</target>
        </trans-unit>
        <trans-unit id="5ab632a1ddfea5f5f6247df3a3cb6f843b3d2739" translate="yes" xml:space="preserve">
          <source>Extracts the initial call of a process that was started using one of the spawn or start functions in this module. &lt;code&gt;Process&lt;/code&gt; can either be a pid, an integer tuple (from which a pid can be created), or the process information of a process &lt;code&gt;Pid&lt;/code&gt; fetched through an &lt;code&gt;erlang:process_info(Pid)&lt;/code&gt; function call.</source>
          <target state="translated">このモジュールのspawn関数またはstart関数のいずれかを使用して開始されたプロセスの最初の呼び出しを抽出します。 &lt;code&gt;Process&lt;/code&gt; は、pid、整数タプル（そこからpidを作成できます）、または &lt;code&gt;erlang:process_info(Pid)&lt;/code&gt; 関数呼び出しを通じてフェッチされたプロセス &lt;code&gt;Pid&lt;/code&gt; のプロセス情報のいずれかです。</target>
        </trans-unit>
        <trans-unit id="0baa839a87a55a95e088d0af02451cdc7f90de47" translate="yes" xml:space="preserve">
          <source>Extracts the nodes from the parsed XML tree according to XPath. xmlObj is a record with fields type and value, where type is boolean | number | string</source>
          <target state="translated">XPathに従って解析されたXMLツリーからノードを抽出します.xmlObjはフィールドtypeとvalueを持つレコードで,typeはboolean | number | stringです.</target>
        </trans-unit>
        <trans-unit id="86e3eb4e92bc7affbd29d377357bc195216cee8c" translate="yes" xml:space="preserve">
          <source>Extracts the nodes from the xml tree according to XPath.</source>
          <target state="translated">XPathに従ってxmlツリーからノードを抽出します。</target>
        </trans-unit>
        <trans-unit id="5799c76f5fc9581a7297dbbe3dacd7de3f584359" translate="yes" xml:space="preserve">
          <source>Extracts the part of binary &lt;code&gt;Subject&lt;/code&gt; described by &lt;code&gt;PosLen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PosLen&lt;/code&gt; によって記述されたバイナリ &lt;code&gt;Subject&lt;/code&gt; の部分を抽出します。</target>
        </trans-unit>
        <trans-unit id="dee314395029509dffa3665108322556c55c7005" translate="yes" xml:space="preserve">
          <source>Extracts the part of the binary described by &lt;code&gt;PosLen&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;PosLen&lt;/code&gt; によって記述されたバイナリの一部を抽出します。</target>
        </trans-unit>
        <trans-unit id="5a4d0ecc3f40b06c8cc3ade0e107ab17bda0568f" translate="yes" xml:space="preserve">
          <source>Extracts the tail from a list.</source>
          <target state="translated">リストから末尾を抽出します。</target>
        </trans-unit>
        <trans-unit id="1f7e43e4399fb814514df1c0648f488ad523e8e2" translate="yes" xml:space="preserve">
          <source>Extracts the tar file &lt;code&gt;mysystem.tar.gz&lt;/code&gt; into the target directory &lt;code&gt;/usr/local/erl-target&lt;/code&gt;.</source>
          <target state="translated">tarファイル &lt;code&gt;mysystem.tar.gz&lt;/code&gt; をターゲットディレクトリ &lt;code&gt;/usr/local/erl-target&lt;/code&gt; に抽出します。</target>
        </trans-unit>
        <trans-unit id="2b302481602929aa88594ecc1d4d80277d0fef09" translate="yes" xml:space="preserve">
          <source>Extraneous certificates in chain</source>
          <target state="translated">チェーンの外部証明書</target>
        </trans-unit>
        <trans-unit id="17958dd1df3f442d0bf6de03deb5a8db6f06e65a" translate="yes" xml:space="preserve">
          <source>Extremely fast real-time data searches.</source>
          <target state="translated">極めて高速なリアルタイムデータ検索。</target>
        </trans-unit>
        <trans-unit id="f16c1001bcfd4875b664e58e36606c52c10b04af" translate="yes" xml:space="preserve">
          <source>FAIL(Fail)</source>
          <target state="translated">FAIL(Fail)</target>
        </trans-unit>
        <trans-unit id="7787ae36042d9794e38bd318cfd51df43ade016f" translate="yes" xml:space="preserve">
          <source>FLOAT (precision)</source>
          <target state="translated">フロート(精度</target>
        </trans-unit>
        <trans-unit id="cccffd6f431246c8672fe367c4387e016ca363d5" translate="yes" xml:space="preserve">
          <source>FTP client module (based on the &lt;code&gt;ftp&lt;/code&gt; application).</source>
          <target state="translated">FTPクライアントモジュール（ &lt;code&gt;ftp&lt;/code&gt; アプリケーションに基づく）。</target>
        </trans-unit>
        <trans-unit id="e93194f544a2aa989e9a7dedd8f4ebf23ad50271" translate="yes" xml:space="preserve">
          <source>FTP client module (based on the FTP application).</source>
          <target state="translated">FTPクライアントモジュール(FTPアプリケーションをベースにしたもの)。</target>
        </trans-unit>
        <trans-unit id="49eef6c2a80675ed6b65e3a2e947698dcd57c2e8" translate="yes" xml:space="preserve">
          <source>FTP clients are considered to be rather temporary. Thus, they are only started and stopped during runtime and cannot be started at application startup. The FTP client API is designed to allow some functions to return intermediate results. This implies that only the process that started the FTP client can access it with preserved sane semantics. If the process that started the FTP session dies, the FTP client process terminates.</source>
          <target state="translated">FTPクライアントは、むしろ一時的なものと考えられています。したがって、それらは実行時にのみ起動・停止され、アプリケーションの起動時に起動することはできません。FTPクライアントAPIは、いくつかの関数が中間結果を返すことができるように設計されています。これは、FTPクライアントを開始したプロセスだけが、保存された正気のセマンティクスでそれにアクセスできることを意味します。FTPセッションを開始したプロセスが終了すると、FTPクライアントプロセスは終了します。</target>
        </trans-unit>
        <trans-unit id="e09096abf3a825f1915427ea0978eb99bbf1d70b" translate="yes" xml:space="preserve">
          <source>FTP commands requiring a data connection cannot be successfully issued with this function.</source>
          <target state="translated">データ接続を必要とするFTPコマンドは、この機能では正常に発行できません。</target>
        </trans-unit>
        <trans-unit id="64e1e50a3956ea778cbd570cd0588159a0418a9b" translate="yes" xml:space="preserve">
          <source>Failed to get current process</source>
          <target state="translated">現在のプロセスの取得に失敗しました。</target>
        </trans-unit>
        <trans-unit id="a337ed06b924b4213c3c839d5ba7078c91160fd2" translate="yes" xml:space="preserve">
          <source>Failed to send net tick over the connection.</source>
          <target state="translated">ネットティックの送信に失敗しました。</target>
        </trans-unit>
        <trans-unit id="f86557eca299464becfc8aa34f0c6d3b35119ce2" translate="yes" xml:space="preserve">
          <source>Failed to set a monitor on a process</source>
          <target state="translated">プロセスへのモニタ設定に失敗しました</target>
        </trans-unit>
        <trans-unit id="77091a62aab2060ffe78a81fbae2e79ec826cff0" translate="yes" xml:space="preserve">
          <source>Failed-AVP AVP</source>
          <target state="translated">失敗したAVP AVP</target>
        </trans-unit>
        <trans-unit id="f974abb530126dfc013636c690395e99df1fb5ce" translate="yes" xml:space="preserve">
          <source>Failover and Failback Procedures</source>
          <target state="translated">フェイルオーバーとフェイルバックの手順</target>
        </trans-unit>
        <trans-unit id="48556fbfca36a85342bd3d2e21587a62a8196977" translate="yes" xml:space="preserve">
          <source>Fails by raising an error exception with an error reason of:</source>
          <target state="translated">のエラー理由でエラー例外を発生させて失敗します。</target>
        </trans-unit>
        <trans-unit id="e302a1938e77f83802f4ce4513e659bb2dd90e36" translate="yes" xml:space="preserve">
          <source>Fails with an exception if &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;SubDir&lt;/code&gt; has the wrong type.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; または &lt;code&gt;SubDir&lt;/code&gt; のタイプが正しくない場合、例外が発生して失敗します。</target>
        </trans-unit>
        <trans-unit id="bbfd5debbf2e23b39610483b4d4e87230b8082c4" translate="yes" xml:space="preserve">
          <source>Fails with reason &lt;code&gt;empty&lt;/code&gt; if &lt;code&gt;Q1&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;Q1&lt;/code&gt; が空の場合、理由が &lt;code&gt;empty&lt;/code&gt; 失敗します。</target>
        </trans-unit>
        <trans-unit id="7303367360950544963d4dcad809bafef4cce750" translate="yes" xml:space="preserve">
          <source>Fails with reason &lt;code&gt;empty&lt;/code&gt; if &lt;code&gt;Q&lt;/code&gt; is empty.</source>
          <target state="translated">&lt;code&gt;Q&lt;/code&gt; が空の場合、 &lt;code&gt;empty&lt;/code&gt; 理由で失敗します。</target>
        </trans-unit>
        <trans-unit id="e62b5bba29ee3acff62d3674bfa3e7dc7f31f9da" translate="yes" xml:space="preserve">
          <source>Failure to crash or exit when things go wrong:</source>
          <target state="translated">物事がうまくいかない時のクラッシュや退場の失敗。</target>
        </trans-unit>
        <trans-unit id="1607e68ad706a0a791e6e1d8d001f14ec655a724" translate="yes" xml:space="preserve">
          <source>Failure to set up a connection to the node identified by &lt;code&gt;Node&lt;/code&gt; or the connection to that node was lost during the spawn operation. In the case the connection was lost, a process may or may not have been created.</source>
          <target state="translated">ノードによって識別される &lt;code&gt;Node&lt;/code&gt; への接続のセットアップの失敗、またはそのノードへの接続は、スポーン操作中に失われました。接続が失われた場合、プロセスが作成されている場合と作成されていない場合があります。</target>
        </trans-unit>
        <trans-unit id="05bd383494044ce1abf4223e78c2b896367a3872" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt; error_handler:undefined_function/3&lt;/code&gt; is called if the applied function is not exported. The error handler can be redefined (see &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;). If &lt;code&gt;error_handler&lt;/code&gt; is undefined, or if the user has redefined the default &lt;code&gt;error_handler&lt;/code&gt; so the replacement module is undefined, an error with reason &lt;code&gt;undef&lt;/code&gt; is generated.</source>
          <target state="translated">失敗：適用された関数がエクスポートされない場合、 &lt;code&gt; error_handler:undefined_function/3&lt;/code&gt; が呼び出されます。エラーハンドラは再定義できます（ &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt; を参照）。 &lt;code&gt;error_handler&lt;/code&gt; が未定義の場合、またはユーザーがデフォルトの &lt;code&gt;error_handler&lt;/code&gt; を再定義して、置換モジュールが未定義の場合、理由 &lt;code&gt;undef&lt;/code&gt; のエラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="838f983e143a183d4eccfec825edc11e3ecb0776" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Binary&lt;/code&gt; contains a bad representation of a float.</source>
          <target state="translated">失敗： &lt;code&gt;Binary&lt;/code&gt; にfloatの不正な表現が含まれている場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c0895353c7a2ff06778a1193333513af4b5f8ef" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Binary&lt;/code&gt; contains a bad representation of an integer.</source>
          <target state="translated">失敗： &lt;code&gt;Binary&lt;/code&gt; に整数の不正な表現が含まれている場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fb2ecb406b75378837950207b77862b175a51709" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;List&lt;/code&gt; is the empty list &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">失敗： &lt;code&gt;List&lt;/code&gt; が空のリスト &lt;code&gt;[]&lt;/code&gt; の場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5fce060e72df96f370bf1af3657a2845adb392d" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Localtime&lt;/code&gt; denotes an invalid date and time.</source>
          <target state="translated">失敗： &lt;code&gt;badarg&lt;/code&gt; 無効な日付と時刻を示している場合は &lt;code&gt;Localtime&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1c61e75de2774f2ae96a873b7a336685f1f3bbb1" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Pid&lt;/code&gt; is not a local process.</source>
          <target state="translated">失敗： &lt;code&gt;Pid&lt;/code&gt; がローカルプロセスでない場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87a8727d434414896baf192cf2beb197aee1b528" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Port&lt;/code&gt; is not a local port identifier, or an atom.</source>
          <target state="translated">失敗： &lt;code&gt;Port&lt;/code&gt; がローカルポート識別子またはアトムでない場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c68a90d7c956995be93c41aa1c10781a4b9f39c3" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Port&lt;/code&gt; is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by &lt;code&gt;Port&lt;/code&gt;, the exit signal from the port is guaranteed to be delivered before this &lt;code&gt;badarg&lt;/code&gt; exception occurs.</source>
          <target state="translated">失敗： &lt;code&gt;Port&lt;/code&gt; が開いているポートの識別子または開いているポートの登録名でない場合は &lt;code&gt;badarg&lt;/code&gt; 。呼び出しプロセスが以前に &lt;code&gt;Port&lt;/code&gt; で識別された閉じたポートにリンクされていた場合、この &lt;code&gt;badarg&lt;/code&gt; 例外が発生する前に、ポートからの終了信号が確実に配信されます。</target>
        </trans-unit>
        <trans-unit id="de1ead34bb8ff2b5a5a7948ab0e7ea21e4174fe0" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;PosLen&lt;/code&gt; in any way references outside the binary.</source>
          <target state="translated">失敗： &lt;code&gt;badarg&lt;/code&gt; が何らかの方法でバイナリの外部を参照している場合は &lt;code&gt;PosLen&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0540ed92cc918dfe5f4e8c28b3105018029c739" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;RegName&lt;/code&gt; is not a registered name.</source>
          <target state="translated">失敗： &lt;code&gt;badarg&lt;/code&gt; が登録名でない場合は &lt;code&gt;RegName&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe7b44d5dcc866abe30eb67bf3af1c1360618493" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;String&lt;/code&gt; contains a bad representation of a float.</source>
          <target state="translated">失敗： &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;badarg&lt;/code&gt; な表現が含まれている場合はbadarg。</target>
        </trans-unit>
        <trans-unit id="089aaaaa8ea023713f5c70397e832162902543cb" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;String&lt;/code&gt; contains a bad representation of a port identifier.</source>
          <target state="translated">失敗： &lt;code&gt;String&lt;/code&gt; にポート識別子の不正な表現が含まれている場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8090be3c26db3c86345e466fdca683ee89a8233f" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;String&lt;/code&gt; contains a bad representation of a process identifier.</source>
          <target state="translated">失敗： &lt;code&gt;String&lt;/code&gt; にプロセスIDの &lt;code&gt;badarg&lt;/code&gt; な表現が含まれている場合はbadarg。</target>
        </trans-unit>
        <trans-unit id="d9aacae05feb0a1ff4ce0fdc1f08fcca988f90d6" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;String&lt;/code&gt; contains a bad representation of a reference.</source>
          <target state="translated">失敗： &lt;code&gt;String&lt;/code&gt; に参照の不正な表現が含まれている場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a9ef355ef31ce1db3f66b399d0f6960b9e0f780f" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;String&lt;/code&gt; contains a bad representation of an integer.</source>
          <target state="translated">失敗： &lt;code&gt;String&lt;/code&gt; に整数の不正な表現が含まれている場合、 &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb0505d22101a46d9b1d54d1c91f0834df3bcbe4" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Tracee&lt;/code&gt; does not refer to a process (dead or alive) on the same node as the caller of &lt;code&gt;erlang:trace_delivered(Tracee)&lt;/code&gt; resides on.</source>
          <target state="translated">失敗： &lt;code&gt;badarg&lt;/code&gt; が &lt;code&gt;erlang:trace_delivered(Tracee)&lt;/code&gt; の呼び出し元が常駐しているノードと同じノード上のプロセス（デッドまたはアライブ）を参照していない場合の &lt;code&gt;Tracee&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1098e64869f436927709dd2ed0dbab08019fe364" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;Universaltime&lt;/code&gt; denotes an invalid date and time.</source>
          <target state="translated">失敗： &lt;code&gt;Universaltime&lt;/code&gt; が無効な日付と時刻を示す場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7c912dc44d7ba65423ed00143de810a75a90cae0" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if &lt;code&gt;safe&lt;/code&gt; is specified and unsafe data is decoded.</source>
          <target state="translated">失敗： &lt;code&gt;safe&lt;/code&gt; が指定され、安全でないデータがデコードされた場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b317dfdbe7d838ae9ec457962a563bf41ac27ef" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if the arguments do not satisfy the requirements specified here.</source>
          <target state="translated">失敗：引数がここで指定された要件を満たさない場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="770f60b3feed2d25c64b492b9e4fe8f2fdc4357e" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if the atom does not exist.</source>
          <target state="translated">失敗：アトムが存在しない場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0fd30f9c1ba7b7eae53cce0e87b57d1742b7a77" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if the local node is not alive or the option list is malformed.</source>
          <target state="translated">失敗：ローカルノードが &lt;code&gt;badarg&lt;/code&gt; でないか、オプションリストの形式が正しくない場合はbadarg。</target>
        </trans-unit>
        <trans-unit id="450d1e71a72c071bdaf82394784c12257b0d55c6" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">失敗：ローカルノードが &lt;code&gt;badarg&lt;/code&gt; ない場合はbadarg。</target>
        </trans-unit>
        <trans-unit id="df957d462e64a1a37c23ec4931c7e00791112a01" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if the specified arguments are not supported. For example, &lt;code&gt;cpu_timestamp&lt;/code&gt; is not supported on all platforms.</source>
          <target state="translated">失敗：指定された引数がサポートされていない場合は &lt;code&gt;badarg&lt;/code&gt; 。たとえば、 &lt;code&gt;cpu_timestamp&lt;/code&gt; はすべてのプラットフォームでサポートされているわけではありません。</target>
        </trans-unit>
        <trans-unit id="d979419a05acdf971da35d1b994aa4c0bd693c89" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if there already is an old version of &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">失敗： &lt;code&gt;Module&lt;/code&gt; の古いバージョンがすでにある場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1f0447ae5d142122e4d1d78ea60485bd56098381" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if there does not already exist an atom whose text representation is &lt;code&gt;String&lt;/code&gt;.</source>
          <target state="translated">失敗：テキスト表現が &lt;code&gt;String&lt;/code&gt; であるアトムがまだ存在しない場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="441ce77452ae922bbcb33f6103e1a26e58c2c1ca" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;badarg&lt;/code&gt; if there is no old code for &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">失敗： &lt;code&gt;Module&lt;/code&gt; の古いコードがない場合は &lt;code&gt;badarg&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3ad356c787a460ef5fe6597776b0c6bcdb7c07b1" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;error_handler:undefined_function/3&lt;/code&gt; is called if the applied function is not exported. The error handler can be redefined (see &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;). If &lt;code&gt;error_handler&lt;/code&gt; is undefined, or if the user has redefined the default &lt;code&gt;error_handler&lt;/code&gt; so the replacement module is undefined, an error with reason &lt;code&gt;undef&lt;/code&gt; is generated.</source>
          <target state="translated">失敗：適用された関数がエクスポートされない場合、 &lt;code&gt;error_handler:undefined_function/3&lt;/code&gt; が呼び出されます。エラーハンドラは再定義できます（ &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt; を参照）。 &lt;code&gt;error_handler&lt;/code&gt; が未定義の場合、またはユーザーがデフォルトの &lt;code&gt;error_handler&lt;/code&gt; を再定義して置換モジュールを未定義にした場合、理由 &lt;code&gt;undef&lt;/code&gt; のエラーが生成されます。</target>
        </trans-unit>
        <trans-unit id="b86e360a41346fc97050fd061ffe0b427b733e46" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;function_clause&lt;/code&gt; if the local node is not alive.</source>
          <target state="translated">失敗：ローカルノードがアクティブでない場合は &lt;code&gt;function_clause&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c55dd03271169d21f0a864cb148e9cd3d53a4aef" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;nocatch&lt;/code&gt; if not evaluated within a catch.</source>
          <target state="translated">失敗： &lt;code&gt;nocatch&lt;/code&gt; 内で評価されない場合はnocatch。</target>
        </trans-unit>
        <trans-unit id="735e9b3e3bba0cabb519251b9c2dd008d4c5f5a9" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;notsup&lt;/code&gt; if an &lt;code&gt;erts_alloc(3)&lt;/code&gt; allocator has been disabled.</source>
          <target state="translated">失敗： &lt;code&gt;notsup&lt;/code&gt; &lt;code&gt;erts_alloc(3)&lt;/code&gt; アロケータが無効にされている場合はnotsup。</target>
        </trans-unit>
        <trans-unit id="12970f9c7fbf5c14bb65820c019426184ea24d49" translate="yes" xml:space="preserve">
          <source>Failure: &lt;code&gt;{badarg, Info}}&lt;/code&gt; if &lt;code&gt;Pid&lt;/code&gt; is not an existing local pid.</source>
          <target state="translated">失敗： &lt;code&gt;{badarg, Info}}&lt;/code&gt; &lt;code&gt;Pid&lt;/code&gt; が既存のローカルpidでない場合。</target>
        </trans-unit>
        <trans-unit id="8b29a9a5c785430d46dfd7d91d2f027c8599626e" translate="yes" xml:space="preserve">
          <source>Failure: If a script cannot be found, the function fails with an appropriate error reason.</source>
          <target state="translated">失敗。スクリプトが見つからない場合、関数は適切なエラー理由で失敗します。</target>
        </trans-unit>
        <trans-unit id="539682bc04de316047e0c399e44365ec02883bf5" translate="yes" xml:space="preserve">
          <source>Failure: It is an error if &lt;code&gt;MonitorRef&lt;/code&gt; refers to a monitoring started by another process. Not all such cases are cheap to check. If checking is cheap, the call fails with &lt;code&gt;badarg&lt;/code&gt;, for example if &lt;code&gt;MonitorRef&lt;/code&gt; is a remote reference.</source>
          <target state="translated">失敗： &lt;code&gt;MonitorRef&lt;/code&gt; が別のプロセスによって開始された監視を参照している場合はエラーです。このようなケースのすべてが安価であるとは限りません。チェックが安価な場合、たとえば &lt;code&gt;MonitorRef&lt;/code&gt; がリモート参照の場合、呼び出しは &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="a351ea42a7c08c75760cf4eb0f75aea4dfcfd460" translate="yes" xml:space="preserve">
          <source>Failure: if the port cannot be opened, the exit reason is &lt;code&gt;badarg&lt;/code&gt;, &lt;code&gt;system_limit&lt;/code&gt;, or the POSIX error code that most closely describes the error, or &lt;code&gt;einval&lt;/code&gt; if no POSIX code is appropriate:</source>
          <target state="translated">失敗：ポートを開くことができない場合は、終了理由がある &lt;code&gt;badarg&lt;/code&gt; 、 &lt;code&gt;system_limit&lt;/code&gt; 、または最も密接にエラーを説明POSIXエラーコード、または &lt;code&gt;einval&lt;/code&gt; 全くPOSIXコードが適切でない場合：</target>
        </trans-unit>
        <trans-unit id="13928441cadbafa94796d982f5eebcc7f19f43dc" translate="yes" xml:space="preserve">
          <source>Failures:</source>
          <target state="translated">Failures:</target>
        </trans-unit>
        <trans-unit id="b4a100ebc4c1820c605bd96d9dd279ff888640e2" translate="yes" xml:space="preserve">
          <source>Fallback</source>
          <target state="translated">Fallback</target>
        </trans-unit>
        <trans-unit id="827eff11b49bf55437574b601a10ff45b4ad4006" translate="yes" xml:space="preserve">
          <source>False events can occur. That is, calls to &lt;code&gt;ready_input&lt;/code&gt; or &lt;code&gt;ready_output&lt;/code&gt; although no real events are signaled. In reality, it is rare (and OS-dependant), but a robust driver must nevertheless be able to handle such cases.</source>
          <target state="translated">誤ったイベントが発生する可能性があります。つまり、実際のイベントは通知されませんが、 &lt;code&gt;ready_input&lt;/code&gt; または &lt;code&gt;ready_output&lt;/code&gt; の呼び出し。実際にはめったにありません（そしてOSに依存します）が、それでも堅牢なドライバーはそのようなケースを処理できなければなりません。</target>
        </trans-unit>
        <trans-unit id="daa330c60371ee04d9f830af0c60804749aaf37f" translate="yes" xml:space="preserve">
          <source>Fast real-time key/value lookup</source>
          <target state="translated">高速リアルタイムキー/値ルックアップ</target>
        </trans-unit>
        <trans-unit id="f27447e885962d8e87201bc9c386dfce87684f91" translate="yes" xml:space="preserve">
          <source>Fast real-time operations</source>
          <target state="translated">高速リアルタイム操作</target>
        </trans-unit>
        <trans-unit id="e71cf0ced263da3bb91198344e4f14003d54cce7" translate="yes" xml:space="preserve">
          <source>Fatal communication error and reconnection attempts are always printed, even if logging has been suppressed for the connection type in question. However, operations such as sending and receiving data are performed silently.</source>
          <target state="translated">致命的な通信エラーや再接続の試みは、問題の接続タイプでロギングが抑制されていても、常に出力されます。ただし、データの送受信などの操作は無音で行われます。</target>
        </trans-unit>
        <trans-unit id="d71befc2691cc5c0a427a5a5793c6c1bc118d74d" translate="yes" xml:space="preserve">
          <source>Fault Resilience</source>
          <target state="translated">フォールトレジリエンス</target>
        </trans-unit>
        <trans-unit id="c06ebb7f2aaf5855c9aa5c6b48767553f3f68e00" translate="yes" xml:space="preserve">
          <source>Fault tolerance</source>
          <target state="translated">フォールト・トレランス</target>
        </trans-unit>
        <trans-unit id="fc338f87a058158eb824b53705961801516a9460" translate="yes" xml:space="preserve">
          <source>Features</source>
          <target state="translated">Features</target>
        </trans-unit>
        <trans-unit id="e328294bfd7e14656d3352b02e669c5db8bcede3" translate="yes" xml:space="preserve">
          <source>Features that are disabled include (but are not limited to) the following:</source>
          <target state="translated">無効になる機能には、以下のようなものがあります(ただし、これらに限定されません)。</target>
        </trans-unit>
        <trans-unit id="ddd988908e71dee969b21f00ec95d7e6279d57be" translate="yes" xml:space="preserve">
          <source>Fedora 16 is known to contain UTRACE, for most other Linux distributions a custom build kernel will be required. Check Fedora's SystemTap documentation for additional required packages (e.g. Kernel Debug Symbols)</source>
          <target state="translated">Fedora 16 は UTRACE を含んでいることが知られていますが、他のほとんどの Linux ディストリビューションではカスタムビルドカーネルが必要です。追加の必要なパッケージ(カーネルデバッグシンボルなど)については、Fedora の SystemTap のドキュメントをチェックしてください。</target>
        </trans-unit>
        <trans-unit id="ac1e43987e33c2c73a2e8cf09e4b1960e31cbed3" translate="yes" xml:space="preserve">
          <source>Feed digit map collector with events and return the result</source>
          <target state="translated">デジットマップコレクタにイベントを供給し、結果を返す</target>
        </trans-unit>
        <trans-unit id="da9de34c74533fb176868fea819d65cc5f43c3f9" translate="yes" xml:space="preserve">
          <source>Fetch a file with the Erlang SFTP client:</source>
          <target state="translated">Erlang SFTPクライアントを使ってファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="aac01a03bbd346596aa6b86624e6db4a65dc1ec7" translate="yes" xml:space="preserve">
          <source>Fetch all data in the table employee</source>
          <target state="translated">テーブルの従業員のすべてのデータを取得</target>
        </trans-unit>
        <trans-unit id="2cb82a9eed1ea63d1489c4f488187b59bd00647b" translate="yes" xml:space="preserve">
          <source>Fetch data from the Cover database on the remote nodes and stored on the main node.</source>
          <target state="translated">リモートノード上のカバーデータベースからデータを取得し、メインノードに格納します。</target>
        </trans-unit>
        <trans-unit id="caf42d872afb89dda4a08a7bdabc01d1aa1c1922" translate="yes" xml:space="preserve">
          <source>Fetch default cipher suite list for a TLS/DTLS version. Change default to all to get all possible cipher suites.</source>
          <target state="translated">TLS/DTLS バージョンのデフォルトの暗号スイートのリストを取得します。デフォルトを all に変更して、すべての可能な暗号スイートを取得します。</target>
        </trans-unit>
        <trans-unit id="fccae3437be3f4f73def3bdb3e65541780aed908" translate="yes" xml:space="preserve">
          <source>Fetch default cipher suite list for an TLS/DTLS version. Change default to all to get all possible cipher suites.</source>
          <target state="translated">TLS/DTLS バージョンのデフォルトの暗号スイートのリストを取得します。デフォルトを all に変更して、すべての可能な暗号スイートを取得します。</target>
        </trans-unit>
        <trans-unit id="9315f871fd952912e116beff03bac310c73d2116" translate="yes" xml:space="preserve">
          <source>Fetch next line from the history buffer</source>
          <target state="translated">履歴バッファから次の行を取得</target>
        </trans-unit>
        <trans-unit id="e41b6e9ccfe6823dd8105ed9572880bb6a6f9b3c" translate="yes" xml:space="preserve">
          <source>Fetch previous line from the history buffer</source>
          <target state="translated">履歴バッファから前の行を取得</target>
        </trans-unit>
        <trans-unit id="75c1a9f02f5cbfb91f1918f73db959ccc0eb5e9e" translate="yes" xml:space="preserve">
          <source>Fetch the fields &lt;code&gt;FIRSTNAME&lt;/code&gt; and &lt;code&gt;NR&lt;/code&gt; for all female employees</source>
          <target state="translated">すべての女性従業員のフィールド &lt;code&gt;FIRSTNAME&lt;/code&gt; および &lt;code&gt;NR&lt;/code&gt; をフェッチします</target>
        </trans-unit>
        <trans-unit id="2e575236e557bbd037fba4ee4c0c99916345307a" translate="yes" xml:space="preserve">
          <source>Fetch the fields &lt;code&gt;FIRSTNAME&lt;/code&gt; and &lt;code&gt;NR&lt;/code&gt; for all female employees and sort them on the field &lt;code&gt;FIRSTNAME&lt;/code&gt;.</source>
          <target state="translated">フィールドフェッチ &lt;code&gt;FIRSTNAME&lt;/code&gt; と &lt;code&gt;NR&lt;/code&gt; をすべての女性従業員のために、フィールド上にそれらを並べ替える &lt;code&gt;FIRSTNAME&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f96bb86cc755f42ee5b17c63da3d96b67920ce0d" translate="yes" xml:space="preserve">
          <source>Fetches a file over FTP.</source>
          <target state="translated">FTPでファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="2e6ab2cb54f4245d58b27caaa6e98de4b9207f2c" translate="yes" xml:space="preserve">
          <source>Fetches a file using the low-level loader. &lt;code&gt;Filename&lt;/code&gt; is either an absolute filename or only the name of the file, for example, &lt;code&gt;&quot;lists.beam&quot;&lt;/code&gt;. If an internal path is set to the loader, this path is used to find the file. &lt;code&gt;FullName&lt;/code&gt; is the complete name of the fetched file. &lt;code&gt;Bin&lt;/code&gt; is the contents of the file as a binary.</source>
          <target state="translated">低レベルローダーを使用してファイルをフェッチします。 &lt;code&gt;Filename&lt;/code&gt; は、絶対ファイル名またはファイル名のみのいずれかです（例： &lt;code&gt;&quot;lists.beam&quot;&lt;/code&gt; )。内部パスがローダーに設定されている場合、このパスを使用してファイルが検索されます。 &lt;code&gt;FullName&lt;/code&gt; は、フェッチされたファイルの完全な名前です。 &lt;code&gt;Bin&lt;/code&gt; は、バイナリとしてのファイルの内容です。</target>
        </trans-unit>
        <trans-unit id="0d22550ab548c26f6ee2ea248382f629aa957419" translate="yes" xml:space="preserve">
          <source>Fetches information about the HTTP server. When called with only &lt;code&gt;Address&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt;, all properties are fetched. When called with a list of specific properties, they are fetched. The available properties are the same as the start options of the server.</source>
          <target state="translated">HTTPサーバーに関する情報をフェッチします。 &lt;code&gt;Address&lt;/code&gt; と &lt;code&gt;Port&lt;/code&gt; のみで呼び出されると、すべてのプロパティがフェッチされます。特定のプロパティのリストを指定して呼び出されると、それらがフェッチされます。使用可能なプロパティは、サーバーの起動オプションと同じです。</target>
        </trans-unit>
        <trans-unit id="9ac5237f1c5642668986a4437070f24b8205596d" translate="yes" xml:space="preserve">
          <source>Fetches information about the HTTP server. When called with only the pid, all properties are fetched. When called with a list of specific properties, they are fetched. The available properties are the same as the start options of the server.</source>
          <target state="translated">HTTP サーバに関する情報を取得します。pid のみを指定して呼び出されると、すべてのプロパティが取得されます。特定のプロパティのリストを指定して呼び出すと、それらのプロパティが取得されます。利用可能なプロパティは、サーバの開始オプションと同じです。</target>
        </trans-unit>
        <trans-unit id="ae323219de63b51515bafa21c8b7c1ab4ddb3695" translate="yes" xml:space="preserve">
          <source>Fetches the corresponding public key from a private key stored in an Engine. The key must be of the type indicated by the Type parameter.</source>
          <target state="translated">エンジンに保存されている秘密鍵から対応する公開鍵を取得します。鍵は、Type パラメータで指定されたタイプである必要があります。</target>
        </trans-unit>
        <trans-unit id="71f993bb41b3e63e6c35261ddb44f81039c80cdc" translate="yes" xml:space="preserve">
          <source>Fetches the private key of the host.</source>
          <target state="translated">ホストの秘密鍵を取得します。</target>
        </trans-unit>
        <trans-unit id="3ec7885b0c1597d5985a3ed2b3fda853f40d8d02" translate="yes" xml:space="preserve">
          <source>Fetches the users &lt;strong&gt;public key&lt;/strong&gt; matching the &lt;code&gt;Algorithm&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Algorithm&lt;/code&gt; 一致するユーザーの&lt;strong&gt;公開鍵を&lt;/strong&gt;取得します。</target>
        </trans-unit>
        <trans-unit id="2bee13557c7c74ba8204199e37e131aad2f40b8b" translate="yes" xml:space="preserve">
          <source>Fetches the users &lt;strong&gt;public key&lt;/strong&gt; matching the &lt;code&gt;Algorithm&lt;/code&gt;. Some key callback modules may return &lt;code&gt;{ssh2_pubkey, PubKeyBlob :: binary()}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Algorithm&lt;/code&gt; 一致するユーザーの&lt;strong&gt;公開鍵を&lt;/strong&gt;取得します。一部のキーコールバックモジュールは &lt;code&gt;{ssh2_pubkey, PubKeyBlob :: binary()}&lt;/code&gt; 返す場合があります。</target>
        </trans-unit>
        <trans-unit id="48bf3bbfe2cde9b89a0197b2bfecef97b15ae5d4" translate="yes" xml:space="preserve">
          <source>Fetching Data</source>
          <target state="translated">データの取得</target>
        </trans-unit>
        <trans-unit id="449e1d2da9aba2320f6e3a26f2fdf363d8f9762d" translate="yes" xml:space="preserve">
          <source>Field &lt;code&gt;error&lt;/code&gt; can provide more detailed diagnostics.</source>
          <target state="translated">フィールド &lt;code&gt;error&lt;/code&gt; は、より詳細な診断を提供できます。</target>
        </trans-unit>
        <trans-unit id="22e8b3cde508b4ee35c4f0034eb670b99d060969" translate="yes" xml:space="preserve">
          <source>Field &lt;code&gt;error&lt;/code&gt; can provide more detailed diagnostics. The &lt;code&gt;error&lt;/code&gt; field value can be converted into a string using &lt;code&gt;&lt;a href=&quot;#error_string-1&quot;&gt;error_string/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">フィールド &lt;code&gt;error&lt;/code&gt; は、より詳細な診断を提供できます。 &lt;code&gt;error&lt;/code&gt; フィールド値を使用して文字列に変換することができる &lt;code&gt;&lt;a href=&quot;#error_string-1&quot;&gt;error_string/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f7364b9ce001d6cae41e6800636cd884898fede" translate="yes" xml:space="preserve">
          <source>Field &lt;code&gt;size&lt;/code&gt; indicates the number of hash positions in the registry. This is the number you provided when you created or last resized the registry, rounded up to the nearest prime number.</source>
          <target state="translated">フィールド &lt;code&gt;size&lt;/code&gt; は、レジストリ内のハッシュ位置の数を示します。これは、レジストリを作成または最後にサイズ変更したときに指定した数であり、最も近い素数に切り上げられます。</target>
        </trans-unit>
        <trans-unit id="d8d416b63535334e26bc4110217a450aaea2d0fc" translate="yes" xml:space="preserve">
          <source>Field &lt;code&gt;size&lt;/code&gt; indicates the size in bytes required to store &lt;code&gt;EI_STR&lt;/code&gt; (including the terminating &lt;code&gt;0&lt;/code&gt;) and &lt;code&gt;EI_BIN&lt;/code&gt; objects, or &lt;code&gt;0&lt;/code&gt; for &lt;code&gt;EI_INT&lt;/code&gt; and &lt;code&gt;EI_FLT&lt;/code&gt;.</source>
          <target state="translated">フィールド &lt;code&gt;size&lt;/code&gt; は、 &lt;code&gt;EI_STR&lt;/code&gt; （終端の &lt;code&gt;0&lt;/code&gt; を含む）および &lt;code&gt;EI_BIN&lt;/code&gt; オブジェクトを格納するために必要なバイト単位のサイズ、または &lt;code&gt;EI_INT&lt;/code&gt; および &lt;code&gt;EI_FLT&lt;/code&gt; の場合は &lt;code&gt;0&lt;/code&gt; を示します。</target>
        </trans-unit>
        <trans-unit id="3f7eafa431967809286bd8430754ffa47af6ddc1" translate="yes" xml:space="preserve">
          <source>Fields have the following types.</source>
          <target state="translated">フィールドには以下のタイプがあります。</target>
        </trans-unit>
        <trans-unit id="4d50a523ff47e5164c174ec2a3f209fc4591ec58" translate="yes" xml:space="preserve">
          <source>Figure 1.1: SSH Protocol Architecture</source>
          <target state="translated">図 1.1:SSH プロトコルのアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="523ebe3ba06aeb9422bef0fd87f129b29d7066ad" translate="yes" xml:space="preserve">
          <source>Figure 1.1: Supervision Tree</source>
          <target state="translated">図 1.1.1:監督ツリー</target>
        </trans-unit>
        <trans-unit id="08736394941c36612a1000fcd4f82e3aeb8c695e" translate="yes" xml:space="preserve">
          <source>Figure 1.1: Terminology</source>
          <target state="translated">図1.1:用語</target>
        </trans-unit>
        <trans-unit id="2d4c6dc6ef332b27b86506ca049d2ef56102c2d3" translate="yes" xml:space="preserve">
          <source>Figure 1.2: Request to An Agent by a Manager</source>
          <target state="translated">図 1.2:マネージャによるエージェントへのリクエスト</target>
        </trans-unit>
        <trans-unit id="3630531c7c6a3f163c1aca75bfd8f8e80594274e" translate="yes" xml:space="preserve">
          <source>Figure 1.3: Structure of a System Managed with SNMP and HTTP</source>
          <target state="translated">図 1.3 SNMP と HTTP で管理されるシステムの構造</target>
        </trans-unit>
        <trans-unit id="ed4eac121bb9b20da4bf8ba42d19de7f6390d69c" translate="yes" xml:space="preserve">
          <source>Figure 1.4: Notification Handling</source>
          <target state="translated">図1.4.通知処理</target>
        </trans-unit>
        <trans-unit id="a67a6c3cabef7ffcc85375e5dc0fc78a6e7cb7f0" translate="yes" xml:space="preserve">
          <source>Figure 10.1: Contents of my_table</source>
          <target state="translated">図10.1.my_tableの内容</target>
        </trans-unit>
        <trans-unit id="980abfa0310223c30c1ced7778712b520a30a0f6" translate="yes" xml:space="preserve">
          <source>Figure 10.2: GetNext from [3,1,1] and [5,1,1].</source>
          <target state="translated">図10.2.3,1,1]と[5,1,1]からのGetNext。</target>
        </trans-unit>
        <trans-unit id="512a9cc41180ea486a59bbebfab51a7e41e4f6e2" translate="yes" xml:space="preserve">
          <source>Figure 10.3: GetNext from [3,2,1] and [5,2,1].</source>
          <target state="translated">図10.3:[3,2,1]と[5,2,1]からのGetNext</target>
        </trans-unit>
        <trans-unit id="0411bfce14335e76e0ecf5fafb916644f43ab854" translate="yes" xml:space="preserve">
          <source>Figure 10.4: GetNext from [3,1,2] and [4,1,2].</source>
          <target state="translated">図10.4:[3,1,2]と[4,1,2]からのGetNext</target>
        </trans-unit>
        <trans-unit id="579a44635c14e47e7f2a3756286ed8ed45b9a313" translate="yes" xml:space="preserve">
          <source>Figure 12.1: The Purpose of Agent Net if</source>
          <target state="translated">図 12.1.エージェントネットの目的 if</target>
        </trans-unit>
        <trans-unit id="b94326c9eff5af4b2945c5a3eb031a94f0188479" translate="yes" xml:space="preserve">
          <source>Figure 13.1: Summary of EPMD Requests</source>
          <target state="translated">図 13.1.EPMD リクエストの概要</target>
        </trans-unit>
        <trans-unit id="36ec74a7eb7d4a1f4a40c49ada2d898095de88cf" translate="yes" xml:space="preserve">
          <source>Figure 13.1: The Purpose of Manager Net if</source>
          <target state="translated">図 13.1.マネージャネットの目的 if</target>
        </trans-unit>
        <trans-unit id="9ce57b391c82ca75320f190c448dff803fc70661" translate="yes" xml:space="preserve">
          <source>Figure 2.1: Client-Server Model</source>
          <target state="translated">図 2.1:クライアント/サーバーモデル</target>
        </trans-unit>
        <trans-unit id="0d1b41c85b8033b42251180c502a802939a7d08a" translate="yes" xml:space="preserve">
          <source>Figure 2.1: Conceptual Overview</source>
          <target state="translated">図2.1.概念的な概要</target>
        </trans-unit>
        <trans-unit id="669cea85c5d62990166377535dee928d0e27d3d7" translate="yes" xml:space="preserve">
          <source>Figure 2.1: Line Break Dialog Window</source>
          <target state="translated">図2.1.改行ダイアログウィンドウ</target>
        </trans-unit>
        <trans-unit id="f417f4f3d31b3733b906fd7b58c4dcbd6df135cd" translate="yes" xml:space="preserve">
          <source>Figure 2.1: MIB Compiler Principles</source>
          <target state="translated">図 2.1.MIB コンパイラの原理</target>
        </trans-unit>
        <trans-unit id="8d83478d2cd3dd666fc5c585b931a8754f9a2318" translate="yes" xml:space="preserve">
          <source>Figure 2.1: Network architecture</source>
          <target state="translated">図2.1.ネットワークアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="ae305086b11036b190156e8f09e02feb832b459a" translate="yes" xml:space="preserve">
          <source>Figure 2.1: Screenshot of the Viewer window</source>
          <target state="translated">図2.1.ビューアウィンドウのスクリーンショット</target>
        </trans-unit>
        <trans-unit id="0c5a6ceb297cb01443a0034db62cf4d075ffd08e" translate="yes" xml:space="preserve">
          <source>Figure 2.2: Conditional Break Dialog Window</source>
          <target state="translated">図2.2.条件付きブレークダイアログ</target>
        </trans-unit>
        <trans-unit id="7eb268a938b8f690123fc5d39f7e702ccf029c20" translate="yes" xml:space="preserve">
          <source>Figure 2.2: Screenshot of the Viewer window</source>
          <target state="translated">図2.2.ビューアウィンドウのスクリーンショット</target>
        </trans-unit>
        <trans-unit id="d2c24c199c8ab29a2a03b69ae217d631fd6651dd" translate="yes" xml:space="preserve">
          <source>Figure 2.2: Single node config</source>
          <target state="translated">図 2.2.2:シングルノードの設定</target>
        </trans-unit>
        <trans-unit id="0b173235b50e6384b5cce003bd84f3a2b97855d8" translate="yes" xml:space="preserve">
          <source>Figure 2.2: Starting the Agent</source>
          <target state="translated">図2.2.エージェントの起動</target>
        </trans-unit>
        <trans-unit id="8faeafcb187ac66ad8fd17afbce8dbda161a7153" translate="yes" xml:space="preserve">
          <source>Figure 2.3: Architecture</source>
          <target state="translated">図2.3:アーキテクチャ</target>
        </trans-unit>
        <trans-unit id="d273337d81a465662ca9a0068d6a3f6992bcd738" translate="yes" xml:space="preserve">
          <source>Figure 2.3: Distributes node config</source>
          <target state="translated">図2.3:ノードコンフィグの配布</target>
        </trans-unit>
        <trans-unit id="363ff7df7bb8d318e8a16500fe7c4123cb741da5" translate="yes" xml:space="preserve">
          <source>Figure 2.3: Function Break Dialog Window</source>
          <target state="translated">図2.3:ファンクションブレークダイアログ</target>
        </trans-unit>
        <trans-unit id="dc5ba5cb631645fa4e837e669695ff3eb990d27f" translate="yes" xml:space="preserve">
          <source>Figure 2.4: Message Call Flow (originating side)</source>
          <target state="translated">図2.4 メッセージコールの流れ(発信側</target>
        </trans-unit>
        <trans-unit id="906737bfaf120953431ac24adf65c27ce903f54f" translate="yes" xml:space="preserve">
          <source>Figure 2.4: Monitor Window</source>
          <target state="translated">図 2.4:モニタウィンドウ</target>
        </trans-unit>
        <trans-unit id="953f4c0da75c385e874c96ac2334fd68246d1ccd" translate="yes" xml:space="preserve">
          <source>Figure 2.4: Overview of the mechanism of MIB selection</source>
          <target state="translated">図 2.4 MIB 選択の仕組みの概要</target>
        </trans-unit>
        <trans-unit id="a0412955a59693d89b170f303bb1981baf54cc90" translate="yes" xml:space="preserve">
          <source>Figure 2.5: Interpret Modules Window</source>
          <target state="translated">図2.5:モジュールの解釈ウィンドウ</target>
        </trans-unit>
        <trans-unit id="28810c9785e99154bc4d93f80d2be3fa5f25f7c8" translate="yes" xml:space="preserve">
          <source>Figure 2.5: Message Call Flow (destination side)</source>
          <target state="translated">図2.5 メッセージコールの流れ(宛先側</target>
        </trans-unit>
        <trans-unit id="a4b78f67a7dbb24830fbf32cddc6f7ded985c806" translate="yes" xml:space="preserve">
          <source>Figure 2.6: Attach Process Window</source>
          <target state="translated">図2.6:アタッチプロセスウィンドウ</target>
        </trans-unit>
        <trans-unit id="745b1afb72f1ea5fc815b54f2e30aace16684501" translate="yes" xml:space="preserve">
          <source>Figure 2.7: View Module Window</source>
          <target state="translated">図2.7:ビューモジュールウィンドウ</target>
        </trans-unit>
        <trans-unit id="548f4535c787c39e21d3d02180ef27aa893adfb2" translate="yes" xml:space="preserve">
          <source>Figure 3.1: A simulated Mnesia transaction which writes one record</source>
          <target state="translated">図3.1.1つのレコードを書き込む模擬Mnesiaトランザクション</target>
        </trans-unit>
        <trans-unit id="0866306a0a1ffee34edac9dff51bdbb10d690768" translate="yes" xml:space="preserve">
          <source>Figure 3.1: Code Lock State Diagram</source>
          <target state="translated">図3.1.コードロック状態図</target>
        </trans-unit>
        <trans-unit id="3e92e5fb1831eafebe86563997e776ce07daa348" translate="yes" xml:space="preserve">
          <source>Figure 3.1: Company Entity-Relation Diagram</source>
          <target state="translated">図 3.1.会社組織関係図</target>
        </trans-unit>
        <trans-unit id="8854c1706d80ff4ef783be1b4a55bc7776485816" translate="yes" xml:space="preserve">
          <source>Figure 3.1: Conceptual Overview</source>
          <target state="translated">図 3.1.概念的な概要</target>
        </trans-unit>
        <trans-unit id="2bc69c26cff87ef3783a9c45b49d2327ce43316f" translate="yes" xml:space="preserve">
          <source>Figure 3.1: Filter: &quot;processes&quot;</source>
          <target state="translated">図 3.1:フィルタ:プロセス</target>
        </trans-unit>
        <trans-unit id="960bdd3e7b477330a8b1803fc80d453ade00fa08" translate="yes" xml:space="preserve">
          <source>Figure 3.1: MGC Startup Call Flow</source>
          <target state="translated">図 3.1.MGC 起動コールの流れ</target>
        </trans-unit>
        <trans-unit id="d10e9ca96c305483ac19414a1867fc81b9b3941f" translate="yes" xml:space="preserve">
          <source>Figure 3.1: Successful and Unsuccessful Test Case Execution</source>
          <target state="translated">図 3.1:テストケースの実行の成功と失敗</target>
        </trans-unit>
        <trans-unit id="2b3b14fe8aa765756ed2b973d3f64144d85612b6" translate="yes" xml:space="preserve">
          <source>Figure 3.2: Code Lock State Diagram Revisited</source>
          <target state="translated">図3.2:コードロック状態図の再確認</target>
        </trans-unit>
        <trans-unit id="7ba7300463bae99f2d77f099fafc4e42263be881" translate="yes" xml:space="preserve">
          <source>Figure 3.2: Configuration Data Flow in a Suite</source>
          <target state="translated">図 3.2:スイートの構成データフロー</target>
        </trans-unit>
        <trans-unit id="1ec756a8c48e16f26383c4056a784980e168e445" translate="yes" xml:space="preserve">
          <source>Figure 3.2: Filter: &quot;mods_and_procs&quot;</source>
          <target state="translated">図3.2:フィルタ:&quot;mods_and_procs&quot;</target>
        </trans-unit>
        <trans-unit id="65d6bb0b3c63004d5424b8954c3f7c199d2b068c" translate="yes" xml:space="preserve">
          <source>Figure 3.2: MG Startup Call Flow</source>
          <target state="translated">図 3.2:MG 起動コールの流れ</target>
        </trans-unit>
        <trans-unit id="6337c3a560f6384e9983e40d19f39ed28a87003e" translate="yes" xml:space="preserve">
          <source>Figure 3.2: Two actors has switched places</source>
          <target state="translated">図3.2:二人のアクターが入れ替わった</target>
        </trans-unit>
        <trans-unit id="3af5ef148cf98c60847b7547b3d06bc677720f38" translate="yes" xml:space="preserve">
          <source>Figure 3.3: Details of a write lock message</source>
          <target state="translated">図 3.3:書き込みロックメッセージの詳細</target>
        </trans-unit>
        <trans-unit id="ca141f5df9fa34dc67ffeb53997feff7bd9ad4dc" translate="yes" xml:space="preserve">
          <source>Figure 3.3: HTML Log File Structure</source>
          <target state="translated">図 3.3:HTML ログファイルの構造</target>
        </trans-unit>
        <trans-unit id="00c89ea0e57363355095334bdfb766f9ed2882ae" translate="yes" xml:space="preserve">
          <source>Figure 3.3: MG Startup Call Flow (no MID)</source>
          <target state="translated">図 3.3:MG 起動コールフロー(MID なし)</target>
        </trans-unit>
        <trans-unit id="06019fd83329891fca487e724e3043acd4e2a0de" translate="yes" xml:space="preserve">
          <source>Figure 3.4: The same trace data in a different view</source>
          <target state="translated">図3.4.同じトレースデータを別のビューで表示</target>
        </trans-unit>
        <trans-unit id="aaf78b767875fb6158ecb6bf800e662d5d29bbb4" translate="yes" xml:space="preserve">
          <source>Figure 3.5: The trace Event in the mgr_actors view</source>
          <target state="translated">図 3.5:mgr_actors ビューのトレースイベント</target>
        </trans-unit>
        <trans-unit id="c412c1557d8b09a77341e6c2ae93864dd5a78025" translate="yes" xml:space="preserve">
          <source>Figure 3.6: The same trace Event in the collectors view</source>
          <target state="translated">図3.6.コレクターズビューでの同じトレースイベント</target>
        </trans-unit>
        <trans-unit id="8e2129c26241e3fb24b61e7e049c36f78d6e0fe5" translate="yes" xml:space="preserve">
          <source>Figure 4.1: Architecture of the Erlang odbc application</source>
          <target state="translated">図4.1.Erlang odbcアプリケーションのアーキテクチャ</target>
        </trans-unit>
        <trans-unit id="5ba43129efdb5812855b9839248bb336b07adb7b" translate="yes" xml:space="preserve">
          <source>Figure 4.1: Bytes of a Window:status Message</source>
          <target state="translated">図 4.1:Window:status メッセージのバイト数</target>
        </trans-unit>
        <trans-unit id="ca912d988f6b2bbcf1df9c0c3693d448e7b3a4d3" translate="yes" xml:space="preserve">
          <source>Figure 4.1: Port Communication</source>
          <target state="translated">図4.1.ポート通信</target>
        </trans-unit>
        <trans-unit id="d43ee41e313c4bc9fe0e7d3700620c89d3ddf25c" translate="yes" xml:space="preserve">
          <source>Figure 4.2: Elements Specified in Configuration File for Selective Decode of a Subvalue in a Window Message</source>
          <target state="translated">図 4.2:ウィンドウメッセージ中のサブ値を選択的にデコードするための設定ファイルで指定された要素</target>
        </trans-unit>
        <trans-unit id="5ddb6f53e7f89ff124a54080a1d81c750c542c40" translate="yes" xml:space="preserve">
          <source>Figure 4.3: Bytes of a Window:status Message</source>
          <target state="translated">図4.3.Window:statusメッセージのバイト数</target>
        </trans-unit>
        <trans-unit id="45d5a2eb9a7dc1564369b400d59e8aea1282d9b5" translate="yes" xml:space="preserve">
          <source>Figure 5.1: One_For_One Supervision</source>
          <target state="translated">図 5.1:One_For_One のスーパービジョン</target>
        </trans-unit>
        <trans-unit id="0eab58150b6fb22b3684514047a2c7f297a925bc" translate="yes" xml:space="preserve">
          <source>Figure 5.2: One_For_All Supervision</source>
          <target state="translated">図 5.2:One_For_All のスーパービジョン</target>
        </trans-unit>
        <trans-unit id="061b435065555f8d08be64f6094952e58a988271" translate="yes" xml:space="preserve">
          <source>Figure 6.1: Definition and use of functions</source>
          <target state="translated">図 6.1.機能の定義と利用</target>
        </trans-unit>
        <trans-unit id="7ed58d435eddda1ece08ea1ce24d9f44c8903453" translate="yes" xml:space="preserve">
          <source>Figure 6.1: Port Driver Communication</source>
          <target state="translated">図6.1.ポートドライバ通信</target>
        </trans-unit>
        <trans-unit id="d0c8bf359ff8dda24997383e4d7c49437afc3ffe" translate="yes" xml:space="preserve">
          <source>Figure 6.2: Some predefined analyses as subsets of all functions</source>
          <target state="translated">図6.2:すべての関数のサブセットとしてのいくつかの定義済み分析</target>
        </trans-unit>
        <trans-unit id="1c552d2cf0674f4d578f0d21a1bff5085a533498" translate="yes" xml:space="preserve">
          <source>Figure 8.1:</source>
          <target state="translated">図8.1.</target>
        </trans-unit>
        <trans-unit id="563353b9112d150d7eed671af92a8fff98b60b1f" translate="yes" xml:space="preserve">
          <source>Figure 8.1: MStone1 with mstone1.sh -d flex -s 4</source>
          <target state="translated">図8.1.MStone1 with mstone1.sh -d flex -s 4</target>
        </trans-unit>
        <trans-unit id="8f5be86a06cd9d5a9c049e72c48c6e8424314b44" translate="yes" xml:space="preserve">
          <source>Figure 8.1: Primary Application and Included Applications</source>
          <target state="translated">図 8.1.プライマリアプリケーションと含まれるアプリケーション</target>
        </trans-unit>
        <trans-unit id="d98b6922c42c6490c1ab05ae19baa9d95d993882" translate="yes" xml:space="preserve">
          <source>Figure 8.2:</source>
          <target state="translated">図8.2.</target>
        </trans-unit>
        <trans-unit id="d0b4b6f72691a955e8d71cc31687b018cc32e13a" translate="yes" xml:space="preserve">
          <source>Figure 8.3:</source>
          <target state="translated">図8.3.</target>
        </trans-unit>
        <trans-unit id="332c12fa550f868eab78a9a37cc8a77525e921d6" translate="yes" xml:space="preserve">
          <source>Figure 8.4:</source>
          <target state="translated">図8.4.</target>
        </trans-unit>
        <trans-unit id="9b2b29f77753c5e02976d1fc1fbd937724cf2668" translate="yes" xml:space="preserve">
          <source>Figure 8.5:</source>
          <target state="translated">図8.5.</target>
        </trans-unit>
        <trans-unit id="c4cd60391cb2e06580fe30e512d3a1e65fff9ad7" translate="yes" xml:space="preserve">
          <source>Figure 8.6:</source>
          <target state="translated">図8.6.</target>
        </trans-unit>
        <trans-unit id="9e5656466c9977074d04d4ad636c38acfe8afe19" translate="yes" xml:space="preserve">
          <source>Figure 9.1: Application myapp - Situation 1</source>
          <target state="translated">図 9.1:アプリケーション myapp-状況 1</target>
        </trans-unit>
        <trans-unit id="0eb88cbf840596e7d918fe7a2d8caa94efa65c27" translate="yes" xml:space="preserve">
          <source>Figure 9.2: Application myapp - Situation 2</source>
          <target state="translated">図 9.2:アプリケーション myapp-状況 2</target>
        </trans-unit>
        <trans-unit id="18c041bf7044aeec8628e40c4d277ffbfa8f3111" translate="yes" xml:space="preserve">
          <source>Figure 9.3: Application myapp - Situation 3</source>
          <target state="translated">図 9.3:アプリケーション myapp-状況 3</target>
        </trans-unit>
        <trans-unit id="31013550bee8c7853eb99345677de31ebf15cff1" translate="yes" xml:space="preserve">
          <source>Figure 9.4: Application myapp - Situation 4</source>
          <target state="translated">図 9.4.アプリケーション myapp-状況 4</target>
        </trans-unit>
        <trans-unit id="4221e66948c648a9488a1b65f47df132883a094f" translate="yes" xml:space="preserve">
          <source>Figure 9.5: Application myapp - Situation 5</source>
          <target state="translated">図 9.5:アプリケーション myapp-状況 5</target>
        </trans-unit>
        <trans-unit id="05d67c57a226cefdab351a860e975d8eb32bcc71" translate="yes" xml:space="preserve">
          <source>Figure space</source>
          <target state="translated">図空間</target>
        </trans-unit>
        <trans-unit id="2c3cafa4db3f3e1e51b3dff4303502dbe42b7a89" translate="yes" xml:space="preserve">
          <source>File</source>
          <target state="translated">File</target>
        </trans-unit>
        <trans-unit id="4b5505a448c25f5ece7091295fa2ae8c43b423f3" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;.config&lt;/code&gt; contains a single Erlang term and has the following syntax:</source>
          <target state="translated">ファイル &lt;code&gt;.config&lt;/code&gt; には単一のErlang用語が含まれており、構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="3fbfaa5abd4b9f7bc58a38040cc38f9b29843d6e" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;.erlang.crypt&lt;/code&gt; is to contain a single list of tuples:</source>
          <target state="translated">ファイル &lt;code&gt;.erlang.crypt&lt;/code&gt; には、タプルの単一のリストが含まれます。</target>
        </trans-unit>
        <trans-unit id="f70b471b5012c54dc6384c852318714311fea9b2" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;.hosts.erlang&lt;/code&gt; consists of a number of host names written as Erlang terms. It is looked for in the current work directory, the user's home directory, and &lt;code&gt;$OTP_ROOT&lt;/code&gt; (the root directory of Erlang/OTP), in that order.</source>
          <target state="translated">ファイル &lt;code&gt;.hosts.erlang&lt;/code&gt; は、Erlang用語として記述された多数のホスト名で構成されています。現在の作業ディレクトリ、ユーザーのホームディレクトリ、 &lt;code&gt;$OTP_ROOT&lt;/code&gt; （Erlang / OTPのルートディレクトリ）の順に検索されます。</target>
        </trans-unit>
        <trans-unit id="671c961c2f0f366457ec49f8374f6de4a088da86" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;.ti&lt;/code&gt; contains &lt;code&gt;{Key,ValueList}&lt;/code&gt; tuples. This function adds &lt;code&gt;Data&lt;/code&gt; to the &lt;code&gt;ValueList&lt;/code&gt; associated with &lt;code&gt;Key&lt;/code&gt;. All information written with this function is included in the call to the format handler.</source>
          <target state="translated">ファイル &lt;code&gt;.ti&lt;/code&gt; には &lt;code&gt;{Key,ValueList}&lt;/code&gt; タプルが含まれています。この関数は、 &lt;code&gt;Key&lt;/code&gt; に関連付けられた &lt;code&gt;ValueList&lt;/code&gt; に &lt;code&gt;Data&lt;/code&gt; を追加します。この関数で記述されたすべての情報は、フォーマットハンドラーの呼び出しに含まれます。</target>
        </trans-unit>
        <trans-unit id="64dec856e0ada55502697235a5b298eba7337843" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;/export/home/otpuser/otp/bin/start&lt;/code&gt; referred to in the above script is precisely the &lt;code&gt;start&lt;/code&gt; script described in &lt;strong&gt;Starting Erlang&lt;/strong&gt;. The script variable &lt;code&gt;OTP_ROOT&lt;/code&gt; in that &lt;code&gt;start&lt;/code&gt; script corresponds to the following example path used in this section:</source>
          <target state="translated">上記のスクリプトで参照されているファイル &lt;code&gt;/export/home/otpuser/otp/bin/start&lt;/code&gt; は、まさに&lt;strong&gt;Erlangの起動で&lt;/strong&gt;説明されている &lt;code&gt;start&lt;/code&gt; スクリプトです。その &lt;code&gt;start&lt;/code&gt; スクリプトのスクリプト変数 &lt;code&gt;OTP_ROOT&lt;/code&gt; は、このセクションで使用されている次のパス例に対応しています。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5681b35a9fab557fa7d01957b08b83fefec93b5" translate="yes" xml:space="preserve">
          <source>File &lt;code&gt;messenger.erl&lt;/code&gt;:</source>
          <target state="translated">ファイル &lt;code&gt;messenger.erl&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="68c0e0a465215b1a5424fcd23f7ea0de4e17f5ee" translate="yes" xml:space="preserve">
          <source>File Menu</source>
          <target state="translated">ファイルメニュー</target>
        </trans-unit>
        <trans-unit id="b144c5da627d4fcd0433d9d07032c24b1a35e8b4" translate="yes" xml:space="preserve">
          <source>File Summary</source>
          <target state="translated">ファイル概要</target>
        </trans-unit>
        <trans-unit id="e998362a328008ec68870225e6e393a8e7ada587" translate="yes" xml:space="preserve">
          <source>File Syntax</source>
          <target state="translated">ファイル構文</target>
        </trans-unit>
        <trans-unit id="e3744ce3ff6628582b9e9f0ed24e796bf95c10cd" translate="yes" xml:space="preserve">
          <source>File and Edit Menus</source>
          <target state="translated">ファイルと編集メニュー</target>
        </trans-unit>
        <trans-unit id="8989bc8592b54990f118873a1ed5d421392254fb" translate="yes" xml:space="preserve">
          <source>File containing an Erlang property list, followed by a full stop, describing the HTTP server configuration.</source>
          <target state="translated">Erlangのプロパティリストの後にフルストップが続くファイルで、HTTPサーバの設定を記述しています。</target>
        </trans-unit>
        <trans-unit id="b7a8f560c389b01b425c7f1430303ef4d3b380b6" translate="yes" xml:space="preserve">
          <source>File descriptor of the destination file &lt;code&gt;Out&lt;/code&gt;.  The trace message. For details, see the Reference Manual for module &lt;code&gt;erlang&lt;/code&gt;.  Includes the keys &lt;code&gt;flags&lt;/code&gt;, &lt;code&gt;client&lt;/code&gt;, and &lt;code&gt;node&lt;/code&gt;. If &lt;code&gt;handler&lt;/code&gt; is specified as option to the tracer function, this is also included. Also, all information written with function &lt;code&gt;write_trace_info/2&lt;/code&gt; is included.</source>
          <target state="translated">宛先ファイル &lt;code&gt;Out&lt;/code&gt; のファイル記述子。トレースメッセージ。詳細については、モジュール &lt;code&gt;erlang&lt;/code&gt; のリファレンスマニュアルを参照してください。キー含ま &lt;code&gt;flags&lt;/code&gt; 、 &lt;code&gt;client&lt;/code&gt; 、および &lt;code&gt;node&lt;/code&gt; 。場合 &lt;code&gt;handler&lt;/code&gt; トレーサ機能のオプションとして指定され、これも含まれています。また、関数 &lt;code&gt;write_trace_info/2&lt;/code&gt; で書き込まれたすべての情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="361a82465491c9161713f597566a3f42e5734e1b" translate="yes" xml:space="preserve">
          <source>File format</source>
          <target state="translated">ファイル形式</target>
        </trans-unit>
        <trans-unit id="83cd93580a4207dd0937a4457cdba2eaca5af484" translate="yes" xml:space="preserve">
          <source>File handling is not done by the Public Key application.</source>
          <target state="translated">ファイルの処理は公開鍵アプリケーションでは行われません。</target>
        </trans-unit>
        <trans-unit id="28d4332b9248121ca825fe26ca7303649b79848d" translate="yes" xml:space="preserve">
          <source>File information as in &lt;code&gt; file:read_file_info/1&lt;/code&gt; in Kernel</source>
          <target state="translated">カーネルの &lt;code&gt; file:read_file_info/1&lt;/code&gt; のようなファイル情報</target>
        </trans-unit>
        <trans-unit id="87e03c8b46f66df04e7376658ec09a622178e8d3" translate="yes" xml:space="preserve">
          <source>File information as in &lt;code&gt;file:read_file_info/1&lt;/code&gt; in Kernel</source>
          <target state="translated">カーネルの &lt;code&gt;file:read_file_info/1&lt;/code&gt; のようなファイル情報</target>
        </trans-unit>
        <trans-unit id="05cc20c44397b03ee1d2a31a9c9eee04f05fc75d" translate="yes" xml:space="preserve">
          <source>File interface module.</source>
          <target state="translated">ファイルインターフェイスモジュール。</target>
        </trans-unit>
        <trans-unit id="f887ba04f84f87da0ccb5533f54bb7e2d3cb48f8" translate="yes" xml:space="preserve">
          <source>File menu</source>
          <target state="translated">ファイルメニュー</target>
        </trans-unit>
        <trans-unit id="8c26de449d0b6a2f6a2d0456de0b11d4c0058119" translate="yes" xml:space="preserve">
          <source>File menu:</source>
          <target state="translated">ファイルメニュー。</target>
        </trans-unit>
        <trans-unit id="ad6fd2b790ed7bb6620e7477fe2d403cdb8cb745" translate="yes" xml:space="preserve">
          <source>File operations are only guaranteed to appear atomic when going through the same file server. A NIF or other OS process may observe intermediate steps on certain operations on some operating systems, eg. renaming an existing file on Windows, or &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2 &lt;/a&gt;&lt;/code&gt; on any OS at the time of writing.</source>
          <target state="translated">ファイル操作は、同じファイルサーバーを経由する場合にのみアトミックに表示されることが保証されています。NIFまたは他のOSプロセスは、一部のオペレーティングシステムでの特定の操作の中間ステップを監視する場合があります。書き込み時に、Windowsでは既存のファイルの名前を変更するか、任意のOSでは &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2 &lt;/a&gt;&lt;/code&gt; に名前を変更します。</target>
        </trans-unit>
        <trans-unit id="57c5b354434bbbfc8df2a3dc53a60f082317d0b3" translate="yes" xml:space="preserve">
          <source>File operations are only guaranteed to appear atomic when going through the same file server. A NIF or other OS process may observe intermediate steps on certain operations on some operating systems, eg. renaming an existing file on Windows, or &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; on any OS at the time of writing.</source>
          <target state="translated">ファイル操作は、同じファイルサーバーを通過するときにのみアトミックに表示されることが保証されています。NIFまたはその他のOSプロセスは、一部のオペレーティングシステムでの特定の操作の中間ステップを監視する場合があります。Windowsでは既存のファイルの名前を変更し、書き込み時には任意のOSで &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を変更します。</target>
        </trans-unit>
        <trans-unit id="c79c159347736532bbcb134d7fd8cb0146b16b16" translate="yes" xml:space="preserve">
          <source>File operations used to accept filenames containing null characters (integer value zero). This caused the name to be truncated and in some cases arguments to primitive operations to be mixed up. Filenames containing null characters inside the filename are now &lt;strong&gt;rejected&lt;/strong&gt; and will cause primitive file operations fail.</source>
          <target state="translated">null文字（整数値0）を含むファイル名を受け入れるために使用されるファイル操作。これにより、名前が切り捨てられ、場合によってはプリミティブ操作の引数が混同されました。ファイル名にnull文字を含むファイル名は&lt;strong&gt;拒否され&lt;/strong&gt;、プリミティブファイル操作が失敗する原因となります。</target>
        </trans-unit>
        <trans-unit id="6b57f688f0dcf623bc2238b6861c04782ba5e78f" translate="yes" xml:space="preserve">
          <source>File operations used to accept filenames containing null characters (integer value zero). This caused the name to be truncated and in some cases arguments to primitive operations to be mixed up. Filenames containing null characters inside the filename are now &lt;strong&gt;rejected&lt;/strong&gt; and will cause primitive file operations to fail.</source>
          <target state="translated">null文字（整数値0）を含むファイル名を受け入れるために使用されるファイル操作。これにより、名前が切り捨てられ、場合によってはプリミティブ操作の引数が混同されました。ファイル名内にnull文字を含むファイル名は&lt;strong&gt;拒否され&lt;/strong&gt;、基本的なファイル操作が失敗する原因となります。</target>
        </trans-unit>
        <trans-unit id="993985df3c150bf6146adb117f97880af959d00d" translate="yes" xml:space="preserve">
          <source>File sorter.</source>
          <target state="translated">ファイルソーター。</target>
        </trans-unit>
        <trans-unit id="adb79fe86d1eee4f2cd161b61c30ffbd182e4dfd" translate="yes" xml:space="preserve">
          <source>File utilities, such as wildcard matching of filenames.</source>
          <target state="translated">ファイル名のワイルドカードマッチングなどのファイルユーティリティ。</target>
        </trans-unit>
        <trans-unit id="913e1c80a3ded5de35659b0874ffd6d0af9d084a" translate="yes" xml:space="preserve">
          <source>FileList :: filelist(),</source>
          <target state="translated">FileList ::filelist()。</target>
        </trans-unit>
        <trans-unit id="bc9ba3417eea6c2f81da0d2cb32153ea5b8631f5" translate="yes" xml:space="preserve">
          <source>Filename manipulation functions.</source>
          <target state="translated">ファイル名の操作機能。</target>
        </trans-unit>
        <trans-unit id="aae37a65105c226310696cdc6572d20c19695d83" translate="yes" xml:space="preserve">
          <source>Filename not allowed [553].</source>
          <target state="translated">ファイル名は許可されていません [553]。</target>
        </trans-unit>
        <trans-unit id="48a6e17cb7d6e4079d3b880980b3a5c34618857d" translate="yes" xml:space="preserve">
          <source>Filenames can be stored as Unicode strings in different ways depending on the underlying operating system and file system. This can be handled fairly easy by a program. The problems arise when the file system is inconsistent in its encodings. For example, Linux allows files to be named with any sequence of bytes, leaving to each program to interpret those bytes. On systems where these &quot;transparent&quot; filenames are used, Erlang must be informed about the filename encoding by a startup flag. The default is bytewise interpretation, which is usually wrong, but allows for interpretation of &lt;strong&gt;all&lt;/strong&gt; filenames.</source>
          <target state="translated">ファイル名は、基礎となるオペレーティングシステムとファイルシステムに応じて、さまざまな方法でUnicode文字列として保存できます。これはプログラムでかなり簡単に処理できます。ファイルシステムのエンコーディングに一貫性がない場合、問題が発生します。たとえば、Linuxでは、ファイルに任意のバイトシーケンスの名前を付けることができ、各プログラムはそれらのバイトを解釈します。これらの「透過的な」ファイル名が使用されているシステムでは、Erlangは起動フラグによってファイル名のエンコーディングについて通知を受ける必要があります。デフォルトはバイト単位の解釈ですが、通常は間違っていますが、&lt;strong&gt;すべての&lt;/strong&gt;ファイル名の解釈が可能です。</target>
        </trans-unit>
        <trans-unit id="6ce6c512ea433a7fc5c8841628e7696cd0ff7f2b" translate="yes" xml:space="preserve">
          <source>Files</source>
          <target state="translated">Files</target>
        </trans-unit>
        <trans-unit id="135d7b6689481e38f2c8e45e1871d2d236ada090" translate="yes" xml:space="preserve">
          <source>Files are compressed using the DEFLATE compression, as described in the &quot;Appnote.txt&quot; file. However, files are stored without compression if they are already compressed. &lt;code&gt;zip/2&lt;/code&gt; and &lt;code&gt;zip/3&lt;/code&gt; check the file extension to determine if the file is to be stored without compression. Files with the following extensions are not compressed: &lt;code&gt;.Z&lt;/code&gt;, &lt;code&gt;.zip&lt;/code&gt;, &lt;code&gt;.zoo&lt;/code&gt;, &lt;code&gt;.arc&lt;/code&gt;, &lt;code&gt;.lzh&lt;/code&gt;, &lt;code&gt;.arj&lt;/code&gt;.</source>
          <target state="translated">「Appnote.txt」ファイルで説明されているように、ファイルはDEFLATE圧縮を使用して圧縮されます。ただし、ファイルが既に圧縮されている場合は、圧縮せずに保存されます。 &lt;code&gt;zip/2&lt;/code&gt; および &lt;code&gt;zip/3&lt;/code&gt; は、ファイル拡張子をチェックして、ファイルを圧縮せずに保存するかどうかを決定します。拡張子が &lt;code&gt;.Z&lt;/code&gt; 、 &lt;code&gt;.zip&lt;/code&gt; 、 &lt;code&gt;.zoo&lt;/code&gt; 、 &lt;code&gt;.arc&lt;/code&gt; 、 &lt;code&gt;.lzh&lt;/code&gt; 、 &lt;code&gt;.arj&lt;/code&gt; のファイルは圧縮されません。</target>
        </trans-unit>
        <trans-unit id="38c42597688edba01d1328297dbd55ee1f6c3035" translate="yes" xml:space="preserve">
          <source>Files can also be set in &lt;code&gt;{encoding, unicode}&lt;/code&gt;, meaning that data is written and read as UTF-8. More encodings are possible for files, see below.</source>
          <target state="translated">ファイルは &lt;code&gt;{encoding, unicode}&lt;/code&gt; で設定することもできます。つまり、データはUTF-8として読み書きされます。ファイルに対してより多くのエンコーディングが可能です。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="c74c8c982534d73919da670ead9a749d9281c28e" translate="yes" xml:space="preserve">
          <source>Files with relative filenames are by default extracted to the current working directory. With this option, files are instead extracted into directory &lt;code&gt;Cwd&lt;/code&gt;.</source>
          <target state="translated">相対ファイル名のファイルは、デフォルトで現在の作業ディレクトリに抽出されます。このオプションを使用すると、ファイルは代わりにディレクトリ &lt;code&gt;Cwd&lt;/code&gt; に抽出されます。</target>
        </trans-unit>
        <trans-unit id="d63f0c4854bf4f400b21ae332a18809d623ede15" translate="yes" xml:space="preserve">
          <source>Files with these extensions are uncompressed.</source>
          <target state="translated">これらの拡張子を持つファイルは非圧縮です。</target>
        </trans-unit>
        <trans-unit id="ddc79442f61fb42b601dbf8816a8b5ac8d030751" translate="yes" xml:space="preserve">
          <source>Files, directories and who uses them</source>
          <target state="translated">ファイル、ディレクトリ、およびそれらを使用する人</target>
        </trans-unit>
        <trans-unit id="8aa27f440cdc0f6cb30d87d689988febf5799c9b" translate="yes" xml:space="preserve">
          <source>Fills &lt;code&gt;iovec&lt;/code&gt; with the list of binaries provided in &lt;code&gt;iovec_term&lt;/code&gt;. The number of elements handled in the call is limited to &lt;code&gt;max_elements&lt;/code&gt;, and &lt;code&gt;tail&lt;/code&gt; is set to the remainder of the list. Note that the output may be longer than &lt;code&gt;max_elements&lt;/code&gt; on some platforms.</source>
          <target state="translated">塗りつぶし &lt;code&gt;iovec&lt;/code&gt; で提供バイナリのリストを &lt;code&gt;iovec_term&lt;/code&gt; 。呼び出しで処理される要素の数は &lt;code&gt;max_elements&lt;/code&gt; に制限され、 &lt;code&gt;tail&lt;/code&gt; はリストの残りに設定されます。一部のプラットフォームでは、出力が &lt;code&gt;max_elements&lt;/code&gt; より長い場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="60ce0dded971cf682c1ea9544000a55687711cb3" translate="yes" xml:space="preserve">
          <source>Fills an already created ETS table with the objects in the already opened Dets table &lt;code&gt;DetsTab&lt;/code&gt;. Existing objects in the ETS table are kept unless overwritten.</source>
          <target state="translated">すでに作成されているETSテーブルを、すでに開かれているDetsテーブル &lt;code&gt;DetsTab&lt;/code&gt; のオブジェクトで埋めます。ETSテーブル内の既存のオブジェクトは、上書きされない限り保持されます。</target>
        </trans-unit>
        <trans-unit id="fa5e1215c7a4c5db71364b061c4f3e89bb0f74f1" translate="yes" xml:space="preserve">
          <source>Fills an already created/opened Dets table with the objects in the already opened ETS table named &lt;code&gt;Tab&lt;/code&gt;. The Dets table is emptied before the objects are inserted.</source>
          <target state="translated">作成済み/オープン済みのDetsテーブルを、すでにオープンされているETSテーブル内の &lt;code&gt;Tab&lt;/code&gt; という名前のオブジェクトで埋めます。オブジェクトが挿入される前にDetsテーブルが空になります。</target>
        </trans-unit>
        <trans-unit id="8666be4e9955d4a11e029f2505d6a37b78a3b2a1" translate="yes" xml:space="preserve">
          <source>Filter and possible alter HTTP request headers before they are processed by the server.</source>
          <target state="translated">サーバによって処理される前に HTTP リクエストヘッダをフィルタリングし、変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="58cb64daddd0c075a64b518a845b550b54c29c81" translate="yes" xml:space="preserve">
          <source>Filter and possible alter HTTP response headers before they are sent to the client.</source>
          <target state="translated">クライアントに送信される前に HTTP レスポンスヘッダをフィルタリングし、変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="0be109752b8b954940984339ff3493358b4481be" translate="yes" xml:space="preserve">
          <source>Filter functions can be used for more sophisticated filtering than the log level check provides. A filter function can stop or pass a log event, based on any of the event's contents. It can also modify all parts of the log event. See section &lt;code&gt;&lt;a href=&quot;#filters&quot;&gt;Filters&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">フィルタ機能は、ログレベルチェックが提供するよりも高度なフィルタリングに使用できます。フィルタ関数は、イベントの内容に基づいて、ログイベントを停止または渡すことができます。また、ログイベントのすべての部分を変更することもできます。詳細については、「 &lt;code&gt;&lt;a href=&quot;#filters&quot;&gt;Filters&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="98e4ca69ac45a4e4ac3cd0268bb15c3cfa785895" translate="yes" xml:space="preserve">
          <source>Filter functions can be used for more sophisticated filtering than the log level check provides. A filter function can stop or pass a log event, based on any of the event's contents. It can also modify all parts of the log event. See see section &lt;code&gt;&lt;a href=&quot;#filters&quot;&gt;Filters&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">フィルター関数は、ログレベルチェックよりも高度なフィルター処理に使用できます。フィルター関数は、イベントのコンテンツに基づいて、ログイベントを停止または渡すことができます。また、ログイベントのすべての部分を変更することもできます。詳細については、 &lt;code&gt;&lt;a href=&quot;#filters&quot;&gt;Filters&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="419f51ded5053ff5ebf4bedf68cbb8ad02590368" translate="yes" xml:space="preserve">
          <source>Filter passed to &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; in order to select candidate peers for a &lt;code&gt;pick_peer/4&lt;/code&gt; callback. Has one of the following types.</source>
          <target state="translated">&lt;code&gt;pick_peer/4&lt;/code&gt; コールバックの候補ピアを選択するために、 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; に渡されるフィルター。次のいずれかのタイプです。</target>
        </trans-unit>
        <trans-unit id="87793d9b082d15c5c3f7207e0d19ef8ea24d6d04" translate="yes" xml:space="preserve">
          <source>Filter to apply to the list of available peers before passing it to the &lt;code&gt;pick_peer/4&lt;/code&gt; callback for the application in question. Multiple options are equivalent a single &lt;code&gt;all&lt;/code&gt; filter on the corresponding list of filters. Defaults to &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">問題のアプリケーションの &lt;code&gt;pick_peer/4&lt;/code&gt; コールバックに渡す前に、利用可能なピアのリストに適用するためのフィルター。複数のオプションは、対応するフィルターのリストの単一の &lt;code&gt;all&lt;/code&gt; フィルターと同等です。デフォルトは &lt;code&gt;none&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1c0fb8ec0bb02ac44b8c6fb4b0b445d690670782" translate="yes" xml:space="preserve">
          <source>Filter type &lt;code&gt;xpath&lt;/code&gt; can be used only if the server supports &lt;code&gt;:xpath&lt;/code&gt;.</source>
          <target state="translated">フィルタータイプ &lt;code&gt;xpath&lt;/code&gt; は、サーバーが &lt;code&gt;:xpath&lt;/code&gt; をサポートしている場合にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="5fadd25a497ceed3db514d6c0e592e1e20d037d5" translate="yes" xml:space="preserve">
          <source>Filter,</source>
          <target state="translated">Filter,</target>
        </trans-unit>
        <trans-unit id="de222516dbd45eb5bdd961151d054741ace84d2e" translate="yes" xml:space="preserve">
          <source>FilterDefault) -&amp;gt;</source>
          <target state="translated">FilterDefault) -&amp;gt;</target>
        </trans-unit>
        <trans-unit id="c5965553aaf1be455c704d626efc4a417689e365" translate="yes" xml:space="preserve">
          <source>Filtered data consists mostly of small values with a somewhat random distribution. In this case, the compression algorithm is tuned to compress them better. The effect of &lt;code&gt;filtered&lt;/code&gt; is to force more Huffman coding and less string matching; it is somewhat intermediate between &lt;code&gt;default&lt;/code&gt; and &lt;code&gt;huffman_only&lt;/code&gt;. &lt;code&gt;rle&lt;/code&gt; is designed to be almost as fast as &lt;code&gt;huffman_only&lt;/code&gt;, but gives better compression for PNG image data.</source>
          <target state="translated">フィルター処理されたデータは、ほとんどランダムな分布の小さな値で構成されています。この場合、圧縮アルゴリズムはそれらをよりよく圧縮するように調整されます。 &lt;code&gt;filtered&lt;/code&gt; の効果は、ハフマンコーディングを強化し、文字列マッチングを少なくすることです。 &lt;code&gt;default&lt;/code&gt; と &lt;code&gt;huffman_only&lt;/code&gt; の中間です。 &lt;code&gt;rle&lt;/code&gt; ほぼ同じ速度になるように設計されて &lt;code&gt;huffman_only&lt;/code&gt; が、PNG形式の画像データのためのより良い圧縮を提供します。</target>
        </trans-unit>
        <trans-unit id="44c70ab2c550874c6b83cd64f44945d2191d5fba" translate="yes" xml:space="preserve">
          <source>Filtering thresholds. Anything values above the threshold value are passed through.</source>
          <target state="translated">閾値をフィルタリングします。閾値以上の値はすべて通過します。</target>
        </trans-unit>
        <trans-unit id="e63e42ac559f604c2b9a7e51e8d51b6e74c5c078" translate="yes" xml:space="preserve">
          <source>Filters and scaling menu:</source>
          <target state="translated">フィルターと拡大縮小メニュー。</target>
        </trans-unit>
        <trans-unit id="438bb8882a451009187f14c4b05eaa8a55556859" translate="yes" xml:space="preserve">
          <source>Filters are removed with &lt;code&gt;&lt;a href=&quot;logger#remove_primary_filter-1&quot;&gt; logger:remove_primary_filter/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt; logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">フィルタは、 &lt;code&gt;&lt;a href=&quot;logger#remove_primary_filter-1&quot;&gt; logger:remove_primary_filter/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt; logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt; で削除されます。</target>
        </trans-unit>
        <trans-unit id="77b261b990351426d63c9de88ecb67bc55f6221e" translate="yes" xml:space="preserve">
          <source>Filters are removed with &lt;code&gt;&lt;a href=&quot;logger#remove_primary_filter-1&quot;&gt;logger:remove_primary_filter/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">フィルターは &lt;code&gt;&lt;a href=&quot;logger#remove_primary_filter-1&quot;&gt;logger:remove_primary_filter/1&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt; で削除されます。</target>
        </trans-unit>
        <trans-unit id="bc19bb1144c5545747a16382e69f83acf9cf2b6e" translate="yes" xml:space="preserve">
          <source>Filters are used to remove or change log events before they reach the handlers.</source>
          <target state="translated">フィルタは、ログイベントがハンドラに到達する前に削除または変更するために使用されます。</target>
        </trans-unit>
        <trans-unit id="53eb06202ec69e3a14f6ce5212c4973bb1b05ab3" translate="yes" xml:space="preserve">
          <source>Filters can be primary, or attached to a specific handler. Logger calls the primary filters first, and if they all pass, it calls the handler filters for each handler. Logger calls the handler callback only if all filters attached to the handler in question also pass.</source>
          <target state="translated">フィルタはプライマリ、または特定のハンドラにアタッチすることができます。ロガーは最初にプライマリフィルタを呼び出し、すべてのフィルタが通過した場合、各ハンドラのハンドラフィルタを呼び出します。ロガーは、問題のハンドラに接続されているすべてのフィルタが通過した場合にのみ、ハンドラコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="929cf67061a7fdae0a67d2c443458c37da769ac7" translate="yes" xml:space="preserve">
          <source>Filters elements in &lt;code&gt;Ordset1&lt;/code&gt; with boolean function &lt;code&gt;Pred&lt;/code&gt;.</source>
          <target state="translated">ブール関数 &lt;code&gt;Pred&lt;/code&gt; を使用して &lt;code&gt;Ordset1&lt;/code&gt; の要素をフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="e1e9cfa6f5c1f45c2d29b912c5a283995f5613cb" translate="yes" xml:space="preserve">
          <source>Filters elements in &lt;code&gt;Set1&lt;/code&gt; using predicate function &lt;code&gt;Pred&lt;/code&gt;.</source>
          <target state="translated">述語関数 &lt;code&gt;Pred&lt;/code&gt; を使用して &lt;code&gt;Set1&lt;/code&gt; の要素をフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="9b107fcf28c50758a21fcaa73c30f2c5f6d0a348" translate="yes" xml:space="preserve">
          <source>Filters elements in &lt;code&gt;Set1&lt;/code&gt; with boolean function &lt;code&gt;Pred&lt;/code&gt;.</source>
          <target state="translated">ブール関数 &lt;code&gt;Pred&lt;/code&gt; を使用して &lt;code&gt;Set1&lt;/code&gt; の要素をフィルタリングします。</target>
        </trans-unit>
        <trans-unit id="fc2bbf0b2f45aa013340755d9a9883d9fbe02e9d" translate="yes" xml:space="preserve">
          <source>Filters menu:</source>
          <target state="translated">フィルターメニュー。</target>
        </trans-unit>
        <trans-unit id="b359d8ef0c9d6516b3ed5329cab35d70d08cce5f" translate="yes" xml:space="preserve">
          <source>Filters that do not return &lt;code&gt;boolean()&lt;/code&gt; but fail are handled differently depending on their syntax: if the filter is a guard, it returns &lt;code&gt;false&lt;/code&gt;, otherwise the query evaluation fails. This behavior makes it possible for the &lt;code&gt;qlc&lt;/code&gt; module to do some optimizations without affecting the meaning of a query. For example, when testing some position of a table and one or more constants for equality, only the objects with equal values are candidates for further evaluation. The other objects are guaranteed to make the filter return &lt;code&gt;false&lt;/code&gt;, but never fail. The (small) set of candidate objects can often be found by looking up some key values of the table or by traversing the table using a match specification. It is necessary to place the guard filters immediately after the table generator, otherwise the candidate objects are not restricted to a small set. The reason is that objects that could make the query evaluation fail must not be excluded by looking up a key or running a match specification.</source>
          <target state="translated">&lt;code&gt;boolean()&lt;/code&gt; を返さないが失敗するフィルターは、構文によって処理が異なります。フィルターがガードの場合は &lt;code&gt;false&lt;/code&gt; を返し、それ以外の場合はクエリ評価が失敗します。この動作により、 &lt;code&gt;qlc&lt;/code&gt; モジュールはクエリの意味に影響を与えずにいくつかの最適化を行うことができます。たとえば、テーブルの一部の位置と1つ以上の定数が等しいかどうかをテストする場合、等しい値を持つオブジェクトのみが、さらなる評価の候補になります。他のオブジェクトは、フィルターが &lt;code&gt;false&lt;/code&gt; を返すことが保証されています、しかし決して失敗しない。候補オブジェクトの（小さい）セットは、テーブルのいくつかのキー値を検索するか、一致指定を使用してテーブルをトラバースすることで見つけることができます。テーブルジェネレーターの直後にガードフィルターを配置する必要があります。そうしないと、候補オブジェクトが小さなセットに制限されません。その理由は、クエリの評価が失敗する可能性のあるオブジェクトは、キーを検索したり、一致仕様を実行したりして除外してはならないためです。</target>
        </trans-unit>
        <trans-unit id="d8273802f92ee02c18f5a56f149001b6d413a4e5" translate="yes" xml:space="preserve">
          <source>Filters to use with Logger.</source>
          <target state="translated">ロガーで使用するフィルタ。</target>
        </trans-unit>
        <trans-unit id="5a52c8b95c60cd642e9615177be329a585894504" translate="yes" xml:space="preserve">
          <source>Final Remarks</source>
          <target state="translated">最後のご挨拶</target>
        </trans-unit>
        <trans-unit id="15f8a7d12abc0ffa39020921abfbad8a484e39f6" translate="yes" xml:space="preserve">
          <source>Final punctuation</source>
          <target state="translated">最後の句読点</target>
        </trans-unit>
        <trans-unit id="f625e090aff5c6e2793852ea547c61e4a2b56edc" translate="yes" xml:space="preserve">
          <source>Finalizes a series of encryptions or decryptions and delivers the final bytes of the final block. The data returned from this function may be empty if no padding was enabled in &lt;code&gt;&lt;a href=&quot;#crypto_init-3&quot;&gt;crypto_init/3,4&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#crypto_dyn_iv_init-3&quot;&gt;crypto_dyn_iv_init/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一連の暗号化または復号化を完了し、最終ブロックの最終バイトを配信します。 &lt;code&gt;&lt;a href=&quot;#crypto_init-3&quot;&gt;crypto_init/3,4&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#crypto_dyn_iv_init-3&quot;&gt;crypto_dyn_iv_init/3&lt;/a&gt;&lt;/code&gt; でパディングが有効になっていない場合、この関数から返されるデータは空になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="6a623b4776d23e2664e3f138ed9827f0c6ae6e48" translate="yes" xml:space="preserve">
          <source>Finalizes the &lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt;time offset&lt;/a&gt;&lt;/code&gt; when &lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt;single time warp mode&lt;/a&gt;&lt;/code&gt; is used. If another time warp mode is used, the time offset state is left unchanged.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Single_Time_Warp_Mode&quot;&gt;single time warp mode&lt;/a&gt;&lt;/code&gt; が使用されている場合、 &lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt;time offset&lt;/a&gt;&lt;/code&gt; 確定します。別のタイムワープモードが使用されている場合、タイムオフセットの状態は変更されません。</target>
        </trans-unit>
        <trans-unit id="b7be6a9c8fb73009ddee747b4cee8162da35c862" translate="yes" xml:space="preserve">
          <source>Finalizes the HMAC operation referenced by &lt;code&gt;Context&lt;/code&gt;. &lt;code&gt;HashLen&lt;/code&gt; must be greater than zero. &lt;code&gt;Mac&lt;/code&gt; will be a binary with at most &lt;code&gt;HashLen&lt;/code&gt; bytes. Note that if HashLen is greater than the actual number of bytes returned from the underlying hash, the returned hash will have fewer than &lt;code&gt;HashLen&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; によって参照されるHMAC操作を終了します。 &lt;code&gt;HashLen&lt;/code&gt; はゼロより大きくなければなりません。 &lt;code&gt;Mac&lt;/code&gt; は最大で &lt;code&gt;HashLen&lt;/code&gt; バイトのバイナリになります。HashLenが基礎となるハッシュから返される実際のバイト数より大きい場合、返されるハッシュは &lt;code&gt;HashLen&lt;/code&gt; バイトよりも少ないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="65ef78392f0874f3113b63866cde4b3879b0e7f2" translate="yes" xml:space="preserve">
          <source>Finalizes the HMAC operation referenced by &lt;code&gt;Context&lt;/code&gt;. The size of the resultant MAC is determined by the type of hash function used to generate it.</source>
          <target state="translated">&lt;code&gt;Context&lt;/code&gt; によって参照されるHMAC操作を終了します。結果のMACのサイズは、その生成に使用されるハッシュ関数のタイプによって決まります。</target>
        </trans-unit>
        <trans-unit id="5c249e5868c7f4bf1b1bab2b0588f406a4895541" translate="yes" xml:space="preserve">
          <source>Finalizes the MAC operation referenced by &lt;code&gt;State&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; によって参照されるMAC操作を終了します。</target>
        </trans-unit>
        <trans-unit id="09519d0cf800592d78d0b7fff89540d957188f61" translate="yes" xml:space="preserve">
          <source>Finalizes the MAC operation referenced by &lt;code&gt;State&lt;/code&gt;. The &lt;code&gt;Mac&lt;/code&gt; result will have a default length depending on the &lt;code&gt;Type&lt;/code&gt; and &lt;code&gt;SubType&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;#mac_init-3&quot;&gt;mac_init/2,3&lt;/a&gt;&lt;/code&gt; call. To set a shorter length, use &lt;code&gt;&lt;a href=&quot;#mac_finalN-2&quot;&gt;mac_finalN/2&lt;/a&gt;&lt;/code&gt; instead. The default length is documented in &lt;code&gt;&lt;a href=&quot;algorithm_details#message-authentication-codes--macs-&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; によって参照されるMAC操作を終了します。 &lt;code&gt;Mac&lt;/code&gt; 結果は、に応じて、デフォルトの長さを持つことになります &lt;code&gt;Type&lt;/code&gt; と &lt;code&gt;SubType&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;#mac_init-3&quot;&gt;mac_init/2,3&lt;/a&gt;&lt;/code&gt; コール。より短い長さを設定するには、代わりに &lt;code&gt;&lt;a href=&quot;#mac_finalN-2&quot;&gt;mac_finalN/2&lt;/a&gt;&lt;/code&gt; を使用します。デフォルトの長さは、ユーザーガイドの &lt;code&gt;&lt;a href=&quot;algorithm_details#message-authentication-codes--macs-&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; れています。</target>
        </trans-unit>
        <trans-unit id="e81885f58794458968f00203e5876b164fa2c28b" translate="yes" xml:space="preserve">
          <source>Finalizes the hash operation referenced by &lt;code&gt;Context&lt;/code&gt; returned from a previous call to &lt;code&gt;&lt;a href=&quot;#hash_update-2&quot;&gt;hash_update&lt;/a&gt;&lt;/code&gt;. The size of &lt;code&gt;Digest&lt;/code&gt; is determined by the type of hash function used to generate it.</source>
          <target state="translated">以前の &lt;code&gt;&lt;a href=&quot;#hash_update-2&quot;&gt;hash_update&lt;/a&gt;&lt;/code&gt; の呼び出しから返された &lt;code&gt;Context&lt;/code&gt; によって参照されるハッシュ操作をファイナライズします。 &lt;code&gt;Digest&lt;/code&gt; のサイズは、それを生成するために使用されるハッシュ関数のタイプによって決定されます。</target>
        </trans-unit>
        <trans-unit id="d5d14c724430e1a3c0243d843406a7b51ba7ab25" translate="yes" xml:space="preserve">
          <source>Finally create an informative table dumped on the console with &lt;code&gt;fprof:analyse()&lt;/code&gt;, or on file with &lt;code&gt;fprof:analyse(dest, [])&lt;/code&gt;, or perhaps even &lt;code&gt;fprof:analyse([{dest, &quot;my_fprof.analysis&quot;}, {cols, 120}])&lt;/code&gt; for a wider listing on non-default filename.</source>
          <target state="translated">最後に、 &lt;code&gt;fprof:analyse()&lt;/code&gt; を使用してコンソールに、または &lt;code&gt;fprof:analyse(dest, [])&lt;/code&gt; 、あるいはおそらく &lt;code&gt;fprof:analyse([{dest, &quot;my_fprof.analysis&quot;}, {cols, 120}])&lt;/code&gt; デフォルト以外のファイル名のより広いリストについては。</target>
        </trans-unit>
        <trans-unit id="3315842147c0699f9adcd6ca4a1d438c177f06a3" translate="yes" xml:space="preserve">
          <source>Finally single modules and entire applications may be read from Escripts.</source>
          <target state="translated">最後に、単一のモジュールやアプリケーション全体を Escripts から読み込むことができます。</target>
        </trans-unit>
        <trans-unit id="92661f0b869fd14d1ed0ab5c480286262565b533" translate="yes" xml:space="preserve">
          <source>Finally the target &lt;code&gt;releases/RELEASES&lt;/code&gt; file is created from data in the file &lt;code&gt;releases/mysystem.rel&lt;/code&gt;.</source>
          <target state="translated">最後に、 &lt;code&gt;releases/RELEASES&lt;/code&gt; ファイルは、 &lt;code&gt;releases/mysystem.rel&lt;/code&gt; ファイルのデータから作成されます。</target>
        </trans-unit>
        <trans-unit id="087d7a2e906b99786f46767fd11522868e5d6570" translate="yes" xml:space="preserve">
          <source>Finally, if the analysis is made on line level, the result is given as a list of tuples &lt;code&gt;{Line,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the number of times each line has been executed:</source>
          <target state="translated">最後に、分析が行レベルで行われた場合、結果はタプルのリスト &lt;code&gt;{Line,Calls}&lt;/code&gt; ます。ここでの &lt;code&gt;Calls&lt;/code&gt; は、各行が実行された回数です。</target>
        </trans-unit>
        <trans-unit id="5b9dd7454a651caca5e5ef6172e38b5dcfc770cf" translate="yes" xml:space="preserve">
          <source>Finally, if the analysis is made on line level, the result is given as a list of tuples &lt;code&gt;{Line,{Cov,NotCov}}&lt;/code&gt;, one for each executable line in the source code. A line is specified by its module name and line number.</source>
          <target state="translated">最後に、分析が行レベルで行われる場合、結果はタプルのリストとして提供されます &lt;code&gt;{Line,{Cov,NotCov}}&lt;/code&gt; 、ソースコード内の実行可能な各行に1つ。行は、モジュール名と行番号で指定されます。</target>
        </trans-unit>
        <trans-unit id="4229ddaf438f162fbfab1daa97ee43ed5e47043d" translate="yes" xml:space="preserve">
          <source>Finally, if the name without any prefixes or lift/glob markers begins with an uppercase character, as in &lt;code&gt;_@Foo&lt;/code&gt; or &lt;code&gt;_@_@Foo&lt;/code&gt;, it will become a variable on the Erlang level, and can be used to easily deconstruct and construct syntax trees:</source>
          <target state="translated">最後に、 &lt;code&gt;_@Foo&lt;/code&gt; または &lt;code&gt;_@_@Foo&lt;/code&gt; 、接頭辞またはリフト/グロブマーカーのない名前が大文字で始まる場合、Erlangレベルの変数になり、簡単に分解および構築するために使用できます。構文ツリー：</target>
        </trans-unit>
        <trans-unit id="9db00c53b153eacb13bfb4430153b7193db7bcff" translate="yes" xml:space="preserve">
          <source>Finally, if the provided public key is found, the signature provided by the client is checked with the public key.</source>
          <target state="translated">最後に、提供された公開鍵が見つかった場合、クライアントから提供された署名を公開鍵でチェックします。</target>
        </trans-unit>
        <trans-unit id="2bb7a056457d186e75f685f33527dee8627c1242" translate="yes" xml:space="preserve">
          <source>Finally, let us return the resulting color in &lt;code&gt;blend/3&lt;/code&gt;:</source>
          <target state="translated">最後に、結果の色を &lt;code&gt;blend/3&lt;/code&gt; で返します。</target>
        </trans-unit>
        <trans-unit id="4fd9a0eb31ce9e0e26400a53b63f254adac09b5e" translate="yes" xml:space="preserve">
          <source>Finally, the code for the C node client:</source>
          <target state="translated">最後に、Cノードクライアントのコードです。</target>
        </trans-unit>
        <trans-unit id="521306d2143148ff01a484212c6a16c74577f38c" translate="yes" xml:space="preserve">
          <source>Finally, the memory allocated by the &lt;code&gt;ETERM&lt;/code&gt; creating functions (including &lt;code&gt;erl_receive_msg()&lt;/code&gt; must be freed:</source>
          <target state="translated">最後に、 &lt;code&gt;ETERM&lt;/code&gt; 作成関数（ &lt;code&gt;erl_receive_msg()&lt;/code&gt; を含む）によって割り当てられたメモリを解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="4d822c5ef1c061771ab665473b83cedef9d44990" translate="yes" xml:space="preserve">
          <source>Finally, the memory allocated by the &lt;code&gt;ETERM&lt;/code&gt; creating functions must be freed:</source>
          <target state="translated">最後に、 &lt;code&gt;ETERM&lt;/code&gt; 作成関数によって割り当てられたメモリを解放する必要があります。</target>
        </trans-unit>
        <trans-unit id="d8e2b97d3a90fe0284007a8c0d7f8d81ebbb8540" translate="yes" xml:space="preserve">
          <source>Finally, to prepare the upgrade, we must put the new release package in the &lt;code&gt;releases&lt;/code&gt; directory of the first target system:</source>
          <target state="translated">最後に、アップグレードを準備するには、新しいリリースパッケージを最初のターゲットシステムの &lt;code&gt;releases&lt;/code&gt; ディレクトリに配置する必要があります。</target>
        </trans-unit>
        <trans-unit id="c53623e28db074293258fb3bb4f2b79e6f79ea31" translate="yes" xml:space="preserve">
          <source>Find Tag (&lt;code&gt;erlang-find-tag&lt;/code&gt;) - Like the Elisp-function `find-tag'. Capable of retrieving Erlang modules. Tags can be given on the forms `tag', `module:', `module:tag'.</source>
          <target state="translated">タグを検索（ &lt;code&gt;erlang-find-tag&lt;/code&gt; ）-Elisp関数の「find-tag」と同様。Erlangモジュールを取得できます。タグは、 `tag '、` module：'、 `module：tag 'の形式で指定できます。</target>
        </trans-unit>
        <trans-unit id="b34a58f0b0440dc6ae16662304b9e768574d2fc7" translate="yes" xml:space="preserve">
          <source>Find an arbitrary &lt;code&gt;&lt;a href=&quot;#simple_path&quot;&gt;simple path&lt;/a&gt;&lt;/code&gt; v[1], v[2], ..., v[k] from &lt;code&gt;V1&lt;/code&gt; to &lt;code&gt;V2&lt;/code&gt; in &lt;code&gt;G&lt;/code&gt;.</source>
          <target state="translated">任意検索 &lt;code&gt;&lt;a href=&quot;#simple_path&quot;&gt;simple path&lt;/a&gt;&lt;/code&gt; からV [1]、V [2]、...、V [k]は &lt;code&gt;V1&lt;/code&gt; に &lt;code&gt;V2&lt;/code&gt; を中 &lt;code&gt;G&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="607510fcec153a3ea8d617c75859b756b5806031" translate="yes" xml:space="preserve">
          <source>Find the list of inherited callback modules for a given module.</source>
          <target state="translated">指定したモジュールの継承されたコールバックモジュールのリストを検索します。</target>
        </trans-unit>
        <trans-unit id="6e5e5d9606a11a3ec57b3139a243fb3bbaf682d5" translate="yes" xml:space="preserve">
          <source>Find the mib-entry corresponding to the &lt;code&gt;Oid&lt;/code&gt;. If it is a variable, the &lt;code&gt;Oid&lt;/code&gt; must be &amp;lt;Oid for var&amp;gt;.0 and if it is a table, &lt;code&gt;Oid&lt;/code&gt; must be &amp;lt;table&amp;gt;.&amp;lt;entry&amp;gt;.&amp;lt;col&amp;gt;.&amp;lt;any&amp;gt;.</source>
          <target state="translated">&lt;code&gt;Oid&lt;/code&gt; に対応するmib-entryを見つけます。変数の場合、 &lt;code&gt;Oid&lt;/code&gt; は&amp;lt;varのOid&amp;gt; .0でなければならず、テーブルの場合、 &lt;code&gt;Oid&lt;/code&gt; は&amp;lt;table&amp;gt;。&amp;lt;entry&amp;gt;。&amp;lt;col&amp;gt;。&amp;lt;any&amp;gt;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7d749a8167ac1e1b5818df9d225ddaea608641f0" translate="yes" xml:space="preserve">
          <source>Finds the indices of the next row in the table. &lt;code&gt;RestOid&lt;/code&gt; does not have to specify an existing row.</source>
          <target state="translated">テーブルの次の行のインデックスを検索します。 &lt;code&gt;RestOid&lt;/code&gt; は既存の行を指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="854d2a3b825fbb1805e84a83c0bc976ed8dab61f" translate="yes" xml:space="preserve">
          <source>Finds the lexicographically next oid.</source>
          <target state="translated">語彙的に次のオイドを検索します。</target>
        </trans-unit>
        <trans-unit id="f0efb500660b8850e6f03d3cc264106146d38ada" translate="yes" xml:space="preserve">
          <source>Finds the mib corresponding to the &lt;code&gt;Oid&lt;/code&gt;. If it is a variable, the Oid must be &amp;lt;Oid for var&amp;gt;.0 and if it is a table, Oid must be &amp;lt;table&amp;gt;.&amp;lt;entry&amp;gt;.&amp;lt;col&amp;gt;.&amp;lt;any&amp;gt;</source>
          <target state="translated">&lt;code&gt;Oid&lt;/code&gt; に対応するMIBを検索します。変数の場合、Oidは&amp;lt;varのOid&amp;gt; .0である必要があり、テーブルの場合、Oidは&amp;lt;table&amp;gt;。&amp;lt;entry&amp;gt;。&amp;lt;col&amp;gt;。&amp;lt;any&amp;gt;である必要があります</target>
        </trans-unit>
        <trans-unit id="961787759d2b6794e726ebd5bfa829f55f665a69" translate="yes" xml:space="preserve">
          <source>Finds the mib entry corresponding to the &lt;code&gt;Oid&lt;/code&gt;. If it is a variable, the Oid must be &amp;lt;Oid for var&amp;gt;.0 and if it is a table, Oid must be &amp;lt;table&amp;gt;.&amp;lt;entry&amp;gt;.&amp;lt;col&amp;gt;.&amp;lt;any&amp;gt;</source>
          <target state="translated">&lt;code&gt;Oid&lt;/code&gt; に対応するmibエントリを検索します。変数の場合、Oidは&amp;lt;varのOid&amp;gt; .0である必要があり、テーブルの場合、Oidは&amp;lt;table&amp;gt;。&amp;lt;entry&amp;gt;。&amp;lt;col&amp;gt;。&amp;lt;any&amp;gt;である必要があります</target>
        </trans-unit>
        <trans-unit id="2ead6e026d6cfaeaf0dadb418395e45affe8f757" translate="yes" xml:space="preserve">
          <source>Finds the source filename and compiler options for a module. The result can be fed to &lt;code&gt; compile:file/2&lt;/code&gt; to compile the file again.</source>
          <target state="translated">モジュールのソースファイル名とコンパイラオプションを検索します。結果を &lt;code&gt; compile:file/2&lt;/code&gt; にフィードして、ファイルを再度コンパイルできます。</target>
        </trans-unit>
        <trans-unit id="dd26a101e7f8349a3b9eabf85d3c9e2b88fe9d74" translate="yes" xml:space="preserve">
          <source>Finds the source filename and compiler options for a module. The result can be fed to &lt;code&gt;compile:file/2&lt;/code&gt; to compile the file again.</source>
          <target state="translated">モジュールのソースファイル名とコンパイラオプションを検索します。結果を &lt;code&gt;compile:file/2&lt;/code&gt; にフィードして、ファイルを再度コンパイルできます。</target>
        </trans-unit>
        <trans-unit id="56049872c97f05a4eb69b7cd9cf9f3115199ab27" translate="yes" xml:space="preserve">
          <source>Finds undefined functions, unused functions, and calls to deprecated functions in a module by calling &lt;code&gt;xref:m/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;xref:m/1&lt;/code&gt; を呼び出して、モジュール内の未定義の関数、未使用の関数、および非推奨の関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4c1f6a04fbd618db88d923399ff700fad86ec5e5" translate="yes" xml:space="preserve">
          <source>Finishes the update of an MD5 &lt;code&gt;Context&lt;/code&gt; and returns the computed &lt;code&gt;MD5&lt;/code&gt; message digest.</source>
          <target state="translated">MD5 &lt;code&gt;Context&lt;/code&gt; 更新を終了し、計算された &lt;code&gt;MD5&lt;/code&gt; メッセージダイジェストを返します。</target>
        </trans-unit>
        <trans-unit id="2a4b3f3698c0c781ab854ffac38f7d4a9742e7fe" translate="yes" xml:space="preserve">
          <source>Finite state machine</source>
          <target state="translated">有限状態機械</target>
        </trans-unit>
        <trans-unit id="871f259a87938d87e44a6ae4e2b676fee33ee876" translate="yes" xml:space="preserve">
          <source>Firmware-Revision AVP</source>
          <target state="translated">ファームウェア改訂版 AVP</target>
        </trans-unit>
        <trans-unit id="aae4edfdb68cd41e660204f375029a430163ca5e" translate="yes" xml:space="preserve">
          <source>First &lt;code&gt;pand&lt;/code&gt;:</source>
          <target state="translated">最初の &lt;code&gt;pand&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="dcc52ad67a71e6efc7ff37aea8528443dac76725" translate="yes" xml:space="preserve">
          <source>First a macro &lt;code&gt;is_channel&lt;/code&gt; is defined to help with the guard tests. This is only here for convenience and to reduce syntax cluttering. For more information about macros, see &lt;code&gt; The Preprocessor&lt;/code&gt;.</source>
          <target state="translated">最初に、ガードテストを支援するためにマクロ &lt;code&gt;is_channel&lt;/code&gt; が定義されます。これは、便宜上、および構文の乱雑さを減らすためにのみここにあります。マクロの詳細については、「 &lt;code&gt; The Preprocessor&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="826f55e631b0eb90c79dc98fcf8ca69529b4d561" translate="yes" xml:space="preserve">
          <source>First a macro &lt;code&gt;is_channel&lt;/code&gt; is defined to help with the guard tests. This is only here for convenience and to reduce syntax cluttering. For more information about macros, see &lt;code&gt;The Preprocessor&lt;/code&gt;.</source>
          <target state="translated">最初に、ガードテストを支援するためにマクロ &lt;code&gt;is_channel&lt;/code&gt; が定義されています。これは、利便性と構文の乱雑さを減らすためにのみここにあります。マクロの詳細については &lt;code&gt;The Preprocessor&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="7dc1523d30389e649eaad9e0547b5fb0f51d863a" translate="yes" xml:space="preserve">
          <source>First a size, as close as possible to SuggestedSize, is selected. Then one group with that key size is randomly selected from the specified set of groups. If no size within the limits of &lt;code&gt;MinSize&lt;/code&gt; and &lt;code&gt;MaxSize&lt;/code&gt; is available, &lt;code&gt;{error,no_group_found}&lt;/code&gt; is returned.</source>
          <target state="translated">最初に、できるだけSuggestedSizeに近いサイズが選択されます。次に、そのキーサイズを持つ1つのグループが、指定されたグループのセットからランダムに選択されます。 &lt;code&gt;MinSize&lt;/code&gt; と &lt;code&gt;MaxSize&lt;/code&gt; の制限内のサイズがない場合、 &lt;code&gt;{error,no_group_found}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="1cba34bdd572f011a821961db602576b15bfda82" translate="yes" xml:space="preserve">
          <source>First it matches an opening parenthesis. Then it matches any number of substrings, which can either be a sequence of non-parentheses or a recursive match of the pattern itself (that is, a correctly parenthesized substring). Finally there is a closing parenthesis. Notice the use of a possessive quantifier to avoid backtracking into sequences of non-parentheses.</source>
          <target state="translated">最初に、最初の括弧にマッチします。次に、任意の数の部分文字列にマッチします。これは、非括弧の連続であるか、パターン自体の再帰的なマッチ(つまり、正しく括弧化された部分文字列)のいずれかになります。最後に括弧があります。非括弧のシーケンスへのバックトラックを避けるために所有格量詞が使用されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="afd800199d45c2aa85aa04aeabc10ec9921944e4" translate="yes" xml:space="preserve">
          <source>First let us look at some of the new concepts that have been introduced.</source>
          <target state="translated">まず、新たに導入された概念をいくつか見てみましょう。</target>
        </trans-unit>
        <trans-unit id="be568e309600c7ae745b47d478b96067b9e3bdb7" translate="yes" xml:space="preserve">
          <source>First notice that two functions have the same name, &lt;code&gt;list_max&lt;/code&gt;. However, each of these takes a different number of arguments (parameters). In Erlang these are regarded as completely different functions. Where you need to distinguish between these functions, you write Name/Arity, where Name is the function name and Arity is the number of arguments, in this case &lt;code&gt;list_max/1&lt;/code&gt; and &lt;code&gt;list_max/2&lt;/code&gt;.</source>
          <target state="translated">最初に、2つの関数に同じ名前 &lt;code&gt;list_max&lt;/code&gt; があることに注意してください。ただし、これらはそれぞれ異なる数の引数（パラメーター）を取ります。Erlangでは、これらは完全に異なる関数と見なされます。これらの関数を区別する必要がある場合は、Name / &lt;code&gt;list_max/1&lt;/code&gt; は関数名、Arityは引数の数です（この場合はlist_max / 1および &lt;code&gt;list_max/2&lt;/code&gt; )。</target>
        </trans-unit>
        <trans-unit id="96d6bd9c6a5496d3c40a44a0010b9e0e5691afa4" translate="yes" xml:space="preserve">
          <source>First of all, Cover must be started. This spawns a process which owns the Cover database where all coverage data will be stored.</source>
          <target state="translated">まず、Coverを起動する必要があります。これにより、すべてのカバレッジデータが格納されるカバーデータベースを所有するプロセスが起動します。</target>
        </trans-unit>
        <trans-unit id="861333dda4065fae7a2362b848cb2eae4954e72b" translate="yes" xml:space="preserve">
          <source>First of all, build the OTP source tree at &lt;code&gt;$ERL_TOP&lt;/code&gt; containing the updated applications.</source>
          <target state="translated">まず、更新されたアプリケーションを含むOTPソースツリーを &lt;code&gt;$ERL_TOP&lt;/code&gt; に構築します。</target>
        </trans-unit>
        <trans-unit id="4b4b93091c06ea36f866735e533f26aea6d70eb1" translate="yes" xml:space="preserve">
          <source>First sends &lt;code&gt;hbuf&lt;/code&gt; (length in &lt;code&gt;hlen&lt;/code&gt;) data as a list, regardless of port settings. Then sends &lt;code&gt;buf&lt;/code&gt; as a binary or list. For example, if &lt;code&gt;hlen&lt;/code&gt; is &lt;code&gt;3&lt;/code&gt;, the port owner process receives &lt;code&gt;[H1, H2, H3 | T]&lt;/code&gt;.</source>
          <target state="translated">最初に、ポート設定に関係なく、 &lt;code&gt;hbuf&lt;/code&gt; （ &lt;code&gt;hlen&lt;/code&gt; の長さ）データをリストとして送信します。次に、 &lt;code&gt;buf&lt;/code&gt; をバイナリまたはリストとして送信します。たとえば、 &lt;code&gt;hlen&lt;/code&gt; が &lt;code&gt;3&lt;/code&gt; の場合、ポート所有者プロセスは &lt;code&gt;[H1, H2, H3 | T]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="141a9bf26500eaac1e5dea48990666897b26cc97" translate="yes" xml:space="preserve">
          <source>First the change to upper case:</source>
          <target state="translated">まずは大文字への変更。</target>
        </trans-unit>
        <trans-unit id="f21eef584755ba1c14df1d0573d5072695c88c77" translate="yes" xml:space="preserve">
          <source>First the loader will search for a specific operation where the types for all operands match the type for the generic instruction. The first matching instruction will be selected. &lt;strong&gt;beam_makeops&lt;/strong&gt; has ordered the specific instructions so that instructions with more specific operands comes before instructions with less specific operands. For example, &lt;code&gt;move_nx&lt;/code&gt; is more specific than &lt;code&gt;move_cx&lt;/code&gt;. If the first operand is &lt;code&gt;[]&lt;/code&gt; (NIL), &lt;code&gt;move_nx&lt;/code&gt; will be selected.</source>
          <target state="translated">最初に、ローダーは、すべてのオペランドの型が汎用命令の型と一致する特定の操作を検索します。最初に一致する命令が選択されます。&lt;strong&gt;Beam_makeops&lt;/strong&gt;は特定の命令を順序付けて、より具体的なオペランドを持つ命令が、より具体的でないオペランドを持つ命令の前に来るようにしました。たとえば、 &lt;code&gt;move_nx&lt;/code&gt; はmove_cxよりも具体的 &lt;code&gt;move_cx&lt;/code&gt; 。最初のオペランドが &lt;code&gt;[]&lt;/code&gt; （NIL）の場合、 &lt;code&gt;move_nx&lt;/code&gt; が選択されます。</target>
        </trans-unit>
        <trans-unit id="8a389b5b9353f0d1ba4fa2c4821e059a8293230b" translate="yes" xml:space="preserve">
          <source>First the old event handler &lt;code&gt;Handler1&lt;/code&gt; is deleted. The event manager calls &lt;code&gt;Module1:terminate(Args1, ...)&lt;/code&gt;, where &lt;code&gt;Module1&lt;/code&gt; is the callback module of &lt;code&gt;Handler1&lt;/code&gt;, and collects the return value.</source>
          <target state="translated">最初に、古いイベントハンドラー &lt;code&gt;Handler1&lt;/code&gt; が削除されます。イベントマネージャーは &lt;code&gt;Module1:terminate(Args1, ...)&lt;/code&gt; 呼び出します。ここで、 &lt;code&gt;Module1&lt;/code&gt; は &lt;code&gt;Handler1&lt;/code&gt; のコールバックモジュールであり、戻り値を収集します。</target>
        </trans-unit>
        <trans-unit id="d56c44fe867ba3185b946a40d9d145cb133363c4" translate="yes" xml:space="preserve">
          <source>First the record definitions are entered into a text file named &lt;code&gt;company.hrl&lt;/code&gt;. This file defines the following structure for the example database:</source>
          <target state="translated">最初に、レコード定義が &lt;code&gt;company.hrl&lt;/code&gt; という名前のテキストファイルに入力されます。このファイルは、サンプルデータベースの次の構造を定義します。</target>
        </trans-unit>
        <trans-unit id="bd8fdf9739d448b9e4a4bb984f8a7a6a8b775ff5" translate="yes" xml:space="preserve">
          <source>First the server at messenger@super is started up:</source>
          <target state="translated">まず、messenger@superのサーバを立ち上げます。</target>
        </trans-unit>
        <trans-unit id="3cb50aeec91cc6daf6404f50ef9e869344d8d4ed" translate="yes" xml:space="preserve">
          <source>First this tries to match &lt;code&gt;&quot;ABC&quot;&lt;/code&gt;, and then &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt;, but if &lt;code&gt;&quot;NNN&quot;&lt;/code&gt; appears, the function returns &lt;code&gt;{error,{nnn,[&quot;NNN&quot;]}}&lt;/code&gt;. If both &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; and &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; are matched, the function returns &lt;code&gt;{ok,[AbcMatch,XyzMatch]}&lt;/code&gt;.</source>
          <target state="translated">まず、これは &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; と一致し、次に &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; と一致しようとしますが、 &lt;code&gt;&quot;NNN&quot;&lt;/code&gt; が表示された場合、関数は &lt;code&gt;{error,{nnn,[&quot;NNN&quot;]}}&lt;/code&gt; 返します。両方の場合 &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; と &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; が一致している、関数戻り &lt;code&gt;{ok,[AbcMatch,XyzMatch]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fecc0f3a53c948327dcd86cdc522369d246c863d" translate="yes" xml:space="preserve">
          <source>First trans id.</source>
          <target state="translated">最初のトランジットID。</target>
        </trans-unit>
        <trans-unit id="6148327bc522a99e9e81c9d9c482ed47a643282f" translate="yes" xml:space="preserve">
          <source>First, &lt;strong&gt;unpack&lt;/strong&gt; the release package. The files are then extracted from the package:</source>
          <target state="translated">まず、リリースパッケージを&lt;strong&gt;解凍&lt;/strong&gt;します。次に、ファイルがパッケージから抽出されます。</target>
        </trans-unit>
        <trans-unit id="d4d8885fd1f162016ec24f4f3b28478090292099" translate="yes" xml:space="preserve">
          <source>First, set the log level of the default handler to &lt;code&gt;notice&lt;/code&gt;, preventing it from printing info events to the terminal:</source>
          <target state="translated">まず、デフォルトのハンドラーのログレベルを &lt;code&gt;notice&lt;/code&gt; に設定し、ターミナルに情報イベントを出力しないようにします。</target>
        </trans-unit>
        <trans-unit id="503ca6da48d6707739639f1a65005382e4c2b0a8" translate="yes" xml:space="preserve">
          <source>First, some definitions:</source>
          <target state="translated">まず、いくつかの定義。</target>
        </trans-unit>
        <trans-unit id="b0a517e7bf384937ceea909a0d45bba4d04794e7" translate="yes" xml:space="preserve">
          <source>First, some words about the xmerl_xs functionality:</source>
          <target state="translated">まず、xmerl_xs の機能について説明します。</target>
        </trans-unit>
        <trans-unit id="42831f5a040975e85f0f5211423cb45e8ffb2b36" translate="yes" xml:space="preserve">
          <source>First, the SASL application parameters are checked, then the command-line flags are checked, and finally, the default value is chosen.</source>
          <target state="translated">まず、SASLアプリケーションのパラメータをチェックし、次にコマンドラインフラグをチェックし、最後にデフォルト値を選択します。</target>
        </trans-unit>
        <trans-unit id="4a287715fbf002065bfda77e14f8669a4fd048f6" translate="yes" xml:space="preserve">
          <source>First, the input value is compared to &lt;code&gt;one&lt;/code&gt;, &lt;code&gt;two&lt;/code&gt;, and &lt;code&gt;three&lt;/code&gt; (using a single instruction that does a binary search; thus, quite efficient even if there are many values) to select which one of the first three clauses to execute (if any).</source>
          <target state="translated">最初に、入力値を &lt;code&gt;one&lt;/code&gt; 、 &lt;code&gt;two&lt;/code&gt; 、および &lt;code&gt;three&lt;/code&gt; と比較して（バイナリ検索を実行する単一の命令を使用します。したがって、値が多い場合でも非常に効率的です）、最初の3つの句のどれを実行するかを選択します（ある場合） ）。</target>
        </trans-unit>
        <trans-unit id="7ff27878c38088d37636212bb636643d1457c1d2" translate="yes" xml:space="preserve">
          <source>First, the intensity decides how big bursts of restarts you want to tolerate. For example, you might want to accept a burst of at most 5 or 10 attempts, even within the same second, if it results in a successful restart.</source>
          <target state="translated">最初に、強度は、どのくらいの大きさの再起動のバーストを許容するかを決定します。例えば、再起動に成功した場合は、同じ秒内であっても、せいぜい5回か10回のバーストを許容したいと思うかもしれません。</target>
        </trans-unit>
        <trans-unit id="d8e01cb6a003e1a4db093f3279e204b488adfc1f" translate="yes" xml:space="preserve">
          <source>First, the memory use by the loaded code is summarized:</source>
          <target state="translated">まず、ロードされたコードによるメモリ使用量をまとめます。</target>
        </trans-unit>
        <trans-unit id="86c3e1dfade8ce19bfbe0cda85f888b0c62d94ac" translate="yes" xml:space="preserve">
          <source>First, the new version of the callback module must be loaded, both in the case of upgrade and downgrade. Then the new return value of &lt;code&gt;init/1&lt;/code&gt; can be checked and the internal state be changed accordingly.</source>
          <target state="translated">まず、アップグレードとダウングレードの両方で、コールバックモジュールの新しいバージョンをロードする必要があります。次に、 &lt;code&gt;init/1&lt;/code&gt; の新しい戻り値を確認し、それに応じて内部状態を変更できます。</target>
        </trans-unit>
        <trans-unit id="a50fffaf6770426a16f1a3b60dc7b70d4a1d37aa" translate="yes" xml:space="preserve">
          <source>First, the protocol must be available to the Erlang machine, which involves writing an Erlang driver. A port program cannot be used, an Erlang driver is required. Erlang drivers can be:</source>
          <target state="translated">まず、Erlangマシンでプロトコルが使えるようにしなければなりません。ポートプログラムは使えません。Erlangドライバは以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="fab4db4145634905a6bbc1d724fc7f3ed2c38181" translate="yes" xml:space="preserve">
          <source>First, we examine the reply function:</source>
          <target state="translated">まず、返信機能を調べてみます。</target>
        </trans-unit>
        <trans-unit id="988e19fa329fc64d4ed2be313e7df9b9e217c2e2" translate="yes" xml:space="preserve">
          <source>Firstly, its possible to effect the global default value when building OTP from source with the two configure options:</source>
          <target state="translated">まず、2つのconfigureオプションで、ソースからOTPを構築する際のグローバルなデフォルト値を変更することができます。</target>
        </trans-unit>
        <trans-unit id="2a0abaf6efbc66dd086221ffc93e7f7f7b2e0566" translate="yes" xml:space="preserve">
          <source>Fixed Balancing Information</source>
          <target state="translated">固定バランシング情報</target>
        </trans-unit>
        <trans-unit id="084f54fd1bbfb321fb1dcfaff2b90a8b2b81d485" translate="yes" xml:space="preserve">
          <source>Fixed Path MTU, if automatic discovery is disabled (see &lt;code&gt;flags&lt;/code&gt; below)</source>
          <target state="translated">自動検出が無効になっている場合の固定パスMTU（以下の &lt;code&gt;flags&lt;/code&gt; 参照）</target>
        </trans-unit>
        <trans-unit id="97e7e19e341587c271357db5bf33234c3e376e99" translate="yes" xml:space="preserve">
          <source>Fixes a table of type &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt;, or &lt;code&gt;duplicate_bag&lt;/code&gt; for &lt;code&gt;&lt;a href=&quot;#traversal&quot;&gt; safe traversal&lt;/a&gt;&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#match_object-3&quot;&gt;match_object/3&lt;/a&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; ＆ &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; ＆ &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#match_object-3&quot;&gt;match_object/3&lt;/a&gt;&lt;/code&gt; ＆ &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; ＆ &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;#traversal&quot;&gt; safe traversal&lt;/a&gt;&lt;/code&gt; 、タイプ &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;bag&lt;/code&gt; 、または &lt;code&gt;duplicate_bag&lt;/code&gt; のテーブルを修正します。</target>
        </trans-unit>
        <trans-unit id="c84c1d136fc5d3a44eaf58de39dd9228d45a89aa" translate="yes" xml:space="preserve">
          <source>Fixes a table of type &lt;code&gt;set&lt;/code&gt;, &lt;code&gt;bag&lt;/code&gt;, or &lt;code&gt;duplicate_bag&lt;/code&gt; for safe traversal.</source>
          <target state="translated">安全なトラバーサルのために、タイプ &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;bag&lt;/code&gt; 、または &lt;code&gt;duplicate_bag&lt;/code&gt; のテーブルを修正します。</target>
        </trans-unit>
        <trans-unit id="5b7664cd64d460ab893bbddb8f00633c580bc908" translate="yes" xml:space="preserve">
          <source>Fixes the array size. This prevents it from growing automatically upon insertion.</source>
          <target state="translated">配列のサイズを修正します。これにより、挿入時に自動的に大きくなるのを防ぎます。</target>
        </trans-unit>
        <trans-unit id="4723c5aa925950e4bd36f4c54f3676d51e62a045" translate="yes" xml:space="preserve">
          <source>Flag &lt;code&gt;-extra&lt;/code&gt; is treated in a special way. Its scope ends at the end of the environment variable content. Arguments following an &lt;code&gt;-extra&lt;/code&gt; flag are moved on the command line into section &lt;code&gt;-extra&lt;/code&gt;, that is, the end of the command line following an &lt;code&gt;-extra&lt;/code&gt; flag.</source>
          <target state="translated">フラグ &lt;code&gt;-extra&lt;/code&gt; は特別な方法で処理されます。そのスコープは、環境変数コンテンツの最後で終わります。 &lt;code&gt;-extra&lt;/code&gt; フラグに続く引数は、コマンドラインでセクション &lt;code&gt;-extra&lt;/code&gt; に移動されます。つまり、 &lt;code&gt;-extra&lt;/code&gt; フラグに続くコマンドラインの終わりです。</target>
        </trans-unit>
        <trans-unit id="8bb67231cdcf22509e8ef18194400f272b044e65" translate="yes" xml:space="preserve">
          <source>Flag for automated use of option &lt;code&gt;tsize&lt;/code&gt;. With this set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;write_file/3&lt;/code&gt; client determines the filesize and sends it to the server as the standardized &lt;code&gt;tsize&lt;/code&gt; option. A &lt;code&gt;read_file/3&lt;/code&gt; client acquires only a filesize from the server by sending a zero &lt;code&gt;tsize&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;tsize&lt;/code&gt; の自動使用のフラグ。これを &lt;code&gt;true&lt;/code&gt; に設定すると、 &lt;code&gt;write_file/3&lt;/code&gt; クライアントはファイルサイズを決定し、それを標準化された &lt;code&gt;tsize&lt;/code&gt; オプションとしてサーバーに送信します。 &lt;code&gt;read_file/3&lt;/code&gt; クライアントは、ゼロ送信することで、サーバからのみのファイルサイズを取得 &lt;code&gt;tsize&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6b981ac7080263b949f2d1d82a6d792d6762d1b" translate="yes" xml:space="preserve">
          <source>Flag that tells the parser if it's parsing a DTD or a normal XML file (default normal).</source>
          <target state="translated">パーサがDTDを解析しているのか、通常のXMLファイルを解析しているのかを示すフラグ(デフォルトはnormal)。</target>
        </trans-unit>
        <trans-unit id="c9750765e0d3534c79392974771889da2e9473d6" translate="yes" xml:space="preserve">
          <source>Flags for Configuration of Allocators Based on alloc_util</source>
          <target state="translated">alloc_utilに基づくアロケータ設定用のフラグ</target>
        </trans-unit>
        <trans-unit id="ccac28851cae372d71b8bd937c9e6d7be6dbaf14" translate="yes" xml:space="preserve">
          <source>Flags for Configuration of alloc_util</source>
          <target state="translated">alloc_utilの設定に関するフラグ</target>
        </trans-unit>
        <trans-unit id="e685c10161bcfb5d845592e4b8eb689e72310259" translate="yes" xml:space="preserve">
          <source>Flags for Configuration of mseg_alloc</source>
          <target state="translated">mseg_alloc の設定用フラグ</target>
        </trans-unit>
        <trans-unit id="7485fda0d817c22340066397dc18fad274d1664b" translate="yes" xml:space="preserve">
          <source>Flags for Configuration of sys_alloc</source>
          <target state="translated">sys_allocの設定用フラグ</target>
        </trans-unit>
        <trans-unit id="87bc90787a67d058c8dfdbb4a960d1f06bf39392" translate="yes" xml:space="preserve">
          <source>Flags informing &lt;code&gt;ei&lt;/code&gt; about the behaviour of the callbacks. Flags should be bitwise or:ed together. If no flag, is set, the &lt;code&gt;flags&lt;/code&gt; field should contain &lt;code&gt;0&lt;/code&gt;. Currently, supported flags:</source>
          <target state="translated">コールバックの動作について &lt;code&gt;ei&lt;/code&gt; に通知するフラグ。フラグはビット単位であるか、一緒に使用する必要があります。フラグが設定されていない場合、 &lt;code&gt;flags&lt;/code&gt; フィールドには &lt;code&gt;0&lt;/code&gt; が含まれている必要があります。現在サポートされているフラグ：</target>
        </trans-unit>
        <trans-unit id="8cfa9cba16ee68a710d88bffe41a906865ddeda5" translate="yes" xml:space="preserve">
          <source>Flattens sublists of a &lt;code&gt;form_list&lt;/code&gt; node. Returns &lt;code&gt;Node&lt;/code&gt; with all subtrees of type &lt;code&gt;form_list&lt;/code&gt; recursively expanded, yielding a single &quot;flat&quot; abstract form sequence.</source>
          <target state="translated">form_list ノードのサブリストを &lt;code&gt;form_list&lt;/code&gt; ます。 &lt;code&gt;form_list&lt;/code&gt; タイプのすべてのサブツリーが再帰的に展開された &lt;code&gt;Node&lt;/code&gt; を返し、単一の「フラットな」抽象フォームシーケンスを生成します。</target>
        </trans-unit>
        <trans-unit id="64435fd82de7b1d614dfb9844848a48b14c6cd2c" translate="yes" xml:space="preserve">
          <source>Float</source>
          <target state="translated">Float</target>
        </trans-unit>
        <trans-unit id="e2380e9350a55e73133dd09a91562598b49e3cc4" translate="yes" xml:space="preserve">
          <source>Floating point division</source>
          <target state="translated">浮動小数点除算</target>
        </trans-unit>
        <trans-unit id="39e68b24ba47a1f890e127374f7a602849382003" translate="yes" xml:space="preserve">
          <source>Floats are encoded using a textual representation. This option is useful to ensure that releases before Erlang/OTP R11B-4 can decode resulting binary.</source>
          <target state="translated">フロートはテキスト表現を使ってエンコードされます。このオプションはErlang/OTP R11B-4より前のリリースがバイナリをデコードできるようにするのに便利です。</target>
        </trans-unit>
        <trans-unit id="d7143a2aecb8a362aec30776acebfb355af8b829" translate="yes" xml:space="preserve">
          <source>Flushes any messages sent to the shell.</source>
          <target state="translated">シェルに送信されたメッセージをすべてフラッシュします。</target>
        </trans-unit>
        <trans-unit id="3ed10d6d5a038506e68924d5de19ea0282539638" translate="yes" xml:space="preserve">
          <source>Folds &lt;code&gt;Function&lt;/code&gt; over every element in &lt;code&gt;Ordset&lt;/code&gt; and returns the final value of the accumulator.</source>
          <target state="translated">折りたため &lt;code&gt;Function&lt;/code&gt; 内のすべての要素の上に &lt;code&gt;Ordset&lt;/code&gt; とアキュムレータの最終値を返します。</target>
        </trans-unit>
        <trans-unit id="20c0775347187363f923b7082f0701f0300ea32f" translate="yes" xml:space="preserve">
          <source>Folds &lt;code&gt;Function&lt;/code&gt; over every element in &lt;code&gt;Set&lt;/code&gt; and returns the final value of the accumulator. The evaluation order is undefined.</source>
          <target state="translated">&lt;code&gt;Set&lt;/code&gt; のすべての要素に対して &lt;code&gt;Function&lt;/code&gt; を折りたたみ、アキュムレータの最終値を返します。評価順序は未定義です。</target>
        </trans-unit>
        <trans-unit id="a46a6a662e70242e55f3b9c440feabea707c5062" translate="yes" xml:space="preserve">
          <source>Folds &lt;code&gt;Function&lt;/code&gt; over every element in &lt;code&gt;Set&lt;/code&gt; returning the final value of the accumulator.</source>
          <target state="translated">アキュムレータの最終値を返す &lt;code&gt;Set&lt;/code&gt; のすべての要素に &lt;code&gt;Function&lt;/code&gt; を折りたたみます。</target>
        </trans-unit>
        <trans-unit id="e17bd1d344dbb01f9f7fe9bf4a614876c7ef609d" translate="yes" xml:space="preserve">
          <source>Folds a function over all nodes of a syntax tree. The result is the value of &lt;code&gt;Function(X1, Function(X2, ... Function(Xn, Start) ... ))&lt;/code&gt;, where &lt;code&gt;[X1, X2, ..., Xn]&lt;/code&gt; are the nodes of &lt;code&gt;Tree&lt;/code&gt; in a post-order traversal.</source>
          <target state="translated">構文ツリーのすべてのノードで関数を折りたたみます。結果は、 &lt;code&gt;Function(X1, Function(X2, ... Function(Xn, Start) ... ))&lt;/code&gt; ここで、 &lt;code&gt;[X1, X2, ..., Xn]&lt;/code&gt; は、ポストの &lt;code&gt;Tree&lt;/code&gt; のノードです注文トラバーサル。</target>
        </trans-unit>
        <trans-unit id="ad489c38588e0d153289af6e63ad4c531441d39a" translate="yes" xml:space="preserve">
          <source>Folds a function over the immediate subtrees of a syntax tree. This is similar to &lt;code&gt;fold/3&lt;/code&gt;, but only on the immediate subtrees of &lt;code&gt;Tree&lt;/code&gt;, in left-to-right order; it does not include the root node of &lt;code&gt;Tree&lt;/code&gt;.</source>
          <target state="translated">構文ツリーの直接のサブツリーに関数を折りたたみます。これは &lt;code&gt;fold/3&lt;/code&gt; に似ていますが、 &lt;code&gt;Tree&lt;/code&gt; の直接のサブツリーでのみ、左から右の順序です。 &lt;code&gt;Tree&lt;/code&gt; のルートノードは含まれません。</target>
        </trans-unit>
        <trans-unit id="cde10e635a7c26a100b0cc5c7b436c521f45b4be" translate="yes" xml:space="preserve">
          <source>Folds function &lt;code&gt;Fun&lt;/code&gt; over all (regular) files &lt;code&gt;F&lt;/code&gt; in directory &lt;code&gt;Dir&lt;/code&gt; that match the regular expression &lt;code&gt;RegExp&lt;/code&gt; (for a description of the allowed regular expressions, see the &lt;code&gt;&lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;&lt;/code&gt; module). If &lt;code&gt;Recursive&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, all subdirectories to &lt;code&gt;Dir&lt;/code&gt; are processed. The regular expression matching is only done on the filename without the directory part.</source>
          <target state="translated">フォールド関数正規表現 &lt;code&gt;RegExp&lt;/code&gt; と一致するディレクトリ &lt;code&gt;Dir&lt;/code&gt; 内のすべての（通常の）ファイル &lt;code&gt;F&lt;/code&gt; に対して &lt;code&gt;Fun&lt;/code&gt; （許可される正規表現の説明については、 &lt;code&gt;&lt;a href=&quot;re&quot;&gt;re&lt;/a&gt;&lt;/code&gt; モジュールを参照してください）。場合は &lt;code&gt;Recursive&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、すべてのサブディレクトリに &lt;code&gt;Dir&lt;/code&gt; 処理されます。正規表現のマッチングは、ディレクトリ部分なしのファイル名でのみ行われます。</target>
        </trans-unit>
        <trans-unit id="34696df76dcd0e6f0e38f48e35529e37dc89aea7" translate="yes" xml:space="preserve">
          <source>Folds the array elements right-to-left using the specified function and initial accumulator value, skipping default-valued entries. The elements are visited in order from the highest index to the lowest. If &lt;code&gt;Function&lt;/code&gt; is not a function, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">指定された関数と初期アキュムレータ値を使用して配列要素を右から左に折りたたみ、デフォルト値のエントリをスキップします。要素は、最高のインデックスから最低のインデックスの順にアクセスされます。 &lt;code&gt;Function&lt;/code&gt; が関数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="b922e4cb2297e1f48705b6c3d30e948f3f25da73" translate="yes" xml:space="preserve">
          <source>Folds the array elements right-to-left using the specified function and initial accumulator value. The elements are visited in order from the highest index to the lowest. If &lt;code&gt;Function&lt;/code&gt; is not a function, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">指定された関数とアキュムレータの初期値を使用して、配列要素を右から左に折りたたみます。要素は、最高のインデックスから最低のインデックスの順にアクセスされます。 &lt;code&gt;Function&lt;/code&gt; が関数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="d90bd6b0bf08b4953d9563c756b81c25d2b3ac0c" translate="yes" xml:space="preserve">
          <source>Folds the array elements using the specified function and initial accumulator value, skipping default-valued entries. The elements are visited in order from the lowest index to the highest. If &lt;code&gt;Function&lt;/code&gt; is not a function, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">指定された関数と初期アキュムレータ値を使用して配列要素を折りたたみ、デフォルト値のエントリをスキップします。要素は、最低のインデックスから最高のインデックスの順に訪問されます。 &lt;code&gt;Function&lt;/code&gt; が関数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="51a05de854f0e5d68fa02c6d17b5224e9c4fa04b" translate="yes" xml:space="preserve">
          <source>Folds the array elements using the specified function and initial accumulator value. The elements are visited in order from the lowest index to the highest. If &lt;code&gt;Function&lt;/code&gt; is not a function, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">指定された関数と初期アキュムレータ値を使用して配列要素を折りたたみます。要素は、最低のインデックスから最高のインデックスの順に訪問されます。 &lt;code&gt;Function&lt;/code&gt; が関数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="3bf150bdf605ce53c5f7fd57e5849ed193bca889" translate="yes" xml:space="preserve">
          <source>Followed by &lt;code&gt;ArgList&lt;/code&gt;.</source>
          <target state="translated">続く &lt;code&gt;ArgList&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7717c6070633700f06c185a14309920e6572a716" translate="yes" xml:space="preserve">
          <source>Followed by &lt;code&gt;Message&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; 続きます。</target>
        </trans-unit>
        <trans-unit id="0d5603edfeddb92dfa432e8abb290956b8e40e64" translate="yes" xml:space="preserve">
          <source>Followed by &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; 続きます。</target>
        </trans-unit>
        <trans-unit id="f73f4fc37da57263ddf39b7d23e1e53168eaa0a0" translate="yes" xml:space="preserve">
          <source>Following a &lt;code&gt;next&lt;/code&gt; or a &lt;code&gt;prev&lt;/code&gt; pointer will take you to either an element in the pool, or an element that used to be in the pool.</source>
          <target state="translated">&lt;code&gt;next&lt;/code&gt; または &lt;code&gt;prev&lt;/code&gt; ポインターをたどると、プール内の要素、またはプール内にあった要素のいずれかに移動します。</target>
        </trans-unit>
        <trans-unit id="4bf9bb4d4e4c3ef83760e69ac50d25c92575e18f" translate="yes" xml:space="preserve">
          <source>Following the prefix, one or more &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; characters may be used to indicate &quot;lifting&quot; of the variable one or more levels, and after that, a &lt;code&gt;@&lt;/code&gt; or &lt;code&gt;9&lt;/code&gt; character indicates a glob metavariable (matching zero or more elements in a sequence) rather than a normal metavariable. For example:</source>
          <target state="translated">接頭辞に続いて、1つ以上の &lt;code&gt;_&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; 文字を使用して、変数の1つ以上のレベルの「リフティング」を示し、その後、 &lt;code&gt;@&lt;/code&gt; または &lt;code&gt;9&lt;/code&gt; 文字は、グロブメタ変数を示します（シーケンス内の0個以上の要素に一致します）。通常のメタ変数ではありません。例えば：</target>
        </trans-unit>
        <trans-unit id="f3f8e8335463ed8ea44053ca41a68cc219c83dee" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;'receive'&lt;/code&gt;, the matching is done on the list &lt;code&gt;[Node, Sender, Msg]&lt;/code&gt;. &lt;code&gt;Node&lt;/code&gt; is the node name of the sender. &lt;code&gt;Sender&lt;/code&gt; is the process or port identity of the sender, or the atom &lt;code&gt;undefined&lt;/code&gt; if the sender is not known (which may be the case for remote senders). &lt;code&gt;Msg&lt;/code&gt; is the message term. The pid of the receiving process can be accessed with the guard function &lt;code&gt;self/0&lt;/code&gt;.</source>
          <target state="translated">ために &lt;code&gt;'receive'&lt;/code&gt; 、マッチングリストで行われる &lt;code&gt;[Node, Sender, Msg]&lt;/code&gt; 。 &lt;code&gt;Node&lt;/code&gt; は送信者のノード名です。 &lt;code&gt;Sender&lt;/code&gt; は送信者のプロセスまたはポートIDであるか、送信者が &lt;code&gt;undefined&lt;/code&gt; 場合はアトムが定義されていません（リモート送信者の場合）。 &lt;code&gt;Msg&lt;/code&gt; はメッセージ用語です。受信プロセスのPIDには、ガード関数 &lt;code&gt;self/0&lt;/code&gt; を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="480e0922ee88128ee86738ef7261d590a0e8c190" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;SSL&lt;/code&gt; configuration options, see &lt;code&gt;ssl:listen/2&lt;/code&gt;.</source>
          <target state="translated">以下のために &lt;code&gt;SSL&lt;/code&gt; の設定オプションを参照してください &lt;code&gt;ssl:listen/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="837fe05b580800e8ef9f8355486b9e94f3908a70" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;SnmpInfo&lt;/code&gt; see handle_agent below.</source>
          <target state="translated">&lt;code&gt;SnmpInfo&lt;/code&gt; 以下handle_agentを参照してください。</target>
        </trans-unit>
        <trans-unit id="f4a8a5b7d1966b785796d897b3021817bd10b658" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;SnmpInfo&lt;/code&gt;, see the user callback function &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_report&quot;&gt;handle_report&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SnmpInfo&lt;/code&gt; 、ユーザーのコールバック関数参照 &lt;code&gt;&lt;a href=&quot;snmpm_user#handle_report&quot;&gt;handle_report&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="d9b7b01d3061c729af0c86684d89c756c7e6ae2c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;Timeout &amp;lt; infinity&lt;/code&gt;, to avoid getting a late reply in the caller's inbox if the caller should catch exceptions, this function spawns a proxy process that does the call. A late reply gets delivered to the dead proxy process, hence gets discarded. This is less efficient than using &lt;code&gt;Timeout == infinity&lt;/code&gt;.</source>
          <target state="translated">以下のために &lt;code&gt;Timeout &amp;lt; infinity&lt;/code&gt; 呼び出し側は例外をキャッチする必要がある場合、呼び出し側の受信トレイに返事が遅れを避けるために、この関数は、呼び出しを行うプロキシプロセスを生成します。遅延した応答はデッドプロキシプロセスに配信されるため、破棄されます。これは &lt;code&gt;Timeout == infinity&lt;/code&gt; を使用するよりも効率的ではありません。</target>
        </trans-unit>
        <trans-unit id="306f3a31becdaed0dfb6a27e1f9d860d62d24346" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;binary&lt;/code&gt; and &lt;code&gt;bitstring&lt;/code&gt; it is the whole binary or bit string.</source>
          <target state="translated">以下のため &lt;code&gt;binary&lt;/code&gt; と &lt;code&gt;bitstring&lt;/code&gt; 、それは全体のバイナリまたはビット列です。</target>
        </trans-unit>
        <trans-unit id="f82a5da13eae2b8a78771b0a37cc29126e2e31b6" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;caseless&lt;/code&gt;</source>
          <target state="translated">用 &lt;code&gt;caseless&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="dc2e192562eb900cd97c5a52ea052b56056e9430" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that 14 lines in the module are covered but one line is not covered.</source>
          <target state="translated">ための &lt;code&gt;channel&lt;/code&gt; 、結果ショーは、モジュール内の14行がカバーされていることが、1本のラインがカバーされていません。</target>
        </trans-unit>
        <trans-unit id="dbc8cd875be8ee9c431a057031268a3639090cfb" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that &lt;code&gt;handle_call/3&lt;/code&gt; is the most called function in the module (three calls). All other functions have been called once.</source>
          <target state="translated">用 &lt;code&gt;channel&lt;/code&gt; ことを、結果は示し &lt;code&gt;handle_call/3&lt;/code&gt; モジュール（3つの呼び出し）で最も呼び出される関数です。他のすべての関数は一度呼び出されました。</target>
        </trans-unit>
        <trans-unit id="5f4a448021f5730dc183eb8b38c78c9aa300e542" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that a total of twelve calls have been made to functions in the module.</source>
          <target state="translated">用 &lt;code&gt;channel&lt;/code&gt; 、12回のコールの合計は、モジュール内の関数に対して行われた結果を示します。</target>
        </trans-unit>
        <trans-unit id="ce8291600cfdb667a10bccca5cf4199590245e5c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that all clauses have been called once, except the second clause of &lt;code&gt;channel:alloc/1&lt;/code&gt; which has not been called at all.</source>
          <target state="translated">以下のための &lt;code&gt;channel&lt;/code&gt; すべての句は、第二句を除いて、一度呼ばれていることを、結果はショー &lt;code&gt;channel:alloc/1&lt;/code&gt; すべてで呼び出されていませんでした。</target>
        </trans-unit>
        <trans-unit id="1879b3d60244127e7246bb041953aa192aca26a7" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that all lines have been executed once, except line number 49 which has not been executed at all.</source>
          <target state="translated">以下のための &lt;code&gt;channel&lt;/code&gt; すべての行がすべてで実行されていない行番号49を除いて、一度に実行されていることを、結果は示しています。</target>
        </trans-unit>
        <trans-unit id="913adfb90cda7f161150b60d01fdf3e90d19a7f9" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that the uncovered line is in the function &lt;code&gt;channel:alloc/1&lt;/code&gt;.</source>
          <target state="translated">以下のための &lt;code&gt;channel&lt;/code&gt; 覆われていない行が関数であることを、結果が示す &lt;code&gt;channel:alloc/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="78d03f5adfa666b78c6cac3170efcb9783caa47f" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that the uncovered line is in the second clause of &lt;code&gt;channel:alloc/1&lt;/code&gt;.</source>
          <target state="translated">以下のための &lt;code&gt;channel&lt;/code&gt; 覆われていないラインが第二句であることを、結果は示し &lt;code&gt;channel:alloc/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2a4c9aacb30b85ffa3c2fc8dbe58b3d6d3491b4b" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;channel&lt;/code&gt;, the result shows that the uncovered line is line number 49.</source>
          <target state="translated">以下のための &lt;code&gt;channel&lt;/code&gt; 覆われていない行は、行番号49であることを、結果は示しています。</target>
        </trans-unit>
        <trans-unit id="a66b71488233e32be079939e87c3d32f05d964a2" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;cmac&lt;/code&gt; it is a cipher suitable for cmac, see &lt;code&gt;&lt;a href=&quot;algorithm_details#cmac&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">以下のために &lt;code&gt;cmac&lt;/code&gt; それは見、CMACに適した暗号である &lt;code&gt;&lt;a href=&quot;algorithm_details#cmac&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; ユーザーズガイドで。</target>
        </trans-unit>
        <trans-unit id="76d856ada4f3988937024e7694b319689a98ffe4" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;dotall&lt;/code&gt;</source>
          <target state="translated">以下のための &lt;code&gt;dotall&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="aa4dcc97e3756da63f2e21365ec4fc6f05eca132" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;erl -man &amp;lt;page&amp;gt;&lt;/code&gt; to work the Unix manual pages have to be installed in the same way, i.e.</source>
          <target state="translated">&lt;code&gt;erl -man &amp;lt;page&amp;gt;&lt;/code&gt; Unixのマニュアルページは、すなわち、同じ方法でインストールする必要が動作するように</target>
        </trans-unit>
        <trans-unit id="fec6b7769e6e2beeb499cd6dde436c5e206e86c6" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;extended&lt;/code&gt;</source>
          <target state="translated">以下のための &lt;code&gt;extended&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="d75563e57c449294a3a68bb646f816312c751d6b" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;file_logger&lt;/code&gt;, the file descriptor opened in &lt;code&gt;init&lt;/code&gt; must be closed:</source>
          <target state="translated">&lt;code&gt;file_logger&lt;/code&gt; 、で開いたファイルディスクリプタ &lt;code&gt;init&lt;/code&gt; は閉じている必要があります。</target>
        </trans-unit>
        <trans-unit id="4a3c22404b7331d34de67643c1087336d5e76b3a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;float&lt;/code&gt; it is 64.</source>
          <target state="translated">以下のために &lt;code&gt;float&lt;/code&gt; それは64です。</target>
        </trans-unit>
        <trans-unit id="a01e1be8a276994d6884e4946a051462746e6284" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;gen_statem&lt;/code&gt; the &lt;code&gt;Msg&lt;/code&gt; term is an &lt;code&gt;{EventType,EventContent}&lt;/code&gt; tuple.</source>
          <target state="translated">ため &lt;code&gt;gen_statem&lt;/code&gt; &lt;code&gt;Msg&lt;/code&gt; 用語である &lt;code&gt;{EventType,EventContent}&lt;/code&gt; タプル。</target>
        </trans-unit>
        <trans-unit id="b180e4e513d7f06b9413e20ddc2960a34c4e662d" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;hmac&lt;/code&gt; it is a hash algorithm, see &lt;code&gt;&lt;a href=&quot;algorithm_details#hmac&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">以下のために &lt;code&gt;hmac&lt;/code&gt; それはハッシュアルゴリズムで、参照 &lt;code&gt;&lt;a href=&quot;algorithm_details#hmac&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; ユーザーズガイドで。</target>
        </trans-unit>
        <trans-unit id="af73751b583ba9751b04c55bad09cc50964fde6c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;inet:ip4_address()&lt;/code&gt;, &lt;code&gt;inet:ip6_address()&lt;/code&gt; and &lt;code&gt;inet:port_number()&lt;/code&gt;, see also &lt;code&gt; inet:ip_address()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inet:ip4_address()&lt;/code&gt; 、 &lt;code&gt;inet:ip6_address()&lt;/code&gt; と &lt;code&gt;inet:port_number()&lt;/code&gt; も参照 &lt;code&gt; inet:ip_address()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a8bacf5c4fc87126ea054d4fac271c4015334896" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;inet:ip4_address()&lt;/code&gt;, &lt;code&gt;inet:ip6_address()&lt;/code&gt; and &lt;code&gt;inet:port_number()&lt;/code&gt;, see also &lt;code&gt;inet:ip_address()&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;inet:ip4_address()&lt;/code&gt; 、 &lt;code&gt;inet:ip6_address()&lt;/code&gt; と &lt;code&gt;inet:port_number()&lt;/code&gt; も参照 &lt;code&gt;inet:ip_address()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="7cae4b47e5a9f150f229a27bfbd0ea46a1d64770" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;integer&lt;/code&gt; it is 8.</source>
          <target state="translated">以下のために &lt;code&gt;integer&lt;/code&gt; は8です。</target>
        </trans-unit>
        <trans-unit id="e99a30917f5cd8c00509326c2075b011ce728d06" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;ip_comm&lt;/code&gt; configuration options, see &lt;code&gt;gen_tcp:listen/2&lt;/code&gt;, some options that are used internally by httpd can not be set.</source>
          <target state="translated">&lt;code&gt;ip_comm&lt;/code&gt; の設定オプションを参照してください &lt;code&gt;gen_tcp:listen/2&lt;/code&gt; 、httpdのが内部で使用されているいくつかのオプションが設定することはできません。</target>
        </trans-unit>
        <trans-unit id="b14a0d9f49866583abcf65e2354ff6ed5729dd7c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;ip_comm&lt;/code&gt; configuration options, see &lt;code&gt;gen_tcp:listen/2&lt;/code&gt;, some options that are used internally by httpd cannot be set.</source>
          <target state="translated">&lt;code&gt;ip_comm&lt;/code&gt; の設定オプションを参照してください &lt;code&gt;gen_tcp:listen/2&lt;/code&gt; 、httpdのが内部で使用されているいくつかのオプションが設定することはできません。</target>
        </trans-unit>
        <trans-unit id="6afeacaec668c7a523a45d6c1cae420e3d622d0b" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;multiline&lt;/code&gt;</source>
          <target state="translated">以下のための &lt;code&gt;multiline&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c6240b90fde4b9431d98d1ca191ed039b35525c" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;net_kernel&lt;/code&gt; to find out which distribution module to use, command-line argument &lt;code&gt;-proto_dist&lt;/code&gt; is used. It is followed by one or more distribution module names, with suffix &quot;_dist&quot; removed, that is, &lt;code&gt;uds_dist&lt;/code&gt; as a distribution module is specified as &lt;code&gt;-proto_dist uds&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; が使用する分配モジュールを見つけるために、コマンドライン引数の &lt;code&gt;-proto_dist&lt;/code&gt; が使用されています。それは、ある削除接尾辞「_dist」、と、一つ以上の分配モジュール名が続いている &lt;code&gt;uds_dist&lt;/code&gt; 分配モジュールとしては以下のように指定されている &lt;code&gt;-proto_dist uds&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71c597bf7b21f66ff26913f93a38296ce2c8406a" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;net_kernel&lt;/code&gt; to find out which distribution module to use, the &lt;code&gt;erl&lt;/code&gt; command-line argument &lt;code&gt;-proto_dist&lt;/code&gt; is used. It is followed by one or more distribution module names, with suffix &quot;_dist&quot; removed. That is, &lt;code&gt;gen_tcp_dist&lt;/code&gt; as a distribution module is specified as &lt;code&gt;-proto_dist gen_tcp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;net_kernel&lt;/code&gt; が使用する分配モジュールを見つけるために、 &lt;code&gt;erl&lt;/code&gt; コマンドライン引数 &lt;code&gt;-proto_dist&lt;/code&gt; が使用されています。その後に1つ以上の配布モジュール名が続き、接尾辞「_dist」は削除されています。すなわち、 &lt;code&gt;gen_tcp_dist&lt;/code&gt; 分配モジュールとしては次のように指定され &lt;code&gt;-proto_dist gen_tcp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db4059cc07cc64c072ec8d00b2a0d1d61f21b0a3" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;poly1305&lt;/code&gt; it should be set to &lt;code&gt;undefined&lt;/code&gt; or the &lt;code&gt;&lt;a href=&quot;#mac_init-2&quot;&gt;mac/2&lt;/a&gt;&lt;/code&gt; function could be used instead, see &lt;code&gt;&lt;a href=&quot;algorithm_details#poly1305&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">&lt;code&gt;poly1305&lt;/code&gt; それに設定する必要が &lt;code&gt;undefined&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#mac_init-2&quot;&gt;mac/2&lt;/a&gt;&lt;/code&gt; 関数が参照、代わりに使用することができ &lt;code&gt;&lt;a href=&quot;algorithm_details#poly1305&quot;&gt;Algorithm Details&lt;/a&gt;&lt;/code&gt; ユーザーズガイドに。</target>
        </trans-unit>
        <trans-unit id="b5285ec29bfa76f83a95e98a613af85b60f686d8" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;prompt_regexp()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;prompt_regexp()&lt;/code&gt; 、参照 &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="4d8c585b7d1c650c07d665bc708cc16f7916fdbb" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;send&lt;/code&gt;, the matching is done on the list &lt;code&gt;[Receiver, Msg]&lt;/code&gt;. &lt;code&gt;Receiver&lt;/code&gt; is the process or port identity of the receiver and &lt;code&gt;Msg&lt;/code&gt; is the message term. The pid of the sending process can be accessed with the guard function &lt;code&gt;self/0&lt;/code&gt;.</source>
          <target state="translated">以下のために &lt;code&gt;send&lt;/code&gt; 、マッチングはリスト上で行われている &lt;code&gt;[Receiver, Msg]&lt;/code&gt; 。 &lt;code&gt;Receiver&lt;/code&gt; はレシーバーのプロセスまたはポートIDであり、 &lt;code&gt;Msg&lt;/code&gt; はメッセージ用語です。送信プロセスのPIDには、ガード関数 &lt;code&gt;self/0&lt;/code&gt; を使用してアクセスできます。</target>
        </trans-unit>
        <trans-unit id="ca5d08722e51210d2a23bd9d3b80c38d65909424" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;target_name()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;. For &lt;code&gt;handle()&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_name()&lt;/code&gt; 、参照 &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; 。用 &lt;code&gt;handle()&lt;/code&gt; 、参照 &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="86690ad9d971e62c89ca7d8d10401a34891657e4" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;target_name()&lt;/code&gt;, see module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_name()&lt;/code&gt; 、モジュールを参照 &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d86b548e2b913c296d63565f1af70f0610098381" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;target_name&lt;/code&gt;, see module &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;target_name&lt;/code&gt; 、モジュール参照 &lt;code&gt;&lt;a href=&quot;ct&quot;&gt;ct&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="753fd166f9b141a235a4d48782b2f5f7cf3ebb2b" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;terminal_logger&lt;/code&gt;, no cleaning up is necessary:</source>
          <target state="translated">&lt;code&gt;terminal_logger&lt;/code&gt; 、何のクリーニングアップは必要ありません。</target>
        </trans-unit>
        <trans-unit id="20cefb4e36d1d738712b524c40516e4ba291b8fd" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;utf16&lt;/code&gt;, &lt;code&gt;Value&lt;/code&gt; is encoded in 2 or 4 bytes.</source>
          <target state="translated">ため &lt;code&gt;utf16&lt;/code&gt; 、 &lt;code&gt;Value&lt;/code&gt; 2または4バイトで符号化されます。</target>
        </trans-unit>
        <trans-unit id="c3352ad85305a4bfcb85b2ce08d70c1e2abea690" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;utf32&lt;/code&gt;, &lt;code&gt;Value&lt;/code&gt; is always be encoded in 4 bytes.</source>
          <target state="translated">ため &lt;code&gt;utf32&lt;/code&gt; 、 &lt;code&gt;Value&lt;/code&gt; 常に4バイトで符号化されます。</target>
        </trans-unit>
        <trans-unit id="d0c67167aaa7bb85f5b7dade38ab231c99564395" translate="yes" xml:space="preserve">
          <source>For &lt;code&gt;utf8&lt;/code&gt;, &lt;code&gt;Value&lt;/code&gt; is encoded in 1-4 bytes.</source>
          <target state="translated">ため &lt;code&gt;utf8&lt;/code&gt; 、 &lt;code&gt;Value&lt;/code&gt; 1-4バイトに符号化されます。</target>
        </trans-unit>
        <trans-unit id="2468fe8756bfdbd798388e4895d345f5618b8bce" translate="yes" xml:space="preserve">
          <source>For DER encoding, the compiler does not check the validity of the time values. The DER requirements upon those strings are regarded as a matter for the application to fulfill.</source>
          <target state="translated">DER エンコーディングでは、コンパイラは時間値の有効性をチェックしません。これらの文字列に対するDERの要求は、アプリケーションが満たすべき問題とみなされます。</target>
        </trans-unit>
        <trans-unit id="c7fd8ac886a14638875730be53a8a71b6b9ec449" translate="yes" xml:space="preserve">
          <source>For LTTng to work properly with Erlang/OTP you need the following packages installed:</source>
          <target state="translated">LTTngがErlang/OTPで正しく動作するためには以下のパッケージがインストールされている必要があります。</target>
        </trans-unit>
        <trans-unit id="a90cf45bc624d84de38bfa81d99a114cca1de885" translate="yes" xml:space="preserve">
          <source>For MSYS2 you use the same &lt;code&gt;C_DRV&lt;/code&gt; and PATH as for MSYS, only update the &lt;code&gt;MINGW_BIN&lt;/code&gt;:</source>
          <target state="translated">MSYS2の場合、MSYSと同じ &lt;code&gt;C_DRV&lt;/code&gt; およびPATH を使用します。MINGW_BINのみを更新し &lt;code&gt;MINGW_BIN&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8457be7233cc6e3c4c643ffac41d0673bc19eb73" translate="yes" xml:space="preserve">
          <source>For OpenSSL, see the &lt;code&gt;&lt;a href=&quot;http:www.openssl.org&quot;&gt;OpenSSL documentation&lt;/a&gt;&lt;/code&gt;. and find &lt;code&gt;EVP_CIPHER_CTX_set_padding()&lt;/code&gt; in cryptolib for your linked version.</source>
          <target state="translated">OpenSSLについては、 &lt;code&gt;&lt;a href=&quot;http:www.openssl.org&quot;&gt;OpenSSL documentation&lt;/a&gt;&lt;/code&gt; 参照してください。リンクされたバージョンのcryptolibで &lt;code&gt;EVP_CIPHER_CTX_set_padding()&lt;/code&gt; を見つけます。</target>
        </trans-unit>
        <trans-unit id="dc29f18b6d3940946b57d1e535a352d967073546" translate="yes" xml:space="preserve">
          <source>For Pre-Shared Key (PSK) cipher suites, the lookup fun is called by the client and server to determine the shared secret. When called by the client, &lt;code&gt;PSKIdentity&lt;/code&gt; is set to the hint presented by the server or to undefined. When called by the server, &lt;code&gt;PSKIdentity&lt;/code&gt; is the identity presented by the client.</source>
          <target state="translated">事前共有キー（PSK）暗号スイートの場合、共有秘密を決定するためにクライアントとサーバーによってlookup funが呼び出されます。クライアントから呼び出されると、 &lt;code&gt;PSKIdentity&lt;/code&gt; はサーバーから提示されたヒントまたは未定義に設定されます。サーバーから呼び出された場合、 &lt;code&gt;PSKIdentity&lt;/code&gt; はクライアントによって提示されたIDです。</target>
        </trans-unit>
        <trans-unit id="2062ec9baa35bcec6a05bc4e985f4412901c400a" translate="yes" xml:space="preserve">
          <source>For SSL/TLS to work, at least a public key and a certificate must be specified for the server side. In the following example, the PEM file &lt;code&gt;&quot;/home/me/ssl/erlserver.pem&quot;&lt;/code&gt; contains both the server certificate and its private key.</source>
          <target state="translated">SSL / TLSを機能させるには、サーバー側で少なくとも公開鍵と証明書を指定する必要があります。次の例では、PEMファイル &lt;code&gt;&quot;/home/me/ssl/erlserver.pem&quot;&lt;/code&gt; にサーバー証明書とその秘密鍵の両方が含まれています。</target>
        </trans-unit>
        <trans-unit id="eb7a87de5a408d6086ac689a25bcfcdb9b159107" translate="yes" xml:space="preserve">
          <source>For Secure Remote Password (SRP), the fun is only used by the server to obtain parameters that it uses to generate its session keys. &lt;code&gt;DerivedKey&lt;/code&gt; is to be derived according to &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2945#section-3&quot;&gt; RFC 2945&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5054#section-2.4&quot;&gt; RFC 5054&lt;/a&gt;&lt;/code&gt;: &lt;code&gt;crypto:sha([Salt, crypto:sha([Username, &amp;lt;&amp;lt;$:&amp;gt;&amp;gt;, Password])])&lt;/code&gt;</source>
          <target state="translated">Secure Remote Password（SRP）の場合、funはサーバーがセッションキーの生成に使用するパラメーターを取得するためにのみ使用されます。 &lt;code&gt;DerivedKey&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2945#section-3&quot;&gt; RFC 2945&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5054#section-2.4&quot;&gt; RFC 5054&lt;/a&gt;&lt;/code&gt; に従って導出されます： &lt;code&gt;crypto:sha([Salt, crypto:sha([Username, &amp;lt;&amp;lt;$:&amp;gt;&amp;gt;, Password])])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="f74fdc60e34c903bbdf61fd0573dc7b2726963cc" translate="yes" xml:space="preserve">
          <source>For Secure Remote Password (SRP), the fun is only used by the server to obtain parameters that it uses to generate its session keys. &lt;code&gt;DerivedKey&lt;/code&gt; is to be derived according to &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2945#section/3&quot;&gt; RFC 2945&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5054#section-2.4&quot;&gt; RFC 5054&lt;/a&gt;&lt;/code&gt;: &lt;code&gt;crypto:sha([Salt, crypto:sha([Username, &amp;lt;&amp;lt;$:&amp;gt;&amp;gt;, Password])])&lt;/code&gt;</source>
          <target state="translated">Secure Remote Password（SRP）の場合、funは、サーバーがセッションキーの生成に使用するパラメーターを取得するためにのみ使用されます。 &lt;code&gt;DerivedKey&lt;/code&gt; はに従って導出される &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc2945#section/3&quot;&gt; RFC 2945&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc5054#section-2.4&quot;&gt; RFC 5054&lt;/a&gt;&lt;/code&gt; ： &lt;code&gt;crypto:sha([Salt, crypto:sha([Username, &amp;lt;&amp;lt;$:&amp;gt;&amp;gt;, Password])])&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="a2df7f065d5ad35101fcfb7ca6fdf7bd0b7b240a" translate="yes" xml:space="preserve">
          <source>For Solaris running on VME boards from Force Computers, the onboard hardware watchdog can be activated, provided a VME bus driver is added to the operating system (see also Installation Problems).</source>
          <target state="translated">Force Computers社のVMEボード上で実行されているSolarisの場合、オペレーティングシステムにVMEバスドライバが追加されていれば、オンボードのハードウェアウォッチドッグを有効にすることができます (「インストール時の問題」も参照してください)。</target>
        </trans-unit>
        <trans-unit id="213b2715addaeb7d25bb265d702cd90b9f9da1cc" translate="yes" xml:space="preserve">
          <source>For TLS connections where client certificates are used this will be an ASN.1 DER-encoded X509-certificate as an Erlang binary. If client certificates are not used the value will be &lt;code&gt;no_peercert&lt;/code&gt;, and if TLS is not used (HTTP or connection is lost due to network failure) the value will be &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">クライアント証明書が使用されるTLS接続の場合、これはErlangバイナリーとしてのASN.1 DERエンコードX509証明書になります。クライアント証明書が使用されない場合、値は &lt;code&gt;no_peercert&lt;/code&gt; になり、TLSが使用されない場合（HTTPまたはネットワーク障害により接続が失われる）、値は &lt;code&gt;undefined&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e026f48848480c85f1428c672c1d36a4faab1b2c" translate="yes" xml:space="preserve">
          <source>For TLS to work, at least a public key and a certificate must be specified for the server side. In the following example, the PEM file &lt;code&gt;&quot;/home/me/ssl/erlserver.pem&quot;&lt;/code&gt; contains both the server certificate and its private key.</source>
          <target state="translated">TLSが機能するには、サーバー側で少なくとも公開鍵と証明書を指定する必要があります。次の例では、PEMファイル &lt;code&gt;&quot;/home/me/ssl/erlserver.pem&quot;&lt;/code&gt; にサーバー証明書とその秘密鍵の両方が含まれています。</target>
        </trans-unit>
        <trans-unit id="bddc5adbfd3e042b35af62e5a620cee5e83c4707" translate="yes" xml:space="preserve">
          <source>For UDP queries, resolver options &lt;code&gt;timeout&lt;/code&gt; and &lt;code&gt;retry&lt;/code&gt; control retransmission. Each name server in the &lt;code&gt;nameservers&lt;/code&gt; list is tried with a time-out of &lt;code&gt;timeout&lt;/code&gt;/&lt;code&gt;retry&lt;/code&gt;. Then all name servers are tried again, doubling the time-out, for a total of &lt;code&gt;retry&lt;/code&gt; times.</source>
          <target state="translated">UDPクエリの場合、リゾルバオプションが &lt;code&gt;timeout&lt;/code&gt; 、コントロールの再送信を &lt;code&gt;retry&lt;/code&gt; ます。 &lt;code&gt;nameservers&lt;/code&gt; リストの各ネームサーバーは、 &lt;code&gt;timeout&lt;/code&gt; / &lt;code&gt;retry&lt;/code&gt; のタイムアウトで試行されます。次に、すべてのネームサーバーが &lt;code&gt;retry&lt;/code&gt; され、タイムアウトが2倍になり、合計再試行回数になります。</target>
        </trans-unit>
        <trans-unit id="daa6b275bed633d91e59851dec0490f3f8639737" translate="yes" xml:space="preserve">
          <source>For Windows NT running on standard PCs with ISA and/or PCI bus, an extension card with a hardware watchdog can be installed.</source>
          <target state="translated">ISAやPCIバスを搭載した標準的なPCで動作するWindows NTには、ハードウェアウォッチドッグ付きの拡張カードをインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="bfa4ad80dc4dd7367f2ce6a7e23a488861cdfe40" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is a list of tuples, where each tuple corresponds to an event handler registered in the process and contains &lt;code&gt;{Module, Id, HandlerState}&lt;/code&gt;, as follows:</source>
          <target state="translated">ため &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; プロセス、 &lt;code&gt;State&lt;/code&gt; イベントハンドラに各タプル対応するプロセスに登録し、含まれていたタプルのリストである &lt;code&gt;{Module, Id, HandlerState}&lt;/code&gt; 次のように：</target>
        </trans-unit>
        <trans-unit id="68a3de7d09707f7530bf77047e594ba957594152" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the tuple &lt;code&gt;{Module, Id, HandlerState}&lt;/code&gt; as follows:</source>
          <target state="translated">ため &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; プロセス、 &lt;code&gt;State&lt;/code&gt; タプル &lt;code&gt;{Module, Id, HandlerState}&lt;/code&gt; 次のように</target>
        </trans-unit>
        <trans-unit id="1e11514fb1210ec8a13b39e187446d0f855cfe50" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the state of the callback module and &lt;code&gt;NewState&lt;/code&gt; is a new instance of that state.</source>
          <target state="translated">ため &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; のプロセス、 &lt;code&gt;State&lt;/code&gt; コールバックモジュールの状態であり、 &lt;code&gt;NewState&lt;/code&gt; には、その状態の新しいインスタンスです。</target>
        </trans-unit>
        <trans-unit id="ee667887f657795967b516568a5588f71ef7dbb1" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; process, the returned &lt;code&gt;State&lt;/code&gt; is the state of the callback module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;gen_server&quot;&gt;gen_server&lt;/a&gt;&lt;/code&gt; のプロセス、返された &lt;code&gt;State&lt;/code&gt; 、コールバックモジュールの状態です。</target>
        </trans-unit>
        <trans-unit id="ebf13c53f5ba819c65c1ef27ea673837724a64fe" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the tuple &lt;code&gt;{CurrentState,CurrentData}&lt;/code&gt;, and &lt;code&gt;NewState&lt;/code&gt; is a similar tuple, which can contain a new current state, new state data, or both.</source>
          <target state="translated">ため &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; プロセス、 &lt;code&gt;State&lt;/code&gt; タプル &lt;code&gt;{CurrentState,CurrentData}&lt;/code&gt; 、および &lt;code&gt;NewState&lt;/code&gt; には、新しい現在の状態は、新しい状態データ、またはその両方を含むことができる同様のタプルです。</target>
        </trans-unit>
        <trans-unit id="44cd6815c9e0e97b4a85fd5bdf8e6b3796b629ae" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; process, &lt;code&gt;State&lt;/code&gt; is the tuple &lt;code&gt;{CurrentState,CurrentData}&lt;/code&gt;.</source>
          <target state="translated">ため &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; プロセス、 &lt;code&gt;State&lt;/code&gt; タプル &lt;code&gt;{CurrentState,CurrentData}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1348dba6d54a83a9152e4914382188ef991652bb" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;negations&lt;/code&gt; operation, &lt;code&gt;substitute_negations/2&lt;/code&gt; is applied using the specified negation list.</source>
          <target state="translated">ために &lt;code&gt;negations&lt;/code&gt; 操作、 &lt;code&gt;substitute_negations/2&lt;/code&gt; は、指定された否定のリストを使用して適用されます。</target>
        </trans-unit>
        <trans-unit id="05ac5f3a37177c36456ef3599ab122e2f7a03944" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;record_expr&lt;/code&gt; node, &lt;code&gt;Info&lt;/code&gt; represents the record name and the list of descriptors for the involved fields, listed in the order they appear. A field descriptor is a pair &lt;code&gt;{Label, Value}&lt;/code&gt;, if &lt;code&gt;Node&lt;/code&gt; represents &quot;&lt;code&gt;Label = &amp;lt;em&amp;gt;Value&amp;lt;/em&amp;gt;&lt;/code&gt;&quot;. For a &lt;code&gt;record_access&lt;/code&gt; node, &lt;code&gt;Info&lt;/code&gt; represents the record name and the field name. For a &lt;code&gt;record_index_expr&lt;/code&gt; node, &lt;code&gt;Info&lt;/code&gt; represents the record name and the name field name.</source>
          <target state="translated">&lt;code&gt;record_expr&lt;/code&gt; のノード、 &lt;code&gt;Info&lt;/code&gt; レコード名と、彼らが表示される順番にリストされている、関係分野のための記述子のリストを表します。 &lt;code&gt;Node&lt;/code&gt; が「 &lt;code&gt;Label = &amp;lt;em&amp;gt;Value&amp;lt;/em&amp;gt;&lt;/code&gt; 」を表す場合 &lt;code&gt;{Label, Value}&lt;/code&gt; フィールド記述子は{Label、Value}のペアです。 &lt;code&gt;record_access&lt;/code&gt; のノード、 &lt;code&gt;Info&lt;/code&gt; レコード名とフィールド名を表します。 &lt;code&gt;record_index_expr&lt;/code&gt; のノード、 &lt;code&gt;Info&lt;/code&gt; レコード名と名前のフィールド名を表します。</target>
        </trans-unit>
        <trans-unit id="05b15523ad283b7823b5f85b98edeec8cc75bb7e" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor, the child specification defined in &lt;code&gt;Module:init/1&lt;/code&gt; is used, and &lt;code&gt;ChildSpec&lt;/code&gt; must instead be an arbitrary list of terms &lt;code&gt;List&lt;/code&gt;. The child process is then started by appending &lt;code&gt;List&lt;/code&gt; to the existing start function arguments, that is, by calling &lt;code&gt;apply(M, F, A++List)&lt;/code&gt;, where &lt;code&gt;{M,F,A}&lt;/code&gt; is the start function defined in the child specification.</source>
          <target state="translated">&lt;code&gt;simple_one_for_one&lt;/code&gt; のスーパーバイザー、子の仕様は、で定義されている &lt;code&gt;Module:init/1&lt;/code&gt; に使用され、そして &lt;code&gt;ChildSpec&lt;/code&gt; は、代わりの用語の任意のリストでなければなりません &lt;code&gt;List&lt;/code&gt; 。次に、既存の開始関数引数に &lt;code&gt;List&lt;/code&gt; を追加することによって、つまり &lt;code&gt;apply(M, F, A++List)&lt;/code&gt; 呼び出すことによって、子プロセスが開始されます。ここで、 &lt;code&gt;{M,F,A}&lt;/code&gt; は、子仕様で定義されている開始関数です。 。</target>
        </trans-unit>
        <trans-unit id="e270983e8335179100d9fe3c596f856db2dac6e7" translate="yes" xml:space="preserve">
          <source>For a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor, when a child process start function returns &lt;code&gt;ignore&lt;/code&gt;, the functions returns &lt;code&gt;{ok,undefined}&lt;/code&gt; and no child is added to the supervisor.</source>
          <target state="translated">ため &lt;code&gt;simple_one_for_one&lt;/code&gt; の子プロセスの開始関数が返すは、スーパーバイザ、 &lt;code&gt;ignore&lt;/code&gt; 、関数戻り &lt;code&gt;{ok,undefined}&lt;/code&gt; と子は、スーパーバイザに添加されていません。</target>
        </trans-unit>
        <trans-unit id="3ab42467cd15c337816dce46f68ae5fa0526b7a1" translate="yes" xml:space="preserve">
          <source>For a complete description of &lt;code&gt;erlc&lt;/code&gt;, see ERTS Reference Manual.</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; の詳細については、ERTSリファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="8cfb13f0cad02138ad2b995c017356309c3fb172" translate="yes" xml:space="preserve">
          <source>For a complete description of &lt;code&gt;select&lt;/code&gt;, see the &lt;code&gt;ERTS&lt;/code&gt; User's Guide and the &lt;code&gt;ets&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">完全な説明については &lt;code&gt;select&lt;/code&gt; を参照してください &lt;code&gt;ERTS&lt;/code&gt; のユーザーズ・ガイドおよび &lt;code&gt;ets&lt;/code&gt; STDLIBでマニュアルページを。</target>
        </trans-unit>
        <trans-unit id="d4b29807f5108ee246627d87dc631fd94fef1892" translate="yes" xml:space="preserve">
          <source>For a complete description of the different format directives, see the &lt;code&gt;&lt;a href=&quot;erl_format&quot;&gt;erl_format&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">さまざまなフォーマットディレクティブの詳細については、 &lt;code&gt;&lt;a href=&quot;erl_format&quot;&gt;erl_format&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="306e8d93b3094a4b0f6ef343b46a328b9a9a6a89" translate="yes" xml:space="preserve">
          <source>For a complete description of the different format directives, see the the &lt;code&gt;&lt;a href=&quot;ei#ei_x_format_wo_ver&quot;&gt;ei_x_format_wo_ver&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">さまざまなフォーマットディレクティブの詳細については、 &lt;code&gt;&lt;a href=&quot;ei#ei_x_format_wo_ver&quot;&gt;ei_x_format_wo_ver&lt;/a&gt;&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="c6e656123c9eb744a58014f9f51962adfbfc53c6" translate="yes" xml:space="preserve">
          <source>For a complete description, see the &lt;code&gt;&lt;a href=&quot;ei&quot;&gt;ei&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">完全な説明については、 &lt;code&gt;&lt;a href=&quot;ei&quot;&gt;ei&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="d02401677ec9fdd73c5cc9895475609266601522" translate="yes" xml:space="preserve">
          <source>For a complete description, see the following modules:</source>
          <target state="translated">完全な説明については、以下のモジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="2296648869178ab00c551a675766a922862800d8" translate="yes" xml:space="preserve">
          <source>For a complete list of BIFs, their arguments and return values, see &lt;code&gt;erlang(3)&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">BIF、その引数、および戻り値の完全なリストについては、ERTSの &lt;code&gt;erlang(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9b96f9c5fc0fa8fe1d9f6339dc15a2d5f9fb472a" translate="yes" xml:space="preserve">
          <source>For a connecting transport, the RFC 6733 Tc timer, in milliseconds. This timer determines the frequency with which a transport attempts to establish an initial connection with its peer following transport configuration. Once an initial connection has been established, &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; determines the frequency of reconnection attempts, as required by RFC 3539.</source>
          <target state="translated">接続トランスポートの場合、RFC 6733 Tcタイマー（ミリ秒単位）。このタイマーは、トランスポートがトランスポート構成に従ってピアとの初期接続を確立しようとする頻度を決定します。初期接続が確立されると、 &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; はRFC 3539で要求されているように、再接続試行の頻度を決定します。</target>
        </trans-unit>
        <trans-unit id="2ac741d1f7ac505dae5ea4596ab971a0359b710e" translate="yes" xml:space="preserve">
          <source>For a definition of valid regular expressions and options, see the &lt;code&gt;re&lt;/code&gt; module in STDLIB and in particular function &lt;code&gt;re:run/3&lt;/code&gt;.</source>
          <target state="translated">有効な正規表現とオプションの定義については、STDLIB の &lt;code&gt;re&lt;/code&gt; モジュール、特に関数 &lt;code&gt;re:run/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1778d91027288e89fb9f378857f0ab18d8b8254" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;EventMgrRef&lt;/code&gt; and &lt;code&gt;Handler&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EventMgrRef&lt;/code&gt; と &lt;code&gt;Handler&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ab206fd61e2b9fddc5eafc5fc27d1c15a0c8fad2" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;EventMgrRef&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;EventMgrRef&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="61b9134ab4d9675f20b8e73cc84fde0dfc684f51" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Pattern&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 説明については、 &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="96cefa5fc6c0be89204e4398ffcd7b6e931bcbc7" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Pattern&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt;. For a description of available options, see &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 説明については、 &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt; を参照してください。使用可能なオプションの説明については、 &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="490301d361c897e86bb808406dd04f853292db16" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Pattern&lt;/code&gt;, see function &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 説明については、関数 &lt;code&gt;&lt;a href=&quot;#compile_pattern-1&quot;&gt;compile_pattern/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a575b08f9d7b4ad4d20d737daccceca9585ee829" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;PrePurge&lt;/code&gt; and &lt;code&gt;PostPurge&lt;/code&gt;, see &lt;code&gt;update&lt;/code&gt; above.</source>
          <target state="translated">&lt;code&gt;PrePurge&lt;/code&gt; と &lt;code&gt;PostPurge&lt;/code&gt; の説明については、上記の &lt;code&gt;update&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="7a65c4f68025c3ad1dd6315d55707a52bb482efc" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;ServerRef&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ServerRef&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/2,3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="69e223561cb9063324fd12ef476a6b7e069a5ed2" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;StartType&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#Module:start-2&quot;&gt;Module:start/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartType&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:start-2&quot;&gt;Module:start/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe1c30168853014829ac98827419201235616034" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;StartType&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#start_type&quot;&gt;Module:start/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartType&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#start_type&quot;&gt;Module:start/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5def873d87cd980e931392839b5cf6d17842f538" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;StartType&lt;/code&gt;, see &lt;code&gt;Module:start/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;StartType&lt;/code&gt; の説明については、 &lt;code&gt;Module:start/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="02838b7512a47b4887b136d17f1d8e29d0d6c42a" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;State&lt;/code&gt; and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt; Module:handle_event/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; と可能な戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt; Module:handle_event/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7af5f0c5a703d05ffb3c28deb45bb383f51975e7" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;State&lt;/code&gt; and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt;Module:handle_event/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;State&lt;/code&gt; と可能な戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:handle_event-2&quot;&gt;Module:handle_event/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3b7a9480404a774f2e01c502c092dc97fed34b5c" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;SupRef&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#SupRef&quot;&gt;start_child/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;SupRef&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#SupRef&quot;&gt;start_child/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bbb94f820b1ff3aee729f5fbaecbcc295c79001a" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Timeout&lt;/code&gt; and &lt;code&gt;hibernate&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Timeout&lt;/code&gt; と &lt;code&gt;hibernate&lt;/code&gt; 説明については、 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="21c3e1f1906955603f566457e63cdaa98a428468" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;Type&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; の説明については、 &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="607ab8601660e33550a0e7aea5d949075b3313a3" translate="yes" xml:space="preserve">
          <source>For a description of &lt;code&gt;select&lt;/code&gt; and its syntax, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;select&lt;/code&gt; とその構文の説明については、「 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#matching&quot;&gt;Pattern Matching&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="972aacd0a31b572c0e72a100331a00176bde225a" translate="yes" xml:space="preserve">
          <source>For a description of arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#start-1&quot;&gt;start/1,2,3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="77a1fca3021cb71786aaf6bcae62ca1f3e1b7f33" translate="yes" xml:space="preserve">
          <source>For a description of arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="54f2591ddbc9212139ebbd4e717d510bbe033597" translate="yes" xml:space="preserve">
          <source>For a description of arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;. Note that the return value on successful start differs from &lt;code&gt;start_link/3,4&lt;/code&gt;. &lt;code&gt;start_monitor/3,4&lt;/code&gt; will return &lt;code&gt;{ok,{Pid,Mon}}&lt;/code&gt; where &lt;code&gt;Pid&lt;/code&gt; is the process identifier of the process, and &lt;code&gt;Mon&lt;/code&gt; is a reference to the monitor set up to monitor the process. If the start is not successful, the caller will be blocked until the &lt;code&gt;DOWN&lt;/code&gt; message has been received and removed from the message queue.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; を参照してください。正常に開始されたときの戻り値は、 &lt;code&gt;start_link/3,4&lt;/code&gt; とは異なることに注意してください。 &lt;code&gt;start_monitor/3,4&lt;/code&gt; は &lt;code&gt;{ok,{Pid,Mon}}&lt;/code&gt; を返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はプロセスのプロセス識別子であり、 &lt;code&gt;Mon&lt;/code&gt; はプロセスを監視するために設定されたモニターへの参照です。開始が成功しなかった場合、発信者は &lt;code&gt;DOWN&lt;/code&gt; メッセージが受信され、メッセージキューから削除されるまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="a65de61060f95b87ae5448f9dac49e1374ce925b" translate="yes" xml:space="preserve">
          <source>For a description of arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;. Note that the return value on successful start differs from &lt;code&gt;start_link/3,4&lt;/code&gt;. &lt;code&gt;start_monitor/3,4&lt;/code&gt; will return &lt;code&gt;{ok,{Pid,Mon}}&lt;/code&gt; where &lt;code&gt;Pid&lt;/code&gt; is the process identifier of the server, and &lt;code&gt;Mon&lt;/code&gt; is a reference to the monitor set up to monitor the server. If the start is not successful, the caller will be blocked until the &lt;code&gt;DOWN&lt;/code&gt; message has been received and removed from the message queue.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; を参照してください。正常に開始されたときの戻り値は、 &lt;code&gt;start_link/3,4&lt;/code&gt; とは異なることに注意してください。 &lt;code&gt;start_monitor/3,4&lt;/code&gt; は &lt;code&gt;{ok,{Pid,Mon}}&lt;/code&gt; を返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はサーバーのプロセス識別子であり、 &lt;code&gt;Mon&lt;/code&gt; はサーバーを監視するために設定されたモニターへの参照です。開始が成功しなかった場合、発信者は &lt;code&gt;DOWN&lt;/code&gt; メッセージが受信され、メッセージキューから削除されるまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="e36c35175840d023a6cf460ade2c4f7beb8f53f1" translate="yes" xml:space="preserve">
          <source>For a description of function declarations, see &lt;code&gt;&lt;a href=&quot;functions&quot;&gt;Function Declaration Syntax&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数宣言の説明については、「 &lt;code&gt;&lt;a href=&quot;functions&quot;&gt;Function Declaration Syntax&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="880055b3cf6a0908c98848c97c73622b9210c667" translate="yes" xml:space="preserve">
          <source>For a description of match specifications, see section &lt;code&gt; Match Specification in Erlang&lt;/code&gt; in ERTS User's Guide.</source>
          <target state="translated">一致仕様の説明については、ERTSユーザーズガイドの &lt;code&gt; Match Specification in Erlang&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9d7cec709f4329f7673af15c7c4c2a2a6bb46704" translate="yes" xml:space="preserve">
          <source>For a description of match specifications, see section &lt;code&gt;Match Specification in Erlang&lt;/code&gt; in ERTS User's Guide.</source>
          <target state="translated">一致仕様の説明については、「ERTSユーザーガイド」の「 &lt;code&gt;Match Specification in Erlang&lt;/code&gt; の一致仕様」を参照してください。</target>
        </trans-unit>
        <trans-unit id="9769bda1585e895e9d31f5c92f3fe2c06aebf820" translate="yes" xml:space="preserve">
          <source>For a description of patterns, see &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パターンの説明については、 &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0eb276490a2f309e043ffe87e763b33c3a8466d" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;match_spec()&lt;/code&gt; syntax, please turn to the &lt;strong&gt;User's guide&lt;/strong&gt; part of the online documentation for the runtime system (&lt;strong&gt;erts&lt;/strong&gt;). The chapter &lt;code&gt;&lt;strong&gt;Match Specifications in Erlang&lt;/strong&gt;&lt;/code&gt; explains the general match specification &quot;language&quot;.</source>
          <target state="translated">&lt;code&gt;match_spec()&lt;/code&gt; 構文の説明については、ランタイムシステムのオンラインドキュメント（&lt;strong&gt;erts&lt;/strong&gt;）の&lt;strong&gt;ユーザーガイド&lt;/strong&gt;部分を参照してください。 &lt;code&gt;&lt;strong&gt;Match Specifications in Erlang&lt;/strong&gt;&lt;/code&gt; の章では、一般的な一致仕様の「言語」について説明しています。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7703173998c17ea83511dfa5283d14f4d69fe0c5" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;match_spec()&lt;/code&gt; syntax, please turn to the &lt;strong&gt;User's guide&lt;/strong&gt; part of the online documentation for the runtime system (&lt;strong&gt;erts&lt;/strong&gt;). The chapter &lt;code&gt;&lt;strong&gt;Match Specifications in Erlang&lt;/strong&gt;&lt;/code&gt; explains the general match specification &quot;language&quot;. The most common generic match specifications used can be found as &lt;code&gt;Built-inAlias&lt;/code&gt;', see &lt;code&gt;&lt;a href=&quot;#ltp-0&quot;&gt;ltp/0&lt;/a&gt;&lt;/code&gt; below for details.</source>
          <target state="translated">&lt;code&gt;match_spec()&lt;/code&gt; 構文の説明については、ランタイムシステムのオンラインドキュメント（&lt;strong&gt;erts&lt;/strong&gt;）の&lt;strong&gt;ユーザーガイド&lt;/strong&gt;部分を参照してください。 &lt;code&gt;&lt;strong&gt;Match Specifications in Erlang&lt;/strong&gt;&lt;/code&gt; の章では、一般的な一致仕様の「言語」について説明しています。使用される最も一般的な一般的な一致仕様は &lt;code&gt;Built-inAlias&lt;/code&gt; ' として見つけることができます。詳細については、下記の &lt;code&gt;&lt;a href=&quot;#ltp-0&quot;&gt;ltp/0&lt;/a&gt;&lt;/code&gt; を参照してください。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ef4bddbc34a3831351a2641d9658cdebad17c2b8" translate="yes" xml:space="preserve">
          <source>For a description of the &lt;code&gt;match_spec()&lt;/code&gt; syntax, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in ERTS, which explains the general match specification &quot;language&quot;.</source>
          <target state="translated">説明については &lt;code&gt;match_spec()&lt;/code&gt; 構文、セクションを参照 &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; 一般的な一致仕様「言語」を説明するERTS、中を。</target>
        </trans-unit>
        <trans-unit id="1a4152e6278bbf99749c38b17f7fbc9597385ea1" translate="yes" xml:space="preserve">
          <source>For a description of the I/O protocols, see section &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">I / Oプロトコルの説明については、ユーザーズガイドの「 &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="2025b3914c458688da295d428749c8c46542feb5" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と可能な戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="07949123961391c2673de11e4076e2d60eced05c" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と可能な戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="896f509d9ccaf0cce925a58ea47de82220089a35" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e988f83f81897f6b908cee83257a2be0f550e7ef" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-0&quot;&gt;start_link/0,1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#start_link-0&quot;&gt;start_link/0,1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6abe4eb3dd1816ae9b28aa6b361027b5c5ebec80" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#start_link-0&quot;&gt;start_link/0,1&lt;/a&gt;&lt;/code&gt;. Note that the return value on successful start differs from &lt;code&gt;start_link/3,4&lt;/code&gt;. &lt;code&gt;start_monitor/3,4&lt;/code&gt; will return &lt;code&gt;{ok,{Pid,Mon}}&lt;/code&gt; where &lt;code&gt;Pid&lt;/code&gt; is the process identifier of the process, and &lt;code&gt;Mon&lt;/code&gt; is a reference to the monitor set up to monitor the process. If the start is not successful, the caller will be blocked until the &lt;code&gt;DOWN&lt;/code&gt; message has been received and removed from the message queue.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#start_link-0&quot;&gt;start_link/0,1&lt;/a&gt;&lt;/code&gt; を参照してください。正常に開始されたときの戻り値は、 &lt;code&gt;start_link/3,4&lt;/code&gt; とは異なることに注意してください。 &lt;code&gt;start_monitor/3,4&lt;/code&gt; は &lt;code&gt;{ok,{Pid,Mon}}&lt;/code&gt; を返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はプロセスのプロセス識別子であり、 &lt;code&gt;Mon&lt;/code&gt; はプロセスを監視するために設定されたモニターへの参照です。開始が成功しなかった場合、発信者は &lt;code&gt;DOWN&lt;/code&gt; メッセージが受信され、メッセージキューから削除されるまでブロックされます。</target>
        </trans-unit>
        <trans-unit id="8fac05683ef2609d5029a0a282d6ee27b3ebc206" translate="yes" xml:space="preserve">
          <source>For a description of the arguments and return values, see &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数と戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="62815d91e2c677755f354f11587d1bad01d8fe59" translate="yes" xml:space="preserve">
          <source>For a description of the arguments, see &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数の説明については、 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="97370f5d5dec45b9c04d099eb22590151d2dac21" translate="yes" xml:space="preserve">
          <source>For a description of the arguments, see &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数の説明については、 &lt;code&gt;&lt;a href=&quot;#multi_call-2&quot;&gt;multi_call/2,3,4&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="a0dd5ebe7e70167c0dac796ad7a71ee15f6ab2e3" translate="yes" xml:space="preserve">
          <source>For a description of the options, see &lt;code&gt;&lt;a href=&quot;#string-3&quot;&gt;string/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプションの説明については、 &lt;code&gt;&lt;a href=&quot;#string-3&quot;&gt;string/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fe71815d4a82343fc19a1dc26d416bd852b070ef" translate="yes" xml:space="preserve">
          <source>For a description of the options, see &lt;code&gt;&lt;a href=&quot;#type-client_options&quot;&gt;Client Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプションの説明については、「 &lt;code&gt;&lt;a href=&quot;#type-client_options&quot;&gt;Client Options&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="82fba08ca1d36f58f8a668532aa3bde0a2c58961" translate="yes" xml:space="preserve">
          <source>For a description of the options, see &lt;code&gt;&lt;a href=&quot;#type-daemon_options&quot;&gt;Daemon Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプションの説明については、「 &lt;code&gt;&lt;a href=&quot;#type-daemon_options&quot;&gt;Daemon Options&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="01cdab56d71f771d8b6aea711da892d3a1cdab24" translate="yes" xml:space="preserve">
          <source>For a description of the other arguments and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">その他の引数と可能な戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4a38cab08ea388ea4ff5f4107faa8cfc6f6bc618" translate="yes" xml:space="preserve">
          <source>For a description of the other arguments and possible return values, see &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">他の引数と可能な戻り値の説明については、 &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bf80ebecef8b5d265aeaf5990098c7c291e8b9fd" translate="yes" xml:space="preserve">
          <source>For a descriptions of options only affecting the compilation step, see &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コンパイル手順にのみ影響するオプションの説明については、 &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="55898fdd413ae4d5b8d090755b3edd98ed573b98" translate="yes" xml:space="preserve">
          <source>For a detailed description of each value, see &lt;code&gt;&lt;a href=&quot;#info-2&quot;&gt;info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">各値の詳細については、 &lt;code&gt;&lt;a href=&quot;#info-2&quot;&gt;info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7bbac230b9c5ed374fb96bffe873ff96a1cc7a4d" translate="yes" xml:space="preserve">
          <source>For a detailed description of the socket concept, refer to a suitable book about network programming. A suggestion is &lt;strong&gt;UNIX Network Programming, Volume 1: Networking APIs - Sockets and XTI&lt;/strong&gt; by W. Richard Stevens, ISBN: 013490012X.</source>
          <target state="translated">ソケットの概念の詳細については、ネットワークプログラミングに関する適切な本を参照してください。提案は、&lt;strong&gt;UNIXネットワークプログラミング、第1巻：ネットワーキング&lt;/strong&gt; API- &lt;strong&gt;ソケットおよび&lt;/strong&gt; W.リチャードスティーブンスによる&lt;strong&gt;XTI&lt;/strong&gt;、ISBN：013490012Xです。</target>
        </trans-unit>
        <trans-unit id="844b24c946259dad373327e8abcce2b8c9f7a56f" translate="yes" xml:space="preserve">
          <source>For a detailed description of the syntax and contents of the boot script, see the &lt;code&gt;script(4)&lt;/code&gt; manual page in SASL.</source>
          <target state="translated">ブートスクリプトの構文と内容の詳細については、SASLの &lt;code&gt;script(4)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9c3a2ec1b41b2886a58c2dac9a1dc1fff6b51340" translate="yes" xml:space="preserve">
          <source>For a different way to partition a list, see &lt;code&gt;&lt;a href=&quot;#partition-2&quot;&gt;partition/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リストを分割する別の方法については、 &lt;code&gt;&lt;a href=&quot;#partition-2&quot;&gt;partition/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="720327204417f93293a4c16e172e1d77d48d7e8d" translate="yes" xml:space="preserve">
          <source>For a different way to partition a list, see &lt;code&gt;&lt;a href=&quot;#splitwith-2&quot;&gt;splitwith/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リストを分割する別の方法については、 &lt;code&gt;&lt;a href=&quot;#splitwith-2&quot;&gt;splitwith/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="84a9170ca3d20cb888339d1d64eb47f269c521e2" translate="yes" xml:space="preserve">
          <source>For a disk log process to close its file properly and terminate, it must be closed by its owners and once by some non-owner process for each time the log was used anonymously. The users are counted and there must not be any users left when the disk log process terminates.</source>
          <target state="translated">ディスクログプロセスがそのファイルを適切に閉じて終了するためには、所有者によって閉じられ、ログが匿名で使用されるたびに、所有者ではないプロセスによって一度だけ閉じられなければならない。ユーザはカウントされ、ディスクログプロセスが終了するときにはユーザが残っていてはならない。</target>
        </trans-unit>
        <trans-unit id="d82511680a1722261769bc6b102aa6073a9d0792" translate="yes" xml:space="preserve">
          <source>For a given hash value, this module finds all consecutive &lt;code&gt;.r*&lt;/code&gt; files starting from zero, and those files taken together make up the revocation list. CRL files whose &lt;code&gt;nextUpdate&lt;/code&gt; fields are in the past, or that are issued by a different CA that happens to have the same name hash, are excluded.</source>
          <target state="translated">与えられたハッシュ値に対して、このモジュールはゼロから始まるすべての連続する &lt;code&gt;.r*&lt;/code&gt; ファイルを見つけ、これらのファイルが一緒になって失効リストを構成します。 &lt;code&gt;nextUpdate&lt;/code&gt; フィールドが過去のCRLファイル、または偶然同じ名前のハッシュを持つ別のCAによって発行されたCRLファイルは除外されます。</target>
        </trans-unit>
        <trans-unit id="13e6867ea0feea22eb209cd61b4c7cf73e7dc73a" translate="yes" xml:space="preserve">
          <source>For a given notification, the variables, which are referred to in the notification specification, must be implemented by the agent that has the MIB loaded, or by some parent to this agent. If not, the application must provide values for the unknown variables. The application must also provide values for all elements in tables.</source>
          <target state="translated">与えられた通知に対して、通知仕様で参照される変数は、MIBをロードしたエージェント、またはこのエージェントの親によって実装されなければならない。そうでない場合、アプリケーションは未知の変数の値を提供しなければなりません。また、アプリケーションは、テーブル内のすべての要素の値を提供しなければなりません。</target>
        </trans-unit>
        <trans-unit id="aa6d7029778221af0b6b051348c91d7d4a1ea8e5" translate="yes" xml:space="preserve">
          <source>For a large system, it can be interesting to run profiling on a simulated and limited scenario to start with. But bottlenecks have a tendency to appear or cause problems only when many things are going on at the same time, and when many nodes are involved. Therefore, it is also desirable to run profiling in a system test plant on a real target system.</source>
          <target state="translated">大規模なシステムでは、最初からシミュレーションされた限定的なシナリオでプロファイリングを実行するのが面白いかもしれません。しかし、ボトルネックは、多くのことが同時に進行している場合や、多くのノードが関与している場合にのみ現れたり、問題が発生したりする傾向があります。そのため、システムテストプラントで実際のターゲットシステム上でプロファイリングを実行することも望ましい。</target>
        </trans-unit>
        <trans-unit id="d49a8a95bc0737d649b2fbd2bd4b9d035a5443d7" translate="yes" xml:space="preserve">
          <source>For a large system, you do not want to run the profiling tools on the whole system. Instead you want to concentrate on central processes and modules, which contribute for a big part of the execution.</source>
          <target state="translated">大規模なシステムでは、システム全体でプロファイリングツールを実行する必要はありません。その代わりに、実行の大部分を占める中央のプロセスやモジュールに集中したいと考えています。</target>
        </trans-unit>
        <trans-unit id="fdc10c07e284d442bea3ecd019955848f9d24a37" translate="yes" xml:space="preserve">
          <source>For a list of supported algorithms, see &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サポートされているアルゴリズムのリストについては、 &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dca81146dd7c61602cc41b80aeaf6d64b40a8421" translate="yes" xml:space="preserve">
          <source>For a list of supported cipher algorithms, see &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サポートされている暗号アルゴリズムのリストについては、 &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="78e02450b6b6baa3722bb81c00b1b5b9b8fb05d2" translate="yes" xml:space="preserve">
          <source>For a list of supported hash algorithms, see &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サポートされているハッシュアルゴリズムのリストについては、 &lt;code&gt;&lt;a href=&quot;#supports-0&quot;&gt;supports/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="714a3eaa378f818eb6703af10da760265164f5b3" translate="yes" xml:space="preserve">
          <source>For a listening transport, the timer specifies the time after which a previously connected peer will be forgotten: a connection after this time is regarded as an initial connection rather than reestablishment, causing the RFC 3539 state machine to pass to state OKAY rather than REOPEN. Note that these semantics are not governed by the RFC and that a listening transport's &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; should be greater than its peer's Tw plus jitter.</source>
          <target state="translated">リスニングトランスポートの場合、タイマーは、以前に接続されたピアが忘れられるまでの時間を指定します。この時間以降の接続は、再確立ではなく初期接続と見なされ、RFC 3539ステートマシンがREOPENではなくOK状態に移行します。これらのセマンティクスはRFCによって管理されておらず、リスニングトランスポートの &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; は、そのピアのTwとジッターより大きい必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e2f930f2bafc05d5efc3129ac198c5a95bbf17ec" translate="yes" xml:space="preserve">
          <source>For a local &lt;code&gt;{Date1, Time1}&lt;/code&gt; during the period that is repeated when switching &lt;strong&gt;from&lt;/strong&gt; daylight saving time, two corresponding UTCs exist; one for the first instance of the period when daylight saving time is still active, and one for the second instance.</source>
          <target state="translated">サマータイム&lt;strong&gt;からの&lt;/strong&gt;切り替え時に繰り返される期間中にローカルの &lt;code&gt;{Date1, Time1}&lt;/code&gt; 場合、2つの対応するUTCが存在します。1つは夏時間がまだアクティブな期間の最初のインスタンス用で、もう1つは2番目のインスタンス用です。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="4f5c9a40a6d0b1abd670f673641a58092a5e01f3" translate="yes" xml:space="preserve">
          <source>For a local &lt;code&gt;{Date1, Time1}&lt;/code&gt; during the period that is skipped when switching &lt;strong&gt;to&lt;/strong&gt; daylight saving time, there is no corresponding UTC, as the local time is illegal (it has never occured).</source>
          <target state="translated">ローカルのために &lt;code&gt;{Date1, Time1}&lt;/code&gt; 切り替え時スキップされ期間中&lt;strong&gt;に&lt;/strong&gt;現地時刻が不正であるとして夏時間、該当するUTCは、（それが発生したことがない）、存在しません。</target>
        </trans-unit>
        <trans-unit id="b5900b948715e847445a40b1e46335c73dfd2bc1" translate="yes" xml:space="preserve">
          <source>For a local fun, &lt;code&gt;Item&lt;/code&gt; can also be any of the atoms &lt;code&gt;index&lt;/code&gt;, &lt;code&gt;new_index&lt;/code&gt;, &lt;code&gt;new_uniq&lt;/code&gt;, &lt;code&gt;uniq&lt;/code&gt;, and &lt;code&gt;pid&lt;/code&gt;. For an external fun, the value of any of these items is always the atom &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">ローカル楽しみの場合、 &lt;code&gt;Item&lt;/code&gt; はアトム &lt;code&gt;index&lt;/code&gt; 、 &lt;code&gt;new_index&lt;/code&gt; 、 &lt;code&gt;new_uniq&lt;/code&gt; 、 &lt;code&gt;uniq&lt;/code&gt; 、および &lt;code&gt;pid&lt;/code&gt; のいずれかになります。外部ファンの場合、これらの項目の値は常にアトム &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="59175d553d5ac9f663c073d3457b0f82f1a14e36" translate="yes" xml:space="preserve">
          <source>For a minimal example of a CTH, see section &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#example&quot;&gt;Example CTH&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">CTHの最小限例えば、節参照 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#example&quot;&gt;Example CTH&lt;/a&gt;&lt;/code&gt; ユーザーズガイドで。</target>
        </trans-unit>
        <trans-unit id="5585f675767206207308577a771cbf4e880f72a4" translate="yes" xml:space="preserve">
          <source>For a more complete problem statement regarding the URIs check the &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ruby-url-problem-01&quot;&gt;URL Problem Statement and Directions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">URIに関するより完全な問題ステートメントについては、 &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-ruby-url-problem-01&quot;&gt;URL Problem Statement and Directions&lt;/a&gt;&lt;/code&gt; 確認してください。</target>
        </trans-unit>
        <trans-unit id="508a1c392b487cf9efc079e769ab1469c2d35cd4" translate="yes" xml:space="preserve">
          <source>For a more thorough discussion about tail and body recursion, see &lt;code&gt;&lt;a href=&quot;http://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html&quot;&gt;Erlang's Tail Recursion is Not a Silver Bullet&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テールとボディの再帰についての詳細な説明については、 &lt;code&gt;&lt;a href=&quot;http://ferd.ca/erlang-s-tail-recursion-is-not-a-silver-bullet.html&quot;&gt;Erlang's Tail Recursion is Not a Silver Bullet&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="d9b63bb15258354b69beaeb88cbfaea97e07f895" translate="yes" xml:space="preserve">
          <source>For a node &lt;code&gt;Node1&lt;/code&gt; with magic cookie &lt;code&gt;Cookie&lt;/code&gt; to be able to connect to, or accept a connection from, another node &lt;code&gt;Node2&lt;/code&gt; with a different cookie &lt;code&gt;DiffCookie&lt;/code&gt;, the function &lt;code&gt;erlang:set_cookie(Node2, DiffCookie)&lt;/code&gt; must first be called at &lt;code&gt;Node1&lt;/code&gt;. Distributed systems with multiple user IDs can be handled in this way.</source>
          <target state="translated">マジックCookie &lt;code&gt;Cookie&lt;/code&gt; を持つノード &lt;code&gt;Node1&lt;/code&gt; が、異なるCookie &lt;code&gt;DiffCookie&lt;/code&gt; を持つ別のノード &lt;code&gt;Node2&lt;/code&gt; に接続したり、そこから接続を受け入れたりできるようにするには、最初に &lt;code&gt;Node1&lt;/code&gt; で関数 &lt;code&gt;erlang:set_cookie(Node2, DiffCookie)&lt;/code&gt; 必要があります。複数のユーザーIDを持つ分散システムは、この方法で処理できます。</target>
        </trans-unit>
        <trans-unit id="a0a5458d9b5f593066a94861701589b5365d3c63" translate="yes" xml:space="preserve">
          <source>For a process implemented using an OTP behaviour, the behaviour module is the residence module for that process. The callback module is a functional module.</source>
          <target state="translated">OTP ビヘイビアを使用して実装されたプロセスの場合、ビヘイビアモジュールはそのプロセスの居住モジュールです。コールバックモジュールは機能モジュールです。</target>
        </trans-unit>
        <trans-unit id="6994e723b6ac8455473acb09217de4e1771ef454" translate="yes" xml:space="preserve">
          <source>For a short demonstration of parsing and pretty-printing, simply compile the included module &lt;code&gt;demo.erl&lt;/code&gt;, and execute &lt;code&gt;demo:run()&lt;/code&gt; from the Erlang shell. It will compile the remaining modules and give you further instructions.</source>
          <target state="translated">解析とプリティプリントの簡単な &lt;code&gt;demo:run()&lt;/code&gt; を行うには、含まれているモジュール &lt;code&gt;demo.erl&lt;/code&gt; をコンパイルし、Erlangシェルからdemo：run（）を実行します。残りのモジュールをコンパイルし、さらに指示を出します。</target>
        </trans-unit>
        <trans-unit id="77ef8f7ce8a23a6ffa821ec5eea74f8f32b8bf77" translate="yes" xml:space="preserve">
          <source>For a simple example of an FTP session, see &lt;code&gt;&lt;a href=&quot;ftp_client&quot;&gt;FTP User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">FTPセッションの簡単な例については、「 &lt;code&gt;&lt;a href=&quot;ftp_client&quot;&gt;FTP User's Guide&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="e40382adf0258f7ee25b19fc64547696bb518803" translate="yes" xml:space="preserve">
          <source>For a specified error returned by any function in this module, this function returns a descriptive string of the error in English. For file errors, function &lt;code&gt;file:format_error(Posix)&lt;/code&gt; is to be called.</source>
          <target state="translated">このモジュールの関数から返された指定のエラーの場合、この関数はエラーの説明文字列を英語で返します。ファイルエラーの場合、関数 &lt;code&gt;file:format_error(Posix)&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0592b86931ce428f467579270fb03a409e53a596" translate="yes" xml:space="preserve">
          <source>For a succesful initialization, &lt;code&gt;State&lt;/code&gt; is the initial &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Data&lt;/code&gt; the initial server &lt;code&gt;&lt;a href=&quot;#type-data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">正常な初期化の場合、 &lt;code&gt;State&lt;/code&gt; は初期 &lt;code&gt;&lt;a href=&quot;#type-state&quot;&gt;state()&lt;/a&gt;&lt;/code&gt; あり、 &lt;code&gt;Data&lt;/code&gt; は &lt;code&gt;gen_statem&lt;/code&gt; の初期サーバー &lt;code&gt;&lt;a href=&quot;#type-data&quot;&gt;data()&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f4764a0fdb2a7a233cc9fc1526a0311e2a392d00" translate="yes" xml:space="preserve">
          <source>For a table &lt;code&gt;Tab&lt;/code&gt; of type &lt;code&gt;set&lt;/code&gt; or &lt;code&gt;ordered_set&lt;/code&gt;, the function returns the &lt;code&gt;Pos&lt;/code&gt;:th element of the object with key &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">タイプが &lt;code&gt;set&lt;/code&gt; または &lt;code&gt;ordered_set&lt;/code&gt; のテーブル &lt;code&gt;Tab&lt;/code&gt; の場合、関数はキーが &lt;code&gt;Key&lt;/code&gt; のオブジェクトの &lt;code&gt;Pos&lt;/code&gt; ：th要素を返します。</target>
        </trans-unit>
        <trans-unit id="77a7d5095d8b2a32c7db55d348db8fd529dc24c2" translate="yes" xml:space="preserve">
          <source>For a wrap log, both the size and the number of files can always be increased, as long as the number of files does not exceed 65000. If the maximum number of files is decreased, the change is not valid until the current file is full and the log wraps to the next file. The redundant files are removed the next time the log wraps around, that is, starts to log to file number 1.</source>
          <target state="translated">ラップログの場合、ファイル数が65000を超えない限り、サイズとファイル数の両方を常に増やすことができます。最大ファイル数が減少した場合、現在のファイルが一杯になり、ログが次のファイルにラップするまで変更は有効ではありません。冗長なファイルは、次にログが折り返したとき、つまりファイル番号1にログを取り始めるときに削除されます。</target>
        </trans-unit>
        <trans-unit id="f51ff20f17c1a36f5a582229120660a7039e260a" translate="yes" xml:space="preserve">
          <source>For accessing individual attributes, see &lt;code&gt;&lt;a href=&quot;#get_pos-1&quot;&gt;get_pos/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#get_precomments-1&quot;&gt;get_precomments/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_postcomments-1&quot;&gt;get_postcomments/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">個々の属性へのアクセスについては、 &lt;code&gt;&lt;a href=&quot;#get_pos-1&quot;&gt;get_pos/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#get_precomments-1&quot;&gt;get_precomments/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#get_postcomments-1&quot;&gt;get_postcomments/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="75b8dd1f30ea0f0135327cf538ef37349ea2caf3" translate="yes" xml:space="preserve">
          <source>For all 2-tuples with a list in second position, add atom &lt;code&gt;'marker'&lt;/code&gt; first in the list:</source>
          <target state="translated">リストが2番目の位置にあるすべての2タプルについて、リスト &lt;code&gt;'marker'&lt;/code&gt; 最初にアトム「マーカー」を追加します。</target>
        </trans-unit>
        <trans-unit id="5c1ae2321382cf8ef9bdb6fad30d2f45ee293afb" translate="yes" xml:space="preserve">
          <source>For all OAM components, SNMP adaptations are provided. Other adaptations might be defined in the future.</source>
          <target state="translated">すべてのOAMコンポーネントについて、SNMPの適応が提供されています。将来的には他の適応が定義されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5882391bad4058944412eec531e59f1f05d7f423" translate="yes" xml:space="preserve">
          <source>For all other employees, return &lt;code&gt;{newbie, &amp;lt;employee number&amp;gt;}&lt;/code&gt;, except for those named &lt;code&gt;Smith&lt;/code&gt; as they would be affronted by anything other than the tag &lt;code&gt;guru&lt;/code&gt; and that is also what is returned for their numbers: &lt;code&gt;{guru, &amp;lt;employee number&amp;gt;}&lt;/code&gt;.</source>
          <target state="translated">他のすべての従業員については、 &lt;code&gt;{newbie, &amp;lt;employee number&amp;gt;}&lt;/code&gt; 返します。ただし、タグ &lt;code&gt;guru&lt;/code&gt; 以外のものが嫌われるため、 &lt;code&gt;Smith&lt;/code&gt; という名前の従業員を除きます。これは、従業員の番号に対して返されるものでもあります： &lt;code&gt;{guru, &amp;lt;employee number&amp;gt;}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f60cd921fc7b5654e104794b14acebabcd91a23" translate="yes" xml:space="preserve">
          <source>For all other local times only one corresponding UTC exists.</source>
          <target state="translated">その他のすべてのローカルタイムについては、対応するUTCが1つしか存在しません。</target>
        </trans-unit>
        <trans-unit id="f473bbb9d26d1a082e9ad8ad3bf78394942ee789" translate="yes" xml:space="preserve">
          <source>For all other values of &lt;code&gt;HandlerId&lt;/code&gt;, this entry adds a new handler, equivalent to calling</source>
          <target state="translated">&lt;code&gt;HandlerId&lt;/code&gt; の他のすべての値の場合、このエントリは、次の呼び出しと同等の新しいハンドラーを追加します</target>
        </trans-unit>
        <trans-unit id="e6df2b280a704823a1dc706fc0e1a405b877c277" translate="yes" xml:space="preserve">
          <source>For all these generators except &lt;code&gt;exro928ss&lt;/code&gt; and &lt;code&gt;exsss&lt;/code&gt; the lowest bit(s) has got a slightly less random behaviour than all other bits. 1 bit for &lt;code&gt;exrop&lt;/code&gt; (and &lt;code&gt;exsp&lt;/code&gt;), and 3 bits for &lt;code&gt;exs1024s&lt;/code&gt;. See for example the explanation in the &lt;code&gt;&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt; Xoroshiro128+ &lt;/a&gt;&lt;/code&gt; generator source code:</source>
          <target state="translated">&lt;code&gt;exro928ss&lt;/code&gt; と &lt;code&gt;exsss&lt;/code&gt; を除くこれらすべてのジェネレーターでは、最下位ビットのランダムな動作が他のすべてのビットよりもわずかに少なくなっています。1ビット &lt;code&gt;exrop&lt;/code&gt; （及び &lt;code&gt;exsp&lt;/code&gt; ）、及び3ビット &lt;code&gt;exs1024s&lt;/code&gt; 。たとえば、 &lt;code&gt;&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt; Xoroshiro128+ &lt;/a&gt;&lt;/code&gt; ジェネレータのソースコードの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="366217efd377ef7f12b1d12edb859398720ebe56" translate="yes" xml:space="preserve">
          <source>For all these generators the lowest bit(s) has got a slightly less random behaviour than all other bits. 1 bit for &lt;code&gt;exrop&lt;/code&gt; (and &lt;code&gt;exsp&lt;/code&gt;), and 3 bits for &lt;code&gt;exs1024s&lt;/code&gt;. See for example the explanation in the &lt;code&gt;&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt; Xoroshiro128+ &lt;/a&gt;&lt;/code&gt; generator source code:</source>
          <target state="translated">これらすべてのジェネレーターでは、最下位ビットのランダム動作が他のすべてのビットよりもわずかに少なくなっています。1ビット &lt;code&gt;exrop&lt;/code&gt; （及び &lt;code&gt;exsp&lt;/code&gt; ）、及び3ビット &lt;code&gt;exs1024s&lt;/code&gt; 。たとえば、 &lt;code&gt;&lt;a href=&quot;http://xoroshiro.di.unimi.it/xoroshiro128plus.c&quot;&gt; Xoroshiro128+ &lt;/a&gt;&lt;/code&gt; ジェネレータのソースコードの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b4ace9d1ca2981a9cd18df10d87d29953a8e657" translate="yes" xml:space="preserve">
          <source>For an &lt;code&gt;expand&lt;/code&gt; operation, function &lt;code&gt;&lt;a href=&quot;#expand-2&quot;&gt;expand/2&lt;/a&gt;&lt;/code&gt; is applied using the specified list of expansions.</source>
          <target state="translated">以下のために &lt;code&gt;expand&lt;/code&gt; 動作、機能は &lt;code&gt;&lt;a href=&quot;#expand-2&quot;&gt;expand/2&lt;/a&gt;&lt;/code&gt; 拡張の指定されたリストを使用して適用されます。</target>
        </trans-unit>
        <trans-unit id="d1056b60ca7562b1e4a108dcb68d59293982f277" translate="yes" xml:space="preserve">
          <source>For an Event-Driven State Machine, the input is an event that triggers a &lt;strong&gt;state transition&lt;/strong&gt; and the output is actions executed during the &lt;strong&gt;state transition&lt;/strong&gt;. Analogously to the mathematical model of a Finite State Machine, it can be described as a set of relations of the following form:</source>
          <target state="translated">イベントドリブンステートマシンの場合、入力は&lt;strong&gt;状態遷移&lt;/strong&gt;をトリガーするイベントであり、出力は&lt;strong&gt;状態遷移&lt;/strong&gt;中に実行されるアクションです。有限状態機械の数学モデルと同様に、次の形式の関係のセットとして説明できます。</target>
        </trans-unit>
        <trans-unit id="4f082714253155e9e4b9c287e894c6d37047edc6" translate="yes" xml:space="preserve">
          <source>For an Event-Driven State Machine, the input is an event that triggers a state transition and the output is actions executed during the state transition. It can analogously to the mathematical model of a Finite-State Machine be described as a set of relations of the following form:</source>
          <target state="translated">イベント駆動型の状態機械では、入力は状態遷移のきっかけとなるイベントであり、出力は状態遷移中に実行されたアクションである。有限状態マシンの数理モデルになぞらえて、次のような関係の集合として記述することができます。</target>
        </trans-unit>
        <trans-unit id="76f6690bd9624d886cabaea6bbcd06b6000537e0" translate="yes" xml:space="preserve">
          <source>For an agent, the &lt;code&gt;contextEngineID&lt;/code&gt; identified by a received message, is always equal to the &lt;code&gt;snmpEngineID&lt;/code&gt; of the agent. Otherwise, the message was not intended for the agent. If the agent is configured with more than one context, the instrumentation code must be able to figure out for which context the request was intended. There is a function &lt;code&gt;snmpa:current_context/0&lt;/code&gt; provided for this purpose.</source>
          <target state="translated">エージェントの場合、受信したメッセージで識別される &lt;code&gt;contextEngineID&lt;/code&gt; は、常にエージェントの &lt;code&gt;snmpEngineID&lt;/code&gt; と同じです。それ以外の場合、メッセージはエージェントを対象としたものではありませんでした。エージェントが複数のコンテキストで構成されている場合、インスツルメンテーションコードは、要求が意図されていたコンテキストを把握できなければなりません。この目的のために提供される関数 &lt;code&gt;snmpa:current_context/0&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="f3bc2b7de21e05f7d405b9e6a6fb885b43fd40ef" translate="yes" xml:space="preserve">
          <source>For an embedded type of type &lt;code&gt;SEQUENCE&lt;/code&gt;/&lt;code&gt;SET&lt;/code&gt; in a &lt;code&gt;SEQUENCE&lt;/code&gt;/&lt;code&gt;SET&lt;/code&gt;, the record name is extended with an underscore and the component name. If the embedded structure is deeper with the &lt;code&gt;SEQUENCE&lt;/code&gt;, &lt;code&gt;SET&lt;/code&gt;, or &lt;code&gt;CHOICE&lt;/code&gt; types in the line, each component name/alternative name is added to the record name.</source>
          <target state="translated">&lt;code&gt;SEQUENCE&lt;/code&gt; / &lt;code&gt;SET&lt;/code&gt; 内の &lt;code&gt;SEQUENCE&lt;/code&gt; / &lt;code&gt;SET&lt;/code&gt; 型の埋め込み型の場合、レコード名はアンダースコアとコンポーネント名で拡張されます。行に &lt;code&gt;SEQUENCE&lt;/code&gt; 、 &lt;code&gt;SET&lt;/code&gt; 、または &lt;code&gt;CHOICE&lt;/code&gt; タイプがあり、埋め込み構造がより深い場合、各コンポーネント名/代替名がレコード名に追加されます。</target>
        </trans-unit>
        <trans-unit id="db9b914a50ea213eeaadf7abbf256885b0534520" translate="yes" xml:space="preserve">
          <source>For an example, see &lt;code&gt;&lt;a href=&quot;using_public_key#hostname_extraction&quot;&gt;Hostname extraction&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">例については、 『ユーザーズガイド』の「 &lt;code&gt;&lt;a href=&quot;using_public_key#hostname_extraction&quot;&gt;Hostname extraction&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="b9f26ee9e370b307d43358104c78a349a182c793" translate="yes" xml:space="preserve">
          <source>For an example, see section &lt;code&gt;&lt;a href=&quot;ei_users_guide#building_terms_and_patterns&quot;&gt;Building Terms and Patterns&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">例については、ユーザーズガイドの「 &lt;code&gt;&lt;a href=&quot;ei_users_guide#building_terms_and_patterns&quot;&gt;Building Terms and Patterns&lt;/a&gt;&lt;/code&gt; の作成」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e73be3dbd6a651b582070d2f47a87461d0211b0c" translate="yes" xml:space="preserve">
          <source>For an inbound message from a transport process, a &lt;code&gt;&lt;a href=&quot;diameter_codec#packet&quot;&gt;diameter_codec:packet()&lt;/a&gt;&lt;/code&gt; must contain the received message in its &lt;code&gt;bin&lt;/code&gt; field. In the case of an inbound request, any value set in the &lt;code&gt;transport_data&lt;/code&gt; field will passed back to the transport module in the corresponding answer message, unless the sender supplies another value.</source>
          <target state="translated">トランスポートプロセスからの着信メッセージの場合、 &lt;code&gt;&lt;a href=&quot;diameter_codec#packet&quot;&gt;diameter_codec:packet()&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;bin&lt;/code&gt; フィールドに受信メッセージが含まれている必要があります。インバウンド要求の場合、 &lt;code&gt;transport_data&lt;/code&gt; フィールドに設定された値は、送信者が別の値を提供しない限り、対応する応答メッセージでトランスポートモジュールに戻されます。</target>
        </trans-unit>
        <trans-unit id="d90013faa2fae344a51e123e0b2ceb88a7231695" translate="yes" xml:space="preserve">
          <source>For an outbound message to a transport process, a &lt;code&gt;&lt;a href=&quot;diameter_codec#packet&quot;&gt;diameter_codec:packet()&lt;/a&gt;&lt;/code&gt; has a value other than &lt;code&gt;undefined&lt;/code&gt; in its &lt;code&gt;transport_data&lt;/code&gt; field and has the binary() to send in its &lt;code&gt;bin&lt;/code&gt; field.</source>
          <target state="translated">トランスポートプロセスへの発信メッセージの場合、 &lt;code&gt;&lt;a href=&quot;diameter_codec#packet&quot;&gt;diameter_codec:packet()&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;transport_data&lt;/code&gt; フィールドに &lt;code&gt;undefined&lt;/code&gt; 以外の値があり、 &lt;code&gt;bin&lt;/code&gt; フィールドに送信するbinary（）があります。</target>
        </trans-unit>
        <trans-unit id="9eb877ebc99bd1d46e3d1419f5e9e84b1039b246" translate="yes" xml:space="preserve">
          <source>For an unsuccesful initialization, &lt;code&gt;{stop,Reason}&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt; should be used; see &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">初期化に失敗した場合は、 &lt;code&gt;{stop,Reason}&lt;/code&gt; または &lt;code&gt;ignore&lt;/code&gt; を使用する必要があります。 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3,4&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="05e3b642659d0707266516623692c824f1087717" translate="yes" xml:space="preserve">
          <source>For an upgrade, &lt;code&gt;OldVsn&lt;/code&gt; is &lt;code&gt;Vsn&lt;/code&gt;, and for a downgrade, &lt;code&gt;OldVsn&lt;/code&gt; is &lt;code&gt;{down,Vsn}&lt;/code&gt;. &lt;code&gt;Vsn&lt;/code&gt; is defined by the &lt;code&gt;vsn&lt;/code&gt; attribute(s) of the old version of the callback module &lt;code&gt;Module&lt;/code&gt;. If no such attribute is defined, the version is the checksum of the Beam file.</source>
          <target state="translated">アップグレードの場合、 &lt;code&gt;OldVsn&lt;/code&gt; は &lt;code&gt;Vsn&lt;/code&gt; であり、ダウングレードの場合、 &lt;code&gt;OldVsn&lt;/code&gt; は &lt;code&gt;{down,Vsn}&lt;/code&gt; です。 &lt;code&gt;Vsn&lt;/code&gt; は、古いバージョンのコールバックモジュール &lt;code&gt;Module&lt;/code&gt; の &lt;code&gt;vsn&lt;/code&gt; 属性によって定義されます。そのような属性が定義されていない場合、バージョンはBeamファイルのチェックサムです。</target>
        </trans-unit>
        <trans-unit id="df78f85e8f5b913c9d946f7e5ed39f8ec980c09a" translate="yes" xml:space="preserve">
          <source>For any fun, &lt;code&gt;Item&lt;/code&gt; can be any of the atoms &lt;code&gt;module&lt;/code&gt;, &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;arity&lt;/code&gt;, &lt;code&gt;env&lt;/code&gt;, or &lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">どんな楽しみでも、 &lt;code&gt;Item&lt;/code&gt; は、atoms &lt;code&gt;module&lt;/code&gt; 、 &lt;code&gt;name&lt;/code&gt; 、 &lt;code&gt;arity&lt;/code&gt; 、 &lt;code&gt;env&lt;/code&gt; 、または &lt;code&gt;type&lt;/code&gt; のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="7413767989a803baaf4f577dc5831fc7b5d5d52a" translate="yes" xml:space="preserve">
          <source>For auto-imported BIFs added in Erlang/OTP R14A and thereafter, overriding the name with a local function or explicit import is always allowed. However, if the &lt;code&gt;-compile({no_auto_import,[F/A])&lt;/code&gt; directive is not used, the compiler issues a warning whenever the function is called in the module using the implicitly qualified function name.</source>
          <target state="translated">Erlang / OTP R14A以降で追加された自動インポートされたBIFの場合、ローカル関数または明示的なインポートで名前をオーバーライドすることが常に許可されます。ただし、 &lt;code&gt;-compile({no_auto_import,[F/A])&lt;/code&gt; ディレクティブが使用されていない場合、暗黙的に修飾された関数名を使用してモジュールで関数が呼び出されると、コンパイラーは警告を発行します。</target>
        </trans-unit>
        <trans-unit id="8ea74c138e3739dc00ed9db86f1e66db5ff4786a" translate="yes" xml:space="preserve">
          <source>For available options see &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt;cert_opt()&lt;/a&gt;&lt;/code&gt; under &lt;code&gt;&lt;a href=&quot;#pkix_test_data-1&quot;&gt;pkix_test_data/1&lt;/a&gt;&lt;/code&gt;.    A root certificate and key. The &lt;code&gt;Key&lt;/code&gt; is generated by &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">利用可能なオプションについては、 &lt;code&gt;&lt;a href=&quot;#pkix_test_data-1&quot;&gt;pkix_test_data/1&lt;/a&gt;&lt;/code&gt; の下のcert_opt &lt;code&gt;&lt;a href=&quot;#cert_opt&quot;&gt;cert_opt()&lt;/a&gt;&lt;/code&gt; 参照してください。ルート証明書とキー。 &lt;code&gt;Key&lt;/code&gt; によって生成され &lt;code&gt;&lt;a href=&quot;#generate_key-1&quot;&gt;generate_key/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a4e1d64e3d4cecd57f95679cb154ce8f95c46160" translate="yes" xml:space="preserve">
          <source>For background and more examples see the &lt;code&gt;&lt;a href=&quot;configure_algos#introduction&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">背景およびその他の例については、 『 &lt;code&gt;&lt;a href=&quot;configure_algos#introduction&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="5a65da47a406741061fb683aede365c2f1b59abf" translate="yes" xml:space="preserve">
          <source>For backward compatibility, &lt;code&gt;Name&lt;/code&gt; is also allowed to be a string. That will probably change in a future release.</source>
          <target state="translated">下位互換性のために、 &lt;code&gt;Name&lt;/code&gt; も文字列にすることができます。それはおそらく将来のリリースで変更されるでしょう。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
