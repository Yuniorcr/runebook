<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="96944a938969e87b4c95a2f4e616168d80a2498e" translate="yes" xml:space="preserve">
          <source>This function is prefered to the old &lt;code&gt;Module:add_host_key/3&lt;/code&gt; since it also uses the peer host port number and may return an error message.</source>
          <target state="translated">この関数は、 &lt;code&gt;Module:add_host_key/3&lt;/code&gt; ポート番号も使用し、エラーメッセージを返す可能性があるため、古いModule：add_host_key / 3よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="7f73d9ee417d276ccc051fe8c7286c91cdfa3ca2" translate="yes" xml:space="preserve">
          <source>This function is prefered to the old &lt;code&gt;Module:is_host_key/4&lt;/code&gt; since it also uses the peer host port number and may return an error message.</source>
          <target state="translated">この関数は、 &lt;code&gt;Module:is_host_key/4&lt;/code&gt; ポート番号も使用し、エラーメッセージを返す可能性があるため、古いModule：is_host_key / 4よりも優先されます。</target>
        </trans-unit>
        <trans-unit id="98cecf54e230f7f661ec7cac637bf313533f3b79" translate="yes" xml:space="preserve">
          <source>This function is primarily intended for debugging purpose.</source>
          <target state="translated">この関数は主にデバッグを目的としたものです。</target>
        </trans-unit>
        <trans-unit id="17f026cbf93039d50d6677012488768de3756669" translate="yes" xml:space="preserve">
          <source>This function is primarily intended for debugging purpose. It is not recommended to print very large terms with &lt;code&gt;%T&lt;/code&gt;. The function may change &lt;code&gt;errno&lt;/code&gt;, even if successful.</source>
          <target state="translated">この関数は、主にデバッグを目的としています。 &lt;code&gt;%T&lt;/code&gt; を使用して非常に大きな用語を印刷することはお勧めしません。成功した場合でも、関数は &lt;code&gt;errno&lt;/code&gt; を変更する場合があります。</target>
        </trans-unit>
        <trans-unit id="8c84159cb077e05ce5ab18f138db97ded3cd0f6a" translate="yes" xml:space="preserve">
          <source>This function is primarily useful in load regulation scenarios.</source>
          <target state="translated">この機能は、主に負荷変動のシナリオで有用です。</target>
        </trans-unit>
        <trans-unit id="6d1c283b0d188ab1dc083d2737684fc3b5d9bcb5" translate="yes" xml:space="preserve">
          <source>This function is primarily useful in testing/debugging scenarios.</source>
          <target state="translated">この機能は、主にシナリオのテスト/デバッグに役立ちます。</target>
        </trans-unit>
        <trans-unit id="11584ee6be5c439d09214f1f99df3af124d2da3b" translate="yes" xml:space="preserve">
          <source>This function is probably mainly useful when called from outside of Erlang, for example from a driver written in C.</source>
          <target state="translated">この関数は主にErlangの外から呼ばれるときに便利です。</target>
        </trans-unit>
        <trans-unit id="4f09fd5f852628b21d18838bb6ca42850a7a35b0" translate="yes" xml:space="preserve">
          <source>This function is provided to better support co-operative scheduling, improve system responsiveness, and make it easier to prevent misbehaviors of the VM because of a NIF monopolizing a scheduler thread. It can be used to divide &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt; length work&lt;/a&gt;&lt;/code&gt; into a number of repeated NIF calls without the need to create threads.</source>
          <target state="translated">この機能は、協調スケジューリングをより適切にサポートし、システムの応答性を向上させ、NIFがスケジューラスレッドを独占することによるVMの誤動作の防止を容易にするために提供されています。スレッドを作成することなく、 &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt; length work&lt;/a&gt;&lt;/code&gt; を多数の繰り返されるNIF呼び出しに分割するために使用できます。</target>
        </trans-unit>
        <trans-unit id="353504af3c988d4810cedc709216e313aaafe762" translate="yes" xml:space="preserve">
          <source>This function is provided to better support co-operative scheduling, improve system responsiveness, and make it easier to prevent misbehaviors of the VM because of a NIF monopolizing a scheduler thread. It can be used to divide &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;length work&lt;/a&gt;&lt;/code&gt; into a number of repeated NIF calls without the need to create threads.</source>
          <target state="translated">この機能は、協調スケジューリングをより適切にサポートし、システムの応答性を向上させ、NIFがスケジューラスレッドを独占するためにVMの誤動作を簡単に防ぐために提供されています。スレッドを作成する必要なく、 &lt;code&gt;&lt;a href=&quot;#lengthy_work&quot;&gt;length work&lt;/a&gt;&lt;/code&gt; を多数の繰り返されるNIF呼び出しに分割するために使用できます。</target>
        </trans-unit>
        <trans-unit id="5db90f14f3c432301e447b05ad0cb6592973631a" translate="yes" xml:space="preserve">
          <source>This function is provided to better support co-operative scheduling, improve system responsiveness, and to make it easier to prevent misbehaviors of the VM because of a port monopolizing a scheduler thread. It can be used when dividing lengthy work into some repeated driver callback calls, without the need to use threads.</source>
          <target state="translated">この機能は、協調スケジューリングのサポートを強化し、システムの応答性を向上させ、ポートがスケジューラスレッドを独占することによるVMの誤動作を防ぎやすくするために提供されています。長時間の作業をいくつかのドライバコールバックコールの繰り返しに分割して行う場合に、スレッドを使わずに利用することができます。</target>
        </trans-unit>
        <trans-unit id="3bd60d1367a2a2c9bf42897b1642d4f588cea06f" translate="yes" xml:space="preserve">
          <source>This function is rarely needed in application code. It is used by Mnesia to provide distributed &lt;code&gt;select/3&lt;/code&gt; and &lt;code&gt;select/1&lt;/code&gt; sequences. A normal application would either use Mnesia or keep the continuation from being converted to external format.</source>
          <target state="translated">この関数がアプリケーションコードで必要になることはほとんどありません。Mnesiaは、分散した &lt;code&gt;select/3&lt;/code&gt; および &lt;code&gt;select/1&lt;/code&gt; シーケンスを提供するために使用します。通常のアプリケーションでは、Mnesiaを使用するか、継続が外部形式に変換されないようにします。</target>
        </trans-unit>
        <trans-unit id="5802ba7a3becc5d64b340383668b0fe991f19bfe" translate="yes" xml:space="preserve">
          <source>This function is rarely needed in application code. It is used by application Mnesia to provide distributed &lt;code&gt;select/3&lt;/code&gt; and &lt;code&gt;select/1&lt;/code&gt; sequences. A normal application would either use Mnesia or keep the continuation from being converted to external format.</source>
          <target state="translated">この関数がアプリケーションコードで必要になることはほとんどありません。これは、アプリケーションMnesiaが分散した &lt;code&gt;select/3&lt;/code&gt; および &lt;code&gt;select/1&lt;/code&gt; シーケンスを提供するために使用します。通常のアプリケーションでは、Mnesiaを使用するか、継続が外部形式に変換されないようにします。</target>
        </trans-unit>
        <trans-unit id="650535937ca4ee466c191b80e09fe3d66b3c7b8e" translate="yes" xml:space="preserve">
          <source>This function is retained for backward compatibility. Function &lt;code&gt;&lt;a href=&quot;#keyfind-3&quot;&gt;keyfind/3&lt;/a&gt;&lt;/code&gt; is usually more convenient.</source>
          <target state="translated">この関数は、下位互換性のために保持されています。関数 &lt;code&gt;&lt;a href=&quot;#keyfind-3&quot;&gt;keyfind/3&lt;/a&gt;&lt;/code&gt; は通常より便利です。</target>
        </trans-unit>
        <trans-unit id="6fd26f567334e9666b6ef2abb401ce9925581958" translate="yes" xml:space="preserve">
          <source>This function is retained for compatibility with code generated by the interface compiler and with code following examples in the same application.</source>
          <target state="translated">この関数は、インターフェイスコンパイラで生成されたコードや、同じアプリケーション内の例に続くコードとの互換性を保つために保持されます。</target>
        </trans-unit>
        <trans-unit id="2ec3a9c47a6657144eaa21b3b30c6a1d0a500e42" translate="yes" xml:space="preserve">
          <source>This function is retired in favour for &lt;code&gt;Module:add_host_key/4&lt;/code&gt; which is the prefered API function. The calling SSH application will still try the &lt;code&gt;add_host_key/3&lt;/code&gt; if the call to &lt;code&gt;add_host_key/4&lt;/code&gt; failed.</source>
          <target state="translated">この関数は廃止され、優先されるAPI関数である &lt;code&gt;Module:add_host_key/4&lt;/code&gt; が優先されます。 &lt;code&gt;add_host_key/4&lt;/code&gt; の呼び出しが失敗した場合でも、呼び出し元のSSHアプリケーションは &lt;code&gt;add_host_key/3&lt;/code&gt; を試行します。</target>
        </trans-unit>
        <trans-unit id="8e78105846a08290dcf6601bbb2dd5b4df92b17b" translate="yes" xml:space="preserve">
          <source>This function is retired in favour for &lt;code&gt;Module:is_host_key/5&lt;/code&gt; which is the prefered API function. The calling SSH application will still try the &lt;code&gt;is_host_key/4&lt;/code&gt; if the call to &lt;code&gt;is_host_key/5&lt;/code&gt; failed.</source>
          <target state="translated">この関数は廃止され、優先されるAPI関数である &lt;code&gt;Module:is_host_key/5&lt;/code&gt; が優先されます。 &lt;code&gt;is_host_key/5&lt;/code&gt; の呼び出しが失敗した場合でも、呼び出し側のSSHアプリケーションは &lt;code&gt;is_host_key/4&lt;/code&gt; を試行します。</target>
        </trans-unit>
        <trans-unit id="04dbb81151f11a2a8e21a08672e2edd99a02d468" translate="yes" xml:space="preserve">
          <source>This function is shorthand for &lt;code&gt;init:stop()&lt;/code&gt;, that is, it causes the node to stop in a controlled fashion.</source>
          <target state="translated">この関数は &lt;code&gt;init:stop()&lt;/code&gt; の省略形です。つまり、制御された方法でノードを停止させます。</target>
        </trans-unit>
        <trans-unit id="4e31e42d4190f9153fc006e0f381fb267c91b114" translate="yes" xml:space="preserve">
          <source>This function is synchronous, which means that it will return when the discovery process has been completed or failed.</source>
          <target state="translated">この関数は同期的であり、発見処理が完了したとき、または失敗したときに戻ることを意味します。</target>
        </trans-unit>
        <trans-unit id="150a92472ac42c9c7a48db8f21312fa587e954eb" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;code&gt;&lt;a href=&quot;#getaddrinfo-1&quot;&gt;getaddrinfo&lt;/a&gt;&lt;/code&gt;. It converts a socket address to a corresponding host and service.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#getaddrinfo-1&quot;&gt;getaddrinfo&lt;/a&gt;&lt;/code&gt; の逆です。ソケットアドレスを対応するホストとサービスに変換します。</target>
        </trans-unit>
        <trans-unit id="1b12149d93ef786b7d3d69bbe25e8a31d0409df0" translate="yes" xml:space="preserve">
          <source>This function is the inverse of &lt;code&gt;&lt;a href=&quot;#getnameinfo-1&quot;&gt;getnameinfo&lt;/a&gt;&lt;/code&gt;. It converts host and service to a corresponding socket address.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#getnameinfo-1&quot;&gt;getnameinfo&lt;/a&gt;&lt;/code&gt; の逆です。ホストとサービスを対応するソケットアドレスに変換します。</target>
        </trans-unit>
        <trans-unit id="83e3218f152791a8b7bcc054591cf10cd806a3e6" translate="yes" xml:space="preserve">
          <source>This function is the only way for a driver to send data to &lt;strong&gt;other&lt;/strong&gt; processes than the port owner process. Parameter &lt;code&gt;receiver&lt;/code&gt; specifies the process to receive the data.</source>
          <target state="translated">この関数は、ドライバーがポート所有者プロセス&lt;strong&gt;以外の&lt;/strong&gt;プロセスにデータを送信する唯一の方法です。パラメーター &lt;code&gt;receiver&lt;/code&gt; は、データを受信するプロセスを指定します。</target>
        </trans-unit>
        <trans-unit id="5d488a4d40159f9a0721dbdd5dad71579d3aee31" translate="yes" xml:space="preserve">
          <source>This function is thread-safe.</source>
          <target state="translated">この関数はスレッドセーフです。</target>
        </trans-unit>
        <trans-unit id="b9706d58a2352e8890b72cebf3416ed3ffff9ffe" translate="yes" xml:space="preserve">
          <source>This function is to be repeatedly called, while it returns &lt;code&gt;{more, Decompressed}&lt;/code&gt;.</source>
          <target state="translated">この関数は &lt;code&gt;{more, Decompressed}&lt;/code&gt; 返す間、繰り返し呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6fe9a923027f6092daec4890f5b0a9af15bfddae" translate="yes" xml:space="preserve">
          <source>This function is used by &lt;code&gt;erl_interface&lt;/code&gt; to create the Mnesia table if it does not already exist.</source>
          <target state="translated">&lt;code&gt;erl_interface&lt;/code&gt; がこの関数を使用して、Mnesiaテーブルがまだ存在しない場合に作成します。</target>
        </trans-unit>
        <trans-unit id="e0ea944547ae0efb5c6ac097415a9890edb2fa66" translate="yes" xml:space="preserve">
          <source>This function is used by a process module to take care of system messages. The process receives a &lt;code&gt;{system, From, Msg}&lt;/code&gt; message and passes &lt;code&gt;Msg&lt;/code&gt; and &lt;code&gt;From&lt;/code&gt; to this function.</source>
          <target state="translated">この関数は、システムメッセージを処理するためにプロセスモジュールによって使用されます。プロセスは &lt;code&gt;{system, From, Msg}&lt;/code&gt; メッセージを受け取り、 &lt;code&gt;Msg&lt;/code&gt; と &lt;code&gt;From&lt;/code&gt; をこの関数に渡します。</target>
        </trans-unit>
        <trans-unit id="e2a112b495b39abcd5586ec3664e29d01231ac87" translate="yes" xml:space="preserve">
          <source>This function is used by a server process to accept a connection from a client process.</source>
          <target state="translated">この関数は、サーバプロセスがクライアントプロセスからの接続を受け入れるために使用されます。</target>
        </trans-unit>
        <trans-unit id="898bb0d30e504dc801429a9370b05b766f512338" translate="yes" xml:space="preserve">
          <source>This function is used by a server process to register with the local name server EPMD, thereby allowing other processes to send messages by using the registered name. Before calling this function, the process should have called &lt;code&gt;bind()&lt;/code&gt; and &lt;code&gt;listen()&lt;/code&gt; on an open socket.</source>
          <target state="translated">この機能は、ローカルネームサーバーEPMDに登録するサーバープロセスによって使用されます。これにより、他のプロセスが登録された名前を使用してメッセージを送信できるようになります。この関数を呼び出す前に、プロセスは開いているソケットで &lt;code&gt;bind()&lt;/code&gt; および &lt;code&gt;listen()&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="70ccee3033b802a87c1b5086a81572b1cdf9f072" translate="yes" xml:space="preserve">
          <source>This function is used by drivers to provide the emulator with events to check for. This enables the emulator to call the driver when something has occurred asynchronously.</source>
          <target state="translated">この関数は、ドライバがエミュレータにチェックすべきイベントを提供するために使用されます。これにより、何かが非同期的に発生したときにエミュレータがドライバを呼び出すことができるようになります。</target>
        </trans-unit>
        <trans-unit id="563d0e5f94af6836101c3632fc208eb6264d3ee8" translate="yes" xml:space="preserve">
          <source>This function is used by functions &lt;code&gt;&lt;a href=&quot;c#i-0&quot;&gt;c:i/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;c#regs-0&quot;&gt;c:regs/0&lt;/a&gt;&lt;/code&gt; to present process information.</source>
          <target state="translated">この関数は、プロセス情報を表示するために関数 &lt;code&gt;&lt;a href=&quot;c#i-0&quot;&gt;c:i/0&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;c#regs-0&quot;&gt;c:regs/0&lt;/a&gt;&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="73986afc84809f75a6e12a693ebaed3b04b098c2" translate="yes" xml:space="preserve">
          <source>This function is used by the &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format/3&lt;/a&gt;&lt;/code&gt; function to prepare a document before being laid out as text.</source>
          <target state="translated">この関数は、テキストとしてレイアウトされる前にドキュメントを準備するために &lt;code&gt;&lt;a href=&quot;#format-3&quot;&gt;format/3&lt;/a&gt;&lt;/code&gt; 関数によって使用されます。</target>
        </trans-unit>
        <trans-unit id="af91dcbbafd0b245aac20abd673102bff806bdf0" translate="yes" xml:space="preserve">
          <source>This function is used for closing an active TPKT connection.</source>
          <target state="translated">この機能は、アクティブな TPKT 接続を閉じるために使用します。</target>
        </trans-unit>
        <trans-unit id="341959533bbd5fb6c13fba9bb6518b33337f67e1" translate="yes" xml:space="preserve">
          <source>This function is used for closing an active UDP socket.</source>
          <target state="translated">この関数は、アクティブなUDPソケットを閉じるために使用される。</target>
        </trans-unit>
        <trans-unit id="c203b5dc275784f420edfae2f16a2aed1ae6aa56" translate="yes" xml:space="preserve">
          <source>This function is used for starting new TPKT listening socket for TCP/IP. The option list contains the socket definitions.</source>
          <target state="translated">この関数は、TCP/IP の新しい TPKT リスニングソケットを起動するために使用します。オプションリストにはソケットの定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="77b263a5f923ead126acb1e02db37792ff404de1" translate="yes" xml:space="preserve">
          <source>This function is used for starting the TCP/IP transport service. Use exit(TransportRef, Reason) to stop the transport service.</source>
          <target state="translated">この関数は、TCP/IP トランスポートサービスを開始するために使用します。トランスポートサービスを停止するには、exit(TransportRef,Reason)を使用します。</target>
        </trans-unit>
        <trans-unit id="03f7bc8e389fa4c3de41f19125ec838b559c7fc6" translate="yes" xml:space="preserve">
          <source>This function is used for starting the UDP/IP transport service. Use exit(TransportRef, Reason) to stop the transport service.</source>
          <target state="translated">この関数は、UDP/IPトランスポートサービスを開始するために使用する。トランスポートサービスを停止するには、exit(TransportRef,Reason)を使用する。</target>
        </trans-unit>
        <trans-unit id="8eb43517a5b84f85e08e21015c8ab03e885b41f1" translate="yes" xml:space="preserve">
          <source>This function is used for stepping over one or more encoded terms in a buffer, to directly access later term.</source>
          <target state="translated">この関数は、バッファ内の1つ以上の符号化された項をステップオーバーして、後の項に直接アクセスするために使用されます。</target>
        </trans-unit>
        <trans-unit id="9487b4eae0bc40d60b1b4e845725399492924f17" translate="yes" xml:space="preserve">
          <source>This function is used in conjunction with the monitor function.</source>
          <target state="translated">モニター機能と併用して使用します。</target>
        </trans-unit>
        <trans-unit id="2f9f35e4a07c284d87e14bf146829705627cc610" translate="yes" xml:space="preserve">
          <source>This function is used to change the megaco trace level.</source>
          <target state="translated">この関数は、メガコのトレースレベルを変更するために使用します。</target>
        </trans-unit>
        <trans-unit id="2fe77e313940172591551e60898f1f31caf15867" translate="yes" xml:space="preserve">
          <source>This function is used to check if a previously received message, for example by &lt;code&gt;receive&lt;/code&gt; or &lt;code&gt;handle_info/2&lt;/code&gt;, is a result of a request made with &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Msg&lt;/code&gt; is a reply to the handle &lt;code&gt;RequestId&lt;/code&gt; the result of the request is returned in &lt;code&gt;Reply&lt;/code&gt;. Otherwise returns &lt;code&gt;no_reply&lt;/code&gt; and no cleanup is done, and thus the function must be invoked repeatedly until a reply is returned.</source>
          <target state="translated">この関数は、たとえば &lt;code&gt;receive&lt;/code&gt; または &lt;code&gt;handle_info/2&lt;/code&gt; によって以前に受信されたメッセージが、 &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; で行われた要求の結果であるかどうかを確認するために使用されます。 &lt;code&gt;Msg&lt;/code&gt; がハンドル &lt;code&gt;RequestId&lt;/code&gt; への応答である場合、要求の結果は &lt;code&gt;Reply&lt;/code&gt; で返されます。それ以外の場合は &lt;code&gt;no_reply&lt;/code&gt; を返し、クリーンアップは実行されないため、応答が返されるまで関数を繰り返し呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1d0589fc6f384589ed19cac5275eb2aa5617dc52" translate="yes" xml:space="preserve">
          <source>This function is used to check if a previously received message, for example by &lt;code&gt;receive&lt;/code&gt; or &lt;code&gt;handle_info/2&lt;/code&gt;, is a result of a request made with &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Msg&lt;/code&gt; is a reply to the handle &lt;code&gt;RequestId&lt;/code&gt; the result of the request is returned in &lt;code&gt;Reply&lt;/code&gt;. Otherwise returns &lt;code&gt;no_reply&lt;/code&gt; and no cleanup is done, and thus the function shall be invoked repeatedly until a reply is returned.</source>
          <target state="translated">この関数は、たとえば &lt;code&gt;receive&lt;/code&gt; または &lt;code&gt;handle_info/2&lt;/code&gt; によって以前に受信されたメッセージが、 &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; で行われた要求の結果であるかどうかを確認するために使用されます。 &lt;code&gt;Msg&lt;/code&gt; がハンドル &lt;code&gt;RequestId&lt;/code&gt; への応答である場合、要求の結果は &lt;code&gt;Reply&lt;/code&gt; で返されます。それ以外の場合は &lt;code&gt;no_reply&lt;/code&gt; を返し、クリーンアップは実行されないため、応答が返されるまで関数が繰り返し呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b8c0870f45ffc4ca4a9ca9e31e399ae3114cd98e" translate="yes" xml:space="preserve">
          <source>This function is used to check if a previously received message, for example by &lt;code&gt;receive&lt;/code&gt; or &lt;code&gt;handle_info/2&lt;/code&gt;, is a result of a request made with &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt;send_request/3&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Msg&lt;/code&gt; is a reply to the handle &lt;code&gt;RequestId&lt;/code&gt; the result of the request is returned in &lt;code&gt;Reply&lt;/code&gt;. Otherwise returns &lt;code&gt;no_reply&lt;/code&gt; and no cleanup is done, and thus the function shall be invoked repeatedly until a reply is returned.</source>
          <target state="translated">この関数は、たとえば &lt;code&gt;receive&lt;/code&gt; または &lt;code&gt;handle_info/2&lt;/code&gt; によって以前に受信されたメッセージが、 &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt;send_request/3&lt;/a&gt;&lt;/code&gt; で行われた要求の結果であるかどうかを確認するために使用されます。 &lt;code&gt;Msg&lt;/code&gt; がハンドル &lt;code&gt;RequestId&lt;/code&gt; への応答である場合、要求の結果は &lt;code&gt;Reply&lt;/code&gt; で返されます。それ以外の場合は &lt;code&gt;no_reply&lt;/code&gt; を返し、クリーンアップは実行されないため、応答が返されるまで関数が繰り返し呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9905970e8ef361713ff0dc6a231017daa7b1f422" translate="yes" xml:space="preserve">
          <source>This function is used to convert a socket_handle() to a inet_socket(). inet_socket() is a plain socket, see the inet module for more info.</source>
          <target state="translated">この関数は socket_handle()を inet_socket()に変換するために使用します。</target>
        </trans-unit>
        <trans-unit id="872fb743adffaedcd340beb243b7412272596a11" translate="yes" xml:space="preserve">
          <source>This function is used to do a control operation on the active trace port driver on the given node (&lt;code&gt;Nodename&lt;/code&gt;). Which operations are allowed as well as their return values depend on which trace driver is used.</source>
          <target state="translated">この関数は、指定されたノード（ &lt;code&gt;Nodename&lt;/code&gt; ）のアクティブなトレースポートドライバーで制御操作を実行するために使用されます。許可される操作とその戻り値は、使用するトレースドライバーによって異なります。</target>
        </trans-unit>
        <trans-unit id="322561e5d565d22195eae197df02cf59dd3cfda9" translate="yes" xml:space="preserve">
          <source>This function is used to flush the internal buffers held by a trace port driver. Currently only the file trace driver supports this operation. Returns &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">この関数は、トレースポートドライバーが保持する内部バッファーをフラッシュするために使用されます。現在、ファイルトレースドライバーのみがこの操作をサポートしています。 &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="34e95da5a86e41022a5ff2d5944cdec50a72a3f2" translate="yes" xml:space="preserve">
          <source>This function is used to get the machines interface addresses, possibly filtered according to &lt;code&gt;Filter&lt;/code&gt;.</source>
          <target state="translated">この関数は、マシンのインターフェイスアドレスを取得するために使用され、場合によっては &lt;code&gt;Filter&lt;/code&gt; に従ってフィルタリングされます。</target>
        </trans-unit>
        <trans-unit id="d09103efe5f0276f6c79d552dc6e48c891087e8e" translate="yes" xml:space="preserve">
          <source>This function is used to open a TPKT connection.</source>
          <target state="translated">この機能は、TPKT 接続を開くために使用します。</target>
        </trans-unit>
        <trans-unit id="757eb6e7834e636a4181b74283f0227f0e2ffefa" translate="yes" xml:space="preserve">
          <source>This function is used to open an UDP/IP socket.</source>
          <target state="translated">この機能は、UDP/IP ソケットを開くために使用します。</target>
        </trans-unit>
        <trans-unit id="810c1759ff4f2ee4359ad6e55e1e0716e8de8e16" translate="yes" xml:space="preserve">
          <source>This function is used to perform pattern matching similar to that done in Erlang. For matching rules and more examples, see section &lt;code&gt;Pattern Matching&lt;/code&gt; in the Erlang Reference Manual.</source>
          <target state="translated">この関数は、Erlangで実行されるのと同様のパターンマッチングを実行するために使用されます。マッチングルールとその他の例については、Erlangリファレンスマニュアルのセクション &lt;code&gt;Pattern Matching&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8225c2b0b7a823b2c3db31843555cf08b0b1c58a" translate="yes" xml:space="preserve">
          <source>This function is used to reset (disable) trace for the given module(s).</source>
          <target state="translated">この関数は、指定されたモジュールのトレースをリセット(無効化)するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5e4eb0cb134962fb3cf2970562621b143268d3f7" translate="yes" xml:space="preserve">
          <source>This function is used to set up default trace on function(s) for the given module or modules. The scope of the trace will be all &lt;strong&gt;exported&lt;/strong&gt; functions (both the call info and the return value). Timestamp info will also be included.</source>
          <target state="translated">この関数は、指定された1つまたは複数のモジュールの関数にデフォルトのトレースを設定するために使用されます。トレースのスコープは、すべての&lt;strong&gt;エクスポートされた&lt;/strong&gt;関数（呼び出し情報と戻り値の両方）です。タイムスタンプ情報も含まれます。</target>
        </trans-unit>
        <trans-unit id="cb8a8d71cb3f7af3283d816d0841f08d24b9568d" translate="yes" xml:space="preserve">
          <source>This function is used to set up trace on function(s) for the given module or modules.</source>
          <target state="translated">この関数は、与えられたモジュールまたはモジュールのトレースオン関数を設定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="03c0831d3d5485f7597cd0b7a56cfb11e2d8d606" translate="yes" xml:space="preserve">
          <source>This function is used to start megaco tracing at a given &lt;code&gt;Level&lt;/code&gt; and direct result to the given &lt;code&gt;Destination&lt;/code&gt;.</source>
          <target state="translated">この関数は、指定された &lt;code&gt;Level&lt;/code&gt; でメガコトレースを開始し、指定された &lt;code&gt;Destination&lt;/code&gt; に結果を送信するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5198a41fa4397f2b825350859ef9349761d440d3" translate="yes" xml:space="preserve">
          <source>This function is used to start the flex scanner. It locates the library and loads the linked in driver.</source>
          <target state="translated">この関数は、フレックス・スキャナーを起動するために使用します。ライブラリを検索し、リンクされたドライバをロードします。</target>
        </trans-unit>
        <trans-unit id="9cbb65fd2f2f55ed5a8fdfcfbb54dede2d39cbef" translate="yes" xml:space="preserve">
          <source>This function is used to stop megaco tracing.</source>
          <target state="translated">この関数は、メガコトレースを停止するために使用されます。</target>
        </trans-unit>
        <trans-unit id="aa9a7f11a1203465f0dab2a3fff9289e46f67958" translate="yes" xml:space="preserve">
          <source>This function is used to stop the flex scanner. It also unloads the driver.</source>
          <target state="translated">フレックススキャナの停止に使用します。また、ドライバのアンロードも行います。</target>
        </trans-unit>
        <trans-unit id="e8a075a6ae0116d88a212adb66cf154d84ef51cc" translate="yes" xml:space="preserve">
          <source>This function is used to wait for a reply of a request made with &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;gen_server&lt;/code&gt; process. This function must be called from the same process from which &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; was made.</source>
          <target state="translated">この関数は、 &lt;code&gt;gen_server&lt;/code&gt; プロセスから &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; で行われた要求の応答を待機するために使用されます。この関数は、 &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; が作成されたのと同じプロセスから呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="518ba4fb55f90139dcdab88d5abe032b9b970f77" translate="yes" xml:space="preserve">
          <source>This function is used to wait for a reply of a request made with &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; from the &lt;code&gt;gen_statem&lt;/code&gt; process. This function must be called from the same process from which &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; was made.</source>
          <target state="translated">この関数は、 &lt;code&gt;gen_statem&lt;/code&gt; プロセスから &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; で行われた要求の応答を待機するために使用されます。この関数は、 &lt;code&gt;&lt;a href=&quot;#send_request-2&quot;&gt;send_request/2&lt;/a&gt;&lt;/code&gt; が作成されたのと同じプロセスから呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="8fbf7b175bd6a91d71de3da23ac87dc3b0142537" translate="yes" xml:space="preserve">
          <source>This function is used to wait for a reply of a request made with &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt;send_request/3&lt;/a&gt;&lt;/code&gt; from the event manager. This function must be called from the same process from which &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt;send_request/3&lt;/a&gt;&lt;/code&gt; was made.</source>
          <target state="translated">この関数は、イベントマネージャから &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt;send_request/3&lt;/a&gt;&lt;/code&gt; で行われた要求の応答を待機するために使用されます。この関数は、 &lt;code&gt;&lt;a href=&quot;#send_request-3&quot;&gt;send_request/3&lt;/a&gt;&lt;/code&gt; が作成されたのと同じプロセスから呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="1834d21edb25fe321739aff4973157dc0f8ba281" translate="yes" xml:space="preserve">
          <source>This function is used when implementing an alternative distribution carrier using processes as distribution controllers. &lt;code&gt;DHandle&lt;/code&gt; is retrived via the callback &lt;code&gt;f_handshake_complete&lt;/code&gt;. More information can be found in the documentation of &lt;code&gt;ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module&lt;/code&gt;.</source>
          <target state="translated">この関数は、プロセスを配布コントローラーとして使用して代替配布キャリアを実装するときに使用されます。 &lt;code&gt;DHandle&lt;/code&gt; は、コールバック &lt;code&gt;f_handshake_complete&lt;/code&gt; を介して取得されます。詳細については、 &lt;code&gt;ERTS User's Guide ➜ How to implement an Alternative Carrier for the Erlang Distribution ➜ Distribution Module&lt;/code&gt; ドキュメント➜Erlangディストリビューションの代替キャリアを実装する方法➜ディストリビューションモジュールのドキュメントをご覧ください。</target>
        </trans-unit>
        <trans-unit id="44824ba63eb3b307aabd6873ec5a1a332b6ba401" translate="yes" xml:space="preserve">
          <source>This function is used when segmentation has been configured. So, for this to work, this function &lt;strong&gt;must&lt;/strong&gt; be fully supported!</source>
          <target state="translated">この機能は、セグメンテーションが構成されている場合に使用されます。したがって、これが機能するに&lt;strong&gt;は&lt;/strong&gt;、この機能が完全にサポートされている&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="12a35f0dbe51b5e3f1ecec001171f5281b1d71b2" translate="yes" xml:space="preserve">
          <source>This function is useful as a shortcut during development and testing, but must not be used in a production system. See section &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide, and the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; manual page for information about how to configure Logger for live systems.</source>
          <target state="translated">この関数は、開発およびテスト中のショートカットとして役立ちますが、実動システムでは使用しないでください。ライブシステム用にロガーを構成する方法については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; 」セクション、および &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="0e08d85e1b9bab386f133ff706c8c19be0cec717" translate="yes" xml:space="preserve">
          <source>This function is useful for changing the form and appearance of the &lt;code&gt;gen_server&lt;/code&gt; status for these cases. A callback module wishing to change the &lt;code&gt;sys:get_status/1,2&lt;/code&gt; return value, as well as how its status appears in termination error logs, exports an instance of &lt;code&gt;format_status/2&lt;/code&gt; that returns a term describing the current status of the &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">この関数は、これらの場合に &lt;code&gt;gen_server&lt;/code&gt; ステータスの形式と外観を変更するのに役立ちます。 &lt;code&gt;sys:get_status/1,2&lt;/code&gt; の戻り値と、そのステータスが終了エラーログにどのように表示されるかを変更するコールバックモジュールは、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの現在のステータスを説明する用語を返す &lt;code&gt;format_status/2&lt;/code&gt; のインスタンスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="09f573635e783a4ad23c419f9139aab803708c3f" translate="yes" xml:space="preserve">
          <source>This function is useful for changing the form and appearance of the &lt;code&gt;gen_statem&lt;/code&gt; status for these cases. A callback module wishing to change the &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; return value and how its status appears in termination error logs exports an instance of &lt;code&gt;format_status/2&lt;/code&gt;, which returns a term describing the current status of the &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">この関数は、これらのケースの &lt;code&gt;gen_statem&lt;/code&gt; ステータスの形式と外観を変更するのに役立ちます。 &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の戻り値と、終了エラーログにそのステータスがどのように表示されるかを変更するコールバックモジュールは、 &lt;code&gt;format_status/2&lt;/code&gt; のインスタンスをエクスポートします。これは、 &lt;code&gt;gen_statem&lt;/code&gt; の現在のステータスを説明する用語を返します。</target>
        </trans-unit>
        <trans-unit id="b7792553fb70da23062b7be9ff4e7b99b4bb7f20" translate="yes" xml:space="preserve">
          <source>This function is useful for changing the form and appearance of the event handler state for these cases. An event handler callback module wishing to change the the &lt;code&gt;sys:get_status/1,2&lt;/code&gt; return value as well as how its state appears in termination error logs, exports an instance of &lt;code&gt;format_status/2&lt;/code&gt; that returns a term describing the current state of the event handler.</source>
          <target state="translated">この関数は、これらの場合にイベントハンドラーの状態の形式と外観を変更するのに役立ちます。 &lt;code&gt;sys:get_status/1,2&lt;/code&gt; の戻り値とその状態が終了エラーログにどのように表示されるかを変更するイベントハンドラーコールバックモジュールは、イベントハンドラーの現在の状態を説明する用語を返す &lt;code&gt;format_status/2&lt;/code&gt; のインスタンスをエクスポートします。</target>
        </trans-unit>
        <trans-unit id="610385401f6f02f433fd707df3e351fe5fa74f60" translate="yes" xml:space="preserve">
          <source>This function is useful if coverage data from different systems is to be merged.</source>
          <target state="translated">この関数は、異なるシステムのカバレッジデータをマージする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="98a04423b1194d9a1f5fa9b90393dfa8d11918f4" translate="yes" xml:space="preserve">
          <source>This function is useful when a more complex initialization procedure is needed than the &lt;code&gt;gen_server&lt;/code&gt; process behavior provides.</source>
          <target state="translated">この関数は、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの動作よりも複雑な初期化手順が必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="8e0b171472c534adf0757b7201fbb51bc8b8ffd0" translate="yes" xml:space="preserve">
          <source>This function is useful when a more complex initialization procedure is needed than the &lt;code&gt;gen_statem&lt;/code&gt; behavior provides.</source>
          <target state="translated">この関数は、 &lt;code&gt;gen_statem&lt;/code&gt; 動作が提供するよりも複雑な初期化手順が必要な場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="cea361e65fc7577a23ace8db8f6fec22077e2877" translate="yes" xml:space="preserve">
          <source>This function is usefull for flow control.</source>
          <target state="translated">この機能はフロー制御に有効です。</target>
        </trans-unit>
        <trans-unit id="eb2ddaa9fc04efddf630666c492e456ec637176e" translate="yes" xml:space="preserve">
          <source>This function makes sure the engine is loaded just once and the ID is added to the internal engine list of OpenSSL. The following calls to the function will check if the ID is loaded and then just get a new reference to the engine.</source>
          <target state="translated">この関数は、エンジンが一度だけロードされ、そのIDがOpenSSLの内部エンジンリストに追加されることを確認します。次の関数を呼び出すと、IDがロードされているかどうかを確認してから、エンジンへの新しい参照を取得するだけです。</target>
        </trans-unit>
        <trans-unit id="f46b30ae03aba38f2d6dbaebe599182eb938575a" translate="yes" xml:space="preserve">
          <source>This function may return an updated &lt;code&gt;NewExtraInfo&lt;/code&gt; that will be used in subsequent calls to the callback functions. Intended for future use.</source>
          <target state="translated">この関数は、コールバック関数の後続の呼び出しで使用される更新された &lt;code&gt;NewExtraInfo&lt;/code&gt; を返す場合があります。将来の使用を目的としています。</target>
        </trans-unit>
        <trans-unit id="0ffae6b0af7395d12b556d9a92b8b8453169f33e" translate="yes" xml:space="preserve">
          <source>This function may return exactly &lt;code&gt;0.0&lt;/code&gt; which can be fatal for certain applications. If that is undesired you can use &lt;code&gt;(1.0 - rand:uniform())&lt;/code&gt; to get the interval &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt;, or instead use &lt;code&gt;&lt;a href=&quot;#uniform_real-0&quot;&gt;uniform_real/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は正確に &lt;code&gt;0.0&lt;/code&gt; を返す可能性があり、特定のアプリケーションでは致命的となる可能性があります。それが望ましくない場合は、 &lt;code&gt;(1.0 - rand:uniform())&lt;/code&gt; を使用して間隔 &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt; を取得するか、代わりに &lt;code&gt;&lt;a href=&quot;#uniform_real-0&quot;&gt;uniform_real/0&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ca39a4b036275d0803e561bc49de6198f5110e47" translate="yes" xml:space="preserve">
          <source>This function may return exactly &lt;code&gt;0.0&lt;/code&gt; which can be fatal for certain applications. If that is undesired you can use &lt;code&gt;(1.0 - rand:uniform(State))&lt;/code&gt; to get the interval &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt;, or instead use &lt;code&gt;&lt;a href=&quot;#uniform_real_s-1&quot;&gt;uniform_real_s/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は正確に &lt;code&gt;0.0&lt;/code&gt; を返す可能性があり、特定のアプリケーションでは致命的となる可能性があります。それが望ましくない場合は、 &lt;code&gt;(1.0 - rand:uniform(State))&lt;/code&gt; を使用して間隔 &lt;code&gt;0.0 &amp;lt; X =&amp;lt; 1.0&lt;/code&gt; を取得するか、代わりに &lt;code&gt;&lt;a href=&quot;#uniform_real_s-1&quot;&gt;uniform_real_s/1&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="31ce28b85ea3b55e10e44c23baa40c3964f84d6e" translate="yes" xml:space="preserve">
          <source>This function modifies the emulated environment used by &lt;code&gt;os:putenv/2&lt;/code&gt; and not the environment used by libc's &lt;code&gt;putenv(3)&lt;/code&gt; or similar. Drivers that &lt;strong&gt;require&lt;/strong&gt; that these are in sync will need to do so themselves, but keep in mind that they are segregated for a reason; &lt;code&gt;putenv(3)&lt;/code&gt; and its friends are &lt;strong&gt;not thread-safe&lt;/strong&gt; and may cause unrelated code to misbehave or crash the emulator.</source>
          <target state="translated">この関数は、 &lt;code&gt;os:putenv/2&lt;/code&gt; が使用するエミュレート環境を変更しますが、libcの &lt;code&gt;putenv(3)&lt;/code&gt; などが使用する環境は変更しません。ドライバ&lt;strong&gt;が必要です&lt;/strong&gt;これらは同期していることは、自分自身そう、彼らが理由で分離されていることを心に留めておく必要があります。 &lt;code&gt;putenv(3)&lt;/code&gt; とその仲間は&lt;strong&gt;スレッドセーフで&lt;/strong&gt;は&lt;strong&gt;なく&lt;/strong&gt;、無関係なコードが誤動作したり、エミュレータがクラッシュしたりする可能性があります。</target>
        </trans-unit>
        <trans-unit id="7d9bfad73b174be24fda46b6c6997bb2f07b83e7" translate="yes" xml:space="preserve">
          <source>This function must be called before any of the others in the &lt;code&gt;Erl_Interface&lt;/code&gt; library to initialize the library functions. The arguments must be specified as &lt;code&gt;erl_init(NULL,0)&lt;/code&gt;.</source>
          <target state="translated">この関数は、ライブラリ関数を初期化するために、 &lt;code&gt;Erl_Interface&lt;/code&gt; ライブラリ内の他のどの関数よりも前に呼び出す必要があります。引数は &lt;code&gt;erl_init(NULL,0)&lt;/code&gt; として指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ebd9a39191cb32abe8a7e5735ecc342ac8656f1e" translate="yes" xml:space="preserve">
          <source>This function must be called by the same process from which &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; was made otherwise it will never return.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; が作成されたプロセスと同じプロセスで呼び出す必要があります。そうしないと、戻りません。</target>
        </trans-unit>
        <trans-unit id="19959c57c9d15d692c85ae027062ec2bc955b6f2" translate="yes" xml:space="preserve">
          <source>This function must be called by the same process from which &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; was made otherwise it will only return &lt;code&gt;timeout&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#async_call-4&quot;&gt;async_call/4&lt;/a&gt;&lt;/code&gt; が作成されたプロセスと同じプロセスで呼び出す必要があります。そうしないと、 &lt;code&gt;timeout&lt;/code&gt; のみが返されます。</target>
        </trans-unit>
        <trans-unit id="3bb3502ac60b18fe8cef093c946cf825538bc7b7" translate="yes" xml:space="preserve">
          <source>This function must be called immediately after &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit/1,2,6&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#deflateReset-1&quot;&gt;deflateReset/1&lt;/a&gt;&lt;/code&gt;, before any call of &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#deflateInit-1&quot;&gt;deflateInit/1,2,6&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#deflateReset-1&quot;&gt;deflateReset/1&lt;/a&gt;&lt;/code&gt; またはdeflateReset / 1の直後、 &lt;code&gt;&lt;a href=&quot;#deflate-3&quot;&gt;deflate/3&lt;/a&gt;&lt;/code&gt; を呼び出す前に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="5b75dd99eca2ff3b13955cd576db05e608645330" translate="yes" xml:space="preserve">
          <source>This function must be called to continue after a test case (not executing in a parallel group) has called function &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テストケース（並列グループでは実行されていない）が関数 &lt;code&gt;&lt;a href=&quot;#break-1&quot;&gt;ct:break/1&lt;/a&gt;&lt;/code&gt; を呼び出した後、この関数を呼び出して続行する必要があります。</target>
        </trans-unit>
        <trans-unit id="05df078881db876012ab67fef726a729b94ff9d8" translate="yes" xml:space="preserve">
          <source>This function must be called to continue after a test case has called &lt;code&gt;&lt;a href=&quot;#break-2&quot;&gt;ct:break/2&lt;/a&gt;&lt;/code&gt;. If the paused test case, &lt;code&gt;TestCase&lt;/code&gt;, executes in a parallel group, this function, rather than &lt;code&gt;continue/0&lt;/code&gt;, must be used to let the test case proceed.</source>
          <target state="translated">テストケースが &lt;code&gt;&lt;a href=&quot;#break-2&quot;&gt;ct:break/2&lt;/a&gt;&lt;/code&gt; を呼び出した後、この関数を呼び出して続行する必要があります。一時停止したテストケース &lt;code&gt;TestCase&lt;/code&gt; が並列グループで実行される場合、テストケースを &lt;code&gt;continue/0&lt;/code&gt; するには、continue / 0ではなく、この関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="df6ca91336232bf4dc1b262219129b2c8bee458f" translate="yes" xml:space="preserve">
          <source>This function must be used by a process that has been started by a &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start[_link]/3,4,5&lt;/a&gt;&lt;/code&gt; function. It tells &lt;code&gt;Parent&lt;/code&gt; that the process has initialized itself, has started, or has failed to initialize itself.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#start-3&quot;&gt;start[_link]/3,4,5&lt;/a&gt;&lt;/code&gt; 関数によって開始されたプロセスで使用する必要があります。これは、プロセスがそれ自体を初期化した、開始した、または初期化に失敗したことを &lt;code&gt;Parent&lt;/code&gt; に通知します。</target>
        </trans-unit>
        <trans-unit id="4eb57f4a5bbafdd8247f55548e5ee187fd56dc8b" translate="yes" xml:space="preserve">
          <source>This function needs to be called as a transaction. Assume that you wish to write a function that both calls the function &lt;code&gt;add_subscriber/1&lt;/code&gt; and is in itself protected by the context of a transaction. By calling &lt;code&gt;add_subscriber/1&lt;/code&gt; from within another transaction, a nested transaction is created.</source>
          <target state="translated">この関数はトランザクションとして呼び出す必要があります。関数 &lt;code&gt;add_subscriber/1&lt;/code&gt; を呼び出し、それ自体がトランザクションのコンテキストによって保護される関数を作成するとします。別のトランザクション内から &lt;code&gt;add_subscriber/1&lt;/code&gt; を呼び出すことにより、ネストされたトランザクションが作成されます。</target>
        </trans-unit>
        <trans-unit id="17d0fec42839f72178e4fd55a2c5164e6b9bf6ce" translate="yes" xml:space="preserve">
          <source>This function only succeeds in platforms that provide this feature.</source>
          <target state="translated">この機能は、この機能を提供するプラットフォームでのみ成功します。</target>
        </trans-unit>
        <trans-unit id="bdb288dde170ca25e8a4e8d2927079c35992755a" translate="yes" xml:space="preserve">
          <source>This function only succeeds in platforms that provide this feature. When it succeeds, space is preallocated for the file but the file size might not be updated. This behaviour depends on the preallocation implementation. To guarantee that the file size is updated, truncate the file to the new size.</source>
          <target state="translated">この関数は、この機能を提供するプラットフォームでのみ成功します。これが成功した場合、ファイルのためにスペースが事前に割り当てられますが、ファイルサイズは更新されないかもしれません。この動作は、事前割り当ての実装に依存します。ファイルサイズが更新されることを保証するには、ファイルを新しいサイズに切り捨てます。</target>
        </trans-unit>
        <trans-unit id="b9d0851586e3645c6e0718dc09f5fec49d8fc898" translate="yes" xml:space="preserve">
          <source>This function performs the following transformation:</source>
          <target state="translated">この関数は以下のような変換を行います。</target>
        </trans-unit>
        <trans-unit id="681ee068d504344b07045ef0edae3fb7a6646520" translate="yes" xml:space="preserve">
          <source>This function prints all elements of a list onto a stream:</source>
          <target state="translated">この関数は、リストの全要素をストリームに出力します。</target>
        </trans-unit>
        <trans-unit id="826961bd42fe30f9ebbd7b4d33db709f59c3b696" translate="yes" xml:space="preserve">
          <source>This function produce the same encoding as &lt;code&gt;&lt;a href=&quot;#term_to_binary-1&quot;&gt;term_to_binary/1&lt;/a&gt;&lt;/code&gt;, but with another return type. The call &lt;code&gt;iolist_to_binary(term_to_iovec(Term))&lt;/code&gt; will produce exactly the same result as the call &lt;code&gt;term_to_binary(Term)&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#term_to_binary-1&quot;&gt;term_to_binary/1&lt;/a&gt;&lt;/code&gt; と同じエンコーディングを生成しますが、戻り値の型が異なります。コール &lt;code&gt;iolist_to_binary(term_to_iovec(Term))&lt;/code&gt; コールと全く同じ結果を生成する &lt;code&gt;term_to_binary(Term)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5a527ff828c71994c974c257269fdedc8e4cd10" translate="yes" xml:space="preserve">
          <source>This function produce the same encoding as &lt;code&gt;&lt;a href=&quot;#term_to_binary-2&quot;&gt;term_to_binary/2&lt;/a&gt;&lt;/code&gt;, but with another return type. The call &lt;code&gt;iolist_to_binary(term_to_iovec(Term, Opts))&lt;/code&gt; will produce exactly the same result as &lt;code&gt;term_to_binary(Term, Opts)&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#term_to_binary-2&quot;&gt;term_to_binary/2&lt;/a&gt;&lt;/code&gt; と同じエンコーディングを生成しますが、戻り値の型が異なります。コール &lt;code&gt;iolist_to_binary(term_to_iovec(Term, Opts))&lt;/code&gt; 全く同じ結果を生成する &lt;code&gt;term_to_binary(Term, Opts)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="abd07fdc0e97d4adf4e29f31e2cc86ba2b8eaea2" translate="yes" xml:space="preserve">
          <source>This function produces a list of information about the megaco application. Such as users and their config, connections and their config, statistics and so on.</source>
          <target state="translated">この関数は、megacoアプリケーションに関する情報の一覧を生成します。ユーザとその設定、接続とその設定、統計情報などです。</target>
        </trans-unit>
        <trans-unit id="4aec40bb5deb9daace1e8128ff80ca5cbdbd3ab4" translate="yes" xml:space="preserve">
          <source>This function provides a low-level interface to the pretty printer, returning a flexible representation of possible layouts, independent of the paper width eventually to be used for formatting. This can be included as part of another document and/or further processed directly by the functions in the &lt;code&gt;prettypr&lt;/code&gt; module, or used in a hook function (see &lt;code&gt;format/2&lt;/code&gt; for details).</source>
          <target state="translated">この関数は、プリティプリンターへの低レベルのインターフェイスを提供し、最終的にフォーマットに使用される用紙の幅に関係なく、可能なレイアウトの柔軟な表現を返します。これは、別のドキュメントの一部として含めたり、 &lt;code&gt;prettypr&lt;/code&gt; モジュールの関数で直接処理したり、フック関数で使用したりできます（詳細については、 &lt;code&gt;format/2&lt;/code&gt; を参照してください）。</target>
        </trans-unit>
        <trans-unit id="292e6a8f5a93138af65b2381d7cdb5c0c6c34358" translate="yes" xml:space="preserve">
          <source>This function provides an efficient way to update one or more counters, without the trouble of having to look up an object, update the object by incrementing an element, and insert the resulting object into the table again. (The update is done atomically, that is, no process can access the ETS table in the middle of the operation.)</source>
          <target state="translated">この関数は、オブジェクトを検索し、要素をインクリメントしてオブジェクトを更新し、その結果得られたオブジェクトを再度テーブルに挿入するという手間をかけずに、1つまたは複数のカウンタを更新する効率的な方法を提供します。(更新はアトム単位で行われます。つまり、操作の途中でETSテーブルにアクセスするプロセスはありません)。</target>
        </trans-unit>
        <trans-unit id="de1914d725b6a19d0c54d0cc47eafecc7c8a1cad" translate="yes" xml:space="preserve">
          <source>This function provides an efficient way to update one or more counters, without the trouble of having to look up an object, update the object by incrementing an element, and insert the resulting object into the table again. The operation is guaranteed to be &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、オブジェクトを検索し、要素をインクリメントしてオブジェクトを更新し、結果のオブジェクトをテーブルに再度挿入する手間をかけずに、1つ以上のカウンターを更新する効率的な方法を提供します。操作は &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt; されていることが保証されています。</target>
        </trans-unit>
        <trans-unit id="8b9e675f31114737aa33341ede5a5aba5db53e0d" translate="yes" xml:space="preserve">
          <source>This function provides an efficient way to update one or more elements within an object, without the trouble of having to look up, update, and write back the entire object.</source>
          <target state="translated">この関数は、オブジェクト内の1つ以上の要素を更新する効率的な方法を提供します。</target>
        </trans-unit>
        <trans-unit id="a2ad4c84411a21e47a169513c1d529c2c69b36bc" translate="yes" xml:space="preserve">
          <source>This function reads &quot;messages&quot;, which means that regardless of how much we want to read, it returns when we get a message (if the buffer size is too small, the message will be truncated).</source>
          <target state="translated">この関数は「メッセージ」を読み込みます。つまり、どれだけ読みたいかに関わらず、メッセージを取得したら返してくれます(バッファサイズが小さすぎると、メッセージは切り捨てられてしまいます)。</target>
        </trans-unit>
        <trans-unit id="b2bfd8b3c8c6d13aec0aa1766324ac529d7e9c46" translate="yes" xml:space="preserve">
          <source>This function reads &quot;messages&quot;, which means that regardless of how much we want to read, it returns when we get a message.</source>
          <target state="translated">この関数は「メッセージ」を読み取るので、いくら読みたいと思っていても、メッセージを取得したら返してくれます。</target>
        </trans-unit>
        <trans-unit id="c1b5d7fcc798e3adcd6205abd49a5e2a97894217" translate="yes" xml:space="preserve">
          <source>This function reads match specifications from a file (possibly) generated by the &lt;code&gt;&lt;a href=&quot;#wtp-1&quot;&gt;wtp/1&lt;/a&gt;&lt;/code&gt; function. It checks the syntax of all match specifications and verifies that they are correct. The error handling principle is &quot;all or nothing&quot;, i. e. if some of the match specifications are wrong, none of the specifications are added to the list of saved match specifications for the running system.</source>
          <target state="translated">この関数は、（おそらく） &lt;code&gt;&lt;a href=&quot;#wtp-1&quot;&gt;wtp/1&lt;/a&gt;&lt;/code&gt; 関数によって生成されたファイルから一致仕様を読み取ります。すべての一致仕様の構文をチェックし、それらが正しいことを確認します。エラー処理の原則は「オールオアナッシング」です。つまり、一部の一致仕様が間違っている場合、実行中のシステムの保存済み一致仕様のリストには、どの仕様も追加されません。</target>
        </trans-unit>
        <trans-unit id="4c87d8b732e8491a29379bc4f4e018b87a77b776" translate="yes" xml:space="preserve">
          <source>This function reads the emulated environment used by &lt;code&gt;os:getenv/1&lt;/code&gt; and not the environment used by libc's &lt;code&gt;getenv(3)&lt;/code&gt; or similar. Drivers that &lt;strong&gt;require&lt;/strong&gt; that these are in sync will need to do so themselves, but keep in mind that they are segregated for a reason; &lt;code&gt;getenv(3)&lt;/code&gt; and its friends are &lt;strong&gt;not thread-safe&lt;/strong&gt; and may cause unrelated code to misbehave or crash the emulator.</source>
          <target state="translated">この関数は、 &lt;code&gt;os:getenv/1&lt;/code&gt; が使用するエミュレートされた環境を読み取ります。libcの &lt;code&gt;getenv(3)&lt;/code&gt; などが使用する環境は読み取りません。ドライバ&lt;strong&gt;が必要です&lt;/strong&gt;これらは同期していることは、自分自身そう、彼らが理由で分離されていることを心に留めておく必要があります。 &lt;code&gt;getenv(3)&lt;/code&gt; とその仲間は&lt;strong&gt;スレッドセーフで&lt;/strong&gt;は&lt;strong&gt;なく&lt;/strong&gt;、無関係なコードが動作しないか、エミュレータがクラッシュする可能性があります。</target>
        </trans-unit>
        <trans-unit id="10a11b74ad5663559d5b504d02b42b896b8198c8" translate="yes" xml:space="preserve">
          <source>This function requires root privileges to succeed.</source>
          <target state="translated">この関数を成功させるには、root 権限が必要です。</target>
        </trans-unit>
        <trans-unit id="d15610f3a7143920acbea774174ec7657558cf9c" translate="yes" xml:space="preserve">
          <source>This function retreives information about what the platform supports, such as if SCTP is supported, or which socket options are supported.</source>
          <target state="translated">この関数は、SCTP がサポートされているかどうか、どのソケットオプションがサポートされているかなど、プラットフォームがサポートしている情報を取得します。</target>
        </trans-unit>
        <trans-unit id="33e0d6537277d523e6c2dd7e69081c04d55238d6" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;Default&lt;/code&gt; if no term has been stored with the key &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">キー &lt;code&gt;Key&lt;/code&gt; で用語が保存されていない場合、この関数は &lt;code&gt;Default&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="062c8ae0406bce16cb74fa7ee50a7f220f4495f9" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;ok&lt;/code&gt; if the server terminates with the expected reason. Any other reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt; causes an error report to be issued through &lt;code&gt;logger(3)&lt;/code&gt;. The default &lt;code&gt;Reason&lt;/code&gt; is &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">この関数は、サーバーが予期された理由で終了した場合に &lt;code&gt;ok&lt;/code&gt; を返します。 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 以外の理由により、 &lt;code&gt;logger(3)&lt;/code&gt; を通じてエラーレポートが発行されます。デフォルトの &lt;code&gt;Reason&lt;/code&gt; は &lt;code&gt;normal&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3b619b8eb3b06a0c1f9ee95ad936ded887fe9b1f" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;{continue | finished, Output}&lt;/code&gt;, where Output is the data that was decompressed in this call. New input can be queued up on each call if desired, and the function will return &lt;code&gt;{finished, Output}&lt;/code&gt; once all queued data has been decompressed.</source>
          <target state="translated">この関数は &lt;code&gt;{continue | finished, Output}&lt;/code&gt; 出力は、この呼び出しで解凍されたデータです。必要に応じて、呼び出しごとに新しい入力をキューに入れることができ、キューに入れられたすべてのデータが解凍されると、関数は &lt;code&gt;{finished, Output}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1fe5f1399ea4e26d1526efcdd913ad89693dd38c" translate="yes" xml:space="preserve">
          <source>This function returns &lt;code&gt;{more, Decompressed}&lt;/code&gt;, when there is more output available, and &lt;code&gt;&lt;a href=&quot;#inflateChunk-1&quot;&gt;inflateChunk/1&lt;/a&gt;&lt;/code&gt; is to be used to read it.</source>
          <target state="translated">この関数は &lt;code&gt;{more, Decompressed}&lt;/code&gt; 利用可能な出力がさらにあり、それを読み取るために &lt;code&gt;&lt;a href=&quot;#inflateChunk-1&quot;&gt;inflateChunk/1&lt;/a&gt;&lt;/code&gt; が使用される場合、{more、Decompressed}を返します。</target>
        </trans-unit>
        <trans-unit id="57c7b411ef596e9d3dc2dccd3a829fab7afcf559" translate="yes" xml:space="preserve">
          <source>This function returns a non-zero value if the time-slice has been exhausted, and zero if the callback is allowed to continue execution. If a non-zero value is returned, the driver callback is to return as soon as possible in order for the port to be able to yield.</source>
          <target state="translated">この関数は、タイムスライスを使い切った場合は 0 以外の値を返し、コールバックの実行継続が許可されている場合は 0 を返します。ゼロ以外の値が返された場合、ドライバのコールバックは、ポートが降伏できるようにするために、できるだけ早く返すことになっています。</target>
        </trans-unit>
        <trans-unit id="b34ef5ebb7e9ff07df93e070c922fe104914c7bc" translate="yes" xml:space="preserve">
          <source>This function returns the &lt;code&gt;&lt;a href=&quot;#type-tid&quot;&gt;tid()&lt;/a&gt;&lt;/code&gt; of the named table identified by &lt;code&gt;TableName&lt;/code&gt;, or &lt;code&gt;undefined&lt;/code&gt; if no such table exists. The &lt;code&gt;tid()&lt;/code&gt; can be used in place of the table name in all operations, which is slightly faster since the name does not have to be resolved on each call.</source>
          <target state="translated">この関数は、 &lt;code&gt;TableName&lt;/code&gt; で識別される名前付きテーブルの &lt;code&gt;&lt;a href=&quot;#type-tid&quot;&gt;tid()&lt;/a&gt;&lt;/code&gt; を返します。そのようなテーブルが存在し &lt;code&gt;undefined&lt;/code&gt; 場合はundefinedを返します。 &lt;code&gt;tid()&lt;/code&gt; の名前が呼び出しごとに解決する必要がないので、少し速くなり、すべての操作でテーブル名の代わりに使用することができます。</target>
        </trans-unit>
        <trans-unit id="50dd77bc2f5d6e06a832906b2c12c471d8aa9340" translate="yes" xml:space="preserve">
          <source>This function returns the &lt;code&gt;Adler&lt;/code&gt; checksum of &lt;code&gt;[Data1,Data2]&lt;/code&gt;, requiring only &lt;code&gt;Adler1&lt;/code&gt;, &lt;code&gt;Adler2&lt;/code&gt;, and &lt;code&gt;Size2&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;[Data1,Data2]&lt;/code&gt; の &lt;code&gt;Adler&lt;/code&gt; チェックサムを返し、 &lt;code&gt;Adler1&lt;/code&gt; 、 &lt;code&gt;Adler2&lt;/code&gt; 、および &lt;code&gt;Size2&lt;/code&gt; のみを必要とします。</target>
        </trans-unit>
        <trans-unit id="254134ddf194a5bc8b6a55dc528e9535675c6294" translate="yes" xml:space="preserve">
          <source>This function returns the &lt;code&gt;CRC&lt;/code&gt; checksum of &lt;code&gt;[Data1,Data2]&lt;/code&gt;, requiring only &lt;code&gt;CRC1&lt;/code&gt;, &lt;code&gt;CRC2&lt;/code&gt;, and &lt;code&gt;Size2&lt;/code&gt;.</source>
          <target state="translated">この関数は返す &lt;code&gt;CRC&lt;/code&gt; のチェックサム &lt;code&gt;[Data1,Data2]&lt;/code&gt; のみ必要、 &lt;code&gt;CRC1&lt;/code&gt; 、 &lt;code&gt;CRC2&lt;/code&gt; 、および &lt;code&gt;Size2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfe8f7ec0382a52a177f156ebe5c3e11685e6528" translate="yes" xml:space="preserve">
          <source>This function returns the default encoding for Erlang source files (if no encoding comment is present) in the currently running release. In Erlang/OTP R16B, &lt;code&gt;latin1&lt;/code&gt; (bytewise encoding) was returned. As from Erlang/OTP 17.0, &lt;code&gt;utf8&lt;/code&gt; is returned.</source>
          <target state="translated">この関数は、現在実行中のリリースのErlangソースファイルのデフォルトのエンコーディングを返します（エンコーディングコメントがない場合）。Erlang / OTP R16Bでは、 &lt;code&gt;latin1&lt;/code&gt; （バイト単位のエンコード）が返されました。Erlang / OTP 17.0以降、 &lt;code&gt;utf8&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="24ac5e4c95ff19314b1e92b03b1fbc6ddb4df1f4" translate="yes" xml:space="preserve">
          <source>This function returns the user tag set in the current process or, if no user tag is present, the last user tag sent to the process together with a message (in the same way as &lt;code&gt;sequential trace tokens&lt;/code&gt; are spread to other processes together with messages. For an explanation of how user tags can be spread together with messages, see &lt;code&gt;&lt;a href=&quot;#spread_tag-1&quot;&gt;spread_tag/1&lt;/a&gt;&lt;/code&gt;. If no tag is found or dynamic tracing is not available, it returns &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">この関数は、現在のプロセスに設定されているユーザータグを返します。ユーザータグが存在しない場合は、メッセージと共にプロセスに送信された最後のユーザータグ（ &lt;code&gt;sequential trace tokens&lt;/code&gt; がメッセージとともに他のプロセスに拡散されるのと同じ方法で）。メッセージと共にユーザータグを分散する方法の説明については、 &lt;code&gt;&lt;a href=&quot;#spread_tag-1&quot;&gt;spread_tag/1&lt;/a&gt;&lt;/code&gt; を参照してください。タグが見つからない場合、または動的トレースが使用できない場合は、 &lt;code&gt;undefined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ad3f3a41d62bdc7c42feabe41234fd9722d7cb98" translate="yes" xml:space="preserve">
          <source>This function returns the user tag set in the current process. If no tag is set or dynamic tracing is not available, it returns &lt;code&gt;undefined&lt;/code&gt;</source>
          <target state="translated">この関数は、現在のプロセスで設定されているユーザータグを返します。タグが設定されていない場合、または動的トレースが使用できない場合は、 &lt;code&gt;undefined&lt;/code&gt; 返します</target>
        </trans-unit>
        <trans-unit id="644324c7c6a31f16ffa3ae52932ba3909ce2be83" translate="yes" xml:space="preserve">
          <source>This function returns the verbosity level for the specified logging category. See the &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt; User's Guide&lt;/a&gt;&lt;/code&gt; for details. Use the value &lt;code&gt;default&lt;/code&gt; to read the general verbosity level.</source>
          <target state="translated">この関数は、指定されたロギングカテゴリの詳細レベルを返します。詳細については、 &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt; User's Guide&lt;/a&gt;&lt;/code&gt; を参照してください。一般的な詳細レベルを読み取るには、 &lt;code&gt;default&lt;/code&gt; 値を使用します。</target>
        </trans-unit>
        <trans-unit id="fd79f4e47f62cf59b521bcb089167a8d5c5fd14f" translate="yes" xml:space="preserve">
          <source>This function returns the verbosity level for the specified logging category. See the &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; for details. Use the value &lt;code&gt;default&lt;/code&gt; to read the general verbosity level.</source>
          <target state="translated">この関数は、指定されたロギングカテゴリの詳細レベルを返します。詳細は &lt;code&gt;&lt;a href=&quot;write_test_chapter#logging&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; をご覧ください。 &lt;code&gt;default&lt;/code&gt; 値を使用して、一般的な詳細レベルを読み取ります。</target>
        </trans-unit>
        <trans-unit id="9213458608b1e7bf5d8b4e1a7eb828c4aad8ff78" translate="yes" xml:space="preserve">
          <source>This function returns value from dictionary and a new dictionary without this value. Returns &lt;code&gt;error&lt;/code&gt; if the key is not present in the dictionary.</source>
          <target state="translated">この関数は、ディクショナリからの値と、この値のない新しいディクショナリを返します。キーがディクショナリに存在しない場合は &lt;code&gt;error&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ebf35b3402a76d292262e9d707c75231902c52bf" translate="yes" xml:space="preserve">
          <source>This function returns value from dictionary and new dictionary without this value. Returns &lt;code&gt;error&lt;/code&gt; if the key is not present in the dictionary.</source>
          <target state="translated">この関数は、ディクショナリからの値とこの値のない新しいディクショナリを返します。キーが辞書に存在しない場合、 &lt;code&gt;error&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="4620a951555900d51d4b19f86794013a12f92c5b" translate="yes" xml:space="preserve">
          <source>This function runs the measurement on all the &lt;strong&gt;official&lt;/strong&gt; codecs; pretty, compact, ber, per and erlang.</source>
          <target state="translated">この関数は、すべての&lt;strong&gt;公式&lt;/strong&gt;コーデックで測定を実行します。かなり、コンパクト、ber、per、およびerlang。</target>
        </trans-unit>
        <trans-unit id="4d644d2c0042513fa733b8a7d873cf8a04730f5c" translate="yes" xml:space="preserve">
          <source>This function sends a message to the event manager registered as &lt;code&gt;error_man&lt;/code&gt;, telling it to add the event handler &lt;code&gt;terminal_logger&lt;/code&gt;. The event manager calls the callback function &lt;code&gt;terminal_logger:init([])&lt;/code&gt;, where the argument &lt;code&gt;[]&lt;/code&gt; is the third argument to &lt;code&gt;add_handler&lt;/code&gt;. &lt;code&gt;init&lt;/code&gt; is expected to return &lt;code&gt;{ok, State}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the internal state of the event handler.</source>
          <target state="translated">この関数は、 &lt;code&gt;error_man&lt;/code&gt; として登録されているイベントマネージャにメッセージを送信し、イベントハンドラ &lt;code&gt;terminal_logger&lt;/code&gt; を追加するように通知します。イベントマネージャはコールバック関数 &lt;code&gt;terminal_logger:init([])&lt;/code&gt; を &lt;code&gt;add_handler&lt;/code&gt; ます。ここで、引数 &lt;code&gt;[]&lt;/code&gt; はadd_handlerの 3番目の引数です。 &lt;code&gt;init&lt;/code&gt; は &lt;code&gt;{ok, State}&lt;/code&gt; を返すことが期待されています。ここで、 &lt;code&gt;State&lt;/code&gt; はイベントハンドラーの内部状態です。</target>
        </trans-unit>
        <trans-unit id="9488c1c7cd2d72dbd05ee8b3a4cf579cbfcc3089" translate="yes" xml:space="preserve">
          <source>This function sends a message to the event manager registered as &lt;code&gt;error_man&lt;/code&gt;, telling it to delete the event handler &lt;code&gt;terminal_logger&lt;/code&gt;. The event manager calls the callback function &lt;code&gt;terminal_logger:terminate([], State)&lt;/code&gt;, where the argument &lt;code&gt;[]&lt;/code&gt; is the third argument to &lt;code&gt;delete_handler&lt;/code&gt;. &lt;code&gt;terminate&lt;/code&gt; is to be the opposite of &lt;code&gt;init&lt;/code&gt; and do any necessary cleaning up. Its return value is ignored.</source>
          <target state="translated">この関数は、 &lt;code&gt;error_man&lt;/code&gt; として登録されているイベントマネージャにメッセージを送信し、イベントハンドラ &lt;code&gt;terminal_logger&lt;/code&gt; を削除するように通知します。イベントマネージャはコールバック関数 &lt;code&gt;terminal_logger:terminate([], State)&lt;/code&gt; を &lt;code&gt;delete_handler&lt;/code&gt; ます。ここで、引数 &lt;code&gt;[]&lt;/code&gt; はdelete_handlerの 3番目の引数です。 &lt;code&gt;terminate&lt;/code&gt; は、 &lt;code&gt;init&lt;/code&gt; の反対で、必要なクリーンアップを実行します。その戻り値は無視されます。</target>
        </trans-unit>
        <trans-unit id="01064956f3c5f10087dfedd98caeabdab20043f6" translate="yes" xml:space="preserve">
          <source>This function sets the user tag of the current process. The user tag is a binary(), but can be specified as any iodata(), which is automatically converted to a binary by this function.</source>
          <target state="translated">この関数は、現在のプロセスのユーザタグを設定します。ユーザタグはバイナリ()ですが、この関数によって自動的にバイナリに変換される任意の iodata()を指定することができます。</target>
        </trans-unit>
        <trans-unit id="61313460b8aa3e37c5b58b57b47f109e6ec0573c" translate="yes" xml:space="preserve">
          <source>This function sets up a subscription for NETCONF event notifications of the specified stream type, matching the specified filter. The calling process receives notifications as messages of type &lt;code&gt;&lt;a href=&quot;#type-notification&quot;&gt;notification()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、指定されたフィルターに一致する、指定されたストリームタイプのNETCONFイベント通知のサブスクリプションを設定します。呼び出しプロセスは、タイプ &lt;code&gt;&lt;a href=&quot;#type-notification&quot;&gt;notification()&lt;/a&gt;&lt;/code&gt; のメッセージとして通知を受け取ります。</target>
        </trans-unit>
        <trans-unit id="ae2f0db4a2d6577440241530db91576d86c351bc" translate="yes" xml:space="preserve">
          <source>This function should be used by custom Logger handlers to make configuration consistent no matter which handler the system uses. Normal usage is to add a call to &lt;code&gt;logger:add_handlers/1&lt;/code&gt; just after the processes that the handler needs are started, and pass the application's &lt;code&gt;logger&lt;/code&gt; configuration as the argument. For example:</source>
          <target state="translated">この関数は、システムが使用するハンドラーに関係なく構成を一貫させるために、カスタムロガーハンドラーによって使用されます。通常の使用法は、ハンドラーが必要とするプロセスが開始された直後に &lt;code&gt;logger:add_handlers/1&lt;/code&gt; への呼び出しを追加し、アプリケーションの &lt;code&gt;logger&lt;/code&gt; 構成を引数として渡すことです。例えば：</target>
        </trans-unit>
        <trans-unit id="f301b3f0b8c0209d0cf4fd9f62efd0855d383514" translate="yes" xml:space="preserve">
          <source>This function should be used whenever the &lt;code&gt;ScopedPDU&lt;/code&gt; is encrypted.</source>
          <target state="translated">この関数は、 &lt;code&gt;ScopedPDU&lt;/code&gt; が暗号化されている場合は常に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="92119a39fe094fc4b7f2725a3cd542c77c8004c7" translate="yes" xml:space="preserve">
          <source>This function should be used with care!</source>
          <target state="translated">この機能は注意して使用する必要があります!</target>
        </trans-unit>
        <trans-unit id="6163aa7d8dcc271f09c1955760210bfef0a047d1" translate="yes" xml:space="preserve">
          <source>This function should only be used for micro-benchmarks; it sets &lt;code&gt;copy_save&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for the duration of the call, which can quickly lead to running out of memory.</source>
          <target state="translated">この関数は、マイクロベンチマークにのみ使用してください。呼び出しの間、 &lt;code&gt;copy_save&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定します。これにより、すぐにメモリ不足が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="378340ac7df7630dbeb8cb5d900d9bad24c77182" translate="yes" xml:space="preserve">
          <source>This function should, besides spawning the connection supervisor, also create a distribution controller. The distribution controller is either a process or a port which is responsible for dispatching traffic.</source>
          <target state="translated">この関数は、接続スーパバイザをスポーンするだけでなく、ディストリビュー ションコントローラも作成しなければなりません。ディストリビューションコントローラは、トラフィックのディスパッチを担当するプロセスかポートです。</target>
        </trans-unit>
        <trans-unit id="d4d47d2b2af731fd5c9c26e6262581d877c04f00" translate="yes" xml:space="preserve">
          <source>This function shuts down a previously started trace client. The &lt;code&gt;Pid&lt;/code&gt; argument is the process id returned from the &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#trace_client-3&quot;&gt;trace_client/3&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">この関数は、以前に開始されたトレースクライアントをシャットダウンします。 &lt;code&gt;Pid&lt;/code&gt; 引数から返されたプロセスIDである &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;#trace_client-3&quot;&gt;trace_client/3&lt;/a&gt;&lt;/code&gt; コール。</target>
        </trans-unit>
        <trans-unit id="1762fe9d329cecf345c08b9b7958cf3995f81b8e" translate="yes" xml:space="preserve">
          <source>This function spawns and links to a new process, an event manager.</source>
          <target state="translated">この関数は、新しいプロセスであるイベントマネージャをスポーンし、リンクします。</target>
        </trans-unit>
        <trans-unit id="550809e278a777ab2f212797a3d8588ff2bdddcd" translate="yes" xml:space="preserve">
          <source>This function starts a server on the local node that will be the recipient of all trace messages. All subsequent calls to &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; will result in messages sent to the newly started trace server.</source>
          <target state="translated">この関数は、すべてのトレースメッセージの受信者となるローカルノードでサーバーを起動します。その後のすべての &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; 呼び出しは、新しく起動したトレースサーバーにメッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="02bf735444f615dc9059203b498c83b1b1c490d8" translate="yes" xml:space="preserve">
          <source>This function starts a trace client that reads the output created by a trace port driver and handles it in mostly the same way as a tracer process created by the &lt;code&gt;&lt;a href=&quot;#tracer-0&quot;&gt;tracer/0&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">この関数は、トレースポートドライバーによって作成された出力を読み取り、それを &lt;code&gt;&lt;a href=&quot;#tracer-0&quot;&gt;tracer/0&lt;/a&gt;&lt;/code&gt; 関数によって作成されたトレーサープロセスとほとんど同じ方法で処理するトレースクライアントを起動します。</target>
        </trans-unit>
        <trans-unit id="71ed1ace1cba19901a1c4410fa55742720248a3e" translate="yes" xml:space="preserve">
          <source>This function starts a tracer server with additional parameters on the local node. The first parameter, the &lt;code&gt;Type&lt;/code&gt;, indicates if trace messages should be handled by a receiving process (&lt;code&gt;process&lt;/code&gt;), by a tracer port (&lt;code&gt;port&lt;/code&gt;) or by a tracer module (&lt;code&gt;module&lt;/code&gt;). For a description about tracer ports see &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; and for a tracer modules see &lt;code&gt;erl_tracer&lt;/code&gt;.</source>
          <target state="translated">この関数は、ローカルノードの追加パラメーターでトレーサーサーバーを起動します。最初のパラメーターである &lt;code&gt;Type&lt;/code&gt; は、トレースメッセージを受信プロセス（ &lt;code&gt;process&lt;/code&gt; ）、トレーサーポート（ &lt;code&gt;port&lt;/code&gt; ）、またはトレーサーモジュール（ &lt;code&gt;module&lt;/code&gt; ）のどちらで処理するかを示します。トレーサーポートについての説明は &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; を、トレーサーモジュールについては &lt;code&gt;erl_tracer&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b87e561423bace774990128b77e86ad6df9e413" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with all codec configs. &lt;code&gt;Factor&lt;/code&gt; (defaults to &lt;code&gt;1&lt;/code&gt;) processes are started for every supported codec config.</source>
          <target state="translated">この関数は、すべてのコーデック構成で&lt;strong&gt;mstone1&lt;/strong&gt;パフォーマンステストを開始します。 &lt;code&gt;Factor&lt;/code&gt; （デフォルトは &lt;code&gt;1&lt;/code&gt; ）プロセスは、サポートされているすべてのコーデック構成に対して開始されます。</target>
        </trans-unit>
        <trans-unit id="792ed4cb1314be5885f62ea62a3ebeadcd5147c2" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with codec configs not using any drivers (i.e. &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; without &lt;code&gt;flex&lt;/code&gt;, &lt;code&gt;ber&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; without &lt;code&gt;driver&lt;/code&gt; and &lt;code&gt;erlang&lt;/code&gt; without &lt;code&gt;compressed&lt;/code&gt;). The same number of processes are started as when running the standard test (using the &lt;code&gt;start/0,1&lt;/code&gt; function). Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">この機能は、起動し&lt;strong&gt;mstone1&lt;/strong&gt;（すなわちすべてのドライバを使用していないコーデックのconfigsで性能試験を &lt;code&gt;pretty&lt;/code&gt; し、 &lt;code&gt;compact&lt;/code&gt; なし &lt;code&gt;flex&lt;/code&gt; 、 &lt;code&gt;ber&lt;/code&gt; と &lt;code&gt;per&lt;/code&gt; せずに &lt;code&gt;driver&lt;/code&gt; と &lt;code&gt;erlang&lt;/code&gt; せずに &lt;code&gt;compressed&lt;/code&gt; ）。標準テストの実行時と同じ数のプロセスが開始されます（ &lt;code&gt;start/0,1&lt;/code&gt; 関数を使用）。各プロセスは、メッセージをエンコードおよびデコードします。 （すべてのプロセスの）合計で処理されたメッセージの数がmstone値です。</target>
        </trans-unit>
        <trans-unit id="ad7b4c53c1b5220bc2673b30cb62ee3a8a2764a4" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with only the driver using codec configs (i.e. &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; with &lt;code&gt;flex&lt;/code&gt;, and &lt;code&gt;ber&lt;/code&gt; and &lt;code&gt;per&lt;/code&gt; with &lt;code&gt;driver&lt;/code&gt; and &lt;code&gt;erlang&lt;/code&gt; with &lt;code&gt;compressed&lt;/code&gt;). The same number of processes are started as when running the standard test (using the &lt;code&gt;start/0,1&lt;/code&gt; function). Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">この機能は、起動し&lt;strong&gt;mstone1&lt;/strong&gt;（すなわち唯一のコーデックのconfigsを使用してドライバで性能試験を &lt;code&gt;pretty&lt;/code&gt; し、 &lt;code&gt;compact&lt;/code&gt; で &lt;code&gt;flex&lt;/code&gt; 、および &lt;code&gt;ber&lt;/code&gt; および &lt;code&gt;per&lt;/code&gt; に &lt;code&gt;driver&lt;/code&gt; と &lt;code&gt;erlang&lt;/code&gt; で &lt;code&gt;compressed&lt;/code&gt; ）。標準テストの実行時と同じ数のプロセスが開始されます（ &lt;code&gt;start/0,1&lt;/code&gt; 関数を使用）。各プロセスは、メッセージをエンコードおよびデコードします。 （すべてのプロセスの）合計で処理されたメッセージの数がmstone値です。</target>
        </trans-unit>
        <trans-unit id="a169f04fb06754d3d77f607833509158a7205503" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone1&lt;/strong&gt; performance test with only the flex codec configs (i.e. &lt;code&gt;pretty&lt;/code&gt; and &lt;code&gt;compact&lt;/code&gt; with &lt;code&gt;flex&lt;/code&gt;). The same number of processes are started as when running the standard test (using the &lt;code&gt;start/0,1&lt;/code&gt; function). Each process encodes and decodes their messages. The number of messages processed in total (for all processes) is the mstone value.</source>
          <target state="translated">この機能は、起動し&lt;strong&gt;mstone1&lt;/strong&gt;のみフレックスコーデックのconfigs（すなわちで性能試験を &lt;code&gt;pretty&lt;/code&gt; し、 &lt;code&gt;compact&lt;/code&gt; で &lt;code&gt;flex&lt;/code&gt; ）。標準テストの実行時と同じ数のプロセスが開始されます（ &lt;code&gt;start/0,1&lt;/code&gt; 関数を使用）。各プロセスは、メッセージをエンコードおよびデコードします。（すべてのプロセスの）合計で処理されたメッセージの数がmstone値です。</target>
        </trans-unit>
        <trans-unit id="198cdb7eaaa9d51f54f530ef45039bacb833b143" translate="yes" xml:space="preserve">
          <source>This function starts the &lt;strong&gt;mstone2&lt;/strong&gt; performance test with all codec configs. Processes are created dynamically. Each process make &lt;strong&gt;one&lt;/strong&gt; run through their messages (decoding and encoding messages) and then exits. When one process exits, a new is created with the same codec config and set of messages.</source>
          <target state="translated">この関数は、すべてのコーデック構成で&lt;strong&gt;mstone2&lt;/strong&gt;パフォーマンステストを開始します。プロセスは動的に作成されます。各プロセスは、メッセージ（デコードおよびエンコードメッセージ）を&lt;strong&gt;1回&lt;/strong&gt;実行してから終了します。1つのプロセスが終了すると、同じコーデック構成とメッセージのセットで新しいプロセスが作成されます。</target>
        </trans-unit>
        <trans-unit id="3f645d23afcc815891f3acc3933eab5ba5bdfcf9" translate="yes" xml:space="preserve">
          <source>This function starts the evaluation of a digit map with megaco:eval_digit_map/1 and sends a sequence of events to it megaco:report_digit_event/2 in order to simplify testing of digit maps.</source>
          <target state="translated">この関数は、デジットマップのテストを簡単にするために、megaco:eval_digit_map/1でデジットマップの評価を開始し、一連のイベントをmegaco:report_digit_event/2に送信します。</target>
        </trans-unit>
        <trans-unit id="4a3fae66ed7c3cc4e51664a7096a153b2497b47c" translate="yes" xml:space="preserve">
          <source>This function starts the standalone &lt;code&gt;nteventlog&lt;/code&gt; process and, if &lt;code&gt;start_link/2&lt;/code&gt; is used, links to it.</source>
          <target state="translated">この関数は、スタンドアロンの &lt;code&gt;nteventlog&lt;/code&gt; プロセスを開始し、 &lt;code&gt;start_link/2&lt;/code&gt; が使用されている場合はそれにリンクします。</target>
        </trans-unit>
        <trans-unit id="51eab0810670dc8d97c68c1365bff9e556a60d4b" translate="yes" xml:space="preserve">
          <source>This function takes a list of 'ActionRequest' records and has three main options:</source>
          <target state="translated">この関数は'ActionRequest'レコードのリストを受け取り、3つの主要なオプションを持ちます。</target>
        </trans-unit>
        <trans-unit id="b830d311ae4ee73ecebdc71d2c40db38f6b5103e" translate="yes" xml:space="preserve">
          <source>This function tries to register the specified managed agents, without checking if any of them exist. To change a registered managed agent, the agent must first be unregistered.</source>
          <target state="translated">この関数は、指定された管理エージェントが存在するかどうかを確認せずに、指定された管理エージェントの登録を試みます。登録されている管理エージェントを変更するには、まず登録を解除する必要があります。</target>
        </trans-unit>
        <trans-unit id="97a729927e14b719ca944a21f7b5b57eca599bd8" translate="yes" xml:space="preserve">
          <source>This function tries to register the specified users, without checking if any of them exist. To change a registered user, the user must first be unregistered.</source>
          <target state="translated">この関数は、指定されたユーザが存在するかどうかを確認せずに、指定されたユーザの登録を試みます。登録されているユーザを変更するには、まずそのユーザが登録されていない必要があります。</target>
        </trans-unit>
        <trans-unit id="b10454e8f4725b8a0eb4da465ee57ecb2b75d61c" translate="yes" xml:space="preserve">
          <source>This function updates the configuration data from which the specified configuration variable was read, and returns the (possibly) new value of this variable.</source>
          <target state="translated">この関数は、指定された設定変数が読み込まれた設定データを更新し、(可能性のある)新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="ca81e8a0f9544f8a61bc496a4e260c146099af94" translate="yes" xml:space="preserve">
          <source>This function used to return &lt;code&gt;false&lt;/code&gt; for BIFs before Erlang/OTP 18.0.</source>
          <target state="translated">この関数は、Erlang / OTP 18.0より前のBIFで &lt;code&gt;false&lt;/code&gt; を返していました。</target>
        </trans-unit>
        <trans-unit id="ae9274ef2248b4bd36f346fff38a572567648823" translate="yes" xml:space="preserve">
          <source>This function uses resolver option &lt;code&gt;search&lt;/code&gt; just like &lt;code&gt;&lt;a href=&quot;#getbyname-2&quot;&gt;getbyname/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、 &lt;code&gt;&lt;a href=&quot;#getbyname-2&quot;&gt;getbyname/2,3&lt;/a&gt;&lt;/code&gt; と同様にリゾルバーオプション &lt;code&gt;search&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="21fc2b9bb4c2e8f025026e93df306e88dd67e182" translate="yes" xml:space="preserve">
          <source>This function uses resolver option &lt;code&gt;search&lt;/code&gt; that is a list of domain names. If the name to resolve contains no dots, it is prepended to each domain name in the search list, and they are tried in order. If the name contains dots, it is first tried as an absolute name and if that fails, the search list is used. If the name has a trailing dot, it is supposed to be an absolute name and the search list is not used.</source>
          <target state="translated">この関数は、ドメイン名のリストであるリゾルバーオプション &lt;code&gt;search&lt;/code&gt; を使用します。解決する名前にドットが含まれていない場合は、検索リストの各ドメイン名の前に付加され、順番に試されます。名前にドットが含まれている場合は、最初に絶対名として試行され、失敗した場合は検索リストが使用されます。名前の末尾にドットがある場合、それは絶対名であると見なされ、検索リストは使用されません。</target>
        </trans-unit>
        <trans-unit id="66f0f7dcf3e6aeb3b05425d374f015271bc5c8f8" translate="yes" xml:space="preserve">
          <source>This function uses the NIF library to determine if dynamic tracing is available. Usually calling &lt;code&gt;erlang:system_info/1&lt;/code&gt; is a better indicator of the availability of dynamic tracing.</source>
          <target state="translated">この関数は、NIFライブラリーを使用して、動的トレースが使用可能かどうかを判別します。通常、 &lt;code&gt;erlang:system_info/1&lt;/code&gt; の呼び出しは、動的トレースの可用性のより良い指標です。</target>
        </trans-unit>
        <trans-unit id="21d638edd5b52a38a30d020b01f40281508b0f05" translate="yes" xml:space="preserve">
          <source>This function uses the module &lt;code&gt;rand&lt;/code&gt; to generate new keys. The seed it uses may be initialized by calling &lt;code&gt;rand:seed/1&lt;/code&gt; or &lt;code&gt;rand:seed/2&lt;/code&gt; before this function is first called.</source>
          <target state="translated">この関数は、モジュール &lt;code&gt;rand&lt;/code&gt; を使用して新しいキーを生成します。使用する &lt;code&gt;rand:seed/2&lt;/code&gt; は、この関数が最初に呼び出される前に &lt;code&gt;rand:seed/1&lt;/code&gt; またはrand：seed / 2を呼び出すことによって初期化できます。</target>
        </trans-unit>
        <trans-unit id="971c66faa137257bfd2753c3d5426c0e180b495e" translate="yes" xml:space="preserve">
          <source>This function was introduced in Erlang/OTP R16 as part of a first step to support UTF-8 atoms.</source>
          <target state="translated">この関数はErlang/OTP R16でUTF-8アトムをサポートするための最初のステップの一部として導入されました。</target>
        </trans-unit>
        <trans-unit id="d681ac22ff0dcd99cf6793970b0001c494cacadb" translate="yes" xml:space="preserve">
          <source>This function was originally intenden for debugging purpose. It is not recommended to print very large terms with &lt;code&gt;%T&lt;/code&gt;. The function may change &lt;code&gt;errno&lt;/code&gt;, even if successful.</source>
          <target state="translated">この関数は、もともとデバッグを目的としたものでした。 &lt;code&gt;%T&lt;/code&gt; で非常に大きな用語を印刷することはお勧めしません。関数は、成功した場合でも &lt;code&gt;errno&lt;/code&gt; を変更する可能性があります。</target>
        </trans-unit>
        <trans-unit id="59044a92e08961dca9d0df91cd84e6bdf2e387c0" translate="yes" xml:space="preserve">
          <source>This function will fail with a &lt;code&gt;badarg&lt;/code&gt; exception if:</source>
          <target state="translated">この関数は、 &lt;code&gt;badarg&lt;/code&gt; 場合にbadarg例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="ecc1aaa0050da285abdb43a70baab76906a3247e" translate="yes" xml:space="preserve">
          <source>This function will return the identity of test- and group leader processes that are still running at the time of this call. &lt;code&gt;TestProcs&lt;/code&gt; are processes in the system that have a Common Test IO process as group leader. &lt;code&gt;SharedGL&lt;/code&gt; is the central Common Test IO process, responsible for printing to log files for configuration functions and sequentially executing test cases. &lt;code&gt;OtherGLs&lt;/code&gt; are Common Test IO processes that print to log files for test cases in parallel test case groups.</source>
          <target state="translated">この関数は、この呼び出し時にまだ実行されているテストおよびグループリーダープロセスのIDを返します。 &lt;code&gt;TestProcs&lt;/code&gt; は、グループリーダーとしてCommon Test IOプロセスを持つシステム内のプロセスです。 &lt;code&gt;SharedGL&lt;/code&gt; は、共通の共通テストIOプロセスであり、構成機能のログファイルに出力し、テストケースを順次実行します。 &lt;code&gt;OtherGLs&lt;/code&gt; は、並列テストケースグループのテストケースのログファイルに出力する一般的なテストIOプロセスです。</target>
        </trans-unit>
        <trans-unit id="f14e5a0a13df62695dcaadc50e2282e18baef924" translate="yes" xml:space="preserve">
          <source>This function will save all match specifications saved during the session (during calls to &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt;) and built-in match specifications in a text file with the name designated by &lt;code&gt;Name&lt;/code&gt;. The format of the file is textual, why it can be edited with an ordinary text editor, and then restored with &lt;code&gt;&lt;a href=&quot;#rtp-1&quot;&gt;rtp/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数は、セッション中に（ &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; への呼び出し中に）保存されたすべての一致仕様と組み込みの一致仕様を、 &lt;code&gt;Name&lt;/code&gt; で指定された名前のテキストファイルに保存します。ファイルの形式はテキストであり、通常のテキストエディターで編集してから、 &lt;code&gt;&lt;a href=&quot;#rtp-1&quot;&gt;rtp/1&lt;/a&gt;&lt;/code&gt; で復元できる理由です。</target>
        </trans-unit>
        <trans-unit id="fe5d78839a608e23473c4be1eb43fd59136f1578" translate="yes" xml:space="preserve">
          <source>This function works as &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt;, but only disables tracing set up with &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; (not with &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt; として機能しますが、（ &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; ではなく） &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; で設定されたトレースのみを無効にします。</target>
        </trans-unit>
        <trans-unit id="4f73b00efb28d22de61c21b36ad8a83ee49cefed" translate="yes" xml:space="preserve">
          <source>This function works as &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt;, but only disables tracing set up with &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; (not with &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#ctp-1&quot;&gt;ctp/1&lt;/a&gt;&lt;/code&gt; として機能しますが、（ &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; ではなく） &lt;code&gt;&lt;a href=&quot;#tpl-2&quot;&gt;tpl/2&lt;/a&gt;&lt;/code&gt; で設定されたトレースのみを無効にします。</target>
        </trans-unit>
        <trans-unit id="7f3521fe756e0c4e17603d964e71f79b819ca2cc" translate="yes" xml:space="preserve">
          <source>This function works as &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt;, but enables tracing for local calls (and local functions) as well as for global calls (and functions).</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; として機能しますが、ローカル呼び出し（およびローカル関数）およびグローバル呼び出し（および関数）のトレースを有効にします。</target>
        </trans-unit>
        <trans-unit id="649cc8a65ee1157009a2026f80b85a94281bddef" translate="yes" xml:space="preserve">
          <source>This function works exactly as &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt;, but allows you to write your own handler function. The handler function works mostly as the one described in &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt;, but will also have to be prepared to handle trace messages of the form &lt;code&gt;{drop, N}&lt;/code&gt;, where &lt;code&gt;N&lt;/code&gt; is the number of dropped messages. This pseudo trace message will only occur if the ip trace driver is used.</source>
          <target state="translated">この関数は &lt;code&gt;&lt;a href=&quot;#trace_client-2&quot;&gt;trace_client/2&lt;/a&gt;&lt;/code&gt; とまったく同じように機能しますが、独自のハンドラー関数を作成できます。ハンドラー関数は、主に &lt;code&gt;&lt;a href=&quot;#tracer-2&quot;&gt;tracer/2&lt;/a&gt;&lt;/code&gt; で説明されているものと同じように機能しますが、 &lt;code&gt;{drop, N}&lt;/code&gt; 形式のトレースメッセージを処理する準備も必要です。ここで、 &lt;code&gt;N&lt;/code&gt; はドロップされたメッセージの数です。この疑似トレースメッセージは、ip traceドライバが使用されている場合にのみ発生します。</target>
        </trans-unit>
        <trans-unit id="e3613eb939658a1c4e7abb497a6aeaed611fdecc" translate="yes" xml:space="preserve">
          <source>This function works exactly the same way as &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; except that it is asynchronous instead of synchronous. The spawned process will link with the caller when created. If an &lt;code&gt;Error&lt;/code&gt; occurs while doing the cover analysis the process will crash with the same error reason as &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; would return.</source>
          <target state="translated">この関数は、同期ではなく非同期であることを除いて、 &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; とまったく同じように機能します。生成されたプロセスは、作成時に呼び出し元とリンクします。カバー分析の実行中に &lt;code&gt;Error&lt;/code&gt; が発生した場合、 &lt;code&gt;&lt;a href=&quot;#analyse_to_file-1&quot;&gt;analyse_to_file&lt;/a&gt;&lt;/code&gt; が返すのと同じエラー理由でプロセスがクラッシュします。</target>
        </trans-unit>
        <trans-unit id="41248f0d6e585aea101cd90cc6b6f5d6fd5821da" translate="yes" xml:space="preserve">
          <source>This function, similar to &lt;code&gt;timer:sleep/1&lt;/code&gt; in STDLIB, suspends the test case for a specified time. However, this function also multiplies &lt;code&gt;Time&lt;/code&gt; with the &lt;code&gt;multiply_timetraps&lt;/code&gt; value (if set) and under certain circumstances also scales up the time automatically if &lt;code&gt;scale_timetraps&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (default is &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">この関数は、STDLIBの &lt;code&gt;timer:sleep/1&lt;/code&gt; と同様に、指定された時間テストケースを一時停止します。ただし、この関数は &lt;code&gt;Time&lt;/code&gt; に &lt;code&gt;multiply_timetraps&lt;/code&gt; 値（設定されている場合）も乗算し、特定の状況では、 &lt;code&gt;scale_timetraps&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合（デフォルトは &lt;code&gt;false&lt;/code&gt; ）に時間を自動的に拡大します。</target>
        </trans-unit>
        <trans-unit id="285cbe2f9f5c577e4d9b2e978e114e422218a0dd" translate="yes" xml:space="preserve">
          <source>This functionality can be used to avoid that one process overloads a database on another node.</source>
          <target state="translated">この機能は、あるプロセスが別のノードでデータベースをオーバーロードしないようにするために使用できます。</target>
        </trans-unit>
        <trans-unit id="1e696e3030e058d7399f33e7d6312da8bd0dec58" translate="yes" xml:space="preserve">
          <source>This functionality is deprecated as of OTP 23, and will be removed in OTP 24. Reasonably new &lt;code&gt;gcc&lt;/code&gt; compilers will issue deprecation warnings. In order to disable these warnings, define the macro &lt;code&gt;EI_NO_DEPR_WARN&lt;/code&gt;.</source>
          <target state="translated">この機能はOTP23で非推奨になり、OTP 24で削除されます。かなり新しい &lt;code&gt;gcc&lt;/code&gt; コンパイラーは、非推奨の警告を発行します。これらの警告を無効にするには、マクロ &lt;code&gt;EI_NO_DEPR_WARN&lt;/code&gt; を定義します。</target>
        </trans-unit>
        <trans-unit id="2f663a6b926446bfebbbdc0b7d15882ae1bccc35" translate="yes" xml:space="preserve">
          <source>This functionality is only provided when using &lt;code&gt;BER&lt;/code&gt; (option &lt;code&gt;ber&lt;/code&gt;).</source>
          <target state="translated">この機能は、 &lt;code&gt;BER&lt;/code&gt; （オプション &lt;code&gt;ber&lt;/code&gt; ）を使用する場合にのみ提供されます。</target>
        </trans-unit>
        <trans-unit id="03d45e2ad58e3bd143a9c7b2c50773493705e610" translate="yes" xml:space="preserve">
          <source>This functionality is used both when the transaction sender is used and for segmentation. So, for either of those to work, this function &lt;strong&gt;must&lt;/strong&gt; be fully supported!</source>
          <target state="translated">この機能は、トランザクション送信側が使用されている場合とセグメンテーションに使用されます。したがって、これらのいずれかが機能するためには、この機能が完全にサポートされている&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="018c73d63f139a3baee06c9daba146659fa3ed6c" translate="yes" xml:space="preserve">
          <source>This functionality is used when a client process communicates with a file i/o-server to spread the user tag to the I/O-server and then down to the efile_drv driver. By using &lt;code&gt;spread_tag/1&lt;/code&gt; and &lt;code&gt;restore_tag/1&lt;/code&gt;, one can enable or disable spreading of user tags to other processes and then restore the previous state of the user tag. The TagData returned from this call contains all previous information so the state (including any previously spread user tags) will be completely restored by a later call to &lt;code&gt;restore_tag/1&lt;/code&gt;.</source>
          <target state="translated">この機能は、クライアントプロセスがファイルI / Oサーバーと通信して、ユーザータグをI / Oサーバーに送信し、efile_drvドライバーに送信するときに使用されます。使用して &lt;code&gt;spread_tag/1&lt;/code&gt; 及び &lt;code&gt;restore_tag/1&lt;/code&gt; を、一方が有効または無効に他のプロセスへのユーザータグの広がりと、ユーザタグの前の状態を復元することができます。この呼び出しから返されたTagDataには以前のすべての情報が含まれているため、状態（以前に拡散されたユーザータグを含む）は、後で &lt;code&gt;restore_tag/1&lt;/code&gt; を呼び出すことによって完全に復元されます。</target>
        </trans-unit>
        <trans-unit id="1bfce0af83883f449ffeeed0bed57f3f0c60c686" translate="yes" xml:space="preserve">
          <source>This functionality works together with option &lt;code&gt;ber&lt;/code&gt;. It enables the specialized decodes, see Section &lt;code&gt;&lt;a href=&quot;asn1_spec&quot;&gt;Specialized Decode&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この機能はオプション &lt;code&gt;ber&lt;/code&gt; と一緒に機能します。これは、特殊なデコードを可能にし、セクションを参照 &lt;code&gt;&lt;a href=&quot;asn1_spec&quot;&gt;Specialized Decode&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7b7b1c65d65cff1e78b722d7d85e687fe5927d13" translate="yes" xml:space="preserve">
          <source>This functions differs from &lt;code&gt;token&lt;/code&gt; in that it will continue to scan tokens upto and including an &lt;code&gt;{end_token,Token}&lt;/code&gt; has been scanned (see next section). It will then return all the tokens. This is typically used for scanning grammars like Erlang where there is an explicit end token, &lt;code&gt;'.'&lt;/code&gt;. If no end token is found then the whole file will be scanned and returned. If an error occurs then all tokens upto and including the next end token will be skipped.</source>
          <target state="translated">この関数は、 &lt;code&gt;{end_token,Token}&lt;/code&gt; がスキャンされるまでトークンをスキャンし続けるという点で &lt;code&gt;token&lt;/code&gt; とは異なります（次のセクションを参照）。その後、すべてのトークンを返します。これは通常、明示的な終了トークン &lt;code&gt;'.'&lt;/code&gt; があるErlangなどの文法をスキャンするために使用されます。。終了トークンが見つからない場合は、ファイル全体がスキャンされて返されます。エラーが発生した場合、次の終了トークンまでのすべてのトークンがスキップされます。</target>
        </trans-unit>
        <trans-unit id="78c42db04efcc05657be0800818fa1802af33516" translate="yes" xml:space="preserve">
          <source>This functions discards all options in the begining of the lines of thoose files when reading them.</source>
          <target state="translated">この関数は、ファイルを読み込む際に、ファイルの行頭にあるすべてのオプションを破棄します。</target>
        </trans-unit>
        <trans-unit id="7a3c88f30a1cd5b57516c27de9ff90f9c75fa259" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt; ?LOG_ERROR&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに、 &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt; ?LOG_ERROR&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="4f5b9819acc50428faeeffeac0e065c79843eb3c" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt; ?LOG_INFO&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに、 &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt; ?LOG_INFO&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="d18e02167a85c9b4d903d206ff737224c9a5b3ea" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt; ?LOG_WARNING&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに、 &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt; ?LOG_WARNING&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e988c48e237b3372b652c8e3639563f7969c8f32" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_ERROR&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_ERROR&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#error-1&quot;&gt;logger:error/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="e1aa52c0f139d5d8a6f71a168c88c9470f952129" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_INFO&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_INFO&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#info-1&quot;&gt;logger:info/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="75829b451d464b595a1024dec90085ca0093abce" translate="yes" xml:space="preserve">
          <source>This functions is kept for backwards compatibility and must not be used by new code. Use the &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_WARNING&lt;/a&gt;&lt;/code&gt; macro or &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">この関数は下位互換性のために保持されており、新しいコードで使用しないでください。代わりに &lt;code&gt;&lt;a href=&quot;logger#macros&quot;&gt;?LOG_WARNING&lt;/a&gt;&lt;/code&gt; マクロまたは &lt;code&gt;&lt;a href=&quot;logger#warning-1&quot;&gt;logger:warning/1,2,3&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="66d11c99d3b8bf1e2077d0f21b72e0ab032ea87c" translate="yes" xml:space="preserve">
          <source>This functions provides a way of updating a counter, without having to look up an object, update the object by incrementing an element, and insert the resulting object into the table again.</source>
          <target state="translated">この関数は、オブジェクトを調べずにカウンタを更新し、要素をインクリメントしてオブジェクトを更新し、その結果得られたオブジェクトを再度テーブルに挿入する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="2b70ec5aa36c1075bf590864c6a36436ad975b12" translate="yes" xml:space="preserve">
          <source>This generates a &lt;code&gt;relup&lt;/code&gt; file with instructions for how to upgrade from version &quot;A&quot; (&quot;ch_rel-1&quot;) to version &quot;B&quot; (&quot;ch_rel-2&quot;) and how to downgrade from version &quot;B&quot; to version &quot;A&quot;.</source>
          <target state="translated">これにより、バージョン &quot;A&quot;（ &quot;ch_rel-1&quot;）からバージョン &quot;B&quot;（ &quot;ch_rel-2&quot;）にアップグレードする方法と、バージョン &quot;B&quot;からバージョン &quot;A&quot;にダウングレードする方法の手順を含む &lt;code&gt;relup&lt;/code&gt; ファイルが生成されます。</target>
        </trans-unit>
        <trans-unit id="c116938db051375fe0e1532d328cb08b14b31015" translate="yes" xml:space="preserve">
          <source>This gives &lt;code&gt;D = 273&lt;/code&gt;, &lt;code&gt;E = 00&lt;/code&gt;, and F binds to a binary of size 1: &lt;code&gt;binary_to_list(F) = [42]&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;D = 273&lt;/code&gt; 、 &lt;code&gt;E = 00&lt;/code&gt; 、およびFがサイズ1のバイナリにバインドされます： &lt;code&gt;binary_to_list(F) = [42]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b9b265622dae76f6ead2d5384e91874a0a56b738" translate="yes" xml:space="preserve">
          <source>This gives a binary of size 4. Here, a &lt;strong&gt;size expression&lt;/strong&gt; is used for the variable &lt;code&gt;C&lt;/code&gt; to specify a 16-bits segment of &lt;code&gt;Bin2&lt;/code&gt;.</source>
          <target state="translated">これにより、サイズ4のバイナリが得られます。ここでは、変数 &lt;code&gt;C&lt;/code&gt; に&lt;strong&gt;サイズ式&lt;/strong&gt;を使用して、 &lt;code&gt;Bin2&lt;/code&gt; の 16ビットセグメントを指定しています。</target>
        </trans-unit>
        <trans-unit id="9304ac5067de60ffef75db2d0f27153eea8fd249" translate="yes" xml:space="preserve">
          <source>This gives a set of binary logs, for example:</source>
          <target state="translated">これは、例えば、バイナリログのセットを与えます。</target>
        </trans-unit>
        <trans-unit id="efb5947a696c40715e3fb71363beaeb5efc4f051" translate="yes" xml:space="preserve">
          <source>This gives an entry for &lt;code&gt;m1&lt;/code&gt; also in the cover log for test run &lt;code&gt;s2&lt;/code&gt;. The problem is that this only reflects the coverage by &lt;code&gt;s2&lt;/code&gt; tests, not the accumulated result over &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;. This is where the cross cover mechanism comes in handy.</source>
          <target state="translated">これにより、テスト実行 &lt;code&gt;s2&lt;/code&gt; のカバーログにも &lt;code&gt;m1&lt;/code&gt; のエントリが表示されます。問題は、これが &lt;code&gt;s2&lt;/code&gt; テストによるカバレッジのみを反映し、 &lt;code&gt;s1&lt;/code&gt; および &lt;code&gt;s2&lt;/code&gt; の累積結果を反映しないことです。これは、クロスカバーメカニズムが役に立ちます。</target>
        </trans-unit>
        <trans-unit id="713b4a71335dbed07b61ab42f009c85295637765" translate="yes" xml:space="preserve">
          <source>This gives no result of length &amp;gt; 0 and we are at the last position, so the global search is complete.</source>
          <target state="translated">これは長さ&amp;gt; 0の結果を与えず、最後の位置にいるので、グローバル検索は完了です。</target>
        </trans-unit>
        <trans-unit id="e365e009b84d303f259288c46a5cf1337ae2825c" translate="yes" xml:space="preserve">
          <source>This gives the list of all elements in L1 that are not contained in L2.</source>
          <target state="translated">これは、L1に含まれるすべての要素のうち、L2に含まれない要素のリストを与えます。</target>
        </trans-unit>
        <trans-unit id="79f96c1766aa59b316c1112142e724a0ac8f12f4" translate="yes" xml:space="preserve">
          <source>This gives the same result. &lt;code&gt;[{'&amp;lt;', '$2', 2000}]&lt;/code&gt; is in the guard part and therefore discards anything that does not have an &lt;code&gt;empyear&lt;/code&gt; (bound to &lt;code&gt;'$2'&lt;/code&gt; in the head) less than 2000, as the guard in the &lt;code&gt;foldr/3&lt;/code&gt; example.</source>
          <target state="translated">これは同じ結果になります。 &lt;code&gt;[{'&amp;lt;', '$2', 2000}]&lt;/code&gt; はガード部分にあるため、 &lt;code&gt;empyear&lt;/code&gt; &lt;code&gt;foldr/3&lt;/code&gt; ガードとして、2000年未満のempyear（ヘッドの &lt;code&gt;'$2'&lt;/code&gt; にバインド）がないものはすべて破棄します例。</target>
        </trans-unit>
        <trans-unit id="22d1dda5ab8530e1e0b433f6ea95f6b6b7eda6d3" translate="yes" xml:space="preserve">
          <source>This gives two binaries of size 3, with the following evaluations:</source>
          <target state="translated">これにより、サイズ3のバイナリが2つ与えられ、以下の評価が得られます。</target>
        </trans-unit>
        <trans-unit id="5bdfea051354f0bf5fa426336e15ae7b72111a2a" translate="yes" xml:space="preserve">
          <source>This grammar can be used to generate a parser which parses list expressions, such as &lt;code&gt;(), (a), (peter charles), (a (b c) d (())), ...&lt;/code&gt; provided that your scanner tokenizes, for example, the input &lt;code&gt;(peter charles)&lt;/code&gt; as follows:</source>
          <target state="translated">この文法は、次のようなリスト式、構文解析するパーサを生成するために使用することができ &lt;code&gt;(), (a), (peter charles), (a (b c) d (())), ...&lt;/code&gt; のために、お使いのスキャナのトークン化することを提供します例として、次のような入力 &lt;code&gt;(peter charles)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c5c33f8292424d5d8afd6fb208cfbfa703f594e5" translate="yes" xml:space="preserve">
          <source>This handler behaves much like &lt;code&gt;logger_std_h&lt;/code&gt;, except it uses &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; as its destination.</source>
          <target state="translated">このハンドラーは、宛先として &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; を使用することを除いて、 &lt;code&gt;logger_std_h&lt;/code&gt; とほとんど同じように動作します。</target>
        </trans-unit>
        <trans-unit id="dcaca3a309669115a5d10a160b27e110b7d53cd4" translate="yes" xml:space="preserve">
          <source>This handler ignores events that do not originate from the &lt;code&gt;error_logger&lt;/code&gt; API, or from within OTP. This means that if your code uses the Logger API for logging, then your log events will be discarded by this handler.</source>
          <target state="translated">このハンドラーは、 &lt;code&gt;error_logger&lt;/code&gt; APIまたはOTP内から発生していないイベントを無視します。これは、コードがロギングにLogger APIを使用する場合、ログイベントはこのハンドラーによって破棄されることを意味します。</target>
        </trans-unit>
        <trans-unit id="575502000290e2f076b35060118636479ce93a20" translate="yes" xml:space="preserve">
          <source>This handler is provided for backwards compatibility only. It is not started by default, but will be automatically started the first time an &lt;code&gt;error_logger&lt;/code&gt; event handler is added with &lt;code&gt;&lt;a href=&quot;error_logger#add_report_handler-1&quot;&gt; error_logger:add_report_handler/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このハンドラーは、下位​​互換性のためにのみ提供されています。デフォルトでは開始されませんが、 &lt;code&gt;error_logger&lt;/code&gt; イベントハンドラーが &lt;code&gt;&lt;a href=&quot;error_logger#add_report_handler-1&quot;&gt; error_logger:add_report_handler/1,2&lt;/a&gt;&lt;/code&gt; で最初に追加されたときに自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="29807c3684400c3becd59e5edf9ba096157cab01" translate="yes" xml:space="preserve">
          <source>This handler is provided for backwards compatibility only. It is not started by default, but will be automatically started the first time an &lt;code&gt;error_logger&lt;/code&gt; event handler is added with &lt;code&gt;&lt;a href=&quot;error_logger#add_report_handler-1&quot;&gt;error_logger:add_report_handler/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このハンドラーは、下位​​互換性のためにのみ提供されています。デフォルトでは開始されませんが、 &lt;code&gt;&lt;a href=&quot;error_logger#add_report_handler-1&quot;&gt;error_logger:add_report_handler/1,2&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;error_logger&lt;/code&gt; イベントハンドラーが初めて追加されたときに自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="87e5ec8533eb6addfe606eccdf0a8555b2e81bc0" translate="yes" xml:space="preserve">
          <source>This has the same effect as setting option &lt;code&gt;ucp&lt;/code&gt;: it causes sequences such as \d and \w to use Unicode properties to determine character types, instead of recognizing only characters with codes &amp;lt; 256 through a lookup table.</source>
          <target state="translated">これは、オプション &lt;code&gt;ucp&lt;/code&gt; を設定するのと同じ効果があります。これにより、\ dや\ wなどのシーケンスは、ルックアップテーブルでコードが256未満の文字のみを認識するのではなく、Unicodeプロパティを使用して文字タイプを決定します。</target>
        </trans-unit>
        <trans-unit id="0c156c0c2fc33946d9fbadad8702601855c80e09" translate="yes" xml:space="preserve">
          <source>This has the same effect as the above, &lt;strong&gt;if and only if&lt;/strong&gt; megaco has sent at least one pending message for this request (during the processing of the request). If no pending message has been sent, then immediate acknowledgement will &lt;strong&gt;not&lt;/strong&gt; be requested.</source>
          <target state="translated">これは、megacoがこの要求に対して少なくとも1つの保留メッセージを送信した&lt;strong&gt;場合&lt;/strong&gt;（要求の処理中）に&lt;strong&gt;限り&lt;/strong&gt;、上記と同じ効果があります。保留中のメッセージが送信されていない場合、即時の確認は要求され&lt;strong&gt;ませ&lt;/strong&gt;ん。</target>
        </trans-unit>
        <trans-unit id="4ede3cfedbb971a104b9a8ef6799913490ca75be" translate="yes" xml:space="preserve">
          <source>This has the same effect as the following:</source>
          <target state="translated">と同様の効果があります。</target>
        </trans-unit>
        <trans-unit id="e0d90b246b1198d103c86bc16c013de08162e8ce" translate="yes" xml:space="preserve">
          <source>This has the value &lt;code&gt;standard_io&lt;/code&gt;, &lt;code&gt;standard_error&lt;/code&gt;, &lt;code&gt;{file,LogFileName}&lt;/code&gt;, or &lt;code&gt;{file,LogFileName,LogFileOpts}&lt;/code&gt;.</source>
          <target state="translated">これには、値 &lt;code&gt;standard_io&lt;/code&gt; 、 &lt;code&gt;standard_error&lt;/code&gt; 、 &lt;code&gt;{file,LogFileName}&lt;/code&gt; 、または &lt;code&gt;{file,LogFileName,LogFileOpts}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="fa9ae8726a4cc0244638ba67ad2025c382e5beef" translate="yes" xml:space="preserve">
          <source>This implementation-dependent function increments the reduction counter for the calling process. In the Beam emulator, the reduction counter is normally incremented by one for each function and BIF call. A context switch is forced when the counter reaches the maximum number of reductions for a process (2000 reductions in Erlang/OTP R12B).</source>
          <target state="translated">この関数は、呼び出したプロセスのリダクション・カウンタをインクリメントする。Beamエミュレータでは、通常は関数とBIFコールごとにカウンタが1ずつインクリメントされます。カウンタがプロセスの最大削減数(Erlang/OTP R12Bでは2000削減)に達するとコンテキストスイッチが入る。</target>
        </trans-unit>
        <trans-unit id="a8d3c24a386f367f78241d2e4bac7b7d69305c8c" translate="yes" xml:space="preserve">
          <source>This implies that for an included application, the set of start phases must be a subset of the set of phases defined for the primary application. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">これは、組み込まれたアプリケーションの場合、開始フェーズのセットは、プライマリアプリケーションに対して定義されたフェーズのセットのサブセットでなければならないことを意味します。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="394da9d3e5810d24a5bd1b236db1807f4d4bd66f" translate="yes" xml:space="preserve">
          <source>This included file will:</source>
          <target state="translated">この同梱のファイルは</target>
        </trans-unit>
        <trans-unit id="60cc03c618eaaba02c392d8b6d5e3541aa6478d4" translate="yes" xml:space="preserve">
          <source>This index is used to separate the implementation of the SNMP ordering from the actual implementation of the table. The SNMP ordering, that is implementation of GET NEXT, is implemented in this module.</source>
          <target state="translated">このインデックスは、SNMP 順序の実装と実際のテーブルの実装を分離するために使用されます。このモジュールでは、GET NEXTの実装であるSNMP順序が実装されています。</target>
        </trans-unit>
        <trans-unit id="4da9986920c604b316098093467baaddac2eb487" translate="yes" xml:space="preserve">
          <source>This indicates that the variable &lt;code&gt;File&lt;/code&gt;, which is defined inside the fun, collides with the variable &lt;code&gt;File&lt;/code&gt;, which is defined outside the fun.</source>
          <target state="translated">これは変数ことを示している &lt;code&gt;File&lt;/code&gt; の楽しみ内で定義され、変数に衝突 &lt;code&gt;File&lt;/code&gt; 楽しく外で定義され、。</target>
        </trans-unit>
        <trans-unit id="cfea72aa373ef570cea99287f1170facd64d6eef" translate="yes" xml:space="preserve">
          <source>This inform the user which target addresses the notification was sent to.</source>
          <target state="translated">これは、通知が送信されたターゲットアドレスをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="0d129bafd72948232df4b45a85096033eb4d3888" translate="yes" xml:space="preserve">
          <source>This information can be invalid for some implementations.</source>
          <target state="translated">この情報は、一部の実装では無効になる場合があります。</target>
        </trans-unit>
        <trans-unit id="7aae2c9ba176a7a3f9d606f61a083bbbedd09c9d" translate="yes" xml:space="preserve">
          <source>This information can be produced by the functions &lt;code&gt;&lt;a href=&quot;#user_info&quot;&gt;user_info&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#conn_info&quot;&gt;conn_info&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#system_info&quot;&gt;system_info&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_stats&quot;&gt;get_stats&lt;/a&gt;&lt;/code&gt; but this is a simple way to get it all at once.</source>
          <target state="translated">この情報は、機能することにより製造することができる &lt;code&gt;&lt;a href=&quot;#user_info&quot;&gt;user_info&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#conn_info&quot;&gt;conn_info&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#system_info&quot;&gt;system_info&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#get_stats&quot;&gt;get_stats&lt;/a&gt;&lt;/code&gt; が、これは、すべて一度にそれを得るための簡単な方法です。</target>
        </trans-unit>
        <trans-unit id="710dd978424ecc04fc2bf1003714cbd1fde00ea0" translate="yes" xml:space="preserve">
          <source>This information can be retrieved using &lt;code&gt;&lt;a href=&quot;megaco#conn_info&quot;&gt;megaco:conn_info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、 &lt;code&gt;&lt;a href=&quot;megaco#conn_info&quot;&gt;megaco:conn_info&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="61fde3bec5255dca0919656dc9b966cbee0da75a" translate="yes" xml:space="preserve">
          <source>This information can be retrieved using &lt;code&gt;&lt;a href=&quot;megaco#system_info&quot;&gt;megaco:system_info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、 &lt;code&gt;&lt;a href=&quot;megaco#system_info&quot;&gt;megaco:system_info&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="eaf22384b8506971667ec0cacf5790e4084dc39b" translate="yes" xml:space="preserve">
          <source>This information can be retrieved using &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;megaco:user_info&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、 &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;megaco:user_info&lt;/a&gt;&lt;/code&gt; を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="962a2ecfcacf4f2ae7569863ad3b0745fd8bd9b5" translate="yes" xml:space="preserve">
          <source>This information can be used to traverse the chain of function calls, using the &lt;strong&gt;Up&lt;/strong&gt; and &lt;strong&gt;Down&lt;/strong&gt; buttons in the &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報を使用して、[ &lt;code&gt;&lt;a href=&quot;#attach&quot;&gt;Attach Process window&lt;/a&gt;&lt;/code&gt; [ &lt;strong&gt;Up]&lt;/strong&gt;および[ &lt;strong&gt;Down]&lt;/strong&gt;ボタンを使用して、関数呼び出しのチェーンをトラバースできます。</target>
        </trans-unit>
        <trans-unit id="9a325aae80341287a8eab869857564f9b28b86fd" translate="yes" xml:space="preserve">
          <source>This information is used by the release handler during upgrades and downgrades, see &lt;code&gt;&lt;a href=&quot;release_handling&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、アップグレードおよびダウングレード中にリリースハンドラーによって使用されます。「 &lt;code&gt;&lt;a href=&quot;release_handling&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="201452c6ed23592af55381e4e0078166857bb6b2" translate="yes" xml:space="preserve">
          <source>This information is useful when an external entity (for example, an IDE) provides additional code for a running node. If the code server is in interactive mode, it only has to add the path to the code. If the code server is in embedded mode, the code must be loaded with &lt;code&gt;&lt;a href=&quot;#load_binary-3&quot;&gt;load_binary/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この情報は、外部エンティティ（IDEなど）が実行中のノードに追加のコードを提供する場合に役立ちます。コードサーバーがインタラクティブモードの場合、コードへのパスを追加するだけです。コードサーバーが埋め込みモードの場合、コードは &lt;code&gt;&lt;a href=&quot;#load_binary-3&quot;&gt;load_binary/3&lt;/a&gt;&lt;/code&gt; でロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="5a8323563f351cf2bca8245a5765d1e7287f26f8" translate="yes" xml:space="preserve">
          <source>This informs the user that this target address acknowledged the notification.</source>
          <target state="translated">これは、このターゲットアドレスが通知を承認したことをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="1baf8ed33916a0e4003152e45bbc117558b69aff" translate="yes" xml:space="preserve">
          <source>This informs the user that this target address did not acknowledge notification.</source>
          <target state="translated">これは、このターゲットアドレスが通知を承認しなかったことをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="e9c0fbf4edafb48f201f8b1170f9bfbfe552c23a" translate="yes" xml:space="preserve">
          <source>This informs the user that this target address did not acknowledge the notification.</source>
          <target state="translated">これは、このターゲットアドレスが通知を承認しなかったことをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="083ac1279739f945b13a461e8bb4339d8dfde4a8" translate="yes" xml:space="preserve">
          <source>This informs the user which target addresses the notification was sent to.</source>
          <target state="translated">これは、通知が送信されたターゲットアドレスをユーザーに通知します。</target>
        </trans-unit>
        <trans-unit id="d7e452d2d7924302fbdea18276d798ae79408dc5" translate="yes" xml:space="preserve">
          <source>This instruction is not related to upgrades of ERTS or any of the core applications. It can be used by any application to force a restart of the emulator after all upgrade instructions are executed.</source>
          <target state="translated">この命令は ERTS やコアアプリケーションのアップグレードには関係ありません。これは、すべてのアップグレード命令が実行された後にエミュレータを強制的に再起動するために、任意のアプリケーションで使用することができます。</target>
        </trans-unit>
        <trans-unit id="b27e8eb36b131c032f8c3fba207f37d792a31d2a" translate="yes" xml:space="preserve">
          <source>This instruction is similar to &lt;code&gt;restart_new_emulator&lt;/code&gt;, except it must be placed at the end of the &lt;code&gt;relup&lt;/code&gt; file. It is not related to an upgrade of the emulator or the core applications, but can be used by any application when a complete reboot of the system is required.</source>
          <target state="translated">この命令は、 &lt;code&gt;relup&lt;/code&gt; ファイルの最後に配置する必要があることを除いて、 &lt;code&gt;restart_new_emulator&lt;/code&gt; と似ています。エミュレータやコアアプリケーションのアップグレードとは関係ありませんが、システムの完全な再起動が必要な場合は、どのアプリケーションでも使用できます。</target>
        </trans-unit>
        <trans-unit id="4e2ff5aadab857bef7cc042cfddbfd7f94365d61" translate="yes" xml:space="preserve">
          <source>This instruction is used when changing to a new emulator version, or when any of the core applications Kernel, STDLIB, or SASL is upgraded. If a system reboot is needed for another reason, the &lt;code&gt;restart_emulator&lt;/code&gt; instruction is to be used instead.</source>
          <target state="translated">この命令は、新しいエミュレータバージョンに変更するとき、またはコアアプリケーションのカーネル、STDLIB、またはSASLのいずれかがアップグレードされるときに使用されます。別の理由でシステムの再起動が必要な場合は、代わりに &lt;code&gt;restart_emulator&lt;/code&gt; 命令を使用します。</target>
        </trans-unit>
        <trans-unit id="538ffcc030d6ff15bd0bfff773ddaca2d61087a9" translate="yes" xml:space="preserve">
          <source>This instruction is used when the application ERTS, Kernel, STDLIB, or SASL is upgraded. It shuts down the current emulator and starts a new one. All processes are terminated gracefully, and the new version of ERTS, Kernel, STDLIB, and SASL are used when the emulator restarts. Only one &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction is allowed in the &lt;code&gt;relup&lt;/code&gt; file, and it must be placed first. &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt; ensures this when the &lt;code&gt;relup&lt;/code&gt; file is generated. The rest of the instructions in the &lt;code&gt;relup&lt;/code&gt; file is executed after the restart as a part of the boot script.</source>
          <target state="translated">この命令は、アプリケーションERTS、カーネル、STDLIB、またはSASLがアップグレードされるときに使用されます。現在のエミュレータをシャットダウンし、新しいエミュレータを起動します。すべてのプロセスは正常に終了し、エミュレーターの再起動時にERTS、カーネル、STDLIB、およびSASLの新しいバージョンが使用されます。 &lt;code&gt;relup&lt;/code&gt; ファイルでは1つの &lt;code&gt;restart_new_emulator&lt;/code&gt; 命令のみが許可されており、それを最初に配置する必要があります。 &lt;code&gt;&lt;a href=&quot;systools#make_relup-3&quot;&gt;systools:make_relup/3,4&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;relup&lt;/code&gt; ファイルが生成されるときにこれを保証します。 &lt;code&gt;relup&lt;/code&gt; ファイルの残りの命令は、再起動後にブートスクリプトの一部として実行されます。</target>
        </trans-unit>
        <trans-unit id="395215bf28142de440c81ef55b87f4169a80aec6" translate="yes" xml:space="preserve">
          <source>This instruction is written in the configuration file in the following format:</source>
          <target state="translated">この命令は、以下の形式で設定ファイルに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="45862ec3de83aecdeb3f0430fc20ad3e86777590" translate="yes" xml:space="preserve">
          <source>This instruction requires that the system is started with heartbeat monitoring, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS and the &lt;code&gt;heart(3)&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">この命令では、システムがハートビート監視で起動されている必要があります。ERTSの &lt;code&gt;erl(1)&lt;/code&gt; マニュアルページとカーネルの &lt;code&gt;heart(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="eb9abbefd34b9022f0d676607ac6737850a70742" translate="yes" xml:space="preserve">
          <source>This instruction synchronizes the release installation with other nodes. Each &lt;code&gt;Node&lt;/code&gt; must evaluate this command with the same &lt;code&gt;Id&lt;/code&gt;. The local node waits for all other nodes to evaluate the instruction before execution continues. If a node goes down, it is considered to be an unrecoverable error, and the local node is restarted from the old release. There is no time-out for this instruction, which means that it can hang forever.</source>
          <target state="translated">この命令は、リリースのインストールを他のノードと同期します。各 &lt;code&gt;Node&lt;/code&gt; はこのコマンドを同じ &lt;code&gt;Id&lt;/code&gt; で評価する必要があります。ローカルノードは、実行が続行される前に、他のすべてのノードが命令を評価するのを待ちます。ノードがダウンした場合、それは回復不能なエラーと見なされ、ローカルノードは古いリリースから再起動されます。この命令にはタイムアウトがありません。つまり、永久にハングアップする可能性があります。</target>
        </trans-unit>
        <trans-unit id="72381508b412cca34ddf14083712fc31b9f93e31" translate="yes" xml:space="preserve">
          <source>This interface (or at least the name of the functions) is kept for backward compatibility. Using &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;{driver_options,[kill_ports]}&lt;/code&gt; in the option list gives the same effect regarding the port killing.</source>
          <target state="translated">このインターフェース（または少なくとも関数名）は、下位互換性のために保持されています。オプションリストの &lt;code&gt;{driver_options,[kill_ports]}&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; を使用すると、ポートの強制終了に関して同じ効果が得られます。</target>
        </trans-unit>
        <trans-unit id="986a779296a267e9889a055a42330bfd68321abf" translate="yes" xml:space="preserve">
          <source>This internal event is used by the &lt;code&gt;Common Test&lt;/code&gt; Master process to synchronize particular file operations.</source>
          <target state="translated">この内部イベントは、 &lt;code&gt;Common Test&lt;/code&gt; Masterプロセスが特定のファイル操作を同期するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c34c80ee3e756933a25868fd55ba9046da3c1c47" translate="yes" xml:space="preserve">
          <source>This internal event says that &lt;code&gt;Common Test&lt;/code&gt; is finished compiling modules in directory &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">この内部イベントは、 &lt;code&gt;Common Test&lt;/code&gt; がディレクトリ &lt;code&gt;Dir&lt;/code&gt; 内のモジュールのコンパイルを完了したことを示しています。</target>
        </trans-unit>
        <trans-unit id="19fd863c53f0cce4ca256baeac321a61b8c0e924" translate="yes" xml:space="preserve">
          <source>This internal event says that &lt;code&gt;Common Test&lt;/code&gt; starts compiling modules in directory &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">この内部イベントは、 &lt;code&gt;Common Test&lt;/code&gt; がディレクトリ &lt;code&gt;Dir&lt;/code&gt; でモジュールのコンパイルを開始することを示しています。</target>
        </trans-unit>
        <trans-unit id="918379111cbe178fe4429e0dda42e1bb45186e43" translate="yes" xml:space="preserve">
          <source>This internal name cannot be changed, it is fixed even if the service is renamed. &lt;code&gt;erlsrv&lt;/code&gt; generates a unique internal name when a service is created. It is recommended to keep to the default if release handling is to be used for the application.</source>
          <target state="translated">この内部名は変更できません。サービスの名前を変更しても修正されます。 &lt;code&gt;erlsrv&lt;/code&gt; は、サービスの作成時に固有の内部名を生成します。アプリケーションでリリース処理を使用する場合は、デフォルトのままにすることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="1c853aa37495f77100d3057f3fa259e2e5e59b2e" translate="yes" xml:space="preserve">
          <source>This is 86 % of the total run time, and as we saw before it is the close operation the absolutely biggest contributor. We find a comparison ratio a little bit up in the call stack:</source>
          <target state="translated">これは全体の実行時間の86%を占めていますが、前に見たように、クローズ操作が絶対的に大きな貢献をしています。呼び出しスタックの少し上に比較比率があります。</target>
        </trans-unit>
        <trans-unit id="4e69295f5174adc14ac6944e7fdc5af01c54eae9" translate="yes" xml:space="preserve">
          <source>This is a 4-component structure called &lt;code&gt;Pdu&lt;/code&gt;. By default, a &lt;code&gt;SEQUENCE&lt;/code&gt; is represented by a record in Erlang. It can also be represented as a map; see &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt; Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt;. For each &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; in an ASN.1 module an Erlang record declaration is generated. For &lt;code&gt;Pdu&lt;/code&gt;, a record like the following is defined:</source>
          <target state="translated">これは、 &lt;code&gt;Pdu&lt;/code&gt; と呼ばれる4コンポーネント構造です。デフォルトでは、 &lt;code&gt;SEQUENCE&lt;/code&gt; はErlangのレコードで表されます。マップとして表すこともできます。 &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt; Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt; 参照してください。ASN.1モジュールの &lt;code&gt;SEQUENCE&lt;/code&gt; と &lt;code&gt;SET&lt;/code&gt; ごとに、Erlangレコード宣言が生成されます。以下のために &lt;code&gt;Pdu&lt;/code&gt; 、次のようなレコードが定義されています。</target>
        </trans-unit>
        <trans-unit id="e9ef9e4644f03eaf56584c4a5bfb4c37698548ad" translate="yes" xml:space="preserve">
          <source>This is a 4-component structure called &lt;code&gt;Pdu&lt;/code&gt;. By default, a &lt;code&gt;SEQUENCE&lt;/code&gt; is represented by a record in Erlang. It can also be represented as a map; see &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt;Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt;. For each &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; in an ASN.1 module an Erlang record declaration is generated. For &lt;code&gt;Pdu&lt;/code&gt;, a record like the following is defined:</source>
          <target state="translated">これは &lt;code&gt;Pdu&lt;/code&gt; と呼ばれる4つのコンポーネントの構造です。デフォルトでは、 &lt;code&gt;SEQUENCE&lt;/code&gt; はErlangのレコードで表されます。マップとして表すこともできます。 &lt;code&gt;&lt;a href=&quot;asn1_getting_started#MAP_SEQ_SET&quot;&gt;Map representation for SEQUENCE and SET&lt;/a&gt;&lt;/code&gt; 参照してください。ASN.1モジュールの &lt;code&gt;SEQUENCE&lt;/code&gt; および &lt;code&gt;SET&lt;/code&gt; ごとに、Erlangレコード宣言が生成されます。以下のために &lt;code&gt;Pdu&lt;/code&gt; 、次のようなレコードが定義されています。</target>
        </trans-unit>
        <trans-unit id="0b39193a0d84108c992a285788d5dba07f9d62b4" translate="yes" xml:space="preserve">
          <source>This is a 58 bit version of Xoroshiro1024**, from the 2018 paper by David Blackman and Sebastiano Vigna: &lt;code&gt;&lt;a href=&quot;http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf&quot;&gt; Scrambled Linear Pseudorandom Number Generators &lt;/a&gt;&lt;/code&gt; that on a 64 bit Erlang system executes only about 40% slower than the default &lt;code&gt;exsss&lt;/code&gt; algorithm but with much longer period and better statistical properties, and on the flip side a larger state.</source>
          <target state="translated">これはXoroshiro1024 **の58ビットバージョンであり、DavidBlackmanとSebastianoVignaによる2018年の論文からのものです：64ビットErlangシステムで実行される &lt;code&gt;&lt;a href=&quot;http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf&quot;&gt; Scrambled Linear Pseudorandom Number Generators &lt;/a&gt;&lt;/code&gt; は、デフォルトの &lt;code&gt;exsss&lt;/code&gt; アルゴリズムよりも約40％遅くなりますが、はるかに長い期間ですそしてより良い統計的性質、そして反対側ではより大きな状態。</target>
        </trans-unit>
        <trans-unit id="d9073fcd29e4e73c44d40722439de79f01a5b836" translate="yes" xml:space="preserve">
          <source>This is a &lt;code&gt;&lt;a href=&quot;time_correction#Monotonically_Increasing&quot;&gt; monotonically increasing&lt;/a&gt;&lt;/code&gt; time, but &lt;strong&gt;not&lt;/strong&gt; a &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt; strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; time. That is, consecutive calls to &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; can produce the same result.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;time_correction#Monotonically_Increasing&quot;&gt; monotonically increasing&lt;/a&gt;&lt;/code&gt; 時間ですが、 &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt; strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; 時間で&lt;strong&gt;はありません&lt;/strong&gt;。つまり、 &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; を連続して呼び出すと、同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="fccf5d389b6bb13934731f8a21547b98c0616cd1" translate="yes" xml:space="preserve">
          <source>This is a &lt;code&gt;&lt;a href=&quot;time_correction#Monotonically_Increasing&quot;&gt;monotonically increasing&lt;/a&gt;&lt;/code&gt; time, but &lt;strong&gt;not&lt;/strong&gt; a &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; time. That is, consecutive calls to &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; can produce the same result.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;time_correction#Monotonically_Increasing&quot;&gt;monotonically increasing&lt;/a&gt;&lt;/code&gt; 時間ですが、 &lt;code&gt;&lt;a href=&quot;time_correction#Strictly_Monotonically_Increasing&quot;&gt;strictly monotonically increasing&lt;/a&gt;&lt;/code&gt; 時間で&lt;strong&gt;はありません&lt;/strong&gt;。つまり、 &lt;code&gt;erlang:monotonic_time/0&lt;/code&gt; を連続して呼び出しても同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="3e773a13c08b29bd1b0b27e610e6a3ca5907aef0" translate="yes" xml:space="preserve">
          <source>This is a callback function intended to be invoked by some transport modules when get an incoming message. Which transport that actually is used is up to the user to choose.</source>
          <target state="translated">これは、着信メッセージを取得したときに、いくつかのトランスポートモジュールによって 呼び出されることを意図したコールバック関数である。実際にどのトランスポートを使うかはユーザの選択次第です。</target>
        </trans-unit>
        <trans-unit id="6aaabdad85afb5297ef14e644ed60c642bdf1f64" translate="yes" xml:space="preserve">
          <source>This is a change from signed to unsigned. This can cause problems for, for example, loop termination conditions and error conditions if you only change the types all over the place.</source>
          <target state="translated">符号付きから符号なしへの変更です。これは、型だけを一律に変更すると、例えばループの終了条件やエラー条件などで問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="3196a6c5d44daf25b6d6681360eca21c5be5b270" translate="yes" xml:space="preserve">
          <source>This is a common error in test suites. It is assumed that the current directory is the same as the author used as current directory when the test case was developed. Many test cases even try to write scratch files to this directory. Instead &lt;code&gt;data_dir&lt;/code&gt; and &lt;code&gt;priv_dir&lt;/code&gt; are to be used to locate data and for writing scratch files.</source>
          <target state="translated">これは、テストスイートでよくあるエラーです。現在のディレクトリは、テストケースの開発時に現在のディレクトリとして使用された作成者と同じであると想定されています。多くのテストケースでは、このディレクトリにスクラッチファイルを書き込もうとします。代わりに、 &lt;code&gt;data_dir&lt;/code&gt; および &lt;code&gt;priv_dir&lt;/code&gt; を使用して、データを見つけ、スクラッチファイルを書き込みます。</target>
        </trans-unit>
        <trans-unit id="360f48fae93411aaa84a534df910e9385d6dd358" translate="yes" xml:space="preserve">
          <source>This is a corrected version of the previous default algorithm, that now has been superseded by Xoroshiro116+ (&lt;code&gt;exrop&lt;/code&gt;). Since there is no native 58 bit rotate instruction this algorithm executes a little (say &amp;lt; 15%) faster than &lt;code&gt;exrop&lt;/code&gt;. See the &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt;algorithms' homepage&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは以前のデフォルトアルゴリズムの修正バージョンであり、現在Xoroshiro116 +（ &lt;code&gt;exrop&lt;/code&gt; ）に置き換えられています。ネイティブの58ビット回転命令がないため、このアルゴリズムは &lt;code&gt;exrop&lt;/code&gt; よりも少し（たとえば、15％未満）速く実行されます。 &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt;algorithms' homepage&lt;/a&gt;&lt;/code&gt; ご覧ください。</target>
        </trans-unit>
        <trans-unit id="ab7aa23baa63f4887daf2bf3feb0b72e5a926fef" translate="yes" xml:space="preserve">
          <source>This is a dangerous feature that must be used with care. By unintentional mixing of directories, you can easily end up with an inconsistent database, if the same backup is installed on more than one directory.</source>
          <target state="translated">これは、注意して使用しなければならない危険な機能です。同じバックアップが複数のディレクトリにインストールされている場合、意図せずにディレクトリが混ざってしまうことで、不整合なデータベースになってしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="d05cf3f16d8e8cf9241491563959ff3c97154893" translate="yes" xml:space="preserve">
          <source>This is a definition of an external generic BEAM instruction. Most importantly it specifices that the opcode is 64. It also defines that it has two operands. The BEAM assembler will use the opcode when creating &lt;code&gt;.beam&lt;/code&gt; files. The compiler does not really need the arity, but it will use it as an internal sanity check when assembling the BEAM code.</source>
          <target state="translated">これは、外部の汎用BEAM命令の定義です。最も重要なことは、オペコードが64であることを明記していることです。また、2つのオペランドがあることも定義しています。BEAMアセンブラは、 &lt;code&gt;.beam&lt;/code&gt; ファイルを作成するときにオペコードを使用します。コンパイラは実際にはアリティを必要としませんが、BEAMコードをアセンブルするときに内部の健全性チェックとして使用します。</target>
        </trans-unit>
        <trans-unit id="00205e610ec0a95f3eebcf63dbbba8372b336cc5" translate="yes" xml:space="preserve">
          <source>This is a handler for Logger that offers circular (wrapped) logs by using &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt;. Multiple instances of this handler can be added to Logger, and each instance prints to its own disk log file, created with the name and settings specified in the handler configuration.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; を使用して循環（ラップ）ログを提供するLoggerのハンドラーです。このハンドラーの複数のインスタンスをロガーに追加できます。各インスタンスは、ハンドラー構成で指定された名前と設定で作成された独自のディスクログファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="f1702c7d8fabc70bf82459bbec9093c02074634c" translate="yes" xml:space="preserve">
          <source>This is a large reference document. For casual use of this module, and for most real world applications, the descriptions of functions &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#unload-1&quot;&gt;unload/1&lt;/a&gt;&lt;/code&gt; are enough to getting started.</source>
          <target state="translated">これは大きな参照ドキュメントです。このモジュールをカジュアルに使用する場合、およびほとんどの実際のアプリケーションでは、関数 &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#unload-1&quot;&gt;unload/1&lt;/a&gt;&lt;/code&gt; の説明で開始できます。</target>
        </trans-unit>
        <trans-unit id="9ae3bc7ed27ccefa917b875115824ef1a0ed8195" translate="yes" xml:space="preserve">
          <source>This is a legacy clause mostly for &lt;code&gt;Destination = {local, Binary}&lt;/code&gt; where &lt;code&gt;PortZero&lt;/code&gt; is superfluous. It is equivalent to &lt;code&gt;&lt;a href=&quot;#send-4-AncData&quot;&gt;send(Socket, Destination, [], Packet)&lt;/a&gt;&lt;/code&gt;, the clause right above here.</source>
          <target state="translated">これは、大部分のための従来の句である &lt;code&gt;Destination = {local, Binary}&lt;/code&gt; &lt;code&gt;PortZero&lt;/code&gt; が不必要です。これは、ここのすぐ &lt;code&gt;&lt;a href=&quot;#send-4-AncData&quot;&gt;send(Socket, Destination, [], Packet)&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="92aeefe62fe3eb6482bb9d89ca3cfa9570836ae6" translate="yes" xml:space="preserve">
          <source>This is a more developed variant of the older &lt;code&gt;&lt;a href=&quot;#type-run_time_error&quot;&gt;run_time_error()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは、古い &lt;code&gt;&lt;a href=&quot;#type-run_time_error&quot;&gt;run_time_error()&lt;/a&gt;&lt;/code&gt; のより開発されたバリアントです。</target>
        </trans-unit>
        <trans-unit id="bfe64ae08d8239e916a24e614514fb557dd71251" translate="yes" xml:space="preserve">
          <source>This is a normal Erlang/OTP application descriptor, as found in an &lt;code&gt;.app&lt;/code&gt; file. The resulting test set consists of the modules listed in the &lt;code&gt;modules&lt;/code&gt; entry in &lt;code&gt;Info&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;.app&lt;/code&gt; ファイルにある通常のErlang / OTPアプリケーション記述子です。結果のテストセットは、 &lt;code&gt;Info&lt;/code&gt; の &lt;code&gt;modules&lt;/code&gt; エントリにリストされているモジュールで構成されます。</target>
        </trans-unit>
        <trans-unit id="cc0886c68b7d31b43eac50f2f501f0e29c21db91" translate="yes" xml:space="preserve">
          <source>This is a normal, healthy, return value if the call was just placed to inform the emulator that you have no further use of the driver. It is the most common return value in the most common &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenario&lt;/a&gt;&lt;/code&gt; described in the introduction.</source>
          <target state="translated">ドライバーをこれ以上使用しないことをエミュレーターに通知するために呼び出しが行われた場合、これは通常の正常な戻り値です。 &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;scenario&lt;/a&gt;&lt;/code&gt; 説明されている最も一般的なシナリオで最も一般的な戻り値です。</target>
        </trans-unit>
        <trans-unit id="a74b91a12c8bd155dd6272fb26f51914a5b6669f" translate="yes" xml:space="preserve">
          <source>This is a re-entrant call to try and scan one token from &lt;code&gt;Chars&lt;/code&gt;. If there are enough characters in &lt;code&gt;Chars&lt;/code&gt; to either scan a token or detect an error then this will be returned with &lt;code&gt;{done,...}&lt;/code&gt;. Otherwise &lt;code&gt;{cont,Cont}&lt;/code&gt; will be returned where &lt;code&gt;Cont&lt;/code&gt; is used in the next call to &lt;code&gt;token()&lt;/code&gt; with more characters to try an scan the token. This is continued until a token has been scanned. &lt;code&gt;Cont&lt;/code&gt; is initially &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;Chars&lt;/code&gt; から1つのトークンをスキャンするための再入可能な呼び出しです。 &lt;code&gt;Chars&lt;/code&gt; にトークンをスキャンするかエラーを検出するのに十分な文字がある場合、これは &lt;code&gt;{done,...}&lt;/code&gt; で返されます。そうでなければ &lt;code&gt;{cont,Cont}&lt;/code&gt; ここで返される &lt;code&gt;Cont&lt;/code&gt; 次の呼び出しで使用される &lt;code&gt;token()&lt;/code&gt; トークンをスキャンしようとするとそれ以上の文字。これは、トークンがスキャンされるまで続けられます。 &lt;code&gt;Cont&lt;/code&gt; は最初は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dd5f47604323fa85263c477df2f49651a6e3df8c" translate="yes" xml:space="preserve">
          <source>This is a re-entrant call to try and scan tokens from &lt;code&gt;Chars&lt;/code&gt;. If there are enough characters in &lt;code&gt;Chars&lt;/code&gt; to either scan tokens or detect an error then this will be returned with &lt;code&gt;{done,...}&lt;/code&gt;. Otherwise &lt;code&gt;{cont,Cont}&lt;/code&gt; will be returned where &lt;code&gt;Cont&lt;/code&gt; is used in the next call to &lt;code&gt;tokens()&lt;/code&gt; with more characters to try an scan the tokens. This is continued until all tokens have been scanned. &lt;code&gt;Cont&lt;/code&gt; is initially &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;Chars&lt;/code&gt; からトークンを試行してスキャンするための再入可能な呼び出しです。 &lt;code&gt;Chars&lt;/code&gt; にトークンをスキャンするかエラーを検出するのに十分な文字がある場合、これは &lt;code&gt;{done,...}&lt;/code&gt; で返されます。そうでない場合、 &lt;code&gt;{cont,Cont}&lt;/code&gt; が返されます &lt;code&gt;Cont&lt;/code&gt; は、 &lt;code&gt;tokens()&lt;/code&gt; への次の呼び出しで使用され、トークンのスキャンを試行するためにより多くの文字が含まれます。これは、すべてのトークンがスキャンされるまで続けられます。 &lt;code&gt;Cont&lt;/code&gt; は最初は &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ed7d83881b92d8f8849b160af3bcd9a10b096707" translate="yes" xml:space="preserve">
          <source>This is a short form for both &lt;code&gt;report_errors&lt;/code&gt; and &lt;code&gt;report_warnings&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;report_errors&lt;/code&gt; と &lt;code&gt;report_warnings&lt;/code&gt; の両方の短い形式です。</target>
        </trans-unit>
        <trans-unit id="274dc8f24a407d0b1cda6dac95a4fedcd1f99a11" translate="yes" xml:space="preserve">
          <source>This is a short form for both &lt;code&gt;return_errors&lt;/code&gt; and &lt;code&gt;return_warnings&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;return_errors&lt;/code&gt; と &lt;code&gt;return_warnings&lt;/code&gt; の両方の短い形式です。</target>
        </trans-unit>
        <trans-unit id="161cf6b2273cd2e876452ed9511de7c5f7ad17eb" translate="yes" xml:space="preserve">
          <source>This is a shorter and clearer form of &lt;code&gt;&lt;a href=&quot;#type-timeout_action&quot;&gt; timeout_action() &lt;/a&gt;&lt;/code&gt; with &lt;code&gt;Time = infinity&lt;/code&gt; which cancels a time-out.</source>
          <target state="translated">これが短いと明確形で &lt;code&gt;&lt;a href=&quot;#type-timeout_action&quot;&gt; timeout_action() &lt;/a&gt;&lt;/code&gt; との &lt;code&gt;Time = infinity&lt;/code&gt; のタイムアウトをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="b415593166c4a9ddd5fa9eb4f27a156aba749468" translate="yes" xml:space="preserve">
          <source>This is a simple example of starting the TFTP server and reading the content of a sample file using the TFTP client.</source>
          <target state="translated">TFTPサーバを起動し、TFTPクライアントを使用してサンプルファイルの内容を読み取る簡単な例です。</target>
        </trans-unit>
        <trans-unit id="3281f2cefa8864b51e113449543fc81b263cbe51" translate="yes" xml:space="preserve">
          <source>This is a simplified sequence describing what &lt;code&gt;trace_pattern&lt;/code&gt; goes through when adding a new breakpoint.</source>
          <target state="translated">これは、新しいブレークポイントを追加するときに &lt;code&gt;trace_pattern&lt;/code&gt; が通過する内容を説明する簡略化されたシーケンスです。</target>
        </trans-unit>
        <trans-unit id="808da979a84710e3348d8f0999feea04935b391f" translate="yes" xml:space="preserve">
          <source>This is a slight modification of the ping pong program where both processes are spawned from the same &lt;code&gt;start/1&lt;/code&gt; function, and the &quot;ping&quot; process can be spawned on a separate node. Notice the use of the &lt;code&gt;link&lt;/code&gt; BIF. &quot;Ping&quot; calls &lt;code&gt;exit(ping)&lt;/code&gt; when it finishes and this causes an exit signal to be sent to &quot;pong&quot;, which also terminates.</source>
          <target state="translated">これは、両方のプロセスが同じ &lt;code&gt;start/1&lt;/code&gt; 関数から生成されるping pongプログラムのわずかな変更であり、「ping」プロセスは別のノードで生成できます。 &lt;code&gt;link&lt;/code&gt; BIFの使用に注意してください。「Ping」は &lt;code&gt;exit(ping)&lt;/code&gt; 時にexit（ping）を呼び出し、これにより終了信号が「pong」に送信され、「pong」も終了します。</target>
        </trans-unit>
        <trans-unit id="73a9a1cddaa9852a0011d5e8ce12699ed0d05497" translate="yes" xml:space="preserve">
          <source>This is a so-called Erlang I/O ErrorInfo structure; see the &lt;code&gt;io(3)&lt;/code&gt; module for details.</source>
          <target state="translated">これはいわゆるErlang I / O ErrorInfo構造です。詳細については、 &lt;code&gt;io(3)&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="e343f368517e25b67cf5e58932e33d7c4ed349a4" translate="yes" xml:space="preserve">
          <source>This is a standard macro (that is, defined by the system, not by the user). &lt;code&gt;?MODULE&lt;/code&gt; is always replaced by the name of the current module (that is, the &lt;code&gt;-module&lt;/code&gt; definition near the start of the file). There are more advanced ways of using macros with, for example, parameters (*manual*).</source>
          <target state="translated">これは標準のマクロです（つまり、ユーザーではなくシステムによって定義されます）。 &lt;code&gt;?MODULE&lt;/code&gt; は常に現在のモジュールの名前（つまり、ファイルの先頭近くの &lt;code&gt;-module&lt;/code&gt; 定義）に置き換えられます。たとえば、パラメーター（* manual *）でマクロを使用するより高度な方法があります。</target>
        </trans-unit>
        <trans-unit id="69b7150a1e2635ac10627a958161be921d3a386e" translate="yes" xml:space="preserve">
          <source>This is a statistics event with current count of successful, skipped, and failed test cases so far. This event is sent after the end of each test case, immediately following event &lt;code&gt;tc_done&lt;/code&gt;.</source>
          <target state="translated">これは、これまでの成功、スキップ、および失敗したテストケースの現在の数を含む統計イベントです。このイベントは、各テストケースの終了後、イベント &lt;code&gt;tc_done&lt;/code&gt; の直後に送信されます。</target>
        </trans-unit>
        <trans-unit id="d357df916eaf2872bc4e68740c1b378e80709c63" translate="yes" xml:space="preserve">
          <source>This is a stronger method where the ssh protocol brings the user name, the user's public key and some cryptographic information which we could ignore here.</source>
          <target state="translated">これはより強力な方法で、ssh プロトコルはユーザ名、ユーザの公開鍵、そしてここでは無視できる暗号情報を持ってきます。</target>
        </trans-unit>
        <trans-unit id="398909e587f906e89bc126a8eb8fdfd6b8204296" translate="yes" xml:space="preserve">
          <source>This is a useful debugging and test tool, especially when writing complicated &lt;code&gt;select/2&lt;/code&gt; calls.</source>
          <target state="translated">これは、特に複雑な &lt;code&gt;select/2&lt;/code&gt; 呼び出しを記述する場合に便利なデバッグおよびテストツールです。</target>
        </trans-unit>
        <trans-unit id="ef77778e97bbcd3de76e5cb922449c0969559f39" translate="yes" xml:space="preserve">
          <source>This is a useful debugging and test tool, especially when writing complicated match specifications.</source>
          <target state="translated">特に複雑なマッチ仕様を書くときに便利なデバッグ・テストツールです。</target>
        </trans-unit>
        <trans-unit id="cc0b0332cdc379fcfaab7b7f81af77dfd65580d0" translate="yes" xml:space="preserve">
          <source>This is a useful way to test a generated boot script locally.</source>
          <target state="translated">これは、生成されたブートスクリプトをローカルでテストするのに便利な方法です。</target>
        </trans-unit>
        <trans-unit id="978194809925fd52d8e900a08a5d143726fc77cb" translate="yes" xml:space="preserve">
          <source>This is a utility function meant to be used in the shell for printing the allowed characters in each major URI component, and also in the most important characters sets. Please note that this function does not replace the ABNF rules defined by the standards, these character sets are derived directly from those aformentioned rules. For more information see the &lt;code&gt;&lt;a href=&quot;uri_string_usage#percent_encoding&quot;&gt;Uniform Resource Identifiers&lt;/a&gt;&lt;/code&gt; chapter in stdlib's Users Guide.</source>
          <target state="translated">これは、各主要URIコンポーネント、および最も重要な文字セットで許可された文字を印刷するためにシェルで使用されることを意図したユーティリティ関数です。この関数は、標準で定義されているABNFルールを置き換えるものではないことに注意してください。これらの文字セットは、前述のルールから直接派生しています。詳細については、ご覧 &lt;code&gt;&lt;a href=&quot;uri_string_usage#percent_encoding&quot;&gt;Uniform Resource Identifiers&lt;/a&gt;&lt;/code&gt; STDLIBのユーザーガイドの章を。</target>
        </trans-unit>
        <trans-unit id="8c1d072ab39ba63d2cf9e54937425fb41a6e24e0" translate="yes" xml:space="preserve">
          <source>This is a utility function used to inspect, for instance, memory usage, in a simple way.</source>
          <target state="translated">これは、例えばメモリ使用量などを簡単な方法で検査するために使用されるユーティリティ関数です。</target>
        </trans-unit>
        <trans-unit id="1e82946d829123c6910c06194e9e7cebf010cb22" translate="yes" xml:space="preserve">
          <source>This is a utility function, that can be useful when e.g. debugging instrumentation functions.</source>
          <target state="translated">これはユーティリティ関数で、インストルメンテーション関数のデバッグなどに便利です。</target>
        </trans-unit>
        <trans-unit id="638f44b006e9ddc55b07c2ecf8dd004cd4e662bc" translate="yes" xml:space="preserve">
          <source>This is a utility function; see &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par/2&lt;/a&gt;&lt;/code&gt; for further details.</source>
          <target state="translated">これはユーティリティ関数です。詳細については、 &lt;code&gt;&lt;a href=&quot;#par-2&quot;&gt;par/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a4ecf4af35ccbc508f0f2a3b4017f2147f96a8d" translate="yes" xml:space="preserve">
          <source>This is accomplished as follows:</source>
          <target state="translated">これは、以下のようにして達成される。</target>
        </trans-unit>
        <trans-unit id="c701533d2b77a06763413555d9faee562dbae932" translate="yes" xml:space="preserve">
          <source>This is accomplished by dispatching the work to another thread managed by the NIF library, return from the NIF, and wait for the result. The thread can send the result back to the Erlang process using &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt; enif_send&lt;/a&gt;&lt;/code&gt;. Information about thread primitives is provided below.</source>
          <target state="translated">これは、NIFライブラリによって管理されている別のスレッドに作業をディスパッチし、NIFから戻って、結果を待つことによって実現されます。スレッドは、 &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt; enif_send&lt;/a&gt;&lt;/code&gt; を使用して結果をErlangプロセスに送り返すことができます。スレッドプリミティブに関する情報を以下に示します。</target>
        </trans-unit>
        <trans-unit id="1661232769f6d1b51ba5b2ab390488adc40b1764" translate="yes" xml:space="preserve">
          <source>This is accomplished by dispatching the work to another thread managed by the NIF library, return from the NIF, and wait for the result. The thread can send the result back to the Erlang process using &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt;. Information about thread primitives is provided below.</source>
          <target state="translated">これは、NIFライブラリによって管理されている別のスレッドに作業をディスパッチし、NIFから戻り、結果を待つことによって実現されます。スレッドは &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; を使用して結果をErlangプロセスに送り返すことができます。スレッドプリミティブに関する情報を以下に示します。</target>
        </trans-unit>
        <trans-unit id="a3a5884eaf41dfb2c20bb095d899f4bb1aee0421" translate="yes" xml:space="preserve">
          <source>This is all that has to be done! Now the manager can read, add, and modify rows. Also, you can use the ordinary Mnesia API to access the table from your programs. The only explicit action is to create the Mnesia table, an action the user has to perform in order to create the required table schemas.</source>
          <target state="translated">これだけでいいのです! これで管理者は行の読み込み、追加、修正ができるようになりました。また、通常のMnesia APIを使用して、プログラムからテーブルにアクセスすることもできます。唯一の明示的なアクションはMnesiaテーブルを作成することであり、必要なテーブルスキーマを作成するためにユーザーが実行しなければならないアクションです。</target>
        </trans-unit>
        <trans-unit id="2b23a1bbf224deed4021f7affe8851472e761554" translate="yes" xml:space="preserve">
          <source>This is allowed in ASN.1 and the ASN.1-to-Erlang compiler supports this recursive type. A value for this type is assigned in Erlang as follows:</source>
          <target state="translated">これはASN.1で許可されており、ASN.1-to-Erlangコンパイラはこの再帰型をサポートしています。Erlangではこの型の値は以下のように割り当てられています。</target>
        </trans-unit>
        <trans-unit id="b9c60488fe7be932bfbb686280514f6095ca5c3b" translate="yes" xml:space="preserve">
          <source>This is also handled automatically by the megaco application. First of all, segmentation is only attempted if so configured, see the &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_send&lt;/a&gt;&lt;/code&gt; option. Secondly, megaco relies on the ability of the used codec to encode action replies, which is the smallest component the megaco application handles when segmenting. Thirdly, the reply will be segmented only if the sum of the size of the action replies (plus an arbitrary message header size) are greater then the specified max message size (see the &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;max_pdu_size&lt;/a&gt;&lt;/code&gt; option). Finally, if segmentation is decided, then each action reply will make up its own (segment) message.</source>
          <target state="translated">これもmegacoアプリケーションによって自動的に処理されます。まず、セグメンテーションは、そのように構成されている場合にのみ試行されます &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_send&lt;/a&gt;&lt;/code&gt; オプションを参照してください。2番目に、megacoは、アクション応答をエンコードするために使用されるコーデックの機能に依存しています。これは、megacoアプリケーションがセグメント化するときに処理する最小のコンポーネントです。3 &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;max_pdu_size&lt;/a&gt;&lt;/code&gt; に、アクションの応答のサイズ（および任意のメッセージヘッダーサイズ）の合計が、指定された最大メッセージサイズ（max_pdu_sizeオプションを参照）より大きい場合にのみ、応答がセグメント化されます。最後に、セグメンテーションが決定された場合、各アクション応答は独自の（セグメント）メッセージを構成します。</target>
        </trans-unit>
        <trans-unit id="c22b40b578529e2c84690ed6b337febcebea2978" translate="yes" xml:space="preserve">
          <source>This is also the case for functions &lt;code&gt;red/2&lt;/code&gt;, &lt;code&gt;blue/2&lt;/code&gt;, and &lt;code&gt;green/2&lt;/code&gt;.</source>
          <target state="translated">これは、関数 &lt;code&gt;red/2&lt;/code&gt; 、 &lt;code&gt;blue/2&lt;/code&gt; 、および &lt;code&gt;green/2&lt;/code&gt; の場合にも当てはまります。</target>
        </trans-unit>
        <trans-unit id="66cae3829517c0c1511c6c613a5e64f898384f8a" translate="yes" xml:space="preserve">
          <source>This is an abstract representation of syntax tree node attributes; see the function &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは構文ツリーノード属性の抽象的な表現です。関数 &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f87e2d574185c8fa053abdd8e9a5dea9632b99eb" translate="yes" xml:space="preserve">
          <source>This is an enhanced subset of the operations provided by the &lt;code&gt;&lt;a href=&quot;rpc&quot;&gt;rpc&lt;/a&gt;&lt;/code&gt; module. Enhanced in the sense that it makes it possible to distinguish between returned value, raised exceptions, and other errors. &lt;code&gt;erpc&lt;/code&gt; also has better performance and scalability than the original &lt;code&gt;rpc&lt;/code&gt; implementation. However, current &lt;code&gt;rpc&lt;/code&gt; module will utilize &lt;code&gt;erpc&lt;/code&gt; in order to also provide these properties when possible.</source>
          <target state="translated">これは、 &lt;code&gt;&lt;a href=&quot;rpc&quot;&gt;rpc&lt;/a&gt;&lt;/code&gt; モジュールによって提供される操作の拡張サブセットです。戻り値、発生した例外、およびその他のエラーを区別できるという意味で拡張されています。 &lt;code&gt;erpc&lt;/code&gt; は、元の &lt;code&gt;rpc&lt;/code&gt; 実装よりも優れたパフォーマンスとスケーラビリティを備えています。ただし、現在の &lt;code&gt;rpc&lt;/code&gt; モジュールは、可能な場合にこれらのプロパティも提供するために &lt;code&gt;erpc&lt;/code&gt; を利用します。</target>
        </trans-unit>
        <trans-unit id="2128cfc6cbe9e874c7e25ecf50f44f2ff9c59c9d" translate="yes" xml:space="preserve">
          <source>This is an enhancement of &lt;code&gt;&lt;a href=&quot;#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt;. It gives the possibility to:</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#catch&quot;&gt;catch&lt;/a&gt;&lt;/code&gt; 強化です。それは可能性を与えます：</target>
        </trans-unit>
        <trans-unit id="bb4355c46a241b6ccaa141fa3ca19310a4e18377" translate="yes" xml:space="preserve">
          <source>This is an example of an &quot;atomic group&quot;, details are provided below.</source>
          <target state="translated">これは「原子グループ」の一例であり、詳細は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2afe84bec16e754c046d7de19fb9588006197ad9" translate="yes" xml:space="preserve">
          <source>This is an example of writing and then reading a tar file:</source>
          <target state="translated">これは、tarファイルを書き込んでから読み込む例です。</target>
        </trans-unit>
        <trans-unit id="bf1ddb6f8bac020a202291b264051bd5948a4982" translate="yes" xml:space="preserve">
          <source>This is an extremly dangerous function. You use it on your own risk.</source>
          <target state="translated">これは極端に危険な機能です。自己責任で使用してください。</target>
        </trans-unit>
        <trans-unit id="7cdd0e3d179b7cbbf8f37996643142fe64dc77b4" translate="yes" xml:space="preserve">
          <source>This is an intentionally rough guide to the relative costs of different calls. It is based on benchmark figures run on Solaris/Sparc:</source>
          <target state="translated">これは、さまざまなコールの相対的なコストを示す、意図的に大まかな目安です。これは Solaris/Sparc で実行されたベンチマークの数値に基づいています。</target>
        </trans-unit>
        <trans-unit id="f4c4ab4d5f5e4f366b3c529f50a5c1512948dcaf" translate="yes" xml:space="preserve">
          <source>This is an interface module for the Reltool application.</source>
          <target state="translated">これはReltoolアプリケーションのインターフェースモジュールです。</target>
        </trans-unit>
        <trans-unit id="03e3358ac9f51a5518985ca7ba361683826cf828" translate="yes" xml:space="preserve">
          <source>This is an opaque data type that identifies a monitor.</source>
          <target state="translated">モニターを識別する不透明なデータ型です。</target>
        </trans-unit>
        <trans-unit id="45feb4b3d79044c88ed9b57379b548682c9417a6" translate="yes" xml:space="preserve">
          <source>This is an optimization to achieve very efficient concurrent &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#sub-3&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; operations at the expense of potential read inconsistency and memory consumption per counter.</source>
          <target state="translated">これは、読み取りの不整合の可能性とカウンターごとのメモリ消費を犠牲にして、非常に効率的な同時 &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#sub-3&quot;&gt;sub&lt;/a&gt;&lt;/code&gt; 操作を実現するための最適化です。</target>
        </trans-unit>
        <trans-unit id="26ef7d5997459d409e40c1dbe84146420ac9b4f9" translate="yes" xml:space="preserve">
          <source>This is any extra info the user wants to have supplied when the functions in the callback module is called.</source>
          <target state="translated">これは、コールバックモジュールの関数が呼び出されたときにユーザが提供したい追加情報です。</target>
        </trans-unit>
        <trans-unit id="08a7da6db995a217d09a30c00205bf365c46e13e" translate="yes" xml:space="preserve">
          <source>This is as of Erlang/OTP 17.0 the default. It forces any floats in the term to be encoded in a more space-efficient and exact way (namely in the 64-bit IEEE format, rather than converted to a textual representation). As from Erlang/OTP R11B-4, &lt;code&gt;binary_to_term/1&lt;/code&gt; can decode this representation.</source>
          <target state="translated">これはErlang / OTP 17.0以降のデフォルトです。これは、用語内のすべての浮動小数点を、よりスペース効率が高く正確な方法で（つまり、テキスト表現に変換するのではなく、64ビットIEEE形式で）強制的にエンコードします。Erlang / OTP R11B-4以降、 &lt;code&gt;binary_to_term/1&lt;/code&gt; はこの表現をデコードできます。</target>
        </trans-unit>
        <trans-unit id="113749aad29dc1cdbedc3b815e734a581ecdd057" translate="yes" xml:space="preserve">
          <source>This is bad luck, the process was garbage collecting when the crash dump was written. The rest of the information for this process is limited.</source>
          <target state="translated">これは運が悪い、クラッシュダンプが書かれたときにプロセスがガベージコレクションしていた。このプロセスの残りの情報は限られています。</target>
        </trans-unit>
        <trans-unit id="2b06c013992850341fe5a82bf55411c7f74bcdc5" translate="yes" xml:space="preserve">
          <source>This is because record definitions are only available at compile time, not at runtime. For details on records in the shell, see the &lt;code&gt;shell(3)&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">これは、レコード定義が実行時ではなくコンパイル時にのみ使用できるためです。シェルのレコードの詳細については、STDLIBの &lt;code&gt;shell(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="8afd6050f97c61cdb32e6c96ba6b457c161482c6" translate="yes" xml:space="preserve">
          <source>This is called &lt;strong&gt;synchronized code replacement&lt;/strong&gt; and for this the following instructions are used:</source>
          <target state="translated">これは&lt;strong&gt;同期コード置換&lt;/strong&gt;と呼ばれ、これには次の手順が使用されます。</target>
        </trans-unit>
        <trans-unit id="646259e147d9a776464db65bc4bea0ac6f13d14c" translate="yes" xml:space="preserve">
          <source>This is done by adding or deleting the &lt;code&gt;error_logger_file_h&lt;/code&gt; event handler, and thus indirectly adding &lt;code&gt;error_logger&lt;/code&gt; as a Logger handler.</source>
          <target state="translated">これは、 &lt;code&gt;error_logger_file_h&lt;/code&gt; イベントハンドラーを追加または削除することにより、間接的に &lt;code&gt;error_logger&lt;/code&gt; をロガーハンドラーとして追加することによって行われます。</target>
        </trans-unit>
        <trans-unit id="681acf8836c69537b79e14e48dcac39812f986dc" translate="yes" xml:space="preserve">
          <source>This is done by manipulating the Logger configuration. The function is useful as a shortcut during development and testing, but must not be used in a production system. See section &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide, and the &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; manual page for information about how to configure Logger for live systems.</source>
          <target state="translated">これは、ロガー構成を操作することによって行われます。この関数は、開発およびテスト中のショートカットとして役立ちますが、実動システムでは使用しないでください。ライブシステム用にロガーを構成する方法については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter&quot;&gt;Logging&lt;/a&gt;&lt;/code&gt; 」セクション、および &lt;code&gt;&lt;a href=&quot;logger&quot;&gt;logger(3)&lt;/a&gt;&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="180abcd23e113c6f5993e0e4b65009873a53afdd" translate="yes" xml:space="preserve">
          <source>This is done in the CTH functions called &lt;code&gt;post_&amp;lt;name of function&amp;gt;&lt;/code&gt;. These functions take the arguments &lt;code&gt;SuiteName&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt; (group or test case name, if applicable), &lt;code&gt;Config&lt;/code&gt;, &lt;code&gt;Return&lt;/code&gt;, and &lt;code&gt;CTHState&lt;/code&gt;. &lt;code&gt;Config&lt;/code&gt; in this case is the same &lt;code&gt;Config&lt;/code&gt; as the testcase is called with. &lt;code&gt;Return&lt;/code&gt; is the value returned by the testcase. If the testcase fails by crashing, &lt;code&gt;Return&lt;/code&gt; is &lt;code&gt;{'EXIT',{{Error,Reason},Stacktrace}}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;post_&amp;lt;name of function&amp;gt;&lt;/code&gt; CTH関数で行われます。これらの関数は、引数 &lt;code&gt;SuiteName&lt;/code&gt; 、 &lt;code&gt;Name&lt;/code&gt; （グループまたはテストケース名（該当する場合））、 &lt;code&gt;Config&lt;/code&gt; 、 &lt;code&gt;Return&lt;/code&gt; 、および &lt;code&gt;CTHState&lt;/code&gt; を取ります。 &lt;code&gt;Config&lt;/code&gt; このケースでは同じである &lt;code&gt;Config&lt;/code&gt; テストケースを使用して呼び出されて。 &lt;code&gt;Return&lt;/code&gt; は、テストケースによって返される値です。クラッシュによりテストケースが失敗した場合、 &lt;code&gt;Return&lt;/code&gt; は &lt;code&gt;{'EXIT',{{Error,Reason},Stacktrace}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="36ab57d9407d3cc2fec5c4c069b356365d21838b" translate="yes" xml:space="preserve">
          <source>This is done in the CTH functions called &lt;code&gt;pre_&amp;lt;name of function&amp;gt;&lt;/code&gt;. These functions take the arguments &lt;code&gt;SuiteName&lt;/code&gt;, &lt;code&gt;Name&lt;/code&gt; (group or test case name, if applicable), &lt;code&gt;Config&lt;/code&gt;, and &lt;code&gt;CTHState&lt;/code&gt;. The return value of the CTH function is always a combination of a result for the suite/group/test and an updated &lt;code&gt;CTHState&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;pre_&amp;lt;name of function&amp;gt;&lt;/code&gt; CTH関数で行われます。これらの関数は、引数 &lt;code&gt;SuiteName&lt;/code&gt; 、 &lt;code&gt;Name&lt;/code&gt; （グループまたはテストケース名（該当する場合））、 &lt;code&gt;Config&lt;/code&gt; 、および &lt;code&gt;CTHState&lt;/code&gt; を取ります。CTH関数の戻り値は常にsuite / group / testの結果と更新された &lt;code&gt;CTHState&lt;/code&gt; の組み合わせです。</target>
        </trans-unit>
        <trans-unit id="bfd349ddda4246be97d235609d023e3a44aa81a6" translate="yes" xml:space="preserve">
          <source>This is done until the end of the list is reached, that is, the list is empty:</source>
          <target state="translated">これはリストの最後に達するまで、つまりリストが空になるまで行われます。</target>
        </trans-unit>
        <trans-unit id="0e75165bd6c0c435e57a13f622ac0560e9f8aea5" translate="yes" xml:space="preserve">
          <source>This is equivalent to</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="d11de2ea50c52f849f3bde4848fccd123f17645d" translate="yes" xml:space="preserve">
          <source>This is equivalent to &lt;code&gt;set_pos(Target, get_pos(Source))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">これは &lt;code&gt;set_pos(Target, get_pos(Source))&lt;/code&gt; と同等ですが、潜在的に効率的です。</target>
        </trans-unit>
        <trans-unit id="5c2e34b39e7cb8fbbca41e01630396e57161f9bd" translate="yes" xml:space="preserve">
          <source>This is equivalent to a call to:</source>
          <target state="translated">への呼びかけに相当します。</target>
        </trans-unit>
        <trans-unit id="b89997f1aaabac9326c311cc6347ce9ddb0e3b91" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;public_key:ssh_decode(SshBin, openssh_public_key)&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;public_key:ssh_decode(SshBin, openssh_public_key)&lt;/code&gt; を呼び出すのと同じです：</target>
        </trans-unit>
        <trans-unit id="7b99c8c34be448e6bbcfec89b94bf9160fbaeb4a" translate="yes" xml:space="preserve">
          <source>This is equivalent to calling &lt;code&gt;public_key:ssh_decode(SshBin, rfc4716_public_key)&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;public_key:ssh_decode(SshBin, rfc4716_public_key)&lt;/code&gt; を呼び出すのと同じです：</target>
        </trans-unit>
        <trans-unit id="97a7c564e0e141ccb4b750a31aa63ab870cbb904" translate="yes" xml:space="preserve">
          <source>This is equivalent to the following specification:</source>
          <target state="translated">以下の仕様に相当します。</target>
        </trans-unit>
        <trans-unit id="0c4a19f41f357e975c7ecf272280bda06a0a7837" translate="yes" xml:space="preserve">
          <source>This is equivalent to:</source>
          <target state="translated">に相当します。</target>
        </trans-unit>
        <trans-unit id="4b93967cb769ce4a169bcbd657ff004f71b25464" translate="yes" xml:space="preserve">
          <source>This is expanded to:</source>
          <target state="translated">に拡大されています。</target>
        </trans-unit>
        <trans-unit id="732ce2a7a4465b34c1eb7162718b1da76d4ed1e9" translate="yes" xml:space="preserve">
          <source>This is experimental code that can be changed or removed anytime without any warning.</source>
          <target state="translated">これは、警告なしでいつでも変更・削除できる実験的なコードです。</target>
        </trans-unit>
        <trans-unit id="1093a321a621a1d24d25a283757e5229ec776381" translate="yes" xml:space="preserve">
          <source>This is followed by a call to &lt;code&gt;open/4&lt;/code&gt; before any read/write access is performed. &lt;code&gt;AcceptedOptions&lt;/code&gt; is sent to the server, which replies with the options that it accepts. These are then forwarded to &lt;code&gt;open/4&lt;/code&gt; as &lt;code&gt;SuggestedOptions&lt;/code&gt;.</source>
          <target state="translated">この後、読み取り/書き込みアクセスが実行される前に &lt;code&gt;open/4&lt;/code&gt; が呼び出されます。 &lt;code&gt;AcceptedOptions&lt;/code&gt; がサーバーに送信され、サーバーは受け入れるオプションで応答します。次に、これらは &lt;code&gt;SuggestedOptions&lt;/code&gt; として &lt;code&gt;open/4&lt;/code&gt; に転送されます。</target>
        </trans-unit>
        <trans-unit id="ef43207effbfa0c4bc3102645253272383b860ee" translate="yes" xml:space="preserve">
          <source>This is handled automatically by the megaco application. There is however one thing that need to be configured by the user, the &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_recv_timer&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">これは、megacoアプリケーションによって自動的に処理されます。ただし、ユーザーが構成する必要があるのは、 &lt;code&gt;&lt;a href=&quot;megaco#user_info&quot;&gt;segment_recv_timer&lt;/a&gt;&lt;/code&gt; オプションです。</target>
        </trans-unit>
        <trans-unit id="29f190ed43ce30d7d9b9d196be4fa299d1c36697" translate="yes" xml:space="preserve">
          <source>This is if it is used in the context of the match operator as in the example.</source>
          <target state="translated">これは、例のようにマッチ演算子のコンテキストで使用されている場合です。</target>
        </trans-unit>
        <trans-unit id="7b6a3bc9957c826c254223da8d53ebcc53f4e171" translate="yes" xml:space="preserve">
          <source>This is illustrated in the following table:</source>
          <target state="translated">これは、以下の表に示されています。</target>
        </trans-unit>
        <trans-unit id="3a9346a5e9e0ffd489af06c1ad2635ffc6b9ae2c" translate="yes" xml:space="preserve">
          <source>This is implementattion depended. That is, it depends on the module. For each module a specific set of options are valid. For the module provided with the app, these options are supported:</source>
          <target state="translated">これは実装依存型です。つまり、モジュールに依存します。各モジュールでは、特定のオプションのセットが有効です。アプリが提供するモジュールでは、これらのオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="114d08a8e002db6d0c9182141940ed632dd9d634" translate="yes" xml:space="preserve">
          <source>This is in effect a progress report.</source>
          <target state="translated">これは実質的には経過報告です。</target>
        </trans-unit>
        <trans-unit id="a159e1612a81f8d86b525155c551f0929580069d" translate="yes" xml:space="preserve">
          <source>This is no longer the case. If you require &lt;code&gt;'undefined'&lt;/code&gt; in your record field type, you must explicitly add it to the typespec, as in the 2nd example.</source>
          <target state="translated">これはもう当てはまりません。レコードフィールドタイプで &lt;code&gt;'undefined'&lt;/code&gt; が必要な場合は、2番目の例のように、typespecに明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="33403ecb7959eebc92f2663aeded4a8c6c3bee94" translate="yes" xml:space="preserve">
          <source>This is normally a wise decision, but it can be disastrous if the nodes have been disconnected because of a communication failure, as the &lt;code&gt;Mnesia&lt;/code&gt; normal table load mechanism does not cope with communication failures.</source>
          <target state="translated">これは通常は賢明な決定ですが、 &lt;code&gt;Mnesia&lt;/code&gt; の通常のテーブルロードメカニズムが通信障害に対応していないため、通信障害が原因でノードが切断された場合は悲惨な結果になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="868d49c485867e5bfe4e2b7dfc7ac02d90106823" translate="yes" xml:space="preserve">
          <source>This is normally the default &lt;code&gt;malloc&lt;/code&gt; implementation used on the specific OS.</source>
          <target state="translated">これは通常、特定のOSで使用されるデフォルトの &lt;code&gt;malloc&lt;/code&gt; 実装です。</target>
        </trans-unit>
        <trans-unit id="9dde21bfce3c688dc390548f3494e7bf552bd9fc" translate="yes" xml:space="preserve">
          <source>This is not a full-fledged resolver, only a DNS client that relies on asking trusted recursive name servers.</source>
          <target state="translated">これは本格的なリゾルバではなく、信頼された再帰的なネームサーバーに依頼するDNSクライアントにすぎません。</target>
        </trans-unit>
        <trans-unit id="836326e8e7b02322f5679431a9ac0cf2a7bdaf26" translate="yes" xml:space="preserve">
          <source>This is not a proper Unicode representation, but the representation used for characters before the Unicode standard. It can still be used to represent character code points in the Unicode standard with numbers &amp;lt; 256, which exactly corresponds to the ISO Latin-1 character set. In Erlang, this is commonly denoted &lt;code&gt;latin1&lt;/code&gt; encoding, which is slightly misleading as ISO Latin-1 is a character code range, not an encoding.</source>
          <target state="translated">これは適切なUnicode表現ではなく、Unicode標準以前の文字に使用された表現です。それでも、256未満の数値を持つUnicode標準の文字コードポイントを表すために使用できます。これは、ISO Latin-1文字セットに正確に対応しています。Erlangでは、これは一般的に &lt;code&gt;latin1&lt;/code&gt; エンコーディングで表されますが、ISO Latin-1はエンコーディングではなく文字コード範囲であるため、少し誤解を招きます。</target>
        </trans-unit>
        <trans-unit id="2c58e7e1b5e3d20a4fa526ed7b8e2cfc77c34073" translate="yes" xml:space="preserve">
          <source>This is not entirely safe, as it is vulnerable against takeover attacks, but it is a tradeoff between fair safety and performance.</source>
          <target state="translated">乗っ取り攻撃に弱いので完全に安全というわけではありませんが、公平な安全性と性能のトレードオフになっています。</target>
        </trans-unit>
        <trans-unit id="43d40b61a5fa7c9dc787ea193a5ed313e523277b" translate="yes" xml:space="preserve">
          <source>This is not important if you do not postpone events. But if you later decide to start postponing some events, then the design flaw of not having separate states when they should be, might become a hard to find bug.</source>
          <target state="translated">イベントを延期しないのであれば、これは重要ではありません。しかし、後になっていくつかのイベントを延期することになった場合、あるべき時に別の状態を持たないという設計上の欠陥が、見つけるのが難しいバグになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="a61dc5f6b213458abec4f8eccdc89fe38585fdf1" translate="yes" xml:space="preserve">
          <source>This is not important if you do not postpone events. But if you later decide to start postponing some events, then the design flaw of not having separate states when they should be, might become a hard-to-find bug.</source>
          <target state="translated">イベントを延期しないのであれば、これは重要ではありません。しかし、後になっていくつかのイベントを延期することになった場合、あるべきときに別の状態を持たないという設計上の欠陥が、見つけにくいバグになるかもしれません。</target>
        </trans-unit>
        <trans-unit id="65f78e9c138cff8dcc48b10d2119a79c6c5f383e" translate="yes" xml:space="preserve">
          <source>This is not the wanted result. To achieve the desired effect, &lt;code&gt;select&lt;/code&gt; must be written as follows:</source>
          <target state="translated">これは望ましい結果ではありません。目的の効果を得るには、 &lt;code&gt;select&lt;/code&gt; を次のように記述する必要があります。</target>
        </trans-unit>
        <trans-unit id="b7f69a6080f0d1385f2abcc049f00ad9be5341c1" translate="yes" xml:space="preserve">
          <source>This is perhaps the most central module in the entirety of the &lt;code&gt;et&lt;/code&gt; suite. The &lt;code&gt;Collector&lt;/code&gt; needs &quot;filters&quot; to convert the &lt;code&gt;Raw Trace Data&lt;/code&gt; into &quot;events&quot; that it can display. The &lt;code&gt;et_selector&lt;/code&gt; module provides the default &lt;code&gt;Filter&lt;/code&gt; and some API calls to manage the &lt;code&gt;Trace Pattern&lt;/code&gt;. The &lt;code&gt;Selector&lt;/code&gt; provides various functions that achieve the following:</source>
          <target state="translated">これはおそらく &lt;code&gt;et&lt;/code&gt; スイート全体で最も中心的なモジュールです。 &lt;code&gt;Collector&lt;/code&gt; 変換するために、「フィルタ」を必要とする &lt;code&gt;Raw Trace Data&lt;/code&gt; 、それが表示できることを「イベント」へ。 &lt;code&gt;et_selector&lt;/code&gt; のモジュールは、デフォルトの提供 &lt;code&gt;Filter&lt;/code&gt; を管理するために、いくつかのAPI呼び出しを &lt;code&gt;Trace Pattern&lt;/code&gt; 。 &lt;code&gt;Selector&lt;/code&gt; 以下のことを実現するさまざまな機能を提供します。</target>
        </trans-unit>
        <trans-unit id="bd78b41da72f8f6a1b1b335bee4881061346e4af" translate="yes" xml:space="preserve">
          <source>This is possibly a little clearer.</source>
          <target state="translated">これでもう少しわかりやすくなったかもしれません。</target>
        </trans-unit>
        <trans-unit id="7063cc576e9b11f727c2ae0cabc7e8bc7b76b64e" translate="yes" xml:space="preserve">
          <source>This is primarily a way to show the effects of using the reentrant flex scanner instead of the non-reentrant.</source>
          <target state="translated">これは、主に、非再入室型ではなく、再入室型フレックススキャナを使用した場合の効果を示すものである。</target>
        </trans-unit>
        <trans-unit id="7f43cbca3b6fcf016e7da8036914af019823f1d9" translate="yes" xml:space="preserve">
          <source>This is read as follows: The list of X such that X is taken from the list &lt;code&gt;[1,2,a,...]&lt;/code&gt; and X is greater than 3.</source>
          <target state="translated">これは次のように読み取られます。Xがリスト &lt;code&gt;[1,2,a,...]&lt;/code&gt; から取得され、Xが3より大きいようなXのリスト。</target>
        </trans-unit>
        <trans-unit id="e5bbd1957b21e024367be0eb839936ca962e71f8" translate="yes" xml:space="preserve">
          <source>This is received by the client, which in turn does &lt;code&gt;exit(normal)&lt;/code&gt; and terminates. If &lt;code&gt;keysearch&lt;/code&gt; returns &lt;code&gt;{value,{From,Name}}&lt;/code&gt; it is certain that the user is logged on and that his name (peter) is in variable &lt;code&gt;Name&lt;/code&gt;.</source>
          <target state="translated">これはクライアントによって受信され、クライアントは &lt;code&gt;exit(normal)&lt;/code&gt; して終了します。 &lt;code&gt;keysearch&lt;/code&gt; が &lt;code&gt;{value,{From,Name}}&lt;/code&gt; 返した場合、ユーザーがログオンしていて、その名前（peter）が変数 &lt;code&gt;Name&lt;/code&gt; にあることが確実です。</target>
        </trans-unit>
        <trans-unit id="81a8f87d1727d52beaa427ce4936112ae848bc0b" translate="yes" xml:space="preserve">
          <source>This is received by the client.</source>
          <target state="translated">これをクライアントが受信します。</target>
        </trans-unit>
        <trans-unit id="6c40d6a299f26d7b05469a35afc3ecd07bd6f779" translate="yes" xml:space="preserve">
          <source>This is simply an erlang compatible text-file with the following structure: &lt;code&gt;{codec_name(), messages_list()}&lt;/code&gt;.</source>
          <target state="translated">これは単に、次の構造を持つerlang互換のテキストファイルです： &lt;code&gt;{codec_name(), messages_list()}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="44863f1a9281f46194959277b2c84306dd047f31" translate="yes" xml:space="preserve">
          <source>This is slightly faster for probably the most common case that the input lists are not empty or very short. (Another advantage is that Dialyzer can deduce a better type for the &lt;code&gt;Xs&lt;/code&gt; variable.)</source>
          <target state="translated">これは、入力リストが空でないか、非常に短いわけではない最も一般的なケースでは、わずかに高速です。（別の利点は、Dialyzerが &lt;code&gt;Xs&lt;/code&gt; 変数のより適切な型を推測できることです。）</target>
        </trans-unit>
        <trans-unit id="709cd27ea3760e45f8fdbf83a2674e3dd14b99e2" translate="yes" xml:space="preserve">
          <source>This is slightly more efficient because here you do not build a list element only to copy it directly. (Or it would be more efficient if the compiler did not automatically rewrite &lt;code&gt;[H]++Acc&lt;/code&gt; to &lt;code&gt;[H|Acc]&lt;/code&gt;.)</source>
          <target state="translated">ここでは、直接コピーするためだけにリスト要素を作成しないため、これは少し効率的です。（または、コンパイラが &lt;code&gt;[H]++Acc&lt;/code&gt; を &lt;code&gt;[H|Acc]&lt;/code&gt; 自動的に書き換えなかった場合は、より効率的です。）</target>
        </trans-unit>
        <trans-unit id="4f59ec1eb2875e58bffaa8ecb426dbb6d7dc8700" translate="yes" xml:space="preserve">
          <source>This is sometimes the only way to run distributed Erlang if the Domain Name System (DNS) is not running. No communication can exist between nodes running with flag &lt;code&gt;-sname&lt;/code&gt; and those running with flag &lt;code&gt;-name&lt;/code&gt;, as node names must be unique in distributed Erlang systems.</source>
          <target state="translated">これは、ドメインネームシステム（DNS）が実行されていない場合に分散Erlangを実行する唯一の方法です。ノード名は分散Erlangシステムで一意でなければならないため、フラグ &lt;code&gt;-sname&lt;/code&gt; で実行されているノードとフラグ &lt;code&gt;-name&lt;/code&gt; で実行されているノードの間には通信が存在できません。</target>
        </trans-unit>
        <trans-unit id="570f8642744ae6cd3a9675f1aad4ee8419ad33a1" translate="yes" xml:space="preserve">
          <source>This is syntactic sugar for the equivalent, but harder to read:</source>
          <target state="translated">これは等価のための構文的な糖質ですが、読みにくいです。</target>
        </trans-unit>
        <trans-unit id="9e186bc5c4bbfebc187d81afa7fc46f64f868bc5" translate="yes" xml:space="preserve">
          <source>This is syntactic sugar for the following:</source>
          <target state="translated">これは、次のような場合の構文糖です。</target>
        </trans-unit>
        <trans-unit id="922370e690d4cc53426a28eb4d41e24f43cfe114" translate="yes" xml:space="preserve">
          <source>This is syntactic sugar for:</source>
          <target state="translated">のための構文的な糖質です。</target>
        </trans-unit>
        <trans-unit id="bb54970de95599c4474802466e4b9431c5e1008a" translate="yes" xml:space="preserve">
          <source>This is the &lt;code&gt;SSL/TLS&lt;/code&gt; connectin configuration option.</source>
          <target state="translated">これは &lt;code&gt;SSL/TLS&lt;/code&gt; 接続構成オプションです。</target>
        </trans-unit>
        <trans-unit id="5b502c6950dc7c3f81c03175a62672f14e273c7b" translate="yes" xml:space="preserve">
          <source>This is the Xorshift116 generator combined with the StarStar scrambler from the 2018 paper by David Blackman and Sebastiano Vigna: &lt;code&gt;&lt;a href=&quot;http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf&quot;&gt; Scrambled Linear Pseudorandom Number Generators &lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">これは、DavidBlackmanとSebastianoVignaによる2018年の論文のStarStarスクランブラーと組み合わせたXorshift116 &lt;code&gt;&lt;a href=&quot;http://vigna.di.unimi.it/ftp/papers/ScrambledLinear.pdf&quot;&gt; Scrambled Linear Pseudorandom Number Generators &lt;/a&gt;&lt;/code&gt; ：スクランブル線形疑似乱数ジェネレーター</target>
        </trans-unit>
        <trans-unit id="aac881df38163ed7b3cad0912165225c572fc928" translate="yes" xml:space="preserve">
          <source>This is the default handler used by OTP. Multiple instances can be started, and each instance will write log events to a given destination, terminal or file.</source>
          <target state="translated">これは OTP が使用するデフォルトのハンドラです。複数のインスタンスを起動することができ、各インスタンスはログイベントを指定された宛先、ターミナル、ファイルに書き込みます。</target>
        </trans-unit>
        <trans-unit id="c4d57523639a2e8a475bc6496773bdbfcedee6d9" translate="yes" xml:space="preserve">
          <source>This is the default instrumentation function for tables.</source>
          <target state="translated">これは、テーブルのデフォルトの計装機能です。</target>
        </trans-unit>
        <trans-unit id="8a590bd244aa7fba225f4a56cad227855876f150" translate="yes" xml:space="preserve">
          <source>This is the default instrumentation function for variables.</source>
          <target state="translated">変数のデフォルトのインストルメンテーション機能です。</target>
        </trans-unit>
        <trans-unit id="0ea769a678284ef3199b2e2888a8634fc4803cb9" translate="yes" xml:space="preserve">
          <source>This is the default. It means the &lt;code&gt;Time&lt;/code&gt; value is interpreted as a time in milliseconds &lt;strong&gt;relative&lt;/strong&gt; current &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これがデフォルトです。これは、 &lt;code&gt;Time&lt;/code&gt; 値がミリ秒単位の&lt;strong&gt;相対&lt;/strong&gt;電流 &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; として解釈されることを意味します。</target>
        </trans-unit>
        <trans-unit id="0db12e389b3a4261d748d8d5279be613afd3e185" translate="yes" xml:space="preserve">
          <source>This is the directory holding the files:</source>
          <target state="translated">ファイルを保持しているディレクトリです。</target>
        </trans-unit>
        <trans-unit id="f95887b28149dccf1da49196a8c57540f2278c1d" translate="yes" xml:space="preserve">
          <source>This is the directory holding the server's files:</source>
          <target state="translated">これは、サーバーのファイルを保持するディレクトリです。</target>
        </trans-unit>
        <trans-unit id="31b3e5ab542a5f0debc59c85dd91647f80797616" translate="yes" xml:space="preserve">
          <source>This is the disk log type, &lt;code&gt;wrap&lt;/code&gt; or &lt;code&gt;halt&lt;/code&gt;. The option corresponds to the &lt;code&gt;type&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、ディスクログタイプである &lt;code&gt;wrap&lt;/code&gt; または &lt;code&gt;halt&lt;/code&gt; です。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;type&lt;/code&gt; プロパティに対応しています。</target>
        </trans-unit>
        <trans-unit id="79cf40aec82f5e3c6c095b9a7f24df20c5c7f299" translate="yes" xml:space="preserve">
          <source>This is the fastest way of calling a driver and get a response. It makes no context switch in the Erlang emulator and requires no message passing. It is suitable for calling C function to get faster execution, when Erlang is too slow.</source>
          <target state="translated">これはドライバを呼び出してレスポンスを得る最速の方法です。Erlangエミュレータのコンテキストスイッチを使わず、メッセージパッシングも必要ありません。Erlangが遅いときにC言語の関数を呼び出して高速に実行するのに適しています。</target>
        </trans-unit>
        <trans-unit id="f997eb6e8d88cc346ac8a25ffea65575e19dddfd" translate="yes" xml:space="preserve">
          <source>This is the first function called when a notification delivery is in progress. It informs the &lt;code&gt;receiver&lt;/code&gt; which targets will get the notification. The result of the delivery will be provided via successive calls to &lt;code&gt;delivery_info/4&lt;/code&gt; function, see below.</source>
          <target state="translated">これは、通知配信の進行中に呼び出される最初の関数です。これは、通知 &lt;code&gt;receiver&lt;/code&gt; の目標は、通知を取得します。配信の結果は、delivery_info &lt;code&gt;delivery_info/4&lt;/code&gt; 関数への連続した呼び出しによって提供されます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="ba21277d355183275053e3909ab979314fa50468" translate="yes" xml:space="preserve">
          <source>This is the first message that the channel receives. It is sent just before the &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt; function returns successfully. This is especially useful if the server wants to send a message to the client without first receiving a message from it. If the message is not useful for your particular scenario, ignore it by immediately returning &lt;code&gt;{ok, State}&lt;/code&gt;.</source>
          <target state="translated">これは、チャネルが受信する最初のメッセージです。 &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt; 関数が正常に戻る直前に送信されます。これは、サーバーが最初にメッセージを受信せずにクライアントにメッセージを送信する場合に特に便利です。特定のシナリオでメッセージが役に立たない場合は、すぐに &lt;code&gt;{ok, State}&lt;/code&gt; 返して無視してください。</target>
        </trans-unit>
        <trans-unit id="ff43ffc2013d60b90dbeef0ec3d72ae3abfda509" translate="yes" xml:space="preserve">
          <source>This is the first message that the channel receives. This is especially useful if the server wants to send a message to the client without first receiving a message from it. If the message is not useful for your particular scenario, ignore it by immediately returning &lt;code&gt;{ok, State}&lt;/code&gt;.</source>
          <target state="translated">これは、チャネルが受信する最初のメッセージです。これは、サーバーが最初にメッセージを受信せずにクライアントにメッセージを送信する場合に特に便利です。特定のシナリオでメッセージが役に立たない場合は、すぐに &lt;code&gt;{ok, State}&lt;/code&gt; 返して無視してください。</target>
        </trans-unit>
        <trans-unit id="f4993527ae602c81dada40230c7e4b229f40c09c" translate="yes" xml:space="preserve">
          <source>This is the full name of the disk log file. The option corresponds to the &lt;code&gt;name&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、ディスクログファイルの完全な名前です。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;name&lt;/code&gt; プロパティに対応しています。</target>
        </trans-unit>
        <trans-unit id="5982af784f6f1a00b591611686e14f6193a9f84c" translate="yes" xml:space="preserve">
          <source>This is the interface module for the &lt;code&gt;SSH&lt;/code&gt; application. The Secure Shell (SSH) Protocol is a protocol for secure remote login and other secure network services over an insecure network. See &lt;code&gt;ssh(6)&lt;/code&gt; for details of supported RFCs, versions, algorithms and unicode handling.</source>
          <target state="translated">これは、 &lt;code&gt;SSH&lt;/code&gt; アプリケーションのインターフェースモジュールです。セキュアシェル（SSH）プロトコルは、安全でないリモートログインや、安全でないネットワークを介したその他の安全なネットワークサービスのためのプロトコルです。参照 &lt;code&gt;ssh(6)&lt;/code&gt; サポートするRFC、バージョン、アルゴリズムおよびUnicode処理の詳細については。</target>
        </trans-unit>
        <trans-unit id="f80630a3cb0a4f72ab077d535fc76e765cca2dca" translate="yes" xml:space="preserve">
          <source>This is the low-level function to unload (or decrement reference counts of) a driver. It can be used to force port killing, in much the same way as the driver option &lt;code&gt;kill_ports&lt;/code&gt; implicitly does. Also, it can trigger a monitor either because other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; still have the driver loaded or because open ports use the driver.</source>
          <target state="translated">これは、ドライバーをアンロード（または参照カウントをデクリメント）する低レベル関数です。これは、ドライバーオプション &lt;code&gt;kill_ports&lt;/code&gt; が暗黙的に行うのとほぼ同じ方法で、ポートの強制終了に使用できます。また、他の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; まだドライバーをロードしているか、開いているポートがドライバーを使用しているために、モニターをトリガーできます。</target>
        </trans-unit>
        <trans-unit id="eacd6f28e2e16d27200f6b33be43d951190f1539" translate="yes" xml:space="preserve">
          <source>This is the magic macro to initialize a NIF library. It is to be evaluated in global file scope.</source>
          <target state="translated">NIF ライブラリを初期化するためのマジックマクロです。グローバルファイルスコープで評価されます。</target>
        </trans-unit>
        <trans-unit id="a9ed06a82672ebce7c45ad63610c5550104e76dd" translate="yes" xml:space="preserve">
          <source>This is the main option and it controls the configuration of Reltool. It can either be a &lt;code&gt;sys&lt;/code&gt; tuple or a name of a &lt;code&gt;file&lt;/code&gt; containing a sys tuple.</source>
          <target state="translated">これはメインオプションであり、Reltoolの構成を制御します。 &lt;code&gt;sys&lt;/code&gt; タプルまたはsysタプルを含む &lt;code&gt;file&lt;/code&gt; 名前のいずれかです。</target>
        </trans-unit>
        <trans-unit id="3c9044a0169d5c61331b09923e7b20b8bc8aa7f2" translate="yes" xml:space="preserve">
          <source>This is the maximum allowed queue length. If the message queue grows larger than this, the handler process is terminated.</source>
          <target state="translated">これは、許容される最大のキューの長さです。メッセージキューがこれより大きくなった場合、ハンドラプロセスは終了します。</target>
        </trans-unit>
        <trans-unit id="b9f45ed64c3e0c4da54fbe1eb312ba76516ad0e2" translate="yes" xml:space="preserve">
          <source>This is the maximum memory size that the handler process is allowed to use. If the handler grows larger than this, the process is terminated.</source>
          <target state="translated">これは、ハンドラプロセスが使用できる最大メモリサイズです。ハンドラがこれより大きくなった場合、プロセスは終了します。</target>
        </trans-unit>
        <trans-unit id="16038a3786bdd4dedf260d26283b919a880bb676" translate="yes" xml:space="preserve">
          <source>This is the maximum number of bytes that is written to a log file before disk_log proceeds with the next file in order, or generates an error in case of a full halt log. The option corresponds to the &lt;code&gt;MaxNoBytes&lt;/code&gt; element in the &lt;code&gt;size&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、disk_logが次のファイルを順番に処理する前にログファイルに書き込まれる最大バイト数です。完全な停止ログの場合はエラーが生成されます。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;size&lt;/code&gt; プロパティの &lt;code&gt;MaxNoBytes&lt;/code&gt; 要素に対応しています。</target>
        </trans-unit>
        <trans-unit id="459f135a3a42608f2bd3388de6fc151cb8110783" translate="yes" xml:space="preserve">
          <source>This is the maximum number of events to handle within a &lt;code&gt;burst_limit_window_time&lt;/code&gt; time frame. After the limit is reached, successive events are dropped until the end of the time frame.</source>
          <target state="translated">これは、 &lt;code&gt;burst_limit_window_time&lt;/code&gt; 時間枠内で処理するイベントの最大数です。制限に達した後、連続するイベントは時間枠の終わりまで削除されます。</target>
        </trans-unit>
        <trans-unit id="f9d007efced8ad7291f6b7473c324b69730b4bdb" translate="yes" xml:space="preserve">
          <source>This is the maximum number of files that disk_log uses for its circular logging. The option corresponds to the &lt;code&gt;MaxNoFiles&lt;/code&gt; element in the &lt;code&gt;size&lt;/code&gt; property in the &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; datatype.</source>
          <target state="translated">これは、disk_logが循環ログに使用するファイルの最大数です。このオプションは、 &lt;code&gt;&lt;a href=&quot;disk_log#open-1&quot;&gt;dlog_option()&lt;/a&gt;&lt;/code&gt; データ型の &lt;code&gt;size&lt;/code&gt; プロパティの &lt;code&gt;MaxNoFiles&lt;/code&gt; 要素に対応しています。</target>
        </trans-unit>
        <trans-unit id="88ddfe714e0b66558fbe57136603410b11130d4d" translate="yes" xml:space="preserve">
          <source>This is the new encoding of internal funs: &lt;code&gt;fun F/A&lt;/code&gt; and &lt;code&gt;fun(Arg1,..) -&amp;gt; ... end&lt;/code&gt;.</source>
          <target state="translated">これは内部 &lt;code&gt;fun F/A&lt;/code&gt; の新しいエンコーディングです：fun F / Aおよび &lt;code&gt;fun(Arg1,..) -&amp;gt; ... end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="837460bd7445a65a68a00b613c75a7744d0ed82a" translate="yes" xml:space="preserve">
          <source>This is the printout header of one process. The printout contains only this one process since we did &lt;code&gt;fprof:apply/3&lt;/code&gt; which traces only the current process. Therefore the CNT and OWN columns perfectly matches the totals above. The ACC column is undefined since summing the ACC times of all calls in the process makes no sense - you would get something like the ACC value from totals above multiplied by the average depth of the call stack, or something.</source>
          <target state="translated">これは、1つのプロセスの出力ヘッダーです。現在のプロセスのみをトレース &lt;code&gt;fprof:apply/3&lt;/code&gt; を実行したため、出力にはこの1つのプロセスのみが含まれます。したがって、CNT列とOWN列は上記の合計と完全に一致します。プロセス内のすべての呼び出しのACC時間を合計しても意味がないため、ACC列は定義されていません。上記の合計からACC値に呼び出しスタックの平均深度を掛けたものなどが得られます。</target>
        </trans-unit>
        <trans-unit id="ee530acee221ac3457f1090f43fd370b8436c96d" translate="yes" xml:space="preserve">
          <source>This is the re-entrant formatted reader. The continuation of the first call to the functions must be &lt;code&gt;[]&lt;/code&gt;. For a complete description of how the re-entrant input scheme works, see Armstrong, Virding, Williams: 'Concurrent Programming in Erlang', Chapter 13.</source>
          <target state="translated">これは、再入可能にフォーマットされたリーダーです。関数への最初の呼び出しの継続は &lt;code&gt;[]&lt;/code&gt; でなければなりません。再入可能入力方式の動作の詳細については、アームストロング、バーディング、ウィリアムズ：「Erlangでの並行プログラミング」、第13章を参照してください。</target>
        </trans-unit>
        <trans-unit id="ecd4a7ad5696bedde8f5f313930da44fe12f224d" translate="yes" xml:space="preserve">
          <source>This is the re-entrant scanner, which scans characters until either a &lt;strong&gt;dot&lt;/strong&gt; ('.' followed by a white space) or &lt;code&gt;eof&lt;/code&gt; is reached. It returns:</source>
          <target state="translated">これは、&lt;strong&gt;ドット&lt;/strong&gt;（ '。'の後に空白が続く）または &lt;code&gt;eof&lt;/code&gt; に到達するまで文字をスキャンする再入可能なスキャナーです。それは返します：</target>
        </trans-unit>
        <trans-unit id="4c87585c82ab9ef5b43a4d3bd9e435a0da3d966d" translate="yes" xml:space="preserve">
          <source>This is the return type from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; and selects &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; and whether to do &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, or not.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; からの戻り値の型であり、 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; を選択し、 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; を行うかどうかを選択し&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6ad3ae21f4d6378b9390fab772b58bcf9e24057d" translate="yes" xml:space="preserve">
          <source>This is the return type from &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; and selects &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback mode&lt;/a&gt;&lt;/code&gt; and whether to do &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state enter calls&lt;/a&gt;&lt;/code&gt;, or not.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; からの戻り値のタイプであり、 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;callback mode&lt;/a&gt;&lt;/code&gt; と、 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;state enter calls&lt;/a&gt;&lt;/code&gt; かどうかを選択します。</target>
        </trans-unit>
        <trans-unit id="04e8ab784b5603c6b44491c28cae41829d1e3589" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;sol&lt;/code&gt;, but only for the first call to &lt;code&gt;link/1&lt;/code&gt; by the traced process.</source>
          <target state="translated">これは &lt;code&gt;sol&lt;/code&gt; と同じですが、トレースされたプロセスによる &lt;code&gt;link/1&lt;/code&gt; への最初の呼び出しについてのみです。</target>
        </trans-unit>
        <trans-unit id="5d44ec075c5224429b7e914e2c0f01b386f3e0fd" translate="yes" xml:space="preserve">
          <source>This is the same as &lt;code&gt;sos&lt;/code&gt;, but only for the first process spawned by the traced process.</source>
          <target state="translated">これは &lt;code&gt;sos&lt;/code&gt; と同じですが、トレースされたプロセスによって生成された最初のプロセスに対してのみです。</target>
        </trans-unit>
        <trans-unit id="5c9a7f10551e6fef6526100ea65361d85f3b3c5e" translate="yes" xml:space="preserve">
          <source>This is the same as calling &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config(group_leader())&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これは &lt;code&gt;&lt;a href=&quot;#make_config-1&quot;&gt;make_config(group_leader())&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="ae7c485681a5d5be425044d9a2ecba3267612e5e" translate="yes" xml:space="preserve">
          <source>This is the same as doing, e.g.:</source>
          <target state="translated">これは、例えば、やっていることと同じです。</target>
        </trans-unit>
        <trans-unit id="750c9c2130115cb398cd55807f2f8cb0dffbe5fd" translate="yes" xml:space="preserve">
          <source>This is the same as mapfold/4, with an identity function as the pre-operation.</source>
          <target state="translated">これはmapfold/4と同じで、identity関数を事前操作としています。</target>
        </trans-unit>
        <trans-unit id="d70feac208b0fafbbf1031f0ed7f8654773e27d3" translate="yes" xml:space="preserve">
          <source>This is the same as:</source>
          <target state="translated">と同じです。</target>
        </trans-unit>
        <trans-unit id="3b5a14eeead1c5ce60108308f333bdf8d18e6154" translate="yes" xml:space="preserve">
          <source>This is the short story though, for the experienced and impatient:</source>
          <target state="translated">これは経験豊富でせっかちな人のための、しかし短い物語です。</target>
        </trans-unit>
        <trans-unit id="5cabfd28d4ff30cee5147e828bd4dda97a0b5763" translate="yes" xml:space="preserve">
          <source>This is the standard handler for Logger. Multiple instances of this handler can be added to Logger, and each instance prints logs to &lt;code&gt;standard_io&lt;/code&gt;, &lt;code&gt;standard_error&lt;/code&gt;, or to file.</source>
          <target state="translated">これはロガーの標準ハンドラです。このハンドラーの複数のインスタンスをロガーに追加でき、各インスタンスはログを &lt;code&gt;standard_io&lt;/code&gt; 、 &lt;code&gt;standard_error&lt;/code&gt; 、またはファイルに出力します。</target>
        </trans-unit>
        <trans-unit id="7d0bc914b2bcbf775df160b6a080adcaa1ab6b48" translate="yes" xml:space="preserve">
          <source>This is the start of a hiearchy of opaque data structures that can be examined with access functions in &lt;code&gt;inet_dns&lt;/code&gt;, which return lists of &lt;code&gt;{Field,Value}&lt;/code&gt; tuples. The arity 2 functions only return the value for a specified field.</source>
          <target state="translated">これは、 &lt;code&gt;{Field,Value}&lt;/code&gt; タプルのリストを返す &lt;code&gt;inet_dns&lt;/code&gt; のアクセス関数で調べることができる不透明なデータ構造の階層の始まりです。アリティ2関数は、指定されたフィールドの値のみを返します。</target>
        </trans-unit>
        <trans-unit id="d98c71268352e941036bfc46f7ac63a11dac3adf" translate="yes" xml:space="preserve">
          <source>This is the sum of the runtime for all threads in the Erlang runtime system and can therefore be greater than the wall clock time.</source>
          <target state="translated">これはErlangランタイムシステムのすべてのスレッドのランタイムの合計で、ウォールクロックの時間よりも大きくなります。</target>
        </trans-unit>
        <trans-unit id="f65cd2322c237b869a90671095b9d99fc32d6542" translate="yes" xml:space="preserve">
          <source>This is the top supervisor for the agent part of the SNMP application. There is always one supervisor at each node with an SNMP agent (master agent or sub-agent).</source>
          <target state="translated">これは、SNMPアプリケーションのエージェント部分のトップスーパバイザです。SNMPエージェント(マスターエージェントまたはサブエージェント)を持つ各ノードには、常に1つのスーパーバイザーが存在します。</target>
        </trans-unit>
        <trans-unit id="1c91fd8459d792120c638965b077037f75eb8c7b" translate="yes" xml:space="preserve">
          <source>This is the type definition for the supervisor flags:</source>
          <target state="translated">スーパバイザフラグの型定義です。</target>
        </trans-unit>
        <trans-unit id="8fcf634babe6dda8ecdbe08e51d07e7fe457d1af" translate="yes" xml:space="preserve">
          <source>This is to allow a transport process to keep count of the number of incoming request messages that have not yet been answered or discarded, to allow it to regulate the amount of incoming traffic. Both diameter_tcp and diameter_sctp request acknowledgements when a &lt;code&gt;message_cb&lt;/code&gt; is configured, turning send/recv message into callbacks that can be used to regulate traffic.</source>
          <target state="translated">これは、トランスポートプロセスが、まだ応答または破棄されていない着信要求メッセージの数をカウントし、着信トラフィックの量を調整できるようにするためです。 &lt;code&gt;message_cb&lt;/code&gt; が設定されると、diameter_tcpとdiameter_sctpの両方が確認応答を要求し、send / recvメッセージをトラフィックの調整に使用できるコールバックに変換します。</target>
        </trans-unit>
        <trans-unit id="9847ce6094bdf607fe5e13ee0e480c77d4dbdfd9" translate="yes" xml:space="preserve">
          <source>This is to be added to the &lt;code&gt;start&lt;/code&gt; script.</source>
          <target state="translated">これは &lt;code&gt;start&lt;/code&gt; スクリプトに追加されます。</target>
        </trans-unit>
        <trans-unit id="9cc5dbd4b0a6027790eeb7362903f65abf0802cc" translate="yes" xml:space="preserve">
          <source>This is to provide options that changes its general behavior and &quot;sticks&quot; to the driver throughout its lifespan.</source>
          <target state="translated">これは、一般的な行動を変えるオプションを提供することで、生涯を通じてドライバーに「くっつく」ことができるようにするためです。</target>
        </trans-unit>
        <trans-unit id="63ab71f3a67c414cba27c6d8e2befb9085535d6d" translate="yes" xml:space="preserve">
          <source>This is transformed into one call to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="translated">これは &lt;code&gt;my_table&lt;/code&gt; への1回の呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="fad7abe2a96807b6a5b8ac7472f217897f8a19e9" translate="yes" xml:space="preserve">
          <source>This is used for &lt;strong&gt;three-way-handshake&lt;/strong&gt;.</source>
          <target state="translated">これは&lt;strong&gt;3方向ハンドシェイクに&lt;/strong&gt;使用されます。</target>
        </trans-unit>
        <trans-unit id="72036e52d82b37ea2fc4d48dfb5499c608ebb71d" translate="yes" xml:space="preserve">
          <source>This is used to determine if the call to non-local function &lt;code&gt;FuncSpec&lt;/code&gt; (&lt;code&gt;{Module,Func}&lt;/code&gt; or a fun) with arguments &lt;code&gt;ArgList&lt;/code&gt; is to be allowed. The return value &lt;code&gt;{redirect,NewFuncSpec,NewArgList}&lt;/code&gt; can be used to let the shell evaluate some other function than the one specified by &lt;code&gt;FuncSpec&lt;/code&gt; and &lt;code&gt;ArgList&lt;/code&gt;.</source>
          <target state="translated">これは、引数 &lt;code&gt;ArgList&lt;/code&gt; を使用した非ローカル関数 &lt;code&gt;FuncSpec&lt;/code&gt; （ &lt;code&gt;{Module,Func}&lt;/code&gt; またはfun）の呼び出しを許可するかどうかを決定するために使用されます。戻り値 &lt;code&gt;{redirect,NewFuncSpec,NewArgList}&lt;/code&gt; を使用すると、 &lt;code&gt;FuncSpec&lt;/code&gt; および &lt;code&gt;ArgList&lt;/code&gt; で指定された関数以外の関数をシェルで評価できます。</target>
        </trans-unit>
        <trans-unit id="d65885f8646585ffb41393b4d943ab7b9e09ca48" translate="yes" xml:space="preserve">
          <source>This is used to determine if the call to the local function &lt;code&gt;Func&lt;/code&gt; with arguments &lt;code&gt;ArgList&lt;/code&gt; is to be allowed.</source>
          <target state="translated">これは、引数 &lt;code&gt;ArgList&lt;/code&gt; を使用したローカル関数 &lt;code&gt;Func&lt;/code&gt; の呼び出しを許可するかどうかを決定するために使用されます。</target>
        </trans-unit>
        <trans-unit id="4567b676fadac5a76d27950b200211f3a0074958" translate="yes" xml:space="preserve">
          <source>This just tests that the function &lt;code&gt;lists:reverse(List)&lt;/code&gt; does not crash when &lt;code&gt;List&lt;/code&gt; is &lt;code&gt;[1,2,3]&lt;/code&gt;. It is not a great test, but many people write simple functions like this one to test the basic functionality of their code, and those tests can be used directly by EUnit, without changes, as long as their function names match.</source>
          <target state="translated">これだけのテストでは、機能することを &lt;code&gt;lists:reverse(List)&lt;/code&gt; 時にクラッシュしない &lt;code&gt;List&lt;/code&gt; ある &lt;code&gt;[1,2,3]&lt;/code&gt; 。これは素晴らしいテストではありませんが、多くの人々はこのような単純な関数を記述してコードの基本的な機能をテストします。これらのテストは、関数名が一致する限り、変更せずにEUnitで直接使用できます。</target>
        </trans-unit>
        <trans-unit id="fe9522c485cb7d376d5642accb7a321aad5a05ed" translate="yes" xml:space="preserve">
          <source>This kind of parenthesis &quot;locks up&quot; the part of the pattern it contains once it has matched, and a failure further into the pattern is prevented from backtracking into it. Backtracking past it to previous items, however, works as normal.</source>
          <target state="translated">このようなカッコは、一度一致したパターンが含まれている部分を「ロックアップ」して、さらにパターンの中に失敗した場合には、バックトラッキングを防ぐことができます。しかし、これを過ぎて前の項目にバックトラックしても、通常通りに動作します。</target>
        </trans-unit>
        <trans-unit id="f0a2c7bf5aba6f668f53ccf49a4fb9c6251f30d9" translate="yes" xml:space="preserve">
          <source>This kind of transformation is useful when it is rare that an operand can be anything else but a register. In the case of &lt;code&gt;is_number/2&lt;/code&gt;, the second operand is always a register unless the compiler optimizations have been disabled.</source>
          <target state="translated">この種の変換は、オペランドがレジスタ以外のものになることがまれな場合に役立ちます。以下の場合は &lt;code&gt;is_number/2&lt;/code&gt; コンパイラの最適化が無効になっている場合を除き、第2オペランドが常にレジスタです。</target>
        </trans-unit>
        <trans-unit id="acbfa7bf9a0333e3f4da00679d91e91a638c7487" translate="yes" xml:space="preserve">
          <source>This last example is a quite common case in during normal operation. For example, when a scheduler thread runs out of work it tries to steal work from another scheduler threads run queue. When searching for a victim to steal from there was a lot of juggling of run queue locks involved, and during the actual theft finalized by having to lock both run queues and the process. When one scheduler runs out of work, often others also do, causing lots of lock contention.</source>
          <target state="translated">この最後の例は、通常の運用ではよくあるケースです。例えば、スケジューラースレッドが仕事を使い果たしたとき、それは別のスケジューラースレッドのランキューから仕事を盗もうとします。盗む相手を探す際には、ランキューのロックのジャグリングが多く、実際に盗む際にはランキューとプロセスの両方をロックしなければならないことで、最終的には盗むことになりました。あるスケジューラが仕事を使い果たすと、多くの場合、他のスケジューラも実行し、多くのロック争いを引き起こします。</target>
        </trans-unit>
        <trans-unit id="82013b529d675da98d4511e184ab7425bf09102f" translate="yes" xml:space="preserve">
          <source>This list is actually two - one for each direction server-to-client and client-to-server. Therefore it is possible but rare to have different algorithms in the two directions in one connection.</source>
          <target state="translated">このリストは実際には2つあります-サーバーからクライアントへの接続とクライアントからサーバーへの接続のそれぞれの方向に1つずつです。したがって、1つの接続で2つの方向で異なるアルゴリズムを持つことは可能ですが、稀です。</target>
        </trans-unit>
        <trans-unit id="cc0444143c5a31fc19d9928f133e7fc40ea61901" translate="yes" xml:space="preserve">
          <source>This list is also divided into two for the both directions</source>
          <target state="translated">このリストも両方向のために2つに分かれています。</target>
        </trans-unit>
        <trans-unit id="b6fab8016bf79d1847d2c2ce6e88690dbf155eba" translate="yes" xml:space="preserve">
          <source>This list is not inspected by snmp (other then checking that its a list). Its the users responsibility to ensure that these are valid options and does not conflict with the &quot;normal&quot; options.</source>
          <target state="translated">このリストはsnmpでは検査されません(リストであることを確認する以外は)。これらが有効なオプションであり、&quot;通常の &quot;オプションと競合しないことを確認するのはユーザの責任です。</target>
        </trans-unit>
        <trans-unit id="4f65aaceb7dbec6b1fb6792cf70ed6c05f03495f" translate="yes" xml:space="preserve">
          <source>This list is subject to change at any time, as is the category any given lock may belong to.</source>
          <target state="translated">このリストは、任意のロックが属する可能性のあるカテゴリと同様に、いつでも変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="8667cb466629d5430d9bcf4d289713494e360097" translate="yes" xml:space="preserve">
          <source>This macro can also be used for conditional compilation, but is more typically used to disable testing: If &lt;code&gt;NOTEST&lt;/code&gt; is defined &lt;strong&gt;before&lt;/strong&gt; the EUnit header file is included, and &lt;code&gt;TEST&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; defined, then the code will be compiled with EUnit disabled. See also &lt;code&gt;&lt;a href=&quot;#Disabling_testing&quot;&gt;Disabling testing&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このマクロは条件付きコンパイルにも使用できますが、通常はテストを無効にするために使用されます。EUnitヘッダーファイルが含まれる&lt;strong&gt;前に&lt;/strong&gt; &lt;code&gt;NOTEST&lt;/code&gt; が定義され、 &lt;code&gt;TEST&lt;/code&gt; が定義されて&lt;strong&gt;いない&lt;/strong&gt;場合、コードはEUnitを無効にしてコンパイルされます。 &lt;code&gt;&lt;a href=&quot;#Disabling_testing&quot;&gt;Disabling testing&lt;/a&gt;&lt;/code&gt; も参照してください。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cea55c428a4bdb4cf9d02f848100f0c0c617b095" translate="yes" xml:space="preserve">
          <source>This macro could be used like this in order to share code:</source>
          <target state="translated">このマクロは、コードを共有するためにこのように使うことができます。</target>
        </trans-unit>
        <trans-unit id="5114889d9a6e68c62a0a1992ed05dd66a4ea6679" translate="yes" xml:space="preserve">
          <source>This macro is always defined (to &lt;code&gt;true&lt;/code&gt;, unless previously defined by the user to have another value) whenever EUnit is &lt;strong&gt;disabled&lt;/strong&gt; at compile time. (Compare the &lt;code&gt;TEST&lt;/code&gt; macro.)</source>
          <target state="translated">このマクロは、EUnitがコンパイル時に&lt;strong&gt;無効&lt;/strong&gt;になっている場合は常に（以前にユーザーが別の値を持つように定義していない限り、 &lt;code&gt;true&lt;/code&gt; に）定義されます。（ &lt;code&gt;TEST&lt;/code&gt; マクロを比較してください。）&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="ace903cd27c28d656c86413693b1c2b7cebb1c45" translate="yes" xml:space="preserve">
          <source>This macro is always defined (to &lt;code&gt;true&lt;/code&gt;, unless previously defined by the user to have another value) whenever EUnit is enabled at compile time. This can be used to place testing code within conditional compilation; see also the macros &lt;code&gt;NOTEST&lt;/code&gt; and &lt;code&gt;EUNIT&lt;/code&gt;.</source>
          <target state="translated">このマクロは、EUnitがコンパイル時に有効になるたびに（ユーザーが別の値を持つように以前に定義した場合を除き、 &lt;code&gt;true&lt;/code&gt; に）常に定義されます。これは、条件付きコンパイル内にテストコードを配置するために使用できます。マクロ &lt;code&gt;NOTEST&lt;/code&gt; および &lt;code&gt;EUNIT&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="ce0e6792b17f6782871d2727d10c5675a63bdafd" translate="yes" xml:space="preserve">
          <source>This macro is always defined to &lt;code&gt;true&lt;/code&gt; whenever EUnit is enabled at compile time. This is typically used to place testing code within conditional compilation, as in:</source>
          <target state="translated">このマクロは、コンパイル時にEUnitが有効になると常に &lt;code&gt;true&lt;/code&gt; に定義されます。これは通常、次のように、テストコードを条件付きコンパイル内に配置するために使用されます。</target>
        </trans-unit>
        <trans-unit id="f9a17853871676c0efbbea7592f31b8e2c70ba24" translate="yes" xml:space="preserve">
          <source>This macro is useful in the setup and cleanup sections of fixtures, e.g., for creating and deleting files or perform similar operating system specific tasks, to make sure that the test system is informed of any failures.</source>
          <target state="translated">このマクロは、フィクスチャのセットアップやクリーンアップのセクションで、例えば、ファイルの作成や削除、あるいは同様のオペレーティング・システム特有のタスクを実行して、テストシステムに障害が発生したことを確実に知らせるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="3e065ddbb311347232c6065a89455d54a53e02c6" translate="yes" xml:space="preserve">
          <source>This makes it possible to extend the protocol with optional requests and for the clients to be somewhat backward compatible.</source>
          <target state="translated">これにより、オプションのリクエストでプロトコルを拡張することが可能になり、クライアントは多少後方互換性を持つようになります。</target>
        </trans-unit>
        <trans-unit id="f4d660f58a84c58c9d56e335532b3deb651bfa98" translate="yes" xml:space="preserve">
          <source>This makes the &lt;code&gt;gen_statem&lt;/code&gt; call callback function &lt;code&gt;terminate/3&lt;/code&gt; just like for a supervised server and waits for the process to terminate.</source>
          <target state="translated">これにより、監視対象サーバーと同じように &lt;code&gt;gen_statem&lt;/code&gt; コールコールバック関数が &lt;code&gt;terminate/3&lt;/code&gt; になり、プロセスが終了するまで待機します。</target>
        </trans-unit>
        <trans-unit id="d7f81c6c5bf6cf515d1e9f111e538332017866ee" translate="yes" xml:space="preserve">
          <source>This makes the fragment independent of the parentheses in the larger pattern.</source>
          <target state="translated">これにより、フラグメントは大きなパターンの括弧から独立したものになります。</target>
        </trans-unit>
        <trans-unit id="49587f7146156380abd9cd71341e113bb523de56" translate="yes" xml:space="preserve">
          <source>This manual describes the &lt;code&gt;Event Tracer (ET)&lt;/code&gt; application, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang / Open Telecom Platform開発環境のコンポーネントとして、 &lt;code&gt;Event Tracer (ET)&lt;/code&gt; アプリケーションについて説明します。読者は、別のユーザーズガイドで説明されているErlang開発環境に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="f54f98ecb63f059bc0f3f16893d00b0178de2ead" translate="yes" xml:space="preserve">
          <source>This manual describes the Megaco application, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang/Open Telecom Platform開発環境のコンポーネントとしてMegacoアプリケーションについて説明します。読者は、別のユーザーズガイドで説明されているErlang開発環境に精通していることが前提となっています。</target>
        </trans-unit>
        <trans-unit id="3565b9c0bcf6e9edf6874ed477820b3f0f6afff4" translate="yes" xml:space="preserve">
          <source>This manual describes the Reltool application, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang/Open Telecom Platform開発環境のコンポーネントとしてのReltoolアプリケーションについて説明しています。読者は別のユーザーズガイドで説明されているErlang開発環境に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="15184424397c18e9f422c74e5e74ac83b7f03ff2" translate="yes" xml:space="preserve">
          <source>This manual describes the SNMP development tool, as a component of the Erlang/Open Telecom Platform development environment. It is assumed that the reader is familiar with the Erlang Development Environment, which is described in a separate User's Guide.</source>
          <target state="translated">このマニュアルでは、Erlang/Open Telecom Platform開発環境のコンポーネントとしてSNMP開発ツールについて説明します。読者は別のユーザーズガイドで説明されているErlang開発環境に精通していることを前提としています。</target>
        </trans-unit>
        <trans-unit id="193220694d15266d7cc69378ef8f2e63c4cd4f53" translate="yes" xml:space="preserve">
          <source>This match specification can be specified as the last argument to &lt;code&gt;tp&lt;/code&gt; or &lt;code&gt;tpl&lt;/code&gt;. The activated &lt;code&gt;Item&lt;/code&gt; then becomes a &lt;strong&gt;trigger&lt;/strong&gt; for sequential tracing. This means that if the item is called on a process with trace flag &lt;code&gt;call&lt;/code&gt; set, the process is &quot;contaminated&quot; with token &lt;code&gt;seq_trace&lt;/code&gt;.</source>
          <target state="translated">この一致指定は、 &lt;code&gt;tp&lt;/code&gt; または &lt;code&gt;tpl&lt;/code&gt; の最後の引数として指定できます。次に、アクティブ化された &lt;code&gt;Item&lt;/code&gt; が順次トレースの&lt;strong&gt;トリガー&lt;/strong&gt;になります。これは、トレースフラグ &lt;code&gt;call&lt;/code&gt; 設定されているプロセスでアイテムが呼び出された場合、プロセスはトークン &lt;code&gt;seq_trace&lt;/code&gt; で「汚染」されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="b5770f3057dc3732a2c219c409191a4bcf36e051" translate="yes" xml:space="preserve">
          <source>This matches &quot;xxaab&quot; but not &quot;aacaab&quot;. It can be thought of as a kind of dynamic anchor, or &quot;I've started, so I must finish&quot;. The name of the most recently passed (*MARK) in the path is passed back when (*COMMIT) forces a match failure.</source>
          <target state="translated">これは「xxaab」と一致しますが、「aacaab」とは一致しません。これは一種の動的なアンカーというか、「始めたから終わりにしなければならない」と考えることができます。(*COMMIT)が強制的にマッチ失敗したときに、パスの中で最も最近渡された(*MARK)の名前が引き渡されます。</target>
        </trans-unit>
        <trans-unit id="5a54f8d6fa87944f3859d8aacba8377d13f4ab03" translate="yes" xml:space="preserve">
          <source>This matches all characters that have the Unicode P (punctuation) property, plus those characters whose code points are less than 128 that have the S (Symbol) property.</source>
          <target state="translated">これは、Unicode P (句読点)プロパティを持つすべての文字と、コードポイントが 128 未満で S (記号)プロパティを持つ文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="4060f37dc8e959716bd75592eaf33dbbe9422b23" translate="yes" xml:space="preserve">
          <source>This matches characters that have glyphs that mark the page when printed. In Unicode property terms, it matches all characters with the L, M, N, P, S, or Cf properties, except for:</source>
          <target state="translated">これは、 印刷時にページをマークするグリフを持つキ ャ ラ ク タ にマッチします。Unicode プ ロ パテ ィ の用語では、 L ・ M ・ N ・ P ・ S ・ Cf プ ロ パテ ィ を持つすべてのキ ャ ラ ク タ に対 し て、 それ以外のキ ャ ラ ク タ に対 し て マ ッ チ し ます。</target>
        </trans-unit>
        <trans-unit id="80aa7005a5a9b662614697fc0718ba90f2d5eb3f" translate="yes" xml:space="preserve">
          <source>This matches the same characters as [:graph:] plus space characters that are not controls, that is, characters with the Zs property.</source>
          <target state="translated">これは、[:graph:]と同じ文字に加えて、コントロールではないスペース文字、つまりZsプロパティを持つ文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="596241cc1fad7ba2b8c15f7e59f64a7ddc1befdd" translate="yes" xml:space="preserve">
          <source>This means that if there is more than one way to locate a group (and its test cases) in a path, the result of the group search operation is a number of tests, all of which are to be performed. &lt;code&gt;Common Test&lt;/code&gt; interprets a group specification that consists of a single name as follows:</source>
          <target state="translated">つまり、パス内でグループ（およびそのテストケース）を見つける方法が複数ある場合、グループ検索操作の結果はいくつかのテストとなり、そのすべてが実行されます。 &lt;code&gt;Common Test&lt;/code&gt; は、単一の名前で構成されるグループ仕様を次のように解釈します。</target>
        </trans-unit>
        <trans-unit id="22a98636e075cad89494908c0027932db4587e6e" translate="yes" xml:space="preserve">
          <source>This means that no bit higher than 31 can be set.</source>
          <target state="translated">つまり、31よりも上位のビットは設定できません。</target>
        </trans-unit>
        <trans-unit id="df996ca43fed811b9266d44d0025a342f366a979" translate="yes" xml:space="preserve">
          <source>This means that parameter values set in the other system configuration files and values set using &lt;code&gt;application:set_env/3&lt;/code&gt; are disregarded.</source>
          <target state="translated">つまり、他のシステム構成ファイルで設定されたパラメーター値と &lt;code&gt;application:set_env/3&lt;/code&gt; を使用して設定された値は無視されます。</target>
        </trans-unit>
        <trans-unit id="8f13bbc91d440e811da4676f3e7ca92ea54d9f50" translate="yes" xml:space="preserve">
          <source>This means that runaway regular expression matches can fail faster if the limit is lowered using this option. The default value 10,000,000 is compiled into the Erlang VM.</source>
          <target state="translated">つまり、このオプションを使って制限値を下げれば、正規表現のマッチの暴走がより速く失敗することができます。デフォルト値10,000,000はErlang VMにコンパイルされています。</target>
        </trans-unit>
        <trans-unit id="932d8129dcaf5494e901e2360eca271fe2d0ad88" translate="yes" xml:space="preserve">
          <source>This means that specifying another &lt;code&gt;.config&lt;/code&gt; file, or more &lt;code&gt;.config&lt;/code&gt; files, leads to inconsistent update of application configurations. There is, however, a syntax for &lt;code&gt;sys.config&lt;/code&gt; that allows pointing out other &lt;code&gt;.config&lt;/code&gt; files:</source>
          <target state="translated">つまり、別の &lt;code&gt;.config&lt;/code&gt; ファイル、または複数の &lt;code&gt;.config&lt;/code&gt; ファイルを指定すると、アプリケーション構成の更新に一貫性がなくなります。ただし、 &lt;code&gt;sys.config&lt;/code&gt; には他の &lt;code&gt;.config&lt;/code&gt; ファイルを指定できる構文があります。</target>
        </trans-unit>
        <trans-unit id="2200dc5ecc3e0975342e26ce8ac3610348c991da" translate="yes" xml:space="preserve">
          <source>This means that the application is preferably to be started at &lt;code&gt;cp1@cave&lt;/code&gt;. If &lt;code&gt;cp1@cave&lt;/code&gt; is down, the application is to be started at &lt;code&gt;cp2@cave&lt;/code&gt; or &lt;code&gt;cp3@cave&lt;/code&gt;.</source>
          <target state="translated">これは、アプリケーションが &lt;code&gt;cp1@cave&lt;/code&gt; 開始されることが望ましいことを意味します。場合 &lt;code&gt;cp1@cave&lt;/code&gt; ダウンして、アプリケーションがで開始する &lt;code&gt;cp2@cave&lt;/code&gt; や &lt;code&gt;cp3@cave&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="106bb3bedaf49597cebe6d920a66bd4eef59b102" translate="yes" xml:space="preserve">
          <source>This means that the context (an opaque type) returned from streaming crypto functions (&lt;code&gt;hash_(init|update|final)&lt;/code&gt;, &lt;code&gt;hmac_(init|update|final)&lt;/code&gt; and &lt;code&gt;stream_(init|encrypt|decrypt)&lt;/code&gt;) is different and incompatible with regular builds when compiling crypto with FIPS support.</source>
          <target state="translated">これは、ストリーミング暗号化関数（ &lt;code&gt;hash_(init|update|final)&lt;/code&gt; 、 &lt;code&gt;hmac_(init|update|final)&lt;/code&gt; 、および &lt;code&gt;stream_(init|encrypt|decrypt)&lt;/code&gt; ）から返されるコンテキスト（不透明なタイプ）が異なり、通常のビルドと互換性がないことを意味しますFIPSサポートを使用して暗号をコンパイルする場合。</target>
        </trans-unit>
        <trans-unit id="36077c72e710c444ae2797c20c5e8799b4acfa03" translate="yes" xml:space="preserve">
          <source>This means that the match specification is always a list of one or more tuples (of arity 3). The first element of the tuple is to be a pattern as described in &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt;. The second element of the tuple is to be a list of 0 or more guard tests (described below). The third element of the tuple is to be a list containing a description of the value to return. In almost all normal cases, the list contains exactly one term that fully describes the value to return for each object.</source>
          <target state="translated">これは、一致指定が常に1つ以上のタプル（アリティ3）のリストであることを意味します。タプルの最初の要素は、 &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt; で説明されているパターンになります。タプルの2番目の要素は、0以上のガードテスト（以下で説明）のリストです。タプルの3番目の要素は、返す値の説明を含むリストです。ほとんどすべての通常の場合、リストには、各オブジェクトについて返す値を完全に説明する1つの用語が含まれています。</target>
        </trans-unit>
        <trans-unit id="f7aa9f1a915ce26bfe5ca3abc7eefe46479cfe4b" translate="yes" xml:space="preserve">
          <source>This means that when running, an included application is in fact part of the primary application, and a process in an included application considers itself belonging to the primary application.</source>
          <target state="translated">これは、実行時には、インクルードされたアプリケーションは実際にはプライマリアプリケーションの一部であり、インクルードされたアプリケーションのプロセスは、それ自身がプライマリアプリケーションに属していると考えていることを意味します。</target>
        </trans-unit>
        <trans-unit id="8c76b8edc5c31749772c3e7c79034a31599a007d" translate="yes" xml:space="preserve">
          <source>This mechanism causes the new versions of the emulator and core applications to run with the old version of other applications during startup. Thus, take extra care to avoid incompatibility. Incompatible changes in the core applications can in some situations be necessary. If possible, such changes are preceded by deprecation over two major releases before the actual change. To ensure the application is not crashed by an incompatible change, always remove any call to deprecated functions as soon as possible.</source>
          <target state="translated">この仕組みにより、エミュレータやコアアプリケーションの新バージョンが起動時に他のアプリケーションの旧バージョンと一緒に実行されてしまいます。したがって、非互換性を避けるために十分な注意を払ってください。状況によっては、コアアプリケーションの互換性のない変更が必要になることがあります。可能であれば、そのような変更は、実際の変更の前に2つのメジャーリリースにわたって非推奨となります。互換性のない変更によってアプリケーションがクラッシュしないようにするために、非推奨の関数への呼び出しは常に可能な限り早く削除してください。</target>
        </trans-unit>
        <trans-unit id="a72670e4d484ccee65dddc81403839166360c723" translate="yes" xml:space="preserve">
          <source>This mechanism is available with stateful session tickets. Session tickets can only be used once, subsequent use of the same ticket results in a full handshake. Stateful servers enforce this rule by maintaining a database of outstanding valid tickets.</source>
          <target state="translated">このメカニズムはステートフルなセッションチケットで利用できます。セッションチケットは一度しか使用できません。同じチケットの後続の使用は完全なハンドシェイクになります。ステートフルサーバは、未解決の有効なチケットのデータベースを維持することで、このルールを強制します。</target>
        </trans-unit>
        <trans-unit id="afb636d25dca103bb579d81c3c480e31e05614f3" translate="yes" xml:space="preserve">
          <source>This mechanism is available with stateless session tickets. The server records a unique value derived from the ClientHello (PSK binder) in a given time window. The ticket's age is verified by using both the &quot;obsfuscated_ticket_age&quot; and an additional timestamp encrypted in the ticket data. As the used datastore allows false positives, apparent replays will be answered by doing a full 1-RTT handshake.</source>
          <target state="translated">このメカニズムはステートレスセッションチケットで利用可能です。サーバーは、ClientHello (PSK バインダー)から派生した一意の値を、指定されたタイムウィンドウに記録します。チケットの年齢は、&quot;obsfuscated_ticket_age &quot;とチケットデータに暗号化された追加のタイムスタンプの両方を使用して検証されます。使用されているデータストアでは偽陽性が認められているため、見かけ上のリプレイは完全な1-RTTハンドシェイクを行うことで回答されます。</target>
        </trans-unit>
        <trans-unit id="bc8bf1c9c18b4055ffc901b397bc2abd52dda424" translate="yes" xml:space="preserve">
          <source>This mechanism is available with the stateless session tickets. As the ticket data has an embedded timestamp, the server can determine if a ClientHello was sent reasonably recently and accept the 0-RTT handshake, otherwise if falls back to a full 1-RTT handshake. This mechanism is tightly coupled with the previous one, it prevents storing an unlimited number of ClientHellos.</source>
          <target state="translated">このメカニズムはステートレスなセッションチケットで利用できます。チケットデータにはタイムスタンプが埋め込まれているので、サーバは最近 ClientHello が送信されたかどうかを判断して 0-RTT ハンドシェイクを受け入れ、そうでない場合は 1-RTT ハンドシェイクに戻ります。このメカニズムは前のメカニズムと密接に結合しており、無制限の数の ClientHellos を保存することを防ぎます。</target>
        </trans-unit>
        <trans-unit id="e3157f67a5eef33bc0f27dfb7ed55e0358006331" translate="yes" xml:space="preserve">
          <source>This message appears if &lt;code&gt;{ok, pending_driver}&lt;/code&gt; was returned from &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; for the last &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver, and then &lt;code&gt;{ok, already_loaded}&lt;/code&gt; is returned from a call to &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは表示された場合 &lt;code&gt;{ok, pending_driver}&lt;/code&gt; から返された &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; 最後のために &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; ドライバの、その後 &lt;code&gt;{ok, already_loaded}&lt;/code&gt; への呼び出しから返され &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7443815abce9a78b8f12e9b4a8006f7ab0678558" translate="yes" xml:space="preserve">
          <source>This message arrives if reloading was underway but the loading for some reason failed. The &lt;code&gt;Failure&lt;/code&gt; term is one of the errors that can be returned from &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt;. The error term can be passed to &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; for translation into human readable form. Notice that the translation must be done in the same running Erlang virtual machine as the error was detected in.</source>
          <target state="translated">このメッセージは、リロードが進行中であるが何らかの理由でロードが失敗した場合に表示されます。 &lt;code&gt;Failure&lt;/code&gt; 用語から返されるエラーの一つである &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; 。エラー項は、人間が読める形式に変換するために &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; に渡すことができます。エラーが検出されたのと同じ実行中のErlang仮想マシンで変換を行う必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1fd84b520be9e9ea3d84c401734e82ebe7eac97d" translate="yes" xml:space="preserve">
          <source>This message arrives if reloading was underway, but the requesting &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; cancelled it by dying or calling &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;unload/1&lt;/code&gt;/&lt;code&gt;unload_driver/1&lt;/code&gt;) again before it was reloaded.</source>
          <target state="translated">このメッセージは、再ロードが進行中の場合に到着し &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が、要求元のユーザーは、再ロードする前に、再 &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; か、try_unload / 2（または &lt;code&gt;unload/1&lt;/code&gt; / &lt;code&gt;unload_driver/1&lt;/code&gt; ）を呼び出してキャンセルしました。</target>
        </trans-unit>
        <trans-unit id="f4a65175ce43b7599632ccc7699bb308e42c19d5" translate="yes" xml:space="preserve">
          <source>This message format unfortunately differs slightly from the &lt;code&gt;&lt;a href=&quot;gen_udp#open-1&quot;&gt;gen_udp&lt;/a&gt;&lt;/code&gt; message format with ancillary data, and from the &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/1,2&lt;/a&gt;&lt;/code&gt; return tuple format.</source>
          <target state="translated">残念ながら、このメッセージ形式は、補助データを含む &lt;code&gt;&lt;a href=&quot;gen_udp#open-1&quot;&gt;gen_udp&lt;/a&gt;&lt;/code&gt; メッセージ形式、および &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/1,2&lt;/a&gt;&lt;/code&gt; リターンタプル形式とはわずかに異なります。</target>
        </trans-unit>
        <trans-unit id="b2fc14d584e2b14f026925a19521a06f0dcdade4" translate="yes" xml:space="preserve">
          <source>This message indicates that the (asynchronous) operation has been aborted. If, for instance, the socket has been closed (by another process), &lt;code&gt;Info&lt;/code&gt; will be &lt;code&gt;{SelectRef, closed}&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、（非同期）操作が中止されたことを示します。たとえば、ソケットが（別のプロセスによって）閉じられている場合、 &lt;code&gt;Info&lt;/code&gt; は &lt;code&gt;{SelectRef, closed}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="d6bd04f8e274c08cef04fc4e45d10c02182267ab" translate="yes" xml:space="preserve">
          <source>This message is only sent to a transport process over whose &lt;code&gt;Inband-Security-Id&lt;/code&gt; configuration has indicated support for TLS.</source>
          <target state="translated">このメッセージは、 &lt;code&gt;Inband-Security-Id&lt;/code&gt; 構成でTLSのサポートが示されているトランスポートプロセスにのみ送信されます。</target>
        </trans-unit>
        <trans-unit id="c9fe7d956f6a48c7301aa47c203d863f991af167" translate="yes" xml:space="preserve">
          <source>This message is sent either immediately if the driver is already loaded and no reloading is pending, or when reloading is executed if reloading is pending.</source>
          <target state="translated">このメッセージは、ドライバが既にロードされていてリロードが保留されていない場合は直ちに送信され、リロードが保留されている場合はリロードが実行されたときに送信されます。</target>
        </trans-unit>
        <trans-unit id="b59c3f75f12fd3dcb8bfccc7fe935cad829ca36a" translate="yes" xml:space="preserve">
          <source>This message is sent from a master agent if it for some reason decided to discard the pdu.</source>
          <target state="translated">このメッセージは、何らかの理由でマスターエージェントが pdu を破棄することを決定した場合に、マスターエージェントから送信されます。</target>
        </trans-unit>
        <trans-unit id="829114beb9c3f31023ae657dbb8e8d0e25c1f282" translate="yes" xml:space="preserve">
          <source>This message is sent from a master agent when a request is to be sent. The only request an agent can send is Inform-Request. The net if process needs to remember the request id and the Pid, and when a response is received for the request id, send it to Pid, using a &lt;code&gt;snmp_response_received&lt;/code&gt; message.</source>
          <target state="translated">このメッセージは、リクエストが送信されるときにマスターエージェントから送信されます。エージェントが送信できる唯一の要求はInform-Requestです。net ifプロセスは要求IDとPidを記憶する必要があり、要求IDに対する応答を受け取っ &lt;code&gt;snmp_response_received&lt;/code&gt; 、snmp_response_receivedメッセージを使用してそれをPidに送信します。</target>
        </trans-unit>
        <trans-unit id="e5f157b9c3b08af7fd2a99ceb91dfce727fcf26b" translate="yes" xml:space="preserve">
          <source>This message is sent from a master agent when a trap is to be sent.</source>
          <target state="translated">このメッセージは、トラップを送信する際にマスターエージェントから送信されます。</target>
        </trans-unit>
        <trans-unit id="d441c31108c7576d3cbad8491a4c4b23596427f8" translate="yes" xml:space="preserve">
          <source>This message is sent if reloading was expected, but the (old) driver made itself permanent before reloading. It is also sent if the driver was permanent or statically linked-in when trying to create the monitor.</source>
          <target state="translated">このメッセージは、リロードが期待されていたが、(古い)ドライバがリロード前に自分自身をパーマネントにした場合に送信されます。また、モニタを作成しようとしたときにドライバがパーマネントであった場合、または静的にリンクされていた場合にも送信されます。</target>
        </trans-unit>
        <trans-unit id="2a9a7c62be17cb4236568289a04568a0ca14d646" translate="yes" xml:space="preserve">
          <source>This message is sent if unloading was expected, but the driver made itself permanent before unloading. It is also sent if trying to monitor a permanent or statically linked-in driver.</source>
          <target state="translated">このメッセージは、アンロードが期待されていたが、アンロードの前にドライバが自分自身をパーマネントにした場合に送信される。また、パーマネントまたは静的にリンクされたドライバを監視しようとしている場合にも送信される。</target>
        </trans-unit>
        <trans-unit id="55cf023d178c69ab93cb5f5b6795668204cbf186" translate="yes" xml:space="preserve">
          <source>This message is sent if unloading was expected, but while the driver was waiting for all ports to get closed, a new &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of the driver appeared, and the unloading was cancelled.</source>
          <target state="translated">このメッセージは、アンロードが予想される場合に送信されますが、ドライバーがすべてのポートが閉じられるのを待っている間に、ドライバーの新しい &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が表示され、アンロードがキャンセルされました。</target>
        </trans-unit>
        <trans-unit id="dedc90e7f76a59946b54f6f05a80249175f6e9ab" translate="yes" xml:space="preserve">
          <source>This message is sent to the Net If process by a process that has been configured to perfor &quot;active supervision&quot; of the Net If process. The Net If process should respond immediately with a &lt;code&gt;&lt;a href=&quot;#om_pong&quot;&gt;pong&lt;/a&gt;&lt;/code&gt; message.</source>
          <target state="translated">このメッセージは、NetIfプロセスの「アクティブな監視」を実行するように構成されたプロセスによってNetIfプロセスに送信されます。Net Ifプロセスは、 &lt;code&gt;&lt;a href=&quot;#om_pong&quot;&gt;pong&lt;/a&gt;&lt;/code&gt; メッセージですぐに応答する必要があります。</target>
        </trans-unit>
        <trans-unit id="f4e7b699a7ae096287dd7808194507f6d50b3e91" translate="yes" xml:space="preserve">
          <source>This message is sent to the Net if process from a master agent as a response to a previously received request.</source>
          <target state="translated">このメッセージは、以前に受信したリクエストに対する応答として、マスターエージェントからネットイフプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="9a28b745a2e2cc7649e2af78230f7339cfe78c45" translate="yes" xml:space="preserve">
          <source>This message is used by the release handler to find which processes that execute a certain module. The process can later be suspended and ordered to perform a code change for one of its modules.</source>
          <target state="translated">このメッセージは、リリースハンドラが特定のモジュールを実行するプロセスを見つけるために使用されます。そのプロセスは後で中断され、そのモジュールの一つのコード変更を実行するように命令されることがあります。</target>
        </trans-unit>
        <trans-unit id="425958047f9810b0d871ee948d2497599b8d63d0" translate="yes" xml:space="preserve">
          <source>This message requests that the server starts execution of the given command. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#exec-4&quot;&gt;ssh_connection:exec/4 &lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、サーバーが指定されたコマンドの実行を開始することを要求します。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#exec-4&quot;&gt;ssh_connection:exec/4 &lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="afd8dba6b75e3f001a723a1efc9d9ff4abf7b225" translate="yes" xml:space="preserve">
          <source>This message requests that the server starts execution of the given command. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#exec-4&quot;&gt;ssh_connection:exec/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、サーバーが指定されたコマンドの実行を開始することを要求します。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#exec-4&quot;&gt;ssh_connection:exec/4&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="e80a2cab18ba8e56bb44cddb1d3f6a9bf9eb9c7d" translate="yes" xml:space="preserve">
          <source>This message requests that the user default shell is started at the other end. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#shell-2&quot;&gt; ssh_connection:shell/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、ユーザーのデフォルトシェルがもう一方の端で開始されることを要求します。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#shell-2&quot;&gt; ssh_connection:shell/2&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="e505234f686d8ab1a451d96190a8bff8adf1ec9a" translate="yes" xml:space="preserve">
          <source>This message requests that the user default shell is started at the other end. This event is sent as a result of calling &lt;code&gt;&lt;a href=&quot;ssh_connection#shell-2&quot;&gt;ssh_connection:shell/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このメッセージは、ユーザーのデフォルトシェルをもう一方の端で起動するように要求します。このイベントは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#shell-2&quot;&gt;ssh_connection:shell/2&lt;/a&gt;&lt;/code&gt; を呼び出した結果として送信されます。</target>
        </trans-unit>
        <trans-unit id="1fc986c5547b793c1d6d354a196fdaa59d4a31d9" translate="yes" xml:space="preserve">
          <source>This mode can also be activated with flag &lt;code&gt;silent&lt;/code&gt; to &lt;code&gt;erlang:trace/3&lt;/code&gt;.</source>
          <target state="translated">このモードは、 &lt;code&gt;erlang:trace/3&lt;/code&gt; に対して &lt;code&gt;silent&lt;/code&gt; フラグを使用してアクティブにすることもできます。</target>
        </trans-unit>
        <trans-unit id="6a11330d6901fd7311c10340dd7bf642645e942b" translate="yes" xml:space="preserve">
          <source>This mode fits well when you have a regular state diagram, like the ones in this chapter, which describes all events and actions belonging to a state visually around that state, and each state has its unique name.</source>
          <target state="translated">このモードは、この章で紹介するような通常の状態図がある場合に適しています。この図は、状態に属するすべてのイベントとアクションをその状態の周りに視覚的に記述し、各状態には固有の名前が付いています。</target>
        </trans-unit>
        <trans-unit id="bb204752ab758821e61472ec417419d5f3d9971e" translate="yes" xml:space="preserve">
          <source>This mode is more or less a backward compatibility mode as from its introduction.</source>
          <target state="translated">このモードは導入時から多かれ少なかれ下位互換モードとなっています。</target>
        </trans-unit>
        <trans-unit id="1fd3b3df65466b11a5eaf44e2aee1317b4d62efd" translate="yes" xml:space="preserve">
          <source>This mode works equally well when you want to focus on one event at the time or on one state at the time, but function &lt;code&gt; Module:handle_event/4 &lt;/code&gt; quickly grows too large to handle without branching to helper functions.</source>
          <target state="translated">このモードは、一度に1つのイベントまたは一度に1つの状態に焦点を合わせたい場合にも同様に機能しますが、関数 &lt;code&gt; Module:handle_event/4 &lt;/code&gt; はすぐに大きくなりすぎて、ヘルパー関数に分岐せずに処理できなくなります。</target>
        </trans-unit>
        <trans-unit id="172f14b940b1b2c6900b1372fa3316ca07a87e44" translate="yes" xml:space="preserve">
          <source>This mode works equally well when you want to focus on one event at the time or on one state at the time, but function &lt;code&gt;Module:handle_event/4&lt;/code&gt; quickly grows too large to handle without branching to helper functions.</source>
          <target state="translated">このモードは、一度に1つのイベントまたは一度に1つの状態に焦点を当てたい場合にも同じように機能しますが、関数 &lt;code&gt;Module:handle_event/4&lt;/code&gt; は急速に大きくなりすぎて、ヘルパー関数に分岐しないと処理できません。</target>
        </trans-unit>
        <trans-unit id="5fdef418c42eba77018e8e42460b63d278950bac" translate="yes" xml:space="preserve">
          <source>This model has only three different tables, and the employee records contain references to other records. The record has the following references:</source>
          <target state="translated">このモデルには3つの異なるテーブルしかなく、従業員レコードには他のレコードへの参照が含まれています。レコードには以下の参照が含まれています。</target>
        </trans-unit>
        <trans-unit id="b3ce72021e00b147c9199fb77c9a3762a844a3df" translate="yes" xml:space="preserve">
          <source>This module also provides facilities for displaying status information about interpreted processes and break points.</source>
          <target state="translated">このモジュールは、解釈されたプロセスやブレークポイントに関するステータス情報を表示するための機能も提供します。</target>
        </trans-unit>
        <trans-unit id="817190ceec75c6fa4d3197e4a1b86534327d94e7" translate="yes" xml:space="preserve">
          <source>This module also supports the following annotations, which are used by various modules:</source>
          <target state="translated">また、このモジュールは以下のようなアノテーションをサポートしており、様々なモジュールで使用されています。</target>
        </trans-unit>
        <trans-unit id="c1519372f968a7c83f80d29c6d04dbd62347e6bd" translate="yes" xml:space="preserve">
          <source>This module archives and extract files to and from a tar file. This module supports reading most common tar formats, namely v7, STAR, USTAR, and PAX, as well as some of GNU tar's extensions to the USTAR format (sparse files most notably). It produces tar archives in USTAR format, unless the files being archived require PAX format due to restrictions in USTAR (such as unicode metadata, filename length, and more). As such, &lt;code&gt;erl_tar&lt;/code&gt; supports tar archives produced by most all modern tar utilities, and produces tarballs which should be similarly portable.</source>
          <target state="translated">このモジュールは、tarファイルとの間でファイルをアーカイブおよび抽出します。このモジュールは、最も一般的なtar形式、つまりv7、STAR、USTAR、およびPAXの読み取りと、USTAR形式に対するGNU tarの拡張機能（特にスパースファイル）の読み取りをサポートしています。アーカイブされるファイルがUSTARの制限（Unicodeメタデータ、ファイル名の長さなど）のためにPAX形式を必要としない限り、それはUSTAR形式でtarアーカイブを生成します。そのため、 &lt;code&gt;erl_tar&lt;/code&gt; は、ほとんどすべての最新のtarユーティリティによって生成されるtarアーカイブをサポートし、同様に移植可能なtarballを生成します。</target>
        </trans-unit>
        <trans-unit id="c93dc94853da5f65dd0f19dd1ea05a3d6a2b52f1" translate="yes" xml:space="preserve">
          <source>This module archives and extracts files to and from a zip archive. The zip format is specified by the &quot;ZIP Appnote.txt&quot; file, available on the PKWARE web site &lt;code&gt;&lt;a href=&quot;http://www.pkware.com&quot;&gt;www.pkware.com&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、zipアーカイブとの間でファイルをアーカイブおよび抽出します。zip形式は、PKWARE Webサイト &lt;code&gt;&lt;a href=&quot;http://www.pkware.com&quot;&gt;www.pkware.com&lt;/a&gt;&lt;/code&gt; から入手できる「ZIP Appnote.txt」ファイルで指定されています。</target>
        </trans-unit>
        <trans-unit id="5ebed77e7881e24d9d50b032e03940e9bdf36b09" translate="yes" xml:space="preserve">
          <source>This module can also be found in the &lt;code&gt;examples&lt;/code&gt; directory of the SASL application.</source>
          <target state="translated">このモジュールは、SASLアプリケーションの &lt;code&gt;examples&lt;/code&gt; ディレクトリにもあります。</target>
        </trans-unit>
        <trans-unit id="1aca0b6e822b7c6d0a2dee5904564049e299817d" translate="yes" xml:space="preserve">
          <source>This module can also be viewed as a behaviour for an application implemented according to the OTP design principles as a supervision tree. The definition of how to start and stop the tree is to be located in an &lt;strong&gt;application callback module&lt;/strong&gt;, exporting a predefined set of functions.</source>
          <target state="translated">このモジュールは、OTP設計原則に従って監視ツリーとして実装されたアプリケーションの動作と見なすこともできます。ツリーを開始および停止する方法の定義は、事前定義された関数のセットをエクスポートする&lt;strong&gt;アプリケーションコールバックモジュール&lt;/strong&gt;にあります。</target>
        </trans-unit>
        <trans-unit id="46fe9ebbf441b09ed18ab05af78ee6b86682c8d6" translate="yes" xml:space="preserve">
          <source>This module can be used as follows:</source>
          <target state="translated">このモジュールは以下のように使用できます。</target>
        </trans-unit>
        <trans-unit id="64bd57a5a7fb8d785ba9c0f9a34dddc82e8e4902" translate="yes" xml:space="preserve">
          <source>This module can be used to render function and type documentation to be printed in a shell. It can only render EEP-48 documentation of the format &lt;code&gt;application/erlang+html&lt;/code&gt;. For more information about this format see &lt;code&gt;Documentation Storage&lt;/code&gt; in Erl_Docgen's User's Guide.</source>
          <target state="translated">このモジュールは、シェルに印刷される関数とタイプのドキュメントをレンダリングするために使用できます。 &lt;code&gt;application/erlang+html&lt;/code&gt; 形式のEEP-48ドキュメントのみをレンダリングできます。この形式の詳細については、 『Erl_Docgen's User's Guide』の「 &lt;code&gt;Documentation Storage&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="686c65b4a65c34ff9cf138f3076e44dd59452f8f" translate="yes" xml:space="preserve">
          <source>This module can be used to run a set of Erlang nodes as a pool of computational processors. It is organized as a master and a set of slave nodes and includes the following features:</source>
          <target state="translated">このモジュールはErlangノードのセットを計算プロセッサのプールとして実行するために使われます。マスターノードとスレーブノードのセットとして構成されており、以下の機能を持っています。</target>
        </trans-unit>
        <trans-unit id="534f04f7c34a17a45122c6b169fa5d57730b66cd" translate="yes" xml:space="preserve">
          <source>This module communicates with the EPMD daemon, see &lt;code&gt;epmd&lt;/code&gt;. To implement your own epmd module please see &lt;code&gt;ERTS User's Guide: How to Implement an Alternative Node Discovery for Erlang Distribution&lt;/code&gt;</source>
          <target state="translated">このモジュールはEPMDデーモンと通信します &lt;code&gt;epmd&lt;/code&gt; 参照してください。独自のepmdモジュールを実装するには、 &lt;code&gt;ERTS User's Guide: How to Implement an Alternative Node Discovery for Erlang Distribution&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="af82f371bff5810258c512bac2aa2370e799470c" translate="yes" xml:space="preserve">
          <source>This module communicates with the EPMD daemon, see &lt;code&gt;epmd&lt;/code&gt;. To implement your own epmd module please see &lt;code&gt;ERTS User's Guide: How to Implement an Alternative Service Discovery for Erlang Distribution&lt;/code&gt;</source>
          <target state="translated">このモジュールはEPMDデーモンと通信します &lt;code&gt;epmd&lt;/code&gt; 参照してください。独自のepmdモジュールを実装するには、 &lt;code&gt;ERTS User's Guide: How to Implement an Alternative Service Discovery for Erlang Distribution&lt;/code&gt; を参照してください：Erlangディストリビューションの代替サービスディスカバリを実装する方法</target>
        </trans-unit>
        <trans-unit id="3b4ce3dec0f26e77853815afd7b3cb63b31d970f" translate="yes" xml:space="preserve">
          <source>This module considers two elements as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、2つの要素が等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）にのみ、2つの要素を異なるものと見なします。</target>
        </trans-unit>
        <trans-unit id="0be9d79105e371fa97debd95b84b58219b4279ea" translate="yes" xml:space="preserve">
          <source>This module considers two keys as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、2つのキーが等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）に限り、2つのキーを異なるものと見なします。</target>
        </trans-unit>
        <trans-unit id="f7838291047ac4d60e0139ec156a7e643ad4faaa" translate="yes" xml:space="preserve">
          <source>This module consists of the following services:</source>
          <target state="translated">このモジュールは以下のサービスで構成されています。</target>
        </trans-unit>
        <trans-unit id="ff598a317fac529d717bd1f848d0ec9eaa2f5e61" translate="yes" xml:space="preserve">
          <source>This module contains functions for converting between different character representations. It converts between ISO Latin-1 characters and Unicode characters, but it can also convert between different Unicode encodings (like UTF-8, UTF-16, and UTF-32).</source>
          <target state="translated">このモジュールは、異なる文字表現間で変換するための関数を含んでいます。ISO Latin-1 文字と Unicode 文字の間で変換しますが、異なる Unicode エンコーディング (UTF-8,UTF-16,UTF-32 など)の間でも変換することができます。</target>
        </trans-unit>
        <trans-unit id="b5b9240d86d995a89ac9eb37eda08d6f1ac2c51e" translate="yes" xml:space="preserve">
          <source>This module contains functions for converting to and from strings (lists of characters). They are used for implementing the functions in the &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt; module. There is no guarantee that the character lists returned from some of the functions are flat, they can be deep lists. Function &lt;code&gt;&lt;a href=&quot;lists#flatten-1&quot;&gt;lists:flatten/1&lt;/a&gt;&lt;/code&gt; can be used for flattening deep lists.</source>
          <target state="translated">このモジュールには、文字列（文字のリスト）との間で変換を行うための関数が含まれています。これらは、 &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt; モジュールの機能を実装するために使用されます。一部の関数から返される文字リストがフラットである保証はなく、ディープリストにすることができます。関数 &lt;code&gt;&lt;a href=&quot;lists#flatten-1&quot;&gt;lists:flatten/1&lt;/a&gt;&lt;/code&gt; は、深いリストをフラット化するために使用できます。</target>
        </trans-unit>
        <trans-unit id="837f779fb53a71d0c4ae19998076438feb1919ac" translate="yes" xml:space="preserve">
          <source>This module contains functions for encoding Erlang terms into a sequence of bytes, and for decoding Erlang terms from a sequence of bytes.</source>
          <target state="translated">このモジュールには、Erlangの項をバイト列にエンコードしたり、バイト列からErlangの項をデコードしたりする関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="de911f7e348fe07047fba5ab0f536e33890e3df9" translate="yes" xml:space="preserve">
          <source>This module contains functions for inserting comments, described by position, indentation and text, as attachments on an abstract syntax tree, at the correct places.</source>
          <target state="translated">このモジュールは、位置、インデント、テキストで記述されたコメントを、抽象構文ツリー上の適切な場所に添付ファイルとして挿入するための関数を含みます。</target>
        </trans-unit>
        <trans-unit id="59032641754c334d2119d69e35fd6099ad62842c" translate="yes" xml:space="preserve">
          <source>This module contains functions for list processing.</source>
          <target state="translated">このモジュールにはリスト処理のための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="81e43c82257cd393c01258396233b38bac085577" translate="yes" xml:space="preserve">
          <source>This module contains functions for manipulating byte-oriented binaries. Although the majority of functions could be provided using bit-syntax, the functions in this library are highly optimized and are expected to either execute faster or consume less memory, or both, than a counterpart written in pure Erlang.</source>
          <target state="translated">このモジュールはバイト指向のバイナリを操作するための関数を含んでいます。ほとんどの関数はビットシンタックスを使って提供することができますが、このライブラリの関数は高度に最適化されており、純粋なErlangで書かれたものよりも高速に実行されるか、メモリ消費量が少なくなるか、あるいはその両方が期待されています。</target>
        </trans-unit>
        <trans-unit id="50ccc7ec1143773aaedcc8657aa657008607be3a" translate="yes" xml:space="preserve">
          <source>This module contains functions for maps processing.</source>
          <target state="translated">このモジュールには、マップ処理のための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="50f0b83fe2516bf67a941d2bd6474f61aeee90ee" translate="yes" xml:space="preserve">
          <source>This module contains functions for parsing and handling URIs (&lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;) and form-urlencoded query strings (&lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">このモジュールには、URIを解析および処理するための関数（ &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; ）およびフォームURLエンコードされたクエリ文字列（ &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt; ）が含まれています。</target>
        </trans-unit>
        <trans-unit id="ca7843662571b136297297d4631b70479e539fd0" translate="yes" xml:space="preserve">
          <source>This module contains functions for sending system messages used by programs, and messages used for debugging purposes.</source>
          <target state="translated">プログラムが使用するシステムメッセージや、デバッグ用のメッセージを送信するための関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="49fe7206d616c14253dcbc198d4a64077934564a" translate="yes" xml:space="preserve">
          <source>This module contains functions for sorting terms on files, merging already sorted files, and checking files for sortedness. Chunks containing binary terms are read from a sequence of files, sorted internally in memory and written on temporary files, which are merged producing one sorted file as output. Merging is provided as an optimization; it is faster when the files are already sorted, but it always works to sort instead of merge.</source>
          <target state="translated">このモジュールには、ファイル上の用語のソート、既にソートされたファイルのマージ、ソートされているかどうかのチェックを行う関数が含まれています。バイナリ用語を含むチャンクは、一連のファイルから読み込まれ、メモリ内で内部的にソートされ、一時ファイルに書き込まれ、それらがマージされてソートされたファイルが出力されます。マージは最適化として提供されています。ファイルが既にソートされている場合はより高速になりますが、マージではなくソートするように常に動作します。</target>
        </trans-unit>
        <trans-unit id="5326d602d1276804a6e5daef142fc199cc00ce06" translate="yes" xml:space="preserve">
          <source>This module contains functions for tokenizing (scanning) characters into Erlang tokens.</source>
          <target state="translated">このモジュールは文字をErlangトークンにトークン化(スキャン)する関数を含んでいます。</target>
        </trans-unit>
        <trans-unit id="994f1f991d1dfea12bae127e267a7c21607503f3" translate="yes" xml:space="preserve">
          <source>This module contains functions to generate boot scripts (&lt;code&gt;.boot&lt;/code&gt;, &lt;code&gt;.script&lt;/code&gt;), a release upgrade file (&lt;code&gt;relup&lt;/code&gt;), and release packages.</source>
          <target state="translated">このモジュールには、ブートスクリプト（ &lt;code&gt;.boot&lt;/code&gt; 、 &lt;code&gt;.script&lt;/code&gt; ）、リリースアップグレードファイル（ &lt;code&gt;relup&lt;/code&gt; ）、およびリリースパッケージを生成する関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="cfb41f0bba62101238346d92d97629a2935e3299" translate="yes" xml:space="preserve">
          <source>This module contains interface functions for the SSL/TLS/DTLS protocol. For detailed information about the supported standards see &lt;code&gt;ssl(6)&lt;/code&gt;.</source>
          <target state="translated">このモジュールには、SSL / TLS / DTLSプロトコルのインターフェース関数が含まれています。サポートされている標準の詳細については、 &lt;code&gt;ssl(6)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6e018edcfc853c04e93bf82d4c3548bfbe011ff7" translate="yes" xml:space="preserve">
          <source>This module contains interface functions for the TLS/DTLS protocol. For detailed information about the supported standards see &lt;code&gt;ssl(6)&lt;/code&gt;.</source>
          <target state="translated">このモジュールには、TLS / DTLSプロトコルのインターフェース機能が含まれています。サポートされている標準の詳細については、 &lt;code&gt;ssl(6)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cb4c286324503fe5462bf11f1a2d003718ad9829" translate="yes" xml:space="preserve">
          <source>This module contains regular expression matching functions for strings and binaries.</source>
          <target state="translated">このモジュールには、文字列とバイナリの正規表現マッチング関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="ef53274b9322e757bb4063af4f3183c6e84d40a8" translate="yes" xml:space="preserve">
          <source>This module contains services similar to Remote Procedure Calls. It also contains broadcast facilities and parallel evaluators. A remote procedure call is a method to call a function on a remote node and collect the answer. It is used for collecting information on a remote node, or for running a function with some specific side effects on the remote node.</source>
          <target state="translated">このモジュールには、リモート・プロシージャ・コールに似たサービスが含まれています。また、ブロードキャスト機能や並列評価器も含まれています。リモートプロシージャコールは、リモートノード上の関数を呼び出してその答えを収集するメソッドです。これは、リモート・ノードの情報を収集したり、リモート・ノード上で特定の副作用を持つ関数を実行したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="d58b9a536ce590d194f2de76046ad6eb75d92d75" translate="yes" xml:space="preserve">
          <source>This module contains some error printing routines taken from &quot;Advanced Programming in the UNIX Environment&quot; by W. Richard Stevens.</source>
          <target state="translated">このモジュールには、W.Richard Stevens の「Advanced Programming in UNIX Environment」から抜粋したエラー印刷ルーチンが含まれています。</target>
        </trans-unit>
        <trans-unit id="d4648e09f07ca512b563c45755d232665770d52a" translate="yes" xml:space="preserve">
          <source>This module contains the interface to the Erlang &lt;strong&gt;code server&lt;/strong&gt;, which deals with the loading of compiled code into a running Erlang runtime system.</source>
          <target state="translated">このモジュールには、実行中のErlangランタイムシステムへのコンパイル済みコードの読み込みを処理するErlang &lt;strong&gt;コードサーバー&lt;/strong&gt;へのインターフェイスが含まれています。</target>
        </trans-unit>
        <trans-unit id="f512252f459f62899c4ec02d14e4f592e80d6fd9" translate="yes" xml:space="preserve">
          <source>This module contains the public interface to the TPKT (TCP/IP) version transport protocol for Megaco/H.248.</source>
          <target state="translated">このモジュールには、Megaco/H.248 用の TPKT (TCP/IP)バージョントランスポートプロトコルへのパブリックインタフェースが含まれています。</target>
        </trans-unit>
        <trans-unit id="e64245c6a67eefbaeb52b73410ca5898d27decb3" translate="yes" xml:space="preserve">
          <source>This module contains the public interface to the UDP/IP version transport protocol for Megaco/H.248.</source>
          <target state="translated">このモジュールには、Megaco/H.248用のUDP/IPバージョン・トランスポート・プロトコルへのパブリック・インタフェースが含まれています。</target>
        </trans-unit>
        <trans-unit id="b0c49b48d28a03a73e07c75bceac59af417062b9" translate="yes" xml:space="preserve">
          <source>This module contains the public interface to the flex scanner linked in driver. The flex scanner performs the scanning phase of text message decoding.</source>
          <target state="translated">このモジュールには、ドライバにリンクされたフレックス・スキャナへのパブリック・インターフェイスが含まれています。フレックス・スキャナはテキスト・メッセージのデコードのスキャン・フェーズを実行します。</target>
        </trans-unit>
        <trans-unit id="028411a6308d39aee0db1a739a433763a7fa1e96" translate="yes" xml:space="preserve">
          <source>This module contains two routines: one general function for creating Erlang terms and one for pattern matching Erlang terms.</source>
          <target state="translated">このモジュールには2つのルーチンが含まれています:1つはErlang用語を作成するための一般的な関数で、もう1つはErlang用語をパターンマッチングするためのものです。</target>
        </trans-unit>
        <trans-unit id="43a0c1ee918b2bf11b8612b0b536425a9de08920" translate="yes" xml:space="preserve">
          <source>This module contains utilities on a higher level than the &lt;code&gt;file&lt;/code&gt; module.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;file&lt;/code&gt; モジュールよりも高いレベルのユーティリティが含まれています。</target>
        </trans-unit>
        <trans-unit id="573d1a53ea7dfdc3e3251968a013dc54e7ff9915" translate="yes" xml:space="preserve">
          <source>This module contains utility functions for easier measurement and calculation of scheduler utilization, otherwise obtained from calling the more primitive &lt;code&gt; statistics(scheduler_wall_time)&lt;/code&gt;.</source>
          <target state="translated">このモジュールには、スケジューラー使用率の測定と計算を容易にするユーティリティ関数が含まれています。それ以外の場合は、よりプリミティブな &lt;code&gt; statistics(scheduler_wall_time)&lt;/code&gt; 呼び出すことで取得されます。</target>
        </trans-unit>
        <trans-unit id="75ca3e4fb9bfa2cb08015503e443bec03d7d012f" translate="yes" xml:space="preserve">
          <source>This module contains utility functions for easier measurement and calculation of scheduler utilization, otherwise obtained from calling the more primitive &lt;code&gt;statistics(scheduler_wall_time)&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、そうでない場合は、より原始的な呼び出しから取得したスケジューラの利用をより簡単に測定や計算のためのユーティリティ関数、含まれている &lt;code&gt;statistics(scheduler_wall_time)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8466a816803c9602c9c5da297825fe2d8738a12f" translate="yes" xml:space="preserve">
          <source>This module contains utility functions for working with the abstract data type defined in the module &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールには、モジュール &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; で定義された抽象データ型を操作するためのユーティリティ関数が含まれています。</target>
        </trans-unit>
        <trans-unit id="6db7bd57b934dc58f231a5b9efdb7c6ce8fb29e8" translate="yes" xml:space="preserve">
          <source>This module contains various network utility functions.</source>
          <target state="translated">このモジュールには、さまざまなネットワーク・ユーティリティ機能が含まれています。</target>
        </trans-unit>
        <trans-unit id="0d60840cdb8394c4bebe2baf925c2e4db6023faa" translate="yes" xml:space="preserve">
          <source>This module controls that the conditions in the requests are fulfilled. For example, a request can specify that the answer only is of interest if the content is unchanged since the last retrieval. If the content is changed, the range request is to be converted to a request for the whole file instead.</source>
          <target state="translated">このモジュールはリクエストの条件が満たされるように制御します。例えば、リクエストは、最後の検索から内容が変更されていない場合にのみ興味のある答えであることを指定することができます。内容が変更された場合、範囲リクエストは代わりにファイル全体に対するリクエストに変換されます。</target>
        </trans-unit>
        <trans-unit id="fe422acfcd694c2630daf21b44a7f9f2a2d5de80" translate="yes" xml:space="preserve">
          <source>This module deals with the composition and decomposition of &lt;strong&gt;syntactic&lt;/strong&gt; entities (as opposed to semantic ones); its purpose is to hide all direct references to the data structures used to represent these entities. With few exceptions, the functions in this module perform no semantic interpretation of their inputs, and in general, the user is assumed to pass type-correct arguments - if this is not done, the effects are not defined.</source>
          <target state="translated">このモジュールでは、&lt;strong&gt;構文上の&lt;/strong&gt;エンティティ（構成&lt;strong&gt;上の&lt;/strong&gt;エンティティとは対照的）の構成と分解を扱います。その目的は、これらのエンティティを表すために使用されるデータ構造への直接参照をすべて隠すことです。いくつかの例外を除いて、このモジュールの関数は入力のセマンティック解釈を実行せず、一般に、ユーザーは型が正しい引数を渡すと想定されます-これが行われない場合、効果は定義されません。</target>
        </trans-unit>
        <trans-unit id="cfa2f96a0a3bfeb4a366115418ce75043dff5047" translate="yes" xml:space="preserve">
          <source>This module defines Erlang BIFs, guard tests, and operators. This module is only of interest to programmers who manipulate Erlang code.</source>
          <target state="translated">このモジュールはErlangのBIF、ガードテスト、演算子を定義しています。このモジュールはErlangのコードを操作するプログラマーだけが興味を持つモジュールです。</target>
        </trans-unit>
        <trans-unit id="b03bc08e3947730353e9a2f08b1653a85fdf21af" translate="yes" xml:space="preserve">
          <source>This module defines a callback behavior for user-defined hash functions of fragmented tables.</source>
          <target state="translated">このモジュールは、フラグメント化されたテーブルのユーザ定義ハッシュ関数のコールバック動作を定義します。</target>
        </trans-unit>
        <trans-unit id="7910088bd4b8dc833f45c393721faa0c8e4f3457" translate="yes" xml:space="preserve">
          <source>This module defines a callback handler for the communication with an &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-miller-ssh-agent-02&quot;&gt;SSH Agent&lt;/a&gt;&lt;/code&gt; and can be used to replace the &lt;code&gt;default callback&lt;/code&gt;. This allows to issue signing requests to an agent that stores SSH private keys to perform authentication.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/draft-miller-ssh-agent-02&quot;&gt;SSH Agent&lt;/a&gt;&lt;/code&gt; との通信用のコールバックハンドラーを定義し、 &lt;code&gt;default callback&lt;/code&gt; を置き換えるために使用できます。これにより、認証を実行するためにSSH秘密鍵を格納するエージェントに署名要求を発行できます。</target>
        </trans-unit>
        <trans-unit id="161d77445ffa506093b357c536b61e4224bc87e7" translate="yes" xml:space="preserve">
          <source>This module defines an abstract data type for representing Core Erlang source code as syntax trees.</source>
          <target state="translated">このモジュールはCore Erlangのソースコードをシンタックスツリーとして表現するための抽象データ型を定義しています。</target>
        </trans-unit>
        <trans-unit id="76441fb4ee13017766943030861f4ce7688ed9bd" translate="yes" xml:space="preserve">
          <source>This module defines an abstract data type for representing Erlang source code as syntax trees, in a way that is backwards compatible with the data structures created by the Erlang standard library parser module &lt;code&gt;erl_parse&lt;/code&gt; (often referred to as &quot;parse trees&quot;, which is a bit of a misnomer). This means that all &lt;code&gt;erl_parse&lt;/code&gt; trees are valid abstract syntax trees, but the reverse is not true: abstract syntax trees can in general not be used as input to functions expecting an &lt;code&gt;erl_parse&lt;/code&gt; tree. However, as long as an abstract syntax tree represents a correct Erlang program, the function &lt;code&gt;&lt;a href=&quot;#revert-1&quot;&gt;revert/1&lt;/a&gt;&lt;/code&gt; should be able to transform it to the corresponding &lt;code&gt;erl_parse&lt;/code&gt; representation.</source>
          <target state="translated">このモジュールは、Erlang標準ライブラリパーサーモジュール &lt;code&gt;erl_parse&lt;/code&gt; （しばしば「解析ツリー」と呼ばれる）によって作成されたデータ構造と下位互換性のある方法で、Erlangソースコードを構文ツリーとして表すための抽象データ型を定義します。誤称）。つまり、すべての &lt;code&gt;erl_parse&lt;/code&gt; ツリーは有効な抽象構文ツリーですが、その逆は当てはまりません。抽象構文ツリーは、 &lt;code&gt;erl_parse&lt;/code&gt; ツリーを期待する関数への入力としては一般的に使用できません。ただし、抽象構文ツリーが正しいErlangプログラムを表す限り、関数 &lt;code&gt;&lt;a href=&quot;#revert-1&quot;&gt;revert/1&lt;/a&gt;&lt;/code&gt; はそれを対応する &lt;code&gt;erl_parse&lt;/code&gt; 表現に変換できるはずです。</target>
        </trans-unit>
        <trans-unit id="e69c1a93aecab552763a38625c306d9fb09103f6" translate="yes" xml:space="preserve">
          <source>This module defines the Erlang Server Interface (ESI) API. It is a more efficient way of writing Erlang scripts for your &lt;code&gt;Inets&lt;/code&gt; web server than writing them as common CGI scripts.</source>
          <target state="translated">このモジュールは、Erlangサーバーインターフェイス（ESI）APIを定義します。一般的なCGIスクリプトとして記述するよりも、 &lt;code&gt;Inets&lt;/code&gt; Webサーバー用のErlangスクリプトを記述する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="392313e4002a7778328cfb59fce4c77f8c1952d5" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the SNMP agent mib storage.</source>
          <target state="translated">このモジュールは、SNMPエージェントのmibストレージの動作を定義します。</target>
        </trans-unit>
        <trans-unit id="7eff1b562e4fe0566ee0da7f6a9daaa2439e2f8b" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the SNMP agent mib-server data module. A &lt;code&gt;snmpa_mib_data&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、SNMPエージェントのmib-serverデータモジュールの動作を定義します。 &lt;code&gt;snmpa_mib_data&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="b0d76e366c3f9dcdfb5f12def1540b4e052163ce" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent discovery handler. A &lt;code&gt;snmpa_discovery_handler&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェント検出ハンドラの動作を定義します。 &lt;code&gt;snmpa_discovery_handler&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="e43530aefc8fe67ce3e1a2b7e5683063982513d3" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent error reporting. A &lt;code&gt;snmpa_error_report&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントエラーレポートの動作を定義します。 &lt;code&gt;snmpa_error_report&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="d81fb92749352083b3ab6bc64e61e21bf25c9749" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent network interface filter. A &lt;code&gt;snmpa_network_interface_filter&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントネットワークインターフェースフィルターの動作を定義します。 &lt;code&gt;snmpa_network_interface_filter&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="5412a13932b854a89270a84f2ceaaa33588e1121" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent network interface. A &lt;code&gt;snmpa_network_interface&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェントネットワークインターフェースの動作を定義します。 &lt;code&gt;snmpa_network_interface&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="3c921e60f1fd55471b897ea29e000de7226f0bb1" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the agent notification filters. A &lt;code&gt;snmpa_notification_filter&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、エージェント通知フィルターの動作を定義します。 &lt;code&gt;snmpa_notification_filter&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="8c813e504362483e091dd45b65c32a63841d6a1d" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the manager network interface filter. A &lt;code&gt;snmpm_network_interface_filter&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、マネージャーのネットワークインターフェイスフィルターの動作を定義します。 &lt;code&gt;snmpm_network_interface_filter&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="1efae6ac4d1c40501e88954337a2c493e68e0103" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the manager network interface. A &lt;code&gt;snmpm_network_interface&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、マネージャーのネットワークインターフェイスの動作を定義します。 &lt;code&gt;snmpm_network_interface&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="70cf854e5d6063f7072b44e1cece8ac9b81a70b7" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the manager user. A &lt;code&gt;snmpm_user&lt;/code&gt; compliant module must export the following functions:</source>
          <target state="translated">このモジュールは、マネージャーユーザーの動作を定義します。 &lt;code&gt;snmpm_user&lt;/code&gt; 準拠したモジュールは次の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="468ccfe9ae0121bf6da5c3aaba9a0e4a3f14050d" translate="yes" xml:space="preserve">
          <source>This module defines the behaviour of the notification delivery information receiver.</source>
          <target state="translated">このモジュールは、通知配信情報受信機の動作を定義します。</target>
        </trans-unit>
        <trans-unit id="118517391ac279d58d25f1693b404c970b02d3e5" translate="yes" xml:space="preserve">
          <source>This module defines the callback behaviour of Megaco users. A megaco_user compliant callback module must export the following functions:</source>
          <target state="translated">このモジュールは、Megaco ユーザのコールバック動作を定義します。megaco_user 準拠のコールバックモジュールは、以下の関数をエクスポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="4c8aaa7d34274a9f4bb7dc956dc47a8e7e1445eb" translate="yes" xml:space="preserve">
          <source>This module defines what happens when certain types of errors occur.</source>
          <target state="translated">このモジュールは、特定のタイプのエラーが発生したときに何が起こるかを定義します。</target>
        </trans-unit>
        <trans-unit id="5ffa259dadc9ae103670240a5de8cb07d4a0a997" translate="yes" xml:space="preserve">
          <source>This module does not support &quot;raw&quot; filenames (that is, files whose names do not comply with the expected encoding). Such files are ignored by the functions in this module.</source>
          <target state="translated">このモジュールは「生の」ファイル名 (つまり、期待されるエンコーディングに準拠していないファイル名)をサポートしていません。そのようなファイルは、このモジュールの関数では無視されます。</target>
        </trans-unit>
        <trans-unit id="d6653760221ddc3d83e211cede6e8be096bb7928" translate="yes" xml:space="preserve">
          <source>This module enables C-programs to communicate with Erlang nodes, using the Erlang distribution over TCP/IP.</source>
          <target state="translated">このモジュールはCプログラムがTCP/IP上のErlangディストリビューションを使ってErlangノードと通信することを可能にします。</target>
        </trans-unit>
        <trans-unit id="263e76116a98bb1fd881761f209bf1ba1fce107d" translate="yes" xml:space="preserve">
          <source>This module enables users to enter the short form of some commonly used commands.</source>
          <target state="translated">このモジュールは、一般的に使用されるいくつかのコマンドの短縮形を入力することを可能にします。</target>
        </trans-unit>
        <trans-unit id="3343ff3168dd5f14d02286d39c2ac78ec614ecd9" translate="yes" xml:space="preserve">
          <source>This module expands records in a module.</source>
          <target state="translated">モジュール内のレコードを展開します。</target>
        </trans-unit>
        <trans-unit id="a3732061720e8ab1db0a300e706fb90768269889" translate="yes" xml:space="preserve">
          <source>This module exports functions for running &lt;code&gt;Common Test&lt;/code&gt; nodes on multiple hosts in parallel.</source>
          <target state="translated">このモジュールは、複数のホストで &lt;code&gt;Common Test&lt;/code&gt; ノードを並行して実行するための関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="0503901901ce52a8d8d522c2fc6e6ad11e2ed29f" translate="yes" xml:space="preserve">
          <source>This module exports functions used by the &lt;code&gt;Common Test&lt;/code&gt; Master to start and stop &quot;slave&quot; nodes. It is the default callback module for the &lt;code&gt;{init, node_start}&lt;/code&gt; term in the Test Specification.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Common Test&lt;/code&gt; Masterが「スレーブ」ノードを開始および停止するために使用する関数をエクスポートします。これは、テスト仕様の &lt;code&gt;{init, node_start}&lt;/code&gt; 用語のデフォルトのコールバックモジュールです。</target>
        </trans-unit>
        <trans-unit id="5c1c8fa2fdb9c360a27bfb55873d503a480bf994" translate="yes" xml:space="preserve">
          <source>This module exports help functions for parsing of test specifications.</source>
          <target state="translated">このモジュールは、テスト仕様を解析するためのヘルプ関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="a7e44b5175c847fa8191a306063c634fed83971d" translate="yes" xml:space="preserve">
          <source>This module exports help functions for performing code coverage analysis.</source>
          <target state="translated">このモジュールは、コードカバレッジ解析を行うためのヘルプ関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="eb5bfcc59cc41439eaa702f52ecbd01d0b73eb7d" translate="yes" xml:space="preserve">
          <source>This module generates an HTML directory listing (Apache-style) if a client sends a request for a directory instead of a file. This module must be removed from the Modules config directive if directory listings is unwanted.</source>
          <target state="translated">このモジュールは、クライアントがファイルではなくディレクトリへのリクエストを送った場合に、 HTML のディレクトリリスト (Apache スタイル)を生成します。もし、ディレクトリの一覧表示が不要な場合は、このモジュールを Modules config ディレクティブから削除しなければなりません。</target>
        </trans-unit>
        <trans-unit id="ebf8cc7dad040f1beca78868efd260f249334a6e" translate="yes" xml:space="preserve">
          <source>This module handles invoking of CGI scripts.</source>
          <target state="translated">このモジュールは、CGI スクリプトの呼び出しを処理します。</target>
        </trans-unit>
        <trans-unit id="474f6eb9d78d082e8b16b40b4a1c3de1a0cc963c" translate="yes" xml:space="preserve">
          <source>This module has been deprecated and will be removed in a furture release.</source>
          <target state="translated">このモジュールは非推奨とされています。</target>
        </trans-unit>
        <trans-unit id="4ead8db89a63c65e38113715680218a6fa71339b" translate="yes" xml:space="preserve">
          <source>This module has been reworked in Erlang/OTP 20 to handle &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt; unicode:chardata()&lt;/a&gt;&lt;/code&gt; and operate on grapheme clusters. The &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt; old functions&lt;/a&gt;&lt;/code&gt; that only work on Latin-1 lists as input are still available but should not be used, they will be deprecated in a future release.</source>
          <target state="translated">このモジュールはErlang / OTP 20で作り直され、 &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt; unicode:chardata()&lt;/a&gt;&lt;/code&gt; を処理し、書記素クラスターを操作します。 &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt; old functions&lt;/a&gt;&lt;/code&gt; 入力として、Latin-1のリストの唯一の仕事はまだ利用可能ですが、使用すべきではないことを、彼らは将来のリリースで廃止されます。</target>
        </trans-unit>
        <trans-unit id="20277e2186104d73a70c009c74886d168752fafa" translate="yes" xml:space="preserve">
          <source>This module has been reworked in Erlang/OTP 20 to handle &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; and operate on grapheme clusters. The &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;old functions&lt;/a&gt;&lt;/code&gt; that only work on Latin-1 lists as input are still available but should not be used, they will be deprecated in a future release.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; を処理し、書記素クラスター上で動作するようにErlang / OTP 20で作り直されました。 &lt;code&gt;&lt;a href=&quot;#oldapi&quot;&gt;old functions&lt;/a&gt;&lt;/code&gt; 入力として、Latin-1のリストの唯一の仕事はまだ利用可能ですが、使用すべきではないことを、彼らは将来のリリースで廃止されます。</target>
        </trans-unit>
        <trans-unit id="e92193f0e2766adbb07bff2f6dfb2e47b5b38666" translate="yes" xml:space="preserve">
          <source>This module has three sets of interface functions: the &quot;Original API&quot;, the &quot;Extended API&quot;, and the &quot;Okasaki API&quot;.</source>
          <target state="translated">このモジュールは、「オリジナルAPI」、「拡張API」、「岡崎API」の3つのインターフェース機能を持っています。</target>
        </trans-unit>
        <trans-unit id="e5308b8befdbb88760705def10e558c7d6f76c3f" translate="yes" xml:space="preserve">
          <source>This module helps running property-based tests in the &lt;code&gt;Common Test&lt;/code&gt; framework. One (or more) of the property testing tools</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Common Test&lt;/code&gt; フレームワークでプロパティベースのテストを実行するのに役立ちます。1つ（または複数）の特性試験ツール</target>
        </trans-unit>
        <trans-unit id="e94b28ea5c396cd8b2c46ddc4551b34a14bfd479" translate="yes" xml:space="preserve">
          <source>This module implements a client for file transfer according to a subset of the File Transfer Protocol (FTP), see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、ファイル転送プロトコル（FTP）のサブセットに従ってファイル転送用のクライアントを実装します &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc959.txt&quot;&gt;RFC 959&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b25912bf3af7bf1193b3fff50e47205181300228" translate="yes" xml:space="preserve">
          <source>This module implements a simple megaco codec measurement tool.</source>
          <target state="translated">このモジュールは、簡単なmegacoコーデ測定ツールを実装しています。</target>
        </trans-unit>
        <trans-unit id="871eeb782d63d6630dd6a5d492a7b58d86850778" translate="yes" xml:space="preserve">
          <source>This module implements a simple megaco codec-based performance tool.</source>
          <target state="translated">このモジュールは、シンプルなメガココーデックベースのパフォーマンスツールを実装しています。</target>
        </trans-unit>
        <trans-unit id="f9179ddef6a9ee16329a9f709abd6d55eba87a03" translate="yes" xml:space="preserve">
          <source>This module implements a simple megaco message transformation utility.</source>
          <target state="translated">このモジュールは、単純な megaco メッセージ変換ユーティリティを実装しています。</target>
        </trans-unit>
        <trans-unit id="509079930c0c0a8b4797c4ad9534704e9e78b720" translate="yes" xml:space="preserve">
          <source>This module implements a text based interface to the &lt;code&gt;trace/3&lt;/code&gt; and the &lt;code&gt;trace_pattern/2&lt;/code&gt; BIFs. It makes it possible to trace functions, processes, ports and messages.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;trace/3&lt;/code&gt; および &lt;code&gt;trace_pattern/2&lt;/code&gt; BIFへのテキストベースのインターフェースを実装します。機能、プロセス、ポート、メッセージを追跡することができます。</target>
        </trans-unit>
        <trans-unit id="c2d643bd7191e32f2c51494e11bf58ee73f4a435" translate="yes" xml:space="preserve">
          <source>This module implements an SSH FTP (SFTP) client. SFTP is a secure, encrypted file transfer service available for SSH.</source>
          <target state="translated">このモジュールは、SSH FTP (SFTP)クライアントを実装します。SFTP は SSH で利用できる安全で暗号化されたファイル転送サービスです。</target>
        </trans-unit>
        <trans-unit id="03ef132a9564d822dda1f23634bee22efb87c0be" translate="yes" xml:space="preserve">
          <source>This module implements diameter transport over SCTP using &lt;code&gt;gen_sctp(3)&lt;/code&gt;. It can be specified as the value of a transport_module option to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; and implements the behaviour documented in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;gen_sctp(3)&lt;/code&gt; を使用してSCTP上の直径転送を実装します。これは、 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; の transport_moduleオプションの値として指定でき、 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; に記載されている動作を実装します。</target>
        </trans-unit>
        <trans-unit id="88cb8b49f73b329262758743b81d712fdab5c653" translate="yes" xml:space="preserve">
          <source>This module implements diameter transport over TCP using &lt;code&gt;gen_tcp(3)&lt;/code&gt;. It can be specified as the value of a &lt;code&gt;transport_module&lt;/code&gt; option to &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; and implements the behaviour documented in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;. TLS security is supported, either as an upgrade following capabilities exchange or at connection establishment.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;gen_tcp(3)&lt;/code&gt; を使用して、TCP 経由のDiameterトランスポートを実装します。これは、 &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;transport_module&lt;/code&gt; オプションの値として指定でき、 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; に記載されている動作を実装します。TLSセキュリティは、機能交換後のアップグレードとして、または接続の確立時にサポートされます。</target>
        </trans-unit>
        <trans-unit id="9266c44a4ba8cd9ee1a5c81b4c58c87a30706c84" translate="yes" xml:space="preserve">
          <source>This module implements dynamic hashing, which is a kind of hashing that grows nicely when new fragments are added. It is well suited for scalable hash tables.</source>
          <target state="translated">このモジュールは動的ハッシュを実装しており、新しいフラグメントが追加されたときにうまく成長するハッシュの一種です。スケーラブルなハッシュテーブルに適しています。</target>
        </trans-unit>
        <trans-unit id="237af1ed7b14daa8c6a596b37b3d9e9e2855eee1" translate="yes" xml:space="preserve">
          <source>This module implements interfaces to dynamic tracing, should such be compiled into the virtual machine. For a standard and/or commercial build, no dynamic tracing is available, in which case none of the functions in this module is usable or give any effect.</source>
          <target state="translated">このモジュールは動的トレースへのインターフェースを実装しています。標準的なビルドや商用ビルドでは、ダイナミックトレースが利用できない場合、このモジュールの関数はどれも使えませんし、何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="e063dd1183a5694a263767c4e6d75bf203f69f0d" translate="yes" xml:space="preserve">
          <source>This module implements process groups. A message can be sent to one, some, or all group members.</source>
          <target state="translated">このモジュールは、プロセスグループを実装します。メッセージは、グループのメンバーの一人、一部、またはすべてのメンバーに送信することができます。</target>
        </trans-unit>
        <trans-unit id="5567e19229f23540f47010e8b1ddd342e185fa20" translate="yes" xml:space="preserve">
          <source>This module implements process groups. Each message can be sent to one, some, or all group members.</source>
          <target state="translated">このモジュールは、プロセスグループを実装します。各メッセージは、グループのメンバーの一人、一部、またはすべてのメンバーに送信することができます。</target>
        </trans-unit>
        <trans-unit id="2d68eba5044da7ce7cbcdeb1e9cede6cbfa2c8b7" translate="yes" xml:space="preserve">
          <source>This module implements some convenience functions for analyzing microstate accounting data. For details about how to use the basic api and what the different states represent see &lt;code&gt; erlang:statistics(microstate_accounting)&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、マイクロステートアカウンティングデータを分析するためのいくつかの便利な機能を実装しています。基本的なAPIの使用方法とさまざまな状態が表すものの詳細については、 &lt;code&gt; erlang:statistics(microstate_accounting)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="81520061930d4cb81104030ae03956c22721f688" translate="yes" xml:space="preserve">
          <source>This module implements some convenience functions for analyzing microstate accounting data. For details about how to use the basic api and what the different states represent see &lt;code&gt;erlang:statistics(microstate_accounting)&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、マイクロステートアカウンティングデータを分析するためのいくつかの便利な関数を実装しています。基本的なAPIの使用方法と、さまざまな状態が表すものの詳細については、 &lt;code&gt;erlang:statistics(microstate_accounting)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d15b1e9aa28423920ee271c9eb3d3a739153bbd9" translate="yes" xml:space="preserve">
          <source>This module implements the &lt;strong&gt;mstone1&lt;/strong&gt; tool, a simple megaco codec-based performance tool.</source>
          <target state="translated">このモジュールは、シンプルなmegacoコーデックベースのパフォーマンスツールである&lt;strong&gt;mstone1&lt;/strong&gt;ツールを実装します。</target>
        </trans-unit>
        <trans-unit id="251e35996e11df5d3eaaaf86f280ba3afa349ebe" translate="yes" xml:space="preserve">
          <source>This module implements the &lt;strong&gt;mstone2&lt;/strong&gt; tool, a simple megaco codec-based performance tool.</source>
          <target state="translated">このモジュールは、シンプルなmegacoコーデックベースのパフォーマンスツールである&lt;strong&gt;mstone2&lt;/strong&gt;ツールを実装します。</target>
        </trans-unit>
        <trans-unit id="a53a9f4087442a15c8d05293fde6edfea4bb383c" translate="yes" xml:space="preserve">
          <source>This module implements the command-line interface for running tests and basic functions for &lt;code&gt;Common Test&lt;/code&gt; case issues, such as configuration and logging.</source>
          <target state="translated">このモジュールは、テストを実行するためのコマンドラインインターフェイスと、構成やロギングなどの &lt;code&gt;Common Test&lt;/code&gt; ケースの問題の基本機能を実装します。</target>
        </trans-unit>
        <trans-unit id="c9a16d56697c4875fd3dc95099670093ace6758a" translate="yes" xml:space="preserve">
          <source>This module implements the main API for logging in Erlang/OTP. To create a log event, use the &lt;code&gt;&lt;a href=&quot;#logging_API&quot;&gt;API functions&lt;/a&gt;&lt;/code&gt; or the log &lt;code&gt;&lt;a href=&quot;#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt;, for example:</source>
          <target state="translated">このモジュールは、Erlang / OTPにログインするためのメインAPIを実装します。ログイベントを作成するには、 &lt;code&gt;&lt;a href=&quot;#logging_API&quot;&gt;API functions&lt;/a&gt;&lt;/code&gt; またはログ &lt;code&gt;&lt;a href=&quot;#macros&quot;&gt;macros&lt;/a&gt;&lt;/code&gt; 。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="34096d8559e322df745393832ab2c6dfe7da7fb5" translate="yes" xml:space="preserve">
          <source>This module is a &lt;code&gt;gen_event&lt;/code&gt; handler module that can be installed in any &lt;code&gt;gen_event&lt;/code&gt; process. It logs onto disk all events that are sent to an event manager. Each event is written as a binary, which makes the logging very fast. However, a tool such as the Report Browser (&lt;code&gt;rb(3)&lt;/code&gt;) must be used to read the files. The events are written to multiple files. When all files have been used, the first one is reused and overwritten. The directory location, the number of files, and the size of each file are configurable. The directory will include one file called &lt;code&gt;index&lt;/code&gt;, and report files &lt;code&gt;1, 2, ...&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、任意の &lt;code&gt;gen_event&lt;/code&gt; プロセスにインストールできる &lt;code&gt;gen_event&lt;/code&gt; ハンドラモジュールです。イベントマネージャに送信されるすべてのイベントをディスクにログオンします。各イベントはバイナリとして書き込まれるため、ロギングが非常に高速になります。ただし、ファイルを読み取るには、レポートブラウザ（ &lt;code&gt;rb(3)&lt;/code&gt; ）などのツールを使用する必要があります。イベントは複数のファイルに書き込まれます。すべてのファイルが使用されると、最初のファイルが再利用され、上書きされます。ディレクトリの場所、ファイル数、各ファイルのサイズは設定可能です。ディレクトリには、 &lt;code&gt;index&lt;/code&gt; という1つのファイルと、レポートファイル &lt;code&gt;1, 2, ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="91f4aea2b0c25de578d81458879b8b8a6606f33f" translate="yes" xml:space="preserve">
          <source>This module is a first step to run property-based tests in the &lt;code&gt;Common Test&lt;/code&gt; framework. A property testing tool like QuickCheck or PropEr is assumed to be installed.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Common Test&lt;/code&gt; フレームワークでプロパティベースのテストを実行するための最初のステップです。QuickCheckやPropErなどのプロパティテストツールがインストールされていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="745e849710741c8126631867ff49314e84421edc" translate="yes" xml:space="preserve">
          <source>This module is a front end to the pretty-printing library module &lt;code&gt;prettypr&lt;/code&gt;, for text formatting of abstract syntax trees defined by the module &lt;code&gt;erl_syntax&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、モジュール &lt;code&gt;erl_syntax&lt;/code&gt; によって定義された抽象構文ツリーのテキスト形式を設定するための、プリティプリントライブラリモジュール &lt;code&gt;prettypr&lt;/code&gt; のフロントエンドです。</target>
        </trans-unit>
        <trans-unit id="771c2457f87cf1d0281342c6af1f3ab5bb5e2564" translate="yes" xml:space="preserve">
          <source>This module is also used by the test module described in the next section.</source>
          <target state="translated">このモジュールは、次のセクションで説明するテストモジュールでも使用されます。</target>
        </trans-unit>
        <trans-unit id="029ed3af3c0fa1d9308479815ba39c6258f71e21" translate="yes" xml:space="preserve">
          <source>This module is an interface to the Erlang built-in term storage BIFs. These provide the ability to store very large quantities of data in an Erlang runtime system, and to have constant access time to the data. (In the case of &lt;code&gt;ordered_set&lt;/code&gt;, see below, access time is proportional to the logarithm of the number of stored objects.)</source>
          <target state="translated">このモジュールは、Erlang組み込みの用語ストレージBIFへのインターフェースです。これらは、Erlangランタイムシステムに非常に大量のデータを格納し、データへのアクセス時間を一定にする機能を提供します。（ &lt;code&gt;ordered_set&lt;/code&gt; の場合、以下を参照してください。アクセス時間は、格納されたオブジェクトの数の対数に比例します。）</target>
        </trans-unit>
        <trans-unit id="ab06f0be8cb17b619659641efccfa5a0d94a8229" translate="yes" xml:space="preserve">
          <source>This module is deprecated since OTP 23. Use the module &lt;code&gt;uri_string&lt;/code&gt; to properly handle URIs, this is the recommended module since OTP 21.</source>
          <target state="translated">このモジュールは &lt;code&gt;uri_string&lt;/code&gt; 以降非推奨です。モジュールuri_stringを使用してURIを適切に処理します。これは、OTP21以降の推奨モジュールです。</target>
        </trans-unit>
        <trans-unit id="2bf3be01bc933bf9be0bb2caf2dc7622f94a43df" translate="yes" xml:space="preserve">
          <source>This module is deprecated. For a description of the Magic Cookie system, refer to &lt;code&gt;Distributed Erlang&lt;/code&gt; in the Erlang Reference Manual.</source>
          <target state="translated">このモジュールは非推奨です。Magic Cookieシステムの説明については、Erlangリファレンスマニュアルの &lt;code&gt;Distributed Erlang&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a93d2db2466d23d6026908c314c14a83563ca6b" translate="yes" xml:space="preserve">
          <source>This module is mainly intended for internal use within OTP, but it has two functions that are exported for public use.</source>
          <target state="translated">このモジュールは主にOTP内での内部使用を目的としていますが、公開用にエクスポートされる2つの関数を持っています。</target>
        </trans-unit>
        <trans-unit id="1a37f6b1919b03e1a3eef60f562daa64d563a0b3" translate="yes" xml:space="preserve">
          <source>This module is preloaded and contains the code for the &lt;code&gt;init&lt;/code&gt; system process that coordinates the startup of the system. The first function evaluated at startup is &lt;code&gt;boot(BootArgs)&lt;/code&gt;, where &lt;code&gt;BootArgs&lt;/code&gt; is a list of command-line arguments supplied to the Erlang runtime system from the local operating system; see &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">このモジュールはプリロードされており、システムの起動を調整する &lt;code&gt;init&lt;/code&gt; システムプロセスのコードが含まれています。起動時に評価される最初の関数は &lt;code&gt;boot(BootArgs)&lt;/code&gt; です &lt;code&gt;BootArgs&lt;/code&gt; は、ローカルオペレーティングシステムからErlangランタイムシステムに提供されるコマンドライン引数のリストです。 &lt;code&gt;erl(1)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2f8550670270cc6c0c154e6b678e3322ac083e01" translate="yes" xml:space="preserve">
          <source>This module is responsible for handling GET requests to regular files. GET requests for parts of files is handled by &lt;code&gt;mod_range&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、通常のファイルへのGETリクエストの処理を担当します。ファイルの一部に対するGETリクエストは &lt;code&gt;mod_range&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="539b25aff993fcacaf4286ade9ec0f542cedebde" translate="yes" xml:space="preserve">
          <source>This module is responsible for handling HEAD requests to regular files. HEAD requests for dynamic content is handled by each module responsible for dynamic content.</source>
          <target state="translated">このモジュールは、通常のファイルへの HEAD リクエストの処理を担当します。動的コンテンツに対する HEAD リクエストは、動的コンテンツを担当する各モジュールが処理します。</target>
        </trans-unit>
        <trans-unit id="d192cc2f42a8d904da0e0162e8485626f5ec3af9" translate="yes" xml:space="preserve">
          <source>This module is similar to &lt;code&gt;ets&lt;/code&gt; in that it provides a storage for Erlang terms that can be accessed in constant time, but with the difference that &lt;code&gt;persistent_term&lt;/code&gt; has been highly optimized for reading terms at the expense of writing and updating terms. When a persistent term is updated or deleted, a global garbage collection pass is run to scan all processes for the deleted term, and to copy it into each process that still uses it. Therefore, &lt;code&gt;persistent_term&lt;/code&gt; is suitable for storing Erlang terms that are frequently accessed but never or infrequently updated.</source>
          <target state="translated">このモジュールは、一定時間でアクセスできるErlang用語のストレージを提供するという点で、 &lt;code&gt;ets&lt;/code&gt; に似ていますが、 &lt;code&gt;persistent_term&lt;/code&gt; が用語の書き込みと更新を犠牲にして、用語の読み取り用に高度に最適化されている点が異なります。永続的な用語が更新または削除されると、グローバルガベージコレクションパスが実行され、削除された用語のすべてのプロセスがスキャンされ、それを引き続き使用する各プロセスにコピーされます。したがって、 &lt;code&gt;persistent_term&lt;/code&gt; は、頻繁にアクセスされるが、更新されることはない、または頻繁に更新されないErlang用語を格納するのに適しています。</target>
        </trans-unit>
        <trans-unit id="758181cc746f5e39f0bd67af3c9cff191b5c70fa" translate="yes" xml:space="preserve">
          <source>This module is the basic Erlang parser that converts tokens into the abstract form of either forms (that is, top-level constructs), expressions, or terms. The Abstract Format is described in the &lt;code&gt;ERTS User's Guide&lt;/code&gt;. Notice that a token list must end with the &lt;strong&gt;dot&lt;/strong&gt; token to be acceptable to the parse functions (see the &lt;code&gt;&lt;a href=&quot;erl_scan&quot;&gt; erl_scan(3)&lt;/a&gt;&lt;/code&gt;) module.</source>
          <target state="translated">このモジュールは、トークンをフォーム（つまり、トップレベルの構成）、式、または用語のいずれかの抽象形式に変換する基本的なErlangパーサーです。抽象フォーマットについては、 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 説明されています。トークンリストは、解析関数（ &lt;code&gt;&lt;a href=&quot;erl_scan&quot;&gt; erl_scan(3)&lt;/a&gt;&lt;/code&gt; を参照）モジュールで受け入れられるように、&lt;strong&gt;ドット&lt;/strong&gt;トークンで終了する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5ce2d8127480b9b1949b76303752c4240c4a9505" translate="yes" xml:space="preserve">
          <source>This module is the basic Erlang parser that converts tokens into the abstract form of either forms (that is, top-level constructs), expressions, or terms. The Abstract Format is described in the &lt;code&gt;ERTS User's Guide&lt;/code&gt;. Notice that a token list must end with the &lt;strong&gt;dot&lt;/strong&gt; token to be acceptable to the parse functions (see the &lt;code&gt;&lt;a href=&quot;erl_scan&quot;&gt;erl_scan(3)&lt;/a&gt;&lt;/code&gt;) module.</source>
          <target state="translated">このモジュールは基本的なErlangパーサーであり、トークンを抽象形式（つまり、最上位の構成体）、式、または用語のいずれかに抽象化します。抽象形式については、 &lt;code&gt;ERTS User's Guide&lt;/code&gt; 説明しています。解析関数（ &lt;code&gt;&lt;a href=&quot;erl_scan&quot;&gt;erl_scan(3)&lt;/a&gt;&lt;/code&gt; を参照）モジュールに受け入れられるようにするには、トークンリストの最後に&lt;strong&gt;ドット&lt;/strong&gt;トークンを付ける必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c5088feb51b7d364ba0408f5823e446921051046" translate="yes" xml:space="preserve">
          <source>This module is the default callback handler for the client's and the server's user and host &quot;database&quot; operations. All data, for instance key pairs, are stored in files in the normal file system. This page documents the files, where they are stored and configuration options for this callback module.</source>
          <target state="translated">このモジュールは、クライアントとサーバのユーザとホストの「データベース」操作のためのデフォルトのコールバックハンドラです。すべてのデータ、たとえばキーペアなどは、通常のファイルシステム内のファイルに保存されます。このページでは、このコールバックモジュールのファイル、保存場所、設定オプションについて説明します。</target>
        </trans-unit>
        <trans-unit id="bc2b019e4ec5090f2acbc77c196c921bcb3de610" translate="yes" xml:space="preserve">
          <source>This module is the default error report module, but can be explicitly configured, see &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールはデフォルトのエラー報告モジュールですが、明示的に構成できます &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="84c431043a09432c4f87c8d3c357236a55bbfcb6" translate="yes" xml:space="preserve">
          <source>This module is the interface to the XML parser, it handles XML 1.0.</source>
          <target state="translated">このモジュールは XML パーサーへのインターフェイスであり、XML 1.0 を扱います。</target>
        </trans-unit>
        <trans-unit id="3104bc131d319b6e5efc35816fb7e2161d34e06f" translate="yes" xml:space="preserve">
          <source>This module is the interface to the XML parser, it handles XML 1.0. The XML parser is activated through &lt;code&gt;xmerl_scan:string/[1,2]&lt;/code&gt; or &lt;code&gt;xmerl_scan:file/[1,2]&lt;/code&gt;. It returns records of the type defined in xmerl.hrl. See also &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="translated">このモジュールはXMLパーサーへのインターフェースであり、XML 1.0を処理します。XMLパーサーは、 &lt;code&gt;xmerl_scan:string/[1,2]&lt;/code&gt; または &lt;code&gt;xmerl_scan:file/[1,2]&lt;/code&gt; によってアクティブ化されます。xmerl.hrlで定義されたタイプのレコードを返します。カスタマイズ機能の &lt;code&gt;tutorial&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="c37b4a9c779ad7673d2176f38ce64f13f8e8ff9a" translate="yes" xml:space="preserve">
          <source>This module is the main EUnit user interface.</source>
          <target state="translated">このモジュールはEUnitのメインユーザーインターフェースです。</target>
        </trans-unit>
        <trans-unit id="380eae6ed1f14f5abc43a6827952590fc885d0c2" translate="yes" xml:space="preserve">
          <source>This module is used as the Windows backend for &lt;code&gt;os_sup&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは &lt;code&gt;os_sup&lt;/code&gt; のWindowsバックエンドとして使用されます &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="418bac64df42298bb2e47d356802d620e125c0b8" translate="yes" xml:space="preserve">
          <source>This module is used as the Windows backend for &lt;code&gt;os_sup&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;os_sup&lt;/code&gt; のWindowsバックエンドとして使用されます。 &lt;code&gt;&lt;a href=&quot;os_sup&quot;&gt;os_sup(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="85cabe69b73c75cfce665849059c6c267e570fc3" translate="yes" xml:space="preserve">
          <source>This module is used by module &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; for managing distributed disk logs. The disk log names are used as group names, which means that some action can be needed to avoid name clashes.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log&lt;/a&gt;&lt;/code&gt; モジュールが分散ディスクログを管理するために使用します。ディスクログ名はグループ名として使用されます。つまり、名前の衝突を回避するために何らかのアクションが必要になる場合があります。</target>
        </trans-unit>
        <trans-unit id="2facc0dce78b1734ff96c5e2c414eea0b55cfeef" translate="yes" xml:space="preserve">
          <source>This module is used by the Mnesia application, and is provided &quot;as is&quot; for users who are interested in efficient storage of Erlang terms on disk only. Many applications only need to store some terms in a file. Mnesia adds transactions, queries, and distribution. The size of Dets files cannot exceed 2 GB. If larger tables are needed, table fragmentation in Mnesia can be used.</source>
          <target state="translated">このモジュールはMnesiaアプリケーションで使われており、Erlangの用語をディスク上だけに効率的に保存したいユーザーのために &quot;そのまま &quot;提供されています。多くのアプリケーションでは、いくつかの用語をファイルに保存する必要があります。Mnesiaはトランザクション、クエリ、ディストリビューションを追加します。Detsファイルのサイズは2GBを超えることはできません。より大きなテーブルが必要な場合は、Mnesiaのテーブルフラグメンテーションを使うことができます。</target>
        </trans-unit>
        <trans-unit id="0a4a5f76c2f39ee7d14410f547c13073a7f0ccea" translate="yes" xml:space="preserve">
          <source>This module is used to check Erlang code for illegal syntax and other bugs. It also warns against coding practices that are not recommended.</source>
          <target state="translated">このモジュールはErlangのコードに不正な構文やその他のバグがないかチェックするために使われます。また、推奨されないコーディング方法についても警告します。</target>
        </trans-unit>
        <trans-unit id="eeb466b5da365f466e8f7e7ccc932ed35a24cf1b" translate="yes" xml:space="preserve">
          <source>This module is used to load all Erlang modules into the system. The start script is also fetched with this low-level loader.</source>
          <target state="translated">このモジュールはすべてのErlangモジュールをシステムにロードするために使われます。スタートスクリプトもこの低レベルローダーでフェッチされます。</target>
        </trans-unit>
        <trans-unit id="2290e1725f60788cc5c925cb7d57804f016396a1" translate="yes" xml:space="preserve">
          <source>This module is used to profile a program to find out how the execution time is used. Trace to file is used to minimize runtime performance impact.</source>
          <target state="translated">このモジュールは、実行時間がどのように使われているかを調べるためにプログラムをプロファイルするために使用されます。ファイルへのトレースは、実行時のパフォーマンスへの影響を最小限に抑えるために使用されます。</target>
        </trans-unit>
        <trans-unit id="cf791b13f3d789dba7e7d40b898243584bd114e9" translate="yes" xml:space="preserve">
          <source>This module is used to start processes adhering to the &lt;code&gt; OTP Design Principles&lt;/code&gt;. Specifically, the functions in this module are used by the OTP standard behaviors (for example, &lt;code&gt;gen_server&lt;/code&gt; and &lt;code&gt;gen_statem&lt;/code&gt;) when starting new processes. The functions can also be used to start &lt;strong&gt;special processes&lt;/strong&gt;, user-defined processes that comply to the OTP design principles. For an example, see section &lt;code&gt; sys and proc_lib&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">このモジュールは、 &lt;code&gt; OTP Design Principles&lt;/code&gt; 準拠したプロセスを開始するために使用されます。具体的には、このモジュールの関数は、新しいプロセスを開始するときにOTP標準の動作（たとえば、 &lt;code&gt;gen_server&lt;/code&gt; や &lt;code&gt;gen_statem&lt;/code&gt; ）によって使用されます。これらの関数を使用して、&lt;strong&gt;特別なプロセス&lt;/strong&gt;、つまりOTP設計原則に準拠するユーザー定義プロセスを開始することもできます。例については、OTP設計原則のセクション &lt;code&gt; sys and proc_lib&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="4c89a4f0fda18575f2da9f933c35be2fd6e70e09" translate="yes" xml:space="preserve">
          <source>This module is used to start processes adhering to the &lt;code&gt;OTP Design Principles&lt;/code&gt;. Specifically, the functions in this module are used by the OTP standard behaviors (for example, &lt;code&gt;gen_server&lt;/code&gt; and &lt;code&gt;gen_statem&lt;/code&gt;) when starting new processes. The functions can also be used to start &lt;strong&gt;special processes&lt;/strong&gt;, user-defined processes that comply to the OTP design principles. For an example, see section &lt;code&gt;sys and proc_lib&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 準拠したプロセスを開始するために使用されます。具体的には、このモジュールの関数は、OTP標準の動作（たとえば、 &lt;code&gt;gen_server&lt;/code&gt; および &lt;code&gt;gen_statem&lt;/code&gt; ）が新しいプロセスを開始するときに使用します。これらの関数を使用して、OTP設計原則に準拠する&lt;strong&gt;特別なプロセス&lt;/strong&gt;、ユーザー定義プロセスを開始することもできます。例については、OTP設計原則のセクション &lt;code&gt;sys and proc_lib&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="7f4ab243ee6586ee79497742f5b5a43934de147b" translate="yes" xml:space="preserve">
          <source>This module is usually part of the &lt;code&gt;erl_interface&lt;/code&gt; application, but is currently part of the Mnesia application.</source>
          <target state="translated">このモジュールは通常 &lt;code&gt;erl_interface&lt;/code&gt; アプリケーションの一部ですが、現在Mnesiaアプリケーションの一部です。</target>
        </trans-unit>
        <trans-unit id="1e34649b10e11074b5eecec6992267ea5de9baf9" translate="yes" xml:space="preserve">
          <source>This module maintains a cache of CRLs. CRLs can be added to the cache using the function &lt;code&gt;ssl_crl_cache:insert/1&lt;/code&gt;, and optionally automatically fetched through HTTP if the following argument is specified:</source>
          <target state="translated">このモジュールは、CRLのキャッシュを維持します。CRLは、関数 &lt;code&gt;ssl_crl_cache:insert/1&lt;/code&gt; を使用してキャッシュに追加できます。オプションで、次の引数が指定されている場合は、HTTPを介して自動的にフェッチされます。</target>
        </trans-unit>
        <trans-unit id="48cfe86ff08451c66cbfbd564bce30700dcbc33c" translate="yes" xml:space="preserve">
          <source>This module makes it possible to partition the nodes of a system into &lt;strong&gt;global groups&lt;/strong&gt;. Each global group has its own global namespace, see &lt;code&gt;&lt;a href=&quot;global&quot;&gt; global(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールを使用すると、システムのノードを&lt;strong&gt;グローバルグループ&lt;/strong&gt;に分割でき&lt;strong&gt;ます&lt;/strong&gt;。各グローバルグループには、独自のグローバル名前空間があります &lt;code&gt;&lt;a href=&quot;global&quot;&gt; global(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="99468bcd97490a51d234dfa1e1aa1f1b75181a01" translate="yes" xml:space="preserve">
          <source>This module makes it possible to partition the nodes of a system into &lt;strong&gt;global groups&lt;/strong&gt;. Each global group has its own global namespace, see &lt;code&gt;&lt;a href=&quot;global&quot;&gt;global(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールを使用すると、システムのノードを&lt;strong&gt;グローバルグループ&lt;/strong&gt;に分割でき&lt;strong&gt;ます&lt;/strong&gt;。各グローバルグループには、独自のグローバル名前空間があります &lt;code&gt;&lt;a href=&quot;global&quot;&gt;global(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="8ac57e5b97d1c2443f197da3b8016c360ca297b4" translate="yes" xml:space="preserve">
          <source>This module makes it possible to read internally formatted wrap disk logs, see &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log(3)&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;wrap_log_reader&lt;/code&gt; does not interfere with &lt;code&gt;disk_log&lt;/code&gt; activities; there is however a bug in this version of the &lt;code&gt;wrap_log_reader&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#bugs&quot;&gt;Known Limitations&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、内部的にフォーマットされたラップディスクログを読み取ることを可能にします &lt;code&gt;&lt;a href=&quot;disk_log&quot;&gt;disk_log(3)&lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;wrap_log_reader&lt;/code&gt; は &lt;code&gt;disk_log&lt;/code&gt; アクティビティに干渉しません。ただし、このバージョンの &lt;code&gt;wrap_log_reader&lt;/code&gt; にはバグがあります。「 &lt;code&gt;&lt;a href=&quot;#bugs&quot;&gt;Known Limitations&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="989e49030b5db914fe14f640feffac69f14c2c8d" translate="yes" xml:space="preserve">
          <source>This module makes use of a directory where CRLs are stored in files named by the hash of the issuer name.</source>
          <target state="translated">このモジュールは、CRL が発行者名のハッシュで命名されたファイルに格納されているディレクトリを利用します。</target>
        </trans-unit>
        <trans-unit id="3e4a8e573560a8571cd9ef1e8a9e51dcf07a77f3" translate="yes" xml:space="preserve">
          <source>This module needs to be explicitly configured, see &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは明示的に構成する必要があり &lt;code&gt;&lt;a href=&quot;snmp_config#configuration_params&quot;&gt;configuration parameters&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;snmpa_error#desc&quot;&gt;snmpa_error&lt;/a&gt;&lt;/code&gt; および構成パラメーターを参照してください。</target>
        </trans-unit>
        <trans-unit id="1b605512fe66b8682ce8b37c4cf3e4fbe2e01d42" translate="yes" xml:space="preserve">
          <source>This module operates on grapheme clusters. A &lt;strong&gt;grapheme cluster&lt;/strong&gt; is a user-perceived character, which can be represented by several codepoints.</source>
          <target state="translated">このモジュールは書記素クラスターで動作します。&lt;strong&gt;書記素クラスタは&lt;/strong&gt;、いくつかのコードポイントで表現することができるユーザ知覚文字、です。</target>
        </trans-unit>
        <trans-unit id="bb1c46b6a237b6087130260dff45a5cc687d6cba" translate="yes" xml:space="preserve">
          <source>This module performs DNS name resolving to recursive name servers.</source>
          <target state="translated">このモジュールは、再帰ネームサーバーに対してDNS名の解決を行います。</target>
        </trans-unit>
        <trans-unit id="4ab7b3a5e783c28b801aa97ce3c793f0d6d021bc" translate="yes" xml:space="preserve">
          <source>This module performs an identity parse transformation of Erlang code. It is included as an example for users who wants to write their own parse transformers. If option &lt;code&gt;{parse_transform,Module}&lt;/code&gt; is passed to the compiler, a user-written function &lt;code&gt;parse_transform/2&lt;/code&gt; is called by the compiler before the code is checked for errors.</source>
          <target state="translated">このモジュールは、Erlangコードのアイデンティティ解析変換を実行します。独自の解析トランスフォーマーを記述したいユーザー向けの例として含まれています。オプション &lt;code&gt;{parse_transform,Module}&lt;/code&gt; がコンパイラーに渡されると、コードのエラーがチェックされる前に、コンパイラーによってユーザー作成関数 &lt;code&gt;parse_transform/2&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="db95c0c571d0edee3b86863284018ac0d738f900" translate="yes" xml:space="preserve">
          <source>This module provide services similar to Remote Procedure Calls. A remote procedure call is a method to call a function on a remote node and collect the answer. It is used for collecting information on a remote node, or for running a function with some specific side effects on the remote node.</source>
          <target state="translated">このモジュールは、リモートプロシージャコールに似たサービスを提供します。リモートプロシージャコールとは、リモートノード上の関数を呼び出してその答えを収集する方法です。これは、リモートノードの情報を収集したり、リモートノード上で特定の副作用を持つ関数を実行したりするために使用されます。</target>
        </trans-unit>
        <trans-unit id="a0037900bad0730ea9a030ba4069f75cb17a7f8b" translate="yes" xml:space="preserve">
          <source>This module provides (double-ended) FIFO queues in an efficient manner.</source>
          <target state="translated">このモジュールは、効率的な方法で(ダブルエンドの)FIFO キューを提供します。</target>
        </trans-unit>
        <trans-unit id="86963c4e13e1aeb4e47cbb6c0a5df6d5e8a947ad" translate="yes" xml:space="preserve">
          <source>This module provides API functions to send SSH Connection Protocol events to the other side of an SSH channel.</source>
          <target state="translated">このモジュールは、SSH 接続プロトコルのイベントを SSH チャンネルの相手側に送信するための API 関数を提供します。</target>
        </trans-unit>
        <trans-unit id="ce8b320b968902deab02747f5036f5e0f055ee88" translate="yes" xml:space="preserve">
          <source>This module provides Prof. Arne Andersson's General Balanced Trees. These have no storage overhead compared to unbalanced binary trees, and their performance is better than AVL trees.</source>
          <target state="translated">このモジュールは、Arne Andersson教授の一般的なバランスツリーを提供します。これらの木は、アンバランスバイナリツリーに比べてストレージのオーバーヘッドがなく、AVL木よりも性能が良いです。</target>
        </trans-unit>
        <trans-unit id="781b6c37f92636bd37c09e7bf44c27d67bf8df9d" translate="yes" xml:space="preserve">
          <source>This module provides a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; dictionary. An &lt;code&gt;orddict&lt;/code&gt; is a representation of a dictionary, where a list of pairs is used to store the keys and values. The list is ordered after the keys in the &lt;strong&gt;Erlang term order&lt;/strong&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 辞書を提供します。 &lt;code&gt;orddict&lt;/code&gt; はペアのリストは、キーと値を格納するために使用される辞書の表現です。リストは、&lt;strong&gt;Erlang用語の順序で&lt;/strong&gt;キーの後に並べられます。</target>
        </trans-unit>
        <trans-unit id="54ac9b6927419ddb4103884312f8097df3f2bb5a" translate="yes" xml:space="preserve">
          <source>This module provides a &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; dictionary. The representation of a dictionary is not defined.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 辞書を提供します。辞書の表現は定義されていません。</target>
        </trans-unit>
        <trans-unit id="393cc80d6eca92a704f69151bc3d7efe95ae4615" translate="yes" xml:space="preserve">
          <source>This module provides a client api to the Lightweight Directory Access Protocol (LDAP).</source>
          <target state="translated">このモジュールは、LDAP (Lightweight Directory Access Protocol)のクライアント API を提供します。</target>
        </trans-unit>
        <trans-unit id="015ecfc007c07144fe6ae22676ba1b983919f2ff" translate="yes" xml:space="preserve">
          <source>This module provides a pseudo random number generator. The module contains a number of algorithms. The uniform distribution algorithms are based on the &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt; Xoroshiro and Xorshift algorithms &lt;/a&gt;&lt;/code&gt; by Sebastiano Vigna. The normal distribution algorithm uses the &lt;code&gt;&lt;a href=&quot;http://www.jstatsoft.org/v05/i08&quot;&gt; Ziggurat Method by Marsaglia and Tsang &lt;/a&gt;&lt;/code&gt; on top of the uniform distribution algorithm.</source>
          <target state="translated">このモジュールは、疑似乱数ジェネレーターを提供します。このモジュールには、いくつかのアルゴリズムが含まれています。一様分布アルゴリズムは、 &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt; Xoroshiro and Xorshift algorithms &lt;/a&gt;&lt;/code&gt; アルゴリズムに基づいています。正規分布アルゴリズムは、一様分布アルゴリズムに加えて、 &lt;code&gt;&lt;a href=&quot;http://www.jstatsoft.org/v05/i08&quot;&gt; Ziggurat Method by Marsaglia and Tsang &lt;/a&gt;&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="f62d79bfd7ef0367f3e971c525740d763d760116" translate="yes" xml:space="preserve">
          <source>This module provides a pseudo random number generator. The module contains a number of algorithms. The uniform distribution algorithms use the &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt; xoroshiro116+ and xorshift1024* algorithms by Sebastiano Vigna. &lt;/a&gt;&lt;/code&gt; The normal distribution algorithm uses the &lt;code&gt;&lt;a href=&quot;http://www.jstatsoft.org/v05/i08&quot;&gt; Ziggurat Method by Marsaglia and Tsang &lt;/a&gt;&lt;/code&gt; on top of the uniform distribution algorithm.</source>
          <target state="translated">このモジュールは、疑似乱数ジェネレータを提供します。モジュールには多数のアルゴリズムが含まれています。均一分散アルゴリズムは、 &lt;code&gt;&lt;a href=&quot;http://xorshift.di.unimi.it&quot;&gt; xoroshiro116+ and xorshift1024* algorithms by Sebastiano Vigna. &lt;/a&gt;&lt;/code&gt; 正規分布アルゴリズムは、均一分布アルゴリズムに加えて、 &lt;code&gt;&lt;a href=&quot;http://www.jstatsoft.org/v05/i08&quot;&gt; Ziggurat Method by Marsaglia and Tsang &lt;/a&gt;&lt;/code&gt; によるZigguratメソッドを使用します。</target>
        </trans-unit>
        <trans-unit id="f99a3f1888d10fffd183a70ef4c3a34c9ed1aee3" translate="yes" xml:space="preserve">
          <source>This module provides a query interface to &lt;code&gt;Mnesia&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ETS&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;Dets&lt;/a&gt;&lt;/code&gt;, and other data structures that provide an iterator style traversal of objects.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;Mnesia&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ETS&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;dets&quot;&gt;Dets&lt;/a&gt;&lt;/code&gt; 、およびオブジェクトの反復子スタイルのトラバーサルを提供するその他のデータ構造へのクエリインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="b710ecaed2fa7dbc6a10afe4f44c9844447837ab" translate="yes" xml:space="preserve">
          <source>This module provides a query interface to &lt;strong&gt;QLC tables&lt;/strong&gt;. Typical QLC tables are Mnesia, ETS, and Dets tables. Support is also provided for user-defined tables, see section &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt; Implementing a QLC Table&lt;/a&gt;&lt;/code&gt;.  A &lt;strong id=&quot;query_list_comprehension&quot;&gt;query&lt;/strong&gt; is expressed using &lt;strong&gt;Query List Comprehensions&lt;/strong&gt; (QLCs). The answers to a query are determined by data in QLC tables that fulfill the constraints expressed by the QLCs of the query. QLCs are similar to ordinary list comprehensions as described in &lt;code&gt; Erlang Reference Manual&lt;/code&gt; and &lt;code&gt; Programming Examples&lt;/code&gt;, except that variables introduced in patterns cannot be used in list expressions. In the absence of optimizations and options such as &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;unique&lt;/code&gt; (see section &lt;code&gt;&lt;a href=&quot;#common_options&quot;&gt;Common Options&lt;/a&gt;&lt;/code&gt;, every QLC free of QLC tables evaluates to the same list of answers as the identical ordinary list comprehension.</source>
          <target state="translated">このモジュールは、&lt;strong&gt;QLCテーブル&lt;/strong&gt;へのクエリインターフェイスを提供します。典型的なQLCテーブルは、Mnesia、ETS、およびDetsテーブルです。ユーザー定義テーブルのサポートも提供されます。「 &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt; Implementing a QLC Table&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。&lt;strong id=&quot;query_list_comprehension&quot;&gt;クエリを&lt;/strong&gt;使用して表現される&lt;strong&gt;クエリのリスト内包表記&lt;/strong&gt;（QLCsを）。クエリへの回答は、クエリのQLCによって表される制約を満たすQLCテーブルのデータによって決定されます。 QLCは、 &lt;code&gt; Erlang Reference Manual&lt;/code&gt; および &lt;code&gt; Programming Examples&lt;/code&gt; で説明されている通常のリスト内包表記に似ていますが、パターンで導入された変数をリスト式で使用できない点が異なります。 &lt;code&gt;cache&lt;/code&gt; や &lt;code&gt;unique&lt;/code&gt; などの最適化とオプションがない場合（セクション &lt;code&gt;&lt;a href=&quot;#common_options&quot;&gt;Common Options&lt;/a&gt;&lt;/code&gt; 参照してください。QLCテーブルを含まないすべてのQLCは、同じ通常のリスト内包と同じ回答リストに評価されます。</target>
        </trans-unit>
        <trans-unit id="4250319025eafcb7ae410e50274c9a7bdf114b1e" translate="yes" xml:space="preserve">
          <source>This module provides a query interface to &lt;strong&gt;QLC tables&lt;/strong&gt;. Typical QLC tables are Mnesia, ETS, and Dets tables. Support is also provided for user-defined tables, see section &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt;.  A &lt;strong id=&quot;query_list_comprehension&quot;&gt;query&lt;/strong&gt; is expressed using &lt;strong&gt;Query List Comprehensions&lt;/strong&gt; (QLCs). The answers to a query are determined by data in QLC tables that fulfill the constraints expressed by the QLCs of the query. QLCs are similar to ordinary list comprehensions as described in &lt;code&gt;Erlang Reference Manual&lt;/code&gt; and &lt;code&gt;Programming Examples&lt;/code&gt;, except that variables introduced in patterns cannot be used in list expressions. In the absence of optimizations and options such as &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;unique&lt;/code&gt; (see section &lt;code&gt;&lt;a href=&quot;#common_options&quot;&gt;Common Options&lt;/a&gt;&lt;/code&gt;, every QLC free of QLC tables evaluates to the same list of answers as the identical ordinary list comprehension.</source>
          <target state="translated">このモジュールは、&lt;strong&gt;QLCテーブル&lt;/strong&gt;へのクエリインターフェイスを提供します。典型的なQLCテーブルは、Mnesia、ETS、およびDetsテーブルです。ユーザー定義テーブルのサポートも提供されます。「 &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。&lt;strong id=&quot;query_list_comprehension&quot;&gt;クエリを&lt;/strong&gt;使用して表現される&lt;strong&gt;クエリのリスト内包表記&lt;/strong&gt;（QLCsを）。クエリに対する回答は、クエリのQLCによって表現される制約を満たすQLCテーブルのデータによって決定されます。 QLCは、パターンに導入された変数がリスト式で使用できないことを除いて、 &lt;code&gt;Erlang Reference Manual&lt;/code&gt; と &lt;code&gt;Programming Examples&lt;/code&gt; で説明されている通常のリスト内包に似ています。 &lt;code&gt;cache&lt;/code&gt; や &lt;code&gt;unique&lt;/code&gt; などの最適化とオプションがない場合（「 &lt;code&gt;&lt;a href=&quot;#common_options&quot;&gt;Common Options&lt;/a&gt;&lt;/code&gt; セクションを参照してください。QLCテーブルのないすべてのQLCは、同じ通常のリスト内包と同じ回答のリストに評価されます。</target>
        </trans-unit>
        <trans-unit id="047710b1ad9fd2f027b84c9368779228a800a4da" translate="yes" xml:space="preserve">
          <source>This module provides a random number generator. The method is attributed to B.A. Wichmann and I.D. Hill in 'An efficient and portable pseudo-random number generator', Journal of Applied Statistics. AS183. 1982. Also Byte March 1987.</source>
          <target state="translated">このモジュールは乱数発生器を提供します。この方法は、B.A.Wichmann と I.D.Hill の 'An efficient and portable pseudo-random number generator'、Journal of Applied Statistics に帰属します。AS183 1982.Byte 1987年3月号にも掲載されています。</target>
        </trans-unit>
        <trans-unit id="52aa0232673b318eae9c0f57627c3e65f31b22a8" translate="yes" xml:space="preserve">
          <source>This module provides a set of cryptographic functions.</source>
          <target state="translated">このモジュールは、暗号関数のセットを提供します。</target>
        </trans-unit>
        <trans-unit id="c9cba1fc7e1e6375fe2609ded1dd8583269f1e82" translate="yes" xml:space="preserve">
          <source>This module provides a set of functions to do atomic operations towards mutable atomic variables. The implementation utilizes only atomic hardware instructions without any software level locking, which makes it very efficient for concurrent access. The atomics are organized into arrays with the following semantics:</source>
          <target state="translated">このモジュールは、変異可能な原子変数に対してアトミックな操作を行うための一連の関数を提供します。この実装では,ソフトウェアレベルのロックなしにアトミックなハードウェア命令のみを利用しているため,同時アクセスが非常に効率的です.アトミックは、以下のセマンティクスを持つ配列に編成されています。</target>
        </trans-unit>
        <trans-unit id="fe4f8c5f2a61de92835e1cf4cdaa069d643860a4" translate="yes" xml:space="preserve">
          <source>This module provides a set of functions to do operations towards shared mutable counter variables. The implementation does not utilize any software level locking, which makes it very efficient for concurrent access. The counters are organized into arrays with the following semantics:</source>
          <target state="translated">このモジュールは、共有された変異可能なカウンタ変数に対する操作を行うための関数のセットを提供します。この実装では、ソフトウェアレベルのロックを利用しないので、同時アクセスのために非常に効率的になります。カウンタは、以下のセマンティクスを持つ配列に編成されています。</target>
        </trans-unit>
        <trans-unit id="2efbf1cf06a7e77fc1af683651fd7cc8b8da3411" translate="yes" xml:space="preserve">
          <source>This module provides a simple mechanism for reporting SNMP errors. Errors are sent to the &lt;code&gt;error_logger&lt;/code&gt; after a size check. Messages are truncated after 1024 chars. It is provided as an example.</source>
          <target state="translated">このモジュールは、SNMPエラーを報告するための単純なメカニズムを提供します。エラーは、サイズチェック後に &lt;code&gt;error_logger&lt;/code&gt; に送信されます。メッセージは1024文字を超えると切り捨てられます。例として提供されています。</target>
        </trans-unit>
        <trans-unit id="096fb2e3550a9bb0e5272f77db40c6b69c2ccf79" translate="yes" xml:space="preserve">
          <source>This module provides a simple mechanism for reporting SNMP errors. Errors are written to stdout using the &lt;code&gt;io&lt;/code&gt; module. It is provided as an simple example.</source>
          <target state="translated">このモジュールは、SNMPエラーを報告するための単純なメカニズムを提供します。エラーは &lt;code&gt;io&lt;/code&gt; モジュールを使用してstdoutに書き込まれます。簡単な例として提供されています。</target>
        </trans-unit>
        <trans-unit id="1286f91cbc25e7fd94773e366acdb66f0cb92b07" translate="yes" xml:space="preserve">
          <source>This module provides a term storage on file. The stored terms, in this module called &lt;strong&gt;objects&lt;/strong&gt;, are tuples such that one element is defined to be the key. A Dets &lt;strong&gt;table&lt;/strong&gt; is a collection of objects with the key at the same position stored on a file.</source>
          <target state="translated">このモジュールは、ファイルに用語ストレージを提供します。&lt;strong&gt;オブジェクト&lt;/strong&gt;と呼ばれるこのモジュールに格納されている用語は、1つの要素がキーとして定義されるようなタプルです。Dets &lt;strong&gt;テーブル&lt;/strong&gt;は、ファイルに格納されている同じ位置にキーを持つオブジェクトのコレクションです。</target>
        </trans-unit>
        <trans-unit id="70f7f82b88797a35a1dc7be25685b1a8d3dd545e" translate="yes" xml:space="preserve">
          <source>This module provides a version of labeled directed graphs (&quot;digraphs&quot;).</source>
          <target state="translated">このモジュールは、ラベル付き有向グラフ(「ディグラフ」)のバージョンを提供します。</target>
        </trans-unit>
        <trans-unit id="1620c061e4de1e2d509ff847686aeef840c94ae4" translate="yes" xml:space="preserve">
          <source>This module provides a version of labeled directed graphs. What makes the graphs provided here non-proper directed graphs is that multiple edges between vertices are allowed. However, the customary definition of directed graphs is used here.</source>
          <target state="translated">このモジュールは,ラベル付き有向グラフのバージョンを提供する.ここで提供されるグラフを非有向グラフにしているのは、頂点間の複数の辺が許されていることです。しかし,ここでは有向グラフの慣習的な定義が用いられる.</target>
        </trans-unit>
        <trans-unit id="d4cf7ab2f5fd96a0860285a8e510288d8e51d560" translate="yes" xml:space="preserve">
          <source>This module provides access to TCP/IP protocols.</source>
          <target state="translated">このモジュールは、TCP/IP プロトコルへのアクセスを提供します。</target>
        </trans-unit>
        <trans-unit id="ce4f070d6f9440d796d3f2ff1b4d9fe245970d26" translate="yes" xml:space="preserve">
          <source>This module provides algorithms based on depth-first traversal of directed graphs. For basic functions on directed graphs, see the &lt;code&gt;&lt;a href=&quot;digraph&quot;&gt;digraph(3)&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">このモジュールは、有向グラフの深さ優先トラバーサルに基づくアルゴリズムを提供します。 &lt;code&gt;&lt;a href=&quot;digraph&quot;&gt;digraph(3)&lt;/a&gt;&lt;/code&gt; 基本的な関数については、digraph（3）モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="590c0955f816427dea3514fb29ccfa4c0c1b4c12" translate="yes" xml:space="preserve">
          <source>This module provides an API for network socket. Functions are provided to create, delete and manupilate the sockets aswell as sending and reciving data on them.</source>
          <target state="translated">このモジュールは、ネットワークソケットのAPIを提供します。ソケットの作成、削除、管理、データの送受信を行う関数が提供されています。</target>
        </trans-unit>
        <trans-unit id="c872a39dd86a1b96a68b0996c9785f1de2375352" translate="yes" xml:space="preserve">
          <source>This module provides an API for the network interface.</source>
          <target state="translated">このモジュールは、ネットワーク・インターフェースのAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="750641c760c68123c0ef647455d03f63c154be54" translate="yes" xml:space="preserve">
          <source>This module provides an API for the zlib library (&lt;code&gt;&lt;a href=&quot;http://www.zlib.net&quot;&gt;www.zlib.net&lt;/a&gt;&lt;/code&gt;). It is used to compress and decompress data. The data format is described by &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1950.txt&quot;&gt;RFC 1950&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1951.txt&quot;&gt;RFC 1951&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1952.txt&quot;&gt;RFC 1952&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、zlibライブラリ（ &lt;code&gt;&lt;a href=&quot;http://www.zlib.net&quot;&gt;www.zlib.net&lt;/a&gt;&lt;/code&gt; ）のAPIを提供します。データの圧縮と解凍に使用されます。データ形式は、 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1950.txt&quot;&gt;RFC 1950&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1951.txt&quot;&gt;RFC 1951&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc1952.txt&quot;&gt;RFC 1952&lt;/a&gt;&lt;/code&gt; で説明されています。</target>
        </trans-unit>
        <trans-unit id="faf120ddebe052c8dc6014a2841d031820c05adf" translate="yes" xml:space="preserve">
          <source>This module provides an Erlang shell.</source>
          <target state="translated">このモジュールはErlangシェルを提供します。</target>
        </trans-unit>
        <trans-unit id="ce785837b5ff1a707a464ab7d4098ba53cf3ddeb" translate="yes" xml:space="preserve">
          <source>This module provides an abstract type that is used by the Erlang Compiler and its helper modules for holding data such as column, line number, and text. The data type is a collection of &lt;strong id=&quot;annotations&quot;&gt;annotations&lt;/strong&gt; as described in the following.</source>
          <target state="translated">このモジュールは、Erlangコンパイラとそのヘルパーモジュールが列、行番号、テキストなどのデータを保持するために使用する抽象型を提供します。データ型は、以下で説明するように&lt;strong id=&quot;annotations&quot;&gt;注釈の&lt;/strong&gt;コレクションです。</target>
        </trans-unit>
        <trans-unit id="c240161f74f286924b1ecba60c9826a37e901d2d" translate="yes" xml:space="preserve">
          <source>This module provides an interface for loading and unloading &lt;strong&gt;Erlang linked-in drivers&lt;/strong&gt; in runtime.</source>
          <target state="translated">このモジュールは、ランタイム&lt;strong&gt;でErlangリンクインドライバー&lt;/strong&gt;をロードおよびアンロードするためのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="0d50e0a3798c5432e0aff3d79f28ece00952d5f8" translate="yes" xml:space="preserve">
          <source>This module provides an interface to a number of mathematical functions.</source>
          <target state="translated">このモジュールは、多くの数学関数へのインターフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="b5733344375dbedf0030d51fc4fa5b63269782bb" translate="yes" xml:space="preserve">
          <source>This module provides an interface to files created by the BEAM Compiler (&quot;BEAM files&quot;). The format used, a variant of &quot;EA IFF 1985&quot; Standard for Interchange Format Files, divides data into chunks.</source>
          <target state="translated">このモジュールは、BEAMコンパイラによって作成されたファイル(「BEAMファイル」)へのインターフェースを提供します。使用されるフォーマットは、&quot;EA IFF 1985&quot; Standard for Interchange Format Filesの変形で、データをチャンクに分割します。</target>
        </trans-unit>
        <trans-unit id="4c0abe15371bacb3988f25e8e42f9bd6deaa06d4" translate="yes" xml:space="preserve">
          <source>This module provides an interface to standard Erlang I/O servers. The output functions all return &lt;code&gt;ok&lt;/code&gt; if they are successful, or exit if they are not.</source>
          <target state="translated">このモジュールは、標準のErlang I / Oサーバーへのインターフェースを提供します。出力関数はすべて、成功した場合は &lt;code&gt;ok&lt;/code&gt; を返し、そうでない場合は終了します。</target>
        </trans-unit>
        <trans-unit id="bb92749dec61f65e77f765c953d790353efc379f" translate="yes" xml:space="preserve">
          <source>This module provides an interface to the file system.</source>
          <target state="translated">このモジュールは、ファイルシステムへのインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="0ea2060b34505717f9518e88bbe84cae8d4301f7" translate="yes" xml:space="preserve">
          <source>This module provides an interface to the standard Erlang compiler. It can generate either a new file, which contains the object code, or return a binary, which can be loaded directly.</source>
          <target state="translated">このモジュールは標準のErlangコンパイラへのインターフェースを提供します。オブジェクトコードを含む新しいファイルを生成したり、バイナリを返したりすることができます。</target>
        </trans-unit>
        <trans-unit id="1e596baf52d2a5d67161fc159d66bc7111b7496e" translate="yes" xml:space="preserve">
          <source>This module provides an interpreter for Erlang expressions. The expressions are in the abstract syntax as returned by &lt;code&gt;&lt;a href=&quot;erl_parse&quot;&gt;erl_parse&lt;/a&gt;&lt;/code&gt;, the Erlang parser, or &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、Erlang式のインタープリターを提供します。式は、 &lt;code&gt;&lt;a href=&quot;erl_parse&quot;&gt;erl_parse&lt;/a&gt;&lt;/code&gt; 、Erlangパーサー、または &lt;code&gt;&lt;a href=&quot;io&quot;&gt;io&lt;/a&gt;&lt;/code&gt; によって返される抽象的な構文にあります。</target>
        </trans-unit>
        <trans-unit id="71c532b071cf1e2933fea5e0754fde5565914b25" translate="yes" xml:space="preserve">
          <source>This module provides computation of local and universal time, day of the week, and many time conversion functions.</source>
          <target state="translated">このモジュールは、ローカルタイムとユニバーサルタイム、曜日、多くの時間変換関数の計算を提供します。</target>
        </trans-unit>
        <trans-unit id="f095529d267dab0aeb8e3b8b1364f61d105a9b58" translate="yes" xml:space="preserve">
          <source>This module provides for basic user authentication using textual files, Dets databases, or Mnesia databases.</source>
          <target state="translated">このモジュールは、テキストファイル、Detsデータベース、またはMnesiaデータベースを使用した基本的なユーザ認証を提供します。</target>
        </trans-unit>
        <trans-unit id="c9257a7b2b5d2a4ae1e7c3b4a499e70e6fee999d" translate="yes" xml:space="preserve">
          <source>This module provides functions for allocating and deallocating memory.</source>
          <target state="translated">このモジュールは、メモリの割り当てと解放のための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="d1acd3ec02989ce1863b1f9978f7179ed4f16a75" translate="yes" xml:space="preserve">
          <source>This module provides functions for analyzing and manipulating filenames. These functions are designed so that the Erlang code can work on many different platforms with different filename formats. With filename is meant all strings that can be used to denote a file. The filename can be a short relative name like &lt;code&gt;foo.erl&lt;/code&gt;, a long absolute name including a drive designator, a directory name like &lt;code&gt;D:\usr/local\bin\erl/lib\tools\foo.erl&lt;/code&gt;, or any variations in between.</source>
          <target state="translated">このモジュールは、ファイル名を分析および操作するための関数を提供します。これらの関数は、Erlangコードが異なるファイル名形式の多くの異なるプラットフォームで機能できるように設計されています。ファイル名とは、ファイルを示すために使用できるすべての文字列を意味します。ファイル名は、 &lt;code&gt;foo.erl&lt;/code&gt; のような短い相対名、ドライブ指定子を含む長い絶対名、 &lt;code&gt;D:\usr/local\bin\erl/lib\tools\foo.erl&lt;/code&gt; ようなディレクトリ名、またはその間の任意のバリエーションにすることができます。</target>
        </trans-unit>
        <trans-unit id="ba26786354c2721a7cffffe073a2f1107136ad72" translate="yes" xml:space="preserve">
          <source>This module provides functions for communicating with sockets using the SCTP protocol. The implementation assumes that the OS kernel supports SCTP &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;(RFC 2960)&lt;/a&gt;&lt;/code&gt; through the user-level &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、SCTPプロトコルを使用してソケットと通信するための関数を提供します。実装では、OSカーネルがユーザーレベルの &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions&lt;/a&gt;&lt;/code&gt; を介してSCTP &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;(RFC 2960)&lt;/a&gt;&lt;/code&gt; をサポートすることを前提としています。</target>
        </trans-unit>
        <trans-unit id="6237d5a917a923f45f8684296ea4f397f5ee1fec" translate="yes" xml:space="preserve">
          <source>This module provides functions for communicating with sockets using the TCP/IP protocol.</source>
          <target state="translated">本モジュールは、TCP/IPプロトコルを用いたソケット通信を行うための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="047ce7d569f63519c312507e77fc10e7a0abdd77" translate="yes" xml:space="preserve">
          <source>This module provides functions for communicating with sockets using the UDP protocol.</source>
          <target state="translated">UDP プロトコルを用いたソケット通信を行うための機能を提供します。</target>
        </trans-unit>
        <trans-unit id="4170af0d02bb4471c502310e774e78bff4f783ba" translate="yes" xml:space="preserve">
          <source>This module provides functions for creating and manipulating Erlang terms.</source>
          <target state="translated">このモジュールはErlang用語を作成・操作するための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="1e4339ab7b3c28859324758d30d70eff072c8031" translate="yes" xml:space="preserve">
          <source>This module provides functions for starting Erlang slave nodes. All slave nodes that are started by a master terminate automatically when the master terminates. All terminal output produced at the slave is sent back to the master node. File I/O is done through the master.</source>
          <target state="translated">このモジュールはErlangのスレーブノードを起動する機能を提供します。マスターによって起動されたすべてのスレーブノードは、マスターが終了すると自動的に終了します。スレーブで生成された全ての端末出力はマスターノードに送り返されます。ファイルI/Oはマスターを経由して行われます。</target>
        </trans-unit>
        <trans-unit id="b46a173f5bc0dfe98e3415de1917b5e2303db97e" translate="yes" xml:space="preserve">
          <source>This module provides functions for string processing.</source>
          <target state="translated">このモジュールは、文字列処理のための関数を提供します。</target>
        </trans-unit>
        <trans-unit id="fb4e067fc4ce218df6cee6a75080152b7287b4b0" translate="yes" xml:space="preserve">
          <source>This module provides operations on finite sets and relations represented as sets. Intuitively, a set is a collection of elements; every element belongs to the set, and the set contains every element.</source>
          <target state="translated">このモジュールは、有限集合と集合として表される関係に対する操作を提供します。直感的には、集合は要素の集合であり、すべての要素は集合に属し、集合はすべての要素を含みます。</target>
        </trans-unit>
        <trans-unit id="9b7c8f4236f4ac7c20019baf55ac92c3062eac4e" translate="yes" xml:space="preserve">
          <source>This module provides ordered sets using Prof. Arne Andersson's General Balanced Trees. Ordered sets can be much more efficient than using ordered lists, for larger sets, but depends on the application.</source>
          <target state="translated">このモジュールは、Arne Andersson教授の一般均衡木を用いた順序付き集合を提供します。順序付き集合は、より大きな集合に対して、順序付きリストを使うよりもはるかに効率的ですが、アプリケーションに依存します。</target>
        </trans-unit>
        <trans-unit id="ba40f5b3e99d275a596aa07c0dff3f599128accf" translate="yes" xml:space="preserve">
          <source>This module provides per-directory user configurable access control.</source>
          <target state="translated">このモジュールは、ディレクトリごとにユーザーが設定可能なアクセス制御を提供します。</target>
        </trans-unit>
        <trans-unit id="2c12c2072886f929b57ed6b57be79da289e76ef8" translate="yes" xml:space="preserve">
          <source>This module provides read and write access to the registry on Windows. It is essentially a port driver wrapped around the Win32 API calls for accessing the registry.</source>
          <target state="translated">このモジュールは、Windows上のレジストリへの読み書きアクセスを提供します。基本的には、レジストリにアクセスするための Win32 API 呼び出しをラップしたポートドライバです。</target>
        </trans-unit>
        <trans-unit id="c778b6bf3c6ceb257250b7ae833621c36f93fd49" translate="yes" xml:space="preserve">
          <source>This module provides some limited support for concurrent access. All updates to single objects are guaranteed to be both &lt;strong&gt;atomic&lt;/strong&gt; and &lt;strong&gt;isolated&lt;/strong&gt;. This means that an updating operation to a single object either succeeds or fails completely without any effect (atomicity) and that no intermediate results of the update can be seen by other processes (isolation). Some functions that update many objects state that they even guarantee atomicity and isolation for the entire operation. In database terms the isolation level can be seen as &quot;serializable&quot;, as if all isolated operations are carried out serially, one after the other in a strict order.</source>
          <target state="translated">このモジュールは、同時アクセスの一部の制限付きサポートを提供します。単一のオブジェクトに対するすべての更新は、&lt;strong&gt;アトミック&lt;/strong&gt;かつ&lt;strong&gt;分離&lt;/strong&gt;されていることが保証されています。これは、単一のオブジェクトへの更新操作が成功または完全に失敗し、影響（原子性）がなく、更新の中間結果が他のプロセス（分離）から見えないことを意味します。多くのオブジェクトを更新する一部の関数は、操作全体の原子性と分離さえ保証すると述べています。データベースの観点では、分離レベルは「直列化可能」と見なすことができ、分離されたすべての操作が厳密な順序で次々に連続して実行されるかのように見えます。</target>
        </trans-unit>
        <trans-unit id="e080461e2e77686f66945fda37287e52c6b43e16" translate="yes" xml:space="preserve">
          <source>This module provides support for communication between distributed Erlang nodes and C-nodes, in a manner that is transparent to Erlang processes.</source>
          <target state="translated">このモジュールは分散したErlangノードとCノード間の通信を、Erlangプロセスに透過的な方法でサポートします。</target>
        </trans-unit>
        <trans-unit id="9dd15c5a43f249c41879dce22695542c08e92337" translate="yes" xml:space="preserve">
          <source>This module provides support for registering, looking up, and unregistering names in the &lt;code&gt;global&lt;/code&gt; module. For more information, see &lt;code&gt;kernel:global&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;global&lt;/code&gt; モジュールでの名前の登録、検索、および登録解除をサポートします。詳細については、 &lt;code&gt;kernel:global&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="acc44f686954a04de29fbc3692f9d04d65486748" translate="yes" xml:space="preserve">
          <source>This module provides support for storing key-value pairs in a table known as a registry, backing up registries to &lt;code&gt;Mnesia&lt;/code&gt; in an atomic manner, and later restoring the contents of a registry from &lt;code&gt;Mnesia&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、レジストリと呼ばれるテーブルにキーと値のペアを格納し、アトミックな方法でレジストリを &lt;code&gt;Mnesia&lt;/code&gt; にバックアップし、後で &lt;code&gt;Mnesia&lt;/code&gt; からレジストリのコンテンツを復元するためのサポートを提供します。</target>
        </trans-unit>
        <trans-unit id="c4fb892b992e614adc88b69df82b17ae13945733" translate="yes" xml:space="preserve">
          <source>This module provides the API to an HTTP/1.1 compatible client according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;. Caching is not supported.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; に従って、HTTP / 1.1互換クライアントにAPIを提供します。キャッシングはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="6480b6d56431c3c7e09177c0ce29744efb2ce799" translate="yes" xml:space="preserve">
          <source>This module provides the Erlang web server API module programmer with miscellaneous utility functions.</source>
          <target state="translated">このモジュールはErlangのWebサーバAPIモジュールプログラマに雑多なユーティリティ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="0b8c5916e2632e665c5b2f5f52d5c56b0a93bc00" translate="yes" xml:space="preserve">
          <source>This module provides the Erlang web server API module programmer with utility functions for generic sockets communication. The appropriate communication mechanism is transparently used, that is, &lt;code&gt;ip_comm&lt;/code&gt; or &lt;code&gt;ssl&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、Erlang WebサーバーAPIモジュールプログラマーに、汎用ソケット通信用のユーティリティ関数を提供します。適切な通信メカニズムが透過的に使用され &lt;code&gt;ssl&lt;/code&gt; 。つまり、 &lt;code&gt;ip_comm&lt;/code&gt; またはsslです。</target>
        </trans-unit>
        <trans-unit id="4a178749a79e6fb26e39ef05fff26033dce75ac3" translate="yes" xml:space="preserve">
          <source>This module provides the interface with which a user can implement a Diameter node that sends and receives messages using the Diameter protocol as defined in RFC 6733.</source>
          <target state="translated">このモジュールは、RFC6733で定義されているDiameterプロトコルを用いてメッセージを送受信するDiameterノードを実装するためのインタフェースを提供します。</target>
        </trans-unit>
        <trans-unit id="2290d99631f95e83db0417df2bd64d3d9576bcac" translate="yes" xml:space="preserve">
          <source>This module provides the most basic API to the clients and servers that are part of the &lt;code&gt;Inets&lt;/code&gt; application, such as start and stop.</source>
          <target state="translated">このモジュールは、開始や停止など、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションの一部であるクライアントおよびサーバーに最も基本的なAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="c2dc289d587182daff0825395e7477905794ef0d" translate="yes" xml:space="preserve">
          <source>This module provides the parse transformation that makes calls to &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ets&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; translate into literal match specifications. It also provides the back end for the same functions when called from the Erlang shell.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;ets&quot;&gt;ets&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; への呼び出しをリテラル一致指定に変換する解析変換を提供します。また、Erlangシェルから呼び出されたときに同じ関数のバックエンドを提供します。</target>
        </trans-unit>
        <trans-unit id="721a3117429eceb8f061f5e2899bcbfb40bdf110" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;dict&quot;&gt;dict(3)&lt;/a&gt;&lt;/code&gt; module but with a defined representation. One difference is that while &lt;code&gt;dict&lt;/code&gt; considers two keys as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), this module considers two keys as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは &lt;code&gt;&lt;a href=&quot;dict&quot;&gt;dict(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供しますが、定義が定義されています。1つの違いは、 &lt;code&gt;dict&lt;/code&gt; は2つのキーが一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）は異なると見なしますが、このモジュールは2つのキーが等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）の場合のみ、2つのキーが異なると見なします。</target>
        </trans-unit>
        <trans-unit id="f2cfe02c9b447eb5cee32eb141157e31208af9a7" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;orddict&quot;&gt;orddict(3)&lt;/a&gt;&lt;/code&gt; module. One difference is that while this module considers two keys as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), &lt;code&gt;orddict&lt;/code&gt; considers two keys as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;orddict&quot;&gt;orddict(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供します。1つの違いは、このモジュールでは2つのキーが一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）は &lt;code&gt;orddict&lt;/code&gt; と見なされますが、orddictは2つのキーが等しいと比較されない場合（ &lt;code&gt;==&lt;/code&gt; ）の場合のみ、2つのキーが異なると見なされることです。</target>
        </trans-unit>
        <trans-unit id="38d6e52db1a80893122e1c828b20e43583ef95f9" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;ordsets&quot;&gt;ordsets(3)&lt;/a&gt;&lt;/code&gt; module but with an undefined representation. One difference is that while this module considers two elements as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), &lt;code&gt;ordsets&lt;/code&gt; considers two elements as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;ordsets&quot;&gt;ordsets(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェースを提供しますが、未定義の表現を備えています。1つの違いは、このモジュールは2つの要素が一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）は &lt;code&gt;ordsets&lt;/code&gt; と見なしますが、ordsetsは2つの要素が等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）の場合に限り、2つの要素が異なると見なすことです。</target>
        </trans-unit>
        <trans-unit id="6fff0aaa0429816efbfd85cd732dd006ea6157aa" translate="yes" xml:space="preserve">
          <source>This module provides the same interface as the &lt;code&gt;&lt;a href=&quot;sets&quot;&gt;sets(3)&lt;/a&gt;&lt;/code&gt; module but with a defined representation. One difference is that while &lt;code&gt;sets&lt;/code&gt; considers two elements as different if they do not match (&lt;code&gt;=:=&lt;/code&gt;), this module considers two elements as different if and only if they do not compare equal (&lt;code&gt;==&lt;/code&gt;).</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;sets&quot;&gt;sets(3)&lt;/a&gt;&lt;/code&gt; モジュールと同じインターフェイスを提供しますが、表現が定義されています。1つの違いは、 &lt;code&gt;sets&lt;/code&gt; は2つの要素が一致しない場合（ &lt;code&gt;=:=&lt;/code&gt; ）は異なると見なしますが、このモジュールは2つの要素が等しいと比較しない場合（ &lt;code&gt;==&lt;/code&gt; ）の場合のみ、2つの要素が異なると見なします。</target>
        </trans-unit>
        <trans-unit id="742e632c6552d16bd6d478a7d1daf12903965f79" translate="yes" xml:space="preserve">
          <source>This module provides useful functions related to time. Unless otherwise stated, time is always measured in &lt;strong&gt;milliseconds&lt;/strong&gt;. All timer functions return immediately, regardless of work done by another process.</source>
          <target state="translated">このモジュールは、時間に関連する便利な機能を提供します。特に明記しない限り、時間は常に&lt;strong&gt;ミリ秒単位で&lt;/strong&gt;測定され&lt;strong&gt;ます&lt;/strong&gt;。他のプロセスによって行われた作業に関係なく、すべてのタイマー関数はすぐに戻ります。</target>
        </trans-unit>
        <trans-unit id="b7d4e83f9e995a297aeebc8e6a32d2dba035f338" translate="yes" xml:space="preserve">
          <source>This module provides utility functions for working with URIs, according to &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュールは、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; に従って、URIを操作するためのユーティリティ関数を提供します。</target>
        </trans-unit>
        <trans-unit id="69116d4fbcf6560d1469aa6a1f54ad5b50520175" translate="yes" xml:space="preserve">
          <source>This module replaces ssh_channel.</source>
          <target state="translated">このモジュールは ssh_channel を置き換えます。</target>
        </trans-unit>
        <trans-unit id="e4595252d25beb7eb4255174f697d15c0830a38f" translate="yes" xml:space="preserve">
          <source>This module replaces ssh_daemon_channel.</source>
          <target state="translated">このモジュールは ssh_daemon_channel を置き換えます。</target>
        </trans-unit>
        <trans-unit id="8aeeae3a06e268738003ec9e46ac483c94be8f5b" translate="yes" xml:space="preserve">
          <source>This module responses to requests for one or many ranges of a file. This is especially useful when downloading large files, as a broken download can be resumed.</source>
          <target state="translated">このモジュールは、ファイルの一つまたは複数の範囲に対するリクエストに応答します。これは大きなファイルをダウンロードするときに特に便利です。</target>
        </trans-unit>
        <trans-unit id="181bfa906d54214c120e83123d1185ab071fc48e" translate="yes" xml:space="preserve">
          <source>This module runs CGI scripts whenever a file of a certain type or HTTP method (see &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1945&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt;) is requested.</source>
          <target state="translated">このモジュールは、特定のタイプのファイルまたはHTTPメソッド（ &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/rfc1945&quot;&gt;RFC 1945&lt;/a&gt;&lt;/code&gt; を参照）のファイルが要求されるたびにCGIスクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="6cf32be7983eb16f31b4b6b42dc9e21cb5289f56" translate="yes" xml:space="preserve">
          <source>This module tokenises and parses most Erlang source code without expanding preprocessor directives and macro applications, as long as these are syntactically &quot;well-behaved&quot;. Because the normal parse trees of the &lt;code&gt;erl_parse&lt;/code&gt; module cannot represent these things (normally, they are expanded by the Erlang preprocessor &lt;code&gt;epp(3)&lt;/code&gt; before the parser sees them), an extended syntax tree is created, using the &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">このモジュールは、プリプロセッサディレクティブとマクロアプリケーションを拡張することなく、構文的に「適切に動作する」限り、ほとんどのErlangソースコードをトークン化して解析します。 &lt;code&gt;erl_parse&lt;/code&gt; モジュールの通常の解析ツリーはこれらのものを表すことができないため（通常、それらはパーサーが認識する前にErlangプリプロセッサー &lt;code&gt;epp(3)&lt;/code&gt; によって展開されます）、拡張構文ツリーが &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; モジュールを使用して作成されます。</target>
        </trans-unit>
        <trans-unit id="5da9ff3bf77e5f995d90689278c7a23b1597c8bb" translate="yes" xml:space="preserve">
          <source>This module uses a current key. It works much like the current directory. From the current key, values can be fetched, subkeys can be listed, and so on.</source>
          <target state="translated">このモジュールはカレントキーを使用します。カレントディレクトリと同じように動作します。カレントキーから値を取得したり、サブキーをリストアップしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="ba20fa4df70d15689e43b0f44c7517efe1b08358" translate="yes" xml:space="preserve">
          <source>This module uses application &lt;code&gt;SSH&lt;/code&gt;, which provides detailed information about, for example, functions, types, and options.</source>
          <target state="translated">このモジュールは、アプリケーションの &lt;code&gt;SSH&lt;/code&gt; を使用します。これは、関数、タイプ、オプションなどの詳細情報を提供します。</target>
        </trans-unit>
        <trans-unit id="c27440a34997ba37bea9913114676bb50554dcae" translate="yes" xml:space="preserve">
          <source>This module was written for one-to-many style sockets (type &lt;code&gt;seqpacket&lt;/code&gt;). With the addition of &lt;code&gt;&lt;a href=&quot;#peeloff-2&quot;&gt;peeloff/2&lt;/a&gt;&lt;/code&gt;, one-to-one style sockets (type &lt;code&gt;stream&lt;/code&gt;) were introduced.</source>
          <target state="translated">このモジュールは、1対多スタイルのソケット（タイプ &lt;code&gt;seqpacket&lt;/code&gt; ）用に作成されました。 &lt;code&gt;&lt;a href=&quot;#peeloff-2&quot;&gt;peeloff/2&lt;/a&gt;&lt;/code&gt; 追加により、1対1スタイルのソケット（ &lt;code&gt;stream&lt;/code&gt; タイプ）が導入されました。</target>
        </trans-unit>
        <trans-unit id="606223ff437db337a77e6be8dc6a090de4bc5931" translate="yes" xml:space="preserve">
          <source>This modules contains the interface to the &lt;code&gt;heart&lt;/code&gt; process. &lt;code&gt;heart&lt;/code&gt; sends periodic heartbeats to an external port program, which is also named &lt;code&gt;heart&lt;/code&gt;. The purpose of the &lt;code&gt;heart&lt;/code&gt; port program is to check that the Erlang runtime system it is supervising is still running. If the port program has not received any heartbeats within &lt;code&gt;HEART_BEAT_TIMEOUT&lt;/code&gt; seconds (defaults to 60 seconds), the system can be rebooted.</source>
          <target state="translated">このモジュールには、 &lt;code&gt;heart&lt;/code&gt; プロセスへのインターフェースが含まれています。 &lt;code&gt;heart&lt;/code&gt; また、命名された外部ポートプログラム、定期的にハートビートを送信 &lt;code&gt;heart&lt;/code&gt; 。 &lt;code&gt;heart&lt;/code&gt; ポートプログラムの目的は、監視しているErlangランタイムシステムがまだ実行中であることを確認することです。ポートプログラムが &lt;code&gt;HEART_BEAT_TIMEOUT&lt;/code&gt; 秒（デフォルトは60秒）以内にハートビートを受信しなかった場合、システムを再起動できます。</target>
        </trans-unit>
        <trans-unit id="a2f8a20f0be71ce686a1d45af49ce482f6a78d69" translate="yes" xml:space="preserve">
          <source>This must however be done with care, as function &lt;code&gt;{return_trace}&lt;/code&gt; in the match specification destroys tail recursiveness.</source>
          <target state="translated">ただし、一致指定の関数 &lt;code&gt;{return_trace}&lt;/code&gt; が末尾の再帰性を破壊するため、これは注意して行う必要があります。</target>
        </trans-unit>
        <trans-unit id="68582ac86e79db46d57ee06207c511b4a861bfb5" translate="yes" xml:space="preserve">
          <source>This node uses some master nodes to store and fetch release information. All master nodes must be operational whenever release information is written by this node.</source>
          <target state="translated">このノードは、いくつかのマスター・ノードを使用してリリース情報を格納し、フェッチします。このノードによってリリース情報が書き込まれるときはいつでも、すべてのマスターノードが動作していなければなりません。</target>
        </trans-unit>
        <trans-unit id="e2b52bf50e58c3cc457e61abee1b9f82215c9813" translate="yes" xml:space="preserve">
          <source>This node.</source>
          <target state="translated">このノード</target>
        </trans-unit>
        <trans-unit id="768833241e4c41a51c30053841c9a5be0a33a799" translate="yes" xml:space="preserve">
          <source>This now works as expected:</source>
          <target state="translated">これで期待通りに動作するようになりました。</target>
        </trans-unit>
        <trans-unit id="4858903cb179e40729be5206f937b3196b299dba" translate="yes" xml:space="preserve">
          <source>This of course requires your editor to support UTF-8 as well. The same comment is also interpreted by functions like &lt;code&gt;file:consult/1&lt;/code&gt;, the release handler, and so on, so that you can have all text files in your source directories in UTF-8 encoding.</source>
          <target state="translated">もちろん、これにはエディターがUTF-8もサポートする必要があります。同じコメントは &lt;code&gt;file:consult/1&lt;/code&gt; やリリースハンドラーなどの関数によっても解釈されるため、すべてのテキストファイルをUTF-8エンコードでソースディレクトリに格納できます。</target>
        </trans-unit>
        <trans-unit id="dfffe74a9c7d9d5e838ee7506a86798e8b02c78d" translate="yes" xml:space="preserve">
          <source>This off-line utility function can be used to convert the old snmp application config (pre snmp-4.0) to the new snmp agent config (as of snmp-4.0).</source>
          <target state="translated">このオフラインユーティリティ関数は、古いsnmpアプリケーション設定(snmp-4.0以前)を新しいsnmpエージェント設定(snmp-4.0時点)に変換するために使用できます。</target>
        </trans-unit>
        <trans-unit id="bb2b5100380724d761bb0b871c669f6341e1d19e" translate="yes" xml:space="preserve">
          <source>This only applies if Erlang is started as a distributed node, i.e. if &lt;code&gt;-name&lt;/code&gt; or &lt;code&gt;-sname&lt;/code&gt; is specified. Otherwise, epmd is not started even if &lt;code&gt;-start_epmd true&lt;/code&gt; is given.</source>
          <target state="translated">これは、Erlangが分散ノードとして起動されている場合、つまり &lt;code&gt;-name&lt;/code&gt; または &lt;code&gt;-sname&lt;/code&gt; が指定されている場合にのみ適用されます。それ以外の場合、-start_epmd &lt;code&gt;-start_epmd true&lt;/code&gt; が指定されていても、epmdは開始されません。</target>
        </trans-unit>
        <trans-unit id="36578cd782b1b1c7c098e80e28d83efcfb473d12" translate="yes" xml:space="preserve">
          <source>This operation is best described with an example.</source>
          <target state="translated">この操作は、例を挙げて説明するのが最適です。</target>
        </trans-unit>
        <trans-unit id="726740b93f9a38ad69503060d61e78fcfc4ed2e8" translate="yes" xml:space="preserve">
          <source>This operation returns both configuration and state data from the server.</source>
          <target state="translated">この操作は、サーバから設定と状態の両方のデータを返します。</target>
        </trans-unit>
        <trans-unit id="c28d8949e39a67d4d2b916902211267c2c1b4e17" translate="yes" xml:space="preserve">
          <source>This option and option &lt;code&gt;match_limit&lt;/code&gt; are only to be used in rare cases. Understanding of the PCRE library internals is recommended before tampering with these limits.</source>
          <target state="translated">このオプションとオプション &lt;code&gt;match_limit&lt;/code&gt; は、まれなケースでのみ使用されます。これらの制限を改ざんする前に、PCREライブラリの内部を理解することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b28bd6e66a4a300d7c55eecf5ec9dbf9fcd4dd0a" translate="yes" xml:space="preserve">
          <source>This option appears to be VERY Linux specific, and its existence in future Linux kernel versions is also worrying since the option is part of RFC 2292 which is since long (2003) obsoleted by RFC 3542 that &lt;strong&gt;explicitly&lt;/strong&gt; removes this possibility to get packet information from a stream socket. For comparision: it has existed in FreeBSD but is now removed, at least since FreeBSD 10.</source>
          <target state="translated">このオプションは非常にLinux固有のようであり、将来のLinuxカーネルバージョンでの存在も心配です。このオプションはRFC 2292の一部であり、RFC 3542によって廃止されて以来、このオプションからパケット情報を取得する可能性を&lt;strong&gt;明示的に&lt;/strong&gt;削除しているためです。ストリームソケット。比較のために：それはFreeBSDに存在していましたが、少なくともFreeBSD10以降は削除されました。</target>
        </trans-unit>
        <trans-unit id="6f9af6a987f2d3bf6639d97909039e3b4c47dc6a" translate="yes" xml:space="preserve">
          <source>This option augments the host name extraction from URIs and other Reference IDs. It could for example be a very special URI that is not standardised. The fun takes a Reference ID as argument and returns one of:</source>
          <target state="translated">このオプションは、URIやその他の参照IDからのホスト名の抽出を拡張します。例えば、標準化されていない非常に特殊なURIなどが考えられます。funは引数にReference IDを取り、以下のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="21da80d80de6786a8c35eb55211f1719f7ad6a3e" translate="yes" xml:space="preserve">
          <source>This option can also be used to override the default renaming of calls which use obsolete function names.</source>
          <target state="translated">このオプションを使用すると、廃止された関数名を使用するコールのデフォルトの名前変更をオーバーライドすることもできます。</target>
        </trans-unit>
        <trans-unit id="cdb004a99221b3f8badd722205d40d87fd8410dc" translate="yes" xml:space="preserve">
          <source>This option can be used for adding members to a distributed disk log. Defaults to &lt;code&gt;[]&lt;/code&gt;, which means that the log is local on the current node.</source>
          <target state="translated">このオプションは、分散ディスクログにメンバーを追加するために使用できます。デフォルトは &lt;code&gt;[]&lt;/code&gt; です。これは、ログが現在のノードでローカルであることを意味します。</target>
        </trans-unit>
        <trans-unit id="23765e948e554b57ee502bc4f444d5a5c23a77a3" translate="yes" xml:space="preserve">
          <source>This option changes how the daemon execute exec-requests from clients. The term in the return value is formatted to a string if it is a non-string type. No trailing newline is added in the ok-case but in the error case.</source>
          <target state="translated">このオプションは、デーモンがクライアントからのexec-requestsを実行する方法を変更します。戻り値の用語は、非文字列型であれば文字列にフォーマットされます。okケースでは末尾の改行は追加されませんが、エラーケースでは追加されます。</target>
        </trans-unit>
        <trans-unit id="cf09fbce9857f3de6b83082c36031fa1a2e47db0" translate="yes" xml:space="preserve">
          <source>This option changes how the daemon executes exec-requests from clients. The term in the return value is formatted to a string if it is a non-string type. No trailing newline is added in the ok-case.</source>
          <target state="translated">このオプションは、デーモンがクライアントからの exec-requests を実行する方法を変更します。戻り値の用語は、非文字列型の場合、文字列にフォーマットされます。ok-caseには末尾の改行は追加されません。</target>
        </trans-unit>
        <trans-unit id="53106c8ee8480a565ca1694a5aee9779aed8d667" translate="yes" xml:space="preserve">
          <source>This option changes the representation of the types &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; to use maps (instead of records). This option also suppresses the generation of &lt;code&gt;.hrl&lt;/code&gt; files.</source>
          <target state="translated">このオプションは、（レコードではなく）マップを使用するようにタイプ &lt;code&gt;SEQUENCE&lt;/code&gt; および &lt;code&gt;SET&lt;/code&gt; の表現を変更します。このオプションは、 &lt;code&gt;.hrl&lt;/code&gt; ファイルの生成も抑制します。</target>
        </trans-unit>
        <trans-unit id="91dab051c90259277cd95566eff3cf880c2a9995" translate="yes" xml:space="preserve">
          <source>This option controls the debug level of &lt;code&gt;wx&lt;/code&gt;. As its name indicates it is only useful for debugging. See &lt;code&gt;wx:debug/1&lt;/code&gt; for more info.</source>
          <target state="translated">このオプションは、 &lt;code&gt;wx&lt;/code&gt; のデバッグレベルを制御します。その名前が示すように、デバッグにのみ役立ちます。詳細については、 &lt;code&gt;wx:debug/1&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7ec5e0644c323d96923ea009ec73a058e3e14790" translate="yes" xml:space="preserve">
          <source>This option controls the error handling behavior of Reltool. By default the window processes traps exit, but this behavior can altered by setting &lt;code&gt;trap_exit&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">このオプションは、Reltoolのエラー処理動作を制御します。デフォルトでは、ウィンドウはトラップ終了を処理しますが、この動作は &lt;code&gt;trap_exit&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定することで変更できます。</target>
        </trans-unit>
        <trans-unit id="c7e73575c5bb05401f153a1b408d8ff447357a91" translate="yes" xml:space="preserve">
          <source>This option defaults to &lt;code&gt;true&lt;/code&gt; for backwards compatibility but we intend to remove the exception behavior in a future release. New code that needs to handle dictionaries manually should always specify &lt;code&gt;{exception_on_need_dict,false}&lt;/code&gt;.</source>
          <target state="translated">後方互換性のために、このオプションのデフォルトは &lt;code&gt;true&lt;/code&gt; ですが、将来のリリースでは例外動作を削除する予定です。辞書を手動で処理する必要がある新しいコードでは、常に &lt;code&gt;{exception_on_need_dict,false}&lt;/code&gt; 指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="24e5307f642c6711e98aa1e1851a0012231dc221" translate="yes" xml:space="preserve">
          <source>This option defines how the manager will handle the sending of response (acknowledgment) to received inform-requests.</source>
          <target state="translated">このオプションは、受信した情報要求に対する応答(確認応答)の送信をマネージャがどのように処理するかを定義します。</target>
        </trans-unit>
        <trans-unit id="0b065ec1d28b81abfd2469427265be5e95f2a102" translate="yes" xml:space="preserve">
          <source>This option determines which &lt;code&gt;&lt;a href=&quot;#sctp_events&quot;&gt;SCTP Events&lt;/a&gt;&lt;/code&gt; are to be received (through &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt;) along with the data. The only exception is &lt;code&gt;data_io_event&lt;/code&gt;, which enables or disables receiving of &lt;code&gt;&lt;a href=&quot;#record-sctp_sndrcvinfo&quot;&gt;#sctp_sndrcvinfo{}&lt;/a&gt;&lt;/code&gt; ancillary data, not events. By default, all flags except &lt;code&gt;adaptation_layer_event&lt;/code&gt; are enabled, although &lt;code&gt;sctp_data_io_event&lt;/code&gt; and &lt;code&gt;association_event&lt;/code&gt; are used by the driver itself and not exported to the user level.</source>
          <target state="translated">このオプションは、データとともに（ &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; を介して）受信する &lt;code&gt;&lt;a href=&quot;#sctp_events&quot;&gt;SCTP Events&lt;/a&gt;&lt;/code&gt; 決定します。唯一の例外は &lt;code&gt;data_io_event&lt;/code&gt; で、イベントではなく &lt;code&gt;&lt;a href=&quot;#record-sctp_sndrcvinfo&quot;&gt;#sctp_sndrcvinfo{}&lt;/a&gt;&lt;/code&gt; 補助データの受信を有効または無効にします。デフォルトでは、除くすべてのフラグ &lt;code&gt;adaptation_layer_event&lt;/code&gt; はあるが、有効になっている &lt;code&gt;sctp_data_io_event&lt;/code&gt; と &lt;code&gt;association_event&lt;/code&gt; は、ドライバ自体によって使用され、ユーザレベルにエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="1f54c1964a5e915a3b9d8124e81def1141091a66" translate="yes" xml:space="preserve">
          <source>This option does in no way affect the execution of the Erlang VM in terms of &quot;long running BIFs&quot;. &lt;code&gt;run/3&lt;/code&gt; always gives control back to the scheduler of Erlang processes at intervals that ensures the real-time properties of the Erlang system.</source>
          <target state="translated">このオプションは、「長期実行BIF」に関して、Erlang VMの実行に影響を与えることはありません。 &lt;code&gt;run/3&lt;/code&gt; は常に、Erlangシステムのリアルタイムプロパティを保証する間隔で、Erlangプロセスのスケジューラに制御を戻します。</target>
        </trans-unit>
        <trans-unit id="6af47b199e89cf536046513882864286cab54688" translate="yes" xml:space="preserve">
          <source>This option does not guarantee exclusiveness on file systems not supporting &lt;code&gt;O_EXCL&lt;/code&gt; properly, such as NFS. Do not depend on this option unless you know that the file system supports it (in general, local file systems are safe).</source>
          <target state="translated">このオプションは、NFSなどの &lt;code&gt;O_EXCL&lt;/code&gt; を適切にサポートしていないファイルシステムの排他性を保証しません。ファイルシステムがサポートしていることがわかっている場合を除き、このオプションに依存しないでください（通常、ローカルファイルシステムは安全です）。</target>
        </trans-unit>
        <trans-unit id="170942e99acf8590a0f93f95af96a97ad9b43a74" translate="yes" xml:space="preserve">
          <source>This option guides the &lt;code&gt;connect&lt;/code&gt; function on how to act when the connected server presents a Host Key that the client has not seen before. The default is to ask the user with a question on stdio of whether to accept or reject the new Host Key. See the option &lt;code&gt;&lt;a href=&quot;#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; for specifying the path to the file &lt;code&gt;known_hosts&lt;/code&gt; where previously accepted Host Keys are recorded. See also the option &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; for the general way to handle keys.</source>
          <target state="translated">このオプションは、接続されたサーバーが、クライアントがこれまでに見たことのないホストキーを提示する場合の動作方法について、 &lt;code&gt;connect&lt;/code&gt; 機能をガイドします。デフォルトでは、stdioで新しいホストキーを受け入れるか拒否するかをユーザーに尋ねます。以前に受け入れられたホスト鍵が記録されている &lt;code&gt;known_hosts&lt;/code&gt; ファイルへのパスの指定については、オプション &lt;code&gt;&lt;a href=&quot;#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; を参照してください。キーを処理する一般的な方法については、オプション &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="e49306537910a313e44ea71c528fe60f8dac74f8" translate="yes" xml:space="preserve">
          <source>This option guides the &lt;code&gt;connect&lt;/code&gt; function on how to act when the connected server presents a Host Key that the client has not seen before. The default is to ask the user with a question on stdio of whether to accept or reject the new Host Key. See the option &lt;code&gt;&lt;a href=&quot;ssh_file#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; for specifying the path to the file &lt;code&gt;known_hosts&lt;/code&gt; where previously accepted Host Keys are recorded. See also the option &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; for the general way to handle keys.</source>
          <target state="translated">このオプションは、接続されたサーバーがクライアントがこれまでに見たことのないホストキーを提示した場合の動作方法に関する &lt;code&gt;connect&lt;/code&gt; 機能をガイドします。デフォルトでは、新しいホストキーを受け入れるか拒否するかについてstdioに関する質問をユーザーに尋ねます。以前に受け入れられたホストキーが記録されるファイル &lt;code&gt;known_hosts&lt;/code&gt; へのパスを指定するには、オプション &lt;code&gt;&lt;a href=&quot;ssh_file#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; を参照してください。キーを処理する一般的な方法については、オプション &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9a3735f5d136203b9a8fbbbce887101fdaa70466" translate="yes" xml:space="preserve">
          <source>This option handles padding in the last block. If not set, no padding is done and any bytes in the last unfilled block is silently discarded.</source>
          <target state="translated">このオプションは、最後のブロックのパディングを処理します。設定されていない場合、パディングは行われず、最後の埋められていないブロック内のすべてのバイトが静かに破棄されます。</target>
        </trans-unit>
        <trans-unit id="e2f90278834c86b23c99e6715014b42f0de28741" translate="yes" xml:space="preserve">
          <source>This option has no effect when the function is given an I/O device instead of a file name. Use &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; with the &lt;code&gt;raw&lt;/code&gt; mode to obtain a file descriptor first.</source>
          <target state="translated">このオプションは、関数にファイル名の代わりにI / Oデバイスが指定されている場合は効果がありません。最初にファイル記述子を取得するには、 &lt;code&gt;raw&lt;/code&gt; モードで &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="9f681818b307476626695654e1f4af8954537ac9" translate="yes" xml:space="preserve">
          <source>This option implies option &lt;code&gt;legacy_erlang_types&lt;/code&gt;.</source>
          <target state="translated">このオプションは、オプション &lt;code&gt;legacy_erlang_types&lt;/code&gt; を意味します。</target>
        </trans-unit>
        <trans-unit id="1b7df27500f11cd0120772f370d99f496bc69623" translate="yes" xml:space="preserve">
          <source>This option indicates weather the request should be resent until the reply is received, &lt;strong&gt;even&lt;/strong&gt; though a pending message has been received.</source>
          <target state="translated">このオプションは、保留中のメッセージが受信されていて&lt;strong&gt;も&lt;/strong&gt;、応答が受信されるまで要求を再送信する必要があるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="6ee2dcf0c6730f63f33d0e9b597dde90cc7553c6" translate="yes" xml:space="preserve">
          <source>This option indicates weather the transport module should be told if a message send is a resend or not.</source>
          <target state="translated">このオプションは、送信するメッセージが再送であるかどうかをトランスポートモジュー ルに伝えるべきかどうかを示す。</target>
        </trans-unit>
        <trans-unit id="f41d25f928d777038d78ec54aa87e0b2645ebe41" translate="yes" xml:space="preserve">
          <source>This option interacts with &lt;code&gt;&lt;a href=&quot;#+S&quot;&gt;+S&lt;/a&gt;&lt;/code&gt; settings. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options &lt;code&gt;+S 4:4 +SP 50:25&lt;/code&gt; (in either order) results in 2 scheduler threads (50% of 4) and 1 scheduler thread online (25% of 4).</source>
          <target state="translated">このオプションは、 &lt;code&gt;&lt;a href=&quot;#+S&quot;&gt;+S&lt;/a&gt;&lt;/code&gt; 設定と相互作用します。たとえば、8つの論理コアが構成され、8つの論理コアが使用可能なシステムでは、オプション &lt;code&gt;+S 4:4 +SP 50:25&lt;/code&gt; （どちらの順序でも）の組み合わせにより、2つのスケジューラスレッド（4の50％）と1オンラインのスケジューラスレッド（4の25％）。</target>
        </trans-unit>
        <trans-unit id="f69d8c25bc614477e7fde4538f00fb8866b22040" translate="yes" xml:space="preserve">
          <source>This option interacts with &lt;code&gt;&lt;a href=&quot;#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt; settings. For example, on a system with 8 logical cores configured and 8 logical cores available, the combination of the options &lt;code&gt;+SDcpu 4:4 +SDPcpu 50:25&lt;/code&gt; (in either order) results in 2 dirty CPU scheduler threads (50% of 4) and 1 dirty CPU scheduler thread online (25% of 4).</source>
          <target state="translated">このオプションは、 &lt;code&gt;&lt;a href=&quot;#+SDcpu&quot;&gt;+SDcpu&lt;/a&gt;&lt;/code&gt; 設定と相互作用します。たとえば、8つの論理コアが構成され、8つの論理コアが使用可能なシステムでは、オプション &lt;code&gt;+SDcpu 4:4 +SDPcpu 50:25&lt;/code&gt; （どちらの順序でも）を組み合わせると、2つのダーティCPUスケジューラスレッド（4の50％）になります。 1つのダーティCPUスケジューラスレッドがオンライン（4の25％）。</target>
        </trans-unit>
        <trans-unit id="1b1652a93096a292ea9f23a8fb30440e0918cbec" translate="yes" xml:space="preserve">
          <source>This option is a fast way to test whether a module will compile successfully. This is useful for code generators that want to verify the code that they emit. No code is generated. If warnings are enabled, warnings generated by the &lt;code&gt;erl_lint&lt;/code&gt; module (such as warnings for unused variables and functions) are also returned.</source>
          <target state="translated">このオプションは、モジュールが正常にコンパイルされるかどうかをテストする高速な方法です。これは、コードジェネレーターが発行するコードを検証する場合に役立ちます。コードは生成されません。警告が有効になっている場合、 &lt;code&gt;erl_lint&lt;/code&gt; モジュールによって生成された警告（未使用の変数や関数に対する警告など）も返されます。</target>
        </trans-unit>
        <trans-unit id="0bc4c98f53e89f54019044a7876ab12f92896246" translate="yes" xml:space="preserve">
          <source>This option is experimental.</source>
          <target state="translated">このオプションは実験的なものです。</target>
        </trans-unit>
        <trans-unit id="bebef7a4d11a54b9572f9f20a10693f30204b1e4" translate="yes" xml:space="preserve">
          <source>This option is highly recommended. It makes &lt;code&gt;run_erl&lt;/code&gt; run in the background completely detached from any controlling terminal and the command returns to the caller immediately. Without this option, &lt;code&gt;run_erl&lt;/code&gt; must be started using several tricks in the shell to detach it completely from the terminal in use when starting it. The option must be the first argument to &lt;code&gt;run_erl&lt;/code&gt; on the command line.</source>
          <target state="translated">このオプションを強くお勧めします。それは作る &lt;code&gt;run_erl&lt;/code&gt; 完全にすぐに呼び出し元に任意の制御端末とコマンドリターンから外し、バックグラウンドで実行します。このオプションがない場合、 &lt;code&gt;run_erl&lt;/code&gt; は、起動時に使用中のターミナルから完全に切り離すために、シェルでいくつかのトリックを使用して起動する必要があります。オプションは、コマンドラインで &lt;code&gt;run_erl&lt;/code&gt; の最初の引数にする必要があります。</target>
        </trans-unit>
        <trans-unit id="799c0d875ea63318c2c432ae65671fb00f9b1962" translate="yes" xml:space="preserve">
          <source>This option is more useful. Here, reloading is queued if the driver is &lt;strong&gt;not&lt;/strong&gt; loaded by any other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt;, but the driver has opened ports, in which case &lt;code&gt;{ok, pending_driver}&lt;/code&gt; is returned (a &lt;code&gt;monitor&lt;/code&gt; option is recommended).</source>
          <target state="translated">このオプションはより便利です。ここで、ドライバーが他の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; によってロードされて&lt;strong&gt;いない&lt;/strong&gt;が、ドライバーがポートを開いている場合、リロードはキューに入れられます。その場合、 &lt;code&gt;{ok, pending_driver}&lt;/code&gt; が返されます（ &lt;code&gt;monitor&lt;/code&gt; オプションをお勧めします）。</target>
        </trans-unit>
        <trans-unit id="25d785f39f2ca30f9744131492e2e56cf2d21d95" translate="yes" xml:space="preserve">
          <source>This option is not allowed on &lt;code&gt;raw&lt;/code&gt; files.</source>
          <target state="translated">このオプションは &lt;code&gt;raw&lt;/code&gt; ファイルでは使用できません。</target>
        </trans-unit>
        <trans-unit id="66882999b7df0a61e482c56ef50205c317d913f0" translate="yes" xml:space="preserve">
          <source>This option is not normally supported (see why below). OTP has to be explicitly built with the &lt;code&gt;--enable-esock-rcvsndtime&lt;/code&gt; configure option for this to be available. Since our implementation is &lt;strong&gt;nonblocking&lt;/strong&gt;, its unknown if and how this option works, or even if it may cause malfunctions. Therefor, we do not recommend setting this option. Instead, use the &lt;code&gt;Timeout&lt;/code&gt; argument to, for instance, the &lt;code&gt;&lt;a href=&quot;socket#recv-3&quot;&gt;recv/3&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">このオプションは通常サポートされていません（以下の理由を参照）。これを利用するには、OTPを &lt;code&gt;--enable-esock-rcvsndtime&lt;/code&gt; configureオプションを使用して明示的に構築する必要があります。私たちの実装は&lt;strong&gt;ノンブロッキング&lt;/strong&gt;であるため、このオプションが機能するかどうか、どのように機能するか、または誤動作を引き起こす可能性があるかどうかは不明です。そのため、このオプションを設定することはお勧めしません。代わりに、たとえば、 &lt;code&gt;&lt;a href=&quot;socket#recv-3&quot;&gt;recv/3&lt;/a&gt;&lt;/code&gt; 関数に &lt;code&gt;Timeout&lt;/code&gt; 引数を使用します。</target>
        </trans-unit>
        <trans-unit id="c3f57200882dc1e247d7d39a885535f951742ea8" translate="yes" xml:space="preserve">
          <source>This option is not normally supported (see why below). OTP has to be explicitly built with the &lt;code&gt;--enable-esock-rcvsndtime&lt;/code&gt; configure option for this to be available. Since our implementation is &lt;strong&gt;nonblocking&lt;/strong&gt;, its unknown if and how this option works, or even if it may cause malfunctions. Therefor, we do not recommend setting this option. Instead, use the &lt;code&gt;Timeout&lt;/code&gt; argument to, for instance, the &lt;code&gt;&lt;a href=&quot;socket#send-3&quot;&gt;send/3&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">このオプションは通常サポートされていません（以下の理由を参照）。これを利用するには、OTPを &lt;code&gt;--enable-esock-rcvsndtime&lt;/code&gt; configureオプションを使用して明示的に構築する必要があります。私たちの実装は&lt;strong&gt;ノンブロッキング&lt;/strong&gt;であるため、このオプションが機能するかどうか、どのように機能するか、または誤動作を引き起こす可能性があるかどうかは不明です。そのため、このオプションを設定することはお勧めしません。代わりに、たとえば、 &lt;code&gt;&lt;a href=&quot;socket#send-3&quot;&gt;send/3&lt;/a&gt;&lt;/code&gt; 関数に &lt;code&gt;Timeout&lt;/code&gt; 引数を使用します。</target>
        </trans-unit>
        <trans-unit id="2f286491eda734e921e24014e8a8a1eb9199ffbe" translate="yes" xml:space="preserve">
          <source>This option is not recommended.</source>
          <target state="translated">このオプションはお勧めしません。</target>
        </trans-unit>
        <trans-unit id="f578117bb772460a22238ad9cfabbec82d626246" translate="yes" xml:space="preserve">
          <source>This option is only meaningful if option &lt;code&gt;binary&lt;/code&gt; was specified when the socket was created. If option &lt;code&gt;header&lt;/code&gt; is specified, the first &lt;code&gt;Size&lt;/code&gt; number bytes of data received from the socket are elements of a list, and the remaining data is a binary specified as the tail of the same list. For example, if &lt;code&gt;Size == 2&lt;/code&gt;, the data received matches &lt;code&gt;[Byte1,Byte2|Binary]&lt;/code&gt;.</source>
          <target state="translated">このオプションは、ソケットの作成時にオプション &lt;code&gt;binary&lt;/code&gt; が指定された場合にのみ意味があります。オプション &lt;code&gt;header&lt;/code&gt; が指定されている場合、ソケットから受信したデータの最初の &lt;code&gt;Size&lt;/code&gt; numberバイトはリストの要素であり、残りのデータは同じリストの末尾として指定されたバイナリです。たとえば、 &lt;code&gt;Size == 2&lt;/code&gt; 場合、受信したデータは &lt;code&gt;[Byte1,Byte2|Binary]&lt;/code&gt; 一致します。</target>
        </trans-unit>
        <trans-unit id="6aa3b24e42c5627fceb7d3a4c574f35704adb386" translate="yes" xml:space="preserve">
          <source>This option is only supported by the standard shell (&lt;code&gt;group.erl&lt;/code&gt;).</source>
          <target state="translated">このオプションは、標準シェル（ &lt;code&gt;group.erl&lt;/code&gt; ）でのみサポートされています。</target>
        </trans-unit>
        <trans-unit id="b072703d1b18dfc3f9f5977b6079b835f0224f83" translate="yes" xml:space="preserve">
          <source>This option is read-only. It determines the parameters specific to the peer address specified by &lt;code&gt;address&lt;/code&gt; within the association specified by &lt;code&gt;assoc_id&lt;/code&gt;. Field &lt;code&gt;address&lt;/code&gt; fmust be set by the caller; all other fields are filled in on return. If &lt;code&gt;assoc_id = 0&lt;/code&gt; (default), the &lt;code&gt;address&lt;/code&gt; is automatically translated into the corresponding association ID. This option is rarely used. For the semantics of all fields, see &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このオプションは読み取り専用です。それによって指定されたピアのアドレスにパラメータの特定を決定する &lt;code&gt;address&lt;/code&gt; で指定されたアソシエーション内 &lt;code&gt;assoc_id&lt;/code&gt; 。フィールド &lt;code&gt;address&lt;/code&gt; は、呼び出し元が設定する必要があります。他のすべてのフィールドは、戻り時に入力されます。場合 &lt;code&gt;assoc_id = 0&lt;/code&gt; （デフォルト）、 &lt;code&gt;address&lt;/code&gt; 自動的に対応するアソシエーションIDに変換されます。このオプションはほとんど使用されません。すべてのフィールドのセマンティクスについては、 &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="195222e570592e1300b4b25ab1af9e1c8e8e90bb" translate="yes" xml:space="preserve">
          <source>This option is read-only. It determines the status of the SCTP association specified by &lt;code&gt;assoc_id&lt;/code&gt;. The following are the possible values of &lt;code&gt;state&lt;/code&gt; (the state designations are mostly self-explanatory):</source>
          <target state="translated">このオプションは読み取り専用です。これは、 &lt;code&gt;assoc_id&lt;/code&gt; で指定されたSCTPアソシエーションのステータスを決定します。 &lt;code&gt;state&lt;/code&gt; の可能な値は次のとおりです（状態の指定はほとんどが自明です）。</target>
        </trans-unit>
        <trans-unit id="2a7c2f54502986cac56e74f74f0507e617134fa9" translate="yes" xml:space="preserve">
          <source>This option is removed, it generates a fatal error if used.</source>
          <target state="translated">このオプションを使用すると致命的なエラーが発生するため、このオプションは削除されました。</target>
        </trans-unit>
        <trans-unit id="0d0dc8c0d9bb7eab4181aa210080e8a3266e279c" translate="yes" xml:space="preserve">
          <source>This option is set to &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">このオプションはデフォルトで &lt;code&gt;true&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="aa903c4555e4c89c59fa07465d374edfda939a99" translate="yes" xml:space="preserve">
          <source>This option is supported by TLS 1.3 and above and only with stateless session tickets. Ticket lifetime, the number of tickets sent by the server and the maximum number of tickets stored by the server in stateful mode are configured by &lt;code&gt;application variables&lt;/code&gt;. See also &lt;code&gt; SSL's Users Guide, Anti-Replay Protection in TLS 1.3&lt;/code&gt;</source>
          <target state="translated">このオプションは、TLS 1.3以降でサポートされており、ステートレスセッションチケットでのみサポートされます。チケットの有効期間、サーバーによって送信されるチケットの数、およびステートフルモードでサーバーによって保存されるチケットの最大数は、 &lt;code&gt;application variables&lt;/code&gt; によって構成されます。 &lt;code&gt; SSL's Users Guide, Anti-Replay Protection in TLS 1.3&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="70e6a186e299c39a9ea4c11bb023a5500cff5bee" translate="yes" xml:space="preserve">
          <source>This option is supported by TLS 1.3 and above. See also &lt;code&gt; SSL's Users Guide, Session Tickets and Session Resumption in TLS 1.3&lt;/code&gt;</source>
          <target state="translated">このオプションは、TLS1.3以降でサポートされています。 &lt;code&gt; SSL's Users Guide, Session Tickets and Session Resumption in TLS 1.3&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="9b0aa3e98f799062b3c35a4a811d03b341b1e599" translate="yes" xml:space="preserve">
          <source>This option is supported by the standard shell (&lt;code&gt;group.erl&lt;/code&gt;), the 'oldshell' (&lt;code&gt;user.erl&lt;/code&gt;), and the file I/O servers.</source>
          <target state="translated">このオプションは、標準シェル（ &lt;code&gt;group.erl&lt;/code&gt; ）、 'oldshell'（ &lt;code&gt;user.erl&lt;/code&gt; ）、およびファイルI / Oサーバーでサポートされています。</target>
        </trans-unit>
        <trans-unit id="b3a3a12611755048747534c6172534fba6193da6" translate="yes" xml:space="preserve">
          <source>This option is to be used only while running &lt;code&gt;erts_alloc_config(3)&lt;/code&gt;, &lt;strong&gt;not&lt;/strong&gt; when using the created configuration.</source>
          <target state="translated">このオプションは、作成された構成を使用するときで&lt;strong&gt;はなく&lt;/strong&gt;、 &lt;code&gt;erts_alloc_config(3)&lt;/code&gt; の実行中にのみ使用されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="889aee4f7fdaed4924ebd813f97d33cc589d7043" translate="yes" xml:space="preserve">
          <source>This option is typically used when building or modifying a PLT as in:</source>
          <target state="translated">このオプションは、通常、PLTを構築または変更する際に使用されます。</target>
        </trans-unit>
        <trans-unit id="edf2a03815bd1d16fe28550db84f5fb84528060e" translate="yes" xml:space="preserve">
          <source>This option is used to &lt;strong&gt;reload&lt;/strong&gt; a driver from disk, most often in a code upgrade scenario. Having a &lt;code&gt;reload&lt;/code&gt; option also implies that parameter &lt;code&gt;Path&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; need to be consistent with earlier loads of the driver.</source>
          <target state="translated">このオプションは、ディスクからドライバーを&lt;strong&gt;リロード&lt;/strong&gt;するために使用されます。ほとんどの場合、コードアップグレードシナリオで使用されます。持つ &lt;code&gt;reload&lt;/code&gt; オプションもそのパラメータの意味 &lt;code&gt;Path&lt;/code&gt; ない&lt;strong&gt;ではない&lt;/strong&gt;ドライバの初期の負荷と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf140f37714af5051b513ac4d8ca12c2978c9cf5" translate="yes" xml:space="preserve">
          <source>This option only affects decentralized counters used for the counters that are keeping track of the memory consumption and the number of terms in ETS tables of type ordered_set with the write_concurrency option activated.</source>
          <target state="translated">このオプションは、write_concurrencyオプションが有効になっているordered_set型のETSテーブルのメモリ消費量と項数を追跡しているカウンタに使用される分散型カウンタにのみ影響を与えます。</target>
        </trans-unit>
        <trans-unit id="d51f4b2d1bb2d48353207aa92dd60bc3873e9f8f" translate="yes" xml:space="preserve">
          <source>This option should be set to &lt;code&gt;false&lt;/code&gt; since a sufficiently malicious peer can otherwise cause large amounts of memory to be consumed when decoded Diameter messages are passed between processes. The default value is for backwards compatibility.</source>
          <target state="translated">十分に悪意のあるピアは、プロセス間でデコードされたDiameterメッセージが渡されるときに大量のメモリを消費させる可能性があるため、このオプションは &lt;code&gt;false&lt;/code&gt; に設定する必要があります。デフォルト値は下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="57817b80cdc930329e3a4d5793e370393a3211f0" translate="yes" xml:space="preserve">
          <source>This option specifies how basic mib data is stored. This option is used by two parts of the snmp agent: The mib-server and the symbolic-store.</source>
          <target state="translated">このオプションは、基本的な mib データの保存方法を指定します。このオプションは、snmpエージェントの2つの部分で使用されます。mib-serverとsymbolic-storeです。</target>
        </trans-unit>
        <trans-unit id="058b954e4120837a0a6cb03a7efdf187ce8adda6" translate="yes" xml:space="preserve">
          <source>This option specifies how the server will handle callback calls.</source>
          <target state="translated">このオプションは、サーバがコールバックコールをどのように処理するかを指定します。</target>
        </trans-unit>
        <trans-unit id="16bffdd8047471540c8529b9376dd26910c55b7e" translate="yes" xml:space="preserve">
          <source>This option specifies if the server should actively supervise the net-if process. Note that this will only work if the used net-if process actually supports the protocol. See &lt;code&gt;&lt;a href=&quot;snmpm_network_interface&quot;&gt;snmpm_network_interface&lt;/a&gt;&lt;/code&gt; behaviour for more info.</source>
          <target state="translated">このオプションは、サーバーがnet-ifプロセスをアクティブに監視する必要があるかどうかを指定します。これは、使用されているnet-ifプロセスが実際にプロトコルをサポートしている場合にのみ機能することに注意してください。詳細については、 &lt;code&gt;&lt;a href=&quot;snmpm_network_interface&quot;&gt;snmpm_network_interface&lt;/a&gt;&lt;/code&gt; の動作を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff5c27e867a6f1798699a8d8412847ef2c9f83ca" translate="yes" xml:space="preserve">
          <source>This option specifies if the user shall be notified of received segment replies or not.</source>
          <target state="translated">このオプションは、受信したセグメントの返信をユーザーに通知するかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="e191bd75bc4b33a8992d72798fec2d5cb030668d" translate="yes" xml:space="preserve">
          <source>This option uses the Linux-specific socket option &lt;code&gt;SO_BINDTODEVICE&lt;/code&gt;, such as in Linux kernel 2.0.30 or later, and therefore only exists when the runtime system is compiled for such an operating system.</source>
          <target state="translated">このオプションは、Linux カーネル2.0.30以降など、Linux固有のソケットオプション &lt;code&gt;SO_BINDTODEVICE&lt;/code&gt; を使用するため、そのようなオペレーティングシステム用にランタイムシステムがコンパイルされている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="2b531690e0f1058c69b2d245e35526e30090198c" translate="yes" xml:space="preserve">
          <source>This option uses the Linux-specific syscall &lt;code&gt;setns()&lt;/code&gt;, such as in Linux kernel 3.0 or later, and therefore only exists when the runtime system is compiled for such an operating system.</source>
          <target state="translated">このオプションは、Linux カーネル3.0以降などのLinux固有のsyscall &lt;code&gt;setns()&lt;/code&gt; を使用するため、ランタイムシステムがそのようなオペレーティングシステム用にコンパイルされている場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="44252bdcc3d79897b51179b686a1c2db9495ee64" translate="yes" xml:space="preserve">
          <source>This option will be removed in a future release. The return value will always be &lt;code&gt;false&lt;/code&gt;, as the &lt;code&gt;elib_malloc&lt;/code&gt; allocator has been removed.</source>
          <target state="translated">このオプションは将来のリリースで削除される予定です。 &lt;code&gt;elib_malloc&lt;/code&gt; アロケーターが削除されているため、戻り値は常に &lt;code&gt;false&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="c0dabdcd13ff03271c7b6e7a946847dbd231dc01" translate="yes" xml:space="preserve">
          <source>This option will use a lot of memory when enabled, which must be reclaimed with &lt;code&gt;lcnt:rt_clear&lt;/code&gt;. Note that it makes no distinction between locks that were destroyed and locks for which counting was disabled, so enabling this option will disable changes to the lock category mask.</source>
          <target state="translated">このオプションを有効にすると、大量のメモリが使用されます。これは、 &lt;code&gt;lcnt:rt_clear&lt;/code&gt; で再利用する必要があります。破棄されたロックとカウントが無効にされたロックは区別されないため、このオプションを有効にすると、ロックカテゴリマスクへの変更が無効になります。</target>
        </trans-unit>
        <trans-unit id="63372d9f26162432c70de9dd21cb0a2fa14e443c" translate="yes" xml:space="preserve">
          <source>This package contains modules for handling abstract syntax trees (ASTs) in Erlang, in a way that is compatible with the &quot;abstract format&quot; parse trees of the stdlib module &lt;code&gt;erl_parse&lt;/code&gt;, together with utilities for reading source files, &lt;code&gt;&lt;a href=&quot;erl_prettypr&quot;&gt;pretty-printing syntax trees&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;igor&quot;&gt;merging and renaming modules&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;erl_tidy&quot;&gt;cleaning up obsolete constructs&lt;/a&gt;&lt;/code&gt;, and doing &lt;code&gt;&lt;a href=&quot;merl&quot;&gt;metaprogramming&lt;/a&gt;&lt;/code&gt; in Erlang.</source>
          <target state="translated">このパッケージには、stdlibモジュール &lt;code&gt;erl_parse&lt;/code&gt; の「抽象形式」解析ツリーと互換性のある方法で、Erlangで抽象構文ツリー（AST）を処理するためのモジュールと、ソースファイルを読み取るためのユーティリティ、 &lt;code&gt;&lt;a href=&quot;erl_prettypr&quot;&gt;pretty-printing syntax trees&lt;/a&gt;&lt;/code&gt; するため、 &lt;code&gt;&lt;a href=&quot;igor&quot;&gt;merging and renaming modules&lt;/a&gt;&lt;/code&gt; するためのユーティリティが含まれていますモジュール名の変更、 &lt;code&gt;&lt;a href=&quot;erl_tidy&quot;&gt;cleaning up obsolete constructs&lt;/a&gt;&lt;/code&gt; 、Erlangでの &lt;code&gt;&lt;a href=&quot;merl&quot;&gt;metaprogramming&lt;/a&gt;&lt;/code&gt; 実行。</target>
        </trans-unit>
        <trans-unit id="2aa90d46e1988deecd458f84f25660e5efaeb6ec" translate="yes" xml:space="preserve">
          <source>This page presents a summary of values from all allocators underneath it.</source>
          <target state="translated">このページでは、その下にあるすべてのアロケータの値をまとめて表示しています。</target>
        </trans-unit>
        <trans-unit id="239f6919f70832c0fd44ac0346db01f8572c3052" translate="yes" xml:space="preserve">
          <source>This pair of functions are used when open ports to the driver are to be killed with reason &lt;code&gt;driver_unloaded&lt;/code&gt; to allow for new driver code to get loaded.</source>
          <target state="translated">この関数のペアは、ドライバーへの開いているポートを理由として &lt;code&gt;driver_unloaded&lt;/code&gt; で強制終了して、新しいドライバーコードをロードできるようにする場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="1602bf3b2d8c23237b0a61febcf52e3e006d8036" translate="yes" xml:space="preserve">
          <source>This pair of functions is used when reloading is to be done after the last open port to the driver is closed.</source>
          <target state="translated">この対の機能は、ドライバへの最後のオープンポートを閉じた後にリロードを行う場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="f14b771e39c5dc99621a28cd9cae451233b4cbb8" translate="yes" xml:space="preserve">
          <source>This parameter contains a list of options that are given to &lt;code&gt;zip:create/3&lt;/code&gt; when application specific files are packaged into an archive. Only a subset of the options are supported. The most useful options in this context are the ones that control which types of files should be compressed. This parameter defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには、アプリケーション固有のファイルがアーカイブにパッケージ化されるときに &lt;code&gt;zip:create/3&lt;/code&gt; に指定されるオプションのリストが含まれています。オプションのサブセットのみがサポートされています。このコンテキストで最も有用なオプションは、圧縮するファイルのタイプを制御するオプションです。このパラメーターのデフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="58e5c112e068eb199424c98749e9d0931666cadb" translate="yes" xml:space="preserve">
          <source>This parameter controls the application and escript inclusion policy. It defaults to &lt;code&gt;derived&lt;/code&gt; which means that the applications that do not have any explicit &lt;code&gt;incl_cond&lt;/code&gt; setting, will only be included if any other (explicitly or implicitly included) application uses it. The value &lt;code&gt;include&lt;/code&gt; implies that all applications and escripts that do not have any explicit &lt;code&gt;incl_cond&lt;/code&gt; setting will be included. &lt;code&gt;exclude&lt;/code&gt; implies that all applications and escripts that do not have any explicit &lt;code&gt;incl_cond&lt;/code&gt; setting will be excluded.</source>
          <target state="translated">このパラメーターは、アプリケーションとescriptの包含ポリシーを制御します。デフォルトは &lt;code&gt;derived&lt;/code&gt; です。つまり、明示的な &lt;code&gt;incl_cond&lt;/code&gt; 設定を持たないアプリケーションは、他の（明示的または暗黙的に含まれている）アプリケーションがそれを使用する場合にのみ含まれます。値 &lt;code&gt;include&lt;/code&gt; は、明示的な &lt;code&gt;incl_cond&lt;/code&gt; 設定がないすべてのアプリケーションおよびescriptsが含まれることを意味します。 &lt;code&gt;exclude&lt;/code&gt; は、明示的な &lt;code&gt;incl_cond&lt;/code&gt; 設定がないすべてのアプリケーションおよびescriptsが除外されることを意味します。</target>
        </trans-unit>
        <trans-unit id="43b8b48e3d3e4e5f584a2110e61fc94f1dda52fb" translate="yes" xml:space="preserve">
          <source>This parameter controls the default handling of the &lt;code&gt;app&lt;/code&gt; files when a target system is generated. It defaults to &lt;code&gt;keep&lt;/code&gt; which means that &lt;code&gt;app&lt;/code&gt; files are copied to the target system and their contents are kept as they are. &lt;code&gt;strip&lt;/code&gt; means that a new &lt;code&gt;app&lt;/code&gt; file is generated from the contents of the original &lt;code&gt;app&lt;/code&gt; file where the non included modules are removed from the file. &lt;code&gt;all&lt;/code&gt; does also imply that a new &lt;code&gt;app&lt;/code&gt; file is generated from the contents of the original &lt;code&gt;app&lt;/code&gt; file, with the difference that all included modules are added to the file. If the application does not have any &lt;code&gt;app&lt;/code&gt; file a file will be created for &lt;code&gt;all&lt;/code&gt; but not for &lt;code&gt;keep&lt;/code&gt; and &lt;code&gt;strip&lt;/code&gt;.</source>
          <target state="translated">このパラメーターは、ターゲットシステムが生成されるときの &lt;code&gt;app&lt;/code&gt; ファイルのデフォルトの処理を制御します。デフォルトでは &lt;code&gt;keep&lt;/code&gt; されます。つまり、 &lt;code&gt;app&lt;/code&gt; ファイルがターゲットシステムにコピーされ、そのコンテンツがそのまま保持されます。 &lt;code&gt;strip&lt;/code&gt; とは、元の &lt;code&gt;app&lt;/code&gt; ファイルのコンテンツから新しい &lt;code&gt;app&lt;/code&gt; ファイルが生成され、含まれていないモジュールがファイルから削除されることを意味します。 &lt;code&gt;all&lt;/code&gt; 新しいことを意味しない &lt;code&gt;app&lt;/code&gt; ファイルは、元のコンテンツから生成された &lt;code&gt;app&lt;/code&gt; のすべて含まれるモジュールがファイルに追加されるという点は相違させて、ファイル。アプリケーションは、任意の持っていない場合は &lt;code&gt;app&lt;/code&gt; ファイルファイルが作成されます &lt;code&gt;all&lt;/code&gt; ではないために &lt;code&gt;keep&lt;/code&gt; して &lt;code&gt;strip&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="178517341ccd2e5776c2cccf896941a880130c85" translate="yes" xml:space="preserve">
          <source>This parameter controls the module inclusion policy. It defaults to &lt;code&gt;all&lt;/code&gt; which means that if an application is included (either explicitly or implicitly) all modules in that application will be included. This implies that both modules that exist in the &lt;code&gt;ebin&lt;/code&gt; directory of the application, as well as modules that are named in the &lt;code&gt;app&lt;/code&gt; file will be included. If the parameter is set to &lt;code&gt;ebin&lt;/code&gt;, both modules in the &lt;code&gt;ebin&lt;/code&gt; directory and derived modules are included. If the parameter is set to &lt;code&gt;app&lt;/code&gt;, both modules in the &lt;code&gt;app&lt;/code&gt; file and derived modules are included. &lt;code&gt;derived&lt;/code&gt; means that only modules that are used by other included modules are included. The &lt;code&gt;mod_cond&lt;/code&gt; setting on system level is used as default for all applications.</source>
          <target state="translated">このパラメーターは、モジュール包含ポリシーを制御します。デフォルトは &lt;code&gt;all&lt;/code&gt; 。つまり、アプリケーションが（明示的または暗黙的に）組み込まれている場合、そのアプリケーションのすべてのモジュールが組み込まれます。これは、アプリケーションの &lt;code&gt;ebin&lt;/code&gt; ディレクトリに存在するモジュールと、 &lt;code&gt;app&lt;/code&gt; ファイルで指定されたモジュールの両方が含まれることを意味します。パラメータが &lt;code&gt;ebin&lt;/code&gt; に設定されている場合、 &lt;code&gt;ebin&lt;/code&gt; ディレクトリ内のモジュールと派生モジュールの両方が含まれます。パラメーターが &lt;code&gt;app&lt;/code&gt; に設定されている場合、 &lt;code&gt;app&lt;/code&gt; ファイル内のモジュールと派生モジュールの両方が含まれます。 &lt;code&gt;derived&lt;/code&gt; 含まれる他のモジュールによって使用されるモジュールのみが含まれることを意味します。システムレベルの &lt;code&gt;mod_cond&lt;/code&gt; 設定は、すべてのアプリケーションのデフォルトとして使用されます。</target>
        </trans-unit>
        <trans-unit id="f35dbde0b2e6b7417fe1079d2c8cb135463fb518" translate="yes" xml:space="preserve">
          <source>This parameter controls whether the &lt;code&gt;erl&lt;/code&gt; executable in the target system should automatically determine where it is installed or if it should use a hardcoded path to the installation. In the latter case the target system must be installed with &lt;code&gt;reltool:install/2&lt;/code&gt; before it can be used. If the system is relocatable, the file tree containing the target system can be moved to another location without re-installation. The default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">このパラメーターは、ターゲットシステムの &lt;code&gt;erl&lt;/code&gt; 実行可能ファイルが、それがインストールされている場所を自動的に決定するか、またはインストールへのハードコーディングされたパスを使用するかを制御します。後者の場合、ターゲットシステムは、使用する前に &lt;code&gt;reltool:install/2&lt;/code&gt; でインストールする必要があります。システムが再配置可能である場合、ターゲットシステムを含むファイルツリーは、再インストールせずに別の場所に移動できます。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="18eec3d4c813ec5a22514b8e2727f74034894ae8" translate="yes" xml:space="preserve">
          <source>This parameter controls whether the module is included or not. By default the &lt;code&gt;mod_cond&lt;/code&gt; parameter on application and system level will be used to control whether the module is included or not. The value of &lt;code&gt;incl_cond&lt;/code&gt; overrides the module inclusion policy. &lt;code&gt;include&lt;/code&gt; implies that the module is included, while &lt;code&gt;exclude&lt;/code&gt; implies that the module is not included. &lt;code&gt;derived&lt;/code&gt; implies that the module is included if it is used by any other included module.</source>
          <target state="translated">このパラメーターは、モジュールを含めるかどうかを制御します。デフォルトでは、アプリケーションおよびシステムレベルの &lt;code&gt;mod_cond&lt;/code&gt; パラメータを使用して、モジュールを含めるかどうかを制御します。 &lt;code&gt;incl_cond&lt;/code&gt; の値は、モジュール包含ポリシーをオーバーライドします。 &lt;code&gt;include&lt;/code&gt; はモジュールが含まれる &lt;code&gt;exclude&lt;/code&gt; 意味し、excludeはモジュールが含まれないことを意味します。 &lt;code&gt;derived&lt;/code&gt; は、含まれている他のモジュールで使用されている場合、そのモジュールが含まれていることを意味します。</target>
        </trans-unit>
        <trans-unit id="40145ab28fcdbc933f15879eca2c3243c28ec539" translate="yes" xml:space="preserve">
          <source>This parameter defines the error report type used when messages are sent to error logger using the default callback function. Default is &lt;code&gt;std_error&lt;/code&gt;, which means the events are handled by the standard event handler.</source>
          <target state="translated">このパラメーターは、デフォルトのコールバック関数を使用してメッセージがエラーロガーに送信されるときに使用されるエラーレポートタイプを定義します。デフォルトは &lt;code&gt;std_error&lt;/code&gt; です。これは、イベントが標準のイベントハンドラーによって処理されることを意味します。</target>
        </trans-unit>
        <trans-unit id="d8e1e13f6286b2183d8789f9f0f1c181e848b5c7" translate="yes" xml:space="preserve">
          <source>This parameter is mutual exclusive with &lt;code&gt;lib_dir&lt;/code&gt;. If &lt;code&gt;vsn&lt;/code&gt; and &lt;code&gt;lib_dir&lt;/code&gt; are both omitted, the latest version will be chosen.</source>
          <target state="translated">このパラメーターは &lt;code&gt;lib_dir&lt;/code&gt; と相互に排他的です。場合は &lt;code&gt;vsn&lt;/code&gt; と &lt;code&gt;lib_dir&lt;/code&gt; 両方とも省略され、最新のバージョンが選択されます。</target>
        </trans-unit>
        <trans-unit id="e97c191330c9143719f39676fbf0d64a524888a9" translate="yes" xml:space="preserve">
          <source>This parameter is mutual exclusive with &lt;code&gt;vsn&lt;/code&gt;. If &lt;code&gt;vsn&lt;/code&gt; and &lt;code&gt;lib_dir&lt;/code&gt; are both omitted, the latest version will be chosen.</source>
          <target state="translated">このパラメーターは、 &lt;code&gt;vsn&lt;/code&gt; と相互に排他的です。場合は &lt;code&gt;vsn&lt;/code&gt; と &lt;code&gt;lib_dir&lt;/code&gt; 両方とも省略され、最新のバージョンが選択されます。</target>
        </trans-unit>
        <trans-unit id="fccea6e9894e7980e5b72b89472e98f04ef2c3ca" translate="yes" xml:space="preserve">
          <source>This parameter is of type &lt;code&gt;dateTime&lt;/code&gt; and compliant to RFC 3339. Implementations must support time zones.</source>
          <target state="translated">このパラメーターのタイプは &lt;code&gt;dateTime&lt;/code&gt; で、RFC 3339に準拠しています。実装はタイムゾーンをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="950fdba8a7f8faa27a2238104e4fbd9416d168d5" translate="yes" xml:space="preserve">
          <source>This parameter is the name of the driver to be used in subsequent calls to function &lt;code&gt;erlang:open_port&lt;/code&gt; in ERTS. The name can be specified as an &lt;code&gt;iolist()&lt;/code&gt; or an &lt;code&gt;atom()&lt;/code&gt;. The name specified when loading is used to find the object file (with the help of &lt;code&gt;Path&lt;/code&gt; and the system-implied extension suffix, that is, &lt;code&gt;.so&lt;/code&gt;). The name by which the driver identifies itself must also be consistent with this &lt;code&gt;Name&lt;/code&gt; parameter, much as the module name of a Beam file much corresponds to its filename.</source>
          <target state="translated">このパラメーターは、 &lt;code&gt;erlang:open_port&lt;/code&gt; 関数erlang：open_portへの後続の呼び出しで使用されるドライバーの名前です。名前は &lt;code&gt;iolist()&lt;/code&gt; または &lt;code&gt;atom()&lt;/code&gt; として指定できます。ロード時に指定された名前は、オブジェクトファイルを検索するために使用されます（ &lt;code&gt;Path&lt;/code&gt; およびシステムで暗黙の拡張子サフィックス、つまり &lt;code&gt;.so&lt;/code&gt; を使用して）。Beamファイルのモジュール名がそのファイル名に相当するのと同様に、ドライバーがそれ自体を識別する &lt;code&gt;Name&lt;/code&gt; もこのNameパラメーターと一致している必要があります。</target>
        </trans-unit>
        <trans-unit id="44b3acd62887c89fa3ae2ebe622fc74f4ca003b3" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which application specific files should not be included in the target system. In order to be included, a file must match some filter in &lt;code&gt;incl_app_filters&lt;/code&gt; but not any filter in &lt;code&gt;excl_app_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、ターゲットシステムに含めないアプリケーション固有のファイルを制御する正規表現のリストが含まれています。含まれるためには、ファイルがでいくつかのフィルタと一致しなければなりません &lt;code&gt;incl_app_filters&lt;/code&gt; ではなく、内の任意のフィルタ &lt;code&gt;excl_app_filters&lt;/code&gt; を。このパラメーターのデフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f82af56ab8d93da6eddb3eddde55461bf95b47f" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which application specific files that should be included. Each file in the application must match at least one of the listed regular expressions in order to be included. Further the files may not match any filter in &lt;code&gt;excl_app_filters&lt;/code&gt; in order to be included. This parameter defaults to &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、どのアプリケーション固有のファイルを含めるかを制御する正規表現のリストが含まれています。アプリケーションの各ファイルを含めるには、リストされている正規表現の少なくとも1つに一致する必要があります。さらに、ファイルは含まれるために &lt;code&gt;excl_app_filters&lt;/code&gt; のどのフィルターとも一致しない場合があります。このパラメーターのデフォルトは &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a274c6a75bab058057d8bad1dd9c6f7fc4d783d1" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which files in the system should be included. Each file in the target system must match at least one of the listed regular expressions in order to be included. Further the files may not match any filter in &lt;code&gt;excl_sys_filters&lt;/code&gt; in order to be included. Which application files should be included is controlled with the parameters &lt;code&gt;incl_app_filters&lt;/code&gt; and &lt;code&gt;excl_app_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、システム内のどのファイルを含めるかを制御する正規表現のリストが含まれています。ターゲットシステムの各ファイルを含めるには、リストされている正規表現の少なくとも1つに一致する必要があります。さらに、ファイルは含まれるために &lt;code&gt;excl_sys_filters&lt;/code&gt; のどのフィルターとも一致しない場合があります。どのアプリケーションファイルを含めるかは、パラメーター &lt;code&gt;incl_app_filters&lt;/code&gt; および &lt;code&gt;excl_app_filters&lt;/code&gt; で制御されます。このパラメーターのデフォルトは &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="110f1ed95034cf6ba82c260c7d3422382ccf8b06" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which files in the system should not be included in the target system. In order to be included, a file must match some filter in &lt;code&gt;incl_sys_filters&lt;/code&gt; but not any filter in &lt;code&gt;excl_sys_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、システム内のどのファイルをターゲットシステムに含めないかを制御する正規表現のリストが含まれています。含まれるためには、ファイルがでいくつかのフィルタと一致しなければなりません &lt;code&gt;incl_sys_filters&lt;/code&gt; ではなく、内の任意のフィルタ &lt;code&gt;excl_sys_filters&lt;/code&gt; を。このパラメーターのデフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ff17bba9924b137232a805ed2fc26cbf5b146168" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which top level directories in an application should be included in an archive file (as opposed to being included as a regular directory outside the archive). Each top directory in the application must match at least one of the listed regular expressions in order to be included. Further the files may not match any filter in &lt;code&gt;excl_app_filters&lt;/code&gt; in order to be included. This parameter defaults to &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt;.</source>
          <target state="translated">通常、このパラメーターには、アーカイブファイルに含める必要があるアプリケーションのトップレベルディレクトリを制御する正規表現のリストが含まれます（アーカイブ外の通常のディレクトリとして含めるのではなく）。アプリケーションの最上位の各ディレクトリを含めるには、リストされている正規表現の少なくとも1つに一致する必要があります。さらに、ファイルは含まれるために &lt;code&gt;excl_app_filters&lt;/code&gt; のどのフィルターとも一致しない場合があります。このパラメーターのデフォルトは &lt;code&gt;[&quot;.*&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8cccf208765941cdf1852be703e61e2a97e335ee" translate="yes" xml:space="preserve">
          <source>This parameter normally contains a list of regular expressions that controls which top level directories in an application should not be included in an archive file. In order to be included in the application archive, a top directory must match some filter in &lt;code&gt;incl_archive_filters&lt;/code&gt; but not any filter in &lt;code&gt;excl_archive_filters&lt;/code&gt;. This parameter defaults to &lt;code&gt;[&quot;^include$&quot;,&quot;^priv$&quot;]&lt;/code&gt;.</source>
          <target state="translated">このパラメーターには通常、アプリケーションのどのトップレベルディレクトリをアーカイブファイルに含めないかを制御する正規表現のリストが含まれています。アプリケーションアーカイブに含まれるためには、トップディレクトリがでいくつかのフィルタと一致しなければなりません &lt;code&gt;incl_archive_filters&lt;/code&gt; ではなく、内の任意のフィルタ &lt;code&gt;excl_archive_filters&lt;/code&gt; を。このパラメーターのデフォルトは &lt;code&gt;[&quot;^include$&quot;,&quot;^priv$&quot;]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="28343ed29b2c1e141aa76f8b0c8cab09dcd45849" translate="yes" xml:space="preserve">
          <source>This parameter specifies if the Erlang emulator is statically installed at the client node. A node with a static emulator cannot dynamically switch to a new emulator, as the executable files are statically written into memory.</source>
          <target state="translated">このパラメータはErlangエミュレータがクライアントノードに静的にインストールされているかどうかを指定します。スタティックエミュレータがインストールされているノードでは、実行ファイルはメモリに静的に書き込まれるので、新しいエミュレータに動的に切り替えることはできません。</target>
        </trans-unit>
        <trans-unit id="755487bd7f381a96e683a265b03a5e040919d127" translate="yes" xml:space="preserve">
          <source>This parameter specifies if the log file should be rotated or not. The value &lt;code&gt;infinity&lt;/code&gt; means the log file will grow indefinitely, while an integer value specifies at which file size (bytes) the file is rotated.</source>
          <target state="translated">このパラメータは、ログファイルをローテーションするかどうかを指定します。値 &lt;code&gt;infinity&lt;/code&gt; はログファイルが無期限に大きくなることを意味し、整数値はファイルがローテーションされるファイルサイズ（バイト）を指定します。</target>
        </trans-unit>
        <trans-unit id="6df65b46110e980f8fa356aae1f4cdb59fbe6f4f" translate="yes" xml:space="preserve">
          <source>This parameter specifies if the rotated log file archives shall be compressed or not. If set to &lt;code&gt;true&lt;/code&gt;, all archives are compressed with &lt;code&gt;gzip&lt;/code&gt;, and renamed to &lt;code&gt;FileName.N.gz&lt;/code&gt;</source>
          <target state="translated">このパラメーターは、ローテーションされたログファイルアーカイブを圧縮するかどうかを指定します。 &lt;code&gt;true&lt;/code&gt; に設定すると、すべてのアーカイブが &lt;code&gt;gzip&lt;/code&gt; で圧縮され、 &lt;code&gt;FileName.N.gz&lt;/code&gt; に名前が変更されます。</target>
        </trans-unit>
        <trans-unit id="5a315afc7296583223ac7e17b44b0708aad5cc71" translate="yes" xml:space="preserve">
          <source>This parameter specifies the number of rotated log file archives to keep. This has meaning only if &lt;code&gt;&lt;a href=&quot;#max_no_bytes&quot;&gt;max_no_bytes&lt;/a&gt;&lt;/code&gt; is set to an integer value.</source>
          <target state="translated">このパラメーターは、保持するローテーションされたログファイルアーカイブの数を指定します。これは、 &lt;code&gt;&lt;a href=&quot;#max_no_bytes&quot;&gt;max_no_bytes&lt;/a&gt;&lt;/code&gt; が整数値に設定されている場合にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="1e064a3cd06dea7253b5c26ccbc32ee1140753f4" translate="yes" xml:space="preserve">
          <source>This part is done on the target node, and for this example we want the node to be running as an embedded system with the &lt;code&gt;-heart&lt;/code&gt; option, allowing automatic restart of the node. For more information, see &lt;code&gt;&lt;a href=&quot;#start&quot;&gt; Starting a Target System&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この部分はターゲットノードで実行されます。この例では、ノードを &lt;code&gt;-heart&lt;/code&gt; オプションを使用して組み込みシステムとして実行し、ノードの自動再起動を可能にします。詳細については、「 &lt;code&gt;&lt;a href=&quot;#start&quot;&gt; Starting a Target System&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d50377640826220d17a47ef2e3ec41045600adb8" translate="yes" xml:space="preserve">
          <source>This part is done on the target node, and for this example we want the node to be running as an embedded system with the &lt;code&gt;-heart&lt;/code&gt; option, allowing automatic restart of the node. For more information, see &lt;code&gt;&lt;a href=&quot;#start&quot;&gt;Starting a Target System&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この部分はターゲットノードで実行されます。この例では、ノードを &lt;code&gt;-heart&lt;/code&gt; オプションを使用して組み込みシステムとして実行し、ノードの自動再起動を許可します。詳細については &lt;code&gt;&lt;a href=&quot;#start&quot;&gt;Starting a Target System&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="5bac7f8bcb72cbf602859c2bbd2ca1accde6e195" translate="yes" xml:space="preserve">
          <source>This particular example pattern that we have studied contains nested unlimited repeats, and so the use of a possessive quantifier for matching strings of non-parentheses is important when applying the pattern to strings that do not match. For example, when this pattern is applied to</source>
          <target state="translated">私たちが研究してきたこの特定の例のパターンは、入れ子になった無制限の繰り返しを含んでいるので、一致しない文字列にパターンを適用する際には、一致しない文字列にマッチするための所有的量詞を使用することが重要になります。例えば、このパターンを</target>
        </trans-unit>
        <trans-unit id="cafdded1913809a983e1e03ea48bb5d4d797a73a" translate="yes" xml:space="preserve">
          <source>This particular group matches either the two-character sequence CR followed by LF, or one of the single characters LF (line feed, U+000A), VT (vertical tab, U+000B), FF (form feed, U+000C), CR (carriage return, U+000D), or NEL (next line, U+0085). The two-character sequence is treated as a single unit that cannot be split.</source>
          <target state="translated">この特定のグループは、LFに続く2文字列CR、またはLF(改行、U+000A)、VT(縦タブ、U+000B)、FF(フォームフィード、U+000C)、CR(キャリッジリターン、U+000D)、またはNEL(次の行、U+0085)のいずれかにマッチします。2文字列は、分割できない1つの単位として扱われます。</target>
        </trans-unit>
        <trans-unit id="a1fd9cfe743405ab50e9a660ad376f4821d6a0dd" translate="yes" xml:space="preserve">
          <source>This particular server probably does not use heap memory worth hibernating for. To gain anything from hibernation, your server would have to produce non-insignificant garbage during callback execution, for which this example server can serve as a bad example.</source>
          <target state="translated">この特定のサーバは、おそらくハイバネーションに値するヒープメモリを使用していません。ハイバネーションから何かを得るためには、コールバックの実行中に重要ではないガベージを生成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="dff69f09f8373963a046e44d87eb56b39d18544d" translate="yes" xml:space="preserve">
          <source>This pattern matches &lt;code&gt;a\nb&lt;/code&gt;, as LF is no longer a newline. If more than one of them is present, the last one is used.</source>
          <target state="translated">LFは改行ではないため、このパターンは &lt;code&gt;a\nb&lt;/code&gt; に一致します。それらが複数存在する場合は、最後のものが使用されます。</target>
        </trans-unit>
        <trans-unit id="426d65d492f0b3f8687db736206883352d79afcb" translate="yes" xml:space="preserve">
          <source>This pattern will match if the operands for &lt;code&gt;move&lt;/code&gt; are the same. If the pattern match, the instruction will be removed. (That used to be an actual rule a long time ago when the compiler would occasionally produce instructions such as &lt;code&gt;{move,{x,2},{x,2}}&lt;/code&gt;.)</source>
          <target state="translated">このパターンは、 &lt;code&gt;move&lt;/code&gt; のオペランドが同じ場合に一致します。パターンが一致する場合、命令は削除されます。（これは、コンパイラが &lt;code&gt;{move,{x,2},{x,2}}&lt;/code&gt; などの命令を生成することがある昔の実際のルールでした。）</target>
        </trans-unit>
        <trans-unit id="67f2d1b249ea341993b06eb398c25dbdc1e0f0e5" translate="yes" xml:space="preserve">
          <source>This phase begins when the user finalizes the time offset by calling &lt;code&gt;&lt;a href=&quot;erlang#system_flag_time_offset&quot;&gt; erlang:system_flag(time_offset, finalize)&lt;/a&gt;&lt;/code&gt;. The finalization can only be performed once.</source>
          <target state="translated">このフェーズは、ユーザーが &lt;code&gt;&lt;a href=&quot;erlang#system_flag_time_offset&quot;&gt; erlang:system_flag(time_offset, finalize)&lt;/a&gt;&lt;/code&gt; 呼び出してタイムオフセットを確定したときに始まります。ファイナライズは1回のみ実行できます。</target>
        </trans-unit>
        <trans-unit id="f5f3552b260ce80c8512e7857145bb94d23327e2" translate="yes" xml:space="preserve">
          <source>This phase begins when the user finalizes the time offset by calling &lt;code&gt;&lt;a href=&quot;erlang#system_flag_time_offset&quot;&gt;erlang:system_flag(time_offset, finalize)&lt;/a&gt;&lt;/code&gt;. The finalization can only be performed once.</source>
          <target state="translated">このフェーズは、ユーザーが &lt;code&gt;&lt;a href=&quot;erlang#system_flag_time_offset&quot;&gt;erlang:system_flag(time_offset, finalize)&lt;/a&gt;&lt;/code&gt; 呼び出して時間オフセットを確定したときに始まります。ファイナライズは一度だけ実行できます。</target>
        </trans-unit>
        <trans-unit id="ac25d4a9fb597e683c9984270c084780c2dc2975" translate="yes" xml:space="preserve">
          <source>This phase starts when the runtime system starts. A preliminary time offset based on current OS system time is determined. This offset is from now on to be fixed during the whole preliminary phase.</source>
          <target state="translated">このフェーズはランタイムシステムの起動時に開始されます。現在のOSシステムの時間に基づいて、予備的な時間オフセットが決定されます。このオフセットは今後、予備フェーズ全体で固定されることになる。</target>
        </trans-unit>
        <trans-unit id="a659cf785f049a86d756b9c813aaeb6a80c02b1c" translate="yes" xml:space="preserve">
          <source>This port is to represent the result of an accept operation. It is created when one wants to accept from a listen socket, and it is converted to a &lt;code&gt;portTypeCommand&lt;/code&gt; when the accept succeeds.</source>
          <target state="translated">このポートは、受け入れ操作の結果を表すためのものです。これは、 &lt;code&gt;portTypeCommand&lt;/code&gt; ソケットから受け入れたいときに作成され、受け入れが成功したときにportTypeCommandに変換されます。</target>
        </trans-unit>
        <trans-unit id="8d46acb6abe2d76532e14cb270ed2c145b67edbb" translate="yes" xml:space="preserve">
          <source>This prevents creation of new atoms directly, creation of new atoms indirectly (as they are embedded in certain structures, such as process identifiers, refs, and funs), and creation of new external function references. None of those resources are garbage collected, so unchecked creation of them can exhaust available memory.</source>
          <target state="translated">これにより、新しいアトムの直接生成、間接的な新しいアトムの生成(プロセス識別子、Refs、funs などの特定の構造体に埋め込まれているため)、新しい外部関数参照の生成を防ぐことができます。これらのリソースはどれもガベージコレクションされないので、チェックを外したまま作成すると利用可能なメモリを使い果たしてしまう可能性があります。</target>
        </trans-unit>
        <trans-unit id="161ffdf8aa7fe91e902cf0c46062cf3c8c9ce913" translate="yes" xml:space="preserve">
          <source>This problem does not exist if all nodes are Erlang nodes.</source>
          <target state="translated">この問題はすべてのノードがErlangノードの場合には存在しません。</target>
        </trans-unit>
        <trans-unit id="970e9bfda49ef81fc9970f5d3a17505b795bc146" translate="yes" xml:space="preserve">
          <source>This problem is best solved by using Mnesia instead.</source>
          <target state="translated">この問題は、代わりにムネシアを使うことで解決するのがベストです。</target>
        </trans-unit>
        <trans-unit id="0b478a2b86cabc9871e0e9c3bdbf7e7c1549913b" translate="yes" xml:space="preserve">
          <source>This procedure differs from how it worked prior to Erlang/OTP 19.0. Before 19.0, only a contiguous memory block where the young heap and stack resided was considered to be part of the young heap. Heap fragments and messages were immediately copied into the young heap before they could be inspected by the Erlang program. The behaviour introduced in 19.0 is superior in many ways - most significantly it reduces the number of necessary copy operations and the root set for garbage collection.</source>
          <target state="translated">この手順はErlang/OTP 19.0以前とは異なります。19.0以前は、ヤングヒープとスタックがある連続したメモリブロックだけがヤングヒープの一部とみなされていました。ヒープフラグメントとメッセージはErlangプログラムが検査する前にすぐにヤングヒープにコピーされていました。19.0で導入された動作は多くの点で優れています-最も重要なのは、必要なコピー操作の数とガベージコレクションのためのルートセットを減らすことです。</target>
        </trans-unit>
        <trans-unit id="9c05999f98fd47b44ec0f00834f055638c5316ef" translate="yes" xml:space="preserve">
          <source>This process cannot run in multiple instances on the same hardware. OS_Mon must be configured to start &lt;code&gt;os_sup&lt;/code&gt; on one node only if two or more Erlang nodes execute on the same machine.</source>
          <target state="translated">このプロセスは、同じハードウェア上の複数のインスタンスで実行できません。OS_Monは、2つ以上のErlangノードが同じマシンで実行される場合にのみ、1つのノードで &lt;code&gt;os_sup&lt;/code&gt; を開始するように構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="3bb9e5caa10f9724817c37ffd6b5d433a1304dd3" translate="yes" xml:space="preserve">
          <source>This process executes &lt;code&gt;tut15:pong()&lt;/code&gt;. &lt;code&gt;Pong_PID&lt;/code&gt; is the process identity of the &quot;pong&quot; process. The function &lt;code&gt;start&lt;/code&gt; now creates another process &quot;ping&quot;:</source>
          <target state="translated">このプロセスは &lt;code&gt;tut15:pong()&lt;/code&gt; を実行します。 &lt;code&gt;Pong_PID&lt;/code&gt; は、「pong」プロセスのプロセスIDです。関数 &lt;code&gt;start&lt;/code&gt; は、別のプロセス「ping」を作成します。</target>
        </trans-unit>
        <trans-unit id="54ffc50690eb1a1de62954626b5c9e0167a4eba5" translate="yes" xml:space="preserve">
          <source>This process executes:</source>
          <target state="translated">この処理が実行されます。</target>
        </trans-unit>
        <trans-unit id="327419876abc14c730314a0010b944c17b63d4fa" translate="yes" xml:space="preserve">
          <source>This program aids release handling on Windows systems. The program is to be called by the &lt;code&gt;erlsrv&lt;/code&gt; program, read up the release data file &lt;code&gt;start_erl.data&lt;/code&gt;, and start Erlang. Some options to &lt;code&gt;start_erl&lt;/code&gt; are added and removed by the release handler during upgrade with emulator restart (more specifically option &lt;code&gt;-data&lt;/code&gt;).</source>
          <target state="translated">このプログラムは、Windowsシステムでのリリース処理を支援します。プログラムは &lt;code&gt;erlsrv&lt;/code&gt; プログラムによって呼び出され、リリースデータファイル &lt;code&gt;start_erl.data&lt;/code&gt; を読み取り、Erlangを起動します。 &lt;code&gt;start_erl&lt;/code&gt; の一部のオプションは、エミュレータの再起動を伴うアップグレード中にリリースハンドラによって追加および削除されます（具体的にはオプション &lt;code&gt;-data&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="670a2482a63126e58239dc332359f8bc1dff0e73" translate="yes" xml:space="preserve">
          <source>This program is called when the machine is started. It can be modified or rewritten to suit a special system. By default, it must be called &lt;code&gt;start&lt;/code&gt; and reside in &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt;. Another start program can be used, by using configuration parameter &lt;code&gt;start_prg&lt;/code&gt; in application SASL.</source>
          <target state="translated">このプログラムは、マシンの起動時に呼び出されます。特別なシステムに合わせて変更または書き直すことができます。デフォルトでは、 &lt;code&gt;start&lt;/code&gt; と呼ばれ、 &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt; に存在する必要があります。アプリケーションSASLで構成パラメーター &lt;code&gt;start_prg&lt;/code&gt; を使用することにより、別の開始プログラムを使用できます。</target>
        </trans-unit>
        <trans-unit id="4747c1263fbc28b515ca78f638cbd9259a9eb523" translate="yes" xml:space="preserve">
          <source>This program is distributed both in compiled form (under &amp;lt;Erlang root&amp;gt;\\erts-&amp;lt;version&amp;gt;\\bin) and in source form (under &amp;lt;Erlang root&amp;gt;\\erts-&amp;lt;version&amp;gt;\\src). The purpose of the source code is to ease customization of the program for local needs, such as cyclic restart detection. There is also a &quot;make&quot;-file, written for the &lt;code&gt;nmake&lt;/code&gt; program distributed with Microsoft Visual C++. This program can, however, be compiled with any Win32 C compiler (possibly with minor modifications).</source>
          <target state="translated">このプログラムは、コンパイルされた形式（&amp;lt;Erlang root&amp;gt; \\ erts- &amp;lt;version&amp;gt; \\ binの下）とソース形式（&amp;lt;Erlang root&amp;gt; \\ erts- &amp;lt;version&amp;gt; \\ srcの下）の両方で配布されます。ソースコードの目的は、サイクリックリスタート検出などのローカルニーズに合わせてプログラムを簡単にカスタマイズできるようにすることです。Microsoft Visual C ++とともに配布される &lt;code&gt;nmake&lt;/code&gt; プログラム用に作成された「make」ファイルもあります。ただし、このプログラムは任意のWin32 Cコンパイラでコンパイルできます（わずかな変更が加えられている可能性があります）。</target>
        </trans-unit>
        <trans-unit id="5fbfadc49450aec422c508001aa868916550a963" translate="yes" xml:space="preserve">
          <source>This program is to set static parameters and environment variables such as &lt;code&gt;-sname Name&lt;/code&gt; and &lt;code&gt;HEART_COMMAND&lt;/code&gt; to reboot the machine.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;-sname Name&lt;/code&gt; や &lt;code&gt;HEART_COMMAND&lt;/code&gt; などの静的パラメーターと環境変数を設定して、マシンを再起動します。</target>
        </trans-unit>
        <trans-unit id="c3f3c1fffec91449fdead388f394beeb915ca247" translate="yes" xml:space="preserve">
          <source>This program is used to attach to a running Erlang runtime system, started with &lt;code&gt;run_erl&lt;/code&gt;.</source>
          <target state="translated">このプログラムは、 &lt;code&gt;run_erl&lt;/code&gt; で開始される、実行中のErlangランタイムシステムに接続するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1f003599afc35a270db5f4b7d7b284e4c9e32aee" translate="yes" xml:space="preserve">
          <source>This program is used to start the emulator, but you will not be connected to the shell. &lt;code&gt;to_erl&lt;/code&gt; is used to connect to the Erlang shell.</source>
          <target state="translated">このプログラムはエミュレータの起動に使用されますが、シェルには接続されません。 &lt;code&gt;to_erl&lt;/code&gt; は、Erlangシェルへの接続に使用されます。</target>
        </trans-unit>
        <trans-unit id="6687161d9309502a24c4f52312cb9d9b40349c81" translate="yes" xml:space="preserve">
          <source>This program starts the Erlang emulator with parameters &lt;code&gt;-boot&lt;/code&gt; and &lt;code&gt;-config&lt;/code&gt; set. It reads data about where these files are located from a file named &lt;code&gt;start_erl.data&lt;/code&gt;, which is located in &lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt;. Each new release introduces a new data file. This file is automatically generated by the release handler in Erlang.</source>
          <target state="translated">このプログラムは、パラメータ &lt;code&gt;-boot&lt;/code&gt; および &lt;code&gt;-config&lt;/code&gt; を設定してErlangエミュレータを起動します。 &lt;code&gt;&amp;lt;RELDIR&amp;gt;&lt;/code&gt; にある &lt;code&gt;start_erl.data&lt;/code&gt; という名前のファイルから、これらのファイルの場所に関するデータを読み取ります。新しいリリースごとに新しいデータファイルが導入されます。このファイルはErlangのリリースハンドラーによって自動的に生成されます。</target>
        </trans-unit>
        <trans-unit id="8f257f89dea065885b66a0cd478fca5389333698" translate="yes" xml:space="preserve">
          <source>This property is only valid if &lt;code&gt;auto_ack&lt;/code&gt; is true.</source>
          <target state="translated">このプロパティは、 &lt;code&gt;auto_ack&lt;/code&gt; がtrueの場合にのみ有効です。</target>
        </trans-unit>
        <trans-unit id="5810ec17d7cb173c4fccedc7a14810f5d07c123d" translate="yes" xml:space="preserve">
          <source>This puts less load on the filesystem, but much more on the Erlang runtime system.</source>
          <target state="translated">これはファイルシステムへの負荷を軽減しますが、Erlangのランタイムシステムへの負荷は大きくなります。</target>
        </trans-unit>
        <trans-unit id="fe519e24650180a3fcf221d96e6f790286d56794" translate="yes" xml:space="preserve">
          <source>This query also removes duplicates but the answers are sorted. If there are many answers, temporary files are used. Notice that to get the first unique answer, all answers must be found and sorted. Both alternatives find duplicates by comparing answers, that is, if &lt;code&gt;A1&lt;/code&gt; and &lt;code&gt;A2&lt;/code&gt; are answers found in that order, then &lt;code&gt;A2&lt;/code&gt; is a removed if &lt;code&gt;A1 == A2&lt;/code&gt;.</source>
          <target state="translated">このクエリも重複を削除しますが、回答はソートされます。回答が多い場合は、一時ファイルを使用します。最初の一意の回答を取得するには、すべての回答を見つけてソートする必要があることに注意してください。どちらの選択肢も、回答を比較することで重複を検出します。つまり、 &lt;code&gt;A1&lt;/code&gt; と &lt;code&gt;A2&lt;/code&gt; がこの順序で見つかった回答である場合、 &lt;code&gt;A1 == A2&lt;/code&gt; 場合、 &lt;code&gt;A2&lt;/code&gt; は削除されます。</target>
        </trans-unit>
        <trans-unit id="c2f6bad75f3fbef13092a6a4222f43094d545fae" translate="yes" xml:space="preserve">
          <source>This query hits the feature of partially bound keys in table type &lt;code&gt;ordered_set&lt;/code&gt;, so that not the whole table needs to be searched, only the part containing keys beginning with &lt;code&gt;0&lt;/code&gt; is looked into.</source>
          <target state="translated">このクエリは、テーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; の部分的にバインドされたキーの機能にヒットするため、テーブル全体を検索する必要はなく、 &lt;code&gt;0&lt;/code&gt; で始まるキーを含む部分のみが検索されます。</target>
        </trans-unit>
        <trans-unit id="671f4cec79d07856674afe86714dc175a1654c1b" translate="yes" xml:space="preserve">
          <source>This random number generator is not cryptographically strong. If a strong cryptographic random number generator is needed, use one of functions in the &lt;code&gt;crypto&lt;/code&gt; module, for example, &lt;code&gt; crypto:strong_rand_bytes/1&lt;/code&gt;.</source>
          <target state="translated">この乱数ジェネレーターは、暗号的に強力ではありません。強力な暗号化乱数ジェネレーターが必要な場合は、 &lt;code&gt;crypto&lt;/code&gt; モジュールの関数の1つ（ &lt;code&gt; crypto:strong_rand_bytes/1&lt;/code&gt; など)を使用します。</target>
        </trans-unit>
        <trans-unit id="9e6a7904ebcd7549f287cc377bc5ea8dfe7feaba" translate="yes" xml:space="preserve">
          <source>This random number generator is not cryptographically strong. If a strong cryptographic random number generator is needed, use one of functions in the &lt;code&gt;crypto&lt;/code&gt; module, for example, &lt;code&gt;crypto:strong_rand_bytes/1&lt;/code&gt;.</source>
          <target state="translated">この乱数ジェネレーターは暗号的に強力ではありません。強力な暗号乱数発生器が必要とされる場合、の関数の使用1 &lt;code&gt;crypto&lt;/code&gt; 例えばモジュール、 &lt;code&gt;crypto:strong_rand_bytes/1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c4aeff4461a7bf1567cdb7c34105213973f7dd8" translate="yes" xml:space="preserve">
          <source>This reads the &lt;code&gt;logger&lt;/code&gt; configuration parameter from the &lt;code&gt;my_all&lt;/code&gt; application and starts the configured handlers. The contents of the configuration use the same rules as the &lt;code&gt;&lt;a href=&quot;logger_chapter#handler-configuration&quot;&gt;logger handler configuration&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;logger&lt;/code&gt; 構成パラメーターが &lt;code&gt;my_all&lt;/code&gt; アプリケーションから読み取られ、構成されたハンドラーが開始されます。構成の内容は、 &lt;code&gt;&lt;a href=&quot;logger_chapter#handler-configuration&quot;&gt;logger handler configuration&lt;/a&gt;&lt;/code&gt; と同じルールを使用します。</target>
        </trans-unit>
        <trans-unit id="c00434ba7af79d001ca617ae07f4509311aeefbf" translate="yes" xml:space="preserve">
          <source>This reads the &lt;code&gt;logger&lt;/code&gt; configuration parameter from the &lt;code&gt;my_app&lt;/code&gt; application and starts the configured handlers. The contents of the configuration use the same rules as the &lt;code&gt;&lt;a href=&quot;logger_chapter#handler-configuration&quot;&gt;logger handler configuration&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;my_app&lt;/code&gt; アプリケーションから &lt;code&gt;logger&lt;/code&gt; 構成パラメーターが読み取られ、構成済みハンドラーが開始されます。構成の内容は、 &lt;code&gt;&lt;a href=&quot;logger_chapter#handler-configuration&quot;&gt;logger handler configuration&lt;/a&gt;&lt;/code&gt; と同じルールを使用します。</target>
        </trans-unit>
        <trans-unit id="dd05537434a4630f9db4b01dfd929c70a6829e0d" translate="yes" xml:space="preserve">
          <source>This reads the entire contents of &lt;code&gt;&quot;mtab&quot;&lt;/code&gt; into the specified registry. After the restore, all the objects in the registry are marked as unmodified, so a later backup only affects objects that you have modified since the restore.</source>
          <target state="translated">これにより、 &lt;code&gt;&quot;mtab&quot;&lt;/code&gt; 内容全体が指定されたレジストリに読み込まれます。復元後、レジストリ内のすべてのオブジェクトは変更されていないものとしてマークされるため、以降のバックアップは復元後に変更されたオブジェクトにのみ影響します。</target>
        </trans-unit>
        <trans-unit id="e5017094927d4a8eb77c34c12688c26a383cd09d" translate="yes" xml:space="preserve">
          <source>This reference manual contains type descriptions generated from types in the &lt;code&gt;gen_statem&lt;/code&gt; source code, so they are correct. However, the generated descriptions also reflect the type hierarchy, which sometimes makes it hard to get a good overview. If so, see the section &lt;code&gt; gen_statem&amp;nbsp;Behaviour &lt;/code&gt; in the &lt;code&gt; OTP Design Principles &lt;/code&gt; User's Guide.</source>
          <target state="translated">このリファレンスマニュアルには、 &lt;code&gt;gen_statem&lt;/code&gt; ソースコードの型から生成された型の説明が含まれているため、正しいものです。ただし、生成された説明にはタイプ階層も反映されているため、概要を把握するのが難しい場合があります。その場合は、セクションを参照 &lt;code&gt; gen_statem&amp;nbsp;Behaviour &lt;/code&gt; で &lt;code&gt; OTP Design Principles &lt;/code&gt; ユーザーズガイドを。</target>
        </trans-unit>
        <trans-unit id="13a79d754831b14cd54b94d9e66117a733bf984b" translate="yes" xml:space="preserve">
          <source>This reference manual describes types generated from the types in the &lt;code&gt;gen_statem&lt;/code&gt; source code, so they are correct. However, the generated descriptions also reflect the type hiearchy, which makes them kind of hard to read.</source>
          <target state="translated">このリファレンスマニュアルでは、 &lt;code&gt;gen_statem&lt;/code&gt; ソースコードのタイプから生成されたタイプについて説明しているため、正しいタイプです。ただし、生成された説明はタイプhiearchyも反映しているため、読みにくくなっています。</target>
        </trans-unit>
        <trans-unit id="1c8060b97047d75217dfaa592520c89dd24db028" translate="yes" xml:space="preserve">
          <source>This renders a result similar to the following:</source>
          <target state="translated">これにより、以下のような結果が得られます。</target>
        </trans-unit>
        <trans-unit id="9f783544c6147fb46866ca14f57f1cf28fd64491" translate="yes" xml:space="preserve">
          <source>This request asks for a complete list of all options supported by the I/O server as well as their current values.</source>
          <target state="translated">このリクエストは、I/Oサーバがサポートするすべてのオプションとその現在の値の完全なリストを要求します。</target>
        </trans-unit>
        <trans-unit id="c9ef467065f7f3147aa63fa765e54a5cacd5c45f" translate="yes" xml:space="preserve">
          <source>This request is not really used, it is to be regarded as a debug feature.</source>
          <target state="translated">このリクエストは実際には使われていないので、デバッグ機能とみなすことになります。</target>
        </trans-unit>
        <trans-unit id="d449ed2883b9cc55517ccad2ba93e587a2d92524" translate="yes" xml:space="preserve">
          <source>This request is used through the Erlang function &lt;code&gt; net_adm:names/1,2&lt;/code&gt;. A TCP connection is opened to the EPMD and this request is sent.</source>
          <target state="translated">このリクエストは、Erlang関数 &lt;code&gt; net_adm:names/1,2&lt;/code&gt; を介して使用されます。EPMDへのTCP接続が開かれ、この要求が送信されます。</target>
        </trans-unit>
        <trans-unit id="5ed5461b3e3a2705d00654ef7851baa95f3c5a7b" translate="yes" xml:space="preserve">
          <source>This request is used through the Erlang function &lt;code&gt;net_adm:names/1,2&lt;/code&gt;. A TCP connection is opened to the EPMD and this request is sent.</source>
          <target state="translated">このリクエストは、Erlang関数 &lt;code&gt;net_adm:names/1,2&lt;/code&gt; を通じて使用されます。EPMDへのTCP接続が開かれ、この要求が送信されます。</target>
        </trans-unit>
        <trans-unit id="fa4697a836ae0380ae5f8e0e273aa79c5259e1e7" translate="yes" xml:space="preserve">
          <source>This request kills the running EPMD. It is almost never used.</source>
          <target state="translated">このリクエストは実行中のEPMDを終了させます。ほとんど使用されることはありません。</target>
        </trans-unit>
        <trans-unit id="c37139085c2a33777870615ebb189dd29f4711b3" translate="yes" xml:space="preserve">
          <source>This results in the following record:</source>
          <target state="translated">その結果、以下のような記録が得られます。</target>
        </trans-unit>
        <trans-unit id="c6a3367c426977d974ddf7ae39a973d34adfaba6" translate="yes" xml:space="preserve">
          <source>This results in the following records:</source>
          <target state="translated">その結果、以下のようなレコードが生成されます。</target>
        </trans-unit>
        <trans-unit id="4754bd22d399a2af6e9567cb4368afe4e9a97e68" translate="yes" xml:space="preserve">
          <source>This return value is valid even if option &lt;code&gt;kill_ports&lt;/code&gt; was used, as killing ports can be a process that does not complete immediately. However, the condition is in that case transient. Monitors are always useful to detect when the driver is really unloaded.</source>
          <target state="translated">&lt;code&gt;kill_ports&lt;/code&gt; オプションが使用されていても、この戻り値は有効です。ポートの強制終了は、すぐには完了しないプロセスになる可能性があるためです。ただし、その場合の状態は一時的なものです。モニターは常に、ドライバーが実際にアンロードされたときに検出するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="61bce59fa6b3bc349ada24ae6e1accf7342572aa" translate="yes" xml:space="preserve">
          <source>This returns the driver structure. The macro &lt;code&gt;DRIVER_INIT&lt;/code&gt; defines the only exported function. All the other functions are static, and will not be exported from the library.</source>
          <target state="translated">これはドライバ構造を返します。マクロ &lt;code&gt;DRIVER_INIT&lt;/code&gt; は、エクスポートされる唯一の関数を定義します。他のすべての関数は静的であり、ライブラリからエクスポートされません。</target>
        </trans-unit>
        <trans-unit id="236d4116cd1bd104778ca12a47df3dca542bc4b6" translate="yes" xml:space="preserve">
          <source>This saves the trouble of first fetching a keyed value, appending a new value to the list of stored values, and storing the result.</source>
          <target state="translated">これにより、最初にキー付きの値を取得し、保存されている値のリストに新しい値を追加し、結果を保存するという手間が省けます。</target>
        </trans-unit>
        <trans-unit id="31f5366cf36758d97de45b416b180fe5021204ef" translate="yes" xml:space="preserve">
          <source>This scenario can occur if the driver code needs replacement during operation of the Erlang emulator. Implementing driver code replacement is a little more tedious than Beam code replacement, as one driver cannot be loaded as both &quot;old&quot; and &quot;new&quot; code. All &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; of a driver must have it closed (no open ports) before the old code can be unloaded and the new code can be loaded.</source>
          <target state="translated">このシナリオは、Erlangエミュレータの動作中にドライバコードを置き換える必要がある場合に発生する可能性があります。1つのドライバーを「古い」コードと「新しい」コードの両方としてロードすることはできないため、ドライバーコード置換の実装は、Beamコード置換よりも少し面倒です。ドライバーのすべての &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; は、古いコードをアンロードして新しいコードをロードする前に、それを閉じる（開いているポートがない）必要があります。</target>
        </trans-unit>
        <trans-unit id="503f88b8d41295f847befbf0174f96b5e1d17d21" translate="yes" xml:space="preserve">
          <source>This section also describes the locking functions, including table locks and sticky locks, as well as alternative functions that bypass the transaction system in favor of improved speed and reduced overhead. These functions are called &quot;dirty operations&quot;. The use of nested transactions is also described. The following topics are included:</source>
          <target state="translated">このセクションでは、テーブルロックやスティッキーロックなどのロック機能や、トランザクションシステムをバイパスして速度を向上させ、オーバーヘッドを削減する代替機能についても説明します。これらの関数は「ダーティオペレーション」と呼ばれます。入れ子になったトランザクションの使用についても説明します。以下のトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="ca13c61387c20120a915aa2aba2a70b09cc77ff8" translate="yes" xml:space="preserve">
          <source>This section contains information about all loaded modules.</source>
          <target state="translated">このセクションには、ロードされたすべてのモジュールに関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="f0afb7bdb78aa30270d4c5341a78528374ecd48c" translate="yes" xml:space="preserve">
          <source>This section contains information about all the ETS tables in the system. The following fields are of interest for each table:</source>
          <target state="translated">このセクションには、システム内のすべてのETSテーブルに関する情報が含まれています。各テーブルについて、以下のフィールドが注目されています。</target>
        </trans-unit>
        <trans-unit id="c705a253aaab772432302fcb590c6d71895de050" translate="yes" xml:space="preserve">
          <source>This section contains information about all the timers started with the BIFs &lt;code&gt;erlang:start_timer/3&lt;/code&gt; and &lt;code&gt;erlang:send_after/3&lt;/code&gt;. The following fields exist for each timer:</source>
          <target state="translated">このセクションには、BIFの &lt;code&gt;erlang:start_timer/3&lt;/code&gt; および &lt;code&gt;erlang:send_after/3&lt;/code&gt; で開始されるすべてのタイマーに関する情報が含まれています。タイマーごとに次のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="e593d062792a79977388f9b736ca5fdb84956c5e" translate="yes" xml:space="preserve">
          <source>This section contains simple introductory examples only. For a full description of the QLC query language, see the &lt;code&gt;qlc&lt;/code&gt; manual page in &lt;code&gt;STDLIB&lt;/code&gt;.</source>
          <target state="translated">このセクションには、簡単な導入例のみが含まれています。 &lt;code&gt;qlc&lt;/code&gt; クエリ言語の詳細については、STDLIBのqlcマニュアルページを参照して &lt;code&gt;STDLIB&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="388bc7f1102a9ae9f2581325e4b4730cdd3f0142" translate="yes" xml:space="preserve">
          <source>This section demonstrates how simple it is to write a basic (yet for many module testing purposes, often sufficiently complex) test suite and execute its test cases. This is not necessarily obvious when you read the remaining sections in this User's Guide.</source>
          <target state="translated">このセクションでは、基本的な(しかし、多くのモジュールテストの目的のために、多くの場合、十分に複雑な)テストスイートを書き、そのテストケースを実行することがいかに簡単であるかを示しています。これは、このユーザーズガイドの残りのセクションを読んでも、必ずしも明らかではありません。</target>
        </trans-unit>
        <trans-unit id="e57241c5a98cbdf10642d048108a7272df13ecae" translate="yes" xml:space="preserve">
          <source>This section describes a simple driver for accessing a postgres database using the libpq C client library. Postgres is used because it is free and open source. For information on postgres, see &lt;code&gt;&lt;a href=&quot;http://www.postgres.org&quot;&gt;www.postgres.org&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、libpq Cクライアントライブラリを使用してpostgresデータベースにアクセスするための簡単なドライバーについて説明します。Postgresはフリーでオープンソースであるため使用されます。postgresの詳細については、 &lt;code&gt;&lt;a href=&quot;http://www.postgres.org&quot;&gt;www.postgres.org&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8941b0891a6ff874af251fbb759dca478d13c6f3" translate="yes" xml:space="preserve">
          <source>This section describes examples of how to use the Public Key API. Keys and certificates used in the following sections are generated only for testing the Public Key application.</source>
          <target state="translated">このセクションでは、公開鍵 API の使用方法の例を説明します。以下のセクションで使用される鍵および証明書は、公開鍵アプリケーションをテストするためにのみ生成されます。</target>
        </trans-unit>
        <trans-unit id="ba0088de53a90de56e1f80e0ac3933382d74faf7" translate="yes" xml:space="preserve">
          <source>This section describes how an embedded system is started. Four programs are involved and they normally reside in the directory &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt;. The only exception is the &lt;code&gt;start&lt;/code&gt; program, which can be located anywhere, and is also the only program that must be modified by the user.</source>
          <target state="translated">このセクションでは、組み込みシステムの起動方法について説明します。4つのプログラムが関係しており、通常はディレクトリ &lt;code&gt;&amp;lt;ERL_INSTALL_DIR&amp;gt;/bin&lt;/code&gt; にあります。唯一の例外は、どこにでも配置できる &lt;code&gt;start&lt;/code&gt; プログラムであり、ユーザーが変更する必要がある唯一のプログラムでもあります。</target>
        </trans-unit>
        <trans-unit id="5dffe6465a9a88971444b067aa33f3c613e2da6a" translate="yes" xml:space="preserve">
          <source>This section describes how the Erlang distribution can use TLS to get extra verification and security.</source>
          <target state="translated">このセクションでは、ErlangディストリビューションがどのようにTLSを使って検証とセキュリティを強化するかを説明します。</target>
        </trans-unit>
        <trans-unit id="7ba1b8e520e730aff5ce60b5891f8456502ebe16" translate="yes" xml:space="preserve">
          <source>This section describes how the Erlang runtime system is configured for IP communication. It also explains how you can configure it for your needs by a configuration file. The information is primarily intended for users with special configuration needs or problems. There is normally no need for specific settings for Erlang to function properly on a correctly IP-configured platform.</source>
          <target state="translated">このセクションでは、ErlangランタイムシステムがIP通信のためにどのように設定されているかを説明します。また、必要に応じて設定ファイルを使って設定する方法についても説明します。この情報は主に特別な設定の必要性や問題を抱えたユーザのためのものです。通常、正しくIP設定されたプラットフォーム上でErlangが正しく機能するために特別な設定をする必要はありません。</target>
        </trans-unit>
        <trans-unit id="b9ba9d8ce48a5e18d389572e80e439e457082f15" translate="yes" xml:space="preserve">
          <source>This section describes how to build the Erlang emulator and the OTP libraries on Windows. Note that the Windows binary releases are still a preferred alternative if one does not have Microsoft&amp;rsquo;s development tools and/or don&amp;rsquo;t want to install Cygwin, MSYS or MSYS2.</source>
          <target state="translated">このセクションでは、WindowsでErlangエミュレーターとOTPライブラリーを構築する方法について説明します。Microsoftの開発ツールがない場合や、Cygwin、MSYS、MSYS2をインストールしたくない場合は、Windowsバイナリリリースが依然として好ましい代替手段であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dcc931582562f8a25cb00d5b918e90edbe2d35fd" translate="yes" xml:space="preserve">
          <source>This section describes how to build the Erlang emulator and the OTP libraries on Windows. Note that the Windows binary releases are still a preferred alternative if one does not have Microsoft&amp;rsquo;s development tools and/or don&amp;rsquo;t want to install WSL.</source>
          <target state="translated">このセクションでは、WindowsでErlangエミュレーターとOTPライブラリーを構築する方法について説明します。Microsoftの開発ツールがない場合や、WSLをインストールしたくない場合は、Windowsバイナリリリースが依然として推奨される代替手段であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="23b49078ad714b83061016b41c527ea88a0ef01c" translate="yes" xml:space="preserve">
          <source>This section describes how to build your own driver for Erlang.</source>
          <target state="translated">このセクションではErlang用のドライバを自分で作る方法を説明します。</target>
        </trans-unit>
        <trans-unit id="9ea8a2e527669401063f6aeee8dc65aebcbab675" translate="yes" xml:space="preserve">
          <source>This section describes how to implement an alternative carrier protocol for the Erlang distribution. The distribution is normally carried by TCP/IP. Here is explained a method for replacing TCP/IP with another protocol.</source>
          <target state="translated">このセクションではErlangディストリビューションの代替キャリアプロトコルを実装する方法を説明します。通常、ディストリビューションはTCP/IPで運ばれます。ここではTCP/IPを別のプロトコルに置き換える方法を説明します。</target>
        </trans-unit>
        <trans-unit id="ef9194590c5bbba89fd68a31ae7705b884e62724" translate="yes" xml:space="preserve">
          <source>This section describes how to implement an alternative discovery mechanism for Erlang distribution. Discovery is normally done using DNS and the Erlang Port Mapper Daemon (EPMD) for port discovery.</source>
          <target state="translated">このセクションでは、Erlangディストリビューションのための別のディスカバリメカニズムを実装する方法を説明します。通常、発見はDNSとErlang Port Mapper Daemon (EPMD)を使ってポート発見を行います。</target>
        </trans-unit>
        <trans-unit id="da8047f598c0cf0b64db9a2f17dfe37a85e55406" translate="yes" xml:space="preserve">
          <source>This section describes how to implement an alternative node discovery mechanism for Erlang distribution. Node discovery is normally done using DNS and the Erlang Port Mapper Daemon (EPMD) for port registration and lookup.</source>
          <target state="translated">このセクションでは、Erlangディストリビューションのための別のノード発見メカニズムを実装する方法を説明します。通常、ノードの発見はDNSとErlang Port Mapper Daemon (EPMD)を使ってポートの登録と検索を行います。</target>
        </trans-unit>
        <trans-unit id="62a63b1a98e975cb1778e4a9f8ed67fec8fb504f" translate="yes" xml:space="preserve">
          <source>This section describes how to write a Net if process.</source>
          <target state="translated">ここでは、Net if プロセスの書き方を説明します。</target>
        </trans-unit>
        <trans-unit id="a5a2806882d6d1e2d41fb571e953fc2694d49bf3" translate="yes" xml:space="preserve">
          <source>This section describes how to write a process that complies to the OTP design principles, without using a standard behaviour. Such a process is to:</source>
          <target state="translated">ここでは、標準的なビヘイビアを使わずに、OTP設計の原則に準拠したプロセスをどのように書くかを説明します。そのようなプロセスは次のようなものです。</target>
        </trans-unit>
        <trans-unit id="db110007d4cae55a5cd2784be2448b1464cdeff4" translate="yes" xml:space="preserve">
          <source>This section describes the &lt;code&gt;Mnesia&lt;/code&gt; transaction system and the transaction properties that make &lt;code&gt;Mnesia&lt;/code&gt; a fault-tolerant, distributed Database Management System (DBMS).</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; トランザクションシステムと、 &lt;code&gt;Mnesia&lt;/code&gt; をフォールトトレラントな分散データベース管理システム（DBMS）にするトランザクションプロパティについて説明します。</target>
        </trans-unit>
        <trans-unit id="145559b08f0e7daceea91964fac1205f05f73a6b" translate="yes" xml:space="preserve">
          <source>This section describes the &lt;code&gt;erl_crash.dump&lt;/code&gt; file generated upon abnormal exit of the Erlang runtime system.</source>
          <target state="translated">このセクションでは、Erlangランタイムシステムの異常終了時に生成される &lt;code&gt;erl_crash.dump&lt;/code&gt; ファイルについて説明します。</target>
        </trans-unit>
        <trans-unit id="615a4d70bf1eb0943d565d942619e06723c44a20" translate="yes" xml:space="preserve">
          <source>This section describes the ASN.1 types including their functionality, purpose, and how values are assigned in Erlang.</source>
          <target state="translated">このセクションでは、ASN.1の型の機能、目的、Erlangでの値の割り当て方などについて説明します。</target>
        </trans-unit>
        <trans-unit id="4973acdcae6787712641efb91993666da08e3527" translate="yes" xml:space="preserve">
          <source>This section describes the basic steps when designing a &lt;code&gt;Mnesia&lt;/code&gt; database and the programming constructs that make different solutions available to the programmer. The following topics are included:</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; データベースを設計する際の基本的な手順と、プログラマーがさまざまなソリューションを利用できるようにするプログラミング構造について説明します。次のトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="734f476df2959a2662d969893e8e7029abc0685e" translate="yes" xml:space="preserve">
          <source>This section describes the current state of standards compliance of the ssl application.</source>
          <target state="translated">ここでは、sslアプリケーションの規格準拠の現状について説明します。</target>
        </trans-unit>
        <trans-unit id="faf94ee7a5d096d374f74f2312ed2c9e2ebd27de" translate="yes" xml:space="preserve">
          <source>This section describes the distribution handshake protocol introduced in Erlang/OTP R6. This description was previously located in &lt;code&gt;$ERL_TOP/lib/kernel/internal_doc/distribution_handshake.txt&lt;/code&gt; and has more or less been copied and &quot;formatted&quot; here. It has been almost unchanged since 1999, but the handshake has not changed much since then either.</source>
          <target state="translated">このセクションでは、Erlang / OTP R6で導入された配布ハンドシェイクプロトコルについて説明します。この説明は、以前は &lt;code&gt;$ERL_TOP/lib/kernel/internal_doc/distribution_handshake.txt&lt;/code&gt; あり、多かれ少なかれここでコピーおよび「フォーマット」されています。1999年以降ほとんど変わっていませんが、それ以降、ハンドシェイクに大きな変化はありません。</target>
        </trans-unit>
        <trans-unit id="c5d7bec7b79a0ae59b92c5e5f67ae7a72f8453de" translate="yes" xml:space="preserve">
          <source>This section describes the distribution handshake protocol used between nodes to establishing a connection. The protocol was introduced in Erlang/OTP R6 and has remained unchanged until OTP 23. The changes made in OTP 23 were designed to be compatible with the older protocol version. That is an old node can still connect toward a new node and vice versa.</source>
          <target state="translated">このセクションでは接続を確立するためにノード間で使われる配布ハンドシェイクプロトコルについて説明します。このプロトコルはErlang/OTP R6で導入され、OTP 23まで変更されていません。OTP 23で行われた変更は古いバージョンのプロトコルと互換性があるように設計されています。つまり、古いノードは新しいノードに向かって接続することができますし、その逆もできます。</target>
        </trans-unit>
        <trans-unit id="d76e009e16bdd01f805b9e968741d4585ed774f4" translate="yes" xml:space="preserve">
          <source>This section describes the functions available for schema management, all which return either of the following tuples:</source>
          <target state="translated">このセクションでは、スキーマ管理で利用可能な関数について説明します。</target>
        </trans-unit>
        <trans-unit id="b453da50a4aa889b5bfe6fc3855f07b9e605aebd" translate="yes" xml:space="preserve">
          <source>This section describes the incoming messages which a Net If process may choose to respond to.</source>
          <target state="translated">このセクションでは、Net If プロセスが応答を選択する可能性のある受信メッセージについて説明します。</target>
        </trans-unit>
        <trans-unit id="6589e4219f2138e744e1d40f56f69ff33d9cd04f" translate="yes" xml:space="preserve">
          <source>This section describes the incoming messages which a Net if process must be able to receive.</source>
          <target state="translated">ここでは、Net if プロセスが受信可能でなければならない受信メッセージについて説明します。</target>
        </trans-unit>
        <trans-unit id="ba803131ede9177f9bd28303113e3a91a6271ee1" translate="yes" xml:space="preserve">
          <source>This section describes the internal files that are created and maintained by the &lt;code&gt;Mnesia&lt;/code&gt; system. In particular, the workings of the &lt;code&gt;Mnesia&lt;/code&gt; log are described.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; システムによって作成および保守される内部ファイルについて説明します。特に、 &lt;code&gt;Mnesia&lt;/code&gt; ログの仕組みについて説明します。</target>
        </trans-unit>
        <trans-unit id="16c349c9cdb2076b95c930dc72ed84bdd0fd6a91" translate="yes" xml:space="preserve">
          <source>This section describes the operating system-specific parts of OTP that relate to Solaris.</source>
          <target state="translated">ここでは、Solaris に関連する OTP のオペレーティングシステム固有の部分について説明します。</target>
        </trans-unit>
        <trans-unit id="35c4d999a1922f58afda1ed0555720ff15b4c949" translate="yes" xml:space="preserve">
          <source>This section describes the operating system-specific parts of OTP that relate to Windows NT.</source>
          <target state="translated">このセクションでは、Windows NT に関連する OTP のオペレーティングシステム固有の部分について説明します。</target>
        </trans-unit>
        <trans-unit id="40285644d87303c5462b5e3de0dc15016aecc45b" translate="yes" xml:space="preserve">
          <source>This section describes the output format of the analyse command. See &lt;code&gt;&lt;a href=&quot;#analyse&quot;&gt;analyse/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ここでは、analyzeコマンドの出力形式について説明します。 &lt;code&gt;&lt;a href=&quot;#analyse&quot;&gt;analyse/0&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="56322ae43abba91cc149a5278e951f77e9967920" translate="yes" xml:space="preserve">
          <source>This section describes the rules for constructing binaries using the bit syntax. Unlike when constructing lists or tuples, the construction of a binary can fail with a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">このセクションでは、ビット構文を使用してバイナリを構築するための規則について説明します。リストやタプルを構築する場合とは異なり、バイナリの構築は &lt;code&gt;badarg&lt;/code&gt; 例外で失敗する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9c65c0615f3b377f5b341fdeacc78b3636ed30f2" translate="yes" xml:space="preserve">
          <source>This section describes the rules for matching binaries, using the bit syntax.</source>
          <target state="translated">このセクションでは、ビット構文を使用したバイナリのマッチングルールについて説明します。</target>
        </trans-unit>
        <trans-unit id="c4785eaeac1329ade355f9bd89d5b3faa13bbcad" translate="yes" xml:space="preserve">
          <source>This section describes the slightly different match specifications translated by &lt;code&gt; dbg:fun2ms/1&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt; dbg:fun2ms/1&lt;/code&gt; によって変換されたわずかに異なる一致仕様について説明します。</target>
        </trans-unit>
        <trans-unit id="3efdb6c16651b89d1df8757e4dbe192b22b7b9d8" translate="yes" xml:space="preserve">
          <source>This section describes the slightly different match specifications translated by &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;.</source>
          <target state="translated">このセクションでは、 &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; によって翻訳されるわずかに異なる一致仕様について説明します。</target>
        </trans-unit>
        <trans-unit id="56316fa96e48fce5d8864ec5f5ab650e8bc4aac3" translate="yes" xml:space="preserve">
          <source>This section describes the standard representation of parse trees for Erlang programs as Erlang terms. This representation is known as the &lt;strong&gt;abstract format&lt;/strong&gt;. Functions dealing with such parse trees are &lt;code&gt; compile:forms/1,2&lt;/code&gt; and functions in the following modules:</source>
          <target state="translated">このセクションでは、Erlangプログラムの解析ツリーの標準表現をErlang用語として説明します。この表現は、&lt;strong&gt;抽象形式&lt;/strong&gt;として知られてい&lt;strong&gt;ます&lt;/strong&gt;。このような解析ツリーを処理 &lt;code&gt; compile:forms/1,2&lt;/code&gt; 関数は、compile：forms / 1,2であり、次のモジュールの関数です。</target>
        </trans-unit>
        <trans-unit id="2b3b7f437eda66334d0b64118f5de15fc1fc7fab" translate="yes" xml:space="preserve">
          <source>This section describes the standard representation of parse trees for Erlang programs as Erlang terms. This representation is known as the &lt;strong&gt;abstract format&lt;/strong&gt;. Functions dealing with such parse trees are &lt;code&gt;compile:forms/1,2&lt;/code&gt; and functions in the following modules:</source>
          <target state="translated">このセクションでは、Erlangプログラムの解析ツリーの標準表現をErlang用語として説明します。この表現は、&lt;strong&gt;抽象フォーマット&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。このような解析ツリーを扱う関数は &lt;code&gt;compile:forms/1,2&lt;/code&gt; であり、次のモジュールの関数です。</target>
        </trans-unit>
        <trans-unit id="2174d2f040729649ef711f3e5635d25b5e2b5fd1" translate="yes" xml:space="preserve">
          <source>This section describes the use of the registry, a simple mechanism for storing key-value pairs in a C-node, as well as backing them up or restoring them from an &lt;code&gt;Mnesia&lt;/code&gt; table on an Erlang node. For more detailed information about the individual API functions, see the &lt;code&gt;&lt;a href=&quot;registry&quot;&gt;registry&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">このセクションでは、Cノードにキーと値のペアを格納する簡単なメカニズムであるレジストリの使用方法と、Erlangノードの &lt;code&gt;Mnesia&lt;/code&gt; テーブルからそれらをバックアップまたは復元する方法について説明します。個々のAPI関数の詳細については、 &lt;code&gt;&lt;a href=&quot;registry&quot;&gt;registry&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="9871ac4ba76bd34221092f66dc88616fc9822501" translate="yes" xml:space="preserve">
          <source>This section describes what to change in the example to use one &lt;code&gt;handle_event/4&lt;/code&gt; function. The previously used approach to first branch depending on event does not work that well here because of the &lt;strong&gt;state enter calls&lt;/strong&gt;, so this example first branches depending on state:</source>
          <target state="translated">このセクションでは、1つの &lt;code&gt;handle_event/4&lt;/code&gt; 関数を使用するために例で何を変更するかについて説明します。イベントに応じて最初に分岐するために以前に使用されたアプローチは、&lt;strong&gt;状態入力呼び出しの&lt;/strong&gt;ためにここではうまく機能しません。したがって、この例で&lt;strong&gt;は&lt;/strong&gt;、&lt;strong&gt;状態に&lt;/strong&gt;応じて最初に分岐します。</target>
        </trans-unit>
        <trans-unit id="6e54bfa17aaa2c2d40ded61fef98685a45ccab20" translate="yes" xml:space="preserve">
          <source>This section describes what to change in the example to use one &lt;code&gt;handle_event/4&lt;/code&gt; function. The previously used approach to first branch depending on event does not work that well here because of the state enter calls, so this example first branches depending on state:</source>
          <target state="translated">このセクションでは、1つの &lt;code&gt;handle_event/4&lt;/code&gt; 関数を使用するために、例で何を変更するかについて説明します。イベントに応じて最初に分岐するために以前に使用されたアプローチは、状態のenter呼び出しのため、ここではうまく機能しません。したがって、この例は、状態に応じて最初に分岐します。</target>
        </trans-unit>
        <trans-unit id="62fe5fd22b036a47305b864aea85d4d04ebc8617" translate="yes" xml:space="preserve">
          <source>This section illustrates procedural abstraction. Initially, the following two examples are written as conventional functions.</source>
          <target state="translated">手続き的な抽象化について説明します。最初は、以下の2つの例を従来の関数として記述します。</target>
        </trans-unit>
        <trans-unit id="cceb1f5cb17e39dece66daf2562fc578ef8e2eb3" translate="yes" xml:space="preserve">
          <source>This section includes examples of &lt;code&gt;.appup&lt;/code&gt; files for typical cases of upgrades/downgrades done in runtime.</source>
          <target state="translated">このセクションには、実行時に行われるアップグレード/ダウングレードの典型的なケースの &lt;code&gt;.appup&lt;/code&gt; ファイルの例が含まれています。</target>
        </trans-unit>
        <trans-unit id="7ea33b2a0ec7d517340851621821d8be874ccf07" translate="yes" xml:space="preserve">
          <source>This section includes the example after most of the mentioned modifications and some more using &lt;strong&gt;state enter calls&lt;/strong&gt;, which deserves a new state diagram:</source>
          <target state="translated">このセクションには、前述の変更のほとんどと、&lt;strong&gt;状態入力呼び出し&lt;/strong&gt;を使用したいくつかの変更後の例が含まれてい&lt;strong&gt;ます&lt;/strong&gt;。これは、新しい状態図に値します。</target>
        </trans-unit>
        <trans-unit id="e8307ab1487485b0ab0c191a87d10ed0db502873" translate="yes" xml:space="preserve">
          <source>This section includes the example after most of the mentioned modifications and some more using state enter calls, which deserves a new state diagram:</source>
          <target state="translated">このセクションでは、言及された変更のほとんどの後の例と、新しい状態図に値する状態を入力する呼び出しを使用していくつかのより多くが含まれています。</target>
        </trans-unit>
        <trans-unit id="46836c7cf8344b6ce7b90b07cbf3092bf8c64800" translate="yes" xml:space="preserve">
          <source>This section informs on interoperability, that is, information exchange, between Erlang and other programming languages. The included examples mainly treat interoperability between Erlang and C.</source>
          <target state="translated">このセクションではErlangと他のプログラミング言語の相互運用性、つまり情報交換について説明します。ここでは主にErlangとC言語の相互運用性について説明します。</target>
        </trans-unit>
        <trans-unit id="89f49f8072fe70dfd2c365690f214b5fdc461dd8" translate="yes" xml:space="preserve">
          <source>This section introduces &lt;code&gt;Mnesia&lt;/code&gt; with an example database. This example is referenced in the following sections, where the example is modified to illustrate various program constructs. This section illustrates the following mandatory procedures through examples:</source>
          <target state="translated">このセクションでは、サンプルデータベースを使用して &lt;code&gt;Mnesia&lt;/code&gt; を紹介します。この例は、さまざまなプログラム構成を示すために例が変更される次のセクションで参照されます。このセクションでは、次の必須手順を例を使用して説明します。</target>
        </trans-unit>
        <trans-unit id="9ce26ca011dda9632c352924ddce457d60697ee5" translate="yes" xml:space="preserve">
          <source>This section is a quick start tutorial to get you started with Erlang. Everything in this section is true, but only part of the truth. For example, only the simplest form of the syntax is shown, not all esoteric forms. Also, parts that are greatly simplified are indicated with *manual*. This means that a lot more information on the subject is to be found in the Erlang book or in &lt;code&gt; Erlang Reference Manual&lt;/code&gt;.</source>
          <target state="translated">このセクションは、Erlangを使い始めるためのクイックスタートチュートリアルです。このセクションのすべてが真実ですが、真実の一部にすぎません。たとえば、構文の最も単純な形式のみが示され、すべての難解な形式は示されていません。また、大幅に簡略化された部品は*手動*で示されています。これは、この主題に関するより多くの情報がErlangブックまたは &lt;code&gt; Erlang Reference Manual&lt;/code&gt; 記載されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="4b9ffc517c7f7beea672bf3a45f0d5c54e6718e6" translate="yes" xml:space="preserve">
          <source>This section is a quick start tutorial to get you started with Erlang. Everything in this section is true, but only part of the truth. For example, only the simplest form of the syntax is shown, not all esoteric forms. Also, parts that are greatly simplified are indicated with *manual*. This means that a lot more information on the subject is to be found in the Erlang book or in &lt;code&gt;Erlang Reference Manual&lt;/code&gt;.</source>
          <target state="translated">このセクションは、Erlangを使い始めるためのクイックスタートチュートリアルです。このセクションのすべては真実ですが、真実の一部のみです。たとえば、すべての難解な形式ではなく、構文の最も単純な形式のみが示されています。また、大幅に簡略化された部品は*マニュアル*で示されています。これは、Erlangブックまたは &lt;code&gt;Erlang Reference Manual&lt;/code&gt; に、このテーマに関する多くの情報が記載されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="7681f5719ebc6c3947920d0c8b79f4d20d935db2" translate="yes" xml:space="preserve">
          <source>This section is about installing an embedded system. The following topics are considered:</source>
          <target state="translated">ここでは、組み込みシステムの導入について説明します。以下のトピックについて検討します。</target>
        </trans-unit>
        <trans-unit id="e1226c380377fda419e20eb5188c02f21ab8efb4" translate="yes" xml:space="preserve">
          <source>This section is about list functions that &lt;strong&gt;construct&lt;/strong&gt; lists. A tail-recursive function that does not construct a list runs in constant space, while the corresponding body-recursive function uses stack space proportional to the length of the list.</source>
          <target state="translated">このセクションでは、リストを&lt;strong&gt;構成する&lt;/strong&gt;リスト関数について説明します。リストを構成しない末尾再帰関数は定数空間で実行されますが、対応する本文再帰関数はリストの長さに比例したスタック空間を使用します。</target>
        </trans-unit>
        <trans-unit id="68c719f00318cfafeb4885e7d19be04a0e723344" translate="yes" xml:space="preserve">
          <source>This section is the Erlang reference manual. It describes the Erlang programming language.</source>
          <target state="translated">このセクションはErlangリファレンスマニュアルです。これはErlangプログラミング言語について説明しています。</target>
        </trans-unit>
        <trans-unit id="6ef1c8ac7b879ac21c4bbd932c5c5aba836b3ebe" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;app(4)&lt;/code&gt; and &lt;code&gt;application(3)&lt;/code&gt; manual pages in Kernel.</source>
          <target state="translated">このセクションは、カーネルの &lt;code&gt;app(4)&lt;/code&gt; および &lt;code&gt;application(3)&lt;/code&gt; のマニュアルページで読む必要があります。</target>
        </trans-unit>
        <trans-unit id="d050299e9360b73cf317b1cb6719eba05c8f8b67" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;gen_event(3)&lt;/code&gt; manual page in STDLIB, where all interface functions and callback functions are described in detail.</source>
          <target state="translated">このセクションは、 &lt;code&gt;gen_event(3)&lt;/code&gt; マニュアルページで読む必要があります。ここでは、すべてのインターフェイス関数とコールバック関数が詳細に説明されています。</target>
        </trans-unit>
        <trans-unit id="b25498b71adedf6dc2be1b461a7355670bd9865a" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;gen_server(3)&lt;/code&gt; manual page in &lt;code&gt;stdlib&lt;/code&gt;, where all interface functions and callback functions are described in detail.</source>
          <target state="translated">このセクションは、 &lt;code&gt;stdlib&lt;/code&gt; の &lt;code&gt;gen_server(3)&lt;/code&gt; マニュアルページで読む必要があります。ここでは、すべてのインターフェイス関数とコールバック関数について詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="e425baa0c9a68eb141d0fd0ffe5193c115033f3e" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;gen_statem(3)&lt;/code&gt; manual page in STDLIB, where all interface functions and callback functions are described in detail.</source>
          <target state="translated">このセクションは、 &lt;code&gt;gen_statem(3)&lt;/code&gt; マニュアルページで読む必要があります。ここでは、すべてのインターフェイス関数とコールバック関数について詳しく説明しています。</target>
        </trans-unit>
        <trans-unit id="834b2272d947ac4550fa4f7cf0a1b4b54d61e0d3" translate="yes" xml:space="preserve">
          <source>This section is to be read with the &lt;code&gt;rel(4)&lt;/code&gt;, &lt;code&gt;systools(3)&lt;/code&gt;, and &lt;code&gt;script(4)&lt;/code&gt; manual pages in SASL.</source>
          <target state="translated">このセクションは、 &lt;code&gt;systools(3)&lt;/code&gt; &lt;code&gt;rel(4)&lt;/code&gt; 、systools（3）、および &lt;code&gt;script(4)&lt;/code&gt; のマニュアルページで読む必要があります。</target>
        </trans-unit>
        <trans-unit id="d930e6096fb887dbfeb97cc96dedbb64de3c9031" translate="yes" xml:space="preserve">
          <source>This section lists a few modules and BIFs to watch out for, not only from a performance point of view.</source>
          <target state="translated">ここでは、パフォーマンスの観点だけでなく、気をつけるべきモジュールやBIFをいくつか挙げてみました。</target>
        </trans-unit>
        <trans-unit id="302cba4ce6be32265c131b8fff3be15369bb97a8" translate="yes" xml:space="preserve">
          <source>This section lists all funs. The following fields exist for each fun:</source>
          <target state="translated">このセクションでは、全てのファンをリストアップします。各ファンには以下のフィールドがあります。</target>
        </trans-unit>
        <trans-unit id="7bc1c1a16c9fc6835aa747c430d5753502607fd3" translate="yes" xml:space="preserve">
          <source>This section lists the open ports, their owners, any linked processes, and the name of their driver or external process.</source>
          <target state="translated">このセクションでは、開いているポート、その所有者、リンクされているプロセス、ドライバまたは外部プロセスの名前が一覧表示されます。</target>
        </trans-unit>
        <trans-unit id="251c858a6feb418633832df9c31b24c8b4f5a1b7" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using Native Implemented Functions (NIFs).</source>
          <target state="translated">このセクションでは、ネイティブ実装関数（NIF）を使用して、 &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; 問題を解決する方法の例の概要を説明します。</target>
        </trans-unit>
        <trans-unit id="e7bc2bafdedf8fd30afa495c12130ded7ddd3fc5" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using a C node. Notice that a C node is not typically used for solving simple problems like this, a port is sufficient.</source>
          <target state="translated">このセクションでは、Cノードを使用して、 &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; を解決する方法の例を概説します。Cノードは通常、このような単純な問題の解決には使用されず、ポートで十分であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="d8b1fe16968a43f36d99fc7c39a89fadb4f26e24" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using a linked-in port driver.</source>
          <target state="translated">このセクションでは、リンクされたポートドライバーを使用して、 &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; を解決する方法の例の概要を説明します。</target>
        </trans-unit>
        <trans-unit id="6188e756764065c7ce79203e7dc5cecf3ee5f2b4" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; by using a port and Erl_Interface. It is necessary to read the port example in &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; before reading this section.</source>
          <target state="translated">このセクションでは、ポートとErl_Interfaceを使用して &lt;code&gt;&lt;a href=&quot;example&quot;&gt;Problem Example&lt;/a&gt;&lt;/code&gt; のサンプル問題を解決する方法の例を概説します。ポートの例を読み出す必要がある &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; このセクションを読む前に。</target>
        </trans-unit>
        <trans-unit id="37a17f96d0247a59a445c39970b3c2ce5aa258a2" translate="yes" xml:space="preserve">
          <source>This section outlines an example of how to solve the example problem in the &lt;code&gt;&lt;a href=&quot;example&quot;&gt;previous section&lt;/a&gt;&lt;/code&gt; by using a port.</source>
          <target state="translated">このセクションでは、ポートを使用して &lt;code&gt;&lt;a href=&quot;example&quot;&gt;previous section&lt;/a&gt;&lt;/code&gt; 問題例を解決する方法の例を概説します。</target>
        </trans-unit>
        <trans-unit id="909ed75e66d95b03604cc684f38a417f30c36fa4" translate="yes" xml:space="preserve">
          <source>This section outlines the current Unicode support and gives some recipes for working with Unicode data.</source>
          <target state="translated">この節では、現在の Unicode サポートの概要と、Unicode データを扱うためのいくつかのレシピを紹介します。</target>
        </trans-unit>
        <trans-unit id="f4548220d710b00d84d1083e484e819816bc4647" translate="yes" xml:space="preserve">
          <source>This section presents all the atoms in the system. This is only of interest if one suspects that dynamic generation of atoms can be a problem, otherwise this section can be ignored.</source>
          <target state="translated">このセクションでは、システム内のすべての原子を示します。これは、原子の動的生成が問題になると思われる場合にのみ、このセクションは無視して構いません。</target>
        </trans-unit>
        <trans-unit id="e98a32dcb47ef919db3aef2c03013357cf7c9199" translate="yes" xml:space="preserve">
          <source>This section presents the generic protocol-independent model for use within an OTP-based NE. This model is used by all OAM components and can be used by the applications. The advantage of the model is that it clearly separates the resources from the management protocol. The resources do not need to be aware of which management protocol is used to manage the system. The same resources can therefore be managed with different protocols.</source>
          <target state="translated">ここでは、OTP ベースの NE 内で使用するための一般的なプロトコルに依存しないモデルを示す。このモデルは、すべてのOAMコンポーネントで使用され、アプリケーションで使用することができる。このモデルの利点は、リソースと管理プロトコルが明確に分離されていることである。リソースは、システムを管理するためにどの管理プロトコルが使用されているかを意識する必要はありません。そのため、同じリソースを異なるプロトコルで管理することができます。</target>
        </trans-unit>
        <trans-unit id="16347e215e685cc8a7eb7375f07fbbb91f2c9603" translate="yes" xml:space="preserve">
          <source>This section provides a brief overview on how to write efficient drivers.</source>
          <target state="translated">ここでは、効率的なドライバーの書き方について簡単に説明します。</target>
        </trans-unit>
        <trans-unit id="30913964bf9365a1caa81bfa4bb9ad170421d97f" translate="yes" xml:space="preserve">
          <source>This section provides a simplified demonstration of a &lt;code&gt;Mnesia&lt;/code&gt; system startup. The dialogue from the Erlang shell is as follows:</source>
          <target state="translated">このセクションでは、 &lt;code&gt;Mnesia&lt;/code&gt; システムの起動の簡単なデモを提供します。Erlangシェルからのダイアログは以下の通りです：</target>
        </trans-unit>
        <trans-unit id="ec0f201c25b61d89e7f6c76b13618afc0002a916" translate="yes" xml:space="preserve">
          <source>This section should be read with the &lt;code&gt;supervisor(3)&lt;/code&gt; manual page in STDLIB, where all details about the supervisor behaviour is given.</source>
          <target state="translated">このセクションは、STDLIB の &lt;code&gt;supervisor(3)&lt;/code&gt; マニュアルページで読む必要があります。スーパーバイザの動作に関するすべての詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="859dc9ee797ee513900af80c0e4f3984de1a34df" translate="yes" xml:space="preserve">
          <source>This section shows a small example of how to set up client/server connections using the Erlang shell. The returned value of the &lt;code&gt;sslsocket&lt;/code&gt; is abbreviated with &lt;code&gt;[...]&lt;/code&gt; as it can be fairly large and is opaque.</source>
          <target state="translated">このセクションでは、Erlangシェルを使用してクライアント/サーバー接続をセットアップする方法の小さな例を示します。 &lt;code&gt;sslsocket&lt;/code&gt; の戻り値は &lt;code&gt;[...]&lt;/code&gt; と省略されています。これは、かなり大きくなる可能性があり、不透明であるためです。</target>
        </trans-unit>
        <trans-unit id="1b3f3a6882bc6f1c999e3d6f053e34aa184902fb" translate="yes" xml:space="preserve">
          <source>This section starts with a simple example, showing a generator and a filter:</source>
          <target state="translated">ここでは、まず簡単な例として、発電機とフィルタを示します。</target>
        </trans-unit>
        <trans-unit id="b10755987ebac7d338a7fd1a7c6bbec42a0583a6" translate="yes" xml:space="preserve">
          <source>This section tries to kill the old truths (or semi-truths) that have become myths.</source>
          <target state="translated">この項では、神話と化した古い真実(あるいは半真実)を殺そうとします。</target>
        </trans-unit>
        <trans-unit id="4bc790cb1406d976325d74bbdbe32730d66b0176" translate="yes" xml:space="preserve">
          <source>This section was written a long time ago. Most of it is still valid, as it explains important concepts, but this was written for an older driver interface so the examples do not work anymore. The reader is encouraged to read the &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; documentation also.</source>
          <target state="translated">このセクションはずっと前に書かれました。重要な概念を説明しているので、ほとんどは有効ですが、これは古いドライバーインターフェイス用に作成されたため、例は機能しません。読者は &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; のドキュメントも読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="b93f78b17719c3a40516be4872cc22d2aa5ee759" translate="yes" xml:space="preserve">
          <source>This section was written a long time ago. Most of it is still valid, but some things have changed since then. Some updates have been made to the documentation of the driver presented here, but more can be done and is planned for the future. The reader is encouraged to read the &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; documentation also.</source>
          <target state="translated">このセクションはずっと前に書かれました。そのほとんどはまだ有効ですが、それ以降、いくつかの点が変更されています。ここに示すドライバーのドキュメントにいくつかの更新が行われましたが、さらに多くのことが可能であり、将来的に計画されています。読者は &lt;code&gt;&lt;a href=&quot;erl_driver&quot;&gt;erl_driver&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; のドキュメントも読むことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3acfdfded91bac52b2d4f66deb3db7bcfef3bb64" translate="yes" xml:space="preserve">
          <source>This sends a request with a specified connection header:</source>
          <target state="translated">指定された接続ヘッダを持つリクエストを送信します。</target>
        </trans-unit>
        <trans-unit id="a989f27ccbc0cd1a9d3190ceeec551d99b4ccfce" translate="yes" xml:space="preserve">
          <source>This sends an HTTP request over a unix domain socket (experimental):</source>
          <target state="translated">これは、Unix ドメインソケットを介して HTTP リクエストを送信します (実験的)。</target>
        </trans-unit>
        <trans-unit id="0367f390c138c4cdab5de93d4dcd533741c91409" translate="yes" xml:space="preserve">
          <source>This server can be started with the Kernel configuration parameter &lt;code&gt;start_boot_server&lt;/code&gt;.</source>
          <target state="translated">このサーバーは、カーネル構成パラメーター &lt;code&gt;start_boot_server&lt;/code&gt; を使用して開始できます。</target>
        </trans-unit>
        <trans-unit id="9a01d31508a13cbee6fd61e7f30640416fa3e960" translate="yes" xml:space="preserve">
          <source>This server is used to assist diskless Erlang nodes that fetch all Erlang code from another machine.</source>
          <target state="translated">このサーバは、他のマシンからすべてのErlangコードをフェッチするディスクレスErlangノードを支援するために使われます。</target>
        </trans-unit>
        <trans-unit id="6d1e9f0f9d29165296c1877ce900cce295357757" translate="yes" xml:space="preserve">
          <source>This server is used to fetch all code, including the start script, if an Erlang runtime system is started with command-line flag &lt;code&gt;-loader inet&lt;/code&gt;. All hosts specified with command-line flag &lt;code&gt;-hosts Host&lt;/code&gt; must have one instance of this server running.</source>
          <target state="translated">このサーバーは、Erlangランタイムシステムがコマンドラインフラグ &lt;code&gt;-loader inet&lt;/code&gt; で起動されている場合、起動スクリプトを含むすべてのコードをフェッチするために使用されます。コマンドラインフラグで指定されたすべてのホスト &lt;code&gt;-hosts Host&lt;/code&gt; は、このサーバーのインスタンスが1つ実行されている必要があります。</target>
        </trans-unit>
        <trans-unit id="b854dfbf08852692209c2c9428fe6541ba04a2b8" translate="yes" xml:space="preserve">
          <source>This session sets the system_tracer to the same process as the ordinary tracer process (i. e. &amp;lt;0.31.0&amp;gt;) and sets the trace pattern for the function &lt;code&gt;dbg:get_tracer&lt;/code&gt; to one that has the action of setting a sequential token. When the function is called by a traced process (all processes are traced in this case), the process gets &quot;contaminated&quot; by the token and &lt;code&gt;seq_trace&lt;/code&gt; messages are sent both for the server request and the response. The &lt;code&gt;seq_trace:set_token([])&lt;/code&gt; after the call clears the &lt;code&gt;seq_trace&lt;/code&gt; token, why no messages are sent when the answer propagates via the shell to the console port. The output would otherwise have been more noisy.</source>
          <target state="translated">このセッションでは、system_tracerを通常のトレーサープロセスと同じプロセス（つまり、&amp;lt;0.31.0&amp;gt;）に設定し、関数 &lt;code&gt;dbg:get_tracer&lt;/code&gt; のトレースパターンを、シーケンシャルトークンを設定するアクションを持つパターンに設定します。トレースされたプロセス（この場合はすべてのプロセスがトレースされます）によって関数が呼び出されると、プロセスはトークンによって「汚染」され、サーバー要求と応答の両方に対して &lt;code&gt;seq_trace&lt;/code&gt; メッセージが送信されます。呼び出しが &lt;code&gt;seq_trace&lt;/code&gt; トークンをクリアした後の &lt;code&gt;seq_trace:set_token([])&lt;/code&gt; は、応答がシェルを介してコンソールポートに伝播するときにメッセージが送信されない理由です。そうでなければ、出力はもっとうるさかったでしょう。</target>
        </trans-unit>
        <trans-unit id="cbd4292b15086fa99902265956cddedc9ff73138" translate="yes" xml:space="preserve">
          <source>This shared format is the heart of the EEP as it is what effectively allows cross-language collaboration.</source>
          <target state="translated">この共有フォーマットは、言語を超えた共同作業を効果的に可能にするものであり、EEPの中心となるものです。</target>
        </trans-unit>
        <trans-unit id="7f6dee944ecab0b445c18e6ceefaac7d931ceec9" translate="yes" xml:space="preserve">
          <source>This should do the final touch to the environment and building should be easy after this. You could run &lt;code&gt;./otp_build env_win32&lt;/code&gt; without &lt;code&gt;eval&lt;/code&gt; just to see what it does, and to see that the environment it sets seems OK. The path is cleaned of spaces if possible (using DOS style short names instead), the variables &lt;code&gt;OVERRIDE_TARGET&lt;/code&gt;, &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;CXX&lt;/code&gt;, &lt;code&gt;AR&lt;/code&gt; and &lt;code&gt;RANLIB&lt;/code&gt; are set to their respective wrappers and the directories &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tools/vc&lt;/code&gt; and &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tool&lt;/code&gt; are added first in the PATH.</source>
          <target state="translated">これで環境への最終的なタッチが行われ、その後の構築は簡単になります。 &lt;code&gt;./otp_build env_win32&lt;/code&gt; を &lt;code&gt;eval&lt;/code&gt; なしで実行して、機能を確認し、設定された環境に問題がないことを確認できます。可能な場合はパスのスペースが &lt;code&gt;RANLIB&lt;/code&gt; され（代わりにDOSスタイルの短い名前が使用されます）、変数 &lt;code&gt;OVERRIDE_TARGET&lt;/code&gt; 、 &lt;code&gt;CC&lt;/code&gt; 、 &lt;code&gt;CXX&lt;/code&gt; 、 &lt;code&gt;AR&lt;/code&gt; 、およびRANLIBがそれぞれのラッパーとディレクトリ &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tools/vc&lt;/code&gt; および &lt;code&gt;$ERL_TOP/erts/etc/win32/&amp;lt;cygwin/msys&amp;gt;_tool&lt;/code&gt; が最初にPATHに追加されます。</target>
        </trans-unit>
        <trans-unit id="03f198b6590c34f01a64a75908db7163cea9b266" translate="yes" xml:space="preserve">
          <source>This should do the final touch to the environment and building should be easy after this. You could run &lt;code&gt;./otp_build env_win32&lt;/code&gt; without &lt;code&gt;eval&lt;/code&gt; just to see what it does, and to see that the environment it sets seems OK. The path is cleaned of spaces if possible (using DOS style short names instead), the variables &lt;code&gt;OVERRIDE_TARGET&lt;/code&gt;, &lt;code&gt;CC&lt;/code&gt;, &lt;code&gt;CXX&lt;/code&gt;, &lt;code&gt;AR&lt;/code&gt; and &lt;code&gt;RANLIB&lt;/code&gt; are set to their respective wrappers and the directories &lt;code&gt;$ERL_TOP/erts/etc/win32/wsl_tools/vc&lt;/code&gt; and &lt;code&gt;$ERL_TOP/erts/etc/win32/wsl_tools&lt;/code&gt; are added first in the PATH.</source>
          <target state="translated">これで環境への最後の仕上げが行われ、この後の構築は簡単になるはずです。 &lt;code&gt;./otp_build env_win32&lt;/code&gt; を &lt;code&gt;eval&lt;/code&gt; なしで実行して、その機能を確認し、設定した環境に問題がないことを確認できます。可能であればパスからスペースが &lt;code&gt;RANLIB&lt;/code&gt; され（代わりにDOSスタイルの短い名前が使用されます）、変数 &lt;code&gt;OVERRIDE_TARGET&lt;/code&gt; 、 &lt;code&gt;CC&lt;/code&gt; 、 &lt;code&gt;CXX&lt;/code&gt; 、 &lt;code&gt;AR&lt;/code&gt; 、およびRANLIBがそれぞれのラッパーに設定され、ディレクトリ &lt;code&gt;$ERL_TOP/erts/etc/win32/wsl_tools/vc&lt;/code&gt; および &lt;code&gt;$ERL_TOP/erts/etc/win32/wsl_tools&lt;/code&gt; が最初にPATHに追加されます。</target>
        </trans-unit>
        <trans-unit id="f2b5857195448594d0390d51817917a61df0959d" translate="yes" xml:space="preserve">
          <source>This should setup the additional environment variables.</source>
          <target state="translated">これは、追加の環境変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d785e08dd7a56c60e1bed8756d1974bdb847eb99" translate="yes" xml:space="preserve">
          <source>This shows another important non-obvious case: a clause guard, even if it's as simple as &lt;code&gt;Y &amp;gt; 0&lt;/code&gt;, always consists of a single disjunction of one or more conjunctions of tests, much like a tuple of tuples. Thus:</source>
          <target state="translated">これは、もう1つの重要な明らかでないケースを示しています。節ガードは、 &lt;code&gt;Y &amp;gt; 0&lt;/code&gt; のように単純であっても、常に、1つ以上のタプルのように、1つ以上のテストの論理積の単一の論理和で構成されます。したがって：</target>
        </trans-unit>
        <trans-unit id="d79fe51d70506d4d2574ce2f8d6c698753c2450c" translate="yes" xml:space="preserve">
          <source>This signal is sent as a reply to a process previously sending a &lt;code&gt;&lt;a href=&quot;#SPAWN_REQUEST&quot;&gt;SPAWN_REQUEST&lt;/a&gt;&lt;/code&gt; signal.</source>
          <target state="translated">このシグナルは、以前に &lt;code&gt;&lt;a href=&quot;#SPAWN_REQUEST&quot;&gt;SPAWN_REQUEST&lt;/a&gt;&lt;/code&gt; シグナルを送信したプロセスへの応答として送信されます。</target>
        </trans-unit>
        <trans-unit id="640f93147afaa4bbce9c0970534b8a37095141af" translate="yes" xml:space="preserve">
          <source>This signal is sent by a call to the erlang:exit/2 bif</source>
          <target state="translated">このシグナルは erlang:exit/2 bif への呼び出しで送られます。</target>
        </trans-unit>
        <trans-unit id="7068d2c470c4b8af4e69cfc9fdf5935a4cd0cd8e" translate="yes" xml:space="preserve">
          <source>This signal is sent by the &lt;code&gt;&lt;a href=&quot;erlang#spawn_request-5&quot;&gt;spawn_request()&lt;/a&gt;&lt;/code&gt; BIF.</source>
          <target state="translated">このシグナルは、 &lt;code&gt;&lt;a href=&quot;erlang#spawn_request-5&quot;&gt;spawn_request()&lt;/a&gt;&lt;/code&gt; BIFによって送信されます。</target>
        </trans-unit>
        <trans-unit id="0bcd8c5c7a896221b7a365d42f6767bd737b00ce" translate="yes" xml:space="preserve">
          <source>This signal is sent when a link has been broken</source>
          <target state="translated">このシグナルは、リンクが切れたときに送信されます。</target>
        </trans-unit>
        <trans-unit id="1fa8ade625dd050384ebfe47137813125a13ed25" translate="yes" xml:space="preserve">
          <source>This signal will be ignored.</source>
          <target state="translated">この信号は無視されます。</target>
        </trans-unit>
        <trans-unit id="92abfd0b7a6c2f6f6e673410127b459c582c4efd" translate="yes" xml:space="preserve">
          <source>This signal will notify &lt;code&gt;erl_signal_server&lt;/code&gt; when it is received by the Erlang runtime system.</source>
          <target state="translated">この信号は、Erlangランタイムシステムによって受信されたときに &lt;code&gt;erl_signal_server&lt;/code&gt; に通知します。</target>
        </trans-unit>
        <trans-unit id="edab6f17da92a0f0da17b2cdabee390180519ab6" translate="yes" xml:space="preserve">
          <source>This signal will use the default signal handler for the operating system.</source>
          <target state="translated">このシグナルは、オペレーティングシステムのデフォルトのシグナルハンドラを使用します。</target>
        </trans-unit>
        <trans-unit id="da98f38cbd3a5312fa20fb0710bd3343db7b6751" translate="yes" xml:space="preserve">
          <source>This simple definition was extended in Unicode to include more complicated kinds of composite character by giving each character a grapheme breaking property, and creating rules that use these properties to define the boundaries of extended grapheme clusters. In PCRE releases later than 8.31, \X matches one of these clusters.</source>
          <target state="translated">この単純な定義は、各文字に書記素破りプロパティを与え、拡張書記素クラスタの境界を定義するためにこれらのプロパティを使用するルールを作成することによって、より複雑な種類の複合文字を含むようにユニコードで拡張されました。8.31以降のPCREリリースでは、\Xはこれらのクラスタの1つにマッチします。</target>
        </trans-unit>
        <trans-unit id="e86121002d76857e44d3ab841a1269a83df96b05" translate="yes" xml:space="preserve">
          <source>This simple standard test, &lt;code&gt;snmp_ex2_simple_standard_test&lt;/code&gt;, a module which, using the &lt;code&gt;snmp_ex2_manager&lt;/code&gt; described in the previous section, implements a simple agent test utility.</source>
          <target state="translated">この単純な標準テスト &lt;code&gt;snmp_ex2_simple_standard_test&lt;/code&gt; は、前のセクションで説明した &lt;code&gt;snmp_ex2_manager&lt;/code&gt; を使用して、単純なエージェントテストユーティリティを実装するモジュールです。</target>
        </trans-unit>
        <trans-unit id="dd2b5053ac3688fc735f48df406e257a6da53d21" translate="yes" xml:space="preserve">
          <source>This sort of problem can be solved easier by use of the facilities in OTP, which also provide methods for updating code on the fly and so on (see &lt;code&gt; OTP Design Principles&lt;/code&gt;).</source>
          <target state="translated">この種の問題は、OTPの機能を使用することで簡単に解決できます。この機能は、コードをオンザフライで更新する方法なども提供します（ &lt;code&gt; OTP Design Principles&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="2d0034518115855077790a9986c987efa20b3785" translate="yes" xml:space="preserve">
          <source>This sort of problem can be solved easier by use of the facilities in OTP, which also provide methods for updating code on the fly and so on (see &lt;code&gt;OTP Design Principles&lt;/code&gt;).</source>
          <target state="translated">この種の問題は、OTPの機能を使用して簡単に解決できます。OTPは、コードをオンザフライで更新する方法なども提供します（ &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="e3b6d6c6628faa03b7c6f08bc646ad236cf4da32" translate="yes" xml:space="preserve">
          <source>This specialized decode decodes a subtype of a constructed value and is the fastest method to extract a subvalue. This decode is typically used when you want to inspect, for example, a version number, to be able to decide what to do with the entire value. The result is returned as &lt;code&gt;{ok,Value}&lt;/code&gt; or &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">この特殊なデコードは、構成された値のサブタイプをデコードし、サブ値を抽出する最速の方法です。このデコードは通常、バージョン番号などを調べて、値全体の処理方法を決定できるようにする場合に使用されます。結果は &lt;code&gt;{ok,Value}&lt;/code&gt; または &lt;code&gt;{error,Reason}&lt;/code&gt; として返されます。</target>
        </trans-unit>
        <trans-unit id="e6e3b86cfeba9cfc10be5c29dcc96ff101065bf4" translate="yes" xml:space="preserve">
          <source>This specifies the file modes to use when opening the log file, see &lt;code&gt;&lt;a href=&quot;file#open-2&quot;&gt;file:open/2&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;modes&lt;/code&gt; are not specified, the default list used is &lt;code&gt;[raw,append,delayed_write]&lt;/code&gt;. If &lt;code&gt;modes&lt;/code&gt; are specified, the list replaces the default modes list with the following adjustments:</source>
          <target state="translated">これは、ログファイルを開くときに使用するファイルモードを指定します。file &lt;code&gt;&lt;a href=&quot;file#open-2&quot;&gt;file:open/2&lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;modes&lt;/code&gt; が指定されていない場合、使用されるデフォルトのリストは &lt;code&gt;[raw,append,delayed_write]&lt;/code&gt; です。場合 &lt;code&gt;modes&lt;/code&gt; 指定され、リストは以下の調整をデフォルトモードのリストを置き換えます。</target>
        </trans-unit>
        <trans-unit id="89922ee078d75b864b4466e994e9cf6b8e2ad24b" translate="yes" xml:space="preserve">
          <source>This specifies the name of the log file when the handler is of type &lt;code&gt;file&lt;/code&gt;.</source>
          <target state="translated">これは、ハンドラーが &lt;code&gt;file&lt;/code&gt; 型の場合のログファイルの名前を指定します。</target>
        </trans-unit>
        <trans-unit id="77e086b8dea4b8bfb5a0597b5900b1d75b0fef9f" translate="yes" xml:space="preserve">
          <source>This starts Erlang in its own window, with fully functioning command-line editing and scrollbars. All flags except &lt;code&gt;-oldshell&lt;/code&gt; work as they do for &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これにより、コマンドライン編集とスクロールバーが完全に機能する独自のウィンドウでErlangが起動します。 &lt;code&gt;-oldshell&lt;/code&gt; を除くすべてのフラグは、 &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; の場合と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="a43faa1a1676e12b0177f046a812f0d8364ec82d" translate="yes" xml:space="preserve">
          <source>This starts the Erlang runtime system and evaluates the following functions:</source>
          <target state="translated">これはErlangのランタイムシステムを起動し、以下の関数を評価します。</target>
        </trans-unit>
        <trans-unit id="8bb8d3378772860a522d3a705d4cc5d40c409e79" translate="yes" xml:space="preserve">
          <source>This state data can be regarded as sensitive, and maybe not what you want in the error log because of some unpredictable event.</source>
          <target state="translated">この状態のデータは繊細なものとみなされる可能性があり、予測不可能なイベントが発生したためにエラーログに望むものではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="97c14a1eab4a2d73f912f341632799fc7862da43" translate="yes" xml:space="preserve">
          <source>This state transition action can be invoked by returning it from the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;, from &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; or by giving it to &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この状態遷移アクションは、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; から、 &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; から、または &lt;code&gt;&lt;a href=&quot;#enter_loop-5&quot;&gt;enter_loop/5,6&lt;/a&gt;&lt;/code&gt; に返すことで呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="57901b1493b88f1a72b634f92f65ad89d7517d70" translate="yes" xml:space="preserve">
          <source>This step also implies that the Erlang code in the interface and distribution modules is written in such a way that it can be run in the startup phase. In particular, there can be no calls to the &lt;code&gt;application&lt;/code&gt; module or to any modules not loaded at boot time. That is, only &lt;code&gt;Kernel&lt;/code&gt;, &lt;code&gt;STDLIB&lt;/code&gt;, and the application itself can be used.</source>
          <target state="translated">このステップは、インターフェイスおよび配布モジュールのErlangコードが、起動フェーズで実行できるように記述されていることも意味します。特に、 &lt;code&gt;application&lt;/code&gt; モジュールまたは起動時に読み込まれていないモジュールへの呼び出しはありません。つまり、 &lt;code&gt;Kernel&lt;/code&gt; 、 &lt;code&gt;STDLIB&lt;/code&gt; 、およびアプリケーション自体のみを使用できます。</target>
        </trans-unit>
        <trans-unit id="33eaf1a1a2a532c70f7ffcd5caaf8b22d9ff8909" translate="yes" xml:space="preserve">
          <source>This structure is to be used if all clients are running the same type of Erlang machine. If there are clients running different types of Erlang machines, or on different operating systems, the &lt;code&gt;clients&lt;/code&gt; directory can be divided into one subdirectory per type of Erlang machine. Alternatively, one &lt;code&gt;$ROOT&lt;/code&gt; can be set up per type of machine. For each type, some of the directories specified for the &lt;code&gt;$ROOT&lt;/code&gt; directory are to be included:</source>
          <target state="translated">この構造は、すべてのクライアントが同じタイプのErlangマシンを実行している場合に使用されます。異なるタイプのErlangマシンを実行しているクライアント、または異なるオペレーティングシステム上に &lt;code&gt;clients&lt;/code&gt; がある場合、クライアントディレクトリは、Erlangマシンのタイプごとに1つのサブディレクトリに分割できます。あるいは、マシンのタイプごとに1つの &lt;code&gt;$ROOT&lt;/code&gt; をセットアップできます。タイプごとに、 &lt;code&gt;$ROOT&lt;/code&gt; ディレクトリに指定されたディレクトリの一部が含まれます。</target>
        </trans-unit>
        <trans-unit id="ba107d8023d557fe4ebdc08a0485fead425f4a4c" translate="yes" xml:space="preserve">
          <source>This structure is used for all types of ports although some fields are useless for some types. The least memory consuming solution would be to arrange this structure as a union of structures. However, the multiple indirections in the code to access a field in such a structure would clutter the code too much for an example.</source>
          <target state="translated">この構造体はすべてのタイプのポートに使用されますが、いくつかのフィールドはタイプによっては役に立たないものもあります。最もメモリを消費しない解決策は、この構造体を構造体の組合として配置することでしょう。しかし、このような構造体のフィールドにアクセスするためのコード内の複数の間接的な処理は、例としてはコードを乱雑にしすぎてしまいます。</target>
        </trans-unit>
        <trans-unit id="b9c807a7212c0db55e210d6237e55cf572102e59" translate="yes" xml:space="preserve">
          <source>This switches off logging for SSH and Telnet connections.</source>
          <target state="translated">これは、SSH と Telnet 接続のログをオフにします。</target>
        </trans-unit>
        <trans-unit id="3c8936eaae5713c5223ec21e20e0d36d26fc0092" translate="yes" xml:space="preserve">
          <source>This switches off logging for all connection types.</source>
          <target state="translated">これは、すべての接続タイプのログをオフにします。</target>
        </trans-unit>
        <trans-unit id="f56bbb3abc53b0a624950444e1c66ce730f11613" translate="yes" xml:space="preserve">
          <source>This symbol should appear in the lhs of at least one grammar rule. This is the most general syntactic category which the parser ultimately will parse every input string into.</source>
          <target state="translated">この記号は、少なくとも 1 つの文法規則の lhs に含まれていなければなりません。これはパーサが最終的にすべての入力文字列を解析する最も一般的な構文カテゴリです。</target>
        </trans-unit>
        <trans-unit id="f08fbd9f459967f29635f3f9f2adf9603031def1" translate="yes" xml:space="preserve">
          <source>This symmetric property is heavily used in our property test suite.</source>
          <target state="translated">この対称プロパティは、私たちのプロパティテストスイートで多用されています。</target>
        </trans-unit>
        <trans-unit id="5f51a949c8210df35958e734e70df198be7b37d8" translate="yes" xml:space="preserve">
          <source>This syntax is equivalent to the syntax used in the trace patterns (see the &lt;code&gt; dbg(3)&lt;/code&gt;) module in Runtime_Tools.</source>
          <target state="translated">この構文は、Runtime_Toolsのトレースパターン（ &lt;code&gt; dbg(3)&lt;/code&gt; を参照）モジュールで使用される構文と同等です。</target>
        </trans-unit>
        <trans-unit id="a9ad3ed484ba9b2b41f2325fc27244234c66f278" translate="yes" xml:space="preserve">
          <source>This syntax is equivalent to the syntax used in the trace patterns (see the &lt;code&gt;dbg(3)&lt;/code&gt;) module in Runtime_Tools.</source>
          <target state="translated">この構文は、Runtime_Tools のトレースパターン（ &lt;code&gt;dbg(3)&lt;/code&gt; を参照）モジュールで使用される構文と同等です。</target>
        </trans-unit>
        <trans-unit id="47928f153f260fce7ed8db1828b373dc61ec71dc" translate="yes" xml:space="preserve">
          <source>This table lists the retired cipher names in the first column and suggests names to replace them with in the second column.</source>
          <target state="translated">この表では、第1列目に引退した暗号名をリストアップし、第2列目に置き換える名前を提案しています。</target>
        </trans-unit>
        <trans-unit id="ee2b2d8d451101694a58799b8409428a148a8058" translate="yes" xml:space="preserve">
          <source>This takes &lt;code&gt;H&lt;/code&gt; from &lt;code&gt;L&lt;/code&gt; in all possible ways. The result is the set of all lists &lt;code&gt;[H|T]&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is the set of all possible permutations of &lt;code&gt;L&lt;/code&gt;, with &lt;code&gt;H&lt;/code&gt; removed:</source>
          <target state="translated">これは、あらゆる方法で &lt;code&gt;L&lt;/code&gt; から &lt;code&gt;H&lt;/code&gt; を取得します。結果は、すべてのリストの集合である &lt;code&gt;[H|T]&lt;/code&gt; 、 &lt;code&gt;T&lt;/code&gt; はすべての可能な順列の集合である &lt;code&gt;L&lt;/code&gt; と、 &lt;code&gt;H&lt;/code&gt; 除去しました：</target>
        </trans-unit>
        <trans-unit id="618f3633ac8c2cadd4289f1c5621d970e601a5ca" translate="yes" xml:space="preserve">
          <source>This term is the encoding for external funs: &lt;code&gt;fun M:F/A&lt;/code&gt;.</source>
          <target state="translated">：この用語は、外部の低速運行のためのエンコーディングです &lt;code&gt;fun M:F/A&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="beb3ae0ca905f496ce783ad12cff60bb9bb87bbd" translate="yes" xml:space="preserve">
          <source>This term is used in minor version 0 of the external format; it has been superseded by &lt;code&gt;&lt;a href=&quot;#NEW_FLOAT_EXT&quot;&gt;NEW_FLOAT_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この用語は、外部フォーマットのマイナーバージョン0で使用されます。 &lt;code&gt;&lt;a href=&quot;#NEW_FLOAT_EXT&quot;&gt;NEW_FLOAT_EXT&lt;/a&gt;&lt;/code&gt; に置き換えられました。</target>
        </trans-unit>
        <trans-unit id="b517e1702cae7ec8ee019fdb69c857aa5330cfd8" translate="yes" xml:space="preserve">
          <source>This term is used in minor version 1 of the external format.</source>
          <target state="translated">本用語は、外部フォーマットのマイナーバージョン1で使用されています。</target>
        </trans-unit>
        <trans-unit id="0860084b170b958eacacb8679369f69a7b4a4046" translate="yes" xml:space="preserve">
          <source>This term represents a bitstring whose length in bits does not have to be a multiple of 8. The &lt;code&gt;Len&lt;/code&gt; field is an unsigned 4 byte integer (big-endian). The &lt;code&gt;Bits&lt;/code&gt; field is the number of bits (1-8) that are used in the last byte in the data field, counting from the most significant bit to the least significant.</source>
          <target state="translated">この用語は、その長さのビットで8.の倍数である必要はないビット文字列表す &lt;code&gt;Len&lt;/code&gt; フィールドは符号なしの4バイト整数（ビッグエンディアン）です。 &lt;code&gt;Bits&lt;/code&gt; フィールドは、データフィールドの最後のバイトに使用されるビットの数（1-8）、最下位の最上位ビットから数えています。</target>
        </trans-unit>
        <trans-unit id="108bbd5cab7129c54f675f7643a23fb10026ce1d" translate="yes" xml:space="preserve">
          <source>This test specification declares that &lt;code&gt;node1@host1&lt;/code&gt; is to be started using the user callback function &lt;code&gt;callback_module:my_slave_callback/0&lt;/code&gt;, and nodes &lt;code&gt;node1@host2&lt;/code&gt; and &lt;code&gt;node2@host2&lt;/code&gt; are to be started with the default callback module &lt;code&gt;ct_slave&lt;/code&gt;. The specified username and password are used to log on to remote host &lt;code&gt;host2&lt;/code&gt;. Also, function &lt;code&gt;module:function/0&lt;/code&gt; is evaluated on &lt;code&gt;node1@host3&lt;/code&gt;, and the result of this call is printed to the log.</source>
          <target state="translated">このテスト仕様は、 &lt;code&gt;node1@host1&lt;/code&gt; がユーザーコールバック関数 &lt;code&gt;callback_module:my_slave_callback/0&lt;/code&gt; を使用して開始され、ノード &lt;code&gt;node1@host2&lt;/code&gt; および &lt;code&gt;node2@host2&lt;/code&gt; がデフォルトのコールバックモジュール &lt;code&gt;ct_slave&lt;/code&gt; で開始されることを宣言しています。指定されたユーザー名とパスワードは、リモートホスト &lt;code&gt;host2&lt;/code&gt; へのログオンに使用されます。また、 &lt;code&gt;module:function/0&lt;/code&gt; は &lt;code&gt;node1@host3&lt;/code&gt; で評価され、この呼び出しの結果がログに出力されます。</target>
        </trans-unit>
        <trans-unit id="e29f7e984adbbfe8a53af166b10808cfa43c1c97" translate="yes" xml:space="preserve">
          <source>This tests all object files in the specified directory, as if they had been individually specified using &lt;code&gt;{file, FileName}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;{file, FileName}&lt;/code&gt; を使用して個別に指定されたかのように、指定されたディレクトリ内のすべてのオブジェクトファイルをテストします。</target>
        </trans-unit>
        <trans-unit id="76191fd55833467474b9c8b3bbd30d057e2c02a5" translate="yes" xml:space="preserve">
          <source>This the formatter callback function to be called from handlers. The log event is processed as follows:</source>
          <target state="translated">これは、ハンドラから呼び出されるフォーマッタのコールバック関数です。ログイベントは以下のように処理されます。</target>
        </trans-unit>
        <trans-unit id="a753a4a3983a27e7aa021fa6ea24ccc7d272be01" translate="yes" xml:space="preserve">
          <source>This time argument 2 is used, which is the second element in the tuple. If this returns the atom &lt;code&gt;false&lt;/code&gt;, fred is not logged on and the following message is sent:</source>
          <target state="translated">今回はタプルの2番目の要素である引数2が使用されます。これがアトム &lt;code&gt;false&lt;/code&gt; を返す場合、fredはログオンせず、次のメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="15904ce64792364db6d7744d6d49fc6072f3ad19" translate="yes" xml:space="preserve">
          <source>This time is &lt;strong&gt;not&lt;/strong&gt; a monotonically increasing time in the general case. For more information, see the documentation of &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt; time warp modes&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">この時間は、一般的な場合、単調に増加する時間ではあり&lt;strong&gt;ません&lt;/strong&gt;。詳細については、ユーザーズガイドの &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt; time warp modes&lt;/a&gt;&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="e6fffaa6a8f0644a7ea4fa7c7c74c76ec90d774c" translate="yes" xml:space="preserve">
          <source>This time is &lt;strong&gt;not&lt;/strong&gt; a monotonically increasing time in the general case. For more information, see the documentation of &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt;time warp modes&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">この時間は、一般的なケースでは単調に増加する時間ではあり&lt;strong&gt;ません&lt;/strong&gt;。詳細については、ユーザーガイドの &lt;code&gt;&lt;a href=&quot;time_correction#Time_Warp_Modes&quot;&gt;time warp modes&lt;/a&gt;&lt;/code&gt; ドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="49beb73df376b7dea84521a1c52301d5531a79e4" translate="yes" xml:space="preserve">
          <source>This time is &lt;strong&gt;not&lt;/strong&gt; a monotonically increasing time.</source>
          <target state="translated">この時間は単調に増加する時間ではあり&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3748262d456a936f46c1ed22dababf257bb3fa6f" translate="yes" xml:space="preserve">
          <source>This time may or may not be an accurate view of POSIX time, and may or may not align with &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt;. The runtime system works towards aligning the two system times. Depending on the &lt;code&gt;&lt;a href=&quot;#Time_Warp_Modes&quot;&gt;time warp mode&lt;/a&gt;&lt;/code&gt; used, this can be achieved by letting Erlang system time perform a &lt;code&gt;&lt;a href=&quot;#Time_Warp&quot;&gt;time warp&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この時間は、POSIX時間の正確なビューである場合とそうでない場合があり、 &lt;code&gt;&lt;a href=&quot;#OS_System_Time&quot;&gt;OS system time&lt;/a&gt;&lt;/code&gt; と一致する場合としない場合があります。ランタイムシステムは、2つのシステム時刻の調整に向けて機能します。使用される &lt;code&gt;&lt;a href=&quot;#Time_Warp_Modes&quot;&gt;time warp mode&lt;/a&gt;&lt;/code&gt; 応じて、これはErlangシステム時間に &lt;code&gt;&lt;a href=&quot;#Time_Warp&quot;&gt;time warp&lt;/a&gt;&lt;/code&gt; 実行させることで実現できます。</target>
        </trans-unit>
        <trans-unit id="83d87d01faae0b3a7fef0f76f0e3a3892ae23062" translate="yes" xml:space="preserve">
          <source>This time the first assertion looks at the preceding six characters, checks that the first three are digits, and then the second assertion checks that the preceding three characters are not &quot;999&quot;.</source>
          <target state="translated">今回は、最初のアサーションで先行する6文字を見て、最初の3文字が数字であることを確認し、2番目のアサーションで先行する3文字が &quot;999 &quot;ではないことを確認しています。</target>
        </trans-unit>
        <trans-unit id="14391b08125b325189f3dcbd403d72965af6b345" translate="yes" xml:space="preserve">
          <source>This time, since the shell was not involved, no other work was done in the system during the profiling. If you retry the same example with a freshly started Erlang emulator, but omit the command &lt;code&gt;l(random)&lt;/code&gt;, the analysis will show a lot more function calls done by &lt;code&gt;code_server&lt;/code&gt; and others to automatically load the module &lt;code&gt;random&lt;/code&gt;.</source>
          <target state="translated">今回は、シェルが関与していないため、プロファイリング中にシステムで他の作業は行われませんでした。新たに開始したErlangエミュレーターで同じ例を再試行し、コマンド &lt;code&gt;l(random)&lt;/code&gt; を省略した場合、分析により、 &lt;code&gt;code_server&lt;/code&gt; などが実行する関数呼び出しがさらに多くなり、モジュール &lt;code&gt;random&lt;/code&gt; が自動的にロードされます。</target>
        </trans-unit>
        <trans-unit id="22a9f149405034822a960ba22d2e8646cd23a4b4" translate="yes" xml:space="preserve">
          <source>This time, the recursing alternative is tried first, and continues to recurse until it runs out of characters, at which point the recursion fails. But this time we have another alternative to try at the higher level. That is the significant difference: in the previous case the remaining alternative is at a deeper recursion level, which PCRE cannot use.</source>
          <target state="translated">今回は、再帰代替案が最初に試され、文字数がなくなるまで再帰を続けます。しかし、今回はより高いレベルで別の代替案を試すことができます。この点が大きな違いです。前のケースでは、残りの代替案はより深い再帰レベルにあり、PCREでは使用できません。</target>
        </trans-unit>
        <trans-unit id="c60619daf599e1009f83ff3339a4a66e29dc068d" translate="yes" xml:space="preserve">
          <source>This timer is started when the &lt;strong&gt;first&lt;/strong&gt; reply to an asynchronous request (issued using the &lt;code&gt;&lt;a href=&quot;megaco#cast&quot;&gt;megaco:cast/3&lt;/a&gt;&lt;/code&gt; function) arrives. As long as this timer is running, replies will be delivered via the &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; callback function, with their &quot;arrival number&quot; (see &lt;code&gt;UserReply&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; callback function).</source>
          <target state="translated">このタイマーは、（ &lt;code&gt;&lt;a href=&quot;megaco#cast&quot;&gt;megaco:cast/3&lt;/a&gt;&lt;/code&gt; 関数を使用して発行された）非同期要求への&lt;strong&gt;最初の&lt;/strong&gt;応答が到着したときに開始されます。このタイマーが実行されている限り、応答は「到着番号」とともに、 &lt;code&gt;UserReply&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; コールバック関数を介して配信されます（handle_trans_reply &lt;code&gt;&lt;a href=&quot;megaco_user#trans_reply&quot;&gt;handle_trans_reply/4,5&lt;/a&gt;&lt;/code&gt; コールバック関数のUserReplyを参照）。</target>
        </trans-unit>
        <trans-unit id="7f582a8bac4499f4041fc098c02442c6d51efa18" translate="yes" xml:space="preserve">
          <source>This timer is started when the segment indicated by the &lt;code&gt;segmentation complete token&lt;/code&gt; (e.g. the last of the segment which makes up the reply) is received, but all segments has not yet been received.</source>
          <target state="translated">このタイマーは、 &lt;code&gt;segmentation complete token&lt;/code&gt; 示されるセグメント（応答を構成するセグメントの最後など）を受信したときに開始されますが、すべてのセグメントがまだ受信されていません。</target>
        </trans-unit>
        <trans-unit id="e5f2ade158232a7f92c6ed91597d402fd153194a" translate="yes" xml:space="preserve">
          <source>This timer is started when the segment indicated by the &lt;code&gt;segmentation complete token&lt;/code&gt; is received, but all segments has not yet been received.</source>
          <target state="translated">このタイマーは、 &lt;code&gt;segmentation complete token&lt;/code&gt; によって示されるセグメントを受信したときに開始されますが、すべてのセグメントがまだ受信されていません。</target>
        </trans-unit>
        <trans-unit id="706cbfbf9ab1807332ea2d94bd3ad6011d82aa07" translate="yes" xml:space="preserve">
          <source>This transaction can write the text &lt;code&gt;&quot;Trying to write ... &quot;&lt;/code&gt; 1000 times to the terminal. However, &lt;code&gt;Mnesia&lt;/code&gt; guarantees that each transaction will eventually run. As a result, &lt;code&gt;Mnesia&lt;/code&gt; is not only deadlock free, but also livelock free.</source>
          <target state="translated">このトランザクションは、 &lt;code&gt;&quot;Trying to write ... &quot;&lt;/code&gt; というテキストを端末に1000回書き込むことができます。ただし、 &lt;code&gt;Mnesia&lt;/code&gt; は各トランザクションが最終的に実行されることを保証します。その結果、 &lt;code&gt;Mnesia&lt;/code&gt; はデッドロックフリーであるだけでなく、ライブロックフリーでもあります。</target>
        </trans-unit>
        <trans-unit id="c15707ecd3d8e52159c361dec50a35ae8f4adf88" translate="yes" xml:space="preserve">
          <source>This transaction returns the list &lt;code&gt;[{foo,1,3}]&lt;/code&gt; if table &lt;code&gt;foo&lt;/code&gt; is of type &lt;code&gt;set&lt;/code&gt;. However, the list &lt;code&gt;[{foo,1,2}, {foo,1,3}]&lt;/code&gt; is returned if the table is of type &lt;code&gt;bag&lt;/code&gt;.</source>
          <target state="translated">このトランザクションは、テーブル &lt;code&gt;foo&lt;/code&gt; のタイプが &lt;code&gt;set&lt;/code&gt; の場合、リスト &lt;code&gt;[{foo,1,3}]&lt;/code&gt; 返します。ただし、テーブルのタイプが &lt;code&gt;bag&lt;/code&gt; の場合、リスト &lt;code&gt;[{foo,1,2}, {foo,1,3}]&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="896c645fd7197a5da200f81b1127c1a22b3d1e2d" translate="yes" xml:space="preserve">
          <source>This transformation renames a &lt;code&gt;select_val/3&lt;/code&gt; instruction with a constant source operand to &lt;code&gt;i_const_select_val/3&lt;/code&gt;.</source>
          <target state="translated">この変換は、名前を変更 &lt;code&gt;select_val/3&lt;/code&gt; 定ソースオペランドを有する命令 &lt;code&gt;i_const_select_val/3&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f3aa65821e6e6bbdfa16d2cf5e6359a478a61f30" translate="yes" xml:space="preserve">
          <source>This transformation rule matches a call to the BIF &lt;code&gt;element/2&lt;/code&gt;. The operands will be captured and the function &lt;code&gt;gen_element()&lt;/code&gt; will be called.</source>
          <target state="translated">この変換規則は、BIF &lt;code&gt;element/2&lt;/code&gt; への呼び出しと一致します。オペランドがキャプチャされ、関数 &lt;code&gt;gen_element()&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1d0fb13c45e90d79c73f06a24d887642b21d76da" translate="yes" xml:space="preserve">
          <source>This translates to &lt;code&gt;TCP_NOPUSH&lt;/code&gt; on BSD and to &lt;code&gt;TCP_CORK&lt;/code&gt; on Linux.</source>
          <target state="translated">これは、に変換 &lt;code&gt;TCP_NOPUSH&lt;/code&gt; BSD上とに &lt;code&gt;TCP_CORK&lt;/code&gt; Linux上。</target>
        </trans-unit>
        <trans-unit id="bf13712351a4aa96ae94ff06cddb20f5ef75fe11" translate="yes" xml:space="preserve">
          <source>This tries to match &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; or &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; twice. If &lt;code&gt;&quot;NNN&quot;&lt;/code&gt; appears, the function returns &lt;code&gt;HaltReason = {nnn,[&quot;NNN&quot;]}&lt;/code&gt;.</source>
          <target state="translated">これは、 &lt;code&gt;&quot;ABC&quot;&lt;/code&gt; または &lt;code&gt;&quot;XYZ&quot;&lt;/code&gt; 2回照合しようとします。もし &lt;code&gt;&quot;NNN&quot;&lt;/code&gt; が表示され、関数の戻り &lt;code&gt;HaltReason = {nnn,[&quot;NNN&quot;]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53c27958e7fca3ba05175a738c3a146371fd4e49" translate="yes" xml:space="preserve">
          <source>This tuple only exists if &lt;code&gt;Function&lt;/code&gt; can be used with different clocks. &lt;code&gt;ClockId&lt;/code&gt; corresponds to the clock identifier used when calling &lt;code&gt;Function&lt;/code&gt;.</source>
          <target state="translated">このタプルは、 &lt;code&gt;Function&lt;/code&gt; を異なるクロックで使用できる場合にのみ存在します。 &lt;code&gt;ClockId&lt;/code&gt; は、 &lt;code&gt;Function&lt;/code&gt; を呼び出すときに使用されるクロック識別子に対応します。</target>
        </trans-unit>
        <trans-unit id="aa7524355b5ee56dd866d3d3779a64205a992024" translate="yes" xml:space="preserve">
          <source>This type defines all addresses (and flags) associated with the interface.</source>
          <target state="translated">この型は、インタフェースに関連付けられたすべてのアドレス(およびフラグ)を定義します。</target>
        </trans-unit>
        <trans-unit id="ceff633d5c12b0ab1b989cd600fd3b0c1f9b57c7" translate="yes" xml:space="preserve">
          <source>This type is assigned in Erlang as follows:</source>
          <target state="translated">この型はErlangでは以下のように割り当てられています。</target>
        </trans-unit>
        <trans-unit id="34e89a0a89b0d1a14764e553fc94c9f4fbe45d6d" translate="yes" xml:space="preserve">
          <source>This type is further described in application &lt;code&gt;xmerl&lt;/code&gt;.</source>
          <target state="translated">このタイプは、アプリケーション &lt;code&gt;xmerl&lt;/code&gt; でさらに説明されています。</target>
        </trans-unit>
        <trans-unit id="6be71fbb0606c9b749f47ff7cbc7a8e0ca516ae1" translate="yes" xml:space="preserve">
          <source>This type of time-out is useful for example to act on inactivity. Let us restart the code sequence if no button is pressed for say 30 seconds:</source>
          <target state="translated">このタイプのタイムアウトは、例えば非アクティブ状態に対処するのに便利です。30秒間ボタンが押されなかった場合にコードシーケンスを再開してみましょう。</target>
        </trans-unit>
        <trans-unit id="0dd216aebaebb2374c204746cffeb0b8a3bfa66e" translate="yes" xml:space="preserve">
          <source>This utility function is used to create a formatted (pretty printable) string of the error reason received from either:</source>
          <target state="translated">このユーティリティ関数は、どちらかから受信したエラー理由の文字列を整形した(印刷可能な)文字列を作成するために使用します。</target>
        </trans-unit>
        <trans-unit id="e90f513c2d724696028de83a41a04ca02c00b03d" translate="yes" xml:space="preserve">
          <source>This utility is specific to Windows NT/2000/XP (and later versions of Windows). It allows Erlang emulators to run as services on the Windows system, allowing embedded systems to start without any user needing to log on. The emulator started in this way can be manipulated through the Windows services applet in a manner similar to other services.</source>
          <target state="translated">このユーティリティはWindows NT/2000/XP(およびそれ以降のバージョンのWindows)に特化したものです。これはErlangエミュレータをWindowsシステム上でサービスとして動作させることを可能にし、組み込みシステムをログオンすることなく起動できるようにします。この方法で起動したエミュレータは、Windowsサービスアプレットを使って他のサービスと同じように操作することができます。</target>
        </trans-unit>
        <trans-unit id="b55cb392aed5fc4d4c203d5436538e3f6a69fde3" translate="yes" xml:space="preserve">
          <source>This validation callback will be executed before any heartbeat is sent to the port program. For the validation to succeed it needs to return with the value &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">この検証コールバックは、ハートビートがポートプログラムに送信される前に実行されます。検証が成功するには、値 &lt;code&gt;ok&lt;/code&gt; を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="3b8b5c1eef6ea78b8a30fd3fe8ec2afd6d40564e" translate="yes" xml:space="preserve">
          <source>This value can also be set through (OS) environment variable &lt;code&gt;ERL_FULLSWEEP_AFTER&lt;/code&gt;.</source>
          <target state="translated">この値は、（OS）環境変数 &lt;code&gt;ERL_FULLSWEEP_AFTER&lt;/code&gt; でも設定できます。</target>
        </trans-unit>
        <trans-unit id="58b09f82dfd17c02b5cc9bb38621d7a9dc8cc490" translate="yes" xml:space="preserve">
          <source>This value can be set at startup by passing command-line argument &lt;code&gt;+SDio&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">この値は、 &lt;code&gt;erl(1)&lt;/code&gt; でコマンドライン引数 &lt;code&gt;+SDio&lt;/code&gt; を渡すことにより、起動時に設定できます。</target>
        </trans-unit>
        <trans-unit id="f2f1511a226b28ee2f7a6351d90cc98e92a8e944" translate="yes" xml:space="preserve">
          <source>This value might wrap due to limitations in the underlying functionality provided by the operating system that is used.</source>
          <target state="translated">この値は、使用されているオペレーティングシステムが提供する基本的な機能の制限のためにラップする場合があります。</target>
        </trans-unit>
        <trans-unit id="ae87da20fd16a3057a07a29b3ed216aa69d1b30e" translate="yes" xml:space="preserve">
          <source>This value, in milliseconds, specifies how often the handler does a disk_log sync operation to write buffered data to disk. The handler attempts the operation repeatedly, but only performs a new sync if something has actually been logged.</source>
          <target state="translated">この値はミリ秒単位で、バッファリングされたデータをディスクに書き込むために、ハンドラが disk_log 同期操作を行う頻度を指定します。ハンドラは操作を繰り返し試みますが、何かが実際にログに記録された場合にのみ新しい同期を実行します。</target>
        </trans-unit>
        <trans-unit id="562ee5839a71bc34778a37d5ff1caee77199d71c" translate="yes" xml:space="preserve">
          <source>This value, in milliseconds, specifies how often the handler does a file sync operation to write buffered data to disk. The handler attempts the operation repeatedly, but only performs a new sync if something has actually been logged.</source>
          <target state="translated">この値はミリ秒単位で、バッファリングされたデータをディスクに書き込むためにハンドラがファイル同期操作を行う頻度を指定します。ハンドラは操作を繰り返し試みますが、何かが実際にログに記録された場合にのみ、新しい同期を実行します。</target>
        </trans-unit>
        <trans-unit id="8a7dae834a17e1bfd7dcc5067b03add360f4e974" translate="yes" xml:space="preserve">
          <source>This variable sets the maximum size of a crash dump file in bytes. The crash dump will be truncated if this limit is exceeded. If the variable is not set, no size limit is enforced by default. If the variable is set to &lt;code&gt;0&lt;/code&gt;, the runtime system does not even attempt to write a crash dump file.</source>
          <target state="translated">この変数は、クラッシュダンプファイルの最大サイズをバイト単位で設定します。この制限を超えると、クラッシュダンプが切り捨てられます。変数が設定されていない場合、デフォルトではサイズ制限は適用されません。変数が &lt;code&gt;0&lt;/code&gt; に設定されている場合、ランタイムシステムはクラッシュダンプファイルへの書き込みも試みません。</target>
        </trans-unit>
        <trans-unit id="c8c996bd75b6c1e556e40ae90ed97ed437560b07" translate="yes" xml:space="preserve">
          <source>This variant is kept for compatibility.</source>
          <target state="translated">このバリアントは互換性のために保存されています。</target>
        </trans-unit>
        <trans-unit id="f23ebd696e347931712dab86d1982b0ebcb811ea" translate="yes" xml:space="preserve">
          <source>This verb causes the match to end successfully, skipping the remainder of the pattern. However, when it is inside a subpattern that is called as a subroutine, only that subpattern is ended successfully. Matching then continues at the outer level. If (*ACCEPT) is triggered in a positive assertion, the assertion succeeds; in a negative assertion, the assertion fails.</source>
          <target state="translated">この動詞は、パターンの残りの部分をスキップして、マッチを正常終了させます。ただし、サブルーチンとして呼び出されるサブパターンの内部にある場合は、そのサブパターンのみが正常に終了します。その後、マッチングは外側のレベルで継続されます。(*ACCEPT)が正のアサーションでトリガされるとアサーションは成功し、負のアサーションでは失敗します。</target>
        </trans-unit>
        <trans-unit id="7d1a0e9b710171a3224e64c914a5b25f817e9dd9" translate="yes" xml:space="preserve">
          <source>This version (still) include three &lt;code&gt;pre version 3&lt;/code&gt; variants of the version 3 codec, beside the proper version 3. These versions, &lt;code&gt;prev3a | prev3b | prev3c&lt;/code&gt;, are &lt;strong&gt;deprecated&lt;/strong&gt;, and will be removed in OTP 24.</source>
          <target state="translated">このバージョン（まだ）には、適切なバージョン3のほかに、バージョン3コーデックの &lt;code&gt;pre version 3&lt;/code&gt; つのバージョン3以前のバリアントが含まれています。これらのバージョン、 &lt;code&gt;prev3a | prev3b | prev3c&lt;/code&gt; は&lt;strong&gt;非推奨&lt;/strong&gt;であり、OTP24で削除されます。</target>
        </trans-unit>
        <trans-unit id="d08ddef725078632007c7d27f955f2e16c27447f" translate="yes" xml:space="preserve">
          <source>This version encode atoms that can be represented by a latin1 string using latin1 encoding while only atoms that cannot be represented by latin1 are encoded using utf8.</source>
          <target state="translated">このバージョンでは、latin1文字列で表現できる原子はlatin1エンコーディングでエンコードし、latin1で表現できない原子のみutf8でエンコードしています。</target>
        </trans-unit>
        <trans-unit id="d758c1fa288ff4bea6ef5e3e118de5ef6067101b" translate="yes" xml:space="preserve">
          <source>This version of &lt;code&gt;wrap_log_reader&lt;/code&gt; does not detect if &lt;code&gt;disk_log&lt;/code&gt; wraps to a new index file between a call to &lt;code&gt;wrap_log_reader:open()&lt;/code&gt; and the first call to &lt;code&gt;wrap_log_reader:chunk()&lt;/code&gt;. If this occurs, the call to &lt;code&gt;chunk()&lt;/code&gt; reads the last logged items in the log file, as the opened index file was truncated by &lt;code&gt;disk_log&lt;/code&gt;.</source>
          <target state="translated">このバージョンの &lt;code&gt;wrap_log_reader&lt;/code&gt; は、 &lt;code&gt;wrap_log_reader:open()&lt;/code&gt; への呼び出しと &lt;code&gt;wrap_log_reader:chunk()&lt;/code&gt; への最初の呼び出しの間に &lt;code&gt;disk_log&lt;/code&gt; が新しいインデックスファイルにラップするかどうかを検出しません。これが発生すると、開かれたインデックスファイルが &lt;code&gt;disk_log&lt;/code&gt; によって切り捨てられたため、 &lt;code&gt;chunk()&lt;/code&gt; の呼び出しにより、ログファイル内の最後に記録された項目が読み取られます。</target>
        </trans-unit>
        <trans-unit id="7892b8b3e220dc2d6df9f4226b75eda81b8a6c0a" translate="yes" xml:space="preserve">
          <source>This version of the stack is compliant with:</source>
          <target state="translated">このバージョンのスタックは、以下に準拠しています。</target>
        </trans-unit>
        <trans-unit id="240472a34becd16e12bb3376c31742854774737c" translate="yes" xml:space="preserve">
          <source>This version of the stack supports version 1, 2 and 3 as defined by:</source>
          <target state="translated">で定義されているように、このバージョンのスタックはバージョン1、2、3をサポートしています。</target>
        </trans-unit>
        <trans-unit id="12b130ec0f7a537e5f469d318f402ce06f564884" translate="yes" xml:space="preserve">
          <source>This way the decoder will detect which version is used and then use the proper decoder.</source>
          <target state="translated">このようにして、デコーダはどのバージョンが使用されているかを検出し、適切なデコーダを使用します。</target>
        </trans-unit>
        <trans-unit id="1fab39fc6a9980decfad2e7adaa7dbca6690bf5b" translate="yes" xml:space="preserve">
          <source>This weighted scheduler utilization will reach &lt;code&gt;1.0&lt;/code&gt; when schedulers are active the same amount of time as maximum available CPU time. If more schedulers exist than available logical processors, this value may be greater than &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">この重み付けされたスケジューラーの使用率は、スケジューラーが使用可能な最大CPU時間と同じ時間アクティブである場合、 &lt;code&gt;1.0&lt;/code&gt; に達します。使用可能な論理プロセッサーよりも多くのスケジューラーが存在する場合、この値は &lt;code&gt;1.0&lt;/code&gt; より大きい可能性があります。</target>
        </trans-unit>
        <trans-unit id="26f1c0ecf9835b048ce7fdf3cb11bce5cf430e0d" translate="yes" xml:space="preserve">
          <source>This will be transform into one call to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;my_table&lt;/code&gt; への1回の呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="5959df48b0bcfac9f4ae84eabd6aeaab1c573506" translate="yes" xml:space="preserve">
          <source>This will be transform into two calls to &lt;code&gt;my_table&lt;/code&gt;:</source>
          <target state="translated">これは、 &lt;code&gt;my_table&lt;/code&gt; への2つの呼び出しに変換されます。</target>
        </trans-unit>
        <trans-unit id="b0938e7a4bcaf966d8f8e1648d8bf77602bdb131" translate="yes" xml:space="preserve">
          <source>This will create a file named &lt;code&gt;TAGS&lt;/code&gt; in the current directory.</source>
          <target state="translated">これにより、現在のディレクトリに &lt;code&gt;TAGS&lt;/code&gt; という名前のファイルが作成されます。</target>
        </trans-unit>
        <trans-unit id="a8c674397ac895af2f7b4229947a7481b00df7c1" translate="yes" xml:space="preserve">
          <source>This will extract the string literal &lt;code&gt;&quot;foo.erl&quot;&lt;/code&gt; into the variable &lt;code&gt;Foo&lt;/code&gt;. Note the use of the anonymous variable &lt;code&gt;9090&lt;/code&gt; to ignore the line number. To match and also bind a metavariable that must be an integer literal, we can use the convention of ending the integer with a 9, turning it into a Q-prefixed variable on the Erlang level (see the previous section).</source>
          <target state="translated">これにより、文字列リテラル &lt;code&gt;&quot;foo.erl&quot;&lt;/code&gt; が変数 &lt;code&gt;Foo&lt;/code&gt; に抽出されます。行番号を無視するための匿名変数 &lt;code&gt;9090&lt;/code&gt; の使用に注意してください。整数リテラルである必要があるメタ変数を照合してバインドするには、整数を9で終了する規則を使用して、ErlangレベルでQ接頭辞付き変数に変換できます（前のセクションを参照）。</target>
        </trans-unit>
        <trans-unit id="6844398e7182f73065c78df4a613dbb5c67fbf34" translate="yes" xml:space="preserve">
          <source>This will fail if the &lt;code&gt;copy_save&lt;/code&gt; option is enabled; see &lt;code&gt;lcnt:rt_opt/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;copy_save&lt;/code&gt; オプションが有効な場合、これは失敗します。 &lt;code&gt;lcnt:rt_opt/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="161516cb1d32cdac4670da18a1c368a544091541" translate="yes" xml:space="preserve">
          <source>This will have the following effect:</source>
          <target state="translated">これにより、以下のような効果が得られます。</target>
        </trans-unit>
        <trans-unit id="00ecf511290805869defd2329acd31f4e4c2838e" translate="yes" xml:space="preserve">
          <source>This will print the following in the default log:</source>
          <target state="translated">これにより、デフォルトのログに以下のように表示されます。</target>
        </trans-unit>
        <trans-unit id="876e81f13e31f8d2ed30e08e0458e7cd79ff32e8" translate="yes" xml:space="preserve">
          <source>This will print the following:</source>
          <target state="translated">これで以下のように印刷されます。</target>
        </trans-unit>
        <trans-unit id="741ddd866b7f0cb141911125a2b18ae0245fffe3" translate="yes" xml:space="preserve">
          <source>This will produce a beam.smp.debug executable. The file are installed along side with the normal (opt) version &lt;code&gt;beam.smp&lt;/code&gt;.</source>
          <target state="translated">これにより、beam.smp.debug実行可能ファイルが生成されます。ファイルは、通常の（opt）バージョンの &lt;code&gt;beam.smp&lt;/code&gt; と一緒にインストールされます。</target>
        </trans-unit>
        <trans-unit id="4a278059021fec133659ebfed89d918e76c5e908" translate="yes" xml:space="preserve">
          <source>This will start a &lt;code&gt;Collector&lt;/code&gt;, a &lt;code&gt;Viewer&lt;/code&gt; and also start the tracing of &lt;code&gt;et:trace_me/5&lt;/code&gt; function calls. The &lt;code&gt;Raw Trace Data&lt;/code&gt; is collected by the &lt;code&gt;Collector&lt;/code&gt; and a view of it is displayed on the screen by the &lt;code&gt;Viewer&lt;/code&gt;. You can define your own &quot;views&quot; of the data by implementing your own &lt;code&gt;Filter&lt;/code&gt; functions and register them in the &lt;code&gt;Viewer&lt;/code&gt;.</source>
          <target state="translated">これにより、 &lt;code&gt;Collector&lt;/code&gt; 、 &lt;code&gt;Viewer&lt;/code&gt; が開始され、 &lt;code&gt;et:trace_me/5&lt;/code&gt; 関数呼び出しのトレースも開始されます。 &lt;code&gt;Raw Trace Data&lt;/code&gt; によって収集された &lt;code&gt;Collector&lt;/code&gt; とそのビューはにより画面上に表示される &lt;code&gt;Viewer&lt;/code&gt; 。独自の &lt;code&gt;Filter&lt;/code&gt; 関数を実装して &lt;code&gt;Viewer&lt;/code&gt; 登録することにより、データの独自の「ビュー」を定義できます。</target>
        </trans-unit>
        <trans-unit id="f434217aa97015d51cfaae19becfd875effa6d0a" translate="yes" xml:space="preserve">
          <source>This works even if &lt;code&gt;A&lt;/code&gt; is less than &lt;code&gt;-1.0&lt;/code&gt;, since in that case, &lt;code&gt;math:sqrt/1&lt;/code&gt; is never evaluated.</source>
          <target state="translated">これは、 &lt;code&gt;A&lt;/code&gt; が &lt;code&gt;-1.0&lt;/code&gt; 未満の場合でも機能します。その場合、 &lt;code&gt;math:sqrt/1&lt;/code&gt; は評価されないためです。</target>
        </trans-unit>
        <trans-unit id="3252af803922384f63b13c1da6ba4644d77b472e" translate="yes" xml:space="preserve">
          <source>This works for those codecs that support partial decode of the version, currently &lt;strong&gt;text&lt;/strong&gt;, and ber_bin (&lt;code&gt;megaco_binary_encoder&lt;/code&gt; and &lt;code&gt;megaco_ber_bin_encoder&lt;/code&gt;).</source>
          <target state="translated">これは、バージョンの現在の部分的なデコードをサポートするコーデック、現在は&lt;strong&gt;テキスト&lt;/strong&gt;、およびber_bin（ &lt;code&gt;megaco_binary_encoder&lt;/code&gt; および &lt;code&gt;megaco_ber_bin_encoder&lt;/code&gt; ）で機能します。</target>
        </trans-unit>
        <trans-unit id="68fb3cd1bc230ff55ec815a8606d4b126de4061a" translate="yes" xml:space="preserve">
          <source>This would give the same result as the earlier examples, namely:</source>
          <target state="translated">これにより、先ほどの例と同じ結果が得られます。</target>
        </trans-unit>
        <trans-unit id="f41ff74a32e2f2c5a120967bdd256a9d1fcf2924" translate="yes" xml:space="preserve">
          <source>This yields the following environment for &lt;code&gt;myapp&lt;/code&gt;:</source>
          <target state="translated">これにより、次の &lt;code&gt;myapp&lt;/code&gt; 環境が生成されます。</target>
        </trans-unit>
        <trans-unit id="d50cfaeffc3214625910320412c7d6aae3538c57" translate="yes" xml:space="preserve">
          <source>Those option forms are kept only for compatibility and should not be used in new code.</source>
          <target state="translated">これらのオプションフォームは互換性のためだけに保持されており、新しいコードでは使用しないでください。</target>
        </trans-unit>
        <trans-unit id="2af7a09a50fb9a8406c64e603ab93839d0eeadbb" translate="yes" xml:space="preserve">
          <source>Those service could - and should - be disabled when they are not needed. The options &lt;code&gt;&lt;a href=&quot;ssh#type-exec_daemon_option&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;ssh#type-shell_daemon_option&quot;&gt;shell&lt;/a&gt;&lt;/code&gt; are enabled per default but could be set to &lt;code&gt;disabled&lt;/code&gt; if not needed. The same options could also install handlers for the string(s) passed from the client to the server.</source>
          <target state="translated">これらのサービスは、不要な場合は無効にすることができます。オプション &lt;code&gt;&lt;a href=&quot;ssh#type-exec_daemon_option&quot;&gt;exec&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ssh#type-shell_daemon_option&quot;&gt;shell&lt;/a&gt;&lt;/code&gt; はデフォルトで有効になっていますが、必要がない場合は &lt;code&gt;disabled&lt;/code&gt; に設定できます。同じオプションで、クライアントからサーバーに渡される文字列のハンドラーをインストールすることもできます。</target>
        </trans-unit>
        <trans-unit id="8cfb63a03667f91e2dddce0870e2cddb4d2428fc" translate="yes" xml:space="preserve">
          <source>Those that are not part of an identified script are lumped together as &quot;Common&quot;. The following is the current list of scripts:</source>
          <target state="translated">識別されたスクリプトの一部ではないものは「共通」としてまとめられます。現在のスクリプトの一覧は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="e0fb7ae92ade7541465dddf7bdde5e485e470cba" translate="yes" xml:space="preserve">
          <source>Those warnings cannot be disabled (except by disabling all warnings).</source>
          <target state="translated">これらの警告を無効にすることはできません(すべての警告を無効にする以外は)。</target>
        </trans-unit>
        <trans-unit id="c351ee3b38329481117c9035b830002ad412235a" translate="yes" xml:space="preserve">
          <source>Thread identifier.</source>
          <target state="translated">スレッドの識別子です。</target>
        </trans-unit>
        <trans-unit id="4f9adbdf3e9b777ac0a0a507f193e4d00d4e660e" translate="yes" xml:space="preserve">
          <source>Thread options structure passed to &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt; erl_drv_thread_create&lt;/a&gt;&lt;/code&gt;. The following field exists:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt; erl_drv_thread_create&lt;/a&gt;&lt;/code&gt; に渡されるスレッドオプション構造。次のフィールドが存在します。</target>
        </trans-unit>
        <trans-unit id="472d223957fc2ad616dbfe0655959f460d590ae4" translate="yes" xml:space="preserve">
          <source>Thread options structure passed to &lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt;erl_drv_thread_create&lt;/a&gt;&lt;/code&gt;. The following field exists:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#erl_drv_thread_create&quot;&gt;erl_drv_thread_create&lt;/a&gt;&lt;/code&gt; に渡されるスレッドオプション構造体。次のフィールドが存在します：</target>
        </trans-unit>
        <trans-unit id="2d38b72cd000a892fe63ed8ba79ccaabfe4c2e80" translate="yes" xml:space="preserve">
          <source>Three more escape sequences that match characters with specific properties are available. When in 8-bit non-UTF-8 mode, these sequences are limited to testing characters whose code points are &amp;lt; 256, but they do work in this mode. The following are the extra escape sequences:</source>
          <target state="translated">特定のプロパティを持つ文字に一致するエスケープシーケンスがさらに3つあります。8ビット非UTF-8モードの場合、これらのシーケンスはコードポイントが256未満の文字のテストに限定されますが、このモードでは機能します。以下は、追加のエスケープシーケンスです。</target>
        </trans-unit>
        <trans-unit id="48145c695e12f789bd065e16fe1bba615544dbc8" translate="yes" xml:space="preserve">
          <source>Three network messages to execute the two-phase commit protocol</source>
          <target state="translated">二相コミットプロトコルを実行するための3つのネットワークメッセージ</target>
        </trans-unit>
        <trans-unit id="5b4d080b2f7b28c85cb580a4943bbfa952b77805" translate="yes" xml:space="preserve">
          <source>Three predefined resolve functions exist: &lt;code&gt;random_exit_name/3&lt;/code&gt;, &lt;code&gt;random_notify_name/3&lt;/code&gt;, and &lt;code&gt;notify_all_name/3&lt;/code&gt;. If no &lt;code&gt;Resolve&lt;/code&gt; function is defined, &lt;code&gt;random_exit_name&lt;/code&gt; is used. This means that one of the two registered processes is selected as correct while the other is killed.</source>
          <target state="translated">事前定義された3つの解決関数が存在します： &lt;code&gt;random_exit_name/3&lt;/code&gt; 、 &lt;code&gt;random_notify_name/3&lt;/code&gt; 、および &lt;code&gt;notify_all_name/3&lt;/code&gt; 。 &lt;code&gt;Resolve&lt;/code&gt; 関数が定義されていない場合、 &lt;code&gt;random_exit_name&lt;/code&gt; が使用されます。これは、2つの登録済みプロセスの1つが正しいとして選択され、もう一方が強制終了されていることを意味します。</target>
        </trans-unit>
        <trans-unit id="789fe986bc68eef06a581bacefa09c9f316ad600" translate="yes" xml:space="preserve">
          <source>Three types of Dets tables exist:</source>
          <target state="translated">Detsのテーブルは3種類存在します。</target>
        </trans-unit>
        <trans-unit id="de17dda2df1b0a4a41a2a36ed513ae1a8fa82e62" translate="yes" xml:space="preserve">
          <source>Three types of logs are supported: transfer logs, security logs, and error logs. The de-facto standard Common Logfile Format is used for the transfer and security logging. There are numerous statistics programs available to analyze Common Logfile Format. The Common Logfile Format looks as follows:</source>
          <target state="translated">転送ログ、セキュリティログ、エラーログの3種類のログがサポートされています。転送ログとセキュリティログには、デファクトスタンダードの Common Logfile Format が使用されます。Common Logfile Format を分析するための統計プログラムが多数用意されています。Common Logfile Format は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="6e9b97eab33817fa09e3b807cdad0cad941b514c" translate="yes" xml:space="preserve">
          <source>Three-per-em space</source>
          <target state="translated">3パーエム・スペース</target>
        </trans-unit>
        <trans-unit id="353307ebea91bdeb49e95a772ca9672b8b9ff1c9" translate="yes" xml:space="preserve">
          <source>Threshold for the maximal filesize in bytes. The transfer is aborted if the limit is exceeded. Default is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">最大ファイルサイズのしきい値（バイト単位）。制限を超えると、転送は中止されます。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81e689740a1ea2ba496a99261372d7eb5ff76c39" translate="yes" xml:space="preserve">
          <source>Threshold for the maximal number of active connections. The daemon rejects the setup of new connections if the limit is exceeded. Default is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">アクティブな接続の最大数のしきい値。制限を超えると、デーモンは新しい接続のセットアップを拒否します。デフォルトは &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9c5d2d9adf32dacfb55f57f6ed9d271632c69577" translate="yes" xml:space="preserve">
          <source>Threshold for the maximal number of retries. By default the server/client tries to resend a message up to five times when the time-out expires.</source>
          <target state="translated">最大再試行回数のしきい値。デフォルトでは、サーバ/クライアントはタイムアウトが切れたときに最大5回までメッセージの再送を試みます。</target>
        </trans-unit>
        <trans-unit id="0ef311c86e366780b4c01dfd6e2377efaa407576" translate="yes" xml:space="preserve">
          <source>Through CTHs the results of tests and configuration functions can be manipulated. The main purpose to do this with CTHs is to allow common patterns to be abstracted out from test suites and applied to multiple test suites without duplicating any code. All the callback functions for a CTH follow a common interface described hereafter.</source>
          <target state="translated">CTH を通じて、テストの結果や構成関数を操作することができます。CTHでこれを行う主な目的は、テストスイートから共通のパターンを抽象化し、コードを複製することなく複数のテストスイートに適用できるようにすることです。CTHのすべてのコールバック関数は、後述する共通のインタフェースに従います。</target>
        </trans-unit>
        <trans-unit id="0aa7d917559b259354cb862e1c7d69350b345c76" translate="yes" xml:space="preserve">
          <source>Through a trigger function with a match specification created with &lt;code&gt;&lt;a href=&quot;ttb#seq_trigger_ms-0&quot;&gt;ttb:seq_trigger_ms/0,1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ttb#seq_trigger_ms-0&quot;&gt;ttb:seq_trigger_ms/0,1&lt;/a&gt;&lt;/code&gt; で作成された一致仕様のトリガー関数を介して。</target>
        </trans-unit>
        <trans-unit id="dee8ee6675b19f7cc839a400403e3a6bdfc64698" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;Mnesia&lt;/code&gt; (on one node) can hang if a double fault occurs, that is, when two nodes crash simultaneously and one attempts to start when the other refuses to start, for example, because of a hardware error.</source>
          <target state="translated">したがって、 &lt;code&gt;Mnesia&lt;/code&gt; （1つのノード上）は、二重障害が発生した場合、つまり2つのノードが同時にクラッシュし、一方がハードウェアエラーなどによりもう一方が起動を拒否したときに起動しようとした場合にハングする可能性があります。</target>
        </trans-unit>
        <trans-unit id="08620ab1394e488e40f6d760c0e43eb52ae9ae1e" translate="yes" xml:space="preserve">
          <source>Thus, &lt;code&gt;ch3&lt;/code&gt; must be loaded before &lt;code&gt;m1&lt;/code&gt;, in the upgrade case, and conversely in the downgrade case. &lt;code&gt;m1&lt;/code&gt; is said to be &lt;strong&gt;dependent on&lt;/strong&gt;&lt;code&gt;ch3&lt;/code&gt;. In a release handling instruction, this is expressed by the &lt;code&gt;DepMods&lt;/code&gt; element:</source>
          <target state="translated">したがって、アップグレードの場合、および逆にダウングレードの場合、 &lt;code&gt;ch3&lt;/code&gt; は &lt;code&gt;m1&lt;/code&gt; の前にロードする必要があります。 &lt;code&gt;m1&lt;/code&gt; は &lt;code&gt;ch3&lt;/code&gt; に&lt;strong&gt;依存する&lt;/strong&gt;と言われています。リリース処理命令では、これは &lt;code&gt;DepMods&lt;/code&gt; 要素で表されます。</target>
        </trans-unit>
        <trans-unit id="f4aac5229f9aff631f4112d990ef52e941da8602" translate="yes" xml:space="preserve">
          <source>Thus, Erlang pids contain information about where the process executes. So if you know the pid of a process, the &quot;!&quot; operator can be used to send it a message disregarding if the process is on the same node or on a different node.</source>
          <target state="translated">このように、Erlangのpidにはプロセスがどこで実行されているかという情報が含まれています。ですから、もしプロセスのpidを知っていれば、&quot;!&quot;演算子を使ってプロセスが同じノードにあるか別のノードにあるかを無視してメッセージを送ることができます。</target>
        </trans-unit>
        <trans-unit id="6cc9ac17e54e53ed54d89ecd362584a70502cce6" translate="yes" xml:space="preserve">
          <source>Thus, each table is made up of records, where the first element is a record name and the second element of the table is a key, which identifies the particular record in that table. The combination of the table name and a key is an arity two tuple &lt;code&gt;{Tab, Key}&lt;/code&gt; called the OID. For more information about the relationship beween the record name and the table name, see &lt;code&gt;&lt;a href=&quot;mnesia_chap4#recordnames_tablenames&quot;&gt;Record Names versus Table Names&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">したがって、各テーブルはレコードで構成され、最初の要素はレコード名であり、テーブルの2番目の要素はキーであり、そのテーブル内の特定のレコードを識別します。テーブル名とキーの組み合わせは、OIDと呼ばれるアリティ2のタプル &lt;code&gt;{Tab, Key}&lt;/code&gt; です。レコード名beween関係とテーブル名の詳細については、 &lt;code&gt;&lt;a href=&quot;mnesia_chap4#recordnames_tablenames&quot;&gt;Record Names versus Table Names&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98419cf3e6cb70f3d1ec7c30e6c6cd8e96f4569b" translate="yes" xml:space="preserve">
          <source>Thus, groups of users with identical cookie files get Erlang nodes that can communicate freely and without interference from the magic cookie system. Users who want to run nodes on separate file systems must make certain that their cookie files are identical on the different file systems.</source>
          <target state="translated">このようにして、同じクッキーファイルを持つユーザのグループは、マジッククッキーシステムからの干渉を受けずに自由に通信できるErlangノードを手に入れることができます。別々のファイルシステム上でノードを実行したいユーザは、異なるファイルシステム上でクッキーファイルが同じであることを確認しなければなりません。</target>
        </trans-unit>
        <trans-unit id="8100fa7ba98e8e96e75fe52a1370cae3f3496b11" translate="yes" xml:space="preserve">
          <source>Thus, in Erlang the atoms &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt; are used to encode a boolean value.</source>
          <target state="translated">したがって、アーランでは原子は &lt;code&gt;true&lt;/code&gt; あり、 &lt;code&gt;false&lt;/code&gt; 、ブール値をエンコードする falseが使用されます。</target>
        </trans-unit>
        <trans-unit id="6e7ecce73f034bf35ecbb506fb930930ac4b3eff" translate="yes" xml:space="preserve">
          <source>Thus, it can be assumed that if an application wants to use tables &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt;, the application must perform some action similar to following before it can use the tables:</source>
          <target state="translated">したがって、アプリケーションがテーブル &lt;code&gt;a&lt;/code&gt; と &lt;code&gt;b&lt;/code&gt; を使用したい場合、前に、次のようなアクションを実行する必要できます。</target>
        </trans-unit>
        <trans-unit id="7e5bc2487ff82b85d2e3b10893d75ddc6f14f8fa" translate="yes" xml:space="preserve">
          <source>Thus, knowing the allowed structure it is easy to write a program that traverses the data structure and picks the information in the xmlElements records with name date.</source>
          <target state="translated">このように、許可されている構造を知っていれば、データ構造を横断して、xmlElementsレコードの中から日付の名前を持つ情報を取得するプログラムを簡単に書くことができます。</target>
        </trans-unit>
        <trans-unit id="b2e92eacbda98564b7e1dba01abee128e6082f80" translate="yes" xml:space="preserve">
          <source>Thus, the call &lt;code&gt;ch3:alloc()&lt;/code&gt; returns the allocated channel &lt;code&gt;Ch&lt;/code&gt; and the &lt;code&gt;gen_server&lt;/code&gt; then waits for new requests, now with an updated list of available channels.</source>
          <target state="translated">したがって、 &lt;code&gt;ch3:alloc()&lt;/code&gt; を呼び出すと、割り当てられたチャネル &lt;code&gt;Ch&lt;/code&gt; と &lt;code&gt;gen_server&lt;/code&gt; は新しい要求を待機します。ここで、利用可能なチャネルの更新されたリストが表示されます。</target>
        </trans-unit>
        <trans-unit id="9ebad642bddf4ab3db22dd4beeeeb7f4311403f9" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-COMMUNITY-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-COMMUNITY-MIBのデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="a7c61a5b14ab98813376fed50c0cd8d251b07679" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-FRAMEWORK-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-FRAMEWORK-MIB内のデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="612f9db5bba916759b754b605a4e539b1a5e5a7e" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-NOTIFICATION-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-NOTIFICATION-MIBのデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="9d1588ecea3ad2284ae9aa05caccc396d78985d5" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-STANDARD-MIB and SNMPv2-MIB, after this function has been called, is from the configuration files.</source>
          <target state="translated">このように、本機能が呼び出された後のSNMP-STANDARD-MIBおよびSNMPv2-MIBのデータは、設定ファイルからのデータとなります。</target>
        </trans-unit>
        <trans-unit id="43f6071a8cb0a08a947926938c79fe87f3b23556" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-TARGET-MIB, after this function has been called, is the data from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-TARGET-MIB内のデータは、設定ファイルのデータとなります。</target>
        </trans-unit>
        <trans-unit id="698103ec7a5a24bef7840c9a9eb88301e5ac5c6b" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-USER-BASED-SM-MIB, after this function has been called, is the data from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-USER-BASED-SM-MIB内のデータは、設定ファイルのデータとなります。</target>
        </trans-unit>
        <trans-unit id="b154aa3e0b0b0cb0972c7b7c21e5fa2a7b63dbbc" translate="yes" xml:space="preserve">
          <source>Thus, the data in the SNMP-VIEW-BASED-ACM-MIB, after this function has been called, is the data from the configuration files.</source>
          <target state="translated">したがって、この関数が呼び出された後のSNMP-VIEW-BASED-ACMIB内のデータは、設定ファイルのデータとなります。</target>
        </trans-unit>
        <trans-unit id="ece286b7b7e10c58b8006a0db1d818bda1598793" translate="yes" xml:space="preserve">
          <source>Thus, the defined callbacks are as follows:</source>
          <target state="translated">したがって、定義されたコールバックは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="c7283b7df46e07452f871697fbbb43dfaeb34c85" translate="yes" xml:space="preserve">
          <source>Thus, the following pattern matches all possible clauses:</source>
          <target state="translated">したがって、以下のパターンは、可能性のあるすべての節に一致します。</target>
        </trans-unit>
        <trans-unit id="a6da41a12dddbe97c927f5b83e0ea21b128613a3" translate="yes" xml:space="preserve">
          <source>Thus, the main representation of test sets is &lt;strong&gt;deep lists&lt;/strong&gt;, and a simple test object can be viewed as a test set containing only a single test; there is no difference between &lt;code&gt;T&lt;/code&gt; and &lt;code&gt;[T]&lt;/code&gt;.</source>
          <target state="translated">したがって、テストセットの主な表現は&lt;strong&gt;ディープリスト&lt;/strong&gt;であり、単純なテストオブジェクトは単一のテストのみを含むテストセットと見なすことができます。 &lt;code&gt;T&lt;/code&gt; との間に違いはありません &lt;code&gt;[T]&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="72fc65dc129a4472605c016017814aa86198846c" translate="yes" xml:space="preserve">
          <source>Thus, the module is called &lt;strong&gt;tut&lt;/strong&gt;. Notice the full stop &quot;.&quot; at the end of the line. The files which are used to store the module must have the same name as the module but with the extension &quot;.erl&quot;. In this case the file name is &lt;code&gt;tut.erl&lt;/code&gt;. When using a function in another module, the syntax &lt;code&gt;module_name:function_name(arguments)&lt;/code&gt; is used. So the following means call function &lt;code&gt;double&lt;/code&gt; in module &lt;code&gt;tut&lt;/code&gt; with argument &quot;10&quot;.</source>
          <target state="translated">したがって、モジュールは&lt;strong&gt;tut&lt;/strong&gt;と呼ばれます。フルストップ「。」に注意してください。行の終わりに。モジュールの保存に使用されるファイルは、モジュールと同じ名前である必要がありますが、拡張子は「.erl」です。この場合、ファイル名は &lt;code&gt;tut.erl&lt;/code&gt; です。別のモジュールで関数を使用する場合、構文 &lt;code&gt;module_name:function_name(arguments)&lt;/code&gt; が使用されます。したがって、次のことは、引数 &quot;10&quot; でモジュール &lt;code&gt;tut&lt;/code&gt; の関数 &lt;code&gt;double&lt;/code&gt; を呼び出すことを意味します。</target>
        </trans-unit>
        <trans-unit id="c34ce3a6ce18ac5cd93d950cae3e6a6b1eaefbd7" translate="yes" xml:space="preserve">
          <source>Thus, two instances of the application run simultaneously during the takeover, so that data can be transferred from the old to the new instance. If this is not an acceptable behavior, parts of the old instance can be shut down when the new instance is started. However, the application cannot be stopped entirely, at least the top supervisor must remain alive.</source>
          <target state="translated">このように、データが古いインスタンスから新しいインスタンスに転送されるように、アプリケーションの2つのインスタンスがテイクオーバー中に同時に実行されます。これが許容できる動作でない場合は、新しいインスタンスが開始されたときに古いインスタンスの一部をシャットダウンすることができます。しかし、アプリケーションを完全に停止させることはできず、少なくともトップスーパバイザは生きていなければなりません。</target>
        </trans-unit>
        <trans-unit id="8b6a4f79c67e1c0cfc398c2295408f2eb4b88ca9" translate="yes" xml:space="preserve">
          <source>Tibetan</source>
          <target state="translated">Tibetan</target>
        </trans-unit>
        <trans-unit id="4be1e581820721963019e692dc1f7707fda4ff7f" translate="yes" xml:space="preserve">
          <source>Ticket shall be used within specified time window (freshness checks).</source>
          <target state="translated">チケットは指定された時間帯に使用すること(鮮度チェック)。</target>
        </trans-unit>
        <trans-unit id="495255dc624907e5a1daae0dcc0d862cd07a65e4" translate="yes" xml:space="preserve">
          <source>Tidies Erlang source files in a directory and its subdirectories.</source>
          <target state="translated">ディレクトリとそのサブディレクトリ内のErlangソースファイルを整理します。</target>
        </trans-unit>
        <trans-unit id="5ab18872f1a912f1810a74934cd2ae2c9eab483f" translate="yes" xml:space="preserve">
          <source>Tidies a syntax tree representation of a module definition. The given &lt;code&gt;Forms&lt;/code&gt; may be either a single syntax tree of type &lt;code&gt;form_list&lt;/code&gt;, or a list of syntax trees representing &quot;program forms&quot;. In either case, &lt;code&gt;Forms&lt;/code&gt; must represent a single complete module definition. The returned syntax tree has type &lt;code&gt;form_list&lt;/code&gt; and represents a tidied-up version of the same source code.</source>
          <target state="translated">モジュール定義の構文ツリー表現を整理します。指定された &lt;code&gt;Forms&lt;/code&gt; は、 &lt;code&gt;form_list&lt;/code&gt; タイプの単一の構文ツリーか、「プログラムフォーム」を表す構文ツリーのリストのいずれかです。どちらの場合も、 &lt;code&gt;Forms&lt;/code&gt; は単一の完全なモジュール定義を表す必要があります。返される構文ツリーは &lt;code&gt;form_list&lt;/code&gt; 型で、同じソースコードの整頓されたバージョンを表します。</target>
        </trans-unit>
        <trans-unit id="f1ca9281bec4536e142232511847b2d622b54efd" translate="yes" xml:space="preserve">
          <source>Tidies an Erlang source code file.</source>
          <target state="translated">Erlangのソースコードファイルを整理します。</target>
        </trans-unit>
        <trans-unit id="82f374f21b06bcdcda1afc18f61cb6cebcc8d024" translate="yes" xml:space="preserve">
          <source>Tidies and pretty-prints Erlang source code, removing unused functions, updating obsolete constructs and function calls, etc.</source>
          <target state="translated">Erlangのソースコードを整理してきれいに印刷し、使われていない関数を削除したり、時代遅れのコンストラクトや関数呼び出しを更新したりします。</target>
        </trans-unit>
        <trans-unit id="cf46deb14abc3ae4a0180bd680085f5421becb62" translate="yes" xml:space="preserve">
          <source>Tifinagh</source>
          <target state="translated">Tifinagh</target>
        </trans-unit>
        <trans-unit id="06efc4d93bae79312067fccb5a91a687ea053f84" translate="yes" xml:space="preserve">
          <source>Time Accuracy</source>
          <target state="translated">時間精度</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
