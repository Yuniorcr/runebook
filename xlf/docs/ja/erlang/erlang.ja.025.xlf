<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="d09be805d2731441552cb1761a72f29b924b8a7a" translate="yes" xml:space="preserve">
          <source>Note: This is equivalent to &lt;code&gt;set_postcomments(set_precomments(Target, get_precomments(Source)), get_postcomments(Source))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;set_postcomments(set_precomments(Target, get_precomments(Source)), get_postcomments(Source))&lt;/code&gt; と同等ですが、潜在的にはより効率的です。</target>
        </trans-unit>
        <trans-unit id="698437d5693811f218a0125173a54360a31fae26" translate="yes" xml:space="preserve">
          <source>Note: This is equivalent to &lt;code&gt;set_precomments(Node, get_precomments(Node) ++ Comments)&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;set_precomments(Node, get_precomments(Node) ++ Comments)&lt;/code&gt; と同等ですが、潜在的に効率的です。</target>
        </trans-unit>
        <trans-unit id="94f64f74f43a14a0fd5a71cca82d5190660bfa22" translate="yes" xml:space="preserve">
          <source>Note: This is equivalent to &lt;code&gt;set_precomments(set_postcomments(Node, []), [])&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;set_precomments(set_postcomments(Node, []), [])&lt;/code&gt; と同等ですが、潜在的に効率的です。</target>
        </trans-unit>
        <trans-unit id="c2cbae916b385a433641891fb2f65cb175003a34" translate="yes" xml:space="preserve">
          <source>Note: changing this value (and passing the resulting context to a continuation function) does not affect the normal formatting, but may affect user-defined behaviour in hook functions.</source>
          <target state="translated">注意:この値を変更しても (結果として得られるコンテキストを継続関数に渡しても)通常の書式設定には影響しませんが、フック関数のユーザー定義の動作に影響を与える可能性があります。</target>
        </trans-unit>
        <trans-unit id="c0e024adb668e3f8ad63658f3c7b61203ba9e048" translate="yes" xml:space="preserve">
          <source>Note: if &lt;code&gt;Node&lt;/code&gt; represents &quot;&lt;code&gt;M:F(...)&lt;/code&gt;&quot;, then the result is the subtree representing &quot;&lt;code&gt;M:F&lt;/code&gt;&quot;.</source>
          <target state="translated">注： &lt;code&gt;Node&lt;/code&gt; が「 &lt;code&gt;M:F(...)&lt;/code&gt; 」を表す場合、結果は「 &lt;code&gt;M:F&lt;/code&gt; 」を表すサブツリーになります。</target>
        </trans-unit>
        <trans-unit id="e950ce0b15b865ad70b6df0b8b6e16fd534c8751" translate="yes" xml:space="preserve">
          <source>Note: if &lt;code&gt;Node&lt;/code&gt; represents &quot;&lt;code&gt;fun N/A&lt;/code&gt;&quot; or &quot;&lt;code&gt;fun M:N/A&lt;/code&gt;&quot;, then the result is the subtree representing &quot;&lt;code&gt;N/A&lt;/code&gt;&quot; or &quot;&lt;code&gt;M:N/A&lt;/code&gt;&quot;, respectively.</source>
          <target state="translated">注： &lt;code&gt;Node&lt;/code&gt; が「 &lt;code&gt;fun N/A&lt;/code&gt; 」または「 &lt;code&gt;fun M:N/A&lt;/code&gt; 」を表す場合、結果はそれぞれ「 &lt;code&gt;N/A&lt;/code&gt; 」または「 &lt;code&gt;M:N/A&lt;/code&gt; 」を表すサブツリーになります。</target>
        </trans-unit>
        <trans-unit id="024d798779fd03b9f02b44baf68e6e4bf1a905f4" translate="yes" xml:space="preserve">
          <source>Note: in &lt;code&gt;list(Elements, none)&lt;/code&gt;, the &quot;nil&quot; list terminator is implicit and has no associated information (see &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt;), while in the seemingly equivalent &lt;code&gt;list(Elements, Tail)&lt;/code&gt; when &lt;code&gt;Tail&lt;/code&gt; has type &lt;code&gt;nil&lt;/code&gt;, the list terminator subtree &lt;code&gt;Tail&lt;/code&gt; may have attached attributes such as position, comments, and annotations, which will be preserved in the result.</source>
          <target state="translated">注： &lt;code&gt;list(Elements, none)&lt;/code&gt; では、「nil」リストターミネータは暗黙的であり、関連する情報はありませんが（ &lt;code&gt;&lt;a href=&quot;#get_attrs-1&quot;&gt;get_attrs/1&lt;/a&gt;&lt;/code&gt; を参照 &lt;code&gt;list(Elements, Tail)&lt;/code&gt; 、 &lt;code&gt;Tail&lt;/code&gt; のタイプが &lt;code&gt;nil&lt;/code&gt; である場合、リストターミネータは同等のlist（Elements、Tail）です。サブツリー &lt;code&gt;Tail&lt;/code&gt; は、位置、コメント、注釈などの属性が添付されている場合があり、これらは結果に保持されます。</target>
        </trans-unit>
        <trans-unit id="c912d0741e6afe02446fe862b8225b8a23da14f4" translate="yes" xml:space="preserve">
          <source>Note: no checking is done whether the character sequence represents a proper variable name, i.e., whether or not its first character is an uppercase Erlang character, or whether it does not contain control characters, whitespace, etc.</source>
          <target state="translated">注意:文字列が適切な変数名を表しているかどうか、つまり最初の文字が大文字のErlang文字であるかどうか、制御文字や空白などを含まないかどうかはチェックされません。</target>
        </trans-unit>
        <trans-unit id="0e16037ad2fddc6752207e81b2d23a2a536d6ff8" translate="yes" xml:space="preserve">
          <source>Note: not all literals are leaf nodes, and vice versa. E.g., tuples with nonzero arity and nonempty lists may be literals, but are not leaf nodes. Variables, on the other hand, are leaf nodes but not literals.</source>
          <target state="translated">注意:すべてのリテラルがリーフノードであるわけではありませんし、その逆もあります。例えば、アリティが0ではないタプルや空ではないリストはリテラルかもしれませんが、リーフノードではありません。一方、変数はリーフノードですが、リテラルではありません。</target>
        </trans-unit>
        <trans-unit id="e19a5f5e7535dfc22dce9d8f5ad97ff942d5f69e" translate="yes" xml:space="preserve">
          <source>Note: the literal corresponding to a particular character value is not uniquely defined. E.g., the character &quot;&lt;code&gt;a&lt;/code&gt;&quot; can be written both as &quot;&lt;code&gt;$a&lt;/code&gt;&quot; and &quot;&lt;code&gt;$\141&lt;/code&gt;&quot;, and a Tab character can be written as &quot;&lt;code&gt;$\11&lt;/code&gt;&quot;, &quot;&lt;code&gt;$\011&lt;/code&gt;&quot; or &quot;&lt;code&gt;$\t&lt;/code&gt;&quot;.</source>
          <target state="translated">注：特定の文字値に対応するリテラルは一意に定義されていません。たとえば、文字「 &lt;code&gt;a&lt;/code&gt; 」は「 &lt;code&gt;$a&lt;/code&gt; 」と「 &lt;code&gt;$\141&lt;/code&gt; 」の両方として記述でき、タブ文字は「 &lt;code&gt;$\11&lt;/code&gt; 」、「 &lt;code&gt;$\011&lt;/code&gt; 」、または「 &lt;code&gt;$\t&lt;/code&gt; 」と記述できます。</target>
        </trans-unit>
        <trans-unit id="6afc7eae3d94cce8a805b8208b70b9cbd6d1fee0" translate="yes" xml:space="preserve">
          <source>Note: the resulting list can contain more than one tuple &lt;code&gt;{ShortName, Name}&lt;/code&gt; for the same &lt;code&gt;ShortName&lt;/code&gt;, possibly with different values for &lt;code&gt;Name&lt;/code&gt;, depending on the given list.</source>
          <target state="translated">注：結果のリストには、同じ &lt;code&gt;ShortName&lt;/code&gt; の複数のタプル &lt;code&gt;{ShortName, Name}&lt;/code&gt; を含めることができます。指定されたリストによっては、 &lt;code&gt;Name&lt;/code&gt; の値が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="e12fe9dbfa6c36c26ca8159eaa9cc67ee440fdd9" translate="yes" xml:space="preserve">
          <source>Note: the return value is &lt;code&gt;ok&lt;/code&gt; instead of &lt;code&gt;success&lt;/code&gt; unlike in other functions in this module. This is a fault that was introduced so long ago that any change would break a large number of existing software.</source>
          <target state="translated">注：このモジュールの他の関数とは異なり、戻り値は &lt;code&gt;success&lt;/code&gt; はなく &lt;code&gt;ok&lt;/code&gt; です。これは非常に前に導入された障害であり、変更を加えると既存のソフトウェアの多くが壊れます。</target>
        </trans-unit>
        <trans-unit id="17b17be20c7e8e9810e58ea4c73486c73bfc67e7" translate="yes" xml:space="preserve">
          <source>Note: the text returned by the formatting function will be split automatically into separate comment lines at each line break. No extra work is needed.</source>
          <target state="translated">注:書式設定関数で返されたテキストは、改行ごとに自動的に別々のコメント行に分割されます。余分な作業は必要ありません。</target>
        </trans-unit>
        <trans-unit id="41856edf3415d1e90c206e87cfe950bc7df0afeb" translate="yes" xml:space="preserve">
          <source>Note: these macros introduce a run-time dependency on the EUnit library code, if compiled with testing enabled.</source>
          <target state="translated">注意:テストを有効にしてコンパイルした場合、これらのマクロはEUnitライブラリコードにランタイム依存性を導入します。</target>
        </trans-unit>
        <trans-unit id="58d78502c9d35d74b9f564b739de13ccb2a77f56" translate="yes" xml:space="preserve">
          <source>Note: this is equivalent to &lt;code&gt;length(list_elements(Node))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;length(list_elements(Node))&lt;/code&gt; と同等ですが、潜在的にはより効率的です。</target>
        </trans-unit>
        <trans-unit id="97dc47a811817d58377be776d262e5b3c05f6cf1" translate="yes" xml:space="preserve">
          <source>Note: this is equivalent to &lt;code&gt;length(tuple_elements(Node))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;length(tuple_elements(Node))&lt;/code&gt; と同等ですが、潜在的にはより効率的です。</target>
        </trans-unit>
        <trans-unit id="4666d61b1ebe44a455ff212df8dfe43d5e4150ff" translate="yes" xml:space="preserve">
          <source>Note: this is equivalent to &lt;code&gt;set_ann(Node, [Annotation | get_ann(Node)])&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;set_ann(Node, [Annotation | get_ann(Node)])&lt;/code&gt; と同等ですが、潜在的に効率的です。</target>
        </trans-unit>
        <trans-unit id="cdbc84877e38d50c218ad5207d2faecbe10b2060" translate="yes" xml:space="preserve">
          <source>Note: this is equivalent to &lt;code&gt;set_ann(Target, get_ann(Source))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;set_ann(Target, get_ann(Source))&lt;/code&gt; と同等ですが、潜在的に効率的です。</target>
        </trans-unit>
        <trans-unit id="a5386e79b58eda950a5274a7a0af8b6cfc746999" translate="yes" xml:space="preserve">
          <source>Note: this is equivalent to &lt;code&gt;set_attrs(Target, get_attrs(Source))&lt;/code&gt;, but potentially more efficient.</source>
          <target state="translated">注：これは &lt;code&gt;set_attrs(Target, get_attrs(Source))&lt;/code&gt; と同等ですが、潜在的に効率的です。</target>
        </trans-unit>
        <trans-unit id="27b141a49bc96901cfd1d105a64d4c5f5a09eca3" translate="yes" xml:space="preserve">
          <source>Note: this is retained only for backwards compatibility with existing parsers and tools.</source>
          <target state="translated">注意:これは、既存のパーサやツールとの下位互換性のためだけに保持されます。</target>
        </trans-unit>
        <trans-unit id="9a585e3e15766522c8abd82fcb5ff8e1c6cca19e" translate="yes" xml:space="preserve">
          <source>Note: this is simply a way of grouping source code forms as a single syntax tree, usually in order to form an Erlang module definition.</source>
          <target state="translated">Note:これは単にソースコードのフォームを一つの構文ツリーとしてグループ化する方法で、通常はErlangモジュールの定義を形成するためのものです。</target>
        </trans-unit>
        <trans-unit id="7a43199c7c25f11800016e7472f3564571a0c7b8" translate="yes" xml:space="preserve">
          <source>Note: this is supported only for backwards compatibility with existing parsers and tools.</source>
          <target state="translated">注意:これは既存のパーサやツールとの下位互換性のためだけにサポートされています。</target>
        </trans-unit>
        <trans-unit id="36d78a208c85e4ee9fbb30023fe1b73f1f6b5ac7" translate="yes" xml:space="preserve">
          <source>Notes: Floating documents appear to work well, but are currently less general than you might wish, losing effect when embedded in certain contexts. It is possible to nest floating-operators (even with different priorities), but the effects may be difficult to predict. In any case, note that the way the algorithm reorders floating documents amounts to a &quot;bubblesort&quot;, so don't expect it to be able to sort large sequences of floating documents quickly.</source>
          <target state="translated">注意事項。浮動小数点演算子はうまく動作するように見えますが、現在のところ思ったよりも一般的ではなく、特定のコンテキストに埋め込まれた場合には効果が失われます。浮動演算子を入れ子にすることは可能ですが(優先順位が異なる場合でも)、その効果を予測するのは難しいかもしれません。いずれにしても、アルゴリズムが浮動文書を並べ替える方法は「バブルソート」に相当するので、浮動文書の大規模なシーケンスを素早くソートできるとは期待しないでください。</target>
        </trans-unit>
        <trans-unit id="661b94995b5e8bdcfda9b5f651e69fddc51ef9bc" translate="yes" xml:space="preserve">
          <source>Notes: If a file contains too exotic definitions or uses of macros, it will not be possible to read it without preprocessing. Furthermore, Igor does not currently try to sort out multiple inclusions of the same file, or redefinitions of the same macro name. Therefore, when preprocessing is turned off, it may become necessary to edit the resulting source code, removing such re-inclusions and redefinitions.</source>
          <target state="translated">注意事項。ファイルにあまりにもエキゾチックな定義やマクロの使用法が含まれている場合、前処理を行わずに読み取ることはできません。さらに、Igor は現在のところ、同じファイルの複数の包含、または同じマクロ名の再定義を並べ替えようとはしません。そのため、前処理をオフにすると、そのような再包含や再定義を削除して、結果として得られるソースコードを編集する必要が出てくるかもしれません。</target>
        </trans-unit>
        <trans-unit id="15f88e626a7699794907797465138c59374fcbea" translate="yes" xml:space="preserve">
          <source>Notes: if &lt;code&gt;Arguments&lt;/code&gt; is the empty list, the result will thus represent &quot;&lt;code&gt;?Name()&lt;/code&gt;&quot;, including a pair of matching parentheses.</source>
          <target state="translated">注： &lt;code&gt;Arguments&lt;/code&gt; が空のリストの場合、結果は一致する括弧のペアを含め、「 &lt;code&gt;?Name()&lt;/code&gt; 」を表します。</target>
        </trans-unit>
        <trans-unit id="99a1f1cf872f6e0e707f9c22cb3a2c5254119532" translate="yes" xml:space="preserve">
          <source>Nothing is removed from the queue by this function, that must be done with &lt;code&gt;&lt;a href=&quot;#driver_deq&quot;&gt;driver_deq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数によってキューから削除されるものはありません。これは &lt;code&gt;&lt;a href=&quot;#driver_deq&quot;&gt;driver_deq&lt;/a&gt;&lt;/code&gt; で行う必要があります。</target>
        </trans-unit>
        <trans-unit id="f4188a869e9e87b711a06e4a4b3f28fd00e2f8ef" translate="yes" xml:space="preserve">
          <source>Nothing is removed from the queue by this function, that must be done with &lt;code&gt;&lt;a href=&quot;#enif_ioq_deq&quot;&gt;enif_ioq_deq&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数によってキューから削除されるものはありません。これは、 &lt;code&gt;&lt;a href=&quot;#enif_ioq_deq&quot;&gt;enif_ioq_deq&lt;/a&gt;&lt;/code&gt; を使用して行う必要があります。</target>
        </trans-unit>
        <trans-unit id="65c645e6dc76f281bf44b4e98033d1a25ed3e13d" translate="yes" xml:space="preserve">
          <source>Notice also that &quot;&lt;code&gt;B=&amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt;&quot; is interpreted as &quot;&lt;code&gt;B =&amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt;&quot; which is a syntax error. The correct way is to write a space after '=': &quot;&lt;code&gt;B= &amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">通知はまた、「 &lt;code&gt;B=&amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt; 」「として解釈される &lt;code&gt;B =&amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt; 構文エラーです」。正しい方法は、「=」の後にスペースを書き込むことです： &quot; &lt;code&gt;B= &amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e7821e854de5de8a4aacee0ff97239e9645aa44" translate="yes" xml:space="preserve">
          <source>Notice also that byte-oriented data is simplest sent using the ISO Latin-1 encoding.</source>
          <target state="translated">また、バイト指向のデータは、ISO Latin-1 エンコーディングを使用して送信されるのが最も単純であることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="8a4c53d6a09620002b97e1f8172f87b851fbd7a6" translate="yes" xml:space="preserve">
          <source>Notice also that the transient type is of little practical use, because when a supervision tree terminates, the reason is set to &lt;code&gt;shutdown&lt;/code&gt;, not &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">監視ツリーが終了すると、理由は &lt;code&gt;normal&lt;/code&gt; ではなく &lt;code&gt;shutdown&lt;/code&gt; に設定されるため、一時的なタイプはほとんど実用的ではないことにも注意してください。</target>
        </trans-unit>
        <trans-unit id="ed33ac880989d641a4eeb80431d2338e759148c9" translate="yes" xml:space="preserve">
          <source>Notice also that when testing the program from the shell, the input is spread over two lines as the line was too long.</source>
          <target state="translated">また、シェルからプログラムをテストする場合、行が長すぎたために入力が2行に渡って広がってしまうことにも注意してください。</target>
        </trans-unit>
        <trans-unit id="831cedf2104bac2a5f0cad0d085a43c104fcbad7" translate="yes" xml:space="preserve">
          <source>Notice also that ~p is used instead of ~w in &lt;code&gt;io:format&lt;/code&gt;. To quote the manual: &quot;~p Writes the data with standard syntax in the same way as ~w, but breaks terms whose printed representation is longer than one line into many lines and indents each line sensibly. It also tries to detect lists of printable characters and to output these as strings&quot;.</source>
          <target state="translated">&lt;code&gt;io:format&lt;/code&gt; では〜wの代わりに〜pが使用されていることにも注意してください。マニュアルを引用するには： &quot;〜pは、〜wと同じ方法で標準構文でデータを書き込みますが、印刷された表現が1行より長い用語を多くの行に分割し、各行を慎重にインデントします。また、印刷可能なリストを検出しようとします文字とこれらを文字列として出力します。</target>
        </trans-unit>
        <trans-unit id="c8bc316625e4c64bc96adbb50df0038f6cc5d2e3" translate="yes" xml:space="preserve">
          <source>Notice how the operator &quot;!&quot; is used to send messages. The syntax of &quot;!&quot; is:</source>
          <target state="translated">演算子 &quot;!&quot; がどのようにメッセージを送信するために使われているかに注目してください。&quot;!&quot; の構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2981906ecbb99640904a52c6a3186e8def191ed9" translate="yes" xml:space="preserve">
          <source>Notice how to write the &lt;code&gt;server&lt;/code&gt; function so that it calls itself, through &lt;code&gt;server(User_List)&lt;/code&gt;, and thus creates a loop. The Erlang compiler is &quot;clever&quot; and optimizes the code so that this really is a sort of loop and not a proper function call. But this only works if there is no code after the call. Otherwise, the compiler expects the call to return and make a proper function call. This would result in the process getting bigger and bigger for every loop.</source>
          <target state="translated">&lt;code&gt;server(User_List)&lt;/code&gt; を介して自身を呼び出すように &lt;code&gt;server&lt;/code&gt; 関数を記述し、ループを作成する方法に注意してください。 Erlangコンパイラーは「賢い」ものであり、コードを最適化するため、これは一種のループであり、適切な関数呼び出しではありません。しかし、これは呼び出しの後にコードがない場合にのみ機能します。それ以外の場合、コンパイラーは呼び出しが戻り、適切な関数呼び出しを行うことを期待します。これにより、ループごとにプロセスがどんどん大きくなります。</target>
        </trans-unit>
        <trans-unit id="5b3e78ade17b6e0804c28534fc7f4b91db6f6042" translate="yes" xml:space="preserve">
          <source>Notice in the second example that the duplicate name only occurs once in the returned list, and that the list is in alphabetical order regardless of where the names are positioned in the regular expression. The order of the names is the same as the order of captured subexpressions if &lt;code&gt;{capture, all_names}&lt;/code&gt; is specified as an option to &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt;. You can therefore create a name-to-value mapping from the result of &lt;code&gt;run/3&lt;/code&gt; like this:</source>
          <target state="translated">2番目の例では、返されたリストで名前の重複が1回だけ発生し、名前が正規表現のどこに配置されているかに関係なく、リストがアルファベット順になっていることに注意してください。 &lt;code&gt;{capture, all_names}&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; のオプションとして指定されている場合、名前の順序は、キャプチャされた部分式の順序と同じです。したがって、次のように &lt;code&gt;run/3&lt;/code&gt; の結果から名前から値へのマッピングを作成できます。</target>
        </trans-unit>
        <trans-unit id="686ddcda1c61a1ea244a057dd0d0172fe3f99230" translate="yes" xml:space="preserve">
          <source>Notice on line 16 that 5 inches is converted to centimeters and back again and reassuringly get back to the original value. That is, the argument to a function can be the result of another function. Consider how line 16 (above) works. The argument given to the function &lt;code&gt;{inch,5}&lt;/code&gt; is first matched against the first head clause of &lt;code&gt;convert_length&lt;/code&gt;, that is, &lt;code&gt;convert_length({centimeter,X})&lt;/code&gt;. It can be seen that &lt;code&gt;{centimeter,X}&lt;/code&gt; does not match &lt;code&gt;{inch,5}&lt;/code&gt; (the head is the bit before the &quot;-&amp;gt;&quot;). This having failed, let us try the head of the next clause that is, &lt;code&gt;convert_length({inch,Y})&lt;/code&gt;. This matches, and &lt;code&gt;Y&lt;/code&gt; gets the value 5.</source>
          <target state="translated">16行目で、5インチがセンチメートルに変換されて再び元に戻り、元の値に確実に戻っていることに注意してください。つまり、関数の引数は別の関数の結果である可能性があります。 16行目（上記）の動作を考えてみましょう。関数 &lt;code&gt;{inch,5}&lt;/code&gt; 指定された引数は、最初に &lt;code&gt;convert_length&lt;/code&gt; の最初のヘッド句、つまり、 &lt;code&gt;convert_length({centimeter,X})&lt;/code&gt; と照合されます。それことがわかる &lt;code&gt;{centimeter,X}&lt;/code&gt; 一致しない &lt;code&gt;{inch,5}&lt;/code&gt; （「 - &amp;gt;」頭が少し前です）。これが失敗したので、次の節の先頭である &lt;code&gt;convert_length({inch,Y})&lt;/code&gt; 試してみましょう。これは一致し、 &lt;code&gt;Y&lt;/code&gt; は値5を取得します。</target>
        </trans-unit>
        <trans-unit id="faf1518cd916f83fdab368cf16163b784374daaa" translate="yes" xml:space="preserve">
          <source>Notice that &quot;&lt;code&gt;B=&amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt;&quot; will be interpreted as &quot;&lt;code&gt;B =&amp;lt; &amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt;&quot;, which is a syntax error. The correct way to write the expression is: &lt;code&gt;B = &amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">通知その&quot; &lt;code&gt;B=&amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt; &quot; &quot;として解釈される &lt;code&gt;B =&amp;lt; &amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt; 構文エラーです&quot;。式を記述する正しい方法は、 &lt;code&gt;B = &amp;lt;&amp;lt;1&amp;gt;&amp;gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e48d2b215215558347b575f3ecbab79091a73b6" translate="yes" xml:space="preserve">
          <source>Notice that (*COMMIT) at the start of a pattern is not the same as an anchor, unless the PCRE start-of-match optimizations are turned off, as shown in the following example:</source>
          <target state="translated">以下の例のように、PCREのマッチ開始最適化がオフになっていない限り、パターンの開始時の(*COMMIT)はアンカーと同じではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7645c19f8cada682b7b2ac8e343c6026994bf018" translate="yes" xml:space="preserve">
          <source>Notice that (*SKIP:NAME) searches only for names set by (*MARK:NAME). It ignores names that are set by (*PRUNE:NAME) or (*THEN:NAME).</source>
          <target state="translated">(*SKIP:NAME)は、(*MARK:NAME)で設定された名前のみを検索することに注意してください。(*PRUNE:NAME)や(*THEN:NAME)で設定された名前は無視されます。</target>
        </trans-unit>
        <trans-unit id="3adcc07be0a21a37482a3bd3976227349972956b" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;-relaxed_command_check&lt;/code&gt; is specified when starting the daemon that is to accept killing when it has live nodes registered. When running &lt;code&gt;epmd&lt;/code&gt; interactively, &lt;code&gt;-relaxed_command_check&lt;/code&gt; has no effect. A daemon that is started without relaxed command checking must be killed using, for example, signals or some other OS-specific method if it has active clients registered.</source>
          <target state="translated">デーモンの起動時に &lt;code&gt;-relaxed_command_check&lt;/code&gt; が指定されていることに注意してください。デーモンは、ライブノードが登録されているときに強制終了を受け入れます。 &lt;code&gt;epmd&lt;/code&gt; を対話的に実行する場合、 &lt;code&gt;-relaxed_command_check&lt;/code&gt; は効果がありません。緩和されたコマンドチェックなしで起動されたデーモンは、アクティブなクライアントが登録されている場合は、シグナルやその他のOS固有の方法などを使用して強制終了する必要があります。</target>
        </trans-unit>
        <trans-unit id="147f5f00692828642c9cf73812c37af283058699" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;&lt;a href=&quot;erl_ext_dist#overall_format&quot;&gt;the version number is omitted from the terms that follow a distribution header&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erl_ext_dist#overall_format&quot;&gt;the version number is omitted from the terms that follow a distribution header&lt;/a&gt;&lt;/code&gt; 注意してください。</target>
        </trans-unit>
        <trans-unit id="8218b491a4b3c0c5eb8370427f8e63bc8b619227" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;ActiveSuspendCount&lt;/code&gt; and &lt;code&gt;OutstandingSuspendCount&lt;/code&gt; are not the total suspend count on &lt;code&gt;Suspendee&lt;/code&gt;, only the parts contributed by &lt;code&gt;Pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ActiveSuspendCount&lt;/code&gt; と &lt;code&gt;OutstandingSuspendCount&lt;/code&gt; は &lt;code&gt;Suspendee&lt;/code&gt; の合計サスペンドカウントではなく、 &lt;code&gt;Pid&lt;/code&gt; によって提供された部分のみであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5cd2f7d7216ad16040d03dfe0cd8ffeaa41f5fc9" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;ErlNifBinary&lt;/code&gt; is a semi-opaque type and you are only allowed to read fields &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ErlNifBinary&lt;/code&gt; は半透明のタイプであり、フィールドの &lt;code&gt;size&lt;/code&gt; と &lt;code&gt;data&lt;/code&gt; 読み取りのみが許可されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f6fa80e962aa12707d897541b088fcd511a7fff9" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;Filename&lt;/code&gt; can be either a list or a binary.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; はリストまたはバイナリのいずれかであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f14731d9c3c6fd3730587d810464f8a2d56ecc47" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;Tracee&lt;/code&gt; must refer to a process currently or previously existing on the same node as the caller of &lt;code&gt;erlang:trace_delivered(Tracee)&lt;/code&gt; resides on. The special &lt;code&gt;Tracee&lt;/code&gt; atom &lt;code&gt;all&lt;/code&gt; denotes all processes that currently are traced in the node.</source>
          <target state="translated">&lt;code&gt;Tracee&lt;/code&gt; は、 &lt;code&gt;erlang:trace_delivered(Tracee)&lt;/code&gt; の呼び出し元が存在するのと同じノードに現在または以前に存在するプロセスを参照する必要があることに注意してください。特殊な &lt;code&gt;Tracee&lt;/code&gt; アトム &lt;code&gt;all&lt;/code&gt; は、現在ノードでトレースされているすべてのプロセスを示します。</target>
        </trans-unit>
        <trans-unit id="e39772795b303f493c5e1f6ecf427eea0b844a7b" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;[$\r,$\n]&lt;/code&gt; is one grapheme cluster according to the Unicode Standard.</source>
          <target state="translated">&lt;code&gt;[$\r,$\n]&lt;/code&gt; は、Unicode規格による1つの書記素クラスターであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6aa2d6619dffc8bd3c3adb06ec4c9073939311ad" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;[$\r,$\n]&lt;/code&gt; is one grapheme cluster.</source>
          <target state="translated">&lt;code&gt;[$\r,$\n]&lt;/code&gt; は1つの書記素クラスターであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="08897008ae2f97db9924c5cfdccc065044d13435" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;bind_address&lt;/code&gt; must be the IP address reported by function &lt;code&gt;info&lt;/code&gt; and cannot be the hostname that is allowed when putting in &lt;code&gt;bind_address&lt;/code&gt;.</source>
          <target state="translated">ことに注意してください &lt;code&gt;bind_address&lt;/code&gt; IPアドレスでなければなりませんが、関数によって報告された &lt;code&gt;info&lt;/code&gt; とを入れたときに許可されているホスト名にすることはできません &lt;code&gt;bind_address&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b0c830556293b9a7bbf702aa85452de5ebbaf366" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;catch&lt;/code&gt; has low precedence and catch subexpressions often needs to be enclosed in a block expression or in parentheses:</source>
          <target state="translated">&lt;code&gt;catch&lt;/code&gt; は優先順位が低く、catchの部分式は多くの場合、ブロック式または括弧で囲む必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bb283657c8b33fada586a3cb80cefd9a6fce3dd1" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;enif_open_resource_type&lt;/code&gt; is only allowed to be called in the two callbacks &lt;code&gt;&lt;a href=&quot;#load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#upgrade&quot;&gt;upgrade&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;enif_open_resource_type&lt;/code&gt; は、2つのコールバック &lt;code&gt;&lt;a href=&quot;#load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#upgrade&quot;&gt;upgrade&lt;/a&gt;&lt;/code&gt; でのみ呼び出すことができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1773f52a457c6794f4a7d066fbfe3f05c2a765e3" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;erlsrv&lt;/code&gt; is not a general service utility for Windows, but designed for embedded Erlang systems.</source>
          <target state="translated">&lt;code&gt;erlsrv&lt;/code&gt; はWindows用の一般的なサービスユーティリティではなく、組み込みErlangシステム用に設計されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6e432f3e9c9e76ab03e11cf1eee130a983560aaa" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;file:read_link/1&lt;/code&gt; always returns an error if the link points to an invalid filename.</source>
          <target state="translated">リンクが無効なファイル名を指している場合、 &lt;code&gt;file:read_link/1&lt;/code&gt; は常にエラーを返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2b5eb19b7b6106c9b1640932097ed40e803eee2b" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;filters&lt;/code&gt; are obeyed by Logger itself before forwarding the log events to each handler, while &lt;code&gt;formatter&lt;/code&gt; and all handler specific options are left to the handler implementation.</source>
          <target state="translated">お知らせその &lt;code&gt;level&lt;/code&gt; や &lt;code&gt;filters&lt;/code&gt; 一方で、各ハンドラにログイベントを転送する前に、ロガー自体によって守られ &lt;code&gt;formatter&lt;/code&gt; 、すべてのハンドラ固有のオプションは、ハンドラ実装に委ねられています。</target>
        </trans-unit>
        <trans-unit id="dd581a406752603573ad8774cbe10adf7b5ab0d3" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;n3&lt;/code&gt; and &lt;code&gt;creation&lt;/code&gt; are limited in precision, so only the low 18 and 2 bits of these numbers are used.</source>
          <target state="translated">&lt;code&gt;n3&lt;/code&gt; と &lt;code&gt;creation&lt;/code&gt; は精度に制限があるため、これらの数値の下位18ビットと2ビットのみが使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5034ccb8d85a6d7fd7e77e33c704f31bb33968e9" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;number&lt;/code&gt; and &lt;code&gt;creation&lt;/code&gt; are limited in precision, so only the low 18 and 2 bits of these numbers are used.</source>
          <target state="translated">&lt;code&gt;number&lt;/code&gt; と &lt;code&gt;creation&lt;/code&gt; 精度には制限があるため、これらの数の下位18ビットと2ビットのみが使用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8f334a2a965ad63c5f73db11176f314492958179" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;relative_product([R1],&amp;nbsp;R2)&lt;/code&gt; is different from &lt;code&gt;relative_product(R1,&amp;nbsp;R2)&lt;/code&gt;; the list of one element is not identified with the element itself.</source>
          <target state="translated">&lt;code&gt;relative_product([R1],&amp;nbsp;R2)&lt;/code&gt; は &lt;code&gt;relative_product(R1,&amp;nbsp;R2)&lt;/code&gt; とは異なることに注意してください。1つの要素のリストは、要素自体では識別されません。</target>
        </trans-unit>
        <trans-unit id="3688c0644193c1e6416001dafdd6919064e11078" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;stdin&lt;/code&gt; and &lt;code&gt;stdout&lt;/code&gt; are for buffered input/output and must &lt;strong&gt;not&lt;/strong&gt; be used for the communication with Erlang.</source>
          <target state="translated">ことを通知 &lt;code&gt;stdin&lt;/code&gt; および &lt;code&gt;stdout&lt;/code&gt; バッファされた入力/出力のためのものとする必要があり&lt;strong&gt;ません&lt;/strong&gt;アーランとの通信に使用されます。</target>
        </trans-unit>
        <trans-unit id="bc49c747fe59c837c18160b1da219cb9bb69f688" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;tut9:test_if(33,33)&lt;/code&gt; does not cause any condition to succeed. This leads to the run time error &lt;code&gt;if_clause&lt;/code&gt;, here nicely formatted by the shell. See &lt;code&gt;Guard Sequences&lt;/code&gt; for details of the many guard tests available.</source>
          <target state="translated">&lt;code&gt;tut9:test_if(33,33)&lt;/code&gt; は条件を成功させないことに注意してください。これにより、ランタイムエラー &lt;code&gt;if_clause&lt;/code&gt; が発生します。ここでは、シェルによって適切にフォーマットされています。参照 &lt;code&gt;Guard Sequences&lt;/code&gt; 利用可能な多くのガードのテストの詳細については。</target>
        </trans-unit>
        <trans-unit id="d4a0e079c5d305d9ddb09850abdc7996b675aca1" translate="yes" xml:space="preserve">
          <source>Notice that &lt;code&gt;{active, true}&lt;/code&gt; mode provides no flow control; a fast sender can easily overflow the receiver with incoming messages. The same is true for &lt;code&gt;{active, N}&lt;/code&gt; mode, while the message count is greater than zero.</source>
          <target state="translated">&lt;code&gt;{active, true}&lt;/code&gt; モードはフロー制御を提供しないことに注意してください。高速送信者は、受信メッセージで受信者を簡単にオーバーフローさせることができます。 &lt;code&gt;{active, N}&lt;/code&gt; モードについても同じことが言えますが、メッセージ数はゼロより大きいです。</target>
        </trans-unit>
        <trans-unit id="1da54ccbef9166436330bfc6fd162fc86bc65127" translate="yes" xml:space="preserve">
          <source>Notice that Mnesia can be connected to other nodes than those returned in &lt;code&gt;ReturnValue&lt;/code&gt;.</source>
          <target state="translated">Mnesiaは &lt;code&gt;ReturnValue&lt;/code&gt; で返されるノード以外のノードに接続できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ca1604ae3c36200717b82378dacc675667bae387" translate="yes" xml:space="preserve">
          <source>Notice that USM users are needed for SNMPv3 configuration and are not to be confused with users.</source>
          <target state="translated">USMユーザーはSNMPv3設定に必要であり、ユーザーと混同しないように注意してください。</target>
        </trans-unit>
        <trans-unit id="2103331cf1bc333f91a2382aff0f9f89c72945ce" translate="yes" xml:space="preserve">
          <source>Notice that UTF-8 is &lt;strong&gt;not&lt;/strong&gt; compatible with bytewise representation for code points from 128 through 255, so an ISO Latin-1 bytewise representation is generally incompatible with UTF-8.</source>
          <target state="translated">UTF-8は128から255までのコードポイントのバイト単位の表現と互換性が&lt;strong&gt;ない&lt;/strong&gt;ため、ISO Latin-1バイト単位の表現は一般にUTF-8と互換性が&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4a6c1827f210e0e7a2b7f47b6b3a1bd1a9af4a39" translate="yes" xml:space="preserve">
          <source>Notice that \g{...} (Perl syntax) and \g&amp;lt;...&amp;gt; (Oniguruma syntax) are &lt;strong&gt;not&lt;/strong&gt; synonymous. The former is a back reference; the latter is a subroutine call.</source>
          <target state="translated">\ g {...}（Perl構文）と\ g &amp;lt;...&amp;gt;（オニグルマ構文）は同義では&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。前者は後方参照です。後者はサブルーチン呼び出しです。</target>
        </trans-unit>
        <trans-unit id="8de6476a9a9e34e743ca7bda411e9e36e779275d" translate="yes" xml:space="preserve">
          <source>Notice that a &lt;code&gt;gen_server&lt;/code&gt; process does not trap exit signals automatically, this must be explicitly initiated in the callback module.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; プロセスは終了シグナルを自動的にトラップしないことに注意してください。これは、コールバックモジュールで明示的に開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="c8c968975fc7502f69e3fa5a0ebf2c3346e29c96" translate="yes" xml:space="preserve">
          <source>Notice that a &lt;code&gt;gen_statem&lt;/code&gt; does not trap exit signals automatically, this must be explicitly initiated in the callback module (by calling &lt;code&gt;process_flag(trap_exit, true)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; は終了信号を自動的にトラップしないことに注意してください。これは、コールバックモジュールで明示的に開始する必要があります（ &lt;code&gt;process_flag(trap_exit, true)&lt;/code&gt; 呼び出すことにより）。</target>
        </trans-unit>
        <trans-unit id="755428447f434586578dae042ae0cabd4f3e660d" translate="yes" xml:space="preserve">
          <source>Notice that a conditional subpattern is not considered as having two alternatives, as only one is ever used. That is, the | character in a conditional subpattern has a different meaning. Ignoring whitespace, consider:</source>
          <target state="translated">条件付きサブパターンは二つの選択肢があるとは考えられないことに注意してください。つまり、条件付きサブパターンの「|」の文字は異なる意味を持っています。空白を無視して考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="88df944878b2dfd57638c11c5f3a67b0b37ab5eb" translate="yes" xml:space="preserve">
          <source>Notice that a driver binary has an internal reference counter. This means that calling &lt;code&gt;driver_free_binary&lt;/code&gt;, it may not actually dispose of it. If it is sent to the emulator, it can be referenced there.</source>
          <target state="translated">ドライバーバイナリには内部参照カウンターがあることに注意してください。つまり、 &lt;code&gt;driver_free_binary&lt;/code&gt; を呼び出しても、実際には破棄されない可能性があります。エミュレータに送信すると、そこで参照できます。</target>
        </trans-unit>
        <trans-unit id="e57d3be6f96e69f222e396adc45b370579e57d1d" translate="yes" xml:space="preserve">
          <source>Notice that a faked CPU topology that does not reflect how the real CPU topology looks like is likely to decrease the performance of the runtime system.</source>
          <target state="translated">実際のCPUトポロジーがどのように見えるかを反映していないフェイクされたCPUトポロジーは、ランタイムシステムの性能を低下させる可能性が高いことに注意してください。</target>
        </trans-unit>
        <trans-unit id="760aec758f8e9eb253ec969db2ad5ac99a17c5c4" translate="yes" xml:space="preserve">
          <source>Notice that a possessive quantifier can be used with an entire group, for example:</source>
          <target state="translated">所有格量詞は、例えば、グループ全体で使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="dbbbc01405d36730105f83c66e9de97063c42e08" translate="yes" xml:space="preserve">
          <source>Notice that a runtime system using shared reader groups benefits from &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;binding schedulers to logical processors&lt;/a&gt;&lt;/code&gt;, as the reader groups are distributed better between schedulers.</source>
          <target state="translated">共有リーダーグループを使用するランタイムシステムでは、リーダーグループがスケジューラー間でより適切に分散されるため、 &lt;code&gt;&lt;a href=&quot;#+sbt&quot;&gt;binding schedulers to logical processors&lt;/a&gt;&lt;/code&gt; メリットが得られます。</target>
        </trans-unit>
        <trans-unit id="b74f7fd747ff5bbe77c7879d54040bcdfa2b336e" translate="yes" xml:space="preserve">
          <source>Notice that a scheduler can also be busy even if the OS has scheduled out the scheduler thread.</source>
          <target state="translated">OSがスケジューラのスレッドをスケジューリングしていても、スケジューラがビジー状態になることがあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1fb44615a33547638a4835f2bb25ba9f7f738524" translate="yes" xml:space="preserve">
          <source>Notice that all child processes implemented using the standard OTP behavior modules automatically adhere to the shutdown protocol.</source>
          <target state="translated">標準のOTPビヘイビアモジュールを使用して実装されたすべての子プロセスは、自動的にシャットダウンプロトコルを遵守することに注意してください。</target>
        </trans-unit>
        <trans-unit id="022007469674875a658f3171e3ee5f06bc52c5ff" translate="yes" xml:space="preserve">
          <source>Notice that all eight levels can occur in the heading, not only &lt;code&gt;ERROR&lt;/code&gt;, &lt;code&gt;WARNING&lt;/code&gt; or &lt;code&gt;INFO&lt;/code&gt; as &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; produces. And microseconds are added at the end of the timestamp.</source>
          <target state="translated">すべての8つのレベルは、見出しだけでなく発生する可能性があることに注意してください &lt;code&gt;ERROR&lt;/code&gt; 、 &lt;code&gt;WARNING&lt;/code&gt; または &lt;code&gt;INFO&lt;/code&gt; を通り &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; が生成されます。タイムスタンプの最後にマイクロ秒が追加されます。</target>
        </trans-unit>
        <trans-unit id="a99f104a56eef6a6e79ebf5f27128ede71470917" translate="yes" xml:space="preserve">
          <source>Notice that all records in the last fragment must be moved to another fragment, as the entire fragment is deleted.</source>
          <target state="translated">最後のフラグメント内のすべてのレコードは、フラグメント全体が削除されるため、別のフラグメントに移動しなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="43d4ab77c71efe5ed63400db11c28f943feb8544" translate="yes" xml:space="preserve">
          <source>Notice that all the output is received on gollum. This is because the I/O system finds out where the process is spawned from and sends all output there.</source>
          <target state="translated">すべての出力が gollum 上で受信されていることに注目してください。これは、I/Oシステムがプロセスがどこからスポーンされたかを見つけ出し、そこにすべての出力を送るからです。</target>
        </trans-unit>
        <trans-unit id="afcf6c07d5d0261b9d60900ac2418148455d55af" translate="yes" xml:space="preserve">
          <source>Notice that although a user has requested schedulers to be bound, they can silently have failed to bind. To inspect the scheduler bindings, call &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ユーザーがスケジューラをバインドするように要求しましたが、バインドに失敗した可能性があることに注意してください。スケジューラーのバインディングを検査するには、 &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a5737b0ee42e7396b1279449506400af6d4d0399" translate="yes" xml:space="preserve">
          <source>Notice that although the keyword &lt;code&gt;catch&lt;/code&gt; is used in the &lt;code&gt;try&lt;/code&gt; expression, there is not a &lt;code&gt;catch&lt;/code&gt; expression within the &lt;code&gt;try&lt;/code&gt; expression.</source>
          <target state="translated">キーワード &lt;code&gt;catch&lt;/code&gt; は &lt;code&gt;try&lt;/code&gt; 式で使用されていますが、try式内には &lt;code&gt;catch&lt;/code&gt; 式がないことに注意して &lt;code&gt;try&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="994f867c355c6f90c5d005f5efe72e6205d3566f" translate="yes" xml:space="preserve">
          <source>Notice that an application can always be stopped explicitly by calling &lt;code&gt;stop/1&lt;/code&gt;. Regardless of the type of the application, no other applications are affected.</source>
          <target state="translated">&lt;code&gt;stop/1&lt;/code&gt; を呼び出すことにより、アプリケーションを常に明示的に停止できることに注意してください。アプリケーションのタイプに関係なく、他のアプリケーションは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="da2ab21694a90b36239b6620bd78657b3c952a69" translate="yes" xml:space="preserve">
          <source>Notice that an event manager &lt;strong&gt;does&lt;/strong&gt; trap exit signals automatically.</source>
          <target state="translated">イベントマネージャ&lt;strong&gt;が&lt;/strong&gt;終了信号を自動的にトラップすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="49dfb54eadef728066f7af6aab3f97cecf7b3fb1" translate="yes" xml:space="preserve">
          <source>Notice that an exiting port exists, but is not open.</source>
          <target state="translated">出口となるポートは存在するが、開いていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e9791862f66b81843f5294813c5a3786cc4d5cd0" translate="yes" xml:space="preserve">
          <source>Notice that an exiting process exists, but is not alive. That is, &lt;code&gt;is_process_alive/1&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt; for an exiting process, but its process identifier is part of the result returned from &lt;code&gt;processes/0&lt;/code&gt;.</source>
          <target state="translated">存在するプロセスは存在するが、生きていないことに注意してください。つまり、 &lt;code&gt;is_process_alive/1&lt;/code&gt; は既存のプロセスに対して &lt;code&gt;false&lt;/code&gt; を返しますが、そのプロセス識別子は &lt;code&gt;processes/0&lt;/code&gt; から返される結果の一部です。</target>
        </trans-unit>
        <trans-unit id="e30baa54b514ae9385a376058a73878724a1d09c" translate="yes" xml:space="preserve">
          <source>Notice that any modifying operations, that is, &lt;code&gt;mnesia:write&lt;/code&gt; or &lt;code&gt;mnesia:delete&lt;/code&gt;, that are done between the &lt;code&gt;mnesia:select/4&lt;/code&gt; and &lt;code&gt;mnesia:select/1&lt;/code&gt; calls are not visible in the result.</source>
          <target state="translated">&lt;code&gt;mnesia:select/4&lt;/code&gt; と &lt;code&gt;mnesia:select/1&lt;/code&gt; の呼び出しの間に行われた変更操作、つまり &lt;code&gt;mnesia:write&lt;/code&gt; または &lt;code&gt;mnesia:delete&lt;/code&gt; は結果に表示されないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="96c91a61c3b4aa6acc5afde73b1f0c373cd23ed1" translate="yes" xml:space="preserve">
          <source>Notice that any process can close a port using &lt;code&gt;Port ! {PortOwner, close}&lt;/code&gt; as if it itself was the port owner, but the reply always goes to the port owner.</source>
          <target state="translated">どのプロセスでも &lt;code&gt;Port ! {PortOwner, close}&lt;/code&gt; を使用してポートを閉じることができることに注意してください。{PortOwner、close}それ自体がポート所有者であるかのように動作しますが、応答は常にポート所有者に送信されます。</target>
        </trans-unit>
        <trans-unit id="d4cc8e9c5e1271318aa4ada63b47a96351832036" translate="yes" xml:space="preserve">
          <source>Notice that any process can send to a port using &lt;code&gt;Port ! {PortOwner, {command, Data}}&lt;/code&gt; as if it itself was the port owner.</source>
          <target state="translated">どのプロセスも &lt;code&gt;Port ! {PortOwner, {command, Data}}&lt;/code&gt; を使用してポートに送信できることに注意してください。{PortOwner、{command、Data}}それ自体がポート所有者であるかのように。</target>
        </trans-unit>
        <trans-unit id="1824595a1c80b7075f5376bc1cd1c936c8d424db" translate="yes" xml:space="preserve">
          <source>Notice that any process can set the port owner using &lt;code&gt;Port ! {PortOwner, {connect, Pid}}&lt;/code&gt; as if it itself was the port owner, but the reply always goes to the port owner.</source>
          <target state="translated">どのプロセスでも &lt;code&gt;Port ! {PortOwner, {connect, Pid}}&lt;/code&gt; を使用してポート所有者を設定できることに注意してください。{PortOwner、{connect、Pid}}それ自体がポート所有者であるかのように動作しますが、応答は常にポート所有者に送信されます。</target>
        </trans-unit>
        <trans-unit id="a98b3f3c42ef6f33bfe8a7e8fccfe1473542b5f7" translate="yes" xml:space="preserve">
          <source>Notice that any tuple stored in the table must have at least &lt;code&gt;Pos&lt;/code&gt; number of elements.</source>
          <target state="translated">テーブルに格納されているタプルには、少なくとも &lt;code&gt;Pos&lt;/code&gt; 個の要素が必要です。</target>
        </trans-unit>
        <trans-unit id="dd5de2485d7d394ae933d91e2e848ae72df0affa" translate="yes" xml:space="preserve">
          <source>Notice that as a driver binary is shared by the driver and the emulator. A binary received from the emulator or sent to the emulator must not be changed by the driver.</source>
          <target state="translated">ドライバとしてのバイナリは、ドライバとエミュレータで共有されていることに注意してください。エミュレータから受信したバイナリやエミュレータに送られたバイナリは、ドライバによって変更されてはいけません。</target>
        </trans-unit>
        <trans-unit id="f889fc9740aed7e3095d419001ad1fb0ce64b212" translate="yes" xml:space="preserve">
          <source>Notice that as this is &lt;code&gt;server_transfer/5&lt;/code&gt;, it is not the same as the previous function &lt;code&gt;server_transfer/4&lt;/code&gt;. Another &lt;code&gt;keysearch&lt;/code&gt; is done on &lt;code&gt;User_List&lt;/code&gt; to find the pid of the client corresponding to fred:</source>
          <target state="translated">これは &lt;code&gt;server_transfer/5&lt;/code&gt; であるため、前の関数 &lt;code&gt;server_transfer/4&lt;/code&gt; と同じではないことに注意してください。 &lt;code&gt;keysearch&lt;/code&gt; で別のキー検索を &lt;code&gt;User_List&lt;/code&gt; して、fredに対応するクライアントのpidを見つけます。</target>
        </trans-unit>
        <trans-unit id="8fe86ce5fa59a3562a829573aaf5b3dfd2379e17" translate="yes" xml:space="preserve">
          <source>Notice that bit string patterns cannot be nested.</source>
          <target state="translated">ビット文字列パターンは入れ子にできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="aa80432fca6a469445d85d7dfaebe88b1a98b7f2" translate="yes" xml:space="preserve">
          <source>Notice that by passing the &lt;code&gt;positive&lt;/code&gt; modifier you will get heap allocated integers (bignums) quicker.</source>
          <target state="translated">&lt;code&gt;positive&lt;/code&gt; 修飾子を渡すことにより、ヒープに割り当てられた整数（bignum）をより速く取得できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6a919935e37a99f7e411ad64d7426c9cc07d3818" translate="yes" xml:space="preserve">
          <source>Notice that calling (nesting) &lt;code&gt;mnesia:[a]sync_dirty&lt;/code&gt; inside a transaction-context inherits the transaction semantics.</source>
          <target state="translated">トランザクションコンテキスト内で &lt;code&gt;mnesia:[a]sync_dirty&lt;/code&gt; を呼び出す（ネストする）と、トランザクションセマンティクスが継承されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="28de43964f8d0b0f5ebe0eeea1c37e096ff9f1e4" translate="yes" xml:space="preserve">
          <source>Notice that calling (nesting) a &lt;code&gt;mnesia:ets&lt;/code&gt; inside a transaction-context inherits the transaction semantics.</source>
          <target state="translated">トランザクションコンテキスト内で &lt;code&gt;mnesia:ets&lt;/code&gt; を呼び出す（入れ子にする）と、トランザクションセマンティクスが継承されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ccdf30109e045224354b9a92051a3710e7da0269" translate="yes" xml:space="preserve">
          <source>Notice that calling &lt;code&gt;complex2:foo/1&lt;/code&gt; and &lt;code&gt;complex2:bar/1&lt;/code&gt; results in the tuple &lt;code&gt;{foo,X}&lt;/code&gt; or &lt;code&gt;{bar,Y}&lt;/code&gt; being sent to the &lt;code&gt;complex&lt;/code&gt; process, which codes them as binaries and sends them to the port. This means that the C program must be able to handle these two tuples.</source>
          <target state="translated">&lt;code&gt;complex2:foo/1&lt;/code&gt; および &lt;code&gt;complex2:bar/1&lt;/code&gt; を呼び出すと、タプル &lt;code&gt;{foo,X}&lt;/code&gt; または &lt;code&gt;{bar,Y}&lt;/code&gt; が &lt;code&gt;complex&lt;/code&gt; プロセスに送信され、バイナリとしてコード化してポートに送信することに注意してください。これは、Cプログラムがこれら2つのタプルを処理できる必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="f66f156315ef693448711da956208a1b9d370baa" translate="yes" xml:space="preserve">
          <source>Notice that calling this function when supervising many childrens under low memory conditions can cause an out of memory exception.</source>
          <target state="translated">メモリ不足の状態で多くの子供を監督しているときにこの関数を呼び出すと、メモリ切れの例外が発生することに注意してください。</target>
        </trans-unit>
        <trans-unit id="36d8020652ba123cb254176a43a2c994dabfe6c7" translate="yes" xml:space="preserve">
          <source>Notice that chunked encoding can add headers so that there are more headers in the &lt;code&gt;stream_end&lt;/code&gt; message than in &lt;code&gt;stream_start&lt;/code&gt;. When streaming to a file and the request is asynchronous, the message &lt;code&gt;{http, {RequestId, saved_to_file}}&lt;/code&gt; is sent.</source>
          <target state="translated">チャンクエンコーディングはヘッダーを追加できるため、 &lt;code&gt;stream_start&lt;/code&gt; メッセージよりも &lt;code&gt;stream_end&lt;/code&gt; メッセージに多くのヘッダーがあることに注意してください。ファイルにストリーミングし、リクエストが非同期の場合、メッセージ &lt;code&gt;{http, {RequestId, saved_to_file}}&lt;/code&gt; が送信されます。</target>
        </trans-unit>
        <trans-unit id="8eacfb231646f67a84dd48c38b3252b46ba678d6" translate="yes" xml:space="preserve">
          <source>Notice that currently &lt;code&gt;ordered_set&lt;/code&gt; is not supported for &lt;code&gt;disc_only_copies&lt;/code&gt; tables.</source>
          <target state="translated">現在、 &lt;code&gt;ordered_set&lt;/code&gt; は &lt;code&gt;disc_only_copies&lt;/code&gt; テーブルではサポートされていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="b6f86d7c1e62cac7ff19af2ed505338d552e40c3" translate="yes" xml:space="preserve">
          <source>Notice that currently &lt;code&gt;ordered_set&lt;/code&gt; is not supported for &lt;code&gt;disc_only_copies&lt;/code&gt;.</source>
          <target state="translated">現在、 &lt;code&gt;ordered_set&lt;/code&gt; はdisc_only_copiesではサポートされていないことに注意して &lt;code&gt;disc_only_copies&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1ba106fc749c03f0e8e929a856488e3fe0469ca" translate="yes" xml:space="preserve">
          <source>Notice that default option &lt;code&gt;{active, true}&lt;/code&gt; cannot be changed, for internal reasons.</source>
          <target state="translated">内部的な理由により、デフォルトのオプション &lt;code&gt;{active, true}&lt;/code&gt; は変更できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f9c5bb258ea4f52af5df09054ae473cf25538fc1" translate="yes" xml:space="preserve">
          <source>Notice that distribution sockets disable the use of &lt;code&gt;high_msgq_watermark&lt;/code&gt; and &lt;code&gt;low_msgq_watermark&lt;/code&gt;. Instead they use the &lt;code&gt;distribution buffer busy limit&lt;/code&gt;, which is a similar feature.</source>
          <target state="translated">配布ソケットは、 &lt;code&gt;high_msgq_watermark&lt;/code&gt; および &lt;code&gt;low_msgq_watermark&lt;/code&gt; の使用を無効にすることに注意してください。代わりに、同様の機能である &lt;code&gt;distribution buffer busy limit&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8e359baa81f7be3463d30d7e81f74f0d6daa7f44" translate="yes" xml:space="preserve">
          <source>Notice that distribution sockets disable the use of &lt;code&gt;high_msgq_watermark&lt;/code&gt; and &lt;code&gt;low_msgq_watermark&lt;/code&gt;. Instead use the &lt;code&gt;distribution buffer busy limit&lt;/code&gt;, which is a similar feature.</source>
          <target state="translated">配布ソケットは、 &lt;code&gt;high_msgq_watermark&lt;/code&gt; および &lt;code&gt;low_msgq_watermark&lt;/code&gt; の使用を無効にすることに注意してください。代わりに、同様の機能である &lt;code&gt;distribution buffer busy limit&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="8d5e701c93b303b29d937ac4bace336c512ed95b" translate="yes" xml:space="preserve">
          <source>Notice that each of the assertions is applied independently at the same point in the subject string. First there is a check that the previous three characters are all digits, and then there is a check that the same three characters are not &quot;999&quot;. This pattern does &lt;strong&gt;not&lt;/strong&gt; match &quot;foo&quot; preceded by six characters, the first of which are digits and the last three of which are not &quot;999&quot;. For example, it does not match &quot;123abcfoo&quot;. A pattern to do that is the following:</source>
          <target state="translated">各アサーションは、サブジェクト文字列の同じポイントで個別に適用されることに注意してください。まず、前の3文字がすべて数字であるかどうかのチェックがあり、次に同じ3文字が「999」でないことをチェックします。このパターンは、先頭に6文字が続く「foo」と一致しませ&lt;strong&gt;ん。&lt;/strong&gt;最初の文字は数字で、最後の3文字は「999」ではありません。たとえば、「123abcfoo」とは一致しません。これを行うパターンは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="c5c69517c533a13ffb06612150fd12d6557f1bab" translate="yes" xml:space="preserve">
          <source>Notice that emptying the call stack means that any surrounding &lt;code&gt;catch&lt;/code&gt; is removed and must be re-inserted after hibernation. One effect of this is that processes started using &lt;code&gt;proc_lib&lt;/code&gt; (also indirectly, such as &lt;code&gt;gen_server&lt;/code&gt; processes), are to use &lt;code&gt;proc_lib:hibernate/3&lt;/code&gt; instead, to ensure that the exception handler continues to work when the process wakes up.</source>
          <target state="translated">呼び出しスタックを空にすると、周囲の &lt;code&gt;catch&lt;/code&gt; がすべて削除され、休止後に再挿入する必要があることに注意してください。この1つの効果は、 &lt;code&gt;proc_lib&lt;/code&gt; を使用して開始されたプロセス（ &lt;code&gt;gen_server&lt;/code&gt; プロセスなど）が代わりに &lt;code&gt;proc_lib:hibernate/3&lt;/code&gt; を使用して、プロセスが起動したときに例外ハンドラーが引き続き機能することを保証することです。</target>
        </trans-unit>
        <trans-unit id="c5a1bb27af980314db81c1b30e32509a27fc50e5" translate="yes" xml:space="preserve">
          <source>Notice that error handling is omitted from the code:</source>
          <target state="translated">エラー処理が省略されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ac90f95ed355ecf5e134f5c94815fdaaf2216766" translate="yes" xml:space="preserve">
          <source>Notice that every guard test has the same source form as some expression, and is represented in the same way as the corresponding expression.</source>
          <target state="translated">すべてのガードテストは、いくつかの式と同じソースフォームを持ち、対応する式と同じ方法で表現されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="12ac9f06be5d0c942954f11af7bd16a9c92f71af" translate="yes" xml:space="preserve">
          <source>Notice that every pattern has the same source form as some expression, and is represented in the same way as the corresponding expression.</source>
          <target state="translated">すべてのパターンは、いくつかの式と同じソース形式を持ち、対応する式と同じように表現されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="22d44122084b22fa6c5e4d72f866f1a0cdc53879" translate="yes" xml:space="preserve">
          <source>Notice that for SCTP sockets this function returns only one of the socket addresses. Function &lt;code&gt;&lt;a href=&quot;#socknames-1&quot;&gt;socknames/1,2&lt;/a&gt;&lt;/code&gt; returns all.</source>
          <target state="translated">SCTPソケットの場合、この関数は1つのソケットアドレスのみを返すことに注意してください。関数 &lt;code&gt;&lt;a href=&quot;#socknames-1&quot;&gt;socknames/1,2&lt;/a&gt;&lt;/code&gt; はすべてを返します。</target>
        </trans-unit>
        <trans-unit id="3eea76ec53bc50101ada93a2881a73a66d999f61" translate="yes" xml:space="preserve">
          <source>Notice that for SCTP sockets, this function returns only one of the peer addresses of the socket. Function &lt;code&gt;&lt;a href=&quot;#peernames-1&quot;&gt;peernames/1,2&lt;/a&gt;&lt;/code&gt; returns all.</source>
          <target state="translated">SCTPソケットの場合、この関数はソケットのピアアドレスの1つだけを返すことに注意してください。関数 &lt;code&gt;&lt;a href=&quot;#peernames-1&quot;&gt;peernames/1,2&lt;/a&gt;&lt;/code&gt; はすべてを返します。</target>
        </trans-unit>
        <trans-unit id="8b549a78c27b0039d4ff0cb9fa34e52e88f8ae6e" translate="yes" xml:space="preserve">
          <source>Notice that for any other reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt;, the &lt;code&gt;gen_server&lt;/code&gt; process is assumed to terminate because of an error and an error report is issued using &lt;code&gt;logger(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 以外の理由で、 &lt;code&gt;gen_server&lt;/code&gt; プロセスはエラーが原因で終了すると想定され、 &lt;code&gt;logger(3)&lt;/code&gt; を使用してエラーレポートが発行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0f2fde3695426d831d6f9a88359f21930dd08692" translate="yes" xml:space="preserve">
          <source>Notice that for any other reason than &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;shutdown&lt;/code&gt;, or &lt;code&gt;{shutdown,Term}&lt;/code&gt;, the &lt;code&gt;gen_statem&lt;/code&gt; is assumed to terminate because of an error and an error report is issued using &lt;code&gt;logger(3)&lt;/code&gt;.</source>
          <target state="translated">以外の理由という通知 &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;shutdown&lt;/code&gt; 、または &lt;code&gt;{shutdown,Term}&lt;/code&gt; 、 &lt;code&gt;gen_statem&lt;/code&gt; がエラーのために終了するものとすると、エラー報告を使用して発行された &lt;code&gt;logger(3)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6c994ab42bf95f015c8131e40fece01289a1526" translate="yes" xml:space="preserve">
          <source>Notice that for best performance, &lt;code&gt;select&lt;/code&gt; is to be used before any modifying operations are done on that table in the same transaction. That is, do not use &lt;code&gt;mnesia:write&lt;/code&gt; or &lt;code&gt;mnesia:delete&lt;/code&gt; before a &lt;code&gt;mnesia:select&lt;/code&gt;. For efficiency, &lt;code&gt;NObjects&lt;/code&gt; is a recommendation only and the result can contain anything from an empty list to all available results.</source>
          <target state="translated">最良のパフォーマンスを得るには、同じトランザクションでそのテーブルに対して変更操作を行う前に、 &lt;code&gt;select&lt;/code&gt; を使用することに注意してください。つまり、 &lt;code&gt;mnesia:select&lt;/code&gt; の前に &lt;code&gt;mnesia:write&lt;/code&gt; または &lt;code&gt;mnesia:delete&lt;/code&gt; を使用しないでください。効率性のために、 &lt;code&gt;NObjects&lt;/code&gt; は推奨のみであり、結果には空のリストから使用可能なすべての結果までを含めることができます。</target>
        </trans-unit>
        <trans-unit id="575b65587388a5c28bf652744375022398c20ce2" translate="yes" xml:space="preserve">
          <source>Notice that for best performance, &lt;code&gt;select&lt;/code&gt; is to be used before any modifying operations are done on that table in the same transaction. That is, do not use &lt;code&gt;write&lt;/code&gt; or &lt;code&gt;delete&lt;/code&gt; before a &lt;code&gt;select&lt;/code&gt;.</source>
          <target state="translated">最良のパフォーマンスを得るには、同じトランザクションでそのテーブルに対して変更操作を行う前に、 &lt;code&gt;select&lt;/code&gt; を使用することに注意してください。つまり、 &lt;code&gt;select&lt;/code&gt; の前に &lt;code&gt;write&lt;/code&gt; または &lt;code&gt;delete&lt;/code&gt; を使用しないでください。</target>
        </trans-unit>
        <trans-unit id="a8e4ee50b8c86a9d97d28e810a76ef00e7ee22cf" translate="yes" xml:space="preserve">
          <source>Notice that for table type &lt;code&gt;ordered_set&lt;/code&gt;, &lt;code&gt;safe_fixtable/2&lt;/code&gt; is not necessary, as calls to &lt;code&gt;first/1&lt;/code&gt; and &lt;code&gt;next/2&lt;/code&gt; always succeed.</source>
          <target state="translated">テーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; の場合、 &lt;code&gt;first/1&lt;/code&gt; と &lt;code&gt;next/2&lt;/code&gt; への呼び出しは常に成功するため、 &lt;code&gt;safe_fixtable/2&lt;/code&gt; は不要です。</target>
        </trans-unit>
        <trans-unit id="fadf7fb473798e1c8fbe8d738e7d7fba94595b7d" translate="yes" xml:space="preserve">
          <source>Notice that for temporary children, the child specification is automatically deleted when the child terminates; thus, it is not possible to restart such children.</source>
          <target state="translated">一時的な子の場合、子の終了時に子の指定は自動的に削除されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b8f8d69fc55404a3f5202b0589ebb12fa1fbadb2" translate="yes" xml:space="preserve">
          <source>Notice that function &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt;casefold/1&lt;/a&gt;&lt;/code&gt; should be used when converting a string to be tested for equality.</source>
          <target state="translated">等しいかどうかをテストする文字列を変換するときは、関数 &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt;casefold/1&lt;/a&gt;&lt;/code&gt; を使用する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="405372cbb8689b7bb9d46fd60b33792430970cfc" translate="yes" xml:space="preserve">
          <source>Notice that function &lt;code&gt;&lt;a href=&quot;ttb#start_trace-4&quot;&gt;ttb:start_trace/4&lt;/a&gt;&lt;/code&gt; can be used as help as follows:</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;ttb#start_trace-4&quot;&gt;ttb:start_trace/4&lt;/a&gt;&lt;/code&gt; は、次のようにヘルプとして使用できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="de0bcaa7532bb6bae36e73c3763ba087654d90d2" translate="yes" xml:space="preserve">
          <source>Notice that functions &lt;code&gt;chunk/2,3&lt;/code&gt;, &lt;code&gt;bchunk/2,3&lt;/code&gt;, and &lt;code&gt;chunk_step/3&lt;/code&gt; do not affect any value returned by &lt;code&gt;info/1&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;chunk/2,3&lt;/code&gt; 、 &lt;code&gt;bchunk/2,3&lt;/code&gt; 、および &lt;code&gt;chunk_step/3&lt;/code&gt; は、 &lt;code&gt;info/1&lt;/code&gt; によって返される値に影響を与えないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="da3a6b0a2ad8ae3b2ff383a08f0cdcfac8ef3282" translate="yes" xml:space="preserve">
          <source>Notice that if &lt;code&gt;init_per_suite&lt;/code&gt; and &lt;code&gt;end_per_suite&lt;/code&gt; do not exist in the suite, &lt;code&gt;Common Test&lt;/code&gt; calls dummy functions (with the same names) instead, so that output generated by hook functions can be saved to the log files for these dummies. For details, see &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#manipulating&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">お知らせ場合という &lt;code&gt;init_per_suite&lt;/code&gt; とは &lt;code&gt;end_per_suite&lt;/code&gt; スイートには存在しない、 &lt;code&gt;Common Test&lt;/code&gt; フック関数によって生成される出力はこれらのダミー用のログファイルに保存することができますので、代わりに（同じ名前の）ダミーの関数を呼び出します。詳細については、「 &lt;code&gt;&lt;a href=&quot;ct_hooks_chapter#manipulating&quot;&gt;Common Test Hooks&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="aee52a26c1c7778ed0141e880006af8c079abe71" translate="yes" xml:space="preserve">
          <source>Notice that if &lt;code&gt;parallel_login&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, only one client at a time can be in the authentication phase.</source>
          <target state="translated">&lt;code&gt;parallel_login&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、一度に1つのクライアントのみが認証フェーズに入ることができることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e2ae74861195afaaaecbb5004aa3195b54b0af5d" translate="yes" xml:space="preserve">
          <source>Notice that if a &quot;technically built in function&quot; (that is, a function not written in Erlang) is traced, the &lt;code&gt;caller&lt;/code&gt; function sometimes returns the atom &lt;code&gt;undefined&lt;/code&gt;. The calling Erlang function is not available during such calls.</source>
          <target state="translated">「技術的に組み込まれた関数」（つまり、Erlangで記述されていない関数）がトレースされると、 &lt;code&gt;caller&lt;/code&gt; 関数がアトム &lt;code&gt;undefined&lt;/code&gt; を返すことがあります。そのような呼び出しの間は、Erlang関数を呼び出すことはできません。</target>
        </trans-unit>
        <trans-unit id="f92e3c3fb0383592cf170b7659be5a996f925ab5" translate="yes" xml:space="preserve">
          <source>Notice that if changing the configuration of the handler in runtime, the &lt;code&gt;type&lt;/code&gt; parameter must not be modified.</source>
          <target state="translated">実行時にハンドラーの構成を変更する場合は、 &lt;code&gt;type&lt;/code&gt; パラメーターを変更しないでください。</target>
        </trans-unit>
        <trans-unit id="08ce68141a0a8640f5e5838bc1d59c39e01b55c0" translate="yes" xml:space="preserve">
          <source>Notice that if option &lt;code&gt;delayed_write&lt;/code&gt; was used when opening the file, &lt;code&gt;close/1&lt;/code&gt; can return an old write error and not even try to close the file. See &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルを開くときにオプション &lt;code&gt;delayed_write&lt;/code&gt; が使用された場合、 &lt;code&gt;close/1&lt;/code&gt; は古い書き込みエラーを返し、ファイルを閉じようとしないこともあります。 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f698c6b4cd9ababf8d72ba0d6e493d5ad2e7229c" translate="yes" xml:space="preserve">
          <source>Notice that if the files &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; and &lt;code&gt;syslog.conf.OTP&lt;/code&gt; are not in directory &lt;code&gt;/etc&lt;/code&gt;, the file path in the second and third command must be modified.</source>
          <target state="translated">&lt;code&gt;syslog.conf.ORIG&lt;/code&gt; および &lt;code&gt;syslog.conf.OTP&lt;/code&gt; ファイルがディレクトリ &lt;code&gt;/etc&lt;/code&gt; にない場合、2番目と3番目のコマンドのファイルパスを変更する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="245b52374d4b97b1ff0d2029d95aaa06dad4396b" translate="yes" xml:space="preserve">
          <source>Notice that if the original property term is to be preserved in the result when expanded, it must be included in the expansion list. The inserted terms are not expanded recursively. If &lt;code&gt;Expansions&lt;/code&gt; contains more than one property with the same key, only the first occurrence is used.</source>
          <target state="translated">元のプロパティ項を展開したときに結果に保持される場合は、展開リストに含める必要があることに注意してください。挿入された用語は再帰的に展開されません。 &lt;code&gt;Expansions&lt;/code&gt; に同じキーを持つ複数のプロパティが含まれている場合、最初のオカレンスのみが使用されます。</target>
        </trans-unit>
        <trans-unit id="bc08705bf71174fc6daf6d3117f962a241235e84" translate="yes" xml:space="preserve">
          <source>Notice that if you restore to a non-empty registry, objects in the table overwrite objects in the registry with the same keys. Also, the &lt;strong&gt;entire&lt;/strong&gt; contents of the registry is marked as unmodified after the restore, including any modified objects that were not overwritten by the restore operation. This may not be your intention.</source>
          <target state="translated">空でないレジストリに復元すると、テーブル内のオブジェクトが同じキーを持つレジストリ内のオブジェクトを上書きすることに注意してください。また、復元操作によって上書きされなかった変更されたオブジェクトを含む、レジストリの内容&lt;strong&gt;全体&lt;/strong&gt;が復元後に変更されていないものとしてマークされます。これはあなたの意図ではないかもしれません。</target>
        </trans-unit>
        <trans-unit id="aef1c34d22b7f466e6132c1e85ef582f650007b8" translate="yes" xml:space="preserve">
          <source>Notice that if you store binary objects that are context-dependent (for example, containing pointers or open file descriptors), they lose their meaning if they are backed up to a &lt;code&gt;Mnesia&lt;/code&gt; table and later restored in a different context.</source>
          <target state="translated">コンテキスト依存のバイナリオブジェクト（たとえば、ポインタや開いているファイル記述子を含む）を格納する場合、それらが &lt;code&gt;Mnesia&lt;/code&gt; テーブルにバックアップされ、後で別のコンテキストで復元されると、意味が失われます。</target>
        </trans-unit>
        <trans-unit id="c04eebf0253a2b09b02af48ec92f831c4ed73813" translate="yes" xml:space="preserve">
          <source>Notice that ignoring the return value from this function would result in an &lt;strong&gt;unreliable&lt;/strong&gt; message passing, which is contradictory to the Erlang programming model. The message is &lt;strong&gt;not&lt;/strong&gt; sent if this function returns &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">この関数からの戻り値を無視すると、メッセージの受け渡しが&lt;strong&gt;不安定に&lt;/strong&gt;なり、Erlangプログラミングモデルとは矛盾することに注意してください。この関数が &lt;code&gt;false&lt;/code&gt; を返す場合、メッセージは送信され&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8e0a7d0fec338c74c62f26d54f900722acf0e30d" translate="yes" xml:space="preserve">
          <source>Notice that in &lt;code&gt;ordered_set&lt;/code&gt; tables, the records are ordered per fragment, and the order is undefined in results returned by &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;match_object&lt;/code&gt;, as well as &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt;, &lt;code&gt;prev&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ordered_set&lt;/code&gt; テーブルでは、レコードはフラグメントごとに並べられており、 &lt;code&gt;select&lt;/code&gt; と &lt;code&gt;match_object&lt;/code&gt; 、 &lt;code&gt;first&lt;/code&gt; 、 &lt;code&gt;next&lt;/code&gt; 、 &lt;code&gt;prev&lt;/code&gt; 、および &lt;code&gt;last&lt;/code&gt; によって返される結果では順序が定義されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="e87353c4be156a71ce7f89688b213b459834c505" translate="yes" xml:space="preserve">
          <source>Notice that in some cases, standard output of a command when called from another program (for example, &lt;code&gt;os:cmd/1&lt;/code&gt;) can differ, compared with the standard output of the command when called directly from an OS command shell.</source>
          <target state="translated">OSコマンドシェルから直接呼び出されたときのコマンドの標準出力と比較して、別のプログラム（ &lt;code&gt;os:cmd/1&lt;/code&gt; など）から呼び出されたときのコマンドの標準出力が異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3295423e0e8171c99eb1e9345ef25427a5a63801" translate="yes" xml:space="preserve">
          <source>Notice that in this unanchored example, the mark is retained from the match attempt that started at letter &quot;X&quot; in the subject. Subsequent match attempts starting at &quot;P&quot; and then with an empty string do not get as far as the (*MARK) item, nevertheless do not reset it.</source>
          <target state="translated">このアンカーなしの例では、件名の文字 &quot;X&quot; で始まったマッチ試行からマークが保持されていることに注意してください。P&quot; で始まり、空の文字列で始まるそれ以降の一致試行では、(*MARK)項目までは到達しませんが、それにもかかわらず、それはリセットされません。</target>
        </trans-unit>
        <trans-unit id="9cc48f18a5b25966f4b54af3d4aabec2ba6f3d99" translate="yes" xml:space="preserve">
          <source>Notice that it did not write &quot;hello&quot; three times and then &quot;goodbye&quot; three times. Instead, the first process wrote a &quot;hello&quot;, the second a &quot;goodbye&quot;, the first another &quot;hello&quot; and so forth. But where did the &amp;lt;0.63.0&amp;gt; come from? The return value of a function is the return value of the last &quot;thing&quot; in the function. The last thing in the function &lt;code&gt;start&lt;/code&gt; is</source>
          <target state="translated">「こんにちは」を3回書いておらず、「さようなら」を3回書いていないことに注意してください。代わりに、最初のプロセスは「hello」、2番目のプロセスは「さようなら」、最初のプロセスは「hello」などと書きました。しかし、&amp;lt;0.63.0&amp;gt;はどこから来たのですか？関数の戻り値は、関数の最後の「もの」の戻り値です。関数 &lt;code&gt;start&lt;/code&gt; の最後のものは</target>
        </trans-unit>
        <trans-unit id="cf4175703ac6e9fdbe15e5acca7f10693ec63c07" translate="yes" xml:space="preserve">
          <source>Notice that it is also required to expand the &lt;code&gt;-export&lt;/code&gt; line with the information that there is another function &lt;code&gt;mult&lt;/code&gt; with two arguments.</source>
          <target state="translated">&lt;code&gt;-export&lt;/code&gt; 行を拡張して、2つの引数を持つ別の関数 &lt;code&gt;mult&lt;/code&gt; があるという情報も必要になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a1a5ba2084c75a9789fb8664c66476603427348b" translate="yes" xml:space="preserve">
          <source>Notice that it is always the &lt;code&gt;merge_tests&lt;/code&gt; setting in the source specification that is used when joined with other specifications. Say, for example, that a source specification A, with tests TA1 and TA2, has &lt;code&gt;{merge_tests,false}&lt;/code&gt; set, and that it includes another specification, B, with tests TB1 and TB2, that has &lt;code&gt;{merge_tests,true}&lt;/code&gt; set. The result is that the test series &lt;code&gt;TA1,TA2,merge(TB1,TB2)&lt;/code&gt; is executed. The opposite &lt;code&gt;merge_tests&lt;/code&gt; settings would result in the test series &lt;code&gt;merge(merge(TA1,TA2),TB1,TB2)&lt;/code&gt;.</source>
          <target state="translated">他の仕様と結合するときに使用されるのは、常にソース仕様の &lt;code&gt;merge_tests&lt;/code&gt; 設定であることに注意してください。たとえば、テスト仕様TA1およびTA2を持つソース仕様Aに &lt;code&gt;{merge_tests,false}&lt;/code&gt; 設定されており、テスト仕様TB1およびTB2を持つ &lt;code&gt;{merge_tests,true}&lt;/code&gt; 設定された仕様Bが含まれているとします。その結果、一連のテスト &lt;code&gt;TA1,TA2,merge(TB1,TB2)&lt;/code&gt; が実行されます。逆の &lt;code&gt;merge_tests&lt;/code&gt; 設定は、テストシリーズ &lt;code&gt;merge(merge(TA1,TA2),TB1,TB2)&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="24bcac8813bad82252a8da44008063c6a9939ca8" translate="yes" xml:space="preserve">
          <source>Notice that it is more than ten times more efficient to read records dirty than within a transaction.</source>
          <target state="translated">トランザクション内よりも、汚れたレコードを読む方が10倍以上効率的であることに注目してください。</target>
        </trans-unit>
        <trans-unit id="5fc580601d400a238482271cf80a8768aa43f791" translate="yes" xml:space="preserve">
          <source>Notice that it is normally the set of auto-imported BIFs that are referred to when talking about 'BIFs'.</source>
          <target state="translated">BIFs」について話すときに参照されるのは、通常は自動インポートされたBIFのセットであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f48367941ecb417ce39721c36cb2f46ca431113b" translate="yes" xml:space="preserve">
          <source>Notice that it is up to the runtime system to determine if and how to use this information. Implementations on some platforms can use other means to determine consumed CPU time. Lengthy NIFs should regardless of this frequently call &lt;code&gt;enif_consume_timeslice&lt;/code&gt; to determine if it is allowed to continue execution.</source>
          <target state="translated">この情報を使用するかどうか、および使用する方法を決定するのはランタイムシステム次第であることに注意してください。一部のプラットフォームの実装では、他の手段を使用して、消費されたCPU時間を判別できます。長いNIFは、これに関係なく、 &lt;code&gt;enif_consume_timeslice&lt;/code&gt; を頻繁に呼び出して、実行の継続が許可されているかどうかを判断します。</target>
        </trans-unit>
        <trans-unit id="ab3955ab8e83d7f2bb7bc498f1bd619814955ca0" translate="yes" xml:space="preserve">
          <source>Notice that it is up to the runtime system to determine if and how to use this information. Implementations on some platforms can use other means to determine the consumed fraction of the time-slice. Lengthy driver callbacks should, regardless of this, frequently call this function to determine if it is allowed to continue execution or not.</source>
          <target state="translated">この情報を使用するかどうか、どのように使用するかはランタイムシステム次第であることに注意してください。いくつかのプラットフォーム上の実装では、タイムスライスの消費された分数を決定するために他の手段を使用することができます。長いドライバのコールバックは、これに関係なく、頻繁にこの関数を呼び出して実行の継続が許可されているかどうかを判断しなければなりません。</target>
        </trans-unit>
        <trans-unit id="0e2ef46263bde688553324aea18d9c6d620ba48f" translate="yes" xml:space="preserve">
          <source>Notice that lists are encoded as strings if they consist entirely of integers in the range 0..255. This function do not decode such strings, use &lt;code&gt;ei_decode_string()&lt;/code&gt; instead.</source>
          <target state="translated">リストが完全に0..255の範囲の整数で構成されている場合、リストは文字列としてエンコードされることに注意してください。この関数はそのような文字列をデコードしません。代わりに &lt;code&gt;ei_decode_string()&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="c29a9c8eeda96edcc7c5ce99dcb3efa7b2a52727" translate="yes" xml:space="preserve">
          <source>Notice that message &lt;code&gt;trace_delivered&lt;/code&gt; does &lt;strong&gt;not&lt;/strong&gt; imply that trace messages have been delivered. Instead it implies that all trace messages that &lt;strong&gt;are to be delivered&lt;/strong&gt; have been delivered. It is not an error if &lt;code&gt;Tracee&lt;/code&gt; is not, and has not been traced by someone, but if this is the case, &lt;strong&gt;no&lt;/strong&gt; trace messages have been delivered when the &lt;code&gt;trace_delivered&lt;/code&gt; message arrives.</source>
          <target state="translated">メッセージ &lt;code&gt;trace_delivered&lt;/code&gt; は、トレースメッセージが配信されたことを意味し&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。代わりに、&lt;strong&gt;配信される&lt;/strong&gt;すべてのトレースメッセージ&lt;strong&gt;が配信された&lt;/strong&gt;ことを意味します。 &lt;code&gt;Tracee&lt;/code&gt; がトレースされておらず、トレースされていない場合はエラーではありませんが、この場合、 &lt;code&gt;trace_delivered&lt;/code&gt; メッセージが到着したときにトレースメッセージが配信されてい&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="013198e22f586360fbbdabe6dcc8ff964ca7ded8" translate="yes" xml:space="preserve">
          <source>Notice that most type test BIFs have older equivalents, without the &lt;code&gt;is_&lt;/code&gt; prefix. These old BIFs are retained for backwards compatibility only and are not to be used in new code. They are also only allowed at top level. For example, they are not allowed in Boolean expressions in guards.</source>
          <target state="translated">ほとんどの型テスト &lt;code&gt;is_&lt;/code&gt; は、is_接頭辞なしの同等の古いバージョンがあることに注意してください。これらの古いBIFは、下位互換性のためにのみ保持されており、新しいコードでは使用されません。また、トップレベルでのみ許可されています。たとえば、ガードのブール式では使用できません。</target>
        </trans-unit>
        <trans-unit id="d8a03c035117d8088ab8da75706b1955d4613585" translate="yes" xml:space="preserve">
          <source>Notice that multiple &quot;*&quot; characters are allowed (as in Unix wildcards, but opposed to Windows/DOS wildcards).</source>
          <target state="translated">複数の &quot;*&quot; 文字が許されていることに注意してください (Unix ワイルドカードのように、Windows/DOS ワイルドカードとは対照的です)。</target>
        </trans-unit>
        <trans-unit id="54221071699f0442ffc1867adb1c29b6517f290f" translate="yes" xml:space="preserve">
          <source>Notice that negative integer and float literals do not occur as such; they are parsed as an application of the unary negation operator.</source>
          <target state="translated">負の整数リテラルや浮動小数点リテラルはそのようには発生しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="f22111bba803b0601fab83f0c4714a0a75aa87f8" translate="yes" xml:space="preserve">
          <source>Notice that no bounds checking is done on the buffer. It is the caller's responsibility to ensure that the buffer is large enough to hold the encoded terms. You can either use a static buffer that is large enough to hold the terms you expect to need in your program, or use &lt;code&gt;erl_term_len()&lt;/code&gt; to determine the exact requirements for a given term.</source>
          <target state="translated">境界チェックはバッファで行われないことに注意してください。バッファーがエンコードされた用語を保持するのに十分な大きさであることを確認するのは呼び出し側の責任です。プログラムで必要になると &lt;code&gt;erl_term_len()&lt;/code&gt; れる用語を保持するのに十分な大きさの静的バッファーを使用するか、またはerl_term_len（）を使用して特定の用語の正確な要件を判別できます。</target>
        </trans-unit>
        <trans-unit id="68f6c800f695bdd5313479dc773780ed9ac1eaba" translate="yes" xml:space="preserve">
          <source>Notice that no deleted objects are removed from a fixed table until it has been released. If a process fixes a table but never releases it, the memory used by the deleted objects is never freed. The performance of operations on the table also degrades significantly.</source>
          <target state="translated">固定されたテーブルが解放されるまで、削除されたオブジェクトは削除されないことに注意してください。プロセスがテーブルを固定しても解放しない場合、削除されたオブジェクトが使用していたメモリは解放されません。テーブルに対する操作のパフォーマンスも大きく低下します。</target>
        </trans-unit>
        <trans-unit id="27077c84801a08f27f5df1e48d210573f24a2d7b" translate="yes" xml:space="preserve">
          <source>Notice that no disc operations are performed when a program executes write operations to these replicas. However, if permanent RAM replicas are required, the following alternatives are available:</source>
          <target state="translated">プログラムがこれらのレプリカへの書き込み操作を実行しても、ディスク操作は行われないことに注意してください。ただし、恒久的な RAM レプリカが必要な場合は、以下の選択肢があります。</target>
        </trans-unit>
        <trans-unit id="0a597a819e1aa34d827c71c03375ea201eae9bbe" translate="yes" xml:space="preserve">
          <source>Notice that not all implementations support all these &lt;code&gt;Item&lt;/code&gt;s.</source>
          <target state="translated">すべての実装がこれらのすべての &lt;code&gt;Item&lt;/code&gt; をサポートしているわけではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="4b0bf74963177cf020fa41c6b9891ab9f9dfa55b" translate="yes" xml:space="preserve">
          <source>Notice that octal values &amp;gt;= 100 that are specified using this syntax must not be introduced by a leading zero, as no more than three octal digits are ever read.</source>
          <target state="translated">この構文を使用して指定された100以上の8進値は、3桁以下の8進数字が読み取られるため、先頭にゼロを付けないでください。</target>
        </trans-unit>
        <trans-unit id="52b3caa006e96a4c992643ceef9a790dd9eaf91b" translate="yes" xml:space="preserve">
          <source>Notice that offsets are counted in bytes, not in characters. If the file is opened using some other &lt;code&gt;encoding&lt;/code&gt; than &lt;code&gt;latin1&lt;/code&gt;, one byte does not correspond to one character. Positioning in such a file can only be done to known character boundaries. That is, to a position earlier retrieved by getting a current position, to the beginning/end of the file or to some other position &lt;strong&gt;known&lt;/strong&gt; to be on a correct character boundary by some other means (typically beyond a byte order mark in the file, which has a known byte-size).</source>
          <target state="translated">オフセットは文字ではなくバイトでカウントされることに注意してください。ファイルは、他のいくつかの使用して開かれている場合 &lt;code&gt;encoding&lt;/code&gt; より &lt;code&gt;latin1&lt;/code&gt; 、1つのバイトが1つの文字に対応していません。そのようなファイルでの位置付けは、既知の文字境界に対してのみ実行できます。つまり、現在の位置を取得することで以前に取得した位置、ファイルの先頭/末尾、または他の方法で正しい文字境界にあることが&lt;strong&gt;わかっ&lt;/strong&gt;ている他の位置（通常、ファイル内のバイトオーダーマークを超える）既知のバイトサイズがあります）。</target>
        </trans-unit>
        <trans-unit id="bf27ace1c7a3c2d0e720b1879eb1095858231ab1" translate="yes" xml:space="preserve">
          <source>Notice that on Windows, this flag is only applicable for &lt;code&gt;werl&lt;/code&gt;, not &lt;code&gt;erl&lt;/code&gt; (&lt;code&gt;oldshell&lt;/code&gt;). Notice also that &lt;code&gt;Ctrl-Break&lt;/code&gt; is used instead of &lt;code&gt;Ctrl-C&lt;/code&gt; on Windows.</source>
          <target state="translated">Windowsでは、このフラグは &lt;code&gt;werl&lt;/code&gt; にのみ適用され、 &lt;code&gt;erl&lt;/code&gt; （ &lt;code&gt;oldshell&lt;/code&gt; ）には適用されないことに注意してください。Windowsでは &lt;code&gt;Ctrl-C&lt;/code&gt; の代わりに &lt;code&gt;Ctrl-Break&lt;/code&gt; が使用されることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="32a6701d594a7f27b24d59d66fe69bc778606ca3" translate="yes" xml:space="preserve">
          <source>Notice that on some systems (such as VxWorks), a failed node is not detected by this mechanism, as the operating system does not automatically close descriptors that were left open when the node failed. If a node has failed in this way, &lt;code&gt;epmd&lt;/code&gt; prevents you from registering a new node with the old name, as it thinks that the old name is still in use. In this case, you must unregister the name explicitly:</source>
          <target state="translated">一部のシステム（VxWorksなど）では、ノードに障害が発生したときにオペレーティングシステムが開いたままの記述子を自動的に閉じないため、障害が発生したノードはこのメカニズムによって検出されません。この方法でノードに &lt;code&gt;epmd&lt;/code&gt; が発生した場合、古い名前がまだ使用されていると見なされるため、epmdは古い名前で新しいノードを登録できないようにします。この場合、名前を明示的に登録解除する必要があります。</target>
        </trans-unit>
        <trans-unit id="43e1e5b7dc6da1a31388b14df1d6f6d64c3c0721" translate="yes" xml:space="preserve">
          <source>Notice that once &lt;code&gt;enif_make_resource&lt;/code&gt; creates the term to return to Erlang, the code can choose to either keep its own native pointer to the allocated struct and release it later, or release it immediately and rely only on the garbage collector to deallocate the resource object eventually when it collects the term.</source>
          <target state="translated">一度ことをお知らせ &lt;code&gt;enif_make_resource&lt;/code&gt; はアーランに戻るには用語を作成し、最終的に、コードはどちらかに選択することができます割り当てられた構造体に独自のネイティブポインタを保持し、後でそれを解放、またはすぐにそれを解放し、リソースオブジェクトを解放する唯一のガベージコレクタに依存しています用語を集めます。</target>
        </trans-unit>
        <trans-unit id="c711aa1c3890b7bd6065da8da6bc10f65058ad93" translate="yes" xml:space="preserve">
          <source>Notice that only nodes with disc are to be included in &lt;code&gt;DiscNodes&lt;/code&gt;. Disc-less nodes, that is, nodes where all tables including the schema only resides in RAM, must not be included.</source>
          <target state="translated">&lt;code&gt;DiscNodes&lt;/code&gt; には、ディスクを持つノードのみが含まれることに注意してください。ディスクなしのノード、つまりスキーマを含むすべてのテーブルがRAMにのみ存在するノードは含めないでください。</target>
        </trans-unit>
        <trans-unit id="67651cee75d5ac445a33e918dbfa7e4e883f716f" translate="yes" xml:space="preserve">
          <source>Notice that only one timer exists on each driver instance; setting a new timer replaces an older one.</source>
          <target state="translated">各ドライバインスタンスには 1 つのタイマしか存在しないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="29d795d009d1ea7a8a290d1e73a04d2744f2a646" translate="yes" xml:space="preserve">
          <source>Notice that only schedulers online can be bound to logical processors.</source>
          <target state="translated">論理プロセッサにバインドできるのはオンラインのスケジューラだけであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f799abe642c8ae36124dcf7f5ee9ae1710bfa1f7" translate="yes" xml:space="preserve">
          <source>Notice that only tables of a certain format can be restored, that is, those that have been created and backed up to with &lt;code&gt;ei_reg_dump()&lt;/code&gt;. If the registry was not empty before the operation, the contents of the table are added to the contents of the registry. If the table contains objects with the same keys as those already in the registry, the registry objects are overwritten with the new values. If the registry contains objects that were not in the table, they are unchanged by this operation.</source>
          <target state="translated">特定の形式のテーブル、つまり &lt;code&gt;ei_reg_dump()&lt;/code&gt; で作成およびバックアップされたテーブルのみを復元できることに注意してください。操作の前にレジストリが空でなかった場合、テーブルの内容がレジストリの内容に追加されます。テーブルに、既にレジストリにあるものと同じキーを持つオブジェクトが含まれている場合、レジストリオブジェクトは新しい値で上書きされます。レジストリにテーブルになかったオブジェクトが含まれている場合、それらはこの操作によって変更されません。</target>
        </trans-unit>
        <trans-unit id="23b04cc5100e31a53261bbb900a051cd16d9ea99" translate="yes" xml:space="preserve">
          <source>Notice that only the channel is closed. The connection is still up and can handle other channels:</source>
          <target state="translated">チャンネルだけが閉じられていることに注意してください。接続はまだ立ち上がっており、他のチャンネルを扱うことができます。</target>
        </trans-unit>
        <trans-unit id="b15082a81f1a1a6e64b2d55298a12d9faa42eee1" translate="yes" xml:space="preserve">
          <source>Notice that only the lexicographical SNMP ordering is implemented in Mnesia, not the actual SNMP monitoring.</source>
          <target state="translated">Mnesiaでは、辞書的SNMPの順序付けのみが実装されており、実際のSNMP監視は行われていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="a5838dc3537f85f38eb4149ebbfa4d4cafe73f75" translate="yes" xml:space="preserve">
          <source>Notice that parameter &lt;code&gt;Assoc&lt;/code&gt; is by the &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;SCTP Sockets API Extensions&lt;/a&gt;&lt;/code&gt; defined to be ignored for one-to-one style sockets. For one-to-many style sockets, the special value &lt;code&gt;0&lt;/code&gt; is defined to mean that the returned addresses must be without any particular association. How different SCTP implementations interpret this varies somewhat.</source>
          <target state="translated">パラメータ &lt;code&gt;Assoc&lt;/code&gt; は、1対1スタイルのソケットでは無視されるように定義された &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;SCTP Sockets API Extensions&lt;/a&gt;&lt;/code&gt; によるものであることに注意してください。1対多スタイルのソケットの場合、特別な値 &lt;code&gt;0&lt;/code&gt; が定義されており、返されるアドレスには特定の関連付けがない必要があります。さまざまなSCTP実装がこれを解釈する方法は多少異なります。</target>
        </trans-unit>
        <trans-unit id="d0d1f865bec9fd2105dd8d15020f4e5d9157f2b3" translate="yes" xml:space="preserve">
          <source>Notice that parameter &lt;code&gt;Assoc&lt;/code&gt; is by the &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;SCTP Sockets API Extensions&lt;/a&gt;&lt;/code&gt; defined to be ignored for one-to-one style sockets. What the special value &lt;code&gt;0&lt;/code&gt; means, hence its behavior for one-to-many style sockets, is unfortunately undefined.</source>
          <target state="translated">パラメータ &lt;code&gt;Assoc&lt;/code&gt; は、1対1スタイルのソケットでは無視されるように定義された &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;SCTP Sockets API Extensions&lt;/a&gt;&lt;/code&gt; によるものであることに注意してください。特別な値 &lt;code&gt;0&lt;/code&gt; の意味、つまり、1対多スタイルのソケットの動作は、残念ながら未定義です。</target>
        </trans-unit>
        <trans-unit id="4ced3b5e4f7be44b8431fee61dd5559644b2a227" translate="yes" xml:space="preserve">
          <source>Notice that postponing buttons from the &lt;code&gt;open&lt;/code&gt; state to the &lt;code&gt;locked&lt;/code&gt; state feels like a strange thing to do for a code lock, but it at least illustrates event postponing.</source>
          <target state="translated">&lt;code&gt;open&lt;/code&gt; 状態から &lt;code&gt;locked&lt;/code&gt; 状態にボタンを延期することは、コードロックに対して行うのは奇妙なことのように思えますが、少なくともイベントの延期を示していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1c4f96f83f897de68ba3692f859901f16bc8520d" translate="yes" xml:space="preserve">
          <source>Notice that purging the code means that any processes lingering in old code for the module are killed without warning. For more information, see &lt;code&gt;code/3&lt;/code&gt;.</source>
          <target state="translated">コードをパージすると、モジュールの古いコードに残っているプロセスは警告なしに強制終了されることに注意してください。詳細については、 &lt;code&gt;code/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c423ca269e9c8da0681587c3e65b43e4f6fcac32" translate="yes" xml:space="preserve">
          <source>Notice that relaxed command checking must enabled for the &lt;code&gt;epmd&lt;/code&gt; daemon contacted. When running &lt;code&gt;epmd&lt;/code&gt; interactively, &lt;code&gt;-relaxed_command_check&lt;/code&gt; has no effect.</source>
          <target state="translated">接続された &lt;code&gt;epmd&lt;/code&gt; デーモンに対して、緩和されたコマンドチェックを有効にする必要があることに注意してください。 &lt;code&gt;epmd&lt;/code&gt; を対話的に実行する場合、 &lt;code&gt;-relaxed_command_check&lt;/code&gt; は効果がありません。</target>
        </trans-unit>
        <trans-unit id="c9c86576f8186edb080a192562941feff98f7212" translate="yes" xml:space="preserve">
          <source>Notice that request for multiple parts of a document report a size of zero to the log file.</source>
          <target state="translated">文書の複数の部分を要求すると、ログファイルにサイズがゼロであることを報告することに注意してください。</target>
        </trans-unit>
        <trans-unit id="4443c6286a90c15343a889185dfe1fff15bfc5fd" translate="yes" xml:space="preserve">
          <source>Notice that settings saved by Erlang/OTP R16B01 or later cannot be read by Erlang/OTP R16B or earlier.</source>
          <target state="translated">Erlang/OTP R16B01以降で保存された設定はErlang/OTP R16B以前では読み込めないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="649ed4989f050a560c2834e24c160ce1f14f0aab" translate="yes" xml:space="preserve">
          <source>Notice that since variables starting with an underscore are not anonymous, this matches:</source>
          <target state="translated">アンダースコアで始まる変数は匿名ではないので、これは一致することに注意してください。</target>
        </trans-unit>
        <trans-unit id="d7a8cf550209c24a879718ffa59fcc7fbdaebab0" translate="yes" xml:space="preserve">
          <source>Notice that some system-internal events can also be received. Therefore a catch-all clause last in the definition of the event handler callback function &lt;code&gt;Module:handle_event/2&lt;/code&gt; is necessary. This also applies for &lt;code&gt;Module:handle_info/2&lt;/code&gt;, as the event handler must also take care of some system-internal messages.</source>
          <target state="translated">一部のシステム内部イベントも受信できることに注意してください。したがって、イベントハンドラコールバック関数 &lt;code&gt;Module:handle_event/2&lt;/code&gt; の定義の最後にあるcatch-all句が必要です。これは &lt;code&gt;Module:handle_info/2&lt;/code&gt; にも適用されます。これは、イベントハンドラーが一部のシステム内部メッセージも処理する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="4523f125f7da0a280c62ef57a22e6c4002553475" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;bin_opt_info&lt;/code&gt; is not meant to be a permanent option added to your &lt;code&gt;Makefile&lt;/code&gt;s, because all messages that it generates cannot be eliminated. Therefore, passing the option through the environment is in most cases the most practical approach.</source>
          <target state="translated">&lt;code&gt;bin_opt_info&lt;/code&gt; は、 &lt;code&gt;Makefile&lt;/code&gt; に追加される永続的なオプションではないことに注意してください。生成されるすべてのメッセージは削除できないためです。したがって、オプションを環境に渡すことは、ほとんどの場合、最も実用的なアプローチです。</target>
        </trans-unit>
        <trans-unit id="9f25de8ce6849112886fde44cc358ca27b801415" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;get_until&lt;/code&gt; request allows for a function with the data specified as always being a list. Also, the return value data from such a function can be of any type (as is indeed the case when an &lt;code&gt;io:fread/2,3&lt;/code&gt; request is sent to an I/O server). The client must be prepared for data received as answers to those requests to be in various forms. However, the I/O server is to convert the results to binaries whenever possible (that is, when the function supplied to &lt;code&gt;get_until&lt;/code&gt; returns a list). This is done in the example in section &lt;code&gt;&lt;a href=&quot;#example_io_server&quot;&gt;An Annotated and Working Example I/O Server&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;get_until&lt;/code&gt; リクエストでは、常にリストとして指定されたデータを持つ関数が許可されていることに注意してください。また、そのような関数からの戻り値データは任意のタイプにすることができます（実際に &lt;code&gt;io:fread/2,3&lt;/code&gt; 要求がI / Oサーバーに送信される場合はそうです）。クライアントは、これらの要求に対する応答として受信したデータがさまざまな形式になるように準備する必要があります。ただし、I / Oサーバーは可能な限り結果をバイナリに変換します（つまり、 &lt;code&gt;get_until&lt;/code&gt; に指定された関数がリストを返す場合）。これは、 &lt;code&gt;&lt;a href=&quot;#example_io_server&quot;&gt;An Annotated and Working Example I/O Server&lt;/a&gt;&lt;/code&gt; セクションの例で行われます。</target>
        </trans-unit>
        <trans-unit id="869fe53220efffa9f2648be8687be1af3cac2f73" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;pid()&lt;/code&gt; of the I/O server is not explicitly present in tuple &lt;code&gt;io_reply&lt;/code&gt;. The reply can be sent from any process, not necessarily the actual I/O server.</source>
          <target state="translated">I / Oサーバーの &lt;code&gt;pid()&lt;/code&gt; がタプル &lt;code&gt;io_reply&lt;/code&gt; に明示的に存在しないことに注意してください。応答は、必ずしも実際のI / Oサーバーではなく、任意のプロセスから送信できます。</target>
        </trans-unit>
        <trans-unit id="f9bf7bd1d2a63adf57d1dd61e3e2c636ef718d87" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;start_link&lt;/code&gt; functions of the different behavior modules fulfill the above requirements.</source>
          <target state="translated">さまざまな動作モジュールの &lt;code&gt;start_link&lt;/code&gt; 関数が上記の要件を満たしていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="438a7860299a64ed5669574b6efede437e192860" translate="yes" xml:space="preserve">
          <source>Notice that the &lt;code&gt;{'EXIT', Id, _}&lt;/code&gt; message can be the result of the link, but can also be the result of &lt;code&gt;Id&lt;/code&gt; calling &lt;code&gt;exit/2&lt;/code&gt;. Therefore, it &lt;strong&gt;can&lt;/strong&gt; be appropriate to clean up the message queue when trapping exits after the call to &lt;code&gt;unlink(Id)&lt;/code&gt;, as follows:</source>
          <target state="translated">通知することを &lt;code&gt;{'EXIT', Id, _}&lt;/code&gt; メッセージは、リンクの結果とすることができるだけでなく、の結果であり得る &lt;code&gt;Id&lt;/code&gt; が呼び出す &lt;code&gt;exit/2&lt;/code&gt; 。したがって、次のように、 &lt;code&gt;unlink(Id)&lt;/code&gt; の呼び出し後にトラップが終了するときに、メッセージキューをクリーンアップ&lt;strong&gt;するの&lt;/strong&gt;が適切な場合&lt;strong&gt;が&lt;/strong&gt;あります。</target>
        </trans-unit>
        <trans-unit id="e7d3b1ac2fe8c40d5c296cb9508ac5b63294a0ef" translate="yes" xml:space="preserve">
          <source>Notice that the BOM for UTF-8 is seldom used, and it is really not a &lt;strong&gt;byte order&lt;/strong&gt; mark. There are obviously no byte order issues with UTF-8, so the BOM is only there to differentiate UTF-8 encoding from other UTF formats.</source>
          <target state="translated">UTF-8のBOMはほとんど使用されず、実際には&lt;strong&gt;バイトオーダー&lt;/strong&gt;マークではないことに注意してください。UTF-8にはバイトオーダーの問題がないことは明らかなので、BOMはUTF-8エンコーディングを他のUTF形式と区別するためだけに存在します。</target>
        </trans-unit>
        <trans-unit id="60ba36aa64236926d8fc38d4a0caadafb0e955a8" translate="yes" xml:space="preserve">
          <source>Notice that the C program is in a &lt;code&gt;while&lt;/code&gt;-loop, checking for the return value of &lt;code&gt;read_cmd/1&lt;/code&gt;. This is because the C program must detect when the port closes and terminates.</source>
          <target state="translated">Cプログラムが &lt;code&gt;while&lt;/code&gt; ループにあり、 &lt;code&gt;read_cmd/1&lt;/code&gt; の戻り値をチェックしていることに注意してください。これは、Cプログラムがポートのクローズと終了を検出する必要があるためです。</target>
        </trans-unit>
        <trans-unit id="a63c691118a268393e4b6c047b61976f9f09e5f5" translate="yes" xml:space="preserve">
          <source>Notice that the Kernel variable &lt;code&gt;inetrc&lt;/code&gt; overrides this environment variable.</source>
          <target state="translated">カーネル変数 &lt;code&gt;inetrc&lt;/code&gt; がこの環境変数をオーバーライドすることに注意してください。</target>
        </trans-unit>
        <trans-unit id="998c3bd807afb787e85df818d68896568ab1dac7" translate="yes" xml:space="preserve">
          <source>Notice that the above handler does not have any overload protection, and all log events are printed directly from the client process.</source>
          <target state="translated">上記のハンドラには過負荷保護機能がなく、すべてのログイベントはクライアントプロセスから直接出力されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5b06b14e5057923df74530d889d86c130c4599fb" translate="yes" xml:space="preserve">
          <source>Notice that the above specification does not restrict the input and output type in any way. These types can be constrained by guard-like subtype constraints and provide bounded quantification:</source>
          <target state="translated">上記の仕様では、入力型と出力型は何ら制限されていないことに注意してください。これらの型は、ガード的なサブタイプ制約によって制約され、制限された定量化を提供することができます。</target>
        </trans-unit>
        <trans-unit id="ffeb1c6cbb53bd413a17d7e4afa253b27c7a4334" translate="yes" xml:space="preserve">
          <source>Notice that the apparently similar pattern</source>
          <target state="translated">明らかに似たようなパターンであることに注目してください。</target>
        </trans-unit>
        <trans-unit id="1865e3416dbeb17876187856aa08e4b5f4f9fd78" translate="yes" xml:space="preserve">
          <source>Notice that the application version specifies a source code version. One more, indirect, requirement is that the installed binary application of the specified version is built so that it is compatible with the rest of the system.</source>
          <target state="translated">アプリケーションのバージョンがソースコードのバージョンを指定していることに注意してください。もう一つの間接的な要件は、指定されたバージョンのインストールされたバイナリアプリケーションがシステムの残りの部分と互換性があるように構築されていることです。</target>
        </trans-unit>
        <trans-unit id="12430644918a731bc0331cb307bf4502fd57f823" translate="yes" xml:space="preserve">
          <source>Notice that the argument is a list with exactly one, two, or three arguments. &lt;code&gt;NameType&lt;/code&gt; defaults to &lt;code&gt;longnames&lt;/code&gt; and &lt;code&gt;Ticktime&lt;/code&gt; to &lt;code&gt;15000&lt;/code&gt;.</source>
          <target state="translated">引数が1つ、2つ、または3つの引数のリストであることに注意してください。 &lt;code&gt;NameType&lt;/code&gt; のデフォルトは &lt;code&gt;longnames&lt;/code&gt; 、 &lt;code&gt;Ticktime&lt;/code&gt; は &lt;code&gt;15000&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4e51fbbc05a639063fcd094a483d069e3e71d424" translate="yes" xml:space="preserve">
          <source>Notice that the behavior of this function for an SCTP one-to-many style socket is not defined by the &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;SCTP Sockets API Extensions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">SCTP 1対多スタイルのソケットに対するこの関数の動作は、 &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;SCTP Sockets API Extensions&lt;/a&gt;&lt;/code&gt; は定義されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2695495d90a21bfbc215e48f946c97c1557c57eb" translate="yes" xml:space="preserve">
          <source>Notice that the compiler does not generate encode/decode functions for parameterized types, only for the instances of the parameterized types. Therefore, if a file contains the types &lt;code&gt;General{}&lt;/code&gt;, &lt;code&gt;T1&lt;/code&gt;, and &lt;code&gt;T2&lt;/code&gt; as in the previous example, encode/decode functions are only generated for &lt;code&gt;T1&lt;/code&gt; and &lt;code&gt;T2&lt;/code&gt;.</source>
          <target state="translated">コンパイラーは、パラメーター化された型のインスタンスに対してのみ、パラメーター化された型のエンコード/デコード関数を生成しないことに注意してください。したがって、前の例のように、ファイルに &lt;code&gt;General{}&lt;/code&gt; 、 &lt;code&gt;T1&lt;/code&gt; 、および &lt;code&gt;T2&lt;/code&gt; のタイプが含まれている場合、エンコード/デコード関数は &lt;code&gt;T1&lt;/code&gt; および &lt;code&gt;T2&lt;/code&gt; に対してのみ生成されます。</target>
        </trans-unit>
        <trans-unit id="f4bdb273ffa02e13186dc2814d4167dbf9f7eac3" translate="yes" xml:space="preserve">
          <source>Notice that the current key is stored in the driver, and can be invalid (for example, if the key has been removed).</source>
          <target state="translated">現在のキーはドライバに保存されており、無効になる可能性があることに注意してください(キーが削除されている場合など)。</target>
        </trans-unit>
        <trans-unit id="3425e12704f1ae2e3dac5bdc4405aa18192ba618" translate="yes" xml:space="preserve">
          <source>Notice that the default options for TCP/IP sockets can be changed with the Kernel configuration parameters mentioned in the beginning of this manual page.</source>
          <target state="translated">TCP/IP ソケットのデフォルトオプションは、このマニュアルページの最初に記載されているカーネル構成パラメータで変更できます。</target>
        </trans-unit>
        <trans-unit id="8735534cfeef989ea973a36967fd6073321a2a23" translate="yes" xml:space="preserve">
          <source>Notice that the definition of type &lt;code&gt;SET OF&lt;/code&gt; implies that the order of the components is undefined, but in practice there is no difference between &lt;code&gt;SET OF&lt;/code&gt; and &lt;code&gt;SEQUENCE OF&lt;/code&gt;. The ASN.1 compiler for Erlang does not randomize the order of the &lt;code&gt;SET OF&lt;/code&gt; components before encoding.</source>
          <target state="translated">タイプ &lt;code&gt;SET OF&lt;/code&gt; の定義は、コンポーネントの順序が未定義であることを意味しますが、実際には、 &lt;code&gt;SET OF&lt;/code&gt; と &lt;code&gt;SEQUENCE OF&lt;/code&gt; の間に違いはありません。ErlangのASN.1コンパイラーは、エンコードの前に &lt;code&gt;SET OF&lt;/code&gt; コンポーネントの順序をランダム化しません。</target>
        </trans-unit>
        <trans-unit id="85ee2b1beef42dfc51c38d1bdc5c48413f6418d8" translate="yes" xml:space="preserve">
          <source>Notice that the end of this type of comment is a literal newline sequence in the pattern; escape sequences that happen to represent a newline do not count. For example, consider the following pattern when &lt;code&gt;extended&lt;/code&gt; is set, and the default newline convention is in force:</source>
          <target state="translated">このタイプのコメントの終わりは、パターン内のリテラルの改行シーケンスであることに注意してください。たまたま改行を表すエスケープシーケンスはカウントされません。たとえば、 &lt;code&gt;extended&lt;/code&gt; が設定されており、デフォルトの改行規則が有効になっている場合は、次のパターンを検討してください。</target>
        </trans-unit>
        <trans-unit id="59c9761a4423dc8ba33d258174c0d7deb92180da" translate="yes" xml:space="preserve">
          <source>Notice that the file encoding options specified when opening a file has nothing to do with the filename encoding convention. You can very well open files containing data encoded in UTF-8, but having filenames in bytewise (&lt;code&gt;latin1&lt;/code&gt;) encoding or conversely.</source>
          <target state="translated">ファイルを開くときに指定されるファイルエンコーディングオプションは、ファイル名のエンコーディング規則とは関係がないことに注意してください。UTF-8でエンコードされたデータを含むファイルを非常に適切に開くことができますが、ファイル名はバイト単位（ &lt;code&gt;latin1&lt;/code&gt; ）エンコードまたはその逆です。</target>
        </trans-unit>
        <trans-unit id="54b730627c759c2237c6a38f6ac21fcf1d73b83e" translate="yes" xml:space="preserve">
          <source>Notice that the filesystem containing the virtual machine executable (&lt;code&gt;beam.smp&lt;/code&gt; in the example) must be local, mounted without flag &lt;code&gt;nosetuid&lt;/code&gt;, support extended attributes, and the kernel must support file capabilities. All this runs out of the box on at least Ubuntu 12.04 LTS, except that SCTP sockets appear to not support network namespaces.</source>
          <target state="translated">仮想マシン実行可能ファイル（例では、 &lt;code&gt;beam.smp&lt;/code&gt; ）を含むファイルシステムはローカルで、フラグ &lt;code&gt;nosetuid&lt;/code&gt; なしでマウントされ、拡張属性をサポートし、カーネルがファイル機能をサポートしている必要があります。SCTPソケットがネットワーク名前空間をサポートしていないように見えることを除いて、これはすべて、Ubuntu 12.04 LTSでそのまま実行できます。</target>
        </trans-unit>
        <trans-unit id="856dd98224a317941549fceec575ed693a862a3b" translate="yes" xml:space="preserve">
          <source>Notice that the function &lt;code&gt;add_frag/2&lt;/code&gt; is started one time for each of the other fragments (except number 1) as a part of the table creation procedure.</source>
          <target state="translated">テーブル作成手順の一部として、関数 &lt;code&gt;add_frag/2&lt;/code&gt; が他のフラグメント（番号1を除く）のそれぞれに対して1回開始されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="71fbea88394343530b7ae5da050f337473550603" translate="yes" xml:space="preserve">
          <source>Notice that the function can return &lt;code&gt;true&lt;/code&gt; for a module that in fact is not interpretable in the case where the module is marked as sticky or resides in a directory marked as sticky. The reason is that this is not discovered until the interpreter tries to load the module.</source>
          <target state="translated">モジュールがスティッキーとしてマークされている場合、またはスティッキーとしてマークされたディレクトリにある場合、実際には解釈できないモジュールに対して関数が &lt;code&gt;true&lt;/code&gt; を返す可能性があることに注意してください。これは、インタープリターがモジュールをロードしようとするまで、これが発見されないためです。</target>
        </trans-unit>
        <trans-unit id="fc5ff5fc0775ca18d960b27958c2c310603beba9" translate="yes" xml:space="preserve">
          <source>Notice that the functions below perform an RPC using an open file descriptor provided by the caller. This file descriptor must not be used for other traffic during the global operation, as the function can then receive unexpected data and fail.</source>
          <target state="translated">以下の関数は、呼び出し元によって提供されたオープンファイル記述子を使用して RPC を実行することに注意してください。このファイル記述子は、グローバル操作中に他のトラフィックに使用してはいけません。</target>
        </trans-unit>
        <trans-unit id="6344e9ae1d5d7f5e3378303250cff912dbc2282d" translate="yes" xml:space="preserve">
          <source>Notice that the history of the last trace is always available in file &lt;code&gt;ttb_last_config&lt;/code&gt;.</source>
          <target state="translated">最後のトレースの履歴は、ファイル &lt;code&gt;ttb_last_config&lt;/code&gt; で常に利用可能であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9b4c212a61f0bb3f68fad2d68b59100bb913758e" translate="yes" xml:space="preserve">
          <source>Notice that the information returned is highly implementation-dependent and can be changed or removed at any time without prior notice. It was initially intended as a tool when developing new allocators, but as it can be of interest for others it has been briefly documented.</source>
          <target state="translated">返される情報は実装に大きく依存しており、事前の通知なしにいつでも変更や削除が可能であることに注意してください。これは当初、新しいアロケータを開発する際のツールとして意図されていましたが、他の人にも興味を持ってもらえるように、簡単に文書化されています。</target>
        </trans-unit>
        <trans-unit id="5eec770c656034420f67e24636825b21ba0fb080" translate="yes" xml:space="preserve">
          <source>Notice that the integer value is only used internally in Logger. In the API, you must always use the atom. To compare the severity of two log levels, use &lt;code&gt;&lt;a href=&quot;logger#compare_levels-2&quot;&gt;logger:compare_levels/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">整数値はロガーの内部でのみ使用されることに注意してください。APIでは、常にアトムを使用する必要があります。2つのログレベルの重大度を比較するには、 &lt;code&gt;&lt;a href=&quot;logger#compare_levels-2&quot;&gt;logger:compare_levels/2&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="913c6778d3ce72fc842456abadbdcd4a41900bd7" translate="yes" xml:space="preserve">
          <source>Notice that the last created atom is shown first.</source>
          <target state="translated">最後に作成された原子が最初に表示されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e6ee884138fcccc998b14a68323c7c49e44297a2" translate="yes" xml:space="preserve">
          <source>Notice that the last element in the &lt;code&gt;Request&lt;/code&gt; tuple (&lt;code&gt;[$\n]&lt;/code&gt;) is appended to the argument list when the function is called. The function is to be called like &lt;code&gt;apply(Module, Function, [ State, Data | ExtraArgs ])&lt;/code&gt; by the I/O server.</source>
          <target state="translated">関数が呼び出されると、 &lt;code&gt;Request&lt;/code&gt; タプルの最後の要素（ &lt;code&gt;[$\n]&lt;/code&gt; ）が引数リストに追加されることに注意してください。関数は、I / Oサーバーによって &lt;code&gt;apply(Module, Function, [ State, Data | ExtraArgs ])&lt;/code&gt; れます。</target>
        </trans-unit>
        <trans-unit id="65e13b0553b24c92ba77e668391c89bbfe7c5f62" translate="yes" xml:space="preserve">
          <source>Notice that the last part is &quot;ang&quot;, not &quot;an&quot;, as splitting was specified into two parts, and the splitting stops when enough parts are given, which is why the result differs from that of &lt;code&gt;trim&lt;/code&gt;.</source>
          <target state="translated">分割は2つの部分に指定されているため、最後の部分は「an」ではなく「ang」であり、十分な部分が指定されると分割が停止するため、結果が &lt;code&gt;trim&lt;/code&gt; の結果とは異なることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0b0de072daf08ddb3bed5b003d16bec94ec3f838" translate="yes" xml:space="preserve">
          <source>Notice that the match context in &lt;code&gt;my_binary_to_list/1&lt;/code&gt; was discarded when the entire binary had been traversed. What happens if the iteration stops before it has reached the end of the binary? Will the optimization still work?</source>
          <target state="translated">バイナリ全体がトラバースされると、 &lt;code&gt;my_binary_to_list/1&lt;/code&gt; の一致コンテキストが破棄されたことに注意してください。バイナリの最後に達する前に反復が停止するとどうなりますか？最適化は引き続き機能しますか？</target>
        </trans-unit>
        <trans-unit id="2d19f8166370c4661429c3cee25b80ade4ba9fb7" translate="yes" xml:space="preserve">
          <source>Notice that the order of objects returned is unspecified. In particular, the order in which objects were inserted is not reflected.</source>
          <target state="translated">返されるオブジェクトの順番が不特定であることに注意してください。特に、オブジェクトが挿入された順番は反映されていません。</target>
        </trans-unit>
        <trans-unit id="90ee8d6704f5ea8a8da9ff5e648eb8db8d5bce43" translate="yes" xml:space="preserve">
          <source>Notice that the program resides in the emulator's &lt;code&gt;bin&lt;/code&gt; directory, not in the &lt;code&gt;bin&lt;/code&gt; directory directly under the Erlang root. The reasons for this are the subtle problem of upgrading the emulator on a running system, where a new version of the runtime system should not need to overwrite existing (and probably used) executables.</source>
          <target state="translated">お知らせエミュレータの中にプログラムが存在すること &lt;code&gt;bin&lt;/code&gt; ディレクトリではなく、中 &lt;code&gt;bin&lt;/code&gt; ディレクトリに直接Erlangのルートの下に。この理由は、実行中のシステムでエミュレータをアップグレードする際の微妙な問題です。ランタイムシステムの新しいバージョンでは、既存の（おそらく使用されている）実行可能ファイルを上書きする必要はありません。</target>
        </trans-unit>
        <trans-unit id="78b612195b425463060bd89b2b5fb48b2b6bc32f" translate="yes" xml:space="preserve">
          <source>Notice that the program runs slower if the data is located on a remote node.</source>
          <target state="translated">データがリモートノードにある場合、プログラムの動作が遅くなることに注意してください。</target>
        </trans-unit>
        <trans-unit id="7527eddb37622ef5514d8dac4dc37568ecec15bd" translate="yes" xml:space="preserve">
          <source>Notice that the range &lt;code&gt;0..Range-1&lt;/code&gt; is different from the range of &lt;code&gt;phash/2&lt;/code&gt;, which is &lt;code&gt;1..Range&lt;/code&gt;.</source>
          <target state="translated">範囲ことを通知 &lt;code&gt;0..Range-1&lt;/code&gt; の範囲とは異なる &lt;code&gt;phash/2&lt;/code&gt; である、 &lt;code&gt;1..Range&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f5b1145658a0a3e84e5b5e128d226a353a792a5" translate="yes" xml:space="preserve">
          <source>Notice that the record name is the table name even when &lt;code&gt;record_name&lt;/code&gt; has another setting.</source>
          <target state="translated">&lt;code&gt;record_name&lt;/code&gt; に別の設定がある場合でも、レコード名はテーブル名であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f556bad20e55c532b765ee625a5af6afc2bd2580" translate="yes" xml:space="preserve">
          <source>Notice that the regular expression must match the complete version string, so this example works for, for example, &lt;code&gt;2.1.1&lt;/code&gt;, but not for &lt;code&gt;2.1.1.1&lt;/code&gt;.</source>
          <target state="translated">正規表現は完全なバージョン文字列と一致する必要があるため、この例は、たとえば &lt;code&gt;2.1.1&lt;/code&gt; では機能しますが、 &lt;code&gt;2.1.1.1&lt;/code&gt; では機能しません。</target>
        </trans-unit>
        <trans-unit id="4eea6a747947fcb8f655a220c818e740e96ba5d5" translate="yes" xml:space="preserve">
          <source>Notice that the same caveats apply as for &lt;code&gt;&lt;a href=&quot;#garbage_collect-0&quot;&gt;garbage_collect/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#garbage_collect-0&quot;&gt;garbage_collect/0&lt;/a&gt;&lt;/code&gt; と同じ警告が適用されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fe10cacd28855d9196c579eb8146305f91e16641" translate="yes" xml:space="preserve">
          <source>Notice that the sequences \A, \Z, and \z can be used to match the start and end of the subject in both modes. If all branches of a pattern start with \A, it is always anchored, regardless if &lt;code&gt;multiline&lt;/code&gt; is set.</source>
          <target state="translated">シーケンス\ A、\ Z、および\ zを使用して、両方のモードで件名の開始と終了を一致させることができます。パターンのすべての分岐が\ Aで始まる場合、 &lt;code&gt;multiline&lt;/code&gt; が設定されているかどうかに関係なく、常にアンカーされます。</target>
        </trans-unit>
        <trans-unit id="6724f506b54877b36a23e88d5de227a00d37732a" translate="yes" xml:space="preserve">
          <source>Notice that the shorthand for &lt;code&gt;list()&lt;/code&gt;, that is, the list of elements of unknown type, is &lt;code&gt;[_]&lt;/code&gt; (or &lt;code&gt;[any()]&lt;/code&gt;), not &lt;code&gt;[]&lt;/code&gt;. The notation &lt;code&gt;[]&lt;/code&gt; specifies the singleton type for the empty list.</source>
          <target state="translated">&lt;code&gt;list()&lt;/code&gt; の省略形、つまり不明なタイプの要素のリストは、 &lt;code&gt;[]&lt;/code&gt; ではなく[ &lt;code&gt;[_]&lt;/code&gt; （または &lt;code&gt;[any()]&lt;/code&gt; ）であることに注意してください。表記 &lt;code&gt;[]&lt;/code&gt; は、空のリストのシングルトンタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="73dac804c8d0ac669ce6f4344962d4b5c34961af" translate="yes" xml:space="preserve">
          <source>Notice that the space management data structures kept in RAM, the buddy system, is also written to the disk. This can take some time if the table is fragmented.</source>
          <target state="translated">バディシステムであるRAMに保持されているスペース管理データ構造もディスクに書き込まれていることに注意してください。これは、テーブルが断片化されている場合、時間がかかることがあります。</target>
        </trans-unit>
        <trans-unit id="30f0e9479e312465b9ff5d6f711d535a3e0101b4" translate="yes" xml:space="preserve">
          <source>Notice that the sum of these values is &lt;strong&gt;not&lt;/strong&gt; the total amount of memory allocated by the emulator. Some values are part of other values, and some memory areas are not part of the result. For information about the total amount of memory allocated by the emulator, see &lt;code&gt;&lt;a href=&quot;#memory-0&quot;&gt;erlang:memory/0,1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">これらの値の合計は、エミュレータによって割り当てられたメモリの総量では&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。一部の値は他の値の一部であり、一部のメモリ領域は結果の一部ではありません。エミュレーターによって割り当てられるメモリーの総量については、 &lt;code&gt;&lt;a href=&quot;#memory-0&quot;&gt;erlang:memory/0,1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b5abbe6d966c5fc1edc96d1f28f1436c4958c4e8" translate="yes" xml:space="preserve">
          <source>Notice that the syntactic representation of &lt;code&gt;map()&lt;/code&gt; is &lt;code&gt;#{any() =&amp;gt; any()}&lt;/code&gt; (or &lt;code&gt;#{_ =&amp;gt; _}&lt;/code&gt;), not &lt;code&gt;#{}&lt;/code&gt;. The notation &lt;code&gt;#{}&lt;/code&gt; specifies the singleton type for the empty map.</source>
          <target state="translated">通知の構文表現 &lt;code&gt;map()&lt;/code&gt; である &lt;code&gt;#{any() =&amp;gt; any()}&lt;/code&gt; （または &lt;code&gt;#{_ =&amp;gt; _}&lt;/code&gt; ）ではない &lt;code&gt;#{}&lt;/code&gt; 。表記 &lt;code&gt;#{}&lt;/code&gt; は、空のマップのシングルトンタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="d2c453c4a61a93e0e17811bf7efe3b048abd12f0" translate="yes" xml:space="preserve">
          <source>Notice that the template is here the same as for &lt;code&gt;single_line=false&lt;/code&gt;, but the resulting log entry differs in that there is only one line after the heading:</source>
          <target state="translated">ここではテンプレートは &lt;code&gt;single_line=false&lt;/code&gt; と同じですが、結果のログエントリは、見出しの後に1行しかないという点で異なります。</target>
        </trans-unit>
        <trans-unit id="1a0dfecdaad1fda603fa4229f911e862d71765b6" translate="yes" xml:space="preserve">
          <source>Notice that the time order of object insertions is preserved; the first object inserted with the specified key is the first in the resulting list, and so on.</source>
          <target state="translated">指定したキーで挿入された最初のオブジェクトが結果のリストの最初になります。</target>
        </trans-unit>
        <trans-unit id="6f7067f925d0363a33444938455ac91fcd09edfb" translate="yes" xml:space="preserve">
          <source>Notice that the use of an &lt;code&gt;.inetrc&lt;/code&gt; file, which was supported in earlier Erlang/OTP versions, is now obsolete.</source>
          <target state="translated">以前のErlang / OTPバージョンでサポートされていた &lt;code&gt;.inetrc&lt;/code&gt; ファイルの使用は廃止されました。</target>
        </trans-unit>
        <trans-unit id="b338a89eefab229871069c1f47956c10a1d50274" translate="yes" xml:space="preserve">
          <source>Notice that the value fed into the selective decode functions must be a binary.</source>
          <target state="translated">選択的デコード関数に供給される値はバイナリでなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="787fd319d83681555c07f1a96ca590fc08523120" translate="yes" xml:space="preserve">
          <source>Notice that there is no &quot;;&quot; before &lt;code&gt;end&lt;/code&gt;. Conditions do the same as guards, that is, tests that succeed or fail. Erlang starts at the top and tests until it finds a condition that succeeds. Then it evaluates (performs) the action following the condition and ignores all other conditions and actions before the &lt;code&gt;end&lt;/code&gt;. If no condition matches, a run-time failure occurs. A condition that always succeeds is the atom &lt;code&gt;true&lt;/code&gt;. This is often used last in an &lt;code&gt;if&lt;/code&gt;, meaning, do the action following the &lt;code&gt;true&lt;/code&gt; if all other conditions have failed.</source>
          <target state="translated">「;」がないことに注意してください。 &lt;code&gt;end&lt;/code&gt; する前。条件はガードと同じように機能します。つまり、テストは成功または失敗します。Erlangは先頭から開始して、成功する条件が見つかるまでテストします。次に、条件に続くアクションを評価（実行）し、 &lt;code&gt;end&lt;/code&gt; 前に他のすべての条件とアクションを無視します。一致する条件がない場合、実行時エラーが発生します。常に成功する条件は、アトム &lt;code&gt;true&lt;/code&gt; です。これは多くの &lt;code&gt;if&lt;/code&gt; 、ifの最後に使用され &lt;code&gt;true&lt;/code&gt; つまり、他のすべての条件が失敗した場合に、trueの後にアクションを実行します。</target>
        </trans-unit>
        <trans-unit id="c7902b9db4b62c4e9204bea0b7582aa107cd80a6" translate="yes" xml:space="preserve">
          <source>Notice that there is no &quot;condition variable wait with time-out&quot; in the Erlang driver thread API. This because of issues with &lt;code&gt;pthread_cond_timedwait&lt;/code&gt;. When the system clock suddenly is changed, it is not always guaranteed that you will wake up from the call as expected. An Erlang runtime system must be able to cope with sudden changes of the system clock. Therefore, we have omitted it from the Erlang driver thread API. In the Erlang driver case, time-outs can and are to be handled with the timer functionality of the Erlang driver API.</source>
          <target state="translated">ErlangドライバースレッドAPIには「タイムアウト付きの条件変数待機」がないことに注意してください。これは、 &lt;code&gt;pthread_cond_timedwait&lt;/code&gt; の問題が原因です。システムクロックが突然変更された場合、期待どおりにコールからウェイクアップするとは限りません。 Erlangランタイムシステムは、システムクロックの突然の変化に対応できなければなりません。したがって、ErlangドライバースレッドAPIからは省略しています。 Erlangドライバーの場合、タイムアウトはErlangドライバーAPIのタイマー機能で処理できます。</target>
        </trans-unit>
        <trans-unit id="bceb9f4f6a6abdf1446e121be361b43261feb62c" translate="yes" xml:space="preserve">
          <source>Notice that there is no automatic garbage collection for tables. Even if there are no references to a table from any process, it is not automatically destroyed unless the owner process terminates. To destroy a table explicitly, use function &lt;code&gt;&lt;a href=&quot;#delete-1&quot;&gt;delete/1&lt;/a&gt;&lt;/code&gt;. The default owner is the process that created the table. To transfer table ownership at process termination, use option &lt;code&gt;&lt;a href=&quot;#heir&quot;&gt;heir&lt;/a&gt;&lt;/code&gt; or call &lt;code&gt;&lt;a href=&quot;#give_away-3&quot;&gt;give_away/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルには自動ガベージコレクションがないことに注意してください。どのプロセスからもテーブルへの参照がない場合でも、所有者プロセスが終了しない限り、テーブルは自動的に破棄されません。テーブルを明示的に破棄するには、関数 &lt;code&gt;&lt;a href=&quot;#delete-1&quot;&gt;delete/1&lt;/a&gt;&lt;/code&gt; を使用します。デフォルトの所有者は、テーブルを作成したプロセスです。プロセスの終了時にテーブルの所有権を転送するには、オプション &lt;code&gt;&lt;a href=&quot;#heir&quot;&gt;heir&lt;/a&gt;&lt;/code&gt; を使用するか、 &lt;code&gt;&lt;a href=&quot;#give_away-3&quot;&gt;give_away/3&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8bab5c018b3dd7779861d18a2de3b850779eed22" translate="yes" xml:space="preserve">
          <source>Notice that these results are highly implementation-specific and can change in a future release.</source>
          <target state="translated">これらの結果は非常に実装に特化しており、将来のリリースで変更される可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="869e22e1f3c3acbe1295f4e3f5e543c0967d43d9" translate="yes" xml:space="preserve">
          <source>Notice that these values are not guaranteed to be the exact time spent in each state. This is because of various optimisation done to keep the overhead as small as possible.</source>
          <target state="translated">これらの値は、各状態で費やされた時間を正確に保証するものではないことに注意してください。これは、オーバーヘッドを可能な限り小さくするために様々な最適化が行われているためです。</target>
        </trans-unit>
        <trans-unit id="1b2a4c91cbe5e730d179e66ad334733cf9b2f315" translate="yes" xml:space="preserve">
          <source>Notice that this can cause the message queue to overflow, as there is no way to throttle the sender in this case (no flow control).</source>
          <target state="translated">この場合、送信者をスロットルする方法がないので、これはメッセージキューがオーバーフローする原因となることに注意してください (フローコントロールはありません)。</target>
        </trans-unit>
        <trans-unit id="65c845a0c39116c9a8667488291653cb120ecdb8" translate="yes" xml:space="preserve">
          <source>Notice that this code never uses &lt;code&gt;ets:match/2&lt;/code&gt; but instead uses the &lt;code&gt;ets:lookup/2&lt;/code&gt; call. The &lt;code&gt;lists:map/2&lt;/code&gt; call is only used to traverse the &lt;code&gt;idno&lt;/code&gt;s matching the name &quot;Bryan&quot; in the table; thus the number of lookups in the master table is minimized.</source>
          <target state="translated">このコードは &lt;code&gt;ets:match/2&lt;/code&gt; を使用せず、代わりに &lt;code&gt;ets:lookup/2&lt;/code&gt; 呼び出しを使用していることに注意してください。 &lt;code&gt;lists:map/2&lt;/code&gt; コールだけトラバースするために使用される &lt;code&gt;idno&lt;/code&gt; テーブル内の名前に一致する「ブライアンを」; したがって、マスターテーブルでのルックアップの数は最小限に抑えられます。</target>
        </trans-unit>
        <trans-unit id="642ed222441e7d274dce20239475afe796aa6f92" translate="yes" xml:space="preserve">
          <source>Notice that this does not in any way tell how characters are to be put on the I/O device or handled by the I/O server. Different I/O servers can handle the characters however they want, this only tells the I/O server which format the data is expected to have. In the &lt;code&gt;Module&lt;/code&gt;/&lt;code&gt;Function&lt;/code&gt;/&lt;code&gt;Args&lt;/code&gt; case, &lt;code&gt;Encoding&lt;/code&gt; tells which format the designated function produces.</source>
          <target state="translated">これは、文字がどのようにI / Oデバイスに置かれるか、I / Oサーバーによって処理されるかを示すものではないことに注意してください。さまざまなI / Oサーバーが必要に応じて文字を処理できます。これは、I / Oサーバーにデータが予期する形式を通知するだけです。で &lt;code&gt;Module&lt;/code&gt; / &lt;code&gt;Function&lt;/code&gt; / &lt;code&gt;Args&lt;/code&gt; の場合、 &lt;code&gt;Encoding&lt;/code&gt; 指定された機能が生成するフォーマット指示します。</target>
        </trans-unit>
        <trans-unit id="349cea6fe5b002efa6f13c8a0b6d61002518bac7" translate="yes" xml:space="preserve">
          <source>Notice that this function can also be called as a part of a code upgrade procedure. Therefore, the function is not to have any side effects. For more information about code upgrade of supervisors, see section &lt;code&gt;Changing a Supervisor&lt;/code&gt; in OTP Design Principles.</source>
          <target state="translated">この関数は、コードアップグレード手順の一部として呼び出すこともできます。したがって、この関数には副作用がありません。スーパーバイザのコードアップグレードの詳細については、「OTP設計原則での &lt;code&gt;Changing a Supervisor&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="d5a602977aaafafa43a23557b7310cdf92b1e9ad" translate="yes" xml:space="preserve">
          <source>Notice that this function does not affect option &lt;code&gt;&lt;a href=&quot;#heir&quot;&gt;heir&lt;/a&gt;&lt;/code&gt; of the table. A table owner can, for example, set &lt;code&gt;heir&lt;/code&gt; to itself, give the table away, and then get it back if the receiver terminates.</source>
          <target state="translated">この関数はテーブルのオプション &lt;code&gt;&lt;a href=&quot;#heir&quot;&gt;heir&lt;/a&gt;&lt;/code&gt; には影響しないことに注意してください。たとえば、テーブルの所有者は、 &lt;code&gt;heir&lt;/code&gt; を自分自身に設定し、テーブルを渡してから、レシーバが終了した場合にそれを取り戻すことができます。</target>
        </trans-unit>
        <trans-unit id="0cb54426795679095e8a29fd043a79047773a14e" translate="yes" xml:space="preserve">
          <source>Notice that this function does not manipulate the Logger configuration directly, meaning that if the default Logger handler is already logging to a file, this function can potentially cause logging to a second file.</source>
          <target state="translated">この関数はロガー設定を直接操作しないことに注意してください。つまり、デフォルトのロガー ハンドラーがすでにファイルにロギングしている場合、この関数は潜在的に 2 番目のファイルにロギングする可能性があることを意味します。</target>
        </trans-unit>
        <trans-unit id="8b7b1e720e05da028ebe3dc53213402e40544038" translate="yes" xml:space="preserve">
          <source>Notice that this function is &lt;strong&gt;not&lt;/strong&gt; thread-safe, not even when the emulator with SMP support is used.</source>
          <target state="translated">この関数は、SMPをサポートするエミュレーターが使用されている場合でも、スレッドセーフでは&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="8447f5b25cdb8a2cfab1f25034c52ae944a2138b" translate="yes" xml:space="preserve">
          <source>Notice that this function is located in the &lt;code&gt;Erl_Interface&lt;/code&gt; library.</source>
          <target state="translated">この関数は &lt;code&gt;Erl_Interface&lt;/code&gt; ライブラリにあることに注意してください。</target>
        </trans-unit>
        <trans-unit id="47ba6495ef0d28a812199229a1ffda8befe21e10" translate="yes" xml:space="preserve">
          <source>Notice that this function must only be used to connect to newly started RAM nodes (N.D.R.S.N.) with an empty schema. If, for example, this function is used after the network has been partitioned, it can lead to inconsistent tables.</source>
          <target state="translated">この関数は、空のスキーマで新たに起動されたRAMノード(N.D.R.S.N.)に接続するためにのみ使用する必要があることに注意してください。例えば、ネットワークが分割された後にこの関数を使用すると、テーブルの整合性が取れなくなる可能性があります。</target>
        </trans-unit>
        <trans-unit id="2a0080e2dd941529f19011486ca16886c12b3f0d" translate="yes" xml:space="preserve">
          <source>Notice that this identifier on occations has been called &quot;name&quot;. As far as possible, the terms &quot;identifier&quot; or &quot;id&quot; are now used but to keep backward compatibility, some occurences of &quot;name&quot; can still be found, for example in error messages.</source>
          <target state="translated">この識別子が &quot;name &quot;と呼ばれることがあることに注意してください。可能な限り、現在では &quot;identifier &quot;または &quot;id &quot;という用語が使われていますが、 後方互換性を保つために、エラーメッセージなどで &quot;name &quot;が使われていることがあります。</target>
        </trans-unit>
        <trans-unit id="d730d26eb5bc6c258ec3f4a85decab69ff65e557" translate="yes" xml:space="preserve">
          <source>Notice that this is &lt;strong&gt;not&lt;/strong&gt; equivalent to reversing the result list of a &lt;code&gt;select/3&lt;/code&gt; call, as the result list is not only reversed, but also contains the last &lt;code&gt;Limit&lt;/code&gt; matching objects in the table, not the first.</source>
          <target state="translated">これは、 &lt;code&gt;select/3&lt;/code&gt; 呼び出しの結果リストを元に戻すのと同じでは&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。結果リストは元に戻されるだけでなく、最初のテーブルではなく最後の &lt;code&gt;Limit&lt;/code&gt; 一致オブジェクトも含まれているためです。</target>
        </trans-unit>
        <trans-unit id="70914725ae02a1a2e612f1b985dfda4ff43284f0" translate="yes" xml:space="preserve">
          <source>Notice that this is &lt;strong&gt;not&lt;/strong&gt; guaranteed for Kernel versions before 2.11.4.</source>
          <target state="translated">これは、2.11.4より前のカーネルバージョンで&lt;strong&gt;は&lt;/strong&gt;保証され&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="7dcda89d0c9ebc603749979d693cfd0901ccfd8f" translate="yes" xml:space="preserve">
          <source>Notice that this is &lt;strong&gt;not&lt;/strong&gt; guaranteed for Kernel versions before 2.13.</source>
          <target state="translated">これは2.13より前のカーネルバージョンで&lt;strong&gt;は&lt;/strong&gt;保証されて&lt;strong&gt;いない&lt;/strong&gt;ことに注意してください。</target>
        </trans-unit>
        <trans-unit id="ebcfa6b14e436143f912db1c4d94b897ad5c396b" translate="yes" xml:space="preserve">
          <source>Notice that this is a snapshot of what the entries are exactly when the crash dump is starting to be generated. Therefore they are most likely different (and more telling) than the entries for the same processes found in the &lt;strong&gt;=proc&lt;/strong&gt; section. If there is no currently running process, only the &lt;strong&gt;Current Process&lt;/strong&gt; entry is shown.</source>
          <target state="translated">これは、クラッシュダンプが生成され始めたときのエントリのスナップショットであることに注意してください。したがって、これらは、&lt;strong&gt;= proc&lt;/strong&gt;セクションにある同じプロセスのエントリとは異なる可能性が高く（わかりやすく）ます。現在実行中のプロセスがない場合は、&lt;strong&gt;現在のプロセスの&lt;/strong&gt;エントリのみが表示されます。</target>
        </trans-unit>
        <trans-unit id="6b5fe898d5908bd62ba390154dbda59785193315" translate="yes" xml:space="preserve">
          <source>Notice that this list was so long that it did not fit on one line. This does not matter, Erlang allows line breaks at all &quot;sensible places&quot; but not, for example, in the middle of atoms, integers, and others.</source>
          <target state="translated">このリストはとても長くて1行に収まらないことに注意してください。これは問題ではありません。Erlangではすべての &quot;センスのある場所 &quot;での改行は可能ですが、例えば原子や整数などの途中での改行はできません。</target>
        </trans-unit>
        <trans-unit id="bed5f26c2d951298be832ad680fbfcde5f6d0366" translate="yes" xml:space="preserve">
          <source>Notice that this only affects &lt;strong&gt;heuristic&lt;/strong&gt; interpretation of lists and binaries on output. For example, the &lt;code&gt;~ts&lt;/code&gt; format sequence always outputs a valid list of characters, regardless of the &lt;code&gt;+pc&lt;/code&gt; setting, as the programmer has explicitly requested string output.</source>
          <target state="translated">これは、出力のリストとバイナリの&lt;strong&gt;ヒューリスティック&lt;/strong&gt;解釈にのみ影響することに注意してください。たとえば、プログラマが明示的に文字列出力を要求したため、 &lt;code&gt;+pc&lt;/code&gt; &lt;code&gt;~ts&lt;/code&gt; 設定シーケンスは、+ pc設定に関係なく、常に有効な文字のリストを出力します。</target>
        </trans-unit>
        <trans-unit id="06bbb7eb9157769ac232caf919df5223a21c5714" translate="yes" xml:space="preserve">
          <source>Notice that this option does not change any guarantees about &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomicity and isolation&lt;/a&gt;&lt;/code&gt;. Functions that makes such promises over many objects (like &lt;code&gt;&lt;a href=&quot;#insert-2&quot;&gt;insert/2&lt;/a&gt;&lt;/code&gt;) gain less (or nothing) from this option.</source>
          <target state="translated">このオプションは、 &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomicity and isolation&lt;/a&gt;&lt;/code&gt; に関する保証を変更しないことに注意してください。多くのオブジェクト（ &lt;code&gt;&lt;a href=&quot;#insert-2&quot;&gt;insert/2&lt;/a&gt;&lt;/code&gt; など）に対してこのようなプロミスを行う関数は、このオプションから得られる効果が少ない（または何もない）。</target>
        </trans-unit>
        <trans-unit id="621939df6e7634c47047d2e081590d78eaf11831" translate="yes" xml:space="preserve">
          <source>Notice that this part ends with a &quot;.&quot; saying that there are no more parts of this function.</source>
          <target state="translated">この部分は「.&quot;」で終わっていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="e6c419f8334737f0ba7bd3fd865a876302c62640" translate="yes" xml:space="preserve">
          <source>Notice that this part ends with a semicolon &quot;;&quot; that indicates that there is more of the function &lt;code&gt;fac&amp;gt;&lt;/code&gt; to come.</source>
          <target state="translated">この部分はセミコロン「;」で終わることに注意してください。これは、来るべき関数 &lt;code&gt;fac&amp;gt;&lt;/code&gt; がもっとあることを示しています。</target>
        </trans-unit>
        <trans-unit id="846082f1f38f9d35784642322c9bebfb5b6dff1c" translate="yes" xml:space="preserve">
          <source>Notice that this state diagram does not specify how to handle a button event in the state &lt;code&gt;open&lt;/code&gt;. So, you need to read in some side notes, that is, here: that unspecified events shall be postponed (handled in some later state). Also, the state diagram does not show that the &lt;code&gt;code_length/0&lt;/code&gt; call must be handled in every state.</source>
          <target state="translated">この状態図は、状態 &lt;code&gt;open&lt;/code&gt; でボタンイベントを処理する方法を指定していないことに注意してください。したがって、いくつかのサイドノートを読む必要があります。つまり、ここでは、指定されていないイベントは延期されることになります（後の状態で処理されます）。また、状態図には、 &lt;code&gt;code_length/0&lt;/code&gt; 呼び出しをすべての状態で処理する必要があることが示されていません。</target>
        </trans-unit>
        <trans-unit id="6d7cfe9a38358e1080d2e905013781b2b4b7296d" translate="yes" xml:space="preserve">
          <source>Notice that type &lt;code&gt;ordered_set&lt;/code&gt; in Ets is not yet provided by Dets, neither is the limited support for concurrent updates that makes a sequence of &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; calls safe to use on fixed ETS tables. Both these features may be provided by Dets in a future release of Erlang/OTP. Until then, the Mnesia application (or some user-implemented method for locking) must be used to implement safe concurrency. Currently, no Erlang/OTP library has support for ordered disk-based term storage.</source>
          <target state="translated">Etsのタイプ &lt;code&gt;ordered_set&lt;/code&gt; はDetsによってまだ提供されていないことに注意してください。また、一連の &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;next&lt;/code&gt; 呼び出しを固定ETSテーブルで安全に使用できるようにする同時更新の制限付きサポートもありません。これらの機能は両方とも、Erlang / OTPの将来のリリースでDetsによって提供される可能性があります。それまでは、安全な同時実行性を実装するために、Mnesiaアプリケーション（またはユーザーが実装したロックのメソッド）を使用する必要があります。現在、Erlang / OTPライブラリは、注文されたディスクベースの用語ストレージをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="49a7a915aea8e9d41179a8ea113e08f2ef1a2887" translate="yes" xml:space="preserve">
          <source>Notice that we only return data (with &lt;code&gt;driver_output&lt;/code&gt;) if there is an error here, otherwise we wait for the connection to be completed, in which case our &lt;code&gt;ready_io&lt;/code&gt; function is called.</source>
          <target state="translated">ここでエラーが発生した場合にのみ（ &lt;code&gt;driver_output&lt;/code&gt; を使用して）データを返すことに注意してください。それ以外の場合は、接続が完了するのを待ちます。この場合、 &lt;code&gt;ready_io&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f51f3b121bba411146620bcda978e5f491550a29" translate="yes" xml:space="preserve">
          <source>Notice that when calling a local function, there is a difference between using the implicitly or fully qualified function name. The latter always refers to the latest version of the module. See &lt;code&gt;&lt;a href=&quot;code_loading&quot;&gt;Compilation and Code Loading&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;functions#eval&quot;&gt;Function Evaluation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ローカル関数を呼び出すときは、暗黙的または完全修飾の関数名を使用することに違いがあることに注意してください。後者は常にモジュールの最新バージョンを指します。 &lt;code&gt;&lt;a href=&quot;code_loading&quot;&gt;Compilation and Code Loading&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;functions#eval&quot;&gt;Function Evaluation&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="5f8b34f22954b45969704565ba857ede0360296a" translate="yes" xml:space="preserve">
          <source>Notice that when changing the configuration of the handler in runtime, the disk_log options (&lt;code&gt;file&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt;, &lt;code&gt;max_no_files&lt;/code&gt;, &lt;code&gt;max_no_bytes&lt;/code&gt;) must not be modified.</source>
          <target state="translated">実行時にハンドラーの構成を変更するときは、disk_logオプション（ &lt;code&gt;file&lt;/code&gt; 、 &lt;code&gt;type&lt;/code&gt; 、 &lt;code&gt;max_no_files&lt;/code&gt; 、 &lt;code&gt;max_no_bytes&lt;/code&gt; ）を変更しないでください。</target>
        </trans-unit>
        <trans-unit id="290de7804d4ece9b07b182bd6263d67e874d7ab3" translate="yes" xml:space="preserve">
          <source>Notice that when manipulating the PLT, no warnings are emitted. To turn on warnings during (re)analysis of the PLT, use option &lt;code&gt;--get_warnings&lt;/code&gt;.</source>
          <target state="translated">PLTを操作するとき、警告は出されないことに注意してください。PLTの（再）分析中に警告をオンにするには、オプション &lt;code&gt;--get_warnings&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="45a6c9cf395e353cb2306cbfdb89cfe2d26435a1" translate="yes" xml:space="preserve">
          <source>Notice that when multiple event handlers are invoked, it is sufficient that one single event handler returns a &lt;code&gt;hibernate&lt;/code&gt; request for the whole event manager to go into hibernation.</source>
          <target state="translated">複数のイベントハンドラーが呼び出された場合、1つの単一のイベントハンドラーが &lt;code&gt;hibernate&lt;/code&gt; イベントマネージャー全体が休止状態になるための休止状態要求を。</target>
        </trans-unit>
        <trans-unit id="f33a5a292b9691e53af0ea35251a90bd5b70c0ab" translate="yes" xml:space="preserve">
          <source>Notice that when the restart strategy is &lt;code&gt;simple_one_for_one&lt;/code&gt;, the list of child specifications must be a list with one child specification only. (The child specification identifier is ignored.) No child process is then started during the initialization phase, but all children are assumed to be started dynamically using &lt;code&gt;&lt;a href=&quot;#start_child-2&quot;&gt;start_child/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">再起動戦略が &lt;code&gt;simple_one_for_one&lt;/code&gt; の場合、子仕様のリストは、1つの子仕様のみのリストでなければならないことに注意してください。 （子仕様識別子は無視されます。）その後、初期化フェーズ中に子プロセスは開始されませんが、すべての子は &lt;code&gt;&lt;a href=&quot;#start_child-2&quot;&gt;start_child/2&lt;/a&gt;&lt;/code&gt; を使用して動的に開始されると想定されます。</target>
        </trans-unit>
        <trans-unit id="9634bd19d38caf45acf63a0abbac721e5ae1181a" translate="yes" xml:space="preserve">
          <source>Notice that you do not have to worry about the order you assign values to the various parts of the records when you create it. The advantage of using records is that by placing their definitions in header files you can conveniently define interfaces that are easy to change. For example, if you want to add a new field to the record, you only have to change the code where the new field is used and not at every place the record is referred to. If you leave out a field when creating a record, it gets the value of the atom &lt;code&gt;undefined&lt;/code&gt;. (*manual*)</source>
          <target state="translated">レコードを作成するときに、レコードのさまざまな部分に値を割り当てる順序を気にする必要がないことに注意してください。レコードを使用する利点は、その定義をヘッダーファイルに配置することで、変更が簡単なインターフェイスを簡単に定義できることです。たとえば、新しいフィールドをレコードに追加する場合は、レコードが参照されるすべての場所ではなく、新しいフィールドが使用されるコードを変更するだけで済みます。レコードを作成するときにフィールドを省略すると、アトム &lt;code&gt;undefined&lt;/code&gt; の値が取得されます。（*マニュアル*）</target>
        </trans-unit>
        <trans-unit id="11459bdda73f31f4f445b7c1dd521d4fd85a0493" translate="yes" xml:space="preserve">
          <source>Notice that, as shown in this example, two or more adjacent separator characters in &lt;code&gt;String&lt;/code&gt; are treated as one. That is, there are no empty strings in the resulting list of tokens.</source>
          <target state="translated">この例に示すように、 &lt;code&gt;String&lt;/code&gt; 内の隣接する2つ以上の区切り文字は1つとして扱われることに注意してください。つまり、結果のトークンのリストに空の文字列はありません。</target>
        </trans-unit>
        <trans-unit id="e5f78a295d4a14f6cc590b49dc6f1d0455cd3aab" translate="yes" xml:space="preserve">
          <source>Notice that, as shown in this example, two or more adjacent separator graphemes clusters in &lt;code&gt;String&lt;/code&gt; are treated as one. That is, there are no empty strings in the resulting list of lexemes. See also &lt;code&gt;&lt;a href=&quot;#split-3&quot;&gt;split/3&lt;/a&gt;&lt;/code&gt; which returns empty strings.</source>
          <target state="translated">この例に示すように、 &lt;code&gt;String&lt;/code&gt; 内の隣接する2つ以上のセパレータグラフェンクラスタは1つとして扱われることに注意してください。つまり、結果の語彙素のリストに空の文字列はありません。こちらもご覧ください &lt;code&gt;&lt;a href=&quot;#split-3&quot;&gt;split/3&lt;/a&gt;&lt;/code&gt; 空の文字列を返す split / 3。</target>
        </trans-unit>
        <trans-unit id="400b0bdc7183dd864f7a333eda26b469890b40f9" translate="yes" xml:space="preserve">
          <source>Notice that, for example, using a string literal as in &lt;code&gt;&amp;lt;&amp;lt;&quot;abc&quot;&amp;gt;&amp;gt;&lt;/code&gt; is syntactic sugar for &lt;code&gt;&amp;lt;&amp;lt;$a,$b,$c&amp;gt;&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;&amp;lt;&amp;lt;&quot;abc&quot;&amp;gt;&amp;gt;&lt;/code&gt; ように文字列リテラルを使用すると、 &lt;code&gt;&amp;lt;&amp;lt;$a,$b,$c&amp;gt;&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87029cbee6aaa0d9b300e7ad0b9486370e279d2c" translate="yes" xml:space="preserve">
          <source>Notice that, using the binary syntax in Erlang, the driver application can match the header directly from the binary, so the header can be put in the binary, and &lt;code&gt;hlen&lt;/code&gt; can be set to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">Erlangのバイナリ構文を使用すると、ドライバーアプリケーションはヘッダーをバイナリーから直接照合できるため、ヘッダーをバイナリーに入れることができ、 &lt;code&gt;hlen&lt;/code&gt; ことができを &lt;code&gt;0&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="7da0c41f09ad9eda092e8aa0b243d52520a156af" translate="yes" xml:space="preserve">
          <source>Notice the &lt;code&gt;--&lt;/code&gt; delimiter in the second case.</source>
          <target state="translated">に注意してください &lt;code&gt;--&lt;/code&gt; 2番目のケースの-区切り文字に。</target>
        </trans-unit>
        <trans-unit id="0a1c8d08a9994e288f56b821c9bf285da6f45d73" translate="yes" xml:space="preserve">
          <source>Notice the following:</source>
          <target state="translated">以下のようなことをお知らせします。</target>
        </trans-unit>
        <trans-unit id="d17e22e8a0b70553ac1713fc5aa1e39228341be7" translate="yes" xml:space="preserve">
          <source>Notice the introduction of decimals (floating point numbers) without any explanation. Hopefully you can cope with that.</source>
          <target state="translated">何の説明もなく小数(浮動小数点数)が導入されていることに注目してください。うまくいけば、それに対処できるでしょう。</target>
        </trans-unit>
        <trans-unit id="b22b470f990ba70d08ad30ea4441dbab4491e4f1" translate="yes" xml:space="preserve">
          <source>Notice the subtle difference between &lt;strong&gt;matching&lt;/strong&gt; and &lt;strong&gt;comparing equal&lt;/strong&gt;, which is demonstrated by table types &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;ordered_set&lt;/code&gt;:</source>
          <target state="translated">&lt;strong&gt;equalの&lt;/strong&gt;&lt;strong&gt;照合&lt;/strong&gt;と&lt;strong&gt;比較の&lt;/strong&gt;わずかな違いに注意してください。これは、テーブルタイプ &lt;code&gt;set&lt;/code&gt; によって示されます。と &lt;code&gt;ordered_set&lt;/code&gt; で。</target>
        </trans-unit>
        <trans-unit id="e087413bca56723a464e980cdc7148c95c96c9f5" translate="yes" xml:space="preserve">
          <source>Notice the tags &lt;code&gt;s1&lt;/code&gt; and &lt;code&gt;s2&lt;/code&gt;, which are used in the cover specification file and in the call to &lt;code&gt;ct_cover:cross_cover_analyse/2&lt;/code&gt;. The purpose of these is only to map the modules specified in the cover specification to the log directory specified in the call to the analyze function. The tag name has no meaning beyond this.</source>
          <target state="translated">タグ &lt;code&gt;s1&lt;/code&gt; と &lt;code&gt;s2&lt;/code&gt; に注意してください。これらはカバー仕様ファイルと次の呼び出しで使用されています。 &lt;code&gt;ct_cover:cross_cover_analyse/2&lt;/code&gt; の。これらの目的は、カバー仕様で指定されたモジュールを、analyze関数の呼び出しで指定されたログディレクトリにマップすることだけです。タグ名はこれ以上の意味はありません。</target>
        </trans-unit>
        <trans-unit id="7bb5bf565c03d21576042d149b51f71aca7f2ad7" translate="yes" xml:space="preserve">
          <source>Notice the use of brackets, the multiplication operator &quot;*&quot;, and the division operator &quot;/&quot;, as in normal arithmetic (see &lt;code&gt;Expressions&lt;/code&gt;).</source>
          <target state="translated">通常の算術演算と同様に、括弧、乗算演算子「*」、および除算演算子「/」の使用に注意してください（ &lt;code&gt;Expressions&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="1979d8b27f27698155a9b9f97c8dffec78cf1316" translate="yes" xml:space="preserve">
          <source>Notice there is no &quot;;&quot; before the &lt;code&gt;end&lt;/code&gt;.</source>
          <target state="translated">「;」がないことに注意してください。の前に &lt;code&gt;end&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b65c33941f0cec9bcc2027c063047fa6bab510b7" translate="yes" xml:space="preserve">
          <source>Notice, however, that the PCRE interpretation of \G, as the start of the current match, is subtly different from Perl, which defines it as the end of the previous match. In Perl, these can be different when the previously matched string was empty. As PCRE does only one match at a time, it cannot reproduce this behavior.</source>
          <target state="translated">ただし、現在のマッチの開始点としての \G の PCRE の解釈は、前のマッチの終了点として定義する Perl とは微妙に異なっていることに注意してください。Perl では、前にマッチした文字列が空だった場合、これらの解釈が異なることがあります。PCRE は一度に 1 つのマッチしか行わないので、この動作を再現することはできません。</target>
        </trans-unit>
        <trans-unit id="37be39660f9e3a6ee200e243af96a9c97d0d2344" translate="yes" xml:space="preserve">
          <source>Notifications are defined in SMIv1 with the TRAP-TYPE macro in the definition of an MIB (see RFC1215). The corresponding macro in SMIv2 is NOTIFICATION-TYPE. When an application decides to send a notification, it calls one of the following functions:</source>
          <target state="translated">通知は、SMIv1ではMIBの定義(RFC1215参照)のTRAP-TYPEマクロで定義されている。SMIv2の対応するマクロはNOTIFICATION-TYPEである。アプリケーションが通知を送信することを決定したとき、アプリケーションは以下の関数のいずれかを呼び出す。</target>
        </trans-unit>
        <trans-unit id="ac878d4197ecf46f67e006f7c94c70eec1e149de" translate="yes" xml:space="preserve">
          <source>Notifications/traps from an agent is delivered to the user that did the registration.</source>
          <target state="translated">登録したユーザーにエージェントからの通知・トラップが配信されます。</target>
        </trans-unit>
        <trans-unit id="317ade20c16481c20d662a3475f005419790a5e3" translate="yes" xml:space="preserve">
          <source>Notifies when the driver is reloaded (or loaded if loading is underway). It only makes sense to monitor drivers that are in the process of being loaded or reloaded. A future driver name for loading cannot be monitored. That only results in a &lt;code&gt;DOWN&lt;/code&gt; message sent immediately. Monitoring for loading is therefore most useful when triggered by function &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt;, where the monitor is created &lt;strong&gt;because&lt;/strong&gt; the driver is in such a pending state.</source>
          <target state="translated">ドライバーが再ロードされたとき（またはロードが進行中の場合はロードされたとき）に通知します。ロード中またはリロード中のドライバーを監視することは意味があります。ロードする将来のドライバー名は監視できません。その結果、 &lt;code&gt;DOWN&lt;/code&gt; メッセージがすぐに送信されます。したがって、ロードの監視は、ドライバーがそのような保留状態にある&lt;strong&gt;ために&lt;/strong&gt;モニターが作成される関数 &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; によってトリガーされた場合に最も役立ちます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="819549857bd0aea6faaa47a0d86a011bee67d2a5" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;A&lt;/code&gt; has generated a digest and its own challenge. Those are sent together in a package to &lt;code&gt;B&lt;/code&gt;:</source>
          <target state="translated">これで、 &lt;code&gt;A&lt;/code&gt; はダイジェストと独自のチャレンジを生成しました。それらはパッケージで一緒に &lt;code&gt;B&lt;/code&gt; に送られます。</target>
        </trans-unit>
        <trans-unit id="70500b06f7a8c7563bdbdac912b202c3e8bf3468" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;complex1:foo/1&lt;/code&gt; and &lt;code&gt;complex1:bar/1&lt;/code&gt; can be implemented. Both send a message to the &lt;code&gt;complex&lt;/code&gt; process and receive the following replies:</source>
          <target state="translated">これで、 &lt;code&gt;complex1:foo/1&lt;/code&gt; および &lt;code&gt;complex1:bar/1&lt;/code&gt; を実装できます。両方にメッセージを送信します &lt;code&gt;complex&lt;/code&gt; プロセスに、次の応答を受け取ります。</target>
        </trans-unit>
        <trans-unit id="afe7e60fc725dac4a8db204c6383ede32658e8ba" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;complex5:foo/1&lt;/code&gt; and &lt;code&gt;complex5:bar/1&lt;/code&gt; can be implemented. Both send a message to the &lt;code&gt;complex&lt;/code&gt; process and receive the following reply:</source>
          <target state="translated">これで、 &lt;code&gt;complex5:foo/1&lt;/code&gt; および &lt;code&gt;complex5:bar/1&lt;/code&gt; を実装できます。どちらも &lt;code&gt;complex&lt;/code&gt; プロセスにメッセージを送信し、次の応答を受け取ります。</target>
        </trans-unit>
        <trans-unit id="1d972f3ac97809e6ef3b16135443e10b7f75eb60" translate="yes" xml:space="preserve">
          <source>Now &lt;code&gt;format_temps(Rest)&lt;/code&gt; is called with the rest of the list as an argument. This way of doing things is similar to the loop constructs in other languages. (Yes, this is recursion, but do not let that worry you.) So the same &lt;code&gt;format_temps&lt;/code&gt; function is called again, this time &lt;code&gt;City&lt;/code&gt; gets the value &lt;code&gt;{cape_town,{f,70}}&lt;/code&gt; and the same procedure is repeated as before. This is done until the list becomes empty, that is [], which causes the first clause &lt;code&gt;format_temps([])&lt;/code&gt; to match. This simply returns (results in) the atom &lt;code&gt;ok&lt;/code&gt;, so the program ends.</source>
          <target state="translated">これで、 &lt;code&gt;format_temps(Rest)&lt;/code&gt; がリストの残りの部分を引数として呼び出されます。この方法は、他の言語のループ構造に似ています。（はい、これは再帰ですが心配する必要はありません。）したがって、同じ &lt;code&gt;format_temps&lt;/code&gt; 関数が再度呼び出され、今度は &lt;code&gt;City&lt;/code&gt; が値 &lt;code&gt;{cape_town,{f,70}}&lt;/code&gt; を取得し、同じ手順が以前と同じように繰り返されます。これは、リストが空になるまで、つまり[]になるまで行われます。これにより、最初の句 &lt;code&gt;format_temps([])&lt;/code&gt; が一致します。これは単にアトムを返す（結果） &lt;code&gt;ok&lt;/code&gt; をため、プログラムは終了します。</target>
        </trans-unit>
        <trans-unit id="f056c1e349914f861b0ec8d256143b66ef033fa2" translate="yes" xml:space="preserve">
          <source>Now Peter logs on at c1@bilbo:</source>
          <target state="translated">ピーターはc1@bilboでログインしています。</target>
        </trans-unit>
        <trans-unit id="3ad12f32c3c04aabc045c91300983e1a4fd664c4" translate="yes" xml:space="preserve">
          <source>Now Peter sends Fred a message:</source>
          <target state="translated">今、ピーターはフレッドにメッセージを送っています。</target>
        </trans-unit>
        <trans-unit id="229ad98b8db4a57370d88832d5c57bc6f3753fe1" translate="yes" xml:space="preserve">
          <source>Now a function has to be added to find the cities with the maximum and minimum temperatures. The following program is not the most efficient way of doing this as you walk through the list of cities four times. But it is better to first strive for clarity and correctness and to make programs efficient only if needed.</source>
          <target state="translated">これで、最高気温と最低気温の都市を見つける機能を追加しなければなりません。以下のプログラムは、都市のリストを4回歩くので、最も効率的な方法ではありません。しかし,まず明確さと正確さを追求し,必要な場合にのみ効率的なプログラムを作ることを心がけた方がよいでしょう.</target>
        </trans-unit>
        <trans-unit id="b4bcc5baaf2e6bf86762a62f818283a767c38c4d" translate="yes" xml:space="preserve">
          <source>Now an &lt;code&gt;ETERM&lt;/code&gt; struct that represents the integer result can be constructed using the function &lt;code&gt;erl_mk_int()&lt;/code&gt; from &lt;code&gt;erl_eterm&lt;/code&gt;. The function &lt;code&gt;erl_format()&lt;/code&gt; from the module &lt;code&gt;erl_format&lt;/code&gt; can also be used:</source>
          <target state="translated">今 &lt;code&gt;ETERM&lt;/code&gt; の整数結果を表す構造体は、関数用いて構築することができる &lt;code&gt;erl_mk_int()&lt;/code&gt; をから &lt;code&gt;erl_eterm&lt;/code&gt; 。モジュール &lt;code&gt;erl_format&lt;/code&gt; の関数 &lt;code&gt;erl_format()&lt;/code&gt; も使用できます。</target>
        </trans-unit>
        <trans-unit id="0d18575f2f97b95d7041b4a039a472881d09e334" translate="yes" xml:space="preserve">
          <source>Now an example of the ping pong example using links to terminate &quot;pong&quot;:</source>
          <target state="translated">では、「ポン」を終了させるためのリンクを使ったピンポンの例です。</target>
        </trans-unit>
        <trans-unit id="b5cee5cfc515b6296349cc8ee7e0cb8ec6901dca" translate="yes" xml:space="preserve">
          <source>Now an example of this when working with lists - reversing the order of a list:</source>
          <target state="translated">リストを扱うときの例として、リストの順序を逆にしてみましょう。</target>
        </trans-unit>
        <trans-unit id="df7fd43be1dfcb89d9363916c80f74e8a91feb79" translate="yes" xml:space="preserve">
          <source>Now assume that the interpretation of &lt;code&gt;Expression&lt;/code&gt; is a set of calls. If the named type is more general than the expression type, say &lt;code&gt;Mod&lt;/code&gt; and &lt;code&gt;Fun&lt;/code&gt; respectively, then the interpretation of the cast expression is the set of calls (M1, M2) such that the interpretation of the expression contains a call from some function of M1 to some function of M2. If the named type is more special than the expression type, say &lt;code&gt;Fun&lt;/code&gt; and &lt;code&gt;Mod&lt;/code&gt;, then the interpretation is the set of all function calls (F1, F2) such that the interpretation of the expression contains a call (M1, M2) and F1 is a function of M1 and F2 is a function of M2 (in &lt;code&gt;modules&lt;/code&gt; mode, there are no functions calls, so a cast to &lt;code&gt;Fun&lt;/code&gt; always yields an empty set). Again, the conversions to and from applications and releases work analogously.</source>
          <target state="translated">次に、 &lt;code&gt;Expression&lt;/code&gt; の解釈が一連の呼び出しであると仮定します。名前付きの型が式の型よりも一般的である場合（それぞれ &lt;code&gt;Mod&lt;/code&gt; と &lt;code&gt;Fun&lt;/code&gt; など）、キャスト式の解釈は一連の呼び出し（M1、M2）であり、式の解釈にはM1の関数からの呼び出しが含まれます。 M2のいくつかの機能に。名前付きの型が式の型よりも特別である場合（ &lt;code&gt;Fun&lt;/code&gt; や &lt;code&gt;Mod&lt;/code&gt; など）、解釈はすべての関数呼び出し（F1、F2）のセットであり、式の解釈には呼び出し（M1、M2）が含まれ、F1はM1とF2の関数はM2の関数です（ &lt;code&gt;modules&lt;/code&gt; モードでは、関数呼び出しがないため、 &lt;code&gt;Fun&lt;/code&gt; は常に空のセットを生成します）。繰り返しになりますが、アプリケーションやリリースとの間の変換は同様に機能します。</target>
        </trans-unit>
        <trans-unit id="d27e97cc64e73bbb29e8593d9319f121ee940fec" translate="yes" xml:space="preserve">
          <source>Now back to the ping pong example.</source>
          <target state="translated">さて、ピンポンの例に戻ります。</target>
        </trans-unit>
        <trans-unit id="e1c4d378028d5d21080c935ee35d85591b2310e0" translate="yes" xml:space="preserve">
          <source>Now change directory into the base directory and set the &lt;code&gt;$ERL_TOP&lt;/code&gt; variable.</source>
          <target state="translated">次に、ディレクトリをベースディレクトリに変更し、 &lt;code&gt;$ERL_TOP&lt;/code&gt; 変数を設定します。</target>
        </trans-unit>
        <trans-unit id="8740487b8c6e4f56dfebcaaf8cf6bd3325bab300" translate="yes" xml:space="preserve">
          <source>Now for a larger example to consolidate what you have learnt so far. Assume that you have a list of temperature readings from a number of cities in the world. Some of them are in Celsius and some in Fahrenheit (as in the previous list). First let us convert them all to Celsius, then let us print the data neatly.</source>
          <target state="translated">さて、これまでに学んだことをまとめるために、もっと大きな例を挙げてみましょう。世界のいくつかの都市の気温のリストを持っているとしましょう。その中のいくつかは摂氏であり、いくつかは華氏である(先ほどのリストのように)。まず,それらをすべて摂氏に変換してから,データをきれいに印刷してみましょう.</target>
        </trans-unit>
        <trans-unit id="960dcce598e07679e1563922d8c8ce1be7e2353e" translate="yes" xml:space="preserve">
          <source>Now for a larger example with a simple &quot;messenger&quot;. The messenger is a program that allows users to log in on different nodes and send simple messages to each other.</source>
          <target state="translated">では、簡単な「メッセンジャー」を使った大きな例を見てみましょう。メッセンジャーは、ユーザーが異なるノードにログインして、お互いに簡単なメッセージを送信できるようにするプログラムです。</target>
        </trans-unit>
        <trans-unit id="8f9a8082924a3a55b208b60dc3c2a35c271485ed" translate="yes" xml:space="preserve">
          <source>Now for a more complicated example, the factorial of a number. For example, the factorial of 4 is 4 * 3 * 2 * 1, which equals 24.</source>
          <target state="translated">さて、もっと複雑な例として、数の階乗を挙げてみましょう。例えば、4の倍数は4*3*2*1で、24に等しくなります。</target>
        </trans-unit>
        <trans-unit id="85b87f3295c00771011c50c29b24763361547f32" translate="yes" xml:space="preserve">
          <source>Now let us get back to the cities and temperatures, but take a more structured approach this time. First let us convert the whole list to Celsius as follows:</source>
          <target state="translated">さて、都市と気温の話に戻りますが、今回はもう少し構造的なアプローチをしてみましょう。まず、リスト全体を以下のように摂氏に変換してみましょう。</target>
        </trans-unit>
        <trans-unit id="f815262fb97682c5acd6fb931562748d09976dd2" translate="yes" xml:space="preserve">
          <source>Now let us get back to the first two lines of the code. Erlang programs are written in files. Each file contains an Erlang &lt;strong&gt;module&lt;/strong&gt;. The first line of code in the module is the module name (see &lt;code&gt;Modules&lt;/code&gt;):</source>
          <target state="translated">コードの最初の2行に戻りましょう。Erlangプログラムはファイルに書き込まれます。各ファイルにはErlang &lt;strong&gt;モジュール&lt;/strong&gt;が含まれてい&lt;strong&gt;ます&lt;/strong&gt;。モジュールのコードの最初の行はモジュール名です（ &lt;code&gt;Modules&lt;/code&gt; 参照）：</target>
        </trans-unit>
        <trans-unit id="0937bc21f5c355b7556a59cf5f4dbd1a5ec043f5" translate="yes" xml:space="preserve">
          <source>Now let us look at the process &quot;ping&quot;. Recall that it was started by executing:</source>
          <target state="translated">ここで、&quot;ping &quot;というプロセスを見てみましょう。実行することで起動したことを思い出してください。</target>
        </trans-unit>
        <trans-unit id="0930d4eadca76ecb3a8d6bfa6d074f842ec248fa" translate="yes" xml:space="preserve">
          <source>Now run the program:</source>
          <target state="translated">今すぐプログラムを実行してください。</target>
        </trans-unit>
        <trans-unit id="55eb0e0626fb4ef4258288a934f71110a41abd31" translate="yes" xml:space="preserve">
          <source>Now the &quot;pong&quot; process on gollum is started:</source>
          <target state="translated">これでゴラムの「ポン」処理が開始されました。</target>
        </trans-unit>
        <trans-unit id="5f18e66183fccf43dd04a3319e9abe480c44266d" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;relup&lt;/code&gt; file can be generated:</source>
          <target state="translated">これで、 &lt;code&gt;relup&lt;/code&gt; ファイルを生成できます。</target>
        </trans-unit>
        <trans-unit id="419ad4c19e6962a17e264cf0565e8680fba59965" translate="yes" xml:space="preserve">
          <source>Now the &lt;code&gt;tut2&lt;/code&gt; program is hardly good programming style. Consider:</source>
          <target state="translated">現在、 &lt;code&gt;tut2&lt;/code&gt; プログラムはプログラミングスタイルとしてはあまり優れていません。考慮してください：</target>
        </trans-unit>
        <trans-unit id="034e7984504e96eaaa52341007b573729c1bfa18" translate="yes" xml:space="preserve">
          <source>Now the C node can be initiated. If short node names are used, this is done by calling &lt;code&gt;erl_connect_init()&lt;/code&gt;:</source>
          <target state="translated">これで、Cノードを開始できます。短いノード名が使用されている場合、これは &lt;code&gt;erl_connect_init()&lt;/code&gt; を呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="cdf6ba8b610923726e867dc5eac6994fcbdfa5a4" translate="yes" xml:space="preserve">
          <source>Now the C node server can accept connections from Erlang nodes:</source>
          <target state="translated">これでCノードサーバはErlangノードからの接続を受け付けることができるようになりました。</target>
        </trans-unit>
        <trans-unit id="3630e70ae8e40d246b34002925292898bb67186e" translate="yes" xml:space="preserve">
          <source>Now we come to something more interesting:</source>
          <target state="translated">さて、もっと面白いものに行き着きました。</target>
        </trans-unit>
        <trans-unit id="790582ffcd379351fda4ad80a8805b29abc3d15b" translate="yes" xml:space="preserve">
          <source>Now we have a target system that can be started in various ways. We start it as a &lt;strong&gt;basic target system&lt;/strong&gt; by invoking:</source>
          <target state="translated">これで、さまざまな方法で起動できるターゲットシステムが完成しました。&lt;strong&gt;基本的な対象システム&lt;/strong&gt;としてスタート&lt;strong&gt;&lt;/strong&gt;呼び出すことで起動します。</target>
        </trans-unit>
        <trans-unit id="07e2005a0a6deb7487edffb7259d4bbae161649b" translate="yes" xml:space="preserve">
          <source>Now we look at another interesting pseudo function, &lt;code&gt;garbage_collect&lt;/code&gt;:</source>
          <target state="translated">次に、別の興味深い疑似関数 &lt;code&gt;garbage_collect&lt;/code&gt; を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="7baae9db7349907407d97b8497ef107b8eef0dbb" translate="yes" xml:space="preserve">
          <source>Now we want to read data from the table. Function &lt;code&gt;get_until/5&lt;/code&gt; reads data and applies the function until it says that it is done. The result is sent back to the client:</source>
          <target state="translated">次に、テーブルからデータを読み取ります。関数 &lt;code&gt;get_until/5&lt;/code&gt; はデータを読み取り、完了したと表示されるまで関数を適用します。結果はクライアントに送り返されます：</target>
        </trans-unit>
        <trans-unit id="841ad6881ed808c0b00a3ce8e4425eac2fdd57ad" translate="yes" xml:space="preserve">
          <source>Now when the list is converted, a function to print it is added:</source>
          <target state="translated">これでリストが変換されたときに、それを印刷する関数が追加されました。</target>
        </trans-unit>
        <trans-unit id="f946da2eb954f3f3431f7eaa1a17198b4a4bcad5" translate="yes" xml:space="preserve">
          <source>Now you are set up for some Unicode input and output. The simplest thing to do is to enter a string in the shell:</source>
          <target state="translated">これで、Unicodeの入力と出力ができるようになりました。一番簡単なのは、シェルに文字列を入力することです。</target>
        </trans-unit>
        <trans-unit id="4101ddb4b1ba4c623fe01975aae255730951fb95" translate="yes" xml:space="preserve">
          <source>Now you can check which erlc you have by writing &lt;code&gt;type erlc&lt;/code&gt; in your shell. It should reside in &lt;code&gt;$ERL_TOP/erts/etc/win32/cygwin_tools&lt;/code&gt; or &lt;code&gt;$ERL_TOP/erts/etc/win32/msys_tools&lt;/code&gt;.</source>
          <target state="translated">これで、シェルに &lt;code&gt;type erlc&lt;/code&gt; を書き込むことにより、使用しているerlcを確認できます。それは内に存在する必要があります &lt;code&gt;$ERL_TOP/erts/etc/win32/cygwin_tools&lt;/code&gt; または &lt;code&gt;$ERL_TOP/erts/etc/win32/msys_tools&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a6fd06da4ec350e2c1cd2afa53dc7213e2209fc9" translate="yes" xml:space="preserve">
          <source>Now you will have a file called &lt;code&gt;otp_win32_21.exe&lt;/code&gt; or &lt;code&gt;otp_win64_21.exe&lt;/code&gt; in the &lt;code&gt;&amp;lt;installation directory&amp;gt;&lt;/code&gt;, i.e. &lt;code&gt;$ERL_TOP/release/win32&lt;/code&gt;.</source>
          <target state="translated">これで、 &lt;code&gt;&amp;lt;installation directory&amp;gt;&lt;/code&gt; に &lt;code&gt;otp_win32_21.exe&lt;/code&gt; または &lt;code&gt;otp_win64_21.exe&lt;/code&gt; というファイル、つまり &lt;code&gt;$ERL_TOP/release/win32&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="716d0540851d08f95b750091b9b63ae2e0b978fa" translate="yes" xml:space="preserve">
          <source>Now, &lt;code&gt;fact(0)&lt;/code&gt; is called, and the function clauses are scanned sequentially again. First, the pattern &lt;code&gt;N&lt;/code&gt; is matched against 0. The matching succeeds, but the guard (&lt;code&gt;N&amp;gt;0&lt;/code&gt;) is false. Second, the pattern 0 is matched against 0. The matching succeeds and the body is evaluated:</source>
          <target state="translated">これで、 &lt;code&gt;fact(0)&lt;/code&gt; が呼び出され、関数句が再び順次スキャンされます。最初に、パターン &lt;code&gt;N&lt;/code&gt; は0と照合されます。照合は成功しますが、ガード（ &lt;code&gt;N&amp;gt;0&lt;/code&gt; ）は偽です。次に、パターン0が0と照合されます。照合は成功し、本体が評価されます。</target>
        </trans-unit>
        <trans-unit id="98445b1d7f9952b03aea3c602d6261fd2d8aa394" translate="yes" xml:space="preserve">
          <source>Now, back to the example where we wanted to make the output more arranged. With the template:</source>
          <target state="translated">さて、出力をもっとアレンジしたい例に戻りましょう。テンプレートを使って</target>
        </trans-unit>
        <trans-unit id="0ccacd93bad121d635d3ee2cf04a4a93d66d91bb" translate="yes" xml:space="preserve">
          <source>Now, imagine that as &lt;code&gt;m1&lt;/code&gt; is a library module, it is also often used by system &lt;code&gt;s2&lt;/code&gt;. Test run &lt;code&gt;s2&lt;/code&gt; does not specifically test &lt;code&gt;m1&lt;/code&gt;, but it can still be interesting to see which parts of &lt;code&gt;m1&lt;/code&gt; that are covered by the &lt;code&gt;s2&lt;/code&gt; tests. To do this, &lt;code&gt;m1&lt;/code&gt; can be included also in the cover specification of &lt;code&gt;s2&lt;/code&gt; as follows:</source>
          <target state="translated">ここで、 &lt;code&gt;m1&lt;/code&gt; はライブラリモジュールであるため、システム &lt;code&gt;s2&lt;/code&gt; でも使用されることが多いと想像してください。テスト実行 &lt;code&gt;s2&lt;/code&gt; は &lt;code&gt;m1&lt;/code&gt; を具体的にテストしませんが、 &lt;code&gt;s2&lt;/code&gt; テストでカバーされる &lt;code&gt;m1&lt;/code&gt; の部分を確認することは興味深いことです。これを行うには、 &lt;code&gt;m1&lt;/code&gt; を &lt;code&gt;s2&lt;/code&gt; のカバー仕様にも含めることができます。ます。</target>
        </trans-unit>
        <trans-unit id="33cc55d98c68e73ea0d743377235f62740c45f57" translate="yes" xml:space="preserve">
          <source>Now, such a call to &lt;code&gt;monitor&lt;/code&gt; will instead succeed and a monitor is created. But the monitor will only supervise the connection. That is, a &lt;code&gt;{'DOWN', _, process, _, noconnection}&lt;/code&gt; is the only message that may be received, as the primitive node have no way of reporting the status of the monitored process.</source>
          <target state="translated">現在、このような &lt;code&gt;monitor&lt;/code&gt; の呼び出しは成功し、モニターが作成されます。ただし、モニターは接続を監視するだけです。つまり、プリミティブノードには監視対象プロセスのステータスを報告する方法がないため、受信できるメッセージは &lt;code&gt;{'DOWN', _, process, _, noconnection}&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="815213b4b20368b41071811d96af96cae0ecf6af" translate="yes" xml:space="preserve">
          <source>Now, the fold and the map can be done at the same time:</source>
          <target state="translated">これで、折り返しと地図が同時にできるようになりました。</target>
        </trans-unit>
        <trans-unit id="2bd172c2b14d17bdd3e0bc285216399b7bf359fd" translate="yes" xml:space="preserve">
          <source>Nowadays, the compiler rewrites list comprehensions into an ordinary recursive function. Using a tail-recursive function with a reverse at the end would be still faster. Or would it? That leads us to the myth that tail-recursive functions are faster than body-recursive functions.</source>
          <target state="translated">現在、コンパイラはリスト内包を通常の再帰関数に書き換えています。末尾再帰的な関数を使用して、最後に逆引きをした方がまだ速いでしょう。それともそうでしょうか?これは、末尾再帰関数はボディ再帰関数よりも速いという神話につながっています。</target>
        </trans-unit>
        <trans-unit id="b2b91a3dd3c62a3480c6550b4ca1758c4ca00cfd" translate="yes" xml:space="preserve">
          <source>Nullary callback function &lt;code&gt;PostFun&lt;/code&gt; is called once after the table was last read. The return value, which is caught, is ignored. If &lt;code&gt;PreFun&lt;/code&gt; has been called for a table, &lt;code&gt;PostFun&lt;/code&gt; is guaranteed to be called for that table, even if the evaluation of the query fails for some reason.</source>
          <target state="translated">Nullaryコールバック関数 &lt;code&gt;PostFun&lt;/code&gt; は、テーブルが最後に読み取られた後に一度呼び出されます。キャッチされた戻り値は無視されます。 &lt;code&gt;PreFun&lt;/code&gt; がテーブルに対して呼び出された場合、 &lt;code&gt;PostFun&lt;/code&gt; 、クエリの評価が何らかの理由で失敗しても、そのテーブルのために呼び出されることが保証されています。</target>
        </trans-unit>
        <trans-unit id="f11c0821f05eac62af0f028d86dc3849bfa606ca" translate="yes" xml:space="preserve">
          <source>Nullsoft NSIS installer system. You need this to build the self installing package. It's a free open source installer that's much nicer to use than the commercial Wise and Install shield installers. This is the installer we use for commercial releases as well.</source>
          <target state="translated">Nullsoft NSIS インストーラシステム。セルフインストールパッケージを構築するにはこれが必要です。これはフリーのオープンソースインストーラで、商用のWiseやInstall shieldインストーラよりも使いやすいです。これは、私たちが商用リリースでも使用しているインストーラです。</target>
        </trans-unit>
        <trans-unit id="b7baa1d40c4ea29afc9098732bffee2a861a6c44" translate="yes" xml:space="preserve">
          <source>Number</source>
          <target state="translated">Number</target>
        </trans-unit>
        <trans-unit id="576c424c360acfd1497ea21294f140f3cec38c19" translate="yes" xml:space="preserve">
          <source>Number ::= - same as non-negative Erlang integers -</source>
          <target state="translated">数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ-数 ::=-非負のErlangの整数と同じ</target>
        </trans-unit>
        <trans-unit id="436ff201e33fbebe2f89621894a2abd1c168a9b3" translate="yes" xml:space="preserve">
          <source>Number of acquisitions of this lock.</source>
          <target state="translated">このロックの取得数。</target>
        </trans-unit>
        <trans-unit id="156e52de6b6c52ca3695d88a4c555445a9d76e09" translate="yes" xml:space="preserve">
          <source>Number of arguments to a function or fun</source>
          <target state="translated">関数や関数の引数の数</target>
        </trans-unit>
        <trans-unit id="ed917e86d9f18f03dbcccf6e65ab949d58ed88b7" translate="yes" xml:space="preserve">
          <source>Number of bytes received by the socket.</source>
          <target state="translated">ソケットが受信したバイト数。</target>
        </trans-unit>
        <trans-unit id="42046ff77420f4d17e7571e95bf522b706d2b214" translate="yes" xml:space="preserve">
          <source>Number of bytes sent from the socket.</source>
          <target state="translated">ソケットから送信されたバイト数。</target>
        </trans-unit>
        <trans-unit id="abaddc1ab230437389138952dc901cca420ce997" translate="yes" xml:space="preserve">
          <source>Number of calls from exported functions.</source>
          <target state="translated">エクスポートされた関数からの呼び出し回数。</target>
        </trans-unit>
        <trans-unit id="b6dc3a193a64eb663d8300e32005cd15708c2213" translate="yes" xml:space="preserve">
          <source>Number of collisions when a thread tried to acquire this lock. This is when a trylock is EBUSY, a write try on read held rw_lock, a try read on write held rw_lock, a thread tries to lock an already locked lock. (Internal states supervises this).</source>
          <target state="translated">スレッドがこのロックを取得しようとしたときの衝突回数。これは、trylockがEBUSYである場合、read heldされたrw_lockに対するwrite try、write heldされたrw_lockに対するread try、スレッドが既にロックされているロックをロックしようとした場合です。内部状態がこれを監視しています)。</target>
        </trans-unit>
        <trans-unit id="b5befc3bf1ef58e74135162c0668ade7be2434a8" translate="yes" xml:space="preserve">
          <source>Number of data chunks pending receipt</source>
          <target state="translated">受信待ちのデータチャンク数</target>
        </trans-unit>
        <trans-unit id="1788092af3b8a586296aa9df2406a866bfcd033f" translate="yes" xml:space="preserve">
          <source>Number of inbound streams</source>
          <target state="translated">インバウンドストリームの数</target>
        </trans-unit>
        <trans-unit id="0d39785385699f304d2bb821ff68b08bc05cf178" translate="yes" xml:space="preserve">
          <source>Number of lines (processes) to display.</source>
          <target state="translated">表示する行数(プロセス)。</target>
        </trans-unit>
        <trans-unit id="c7246b6b50502576f0a38d8a27451c68c1a94bf1" translate="yes" xml:space="preserve">
          <source>Number of links to the file (this is always 1 for file systems that have no concept of links).</source>
          <target state="translated">ファイルへのリンク数(リンクの概念がないファイルシステムでは常に1)。</target>
        </trans-unit>
        <trans-unit id="86b7d74929b08d37a5d6bbdc6ce558fa981b1e22" translate="yes" xml:space="preserve">
          <source>Number of milliseconds after which a transport connection is terminated following an incoming DPR if the peer does not close the connection.</source>
          <target state="translated">ピアが接続を閉じなかった場合、着信DPRに続いてトランスポート接続が終了するまでのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="ad84b78a0ee803a8e44abc5c45068c551a8be685" translate="yes" xml:space="preserve">
          <source>Number of milliseconds after which a transport connection is terminated following an outgoing DPR if DPA is not received.</source>
          <target state="translated">DPA を受信しなかった場合、発信 DPR に続いてトランスポート接続が終了するまでのミリ秒数。</target>
        </trans-unit>
        <trans-unit id="d143428966dbf2e9b35f53fde260f63542ea0ceb" translate="yes" xml:space="preserve">
          <source>Number of milliseconds after which a transport process having an established transport connection will be terminated if the expected capabilities exchange message (CER or CEA) is not received from the peer. For a connecting transport, the timing of connection attempts is governed by &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; expiry. For a listening transport, the peer determines the timing.</source>
          <target state="translated">期待される機能交換メッセージ（CERまたはCEA）がピアから受信されない場合に、確立されたトランスポート接続を持つトランスポートプロセスが終了するまでのミリ秒数。接続トランスポートの場合、接続試行のタイミングは、 &lt;code&gt;&lt;a href=&quot;#connect_timer&quot;&gt;connect_timer&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#watchdog_timer&quot;&gt;watchdog_timer&lt;/a&gt;&lt;/code&gt; expiry によって制御されます。リスニングトランスポートの場合、ピアがタイミングを決定します。</target>
        </trans-unit>
        <trans-unit id="2a4f3d8f10ea95abb768e6ff37dcd2d263075314" translate="yes" xml:space="preserve">
          <source>Number of milliseconds after which the request should timeout. Defaults to 5000.</source>
          <target state="translated">リクエストがタイムアウトするまでのミリ秒数。デフォルトは 5000 です。</target>
        </trans-unit>
        <trans-unit id="4d5f53d55e482f8b255f961e8335b47ecc984cf9" translate="yes" xml:space="preserve">
          <source>Number of milliseconds after which the transport process is terminated if DPA has not been received. Defaults to the value of &lt;code&gt;&lt;a href=&quot;#dpa_timeout&quot;&gt;dpa_timeout&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">DPAが受信されなかった場合にトランスポートプロセスが終了するまでのミリ秒数。デフォルトは &lt;code&gt;&lt;a href=&quot;#dpa_timeout&quot;&gt;dpa_timeout&lt;/a&gt;&lt;/code&gt; の値です。</target>
        </trans-unit>
        <trans-unit id="8b185f82b1b5bfaa8854d705b869060e9935cb3a" translate="yes" xml:space="preserve">
          <source>Number of milliseconds left until the message would have been sent.</source>
          <target state="translated">メッセージが送信されるまでに残されたミリ秒数。</target>
        </trans-unit>
        <trans-unit id="1d3a9ba15cb753485b84a2ad953f8633c6b1bd33" translate="yes" xml:space="preserve">
          <source>Number of outbound streams</source>
          <target state="translated">アウトバウンドストリームの数</target>
        </trans-unit>
        <trans-unit id="7cc577409a125b78cfe2310bff5b33c90e99d779" translate="yes" xml:space="preserve">
          <source>Number of packets received by the socket.</source>
          <target state="translated">ソケットが受信したパケット数。</target>
        </trans-unit>
        <trans-unit id="6cc46ab9febecbfd1c32816e8e1c042fb0b2037b" translate="yes" xml:space="preserve">
          <source>Number of packets sent from the socket.</source>
          <target state="translated">ソケットから送信されたパケット数。</target>
        </trans-unit>
        <trans-unit id="0b905814d3355622795966fbb7336f35dc784aab" translate="yes" xml:space="preserve">
          <source>Number of transport processes to start. For a listening transport, determines the size of the pool of accepting transport processes, a larger number being desirable for processing multiple concurrent peer connection attempts. For a connecting transport, determines the number of connections to the peer in question that will be attempted to be establshed: the &lt;code&gt;&lt;a href=&quot;#service_opt&quot;&gt;service_opt()&lt;/a&gt;&lt;/code&gt;: &lt;code&gt;restrict_connections&lt;/code&gt; should also be configured on the service in question to allow multiple connections to the same peer.</source>
          <target state="translated">開始するトランスポートプロセスの数。リスニングトランスポートの場合、受け入れトランスポートプロセスのプールのサイズを決定します。複数の同時ピア接続試行を処理するには、より大きい数が望ましいです。接続するトランスポートの場合、確立しようとする問題のピアへの接続数を決定します。同じピアへの複数の接続を許可するには、問題のサービスで &lt;code&gt;&lt;a href=&quot;#service_opt&quot;&gt;service_opt()&lt;/a&gt;&lt;/code&gt; ： &lt;code&gt;restrict_connections&lt;/code&gt; も構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="66bc96661d8742ae05329a683dcb3f84683507cc" translate="yes" xml:space="preserve">
          <source>Number of unacked data chunks</source>
          <target state="translated">アンバックされていないデータチャンクの数</target>
        </trans-unit>
        <trans-unit id="0b1af9772e5bb4a2a3309eeb320fd315552f0cb5" translate="yes" xml:space="preserve">
          <source>NumberOfAtomCacheRefs/2+1 | 0</source>
          <target state="translated">NumberOfAtomCacheRefs/2+1 | 0</target>
        </trans-unit>
        <trans-unit id="742119a1b0ee0bffbdb7123efbae98b4d4cf4508" translate="yes" xml:space="preserve">
          <source>ODBC Data Type</source>
          <target state="translated">ODBCデータ型</target>
        </trans-unit>
        <trans-unit id="a10c3f25c81a857c7ec7c54210e6931745d9810e" translate="yes" xml:space="preserve">
          <source>OPTIONAL</source>
          <target state="translated">OPTIONAL</target>
        </trans-unit>
        <trans-unit id="fe255781a97feef0174934e6b7b818e19746a2b3" translate="yes" xml:space="preserve">
          <source>OPTIONAL; if this function is defined, then &lt;code&gt;&lt;a href=&quot;#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt; must also be defined.</source>
          <target state="translated">オプション; この関数を定義する場合は、 &lt;code&gt;&lt;a href=&quot;#Module:end_per_group-2&quot;&gt;end_per_group/2&lt;/a&gt;&lt;/code&gt; も定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="f7020f99e2ebb79e7dec7703e4dde7e6f7d3ab62" translate="yes" xml:space="preserve">
          <source>OPTIONAL; if this function is defined, then &lt;code&gt;&lt;a href=&quot;#Module:end_per_suite-1&quot;&gt;end_per_suite/1&lt;/a&gt;&lt;/code&gt; must also be defined.</source>
          <target state="translated">オプション; この関数が定義されている場合、 &lt;code&gt;&lt;a href=&quot;#Module:end_per_suite-1&quot;&gt;end_per_suite/1&lt;/a&gt;&lt;/code&gt; も定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="cb2b3bf247d98944fbe75b41c4379902fac4c0ed" translate="yes" xml:space="preserve">
          <source>OPTIONAL; if this function is defined, then &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; must also be defined.</source>
          <target state="translated">オプション; この関数を定義する場合は、 &lt;code&gt;&lt;a href=&quot;#Module:end_per_testcase-2&quot;&gt;end_per_testcase/2&lt;/a&gt;&lt;/code&gt; も定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="811daf24de9dd5fef2b06f207387f6fa44818576" translate="yes" xml:space="preserve">
          <source>OPTIONAL; if this function is defined, then &lt;code&gt;&lt;a href=&quot;#Module:init_per_group-2&quot;&gt;init_per_group/2&lt;/a&gt;&lt;/code&gt; must also be defined.</source>
          <target state="translated">オプション; この関数を定義する場合は、 &lt;code&gt;&lt;a href=&quot;#Module:init_per_group-2&quot;&gt;init_per_group/2&lt;/a&gt;&lt;/code&gt; も定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="09f3a1ee83f65c6b4212698c759ac143edb39e85" translate="yes" xml:space="preserve">
          <source>OPTIONAL; if this function is defined, then &lt;code&gt;&lt;a href=&quot;#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; must also be defined.</source>
          <target state="translated">オプション; この関数を定義する場合は、 &lt;code&gt;&lt;a href=&quot;#Module:init_per_suite-1&quot;&gt;init_per_suite/1&lt;/a&gt;&lt;/code&gt; も定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="da40ab1589249e13637d8f194c28172da2bf88bf" translate="yes" xml:space="preserve">
          <source>OPTIONAL; if this function is defined, then &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; must also be defined.</source>
          <target state="translated">オプション; この関数を定義する場合は、 &lt;code&gt;&lt;a href=&quot;#Module:init_per_testcase-2&quot;&gt;init_per_testcase/2&lt;/a&gt;&lt;/code&gt; も定義する必要があります。</target>
        </trans-unit>
        <trans-unit id="34d5721686b9afbeb78f01e3fc667ce57e89931f" translate="yes" xml:space="preserve">
          <source>OS X (Darwin)</source>
          <target state="translated">オーエスエックス(ダーウィン</target>
        </trans-unit>
        <trans-unit id="70a99f3723b01cca80b99d24bb0c2a412b59bf1d" translate="yes" xml:space="preserve">
          <source>OS X 10.6.x / Snow Leopard, OS X 10.7.x / Lion and probably newer versions.</source>
          <target state="translated">OS X 10.6.x/Snow Leopard、OS X 10.7.x/Lionとおそらく新しいバージョン。</target>
        </trans-unit>
        <trans-unit id="337dc1124caacdd89c2450e56842d52c3f0e6fad" translate="yes" xml:space="preserve">
          <source>OS X/Darwin: Darwin 9.8.0 in 32-bit mode should work.</source>
          <target state="translated">OS X/Darwinです。32ビットモードのDarwin 9.8.0は動作するはずです。</target>
        </trans-unit>
        <trans-unit id="164a0c0837ae1b007b5e17a0056a34ade5f8ce3b" translate="yes" xml:space="preserve">
          <source>OS messages are formatted as a tuple &lt;code&gt;{Time, Category, Facility, Severity, Message}&lt;/code&gt;:</source>
          <target state="translated">OSメッセージはタプル &lt;code&gt;{Time, Category, Facility, Severity, Message}&lt;/code&gt; としてフォーマットされます：</target>
        </trans-unit>
        <trans-unit id="1d1d16f43b9dc83cb0dfdf26c6b908a0323be7d3" translate="yes" xml:space="preserve">
          <source>OS system time can also be retreived by &lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;system_time/0&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#system_time-1&quot;&gt;system_time/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">OSシステム時間は、 &lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;system_time/0&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#system_time-1&quot;&gt;system_time/1&lt;/a&gt;&lt;/code&gt; でも取得できます。</target>
        </trans-unit>
        <trans-unit id="253b34ed7414f8bd95bdcad3ec3b4eb61f4c6738" translate="yes" xml:space="preserve">
          <source>OS system time must be correct when the user finalizes the time offset.</source>
          <target state="translated">ユーザーが時間オフセットを確定する際には、OSシステムの時刻が正しくなければなりません。</target>
        </trans-unit>
        <trans-unit id="eb8e226d4cd37fd7c5b423ed6b5c26f687955027" translate="yes" xml:space="preserve">
          <source>OTP also supports changing the internal state of behaviour processes, see &lt;code&gt;&lt;a href=&quot;#int_state&quot;&gt;Changing Internal State&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">OTPは、動作プロセスの内部状態の変更もサポートしています。内部状態の &lt;code&gt;&lt;a href=&quot;#int_state&quot;&gt;Changing Internal State&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="4d6221b6a86032737a577d124bf2adb0a2907b66" translate="yes" xml:space="preserve">
          <source>OTP and (in consequence) the Mnesia database.</source>
          <target state="translated">OTPと(結果的に)Mnesiaデータベース。</target>
        </trans-unit>
        <trans-unit id="8f1f0506b65365d10c75cb9d39c0d18910b4731c" translate="yes" xml:space="preserve">
          <source>OTP of a specific version is a set of applications of specific versions. The application versions identified by an OTP version corresponds to application versions that have been tested together by the Erlang/OTP team at Ericsson AB. An OTP system can, however, be put together with applications from different OTP versions. Such a combination of application versions has not been tested by the Erlang/OTP team. It is therefore &lt;strong&gt;always preferred to use OTP applications from one single OTP version&lt;/strong&gt;.</source>
          <target state="translated">特定のバージョンのOTPは、特定のバージョンの一連のアプリケーションです。OTPバージョンによって識別されるアプリケーションバージョンは、Ericsson ABのErlang / OTPチームによって一緒にテストされたアプリケーションバージョンに対応します。ただし、OTPシステムは、異なるOTPバージョンのアプリケーションと組み合わせることができます。このようなアプリケーションバージョンの組み合わせは、Erlang / OTPチームによってテストされていません。したがって、&lt;strong&gt;単一のOTPバージョンからOTPアプリケーションを使用する&lt;/strong&gt;ことが&lt;strong&gt;常に推奨されます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="2611693947bb5144c4c4a537a229fe14dfc567db" translate="yes" xml:space="preserve">
          <source>OTP start script example for Unix.</source>
          <target state="translated">Unix用のOTP開始スクリプトの例。</target>
        </trans-unit>
        <trans-unit id="44ed97d7d2bc021f13ae4421351ee910df8ab6f2" translate="yes" xml:space="preserve">
          <source>OTP supports a set of &lt;strong&gt;release handling instructions&lt;/strong&gt; that are used when creating &lt;code&gt;.appup&lt;/code&gt; files. The release handler understands a subset of these, the &lt;strong&gt;low-level&lt;/strong&gt; instructions. To make it easier for the user, there are also a number of &lt;strong&gt;high-level&lt;/strong&gt; instructions, which are translated to low-level instructions by &lt;code&gt;systools:make_relup&lt;/code&gt;.</source>
          <target state="translated">OTPは、 &lt;code&gt;.appup&lt;/code&gt; ファイルの作成時に使用される一連の&lt;strong&gt;リリース処理命令&lt;/strong&gt;をサポートしています。リリースハンドラは、これらのサブセットである&lt;strong&gt;低レベルの&lt;/strong&gt;命令を理解します。ユーザーにとってより簡単にするために、 &lt;code&gt;systools:make_relup&lt;/code&gt; によって低レベルの命令に変換される多数の&lt;strong&gt;高レベルの&lt;/strong&gt;命令もあります。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="9ab311b5a61d5450520dde937fd634cbc9976caf" translate="yes" xml:space="preserve">
          <source>OTP thus provides no support for changing residence modules except in the case of &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;special processes&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">したがって、OTPは、 &lt;code&gt;&lt;a href=&quot;#spec&quot;&gt;special processes&lt;/a&gt;&lt;/code&gt; 場合を除いて、レジデンスモジュールの変更をサポートしません。</target>
        </trans-unit>
        <trans-unit id="15c4e1f1a4334a82cc1247671dd99e92e6bbd166" translate="yes" xml:space="preserve">
          <source>OTP/Crypto requires that the user provides two or three items of information about the key. The application used by the user is usually on a higher level, for example in &lt;code&gt;SSL&lt;/code&gt;. If using the crypto application directly, it is required that:</source>
          <target state="translated">OTP / Cryptoでは、ユーザーがキーに関する2つまたは3つの情報項目を提供する必要があります。ユーザーが使用するアプリケーションは通常、 &lt;code&gt;SSL&lt;/code&gt; などの上位レベルにあります。暗号アプリケーションを直接使用する場合は、次のことが必要です。</target>
        </trans-unit>
        <trans-unit id="e00f6c999c0a17c02e9b5c79025ff5ac5261cb4a" translate="yes" xml:space="preserve">
          <source>Object identifier, a tuple of integers as generated by the &lt;code&gt;ASN.1&lt;/code&gt; compiler.</source>
          <target state="translated">オブジェクト識別子 &lt;code&gt;ASN.1&lt;/code&gt; コンパイラによって生成される整数のタプル。</target>
        </trans-unit>
        <trans-unit id="d389e1fd4f8140b1a2e4262dca91df97551e6b3f" translate="yes" xml:space="preserve">
          <source>Object-based programming with &lt;code&gt;Mnesia&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; によるオブジェクトベースのプログラミング</target>
        </trans-unit>
        <trans-unit id="e9756e31b402ef2beef3722149ad80b87a0cb1c1" translate="yes" xml:space="preserve">
          <source>Objects are stored and retrieved through set and get functions. The following example shows how to store integers, floats, strings, and arbitrary binary objects:</source>
          <target state="translated">オブジェクトは、set関数とget関数を介して格納および取得されます。次の例では、整数、浮動小数点、文字列、任意のバイナリオブジェクトを格納する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="13dfd2b8ca88ce5b44fe927b518926c1e0325e95" translate="yes" xml:space="preserve">
          <source>Objects can be removed from the registry:</source>
          <target state="translated">オブジェクトをレジストリから削除することができます。</target>
        </trans-unit>
        <trans-unit id="c5b9dd639a75a9d87bd4d53f043c544fbedd0e4c" translate="yes" xml:space="preserve">
          <source>Observe that E2 may differ from E if for instance there are default values defined in &lt;code&gt;my_XML_Schema.xsd&lt;/code&gt;.</source>
          <target state="translated">たとえば &lt;code&gt;my_XML_Schema.xsd&lt;/code&gt; にデフォルト値が定義されている場合、E2がEと異なる場合があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="fb56c5f19fbe9c5d32b08c312c11052dd5b634b7" translate="yes" xml:space="preserve">
          <source>Observe that the 'TerminationId' record is not used in the internal form. It has been replaced with a megaco_term_id record (defined in &quot;megaco/include/megaco.hrl&quot;).</source>
          <target state="translated">TerminationId' レコードは、内部フォームでは使用されていないことに注意してください。これは、megaco_term_idレコード(&quot;megaco/include/megaco.hrl &quot;で定義されている)で置き換えられています。</target>
        </trans-unit>
        <trans-unit id="0bd7b307bc7f8afe70fed7a42de3d9fbb7b82fbb" translate="yes" xml:space="preserve">
          <source>Observe that white space: each space, tab or line feed, between mark-up results in an xmlText record.</source>
          <target state="translated">ホワイトスペース:マークアップの間のスペース、タブ、改行は xmlText レコードになることを確認してください。</target>
        </trans-unit>
        <trans-unit id="ab7e64c97fc5b12d3a53c3eaa9ee4e2f13560916" translate="yes" xml:space="preserve">
          <source>Observer</source>
          <target state="translated">Observer</target>
        </trans-unit>
        <trans-unit id="92d3bdde80720a307b847a6b8a1080bcd444b6aa" translate="yes" xml:space="preserve">
          <source>Observer is a graphical tool for observing the characteristics of Erlang systems. Observer displays system information, application supervisor trees, process information, ETS tables, Mnesia tables and contains a front end for Erlang tracing.</source>
          <target state="translated">ObserverはErlangシステムの特性を観察するためのグラフィカルなツールです。Observerはシステム情報、アプリケーションスーパバイザツリー、プロセス情報、ETSテーブル、Mnesiaテーブルを表示し、Erlangトレース用のフロントエンドを含みます。</target>
        </trans-unit>
        <trans-unit id="28cd1180f301b3154359b73583ee4c15ce0124d5" translate="yes" xml:space="preserve">
          <source>Observer is a graphical tool for observing the characteristics of Erlang systems. The tool Observer displays system information, application supervisor trees, process information, ETS tables, Mnesia tables, and contains a front end for Erlang tracing with module &lt;code&gt;&lt;a href=&quot;ttb&quot;&gt;ttb&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Observerは、Erlangシステムの特性を観察するためのグラフィカルツールです。ツールObserverは、システム情報、アプリケーションスーパーバイザツリー、プロセス情報、ETSテーブル、Mnesiaテーブルを表示し、モジュール &lt;code&gt;&lt;a href=&quot;ttb&quot;&gt;ttb&lt;/a&gt;&lt;/code&gt; による Erlangトレースのフロントエンドを含みます。</target>
        </trans-unit>
        <trans-unit id="828b44c38dbd9a16becde3e71362fe411c4b2d3c" translate="yes" xml:space="preserve">
          <source>Obsolete flag without any effect and common misspelling for &lt;code&gt;-setcookie&lt;/code&gt;. Use &lt;code&gt;-setcookie&lt;/code&gt; instead.</source>
          <target state="translated">&lt;code&gt;-setcookie&lt;/code&gt; の効果と一般的なスペルミスのない古いフラグ。代わりに &lt;code&gt;-setcookie&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="c8219545b990a3e898482be1f33bdc7f5472c0ab" translate="yes" xml:space="preserve">
          <source>Obviously, PCRE cannot support the interpolation of Perl code. Instead, it supports special syntax for recursion of the entire pattern, and for individual subpattern recursion. After its introduction in PCRE and Python, this kind of recursion was later introduced into Perl at release 5.10.</source>
          <target state="translated">明らかに、PCREはPerlコードの補間をサポートしていません。その代わりに、パターン全体の再帰や個々のサブパターンの再帰のための特別な構文をサポートしています。PCREとPythonで導入された後、この種の再帰は後にリリース5.10でPerlに導入されました。</target>
        </trans-unit>
        <trans-unit id="b15614a1ab393e5aeea9a1c392c3fa0e2e84f379" translate="yes" xml:space="preserve">
          <source>Obviously, that code does not work if the original order of the list is important. If the order of the list must be preserved, do as follows:</source>
          <target state="translated">明らかに、リストの元の順序が重要な場合、このコードは動作しません。リストの順序を保持しなければならない場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="8e8dc61a9436adab84db0adcc2c88c413a482fca" translate="yes" xml:space="preserve">
          <source>Of ECDSA keys, only the Normally an RSA, DSA or ECDSA public key, but handling of other public keys can be added.</source>
          <target state="translated">ECDSA 鍵のうち、通常は RSA,DSA,ECDSA 公開鍵のみですが、その他の公開鍵の取り扱いを追加することができます。</target>
        </trans-unit>
        <trans-unit id="cf5975c0e8398e81740d7e6c9235666c7fc797c5" translate="yes" xml:space="preserve">
          <source>Off: Normal black and white display.</source>
          <target state="translated">オフ:通常の白黒表示。</target>
        </trans-unit>
        <trans-unit id="5e3b98e05dad157bd1a4bd5b9b0d226314cec835" translate="yes" xml:space="preserve">
          <source>Offline support - &lt;code&gt;systools&lt;/code&gt; for generating scripts and building release packages</source>
          <target state="translated">オフラインサポート- スクリプトの生成とリリースパッケージの &lt;code&gt;systools&lt;/code&gt; ためのsystools</target>
        </trans-unit>
        <trans-unit id="f14b6c908a17fd970288025ad39d8151e0e31dda" translate="yes" xml:space="preserve">
          <source>Offset from the current position.</source>
          <target state="translated">現在位置からのオフセット。</target>
        </trans-unit>
        <trans-unit id="48274bc06ce68fdb7834b5006c17db38cfd5bca3" translate="yes" xml:space="preserve">
          <source>Offset from the end of file.</source>
          <target state="translated">ファイルの末尾からのオフセット。</target>
        </trans-unit>
        <trans-unit id="c21c3314a2e6470603bd3c8f84047cb484b50ba5" translate="yes" xml:space="preserve">
          <source>Ogham</source>
          <target state="translated">Ogham</target>
        </trans-unit>
        <trans-unit id="b9c65c4bca9e4ad28b61b07b9af83fd8c0fb84c8" translate="yes" xml:space="preserve">
          <source>Ogham space mark</source>
          <target state="translated">オガムスペースマーク</target>
        </trans-unit>
        <trans-unit id="5f8e3c9a997d8c6ac6d8e0cee37f365cfccbf2c1" translate="yes" xml:space="preserve">
          <source>Ol_Chiki</source>
          <target state="translated">Ol_Chiki</target>
        </trans-unit>
        <trans-unit id="9ae910bfed0c2daf647c1a19f49b4a126bc16739" translate="yes" xml:space="preserve">
          <source>Old drivers (compiled with an &lt;code&gt;erl_driver.h&lt;/code&gt; from an ERTS version earlier than 5.9) must be updated and have to use the extended interface (with &lt;code&gt;&lt;a href=&quot;erl_driver#version_management&quot;&gt;version management&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">古いドライバー（5.9より前のERTSバージョンの &lt;code&gt;erl_driver.h&lt;/code&gt; でコンパイル）は更新する必要があり、（ &lt;code&gt;&lt;a href=&quot;erl_driver#version_management&quot;&gt;version management&lt;/a&gt;&lt;/code&gt; ）拡張インターフェースを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="157d75488b894d1cda756fa16127123d4d8b2331" translate="yes" xml:space="preserve">
          <source>OldBindType</source>
          <target state="translated">OldBindType</target>
        </trans-unit>
        <trans-unit id="7f70150bb048b630bda877379e329b1cba4ccf5d" translate="yes" xml:space="preserve">
          <source>OldBlockState</source>
          <target state="translated">OldBlockState</target>
        </trans-unit>
        <trans-unit id="dc265f2b8ca2bd1379067a84bcb36eee5f10c186" translate="yes" xml:space="preserve">
          <source>OldBoolean</source>
          <target state="translated">OldBoolean</target>
        </trans-unit>
        <trans-unit id="787f17ec93244a470977d9765b05c214ad524302" translate="yes" xml:space="preserve">
          <source>OldCpuTopology</source>
          <target state="translated">OldCpuTopology</target>
        </trans-unit>
        <trans-unit id="05284679f579d778eb76c6cb35f0adb51c1143c0" translate="yes" xml:space="preserve">
          <source>OldDirtyCPUSchedulersOnline</source>
          <target state="translated">OldDirtyCPUSchedulersOnline</target>
        </trans-unit>
        <trans-unit id="a1967122f5b0089c8c148736f325420c2e6e602a" translate="yes" xml:space="preserve">
          <source>OldMaxHeapSize</source>
          <target state="translated">OldMaxHeapSize</target>
        </trans-unit>
        <trans-unit id="44bb9d52af1c27b72d85ec222d49edbefed7f191" translate="yes" xml:space="preserve">
          <source>OldMinBinVHeapSize</source>
          <target state="translated">OldMinBinVHeapSize</target>
        </trans-unit>
        <trans-unit id="f03c39aabd48a51861a01442c2abd764c60f8791" translate="yes" xml:space="preserve">
          <source>OldMinHeapSize</source>
          <target state="translated">OldMinHeapSize</target>
        </trans-unit>
        <trans-unit id="a2eedd11d2145f39f33a241d59529adc2aae480c" translate="yes" xml:space="preserve">
          <source>OldSchedulersOnline</source>
          <target state="translated">OldSchedulersOnline</target>
        </trans-unit>
        <trans-unit id="145ae46273aca133d92d9931894007faba8a6122" translate="yes" xml:space="preserve">
          <source>OldState</source>
          <target state="translated">OldState</target>
        </trans-unit>
        <trans-unit id="d31721795f21dfce26688a7f8239a17ca4259705" translate="yes" xml:space="preserve">
          <source>Old_Italic</source>
          <target state="translated">Old_Italic</target>
        </trans-unit>
        <trans-unit id="2c0a6c802c2e969dfccf2fc785162a6f2b61c2bf" translate="yes" xml:space="preserve">
          <source>Old_North_Arabian</source>
          <target state="translated">Old_North_Arabian</target>
        </trans-unit>
        <trans-unit id="18fae1f67a0f3b95f77e39e31f33b8e9c0d5f5cb" translate="yes" xml:space="preserve">
          <source>Old_Permic</source>
          <target state="translated">Old_Permic</target>
        </trans-unit>
        <trans-unit id="40f6b23336b20230fad65810979b94941509719d" translate="yes" xml:space="preserve">
          <source>Old_Persian</source>
          <target state="translated">Old_Persian</target>
        </trans-unit>
        <trans-unit id="338432c6b8828a6dc79884aa878e0a2867c42479" translate="yes" xml:space="preserve">
          <source>Old_South_Arabian</source>
          <target state="translated">Old_South_Arabian</target>
        </trans-unit>
        <trans-unit id="3641abb7a588932eef54e644e9d1dff8f948abbf" translate="yes" xml:space="preserve">
          <source>Old_Turkic</source>
          <target state="translated">Old_Turkic</target>
        </trans-unit>
        <trans-unit id="3c4dff48e0bc069d363085bc649284833fa87dbe" translate="yes" xml:space="preserve">
          <source>Omit the &lt;code&gt;options&lt;/code&gt; and &lt;code&gt;source&lt;/code&gt; tuples in the list returned by &lt;code&gt;Module:module_info(compile)&lt;/code&gt;. This option will make it easier to achieve reproducible builds.</source>
          <target state="translated">&lt;code&gt;Module:module_info(compile)&lt;/code&gt; が返すリストの &lt;code&gt;options&lt;/code&gt; と &lt;code&gt;source&lt;/code&gt; タプルを省略します。このオプションを使用すると、再現可能なビルドを簡単に実現できます。</target>
        </trans-unit>
        <trans-unit id="d1489713bac73f4571aa2114bb6a0e8bece846ba" translate="yes" xml:space="preserve">
          <source>Omits line number information to produce a slightly smaller output file.</source>
          <target state="translated">行番号情報を省略して、少し小さめの出力ファイルを作成します。</target>
        </trans-unit>
        <trans-unit id="ece5ff7a95f46bc465af7ccdd8565b862f2ad117" translate="yes" xml:space="preserve">
          <source>Omitted fields then get the value of evaluating &lt;code&gt;ExprL&lt;/code&gt; instead of their default values. This feature is primarily intended to be used to create patterns for ETS and Mnesia match functions.</source>
          <target state="translated">省略されたフィールドは、デフォルト値の代わりに &lt;code&gt;ExprL&lt;/code&gt; を評価する値を取得します。この機能は主に、ETSおよびMnesiaの照合機能のパターンを作成するために使用することを目的としています。</target>
        </trans-unit>
        <trans-unit id="837ccb981f94461d47fadaa07a7f5c5a91558bf2" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures: -134217729 &amp;lt; i &amp;lt; 134217728 (28 bits).</source>
          <target state="translated">32ビットアーキテクチャの場合：-134217729 &amp;lt;i &amp;lt;134217728（28ビット）。</target>
        </trans-unit>
        <trans-unit id="07aa96ddf4a255f77698c1f72e8dbbc6f7d0ac40" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures: 4 words.</source>
          <target state="translated">32ビットアーキテクチャで。4つの単語。</target>
        </trans-unit>
        <trans-unit id="0aaea3805ba5a1657f963cc5531935c14dbff051" translate="yes" xml:space="preserve">
          <source>On 32-bit architectures: 5 words for a reference from the current local node + 7 words for a reference from another node.</source>
          <target state="translated">32 ビ ッ ト アーキテ ク チ ャ の場合。現在のローカル・ノードからの参照には5ワード、別のノードからの参照には7ワード。</target>
        </trans-unit>
        <trans-unit id="7773ad37cb673ee9b7860d0d4b67f31e39b62273" translate="yes" xml:space="preserve">
          <source>On 64-bit architectures: -576460752303423489 &amp;lt; i &amp;lt; 576460752303423488 (60 bits).</source>
          <target state="translated">64ビットアーキテクチャの場合：-576460752303423489 &amp;lt;i &amp;lt;576460752303423488（60ビット）。</target>
        </trans-unit>
        <trans-unit id="ccffdbcaffb960350b1f03947273d32a77218dd0" translate="yes" xml:space="preserve">
          <source>On 64-bit architectures: 3 words.</source>
          <target state="translated">64ビットアーキテクチャで。3つの単語。</target>
        </trans-unit>
        <trans-unit id="f4432adb4e3eddcf803da55fd62c8256f8c01dca" translate="yes" xml:space="preserve">
          <source>On 64-bit architectures: 4 words for a reference from the current local node + 6 words for a reference from another node.</source>
          <target state="translated">64 ビット・アーキテクチャの場合。現在のローカル・ノードからの参照には4ワード、別のノードからの参照には6ワード。</target>
        </trans-unit>
        <trans-unit id="883c639f7255c347e035338f052f0ec88dae56ed" translate="yes" xml:space="preserve">
          <source>On C-nodes, &lt;code&gt;erl_interface&lt;/code&gt; has support for registry tables. These tables reside in RAM on the C-node, but can also be dumped into Mnesia tables. By default, the dumping of registry tables through &lt;code&gt;erl_interface&lt;/code&gt; causes a corresponding Mnesia table to be created with &lt;code&gt;mnesia_registry:create_table/1&lt;/code&gt;, if necessary.</source>
          <target state="translated">Cノードでは、 &lt;code&gt;erl_interface&lt;/code&gt; はレジストリテーブルをサポートしています。これらのテーブルはCノードのRAMにありますが、Mnesiaテーブルにダンプすることもできます。デフォルトでは、 &lt;code&gt;erl_interface&lt;/code&gt; を介してレジストリテーブルをダンプすると、必要に応じて、対応するMnesiaテーブルが &lt;code&gt;mnesia_registry:create_table/1&lt;/code&gt; で作成されます。</target>
        </trans-unit>
        <trans-unit id="53c351034515d0f74abb562de89183321dc3361d" translate="yes" xml:space="preserve">
          <source>On Darwin:</source>
          <target state="translated">ダーウィンについて</target>
        </trans-unit>
        <trans-unit id="452d25bd3843cd164bb696cf08ee12ab9733accf" translate="yes" xml:space="preserve">
          <source>On Linux or UNIX you can safely ignore this and simply create a file called &lt;code&gt;.erlang.cookie&lt;/code&gt; in the directory you get to after executing the command &lt;code&gt;cd&lt;/code&gt; without any argument.</source>
          <target state="translated">LinuxまたはUNIXでは、これを安全に無視して、引数なしで &lt;code&gt;cd&lt;/code&gt; コマンドを実行した後、 &lt;code&gt;.erlang.cookie&lt;/code&gt; するディレクトリに.erlang.cookieというファイルを作成するだけで済みます。</target>
        </trans-unit>
        <trans-unit id="07b320892e617ecd19e1d9117dbdaedf7a5983f2" translate="yes" xml:space="preserve">
          <source>On Linux: Respects the os environment variable &lt;code&gt;XDG_CACHE_HOME&lt;/code&gt;.</source>
          <target state="translated">Linuxの場合：os環境変数 &lt;code&gt;XDG_CACHE_HOME&lt;/code&gt; を尊重します。</target>
        </trans-unit>
        <trans-unit id="6c57c64ae3b58fcb5970a5f623f9d3c0f6952789" translate="yes" xml:space="preserve">
          <source>On Linux: Respects the os environment variable &lt;code&gt;XDG_CONFIG_DIRS&lt;/code&gt;.</source>
          <target state="translated">Linuxの場合：os環境変数 &lt;code&gt;XDG_CONFIG_DIRS&lt;/code&gt; を尊重します。</target>
        </trans-unit>
        <trans-unit id="99ba5d0f7bf487770a0030a3221eab9acf0e29cb" translate="yes" xml:space="preserve">
          <source>On Linux: Respects the os environment variable &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;.</source>
          <target state="translated">Linuxの場合：os環境変数 &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt; を尊重します。</target>
        </trans-unit>
        <trans-unit id="53587ca09ddf330890e10222f1f28d673e022a4f" translate="yes" xml:space="preserve">
          <source>On Linux: Respects the os environment variable &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt;.</source>
          <target state="translated">Linuxの場合：os環境変数 &lt;code&gt;XDG_DATA_DIRS&lt;/code&gt; を尊重します。</target>
        </trans-unit>
        <trans-unit id="d2fc503485c3bbe6875742c0c55de66f8b01c934" translate="yes" xml:space="preserve">
          <source>On Linux: Respects the os environment variable &lt;code&gt;XDG_DATA_HOME&lt;/code&gt;.</source>
          <target state="translated">Linuxの場合：os環境変数 &lt;code&gt;XDG_DATA_HOME&lt;/code&gt; を尊重します。</target>
        </trans-unit>
        <trans-unit id="0127285f8943bba8fbcf06e2c56b836011b620f8" translate="yes" xml:space="preserve">
          <source>On UNIX, the release handler tells the &lt;code&gt;heart&lt;/code&gt; program which command to use to reboot the system. The environment variable &lt;code&gt;HEART_COMMAND&lt;/code&gt;, normally used by the &lt;code&gt;heart&lt;/code&gt; program, is ignored in this case. The command instead defaults to &lt;code&gt;$ROOT/bin/start&lt;/code&gt;. Another command can be set by using the SASL configuration parameter &lt;code&gt;start_prg&lt;/code&gt;, see the &lt;code&gt;sasl(6)&lt;/code&gt; manual page.</source>
          <target state="translated">UNIXでは、リリースハンドラーは、システムの再起動に使用するコマンドを &lt;code&gt;heart&lt;/code&gt; プログラムに指示します。この場合、通常は &lt;code&gt;heart&lt;/code&gt; プログラムによって使用される環境変数 &lt;code&gt;HEART_COMMAND&lt;/code&gt; は無視されます。代わりに、コマンドのデフォルトは &lt;code&gt;$ROOT/bin/start&lt;/code&gt; です。別のコマンドは、コンフィギュレーションパラメータSASLを使用して設定することができ &lt;code&gt;start_prg&lt;/code&gt; 参照、 &lt;code&gt;sasl(6)&lt;/code&gt; マニュアルページを。</target>
        </trans-unit>
        <trans-unit id="9712a16713ddd036d7484cde8377ae9fea3bea13" translate="yes" xml:space="preserve">
          <source>On Ubuntu this can be installed via &lt;code&gt;aptitude&lt;/code&gt;:</source>
          <target state="translated">Ubuntuでは、これは &lt;code&gt;aptitude&lt;/code&gt; 経由でインストールできます：</target>
        </trans-unit>
        <trans-unit id="945f7eb32fc020ed4cd606f8c4ad2c5835f8ead0" translate="yes" xml:space="preserve">
          <source>On Unix platforms, other bits than those listed above may be set.</source>
          <target state="translated">Unixプラットフォームでは、上記以外のビットが設定されている場合があります。</target>
        </trans-unit>
        <trans-unit id="bbea9d064da3b38737aba3e1e6b3c867dfe36620" translate="yes" xml:space="preserve">
          <source>On Unix platforms, the environment is set using UTF-8 encoding if Unicode filename translation is in effect. On Windows, the environment is set using wide character interfaces.</source>
          <target state="translated">Unixプラットフォームでは、Unicodeファイル名変換が有効な場合、環境はUTF-8エンコーディングを使用して設定されます。Windows では、環境はワイドキャラクタインタフェースを使用して設定されます。</target>
        </trans-unit>
        <trans-unit id="864179103393e4079015a89879456910e0840ba4" translate="yes" xml:space="preserve">
          <source>On Unix systems, the Erlang runtime will interpret two types of signals.</source>
          <target state="translated">Unixシステムでは、Erlangランタイムは2種類のシグナルを解釈します。</target>
        </trans-unit>
        <trans-unit id="42f4a0b9ff2bf60e97136e578acd75fee6a21d57" translate="yes" xml:space="preserve">
          <source>On Unix the &lt;code&gt;event&lt;/code&gt; is a pipe or socket handle (or something that the &lt;code&gt;select&lt;/code&gt; system call understands).</source>
          <target state="translated">Unixでは、 &lt;code&gt;event&lt;/code&gt; はパイプまたはソケットハンドル（または &lt;code&gt;select&lt;/code&gt; システムコールが理解するもの）です。</target>
        </trans-unit>
        <trans-unit id="89488e0941b289b30ca17db0724ef6eb3f8cddfc" translate="yes" xml:space="preserve">
          <source>On Unix, &lt;code&gt;Osname&lt;/code&gt; has the same value as &lt;code&gt;uname -s&lt;/code&gt; returns, but in lower case. For example, on Solaris 1 and 2, it is &lt;code&gt;sunos&lt;/code&gt;.</source>
          <target state="translated">Unixでは、 &lt;code&gt;Osname&lt;/code&gt; は &lt;code&gt;uname -s&lt;/code&gt; と同じ値を返しますが、小文字です。たとえば、Solaris 1および2では、 &lt;code&gt;sunos&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6f9abb41d788d59d3b3b9428af793da0ceb8018a" translate="yes" xml:space="preserve">
          <source>On Unix, any value specified for this field is ignored (the &quot;ctime&quot; for the file is set to the current time). On Windows, this field is the new creation time to set for the file.</source>
          <target state="translated">Unixでは、このフィールドに指定された値は無視される(ファイルの「ctime」は現在の時刻に設定される)。Windowsでは、このフィールドはファイルに設定する新規作成時刻である。</target>
        </trans-unit>
        <trans-unit id="2f21108f8f59c58399736174f45da9282d8305fe" translate="yes" xml:space="preserve">
          <source>On Unix-like operating systems, parameters are expected to be UTF-8 without translation if Unicode filenames are enabled.</source>
          <target state="translated">Unix 系のオペレーティングシステムでは、Unicode ファイル名を有効にしている場合、パラメータは翻訳なしで UTF-8 であることが予想されます。</target>
        </trans-unit>
        <trans-unit id="624724bf76a78b8d09ce52016c5a6eefce217dcc" translate="yes" xml:space="preserve">
          <source>On Unix-like operating systems, the terminal is to be able to handle UTF-8 on input and output (this is done by, for example, modern versions of XTerm, KDE Konsole, and the Gnome terminal) and your locale settings must be proper. As an example, a &lt;code&gt;LANG&lt;/code&gt; environment variable can be set as follows:</source>
          <target state="translated">Unixライクなオペレーティングシステムでは、ターミナルは入力と出力でUTF-8を処理できます（これは、たとえば、最新バージョンのXTerm、KDE ​​Konsole、およびGnomeターミナルによって行われます）。ロケール設定は適切。例として、 &lt;code&gt;LANG&lt;/code&gt; 環境変数は次のように設定できます。</target>
        </trans-unit>
        <trans-unit id="3343aa00325e17effeba793420c23aae68f68a75" translate="yes" xml:space="preserve">
          <source>On Windows XP, select &lt;strong&gt;Control Panel&lt;/strong&gt; &amp;gt; &lt;strong&gt;Regional and Language Options&lt;/strong&gt;, select tab &lt;strong&gt;Language&lt;/strong&gt;, and click button &lt;strong&gt;Details...&lt;/strong&gt; in the square named &lt;strong&gt;Text Services and Input Languages&lt;/strong&gt;.</source>
          <target state="translated">Windows XPでは、[ &lt;strong&gt;コントロールパネル]&lt;/strong&gt; &amp;gt; [ &lt;strong&gt;地域と言語のオプション&lt;/strong&gt; ]を選択し、[ &lt;strong&gt;言語&lt;/strong&gt; ]タブを選択して、[ &lt;strong&gt;テキストサービスと入力言語]&lt;/strong&gt;という名前の四角形の[ &lt;strong&gt;詳細...&lt;/strong&gt; ]ボタンをクリックします。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="7bdd9c7b68e080175354bdf3fad784b9f495039c" translate="yes" xml:space="preserve">
          <source>On Windows platforms, Erlang searches the system registry rather than looks for configuration files when started in long name distributed mode.</source>
          <target state="translated">Windowsプラットフォームでは、Erlangは長い名前の分散モードで起動すると、設定ファイルを探すのではなくシステムレジストリを検索します。</target>
        </trans-unit>
        <trans-unit id="e26d25aabbde72aeec251ac7d6d7e8b7d5ff65e1" translate="yes" xml:space="preserve">
          <source>On Windows systems the home directory is the directory pointed out by the environment variable $HOME - you may need to set this.</source>
          <target state="translated">Windows システムでは、ホームディレクトリは環境変数 $HOME で指定されたディレクトリになります-これを設定する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="5c1eb5371b5194cdf64f66156f192b541e886e24" translate="yes" xml:space="preserve">
          <source>On Windows the &lt;code&gt;event&lt;/code&gt; is an &lt;code&gt;Event&lt;/code&gt; or &lt;code&gt;Semaphore&lt;/code&gt; (or something that the &lt;code&gt;WaitForMultipleObjects&lt;/code&gt; API function understands). (Some trickery in the emulator allows more than the built-in limit of 64 &lt;code&gt;Events&lt;/code&gt; to be used.)</source>
          <target state="translated">Windowsでは、 &lt;code&gt;event&lt;/code&gt; は &lt;code&gt;Event&lt;/code&gt; または &lt;code&gt;Semaphore&lt;/code&gt; （または &lt;code&gt;WaitForMultipleObjects&lt;/code&gt; API関数が理解するもの）です。（エミュレーターの一部のトリックでは、組み込みの64 &lt;code&gt;Events&lt;/code&gt; 制限を超えて使用できます。）</target>
        </trans-unit>
        <trans-unit id="07f408912d4e25cbe3e69c344bbf252be7275718" translate="yes" xml:space="preserve">
          <source>On Windows the default value is set to &lt;code&gt;8196&lt;/code&gt; because the normal OS limitations are set higher than most machines can handle.</source>
          <target state="translated">Windowsでは、通常のOSの制限がほとんどのマシンで処理できるよりも高く設定されているため、デフォルト値は &lt;code&gt;8196&lt;/code&gt; に設定されています。</target>
        </trans-unit>
        <trans-unit id="818c5818d712a93bb76a90d8f6ce9237479e8047" translate="yes" xml:space="preserve">
          <source>On Windows, &lt;code&gt;Osname&lt;/code&gt; is &lt;code&gt;nt&lt;/code&gt;.</source>
          <target state="translated">Windowsでは、 &lt;code&gt;Osname&lt;/code&gt; は &lt;code&gt;nt&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="08a45149384450c4928eab3da298a998b5209ee6" translate="yes" xml:space="preserve">
          <source>On Windows, proper operation requires that a suitable font is installed and selected for the Erlang application to use. If no suitable font is available on your system, try installing the &lt;code&gt;&lt;a href=&quot;http://dejavu-fonts.org&quot;&gt;DejaVu fonts&lt;/a&gt;&lt;/code&gt;, which are freely available, and then select that font in the Erlang shell application.</source>
          <target state="translated">Windowsでは、適切な操作には、適切なフォントがインストールされ、Erlangアプリケーションが使用するために選択されている必要があります。システムに適切なフォントがない場合は、無料で入手できる &lt;code&gt;&lt;a href=&quot;http://dejavu-fonts.org&quot;&gt;DejaVu fonts&lt;/a&gt;&lt;/code&gt; インストールしてから、Erlangシェルアプリケーションでそのフォントを選択します。</target>
        </trans-unit>
        <trans-unit id="73a6c028854ad01eefd9a69b170bcc32b5780e1c" translate="yes" xml:space="preserve">
          <source>On Windows, the data is fetched from different OS API functions, so the &lt;code&gt;Netmask&lt;/code&gt; and &lt;code&gt;Broadaddr&lt;/code&gt; values can be calculated, just as some &lt;code&gt;Flag&lt;/code&gt; values. Report flagrant bugs.</source>
          <target state="translated">Windowsでは、データはさまざまなOS API関数からフェッチされるため、一部の &lt;code&gt;Flag&lt;/code&gt; 値と &lt;code&gt;Broadaddr&lt;/code&gt; 、 &lt;code&gt;Netmask&lt;/code&gt; とBroadaddrの値を計算できます。重大なバグを報告してください。</target>
        </trans-unit>
        <trans-unit id="0e5200c5fc7e9186939f4793a54da361f708e107" translate="yes" xml:space="preserve">
          <source>On Windows, the preferred way to start the Erlang system for interactive use is as follows:</source>
          <target state="translated">Windowsでは、対話的にErlangシステムを起動するには次のようにします。</target>
        </trans-unit>
        <trans-unit id="e3c787c6250b0d27168a0579a029fe138a257fab" translate="yes" xml:space="preserve">
          <source>On Windows, use semi-colon as separator.</source>
          <target state="translated">Windowsではセミコロンを区切り文字として使用します。</target>
        </trans-unit>
        <trans-unit id="55b56364276b5f7e47e7f031287b139fc5b947d5" translate="yes" xml:space="preserve">
          <source>On Windows:</source>
          <target state="translated">Windowsで。</target>
        </trans-unit>
        <trans-unit id="91de63a646561418f6b7e070668224cb4764e75e" translate="yes" xml:space="preserve">
          <source>On a Unix system you can view the manual pages from the command line using</source>
          <target state="translated">Unix システムでは、コマンドラインから以下のようにしてマニュアルページを見ることができます。</target>
        </trans-unit>
        <trans-unit id="3c1e7fbc1efc10479b9f342b1427cfdbfeabd446" translate="yes" xml:space="preserve">
          <source>On a Unix-like system, &lt;code&gt;ERL_LIBS&lt;/code&gt; can be set to the following</source>
          <target state="translated">Unixライクなシステムでは、 &lt;code&gt;ERL_LIBS&lt;/code&gt; を次のように設定できます。</target>
        </trans-unit>
        <trans-unit id="a74d3fb56059df82993a50e11000b4ec43a6e044" translate="yes" xml:space="preserve">
          <source>On a conceptual level starting a database connection using the Erlang ODBC API is a basic client server application. The client process uses the API to start and communicate with the server process that manages the connection. The strategy of the Erlang ODBC application is that programming faults in the application itself will cause the connection process to terminate abnormally.(When a process terminates abnormally its supervisor will log relevant error reports.) Calls to API functions during or after termination of the connection process, will return &lt;code&gt;{error, connection_closed}&lt;/code&gt;. Contextual errors on the other hand will not terminate the connection it will only return &lt;code&gt;{error, Reason}&lt;/code&gt; to the client, where &lt;code&gt;Reason&lt;/code&gt; may be any erlang term.</source>
          <target state="translated">概念的なレベルでは、Erlang ODBC APIを使用してデータベース接続を開始することは、基本的なクライアントサーバーアプリケーションです。クライアントプロセスは、APIを使用して、接続を管理するサーバープロセスを開始して通信します。 Erlang ODBCアプリケーションの戦略は、アプリケーション自体のプログラミング障害により接続プロセスが異常終了することです（プロセスが異常終了すると、そのスーパーバイザーは関連するエラーレポートをログに記録します）。接続の終了中または終了後のAPI関数の呼び出しプロセスは &lt;code&gt;{error, connection_closed}&lt;/code&gt; を返します。一方、コンテキストエラーは接続を終了せず、クライアントに &lt;code&gt;{error, Reason}&lt;/code&gt; を返すだけです。この場合、 &lt;code&gt;Reason&lt;/code&gt; は任意のerlang用語である可能性があります。</target>
        </trans-unit>
        <trans-unit id="8d392ddbe029a1a10ad20de9a806356a9c906b21" translate="yes" xml:space="preserve">
          <source>On a file, a term is represented by a header and a binary. Two options define the format of terms on files:</source>
          <target state="translated">ファイル上では、用語はヘッダとバイナリで表現されます。2つのオプションは、ファイル上の用語の形式を定義します。</target>
        </trans-unit>
        <trans-unit id="0a1100e7bfb6397c36a4da859d5dfb1b68d51802" translate="yes" xml:space="preserve">
          <source>On a single core system or if it's a non-reentrant scanner, a single port is created. On a multi-core system with a reentrant scanner, several ports will be created (one for each scheduler).</source>
          <target state="translated">シングルコアシステムでは、またはリエントラントではないスキャナの場合、1つのポートが作成されます。リエントラントスキャナのあるマルチコアシステムでは、複数のポートが作成されます(各スケジューラに1つ)。</target>
        </trans-unit>
        <trans-unit id="b61c13a696c2951dde75411aaee46764defe2d53" translate="yes" xml:space="preserve">
          <source>On a system where release handling is used, this is always to be set to &lt;code&gt;ignore&lt;/code&gt;. Use &lt;code&gt;heart&lt;/code&gt; to restart the service on failure instead.</source>
          <target state="translated">リリース処理が使用されるシステムでは、これは常に &lt;code&gt;ignore&lt;/code&gt; に設定されます。代わりに &lt;code&gt;heart&lt;/code&gt; を使用して、障害時にサービスを再起動します。</target>
        </trans-unit>
        <trans-unit id="ca5dabff07309a8980fe16e2ce2d9b17947978e9" translate="yes" xml:space="preserve">
          <source>On a system without OS monotonic time, Erlang monotonic time guarantees monotonicity, but cannot give other guarantees. The frequency adjustments made to Erlang monotonic time depend on the time warp mode used.</source>
          <target state="translated">OSのモノトニックタイムがないシステムでは、Erlangのモノトニックタイムはモノトニック性を保証しますが、他の保証はできません。Erlangのモノトニックタイムの周波数調整はタイムワープモードに依存します。</target>
        </trans-unit>
        <trans-unit id="c10079e3d3b4af33197f73508809dcf8be943c1b" translate="yes" xml:space="preserve">
          <source>On an embedded system it is not uncommon that the system has no power supply, not even a battery, when it is shut off. The system clock on such a system is typically way off when the system boots. If &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; is used, and the Erlang runtime system is started before OS system time has been corrected, Erlang system time can be wrong for a long time, centuries or even longer.</source>
          <target state="translated">組み込みシステムでは、システムがシャットダウンされているとき、システムに電源がなく、バッテリーさえないことは珍しくありません。このようなシステムのシステムクロックは、通常、システムの起動時にかなりずれています。場合 &lt;code&gt;&lt;a href=&quot;#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; 使用されず、OSのシステム時刻が修正される前のErlangランタイムシステムが起動され、Erlangのシステム時間がさらに長い長い時間、何世紀かのために間違っている可能性があります。</target>
        </trans-unit>
        <trans-unit id="94848f950b79b2c5a62062642414a0d81b6809e5" translate="yes" xml:space="preserve">
          <source>On an embedded system, the &lt;code&gt;erlsrv&lt;/code&gt; module is to be used to install the Erlang process as a Windows system service. This service can start after Windows NT has booted.</source>
          <target state="translated">組み込みシステムでは、 &lt;code&gt;erlsrv&lt;/code&gt; モジュールを使用して、ErlangプロセスをWindowsシステムサービスとしてインストールします。このサービスは、Windows NTの起動後に開始できます。</target>
        </trans-unit>
        <trans-unit id="d6e74b9f0f9fc530f5a5a031fbc8a47d65641b3d" translate="yes" xml:space="preserve">
          <source>On application (&lt;code&gt;app&lt;/code&gt;) level, the following options are supported:</source>
          <target state="translated">アプリケーション（ &lt;code&gt;app&lt;/code&gt; ）レベルでは、次のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="8c2c100f87c410005b9664bcf1790490ce2930c4" translate="yes" xml:space="preserve">
          <source>On application (&lt;code&gt;escript&lt;/code&gt;) level, the following options are supported:</source>
          <target state="translated">アプリケーション（ &lt;code&gt;escript&lt;/code&gt; ）レベルでは、次のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="1f2ca7be500feda1d827cc1f5458cea971c16dda" translate="yes" xml:space="preserve">
          <source>On builds without &lt;code&gt;crypto&lt;/code&gt;, &lt;code&gt;ssl&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt; there is a failed test case for undefined functions. Verify that the failed test case log only shows calls to skipped applications.</source>
          <target state="translated">&lt;code&gt;crypto&lt;/code&gt; 、 &lt;code&gt;ssl&lt;/code&gt; 、および &lt;code&gt;ssh&lt;/code&gt; なしのビルドでは、未定義の関数のテストケースが失敗します。失敗したテストケースログに、スキップされたアプリケーションへの呼び出しのみが表示されることを確認します。</target>
        </trans-unit>
        <trans-unit id="7b33a0aa47e36eff9a9acf946284dbd48855b743" translate="yes" xml:space="preserve">
          <source>On each Erlang node, a process can be set as the &lt;strong&gt;system tracer&lt;/strong&gt;. This process will receive trace messages each time a message with a trace token is sent or received (if the trace token flag &lt;code&gt;send&lt;/code&gt; or &lt;code&gt;'receive'&lt;/code&gt; is set). The system tracer can then print each trace event, write it to a file, or whatever suitable.</source>
          <target state="translated">各Erlangノードでは、プロセスを&lt;strong&gt;システムトレーサー&lt;/strong&gt;として設定できます。このプロセスは、トレーストークンを含むメッセージが送信または受信されるたびにトレースメッセージを受信します（トレーストークンフラグ &lt;code&gt;send&lt;/code&gt; または &lt;code&gt;'receive'&lt;/code&gt; が設定されている場合）。システムトレーサは、各トレースイベントを出力したり、ファイルに書き込んだり、適切なものを作成できます。</target>
        </trans-unit>
        <trans-unit id="5aa1503e3bb1ca6d6b1d5db02a4ead78c2138817" translate="yes" xml:space="preserve">
          <source>On encode, an OctetString() IPv4 address is parsed in the usual x.x.x.x format while an IPv6 address is parsed in any of the formats specified by section 2.2 of RFC 2373, &quot;Text Representation of Addresses&quot;. An IPv4 tuple() has length 4 and contains values of type 0..255. An IPv6 tuple() has length 8 and contains values of type 0..65535. The tuple representation is used on decode.</source>
          <target state="translated">エンコード時に、OctetString()IPv4アドレスは通常のx.x.x.x.x形式で解析され、IPv6アドレスはRFC2373のセクション2.2「アドレスのテキスト表現」で指定された形式のいずれかで解析される。IPv4タプル()は長さ4で、タイプ0~255の値を含む。IPv6タプル()は長さ8で、タイプ0.65535の値を含む。タプル表現はデコード時に使用されます。</target>
        </trans-unit>
        <trans-unit id="5d15ad498425526235871ebf68fcb9399fdea277" translate="yes" xml:space="preserve">
          <source>On encode, an OctetString() can be specified as an iolist(), excessively large floats (in absolute value) are equivalent to &lt;code&gt;infinity&lt;/code&gt; or &lt;code&gt;'-infinity'&lt;/code&gt; and excessively large integers result in encode failure. The records for grouped AVPs are as discussed in the previous section.</source>
          <target state="translated">エンコードでは、OctetString（）をiolist（）として指定できます。（絶対値で）過度に大きな浮動小数点数は、 &lt;code&gt;infinity&lt;/code&gt; または &lt;code&gt;'-infinity'&lt;/code&gt; と同等であり、過度に大きな整数はエンコードエラーを引き起こします。グループ化されたAVPのレコードは、前のセクションで説明したとおりです。</target>
        </trans-unit>
        <trans-unit id="c7844a2c02e87c5568f9be53b564891e2298588d" translate="yes" xml:space="preserve">
          <source>On encode, fields port, transport and protocol default to 3868, sctp and diameter respectively. The grammar of an OctetString-valued DiameterURI() is as specified in section 4.3 of RFC 6733. The record representation is used on decode.</source>
          <target state="translated">エンコード時のフィールド port、transport、および protocol のデフォルトは、それぞれ 3868、sctp、および diameter である。OctetString値を持つDiameterURI()の文法は、RFC 6733のセクション4.3で規定されている。レコード表現は、デコード時に使用される。</target>
        </trans-unit>
        <trans-unit id="d66c2d9ea2e818fe35630d0324d41a67f4905d83" translate="yes" xml:space="preserve">
          <source>On encode, values can be specified using the macros defined in a dictionary's hrl file.</source>
          <target state="translated">エンコード時には、辞書の hrl ファイルで定義されているマクロを使用して値を指定することができます。</target>
        </trans-unit>
        <trans-unit id="731614e2c441caf07c5c36a9a260f1d7987a91b7" translate="yes" xml:space="preserve">
          <source>On encountering character #, &lt;code&gt;pcre_compile()&lt;/code&gt; skips along, looking for a newline in the pattern. The sequence \n is still literal at this stage, so it does not terminate the comment. Only a character with code value 0x0a (the default newline) does so.</source>
          <target state="translated">文字＃に遭遇すると、 &lt;code&gt;pcre_compile()&lt;/code&gt; はスキップして、パターン内の改行を探します。シーケンス\ nはこの段階ではまだリテラルであるため、コメントは終了しません。コード値0x0a（デフォルトの改行）を持つ文字のみがこれを行います。</target>
        </trans-unit>
        <trans-unit id="6046ea4ed169ee86943dd8f909d8a57065f20fd4" translate="yes" xml:space="preserve">
          <source>On failure, that is, no such environment variable was found, a value &amp;lt; &lt;code&gt;0&lt;/code&gt; is returned. When the size of the &lt;code&gt;value&lt;/code&gt; buffer is too small, a value &amp;gt; &lt;code&gt;0&lt;/code&gt; is returned and &lt;code&gt;*value_size&lt;/code&gt; has been set to the buffer size needed.</source>
          <target state="translated">失敗した場合、つまり、そのような環境変数が見つからなかった場合は、値&amp;lt; &lt;code&gt;0&lt;/code&gt; が返されます。 &lt;code&gt;value&lt;/code&gt; バッファのサイズが小さすぎる場合、 &lt;code&gt;0&lt;/code&gt; より大きい値が返され、 &lt;code&gt;*value_size&lt;/code&gt; は必要なバッファサイズに設定されています。</target>
        </trans-unit>
        <trans-unit id="e7d6dfc6c6549f9a2bde9d0b09efa932ae04ee7b" translate="yes" xml:space="preserve">
          <source>On gollum:</source>
          <target state="translated">ゴラムに</target>
        </trans-unit>
        <trans-unit id="2fb361775fa49f574bf571176cefd50d9c38320a" translate="yes" xml:space="preserve">
          <source>On kosken (on a Linux/UNIX system):</source>
          <target state="translated">kosken上(Linux/UNIXシステム上)。</target>
        </trans-unit>
        <trans-unit id="254bbc8618baf4df2c0d1ded28631159588b541c" translate="yes" xml:space="preserve">
          <source>On line 1-10 the OS headers needed for the driver are included. As this driver is written for Solaris, we know that the header &lt;code&gt;uio.h&lt;/code&gt; exists. So the preprocessor variable &lt;code&gt;HAVE_UIO_H&lt;/code&gt; can be defined before &lt;code&gt;erl_driver.h&lt;/code&gt; is included on line 12. The definition of &lt;code&gt;HAVE_UIO_H&lt;/code&gt; will make the I/O vectors used in Erlang's driver queues to correspond to the operating systems ditto, which is very convenient.</source>
          <target state="translated">1-10行目に、ドライバーに必要なOSヘッダーが含まれています。このドライバーはSolaris用に作成されているため、ヘッダー &lt;code&gt;uio.h&lt;/code&gt; が存在することがわかります。プリプロセッサ変数のよう &lt;code&gt;HAVE_UIO_H&lt;/code&gt; が前に定義することができ &lt;code&gt;erl_driver.h&lt;/code&gt; の定義ライン12に含まれている &lt;code&gt;HAVE_UIO_H&lt;/code&gt; は非常に便利であるオペレーティング・システム同上、に対応するようにアーランのドライバキューで使用されるI / Oベクトルを行います。</target>
        </trans-unit>
        <trans-unit id="233d0459679e240e1a43d6003a0eed16b1b6db16" translate="yes" xml:space="preserve">
          <source>On line 16-23 the different callback functions are declared (&quot;forward declarations&quot;).</source>
          <target state="translated">16-23行目では、異なるコールバック関数が宣言されています(「前方宣言」)。</target>
        </trans-unit>
        <trans-unit id="1829525dba56c919f35e7fe241f7a7f27d37779d" translate="yes" xml:space="preserve">
          <source>On line 4-8 is handled the case where the port is in &lt;code&gt;data&lt;/code&gt; mode or &lt;code&gt;intermediate&lt;/code&gt; mode and the remaining routine handles the different commands. The routine uses the &lt;code&gt;driver_failure_posix()&lt;/code&gt; routine to report errors (see, for example, line 15). Notice that the failure routines make a call to the &lt;code&gt;uds_stop&lt;/code&gt; routine, which will remove the internal port data. The handle (and the casted handle &lt;code&gt;ud&lt;/code&gt;) is therefore &lt;strong&gt;invalid pointers&lt;/strong&gt; after a &lt;code&gt;driver_failure&lt;/code&gt; call and we should &lt;strong&gt;return immediately&lt;/strong&gt;. The runtime system will send exit signals to all linked processes.</source>
          <target state="translated">4-8行目では、ポートが &lt;code&gt;data&lt;/code&gt; モードまたは &lt;code&gt;intermediate&lt;/code&gt; モードであり、残りのルーチンがさまざまなコマンドを処理する場合を処理します。このルーチンは、 &lt;code&gt;driver_failure_posix()&lt;/code&gt; ルーチンを使用してエラーを報告します（たとえば、15行目を参照）。失敗ルーチンが &lt;code&gt;uds_stop&lt;/code&gt; ルーチンを呼び出すことに注意してください。これにより、内部ポートデータが削除されます。したがって、ハンドル（およびキャストされたハンドル &lt;code&gt;ud&lt;/code&gt; ）は、 &lt;code&gt;driver_failure&lt;/code&gt; 呼び出しの後の&lt;strong&gt;無効なポインター&lt;/strong&gt;であり、&lt;strong&gt;すぐに戻る&lt;/strong&gt;必要があり&lt;strong&gt;ます&lt;/strong&gt;。ランタイムシステムは、リンクされているすべてのプロセスに終了信号を送信します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0784da7963dd222dfcf8b747a5d57b72650b03dc" translate="yes" xml:space="preserve">
          <source>On linux the memory available to the emulator is &lt;code&gt;cached_memory&lt;/code&gt; and &lt;code&gt;buffered_memory&lt;/code&gt; in addition to &lt;code&gt;free_memory&lt;/code&gt;.</source>
          <target state="translated">Linuxでは、エミュレータで使用できるメモリは、 &lt;code&gt;cached_memory&lt;/code&gt; に加えて &lt;code&gt;free_memory&lt;/code&gt; および &lt;code&gt;buffered_memory&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9d908b49426b880b5a485931417759cde36bd6fa" translate="yes" xml:space="preserve">
          <source>On many platforms, the OS supports only status codes 0-255. A too large status code is truncated by clearing the high bits.</source>
          <target state="translated">多くのプラットフォームでは、OSはステータスコード0~255のみをサポートしています。大きすぎるステータスコードは、上位ビットをクリアすることで切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="01e5aeaef327e8644ba3de200b1361c56477bc67" translate="yes" xml:space="preserve">
          <source>On module (&lt;code&gt;mod&lt;/code&gt;) level, the following options are supported:</source>
          <target state="translated">モジュール（ &lt;code&gt;mod&lt;/code&gt; ）レベルでは、次のオプションがサポートされています。</target>
        </trans-unit>
        <trans-unit id="625fa204254a0a02e9def2bcc01ac2eefa5a78a4" translate="yes" xml:space="preserve">
          <source>On most platforms this option must be set on the socket before associating it to an address. It is therefore only reasonable to specify it when creating the socket and not to use it when calling function (&lt;code&gt;&lt;a href=&quot;#setopts-2&quot;&gt;setopts/2&lt;/a&gt;&lt;/code&gt;) containing this description.</source>
          <target state="translated">ほとんどのプラットフォームでは、このオプションをソケットに設定してから、アドレスに関連付ける必要があります。したがって、ソケットを作成するときにそれを指定し、この説明を含む関数（ &lt;code&gt;&lt;a href=&quot;#setopts-2&quot;&gt;setopts/2&lt;/a&gt;&lt;/code&gt; ）を呼び出すときにそれを使用しないことが合理的です。</target>
        </trans-unit>
        <trans-unit id="83547004e7613d3d63f0a97fcec4dde6aca4cb59" translate="yes" xml:space="preserve">
          <source>On one of the two nodes:</source>
          <target state="translated">2つのノードのうちの1つに</target>
        </trans-unit>
        <trans-unit id="cc0bc87e9803dd29ab16d01f2771141460043748" translate="yes" xml:space="preserve">
          <source>On operating systems with mandatory Unicode filenames, this means that you more easily conform to the filenames of other (non-Erlang) applications. You can also process filenames that, at least on Windows, were inaccessible (because of having names that could not be represented in ISO Latin-1). Also, you avoid creating incomprehensible filenames on MacOS X, as the &lt;code&gt;vfs&lt;/code&gt; layer of the operating system accepts all your filenames as UTF-8 does not rewrite them.</source>
          <target state="translated">必須のUnicodeファイル名を持つオペレーティングシステムでは、これは他の（Erlang以外の）アプリケーションのファイル名に容易に準拠できることを意味します。また、少なくともWindowsではアクセスできなかったファイル名を処理することもできます（ISO Latin-1で表現できない名前があったため）。また、オペレーティングシステムの &lt;code&gt;vfs&lt;/code&gt; レイヤーがすべてのファイル名を受け入れるため、MacOS Xでは理解できないファイル名を作成しないでください。UTF-8はファイル名を書き換えません。</target>
        </trans-unit>
        <trans-unit id="c01b078903bea1781dc2ed9488460d3b352c3b71" translate="yes" xml:space="preserve">
          <source>On operating systems with transparent naming (for example, all Unix systems except MacOS X), default is &lt;code&gt;utf8&lt;/code&gt; if the terminal supports UTF-8, otherwise &lt;code&gt;latin1&lt;/code&gt;. The default can be overridden using &lt;code&gt;+fnl&lt;/code&gt; (to force &lt;code&gt;latin1&lt;/code&gt; mode) or &lt;code&gt;+fnu&lt;/code&gt; (to force &lt;code&gt;utf8&lt;/code&gt; mode) when starting &lt;code&gt;erl&lt;/code&gt;.</source>
          <target state="translated">透過的なネーミングのオペレーティングシステム（たとえば、MacOS Xを除くすべてのUnixシステム）では、端末がUTF-8をサポートしている場合、デフォルトは &lt;code&gt;utf8&lt;/code&gt; です。それ以外の場合は、 &lt;code&gt;latin1&lt;/code&gt; です。デフォルトでは、使用してオーバーライドすることができる &lt;code&gt;+fnl&lt;/code&gt; （強制的に &lt;code&gt;latin1&lt;/code&gt; モード）または &lt;code&gt;+fnu&lt;/code&gt; （力に &lt;code&gt;utf8&lt;/code&gt; 起動時モード） &lt;code&gt;erl&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6bd025a43addf4cf8a811c722598b09ff48bc9cb" translate="yes" xml:space="preserve">
          <source>On operating systems with transparent naming, files can be inconsistently named, for example, some files are encoded in UTF-8 while others are encoded in ISO Latin-1. The concept of &lt;strong&gt;raw filenames&lt;/strong&gt; is introduced to handle file systems with inconsistent naming when running in &lt;code&gt;utf8&lt;/code&gt; mode.</source>
          <target state="translated">透過的な命名のあるオペレーティングシステムでは、ファイルの名前に一貫性がない場合があります。たとえば、一部のファイルはUTF-8でエンコードされ、他のファイルはISO Latin-1でエンコードされます。&lt;strong&gt;生のファイル名&lt;/strong&gt;の概念は、 &lt;code&gt;utf8&lt;/code&gt; モードで実行するときに一貫性のない名前のファイルシステムを処理するために導入されました。</target>
        </trans-unit>
        <trans-unit id="e0eed5fde65bb7a382758dcc51496a31ac264639" translate="yes" xml:space="preserve">
          <source>On other supported systems, see &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Configuring&quot;&gt;Advanced Configure&lt;/a&gt;&lt;/code&gt; on how to enable HiPE.</source>
          <target state="translated">その他のサポートされているシステムでは、HiPEを有効にする方法について、 &lt;code&gt;&lt;a href=&quot;#Advanced-configuration-and-build-of-ErlangOTP_Configuring&quot;&gt;Advanced Configure&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="553a2be33582dd908d9294011101091577e2f096" translate="yes" xml:space="preserve">
          <source>On platforms supporting it, enables the POSIX &lt;code&gt;O_SYNC&lt;/code&gt; synchronous I/O flag or its platform-dependent equivalent (for example, &lt;code&gt;FILE_FLAG_WRITE_THROUGH&lt;/code&gt; on Windows) so that writes to the file block until the data is physically written to disk. However, be aware that the exact semantics of this flag differ from platform to platform. For example, none of Linux or Windows guarantees that all file metadata are also written before the call returns. For precise semantics, check the details of your platform documentation. On platforms with no support for POSIX &lt;code&gt;O_SYNC&lt;/code&gt; or equivalent, use of the &lt;code&gt;sync&lt;/code&gt; flag causes &lt;code&gt;open&lt;/code&gt; to return &lt;code&gt;{error, enotsup}&lt;/code&gt;.</source>
          <target state="translated">これをサポートするプラットフォームでは、POSIX &lt;code&gt;O_SYNC&lt;/code&gt; 同期I / Oフラグまたはそれに対応するプラットフォーム依存のフラグ（Windowsの &lt;code&gt;FILE_FLAG_WRITE_THROUGH&lt;/code&gt; など）を有効にして、データがディスクに物理的に書き込まれるまでファイルブロックに書き込みます。ただし、このフラグの正確なセマンティクスはプラットフォームごとに異なることに注意してください。たとえば、LinuxまたはWindowsでは、呼び出しが戻る前にすべてのファイルメタデータも書き込まれることを保証していません。正確なセマンティクスについては、プラットフォームのドキュメントの詳細を確認してください。 POSIX &lt;code&gt;O_SYNC&lt;/code&gt; または同等の機能がサポートされていないプラットフォームでは、 &lt;code&gt;sync&lt;/code&gt; フラグを使用すると、 &lt;code&gt;open&lt;/code&gt; は &lt;code&gt;{error, enotsup}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d150b84d58ca2e7d5f356e3aff31a3d84da95bdf" translate="yes" xml:space="preserve">
          <source>On some operating systems &lt;strong&gt;syslog&lt;/strong&gt; will be used for error reporting when &lt;code&gt;epmd&lt;/code&gt; runs as a daemon. To enable the error logging, you must edit the /etc/syslog.conf file and add an entry:</source>
          <target state="translated">一部のオペレーティングシステムでは、 &lt;code&gt;epmd&lt;/code&gt; がデーモンとして実行されている場合、エラー報告に&lt;strong&gt;syslog&lt;/strong&gt;が使用されます。エラーログを有効にするには、/ etc / syslog.confファイルを編集してエントリを追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="47544928855d61173caf643cd7bfa90a251b1e29" translate="yes" xml:space="preserve">
          <source>On some platforms Perl may behave strangely if certain locales are set. If you get errors when building, try setting the LANG variable:</source>
          <target state="translated">プラットフォームによっては、特定のロケールが設定されていると Perl の動作がおかしくなることがあります。ビルド時にエラーが出る場合は、LANG変数を設定してみてください。</target>
        </trans-unit>
        <trans-unit id="4a78afab7d6e8dd2e7a981b5139d692992694b9a" translate="yes" xml:space="preserve">
          <source>On some platforms, the only allowed value for this option is &lt;code&gt;true&lt;/code&gt;, for example, OpenBSD and Windows. Trying to set this option to &lt;code&gt;false&lt;/code&gt;, when creating the socket, fails in this case.</source>
          <target state="translated">一部のプラットフォームでは、このオプションに許可される値は &lt;code&gt;true&lt;/code&gt; のみです（OpenBSDやWindowsなど）。このオプションを &lt;code&gt;false&lt;/code&gt; に設定しようとすると、ソケットの作成時に失敗します。</target>
        </trans-unit>
        <trans-unit id="36908e6d72c2b03311eb938d2432a12b5ab335ef" translate="yes" xml:space="preserve">
          <source>On some platforms, this function might have no effect.</source>
          <target state="translated">プラットフォームによっては、この機能は効果がない場合があります。</target>
        </trans-unit>
        <trans-unit id="4e64396927ca10116aa5e806980b90b12fcdc017" translate="yes" xml:space="preserve">
          <source>On some systems it can be necessary to link with some more libraries (for example, &lt;code&gt;libnsl.a&lt;/code&gt; and &lt;code&gt;libsocket.a&lt;/code&gt; on Solaris, or &lt;code&gt;wsock32.lib&lt;/code&gt; on Windows) to use the communication facilities of &lt;code&gt;Erl_Interface&lt;/code&gt;.</source>
          <target state="translated">一部のシステムでは、 &lt;code&gt;libnsl.a&lt;/code&gt; の通信機能を使用するために、さらにいくつかのライブラリー（例えば、Solarisではlibnsl.aおよび &lt;code&gt;libsocket.a&lt;/code&gt; 、Windowsでは &lt;code&gt;wsock32.lib&lt;/code&gt; ）とリンクする必要がある場合があり &lt;code&gt;Erl_Interface&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb868b4886e090c126e2950aab6d84ed7dcb16dc" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;0&lt;/code&gt; is returned and &lt;code&gt;obuf&lt;/code&gt; is initialized to contain table statistics, otherwise &lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">成功すると &lt;code&gt;0&lt;/code&gt; が返され、 &lt;code&gt;obuf&lt;/code&gt; はテーブル統計を含むように初期化されます。それ以外の場合は &lt;code&gt;-1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b55c599082e06de776c0bd626fd828b706a34179" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;0&lt;/code&gt; is returned, the value of the environment variable has been written to the &lt;code&gt;value&lt;/code&gt; buffer, and &lt;code&gt;*value_size&lt;/code&gt; contains the string length (excluding the terminating &lt;code&gt;NULL&lt;/code&gt; character) of the value written to the &lt;code&gt;value&lt;/code&gt; buffer.</source>
          <target state="translated">成功すると、 &lt;code&gt;0&lt;/code&gt; は、環境変数の値が書き込まれている、返された &lt;code&gt;value&lt;/code&gt; バッファ、および &lt;code&gt;*value_size&lt;/code&gt; は（終端を除く文字列の長さ含まれている &lt;code&gt;NULL&lt;/code&gt; のに書き込まれた値の文字） &lt;code&gt;value&lt;/code&gt; バッファを。</target>
        </trans-unit>
        <trans-unit id="eddebcdb76f9fab8ab2298752db267fa58432d28" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;conp&lt;/code&gt; is filled in with the address and node name of the connecting client and a file descriptor is returned. On failure, &lt;code&gt;ERL_ERROR&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">成功すると、 &lt;code&gt;conp&lt;/code&gt; には接続しているクライアントのアドレスとノード名が入力され、ファイル記述子が返されます。失敗すると、 &lt;code&gt;ERL_ERROR&lt;/code&gt; が返され、 &lt;code&gt;erl_errno&lt;/code&gt; が &lt;code&gt;EIO&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="0bc86d5b291cc284bbc0ca0e72d47d0adc2e32d6" translate="yes" xml:space="preserve">
          <source>On success, &lt;code&gt;v&lt;/code&gt; (and &lt;code&gt;size&lt;/code&gt; if the object is binary) is initialized with the value associated with &lt;code&gt;key&lt;/code&gt;, and the function returns &lt;code&gt;EI_INT&lt;/code&gt;, &lt;code&gt;EI_FLT&lt;/code&gt;, &lt;code&gt;EI_STR&lt;/code&gt;, or &lt;code&gt;EI_BIN&lt;/code&gt;, indicating the type of object. On failure, &lt;code&gt;-1&lt;/code&gt; is returned and the arguments are not updated.</source>
          <target state="translated">成功すると、 &lt;code&gt;v&lt;/code&gt; （およびオブジェクトがバイナリの場合は &lt;code&gt;size&lt;/code&gt; ）が &lt;code&gt;key&lt;/code&gt; に関連付けられた値で初期化され、関数は &lt;code&gt;EI_INT&lt;/code&gt; 、 &lt;code&gt;EI_FLT&lt;/code&gt; 、 &lt;code&gt;EI_STR&lt;/code&gt; 、または &lt;code&gt;EI_BIN&lt;/code&gt; を返し、オブジェクトのタイプを示します。失敗すると &lt;code&gt;-1&lt;/code&gt; が返され、引数は更新されません。</target>
        </trans-unit>
        <trans-unit id="969e908d49a7fbc3a7e280f38ab4f55f6067faf3" translate="yes" xml:space="preserve">
          <source>On success, a descriptor connecting the calling process to EPMD is returned. On failure, &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to:</source>
          <target state="translated">成功すると、呼び出しプロセスをEPMDに接続する記述子が返されます。失敗すると &lt;code&gt;-1&lt;/code&gt; が返され、 &lt;code&gt;erl_errno&lt;/code&gt; が次のように設定されます。</target>
        </trans-unit>
        <trans-unit id="2aec08e035ff2227fedf237e8aaf81890b198c99" translate="yes" xml:space="preserve">
          <source>On success, sets &lt;code&gt;*key&lt;/code&gt; and &lt;code&gt;*value&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; if the iterator is positioned at head (before first entry) or tail (beyond last entry).</source>
          <target state="translated">成功すると &lt;code&gt;*key&lt;/code&gt; と &lt;code&gt;*value&lt;/code&gt; を設定し、 &lt;code&gt;true&lt;/code&gt; を返します。イテレータが先頭（最初のエントリの前）または末尾（最後のエントリの後ろ）に配置されている場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7ef0a43f7b72b72b522ca36cd55aa1e746822b9f" translate="yes" xml:space="preserve">
          <source>On success, sets &lt;code&gt;*pid&lt;/code&gt; to the local process registered with &lt;code&gt;name&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;name&lt;/code&gt; is not a registered process, or is not an atom, &lt;code&gt;false&lt;/code&gt; is returned and &lt;code&gt;*pid&lt;/code&gt; is unchanged.</source>
          <target state="translated">成功した場合、 &lt;code&gt;*pid&lt;/code&gt; を &lt;code&gt;name&lt;/code&gt; で登録されたローカルプロセスに設定し、 &lt;code&gt;true&lt;/code&gt; を返します。 &lt;code&gt;name&lt;/code&gt; が登録済みプロセスでない場合、またはアトムでない場合、 &lt;code&gt;false&lt;/code&gt; が返され、 &lt;code&gt;*pid&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="073e4acf139e5d3ba364bb27e432c64851509f50" translate="yes" xml:space="preserve">
          <source>On success, sets &lt;code&gt;*port&lt;/code&gt; to the port registered with &lt;code&gt;name&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;name&lt;/code&gt; is not a registered port, or is not an atom, &lt;code&gt;false&lt;/code&gt; is returned and &lt;code&gt;*port&lt;/code&gt; is unchanged.</source>
          <target state="translated">成功した場合、 &lt;code&gt;*port&lt;/code&gt; を &lt;code&gt;name&lt;/code&gt; で登録されたポートに設定し、 &lt;code&gt;true&lt;/code&gt; を返します。 &lt;code&gt;name&lt;/code&gt; が登録済みのポートでない場合、またはアトムでない場合、 &lt;code&gt;false&lt;/code&gt; が返され、 &lt;code&gt;*port&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="939344767976749cae972a1349799f2c2eaf12ef" translate="yes" xml:space="preserve">
          <source>On success, stores the resulting term at &lt;code&gt;*term&lt;/code&gt; and returns the number of bytes read. Returns &lt;code&gt;0&lt;/code&gt; if decoding fails or if &lt;code&gt;opts&lt;/code&gt; is invalid.</source>
          <target state="translated">成功した場合、結果の項を &lt;code&gt;*term&lt;/code&gt; に格納し、読み取られたバイト数を返します。デコードが失敗した場合、または &lt;code&gt;opts&lt;/code&gt; が無効な場合は &lt;code&gt;0&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c4c049046abd946d86db876a1e3d6ab44c243545" translate="yes" xml:space="preserve">
          <source>On success, the function returns &lt;code&gt;ERL_MSG&lt;/code&gt; and the &lt;code&gt;Emsg&lt;/code&gt; struct is initialized as described above, or &lt;code&gt;ERL_TICK&lt;/code&gt;, in which case no message is returned. On failure, the function returns &lt;code&gt;ERL_ERROR&lt;/code&gt; and sets &lt;code&gt;erl_errno&lt;/code&gt; to one of:</source>
          <target state="translated">成功した場合に、関数戻り &lt;code&gt;ERL_MSG&lt;/code&gt; と &lt;code&gt;Emsg&lt;/code&gt; の構造体は、上述のように初期化されるか、または &lt;code&gt;ERL_TICK&lt;/code&gt; ないメッセージが返された場合には、。失敗すると、関数は &lt;code&gt;ERL_ERROR&lt;/code&gt; を返し、 &lt;code&gt;erl_errno&lt;/code&gt; を次のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="629b14be4c544ff9f65dc57b340e61cbbb39aafa" translate="yes" xml:space="preserve">
          <source>On success, the function returns &lt;code&gt;ok&lt;/code&gt;. On failure, the function returns an opaque error, except the &lt;code&gt;pending_process&lt;/code&gt; error described earlier. The opaque errors are to be translated into human readable form by function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">成功すると、関数は &lt;code&gt;ok&lt;/code&gt; を返します。失敗すると、関数は前述の &lt;code&gt;pending_process&lt;/code&gt; エラーを除き、不透明なエラーを返します。不透明なエラーは、関数 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; によって人間が読める形式に変換されます。</target>
        </trans-unit>
        <trans-unit id="c5f40438c31e5fae2d92b0ab21e0ba8037f1d866" translate="yes" xml:space="preserve">
          <source>On success, the function returns &lt;code&gt;ok&lt;/code&gt;. On failure, the return value is &lt;code&gt;{error,ErrorDesc}&lt;/code&gt;, where &lt;code&gt;ErrorDesc&lt;/code&gt; is an opaque term to be translated into human readable form by function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">成功すると、関数は &lt;code&gt;ok&lt;/code&gt; を返します。失敗した場合、戻り値は &lt;code&gt;{error,ErrorDesc}&lt;/code&gt; 、 &lt;code&gt;ErrorDesc&lt;/code&gt; は、関数によって人間が読める形式に変換する不透明な用語である &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9434e82ca19ea4e7015799cf03a1286d4e4d6516" translate="yes" xml:space="preserve">
          <source>On success, the function returns a descriptor connecting the calling process to EPMD. On failure, &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">成功すると、関数は呼び出しプロセスをEPMDに接続する記述子を返します。失敗すると &lt;code&gt;-1&lt;/code&gt; が返され、 &lt;code&gt;erl_errno&lt;/code&gt; が &lt;code&gt;EIO&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="a4a5876f3c7f9a8dde05d398be614c4d3bae58d6" translate="yes" xml:space="preserve">
          <source>On success, the function returns a pointer to the resource type and &lt;code&gt;*tried&lt;/code&gt; is set to either &lt;code&gt;ERL_NIF_RT_CREATE&lt;/code&gt; or &lt;code&gt;ERL_NIF_RT_TAKEOVER&lt;/code&gt; to indicate what was done. On failure, returns &lt;code&gt;NULL&lt;/code&gt; and sets &lt;code&gt;*tried&lt;/code&gt; to &lt;code&gt;flags&lt;/code&gt;. It is allowed to set &lt;code&gt;tried&lt;/code&gt; to &lt;code&gt;NULL&lt;/code&gt;.</source>
          <target state="translated">成功すると、関数はリソースタイプへのポインタを返し、 &lt;code&gt;*tried&lt;/code&gt; は &lt;code&gt;ERL_NIF_RT_CREATE&lt;/code&gt; または &lt;code&gt;ERL_NIF_RT_TAKEOVER&lt;/code&gt; に設定され、何が行われたかを示します。失敗すると &lt;code&gt;NULL&lt;/code&gt; を返し、 &lt;code&gt;*tried&lt;/code&gt; を &lt;code&gt;flags&lt;/code&gt; に設定します。 &lt;code&gt;tried&lt;/code&gt; を &lt;code&gt;NULL&lt;/code&gt; に設定できます。</target>
        </trans-unit>
        <trans-unit id="9fed20a53218971de1395aaff5c9c60036d53fb8" translate="yes" xml:space="preserve">
          <source>On success, the function returns an Erlang pid containing the address of the specified name, and the node is initialized to the node name where &lt;code&gt;name&lt;/code&gt; is found. On failure, &lt;code&gt;NULL&lt;/code&gt; is returned and &lt;code&gt;node&lt;/code&gt; is not modified.</source>
          <target state="translated">成功すると、関数は指定された名前のアドレスを含むErlang pidを返し、ノードは &lt;code&gt;name&lt;/code&gt; が見つかったノード名に初期化されます。失敗すると &lt;code&gt;NULL&lt;/code&gt; が返され、 &lt;code&gt;node&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="337efc03ad89d708d3afb77816250b7b6e5ac95d" translate="yes" xml:space="preserve">
          <source>On success, the function returns an array of strings, each containing a single registered name, and sets &lt;code&gt;count&lt;/code&gt; to the number of names found. The array is terminated by a single &lt;code&gt;NULL&lt;/code&gt; pointer. On failure, the function returns &lt;code&gt;NULL&lt;/code&gt; and &lt;code&gt;count&lt;/code&gt; is not modified.</source>
          <target state="translated">成功すると、関数は文字列の配列を返します。各文字列には単一の登録名が含まれており、 &lt;code&gt;count&lt;/code&gt; には見つかった名前の数が設定されます。配列は単一の &lt;code&gt;NULL&lt;/code&gt; ポインターで終了します。失敗すると、関数は &lt;code&gt;NULL&lt;/code&gt; を返し、 &lt;code&gt;count&lt;/code&gt; は変更されません。</target>
        </trans-unit>
        <trans-unit id="b4272e6f5e6ca873a7a08ed89c16a8a80ef49afd" translate="yes" xml:space="preserve">
          <source>On success, the function returns the value associated with &lt;code&gt;key&lt;/code&gt; and indicates its length in &lt;code&gt;size&lt;/code&gt;. If the object is not found or if it is not a binary object, &lt;code&gt;NULL&lt;/code&gt; is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between &lt;code&gt;NULL&lt;/code&gt; and a valid result), use the more general function &lt;code&gt;ei_reg_getval()&lt;/code&gt; instead.</source>
          <target state="translated">成功すると、関数は &lt;code&gt;key&lt;/code&gt; に関連付けられた値を返し、その長さを &lt;code&gt;size&lt;/code&gt; で示します。オブジェクトが見つからない場合、またはバイナリオブジェクトでない場合は、 &lt;code&gt;NULL&lt;/code&gt; が返されます。インバンドエラーレポートの問題（つまり、 &lt;code&gt;NULL&lt;/code&gt; と有効な結果を区別できない場合）を回避するには、代わりに、より一般的な関数 &lt;code&gt;ei_reg_getval()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="05d5be1ae587938fb787490f4e22f1def9a340ce" translate="yes" xml:space="preserve">
          <source>On success, the function returns the value associated with &lt;code&gt;key&lt;/code&gt;. If the object is not found or if it is not a floating point object, &lt;code&gt;-1.0&lt;/code&gt; is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between &lt;code&gt;-1.0&lt;/code&gt; and a valid result), use the more general function &lt;code&gt;ei_reg_getval()&lt;/code&gt; instead.</source>
          <target state="translated">成功すると、関数は &lt;code&gt;key&lt;/code&gt; に関連付けられた値を返します。オブジェクトが見つからない場合、または浮動小数点オブジェクトでない場合は、 &lt;code&gt;-1.0&lt;/code&gt; が返されます。インバンドエラーレポートの問題を回避するには（つまり、 &lt;code&gt;-1.0&lt;/code&gt; と有効な結果を区別できない場合）、代わりに、より一般的な関数 &lt;code&gt;ei_reg_getval()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="b3820a5ea0fe718970e9f3bbe04885da2999ec49" translate="yes" xml:space="preserve">
          <source>On success, the function returns the value associated with &lt;code&gt;key&lt;/code&gt;. If the object is not found or if it is not a string, &lt;code&gt;NULL&lt;/code&gt; is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between &lt;code&gt;NULL&lt;/code&gt; and a valid result), use the more general function &lt;code&gt;ei_reg_getval()&lt;/code&gt; instead.</source>
          <target state="translated">成功すると、関数は &lt;code&gt;key&lt;/code&gt; に関連付けられた値を返します。オブジェクトが見つからない場合、または文字列でない場合は、 &lt;code&gt;NULL&lt;/code&gt; が返されます。インバンドエラーレポートの問題（つまり、 &lt;code&gt;NULL&lt;/code&gt; と有効な結果を区別できない場合）を回避するには、代わりに、より一般的な関数 &lt;code&gt;ei_reg_getval()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="f63666e52d190298b2a061e3c8a1ed17bebbd73f" translate="yes" xml:space="preserve">
          <source>On success, the function returns the value associated with &lt;code&gt;key&lt;/code&gt;. If the object is not found or if it is not an integer object, &lt;code&gt;-1&lt;/code&gt; is returned. To avoid problems with in-band error reporting (that is, if you cannot distinguish between &lt;code&gt;-1&lt;/code&gt; and a valid result), use the more general function &lt;code&gt;ei_reg_getval()&lt;/code&gt; instead.</source>
          <target state="translated">成功すると、関数は &lt;code&gt;key&lt;/code&gt; に関連付けられた値を返します。オブジェクトが見つからない場合、または整数オブジェクトでない場合は、 &lt;code&gt;-1&lt;/code&gt; が返されます。帯域内エラー報告に関する問題（つまり、 &lt;code&gt;-1&lt;/code&gt; と有効な結果を区別できない場合）を回避するには、代わりに、より一般的な関数 &lt;code&gt;ei_reg_getval()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="826f3f3c68edb8d6a8417ffe459589634fbc1144" translate="yes" xml:space="preserve">
          <source>On success, the functions return &lt;code&gt;ERL_MSG&lt;/code&gt; and the &lt;code&gt;msg&lt;/code&gt; struct is initialized. &lt;code&gt;erlang_msg&lt;/code&gt; is defined as follows:</source>
          <target state="translated">成功すると、関数は &lt;code&gt;ERL_MSG&lt;/code&gt; を返し、 &lt;code&gt;msg&lt;/code&gt; 構造体が初期化されます。 &lt;code&gt;erlang_msg&lt;/code&gt; は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="2e36d3c841193235e57c861682cf6d25481358db" translate="yes" xml:space="preserve">
          <source>On success, the message is placed in the specified buffer and the function returns the number of bytes actually read. On failure, the function returns &lt;code&gt;ERL_ERROR&lt;/code&gt; and sets &lt;code&gt;erl_errno&lt;/code&gt; to one of the following:</source>
          <target state="translated">成功すると、メッセージは指定されたバッファーに入れられ、関数は実際に読み取られたバイト数を返します。失敗した場合は、関数が戻っ &lt;code&gt;ERL_ERROR&lt;/code&gt; とのセットは &lt;code&gt;erl_errno&lt;/code&gt; 、次のいずれかに：</target>
        </trans-unit>
        <trans-unit id="5b25bb3efb4ee6e26cac0f259c10a630574681e4" translate="yes" xml:space="preserve">
          <source>On success, the message is placed in the specified buffer and the function returns the number of bytes actually read. On failure, the function returns a negative value and sets &lt;code&gt;erl_errno&lt;/code&gt; to one of:</source>
          <target state="translated">成功すると、メッセージは指定されたバッファーに入れられ、関数は実際に読み取られたバイト数を返します。失敗すると、関数は負の値を返し、 &lt;code&gt;erl_errno&lt;/code&gt; を次のいずれかに設定します。</target>
        </trans-unit>
        <trans-unit id="772f9d0d6c197237442ca0a6e490f7b7f2ebb396" translate="yes" xml:space="preserve">
          <source>On success, the registry is resized, all contents rehashed, and &lt;code&gt;0&lt;/code&gt; is returned. On failure, the registry is left unchanged and &lt;code&gt;-1&lt;/code&gt; is returned.</source>
          <target state="translated">成功すると、レジストリのサイズが変更され、すべてのコンテンツが再ハッシュされ、 &lt;code&gt;0&lt;/code&gt; が返されます。失敗すると、レジストリは変更されずに残り、 &lt;code&gt;-1&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="b55ff64c65276715f5cf5ac620e52f2b4c69380a" translate="yes" xml:space="preserve">
          <source>On systems that support OS signals, it is also possible to stop the runtime system and generate a crash dump by sending the &lt;code&gt;SIGUSR1&lt;/code&gt; signal.</source>
          <target state="translated">OSシグナルをサポートするシステムでは、 &lt;code&gt;SIGUSR1&lt;/code&gt; シグナルを送信して、ランタイムシステムを停止し、クラッシュダンプを生成することもできます。</target>
        </trans-unit>
        <trans-unit id="8295dab59d105fcadee920c83d7a0087818d1ff8" translate="yes" xml:space="preserve">
          <source>On tab &lt;strong&gt;Internal Tables&lt;/strong&gt; you can from the left-hand menu select &lt;strong&gt;Hash Tables&lt;/strong&gt;, &lt;strong&gt;Index Tables&lt;/strong&gt;, or &lt;strong&gt;Internal ETS Tables&lt;/strong&gt;.</source>
          <target state="translated">タブで&lt;strong&gt;内部テーブルの&lt;/strong&gt;選択左側のメニューから、次のことができ&lt;strong&gt;ハッシュテーブル&lt;/strong&gt;、&lt;strong&gt;インデックステーブル&lt;/strong&gt;、または&lt;strong&gt;内部ETSテーブル&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c2fcf0646802d9dc8e8b2dc7ce9d29177a614ac1" translate="yes" xml:space="preserve">
          <source>On the &lt;code&gt;Code&lt;/code&gt; page the Erlang source code is displayed. It is possible to search forwards and backwards for text in the module. Enter a regular expression in the &lt;code&gt;Find&lt;/code&gt; field and press enter. It is also possible to go to a certain line in the module. The &lt;code&gt;Back&lt;/code&gt; button can be used to go back to the previous position.</source>
          <target state="translated">[ &lt;code&gt;Code&lt;/code&gt; ページに、Erlangソースコードが表示されます。モジュール内のテキストを前方および後方に検索できます。[ &lt;code&gt;Find&lt;/code&gt; フィールドに正規表現を入力して、Enterキーを押します。モジュールの特定の行に移動することもできます。 &lt;code&gt;Back&lt;/code&gt; ボタンは、前の位置に戻るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="6f72d7009505c0a635de5a33f1a164f62ac37178" translate="yes" xml:space="preserve">
          <source>On the &lt;code&gt;erl&lt;/code&gt; command line you can specify options that the SSL/TLS distribution adds when creating a socket.</source>
          <target state="translated">上の &lt;code&gt;erl&lt;/code&gt; コマンドラインあなたは、ソケットを作成するときにSSL / TLSの分布が追加するオプションを指定することができます。</target>
        </trans-unit>
        <trans-unit id="58dd19bfb0b41f363c09999a6e4ad4b9c8bdfec9" translate="yes" xml:space="preserve">
          <source>On the C side, it is necessary to write functions for receiving and sending data with 2 byte length indicators from/to Erlang. By default, the C program is to read from standard input (file descriptor 0) and write to standard output (file descriptor 1). Examples of such functions, &lt;code&gt;read_cmd/1&lt;/code&gt; and &lt;code&gt;write_cmd/2&lt;/code&gt;, follows:</source>
          <target state="translated">C側では、Erlangとの間で2バイト長のインジケーターを使用してデータを送受信するための関数を作成する必要があります。デフォルトでは、Cプログラムは標準入力（ファイル記述子0）から読み取り、標準出力（ファイル記述子1）に書き込みます。そのような関数の例である &lt;code&gt;read_cmd/1&lt;/code&gt; および &lt;code&gt;write_cmd/2&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="b62b54f6f16d351431e8df23105f4a3d3614069f" translate="yes" xml:space="preserve">
          <source>On the client side, function &lt;code&gt;&lt;a href=&quot;tftp#read_file-3&quot;&gt;read_file/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;tftp#write_file-3&quot;&gt;write_file/3&lt;/a&gt;&lt;/code&gt; spawn a temporary client process establishing contact with a TFTP daemon and perform the file transfer.</source>
          <target state="translated">クライアント側では、関数 &lt;code&gt;&lt;a href=&quot;tftp#read_file-3&quot;&gt;read_file/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;tftp#write_file-3&quot;&gt;write_file/3&lt;/a&gt;&lt;/code&gt; が、TFTPデーモンとの接続を確立する一時的なクライアントプロセスを生成し、ファイル転送を実行します。</target>
        </trans-unit>
        <trans-unit id="de8d284e24c9173448479649ca3673e3b9453805" translate="yes" xml:space="preserve">
          <source>On the client side, the callback interaction is the same, but it starts and ends a bit differently. It starts with a call to &lt;code&gt;prepare/5&lt;/code&gt; with the same arguments as &lt;code&gt;open/5&lt;/code&gt; takes. &lt;code&gt;prepare/5&lt;/code&gt; is expected to validate the TFTP options suggested by the user and to return the subset of them that it accepts. Then the options are sent to the server, which performs the same TFTP option negotiation procedure. The options that are accepted by the server are forwarded to function &lt;code&gt;open/5&lt;/code&gt; on the client side. On the client side, function &lt;code&gt;open/5&lt;/code&gt; must accept all option as-is or reject the transfer. Then the callback interaction follows the same pattern as described for the server side. When the last block is encountered in &lt;code&gt;read/1&lt;/code&gt; or &lt;code&gt;write/2&lt;/code&gt;, the returned state is forwarded to the user and returned from &lt;code&gt;read_file&lt;/code&gt;/3 or &lt;code&gt;write_file/3&lt;/code&gt;.</source>
          <target state="translated">クライアント側では、コールバックの相互作用は同じですが、開始と終了が少し異なります。まず、 &lt;code&gt;open/5&lt;/code&gt; と同じ引数で &lt;code&gt;prepare/5&lt;/code&gt; を呼び出します。 &lt;code&gt;prepare/5&lt;/code&gt; は、ユーザーが提案したTFTPオプションを検証し、受け入れたオプションのサブセットを返すことが期待されています。次に、オプションがサーバーに送信され、サーバーは同じTFTPオプションネゴシエーション手順を実行します。サーバーによって受け入れられたオプションは、クライアント側の &lt;code&gt;open/5&lt;/code&gt; 機能に転送されます。クライアント側では、関数 &lt;code&gt;open/5&lt;/code&gt; はすべてのオプションをそのまま受け入れるか、転送を拒否する必要があります。その後、コールバックの相互作用は、サーバー側で説明したのと同じパターンに従います。最後のブロックに遭遇したとき &lt;code&gt;read/1&lt;/code&gt; または &lt;code&gt;write/2&lt;/code&gt; の場合、返された状態はユーザーに転送され、 &lt;code&gt;read_file&lt;/code&gt; / 3または &lt;code&gt;write_file/3&lt;/code&gt; から返されます。</target>
        </trans-unit>
        <trans-unit id="5fb24826c266fe2b7d30c2585ff68e6ee2e2233f" translate="yes" xml:space="preserve">
          <source>On the client side, where the &lt;code&gt;open/5&lt;/code&gt; call has been preceded by a call to &lt;code&gt;prepare/5&lt;/code&gt;, all options must be accepted or rejected.</source>
          <target state="translated">クライアント側では、 &lt;code&gt;open/5&lt;/code&gt; 呼び出しの前に &lt;code&gt;prepare/5&lt;/code&gt; への呼び出しが行われているため、すべてのオプションを受け入れるか拒否する必要があります。</target>
        </trans-unit>
        <trans-unit id="30bc1d9225132fab91da41cb1dc8196b10d81a6f" translate="yes" xml:space="preserve">
          <source>On the destination side the transport service waits for messages. Each message is forwarded to the Megaco application via the megaco:receive_message/4 callback function. The transport service may or may not provide means for blocking and unblocking the reception of the incoming messages.</source>
          <target state="translated">宛先側では、トランスポートサービスはメッセージを待ちます。各メッセージは、megaco:receive_message/4コールバック関数を介してMegacoアプリケーションに転送されます。トランスポートサービスは、着信メッセージの受信をブロックしたり、ブロックを解除したりする手段を提供してもよいし、提供しなくてもよい。</target>
        </trans-unit>
        <trans-unit id="8d08ce8dca231cb0c413cc427e0f7b3615dc40e4" translate="yes" xml:space="preserve">
          <source>On the library page it is possible to control which sources the tool will use. The page is organized as a tree which can be expanded and collapsed by clicking on the little symbol in the beginning of the expandable/collapsible lines.</source>
          <target state="translated">ライブラリページでは、ツールが使用するソースを制御することができます。ページはツリーとして構成されており、展開・折りたたみ可能な行の先頭にある小さなシンボルをクリックすることで、展開・折りたたみが可能です。</target>
        </trans-unit>
        <trans-unit id="359fa7aa2c051b4488b5e4f004a78d6117f975d2" translate="yes" xml:space="preserve">
          <source>On the node &lt;code&gt;a@gin&lt;/code&gt;:</source>
          <target state="translated">ノード &lt;code&gt;a@gin&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4dcf5e92ec7cf6d33837ea0dba4f2cf9a86307f9" translate="yes" xml:space="preserve">
          <source>On the node &lt;code&gt;b@skeppet&lt;/code&gt;:</source>
          <target state="translated">ノード &lt;code&gt;b@skeppet&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="504dd890d20c855491af2a80a9207cca701308e3" translate="yes" xml:space="preserve">
          <source>On the node &lt;code&gt;stack&lt;/code&gt; there's an Erlang node &lt;code&gt;ant@stack&lt;/code&gt;, in the shell, type the following:</source>
          <target state="translated">ノード &lt;code&gt;stack&lt;/code&gt; にはErlangノード &lt;code&gt;ant@stack&lt;/code&gt; があり、シェルで次のように入力します。</target>
        </trans-unit>
        <trans-unit id="72075800ddf3add147be6be68bd87c4adad1f4d0" translate="yes" xml:space="preserve">
          <source>On the node where the application is started, there is a transaction coordinator process. If the transaction is distributed, there is also a transaction participant process on all the other nodes where commit-work needs to be performed.</source>
          <target state="translated">アプリケーションが起動されたノードには、トランザクションコーディネータプロセスがあります。トランザクションが分散されている場合、コミット作業を実行する必要がある他のすべてのノードにもトランザクション参加者プロセスが存在します。</target>
        </trans-unit>
        <trans-unit id="30fba55f8fe9ca566a03374554f0601d38f82b56" translate="yes" xml:space="preserve">
          <source>On the other hand it worth mentioning that at least all cipher suites that would rely on non-validated algorithms are automatically disabled in FIPS mode.</source>
          <target state="translated">一方で、少なくとも非検証アルゴリズムに依存するすべての暗号スイートは、FIPS モードでは自動的に無効化されていることは言及する価値があります。</target>
        </trans-unit>
        <trans-unit id="3d6f6cddc5dd538a25571ab6dae15764b54f7d33" translate="yes" xml:space="preserve">
          <source>On the other hand,</source>
          <target state="translated">その一方で</target>
        </trans-unit>
        <trans-unit id="79d5245ba64d69949e15fc6366d11aa934acec96" translate="yes" xml:space="preserve">
          <source>On the receiving side the transport module receives the message and forwards it to the protocol engine, which decodes it and invokes user callback functions for each transaction. When a user has handled its action requests, it simply returns a list of action replies (or a message error) and the protocol engine uses the encoding module and transport module to compose and forward the message to the originating user.</source>
          <target state="translated">受信側では、トランスポートモジュールがメッセージを受信してプロトコルエンジンに転送し、プロトコルエンジンはそれをデコードして、各トランザクションのためにユーザーコールバック関数を呼び出す。ユーザーがアクションリクエストを処理した場合、アクション応答のリスト(またはメッセージエラー)を返し、プロトコルエンジンはエンコーディングモジュールとトランスポートモジュールを使用してメッセージを構成し、発信元のユーザーに転送します。</target>
        </trans-unit>
        <trans-unit id="eb2efe7a16721a2ea4eaaca280d15198cd82819c" translate="yes" xml:space="preserve">
          <source>On the server side, the callback interaction starts with a call to &lt;code&gt;open/5&lt;/code&gt; with the registered initial callback state. &lt;code&gt;open/5&lt;/code&gt; is expected to open the (virtual) file. Then either function &lt;code&gt;read/1&lt;/code&gt; or &lt;code&gt;write/2&lt;/code&gt; is invoked repeatedly, once per transferred block. At each function call, the state returned from the previous call is obtained. When the last block is encountered, function &lt;code&gt;read/1&lt;/code&gt; or &lt;code&gt;write/2&lt;/code&gt; is expected to close the (virtual) file and return its last state. Function &lt;code&gt;abort/3&lt;/code&gt; is only used in error situations. Function &lt;code&gt;prepare/5&lt;/code&gt; is not used on the server side.</source>
          <target state="translated">サーバー側では、コールバックの対話は、登録された初期コールバック状態での &lt;code&gt;open/5&lt;/code&gt; の呼び出しから始まります。 &lt;code&gt;open/5&lt;/code&gt; は（仮想）ファイルを開くことが期待されています。次に、関数 &lt;code&gt;read/1&lt;/code&gt; または &lt;code&gt;write/2&lt;/code&gt; が、転送されたブロックごとに1回繰り返し呼び出されます。各関数呼び出しでは、前の呼び出しから返された状態が取得されます。最後のブロックが検出されると、関数 &lt;code&gt;read/1&lt;/code&gt; または &lt;code&gt;write/2&lt;/code&gt; が（仮想）ファイルを閉じ、最後の状態を返すことが期待されます。関数 &lt;code&gt;abort/3&lt;/code&gt; はエラー状況でのみ使用されます。関数 &lt;code&gt;prepare/5&lt;/code&gt; はサーバー側では使用されません。</target>
        </trans-unit>
        <trans-unit id="7f688e5da429c0dc3dd18d9eb9bf400ae2b1e54a" translate="yes" xml:space="preserve">
          <source>On the server side, where there is no preceding &lt;code&gt;prepare/5&lt;/code&gt; call, no new options can be added, but those present in &lt;code&gt;SuggestedOptions&lt;/code&gt; can be omitted or replaced with new values in &lt;code&gt;AcceptedOptions&lt;/code&gt;.</source>
          <target state="translated">サーバー側では、前の &lt;code&gt;prepare/5&lt;/code&gt; 呼び出しがないため、新しいオプションを追加することはできませんが、 &lt;code&gt;SuggestedOptions&lt;/code&gt; にあるオプションを省略したり、 &lt;code&gt;AcceptedOptions&lt;/code&gt; の新しい値で置き換えたりすることができます。</target>
        </trans-unit>
        <trans-unit id="7d544406993542a47ac30874abf36e8f76938251" translate="yes" xml:space="preserve">
          <source>On the system settings page it is possible to control some global settings that are used as defaults for all applications. Set the &lt;code&gt;Application inclusion policy&lt;/code&gt; to &lt;code&gt;include&lt;/code&gt; to include all applications that are not explicitly excluded. See &lt;code&gt;incl_cond&lt;/code&gt; (application inclusion) and &lt;code&gt;mod_cond&lt;/code&gt; (module inclusion) in the reference manual for the module &lt;code&gt;reltool&lt;/code&gt; for more info.</source>
          <target state="translated">システム設定ページでは、すべてのアプリケーションのデフォルトとして使用されるいくつかのグローバル設定を制御できます。明示的に除外されていないすべてのアプリケーションを &lt;code&gt;include&lt;/code&gt; には、 &lt;code&gt;Application inclusion policy&lt;/code&gt; を設定します。参照 &lt;code&gt;incl_cond&lt;/code&gt; （アプリケーション包含）と &lt;code&gt;mod_cond&lt;/code&gt; モジュールのリファレンスマニュアルで（モジュール包含） &lt;code&gt;reltool&lt;/code&gt; 詳細は。</target>
        </trans-unit>
        <trans-unit id="200db783be88f8550d4a8913f57876ec9c489e2e" translate="yes" xml:space="preserve">
          <source>On the third line (or second line depending on the presence of the Emacs directive), arguments can be specified to the emulator, for example:</source>
          <target state="translated">3行目(Emacsディレクティブの存在によっては2行目)では、例えばエミュレータに引数を指定することができます。</target>
        </trans-unit>
        <trans-unit id="919203571b510b75243e5425885ce5fd82bf64cd" translate="yes" xml:space="preserve">
          <source>On time-out, the test run is aborted when the current test job is finished. If &lt;code&gt;skip_rest&lt;/code&gt; is provided, the remaining test cases in the current test job are skipped (described later).</source>
          <target state="translated">タイムアウトになると、現在のテストジョブが終了すると、テストの実行が中止されます。場合 &lt;code&gt;skip_rest&lt;/code&gt; が設けられている、現在のテストジョブの残りのテストケースがスキップされ（後述）。</target>
        </trans-unit>
        <trans-unit id="94d0fdbeb40f8b7248647cabbfc52c99b7c568d4" translate="yes" xml:space="preserve">
          <source>On unix you can view the manual pages in emacs. In order to find the manual pages, the variable `erlang-root-dir' should be bound to the name of the directory containing the Erlang installation. The name should not include the final slash. Practically, you should add a line on the following form to your ~/.emacs,</source>
          <target state="translated">Unixではemacsでマニュアルページを見ることができます。マニュアルページを見つけるためには、変数 `erlang-root-dir' をErlangのインストール先のディレクトリ名にバインドしなければなりません。この名前には最後のスラッシュを含めてはいけません。実際には、次のようなフォームの行を ~/.emacs に追加してください。</target>
        </trans-unit>
        <trans-unit id="730b25cb05ff67e83ca2df0e26ea964cf618b32a" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;demonitor(MonitorRef)&lt;/code&gt; has returned, it is guaranteed that no &lt;code&gt;{'DOWN', MonitorRef, _, _, _}&lt;/code&gt; message, because of the monitor, will be placed in the caller message queue in the future. However, a &lt;code&gt;{'DOWN', MonitorRef, _, _, _}&lt;/code&gt; message can have been placed in the caller message queue before the call. It is therefore usually advisable to remove such a &lt;code&gt;'DOWN'&lt;/code&gt; message from the message queue after monitoring has been stopped. &lt;code&gt;&lt;a href=&quot;#demonitor-2&quot;&gt;demonitor(MonitorRef, [flush])&lt;/a&gt;&lt;/code&gt; can be used instead of &lt;code&gt;demonitor(MonitorRef)&lt;/code&gt; if this cleanup is wanted.</source>
          <target state="translated">一旦 &lt;code&gt;demonitor(MonitorRef)&lt;/code&gt; が復帰したことがないことが保証され、 &lt;code&gt;{'DOWN', MonitorRef, _, _, _}&lt;/code&gt; メッセージ、なぜならモニタ、将来的に発信者のメッセージキューに配置されます。ただし、 &lt;code&gt;{'DOWN', MonitorRef, _, _, _}&lt;/code&gt; メッセージは、呼び出しの前に呼び出し元のメッセージキューに入れることができます。したがって、通常は、監視が停止した後に、このような &lt;code&gt;'DOWN'&lt;/code&gt; メッセージをメッセージキューから削除することをお勧めします。このクリーンアップが必要な場合は、 &lt;code&gt;demonitor(MonitorRef)&lt;/code&gt; の代わりに &lt;code&gt;&lt;a href=&quot;#demonitor-2&quot;&gt;demonitor(MonitorRef, [flush])&lt;/a&gt;&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="8eb33ed8277cd53945b8bd1336967ae012eaa432" translate="yes" xml:space="preserve">
          <source>Once &lt;code&gt;unlink(Id)&lt;/code&gt; has returned, it is guaranteed that the link between the caller and the entity referred to by &lt;code&gt;Id&lt;/code&gt; has no effect on the caller in the future (unless the link is setup again). If the caller is trapping exits, an &lt;code&gt;{'EXIT', Id, _}&lt;/code&gt; message from the link can have been placed in the caller's message queue before the call.</source>
          <target state="translated">いったん &lt;code&gt;unlink(Id)&lt;/code&gt; 戻ってきた、呼び出し元と、エンティティによって参照されるとの間のリンクが保証されて &lt;code&gt;Id&lt;/code&gt; は（リンクが再び設定されていない限り）将来的には、発信者には影響を与えません。呼び出し元が出口をトラップしている場合、リンクからの &lt;code&gt;{'EXIT', Id, _}&lt;/code&gt; メッセージが呼び出しの前に呼び出し元のメッセージキューに置かれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="c2da2fd243f88b2358a1e72df5b1691b330413f0" translate="yes" xml:space="preserve">
          <source>Once a port data lock has been created, it must be locked during all operations on the driver queue of the &lt;code&gt;port&lt;/code&gt;.</source>
          <target state="translated">ポートデータロックを作成したら、ポートのドライバーキューでのすべての操作中にロックする必要があり &lt;code&gt;port&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="472161e0880a728a8d14ba236e81c941cac5bdc2" translate="yes" xml:space="preserve">
          <source>Once loaded, a NIF library is persistent. It will not be unloaded until the module code version that it belongs to is purged.</source>
          <target state="translated">一度ロードされると、NIF ライブラリは永続的に存在します。それが属するモジュールコードのバージョンがパージされるまでアンロードされることはありません。</target>
        </trans-unit>
        <trans-unit id="6ae5090c73eef20a1901a4262fb628566dc03086" translate="yes" xml:space="preserve">
          <source>Once read, this file produces the same configuration variables as the following text file:</source>
          <target state="translated">読み込まれると、このファイルは以下のテキストファイルと同じ設定変数を生成します。</target>
        </trans-unit>
        <trans-unit id="2874f79a41ab6a4167b9cad282ba54a8323fe29c" translate="yes" xml:space="preserve">
          <source>Once the CTH is installed into a certain test run it remains there until its scope is expired. The scope of a CTH depends on when it is installed, see the following table. Function &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:init-2&quot;&gt;init/2&lt;/a&gt;&lt;/code&gt; is called at the beginning of the scope and function &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:terminate-1&quot;&gt;terminate/1&lt;/a&gt;&lt;/code&gt; is called when the scope ends.</source>
          <target state="translated">CTHが特定のテスト実行にインストールされると、そのスコープが期限切れになるまでCTHが残ります。CTHの範囲は、いつインストールされるかによって異なります。次の表を参照してください。関数 &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:init-2&quot;&gt;init/2&lt;/a&gt;&lt;/code&gt; はスコープの最初に呼び出され、関数 &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:terminate-1&quot;&gt;terminate/1&lt;/a&gt;&lt;/code&gt; はスコープの終了時に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f3e0d89fa4414f90c8258d08a4cc02467fbf1279" translate="yes" xml:space="preserve">
          <source>Once the appropriate modules are interpreted, breakpoints can be set at relevant locations in the source code. Breakpoints are specified on a line basis. When a process reaches a breakpoint, it stops and waits for commands (&lt;strong&gt;Step&lt;/strong&gt;, &lt;strong&gt;Skip&lt;/strong&gt;, &lt;strong&gt;Continue&lt;/strong&gt; ...) from the user.</source>
          <target state="translated">適切なモジュールが解釈されると、ブレークポイントをソースコードの関連する場所に設定できます。ブレークポイントは行ごとに指定されます。プロセスがブレークポイントに到達すると、プロセスは停止し、ユーザーからのコマンド（&lt;strong&gt;ステップ&lt;/strong&gt;、&lt;strong&gt;スキップ&lt;/strong&gt;、&lt;strong&gt;続行&lt;/strong&gt; ...）を待ちます。</target>
        </trans-unit>
        <trans-unit id="706354aec2cc6d6f0642591cdb86cf2c478e223c" translate="yes" xml:space="preserve">
          <source>Once the data is collected to the server it can be filtered, sorted and printed in many different ways.</source>
          <target state="translated">データがサーバーに収集されると、様々な方法でフィルタリング、ソート、印刷することができます。</target>
        </trans-unit>
        <trans-unit id="ac354611c2ceba110708f663296284723c689ebb" translate="yes" xml:space="preserve">
          <source>Once the port data lock has been created, every access to data associated with the port data lock must be done while the port data lock is locked. The port data lock is locked and unlocked by &lt;code&gt;&lt;a href=&quot;#driver_pdl_lock&quot;&gt;driver_pdl_lock&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#driver_pdl_unlock&quot;&gt;driver_pdl_unlock&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">ポートデータロックが作成されたら、ポートデータロックがロックされている間、ポートデータロックに関連付けられているデータへのすべてのアクセスを実行する必要があります。ポートデータロックがでロックされ、ロックが解除され &lt;code&gt;&lt;a href=&quot;#driver_pdl_lock&quot;&gt;driver_pdl_lock&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#driver_pdl_unlock&quot;&gt;driver_pdl_unlock&lt;/a&gt;&lt;/code&gt; それぞれ。</target>
        </trans-unit>
        <trans-unit id="d4566776ad00ac441fb67a63e43838839e8da21d" translate="yes" xml:space="preserve">
          <source>Once the system is built, you might want to change it. Having a test release in some nice directory might be useful, but you can also run Erlang from within the source tree. The target &lt;code&gt;local_setup&lt;/code&gt;, makes the program &lt;code&gt;$ERL_TOP/bin/erl.exe&lt;/code&gt; usable and it also uses all the OTP libraries in the source tree.</source>
          <target state="translated">システムが構築されたら、それを変更することができます。素敵なディレクトリにテストリリースがあると便利かもしれませんが、ソースツリー内からErlangを実行することもできます。ターゲットの &lt;code&gt;local_setup&lt;/code&gt; は、プログラム &lt;code&gt;$ERL_TOP/bin/erl.exe&lt;/code&gt; 使用可能にし、ソースツリー内のすべてのOTPライブラリも使用します。</target>
        </trans-unit>
        <trans-unit id="ad8f7b7317e234e5165d7fda5e02abbb7d93475a" translate="yes" xml:space="preserve">
          <source>Once you have a lock counting enabled VM the module &lt;code&gt;lcnt&lt;/code&gt; can be used. The module is intended to be used from the current running nodes shell. To access remote nodes use &lt;code&gt;lcnt:clear(Node)&lt;/code&gt; and &lt;code&gt;lcnt:collect(Node)&lt;/code&gt;.</source>
          <target state="translated">ロックカウントが有効なVMを &lt;code&gt;lcnt&lt;/code&gt; 、モジュールlcntを使用できます。このモジュールは、現在実行中のノードシェルから使用するためのものです。リモートノードにアクセスするには、 &lt;code&gt;lcnt:clear(Node)&lt;/code&gt; および &lt;code&gt;lcnt:collect(Node)&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="fe6fa81042f05838c7c931d240a87fc23ec1e33e" translate="yes" xml:space="preserve">
          <source>Once you have chosen the modules or directories you want to analyze, click the &lt;strong&gt;Run&lt;/strong&gt; button to start the analysis. If you for some reason want to stop the analysis while it is running, click the &lt;strong&gt;Stop&lt;/strong&gt; button.</source>
          <target state="translated">分析するモジュールまたはディレクトリを選択したら、[ &lt;strong&gt;実行&lt;/strong&gt; ]ボタンをクリックして分析を開始します。何らかの理由で実行中に分析を停止したい場合は、[ &lt;strong&gt;停止&lt;/strong&gt; ]ボタンをクリックします。</target>
        </trans-unit>
        <trans-unit id="f1866013abe7a3a8a91c1626525b2105bdb78c26" translate="yes" xml:space="preserve">
          <source>One MIB can communicate with many applications.</source>
          <target state="translated">1つのMIBは、多くのアプリケーションと通信することができます。</target>
        </trans-unit>
        <trans-unit id="7314739d088633c38ec313d94ecdc0d77f14a5ba" translate="yes" xml:space="preserve">
          <source>One can get an approximation of the &lt;code&gt;native&lt;/code&gt; time unit by calling &lt;code&gt;erlang:convert_time_unit(1, second, native)&lt;/code&gt;. The result equals the number of whole &lt;code&gt;native&lt;/code&gt; time units per second. If the number of &lt;code&gt;native&lt;/code&gt; time units per second does not add up to a whole number, the result is rounded downwards.</source>
          <target state="translated">&lt;code&gt;erlang:convert_time_unit(1, second, native)&lt;/code&gt; 呼び出すことにより、 &lt;code&gt;native&lt;/code&gt; 時間単位の概算を取得できます。結果は、1秒あたりの &lt;code&gt;native&lt;/code&gt; 時間単位全体の数と等しくなります。1秒あたりの &lt;code&gt;native&lt;/code&gt; 時間単位の数が整数にならない場合、結果は切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="0c004d9fe4418301daaece7534ddb42246eb9542" translate="yes" xml:space="preserve">
          <source>One entry per allocator. See &lt;code&gt;Allocator&lt;/code&gt; in section &quot;How to Interpret the Erlang Crash Dumps&quot; in ERTS.</source>
          <target state="translated">アロケータごとに1つのエントリ。参照 &lt;code&gt;Allocator&lt;/code&gt; ERTSで「アーランクラッシュダンプを解釈する方法」のセクションで。</target>
        </trans-unit>
        <trans-unit id="a5ae873b8dbf85d90619c54d5534f4bb29cc5b20" translate="yes" xml:space="preserve">
          <source>One example for this is to pre-process incoming data, for example decrypting chunks or collecting characters up to a line break.</source>
          <target state="translated">例えば、チャンクを復号化したり、改行までの文字を収集したりするなど、受信データの前処理を行うことができます。</target>
        </trans-unit>
        <trans-unit id="a14d428a902184f6d393d8bd6140890e2ae77f4b" translate="yes" xml:space="preserve">
          <source>One exception is pattern matching of binaries. The compiler does not rearrange clauses that match binaries. Placing the clause that matches against the empty binary &lt;strong&gt;last&lt;/strong&gt; is usually slightly faster than placing it &lt;strong&gt;first&lt;/strong&gt;.</source>
          <target state="translated">1つの例外は、バイナリのパターンマッチングです。コンパイラーは、バイナリーに一致する文節を再配置しません。空のバイナリと一致する句を&lt;strong&gt;最後に&lt;/strong&gt;配置すると、通常、&lt;strong&gt;最初に&lt;/strong&gt;配置するよりもわずかに速くなります。</target>
        </trans-unit>
        <trans-unit id="7d94c70dc04626571d8ea05626b35349d3398b38" translate="yes" xml:space="preserve">
          <source>One for finite-state machines (&lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; like), which requires the state to be an atom and uses that state as the name of the current callback function</source>
          <target state="translated">有限状態マシン用の1つ（ &lt;code&gt;&lt;a href=&quot;gen_fsm&quot;&gt;gen_fsm&lt;/a&gt;&lt;/code&gt; のような）。これは、状態をアトムにする必要があり、その状態を現在のコールバック関数の名前として使用します</target>
        </trans-unit>
        <trans-unit id="3770c544733aa5fb6e0292ae22987354af0a4e69" translate="yes" xml:space="preserve">
          <source>One group that &lt;code&gt;Common Test&lt;/code&gt; is to ignore and pass on directly to the emulator (those following &lt;code&gt;-erl_args&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; が無視する1つのグループは、エミュレーターに直接渡します（ &lt;code&gt;-erl_args&lt;/code&gt; に続くグループ）。</target>
        </trans-unit>
        <trans-unit id="d6a260162de88ba81cc22f21bd78e10fba85db33" translate="yes" xml:space="preserve">
          <source>One group that &lt;code&gt;Common Test&lt;/code&gt; is to process (those preceding &lt;code&gt;-erl_args&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; が処理する1つのグループ（ &lt;code&gt;-erl_args&lt;/code&gt; の前のグループ）。</target>
        </trans-unit>
        <trans-unit id="614890ec6bea0b6110430c451657204a01ec779e" translate="yes" xml:space="preserve">
          <source>One line from the file is returned, including the trailing LF, but with CRLF sequences replaced by a single LF (see above).</source>
          <target state="translated">ファイルからの1行が、末尾のLFを含めて返されますが、CRLF配列は1つのLFに置き換えられています(上記参照)。</target>
        </trans-unit>
        <trans-unit id="cdb5ea69a08925e346c04bb8f306808dfae21189" translate="yes" xml:space="preserve">
          <source>One log file, &lt;code&gt;run_erl.log&lt;/code&gt;, which logs progress and warnings from the &lt;code&gt;run_erl&lt;/code&gt; program itself.</source>
          <target state="translated">&lt;code&gt;run_erl&lt;/code&gt; プログラム自体からの進行状況と警告を記録する1つのログファイル &lt;code&gt;run_erl.log&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="19cc7e16964b3af0e44bb854d9aa8967052724d4" translate="yes" xml:space="preserve">
          <source>One may also convert arbitrary data to XML. So it for instance is easy to make it readable by humans. In this case you first create xmerl data structures out of your data, then transform it to XML.</source>
          <target state="translated">また、任意のデータをXMLに変換することもできます。そのため、例えば人間が読めるようにするのは簡単です。この場合、まずデータからxmerlデータ構造を作成し、それをXMLに変換します。</target>
        </trans-unit>
        <trans-unit id="d6d6f92b8658a1866e9d8146c603570466b38bb9" translate="yes" xml:space="preserve">
          <source>One network RPC (two messages) to acquire the write lock</source>
          <target state="translated">書き込みロックを取得するための1つのネットワークRPC(2つのメッセージ)</target>
        </trans-unit>
        <trans-unit id="00a56ba397ce141f9962051dd004c70978ba6dd8" translate="yes" xml:space="preserve">
          <source>One nice thing with the &lt;code&gt;trace_pattern&lt;/code&gt; is that it provides a very simple way of minimizing the amount of generated trace data by allowing you to explicitly control the detail level of the tracing. As you may have seen the &lt;code&gt;et_viewer&lt;/code&gt; have a slider called &lt;code&gt;&quot;Detail Level&quot;&lt;/code&gt; that allows you to control the detail level of the trace &lt;code&gt;Events&lt;/code&gt; displayed in the &lt;code&gt;Viewer&lt;/code&gt;. On the other hand if you set a low detail level in the &lt;code&gt;trace_pattern&lt;/code&gt;, lots of the trace data will never be generated and thus not sent over the socket to the trace client and stored in the &lt;code&gt;Collector&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;trace_pattern&lt;/code&gt; の優れた点の1つは、トレースの詳細レベルを明示的に制御できるようにすることで、生成されるトレースデータの量を最小限に抑える非常に簡単な方法を提供することです。 &lt;code&gt;et_viewer&lt;/code&gt; ように、et_viewerには &lt;code&gt;&quot;Detail Level&quot;&lt;/code&gt; と呼ばれるスライダーがあり、 &lt;code&gt;Viewer&lt;/code&gt; 表示されるトレース &lt;code&gt;Events&lt;/code&gt; 詳細レベルを制御できます。一方、 &lt;code&gt;trace_pattern&lt;/code&gt; で詳細レベルを低く設定すると、大量のトレースデータが生成されないため、ソケットを介してトレースクライアントに送信されず、 &lt;code&gt;Collector&lt;/code&gt; 格納されません。</target>
        </trans-unit>
        <trans-unit id="4529738d7c5d95ab24a59e21df7882f76ad41b01" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&quot;Error&quot;&lt;/code&gt;, &lt;code&gt;&quot;Warning&quot;&lt;/code&gt;, &lt;code&gt;&quot;Informational&quot;&lt;/code&gt;, &lt;code&gt;&quot;Audit_Success&quot;&lt;/code&gt;, &lt;code&gt;&quot;Audit_Faulure&quot;&lt;/code&gt; or, in case of a currently unknown Windows NT version &lt;code&gt;&quot;Severity_Unknown&quot;&lt;/code&gt;.</source>
          <target state="translated">一つ &lt;code&gt;&quot;Error&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Warning&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Informational&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Audit_Success&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;Audit_Faulure&quot;&lt;/code&gt; や、現在不明のWindows NT版の場合は &lt;code&gt;&quot;Severity_Unknown&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1a6b0b2d35c017b6e03a9c4a65c9d58e6870f08" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; is invoked to get the &lt;code&gt;gen_event&lt;/code&gt; status. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;normal&lt;/code&gt; for this case.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の 1つが呼び出され、 &lt;code&gt;gen_event&lt;/code&gt; ステータスが取得されます。この場合、 &lt;code&gt;Opt&lt;/code&gt; は &lt;code&gt;normal&lt;/code&gt; のアトムに設定されます。</target>
        </trans-unit>
        <trans-unit id="7da5bbc0da1569bb676eb4407e53fc819a024b48" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; is invoked to get the &lt;code&gt;gen_server&lt;/code&gt; status. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の 1つが呼び出され、 &lt;code&gt;gen_server&lt;/code&gt; ステータスを取得します。 &lt;code&gt;Opt&lt;/code&gt; はアトム &lt;code&gt;normal&lt;/code&gt; 設定されます。</target>
        </trans-unit>
        <trans-unit id="eb296f4b0ca5c3593de75916329b44424ed9130b" translate="yes" xml:space="preserve">
          <source>One of &lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; is invoked to get the &lt;code&gt;gen_statem&lt;/code&gt; status. &lt;code&gt;Opt&lt;/code&gt; is set to the atom &lt;code&gt;normal&lt;/code&gt; for this case.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;sys#get_status-1&quot;&gt;sys:get_status/1,2&lt;/a&gt;&lt;/code&gt; の 1つが呼び出され、 &lt;code&gt;gen_statem&lt;/code&gt; ステータスが取得されます。この場合、 &lt;code&gt;Opt&lt;/code&gt; は &lt;code&gt;normal&lt;/code&gt; のアトムに設定されます。</target>
        </trans-unit>
        <trans-unit id="fdb44fc1b32a8df8e66016b4df34ca5e01e3c2a5" translate="yes" xml:space="preserve">
          <source>One of the &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;SCTP Socket Options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#options&quot;&gt;SCTP Socket Options&lt;/a&gt;&lt;/code&gt; 1つ。</target>
        </trans-unit>
        <trans-unit id="56827b36a41cbbd74b980c5f475d1ddd1caffbc8" translate="yes" xml:space="preserve">
          <source>One of the UTF-encodings, which is specified as parameter &lt;code&gt;InEncoding&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;InEncoding&lt;/code&gt; として指定されているUTFエンコーディングの1つ。</target>
        </trans-unit>
        <trans-unit id="bf5094e20e8e0457a5a8f2279ba88b4ba2472732" translate="yes" xml:space="preserve">
          <source>One of the kernel processes could not start. This is probably because of faulty arguments (like errors in a &lt;code&gt;-config&lt;/code&gt; argument) or faulty configuration files. Check that all files are in their correct location and that the configuration files (if any) are not damaged. Usually messages are also written to the controlling terminal and/or the error log explaining what is wrong.</source>
          <target state="translated">カーネルプロセスの1つを開始できませんでした。これはおそらく、引数（ &lt;code&gt;-config&lt;/code&gt; 引数のエラーなど）または設定ファイルの誤りが原因です。すべてのファイルが正しい場所にあり、構成ファイル（存在する場合）が損傷していないことを確認してください。通常、メッセージは制御端末やエラーログにも書き込まれ、何が問題かを説明します。</target>
        </trans-unit>
        <trans-unit id="0841995ee62550fe5206c50f4fb1982a4e801b20" translate="yes" xml:space="preserve">
          <source>One of the main reasons for using Erlang instead of other functional languages is Erlang's ability to handle concurrency and distributed programming. By concurrency is meant programs that can handle several threads of execution at the same time. For example, modern operating systems allow you to use a word processor, a spreadsheet, a mail client, and a print job all running at the same time. Each processor (CPU) in the system is probably only handling one thread (or job) at a time, but it swaps between the jobs at such a rate that it gives the illusion of running them all at the same time. It is easy to create parallel threads of execution in an Erlang program and to allow these threads to communicate with each other. In Erlang, each thread of execution is called a &lt;strong&gt;process&lt;/strong&gt;.</source>
          <target state="translated">他の関数型言語の代わりにErlangを使用する主な理由の1つは、並行性と分散プログラミングを処理するErlangの機能です。並行性とは、複数の実行スレッドを同時に処理できるプログラムを意味します。たとえば、最新のオペレーティングシステムでは、ワープロ、スプレッドシート、メールクライアント、印刷ジョブをすべて同時に実行することができます。システム内の各プロセッサ（CPU）は、一度に1つのスレッド（またはジョブ）のみを処理しますが、ジョブを同時に実行しているように見える速度でジョブ間をスワップします。 Erlangプログラムで実行の並列スレッドを作成し、これらのスレッドが互いに通信できるようにするのは簡単です。 Erlangでは、実行の各スレッドは&lt;strong&gt;プロセス&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="f9c1395f01aa6569ad6f5518bd05795ed28e86fb" translate="yes" xml:space="preserve">
          <source>One of the things you can specify is where Erlang/OTP should be installed. By default Erlang/OTP will be installed in &lt;code&gt;/usr/local/{bin,lib/erlang}&lt;/code&gt;. To keep the same structure but install in a different place, &lt;code&gt;&amp;lt;Dir&amp;gt;&lt;/code&gt; say, use the &lt;code&gt;--prefix&lt;/code&gt; argument like this: &lt;code&gt;./configure --prefix=&amp;lt;Dir&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">指定できることの1つは、Erlang / OTPをインストールする場所です。デフォルトでは、Erlang / OTPは &lt;code&gt;/usr/local/{bin,lib/erlang}&lt;/code&gt; インストールされます。同じ構造を維持しながら別の場所にインストールする場合は、 &lt;code&gt;&amp;lt;Dir&amp;gt;&lt;/code&gt; のように、-- &lt;code&gt;--prefix&lt;/code&gt; 引数を &lt;code&gt;./configure --prefix=&amp;lt;Dir&amp;gt;&lt;/code&gt; のように使用します。</target>
        </trans-unit>
        <trans-unit id="1eeb7842fcafd703c9e0619139450ba12ea61a05" translate="yes" xml:space="preserve">
          <source>One of the tuples is &lt;code&gt;{timeout, GcTime}&lt;/code&gt;, where &lt;code&gt;GcTime&lt;/code&gt; is the time for the garbage collection in milliseconds. The other tuples are tagged with &lt;code&gt;heap_size&lt;/code&gt;, &lt;code&gt;heap_block_size&lt;/code&gt;, &lt;code&gt;stack_size&lt;/code&gt;, &lt;code&gt;mbuf_size&lt;/code&gt;, &lt;code&gt;old_heap_size&lt;/code&gt;, and &lt;code&gt;old_heap_block_size&lt;/code&gt;. These tuples are explained in the description of trace message &lt;code&gt;&lt;a href=&quot;#gc_minor_start&quot;&gt;gc_minor_start&lt;/a&gt;&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;). New tuples can be added, and the order of the tuples in the &lt;code&gt;Info&lt;/code&gt; list can be changed at any time without prior notice.</source>
          <target state="translated">タプルの1つは &lt;code&gt;{timeout, GcTime}&lt;/code&gt; で、 &lt;code&gt;GcTime&lt;/code&gt; はガベージコレクションの時間（ミリ秒）です。その他のタプルには、 &lt;code&gt;heap_size&lt;/code&gt; 、 &lt;code&gt;heap_block_size&lt;/code&gt; 、 &lt;code&gt;stack_size&lt;/code&gt; 、 &lt;code&gt;mbuf_size&lt;/code&gt; 、 &lt;code&gt;old_heap_size&lt;/code&gt; 、および &lt;code&gt;old_heap_block_size&lt;/code&gt; のタグが付けられています。これらのタプルについては、トレースメッセージ &lt;code&gt;&lt;a href=&quot;#gc_minor_start&quot;&gt;gc_minor_start&lt;/a&gt;&lt;/code&gt; の説明で説明されています（ &lt;code&gt;&lt;a href=&quot;#trace-3&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; を参照）。新しいタプルを追加することができ、 &lt;code&gt;Info&lt;/code&gt; リスト内のタプルの順序は、事前の通知なしにいつでも変更できます。</target>
        </trans-unit>
        <trans-unit id="69a9014859b12f37b0519806ad1834d826c6c31a" translate="yes" xml:space="preserve">
          <source>One of these MIBs is always loaded. If only SNMPv1 is used, STANDARD-MIB is loaded, otherwise SNMPv2-MIB is loaded.</source>
          <target state="translated">これらのMIBのいずれかが常にロードされます。SNMPv1のみを使用する場合はSTANDARD-MIBがロードされ、そうでない場合はSNMPv2-MIBがロードされます。</target>
        </trans-unit>
        <trans-unit id="7e580959901caa525ce54698db0283f68f4a7825" translate="yes" xml:space="preserve">
          <source>One option is available:</source>
          <target state="translated">選択肢は1つです。</target>
        </trans-unit>
        <trans-unit id="6ff4f2ec7cb45924fc22a9581c0d12e7c6a17439" translate="yes" xml:space="preserve">
          <source>One or more records have possibly been deleted. All records with the key &lt;code&gt;Key&lt;/code&gt; in the table &lt;code&gt;Tab&lt;/code&gt; have been deleted.</source>
          <target state="translated">1つ以上のレコードが削除された可能性があります。テーブル &lt;code&gt;Tab&lt;/code&gt; にキー &lt;code&gt;Key&lt;/code&gt; を持つすべてのレコードが削除されました。</target>
        </trans-unit>
        <trans-unit id="6fa66ab663063997cdb9c048f7104f3433cd5c89" translate="yes" xml:space="preserve">
          <source>One or more selective decode functions can be described in a configuration file. Use the following notation:</source>
          <target state="translated">つ以上の選択的デコード機能は、構成ファイルに記述することができる。以下の表記を使用してください。</target>
        </trans-unit>
        <trans-unit id="2e8538d4b29bcc1590b46f99d089134dbfb209ae" translate="yes" xml:space="preserve">
          <source>One possible use of this function is to compute a fixed layout for a document, which can then be included as part of a larger document. For example:</source>
          <target state="translated">この関数を利用して、ある文書の固定レイアウトを計算し、それをより大きな文書の一部として含めることができます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="f814b315540a519172775a3b2360fd1f8b22e518" translate="yes" xml:space="preserve">
          <source>One process can block multi-scheduling and normal multi-scheduling multiple times. If a process has blocked multiple times, it must unblock exactly as many times as it has blocked before it has released its multi-scheduling block. If a process that has blocked multi-scheduling or normal multi-scheduling exits, it automatically releases its blocking of multi-scheduling and normal multi-scheduling.</source>
          <target state="translated">1つのプロセスは、マルチスケジューリングと通常のマルチスケジューリングを複数回ブロックすることができます。あるプロセスが複数回ブロックした場合、マルチスケジューリングのブロックを解除する前に、ブロックした回数と同じだけブロックを解除しなければなりません。マルチスケジューリングや通常のマルチスケジューリングをブロックしたプロセスが終了すると、自動的にマルチスケジューリングや通常のマルチスケジューリングのブロックを解除します。</target>
        </trans-unit>
        <trans-unit id="4e1d0d9b681492f79f0f0d77d94d063833656c4e" translate="yes" xml:space="preserve">
          <source>One reason to use this is when you have a state item that when changed should cancel the &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Out&lt;/a&gt;&lt;/code&gt;, or one that affects the event handling in combination with postponing events. We will go for the latter and complicate the previous example by introducing a configurable lock button (this is the state item in question), which in the &lt;code&gt;open&lt;/code&gt; state immediately locks the door, and an API function &lt;code&gt;set_lock_button/1&lt;/code&gt; to set the lock button.</source>
          <target state="translated">これを使用する理由の1つは、変更時に &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;State Time-Out&lt;/a&gt;&lt;/code&gt; をキャンセルする必要がある状態アイテムがある場合、またはイベントの延期と組み合わせてイベント処理に影響を与えるものです。後者に進み、構成可能なロックボタン（これは問題の状態項目です）を導入して前の例を複雑にします。これは &lt;code&gt;open&lt;/code&gt; 状態ですぐにドアをロックし、API関数 &lt;code&gt;set_lock_button/1&lt;/code&gt; がロックボタンを設定します。</target>
        </trans-unit>
        <trans-unit id="c6a0ffbab932f1acb483f5ff3812f8940806157e" translate="yes" xml:space="preserve">
          <source>One slight difference is that &lt;code&gt;length(L)&lt;/code&gt; fails if &lt;code&gt;L&lt;/code&gt; is an improper list, while the pattern in the second code fragment accepts an improper list.</source>
          <target state="translated">わずかな違いの1つは、 &lt;code&gt;L&lt;/code&gt; が不適切なリストである場合、 &lt;code&gt;length(L)&lt;/code&gt; が失敗するのに対し、2番目のコードフラグメントのパターンは不適切なリストを受け入れることです。</target>
        </trans-unit>
        <trans-unit id="131ac9dcf4813fc8eef42652b85941c718619c49" translate="yes" xml:space="preserve">
          <source>One solution to this problem is to make the snmp application a distributed Erlang application, and that means, the agent may be configured to run on one of several nodes. If the node where it runs goes down, another node restarts the agent. This is called &lt;strong&gt;failover&lt;/strong&gt;. When the node starts again, it may &lt;strong&gt;takeover&lt;/strong&gt; the application. This solution to the problem adds another problem. Generally, the new node has another IP address than the first one, which may cause problems in the communication between the SNMP managers and the agent.</source>
          <target state="translated">この問題の1つの解決策は、snmpアプリケーションを分散Erlangアプリケーションにすることです。つまり、エージェントは、いくつかのノードの1つで実行するように構成できます。実行されているノードがダウンした場合、別のノードがエージェントを再起動します。これは&lt;strong&gt;フェイルオーバー&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。ノードが再起動すると、アプリケーションを&lt;strong&gt;引き継ぐ&lt;/strong&gt;場合があります。この問題に対するこの解決策は、別の問題を追加します。通常、新しいノードには最初のノードとは別のIPアドレスが割り当てられているため、SNMPマネージャーとエージェント間の通信で問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2ae865e27e4e371daac0c98d141254785bdec512" translate="yes" xml:space="preserve">
          <source>One use for this function is to return compact alternative state representations to avoid having large state terms printed in log files. Another use is to hide sensitive data from being written to the error log.</source>
          <target state="translated">この関数の1つの用途は、ログファイルに大きな状態項が印刷されるのを避けるために、コンパクトな代替状態表現を返すことです。もう一つの用途は、エラーログに書き込まれる機密データを隠すことです。</target>
        </trans-unit>
        <trans-unit id="2344ac8a5a53008ccbf114aa5bb4b2144babab77" translate="yes" xml:space="preserve">
          <source>One use for this function is to return compact alternative state representations to avoid that large state terms are printed in log files.</source>
          <target state="translated">この関数の1つの用途は、ログファイルに大きな状態項が印刷されるのを避けるために、コンパクトな代替状態表現を返すことです。</target>
        </trans-unit>
        <trans-unit id="ecf62d4adfa3a80a6880d79089f74bc1229726c5" translate="yes" xml:space="preserve">
          <source>One valid &lt;code&gt;Item&lt;/code&gt; for events exists:</source>
          <target state="translated">イベントに有効な &lt;code&gt;Item&lt;/code&gt; が1つ存在します：</target>
        </trans-unit>
        <trans-unit id="0530e4915fd69c53963bcd7d20091d18ef6b916a" translate="yes" xml:space="preserve">
          <source>One without restriction on the state data type that uses one callback function for all states</source>
          <target state="translated">すべての状態に対して1つのコールバック関数を使用する状態データ型に制限のないもの</target>
        </trans-unit>
        <trans-unit id="6fbd38dfe616170f1b6def311df7bb7a510f025b" translate="yes" xml:space="preserve">
          <source>Online support - &lt;code&gt;release_handler&lt;/code&gt; for unpacking and installing release packages</source>
          <target state="translated">オンラインサポート- リリースパッケージを解凍してインストールするための &lt;code&gt;release_handler&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="85e8ca2afe642fa985ec03b77e6580554e8210e3" translate="yes" xml:space="preserve">
          <source>Only a subset of all &lt;code&gt;erts_alloc&lt;/code&gt; flags can be changed at run time. This subset is currently only the flag &lt;code&gt;sbct&lt;/code&gt;.</source>
          <target state="translated">実行時に変更できるのは、すべての &lt;code&gt;erts_alloc&lt;/code&gt; フラグのサブセットのみです。このサブセットは現在、フラグ &lt;code&gt;sbct&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="8fc50435c4f101d7fcbdd1178cc4fb637fb7e775" translate="yes" xml:space="preserve">
          <source>Only a subset of the function clauses are show above. The full set of valid combinations of input parameters is as follows:</source>
          <target state="translated">関数節のサブセットのみを上記に示す。入力パラメータの有効な組み合わせの完全なセットは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="a71b05d84131dd4964afd0db7b460b38e844ff2b" translate="yes" xml:space="preserve">
          <source>Only actual parameters with other than default values are returned, for example not directives that specify other sources for configuration parameters nor directives that clear parameters.</source>
          <target state="translated">デフォルト値以外の実際のパラメータのみが返され、例えば設定パラメータの他のソースを指定するディレクティブや、パラメータをクリアするディレクティブは返されません。</target>
        </trans-unit>
        <trans-unit id="143811c603bbe64ab0e87b64c4ca39d3733d06c3" translate="yes" xml:space="preserve">
          <source>Only allowed after an &lt;code&gt;if&lt;/code&gt; or another &lt;code&gt;elif&lt;/code&gt; directive. If the preceding &lt;code&gt;if&lt;/code&gt; or &lt;code&gt;elif&lt;/code&gt; directives do not evaluate to true, and the &lt;code&gt;Condition&lt;/code&gt; evaluates to true, the lines following the &lt;code&gt;elif&lt;/code&gt; are evaluated instead.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; または別の &lt;code&gt;elif&lt;/code&gt; ディレクティブの後にのみ許可されます。上記の &lt;code&gt;if&lt;/code&gt; または &lt;code&gt;elif&lt;/code&gt; ディレクティブがtrueに評価されず、 &lt;code&gt;Condition&lt;/code&gt; がtrueに評価される場合、 &lt;code&gt;elif&lt;/code&gt; に続く行が代わりに評価されます。</target>
        </trans-unit>
        <trans-unit id="6e65766f3d400fa0c4ec2ec7f3b23a8557087a78" translate="yes" xml:space="preserve">
          <source>Only allowed after an &lt;code&gt;ifdef&lt;/code&gt; or &lt;code&gt;ifndef&lt;/code&gt; directive. If that condition is false, the lines following &lt;code&gt;else&lt;/code&gt; are evaluated instead.</source>
          <target state="translated">&lt;code&gt;ifdef&lt;/code&gt; または &lt;code&gt;ifndef&lt;/code&gt; ディレクティブの後にのみ許可されます。その条件が偽の場合、 &lt;code&gt;else&lt;/code&gt; に続く行が代わりに評価されます。</target>
        </trans-unit>
        <trans-unit id="03727b1fe9878a4627e85a8cbe80d475296b011b" translate="yes" xml:space="preserve">
          <source>Only allowed for connection-oriented sockets.</source>
          <target state="translated">接続指向のソケットでのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="1a32ac3b85acdfc340d76cd1ade965319d5c1792" translate="yes" xml:space="preserve">
          <source>Only binaries and allocations made by NIFs and drivers are tagged by default, but this can be configured an a per-allocator basis with the &lt;code&gt;+M&amp;lt;S&amp;gt;atags&lt;/code&gt; emulator option.</source>
          <target state="translated">NIFとドライバーによって作成されたバイナリと割り当てのみがデフォルトでタグ付けされますが、これは &lt;code&gt;+M&amp;lt;S&amp;gt;atags&lt;/code&gt; エミュレーターオプションを使用してアロケーターごとに構成できます。</target>
        </trans-unit>
        <trans-unit id="d5ee0b816fb973da72fef21bb99316a4666d0fe2" translate="yes" xml:space="preserve">
          <source>Only explicit connection set-ups are used.</source>
          <target state="translated">明示的な接続設定のみが使用されます。</target>
        </trans-unit>
        <trans-unit id="965fd205ec4a5be006cc4bdca91e080bb904b491" translate="yes" xml:space="preserve">
          <source>Only files with exactly these extensions are compressed.</source>
          <target state="translated">まさにこれらの拡張子を持つファイルのみが圧縮されます。</target>
        </trans-unit>
        <trans-unit id="d800e233c81231deb85380be879f6765bb0a09d1" translate="yes" xml:space="preserve">
          <source>Only if a shell script or &lt;code&gt;.bat&lt;/code&gt; file is executed, the appropriate command interpreter is invoked implicitly, but there is still no command-argument expansion or implicit &lt;code&gt;PATH&lt;/code&gt; search.</source>
          <target state="translated">シェルスクリプトまたは &lt;code&gt;.bat&lt;/code&gt; ファイルが実行された場合のみ、適切なコマンドインタープリターが暗黙的に呼び出されますが、コマンド引数の拡張や暗黙的な &lt;code&gt;PATH&lt;/code&gt; 検索はまだ行われません。</target>
        </trans-unit>
        <trans-unit id="6e308954fb7661938a56cab2015555144c20f290" translate="yes" xml:space="preserve">
          <source>Only if a string contains code points &amp;lt; 256, can it be directly converted to a binary by using, for example, &lt;code&gt;erlang:iolist_to_binary/1&lt;/code&gt; or can be sent directly to a port. If the string contains Unicode characters &amp;gt; 255, an encoding must be decided upon and the string is to be converted to a binary in the preferred encoding using &lt;code&gt;unicode:characters_to_binary/1,2,3&lt;/code&gt;. Strings are not generally lists of bytes, as they were before Erlang/OTP R13, they are lists of characters. Characters are not generally bytes, they are Unicode code points.</source>
          <target state="translated">文字列に256未満のコードポイントが含まれている場合のみ、たとえば &lt;code&gt;erlang:iolist_to_binary/1&lt;/code&gt; を使用して文字列をバイナリに直接変換したり、ポートに直接送信したりできます。文字列に255を超えるUnicode文字が含まれている場合、エンコーディングを決定する必要があり、文字列は &lt;code&gt;unicode:characters_to_binary/1,2,3&lt;/code&gt; を使用して優先エンコーディングでバイナリに変換されます。文字列は通常Erlang / OTP R13より前のようにバイトのリストではなく、文字のリストです。文字は通常バイトではなく、Unicodeコードポイントです。</target>
        </trans-unit>
        <trans-unit id="660019367304634239f33b92fdff61cb41611c83" translate="yes" xml:space="preserve">
          <source>Only if the server is in the confirmed commit phase, the configuration is restored to its state before entering the confirmed commit phase. Otherwise, no configuration rollback is performed.</source>
          <target state="translated">サーバが確認済みコミットフェーズにある場合にのみ、確認済みコミットフェーズに入る前の状態に構成が復元されます。それ以外の場合は、構成のロールバックは行われません。</target>
        </trans-unit>
        <trans-unit id="cbd2fd09cd558a21021b0e71892ab5c5ffaa9a70" translate="yes" xml:space="preserve">
          <source>Only matters for matching and when the type is &lt;code&gt;integer&lt;/code&gt;. The default is &lt;code&gt;unsigned&lt;/code&gt;.</source>
          <target state="translated">マッチングと型が &lt;code&gt;integer&lt;/code&gt; 場合のみ重要です。デフォルトは &lt;code&gt;unsigned&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2ac47075244f080582d68564475ba1c72e44655e" translate="yes" xml:space="preserve">
          <source>Only modules compiled with option &lt;code&gt;debug_info&lt;/code&gt; set can be interpreted. Non-interpretable modules are displayed within parenthesis in the Interpret Modules window.</source>
          <target state="translated">オプション &lt;code&gt;debug_info&lt;/code&gt; を設定してコンパイルされたモジュールのみが解釈できます。解釈不可能なモジュールは、[モジュールの解釈]ウィンドウの括弧内に表示されます。</target>
        </trans-unit>
        <trans-unit id="2d63c1fd79def5aea280eb8e5551a9a4f8acf4ef" translate="yes" xml:space="preserve">
          <source>Only on 64-bit halfword emulator. The total amount of memory allocated in low memory areas that are restricted to &amp;lt; 4 GB, although the system can have more memory.</source>
          <target state="translated">64ビットハーフワードエミュレータのみ。システムはより多くのメモリを搭載できますが、4 GB未満に制限されている低メモリ領域に割り当てられたメモリの総量。</target>
        </trans-unit>
        <trans-unit id="f8b4dc2954832ab8284b54f1deee60e8ee9f12e3" translate="yes" xml:space="preserve">
          <source>Only one &lt;code&gt;MonitorOption&lt;/code&gt; can be specified. It is one of the following:</source>
          <target state="translated">指定できる &lt;code&gt;MonitorOption&lt;/code&gt; は1つだけです。次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="d1d25510eb44623309c6a466f80982b971e3a79b" translate="yes" xml:space="preserve">
          <source>Only one entry of this type is allowed.</source>
          <target state="translated">このタイプのエントリは1つだけ許可されています。</target>
        </trans-unit>
        <trans-unit id="2f8db1c5a163c86ad59a6d1922863061872c37b3" translate="yes" xml:space="preserve">
          <source>Only one table is loaded by &lt;code&gt;&lt;a href=&quot;mnesia#force_load_table-1&quot;&gt;mnesia:force_load_table(Tab)&lt;/a&gt;&lt;/code&gt;. Since committed transactions can have caused updates in several tables, the tables can become inconsistent because of the forced load.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;mnesia#force_load_table-1&quot;&gt;mnesia:force_load_table(Tab)&lt;/a&gt;&lt;/code&gt; によって読み込まれるテーブルは1つだけです。コミットされたトランザクションはいくつかのテーブルで更新を引き起こす可能性があるため、強制ロードのためにテーブルが不整合になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="e92ee7eb3618038b399f136fb76be40e18e1bc01" translate="yes" xml:space="preserve">
          <source>Only some default values have been presented here. For information about the currently used settings and the current status of the allocators, see &lt;code&gt;erlang:system_info(allocator)&lt;/code&gt; and &lt;code&gt;erlang:system_info({allocator, Alloc})&lt;/code&gt;.</source>
          <target state="translated">ここでは、いくつかのデフォルト値のみが示されています。現在使用されている設定とアロケータの現在のステータスについては、 &lt;code&gt;erlang:system_info(allocator)&lt;/code&gt; および &lt;code&gt;erlang:system_info({allocator, Alloc})&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39e55a508bb5366d1ba41f1b8cc19d785d5f6e26" translate="yes" xml:space="preserve">
          <source>Only supported if ERTS was compiled with zlib &amp;gt;= 1.2.8.</source>
          <target state="translated">ERTSがzlib&amp;gt; = 1.2.8でコンパイルされている場合にのみサポートされます。</target>
        </trans-unit>
        <trans-unit id="1405eb7cb56be68779595f26b14d02a57896c6d6" translate="yes" xml:space="preserve">
          <source>Only the DEFLATE (zlib-compression) and the STORE (uncompressed data) zip methods are supported.</source>
          <target state="translated">DEFLATE (zlib-compression)と STORE (非圧縮データ)の zip メソッドのみがサポートされています。</target>
        </trans-unit>
        <trans-unit id="be533a124805e79fe90a76852bcb557c73fc2e89" translate="yes" xml:space="preserve">
          <source>Only the Erlang process that opened the file can use it.</source>
          <target state="translated">ファイルを開いたErlangプロセスだけがそれを使うことができます。</target>
        </trans-unit>
        <trans-unit id="eff26c5132f4e18c3af8859f76e7ae06eef0123a" translate="yes" xml:space="preserve">
          <source>Only the currently connected job can 'talk' to the shell.</source>
          <target state="translated">現在接続されているジョブだけがシェルと「対話」することができます。</target>
        </trans-unit>
        <trans-unit id="a03597ea953bd3b370af7ca4b5066ffbc33977b3" translate="yes" xml:space="preserve">
          <source>Only the first captured subpattern, which is always the complete matching part of the subject. All explicitly captured subpatterns are discarded.</source>
          <target state="translated">最初にキャプチャされたサブパターンのみが対象であり、それは常に対象の完全一致部分である。明示的にキャプチャされたサブパターンはすべて破棄されます。</target>
        </trans-unit>
        <trans-unit id="b70de51c32ae79e58749256bc1925f2b5088935f" translate="yes" xml:space="preserve">
          <source>Only the following metacharacters are recognized in character classes:</source>
          <target state="translated">文字クラスでは、以下のメタキャラクタのみが認識されます。</target>
        </trans-unit>
        <trans-unit id="f8c7ec7f774783186ec033a3872a8ed95ec657d5" translate="yes" xml:space="preserve">
          <source>Only the owner process can read or write to the table.</source>
          <target state="translated">オーナープロセスのみがテーブルの読み書きを行うことができます。</target>
        </trans-unit>
        <trans-unit id="ae72d9870b541f6e2a7d88226bfd5d4e90663a8e" translate="yes" xml:space="preserve">
          <source>Only the process registered as distribution controller for the distribution channel identified by &lt;code&gt;DHandle&lt;/code&gt; is allowed to call this function unless an alternate input handler process has been registered using &lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_input_handler-2&quot;&gt;erlang:dist_ctrl_input_handler(DHandle, InputHandler)&lt;/a&gt;&lt;/code&gt;. If an alternate input handler has been registered, only the registered input handler process is allowed to call this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#dist_ctrl_input_handler-2&quot;&gt;erlang:dist_ctrl_input_handler(DHandle, InputHandler)&lt;/a&gt;&lt;/code&gt; を使用して代替入力ハンドラプロセスが登録されていない限り、 &lt;code&gt;DHandle&lt;/code&gt; によって識別される配布チャネルの配布コントローラとして登録されているプロセスのみがこの関数を呼び出すことができます。代替入力ハンドラーが登録されている場合、登録された入力ハンドラープロセスのみがこの関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="0120f9c54ff86c06696b34a4219af2378345acdb" translate="yes" xml:space="preserve">
          <source>Only the process registered as distribution controller for the distribution channel identified by &lt;code&gt;DHandle&lt;/code&gt; is allowed to call this function.</source>
          <target state="translated">&lt;code&gt;DHandle&lt;/code&gt; によって識別される配布チャネルの配布コントローラーとして登録されているプロセスのみが、この関数を呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="ff7ef46b3f7713cb10f8c8f5e86db36f63612540" translate="yes" xml:space="preserve">
          <source>Only the specified part is searched. Return values still have offsets from the beginning of &lt;code&gt;Subject&lt;/code&gt;. A negative &lt;code&gt;Length&lt;/code&gt; is allowed as described in section Data Types in this manual.</source>
          <target state="translated">指定された部分のみを検索します。戻り値には、引き続き &lt;code&gt;Subject&lt;/code&gt; の先頭からのオフセットがあります。このマニュアルのセクションデータ型で説明されているように、負の &lt;code&gt;Length&lt;/code&gt; は許可されます。</target>
        </trans-unit>
        <trans-unit id="92b1c560a3c609b6630ba6369a93d7159051e3e5" translate="yes" xml:space="preserve">
          <source>Only these exact character sequences are recognized. A sequence such as [a[:&amp;lt;:]b] provokes error for an unrecognized POSIX class name. This support is not compatible with Perl. It is provided to help migrations from other environments, and is best not used in any new patterns. Note that \b matches at the start and the end of a word (see &quot;Simple assertions&quot; above), and in a Perl-style pattern the preceding or following character normally shows which is wanted, without the need for the assertions that are used above in order to give exactly the POSIX behaviour.</source>
          <target state="translated">これらの正確な文字シーケンスのみが認識されます。[a [：&amp;lt;：] b]などのシーケンスは、認識されないPOSIXクラス名に対してエラーを引き起こします。このサポートはPerlと互換性がありません。他の環境からの移行を支援するために提供されており、新しいパターンでは使用しないことをお勧めします。\ bは単語の最初と最後に一致し（上記の「単純なアサーション」を参照）、Perlスタイルのパターンでは、前または後ろの文字は通常、使用するアサーションの必要なしに、必要なものを示します。上記は、POSIXの動作を正確に示すためです。</target>
        </trans-unit>
        <trans-unit id="17d1fba9658ded214a434ab7601d513e4c6c5aaf" translate="yes" xml:space="preserve">
          <source>Only total</source>
          <target state="translated">合計のみ</target>
        </trans-unit>
        <trans-unit id="b466165e837dbf10eadb47e4bc9b893d7bb50387" translate="yes" xml:space="preserve">
          <source>Only trace messages from a specific process &lt;code&gt;Pid&lt;/code&gt;:</source>
          <target state="translated">特定のプロセスからのメッセージのみをトレースします &lt;code&gt;Pid&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e5bfc32b55921a00a28f4c0d1a74dc4ff5f9f2ba" translate="yes" xml:space="preserve">
          <source>Only trace messages from other nodes:</source>
          <target state="translated">他のノードからのメッセージのみをトレースします。</target>
        </trans-unit>
        <trans-unit id="78247ecb104811399c3277cdd7d4c731768a72b0" translate="yes" xml:space="preserve">
          <source>Only trace messages matching &lt;code&gt;{reply, _}&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;{reply, _}&lt;/code&gt; 一致するメッセージのみをトレースします。</target>
        </trans-unit>
        <trans-unit id="7666550505039a9e83e909935389e4f3ca8ed6d8" translate="yes" xml:space="preserve">
          <source>Only trace messages sent to other nodes:</source>
          <target state="translated">他のノードに送信されたメッセージのみをトレースします。</target>
        </trans-unit>
        <trans-unit id="550dd65f9f1635f5b26d39adb415360c2a92434a" translate="yes" xml:space="preserve">
          <source>Only trace messages sent to the sender itself:</source>
          <target state="translated">送信者自身に送信されたメッセージのみをトレースします。</target>
        </trans-unit>
        <trans-unit id="2500bda55ee606fa893cbad9220ec886375e6705" translate="yes" xml:space="preserve">
          <source>Only trace messages to a specific process &lt;code&gt;Pid&lt;/code&gt;:</source>
          <target state="translated">特定のプロセス &lt;code&gt;Pid&lt;/code&gt; へのメッセージのみをトレースします。</target>
        </trans-unit>
        <trans-unit id="42b574e1ef29bfa437b36acb9027769673eb223a" translate="yes" xml:space="preserve">
          <source>Only two arguments, of which one must be &lt;code&gt;true&lt;/code&gt; and the other &lt;code&gt;false&lt;/code&gt; to return &lt;code&gt;true&lt;/code&gt;; otherwise &lt;code&gt;'xor'&lt;/code&gt; returns false.</source>
          <target state="translated">2つだけの引数、1がでなければならないの &lt;code&gt;true&lt;/code&gt; 及びその他の &lt;code&gt;false&lt;/code&gt; を返すように &lt;code&gt;true&lt;/code&gt; 。それ以外の場合、 &lt;code&gt;'xor'&lt;/code&gt; はfalseを返します。</target>
        </trans-unit>
        <trans-unit id="a84b39b2c86b869fad86343fd9fef89839964e4b" translate="yes" xml:space="preserve">
          <source>Only use these flags if you are sure what you are doing. Unsuitable settings can cause serious performance degradation and even a system crash at any time during operation.</source>
          <target state="translated">これらのフラグは、何をしているのか確信がある場合にのみ使用してください。不適切な設定は、操作中にいつでも深刻なパフォーマンス低下やシステムクラッシュを引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="4d7818114df4175719fb624ea7ed7fe90002e953" translate="yes" xml:space="preserve">
          <source>Only used during handshake phase.</source>
          <target state="translated">握手の段階でのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="63f8061fc22c121f41217cd28e783b48e49934d5" translate="yes" xml:space="preserve">
          <source>Only valid for &lt;code&gt;{spawn, Command}&lt;/code&gt; and &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt;. It allows the standard input and output (file descriptors 0 and 1) of the spawned (Unix) process for communication with Erlang.</source>
          <target state="translated">&lt;code&gt;{spawn, Command}&lt;/code&gt; および &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; に対してのみ有効です。これは、Erlangとの通信のために生成された（Unix）プロセスの標準入出力（ファイル記述子0および1）を許可します。</target>
        </trans-unit>
        <trans-unit id="18c2212e127b0c910798dbbf1d59d9d69e12fd4b" translate="yes" xml:space="preserve">
          <source>Only valid for &lt;code&gt;{spawn, Command}&lt;/code&gt; and &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt;. The external program starts using &lt;code&gt;Dir&lt;/code&gt; as its working directory. &lt;code&gt;Dir&lt;/code&gt; must be a string.</source>
          <target state="translated">&lt;code&gt;{spawn, Command}&lt;/code&gt; および &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; に対してのみ有効です。外部プログラムは、 &lt;code&gt;Dir&lt;/code&gt; を作業ディレクトリとして使用し始めます。 &lt;code&gt;Dir&lt;/code&gt; は文字列でなければなりません。</target>
        </trans-unit>
        <trans-unit id="65484a01cf9bd6e1a83ae6b606310e1c69ff32cf" translate="yes" xml:space="preserve">
          <source>Only valid for &lt;code&gt;{spawn, Command}&lt;/code&gt;, and &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt;. The environment of the started process is extended using the environment specifications in &lt;code&gt;Env&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{spawn, Command}&lt;/code&gt; 、および &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; に対してのみ有効です。開始されたプロセスの環境は、 &lt;code&gt;Env&lt;/code&gt; の環境仕様を使用して拡張されます。</target>
        </trans-unit>
        <trans-unit id="bfc9b2e1dea6a04ba983a9e94d3b648b00ca026f" translate="yes" xml:space="preserve">
          <source>Only valid for &lt;code&gt;{spawn, Command}&lt;/code&gt;, where &lt;code&gt;Command&lt;/code&gt; refers to an external program, and for &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{spawn, Command}&lt;/code&gt; 場合にのみ有効です。ここで、 &lt;code&gt;Command&lt;/code&gt; は外部プログラムを指し、 &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; 場合に有効です。</target>
        </trans-unit>
        <trans-unit id="ec0538decd2a683ac3d4fc85b7551d506a0ba696" translate="yes" xml:space="preserve">
          <source>Only valid for &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; and explicitly specifies the program name argument when running an executable. This can in some circumstances, on some OSs, be desirable. How the program responds to this is highly system-dependent and no specific effect is guaranteed.</source>
          <target state="translated">&lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; に対してのみ有効であり、実行可能ファイルの実行時にプログラム名引数を明示的に指定します。これは、状況によっては、OSによっては望ましい場合があります。プログラムがこれにどのように応答するかはシステムに大きく依存し、特定の効果は保証されません。</target>
        </trans-unit>
        <trans-unit id="94d77dba770e4fddcd3e5b235704abc55a41a06f" translate="yes" xml:space="preserve">
          <source>Only valid for &lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; and specifies arguments to the executable. Each argument is specified as a separate string and (on Unix) eventually ends up as one element each in the argument vector. On other platforms, a similar behavior is mimicked.</source>
          <target state="translated">&lt;code&gt;{spawn_executable, FileName}&lt;/code&gt; に対してのみ有効であり、実行可能ファイルへの引数を指定します。各引数は個別の文字列として指定され、（Unixでは）最終的には引数ベクトルのそれぞれ1つの要素になります。他のプラットフォームでは、同様の動作が模倣されます。</target>
        </trans-unit>
        <trans-unit id="0a16a27763d86648c52acb4eb9a028a14f39f822" translate="yes" xml:space="preserve">
          <source>Only valid for character devices on Unix. In all other cases, this field is zero.</source>
          <target state="translated">Unix上の文字デバイスでのみ有効です。それ以外のすべての場合、このフィールドはゼロです。</target>
        </trans-unit>
        <trans-unit id="ecb3f031c9ac0eb9d790e14595d3fd9dd2d8d7c2" translate="yes" xml:space="preserve">
          <source>Opaque continuation used by &lt;code&gt;&lt;a href=&quot;#bchunk-2&quot;&gt;bchunk/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#bchunk-2&quot;&gt;bchunk/2&lt;/a&gt;&lt;/code&gt; で使用される不透明な継続。</target>
        </trans-unit>
        <trans-unit id="58a550d32afdec41a5ce24c62d98873272eb328a" translate="yes" xml:space="preserve">
          <source>Opaque continuation used by &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; で使用される不透明な継続。</target>
        </trans-unit>
        <trans-unit id="296b6181394c8bc2ef4aa069b7cdea56b08954fb" translate="yes" xml:space="preserve">
          <source>Opaque continuation used by &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#match_object-3&quot;&gt;match_object/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#match_object-3&quot;&gt;match_object/3&lt;/a&gt;&lt;/code&gt; によって使用される不透明な継続。</target>
        </trans-unit>
        <trans-unit id="2dfa868a6d8928ac7bb58be05cada3f714825ced" translate="yes" xml:space="preserve">
          <source>Opaque continuation used by &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#select_reverse-1&quot;&gt;select_reverse/1,3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1,3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1,3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#select_reverse-1&quot;&gt;select_reverse/1,3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match/1,3&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#match_object-1&quot;&gt;match_object/1,3&lt;/a&gt;&lt;/code&gt; によって使用される不透明な継続。</target>
        </trans-unit>
        <trans-unit id="403f4b382799774e589923264bc2680b24377bd7" translate="yes" xml:space="preserve">
          <source>Opaque continuation used by &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; で使用される不透明な継続。</target>
        </trans-unit>
        <trans-unit id="0fd3a4cc67ebb2e2dcfc37bc089269155adc35e9" translate="yes" xml:space="preserve">
          <source>Opaque data type containing a compiled regular expression. &lt;code&gt;mp()&lt;/code&gt; is guaranteed to be a tuple() having the atom &lt;code&gt;re_pattern&lt;/code&gt; as its first element, to allow for matching in guards. The arity of the tuple or the content of the other fields can change in future Erlang/OTP releases.</source>
          <target state="translated">コンパイルされた正規表現を含む不透明なデータ型。 &lt;code&gt;mp()&lt;/code&gt; は、最初の要素としてアトム &lt;code&gt;re_pattern&lt;/code&gt; を持つtuple（）であることが保証されており、ガードでのマッチングを可能にします。タプルのアリティまたは他のフィールドの内容は、将来のErlang / OTPリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="23206d19a217e18d8ba3621938088efa39a69154" translate="yes" xml:space="preserve">
          <source>Opaque data type representing a channel inside a connection.</source>
          <target state="translated">接続内のチャネルを表す不透明なデータ型。</target>
        </trans-unit>
        <trans-unit id="10ef7cb1f64bbdc10f27d8dc1ce5e8006717e4e1" translate="yes" xml:space="preserve">
          <source>Opaque data type representing a compiled search pattern. Guaranteed to be a &lt;code&gt;tuple()&lt;/code&gt; to allow programs to distinguish it from non-precompiled search patterns.</source>
          <target state="translated">コンパイルされた検索パターンを表す不透明なデータ型。プログラムが &lt;code&gt;tuple()&lt;/code&gt; であることを保証し、プログラムがプリコンパイルされていない検索パターンと区別できるようにします。</target>
        </trans-unit>
        <trans-unit id="11a89fac909edd47d58426bf26b171a05bcc5425" translate="yes" xml:space="preserve">
          <source>Opaque data type representing a connection between a client and a server (daemon).</source>
          <target state="translated">クライアントとサーバ(デーモン)間の接続を表す不透明なデータ型。</target>
        </trans-unit>
        <trans-unit id="620b0b7f87aa05da3ff0439d717021eb8fe8e602" translate="yes" xml:space="preserve">
          <source>Opaque data type representing a daemon.</source>
          <target state="translated">デーモンを表す不透明なデータ型。</target>
        </trans-unit>
        <trans-unit id="3857ec812333e693713ca05fedf452c8c2760e48" translate="yes" xml:space="preserve">
          <source>Opaque reference for a connection to a NETCONF server or a NETCONF session.</source>
          <target state="translated">NETCONF サーバーまたは NETCONF セッションへの接続の不透明な参照。</target>
        </trans-unit>
        <trans-unit id="1ad02c5216bfba2278b495045671c8cc585c4d19" translate="yes" xml:space="preserve">
          <source>Opaque send handle whose contents is internal for the send module. May be any term.</source>
          <target state="translated">不透明な送信ハンドルで、その内容は送信モジュールの内部にあります。任意の項を指定することができます。</target>
        </trans-unit>
        <trans-unit id="107ba6e41ccc6092a0776c13b1c83f0f2e14171a" translate="yes" xml:space="preserve">
          <source>Opaque types that define experimental options that are not to be used in products.</source>
          <target state="translated">製品に使用しない実験的なオプションを定義する不透明タイプ。</target>
        </trans-unit>
        <trans-unit id="3550457d3cea02f68e91830d6b92589beceb0ac2" translate="yes" xml:space="preserve">
          <source>Open Database Connectivity (ODBC) is a Microsoft standard for accessing relational databases that has become widely used. The ODBC standard provides a c-level application programming interface (API) for database access. It uses Structured Query Language (SQL) as its database access language.</source>
          <target state="translated">Open Database Connectivity(ODBC)は、リレーショナルデータベースにアクセスするためのMicrosoftの標準規格であり、広く利用されるようになった。ODBC標準は、データベースアクセスのためのcレベルのアプリケーションプログラミングインターフェース(API)を提供します。データベースアクセス言語として構造化クエリ言語 (SQL)を使用しています。</target>
        </trans-unit>
        <trans-unit id="8082c8186bf5acfdb929e31ffd3d59546e0c666b" translate="yes" xml:space="preserve">
          <source>Open an SSH connection to a named NETCONF server.</source>
          <target state="translated">名前のついたNETCONFサーバにSSH接続を開きます。</target>
        </trans-unit>
        <trans-unit id="ee2771cae64f2d66b96c7d0fdeb3a995d3b00a84" translate="yes" xml:space="preserve">
          <source>Open files and sockets</source>
          <target state="translated">ファイルとソケットを開く</target>
        </trans-unit>
        <trans-unit id="c2f3ad251a3411a0d3096b7d62ceb15282d3c92b" translate="yes" xml:space="preserve">
          <source>Open ports</source>
          <target state="translated">オープンポート</target>
        </trans-unit>
        <trans-unit id="d5d9049df9a69941f4ebda406f0f9058d7b67428" translate="yes" xml:space="preserve">
          <source>Open punctuation</source>
          <target state="translated">開いた句読点</target>
        </trans-unit>
        <trans-unit id="0f83435c5ff89a01a4392cfcdc0fce03d20e7bcf" translate="yes" xml:space="preserve">
          <source>OpenSSH public-key format looks as follows:</source>
          <target state="translated">OpenSSH の公開鍵の形式は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="78a8e32789179af6e9a1ec19eccc362f6f09476e" translate="yes" xml:space="preserve">
          <source>OpenSSL -- The opensource toolkit for Secure Socket Layer and Transport Layer Security. Required for building the application &lt;code&gt;crypto&lt;/code&gt;. Further, &lt;code&gt;ssl&lt;/code&gt; and &lt;code&gt;ssh&lt;/code&gt; require a working crypto application and will also be skipped if OpenSSL is missing. The &lt;code&gt;public_key&lt;/code&gt; application is available without &lt;code&gt;crypto&lt;/code&gt;, but the functionality will be very limited.</source>
          <target state="translated">OpenSSL-Secure Socket LayerおよびTransport Layer Security用のオープンソースツールキット。アプリケーション &lt;code&gt;crypto&lt;/code&gt; を構築するために必要です。さらに、 &lt;code&gt;ssl&lt;/code&gt; と &lt;code&gt;ssh&lt;/code&gt; には有効な暗号アプリケーションが必要であり、OpenSSLがない場合もスキップされます。 &lt;code&gt;public_key&lt;/code&gt; アプリケーションはせずに利用され &lt;code&gt;crypto&lt;/code&gt; が、機能は非常に制限されます。</target>
        </trans-unit>
        <trans-unit id="f9ba88f6151c1d4c39311034d5740f6813c1bb3d" translate="yes" xml:space="preserve">
          <source>OpenSSL can be built to provide FIPS 140-2 validated cryptographic services. It is not the OpenSSL application that is validated, but a special software component called the OpenSSL FIPS Object Module. However applications do not use this Object Module directly, but through the regular API of the OpenSSL library.</source>
          <target state="translated">OpenSSL は、FIPS 140-2 で検証された暗号化サービスを提供するために構築することができます。検証されるのは OpenSSL アプリケーションではなく、OpenSSL FIPS オブジェクトモジュールと呼ばれる特別なソフトウェアコンポーネントです。ただし、アプリケーションはこのオブジェクトモジュールを直接使用するのではなく、OpenSSL ライブラリの通常の API を介して使用します。</target>
        </trans-unit>
        <trans-unit id="ec75c958bae528f688b7acd8013d185972516f61" translate="yes" xml:space="preserve">
          <source>OpenSSL exposes an Engine API, which makes it possible to plug in alternative implementations for some or all of the cryptographic operations implemented by OpenSSL. When configured appropriately, OpenSSL calls the engine's implementation of these operations instead of its own.</source>
          <target state="translated">OpenSSL はエンジン API を公開しており、OpenSSL によって実装されている暗号化処理の一部または全部を代替の実装としてプラグインすることが可能です。適切に設定されている場合、OpenSSL はこれらの操作の代わりにエンジンの実装を呼び出します。</target>
        </trans-unit>
        <trans-unit id="23dcb6e17a0724721b52791ead27b1179856c026" translate="yes" xml:space="preserve">
          <source>OpenSSL handles these corner cases in FIPS mode, however the Erlang crypto and ssl applications are not prepared for them and therefore you are limited to TLS 1.2 in FIPS mode.</source>
          <target state="translated">OpenSSLはFIPSモードでこれらのコーナーケースを処理しますが、Erlangの暗号化とsslアプリケーションはこれらのケースに対応していないので、FIPSモードではTLS 1.2に制限されています。</target>
        </trans-unit>
        <trans-unit id="3a24b8124364457504f3d77d3e37c9aa2f092c8b" translate="yes" xml:space="preserve">
          <source>OpenSSL. This is if you want the SSL and crypto applications to compile (and run). There are prebuilt binaries, which you can just download and install, available here:</source>
          <target state="translated">OpenSSLです。これは、SSL と暗号化アプリケーションをコンパイル (と実行)したい場合に使用します。ここからダウンロードしてインストールすることができます。</target>
        </trans-unit>
        <trans-unit id="fc37c058118702102358b15e5a9279ede7fb88f0" translate="yes" xml:space="preserve">
          <source>OpenSource users can ask questions and share experiences on the &lt;a href=&quot;http://www.erlang.org/static/doc/mailinglist.html&quot;&gt; Erlang questions mailing list&lt;/a&gt;.</source>
          <target state="translated">オープンソースユーザーは、&lt;a href=&quot;http://www.erlang.org/static/doc/mailinglist.html&quot;&gt;Erlang質問メーリングリストで&lt;/a&gt;質問したり、経験を共有したりできます。</target>
        </trans-unit>
        <trans-unit id="9f59aad599af06a50017bc066f13ce93de0675e4" translate="yes" xml:space="preserve">
          <source>Opening a connection to the SUT</source>
          <target state="translated">SUTへの接続を開く</target>
        </trans-unit>
        <trans-unit id="16d19c8e7f51506cd01c5e4f542d05b716cdf852" translate="yes" xml:space="preserve">
          <source>Opening files with option &lt;code&gt;encoding&lt;/code&gt; is convenient when writing or reading text files in a known encoding.</source>
          <target state="translated">オプションの &lt;code&gt;encoding&lt;/code&gt; ファイルを開くと、既知のエンコーディングでテキストファイルを読み書きするときに便利です。</target>
        </trans-unit>
        <trans-unit id="67011158e86d9fe5da95333d965bcbbe99127074" translate="yes" xml:space="preserve">
          <source>Opening parentheses are counted from left to right (starting from 1) to obtain numbers for the capturing subpatterns. For example, if the string &quot;the red king&quot; is matched against the following pattern, the captured substrings are &quot;red king&quot;, &quot;red&quot;, and &quot;king&quot;, and are numbered 1, 2, and 3, respectively:</source>
          <target state="translated">開いている括弧は、左から右へ(1から始まる)カウントされ、キャプチャされた部分パターンの番号が得られる。例えば、&quot;the red king &quot;という文字列が以下のパターンにマッチした場合、捕捉される部分文字列は &quot;red king&quot;、&quot;red&quot;、&quot;king &quot;であり、それぞれ1、2、3の番号が付けられている。</target>
        </trans-unit>
        <trans-unit id="75588bb57f0a2ad5ebe6ca42cc40d8c3b6d3dc26" translate="yes" xml:space="preserve">
          <source>Opening square bracket (only when it can be interpreted as introducing a Posix class name, or for a special compatibility feature; see the next two sections)</source>
          <target state="translated">開いている大括弧(Posixクラス名を導入していると解釈できる場合、または特別な互換性機能のために解釈できる場合のみ。</target>
        </trans-unit>
        <trans-unit id="0a4914a57f284d13929c087c4e60d213c9577e76" translate="yes" xml:space="preserve">
          <source>Opens (creates) a registry, which initially is empty. To close the registry later, use &lt;code&gt;ei_reg_close()&lt;/code&gt;.</source>
          <target state="translated">最初は空のレジストリを開きます（作成します）。後でレジストリを閉じるには、 &lt;code&gt;ei_reg_close()&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="3b46d26782974b469a2ae782f58aa207429f253c" translate="yes" xml:space="preserve">
          <source>Opens a &lt;code&gt;&lt;a href=&quot;#view&quot;&gt;View Module window&lt;/a&gt;&lt;/code&gt;, displaying the contents of the selected module.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#view&quot;&gt;View Module window&lt;/a&gt;&lt;/code&gt; の表示]ウィンドウを開き、選択したモジュールの内容を表示します。</target>
        </trans-unit>
        <trans-unit id="22a4c7bdc761516d54977e6e3c2f08e31666a769" translate="yes" xml:space="preserve">
          <source>Opens a NETCONF session and exchanges &lt;code&gt;hello&lt;/code&gt; messages.</source>
          <target state="translated">NETCONFセッションを開き、 &lt;code&gt;hello&lt;/code&gt; メッセージを交換します。</target>
        </trans-unit>
        <trans-unit id="fc2106dbbf5f859efe242b4f2863fc622702b3ed" translate="yes" xml:space="preserve">
          <source>Opens a NETCONF session as a channel on the given SSH connection, and exchanges hello messages with the server.</source>
          <target state="translated">SSH 接続上で NETCONF セッションをチャネルとして開き、サーバとの間で hello メッセージを交換します。</target>
        </trans-unit>
        <trans-unit id="01cccde2b149248e69a585d60c61c3d13087127c" translate="yes" xml:space="preserve">
          <source>Opens a NETCONF session, but does not send &lt;code&gt;hello&lt;/code&gt;.</source>
          <target state="translated">NETCONFセッションを開きますが、 &lt;code&gt;hello&lt;/code&gt; を送信しません。</target>
        </trans-unit>
        <trans-unit id="e0e8afe49dad7508484506ff701e53d0d8fc26e0" translate="yes" xml:space="preserve">
          <source>Opens a Telnet connection to the specified target host.</source>
          <target state="translated">指定したターゲットホストへの Telnet 接続を開きます。</target>
        </trans-unit>
        <trans-unit id="863e973e6a31c9261a3ac1a5ee27b4c5d6dfcd10" translate="yes" xml:space="preserve">
          <source>Opens a channel for an SSH session.</source>
          <target state="translated">SSH セッション用のチャンネルを開きます。</target>
        </trans-unit>
        <trans-unit id="f4b954e8567f661fe6c4ddf769bdcc65e25fa9df" translate="yes" xml:space="preserve">
          <source>Opens a channel for an SSH session. The channel id returned from this function is the id used as input to the other functions in this module.</source>
          <target state="translated">SSH セッション用のチャンネルを開きます。この関数から返されるチャネル ID は、このモジュールの他の関数の入力として使用される ID です。</target>
        </trans-unit>
        <trans-unit id="84e8a4380a15d0e1019641a8397c044a4caf2ec5" translate="yes" xml:space="preserve">
          <source>Opens a connection to the database. The connection is associated with the process that created it and can only be accessed through it. This function may spawn new processes to handle the connection. These processes will terminate if the process that created the connection dies or if you call disconnect/1.</source>
          <target state="translated">データベースへの接続を開きます。この接続は、その接続を作成したプロセスに関連付けられており、そのプロセスを介してのみアクセスすることができます。この関数は、接続を処理するための新しいプロセスを生成することがあります。これらのプロセスは、接続を作成したプロセスが死亡した場合、または disconnect/1 を呼び出した場合に終了します。</target>
        </trans-unit>
        <trans-unit id="8a2ca3ab2e6a54c904b5fe348aa46db48f2f0c68" translate="yes" xml:space="preserve">
          <source>Opens a detailed information window on the selected process, including the following:</source>
          <target state="translated">選択したプロセスの詳細情報ウィンドウを開きます。</target>
        </trans-unit>
        <trans-unit id="f750e93585a93a3a78ed2d040624e4bedee5783b" translate="yes" xml:space="preserve">
          <source>Opens a file for preprocessing.</source>
          <target state="translated">前処理のためのファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="0dae8080316d196c81e5e5bd698fc2b46c3bd578" translate="yes" xml:space="preserve">
          <source>Opens a file for read or write access.</source>
          <target state="translated">読み書きアクセスのためにファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="05853d805e8d0a64be6bd32197c1efe7fc8affff" translate="yes" xml:space="preserve">
          <source>Opens a file on the server and returns a handle, which can be used for reading or writing.</source>
          <target state="translated">サーバー上のファイルを開き、ハンドルを返します。</target>
        </trans-unit>
        <trans-unit id="c8cba523b51510605036808e563faed86bad7a34" translate="yes" xml:space="preserve">
          <source>Opens a handle to a directory on the server. The handle can be used for reading directory contents.</source>
          <target state="translated">サーバ上のディレクトリへのハンドルを開きます。このハンドルは、ディレクトリの内容を読み取るために使用することができます。</target>
        </trans-unit>
        <trans-unit id="582c61865473eb0cf103ce22b094eb7d48793963" translate="yes" xml:space="preserve">
          <source>Opens a handle to a tar file on the server, associated with &lt;code&gt;ChannelPid&lt;/code&gt;. The handle can be used for remote tar creation and extraction, as defined by the &lt;code&gt;erl_tar:init/3&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;ChannelPid&lt;/code&gt; に関連付けられた、サーバー上のtarファイルへのハンドルを開きます。このハンドルは、 &lt;code&gt;erl_tar:init/3&lt;/code&gt; 関数で定義されているように、リモートtarの作成と抽出に使用できます。</target>
        </trans-unit>
        <trans-unit id="38a016da939f8a64a311d0439e65d9ca62d7e550" translate="yes" xml:space="preserve">
          <source>Opens a named NETCONF session and exchanges &lt;code&gt;hello&lt;/code&gt; messages.</source>
          <target state="translated">名前付きNETCONFセッションを開き、 &lt;code&gt;hello&lt;/code&gt; メッセージを交換します。</target>
        </trans-unit>
        <trans-unit id="6c86f8db1e9c8781949e8303c056c061130288be" translate="yes" xml:space="preserve">
          <source>Opens a named NETCONF session, but does not send &lt;code&gt;hello&lt;/code&gt;.</source>
          <target state="translated">名前付きNETCONFセッションを開きますが、 &lt;code&gt;hello&lt;/code&gt; を送信しません。</target>
        </trans-unit>
        <trans-unit id="ae78d453fdc1ed67800d13633ccdbf6892076735" translate="yes" xml:space="preserve">
          <source>Opens a table. An empty Dets table is created if no file exists.</source>
          <target state="translated">テーブルを開きます。ファイルが存在しない場合、空の Dets テーブルが作成されます。</target>
        </trans-unit>
        <trans-unit id="5b10027bd172d07f8eae36a418eb12d0559fcafd" translate="yes" xml:space="preserve">
          <source>Opens a trace port on each node to be traced. By default, trace messages are written to binary files on remote nodes (the binary trace log).</source>
          <target state="translated">トレースする各ノード上のトレースポートを開きます。デフォルトでは、トレースメッセージはリモートノード上のバイナリファイル(バイナリトレースログ)に書き込まれます。</target>
        </trans-unit>
        <trans-unit id="6a5ff76be69758b5b422a1d897ebb9c5f931b8de" translate="yes" xml:space="preserve">
          <source>Opens a zip archive, and reads and saves its directory. This means that later reading files from the archive is faster than unzipping files one at a time with &lt;code&gt;&lt;a href=&quot;#unzip-1&quot;&gt;unzip/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">zipアーカイブを開き、そのディレクトリを読み取って保存します。これは、後でアーカイブからファイルを読み取る方が、unzip &lt;code&gt;&lt;a href=&quot;#unzip-1&quot;&gt;unzip/1,2&lt;/a&gt;&lt;/code&gt; を使用して一度に1つずつファイルを解凍するよりも高速であることを意味します。</target>
        </trans-unit>
        <trans-unit id="cfb9d8cc25812a80fcde10dfb14baff5e93d3d89" translate="yes" xml:space="preserve">
          <source>Opens a zlib stream.</source>
          <target state="translated">zlibストリームを開きます。</target>
        </trans-unit>
        <trans-unit id="cf71532877f9185120e6ff70251b83955022ad68" translate="yes" xml:space="preserve">
          <source>Opens an FTP connection and fetches a file from the remote host.</source>
          <target state="translated">FTP 接続を開き、リモートホストからファイルを取得します。</target>
        </trans-unit>
        <trans-unit id="0edbf2d8cf836a0928dd1ee04359d15b3360a7a1" translate="yes" xml:space="preserve">
          <source>Opens an FTP connection and sends a file to the remote host.</source>
          <target state="translated">FTP 接続を開き、リモートホストにファイルを送信します。</target>
        </trans-unit>
        <trans-unit id="34a1d5c3e19d27c4c884a326dd68b7ad28a75ae7" translate="yes" xml:space="preserve">
          <source>Opens an FTP connection to the specified node.</source>
          <target state="translated">指定したノードへのFTP接続を開きます。</target>
        </trans-unit>
        <trans-unit id="375e952b3e4358b9086c82fb4e035f4c2d220eed" translate="yes" xml:space="preserve">
          <source>Opens an SSH connection to a NETCONF server.</source>
          <target state="translated">NETCONF サーバへの SSH 接続を開きます。</target>
        </trans-unit>
        <trans-unit id="a16d2119745f4d905dfff9790116b88f38df60dd" translate="yes" xml:space="preserve">
          <source>Opens an SSH or SFTP connection using the information associated with &lt;code&gt;KeyOrName&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;KeyOrName&lt;/code&gt; に関連付けられた情報を使用して、SSHまたはSFTP接続を開きます。</target>
        </trans-unit>
        <trans-unit id="39bf3429a9eb17df337807274369a2a1485631e4" translate="yes" xml:space="preserve">
          <source>Opens an TLS/DTLS connection to &lt;code&gt;Host&lt;/code&gt;, &lt;code&gt;Port&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Host&lt;/code&gt; 、 &lt;code&gt;Port&lt;/code&gt; へのTLS / DTLS接続を開きます。</target>
        </trans-unit>
        <trans-unit id="62effb5551d902e97d0967400f135108af21c88b" translate="yes" xml:space="preserve">
          <source>Opens an existing resource type and takes over ownership of all its instances. The supplied destructor &lt;code&gt;dtor&lt;/code&gt; is called both for existing instances and new instances not yet created by the calling NIF library.</source>
          <target state="translated">既存のリソースタイプを開き、そのすべてのインスタンスの所有権を引き継ぎます。提供されているデストラクタ &lt;code&gt;dtor&lt;/code&gt; は、既存のインスタンスと、呼び出し元のNIFライブラリによってまだ作成されていない新しいインスタンスの両方に対して呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9f30c59ec922ffa7f6658907dc759edc40afdb39" translate="yes" xml:space="preserve">
          <source>Opens an existing table. If the table is not properly closed, it is repaired. The returned reference is to be used as the table name. This function is most useful for debugging purposes.</source>
          <target state="translated">既存のテーブルを開きます。テーブルが適切に閉じられていない場合は、修復されます。返された参照は、テーブル名として使用されます。この関数は、デバッグ目的で最も有用です。</target>
        </trans-unit>
        <trans-unit id="6191fa62fa9a2d5758147014b1cebb180f7936ed" translate="yes" xml:space="preserve">
          <source>Opens an interactive Windows console window for the Erlang shell of the service. Automatically disables the &lt;code&gt;StopAction&lt;/code&gt;. A service started with an interactive console window does not survive logouts. &lt;code&gt;OnFail&lt;/code&gt; actions do not work with debug consoles either.</source>
          <target state="translated">サービスのErlangシェルのインタラクティブなWindowsコンソールウィンドウを開きます。 &lt;code&gt;StopAction&lt;/code&gt; を自動的に無効にします。対話型コンソールウィンドウで開始されたサービスは、ログアウト後も存続しません。 &lt;code&gt;OnFail&lt;/code&gt; アクションは、デバッグコンソールでも機能しません。</target>
        </trans-unit>
        <trans-unit id="6b42e9b24605e4d337c32c2f54025481d238a9f0" translate="yes" xml:space="preserve">
          <source>Opens file &lt;code&gt;File&lt;/code&gt; in the mode determined by &lt;code&gt;Modes&lt;/code&gt;, which can contain one or more of the following options:</source>
          <target state="translated">&lt;code&gt;Modes&lt;/code&gt; によって決定されたモードでファイル &lt;code&gt;File&lt;/code&gt; を開きます。このモードには、次のオプションの1つ以上を含めることができます。</target>
        </trans-unit>
        <trans-unit id="f1f250fc2e30dcf740ba52a6778d1bf170664542" translate="yes" xml:space="preserve">
          <source>Opens log file &lt;code&gt;Filename&lt;/code&gt;. Returns &lt;code&gt;ok&lt;/code&gt; if successful, or &lt;code&gt;{error, allready_have_logfile}&lt;/code&gt; if logging to file is already enabled, or an error tuple if another error occurred (for example, if &lt;code&gt;Filename&lt;/code&gt; cannot be opened). The file is opened with encoding UTF-8.</source>
          <target state="translated">ログファイル &lt;code&gt;Filename&lt;/code&gt; を開きます。成功した場合は &lt;code&gt;ok&lt;/code&gt; を、ファイルへのロギングがすでに有効になっている場合は &lt;code&gt;{error, allready_have_logfile}&lt;/code&gt; 、別のエラーが発生した場合（ &lt;code&gt;Filename&lt;/code&gt; を開くことができない場合など）はエラータプルを返します。ファイルはUTF-8エンコードで開かれます。</target>
        </trans-unit>
        <trans-unit id="515b021c218ccf64dc87cfd2e6aafb2c71875e7c" translate="yes" xml:space="preserve">
          <source>Opens the &lt;code&gt;&lt;a href=&quot;#interpret&quot;&gt;Interpret Modules window&lt;/a&gt;&lt;/code&gt;, where new modules to be interpreted can be specified.</source>
          <target state="translated">解釈する新しいモジュールを指定できる[モジュールの &lt;code&gt;&lt;a href=&quot;#interpret&quot;&gt;Interpret Modules window&lt;/a&gt;&lt;/code&gt; 開きます。</target>
        </trans-unit>
        <trans-unit id="9b4d52c05a1dfa015184d5b6d02092d14d75b8e3" translate="yes" xml:space="preserve">
          <source>Opens the registry for reading or writing. The current key is the root (&lt;code&gt;HKEY_CLASSES_ROOT&lt;/code&gt;). Flag &lt;code&gt;read&lt;/code&gt; in the mode list can be omitted.</source>
          <target state="translated">レジストリを読み取りまたは書き込み用に開きます。現在のキーはルート（ &lt;code&gt;HKEY_CLASSES_ROOT&lt;/code&gt; ）です。モードリストで &lt;code&gt;read&lt;/code&gt; フラグは省略できます。</target>
        </trans-unit>
        <trans-unit id="3844a6955eb1488c222cb350aad910d634debf0b" translate="yes" xml:space="preserve">
          <source>Operating system interface</source>
          <target state="translated">オペレーティングシステムのインターフェイス</target>
        </trans-unit>
        <trans-unit id="6ba10933377bd765bd39421a74f86a9f5033cd62" translate="yes" xml:space="preserve">
          <source>Operating system-specific functions.</source>
          <target state="translated">システム固有の機能を操作します。</target>
        </trans-unit>
        <trans-unit id="430d32076eb256f0fb1db5fd1333254c368ef1ba" translate="yes" xml:space="preserve">
          <source>Operation</source>
          <target state="translated">Operation</target>
        </trans-unit>
        <trans-unit id="3c9639c2c52d47e5befdf848b84975f48bd5f879" translate="yes" xml:space="preserve">
          <source>Operation &lt;code&gt;&lt;a href=&quot;#kill_session-2&quot;&gt;kill_session/2,3&lt;/a&gt;&lt;/code&gt; can be used to force the release of a lock owned by another NETCONF session. How this is achieved by the server side is implementation-specific.</source>
          <target state="translated">操作 &lt;code&gt;&lt;a href=&quot;#kill_session-2&quot;&gt;kill_session/2,3&lt;/a&gt;&lt;/code&gt; を使用して、別のNETCONFセッションが所有するロックを強制的に解放できます。これがサーバー側でどのように実現されるかは、実装によって異なります。</target>
        </trans-unit>
        <trans-unit id="2fd85be02fe70099570593767a6ed02c554cee82" translate="yes" xml:space="preserve">
          <source>Operations on finite sets and relations represented as sets</source>
          <target state="translated">有限集合と集合で表される関係の操作</target>
        </trans-unit>
        <trans-unit id="d721e6bae341c96a244ef5325ee7783da8aa05da" translate="yes" xml:space="preserve">
          <source>Operator precedence in falling priority:</source>
          <target state="translated">優先順位の低下におけるオペレーターの優先順位。</target>
        </trans-unit>
        <trans-unit id="9ac3210fbaf7aa51089439b718a4799d5b27c2af" translate="yes" xml:space="preserve">
          <source>Option (&lt;code&gt;option()&lt;/code&gt;) details:</source>
          <target state="translated">オプション（ &lt;code&gt;option()&lt;/code&gt; ）の詳細：</target>
        </trans-unit>
        <trans-unit id="7bc4e2bf65691f392e0c6aef8849b96e3503d3f9" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;+d&lt;/code&gt; instructs the emulator to produce only a core dump and no crash dump if an internal error is detected.</source>
          <target state="translated">オプション &lt;code&gt;+d&lt;/code&gt; は、内部エラーが検出された場合、コアダンプのみを生成し、クラッシュダンプは生成しないようにエミュレーターに指示します。</target>
        </trans-unit>
        <trans-unit id="617924dbd7f61aaccfafefec23e2e5c27276a861" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;Encoding&lt;/code&gt; is used for selecting which integer lists to be considered as strings. The default is to use the encoding returned by function &lt;code&gt;&lt;a href=&quot;epp#default_encoding-0&quot;&gt;epp:default_encoding/0&lt;/a&gt;&lt;/code&gt;. Value &lt;code&gt;none&lt;/code&gt; means that no integer lists are considered as strings. &lt;code&gt;encoding_func()&lt;/code&gt; is called with one integer of a list at a time; if it returns &lt;code&gt;true&lt;/code&gt; for every integer, the list is considered a string.</source>
          <target state="translated">オプション &lt;code&gt;Encoding&lt;/code&gt; は、文字列と見なされる整数リストを選択するために使用されます。デフォルトでは、関数 &lt;code&gt;&lt;a href=&quot;epp#default_encoding-0&quot;&gt;epp:default_encoding/0&lt;/a&gt;&lt;/code&gt; によって返されるエンコーディングを使用します。値 &lt;code&gt;none&lt;/code&gt; は、整数リストが文字列と見なされないことを意味します。 &lt;code&gt;encoding_func()&lt;/code&gt; は、一度に1つの整数のリストで呼び出されます。すべての整数に対して &lt;code&gt;true&lt;/code&gt; を返す場合、リストは文字列と見なされます。</target>
        </trans-unit>
        <trans-unit id="03b58ec642c1d6975a7cca9e9e0680f47eecc590" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;Format&lt;/code&gt; determines the function that is applied to binaries to create the terms to be sorted. Defaults to &lt;code&gt;binary_term&lt;/code&gt;, which is equivalent to &lt;code&gt;fun&amp;nbsp;binary_to_term/1&lt;/code&gt;. Value &lt;code&gt;binary&lt;/code&gt; is equivalent to &lt;code&gt;fun(X) -&amp;gt; X end&lt;/code&gt;, which means that the binaries are sorted as they are. This is the fastest format. If &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;term&lt;/code&gt;, &lt;code&gt;io:read/2&lt;/code&gt; is called to read terms. In that case, only the default value of option &lt;code&gt;header&lt;/code&gt; is allowed.</source>
          <target state="translated">オプション &lt;code&gt;Format&lt;/code&gt; は、ソートする用語を作成するためにバイナリに適用される関数を決定します。デフォルトは &lt;code&gt;binary_term&lt;/code&gt; で、これは &lt;code&gt;fun&amp;nbsp;binary_to_term/1&lt;/code&gt; と同等です。値の &lt;code&gt;binary&lt;/code&gt; は &lt;code&gt;fun(X) -&amp;gt; X end&lt;/code&gt; と同等です。つまり、バイナリはそのままの形でソートされます。これは最速のフォーマットです。 &lt;code&gt;Format&lt;/code&gt; が &lt;code&gt;term&lt;/code&gt; の場合、用語を &lt;code&gt;io:read/2&lt;/code&gt; ためにio：read / 2が呼び出されます。その場合、オプション &lt;code&gt;header&lt;/code&gt; デフォルト値のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="515640376a1e84c5e88279e98275326333b1e883" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;Line&lt;/code&gt; is the line to be assigned to each node of &lt;code&gt;AbsTerm&lt;/code&gt;.</source>
          <target state="translated">Option &lt;code&gt;Line&lt;/code&gt; は、 &lt;code&gt;AbsTerm&lt;/code&gt; の各ノードに割り当てられるラインです。</target>
        </trans-unit>
        <trans-unit id="ba8fe57baa6137f1e318cb3833968d8989a57f43" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;accept&lt;/code&gt; specifies remote addresses for a listening transport and is not valid for a connecting transport. If specified, a remote address that does not match one of the specified addresses causes the association to be aborted. Multiple &lt;code&gt;accept&lt;/code&gt; options can be specified. A string-valued &lt;code&gt;Match&lt;/code&gt; that does not parse as an address is interpreted as a regular expression.</source>
          <target state="translated">オプション &lt;code&gt;accept&lt;/code&gt; は、リスニングトランスポートのリモートアドレスを指定し、接続トランスポートには無効です。指定した場合、指定したアドレスのいずれとも一致しないリモートアドレスにより、関連付けが中止されます。複数の &lt;code&gt;accept&lt;/code&gt; オプションを指定できます。アドレスとして解析されない文字列値の &lt;code&gt;Match&lt;/code&gt; は、正規表現として解釈されます。</target>
        </trans-unit>
        <trans-unit id="37bd8dc1b650be1a6635cb23b4502d2226d11576" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;accept&lt;/code&gt; specifies remote addresses for a listening transport and is not valid for a connecting transport. If specified, a remote address that does not match one of the specified addresses causes the connection to be aborted. Multiple &lt;code&gt;accept&lt;/code&gt; options can be specified. A string-valued &lt;code&gt;Match&lt;/code&gt; that does not parse as an address is interpreted as a regular expression.</source>
          <target state="translated">オプション &lt;code&gt;accept&lt;/code&gt; は、リスニングトランスポートのリモートアドレスを指定し、接続トランスポートには無効です。指定した場合、指定したアドレスのいずれとも一致しないリモートアドレスにより、接続が中止されます。複数の &lt;code&gt;accept&lt;/code&gt; オプションを指定できます。アドレスとして解析されない文字列値の &lt;code&gt;Match&lt;/code&gt; は、正規表現として解釈されます。</target>
        </trans-unit>
        <trans-unit id="1f55894395584bb9a3e02eafbec27ef2e407d6b9" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;allow_passive_connect&lt;/code&gt; is used internally and is seldom needed in applications where the network topology and the Kernel options in effect are known in advance.</source>
          <target state="translated">オプション &lt;code&gt;allow_passive_connect&lt;/code&gt; は内部で使用され、ネットワークトポロジと有効なカーネルオプションが事前にわかっているアプリケーションではほとんど必要ありません。</target>
        </trans-unit>
        <trans-unit id="1a76c912018b3dd2b854bd85ee5b0c4b94ebb022" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;c&lt;/code&gt; makes &lt;code&gt;Ctrl-C&lt;/code&gt; interrupt the current shell instead of invoking the emulator break handler. Option &lt;code&gt;d&lt;/code&gt; (same as specifying &lt;code&gt;+B&lt;/code&gt; without an extra option) disables the break handler. Option &lt;code&gt;i&lt;/code&gt; makes the emulator ignore any break signal.</source>
          <target state="translated">オプション &lt;code&gt;c&lt;/code&gt; は、エミュレータのブレークハンドラを呼び出す代わりに、 &lt;code&gt;Ctrl-C&lt;/code&gt; で現在のシェルを中断します。オプション &lt;code&gt;d&lt;/code&gt; （追加オプションなしで &lt;code&gt;+B&lt;/code&gt; を指定するのと同じ）は、ブレークハンドラーを無効にします。オプション &lt;code&gt;i&lt;/code&gt; は、エミュレータにブレーク信号を無視させます。</target>
        </trans-unit>
        <trans-unit id="326d67c6dd06e800f8ccc7205a53b4bad41af409" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;cache&lt;/code&gt; has no effect if it is known that the QLC is to be evaluated at most once. This is always true for the top-most QLC and also for the list expression of the first generator in a list of qualifiers. Notice that in the presence of side effects in filters or callback functions, the answers to QLCs can be affected by option &lt;code&gt;cache&lt;/code&gt;.</source>
          <target state="translated">QLCが最大で1回評価されることがわかっている場合、オプション &lt;code&gt;cache&lt;/code&gt; は効果がありません。これは、最上位のQLCと、修飾子のリストの最初のジェネレーターのリスト式にも常に当てはまります。フィルターまたはコールバック関数に副作用がある場合、QLCへの回答はオプション &lt;code&gt;cache&lt;/code&gt; 影響を受ける可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c7d8de2a211bf879bd6b340617eed0c81c43b5ad" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;cache_all&lt;/code&gt; can be set to &lt;code&gt;ets&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt; when evaluating a query. It adds a &lt;code&gt;cache&lt;/code&gt; or &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; option to every list expression except QLC tables and lists on all levels of the query. This can be used for testing if caching would improve efficiency at all. If the answer is yes, further testing is needed to pinpoint the generators that are to be cached.</source>
          <target state="translated">オプション &lt;code&gt;cache_all&lt;/code&gt; は、クエリを評価するときに &lt;code&gt;ets&lt;/code&gt; または &lt;code&gt;list&lt;/code&gt; に設定できます。クエリのすべてのレベルのQLCテーブルとリストを除くすべてのリスト式に、 &lt;code&gt;cache&lt;/code&gt; または &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; オプションを追加します。これは、キャッシュによって効率が向上するかどうかをテストするために使用できます。答えが「はい」の場合、キャッシュされるジェネレーターを特定するために、さらにテストが必要です。</target>
        </trans-unit>
        <trans-unit id="8f4c8cddaf80a90f873230e5b6a5e7a3ad8af338" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;compile_source&lt;/code&gt; only affects the result if the escript contains &lt;code&gt;source&lt;/code&gt; code. In this case the Erlang code is automatically compiled and &lt;code&gt;{source, BeamCode}&lt;/code&gt; is returned instead of &lt;code&gt;{source, SourceCode}&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;compile_source&lt;/code&gt; は、escriptに &lt;code&gt;source&lt;/code&gt; コードが含まれている場合にのみ結果に影響します。この場合、Erlangコードは自動的にコンパイルされ、 &lt;code&gt;{source, SourceCode}&lt;/code&gt; ではなく &lt;code&gt;{source, BeamCode}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4ac2c8d2a46b7ed6d2b62afd37f0558c267adb74" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;debug_info&lt;/code&gt; can be specified to the Compiler (see &lt;code&gt;compile(3)&lt;/code&gt;) to have debug information, such as &lt;code&gt;Erlang Abstract Format&lt;/code&gt;, stored in the &lt;code&gt;debug_info&lt;/code&gt; chunk. Tools such as Debugger and Xref require the debug information to be included.</source>
          <target state="translated">オプション &lt;code&gt;debug_info&lt;/code&gt; をコンパイラー（ &lt;code&gt;compile(3)&lt;/code&gt; を参照）に指定して、 &lt;code&gt;Erlang Abstract Format&lt;/code&gt; などのデバッグ情報を &lt;code&gt;debug_info&lt;/code&gt; チャンクに保管できます。DebuggerやXrefなどのツールには、デバッグ情報を含める必要があります。</target>
        </trans-unit>
        <trans-unit id="bceef863ec9665aec5cef62d9d27d0ce6ab12ecb" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;debug_info&lt;/code&gt; causes &lt;strong&gt;debug information&lt;/strong&gt; or &lt;strong&gt;abstract code&lt;/strong&gt; to be added to the &lt;code&gt;.beam&lt;/code&gt; file. This increases the file size and makes it possible to reconstruct the source code. It is therefore recommended not to include debug information in code aimed for target systems.</source>
          <target state="translated">オプション &lt;code&gt;debug_info&lt;/code&gt; を使用すると、&lt;strong&gt;デバッグ情報&lt;/strong&gt;または&lt;strong&gt;抽象コード&lt;/strong&gt;が &lt;code&gt;.beam&lt;/code&gt; ファイルに追加されます。これによりファイルサイズが増加し、ソースコードを再構築することが可能になります。したがって、ターゲットシステム向けのコードにデバッグ情報を含めないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="769f8dc6e95ee290900e92345b3ad7fa81275ab3" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;extended_info&lt;/code&gt; specifies what extra information is written to the table dump:</source>
          <target state="translated">オプション &lt;code&gt;extended_info&lt;/code&gt; は、テーブルダンプに書き込まれる追加情報を指定します。</target>
        </trans-unit>
        <trans-unit id="7392a715b1ab5247b835edd88a64118c85b3ed71" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;format&lt;/code&gt; also determines what is written to the sorted output file: if &lt;code&gt;Format&lt;/code&gt; is &lt;code&gt;term&lt;/code&gt;, then &lt;code&gt;io:format/3&lt;/code&gt; is called to write each term, otherwise the binary prefixed by a header is written. Notice that the binary written is the same binary that was read; the results of applying function &lt;code&gt;Format&lt;/code&gt; are thrown away when the terms have been sorted. Reading and writing terms using the &lt;code&gt;io&lt;/code&gt; module is much slower than reading and writing binaries.</source>
          <target state="translated">オプションの &lt;code&gt;format&lt;/code&gt; また、ソートされた出力ファイルに書き込まれるかを決定する：場合 &lt;code&gt;Format&lt;/code&gt; である &lt;code&gt;term&lt;/code&gt; は、 &lt;code&gt;io:format/3&lt;/code&gt; 各用語を書き込むために呼び出され、そうでなければヘッダが付けバイナリが書き込まれます。書き込まれたバイナリは、読み取られたバイナリと同じであることに注意してください。用語がソートされると、関数 &lt;code&gt;Format&lt;/code&gt; を適用した結果は破棄されます。 &lt;code&gt;io&lt;/code&gt; モジュールを使用した用語の読み取りと書き込みは、バイナリの読み取りと書き込みよりもはるかに低速です。</target>
        </trans-unit>
        <trans-unit id="c6b86819a94a42b6a35f9a5c83dd920e56cafa28" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;fragment_timer&lt;/code&gt; specifies the timeout, in milliseconds, of a timer used to flush messages from the incoming byte stream even if the number of bytes indicated in the Message Length field of its Diameter Header have not yet been accumulated: such a message is received over the transport interface after two successive timeouts without the reception of additional bytes. Defaults to 1000.</source>
          <target state="translated">オプションの &lt;code&gt;fragment_timer&lt;/code&gt; は、Diameterヘッダーのメッセージ長フィールドに示されたバイト数がまだ蓄積されていない場合でも、着信バイトストリームからメッセージをフラッシュするために使用されるタイマーのタイムアウトをミリ秒単位で指定します。このようなメッセージは、追加のバイトを受信せずに2回連続してタイムアウトした後のトランスポートインターフェイス。デフォルトは1000です。</target>
        </trans-unit>
        <trans-unit id="ed047187b33ff5a36de976c2d7f174208794b18a" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;fullsweep_after&lt;/code&gt; makes it possible to specify the maximum number of generational collections before forcing a fullsweep, even if there is room on the old heap. Setting the number to zero disables the general collection algorithm, that is, all live data is copied at every garbage collection.</source>
          <target state="translated">オプション &lt;code&gt;fullsweep_after&lt;/code&gt; を使用すると、古いヒープに空きがある場合でも、フルスイープを強制する前の世代別コレクションの最大数を指定できます。数値をゼロに設定すると、一般的な収集アルゴリズムが無効になります。つまり、すべてのライブデータがガベージコレクションごとにコピーされます。</target>
        </trans-unit>
        <trans-unit id="ecaf25cf5459dfb31ebf85a2facfaa8a1ab4324e" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;hosts&lt;/code&gt; has no effect if &lt;code&gt;log_type&lt;/code&gt; is set to &lt;code&gt;html&lt;/code&gt; or &lt;code&gt;silent&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;log_type&lt;/code&gt; が &lt;code&gt;html&lt;/code&gt; または &lt;code&gt;silent&lt;/code&gt; に設定されている場合、オプション &lt;code&gt;hosts&lt;/code&gt; は効果がありません。</target>
        </trans-unit>
        <trans-unit id="64143a1b2e482aa0e161fd7b97567d3f14883e09" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;in_comment_only&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; by default, which is correct for Erlang source files. If set to &lt;code&gt;false&lt;/code&gt;, the encoding string does not necessarily have to occur in a comment.</source>
          <target state="translated">オプション &lt;code&gt;in_comment_only&lt;/code&gt; はデフォルトで &lt;code&gt;true&lt;/code&gt; であり、これはErlangソースファイルに適しています。 &lt;code&gt;false&lt;/code&gt; に設定した場合、エンコーディング文字列は必ずしもコメント内にある必要はありません。</target>
        </trans-unit>
        <trans-unit id="ebc5aecdab80e23de01ab20e75171559f54d5713" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;inet6&lt;/code&gt; has no effect on this function. You probably want to use &lt;code&gt;Type = a | aaaa&lt;/code&gt; instead.</source>
          <target state="translated">オプション &lt;code&gt;inet6&lt;/code&gt; はこの機能に影響を与えません。 &lt;code&gt;Type = a | aaaa&lt;/code&gt; を使用したいと思うでしょう。代わりにaaaa。</target>
        </trans-unit>
        <trans-unit id="8ca5f10fb139927f4989778fe340ba3f7bdbce64" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;ipv6_host_with_bracket&lt;/code&gt; deals with how to parse IPv6 addresses. For details, see argument &lt;code&gt;Options&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;#request-4&quot;&gt;request/[4,5]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;ipv6_host_with_bracket&lt;/code&gt; は、IPv6アドレスを解析する方法を扱います。詳細については、 &lt;code&gt;&lt;a href=&quot;#request-4&quot;&gt;request/[4,5]&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;Options&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="29e3299985763e8c1fce58b82fc31709b15fd60b" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;join&lt;/code&gt; can be used to force the &lt;code&gt;qlc&lt;/code&gt; module to use a certain join method. For the rest of this section it is assumed that the excessively slow join method called &quot;nested loop&quot; has been chosen:</source>
          <target state="translated">オプションの &lt;code&gt;join&lt;/code&gt; を使用して、 &lt;code&gt;qlc&lt;/code&gt; モジュールに特定の結合方法を強制的に使用させることができます。このセクションの残りの部分では、「ネストされたループ」と呼ばれる非常に遅い結合方法が選択されていると想定しています。</target>
        </trans-unit>
        <trans-unit id="895c90440d351c3b981bbc05eca735daa09f36b0" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;join&lt;/code&gt; does not imply that the test terms are merged, only that all tests are executed in one single test run.</source>
          <target state="translated">オプション &lt;code&gt;join&lt;/code&gt; は、テスト用語がマージされることを意味するのではなく、すべてのテストが1回のテスト実行で実行されることだけを意味します。</target>
        </trans-unit>
        <trans-unit id="176adb220c5fcd1ac1d87552301af2b1ded87f73" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;line_length&lt;/code&gt; also applies to &lt;code&gt;http*&lt;/code&gt; packet types as an alias for option &lt;code&gt;packet_size&lt;/code&gt; if &lt;code&gt;packet_size&lt;/code&gt; itself is not set. This use is only intended for backward compatibility.</source>
          <target state="translated">オプション &lt;code&gt;line_length&lt;/code&gt; はまたに適用され &lt;code&gt;http*&lt;/code&gt; オプションの別名として、パケットタイプ &lt;code&gt;packet_size&lt;/code&gt; 場合 &lt;code&gt;packet_size&lt;/code&gt; 自体はセットではありません。この使用は、下位互換性のみを目的としています。</target>
        </trans-unit>
        <trans-unit id="9ab41e9f6eb5eab4065b30a808546e5a4a2b51e9" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;message_cb&lt;/code&gt; specifies a callback that is invoked on incoming and outgoing messages, that can be used to implement flow control. It is applied to two arguments: an atom indicating the reason for the callback (&lt;code&gt;send&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt;, or &lt;code&gt;ack&lt;/code&gt; after a completed send), and the message in question (binary() on &lt;code&gt;recv&lt;/code&gt;, binary() or diameter_packet record on &lt;code&gt;send&lt;/code&gt; or &lt;code&gt;ack&lt;/code&gt;, or &lt;code&gt;false&lt;/code&gt; on &lt;code&gt;ack&lt;/code&gt; when an incoming request has been discarded). It should return a list of actions and a new callback as tail; eg. &lt;code&gt;[fun cb/3, State]&lt;/code&gt;. Valid actions are the atoms &lt;code&gt;send&lt;/code&gt; or &lt;code&gt;recv&lt;/code&gt;, to cause a following message-valued action to be sent/received, a message to send/receive (binary() or diameter_packet record), or a boolean() to enable/disable reading on the socket. More than one &lt;code&gt;send&lt;/code&gt;/&lt;code&gt;recv&lt;/code&gt;/message sequence can be returned from the same callback, and an initial &lt;code&gt;send&lt;/code&gt;/&lt;code&gt;recv&lt;/code&gt; can be omitted if the same as the value passed as the callback's first argument. Reading is initially enabled, and returning &lt;code&gt;false&lt;/code&gt; does not imply there cannot be subsequent &lt;code&gt;recv&lt;/code&gt; callbacks since messages may already have been read. An empty tail is equivalent to the prevailing callback. Defaults to a callback equivalent to &lt;code&gt;fun(ack, _) -&amp;gt; []; (_, Msg) -&amp;gt; [Msg] end&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;message_cb&lt;/code&gt; は、着信および発信メッセージで呼び出されるコールバックを指定します。これを使用して、フロー制御を実装できます。これは、2つの引数に適用されます。コールバックの理由を示すアトム（ &lt;code&gt;send&lt;/code&gt; が完了した後のsend、 &lt;code&gt;recv&lt;/code&gt; 、または &lt;code&gt;ack&lt;/code&gt; ）、および問題のメッセージ（ &lt;code&gt;recv&lt;/code&gt; のバイナリ（）、binary（）、または &lt;code&gt;send&lt;/code&gt; または &lt;code&gt;ack&lt;/code&gt; の diameter_packetレコード）、または &lt;code&gt;false&lt;/code&gt; の &lt;code&gt;ack&lt;/code&gt; の着信要求が破棄されています）。アクションのリストと新しいコールバックをテールとして返す必要があります。例えば。 &lt;code&gt;[fun cb/3, State]&lt;/code&gt; 。有効なアクションは、アトム &lt;code&gt;send&lt;/code&gt; または &lt;code&gt;recv&lt;/code&gt; 、次のメッセージ値のアクションを送受信するには、メッセージを送受信（binary（）またはdiameter_packetレコード）、またはブール値（）を使用してソケットの読み取りを有効または無効にします。同じコールバックから複数の &lt;code&gt;send&lt;/code&gt; / &lt;code&gt;recv&lt;/code&gt; / messageシーケンスを返すことができ、コールバックの最初の引数として渡された値と同じ場合、最初の &lt;code&gt;send&lt;/code&gt; / &lt;code&gt;recv&lt;/code&gt; を省略できます。最初は読み取りが有効になっていて、 &lt;code&gt;false&lt;/code&gt; を返すことは、メッセージが既に読み取られている可能性があるため、後続の &lt;code&gt;recv&lt;/code&gt; コールバックがないことを意味しません。空の尾は、一般的なコールバックと同等です。デフォルトは &lt;code&gt;fun(ack, _) -&amp;gt; []; (_, Msg) -&amp;gt; [Msg] end&lt;/code&gt; と同等のコールバックです。 （_、Msg）-&amp;gt; [Msg] end。</target>
        </trans-unit>
        <trans-unit id="b8d5b9882df46cf953f258565ab460a21016ddc5" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;monitor&lt;/code&gt; is not supported by &lt;code&gt;spawn_opt/5&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;monitor&lt;/code&gt; は &lt;code&gt;spawn_opt/5&lt;/code&gt; でサポートされていません。</target>
        </trans-unit>
        <trans-unit id="058fcf7970e7469cb0bc642aad1ff0a1a179cc45" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;multicast_ttl&lt;/code&gt; changes the time-to-live (TTL) for outgoing multicast datagrams to control the scope of the multicasts.</source>
          <target state="translated">オプション &lt;code&gt;multicast_ttl&lt;/code&gt; は、マルチキャストのスコープを制御するために、発信マルチキャストデータグラムの存続時間（TTL）を変更します。</target>
        </trans-unit>
        <trans-unit id="369ac162beffd61017f1f26b4498fc999c7935c0" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;packet&lt;/code&gt; determines how/if an incoming message is packaged into a diameter_packet record. If &lt;code&gt;false&lt;/code&gt; then messages are received as binary(). If &lt;code&gt;true&lt;/code&gt; then as a record with the binary() message in the &lt;code&gt;bin&lt;/code&gt; field and a &lt;code&gt;{stream, Id}&lt;/code&gt; tuple in the &lt;code&gt;transport_data&lt;/code&gt; field, where &lt;code&gt;Id&lt;/code&gt; is the identifier of the inbound stream the message was received on. If &lt;code&gt;raw&lt;/code&gt; then as a record with the received ancillary sctp_sndrcvinfo record in the &lt;code&gt;transport_data&lt;/code&gt; field. Defaults to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;packet&lt;/code&gt; は、着信メッセージがdiameter_packetレコードにパッケージ化される方法/かどうかを決定します。 &lt;code&gt;false&lt;/code&gt; の場合、メッセージはbinary（）として受信されます。 &lt;code&gt;true&lt;/code&gt; の場合、 &lt;code&gt;bin&lt;/code&gt; フィールドにbinary（）メッセージがあり、 &lt;code&gt;transport_data&lt;/code&gt; フィールドに &lt;code&gt;{stream, Id}&lt;/code&gt; タプルがあるレコードとして &lt;code&gt;Id&lt;/code&gt; は、メッセージが受信されたインバウンドストリームの識別子です。 &lt;code&gt;raw&lt;/code&gt; の場合、 &lt;code&gt;transport_data&lt;/code&gt; フィールドに受信した補助的なsctp_sndrcvinfoレコードを持つレコードとして。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0baa94c523937f7abe156cc0676d6a21aa0601f3" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;pending_driver&lt;/code&gt; is of little use, but is present for completeness, as it is well defined which reload options that can give rise to which delays. However, it can be a good idea to use the same &lt;code&gt;MonitorOption&lt;/code&gt; as the &lt;code&gt;ReloadOption&lt;/code&gt;, if present.</source>
          <target state="translated">オプション &lt;code&gt;pending_driver&lt;/code&gt; はほとんど役に立ちませんが、どのリロードオプションがどの遅延を引き起こす可能性があるかが明確に定義されているため、完全を期すために存在しています。しかし、同じ使用することをお勧めすることができ &lt;code&gt;MonitorOption&lt;/code&gt; 通り &lt;code&gt;ReloadOption&lt;/code&gt; 存在する場合、。</target>
        </trans-unit>
        <trans-unit id="f5cff995931880f38d32793bedddc8696fd39abc" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;persistent&lt;/code&gt; can be set to &lt;code&gt;true&lt;/code&gt; to guarantee that parameters set with &lt;code&gt;set_env/4&lt;/code&gt; are not overridden by those defined in the application resource file on load. This means that persistent values will stick after the application is loaded and also on application reload.</source>
          <target state="translated">オプション &lt;code&gt;persistent&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定して、 &lt;code&gt;set_env/4&lt;/code&gt; で設定されたパラメーターが、ロード時にアプリケーションリソースファイルで定義されたパラメーターによって上書きされないようにすることができます。これは、アプリケーションが読み込まれた後、およびアプリケーションの再読み込み時に永続的な値が残ることを意味します。</target>
        </trans-unit>
        <trans-unit id="9c0c34736e937a0d6bddb3baef2d644165d26b6e" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;progress&lt;/code&gt; is intended to be used by applications that want to create some type of progress report, such as a progress bar in a GUI. Default for the progress option is &lt;code&gt;ignore&lt;/code&gt;, that is, the option is not used. When the progress option is specified, the following happens when &lt;code&gt;ftp:send/[3,4]&lt;/code&gt; or &lt;code&gt;ftp:recv/[3,4]&lt;/code&gt; are called:</source>
          <target state="translated">オプション &lt;code&gt;progress&lt;/code&gt; は、GUIのプログレスバーなど、ある種のプログレスレポートを作成するアプリケーションで使用することを目的としています。progressオプションのデフォルトは &lt;code&gt;ignore&lt;/code&gt; です。つまり、このオプションは使用されません。progressオプションが指定されている場合、 &lt;code&gt;ftp:send/[3,4]&lt;/code&gt; または &lt;code&gt;ftp:recv/[3,4]&lt;/code&gt; が呼び出されると、次のようになります。</target>
        </trans-unit>
        <trans-unit id="121fc2ac086a7c8d8d3e29d994b8f84bb924c24b" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;read_concurrency&lt;/code&gt; can be combined with option &lt;code&gt;&lt;a href=&quot;#new_2_write_concurrency&quot;&gt;write_concurrency&lt;/a&gt;&lt;/code&gt;. You typically want to combine these when large concurrent read bursts and large concurrent write bursts are common.</source>
          <target state="translated">オプション &lt;code&gt;read_concurrency&lt;/code&gt; は、オプション &lt;code&gt;&lt;a href=&quot;#new_2_write_concurrency&quot;&gt;write_concurrency&lt;/a&gt;&lt;/code&gt; と組み合わせることができます。大規模な同時読み取りバーストと大規模な同時書き込みバーストが一般的である場合は、通常これらを組み合わせます。</target>
        </trans-unit>
        <trans-unit id="ce25f3241dc3da9e62005bbb6632271b6187acc5" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;repair&lt;/code&gt; is ignored if the table is already open.</source>
          <target state="translated">テーブルが既に開いている場合、オプションの &lt;code&gt;repair&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="cebc9a26a2692e09f8edba6efb06adb14bf3202b" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;report_errors&lt;/code&gt; adds the possibility that an error tuple is returned. The tuple either indicates a matching error (&lt;code&gt;match_limit&lt;/code&gt; or &lt;code&gt;match_limit_recursion&lt;/code&gt;), or a compilation error, where the error tuple has the format &lt;code&gt;{error, {compile, CompileErr}}&lt;/code&gt;. Notice that if option &lt;code&gt;report_errors&lt;/code&gt; is not specified, the function never returns error tuples, but reports compilation errors as a &lt;code&gt;badarg&lt;/code&gt; exception and failed matches because of exceeded match limits simply as &lt;code&gt;nomatch&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;report_errors&lt;/code&gt; は、エラータプルが返される可能性を追加します。タプルは、一致エラー（ &lt;code&gt;match_limit&lt;/code&gt; または &lt;code&gt;match_limit_recursion&lt;/code&gt; ）またはコンパイルエラーを示します。エラータプルの形式は &lt;code&gt;{error, {compile, CompileErr}}&lt;/code&gt; です。オプション &lt;code&gt;report_errors&lt;/code&gt; が指定されていない場合、関数はエラータプルを返すことはありませんが、コンパイルエラーを &lt;code&gt;badarg&lt;/code&gt; 例外として報告し、一致制限を超えたために一致が失敗したことを単に &lt;code&gt;nomatch&lt;/code&gt; として報告します。</target>
        </trans-unit>
        <trans-unit id="4fc492ec1e8bbd2f982156bf23c1f5fcad8e8282" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;sender&lt;/code&gt; specifies whether or not to use a dedicated process for sending outgoing messages, which avoids the possibility of send blocking reception. Defaults to &lt;code&gt;false&lt;/code&gt;. If set to &lt;code&gt;true&lt;/code&gt; then a &lt;code&gt;message_cb&lt;/code&gt; that avoids the possibility of messages being queued in the sender process without bound should be configured.</source>
          <target state="translated">オプション &lt;code&gt;sender&lt;/code&gt; は、送信メッセージの送信に専用プロセスを使用するかどうかを指定します。これにより、送信ブロッキング受信の可能性が回避されます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。 &lt;code&gt;true&lt;/code&gt; に設定した場合、メッセージがバインドされずに送信側プロセスのキューに入れられる可能性を回避する &lt;code&gt;message_cb&lt;/code&gt; を構成する必要があります。</target>
        </trans-unit>
        <trans-unit id="50b59aee750b8ace41d580c775edcd5cf8326a92" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;ssl_options&lt;/code&gt; must be specified for a transport that should support TLS: a value of &lt;code&gt;true&lt;/code&gt; results in a TLS handshake immediately upon connection establishment while &lt;code&gt;list()&lt;/code&gt; specifies options to be passed to &lt;code&gt;ssl:connect/2&lt;/code&gt; or &lt;code&gt;ssl:ssl_accept/2&lt;/code&gt; after capabilities exchange if TLS is negotiated.</source>
          <target state="translated">TLSをサポートする必要があるトランスポートにはオプション &lt;code&gt;ssl_options&lt;/code&gt; を指定する必要があります。値が &lt;code&gt;true&lt;/code&gt; の場合、接続の確立直後にTLSハンドシェイクが発生しますが、 &lt;code&gt;list()&lt;/code&gt; は機能交換後に &lt;code&gt;ssl:connect/2&lt;/code&gt; または &lt;code&gt;ssl:ssl_accept/2&lt;/code&gt; に渡されるオプションを指定しますTLSがネゴシエートされた場合。</target>
        </trans-unit>
        <trans-unit id="eb0b2c00845747ebfd6a57dac944c8489e34fe1d" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;timeout&lt;/code&gt; (milliseconds) is used when setting up the SSH connection and when waiting for the &lt;code&gt;hello&lt;/code&gt; message from the server. It is not used for any other purposes during the lifetime of the connection.</source>
          <target state="translated">オプションの &lt;code&gt;timeout&lt;/code&gt; （ミリ秒）は、SSH接続をセットアップするとき、およびサーバーからの &lt;code&gt;hello&lt;/code&gt; メッセージを待機するときに使用されます。接続の存続期間中は、他の目的には使用されません。</target>
        </trans-unit>
        <trans-unit id="afc7cede7fbac62c14c694ddc0b6eec6bf4a0ae3" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;timeout&lt;/code&gt; (milliseconds) is used when setting up the SSH connection. It is not used for any other purposes during the lifetime of the connection.</source>
          <target state="translated">オプションの &lt;code&gt;timeout&lt;/code&gt; （ミリ秒）は、SSH接続のセットアップ時に使用されます。接続の存続期間中は、他の目的には使用されません。</target>
        </trans-unit>
        <trans-unit id="33648c8e4866da798d09c425a4d8d5d74a5e0058" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;timeout&lt;/code&gt; specifies how long the client must wait for prompt. If the time expires, the function returns &lt;code&gt;{error,timeout}&lt;/code&gt;. For information about the default value for the command timeout, see the &lt;code&gt;&lt;a href=&quot;#Default_values&quot;&gt;list of default values&lt;/a&gt;&lt;/code&gt; in the beginning of this module.</source>
          <target state="translated">オプションの &lt;code&gt;timeout&lt;/code&gt; は、クライアントがプロンプトを待つ時間を指定します。時間切れになると、関数は &lt;code&gt;{error,timeout}&lt;/code&gt; 返します。コマンドタイムアウト &lt;code&gt;&lt;a href=&quot;#Default_values&quot;&gt;list of default values&lt;/a&gt;&lt;/code&gt; は、このモジュールの冒頭にあるデフォルト値のリストを参照してください。</target>
        </trans-unit>
        <trans-unit id="9c0719ab2fd2367d9658fdeb70a32aaa618f2e49" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;unicode&lt;/code&gt; is an alias for &lt;code&gt;utf8&lt;/code&gt;, as this is the preferred encoding for Unicode characters in binaries. &lt;code&gt;utf16&lt;/code&gt; is an alias for &lt;code&gt;{utf16,big}&lt;/code&gt; and &lt;code&gt;utf32&lt;/code&gt; is an alias for &lt;code&gt;{utf32,big}&lt;/code&gt;. The atoms &lt;code&gt;big&lt;/code&gt; and &lt;code&gt;little&lt;/code&gt; denote big- or little-endian encoding.</source>
          <target state="translated">オプション &lt;code&gt;unicode&lt;/code&gt; は &lt;code&gt;utf8&lt;/code&gt; のエイリアスです。これは、バイナリのUnicode文字の優先エンコーディングであるためです。 &lt;code&gt;utf16&lt;/code&gt; は &lt;code&gt;{utf16,big}&lt;/code&gt; のエイリアスで、 &lt;code&gt;utf32&lt;/code&gt; は &lt;code&gt;{utf32,big}&lt;/code&gt; エイリアスです。アトム &lt;code&gt;big&lt;/code&gt; と &lt;code&gt;little&lt;/code&gt; は、ビッグエンディアンまたはリトルエンディアンのエンコーディングを示します。</target>
        </trans-unit>
        <trans-unit id="dd54ba2652e6caa2fdc53e186c7711e64ef49755" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;unordered&lt;/code&gt; specifies whether or not to use unordered delivery, integer &lt;code&gt;N&lt;/code&gt; being equivalent to &lt;code&gt;N =&amp;lt; OS&lt;/code&gt;, where &lt;code&gt;OS&lt;/code&gt; is the number of outbound streams negotiated on the association in question. Regardless of configuration, sending is ordered on stream 0 until reception of a second incoming message, to ensure that a peer receives capabilities exchange messages before any other. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;unordered&lt;/code&gt; は、順不同配信を使用するかどうかを指定します。整数 &lt;code&gt;N&lt;/code&gt; は &lt;code&gt;N =&amp;lt; OS&lt;/code&gt; と同等です。ここで、 &lt;code&gt;OS&lt;/code&gt; は問題の関連付けでネゴシエートされた送信ストリームの数です。設定に関係なく、2番目の着信メッセージを受信するまでストリーム0で送信が順序付けされ、ピアが他のどの機能よりも先に機能交換メッセージを受信できるようにします。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9437b2aaf317ba6723d7637ccb49bca377c204e5" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;variables&lt;/code&gt; can be used to specify an installation directory other than &lt;code&gt;$ROOT/lib&lt;/code&gt; for some of the applications. If a variable &lt;code&gt;{VarName,Prefix}&lt;/code&gt; is specified and an application is found in a directory &lt;code&gt;Prefix/Rest/App[-Vsn]/ebin&lt;/code&gt;, this application gets the path &lt;code&gt;VarName/Rest/App-Vsn/ebin&lt;/code&gt; in the boot script. If an application is found in a directory &lt;code&gt;Prefix/Rest&lt;/code&gt;, the path is &lt;code&gt;VarName/Rest/App-Vsn/ebin&lt;/code&gt;. When starting Erlang, all variables &lt;code&gt;VarName&lt;/code&gt; are given values using command-line flag &lt;code&gt;boot_var&lt;/code&gt;.</source>
          <target state="translated">一部のアプリケーションでは、オプション &lt;code&gt;variables&lt;/code&gt; を使用して、 &lt;code&gt;$ROOT/lib&lt;/code&gt; 以外のインストールディレクトリを指定できます。変数 &lt;code&gt;{VarName,Prefix}&lt;/code&gt; が指定されていて、アプリケーションが &lt;code&gt;Prefix/Rest/App[-Vsn]/ebin&lt;/code&gt; 場合、このアプリケーションはブートスクリプトでパス &lt;code&gt;VarName/Rest/App-Vsn/ebin&lt;/code&gt; を取得します。アプリケーションが &lt;code&gt;Prefix/Rest&lt;/code&gt; ディレクトリにある場合、パスは &lt;code&gt;VarName/Rest/App-Vsn/ebin&lt;/code&gt; です。 Erlangを起動すると、すべての変数 &lt;code&gt;VarName&lt;/code&gt; にコマンドラインフラグ &lt;code&gt;boot_var&lt;/code&gt; を使用して値が与えられます。</target>
        </trans-unit>
        <trans-unit id="3fe4cb46f323a7c472497777738ff73ebf76a2c2" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;variables&lt;/code&gt; can be used to specify an installation directory other than &lt;code&gt;lib&lt;/code&gt; for some of the applications. If variable &lt;code&gt;{VarName,Prefix}&lt;/code&gt; is specified and an application is found in directory &lt;code&gt;Prefix/Rest/App[-Vsn]/ebin&lt;/code&gt;, this application is packed into a separate &lt;code&gt;VarName.tar.gz&lt;/code&gt; file as &lt;code&gt;Rest/App-Vsn/ebin&lt;/code&gt;.</source>
          <target state="translated">一部のアプリケーションでは、オプション &lt;code&gt;variables&lt;/code&gt; を使用して &lt;code&gt;lib&lt;/code&gt; 以外のインストールディレクトリを指定できます。変数 &lt;code&gt;{VarName,Prefix}&lt;/code&gt; が指定されていて、アプリケーションが &lt;code&gt;Prefix/Rest/App[-Vsn]/ebin&lt;/code&gt; 場合、このアプリケーションは &lt;code&gt;Rest/App-Vsn/ebin&lt;/code&gt; として個別の &lt;code&gt;VarName.tar.gz&lt;/code&gt; ファイルにパックされます。</target>
        </trans-unit>
        <trans-unit id="a5d38b5eca75c6ce7a8a86d89951c54beea09b28" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;verbose&lt;/code&gt; (or rather &lt;code&gt;{verbose,true}&lt;/code&gt;) causes diagnostics printout through &lt;code&gt;io:format/2&lt;/code&gt; of queries, replies retransmissions, and so on, similar to from utilities, such as &lt;code&gt;dig&lt;/code&gt; and &lt;code&gt;nslookup&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;verbose&lt;/code&gt; （または &lt;code&gt;{verbose,true}&lt;/code&gt; ）を使用すると、 &lt;code&gt;dig&lt;/code&gt; や &lt;code&gt;nslookup&lt;/code&gt; などのユーティリティと同様に、クエリの &lt;code&gt;io:format/2&lt;/code&gt; 、応答の再送信などを介して診断が出力されます。</target>
        </trans-unit>
        <trans-unit id="3a9444c4853f083de328fc1ee9ccc9ae214b7bd7" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;verbose&lt;/code&gt; can be added to get information about the generated files:</source>
          <target state="translated">オプションの &lt;code&gt;verbose&lt;/code&gt; を追加して、生成されたファイルに関する情報を取得できます。</target>
        </trans-unit>
        <trans-unit id="72dc8b34cd621366e301671b30bbc40e7b1100a0" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;write_concurrency&lt;/code&gt; can be combined with option &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt;read_concurrency&lt;/a&gt;&lt;/code&gt;. You typically want to combine these when large concurrent read bursts and large concurrent write bursts are common; for more information, see option &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt;read_concurrency&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;write_concurrency&lt;/code&gt; は、オプション &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt;read_concurrency&lt;/a&gt;&lt;/code&gt; と組み合わせることができます。大規模な同時読み取りバーストと大規模な同時書き込みバーストが一般的である場合は、通常これらを組み合わせます。詳細については、オプション &lt;code&gt;&lt;a href=&quot;#new_2_read_concurrency&quot;&gt;read_concurrency&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9a9faea62aad9078a0a76ca4af9ddb6c33c84d32" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt; can be used to cache the answers to a QLC. The answers are stored in one ETS table for each cached QLC. When a cached QLC is evaluated again, answers are fetched from the table without any further computations. Therefore, when all answers to a cached QLC have been found, the ETS tables used for caching answers to the qualifiers of the QLC can be emptied. Option &lt;code&gt;cache&lt;/code&gt; is equivalent to &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt; を使用して、QLCへの回答をキャッシュできます。回答は、キャッシュされたQLCごとに1つのETSテーブルに保存されます。キャッシュされたQLCが再度評価されると、それ以上の計算を行わずにテーブルから回答がフェッチされます。したがって、キャッシュされたQLCに対するすべての回答が見つかった場合、QLCの修飾子に対する回答をキャッシュするために使用されるETSテーブルを空にすることができます。オプション &lt;code&gt;cache&lt;/code&gt; は、 &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="f0b3ecf3fceaf01bc2ca34bef8c3c517c967e629" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; can be used to cache the answers to a QLC like &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt;. The difference is that the answers are kept in a list (on the process heap). If the answers would occupy more than a certain amount of RAM memory, a temporary file is used for storing the answers. Option &lt;code&gt;max_list_size&lt;/code&gt; sets the limit in bytes and the temporary file is put on the directory set by option &lt;code&gt;tmpdir&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; を使用して、 &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt; ようなQLCへの回答をキャッシュできます。違いは、回答がリスト（プロセスヒープ上）に保持されることです。回答が一定量以上のRAMメモリを占有する場合は、一時ファイルを使用して回答を保存します。オプション &lt;code&gt;max_list_size&lt;/code&gt; は制限をバイト単位で設定し、一時ファイルはオプション &lt;code&gt;tmpdir&lt;/code&gt; で設定されたディレクトリに配置されます。</target>
        </trans-unit>
        <trans-unit id="c363b0b99cf0b9f17d626eea478292453b3a04e0" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; offers the possibility to store the answers in a list on the process heap. This has the potential of being faster than ETS tables, as there is no need to copy answers from the table. However, it can often result in slower evaluation because of more garbage collections of the process heap and increased RAM memory consumption because of larger heaps. Another drawback with cache lists is that if the list size exceeds a limit, a temporary file is used. Reading the answers from a file is much slower than copying them from an ETS table. But if the available RAM memory is scarce, setting the &lt;code&gt;&lt;a href=&quot;#max_list_size&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; to some low value is an alternative.</source>
          <target state="translated">オプション &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; は、回答をプロセスヒープのリストに格納する可能性を提供します。テーブルから回答をコピーする必要がないため、これはETSテーブルよりも高速になる可能性があります。ただし、多くの場合、プロセスヒープのガベージコレクションが多いために評価が遅くなり、ヒープが大きいためにRAMメモリ消費が増加します。キャッシュリストのもう1つの欠点は、リストのサイズが制限を超えると、一時ファイルが使用されることです。ファイルからの回答の読み取りは、ETSテーブルからの回答のコピーよりもはるかに遅くなります。ただし、使用可能なRAMメモリが不足している場合は、 &lt;code&gt;&lt;a href=&quot;#max_list_size&quot;&gt;limit&lt;/a&gt;&lt;/code&gt; を低い値に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="78277a7753947f4b67c1f00cd1efea245ef61134" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{exit_on_close, false}&lt;/code&gt; is useful if the peer has done a shutdown on the write side.</source>
          <target state="translated">オプション &lt;code&gt;{exit_on_close, false}&lt;/code&gt; は、ピアが書き込み側でシャットダウンを行った場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="06b017310b210415f4e3f5ffc5d41bfadc6c3b12" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{join,&amp;nbsp;Join}&lt;/code&gt; can be used to ensure that a certain join method is used:</source>
          <target state="translated">オプション &lt;code&gt;{join,&amp;nbsp;Join}&lt;/code&gt; を使用すると、特定の結合方法が確実に使用されます。</target>
        </trans-unit>
        <trans-unit id="30fedae2cf205df5ff8623315cf8962b5f1bff95" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{lookup,&amp;nbsp;true}&lt;/code&gt; can be used to ensure that the &lt;code&gt;qlc&lt;/code&gt; module looks up constants in some QLC table. If there are more than one QLC table among the list expressions of the generators, constants must be looked up in at least one of the tables. The evaluation of the query fails if there are no constants to look up. This option is useful when it would be unacceptable to traverse all objects in some table. Setting option &lt;code&gt;lookup&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; ensures that no constants are looked up (&lt;code&gt;{max_lookup,&amp;nbsp;0}&lt;/code&gt; has the same effect). Defaults to &lt;code&gt;any&lt;/code&gt;, which means that constants are looked up whenever possible.</source>
          <target state="translated">オプション &lt;code&gt;{lookup,&amp;nbsp;true}&lt;/code&gt; を使用すると、 &lt;code&gt;qlc&lt;/code&gt; モジュールが一部のQLCテーブルで定数を確実に検索できます。ジェネレーターのリスト式の中に複数のQLCテーブルがある場合、少なくとも1つのテーブルで定数を検索する必要があります。検索する定数がない場合、クエリの評価は失敗します。このオプションは、テーブル内のすべてのオブジェクトをトラバースすることが許容できない場合に役立ちます。オプションの &lt;code&gt;lookup&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定すると、定数が検索されなくなります（ &lt;code&gt;{max_lookup,&amp;nbsp;0}&lt;/code&gt; でも同じ効果があります）。デフォルトは &lt;code&gt;any&lt;/code&gt; です。つまり、可能な限り定数が検索されます。</target>
        </trans-unit>
        <trans-unit id="e9c6fcc69606cfd5e227d68821d1d1d7a8fea3e4" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{minor_version, Version}&lt;/code&gt; can be used to control some encoding details. This option was introduced in Erlang/OTP R11B-4. The valid values for &lt;code&gt;Version&lt;/code&gt; are:</source>
          <target state="translated">オプション &lt;code&gt;{minor_version, Version}&lt;/code&gt; を使用して、エンコーディングの詳細を制御できます。このオプションはErlang / OTP R11B-4で導入されました。 &lt;code&gt;Version&lt;/code&gt; の有効な値は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fe3131626c8fb97f4a37a0360d9d266a8a597be3" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{minor_version, Version}&lt;/code&gt; specifies how floats are encoded. For a detailed description, see &lt;code&gt;&lt;a href=&quot;#term_to_binary-2&quot;&gt;term_to_binary/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{minor_version, Version}&lt;/code&gt; は、フロートのエンコード方法を指定します。詳細については、 &lt;code&gt;&lt;a href=&quot;#term_to_binary-2&quot;&gt;term_to_binary/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="524c17823f60e5f4fb7f4313f11efaa80a725ce7" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{shell, ShellType}&lt;/code&gt; allows making &lt;code&gt;ttb&lt;/code&gt; operation similar to &lt;code&gt;dbg&lt;/code&gt;. Using &lt;code&gt;{shell, true}&lt;/code&gt; displays all trace messages in the shell before storing them. &lt;code&gt;{shell, only}&lt;/code&gt; additionally disables message storage (making the tool to behave exactly like &lt;code&gt;dbg&lt;/code&gt;). This is allowed only with IP trace ports (&lt;code&gt;{trace, {local, File}}&lt;/code&gt;).</source>
          <target state="translated">オプション &lt;code&gt;{shell, ShellType}&lt;/code&gt; 使用すると、 &lt;code&gt;ttb&lt;/code&gt; 操作を &lt;code&gt;dbg&lt;/code&gt; と同様にすることができます。 &lt;code&gt;{shell, true}&lt;/code&gt; を使用すると、すべてのトレースメッセージが保存される前にシェルに表示されます。 &lt;code&gt;{shell, only}&lt;/code&gt; さらにメッセージストレージを無効にします（ツールを &lt;code&gt;dbg&lt;/code&gt; とまったく同じように動作させます）。これは、IPトレースポート（ &lt;code&gt;{trace, {local, File}}&lt;/code&gt; ）でのみ許可されます。</target>
        </trans-unit>
        <trans-unit id="ef42e9a1232f5a9ba117da4d9479739de508ecd1" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{unique,&amp;nbsp;true}&lt;/code&gt; can be used to remove duplicate answers to a QLC. The unique answers are stored in one ETS table for each QLC. The table is emptied every time it is known that there are no more answers to the QLC. Option &lt;code&gt;unique&lt;/code&gt; is equivalent to &lt;code&gt;{unique,&amp;nbsp;true}&lt;/code&gt;. If option &lt;code&gt;unique&lt;/code&gt; is combined with option &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt;, two ETS tables are used, but the full answers are stored in one table only. If option &lt;code&gt;unique&lt;/code&gt; is combined with option &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt;, the answers are sorted twice using &lt;code&gt;&lt;a href=&quot;#keysort-3&quot;&gt;keysort/3&lt;/a&gt;&lt;/code&gt;; once to remove duplicates and once to restore the order.</source>
          <target state="translated">オプション &lt;code&gt;{unique,&amp;nbsp;true}&lt;/code&gt; を使用して、QLCに対する重複した回答を削除できます。一意の回答は、QLCごとに1つのETSテーブルに保存されます。 QLCに対する回答がこれ以上ないことが判明するたびに、テーブルは空になります。オプション &lt;code&gt;unique&lt;/code&gt; は &lt;code&gt;{unique,&amp;nbsp;true}&lt;/code&gt; と同等です。オプション &lt;code&gt;unique&lt;/code&gt; をオプション &lt;code&gt;{cache,&amp;nbsp;ets}&lt;/code&gt; と組み合わせると、2つのETSテーブルが使用されますが、完全な回答は1つのテーブルにのみ格納されます。オプション &lt;code&gt;unique&lt;/code&gt; をオプション &lt;code&gt;{cache,&amp;nbsp;list}&lt;/code&gt; と組み合わせると、回答は &lt;code&gt;&lt;a href=&quot;#keysort-3&quot;&gt;keysort/3&lt;/a&gt;&lt;/code&gt; を使用して2回ソートされます。 1回は重複を削除し、1回は順序を復元します。</target>
        </trans-unit>
        <trans-unit id="d03fe843ff69bab217c2db04a4de76a5997a0834" translate="yes" xml:space="preserve">
          <source>Option &lt;code&gt;{var_tar,VarTar}&lt;/code&gt; can be used to specify if and where a separate package is to be stored. In this option &lt;code&gt;VarTar&lt;/code&gt; is one of the following:</source>
          <target state="translated">オプション &lt;code&gt;{var_tar,VarTar}&lt;/code&gt; を使用して、個別のパッケージを保存するかどうか、どこに保存するかを指定できます。このオプションでは、 &lt;code&gt;VarTar&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="035817bcba72e336831559d60aeb6facccf9b64f" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Close&lt;/strong&gt; executes &lt;code&gt;erlang:port_close/1&lt;/code&gt; on the port under the mouse pointer.</source>
          <target state="translated">オプション&lt;strong&gt;Close&lt;/strong&gt;は、マウスポインターの下のポートで &lt;code&gt;erlang:port_close/1&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="35e926c6fbc3d99b909d12d014b384bd4c783eb2" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Kill process&lt;/strong&gt; brutally kills the processes under the mouse pointer by sending an exit signal with reason &lt;code&gt;kill&lt;/code&gt;.</source>
          <target state="translated">オプション&lt;strong&gt;Killプロセス&lt;/strong&gt;は、理由 &lt;code&gt;kill&lt;/code&gt; で終了信号を送信することにより、マウスポインターの下の&lt;strong&gt;プロセスを&lt;/strong&gt;残酷に強制終了します。</target>
        </trans-unit>
        <trans-unit id="70321865963caf3c8ea1efe0081cc07fb0b639e6" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Port info&lt;/strong&gt; opens a detailed information window for the port under the mouse pointer. In addition to the information above, it also shows links and monitors.</source>
          <target state="translated">Option &lt;strong&gt;Port info&lt;/strong&gt;は、マウスポインターの下にあるポートの詳細情報ウィンドウを開きます。上記の情報に加えて、リンクとモニターも表示されます。</target>
        </trans-unit>
        <trans-unit id="7d65b0f04dbfd40d29f90c9cb3594f974e725b28" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Process info&lt;/strong&gt; opens a detailed information window on the process under the mouse pointer, including the following:</source>
          <target state="translated">オプション&lt;strong&gt;プロセス情報&lt;/strong&gt;は、マウスポインターの下のプロセスに関する詳細情報ウィンドウを開きます。</target>
        </trans-unit>
        <trans-unit id="99160977b4d7a39a2a6e97003b66bdad996bc6ed" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Trace selected ports by name&lt;/strong&gt; adds the registered name of the port to tab &lt;strong&gt;Trace Overview&lt;/strong&gt;. This can be useful when tracing is done on many nodes, as ports with that name are then traced on all traced nodes.</source>
          <target state="translated">オプション&lt;strong&gt;選択したポートを名前でトレースする&lt;/strong&gt;と、ポートの登録名が[ &lt;strong&gt;トレースの概要&lt;/strong&gt; ]タブに追加&lt;strong&gt;されます&lt;/strong&gt;。これは、多くのノードでトレースが行われる場合に役立ちます。その名前のポートは、トレースされたすべてのノードでトレースされるためです。</target>
        </trans-unit>
        <trans-unit id="2b6c236e8cdc6b5cda5c55b97f093a7e3cd6785f" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Trace selected ports&lt;/strong&gt; adds the selected port identifiers, and the nodes that the ports reside on, to tab &lt;strong&gt;Trace Overview&lt;/strong&gt;.</source>
          <target state="translated">Option &lt;strong&gt;Trace selected ports&lt;/strong&gt;は、選択されたポート識別子、およびポートが存在するノードを[ &lt;strong&gt;Trace Overview&lt;/strong&gt; ]タブに追加します。</target>
        </trans-unit>
        <trans-unit id="ac9ff1921b3900c17896467fd0d99ce466117b8b" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Trace selected processes by name&lt;/strong&gt; adds the registered name of the processes. This can be useful when tracing is done on many nodes, as processes with that name are then traced on all traced nodes.</source>
          <target state="translated">オプション&lt;strong&gt;選択したプロセスを名前でトレースする&lt;/strong&gt;と、プロセスの登録名が追加&lt;strong&gt;され&lt;/strong&gt;ます。これは、その名前のプロセスがすべてのトレースされたノードでトレースされるため、トレースが多くのノードで行われる場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="5f5a98945509d3374dcec511a2237bb11d72c5e8" translate="yes" xml:space="preserve">
          <source>Option &lt;strong&gt;Trace selected processes&lt;/strong&gt; adds the selected process identifiers to tab &lt;strong&gt;Trace Overview&lt;/strong&gt; plus the node that the processes reside on.</source>
          <target state="translated">オプション&lt;strong&gt;選択したプロセス&lt;/strong&gt;を&lt;strong&gt;トレース&lt;/strong&gt;すると、選択したプロセス識別子が[ &lt;strong&gt;トレースの概要&lt;/strong&gt; ]タブに加えて、プロセスが存在するノードに追加されます。</target>
        </trans-unit>
        <trans-unit id="bbcdc0d51603836feb28f7c0f6ebeff6083e909a" translate="yes" xml:space="preserve">
          <source>Option can be an empty list. Otherwise, see possible &lt;strong&gt;POSIX&lt;/strong&gt; names in Section 8 in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt; RFC 4254&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプションは空のリストにすることができます。それ以外の場合は、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4254.txt&quot;&gt; RFC 4254&lt;/a&gt;&lt;/code&gt; のセクション8で可能な&lt;strong&gt;POSIX&lt;/strong&gt;名を参照してください。</target>
        </trans-unit>
        <trans-unit id="ed343dc73ff17a12eae43c4c8abcaf085a15af89" translate="yes" xml:space="preserve">
          <source>Option description:</source>
          <target state="translated">説明オプション。</target>
        </trans-unit>
        <trans-unit id="842a1436ee68919d09edec512df7b86300e0f790" translate="yes" xml:space="preserve">
          <source>Option for the request to be synchronous or asynchronous.</source>
          <target state="translated">リクエストを同期または非同期にするためのオプション。</target>
        </trans-unit>
        <trans-unit id="1293048f15d31bf84b0b730a9b1782f9b01e778a" translate="yes" xml:space="preserve">
          <source>Option list, required but not used.</source>
          <target state="translated">オプションリスト、必須ですが使用しません。</target>
        </trans-unit>
        <trans-unit id="462548ed78075584c1554197ff33d7cd930b932f" translate="yes" xml:space="preserve">
          <source>Option passed to &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt;. Has one of the following types.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; に渡されるオプション。次のいずれかのタイプです。</target>
        </trans-unit>
        <trans-unit id="23707ebafb992d8dfae9b58a9ba61d8c8fd2c70a" translate="yes" xml:space="preserve">
          <source>Option passed to &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt;. Can be any &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#capability&quot;&gt;capability()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; as well as the following.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; に渡されるオプション。次のように、任意の &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#capability&quot;&gt;capability()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; ことができます。</target>
        </trans-unit>
        <trans-unit id="0c6c4102d4dfec3b1aa41117e0e344046c58a151" translate="yes" xml:space="preserve">
          <source>Optional</source>
          <target state="translated">Optional</target>
        </trans-unit>
        <trans-unit id="4d4b2106cdcb3604717e69731f6481a51f9daa36" translate="yes" xml:space="preserve">
          <source>Optional Header Elements</source>
          <target state="translated">オプションのヘッダー要素</target>
        </trans-unit>
        <trans-unit id="dfbb34787505eab01012f74ede55769d7b2752c8" translate="yes" xml:space="preserve">
          <source>Optional argument &lt;code id=&quot;hook_function&quot;&gt;HookFunction&lt;/code&gt;, shown in the functions described in this module, defines a function that is called when an unknown form occurs where there is to be a valid expression. If &lt;code&gt;HookFunction&lt;/code&gt; is equal to &lt;code&gt;none&lt;/code&gt;, there is no hook function.</source>
          <target state="translated">このモジュールで説明されている関数に示されているオプションの引数 &lt;code id=&quot;hook_function&quot;&gt;HookFunction&lt;/code&gt; は、有効な式がある場所で不明なフォームが発生したときに呼び出される関数を定義します。 &lt;code&gt;HookFunction&lt;/code&gt; が &lt;code&gt;none&lt;/code&gt; に等しい場合、フック関数はありません。</target>
        </trans-unit>
        <trans-unit id="276de84647d247405111dca217abe17bdd0364d3" translate="yes" xml:space="preserve">
          <source>Optional argument &lt;code&gt;NumberOfAnswers&lt;/code&gt; determines the maximum number of answers returned. Defaults to &lt;code&gt;10&lt;/code&gt;. If less than the requested number of answers is returned, subsequent calls to &lt;code&gt;next_answers&lt;/code&gt; return &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">オプションの引数 &lt;code&gt;NumberOfAnswers&lt;/code&gt; は、返される回答の最大数を決定します。デフォルトは &lt;code&gt;10&lt;/code&gt; です。要求された数より少ない回答が返された場合、それ以降の &lt;code&gt;next_answers&lt;/code&gt; の呼び出しは &lt;code&gt;[]&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8e155301399a6f11bab8a0f03e661dc264bf4113" translate="yes" xml:space="preserve">
          <source>Optional argument &lt;code&gt;Timeout&lt;/code&gt; specifies a time-out in milliseconds. The default value is &lt;code&gt;infinity&lt;/code&gt;.</source>
          <target state="translated">オプション引数 &lt;code&gt;Timeout&lt;/code&gt; は、タイムアウトをミリ秒単位で指定します。デフォルト値は &lt;code&gt;infinity&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cc160da129ae196cb0bc016f6e6b2dc9018a93f1" translate="yes" xml:space="preserve">
          <source>Optional disc. The schema can reside on disc or in RAM. If the schema is found on disc, Mnesia starts as a disc-based node and the storage type of the schema table is &lt;code&gt;disc_copies&lt;/code&gt;. If no schema is found on disc, Mnesia starts as a disc-less node and the storage type of the schema table is &lt;code&gt;ram_copies&lt;/code&gt;. Default value for the application parameter is &lt;code&gt;opt_disc&lt;/code&gt;.</source>
          <target state="translated">オプションのディスク。スキーマはディスクまたはRAMに常駐できます。スキーマがディスクにある場合、Mnesiaはディスクベースのノードとして起動し、スキーマテーブルのストレージタイプは &lt;code&gt;disc_copies&lt;/code&gt; です。ディスクにスキーマが見つからない場合、Mnesiaはディスクのないノードとして起動し、スキーマテーブルのストレージタイプは &lt;code&gt;ram_copies&lt;/code&gt; です。アプリケーションパラメータのデフォルト値は &lt;code&gt;opt_disc&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="08766916e383f04d3e4dd8436f435e4ff78d676e" translate="yes" xml:space="preserve">
          <source>Optional disc. The schema can reside on either disc or RAM. If the schema is found on disc, &lt;code&gt;Mnesia&lt;/code&gt; starts as a disc-full node (the storage type of the schema table is disc_copies). If no schema is found on disc, &lt;code&gt;Mnesia&lt;/code&gt; starts as a disc-less node (the storage type of the schema table is &lt;code&gt;ram_copies&lt;/code&gt;). The default for the application parameter is &lt;code&gt;opt_disc&lt;/code&gt;.</source>
          <target state="translated">オプションのディスク。スキーマは、ディスクまたはRAMに常駐できます。スキーマがディスクにある場合、 &lt;code&gt;Mnesia&lt;/code&gt; はディスクフルノードとして開始します（スキーマテーブルのストレージタイプはdisc_copiesです）。ディスクにスキーマが見つからない場合、 &lt;code&gt;Mnesia&lt;/code&gt; はディスクなしのノードとして開始します（スキーマテーブルのストレージタイプは &lt;code&gt;ram_copies&lt;/code&gt; です）。アプリケーションパラメータのデフォルトは &lt;code&gt;opt_disc&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="85dd2f62ecb3fc58781f23223662bb5750bb8b07" translate="yes" xml:space="preserve">
          <source>Optional fields are to be omitted from the map if they have no value:</source>
          <target state="translated">オプションのフィールドは、値がない場合はマップから省略されます。</target>
        </trans-unit>
        <trans-unit id="f7ff2e1b639664116012253b69978817d7cb9d18" translate="yes" xml:space="preserve">
          <source>Optional parameter that indicates which stream of event is of interest. If not present, events in the default NETCONF stream are sent.</source>
          <target state="translated">どのイベントのストリームに関心があるかを示すオプションのパラメータです。存在しない場合、デフォルトの NETCONF ストリームのイベントが送信されます。</target>
        </trans-unit>
        <trans-unit id="9f20bc591a797de16d0e389435598756b6d01a90" translate="yes" xml:space="preserve">
          <source>Optional parameter that indicates which subset of all possible events is of interest. The parameter format is the same as that of the filter parameter in the NETCONF protocol operations. If not present, all events not precluded by other parameters are sent.</source>
          <target state="translated">すべての可能なイベントのうち、どのサブセットに関心があるかを示すオプションのパラメータです。パラメータの形式は、NETCONF プロトコル操作の filter パラメータと同じです。存在しない場合、他のパラメータによって除外されていないすべてのイベントが送信されます。</target>
        </trans-unit>
        <trans-unit id="91c8bbcc154e216bf161a4cea2cf2921f55e3375" translate="yes" xml:space="preserve">
          <source>Optional parameter used to trigger the replay feature and indicate that the replay is to start at the time specified. If &lt;code&gt;StartTime&lt;/code&gt; is not present, this is not a replay subscription.</source>
          <target state="translated">リプレイ機能をトリガーし、指定した時間にリプレイを開始することを示すために使用されるオプションのパラメーター。場合 &lt;code&gt;StartTime&lt;/code&gt; 存在しない場合、これはリプレイサブスクリプションではありません。</target>
        </trans-unit>
        <trans-unit id="3b62c08c67213d147aac035093ce60b242c49707" translate="yes" xml:space="preserve">
          <source>Optional parameter used with the optional replay feature to indicate the newest notifications of interest. If &lt;code&gt;StopTime&lt;/code&gt; is not present, the notifications continues until the subscription is terminated.</source>
          <target state="translated">関心のある最新の通知を示すためにオプションの再生機能で使用されるオプションのパラメーター。 &lt;code&gt;StopTime&lt;/code&gt; が存在しない場合、サブスクリプションが終了するまで通知が継続します。</target>
        </trans-unit>
        <trans-unit id="a4149a55fc8e55fc8490190fca6fd327f9a538b3" translate="yes" xml:space="preserve">
          <source>Optional.</source>
          <target state="translated">Optional.</target>
        </trans-unit>
        <trans-unit id="e8af255ca8f0d30288a7d242bda54e97c39eddd8" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;&quot;&quot;&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;&quot;&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c3e770d9ae3be1592b6bb4e71a2a0b4d02b632c8" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;&quot;agentEngine&quot;&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;&quot;agentEngine&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f444f3a32fb5864a64535a82d40b191fe3d8f92a" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;&quot;ct_test&quot;&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;&quot;ct_test&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d86ff1cf1753eeb2712d25027e36b3bfeeb878b3" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;&quot;mgrEngine&quot;&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;&quot;mgrEngine&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3a5be38a4ec672fa5fc505b1d3938e2c4805690c" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;4000&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;4000&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3d818395035fabb022c90708c6cc84ee8b4b5af1" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;484&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;484&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eb016daeda5d1c2dc4395fae5d7f67d4983388a1" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;5000&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;5000&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a91274ea47ca456c7c73bd65eabdba098688b45e" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;[v2]&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;[v2]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9145bb534991daf57f7701301bbf91899e9dd502" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c1862eeb7c8ff53d3ad48a0810e5755cdc2bd4c3" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;localhost&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;localhost&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="56e30788f63a5934b2591e0b2064ad81f73c70ba" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;none&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="50d0a6ed5f07cbf3535d40a94c01a427fc76812c" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;trap&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;trap&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="81e97dcaaa41ca3300b210af9cb347aabd6782bc" translate="yes" xml:space="preserve">
          <source>Optional. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">オプション。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e7a5e868b1b2f32a86b5bd642dcb3afd6a406ab2" translate="yes" xml:space="preserve">
          <source>Optional. SNMPv3 only.</source>
          <target state="translated">オプションです。SNMPv3のみ。</target>
        </trans-unit>
        <trans-unit id="e29d2e9b1f6270c8f759be9d98bdcc632686ece6" translate="yes" xml:space="preserve">
          <source>Optional. Specifies a file name relative to the release directory (that is, the subdirectory of &amp;lt;release root&amp;gt; where the &lt;code&gt;.boot&lt;/code&gt; file and others are located). The contents of this file is appended to the command line when Erlang is started. This makes it easy to start the emulator with different options for different releases.</source>
          <target state="translated">オプション。リリースディレクトリ（つまり、 &lt;code&gt;.boot&lt;/code&gt; ファイルなどが配置されている&amp;lt;リリースルート&amp;gt;のサブディレクトリ）に関連するファイル名を指定します。このファイルの内容は、Erlangの起動時にコマンドラインに追加されます。これにより、リリースごとに異なるオプションでエミュレータを簡単に起動できます。</target>
        </trans-unit>
        <trans-unit id="2b0c96e71650acccc82db9e27a628d2721580904" translate="yes" xml:space="preserve">
          <source>Optional. Specifies another data file than &lt;code&gt;start_erl.data&lt;/code&gt; in the &amp;lt;release root&amp;gt;. It is specified relative to the &amp;lt;release root&amp;gt; or absolute (including drive letter, and so on). This option is used by the release handler during upgrade and is not to be used during normal operation. Normally the release data file is not to be named differently.</source>
          <target state="translated">オプション。&amp;lt;リリースルート&amp;gt;の &lt;code&gt;start_erl.data&lt;/code&gt; 以外のデータファイルを指定します。&amp;lt;リリースルート&amp;gt;または絶対パス（ドライブ文字などを含む）を基準に指定されます。このオプションは、アップグレード中にリリースハンドラーによって使用され、通常の操作中には使用されません。通常、リリースデータファイルは別の名前にする必要はありません。</target>
        </trans-unit>
        <trans-unit id="6e896a68b07b1ca3cf93595378b5e6e78183b5ae" translate="yes" xml:space="preserve">
          <source>Optional. Specifies what &lt;code&gt;start_erl.data&lt;/code&gt; file to use.</source>
          <target state="translated">オプション。使用する &lt;code&gt;start_erl.data&lt;/code&gt; ファイルを指定します。</target>
        </trans-unit>
        <trans-unit id="8dfb648c156e19ccfde0a8a75080225f82a66290" translate="yes" xml:space="preserve">
          <source>Optional: a list of</source>
          <target state="translated">オプション:リスト</target>
        </trans-unit>
        <trans-unit id="40298ed5ccf236464308dd175b962b82475a2522" translate="yes" xml:space="preserve">
          <source>Optional: one or more</source>
          <target state="translated">オプション:1つ以上</target>
        </trans-unit>
        <trans-unit id="c38ca1d794e5db4040d672952825698f938f1b2b" translate="yes" xml:space="preserve">
          <source>Optionally an associated condition. A condition is a tuple &lt;code&gt;{Module,Name}&lt;/code&gt;. When the breakpoint is reached, &lt;code&gt;Module:Name(Bindings)&lt;/code&gt; is called. If it evaluates to &lt;code&gt;true&lt;/code&gt;, execution stops. If it evaluates to &lt;code&gt;false&lt;/code&gt;, the breakpoint is ignored. &lt;code&gt;Bindings&lt;/code&gt; contains the current variable bindings. To retrieve the value for a specified variable, use &lt;code&gt;get_binding&lt;/code&gt;.</source>
          <target state="translated">オプションで、関連する条件。条件はタプル &lt;code&gt;{Module,Name}&lt;/code&gt; です。ブレークポイントに到達すると、 &lt;code&gt;Module:Name(Bindings)&lt;/code&gt; が呼び出されます。 &lt;code&gt;true&lt;/code&gt; と評価された場合、実行は停止します。 &lt;code&gt;false&lt;/code&gt; と評価された場合、ブレークポイントは無視されます。 &lt;code&gt;Bindings&lt;/code&gt; には、現在の変数バインディングが含まれています。指定した変数の値を取得するには、 &lt;code&gt;get_binding&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="8a4282aaa4b303055b863e5204685bc1397a847f" translate="yes" xml:space="preserve">
          <source>Optionally invoked for a time consuming transaction request</source>
          <target state="translated">オプションで、時間のかかるトランザクション要求のために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c6c8e1e5181e25bac7195f77b91e7ea903739f23" translate="yes" xml:space="preserve">
          <source>Optionally invoked for a transaction acknowledgement</source>
          <target state="translated">オプションでトランザクション確認のために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a5f2278c7ee5f9556ced2e826a1b917355402ad3" translate="yes" xml:space="preserve">
          <source>Optionally invoked for a transaction reply</source>
          <target state="translated">オプションでトランザクション応答のために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="da6a3730bb2085f8ebf92b6273cda1787e65e75e" translate="yes" xml:space="preserve">
          <source>Optionally specifies how captured substrings are to be returned. If omitted, the default of &lt;code&gt;index&lt;/code&gt; is used.</source>
          <target state="translated">オプションで、キャプチャされた部分文字列を返す方法を指定します。省略した場合、デフォルトの &lt;code&gt;index&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="6bf5da9c080bee3a8142586c412aa39971137eee" translate="yes" xml:space="preserve">
          <source>Options</source>
          <target state="translated">Options</target>
        </trans-unit>
        <trans-unit id="9749013cefa7f03d17b664b15412b1588b737407" translate="yes" xml:space="preserve">
          <source>Options (&lt;code&gt;Opt&lt;/code&gt;s):</source>
          <target state="translated">オプション（ &lt;code&gt;Opt&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="2a71724fb98cff6a19705fe029e03eebb720115b" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;-P&lt;/code&gt;, &lt;code&gt;-E&lt;/code&gt;, and &lt;code&gt;-S&lt;/code&gt; are equivalent to &lt;code&gt;+'P'&lt;/code&gt;, &lt;code&gt;+'E'&lt;/code&gt;, and &lt;code&gt;+'S'&lt;/code&gt;, except that it is not necessary to include the single quotes to protect them from the shell.</source>
          <target state="translated">オプション &lt;code&gt;-P&lt;/code&gt; 、 &lt;code&gt;-E&lt;/code&gt; 、および &lt;code&gt;-S&lt;/code&gt; は、シェルから保護するために一重引用符を含める必要がないことを除いて、 &lt;code&gt;+'P'&lt;/code&gt; 、 &lt;code&gt;+'E'&lt;/code&gt; 、および &lt;code&gt;+'S'&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="e0366a9ebac5c17541c6d26640b461361c80a4a4" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;Username&lt;/code&gt; and &lt;code&gt;Password&lt;/code&gt; are used to log on to the remote host &lt;code&gt;Host&lt;/code&gt;. &lt;code&gt;Username&lt;/code&gt;, if omitted, defaults to the current username. &lt;code&gt;Password&lt;/code&gt; is empty by default.</source>
          <target state="translated">オプションの &lt;code&gt;Username&lt;/code&gt; と &lt;code&gt;Password&lt;/code&gt; は、リモートホスト &lt;code&gt;Host&lt;/code&gt; へのログオンに使用されます。 &lt;code&gt;Username&lt;/code&gt; を省略すると、デフォルトで現在のユーザー名になります。 &lt;code&gt;Password&lt;/code&gt; はデフォルトでは空です。</target>
        </trans-unit>
        <trans-unit id="9dcd58b0792b2c9e9c3b6819e8f16b982914d604" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;binary&lt;/code&gt; and &lt;code&gt;encoding&lt;/code&gt; are common for all I/O servers in OTP, while &lt;code&gt;echo&lt;/code&gt; and &lt;code&gt;expand&lt;/code&gt; are valid only for this I/O server. Option &lt;code&gt;unicode&lt;/code&gt; notifies how characters are put on the physical I/O device, that is, if the terminal itself is Unicode-aware. It does not affect how characters are sent in the I/O protocol, where each request contains encoding information for the provided or returned data.</source>
          <target state="translated">オプションの &lt;code&gt;binary&lt;/code&gt; と &lt;code&gt;encoding&lt;/code&gt; はOTPのすべてのI / Oサーバーに共通ですが、 &lt;code&gt;echo&lt;/code&gt; と &lt;code&gt;expand&lt;/code&gt; はこのI / Oサーバーにのみ有効です。オプション &lt;code&gt;unicode&lt;/code&gt; は、物理I / Oデバイスに文字がどのように配置されるか、つまり、端末自体がUnicodeに対応しているかどうかを通知します。I / Oプロトコルでの文字の送信方法には影響しません。各リクエストには、提供または返されたデータのエンコード情報が含まれます。</target>
        </trans-unit>
        <trans-unit id="8ff02c5f14ce17a7d5799eee0ac8c1ea2bf12c76" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;cache&lt;/code&gt; and &lt;code&gt;unique&lt;/code&gt; apply not only to the QLC itself but also to the results of looking up constants, running match specifications, and joining handles.</source>
          <target state="translated">オプションの &lt;code&gt;cache&lt;/code&gt; と &lt;code&gt;unique&lt;/code&gt; は、QLC自体だけでなく、定数の検索、一致指定の実行、およびハンドルの結合の結果にも適用されます。</target>
        </trans-unit>
        <trans-unit id="9580f262070eeecb51ff008fdc6585d927dbc1f8" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;global&lt;/code&gt; and &lt;code&gt;{scope, part()}&lt;/code&gt; work as for &lt;code&gt;&lt;a href=&quot;#split-3&quot;&gt;split/3&lt;/a&gt;&lt;/code&gt;. The return type is always a &lt;code&gt;binary()&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;global&lt;/code&gt; および &lt;code&gt;{scope, part()}&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#split-3&quot;&gt;split/3&lt;/a&gt;&lt;/code&gt; と同様に機能します。戻り値の型は常に &lt;code&gt;binary()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="51c09aef080d57e48a07185acafc8ce6ebec94f6" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;message_cb&lt;/code&gt; and &lt;code&gt;sender&lt;/code&gt; have semantics identical to those documented in &lt;code&gt;&lt;a href=&quot;diameter_tcp#sender&quot;&gt;diameter_tcp(3)&lt;/a&gt;&lt;/code&gt;, but with the message argument to a &lt;code&gt;recv&lt;/code&gt; callback being as directed by the &lt;code&gt;packet&lt;/code&gt; option.</source>
          <target state="translated">オプション &lt;code&gt;message_cb&lt;/code&gt; および &lt;code&gt;sender&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;diameter_tcp#sender&quot;&gt;diameter_tcp(3)&lt;/a&gt;&lt;/code&gt; に記載されているものと同じセマンティクスを持っていますが、 &lt;code&gt;recv&lt;/code&gt; コールバックへのメッセージ引数は、 &lt;code&gt;packet&lt;/code&gt; オプションによって指示されたとおりです。</target>
        </trans-unit>
        <trans-unit id="e61d32b3cca20de20d192710649075d0fa3c950e" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;raddr&lt;/code&gt; and &lt;code&gt;rport&lt;/code&gt; specify the remote address and port for a connecting transport and are not valid for a listening transport.</source>
          <target state="translated">オプション &lt;code&gt;raddr&lt;/code&gt; および &lt;code&gt;rport&lt;/code&gt; は、接続トランスポートのリモートアドレスとポートを指定し、リスニングトランスポートには無効です。</target>
        </trans-unit>
        <trans-unit id="d9f19d6b068a72ffa150ad3783e561ce5a572f10" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;raddr&lt;/code&gt; and &lt;code&gt;rport&lt;/code&gt; specify the remote address and port for a connecting transport and not valid for a listening transport: the former is required while latter defaults to 3868 if unspecified. Multiple &lt;code&gt;raddr&lt;/code&gt; options can be specified, in which case the connecting transport in question attempts each in sequence until an association is established.</source>
          <target state="translated">オプション &lt;code&gt;raddr&lt;/code&gt; と &lt;code&gt;rport&lt;/code&gt; は、接続トランスポートのリモートアドレスとポートを指定し、リスニングトランスポートには無効です。前者は必須ですが、指定しない場合、後者はデフォルトで3868になります。複数の &lt;code&gt;raddr&lt;/code&gt; オプションを指定できます。この場合、問題の接続トランスポートは、関連付けが確立されるまで、順番に試行します。</target>
        </trans-unit>
        <trans-unit id="ffb596bacd291beb9c0f85faa25b79b4527311a4" translate="yes" xml:space="preserve">
          <source>Options &lt;code&gt;repeat&lt;/code&gt; and &lt;code&gt;sequence&lt;/code&gt; can be combined to match a sequence multiple times.</source>
          <target state="translated">オプション &lt;code&gt;repeat&lt;/code&gt; と &lt;code&gt;sequence&lt;/code&gt; を組み合わせて、シーケンスを複数回一致させることができます。</target>
        </trans-unit>
        <trans-unit id="e81a184b61cbd5436906125ea2fd1369abbf5985" translate="yes" xml:space="preserve">
          <source>Options allow to customize the behaviour of the scanner. See also &lt;code&gt;tutorial&lt;/code&gt; on customization functions.</source>
          <target state="translated">オプションにより、スキャナーの動作をカスタマイズできます。カスタマイズ機能の &lt;code&gt;tutorial&lt;/code&gt; もご覧ください。</target>
        </trans-unit>
        <trans-unit id="d1df937b910b748dfde76ee563a39943f8c8982a" translate="yes" xml:space="preserve">
          <source>Options allow to customize the behaviour of the validation.</source>
          <target state="translated">オプションで検証の動作をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="2d2339a2a5eabae774a416fb2e29a52c85a83319" translate="yes" xml:space="preserve">
          <source>Options allows to customize the behaviour of the XPath scanner.</source>
          <target state="translated">オプションでXPathスキャナの動作をカスタマイズすることができます。</target>
        </trans-unit>
        <trans-unit id="5ffa2c48bad8b2b21cb7fd3c0cdc61a21bc9b14c" translate="yes" xml:space="preserve">
          <source>Options are processed in the order they occur in the list, that is, later options have higher precedence.</source>
          <target state="translated">オプ シ ョ ンは、 リ ス ト 内で出現 し た順に処理 さ れます。</target>
        </trans-unit>
        <trans-unit id="5257320eb8c67ae70e398e048755a4a432e71e80" translate="yes" xml:space="preserve">
          <source>Options available to &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; when sending an outgoing Diameter request. Has one of the following types.</source>
          <target state="translated">発信Diameterリクエストを送信するときに &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; で使用できるオプション。次のいずれかのタイプです。</target>
        </trans-unit>
        <trans-unit id="43baa3cfdab8fbfb50fe057ed27dea4648766c66" translate="yes" xml:space="preserve">
          <source>Options can be set to make the release package include source code and the ERTS binary as well.</source>
          <target state="translated">オプションは、リリースパッケージにソースコードとERTSバイナリを含めるように設定することができます。</target>
        </trans-unit>
        <trans-unit id="19f6806cc859d20b910b98cdb91856f7d205c282" translate="yes" xml:space="preserve">
          <source>Options defining a Diameter application. Has one of the following types.</source>
          <target state="translated">Diameter アプリケーションを定義するオプション。以下のいずれかのタイプを持っています。</target>
        </trans-unit>
        <trans-unit id="85fa7bc47c34fb7d169b6cba28b8680c98650d6d" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;&lt;a href=&quot;#cmd-2&quot;&gt;os:cmd/2&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#cmd-2&quot;&gt;os:cmd/2&lt;/a&gt;&lt;/code&gt; のオプション</target>
        </trans-unit>
        <trans-unit id="c747f7830167fa762f894dbecb9703a094daa7ee" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;clients&lt;/a&gt;&lt;/code&gt;. The individual options are further explained below or by following the hyperlinks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;clients&lt;/a&gt;&lt;/code&gt; オプション。個々のオプションについては、以下でさらに説明するか、ハイパーリンクをたどって説明します。</target>
        </trans-unit>
        <trans-unit id="7a1ffff775190d7efc280e2ad290e1f4ea5665b9" translate="yes" xml:space="preserve">
          <source>Options for &lt;code&gt;&lt;a href=&quot;#daemon-1&quot;&gt;daemons&lt;/a&gt;&lt;/code&gt;. The individual options are further explained below or by following the hyperlinks.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#daemon-1&quot;&gt;daemons&lt;/a&gt;&lt;/code&gt; オプション。個々のオプションについては、以下でさらに説明するか、ハイパーリンクをたどって説明します。</target>
        </trans-unit>
        <trans-unit id="eb4d9d68b8a4bdc7b530015f01b070a24bbaaaae" translate="yes" xml:space="preserve">
          <source>Options for ROOT, Intermediate and Peer certs</source>
          <target state="translated">ROOT、中級、ピアサートのオプション</target>
        </trans-unit>
        <trans-unit id="271cee05e17a96561b06a7392bd67ac3d4ab26c5" translate="yes" xml:space="preserve">
          <source>Options in the environment variable EUNIT are also included last in the option list, i.e., have lower precedence than those in &lt;code&gt;Options&lt;/code&gt;.</source>
          <target state="translated">環境変数EUNITのオプションもオプションリストの最後に含まれます。つまり、 &lt;code&gt;Options&lt;/code&gt; よりも優先順位が低くなります。</target>
        </trans-unit>
        <trans-unit id="2d595c0adb932691342148a1f5ccb473e844d862" translate="yes" xml:space="preserve">
          <source>Options passed to &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt; when spawning a process for an incoming Diameter request. Options &lt;code&gt;monitor&lt;/code&gt; and &lt;code&gt;link&lt;/code&gt; are ignored.</source>
          <target state="translated">着信Diameterリクエストのプロセスを生成するときに &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt; に渡されるオプション。オプションの &lt;code&gt;monitor&lt;/code&gt; と &lt;code&gt;link&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="fb6adb442fc6700a7d845b5b6f08d580352873cb" translate="yes" xml:space="preserve">
          <source>Options preceding &lt;code&gt;-erl_args&lt;/code&gt; that &lt;code&gt;Common Test&lt;/code&gt; does not recognize are also passed on to the emulator untouched. By &lt;code&gt;-erl_args&lt;/code&gt; the user can specify flags with the same name, but with different destinations, on the &lt;code&gt;ct_run&lt;/code&gt; command line.</source>
          <target state="translated">前のオプション &lt;code&gt;-erl_args&lt;/code&gt; という &lt;code&gt;Common Test&lt;/code&gt; もそのままエミュレータに渡されます認識しませんが。 &lt;code&gt;-erl_args&lt;/code&gt; ユーザーが上で、同じ名前のフラグを指定するが、異なる宛先を持つことができ &lt;code&gt;ct_run&lt;/code&gt; のコマンドライン。</target>
        </trans-unit>
        <trans-unit id="ff1becd31ec7dd72ea26d9a9fd1b56a0ae87b96b" translate="yes" xml:space="preserve">
          <source>Options provided to &lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/[3,4]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh#connect-3&quot;&gt;ssh:connect/[3,4]&lt;/a&gt;&lt;/code&gt; に提供されるオプション。</target>
        </trans-unit>
        <trans-unit id="be2f1fd15114f1dab339629da4d391e98859a026" translate="yes" xml:space="preserve">
          <source>Options provided to &lt;code&gt;&lt;a href=&quot;ssh#daemon-2&quot;&gt;ssh:daemon/2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh#daemon-2&quot;&gt;ssh:daemon/2,3&lt;/a&gt;&lt;/code&gt; に提供されるオプション。</target>
        </trans-unit>
        <trans-unit id="34209f6f492a2966caf548e5cb61a33749ede09a" translate="yes" xml:space="preserve">
          <source>Options that can be given to the &lt;code&gt;cth_conn_log&lt;/code&gt; hook, which is used for logging of NETCONF and Telnet connections. See &lt;code&gt;&lt;a href=&quot;ct_netconfc#Logging&quot;&gt;ct_netconfc&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ct_telnet#Logging&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; for description and examples of how to use this hook.</source>
          <target state="translated">NETCONFおよびTelnet接続のロギングに使用される &lt;code&gt;cth_conn_log&lt;/code&gt; フックに指定できるオプション。このフックの使用方法の説明と例については、 &lt;code&gt;&lt;a href=&quot;ct_netconfc#Logging&quot;&gt;ct_netconfc&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;ct_telnet#Logging&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="228dffd69b4e3c0e126c643a9f0b0e320c2b02c8" translate="yes" xml:space="preserve">
          <source>Options that can be used when starting a &lt;code&gt;gen_statem&lt;/code&gt; server through, for example, &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">たとえば、 &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3&lt;/a&gt;&lt;/code&gt; を介して &lt;code&gt;gen_statem&lt;/code&gt; サーバーを起動するときに使用できるオプション。</target>
        </trans-unit>
        <trans-unit id="d6e5101586b632aaf8a368594dc5123cd9322755" translate="yes" xml:space="preserve">
          <source>Options to configure a &lt;code&gt;ErlNifIOQueue&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ErlNifIOQueue&lt;/code&gt; を構成するオプション。</target>
        </trans-unit>
        <trans-unit id="23d20f728be4aacef3be89090ba5883ef7e28da2" translate="yes" xml:space="preserve">
          <source>Options used for setting up an SSH connection to a NETCONF server.</source>
          <target state="translated">NETCONF サーバへの SSH 接続を設定する際に使用するオプションです。</target>
        </trans-unit>
        <trans-unit id="910207f354e542f3e522ad9da85b70501659257e" translate="yes" xml:space="preserve">
          <source>Options used to customize the behaviour of the parser. Possible options are:</source>
          <target state="translated">パーサーの動作をカスタマイズするためのオプションです。使用可能なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="bdd0b506837a990803d8edf137f2934329835748" translate="yes" xml:space="preserve">
          <source>Options:</source>
          <target state="translated">Options:</target>
        </trans-unit>
        <trans-unit id="6d118f8e941d56db78406a33fb3a53aed05d43fb" translate="yes" xml:space="preserve">
          <source>Options: see &lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file/2&lt;/a&gt;&lt;/code&gt;. Note however that for &lt;code&gt;quick_parse_file/2&lt;/code&gt;, the option &lt;code&gt;no_fail&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; by default.</source>
          <target state="translated">オプション： &lt;code&gt;&lt;a href=&quot;#parse_file-2&quot;&gt;parse_file/2&lt;/a&gt;&lt;/code&gt; を参照してください。ただし、 &lt;code&gt;quick_parse_file/2&lt;/code&gt; の場合、オプション &lt;code&gt;no_fail&lt;/code&gt; はデフォルトで &lt;code&gt;true&lt;/code&gt; であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b12501090de711d45f4f134407e2f3085fb7dedb" translate="yes" xml:space="preserve">
          <source>Opts :: [&lt;code&gt;&lt;a href=&quot;#type-debug_opt&quot;&gt;debug_opt()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-hibernate_after_opt&quot;&gt;hibernate_after_opt()&lt;/a&gt;&lt;/code&gt;],</source>
          <target state="translated">オプション:: [ &lt;code&gt;&lt;a href=&quot;#type-debug_opt&quot;&gt;debug_opt()&lt;/a&gt;&lt;/code&gt; | &lt;code&gt;&lt;a href=&quot;#type-hibernate_after_opt&quot;&gt;hibernate_after_opt()&lt;/a&gt;&lt;/code&gt; ]、</target>
        </trans-unit>
        <trans-unit id="9ef1aeb0b64bab0b8696b0aebb6c7bffc58deff9" translate="yes" xml:space="preserve">
          <source>Opts :: [&lt;code&gt;&lt;a href=&quot;#type-start_opt&quot;&gt;start_opt()&lt;/a&gt;&lt;/code&gt;]) -&amp;gt;</source>
          <target state="translated">オプション:: [ &lt;code&gt;&lt;a href=&quot;#type-start_opt&quot;&gt;start_opt()&lt;/a&gt;&lt;/code&gt; ]）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="9ddc3f14766efb56c4d34a9542fe728065e02b6b" translate="yes" xml:space="preserve">
          <source>Or - if building a 64bit version:</source>
          <target state="translated">または-64bit版をビルドする場合。</target>
        </trans-unit>
        <trans-unit id="5326c62b422be5d15a751d74a2dc4fcf60deb938" translate="yes" xml:space="preserve">
          <source>Or calls the following if the process is to terminate:</source>
          <target state="translated">または、プロセスを終了させる場合は以下を呼び出します。</target>
        </trans-unit>
        <trans-unit id="ba69cd0427a638368d97eab4ad9466aab5343d29" translate="yes" xml:space="preserve">
          <source>Or perhaps in combination with constants:</source>
          <target state="translated">定数との組み合わせでも良いかもしれません。</target>
        </trans-unit>
        <trans-unit id="01433e00bc9b318bce7a3cc505bdb311b1e7b75c" translate="yes" xml:space="preserve">
          <source>Or resulting in the next clause being tested in function heads and case expressions.</source>
          <target state="translated">あるいは、次の節が関数ヘッドや大文字小文字の表現でテストされることになります。</target>
        </trans-unit>
        <trans-unit id="0045ed6a97a1146a04c393e163018af002e6d4f9" translate="yes" xml:space="preserve">
          <source>Or what happens if the server goes down in the middle of sending a message, leaving the sending client hanging forever in the &lt;code&gt;await_result&lt;/code&gt; function?</source>
          <target state="translated">または、サーバーがメッセージの送信中にダウンし、送信クライアントが &lt;code&gt;await_result&lt;/code&gt; 関数で永久にハングしたままになるとどうなりますか？</target>
        </trans-unit>
        <trans-unit id="66e4dcf09aeb43d320a42f1b4be9f68e9c1bc539" translate="yes" xml:space="preserve">
          <source>Oracle Java SE JDK -- The Java Development Kit (Standard Edition). Required for building the application &lt;code&gt;jinterface&lt;/code&gt;. At least version 1.6.0 of the JDK is required.</source>
          <target state="translated">Oracle Java SE JDK-Java開発キット（Standard Edition）。アプリケーション &lt;code&gt;jinterface&lt;/code&gt; を構築するために必要です。JDKのバージョン1.6.0以降が必要です。</target>
        </trans-unit>
        <trans-unit id="d2f0ae466f7c5d340f95e5db43c368a9a3b0bc8a" translate="yes" xml:space="preserve">
          <source>Orders &lt;code&gt;Common Test&lt;/code&gt; to repeat execution of the cases in the group a given number of times, or until any, or all, cases fail or succeed.</source>
          <target state="translated">受注 &lt;code&gt;Common Test&lt;/code&gt; グループ内の所定の回数を例実行を繰り返す、または任意の、または全てまで、ケースが失敗するか成功します。</target>
        </trans-unit>
        <trans-unit id="5112607d3f38b5535b071c81b4e3ced527521a31" translate="yes" xml:space="preserve">
          <source>Orders a generic server to exit with the specified &lt;code&gt;Reason&lt;/code&gt; and waits for it to terminate. The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate/2&lt;/a&gt;&lt;/code&gt; before exiting.</source>
          <target state="translated">指定された &lt;code&gt;Reason&lt;/code&gt; 終了するように汎用サーバーに命令し、終了するまで待機します。 &lt;code&gt;gen_server&lt;/code&gt; のプロセスを呼び出す &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate/2&lt;/a&gt;&lt;/code&gt; 終了する前に。</target>
        </trans-unit>
        <trans-unit id="54d7ea1c4f89a8a332559591ee4debf050cee229" translate="yes" xml:space="preserve">
          <source>Orders event manager &lt;code&gt;EventMgrRef&lt;/code&gt; to exit with the specifies &lt;code&gt;Reason&lt;/code&gt; and waits for it to terminate. Before terminating, &lt;code&gt;gen_event&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate(stop,...)&lt;/a&gt;&lt;/code&gt; for each installed event handler.</source>
          <target state="translated">イベントマネージャー &lt;code&gt;EventMgrRef&lt;/code&gt; に、指定された &lt;code&gt;Reason&lt;/code&gt; 終了するように命令し、終了するまで待機します。終了する前に、 &lt;code&gt;gen_event&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate(stop,...)&lt;/a&gt;&lt;/code&gt; インストールされているイベントハンドラごとにModule：terminate（stop、...）を呼び出します。</target>
        </trans-unit>
        <trans-unit id="a3f48e6002fbd3799add791dc0a450399f2f90c2" translate="yes" xml:space="preserve">
          <source>Orders the &lt;code&gt;gen_statem&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;ServerRef&lt;/a&gt;&lt;/code&gt; to exit with the specified &lt;code&gt;Reason&lt;/code&gt; and waits for it to terminate. The &lt;code&gt;gen_statem&lt;/code&gt; calls &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; before exiting.</source>
          <target state="translated">指定された &lt;code&gt;Reason&lt;/code&gt; 終了するように &lt;code&gt;gen_statem&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;ServerRef&lt;/a&gt;&lt;/code&gt; に命令し、それが終了するのを待ちます。 &lt;code&gt;gen_statem&lt;/code&gt; は呼び出す &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; 終了する前に。</target>
        </trans-unit>
        <trans-unit id="21b34b1ca6772cefd2286c0a8bd7c2c47fffae8f" translate="yes" xml:space="preserve">
          <source>Orders the process to exit with the specified &lt;code&gt;Reason&lt;/code&gt; and waits for it to terminate.</source>
          <target state="translated">指定された &lt;code&gt;Reason&lt;/code&gt; でプロセスが終了するように命令し、プロセスが終了するのを待ちます。</target>
        </trans-unit>
        <trans-unit id="a61c180dee133a0d4fb6e99797fd60387a9fa2b3" translate="yes" xml:space="preserve">
          <source>Orders the process to terminate with the specified &lt;code&gt;Reason&lt;/code&gt;. The termination is done asynchronously, so it is not guaranteed that the process is terminated when the function returns.</source>
          <target state="translated">指定された &lt;code&gt;Reason&lt;/code&gt; でプロセスを終了するように命令します。終了は非同期で行われるため、関数が戻ったときにプロセスが終了することは保証されていません。</target>
        </trans-unit>
        <trans-unit id="ccb8dd4b62075b726550209fcb7d0f2adb744793" translate="yes" xml:space="preserve">
          <source>Ordinary characters that must match the next input character.</source>
          <target state="translated">次の入力文字と一致しなければならない普通の文字。</target>
        </trans-unit>
        <trans-unit id="e33058c8aca144db86ea897b7f2317a8d1c1af9d" translate="yes" xml:space="preserve">
          <source>Origin-Host AVP</source>
          <target state="translated">オリジンホストAVP</target>
        </trans-unit>
        <trans-unit id="66ca57643d2d91ab73b0b3763337e2fec53749fc" translate="yes" xml:space="preserve">
          <source>Origin-Realm AVP</source>
          <target state="translated">オリジンリアルムAVP</target>
        </trans-unit>
        <trans-unit id="236ee85d9ea34d47b8bad24ef64b77e613147f6c" translate="yes" xml:space="preserve">
          <source>Origin-State-Id AVP</source>
          <target state="translated">オリジン-ステートID AVP</target>
        </trans-unit>
        <trans-unit id="8a2b322ac24d0d94010349833607bcb6c362fc2e" translate="yes" xml:space="preserve">
          <source>Origin-State-Id is optional but, if configured, will be included in outgoing CER/CEA and DWR/DWA messages. Setting a value of &lt;code&gt;0&lt;/code&gt; (zero) is equivalent to not setting a value, as documented in RFC 6733. The function &lt;code&gt;&lt;a href=&quot;#origin_state_id-0&quot;&gt;origin_state_id/0&lt;/a&gt;&lt;/code&gt; can be used as to retrieve a value that is computed when the diameter application is started.</source>
          <target state="translated">Origin-State-Idはオプションですが、構成されている場合、発信CER / CEAおよびDWR / DWAメッセージに含まれます。値 &lt;code&gt;0&lt;/code&gt; （ゼロ）を設定することは、RFC 6733で文書化されているように、値を設定しないことと同じです。関数 &lt;code&gt;&lt;a href=&quot;#origin_state_id-0&quot;&gt;origin_state_id/0&lt;/a&gt;&lt;/code&gt; を使用して、直径アプリケーションの開始時に計算される値を取得できます。</target>
        </trans-unit>
        <trans-unit id="e2f0776017330240cb474fc09a019aea6a403d19" translate="yes" xml:space="preserve">
          <source>Originating a Request</source>
          <target state="translated">リクエストの作成</target>
        </trans-unit>
        <trans-unit id="c10643b85fbfbd4fbb63e61c52588993e2ffbfa5" translate="yes" xml:space="preserve">
          <source>Oriya</source>
          <target state="translated">Oriya</target>
        </trans-unit>
        <trans-unit id="42cb2600c161bf7bf85310fb50b63266488059bf" translate="yes" xml:space="preserve">
          <source>Osmanya</source>
          <target state="translated">Osmanya</target>
        </trans-unit>
        <trans-unit id="6e6a6f2086bb5fe5dbfd17d8d5f502d48759834b" translate="yes" xml:space="preserve">
          <source>Other</source>
          <target state="translated">Other</target>
        </trans-unit>
        <trans-unit id="e5f5f875b3d15fa11fe3de5896a4e66d7c090218" translate="yes" xml:space="preserve">
          <source>Other (rare) error condition, such as &lt;code&gt;{error, estale}&lt;/code&gt; if reading from an NFS file system.</source>
          <target state="translated">NFSファイルシステムから読み取る場合の &lt;code&gt;{error, estale}&lt;/code&gt; などの他の（まれな）エラー条件。</target>
        </trans-unit>
        <trans-unit id="03965c1e12674420b58d4f32742d1467e2298c0b" translate="yes" xml:space="preserve">
          <source>Other ASN.1 types and values can differ much from these figures. It is therefore important that you, in every case where you intend to use either of these decodes, perform some tests that show if you will benefit your purpose.</source>
          <target state="translated">他のASN.1のタイプや値は、これらの数値とは大きく異なることがあります。したがって、これらのデコードのいずれかを使用しようとする場合には必ず、目的に役立つかどうかを示すいくつかのテストを行うことが重要です。</target>
        </trans-unit>
        <trans-unit id="c1385ef92fd62e1027c2fed35303a7d7f5d9ee0f" translate="yes" xml:space="preserve">
          <source>Other Flags</source>
          <target state="translated">その他の国旗</target>
        </trans-unit>
        <trans-unit id="db5a9e63db2cdafd4d9a58a4d1e203908f440948" translate="yes" xml:space="preserve">
          <source>Other PCRE-specific options can be set by the application when the compiling or matching functions are called. Sometimes the pattern can contain special leading sequences, such as (*CRLF), to override what the application has set or what has been defaulted. Details are provided in section &lt;code&gt;&lt;a href=&quot;#newline_sequences&quot;&gt;Newline Sequences&lt;/a&gt;&lt;/code&gt; earlier.</source>
          <target state="translated">その他のPCRE固有のオプションは、コンパイルまたはマッチング関数が呼び出されたときにアプリケーションで設定できます。場合によっては、パターンに（* CRLF）などの特別な先行シーケンスを含めて、アプリケーションが設定したものやデフォルトの設定をオーバーライドすることができます。詳細は、前のセクション「 &lt;code&gt;&lt;a href=&quot;#newline_sequences&quot;&gt;Newline Sequences&lt;/a&gt;&lt;/code&gt; 提供されています。</target>
        </trans-unit>
        <trans-unit id="d244aac16bfbb22cf74ea0c33f98a68a4cf6d192" translate="yes" xml:space="preserve">
          <source>Other Tools</source>
          <target state="translated">その他のツール</target>
        </trans-unit>
        <trans-unit id="302303d7df48684e7df86411d56b9659af7d97fb" translate="yes" xml:space="preserve">
          <source>Other Unicode encodings than integers representing code points or UTF-8 in binaries are referred to as &quot;external encodings&quot;. The ISO Latin-1 encoding is in binaries and lists referred to as latin1-encoding.</source>
          <target state="translated">バイナリ内のコードポイントを表す整数や UTF-8 以外の Unicode エンコーディングは「外部エンコーディング」と呼ばれています。ISO Latin-1 エンコーディングは、バイナリやリストでは latin1-encoding と呼ばれています。</target>
        </trans-unit>
        <trans-unit id="ed0cea3720246c22c3a30bbc4492b0bc7ca1703c" translate="yes" xml:space="preserve">
          <source>Other addresses are possible, for example Linux implements &quot;Abstract Addresses&quot;. See the documentation for Unix Domain Sockets on your system, normally &lt;code&gt;unix&lt;/code&gt; in manual section 7.</source>
          <target state="translated">他のアドレスも可能です。たとえば、Linuxは「抽象アドレス」を実装しています。システムのUnixドメインソケットのドキュメントを参照してください。通常は、手動セクション7の &lt;code&gt;unix&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dd29435e6c5d5cb295da7f257e1e953a855af66c" translate="yes" xml:space="preserve">
          <source>Other applications like ssl/tls or https might have options that are passed down to the &lt;code&gt;public_key:pkix_verify_hostname&lt;/code&gt;. You will probably not have to call it directly</source>
          <target state="translated">ssl / tlsやhttpsなどの他のアプリケーションには、 &lt;code&gt;public_key:pkix_verify_hostname&lt;/code&gt; に渡されるオプションがある場合があります。おそらく直接呼び出す必要はないでしょう</target>
        </trans-unit>
        <trans-unit id="88b1b43caa29bc1ae4d1876c05734a9c8181e624" translate="yes" xml:space="preserve">
          <source>Other characters represent themselves. Only filenames that have exactly the same character in the same position match. Matching is case-sensitive, for example, &quot;a&quot; does not match &quot;A&quot;.</source>
          <target state="translated">その他の文字は自分自身を表します。同じ位置に全く同じ文字を持つファイル名のみがマッチします。マッチングは大文字と小文字を区別し、例えば &quot;a &quot;は &quot;A &quot;とは一致しません。</target>
        </trans-unit>
        <trans-unit id="14464638b9e33ce4c0d8ac32a7485fa9028da73b" translate="yes" xml:space="preserve">
          <source>Other combinations, such as &lt;code&gt;{Module,'_',Arity}&lt;/code&gt;, are not allowed. Local functions match wildcards only if option &lt;code&gt;local&lt;/code&gt; is in &lt;code&gt;FlagList&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{Module,'_',Arity}&lt;/code&gt; などの他の組み合わせは許可されません。ローカル関数がワイルドカードと一致する &lt;code&gt;local&lt;/code&gt; は、オプションlocalが &lt;code&gt;FlagList&lt;/code&gt; にある場合のみです。</target>
        </trans-unit>
        <trans-unit id="885f57e5d13595e0ee4f423a6b4d92f55b55a565" translate="yes" xml:space="preserve">
          <source>Other configuration parameters exist, to be used for customizing the overload protection behaviour. The same parameters are used both in the standard handler and the disk_log handler, and are documented in the &lt;code&gt;&lt;a href=&quot;logger_chapter#overload_protection&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">過負荷保護の動作をカスタマイズするために使用される他の構成パラメーターが存在します。同じハンドラーが標準ハンドラーとdisk_logハンドラーの両方で使用され、 &lt;code&gt;&lt;a href=&quot;logger_chapter#overload_protection&quot;&gt;User's Guide&lt;/a&gt;&lt;/code&gt; 記載されています。</target>
        </trans-unit>
        <trans-unit id="bd2063ac325b87a9381eab00b4e9d208668c9217" translate="yes" xml:space="preserve">
          <source>Other constants (terms and bound variables), all regarded as false</source>
          <target state="translated">その他の定数(項と結合変数)、すべて偽とみなされます。</target>
        </trans-unit>
        <trans-unit id="c3ac4deb2089a1f649e5fdba0cc491bef7b16555" translate="yes" xml:space="preserve">
          <source>Other directories in the development environment may be needed. If source code from languages other than Erlang is used, for instance C-code for NIFs, that code should be placed in a separate directory. By convention it is recommended to prefix such directories with the language name, for example &lt;code&gt;c_src&lt;/code&gt; for C, &lt;code&gt;java_src&lt;/code&gt; for Java or &lt;code&gt;go_src&lt;/code&gt; for Go. Directories with &lt;code&gt;_src&lt;/code&gt; suffix indicates that it is a part of the application and the compilation step. The final build artifacts should target the &lt;code&gt;priv/lib&lt;/code&gt; or &lt;code&gt;priv/bin&lt;/code&gt; directories.</source>
          <target state="translated">開発環境の他のディレクトリが必要になる場合があります。 Erlang以外の言語からのソースコード、たとえばNIFのCコードを使用する場合、そのコードは別のディレクトリに配置する必要があります。慣例では、例えばのために、言語の名前で、このようなディレクトリの接頭辞することをお勧めします &lt;code&gt;c_src&lt;/code&gt; Cのために、 &lt;code&gt;java_src&lt;/code&gt; Java用または &lt;code&gt;go_src&lt;/code&gt; 行くため。 &lt;code&gt;_src&lt;/code&gt; サフィックスの付いたディレクトリは、それがアプリケーションおよびコンパイル手順の一部であることを示します。最終的なビルドアーティファクトは、 &lt;code&gt;priv/lib&lt;/code&gt; または &lt;code&gt;priv/bin&lt;/code&gt; ディレクトリをターゲットにする必要があります。</target>
        </trans-unit>
        <trans-unit id="ae9077b452914a72240410cfd78d06125441adc8" translate="yes" xml:space="preserve">
          <source>Other errors than these can occur, as the &lt;code&gt;erlang:halt/1&lt;/code&gt; BIF can generate any message. If the message is not generated by the BIF and does not occur in the list above, it can be because of an error in the emulator. There can however be unusual messages, not mentioned here, which are still connected to an application failure. There is much more information available, so a thorough reading of the crash dump can reveal the crash reason. The size of processes, the number of ETS tables, and the Erlang data on each process stack can be useful to find the problem.</source>
          <target state="translated">&lt;code&gt;erlang:halt/1&lt;/code&gt; BIFは任意のメッセージを生成できるため、これら以外のエラーが発生する可能性があります。メッセージがBIFによって生成されず、上記のリストに表示されない場合は、エミュレーターのエラーが原因である可能性があります。ただし、ここでは説明していませんが、アプリケーションの障害にまだ接続されている異常なメッセージが存在する可能性があります。利用可能な情報がはるかに多いため、クラッシュダンプを完全に読むと、クラッシュの理由が明らかになります。プロセスのサイズ、ETSテーブルの数、各プロセススタックのErlangデータは、問題を見つけるのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="b60efd3d69d9ecb24af68e74d348360a07b5ed6b" translate="yes" xml:space="preserve">
          <source>Other features:</source>
          <target state="translated">その他の特徴。</target>
        </trans-unit>
        <trans-unit id="a58b6dc215a18ea443d12708103eda9efd5d5635" translate="yes" xml:space="preserve">
          <source>Other fields are rarely used. For complete information, see &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">他のフィールドはほとんど使用されません。詳細については、 &lt;code&gt;&lt;a href=&quot;http://www.rfc-archive.org/getrfc.php?rfc=2960&quot;&gt;RFC 2960&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://tools.ietf.org/html/draft-ietf-tsvwg-sctpsocket-13&quot;&gt;Sockets API Extensions for SCTP&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="cbd6de3d10f2fc66f49e8c1b345f9c0059ed9ba5" translate="yes" xml:space="preserve">
          <source>Other functions that create sets are &lt;code&gt;&lt;a href=&quot;#from_external-2&quot;&gt;from_external/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#from_sets-1&quot;&gt;from_sets/1&lt;/a&gt;&lt;/code&gt;. Special cases of &lt;code&gt;from_term/2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;#a_function-1&quot;&gt;a_function/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#empty_set-0&quot;&gt;empty_set/0&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#family-1&quot;&gt;family/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#relation-1&quot;&gt;relation/1,2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#set-1&quot;&gt;set/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">セットを作成する他の関数は &lt;code&gt;&lt;a href=&quot;#from_external-2&quot;&gt;from_external/2&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#from_sets-1&quot;&gt;from_sets/1&lt;/a&gt;&lt;/code&gt; です。特別な場合 &lt;code&gt;from_term/2&lt;/code&gt; である &lt;code&gt;&lt;a href=&quot;#a_function-1&quot;&gt;a_function/1,2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#empty_set-0&quot;&gt;empty_set/0&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#family-1&quot;&gt;family/1,2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#relation-1&quot;&gt;relation/1,2&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;&lt;a href=&quot;#set-1&quot;&gt;set/1,2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d8b80772e0f8b1d872444ba18ad7b48f4cc4cfe" translate="yes" xml:space="preserve">
          <source>Other letter</source>
          <target state="translated">その他の手紙</target>
        </trans-unit>
        <trans-unit id="1e25df6c3ebdcf4ee11a121bc16f17e603a8b7df" translate="yes" xml:space="preserve">
          <source>Other match specs activates tracing of calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt; accordingly with &lt;code&gt;erlang:trace_pattern/2&lt;/code&gt;.</source>
          <target state="translated">他の一致仕様では、 &lt;code&gt;erlang:trace_pattern/2&lt;/code&gt; に応じて &lt;code&gt;et:trace_me/4,5&lt;/code&gt; への呼び出しのトレースをアクティブにします。</target>
        </trans-unit>
        <trans-unit id="51ca0c2d75fe6310043838d9fb791594049c226f" translate="yes" xml:space="preserve">
          <source>Other modules can provide a nullary &lt;code&gt;TraverseFun&lt;/code&gt;. An example is &lt;code&gt;gb_table:table/1&lt;/code&gt; in section &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">他のモジュールは、nullary &lt;code&gt;TraverseFun&lt;/code&gt; を提供できます。例は、「 &lt;code&gt;gb_table:table/1&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt; セクションのgb_table：table / 1です。</target>
        </trans-unit>
        <trans-unit id="3022c490a2bd62676beabc0c1b504084140a7de5" translate="yes" xml:space="preserve">
          <source>Other number</source>
          <target state="translated">その他の番号</target>
        </trans-unit>
        <trans-unit id="97bd01729246532af9de85d0c3ab1ddb360d5a4e" translate="yes" xml:space="preserve">
          <source>Other options are:</source>
          <target state="translated">他のオプションは</target>
        </trans-unit>
        <trans-unit id="599ffbd6e95e9102a19874cfc765e0666e6a5f25" translate="yes" xml:space="preserve">
          <source>Other options:</source>
          <target state="translated">その他のオプション</target>
        </trans-unit>
        <trans-unit id="997739492917d646490ffd1fec1419fa6e98b907" translate="yes" xml:space="preserve">
          <source>Other priorities than &lt;code&gt;normal&lt;/code&gt; are normally not needed. When other priorities are used, use them with care, &lt;strong&gt;especially&lt;/strong&gt; priority &lt;code&gt;high&lt;/code&gt;. A process on priority &lt;code&gt;high&lt;/code&gt; is only to perform work for short periods. Busy looping for long periods in a &lt;code&gt;high&lt;/code&gt; priority process causes most likely problems, as important OTP servers run on priority &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;normal&lt;/code&gt; 以外の優先順位は通常必要ありません。他の優先度を使用する場合は、&lt;strong&gt;特に&lt;/strong&gt;優先度が &lt;code&gt;high&lt;/code&gt; 場合は注意して使用してください。優先度が &lt;code&gt;high&lt;/code&gt; プロセスは、短時間の作業のみです。で長時間ビジーループ &lt;code&gt;high&lt;/code&gt; 重要なOTPサーバは優先順位で実行するよう優先度のプロセスは、最も可能性の高い問題が発生し &lt;code&gt;normal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8dea56314c50bfb058a315994e322b37ac05f071" translate="yes" xml:space="preserve">
          <source>Other processes can read the digraph (default).</source>
          <target state="translated">他のプロセスはディグラフを読むことができます(デフォルト)。</target>
        </trans-unit>
        <trans-unit id="20bc18ec4477d52890b4d5aac0d2cbc92eb389a4" translate="yes" xml:space="preserve">
          <source>Other punctuation</source>
          <target state="translated">その他の句読点</target>
        </trans-unit>
        <trans-unit id="ec9bcce7656bc224a64ce97ba2b5bd792aeb6391" translate="yes" xml:space="preserve">
          <source>Other requirements:</source>
          <target state="translated">その他の要件。</target>
        </trans-unit>
        <trans-unit id="e28544fd56893780941b6044efc20d476e8af135" translate="yes" xml:space="preserve">
          <source>Other states do not normally occur in the output from &lt;code&gt;connect/*&lt;/code&gt;. Rather, they can occur in &lt;code&gt;#sctp_assoc_change{}&lt;/code&gt; events received instead of data in &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; calls. All of them indicate losing the association because of various error conditions, and are listed here for the sake of completeness:</source>
          <target state="translated">その他の状態は、通常、 &lt;code&gt;connect/*&lt;/code&gt; からの出力では発生しません。むしろ、 &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv/*&lt;/a&gt;&lt;/code&gt; 呼び出しのデータの代わりに、受信した &lt;code&gt;#sctp_assoc_change{}&lt;/code&gt; イベントで発生する可能性があります。これらはすべて、さまざまなエラー条件のために関連付けが失われたことを示しており、完全を期すためにここにリストされています。</target>
        </trans-unit>
        <trans-unit id="d0a8ec65432412d24f9c042216a5db6173548a99" translate="yes" xml:space="preserve">
          <source>Other symbol</source>
          <target state="translated">その他の記号</target>
        </trans-unit>
        <trans-unit id="577365eaf2b9f85de95baced848e1cc288b22cd3" translate="yes" xml:space="preserve">
          <source>Other table access than reading, such as calling &lt;code&gt;InfoFun&lt;/code&gt;, is assumed to be OK at any time.</source>
          <target state="translated">&lt;code&gt;InfoFun&lt;/code&gt; の呼び出しなど、読み取り以外のテーブルアクセスはいつでも問題ないと想定されます。</target>
        </trans-unit>
        <trans-unit id="24654f0b470cc0982d088fd0b8978733097cbe87" translate="yes" xml:space="preserve">
          <source>Other tuples than the ones defined are ignored.</source>
          <target state="translated">定義されたタプル以外のタプルは無視されます。</target>
        </trans-unit>
        <trans-unit id="15363bfb92322f3fe6ad2718148dd35e33fdb154" translate="yes" xml:space="preserve">
          <source>Other types can be read, and are returned as binaries.</source>
          <target state="translated">その他の型は読み込み可能で、バイナリとして返されます。</target>
        </trans-unit>
        <trans-unit id="cdedf43490cc2ff1da81cd679f5229c3c1cc0879" translate="yes" xml:space="preserve">
          <source>Other types cannot be added or changed.</source>
          <target state="translated">その他のタイプの追加・変更はできません。</target>
        </trans-unit>
        <trans-unit id="70e28792612da22154d851b53e24c945311f74a0" translate="yes" xml:space="preserve">
          <source>Other useful function(s) for debugging the agent are:</source>
          <target state="translated">エージェントをデバッグするための他の有用な関数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="2ebc4c4dd4036621515140929b889184c451a256" translate="yes" xml:space="preserve">
          <source>Other useful information can be found at our GitHub wiki:</source>
          <target state="translated">その他の便利な情報はGitHub wikiにあります。</target>
        </trans-unit>
        <trans-unit id="198dd873fca5b5131fb3a9224056b4006b7b1428" translate="yes" xml:space="preserve">
          <source>Otherwise all options valid for function &lt;code&gt;compile/2&lt;/code&gt; are also allowed. Options allowed both for compilation and execution of a match, namely &lt;code&gt;anchored&lt;/code&gt; and &lt;code&gt;{newline, NLSpec}&lt;/code&gt;, affect both the compilation and execution if present together with a non-precompiled regular expression.</source>
          <target state="translated">それ以外の場合は、関数 &lt;code&gt;compile/2&lt;/code&gt; に有効なすべてのオプションも許可されます。オプションは、両方の試合のコンパイルと実行のために許可され、すなわち &lt;code&gt;anchored&lt;/code&gt; および &lt;code&gt;{newline, NLSpec}&lt;/code&gt; 非コンパイル済み正規表現と一緒に存在する場合は、コンパイルと実行の両方に影響を与えます。</target>
        </trans-unit>
        <trans-unit id="e30cc24dff4a8e4fd3505b91e8729e2519c09a8a" translate="yes" xml:space="preserve">
          <source>Otherwise an &lt;code&gt;undef&lt;/code&gt; exception is raised.</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;undef&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="75ef1eb055dcb5b6ca421038e624721c946bf1b2" translate="yes" xml:space="preserve">
          <source>Otherwise recreates the exported seed and returns the state. See also &lt;code&gt;&lt;a href=&quot;#export_seed-0&quot;&gt;export_seed/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、エクスポートされたシードを再作成し、状態を返します。 &lt;code&gt;&lt;a href=&quot;#export_seed-0&quot;&gt;export_seed/0&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="b75f15a942afae834871232ccf0ba77e7558f01c" translate="yes" xml:space="preserve">
          <source>Otherwise recreates the exported seed in the process dictionary, and returns the state. See also &lt;code&gt;&lt;a href=&quot;#export_seed-0&quot;&gt;export_seed/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、エクスポートされたシードをプロセスディクショナリに再作成し、状態を返します。 &lt;code&gt;&lt;a href=&quot;#export_seed-0&quot;&gt;export_seed/0&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="d87b5659173c759cef0ab46aa4a7fb80d00cb3c5" translate="yes" xml:space="preserve">
          <source>Otherwise the &lt;code&gt;gen_statem&lt;/code&gt; goes into &lt;code&gt;receive&lt;/code&gt; or hibernation (if &lt;code&gt;&lt;a href=&quot;#type-hibernate&quot;&gt;hibernate()&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;) to wait for the next message. In hibernation the next non-system event awakens the &lt;code&gt;gen_statem&lt;/code&gt;, or rather the next incoming message awakens the &lt;code&gt;gen_statem&lt;/code&gt;, but if it is a system event it goes right back into hibernation. When a new message arrives the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; is called with the corresponding event, and we start again from the top of this sequence.</source>
          <target state="translated">そうでない場合、 &lt;code&gt;gen_statem&lt;/code&gt; は &lt;code&gt;receive&lt;/code&gt; または休止状態（ &lt;code&gt;&lt;a href=&quot;#type-hibernate&quot;&gt;hibernate()&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合）に入り、次のメッセージを待ちます。休止状態では、次の非システムイベントが &lt;code&gt;gen_statem&lt;/code&gt; を呼び起こすか、次の着信メッセージが &lt;code&gt;gen_statem&lt;/code&gt; を呼び起こしますが、システムイベントの場合は、休止状態に戻ります。新しいメッセージが到着すると、 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; が対応するイベントで呼び出され、このシーケンスの先頭から再び開始します。</target>
        </trans-unit>
        <trans-unit id="ca5bba34991dc2c836a13ba5d708caac9b079155" translate="yes" xml:space="preserve">
          <source>Otherwise the same as &lt;code&gt;&lt;a href=&quot;#enter_loop-6&quot;&gt;enter_loop/6&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;Server = Server_or_Actions&lt;/code&gt; and &lt;code&gt;Actions = []&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;Server = Server_or_Actions&lt;/code&gt; および &lt;code&gt;Actions = []&lt;/code&gt; 指定した &lt;code&gt;&lt;a href=&quot;#enter_loop-6&quot;&gt;enter_loop/6&lt;/a&gt;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="7a3e409482e92d7312335dbbdf06b6be17b9baa1" translate="yes" xml:space="preserve">
          <source>Otherwise, &lt;code&gt;Name&lt;/code&gt; is to be a filename.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;Name&lt;/code&gt; はファイル名になります。</target>
        </trans-unit>
        <trans-unit id="00aeea6c12722cc94d58e2f90a9872f32740085b" translate="yes" xml:space="preserve">
          <source>Otherwise, end the cluster.</source>
          <target state="translated">そうでなければ、クラスタを終了します。</target>
        </trans-unit>
        <trans-unit id="721932d781d83d618f6a74c5ad3eea7a7cd92826" translate="yes" xml:space="preserve">
          <source>Otherwise, if function &lt;code&gt;'$handle_undefined_function'/2&lt;/code&gt; is exported, it is called as &lt;code&gt;'$handle_undefined_function'(&lt;/code&gt;Function, Args).</source>
          <target state="translated">それ以外の場合、関数 &lt;code&gt;'$handle_undefined_function'/2&lt;/code&gt; がエクスポートされると、 &lt;code&gt;'$handle_undefined_function'(&lt;/code&gt; Function、Args）として呼び出されます。</target>
        </trans-unit>
        <trans-unit id="bd45978f4d37112b76326ff6ee1522682525ecd5" translate="yes" xml:space="preserve">
          <source>Otherwise, if the calling process is trapping exits, and/or &lt;code&gt;PidOrPort&lt;/code&gt; is remote, &lt;code&gt;link/1&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, but an exit signal with reason &lt;code&gt;noproc&lt;/code&gt; is sent to the calling process.</source>
          <target state="translated">それ以外の場合、呼び出しプロセスが出口をトラップしているか、 &lt;code&gt;PidOrPort&lt;/code&gt; がリモートの場合、 &lt;code&gt;link/1&lt;/code&gt; は &lt;code&gt;true&lt;/code&gt; を返しますが、理由 &lt;code&gt;noproc&lt;/code&gt; の終了信号が呼び出しプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="da43d3db522f1f4c7c74271266d895bb136efa89" translate="yes" xml:space="preserve">
          <source>Otherwise, it returns, if possible, the value of &lt;code&gt;apply(Fun, Args)&lt;/code&gt; after an attempt is made to autoload &lt;code&gt;Module&lt;/code&gt;. If this is not possible, the call fails with exit reason &lt;code&gt;undef&lt;/code&gt;.</source>
          <target state="translated">それ以外の場合は、 &lt;code&gt;Module&lt;/code&gt; のオートロードが試行された後、可能であれば、 &lt;code&gt;apply(Fun, Args)&lt;/code&gt; 値を返します。これが不可能な場合、呼び出しは終了理由 &lt;code&gt;undef&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="cacbdaf48917ea52fc8e545a2f82b0aa7f975a90" translate="yes" xml:space="preserve">
          <source>Otherwise, the &lt;code&gt;gen_server&lt;/code&gt; process terminates immediately.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;gen_server&lt;/code&gt; プロセスはすぐに終了します。</target>
        </trans-unit>
        <trans-unit id="94d92e282ea81d3ea91c85388ba278cc5356a549" translate="yes" xml:space="preserve">
          <source>Otherwise, the &lt;code&gt;gen_statem&lt;/code&gt; is immediately terminated.</source>
          <target state="translated">それ以外の場合、 &lt;code&gt;gen_statem&lt;/code&gt; はすぐに終了します。</target>
        </trans-unit>
        <trans-unit id="4310db4b8648fe0dc2ce19712dff695071b2d572" translate="yes" xml:space="preserve">
          <source>Otherwise, this option (&lt;code&gt;timeout&lt;/code&gt;) is used as the negotiation timeout only and there is no connection timeout set</source>
          <target state="translated">それ以外の場合、このオプション（ &lt;code&gt;timeout&lt;/code&gt; ）はネゴシエーションタイムアウトとしてのみ使用され、接続タイムアウトは設定されません。</target>
        </trans-unit>
        <trans-unit id="6fc1fe0597f841fdd158f43b025edbb7cffcfe68" translate="yes" xml:space="preserve">
          <source>Our driver data is also extended, we keep track of the socket used for communication with postgres, and also the port, which is needed when we send data to the port with &lt;code&gt;driver_output&lt;/code&gt;. We have a flag &lt;code&gt;connecting&lt;/code&gt; to tell whether the driver is waiting for a connection or waiting for the result of a query. (This is needed, as the entry &lt;code&gt;ready_io&lt;/code&gt; is called both when connecting and when there is a query result.)</source>
          <target state="translated">ドライバーデータも拡張され、postgresとの通信に使用されるソケットと、 &lt;code&gt;driver_output&lt;/code&gt; を使用してポートにデータを送信するときに必要なポートを追跡します。私たちは旗持っ &lt;code&gt;connecting&lt;/code&gt; ドライバが接続を待っているか、クエリの結果を待っているかどうかを伝えることを。（エントリ &lt;code&gt;ready_io&lt;/code&gt; は接続時とクエリ結果がある場合の両方で呼び出されるため、これが必要です。）</target>
        </trans-unit>
        <trans-unit id="6438f58ef6f89d7bd274993ab31926c276b0cdc6" translate="yes" xml:space="preserve">
          <source>Our new release, &quot;SECOND&quot;, is now the current release, but we can also see that our &quot;FIRST&quot; release is still permanent. This means that if the node would be restarted now, it would come up running the &quot;FIRST&quot; release again.</source>
          <target state="translated">新しいリリースである &quot;SECOND &quot;は現在のリリースですが、&quot;FIRST &quot;はまだ恒久的なリリースであることがわかります。これは、もし今ノードを再起動した場合、再び &quot;FIRST &quot;リリースを実行していることを意味します。</target>
        </trans-unit>
        <trans-unit id="867b0a717a764649cafbff4174c1ab32b19f1745" translate="yes" xml:space="preserve">
          <source>Outbound binary encoding in binaries</source>
          <target state="translated">バイナリでのアウトバウンドバイナリエンコーディング</target>
        </trans-unit>
        <trans-unit id="59cc61305ef8bc0545ffbb32a894c83964c825a0" translate="yes" xml:space="preserve">
          <source>Outbound percent-encoding in lists and binaries</source>
          <target state="translated">リストとバイナリでのアウトバウンドのパーセンテージエンコーディング</target>
        </trans-unit>
        <trans-unit id="f6e7d5a9598d3a265926a82b01d7b1deec941696" translate="yes" xml:space="preserve">
          <source>Outgoing reply messages will be segmented as needed (see &lt;code&gt;max_pdu_size&lt;/code&gt; below). Segment messages are sent all at once (i.e. no acknowledgement awaited before sending the next segment).</source>
          <target state="translated">発信応答メッセージは必要に応じて分割されます（以下の &lt;code&gt;max_pdu_size&lt;/code&gt; を参照）。セグメントメッセージは一度に送信されます（つまり、次のセグメントを送信する前に確認応答を待機しません）。</target>
        </trans-unit>
        <trans-unit id="db1552aa4fc51b4e7d46fa43321f568f6c953efb" translate="yes" xml:space="preserve">
          <source>Outgoing reply messages will be segmented as needed (see &lt;code&gt;max_pdu_size&lt;/code&gt; below). This value, K, indicate the outstanding window, i.e. how many segments can be outstanding (not acknowledged) at any given time.</source>
          <target state="translated">発信応答メッセージは必要に応じて分割されます（以下の &lt;code&gt;max_pdu_size&lt;/code&gt; を参照）。この値Kは、未解決のウィンドウ、つまり、特定の時点で未解決（確認応答なし）にできるセグメントの数を示します。</target>
        </trans-unit>
        <trans-unit id="685ad21255174c3fd01ff63b9cc3a546c7bc9ee3" translate="yes" xml:space="preserve">
          <source>Output messages are sent without packet lengths. A user-defined protocol must be used between the Erlang process and the external object.</source>
          <target state="translated">出力メッセージはパケット長なしで送信されます。Erlangプロセスと外部オブジェクトの間では、ユーザー定義のプロトコルを使わなければなりません。</target>
        </trans-unit>
        <trans-unit id="1940195f61826f0bf71c04e3e654bd8f616a6a5b" translate="yes" xml:space="preserve">
          <source>Outputs information from parsing the input file and generating the internal tables.</source>
          <target state="translated">入力ファイルを解析して内部テーブルを生成した情報を出力します。</target>
        </trans-unit>
        <trans-unit id="73c0f26b2a7bd194530650de5672dbbf0d19179d" translate="yes" xml:space="preserve">
          <source>Outputs the message &lt;code&gt;Text&lt;/code&gt; (which can be a plain string, an IO-list, or just an atom). The result is always &lt;code&gt;ok&lt;/code&gt;.</source>
          <target state="translated">メッセージ &lt;code&gt;Text&lt;/code&gt; 出力します（プレーン文字列、IOリスト、またはアトムのみ）。結果は常に &lt;code&gt;ok&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="47cdda9f06afdf9eb8f93de49e9252c88f5dc624" translate="yes" xml:space="preserve">
          <source>Outside a character class, a backslash followed by a digit &amp;gt; 0 (and possibly further digits) is a back reference to a capturing subpattern earlier (that is, to its left) in the pattern, provided there have been that many previous capturing left parentheses.</source>
          <target state="translated">文字クラスの外で、0より大きい数字（および場合によってはさらに多くの数字）が後に続くバックスラッシュは、パターン内の以前の（つまり、その左側の）キャプチャサブパターンへの後方参照です。 。</target>
        </trans-unit>
        <trans-unit id="cd6a3b6581f40f67d6587389bf34b0d7ce3534cd" translate="yes" xml:space="preserve">
          <source>Outside a character class, a dot in the pattern matches any character in the subject string except (by default) a character that signifies the end of a line.</source>
          <target state="translated">文字クラスの外では、パターン内のドットは、(デフォルトでは)行末を意味する文字を除いて、件名文字列内の任意の文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="81930bbe14ad5ca39d3f1c5a979f1ece61d2de2e" translate="yes" xml:space="preserve">
          <source>Outside a character class, by default, the escape sequence \R matches any Unicode newline sequence. In non-UTF-8 mode, \R is equivalent to the following:</source>
          <target state="translated">文字クラスの外では、デフォルトでは、エスケープシーケンス \Rは、任意のUnicode改行シーケンスにマッチします。非UTF-8モードでは、Rは以下と同等である。</target>
        </trans-unit>
        <trans-unit id="85b61b9dbc2dcc77797a3d987698e978f37365fe" translate="yes" xml:space="preserve">
          <source>Outside a character class, in the default matching mode, the circumflex character is an assertion that is true only if the current matching point is at the start of the subject string. If argument &lt;code&gt;startoffset&lt;/code&gt; of &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; is non-zero, circumflex can never match if option &lt;code&gt;multiline&lt;/code&gt; is unset. Inside a character class, circumflex has an entirely different meaning (see below).</source>
          <target state="translated">文字クラスの外側、デフォルトのマッチングモードでは、サーカムフレックス文字は、現在のマッチングポイントが対象文字列の先頭にある場合にのみ真となるアサーションです。 &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; の引数 &lt;code&gt;startoffset&lt;/code&gt; がゼロ以外の場合、オプション &lt;code&gt;multiline&lt;/code&gt; が設定されていないと、サーカムフレックスは一致しません。文字クラス内では、サーカムフレックスの意味はまったく異なります（以下を参照）。</target>
        </trans-unit>
        <trans-unit id="96066ed4fc24874155ae3f2d4ec23afe749bc90e" translate="yes" xml:space="preserve">
          <source>Outside a character class, the escape sequence \C matches any data unit, regardless if a UTF mode is set. One data unit is one byte. Unlike a dot, \C always matches line-ending characters. The feature is provided in Perl to match individual bytes in UTF-8 mode, but it is unclear how it can usefully be used. As \C breaks up characters into individual data units, matching one unit with \C in a UTF mode means that the remaining string can start with a malformed UTF character. This has undefined results, as PCRE assumes that it deals with valid UTF strings.</source>
          <target state="translated">文字クラス外のエスケープシーケンスは、UTF モードが設定されているかどうかに関わらず、任意のデータ単位にマッチします。1つのデータ単位は1バイトです。ドットとは異なり、\C は常に改行文字にマッチします。この機能は、PerlではUTF-8モードで個々のバイトにマッチするように提供されていますが、それがどのように有用に使用できるかは不明です。C は文字を個々のデータユニットに分割するので、UTF モードで 1 つのユニットを \C でマッチさせると、残りの文字列が不正な UTF 文字で始まる可能性があることを意味する。PCREは有効なUTF文字列を扱うと仮定しているため、これは未定義の結果となります。</target>
        </trans-unit>
        <trans-unit id="d06e3f0473ed837ae5eabca58e86d752a67b3e6e" translate="yes" xml:space="preserve">
          <source>Over time, as the Framework has evolved from SNMPv1 , through SNMPv2, to SNMPv3 the definitions of each of these architectural components have become richer and more clearly defined, but the fundamental architecture has remained consistent.</source>
          <target state="translated">時間の経過とともに、フレームワークはSNMPv1からSNMPv2、SNMPv3へと進化してきましたが、これらの各アーキテクチャコンポーネントの定義はより豊富になり、より明確に定義されるようになりましたが、基本的なアーキテクチャは一貫しています。</target>
        </trans-unit>
        <trans-unit id="cef9305d1dcaaa55a42c6722272e0c832cae51ee" translate="yes" xml:space="preserve">
          <source>Overload protection</source>
          <target state="translated">過負荷保護</target>
        </trans-unit>
        <trans-unit id="1024473923480d46de1a6ce534031a4fb8bf2fe9" translate="yes" xml:space="preserve">
          <source>Overload protection activated on one node does not affect other nodes, where the tracing continues as normal. &lt;code&gt;ttb:stop/0,1&lt;/code&gt; fetches data from all clients, including everything collected before the activation of overload protection.</source>
          <target state="translated">1つのノードでアクティブ化された過負荷保護は、トレースが通常どおり続行される他のノードには影響しません。 &lt;code&gt;ttb:stop/0,1&lt;/code&gt; は、過負荷保護がアクティブになる前に収集されたすべてを含む、すべてのクライアントからデータをフェッチします。</target>
        </trans-unit>
        <trans-unit id="9872bf40547ca2f3f14680ffa0287ececed0c74a" translate="yes" xml:space="preserve">
          <source>Override protocol version when sending a message by adding the item &lt;code&gt;{protocol_version, integer()}&lt;/code&gt; to the Options. See &lt;code&gt;&lt;a href=&quot;megaco#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;megaco#cast&quot;&gt;cast&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプションに項目 &lt;code&gt;{protocol_version, integer()}&lt;/code&gt; を追加して、メッセージを送信するときにプロトコルバージョンをオーバーライドします。 &lt;code&gt;&lt;a href=&quot;megaco#call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;megaco#cast&quot;&gt;cast&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="07d3d194fae83d351901e71d428409c25c0a3d51" translate="yes" xml:space="preserve">
          <source>Override the default, which is to analyze BEAM files, and analyze starting from Erlang source code instead.</source>
          <target state="translated">BEAMファイルを解析するデフォルトをオーバーライドし、代わりにErlangのソースコードから解析します。</target>
        </trans-unit>
        <trans-unit id="15565d57245d3503a665b06bb1ebc90f34652149" translate="yes" xml:space="preserve">
          <source>Overrides any value set by function &lt;code&gt;&lt;a href=&quot;#set_options-1&quot;&gt;set_options&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#set_options-1&quot;&gt;set_options&lt;/a&gt;&lt;/code&gt; で設定された値を上書きします。</target>
        </trans-unit>
        <trans-unit id="e903860e59ffb2ebea40577767dba45a92e0e0e5" translate="yes" xml:space="preserve">
          <source>Overrides the default definition of a newline in the subject string, which is LF (ASCII 10) in Erlang.</source>
          <target state="translated">サブジェクト文字列の改行のデフォルト定義をオーバーライドします。</target>
        </trans-unit>
        <trans-unit id="2178a71f4d4796adf7ebfc54ce9d2c304cda5e26" translate="yes" xml:space="preserve">
          <source>Overrides which callback module is used. Defaults to &lt;code&gt;inet_sctp&lt;/code&gt; for IPv4 and &lt;code&gt;inet6_sctp&lt;/code&gt; for IPv6.</source>
          <target state="translated">使用するコールバックモジュールを上書きします。IPv4の場合はデフォルトで &lt;code&gt;inet_sctp&lt;/code&gt; になり、IPv6の場合は &lt;code&gt;inet6_sctp&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="9febcfe22539c2d72353741f4a91ee3eee5e5d0a" translate="yes" xml:space="preserve">
          <source>Overrides which callback module is used. Defaults to &lt;code&gt;inet_tcp&lt;/code&gt; for IPv4 and &lt;code&gt;inet6_tcp&lt;/code&gt; for IPv6.</source>
          <target state="translated">使用するコールバックモジュールを上書きします。IPv4の場合はデフォルトで &lt;code&gt;inet_tcp&lt;/code&gt; になり、IPv6の場合は &lt;code&gt;inet6_tcp&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="fb4575b7495ce7d57228d043087de6f17605a208" translate="yes" xml:space="preserve">
          <source>Overrides which callback module is used. Defaults to &lt;code&gt;inet_udp&lt;/code&gt; for IPv4 and &lt;code&gt;inet6_udp&lt;/code&gt; for IPv6.</source>
          <target state="translated">使用するコールバックモジュールを上書きします。IPv4の場合はデフォルトで &lt;code&gt;inet_udp&lt;/code&gt; になり、IPv6の場合は &lt;code&gt;inet6_udp&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="d263dc838fe87831b80976b412672c3d8e02db11" translate="yes" xml:space="preserve">
          <source>Owners can subscribe to &lt;strong&gt;notifications&lt;/strong&gt;, messages of the form &lt;code&gt;{disk_log, Node, Log, Info}&lt;/code&gt;, which are sent from the disk log process when certain events occur, see the functions and in particular the &lt;code&gt;open/1&lt;/code&gt; option &lt;code&gt;&lt;a href=&quot;#notify&quot;&gt;notify&lt;/a&gt;&lt;/code&gt;. A log can have many owners, but a process cannot own a log more than once. However, the same process can open the log as a user more than once.</source>
          <target state="translated">所有者は、&lt;strong&gt;通知&lt;/strong&gt;、 &lt;code&gt;{disk_log, Node, Log, Info}&lt;/code&gt; 形式のメッセージをサブスクライブできます。これらのメッセージは、特定のイベントが発生したときにディスクログプロセスから送信されます。関数、特に &lt;code&gt;open/1&lt;/code&gt; オプション &lt;code&gt;&lt;a href=&quot;#notify&quot;&gt;notify&lt;/a&gt;&lt;/code&gt; を参照してください。ログは多くの所有者を持つことができますが、プロセスは1回しかログを所有できません。ただし、同じプロセスでユーザーとしてログを複数回開くことができます。</target>
        </trans-unit>
        <trans-unit id="0bf7d16b62f8d7d4458289a41b07f8e9ce785647" translate="yes" xml:space="preserve">
          <source>Owners subscribing to notifications are notified of an error with an &lt;code&gt;error_status&lt;/code&gt; message if the error reason tag is &lt;code&gt;invalid_header&lt;/code&gt; or &lt;code&gt;file_error&lt;/code&gt;.</source>
          <target state="translated">通知をサブスクライブしている所有者は、エラー理由タグが &lt;code&gt;invalid_header&lt;/code&gt; または &lt;code&gt;file_error&lt;/code&gt; の場合、 &lt;code&gt;error_status&lt;/code&gt; メッセージでエラーが通知されます。</target>
        </trans-unit>
        <trans-unit id="47ddeec7968a11b2b2f13154dd59f134a92d672e" translate="yes" xml:space="preserve">
          <source>Owners subscribing to notifications normally receive a &lt;code&gt;wrap&lt;/code&gt; message, but if an error occurs with a reason tag of &lt;code&gt;invalid_header&lt;/code&gt; or &lt;code&gt;file_error&lt;/code&gt;, an &lt;code&gt;error_status&lt;/code&gt; message is sent.</source>
          <target state="translated">通知をサブスクライブする所有者は通常、 &lt;code&gt;wrap&lt;/code&gt; メッセージを受け取りますが、reasonタグが &lt;code&gt;invalid_header&lt;/code&gt; または &lt;code&gt;file_error&lt;/code&gt; でエラーが発生した場合、 &lt;code&gt;error_status&lt;/code&gt; メッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="ea5a85a9a6040f17a47f7ba2c861df0d45af862d" translate="yes" xml:space="preserve">
          <source>Owners subscribing to notifications receive a &lt;code&gt;truncate&lt;/code&gt; message.</source>
          <target state="translated">通知をサブスクライブする所有者は、 &lt;code&gt;truncate&lt;/code&gt; メッセージを受け取ります。</target>
        </trans-unit>
        <trans-unit id="69f83710cbb8ab650339dad71d8d01aeb1346e48" translate="yes" xml:space="preserve">
          <source>Owners subscribing to notifications receive message &lt;code&gt;read_only&lt;/code&gt;, &lt;code&gt;blocked_log&lt;/code&gt;, or &lt;code&gt;format_external&lt;/code&gt; if the item cannot be written on the log, and possibly one of the messages &lt;code&gt;wrap&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, or &lt;code&gt;error_status&lt;/code&gt; if an item is written on the log. Message &lt;code&gt;error_status&lt;/code&gt; is sent if something is wrong with the header function or if a file error occurs.</source>
          <target state="translated">通知をサブスクライブした所有者は、アイテムをログに書き込むことができない場合はメッセージ &lt;code&gt;read_only&lt;/code&gt; 、 &lt;code&gt;blocked_log&lt;/code&gt; 、または &lt;code&gt;format_external&lt;/code&gt; を受け取り、アイテムがログに書き込まれる場合はメッセージ &lt;code&gt;wrap&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、または &lt;code&gt;error_status&lt;/code&gt; のいずれかを受け取ります。ヘッダー関数に問題がある場合、またはファイルエラーが発生した場合、メッセージ &lt;code&gt;error_status&lt;/code&gt; が送信されます。</target>
        </trans-unit>
        <trans-unit id="fc53f78ca51a5c5588dc259bf4af7ddf544cabda" translate="yes" xml:space="preserve">
          <source>Owners subscribing to notifications receive message &lt;code&gt;read_only&lt;/code&gt;, &lt;code&gt;blocked_log&lt;/code&gt;, or &lt;code&gt;format_external&lt;/code&gt; if the items cannot be written on the log, and possibly one or more of the messages &lt;code&gt;wrap&lt;/code&gt;, &lt;code&gt;full&lt;/code&gt;, and &lt;code&gt;error_status&lt;/code&gt; if items are written on the log. Message &lt;code&gt;error_status&lt;/code&gt; is sent if something is wrong with the header function or if a file error occurs.</source>
          <target state="translated">通知をサブスクライブした所有者は、アイテムをログに書き込むことができない場合はメッセージ &lt;code&gt;read_only&lt;/code&gt; 、 &lt;code&gt;blocked_log&lt;/code&gt; 、または &lt;code&gt;format_external&lt;/code&gt; を受け取り、アイテムがログに書き込まれる場合は1つ以上のメッセージ &lt;code&gt;wrap&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt; 、および &lt;code&gt;error_status&lt;/code&gt; を受け取ります。ヘッダー関数に問題がある場合、またはファイルエラーが発生した場合、メッセージ &lt;code&gt;error_status&lt;/code&gt; が送信されます。</target>
        </trans-unit>
        <trans-unit id="36f780fdbda5b2b2ce85c9ebb57086d1880ae757" translate="yes" xml:space="preserve">
          <source>PC</source>
          <target state="translated">PC</target>
        </trans-unit>
        <trans-unit id="d561f41a3e664cc0a8835732d97f931d41f72800" translate="yes" xml:space="preserve">
          <source>PCRE (and Perl) also recognize the Posix syntax [.ch.] and [=ch=] where &quot;ch&quot; is a &quot;collating element&quot;, but these are not supported, and an error is given if they are encountered.</source>
          <target state="translated">PCRE (およびPerl)は、Posix構文[.ch.]と[=ch=]を認識します。ここで &quot;ch &quot;は &quot;照合要素 &quot;ですが、これらはサポートされておらず、それらに遭遇した場合はエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="c7e1a3a2c06dd5d35852b8fd7f58b67f48a9a787" translate="yes" xml:space="preserve">
          <source>PCRE contains some optimizations that are used to speed up matching by running some checks at the start of each match attempt. For example, it can know the minimum length of matching subject, or that a particular character must be present. When one of these optimizations bypasses the running of a match, any included backtracking verbs are not processed. processed. You can suppress the start-of-match optimizations by setting option &lt;code&gt;no_start_optimize&lt;/code&gt; when calling &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt;, or by starting the pattern with (*NO_START_OPT).</source>
          <target state="translated">PCREには、各照合の開始時にいくつかのチェックを実行して照合を高速化するために使用されるいくつかの最適化が含まれています。たとえば、一致するサブジェクトの最小長を認識したり、特定の文字が存在する必要があることを認識したりできます。これらの最適化の1つが一致の実行をバイパスする場合、含まれるバックトラッキング動詞は処理されません。処理されました。 &lt;code&gt;&lt;a href=&quot;#compile-2&quot;&gt;compile/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; を呼び出すときにオプション &lt;code&gt;no_start_optimize&lt;/code&gt; を設定するか、または（* NO_START_OPT）でパターンを開始することにより、マッチの開始の最適化を抑制できます。</target>
        </trans-unit>
        <trans-unit id="b299ec8de52cb755bee6ddf20ed30414c507680c" translate="yes" xml:space="preserve">
          <source>PCRE differs from Perl in its handling of backtracking verbs in repeated groups. For example, consider:</source>
          <target state="translated">PCREはPerlとは異なり、繰り返しグループ内での動詞のバックトラックの扱いが異なります。例えば、考えてみてください。</target>
        </trans-unit>
        <trans-unit id="3cc508b88f2a03ca5b89b7762b1f20cd8e196650" translate="yes" xml:space="preserve">
          <source>PCRE does not allow \C to appear in lookbehind assertions (described below) in a UTF mode, as this would make it impossible to calculate the length of the lookbehind.</source>
          <target state="translated">PCREは、Lookbehindの長さを計算することができなくなるため、UTFモードでLookbehindアサーション(後述)の中に †Cが現れることを許可しない。</target>
        </trans-unit>
        <trans-unit id="1cbd2b65949cf73edf1658ac5a4fd6ddc42bd83c" translate="yes" xml:space="preserve">
          <source>PCRE has an optimization that automatically &quot;possessifies&quot; certain simple pattern constructs. For example, the sequence A+B is treated as A++B, as there is no point in backtracking into a sequence of A:s when B must follow.</source>
          <target state="translated">PCREには、特定の単純なパターン構成を自動的に「所有」する最適化機能があります。例えば、A+BのシーケンスはA++Bとして扱われます。</target>
        </trans-unit>
        <trans-unit id="f0fc58f08622bddb7678d55039d7a59b7bc48042" translate="yes" xml:space="preserve">
          <source>PCRE supports an extension to Oniguruma: if a number is preceded by a plus or minus sign, it is taken as a relative reference, for example:</source>
          <target state="translated">PCREは鬼車の拡張機能をサポートしています:数値の前にプラスまたはマイナス記号がある場合は、例えば相対参照として扱われます。</target>
        </trans-unit>
        <trans-unit id="dec962e9c5b1c207185027f300491448a37e5072" translate="yes" xml:space="preserve">
          <source>PCRE supports five conventions for indicating line breaks in strings: a single CR (carriage return) character, a single LF (line feed) character, the two-character sequence CRLF, any of the three preceding, and any Unicode newline sequence.</source>
          <target state="translated">PCRE は、文字列の改行を示すための 5 つの規則をサポートしています:単一の CR (キャリッジリターン)文字、単一の LF (改行)文字、2 文字のシーケンス CRLF、前の 3 つのいずれか、および任意の Unicode 改行シーケンスです。</target>
        </trans-unit>
        <trans-unit id="fa87f3aabeb31ade442c9f5f35c180a263350233" translate="yes" xml:space="preserve">
          <source>PEM files, used by ssl API-functions, are cached. The cache is regularly checked to see if any cache entries should be invalidated, however this function provides a way to unconditionally clear the whole cache.</source>
          <target state="translated">ssl API 関数で使用される PEM ファイルはキャッシュされます。キャッシュは定期的にキャッシュエントリが無効になるかどうかチェックされますが、この関数は無条件にキャッシュ全体をクリアする方法を提供します。</target>
        </trans-unit>
        <trans-unit id="1cd905f009accd2df9f1ab5f8a17d5b5c38872a6" translate="yes" xml:space="preserve">
          <source>Package the installation in &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt;, place it wherever you want on your target machine, and run the &lt;code&gt;Install&lt;/code&gt; script on your target machine:</source>
          <target state="translated">インストールを &lt;code&gt;&amp;lt;RELEASE_DIR&amp;gt;&lt;/code&gt; にパッケージ化し、ターゲットマシンの任意の場所に配置して、ターゲットマシンで &lt;code&gt;Install&lt;/code&gt; スクリプトを実行します。</target>
        </trans-unit>
        <trans-unit id="c2b5d604d7f06e3d1f95fc5dc804a3221b871852" translate="yes" xml:space="preserve">
          <source>Packed Encoding Rules (PER), both the aligned and unaligned variant</source>
          <target state="translated">パックドエンコーディングルール(PER)は、アラインドおよびアンアラインドバリアントの両方に対応しています。</target>
        </trans-unit>
        <trans-unit id="e71a71de422305a16e28853d413eeb1fe6adaa8c" translate="yes" xml:space="preserve">
          <source>Packets can be sent to the returned socket &lt;code&gt;Socket&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2&lt;/a&gt;&lt;/code&gt;. Packets sent from the peer are delivered as messages (unless &lt;code&gt;{active, false}&lt;/code&gt; is specified in the option list for the listening socket, in which case packets are retrieved by calling &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2&lt;/a&gt;&lt;/code&gt; を使用して、返されたソケット &lt;code&gt;Socket&lt;/code&gt; にパケットを送信できます。ピアから送信されたパケットはメッセージとして配信されます（リスニングソケットのオプションリストで &lt;code&gt;{active, false}&lt;/code&gt; が指定されていない限り、 &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2&lt;/a&gt;&lt;/code&gt; を呼び出してパケットが取得されます）。</target>
        </trans-unit>
        <trans-unit id="999e0ae2fd1b7fad6eb65fd1659da2a1e9675393" translate="yes" xml:space="preserve">
          <source>Packets can be sent to the returned socket &lt;code&gt;Socket&lt;/code&gt; using &lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2&lt;/a&gt;&lt;/code&gt;. Packets sent from the peer are delivered as messages:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#send-2&quot;&gt;send/2&lt;/a&gt;&lt;/code&gt; を使用して、返されたソケット &lt;code&gt;Socket&lt;/code&gt; にパケットを送信できます。ピアから送信されたパケットは、メッセージとして配信されます。</target>
        </trans-unit>
        <trans-unit id="a9cbdaa25497050f647df52257a52127df4c6dcd" translate="yes" xml:space="preserve">
          <source>Packets consist of a header specifying the number of bytes in the packet, followed by that number of bytes. The header length can be one, two, or four bytes, and containing an unsigned integer in big-endian byte order. Each send operation generates the header, and the header is stripped off on each receive operation.</source>
          <target state="translated">パケットは、パケット内のバイト数を指定するヘッダと、それに続くバイト数で構成されています。ヘッダの長さは1バイト、2バイト、または4バイトで、ビッグエンディアンのバイト順で符号なし整数を含むことができます。各送信操作はヘッダを生成し、ヘッダは各受信操作で除去されます。</target>
        </trans-unit>
        <trans-unit id="d0d592f83333abf860b4699c427f31bf34be37ff" translate="yes" xml:space="preserve">
          <source>Packets consist of a header specifying the number of bytes in the packet, followed by that number of bytes. The length of the header can be one, two, or four bytes; the order of the bytes is big-endian. The header is stripped off when the packet is returned.</source>
          <target state="translated">パケットは、パケット内のバイト数を指定するヘッダと、それに続くバイト数で構成されています。ヘッダの長さは1バイト、2バイト、または4バイトで、バイトの順序はビッグエンディアンです。パケットが返されたときにヘッダは取り除かれます。</target>
        </trans-unit>
        <trans-unit id="b9b4528e2d3cf117ea52177114c90e71d60519dc" translate="yes" xml:space="preserve">
          <source>Pads &lt;code&gt;String&lt;/code&gt; to &lt;code&gt;Length&lt;/code&gt; with grapheme cluster &lt;code&gt;Char&lt;/code&gt;. &lt;code&gt;Dir&lt;/code&gt;, which can be &lt;code&gt;leading&lt;/code&gt;, &lt;code&gt;trailing&lt;/code&gt;, or &lt;code&gt;both&lt;/code&gt;, indicates where the padding should be added.</source>
          <target state="translated">パッド &lt;code&gt;String&lt;/code&gt; に &lt;code&gt;Length&lt;/code&gt; 書記素クラスタと &lt;code&gt;Char&lt;/code&gt; 。 &lt;code&gt;Dir&lt;/code&gt; することができ、 &lt;code&gt;leading&lt;/code&gt; 、 &lt;code&gt;trailing&lt;/code&gt; 、または &lt;code&gt;both&lt;/code&gt; 、パディングが追加されるべき場所を示します。</target>
        </trans-unit>
        <trans-unit id="62bfbd510157d2b2d32934302b71a771f9fb8488" translate="yes" xml:space="preserve">
          <source>Pahawh_Hmong</source>
          <target state="translated">Pahawh_Hmong</target>
        </trans-unit>
        <trans-unit id="ea98d285a450c2d86578176798a994d47e81c69f" translate="yes" xml:space="preserve">
          <source>Palmyrene</source>
          <target state="translated">Palmyrene</target>
        </trans-unit>
        <trans-unit id="eb7595283333290680efe8f59bad4f5efb16ee78" translate="yes" xml:space="preserve">
          <source>Paragraph separator</source>
          <target state="translated">段落区切り</target>
        </trans-unit>
        <trans-unit id="ea1f90af11a63290665889dc8c71bcb46ef20ff7" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;ArgL&lt;/code&gt; is a list of the following options:</source>
          <target state="translated">パラメータ &lt;code&gt;ArgL&lt;/code&gt; は、次のオプションのリストです。</target>
        </trans-unit>
        <trans-unit id="481ff685beef8edc87c1c25cefdedd5dd3072163" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;FlagList&lt;/code&gt; is a list of options. The following are the valid options:</source>
          <target state="translated">パラメータ &lt;code&gt;FlagList&lt;/code&gt; はオプションのリストです。有効なオプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="fb58c9f9f7662428e1102cf73d06277b9a9f8408" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;Item&lt;/code&gt; specifies which driver to monitor (the driver name) and which state change to monitor. The parameter is a tuple of arity two whose first element is the driver name and second element is one of the following:</source>
          <target state="translated">パラメーター &lt;code&gt;Item&lt;/code&gt; は、監視するドライバー（ドライバー名）と監視する状態変化を指定します。パラメータは、最初の要素がドライバ名で2番目の要素が次のいずれかであるアリティ2のタプルです。</target>
        </trans-unit>
        <trans-unit id="ffc2bcb064cabdbae071c079e72742a961a53078" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;MgrAgentConfName&lt;/code&gt; in the functions is to be a name you allocate in your test suite using a &lt;code&gt;require&lt;/code&gt; statement. Example (where &lt;code&gt;MgrAgentConfName = snmp_mgr_agent&lt;/code&gt;):</source>
          <target state="translated">関数のパラメーター &lt;code&gt;MgrAgentConfName&lt;/code&gt; は、 &lt;code&gt;require&lt;/code&gt; ステートメントを使用してテストスイートに割り当てる名前になります。例（ &lt;code&gt;MgrAgentConfName = snmp_mgr_agent&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="67a9b163fdabde30f306efc624573ddbed00e72a" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;Options&lt;/code&gt; is a list of atoms that specifies table type, access rights, key position, and whether the table is named. Default values are used for omitted options. This means that not specifying any options (&lt;code&gt;[]&lt;/code&gt;) is the same as specifying &lt;code&gt;[set, protected, {keypos,1}, {heir,none}, {write_concurrency,false}, {read_concurrency,false}]&lt;/code&gt;.</source>
          <target state="translated">パラメーター &lt;code&gt;Options&lt;/code&gt; は、テーブルの種類、アクセス権、キーの位置、およびテーブルに名前を付けるかどうかを指定するアトムのリストです。省略されたオプションにはデフォルト値が使用されます。つまり、オプション（ &lt;code&gt;[]&lt;/code&gt; ）を指定しないことは、 &lt;code&gt;[set, protected, {keypos,1}, {heir,none}, {write_concurrency,false}, {read_concurrency,false}]&lt;/code&gt; を指定することと同じです。</target>
        </trans-unit>
        <trans-unit id="9d795107fbe2f795cba5a352dc3d9eb7ed96b4b2" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;UserPrivate&lt;/code&gt; is typically the result of opening a low-level structure like a file descriptor or an SFTP channel id. The different &lt;code&gt;Fun&lt;/code&gt; clauses operate on that very term.</source>
          <target state="translated">パラメータ &lt;code&gt;UserPrivate&lt;/code&gt; は、通常、ファイル記述子やSFTPチャネルIDなどの低レベルの構造を開いた結果です。さまざまな &lt;code&gt;Fun&lt;/code&gt; 句がまさにその用語に作用します。</target>
        </trans-unit>
        <trans-unit id="178879c4f36263f5398b5fe0c1d2b17ffe37778c" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;buf&lt;/code&gt; points to the data to send, and &lt;code&gt;len&lt;/code&gt; is the number of bytes.</source>
          <target state="translated">パラメータ &lt;code&gt;buf&lt;/code&gt; は送信するデータを指し、 &lt;code&gt;len&lt;/code&gt; はバイト数です。</target>
        </trans-unit>
        <trans-unit id="8c3b0a66603387ab483d713b83c217fa59d3b555" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;event&lt;/code&gt; identifies an OS-specific event object. On Unix systems, the functions &lt;code&gt;select&lt;/code&gt;/&lt;code&gt;poll&lt;/code&gt; are used. The event object must be a socket or pipe (or other object that &lt;code&gt;select&lt;/code&gt;/&lt;code&gt;poll&lt;/code&gt; can use). On Windows, the Win32 API function &lt;code&gt;WaitForMultipleObjects&lt;/code&gt; is used. This places other restrictions on the event object; see the Win32 SDK documentation.</source>
          <target state="translated">パラメータ &lt;code&gt;event&lt;/code&gt; は、OS固有のイベントオブジェクトを識別します。Unixシステムでは、関数 &lt;code&gt;select&lt;/code&gt; / &lt;code&gt;poll&lt;/code&gt; が使用されます。イベントオブジェクトは、ソケットまたはパイプ（または &lt;code&gt;select&lt;/code&gt; / &lt;code&gt;poll&lt;/code&gt; が使用できる他のオブジェクト）でなければなりません。Windowsでは、Win32 API関数 &lt;code&gt;WaitForMultipleObjects&lt;/code&gt; が使用されます。これにより、イベントオブジェクトに他の制限が適用されます。Win32 SDKのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="164ddca5ff1565ca4f9e0ee9934496e78da5103a" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;extra_db_nodes&lt;/code&gt; can also be used on disc based nodes.</source>
          <target state="translated">パラメータ &lt;code&gt;extra_db_nodes&lt;/code&gt; は、ディスクベースのノードでも使用できます。</target>
        </trans-unit>
        <trans-unit id="19911242e8e159e23d1389d3ca9b289be8023784" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;group_names_or_paths&lt;/code&gt; specifies one or more group names and/or one or more group paths. At startup, &lt;code&gt;Common Test&lt;/code&gt; searches for matching groups in the group definitions tree (that is, the list returned from &lt;code&gt;Suite:groups/0&lt;/code&gt;; for details, see section &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;group_names_or_paths&lt;/code&gt; は、1つ以上のグループ名または1つ以上のグループパス、あるいはその両方を指定します。 &lt;code&gt;Common Test&lt;/code&gt; は起動時に、グループ定義ツリー（つまり、 &lt;code&gt;Suite:groups/0&lt;/code&gt; から返されたリスト）で一致するグループを検索します。詳細については、「 &lt;code&gt;&lt;a href=&quot;write_test_chapter#test_case_groups&quot;&gt;Test Case Groups&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="1db4151b626c494895a3303e3e9dc15c541574a3" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;mode&lt;/code&gt; is a bitwise OR combination of &lt;code&gt;ERL_DRV_READ&lt;/code&gt;, &lt;code&gt;ERL_DRV_WRITE&lt;/code&gt;, and &lt;code&gt;ERL_DRV_USE&lt;/code&gt;. The first two specify whether to wait for read events and/or write events. A fired read event calls &lt;code&gt;&lt;a href=&quot;driver_entry#ready_input&quot;&gt;ready_input&lt;/a&gt;&lt;/code&gt; and a fired write event calls &lt;code&gt;&lt;a href=&quot;driver_entry#ready_output&quot;&gt;ready_output&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;mode&lt;/code&gt; は、 &lt;code&gt;ERL_DRV_READ&lt;/code&gt; 、 &lt;code&gt;ERL_DRV_WRITE&lt;/code&gt; 、および &lt;code&gt;ERL_DRV_USE&lt;/code&gt; のビット単位ORの組み合わせです。最初の2つは、読み取りイベントまたは書き込みイベント、あるいはその両方を待機するかどうかを指定します。発生した読み取りイベントは &lt;code&gt;&lt;a href=&quot;driver_entry#ready_input&quot;&gt;ready_input&lt;/a&gt;&lt;/code&gt; を呼び出し、発生した書き込みイベントは &lt;code&gt;&lt;a href=&quot;driver_entry#ready_output&quot;&gt;ready_output&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="24b7e614b3fb7661e3c4bfa669cf966c8e65b191" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;offset&lt;/code&gt; is an offset into the binary and &lt;code&gt;len&lt;/code&gt; is the number of bytes to send.</source>
          <target state="translated">パラメータ &lt;code&gt;offset&lt;/code&gt; はバイナリへのオフセットで、 &lt;code&gt;len&lt;/code&gt; は送信するバイト数です。</target>
        </trans-unit>
        <trans-unit id="2c09fe112bbeb4630f395aac2bcdfe148aca5521" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;on&lt;/code&gt; is to be &lt;code&gt;1&lt;/code&gt; for setting events and &lt;code&gt;0&lt;/code&gt; for clearing them.</source>
          <target state="translated">パラメータ &lt;code&gt;on&lt;/code&gt; は、イベントを設定する場合は &lt;code&gt;1&lt;/code&gt; 、クリアする場合は &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f74566537c8d9ce233e9f86c48184e78edfc96b6" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;port&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; an ordinary port handle, but a port handle converted using &lt;code&gt;&lt;a href=&quot;#driver_mk_port&quot;&gt;driver_mk_port&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;port&lt;/code&gt; は通常のポートハンドルでは&lt;strong&gt;なく&lt;/strong&gt;、 &lt;code&gt;&lt;a href=&quot;#driver_mk_port&quot;&gt;driver_mk_port&lt;/a&gt;&lt;/code&gt; を使用して変換されたポートハンドルです。</target>
        </trans-unit>
        <trans-unit id="31842056db03aa395dd407bca74bccb68a5a26bb" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;process&lt;/code&gt; is to be the return value of an earlier call to &lt;code&gt;&lt;a href=&quot;#driver_caller&quot;&gt;driver_caller&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#driver_connected&quot;&gt;driver_connected&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">パラメータ &lt;code&gt;process&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#driver_caller&quot;&gt;driver_caller&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#driver_connected&quot;&gt;driver_connected&lt;/a&gt;&lt;/code&gt; 呼び出しへの以前の呼び出しの戻り値になります。</target>
        </trans-unit>
        <trans-unit id="66a261af649e0d1c255cd39045bb5e13b9ca6186" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;skip&lt;/code&gt; is a number of bytes to skip of the &lt;code&gt;ev&lt;/code&gt; vector from the head.</source>
          <target state="translated">パラメータ &lt;code&gt;skip&lt;/code&gt; は、先頭からの &lt;code&gt;ev&lt;/code&gt; ベクトルをスキップするバイト数です。</target>
        </trans-unit>
        <trans-unit id="64e4fb00a7835e330447d940e7db2ce15d43c569" translate="yes" xml:space="preserve">
          <source>Parameter &lt;code&gt;term&lt;/code&gt; points to an array of &lt;code&gt;ErlDrvTermData&lt;/code&gt; with &lt;code&gt;n&lt;/code&gt; elements. This array contains terms described in the driver term format. Every term consists of 1-4 elements in the array. The first term has a term type and then arguments. Parameter &lt;code&gt;port&lt;/code&gt; specifies the sending port.</source>
          <target state="translated">パラメータ &lt;code&gt;term&lt;/code&gt; は、 &lt;code&gt;n&lt;/code&gt; 要素を持つ &lt;code&gt;ErlDrvTermData&lt;/code&gt; の配列を指します。この配列には、ドライバー用語形式で記述された用語が含まれています。すべての項は、配列の1〜4個の要素で構成されています。最初の用語には用語タイプがあり、次に引数があります。パラメータ &lt;code&gt;port&lt;/code&gt; は送信ポートを指定します。</target>
        </trans-unit>
        <trans-unit id="619a12371bd91db45106e0947981ba34d3c2bd49" translate="yes" xml:space="preserve">
          <source>Parameterization, which is defined in X.683, can be used when defining types, values, value sets, classes, objects, or object sets. A part of a definition can be supplied as a parameter. For example, if a &lt;code&gt;Type&lt;/code&gt; is used in a definition with a certain purpose, you want the type name to express the intention. This can be done with parameterization.</source>
          <target state="translated">X.683で定義されているパラメーター化は、型、値、値セット、クラス、オブジェクト、またはオブジェクトセットを定義するときに使用できます。定義の一部をパラメーターとして指定できます。たとえば、特定の目的を持つ定義で &lt;code&gt;Type&lt;/code&gt; が使用されている場合は、タイプ名に意図を表す必要があります。これは、パラメーター化を使用して行うことができます。</target>
        </trans-unit>
        <trans-unit id="3001577f3d424b071c234b5e5a77e2c797ba8919" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;port&lt;/code&gt;, &lt;code&gt;term&lt;/code&gt;, and &lt;code&gt;n&lt;/code&gt; work as in &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;port&lt;/code&gt; 、 &lt;code&gt;term&lt;/code&gt; 、および &lt;code&gt;n&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt; と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="aa047ce05d4bbf51547604b5fd791b6e5ce4e1a0" translate="yes" xml:space="preserve">
          <source>Parameters &lt;code&gt;term&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt; work as in &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">パラメータ &lt;code&gt;term&lt;/code&gt; と &lt;code&gt;n&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt; と同じように機能します。</target>
        </trans-unit>
        <trans-unit id="52408a3808b8f3d07d1e351897f44c8601912f48" translate="yes" xml:space="preserve">
          <source>Parameters to be used to call public_key:generate_key/1, to generate a key, or an existing key. Defaults to generating an ECDSA key. Note this could fail if Erlang/OTP is compiled with a very old cryptolib.</source>
          <target state="translated">public_key:generate_key/1 の呼び出し、鍵の生成、または既存の鍵の生成に使用するパラメータ。デフォルトはECDSAキーを生成します。Erlang/OTPが非常に古いクリプトリブでコンパイルされている場合は失敗する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="f544c8871ad84d3b8d3ea9af03500476893103ea" translate="yes" xml:space="preserve">
          <source>Parentheses are used for grouping, either to make an expression more readable or to override the default precedence of operators:</source>
          <target state="translated">括弧は、式をより読みやすくしたり、演算子のデフォルトの優先順位を上書きしたりするためにグループ化するために使用されます。</target>
        </trans-unit>
        <trans-unit id="a38e57cb166c131b67e7c17a52a16571f7e59fb9" translate="yes" xml:space="preserve">
          <source>Parenthesized expressions are useful to override &lt;code&gt;&lt;a href=&quot;#prec&quot;&gt;operator precedences&lt;/a&gt;&lt;/code&gt;, for example, in arithmetic expressions:</source>
          <target state="translated">括弧で囲まれた式は、たとえば算術式で演算 &lt;code&gt;&lt;a href=&quot;#prec&quot;&gt;operator precedences&lt;/a&gt;&lt;/code&gt; を上書きするのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="1ec3038821c8e34cb4ca25c92efd7b368a0d8e5a" translate="yes" xml:space="preserve">
          <source>Parse a stream containing an XML document.</source>
          <target state="translated">XML ドキュメントを含むストリームを解析します。</target>
        </trans-unit>
        <trans-unit id="8217aea2b6b930a773bd2a30eafc88abe67c2fba" translate="yes" xml:space="preserve">
          <source>Parse file containing an XML document</source>
          <target state="translated">XML 文書を含むパースファイル</target>
        </trans-unit>
        <trans-unit id="5a6136b4aa579fcfcffcc46e0f8f8eb6d5603d86" translate="yes" xml:space="preserve">
          <source>Parse file containing an XML document as a stream, DOM style. Wrapper for a call to the XML parser &lt;code&gt;xmerl_scan&lt;/code&gt; with a &lt;code&gt;continuation_fun&lt;/code&gt; for handling streams of XML data. Note that the &lt;code&gt;continuation_fun&lt;/code&gt;, &lt;code&gt;acc_fun&lt;/code&gt;, &lt;code&gt;fetch_fun&lt;/code&gt;, &lt;code&gt;rules&lt;/code&gt; and &lt;code&gt;close_fun&lt;/code&gt; options cannot be user defined using this parser.</source>
          <target state="translated">XMLドキュメントをストリーム、DOMスタイルとして含む解析ファイル。XMLデータのストリームを処理するための &lt;code&gt;continuation_fun&lt;/code&gt; を &lt;code&gt;xmerl_scan&lt;/code&gt; したXMLパーサーxmerl_scanの呼び出しのラッパー。 &lt;code&gt;continuation_fun&lt;/code&gt; 、 &lt;code&gt;acc_fun&lt;/code&gt; 、 &lt;code&gt;fetch_fun&lt;/code&gt; 、 &lt;code&gt;rules&lt;/code&gt; 、および &lt;code&gt;close_fun&lt;/code&gt; オプションは、このパーサーを使用してユーザー定義できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="674e40f858960e6e4df14fbdc24544779fa454b2" translate="yes" xml:space="preserve">
          <source>Parse file containing an XML document as a stream, SAX style. Wrapper for a call to the XML parser &lt;code&gt;xmerl_scan&lt;/code&gt; with a &lt;code&gt;continuation_fun&lt;/code&gt; for handling streams of XML data. Note that the &lt;code&gt;continuation_fun&lt;/code&gt;, &lt;code&gt;acc_fun&lt;/code&gt;, &lt;code&gt;fetch_fun&lt;/code&gt;, &lt;code&gt;rules&lt;/code&gt;, &lt;code&gt;hook_fun&lt;/code&gt;, &lt;code&gt;close_fun&lt;/code&gt; and &lt;code&gt;user_state&lt;/code&gt; options cannot be user defined using this parser.</source>
          <target state="translated">XMLドキュメントをストリーム、SAXスタイルとして含む解析ファイル。XMLデータのストリームを処理するための &lt;code&gt;continuation_fun&lt;/code&gt; を &lt;code&gt;xmerl_scan&lt;/code&gt; したXMLパーサーxmerl_scanの呼び出しのラッパー。 &lt;code&gt;continuation_fun&lt;/code&gt; 、 &lt;code&gt;acc_fun&lt;/code&gt; 、 &lt;code&gt;fetch_fun&lt;/code&gt; 、 &lt;code&gt;rules&lt;/code&gt; 、 &lt;code&gt;hook_fun&lt;/code&gt; 、 &lt;code&gt;close_fun&lt;/code&gt; および &lt;code&gt;user_state&lt;/code&gt; オプションは、このパーサーを使用してユーザー定義できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="fc9ee985dfae362f5f4036d5f83dc0f5fe590d74" translate="yes" xml:space="preserve">
          <source>Parse file containing an XML document, SAX style. Wrapper for a call to the XML parser &lt;code&gt;xmerl_scan&lt;/code&gt; with a &lt;code&gt;hook_fun&lt;/code&gt; for using xmerl export functionality directly after an entity is parsed.</source>
          <target state="translated">SAXスタイルのXMLドキュメントを含む解析ファイル。XMLパーサへの呼び出しのためのラッパー &lt;code&gt;xmerl_scan&lt;/code&gt; と &lt;code&gt;hook_fun&lt;/code&gt; エンティティが解析された後、直接xmerlエクスポート機能を使用するため。</target>
        </trans-unit>
        <trans-unit id="a7e66c978a3bc50b34f2f8f441cb5d45be8ce70b" translate="yes" xml:space="preserve">
          <source>Parse file containing an XML document. This functions uses a default continuation function to read the file in blocks.</source>
          <target state="translated">XML文書を含むファイルを解析します。この関数は、デフォルトの継続関数を使用して、ファイルをブロック単位で読み込む。</target>
        </trans-unit>
        <trans-unit id="c11cdcc0a2531ae96dc218c56c12636fa75bf6fe" translate="yes" xml:space="preserve">
          <source>Parse string containing an XML document</source>
          <target state="translated">XML 文書を含むパース文字列</target>
        </trans-unit>
        <trans-unit id="6b19e7fcfb29d25095c7a452b5d973ecb668a8f0" translate="yes" xml:space="preserve">
          <source>Parse text and substitute meta-variables.</source>
          <target state="translated">テキストを解析し、メタ変数を置換します。</target>
        </trans-unit>
        <trans-unit id="f3059059775d564c176b513311505460d999325b" translate="yes" xml:space="preserve">
          <source>Parse text and substitute meta-variables. Takes an initial scanner starting position as first argument.</source>
          <target state="translated">テキストを解析し、メタ変数を置換します。最初の引数としてスキャナの開始位置を取ります。</target>
        </trans-unit>
        <trans-unit id="995f08395199c28811d1c157ebeb410cdf5f6a52" translate="yes" xml:space="preserve">
          <source>Parse text.</source>
          <target state="translated">テキストを解析します。</target>
        </trans-unit>
        <trans-unit id="6f88d437ec32b29a09b77bb3c60dda1a500d3d76" translate="yes" xml:space="preserve">
          <source>Parse text. Takes an initial scanner starting position as first argument.</source>
          <target state="translated">テキストを解析します。スキャナの最初の開始位置を第一引数に取ります。</target>
        </trans-unit>
        <trans-unit id="2db8f8fef89f426d3dbefc3cc3581aafe79f6ce1" translate="yes" xml:space="preserve">
          <source>Parse the given test specification files and return the tests to run and skip.</source>
          <target state="translated">与えられたテスト仕様ファイルを解析し、実行するテストとスキップするテストを返します。</target>
        </trans-unit>
        <trans-unit id="2163966b8b6a50fd1cf0cca656abeddf8dd5cc71" translate="yes" xml:space="preserve">
          <source>Parse transform for merl.</source>
          <target state="translated">merl のパース変換。</target>
        </trans-unit>
        <trans-unit id="16b406d744c815ddcee583e6e5df09f0720355fa" translate="yes" xml:space="preserve">
          <source>Parse transform for merl. Enables the use of automatic metavariables and using quasi-quotes in matches and case switches. Also optimizes calls to functions in &lt;code&gt;merl&lt;/code&gt; by partially evaluating them, turning strings to templates, etc., at compile-time.</source>
          <target state="translated">merlの変換を解析します。自動メタ変数の使用と、一致およびケーススイッチでの準引用符の使用を有効にします。また、コンパイル時に関数を部分的に評価し、文字列をテンプレートに &lt;code&gt;merl&lt;/code&gt; するなどして、merl内の関数の呼び出しを最適化します。</target>
        </trans-unit>
        <trans-unit id="1a936ecbdaa0108bef18e5866e06c3f267270543" translate="yes" xml:space="preserve">
          <source>Parse transformations are used if a programmer wants to use Erlang syntax, but with different semantics. The original Erlang code is then transformed into other Erlang code.</source>
          <target state="translated">パース変換はプログラマがErlangの構文を使いたい場合に使われますが、セマンティクスは異なります。オリジナルのErlangコードは他のErlangコードに変換されます。</target>
        </trans-unit>
        <trans-unit id="e2baf70db7b7c168b6c27755c6350a0d8b3a3116" translate="yes" xml:space="preserve">
          <source>Parse transformations are used when a programmer wants to use Erlang syntax but with different semantics. The original Erlang code is then transformed into other Erlang code.</source>
          <target state="translated">パース変換はプログラマがErlangの構文を使いたいときに使われますが、セマンティクスは異なります。元のErlangコードは他のErlangコードに変換されます。</target>
        </trans-unit>
        <trans-unit id="b27625b152a11d3756ff7a956cb8d71acc5d561c" translate="yes" xml:space="preserve">
          <source>Parse trees for Erlang expression, see section &lt;code&gt;The Abstract Format&lt;/code&gt; in the ERTS User's Guide.</source>
          <target state="translated">Erlang式のツリーを解析します。「ERTSユーザーガイド」の「 &lt;code&gt;The Abstract Format&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="1b485e40955067baa97180fef7a23873d2bbfac9" translate="yes" xml:space="preserve">
          <source>Parses &lt;code&gt;Tokens&lt;/code&gt; as if it was a form. Returns one of the following:</source>
          <target state="translated">&lt;code&gt;Tokens&lt;/code&gt; をフォームであるかのように解析します。次のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="40605f235bf487ac5cc36c28815be60cb52740c7" translate="yes" xml:space="preserve">
          <source>Parses &lt;code&gt;Tokens&lt;/code&gt; as if it was a list of expressions. Returns one of the following:</source>
          <target state="translated">&lt;code&gt;Tokens&lt;/code&gt; を式のリストであるかのように解析します。次のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="f5e90d2f7ca99ca3b5931aed84bb2db57dbbc833" translate="yes" xml:space="preserve">
          <source>Parses &lt;code&gt;Tokens&lt;/code&gt; as if it was a term. Returns one of the following:</source>
          <target state="translated">&lt;code&gt;Tokens&lt;/code&gt; を用語であるかのように解析します。次のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="86ede94d84471001f5bfaece799d5f9fa59c6b81" translate="yes" xml:space="preserve">
          <source>Parses a URI. If no scheme defaults are provided, the value of the &lt;code&gt;&lt;a href=&quot;#scheme_defaults&quot;&gt;scheme_defaults&lt;/a&gt;&lt;/code&gt; function is used.</source>
          <target state="translated">URIを解析します。スキームのデフォルトが指定されていない場合は、 &lt;code&gt;&lt;a href=&quot;#scheme_defaults&quot;&gt;scheme_defaults&lt;/a&gt;&lt;/code&gt; 関数の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="22aeb59a17ed90dfcd4e4d9f7b96872d034caad8" translate="yes" xml:space="preserve">
          <source>Parses a digit map body</source>
          <target state="translated">桁マップ本体を解析します。</target>
        </trans-unit>
        <trans-unit id="dd0ff0f3941a66c29a5874954a99087c88f42111" translate="yes" xml:space="preserve">
          <source>Parses a digit map body, represented as a list of characters, into a list of state transitions suited to be evaluated by megaco:eval_digit_map/1,2.</source>
          <target state="translated">文字のリストとして表現されたデジットマップ本体を、megaco:eval_digit_map/1,2で評価されるのに適した状態遷移のリストに解析します。</target>
        </trans-unit>
        <trans-unit id="f9c79f9646018440e3ebc591b18276096ccfad27" translate="yes" xml:space="preserve">
          <source>Parses an &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; and returns an IPv4 or IPv6 address string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; を解析し、IPv4またはIPv6アドレス文字列を返します。</target>
        </trans-unit>
        <trans-unit id="b6c5f3cfcbd29b09ebd5d2c45e4555d696f66e8a" translate="yes" xml:space="preserve">
          <source>Parses an &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; compliant &lt;code&gt;uri_string()&lt;/code&gt; into a &lt;code&gt;uri_map()&lt;/code&gt;, that holds the parsed components of the &lt;code&gt;URI&lt;/code&gt;. If parsing fails, an error tuple is returned.</source>
          <target state="translated">構文解析 &lt;code&gt;&lt;a href=&quot;https://www.ietf.org/rfc/rfc3986.txt&quot;&gt;RFC 3986&lt;/a&gt;&lt;/code&gt; に準拠 &lt;code&gt;uri_string()&lt;/code&gt; 内に &lt;code&gt;uri_map()&lt;/code&gt; の解析された部品保持する、 &lt;code&gt;URI&lt;/code&gt; を。解析が失敗した場合、エラータプルが返されます。</target>
        </trans-unit>
        <trans-unit id="e34be64e7e0d26bd52b330f13bd6dd5de7306b80" translate="yes" xml:space="preserve">
          <source>Parses an IPv4 address string and returns an &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt;. Accepts a shortened IPv4 address string.</source>
          <target state="translated">IPv4アドレス文字列を解析し、 &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt; を返します。短縮されたIPv4アドレス文字列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="18cc80d670fa4d4c9b9ad5cf24a3ddc556aaf953" translate="yes" xml:space="preserve">
          <source>Parses an IPv4 address string containing four fields, that is, &lt;strong&gt;not&lt;/strong&gt; shortened, and returns an &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">4つのフィールドを含む、つまり短縮されて&lt;strong&gt;いない&lt;/strong&gt; IPv4アドレス文字列を解析し、 &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c579f7b626178d3c420a2e9643120d9f2832584e" translate="yes" xml:space="preserve">
          <source>Parses an IPv4 or IPv6 address string and returns an &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt;. Accepts a shortened IPv4 address string.</source>
          <target state="translated">IPv4またはIPv6アドレス文字列を解析し、 &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt; を返します。短縮されたIPv4アドレス文字列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="5aa7dda9589a835953ec88f83cdf4c9c4edfbf77" translate="yes" xml:space="preserve">
          <source>Parses an IPv4 or IPv6 address string and returns an &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt;. Does &lt;strong&gt;not&lt;/strong&gt; accept a shortened IPv4 address string.</source>
          <target state="translated">IPv4またはIPv6アドレス文字列を解析し、 &lt;code&gt;&lt;a href=&quot;#type-ip4_address&quot;&gt;ip4_address()&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt; を返します。ん&lt;strong&gt;ではない&lt;/strong&gt;短縮IPv4アドレスの文字列を受け入れます。</target>
        </trans-unit>
        <trans-unit id="4b1a2097f959aec277e56d7b2f09d960c163d98b" translate="yes" xml:space="preserve">
          <source>Parses an IPv6 address string and returns an &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt;. Does &lt;strong&gt;not&lt;/strong&gt; accept IPv4 addresses.</source>
          <target state="translated">IPv6アドレス文字列を解析し、 &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt; を返します。い&lt;strong&gt;ない&lt;/strong&gt; IPv4アドレスを受け入れます。</target>
        </trans-unit>
        <trans-unit id="eac51ea7e0934384fa0112eeeaf88c4ebab04633" translate="yes" xml:space="preserve">
          <source>Parses an IPv6 address string and returns an &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt;. If an IPv4 address string is specified, an IPv4-mapped IPv6 address is returned.</source>
          <target state="translated">IPv6アドレス文字列を解析し、 &lt;code&gt;&lt;a href=&quot;#type-ip6_address&quot;&gt;ip6_address()&lt;/a&gt;&lt;/code&gt; を返します。IPv4アドレス文字列が指定されている場合、IPv4にマップされたIPv6アドレスが返されます。</target>
        </trans-unit>
        <trans-unit id="bf75044e156126d255e07b08533855db07ce584c" translate="yes" xml:space="preserve">
          <source>Parses an escript and extracts its sections. This is the reverse of &lt;code id=&quot;extract_2&quot;&gt;&lt;a href=&quot;#create_2&quot;&gt;create/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">escriptを解析し、そのセクションを抽出します。これは &lt;code id=&quot;extract_2&quot;&gt;&lt;a href=&quot;#create_2&quot;&gt;create/2&lt;/a&gt;&lt;/code&gt; の逆です。</target>
        </trans-unit>
        <trans-unit id="bdec3f2af87f1d33ee6b97ffa74db142958cd9e8" translate="yes" xml:space="preserve">
          <source>Parses the printout from an SQL table and returns a list of tuples.</source>
          <target state="translated">SQLテーブルからプリントアウトを解析し、タプルのリストを返します。</target>
        </trans-unit>
        <trans-unit id="f5365bc5f3e468cf2148385f40bff58f883061be" translate="yes" xml:space="preserve">
          <source>Parsing URIs into its components and returing a map</source>
          <target state="translated">URI をコンポーネントにパースしてマップを返す</target>
        </trans-unit>
        <trans-unit id="c8eb7f630b2224852a36c9237667bd9e0484c53a" translate="yes" xml:space="preserve">
          <source>Parsing and serializing non-UTF-8 form-urlencoded query strings are also supported (&lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML 5.0&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">UTF-8以外のフォームURLエンコードされたクエリ文字列の解析とシリアル化もサポートされています（ &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML 5.0&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="394ec0942f3b3fee9fe7ee73fb59ad007a74829f" translate="yes" xml:space="preserve">
          <source>Parsing of test specifications for &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; のテスト仕様の解析。</target>
        </trans-unit>
        <trans-unit id="546554c2840e61b82ab7aeb7ea63ff6baaa80832" translate="yes" xml:space="preserve">
          <source>Parsing of test specifications for Common Test.</source>
          <target state="translated">共通テストのテスト仕様の解析</target>
        </trans-unit>
        <trans-unit id="9769719e65a84af80528eb749196580978ee6445" translate="yes" xml:space="preserve">
          <source>Part of a match specification list cannot be changed directly. If a function has a match specification, it can be replaced with a new one. To change an existing match specification, use the BIF &lt;code&gt;&lt;a href=&quot;#trace_info-2&quot;&gt;erlang:trace_info/2&lt;/a&gt;&lt;/code&gt; to retrieve the existing match specification.</source>
          <target state="translated">一致仕様リストの一部を直接変更することはできません。関数に一致指定がある場合は、新しい関数に置き換えることができます。既存の一致指定を変更するには、BIF &lt;code&gt;&lt;a href=&quot;#trace_info-2&quot;&gt;erlang:trace_info/2&lt;/a&gt;&lt;/code&gt; を使用して、既存の一致指定を取得します。</target>
        </trans-unit>
        <trans-unit id="bf0d342d4ce21f38adfd95210e15a51046211865" translate="yes" xml:space="preserve">
          <source>Part of a pattern within square brackets is called a &quot;character class&quot;. The following are the only metacharacters in a character class:</source>
          <target state="translated">角括弧内のパターンの一部を「文字クラス」と呼びます。文字クラスに含まれるメタキャラクタは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="3bcb9ea04e25a8921a95bf6ab1089af46b847ca3" translate="yes" xml:space="preserve">
          <source>Partitions &lt;code&gt;List&lt;/code&gt; into a list of sublists and a remainder. &lt;code&gt;Lists&lt;/code&gt; contains one sublist for each key in &lt;code&gt;Keys&lt;/code&gt;, in the corresponding order. The relative order of the elements in each sublist is preserved from the original &lt;code&gt;List&lt;/code&gt;. &lt;code&gt;Rest&lt;/code&gt; contains the elements in &lt;code&gt;List&lt;/code&gt; that are not associated with any of the specified keys, also with their original relative order preserved.</source>
          <target state="translated">パーティション &lt;code&gt;List&lt;/code&gt; のサブリストと、残りのリストに。 &lt;code&gt;Lists&lt;/code&gt; には、 &lt;code&gt;Keys&lt;/code&gt; の各キーに対応する順序で1つのサブリストが含まれています。各サブリストの要素の相対的な順序は、元の &lt;code&gt;List&lt;/code&gt; から保持されます。 &lt;code&gt;Rest&lt;/code&gt; には、指定されたキーのいずれにも関連付けられていない &lt;code&gt;List&lt;/code&gt; の要素が含まれ、元の相対順序も保持されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
