<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="b159af3f46722bc08fb303932f585dbf455dbca5" translate="yes" xml:space="preserve">
          <source>Handle to a connection to a NETCONF server as returned by &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1,2&lt;/a&gt;&lt;/code&gt;, or to a session as returned by &lt;code&gt;&lt;a href=&quot;#session-1&quot;&gt;session/1-3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1,2&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#only_open-1&quot;&gt;only_open/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1,2&lt;/a&gt;&lt;/code&gt; によって返されるNETCONFサーバーへの接続、または &lt;code&gt;&lt;a href=&quot;#session-1&quot;&gt;session/1-3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1,2&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#only_open-1&quot;&gt;only_open/1,2&lt;/a&gt;&lt;/code&gt; によって返されるセッションへの接続を処理します。</target>
        </trans-unit>
        <trans-unit id="87b5cbd72ade701ab78a0c66eea3cc365bc59eac" translate="yes" xml:space="preserve">
          <source>Handle to the &lt;code&gt;epp&lt;/code&gt; server.</source>
          <target state="translated">&lt;code&gt;epp&lt;/code&gt; サーバーへのハンドル。</target>
        </trans-unit>
        <trans-unit id="e52aaa094b5e8a1137aac218cd0a979749732ffd" translate="yes" xml:space="preserve">
          <source>Handler Callback Functions</source>
          <target state="translated">ハンドラコールバック関数</target>
        </trans-unit>
        <trans-unit id="200f27a9fd62c17ba568575a28f8cc78a29e0aa9" translate="yes" xml:space="preserve">
          <source>Handler configuration data for Logger. The following default values apply:</source>
          <target state="translated">ロガーのためのハンドラ設定データ。以下のデフォルト値が適用されます。</target>
        </trans-unit>
        <trans-unit id="e767bf13ab13407d576b285180deba35039b9c4c" translate="yes" xml:space="preserve">
          <source>Handler filters are added with &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; and removed with &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt; logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;. They can also be specified directly in the configuration when adding a handler with &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt; logger:add_handler/3&lt;/a&gt;&lt;/code&gt; or via the Kernel configuration parameter &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハンドラフィルタはながら添加する &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; とを用いて除去 &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt; logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt; 。これらは、 &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt; logger:add_handler/3&lt;/a&gt;&lt;/code&gt; を使用してハンドラーを追加するときに構成で直接指定することも、カーネル構成パラメーター &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt; を介して指定することもできます。</target>
        </trans-unit>
        <trans-unit id="0e4e5ac3ff721d07867e9b05c8337ed55ee393d3" translate="yes" xml:space="preserve">
          <source>Handler filters are added with &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; and removed with &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;. They can also be specified directly in the configuration when adding a handler with &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt; or via the Kernel configuration parameter &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ハンドラフィルタはながら添加する &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; とを用いて除去 &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;logger#add_handler-3&quot;&gt;logger:add_handler/3&lt;/a&gt;&lt;/code&gt; を使用してハンドラーを追加するとき、またはカーネル構成パラメーター &lt;code&gt;&lt;a href=&quot;#logger_parameter&quot;&gt;logger&lt;/a&gt;&lt;/code&gt; を介して、構成で直接指定することもできます。</target>
        </trans-unit>
        <trans-unit id="a19df29c14bb59d2df47c78d5601e95477f6e53a" translate="yes" xml:space="preserve">
          <source>Handler filters are specified when adding the handler, or added or removed during runtime with &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt; logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">ハンドラーフィルターは、ハンドラーを追加するときに指定するか、実行時に &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt; logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt; logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt; を使用してそれぞれ追加または削除します。</target>
        </trans-unit>
        <trans-unit id="bfa2c83d2d8b95dd0f46137f7539ec6164e318e2" translate="yes" xml:space="preserve">
          <source>Handler filters are specified when adding the handler, or added or removed during runtime with &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">ハンドラーフィルターは、ハンドラーの追加時に指定するか、実行時に &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;logger#remove_handler_filter-2&quot;&gt;logger:remove_handler_filter/2&lt;/a&gt;&lt;/code&gt; でそれぞれ追加または削除します。</target>
        </trans-unit>
        <trans-unit id="f0065b00d67594d8a62cb8fb9796876e1d8da5ac" translate="yes" xml:space="preserve">
          <source>Handler specific configuration data is inserted by the handler callback itself, in a sub structure associated with the field named &lt;code&gt;config&lt;/code&gt;.</source>
          <target state="translated">ハンドラー固有の構成データは、ハンドラーコールバック自体によって、 &lt;code&gt;config&lt;/code&gt; というフィールドに関連付けられたサブ構造に挿入されます。</target>
        </trans-unit>
        <trans-unit id="17e94ab879668328c0d7f838700deffb10d37fcd" translate="yes" xml:space="preserve">
          <source>Handler specific configuration data is inserted by the handler callback itself, in a sub structure associated with the field named &lt;code&gt;config&lt;/code&gt;. See the &lt;code&gt;&lt;a href=&quot;logger_std_h&quot;&gt;logger_std_h(3)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger_disk_log_h&quot;&gt;logger_disk_log_h(3)&lt;/a&gt;&lt;/code&gt; manual pages for information about the specifc configuration for these handlers.</source>
          <target state="translated">ハンドラー固有の構成データは、ハンドラーコールバック自体によって、 &lt;code&gt;config&lt;/code&gt; という名前のフィールドに関連付けられたサブ構造に挿入されます。これらのハンドラーの特定の構成については、 &lt;code&gt;&lt;a href=&quot;logger_std_h&quot;&gt;logger_std_h(3)&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;logger_disk_log_h&quot;&gt;logger_disk_log_h(3)&lt;/a&gt;&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="e9a11f027cd6db3a106cb106c781e7e6546c3308" translate="yes" xml:space="preserve">
          <source>Handler specific configuration, that is, configuration data related to a specific handler implementation.</source>
          <target state="translated">ハンドラ固有の設定、すなわち、特定のハンドラの実装に関連する設定データ。</target>
        </trans-unit>
        <trans-unit id="8dd3565abe30287cdd82dbf04dfe72c3a01322cc" translate="yes" xml:space="preserve">
          <source>Handles SSH Connection Protocol messages that may need service-specific attention. For details, see &lt;code&gt;&lt;a href=&quot;ssh_connection&quot;&gt;ssh_connection:event()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サービス固有の注意が必要な場合があるSSH接続プロトコルメッセージを処理します。詳細については、 &lt;code&gt;&lt;a href=&quot;ssh_connection&quot;&gt;ssh_connection:event()&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="351ea12c7488865cb104522ed06fb519daaf6841" translate="yes" xml:space="preserve">
          <source>Handles SSH Connection Protocol messages that may need service-specific attention. For details, see &lt;code&gt;&lt;a href=&quot;ssh_connection#type-event&quot;&gt;ssh_connection:event()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">サービス固有の注意が必要なSSH接続プロトコルメッセージを処理します。詳細については、 &lt;code&gt;&lt;a href=&quot;ssh_connection#type-event&quot;&gt;ssh_connection:event()&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="88c94d64476ed5597f8322dfbff2cf130463d724" translate="yes" xml:space="preserve">
          <source>Handles messages from Erlang. The messages can either be plain data to be sent or more subtle instructions to the driver. This function is here mostly for data pumping.</source>
          <target state="translated">Erlangからのメッセージを処理します。メッセージはプレーンなデータを送るか、ドライバへの微妙な命令を送るかのどちらかになります。この関数は主にデータポンピングのためにあります。</target>
        </trans-unit>
        <trans-unit id="921a347faf64cd8a16325d957876e1c04d6d75e2" translate="yes" xml:space="preserve">
          <source>Handles messages sent by calling &lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/[2,3]&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#call-2&quot;&gt;call/[2,3]&lt;/a&gt;&lt;/code&gt; を呼び出して送信されたメッセージを処理します</target>
        </trans-unit>
        <trans-unit id="f1b9f0ea31717ef2e1c8cb50a77717454cf70a8b" translate="yes" xml:space="preserve">
          <source>Handles messages sent by calling &lt;code&gt;cast/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;cast/2&lt;/code&gt; を呼び出して送信されたメッセージを処理します。</target>
        </trans-unit>
        <trans-unit id="26b904f520d22bb388f5046965390b894bfa3594" translate="yes" xml:space="preserve">
          <source>Handles other messages than SSH Connection Protocol, call, or cast messages sent to the channel.</source>
          <target state="translated">チャンネルに送信された SSH 接続プロトコル、コール、キャストメッセージ以外のメッセージを処理します。</target>
        </trans-unit>
        <trans-unit id="2fd2edfd14e358bb3197eb296e3226354fa0bcbd" translate="yes" xml:space="preserve">
          <source>Handles storing of scanner information when parsing.</source>
          <target state="translated">解析時のスキャナ情報の保存を処理します。</target>
        </trans-unit>
        <trans-unit id="9787eca8b55e04c46475fed50a4b8ca6fa155b36" translate="yes" xml:space="preserve">
          <source>Handles the OTP-MIB</source>
          <target state="translated">OTP-MIBを扱う</target>
        </trans-unit>
        <trans-unit id="a6c4fd9a67f6ff85d671fb367281d35a7948d754" translate="yes" xml:space="preserve">
          <source>Handling any other memory management</source>
          <target state="translated">その他のメモリ管理を処理する</target>
        </trans-unit>
        <trans-unit id="8aef8f3753bae4ea18f0ce0e73cebcd5d20ccb5d" translate="yes" xml:space="preserve">
          <source>Handling instruction with variable number of operands</source>
          <target state="translated">オペランド数が可変の命令を扱う</target>
        </trans-unit>
        <trans-unit id="b341e45d0db6d71ec15e4a0de6c3934aeec4ccd4" translate="yes" xml:space="preserve">
          <source>Handling of binary data (binaries / bit syntax).</source>
          <target state="translated">バイナリデータ(バイナリ/ビット構文)の取り扱い。</target>
        </trans-unit>
        <trans-unit id="a2823aadf112ce5f5e68f202feabf8215b84b288" translate="yes" xml:space="preserve">
          <source>Handling of configuration files specifying data related to the System Under Test (SUT) (and any other variable data)</source>
          <target state="translated">テスト対象システム(SUT)に関するデータ(およびその他の変数データ)を指定した設定ファイルの取り扱い</target>
        </trans-unit>
        <trans-unit id="33fefddaf63d1b186bf16cc5d6c16046d15037f4" translate="yes" xml:space="preserve">
          <source>Handshake, interchange node name, and authenticate (2)</source>
          <target state="translated">ハンドシェイク、ノード名の交換、認証(2)</target>
        </trans-unit>
        <trans-unit id="c51f6db8fb76d17c47c7e717ca4c6c5f2b5b4133" translate="yes" xml:space="preserve">
          <source>Handy shortcuts for common tracing settings.</source>
          <target state="translated">一般的なトレース設定のための便利なショートカット。</target>
        </trans-unit>
        <trans-unit id="bd7d4b95fcd93ad906141f781368bc43c7c7f10a" translate="yes" xml:space="preserve">
          <source>Hangul</source>
          <target state="translated">Hangul</target>
        </trans-unit>
        <trans-unit id="ed413af43425a39818253cc0c5de7394d4a39735" translate="yes" xml:space="preserve">
          <source>Hanunoo</source>
          <target state="translated">Hanunoo</target>
        </trans-unit>
        <trans-unit id="de7ed76e4bc7658794475e0cb1788bf730fb9c21" translate="yes" xml:space="preserve">
          <source>Hard links are not supported on this platform.</source>
          <target state="translated">このプラットフォームではハードリンクはサポートされていません。</target>
        </trans-unit>
        <trans-unit id="e7bcf0ff0ecf672bee67708eac571eebae762e22" translate="yes" xml:space="preserve">
          <source>Hard real-time systems.</source>
          <target state="translated">ハードなリアルタイムシステム。</target>
        </trans-unit>
        <trans-unit id="df63d1ff1b01b407251d0ded52b5cebe7b3b5ed8" translate="yes" xml:space="preserve">
          <source>Hardware Watchdog</source>
          <target state="translated">ハードウェアウォッチドッグ</target>
        </trans-unit>
        <trans-unit id="65bebc8f73cff6923a62cf86dbdad6dcd9f3de59" translate="yes" xml:space="preserve">
          <source>Hardware memory barriers or memory fences are instructions that can be used to enforce order between memory accesses. Different hardware architectures provide different memory barriers. Lock free algorithms need to use memory barriers in order to ensure that memory accesses are not reordered in such ways that the algorithm breaks down. Memory barriers are also expensive instructions, so you typically want to minimize the use of these instructions.</source>
          <target state="translated">ハードウェアメモリバリアまたはメモリフェンスは、メモリアクセス間の順序を強制するために使用できる命令です。異なるハードウェアアーキテクチャは、異なるメモリバリアを提供します。ロックフリーなアルゴリズムでは、アルゴリズムが破綻するような方法でメモリアクセスが再順序付けされないようにするために、メモリバリアを使用する必要があります。メモリバリアは高価な命令でもあるので、一般的にはこれらの命令の使用を最小限に抑えたいものです。</target>
        </trans-unit>
        <trans-unit id="f66d0faec5f252a3b8add8ab78a2b77dfef38ca3" translate="yes" xml:space="preserve">
          <source>Hash algorithm to be used for signing the certificate together with the key option. Defaults to sha that is sha1.</source>
          <target state="translated">証明書の署名に使用するハッシュアルゴリズムを、鍵オプションとともに指定します。デフォルトは sha1 である sha です。</target>
        </trans-unit>
        <trans-unit id="c1abd7377d4f44f416003defcad46c11c4076434" translate="yes" xml:space="preserve">
          <source>Hash functions - &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf&quot;&gt; Secure Hash Standard&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1321.txt&quot;&gt; The MD5 Message Digest Algorithm (RFC 1321)&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1320.txt&quot;&gt;The MD4 Message Digest Algorithm (RFC 1320)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">ハッシュ関数 &lt;code&gt;&lt;a href=&quot;http://csrc.nist.gov/publications/fips/fips180-4/fips-180-4.pdf&quot;&gt; Secure Hash Standard&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1321.txt&quot;&gt; The MD5 Message Digest Algorithm (RFC 1321)&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc1320.txt&quot;&gt;The MD4 Message Digest Algorithm (RFC 1320)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="36646a9df5be6ffe4361209dc14cd9eabb8a54c1" translate="yes" xml:space="preserve">
          <source>Hash tables for Erlang terms (ETS).</source>
          <target state="translated">Erlang用語のハッシュテーブル (ETS)。</target>
        </trans-unit>
        <trans-unit id="66d9fc0e303c1db9ac127804366374bdb8ad808d" translate="yes" xml:space="preserve">
          <source>Hashes &lt;code&gt;term&lt;/code&gt; according to the specified &lt;code&gt;&lt;a href=&quot;#ErlNifHash&quot;&gt;ErlNifHash&lt;/a&gt;&lt;/code&gt;&lt;code&gt;type&lt;/code&gt;.</source>
          <target state="translated">指定された &lt;code&gt;&lt;a href=&quot;#ErlNifHash&quot;&gt;ErlNifHash&lt;/a&gt;&lt;/code&gt; &lt;code&gt;type&lt;/code&gt; に従ってハッシュ &lt;code&gt;term&lt;/code&gt; ハッシュします。</target>
        </trans-unit>
        <trans-unit id="93e30adaf0176847ba666855ceca8fa26f1db0ad" translate="yes" xml:space="preserve">
          <source>Having the source code in UTF-8 also allows you to write string literals, function names, and atoms containing Unicode characters with code points &amp;gt; 255. Module names, application names, and node names are still restricted to the ISO Latin-1 range. Binary literals, where you use type &lt;code&gt;/utf8&lt;/code&gt;, can also be expressed using Unicode characters &amp;gt; 255. Having module names or application names using characters other than 7-bit ASCII can cause trouble on operating systems with inconsistent file naming schemes, and can hurt portability, so it is not recommended.</source>
          <target state="translated">ソースコードをUTF-8にすると、文字列リテラル、関数名、およびコードポイントが255を超えるUnicode文字を含むアトムを作成することもできます。モジュール名、アプリケーション名、およびノー​​ド名は、ISO Latin-1の範囲に制限されます。タイプ &lt;code&gt;/utf8&lt;/code&gt; を使用するバイナリリテラルは、255を超えるUnicode文字を使用して表現することもできます。7ビットASCII以外の文字を使用するモジュール名またはアプリケーション名を使用すると、一貫性のないファイル命名スキームのあるオペレーティングシステムで問題が発生し、移植性が損なわれる可能性があります。なので、お勧めしません。</target>
        </trans-unit>
        <trans-unit id="9f670bf76875dd0a7bbc3b0854cf6973e8fd4fce" translate="yes" xml:space="preserve">
          <source>Having to generate extra random bits for small numbers costs a little performance. This function is about 20% slower than the regular &lt;code&gt;&lt;a href=&quot;#uniform_s-1&quot;&gt;uniform_s/1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">小さな数に対して追加のランダムビットを生成する必要がある場合、パフォーマンスが少し低下します。この関数は通常の &lt;code&gt;&lt;a href=&quot;#uniform_s-1&quot;&gt;uniform_s/1&lt;/a&gt;&lt;/code&gt; よりも約20％遅いです</target>
        </trans-unit>
        <trans-unit id="c4449e9b5eb52175eb4e08b8a7330653b852def9" translate="yes" xml:space="preserve">
          <source>Header elements: Module, Author - These commands insert lines on the form &lt;code&gt;-module(&lt;/code&gt;xxx&lt;code&gt;).&lt;/code&gt; and &lt;code&gt;-author('my@home').&lt;/code&gt;. They can be used directly, but are also used as part of the full headers described below.</source>
          <target state="translated">ヘッダー要素：Module、 &lt;code&gt;-module(&lt;/code&gt; これらのコマンドは、-module（ xxx &lt;code&gt;).&lt;/code&gt; 形式で行を挿入します。および &lt;code&gt;-author('my@home').&lt;/code&gt; 。これらは直接使用できますが、以下で説明する完全なヘッダーの一部としても使用されます。</target>
        </trans-unit>
        <trans-unit id="a6fe09edcf76c414cb39902b06a907d362c636fc" translate="yes" xml:space="preserve">
          <source>Header file for configuration data</source>
          <target state="translated">設定データのヘッダファイル</target>
        </trans-unit>
        <trans-unit id="a12c4113e1bb8f1f4886664bda35d4aa27d7be74" translate="yes" xml:space="preserve">
          <source>Heading for a hidden node. A hidden node is the same as a visible node, except that it is started with the &lt;code&gt;&quot;-hidden&quot;&lt;/code&gt; flag. States the channel number for the node.</source>
          <target state="translated">非表示のノードに向かっています。非表示ノードは、 &lt;code&gt;&quot;-hidden&quot;&lt;/code&gt; フラグで開始されることを除いて、可視ノードと同じです。ノードのチャネル番号を示します。</target>
        </trans-unit>
        <trans-unit id="fed55dc039cca5dcc6f8b46a4f4ace2200d528da" translate="yes" xml:space="preserve">
          <source>Heading for a node that was connected to the crashed node earlier. References (that is, process or port identifiers) to the not connected node existed at the time of the crash. States the channel number for the node.</source>
          <target state="translated">以前にクラッシュしたノードに接続されていたノードの見出し。クラッシュ時に接続されていなかったノードへの参照(つまり、プロセスやポートの識別子)が存在します。ノードのチャネル番号を指定します。</target>
        </trans-unit>
        <trans-unit id="952129998156402241d678235a6162ddb355874b" translate="yes" xml:space="preserve">
          <source>Heading for a visible node, that is, an alive node with a connection to the node that crashed. States the channel number for the node.</source>
          <target state="translated">表示されているノードの見出し、つまり、クラッシュしたノードに接続している生きているノードの見出しです。ノードのチャネル番号を指定します。</target>
        </trans-unit>
        <trans-unit id="c243e47447e24ffdd605f179f0a2cab8a40d6b7a" translate="yes" xml:space="preserve">
          <source>Heading.</source>
          <target state="translated">Heading.</target>
        </trans-unit>
        <trans-unit id="4fa5946d7c0314c7ba622549aa822d84deddf1a7" translate="yes" xml:space="preserve">
          <source>Heading. States the module name.</source>
          <target state="translated">Heading (見出し)。モジュール名を表します。</target>
        </trans-unit>
        <trans-unit id="150c7cf2786a06b4ea8a7aed067ae6ad9d638983" translate="yes" xml:space="preserve">
          <source>Heading. States the process identifier.</source>
          <target state="translated">見出し。プロセス識別子を表します。</target>
        </trans-unit>
        <trans-unit id="7145dfcf409c4e094b7363fa76ac09665f29cbd7" translate="yes" xml:space="preserve">
          <source>Heading. States the scheduler identifier.</source>
          <target state="translated">見出し。スケジューラの識別子を記述します。</target>
        </trans-unit>
        <trans-unit id="05a03b6ce3444cc92f49fde9b3239e70eade9242" translate="yes" xml:space="preserve">
          <source>Heading. States the table owner (a process identifier).</source>
          <target state="translated">見出し。テーブルの所有者(プロセス識別子)を示します。</target>
        </trans-unit>
        <trans-unit id="410899dc76f34f1fabf6ebe98f9e99757d1588a0" translate="yes" xml:space="preserve">
          <source>Heading. States the timer owner (a process identifier), that is, the process to receive the message when the timer expires.</source>
          <target state="translated">見出し。タイマーの所有者(プロセス識別子)、つまり、タイマーの期限が切れたときにメッセージを受信するプロセスを示す。</target>
        </trans-unit>
        <trans-unit id="c2d66ec52324213cab485604b51c2b78378fa0a7" translate="yes" xml:space="preserve">
          <source>Heap binaries are small binaries, up to 64 bytes, and are stored directly on the process heap. They are copied when the process is garbage-collected and when they are sent as a message. They do not require any special handling by the garbage collector.</source>
          <target state="translated">ヒープバイナリは最大64バイトの小さなバイナリで、プロセスのヒープに直接格納されます。プロセスがガベージコレクタされたときやメッセージとして送信されたときにコピーされます。ガベージコレクタによる特別な処理は必要ありません。</target>
        </trans-unit>
        <trans-unit id="21e21ed9381d58c024ca753fbeee40b36f3a6b32" translate="yes" xml:space="preserve">
          <source>Heartbeat interval, in milliseconds</source>
          <target state="translated">心拍間隔(ミリ秒</target>
        </trans-unit>
        <trans-unit id="4106d21c7ff6614f8b1f5e63e9c6e5e9cdc9e04e" translate="yes" xml:space="preserve">
          <source>Heartbeat monitoring of an Erlang runtime system.</source>
          <target state="translated">Erlangランタイムシステムのハートビート監視。</target>
        </trans-unit>
        <trans-unit id="348d00693e12bc983bd092677b90434b5a4d869e" translate="yes" xml:space="preserve">
          <source>Hebrew</source>
          <target state="translated">Hebrew</target>
        </trans-unit>
        <trans-unit id="c933a30976c11ef549273b016b878d75f830e3f9" translate="yes" xml:space="preserve">
          <source>HelloRetryRequest</source>
          <target state="translated">HelloRetryRequest</target>
        </trans-unit>
        <trans-unit id="268bfdeda15e6e6a18f731bf9369b4adf0706327" translate="yes" xml:space="preserve">
          <source>Help Menu</source>
          <target state="translated">ヘルプメニュー</target>
        </trans-unit>
        <trans-unit id="d62999fd30064fd05e82c60b2a94d7ce3e73892c" translate="yes" xml:space="preserve">
          <source>Hence, 1996 is a leap year, 1900 is not, but 2000 is.</source>
          <target state="translated">したがって、1996年はうるう年であり、1900年はそうではないが、2000年はそうである。</target>
        </trans-unit>
        <trans-unit id="e085c6d848b4c5dcb06ae3d79bc98bb5ed8aaaab" translate="yes" xml:space="preserve">
          <source>Hence, the argument entered as input is doubled as follows:</source>
          <target state="translated">したがって、入力として入力された引数は以下のように2倍になります。</target>
        </trans-unit>
        <trans-unit id="42595144f616321737f8b5e7f141df36f0ea93d3" translate="yes" xml:space="preserve">
          <source>Hence, the previous list comprehension demonstrates the formation of the list &lt;code&gt;E#employee.name&lt;/code&gt; such that &lt;code&gt;E&lt;/code&gt; is taken from the table of employees, and attribute &lt;code&gt;sex&lt;/code&gt; of each record is equal to the atom &lt;code&gt;female&lt;/code&gt;.</source>
          <target state="translated">したがって、前のリスト内包表記は、 &lt;code&gt;E&lt;/code&gt; が従業員のテーブルから取得され、各レコードの属性 &lt;code&gt;sex&lt;/code&gt; がアトム &lt;code&gt;female&lt;/code&gt; に等しいようなリスト &lt;code&gt;E#employee.name&lt;/code&gt; の形成を示しています。</target>
        </trans-unit>
        <trans-unit id="0305883084fd7655771a803404eb6b396bb82e43" translate="yes" xml:space="preserve">
          <source>Hence, when a disc-less node needs to find the schema definitions from a remote node on the network, this information must be supplied through application parameter &lt;code&gt;-mnesia extra_db_nodes NodeList&lt;/code&gt;. Without this configuration parameter set, &lt;code&gt;Mnesia&lt;/code&gt; starts as a single node system. Also, the function &lt;code&gt;&lt;a href=&quot;mnesia#change_config-2&quot;&gt;mnesia:change_config/2&lt;/a&gt;&lt;/code&gt; can be used to assign a value to &lt;code&gt;extra_db_nodes&lt;/code&gt; and force a connection after &lt;code&gt;Mnesia&lt;/code&gt; has been started, that is, &lt;code&gt;mnesia:change_config(extra_db_nodes, NodeList)&lt;/code&gt;.</source>
          <target state="translated">したがって、 &lt;code&gt;-mnesia extra_db_nodes NodeList&lt;/code&gt; ノードがネットワーク上のリモートノードからスキーマ定義を見つける必要がある場合、この情報はアプリケーションパラメータ-mnesia extra_db_nodes NodeListを介して提供する必要があります。この構成パラメーターを設定しない場合、 &lt;code&gt;Mnesia&lt;/code&gt; は単一ノードシステムとして起動します。また、関数 &lt;code&gt;&lt;a href=&quot;mnesia#change_config-2&quot;&gt;mnesia:change_config/2&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;extra_db_nodes&lt;/code&gt; に値を割り当て、 &lt;code&gt;Mnesia&lt;/code&gt; の開始後に接続を強制することができます。つまり、 &lt;code&gt;mnesia:change_config(extra_db_nodes, NodeList)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3f9a6ade28837bafcd59b3b5f9e9096aa0c39c5a" translate="yes" xml:space="preserve">
          <source>Here (?(R) is the start of a conditional subpattern, with two different alternatives for the recursive and non-recursive cases. Item (?R) is the actual recursive call.</source>
          <target state="translated">ここで、(?R)は、再帰的な場合と非再帰的な場合の2つの異なる選択肢を持つ、条件付きサブパターンの開始点である。項目(?R)は、実際の再帰的呼び出しです。</target>
        </trans-unit>
        <trans-unit id="95eada3e2f0063def4189cbe7e1ac07f33e51ad4" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;&quot;mysystem&quot;&lt;/code&gt; is the base release and &lt;code&gt;&quot;mysystem2&quot;&lt;/code&gt; is the release to upgrade to.</source>
          <target state="translated">ここで、 &lt;code&gt;&quot;mysystem&quot;&lt;/code&gt; はベースリリースであり、 &lt;code&gt;&quot;mysystem2&quot;&lt;/code&gt; はアップグレードするリリースです。</target>
        </trans-unit>
        <trans-unit id="c3ae7fc887a9fc509a0c94f1f548abf5e88538b2" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;+W w&lt;/code&gt; and &lt;code&gt;+R 9&lt;/code&gt; are emulator flags. &lt;code&gt;-s my_init&lt;/code&gt; is an init flag, interpreted by &lt;code&gt;init&lt;/code&gt;. &lt;code&gt;-sname arnie&lt;/code&gt; is a user flag, stored by &lt;code&gt;init&lt;/code&gt;. It is read by Kernel and causes the Erlang runtime system to become distributed. Finally, everything after &lt;code&gt;-extra&lt;/code&gt; (that is, &lt;code&gt;+bertie&lt;/code&gt;) is considered as plain arguments.</source>
          <target state="translated">ここで &lt;code&gt;+W w&lt;/code&gt; と &lt;code&gt;+R 9&lt;/code&gt; はエミュレータフラグです。 &lt;code&gt;-s my_init&lt;/code&gt; はinitによって解釈される &lt;code&gt;init&lt;/code&gt; フラグです。 &lt;code&gt;-sname arnie&lt;/code&gt; はユーザーフラグであり、 &lt;code&gt;init&lt;/code&gt; によって格納されます。カーネルによって読み込まれ、Erlangランタイムシステムが分散されます。最後に、 &lt;code&gt;-extra&lt;/code&gt; （つまり、 &lt;code&gt;+bertie&lt;/code&gt; ）の後のすべてが単純な引数と見なされます。</target>
        </trans-unit>
        <trans-unit id="18878a7a47d8170e6d38bdbab2ec1dd97fe93f48" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Binary&lt;/code&gt; is an Erlang binary that contains the encoded data. (If option &lt;code&gt;legacy_erlang_types&lt;/code&gt; has been given, only the binary is returned.)</source>
          <target state="translated">ここで &lt;code&gt;Binary&lt;/code&gt; は、エンコードされたデータを含むErlangバイナリです。（ &lt;code&gt;legacy_erlang_types&lt;/code&gt; オプションが指定されている場合、バイナリのみが返されます。）</target>
        </trans-unit>
        <trans-unit id="37df4c092f43bb499bc403c1f4e4f375ce537f8f" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;BytesForOpenType&lt;/code&gt; is a list of bytes constituting the encoding of the &quot;unknown&quot; &lt;code&gt;CHOICE&lt;/code&gt; alternative.</source>
          <target state="translated">ここで &lt;code&gt;BytesForOpenType&lt;/code&gt; は、「不明な」 &lt;code&gt;CHOICE&lt;/code&gt; 代替のエンコーディングを構成するバイトのリストです。</target>
        </trans-unit>
        <trans-unit id="46f5f684a77da256af5aa4d76e5b9497068275f5" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Fd&lt;/code&gt; was specified to function &lt;code&gt;init/3&lt;/code&gt; as:</source>
          <target state="translated">ここで、 &lt;code&gt;Fd&lt;/code&gt; は &lt;code&gt;init/3&lt;/code&gt; として機能するように指定されています。</target>
        </trans-unit>
        <trans-unit id="54d075fd5d42e82f879a36d53b74d7b98bbbfc33" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M0&lt;/code&gt; is any map. It follows that &lt;code&gt;M1 .. M4&lt;/code&gt; are maps as well.</source>
          <target state="translated">ここで &lt;code&gt;M0&lt;/code&gt; は任意のマップです。したがって、 &lt;code&gt;M1 .. M4&lt;/code&gt; もマップです。</target>
        </trans-unit>
        <trans-unit id="5980443888fa1217e79c3bb79e1e66f80464dd29" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is a term of type map and &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are any expression.</source>
          <target state="translated">ここで、 &lt;code&gt;M&lt;/code&gt; は型マップの項であり、 &lt;code&gt;K&lt;/code&gt; および &lt;code&gt;V&lt;/code&gt; は任意の式です。</target>
        </trans-unit>
        <trans-unit id="b1f20246edf736a721e4d108cf1124970da81a07" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is a term of type map, &lt;code&gt;V&lt;/code&gt; is an expression and &lt;code&gt;K&lt;/code&gt; is an expression that evaluates to an existing key in &lt;code&gt;M&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;M&lt;/code&gt; は型マップの項、 &lt;code&gt;V&lt;/code&gt; は式、 &lt;code&gt;K&lt;/code&gt; は &lt;code&gt;M&lt;/code&gt; の既存のキーに評価される式です。</target>
        </trans-unit>
        <trans-unit id="0698d19c4d4c3905620eb9ca2f7560cc47809caa" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is any map. The key &lt;code&gt;K&lt;/code&gt; must be a &lt;code&gt;&lt;a href=&quot;#guard_expressions&quot;&gt;guard expression&lt;/a&gt;&lt;/code&gt;, with all variables already bound. &lt;code&gt;V&lt;/code&gt; can be any pattern with either bound or unbound variables.</source>
          <target state="translated">ここで &lt;code&gt;M&lt;/code&gt; は任意のマップです。キー &lt;code&gt;K&lt;/code&gt; は、すべての変数がすでにバインドされている &lt;code&gt;&lt;a href=&quot;#guard_expressions&quot;&gt;guard expression&lt;/a&gt;&lt;/code&gt; である必要があります。 &lt;code&gt;V&lt;/code&gt; は、バインドされた変数またはバインドされていない変数のいずれかを持つ任意のパターンにすることができます。</target>
        </trans-unit>
        <trans-unit id="b6105a70c4b87b25ae269fb373351faa4cb7f203" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;M&lt;/code&gt; is any map. The key &lt;code&gt;K&lt;/code&gt; must be an expression with bound variables or literals. &lt;code&gt;V&lt;/code&gt; can be any pattern with either bound or unbound variables.</source>
          <target state="translated">ここで &lt;code&gt;M&lt;/code&gt; は任意のマップです。キー &lt;code&gt;K&lt;/code&gt; は、バインドされた変数またはリテラルを持つ式でなければなりません。 &lt;code&gt;V&lt;/code&gt; は、バインドされた変数またはバインドされていない変数を含む任意のパターンです。</target>
        </trans-unit>
        <trans-unit id="cfa51aff5e200195c56f9fac50cfa48993ce7499" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Node&lt;/code&gt; is the old node.</source>
          <target state="translated">ここで &lt;code&gt;Node&lt;/code&gt; は古いノードです。</target>
        </trans-unit>
        <trans-unit id="40663b6a0bc17a6c5bb5be7fc0a8ec85eb9e5df4" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Node&lt;/code&gt; is the terminated node.</source>
          <target state="translated">ここで、 &lt;code&gt;Node&lt;/code&gt; は終了したノードです。</target>
        </trans-unit>
        <trans-unit id="3f0cf7c1aa3a9460f5702ed6ce4797a96c09937c" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Sz&lt;/code&gt; is bound to the value in the first byte of the binary. &lt;code&gt;Sz&lt;/code&gt; is then used at the number of bytes to match out as a binary.</source>
          <target state="translated">ここで、 &lt;code&gt;Sz&lt;/code&gt; はバイナリの最初のバイトの値にバインドされています。次に、 &lt;code&gt;Sz&lt;/code&gt; は、バイナリとして一致するバイト数で使用されます。</target>
        </trans-unit>
        <trans-unit id="3f5a7de11b2a0f9a883784c833a5e64495abf297" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;Sz&lt;/code&gt; is the combined size of the header and the payload, so we will need to subtract one byte to get the size of the payload.</source>
          <target state="translated">ここで、 &lt;code&gt;Sz&lt;/code&gt; はヘッダーとペイロードの合計サイズであるため、ペイロードのサイズを取得するには1バイトを減算する必要があります。</target>
        </trans-unit>
        <trans-unit id="2aa26917569777b811a459c8edac3b1f6928d1a9" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;X&lt;/code&gt; gets the value &lt;code&gt;paris&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt;&lt;code&gt;{f,28}&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;X&lt;/code&gt; は値 &lt;code&gt;paris&lt;/code&gt; と &lt;code&gt;Y&lt;/code&gt; &lt;code&gt;{f,28}&lt;/code&gt; 取得します。</target>
        </trans-unit>
        <trans-unit id="0491a2d3210236bc79073f011f175603cf95e651" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;bin&lt;/code&gt; is a driver binary of length at least 50 and &lt;code&gt;drvport&lt;/code&gt; is a port handle. Notice that &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; comes after the elements of the list, likewise &lt;code&gt;ERL_DRV_TUPLE&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;bin&lt;/code&gt; は少なくとも50の長さのドライバーバイナリで、 &lt;code&gt;drvport&lt;/code&gt; はポートハンドルです。ことに注意してください &lt;code&gt;ERL_DRV_LIST&lt;/code&gt; は同様に、リストの要素の後に来る &lt;code&gt;ERL_DRV_TUPLE&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03614fcdf5fd8628354c2dc566e6863e0b8468ca" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;format_temps/1&lt;/code&gt; calls &lt;code&gt;convert_list_to_c/1&lt;/code&gt;. &lt;code&gt;convert_list_to_c/1&lt;/code&gt; takes off the head of the &lt;code&gt;List_of_cities&lt;/code&gt;, converts it to Celsius if needed. The | operator is used to add the (maybe) converted to the converted rest of the list:</source>
          <target state="translated">ここで &lt;code&gt;format_temps/1&lt;/code&gt; は &lt;code&gt;convert_list_to_c/1&lt;/code&gt; / 1を呼び出します。 &lt;code&gt;convert_list_to_c/1&lt;/code&gt; は、 &lt;code&gt;List_of_cities&lt;/code&gt; の先頭を削除し、必要に応じて摂氏に変換します。| 演算子を使用して、（多分）変換された残りのリストに変換されたものを追加します。</target>
        </trans-unit>
        <trans-unit id="0d41f0b5f278025a79f179eb50cbcf1d17def2de" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;kb.example.org&lt;/code&gt; serves any protocol while &lt;code&gt;www.example.org&lt;/code&gt; presents a secure web server.</source>
          <target state="translated">ここで、 &lt;code&gt;kb.example.org&lt;/code&gt; は任意のプロトコルを提供し、 &lt;code&gt;www.example.org&lt;/code&gt; は安全なWebサーバーを提供します。</target>
        </trans-unit>
        <trans-unit id="f36f1eb025a53a1dc6cfb7f8014034366d975093" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;pipe_name&lt;/code&gt; defaults to &lt;code&gt;/tmp/erlang.pipe.N&lt;/code&gt;.</source>
          <target state="translated">ここで &lt;code&gt;pipe_name&lt;/code&gt; のデフォルトは &lt;code&gt;/tmp/erlang.pipe.N&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="445ee2128dde70c3cdab895146aba251b7587bf5" translate="yes" xml:space="preserve">
          <source>Here &lt;code&gt;ref&lt;/code&gt; is a &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; the corresponding &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_opt&quot;&gt;transport_opt()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; list passed to &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;watchdog&lt;/code&gt; entry shows the state of a connection's RFC 3539 watchdog state machine. The &lt;code&gt;peer&lt;/code&gt; entry identifies the &lt;code&gt;&lt;code&gt;diameter_app:peer_ref()&lt;/code&gt;&lt;/code&gt; for which there will have been &lt;code&gt;peer_up/3&lt;/code&gt; callbacks for the Diameter applications identified by the &lt;code&gt;apps&lt;/code&gt; entry, &lt;code&gt;common&lt;/code&gt; being the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#application_alias&quot;&gt;application_alias()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;. The &lt;code&gt;caps&lt;/code&gt; entry identifies the capabilities sent by the local node and received from the peer during capabilities exchange. The &lt;code&gt;port&lt;/code&gt; entry displays socket-level information about the transport connection. The &lt;code&gt;statistics&lt;/code&gt; entry presents Diameter-level counters, an entry like &lt;code&gt;{{{0,280,1},recv},2}&lt;/code&gt; saying that the client has received 2 DWR messages: &lt;code&gt;{0,280,1} = {Application_Id, Command_Code, R_Flag}&lt;/code&gt;.</source>
          <target state="translated">ここで &lt;code&gt;ref&lt;/code&gt; は &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; で &lt;code&gt;options&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; に渡される対応する &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_opt&quot;&gt;transport_opt()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; リストのオプションです。 &lt;code&gt;watchdog&lt;/code&gt; エントリーショー接続のRFC 3539ウォッチドッグ・ステート・マシンの状態。 &lt;code&gt;peer&lt;/code&gt; エントリ識別 &lt;code&gt;&lt;code&gt;diameter_app:peer_ref()&lt;/code&gt;&lt;/code&gt; が存在しているであろういる &lt;code&gt;peer_up/3&lt;/code&gt; によって同定Diameterアプリケーションのためのコールバック &lt;code&gt;apps&lt;/code&gt; エントリ、 &lt;code&gt;common&lt;/code&gt; ある &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#application_alias&quot;&gt;application_alias()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; 。 &lt;code&gt;caps&lt;/code&gt; エントリは、ローカルノードによって送信され、機能交換中にピアから受信された機能を識別します。 &lt;code&gt;port&lt;/code&gt; エントリが表示されソケットレベルのトランスポート接続に関する情報を。 &lt;code&gt;statistics&lt;/code&gt; エントリ提示直径レベルカウンタ、等エントリ &lt;code&gt;{{{0,280,1},recv},2}&lt;/code&gt; クライアントは2 DWRメッセージを受信したことを言って： &lt;code&gt;{0,280,1} = {Application_Id, Command_Code, R_Flag}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff06bab188b6989420caf73f4bedde0091d8f752" translate="yes" xml:space="preserve">
          <source>Here a &lt;code&gt;TestDir&lt;/code&gt; can be used to point out the path to a &lt;code&gt;Suite&lt;/code&gt;. Option &lt;code&gt;testcase&lt;/code&gt; corresponds to option &lt;code&gt;-case&lt;/code&gt; in program &lt;code&gt;ct_run&lt;/code&gt;. Configuration files specified in &lt;code&gt;Opts&lt;/code&gt; are installed automatically at startup.</source>
          <target state="translated">ここで、 &lt;code&gt;TestDir&lt;/code&gt; を使用して &lt;code&gt;Suite&lt;/code&gt; へのパスを指摘できます。オプション &lt;code&gt;testcase&lt;/code&gt; は、プログラム &lt;code&gt;ct_run&lt;/code&gt; のオプション &lt;code&gt;-case&lt;/code&gt; に対応します。 &lt;code&gt;Opts&lt;/code&gt; で指定された構成ファイルは、起動時に自動的にインストールされます。</target>
        </trans-unit>
        <trans-unit id="1d215e0a4d1f50aa10db8d5770d81f093532091e" translate="yes" xml:space="preserve">
          <source>Here a system configuration with an MG and MGC residing in one Erlang node each is outlined:</source>
          <target state="translated">ここでは、MGとMGCがそれぞれ1つのErlangノードに存在するシステム構成を概説します。</target>
        </trans-unit>
        <trans-unit id="98f9cd42bd3f2f651c624dd6456d93b42bb7d908" translate="yes" xml:space="preserve">
          <source>Here also the path to the &lt;code&gt;pea-1.0&lt;/code&gt; ebin directory is provided.</source>
          <target state="translated">ここにも、 &lt;code&gt;pea-1.0&lt;/code&gt; ebinディレクトリへのパスが表示されます。</target>
        </trans-unit>
        <trans-unit id="37285c244117c11d8428f0cbdceb6d27dd880c01" translate="yes" xml:space="preserve">
          <source>Here are a few suggestions for how to avoid deadlock:</source>
          <target state="translated">デッドロックを回避する方法をいくつかご紹介します。</target>
        </trans-unit>
        <trans-unit id="922875c8c4eca4e656e135b3c76a4d89fd7a3552" translate="yes" xml:space="preserve">
          <source>Here are all type letters that are allowed on the left side of a transformation rule.</source>
          <target state="translated">ここでは、変換ルールの左側で許可されているすべてのタイプの文字を示します。</target>
        </trans-unit>
        <trans-unit id="64246a03dadd5871d19e3c38c5d243139b6de281" translate="yes" xml:space="preserve">
          <source>Here d is any number of decimal digits. However, the value of the setting must be less than the value set by the caller of &lt;code&gt;run/3&lt;/code&gt; for it to have any effect. That is, the pattern writer can lower the limit set by the programmer, but not raise it. If there is more than one setting of one of these limits, the lower value is used.</source>
          <target state="translated">ここで、dは10進数の任意の数です。ただし、設定を有効にするには、 &lt;code&gt;run/3&lt;/code&gt; の呼び出し元が設定した値よりも小さい値を設定する必要があります。つまり、パターンライターは、プログラマーが設定した制限を下げることはできますが、上げることはできません。これらの制限のいずれかの設定が複数ある場合は、低い方の値が使用されます。</target>
        </trans-unit>
        <trans-unit id="50c6e27284216f0fe5f85c8a2e068c1f3dc4d9db" translate="yes" xml:space="preserve">
          <source>Here each &lt;code&gt;ValueI&lt;/code&gt; is the default value for &lt;code&gt;FieldI&lt;/code&gt;.</source>
          <target state="translated">ここでは、各 &lt;code&gt;ValueI&lt;/code&gt; は、デフォルト値である &lt;code&gt;FieldI&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="42052c3c2c41c15b35977cf7cbb047bcba82e64f" translate="yes" xml:space="preserve">
          <source>Here follows a client side example, divide into several steps for readability.</source>
          <target state="translated">ここでは、クライアント側の例として、読みやすさのためにいくつかのステップに分けて説明します。</target>
        </trans-unit>
        <trans-unit id="9cbca54b367e1a4f6983365c6ace0c9e807f6a44" translate="yes" xml:space="preserve">
          <source>Here follows a description of the variables that are defined.</source>
          <target state="translated">ここでは、定義されている変数の説明を以下に示します。</target>
        </trans-unit>
        <trans-unit id="4292ce9c08f629230d2ca9c9a4b58e4451d521bd" translate="yes" xml:space="preserve">
          <source>Here follows a series of examples ranging from simple to more complex.</source>
          <target state="translated">ここでは、シンプルなものから複雑なものまで、一連の例を紹介します。</target>
        </trans-unit>
        <trans-unit id="7de541520f50013aebeb6484b87ccc69628a3a4f" translate="yes" xml:space="preserve">
          <source>Here follows a simple example of turning a gen_fsm into a &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt;. The example comes from the previous Users Guide for &lt;code&gt;gen_fsm&lt;/code&gt;</source>
          <target state="translated">次に、gen_fsmをgen_statemに変換する簡単な例を &lt;code&gt;&lt;a href=&quot;gen_statem&quot;&gt;gen_statem&lt;/a&gt;&lt;/code&gt; ます。この例は、以前の &lt;code&gt;gen_fsm&lt;/code&gt; のユーザーガイドに含まれています。</target>
        </trans-unit>
        <trans-unit id="056d3b9258e32cd2a4368560fe9287c17631f021" translate="yes" xml:space="preserve">
          <source>Here follows a simple test specification example:</source>
          <target state="translated">以下に簡単なテスト仕様の例を示します。</target>
        </trans-unit>
        <trans-unit id="d1a5f798f4fca1457852fb5ded06b31390f422db" translate="yes" xml:space="preserve">
          <source>Here follows a summary of the settings affecting Unicode:</source>
          <target state="translated">ここでは、Unicodeに影響を与える設定の概要を以下に示します。</target>
        </trans-unit>
        <trans-unit id="e3b0266f7e1ec5f16aeffe2f3cad390ea2d7f486" translate="yes" xml:space="preserve">
          <source>Here follows all types that are allowed to be used in operands for instructions being constructed on the right side of a transformation rule.</source>
          <target state="translated">ここでは、変換ルールの右側に構築された命令のオペランドで使用することが許可されているすべての型を示します。</target>
        </trans-unit>
        <trans-unit id="36f3b865fe0de9bfe34af31066b4e1fd4775070c" translate="yes" xml:space="preserve">
          <source>Here follows an example of a text message to give a feeling of the difference between the pretty and compact versions of text messages. First the pretty printed, well indented version with long keywords:</source>
          <target state="translated">ここでは、テキストメッセージのきれいなバージョンとコンパクトなバージョンの違いを感じることができるように、テキストメッセージの例を以下に示します。まず、きれいに印刷されていて、長いキーワードがよくインデントされているバージョンです。</target>
        </trans-unit>
        <trans-unit id="7f638f5d7f0c6d062a7666cb5822d5e70a90f9fb" translate="yes" xml:space="preserve">
          <source>Here follows an example of a text message to give a feeling of the difference between the pretty and compact versions of text messages. First the pretty, well indented version with long keywords:</source>
          <target state="translated">ここでは、テキストメッセージのきれいなバージョンとコンパクトなバージョンの違いを感じることができるように、テキストメッセージの例を以下に示します。まず、長いキーワードが入っているきれいなバージョンです。</target>
        </trans-unit>
        <trans-unit id="63d190124d61370d24019073f53f96c2b39b3a1c" translate="yes" xml:space="preserve">
          <source>Here follows some questions that you might have after reading this section with corresponding tips and links to the answers:</source>
          <target state="translated">ここでは、対応するヒントと答えへのリンクとこのセクションを読んだ後に持っているかもしれないいくつかの質問を以下に示します。</target>
        </trans-unit>
        <trans-unit id="bbd3c491062bf2c5eaa657373046fe305f85357c" translate="yes" xml:space="preserve">
          <source>Here follows the details of what exactly is returned.</source>
          <target state="translated">ここでは、具体的に何が返ってくるのかの詳細を説明します。</target>
        </trans-unit>
        <trans-unit id="df5e0247c5bebffe1acdce6f9b2820393133d959" translate="yes" xml:space="preserve">
          <source>Here follows the function of the old API. These functions only work on a list of Latin-1 characters.</source>
          <target state="translated">ここでは、旧APIの機能を以下に示します。これらの関数は、Latin-1文字のリストに対してのみ動作します。</target>
        </trans-unit>
        <trans-unit id="1e03b2fb11709d9ee5694c2236ecb3d219a8b412" translate="yes" xml:space="preserve">
          <source>Here follows the general configuration terms that are allowed in a cover specification file:</source>
          <target state="translated">ここでは、カバー仕様ファイルで許可されている一般的な設定用語について説明します。</target>
        </trans-unit>
        <trans-unit id="e7402642ba6204e4b5e86065a76f140fdda43cbe" translate="yes" xml:space="preserve">
          <source>Here follows the type letters that more or less directly corresponds to the types for generic instructions.</source>
          <target state="translated">ここでは、一般的な指示のためのタイプに多かれ少なかれ対応するタイプの文字を示しています。</target>
        </trans-unit>
        <trans-unit id="ce3bb36613c3cfade2e1099d8162ab6ab7c75926" translate="yes" xml:space="preserve">
          <source>Here follows type definitions that are used by more than one function in the ODBC API.</source>
          <target state="translated">ここでは、ODBC APIで複数の関数で使用される型の定義を示します。</target>
        </trans-unit>
        <trans-unit id="4cdd0b6622fc9da41960fdfdea1968c18c462ed7" translate="yes" xml:space="preserve">
          <source>Here is a bit more complex calculation:</source>
          <target state="translated">ここで少し複雑な計算をしてみます。</target>
        </trans-unit>
        <trans-unit id="f4538b53d8767dd2d98b8e1093b19420fc4852f6" translate="yes" xml:space="preserve">
          <source>Here is a complete example. The &lt;code&gt;new_map&lt;/code&gt; instruction is defined like this:</source>
          <target state="translated">これが完全な例です。 &lt;code&gt;new_map&lt;/code&gt; 命令は、次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="d349cc2e55bbdec82aca8231149986fa8cec97cd" translate="yes" xml:space="preserve">
          <source>Here is a function call as &lt;code&gt;convert_to_celsius({moscow,{c,-10}})&lt;/code&gt; as the argument to the function &lt;code&gt;print_temp&lt;/code&gt;. When function calls are &lt;strong&gt;nested&lt;/strong&gt; like this, they execute (evaluate) from the inside out. That is, first &lt;code&gt;convert_to_celsius({moscow,{c,-10}})&lt;/code&gt; is evaluated, which gives the value &lt;code&gt;{moscow,{c,-10}}&lt;/code&gt; as the temperature is already in Celsius. Then &lt;code&gt;print_temp({moscow,{c,-10}})&lt;/code&gt; is evaluated. The function &lt;code&gt;convert_to_celsius&lt;/code&gt; works in a similar way to the &lt;code&gt;convert_length&lt;/code&gt; function in the previous example.</source>
          <target state="translated">以下は、関数 &lt;code&gt;convert_to_celsius({moscow,{c,-10}})&lt;/code&gt; への引数として、convert_to_celsius（{moscow、{c、-10}}）としての関数 &lt;code&gt;print_temp&lt;/code&gt; です。関数呼び出しがこのように&lt;strong&gt;ネストされて&lt;/strong&gt;いる場合、それらは&lt;strong&gt;完全&lt;/strong&gt;に実行（評価）されます。つまり、最初に &lt;code&gt;convert_to_celsius({moscow,{c,-10}})&lt;/code&gt; が評価され、温度がすでに摂氏にあるため、値 &lt;code&gt;{moscow,{c,-10}}&lt;/code&gt; られます。次に、 &lt;code&gt;print_temp({moscow,{c,-10}})&lt;/code&gt; が評価されます。関数 &lt;code&gt;convert_to_celsius&lt;/code&gt; は、前の例の &lt;code&gt;convert_length&lt;/code&gt; 関数と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="7b73ef99e7403f3927ff26a039c6e2a2236690f9" translate="yes" xml:space="preserve">
          <source>Here is a list of some of the MIBs defined in the OTP system:</source>
          <target state="translated">OTPシステムで定義されているMIBの一部を紹介します。</target>
        </trans-unit>
        <trans-unit id="22821c0d8cd96a6861d0a1d65f8c0f8148458395" translate="yes" xml:space="preserve">
          <source>Here is a more complete sequence that contains both adding, updating and removing breakpoints.</source>
          <target state="translated">ここでは、ブレークポイントの追加、更新、削除の両方を含む、より完全なシーケンスを示します。</target>
        </trans-unit>
        <trans-unit id="f72c798b29ccb529841e5627093d7a56fd4814a8" translate="yes" xml:space="preserve">
          <source>Here is an example how the reserved virtual address space for literals can be raised to 2 GB (2048 MB):</source>
          <target state="translated">ここでは、リテラル用に予約された仮想アドレス空間を 2 GB (2048 MB)に引き上げる方法の例を示します。</target>
        </trans-unit>
        <trans-unit id="ba858455c144cf3056c405c091e7501e673c5076" translate="yes" xml:space="preserve">
          <source>Here is an example of a suitable expression sequence:</source>
          <target state="translated">好適な表現配列の例を示します。</target>
        </trans-unit>
        <trans-unit id="00e38b026becd87996568d41fcc3b8f1d79752be" translate="yes" xml:space="preserve">
          <source>Here is an example of this option:</source>
          <target state="translated">このオプションの例を示します。</target>
        </trans-unit>
        <trans-unit id="3f74118ff53b9ac72b1f1d3c138c82f074dbcd87" translate="yes" xml:space="preserve">
          <source>Here is an example showing how values can be specified:</source>
          <target state="translated">ここでは、値の指定方法を示す例を示します。</target>
        </trans-unit>
        <trans-unit id="b09da04e514cbcbfa274d3aa81a9da1bf964eb8e" translate="yes" xml:space="preserve">
          <source>Here is an example that shows how to count how many times each instruction is executed:</source>
          <target state="translated">ここでは、各命令の実行回数をカウントする例を示します。</target>
        </trans-unit>
        <trans-unit id="e17a454a258af8149a5983e38860d0dd63592107" translate="yes" xml:space="preserve">
          <source>Here is an example. The config-file has the following contents:</source>
          <target state="translated">ここでは例を示します。config-fileの内容は以下のようになっています。</target>
        </trans-unit>
        <trans-unit id="540ee2aaf7182c6dfc449b18e5accb694e3b0894" translate="yes" xml:space="preserve">
          <source>Here is an example:</source>
          <target state="translated">ここでは一例を紹介します。</target>
        </trans-unit>
        <trans-unit id="82a08ca8184b592a01eaaa55a20f8527f4cca1b8" translate="yes" xml:space="preserve">
          <source>Here is an overview what has been done so far:</source>
          <target state="translated">これまでに行われてきたことの概要をご紹介します。</target>
        </trans-unit>
        <trans-unit id="368746ba7f8d7397bdc8b79dac1f30fb770a5d1c" translate="yes" xml:space="preserve">
          <source>Here is defined a function that doubles the value of a number and assigned this function to a variable. Thus &lt;code&gt;Xf(5)&lt;/code&gt; returns value 10. Two useful functions when working with lists are &lt;code&gt;foreach&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;, which are defined as follows:</source>
          <target state="translated">ここでは、数値を2倍にする関数を定義し、この関数を変数に割り当てます。したがって、 &lt;code&gt;Xf(5)&lt;/code&gt; は値10を返します。リストを操作するときに役立つ2つの関数は、次のように定義されている &lt;code&gt;foreach&lt;/code&gt; と &lt;code&gt;map&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7ce731a790a4205763d05d03b9cf196ef4e9261e" translate="yes" xml:space="preserve">
          <source>Here is how to accomplish the state time-out in the previous example by instead using a generic time-out named for example &lt;code&gt;open&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;open&lt;/code&gt; などの名前の付いた一般的なタイムアウトを代わりに使用して、前の例の状態タイムアウトを実現する方法を示します。</target>
        </trans-unit>
        <trans-unit id="a0d2cc3be9345b9bae90d4c70bae158e4ffa9f78" translate="yes" xml:space="preserve">
          <source>Here is how to accomplish the state time-out in the previous example by instead using an Erlang Timer:</source>
          <target state="translated">ここでは、先ほどの例のようにErlangタイマーを使ってタイムアウトさせる方法を紹介します。</target>
        </trans-unit>
        <trans-unit id="eaf5ed4c0dabc7f41cc89c5f4a3aa5a863561e75" translate="yes" xml:space="preserve">
          <source>Here is only considered the case when Erlang/OTP is running on a UNIX system.</source>
          <target state="translated">ここでは、Erlang/OTPがUNIXシステム上で動作している場合のみ考慮しています。</target>
        </trans-unit>
        <trans-unit id="5522fd885b43a2eff23d532ec8cfc36c8effcd85" translate="yes" xml:space="preserve">
          <source>Here is the definition of &lt;code&gt;deallocate_return/1&lt;/code&gt;:</source>
          <target state="translated">これが &lt;code&gt;deallocate_return/1&lt;/code&gt; の定義です：</target>
        </trans-unit>
        <trans-unit id="5f17fc708829cfc6fb00458e5b09fdb85b5ef940" translate="yes" xml:space="preserve">
          <source>Here is the ping pong example modified to run on two separate nodes:</source>
          <target state="translated">ここでは、2つの別々のノードで実行するように変更したピンポンの例を示します。</target>
        </trans-unit>
        <trans-unit id="36bfcb0b8532e087fad81f46e3b585565729333b" translate="yes" xml:space="preserve">
          <source>Here keys &lt;code&gt;K1 .. Kn&lt;/code&gt; are any expressions with literals or bound variables. If all key expressions evalute successfully and all keys exist in map &lt;code&gt;M&lt;/code&gt;, all variables in &lt;code&gt;V1 .. Vn&lt;/code&gt; is matched to the associated values of their respective keys.</source>
          <target state="translated">ここで、キー &lt;code&gt;K1 .. Kn&lt;/code&gt; は、リテラルまたはバインドされた変数を持つ任意の式です。すべてのキー式が正常に評価され、すべてのキーがマップ &lt;code&gt;M&lt;/code&gt; に存在する場合、 &lt;code&gt;V1 .. Vn&lt;/code&gt; すべての変数は、それぞれのキーの関連する値に一致します。</target>
        </trans-unit>
        <trans-unit id="274b953d352c36df895d0e17f80b41429f1a2865" translate="yes" xml:space="preserve">
          <source>Here keys &lt;code&gt;K1 .. Kn&lt;/code&gt; are any expressions with literals or bound variables. If all keys exist in map &lt;code&gt;M&lt;/code&gt;, all variables in &lt;code&gt;V1 .. Vn&lt;/code&gt; is matched to the associated values of their respective keys.</source>
          <target state="translated">ここで、キー &lt;code&gt;K1 .. Kn&lt;/code&gt; は、リテラルまたはバインドされた変数を持つ任意の式です。マップ &lt;code&gt;M&lt;/code&gt; にすべてのキーが存在する場合、 &lt;code&gt;V1 .. Vn&lt;/code&gt; すべての変数は、それぞれのキーの関連する値と照合されます。</target>
        </trans-unit>
        <trans-unit id="69f329541992e8d01a4e5a912d3401c2919e27cf" translate="yes" xml:space="preserve">
          <source>Here more than one list is built. In each iteration step a new list is created that is one element longer than the new previous list.</source>
          <target state="translated">ここでは複数のリストが作成されます。各反復ステップでは、新しいリストが作成されますが、そのリストは新しい前のリストよりも1つ長い要素です。</target>
        </trans-unit>
        <trans-unit id="4207694f60edbd73e98081488a51ba1699a0f859" translate="yes" xml:space="preserve">
          <source>Here only the Kernel and STDLIB applications are started, that is, the system is started as an ordinary development system. Only two files are needed for all this to work:</source>
          <target state="translated">ここでは、カーネルとSTDLIBアプリケーションのみが起動され、つまり通常の開発システムとして起動されます。このすべてが動作するために必要なファイルは2つだけです。</target>
        </trans-unit>
        <trans-unit id="1a01cbab019a5244984e7111de8ade2f66f53c2f" translate="yes" xml:space="preserve">
          <source>Here some initialization is done, &lt;code&gt;start&lt;/code&gt; is called from &lt;code&gt;open_port&lt;/code&gt;. The data will be passed to &lt;code&gt;control&lt;/code&gt; and &lt;code&gt;stop&lt;/code&gt;.</source>
          <target state="translated">ここでいくつかの初期化が行われ、 &lt;code&gt;start&lt;/code&gt; が &lt;code&gt;open_port&lt;/code&gt; から呼び出されます。データは &lt;code&gt;control&lt;/code&gt; と &lt;code&gt;stop&lt;/code&gt; 渡されます。</target>
        </trans-unit>
        <trans-unit id="0dd38392b306d639490f3bfdab336a2923914d6c" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;is_eq_exact&lt;/code&gt; instruction is replaced with a specialized instruction that only compares literals, but only if the first operand is a register and the second operand is a literal.</source>
          <target state="translated">ここで、 &lt;code&gt;is_eq_exact&lt;/code&gt; 命令は、リテラルのみを比較する特殊な命令に置き換えられますが、最初のオペランドがレジスタで、2番目のオペランドがリテラルの場合に限ります。</target>
        </trans-unit>
        <trans-unit id="8285a3adddfb3c22982d47841765517ced8bef67" translate="yes" xml:space="preserve">
          <source>Here the &lt;code&gt;start/0&lt;/code&gt; function,</source>
          <target state="translated">ここでは &lt;code&gt;start/0&lt;/code&gt; 関数、</target>
        </trans-unit>
        <trans-unit id="6d1513bbb3276cbd3a38ec95089202ddef094a3d" translate="yes" xml:space="preserve">
          <source>Here the Ti's are atoms (the name of the type) and the Ai's are their arguments</source>
          <target state="translated">ここで、Tiは原子(型の名前)であり、Aiはその引数です。</target>
        </trans-unit>
        <trans-unit id="9acec98c2e5c443462282bed38bd34c514085f2c" translate="yes" xml:space="preserve">
          <source>Here the call to the GC BIF &lt;code&gt;'+'/2&lt;/code&gt; will be replaced with the instruction &lt;code&gt;gen_plus/5&lt;/code&gt;. Note that the same name as used in the C source code must be used for the BIF, which in this case is &lt;code&gt;splus&lt;/code&gt;. It is defined like this in &lt;code&gt;bit.tab&lt;/code&gt;:</source>
          <target state="translated">ここで、GC BIF &lt;code&gt;'+'/2&lt;/code&gt; の呼び出しは、命令 &lt;code&gt;gen_plus/5&lt;/code&gt; に置き換えられます。Cソースコードで使用されているのと同じ名前をBIFに使用する必要があることに注意してください。この場合は &lt;code&gt;splus&lt;/code&gt; です。これは &lt;code&gt;bit.tab&lt;/code&gt; で次のように定義されています：</target>
        </trans-unit>
        <trans-unit id="8b79b4c75297735efc429805d3857e3fd989ff1f" translate="yes" xml:space="preserve">
          <source>Here the concept of an &lt;strong&gt;anonymous variable&lt;/strong&gt; &quot;_&quot; is introduced. This is simply shorthand for a variable that gets a value, but the value is ignored. This can be used anywhere suitable, not just in funs. &lt;code&gt;Temp1 &amp;lt; Temp2&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; if &lt;code&gt;Temp1&lt;/code&gt; is less than &lt;code&gt;Temp2&lt;/code&gt;.</source>
          <target state="translated">ここでは、&lt;strong&gt;匿名変数&lt;/strong&gt;「_」の概念を紹介します。これは、値を取得する変数の省略形ですが、値は無視されます。これは、おもしろいだけでなく、どこでも使用できます。 &lt;code&gt;Temp1 &amp;lt; Temp2&lt;/code&gt; 返し &lt;code&gt;true&lt;/code&gt; 場合 &lt;code&gt;Temp1&lt;/code&gt; より少ない &lt;code&gt;Temp2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af3c6eb665702670ccab0184a2424627dfa000a9" translate="yes" xml:space="preserve">
          <source>Here the empty binary (&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;) represents the unassigned subpattern. In the &lt;code&gt;binary&lt;/code&gt; case, some information about the matching is therefore lost, as &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; can also be an empty string captured.</source>
          <target state="translated">ここで、空のバイナリ（ &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; ）は、割り当てられていないサブパターンを表します。で &lt;code&gt;binary&lt;/code&gt; として場合、マッチングに関するいくつかの情報は、したがって、失われ &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; はまた、捕捉空の文字列とすることができます。</target>
        </trans-unit>
        <trans-unit id="1abd874c2e02ed54ed46fd6eb351fd6b4434ff43" translate="yes" xml:space="preserve">
          <source>Here the file I/O server returns all available options for a file, which are the expected ones, &lt;code&gt;encoding&lt;/code&gt; and &lt;code&gt;binary&lt;/code&gt;. However, the standard shell has some more options:</source>
          <target state="translated">ここで、ファイルI / Oサーバーは、ファイルで使用可能なすべてのオプションを返します。これは、予期されるものである、 &lt;code&gt;encoding&lt;/code&gt; と &lt;code&gt;binary&lt;/code&gt; です。ただし、標準シェルにはさらにいくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="e6b28a4e54bbbd54cef63a1e3115ada96bc39316" translate="yes" xml:space="preserve">
          <source>Here the function &lt;code&gt;fac&amp;gt;&lt;/code&gt; in module &lt;code&gt;tut1&lt;/code&gt; is called with argument &lt;code&gt;4&lt;/code&gt;.</source>
          <target state="translated">ここで、モジュール &lt;code&gt;tut1&lt;/code&gt; の関数 &lt;code&gt;fac&amp;gt;&lt;/code&gt; が引数 &lt;code&gt;4&lt;/code&gt; で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e0d195818a01c51c6fa746b1e3cba1a090681218" translate="yes" xml:space="preserve">
          <source>Here the key to be retrieved is constructed from an expression:</source>
          <target state="translated">ここでは、検索されるキーは式から構築されます。</target>
        </trans-unit>
        <trans-unit id="76e0ad7418ef3374cc17d038856a722ae97d8a0c" translate="yes" xml:space="preserve">
          <source>Here the regular expression first matched the &quot;l&quot;, causing &quot;Er&quot; to be the first part in the result. When the regular expression matched, the (only) subexpression was bound to the &quot;l&quot;, so the &quot;l&quot; is inserted in the group together with &quot;Er&quot;. The next match is of the &quot;n&quot;, making &quot;a&quot; the next part to be returned. As the subexpression is bound to substring &quot;n&quot; in this case, the &quot;n&quot; is inserted into this group. The last group consists of the remaining string, as no more matches are found.</source>
          <target state="translated">ここでは、正規表現が最初に &quot;l&quot; にマッチし、結果の最初の部分が &quot;Er&quot; になりました。正規表現がマッチしたとき、(唯一の)副式は &quot;l &quot;と結合していたので、&quot;l &quot;は &quot;Er &quot;と一緒にグループに挿入されます。次にマッチしたのは &quot;n &quot;の部分なので、&quot;a &quot;が次に返される部分になります。この場合、副式は部分文字列 &quot;n &quot;と結合しているので、このグループに &quot;n &quot;が挿入される。最後のグループは、これ以上のマッチが見つからないので、残りの文字列で構成される。</target>
        </trans-unit>
        <trans-unit id="1da2c5952d714e65a29c19457fda0a08e5b2194a" translate="yes" xml:space="preserve">
          <source>Here the return value correspondingly points out all of the string, beginning at index 0, and it is 10 characters long:</source>
          <target state="translated">ここでの戻り値は、インデックス0から始まる文字列のすべてを指し示し、10文字の長さに対応しています。</target>
        </trans-unit>
        <trans-unit id="8a03dce83b236db4e1a3d7678c31aea14b2cf2d3" translate="yes" xml:space="preserve">
          <source>Here the second operand of &lt;code&gt;move&lt;/code&gt; is constrained to be X register 1.</source>
          <target state="translated">ここで、 &lt;code&gt;move&lt;/code&gt; の2番目のオペランドはXレジスタ1に制限されています。</target>
        </trans-unit>
        <trans-unit id="8588926d91ef055e0e752b5cc02d17b611653864" translate="yes" xml:space="preserve">
          <source>Here the shell detects lists containing printable characters or binaries containing printable characters in bytewise or UTF-8 encoding. But what is a printable character? One view is that anything the Unicode standard thinks is printable, is also printable according to the heuristic detection. The result is then that almost any list of integers are deemed a string, and all sorts of characters are printed, maybe also characters that your terminal lacks in its font set (resulting in some unappreciated generic output). Another way is to keep it backward compatible so that only the ISO Latin-1 character set is used to detect a string. A third way is to let the user decide exactly what Unicode ranges that are to be viewed as characters.</source>
          <target state="translated">ここでシェルは、印刷可能な文字を含むリストや、バイトワイズや UTF-8 エンコーディングの印刷可能な文字を含むバイナリを検出します。しかし、印刷可能な文字とは何でしょうか?一つの見方は、Unicode標準が印刷可能と考えるものは何でも、ヒューリスティックな検出に従って印刷可能であるということです。その結果、ほとんどすべての整数のリストが文字列とみなされ、さまざまな種類の文字が印刷されます。もう一つの方法は、ISO Latin-1 文字セットのみが文字列の検出に使用されるように下位互換性を保つことです。三つ目の方法は、文字として表示される Unicode の範囲を正確に決めることです。</target>
        </trans-unit>
        <trans-unit id="74160bc743886e5a3198a381b4d2136a5e539152" translate="yes" xml:space="preserve">
          <source>Here the signature and message in the last example is verifyed using the public key. The public key is stored in an engine, only to exemplify that it is possible. The public key could of course be handled openly as usual.</source>
          <target state="translated">ここでは、最後の例の署名とメッセージが公開鍵を使って検証されます。公開鍵はエンジンに格納されていますが、これはそれが可能であることを示すためだけのものです。もちろん、公開鍵は通常のようにオープンに扱うこともできます。</target>
        </trans-unit>
        <trans-unit id="d2d4f1fdcedde1498c2f363b018c87e4697de1db" translate="yes" xml:space="preserve">
          <source>Here the user flag &lt;code&gt;-myflag 1&lt;/code&gt; is passed to and stored by the &lt;code&gt;init&lt;/code&gt; process. It is a user-defined flag, presumably used by some user-defined application.</source>
          <target state="translated">ここで、ユーザーフラグ &lt;code&gt;-myflag 1&lt;/code&gt; が &lt;code&gt;init&lt;/code&gt; プロセスに渡され、保存されます。これはユーザー定義のフラグであり、おそらく一部のユーザー定義アプリケーションで使用されます。</target>
        </trans-unit>
        <trans-unit id="402b80a6663c605b1c8ebefde4ea19bbe39ddf28" translate="yes" xml:space="preserve">
          <source>Here we also handle the mode (&lt;code&gt;binary&lt;/code&gt; or &lt;code&gt;list&lt;/code&gt;) that can be set by request &lt;code&gt;setopts&lt;/code&gt;. By default, all OTP I/O servers send data back to the client as lists, but switching mode to &lt;code&gt;binary&lt;/code&gt; can increase efficiency if the I/O server handles it in an appropriate way. The implementation of &lt;code&gt;get_until&lt;/code&gt; is difficult to get efficient, as the supplied function is defined to take lists as arguments, but &lt;code&gt;get_chars&lt;/code&gt; and &lt;code&gt;get_line&lt;/code&gt; can be optimized for binary mode. However, this example does not optimize anything.</source>
          <target state="translated">ここでは、リクエスト &lt;code&gt;setopts&lt;/code&gt; で設定できるモード（ &lt;code&gt;binary&lt;/code&gt; または &lt;code&gt;list&lt;/code&gt; ）も処理します。デフォルトでは、すべてのOTP I / Oサーバーはデータをリストとしてクライアントに送り返しますが、I / Oサーバーが適切な方法で処理すると、モードを &lt;code&gt;binary&lt;/code&gt; 切り替えると効率が向上します。提供された関数はリストを引数として取るように定義されているため、 &lt;code&gt;get_until&lt;/code&gt; の実装を効率的に行うことは困難ですが、 &lt;code&gt;get_chars&lt;/code&gt; および &lt;code&gt;get_line&lt;/code&gt; はバイナリモード用に最適化できます。ただし、この例では何も最適化されません。</target>
        </trans-unit>
        <trans-unit id="713d45f85233ed9eece81ff1efd22a57b2efbd58" translate="yes" xml:space="preserve">
          <source>Here we check the result from postgres. If it is data, we encode it as lists of lists with column data. Everything from postgres is C strings, so we use &lt;code&gt;ei_x_encode_string&lt;/code&gt; to send the result as strings to Erlang. (The head of the list contains the column names.)</source>
          <target state="translated">ここでは、postgresの結果を確認します。データの場合は、列データを含むリストのリストとしてエンコードします。postgresからのすべてはC文字列なので、 &lt;code&gt;ei_x_encode_string&lt;/code&gt; を使用して結果を文字列としてErlangに送信します。（リストの先頭には列名が含まれています。）</target>
        </trans-unit>
        <trans-unit id="8cf9c63e747cf336dd3ef22dd8cb27c624c36fc6" translate="yes" xml:space="preserve">
          <source>Here we create an archive script containing both Erlang code and Beam code, then we iterate over all files in the archive and collect their contents and some information about them:</source>
          <target state="translated">ここではErlangコードとBeamコードの両方を含むアーカイブスクリプトを作成し、アーカイブ内のすべてのファイルを反復処理して内容と情報を収集しています。</target>
        </trans-unit>
        <trans-unit id="1a6714f5fe50c9a6bae77694ae3f43b0dac16cb9" translate="yes" xml:space="preserve">
          <source>Here we create file named &lt;code&gt;TAGS&lt;/code&gt; placed it in the directory &lt;code&gt;../projectdir&lt;/code&gt;. The file contains information about the functions, records, and macro definitions of the three files.</source>
          <target state="translated">ここでは、ディレクトリ &lt;code&gt;../projectdir&lt;/code&gt; に配置された &lt;code&gt;TAGS&lt;/code&gt; という名前のファイルを作成します。ファイルには、3つのファイルの関数、レコード、およびマクロ定義に関する情報が含まれています。</target>
        </trans-unit>
        <trans-unit id="9874d5ad87ce020d9aa6aeca71513d4b4236fc2e" translate="yes" xml:space="preserve">
          <source>Here we have cheated a little by more or less only implementing &lt;code&gt;get_until&lt;/code&gt; and using internal helpers to implement &lt;code&gt;get_chars&lt;/code&gt; and &lt;code&gt;get_line&lt;/code&gt;. In production code, this can be inefficient, but that depends on the frequency of the different requests. Before we start implementing functions &lt;code&gt;put_chars/2&lt;/code&gt; and &lt;code&gt;get_until/5&lt;/code&gt;, we examine the few remaining requests:</source>
          <target state="translated">ここでは、多かれ少なかれ &lt;code&gt;get_until&lt;/code&gt; のみを実装し、内部ヘルパーを使用して &lt;code&gt;get_chars&lt;/code&gt; と &lt;code&gt;get_line&lt;/code&gt; を実装することで少しずつだましました。本番コードではこれは非効率的ですが、それはさまざまなリクエストの頻度に依存します。関数 &lt;code&gt;put_chars/2&lt;/code&gt; および &lt;code&gt;get_until/5&lt;/code&gt; の実装を開始する前に、残りのいくつかのリクエストを調べます。</target>
        </trans-unit>
        <trans-unit id="6510718f8630e547e008ebde09d2abc7f3c89e66" translate="yes" xml:space="preserve">
          <source>Here we see that no function distinguishes itself considerably, which is very normal.</source>
          <target state="translated">ここでは、どの機能もそれ自体をかなり区別していないことがわかりますが、これはごく普通のことです。</target>
        </trans-unit>
        <trans-unit id="465ac4aff2d9132b9905c273ca86662ca9c4c44b" translate="yes" xml:space="preserve">
          <source>Here we will show how &lt;code&gt;i_increment&lt;/code&gt; can be implemented as a combined instruction. We will show each individual fragment first, and then show how to connect them together. First we will need a variable that we can store the value fetched from the register in:</source>
          <target state="translated">ここでは、 &lt;code&gt;i_increment&lt;/code&gt; を組み合わせた命令として実装する方法を示します。最初に個々のフラグメントを示し、次にそれらを接続する方法を示します。まず、レジスタからフェッチされた値を次の場所に格納できる変数が必要になります。</target>
        </trans-unit>
        <trans-unit id="eaf2aac2ad0fe378997e3d3e60e43ee8d81edf6f" translate="yes" xml:space="preserve">
          <source>Here you see the use of &lt;code&gt;|&lt;/code&gt; to get the first two elements from the list. If you try to get more elements from the list than there are elements in the list, an error is returned. Notice also the special case of the list with no elements, []:</source>
          <target state="translated">ここであなたは &lt;code&gt;|&lt;/code&gt; の使用を見る リストから最初の2つの要素を取得します。リストにある要素よりも多くの要素をリストから取得しようとすると、エラーが返されます。要素のないリストの特別なケース[]にも注意してください。</target>
        </trans-unit>
        <trans-unit id="08b89fd2c7d9c7d70984a33c283c54baceee4244" translate="yes" xml:space="preserve">
          <source>Here's another example:</source>
          <target state="translated">別の例を挙げてみましょう。</target>
        </trans-unit>
        <trans-unit id="7996ce3c70bc2e6c31030c0947978923388510ef" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;A&lt;/code&gt; and &lt;code&gt;B&lt;/code&gt; are any expressions and &lt;code&gt;M0&lt;/code&gt; through &lt;code&gt;M4&lt;/code&gt; are the resulting map terms.</source>
          <target state="translated">ここで、 &lt;code&gt;A&lt;/code&gt; と &lt;code&gt;B&lt;/code&gt; は任意の式で、 &lt;code&gt;M0&lt;/code&gt; から &lt;code&gt;M4&lt;/code&gt; は結果のマップ項です。</target>
        </trans-unit>
        <trans-unit id="c7c0f63e6feeafed42e889764b5df7fa6ae6b07c" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;Arguments&lt;/code&gt; is a list of zero or more arguments. The &lt;code&gt;-callback&lt;/code&gt; attribute is to be preferred since the extra type information can be used by tools to produce documentation or find discrepancies.</source>
          <target state="translated">ここで、 &lt;code&gt;Arguments&lt;/code&gt; は0個以上の引数のリストです。 &lt;code&gt;-callback&lt;/code&gt; 属性は、余分な種類の情報がドキュメントを生成したり矛盾を見つけるために、ツールで使用することができますので、好ましいことがあります。</target>
        </trans-unit>
        <trans-unit id="2f63ec204ef51669a64a9412596d13bb3d314da9" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;Bin&lt;/code&gt; is bound and the elements are bound or unbound, as in any match.</source>
          <target state="translated">ここでは、 &lt;code&gt;Bin&lt;/code&gt; がバインドされ、要素はすべての一致と同様にバインドまたはアンバインドされます。</target>
        </trans-unit>
        <trans-unit id="973cdf584bee5b3aebaf02a66418e8e39a601f3c" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;Expr&lt;/code&gt; is an arbitrary expression, and each &lt;code&gt;Qualifier&lt;/code&gt; is either a generator or a filter.</source>
          <target state="translated">ここで、 &lt;code&gt;Expr&lt;/code&gt; は任意の式であり、各 &lt;code&gt;Qualifier&lt;/code&gt; はジェネレーターまたはフィルターのいずれかです。</target>
        </trans-unit>
        <trans-unit id="bfa551fd993d5a7e252540038e550aefce8b5242" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;Fd&lt;/code&gt; is the file descriptor for the destination file, or the atom &lt;code&gt;standard_io&lt;/code&gt;. &lt;code&gt;_TraceInfo&lt;/code&gt; contains information from the trace information file (see section &lt;code&gt;&lt;a href=&quot;#trace_info&quot;&gt;Trace Information and File .ti&lt;/a&gt;&lt;/code&gt;). &lt;code&gt;State&lt;/code&gt; is a state variable for the format handler fun. The initial value of variable &lt;code&gt;State&lt;/code&gt; is specified with the handler option, for example:</source>
          <target state="translated">ここで、 &lt;code&gt;Fd&lt;/code&gt; は宛先ファイルのファイル記述子、またはアトム &lt;code&gt;standard_io&lt;/code&gt; です。 &lt;code&gt;_TraceInfo&lt;/code&gt; には、トレース情報ファイルからの情報が含まれます（セクション &lt;code&gt;&lt;a href=&quot;#trace_info&quot;&gt;Trace Information and File .ti&lt;/a&gt;&lt;/code&gt; 参照）。 &lt;code&gt;State&lt;/code&gt; は、フォーマットハンドラーfunの状態変数です。変数 &lt;code&gt;State&lt;/code&gt; の初期値は、ハンドラオプションで指定されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="034cc33bbe80f01fd04e26b576b575b1176dd3da" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;File&lt;/code&gt; is used as the new variable instead of &lt;code&gt;X&lt;/code&gt;. This is not so wise because code in the fun body cannot refer to the variable &lt;code&gt;File&lt;/code&gt;, which is defined outside of the fun. Compiling this example gives the following diagnostic:</source>
          <target state="translated">ここでは、 &lt;code&gt;X&lt;/code&gt; の代わりに &lt;code&gt;File&lt;/code&gt; が新しい変数として使用されています。fun本体のコードはfunの外部で定義されている変数 &lt;code&gt;File&lt;/code&gt; を参照できないため、これはそれほど賢明ではありません。この例をコンパイルすると、次の診断が得られます。</target>
        </trans-unit>
        <trans-unit id="5adef5db9dcd73f5eebe767f23b82b503f930844" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;S1LogDir&lt;/code&gt; and &lt;code&gt;S2LogDir&lt;/code&gt; are the directories named &lt;code&gt;&amp;lt;TestName&amp;gt;.logs&lt;/code&gt; for each test respectively.</source>
          <target state="translated">ここで、 &lt;code&gt;S1LogDir&lt;/code&gt; および &lt;code&gt;S2LogDir&lt;/code&gt; は、各テストの &lt;code&gt;&amp;lt;TestName&amp;gt;.logs&lt;/code&gt; という名前のディレクトリです。</target>
        </trans-unit>
        <trans-unit id="eb55d7bcff03863047df1e0e245a8ad25b9600d1" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;conn_types&lt;/code&gt; specifies SSH, Telnet, FTP, RPC, and/or SNMP.</source>
          <target state="translated">ここで、 &lt;code&gt;conn_types&lt;/code&gt; はSSH、Telnet、FTP、RPC、SNMPを指定します。</target>
        </trans-unit>
        <trans-unit id="4daf6d3bc463f7669637809f88efe649c2ac2625" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;demo()&lt;/code&gt; evaluates to &lt;code&gt;&quot;Robert&quot;&lt;/code&gt;.</source>
          <target state="translated">ここで、 &lt;code&gt;demo()&lt;/code&gt; は &lt;code&gt;&quot;Robert&quot;&lt;/code&gt; と評価されます。</target>
        </trans-unit>
        <trans-unit id="3fefc36dd07702f1db04b9023b0ea8fdf578263c" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;init&lt;/code&gt; does not need any input data and ignores its argument. For &lt;code&gt;terminal_logger&lt;/code&gt;, the internal state is not used. For &lt;code&gt;file_logger&lt;/code&gt;, the internal state is used to save the open file descriptor.</source>
          <target state="translated">ここでは、 &lt;code&gt;init&lt;/code&gt; は入力データを必要とせず、その引数を無視します。 &lt;code&gt;terminal_logger&lt;/code&gt; 、内部状態は使用されません。 &lt;code&gt;file_logger&lt;/code&gt; 、内部状態はオープンファイル記述子を保存するために使用されます。</target>
        </trans-unit>
        <trans-unit id="aba5e0fd19010e47f153b1c0f6d8f4209d232205" translate="yes" xml:space="preserve">
          <source>Here, &lt;code&gt;tuplep&lt;/code&gt; points to an &lt;code&gt;ETERM&lt;/code&gt; struct representing a tuple with two elements; the function name (atom) and the argument (integer). Using the function &lt;code&gt;erl_element()&lt;/code&gt; from &lt;code&gt;erl_eterm&lt;/code&gt;, these elements can be extracted, but they must also be declared as pointers to an &lt;code&gt;ETERM&lt;/code&gt; struct:</source>
          <target state="translated">ここで、 &lt;code&gt;tuplep&lt;/code&gt; は2つの要素を持つタプルを表す &lt;code&gt;ETERM&lt;/code&gt; 構造体を指します。関数名（アトム）と引数（整数）。機能の使い方 &lt;code&gt;erl_element()&lt;/code&gt; から &lt;code&gt;erl_eterm&lt;/code&gt; を、これらの要素を抽出することができ、彼らはまた、へのポインタとして宣言されなければならない &lt;code&gt;ETERM&lt;/code&gt; の構造体：</target>
        </trans-unit>
        <trans-unit id="3c764964387488a9567355a791b642a791153d46" translate="yes" xml:space="preserve">
          <source>Here, the communication with C is hidden in the implementation of &lt;code&gt;complex.erl&lt;/code&gt;. In the following sections, it is shown how this module can be implemented using the different interoperability mechanisms.</source>
          <target state="translated">ここでは、Cとの通信は &lt;code&gt;complex.erl&lt;/code&gt; の実装に隠されています。次のセクションでは、さまざまな相互運用性メカニズムを使用してこのモジュールを実装する方法を示します。</target>
        </trans-unit>
        <trans-unit id="a9363a371565a254c5f940c661f77bc4aea0306a" translate="yes" xml:space="preserve">
          <source>Here, the data type &lt;code&gt;'IssuingDistributionPoint'&lt;/code&gt; is represented as the following Erlang record:</source>
          <target state="translated">ここでは、データ型 &lt;code&gt;'IssuingDistributionPoint'&lt;/code&gt; は次のErlangレコードとして表されます。</target>
        </trans-unit>
        <trans-unit id="27fe64fbf8e84fafc5f91f9a5e3d6acc46a097cf" translate="yes" xml:space="preserve">
          <source>Here, the directive &lt;code&gt;on_load&lt;/code&gt; is used to get function &lt;code&gt;init&lt;/code&gt; to be automatically called when the module is loaded. If &lt;code&gt;init&lt;/code&gt; returns anything other than &lt;code&gt;ok&lt;/code&gt;, such when the loading of the NIF library fails in this example, the module is unloaded and calls to functions within it, fail.</source>
          <target state="translated">ここで、 &lt;code&gt;on_load&lt;/code&gt; ディレクティブは、モジュールが読み込まれたときに関数 &lt;code&gt;init&lt;/code&gt; が自動的に呼び出されるようにするために使用されます。この例でNIFライブラリのロードが失敗した場合など、 &lt;code&gt;init&lt;/code&gt; が &lt;code&gt;ok&lt;/code&gt; 以外を返す場合、モジュールはアンロードされ、その中の関数の呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="6256ecd948c793aa1993c3c12236863caa0abcfe" translate="yes" xml:space="preserve">
          <source>Here, the handler also provides for dynamically reloading of configuration variables. If &lt;code&gt;&lt;a href=&quot;ct#reload_config-1&quot;&gt;ct:reload_config(localtime)&lt;/a&gt;&lt;/code&gt; is called from the test case function, all variables loaded with &lt;code&gt;config_driver:read_config/1&lt;/code&gt; are updated with their latest values, and the new value for variable &lt;code&gt;localtime&lt;/code&gt; is returned.</source>
          <target state="translated">ここでは、ハンドラーは構成変数の動的な再読み込みも提供します。場合 &lt;code&gt;&lt;a href=&quot;ct#reload_config-1&quot;&gt;ct:reload_config(localtime)&lt;/a&gt;&lt;/code&gt; テストケース関数から呼び出され、を搭載したすべての変数 &lt;code&gt;config_driver:read_config/1&lt;/code&gt; は、最新の値で更新され、変数の新しい値 &lt;code&gt;localtime&lt;/code&gt; 返されます。</target>
        </trans-unit>
        <trans-unit id="e9736652812b2b809017435f7a09559dc888bc0b" translate="yes" xml:space="preserve">
          <source>Here, the same test run as in the previous examples are executed (and possibly repeated). However, when the time-out occurs, after 1 hour, &lt;code&gt;Common Test&lt;/code&gt; finishes the entire test run before stopping (that is, both &lt;code&gt;to1&lt;/code&gt; and &lt;code&gt;to2&lt;/code&gt; are always executed in the same test run).</source>
          <target state="translated">ここでは、前の例と同じテスト実行が実行されます（おそらく繰り返されます）。ただし、タイムアウトが発生すると、1時間後、 &lt;code&gt;Common Test&lt;/code&gt; はテスト実行全体を終了してから停止します（つまり、 &lt;code&gt;to1&lt;/code&gt; と &lt;code&gt;to2&lt;/code&gt; の両方が常に同じテスト実行で実行されます）。</target>
        </trans-unit>
        <trans-unit id="3cf47ffc88aa174995add08f4cbe16924d5664a9" translate="yes" xml:space="preserve">
          <source>Here, the same tests as in Example 1 are run, but with flag &lt;code&gt;force_stop&lt;/code&gt; set to &lt;code&gt;skip_rest&lt;/code&gt;. If time-out occurs while executing tests in directory &lt;code&gt;to1&lt;/code&gt;, the remaining test cases in &lt;code&gt;to1&lt;/code&gt; are skipped and the test is aborted without running the tests in &lt;code&gt;to2&lt;/code&gt; another time. If time-out occurs while executing tests in directory &lt;code&gt;to2&lt;/code&gt;, the remaining test cases in &lt;code&gt;to2&lt;/code&gt; are skipped and the test is aborted.</source>
          <target state="translated">ここでは、例1と同じテストが実行されますが、フラグ &lt;code&gt;force_stop&lt;/code&gt; がskip_restに設定されてい &lt;code&gt;skip_rest&lt;/code&gt; 。ディレクトリ &lt;code&gt;to1&lt;/code&gt; でテストを実行中にタイムアウトが発生した場合、 &lt;code&gt;to1&lt;/code&gt; の残りのテストケースはスキップされ、テストは &lt;code&gt;to2&lt;/code&gt; で再度テストを実行せずに中止されます。ディレクトリ &lt;code&gt;to2&lt;/code&gt; でテストの実行中にタイムアウトが発生した場合、 &lt;code&gt;to2&lt;/code&gt; の残りのテストケースはスキップされ、テストは中止されます。</target>
        </trans-unit>
        <trans-unit id="8725eccd38a40d0e24f360a6bca5f39b565b9081" translate="yes" xml:space="preserve">
          <source>Here, the segment corresponding to the &lt;code&gt;Opts&lt;/code&gt; variable has a &lt;strong&gt;type modifier&lt;/strong&gt;, specifying that &lt;code&gt;Opts&lt;/code&gt; is to bind to a binary. All other variables have the default type equal to unsigned integer.</source>
          <target state="translated">ここで、 &lt;code&gt;Opts&lt;/code&gt; 変数に対応するセグメントには、&lt;strong&gt;型修飾子があり&lt;/strong&gt;、 &lt;code&gt;Opts&lt;/code&gt; がバイナリーにバインドすることを指定しています。他のすべての変数のデフォルトの型は、符号なし整数と同じです。</target>
        </trans-unit>
        <trans-unit id="38c740b102d15d34f934831a4b2e6f07729ae300" translate="yes" xml:space="preserve">
          <source>Here, the suites in test directory &lt;code&gt;to1&lt;/code&gt;, followed by the suites in &lt;code&gt;to2&lt;/code&gt;, are executed in one test run. A time-out event occurs after 10 minutes. As long as there is time left, &lt;code&gt;Common Test&lt;/code&gt; repeats the test run (that is, starting over with test &lt;code&gt;to1&lt;/code&gt;). After time-out, &lt;code&gt;Common Test&lt;/code&gt; stops when the current job is finished (because of flag &lt;code&gt;force_stop&lt;/code&gt;). As a result, the specified test run can be aborted after test &lt;code&gt;to1&lt;/code&gt; and before test &lt;code&gt;to2&lt;/code&gt;.</source>
          <target state="translated">ここでは、テストディレクトリ &lt;code&gt;to1&lt;/code&gt; のスイートと、それに続く &lt;code&gt;to2&lt;/code&gt; のスイートが1回のテスト実行で実行されます。タイムアウトイベントは10分後に発生します。残り時間が残っている限り、 &lt;code&gt;Common Test&lt;/code&gt; はテスト実行を繰り返します（つまり、テスト &lt;code&gt;to1&lt;/code&gt; からやり直します）。タイムアウト後、 &lt;code&gt;Common Test&lt;/code&gt; は現在のジョブが終了すると停止します（フラグ &lt;code&gt;force_stop&lt;/code&gt; が原因）。その結果、指定されたテスト実行は、テスト後に中止することができ &lt;code&gt;to1&lt;/code&gt; 、テストの前に &lt;code&gt;to2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9f1fe1239da690637d154f58466f31d750de5a7b" translate="yes" xml:space="preserve">
          <source>Here, the test run, including both the &lt;code&gt;to1&lt;/code&gt; and the &lt;code&gt;to2&lt;/code&gt; test, is repeated five times.</source>
          <target state="translated">ここでは、 &lt;code&gt;to1&lt;/code&gt; テストと &lt;code&gt;to2&lt;/code&gt; テストの両方を含むテスト実行が5回繰り返されています。</target>
        </trans-unit>
        <trans-unit id="52a7e5fe849b80f2c39e4eb11c178f9187a0c7ff" translate="yes" xml:space="preserve">
          <source>Here, the tests specified by &quot;ts1&quot; run first, then the tests specified by &quot;ts2&quot;, and finally the tests specified by both &quot;ts3&quot; and &quot;ts4&quot;.</source>
          <target state="translated">ここでは、&quot;ts1 &quot;で指定されたテストが最初に実行され、次に &quot;ts2 &quot;で指定されたテストが実行され、最後に &quot;ts3 &quot;と &quot;ts4 &quot;の両方で指定されたテストが実行される。</target>
        </trans-unit>
        <trans-unit id="872d6af667b9983eb38e96eba5f3443d21c88017" translate="yes" xml:space="preserve">
          <source>Here, the variable &lt;code&gt;X&lt;/code&gt;, defined in the head of the fun, is a new variable. The variable &lt;code&gt;Stream&lt;/code&gt;, which is used within the fun, gets its value from the &lt;code&gt;file:open&lt;/code&gt; line.</source>
          <target state="translated">ここでは、変数funの先頭で定義されている変数 &lt;code&gt;X&lt;/code&gt; が新しい変数です。fun内で使用される変数 &lt;code&gt;Stream&lt;/code&gt; は、 &lt;code&gt;file:open&lt;/code&gt; 行からその値を取得します。</target>
        </trans-unit>
        <trans-unit id="7e0c04fa994ff203608b787f3eac3297ddf1fb91" translate="yes" xml:space="preserve">
          <source>Here, white text is used instead of the default black for &lt;code&gt;div.error&lt;/code&gt; printouts (and no other attribute settings for &lt;code&gt;pre&lt;/code&gt; are affected).</source>
          <target state="translated">ここでは、 &lt;code&gt;div.error&lt;/code&gt; 印刷のデフォルトの黒の代わりに白いテキストが使用されます（ &lt;code&gt;pre&lt;/code&gt; の他の属性設定は影響を受けません）。</target>
        </trans-unit>
        <trans-unit id="714626a23a6977a3ba1a4332c0cb63aa0f04303b" translate="yes" xml:space="preserve">
          <source>Here,&lt;code&gt;ERL_NIF_INIT&lt;/code&gt; has the following arguments:</source>
          <target state="translated">ここで、 &lt;code&gt;ERL_NIF_INIT&lt;/code&gt; には次の引数があります。</target>
        </trans-unit>
        <trans-unit id="a1e31a79ba26a76d28a87c7ed0407b897f88b5e6" translate="yes" xml:space="preserve">
          <source>Here:</source>
          <target state="translated">Here:</target>
        </trans-unit>
        <trans-unit id="ad89343a3d3c4ba891ac4b0730bfade95df05420" translate="yes" xml:space="preserve">
          <source>Heuristic Identification of UTF-8</source>
          <target state="translated">UTF-8のヒューリスティック識別</target>
        </trans-unit>
        <trans-unit id="6d3b73d033962cbf0bbbb6396f3106e5fadd47c5" translate="yes" xml:space="preserve">
          <source>Heuristic String Detection</source>
          <target state="translated">ヒューリスティック文字列検出</target>
        </trans-unit>
        <trans-unit id="9e6e39c49e52c38684133449dae27a843c8c9f66" translate="yes" xml:space="preserve">
          <source>Hexadecimal digits</source>
          <target state="translated">16進数</target>
        </trans-unit>
        <trans-unit id="01a101ab62a2560ab10ccb525aa4aba316d01a17" translate="yes" xml:space="preserve">
          <source>HiPE is automatically enabled on the following systems:</source>
          <target state="translated">以下のシステムでは、自動的にHiPEが有効になります。</target>
        </trans-unit>
        <trans-unit id="49e76954bbaf300a103840561af720f16c024018" translate="yes" xml:space="preserve">
          <source>HiPE supports the following system configurations:</source>
          <target state="translated">HiPEは以下のシステム構成をサポートしています。</target>
        </trans-unit>
        <trans-unit id="c5263066d763fc26b746c69fd8481a0f61325e1a" translate="yes" xml:space="preserve">
          <source>Hide menu:</source>
          <target state="translated">メニューを隠す。</target>
        </trans-unit>
        <trans-unit id="a02b1f8d870b852383550616297df9f10e5bc8ba" translate="yes" xml:space="preserve">
          <source>High fault tolerance</source>
          <target state="translated">高い欠陥の許容</target>
        </trans-unit>
        <trans-unit id="fb49d95db3dc9749450850f23cb259dfa334590a" translate="yes" xml:space="preserve">
          <source>High-Level Instructions</source>
          <target state="translated">ハイレベル指示書</target>
        </trans-unit>
        <trans-unit id="e5a92cb9a3146c86050022c2169e16055f62bf41" translate="yes" xml:space="preserve">
          <source>Highest possible &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt; resolution&lt;/a&gt;&lt;/code&gt; of current OS monotonic time source as parts per second. If no resolution information can be retrieved from the OS, &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; is set to the resolution of the time unit of &lt;code&gt;Function&lt;/code&gt;s return value. That is, the actual resolution can be lower than &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt;. Notice that the resolution does not say anything about the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt; accuracy&lt;/a&gt;&lt;/code&gt; or whether the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt; precision&lt;/a&gt;&lt;/code&gt; aligns with the resolution. You do, however, know that the precision is not better than &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt;.</source>
          <target state="translated">1秒あたりのパーツ数としての現在のOS単調時間ソースの可能な限り高い &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt; resolution&lt;/a&gt;&lt;/code&gt; 。 OSから解像度情報を取得できない場合、 &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; は &lt;code&gt;Function&lt;/code&gt; の戻り値の時間単位の解像度に設定されます。つまり、実際の解像度は &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; よりも低くなる可能性があります。解像度は、 &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt; accuracy&lt;/a&gt;&lt;/code&gt; について、または &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt; precision&lt;/a&gt;&lt;/code&gt; が解像度と一致するかどうかについては何も述べていないことに注意してください。ただし、精度は &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; よりも優れているわけではないことをご存知でしょう。</target>
        </trans-unit>
        <trans-unit id="d7116b5f034f81df6881fb6c021d526c89a62a5d" translate="yes" xml:space="preserve">
          <source>Highest possible &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt; resolution&lt;/a&gt;&lt;/code&gt; of current OS system time source as parts per second. If no resolution information can be retrieved from the OS, &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; is set to the resolution of the time unit of &lt;code&gt;Function&lt;/code&gt;s return value. That is, the actual resolution can be lower than &lt;code&gt;OsSystemTimeResolution&lt;/code&gt;. Notice that the resolution does not say anything about the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt; accuracy&lt;/a&gt;&lt;/code&gt; or whether the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt; precision&lt;/a&gt;&lt;/code&gt; do align with the resolution. You do, however, know that the precision is not better than &lt;code&gt;OsSystemTimeResolution&lt;/code&gt;.</source>
          <target state="translated">パーツ/秒としての現在のOSシステムタイムソースの可能な最高の &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt; resolution&lt;/a&gt;&lt;/code&gt; 。 OSから解像度情報を取得できない場合、 &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; は &lt;code&gt;Function&lt;/code&gt; の戻り値の時間単位の解像度に設定されます。つまり、実際の解像度は &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; よりも低くなる可能性があります。解像度は、 &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt; accuracy&lt;/a&gt;&lt;/code&gt; について、または &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt; precision&lt;/a&gt;&lt;/code&gt; が解像度と一致するかどうかについては何も述べていないことに注意してください。ただし、精度は &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; よりも優れているわけではないことをご存知でしょう。</target>
        </trans-unit>
        <trans-unit id="322a5670551101a31a0c53538057253089ee212f" translate="yes" xml:space="preserve">
          <source>Highest possible &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt;resolution&lt;/a&gt;&lt;/code&gt; of current OS monotonic time source as parts per second. If no resolution information can be retrieved from the OS, &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; is set to the resolution of the time unit of &lt;code&gt;Function&lt;/code&gt;s return value. That is, the actual resolution can be lower than &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt;. Notice that the resolution does not say anything about the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; or whether the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; aligns with the resolution. You do, however, know that the precision is not better than &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt;.</source>
          <target state="translated">現在のOS単調時間ソースの可能な最高 &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt;resolution&lt;/a&gt;&lt;/code&gt; （1秒あたりのパーツ数）。 OSから解像度情報を取得できない場合、 &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; は &lt;code&gt;Function&lt;/code&gt; の戻り値の時間単位の精度に設定されます。つまり、実際の解像度は &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; よりも低くなる可能性があります。解像度は、 &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; が解像度に合っているかどうかについては何も言っていないことに注意してください。ただし、精度は &lt;code&gt;OsMonotonicTimeResolution&lt;/code&gt; よりも優れているわけではありません。</target>
        </trans-unit>
        <trans-unit id="fab9cfbcb573ef66eead85a0dd57991922c30f3e" translate="yes" xml:space="preserve">
          <source>Highest possible &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt;resolution&lt;/a&gt;&lt;/code&gt; of current OS system time source as parts per second. If no resolution information can be retrieved from the OS, &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; is set to the resolution of the time unit of &lt;code&gt;Function&lt;/code&gt;s return value. That is, the actual resolution can be lower than &lt;code&gt;OsSystemTimeResolution&lt;/code&gt;. Notice that the resolution does not say anything about the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; or whether the &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; do align with the resolution. You do, however, know that the precision is not better than &lt;code&gt;OsSystemTimeResolution&lt;/code&gt;.</source>
          <target state="translated">現在のOSシステムタイムソースの可能な最高 &lt;code&gt;&lt;a href=&quot;time_correction#Time_Resolution&quot;&gt;resolution&lt;/a&gt;&lt;/code&gt; （1秒あたりのパーツ数）。 OSから解像度情報を取得できない場合、 &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; は &lt;code&gt;Function&lt;/code&gt; の戻り値の時間単位の精度に設定されます。つまり、実際の解像度は &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; より低くなる可能性があります。解像度は、 &lt;code&gt;&lt;a href=&quot;time_correction#Time_Accuracy&quot;&gt;accuracy&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;time_correction#Time_Precision&quot;&gt;precision&lt;/a&gt;&lt;/code&gt; が解像度と一致するかどうかについては何も言っていないことに注意してください。ただし、精度は &lt;code&gt;OsSystemTimeResolution&lt;/code&gt; よりも優れているわけではありません。</target>
        </trans-unit>
        <trans-unit id="ba1d0a643c81d860412a884b89435cac1cf023d7" translate="yes" xml:space="preserve">
          <source>Hiragana</source>
          <target state="translated">Hiragana</target>
        </trans-unit>
        <trans-unit id="b5e5ac0463ba83ccbf0cfb19cb8721b646cc77b2" translate="yes" xml:space="preserve">
          <source>Hmac functions - &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2104.txt&quot;&gt; Keyed-Hashing for Message Authentication (RFC 2104) &lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">Hmac関数- &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2104.txt&quot;&gt; Keyed-Hashing for Message Authentication (RFC 2104) &lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="70f8bb9a8a5393ef080507a89e4b98d139000d65" translate="yes" xml:space="preserve">
          <source>Home</source>
          <target state="translated">Home</target>
        </trans-unit>
        <trans-unit id="e62704259a03fb1bde2c8d41669196ad51d0310c" translate="yes" xml:space="preserve">
          <source>Hook option &lt;code&gt;log_type&lt;/code&gt; can be used to change the &lt;code&gt;cth_conn_log&lt;/code&gt; behavior. The default value of this option is &lt;code&gt;raw&lt;/code&gt;, which results in the behavior described above. If the value is set to &lt;code&gt;html&lt;/code&gt;, all Telnet communication is printed to the test case HTML log instead.</source>
          <target state="translated">フックオプション &lt;code&gt;log_type&lt;/code&gt; を使用して、 &lt;code&gt;cth_conn_log&lt;/code&gt; の動作を変更できます。このオプションのデフォルト値は &lt;code&gt;raw&lt;/code&gt; で、上記の動作になります。値を &lt;code&gt;html&lt;/code&gt; に設定すると、すべてのTelnet通信が代わりにテストケースHTMLログに出力されます。</target>
        </trans-unit>
        <trans-unit id="e16590a1a84c1baec0f43c0dcc1d470ab6fb6020" translate="yes" xml:space="preserve">
          <source>Hook option &lt;code&gt;log_type&lt;/code&gt; specifies the type of logging:</source>
          <target state="translated">フックオプション &lt;code&gt;log_type&lt;/code&gt; は、ロギングのタイプを指定します。</target>
        </trans-unit>
        <trans-unit id="2b7ba976df46f73b2bc0332579201ada04d174eb" translate="yes" xml:space="preserve">
          <source>Hook options specified in a configuration file overwrite any hard-coded hook options in the test suite.</source>
          <target state="translated">設定ファイルで指定されたフックオプションは、テストスイート内のハードコードされたフックオプションを上書きします。</target>
        </trans-unit>
        <trans-unit id="e5130a72c3ee4bac41361eafe24a09e720b6ee4d" translate="yes" xml:space="preserve">
          <source>Hook options specified in a configuration file overwrite the hard-coded hook options in the test suite.</source>
          <target state="translated">設定ファイルで指定されたフックオプションは、テストスイートのハードコードされたフックオプションを上書きします。</target>
        </trans-unit>
        <trans-unit id="5699a47d64ec5afff9a00f44aa11f36f6b5577a8" translate="yes" xml:space="preserve">
          <source>Hop-by-Hop and End-to-End Identifiers are set by diameter when sending outgoing requests.</source>
          <target state="translated">Hop-by-Hop と End-to-End 識別子は、送信リクエストを送信する際に直径で設定されます。</target>
        </trans-unit>
        <trans-unit id="b856160c3f11849f763958bfca750f4da4f8b030" translate="yes" xml:space="preserve">
          <source>Horizontal tab (HT)</source>
          <target state="translated">水平タブ(HT)</target>
        </trans-unit>
        <trans-unit id="de7f8e30d370dbed377d6f3ec1e0f3638d8f7cd7" translate="yes" xml:space="preserve">
          <source>Host :: string(),</source>
          <target state="translated">ホスト ::string()。</target>
        </trans-unit>
        <trans-unit id="288369442ce4af9ee861578e5997944104806d11" translate="yes" xml:space="preserve">
          <source>Host = &lt;code&gt;string() | ip_address()&lt;/code&gt;</source>
          <target state="translated">ホスト= &lt;code&gt;string() | ip_address()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c0506d8d8a9c994a9c2061822e71fa219eaa60fb" translate="yes" xml:space="preserve">
          <source>Host is not found, FTP server is not found, or connection is rejected by FTP server.</source>
          <target state="translated">ホストが見つからない、FTPサーバーが見つからない、またはFTPサーバーによって接続が拒否された。</target>
        </trans-unit>
        <trans-unit id="19cf18d3bb45fb6c52bc7c972db763badac874f9" translate="yes" xml:space="preserve">
          <source>Host key algorithm.</source>
          <target state="translated">ホスト鍵アルゴリズム。</target>
        </trans-unit>
        <trans-unit id="072282c1e2f294945717832e050c84248cb48a99" translate="yes" xml:space="preserve">
          <source>Host key(s)</source>
          <target state="translated">ホストキー</target>
        </trans-unit>
        <trans-unit id="addc5b9c7be01cab649badaad9fe245dd85b99a6" translate="yes" xml:space="preserve">
          <source>Host public key(s)</source>
          <target state="translated">ホスト公開鍵</target>
        </trans-unit>
        <trans-unit id="8dea1bfa3d5f782d439b94a2dc9e26fd4b92b4b3" translate="yes" xml:space="preserve">
          <source>Host,</source>
          <target state="translated">Host,</target>
        </trans-unit>
        <trans-unit id="22d5d7183ae1bff52681fe92c469a1efdf2db570" translate="yes" xml:space="preserve">
          <source>Host-IP-Address AVP</source>
          <target state="translated">ホストIPアドレスAVP</target>
        </trans-unit>
        <trans-unit id="1db3d3092adcf5851af85b54fd2dcaa3d13b20b7" translate="yes" xml:space="preserve">
          <source>Hostname extraction</source>
          <target state="translated">ホスト名の抽出</target>
        </trans-unit>
        <trans-unit id="cc902a2f4f94e0590cff3fb32bacd18c59026842" translate="yes" xml:space="preserve">
          <source>Hostname is the result of calling net_adm:localhost() in the Erlang node where this funcion is called.</source>
          <target state="translated">ホスト名はこの関数が呼ばれたErlangノードでnet_adm:localhost()を呼び出した結果です。</target>
        </trans-unit>
        <trans-unit id="e41e038a1831d791d3fb46209bc95e438998e2ba" translate="yes" xml:space="preserve">
          <source>Hostname of the node, &lt;code&gt;host&lt;/code&gt;</source>
          <target state="translated">ノードのホスト名、 &lt;code&gt;host&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="abd2f083d046f4cdd3824b5ac6815216f33f9d44" translate="yes" xml:space="preserve">
          <source>Hostnames and host addresses</source>
          <target state="translated">ホスト名とホストアドレス</target>
        </trans-unit>
        <trans-unit id="acf387fac0d70500029ecc75aef45e78a2439ddf" translate="yes" xml:space="preserve">
          <source>How categories can be mapped to CSS tags is documented in section &lt;code&gt;&lt;a href=&quot;run_test_chapter#html_stylesheet&quot;&gt;HTML Style Sheets&lt;/a&gt;&lt;/code&gt; in section Running Tests and Analyzing Results.</source>
          <target state="translated">カテゴリをCSSタグにマップする方法については、「テストの実行と結果の分析」の「 &lt;code&gt;&lt;a href=&quot;run_test_chapter#html_stylesheet&quot;&gt;HTML Style Sheets&lt;/a&gt;&lt;/code&gt; セクションに記載されています。</target>
        </trans-unit>
        <trans-unit id="4591aaae8b0152f47a2818f3eda6105fd1deb44b" translate="yes" xml:space="preserve">
          <source>How code is compiled and loaded is not a language issue, but is system-dependent. This section describes compilation and code loading in Erlang/OTP with references to relevant parts of the documentation.</source>
          <target state="translated">コードがどのようにコンパイルされてロードされるかは言語の問題ではありませんが、システムに依存します。このセクションではErlang/OTPのコンパイルとコードロードについてドキュメントの関連部分を参照しながら説明します。</target>
        </trans-unit>
        <trans-unit id="15c87cc7450111c7682bfcb2fe07b8147a9660ab" translate="yes" xml:space="preserve">
          <source>How long Erlang needs to be inactive before output is preceded with a time stamp. Defaults to &lt;code&gt;RUN_ERL_LOG_ALIVE_MINUTES div 3&lt;/code&gt;, minimum is 1.</source>
          <target state="translated">出力の前にタイムスタンプが付くまでに、Erlangが非アクティブである必要がある期間。デフォルトは &lt;code&gt;RUN_ERL_LOG_ALIVE_MINUTES div 3&lt;/code&gt; 、最小は1です。</target>
        </trans-unit>
        <trans-unit id="f7148ef82d3951a0ef8aeff5732b56bd65e5d5a7" translate="yes" xml:space="preserve">
          <source>How long to wait for output (in minutes) before writing an &quot;ALIVE&quot; message to the log. Defaults to 15, minimum is 1.</source>
          <target state="translated">ALIVE &quot;メッセージをログに書き込むまでの出力の待ち時間(分単位)を指定します。デフォルトは15で、最小値は1です。</target>
        </trans-unit>
        <trans-unit id="1a8eccc781fb3d6e08ed9cc46cafd132607b31bb" translate="yes" xml:space="preserve">
          <source>How many bytes that are read (received) from the socket, used in similar ways as &lt;code&gt;sent&lt;/code&gt;.</source>
          <target state="translated">ソケットから読み取られた（受信された）バイト数。 &lt;code&gt;sent&lt;/code&gt; と同様に使用されます。</target>
        </trans-unit>
        <trans-unit id="2063d1711356aa5cf80622e43bafe411dc016ccf" translate="yes" xml:space="preserve">
          <source>How many bytes that have been sent over the socket. This can wrap, but that is no problem for the distribution, as the Erlang distribution is only interested in if this value has changed. (The Erlang &lt;code&gt;net_kernel&lt;/code&gt;&lt;code&gt;ticker&lt;/code&gt; uses this value by calling the driver to fetch it, which is done through the &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt; routine.)</source>
          <target state="translated">ソケットを介して送信されたバイト数。これは折り返すことができますが、アーラン分布はこの値が変更された場合にのみ関心があるため、分布にとっては問題ありません。（Erlang &lt;code&gt;net_kernel&lt;/code&gt; &lt;code&gt;ticker&lt;/code&gt; は、ドライバーを呼び出してフェッチすることでこの値を使用します。これは、 &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt; ルーチンを介して行われます。）</target>
        </trans-unit>
        <trans-unit id="29f341bd6607eedd11420fecb92a331dcfda1889" translate="yes" xml:space="preserve">
          <source>How many bytes that have been sent over the socket. This can wrap, but that is no problem for the distribution, as the Erlang distribution is only interested in if this value has changed. (The Erlang &lt;code&gt;net_kernel&lt;/code&gt;&lt;code&gt;ticker&lt;/code&gt; uses this value by calling the driver to fetch it, which is done through the &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; routine.)</source>
          <target state="translated">ソケットを介して送信されたバイト数。これは折り返すことができますが、Erlangディストリビューションはこの値が変更された場合にのみ関心があるため、ディストリビューションでは問題ありません。（Erlang &lt;code&gt;net_kernel&lt;/code&gt; &lt;code&gt;ticker&lt;/code&gt; は、ドライバーを呼び出してフェッチすることでこの値を使用します。これは、 &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt;erlang:port_control/3&lt;/a&gt;&lt;/code&gt; ルーチンを通じて行われます。）</target>
        </trans-unit>
        <trans-unit id="7f7085d139029fad5626d71df4a69c37165c0004" translate="yes" xml:space="preserve">
          <source>How schedulers are bound matters. For example, in situations when there are fewer running processes than schedulers online, the runtime system tries to migrate processes to schedulers with low scheduler identifiers. The more the schedulers are spread over the hardware, the more resources are available to the runtime system in such situations.</source>
          <target state="translated">スケジューラをどのようにバインドするかは重要です。例えば、実行中のプロセスの数がスケジューラのオンライン数よりも少ない状況では、ランタイムシステムはスケジューラ識別子の低いスケジューラにプロセスを移行させようとする。スケジューラがハードウェアに分散していればいるほど、そのような状況でランタイムシステムが利用できるリソースは多くなります。</target>
        </trans-unit>
        <trans-unit id="22fb0d06b90905c411643c4b8d63177262432872" translate="yes" xml:space="preserve">
          <source>How the different levels of configuration &quot;interfer&quot; with this, see the section &lt;code&gt;&lt;a href=&quot;configurations#algorithm-configuration&quot;&gt;Algorithm Configuration&lt;/a&gt;&lt;/code&gt; in the chapter &lt;code&gt;&lt;a href=&quot;configurations&quot;&gt;Configuration in SSH&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">さまざまなレベルの構成がこれにどのように「干渉」するかについては &lt;code&gt;&lt;a href=&quot;configurations&quot;&gt;Configuration in SSH&lt;/a&gt;&lt;/code&gt; の章の &lt;code&gt;&lt;a href=&quot;configurations#algorithm-configuration&quot;&gt;Algorithm Configuration&lt;/a&gt;&lt;/code&gt; のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="20136af8c4b0c2e0978139eaccb368f03d6d08f3" translate="yes" xml:space="preserve">
          <source>How to Build a Debug Enabled Erlang RunTime System</source>
          <target state="translated">デバッグ可能なErlang RunTimeシステムの構築方法</target>
        </trans-unit>
        <trans-unit id="d0e7345d074a8ac083420a87f267a9efe5441d6f" translate="yes" xml:space="preserve">
          <source>How to Work with the New API</source>
          <target state="translated">新しい API を使用する方法</target>
        </trans-unit>
        <trans-unit id="1c9e65c5426cc2af60f611bbcd0bef6a2d2545ba" translate="yes" xml:space="preserve">
          <source>How to communicate with the outside world and software written in other languages (ports); this is described in &lt;code&gt; Interoperability Tutorial&lt;/code&gt;.</source>
          <target state="translated">外の世界や他の言語（ポート）で書かれたソフトウェアと通信する方法。これについては、 &lt;code&gt; Interoperability Tutorial&lt;/code&gt; 説明されています。</target>
        </trans-unit>
        <trans-unit id="a4c1dadaae2a29663af54cb6cd0c08758049e535" translate="yes" xml:space="preserve">
          <source>How to communicate with the outside world and software written in other languages (ports); this is described in &lt;code&gt;Interoperability Tutorial&lt;/code&gt;.</source>
          <target state="translated">外の世界や他の言語（ポート）で書かれたソフトウェアと通信する方法 これについては、 &lt;code&gt;Interoperability Tutorial&lt;/code&gt; 説明しています。</target>
        </trans-unit>
        <trans-unit id="d5c10a361408710884679a3441fc66b438898423" translate="yes" xml:space="preserve">
          <source>How to deal with errors in the Message Length field of the Diameter Header in an incoming message. An error in this context is that the length is not at least 20 bytes (the length of a Header), is not a multiple of 4 (a valid length) or is not the length of the message in question, as received over the transport interface documented in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">着信メッセージのDiameterヘッダーのメッセージ長フィールドのエラーに対処する方法。このコンテキストでのエラーは、トランスポートを介して受信したときに、長さが少なくとも20バイト（ヘッダーの長さ）でなく、4の倍数（有効な長さ）でも、問題のメッセージの長さでもないことです。 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; に記載されているインターフェイス。</target>
        </trans-unit>
        <trans-unit id="ccbdf00e07b9b9e2844d8c343abd36e9a64cbb60" translate="yes" xml:space="preserve">
          <source>How to install a release in a target environment is described in the section about target systems in Section 2 System Principles.</source>
          <target state="translated">ターゲット環境にリリースをインストールする方法は、「第2節 システムの原則」のターゲットシステムについてのセクションで説明しています。</target>
        </trans-unit>
        <trans-unit id="a8aa9d6c524adcbf7e604a1f12ced88b214a5951" translate="yes" xml:space="preserve">
          <source>How to program applications is described in &lt;code&gt;&lt;a href=&quot;applications&quot;&gt;Applications&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アプリケーションのプログラミング方法については、アプリケーションで説明してい &lt;code&gt;&lt;a href=&quot;applications&quot;&gt;Applications&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="276dc4ca7f730347d6af07741689ad055269eecd" translate="yes" xml:space="preserve">
          <source>How to program releases is described in &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リリースのプログラミング方法については、「 &lt;code&gt;&lt;a href=&quot;release_structure&quot;&gt;Releases&lt;/a&gt;&lt;/code&gt; で説明しています。</target>
        </trans-unit>
        <trans-unit id="1b4b3d991be0d0efdd7895d65ece3d2af255f1d4" translate="yes" xml:space="preserve">
          <source>How to send a trap by sending the &lt;code&gt;fTrap&lt;/code&gt; from the master agent is shown in this section. The master agent has the MIB &lt;code&gt;EX1-MIB&lt;/code&gt; loaded, where the trap is defined. This trap specifies that two variables should be sent along with the trap, &lt;code&gt;myName&lt;/code&gt; and &lt;code&gt;fIndex&lt;/code&gt;. &lt;code&gt;fIndex&lt;/code&gt; is a table column, so we must provide its value and the index for the row in the call to &lt;code&gt;snmpa:send_trap/4&lt;/code&gt;. In the example below, we assume that the row in question is indexed by 2 (the row with &lt;code&gt;fIndex&lt;/code&gt; 2).</source>
          <target state="translated">このセクションでは、マスターエージェントから &lt;code&gt;fTrap&lt;/code&gt; を送信してトラップを送信する方法を示します。マスターエージェントには、トラップが定義されているMIB &lt;code&gt;EX1-MIB&lt;/code&gt; がロードされています。このトラップは、トラップとともに2つの変数 &lt;code&gt;myName&lt;/code&gt; および &lt;code&gt;fIndex&lt;/code&gt; を送信する必要があることを指定します。 &lt;code&gt;fIndex&lt;/code&gt; はテーブル列なので、 &lt;code&gt;snmpa:send_trap/4&lt;/code&gt; の呼び出しでその値と行のインデックスを提供する必要があります。以下の例では、問題の行のインデックスが2（ &lt;code&gt;fIndex&lt;/code&gt; 2の行）であると想定しています。</target>
        </trans-unit>
        <trans-unit id="cd51a27fca892f8fff8444cd28b8146e7bbe5364" translate="yes" xml:space="preserve">
          <source>How to start and stop the code for the application, that is, the supervision tree, is described by two callback functions:</source>
          <target state="translated">アプリケーションのコード、つまり監視ツリーの開始と停止の方法は、2つのコールバック関数によって記述されています。</target>
        </trans-unit>
        <trans-unit id="41bdc386e84c42a60e9c78fd7063eb79494fd670" translate="yes" xml:space="preserve">
          <source>How to write &lt;code&gt;d&lt;/code&gt; programs or &lt;code&gt;systemtap&lt;/code&gt; scripts can be learned from books and from a lot of pages on the Internet. This manual page does not include any documentation about using the dynamic trace tools of respective platform. The &lt;code&gt;examples&lt;/code&gt; directory of the &lt;code&gt;runtime_tools&lt;/code&gt; application however contains comprehensive examples of both &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;systemtap&lt;/code&gt; programs that will help you get started. Another source of information is the &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;dtrace&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;systemtap&quot;&gt;systemtap&lt;/a&gt;&lt;/code&gt; chapters in the Runtime Tools Users' Guide.</source>
          <target state="translated">&lt;code&gt;d&lt;/code&gt; プログラムや &lt;code&gt;systemtap&lt;/code&gt; スクリプトの書き方は、本やインターネット上の多くのページから学ぶことができます。このマニュアルページには、各プラットフォームの動的トレースツールの使用に関するドキュメントは含まれていません。ただし、 &lt;code&gt;runtime_tools&lt;/code&gt; アプリケーションの &lt;code&gt;examples&lt;/code&gt; ディレクトリには、 &lt;code&gt;d&lt;/code&gt; プログラムと &lt;code&gt;systemtap&lt;/code&gt; プログラムの包括的なサンプルが含まれており、これらを使用して作業を開始できます。もう1つの情報源は、ランタイムツールユーザーガイドの &lt;code&gt;&lt;a href=&quot;dtrace&quot;&gt;dtrace&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;systemtap&quot;&gt;systemtap&lt;/a&gt;&lt;/code&gt; の章です。</target>
        </trans-unit>
        <trans-unit id="0838c6817793504aa13c17409bac1788b9b01886" translate="yes" xml:space="preserve">
          <source>However, NTP is not fail-safe. The NTP server can be unavailable, &lt;code&gt;ntp.conf&lt;/code&gt; can be wrongly configured, or your computer can sometimes be disconnected from Internet. Furthermore, you can have a user (or even system administrator) who thinks the correct way to handle Daylight Saving Time is to adjust the clock one hour two times a year (which is the incorrect way to do it). To complicate things further, this user fetched your software from Internet and has not considered what the correct time is as perceived by a computer. The user does not care about keeping the wall clock in sync with the correct time. The user expects your program to have unlimited knowledge about the time.</source>
          <target state="translated">ただし、NTPはフェイルセーフではありません。 NTPサーバーが使用できない、 &lt;code&gt;ntp.conf&lt;/code&gt; が正しく構成されていない、またはコンピューターがインターネットから切断されている場合があります。さらに、ユーザー（またはシステム管理者）が夏時間を処理する正しい方法は、時計を年に1時間2回（これは間違った方法です）調整することだと考えることもできます。さらに複雑なことに、このユーザーはインターネットからソフトウェアを取得しましたが、コンピューターが認識している正しい時刻を考慮していません。ユーザーは、壁掛け時計を正しい時刻に同期させる必要はありません。ユーザーは、プログラムが時間について無制限の知識を持つことを期待しています。</target>
        </trans-unit>
        <trans-unit id="1d1ccf19c7bc531f33d5809c585dc1826e4637e4" translate="yes" xml:space="preserve">
          <source>However, a node started in this way refuses to talk to other nodes, as no TLS parameters are supplied (see the next section).</source>
          <target state="translated">しかし、この方法で起動されたノードは、TLS パラメータが与えられていないため、他のノードとの通話を拒否します(次のセクションを参照)。</target>
        </trans-unit>
        <trans-unit id="b227076a401b39e896ee55916a33ca73c07f48da" translate="yes" xml:space="preserve">
          <source>However, bit strings that are not whole bytes are not allowed, so a UTF character must be split along 8-bit boundaries to ever be decoded.</source>
          <target state="translated">し か し 、 全バ イ ト でないビ ッ ト 文字列は許されないので、UTF キ ャ ラ ク タ は 8 ビ ッ ト の境界に沿って分割 さ れていなければデ コ ー ド さ れません。</target>
        </trans-unit>
        <trans-unit id="8ea8d93f3410c8633f2cc78f1bbe03d8844b4ed7" translate="yes" xml:space="preserve">
          <source>However, certificates can also be decoded using &lt;code&gt;pkix_decode_cert/2&lt;/code&gt;, which can customize and recursively decode standard parts of a certificate:</source>
          <target state="translated">ただし、証明書は &lt;code&gt;pkix_decode_cert/2&lt;/code&gt; を使用してデコードすることもできます。これにより、証明書の標準部分をカスタマイズして再帰的にデコードできます。</target>
        </trans-unit>
        <trans-unit id="0c4ccce2e74bd8ac8ec245b1dfb747183f0ffc13" translate="yes" xml:space="preserve">
          <source>However, escaping other non-alphanumeric characters does no harm.</source>
          <target state="translated">しかし、他の英数字以外の文字をエスケープしても害はありません。</target>
        </trans-unit>
        <trans-unit id="46e5131246ec14a5499a18be55e9b7179d7c9b66" translate="yes" xml:space="preserve">
          <source>However, for a value of type &lt;code&gt;SET OF&lt;/code&gt;, the DER encoding format requires the elements to be sent in ascending order of their encoding, which implies an expensive sorting procedure in runtime. Therefore it is recommended to use &lt;code&gt;SEQUENCE OF&lt;/code&gt; instead of &lt;code&gt;SET OF&lt;/code&gt; if possible.</source>
          <target state="translated">ただし、タイプ &lt;code&gt;SET OF&lt;/code&gt; の値の場合、DERエンコード形式では、要素をエンコードの昇順で送信する必要があります。これは、実行時に高価なソート手順を意味します。したがって、可能であれば、 &lt;code&gt;SET OF&lt;/code&gt; ではなく &lt;code&gt;SEQUENCE OF&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="bc244468b711f7696ac604f858e8d4fc9b46e19b" translate="yes" xml:space="preserve">
          <source>However, here you will find some examples of how to use and to what you can use xmerl. A detailed description of the user interface can be found in the reference manual.</source>
          <target state="translated">しかし、ここでは、xmerlを使用する方法と何に使用することができるかのいくつかの例を見つけることができます。ユーザーインターフェースの詳細な説明はリファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="0b9d56ea76c3544f39f6889a33eb80d1c637ad55" translate="yes" xml:space="preserve">
          <source>However, if &lt;code&gt;cp1&lt;/code&gt; also restarts, the function &lt;code&gt;application:takeover/2&lt;/code&gt; moves &lt;code&gt;myapp&lt;/code&gt; to &lt;code&gt;cp1&lt;/code&gt;, as &lt;code&gt;cp1&lt;/code&gt; has a higher priority than &lt;code&gt;cp3&lt;/code&gt; for this application. In this case, &lt;code&gt;Module:start({takeover, cp3@cave}, StartArgs)&lt;/code&gt; is executed at &lt;code&gt;cp1&lt;/code&gt; to start the application.</source>
          <target state="translated">ただし、このアプリケーションでは &lt;code&gt;cp1&lt;/code&gt; の方が &lt;code&gt;cp3&lt;/code&gt; よりも優先度が高いため、 &lt;code&gt;cp1&lt;/code&gt; も再起動すると、関数 &lt;code&gt;application:takeover/2&lt;/code&gt; が &lt;code&gt;myapp&lt;/code&gt; を &lt;code&gt;cp1&lt;/code&gt; に移動します。この場合、 &lt;code&gt;Module:start({takeover, cp3@cave}, StartArgs)&lt;/code&gt; が &lt;code&gt;cp1&lt;/code&gt; で実行され、アプリケーションが起動します。</target>
        </trans-unit>
        <trans-unit id="d56d68a6f8912b74bb9d4335dc57800fe8ebb077" translate="yes" xml:space="preserve">
          <source>However, if a quantifier is followed by a question mark, it ceases to be greedy, and instead matches the minimum number of times possible, so the following pattern does the right thing with the C comments:</source>
          <target state="translated">しかし、量詞の後にクエスチョンマークが続く場合は、欲張りではなくなり、代わりに可能な最小限の回数だけマッチするので、次のパターンはCコメントで正しいことをしています。</target>
        </trans-unit>
        <trans-unit id="263a65ad8dda64685d084610e95a9d4761d42dff" translate="yes" xml:space="preserve">
          <source>However, if another process has the driver loaded, calling &lt;code&gt;reload_driver&lt;/code&gt; returns error code &lt;code&gt;pending_process&lt;/code&gt;. As stated earlier, the recommended design is to not allow other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; than the &quot;driver reloader&quot; to demand loading of the driver in question.</source>
          <target state="translated">しかし、別のプロセスがロードされたドライバ、呼び出しがあれば &lt;code&gt;reload_driver&lt;/code&gt; 返しますエラーコード &lt;code&gt;pending_process&lt;/code&gt; を。前述したように、推奨される設計は、「ドライバーリローダー」以外の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; が問題のドライバーのロードを要求できないようにすることです。</target>
        </trans-unit>
        <trans-unit id="fdd9ab210aada3daba577507d301fd6bfe3e97ab" translate="yes" xml:space="preserve">
          <source>However, if the decimal number following the backslash is &amp;lt; 10, it is always taken as a back reference, and causes an error only if there are not that many capturing left parentheses in the entire pattern. That is, the parentheses that are referenced do need not be to the left of the reference for numbers &amp;lt; 10. A &quot;forward back reference&quot; of this type can make sense when a repetition is involved and the subpattern to the right has participated in an earlier iteration.</source>
          <target state="translated">ただし、バックスラッシュに続く10進数が10未満の場合は常に後方参照として扱われ、パターン全体でキャプチャする左括弧がそれほど多くない場合にのみエラーが発生します。つまり、参照される括弧は、10未満の数値の参照の左側にある必要はありません。このタイプの「前方参照」は、繰り返しが含まれ、右側のサブパターンが以前の反復。</target>
        </trans-unit>
        <trans-unit id="2a812868f08ecc593ae34f24cb42a6aa95624434" translate="yes" xml:space="preserve">
          <source>However, if the first pattern does not match, the second pattern is tested. If this matches, the message is removed from the queue and the actions corresponding to the second pattern are executed. If the second pattern does not match, the third is tried and so on until there are no more patterns to test. If there are no more patterns to test, the first message is kept in the queue and the second message is tried instead. If this matches any pattern, the appropriate actions are executed and the second message is removed from the queue (keeping the first message and any other messages in the queue). If the second message does not match, the third message is tried, and so on, until the end of the queue is reached. If the end of the queue is reached, the process blocks (stops execution) and waits until a new message is received and this procedure is repeated.</source>
          <target state="translated">しかし、第1のパターンが一致しない場合、第2のパターンがテストされる。一致した場合、メッセージはキューから削除され、2つ目のパターンに対応するアクションが実行されます。2 番目のパターンが一致しない場合、3 番目のパターンがテストされ、テストするパターンがなくなるまで繰り返されます。テストするパターンがこれ以上ない場合、最初のメッセージはキューに保持され、代わりに2番目のメッセージが試行されます。これがいずれかのパターンにマッチした場合、適切なアクションが実行され、2 番目のメッセージがキューから削除されます (最初のメッセージとその他のメッセージはキューに保持されます)。2 番目のメッセージがマッチしない場合は、3 番目のメッセージが試みられます。キューの終端に達した場合、プロセスはブロック(実行を停止)し、新しいメッセージを受信するまで待機し、この手順を繰り返します。</target>
        </trans-unit>
        <trans-unit id="24786ae2162520de2c90e9e1d62681cc611c7770" translate="yes" xml:space="preserve">
          <source>However, if the input &lt;code&gt;Data&lt;/code&gt; is a pure binary, the third part of the error tuple is guaranteed to be a binary as well.</source>
          <target state="translated">ただし、入力 &lt;code&gt;Data&lt;/code&gt; が純粋なバイナリの場合、エラータプルの3番目の部分もバイナリであることが保証されています。</target>
        </trans-unit>
        <trans-unit id="16d0a6fc945512ce80fc9d4797b016ad95bcce03" translate="yes" xml:space="preserve">
          <source>However, if the table is created with an explicit record name as argument, as shown in the following example, subscriber records can be stored in both of the tables regardless of the table names:</source>
          <target state="translated">ただし、次の例のように、引数に明示的なレコード名を指定してテーブルを作成した場合は、テーブル名に関係なく両方のテーブルに加入者レコードを格納することができます。</target>
        </trans-unit>
        <trans-unit id="1b7421b4ed5e29d178756408b1fb811393c80202" translate="yes" xml:space="preserve">
          <source>However, if this is done and a &lt;code&gt;relup&lt;/code&gt; file is generated, not only would it contain instructions for restarting (that is, removing and adding) &lt;code&gt;prim_app&lt;/code&gt;, it would also contain instructions for starting &lt;code&gt;ch_app&lt;/code&gt; (and stopping it, in the case of downgrade). This is because &lt;code&gt;ch_app&lt;/code&gt; is included in the new &lt;code&gt;.rel&lt;/code&gt; file, but not in the old one.</source>
          <target state="translated">ただし、これが実行されて &lt;code&gt;relup&lt;/code&gt; ファイルが生成された場合、 &lt;code&gt;ch_app&lt;/code&gt; 再起動（つまり、削除と追加）の指示だけでなく、 &lt;code&gt;prim_app&lt;/code&gt; 開始（ダウングレードの場合は停止）の指示も含まれます。。これは、 &lt;code&gt;ch_app&lt;/code&gt; が新しい &lt;code&gt;.rel&lt;/code&gt; ファイルに含まれているが、古いファイルには含まれていないためです。</target>
        </trans-unit>
        <trans-unit id="88d142963f00e274bf0e73a5e3da8dd76b986238" translate="yes" xml:space="preserve">
          <source>However, if you invoke the &lt;code&gt;escript&lt;/code&gt; as follows, the contents of the first line do not matter, but it cannot contain Erlang code as it will be ignored:</source>
          <target state="translated">ただし、次のように &lt;code&gt;escript&lt;/code&gt; を呼び出す場合、最初の行の内容は重要ではありませんが、無視されるため、Erlangコードを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="671dba1e8a971cf15a413c5af3f46c832eef8168" translate="yes" xml:space="preserve">
          <source>However, if you invoke the &lt;code&gt;escript&lt;/code&gt; as follows, the contents of the first line does not matter, but it cannot contain Erlang code as it will be ignored:</source>
          <target state="translated">ただし、次のように &lt;code&gt;escript&lt;/code&gt; を呼び出す場合、最初の行の内容は重要ではありませんが、無視されるため、Erlangコードを含めることはできません。</target>
        </trans-unit>
        <trans-unit id="7c6cbfad60b53ec8d8298796a95d996bcb875534" translate="yes" xml:space="preserve">
          <source>However, if you just want to change it for the current session you can also do that.</source>
          <target state="translated">しかし、現在のセッションのためだけに変更したい場合は、そのようにすることもできます。</target>
        </trans-unit>
        <trans-unit id="733932a016243e1521c912130b4ad01ef9fa9412" translate="yes" xml:space="preserve">
          <source>However, it can also be convenient to replace variables in within a &lt;code&gt;sys.config&lt;/code&gt; on the target after unpacking but before running the release. If you have a &lt;code&gt;sys.config.src&lt;/code&gt; it will be included and is not required to be a valid Erlang term file like &lt;code&gt;sys.config&lt;/code&gt;. Before running the release you must have a valid &lt;code&gt;sys.config&lt;/code&gt; in the same directory, so using &lt;code&gt;sys.config.src&lt;/code&gt; requires having some tool to populate what is needed and write &lt;code&gt;sys.config&lt;/code&gt; to disk before booting the release.</source>
          <target state="translated">ただし、アンパック後、リリースを実行する前に、ターゲットの &lt;code&gt;sys.config&lt;/code&gt; 内の変数を置き換えると便利な場合もあります。あなたが持っている場合は &lt;code&gt;sys.config.src&lt;/code&gt; をそれが含まれることになるなど、有効なErlangのターム・ファイルである必要はない &lt;code&gt;sys.config&lt;/code&gt; 。リリースを実行する前に、同じディレクトリに有効な &lt;code&gt;sys.config&lt;/code&gt; が必要です。そのため、 &lt;code&gt;sys.config.src&lt;/code&gt; を使用するには、リリースを起動する前に、必要なものを入力し、 &lt;code&gt;sys.config&lt;/code&gt; をディスクに書き込むためのツールが必要です。</target>
        </trans-unit>
        <trans-unit id="e2548bff9e540af4d0fb0d83f010b390353ac3c3" translate="yes" xml:space="preserve">
          <source>However, it is acceptable to PCRE if rewritten to use two top-level branches:</source>
          <target state="translated">ただし、2つのトップレベルブランチを使用するように書き換えれば、PCREには許容されます。</target>
        </trans-unit>
        <trans-unit id="fb5d7ab90418502bf4a66c357b3062b87e79e461" translate="yes" xml:space="preserve">
          <source>However, it is up to the tools that process the specifications to choose whether to take this extra information into account or not.</source>
          <target state="translated">しかし、この余計な情報を考慮に入れるかどうかは、仕様を処理するツール次第です。</target>
        </trans-unit>
        <trans-unit id="bfce5f1fc516ae2dd7d55f261e0b8f21a3259164" translate="yes" xml:space="preserve">
          <source>However, more dot-separated parts than this can exist. The dot-separated parts consist of non-negative integers. If all parts less significant than &lt;code&gt;&amp;lt;Minor&amp;gt;&lt;/code&gt; equals &lt;code&gt;0&lt;/code&gt;, they are omitted. The three normal parts &lt;code&gt;&amp;lt;Major&amp;gt;.&amp;lt;Minor&amp;gt;.&amp;lt;Patch&amp;gt;&lt;/code&gt; are changed as follows:</source>
          <target state="translated">ただし、これより多くのドットで区切られたパーツが存在する可能性があります。ドットで区切られた部分は、負でない整数で構成されます。 &lt;code&gt;&amp;lt;Minor&amp;gt;&lt;/code&gt; より重要でないすべての部分が &lt;code&gt;0&lt;/code&gt; に等しい場合、それらは省略されます。3つの通常の部分 &lt;code&gt;&amp;lt;Major&amp;gt;.&amp;lt;Minor&amp;gt;.&amp;lt;Patch&amp;gt;&lt;/code&gt; は次のように変更されます。</target>
        </trans-unit>
        <trans-unit id="7df44a8a1e1ba914a7e56b28dc0791a84d52cf6e" translate="yes" xml:space="preserve">
          <source>However, no expansion is done in the following call because &lt;code&gt;{foo, false}&lt;/code&gt; shadows &lt;code&gt;foo&lt;/code&gt;:</source>
          <target state="translated">ただし、次の呼び出しでは &lt;code&gt;{foo, false}&lt;/code&gt; &lt;code&gt;foo&lt;/code&gt; をシャドウするため、展開は行われません。</target>
        </trans-unit>
        <trans-unit id="8d572d552eed7e268241fcd56330d5bd074e5ab5" translate="yes" xml:space="preserve">
          <source>However, notice that there is a risk that the database can be left in an inconsistent state if dirty operations are used to update it. Dirty operations are only to be used for performance reasons when it is absolutely necessary.</source>
          <target state="translated">しかし、ダーティな操作でデータベースを更新すると、データベースが矛盾した状態になってしまう危険性があることに注意してください。ダーティな操作は、パフォーマンス上の理由から、絶対に必要な場合にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="a529ad494df4a251bbb90b6a1eb0a32b4600b075" translate="yes" xml:space="preserve">
          <source>However, that simple behaviour can be modified in numerous ways. For example, the Net if process can apply some kind of encrypting/decrypting scheme on the bytes or act as a proxy filter, which sends some packets to a proxy agent and some packets to the master agent.</source>
          <target state="translated">しかし、この単純な動作は様々な方法で変更することができます。例えば、Net if プロセスは、ある種の暗号化/復号化スキームをバイトに適用したり、あるパケットをプロキシエージェントに送り、あるパケットをマスターエージェントに送るプロキシフィルタとして振る舞うことができます。</target>
        </trans-unit>
        <trans-unit id="d14e5363806cde8cb157cc5a01dc9d77816a23da" translate="yes" xml:space="preserve">
          <source>However, that simple behaviour can be modified in numerous ways. For example, the Net if process can apply some kind of encrypting/decrypting scheme on the bytes.</source>
          <target state="translated">しかし、この単純な動作は様々な方法で変更することができます。例えば、Net if プロセスはバイトに対して何らかの暗号化/復号化スキームを適用することができます。</target>
        </trans-unit>
        <trans-unit id="bb8e8fcb075fb17e39be5eb5b27fd3315e7094ac" translate="yes" xml:space="preserve">
          <source>However, there are some cases where the optimization cannot be used. When .* is inside capturing parentheses that are the subject of a back reference elsewhere in the pattern, a match at the start can fail where a later one succeeds. Consider, for example:</source>
          <target state="translated">ただし、この最適化を使用できない場合もあります。.*がパターン内の他の場所で後方参照の対象となっている捕獲括弧の中にある場合、開始時の一致が失敗し、後の一致が成功することがあります。例えば、次のような場合を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="fa09d853f290abccb9c6e1093393c3c7791a824e" translate="yes" xml:space="preserve">
          <source>However, there is an exception. Within a macro definition, a line that starts with whitespace followed by &lt;code&gt;//|&lt;/code&gt; is treated specially. The rest of the line is assumed to contain directives to control code generation.</source>
          <target state="translated">ただし、例外があります。マクロ定義内で、空白で始まり、その後に &lt;code&gt;//|&lt;/code&gt; が続く行 特別に扱われます。行の残りの部分には、コード生成を制御するためのディレクティブが含まれていると想定されています。</target>
        </trans-unit>
        <trans-unit id="c4528e70959d30b530219f34dfc215c6d0cefc18" translate="yes" xml:space="preserve">
          <source>However, this feature of delaying thread progress from unmanaged threads should preferably be used as little as possible, since heavy use of it will cause contention on the reference counter cache lines. The functionality is however very useful in code which normally only executes in managed threads, but which may under some infrequent circumstances be executed in other threads.</source>
          <target state="translated">しかし、管理されていないスレッドからのスレッドの進行を遅らせるこの機能は、可能な限り使用しないことが望ましいです。しかし、この機能は通常は管理されたスレッドでのみ実行されますが、まれに他のスレッドでも実行される可能性があるコードでは非常に便利です。</target>
        </trans-unit>
        <trans-unit id="eb1d42158bbcefd3e41b94056683aaeb566a73aa" translate="yes" xml:space="preserve">
          <source>However, this procedure can be time-consuming, the shortcut function &lt;code&gt;&lt;a href=&quot;mnesia#force_load_table-1&quot;&gt;mnesia:force_load_table(Tab)&lt;/a&gt;&lt;/code&gt; loads all the tables from disc at a faster rate. The function forces tables to be loaded from disc regardless of the network situation.</source>
          <target state="translated">ただし、この手順には時間がかかる場合があります。ショートカット関数 &lt;code&gt;&lt;a href=&quot;mnesia#force_load_table-1&quot;&gt;mnesia:force_load_table(Tab)&lt;/a&gt;&lt;/code&gt; は、すべてのテーブルをディスクから高速でロードします。この関数は、ネットワークの状況に関係なく、テーブルをディスクから強制的にロードします。</target>
        </trans-unit>
        <trans-unit id="7ec657f07edbe2adca75ca4efe20bdbbe6a76973" translate="yes" xml:space="preserve">
          <source>However, to avoid that old (pre R14) code changed its behavior when compiled with OTP version R14A or later, the following restriction applies: If you override the name of a BIF that was auto-imported in OTP versions prior to R14A (ERTS version 5.8) and have an implicitly qualified call to that function in your code, you either need to explicitly remove the auto-import using a compiler directive, or replace the call with a fully qualified function call. Otherwise you get a compilation error. See the following example:</source>
          <target state="translated">ただし、古い(R14以前の)コードがOTPバージョンR14A以降でコンパイルしたときに挙動が変わってしまうことを避けるために、以下の制限が適用されます。R14A以前のOTPバージョン(ERTSバージョン5.8)で自動インポートされたBIFの名前をオーバーライドして、コード中にその関数の暗黙のうちに修飾された呼び出しがある場合は、コンパイラディレクティブを使用して明示的に自動インポートを削除するか、その呼び出しを完全修飾された関数呼び出しに置き換える必要があります。そうしないとコンパイルエラーが発生します。以下の例を参照してください。</target>
        </trans-unit>
        <trans-unit id="0d770aae36addee1e6eb41cd37aaf79237dbd85a" translate="yes" xml:space="preserve">
          <source>However, what reservation of physical memory actually means highly depends on the operating system, and how it is configured. For example, different memory overcommit settings on Linux drastically change the behaviour.</source>
          <target state="translated">しかし、物理メモリの予約が実際にどのような意味を持つかは、オペレーティングシステムとその設定方法に大きく依存します。例えば、Linuxではメモリのオーバーコミットの設定が異なると挙動が大きく変わります。</target>
        </trans-unit>
        <trans-unit id="75b9c43d3cdd19de7c3638848d794e6192e00af7" translate="yes" xml:space="preserve">
          <source>However, when using, for example, IA5String (which closely resembles ASCII), byte 65 (in decimal notation) &lt;strong&gt;means&lt;/strong&gt; character 'A'.</source>
          <target state="translated">ただし、たとえばIA5String（ASCIIによく似ている）を使用する場合、バイト65（10進表記）&lt;strong&gt;は&lt;/strong&gt;文字「A」を&lt;strong&gt;意味し&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8f5f28cc9ea54e0ce758adaa70edd19d2c7df7a4" translate="yes" xml:space="preserve">
          <source>Http client service start/stop</source>
          <target state="translated">Httpクライアントサービスの開始/停止</target>
        </trans-unit>
        <trans-unit id="2a4e8cc587ce6e7e113504c978e34c1e185e42f2" translate="yes" xml:space="preserve">
          <source>Http data types</source>
          <target state="translated">Http データ型</target>
        </trans-unit>
        <trans-unit id="421eac8e9d0f0d4fccaca857739a0c79fd890424" translate="yes" xml:space="preserve">
          <source>Hyphen (only where it can be interpreted as specifying a range)</source>
          <target state="translated">ハイフン(範囲を指定していると解釈できる場合のみ</target>
        </trans-unit>
        <trans-unit id="df1da1414681b4aaf7b9dd8c935cd29628d37ea7" translate="yes" xml:space="preserve">
          <source>Hyphens are allowed in SMIv2 (a pragmatic approach). The reason for this is that according to SMIv2, hyphens are allowed for objects converted from SMIv1, but not for others. This is impossible to check for the compiler.</source>
          <target state="translated">ハイフンは SMIv2 では許されています (実用的なアプローチ)。その理由は、SMIv2によれば、SMIv1から変換されたオブジェクトにはハイフンが許されますが、それ以外のオブジェクトには許されないからです。これはコンパイラでは確認できません。</target>
        </trans-unit>
        <trans-unit id="c5bc42a4cab12cb2ea8fc597fa696281af9382e3" translate="yes" xml:space="preserve">
          <source>I will only present the most important functions in the API here.</source>
          <target state="translated">ここでは、APIの中で最も重要な機能だけを紹介します。</target>
        </trans-unit>
        <trans-unit id="317126fec2c76144e4651e497f8a410a786df087" translate="yes" xml:space="preserve">
          <source>I/O error.</source>
          <target state="translated">I/Oエラーです。</target>
        </trans-unit>
        <trans-unit id="629b47de797063a0b6b561c862c608954c3da6aa" translate="yes" xml:space="preserve">
          <source>I/O from a function called in an Erlang ssh daemon</source>
          <target state="translated">Erlang の ssh デーモンで呼び出された関数からの I/O</target>
        </trans-unit>
        <trans-unit id="7e0868350648287b8190bf9c980b2ea9c46ef7d5" translate="yes" xml:space="preserve">
          <source>I/O is by far the most problematic area for Unicode. A file is an entity where bytes are stored, and the lore of programming has been to treat characters and bytes as interchangeable. With Unicode characters, you must decide on an encoding when you want to store the data in a file. In Erlang, you can open a text file with an encoding option, so that you can read characters from it rather than bytes, but you can also open a file for bytewise I/O.</source>
          <target state="translated">I/Oは、Unicodeにとって最も問題の多い領域です。ファイルはバイトが格納されている実体であり、文字とバイトを交換可能なものとして扱うことがプログラミングの伝統となっています。Unicodeの文字では、ファイルにデータを保存したいときにエンコーディングを決めなければなりません。Erlangでは、エンコーディングオプションをつけてテキストファイルを開くと、バイトではなく文字を読むことができます。</target>
        </trans-unit>
        <trans-unit id="1fb1f4a96f553bd9d56bd14c304eff4f10d68c9d" translate="yes" xml:space="preserve">
          <source>I/O library functions.</source>
          <target state="translated">I/Oライブラリ機能。</target>
        </trans-unit>
        <trans-unit id="e689b6630f1d0a364819fdd2b5731bcddd521358" translate="yes" xml:space="preserve">
          <source>I/O servers behave a little differently. The I/O servers connected to terminals (or &lt;code&gt;stdout&lt;/code&gt;) can usually cope with Unicode data regardless of the encoding option. This is convenient when one expects a modern environment but do not want to crash when writing to an archaic terminal or pipe.</source>
          <target state="translated">I / Oサーバーの動作は少し異なります。端末（または &lt;code&gt;stdout&lt;/code&gt; ）に接続されているI / Oサーバーは、エンコーディングオプションに関係なく、通常、Unicodeデータを処理できます。これは、現代の環境を想定しているが、古い端末またはパイプに書き込むときにクラッシュしたくない場合に便利です。</target>
        </trans-unit>
        <trans-unit id="2b536593017ca7fbb86fdac576736ff840ff5f41" translate="yes" xml:space="preserve">
          <source>I/O signals may however be aborted. This could be solved by letting the port specific scheduling lock also protect the private task data structure, but then the port very frequently would have to fight with others enqueueing new tasks. In order to handle this while keeping the private task data structure lock free, we use a similar &quot;non aggressive&quot; approach as we use when handling processes that gets suspended while in the run queue. Instead of removing the aborted port task, we just mark it as aborted using an atomic memory operation. When a task is selected for execution, we first verify that it has not been aborted. If aborted we, just drop the task.</source>
          <target state="translated">しかし、I/O信号はアボートされるかもしれません。これは、ポート固有のスケジューリングロックがプライベートタスクのデータ構造も保護するようにすることで解決できるかもしれませんが、その場合、ポートは非常に頻繁に新しいタスクを待ち受けにしている他の人と戦わなければならないでしょう。プライベートタスクのデータ構造をロックしないようにしながらこれを処理するために、ランキュー中にサスペンドされるプロセスを処理するときに使用するのと同様の &quot;非攻撃的 &quot;なアプローチを使用しています。中止されたポートタスクを削除する代わりに、アトミックメモリ操作を使って中止されたとマークします。タスクが実行のために選択されたとき、まず、それがアボートされていないことを確認します。もしアボートされていたら、そのタスクを削除します。</target>
        </trans-unit>
        <trans-unit id="8fc86a2ee6eb5947817dfe748e38a27770d8f566" translate="yes" xml:space="preserve">
          <source>I/O-servers throughout the system can handle Unicode data and have options for converting data upon output or input to/from the device. As shown earlier, the &lt;code&gt;shell&lt;/code&gt; module has support for Unicode terminals and the &lt;code&gt;file&lt;/code&gt; module allows for translation to and from various Unicode formats on disk.</source>
          <target state="translated">システム全体のI / OサーバーはUnicodeデータを処理でき、デバイスへの出力またはデバイスからの入力時にデータを変換するオプションがあります。前に示したように、 &lt;code&gt;shell&lt;/code&gt; モジュールはUnicode端末をサポートし、 &lt;code&gt;file&lt;/code&gt; モジュールはディスク上のさまざまなUnicode形式との間の変換を可能にします。</target>
        </trans-unit>
        <trans-unit id="bcfd9b9aeb407171a7e2324b4088b3abd516b2fd" translate="yes" xml:space="preserve">
          <source>IANA Considerations</source>
          <target state="translated">IANAの考察</target>
        </trans-unit>
        <trans-unit id="3e38df6d2fac16695ca12a7c20a2020653e3dafb" translate="yes" xml:space="preserve">
          <source>IC (Erlang IDL Compiler) is an interface generator that, given an IDL interface specification, automatically generates stub code in Erlang, C, or Java. See the IC User's Guide and IC Reference Manual.</source>
          <target state="translated">IC (Erlang IDL Compiler)はインターフェースジェネレータで、IDLインターフェース仕様が与えられると、Erlang,C,Javaのスタブコードを自動的に生成します。ICユーザーガイドとICリファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="0bf03f10d1813cb5d0b794bb41322a916930011c" translate="yes" xml:space="preserve">
          <source>IC file. It runs the IDL compiler.</source>
          <target state="translated">ICファイルです。IDLコンパイラを実行します。</target>
        </trans-unit>
        <trans-unit id="881271d3bb93e752931432a69d275e6c5c697b27" translate="yes" xml:space="preserve">
          <source>IDEA cipher suites are not supported as they have become deprecated by the TLS 1.2 specification so it is not motivated to implement them.</source>
          <target state="translated">IDEA の暗号スイートは TLS 1.2 仕様で非推奨となっているため、実装する気にならない。</target>
        </trans-unit>
        <trans-unit id="c51d7c7db41d3c06e8b204e1bc79bfc7925a9210" translate="yes" xml:space="preserve">
          <source>IETF - which calls the protocol Megaco</source>
          <target state="translated">IETF-プロトコルを Megaco と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="7d26936a60ddb99baf38e0efb1e3118fc3bedbec" translate="yes" xml:space="preserve">
          <source>IG (Interface Generator) automatically generated code for port or socket communication between an Erlang program and a C program, given a C header file with certain keywords.</source>
          <target state="translated">IG (Interface Generator)は、特定のキーワードを含むCヘッダファイルを与えられたErlangプログラムとCプログラムの間でポートやソケット通信を行うためのコードを自動的に生成します。</target>
        </trans-unit>
        <trans-unit id="02cd32b9b05d3968d24a31f2968a004c733872e9" translate="yes" xml:space="preserve">
          <source>IG - Removed from Erlang/OTP R6B.</source>
          <target state="translated">IG-Erlang/OTP R6Bから削除。</target>
        </trans-unit>
        <trans-unit id="67d2109a8b5d8e4bb7b9df8f8ac917b156dee2f0" translate="yes" xml:space="preserve">
          <source>IIOP (CORBA)</source>
          <target state="translated">IIOP (CORBA)</target>
        </trans-unit>
        <trans-unit id="e11de130ad140b3de05ef1e6704f79955721f5c1" translate="yes" xml:space="preserve">
          <source>INTEGER, INT, SMALLINT</source>
          <target state="translated">INTEGER,INT,SMALLINT</target>
        </trans-unit>
        <trans-unit id="46a2b346d175bbcf022a9a889eb0d86d5bfeb44a" translate="yes" xml:space="preserve">
          <source>IOString</source>
          <target state="translated">IOString</target>
        </trans-unit>
        <trans-unit id="d191822111684cb0a3235f7ff4be7401211b5c9d" translate="yes" xml:space="preserve">
          <source>IP address, &lt;code&gt;addr&lt;/code&gt;</source>
          <target state="translated">IPアドレス、 &lt;code&gt;addr&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1c4e4f4977f53cb13c9e71db88ccd9dabd0d8c68" translate="yes" xml:space="preserve">
          <source>IP v4 address and nodename.</source>
          <target state="translated">IP v4 アドレスとノード名。</target>
        </trans-unit>
        <trans-unit id="a762fd412e63e6cdda70621754e625a105c877a8" translate="yes" xml:space="preserve">
          <source>IP v4 address.</source>
          <target state="translated">IP v4アドレス。</target>
        </trans-unit>
        <trans-unit id="5b376f791ddb908dfa5eec43b3c5893ba79b006b" translate="yes" xml:space="preserve">
          <source>IP version to use when the host address is specified as &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">ホストアドレスが &lt;code&gt;any&lt;/code&gt; として指定されている場合に使用するIPバージョン。</target>
        </trans-unit>
        <trans-unit id="96a0cbf4fd8e6bbadf81a2623591ae93a5fab7c6" translate="yes" xml:space="preserve">
          <source>IPsec is transparent to diameter.</source>
          <target state="translated">IPsecは直径に透過性があります。</target>
        </trans-unit>
        <trans-unit id="18ab43ebeda307979a5cae1e044580f0b576b6b9" translate="yes" xml:space="preserve">
          <source>ISO Latin-1 (0-255, one character per byte). Here, case parameter &lt;code&gt;InEncoding&lt;/code&gt; is to be specified as &lt;code&gt;latin1&lt;/code&gt;.</source>
          <target state="translated">ISO Latin-1（0-255、バイトごとに1文字）。ここでは、ケースパラメータ &lt;code&gt;InEncoding&lt;/code&gt; を &lt;code&gt;latin1&lt;/code&gt; として指定します。</target>
        </trans-unit>
        <trans-unit id="d5e544629e4d17007bac72590a9cae9dd3b4b775" translate="yes" xml:space="preserve">
          <source>ITU - which calls the protocol H.248</source>
          <target state="translated">ITU-プロトコルを H.248 と呼んでいます。</target>
        </trans-unit>
        <trans-unit id="c633b237421559cb6821152c0d77a40227baef6f" translate="yes" xml:space="preserve">
          <source>Id of the &lt;code&gt;ssh&lt;/code&gt; channel as returned by &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/2,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/2,4&lt;/a&gt;&lt;/code&gt; によって返される &lt;code&gt;ssh&lt;/code&gt; チャネルのID 。</target>
        </trans-unit>
        <trans-unit id="eee9bf2e79695b73d87e005e3af0acf3c8bf8e02" translate="yes" xml:space="preserve">
          <source>Ideally, your code only contains the first type of efficient code. If that turns out to be too slow, profile the application to find out where the performance bottlenecks are and optimize only the bottlenecks. Let other code stay as clean as possible.</source>
          <target state="translated">理想的には、コードには最初のタイプの効率的なコードしか含まれていません。それが遅すぎると判明した場合は、アプリケーションをプロファイルしてパフォーマンスのボトルネックがどこにあるかを見つけ、ボトルネックのみを最適化します。他のコードは可能な限りクリーンなままにしておきます。</target>
        </trans-unit>
        <trans-unit id="c30e59972c073691c1e830409d7104410fccdf7c" translate="yes" xml:space="preserve">
          <source>Identified processor states may be different on different operating systems and may change between different versions of &lt;code&gt;cpu_sup&lt;/code&gt; on the same operating system. The sum of the percentage shares of the CPU cycles spent in all busy and all non-busy processor states will always add up to 100%, though.</source>
          <target state="translated">特定されたプロセッサの状態は、オペレーティングシステムによって異なる場合があり、同じオペレーティングシステムの &lt;code&gt;cpu_sup&lt;/code&gt; の異なるバージョン間で異なる場合があります。ただし、すべてのビジー状態とすべての非ビジー状態で費やされたCPUサイクルの割合の合計は、常に100％になります。</target>
        </trans-unit>
        <trans-unit id="b46580854e82988aa9e6377bc948b9ced562fe4b" translate="yes" xml:space="preserve">
          <source>Identifiers.</source>
          <target state="translated">Identifiers.</target>
        </trans-unit>
        <trans-unit id="c4b828ddf628f41cc4d390c6deaa0302ac12c3dd" translate="yes" xml:space="preserve">
          <source>Identifies a TLS session.</source>
          <target state="translated">TLS セッションを識別します。</target>
        </trans-unit>
        <trans-unit id="75bb32d0a7ac84997a35ee28f73ca250b15a818d" translate="yes" xml:space="preserve">
          <source>Identifies a counter array returned from &lt;code&gt;&lt;a href=&quot;#new-2&quot;&gt;new/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#new-2&quot;&gt;new/2&lt;/a&gt;&lt;/code&gt; から返されたカウンター配列を識別します。</target>
        </trans-unit>
        <trans-unit id="99d9be73f1ae427426eb7dad6ec17364635870b5" translate="yes" xml:space="preserve">
          <source>Identifies an atomic array returned from &lt;code&gt;&lt;a href=&quot;#new-2&quot;&gt;new/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#new-2&quot;&gt;new/2&lt;/a&gt;&lt;/code&gt; から返されたアトミック配列を識別します。</target>
        </trans-unit>
        <trans-unit id="cc1aea5ef7b08c4fe2e094b55f89ec9a27cc6266" translate="yes" xml:space="preserve">
          <source>Identifies and returns the type of Erlang term encoded in a buffer. It skips a trailing &lt;strong&gt;magic&lt;/strong&gt; identifier.</source>
          <target state="translated">バッファにエンコードされたErlang用語のタイプを識別して返します。末尾の&lt;strong&gt;マジック&lt;/strong&gt;識別子をスキップします。</target>
        </trans-unit>
        <trans-unit id="d4286448984448b29096cfc37d85e421cb0b828a" translate="yes" xml:space="preserve">
          <source>Identifies the file system where the file is located. In Windows, the number indicates a drive as follows: 0 means A:, 1 means B:, and so on.</source>
          <target state="translated">ファイルが配置されているファイルシステムを識別します。Windowsの場合、数字は以下のようにドライブを示します。0はA:を、1はB:を意味します。</target>
        </trans-unit>
        <trans-unit id="a78e241d75b4386f5966c1f03850bc25044aab1e" translate="yes" xml:space="preserve">
          <source>Identifies the key to be used. The format depends on the loaded engine. It is passed to the &lt;code&gt;ENGINE_load_(private|public)_key&lt;/code&gt; functions in libcrypto.</source>
          <target state="translated">使用するキーを識別します。フォーマットはロードされたエンジンに依存します。libcrypto の &lt;code&gt;ENGINE_load_(private|public)_key&lt;/code&gt; 関数に渡されます。</target>
        </trans-unit>
        <trans-unit id="5c6a3f5a562e2ce595bdeeb857c4ae74f4eb3a1c" translate="yes" xml:space="preserve">
          <source>Identifies what information to sort by.</source>
          <target state="translated">どのような情報でソートするかを識別します。</target>
        </trans-unit>
        <trans-unit id="4c35819884b50461c098d94e30fb5a14c994b48c" translate="yes" xml:space="preserve">
          <source>Identifying capturing parentheses by number is simple, but it can be hard to keep track of the numbers in complicated regular expressions. Also, if an expression is modified, the numbers can change. To help with this difficulty, PCRE supports the naming of subpatterns. This feature was not added to Perl until release 5.10. Python had the feature earlier, and PCRE introduced it at release 4.0, using the Python syntax. PCRE now supports both the Perl and the Python syntax. Perl allows identically numbered subpatterns to have different names, but PCRE does not.</source>
          <target state="translated">キャプチャ括弧を数字で識別するのは簡単ですが、複雑な正規表現では数字を把握するのが大変な場合があります。また、式が変更された場合、番号が変更されることもあります。この問題を解決するために、PCREはサブパターンの名前付けをサポートしています。この機能はPerlにはリリース5.10まで追加されていませんでした。Pythonにはそれ以前にもこの機能があり、PCREはリリース4.0でPythonの構文を使用して導入しました。PCREは現在、PerlとPython構文の両方をサポートしています。Perlでは、同一番号のサブパターンに異なる名前を付けることができますが、PCREではそれができません。</target>
        </trans-unit>
        <trans-unit id="86dd18440c1a33a5adeeb3446934c0824c7a25f8" translate="yes" xml:space="preserve">
          <source>Identity of connection or session configuration in a configuration file.</source>
          <target state="translated">設定ファイル内の接続またはセッション設定のアイデンティティ。</target>
        </trans-unit>
        <trans-unit id="dee66e066bf8a35e6b819408cf3275f475346209" translate="yes" xml:space="preserve">
          <source>Ideographic space</source>
          <target state="translated">表意空間</target>
        </trans-unit>
        <trans-unit id="772dd6d712cea08023a9c33b5e08bad4fba86f2b" translate="yes" xml:space="preserve">
          <source>Idle.</source>
          <target state="translated">Idle.</target>
        </trans-unit>
        <trans-unit id="d71d2a6296b765e49d14ea0b96f03799b0b788cf" translate="yes" xml:space="preserve">
          <source>If (*ACCEPT) is inside capturing parentheses, the data so far is captured. For example, the following matches &quot;AB&quot;, &quot;AAD&quot;, or &quot;ACD&quot;. When it matches &quot;AB&quot;, &quot;B&quot; is captured by the outer parentheses.</source>
          <target state="translated">(*ACCEPT)がキャプチャ括弧内にある場合は、これまでのデータがキャプチャされます。例えば、以下のように「AB」「AAD」「ACD」にマッチします。AB」にマッチした場合、「B」は外側の括弧でキャプチャされます。</target>
        </trans-unit>
        <trans-unit id="17049b973641f08ec5c309099cc30f3f32903038" translate="yes" xml:space="preserve">
          <source>If (*COMMIT) is the only backtracking verb that is encountered, once it has been passed, &lt;code&gt;&lt;a href=&quot;#run-2&quot;&gt;run/2,3&lt;/a&gt;&lt;/code&gt; is committed to find a match at the current starting point, or not at all, for example:</source>
          <target state="translated">（* COMMIT）が遭遇した唯一のバックトラッキング動詞である場合、それが渡されると、 &lt;code&gt;&lt;a href=&quot;#run-2&quot;&gt;run/2,3&lt;/a&gt;&lt;/code&gt; がコミットされ、現在の開始点で一致を検索するか、まったく検索されません。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="4f0f3a8fd87c3eaeb73231280dec7eb243d5903c" translate="yes" xml:space="preserve">
          <source>If +MMscrpm is set to true, which is default, the initial allocation will reserve physical memory for the entire super carrier. This can be used by users that want to ensure a certain &lt;strong&gt;minimum&lt;/strong&gt; amount of physical memory for the VM.</source>
          <target state="translated">+ MMscrpmがデフォルトであるtrueに設定されている場合、初期割り当てはスーパーキャリア全体の物理メモリを予約します。これは、VMに特定の&lt;strong&gt;最小&lt;/strong&gt;量の物理メモリを確保したいユーザーが使用できます。</target>
        </trans-unit>
        <trans-unit id="40ba26284bd6bedd0128033397652d534ba6ab6d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt; file:native_name_encoding/0&lt;/code&gt; returns &lt;code&gt;latin1&lt;/code&gt;, no translation of path names is done.</source>
          <target state="translated">場合は &lt;code&gt; file:native_name_encoding/0&lt;/code&gt; を返しますが &lt;code&gt;latin1&lt;/code&gt; の、パス名のない変換は行われません。</target>
        </trans-unit>
        <trans-unit id="66bd65b9d1cb2983119740d6067afd32e3a7d58b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt; file:native_name_encoding/0&lt;/code&gt; returns &lt;code&gt;utf8&lt;/code&gt;, path names are encoded in UTF-8 when creating tar files, and path names are assumed to be encoded in UTF-8 when extracting tar files.</source>
          <target state="translated">&lt;code&gt; file:native_name_encoding/0&lt;/code&gt; が &lt;code&gt;utf8&lt;/code&gt; を返す場合、パス名はtarファイルの作成時にUTF-8でエンコードされ、パス名はtarファイルの抽出時にUTF-8でエンコードされていると見なされます。</target>
        </trans-unit>
        <trans-unit id="d780bbcc021b00d62054ba34ee21d203ad8580fa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;schedule&quot;&lt;/code&gt; is known to the &lt;code&gt;global&lt;/code&gt; module in &lt;code&gt;Kernel&lt;/code&gt;, an Erlang pid is returned that can be used to send messages to the schedule service. Also, &lt;code&gt;node&lt;/code&gt; is initialized to contain the name of the node where the service is registered, so that you can make a connection to it by simply passing the variable to &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;&quot;schedule&quot;&lt;/code&gt; にはよく知られている &lt;code&gt;global&lt;/code&gt; にモジュール &lt;code&gt;Kernel&lt;/code&gt; 、ErlangのPIDは、スケジュールサービスにメッセージを送信するために使用することができますが返されます。また、 &lt;code&gt;node&lt;/code&gt; はサービスが登録されているノードの名前を含むように初期化されているため、変数を &lt;code&gt;&lt;a href=&quot;erl_connect&quot;&gt;erl_connect&lt;/a&gt;&lt;/code&gt; に渡すだけでノードに接続できます。</target>
        </trans-unit>
        <trans-unit id="1dd779b7143c0739432543164284fa524cccd2f7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&quot;schedule&quot;&lt;/code&gt; is known to the &lt;code&gt;global&lt;/code&gt; module in &lt;code&gt;Kernel&lt;/code&gt;, an Erlang pid is written to the_pid. This pid that can be used to send messages to the schedule service. Also, &lt;code&gt;node&lt;/code&gt; is initialized to contain the name of the node where the service is registered, so that you can make a connection to it by simply passing the variable to &lt;code&gt;&lt;a href=&quot;ei_connect&quot;&gt;ei_connect&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;&quot;schedule&quot;&lt;/code&gt; にはよく知られている &lt;code&gt;global&lt;/code&gt; でのモジュール &lt;code&gt;Kernel&lt;/code&gt; 、Erlangのpidはthe_pidに書き込まれます。スケジュールサービスにメッセージを送信するために使用できるこのpid。また、 &lt;code&gt;node&lt;/code&gt; はサービスが登録されているノードの名前を含むように初期化されるため、変数を &lt;code&gt;&lt;a href=&quot;ei_connect&quot;&gt;ei_connect&lt;/a&gt;&lt;/code&gt; に渡すだけでノードに接続できます。</target>
        </trans-unit>
        <trans-unit id="9e26772d0fb234e217566d6d19fae8939ae23412" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt; &lt;strong&gt;callback mode&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt;&lt;code&gt;handle_event_function&lt;/code&gt; is used, all events are handled in &lt;code&gt;Module:handle_event/4&lt;/code&gt; and we can (but do not have to) use an event-centered approach where we first branch depending on event and then depending on state:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt; &lt;strong&gt;callback mode&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; &lt;code&gt;handle_event_function&lt;/code&gt; が使用される場合、すべてのイベントは &lt;code&gt;Module:handle_event/4&lt;/code&gt; で処理され、最初にイベントに応じて分岐し、次に状態に応じて分岐するイベント中心のアプローチを使用できます（ただし、そうする必要はありません）。 &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c6005483687ef9ab80b3590fb0cf13631ca631c7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt;Callback Mode&lt;/a&gt;&lt;/code&gt;&lt;code&gt;handle_event_function&lt;/code&gt; is used, all events are handled in &lt;code&gt;Module:handle_event/4&lt;/code&gt; and we can (but do not have to) use an event-centered approach where we first branch depending on event and then depending on state:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Callback%20Modes&quot;&gt;Callback Mode&lt;/a&gt;&lt;/code&gt; &lt;code&gt;handle_event_function&lt;/code&gt; を使用する場合、すべてのイベントは &lt;code&gt;Module:handle_event/4&lt;/code&gt; で処理され、最初にイベントに応じて、次に状態に応じて分岐するイベント中心のアプローチを使用できます（ただし、必須ではありません）。</target>
        </trans-unit>
        <trans-unit id="bebc3f9361919a37bdadad08140e7c6cde4d32d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; does not return such a list, no &lt;strong&gt;state enter calls&lt;/strong&gt; are done.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; がそのようなリストを返さない場合、&lt;strong&gt;状態入力呼び出し&lt;/strong&gt;は行われません。</target>
        </trans-unit>
        <trans-unit id="ca5cadc65f5f231df3ce6310110d1f4f33d8f4c8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; does not return such a list, no state enter calls are done.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; がそのようなリストを返さない場合、状態のenter呼び出しは行われません。</target>
        </trans-unit>
        <trans-unit id="f1ede23ffb5bebc5707015ac6f688b4dfda3fb06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; returns a list containing &lt;code&gt;state_enter&lt;/code&gt;, the &lt;code&gt;gen_statem&lt;/code&gt; engine will, at every &lt;strong&gt;state change&lt;/strong&gt;, call the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; with arguments &lt;code&gt;(enter, OldState, Data)&lt;/code&gt; or &lt;code&gt;(enter, OldState, State, Data)&lt;/code&gt;, depending on the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;. This may look like an event but is really a call performed after the previous &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; returned and before any event is delivered to the new &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;. See &lt;code&gt;&lt;a href=&quot;#Module:StateName-3&quot;&gt;Module:StateName/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:handle_event-4&quot;&gt;Module:handle_event/4&lt;/a&gt;&lt;/code&gt;. Such a call can be repeated by returning a &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state &lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state_and_data &lt;/a&gt;&lt;/code&gt; tuple from the &lt;strong&gt;state callback&lt;/strong&gt;.</source>
          <target state="translated">もし &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; を返す含むリスト &lt;code&gt;state_enter&lt;/code&gt; を、 &lt;code&gt;gen_statem&lt;/code&gt; のエンジンは、すべての時になり&lt;strong&gt;、状態変化&lt;/strong&gt;、呼び出し &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; の引数を持つ &lt;code&gt;(enter, OldState, Data)&lt;/code&gt; かを &lt;code&gt;(enter, OldState, State, Data)&lt;/code&gt; に応じて、 &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 。これはイベントのように見えるかもしれませんが、実際には、前の &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 返された後、イベントが新しい &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 配信される前に実行される&lt;strong&gt;呼び出し&lt;/strong&gt;です。 &lt;code&gt;&lt;a href=&quot;#Module:StateName-3&quot;&gt;Module:StateName/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#Module:handle_event-4&quot;&gt;Module:handle_event/4&lt;/a&gt;&lt;/code&gt; を参照してください。このような呼び出しは、 &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state &lt;/a&gt;&lt;/code&gt; を返すことで繰り返すことができますまたは、&lt;strong&gt;状態コールバック&lt;/strong&gt;からの &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state_and_data &lt;/a&gt;&lt;/code&gt; タプル。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="acdd1ca7763b0bdfa6212efd72aad6a1d16e6bec" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; returns a list containing &lt;code&gt;state_enter&lt;/code&gt;, the &lt;code&gt;gen_statem&lt;/code&gt; engine will, at every state change, call the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; with arguments &lt;code&gt;(enter, OldState, Data)&lt;/code&gt;. This may look like an event but is really a call performed after the previous state callback returned and before any event is delivered to the new state callback. See &lt;code&gt;&lt;a href=&quot;#Module:StateName-3&quot;&gt;Module:StateName/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:handle_event-4&quot;&gt;Module:handle_event/4&lt;/a&gt;&lt;/code&gt;. Such a call can be repeated by returning a &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state_and_data&lt;/a&gt;&lt;/code&gt; tuple from the state callback.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#Module:callback_mode-0&quot;&gt;Module:callback_mode/0&lt;/a&gt;&lt;/code&gt; 戻り含むリスト &lt;code&gt;state_enter&lt;/code&gt; を、 &lt;code&gt;gen_statem&lt;/code&gt; のエンジンは、すべての状態変化で、呼び出す &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; の引数とを &lt;code&gt;(enter, OldState, Data)&lt;/code&gt; 。これはイベントのように見えますが、実際には前の状態のコールバックが返された後、イベントが新しい状態のコールバックに配信される前に実行される呼び出しです。 &lt;code&gt;&lt;a href=&quot;#Module:StateName-3&quot;&gt;Module:StateName/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#Module:handle_event-4&quot;&gt;Module:handle_event/4&lt;/a&gt;&lt;/code&gt; を参照してください。このような呼び出しは、ステートコールバックから &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state_and_data&lt;/a&gt;&lt;/code&gt; タプルを返すことで繰り返すことができます。</target>
        </trans-unit>
        <trans-unit id="c28ef58b982d1f354c9c1bb974e90b1d95e0f6b3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;Module:code_change/4&lt;/a&gt;&lt;/code&gt; should transform the state, it is regarded as a state rename and not a &lt;strong&gt;state change&lt;/strong&gt;, which will not cause a &lt;strong&gt;state enter call&lt;/strong&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;Module:code_change/4&lt;/a&gt;&lt;/code&gt; 状態を変換する必要があり、国家の名前を変更していないとみなされている&lt;strong&gt;状態変化&lt;/strong&gt;は発生しませんこれは、&lt;strong&gt;状態がコールを入力してください&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="d69858e99b09a6a2285a4ba103a8f8d3c928ade9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;Module:code_change/4&lt;/a&gt;&lt;/code&gt; should transform the state, it is regarded as a state rename and not a state change, which will not cause a state enter call.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;Module:code_change/4&lt;/a&gt;&lt;/code&gt; 状態を変換する必要があり、状態がコールに入ることはありませんこれは、状態名の変更ではなく、状態の変化とみなされています。</target>
        </trans-unit>
        <trans-unit id="c3e9d1ef03578b7d4de76213b44cdc398818f9bc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the current event is postponed.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;true&lt;/code&gt; 、現在のイベントが延期されます。</target>
        </trans-unit>
        <trans-unit id="af5f4ef54abaee17eded82e21fef9696e20a28ee" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt; &lt;strong&gt;state enter calls&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; are used, and either it is the initial state or one of the callback results &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state_and_data &lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state_and_data &lt;/a&gt;&lt;/code&gt; is used the &lt;code&gt;gen_statem&lt;/code&gt; engine calls the current state callback with arguments &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, State, Data)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, State, State, Data)&lt;/a&gt;&lt;/code&gt; (depending on &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;) and when it returns starts again from the top of this sequence.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt; &lt;strong&gt;state enter calls&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; 使用されており、どちらかそれは、コールバック結果の初期状態または1である &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state_and_data &lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt; repeat_state_and_data &lt;/a&gt;&lt;/code&gt; 使用されている &lt;code&gt;gen_statem&lt;/code&gt; エンジンは、引数を指定して、現在の状態のコールバックを呼び出します &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, State, Data)&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, State, State, Data)&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; によって異なり&lt;strong&gt;ます&lt;/strong&gt;）そしてそれが戻ると、このシーケンスの先頭から再開します。 &lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="bd474c164e6c98dd34c39ad22b25553a62777256" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt; &lt;strong&gt;state enter calls&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; are used, and the state changes the &lt;code&gt;gen_statem&lt;/code&gt; engine calls the new state callback with arguments &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, OldState, Data)&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, OldState, State, Data)&lt;/a&gt;&lt;/code&gt; (depending on &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;) and when it returns starts again from the top of this sequence.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt; &lt;strong&gt;state enter calls&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; が使用され、状態が変更された場合、 &lt;code&gt;gen_statem&lt;/code&gt; エンジンは、引数 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, OldState, Data)&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, OldState, State, Data)&lt;/a&gt;&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 応じて）を使用して新しい状態コールバックを呼び出し、戻ると再び開始しますこのシーケンスの先頭から。 &lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e210051c1bffc48ec6b9fc364560332e7094f3fb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; are used, and either: the state changes, it is the initial state, or one of the callback results &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state_and_data&lt;/a&gt;&lt;/code&gt; is used; the &lt;code&gt;gen_statem&lt;/code&gt; calls the new state callback with arguments &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, OldState, Data)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 使用し、いずれかをされています。状態の変化を、それが初期状態である、またはコールバックの結果の一つは、 &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-state_callback_result&quot;&gt;repeat_state_and_data&lt;/a&gt;&lt;/code&gt; が使用されています。 &lt;code&gt;gen_statem&lt;/code&gt; は引数を持つ新しい状態コールバックを呼び出します &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;(enter, OldState, Data)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="16fb9d916c4a4fe6d38e2fad03d1c0057e0a3ba9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;&lt;a href=&quot;release_handling#sys&quot;&gt;release handling&lt;/a&gt;&lt;/code&gt; is used, exactly one system configuration file is to be used and that file is to be called &lt;code&gt;sys.config&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;release_handling#sys&quot;&gt;release handling&lt;/a&gt;&lt;/code&gt; を使用する場合は、システム構成ファイルを1つだけ使用し、そのファイルを &lt;code&gt;sys.config&lt;/code&gt; と呼びます。</target>
        </trans-unit>
        <trans-unit id="51507c4f6a07b6ee28c5c354867983982dadbd0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Abs&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; an absolute timer is started, and if it is &lt;code&gt;false&lt;/code&gt; a relative, which is the default. See &lt;code&gt; erlang:start_timer/4 &lt;/code&gt; for details.</source>
          <target state="translated">場合 &lt;code&gt;Abs&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 絶対タイマーが開始され、それがある場合 &lt;code&gt;false&lt;/code&gt; 、デフォルトであるAの相対を、。詳細については、 &lt;code&gt; erlang:start_timer/4 &lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6115cbb4f02f28f406dcce7ea93217a4c99b305" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Abs&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; an absolute timer is started, and if it is &lt;code&gt;false&lt;/code&gt; a relative, which is the default. See &lt;code&gt;erlang:start_timer/4&lt;/code&gt; for details.</source>
          <target state="translated">場合 &lt;code&gt;Abs&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 絶対タイマーが開始され、それがある場合 &lt;code&gt;false&lt;/code&gt; 、デフォルトであるAの相対を、。詳細については、 &lt;code&gt;erlang:start_timer/4&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0a20b01d494121fa23ac0f013c356e2645f0690" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ActiveSuspendCount =/= 0&lt;/code&gt;, &lt;code&gt;Suspendee&lt;/code&gt; is currently in the suspended state.</source>
          <target state="translated">&lt;code&gt;ActiveSuspendCount =/= 0&lt;/code&gt; 場合、 &lt;code&gt;Suspendee&lt;/code&gt; は現在中断状態です。</target>
        </trans-unit>
        <trans-unit id="10d7f30204e89013efcda3ea67f9618ecad92260" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Alg&lt;/code&gt; is &lt;code&gt;crypto&lt;/code&gt; this function behaves exactly like &lt;code&gt;&lt;a href=&quot;#rand_seed_s-0&quot;&gt;rand_seed_s/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Alg&lt;/code&gt; が &lt;code&gt;crypto&lt;/code&gt; いる場合、この関数は &lt;code&gt;&lt;a href=&quot;#rand_seed_s-0&quot;&gt;rand_seed_s/0&lt;/a&gt;&lt;/code&gt; とまったく同じように動作します。</target>
        </trans-unit>
        <trans-unit id="3833f82acaa575d2a76a8a6ea669ec6336dec8e4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Alg&lt;/code&gt; is &lt;code&gt;crypto_cache&lt;/code&gt; this function fetches random data with OpenSSL's &lt;code&gt;RAND_bytes&lt;/code&gt; and caches it for speed using an internal word size of 56 bits that makes calculations fast on 64 bit machines.</source>
          <target state="translated">&lt;code&gt;Alg&lt;/code&gt; が &lt;code&gt;crypto_cache&lt;/code&gt; の場合、この関数はOpenSSLの &lt;code&gt;RAND_bytes&lt;/code&gt; を使用してランダムデータをフェッチし、56ビットの内部ワードサイズを使用して速度を上げてキャッシュするため、64ビットマシンでの計算が高速になります。</target>
        </trans-unit>
        <trans-unit id="81e735d9039bbf6127ac283e19b140ef66799a72" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Asn1Type&lt;/code&gt; is &lt;code&gt;'SubjectPublicKeyInfo'&lt;/code&gt;, &lt;code&gt;Entity&lt;/code&gt; must be either an &lt;code&gt;rsa_public_key()&lt;/code&gt;, &lt;code&gt;dsa_public_key()&lt;/code&gt; or an &lt;code&gt;ec_public_key()&lt;/code&gt; and this function creates the appropriate &lt;code&gt;'SubjectPublicKeyInfo'&lt;/code&gt; entry.</source>
          <target state="translated">場合 &lt;code&gt;Asn1Type&lt;/code&gt; ある &lt;code&gt;'SubjectPublicKeyInfo'&lt;/code&gt; 、 &lt;code&gt;Entity&lt;/code&gt; のいずれかでなければならない &lt;code&gt;rsa_public_key()&lt;/code&gt; 、 &lt;code&gt;dsa_public_key()&lt;/code&gt; または &lt;code&gt;ec_public_key()&lt;/code&gt; この関数は、適切な作成 &lt;code&gt;'SubjectPublicKeyInfo'&lt;/code&gt; エントリ。</target>
        </trans-unit>
        <trans-unit id="540115359cf8a83ae29b77cf40e5db9ee30403e2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Asn1module&lt;/code&gt; is a filename without extension, first &lt;code&gt;&quot;.asn1&quot;&lt;/code&gt; is assumed, then &lt;code&gt;&quot;.asn&quot;&lt;/code&gt;, and finally &lt;code&gt;&quot;.py&quot;&lt;/code&gt; (to be compatible with the old ASN.1 compiler). &lt;code&gt;Asn1module&lt;/code&gt; can be a full pathname (relative or absolute) including filename with (or without) extension.</source>
          <target state="translated">&lt;code&gt;Asn1module&lt;/code&gt; が拡張子のないファイル名の場合、最初に &lt;code&gt;&quot;.asn1&quot;&lt;/code&gt; 、次に &lt;code&gt;&quot;.asn&quot;&lt;/code&gt; 、最後に &lt;code&gt;&quot;.py&quot;&lt;/code&gt; と見なされます（古いASN.1コンパイラと互換性があります）。 &lt;code&gt;Asn1module&lt;/code&gt; は、拡張子付き（または拡張子なし）のファイル名を含む完全パス名（相対または絶対）にすることができます。</target>
        </trans-unit>
        <trans-unit id="9fdaeedafeeda6ab32c9d50b3c97381ca731e512" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Bin&lt;/code&gt; does not contain the entire packet, &lt;code&gt;{more,Length}&lt;/code&gt; is returned. &lt;code&gt;Length&lt;/code&gt; is either the expected &lt;strong&gt;total size&lt;/strong&gt; of the packet, or &lt;code&gt;undefined&lt;/code&gt; if the expected packet size is unknown. &lt;code&gt;decode_packet&lt;/code&gt; can then be called again with more data added.</source>
          <target state="translated">&lt;code&gt;Bin&lt;/code&gt; にパケット全体が含まれていない場合、 &lt;code&gt;{more,Length}&lt;/code&gt; が返されます。 &lt;code&gt;Length&lt;/code&gt; は、予想されるパケットの&lt;strong&gt;合計サイズ&lt;/strong&gt;か、予想されるパケットサイズが不明な場合は &lt;code&gt;undefined&lt;/code&gt; です。その後、さらにデータを追加して、 &lt;code&gt;decode_packet&lt;/code&gt; を再度呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="f95f96eeb6722b14446ed74c5ef5dfae744b890d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BinRel1&lt;/code&gt; is omitted, the relation of equality between the elements of the &lt;code&gt;&lt;a href=&quot;#Cartesian_product_tuple&quot;&gt;Cartesian product&lt;/a&gt;&lt;/code&gt; of the ranges of R[i], range R[1] &amp;times; ... &amp;times; range R[n], is used instead (intuitively, nothing is &quot;lost&quot;).</source>
          <target state="translated">場合 &lt;code&gt;BinRel1&lt;/code&gt; が省略されている、の要素間の平等の関係 &lt;code&gt;&lt;a href=&quot;#Cartesian_product_tuple&quot;&gt;Cartesian product&lt;/a&gt;&lt;/code&gt; R [i]は、範囲R [1]&amp;times;...&amp;times;範囲R [N]の範囲は、「直感的に、何もしない（代わりに使用され失われた」）。</target>
        </trans-unit>
        <trans-unit id="ab7b5f7a351be014914684701b08694a59a8d0bb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Binaries&lt;/code&gt; is not a flat list of binaries, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Binaries&lt;/code&gt; がバイナリのフラットリストでない場合、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="aec03c703d777c73a4a57e3a4befcb0a209f3691" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Binary&lt;/code&gt; contains the object code for module &lt;code&gt;Module&lt;/code&gt;, this BIF loads that object code. If the code for module &lt;code&gt;Module&lt;/code&gt; already exists, all export references are replaced so they point to the newly loaded code. The previously loaded code is kept in the system as old code, as there can still be processes executing that code.</source>
          <target state="translated">&lt;code&gt;Binary&lt;/code&gt; にモジュール &lt;code&gt;Module&lt;/code&gt; のオブジェクトコードが含まれている場合、このBIFはそのオブジェクトコードをロードします。モジュール &lt;code&gt;Module&lt;/code&gt; のコードが既に存在する場合は、すべてのエクスポート参照が置き換えられて、新しくロードされたコードを指すようにします。以前にロードされたコードは、そのコードを実行するプロセスがまだ存在する可能性があるため、古いコードとしてシステムに保持されます。</target>
        </trans-unit>
        <trans-unit id="bf1ea3c8c99142091a2f51c1e81be7adb284b19c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BlockState =:= block&lt;/code&gt;, multi-scheduling is blocked. That is, one and only one scheduler thread will execute. If &lt;code&gt;BlockState =:= unblock&lt;/code&gt; and no one else blocks multi-scheduling, and this process has blocked only once, multi-scheduling is unblocked.</source>
          <target state="translated">&lt;code&gt;BlockState =:= block&lt;/code&gt; 場合、マルチスケジューリングはブロックされます。つまり、1つだけのスケジューラスレッドが実行されます。もし &lt;code&gt;BlockState =:= unblock&lt;/code&gt; と誰も他のブロックのマルチスケジューリング、およびこのプロセスは一度だけブロックされた、マルチスケジューリングのブロックが解除されます。</target>
        </trans-unit>
        <trans-unit id="39adb796c018ce57c270103c3c52ab7a2219f00b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;BlockState =:= block_normal&lt;/code&gt;, normal multi-scheduling is blocked. That is, only one normal scheduler thread will execute, but multiple dirty schedulers can execute. If &lt;code&gt;BlockState =:= unblock_normal&lt;/code&gt; and no one else blocks normal multi-scheduling, and this process has blocked only once, normal multi-scheduling is unblocked.</source>
          <target state="translated">&lt;code&gt;BlockState =:= block_normal&lt;/code&gt; 場合、通常のマルチスケジューリングはブロックされます。つまり、通常のスケジューラスレッドは1つだけ実行されますが、ダーティスケジューラは複数実行できます。もし &lt;code&gt;BlockState =:= unblock_normal&lt;/code&gt; とマルチスケジューリング通常誰も他のブロック、およびこのプロセスは一度だけブロックされた、通常のマルチスケジューリングのブロックが解除されます。</target>
        </trans-unit>
        <trans-unit id="4eabdce3dc316d89d6448638269f7e3485875fb5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Body&lt;/code&gt; is returned and equal to &lt;code&gt;{Fun,Arg}&lt;/code&gt;, the web server tries &lt;code&gt;apply/2&lt;/code&gt; on &lt;code&gt;Fun&lt;/code&gt; with &lt;code&gt;Arg&lt;/code&gt; as argument. The web server expects that the fun either returns a list &lt;code&gt;(Body)&lt;/code&gt; that is an HTTP repsonse, or the atom &lt;code&gt;sent&lt;/code&gt; if the HTTP response is sent back to the client. If &lt;code&gt;close&lt;/code&gt; is returned from the fun, something has gone wrong and the server signals this to the client by closing the connection.</source>
          <target state="translated">&lt;code&gt;Body&lt;/code&gt; が返され、 &lt;code&gt;{Fun,Arg}&lt;/code&gt; と等しい場合、Webサーバーは &lt;code&gt;Arg&lt;/code&gt; を引数として &lt;code&gt;Fun&lt;/code&gt; で &lt;code&gt;apply/2&lt;/code&gt; を試行します。 Webサーバーは、fun がHTTP応答であるリスト &lt;code&gt;(Body)&lt;/code&gt; 、またはHTTP応答がクライアントに送り返さ &lt;code&gt;sent&lt;/code&gt; 場合に送信されるアトムのいずれかを返すことを期待しています。funから &lt;code&gt;close&lt;/code&gt; が返された場合、何かがうまくいかず、サーバーは接続を閉じることによってクライアントにこれを通知します。</target>
        </trans-unit>
        <trans-unit id="501ba76048afe6c06b0d19442d6fa569952e8089" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Bool&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt; (the default value), &lt;code&gt;rb&lt;/code&gt; prints an error message to &lt;code&gt;stdout&lt;/code&gt; for every bad report it encounters, but the logging process is never ended. All printable reports are written. If logging to file is enabled, &lt;code&gt;rb&lt;/code&gt; prints &lt;code&gt;* UNPRINTABLE REPORT *&lt;/code&gt; in the log file at the location of an unprintable report.</source>
          <target state="translated">場合は &lt;code&gt;Bool&lt;/code&gt; ある &lt;code&gt;false&lt;/code&gt; （デフォルト値）、 &lt;code&gt;rb&lt;/code&gt; にエラーメッセージを出力 &lt;code&gt;stdout&lt;/code&gt; 、検出したすべての悪いレポートではなく、ロギング処理が終了されることはありません。すべての印刷可能なレポートが書き込まれます。ファイルへのロギングが有効になっている場合は、 &lt;code&gt;rb&lt;/code&gt; プリントが &lt;code&gt;* UNPRINTABLE REPORT *&lt;/code&gt; 印刷不能レポートの場所にログファイルにします。</target>
        </trans-unit>
        <trans-unit id="adf90318c831c61cd69b483b3f045a3d3bf9c68f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Bool&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;rb&lt;/code&gt; stops logging (and prints an error message to &lt;code&gt;stdout&lt;/code&gt;) if it encounters a badly formatted report. If logging to file is enabled, an error message is appended to the log file as well.</source>
          <target state="translated">場合は &lt;code&gt;Bool&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;rb&lt;/code&gt; ロギングを停止する（とにエラーメッセージを出力 &lt;code&gt;stdout&lt;/code&gt; ）それはひどく形式のレポートに遭遇した場合。ファイルへのロギングが有効になっている場合は、エラーメッセージもログファイルに追加されます。</target>
        </trans-unit>
        <trans-unit id="f4e4245f2e5400c897f04314650c4ae5a083dc43" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Boolean == true&lt;/code&gt;, option &lt;code&gt;TCP_NODELAY&lt;/code&gt; is turned on for the socket, which means that also small amounts of data are sent immediately.</source>
          <target state="translated">&lt;code&gt;Boolean == true&lt;/code&gt; 場合、ソケットに対してオプション &lt;code&gt;TCP_NODELAY&lt;/code&gt; がオンになります。つまり、少量のデータもすぐに送信されます。</target>
        </trans-unit>
        <trans-unit id="694f121851d48acf6a07239b2f70a6b720fe0aa3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Boolean == true&lt;/code&gt;, the corresponding option is turned on for the socket, which means that small amounts of data are accumulated until a full MSS-worth of data is available or this option is turned off.</source>
          <target state="translated">場合は &lt;code&gt;Boolean == true&lt;/code&gt; 、対応するオプションは、データの完全なMSS-価値が入手可能であるか、またはこのオプションがオフになるまで、少量のデータが蓄積されていることを意味ソケット、オンになっています。</target>
        </trans-unit>
        <trans-unit id="81aeea37b05ee5c673682e9fcc0d5b3b90b2fd57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Button&lt;/code&gt; is a top type and it is needed to exclude component &lt;code&gt;number&lt;/code&gt; from decode, &lt;code&gt;Type_List&lt;/code&gt; in the instruction in the configuration file is &lt;code&gt;['Button',[{number,undecoded}]]&lt;/code&gt;. If you call the decode function &lt;code&gt;decode_Button_exclusive&lt;/code&gt;, &lt;code&gt;Decode_Instruction&lt;/code&gt; is &lt;code&gt;{decode_Button_exclusive,['Button',[{number,undecoded}]]}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Button&lt;/code&gt; がトップタイプで、コンポーネント &lt;code&gt;number&lt;/code&gt; をデコードから除外する必要がある場合、構成ファイルの命令の &lt;code&gt;Type_List&lt;/code&gt; は &lt;code&gt;['Button',[{number,undecoded}]]&lt;/code&gt; です。デコード関数 &lt;code&gt;decode_Button_exclusive&lt;/code&gt; を呼び出す場合、 &lt;code&gt;Decode_Instruction&lt;/code&gt; は &lt;code&gt;{decode_Button_exclusive,['Button',[{number,undecoded}]]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b0a8d1dadfc486d1483799d20461767cefd8ed40" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Common Test&lt;/code&gt; Master fails initially to connect to any of the test nodes specified in a test specification or in the &lt;code&gt;InclNodes&lt;/code&gt; list, the operator is prompted with the option to either start over again (after manually checking the status of the nodes in question), to run without the missing nodes, or to abort the operation.</source>
          <target state="translated">場合は &lt;code&gt;Common Test&lt;/code&gt; マスターは、テスト仕様書やテストに指定されたノードのいずれかに接続するために、最初に失敗した &lt;code&gt;InclNodes&lt;/code&gt; のリスト、オペレータは、（後に手動で問題になっているノードのステータスをチェック）やり直すのいずれかのオプションが表示されます不足しているノードなしで実行するか、操作を中止します。</target>
        </trans-unit>
        <trans-unit id="7f9aad828bfbe4d21e5a879fcef15f035543f64c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;CurrentIndentation&lt;/code&gt; is negative, there are no line breaks and only a space is used as a separator.</source>
          <target state="translated">&lt;code&gt;CurrentIndentation&lt;/code&gt; が負の場合、改行はなく、スペースのみがセパレーターとして使用されます。</target>
        </trans-unit>
        <trans-unit id="5c9db23221c4effc6df13f53f295b1b05c8bade4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Data&lt;/code&gt; is an invalid I/O list.</source>
          <target state="translated">場合は &lt;code&gt;Data&lt;/code&gt; 無効なI / Oの一覧です。</target>
        </trans-unit>
        <trans-unit id="d49ad8995eb2ed767b688b2071df0c58e2d5482e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Dates&lt;/code&gt; has the form &lt;code&gt;{DateTo, to}&lt;/code&gt;, reports that occurred before &lt;code&gt;DateTo&lt;/code&gt; are displayed.</source>
          <target state="translated">場合 &lt;code&gt;Dates&lt;/code&gt; 形状を有する &lt;code&gt;{DateTo, to}&lt;/code&gt; 、前に発生したレポート &lt;code&gt;DateTo&lt;/code&gt; が表示されています。</target>
        </trans-unit>
        <trans-unit id="9a74df3b45fff783ce83be5e48dd039ecedaba02" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Dest&lt;/code&gt; is a &lt;code&gt;pid()&lt;/code&gt;, it must be a &lt;code&gt;pid()&lt;/code&gt; of a process created on the current runtime system instance. This process has either terminated or not. If &lt;code&gt;Dest&lt;/code&gt; is an &lt;code&gt;atom()&lt;/code&gt;, it is interpreted as the name of a locally registered process. The process referred to by the name is looked up at the time of timer expiration. No error is returned if the name does not refer to a process.</source>
          <target state="translated">&lt;code&gt;Dest&lt;/code&gt; が &lt;code&gt;pid()&lt;/code&gt; の場合は、現在のランタイムシステムインスタンスで作成されたプロセスの &lt;code&gt;pid()&lt;/code&gt; である必要があります。このプロセスは終了したかどうか。 &lt;code&gt;Dest&lt;/code&gt; が &lt;code&gt;atom()&lt;/code&gt; の場合、ローカルに登録されたプロセスの名前として解釈されます。名前で参照されるプロセスは、タイマーの満了時に検索されます。名前がプロセスを参照していない場合、エラーは返されません。</target>
        </trans-unit>
        <trans-unit id="815563aae4c2a11f4a34513e2da4caef9eb431be" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Dest&lt;/code&gt; is a &lt;code&gt;pid()&lt;/code&gt;, the timer is automatically canceled if the process referred to by the &lt;code&gt;pid()&lt;/code&gt; is not alive, or if the process exits. This feature was introduced in ERTS 5.4.11. Notice that timers are not automatically canceled when &lt;code&gt;Dest&lt;/code&gt; is an &lt;code&gt;atom()&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Dest&lt;/code&gt; ある &lt;code&gt;pid()&lt;/code&gt; プロセスがによって参照すると、タイマーは自動的にキャンセルされる &lt;code&gt;pid()&lt;/code&gt; 生きている、またはプロセスが終了した場合ではありません。この機能はERTS 5.4.11で導入されました。 &lt;code&gt;Dest&lt;/code&gt; が &lt;code&gt;atom()&lt;/code&gt; の場合、タイマーは自動的にキャンセルされないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="444e6101a0cf1c543819e121052f438f584a1b39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Destination&lt;/code&gt; refers to a filename, it is opened with &lt;code&gt;write&lt;/code&gt; mode prepended to the mode list before the copy, and closed when done.</source>
          <target state="translated">&lt;code&gt;Destination&lt;/code&gt; がファイル名を参照する場合、コピーの前にモードリストの前に &lt;code&gt;write&lt;/code&gt; モードを付加して開き、コピーが完了すると閉じます。</target>
        </trans-unit>
        <trans-unit id="4f4e05199aa0bb385a948469feaaa5b970e7e3f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Dir&lt;/code&gt; does not exist</source>
          <target state="translated">場合 &lt;code&gt;Dir&lt;/code&gt; 存在しません。</target>
        </trans-unit>
        <trans-unit id="ee2b254fd6abe2a90dfea4382f11c9cb30169e97" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Distributed == default&lt;/code&gt;, the value for the application in the Kernel configuration parameter &lt;code&gt;distributed&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;Distributed == default&lt;/code&gt; 場合、カーネル構成パラメーター &lt;code&gt;distributed&lt;/code&gt; のアプリケーションの値が使用されます。</target>
        </trans-unit>
        <trans-unit id="49d3ece08d6530837a1ab0ddc7b321c040846a53" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Distributed == {Application,[Time,]Nodes}&lt;/code&gt;, the application becomes distributed. The argument overrides the value for the application in the Kernel configuration parameter &lt;code&gt;distributed&lt;/code&gt;. &lt;code&gt;Application&lt;/code&gt; must be the application name (same as in the first argument). If a node crashes and &lt;code&gt;Time&lt;/code&gt; is specified, the application controller waits for &lt;code&gt;Time&lt;/code&gt; milliseconds before attempting to restart the application on another node. If &lt;code&gt;Time&lt;/code&gt; is not specified, it defaults to &lt;code&gt;0&lt;/code&gt; and the application is restarted immediately.</source>
          <target state="translated">場合 &lt;code&gt;Distributed == {Application,[Time,]Nodes}&lt;/code&gt; 、アプリケーションは、分散型となります。引数は、 &lt;code&gt;distributed&lt;/code&gt; れたカーネル構成パラメーターのアプリケーションの値をオーバーライドします。 &lt;code&gt;Application&lt;/code&gt; はアプリケーション名でなければなりません（最初の引数と同じ）。ノードがクラッシュし、 &lt;code&gt;Time&lt;/code&gt; が指定されている場合、アプリケーションコントローラーは &lt;code&gt;Time&lt;/code&gt; ミリ秒待機してから、別のノードでアプリケーションの再起動を試みます。 &lt;code&gt;Time&lt;/code&gt; を指定しない場合、デフォルトで &lt;code&gt;0&lt;/code&gt; になり、アプリケーションはすぐに再起動されます。</target>
        </trans-unit>
        <trans-unit id="4152fae1a454be09c28651bdb166f8066323431a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Encoding&lt;/code&gt; is &lt;code&gt;latin1&lt;/code&gt;, lists of integers &lt;code&gt;0..255&lt;/code&gt; or binaries containing plain bytes are sent back to the client when possible. If &lt;code&gt;Encoding&lt;/code&gt; is &lt;code&gt;unicode&lt;/code&gt;, lists with integers in the whole Unicode range or binaries encoded in UTF-8 are sent to the client. The user-supplied function always sees lists of integers, never binaries, but the list can contain numbers &amp;gt; 255 if &lt;code&gt;Encoding&lt;/code&gt; is &lt;code&gt;unicode&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; が &lt;code&gt;latin1&lt;/code&gt; の場合、 &lt;code&gt;0..255&lt;/code&gt; 、整数0..255またはプレーンバイトを含むバイナリのリストがクライアントに送り返されます。 &lt;code&gt;Encoding&lt;/code&gt; が &lt;code&gt;unicode&lt;/code&gt; の場合、Unicode範囲全体の整数またはUTF-8でエンコードされたバイナリのリストがクライアントに送信されます。ユーザー指定の関数は常にバイナリのリストではなく整数のリストを参照しますが、 &lt;code&gt;Encoding&lt;/code&gt; が &lt;code&gt;unicode&lt;/code&gt; の場合、リストには255 より大きい数値を含めることができます。</target>
        </trans-unit>
        <trans-unit id="795ff54ae5d53c3fcba2e08602c3c1f2e9df291a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;End == close&lt;/code&gt;, data is returned to the caller when the channel is closed by the server. If a time-out occurs before this happens, the function returns &lt;code&gt;{timeout,Data}&lt;/code&gt; (where &lt;code&gt;Data&lt;/code&gt; is the data received so far).</source>
          <target state="translated">場合は &lt;code&gt;End == close&lt;/code&gt; チャネルがサーバによって閉じられたときに、データが呼び出し元に返されます。これが発生する前に &lt;code&gt;{timeout,Data}&lt;/code&gt; が発生した場合、関数は{timeout、Data}を返します（ &lt;code&gt;Data&lt;/code&gt; はこれまでに受信したデータです）。</target>
        </trans-unit>
        <trans-unit id="4c405ae6dd72ff067086a677208e5abd694be786" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;End == timeout&lt;/code&gt;, a time-out is expected and &lt;code&gt;{ok,Data}&lt;/code&gt; is returned both in the case of a time-out and when the channel is closed.</source>
          <target state="translated">&lt;code&gt;End == timeout&lt;/code&gt; 場合、タイムアウトが予想され、タイムアウトの場合とチャネルが閉じられた場合の両方で &lt;code&gt;{ok,Data}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="9a4d4ab4678c1a0d9f4a6cd0d0cd26eccd4b8374" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;End&lt;/code&gt; is a fun, this fun is called with one argument, the data value in a received &lt;code&gt;ssh_cm&lt;/code&gt; message (see &lt;code&gt;ssh_connection(3)&lt;/code&gt;. The fun is to return either &lt;code&gt;true&lt;/code&gt; to end the receiving operation (and have the so far collected data returned) or &lt;code&gt;false&lt;/code&gt; to wait for more data from the server. Even if a fun is supplied, the function returns immediately if the server closes the channel).</source>
          <target state="translated">&lt;code&gt;End&lt;/code&gt; がfunの場合、このfunは1つの引数、受信した &lt;code&gt;ssh_cm&lt;/code&gt; メッセージのデータ値（ &lt;code&gt;ssh_connection(3)&lt;/code&gt; を参照）で呼び出されます。funは、いずれかの &lt;code&gt;true&lt;/code&gt; を返して受信操作を終了します（これまでに収集されたデータが返されます） ）または &lt;code&gt;false&lt;/code&gt; を返し、サーバーからのデータを待ちます。funが指定されていても、サーバーがチャネルを閉じると、関数はすぐに戻ります）。</target>
        </trans-unit>
        <trans-unit id="91045bcf979078e315cc68ac468e5a360ddec33a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EnumTypeName&lt;/code&gt; does not exist in the ASN.1 specification, the compilation stops with an error code.</source>
          <target state="translated">&lt;code&gt;EnumTypeName&lt;/code&gt; がASN.1仕様に存在しない場合、コンパイルはエラーコードで停止します。</target>
        </trans-unit>
        <trans-unit id="bd759ced4b466f7b939196360d08509e4b762583" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EventMgrName={global,GlobalName}&lt;/code&gt;, the event manager is registered globally as &lt;code&gt;GlobalName&lt;/code&gt; using &lt;code&gt; global:register_name/2&lt;/code&gt;. If no name is provided, the event manager is not registered.</source>
          <target state="translated">場合 &lt;code&gt;EventMgrName={global,GlobalName}&lt;/code&gt; 、イベントマネージャは、以下のようにグローバルに登録されて &lt;code&gt;GlobalName&lt;/code&gt; 使用 &lt;code&gt; global:register_name/2&lt;/code&gt; 。名前が指定されていない場合、イベントマネージャは登録されません。</target>
        </trans-unit>
        <trans-unit id="d6ac5b0475b7a71717a3a976c82dd686c7a2b338" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EventMgrName={global,GlobalName}&lt;/code&gt;, the event manager is registered globally as &lt;code&gt;GlobalName&lt;/code&gt; using &lt;code&gt;global:register_name/2&lt;/code&gt;. If no name is provided, the event manager is not registered.</source>
          <target state="translated">場合 &lt;code&gt;EventMgrName={global,GlobalName}&lt;/code&gt; 、イベントマネージャは、以下のようにグローバルに登録されて &lt;code&gt;GlobalName&lt;/code&gt; 使用 &lt;code&gt;global:register_name/2&lt;/code&gt; 。名前を指定しない場合、イベントマネージャは登録されません。</target>
        </trans-unit>
        <trans-unit id="145008a8fe8d11833ffba04465b46c305eac398a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EventMgrName={local,Name}&lt;/code&gt;, the event manager is registered locally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt;register/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;EventMgrName={local,Name}&lt;/code&gt; 、イベントマネージャは、以下のように局所的に登録されている &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt;register/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c1d48cb710ca1d3e34d2637a454ccf4af2333759" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EventMgrName={via,Module,ViaName}&lt;/code&gt;, the event manager registers with the registry represented by &lt;code&gt;Module&lt;/code&gt;. The &lt;code&gt;Module&lt;/code&gt; callback is to export the functions &lt;code&gt;register_name/2&lt;/code&gt;, &lt;code&gt;unregister_name/1&lt;/code&gt;, &lt;code&gt;whereis_name/1&lt;/code&gt;, and &lt;code&gt;send/2&lt;/code&gt;, which are to behave as the corresponding functions in &lt;code&gt;global&lt;/code&gt;. Thus, &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; is a valid reference.</source>
          <target state="translated">もし &lt;code&gt;EventMgrName={via,Module,ViaName}&lt;/code&gt; で表されるレジストリとイベントマネージャレジスタ、 &lt;code&gt;Module&lt;/code&gt; 。 &lt;code&gt;Module&lt;/code&gt; コールバック関数がエクスポートする &lt;code&gt;register_name/2&lt;/code&gt; 、 &lt;code&gt;unregister_name/1&lt;/code&gt; 、 &lt;code&gt;whereis_name/1&lt;/code&gt; 、及び &lt;code&gt;send/2&lt;/code&gt; に対応する機能として動作するようにされ、 &lt;code&gt;global&lt;/code&gt; 。したがって、 &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; は有効な参照です。</target>
        </trans-unit>
        <trans-unit id="9ad87f8334c21e8f203f8f813c8a18649ff573f2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EventType&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt;, the caller waits for a reply. The reply can be sent from this or from any other &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; by returning with &lt;code&gt;{reply,From,Reply}&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt;, in &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;Replies&lt;/a&gt;&lt;/code&gt;, or by calling &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply(From, Reply)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;EventType&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt; 、呼び出し側は応答を待ちます。応答は、このから、または任意の他から送信することができる &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; で戻すことにより &lt;code&gt;{reply,From,Reply}&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; で、 &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;Replies&lt;/a&gt;&lt;/code&gt; 、または呼び出すことにより &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply(From, Reply)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0e635b8f737737ba5a05f0c993e3dfac9ac242c2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;EventType&lt;/code&gt; is &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt;, the caller waits for a reply. The reply can be sent from this or from any other &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; by returning with &lt;code&gt;{reply,From,Reply}&lt;/code&gt; in &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt;, in &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;Replies&lt;/a&gt;&lt;/code&gt;, or by calling &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply(From, Reply)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;EventType&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;{call,From}&lt;/a&gt;&lt;/code&gt; 、呼び出し側は応答を待ちます。応答は、このから、または任意の他から送信することができる &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; で戻すことにより &lt;code&gt;{reply,From,Reply}&lt;/code&gt; で &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;Actions&lt;/a&gt;&lt;/code&gt; で、 &lt;code&gt;&lt;a href=&quot;#type-reply_action&quot;&gt;Replies&lt;/a&gt;&lt;/code&gt; 、または呼び出すことにより &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply(From, Reply)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="83ef91cec4b18110476efaead7f796da1eca29a9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Expr1&lt;/code&gt; evaluates to a name, but this name is not registered, a &lt;code&gt;badarg&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">場合は &lt;code&gt;Expr1&lt;/code&gt; 名前に評価されますが、この名前が登録されていない、 &lt;code&gt;badarg&lt;/code&gt; 実行時エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="abad608745399cb2e4372968eab18b8ca631a3c5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ExprF&lt;/code&gt; is an atom, the function is said to be called by using the &lt;strong&gt;implicitly qualified function name&lt;/strong&gt;. If the function &lt;code&gt;ExprF&lt;/code&gt; is locally defined, it is called. Alternatively, if &lt;code&gt;ExprF&lt;/code&gt; is explicitly imported from the &lt;code&gt;M&lt;/code&gt; module, &lt;code&gt;M:ExprF(Expr1,...,ExprN)&lt;/code&gt; is called. If &lt;code&gt;ExprF&lt;/code&gt; is neither declared locally nor explicitly imported, &lt;code&gt;ExprF&lt;/code&gt; must be the name of an automatically imported BIF.</source>
          <target state="translated">場合 &lt;code&gt;ExprF&lt;/code&gt; は原子であり、関数が使用することによって呼び出されると言われている&lt;strong&gt;暗黙的に修飾関数名を&lt;/strong&gt;。関数 &lt;code&gt;ExprF&lt;/code&gt; がローカルで定義されている場合は、呼び出されます。あるいは、 &lt;code&gt;ExprF&lt;/code&gt; が &lt;code&gt;M&lt;/code&gt; モジュールから明示的にインポートされる場合、 &lt;code&gt;M:ExprF(Expr1,...,ExprN)&lt;/code&gt; が呼び出されます。場合 &lt;code&gt;ExprF&lt;/code&gt; はどちらもローカルに宣言もなく、明示的にインポートされ、 &lt;code&gt;ExprF&lt;/code&gt; は自動的にインポートBIFの名前でなければなりません。</target>
        </trans-unit>
        <trans-unit id="292de33996b21603ce18c953090ce4d3bb28c1aa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Extra&lt;/code&gt; is &lt;code&gt;log&lt;/code&gt;, the matching events are allowed. If &lt;code&gt;Extra&lt;/code&gt; is &lt;code&gt;stop&lt;/code&gt;, the matching events are stopped.</source>
          <target state="translated">場合は &lt;code&gt;Extra&lt;/code&gt; ある &lt;code&gt;log&lt;/code&gt; 、マッチングイベントが許可されています。場合は &lt;code&gt;Extra&lt;/code&gt; あり &lt;code&gt;stop&lt;/code&gt; 、マッチングイベントが停止されています。</target>
        </trans-unit>
        <trans-unit id="0c63a514bfa0d0eec024a84c5585b4db685eb8d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Extra&lt;/code&gt; is &lt;code&gt;log&lt;/code&gt;, the progress reports are allowed. If &lt;code&gt;Extra&lt;/code&gt; is &lt;code&gt;stop&lt;/code&gt;, the progress reports are stopped.</source>
          <target state="translated">場合は &lt;code&gt;Extra&lt;/code&gt; ある &lt;code&gt;log&lt;/code&gt; 、進捗レポートが許可されています。場合は &lt;code&gt;Extra&lt;/code&gt; あり &lt;code&gt;stop&lt;/code&gt; 、進捗レポートが停止しています。</target>
        </trans-unit>
        <trans-unit id="676697b8c810137bc5f3cbd3dba9cf47ed56934a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;P&lt;/code&gt;, or &lt;code&gt;Pad&lt;/code&gt; is a &lt;code&gt;*&lt;/code&gt; character, the next argument in &lt;code&gt;Data&lt;/code&gt; is used as the value. For example:</source>
          <target state="translated">場合は &lt;code&gt;F&lt;/code&gt; 、 &lt;code&gt;P&lt;/code&gt; 、または &lt;code&gt;Pad&lt;/code&gt; ある &lt;code&gt;*&lt;/code&gt; 文字、中に次の引数 &lt;code&gt;Data&lt;/code&gt; 値として使用されます。例えば：</target>
        </trans-unit>
        <trans-unit id="58d27e8ccd9fb7397c53540d079879af93136abc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FIPS_mode_set&lt;/code&gt; returns &lt;code&gt;no&lt;/code&gt; the OpenSSL library is not FIPS enabled and crypto won't support FIPS mode either.</source>
          <target state="translated">&lt;code&gt;FIPS_mode_set&lt;/code&gt; が &lt;code&gt;no&lt;/code&gt; も返さない場合、OpenSSLライブラリはFIPS対応ではなく、cryptoもFIPSモードをサポートしません。</target>
        </trans-unit>
        <trans-unit id="03e0cd5df5f6d73de87e5cdb82e5a381f90cc69f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; and &lt;code&gt;Family2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;families&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;Family3&lt;/code&gt; is the family such that the index set is equal to the index set of &lt;code&gt;Family1&lt;/code&gt;, and &lt;code&gt;Family3&lt;/code&gt;[i] is the difference between &lt;code&gt;Family1&lt;/code&gt;[i] and &lt;code&gt;Family2&lt;/code&gt;[i] if &lt;code&gt;Family2&lt;/code&gt; maps i, otherwise &lt;code&gt;Family1[i]&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; と &lt;code&gt;Family2&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;families&lt;/a&gt;&lt;/code&gt; 、その後 &lt;code&gt;Family3&lt;/code&gt; は、インデックスセットは、のインデックスセットと等しくなるように家族で &lt;code&gt;Family1&lt;/code&gt; 、及び &lt;code&gt;Family3&lt;/code&gt; [I]は、との差である &lt;code&gt;Family1&lt;/code&gt; [i]と &lt;code&gt;Family2&lt;/code&gt; [i]の場合 &lt;code&gt;Family2&lt;/code&gt; は、そうでなければ、私をマッピング &lt;code&gt;Family1[i]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="707694b53f4e6ff34f03b06100b8fc3bb1a63a00" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; and &lt;code&gt;Family2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;families&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;Family3&lt;/code&gt; is the family such that the index set is the intersection of &lt;code&gt;Family1&lt;/code&gt;:s and &lt;code&gt;Family2&lt;/code&gt;:s index sets, and &lt;code&gt;Family3&lt;/code&gt;[i] is the intersection of &lt;code&gt;Family1&lt;/code&gt;[i] and &lt;code&gt;Family2&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; と &lt;code&gt;Family2&lt;/code&gt; があり &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;families&lt;/a&gt;&lt;/code&gt; 、そして &lt;code&gt;Family3&lt;/code&gt; はインデックスセットがの交差点であるように、家族で &lt;code&gt;Family1&lt;/code&gt; sおよび： &lt;code&gt;Family2&lt;/code&gt; ：Sインデックス・セット、および &lt;code&gt;Family3&lt;/code&gt; [i]には、の交点である &lt;code&gt;Family1&lt;/code&gt; [i]と &lt;code&gt;Family2&lt;/code&gt; [I]。</target>
        </trans-unit>
        <trans-unit id="c3481789d9f11af86121200c69343c46693c383d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; and &lt;code&gt;Family2&lt;/code&gt; are &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;families&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;Family3&lt;/code&gt; is the family such that the index set is the union of &lt;code&gt;Family1&lt;/code&gt;:s and &lt;code&gt;Family2&lt;/code&gt;:s index sets, and &lt;code&gt;Family3&lt;/code&gt;[i] is the union of &lt;code&gt;Family1&lt;/code&gt;[i] and &lt;code&gt;Family2&lt;/code&gt;[i] if both map i, otherwise &lt;code&gt;Family1&lt;/code&gt;[i] or &lt;code&gt;Family2&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; と &lt;code&gt;Family2&lt;/code&gt; があり &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;families&lt;/a&gt;&lt;/code&gt; 、そして &lt;code&gt;Family3&lt;/code&gt; はインデックスセットがの労働組合であるような家族である &lt;code&gt;Family1&lt;/code&gt; sおよび： &lt;code&gt;Family2&lt;/code&gt; ：Sインデックス・セット、および &lt;code&gt;Family3&lt;/code&gt; [I]での労働組合である &lt;code&gt;Family1&lt;/code&gt; [i]と &lt;code&gt;Family2&lt;/code&gt; [i]の場合どちらもマップi、それ以外の場合は &lt;code&gt;Family1&lt;/code&gt; [i]または &lt;code&gt;Family2&lt;/code&gt; [i]。</target>
        </trans-unit>
        <trans-unit id="901cb0563eae4ae927b85e3235bb204abe3eeb2a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Family1&lt;/code&gt;[i] is a binary relation for every i in the index set of &lt;code&gt;Family1&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the family with the same index set as &lt;code&gt;Family1&lt;/code&gt; such that &lt;code&gt;Family2&lt;/code&gt;[i] is the &lt;code&gt;&lt;a href=&quot;#domain&quot;&gt;domain&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1[i]&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; はある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;Family1&lt;/code&gt; [I]のインデックスセット内のすべてのiについてバイナリ関係である &lt;code&gt;Family1&lt;/code&gt; 、次いで &lt;code&gt;Family2&lt;/code&gt; は同じインデックスセットを有するファミリーである &lt;code&gt;Family1&lt;/code&gt; よう &lt;code&gt;Family2&lt;/code&gt; [I]は &lt;code&gt;&lt;a href=&quot;#domain&quot;&gt;domain&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1[i]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="10edd17f93cf8b662a14cd64ee029b216f69998c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Family1&lt;/code&gt;[i] is a binary relation for every i in the index set of &lt;code&gt;Family1&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the family with the same index set as &lt;code&gt;Family1&lt;/code&gt; such that &lt;code&gt;Family2&lt;/code&gt;[i] is the &lt;code&gt;&lt;a href=&quot;#field&quot;&gt;field&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; はある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;Family1&lt;/code&gt; [I]のインデックスセット内のすべてのiについてバイナリ関係である &lt;code&gt;Family1&lt;/code&gt; 、次いで &lt;code&gt;Family2&lt;/code&gt; は同じインデックスセットを有するファミリーである &lt;code&gt;Family1&lt;/code&gt; よう &lt;code&gt;Family2&lt;/code&gt; [I]である &lt;code&gt;&lt;a href=&quot;#field&quot;&gt;field&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1&lt;/code&gt; [I] 。</target>
        </trans-unit>
        <trans-unit id="603f807d85acd930990c4dcffafa135bbe46960c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Family1&lt;/code&gt;[i] is a binary relation for every i in the index set of &lt;code&gt;Family1&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the family with the same index set as &lt;code&gt;Family1&lt;/code&gt; such that &lt;code&gt;Family2&lt;/code&gt;[i] is the &lt;code&gt;&lt;a href=&quot;#range&quot;&gt;range&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; はある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;Family1&lt;/code&gt; [I]のインデックスセット内のすべてのiについてバイナリ関係である &lt;code&gt;Family1&lt;/code&gt; 、次いで &lt;code&gt;Family2&lt;/code&gt; は同じインデックスセットを有するファミリーである &lt;code&gt;Family1&lt;/code&gt; よう &lt;code&gt;Family2&lt;/code&gt; [I]である &lt;code&gt;&lt;a href=&quot;#range&quot;&gt;range&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1&lt;/code&gt; [I] 。</target>
        </trans-unit>
        <trans-unit id="df7eb7122ac171a82f2f5b7eabda31d098834629" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Family1&lt;/code&gt;[i] is a set of sets for each i in the index set of &lt;code&gt;Family1&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the family with the same index set as &lt;code&gt;Family1&lt;/code&gt; such that &lt;code&gt;Family2&lt;/code&gt;[i] is the &lt;code&gt;&lt;a href=&quot;#union_n&quot;&gt;union&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; はある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;Family1&lt;/code&gt; [I]は、インデックスセット内の各iについての組の集合である &lt;code&gt;Family1&lt;/code&gt; 、次いで &lt;code&gt;Family2&lt;/code&gt; は同じインデックスセットを有するファミリーである &lt;code&gt;Family1&lt;/code&gt; よう &lt;code&gt;Family2&lt;/code&gt; [I]である &lt;code&gt;&lt;a href=&quot;#union_n&quot;&gt;union&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1&lt;/code&gt; [I ]。</target>
        </trans-unit>
        <trans-unit id="9f6dbbe306d7fe1ab285e45f10bed30dc90b32b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;Family1&lt;/code&gt;[i] is a set of sets for every i in the index set of &lt;code&gt;Family1&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the family with the same index set as &lt;code&gt;Family1&lt;/code&gt; such that &lt;code&gt;Family2&lt;/code&gt;[i] is the &lt;code&gt;&lt;a href=&quot;#intersection_n&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; はある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;Family1&lt;/code&gt; [I]は、インデックスセット内のすべてのiについての組の集合である &lt;code&gt;Family1&lt;/code&gt; 、次いで &lt;code&gt;Family2&lt;/code&gt; は同じインデックスセットを有するファミリーである &lt;code&gt;Family1&lt;/code&gt; よう &lt;code&gt;Family2&lt;/code&gt; [i]がある &lt;code&gt;&lt;a href=&quot;#intersection_n&quot;&gt;intersection&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1&lt;/code&gt; [I ]。</target>
        </trans-unit>
        <trans-unit id="6513fd3da5029f77ec7aae42fce09531984adc2d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;#restriction&quot;&gt;restriction&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1&lt;/code&gt; to those elements i of the index set for which &lt;code&gt;Fun&lt;/code&gt; applied to &lt;code&gt;Family1&lt;/code&gt;[i] returns &lt;code&gt;true&lt;/code&gt;. If &lt;code&gt;Fun&lt;/code&gt; is a tuple &lt;code&gt;{external,&amp;nbsp;Fun2}&lt;/code&gt;, then &lt;code&gt;Fun2&lt;/code&gt; is applied to the &lt;code&gt;&lt;a href=&quot;#external_set&quot;&gt;external set&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Family1&lt;/code&gt;[i], otherwise &lt;code&gt;Fun&lt;/code&gt; is applied to &lt;code&gt;Family1&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; 、その後 &lt;code&gt;Family2&lt;/code&gt; は、ある &lt;code&gt;&lt;a href=&quot;#restriction&quot;&gt;restriction&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1&lt;/code&gt; れるインデックスセットのこれらの要素へのI &lt;code&gt;Fun&lt;/code&gt; に適用 &lt;code&gt;Family1&lt;/code&gt; [i]を返す &lt;code&gt;true&lt;/code&gt; 。場合 &lt;code&gt;Fun&lt;/code&gt; タプル &lt;code&gt;{external,&amp;nbsp;Fun2}&lt;/code&gt; 、その後 &lt;code&gt;Fun2&lt;/code&gt; がに適用される &lt;code&gt;&lt;a href=&quot;#external_set&quot;&gt;external set&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Family1&lt;/code&gt; [i]は、そうでなければ &lt;code&gt;Fun&lt;/code&gt; に適用される &lt;code&gt;Family1&lt;/code&gt; [I]。</target>
        </trans-unit>
        <trans-unit id="0036be6edcb9af44b23cf453b297b5ff3815e4ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;Family2&lt;/code&gt; is the family with the same index set as &lt;code&gt;Family1&lt;/code&gt; such that &lt;code&gt;Family2&lt;/code&gt;[i] is the result of calling &lt;code&gt;SetFun&lt;/code&gt; with &lt;code&gt;Family1&lt;/code&gt;[i] as argument.</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; 、そして &lt;code&gt;Family2&lt;/code&gt; は同じインデックスセットを持つ家族で &lt;code&gt;Family1&lt;/code&gt; があるよう &lt;code&gt;Family2&lt;/code&gt; [i]には、呼び出した結果である &lt;code&gt;SetFun&lt;/code&gt; と &lt;code&gt;Family1&lt;/code&gt; を引数として[I]。</target>
        </trans-unit>
        <trans-unit id="a3ed4a237eeb2ac6e0edeeca8e08129966f3f00f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family1&lt;/code&gt;[i] is an empty set for some i, the process exits with a &lt;code&gt;badarg&lt;/code&gt; message.</source>
          <target state="translated">場合 &lt;code&gt;Family1&lt;/code&gt; [i]は、いくつかの私のために空のセットとプロセスは終了である &lt;code&gt;badarg&lt;/code&gt; のメッセージ。</target>
        </trans-unit>
        <trans-unit id="15ab50a2f9b83c85c1bf92e12df53a14b6fa72a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Family&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;BinRel&lt;/code&gt; is the binary relation containing all pairs (i, x) such that i belongs to the index set of &lt;code&gt;Family&lt;/code&gt; and x belongs to &lt;code&gt;Family&lt;/code&gt;[i].</source>
          <target state="translated">場合 &lt;code&gt;Family&lt;/code&gt; である &lt;code&gt;&lt;a href=&quot;#family&quot;&gt;family&lt;/a&gt;&lt;/code&gt; 、次いで &lt;code&gt;BinRel&lt;/code&gt; は iがインデックスセットに属するように、すべての対（I、X）を含むバイナリ関係である &lt;code&gt;Family&lt;/code&gt; とXに属する &lt;code&gt;Family&lt;/code&gt; [I]は。</target>
        </trans-unit>
        <trans-unit id="8cca7739eb38698717638b6eb6af393def280970" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;File&lt;/code&gt; is not specified, a file dialog is opened where the crashdump can be selected.</source>
          <target state="translated">&lt;code&gt;File&lt;/code&gt; が指定されていない場合は、クラッシュダンプを選択できるファイルダイアログが開きます。</target>
        </trans-unit>
        <trans-unit id="64e8f8682c5f33b6a09cda03b8458e6523b8dd31" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileName&lt;/code&gt; cannot be run, an error exception is raised, with the POSIX error code as the reason. The error reason can differ between OSs. Typically the error &lt;code&gt;enoent&lt;/code&gt; is raised when an attempt is made to run a program that is not found and &lt;code&gt;eacces&lt;/code&gt; is raised when the specified file is not executable.</source>
          <target state="translated">&lt;code&gt;FileName&lt;/code&gt; を実行できない場合、理由としてPOSIXエラーコードを含むエラー例外が発生します。エラーの理由はOSによって異なります。通常、エラー &lt;code&gt;enoent&lt;/code&gt; は、見つからないプログラムを実行しようとしたときに発生し、指定されたファイルが実行可能でないときに &lt;code&gt;eacces&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="d64f4daf12cc430f6c5ecc07bc1247a82079bedd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileName&lt;/code&gt; has a suffix that indicates an object file (&lt;code&gt;.beam&lt;/code&gt;), EUnit will try to reload the module from the specified file and test it. Otherwise, the file is assumed to be a text file containing test specifications, which will be read using the standard library function &lt;code&gt;file:path_consult/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;FileName&lt;/code&gt; にオブジェクトファイル（ &lt;code&gt;.beam&lt;/code&gt; ）を示すサフィックスがある場合、EUnitは指定されたファイルからモジュールをリロードしてテストします。それ以外の場合、ファイルはテスト仕様を含むテキストファイルであると見 &lt;code&gt;file:path_consult/2&lt;/code&gt; 、標準ライブラリ関数file：path_consult / 2を使用して読み取られます。</target>
        </trans-unit>
        <trans-unit id="f69d9680f0ea2ac6663d58bccc19bea7f9110950" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FileNameOrIODev&lt;/code&gt; is a &lt;code&gt;string()&lt;/code&gt;, &lt;code&gt;make_config/1&lt;/code&gt; will use &lt;code&gt;FileNameOrIODev&lt;/code&gt; as a filename. A file named &lt;code&gt;FileNameOrIODev&lt;/code&gt; is created and the configuration will be written to that file. If &lt;code&gt;FileNameOrIODev&lt;/code&gt; is an &lt;code&gt;io_device()&lt;/code&gt; (see the documentation of the module &lt;code&gt;io&lt;/code&gt;), the configuration will be written to the io device.</source>
          <target state="translated">場合 &lt;code&gt;FileNameOrIODev&lt;/code&gt; がある &lt;code&gt;string()&lt;/code&gt; 、 &lt;code&gt;make_config/1&lt;/code&gt; が使用されます &lt;code&gt;FileNameOrIODev&lt;/code&gt; をファイル名として。 &lt;code&gt;FileNameOrIODev&lt;/code&gt; という名前のファイルが作成され、構成がそのファイルに書き込まれます。 &lt;code&gt;FileNameOrIODev&lt;/code&gt; が &lt;code&gt;io_device()&lt;/code&gt; である場合（モジュール &lt;code&gt;io&lt;/code&gt; のドキュメントを参照）、構成はioデバイスに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="abe7ea2e6f95f6e74b291e53017c69e3872b70e5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Filename&lt;/code&gt; is not a symbolic link, this function returns exactly the same result as &lt;code&gt;read_file_info/1&lt;/code&gt;. On platforms that do not support symbolic links, this function is always equivalent to &lt;code&gt;read_file_info/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; がシンボリックリンクでない場合、この関数は &lt;code&gt;read_file_info/1&lt;/code&gt; とまったく同じ結果を返します。シンボリックリンクをサポートしないプラットフォームでは、この関数は常に &lt;code&gt;read_file_info/1&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="abb890f105737b8f693a0a5c7d392809221b9ef6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Fix&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, table &lt;code&gt;Name&lt;/code&gt; is fixed (once more) by the calling process, otherwise the table is released. The table is also released when a fixing process terminates.</source>
          <target state="translated">場合は &lt;code&gt;Fix&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、テーブル &lt;code&gt;Name&lt;/code&gt; それ以外の場合は、テーブルが解放され、呼び出し元のプロセスで（もう一度）固定されています。修正プロセスが終了すると、テーブルも解放されます。</target>
        </trans-unit>
        <trans-unit id="35e7f62cf2a411f7548edbc78f5bda5268f86881" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;get&lt;/code&gt;, a list of all logged events is returned.</source>
          <target state="translated">&lt;code&gt;Flag&lt;/code&gt; が &lt;code&gt;get&lt;/code&gt; の場合、ログに記録されたすべてのイベントのリストが返されます。</target>
        </trans-unit>
        <trans-unit id="381028fa2c7469ac85a20d5087b1b0fd8afdf82e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;print&lt;/code&gt;, the logged events are printed to &lt;code&gt;standard_io&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Flag&lt;/code&gt; あり &lt;code&gt;print&lt;/code&gt; 、記録されたイベントは、に印刷され &lt;code&gt;standard_io&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b722fce5cc319fa08cae29348ebef98f92c444d1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, a new subscription is started. If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, all previous subscriptions started with the same &lt;code&gt;Options&lt;/code&gt; are stopped. Two option lists are considered the same if they contain the same set of options.</source>
          <target state="translated">場合は &lt;code&gt;Flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、新しいサブスクリプションが開始されます。 &lt;code&gt;Flag&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、同じ &lt;code&gt;Options&lt;/code&gt; 開始された以前のサブスクリプションはすべて停止されます。2つのオプションリストは、同じオプションセットが含まれている場合、同じと見なされます。</target>
        </trans-unit>
        <trans-unit id="7ca78e84b760984f52335bac15cc8a1e618b6c52" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flags = all&lt;/code&gt;, all possible flags are set.</source>
          <target state="translated">&lt;code&gt;Flags = all&lt;/code&gt; 場合、可能なすべてのフラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="2613d68b6d252e8fa327001ad657894c48452d47" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flush&lt;/code&gt; is set to &lt;code&gt;finish&lt;/code&gt;, pending input is processed, pending output is flushed, and &lt;code&gt;deflate/3&lt;/code&gt; returns. Afterwards the only possible operations on the stream are &lt;code&gt;&lt;a href=&quot;#deflateReset-1&quot;&gt;deflateReset/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#deflateEnd-1&quot;&gt;deflateEnd/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Flush&lt;/code&gt; が &lt;code&gt;finish&lt;/code&gt; に設定されている場合、保留中の入力が処理され、保留中の出力がフラッシュされ、 &lt;code&gt;deflate/3&lt;/code&gt; が戻ります。その後、ストリームで可能な操作は &lt;code&gt;&lt;a href=&quot;#deflateReset-1&quot;&gt;deflateReset/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#deflateEnd-1&quot;&gt;deflateEnd/1&lt;/a&gt;&lt;/code&gt; のみです。</target>
        </trans-unit>
        <trans-unit id="9a28ee970d5c9d1771957ed2098a6a9bd614a23c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flush&lt;/code&gt; is set to &lt;code&gt;full&lt;/code&gt;, all output is flushed as with &lt;code&gt;sync&lt;/code&gt;, and the compression state is reset so that decompression can restart from this point if previous compressed data has been damaged or if random access is desired. Using &lt;code&gt;full&lt;/code&gt; too often can seriously degrade the compression.</source>
          <target state="translated">&lt;code&gt;Flush&lt;/code&gt; が &lt;code&gt;full&lt;/code&gt; に設定されている場合、すべての出力は &lt;code&gt;sync&lt;/code&gt; と同様にフラッシュされ、以前の圧縮データが破損した場合、またはランダムアクセスが必要な場合、この時点から圧縮解除を再開できるように圧縮状態がリセットされます。使用して &lt;code&gt;full&lt;/code&gt; あまりにも頻繁にすることは真剣に圧縮を低下させることができます。</target>
        </trans-unit>
        <trans-unit id="5b162b87236f918abd12b2632484cedd86b7642d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Flush&lt;/code&gt; is set to &lt;code&gt;sync&lt;/code&gt;, all pending output is flushed to the output buffer and the output is aligned on a byte boundary, so that the decompressor can get all input data available so far. Flushing can degrade compression for some compression algorithms; thus, use it only when necessary.</source>
          <target state="translated">&lt;code&gt;Flush&lt;/code&gt; が &lt;code&gt;sync&lt;/code&gt; に設定されている場合、保留中のすべての出力が出力バッファーにフラッシュされ、出力がバイト境界に揃えられるため、圧縮解除プログラムはこれまでに使用可能なすべての入力データを取得できます。フラッシュは、一部の圧縮アルゴリズムの圧縮を低下させる可能性があります。したがって、必要な場合にのみ使用してください。</target>
        </trans-unit>
        <trans-unit id="3748c496d0aee0e31ef9623ffe6c9c459e673128" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Force = true&lt;/code&gt; then the agent will continue attempting to load each mib even after failing to load a previous mib. Use with care.</source>
          <target state="translated">場合は &lt;code&gt;Force = true&lt;/code&gt; エージェントはさえ、以前のMIBをロードするために失敗した後、各MIBをロードしようとし続けます。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="2cad12b8139e1623aaeb8a5ccd722b61cea66f96" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Force = true&lt;/code&gt; then the agent will continue attempting to unload each mib even after failing to unload a previous mib. Use with care.</source>
          <target state="translated">場合は &lt;code&gt;Force = true&lt;/code&gt; エージェントはさえ、以前のMIBをアンロードに失敗した後、各MIBをアンロードしようとしてまいります。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="7d0a736a5ea9ae64f8bc28b164008b5e41f8db91" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FormatHandler = get_et_handler()&lt;/code&gt;, &lt;code&gt;et_viewer&lt;/code&gt; in application ET is used for presenting the trace log graphically. &lt;code&gt;ttb&lt;/code&gt; provides a few different filters that can be selected from menu &lt;strong&gt;Filters and scaling&lt;/strong&gt; in the &lt;code&gt;et_viewer&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;FormatHandler = get_et_handler()&lt;/code&gt; 、 &lt;code&gt;et_viewer&lt;/code&gt; アプリケーションETでは、グラフィカルにトレースログを提示するために使用されています。 &lt;code&gt;ttb&lt;/code&gt; メニューから選択することができ、いくつかの異なるフィルタを提供&lt;strong&gt;フィルタとスケーリング&lt;/strong&gt;で &lt;code&gt;et_viewer&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="754c4ebe3c963dad574555e13a437f625208b390" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FormatHandler = {Function,InitialState}&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt; is called for each trace message.</source>
          <target state="translated">場合 &lt;code&gt;FormatHandler = {Function,InitialState}&lt;/code&gt; 、 &lt;code&gt;Function&lt;/code&gt; 各トレース・メッセージのために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e464e53752a8478fcd48d7d7806a6c052a202fab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;FormatHandler&lt;/code&gt; is not specified, a default handler is used presenting each trace message as a text line.</source>
          <target state="translated">&lt;code&gt;FormatHandler&lt;/code&gt; が指定されていない場合、デフォルトのハンドラーが使用され、各トレースメッセージがテキスト行として表示されます。</target>
        </trans-unit>
        <trans-unit id="52add321b909cb81e422136ee5da910496779dbd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Forms&lt;/code&gt; is a syntax tree of some other type than &lt;code&gt;form_list&lt;/code&gt;, the comments will be inserted directly using &lt;code&gt;recomment_tree/2&lt;/code&gt;, and any comments left over from that process are added as postcomments on the result.</source>
          <target state="translated">場合 &lt;code&gt;Forms&lt;/code&gt; よりいくつかの他のタイプの構文木である &lt;code&gt;form_list&lt;/code&gt; 、コメントを直接使用して挿入する &lt;code&gt;recomment_tree/2&lt;/code&gt; 、及び任意のコメントは、そのプロセスから残された結果にpostcommentsとして添加されます。</target>
        </trans-unit>
        <trans-unit id="c4eba9b5275105788875dd801e1636ad9a4cb30f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Fun(Item)&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Item&lt;/code&gt; is copied to the result queue. If it returns &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;Item&lt;/code&gt; is not copied. If it returns a list, the list elements are inserted instead of &lt;code&gt;Item&lt;/code&gt; in the result queue.</source>
          <target state="translated">場合は &lt;code&gt;Fun(Item)&lt;/code&gt; 返し &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;Item&lt;/code&gt; 結果キューにコピーされます。 &lt;code&gt;false&lt;/code&gt; を返す場合、 &lt;code&gt;Item&lt;/code&gt; はコピーされません。リストが返される場合、結果キューには、 &lt;code&gt;Item&lt;/code&gt; の代わりにリスト要素が挿入されます。</target>
        </trans-unit>
        <trans-unit id="366fc356581d7fe3b943ae954f2a4d6cf716ab8e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Fun&lt;/code&gt; is a local fun, &lt;code&gt;Module&lt;/code&gt; is the module in which the fun is defined.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; がローカルfunの場合、 &lt;code&gt;Module&lt;/code&gt; はfunが定義されているモジュールです。</target>
        </trans-unit>
        <trans-unit id="1842cf53be67683035afaacc37fa7bea8be6bb1b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Fun&lt;/code&gt; is a local fun, &lt;code&gt;Name&lt;/code&gt; is the name of the local function that implements the fun. (This name was generated by the compiler, and is only of informational use. As it is a local function, it cannot be called directly.) If no code is currently loaded for the fun, &lt;code&gt;[]&lt;/code&gt; is returned instead of an atom.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; がローカルfunの場合、 &lt;code&gt;Name&lt;/code&gt; はfunを実装するローカル関数の名前です。（この名前はコンパイラによって生成されたものであり、情報提供のみを目的としています。ローカル関数であるため、直接呼び出すことはできません。）funに現在ロードされているコードがない場合、アトムの代わりに &lt;code&gt;[]&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="5f28f2ecd1a2a78b09a1a1bba86bfe7cd1e5abac" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Fun&lt;/code&gt; is an external fun, &lt;code&gt;Module&lt;/code&gt; is the module that the fun refers to.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; が外部funの場合、 &lt;code&gt;Module&lt;/code&gt; はfunが参照するモジュールです。</target>
        </trans-unit>
        <trans-unit id="7a891fa1f8c1fc67f4bfac48d75e87475a7bea29" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Fun&lt;/code&gt; is an external fun, &lt;code&gt;Name&lt;/code&gt; is the name of the exported function that the fun refers to.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; が外部funの場合、 &lt;code&gt;Name&lt;/code&gt; はfunが参照するエクスポートされた関数の名前です。</target>
        </trans-unit>
        <trans-unit id="c30588de4c7f0612e073a3883c335ac9373ebde3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Function&lt;/code&gt; inserts objects into the table, or another process inserts objects into the table, those objects &lt;strong&gt;can&lt;/strong&gt; (depending on key ordering) be included in the traversal.</source>
          <target state="translated">場合 &lt;code&gt;Function&lt;/code&gt; 挿入がテーブルにオブジェクト、または他のプロセスインサートはテーブルにオブジェクト、これらのオブジェクトが&lt;strong&gt;でき&lt;/strong&gt;（キーの順序に依存して）トラバーサル中に含まれます。</target>
        </trans-unit>
        <trans-unit id="8903d3c31d338fd3102b10a98c169c7def053e70" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;HandlerId&lt;/code&gt; is &lt;code&gt;default&lt;/code&gt;, then this entry modifies the default handler, equivalent to calling</source>
          <target state="translated">場合 &lt;code&gt;HandlerId&lt;/code&gt; がある &lt;code&gt;default&lt;/code&gt; は、このエントリは、呼び出すのと同じデフォルトのハンドラを、修正します</target>
        </trans-unit>
        <trans-unit id="900d11629569ab220c3331823293a0c6bc8ed798" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;How == read&lt;/code&gt; or there is no outgoing data buffered in the &lt;code&gt;Socket&lt;/code&gt; port, the socket is shut down immediately and any error encountered is returned in &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;How == read&lt;/code&gt; かにバッファリングなしの出力データが存在しない &lt;code&gt;Socket&lt;/code&gt; ポートは、ソケットはすぐにシャットダウンされ、発生したエラーがで返される &lt;code&gt;Reason&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c71e7f1f85187ddc4b81962dde74a95d9e96b0d6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;How&lt;/code&gt; is not one of the documented alternatives.</source>
          <target state="translated">&lt;code&gt;How&lt;/code&gt; が文書化された代替案の1つでない場合。</target>
        </trans-unit>
        <trans-unit id="37742d0df7de57a88343a93bbae5c582e200b4bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;I&lt;/code&gt; is not a non-negative integer, or if the array has fixed size and &lt;code&gt;I&lt;/code&gt; is larger than the maximum index, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;; compare &lt;code&gt;&lt;a href=&quot;#set-3&quot;&gt;set/3&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">もし &lt;code&gt;I&lt;/code&gt; が非負整数でない、またはアレイのサイズを固定した場合と &lt;code&gt;I&lt;/code&gt; 最大屈折率よりも大きい、コールが理由で失敗 &lt;code&gt;badarg&lt;/code&gt; 。 &lt;code&gt;&lt;a href=&quot;#set-3&quot;&gt;set/3&lt;/a&gt;&lt;/code&gt; 比較/ 3</target>
        </trans-unit>
        <trans-unit id="b40958d947f1e3e1dfb64d8ec37bb529fd8c2ab3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IV = &amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;, no IV is used. This is intended for ciphers without an IV (nounce). See &lt;code&gt;&lt;a href=&quot;#crypto_init-3&quot;&gt;crypto_init/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;IV = &amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; 、何のIVが使用されていません。これは、IV（ナンス）のない暗号を対象としています。 &lt;code&gt;&lt;a href=&quot;#crypto_init-3&quot;&gt;crypto_init/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="17757dd0369fed1b521cdc06c576ee0641e25d48" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IV = undefined&lt;/code&gt;, the IV must be added by calls to &lt;code&gt;&lt;a href=&quot;crypto#crypto_dyn_iv_update-3&quot;&gt;crypto_dyn_iv_update/3&lt;/a&gt;&lt;/code&gt;. This is intended for cases where the IV (nounce) need to be changed for each encryption and decryption. See &lt;code&gt;&lt;a href=&quot;#crypto_dyn_iv_init-3&quot;&gt;crypto_dyn_iv_init/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IV = undefined&lt;/code&gt; 場合、 &lt;code&gt;&lt;a href=&quot;crypto#crypto_dyn_iv_update-3&quot;&gt;crypto_dyn_iv_update/3&lt;/a&gt;&lt;/code&gt; を呼び出してIVを追加する必要があります。これは、暗号化と復号化ごとにIV（nounce）を変更する必要がある場合を対象としています。 &lt;code&gt;&lt;a href=&quot;#crypto_dyn_iv_init-3&quot;&gt;crypto_dyn_iv_init/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="192de0c6fdc2dc6ed90c9948b113d350638c9ee6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IgnoreCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; the function does &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt; casefolding&lt;/a&gt;&lt;/code&gt; on the fly before the equality test.</source>
          <target state="translated">場合 &lt;code&gt;IgnoreCase&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 機能はない &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt; casefolding&lt;/a&gt;&lt;/code&gt; 平等のテストの前にその場で。</target>
        </trans-unit>
        <trans-unit id="ff9833c3a956d76bfddbabd05552d4c92a4ea96e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IgnoreCase&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; the function does &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt;casefolding&lt;/a&gt;&lt;/code&gt; on the fly before the equality test.</source>
          <target state="translated">場合 &lt;code&gt;IgnoreCase&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 機能はない &lt;code&gt;&lt;a href=&quot;#casefold-1&quot;&gt;casefolding&lt;/a&gt;&lt;/code&gt; 平等のテストの前にその場で。</target>
        </trans-unit>
        <trans-unit id="816e7270d9b2f0ac993fa2ef79b1a16b6e25ce74" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;InEncoding&lt;/code&gt; is &lt;code&gt;latin1&lt;/code&gt;, an error occurs whenever an integer &amp;gt; 255 is found in the lists.</source>
          <target state="translated">&lt;code&gt;InEncoding&lt;/code&gt; が &lt;code&gt;latin1&lt;/code&gt; の場合、リストに255 より大きい整数が見つかるとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="4425120ccc2526ec06a49a423343d05e8207c756" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;InEncoding&lt;/code&gt; is &lt;code&gt;latin1&lt;/code&gt;, binaries are always valid as long as they contain whole bytes, as each byte falls into the valid ISO Latin-1 range.</source>
          <target state="translated">&lt;code&gt;InEncoding&lt;/code&gt; が &lt;code&gt;latin1&lt;/code&gt; の場合、各バイトが有効なISO Latin-1の範囲に入るので、バイナリ全体がバイトを含む限り、バイナリは常に有効です。</target>
        </trans-unit>
        <trans-unit id="ff1d0ed37f6966c578d637dcaf03e020ca40d09f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;InEncoding&lt;/code&gt; is &lt;code&gt;latin1&lt;/code&gt;, parameter &lt;code&gt;Data&lt;/code&gt; corresponds to the &lt;code&gt;iodata()&lt;/code&gt; type, but for &lt;code&gt;unicode&lt;/code&gt;, parameter &lt;code&gt;Data&lt;/code&gt; can contain integers &amp;gt; 255 (Unicode characters beyond the ISO Latin-1 range), which makes it invalid as &lt;code&gt;iodata()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;InEncoding&lt;/code&gt; が &lt;code&gt;latin1&lt;/code&gt; の場合、パラメーター &lt;code&gt;Data&lt;/code&gt; は &lt;code&gt;iodata()&lt;/code&gt; タイプに対応しますが、 &lt;code&gt;unicode&lt;/code&gt; の場合、パラメーター &lt;code&gt;Data&lt;/code&gt; には255を超える整数（ISO Latin-1の範囲を超えるUnicode文字）を含めることができるため、 &lt;code&gt;iodata()&lt;/code&gt; として無効になります。</target>
        </trans-unit>
        <trans-unit id="84c8391d802fddc5ccbafb2a99174fde559e23a0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;InEncoding&lt;/code&gt; is of a Unicode type, an error occurs whenever either of the following is found:</source>
          <target state="translated">&lt;code&gt;InEncoding&lt;/code&gt; がUnicodeタイプの場合、次のいずれかが見つかるとエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="476e00e23216a072f0d4f2055cfb67b48c128bef" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;InEncoding&lt;/code&gt; is one of the UTF types, the bytes in any binaries must be valid in that encoding.</source>
          <target state="translated">&lt;code&gt;InEncoding&lt;/code&gt; がUTFタイプの1つである場合、バイナリのバイトはそのエンコーディングで有効である必要があります。</target>
        </trans-unit>
        <trans-unit id="22f3829c6bb886763ec35ffd0a67a42f39f5713e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Incr =:= 0&lt;/code&gt; and &lt;code&gt;From =/= To&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;Incr =:= 0&lt;/code&gt; と &lt;code&gt;From =/= To&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12b35d113bc1f0b8b177b00f244bbbf3e4ac06f2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IpPort&lt;/code&gt; is omitted &lt;code&gt;162&lt;/code&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;IpPort&lt;/code&gt; が省略されている &lt;code&gt;162&lt;/code&gt; を使用しています。</target>
        </trans-unit>
        <trans-unit id="57bfc33f769c9b0a788a08b107a1cedbd213bce1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;IsDst == true&lt;/code&gt;, &lt;code&gt;Localtime&lt;/code&gt; is during Daylight Saving Time, if &lt;code&gt;IsDst == false&lt;/code&gt; it is not. If &lt;code&gt;IsDst == undefined&lt;/code&gt;, the underlying OS can guess, which is the same as calling &lt;code&gt;erlang:localtime_to_universaltime(Localtime)&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;IsDst == true&lt;/code&gt; 、 &lt;code&gt;Localtime&lt;/code&gt; 夏時間の間で、場合 &lt;code&gt;IsDst == false&lt;/code&gt; そうではありません。場合 &lt;code&gt;IsDst == undefined&lt;/code&gt; 、基盤となるOSは、呼び出した場合と同じである、推測することができ &lt;code&gt;erlang:localtime_to_universaltime(Localtime)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1d88ab1af3b32ccae8c47bc290fd76139417148" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Item&lt;/code&gt; is an invalid item.</source>
          <target state="translated">&lt;code&gt;Item&lt;/code&gt; が無効なアイテムの場合。</target>
        </trans-unit>
        <trans-unit id="0ff6e5e0312fb6570b28f21e065635f71bd160e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ItemList&lt;/code&gt; is specified, the result is &lt;code&gt;InfoTupleList&lt;/code&gt;. The &lt;code&gt;InfoTuple&lt;/code&gt;s in &lt;code&gt;InfoTupleList&lt;/code&gt; are included with the corresponding &lt;code&gt;Item&lt;/code&gt;s in the same order as the &lt;code&gt;Item&lt;/code&gt;s were included in &lt;code&gt;ItemList&lt;/code&gt;. Valid &lt;code&gt;Item&lt;/code&gt;s can be included multiple times in &lt;code&gt;ItemList&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;ItemList&lt;/code&gt; 指定され、結果は &lt;code&gt;InfoTupleList&lt;/code&gt; 。 &lt;code&gt;InfoTuple&lt;/code&gt; におけるS &lt;code&gt;InfoTupleList&lt;/code&gt; は対応に含まれている &lt;code&gt;Item&lt;/code&gt; と同じ順序で複数の &lt;code&gt;Item&lt;/code&gt; に含まれていたS &lt;code&gt;ItemList&lt;/code&gt; 。有効な &lt;code&gt;Item&lt;/code&gt; は、 &lt;code&gt;ItemList&lt;/code&gt; に複数回含めることができます。</target>
        </trans-unit>
        <trans-unit id="af422b91ec82e2dd9338132983b67650395edbc0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Key&lt;/code&gt; do not exists, a new record is created with value &lt;code&gt;Incr&lt;/code&gt; if it is larger than 0, otherwise it is set to 0.</source>
          <target state="translated">場合は &lt;code&gt;Key&lt;/code&gt; 存在していない、新しいレコードが値を使用して作成され &lt;code&gt;Incr&lt;/code&gt; それが0より大きければ、それ以外の場合は0に設定されています。</target>
        </trans-unit>
        <trans-unit id="c41410c8bc0b6250bb7c2a4f58129afe15bfcff0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Key&lt;/code&gt; does not exist, a new record is created with value &lt;code&gt;Incr&lt;/code&gt; if it is larger than 0, otherwise it is set to 0.</source>
          <target state="translated">場合は &lt;code&gt;Key&lt;/code&gt; 存在しない場合、新しいレコードが値を使用して作成され &lt;code&gt;Incr&lt;/code&gt; それが0より大きければ、それ以外の場合は0に設定されています。</target>
        </trans-unit>
        <trans-unit id="6283720a87b385d954928cf8467ee97a261a260e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Key&lt;/code&gt; exists in &lt;code&gt;Map1&lt;/code&gt;, the old associated value is replaced by value &lt;code&gt;Value&lt;/code&gt;. The function returns a new map &lt;code&gt;Map2&lt;/code&gt; containing the new associated value.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; が &lt;code&gt;Map1&lt;/code&gt; に存在する場合、関連付けられていた古い値は &lt;code&gt;Value&lt;/code&gt; に置き換えられます。この関数は、新しい関連付けられた値を含む新しいマップ &lt;code&gt;Map2&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="1dc230226eb63b450b632e9c874a80bd2fe8c24b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;KeyOrName&lt;/code&gt; is a configured &lt;code&gt;server_id()&lt;/code&gt; or a &lt;code&gt;target_name()&lt;/code&gt; associated with such an Id, then the options for this server are fetched from the configuration file.</source>
          <target state="translated">場合 &lt;code&gt;KeyOrName&lt;/code&gt; は構成され &lt;code&gt;server_id()&lt;/code&gt; または &lt;code&gt;target_name()&lt;/code&gt; このようなIDに関連付けられ、このサーバのオプションは、構成ファイルからフェッチされます。</target>
        </trans-unit>
        <trans-unit id="caeb4bb064b11f2b7bb8eeb778050c5ea54186c8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LinkTo&lt;/code&gt; is a pid, it becomes an owner of the log. If &lt;code&gt;LinkTo&lt;/code&gt; is &lt;code&gt;none&lt;/code&gt;, the log records that it is used anonymously by some process by incrementing the &lt;code&gt;users&lt;/code&gt; counter. By default, the process that calls &lt;code&gt;open/1&lt;/code&gt; owns the log.</source>
          <target state="translated">&lt;code&gt;LinkTo&lt;/code&gt; がpidの場合、それはログの所有者になります。場合 &lt;code&gt;LinkTo&lt;/code&gt; はありません &lt;code&gt;none&lt;/code&gt; 、それが増分することによって、いくつかのプロセスが匿名で使用されていることをログレコード &lt;code&gt;users&lt;/code&gt; カウンターは。デフォルトでは、 &lt;code&gt;open/1&lt;/code&gt; を呼び出すプロセスがログを所有します。</target>
        </trans-unit>
        <trans-unit id="9888882ab2a6e6b491af7cf81626c46b51b8c093" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ListOfBinRels&lt;/code&gt; is a non-empty list [R[1], ..., R[n]] of binary relations and &lt;code&gt;BinRel1&lt;/code&gt; is a binary relation, then &lt;code&gt;BinRel2&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;#tuple_relative_product&quot;&gt;relative product&lt;/a&gt;&lt;/code&gt; of the ordered set (R[i], ..., R[n]) and &lt;code&gt;BinRel1&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;ListOfBinRels&lt;/code&gt; が非空リストである[R [1]、&amp;middot;&amp;middot;&amp;middot;、R [N]]二項関係のと &lt;code&gt;BinRel1&lt;/code&gt; がバイナリ関係で、次いで &lt;code&gt;BinRel2&lt;/code&gt; はある &lt;code&gt;&lt;a href=&quot;#tuple_relative_product&quot;&gt;relative product&lt;/a&gt;&lt;/code&gt; 順序集合（R [I]、の。 ..、R [n]）および &lt;code&gt;BinRel1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6668fcef53284c1666f849594130ecb9a9e9189" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Loader&lt;/code&gt; is something else, the user-supplied &lt;code&gt;Loader&lt;/code&gt; port program is started.</source>
          <target state="translated">場合 &lt;code&gt;Loader&lt;/code&gt; は何か他のもので、ユーザーが提供する &lt;code&gt;Loader&lt;/code&gt; ポートプログラムが起動されます。</target>
        </trans-unit>
        <trans-unit id="4902233d819e3e7d17b192cdb14eea6c3a8ffc0d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LocalFilename&lt;/code&gt; is a binary, &lt;code&gt;tftp_binary&lt;/code&gt; is used as callback module. The binary is transferred block by block and the number of transferred bytes is returned in &lt;code&gt;LastCallbackState&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LocalFilename&lt;/code&gt; がバイナリの場合、 &lt;code&gt;tftp_binary&lt;/code&gt; がコールバックモジュールとして使用されます。バイナリはブロック &lt;code&gt;LastCallbackState&lt;/code&gt; に転送され、転送されたバイト数はLastCallbackStateに返されます。</target>
        </trans-unit>
        <trans-unit id="514092af0b1076e970f978d5d6c41dea98a0f33d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LocalFilename&lt;/code&gt; is a string and there are no registered callback modules, &lt;code&gt;tftp_file&lt;/code&gt; is used as callback module. It reads the file named &lt;code&gt;LocalFilename&lt;/code&gt; block by block and returns the number of transferred bytes in &lt;code&gt;LastCallbackState&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LocalFilename&lt;/code&gt; が文字列で、登録済みのコールバックモジュールがない場合、 &lt;code&gt;tftp_file&lt;/code&gt; がコールバックモジュールとして使用されます。 &lt;code&gt;LocalFilename&lt;/code&gt; という名前のファイルをブロックごとに読み取り、転送されたバイト数を &lt;code&gt;LastCallbackState&lt;/code&gt; に返します。</target>
        </trans-unit>
        <trans-unit id="172a77adcec95a2025499b6cae24513646d7c3be" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LocalFilename&lt;/code&gt; is a string and there are no registered callback modules, &lt;code&gt;tftp_file&lt;/code&gt; is used as callback module. It writes each transferred block to the file named &lt;code&gt;LocalFilename&lt;/code&gt; and returns the number of transferred bytes in &lt;code&gt;LastCallbackState&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LocalFilename&lt;/code&gt; が文字列で、登録済みのコールバックモジュールがない場合、 &lt;code&gt;tftp_file&lt;/code&gt; がコールバックモジュールとして使用されます。これは、という名前のファイルにそれぞれ転送されたブロックを書き込み &lt;code&gt;LocalFilename&lt;/code&gt; とに転送されたバイト数を返します &lt;code&gt;LastCallbackState&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd17776ebe8291ef5b56762e6914f21f0e371fb1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LocalFilename&lt;/code&gt; is a string and there are registered callback modules, &lt;code&gt;LocalFilename&lt;/code&gt; is tested against the regexps of these and the callback module corresponding to the first match is used, or an error tuple is returned if no matching regexp is found.</source>
          <target state="translated">場合 &lt;code&gt;LocalFilename&lt;/code&gt; は文字列であり、登録されたコールバックモジュールがあり、 &lt;code&gt;LocalFilename&lt;/code&gt; は、これら第一のマッチに対応するコールバックモジュールの正規表現に対してテストされ使用されている、または一致する正規表現が見つからない場合、エラータプルが返されます。</target>
        </trans-unit>
        <trans-unit id="e10f4bb7329e24a46f5a2fd1d389f1d3eaa1ef41" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;LocalFilename&lt;/code&gt; is the atom &lt;code&gt;binary&lt;/code&gt;, &lt;code&gt;tftp_binary&lt;/code&gt; is used as callback module. It concatenates all transferred blocks and returns them as one single binary in &lt;code&gt;LastCallbackState&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;LocalFilename&lt;/code&gt; がアトム &lt;code&gt;binary&lt;/code&gt; 場合、 &lt;code&gt;tftp_binary&lt;/code&gt; がコールバックモジュールとして使用されます。転送されたすべてのブロックを連結し、それらを &lt;code&gt;LastCallbackState&lt;/code&gt; の 1つのバイナリとして返します。</target>
        </trans-unit>
        <trans-unit id="29f45f2e11d4c10074cfecd5aefc75c9eeb1e623" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;M&lt;/code&gt; is not of type map, an exception of type &lt;code&gt;badmap&lt;/code&gt; is thrown.</source>
          <target state="translated">&lt;code&gt;M&lt;/code&gt; がマップ型でない場合、タイプ &lt;code&gt;badmap&lt;/code&gt; の例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="687a37c16da4f8deeaf271a8bf79963858a6f256" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MaxUsed &amp;lt; MinUsed&lt;/code&gt; in a key exchange, it will fail with a disconnect.</source>
          <target state="translated">鍵交換で &lt;code&gt;MaxUsed &amp;lt; MinUsed&lt;/code&gt; 場合、切断して失敗します。</target>
        </trans-unit>
        <trans-unit id="7c02225a551052905fddcfce82626e17b4c75202" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Message&lt;/code&gt; does not correspond to the response, the atom &lt;code&gt;no_response&lt;/code&gt; is returned. If &lt;code&gt;Message&lt;/code&gt; corresponds to the response, the &lt;code&gt;call&lt;/code&gt; operation is completed and either the result is returned as &lt;code&gt;{response, Result}&lt;/code&gt; where &lt;code&gt;Result&lt;/code&gt; corresponds to the value returned from the applied function or an exception is raised. The exceptions that can be raised corresponds to the same exceptions as can be raised by &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;erpc:call/4&lt;/a&gt;&lt;/code&gt;. That is, no &lt;code&gt;{erpc, timeout}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception can be raised. &lt;code&gt;erpc:check_response()&lt;/code&gt; will fail with an &lt;code&gt;{erpc, badarg}&lt;/code&gt; exception if/when an invalid &lt;code&gt;RequestId&lt;/code&gt; is detected.</source>
          <target state="translated">&lt;code&gt;Message&lt;/code&gt; が応答に対応していない場合、アトム &lt;code&gt;no_response&lt;/code&gt; が返されます。場合 &lt;code&gt;Message&lt;/code&gt; 応答に対応する、 &lt;code&gt;call&lt;/code&gt; 操作が完了し、結果は以下のように戻されるか &lt;code&gt;{response, Result}&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 、印加機能または例外から返された値に対応が上昇します。発生する可能性のある例外は、 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;erpc:call/4&lt;/a&gt;&lt;/code&gt; によって発生する可能性のある例外と同じです。つまり、 &lt;code&gt;{erpc, timeout}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外を発生させることはできません。 &lt;code&gt;erpc:check_response()&lt;/code&gt; は、無効な場合に &lt;code&gt;{erpc, badarg}&lt;/code&gt; 例外で失敗します &lt;code&gt;RequestId&lt;/code&gt; が検出されました。</target>
        </trans-unit>
        <trans-unit id="fec574cad80dd815a39ff074fa450bce09ec6bf3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Minutes&lt;/code&gt; is set to &lt;code&gt;infinity&lt;/code&gt;, no rekeying will ever occur due to that max time has passed. Setting &lt;code&gt;Bytes&lt;/code&gt; to &lt;code&gt;infinity&lt;/code&gt; will inhibit rekeying after a certain amount of data has been transferred. If the option value is set to &lt;code&gt;{infinity, infinity}&lt;/code&gt;, no rekeying will be initiated. Note that rekeying initiated by the peer will still be performed.</source>
          <target state="translated">&lt;code&gt;Minutes&lt;/code&gt; が &lt;code&gt;infinity&lt;/code&gt; に設定されている場合、その最大時間が経過しているため、鍵の再生成は行われません。 &lt;code&gt;Bytes&lt;/code&gt; を &lt;code&gt;infinity&lt;/code&gt; 設定すると、一定量のデータが転送された後の鍵の再生成が禁止されます。オプションの値が &lt;code&gt;{infinity, infinity}&lt;/code&gt; に設定されている場合、キーの再生成は開始されません。ピアによって開始されたキー再生成は引き続き実行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="a9f8b097c0197afbf6ad454085a81f83c68dd174" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Mnesia&lt;/code&gt; detects an inconsistent transaction decision, an &lt;code&gt;{inconsistent_database, bad_decision, Node}&lt;/code&gt; system event is generated to give the application a chance to install a fallback or other appropriate measures to resolve the inconsistency. The default behavior of the &lt;code&gt;Mnesia&lt;/code&gt; event handler is the same as if the database became inconsistent as a result of partitioned network (as described earlier).</source>
          <target state="translated">場合 &lt;code&gt;Mnesia&lt;/code&gt; は、一貫性のない取引の決定を検出し、 &lt;code&gt;{inconsistent_database, bad_decision, Node}&lt;/code&gt; システムイベントは、アプリケーションに矛盾を解決するためにフォールバックまたはその他の適切な措置をインストールするための機会を与えるために生成されます。 &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーのデフォルトの動作は、（前述のように）ネットワークが分割された結果としてデータベースが不整合になった場合と同じです。</target>
        </trans-unit>
        <trans-unit id="5ca626a4154bdde85262a0b351b9ffb8e56064dc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Mnesia&lt;/code&gt; detects at startup that both the local node and another node received &lt;code&gt;mnesia_down&lt;/code&gt; from each other, &lt;code&gt;Mnesia&lt;/code&gt; generates an &lt;code&gt;{inconsistent_database, starting_partitioned_network, Node}&lt;/code&gt; system event and acts as described in the previous item.</source>
          <target state="translated">場合 &lt;code&gt;Mnesia&lt;/code&gt; は、ローカル・ノードと別のノードの両方が受信した起動時に検出 &lt;code&gt;mnesia_down&lt;/code&gt; 互いに、 &lt;code&gt;Mnesia&lt;/code&gt; が発生 &lt;code&gt;{inconsistent_database, starting_partitioned_network, Node}&lt;/code&gt; システムイベントと前の項目で説明したように作用します。</target>
        </trans-unit>
        <trans-unit id="8a5aa5b6bb0338ccad2dd9a24afe157f5c87240b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Mnesia&lt;/code&gt; detects that a file has not been properly closed, possibly as a result of a power failure, it tries to repair the bad file in a similar manner. Data can be lost, but &lt;code&gt;Mnesia&lt;/code&gt; can be restarted even if the data is inconsistent. Configuration parameter &lt;code&gt;-mnesia auto_repair &amp;lt;bool&amp;gt;&lt;/code&gt; can be used to control the behavior of &lt;code&gt;Mnesia&lt;/code&gt; at startup. If &lt;code&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;Mnesia&lt;/code&gt; tries to repair the file. If &lt;code&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; has the value &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;Mnesia&lt;/code&gt; does not restart if it detects a suspect file. This configuration parameter affects the repair behavior of log files, &lt;code&gt;DAT&lt;/code&gt; files, and the default backup media.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; は、おそらく電源障害の結果として、ファイルが適切に閉じられていないことを検出した場合、不良ファイルを同様の方法で修復しようとします。データは失われる可能性がありますが、データに一貫性がない場合でも &lt;code&gt;Mnesia&lt;/code&gt; を再起動できます。構成パラメーター &lt;code&gt;-mnesia auto_repair &amp;lt;bool&amp;gt;&lt;/code&gt; を使用して、起動時の &lt;code&gt;Mnesia&lt;/code&gt; の動作を制御できます。場合 &lt;code&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; 値持つ &lt;code&gt;true&lt;/code&gt; 、 &lt;code&gt;Mnesia&lt;/code&gt; は、ファイルを修復しようとします。場合 &lt;code&gt;&amp;lt;bool&amp;gt;&lt;/code&gt; 値を持っている &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;Mnesia&lt;/code&gt; は、それは疑わしいファイルを検出した場合に再起動しません。この構成パラメーターは、ログファイル、 &lt;code&gt;DAT&lt;/code&gt; の修復動作に影響します ファイル、およびデフォルトのバックアップメディア。</target>
        </trans-unit>
        <trans-unit id="29d3fae27e18aeedb269f53e1a8f041e114e54d9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Mnesia&lt;/code&gt; has not started on some of the nodes that are involved in the transaction &lt;strong&gt;and&lt;/strong&gt; neither the local node nor any of the already running nodes know the outcome of the transaction, &lt;code&gt;Mnesia&lt;/code&gt; waits for one, by default. In the worst case scenario, all other involved nodes must start before &lt;code&gt;Mnesia&lt;/code&gt; can make the correct decision about the transaction and finish its startup.</source>
          <target state="translated">場合 &lt;code&gt;Mnesia&lt;/code&gt; は、取引に関与している一部のノード上で開始されていない&lt;strong&gt;と&lt;/strong&gt;、ローカル・ノードでも、すでに実行しているノードのいずれかのどちらもトランザクションの結果を知って、 &lt;code&gt;Mnesia&lt;/code&gt; は、デフォルトでは、1を待ちます。最悪のシナリオでは、 &lt;code&gt;Mnesia&lt;/code&gt; がトランザクションに関する正しい決定を行い、その起動を完了する前に、他のすべての関連ノードが起動する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd38ec2de0e096904bd79c96261fe3dfca545808" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Mnesia&lt;/code&gt; malfunctions, system information is dumped to file &lt;code&gt;MnesiaCore.Node.When&lt;/code&gt;. The type of system information contained in this file can also be generated with the function &lt;code&gt;mnesia_lib:coredump()&lt;/code&gt;. If a &lt;code&gt;Mnesia&lt;/code&gt; system behaves strangely, it is recommended that a &lt;code&gt;Mnesia&lt;/code&gt; core dump file is included in the bug report.</source>
          <target state="translated">場合 &lt;code&gt;Mnesia&lt;/code&gt; の誤動作、システム情報をファイルにダンプされ &lt;code&gt;MnesiaCore.Node.When&lt;/code&gt; を。このファイルに含まれるシステム情報のタイプは、関数 &lt;code&gt;mnesia_lib:coredump()&lt;/code&gt; で生成することもできます。 &lt;code&gt;Mnesia&lt;/code&gt; システムの動作がおかしい場合は、バグレポートに &lt;code&gt;Mnesia&lt;/code&gt; コアダンプファイルを含めることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="78d126042be1f1bd5d152bedd102bc2c27a70a3c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module2:init/1&lt;/code&gt; returns a correct value, this function returns &lt;code&gt;ok&lt;/code&gt;. If &lt;code&gt;Module2:init/1&lt;/code&gt; fails with &lt;code&gt;Reason&lt;/code&gt; or returns an unexpected value &lt;code&gt;Term&lt;/code&gt;, this function returns &lt;code&gt;{error,{'EXIT',Reason}}&lt;/code&gt; or &lt;code&gt;{error,Term}&lt;/code&gt;, respectively.</source>
          <target state="translated">もし &lt;code&gt;Module2:init/1&lt;/code&gt; に戻り、正しい値、この関数が返す &lt;code&gt;ok&lt;/code&gt; 。場合 &lt;code&gt;Module2:init/1&lt;/code&gt; で失敗 &lt;code&gt;Reason&lt;/code&gt; または予期しない値を返す &lt;code&gt;Term&lt;/code&gt; 、この関数が戻る &lt;code&gt;{error,{'EXIT',Reason}}&lt;/code&gt; または &lt;code&gt;{error,Term}&lt;/code&gt; それぞれ、。</target>
        </trans-unit>
        <trans-unit id="2800f17b5a7a3294a30bce9d692cce033e777bbd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; fails or returns an error tuple or an incorrect value, this function returns &lt;code&gt;{error,Errorr}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is a term with information about the error, and the supervisor bridge terminates with reason &lt;code&gt;Error&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Module:init/1&lt;/code&gt; 失敗した場合、またはエラーが返さタプルまたは誤った値は、この関数の戻り &lt;code&gt;{error,Errorr}&lt;/code&gt; 、 &lt;code&gt;Error&lt;/code&gt; エラーに関する情報とともに用語であり、そして理由とスーパバイザ・ブリッジ終了 &lt;code&gt;Error&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dd9e3be966d4953b313f0b3139d9921bb88d0b55" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; fails or returns an incorrect value, this function returns &lt;code&gt;{error,Term}&lt;/code&gt;, where &lt;code&gt;Term&lt;/code&gt; is a term with information about the error, and the supervisor terminates with reason &lt;code&gt;Term&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;Module:init/1&lt;/code&gt; 誤った値が失敗するか、または返し、この関数の戻り &lt;code&gt;{error,Term}&lt;/code&gt; 、ここで、 &lt;code&gt;Term&lt;/code&gt; エラーに関する情報とともに用語、および理由とスーパーバイザ終了する &lt;code&gt;Term&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="06a79b06d12276baeba24803b1a67f3a90f7af4a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; fails with &lt;code&gt;Reason&lt;/code&gt;, the function returns &lt;code&gt;{error,Reason}&lt;/code&gt;. If &lt;code&gt;Module:init/1&lt;/code&gt; returns &lt;code&gt;{stop,Reason}&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt;, the process is terminated and the function returns &lt;code&gt;{error,Reason}&lt;/code&gt; or &lt;code&gt;ignore&lt;/code&gt;, respectively.</source>
          <target state="translated">もし &lt;code&gt;Module:init/1&lt;/code&gt; で失敗 &lt;code&gt;Reason&lt;/code&gt; 、関数戻り &lt;code&gt;{error,Reason}&lt;/code&gt; 。 &lt;code&gt;Module:init/1&lt;/code&gt; が &lt;code&gt;{stop,Reason}&lt;/code&gt; または &lt;code&gt;ignore&lt;/code&gt; を返す場合、プロセスは終了し、関数はそれぞれ &lt;code&gt;{error,Reason}&lt;/code&gt; または &lt;code&gt;ignore&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="08a85009b7d63daa3876ac0bbe64563be6e4667a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; fails with &lt;code&gt;Reason&lt;/code&gt;, this function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,Reason}&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Module:init/1&lt;/code&gt; returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{stop,Reason}&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;ignore&lt;/a&gt;&lt;/code&gt;, the process is terminated and this function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,Reason}&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;ignore&lt;/a&gt;&lt;/code&gt;, respectively.</source>
          <target state="translated">場合 &lt;code&gt;Module:init/1&lt;/code&gt; で失敗 &lt;code&gt;Reason&lt;/code&gt; は、この関数の戻り &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,Reason}&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;Module:init/1&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{stop,Reason}&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;ignore&lt;/a&gt;&lt;/code&gt; を返す場合、プロセスは終了し、この関数はそれぞれ &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,Reason}&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;ignore&lt;/a&gt;&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b964744cac9c86474eba0929df72fddd8367b88f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; returns &lt;code&gt;ignore&lt;/code&gt;, this function returns &lt;code&gt;ignore&lt;/code&gt; as well and the supervisor bridge terminates with reason &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module:init/1&lt;/code&gt; が &lt;code&gt;ignore&lt;/code&gt; を返す場合、この関数も &lt;code&gt;ignore&lt;/code&gt; を返し、スーパーバイザブリッジは &lt;code&gt;normal&lt;/code&gt; 理由で終了します。</target>
        </trans-unit>
        <trans-unit id="7e2bd739756c272b047be065f7e266ff83f96304" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; returns &lt;code&gt;ignore&lt;/code&gt;, this function returns &lt;code&gt;ignore&lt;/code&gt; as well, and the supervisor terminates with reason &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module:init/1&lt;/code&gt; が &lt;code&gt;ignore&lt;/code&gt; を返す場合、この関数も &lt;code&gt;ignore&lt;/code&gt; を返し、スーパーバイザは &lt;code&gt;normal&lt;/code&gt; 理由で終了します。</target>
        </trans-unit>
        <trans-unit id="e0a0e47ea971ab5cb4ee104b3ddf1785be6b28da" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:init/1&lt;/code&gt; returns a correct value indicating successful completion, the event manager adds the event handler and this function returns &lt;code&gt;ok&lt;/code&gt;. If &lt;code&gt;Module:init/1&lt;/code&gt; fails with &lt;code&gt;Reason&lt;/code&gt; or returns &lt;code&gt;{error,Reason}&lt;/code&gt;, the event handler is ignored and this function returns &lt;code&gt;{'EXIT',Reason}&lt;/code&gt; or &lt;code&gt;{error,Reason}&lt;/code&gt;, respectively.</source>
          <target state="translated">場合 &lt;code&gt;Module:init/1&lt;/code&gt; に戻り正常に完了したことを示す正しい値、イベントマネージャは、イベントハンドラと戻ります。この機能追加し &lt;code&gt;ok&lt;/code&gt; 。場合 &lt;code&gt;Module:init/1&lt;/code&gt; で失敗 &lt;code&gt;Reason&lt;/code&gt; 又は戻り &lt;code&gt;{error,Reason}&lt;/code&gt; 、イベントハンドラは無視され、この関数が返す &lt;code&gt;{'EXIT',Reason}&lt;/code&gt; 又は &lt;code&gt;{error,Reason}&lt;/code&gt; それぞれ。</target>
        </trans-unit>
        <trans-unit id="09a967e619be6af84ec5d9fcc2d540f2231d235c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:on_tc_fail/4&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:on_tc_fail(TestName, Reason, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:on_tc_fail/4&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:on_tc_fail(TestName, Reason, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="dd0d2fb7d1f38864cd0e105f7caff1a473b3f495" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:on_tc_skip/4&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:on_tc_skip(TestName, Reason, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:on_tc_skip/4&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:on_tc_skip(TestName, Reason, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="6e0f9d357b53cd19411dbd2755262448109533a3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:post_end_per_group/5&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:post_end_per_group(GroupName, Config, Return, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:post_end_per_group/5&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:post_end_per_group(GroupName, Config, Return, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="c30a59478d9813033d5db1ba6eb7b720e1f8a281" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:post_end_per_testcase/5&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:post_end_per_testcase(TestcaseName, Config, Return, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:post_end_per_testcase/5&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:post_end_per_testcase(TestcaseName, Config, Return, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="8b31af596bd3564305ac89780dcd5037ca72eed4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:post_init_per_group/5&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:post_init_per_group(GroupName, Config, Return, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:post_init_per_group/5&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:post_init_per_group(GroupName, Config, Return, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="3389cc7f2c4854aa000a5dc7cbbbd118b6386a3a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:post_init_per_testcase/5&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:post_init_per_testcase(TestcaseName, Config, Return, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:post_init_per_testcase/5&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:post_init_per_testcase(TestcaseName, Config, Return, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="fa0c6abab53f3a1832ad70236445abe23313c949" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:pre_end_per_group/4&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:pre_end_per_group(GroupName, EndData, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:pre_end_per_group/4&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:pre_end_per_group(GroupName, EndData, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="4220e81587ad22a96ae86a7cc023800c3211a2ce" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:pre_end_per_testcase/4&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:pre_end_per_testcase(TestcaseName, EndData, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:pre_end_per_testcase/4&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:pre_end_per_testcase(TestcaseName, EndData, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="827b0497b91b5175e901d63a74e9ca29d1d28466" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:pre_init_per_group/4&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:pre_init_per_group(GroupName, InitData, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:pre_init_per_group/4&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:pre_init_per_group(GroupName, InitData, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="547d2d680c102fd734e63aee60c0764a91aca79d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module:pre_init_per_testcase/4&lt;/code&gt; is not exported, common_test will attempt to call &lt;code&gt;Module:pre_init_per_testcase(TestcaseName, InitData, CTHState)&lt;/code&gt; instead. This is for backwards compatibility.</source>
          <target state="translated">&lt;code&gt;Module:pre_init_per_testcase/4&lt;/code&gt; がエクスポートされない場合、common_testは代わりに &lt;code&gt;Module:pre_init_per_testcase(TestcaseName, InitData, CTHState)&lt;/code&gt; を呼び出そうとします。これは下位互換性のためです。</target>
        </trans-unit>
        <trans-unit id="21fb0625232bdf7d33e9683b493cf013dd5244be" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is an atom and is not the path of a source file, then the code path is searched to locate the object file for the module and extract its original compiler options and source path. If the source file is not found in the original location, &lt;code&gt;&lt;a href=&quot;filelib#find_source-1&quot;&gt;filelib:find_source/1&lt;/a&gt;&lt;/code&gt; is used to search for it relative to the directory of the object file.</source>
          <target state="translated">場合 &lt;code&gt;Module&lt;/code&gt; 原子であり、ソースファイルのパスではない場合、コード・パスは、モジュールのオブジェクト・ファイルを見つけて、その元のコンパイラオプションとソースパスを抽出するために検索されます。ソースファイルが元の場所にない場合は、 &lt;code&gt;&lt;a href=&quot;filelib#find_source-1&quot;&gt;filelib:find_source/1&lt;/a&gt;&lt;/code&gt; を使用して、オブジェクトファイルのディレクトリからの相対で検索します。</target>
        </trans-unit>
        <trans-unit id="2f35893e15d66156fbf46d4e4af24041aed07f45" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is interpreted, the interpreter is invoked and the return value of the interpreted &lt;code&gt;Fun(Arg1,.., ArgN)&lt;/code&gt; call is returned.</source>
          <target state="translated">場合 &lt;code&gt;Module&lt;/code&gt; 解釈され、インタプリタが呼び出され、解釈の戻り値 &lt;code&gt;Fun(Arg1,.., ArgN)&lt;/code&gt; の呼び出しが返されます。</target>
        </trans-unit>
        <trans-unit id="67c2474f76236eb774fc89b2d1d56a6f0f7c3f57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is loaded and the object file exists and contains the same code.</source>
          <target state="translated">場合は &lt;code&gt;Module&lt;/code&gt; ロードされ、オブジェクト・ファイルが存在し、同じコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="8e3e08e194bdd0bde8a181db6a7f4ea876ef7dfb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is loaded but does not have native code</source>
          <target state="translated">場合は &lt;code&gt;Module&lt;/code&gt; ロードされているが、ネイティブコードを持っていません</target>
        </trans-unit>
        <trans-unit id="6ed685bf101eabc82b65e519e9da522892714f39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is loaded but no corresponding object file can be found in the code path.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; がロードされているが、対応するオブジェクトファイルがコードパスに見つからない場合。</target>
        </trans-unit>
        <trans-unit id="a3d8ad064c879fd2b635248fe4428064d2c2287b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is loaded but the object file contains code with a different MD5 checksum.</source>
          <target state="translated">場合は &lt;code&gt;Module&lt;/code&gt; ロードされますが、オブジェクトファイルは、別のMD5チェックサムとコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="0d66cbf854873559817431ac8657e00f31894e65" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is not Cover compiled, the function returns &lt;code&gt;{error,{not_cover_compiled,Module}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; がCoverコンパイルされていない場合、関数は &lt;code&gt;{error,{not_cover_compiled,Module}}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="35affc64e4462796f41658b1b89a47205a5418f1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is not an atom.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; がアトムでない場合。</target>
        </trans-unit>
        <trans-unit id="28eaadbc7b4906a161654ae8a696f70005c80dff" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is not currently loaded.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; が現在ロードされていない場合。</target>
        </trans-unit>
        <trans-unit id="2f4aff325466dff627c5e688d76bc4df8a1246e1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is not given, data for all Cover compiled or earlier imported modules is exported.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; が指定されていない場合、すべてのCoverコンパイル済みまたは以前にインポートされたモジュールのデータがエクスポートされます。</target>
        </trans-unit>
        <trans-unit id="4388daad92dd73ddcb6294d3f0538fdaca71514b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is not loaded</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; がロードされていない場合</target>
        </trans-unit>
        <trans-unit id="3de1d5c36e26d7596ce7561b07882f4daa22a030" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Module&lt;/code&gt; is the name of a loaded module that has native code loaded</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; が、ネイティブコードが読み込まれている読み込まれたモジュールの名前である場合</target>
        </trans-unit>
        <trans-unit id="dc068e6c6fb49a84acb5b9f82ce4f1b82380c161" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Modules&lt;/code&gt; is an atom (one module), the return will be &lt;code&gt;Answer&lt;/code&gt;, else the return will be a list, &lt;code&gt;{result,Ok,Fail}&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Modules&lt;/code&gt; 原子（一つのモジュール）であり、リターンがあろう &lt;code&gt;Answer&lt;/code&gt; 他、リターンリストになり、 &lt;code&gt;{result,Ok,Fail}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d2129780e47085f58784cab38168e42cd913f8b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Modules&lt;/code&gt; is an atom (one module), the return will be &lt;code&gt;OneResult&lt;/code&gt;, else the return will be &lt;code&gt;{result,Ok,Fail}&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Modules&lt;/code&gt; 原子（一つのモジュール）であり、リターンがあろう &lt;code&gt;OneResult&lt;/code&gt; 、他のリターンになります &lt;code&gt;{result,Ok,Fail}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c5660afecaaa6ae9b7c2e1dd31118d79f4a48c6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Modules&lt;/code&gt; is not given, all modules that have data in the cover data table, are analysed. Note that this includes both cover compiled modules and imported modules.</source>
          <target state="translated">&lt;code&gt;Modules&lt;/code&gt; が指定されていない場合、カバーデータテーブルにデータがあるすべてのモジュールが分析されます。これには、コンパイルされたモジュールとインポートされたモジュールの両方が含まれます。</target>
        </trans-unit>
        <trans-unit id="8a375b70a231e530df5647867765137b186f5486" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Modules=dynamic&lt;/code&gt;, which is the case for event managers, the event manager process informs the release handler about the list of currently installed event handlers (&lt;code&gt;gen_event&lt;/code&gt;), and it is checked if the module name is in this list instead.</source>
          <target state="translated">場合は &lt;code&gt;Modules=dynamic&lt;/code&gt; イベントマネージャーの場合で、イベントマネージャのプロセスは、現在インストールされているイベントハンドラ（のリストについては、リリースハンドラを通知し &lt;code&gt;gen_event&lt;/code&gt; ）、およびモジュール名ではなく、このリストに含まれている場合は、それがチェックされます。</target>
        </trans-unit>
        <trans-unit id="e8cecedc28fd848e48458244703056a1ac1a339f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MonitorPid&lt;/code&gt; does not exist.</source>
          <target state="translated">場合 &lt;code&gt;MonitorPid&lt;/code&gt; は存在しません。</target>
        </trans-unit>
        <trans-unit id="373a002dc9620bdf865a5b5e6f260b3dd1f5301f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MonitorPid&lt;/code&gt; is not a local process.</source>
          <target state="translated">&lt;code&gt;MonitorPid&lt;/code&gt; がローカルプロセスでない場合。</target>
        </trans-unit>
        <trans-unit id="89660705a87398108d22c38f81698b872c41d667" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;MonitorRef&lt;/code&gt; is a reference that the calling process obtained by calling &lt;code&gt;&lt;a href=&quot;#monitor-2&quot;&gt;monitor/2&lt;/a&gt;&lt;/code&gt;, this monitoring is turned off. If the monitoring is already turned off, nothing happens.</source>
          <target state="translated">&lt;code&gt;MonitorRef&lt;/code&gt; が、呼び出しプロセスが &lt;code&gt;&lt;a href=&quot;#monitor-2&quot;&gt;monitor/2&lt;/a&gt;&lt;/code&gt; を呼び出して取得した参照である場合、この監視はオフになります。監視がすでにオフになっている場合、何も起こりません。</target>
        </trans-unit>
        <trans-unit id="4fd962484b4478493735ba1be0d09ca7b30e44ab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;N&lt;/code&gt; &amp;lt; &lt;code&gt;0&lt;/code&gt;, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">場合は &lt;code&gt;N&lt;/code&gt; &amp;lt; &lt;code&gt;0&lt;/code&gt; 、 &lt;code&gt;badarg&lt;/code&gt; の例外が発生します。</target>
        </trans-unit>
        <trans-unit id="790d7222607fd455375f3a15db7f9612e76c7d20" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;N&lt;/code&gt; = 0, call saving is disabled for the process, which is the default. Whenever the size of the call saving list is set, its contents are reset.</source>
          <target state="translated">&lt;code&gt;N&lt;/code&gt; = 0の場合、プロセスのコール保存は無効になっています。これがデフォルトです。通話保存リストのサイズが設定されるたびに、その内容がリセットされます。</target>
        </trans-unit>
        <trans-unit id="917defb768e26d53c01d843240d1452bda349978" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; (an alias name for &lt;code&gt;Key&lt;/code&gt;) is used to identify the connection, this name can be used as connection reference for subsequent calls. Only one open connection at a time associated with &lt;code&gt;Name&lt;/code&gt; is possible. If &lt;code&gt;Key&lt;/code&gt; is used, the returned handle must be used for subsequent calls (multiple connections can be opened using the configuration data specified by &lt;code&gt;Key&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;Name&lt;/code&gt; （の別名 &lt;code&gt;Key&lt;/code&gt; ）接続を識別するために使用され、この名前は、後続の呼び出しのための接続基準として使用することができます。 &lt;code&gt;Name&lt;/code&gt; に関連付けられている開いている接続は、一度に1つだけです。場合は &lt;code&gt;Key&lt;/code&gt; 使用され、返されたハンドルは、（複数の接続がで指定されたコンフィギュレーション・データを使用して開くことができ、後続の呼び出しに使用されなければならない &lt;code&gt;Key&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="656dd80cf80ca49ab5d3f335d4b4b338f312a58e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is also the name of one of the input modules, the code from that module will occur at the top of the resulting code, and no extra &quot;header&quot; comments will be added. In other words, the look of that module will be preserved.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; が入力モジュールの1つの名前でもある場合、そのモジュールのコードは結果のコードの上部に表示され、余分な「ヘッダー」コメントは追加されません。つまり、そのモジュールの外観は維持されます。</target>
        </trans-unit>
        <trans-unit id="ce802579fca60cdc1ea685ad322c443678165ff7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is an &lt;code&gt;ip_address()&lt;/code&gt;, the domain name to query for is generated as the standard reverse &lt;code&gt;&quot;.IN-ADDR.ARPA.&quot;&lt;/code&gt; name for an IPv4 address, or the &lt;code&gt;&quot;.IP6.ARPA.&quot;&lt;/code&gt; name for an IPv6 address. In this case, you most probably want to use &lt;code&gt;Class = in&lt;/code&gt; and &lt;code&gt;Type = ptr&lt;/code&gt;, but it is not done automatically.</source>
          <target state="translated">場合は &lt;code&gt;Name&lt;/code&gt; ある &lt;code&gt;ip_address()&lt;/code&gt; のクエリに、ドメイン名の標準的な逆のように生成される &lt;code&gt;&quot;.IN-ADDR.ARPA.&quot;&lt;/code&gt; IPv4アドレスの名前、または &lt;code&gt;&quot;.IP6.ARPA.&quot;&lt;/code&gt; IPv6アドレスの名前。この場合、おそらく &lt;code&gt;Class = in&lt;/code&gt; および &lt;code&gt;Type = ptr&lt;/code&gt; を使用する必要がありますが、これは自動的には行われません。</target>
        </trans-unit>
        <trans-unit id="a8688d593066763d843262dfe2006d94c1dcdd01" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is found, message &lt;code&gt;Msg&lt;/code&gt; is sent to the corresponding pid. The pid is also the return value of the function. If the name is not found, the function returns &lt;code&gt;{badarg, {Name, Msg}}&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Name&lt;/code&gt; 発見され、メッセージ &lt;code&gt;Msg&lt;/code&gt; 、対応するPIDに送信されます。pidは関数の戻り値でもあります。名前が見つからない場合、関数は &lt;code&gt;{badarg, {Name, Msg}}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="77e52354c073c213988ffe84ec279249d3ad68b4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is found, the corresponding pid is returned. If the name is not found, the function returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Name&lt;/code&gt; 発見され、対応するPIDが返されます。名前が見つからない場合、関数は &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="b00a3532b853c4357137d1d6716fd7be18c249ed" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is not a globally registered name, the calling function exits with reason &lt;code&gt;{badarg, {Name, Msg}}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; がグローバルに登録された名前でない場合、呼び出し側の関数は理由 &lt;code&gt;{badarg, {Name, Msg}}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="db414ecce81f54e0e73f62d5d1f1d7174a6bde93" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is not a symbolic link, this function returns the same result as &lt;code&gt;read_file_info/1&lt;/code&gt;. On platforms that do not support symbolic links, this function is always equivalent to &lt;code&gt;read_file_info/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; がシンボリックリンクでない場合、この関数は &lt;code&gt;read_file_info/1&lt;/code&gt; と同じ結果を返します。シンボリックリンクをサポートしないプラットフォームでは、この関数は常に &lt;code&gt;read_file_info/1&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="8984feb7e9675020b1675cc50fa02225487141b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is not found</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; が見つからない場合</target>
        </trans-unit>
        <trans-unit id="83d7d8a185c6a27fcabc1c06a33f11f825598937" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; is set to &lt;strong&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/strong&gt; the node will be started in a special mode optimized to be the temporary client of another node. When enabled the node will request a &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#DFLAG_NAME_ME&quot;&gt;dynamic node name&lt;/a&gt;&lt;/code&gt; from the first node it connects to. In addition these distribution settings will be set:</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; が&lt;strong&gt; &lt;code&gt;undefined&lt;/code&gt; に&lt;/strong&gt;設定されている場合、ノードは別のノードの一時クライアントとして最適化された特別なモードで開始されます。有効にすると、ノードは接続先の最初のノードに &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#DFLAG_NAME_ME&quot;&gt;dynamic node name&lt;/a&gt;&lt;/code&gt; を要求します。さらに、次の配布設定が設定されます。</target>
        </trans-unit>
        <trans-unit id="3d520edb0115ce9349b43d81a86232f4def5a898" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;Dir&lt;/code&gt; is invalid</source>
          <target state="translated">&lt;code&gt;Name&lt;/code&gt; または &lt;code&gt;Dir&lt;/code&gt; が無効な場合</target>
        </trans-unit>
        <trans-unit id="f315d1f10b092b6fd3887d5883429c8b05c69dd6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NetTicktime &amp;lt; PreviousNetTicktime&lt;/code&gt;, the &lt;code&gt;net_ticktime&lt;/code&gt; change is done at the end of the transition period; otherwise at the beginning. During the transition period, &lt;code&gt;net_kernel&lt;/code&gt; ensures that there is outgoing traffic on all connections at least every &lt;code&gt;MTTI&lt;/code&gt; millisecond.</source>
          <target state="translated">場合 &lt;code&gt;NetTicktime &amp;lt; PreviousNetTicktime&lt;/code&gt; 、 &lt;code&gt;net_ticktime&lt;/code&gt; 変化は、遷移期間の終了時に行われます。それ以外の場合は最初。移行期間中、 &lt;code&gt;net_kernel&lt;/code&gt; はすべての接続に少なくとも &lt;code&gt;MTTI&lt;/code&gt; ミリ秒ごとに発信トラフィックがあることを保証します。</target>
        </trans-unit>
        <trans-unit id="3470b5ebd8e369aa1cfb7ac34ffa140b95c20443" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NewVsn&lt;/code&gt; is installed with option &lt;code&gt;{update_paths,true}&lt;/code&gt;, then &lt;code&gt;code:lib_dir(myapp)&lt;/code&gt; returns &lt;code&gt;/home/user/myapp-1.0&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;NewVsn&lt;/code&gt; は、オプションでインストールされている &lt;code&gt;{update_paths,true}&lt;/code&gt; 、次いで &lt;code&gt;code:lib_dir(myapp)&lt;/code&gt; 返し &lt;code&gt;/home/user/myapp-1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7547eeec41488135afba55363382ea4a68e45c3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NextState =/= State&lt;/code&gt; the state machine changes to a new state. A &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;state enter call&lt;/a&gt;&lt;/code&gt; is performed if enabled and all &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postponed events&lt;/a&gt;&lt;/code&gt; are retried.</source>
          <target state="translated">&lt;code&gt;NextState =/= State&lt;/code&gt; 場合、ステートマシンは新しい状態に変わります。 &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;state enter call&lt;/a&gt;&lt;/code&gt; 有効にした場合に実行され、すべての &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postponed events&lt;/a&gt;&lt;/code&gt; 再試行されます。</target>
        </trans-unit>
        <trans-unit id="985454129fa65531f94519e19f8ec9b0b8e0bac3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NextState =/= State&lt;/code&gt; this is a &lt;strong&gt;state change&lt;/strong&gt; so the extra things &lt;code&gt;gen_statem&lt;/code&gt; does are: the event queue is restarted from the oldest &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postponed event&lt;/a&gt;&lt;/code&gt;, any current &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;state time-out&lt;/a&gt;&lt;/code&gt; is cancelled, and a &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;state enter call&lt;/a&gt;&lt;/code&gt; is performed, if enabled.</source>
          <target state="translated">&lt;code&gt;NextState =/= State&lt;/code&gt; 場合、これは&lt;strong&gt;状態の変更である&lt;/strong&gt;ため、 &lt;code&gt;gen_statem&lt;/code&gt; が行う追加の処理は、イベントキューが最も古い &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postponed event&lt;/a&gt;&lt;/code&gt; から再開され、現在の &lt;code&gt;&lt;a href=&quot;#State%20Time-Outs&quot;&gt;state time-out&lt;/a&gt;&lt;/code&gt; がキャンセルされ、有効になっている場合は &lt;code&gt;&lt;a href=&quot;#State%20Enter%20Calls&quot;&gt;state enter call&lt;/a&gt;&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="192634e65d22edbbba862eb9814d7d7d08c39bad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Node&lt;/code&gt; fails or does not exist, the message &lt;code&gt;{nodedown, Node}&lt;/code&gt; is delivered to the process. If a process has made two calls to &lt;code&gt;monitor_node(Node, true)&lt;/code&gt; and &lt;code&gt;Node&lt;/code&gt; terminates, two &lt;code&gt;nodedown&lt;/code&gt; messages are delivered to the process. If there is no connection to &lt;code&gt;Node&lt;/code&gt;, an attempt is made to create one. If this fails, a &lt;code&gt;nodedown&lt;/code&gt; message is delivered.</source>
          <target state="translated">場合 &lt;code&gt;Node&lt;/code&gt; 失敗した場合、または存在しない場合、メッセージ &lt;code&gt;{nodedown, Node}&lt;/code&gt; プロセスに配信されます。プロセスが &lt;code&gt;monitor_node(Node, true)&lt;/code&gt; を2回呼び出し、 &lt;code&gt;Node&lt;/code&gt; が終了した場合、2つの &lt;code&gt;nodedown&lt;/code&gt; メッセージがプロセスに配信されます。 &lt;code&gt;Node&lt;/code&gt; への接続がない場合、接続を作成しようとします。これが失敗すると、 &lt;code&gt;nodedown&lt;/code&gt; メッセージが配信されます。</target>
        </trans-unit>
        <trans-unit id="68714d151c87dc360bf98fc14620b6c335f0dd18" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Node&lt;/code&gt; is &lt;code&gt;new&lt;/code&gt; the &lt;code&gt;Options&lt;/code&gt; will then also be added to kernel configration parameters &lt;code&gt;inet_dist_listen_options&lt;/code&gt; and &lt;code&gt;inet_dist_connect_options&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; が &lt;code&gt;new&lt;/code&gt; 場合、 &lt;code&gt;Options&lt;/code&gt; はカーネル構成パラメーター &lt;code&gt;inet_dist_listen_options&lt;/code&gt; および &lt;code&gt;inet_dist_connect_options&lt;/code&gt; にも追加されます。</target>
        </trans-unit>
        <trans-unit id="9a374c5564c071bca33b827b4d05f4d121d56e78" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Node&lt;/code&gt; is a connected node the return value is the same as from &lt;code&gt;&lt;a href=&quot;inet#getopts-2&quot;&gt;inet:getopts(Sock, Options)&lt;/a&gt;&lt;/code&gt; where &lt;code&gt;Sock&lt;/code&gt; is the distribution socket for &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Node&lt;/code&gt; 接続ノードである戻り値が同一である &lt;code&gt;&lt;a href=&quot;inet#getopts-2&quot;&gt;inet:getopts(Sock, Options)&lt;/a&gt;&lt;/code&gt; &lt;code&gt;Sock&lt;/code&gt; 、配信ソケットである &lt;code&gt;Node&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4a745393bc7f4f706da8daca8a06958d92906e5a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;NodeRefs&lt;/code&gt; has the value &lt;code&gt;all_nodes&lt;/code&gt;, the operation or test is performed on all specified test nodes. (Declaring a term without a &lt;code&gt;NodeRefs&lt;/code&gt; element has the same effect). If &lt;code&gt;NodeRefs&lt;/code&gt; has the value &lt;code&gt;master&lt;/code&gt;, the operation is only performed on the &lt;code&gt;Common Test&lt;/code&gt; Master node (namely set the log directory or install an event handler).</source>
          <target state="translated">場合 &lt;code&gt;NodeRefs&lt;/code&gt; が値有する &lt;code&gt;all_nodes&lt;/code&gt; を、操作または試験は、すべての指定されたテスト・ノード上で実行されます。（ &lt;code&gt;NodeRefs&lt;/code&gt; 要素なしで用語を宣言しても同じ効果があります）。場合 &lt;code&gt;NodeRefs&lt;/code&gt; が値有する &lt;code&gt;master&lt;/code&gt; 、操作のみで実行される &lt;code&gt;Common Test&lt;/code&gt; （すなわち、ログディレクトリを設定したり、イベントハンドラをインストール）マスタノード。</target>
        </trans-unit>
        <trans-unit id="0a2bb885a5c6676f0b55789e9e3cebe681cef1a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Nodename&lt;/code&gt; is the local node, the error reason &lt;code&gt;cant_add_local_node&lt;/code&gt; is returned.</source>
          <target state="translated">場合は &lt;code&gt;Nodename&lt;/code&gt; ローカル・ノードで、エラー理由 &lt;code&gt;cant_add_local_node&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="88f13b4b4a78ad3eb8641157bd00453fceefb7e9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Norm&lt;/code&gt; is not &lt;code&gt;none&lt;/code&gt; the function applies normalization on the fly before the equality test. There are four available normalization forms: &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt; nfc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfd_list-1&quot;&gt; nfd&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkc_list-1&quot;&gt; nfkc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkd_list-1&quot;&gt; nfkd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Norm&lt;/code&gt; が &lt;code&gt;none&lt;/code&gt; でない場合、関数は等価性テストの前にその場で正規化を適用します。：使用可能な4つの正規化形式があり &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt; nfc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfd_list-1&quot;&gt; nfd&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkc_list-1&quot;&gt; nfkc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkd_list-1&quot;&gt; nfkd&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8cd44685473bdc36e9c30c5fd35ef39651321ff3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Norm&lt;/code&gt; is not &lt;code&gt;none&lt;/code&gt; the function applies normalization on the fly before the equality test. There are four available normalization forms: &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt;nfc&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfd_list-1&quot;&gt;nfd&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkc_list-1&quot;&gt;nfkc&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkd_list-1&quot;&gt;nfkd&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Norm&lt;/code&gt; が &lt;code&gt;none&lt;/code&gt; ではない場合、関数は等価性テストの前にその場で正規化を適用します。 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt;nfc&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfd_list-1&quot;&gt;nfd&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkc_list-1&quot;&gt;nfkc&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfkd_list-1&quot;&gt;nfkd&lt;/a&gt;&lt;/code&gt; の 4つの利用可能な正規化形式があります。</target>
        </trans-unit>
        <trans-unit id="e2e6781b735fbde5662ff5d701d6df3c8fc8b882" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ObjectOrObjects&lt;/code&gt; is a list, the function checks &lt;strong&gt;every&lt;/strong&gt; key before inserting anything. Nothing is inserted unless &lt;strong&gt;all&lt;/strong&gt; keys present in the list are absent from the table. Like &lt;code&gt;insert/2&lt;/code&gt;, the entire operation is guaranteed to be &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;ObjectOrObjects&lt;/code&gt; リスト、機能チェックがある&lt;strong&gt;すべての&lt;/strong&gt;ものを挿入する前にキーを押します。リストに存在する&lt;strong&gt;すべての&lt;/strong&gt;キーがテーブルに存在しない限り&lt;strong&gt;、&lt;/strong&gt;何も挿入されません。 &lt;code&gt;insert/2&lt;/code&gt; と同様に、操作全体が &lt;code&gt;&lt;a href=&quot;#concurrency&quot;&gt;atomic and isolated&lt;/a&gt;&lt;/code&gt; されていることが保証されています。</target>
        </trans-unit>
        <trans-unit id="ea049099ad2942c413fff09669264ab1e5dd87b7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Operation&lt;/code&gt; cannot fit in a 32-bit integer.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; が32ビット整数に収まらない場合。</target>
        </trans-unit>
        <trans-unit id="9a2af5fb3189d023dbe0c347471fbf3afbf37fe5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Operation&lt;/code&gt; does not fit in a 32-bit integer.</source>
          <target state="translated">&lt;code&gt;Operation&lt;/code&gt; が32ビット整数に収まらない場合。</target>
        </trans-unit>
        <trans-unit id="2ef59a44cc7221066ae352f1c66be399d1a45ac8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Opt&lt;/code&gt; is any atom, it is interpreted as &lt;code&gt;{Opt,true}&lt;/code&gt; unless the atom string starts with &lt;code&gt;&quot;no&quot;&lt;/code&gt;, making the interpretation &lt;code&gt;{Opt,false}&lt;/code&gt;. For example, &lt;code&gt;usevc&lt;/code&gt; is an alias for &lt;code&gt;{usevc,true}&lt;/code&gt; and &lt;code&gt;nousevc&lt;/code&gt; is an alias for &lt;code&gt;{usevc,false}&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Opt&lt;/code&gt; 任意の原子であり、それは以下のように解釈される &lt;code&gt;{Opt,true}&lt;/code&gt; 原子文字列が始まる場合を除き &lt;code&gt;&quot;no&quot;&lt;/code&gt; 解釈を行う、 &lt;code&gt;{Opt,false}&lt;/code&gt; 。たとえば、 &lt;code&gt;usevc&lt;/code&gt; は &lt;code&gt;{usevc,true}&lt;/code&gt; のエイリアスで、 &lt;code&gt;nousevc&lt;/code&gt; は &lt;code&gt;{usevc,false}&lt;/code&gt; エイリアスです。</target>
        </trans-unit>
        <trans-unit id="31127aa2062d718c77d7a07ba00f404218c5e042" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OptList&lt;/code&gt; is not a proper list of valid &lt;code&gt;Opt&lt;/code&gt;s.</source>
          <target state="translated">&lt;code&gt;OptList&lt;/code&gt; が有効な &lt;code&gt;Opt&lt;/code&gt; の適切なリストでない場合。</target>
        </trans-unit>
        <trans-unit id="7b4363da74d53cb9c45989d6ac83b5d6bbd19064" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OptParams&lt;/code&gt; is not given, the default value &lt;code&gt;[]&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;OptParams&lt;/code&gt; が指定されていない場合、デフォルト値 &lt;code&gt;[]&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="a510b4980f05110bb42f2051f210307d0b27183c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Option&lt;/code&gt; is an invalid option.</source>
          <target state="translated">もし &lt;code&gt;Option&lt;/code&gt; 無効なオプションです。</target>
        </trans-unit>
        <trans-unit id="12e88c8f64ffe2e4621e2429aa9df040b6734c5f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OptionList&lt;/code&gt; is an invalid list of options.</source>
          <target state="translated">場合 &lt;code&gt;OptionList&lt;/code&gt; は、オプションの無効なリストがあります。</target>
        </trans-unit>
        <trans-unit id="28172abefdf60c0ffbe1b8a62b1fc04dc23fb874" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OptionList&lt;/code&gt; is an invalid option list.</source>
          <target state="translated">場合 &lt;code&gt;OptionList&lt;/code&gt; は、無効なオプションのリストがあります。</target>
        </trans-unit>
        <trans-unit id="93bbd7b2e7d83031f59c92a0c8ccb1cc60d19148" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OptionList&lt;/code&gt; is not a list.</source>
          <target state="translated">&lt;code&gt;OptionList&lt;/code&gt; がリストでない場合。</target>
        </trans-unit>
        <trans-unit id="47de326f53be67167a635f5060809e5db271ba9b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Options&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;, the function behaves as &lt;code&gt;&lt;a href=&quot;#float_to_list-1&quot;&gt; float_to_list/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Options&lt;/code&gt; である &lt;code&gt;[]&lt;/code&gt; 、として機能振る舞い &lt;code&gt;&lt;a href=&quot;#float_to_list-1&quot;&gt; float_to_list/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b6133e7ac28cc0038bd62a0b0ae71e4da87c1eca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Options&lt;/code&gt; is &lt;code&gt;[]&lt;/code&gt;, the function behaves as &lt;code&gt;&lt;a href=&quot;#float_to_list-1&quot;&gt;float_to_list/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Options&lt;/code&gt; である &lt;code&gt;[]&lt;/code&gt; 、として機能振る舞い &lt;code&gt;&lt;a href=&quot;#float_to_list-1&quot;&gt;float_to_list/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e7730b5d34ec1da622c3e568e7e8a64ba1d2bd89" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Options&lt;/code&gt; is a list, this is equivalent to &lt;code&gt;new([{size, Size} | Options]&lt;/code&gt;, otherwise it is equivalent to &lt;code&gt;new([{size, Size} | [Options]]&lt;/code&gt;. However, using this function directly is more efficient.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; がリストの場合、これは &lt;code&gt;new([{size, Size} | Options]&lt;/code&gt; と同等です。それ以外の場合は &lt;code&gt;new([{size, Size} | [Options]]&lt;/code&gt; と同等です。ただし、この関数を直接使用する方が効率的です。</target>
        </trans-unit>
        <trans-unit id="9fde3e06c0c33f9a7645abc8b6b8f5e2ebe7f59a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Options&lt;/code&gt; is not &lt;code&gt;[]&lt;/code&gt;, the format is as follows:</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; でない場合、形式は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="30be8f5cb2762ca72a34cc75e497114c5814d418" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Opts&lt;/code&gt; is not specified or if it is &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;ConfigFile&lt;/code&gt; is deleted and a new file is created. If &lt;code&gt;Opts = [append]&lt;/code&gt;, &lt;code&gt;ConfigFile&lt;/code&gt; is not deleted. The new information is appended at the end of the file.</source>
          <target state="translated">場合 &lt;code&gt;Opts&lt;/code&gt; 指定された、またはそれがある場合はされていない &lt;code&gt;[]&lt;/code&gt; 、 &lt;code&gt;ConfigFile&lt;/code&gt; 削除され、新しいファイルが作成されます。場合は &lt;code&gt;Opts = [append]&lt;/code&gt; 、 &lt;code&gt;ConfigFile&lt;/code&gt; 削除されません。新しい情報はファイルの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="373e624d641069009ec67c8a54cd85bd2a2d72ad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Out&lt;/code&gt; is specified, &lt;code&gt;FormatHandler&lt;/code&gt; gets the file descriptor to &lt;code&gt;Out&lt;/code&gt; as the first parameter.</source>
          <target state="translated">&lt;code&gt;Out&lt;/code&gt; が指定されている場合、 &lt;code&gt;FormatHandler&lt;/code&gt; はファイル記述子を最初のパラメーターとして &lt;code&gt;Out&lt;/code&gt; に取得します。</target>
        </trans-unit>
        <trans-unit id="fad332308463a8263339bd3390b05cbefc19f3b2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;OutstandingSuspendCount =/= 0&lt;/code&gt;, option &lt;code&gt;asynchronous&lt;/code&gt; of &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; has been used and the suspendee has not yet been suspended by &lt;code&gt;Pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;OutstandingSuspendCount =/= 0&lt;/code&gt; 場合、 &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; の &lt;code&gt;asynchronous&lt;/code&gt; オプションが使用され、suspendeeは &lt;code&gt;Pid&lt;/code&gt; によってまだ中断されていません。</target>
        </trans-unit>
        <trans-unit id="3bbfc8cfc7a6d48dbab3e59b020a0ba36f02f8cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Path&lt;/code&gt; is a directory, &lt;code&gt;default_index/2&lt;/code&gt;, it starts searching for resources or files that are specified in the config directive &lt;code&gt;DirectoryIndex&lt;/code&gt;. If an appropriate resource or file is found, it is appended to the end of &lt;code&gt;Path&lt;/code&gt; and then returned. &lt;code&gt;Path&lt;/code&gt; is returned unaltered if no appropriate file is found or if &lt;code&gt;Path&lt;/code&gt; is not a directory. &lt;code&gt;config_db()&lt;/code&gt; is the server config file in ETS table format as described in &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Path&lt;/code&gt; ディレクトリである、 &lt;code&gt;default_index/2&lt;/code&gt; は、それが設定ディレクティブで指定されたリソースやファイルの検索を開始 &lt;code&gt;DirectoryIndex&lt;/code&gt; 。適切なリソースまたはファイルが見つかると、 &lt;code&gt;Path&lt;/code&gt; の最後に追加されて返されます。 &lt;code&gt;Path&lt;/code&gt; 何の適切なファイルが見つからない場合は変更されず返される場合、または &lt;code&gt;Path&lt;/code&gt; ディレクトリではありません。 &lt;code&gt;config_db()&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;http_server&quot;&gt;Inets User's Guide&lt;/a&gt;&lt;/code&gt; 説明されているETSテーブル形式のサーバー構成ファイルです。</target>
        </trans-unit>
        <trans-unit id="beefd85af55dff03d967de6fd4d575f5153ffe35" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pattern1&lt;/code&gt; and &lt;code&gt;Pattern2&lt;/code&gt; are valid patterns, the following is also a valid pattern:</source>
          <target state="translated">場合は &lt;code&gt;Pattern1&lt;/code&gt; と &lt;code&gt;Pattern2&lt;/code&gt; 有効なパターンであり、次のようにも有効なパターンです。</target>
        </trans-unit>
        <trans-unit id="92bd28fe3699fc72ccf1ee88565e6cbd3a896278" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pattern&lt;/code&gt; is not a binary or a flat proper list of binaries with length &amp;gt; 0, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; がバイナリまたは長さが0 &lt;code&gt;badarg&lt;/code&gt; バイナリのフラットな適切なリストでない場合、badarg例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e7fc7f98492ea4c007c2957660a86f1f0df53bcd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid2&lt;/code&gt; does not exist, the 'DOWN' message is sent immediately with &lt;code&gt;Reason&lt;/code&gt; set to &lt;code&gt;noproc&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Pid2&lt;/code&gt; 存在しない場合、「DOWN」というメッセージが直ちに送信される &lt;code&gt;Reason&lt;/code&gt; にセット &lt;code&gt;noproc&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b4791446d4ac7a4577450d1706f57f608bc60d37" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid2&lt;/code&gt; terminates with exit reason &lt;code&gt;Reason&lt;/code&gt;, a 'DOWN' message is sent to &lt;code&gt;Pid1&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Pid2&lt;/code&gt; が終了理由 &lt;code&gt;Reason&lt;/code&gt; で終了した場合、「DOWN」メッセージが &lt;code&gt;Pid1&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="c802432eb292a24b574add89af76bf12c415ea21" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; equals &lt;code&gt;self()&lt;/code&gt;, and no &lt;code&gt;async&lt;/code&gt; option has been passed, the garbage collection is performed at once, that is, the same as calling &lt;code&gt;&lt;a href=&quot;#garbage_collect-0&quot;&gt; garbage_collect/0&lt;/a&gt;&lt;/code&gt;. Otherwise a request for garbage collection is sent to the process identified by &lt;code&gt;Pid&lt;/code&gt;, and will be handled when appropriate. If no &lt;code&gt;async&lt;/code&gt; option has been passed, the caller blocks until &lt;code&gt;GCResult&lt;/code&gt; is available and can be returned.</source>
          <target state="translated">場合 &lt;code&gt;Pid&lt;/code&gt; 等しい &lt;code&gt;self()&lt;/code&gt; 、と何の &lt;code&gt;async&lt;/code&gt; オプションが渡されていないガベージコレクションを一度に実行され、それは、呼び出し元と同じである &lt;code&gt;&lt;a href=&quot;#garbage_collect-0&quot;&gt; garbage_collect/0&lt;/a&gt;&lt;/code&gt; を。それ以外の場合、ガベージコレクションの要求は、 &lt;code&gt;Pid&lt;/code&gt; で識別されるプロセスに送信され、必要に応じて処理されます。 &lt;code&gt;async&lt;/code&gt; オプションが渡されていない場合、呼び出し元は &lt;code&gt;GCResult&lt;/code&gt; が使用可能になり、返されるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="0d4ad4270f00a30d3a004edfbf6bb0907bb89e24" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; equals &lt;code&gt;self()&lt;/code&gt;, and no &lt;code&gt;async&lt;/code&gt; option has been passed, the garbage collection is performed at once, that is, the same as calling &lt;code&gt;&lt;a href=&quot;#garbage_collect-0&quot;&gt;garbage_collect/0&lt;/a&gt;&lt;/code&gt;. Otherwise a request for garbage collection is sent to the process identified by &lt;code&gt;Pid&lt;/code&gt;, and will be handled when appropriate. If no &lt;code&gt;async&lt;/code&gt; option has been passed, the caller blocks until &lt;code&gt;GCResult&lt;/code&gt; is available and can be returned.</source>
          <target state="translated">場合 &lt;code&gt;Pid&lt;/code&gt; 等しい &lt;code&gt;self()&lt;/code&gt; 、と何の &lt;code&gt;async&lt;/code&gt; オプションが渡されていないガベージコレクションを一度に実行され、それは、呼び出し元と同じである &lt;code&gt;&lt;a href=&quot;#garbage_collect-0&quot;&gt;garbage_collect/0&lt;/a&gt;&lt;/code&gt; を。それ以外の場合は、ガベージコレクションの要求が &lt;code&gt;Pid&lt;/code&gt; で識別されるプロセスに送信され、適切なときに処理されます。 &lt;code&gt;async&lt;/code&gt; オプションが渡されていない場合、呼び出し元は &lt;code&gt;GCResult&lt;/code&gt; が使用可能になり、返されるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="e39d7c1dcb4424a9d8e01705e3e21bd11e62c069" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; equals &lt;code&gt;self()&lt;/code&gt;, and no &lt;code&gt;async&lt;/code&gt; option has been passed, the operation is performed at once. Otherwise a request for the operation is sent to the process identified by &lt;code&gt;Pid&lt;/code&gt;, and is handled when appropriate. If no &lt;code&gt;async&lt;/code&gt; option has been passed, the caller blocks until &lt;code&gt;CheckResult&lt;/code&gt; is available and can be returned.</source>
          <target state="translated">もし &lt;code&gt;Pid&lt;/code&gt; 等しい &lt;code&gt;self()&lt;/code&gt; 、と何の &lt;code&gt;async&lt;/code&gt; オプションが渡されていない、操作を一度に実行されます。それ以外の場合、操作の要求は &lt;code&gt;Pid&lt;/code&gt; で識別されるプロセスに送信され、適切なときに処理されます。 &lt;code&gt;async&lt;/code&gt; オプションが渡されていない場合、呼び出し元は &lt;code&gt;CheckResult&lt;/code&gt; が使用可能になり、返されるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="9a5e58475adf385dca728b097c7c732d60714c40" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; is an I/O device, that is, a pid returned from &lt;code&gt;open/2&lt;/code&gt;, this function returns the filename, or rather:</source>
          <target state="translated">場合 &lt;code&gt;Pid&lt;/code&gt; 、から返されたPIDであるI / Oデバイス、ある &lt;code&gt;open/2&lt;/code&gt; 、この関数はファイル名を返す、というか：</target>
        </trans-unit>
        <trans-unit id="2c88872158412481d4632dbb6c4d0828fafd3ef7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; is not a local process.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; がローカルプロセスでない場合。</target>
        </trans-unit>
        <trans-unit id="0c4258af24e0c809dc0bd9d32eeea697ff1e2cb3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; is not a node local process identifier.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; がノードのローカルプロセス識別子でない場合。</target>
        </trans-unit>
        <trans-unit id="a85548fa2767eaff370c38aaf90f8964627aa367" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; is not trapping exits, &lt;code&gt;Pid&lt;/code&gt; itself exits with exit reason &lt;code&gt;Reason&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; が終了をトラップしていない場合、 &lt;code&gt;Pid&lt;/code&gt; 自体が終了理由 &lt;code&gt;Reason&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="981b0f8c411a07f7ef682ac79981f9ce74ca69e0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Pid&lt;/code&gt; is trapping exits, the exit signal is transformed into a message &lt;code&gt;{'EXIT', From, Reason}&lt;/code&gt; and delivered to the message queue of &lt;code&gt;Pid&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Pid&lt;/code&gt; 終了トラップされ、終了信号は、メッセージに変換される &lt;code&gt;{'EXIT', From, Reason}&lt;/code&gt; とのメッセージキューに配信 &lt;code&gt;Pid&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="946409162988d6dc1aff5bb11d67c23349fa4844" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PidOrPort&lt;/code&gt; does not exist and checking it is cheap, a &lt;code&gt;noproc&lt;/code&gt; error is raised. Currently, checking is cheap if the &lt;code&gt;PidOrPort&lt;/code&gt; is local and the caller does not trap exits (see &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2 &lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;PidOrPort&lt;/code&gt; が存在しないと確認することは安いです、 &lt;code&gt;noproc&lt;/code&gt; のエラーが発生します。現在、 &lt;code&gt;PidOrPort&lt;/code&gt; がローカルであり、呼び出し元が出口をトラップしない場合、チェックは安価です（ &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2 &lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="e139aa51e35a6da6edcc143ed04c057990132602" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PidOrPort&lt;/code&gt; does not exist, the behavior of the BIF depends on if the calling process is trapping exits or not (see &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">場合 &lt;code&gt;PidOrPort&lt;/code&gt; が存在しない場合、BIFの動作は呼び出し元プロセスが（参照終了をトラップされているかどうかに依存し &lt;code&gt;&lt;a href=&quot;#process_flag-2&quot;&gt;process_flag/2&lt;/a&gt;&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="266b9e9cd253c4e1b334cac8528b2a62708531c6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PidOrPort&lt;/code&gt; is not an existing local process or port.</source>
          <target state="translated">&lt;code&gt;PidOrPort&lt;/code&gt; が既存のローカルプロセスまたはポートではない場合。</target>
        </trans-unit>
        <trans-unit id="ea3c1727e46c2f29d355231a14b993fe9ee7f045" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Port == 0&lt;/code&gt;, the underlying OS assigns a free UDP port, use &lt;code&gt;&lt;a href=&quot;inet#port-1&quot;&gt;inet:port/1&lt;/a&gt;&lt;/code&gt; to retrieve it.</source>
          <target state="translated">もし &lt;code&gt;Port == 0&lt;/code&gt; 、基礎となるOSは、無料のUDPポート、使用の割り当て、 &lt;code&gt;&lt;a href=&quot;inet#port-1&quot;&gt;inet:port/1&lt;/a&gt;&lt;/code&gt; それを取得すること。</target>
        </trans-unit>
        <trans-unit id="d7fa31d4ca670522aa140145b3a60537cc2e5b54" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Port == 0&lt;/code&gt;, the underlying OS assigns an available port number, use &lt;code&gt;&lt;a href=&quot;inet#port-1&quot;&gt;inet:port/1&lt;/a&gt;&lt;/code&gt; to retrieve it.</source>
          <target state="translated">もし &lt;code&gt;Port == 0&lt;/code&gt; 、基礎となるOSは、使用可能なポート番号、使用の割り当て、 &lt;code&gt;&lt;a href=&quot;inet#port-1&quot;&gt;inet:port/1&lt;/a&gt;&lt;/code&gt; それを取得すること。</target>
        </trans-unit>
        <trans-unit id="fb219559d25b9731f030a5d6d757dbdd7db890b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Port&lt;/code&gt; is not an identifier of an open port, or the registered name of an open port. If the calling process was previously linked to the closed port, identified by &lt;code&gt;Port&lt;/code&gt;, the exit signal from the port is guaranteed to be delivered before this &lt;code&gt;badarg&lt;/code&gt; exception occurs.</source>
          <target state="translated">&lt;code&gt;Port&lt;/code&gt; が開いているポートの識別子または開いているポートの登録名でない場合。呼び出しプロセスが以前に &lt;code&gt;Port&lt;/code&gt; で識別された閉じたポートにリンクされていた場合、この &lt;code&gt;badarg&lt;/code&gt; 例外が発生する前に、ポートからの終了信号が確実に配信されます。</target>
        </trans-unit>
        <trans-unit id="0702a363d6583ab49124103adeca84fa54bd565c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Port&lt;/code&gt; is not an open port or the registered name of an open port.</source>
          <target state="translated">&lt;code&gt;Port&lt;/code&gt; が開いているポートまたは開いているポートの登録名でない場合。</target>
        </trans-unit>
        <trans-unit id="ad97fac62d783a4932985f8dd89585d539b9ba38" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;PosLen&lt;/code&gt; in any way references outside the binary, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;PosLen&lt;/code&gt; が何らかの方法でバイナリの外部を参照している場合、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="5fa9284a8e57969389fe13ab25086a491ce7496c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Prefix&lt;/code&gt; is the prefix of &lt;code&gt;String&lt;/code&gt;, removes it and returns the remainder of &lt;code&gt;String&lt;/code&gt;, otherwise returns &lt;code&gt;nomatch&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Prefix&lt;/code&gt; が &lt;code&gt;String&lt;/code&gt; のプレフィックスである場合、それを削除して、残りの &lt;code&gt;String&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;nomatch&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="f4e6b8924461855959440e4adc224de1af86a752" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;QH2&lt;/code&gt; is a call to the function for &lt;code&gt;&lt;a href=&quot;gb_trees&quot;&gt;gb_trees&lt;/a&gt;&lt;/code&gt;, as defined in section &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt;, then &lt;code&gt;gb_table:table/1&lt;/code&gt;, the iterator for the gb-tree is initiated for each answer to &lt;code&gt;QH1&lt;/code&gt;. The objects of the gb-tree are then returned one by one. This is probably the most efficient way of traversing the table in that case, as it takes minimal computational power to get the following object. But if &lt;code&gt;QH2&lt;/code&gt; is not a table but a more complicated QLC, it can be more efficient to use some RAM memory for collecting the answers in a cache, particularly if there are only a few answers. It must then be assumed that evaluating &lt;code&gt;QH2&lt;/code&gt; has no side effects so that the meaning of the query does not change if &lt;code&gt;QH2&lt;/code&gt; is evaluated only once. One way of caching the answers is to evaluate &lt;code&gt;QH2&lt;/code&gt; first of all and substitute the list of answers for &lt;code&gt;QH2&lt;/code&gt; in the query. Another way is to use option &lt;code&gt;cache&lt;/code&gt;. It is expressed like this:</source>
          <target state="translated">場合 &lt;code&gt;QH2&lt;/code&gt; が機能への呼び出しである &lt;code&gt;&lt;a href=&quot;gb_trees&quot;&gt;gb_trees&lt;/a&gt;&lt;/code&gt; セクションで定義されるように、 &lt;code&gt;&lt;a href=&quot;#implementing_a_qlc_table&quot;&gt;Implementing a QLC Table&lt;/a&gt;&lt;/code&gt; は、 &lt;code&gt;gb_table:table/1&lt;/code&gt; 、GB-ツリーのイテレータは、各回答のために開始される &lt;code&gt;QH1&lt;/code&gt; 。次に、GBツリーのオブジェクトが1つずつ返されます。これは、次のオブジェクトを取得するために最小限の計算能力しか必要としないため、その場合、おそらくテーブルをトラバースする最も効率的な方法です。ただし、 &lt;code&gt;QH2&lt;/code&gt; がテーブルではなく、より複雑なQLCである場合、特にいくつかの回答しかない場合は、RAMメモリを使用して回答をキャッシュに収集する方が効率的です。次に、 &lt;code&gt;QH2&lt;/code&gt; の評価が &lt;code&gt;QH2&lt;/code&gt; が1回だけ評価されてもクエリの意味が変化しないように、副作用はありません。回答をキャッシュする1つの方法は、最初に &lt;code&gt;QH2&lt;/code&gt; を評価し、クエリの &lt;code&gt;QH2&lt;/code&gt; を回答のリストに置き換えることです。別の方法は、オプション &lt;code&gt;cache&lt;/code&gt; を使用することです。これは次のように表現されます：</target>
        </trans-unit>
        <trans-unit id="491d904b6ae249fbebb7daf8bc786e22605cc650" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Reason&lt;/code&gt; is the atom &lt;code&gt;kill&lt;/code&gt;, that is, if &lt;code&gt;exit(Pid, kill)&lt;/code&gt; is called, an untrappable exit signal is sent to &lt;code&gt;Pid&lt;/code&gt;, which unconditionally exits with exit reason &lt;code&gt;killed&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Reason&lt;/code&gt; がアトム &lt;code&gt;kill&lt;/code&gt; の場合、つまり、 &lt;code&gt;exit(Pid, kill)&lt;/code&gt; が呼び出された場合、トラップ不可能な終了信号が &lt;code&gt;Pid&lt;/code&gt; に送信され、終了理由 &lt;code&gt;killed&lt;/code&gt; で無条件に終了します。</target>
        </trans-unit>
        <trans-unit id="35fbbe7923611fc3677c5eb123690517ee7e8658" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Reason&lt;/code&gt; is the atom &lt;code&gt;normal&lt;/code&gt;, &lt;code&gt;Pid&lt;/code&gt; does not exit. If it is trapping exits, the exit signal is transformed into a message &lt;code&gt;{'EXIT', From, normal}&lt;/code&gt; and delivered to its message queue.</source>
          <target state="translated">場合は &lt;code&gt;Reason&lt;/code&gt; 原子であり &lt;code&gt;normal&lt;/code&gt; 、 &lt;code&gt;Pid&lt;/code&gt; 終了しません。出口をトラップしている場合、出口信号はメッセージ &lt;code&gt;{'EXIT', From, normal}&lt;/code&gt; 変換され、そのメッセージキューに配信されます。</target>
        </trans-unit>
        <trans-unit id="cd196dac154540858e61e812e21e07f3f0b754dd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Receiver&lt;/code&gt; has the value &lt;code&gt;{Tag, Recv}&lt;/code&gt;, the delivery is done according to &lt;code&gt;Recv&lt;/code&gt;:</source>
          <target state="translated">場合 &lt;code&gt;Receiver&lt;/code&gt; が値を有する &lt;code&gt;{Tag, Recv}&lt;/code&gt; 、送達はに従って行われる &lt;code&gt;Recv&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="868986f0a85c44f9afa64f0b61bdc67eb57beed0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Receiver&lt;/code&gt; is a &lt;code&gt;notification_delivery_info()&lt;/code&gt; record, then the information about the notification delivery will be delivered to the &lt;code&gt;receiver&lt;/code&gt; via the callback functions defined by the &lt;code&gt;&lt;a href=&quot;snmpa_notification_delivery_info_receiver&quot;&gt;snmpa_notification_delivery_info_receiver&lt;/a&gt;&lt;/code&gt; behaviour according to the content of the &lt;code&gt;notification_delivery_info()&lt;/code&gt; record.</source>
          <target state="translated">場合 &lt;code&gt;Receiver&lt;/code&gt; がある &lt;code&gt;notification_delivery_info()&lt;/code&gt; レコードは、通知の配信に関する情報はに配信される &lt;code&gt;receiver&lt;/code&gt; により定義されるコールバック関数を介して &lt;code&gt;&lt;a href=&quot;snmpa_notification_delivery_info_receiver&quot;&gt;snmpa_notification_delivery_info_receiver&lt;/a&gt;&lt;/code&gt; 用の内容に従って行動 &lt;code&gt;notification_delivery_info()&lt;/code&gt; レコード。</target>
        </trans-unit>
        <trans-unit id="508d6986d5eeb87f61b9a5f9d5b4f17fa77bcfb6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;RegName&lt;/code&gt; is already in use.</source>
          <target state="translated">場合は &lt;code&gt;RegName&lt;/code&gt; すでに使用されています。</target>
        </trans-unit>
        <trans-unit id="ae95dfac53a373131ac9010b1c1e1134c4182f90" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;RegName&lt;/code&gt; is the atom &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;RegName&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; のアトムの場合。</target>
        </trans-unit>
        <trans-unit id="f0f5e564e5fd5ab3c1d7b8ad071d580aac2f45e9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Repair&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, the current log file is repaired, if needed. As the restoration is initiated, a message is output on the error log. If &lt;code&gt;false&lt;/code&gt; is specified, no automatic repair is attempted. Instead, the tuple &lt;code&gt;{error, {need_repair, Log}}&lt;/code&gt; is returned if an attempt is made to open a corrupt log file. If &lt;code&gt;truncate&lt;/code&gt; is specified, the log file becomes truncated, creating an empty log. Defaults to &lt;code&gt;true&lt;/code&gt;, which has no effect on logs opened in read-only mode.</source>
          <target state="translated">場合は &lt;code&gt;Repair&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 必要であれば、現在のログファイルには、修復されます。復元が開始されると、エラーログにメッセージが出力されます。場合 &lt;code&gt;false&lt;/code&gt; 指定すると、自動的な修理が行われません。代わりに、破損したログファイルを開こうとすると &lt;code&gt;{error, {need_repair, Log}}&lt;/code&gt; というタプルが返されます。場合 &lt;code&gt;truncate&lt;/code&gt; 指定され、ログファイルが空のログを作成し、切り捨てとなります。デフォルトは &lt;code&gt;true&lt;/code&gt; で、読み取り専用モードで開いたログには影響しません。</target>
        </trans-unit>
        <trans-unit id="fba0a2d131df8af1eeb91211c8b8a8dde41e75fd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Report&lt;/code&gt; is a map, it is converted to a key-value list before formatting as such.</source>
          <target state="translated">&lt;code&gt;Report&lt;/code&gt; がマップの場合、フォーマットする前にKey-Valueリストに変換されます。</target>
        </trans-unit>
        <trans-unit id="15d8d66582408c3486d2e25500d0a72b68b8cb9f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ReqId&lt;/code&gt; is less then 0, it means that this information was not available to the manager (that info was never retrieved before the message was discarded).</source>
          <target state="translated">&lt;code&gt;ReqId&lt;/code&gt; が0未満の場合、これはマネージャがこの情報を利用できなかったことを意味します（その情報はメッセージが破棄される前に取得されたことはありません）。</target>
        </trans-unit>
        <trans-unit id="0dee047b2dfd5610136ab93118e486cde7422df3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Result&lt;/code&gt; &amp;gt; 0, the packet only consists of &lt;code&gt;[119, Result]&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Result&lt;/code&gt; &amp;gt; 0は、パケットのみで構成され &lt;code&gt;[119, Result]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c802495174a415d0a94a21a32d111d68231fb125" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, a timer corresponding to &lt;code&gt;TimerRef&lt;/code&gt; could not be found. This because the timer had expired, or been canceled, or because &lt;code&gt;TimerRef&lt;/code&gt; never has corresponded to a timer. Even if the timer has expired, it does not tell you whether or not the time-out message has arrived at its destination yet.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;TimerRef&lt;/code&gt; に対応するタイマーが見つかりませんでした。これは、タイマーが期限切れになったか、キャンセルされたか、 &lt;code&gt;TimerRef&lt;/code&gt; がタイマーに対応したことがないためです。タイマーが切れても、タイムアウトメッセージが宛先にまだ到着しているかどうかは通知されません。</target>
        </trans-unit>
        <trans-unit id="c0a8cfe624c240dfdb507f48e9d219914e2f948e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Result&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, a timer corresponding to &lt;code&gt;TimerRef&lt;/code&gt; could not be found. This can be either because the timer had expired, already had been canceled, or because &lt;code&gt;TimerRef&lt;/code&gt; never corresponded to a timer. Even if the timer had expired, it does not tell you if the time-out message has arrived at its destination yet.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;TimerRef&lt;/code&gt; に対応するタイマーが見つかりませんでした。これは、タイマーが期限切れになっているか、すでにキャンセルされていたか、 &lt;code&gt;TimerRef&lt;/code&gt; がタイマーに対応していなかったことが原因である可能性があります。タイマーの期限が切れていても、タイムアウトメッセージが宛先にまだ到着しているかどうかは通知されません。</target>
        </trans-unit>
        <trans-unit id="bd4390894559b806475261afd409260099fb0615" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Result&lt;/code&gt; is an integer, it represents the time in milliseconds left until the canceled timer would have expired.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; が整数の場合、キャンセルされたタイマーが期限切れになるまでの残り時間をミリ秒単位で表します。</target>
        </trans-unit>
        <trans-unit id="8b2e483082bcb6a7c95be17d5564ab01e1806263" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Result&lt;/code&gt; is an integer, it represents the time in milliseconds left until the timer expires.</source>
          <target state="translated">&lt;code&gt;Result&lt;/code&gt; が整数の場合、タイマーが期限切れになるまでの残り時間をミリ秒単位で表します。</target>
        </trans-unit>
        <trans-unit id="996c07f00aef0bf25f1adad8d4b5c2f0b7da6aa8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Rules&lt;/code&gt; is left out or is an empty list, the default system rules are used. See also the Kernel application parameter &lt;code&gt;source_search_rules&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;Rules&lt;/code&gt; 出て左または空のリストですが、デフォルトのシステムのルールが使用されています。カーネルアプリケーションパラメータ &lt;code&gt;source_search_rules&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="914c10ab17b1be80fb703c7a051a9650d90020cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Schedulers&lt;/code&gt; or &lt;code&gt;SchedulersOnline&lt;/code&gt; is specified as a negative number, the value is subtracted from the default number of logical processors configured or logical processors available, respectively.</source>
          <target state="translated">場合 &lt;code&gt;Schedulers&lt;/code&gt; または &lt;code&gt;SchedulersOnline&lt;/code&gt; が負の数として指定され、値は、それぞれ、利用可能な構成の論理プロセッサまたは論理プロセッサのデフォルト数から減算されます。</target>
        </trans-unit>
        <trans-unit id="1d347e571bfea9b8b89077684381b3f15fcd946f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Scope&lt;/code&gt; of the operation is &lt;code&gt;local&lt;/code&gt;, the fallback is only installed on the local node.</source>
          <target state="translated">場合は &lt;code&gt;Scope&lt;/code&gt; の動作は &lt;code&gt;local&lt;/code&gt; 、フォールバックは、ローカル・ノードのみにインストールされています。</target>
        </trans-unit>
        <trans-unit id="998a85ab406edc34895d37ac87304bcc5cc05937" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Server&lt;/code&gt; is &lt;code&gt;self()&lt;/code&gt; an anonymous server is created just as when using &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link]/3&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Server&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; a named server is created just as when using &lt;code&gt;&lt;a href=&quot;#start_link-4&quot;&gt;start[_link]/4&lt;/a&gt;&lt;/code&gt;. However, the &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; name must have been registered accordingly &lt;strong&gt;before&lt;/strong&gt; this function is called.</source>
          <target state="translated">場合 &lt;code&gt;Server&lt;/code&gt; がある &lt;code&gt;self()&lt;/code&gt; 匿名サーバーは、単に使用している場合として作成された &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link]/3&lt;/a&gt;&lt;/code&gt; 。場合 &lt;code&gt;Server&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; という名前のサーバーは、単に使用している場合として作成された &lt;code&gt;&lt;a href=&quot;#start_link-4&quot;&gt;start[_link]/4&lt;/a&gt;&lt;/code&gt; 。ただし、この関数を呼び出す&lt;strong&gt;前&lt;/strong&gt;に、 &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; の名前を登録しておく必要があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="1c6410f6c768335757d34c90fcb80d9e00d2828e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Server&lt;/code&gt; is &lt;code&gt;self()&lt;/code&gt; an anonymous server is created just as when using &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link|_monitor]/3&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;Server&lt;/code&gt; is a &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; a named server is created just as when using &lt;code&gt;&lt;a href=&quot;#start_link-4&quot;&gt;start[_link|_monitor]/4&lt;/a&gt;&lt;/code&gt;. However, the &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; name must have been registered accordingly &lt;strong&gt;before&lt;/strong&gt; this function is called.</source>
          <target state="translated">場合 &lt;code&gt;Server&lt;/code&gt; がある &lt;code&gt;self()&lt;/code&gt; 匿名サーバーは、単に使用している場合として作成された &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start[_link|_monitor]/3&lt;/a&gt;&lt;/code&gt; 。場合 &lt;code&gt;Server&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; という名前のサーバーは、単に使用している場合として作成された &lt;code&gt;&lt;a href=&quot;#start_link-4&quot;&gt;start[_link|_monitor]/4&lt;/a&gt;&lt;/code&gt; 。ただし、この関数を呼び出す&lt;strong&gt;前&lt;/strong&gt;に、 &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; 名を適宜登録しておく必要があります。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="e26e129826cd4fdc57a94f1e90b9b33f3e22dc0a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ServerName={global,GlobalName}&lt;/code&gt;, the &lt;code&gt;gen_server&lt;/code&gt; process id registered globally as &lt;code&gt;GlobalName&lt;/code&gt; using &lt;code&gt; global:register_name/2&lt;/code&gt; If no name is provided, the &lt;code&gt;gen_server&lt;/code&gt; process is not registered.</source>
          <target state="translated">場合 &lt;code&gt;ServerName={global,GlobalName}&lt;/code&gt; 、 &lt;code&gt;gen_server&lt;/code&gt; のプロセスIDとしてグローバルに登録 &lt;code&gt;GlobalName&lt;/code&gt; 使用 &lt;code&gt; global:register_name/2&lt;/code&gt; 何名が提供されない場合に、 &lt;code&gt;gen_server&lt;/code&gt; の処理が登録されていません。</target>
        </trans-unit>
        <trans-unit id="49ccf350dd38e4a46c92e05cf1457282aa2a2b57" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ServerName={global,GlobalName}&lt;/code&gt;, the &lt;code&gt;gen_server&lt;/code&gt; process id registered globally as &lt;code&gt;GlobalName&lt;/code&gt; using &lt;code&gt;global:register_name/2&lt;/code&gt; If no name is provided, the &lt;code&gt;gen_server&lt;/code&gt; process is not registered.</source>
          <target state="translated">場合 &lt;code&gt;ServerName={global,GlobalName}&lt;/code&gt; 、 &lt;code&gt;gen_server&lt;/code&gt; のプロセスIDとしてグローバルに登録 &lt;code&gt;GlobalName&lt;/code&gt; 使用 &lt;code&gt;global:register_name/2&lt;/code&gt; 何名が提供されない場合に、 &lt;code&gt;gen_server&lt;/code&gt; の処理が登録されていません。</target>
        </trans-unit>
        <trans-unit id="c99d7d2ec0751d55a79f6c64ef86b68f3b33366c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ServerName={local,Name}&lt;/code&gt;, the &lt;code&gt;gen_server&lt;/code&gt; process is registered locally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt;register/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;ServerName={local,Name}&lt;/code&gt; 、 &lt;code&gt;gen_server&lt;/code&gt; のプロセスは、局所的に登録されている &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt;register/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4471e49d4ac17a2da6d90db02e958498fd4eca78" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ServerName={via,Module,ViaName}&lt;/code&gt;, the &lt;code&gt;gen_server&lt;/code&gt; process registers with the registry represented by &lt;code&gt;Module&lt;/code&gt;. The &lt;code&gt;Module&lt;/code&gt; callback is to export the functions &lt;code&gt;register_name/2&lt;/code&gt;, &lt;code&gt;unregister_name/1&lt;/code&gt;, &lt;code&gt;whereis_name/1&lt;/code&gt;, and &lt;code&gt;send/2&lt;/code&gt;, which are to behave like the corresponding functions in &lt;code&gt;global&lt;/code&gt;. Thus, &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; is a valid reference.</source>
          <target state="translated">もし &lt;code&gt;ServerName={via,Module,ViaName}&lt;/code&gt; 、 &lt;code&gt;gen_server&lt;/code&gt; に表されるレジストリとプロセスレジスタ &lt;code&gt;Module&lt;/code&gt; 。 &lt;code&gt;Module&lt;/code&gt; コールバック関数がエクスポートする &lt;code&gt;register_name/2&lt;/code&gt; 、 &lt;code&gt;unregister_name/1&lt;/code&gt; 、 &lt;code&gt;whereis_name/1&lt;/code&gt; 、及び &lt;code&gt;send/2&lt;/code&gt; に対応する機能のように動作するようにしている、 &lt;code&gt;global&lt;/code&gt; 。したがって、 &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; は有効な参照です。</target>
        </trans-unit>
        <trans-unit id="1a7d3d4777e0d9530a017faf5e5e71aeba400cf2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Server_or_Actions&lt;/code&gt; is a &lt;code&gt;list()&lt;/code&gt;, the same as &lt;code&gt;&lt;a href=&quot;#enter_loop-6&quot;&gt;enter_loop/6&lt;/a&gt;&lt;/code&gt; except that no &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; must have been registered and &lt;code&gt;Actions = Server_or_Actions&lt;/code&gt;. This creates an anonymous server.</source>
          <target state="translated">場合 &lt;code&gt;Server_or_Actions&lt;/code&gt; は、ある &lt;code&gt;list()&lt;/code&gt; 、同じ &lt;code&gt;&lt;a href=&quot;#enter_loop-6&quot;&gt;enter_loop/6&lt;/a&gt;&lt;/code&gt; 何のことを除いて &lt;code&gt;&lt;a href=&quot;#type-server_name&quot;&gt;server_name()&lt;/a&gt;&lt;/code&gt; 登録されていないとされている必要があります &lt;code&gt;Actions = Server_or_Actions&lt;/code&gt; 。これにより、匿名サーバーが作成されます。</target>
        </trans-unit>
        <trans-unit id="0cc5ba33de3003e688f8911d6e6894d616033d12" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SetFun&lt;/code&gt; is a number i &amp;gt;= 1 and &lt;code&gt;Set1&lt;/code&gt; is a relation, then the returned set is the &lt;code&gt;&lt;a href=&quot;#projection&quot;&gt;projection&lt;/a&gt;&lt;/code&gt; of &lt;code&gt;Set1&lt;/code&gt; onto coordinate i.</source>
          <target state="translated">場合 &lt;code&gt;SetFun&lt;/code&gt; は、番号I&amp;gt; = 1であり、 &lt;code&gt;Set1&lt;/code&gt; 、関係ある戻さ集合である &lt;code&gt;&lt;a href=&quot;#projection&quot;&gt;projection&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;Set1&lt;/code&gt; I座標上。</target>
        </trans-unit>
        <trans-unit id="fa9d9044e1d8e367fe63682c042ce5ba7e21718e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Socket&lt;/code&gt; is a ordinary &lt;code&gt;socket()&lt;/code&gt;: upgrades a &lt;code&gt;gen_tcp&lt;/code&gt;, or equivalent, socket to an SSL socket, that is, performs the SSL/TLS server-side handshake and returns a TLS socket.</source>
          <target state="translated">もし &lt;code&gt;Socket&lt;/code&gt; 普通である &lt;code&gt;socket()&lt;/code&gt; ：アップグレード &lt;code&gt;gen_tcp&lt;/code&gt; を、または同等の、実行するSSL / TLSサーバ側のハンドシェイクであり、TLSソケットを返すSSLソケットのソケット。</target>
        </trans-unit>
        <trans-unit id="3a8532805c883f6bbdef2dbf1ab5fafde57ede65" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Socket&lt;/code&gt; is a ordinary &lt;code&gt;socket()&lt;/code&gt;: upgrades a &lt;code&gt;gen_tcp&lt;/code&gt;, or equivalent, socket to an SSL socket, that is, performs the TLS server-side handshake and returns a TLS socket.</source>
          <target state="translated">場合 &lt;code&gt;Socket&lt;/code&gt; 一般である &lt;code&gt;socket()&lt;/code&gt; ：アップグレード &lt;code&gt;gen_tcp&lt;/code&gt; を、または同等の、SSLソケットのソケット、すなわち、TLSサーバ側のハンドシェイクを実行し、TLSソケットを返します。</target>
        </trans-unit>
        <trans-unit id="f51cfa021b587914b8d535a367aab8a9c4e3a8b9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Socket&lt;/code&gt; is an &lt;code&gt;&lt;a href=&quot;#type-sslsocket&quot;&gt; sslsocket() &lt;/a&gt;&lt;/code&gt;: provides extra TLS/DTLS options to those specified in &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; and then performs the TLS/DTLS handshake. Returns a new TLS/DTLS socket if the handshake is successful.</source>
          <target state="translated">場合 &lt;code&gt;Socket&lt;/code&gt; ある &lt;code&gt;&lt;a href=&quot;#type-sslsocket&quot;&gt; sslsocket() &lt;/a&gt;&lt;/code&gt; ：余分TLSを提供する/に指定されたものとオプションがDTLS &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; 、次いで、TLS / DTLSハンドシェイクを行います。ハンドシェイクが成功した場合、新しいTLS / DTLSソケットを返します。</target>
        </trans-unit>
        <trans-unit id="da7fd7fd2a8598b74434eb489d432414fe4daa4b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Socket&lt;/code&gt; is an &lt;code&gt;sslsocket()&lt;/code&gt;: provides extra SSL/TLS/DTLS options to those specified in &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; and then performs the SSL/TLS/DTLS handshake. Returns a new TLS/DTLS socket if the handshake is successful.</source>
          <target state="translated">場合 &lt;code&gt;Socket&lt;/code&gt; ある &lt;code&gt;sslsocket()&lt;/code&gt; ：で指定されたものに余分なSSL / TLS / DTLSオプションを提供する &lt;code&gt;&lt;a href=&quot;#listen-2&quot;&gt;listen/2&lt;/a&gt;&lt;/code&gt; 、次いで、SSL / TLS / DTLSハンドシェイクを行います。ハンドシェイクが成功した場合、新しいTLS / DTLSソケットを返します。</target>
        </trans-unit>
        <trans-unit id="4841c9f7a71e862586a5146811fbbbda9e0a5d0e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Source&lt;/code&gt; refers to a filename, it is opened with &lt;code&gt;read&lt;/code&gt; mode prepended to the mode list before the copy, and closed when done.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; がファイル名を参照する場合、コピーの前にモードリストの前に &lt;code&gt;read&lt;/code&gt; モードを付加して開き、コピーが完了すると閉じます。</target>
        </trans-unit>
        <trans-unit id="b32d5c9aabdee11f000c96e5dc5cd00d32eea8d1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SpecsIn=[Spec1,Spec2,...]&lt;/code&gt;, separate tests will be created per specification. If &lt;code&gt;SpecsIn=[[Spec1,Spec2,...]]&lt;/code&gt;, all specifications will be merge into one test.</source>
          <target state="translated">場合 &lt;code&gt;SpecsIn=[Spec1,Spec2,...]&lt;/code&gt; 、別のテストでは、仕様ごとに作成されます。場合 &lt;code&gt;SpecsIn=[[Spec1,Spec2,...]]&lt;/code&gt; 、すべての仕様は、一つのテストにマージされます。</target>
        </trans-unit>
        <trans-unit id="64318942ad99e2a283846e85b41c1a1a90a245d7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Streams&lt;/code&gt; is an empty list, &lt;strong&gt;all&lt;/strong&gt; streams are requested by sending the following filter:</source>
          <target state="translated">&lt;code&gt;Streams&lt;/code&gt; が空のリストである場合、&lt;strong&gt;すべての&lt;/strong&gt;ストリームは次のフィルターを送信することによって要求されます。</target>
        </trans-unit>
        <trans-unit id="5a57f3a703460decb9f940e7b918e0ac60764ffe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupBridgeName={global,Name}&lt;/code&gt;, the supervisor bridge is registered globally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt; global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;SupBridgeName={global,Name}&lt;/code&gt; 、スーパバイザ・ブリッジは、以下のようにグローバルに登録された &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt; global:register_name/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0bddbecc2df41f591669985046f32e7a92f59d1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupBridgeName={global,Name}&lt;/code&gt;, the supervisor bridge is registered globally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt;global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;SupBridgeName={global,Name}&lt;/code&gt; 、スーパバイザ・ブリッジは、以下のようにグローバルに登録された &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt;global:register_name/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="55b58db32cac80b6fba959bc6eb9beb456afa271" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupBridgeName={local,Name}&lt;/code&gt;, the supervisor bridge is registered locally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt;register/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;SupBridgeName={local,Name}&lt;/code&gt; 、スーパバイザ・ブリッジは、以下のように局所的に登録されている &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt;register/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="72424d21ee1e4f64401815083aa13a425812c98c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupBridgeName={via,Module,Name}&lt;/code&gt;, the supervisor bridge is registered as &lt;code&gt;Name&lt;/code&gt; using a registry represented by Module. The &lt;code&gt;Module&lt;/code&gt; callback is to export functions &lt;code&gt;register_name/2&lt;/code&gt;, &lt;code&gt;unregister_name/1&lt;/code&gt;, and &lt;code&gt;send/2&lt;/code&gt;, which are to behave like the corresponding functions in &lt;code&gt;global&lt;/code&gt;. Thus, &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; is a valid reference.</source>
          <target state="translated">場合 &lt;code&gt;SupBridgeName={via,Module,Name}&lt;/code&gt; 、スーパバイザ・ブリッジは、以下のように登録されている &lt;code&gt;Name&lt;/code&gt; のモジュールで表されるレジストリを使用します。 &lt;code&gt;Module&lt;/code&gt; コールバックは、エクスポート機能にある &lt;code&gt;register_name/2&lt;/code&gt; 、 &lt;code&gt;unregister_name/1&lt;/code&gt; 、および &lt;code&gt;send/2&lt;/code&gt; で対応する機能のように動作している、 &lt;code&gt;global&lt;/code&gt; 。したがって、 &lt;code&gt;{via,global,GlobalName}&lt;/code&gt; は有効な参照です。</target>
        </trans-unit>
        <trans-unit id="e6570ba727a9a3893fd9a3d0b799b833bf1451e0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupName={global,Name}&lt;/code&gt;, the supervisor is registered globally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt; global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;SupName={global,Name}&lt;/code&gt; 、監督のようにグローバルに登録された &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt; global:register_name/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5e7b2fcdf9c47fb2dceee651299ffa41113ce50c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupName={global,Name}&lt;/code&gt;, the supervisor is registered globally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt;global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;SupName={global,Name}&lt;/code&gt; 、監督のようにグローバルに登録された &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt;global:register_name/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a94898f62db8e0366c9e39384d40e7b1aeef50e9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupName={local,Name}&lt;/code&gt;, the supervisor is registered locally as &lt;code&gt;Name&lt;/code&gt; using &lt;code&gt;register/2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;SupName={local,Name}&lt;/code&gt; 、監督者は、次のように局所的に登録されている &lt;code&gt;Name&lt;/code&gt; 使用 &lt;code&gt;register/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="302a4ec0f93e1a3b85f4525fc68100cb7ea134fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;SupName={via,Module,Name}&lt;/code&gt;, the supervisor is registered as &lt;code&gt;Name&lt;/code&gt; using the registry represented by &lt;code&gt;Module&lt;/code&gt;. The &lt;code&gt;Module&lt;/code&gt; callback must export the functions &lt;code&gt;register_name/2&lt;/code&gt;, &lt;code&gt;unregister_name/1&lt;/code&gt;, and &lt;code&gt;send/2&lt;/code&gt;, which must behave like the corresponding functions in &lt;code&gt;global&lt;/code&gt;. Thus, &lt;code&gt;{via,global,Name}&lt;/code&gt; is a valid reference.</source>
          <target state="translated">場合 &lt;code&gt;SupName={via,Module,Name}&lt;/code&gt; 、監督者は、次のように登録されている &lt;code&gt;Name&lt;/code&gt; で表されるレジストリ使用して &lt;code&gt;Module&lt;/code&gt; 。 &lt;code&gt;Module&lt;/code&gt; 機能をエクスポートする必要があり、コールバックは &lt;code&gt;register_name/2&lt;/code&gt; 、 &lt;code&gt;unregister_name/1&lt;/code&gt; 、および &lt;code&gt;send/2&lt;/code&gt; で対応する関数のように動作する必要があり、 &lt;code&gt;global&lt;/code&gt; 。したがって、 &lt;code&gt;{via,global,Name}&lt;/code&gt; は有効な参照です。</target>
        </trans-unit>
        <trans-unit id="e19abc8d0154d9b15c235deec3229c13afe0bfd1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Suspendee&lt;/code&gt; is not a process identifier.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; がプロセス識別子でない場合。</target>
        </trans-unit>
        <trans-unit id="c9f3eb71690e00c625f528d1a166e4c2803c3742" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Term&lt;/code&gt; and &lt;code&gt;Pattern&lt;/code&gt; can be matched, the function returns a non-zero value and binds any unbound variables in &lt;code&gt;Pattern&lt;/code&gt;. If &lt;code&gt;Term&lt;/code&gt; and &lt;code&gt;Pattern&lt;/code&gt; do not match, &lt;code&gt;0&lt;/code&gt; is returned. For example:</source>
          <target state="translated">場合 &lt;code&gt;Term&lt;/code&gt; と &lt;code&gt;Pattern&lt;/code&gt; 一致させることができ、関数はゼロ以外の値を返し、のいずれかの結合していない変数バインド &lt;code&gt;Pattern&lt;/code&gt; 。 &lt;code&gt;Term&lt;/code&gt; と &lt;code&gt;Pattern&lt;/code&gt; が一致しない場合、 &lt;code&gt;0&lt;/code&gt; が返されます。例えば：</target>
        </trans-unit>
        <trans-unit id="c379e61ba098c472d84880da68787d8cf49e4a92" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Time&lt;/code&gt; is &lt;code&gt;infinity&lt;/code&gt;, no timer is started, as it never would expire anyway.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; が &lt;code&gt;infinity&lt;/code&gt; の場合、タイマーが期限切れになることはないため、タイマーは開始されません。</target>
        </trans-unit>
        <trans-unit id="361b493363d47b76898e36a3b534cb11d8d0b1ba" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Time&lt;/code&gt; is relative and &lt;code&gt;0&lt;/code&gt; no timer is actually started, instead the the time-out event is enqueued to ensure that it gets processed before any not yet received external event, but after already queued events.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; が相対的で &lt;code&gt;0&lt;/code&gt; の場合、タイマーは実際には開始されません。代わりに、タイムアウトイベントがキューに入れられ、まだ受信されていない外部イベントの前に、ただしキューに入れられたイベントの後に処理されます。</target>
        </trans-unit>
        <trans-unit id="53be15db077d9f7386a9212d414b5bbc5efc8b98" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Time&lt;/code&gt; is relative and &lt;code&gt;0&lt;/code&gt; no timer is actually started, instead the the time-out event is enqueued to ensure that it gets processed before any not yet received external event.</source>
          <target state="translated">&lt;code&gt;Time&lt;/code&gt; が相対で &lt;code&gt;0&lt;/code&gt; の場合、タイマーは実際には開始されません。代わりに、タイムアウトイベントがキューに登録され、まだ受信されていない外部イベントの前に処理されるようにします。</target>
        </trans-unit>
        <trans-unit id="576d56f7b80afa9316129970fc76da4c8c90a6b6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Time&lt;/code&gt; is specified as an integer, this function waits for &lt;code&gt;Time&lt;/code&gt; milliseconds for the new process to call &lt;code&gt;init_ack&lt;/code&gt;, or &lt;code&gt;Ret = {error, timeout}&lt;/code&gt; will be returned, and the process is killed.</source>
          <target state="translated">場合 &lt;code&gt;Time&lt;/code&gt; 整数として指定され、この機能のための待機 &lt;code&gt;Time&lt;/code&gt; を呼び出すための新しい方法のためのミリ秒 &lt;code&gt;init_ack&lt;/code&gt; 、または &lt;code&gt;Ret = {error, timeout}&lt;/code&gt; 返され、プロセスが殺されます。</target>
        </trans-unit>
        <trans-unit id="df42bd176e1545f79c00a2e65e652086e9d32d4d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Time&lt;/code&gt; is specified as an integer, this function waits for &lt;code&gt;Time&lt;/code&gt; milliseconds for the new process to call &lt;code&gt;init_ack&lt;/code&gt;, or &lt;code&gt;{error, timeout}&lt;/code&gt; is returned, and the process is killed.</source>
          <target state="translated">場合 &lt;code&gt;Time&lt;/code&gt; 整数として指定され、のためのこの機能待機 &lt;code&gt;Time&lt;/code&gt; 新しいコールするプロセスのためのミリ秒 &lt;code&gt;init_ack&lt;/code&gt; 、または &lt;code&gt;{error, timeout}&lt;/code&gt; 戻され、プロセスが殺されます。</target>
        </trans-unit>
        <trans-unit id="4be60462090656e0a73c06a85dd1300e3f12ecfa" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Timeout&lt;/code&gt; is set to an integer value in milliseconds, Mnesia forces &quot;heavyweight transactions&quot; to be finished, even if the outcome of the transaction for the moment is unclear. After &lt;code&gt;Timeout&lt;/code&gt; milliseconds, Mnesia commits or terminates the transaction and continues with the startup. This can lead to a situation where the transaction is committed on some nodes and terminated on other nodes. If the transaction is a schema transaction, the inconsistency can be fatal.</source>
          <target state="translated">場合は &lt;code&gt;Timeout&lt;/code&gt; ミリ秒単位の整数値に設定されている、Mnesia力「ヘビー級の取引は」一瞬のためのトランザクションの結果が不明である場合でも、終了します。 &lt;code&gt;Timeout&lt;/code&gt; ミリ秒後、Mnesiaはトランザクションをコミットまたは終了し、起動を続行します。これにより、一部のノードでトランザクションがコミットされ、他のノードでトランザクションが終了する場合があります。トランザクションがスキーマトランザクションである場合、不整合は致命的な可能性があります。</target>
        </trans-unit>
        <trans-unit id="714a8fc4e60ac83febb0eba6e2e43aa29c1e43cd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;To &amp;gt; From - Incr&lt;/code&gt; and &lt;code&gt;Incr &amp;lt; 0&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;To &amp;gt; From - Incr&lt;/code&gt; および &lt;code&gt;Incr &amp;lt; 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="116f28b654e1b2114f084ce63da092181669b950" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;To &amp;lt; From - Incr&lt;/code&gt; and &lt;code&gt;Incr &amp;gt; 0&lt;/code&gt;.</source>
          <target state="translated">If &lt;code&gt;To &amp;lt; From - Incr&lt;/code&gt; および &lt;code&gt;Incr &amp;gt; 0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54f93f73769a89bfaa867aaa2f8894d3965b6413" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;TupleOfBinRels&lt;/code&gt; is a non-empty tuple {R[1], ..., R[n]} of binary relations and &lt;code&gt;BinRel1&lt;/code&gt; is a binary relation, then &lt;code&gt;BinRel2&lt;/code&gt; is the &lt;code&gt;&lt;a href=&quot;#multiple_relative_product&quot;&gt;multiple relative product&lt;/a&gt;&lt;/code&gt; of the ordered set (R[i], ..., R[n]) and &lt;code&gt;BinRel1&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;TupleOfBinRels&lt;/code&gt; は、二項関係の非空のタプル{R [1]、&amp;middot;&amp;middot;&amp;middot;、R [N]}であり &lt;code&gt;BinRel1&lt;/code&gt; がバイナリ関係で、次いで &lt;code&gt;BinRel2&lt;/code&gt; がある &lt;code&gt;&lt;a href=&quot;#multiple_relative_product&quot;&gt;multiple relative product&lt;/a&gt;&lt;/code&gt; 、順序集合（R [I]の...、R [n]）および &lt;code&gt;BinRel1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c970d03f8f213aa54cea6a63852543e1427736a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type = load&lt;/code&gt;, the application is only loaded.</source>
          <target state="translated">場合 &lt;code&gt;Type = load&lt;/code&gt; 、アプリケーションにのみロードされます。</target>
        </trans-unit>
        <trans-unit id="ef46ddc91155f5582e897510a78e384c324f3ca3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type = none&lt;/code&gt;, the application is not loaded and not started, although the code for its modules is loaded.</source>
          <target state="translated">&lt;code&gt;Type = none&lt;/code&gt; 場合、モジュールのコードは読み込まれますが、アプリケーションは読み込まれず、起動されません。</target>
        </trans-unit>
        <trans-unit id="ee9c99386deae4cad26ab6d667423f3c8e7d9d82" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type = permanent | transient | temporary&lt;/code&gt;, the application is loaded and started in the corresponding way, see &lt;code&gt;application(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type = permanent | transient | temporary&lt;/code&gt; 場合| 一時的| temporary、アプリケーションは対応する方法でロードおよび開始されます &lt;code&gt;application(3)&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="80d0f32ad447a0f124722ae3ffd089ea15b0187a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;file&lt;/code&gt;, the client reads all trace messages stored in the file named &lt;code&gt;Filename&lt;/code&gt; or specified by &lt;code&gt;WrapFilesSpec&lt;/code&gt; (must be the same as used when creating the trace, see trace_port/2) and let's the default handler function format the messages on the console. This is one way to interpret the data stored in a file by the file trace port driver.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; ある &lt;code&gt;file&lt;/code&gt; は、クライアントが名前のファイルに保存されているすべてのトレース・メッセージを読み込む &lt;code&gt;Filename&lt;/code&gt; またはで指定された &lt;code&gt;WrapFilesSpec&lt;/code&gt; を（トレースを作成するときに、trace_port / 2を参照してください使用と同じでなければなりません）、コンソール上でのデフォルトのハンドラ関数形式のメッセージを聞かせて。これは、ファイルトレースポートドライバーによってファイルに保存されたデータを解釈する1つの方法です。</target>
        </trans-unit>
        <trans-unit id="a4858c659d369e53d254b355df46af5fbf4c16d3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;follow_file&lt;/code&gt;, the client behaves as in the &lt;code&gt;file&lt;/code&gt; case, but keeps trying to read (and process) more data from the file until stopped by &lt;code&gt;&lt;a href=&quot;#stop_trace_client-1&quot;&gt;stop_trace_client/1&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;WrapFilesSpec&lt;/code&gt; is not allowed as second argument for this &lt;code&gt;Type&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; ある &lt;code&gt;follow_file&lt;/code&gt; 、クライアントのように振る舞う &lt;code&gt;file&lt;/code&gt; の場合、しかしによって停止されるまで、ファイルからより多くのデータを読み取る（およびプロセス）しようとし続け &lt;code&gt;&lt;a href=&quot;#stop_trace_client-1&quot;&gt;stop_trace_client/1&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;WrapFilesSpec&lt;/code&gt; は、この &lt;code&gt;Type&lt;/code&gt; の 2番目の引数として許可されていません。</target>
        </trans-unit>
        <trans-unit id="180a1fd075134b1e3a57e62da41207ab78634934" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;ip&lt;/code&gt;, the client connects to the TCP/IP port &lt;code&gt;PortNumber&lt;/code&gt; on the host &lt;code&gt;Hostname&lt;/code&gt;, from where it reads trace messages until the TCP/IP connection is closed. If no &lt;code&gt;Hostname&lt;/code&gt; is specified, the local host is assumed.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; あり &lt;code&gt;ip&lt;/code&gt; 、TCP / IPポートへのクライアントの接続先 &lt;code&gt;PortNumber&lt;/code&gt; のホスト上の &lt;code&gt;Hostname&lt;/code&gt; それがトレースメッセージを読み込む場合は、TCP / IP接続が閉じられるまでから。 &lt;code&gt;Hostname&lt;/code&gt; が指定されていない場合、ローカルホストが想定されます。</target>
        </trans-unit>
        <trans-unit id="e7f9b8934106158303967177ea69d38323fb0f5a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;port&lt;/code&gt;, then the second parameter should be a &lt;strong&gt;fun&lt;/strong&gt; which takes no arguments and returns a newly opened trace port when called. Such a &lt;strong&gt;fun&lt;/strong&gt; is preferably generated by calling &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; が &lt;code&gt;port&lt;/code&gt; の場合、2番目のパラメーターは&lt;strong&gt;fun&lt;/strong&gt;で、引数をとらず、呼び出されたときに新しく開いたトレースポートを返します。そのような&lt;strong&gt;fun&lt;/strong&gt;は、 &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; を呼び出すことによって生成されることが好ましい。</target>
        </trans-unit>
        <trans-unit id="dcff9f93e9e05e724456b0bced8193fb3bde0690" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;process&lt;/code&gt;, a message handler function can be specified (&lt;code&gt;HandlerSpec&lt;/code&gt;). The handler function, which should be a &lt;code&gt;fun&lt;/code&gt; taking two arguments, will be called for each trace message, with the first argument containing the message as it is and the second argument containing the return value from the last invocation of the fun. The initial value of the second parameter is specified in the &lt;code&gt;InitialData&lt;/code&gt; part of the &lt;code&gt;HandlerSpec&lt;/code&gt;. The &lt;code&gt;HandlerFun&lt;/code&gt; may choose any appropriate action to take when invoked, and can save a state for the next invocation by returning it.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; あり &lt;code&gt;process&lt;/code&gt; 、メッセージハンドラ関数を指定することができます（ &lt;code&gt;HandlerSpec&lt;/code&gt; ）。2つの引数を取る &lt;code&gt;fun&lt;/code&gt; であるハンドラ関数は、各トレースメッセージに対して呼び出されます。最初の引数にはメッセージがそのまま含まれ、2番目の引数にはfunの最後の呼び出しからの戻り値が含まれます。 2番目のパラメーターの初期値は、 &lt;code&gt;HandlerSpec&lt;/code&gt; の &lt;code&gt;InitialData&lt;/code&gt; 部分で指定されます。 &lt;code&gt;HandlerFun&lt;/code&gt; が呼び出されたときに取るために、任意の適切な行動を選択することができ、そしてそれを返すことによって、次の呼び出しの状態を保存することができます。</target>
        </trans-unit>
        <trans-unit id="a4b1b3641b22ef8f8d51a93d3b2d1b2337213cb2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;public_key&lt;/code&gt; the binary can be either an RFC4716 public key or an OpenSSH public key.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; が &lt;code&gt;public_key&lt;/code&gt; の場合、バイナリはRFC4716公開鍵またはOpenSSH公開鍵のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="25a5ca48186c13c4c06e74ef1db2027011e4bcd7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;table&lt;/code&gt;, the object to match against is to be a tuple. The function then returns &lt;code&gt;{ok,Result,[],Warnings}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is what would have been the result in a real &lt;code&gt;ets:select/2&lt;/code&gt; call, or &lt;code&gt;false&lt;/code&gt; if the match specification does not match the object tuple.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; ある &lt;code&gt;table&lt;/code&gt; 、マッチさせるオブジェクトはタプルになることです。次に、関数は &lt;code&gt;{ok,Result,[],Warnings}&lt;/code&gt; 返します。ここで &lt;code&gt;Result&lt;/code&gt; は、実際の &lt;code&gt;ets:select/2&lt;/code&gt; 呼び出しでの結果となるものであり、一致指定がオブジェクトタプルと一致しない場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="79b1b01424133793a9f87e15e6618830f393c840" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;trace&lt;/code&gt;, the object to match against is to be a list. The function returns &lt;code&gt;{ok, Result, Flags, Warnings}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is one of the following:</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; あり &lt;code&gt;trace&lt;/code&gt; 、照合するオブジェクトはリストになることです。この関数は &lt;code&gt;{ok, Result, Flags, Warnings}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Result&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="55c96c3e31c21901d76762cfc3c55a1a75e182d6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;Type&lt;/code&gt; is not one of the memory types listed in the description of &lt;code&gt;&lt;a href=&quot;#memory-0&quot;&gt;erlang:memory/0&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;#memory-0&quot;&gt;erlang:memory/0&lt;/a&gt;&lt;/code&gt; の説明にリストされているメモリタイプのいずれでもない場合。</target>
        </trans-unit>
        <trans-unit id="f09015d085c4ba86f35f77e160ea74ab1cc97841" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;[]&lt;/code&gt; is returned, no OS monotonic time is available. The list contains two-tuples with &lt;code&gt;Key&lt;/code&gt;s as first element, and &lt;code&gt;Value&lt;/code&gt;s as second element. The order of these tuples is undefined. The following tuples can be part of the list, but more tuples can be introduced in the future:</source>
          <target state="translated">場合は &lt;code&gt;[]&lt;/code&gt; が返され、何のOS単調な時間がありません。リストには、最初の要素として &lt;code&gt;Key&lt;/code&gt; 、2番目の要素として &lt;code&gt;Value&lt;/code&gt; を持つ2つのタプルが含まれています。これらのタプルの順序は定義されていません。以下のタプルをリストの一部にすることができますが、将来、より多くのタプルを導入することができます。</target>
        </trans-unit>
        <trans-unit id="0dab6e7436a7ad654f072804193938c789548d28" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;[node()]&lt;/code&gt; then a connection is rejected if another already exists on any of the specified nodes. Types &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;node&lt;/code&gt;, &lt;code&gt;nodes&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; are equivalent to &lt;code&gt;[]&lt;/code&gt;, &lt;code&gt;[node()]&lt;/code&gt;, &lt;code&gt;[node()|nodes()]&lt;/code&gt; and the evaluated value respectively, evaluation of each expression taking place whenever a new connection is to be established. Note that &lt;code&gt;false&lt;/code&gt; allows an unlimited number of connections to be established with the same peer.</source>
          <target state="translated">もし &lt;code&gt;[node()]&lt;/code&gt; 別の既に指定されたノードのいずれかに存在する場合、接続は拒否されます。タイプ &lt;code&gt;false&lt;/code&gt; 、 &lt;code&gt;node&lt;/code&gt; 、 &lt;code&gt;nodes&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt; は、それぞれ &lt;code&gt;[]&lt;/code&gt; 、 &lt;code&gt;[node()]&lt;/code&gt; 、 &lt;code&gt;[node()|nodes()]&lt;/code&gt; および評価された値と同等で、新しい接続が行われるたびに各式の評価が行われます設立。 &lt;code&gt;false&lt;/code&gt; を指定すると、同じピアで無制限の数の接続を確立できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="295d7333eb893d35be93e144e1767e5d9b639f90" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;active&lt;/code&gt; is specified as an integer &lt;code&gt;N&lt;/code&gt; in the range -32768 to 32767 (inclusive), that number is added to the socket's counting of data messages to be delivered to the controlling process. If the result of the addition is negative, the count is set to &lt;code&gt;0&lt;/code&gt;. Once the count reaches &lt;code&gt;0&lt;/code&gt;, either through the delivery of messages or by being explicitly set with &lt;code&gt;&lt;a href=&quot;inet#setopts-2&quot;&gt;inet:setopts/2&lt;/a&gt;&lt;/code&gt;, the socket mode is automatically reset to passive (&lt;code&gt;{active, false}&lt;/code&gt;). When a socket in this active mode transitions to passive mode, the message &lt;code&gt;{sctp_passive, Socket}&lt;/code&gt; is sent to the controlling process to notify it that if it wants to receive more data messages from the socket, it must call &lt;code&gt;&lt;a href=&quot;inet#setopts-2&quot;&gt;inet:setopts/2&lt;/a&gt;&lt;/code&gt; to set the socket back into an active mode.</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; が-32768〜32767の範囲の整数 &lt;code&gt;N&lt;/code&gt; として指定されている場合、その数は、制御プロセスに配信されるデータメッセージのソケットのカウントに追加されます。加算の結果が負の場合、カウントは &lt;code&gt;0&lt;/code&gt; に設定されます。メッセージの配信または &lt;code&gt;&lt;a href=&quot;inet#setopts-2&quot;&gt;inet:setopts/2&lt;/a&gt;&lt;/code&gt; で明示的に設定することにより、カウントが &lt;code&gt;0&lt;/code&gt; に達すると、ソケットモードは自動的にパッシブ（ &lt;code&gt;{active, false}&lt;/code&gt; ）にリセットされます。このアクティブモードのソケットがパッシブモードに移行すると、メッセージ &lt;code&gt;{sctp_passive, Socket}&lt;/code&gt; が制御プロセスに送信され、ソケットからさらにデータメッセージを受信する場合は、 &lt;code&gt;&lt;a href=&quot;inet#setopts-2&quot;&gt;inet:setopts/2&lt;/a&gt;&lt;/code&gt; は、ソケットをアクティブモードに戻します。</target>
        </trans-unit>
        <trans-unit id="03b183ed01691db59614d150f25d033d938031cb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;alloc&lt;/code&gt; succeeds, &lt;code&gt;dealloc&lt;/code&gt; is also executed. If &lt;code&gt;alloc&lt;/code&gt; fails however, &lt;code&gt;dealloc&lt;/code&gt; is not executed but marked as &lt;code&gt;SKIPPED&lt;/code&gt; in the HTML log. &lt;code&gt;get_resource_status&lt;/code&gt; runs no matter what happens to the &lt;code&gt;alloc_and_dealloc&lt;/code&gt; cases.</source>
          <target state="translated">場合 &lt;code&gt;alloc&lt;/code&gt; 成功し、 &lt;code&gt;dealloc&lt;/code&gt; も実行されます。場合 &lt;code&gt;alloc&lt;/code&gt; しかし失敗した、 &lt;code&gt;dealloc&lt;/code&gt; 実行けどとしてマークされていない &lt;code&gt;SKIPPED&lt;/code&gt; HTMLログに。 &lt;code&gt;get_resource_status&lt;/code&gt; は、 &lt;code&gt;alloc_and_dealloc&lt;/code&gt; のケースがどうなっても実行されます。</target>
        </trans-unit>
        <trans-unit id="352b5321f6cc2147596cc6f32fa64b28aba14c20" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;answer_3xxx&lt;/code&gt; then requests are answered without a &lt;code&gt;handle_request/3&lt;/code&gt; callback taking place. If &lt;code&gt;answer&lt;/code&gt; then even 5xxx errors are answered without a callback unless the connection in question has configured the RFC 3588 common dictionary as noted below. If &lt;code&gt;callback&lt;/code&gt; then a &lt;code&gt;handle_request/3&lt;/code&gt; callback always takes place and its return value determines the answer sent to the peer, if any.</source>
          <target state="translated">&lt;code&gt;answer_3xxx&lt;/code&gt; の場合、 &lt;code&gt;handle_request/3&lt;/code&gt; コールバックを行わずに要求に応答します。 &lt;code&gt;answer&lt;/code&gt; 場合、問題の接続でRFC 3588共通ディクショナリが以下のように構成されていない限り、5xxxエラーでもコールバックなしで回答されます。場合は &lt;code&gt;callback&lt;/code&gt; 、その後 &lt;code&gt;handle_request/3&lt;/code&gt; コールバックは常に行われ、もしあれば、その戻り値は、ピアに送信された答えを決定します。</target>
        </trans-unit>
        <trans-unit id="cdb44b71a12e090bedfcba4386a9f7329590c298" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;audit_trail_log&lt;/code&gt; specifies that logging should take place, this parameter &lt;strong&gt;must&lt;/strong&gt; be defined.</source>
          <target state="translated">&lt;code&gt;audit_trail_log&lt;/code&gt; でロギングを実行するように指定している場合は、このパラメーターを定義する&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5c3452c6586d61bda15fc59fe771d58878ac0b8b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;auto_ack&lt;/code&gt; is true, then if &lt;code&gt;trans_ack&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, ack's will be sent immediately. If &lt;code&gt;trans_ack&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, then ack's will instead be sent to the transaction sender process for accumulation and later sending (see &lt;code&gt;trans_ack_maxcount&lt;/code&gt;, &lt;code&gt;trans_req_maxcount&lt;/code&gt;, &lt;code&gt;trans_req_maxsize&lt;/code&gt;, &lt;code&gt;trans_ack_maxcount&lt;/code&gt; and &lt;code&gt;trans_timer&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;auto_ack&lt;/code&gt; 真であれば、 &lt;code&gt;trans_ack&lt;/code&gt; ある &lt;code&gt;false&lt;/code&gt; 、ACKのはすぐに送信されます。場合 &lt;code&gt;trans_ack&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、その後、ACKのではなく、蓄積のためのトランザクションの送信者プロセスに送信され、後で（参照送る &lt;code&gt;trans_ack_maxcount&lt;/code&gt; 、 &lt;code&gt;trans_req_maxcount&lt;/code&gt; 、 &lt;code&gt;trans_req_maxsize&lt;/code&gt; 、 &lt;code&gt;trans_ack_maxcount&lt;/code&gt; と &lt;code&gt;trans_timer&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="7f3ff30c8bf2c3590c81efa740a7d601076daf88" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;callback&lt;/code&gt; then errors result in a &lt;code&gt;handle_answer/4&lt;/code&gt; callback in the same fashion as for &lt;code&gt;handle_request/3&lt;/code&gt;, with errors communicated in the &lt;code&gt;errors&lt;/code&gt; field of the &lt;code&gt;#diameter_packet{}&lt;/code&gt; passed to the callback. If &lt;code&gt;report&lt;/code&gt; then an answer containing errors is discarded without a callback and a warning report is written to the log. If &lt;code&gt;discard&lt;/code&gt; then an answer containing errors is silently discarded without a callback. In both the &lt;code&gt;report&lt;/code&gt; and &lt;code&gt;discard&lt;/code&gt; cases the return value for the &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; invocation in question is as if a callback had taken place and returned &lt;code&gt;{error, failure}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;callback&lt;/code&gt; 場合、エラーの結果、 &lt;code&gt;handle_request/3&lt;/code&gt; と同じように、 &lt;code&gt;handle_answer/4&lt;/code&gt; コールバックが発生します。 &lt;code&gt;errors&lt;/code&gt; は、コールバックに渡される &lt;code&gt;#diameter_packet{}&lt;/code&gt; errorsフィールドで通知されます。もし &lt;code&gt;report&lt;/code&gt; その後、エラーを含むその答えは、コールバックせずに破棄され、警告レポートがログに書き込まれます。場合は &lt;code&gt;discard&lt;/code&gt; 、その後エラーを含む答えは静かにコールバックせずに破棄されます。 &lt;code&gt;report&lt;/code&gt; と &lt;code&gt;discard&lt;/code&gt; 両方のケースで、問題の &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; 呼び出しの戻り値は、コールバックが &lt;code&gt;{error, failure}&lt;/code&gt; 返されたかのようになります。。</target>
        </trans-unit>
        <trans-unit id="62c065b9fb27488b0e771951e56438f1b6383335" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ch4&lt;/code&gt; is part of the application &lt;code&gt;sp_app&lt;/code&gt; and a new version of the module is to be loaded when upgrading from version &quot;1&quot; to &quot;2&quot; of this application, &lt;code&gt;sp_app.appup&lt;/code&gt; can look as follows:</source>
          <target state="translated">場合 &lt;code&gt;ch4&lt;/code&gt; アプリケーションの一部であり &lt;code&gt;sp_app&lt;/code&gt; およびモジュールの新バージョンバージョン「1」からのアップグレード時に、このアプリケーションの「2」にロードされる、 &lt;code&gt;sp_app.appup&lt;/code&gt; は、次のように見ることができます：</target>
        </trans-unit>
        <trans-unit id="704192b50b25e6b4c8a4a69ec853e8732712c9f1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;cp1&lt;/code&gt; goes down, the system checks which one of the other nodes, &lt;code&gt;cp2&lt;/code&gt; or &lt;code&gt;cp3&lt;/code&gt;, has the least number of running applications, but waits for 5 seconds for &lt;code&gt;cp1&lt;/code&gt; to restart. If &lt;code&gt;cp1&lt;/code&gt; does not restart and &lt;code&gt;cp2&lt;/code&gt; runs fewer applications than &lt;code&gt;cp3&lt;/code&gt;, &lt;code&gt;myapp&lt;/code&gt; is restarted on &lt;code&gt;cp2&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;cp1&lt;/code&gt; ダウン、システムの他のノードの一つチェック &lt;code&gt;cp2&lt;/code&gt; または &lt;code&gt;cp3&lt;/code&gt; 、実行中のアプリケーションの最小数を有するが、5秒待つ &lt;code&gt;cp1&lt;/code&gt; 再起動します。場合 &lt;code&gt;cp1&lt;/code&gt; 再起動しないと &lt;code&gt;cp2&lt;/code&gt; より少ないアプリケーションで実行さ &lt;code&gt;cp3&lt;/code&gt; 、 &lt;code&gt;myapp&lt;/code&gt; には、上で再起動さ &lt;code&gt;cp2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b17771800350279f555431c07bc7909375d85a40" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ct_run&lt;/code&gt; is called with option &lt;code&gt;-help&lt;/code&gt;, it prints all valid start flags to &lt;code&gt;stdout&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;ct_run&lt;/code&gt; はオプションと呼ばれ &lt;code&gt;-help&lt;/code&gt; 、それはすべてに有効な開始フラグを出力 &lt;code&gt;stdout&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d7ad1711ae125314f622ecddd1f476bedaa098f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;drop_mode_qlen&lt;/code&gt; is set to the same value as &lt;code&gt;flush_qlen&lt;/code&gt;, drop mode is disabled and can never occur.</source>
          <target state="translated">場合 &lt;code&gt;drop_mode_qlen&lt;/code&gt; が同じ値に設定されている &lt;code&gt;flush_qlen&lt;/code&gt; 、ドロップモードは無効になり、発生しないことができます。</target>
        </trans-unit>
        <trans-unit id="c399745e103b947fe1a2d216d913038686b47941" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ei_set_compat_rel(21)&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; called then a connected emulator will send bit strings and export funs correctly encoded. The functions &lt;code&gt;&lt;a href=&quot;#ei_decode_bitstring&quot;&gt;ei_decode_bitstring&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#ei_decode_fun&quot;&gt;ei_decode_fun&lt;/a&gt;&lt;/code&gt; has to be used to decode such terms. Calling &lt;code&gt;ei_set_compat_rel(21)&lt;/code&gt; should only be done as a workaround to keep an old implementation alive, which expects to receive the undocumented tuple formats for bit strings and/or export funs.</source>
          <target state="translated">場合 &lt;code&gt;ei_set_compat_rel(21)&lt;/code&gt; がされて&lt;strong&gt;いない&lt;/strong&gt;と呼ばれ、その後、接続エミュレータは正しくエンコードビット列と輸出低速運行を送信します。このような用語をデコードするには、関数 &lt;code&gt;&lt;a href=&quot;#ei_decode_bitstring&quot;&gt;ei_decode_bitstring&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#ei_decode_fun&quot;&gt;ei_decode_fun&lt;/a&gt;&lt;/code&gt; を使用する必要があります。 &lt;code&gt;ei_set_compat_rel(21)&lt;/code&gt; の呼び出しは、古い実装を存続させるための回避策としてのみ実行する必要があります。これは、ビット文字列の文書化されていないタプル形式を受信したり、funをエクスポートしたりすることを想定しています。</target>
        </trans-unit>
        <trans-unit id="173618b78a011b048e525d9c552841f6185552f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_call/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_call/3&lt;/code&gt; が定義されていない場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="585b6dae1b75f75f6d17ff008d7c715232f527c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_garbage_collection/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_garbage_collection/3&lt;/code&gt; が定義されていない場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6b7353e255834b234c18ea03d27108e34a19f8a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_ports/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_ports/3&lt;/code&gt; が定義されていない場合は、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7d175b45d5ebd8073a81917e2e671529596546a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_procs/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_procs/3&lt;/code&gt; が定義されていない場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0ebe9ceea886c3c6d1719971aa43295e9c7ed38b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_receive/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_receive/3&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="10f4f080f33a6c7add14620c4ce363f7b8950eec" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_running_ports/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_running_ports/3&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="1c4a84bb3f76762c65d3520facf2a72bcfc1f2ad" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_running_procs/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_running_procs/3&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b251834b95dc454e5654dddcf65d7d5d05abbdf9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;enabled_send/3&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;enabled_send/3&lt;/code&gt; が定義されていない場合は、代わりに &lt;code&gt;&lt;a href=&quot;#Module:enabled-3&quot;&gt;Module:enabled/3&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="48960527f8e8df817720dc59ec79a9e715127fc2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;encoding&lt;/code&gt; is set to something else than &lt;code&gt;latin1&lt;/code&gt;, the &lt;code&gt;read_line/1&lt;/code&gt; call fails if the data contains characters larger than 255, why module &lt;code&gt;io(3)&lt;/code&gt; is to be preferred when reading such a file.</source>
          <target state="translated">場合 &lt;code&gt;encoding&lt;/code&gt; より何か他のものに設定されている &lt;code&gt;latin1&lt;/code&gt; の、 &lt;code&gt;read_line/1&lt;/code&gt; のデータは、255を超える文字が含まれている場合、コールは失敗し、なぜモジュール &lt;code&gt;io(3)&lt;/code&gt; 、このようなAファイルを読み込むときに好ましいことがあります。</target>
        </trans-unit>
        <trans-unit id="02ece68d22a0388d64a0607adb76ac441dd5ca33" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;epmd&lt;/code&gt; is to be used for node discovery, you typically want to use the (unfortunately undocumented) &lt;code&gt;erl_epmd&lt;/code&gt; module (part of the &lt;code&gt;kernel&lt;/code&gt; application) in order to register the listen port with &lt;code&gt;epmd&lt;/code&gt; and retrieve &lt;code&gt;Creation&lt;/code&gt; to use.</source>
          <target state="translated">場合 &lt;code&gt;epmd&lt;/code&gt; ノード検出のために使用されるべきである、あなたは通常、（残念ながら文書化されていない）を使用したい &lt;code&gt;erl_epmd&lt;/code&gt; モジュール（の一部 &lt;code&gt;kernel&lt;/code&gt; とリスンポートを登録するために、アプリケーションを） &lt;code&gt;epmd&lt;/code&gt; および取得 &lt;code&gt;Creation&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="c86ec487c7e02fab4d117367477d9817cdcbd441" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;epmd&lt;/code&gt; is to be used for node discovery, you typically want to use the &lt;code&gt;erl_epmd&lt;/code&gt; module (part of the &lt;code&gt;kernel&lt;/code&gt; application) in order to register the listen port with &lt;code&gt;epmd&lt;/code&gt; and retrieve &lt;code&gt;Creation&lt;/code&gt; to use.</source>
          <target state="translated">場合 &lt;code&gt;epmd&lt;/code&gt; ノード検出のために使用されるべきである、あなたは一般的に使用したい &lt;code&gt;erl_epmd&lt;/code&gt; モジュール（の一部 &lt;code&gt;kernel&lt;/code&gt; とリスンポートを登録するために、アプリケーションを） &lt;code&gt;epmd&lt;/code&gt; および取得 &lt;code&gt;Creation&lt;/code&gt; 使用します。</target>
        </trans-unit>
        <trans-unit id="e48eb5a7215dde7b0dc8037cba2427a3618b189d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;erl_script_nocache&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the server adds HTTP header fields preventing proxies from caching the page. This is generally a good idea for dynamic content, as the content often varies between each request. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;erl_script_nocache&lt;/code&gt; がに設定されている &lt;code&gt;true&lt;/code&gt; 、サーバーはページをキャッシュからプロキシを防ぐHTTPヘッダーフィールドを追加します。コンテンツはリクエストごとに異なることが多いので、これは一般に動的コンテンツに適しています。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="74b3b9e997b2f242f5469345dd4b6f37734c75d2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;erl_script_timeout&lt;/code&gt; sets the time in seconds the server waits between each chunk of data to be delivered through &lt;code&gt;mod_esi:deliver/2&lt;/code&gt;. Default is &lt;code&gt;15&lt;/code&gt;. This is only relevant for scripts that use the erl scheme.</source>
          <target state="translated">&lt;code&gt;erl_script_timeout&lt;/code&gt; が秒単位で時間を設定する場合、サーバーは &lt;code&gt;mod_esi:deliver/2&lt;/code&gt; を介して配信されるデータの各チャンク間で待機します。デフォルトは &lt;code&gt;15&lt;/code&gt; です。これは、erlスキームを使用するスクリプトにのみ関連します。</target>
        </trans-unit>
        <trans-unit id="642c708a719a284794b6696e0acb8a429739f8e8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;error_logger&lt;/code&gt; is not defined in the map, the system default is used. The default system default is &lt;code&gt;true&lt;/code&gt;. It can be changed by either the option &lt;code&gt;&lt;a href=&quot;erl#+hmaxel&quot;&gt;+hmaxel&lt;/a&gt;&lt;/code&gt; int &lt;code&gt;erl(1)&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt; erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; がマップで定義されていない場合、システムのデフォルトが使用されます。デフォルトのシステムデフォルトは &lt;code&gt;true&lt;/code&gt; です。オプション &lt;code&gt;&lt;a href=&quot;erl#+hmaxel&quot;&gt;+hmaxel&lt;/a&gt;&lt;/code&gt; int &lt;code&gt;erl(1)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt; erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt; いずれかで変更できます。</target>
        </trans-unit>
        <trans-unit id="a7c49f84d1938c55d129db8f559247ec6ced174b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;error_logger&lt;/code&gt; is not defined in the map, the system default is used. The default system default is &lt;code&gt;true&lt;/code&gt;. It can be changed by either the option &lt;code&gt;&lt;a href=&quot;erl#+hmaxel&quot;&gt;+hmaxel&lt;/a&gt;&lt;/code&gt; int &lt;code&gt;erl(1)&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt;erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;error_logger&lt;/code&gt; がマップで定義されていない場合、システムのデフォルトが使用されます。デフォルトのシステムデフォルトは &lt;code&gt;true&lt;/code&gt; です。オプション &lt;code&gt;&lt;a href=&quot;erl#+hmaxel&quot;&gt;+hmaxel&lt;/a&gt;&lt;/code&gt; int &lt;code&gt;erl(1)&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt;erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt; いずれかで変更できます。</target>
        </trans-unit>
        <trans-unit id="f1f0b5e86017500297a623ccd787481972405c5d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ev&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, all ones that is &lt;code&gt;-1&lt;/code&gt; type cast to &lt;code&gt;ErlDrvSizeT&lt;/code&gt; are returned.</source>
          <target state="translated">&lt;code&gt;ev&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; の場合、 &lt;code&gt;-1&lt;/code&gt; が &lt;code&gt;ErlDrvSizeT&lt;/code&gt; に型キャストされたすべてのものが返されます。</target>
        </trans-unit>
        <trans-unit id="20a523dc7e77a84691bbad3e5ffc300c86d69172" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;exit&lt;/code&gt; then the transport process in question exits. If &lt;code&gt;handle&lt;/code&gt; then the message is processed as usual, a resulting &lt;code&gt;handle_request/3&lt;/code&gt; or &lt;code&gt;handle_answer/4&lt;/code&gt; callback (if one takes place) indicating the &lt;code&gt;5015&lt;/code&gt; error (DIAMETER_INVALID_MESSAGE_LENGTH). If &lt;code&gt;discard&lt;/code&gt; then the message in question is silently discarded.</source>
          <target state="translated">もし &lt;code&gt;exit&lt;/code&gt; 後、質問終了における輸送過程。場合 &lt;code&gt;handle&lt;/code&gt; 、メッセージが通常通り処理され、得られる &lt;code&gt;handle_request/3&lt;/code&gt; 又は &lt;code&gt;handle_answer/4&lt;/code&gt; （一つが行われる場合）、コールバックを示す &lt;code&gt;5015&lt;/code&gt; エラー（DIAMETER_INVALID_MESSAGE_LENGTHを）。場合は &lt;code&gt;discard&lt;/code&gt; 、その後、当該メッセージは静かに捨てられます。</target>
        </trans-unit>
        <trans-unit id="ca99bf6a729fabb69715993d01ee3f7329b5f3f4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extra&lt;/code&gt; is specified in &lt;code&gt;Options&lt;/code&gt;, the return value is &lt;code&gt;{ok, Epp, Extra}&lt;/code&gt; instead of &lt;code&gt;{ok, Epp}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; で &lt;code&gt;extra&lt;/code&gt; が指定されている場合、戻り値は &lt;code&gt;{ok, Epp, Extra}&lt;/code&gt; ではなく{ok、Epp、Extra &lt;code&gt;{ok, Epp}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="621b05f8dd3dbf24d54370fe9dfbe14fc856ec52" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;extra&lt;/code&gt; is specified in &lt;code&gt;Options&lt;/code&gt;, the return value is &lt;code&gt;{ok, [Form], Extra}&lt;/code&gt; instead of &lt;code&gt;{ok, [Form]}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; で &lt;code&gt;extra&lt;/code&gt; が指定されている場合、戻り値は &lt;code&gt;{ok, [Form], Extra}&lt;/code&gt; ではなく{ok、[Form]、Extra &lt;code&gt;{ok, [Form]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8b3047d3a672144cba0e123255c2c3997f12bb72" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt; (passive mode, the default), the caller must do an explicit &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv&lt;/a&gt;&lt;/code&gt; call to retrieve the available data from the socket.</source>
          <target state="translated">場合 &lt;code&gt;false&lt;/code&gt; （パッシブモード、デフォルト）、呼び出し側が明示的に行う必要があります &lt;code&gt;&lt;a href=&quot;#recv-1&quot;&gt;recv&lt;/a&gt;&lt;/code&gt; ソケットから入手可能なデータを取得するための呼び出しを。</target>
        </trans-unit>
        <trans-unit id="56e3643f360d9383768007f097296d7135ef22f5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt; then peers are not shared. If &lt;code&gt;[node()]&lt;/code&gt; then peers are shared with the specified list of nodes. If &lt;code&gt;eval()&lt;/code&gt; then peers are shared with the nodes returned by the specified function, evaluated whenever a peer connection becomes available or a remote service requests information about local connections. The value &lt;code&gt;true&lt;/code&gt; is equivalent to &lt;code&gt;fun &lt;code&gt;erlang:nodes/0&lt;/code&gt;&lt;/code&gt;. The value &lt;code&gt;node()&lt;/code&gt; in a list is ignored, so a collection of services can all be configured to share with the same list of nodes.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、ピアは共有されません。もし &lt;code&gt;[node()]&lt;/code&gt; 次に、ピアは、ノードの指定されたリストと共有されます。 &lt;code&gt;eval()&lt;/code&gt; の場合、ピアは指定された関数によって返されるノードと共有され、ピア接続が利用可能になるか、リモートサービスがローカル接続に関する情報を要求するたびに評価されます。値 &lt;code&gt;true&lt;/code&gt; は、 &lt;code&gt;fun &lt;code&gt;erlang:nodes/0&lt;/code&gt;&lt;/code&gt; と同等です。リスト内の値 &lt;code&gt;node()&lt;/code&gt; は無視されるため、サービスのコレクションはすべて、同じノードリストと共有するように構成できます。</target>
        </trans-unit>
        <trans-unit id="61331cf5138ed4df60722b0902d831feeb5514c9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt; then remote peers are not used. If &lt;code&gt;[node()]&lt;/code&gt; then only peers from the specified list of nodes are used. If &lt;code&gt;eval()&lt;/code&gt; then only peers returned by the specified function are used, evaluated whenever a remote service communicates information about an available peer connection. The value &lt;code&gt;true&lt;/code&gt; is equivalent to &lt;code&gt;fun &lt;code&gt;erlang:nodes/0&lt;/code&gt;&lt;/code&gt;. The value &lt;code&gt;node()&lt;/code&gt; in a list is ignored.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、リモートピアは使用されません。 &lt;code&gt;[node()]&lt;/code&gt; の場合、指定されたノードのリストからのピアのみが使用されます。 &lt;code&gt;eval()&lt;/code&gt; の場合、指定された関数によって返されたピアのみが使用され、リモートサービスが利用可能なピア接続に関する情報を通信するたびに評価されます。値 &lt;code&gt;true&lt;/code&gt; は、 &lt;code&gt;fun &lt;code&gt;erlang:nodes/0&lt;/code&gt;&lt;/code&gt; と同等です。リスト内の値 &lt;code&gt;node()&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="515f5f660b2b6a5321a3301134d45702f7c8d34e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, disables the client to connect to the server if any user interaction is needed, such as accepting the server to be added to the &lt;code&gt;known_hosts&lt;/code&gt; file, or supplying a password.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;known_hosts&lt;/code&gt; ファイルへのサーバーの追加の受け入れやパスワードの入力など、ユーザーの操作が必要な場合に、クライアントがサーバーに接続できないようにします。</target>
        </trans-unit>
        <trans-unit id="2f21ed8efde9cbba7a84e9561d2bee32978fafa7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;false&lt;/code&gt;, the key is not saved and the key will still be unknown at the next access of the same host.</source>
          <target state="translated">場合は &lt;code&gt;false&lt;/code&gt; を、キーが保存されず、キーはまだ同じホストの次のアクセスでは不明となります。</target>
        </trans-unit>
        <trans-unit id="6c171a334054ea3d178b695378164bb4717dbc73" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;file:native_name_encoding/0&lt;/code&gt; returns &lt;code&gt;latin1&lt;/code&gt;, no translation of path names is done.</source>
          <target state="translated">場合は &lt;code&gt;file:native_name_encoding/0&lt;/code&gt; を返しますが &lt;code&gt;latin1&lt;/code&gt; の、パス名のない変換は行われません。</target>
        </trans-unit>
        <trans-unit id="174e5b29f214dbcb97eabc33b079cdd65ed3ff4c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;file:native_name_encoding/0&lt;/code&gt; returns &lt;code&gt;utf8&lt;/code&gt;, path names are encoded in UTF-8 when creating tar files, and path names are assumed to be encoded in UTF-8 when extracting tar files.</source>
          <target state="translated">&lt;code&gt;file:native_name_encoding/0&lt;/code&gt; が &lt;code&gt;utf8&lt;/code&gt; を返す場合、パス名はtarファイルの作成時にUTF-8でエンコードされ、パス名はtarファイルの抽出時にUTF-8でエンコードされると想定されます。</target>
        </trans-unit>
        <trans-unit id="53f00d54c4cf2784d07f86c8a1f69d22126e8edd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;final&lt;/code&gt; is returned, the time offset was already in the final state. This either because another &lt;code&gt;erlang:system_flag(time_offset, finalize)&lt;/code&gt; call or because &lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">場合は &lt;code&gt;final&lt;/code&gt; 返され、オフセット時間は、最終的な状態ですでにでした。これは、別の &lt;code&gt;erlang:system_flag(time_offset, finalize)&lt;/code&gt; 呼び出し、または &lt;code&gt;&lt;a href=&quot;time_correction#No_Time_Warp_Mode&quot;&gt;no time warp mode&lt;/a&gt;&lt;/code&gt; が使用されていないためです。</target>
        </trans-unit>
        <trans-unit id="7d84ff72a66a5f1dc4702c44281724bb233b3cbb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, the backup includes only those objects that have been created, modified, or deleted since the last backup or restore (that is, an incremental backup). After the backup, any objects that were marked dirty are now clean, and any objects that had been marked for deletion are deleted.</source>
          <target state="translated">&lt;code&gt;flags&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合、バックアップが（、増分バックアップである）、作成、変更、または削除された前回のバックアップ以降または復元されているオブジェクトのみを含んでいます。バックアップ後、ダーティとマークされたオブジェクトはすべてクリーンになり、削除のマークが付けられていたオブジェクトはすべて削除されます。</target>
        </trans-unit>
        <trans-unit id="1b22e611455eedf00229374381cf3ded5d86286d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;EI_BIN&lt;/code&gt;, a fifth argument &lt;code&gt;int *size&lt;/code&gt; is required, so that the size of the object can be returned.</source>
          <target state="translated">場合は &lt;code&gt;flags&lt;/code&gt; ある &lt;code&gt;EI_BIN&lt;/code&gt; 、5番目の引数 &lt;code&gt;int *size&lt;/code&gt; 、オブジェクトのサイズを返すことができるようにが必要です。</target>
        </trans-unit>
        <trans-unit id="5d03c462ed0e1501d3ca648701da33656f727855" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;flags&lt;/code&gt; is &lt;code&gt;EI_BIN&lt;/code&gt;, a fifth argument &lt;code&gt;size&lt;/code&gt; is required, indicating the size in bytes of the object pointed to by &lt;code&gt;v&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;flags&lt;/code&gt; ある &lt;code&gt;EI_BIN&lt;/code&gt; 、5番目の引数の &lt;code&gt;size&lt;/code&gt; オブジェクトのサイズをバイト単位で示し、必要によって指される &lt;code&gt;v&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef97c9cebbac0fa5b4a15003e98bfbe9b002c14c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hibernate&lt;/code&gt; is specified instead of a time-out value, the process goes into hibernation when waiting for the next message to arrive (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt; proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;hibernate&lt;/code&gt; 代わりにタイムアウト値を指定された次のメッセージは、（呼び出すことによって、到着するのを待っている場合、プロセスは休止状態に入る &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt; proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="07a12847c8010acaf74585bb590e3d2d2892d7bd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;hibernate&lt;/code&gt; is specified instead of a time-out value, the process goes into hibernation when waiting for the next message to arrive (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">場合は &lt;code&gt;hibernate&lt;/code&gt; 代わりにタイムアウト値を指定されて呼び出すことで（到着する次のメッセージを待っているとき、プロセスは休止状態に入る &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="4370781db47a41ab4e7732b376aa87b3dd2e229d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;indent_opt&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; (default), line breaks are inserted in types, contracts, and Erlang code to improve readability.</source>
          <target state="translated">場合 &lt;code&gt;indent_opt&lt;/code&gt; がに設定されている &lt;code&gt;true&lt;/code&gt; （デフォルト）、改行は読みやすくするために、種類、契約、およびErlangのコードに挿入されています。</target>
        </trans-unit>
        <trans-unit id="81060f399c0748631583d69217b03e975ffd94c5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_group&lt;/code&gt; is skipped, this function is called after &lt;code&gt;&lt;a href=&quot;#Module:post_init_per_group-5&quot;&gt;post_init_per_group&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;init_per_group&lt;/code&gt; がスキップされた場合、この関数は &lt;code&gt;&lt;a href=&quot;#Module:post_init_per_group-5&quot;&gt;post_init_per_group&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8a09af08638c9468193e1b25b2f9c1bcc8d0b0d0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_suite&lt;/code&gt; exists, it is called initially before the test cases are executed. It typically contains initializations common for all test cases in the suite, which are only to be performed once. &lt;code&gt;init_per_suite&lt;/code&gt; is recommended for setting up and verifying state and environment on the System Under Test (SUT) or the &lt;code&gt;Common Test&lt;/code&gt; host node, or both, so that the test cases in the suite executes correctly. The following are examples of initial configuration operations:</source>
          <target state="translated">&lt;code&gt;init_per_suite&lt;/code&gt; が存在する場合、テストケースが実行される前に最初に呼び出されます。通常、スイート内のすべてのテストケースに共通する初期化が含まれています。スイートのテストケースが正しく実行されるように、テスト対象システム（SUT）または &lt;code&gt;Common Test&lt;/code&gt; ホストノード、あるいはその両方で状態と環境を設定および検証するには、 &lt;code&gt;init_per_suite&lt;/code&gt; をお勧めします。以下は、初期構成操作の例です。</target>
        </trans-unit>
        <trans-unit id="e3cc6a46f9d6f7424ecfecec26999fd0b60da6a2" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_suite&lt;/code&gt; fails, all test cases in the test suite are skipped automatically (so called &lt;strong&gt;auto skipped&lt;/strong&gt;), including &lt;code&gt;end_per_suite&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;init_per_suite&lt;/code&gt; が失敗し、テストスイート内のすべてのテストケースは、（いわゆる自動的にスキップされている&lt;strong&gt;自動スキップ&lt;/strong&gt;を含め、） &lt;code&gt;end_per_suite&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="894e342a0e85afde6f3b96340c645a2b4dd22b1e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_suite&lt;/code&gt; fails, this function is called after &lt;code&gt;&lt;a href=&quot;#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;init_per_suite&lt;/code&gt; が失敗し、この機能は後に呼び出され &lt;code&gt;&lt;a href=&quot;#Module:post_init_per_suite-4&quot;&gt;post_init_per_suite&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bfe02f751dfef43151df61c0738ad37b3fb27d99" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_testcase&lt;/code&gt; crashes (called &lt;strong&gt;auto skipped&lt;/strong&gt;).</source>
          <target state="translated">&lt;code&gt;init_per_testcase&lt;/code&gt; がクラッシュした場合（&lt;strong&gt;auto skipped&lt;/strong&gt;と呼ばれる）。</target>
        </trans-unit>
        <trans-unit id="7150a88f54c0b7881134625da98b5bed12371c8e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_testcase&lt;/code&gt; crashes, or returns &lt;code&gt;{skip,Reason}&lt;/code&gt; or &lt;code&gt;{fail,Reason}&lt;/code&gt;, function &lt;code&gt;end_per_testcase&lt;/code&gt; is not called.</source>
          <target state="translated">&lt;code&gt;init_per_testcase&lt;/code&gt; がクラッシュするか、または &lt;code&gt;{skip,Reason}&lt;/code&gt; または &lt;code&gt;{fail,Reason}&lt;/code&gt; 返す場合、関数 &lt;code&gt;end_per_testcase&lt;/code&gt; は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="89e72fa5ab521b91a322a6c022357a5ac272ea72" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_testcase&lt;/code&gt; exists, it is called before each test case in the suite. It typically contains initialization that must be done for each test case (analog to &lt;code&gt;init_per_suite&lt;/code&gt; for the suite).</source>
          <target state="translated">場合 &lt;code&gt;init_per_testcase&lt;/code&gt; が存在する、それがスイート内の各テストケースの前に呼び出されます。通常、各テストケース（スイートの &lt;code&gt;init_per_suite&lt;/code&gt; のアナログ）に対して実行する必要のある初期化が含まれています。</target>
        </trans-unit>
        <trans-unit id="72f622c1b041a5f9b4ffb1e9a77eb43b9ec5d211" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;init_per_testcase&lt;/code&gt; returns a tuple &lt;code&gt;{skip,Reason}&lt;/code&gt; (called &lt;strong&gt;user skipped&lt;/strong&gt;).</source>
          <target state="translated">&lt;code&gt;init_per_testcase&lt;/code&gt; がタプル &lt;code&gt;{skip,Reason}&lt;/code&gt; （&lt;strong&gt;ユーザースキップ&lt;/strong&gt;と呼ばれる）を返す場合。</target>
        </trans-unit>
        <trans-unit id="d395c2bde7c4e5cd016e96c83e2790c6164bde6e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;ip_access&lt;/code&gt; and &lt;code&gt;name_access&lt;/code&gt; are implemented similarly, we could write a &lt;code&gt;generic_access&lt;/code&gt; function using the &lt;code&gt;ListOfExtraArguments&lt;/code&gt;:</source>
          <target state="translated">場合 &lt;code&gt;ip_access&lt;/code&gt; と &lt;code&gt;name_access&lt;/code&gt; が同様に実施され、我々は書くことができ &lt;code&gt;generic_access&lt;/code&gt; の使用機能を &lt;code&gt;ListOfExtraArguments&lt;/code&gt; を：</target>
        </trans-unit>
        <trans-unit id="ab359c8b6df991113724100b5a067f71b56dbab9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keysearch&lt;/code&gt; returns the atom &lt;code&gt;false&lt;/code&gt;, some error has occurred and the server sends back the message:</source>
          <target state="translated">&lt;code&gt;keysearch&lt;/code&gt; がアトム &lt;code&gt;false&lt;/code&gt; を返す場合、何らかのエラーが発生し、サーバーはメッセージを送り返します。</target>
        </trans-unit>
        <trans-unit id="471dd07d8c17d433b665f7f28142ddb0c9a5ccb4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;keysearch&lt;/code&gt; returns:</source>
          <target state="translated">&lt;code&gt;keysearch&lt;/code&gt; が返された場合：</target>
        </trans-unit>
        <trans-unit id="1a3183f931de40dbb6f7631f18d3f43161a10688" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;kill&lt;/code&gt; is not defined in the map, the system default will be used. The default system default is &lt;code&gt;true&lt;/code&gt;. It can be changed by either option &lt;code&gt;&lt;a href=&quot;erl#+hmaxk&quot;&gt;+hmaxk&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt; erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マップで &lt;code&gt;kill&lt;/code&gt; が定義されていない場合は、システムのデフォルトが使用されます。デフォルトのシステムデフォルトは &lt;code&gt;true&lt;/code&gt; です。これは、どちらかのオプションで変更することができます &lt;code&gt;&lt;a href=&quot;erl#+hmaxk&quot;&gt;+hmaxk&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;erl(1)&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt; erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8473687ede2e043c5626f2dc6d081f3c7f8c834a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;kill&lt;/code&gt; is not defined in the map, the system default will be used. The default system default is &lt;code&gt;true&lt;/code&gt;. It can be changed by either option &lt;code&gt;&lt;a href=&quot;erl#+hmaxk&quot;&gt;+hmaxk&lt;/a&gt;&lt;/code&gt; in &lt;code&gt;erl(1)&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt;erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;kill&lt;/code&gt; がマップで定義されていない場合、システムのデフォルトが使用されます。デフォルトのシステムデフォルトは &lt;code&gt;true&lt;/code&gt; です。これは、どちらかのオプションで変更することができます &lt;code&gt;&lt;a href=&quot;erl#+hmaxk&quot;&gt;+hmaxk&lt;/a&gt;&lt;/code&gt; で &lt;code&gt;erl(1)&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#system_flag_max_heap_size&quot;&gt;erlang:system_flag(max_heap_size, MaxHeapSize)&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8bce3cc2e82b9a6fd5502ccdd6aead42b567ec06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;local&lt;/code&gt; is specified as argument, Debugger interprets code only at the current node. If &lt;code&gt;global&lt;/code&gt; is specified as argument, Debugger interprets code at all known nodes, this is the default.</source>
          <target state="translated">場合 &lt;code&gt;local&lt;/code&gt; 引数として指定され、デバッガは、現在のノードでコードを解釈します。場合は &lt;code&gt;global&lt;/code&gt; 、すべての既知のノードで、引数、デバッガ解釈コードとして指定され、これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="f7b7e2ac7280eca021f5062e79e83b7222745d33" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;m:fact/1&lt;/code&gt; is called with a negative number as argument, no clause head matches. A &lt;code&gt;function_clause&lt;/code&gt; runtime error occurs.</source>
          <target state="translated">場合は &lt;code&gt;m:fact/1&lt;/code&gt; 引数なし句ヘッドの試合など、負の数と呼ばれています。 &lt;code&gt;function_clause&lt;/code&gt; のランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="78902773cd5b20b28d3f472a6d23e48932225627" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;master&lt;/code&gt;, one master agent is started. Otherwise, no agents are started.</source>
          <target state="translated">&lt;code&gt;master&lt;/code&gt; の場合、1つのマスターエージェントが開始されます。それ以外の場合、エージェントは開始されません。</target>
        </trans-unit>
        <trans-unit id="ababfa264cf2c0471a517629bda5d420f24412f7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;maximum&lt;/code&gt; is passed as &lt;code&gt;Type&lt;/code&gt; and the emulator is not run in instrumented mode.</source>
          <target state="translated">場合は &lt;code&gt;maximum&lt;/code&gt; として渡される &lt;code&gt;Type&lt;/code&gt; とエミュレータは、インストルメントモードで実行されていません。</target>
        </trans-unit>
        <trans-unit id="fb16ce380eb14a73a96ecf98dda7ccaebbde8485" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;mon&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, a successful call stores the identity of the monitor in the &lt;code&gt;&lt;a href=&quot;#ErlNifMonitor&quot;&gt;ErlNifMonitor&lt;/a&gt;&lt;/code&gt; struct pointed to by &lt;code&gt;mon&lt;/code&gt;. This identifier is used to refer to the monitor for later removal with &lt;code&gt;&lt;a href=&quot;#enif_demonitor_process&quot;&gt;enif_demonitor_process&lt;/a&gt;&lt;/code&gt; or compare with &lt;code&gt;&lt;a href=&quot;#enif_compare_monitors&quot;&gt;enif_compare_monitors&lt;/a&gt;&lt;/code&gt;. A monitor is automatically removed when it triggers or when the resource is deallocated.</source>
          <target state="translated">&lt;code&gt;mon&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、呼び出しが成功すると、モニターのIDが &lt;code&gt;mon&lt;/code&gt; が指す &lt;code&gt;&lt;a href=&quot;#ErlNifMonitor&quot;&gt;ErlNifMonitor&lt;/a&gt;&lt;/code&gt; 構造体に格納されます。この識別子は、後で除去するためのモニタを参照するために使用される &lt;code&gt;&lt;a href=&quot;#enif_demonitor_process&quot;&gt;enif_demonitor_process&lt;/a&gt;&lt;/code&gt; またはと比較 &lt;code&gt;&lt;a href=&quot;#enif_compare_monitors&quot;&gt;enif_compare_monitors&lt;/a&gt;&lt;/code&gt; 。モニターは、トリガーされたとき、またはリソースが割り当て解除されたときに自動的に削除されます。</target>
        </trans-unit>
        <trans-unit id="e7557ef34e7c482b82151565597fe49987e4f520" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;msg_env&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt;, the &lt;code&gt;msg&lt;/code&gt; term is copied and the original term and its environment is still valid after the call.</source>
          <target state="translated">&lt;code&gt;msg_env&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; に設定されている場合、 &lt;code&gt;msg&lt;/code&gt; 用語がコピーされ、元の用語とその環境は呼び出し後も有効です。</target>
        </trans-unit>
        <trans-unit id="3324f7db747bf81fb1767f13442861504e9e2dd0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;myapp&lt;/code&gt; is running at &lt;code&gt;cp3&lt;/code&gt;, and if &lt;code&gt;cp2&lt;/code&gt; now restarts, it does not restart &lt;code&gt;myapp&lt;/code&gt;, as the order between the &lt;code&gt;cp2&lt;/code&gt; and &lt;code&gt;cp3&lt;/code&gt; nodes is undefined.</source>
          <target state="translated">場合 &lt;code&gt;myapp&lt;/code&gt; にはで実行されている &lt;code&gt;cp3&lt;/code&gt; 、及び場合 &lt;code&gt;cp2&lt;/code&gt; 今再起動し、それが再起動しない &lt;code&gt;myapp&lt;/code&gt; のを間の順序として、 &lt;code&gt;cp2&lt;/code&gt; 及び &lt;code&gt;cp3&lt;/code&gt; のノードが定義されていません。</target>
        </trans-unit>
        <trans-unit id="410c990db3f3097c54b66efc65b17fbe9e2bad60" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;nc&lt;/code&gt; is the current number of multiblock carriers (the main multiblock carrier excluded) managed by an allocator, the size of the next &lt;code&gt;mseg_alloc&lt;/code&gt; multiblock carrier allocated by this allocator is roughly &lt;code&gt;smbcs+nc*(lmbcs-smbcs)/mbcgs&lt;/code&gt; when &lt;code&gt;nc &amp;lt;= mbcgs&lt;/code&gt;, and &lt;code&gt;lmbcs&lt;/code&gt; when &lt;code&gt;nc &amp;gt; mbcgs&lt;/code&gt;. If the value of parameter &lt;code&gt;sbct&lt;/code&gt; is larger than the value of parameter &lt;code&gt;lmbcs&lt;/code&gt;, the allocator may have to create multiblock carriers that are larger than the value of parameter &lt;code&gt;lmbcs&lt;/code&gt;, though. Singleblock carriers allocated through &lt;code&gt;mseg_alloc&lt;/code&gt; are sized to whole pages.</source>
          <target state="translated">&lt;code&gt;nc&lt;/code&gt; がアロケータによって管理されているマルチブロックキャリア（メインマルチブロックキャリアを除く）の現在の数である場合、このアロケータによって割り当てられた次の &lt;code&gt;mseg_alloc&lt;/code&gt; マルチブロックキャリアのサイズは、 &lt;code&gt;nc &amp;lt;= mbcgs&lt;/code&gt; 場合、おおよそ &lt;code&gt;smbcs+nc*(lmbcs-smbcs)/mbcgs&lt;/code&gt; mbcgs、および &lt;code&gt;lmbcs&lt;/code&gt; &lt;code&gt;nc &amp;gt; mbcgs&lt;/code&gt; 。パラメータの値場合 &lt;code&gt;sbct&lt;/code&gt; パラメータの値よりも大きい &lt;code&gt;lmbcs&lt;/code&gt; 、アロケータは、パラメータの値よりも大きいマルチキャリア作成する必要がある可能性があり &lt;code&gt;lmbcs&lt;/code&gt; かかわらず、。割り当てられSingleblockキャリア &lt;code&gt;mseg_alloc&lt;/code&gt; は、ページ全体にサイズ設定されています。</target>
        </trans-unit>
        <trans-unit id="00a9d4efd00c94ba68d6320fea95c0909f36f665" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;no_repeat&lt;/code&gt; is set as value, the repeated file sync operation is disabled, and it is the operating system settings that determine how quickly or slowly data is written to disk. The user can also call the &lt;code&gt;&lt;a href=&quot;logger_std_h#filesync-1&quot;&gt;filesync/1&lt;/a&gt;&lt;/code&gt; function to perform a file sync.</source>
          <target state="translated">場合 &lt;code&gt;no_repeat&lt;/code&gt; が値として設定され、繰り返しのファイル同期操作が無効になり、それがディスクに書き込まれますどのように迅速にまたはゆっくりとデータを決定オペレーティングシステムの設定です。ユーザーは、 &lt;code&gt;&lt;a href=&quot;logger_std_h#filesync-1&quot;&gt;filesync/1&lt;/a&gt;&lt;/code&gt; 関数を呼び出してファイル同期を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="cf5fe50553f5c7b137deba5f80790419102c9acc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;no_repeat&lt;/code&gt; is set as value, the repeated sync operation is disabled. The user can also call the &lt;code&gt;&lt;a href=&quot;logger_disk_log_h#filesync-1&quot;&gt;filesync/1 &lt;/a&gt;&lt;/code&gt; function to perform a disk_log sync.</source>
          <target state="translated">場合 &lt;code&gt;no_repeat&lt;/code&gt; が値として設定され、繰り返し同期操作が無効になっています。ユーザーは、 &lt;code&gt;&lt;a href=&quot;logger_disk_log_h#filesync-1&quot;&gt;filesync/1 &lt;/a&gt;&lt;/code&gt; 関数を呼び出してdisk_log同期を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="960e9f5afba10edf0b60921b0e8e69fa2c34179d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;no_repeat&lt;/code&gt; is set as value, the repeated sync operation is disabled. The user can also call the &lt;code&gt;&lt;a href=&quot;logger_disk_log_h#filesync-1&quot;&gt;filesync/1&lt;/a&gt;&lt;/code&gt; function to perform a disk_log sync.</source>
          <target state="translated">場合 &lt;code&gt;no_repeat&lt;/code&gt; が値として設定され、繰り返し同期操作が無効になっています。ユーザーは、 &lt;code&gt;&lt;a href=&quot;logger_disk_log_h#filesync-1&quot;&gt;filesync/1&lt;/a&gt;&lt;/code&gt; 関数を呼び出してdisk_log同期を実行することもできます。</target>
        </trans-unit>
        <trans-unit id="a26d7bcc04c3b56013d1be0c1072c79ecbf5d9d4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;node&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, it is a pointer to a buffer where the function can fill in the name of the node where &lt;code&gt;name&lt;/code&gt; is found. &lt;code&gt;node&lt;/code&gt; can be passed directly to &lt;code&gt;ei_connect()&lt;/code&gt; if necessary.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、それは、関数が &lt;code&gt;name&lt;/code&gt; が見つかったノードの名前を入力できるバッファーへのポインターです。必要に応じて、 &lt;code&gt;node&lt;/code&gt; を &lt;code&gt;ei_connect()&lt;/code&gt; に直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="92fc938fa7cba74ec1f9bb43ffd7daba5627a4cc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;node&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, it is a pointer to a buffer where the function can fill in the name of the node where &lt;code&gt;name&lt;/code&gt; is found. &lt;code&gt;node&lt;/code&gt; can be passed directly to &lt;code&gt;erl_connect()&lt;/code&gt; if necessary.</source>
          <target state="translated">&lt;code&gt;node&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、それは、関数が &lt;code&gt;name&lt;/code&gt; が見つかったノードの名前を入力できるバッファーへのポインターです。 &lt;code&gt;node&lt;/code&gt; は、必要に応じて &lt;code&gt;erl_connect()&lt;/code&gt; に直接渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8bcb0ecfc7e63283704c689b708fb3722abb28bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;once&lt;/code&gt;, only one message is automatically placed in the message queue, and after that the mode is automatically reset to passive. This provides flow control and the possibility for the receiver to listen for its incoming SCTP data interleaved with other inter-process messages.</source>
          <target state="translated">&lt;code&gt;once&lt;/code&gt; 場合、メッセージは1つだけメッセージキューに自動的に配置され、その後、モードは自動的にパッシブにリセットされます。これにより、フロー制御と、受信者が他のプロセス間メッセージとインターリーブされた着信SCTPデータをリッスンする可能性が提供されます。</target>
        </trans-unit>
        <trans-unit id="ef8342250cfaa0e36ec9bd08880c6f82e62cfce4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;os_sup_enable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this function must be called &lt;strong&gt;after&lt;/strong&gt; OS_Mon/&lt;code&gt;os_sup&lt;/code&gt; is stopped. &lt;code&gt;Dir&lt;/code&gt; defines the directory which contains the backup copy and the Erlang specific configuration files for &lt;code&gt;syslogd&lt;/code&gt;, and a named pipe to receive the messages from &lt;code&gt;syslogd&lt;/code&gt;. Defaults to &lt;code&gt;&quot;/etc&quot;&lt;/code&gt;. &lt;code&gt;Conf&lt;/code&gt; defines the full name of the configuration file for &lt;code&gt;syslogd&lt;/code&gt;. Default is &lt;code&gt;&quot;/etc/syslog.conf&quot;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;os_sup_enable&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、この関数が呼び出さなければなりません&lt;strong&gt;後&lt;/strong&gt; OS_Mon / &lt;code&gt;os_sup&lt;/code&gt; が停止しています。 &lt;code&gt;Dir&lt;/code&gt; は、 &lt;code&gt;syslogd&lt;/code&gt; のバックアップコピーとErlang固有の構成ファイル、および &lt;code&gt;syslogd&lt;/code&gt; からメッセージを受信する名前付きパイプを含むディレクトリを定義します。デフォルトは &lt;code&gt;&quot;/etc&quot;&lt;/code&gt; です。 &lt;code&gt;Conf&lt;/code&gt; は、 &lt;code&gt;syslogd&lt;/code&gt; の構成ファイルの完全な名前を定義します。デフォルトは &lt;code&gt;&quot;/etc/syslog.conf&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7a700fd6dad9f4c64ccd4666632fae200f7d79bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;os_sup_enable&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, this function must be called &lt;strong&gt;before&lt;/strong&gt; OS_Mon/&lt;code&gt;os_sup&lt;/code&gt; is started. &lt;code&gt;Dir&lt;/code&gt; defines the directory which contains the backup copy and the Erlang specific configuration files for &lt;code&gt;syslogd&lt;/code&gt;, and a named pipe to receive the messages from &lt;code&gt;syslogd&lt;/code&gt;. Defaults to &lt;code&gt;&quot;/etc&quot;&lt;/code&gt;. &lt;code&gt;Conf&lt;/code&gt; defines the full name of the configuration file for &lt;code&gt;syslogd&lt;/code&gt;. Default is &lt;code&gt;&quot;/etc/syslog.conf&quot;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;os_sup_enable&lt;/code&gt; がある &lt;code&gt;true&lt;/code&gt; 、この関数が呼び出される必要があります&lt;strong&gt;前に、&lt;/strong&gt; OS_Mon / &lt;code&gt;os_sup&lt;/code&gt; が開始されます。 &lt;code&gt;Dir&lt;/code&gt; は、 &lt;code&gt;syslogd&lt;/code&gt; のバックアップコピーとErlang固有の構成ファイル、および &lt;code&gt;syslogd&lt;/code&gt; からメッセージを受信する名前付きパイプを含むディレクトリを定義します。デフォルトは &lt;code&gt;&quot;/etc&quot;&lt;/code&gt; です。 &lt;code&gt;Conf&lt;/code&gt; は、 &lt;code&gt;syslogd&lt;/code&gt; の構成ファイルの完全な名前を定義します。デフォルトは &lt;code&gt;&quot;/etc/syslog.conf&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="77f7d7d94477bf710f75a97f120cb44318c86bb9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;preliminary&lt;/code&gt; is returned, finalization was performed and the time offset is now final.</source>
          <target state="translated">&lt;code&gt;preliminary&lt;/code&gt; が返された場合、ファイナライズが実行され、時間オフセットが最終となります。</target>
        </trans-unit>
        <trans-unit id="68ca185ba5a790749853b97ac87472bb69e0f79b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;raw&lt;/code&gt; is not found in the list, it is added.</source>
          <target state="translated">リストに &lt;code&gt;raw&lt;/code&gt; が見つからない場合は、追加されます。</target>
        </trans-unit>
        <trans-unit id="31a44d264c5bd3a087ba168aa0cf5ef541ffc19d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;read/2&lt;/code&gt; calls are for sizes not significantly less than, or even greater than &lt;code&gt;Size&lt;/code&gt; bytes, no performance gain can be expected.</source>
          <target state="translated">場合は &lt;code&gt;read/2&lt;/code&gt; の呼び出しはない大幅未満のサイズのためのもの、あるいはより大きな &lt;code&gt;Size&lt;/code&gt; バイト、何もパフォーマンスの向上は期待できません。</target>
        </trans-unit>
        <trans-unit id="3f7ab732c2a40901f7be417a921a39c57a4d5b7c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;read&lt;/code&gt; is specified, only get requests are logged.</source>
          <target state="translated">&lt;code&gt;read&lt;/code&gt; が指定されている場合、取得リクエストのみがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="3b544ab09dc82eacf7049bd88c54823547cf046b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;read&lt;/code&gt; is specified, only received messages are logged.</source>
          <target state="translated">場合は &lt;code&gt;read&lt;/code&gt; 指定されている、だけ受信したメッセージがログに記録されています。</target>
        </trans-unit>
        <trans-unit id="4b7ba5f30d6fa892ea1037782ff4251339643dcf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;read_concurrency&lt;/code&gt; was enabled for the table.</source>
          <target state="translated">テーブルで &lt;code&gt;read_concurrency&lt;/code&gt; が有効になっていた場合。</target>
        </trans-unit>
        <trans-unit id="b29a25b884982cf8d002411e5810c5627d5ba822" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;read_write&lt;/code&gt;, all requests are logged.</source>
          <target state="translated">&lt;code&gt;read_write&lt;/code&gt; の場合、すべての要求がログに記録されます。</target>
        </trans-unit>
        <trans-unit id="015bb54da55bcc930a4cbf6d43e9056cf7cdedf5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;read_write&lt;/code&gt;, both outgoing and incoming messages are logged.</source>
          <target state="translated">&lt;code&gt;read_write&lt;/code&gt; の場合、送信メッセージと受信メッセージの両方がログに記録されます。</target>
        </trans-unit>
        <trans-unit id="b1376e2f35266b87691b21e50d6085d572b9fcbd" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;registered_name&lt;/code&gt; is part of &lt;code&gt;ItemList&lt;/code&gt; and the process has no name registered, a &lt;code&gt;{registered_name, []}&lt;/code&gt;, &lt;code&gt;InfoTuple&lt;/code&gt;&lt;strong&gt;will&lt;/strong&gt; be included in the resulting &lt;code&gt;InfoTupleList&lt;/code&gt;. This behavior is different when a single &lt;code&gt;Item =:= registered_name&lt;/code&gt; is specified, and when &lt;code&gt;process_info/1&lt;/code&gt; is used.</source>
          <target state="translated">場合 &lt;code&gt;registered_name&lt;/code&gt; がの一部で &lt;code&gt;ItemList&lt;/code&gt; 処理が登録された名前を持っていない、 &lt;code&gt;{registered_name, []}&lt;/code&gt; 、 &lt;code&gt;InfoTuple&lt;/code&gt; が&lt;strong&gt;あろう&lt;/strong&gt;結果の中に含まれ &lt;code&gt;InfoTupleList&lt;/code&gt; 。この動作は、単一の &lt;code&gt;Item =:= registered_name&lt;/code&gt; が指定されている場合と、 &lt;code&gt;process_info/1&lt;/code&gt; が使用されている場合とは異なります。</target>
        </trans-unit>
        <trans-unit id="1c5b2b100f53895b2b8688baa94d7b9678f28feb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;remove_handler&lt;/code&gt; is returned, the event handler is deleted by calling &lt;code&gt;Module:terminate(remove_handler,State)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;remove_handler&lt;/code&gt; が返された場合、 &lt;code&gt;Module:terminate(remove_handler,State)&lt;/code&gt; 呼び出すことにより、イベントハンドラーが削除されます。</target>
        </trans-unit>
        <trans-unit id="068df812b1be7a5c6fb7ba1d84c59687bbec92c6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;script_nocache&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the HTTP server by default adds the header fields necessary to prevent proxies from caching the page. Generally this is preferred. Default to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;script_nocache&lt;/code&gt; がに設定されている &lt;code&gt;true&lt;/code&gt; 、デフォルトでHTTPサーバは、ページをキャッシュからプロキシを防ぐのに必要なヘッダフィールドを追加します。一般にこれが優先されます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d372c1d474f731f0f4b202ab8bda7211457e68a7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;set_env/4&lt;/code&gt; is called before the application is loaded, the application environment values specified in file &lt;code&gt;Application.app&lt;/code&gt; override the ones previously set. This is also true for application reloads.</source>
          <target state="translated">場合 &lt;code&gt;set_env/4&lt;/code&gt; は、アプリケーションがロードされる前に呼び出され、ファイルで指定されたアプリケーション環境値 &lt;code&gt;Application.app&lt;/code&gt; は、あらかじめ設定されたものを上書きします。これは、アプリケーションのリロードにも当てはまります。</target>
        </trans-unit>
        <trans-unit id="82d435019a14ecf65737ecf3db3bfd456332513c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;size&lt;/code&gt; is not &lt;code&gt;NULL&lt;/code&gt;, the size of the head is placed there.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; でない場合、ヘッドのサイズがそこに配置されます。</target>
        </trans-unit>
        <trans-unit id="4feb70b4204ade06d5e528b8d52ed62d294cf47b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;stop&lt;/code&gt; is returned, the log event is immediately discarded. If the filter is primary, no handler filters or callbacks are called. If it is a handler filter, the corresponding handler callback is not called, but the log event is forwarded to filters attached to the next handler, if any.</source>
          <target state="translated">場合は &lt;code&gt;stop&lt;/code&gt; 返され、ログイベントはすぐに破棄されます。フィルターがプライマリの場合、ハンドラーフィルターやコールバックは呼び出されません。ハンドラーフィルターの場合、対応するハンドラーコールバックは呼び出されませんが、ログイベントは、次のハンドラーに接続されているフィルターがあれば、それに転送されます。</target>
        </trans-unit>
        <trans-unit id="4b0fd3902aab568d673cab668aeb876afecb3d16" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sync_mode_qlen&lt;/code&gt; is set to &lt;code&gt;0&lt;/code&gt;, all log events are handled synchronously. That is, asynchronous logging is disabled.</source>
          <target state="translated">&lt;code&gt;sync_mode_qlen&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; に設定されている場合、すべてのログイベントは同期的に処理されます。つまり、非同期ロギングが無効になります。</target>
        </trans-unit>
        <trans-unit id="fe26b781dc9f18c574b4f5cea83e1dc7a0898036" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;sync_mode_qlen&lt;/code&gt; is set to the same value as &lt;code&gt;drop_mode_qlen&lt;/code&gt;, synchronous mode is disabled. That is, the handler always runs in asynchronous mode, unless dropping or flushing is invoked.</source>
          <target state="translated">&lt;code&gt;sync_mode_qlen&lt;/code&gt; が &lt;code&gt;drop_mode_qlen&lt;/code&gt; と同じ値に設定されている場合、同期モードは無効になります。つまり、ドロップまたはフラッシュが呼び出されない限り、ハンドラーは常に非同期モードで実行されます。</target>
        </trans-unit>
        <trans-unit id="df2d416ddedf4f1525642d418b4917eca16a89fc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;term&lt;/code&gt; identifies a node local port, this function initializes the port variable &lt;code&gt;*port_id&lt;/code&gt; from it and returns &lt;code&gt;true&lt;/code&gt;. Otherwise returns &lt;code&gt;false&lt;/code&gt;. No check is done to see if the port is alive.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; がノードローカルポートを識別する場合、この関数はポート変数 &lt;code&gt;*port_id&lt;/code&gt; を初期化し、 &lt;code&gt;true&lt;/code&gt; を返します。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。ポートが稼働しているかどうかを確認するチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="bb931f96868f0894c3ee44964627cb220396fbd0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;term&lt;/code&gt; is a tuple, this function sets &lt;code&gt;*array&lt;/code&gt; to point to an array containing the elements of the tuple, and sets &lt;code&gt;*arity&lt;/code&gt; to the number of elements. Notice that the array is read-only and &lt;code&gt;(*array)[N-1]&lt;/code&gt; is the Nth element of the tuple. &lt;code&gt;*array&lt;/code&gt; is undefined if the arity of the tuple is zero.</source>
          <target state="translated">&lt;code&gt;term&lt;/code&gt; がタプルの場合、この関数は &lt;code&gt;*array&lt;/code&gt; をタプルの要素を含む配列を指すように設定し、 &lt;code&gt;*arity&lt;/code&gt; を要素の数に設定します。配列は読み取り専用であり、 &lt;code&gt;(*array)[N-1]&lt;/code&gt; はタプルのN番目の要素です。タプルのアリティがゼロの場合、 &lt;code&gt;*array&lt;/code&gt; は未定義です。</target>
        </trans-unit>
        <trans-unit id="99ce7d95b89f5e150dfbf95c1a3d757a096ea716" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;term&lt;/code&gt; is the pid of a node local process, this function initializes the pid variable &lt;code&gt;*pid&lt;/code&gt; from it and returns &lt;code&gt;true&lt;/code&gt;. Otherwise returns &lt;code&gt;false&lt;/code&gt;. No check is done to see if the process is alive.</source>
          <target state="translated">場合 &lt;code&gt;term&lt;/code&gt; ノードのローカルプロセスのpidで、この機能は、PID変数を初期化 &lt;code&gt;*pid&lt;/code&gt; それからして返します &lt;code&gt;true&lt;/code&gt; 。それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。プロセスが生きているかどうかを確認するチェックは行われません。</target>
        </trans-unit>
        <trans-unit id="335749543c3f3f2a3a67c44896ae9fd2f2a9abbc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;throw/1&lt;/code&gt; is not evaluated within a catch, a &lt;code&gt;nocatch&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">&lt;code&gt;throw/1&lt;/code&gt; がcatch内で評価されない場合、 &lt;code&gt;nocatch&lt;/code&gt; ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="2871fa0784bdb523b8ad094e354b3376cbc7c2d1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;timetrap&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; is not set, the default values specified by &lt;code&gt;&lt;a href=&quot;#Module:suite-0&quot;&gt;Module:suite/0&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;#Module:group-1&quot;&gt;Module:group/1&lt;/a&gt;&lt;/code&gt;) are used.</source>
          <target state="translated">&lt;code&gt;timetrap&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; が設定されていない場合、 &lt;code&gt;&lt;a href=&quot;#Module:suite-0&quot;&gt;Module:suite/0&lt;/a&gt;&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;#Module:group-1&quot;&gt;Module:group/1&lt;/a&gt;&lt;/code&gt; ）で指定されたデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="531f47b8f34afb9e971187a621871b405723e46a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;timetrap&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt; is not set, the default values specified by &lt;code&gt;&lt;a href=&quot;#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; (or &lt;code&gt;&lt;a href=&quot;#Module:group-1&quot;&gt;group/1&lt;/a&gt;&lt;/code&gt;) are used.</source>
          <target state="translated">&lt;code&gt;timetrap&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; が設定されていない場合、 &lt;code&gt;&lt;a href=&quot;#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; （または &lt;code&gt;&lt;a href=&quot;#Module:group-1&quot;&gt;group/1&lt;/a&gt;&lt;/code&gt; ）で指定されたデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="976ebeb2288ae33fa6c9a2ec2a28980aa636376c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;timetrap&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt;, or both, is not set specifically for a particular test case, default values specified by function &lt;code&gt;&lt;a href=&quot;common_test#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; are used.</source>
          <target state="translated">場合 &lt;code&gt;timetrap&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; 、またはその両方は、特定のテストケースのために特別に設定されていない場合、デフォルト値は関数によって指定された &lt;code&gt;&lt;a href=&quot;common_test#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="f5b1ebc718d9766e9f004a96387fa62f22f383b1" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;timetrap&lt;/code&gt; or &lt;code&gt;require&lt;/code&gt;, or both, is not set specifically for a particular test case, default values specified by function &lt;code&gt;&lt;a href=&quot;ct_suite#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; are used.</source>
          <target state="translated">場合 &lt;code&gt;timetrap&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; 、またはその両方は、特定のテストケースのために特別に設定されていない場合、デフォルト値は関数によって指定された &lt;code&gt;&lt;a href=&quot;ct_suite#Module:suite-0&quot;&gt;suite/0&lt;/a&gt;&lt;/code&gt; 使用されています。</target>
        </trans-unit>
        <trans-unit id="744ac3e017c02db9473330a8d4a2dec44a7e8e75" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_call/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_call/5&lt;/code&gt; が定義されていない場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9e1c20b572719c3331469687919f2defd8437750" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_garbage_collection/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_garbage_collection/5&lt;/code&gt; が定義されていない場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b6da64932aab510304a9e86727b1e2bcbdfe8f0b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_ports/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_ports/5&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="50d620a56eb39b36411e41b4bc5a97c7bbafbd69" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_procs/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_procs/5&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9603bcd32c947b80ea34517cb4f3a01b71d378ab" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_receive/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_receive/5&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="df75f373657f0f91332cb47e91e892abb9c113a6" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_running_ports/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_running_ports/5&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5559d0a97110b67775d63df3a3e94529bc745fe9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_running_procs/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_running_procs/5&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="93b8b767ba992ffc91ebcedb4793839177d0df72" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trace_send/5&lt;/code&gt; is undefined, &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; is called instead.</source>
          <target state="translated">&lt;code&gt;trace_send/5&lt;/code&gt; が未定義の場合、代わりに &lt;code&gt;&lt;a href=&quot;#Module:trace-5&quot;&gt;Module:trace/5&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="901bf723e7561c2418b0b1c71d7584f891124177" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trans_req&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, then request(s) will be sent immediately (in its own message).</source>
          <target state="translated">場合 &lt;code&gt;trans_req&lt;/code&gt; がある &lt;code&gt;false&lt;/code&gt; 、その要求（複数可）（独自のメッセージで）すぐに送信されます。</target>
        </trans-unit>
        <trans-unit id="680ea9ebc8cd511dd23a5a2d9935ba441ee109e7" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;trans_req&lt;/code&gt; is true, then request(s) will instead be sent to the transaction sender process for accumulation and later sending (see &lt;code&gt;trans_ack_maxcount&lt;/code&gt;, &lt;code&gt;trans_req_maxcount&lt;/code&gt;, &lt;code&gt;trans_req_maxsize&lt;/code&gt;, &lt;code&gt;trans_ack_maxcount&lt;/code&gt; and &lt;code&gt;trans_timer&lt;/code&gt;).</source>
          <target state="translated">場合 &lt;code&gt;trans_req&lt;/code&gt; が真である、その要求（複数可）の代わりに、蓄積のためのトランザクションの送信者プロセスに送信され、後で（参照送る &lt;code&gt;trans_ack_maxcount&lt;/code&gt; 、 &lt;code&gt;trans_req_maxcount&lt;/code&gt; 、 &lt;code&gt;trans_req_maxsize&lt;/code&gt; 、 &lt;code&gt;trans_ack_maxcount&lt;/code&gt; と &lt;code&gt;trans_timer&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="287b344c66382cf8b1edce4da0960025c7e9b57c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; (default), the server sends a cookie extension in its HelloRetryRequest messages.</source>
          <target state="translated">もし &lt;code&gt;true&lt;/code&gt; （デフォルト）、サーバはそのHelloRetryRequestメッセージにクッキーの拡張子を送信します。</target>
        </trans-unit>
        <trans-unit id="e70881a85aca398937951a4668c24337f4bc60ca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; (full active mode) there is no flow control.</source>
          <target state="translated">もし &lt;code&gt;true&lt;/code&gt; （フルアクティブモード）は、フロー制御はありません。</target>
        </trans-unit>
        <trans-unit id="e48e65bf83526cb9dd2dcc5eaa66577b4aa53e75" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; (full active mode), the pending data or events are sent to the owning process.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; （フルアクティブモード）、保留中のデータやイベントを所有しているプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="25420436cf7ea356d88467267bb54e499c6238b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; (or &lt;code&gt;extended&lt;/code&gt;), the agent is multi-threaded, with one thread for each get request.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; （または &lt;code&gt;extended&lt;/code&gt; ）、エージェントは、各GET要求のための1つのスレッドで、マルチスレッド。</target>
        </trans-unit>
        <trans-unit id="f6d949864e0ff9ac2295f12de502f8af44fe5554" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt; the configuration files are re-read during start-up, and the contents of the configuration database ignored. Thus, if &lt;code&gt;true&lt;/code&gt;, changes to the configuration database are lost upon reboot of the agent.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、起動時に設定ファイルが再度読み込まれ、設定データベースの内容は無視されます。したがって、 &lt;code&gt;true&lt;/code&gt; の場合、構成データベースへの変更はエージェントの再起動時に失われます。</target>
        </trans-unit>
        <trans-unit id="5742f9a48f2a77c8abfa93b7448bf87101200ba9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, hibernates the &lt;code&gt;gen_statem&lt;/code&gt; by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; before going into &lt;code&gt;receive&lt;/code&gt; to wait for a new external event.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、休止状態 &lt;code&gt;gen_statem&lt;/code&gt; を呼び出すことによって &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; に入る前に &lt;code&gt;receive&lt;/code&gt; 新しい外部イベントを待ちます。</target>
        </trans-unit>
        <trans-unit id="1c34bbe208e229e88b9cf884fe83c6e4487267fe" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, induces an error on an attempt to send a message larger than the current PMTU size (which would require fragmentation/reassembling). Notice that message fragmentation does not affect the logical atomicity of its delivery; this option is provided for performance reasons only.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、現在のPMTUサイズより大きいメッセージを送信しようとするとエラーが発生します（断片化/再構成が必要になります）。メッセージの断片化は、その配信の論理的な原子性に影響を与えないことに注意してください。このオプションは、パフォーマンス上の理由でのみ提供されています。</target>
        </trans-unit>
        <trans-unit id="14dea9808b1f89c089706dd845be50b4ae8f0440" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, net_if binds to the IP address. If &lt;code&gt;false&lt;/code&gt;, net_if listens on any IP address on the host where it is running.</source>
          <target state="translated">もし &lt;code&gt;true&lt;/code&gt; IPアドレスに、net_if結合します。 &lt;code&gt;false&lt;/code&gt; の場合、net_ifは、それが実行されているホスト上の任意のIPアドレスで待機します。</target>
        </trans-unit>
        <trans-unit id="1a887d631ac5987f669427d5f352faeefbf326b5" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, net_if does not specify that the IP and port address should be reusable. If &lt;code&gt;false&lt;/code&gt;, the address is set to reusable.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、net_if IPおよびポートアドレスは再利用可能であることを指定していません。場合は &lt;code&gt;false&lt;/code&gt; を、アドレスが再利用可能に設定されています。</target>
        </trans-unit>
        <trans-unit id="f8ccef0dc480afe24c0ff21ece83c8c3800b5e39" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, postpones the current event and retries it after a &lt;strong&gt;state change&lt;/strong&gt; (&lt;code&gt;NextState =/= State&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、現在のイベントを延期し、&lt;strong&gt;状態の変更&lt;/strong&gt;後に再試行し&lt;strong&gt;ます&lt;/strong&gt;（ &lt;code&gt;NextState =/= State&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="5cd4ac0f7d30d624066e424ed5179bc26eafc35f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, postpones the current event and retries it when the state changes (&lt;code&gt;NextState =/= State&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; の場合、現在のイベントを延期し、状態が変化したときに再試行します（ &lt;code&gt;NextState =/= State&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="520af4aded931229fa7189fca614aa3fa7995a83" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the agent is multi-threaded, with one thread for each get request.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、エージェントは、各get要求のための1つのスレッドで、マルチスレッドです。</target>
        </trans-unit>
        <trans-unit id="89015f594d36423a0e641bd12c827ea801ee5cfb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the client does not print anything on authorization.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、クライアントは、認可には何も印刷されません。</target>
        </trans-unit>
        <trans-unit id="23b8e026fd6aadff53ba83122b74ea4391419aca" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the client saves an accepted host key to avoid the accept question the next time the same host is connected. If the option &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; is not present, the key is saved in the file &quot;known_hosts&quot;. See option &lt;code&gt;&lt;a href=&quot;#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; for the location of that file.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、クライアントが受け入れる質問に同じホストが接続されている次回を回避するために受け入れられたホストキーが保存されます。オプション &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; が存在しない場合、キーは「known_hosts」ファイルに保存されます。そのファイルの場所については、オプション &lt;code&gt;&lt;a href=&quot;#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="95c8aecfc16da9f44601b813f0d7e51d5bf0f4a9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the client saves an accepted host key to avoid the accept question the next time the same host is connected. If the option &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; is not present, the key is saved in the file &quot;known_hosts&quot;. See option &lt;code&gt;&lt;a href=&quot;ssh_file#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; for the location of that file.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、クライアントが受け入れる質問に同じホストが接続されている次回を回避するために受け入れられたホストキーが保存されます。オプション &lt;code&gt;&lt;a href=&quot;#type-key_cb_common_option&quot;&gt;key_cb&lt;/a&gt;&lt;/code&gt; が存在しない場合、キーはファイル「known_hosts」に保存されます。そのファイルの場所については、オプション &lt;code&gt;&lt;a href=&quot;ssh_file#type-user_dir_common_option&quot;&gt;user_dir&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b356ac942be95783b518ac898149e69ff7f29e06" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the execution time and reductions are accumulated.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、実行時間と削減が蓄積されています。</target>
        </trans-unit>
        <trans-unit id="a2c9b567f4306cd17d762c08a52cc878115d08b0" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, the log owners are notified when certain log events occur. Defaults to &lt;code&gt;false&lt;/code&gt;. The owners are sent one of the following messages when an event occurs:</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 特定のログイベントが発生した場合、ログ所有者が通知されます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。イベントが発生すると、所有者には次のいずれかのメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="dac3885367e9c29a28f95ee9e91f474fd1b0d8a3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true&lt;/code&gt;, this makes &lt;code&gt;epp_dodger&lt;/code&gt; replace any program forms that could not be parsed with nodes of type &lt;code&gt;text&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;erl_syntax#text-1&quot;&gt;erl_syntax:text/1&lt;/a&gt;&lt;/code&gt;), representing the raw token sequence of the form, instead of reporting a parse error. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;true&lt;/code&gt; 、この可能 &lt;code&gt;epp_dodger&lt;/code&gt; 型のノードで解析することができませんでした任意のプログラムのフォーム置き換える &lt;code&gt;text&lt;/code&gt; （参照 &lt;code&gt;&lt;a href=&quot;erl_syntax#text-1&quot;&gt;erl_syntax:text/1&lt;/a&gt;&lt;/code&gt; フォームの生のトークン列を表す、代わりのパースエラーを報告し、）。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="05b7850adc53f90dafb4ed1b3efc538359d746ae" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;true|once|N&lt;/code&gt; (active modes) received data or events are sent to the owning process. See &lt;code&gt;&lt;a href=&quot;#open-0&quot;&gt;open/0..2&lt;/a&gt;&lt;/code&gt; for the message format.</source>
          <target state="translated">場合は &lt;code&gt;true|once|N&lt;/code&gt; （アクティブモード）は、データを受信またはイベントが所有しているプロセスに送信されます。メッセージ形式については、 &lt;code&gt;&lt;a href=&quot;#open-0&quot;&gt;open/0..2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d40234d0ab231968f3d6203cda0f55c4df8e790c" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;u&lt;/code&gt; is used as subsystem identifier (that is, &lt;code&gt;&amp;lt;S&amp;gt; = u&lt;/code&gt;), all allocators based on &lt;code&gt;alloc_util&lt;/code&gt; are effected. If &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt;, &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, &lt;code&gt;T&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt; is used as subsystem identifier, only the specific allocator identifier is effected.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; がサブシステム識別子として使用されている場合（つまり、 &lt;code&gt;&amp;lt;S&amp;gt; = u&lt;/code&gt; ）、 &lt;code&gt;alloc_util&lt;/code&gt; に基づくすべてのアロケーターが影響を受けます。もし &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;D&lt;/code&gt; 、 &lt;code&gt;E&lt;/code&gt; 、 &lt;code&gt;F&lt;/code&gt; 、 &lt;code&gt;H&lt;/code&gt; 、 &lt;code&gt;I&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;R&lt;/code&gt; 、 &lt;code&gt;S&lt;/code&gt; 、 &lt;code&gt;T&lt;/code&gt; 、 &lt;code&gt;X&lt;/code&gt; は、サブシステムの識別子として使用される、唯一の特定の割当識別子が行われます。</target>
        </trans-unit>
        <trans-unit id="78d87db40121a7b6b4e4f2f28996811db47d8d7b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;u&lt;/code&gt; is used as subsystem identifier (that is, &lt;code&gt;&amp;lt;S&amp;gt; = u&lt;/code&gt;), all allocators based on &lt;code&gt;alloc_util&lt;/code&gt; are effected. If &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt;, &lt;code&gt;E&lt;/code&gt;, &lt;code&gt;F&lt;/code&gt;, &lt;code&gt;H&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;R&lt;/code&gt;, &lt;code&gt;S&lt;/code&gt;, or &lt;code&gt;T&lt;/code&gt; is used as subsystem identifier, only the specific allocator identifier is effected.</source>
          <target state="translated">&lt;code&gt;u&lt;/code&gt; がサブシステム識別子として使用されている場合（つまり、 &lt;code&gt;&amp;lt;S&amp;gt; = u&lt;/code&gt; ）、 &lt;code&gt;alloc_util&lt;/code&gt; に基づくすべてのアロケーターが影響を受けます。場合 &lt;code&gt;B&lt;/code&gt; 、 &lt;code&gt;D&lt;/code&gt; 、 &lt;code&gt;E&lt;/code&gt; 、 &lt;code&gt;F&lt;/code&gt; 、 &lt;code&gt;H&lt;/code&gt; 、 &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;R&lt;/code&gt; 、 &lt;code&gt;S&lt;/code&gt; 、又は &lt;code&gt;T&lt;/code&gt; は、サブシステム識別子、行われる識別子のみ特定アロケータとして使用されます。</target>
        </trans-unit>
        <trans-unit id="784b625fc8171fa4983940bde7848ec14a3e23bf" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;volatile&lt;/code&gt; is returned, the time offset cannot be finalized because &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;volatile&lt;/code&gt; が返された場合、 &lt;code&gt;&lt;a href=&quot;time_correction#Multi_Time_Warp_Mode&quot;&gt;multi-time warp mode&lt;/a&gt;&lt;/code&gt; が使用されているため、タイムオフセットを確定できません。</target>
        </trans-unit>
        <trans-unit id="20c03db910bef2b3379b92930db1f3ebc527788d" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;write&lt;/code&gt; is specified, only sent messages are logged.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; が指定されている場合、送信されたメッセージのみがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="a95ad12798c19a97f99824236c8f188c8076b6b4" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;write&lt;/code&gt; is specified, only set requests are logged.</source>
          <target state="translated">&lt;code&gt;write&lt;/code&gt; が指定されている場合、設定された要求のみがログに記録されます。</target>
        </trans-unit>
        <trans-unit id="b0db310b8af51df282663eafc88eec4c7003919f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;write_concurrency&lt;/code&gt; was enabled for the table.</source>
          <target state="translated">テーブルで &lt;code&gt;write_concurrency&lt;/code&gt; が有効になっていた場合。</target>
        </trans-unit>
        <trans-unit id="d130e60ef67783037417bccce56bcf5768c8e099" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{continue_after_restart,OtherVsn,Descr}&lt;/code&gt; is returned, the emulator is restarted before the upgrade instructions are executed. This occurs if the emulator or any of the applications Kernel, STDLIB, or SASL are updated. The new emulator version and these core applications execute after the restart. For all other applications the old versions are started and the upgrade is performed as normal by executing the upgrade instructions.</source>
          <target state="translated">場合 &lt;code&gt;{continue_after_restart,OtherVsn,Descr}&lt;/code&gt; 返され、エミュレータが再起動されるアップグレード命令が実行される前に。これは、エミュレータまたはアプリケーションのカーネル、STDLIB、またはSASLが更新された場合に発生します。再起動後、新しいエミュレータバージョンとこれらのコアアプリケーションが実行されます。他のすべてのアプリケーションでは、古いバージョンが開始され、アップグレード手順を実行することにより、アップグレードが通常どおりに実行されます。</target>
        </trans-unit>
        <trans-unit id="320cf62f527c030692a3479a90eabc62ad79a175" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{eof, Endline}&lt;/code&gt; is returned immediately, the call to &lt;code&gt;parse_and_scan/1&lt;/code&gt; returns &lt;code&gt;{ok, eof}&lt;/code&gt;. If &lt;code&gt;{eof, Endline}&lt;/code&gt; is returned before the parser expects end of input, &lt;code&gt;parse_and_scan/1&lt;/code&gt; will, of course, return an error message (see above). Otherwise &lt;code&gt;{ok, Result}&lt;/code&gt; is returned.</source>
          <target state="translated">場合 &lt;code&gt;{eof, Endline}&lt;/code&gt; への呼び出し、すぐに返され &lt;code&gt;parse_and_scan/1&lt;/code&gt; 戻り &lt;code&gt;{ok, eof}&lt;/code&gt; 。パーサーが入力の終わりを予期する前に &lt;code&gt;{eof, Endline}&lt;/code&gt; が返された場合、 &lt;code&gt;parse_and_scan/1&lt;/code&gt; はもちろんエラーメッセージを返します（上記を参照）。それ以外の場合は、 &lt;code&gt;{ok, Result}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="dedb9788552103a1f455c74f781f00865ba7c935" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{merge_tests,true}&lt;/code&gt; is set in the source specification (which is the default setting), terms in joined specifications are merged with terms in the source specification (according to the description of &lt;code&gt;merge_tests&lt;/code&gt; earlier).</source>
          <target state="translated">場合 &lt;code&gt;{merge_tests,true}&lt;/code&gt; （デフォルト設定である）ソース仕様に設定され、接合された仕様の用語は、（の記述に従ってソース明細書中の用語とマージさ &lt;code&gt;merge_tests&lt;/code&gt; 以前）。</target>
        </trans-unit>
        <trans-unit id="e19028ea4203966a6e00632a19c4871950b28ef8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{noreply,NewState}&lt;/code&gt; is returned, &lt;code&gt;{noreply,NewState,Timeout}&lt;/code&gt;, or &lt;code&gt;{noreply,NewState,hibernate}&lt;/code&gt;, the &lt;code&gt;gen_server&lt;/code&gt; process continues executing with &lt;code&gt;NewState&lt;/code&gt;. Any reply to &lt;code&gt;From&lt;/code&gt; must be specified explicitly using &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;{noreply,NewState}&lt;/code&gt; 、返される &lt;code&gt;{noreply,NewState,Timeout}&lt;/code&gt; 、または &lt;code&gt;{noreply,NewState,hibernate}&lt;/code&gt; 、 &lt;code&gt;gen_server&lt;/code&gt; のプロセスは実行を継続して &lt;code&gt;NewState&lt;/code&gt; に。 &lt;code&gt;From&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply/2&lt;/a&gt;&lt;/code&gt; を使用して、Fromへの返信を明示的に指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="e61ed5c3d675fd060bf7a5ba0b7669c540660308" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; is returned, the event manager also goes into hibernation (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt; proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;), waiting for the next event to occur. It is sufficient that one of the event handlers return &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; for the whole event manager process to hibernate.</source>
          <target state="translated">場合 &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; 返され、イベントマネージャはまた、（呼び出すことによって、休止状態に入る &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt; proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; ）、次のイベントが発生するのを待ちます。イベントマネージャプロセス全体が &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; は、イベントハンドラの1つが{ok、NewState、hibernate}を返すだけで十分です。</target>
        </trans-unit>
        <trans-unit id="e1637361f321011df9f0024cdad416df7e559bbc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; is returned, the event manager also goes into hibernation (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;), waiting for the next event to occur. It is sufficient that one of the event handlers return &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; for the whole event manager process to hibernate.</source>
          <target state="translated">場合 &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; 返され、イベントマネージャはまた、（呼び出すことによって、休止状態に入る &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; ）、次のイベントが発生するのを待ちます。イベントマネージャープロセス全体が &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; は、イベントハンドラーの1つが{ok、NewState、hibernate}を返すだけで十分です。</target>
        </trans-unit>
        <trans-unit id="7bf6373c4c4feb0b7b12ba83feca28174cdeeb31" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ok,NewState}&lt;/code&gt; or &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; is returned, the event handler remains in the event manager with the possible updated internal state &lt;code&gt;NewState&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;{ok,NewState}&lt;/code&gt; 又は &lt;code&gt;{ok,NewState,hibernate}&lt;/code&gt; 返され、イベントハンドラは、可能な更新された内部状態とイベントマネージャに残っ &lt;code&gt;NewState&lt;/code&gt; に。</target>
        </trans-unit>
        <trans-unit id="622b2b9487b410e4b5c3a44646686c10053b1e31" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{ok,State,hibernate}&lt;/code&gt; is returned, the event manager goes into hibernation (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;), waiting for the next event to occur.</source>
          <target state="translated">場合は &lt;code&gt;{ok,State,hibernate}&lt;/code&gt; 返され、イベントマネージャは、（呼び出すことによって、休止状態に入る &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; 、次のイベントが発生するのを待っています）。</target>
        </trans-unit>
        <trans-unit id="4733cd19b2819c31e3b9d228b0a9153e3ac1bda9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{reply,Reply,NewState}&lt;/code&gt; is returned, &lt;code&gt;{reply,Reply,NewState,Timeout}&lt;/code&gt; or &lt;code&gt;{reply,Reply,NewState,hibernate}&lt;/code&gt;, &lt;code&gt;Reply&lt;/code&gt; is given back to &lt;code&gt;From&lt;/code&gt; as the return value of &lt;code&gt;call/2,3&lt;/code&gt; or included in the return value of &lt;code&gt;multi_call/2,3,4&lt;/code&gt;. The &lt;code&gt;gen_server&lt;/code&gt; process then continues executing with the possibly updated internal state &lt;code&gt;NewState&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;{reply,Reply,NewState}&lt;/code&gt; 、返される &lt;code&gt;{reply,Reply,NewState,Timeout}&lt;/code&gt; 又は &lt;code&gt;{reply,Reply,NewState,hibernate}&lt;/code&gt; 、 &lt;code&gt;Reply&lt;/code&gt; に戻って与えられる &lt;code&gt;From&lt;/code&gt; の戻り値として &lt;code&gt;call/2,3&lt;/code&gt; 又は中に含ま &lt;code&gt;multi_call/2,3,4&lt;/code&gt; の戻り値。次に、 &lt;code&gt;gen_server&lt;/code&gt; プロセスは、更新された可能性のある内部状態 &lt;code&gt;NewState&lt;/code&gt; で実行を継続します。</target>
        </trans-unit>
        <trans-unit id="bf8d1c1849381a9a2934c0c67001278a230ee2f3" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{save_calls,N}&lt;/code&gt; has been set for the process, no function calls are saved to the call saving list. (The call saving list is not cleared. Also, send, receive, and time-out events are still added to the list.)</source>
          <target state="translated">プロセスに &lt;code&gt;{save_calls,N}&lt;/code&gt; が設定されている場合、関数呼び出しは呼び出し保存リストに保存されません。（通話保存リストはクリアされません。また、送信、受信、およびタイムアウトのイベントは引き続きリストに追加されます。）</target>
        </trans-unit>
        <trans-unit id="bfb24986f0a70731e0b63f3291fa396e2f3c519f" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{scope, {Start,Length}}&lt;/code&gt; is specified in the options such that &lt;code&gt;Start&lt;/code&gt; &amp;gt; size of &lt;code&gt;Subject&lt;/code&gt;, &lt;code&gt;Start + Length&lt;/code&gt; &amp;lt; 0 or &lt;code&gt;Start + Length&lt;/code&gt; is &amp;gt; size of &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">場合 &lt;code&gt;{scope, {Start,Length}}&lt;/code&gt; ように、オプションで指定された &lt;code&gt;Start&lt;/code&gt; &amp;gt;のサイズ &lt;code&gt;Subject&lt;/code&gt; 、 &lt;code&gt;Start + Length&lt;/code&gt; &amp;lt;0または &lt;code&gt;Start + Length&lt;/code&gt; ある&amp;gt;のサイズ &lt;code&gt;Subject&lt;/code&gt; 、 &lt;code&gt;badarg&lt;/code&gt; の例外が発生します。</target>
        </trans-unit>
        <trans-unit id="de6994202966362118bb8cacc9efab5d034d0b7e" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{scope, {Start,Length}}&lt;/code&gt; is specified in the options such that &lt;code&gt;Start&lt;/code&gt; &amp;gt; size of &lt;code&gt;Subject&lt;/code&gt;, &lt;code&gt;Start&lt;/code&gt; + &lt;code&gt;Length&lt;/code&gt; &amp;lt; 0 or &lt;code&gt;Start&lt;/code&gt; + &lt;code&gt;Length&lt;/code&gt; &amp;gt; size of &lt;code&gt;Subject&lt;/code&gt;, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">場合 &lt;code&gt;{scope, {Start,Length}}&lt;/code&gt; ように、オプションで指定された &lt;code&gt;Start&lt;/code&gt; &amp;gt;のサイズ &lt;code&gt;Subject&lt;/code&gt; 、 &lt;code&gt;Start&lt;/code&gt; +の &lt;code&gt;Length&lt;/code&gt; &amp;lt;0または &lt;code&gt;Start&lt;/code&gt; +の &lt;code&gt;Length&lt;/code&gt; &amp;gt;のサイズ &lt;code&gt;Subject&lt;/code&gt; 、 &lt;code&gt;badarg&lt;/code&gt; の例外が発生します。</target>
        </trans-unit>
        <trans-unit id="22f0dd2e07f51ba0bec6f71cc1bb3b006093d94a" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip, Reason}&lt;/code&gt; is returned, all test cases in the group are skipped and &lt;code&gt;Reason&lt;/code&gt; is printed in the overview log for the group.</source>
          <target state="translated">場合 &lt;code&gt;{skip, Reason}&lt;/code&gt; 返され、グループ内のすべてのテストケースがスキップされ、 &lt;code&gt;Reason&lt;/code&gt; グループの概要ログに印刷されています。</target>
        </trans-unit>
        <trans-unit id="9167afbdea5d3a67e5f541cf0e5e6e2773017130" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip, Reason}&lt;/code&gt; is returned, all test cases in the module are skipped and &lt;code&gt;Reason&lt;/code&gt; is printed on the HTML result page.</source>
          <target state="translated">場合 &lt;code&gt;{skip, Reason}&lt;/code&gt; 戻され、モジュール内のすべてのテストケースはスキップされ、 &lt;code&gt;Reason&lt;/code&gt; HTML結果ページに印刷されています。</target>
        </trans-unit>
        <trans-unit id="8e478cc8acb7bdb77b1dae6158305c98359cc9ec" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip, Reason}&lt;/code&gt; is returned, all test cases in the suite are skipped and &lt;code&gt;Reason&lt;/code&gt; is printed in the overview log for the suite.</source>
          <target state="translated">場合 &lt;code&gt;{skip, Reason}&lt;/code&gt; 返され、スイート内のすべてのテストケースがスキップされ、 &lt;code&gt;Reason&lt;/code&gt; スイートの概要ログに印刷されています。</target>
        </trans-unit>
        <trans-unit id="3e08b34f61f1a4d3777b205be5de380bc841d230" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip, Reason}&lt;/code&gt; is returned, the test case is skipped and &lt;code&gt;Reason&lt;/code&gt; is printed in the overview log for the suite.</source>
          <target state="translated">場合 &lt;code&gt;{skip, Reason}&lt;/code&gt; 返され、テストケースがスキップされ、 &lt;code&gt;Reason&lt;/code&gt; スイートの概要ログに印刷されています。</target>
        </trans-unit>
        <trans-unit id="2eb02f05292552a7ce9695f8e039ca2486be0efc" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip,Reason}&lt;/code&gt; is returned, all test cases in the group are skipped and &lt;code&gt;Reason&lt;/code&gt; is printed in the overview log for the group.</source>
          <target state="translated">場合 &lt;code&gt;{skip,Reason}&lt;/code&gt; 返され、グループ内のすべてのテストケースがスキップされ、 &lt;code&gt;Reason&lt;/code&gt; グループの概要ログに印刷されています。</target>
        </trans-unit>
        <trans-unit id="07c6e6c33ab904cab102b2ef7313020f30f3b33b" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip,Reason}&lt;/code&gt; is returned, all test cases in the module are skipped and &lt;code&gt;Reason&lt;/code&gt; is printed on the HTML result page.</source>
          <target state="translated">場合 &lt;code&gt;{skip,Reason}&lt;/code&gt; 戻され、モジュール内のすべてのテストケースはスキップされ、 &lt;code&gt;Reason&lt;/code&gt; HTML結果ページに印刷されています。</target>
        </trans-unit>
        <trans-unit id="7176131e2ab61dc6ca1a310323b87e804a6b01fb" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip,Reason}&lt;/code&gt; is returned, all test cases in the suite are skipped and &lt;code&gt;Reason&lt;/code&gt; is printed in the overview log for the suite.</source>
          <target state="translated">場合 &lt;code&gt;{skip,Reason}&lt;/code&gt; 返され、スイート内のすべてのテストケースがスキップされ、 &lt;code&gt;Reason&lt;/code&gt; スイートの概要ログに印刷されています。</target>
        </trans-unit>
        <trans-unit id="1d2a5b747d22c7eede603eddd2e58170ad2ad7b8" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{skip,Reason}&lt;/code&gt; is returned, the test case is skipped and &lt;code&gt;Reason&lt;/code&gt; is printed in the overview log for the suite.</source>
          <target state="translated">場合 &lt;code&gt;{skip,Reason}&lt;/code&gt; 返され、テストケースがスキップされ、 &lt;code&gt;Reason&lt;/code&gt; スイートの概要ログに印刷されています。</target>
        </trans-unit>
        <trans-unit id="43c5190e594ca77d2bcd9761108619b8160ca730" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{stop,Reason,NewState}&lt;/code&gt; is returned, any reply to &lt;code&gt;From&lt;/code&gt; must be specified explicitly using &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply/2&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;gen_server&lt;/code&gt; process then calls &lt;code&gt;Module:terminate(Reason,NewState)&lt;/code&gt; and terminates.</source>
          <target state="translated">場合 &lt;code&gt;{stop,Reason,NewState}&lt;/code&gt; 返され、どんな応答 &lt;code&gt;From&lt;/code&gt; 使用して明示的に指定する必要があり &lt;code&gt;&lt;a href=&quot;#reply-2&quot;&gt;reply/2&lt;/a&gt;&lt;/code&gt; 。次に、 &lt;code&gt;gen_server&lt;/code&gt; プロセスは &lt;code&gt;Module:terminate(Reason,NewState)&lt;/code&gt; を呼び出して終了します。</target>
        </trans-unit>
        <trans-unit id="555db6a996a08647cb4789219558187a695b3e75" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{stop,Reason,Reply,NewState}&lt;/code&gt; is returned, &lt;code&gt;Reply&lt;/code&gt; is given back to &lt;code&gt;From&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;{stop,Reason,Reply,NewState}&lt;/code&gt; 戻され、 &lt;code&gt;Reply&lt;/code&gt; バックに与えられている &lt;code&gt;From&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f07068ef6474408f3b2f01c567a6aa9dc31fae9" translate="yes" xml:space="preserve">
          <source>If &lt;code&gt;{swap_handler,Args1,NewState,Handler2,Args2}&lt;/code&gt; is returned, the event handler is replaced by &lt;code&gt;Handler2&lt;/code&gt; by first calling &lt;code&gt;Module:terminate(Args1,NewState)&lt;/code&gt; and then &lt;code&gt;Module2:init({Args2,Term})&lt;/code&gt;, where &lt;code&gt;Term&lt;/code&gt; is the return value of &lt;code&gt;Module:terminate/2&lt;/code&gt;. For more information, see &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;{swap_handler,Args1,NewState,Handler2,Args2}&lt;/code&gt; 、イベントハンドラにより置換されて戻される &lt;code&gt;Handler2&lt;/code&gt; 最初の呼び出しによって &lt;code&gt;Module:terminate(Args1,NewState)&lt;/code&gt; 、次いで、 &lt;code&gt;Module2:init({Args2,Term})&lt;/code&gt; 、ここで、 &lt;code&gt;Term&lt;/code&gt; あります &lt;code&gt;Module:terminate/2&lt;/code&gt; の戻り値。詳細については、 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="54e845975dbb16c88ec10ada23488e780175ae56" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;any&lt;/strong&gt; of the &lt;strong&gt;other&lt;/strong&gt; callback functions crashes (exit, throw or a plain crash) or return an invalid result (if a valid return has been specified), this function is called. The purpose is to allow the user handle this error (for instance to issue an error report).</source>
          <target state="translated">場合は&lt;strong&gt;任意の&lt;/strong&gt;の&lt;strong&gt;他の&lt;/strong&gt;コールバック関数がクラッシュする（出口、スローまたはプレーンクラッシュ）または（有効なリターンが指定されている場合）、無効な結果を返す、この関数が呼び出されます。目的は、ユーザーがこのエラーを処理できるようにすることです（たとえば、エラーレポートを発行するため）。</target>
        </trans-unit>
        <trans-unit id="937ff2e79e3364cc35a718607a325fdce946f46d" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;false&lt;/strong&gt;, megaco messages are sent using the &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message/2&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;strong&gt;falseの&lt;/strong&gt;場合、メガコメッセージは &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message/2&lt;/a&gt;&lt;/code&gt; 関数を使用して送信されます。</target>
        </trans-unit>
        <trans-unit id="9a26b3170e7ada86a34e6bf52ec13abf6a58d809" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;false&lt;/strong&gt;, megaco messages are sent using the &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">&lt;strong&gt;falseの&lt;/strong&gt;場合、megacoメッセージは &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; 関数を使用して送信されます。</target>
        </trans-unit>
        <trans-unit id="d618248269dc3ffbf51a67242f81007c8e747d1d" translate="yes" xml:space="preserve">
          <source>If &lt;strong&gt;true&lt;/strong&gt;, megaco message &lt;strong&gt;re-sends&lt;/strong&gt; are made using the &lt;code&gt;&lt;a href=&quot;megaco_transport#resend_message&quot;&gt;resend_message&lt;/a&gt;&lt;/code&gt; function. The initial message send is still done using the &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">場合は&lt;strong&gt;真&lt;/strong&gt;、MEGACOメッセージ&lt;strong&gt;の再送信を&lt;/strong&gt;使用して作られています &lt;code&gt;&lt;a href=&quot;megaco_transport#resend_message&quot;&gt;resend_message&lt;/a&gt;&lt;/code&gt; の機能を。最初のメッセージ送信は、引き続き &lt;code&gt;&lt;a href=&quot;megaco_transport#send_message&quot;&gt;send_message&lt;/a&gt;&lt;/code&gt; 関数を使用して行われます。</target>
        </trans-unit>
        <trans-unit id="6705ceafbe769b2ce43385b2299973a524847817" translate="yes" xml:space="preserve">
          <source>If A and B are matched, but there is a failure in C, matching does not backtrack into A; instead it moves to the next alternative, that is, D. However, if the subpattern containing (*THEN) is given an alternative, it behaves differently:</source>
          <target state="translated">AとBがマッチングされたが、Cに失敗があった場合、マッチングはAにバックトラックせず、代わりに次の代替案、つまりDに移動します。しかし、(*THEN)を含むサブパターンに代替案が与えられた場合、動作は異なります。</target>
        </trans-unit>
        <trans-unit id="c0f5376ef787219224d7bfc3d76505fad1f25c03" translate="yes" xml:space="preserve">
          <source>If A is a subset of X, the &lt;strong id=&quot;image&quot;&gt;image&lt;/strong&gt; of A under R is the set {y : x R y for some x in A}. If B is a subset of Y, the &lt;strong id=&quot;inverse_image&quot;&gt;inverse image&lt;/strong&gt; of B is the set {x : x R y for some y in B}.</source>
          <target state="translated">AがXのサブセットである場合、Rの下のA の&lt;strong id=&quot;image&quot;&gt;イメージ&lt;/strong&gt;はセット{y：x R y for a x in a x}です。BがYのサブセットである場合、Bの&lt;strong id=&quot;inverse_image&quot;&gt;反転イメージ&lt;/strong&gt;はセット{x：x R y for B in y in B}です。</target>
        </trans-unit>
        <trans-unit id="f6a630d6f8d7caebea5102271394fdcd67b18c9d" translate="yes" xml:space="preserve">
          <source>If A is an association &lt;code&gt;K := V&lt;/code&gt;, then Rep(A) = &lt;code&gt;{map_field_exact,ANNO,Rep(K),Rep(V)}&lt;/code&gt;.</source>
          <target state="translated">Aが関連付け &lt;code&gt;K := V&lt;/code&gt; 場合、Rep（A）= &lt;code&gt;{map_field_exact,ANNO,Rep(K),Rep(V)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7b4fe5ddbf9a00d696a1d76a1917c8c5d2aeb3e" translate="yes" xml:space="preserve">
          <source>If A is an association &lt;code&gt;K := V&lt;/code&gt;, then Rep(A) = &lt;code&gt;{map_field_exact,LINE,Rep(K),Rep(V)}&lt;/code&gt;.</source>
          <target state="translated">Aが関連付け &lt;code&gt;K := V&lt;/code&gt; 場合、Rep（A）= &lt;code&gt;{map_field_exact,LINE,Rep(K),Rep(V)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="75688e538d64827729b81c8f7409b54e266cd7bd" translate="yes" xml:space="preserve">
          <source>If A is an association &lt;code&gt;K =&amp;gt; V&lt;/code&gt;, then Rep(A) = &lt;code&gt;{map_field_assoc,ANNO,Rep(K),Rep(V)}&lt;/code&gt;.</source>
          <target state="translated">Aが関連付け &lt;code&gt;K =&amp;gt; V&lt;/code&gt; 場合、Rep（A）= &lt;code&gt;{map_field_assoc,ANNO,Rep(K),Rep(V)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="930fd81e91ccd105d16e4034de1e01640fca7bc6" translate="yes" xml:space="preserve">
          <source>If A is an association &lt;code&gt;K =&amp;gt; V&lt;/code&gt;, then Rep(A) = &lt;code&gt;{map_field_assoc,LINE,Rep(K),Rep(V)}&lt;/code&gt;.</source>
          <target state="translated">Aが関連付け &lt;code&gt;K =&amp;gt; V&lt;/code&gt; 場合、Rep（A）= &lt;code&gt;{map_field_assoc,LINE,Rep(K),Rep(V)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="25f2fa0920ecae328194e2e5f0d6947b2fdf2b8f" translate="yes" xml:space="preserve">
          <source>If A is an association type &lt;code&gt;K := V&lt;/code&gt;, where &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are types, then Rep(A) = &lt;code&gt;{type,ANNO,map_field_exact,[Rep(K),Rep(V)]}&lt;/code&gt;.</source>
          <target state="translated">Aが関連付けタイプ &lt;code&gt;K := V&lt;/code&gt; であり、 &lt;code&gt;K&lt;/code&gt; と &lt;code&gt;V&lt;/code&gt; がタイプである場合、Rep（A）= &lt;code&gt;{type,ANNO,map_field_exact,[Rep(K),Rep(V)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4e632ebc019048443e5c38c3f2b726fe623c1461" translate="yes" xml:space="preserve">
          <source>If A is an association type &lt;code&gt;K := V&lt;/code&gt;, where &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are types, then Rep(A) = &lt;code&gt;{type,LINE,map_field_exact,[Rep(K),Rep(V)]}&lt;/code&gt;.</source>
          <target state="translated">Aが関連タイプ &lt;code&gt;K := V&lt;/code&gt; であり、 &lt;code&gt;K&lt;/code&gt; および &lt;code&gt;V&lt;/code&gt; がタイプである場合、Rep（A）= &lt;code&gt;{type,LINE,map_field_exact,[Rep(K),Rep(V)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fd7d66e8b109f42cf2b8b90dae2cc67fe469adfa" translate="yes" xml:space="preserve">
          <source>If A is an association type &lt;code&gt;K =&amp;gt; V&lt;/code&gt;, where &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are types, then Rep(A) = &lt;code&gt;{type,ANNO,map_field_assoc,[Rep(K),Rep(V)]}&lt;/code&gt;.</source>
          <target state="translated">Aが関連付けタイプ &lt;code&gt;K =&amp;gt; V&lt;/code&gt; であり、 &lt;code&gt;K&lt;/code&gt; と &lt;code&gt;V&lt;/code&gt; がタイプである場合、Rep（A）= &lt;code&gt;{type,ANNO,map_field_assoc,[Rep(K),Rep(V)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fe916dba3dfcc9f9ef483ef2b2560b99a4239b84" translate="yes" xml:space="preserve">
          <source>If A is an association type &lt;code&gt;K =&amp;gt; V&lt;/code&gt;, where &lt;code&gt;K&lt;/code&gt; and &lt;code&gt;V&lt;/code&gt; are types, then Rep(A) = &lt;code&gt;{type,LINE,map_field_assoc,[Rep(K),Rep(V)]}&lt;/code&gt;.</source>
          <target state="translated">Aが関連タイプ &lt;code&gt;K =&amp;gt; V&lt;/code&gt; であり、 &lt;code&gt;K&lt;/code&gt; および &lt;code&gt;V&lt;/code&gt; がタイプである場合、Rep（A）= &lt;code&gt;{type,LINE,map_field_assoc,[Rep(K),Rep(V)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a746c5a2ff985d711d5a7f13e4e14806e0e62f7d" translate="yes" xml:space="preserve">
          <source>If A matches but B fails, the backtrack to (*COMMIT) causes the entire match to fail. However, if A and B match, but C fails, the backtrack to (*THEN) causes the next alternative (ABD) to be tried. This behavior is consistent, but is not always the same as in Perl. It means that if two or more backtracking verbs appear in succession, the last of them has no effect. Consider the following example:</source>
          <target state="translated">A が一致したが B が失敗した場合、(*COMMIT)へのバックトラックにより、すべての一致が失敗します。しかし、AとBが一致したがCが失敗した場合、(*THEN)へのバックトラックにより、次の選択肢(ABD)が試行されます。この動作は一貫していますが、Perlの場合と同じとは限りません。これは、2つ以上のバックトラック動詞が連続して現れた場合、最後の動詞は何の効果もないことを意味します。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="5ec09bef075c491da05310ae82ca09d506f563c0" translate="yes" xml:space="preserve">
          <source>If C is a case clause &lt;code&gt;P -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep(P)],[],Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがcase節 &lt;code&gt;P -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンで、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep(P)],[],Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c2a144a893fd5d00844284a1c4ab07c469c50d04" translate="yes" xml:space="preserve">
          <source>If C is a case clause &lt;code&gt;P -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep(P)],[],Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがcase句 &lt;code&gt;P -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンで、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,LINE,[Rep(P)],[],Rep(B)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0a5aa4f9266e04e273102dd79f1886cfeae24057" translate="yes" xml:space="preserve">
          <source>If C is a case clause &lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep(P)],Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt; Cがケース句Pであり、 &lt;code&gt;P&lt;/code&gt; がパターン、 &lt;code&gt;Gs&lt;/code&gt; がガードシーケンス、 &lt;code&gt;B&lt;/code&gt; が本体の場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep(P)],Rep(Gs),Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1982d0d507cac2d94792ff43eb098cbb5c7b07ff" translate="yes" xml:space="preserve">
          <source>If C is a case clause &lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep(P)],Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cは、ケース句である場合 &lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt; 、 &lt;code&gt;P&lt;/code&gt; はパターンであるが、 &lt;code&gt;Gs&lt;/code&gt; がガード配列であり、そして &lt;code&gt;B&lt;/code&gt; は、次いで体、担当者（C）=である &lt;code&gt;{clause,LINE,[Rep(P)],Rep(Gs),Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3d659eda70c2e50509c30fcc418400a9aab3ac03" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;P -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep({throw,P,_})],[],Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class &lt;code&gt;throw&lt;/code&gt; and with or without an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause without an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cがcatch句 &lt;code&gt;P -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンで、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep({throw,P,_})],[],Rep(B)}&lt;/code&gt; 、明示的な例外クラスとcatch節、ある &lt;code&gt;throw&lt;/code&gt; 明示的なスタックトレースの変数を伴うまたは伴わないが &lt;code&gt;_&lt;/code&gt; 明示的な例外クラスがなく、明示的なスタックトレース変数なしcatch節と区別することはできません。</target>
        </trans-unit>
        <trans-unit id="5272c27438c02673801bf9383134101b74af201b" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;P -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep({throw,P,_})],[],Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class &lt;code&gt;throw&lt;/code&gt; and with or without an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause without an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cがcatch句 &lt;code&gt;P -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンで &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,LINE,[Rep({throw,P,_})],[],Rep(B)}&lt;/code&gt; 、つまり、明示的な例外クラス &lt;code&gt;throw&lt;/code&gt; あり、明示的なスタックトレース変数 &lt;code&gt;_&lt;/code&gt; の有無に関係なく、catch句は、明示的な例外クラスなし、および明示的なスタックトレース変数なしのcatch句と区別できません。</target>
        </trans-unit>
        <trans-unit id="c311eaf58fab876bdc94780ac91685854b17771c" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep({throw,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class &lt;code&gt;throw&lt;/code&gt; and with or without an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause without an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">&lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt; Cがキャッチ句Pである場合、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;B&lt;/code&gt; は本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep({throw,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt; であり、明示的な例外クラスとcatch節 &lt;code&gt;throw&lt;/code&gt; とを有する、または明示的なスタックトレース変数無し &lt;code&gt;_&lt;/code&gt; 明示的な例外クラスなしcatch節と区別することができないと明示的なスタックトレース変数なし。</target>
        </trans-unit>
        <trans-unit id="66083733733867d178cfdf05fa2ebeeb26e587ba" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep({throw,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class &lt;code&gt;throw&lt;/code&gt; and with or without an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause without an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cは、キャッチ文節である場合 &lt;code&gt;P when Gs -&amp;gt; B&lt;/code&gt; 、ここで、 &lt;code&gt;P&lt;/code&gt; はパターンで、 &lt;code&gt;Gs&lt;/code&gt; はガード配列であり、そして &lt;code&gt;B&lt;/code&gt; は本体で、その後担当者（C）= &lt;code&gt;{clause,LINE,[Rep({throw,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt; であり、明示的な例外クラスとcatch節 &lt;code&gt;throw&lt;/code&gt; とを有する、または明示的なスタックトレース変数無し &lt;code&gt;_&lt;/code&gt; 明示的な例外クラスなしcatch節と区別することができないと明示的なスタックトレース変数なし。</target>
        </trans-unit>
        <trans-unit id="8afa8db8880cd11a80b4f7cecb8f0640f10dde11" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep({X,P,_})],[],Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class and with an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause with an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cがcatch句 &lt;code&gt;X : P -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;X&lt;/code&gt; がアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; がパターン、 &lt;code&gt;B&lt;/code&gt; が本体の場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep({X,P,_})],[],Rep(B)}&lt;/code&gt; であり、明示的な例外クラスを持つと明示的なスタックトレース変数とcatch節 &lt;code&gt;_&lt;/code&gt; 明示的な例外クラスととせずにcatch節と区別することはできません明示的なスタックトレース変数。</target>
        </trans-unit>
        <trans-unit id="33763f19a17cfabb0fc3a9334e69f568d0598981" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep({X,P,_})],[],Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class and with an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause with an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cがcatch句 &lt;code&gt;X : P -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;B&lt;/code&gt; は本体である場合、Rep（C）= &lt;code&gt;{clause,LINE,[Rep({X,P,_})],[],Rep(B)}&lt;/code&gt; 、つまり、明示的な例外クラスと明示的なスタックトレース変数 &lt;code&gt;_&lt;/code&gt; のあるcatch句は、明示的な例外クラスのある、およびなしのcatch句と区別できません。明示的なスタックトレース変数。</target>
        </trans-unit>
        <trans-unit id="43cc8aa87c6f7cf6d65593b565e96a75d05633ea" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P : S -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;S&lt;/code&gt; is a variable, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep({X,P,S})],[],Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがcatch節 &lt;code&gt;X : P : S -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;S&lt;/code&gt; は変数、 &lt;code&gt;B&lt;/code&gt; は本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep({X,P,S})],[],Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54e98e1e13987f32a2240be5fce9eca6126a89ed" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P : S -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;S&lt;/code&gt; is a variable, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep({X,P,S})],[],Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがcatch節 &lt;code&gt;X : P : S -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;S&lt;/code&gt; は変数、 &lt;code&gt;B&lt;/code&gt; は本体、Rep（C）= &lt;code&gt;{clause,LINE,[Rep({X,P,S})],[],Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3a262d7341faa65ccb5ac93e7079518e8857e84b" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P : S when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, &lt;code&gt;S&lt;/code&gt; is a variable, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep({X,P,S})],Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがcatch節 &lt;code&gt;X : P : S when Gs -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;S&lt;/code&gt; は変数、 &lt;code&gt;B&lt;/code&gt; は本体です。次に、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep({X,P,S})],Rep(Gs),Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7ae0f4c55ba607c0c1ac95c07e874e6880664ec9" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P : S when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, &lt;code&gt;S&lt;/code&gt; is a variable, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep({X,P,S})],Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがcatch句である場合 &lt;code&gt;X : P : S when Gs -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;S&lt;/code&gt; は変数、 &lt;code&gt;B&lt;/code&gt; はボディ）次にRep（C）= &lt;code&gt;{clause,LINE,[Rep({X,P,S})],Rep(Gs),Rep(B)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b0e601c916b6ea0d1855c5d5324b1a12d0303cb8" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[Rep({X,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class and with an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause with an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cがcatch節 &lt;code&gt;X : P when Gs -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;B&lt;/code&gt; は本体の場合、Rep（C）= &lt;code&gt;{clause,ANNO,[Rep({X,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt; 、であり、明示的な例外クラスを持つと明示的なスタックトレース変数とcatch節は &lt;code&gt;_&lt;/code&gt; から区別することができません明示的な例外クラスがあり、明示的なスタックトレース変数がないcatch句。</target>
        </trans-unit>
        <trans-unit id="cd09edeb30671bd8912819376a2a0342249cf516" translate="yes" xml:space="preserve">
          <source>If C is a catch clause &lt;code&gt;X : P when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; is an atomic literal or a variable pattern, &lt;code&gt;P&lt;/code&gt; is a pattern, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence, and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[Rep({X,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt;, that is, a catch clause with an explicit exception class and with an explicit stacktrace variable &lt;code&gt;_&lt;/code&gt; cannot be distinguished from a catch clause with an explicit exception class and without an explicit stacktrace variable.</source>
          <target state="translated">Cがcatch句である場合 &lt;code&gt;X : P when Gs -&amp;gt; B&lt;/code&gt; 場合、 &lt;code&gt;X&lt;/code&gt; はアトミックリテラルまたは変数パターン、 &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;B&lt;/code&gt; は本体、Rep（C）= &lt;code&gt;{clause,LINE,[Rep({X,P,_})],Rep(Gs),Rep(B)}&lt;/code&gt; 、つまり、明示的な例外クラスと明示的なスタックトレース変数 &lt;code&gt;_&lt;/code&gt; を含むcatch句は、明示的な例外クラスがあり、明示的なスタックトレース変数がないキャッチ句。</target>
        </trans-unit>
        <trans-unit id="4016717fdd4d5433989581c68c30070bb76884da" translate="yes" xml:space="preserve">
          <source>If C is a constraint &lt;code&gt;V :: T&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is a type variable and &lt;code&gt;T&lt;/code&gt; is a type, then Rep(C) = &lt;code&gt;{type,ANNO,constraint,[{atom,ANNO,is_subtype},[Rep(V),Rep(T)]]}&lt;/code&gt;.</source>
          <target state="translated">Cが制約 &lt;code&gt;V :: T&lt;/code&gt; であり、 &lt;code&gt;V&lt;/code&gt; が型変数で、 &lt;code&gt;T&lt;/code&gt; が型である場合、Rep（C）= &lt;code&gt;{type,ANNO,constraint,[{atom,ANNO,is_subtype},[Rep(V),Rep(T)]]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df5fe92f62215d00d030e5a7bada64a7329d2d85" translate="yes" xml:space="preserve">
          <source>If C is a constraint &lt;code&gt;V :: T&lt;/code&gt;, where &lt;code&gt;V&lt;/code&gt; is a type variable and &lt;code&gt;T&lt;/code&gt; is a type, then Rep(C) = &lt;code&gt;{type,LINE,constraint,[{atom,LINE,is_subtype},[Rep(V),Rep(T)]]}&lt;/code&gt;.</source>
          <target state="translated">Cが制約 &lt;code&gt;V :: T&lt;/code&gt; であり、 &lt;code&gt;V&lt;/code&gt; が型変数で &lt;code&gt;T&lt;/code&gt; が型である場合、Rep（C）= &lt;code&gt;{type,LINE,constraint,[{atom,LINE,is_subtype},[Rep(V),Rep(T)]]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a8d2da59f190a64375cc2ab954899e9cace4a77f" translate="yes" xml:space="preserve">
          <source>If C is a function clause &lt;code&gt;( Ps ) -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;Ps&lt;/code&gt; is a pattern sequence and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,Rep(Ps),[],Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cが関数句 &lt;code&gt;( Ps ) -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;Ps&lt;/code&gt; がパターンシーケンスで、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,Rep(Ps),[],Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17326d4fa4e4dd923f6996f5fc5f5d27a9e90bfb" translate="yes" xml:space="preserve">
          <source>If C is a function clause &lt;code&gt;( Ps ) -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;Ps&lt;/code&gt; is a pattern sequence and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,Rep(Ps),[],Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cが関数句 &lt;code&gt;( Ps ) -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;Ps&lt;/code&gt; がパターンシーケンスで、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,LINE,Rep(Ps),[],Rep(B)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="cbc0eacd6cf64ab7e1b6a5aa346f15af4ee37ac3" translate="yes" xml:space="preserve">
          <source>If C is a function clause &lt;code&gt;( Ps ) when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;Ps&lt;/code&gt; is a pattern sequence, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,Rep(Ps),Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;( Ps ) when Gs -&amp;gt; B&lt;/code&gt; Cが関数句（Ps）である場合、ここで &lt;code&gt;Ps&lt;/code&gt; はパターンシーケンス、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;B&lt;/code&gt; は本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,Rep(Ps),Rep(Gs),Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b58b02b2d6778f5c78bfa5c91aec26b39e9b26e2" translate="yes" xml:space="preserve">
          <source>If C is a function clause &lt;code&gt;( Ps ) when Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;Ps&lt;/code&gt; is a pattern sequence, &lt;code&gt;Gs&lt;/code&gt; is a guard sequence and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,Rep(Ps),Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cは、関数句である場合 &lt;code&gt;( Ps ) when Gs -&amp;gt; B&lt;/code&gt; 、ここで、 &lt;code&gt;Ps&lt;/code&gt; はパターン配列で、 &lt;code&gt;Gs&lt;/code&gt; はガードシーケンスであり、 &lt;code&gt;B&lt;/code&gt; は体であり、次いで、担当者（C）= &lt;code&gt;{clause,LINE,Rep(Ps),Rep(Gs),Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b2834d93e535442b365d66608e72b7dd5d9a7b0" translate="yes" xml:space="preserve">
          <source>If C is an if clause &lt;code&gt;Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;Gs&lt;/code&gt; is a guard sequence and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,ANNO,[],Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがif句 &lt;code&gt;Gs -&amp;gt; B&lt;/code&gt; であり、 &lt;code&gt;Gs&lt;/code&gt; がガードシーケンスで、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（C）= &lt;code&gt;{clause,ANNO,[],Rep(Gs),Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bac3b590133c72b3e697e259f15ddfcb5136d5c1" translate="yes" xml:space="preserve">
          <source>If C is an if clause &lt;code&gt;Gs -&amp;gt; B&lt;/code&gt;, where &lt;code&gt;Gs&lt;/code&gt; is a guard sequence and &lt;code&gt;B&lt;/code&gt; is a body, then Rep(C) = &lt;code&gt;{clause,LINE,[],Rep(Gs),Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Cがif句 &lt;code&gt;Gs -&amp;gt; B&lt;/code&gt; 場合（ &lt;code&gt;Gs&lt;/code&gt; はガードシーケンス、 &lt;code&gt;B&lt;/code&gt; は本文）、Rep（C）= &lt;code&gt;{clause,LINE,[],Rep(Gs),Rep(B)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="0cbfab94d790c9f8ddb1d5350bddeee9c6d6348c" translate="yes" xml:space="preserve">
          <source>If CPU topology information is unavailable.</source>
          <target state="translated">CPUトポロジー情報が利用できない場合。</target>
        </trans-unit>
        <trans-unit id="a5c3ae58fb5f8a860fea2ef9b561020e0407c0fd" translate="yes" xml:space="preserve">
          <source>If D is a module declaration consisting of the forms &lt;code&gt;F_1&lt;/code&gt;, ..., &lt;code&gt;F_k&lt;/code&gt;, then Rep(D) = &lt;code&gt;[Rep(F_1), ..., Rep(F_k)]&lt;/code&gt;.</source>
          <target state="translated">Dが &lt;code&gt;F_1&lt;/code&gt; 、...、 &lt;code&gt;F_k&lt;/code&gt; の形式で構成されるモジュール宣言の場合、Rep（D）= &lt;code&gt;[Rep(F_1), ..., Rep(F_k)]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a30963b62350996a8d59e8d3d4f4343c158ae7a4" translate="yes" xml:space="preserve">
          <source>If E is a bitstring comprehension &lt;code&gt;&amp;lt;&amp;lt;E_0 || Q_1, ..., Q_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Q_i&lt;/code&gt; is a qualifier, then Rep(E) = &lt;code&gt;{bc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt;. For Rep(Q), see below.</source>
          <target state="translated">Eがビット文字 &lt;code&gt;&amp;lt;&amp;lt;E_0 || Q_1, ..., Q_k&amp;gt;&amp;gt;&lt;/code&gt; 理解である場合&amp;lt;&amp;lt; E_0 || Q_1、...、Q_k &amp;gt;&amp;gt;、ここで各 &lt;code&gt;Q_i&lt;/code&gt; は修飾子であり、Rep（E）= &lt;code&gt;{bc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt; 。 Rep（Q）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="385f7db6a01f80887d7150e7f3e7bdd257de0fb5" translate="yes" xml:space="preserve">
          <source>If E is a bitstring comprehension &lt;code&gt;&amp;lt;&amp;lt;E_0 || Q_1, ..., Q_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Q_i&lt;/code&gt; is a qualifier, then Rep(E) = &lt;code&gt;{bc,LINE,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt;. For Rep(Q), see below.</source>
          <target state="translated">Eがビットストリング内包の場合 &lt;code&gt;&amp;lt;&amp;lt;E_0 || Q_1, ..., Q_k&amp;gt;&amp;gt;&lt;/code&gt; 、ここで、各 &lt;code&gt;Q_i&lt;/code&gt; は修飾子であり、Rep（E）= &lt;code&gt;{bc,LINE,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt; です。Rep（Q）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a215b35bfabec03f705356b11df781d76fe9bda6" translate="yes" xml:space="preserve">
          <source>If E is a bitstring constructor &lt;code&gt;&amp;lt;&amp;lt;E_1:Size_1/TSL_1, ..., E_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Size_i&lt;/code&gt; is an expression and each &lt;code&gt;TSL_i&lt;/code&gt; is a type specificer list, then Rep(E) = &lt;code&gt;{bin,ANNO,[{bin_element,ANNO,Rep(E_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(E_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt;. For Rep(TSL), see below. An omitted &lt;code&gt;Size_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;. An omitted &lt;code&gt;TSL_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Eがビットストリングコンストラクター &lt;code&gt;&amp;lt;&amp;lt;E_1:Size_1/TSL_1, ..., E_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt; 場合、各 &lt;code&gt;Size_i&lt;/code&gt; は式であり、各 &lt;code&gt;TSL_i&lt;/code&gt; は型固有のリストである場合、Rep（E）= &lt;code&gt;{bin,ANNO,[{bin_element,ANNO,Rep(E_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(E_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt; 。Rep（TSL）については、以下を参照してください。省略された &lt;code&gt;Size_i&lt;/code&gt; は、 &lt;code&gt;default&lt;/code&gt; で表されます。省略された &lt;code&gt;TSL_i&lt;/code&gt; は、 &lt;code&gt;default&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="a58b032de54c4d5d1f61a79ea10904e5176012ef" translate="yes" xml:space="preserve">
          <source>If E is a bitstring constructor &lt;code&gt;&amp;lt;&amp;lt;E_1:Size_1/TSL_1, ..., E_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Size_i&lt;/code&gt; is an expression and each &lt;code&gt;TSL_i&lt;/code&gt; is a type specificer list, then Rep(E) = &lt;code&gt;{bin,LINE,[{bin_element,LINE,Rep(E_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,LINE,Rep(E_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt;. For Rep(TSL), see below. An omitted &lt;code&gt;Size_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;. An omitted &lt;code&gt;TSL_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Eがビット文字 &lt;code&gt;&amp;lt;&amp;lt;E_1:Size_1/TSL_1, ..., E_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt; コンストラクタ&amp;lt;&amp;lt; E_1：Size_1 / TSL_1、...、E_k：Size_k / TSL_k &amp;gt;&amp;gt;である場合、各 &lt;code&gt;Size_i&lt;/code&gt; は式であり、各 &lt;code&gt;TSL_i&lt;/code&gt; はタイプ固有のリストであり、Rep（E）= &lt;code&gt;{bin,LINE,[{bin_element,LINE,Rep(E_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,LINE,Rep(E_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt; 。Rep（TSL）については、以下を参照してください。省略された &lt;code&gt;Size_i&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; で表されます。省略された &lt;code&gt;TSL_i&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="def0fd07bd4ff6d50e1223eca9053d3fa095d182" translate="yes" xml:space="preserve">
          <source>If E is a block expression &lt;code&gt;begin B end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is a body, then Rep(E) = &lt;code&gt;{block,ANNO,Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Eがブロック式 &lt;code&gt;begin B end&lt;/code&gt; であり、 &lt;code&gt;B&lt;/code&gt; が本体である場合、Rep（E）= &lt;code&gt;{block,ANNO,Rep(B)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff0400ff578820209af4c6bca75270b191887cfe" translate="yes" xml:space="preserve">
          <source>If E is a block expression &lt;code&gt;begin B end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is a body, then Rep(E) = &lt;code&gt;{block,LINE,Rep(B)}&lt;/code&gt;.</source>
          <target state="translated">Eがブロック式で &lt;code&gt;begin B end&lt;/code&gt; である場合（ &lt;code&gt;B&lt;/code&gt; は本体）、Rep（E）= &lt;code&gt;{block,LINE,Rep(B)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e9d8af3f74254d265168f6c22c16d0838a1ea340" translate="yes" xml:space="preserve">
          <source>If E is a case expression &lt;code&gt;case E_0 of Cc_1 ; ... ; Cc_k end&lt;/code&gt;, where &lt;code&gt;E_0&lt;/code&gt; is an expression and each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, then Rep(E) = &lt;code&gt;{'case',ANNO,Rep(E_0),[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが &lt;code&gt;case E_0 of Cc_1 ; ... ; Cc_k end&lt;/code&gt; ケース式ケースE_0の場合; ...; Cc_k end、ここで &lt;code&gt;E_0&lt;/code&gt; は式で、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase節である場合、Rep（E）= &lt;code&gt;{'case',ANNO,Rep(E_0),[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d61d85721a2f8e94ee818ecc0cbe514b22d9b6e5" translate="yes" xml:space="preserve">
          <source>If E is a case expression &lt;code&gt;case E_0 of Cc_1 ; ... ; Cc_k end&lt;/code&gt;, where &lt;code&gt;E_0&lt;/code&gt; is an expression and each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, then Rep(E) = &lt;code&gt;{'case',LINE,Rep(E_0),[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eがケース式の &lt;code&gt;case E_0 of Cc_1 ; ... ; Cc_k end&lt;/code&gt; 、ここで &lt;code&gt;E_0&lt;/code&gt; は式であり、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase句であり、Rep（E）= &lt;code&gt;{'case',LINE,Rep(E_0),[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="096069597c0301e2331f3c9eeb4ba8c6fe89359b" translate="yes" xml:space="preserve">
          <source>If E is a catch expression &lt;code&gt;catch E_0&lt;/code&gt;, then Rep(E) = &lt;code&gt;{'catch',ANNO,Rep(E_0)}&lt;/code&gt;.</source>
          <target state="translated">Eがcatch式 &lt;code&gt;catch E_0&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{'catch',ANNO,Rep(E_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="20926c71a541ebeeb5a5ce9236741b97b74ee9ee" translate="yes" xml:space="preserve">
          <source>If E is a catch expression &lt;code&gt;catch E_0&lt;/code&gt;, then Rep(E) = &lt;code&gt;{'catch',LINE,Rep(E_0)}&lt;/code&gt;.</source>
          <target state="translated">Eがキャッチ式 &lt;code&gt;catch E_0&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{'catch',LINE,Rep(E_0)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0b58d732e6eb44c8650ef6ea1ab56a5738fed639" translate="yes" xml:space="preserve">
          <source>If E is a cons skeleton &lt;code&gt;[E_h | E_t]&lt;/code&gt;, then Rep(E) = &lt;code&gt;{cons,ANNO,Rep(E_h),Rep(E_t)}&lt;/code&gt;.</source>
          <target state="translated">Eが短所スケルトンの場合 &lt;code&gt;[E_h | E_t]&lt;/code&gt; 、次にRep（E）= &lt;code&gt;{cons,ANNO,Rep(E_h),Rep(E_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1d685232ba5f2805f2661aa4dca2a66de454be03" translate="yes" xml:space="preserve">
          <source>If E is a cons skeleton &lt;code&gt;[E_h | E_t]&lt;/code&gt;, then Rep(E) = &lt;code&gt;{cons,LINE,Rep(E_h),Rep(E_t)}&lt;/code&gt;.</source>
          <target state="translated">Eがコンスケルトンの場合 &lt;code&gt;[E_h | E_t]&lt;/code&gt; 、次にRep（E）= &lt;code&gt;{cons,LINE,Rep(E_h),Rep(E_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fd154a4579d9aa67e94aa4c762704930a595e132" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Fc_1 ; ... ; Fc_k end&lt;/code&gt;, where each &lt;code&gt;Fc_i&lt;/code&gt; is a function clause, then Rep(E) = &lt;code&gt;{'fun',ANNO,{clauses,[Rep(Fc_1), ..., Rep(Fc_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Eが楽しい表現の場合 &lt;code&gt;fun Fc_1 ; ... ; Fc_k end&lt;/code&gt; 、ここで各 &lt;code&gt;Fc_i&lt;/code&gt; は関数句であり、Rep（E）= &lt;code&gt;{'fun',ANNO,{clauses,[Rep(Fc_1), ..., Rep(Fc_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="00326b0fd36dc640e6ce203654ecdb5f5319afc6" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Fc_1 ; ... ; Fc_k end&lt;/code&gt;, where each &lt;code&gt;Fc_i&lt;/code&gt; is a function clause, then Rep(E) = &lt;code&gt;{'fun',LINE,{clauses,[Rep(Fc_1), ..., Rep(Fc_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Eが楽しい式なら &lt;code&gt;fun Fc_1 ; ... ; Fc_k end&lt;/code&gt; 、各 &lt;code&gt;Fc_i&lt;/code&gt; は関数句、Rep（E）= &lt;code&gt;{'fun',LINE,{clauses,[Rep(Fc_1), ..., Rep(Fc_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b930f9fc614875b26b77fcef08cb18fabcffa755" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Module:Name/Arity&lt;/code&gt;, then Rep(E) = &lt;code&gt;{'fun',ANNO,{function,Rep(Module),Rep(Name),Rep(Arity)}}&lt;/code&gt;. (Before Erlang/OTP R15: Rep(E) = &lt;code&gt;{'fun',ANNO,{function,Module,Name,Arity}}&lt;/code&gt;.)</source>
          <target state="translated">Eが楽しい式 &lt;code&gt;fun Module:Name/Arity&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{'fun',ANNO,{function,Rep(Module),Rep(Name),Rep(Arity)}}&lt;/code&gt; 。（Erlang / OTP R15より前：Rep（E）= &lt;code&gt;{'fun',ANNO,{function,Module,Name,Arity}}&lt;/code&gt; 。）</target>
        </trans-unit>
        <trans-unit id="25e7ad524342503c66fff38de3f9fd9620fdced2" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Module:Name/Arity&lt;/code&gt;, then Rep(E) = &lt;code&gt;{'fun',LINE,{function,Rep(Module),Rep(Name),Rep(Arity)}}&lt;/code&gt;. (Before Erlang/OTP R15: Rep(E) = &lt;code&gt;{'fun',LINE,{function,Module,Name,Arity}}&lt;/code&gt;.)</source>
          <target state="translated">Eが楽しい式 &lt;code&gt;fun Module:Name/Arity&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{'fun',LINE,{function,Rep(Module),Rep(Name),Rep(Arity)}}&lt;/code&gt; です。（Erlang / OTP R15より前：Rep（E）= &lt;code&gt;{'fun',LINE,{function,Module,Name,Arity}}&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="21dea75946b388b1e954dab71b395d65115fda11" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Name Fc_1 ; ... ; Name Fc_k end&lt;/code&gt;, where &lt;code&gt;Name&lt;/code&gt; is a variable and each &lt;code&gt;Fc_i&lt;/code&gt; is a function clause, then Rep(E) = &lt;code&gt;{named_fun,ANNO,Name,[Rep(Fc_1), ..., Rep(Fc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが楽しい表現の場合 &lt;code&gt;fun Name Fc_1 ; ... ; Name Fc_k end&lt;/code&gt; 、ここで &lt;code&gt;Name&lt;/code&gt; は変数で、各 &lt;code&gt;Fc_i&lt;/code&gt; は関数節である場合、Rep（E）= &lt;code&gt;{named_fun,ANNO,Name,[Rep(Fc_1), ..., Rep(Fc_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="508f3673ffdf47d28232744927849cd0723a0e7f" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Name Fc_1 ; ... ; Name Fc_k end&lt;/code&gt;, where &lt;code&gt;Name&lt;/code&gt; is a variable and each &lt;code&gt;Fc_i&lt;/code&gt; is a function clause, then Rep(E) = &lt;code&gt;{named_fun,LINE,Name,[Rep(Fc_1), ..., Rep(Fc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが楽しい式なら &lt;code&gt;fun Name Fc_1 ; ... ; Name Fc_k end&lt;/code&gt; 、ここで &lt;code&gt;Name&lt;/code&gt; は変数であり、各 &lt;code&gt;Fc_i&lt;/code&gt; は関数句です。Rep（E）= &lt;code&gt;{named_fun,LINE,Name,[Rep(Fc_1), ..., Rep(Fc_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c48f719d2f5c29bf4ca1a282cd70942bcc783e8f" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Name/Arity&lt;/code&gt;, then Rep(E) = &lt;code&gt;{'fun',ANNO,{function,Name,Arity}}&lt;/code&gt;.</source>
          <target state="translated">Eが楽しい式 &lt;code&gt;fun Name/Arity&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{'fun',ANNO,{function,Name,Arity}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c55128cd4494aabe3305a25ed372470c6cb1e94" translate="yes" xml:space="preserve">
          <source>If E is a fun expression &lt;code&gt;fun Name/Arity&lt;/code&gt;, then Rep(E) = &lt;code&gt;{'fun',LINE,{function,Name,Arity}}&lt;/code&gt;.</source>
          <target state="translated">Eが楽しい式 &lt;code&gt;fun Name/Arity&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{'fun',LINE,{function,Name,Arity}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a222846ccb959514cd088c00700755704ce4b70c" translate="yes" xml:space="preserve">
          <source>If E is a function call &lt;code&gt;E_0(E_1, ..., E_k)&lt;/code&gt;, then Rep(E) = &lt;code&gt;{call,ANNO,Rep(E_0),[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが関数呼び出し &lt;code&gt;E_0(E_1, ..., E_k)&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{call,ANNO,Rep(E_0),[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ae431171a9a508e70cab829bfde9130d74f3b08a" translate="yes" xml:space="preserve">
          <source>If E is a function call &lt;code&gt;E_0(E_1, ..., E_k)&lt;/code&gt;, then Rep(E) = &lt;code&gt;{call,LINE,Rep(E_0),[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが関数呼び出し &lt;code&gt;E_0(E_1, ..., E_k)&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{call,LINE,Rep(E_0),[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b051c7315ab5f877f6f8d1a3fcb5d7352c32d165" translate="yes" xml:space="preserve">
          <source>If E is a function call &lt;code&gt;E_m:E_0(E_1, ..., E_k)&lt;/code&gt;, then Rep(E) = &lt;code&gt;{call,ANNO,{remote,ANNO,Rep(E_m),Rep(E_0)},[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが関数呼び出し &lt;code&gt;E_m:E_0(E_1, ..., E_k)&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{call,ANNO,{remote,ANNO,Rep(E_m),Rep(E_0)},[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a930c4f44f20684a46e411dc14a24535a2814f3b" translate="yes" xml:space="preserve">
          <source>If E is a function call &lt;code&gt;E_m:E_0(E_1, ..., E_k)&lt;/code&gt;, then Rep(E) = &lt;code&gt;{call,LINE,{remote,LINE,Rep(E_m),Rep(E_0)},[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが関数呼び出し &lt;code&gt;E_m:E_0(E_1, ..., E_k)&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{call,LINE,{remote,LINE,Rep(E_m),Rep(E_0)},[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad4dbd16a1df7767e8ca6eb37d1f31ac1e007d69" translate="yes" xml:space="preserve">
          <source>If E is a list comprehension &lt;code&gt;[E_0 || Q_1, ..., Q_k]&lt;/code&gt;, where each &lt;code&gt;Q_i&lt;/code&gt; is a qualifier, then Rep(E) = &lt;code&gt;{lc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt;. For Rep(Q), see below.</source>
          <target state="translated">Eがリスト内包表記の場合 &lt;code&gt;[E_0 || Q_1, ..., Q_k]&lt;/code&gt; 、ここで各 &lt;code&gt;Q_i&lt;/code&gt; は修飾子であり、Rep（E）= &lt;code&gt;{lc,ANNO,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt; 。Rep（Q）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0a9ba22f768bf25ed619e9861b8a15d7cd9192c" translate="yes" xml:space="preserve">
          <source>If E is a list comprehension &lt;code&gt;[E_0 || Q_1, ..., Q_k]&lt;/code&gt;, where each &lt;code&gt;Q_i&lt;/code&gt; is a qualifier, then Rep(E) = &lt;code&gt;{lc,LINE,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt;. For Rep(Q), see below.</source>
          <target state="translated">Eがリスト内包の場合 &lt;code&gt;[E_0 || Q_1, ..., Q_k]&lt;/code&gt; 、各 &lt;code&gt;Q_i&lt;/code&gt; は修飾子、Rep（E）= &lt;code&gt;{lc,LINE,Rep(E_0),[Rep(Q_1), ..., Rep(Q_k)]}&lt;/code&gt; です。Rep（Q）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8512e6de961ae7de3dc6cd02be5dfd7477d76f7" translate="yes" xml:space="preserve">
          <source>If E is a map creation &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt;, then Rep(E) = &lt;code&gt;{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Eがマップ作成 &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連付け &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt; である場合、Rep（E）= &lt;code&gt;{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="39c06772c585b4d5e9af41e11c7fa823e87a3781" translate="yes" xml:space="preserve">
          <source>If E is a map creation &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt;, then Rep(E) = &lt;code&gt;{map,LINE,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Eがマップ作成 &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連 &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt; である場合、Rep（E）= &lt;code&gt;{map,LINE,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="237f2587bea6e744a08e9b787c8ee8a08e4fc754" translate="yes" xml:space="preserve">
          <source>If E is a map update &lt;code&gt;E_0#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt; or &lt;code&gt;E_i_1 := E_i_2&lt;/code&gt;, then Rep(E) = &lt;code&gt;{map,ANNO,Rep(E_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Eがマップ更新 &lt;code&gt;E_0#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連付け &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt; または &lt;code&gt;E_i_1 := E_i_2&lt;/code&gt; である場合、Rep（E）= &lt;code&gt;{map,ANNO,Rep(E_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="800dae600f3ee86ffec1de1f210ed80d17fd2b9b" translate="yes" xml:space="preserve">
          <source>If E is a map update &lt;code&gt;E_0#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt; or &lt;code&gt;E_i_1 := E_i_2&lt;/code&gt;, then Rep(E) = &lt;code&gt;{map,LINE,Rep(E_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Eがマップ更新 &lt;code&gt;E_0#{A_1, ..., A_k}&lt;/code&gt; である場合、各 &lt;code&gt;A_i&lt;/code&gt; は関連 &lt;code&gt;E_i_1 =&amp;gt; E_i_2&lt;/code&gt; または &lt;code&gt;E_i_1 := E_i_2&lt;/code&gt; であり、Rep（E）= &lt;code&gt;{map,LINE,Rep(E_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="4f62176ee9725e6dd7a1d357a9791afa6d505171" translate="yes" xml:space="preserve">
          <source>If E is a match operator expression &lt;code&gt;P = E_0&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern, then Rep(E) = &lt;code&gt;{match,ANNO,Rep(P),Rep(E_0)}&lt;/code&gt;.</source>
          <target state="translated">Eが一致演算子式 &lt;code&gt;P = E_0&lt;/code&gt; （ &lt;code&gt;P&lt;/code&gt; はパターン）の場合、Rep（E）= &lt;code&gt;{match,ANNO,Rep(P),Rep(E_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98ecb06f9387738ad9c4608934528d6d6501def9" translate="yes" xml:space="preserve">
          <source>If E is a match operator expression &lt;code&gt;P = E_0&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern, then Rep(E) = &lt;code&gt;{match,LINE,Rep(P),Rep(E_0)}&lt;/code&gt;.</source>
          <target state="translated">Eが一致演算子式 &lt;code&gt;P = E_0&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンである場合、Rep（E）= &lt;code&gt;{match,LINE,Rep(P),Rep(E_0)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="690ad831c8e62316c71be505eb989a5f5da834db" translate="yes" xml:space="preserve">
          <source>If E is a parenthesized expression &lt;code&gt;( E_0 )&lt;/code&gt;, then Rep(E) = &lt;code&gt;Rep(E_0)&lt;/code&gt;, that is, parenthesized expressions cannot be distinguished from their bodies.</source>
          <target state="translated">Eが括弧で囲まれた式 &lt;code&gt;( E_0 )&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;Rep(E_0)&lt;/code&gt; 、つまり括弧で囲まれた式は本体と区別できません。</target>
        </trans-unit>
        <trans-unit id="eb97a9c72be1a3ec039d3b19e59af460c1f9597f" translate="yes" xml:space="preserve">
          <source>If E is a receive expression &lt;code&gt;receive Cc_1 ; ... ; Cc_k after E_0 -&amp;gt; B_t end&lt;/code&gt;, where each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, &lt;code&gt;E_0&lt;/code&gt; is an expression, and &lt;code&gt;B_t&lt;/code&gt; is a body, then Rep(E) = &lt;code&gt;{'receive',ANNO,[Rep(Cc_1), ..., Rep(Cc_k)],Rep(E_0),Rep(B_t)}&lt;/code&gt;.</source>
          <target state="translated">Eが受信式の場合、 &lt;code&gt;receive Cc_1 ; ... ; Cc_k after E_0 -&amp;gt; B_t end&lt;/code&gt; 、ここで、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase節、 &lt;code&gt;E_0&lt;/code&gt; は式、 &lt;code&gt;B_t&lt;/code&gt; は本体であり、Rep（E）= &lt;code&gt;{'receive',ANNO,[Rep(Cc_1), ..., Rep(Cc_k)],Rep(E_0),Rep(B_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="03e50f32be6fa18564dc0f97ac6d17895199c4c5" translate="yes" xml:space="preserve">
          <source>If E is a receive expression &lt;code&gt;receive Cc_1 ; ... ; Cc_k after E_0 -&amp;gt; B_t end&lt;/code&gt;, where each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, &lt;code&gt;E_0&lt;/code&gt; is an expression, and &lt;code&gt;B_t&lt;/code&gt; is a body, then Rep(E) = &lt;code&gt;{'receive',LINE,[Rep(Cc_1), ..., Rep(Cc_k)],Rep(E_0),Rep(B_t)}&lt;/code&gt;.</source>
          <target state="translated">Eが受信式の場合、 &lt;code&gt;receive Cc_1 ; ... ; Cc_k after E_0 -&amp;gt; B_t end&lt;/code&gt; 。ここで、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase句、 &lt;code&gt;E_0&lt;/code&gt; は式、 &lt;code&gt;B_t&lt;/code&gt; は本体、Rep（E）= &lt;code&gt;{'receive',LINE,[Rep(Cc_1), ..., Rep(Cc_k)],Rep(E_0),Rep(B_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62607bd086692a7a4e73a9a4340bedc98933a8ce" translate="yes" xml:space="preserve">
          <source>If E is a receive expression &lt;code&gt;receive Cc_1 ; ... ; Cc_k end&lt;/code&gt;, where each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, then Rep(E) = &lt;code&gt;{'receive',ANNO,[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが受信式の場合、 &lt;code&gt;receive Cc_1 ; ... ; Cc_k end&lt;/code&gt; 、ここで各 &lt;code&gt;Cc_i&lt;/code&gt; はcase節であり、Rep（E）= &lt;code&gt;{'receive',ANNO,[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81d96409c6d75213915ef6028c674bf71b947761" translate="yes" xml:space="preserve">
          <source>If E is a receive expression &lt;code&gt;receive Cc_1 ; ... ; Cc_k end&lt;/code&gt;, where each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, then Rep(E) = &lt;code&gt;{'receive',LINE,[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eが受信式の場合、 &lt;code&gt;receive Cc_1 ; ... ; Cc_k end&lt;/code&gt; 。各 &lt;code&gt;Cc_i&lt;/code&gt; はcase句であり、Rep（E）= &lt;code&gt;{'receive',LINE,[Rep(Cc_1), ..., Rep(Cc_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8db402d6b9bfaaf27c4221b6ecb8f7a3438ef10d" translate="yes" xml:space="preserve">
          <source>If E is a record creation &lt;code&gt;#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom or &lt;code&gt;_&lt;/code&gt;, then Rep(E) = &lt;code&gt;{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(E_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Eがレコード作成 &lt;code&gt;#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt; 場合、各 &lt;code&gt;Field_i&lt;/code&gt; はアトムまたは &lt;code&gt;_&lt;/code&gt; であり、Rep（E）= &lt;code&gt;{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(E_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="769c6455ce5fde46b459e44a8ec3bffa7196d158" translate="yes" xml:space="preserve">
          <source>If E is a record creation &lt;code&gt;#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom or &lt;code&gt;_&lt;/code&gt;, then Rep(E) = &lt;code&gt;{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(E_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Eがレコード作成 &lt;code&gt;#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt; であり、各 &lt;code&gt;Field_i&lt;/code&gt; がアトムまたは &lt;code&gt;_&lt;/code&gt; である場合、Rep（E）= &lt;code&gt;{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(E_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0b95681bf643b3e4b28c35faa965a19ee4fda5ac" translate="yes" xml:space="preserve">
          <source>If E is a record field access &lt;code&gt;E_0#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(E) = &lt;code&gt;{record_field,ANNO,Rep(E_0),Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Eがレコードフィールドアクセス &lt;code&gt;E_0#Name.Field&lt;/code&gt; （ &lt;code&gt;Field&lt;/code&gt; はアトム）の場合、Rep（E）= &lt;code&gt;{record_field,ANNO,Rep(E_0),Name,Rep(Field)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="571a72b7ca82dcb7bd3dbc0550c43c731464ee91" translate="yes" xml:space="preserve">
          <source>If E is a record field access &lt;code&gt;E_0#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(E) = &lt;code&gt;{record_field,LINE,Rep(E_0),Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Eがレコードフィールドアクセス &lt;code&gt;E_0#Name.Field&lt;/code&gt; で、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（E）= &lt;code&gt;{record_field,LINE,Rep(E_0),Name,Rep(Field)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bd0016f76592cf4abfa2e2b7e0edf19c3c161d6e" translate="yes" xml:space="preserve">
          <source>If E is a record field index &lt;code&gt;#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(E) = &lt;code&gt;{record_index,ANNO,Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Eがレコードフィールドインデックス &lt;code&gt;#Name.Field&lt;/code&gt; であり、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（E）= &lt;code&gt;{record_index,ANNO,Name,Rep(Field)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="41585c3fb51f7eca9a3e6945efca3d137bddef8d" translate="yes" xml:space="preserve">
          <source>If E is a record field index &lt;code&gt;#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(E) = &lt;code&gt;{record_index,LINE,Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Eがレコードフィールドインデックス &lt;code&gt;#Name.Field&lt;/code&gt; で、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（E）= &lt;code&gt;{record_index,LINE,Name,Rep(Field)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c0e1680739b87d61cf8de240ccb43c2b9ea6736a" translate="yes" xml:space="preserve">
          <source>If E is a record update &lt;code&gt;E_0#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom, then Rep(E) = &lt;code&gt;{record,ANNO,Rep(E_0),Name,[{record_field,ANNO,Rep(Field_1),Rep(E_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Eがレコード更新 &lt;code&gt;E_0#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt; 場合、各 &lt;code&gt;Field_i&lt;/code&gt; はアトムであり、Rep（E）= &lt;code&gt;{record,ANNO,Rep(E_0),Name,[{record_field,ANNO,Rep(Field_1),Rep(E_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4c141b24fbc5240a27271026022f8b84cc1c46ec" translate="yes" xml:space="preserve">
          <source>If E is a record update &lt;code&gt;E_0#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom, then Rep(E) = &lt;code&gt;{record,LINE,Rep(E_0),Name,[{record_field,LINE,Rep(Field_1),Rep(E_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Eがレコード更新 &lt;code&gt;E_0#Name{Field_1=E_1, ..., Field_k=E_k}&lt;/code&gt; であり、各 &lt;code&gt;Field_i&lt;/code&gt; がアトムである場合、Rep（E）= &lt;code&gt;{record,LINE,Rep(E_0),Name,[{record_field,LINE,Rep(Field_1),Rep(E_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(E_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1790d1e53e6feb25e42b2594447e491760461bcd" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are bodies, then Rep(E) = &lt;code&gt;{'try',ANNO,Rep(B),[],[],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合 &lt;code&gt;try B after A end&lt;/code&gt; 試行します。ここで、 &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体であり、Rep（E）= &lt;code&gt;{'try',ANNO,Rep(B),[],[],Rep(A)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5433ba0e7386d18ba29df013a33a3bd71eec1de4" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are bodies, then Rep(E) = &lt;code&gt;{'try',LINE,Rep(B),[],[],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式で、 &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; が本文である &lt;code&gt;try B after A end&lt;/code&gt; 試す場合、Rep（E）= &lt;code&gt;{'try',LINE,Rep(B),[],[],Rep(A)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="66db70f66ec2e1c9cfff251e52d9d4fb44005444" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are bodies, and each &lt;code&gt;Tc_i&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',ANNO,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合、try &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k after A end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体であり、各 &lt;code&gt;Tc_i&lt;/code&gt; はcatch節である場合、Rep（E）= &lt;code&gt;{'try',ANNO,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bb0c9fd33084b3aa2b6298f495d8933521120111" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are bodies, and each &lt;code&gt;Tc_i&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',LINE,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式である場合は、 &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k after A end&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体、各 &lt;code&gt;Tc_i&lt;/code&gt; はcatch句、Rep（E）= &lt;code&gt;{'try',LINE,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="527f66fe559f2313ab4c9f07440149b4724a0e36" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is a body and each &lt;code&gt;Tc_i&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',ANNO,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],[]}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合、try &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; は本体、各 &lt;code&gt;Tc_i&lt;/code&gt; はcatch節である場合、Rep（E）= &lt;code&gt;{'try',ANNO,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],[]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0174ae0ac371a20fa8346b5c98865a86bb0973f" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is a body and each &lt;code&gt;Tc_i&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',LINE,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],[]}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式である場合は、 &lt;code&gt;try B catch Tc_1 ; ... ; Tc_k end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; は本体で、各 &lt;code&gt;Tc_i&lt;/code&gt; はcatch句です。Rep（E）= &lt;code&gt;{'try',LINE,Rep(B),[],[Rep(Tc_1), ..., Rep(Tc_k)],[]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c97756483607f476bd044cc105daba38c615ff16" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B of Cc_1 ; ... ; Cc_k after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are a bodies, and each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, then Rep(E) = &lt;code&gt;{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合 &lt;code&gt;try B of Cc_1 ; ... ; Cc_k after A end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体であり、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase節である場合、Rep（E）= &lt;code&gt;{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[],Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17896fd4f3f657c1acca030c3b7c2477fd7ea070" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B of Cc_1 ; ... ; Cc_k after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are a bodies, and each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, then Rep(E) = &lt;code&gt;{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合は、 &lt;code&gt;try B of Cc_1 ; ... ; Cc_k after A end&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase句、Rep（E）= &lt;code&gt;{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[],Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ed9f5ca2ce8dc840d927013fd593a6e43685c6fc" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are a bodies, each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, and each &lt;code&gt;Tc_j&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合 &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n after A end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase節、各 &lt;code&gt;Tc_j&lt;/code&gt; はcatch節の場合、Rep（E）= &lt;code&gt;{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2f8fa527e6b0ee33c16b21df17493bd713be90d3" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n after A end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; are a bodies, each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, and each &lt;code&gt;Tc_j&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合は、 &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n after A end&lt;/code&gt; 、 &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; は本体、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase句、各 &lt;code&gt;Tc_j&lt;/code&gt; はcatch句、Rep（E）= &lt;code&gt;{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="87716dd0d35ab489a52485d5fff86ee7a86034f5" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is a body, each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, and each &lt;code&gt;Tc_j&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],[]}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合 &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; は本体、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase節、各 &lt;code&gt;Tc_j&lt;/code&gt; はcatch節である場合、Rep（E）= &lt;code&gt;{'try',ANNO,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],[]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32741bd8aaa39a55dc66b9c017671086d64dc49f" translate="yes" xml:space="preserve">
          <source>If E is a try expression &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n end&lt;/code&gt;, where &lt;code&gt;B&lt;/code&gt; is a body, each &lt;code&gt;Cc_i&lt;/code&gt; is a case clause, and each &lt;code&gt;Tc_j&lt;/code&gt; is a catch clause, then Rep(E) = &lt;code&gt;{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],[]}&lt;/code&gt;.</source>
          <target state="translated">Eがtry式の場合は、 &lt;code&gt;try B of Cc_1 ; ... ; Cc_k catch Tc_1 ; ... ; Tc_n end&lt;/code&gt; 、ここで &lt;code&gt;B&lt;/code&gt; は本体、各 &lt;code&gt;Cc_i&lt;/code&gt; はcase句、各 &lt;code&gt;Tc_j&lt;/code&gt; はcatch句、Rep（E）= &lt;code&gt;{'try',LINE,Rep(B),[Rep(Cc_1), ..., Rep(Cc_k)],[Rep(Tc_1), ..., Rep(Tc_n)],[]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a7a0dff10ecd15daa7bf8f1e4f2c478633f53be" translate="yes" xml:space="preserve">
          <source>If E is a tuple skeleton &lt;code&gt;{E_1, ..., E_k}&lt;/code&gt;, then Rep(E) = &lt;code&gt;{tuple,ANNO,[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eがタプルスケルトン &lt;code&gt;{E_1, ..., E_k}&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{tuple,ANNO,[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff91a87e5952e2ad6d9b444216166d09d3ca77eb" translate="yes" xml:space="preserve">
          <source>If E is a tuple skeleton &lt;code&gt;{E_1, ..., E_k}&lt;/code&gt;, then Rep(E) = &lt;code&gt;{tuple,LINE,[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eがタプルスケルトン &lt;code&gt;{E_1, ..., E_k}&lt;/code&gt; 場合、Rep（E）= &lt;code&gt;{tuple,LINE,[Rep(E_1), ..., Rep(E_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="4d73c4b24d215a5b14fa705cf6b8fc7f04eaa159" translate="yes" xml:space="preserve">
          <source>If E is a variable &lt;code&gt;V&lt;/code&gt;, then Rep(E) = &lt;code&gt;{var,ANNO,A}&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">Eが変数 &lt;code&gt;V&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{var,ANNO,A}&lt;/code&gt; 。ここで、 &lt;code&gt;A&lt;/code&gt; は、 &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。</target>
        </trans-unit>
        <trans-unit id="1cebb18271309572b378e6bac693d831da6a5de6" translate="yes" xml:space="preserve">
          <source>If E is a variable &lt;code&gt;V&lt;/code&gt;, then Rep(E) = &lt;code&gt;{var,LINE,A}&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">Eが変数 &lt;code&gt;V&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{var,LINE,A}&lt;/code&gt; 。ここで、 &lt;code&gt;A&lt;/code&gt; は &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。</target>
        </trans-unit>
        <trans-unit id="5399bc470d1e24b61c04135abc6ec1c48ce12a53" translate="yes" xml:space="preserve">
          <source>If E is an atomic literal &lt;code&gt;L&lt;/code&gt;, then Rep(E) = Rep(L).</source>
          <target state="translated">Eがアトミックリテラル &lt;code&gt;L&lt;/code&gt; の場合、Rep（E）= Rep（L）になります。</target>
        </trans-unit>
        <trans-unit id="704415f6ec0f5288d1cf6770b2ca8548cffab4c3" translate="yes" xml:space="preserve">
          <source>If E is an if expression &lt;code&gt;if Ic_1 ; ... ; Ic_k end&lt;/code&gt;, where each &lt;code&gt;Ic_i&lt;/code&gt; is an if clause, then Rep(E) = &lt;code&gt;{'if',ANNO,[Rep(Ic_1), ..., Rep(Ic_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eがif式の &lt;code&gt;if Ic_1 ; ... ; Ic_k end&lt;/code&gt; 、ここで各 &lt;code&gt;Ic_i&lt;/code&gt; はif句であり、Rep（E）= &lt;code&gt;{'if',ANNO,[Rep(Ic_1), ..., Rep(Ic_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="591459a3195bdb1721ecc29118a41cd9ecf5ad76" translate="yes" xml:space="preserve">
          <source>If E is an if expression &lt;code&gt;if Ic_1 ; ... ; Ic_k end&lt;/code&gt;, where each &lt;code&gt;Ic_i&lt;/code&gt; is an if clause, then Rep(E) = &lt;code&gt;{'if',LINE,[Rep(Ic_1), ..., Rep(Ic_k)]}&lt;/code&gt;.</source>
          <target state="translated">Eがif式の &lt;code&gt;if Ic_1 ; ... ; Ic_k end&lt;/code&gt; 、ここで各 &lt;code&gt;Ic_i&lt;/code&gt; はif句であり、Rep（E）= &lt;code&gt;{'if',LINE,[Rep(Ic_1), ..., Rep(Ic_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a540b17ecf127991c06127bf562cd9b622f73fd8" translate="yes" xml:space="preserve">
          <source>If E is an operator expression &lt;code&gt;E_1 Op E_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator other than match operator &lt;code&gt;=&lt;/code&gt;, then Rep(E) = &lt;code&gt;{op,ANNO,Op,Rep(E_1),Rep(E_2)}&lt;/code&gt;.</source>
          <target state="translated">Eが演算子式 &lt;code&gt;E_1 Op E_2&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が一致演算子 &lt;code&gt;=&lt;/code&gt; 以外の二項演算子である場合、Rep（E）= &lt;code&gt;{op,ANNO,Op,Rep(E_1),Rep(E_2)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="74042cb0d91ea528b8846bce8407c4c94e7828f3" translate="yes" xml:space="preserve">
          <source>If E is an operator expression &lt;code&gt;E_1 Op E_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator other than match operator &lt;code&gt;=&lt;/code&gt;, then Rep(E) = &lt;code&gt;{op,LINE,Op,Rep(E_1),Rep(E_2)}&lt;/code&gt;.</source>
          <target state="translated">Eが演算子式 &lt;code&gt;E_1 Op E_2&lt;/code&gt; で、 &lt;code&gt;Op&lt;/code&gt; がmatch operator &lt;code&gt;=&lt;/code&gt; 以外の2項演算子である場合、Rep（E）= &lt;code&gt;{op,LINE,Op,Rep(E_1),Rep(E_2)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6ae3a7a50482463c878cd3a4535e569c8a10c045" translate="yes" xml:space="preserve">
          <source>If E is an operator expression &lt;code&gt;Op E_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator, then Rep(E) = &lt;code&gt;{op,ANNO,Op,Rep(E_0)}&lt;/code&gt;.</source>
          <target state="translated">Eが演算子式 &lt;code&gt;Op E_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子である場合、Rep（E）= &lt;code&gt;{op,ANNO,Op,Rep(E_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="22209cbc466369d61322ba8f94065874c289f3f5" translate="yes" xml:space="preserve">
          <source>If E is an operator expression &lt;code&gt;Op E_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator, then Rep(E) = &lt;code&gt;{op,LINE,Op,Rep(E_0)}&lt;/code&gt;.</source>
          <target state="translated">Eが演算子式 &lt;code&gt;Op E_0&lt;/code&gt; で、 &lt;code&gt;Op&lt;/code&gt; が単項演算子の場合、Rep（E）= &lt;code&gt;{op,LINE,Op,Rep(E_0)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0dd90da6de4013d8fcdf427618cebc1de03b8894" translate="yes" xml:space="preserve">
          <source>If E is nil, &lt;code&gt;[]&lt;/code&gt;, then Rep(E) = &lt;code&gt;{nil,ANNO}&lt;/code&gt;.</source>
          <target state="translated">Eがnil、 &lt;code&gt;[]&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{nil,ANNO}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aecc39e30213c6bf99c4212c4aeafe719ce7ed08" translate="yes" xml:space="preserve">
          <source>If E is nil, &lt;code&gt;[]&lt;/code&gt;, then Rep(E) = &lt;code&gt;{nil,LINE}&lt;/code&gt;.</source>
          <target state="translated">Eがnil、 &lt;code&gt;[]&lt;/code&gt; の場合、Rep（E）= &lt;code&gt;{nil,LINE}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="e80045470a896b7cf38c6a0866ea3eab2424863f" translate="yes" xml:space="preserve">
          <source>If Erlang is started in long name distributed mode, it needs to get the domain name from somewhere and reads system &lt;code&gt;inet&lt;/code&gt; configuration files for this information. Any hosts and resolver information found is also recorded, but not used as long as Erlang is configured for native lookups. The information becomes useful if the lookup method is changed to &lt;code&gt;'file'&lt;/code&gt; or &lt;code&gt;'dns'&lt;/code&gt;, see below.</source>
          <target state="translated">Erlangが長い名前の分散モードで起動されている場合、Erlangはどこかからドメイン名を取得し、この情報を得るためにシステムの &lt;code&gt;inet&lt;/code&gt; 構成ファイルを読み取る必要があります。見つかったホストとリゾルバー情報も記録されますが、Erlangがネイティブルックアップ用に構成されている限り、使用されません。この情報は、検索方法が &lt;code&gt;'file'&lt;/code&gt; または &lt;code&gt;'dns'&lt;/code&gt; に変更された場合に役立ちます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ba99b579cb5dc5d83148e021817ebf4a31439e9" translate="yes" xml:space="preserve">
          <source>If Erlang sends, for example, the list &lt;code&gt;[$a,$b,$c]&lt;/code&gt; to the port, the &lt;code&gt;bufflen&lt;/code&gt; variable is &lt;code&gt;3&lt;/code&gt; and the &lt;code&gt;buff&lt;/code&gt; variable contains &lt;code&gt;{'a','b','c'}&lt;/code&gt; (no &lt;code&gt;NULL&lt;/code&gt; termination). Usually the first byte is used as an opcode, which is the case in this driver too (at least when the port is in &lt;code&gt;command&lt;/code&gt; mode). The opcodes are defined as follows:</source>
          <target state="translated">Erlangがたとえばリスト &lt;code&gt;[$a,$b,$c]&lt;/code&gt; をポートに &lt;code&gt;bufflen&lt;/code&gt; 場合、bufflen変数は &lt;code&gt;3&lt;/code&gt; で、 &lt;code&gt;buff&lt;/code&gt; 変数には &lt;code&gt;{'a','b','c'}&lt;/code&gt; が含まれ &lt;code&gt;NULL&lt;/code&gt; （NULL終了なし） ）。通常、最初のバイトはオペコードとして使用されます。これは、このドライバーの場合も同様です（少なくともポートが &lt;code&gt;command&lt;/code&gt; モードの場合）。オペコードは次のように定義されています。</target>
        </trans-unit>
        <trans-unit id="d4fecac2cf10df2e039ce3e4f4d5fa9aa6b7bf2b" translate="yes" xml:space="preserve">
          <source>If F is a function declaration &lt;code&gt;Name Fc_1 ; ... ; Name Fc_k&lt;/code&gt;, where each &lt;code&gt;Fc_i&lt;/code&gt; is a function clause with a pattern sequence of the same length &lt;code&gt;Arity&lt;/code&gt;, then Rep(F) = &lt;code&gt;{function,ANNO,Name,Arity,[Rep(Fc_1), ...,Rep(Fc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Fが関数宣言の場合 &lt;code&gt;Name Fc_1 ; ... ; Name Fc_k&lt;/code&gt; それぞれ、 &lt;code&gt;Fc_i&lt;/code&gt; は、同じ長さのパターン配列と機能句で &lt;code&gt;Arity&lt;/code&gt; 、その後、担当者（F）= &lt;code&gt;{function,ANNO,Name,Arity,[Rep(Fc_1), ...,Rep(Fc_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="914c013be868be9b46633a3fae8ef36377ee34a1" translate="yes" xml:space="preserve">
          <source>If F is a function declaration &lt;code&gt;Name Fc_1 ; ... ; Name Fc_k&lt;/code&gt;, where each &lt;code&gt;Fc_i&lt;/code&gt; is a function clause with a pattern sequence of the same length &lt;code&gt;Arity&lt;/code&gt;, then Rep(F) = &lt;code&gt;{function,LINE,Name,Arity,[Rep(Fc_1), ...,Rep(Fc_k)]}&lt;/code&gt;.</source>
          <target state="translated">Fが関数宣言の場合 &lt;code&gt;Name Fc_1 ; ... ; Name Fc_k&lt;/code&gt; それぞれ、 &lt;code&gt;Fc_i&lt;/code&gt; は、同じ長さのパターン配列と機能句で &lt;code&gt;Arity&lt;/code&gt; 、その後、担当者（F）= &lt;code&gt;{function,LINE,Name,Arity,[Rep(Fc_1), ...,Rep(Fc_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="92b2fdf009166615e68068377c093d1265169847" translate="yes" xml:space="preserve">
          <source>If F is a function specification &lt;code&gt;-Spec Name Ft_1; ...; Ft_k&lt;/code&gt;, where &lt;code&gt;Spec&lt;/code&gt; is either the atom &lt;code&gt;spec&lt;/code&gt; or the atom &lt;code&gt;callback&lt;/code&gt;, and each &lt;code&gt;Ft_i&lt;/code&gt; is a possibly constrained function type with an argument sequence of the same length &lt;code&gt;Arity&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,Spec,{{Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Fが機能仕様の場合-仕様 &lt;code&gt;-Spec Name Ft_1; ...; Ft_k&lt;/code&gt; 、 &lt;code&gt;Spec&lt;/code&gt; いずれかの原子である &lt;code&gt;spec&lt;/code&gt; 又は原子 &lt;code&gt;callback&lt;/code&gt; 、および各 &lt;code&gt;Ft_i&lt;/code&gt; は、同じ長さの引数の配列を有する可能性が制約関数型である &lt;code&gt;Arity&lt;/code&gt; 、その後、担当者（F）= &lt;code&gt;{attribute,ANNO,Spec,{{Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="839e0427c2712f13a30277505b79b3f3678e27bc" translate="yes" xml:space="preserve">
          <source>If F is a function specification &lt;code&gt;-Spec Name Ft_1; ...; Ft_k&lt;/code&gt;, where &lt;code&gt;Spec&lt;/code&gt; is either the atom &lt;code&gt;spec&lt;/code&gt; or the atom &lt;code&gt;callback&lt;/code&gt;, and each &lt;code&gt;Ft_i&lt;/code&gt; is a possibly constrained function type with an argument sequence of the same length &lt;code&gt;Arity&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,Line,Spec,{{Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Fが関数仕様の場合 &lt;code&gt;-Spec Name Ft_1; ...; Ft_k&lt;/code&gt; 、 &lt;code&gt;Spec&lt;/code&gt; いずれかの原子である &lt;code&gt;spec&lt;/code&gt; 又は原子 &lt;code&gt;callback&lt;/code&gt; 、および各 &lt;code&gt;Ft_i&lt;/code&gt; は、同じ長さの引数の配列を有する可能性が制約関数型である &lt;code&gt;Arity&lt;/code&gt; 、その後、担当者（F）= &lt;code&gt;{attribute,Line,Spec,{{Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d7b133a685e1078d511adc4d4a4c0155cfdea6af" translate="yes" xml:space="preserve">
          <source>If F is a function specification &lt;code&gt;-spec Mod:Name Ft_1; ...; Ft_k&lt;/code&gt;, where each &lt;code&gt;Ft_i&lt;/code&gt; is a possibly constrained function type with an argument sequence of the same length &lt;code&gt;Arity&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,spec,{{Mod,Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Fが関数仕様の場合 &lt;code&gt;-spec Mod:Name Ft_1; ...; Ft_k&lt;/code&gt; それぞれ、 &lt;code&gt;Ft_i&lt;/code&gt; は、同じ長さの引数の配列を有する可能性が制約関数型である &lt;code&gt;Arity&lt;/code&gt; 、その後、担当者（F）= &lt;code&gt;{attribute,ANNO,spec,{{Mod,Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17271a999b9344b2a590ac6ed7fcd19ea7837c3a" translate="yes" xml:space="preserve">
          <source>If F is a function specification &lt;code&gt;-spec Mod:Name Ft_1; ...; Ft_k&lt;/code&gt;, where each &lt;code&gt;Ft_i&lt;/code&gt; is a possibly constrained function type with an argument sequence of the same length &lt;code&gt;Arity&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,Line,spec,{{Mod,Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Fが関数仕様の場合 &lt;code&gt;-spec Mod:Name Ft_1; ...; Ft_k&lt;/code&gt; それぞれ、 &lt;code&gt;Ft_i&lt;/code&gt; は、同じ長さの引数の配列を有する可能性が制約関数型である &lt;code&gt;Arity&lt;/code&gt; 、その後、担当者（F）= &lt;code&gt;{attribute,Line,spec,{{Mod,Name,Arity},[Rep(Ft_1), ..., Rep(Ft_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3fa68f807198b22105fc44214b7d3c63162ade67" translate="yes" xml:space="preserve">
          <source>If F is a record declaration &lt;code&gt;-record(Name,{V_1, ..., V_k})&lt;/code&gt;, where each &lt;code&gt;V_i&lt;/code&gt; is a record field, then Rep(F) = &lt;code&gt;{attribute,ANNO,record,{Name,[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt;. For Rep(V), see below.</source>
          <target state="translated">Fがレコード宣言 &lt;code&gt;-record(Name,{V_1, ..., V_k})&lt;/code&gt; であり、各 &lt;code&gt;V_i&lt;/code&gt; がレコードフィールドである場合、Rep（F）= &lt;code&gt;{attribute,ANNO,record,{Name,[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt; 。Rep（V）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="fd91f9ee512189a9782c72f858106c81c42eb39a" translate="yes" xml:space="preserve">
          <source>If F is a record declaration &lt;code&gt;-record(Name,{V_1, ..., V_k})&lt;/code&gt;, where each &lt;code&gt;V_i&lt;/code&gt; is a record field, then Rep(F) = &lt;code&gt;{attribute,LINE,record,{Name,[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt;. For Rep(V), see below.</source>
          <target state="translated">Fがレコード宣言 &lt;code&gt;-record(Name,{V_1, ..., V_k})&lt;/code&gt; であり、各 &lt;code&gt;V_i&lt;/code&gt; がレコードフィールドである場合、Rep（F）= &lt;code&gt;{attribute,LINE,record,{Name,[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt; 。Rep（V）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="25adb05f207dd769bbafb0f578b65f641a0a7794" translate="yes" xml:space="preserve">
          <source>If F is a record field type &lt;code&gt;Name :: Type&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; is a type, then Rep(F) = &lt;code&gt;{type,ANNO,field_type,[Rep(Name),Rep(Type)]}&lt;/code&gt;.</source>
          <target state="translated">Fがレコードフィールドタイプ &lt;code&gt;Name :: Type&lt;/code&gt; 場合、 &lt;code&gt;Type&lt;/code&gt; はタイプであり、Rep（F）= &lt;code&gt;{type,ANNO,field_type,[Rep(Name),Rep(Type)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="eab32c665244fb293fe17fe26c52469e41031dd4" translate="yes" xml:space="preserve">
          <source>If F is a record field type &lt;code&gt;Name :: Type&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; is a type, then Rep(F) = &lt;code&gt;{type,LINE,field_type,[Rep(Name),Rep(Type)]}&lt;/code&gt;.</source>
          <target state="translated">Fがレコードフィールドタイプ &lt;code&gt;Name :: Type&lt;/code&gt; であり、 &lt;code&gt;Type&lt;/code&gt; がタイプの場合、Rep（F）= &lt;code&gt;{type,LINE,field_type,[Rep(Name),Rep(Type)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6239a9176ea881407034a190550ff59286863ce7" translate="yes" xml:space="preserve">
          <source>If F is a type declaration &lt;code&gt;-Type Name(V_1, ..., V_k) :: T&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; is either the atom &lt;code&gt;type&lt;/code&gt; or the atom &lt;code&gt;opaque&lt;/code&gt;, each &lt;code&gt;V_i&lt;/code&gt; is a type variable, and &lt;code&gt;T&lt;/code&gt; is a type, then Rep(F) = &lt;code&gt;{attribute,ANNO,Type,{Name,Rep(T),[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Fが型宣言 &lt;code&gt;-Type Name(V_1, ..., V_k) :: T&lt;/code&gt; 場合、 &lt;code&gt;Type&lt;/code&gt; はアトム &lt;code&gt;type&lt;/code&gt; またはアトム &lt;code&gt;opaque&lt;/code&gt; いずれかであり、各 &lt;code&gt;V_i&lt;/code&gt; は型変数であり、 &lt;code&gt;T&lt;/code&gt; は型である場合、Rep（ F）= &lt;code&gt;{attribute,ANNO,Type,{Name,Rep(T),[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31cc499e6743611a48be1c32ba0e0814b6fa811f" translate="yes" xml:space="preserve">
          <source>If F is a type declaration &lt;code&gt;-Type Name(V_1, ..., V_k) :: T&lt;/code&gt;, where &lt;code&gt;Type&lt;/code&gt; is either the atom &lt;code&gt;type&lt;/code&gt; or the atom &lt;code&gt;opaque&lt;/code&gt;, each &lt;code&gt;V_i&lt;/code&gt; is a variable, and &lt;code&gt;T&lt;/code&gt; is a type, then Rep(F) = &lt;code&gt;{attribute,LINE,Type,{Name,Rep(T),[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt;.</source>
          <target state="translated">Fが型宣言 &lt;code&gt;-Type Name(V_1, ..., V_k) :: T&lt;/code&gt; 場合、 &lt;code&gt;Type&lt;/code&gt; はアトム &lt;code&gt;type&lt;/code&gt; またはアトム &lt;code&gt;opaque&lt;/code&gt; のいずれかであり、各 &lt;code&gt;V_i&lt;/code&gt; は変数、 &lt;code&gt;T&lt;/code&gt; はタイプ、Rep（F ）= &lt;code&gt;{attribute,LINE,Type,{Name,Rep(T),[Rep(V_1), ..., Rep(V_k)]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="18b64b9b51dd41ff649ef5c26db0f7f069a7d35d" translate="yes" xml:space="preserve">
          <source>If F is a wild attribute &lt;code&gt;-A(T)&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,A,T}&lt;/code&gt;.</source>
          <target state="translated">Fがワイルド属性 &lt;code&gt;-A(T)&lt;/code&gt; の場合、Rep（F）= &lt;code&gt;{attribute,ANNO,A,T}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c81677bfb1fe791cbe449f2226181f612e7d5741" translate="yes" xml:space="preserve">
          <source>If F is a wild attribute &lt;code&gt;-A(T)&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,LINE,A,T}&lt;/code&gt;.</source>
          <target state="translated">Fがワイルド属性 &lt;code&gt;-A(T)&lt;/code&gt; の場合、Rep（F）= &lt;code&gt;{attribute,LINE,A,T}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b1d2d6dc97c9b7259053b20eb74732ea1141eebd" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-export([Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,export,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-export([Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt; 場合、Rep（F）= &lt;code&gt;{attribute,ANNO,export,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c092236a8dd4b964a8de640c01239a90a1e7a1ac" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-export([Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,LINE,export,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-export([Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt; 場合、Rep（F）= &lt;code&gt;{attribute,LINE,export,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c034270eafab2ed7bcecacf02af15e5097193b1d" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-file(File,Line)&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,file,{File,Line}}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-file(File,Line)&lt;/code&gt; 場合、Rep（F）= &lt;code&gt;{attribute,ANNO,file,{File,Line}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a3859e84d13f06a07d526a9d0610934ed80fd58d" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-file(File,Line)&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,LINE,file,{File,Line}}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-file(File,Line)&lt;/code&gt; 場合、Rep（F）= &lt;code&gt;{attribute,LINE,file,{File,Line}}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fc2d15becf26ad2d7caf42380a72b2c27da43c41" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-import(Mod,[Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,import,{Mod,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-import(Mod,[Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt; 場合、Rep（F）= &lt;code&gt;{attribute,ANNO,import,{Mod,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bb3ff8ec37dad7da6fb624ff1aa1f2defef3f1c" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-import(Mod,[Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,LINE,import,{Mod,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-import(Mod,[Fun_1/A_1, ..., Fun_k/A_k])&lt;/code&gt; 場合、Rep（F）= &lt;code&gt;{attribute,LINE,import,{Mod,[{Fun_1,A_1}, ..., {Fun_k,A_k}]}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb3ea6219e1cb69bee47ba7d3c0d07637a4dae6e" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-module(Mod)&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,ANNO,module,Mod}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-module(Mod)&lt;/code&gt; の場合、Rep（F）= &lt;code&gt;{attribute,ANNO,module,Mod}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="740887309045a225d9cb600109651a0966db65e3" translate="yes" xml:space="preserve">
          <source>If F is an attribute &lt;code&gt;-module(Mod)&lt;/code&gt;, then Rep(F) = &lt;code&gt;{attribute,LINE,module,Mod}&lt;/code&gt;.</source>
          <target state="translated">Fが属性 &lt;code&gt;-module(Mod)&lt;/code&gt; の場合、Rep（F）= &lt;code&gt;{attribute,LINE,module,Mod}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dc8b8c5e56eae2112a18d51dd6a9fcb8af749ac2" translate="yes" xml:space="preserve">
          <source>If Ft is a constrained function type &lt;code&gt;Ft_1 when Fc&lt;/code&gt;, where &lt;code&gt;Ft_1&lt;/code&gt; is a function type and &lt;code&gt;Fc&lt;/code&gt; is a function constraint, then Rep(T) = &lt;code&gt;{type,ANNO,bounded_fun,[Rep(Ft_1),Rep(Fc)]}&lt;/code&gt;. For Rep(Fc), see below.</source>
          <target state="translated">Ftが &lt;code&gt;Ft_1 when Fc&lt;/code&gt; 制約付き関数タイプFt_1である場合、 &lt;code&gt;Ft_1&lt;/code&gt; は関数タイプであり、 &lt;code&gt;Fc&lt;/code&gt; は関数制約である場合、Rep（T）= &lt;code&gt;{type,ANNO,bounded_fun,[Rep(Ft_1),Rep(Fc)]}&lt;/code&gt; 。Rep（Fc）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="be0d9740980dc9bb7d3b497c88ac52e3e4ae32a4" translate="yes" xml:space="preserve">
          <source>If Ft is a constrained function type &lt;code&gt;Ft_1 when Fc&lt;/code&gt;, where &lt;code&gt;Ft_1&lt;/code&gt; is a function type and &lt;code&gt;Fc&lt;/code&gt; is a function constraint, then Rep(T) = &lt;code&gt;{type,LINE,bounded_fun,[Rep(Ft_1),Rep(Fc)]}&lt;/code&gt;. For Rep(Fc), see below.</source>
          <target state="translated">Ftが &lt;code&gt;Ft_1 when Fc&lt;/code&gt; 場合、Ftが制約付き関数型Ft_1であり、 &lt;code&gt;Ft_1&lt;/code&gt; が関数型で &lt;code&gt;Fc&lt;/code&gt; が関数制約である場合、Rep（T）= &lt;code&gt;{type,LINE,bounded_fun,[Rep(Ft_1),Rep(Fc)]}&lt;/code&gt; です。Rep（Fc）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="addf4ad1342821174bcf34191602826b5ec30735" translate="yes" xml:space="preserve">
          <source>If Ft is a function type &lt;code&gt;(T_1, ..., T_n) -&amp;gt; T_0&lt;/code&gt;, where each &lt;code&gt;T_i&lt;/code&gt; is a type, then Rep(Ft) = &lt;code&gt;{type,ANNO,'fun',[{type,ANNO,product,[Rep(T_1), ..., Rep(T_n)]},Rep(T_0)]}&lt;/code&gt;.</source>
          <target state="translated">Ftが関数型 &lt;code&gt;(T_1, ..., T_n) -&amp;gt; T_0&lt;/code&gt; であり、各 &lt;code&gt;T_i&lt;/code&gt; が型である場合、Rep（Ft）= &lt;code&gt;{type,ANNO,'fun',[{type,ANNO,product,[Rep(T_1), ..., Rep(T_n)]},Rep(T_0)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad272ac4cee50fc07993902e12ff74bb1a162f57" translate="yes" xml:space="preserve">
          <source>If Ft is a function type &lt;code&gt;(T_1, ..., T_n) -&amp;gt; T_0&lt;/code&gt;, where each &lt;code&gt;T_i&lt;/code&gt; is a type, then Rep(Ft) = &lt;code&gt;{type,LINE,'fun',[{type,LINE,product,[Rep(T_1), ..., Rep(T_n)]},Rep(T_0)]}&lt;/code&gt;.</source>
          <target state="translated">Ftが関数タイプ &lt;code&gt;(T_1, ..., T_n) -&amp;gt; T_0&lt;/code&gt; で、各 &lt;code&gt;T_i&lt;/code&gt; がタイプの場合、Rep（Ft）= &lt;code&gt;{type,LINE,'fun',[{type,LINE,product,[Rep(T_1), ..., Rep(T_n)]},Rep(T_0)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="956fa8f47f1bcedade9724b256d1fe2c59b770a8" translate="yes" xml:space="preserve">
          <source>If G is a directed graph, it holds that the vertices and edges of G are the same as the vertices and edges of &lt;code&gt;family_to_digraph(digraph_to_family(G))&lt;/code&gt;.</source>
          <target state="translated">Gが有向グラフの場合、Gの頂点とエッジは &lt;code&gt;family_to_digraph(digraph_to_family(G))&lt;/code&gt; の頂点とエッジと同じであると見なされます。</target>
        </trans-unit>
        <trans-unit id="02f41904356cb27048a5f981f0ab30233861e22f" translate="yes" xml:space="preserve">
          <source>If Gt is a bitstring constructor &lt;code&gt;&amp;lt;&amp;lt;Gt_1:Size_1/TSL_1, ..., Gt_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Size_i&lt;/code&gt; is a guard test and each &lt;code&gt;TSL_i&lt;/code&gt; is a type specificer list, then Rep(Gt) = &lt;code&gt;{bin,ANNO,[{bin_element,ANNO,Rep(Gt_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(Gt_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt;. For Rep(TSL), see above. An omitted &lt;code&gt;Size_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;. An omitted &lt;code&gt;TSL_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Gtがビットストリングコンストラクター &lt;code&gt;&amp;lt;&amp;lt;Gt_1:Size_1/TSL_1, ..., Gt_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt; 場合、各 &lt;code&gt;Size_i&lt;/code&gt; はガードテストであり、各 &lt;code&gt;TSL_i&lt;/code&gt; はタイプ固有のリストであり、Rep（Gt）= &lt;code&gt;{bin,ANNO,[{bin_element,ANNO,Rep(Gt_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(Gt_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt; 。Rep（TSL）については、上記を参照してください。省略された &lt;code&gt;Size_i&lt;/code&gt; は、 &lt;code&gt;default&lt;/code&gt; で表されます。省略された &lt;code&gt;TSL_i&lt;/code&gt; は、 &lt;code&gt;default&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="e7c4c1f8a634a58d8cf6efc770bf44b8e01c62ed" translate="yes" xml:space="preserve">
          <source>If Gt is a bitstring constructor &lt;code&gt;&amp;lt;&amp;lt;Gt_1:Size_1/TSL_1, ..., Gt_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Size_i&lt;/code&gt; is a guard test and each &lt;code&gt;TSL_i&lt;/code&gt; is a type specificer list, then Rep(Gt) = &lt;code&gt;{bin,LINE,[{bin_element,LINE,Rep(Gt_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,LINE,Rep(Gt_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt;. For Rep(TSL), see above. An omitted &lt;code&gt;Size_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;. An omitted &lt;code&gt;TSL_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Gtがビット文字 &lt;code&gt;&amp;lt;&amp;lt;Gt_1:Size_1/TSL_1, ..., Gt_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt; コンストラクタ&amp;lt;&amp;lt; Gt_1：Size_1 / TSL_1、...、Gt_k：Size_k / TSL_k &amp;gt;&amp;gt;である場合、各 &lt;code&gt;Size_i&lt;/code&gt; はガードテストで、各 &lt;code&gt;TSL_i&lt;/code&gt; はタイプ固有のリストであり、Rep（Gt）= &lt;code&gt;{bin,LINE,[{bin_element,LINE,Rep(Gt_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,LINE,Rep(Gt_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt; 。Rep（TSL）については、上記を参照してください。省略された &lt;code&gt;Size_i&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; で表されます。省略された &lt;code&gt;TSL_i&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="cd4e2d2654420d08ff75e569801e0f82ea1d8e67" translate="yes" xml:space="preserve">
          <source>If Gt is a cons skeleton &lt;code&gt;[Gt_h | Gt_t]&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{cons,ANNO,Rep(Gt_h),Rep(Gt_t)}&lt;/code&gt;.</source>
          <target state="translated">Gtが短所スケルトンの場合 &lt;code&gt;[Gt_h | Gt_t]&lt;/code&gt; 、次にRep（Gt）= &lt;code&gt;{cons,ANNO,Rep(Gt_h),Rep(Gt_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84104d736902648592238a7aed481c0fca8a1b02" translate="yes" xml:space="preserve">
          <source>If Gt is a cons skeleton &lt;code&gt;[Gt_h | Gt_t]&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{cons,LINE,Rep(Gt_h),Rep(Gt_t)}&lt;/code&gt;.</source>
          <target state="translated">Gtがコンスケルトンの場合 &lt;code&gt;[Gt_h | Gt_t]&lt;/code&gt; 、次にRep（Gt）= &lt;code&gt;{cons,LINE,Rep(Gt_h),Rep(Gt_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="67aa27e3b255c0b23af7ede9fa213ab9884fe39f" translate="yes" xml:space="preserve">
          <source>If Gt is a function call &lt;code&gt;A(Gt_1, ..., Gt_k)&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom, then Rep(Gt) = &lt;code&gt;{call,ANNO,Rep(A),[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt;.</source>
          <target state="translated">Gtが関数呼び出し &lt;code&gt;A(Gt_1, ..., Gt_k)&lt;/code&gt; であり、 &lt;code&gt;A&lt;/code&gt; がアトムである場合、Rep（Gt）= &lt;code&gt;{call,ANNO,Rep(A),[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="155c34327c1aac1242765939018d40572e3ece41" translate="yes" xml:space="preserve">
          <source>If Gt is a function call &lt;code&gt;A(Gt_1, ..., Gt_k)&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom, then Rep(Gt) = &lt;code&gt;{call,LINE,Rep(A),[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt;.</source>
          <target state="translated">Gtが関数呼び出し &lt;code&gt;A(Gt_1, ..., Gt_k)&lt;/code&gt; であり、 &lt;code&gt;A&lt;/code&gt; がアトムである場合、Rep（Gt）= &lt;code&gt;{call,LINE,Rep(A),[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="62b6a664574ec6785fbcee63137675fde7e8ef5d" translate="yes" xml:space="preserve">
          <source>If Gt is a function call &lt;code&gt;A_m:A(Gt_1, ..., Gt_k)&lt;/code&gt;, where &lt;code&gt;A_m&lt;/code&gt; is the atom &lt;code&gt;erlang&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; is an atom or an operator, then Rep(Gt) = &lt;code&gt;{call,ANNO,{remote,ANNO,Rep(A_m),Rep(A)},[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt;.</source>
          <target state="translated">Gtが関数呼び出し &lt;code&gt;A_m:A(Gt_1, ..., Gt_k)&lt;/code&gt; 場合、 &lt;code&gt;A_m&lt;/code&gt; はアトム &lt;code&gt;erlang&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; はアトムまたは演算子であり、Rep（Gt）= &lt;code&gt;{call,ANNO,{remote,ANNO,Rep(A_m),Rep(A)},[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8fe106be5e00c62f004b81ec1a1e00fa0b616f14" translate="yes" xml:space="preserve">
          <source>If Gt is a function call &lt;code&gt;A_m:A(Gt_1, ..., Gt_k)&lt;/code&gt;, where &lt;code&gt;A_m&lt;/code&gt; is the atom &lt;code&gt;erlang&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt; is an atom or an operator, then Rep(Gt) = &lt;code&gt;{call,LINE,{remote,LINE,Rep(A_m),Rep(A)},[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt;.</source>
          <target state="translated">Gtが関数呼び出し &lt;code&gt;A_m:A(Gt_1, ..., Gt_k)&lt;/code&gt; 場合、 &lt;code&gt;A_m&lt;/code&gt; はアトム &lt;code&gt;erlang&lt;/code&gt; 、 &lt;code&gt;A&lt;/code&gt; はアトムまたは演算子であり、Rep（Gt）= &lt;code&gt;{call,LINE,{remote,LINE,Rep(A_m),Rep(A)},[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8aef2cea48fdeba80e26c88e7eef4d4b0dc0be26" translate="yes" xml:space="preserve">
          <source>If Gt is a map creation &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see above.</source>
          <target state="translated">Gtがマップ作成 &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連付け &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt; である場合、Rep（Gt）= &lt;code&gt;{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="da3cc863263c90fe7c570740ba4eda5e38a4f773" translate="yes" xml:space="preserve">
          <source>If Gt is a map creation &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{map,LINE,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see above.</source>
          <target state="translated">Gtがマップ作成 &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連 &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt; である場合、Rep（Gt）= &lt;code&gt;{map,LINE,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="9d73cdb5044edf8f644c77dc585bc5cd5213ffd6" translate="yes" xml:space="preserve">
          <source>If Gt is a map update &lt;code&gt;Gt_0#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt; or &lt;code&gt;Gt_i_1 := Gt_i_2&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{map,ANNO,Rep(Gt_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see above.</source>
          <target state="translated">Gtがマップ更新 &lt;code&gt;Gt_0#{A_1, ..., A_k}&lt;/code&gt; 場合、各 &lt;code&gt;A_i&lt;/code&gt; は関連付け &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt; または &lt;code&gt;Gt_i_1 := Gt_i_2&lt;/code&gt; であり、Rep（Gt）= &lt;code&gt;{map,ANNO,Rep(Gt_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="8b68b45a396309326113e63efb931d56c934f4e8" translate="yes" xml:space="preserve">
          <source>If Gt is a map update &lt;code&gt;Gt_0#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt; or &lt;code&gt;Gt_i_1 := Gt_i_2&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{map,LINE,Rep(Gt_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see above.</source>
          <target state="translated">Gtがマップ更新 &lt;code&gt;Gt_0#{A_1, ..., A_k}&lt;/code&gt; 場合、各 &lt;code&gt;A_i&lt;/code&gt; は関連 &lt;code&gt;Gt_i_1 =&amp;gt; Gt_i_2&lt;/code&gt; または &lt;code&gt;Gt_i_1 := Gt_i_2&lt;/code&gt; であり、Rep（Gt）= &lt;code&gt;{map,LINE,Rep(Gt_0),[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、上記を参照してください。</target>
        </trans-unit>
        <trans-unit id="c71638db3891d8e47094eaea5193942aba235460" translate="yes" xml:space="preserve">
          <source>If Gt is a parenthesized guard test &lt;code&gt;( Gt_0 )&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;Rep(Gt_0)&lt;/code&gt;, that is, parenthesized guard tests cannot be distinguished from their bodies.</source>
          <target state="translated">Gtが括弧付きガードテスト &lt;code&gt;( Gt_0 )&lt;/code&gt; 場合、Rep（Gt）= &lt;code&gt;Rep(Gt_0)&lt;/code&gt; 、つまり、括弧付きガードテストは本体と区別できません。</target>
        </trans-unit>
        <trans-unit id="5515e293f7cbca6cd1b4d86301ecc8fcc5ad59f4" translate="yes" xml:space="preserve">
          <source>If Gt is a record creation &lt;code&gt;#Name{Field_1=Gt_1, ..., Field_k=Gt_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom or &lt;code&gt;_&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(Gt_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(Gt_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Gtがレコード作成 &lt;code&gt;#Name{Field_1=Gt_1, ..., Field_k=Gt_k}&lt;/code&gt; であり、各 &lt;code&gt;Field_i&lt;/code&gt; がアトムまたは &lt;code&gt;_&lt;/code&gt; である場合、Rep（Gt）= &lt;code&gt;{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(Gt_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(Gt_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="95bc9c3e2bbe4154125f8e83e7d1dec9ccf69c3a" translate="yes" xml:space="preserve">
          <source>If Gt is a record creation &lt;code&gt;#Name{Field_1=Gt_1, ..., Field_k=Gt_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom or &lt;code&gt;_&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(Gt_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(Gt_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Gtがレコード作成 &lt;code&gt;#Name{Field_1=Gt_1, ..., Field_k=Gt_k}&lt;/code&gt; であり、各 &lt;code&gt;Field_i&lt;/code&gt; がアトムまたは &lt;code&gt;_&lt;/code&gt; である場合、Rep（Gt）= &lt;code&gt;{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(Gt_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(Gt_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0d8c3bdf875936951f6be38abd9a234defb4a787" translate="yes" xml:space="preserve">
          <source>If Gt is a record field access &lt;code&gt;Gt_0#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(Gt) = &lt;code&gt;{record_field,ANNO,Rep(Gt_0),Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Gtがレコードフィールドアクセス &lt;code&gt;Gt_0#Name.Field&lt;/code&gt; （ &lt;code&gt;Field&lt;/code&gt; はアトム）の場合、Rep（Gt）= &lt;code&gt;{record_field,ANNO,Rep(Gt_0),Name,Rep(Field)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f5219d21b74d303638f0d998d1a523861cfd8ed" translate="yes" xml:space="preserve">
          <source>If Gt is a record field access &lt;code&gt;Gt_0#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(Gt) = &lt;code&gt;{record_field,LINE,Rep(Gt_0),Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Gtがレコードフィールドにアクセスする場合、 &lt;code&gt;Gt_0#Name.Field&lt;/code&gt; （ &lt;code&gt;Field&lt;/code&gt; はアトム）にアクセスします。Rep（Gt）= &lt;code&gt;{record_field,LINE,Rep(Gt_0),Name,Rep(Field)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0ddc523ac11939b47b6ea5667d89b0cf0cbb87da" translate="yes" xml:space="preserve">
          <source>If Gt is a record field index &lt;code&gt;#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(Gt) = &lt;code&gt;{record_index,ANNO,Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Gtがレコードフィールドインデックス &lt;code&gt;#Name.Field&lt;/code&gt; であり、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（Gt）= &lt;code&gt;{record_index,ANNO,Name,Rep(Field)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a706262c44fbdd9118d527a47e94cc7e8f43cf92" translate="yes" xml:space="preserve">
          <source>If Gt is a record field index &lt;code&gt;#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(Gt) = &lt;code&gt;{record_index,LINE,Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Gtがレコードフィールドインデックス &lt;code&gt;#Name.Field&lt;/code&gt; で、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（Gt）= &lt;code&gt;{record_index,LINE,Name,Rep(Field)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="91b1ff08bce1f7be5c86e93bf7b896dcee2bcdda" translate="yes" xml:space="preserve">
          <source>If Gt is a tuple skeleton &lt;code&gt;{Gt_1, ..., Gt_k}&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{tuple,ANNO,[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt;.</source>
          <target state="translated">Gtがタプルスケルトン &lt;code&gt;{Gt_1, ..., Gt_k}&lt;/code&gt; 場合、Rep（Gt）= &lt;code&gt;{tuple,ANNO,[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f481667ce91658bcad558a1af4b78b60f7692744" translate="yes" xml:space="preserve">
          <source>If Gt is a tuple skeleton &lt;code&gt;{Gt_1, ..., Gt_k}&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{tuple,LINE,[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt;.</source>
          <target state="translated">Gtがタプルスケルトン &lt;code&gt;{Gt_1, ..., Gt_k}&lt;/code&gt; 場合、Rep（Gt）= &lt;code&gt;{tuple,LINE,[Rep(Gt_1), ..., Rep(Gt_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="86ba6ce0ad44989a3f9fca3540904be2d98eb9da" translate="yes" xml:space="preserve">
          <source>If Gt is a variable pattern &lt;code&gt;V&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{var,ANNO,A}&lt;/code&gt;, where A is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">Gtが可変パターン &lt;code&gt;V&lt;/code&gt; の場合、Rep（Gt）= &lt;code&gt;{var,ANNO,A}&lt;/code&gt; 。ここで、Aは、 &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。</target>
        </trans-unit>
        <trans-unit id="f06988b89d180cb11b8982908198902c04bcea42" translate="yes" xml:space="preserve">
          <source>If Gt is a variable pattern &lt;code&gt;V&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{var,LINE,A}&lt;/code&gt;, where A is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">Gtが可変パターン &lt;code&gt;V&lt;/code&gt; の場合、Rep（Gt）= &lt;code&gt;{var,LINE,A}&lt;/code&gt; 。ここで、Aは &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。</target>
        </trans-unit>
        <trans-unit id="1b80b2b10f76759502fc592d77587e295e44b6d5" translate="yes" xml:space="preserve">
          <source>If Gt is an atomic literal &lt;code&gt;L&lt;/code&gt;, then Rep(Gt) = Rep(L).</source>
          <target state="translated">Gtがアトミックリテラル &lt;code&gt;L&lt;/code&gt; の場合、Rep（Gt）= Rep（L）になります。</target>
        </trans-unit>
        <trans-unit id="30bbb65a3435cb7a0b644ba508d8ad7e2aebd344" translate="yes" xml:space="preserve">
          <source>If Gt is an operator guard test &lt;code&gt;Gt_1 Op Gt_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator other than match operator &lt;code&gt;=&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{op,ANNO,Op,Rep(Gt_1),Rep(Gt_2)}&lt;/code&gt;.</source>
          <target state="translated">Gtが演算子ガードテスト &lt;code&gt;Gt_1 Op Gt_2&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が一致演算子 &lt;code&gt;=&lt;/code&gt; 以外の二項演算子である場合、Rep（Gt）= &lt;code&gt;{op,ANNO,Op,Rep(Gt_1),Rep(Gt_2)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8ecca50d53c2df91c648c581d109d377a56d333" translate="yes" xml:space="preserve">
          <source>If Gt is an operator guard test &lt;code&gt;Gt_1 Op Gt_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator other than match operator &lt;code&gt;=&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{op,LINE,Op,Rep(Gt_1),Rep(Gt_2)}&lt;/code&gt;.</source>
          <target state="translated">Gtが演算子ガードテスト &lt;code&gt;Gt_1 Op Gt_2&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; がmatch operator &lt;code&gt;=&lt;/code&gt; 以外の2項演算子である場合、Rep（Gt）= &lt;code&gt;{op,LINE,Op,Rep(Gt_1),Rep(Gt_2)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1590398d554a502b9031594d26d2e7f3c303dfca" translate="yes" xml:space="preserve">
          <source>If Gt is an operator guard test &lt;code&gt;Op Gt_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator, then Rep(Gt) = &lt;code&gt;{op,ANNO,Op,Rep(Gt_0)}&lt;/code&gt;.</source>
          <target state="translated">Gtが演算子ガードテスト &lt;code&gt;Op Gt_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子である場合、Rep（Gt）= &lt;code&gt;{op,ANNO,Op,Rep(Gt_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="59964cf24a3c6e579aace4b47998306937171209" translate="yes" xml:space="preserve">
          <source>If Gt is an operator guard test &lt;code&gt;Op Gt_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator, then Rep(Gt) = &lt;code&gt;{op,LINE,Op,Rep(Gt_0)}&lt;/code&gt;.</source>
          <target state="translated">Gtが演算子ガードテスト &lt;code&gt;Op Gt_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子である場合、Rep（Gt）= &lt;code&gt;{op,LINE,Op,Rep(Gt_0)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2bba2b902d7d011a3e4c35fe4e116ae49fd9a8a3" translate="yes" xml:space="preserve">
          <source>If Gt is nil, &lt;code&gt;[]&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{nil,ANNO}&lt;/code&gt;.</source>
          <target state="translated">Gtがnil、 &lt;code&gt;[]&lt;/code&gt; の場合、Rep（Gt）= &lt;code&gt;{nil,ANNO}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="498668c1ce816a52c1e11cee91561fc3f7281cec" translate="yes" xml:space="preserve">
          <source>If Gt is nil, &lt;code&gt;[]&lt;/code&gt;, then Rep(Gt) = &lt;code&gt;{nil,LINE}&lt;/code&gt;.</source>
          <target state="translated">Gtがnil、 &lt;code&gt;[]&lt;/code&gt; の場合、Rep（Gt）= &lt;code&gt;{nil,LINE}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fb631647ead2cb8b76c4ec1b07f1f0c70bf1b1d6" translate="yes" xml:space="preserve">
          <source>If L is a character literal, then Rep(L) = &lt;code&gt;{char,ANNO,L}&lt;/code&gt;.</source>
          <target state="translated">Lが文字リテラルの場合、Rep（L）= &lt;code&gt;{char,ANNO,L}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8d91f44fbe3739ece99b11544ff08c06f7058b62" translate="yes" xml:space="preserve">
          <source>If L is a character literal, then Rep(L) = &lt;code&gt;{char,LINE,L}&lt;/code&gt;.</source>
          <target state="translated">Lが文字リテラルの場合、Rep（L）= &lt;code&gt;{char,LINE,L}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="893eb2ba60965c09a51b1e49cb8017e58a360073" translate="yes" xml:space="preserve">
          <source>If L is a float literal, then Rep(L) = &lt;code&gt;{float,ANNO,L}&lt;/code&gt;.</source>
          <target state="translated">Lがfloatリテラルの場合、Rep（L）= &lt;code&gt;{float,ANNO,L}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a70af53d75e256462e24f2a854c77741b9fe2a6" translate="yes" xml:space="preserve">
          <source>If L is a float literal, then Rep(L) = &lt;code&gt;{float,LINE,L}&lt;/code&gt;.</source>
          <target state="translated">Lが浮動小数点リテラルの場合、Rep（L）= &lt;code&gt;{float,LINE,L}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b31cf2c573d35c24a7c01f8fb6b6ee646806df21" translate="yes" xml:space="preserve">
          <source>If L is a string literal consisting of the characters &lt;code&gt;C_1&lt;/code&gt;, ..., &lt;code&gt;C_k&lt;/code&gt;, then Rep(L) = &lt;code&gt;{string,ANNO,[C_1, ..., C_k]}&lt;/code&gt;.</source>
          <target state="translated">Lが文字 &lt;code&gt;C_1&lt;/code&gt; 、...、 &lt;code&gt;C_k&lt;/code&gt; で構成される文字列リテラルの場合、Rep（L）= &lt;code&gt;{string,ANNO,[C_1, ..., C_k]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="bc4e7443f3bff9431f378dad125819933dd7b906" translate="yes" xml:space="preserve">
          <source>If L is a string literal consisting of the characters &lt;code&gt;C_1&lt;/code&gt;, ..., &lt;code&gt;C_k&lt;/code&gt;, then Rep(L) = &lt;code&gt;{string,LINE,[C_1, ..., C_k]}&lt;/code&gt;.</source>
          <target state="translated">Lが文字 &lt;code&gt;C_1&lt;/code&gt; 、...、 &lt;code&gt;C_k&lt;/code&gt; で構成される文字列リテラルの場合、Rep（L）= &lt;code&gt;{string,LINE,[C_1, ..., C_k]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="46dc6ddf19639701de194e194ca59776f621ce0b" translate="yes" xml:space="preserve">
          <source>If L is an atom literal, then Rep(L) = &lt;code&gt;{atom,ANNO,L}&lt;/code&gt;.</source>
          <target state="translated">Lがアトムリテラルの場合、Rep（L）= &lt;code&gt;{atom,ANNO,L}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c151061397c80cc4494386daf911cd7cd3768421" translate="yes" xml:space="preserve">
          <source>If L is an atom literal, then Rep(L) = &lt;code&gt;{atom,LINE,L}&lt;/code&gt;.</source>
          <target state="translated">Lがアトムリテラルの場合、Rep（L）= &lt;code&gt;{atom,LINE,L}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="9daa1db636bdb57e06f2782f31b76d4535249681" translate="yes" xml:space="preserve">
          <source>If L is an integer literal, then Rep(L) = &lt;code&gt;{integer,ANNO,L}&lt;/code&gt;.</source>
          <target state="translated">Lが整数リテラルの場合、Rep（L）= &lt;code&gt;{integer,ANNO,L}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="009d689b146fb6ed54f2471e1d09e781555b973a" translate="yes" xml:space="preserve">
          <source>If L is an integer literal, then Rep(L) = &lt;code&gt;{integer,LINE,L}&lt;/code&gt;.</source>
          <target state="translated">Lが整数リテラルの場合、Rep（L）= &lt;code&gt;{integer,LINE,L}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="84cceee508e21c83ef5e5c68f567b7df3c0d24d4" translate="yes" xml:space="preserve">
          <source>If Mnesia is down on the local node, the function returns those other &lt;code&gt;db_nodes&lt;/code&gt; and &lt;code&gt;extra_db_nodes&lt;/code&gt; that for the moment are operational.</source>
          <target state="translated">Mnesiaがローカルノードでダウンしている場合、関数は、当面は機能している他の &lt;code&gt;db_nodes&lt;/code&gt; および &lt;code&gt;extra_db_nodes&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d2c7cf7bb11840eda288723b23ff4cc867a91195" translate="yes" xml:space="preserve">
          <source>If Mnesia is started, the function returns those nodes that Mnesia on the local node is fully connected to. Only those nodes that Mnesia has exchanged schema information with are included as &lt;code&gt;running_db_nodes&lt;/code&gt;. After the merge of schemas, the local Mnesia system is fully operable and applications can perform access of remote replicas. Before the schema merge, Mnesia only operates locally. Sometimes there are more nodes included in the &lt;code&gt;running_db_nodes&lt;/code&gt; list than all &lt;code&gt;db_nodes&lt;/code&gt; and &lt;code&gt;extra_db_nodes&lt;/code&gt; together.</source>
          <target state="translated">Mnesiaが開始されている場合、関数はローカルノード上のMnesiaが完全に接続されているノードを返します。 Mnesiaがスキーマ情報を交換したノードのみが &lt;code&gt;running_db_nodes&lt;/code&gt; として含まれています。スキーマのマージ後、ローカルのMnesiaシステムは完全に動作可能になり、アプリケーションはリモートレプリカのアクセスを実行できます。スキーマのマージ前は、Mnesiaはローカルでのみ動作します。 &lt;code&gt;running_db_nodes&lt;/code&gt; リストには、すべての &lt;code&gt;db_nodes&lt;/code&gt; と &lt;code&gt;extra_db_nodes&lt;/code&gt; を合わせたよりも多くのノードが含まれている場合があります。</target>
        </trans-unit>
        <trans-unit id="1e5a20f661013e882b9b593b517c8c9ba753d645" translate="yes" xml:space="preserve">
          <source>If Mnesia is used as storage method, Mnesia must be started before the HTTP server. The first time Mnesia is started, the schema and the tables must be created before Mnesia is started. A simple example of a module with two functions that creates and start Mnesia is provided here. Function &lt;code&gt;first_start/0&lt;/code&gt; is to be used the first time. It creates the schema and the tables. &lt;code&gt;start/0&lt;/code&gt; is to be used in consecutive startups. &lt;code&gt;start/0&lt;/code&gt; starts Mnesia and waits for the tables to be initiated. This function must only be used when the schema and the tables are already created.</source>
          <target state="translated">Mnesiaをストレージ方式として使用する場合、MnesiaはHTTPサーバーの前に開始する必要があります。 Mnesiaを初めて起動するときは、Mnesiaを起動する前にスキーマとテーブルを作成する必要があります。 Mnesiaを作成および開始する2つの関数を持つモジュールの簡単な例をここに示します。関数 &lt;code&gt;first_start/0&lt;/code&gt; は初めて使用されます。スキーマとテーブルを作成します。 &lt;code&gt;start/0&lt;/code&gt; は連続した起動で使用されます。 &lt;code&gt;start/0&lt;/code&gt; はMnesiaを開始し、テーブルが開始されるのを待ちます。この関数は、スキーマとテーブルがすでに作成されている場合にのみ使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="a0ff6de34e690fd37142329b3d2414f3154795bb" translate="yes" xml:space="preserve">
          <source>If P is a bitstring pattern &lt;code&gt;&amp;lt;&amp;lt;P_1:Size_1/TSL_1, ..., P_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Size_i&lt;/code&gt; is an expression that can be evaluated to an integer, and each &lt;code&gt;TSL_i&lt;/code&gt; is a type specificer list, then Rep(P) = &lt;code&gt;{bin,ANNO,[{bin_element,ANNO,Rep(P_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(P_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt;. For Rep(TSL), see below. An omitted &lt;code&gt;Size_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;. An omitted &lt;code&gt;TSL_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Pがビット文字 &lt;code&gt;&amp;lt;&amp;lt;P_1:Size_1/TSL_1, ..., P_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt; パターン&amp;lt;&amp;lt; P_1：Size_1 / TSL_1、...、P_k：Size_k / TSL_k &amp;gt;&amp;gt;の場合、各 &lt;code&gt;Size_i&lt;/code&gt; は整数に評価できる式であり、各 &lt;code&gt;TSL_i&lt;/code&gt; はタイプ固有のリストです。 Rep（P）= &lt;code&gt;{bin,ANNO,[{bin_element,ANNO,Rep(P_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,ANNO,Rep(P_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt; 。Rep（TSL）については、以下を参照してください。省略された &lt;code&gt;Size_i&lt;/code&gt; は、 &lt;code&gt;default&lt;/code&gt; で表されます。省略された &lt;code&gt;TSL_i&lt;/code&gt; は、 &lt;code&gt;default&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="f34211f341486b630397795df16c3df17f3d92d3" translate="yes" xml:space="preserve">
          <source>If P is a bitstring pattern &lt;code&gt;&amp;lt;&amp;lt;P_1:Size_1/TSL_1, ..., P_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt;, where each &lt;code&gt;Size_i&lt;/code&gt; is an expression that can be evaluated to an integer, and each &lt;code&gt;TSL_i&lt;/code&gt; is a type specificer list, then Rep(P) = &lt;code&gt;{bin,LINE,[{bin_element,LINE,Rep(P_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,LINE,Rep(P_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt;. For Rep(TSL), see below. An omitted &lt;code&gt;Size_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;. An omitted &lt;code&gt;TSL_i&lt;/code&gt; is represented by &lt;code&gt;default&lt;/code&gt;.</source>
          <target state="translated">Pがビットストリングパターン &lt;code&gt;&amp;lt;&amp;lt;P_1:Size_1/TSL_1, ..., P_k:Size_k/TSL_k&amp;gt;&amp;gt;&lt;/code&gt; である場合、各 &lt;code&gt;Size_i&lt;/code&gt; は整数に評価できる式であり、各 &lt;code&gt;TSL_i&lt;/code&gt; はタイプ固有のリストです。 Rep（P）= &lt;code&gt;{bin,LINE,[{bin_element,LINE,Rep(P_1),Rep(Size_1),Rep(TSL_1)}, ..., {bin_element,LINE,Rep(P_k),Rep(Size_k),Rep(TSL_k)}]}&lt;/code&gt; 。Rep（TSL）については、以下を参照してください。省略された &lt;code&gt;Size_i&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; で表されます。省略された &lt;code&gt;TSL_i&lt;/code&gt; は &lt;code&gt;default&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="d37994ece6f75def5d9f7facc328a7886d4a88b5" translate="yes" xml:space="preserve">
          <source>If P is a compound pattern &lt;code&gt;P_1 = P_2&lt;/code&gt;, then Rep(P) = &lt;code&gt;{match,ANNO,Rep(P_1),Rep(P_2)}&lt;/code&gt;.</source>
          <target state="translated">Pが複合パターン &lt;code&gt;P_1 = P_2&lt;/code&gt; 場合、Rep（P）= &lt;code&gt;{match,ANNO,Rep(P_1),Rep(P_2)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c8c2a2980c64258557d34be973ca8c30e59cc6bc" translate="yes" xml:space="preserve">
          <source>If P is a compound pattern &lt;code&gt;P_1 = P_2&lt;/code&gt;, then Rep(P) = &lt;code&gt;{match,LINE,Rep(P_1),Rep(P_2)}&lt;/code&gt;.</source>
          <target state="translated">Pが複合パターン &lt;code&gt;P_1 = P_2&lt;/code&gt; 場合、Rep（P）= &lt;code&gt;{match,LINE,Rep(P_1),Rep(P_2)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3c6ccb3b7440efc69c50224b64f913af2ed5a932" translate="yes" xml:space="preserve">
          <source>If P is a cons pattern &lt;code&gt;[P_h | P_t]&lt;/code&gt;, then Rep(P) = &lt;code&gt;{cons,ANNO,Rep(P_h),Rep(P_t)}&lt;/code&gt;.</source>
          <target state="translated">Pが短所パターンの場合 &lt;code&gt;[P_h | P_t]&lt;/code&gt; 、次にRep（P）= &lt;code&gt;{cons,ANNO,Rep(P_h),Rep(P_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8b3a96a126f33c33dfd4bad3afe04a55374bef41" translate="yes" xml:space="preserve">
          <source>If P is a cons pattern &lt;code&gt;[P_h | P_t]&lt;/code&gt;, then Rep(P) = &lt;code&gt;{cons,LINE,Rep(P_h),Rep(P_t)}&lt;/code&gt;.</source>
          <target state="translated">Pがconsパターンの場合 &lt;code&gt;[P_h | P_t]&lt;/code&gt; 、次にRep（P）= &lt;code&gt;{cons,LINE,Rep(P_h),Rep(P_t)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fc2c7ec165d91dd1b0c944a7cacc79a36a649770" translate="yes" xml:space="preserve">
          <source>If P is a map pattern &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;P_i_1 := P_i_2&lt;/code&gt;, then Rep(P) = &lt;code&gt;{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Pがマップパターン &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連付け &lt;code&gt;P_i_1 := P_i_2&lt;/code&gt; である場合、Rep（P）= &lt;code&gt;{map,ANNO,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="cd5a1996d5cee5775413b66baffcba7cfd424d8b" translate="yes" xml:space="preserve">
          <source>If P is a map pattern &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association &lt;code&gt;P_i_1 := P_i_2&lt;/code&gt;, then Rep(P) = &lt;code&gt;{map,LINE,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Pがマップパターン &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連付け &lt;code&gt;P_i_1 := P_i_2&lt;/code&gt; である場合、Rep（P）= &lt;code&gt;{map,LINE,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="19737da2fe03d867999d377974efb452c080feda" translate="yes" xml:space="preserve">
          <source>If P is a nil pattern &lt;code&gt;[]&lt;/code&gt;, then Rep(P) = &lt;code&gt;{nil,ANNO}&lt;/code&gt;.</source>
          <target state="translated">Pがnilパターン &lt;code&gt;[]&lt;/code&gt; の場合、Rep（P）= &lt;code&gt;{nil,ANNO}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c7fbdc51ae228be4fbd8c6e7c0ddb45260e0acb0" translate="yes" xml:space="preserve">
          <source>If P is a nil pattern &lt;code&gt;[]&lt;/code&gt;, then Rep(P) = &lt;code&gt;{nil,LINE}&lt;/code&gt;.</source>
          <target state="translated">Pがnilパターン &lt;code&gt;[]&lt;/code&gt; の場合、Rep（P）= &lt;code&gt;{nil,LINE}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="72a84ce197dfd951db7868fea8973a6459407137" translate="yes" xml:space="preserve">
          <source>If P is a parenthesized pattern &lt;code&gt;( P_0 )&lt;/code&gt;, then Rep(P) = &lt;code&gt;Rep(P_0)&lt;/code&gt;, that is, parenthesized patterns cannot be distinguished from their bodies.</source>
          <target state="translated">Pが括弧で囲まれたパターン &lt;code&gt;( P_0 )&lt;/code&gt; 場合、Rep（P）= &lt;code&gt;Rep(P_0)&lt;/code&gt; です。つまり、括弧で囲まれたパターンは本体と区別できません。</target>
        </trans-unit>
        <trans-unit id="dfc926eeb885550b2057f5eaa3e598f075f5fb9c" translate="yes" xml:space="preserve">
          <source>If P is a record field index pattern &lt;code&gt;#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(P) = &lt;code&gt;{record_index,ANNO,Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Pがレコードフィールドインデックスパターン &lt;code&gt;#Name.Field&lt;/code&gt; であり、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（P）= &lt;code&gt;{record_index,ANNO,Name,Rep(Field)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d6dae07160d27f4934f31cae5e6b4f2d04d1afc9" translate="yes" xml:space="preserve">
          <source>If P is a record field index pattern &lt;code&gt;#Name.Field&lt;/code&gt;, where &lt;code&gt;Field&lt;/code&gt; is an atom, then Rep(P) = &lt;code&gt;{record_index,LINE,Name,Rep(Field)}&lt;/code&gt;.</source>
          <target state="translated">Pがレコードフィールドインデックスパターン &lt;code&gt;#Name.Field&lt;/code&gt; で、 &lt;code&gt;Field&lt;/code&gt; がアトムの場合、Rep（P）= &lt;code&gt;{record_index,LINE,Name,Rep(Field)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7a6a33479e55d6adf6c5f304da26c896bfab008d" translate="yes" xml:space="preserve">
          <source>If P is a record pattern &lt;code&gt;#Name{Field_1=P_1, ..., Field_k=P_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom or &lt;code&gt;_&lt;/code&gt;, then Rep(P) = &lt;code&gt;{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(P_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(P_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Pがレコードパターン &lt;code&gt;#Name{Field_1=P_1, ..., Field_k=P_k}&lt;/code&gt; 場合、各 &lt;code&gt;Field_i&lt;/code&gt; はアトムまたは &lt;code&gt;_&lt;/code&gt; であり、Rep（P）= &lt;code&gt;{record,ANNO,Name,[{record_field,ANNO,Rep(Field_1),Rep(P_1)}, ..., {record_field,ANNO,Rep(Field_k),Rep(P_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8c817b814455c0bbd5e19cc0a1e27a932ad7ae3e" translate="yes" xml:space="preserve">
          <source>If P is a record pattern &lt;code&gt;#Name{Field_1=P_1, ..., Field_k=P_k}&lt;/code&gt;, where each &lt;code&gt;Field_i&lt;/code&gt; is an atom or &lt;code&gt;_&lt;/code&gt;, then Rep(P) = &lt;code&gt;{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(P_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(P_k)}]}&lt;/code&gt;.</source>
          <target state="translated">Pがレコードパターン &lt;code&gt;#Name{Field_1=P_1, ..., Field_k=P_k}&lt;/code&gt; であり、各 &lt;code&gt;Field_i&lt;/code&gt; がアトムまたは &lt;code&gt;_&lt;/code&gt; である場合、Rep（P）= &lt;code&gt;{record,LINE,Name,[{record_field,LINE,Rep(Field_1),Rep(P_1)}, ..., {record_field,LINE,Rep(Field_k),Rep(P_k)}]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="75542af568a4e6fd74ec30069d26212ef35f7d03" translate="yes" xml:space="preserve">
          <source>If P is a tuple pattern &lt;code&gt;{P_1, ..., P_k}&lt;/code&gt;, then Rep(P) = &lt;code&gt;{tuple,ANNO,[Rep(P_1), ..., Rep(P_k)]}&lt;/code&gt;.</source>
          <target state="translated">Pがタプルパターン &lt;code&gt;{P_1, ..., P_k}&lt;/code&gt; 場合、Rep（P）= &lt;code&gt;{tuple,ANNO,[Rep(P_1), ..., Rep(P_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="26f2ebd069093962c3169272794269248d2ef02b" translate="yes" xml:space="preserve">
          <source>If P is a tuple pattern &lt;code&gt;{P_1, ..., P_k}&lt;/code&gt;, then Rep(P) = &lt;code&gt;{tuple,LINE,[Rep(P_1), ..., Rep(P_k)]}&lt;/code&gt;.</source>
          <target state="translated">Pがタプルパターン &lt;code&gt;{P_1, ..., P_k}&lt;/code&gt; 場合、Rep（P）= &lt;code&gt;{tuple,LINE,[Rep(P_1), ..., Rep(P_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e2f93073cfd79739d9e631820436bac79686fc83" translate="yes" xml:space="preserve">
          <source>If P is a universal pattern &lt;code&gt;_&lt;/code&gt;, then Rep(P) = &lt;code&gt;{var,ANNO,'_'}&lt;/code&gt;.</source>
          <target state="translated">Pがユニバーサルパターン &lt;code&gt;_&lt;/code&gt; の場合、Rep（P）= &lt;code&gt;{var,ANNO,'_'}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1673a195237ed41e2323e9fba0581f25f4bc7a6c" translate="yes" xml:space="preserve">
          <source>If P is a universal pattern &lt;code&gt;_&lt;/code&gt;, then Rep(P) = &lt;code&gt;{var,LINE,'_'}&lt;/code&gt;.</source>
          <target state="translated">Pがユニバーサルパターン &lt;code&gt;_&lt;/code&gt; の場合、Rep（P）= &lt;code&gt;{var,LINE,'_'}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="3149c3832edd80b313902a9d154c6d727e573468" translate="yes" xml:space="preserve">
          <source>If P is a variable pattern &lt;code&gt;V&lt;/code&gt;, then Rep(P) = &lt;code&gt;{var,ANNO,A}&lt;/code&gt;, where A is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">Pが可変パターン &lt;code&gt;V&lt;/code&gt; の場合、Rep（P）= &lt;code&gt;{var,ANNO,A}&lt;/code&gt; 。ここで、Aは、 &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。</target>
        </trans-unit>
        <trans-unit id="374e95854b4ce10a9075d7ca4749ba4604e1f66b" translate="yes" xml:space="preserve">
          <source>If P is a variable pattern &lt;code&gt;V&lt;/code&gt;, then Rep(P) = &lt;code&gt;{var,LINE,A}&lt;/code&gt;, where A is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">Pが可変パターン &lt;code&gt;V&lt;/code&gt; の場合、Rep（P）= &lt;code&gt;{var,LINE,A}&lt;/code&gt; 。ここで、Aは &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。</target>
        </trans-unit>
        <trans-unit id="037087e53a14f2b5880a3446fa475c0011fde7f9" translate="yes" xml:space="preserve">
          <source>If P is an atomic literal &lt;code&gt;L&lt;/code&gt;, then Rep(P) = Rep(L).</source>
          <target state="translated">Pがアトミックリテラル &lt;code&gt;L&lt;/code&gt; の場合、Rep（P）= Rep（L）です。</target>
        </trans-unit>
        <trans-unit id="faca9ab114984c50875ddef7ab3151e741e59fdd" translate="yes" xml:space="preserve">
          <source>If P is an operator pattern &lt;code&gt;Op P_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator (this is an occurrence of an expression that can be evaluated to a number at compile time), then Rep(P) = &lt;code&gt;{op,ANNO,Op,Rep(P_0)}&lt;/code&gt;.</source>
          <target state="translated">Pが演算子パターン &lt;code&gt;Op P_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子（これはコンパイル時に数値に評価できる式の出現です）の場合、Rep（P）= &lt;code&gt;{op,ANNO,Op,Rep(P_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3611eec9cbc1948d638f692cb3c204535c40a243" translate="yes" xml:space="preserve">
          <source>If P is an operator pattern &lt;code&gt;Op P_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator (this is an occurrence of an expression that can be evaluated to a number at compile time), then Rep(P) = &lt;code&gt;{op,LINE,Op,Rep(P_0)}&lt;/code&gt;.</source>
          <target state="translated">Pが演算子パターン &lt;code&gt;Op P_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子である場合（これは、コンパイル時に数値に評価できる式のオカレンスです）、Rep（P）= &lt;code&gt;{op,LINE,Op,Rep(P_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3e5c0b3f1ae8df31dec63b9c72633bdc64593894" translate="yes" xml:space="preserve">
          <source>If P is an operator pattern &lt;code&gt;P_1 Op P_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator (this is either an occurrence of &lt;code&gt;++&lt;/code&gt; applied to a literal string or character list, or an occurrence of an expression that can be evaluated to a number at compile time), then Rep(P) = &lt;code&gt;{op,ANNO,Op,Rep(P_1),Rep(P_2)}&lt;/code&gt;.</source>
          <target state="translated">Pが演算子パターン &lt;code&gt;P_1 Op P_2&lt;/code&gt; 場合、 &lt;code&gt;Op&lt;/code&gt; は二項演算子です（これは、リテラル文字列または文字リストに適用される &lt;code&gt;++&lt;/code&gt; の出現、またはコンパイル時に数値に評価できる式の出現のいずれかです。 ）、次にRep（P）= &lt;code&gt;{op,ANNO,Op,Rep(P_1),Rep(P_2)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c20d57a29a11d3b725da4217b551d072cb2d9645" translate="yes" xml:space="preserve">
          <source>If P is an operator pattern &lt;code&gt;P_1 Op P_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator (this is either an occurrence of &lt;code&gt;++&lt;/code&gt; applied to a literal string or character list, or an occurrence of an expression that can be evaluated to a number at compile time), then Rep(P) = &lt;code&gt;{op,LINE,Op,Rep(P_1),Rep(P_2)}&lt;/code&gt;.</source>
          <target state="translated">Pが演算子パターン &lt;code&gt;P_1 Op P_2&lt;/code&gt; の場合、 &lt;code&gt;Op&lt;/code&gt; は2項演算子です（これは、リテラル文字列または文字リストに適用される &lt;code&gt;++&lt;/code&gt; の出現、またはコンパイル時に数値に評価できる式の出現のいずれかです） ）、次にRep（P）= &lt;code&gt;{op,LINE,Op,Rep(P_1),Rep(P_2)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3a50d35a985d1c4853945f370a6dcaf95a405ff8" translate="yes" xml:space="preserve">
          <source>If PER encoding is wanted:</source>
          <target state="translated">PERエンコーディングが必要な場合。</target>
        </trans-unit>
        <trans-unit id="8e69f891849831d14d1ae17a1a43b56f2f0e1d17" translate="yes" xml:space="preserve">
          <source>If Ps is a sequence of patterns &lt;code&gt;P_1, ..., P_k&lt;/code&gt;, then Rep(Ps) = &lt;code&gt;[Rep(P_1), ..., Rep(P_k)]&lt;/code&gt;. Such sequences occur as the list of arguments to a function or fun.</source>
          <target state="translated">Psがパターンのシーケンス &lt;code&gt;P_1, ..., P_k&lt;/code&gt; 場合、Rep（Ps）= &lt;code&gt;[Rep(P_1), ..., Rep(P_k)]&lt;/code&gt; です。そのようなシーケンスは、関数またはfunへの引数のリストとして発生します。</target>
        </trans-unit>
        <trans-unit id="ad13e93659ed632a16cc4f4903f37ddc1132e280" translate="yes" xml:space="preserve">
          <source>If Q is a bitstring generator &lt;code&gt;P &amp;lt;= E&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(Q) = &lt;code&gt;{b_generate,ANNO,Rep(P),Rep(E)}&lt;/code&gt;.</source>
          <target state="translated">Qがビットストリングジェネレーター &lt;code&gt;P &amp;lt;= E&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンで、 &lt;code&gt;E&lt;/code&gt; が式である場合、Rep（Q）= &lt;code&gt;{b_generate,ANNO,Rep(P),Rep(E)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="db3d9c3be41ff91340aed17068892205b8e19bdf" translate="yes" xml:space="preserve">
          <source>If Q is a bitstring generator &lt;code&gt;P &amp;lt;= E&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(Q) = &lt;code&gt;{b_generate,LINE,Rep(P),Rep(E)}&lt;/code&gt;.</source>
          <target state="translated">Qがビットストリングジェネレーター &lt;code&gt;P &amp;lt;= E&lt;/code&gt; 場合（ &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;E&lt;/code&gt; は式）、Rep（Q）= &lt;code&gt;{b_generate,LINE,Rep(P),Rep(E)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="50623f16fe5c165b35f76e12f8a3d6ba87d05b14" translate="yes" xml:space="preserve">
          <source>If Q is a filter &lt;code&gt;E&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(Q) = &lt;code&gt;Rep(E)&lt;/code&gt;.</source>
          <target state="translated">Qがフィルター &lt;code&gt;E&lt;/code&gt; である場合（ &lt;code&gt;E&lt;/code&gt; は式）、Rep（Q）= &lt;code&gt;Rep(E)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="809f12ef8c3064b918954c279d0a931407f3434e" translate="yes" xml:space="preserve">
          <source>If Q is a generator &lt;code&gt;P &amp;lt;- E&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(Q) = &lt;code&gt;{generate,ANNO,Rep(P),Rep(E)}&lt;/code&gt;.</source>
          <target state="translated">Qがジェネレーター &lt;code&gt;P &amp;lt;- E&lt;/code&gt; であり、 &lt;code&gt;P&lt;/code&gt; がパターンで、 &lt;code&gt;E&lt;/code&gt; が式である場合、Rep（Q）= &lt;code&gt;{generate,ANNO,Rep(P),Rep(E)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ed7ef1b4d4a36ddad7dd7fceafbd179ffb47f54" translate="yes" xml:space="preserve">
          <source>If Q is a generator &lt;code&gt;P &amp;lt;- E&lt;/code&gt;, where &lt;code&gt;P&lt;/code&gt; is a pattern and &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(Q) = &lt;code&gt;{generate,LINE,Rep(P),Rep(E)}&lt;/code&gt;.</source>
          <target state="translated">Qがジェネレーター &lt;code&gt;P &amp;lt;- E&lt;/code&gt; 場合（ &lt;code&gt;P&lt;/code&gt; はパターン、 &lt;code&gt;E&lt;/code&gt; は式）、Rep（Q）= &lt;code&gt;{generate,LINE,Rep(P),Rep(E)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="cee5bb555da8992e2b4f0f92c76f0e2b4698cbd0" translate="yes" xml:space="preserve">
          <source>If R is a relation from X to Y, and S is a relation from Y to Z, the &lt;strong id=&quot;relative_product&quot;&gt;relative product&lt;/strong&gt; of R and S is the relation T from X to Z defined so that x T z if and only if there exists an element y in Y such that x R y and y S z.</source>
          <target state="translated">RがXからYへの関係であり、SがYからZへの関係である&lt;strong id=&quot;relative_product&quot;&gt;場合&lt;/strong&gt;、RとSの&lt;strong id=&quot;relative_product&quot;&gt;相対積&lt;/strong&gt;は、XからZへの関係Tであり、要素yが存在する場合に限り、x T zが定義されます。 Yでは、x R yおよびy S zです。</target>
        </trans-unit>
        <trans-unit id="618098342145de14043b9d049d0e27a0dbe8a5ba" translate="yes" xml:space="preserve">
          <source>If R is a relation in X, and if S is defined so that x S y if x R y and not x = y, then S is the &lt;strong id=&quot;strict_relation&quot;&gt;strict&lt;/strong&gt; relation corresponding to R. Conversely, if S is a relation in X, and if R is defined so that x R y if x S y or x = y, then R is the &lt;strong id=&quot;weak_relation&quot;&gt;weak&lt;/strong&gt; relation corresponding to S.</source>
          <target state="translated">RがXの関係であり、Sがx R yでx = yでない場合にx S yが定義される場合、SはRに対応する&lt;strong id=&quot;strict_relation&quot;&gt;厳密な&lt;/strong&gt;関係です。逆に、SがXの関係であり、かつx R yがx S yまたはx = yの場合、RはSに対応する&lt;strong id=&quot;weak_relation&quot;&gt;弱い&lt;/strong&gt;関係になるように定義されます。</target>
        </trans-unit>
        <trans-unit id="6577b63edebfaf6cb114810862f5d1c1f7536b21" translate="yes" xml:space="preserve">
          <source>If R is an equivalence relation in X, and x is an element of X, the &lt;strong id=&quot;equivalence_class&quot;&gt;equivalence class&lt;/strong&gt; of x with respect to R is the set of all those elements y of X for which x R y holds. The equivalence classes constitute a partitioning of X. Conversely, if C is a partition of X, the relation that holds for any two elements of X if they belong to the same equivalence class, is an equivalence relation induced by the partition C.</source>
          <target state="translated">RがXの同値関係であり、xがXの要素である場合、Rに関するx の&lt;strong id=&quot;equivalence_class&quot;&gt;同値類&lt;/strong&gt;は、x R yが適用されるXのすべての要素yの集合です。等価クラスはXのパーティションを構成します。逆に、CがXのパーティションである場合、Xの任意の2つの要素が同じ等価クラスに属している場合に保持される関係は、パーティションCによって引き起こされる等価関係です。</target>
        </trans-unit>
        <trans-unit id="83162ddd20e00fa4a162cbcf127d9c0721481053" translate="yes" xml:space="preserve">
          <source>If R is an equivalence relation in X, the &lt;strong id=&quot;canonical_map&quot;&gt;canonical map&lt;/strong&gt; is the function that maps every element of X onto its equivalence class.</source>
          <target state="translated">RがXの同値関係である場合、&lt;strong id=&quot;canonical_map&quot;&gt;正準写像&lt;/strong&gt;はXのすべての要素をその同値類に写像する関数です。</target>
        </trans-unit>
        <trans-unit id="2e3f4abb96f981c697c50aab79cfafffa5fa7e98" translate="yes" xml:space="preserve">
          <source>If S is a restriction of R to A, then R is an &lt;strong id=&quot;extension&quot;&gt;extension&lt;/strong&gt; of S to X.</source>
          <target state="translated">SがRからAへの制限である場合、RはSからXへの&lt;strong id=&quot;extension&quot;&gt;拡張&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="59bb1dc7653278e89c3f5020133ebdcc7761c491" translate="yes" xml:space="preserve">
          <source>If S is an element (T, X) of Sets, then T is a &lt;strong id=&quot;valid_type&quot;&gt;valid type&lt;/strong&gt; of X, T is the type of S, and X is the external set of S. &lt;code&gt;&lt;a href=&quot;#from_term-2&quot;&gt;from_term/2&lt;/a&gt;&lt;/code&gt; creates a set from a type and an Erlang term turned into an external set.</source>
          <target state="translated">Sがセットの要素（T、X）の&lt;strong id=&quot;valid_type&quot;&gt;場合&lt;/strong&gt;、TはXの&lt;strong id=&quot;valid_type&quot;&gt;有効なタイプ&lt;/strong&gt;、TはSのタイプ、XはSの外部セットです &lt;code&gt;&lt;a href=&quot;#from_term-2&quot;&gt;from_term/2&lt;/a&gt;&lt;/code&gt; はタイプとErlangからセットを作成します項は外部セットに変わりました。</target>
        </trans-unit>
        <trans-unit id="d08abf342530f661d47c0b2d46fbf1f0e30add56" translate="yes" xml:space="preserve">
          <source>If SASL is not included as an application in the &lt;code&gt;.rel&lt;/code&gt; file, a warning is issued because such a release cannot be used in an upgrade. To turn off this warning, add option &lt;code&gt;no_warn_sasl&lt;/code&gt;.</source>
          <target state="translated">SASLがアプリケーションとして &lt;code&gt;.rel&lt;/code&gt; ファイルに含まれていない場合、そのようなリリースはアップグレードで使用できないため、警告が発行されます。この警告をオフにするには、オプション &lt;code&gt;no_warn_sasl&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="8d446165493e24efa50be7a65b22a36a79836aa6" translate="yes" xml:space="preserve">
          <source>If SNMPv3 is used, these MIBs are loaded by default.</source>
          <target state="translated">SNMPv3を使用する場合、これらのMIBはデフォルトでロードされます。</target>
        </trans-unit>
        <trans-unit id="99d068911d44f519900efdb97e0ebd14d390453e" translate="yes" xml:space="preserve">
          <source>If SetFun is specified as a fun, the fun is applied to each element of the given set and the return value is assumed to be a set.</source>
          <target state="translated">funとしてSetFunが指定された場合、与えられた集合の各要素にfunが適用され、戻り値は集合であると仮定されます。</target>
        </trans-unit>
        <trans-unit id="e3976f1f032e302393b8bb08320950e629b9d555" translate="yes" xml:space="preserve">
          <source>If SetFun is specified as a tuple &lt;code&gt;{external, Fun}&lt;/code&gt;, Fun is applied to the external set of each element of the given set and the return value is assumed to be an external set. Selecting the elements of an unordered set as external sets and assembling a new unordered set from a list of external sets is in the present implementation more efficient than modifying each element as a set. However, this optimization can only be used when the elements of the unordered set are atomic or ordered sets. It must also be the case that the type of the elements matches some clause of Fun (the type of the created set is the result of applying Fun to the type of the given set), and that Fun does nothing but selecting, duplicating, or rearranging parts of the elements.</source>
          <target state="translated">SetFunがタプル &lt;code&gt;{external, Fun}&lt;/code&gt; として指定されている場合、指定されたセットの各要素の外部セットにFunが適用され、戻り値は外部セットであると見なされます。順序なしセットの要素を外部セットとして選択し、外部セットのリストから新しい順序なしセットを組み立てることは、現在の実装では、各要素をセットとして変更するよりも効率的です。ただし、この最適化は、順序なしセットの要素がアトミックまたは順序付きセットである場合にのみ使用できます。また、要素のタイプがFunの一部の句に一致し（作成されたセットのタイプは、指定されたセットのタイプにFunを適用した結果である）、Funが選択、複製、または要素の一部を再配置します。</target>
        </trans-unit>
        <trans-unit id="43c0a8b3ea81788001f690f7e87c84083499ae45" translate="yes" xml:space="preserve">
          <source>If T is &lt;code&gt;( T_0 )&lt;/code&gt;, then Rep(T) = &lt;code&gt;Rep(T_0)&lt;/code&gt;, that is, parenthesized types cannot be distinguished from their bodies.</source>
          <target state="translated">Tが &lt;code&gt;( T_0 )&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;Rep(T_0)&lt;/code&gt; です。つまり、括弧で囲まれた型は本体と区別できません。</target>
        </trans-unit>
        <trans-unit id="3fe813c684b65a78f678a4bec68aa5f263202a79" translate="yes" xml:space="preserve">
          <source>If T is a bitstring type &lt;code&gt;&amp;lt;&amp;lt;_:M,_:_*N&amp;gt;&amp;gt;&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; are singleton integer types, then Rep(T) = &lt;code&gt;{type,ANNO,binary,[Rep(M),Rep(N)]}&lt;/code&gt;.</source>
          <target state="translated">Tがビットストリングタイプ &lt;code&gt;&amp;lt;&amp;lt;_:M,_:_*N&amp;gt;&amp;gt;&lt;/code&gt; 場合、 &lt;code&gt;M&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; はシングルトン整数タイプであり、Rep（T）= &lt;code&gt;{type,ANNO,binary,[Rep(M),Rep(N)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="54d59bcb751b787399eaa6216688da1c771a3508" translate="yes" xml:space="preserve">
          <source>If T is a bitstring type &lt;code&gt;&amp;lt;&amp;lt;_:M,_:_*N&amp;gt;&amp;gt;&lt;/code&gt;, where &lt;code&gt;M&lt;/code&gt; and &lt;code&gt;N&lt;/code&gt; are singleton integer types, then Rep(T) = &lt;code&gt;{type,LINE,binary,[Rep(M),Rep(N)]}&lt;/code&gt;.</source>
          <target state="translated">Tがビット文字列型 &lt;code&gt;&amp;lt;&amp;lt;_:M,_:_*N&amp;gt;&amp;gt;&lt;/code&gt; で、 &lt;code&gt;M&lt;/code&gt; と &lt;code&gt;N&lt;/code&gt; がシングルトン整数型の場合、Rep（T）= &lt;code&gt;{type,LINE,binary,[Rep(M),Rep(N)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f85dadf01e8f30907411f8ced0faf82947f6804" translate="yes" xml:space="preserve">
          <source>If T is a fun type &lt;code&gt;fun((...) -&amp;gt; T_0)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,'fun',[{type,ANNO,any},Rep(T_0)]}&lt;/code&gt;.</source>
          <target state="translated">Tが楽しいタイプ &lt;code&gt;fun((...) -&amp;gt; T_0)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{type,ANNO,'fun',[{type,ANNO,any},Rep(T_0)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2bb0862754ffb06068ede8dc817a72eb1519add3" translate="yes" xml:space="preserve">
          <source>If T is a fun type &lt;code&gt;fun((...) -&amp;gt; T_0)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,'fun',[{type,LINE,any},Rep(T_0)]}&lt;/code&gt;.</source>
          <target state="translated">Tが楽しい型 &lt;code&gt;fun((...) -&amp;gt; T_0)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{type,LINE,'fun',[{type,LINE,any},Rep(T_0)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a390f10fcd8d8a36def467725d4dda00982dd986" translate="yes" xml:space="preserve">
          <source>If T is a fun type &lt;code&gt;fun()&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,'fun',[]}&lt;/code&gt;.</source>
          <target state="translated">Tがfunタイプ &lt;code&gt;fun()&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,ANNO,'fun',[]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7f9d5b99a9c22d7dc1e1078c45173c119d328720" translate="yes" xml:space="preserve">
          <source>If T is a fun type &lt;code&gt;fun()&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,'fun',[]}&lt;/code&gt;.</source>
          <target state="translated">Tがfunタイプ &lt;code&gt;fun()&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,LINE,'fun',[]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2b7630c752d5e9079868a01fb10ba5440be40003" translate="yes" xml:space="preserve">
          <source>If T is a fun type &lt;code&gt;fun(Ft)&lt;/code&gt;, where &lt;code&gt;Ft&lt;/code&gt; is a function type, then Rep(T) = &lt;code&gt;Rep(Ft)&lt;/code&gt;. For Rep(Ft), see below.</source>
          <target state="translated">Tがfun型 &lt;code&gt;fun(Ft)&lt;/code&gt; であり、 &lt;code&gt;Ft&lt;/code&gt; が関数型である場合、Rep（T）= &lt;code&gt;Rep(Ft)&lt;/code&gt; です。Rep（Ft）については、以下を参照してください。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
