<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="35c6e799b94495d942c887de378767b8bf60fab5" translate="yes" xml:space="preserve">
          <source>Call Statistics</source>
          <target state="translated">コール統計</target>
        </trans-unit>
        <trans-unit id="39312e806d3f1ec58faae16ac790feff4beeac35" translate="yes" xml:space="preserve">
          <source>Call a NIF that first performs a chunk of the work, then invokes the &lt;code&gt;&lt;a href=&quot;#enif_schedule_nif&quot;&gt; enif_schedule_nif&lt;/a&gt;&lt;/code&gt; function to schedule another NIF call to perform the next chunk. The final call scheduled in this manner can then return the overall result.</source>
          <target state="translated">最初に作業のチャンクを実行するNIFを呼び出し、次に &lt;code&gt;&lt;a href=&quot;#enif_schedule_nif&quot;&gt; enif_schedule_nif&lt;/a&gt;&lt;/code&gt; 関数を呼び出して、次のチャンクを実行するために別のNIF呼び出しをスケジュールします。この方法でスケジュールされた最後の呼び出しは、全体的な結果を返すことができます。</target>
        </trans-unit>
        <trans-unit id="4517bf0f809aaf1e241952932bd6d071e97a1670" translate="yes" xml:space="preserve">
          <source>Call a NIF that first performs a chunk of the work, then invokes the &lt;code&gt;&lt;a href=&quot;#enif_schedule_nif&quot;&gt;enif_schedule_nif&lt;/a&gt;&lt;/code&gt; function to schedule another NIF call to perform the next chunk. The final call scheduled in this manner can then return the overall result.</source>
          <target state="translated">最初に作業のチャンクを実行するNIFを呼び出し、次に &lt;code&gt;&lt;a href=&quot;#enif_schedule_nif&quot;&gt;enif_schedule_nif&lt;/a&gt;&lt;/code&gt; 関数を呼び出して、次のチャンクを実行する別のNIF呼び出しをスケジュールします。この方法でスケジュールされた最後の呼び出しは、全体的な結果を返すことができます。</target>
        </trans-unit>
        <trans-unit id="9e64aca1cbd78581418480040f30e164b840d03b" translate="yes" xml:space="preserve">
          <source>Call back function to accumulate contents of entity.</source>
          <target state="translated">エンティティの内容を蓄積するコールバック関数</target>
        </trans-unit>
        <trans-unit id="25cbcf90fa280c9778e7621dfdd70289b3357c4e" translate="yes" xml:space="preserve">
          <source>Call back function to decide what to do if the scanner runs into EOF before the document is complete.</source>
          <target state="translated">ドキュメントが完成する前にスキャナがEOFになった場合の処理を決定するコールバック関数。</target>
        </trans-unit>
        <trans-unit id="305e72ce9d0178fb37627379b7066e3998f1aaff" translate="yes" xml:space="preserve">
          <source>Call back function to fetch an external resource.</source>
          <target state="translated">外部リソースを取得するためのコールバック関数。</target>
        </trans-unit>
        <trans-unit id="f1d17c05f561817d9262782ed4703874ffa16a47" translate="yes" xml:space="preserve">
          <source>Call back function to handle scanner events.</source>
          <target state="translated">スキャナイベントを処理するためのコールバック関数</target>
        </trans-unit>
        <trans-unit id="967a892c17aad400146f3cd8a0b41cd0e008b98d" translate="yes" xml:space="preserve">
          <source>Call back function to process the document entities once identified.</source>
          <target state="translated">一旦特定されたドキュメントエンティティを処理するためのコールバック関数。</target>
        </trans-unit>
        <trans-unit id="e43990d9029a1b5faffe47cfb2a73c40d38948b7" translate="yes" xml:space="preserve">
          <source>Call count tracing is very lightweight compared to other forms of tracing since no trace message has to be generated. Some measurements indicates performance degradation in the vicinity of 10 percent.</source>
          <target state="translated">呼数トレースは、トレースメッセージを生成する必要がないため、他の形態のトレースと比較して非常に軽量です。いくつかの測定では、10パーセント近くのパフォーマンス低下を示しています。</target>
        </trans-unit>
        <trans-unit id="1d9d8ff2abc216537369a4f6c51252cf41bb671a" translate="yes" xml:space="preserve">
          <source>Call count tracing is very lightweight compared to other forms of tracing since no trace message has to be generated. Some measurements indicates performance degradations in the vicinity of 10 percent.</source>
          <target state="translated">呼数トレースは、トレースメッセージを生成する必要がないため、他の形態のトレースと比較して非常に軽量です。いくつかの測定では、10パーセント近くのパフォーマンスの低下を示しています。</target>
        </trans-unit>
        <trans-unit id="9ed8c88acf1e0b8225e507d6c8cef5617c61d6b6" translate="yes" xml:space="preserve">
          <source>Call these iteration functions on nodes that contain a replica of the table. Each call to the function &lt;code&gt;Fun&lt;/code&gt; access the table and if the table resides on another node it generates much unnecessary network traffic.</source>
          <target state="translated">テーブルのレプリカを含むノードでこれらの反復関数を呼び出します。関数 &lt;code&gt;Fun&lt;/code&gt; を呼び出すたびにテーブルにアクセスし、テーブルが別のノードにある場合、不要なネットワークトラフィックを大量に生成します。</target>
        </trans-unit>
        <trans-unit id="2a5f2658aeaf93347d628cb22d1c27eae9164e5d" translate="yes" xml:space="preserve">
          <source>Call this function in order to cancel a previous asynchronous call to, e.g. &lt;code&gt;&lt;a href=&quot;#recv-3&quot;&gt;recv/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">たとえば &lt;code&gt;&lt;a href=&quot;#recv-3&quot;&gt;recv/3&lt;/a&gt;&lt;/code&gt; への以前の非同期呼び出しをキャンセルするには、この関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="92a83b9ff602a28ae97d4ee0c90eb3fa1240e7fa" translate="yes" xml:space="preserve">
          <source>Call this function to stop cover test on nodes previously added with &lt;code&gt;&lt;a href=&quot;#add_nodes-1&quot;&gt;ct_cover:add_nodes/1&lt;/a&gt;&lt;/code&gt;. Results on the remote node are transferred to the &lt;code&gt;Common Test&lt;/code&gt; node.</source>
          <target state="translated">この関数を呼び出して、以前に &lt;code&gt;&lt;a href=&quot;#add_nodes-1&quot;&gt;ct_cover:add_nodes/1&lt;/a&gt;&lt;/code&gt; で追加されたノードのカバーテストを停止します。リモートノードの結果は、 &lt;code&gt;Common Test&lt;/code&gt; ノードに転送されます。</target>
        </trans-unit>
        <trans-unit id="37045b168b3bc333ac8bca52ef56747d12a1101f" translate="yes" xml:space="preserve">
          <source>Call this function when profiling has been stopped to display the results per process, that is:</source>
          <target state="translated">プロファイリングが停止しているときにこの関数を呼び出して、プロセスごとに結果を表示します。</target>
        </trans-unit>
        <trans-unit id="c7eed74fd1bbb46205f4a5686245f8e5040d0026" translate="yes" xml:space="preserve">
          <source>Call tracing with &lt;code&gt;global&lt;/code&gt; option only affects external function calls. This was earlier handled by inserting a special trace instruction in export entries without the use of breakpoints. With the new non-blocking tracing we want to avoid special handling for global tracing and make use of the staging and atomic switching within the breakpoint mechanism. The solution was to create the same type of breakpoint structure for a global call trace. The difference to local tracing is that we insert the &lt;code&gt;op_i_generic_breakpoint&lt;/code&gt; instruction (with its pointer at offset -4) in the export entry rather than in the code.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; オプションを使用した呼び出しトレースは、外部関数呼び出しにのみ影響します。これは以前、ブレークポイントを使用せずにエクスポートエントリに特別なトレース命令を挿入することで処理されていました。新しいノンブロッキングトレースでは、グローバルトレースの特別な処理を回避し、ブレークポイントメカニズム内のステージングとアトミックスイッチングを利用したいと考えています。解決策は、グローバルコールトレースに同じタイプのブレークポイント構造を作成することでした。ローカルトレースとの違いは、 &lt;code&gt;op_i_generic_breakpoint&lt;/code&gt; 命令（ポインタがオフセット-4にある）をコードではなくエクスポートエントリに挿入することです。</target>
        </trans-unit>
        <trans-unit id="eea8e2a2479f703038c465d2c2ffcd082e88cb6f" translate="yes" xml:space="preserve">
          <source>Callback = atom()</source>
          <target state="translated">コールバック=atom()</target>
        </trans-unit>
        <trans-unit id="9c55daf6e61f9dc1556f1ec913e0ca99b7e0ea38" translate="yes" xml:space="preserve">
          <source>Callback Functions</source>
          <target state="translated">コールバック関数</target>
        </trans-unit>
        <trans-unit id="ad8da05d8ad38ed7c0c50c2aa6868aeca72727cb" translate="yes" xml:space="preserve">
          <source>Callback Module</source>
          <target state="translated">コールバックモジュール</target>
        </trans-unit>
        <trans-unit id="61dfb922d9f46c947d009d0fb95ea292779f3dc7" translate="yes" xml:space="preserve">
          <source>Callback for &lt;code&gt;ct_telnet.erl&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ct_telnet.erl&lt;/code&gt; のコールバック。</target>
        </trans-unit>
        <trans-unit id="7e45c8484398e4aeac5267b27d0e1fb6f862e303" translate="yes" xml:space="preserve">
          <source>Callback function &lt;code&gt;TraverseFun&lt;/code&gt; is used for traversing the table. It is to return a list of objects terminated by either &lt;code&gt;[]&lt;/code&gt; or a nullary fun to be used for traversing the not yet traversed objects of the table. Any other return value is immediately returned as value of the query evaluation. Unary &lt;code&gt;TraverseFun&lt;/code&gt;s are to accept a match specification as argument. The match specification is created by the parse transform by analyzing the pattern of the generator calling &lt;code&gt;qlc:table/2&lt;/code&gt; and filters using variables introduced in the pattern. If the parse transform cannot find a match specification equivalent to the pattern and filters, &lt;code&gt;TraverseFun&lt;/code&gt; is called with a match specification returning every object.</source>
          <target state="translated">コールバック関数 &lt;code&gt;TraverseFun&lt;/code&gt; は、テーブルをトラバースするために使用されます。 &lt;code&gt;[]&lt;/code&gt; またはnullary funで終了するオブジェクトのリストを返し、テーブルのまだトラバースされていないオブジェクトをトラバースするために使用されます。その他の戻り値は、クエリ評価の値としてすぐに返されます。単項 &lt;code&gt;TraverseFun&lt;/code&gt; は、一致指定を引数として受け入れます。一致仕様は、 &lt;code&gt;qlc:table/2&lt;/code&gt; を呼び出すジェネレーターのパターンを分析し、パターンに導入された変数を使用してフィルターをかけることにより、解析変換によって作成されます。解析変換がパターンとフィルターに相当する一致指定を見つけることができない場合、 &lt;code&gt;TraverseFun&lt;/code&gt; は、すべてのオブジェクトを返す一致指定で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="04f9a377a5245adf1c0c727ef509b19ea04d764a" translate="yes" xml:space="preserve">
          <source>Callback functions</source>
          <target state="translated">コールバック機能</target>
        </trans-unit>
        <trans-unit id="37556ac19058ca5c17bab63cd838a12f2880d206" translate="yes" xml:space="preserve">
          <source>Callback functions that are optional for the user of the behaviour to implement are specified by use of the &lt;code&gt;-optional_callbacks&lt;/code&gt; attribute:</source>
          <target state="translated">動作のユーザーが実装するオプションのコールバック関数は、 &lt;code&gt;-optional_callbacks&lt;/code&gt; 属性を使用して指定されます。</target>
        </trans-unit>
        <trans-unit id="a04bb6692677302b06dcc4155d24ffed7a1d8b90" translate="yes" xml:space="preserve">
          <source>Callback invoked prior to terminating the transport process of a transport connection having watchdog state &lt;code&gt;OKAY&lt;/code&gt;. Applied to &lt;code&gt;application|service|transport&lt;/code&gt; and the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; and &lt;code&gt;&lt;code&gt;diameter_app:peer()&lt;/code&gt;&lt;/code&gt; in question: &lt;code&gt;application&lt;/code&gt; indicates that the diameter application is being stopped, &lt;code&gt;service&lt;/code&gt; that the service in question is being stopped by &lt;code&gt;&lt;a href=&quot;#stop_service-1&quot;&gt;stop_service/1&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;transport&lt;/code&gt; that the transport in question is being removed by &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ウォッチドッグ状態が &lt;code&gt;OKAY&lt;/code&gt; のトランスポート接続のトランスポートプロセスを終了する前に呼び出されるコールバック。適用される &lt;code&gt;application|service|transport&lt;/code&gt; 及び &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; と &lt;code&gt;&lt;code&gt;diameter_app:peer()&lt;/code&gt;&lt;/code&gt; 当該： &lt;code&gt;application&lt;/code&gt; 、Diameterアプリケーションが停止されていることを示す &lt;code&gt;service&lt;/code&gt; 当該サービスにより停止されていること &lt;code&gt;&lt;a href=&quot;#stop_service-1&quot;&gt;stop_service/1&lt;/a&gt;&lt;/code&gt; 、及び &lt;code&gt;transport&lt;/code&gt; 輸送こと問題の &lt;code&gt;&lt;a href=&quot;#remove_transport-2&quot;&gt;remove_transport/2&lt;/a&gt;&lt;/code&gt; によって削除されています。</target>
        </trans-unit>
        <trans-unit id="66eade566a1aabb00b9616d9f85c98561a92d0e8" translate="yes" xml:space="preserve">
          <source>Callback invoked upon reception of CER/CEA during capabilities exchange in order to ask whether or not the connection should be accepted. Applied to the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; and &lt;code&gt;#diameter_caps{}&lt;/code&gt; record of the connection.</source>
          <target state="translated">機能交換中にCER / CEAを受信したときに呼び出されるコールバック。接続を受け入れるかどうかを尋ねます。接続の &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#transport_ref&quot;&gt;transport_ref()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; および &lt;code&gt;#diameter_caps{}&lt;/code&gt; レコードに適用されます。</target>
        </trans-unit>
        <trans-unit id="8170a9b43176c43c83ab38fea10e4e72c195d1f2" translate="yes" xml:space="preserve">
          <source>Callback module for &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt;, for connecting to a Telnet server on a UNIX host.</source>
          <target state="translated">UNIXホスト上のTelnetサーバーに接続するための &lt;code&gt;&lt;a href=&quot;ct_telnet&quot;&gt;ct_telnet&lt;/a&gt;&lt;/code&gt; のコールバックモジュール。</target>
        </trans-unit>
        <trans-unit id="723d576b61f4090ef99d45ef635768456422a654" translate="yes" xml:space="preserve">
          <source>Callback module for ct_telnet, for connecting to a Telnet server on a UNIX host.</source>
          <target state="translated">UNIX ホスト上の Telnet サーバに接続するための ct_telnet 用コールバックモジュール。</target>
        </trans-unit>
        <trans-unit id="c6227e8f008e1e3653b7695696953858c51a783a" translate="yes" xml:space="preserve">
          <source>Callback module for customized logging of errors, warnings, and info messages. The callback module must implement the &lt;code&gt;tftp_logger&lt;/code&gt; behavior, see &lt;code&gt;&lt;a href=&quot;#tftp_logger&quot;&gt;LOGGER FUNCTIONS&lt;/a&gt;&lt;/code&gt;. The default module is &lt;code&gt;tftp_logger&lt;/code&gt;.</source>
          <target state="translated">エラー、警告、および情報メッセージのログをカスタマイズするためのコールバックモジュール。コールバックモジュールは、 &lt;code&gt;tftp_logger&lt;/code&gt; 動作を実装する必要があります。LOGGER &lt;code&gt;&lt;a href=&quot;#tftp_logger&quot;&gt;LOGGER FUNCTIONS&lt;/a&gt;&lt;/code&gt; 参照してください。デフォルトのモジュールは &lt;code&gt;tftp_logger&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="ac834d27797dbad127ce8fd6d8a2319b5f46c402" translate="yes" xml:space="preserve">
          <source>Callback module for users of the Megaco application</source>
          <target state="translated">Megacoアプリケーションのユーザーのためのコールバックモジュール</target>
        </trans-unit>
        <trans-unit id="b474f7579efe489c47dcf78d665d0cd713f942e9" translate="yes" xml:space="preserve">
          <source>Callback module for using an SSH agent instead of the default ssh_file callback.</source>
          <target state="translated">デフォルトの ssh_file コールバックの代わりに SSH エージェントを使用するためのコールバックモジュール。</target>
        </trans-unit>
        <trans-unit id="55798c61abfa41a7a5297d6740d1e64b1d565485" translate="yes" xml:space="preserve">
          <source>Callback module in which messages of the Diameter application are handled. See &lt;code&gt;diameter_app(3)&lt;/code&gt; for the required interface and semantics.</source>
          <target state="translated">Diameterアプリケーションのメッセージが処理されるコールバックモジュール。必要なインターフェースとセマンティクスについては、 &lt;code&gt;diameter_app(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0b07b4a00700ebf2a1936cd09849d3229f8cea9e" translate="yes" xml:space="preserve">
          <source>Callback modules for &lt;code&gt;gen_server&lt;/code&gt;, &lt;code&gt;gen_statem&lt;/code&gt;, and &lt;code&gt;gen_event&lt;/code&gt; can also change the value of &lt;code&gt;Misc&lt;/code&gt; by exporting a function &lt;code&gt;format_status/2&lt;/code&gt;, which contributes module-specific information. For details, see &lt;code&gt;&lt;a href=&quot;gen_server#Module:format_status-2&quot;&gt; gen_server:format_status/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;gen_statem#Module:format_status-2&quot;&gt; gen_statem:format_status/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;gen_event#Module:format_status-2&quot;&gt; gen_event:format_status/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; 、 &lt;code&gt;gen_statem&lt;/code&gt; 、および &lt;code&gt;gen_event&lt;/code&gt; のコールバックモジュールは、モジュール固有の情報を提供する関数 &lt;code&gt;format_status/2&lt;/code&gt; をエクスポートすることにより、 &lt;code&gt;Misc&lt;/code&gt; の値を変更することもできます。詳細については、 &lt;code&gt;&lt;a href=&quot;gen_server#Module:format_status-2&quot;&gt; gen_server:format_status/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;gen_statem#Module:format_status-2&quot;&gt; gen_statem:format_status/2&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;gen_event#Module:format_status-2&quot;&gt; gen_event:format_status/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="63edefe6aafdd040e89d039ff830e8a61ffa1b95" translate="yes" xml:space="preserve">
          <source>Callback modules for &lt;code&gt;gen_server&lt;/code&gt;, &lt;code&gt;gen_statem&lt;/code&gt;, and &lt;code&gt;gen_event&lt;/code&gt; can also change the value of &lt;code&gt;Misc&lt;/code&gt; by exporting a function &lt;code&gt;format_status/2&lt;/code&gt;, which contributes module-specific information. For details, see &lt;code&gt;&lt;a href=&quot;gen_server#Module:format_status-2&quot;&gt;gen_server:format_status/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;gen_statem#Module:format_status-2&quot;&gt;gen_statem:format_status/2&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;gen_event#Module:format_status-2&quot;&gt;gen_event:format_status/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; 、 &lt;code&gt;gen_statem&lt;/code&gt; 、および &lt;code&gt;gen_event&lt;/code&gt; のコールバックモジュールは、モジュール固有の情報を提供する関数 &lt;code&gt;format_status/2&lt;/code&gt; をエクスポートして、 &lt;code&gt;Misc&lt;/code&gt; の値を変更することもできます。詳細については、 &lt;code&gt;&lt;a href=&quot;gen_server#Module:format_status-2&quot;&gt;gen_server:format_status/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;gen_statem#Module:format_status-2&quot;&gt;gen_statem:format_status/2&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;gen_event#Module:format_status-2&quot;&gt;gen_event:format_status/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2a42e9b08e0786b523d53e7aaa69806b6b4c7c7b" translate="yes" xml:space="preserve">
          <source>Callback timeouts</source>
          <target state="translated">コールバックのタイムアウト</target>
        </trans-unit>
        <trans-unit id="9fdc2cfe374fa5bde1e4e458854875e1709add1c" translate="yes" xml:space="preserve">
          <source>Callbacks</source>
          <target state="translated">Callbacks</target>
        </trans-unit>
        <trans-unit id="5393b6e7c5c51638adb55313f4e4ecf06a0243fc" translate="yes" xml:space="preserve">
          <source>Callbacks functions for a &lt;code&gt;&lt;a href=&quot;#ussi&quot;&gt;&lt;i&gt;User Supplied Socket Implementation&lt;/i&gt;&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;&lt;a href=&quot;#ei_socket_callbacks_fields&quot;&gt;Documentation of each field&lt;/a&gt;&lt;/code&gt; can be found in the</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#ussi&quot;&gt;&lt;i&gt;User Supplied Socket Implementation&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; コールバック関数。 &lt;code&gt;&lt;a href=&quot;#ei_socket_callbacks_fields&quot;&gt;Documentation of each field&lt;/a&gt;&lt;/code&gt; 、</target>
        </trans-unit>
        <trans-unit id="0388e8bb7b30f62d43703b0a0c0a90fc579a8ead" translate="yes" xml:space="preserve">
          <source>Called after an asynchronous call has completed. The asynchronous call is started with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt; erl_driver:driver_async&lt;/a&gt;&lt;/code&gt;. This function is called from the Erlang emulator thread, as opposed to the asynchronous function, which is called in some thread (if multi-threading is enabled).</source>
          <target state="translated">非同期呼び出しが完了した後に呼び出されます。非同期呼び出しは、 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt; erl_driver:driver_async&lt;/a&gt;&lt;/code&gt; で開始されます。この関数は、一部のスレッドで呼び出される非同期関数とは対照的に、Erlangエミュレータースレッドから呼び出されます（マルチスレッドが有効になっている場合）。</target>
        </trans-unit>
        <trans-unit id="1424d68bc26afe36f6e438d92e2344fe5359e183" translate="yes" xml:space="preserve">
          <source>Called after an asynchronous call has completed. The asynchronous call is started with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt;erl_driver:driver_async&lt;/a&gt;&lt;/code&gt;. This function is called from the Erlang emulator thread, as opposed to the asynchronous function, which is called in some thread (if multi-threading is enabled).</source>
          <target state="translated">非同期呼び出しが完了した後に呼び出されます。非同期呼び出しは &lt;code&gt;&lt;a href=&quot;erl_driver#driver_async&quot;&gt;erl_driver:driver_async&lt;/a&gt;&lt;/code&gt; で開始されます。この関数は、いくつかのスレッドで呼び出される非同期関数（マルチスレッドが有効な場合）とは対照的に、Erlangエミュレータースレッドから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="308f76c161337017286f205aef3ab09cb6ea041d" translate="yes" xml:space="preserve">
          <source>Called after the basic message processing (MPD) has been done, but before the pdu is handed over to the master-agent for primary processing.</source>
          <target state="translated">基本メッセージ処理(MPD)が行われた後に呼び出されますが、一次処理のためにpduがマスターエージェントに渡される前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a313d3073d9eea56873be11a826fd840a7e0d86d" translate="yes" xml:space="preserve">
          <source>Called after the basic message processing (MPD) has been done, but before the pdu is handed over to the server for primary processing.</source>
          <target state="translated">基本的なメッセージ処理 (MPD)が行われた後に呼び出されますが、一次処理のために pdu がサーバに引き渡される前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ff191d8e8919401c02df5d752c7753bbfc148a86" translate="yes" xml:space="preserve">
          <source>Called any time after the driver's timer reaches &lt;code&gt;0&lt;/code&gt;. The timer is activated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_set_timer&quot;&gt; erl_driver:driver_set_timer&lt;/a&gt;&lt;/code&gt;. No priorities or ordering exist among drivers, so if several drivers time out at the same time, anyone of them is called first.</source>
          <target state="translated">ドライバーのタイマーが &lt;code&gt;0&lt;/code&gt; に達した後はいつでも呼び出されます。タイマーは &lt;code&gt;&lt;a href=&quot;erl_driver#driver_set_timer&quot;&gt; erl_driver:driver_set_timer&lt;/a&gt;&lt;/code&gt; でアクティブになります。ドライバー間に優先順位や順序は存在しないため、複数のドライバーが同時にタイムアウトした場合は、いずれかのドライバーが最初に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="e5fe3aacb675f5586e55ac426e9e29a0553867e0" translate="yes" xml:space="preserve">
          <source>Called any time after the driver's timer reaches &lt;code&gt;0&lt;/code&gt;. The timer is activated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_set_timer&quot;&gt;erl_driver:driver_set_timer&lt;/a&gt;&lt;/code&gt;. No priorities or ordering exist among drivers, so if several drivers time out at the same time, anyone of them is called first.</source>
          <target state="translated">ドライバーのタイマーが &lt;code&gt;0&lt;/code&gt; に達した後はいつでも呼び出されます。タイマーは &lt;code&gt;&lt;a href=&quot;erl_driver#driver_set_timer&quot;&gt;erl_driver:driver_set_timer&lt;/a&gt;&lt;/code&gt; でアクティブ化されます。ドライバー間に優先順位や順序はありません。そのため、複数のドライバーが同時にタイムアウトした場合、それらのいずれかが最初に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="81eabbdc5601ceaa0bccb714043c53b451726d6f" translate="yes" xml:space="preserve">
          <source>Called at the reception of a message (before &lt;strong&gt;any&lt;/strong&gt; processing has been done).</source>
          <target state="translated">（前にメッセージの受信時と呼ばれる&lt;strong&gt;任意の&lt;/strong&gt;処理が行われています）。</target>
        </trans-unit>
        <trans-unit id="bf59df7706e69db3cc159c1ee57e97f02070c14b" translate="yes" xml:space="preserve">
          <source>Called before the basic message processing (MPD) is done, when a pdu has been received from the master-agent.</source>
          <target state="translated">マスターエージェントからpduを受信した場合、基本メッセージ処理(MPD)を行う前に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="67cc06ab5c5cdaf22f4e18059ff7135bed75b26e" translate="yes" xml:space="preserve">
          <source>Called before the fun is unregistered. Here any cleaning up can be done. The return value is not important, but is passed back to the caller of &lt;code&gt;clear_crypto_key_fun/0&lt;/code&gt; as part of its return value.</source>
          <target state="translated">funが登録解除される前に呼び出されます。ここでクリーンアップを実行できます。戻り値は重要ではありませんが、 &lt;code&gt;clear_crypto_key_fun/0&lt;/code&gt; の呼び出し元に戻り値の一部として渡されます。</target>
        </trans-unit>
        <trans-unit id="60cc53ceda191e4c7c43073a2ca95d2429376ca7" translate="yes" xml:space="preserve">
          <source>Called before the sending of a message (after &lt;strong&gt;all&lt;/strong&gt; processing has been done).</source>
          <target state="translated">メッセージの送信前に（&lt;strong&gt;すべての&lt;/strong&gt;処理が完了した後に）呼び出されます。</target>
        </trans-unit>
        <trans-unit id="411e859542f736dac045f8721e0a466752068640" translate="yes" xml:space="preserve">
          <source>Called by &lt;code&gt;&lt;a href=&quot;net_adm&quot;&gt;net_adm:names/0&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Host&lt;/code&gt; defaults to the localhost. Returns the names and associated port numbers of the Erlang nodes that &lt;code&gt;epmd&lt;/code&gt; registered at the specified host. Returns &lt;code&gt;{error, address}&lt;/code&gt; if &lt;code&gt;epmd&lt;/code&gt; is not operational.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;net_adm&quot;&gt;net_adm:names/0&lt;/a&gt;&lt;/code&gt; によって呼び出されます。 &lt;code&gt;Host&lt;/code&gt; デフォルトはlocalhostです。指定されたホストに &lt;code&gt;epmd&lt;/code&gt; が登録したErlangノードの名前と関連するポート番号を返します。 &lt;code&gt;epmd&lt;/code&gt; が動作しない場合 &lt;code&gt;{error, address}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="754186ab8b7082c0674d04f3bdaf7fcddc1ab3a3" translate="yes" xml:space="preserve">
          <source>Called by the &lt;code&gt;erl_ddll&lt;/code&gt; driver when the driver is unloaded. (It is only called in dynamic drivers.)</source>
          <target state="translated">ドライバーがアンロードされるときに &lt;code&gt;erl_ddll&lt;/code&gt; ドライバーによって呼び出されます。（動的ドライバでのみ呼び出されます。）</target>
        </trans-unit>
        <trans-unit id="655d271abcfd7d76d286a17dda2d7657206096c8" translate="yes" xml:space="preserve">
          <source>Called by the distribution module to get which port the local node should listen to when accepting new distribution requests.</source>
          <target state="translated">ディストリビューションモジュールによって呼び出され、ローカルノードが新しいディストリビューションのリクエストを受け付ける際に、どのポートをリッスンすべきかを取得します。</target>
        </trans-unit>
        <trans-unit id="e0f458d70c750018b87e9944e64a8528f08c2ec7" translate="yes" xml:space="preserve">
          <source>Called by the distribution module to resolves the &lt;code&gt;Host&lt;/code&gt; to an IP address of a remote node.</source>
          <target state="translated">&lt;code&gt;Host&lt;/code&gt; をリモートノードのIPアドレスに解決するために配布モジュールによって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="650a5975977f531507f62d29a2ce95a7a1cfb83f" translate="yes" xml:space="preserve">
          <source>Called by the distribution module. Resolves the &lt;code&gt;Host&lt;/code&gt; to an IP address.</source>
          <target state="translated">配布モジュールによって呼び出されます。 &lt;code&gt;Host&lt;/code&gt; をIPアドレスに解決します。</target>
        </trans-unit>
        <trans-unit id="85b869badf1456352f06af55e42a19b0066bf142" translate="yes" xml:space="preserve">
          <source>Called directly after the driver has been loaded by &lt;code&gt; erl_ddll:load_driver/2&lt;/code&gt; (actually when the driver is added to the driver list). The driver is to return &lt;code&gt;0&lt;/code&gt;, or, if the driver cannot initialize, &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt; erl_ddll:load_driver/2&lt;/code&gt; によってドライバーがロードされた直後に呼び出されます（実際には、ドライバーがドライバーリストに追加されたとき）。ドライバーは &lt;code&gt;0&lt;/code&gt; を返すか、ドライバーが初期化できない場合は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e6e67ee5139f5c3d24c6add77615125e4e640a01" translate="yes" xml:space="preserve">
          <source>Called directly after the driver has been loaded by &lt;code&gt;erl_ddll:load_driver/2&lt;/code&gt; (actually when the driver is added to the driver list). The driver is to return &lt;code&gt;0&lt;/code&gt;, or, if the driver cannot initialize, &lt;code&gt;-1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erl_ddll:load_driver/2&lt;/code&gt; によってドライバーがロードされた直後に呼び出されます（実際には、ドライバーがドライバーリストに追加されたとき）。ドライバは &lt;code&gt;0&lt;/code&gt; を返すか、またはドライバが初期化できない場合は &lt;code&gt;-1&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="987000d4d4006dd9dc12f7c300ae64273a69aeb6" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to continue its execution (for example, after it has been suspended). This function never returns.</source>
          <target state="translated">プロセスが実行を継続する場合（たとえば、一時停止された後）に &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="98e9ec7ab4eccd3e4ae575952428dd16c1ea3ec0" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to perform a code change. The code change is used when the internal data structure has changed. This function converts argument &lt;code&gt;Misc&lt;/code&gt; to the new data structure. &lt;code&gt;OldVsn&lt;/code&gt; is attribute &lt;strong&gt;vsn&lt;/strong&gt; of the old version of the &lt;code&gt;Module&lt;/code&gt;. If no such attribute is defined, the atom &lt;code&gt;undefined&lt;/code&gt; is sent.</source>
          <target state="translated">プロセスがコード変更を実行するときに、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。コード変更は、内部データ構造が変更されたときに使用されます。この関数は、引数 &lt;code&gt;Misc&lt;/code&gt; を新しいデータ構造に変換します。 &lt;code&gt;OldVsn&lt;/code&gt; は、古いバージョンの &lt;code&gt;Module&lt;/code&gt; 属性&lt;strong&gt;vsn&lt;/strong&gt;です。そのような属性が定義されていない場合、 &lt;code&gt;undefined&lt;/code&gt; のアトムが送信されます。</target>
        </trans-unit>
        <trans-unit id="419bfc7b5724ea2b2f35b364df0a94b7fb0dc40f" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to replace its current state. &lt;code&gt;NState&lt;/code&gt; is the value returned by &lt;code&gt;&lt;a href=&quot;#replace_state-3&quot;&gt;replace_state/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスが現在の状態を置き換えるときに、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。 &lt;code&gt;NState&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#replace_state-3&quot;&gt;replace_state/3&lt;/a&gt;&lt;/code&gt; によって返される値です。</target>
        </trans-unit>
        <trans-unit id="bfa9e2f41a9f72c39043fd4f54a03f6d2aa7c6c5" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to return a term that reflects its current state. &lt;code&gt;State&lt;/code&gt; is the value returned by &lt;code&gt;&lt;a href=&quot;#get_state-2&quot;&gt;get_state/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスが現在の状態を反映する用語を返す場合、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。 &lt;code&gt;State&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#get_state-2&quot;&gt;get_state/2&lt;/a&gt;&lt;/code&gt; によって返される値です。</target>
        </trans-unit>
        <trans-unit id="9a05f5f13a8adcd5f39e22e499b3c5e09ab8f8ff" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to terminate. For example, this function is called when the process is suspended and its parent orders shutdown. It gives the process a chance to do a cleanup. This function never returns.</source>
          <target state="translated">プロセスが終了するときに &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt; handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。たとえば、この関数は、プロセスが一時停止され、その親注文がシャットダウンされたときに呼び出されます。これにより、プロセスにクリーンアップを実行する機会が与えられます。この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="262d7b78c6487d8a39946866f1d11a39d5496a09" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to continue its execution (for example, after it has been suspended). This function never returns.</source>
          <target state="translated">プロセスがその実行を継続するときに（たとえば、中断された後など）、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="73172cc1a7cb2d69c85f4a96da6765b4101ba755" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to perform a code change. The code change is used when the internal data structure has changed. This function converts argument &lt;code&gt;Misc&lt;/code&gt; to the new data structure. &lt;code&gt;OldVsn&lt;/code&gt; is attribute &lt;strong&gt;vsn&lt;/strong&gt; of the old version of the &lt;code&gt;Module&lt;/code&gt;. If no such attribute is defined, the atom &lt;code&gt;undefined&lt;/code&gt; is sent.</source>
          <target state="translated">プロセスがコード変更を実行するときに、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。コード変更は、内部データ構造が変更されたときに使用されます。この関数は、引数 &lt;code&gt;Misc&lt;/code&gt; を新しいデータ構造に変換します。 &lt;code&gt;OldVsn&lt;/code&gt; は、古いバージョンの &lt;code&gt;Module&lt;/code&gt; の属性&lt;strong&gt;vsn&lt;/strong&gt;です。そのような属性が定義されていない場合、 &lt;code&gt;undefined&lt;/code&gt; のアトムが送信されます。</target>
        </trans-unit>
        <trans-unit id="594143f9a65ae1c6fe10c4f338068b8a9f905601" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to replace its current state. &lt;code&gt;NState&lt;/code&gt; is the value returned by &lt;code&gt;&lt;a href=&quot;#replace_state-3&quot;&gt;replace_state/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスが現在の状態を置き換えるときに、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。 &lt;code&gt;NState&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#replace_state-3&quot;&gt;replace_state/3&lt;/a&gt;&lt;/code&gt; によって返される値です。</target>
        </trans-unit>
        <trans-unit id="d9b3e834b715a254168526e411e95a8a48713b20" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to return a term that reflects its current state. &lt;code&gt;State&lt;/code&gt; is the value returned by &lt;code&gt;&lt;a href=&quot;#get_state-2&quot;&gt;get_state/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスが現在の状態を反映する項を返すときに、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。 &lt;code&gt;State&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#get_state-2&quot;&gt;get_state/2&lt;/a&gt;&lt;/code&gt; によって返される値です。</target>
        </trans-unit>
        <trans-unit id="e4c98925793456e56a2d33122eb6a311fa293f3d" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; when the process is to terminate. For example, this function is called when the process is suspended and its parent orders shutdown. It gives the process a chance to do a cleanup. This function never returns.</source>
          <target state="translated">プロセスが終了するときに、 &lt;code&gt;&lt;a href=&quot;#handle_system_msg-6&quot;&gt;handle_system_msg/6&lt;/a&gt;&lt;/code&gt; から呼び出されます。たとえば、この関数は、プロセスが中断され、その親がシャットダウンしたときに呼び出されます。プロセスにクリーンアップを実行する機会を与えます。この関数は決して戻りません。</target>
        </trans-unit>
        <trans-unit id="7d565039ea45d2e2d8bf629df70695d8e577068a" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c6ebf9fbba1927e0169999540aede92ba5d2b9d7" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;erlang#port_call-3&quot;&gt; erlang:port_call/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_call-3&quot;&gt; erlang:port_call/3&lt;/a&gt;&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="239af18064c670c227882eb2c0195d0784143a68" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;erlang#port_call-3&quot;&gt; erlang:port_call/3&lt;/a&gt;&lt;/code&gt;. It works a lot like the &lt;code&gt;control&lt;/code&gt; callback, but uses the external term format for input and output.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_call-3&quot;&gt; erlang:port_call/3&lt;/a&gt;&lt;/code&gt; から呼び出されます。これは、 &lt;code&gt;control&lt;/code&gt; コールバックとよく似ていますが、入力と出力に外部用語形式を使用します。</target>
        </trans-unit>
        <trans-unit id="ee779128abb96dcaaa77c4845eb5b58fcbdf4ab2" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;erlang#port_call-3&quot;&gt;erlang:port_call/3&lt;/a&gt;&lt;/code&gt;. It works a lot like the &lt;code&gt;control&lt;/code&gt; callback, but uses the external term format for input and output.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_call-3&quot;&gt;erlang:port_call/3&lt;/a&gt;&lt;/code&gt; から呼び出されます。これは &lt;code&gt;control&lt;/code&gt; コールバックとよく似ていますが、入力と出力に外部用語形式を使用します。</target>
        </trans-unit>
        <trans-unit id="647803d0d0c160b1b32fafd3407a185b78e69a6c" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_control-3&quot;&gt; erlang:port_control/3&lt;/a&gt;&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="9a7a6da0d32374d704f66fa64639e5942279833d" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;&lt;a href=&quot;erlang#send-2&quot;&gt; erlang:send/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt; erlang:port_command/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#send-2&quot;&gt; erlang:send/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt; erlang:port_command/2&lt;/a&gt;&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="eda5333bad3b8e6536c6e400a545bf0c68561f86" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;erlang:open_port/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:open_port/2&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="52c95806576ffd5c6e9bda3738995849c83e6d48" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;erlang:port_call/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:port_call/3&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="37967ef10d51ab9623c55cce347e8ac82ffaa69f" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;erlang:port_control/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:port_control/3&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="76a9c293f08a9964ffe8949415ea15fcd479022c" translate="yes" xml:space="preserve">
          <source>Called from &lt;code&gt;erlang:send/2&lt;/code&gt; and &lt;code&gt;erlang:port_command/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:send/2&lt;/code&gt; および &lt;code&gt;erlang:port_command/2&lt;/code&gt; から呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5b7712d2af65521477e16f6013575117d34b96c0" translate="yes" xml:space="preserve">
          <source>Called in order to close the &lt;code&gt;Listen&lt;/code&gt; handle that originally was passed from the &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/1&lt;/a&gt;&lt;/code&gt; callback.</source>
          <target state="translated">最初に &lt;code&gt;&lt;a href=&quot;#listen&quot;&gt;listen/1&lt;/a&gt;&lt;/code&gt; コールバックから渡された &lt;code&gt;Listen&lt;/code&gt; ハンドルを閉じるために呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ed0e2e44fa4e2d7ed6caea388ba567c2aadfb380" translate="yes" xml:space="preserve">
          <source>Called on behalf of &lt;code&gt;&lt;a href=&quot;erl_driver#driver_select&quot;&gt; erl_driver:driver_select&lt;/a&gt;&lt;/code&gt; when it is safe to close an event object.</source>
          <target state="translated">イベントオブジェクトを安全に閉じることができる場合に、 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_select&quot;&gt; erl_driver:driver_select&lt;/a&gt;&lt;/code&gt; に代わって呼び出されます。</target>
        </trans-unit>
        <trans-unit id="470a1c0ce98f90a6c63285d61ce7082f47f6706f" translate="yes" xml:space="preserve">
          <source>Called on behalf of &lt;code&gt;&lt;a href=&quot;erl_driver#driver_select&quot;&gt;erl_driver:driver_select&lt;/a&gt;&lt;/code&gt; when it is safe to close an event object.</source>
          <target state="translated">イベントオブジェクトを安全に閉じることができるときに &lt;code&gt;&lt;a href=&quot;erl_driver#driver_select&quot;&gt;erl_driver:driver_select&lt;/a&gt;&lt;/code&gt; の代わりに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="23ff0ae2399ea44f77132823a27ee56494ae7347" translate="yes" xml:space="preserve">
          <source>Called to instruct the manager that this agent shall be handled. This function is used when the user knows in advance which agents the manager shall handle. Note that there is an alternate way to do the same thing: Add the agent to the manager config files (see &lt;code&gt;&lt;a href=&quot;snmp_manager_config_files#agents&quot;&gt;agents.conf&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">このエージェントを処理することをマネージャーに指示するために呼び出されます。この機能は、マネージャが処理するエージェントを事前に知っている場合に使用されます。同じことを行う別の方法があることに注意してください。エージェントをマネージャー構成ファイルに追加します（ &lt;code&gt;&lt;a href=&quot;snmp_manager_config_files#agents&quot;&gt;agents.conf&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="2c4e12b2b87e916464a480eeba6c90e011990c07" translate="yes" xml:space="preserve">
          <source>Called when a driver event (specified in parameter &lt;code&gt;event&lt;/code&gt;) is signaled. This is used to help asynchronous drivers &quot;wake up&quot; when something occurs.</source>
          <target state="translated">ドライバーイベント（パラメーター &lt;code&gt;event&lt;/code&gt; で指定）が通知されたときに呼び出されます。これは、何かが発生したときに非同期ドライバーが「ウェイクアップ」するのを助けるために使用されます。</target>
        </trans-unit>
        <trans-unit id="b36813d53908741b8362c286580e5e8b637ec710" translate="yes" xml:space="preserve">
          <source>Called when a locally started handshake has completed successfully.</source>
          <target state="translated">ローカルで開始されたハンドシェイクが正常に完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8574d5472a3027867d3ec87879fb27cdaab45a80" translate="yes" xml:space="preserve">
          <source>Called when a monitored process exits. The &lt;code&gt;drv_data&lt;/code&gt; is the data associated with the port for which the process is monitored (using &lt;code&gt;&lt;a href=&quot;erl_driver#driver_monitor_process&quot;&gt; erl_driver:driver_monitor_process&lt;/a&gt;&lt;/code&gt;) and the &lt;code&gt;monitor&lt;/code&gt; corresponds to the &lt;code&gt;ErlDrvMonitor&lt;/code&gt; structure filled in when creating the monitor. The driver interface function &lt;code&gt;&lt;a href=&quot;erl_driver#driver_get_monitored_process&quot;&gt; erl_driver:driver_get_monitored_process&lt;/a&gt;&lt;/code&gt; can be used to retrieve the process ID of the exiting process as an &lt;code&gt;ErlDrvTermData&lt;/code&gt;.</source>
          <target state="translated">監視対象のプロセスが終了したときに呼び出されます。 &lt;code&gt;drv_data&lt;/code&gt; は（使用してプロセスを監視するためのポートに関連付けられたデータである &lt;code&gt;&lt;a href=&quot;erl_driver#driver_monitor_process&quot;&gt; erl_driver:driver_monitor_process&lt;/a&gt;&lt;/code&gt; ）及び &lt;code&gt;monitor&lt;/code&gt; に対応 &lt;code&gt;ErlDrvMonitor&lt;/code&gt; のモニターを作成する際に充填された構造。ドライバーインターフェイス関数 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_get_monitored_process&quot;&gt; erl_driver:driver_get_monitored_process&lt;/a&gt;&lt;/code&gt; を使用して、既存のプロセスのプロセスIDを &lt;code&gt;ErlDrvTermData&lt;/code&gt; として取得できます。</target>
        </trans-unit>
        <trans-unit id="f5f6a024fd8f77a2ea9867d6adcf09937e5b321e" translate="yes" xml:space="preserve">
          <source>Called when a monitored process exits. The &lt;code&gt;drv_data&lt;/code&gt; is the data associated with the port for which the process is monitored (using &lt;code&gt;&lt;a href=&quot;erl_driver#driver_monitor_process&quot;&gt;erl_driver:driver_monitor_process&lt;/a&gt;&lt;/code&gt;) and the &lt;code&gt;monitor&lt;/code&gt; corresponds to the &lt;code&gt;ErlDrvMonitor&lt;/code&gt; structure filled in when creating the monitor. The driver interface function &lt;code&gt;&lt;a href=&quot;erl_driver#driver_get_monitored_process&quot;&gt;erl_driver:driver_get_monitored_process&lt;/a&gt;&lt;/code&gt; can be used to retrieve the process ID of the exiting process as an &lt;code&gt;ErlDrvTermData&lt;/code&gt;.</source>
          <target state="translated">監視対象プロセスが終了したときに呼び出されます。 &lt;code&gt;drv_data&lt;/code&gt; は（使用してプロセスを監視するためのポートに関連付けられたデータである &lt;code&gt;&lt;a href=&quot;erl_driver#driver_monitor_process&quot;&gt;erl_driver:driver_monitor_process&lt;/a&gt;&lt;/code&gt; ）及び &lt;code&gt;monitor&lt;/code&gt; に対応 &lt;code&gt;ErlDrvMonitor&lt;/code&gt; のモニターを作成する際に充填された構造。ドライバー・インターフェース関数 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_get_monitored_process&quot;&gt;erl_driver:driver_get_monitored_process&lt;/a&gt;&lt;/code&gt; を使用して、既存のプロセスのプロセスIDを &lt;code&gt;ErlDrvTermData&lt;/code&gt; として取得できます。</target>
        </trans-unit>
        <trans-unit id="d67e2aa0c472d7e1f331918d874d82a46a103385" translate="yes" xml:space="preserve">
          <source>Called when a port is closed.</source>
          <target state="translated">ポートが閉じられているときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af5703e1882d09239d1d042a60353e00eb2d7742" translate="yes" xml:space="preserve">
          <source>Called when a remotely started handshake has completed successfully.</source>
          <target state="translated">リモートで開始されたハンドシェイクが正常に完了したときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="260ba11c56b3301de010c7bb46f13a8d01000aa0" translate="yes" xml:space="preserve">
          <source>Called when an Erlang process has sent data to the port. The data is pointed to by &lt;code&gt;buf&lt;/code&gt;, and is &lt;code&gt;len&lt;/code&gt; bytes. Data is sent to the port with &lt;code&gt;Port ! {self(), {command, Data}}&lt;/code&gt; or with &lt;code&gt;erlang:port_command/2&lt;/code&gt;. Depending on how the port was opened, it is to be either a list of integers &lt;code&gt;0...255&lt;/code&gt; or a binary. See &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt; erlang:port_command/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangプロセスがデータをポートに送信したときに呼び出されます。データは &lt;code&gt;buf&lt;/code&gt; によってポイントされ、 &lt;code&gt;len&lt;/code&gt; バイトです。データはポート付きの &lt;code&gt;Port ! {self(), {command, Data}}&lt;/code&gt; 送信されます！ {self（）、{command、Data}}または &lt;code&gt;erlang:port_command/2&lt;/code&gt; を使用します。ポートがどのように開かれたかに応じて、 &lt;code&gt;0...255&lt;/code&gt; の整数のリストまたは2進数のいずれかになります。 &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt; erlang:port_command/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9f79f35f10e231c1c5d46754dcc831f0124571c5" translate="yes" xml:space="preserve">
          <source>Called when an Erlang process has sent data to the port. The data is pointed to by &lt;code&gt;buf&lt;/code&gt;, and is &lt;code&gt;len&lt;/code&gt; bytes. Data is sent to the port with &lt;code&gt;Port ! {self(), {command, Data}}&lt;/code&gt; or with &lt;code&gt;erlang:port_command/2&lt;/code&gt;. Depending on how the port was opened, it is to be either a list of integers &lt;code&gt;0...255&lt;/code&gt; or a binary. See &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt;erlang:port_command/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangプロセスがデータをポートに送信したときに呼び出されます。データは &lt;code&gt;buf&lt;/code&gt; によってポイントされ、 &lt;code&gt;len&lt;/code&gt; バイトです。データはポートで &lt;code&gt;Port ! {self(), {command, Data}}&lt;/code&gt; 送信されます！{self（）、{command、Data}}または &lt;code&gt;erlang:port_command/2&lt;/code&gt; を使用。ポートがどのように開かれたかに応じて、整数のリスト &lt;code&gt;0...255&lt;/code&gt; またはバイナリになります。 &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;erlang#port_command-2&quot;&gt;erlang:port_command/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fefd076009119dd92492aabc22699c37cd1acfde" translate="yes" xml:space="preserve">
          <source>Called when document has been completely parsed.</source>
          <target state="translated">ドキュメントが完全に解析されたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d9d5c990ed44bfe60f747ede5eb6362b963aa6ee" translate="yes" xml:space="preserve">
          <source>Called when it is possible to write to a socket.</source>
          <target state="translated">ソケットへの書き込みが可能な場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="dc2fc86f42c4e06dc8824ff7ab20959ce4ee0279" translate="yes" xml:space="preserve">
          <source>Called when the driver is instantiated, when &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt; is called. The driver is to return a number &amp;gt;= 0 or a pointer, or, if the driver cannot be started, one of three error codes:</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt; が呼び出されたときに、ドライバーがインスタンス化されたときに呼び出されます。ドライバーは、0より大きい数値またはポインターを返すか、ドライバーを開始できない場合は、次の3つのエラーコードのいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="ea08619d53f9130eaa9e346bb5fa5aec56010fde" translate="yes" xml:space="preserve">
          <source>Called when the driver is instantiated, when &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; is called. The driver is to return a number &amp;gt;= 0 or a pointer, or, if the driver cannot be started, one of three error codes:</source>
          <target state="translated">ドライバーがインスタンス化されるとき、 &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; が呼び出されるときに呼び出されます。ドライバは、0以上の数値またはポインタを返すか、またはドライバを起動できない場合は、次の3つのエラーコードのいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="c7878482ce6f10c4027034352ce73f5aaa4ce9cf" translate="yes" xml:space="preserve">
          <source>Called when the driver is unloaded. A distribution driver will never be unloaded, but we include this for completeness. To be able to clean up after oneself is always a good thing.</source>
          <target state="translated">ドライバがアンロードされたときに呼び出されます。ディストリビューションドライバーがアンロードされることはありませんが、完全性を保つためにこれを含めています。自分で後始末ができることは、常に良いことです。</target>
        </trans-unit>
        <trans-unit id="e9777a1b7d37a6943bc53bf03a6d0e91d50d751f" translate="yes" xml:space="preserve">
          <source>Called when the fun is registered, in the process that holds the fun. Here the crypto key fun can do any necessary initializations. If &lt;code&gt;{ok, NewCryptoKeyFun}&lt;/code&gt; is returned, &lt;code&gt;NewCryptoKeyFun&lt;/code&gt; is registered instead of &lt;code&gt;CryptoKeyFun&lt;/code&gt;. If &lt;code&gt;{error, Term}&lt;/code&gt; is returned, the registration is aborted and &lt;code&gt;crypto_key_fun/1&lt;/code&gt; also returns &lt;code&gt;{error, Term}&lt;/code&gt;.</source>
          <target state="translated">楽しみを保持するプロセスで、楽しみが登録されたときに呼び出されます。ここで暗号鍵funは必要な初期化を行うことができます。場合 &lt;code&gt;{ok, NewCryptoKeyFun}&lt;/code&gt; 返され、 &lt;code&gt;NewCryptoKeyFun&lt;/code&gt; は、代わりに登録されて &lt;code&gt;CryptoKeyFun&lt;/code&gt; 。場合 &lt;code&gt;{error, Term}&lt;/code&gt; 戻され、登録が中止され、 &lt;code&gt;crypto_key_fun/1&lt;/code&gt; も戻り &lt;code&gt;{error, Term}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98ad7a8527ae38bbbd2d4e06002457415af632b3" translate="yes" xml:space="preserve">
          <source>Called when the key is needed for module &lt;code&gt;Module&lt;/code&gt; in the file named &lt;code&gt;Filename&lt;/code&gt;. &lt;code&gt;Mode&lt;/code&gt; is the type of crypto algorithm; currently, the only possible value is &lt;code&gt;des3_cbc&lt;/code&gt;. The call is to fail (raise an exception) if no key is available.</source>
          <target state="translated">&lt;code&gt;Filename&lt;/code&gt; という名前のファイル内のモジュール &lt;code&gt;Module&lt;/code&gt; にキーが必要なときに呼び出されます。 &lt;code&gt;Mode&lt;/code&gt; は暗号アルゴリズムのタイプです。現在、可能な値は &lt;code&gt;des3_cbc&lt;/code&gt; のみです。使用可能なキーがない場合、呼び出しは失敗します（例外が発生します）。</target>
        </trans-unit>
        <trans-unit id="0dcbf03fb42831c6723cb1715f47765453867f67" translate="yes" xml:space="preserve">
          <source>Called when the port is about to be closed, and there is data in the driver queue that must be flushed before 'stop' can be called.</source>
          <target state="translated">ポートが閉じられようとしているときに呼び出され、ドライバキューに 'stop' を呼び出す前にフラッシュしなければならないデータがある場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="4c1f621a84111ea117dcad5ab2dda0907aba7d59" translate="yes" xml:space="preserve">
          <source>Called when the port is closed, with &lt;code&gt;&lt;a href=&quot;erlang#port_close-1&quot;&gt; erlang:port_close/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;Port ! {self(), close}&lt;/code&gt;. Notice that terminating the port owner process also closes the port. If &lt;code&gt;drv_data&lt;/code&gt; is a pointer to memory allocated in &lt;code&gt;start&lt;/code&gt;, then &lt;code&gt;stop&lt;/code&gt; is the place to deallocate that memory.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;erlang#port_close-1&quot;&gt; erlang:port_close/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;Port ! {self(), close}&lt;/code&gt; 、ポートが閉じられたときに呼び出されます。{self（）、close}。ポート所有者プロセスを終了すると、ポートも閉じることに注意してください。 &lt;code&gt;drv_data&lt;/code&gt; が &lt;code&gt;start&lt;/code&gt; で割り当てられたメモリへのポインタである場合、 &lt;code&gt;stop&lt;/code&gt; はそのメモリの割り当てを解除する場所です。</target>
        </trans-unit>
        <trans-unit id="8919d79f584bde48131fa0a13624f5f0b5dd1e5e" translate="yes" xml:space="preserve">
          <source>Called when the port is closed, with &lt;code&gt;&lt;a href=&quot;erlang#port_close-1&quot;&gt;erlang:port_close/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;Port ! {self(), close}&lt;/code&gt;. Notice that terminating the port owner process also closes the port. If &lt;code&gt;drv_data&lt;/code&gt; is a pointer to memory allocated in &lt;code&gt;start&lt;/code&gt;, then &lt;code&gt;stop&lt;/code&gt; is the place to deallocate that memory.</source>
          <target state="translated">ポートが閉じたときに呼び出され、 &lt;code&gt;&lt;a href=&quot;erlang#port_close-1&quot;&gt;erlang:port_close/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;Port ! {self(), close}&lt;/code&gt; 。ポート所有者プロセスを終了すると、ポートも閉じることに注意してください。 &lt;code&gt;drv_data&lt;/code&gt; が &lt;code&gt;start&lt;/code&gt; で割り当てられたメモリへのポインタである場合、 &lt;code&gt;stop&lt;/code&gt; はそのメモリの割り当てを解除する場所です。</target>
        </trans-unit>
        <trans-unit id="bce5d5b2decf756f58e8642c565207befb9d1e4c" translate="yes" xml:space="preserve">
          <source>Called when there is something to read from a socket.</source>
          <target state="translated">ソケットから読み込むものがある場合に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="af3ef6e1f6da39c57e0246dc6e4aad3b06e17a5b" translate="yes" xml:space="preserve">
          <source>Called whenever the port is written to. If it is &lt;code&gt;NULL&lt;/code&gt;, the &lt;code&gt;output&lt;/code&gt; function is called instead. This function is faster than &lt;code&gt;output&lt;/code&gt;, as it takes an &lt;code&gt;ErlIOVec&lt;/code&gt; directly, which requires no copying of the data. The port is to be in binary mode, see &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポートが書き込まれるたびに呼び出されます。 &lt;code&gt;NULL&lt;/code&gt; の場合、代わりに &lt;code&gt;output&lt;/code&gt; 関数が呼び出されます。この関数は、データのコピーを必要としない &lt;code&gt;ErlIOVec&lt;/code&gt; を直接取得するため、 &lt;code&gt;output&lt;/code&gt; よりも高速です。ポートはバイナリモードになります &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt; erlang:open_port/2&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="cb06eda8927a232da24c20e732e3e2949f2b101f" translate="yes" xml:space="preserve">
          <source>Called whenever the port is written to. If it is &lt;code&gt;NULL&lt;/code&gt;, the &lt;code&gt;output&lt;/code&gt; function is called instead. This function is faster than &lt;code&gt;output&lt;/code&gt;, as it takes an &lt;code&gt;ErlIOVec&lt;/code&gt; directly, which requires no copying of the data. The port is to be in binary mode, see &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポートが書き込まれるたびに呼び出されます。 &lt;code&gt;NULL&lt;/code&gt; の場合、代わりに &lt;code&gt;output&lt;/code&gt; 関数が呼び出されます。この関数は、データのコピーを必要としない &lt;code&gt;ErlIOVec&lt;/code&gt; を直接取るので、 &lt;code&gt;output&lt;/code&gt; よりも高速です。ポートはバイナリモードにする必要があります &lt;code&gt;&lt;a href=&quot;erlang#open_port-2&quot;&gt;erlang:open_port/2&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="156f735aabd8995d92638174e190f108bd8cf6cb" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;erlang#halt-1&quot;&gt; erlang:halt/1&lt;/a&gt;&lt;/code&gt; with a string argument still produces a crash dump. On Unix systems, sending an emulator process a &lt;code&gt;SIGUSR1&lt;/code&gt; signal also forces a crash dump.</source>
          <target state="translated">文字列引数を指定して &lt;code&gt;&lt;a href=&quot;erlang#halt-1&quot;&gt; erlang:halt/1&lt;/a&gt;&lt;/code&gt; を呼び出すと、クラッシュダンプが生成されます。Unixシステムでは、エミュレータプロセスに &lt;code&gt;SIGUSR1&lt;/code&gt; シグナルを送信すると、クラッシュダンプも強制されます。</target>
        </trans-unit>
        <trans-unit id="8c4da0ebceae11eff6b7919b2ddd46f27587b04d" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;&lt;a href=&quot;erlang#halt-1&quot;&gt;erlang:halt/1&lt;/a&gt;&lt;/code&gt; with a string argument still produces a crash dump. On Unix systems, sending an emulator process a &lt;code&gt;SIGUSR1&lt;/code&gt; signal also forces a crash dump.</source>
          <target state="translated">文字列引数を指定して &lt;code&gt;&lt;a href=&quot;erlang#halt-1&quot;&gt;erlang:halt/1&lt;/a&gt;&lt;/code&gt; を呼び出すと、依然としてクラッシュダンプが生成されます。Unixシステムでは、エミュレータプロセスに &lt;code&gt;SIGUSR1&lt;/code&gt; シグナルを送信すると、クラッシュダンプも強制されます。</target>
        </trans-unit>
        <trans-unit id="655a22092d77d88145d5c50ca50e242cddc91b3d" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;demonitor(MonitorRef, [flush])&lt;/code&gt; is equivalent to the following, but more efficient:</source>
          <target state="translated">&lt;code&gt;demonitor(MonitorRef, [flush])&lt;/code&gt; 呼び出しは次と同等ですが、より効率的です。</target>
        </trans-unit>
        <trans-unit id="754ff095185e90c1599a6e196b476c1470159daf" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;erlang:system_time()&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt; erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;+&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt; erlang:time_offset()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:system_time()&lt;/code&gt; の呼び出しは、 &lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt; erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt; erlang:time_offset()&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="8abf86e315d47dada23e450fdd1a6d2f9ae320c2" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;erlang:system_time()&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt;erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;+&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt;erlang:time_offset()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:system_time()&lt;/code&gt; の呼び出しは &lt;code&gt;&lt;a href=&quot;#monotonic_time-0&quot;&gt;erlang:monotonic_time()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;+&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt;erlang:time_offset()&lt;/a&gt;&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="2d46cab9ce133f988a0314784232f1c7f5a5b51d" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;erlang:system_time(Unit)&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt; erlang:convert_time_unit&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;erlang:system_time()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;, native, Unit)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:system_time(Unit)&lt;/code&gt; の呼び出しは、 &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt; erlang:convert_time_unit&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;erlang:system_time()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;, native, Unit)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="8b083a75a2460c0a8048c36cd9fefa43e466519e" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;erlang:system_time(Unit)&lt;/code&gt; is equivalent to &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt;erlang:convert_time_unit&lt;/a&gt;&lt;/code&gt;&lt;code&gt;(&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;erlang:system_time()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;, native, Unit)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:system_time(Unit)&lt;/code&gt; の呼び出しは、 &lt;code&gt;&lt;a href=&quot;#convert_time_unit-3&quot;&gt;erlang:convert_time_unit&lt;/a&gt;&lt;/code&gt; &lt;code&gt;(&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;erlang:system_time()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;, native, Unit)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="ac8161866033e5fba00c9f967a358dd87e252b77" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;merl:print(Call)&lt;/code&gt; will then print the following code:</source>
          <target state="translated">呼び出し &lt;code&gt;merl:print(Call)&lt;/code&gt; 、次のコードを出力します：</target>
        </trans-unit>
        <trans-unit id="2cedca3701bb5e353b3d951a1078a1fe4f284c28" translate="yes" xml:space="preserve">
          <source>Calling &lt;code&gt;os:system_time(Unit)&lt;/code&gt; is equivalent to &lt;code&gt;erlang:convert_time_unit&lt;/code&gt;(&lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;os:system_time()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;, native, Unit)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;os:system_time(Unit)&lt;/code&gt; を呼び出すことは、 &lt;code&gt;erlang:convert_time_unit&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;#system_time-0&quot;&gt;os:system_time()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;, native, Unit)&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="afeabfe36eaf236b85f9317a022e3a32b2c67b0d" translate="yes" xml:space="preserve">
          <source>Calling and applying a fun does not involve any hash-table lookup. A fun contains an (indirect) pointer to the function that implements the fun.</source>
          <target state="translated">funの呼び出しや適用には、ハッシュテーブルの参照は含まれていません。funには、その関数を実装した関数への(間接的な)ポインタが含まれています。</target>
        </trans-unit>
        <trans-unit id="90124b2b5c5e8b577f502d3a36088e606891a366" translate="yes" xml:space="preserve">
          <source>Calling or applying a fun (&lt;code&gt;Fun()&lt;/code&gt;, &lt;code&gt;apply(Fun, [])&lt;/code&gt;) is about &lt;strong&gt;three times&lt;/strong&gt; as expensive as calling a local function.</source>
          <target state="translated">fun（ &lt;code&gt;Fun()&lt;/code&gt; 、 &lt;code&gt;apply(Fun, [])&lt;/code&gt; ）の呼び出しまたは適用は、ローカル関数を呼び出す場合の約&lt;strong&gt;3倍の&lt;/strong&gt;コストがかかります。</target>
        </trans-unit>
        <trans-unit id="1bdcae36deade4d4d3da84b2d5104437391e84c5" translate="yes" xml:space="preserve">
          <source>Calling the function with &lt;code&gt;{MonitorPid, Options}&lt;/code&gt; as argument is the same as calling &lt;code&gt;&lt;a href=&quot;#system_monitor-2&quot;&gt; erlang:system_monitor(MonitorPid, Options)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{MonitorPid, Options}&lt;/code&gt; を引数として関数を呼び出すことは、 &lt;code&gt;&lt;a href=&quot;#system_monitor-2&quot;&gt; erlang:system_monitor(MonitorPid, Options)&lt;/a&gt;&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="4977f905b190f9bbe202e2e85576e00836e9734e" translate="yes" xml:space="preserve">
          <source>Calling the function with &lt;code&gt;{MonitorPid, Options}&lt;/code&gt; as argument is the same as calling &lt;code&gt;&lt;a href=&quot;#system_monitor-2&quot;&gt;erlang:system_monitor(MonitorPid,Options)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">引数として &lt;code&gt;{MonitorPid, Options}&lt;/code&gt; を使用して関数を呼び出すことは、 &lt;code&gt;&lt;a href=&quot;#system_monitor-2&quot;&gt;erlang:system_monitor(MonitorPid,Options)&lt;/a&gt;&lt;/code&gt; を呼び出すことと同じです。</target>
        </trans-unit>
        <trans-unit id="4b42cc7ad99418c1a03de8a69add23747a547065" translate="yes" xml:space="preserve">
          <source>Calling this function will trigger the &quot;user&quot; trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing all the integer()'s and string()'s provided, as well as any user tag set in the current process.</source>
          <target state="translated">この関数を呼び出すと、dyntrace NIF モジュール内の &quot;user&quot; トレースプローブ user_trace_i4s4 が起動し、提供されたすべての整数()と文字列()を含むトレースメッセージと、現在のプロセスで設定された任意のユーザタグが送信されます。</target>
        </trans-unit>
        <trans-unit id="444f79602e491b38e25cb8c13003f56f8345ff63" translate="yes" xml:space="preserve">
          <source>Calling this function will trigger the &quot;user&quot; trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer or string parameter in the first integer/string field.</source>
          <target state="translated">この関数を呼び出すと、dyntrace NIFモジュール内の &quot;user &quot;トレースプローブuser_trace_i4s4がトリガされ、最初の整数/文字列フィールドにユーザタグと整数または文字列パラメータを含むトレースメッセージが送信されます。</target>
        </trans-unit>
        <trans-unit id="ca84bd13b57ed20dc137036dea97bc867dd9acff" translate="yes" xml:space="preserve">
          <source>Calling this function will trigger the &quot;user&quot; trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters, as in &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">この関数を呼び出すと、dyntrace NIFモジュールの「ユーザー」トレースプローブuser_trace_i4s4がトリガーされ、ユーザータグとinteger（）またはstring（）パラメーターをそれぞれのタイプの最初のフィールドとして含むトレースメッセージが送信されます。 integer（）パラメータは、 &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; のように、string（）パラメータの前に置く必要があります。</target>
        </trans-unit>
        <trans-unit id="3d6504b8ed29fe9b52bfa13411a0abbd154f8e3e" translate="yes" xml:space="preserve">
          <source>Calling this function will trigger the &quot;user&quot; trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message containing the user tag and the integer() or string() parameters as the first fields of respective type. integer() parameters should be put before any string() parameters. I.e. &lt;code&gt;p(1,&quot;Hello&quot;)&lt;/code&gt; is ok, as is &lt;code&gt;p(1,1)&lt;/code&gt; and &lt;code&gt;p(&quot;Hello&quot;,&quot;Again&quot;)&lt;/code&gt;, but not &lt;code&gt;p(&quot;Hello&quot;,1)&lt;/code&gt;.</source>
          <target state="translated">この関数を呼び出すと、dyntrace NIFモジュールの「ユーザー」トレースプローブuser_trace_i4s4がトリガーされ、ユーザータグとinteger（）またはstring（）パラメーターをそれぞれのタイプの最初のフィールドとして含むトレースメッセージが送信されます。integer（）パラメータは、string（）パラメータの前に置く必要があります。つまり、 &lt;code&gt;p(1,&quot;Hello&quot;)&lt;/code&gt; は問題ありません &lt;code&gt;p(&quot;Hello&quot;,1)&lt;/code&gt; &lt;code&gt;p(1,1)&lt;/code&gt; および &lt;code&gt;p(&quot;Hello&quot;,&quot;Again&quot;)&lt;/code&gt; 同様ですが、p（ &quot;Hello&quot;、1）は問題ありません。</target>
        </trans-unit>
        <trans-unit id="ba80ef3622f6d7266790c78fbbdd6b4544d6f3ea" translate="yes" xml:space="preserve">
          <source>Calling this function will trigger the &quot;user&quot; trace probe user_trace_i4s4 in the dyntrace NIF module, sending a trace message only containing the user tag and zeroes/empty strings in all other fields.</source>
          <target state="translated">この関数を呼び出すと、dyntrace NIFモジュールの &quot;user &quot;トレースプローブuser_trace_i4s4がトリガされ、ユーザータグのみを含むトレースメッセージが送信され、他のすべてのフィールドにはゼロ/空の文字列が送信されます。</target>
        </trans-unit>
        <trans-unit id="fc31c095d153129fc853cf06c728a75bf3b46c60" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;&lt;a href=&quot;#resolve-3&quot;&gt;resolve/*&lt;/a&gt;&lt;/code&gt; with the same arguments and filters the result, so &lt;code&gt;Opts&lt;/code&gt; is described for those functions.</source>
          <target state="translated">同じ引数で &lt;code&gt;&lt;a href=&quot;#resolve-3&quot;&gt;resolve/*&lt;/a&gt;&lt;/code&gt; を呼び出し、結果をフィルター処理するため、それらの関数の &lt;code&gt;Opts&lt;/code&gt; について説明します。</target>
        </trans-unit>
        <trans-unit id="64e4f69ad9125f63ba8df8f7d7d250f3cecda4ae" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;F(K, V, AccIn)&lt;/code&gt; for every &lt;code&gt;K&lt;/code&gt; to value &lt;code&gt;V&lt;/code&gt; association in &lt;code&gt;MapOrIter&lt;/code&gt; in any order. Function &lt;code&gt;fun F/3&lt;/code&gt; must return a new accumulator, which is passed to the next successive call. This function returns the final value of the accumulator. The initial accumulator value &lt;code&gt;Init&lt;/code&gt; is returned if the map is empty.</source>
          <target state="translated">呼び出し &lt;code&gt;F(K, V, AccIn)&lt;/code&gt; すべてのための &lt;code&gt;K&lt;/code&gt; 値に &lt;code&gt;V&lt;/code&gt; の中の関連 &lt;code&gt;MapOrIter&lt;/code&gt; 任意の順序です。関数 &lt;code&gt;fun F/3&lt;/code&gt; は新しいアキュムレータを返す必要があり、それは次の連続した呼び出しに渡されます。この関数は、アキュムレータの最終値を返します。マップが空の場合、初期アキュムレータ値 &lt;code&gt;Init&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="2c22c12363a38985d309e6b7686e339831be7ae7" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;F(Key, Value, AccIn)&lt;/code&gt; for every &lt;code&gt;Key&lt;/code&gt; to value &lt;code&gt;Value&lt;/code&gt; association in &lt;code&gt;MapOrIter&lt;/code&gt; in any order. Function &lt;code&gt;fun F/3&lt;/code&gt; must return a new accumulator, which is passed to the next successive call. This function returns the final value of the accumulator. The initial accumulator value &lt;code&gt;Init&lt;/code&gt; is returned if the map is empty.</source>
          <target state="translated">呼び出し &lt;code&gt;F(Key, Value, AccIn)&lt;/code&gt; すべてのための &lt;code&gt;Key&lt;/code&gt; 値への &lt;code&gt;Value&lt;/code&gt; 内の関連 &lt;code&gt;MapOrIter&lt;/code&gt; 任意の順序では。関数 &lt;code&gt;fun F/3&lt;/code&gt; は、次の連続する呼び出しに渡される新しいアキュムレータを返す必要があります。この関数は、アキュムレータの最終値を返します。マップが空の場合、初期アキュムレータ値 &lt;code&gt;Init&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4295c8a20ece7cf06d43d6ebf25e275c406c6e5f" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun(Elem)&lt;/code&gt; for each element &lt;code&gt;Elem&lt;/code&gt; in &lt;code&gt;List&lt;/code&gt;. This function is used for its side effects and the evaluation order is defined to be the same as the order of the elements in the list.</source>
          <target state="translated">呼び出し &lt;code&gt;Fun(Elem)&lt;/code&gt; 各要素について &lt;code&gt;Elem&lt;/code&gt; で &lt;code&gt;List&lt;/code&gt; 。この関数は副作用のために使用され、評価順序はリスト内の要素の順序と同じになるように定義されています。</target>
        </trans-unit>
        <trans-unit id="63f2bd2bc7b570ff8e3f588bc3a35e7f39bb021c" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun(Elem)&lt;/code&gt; on successive elements &lt;code&gt;Elem&lt;/code&gt; of &lt;code&gt;List1&lt;/code&gt;. &lt;code&gt;Fun/1&lt;/code&gt; must return either a Boolean or a tuple &lt;code&gt;{true, Value}&lt;/code&gt;. The function returns the list of elements for which &lt;code&gt;Fun&lt;/code&gt; returns a new value, where a value of &lt;code&gt;true&lt;/code&gt; is synonymous with &lt;code&gt;{true, Elem}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;List1&lt;/code&gt; の連続した要素 &lt;code&gt;Elem&lt;/code&gt; で &lt;code&gt;Fun(Elem)&lt;/code&gt; を呼び出します。 &lt;code&gt;Fun/1&lt;/code&gt; はブール値またはタプル &lt;code&gt;{true, Value}&lt;/code&gt; 返す必要があります。この関数は、 &lt;code&gt;Fun&lt;/code&gt; が新しい値を返す要素のリストを返します &lt;code&gt;true&lt;/code&gt; 値は &lt;code&gt;{true, Elem}&lt;/code&gt; と同義です。</target>
        </trans-unit>
        <trans-unit id="50d89c32ea4d0c6ee1b26f9c66ad9e11c8879726" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun(Elem, AccIn)&lt;/code&gt; on successive elements &lt;code&gt;A&lt;/code&gt; of &lt;code&gt;List&lt;/code&gt;, starting with &lt;code&gt;AccIn == Acc0&lt;/code&gt;. &lt;code&gt;Fun/2&lt;/code&gt; must return a new accumulator, which is passed to the next call. The function returns the final value of the accumulator. &lt;code&gt;Acc0&lt;/code&gt; is returned if the list is empty.</source>
          <target state="translated">コールの &lt;code&gt;Fun(Elem, AccIn)&lt;/code&gt; 連続した要素上の &lt;code&gt;A&lt;/code&gt; の &lt;code&gt;List&lt;/code&gt; から始まる、 &lt;code&gt;AccIn == Acc0&lt;/code&gt; 。 &lt;code&gt;Fun/2&lt;/code&gt; は次の呼び出しに渡される新しいアキュムレータを返す必要があります。関数は、アキュムレータの最終値を返します。リストが空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4d14f785e84c0e45ac023a87056c299dcc94c604" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun(Elem, AccIn)&lt;/code&gt; on successive elements of the cache, starting with &lt;code&gt;AccIn == Acc0&lt;/code&gt;. &lt;code&gt;Fun/2&lt;/code&gt; must return a new accumulator, which is passed to the next call. The function returns the final value of the accumulator. &lt;code&gt;Acc0&lt;/code&gt; is returned if the cache is empty.</source>
          <target state="translated">呼び出し &lt;code&gt;Fun(Elem, AccIn)&lt;/code&gt; 始まる、キャッシュの連続した要素に &lt;code&gt;AccIn == Acc0&lt;/code&gt; 。 &lt;code&gt;Fun/2&lt;/code&gt; は次の呼び出しに渡される新しいアキュムレータを返す必要があります。関数は、アキュムレータの最終値を返します。キャッシュが空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="d85b7bf8f7b8acf4c9a5d164bbe2b412bc74ce98" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun(FileInArchive, GetInfo, GetBin, AccIn)&lt;/code&gt; on successive files in the &lt;code&gt;Archive&lt;/code&gt;, starting with &lt;code&gt;AccIn == Acc0&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;Fun(FileInArchive, GetInfo, GetBin, AccIn)&lt;/code&gt; 内の連続ファイルに &lt;code&gt;Archive&lt;/code&gt; から始まる、 &lt;code&gt;AccIn == Acc0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ecb1b12376680c06a8dcd6a14c87f88b97c0f362" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun&lt;/code&gt; on successive keys and values of &lt;code&gt;Orddict1&lt;/code&gt; tvo return a new value for each key.</source>
          <target state="translated">連続するキーで &lt;code&gt;Fun&lt;/code&gt; を呼び出し、 &lt;code&gt;Orddict1&lt;/code&gt; tvoの値は、各キーの新しい値を返します。</target>
        </trans-unit>
        <trans-unit id="41cc957320ee93c3d6a8d2c0cf887c390c051f0c" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun&lt;/code&gt; on successive keys and values of &lt;code&gt;Orddict&lt;/code&gt; together with an extra argument &lt;code&gt;Acc&lt;/code&gt; (short for accumulator). &lt;code&gt;Fun&lt;/code&gt; must return a new accumulator that is passed to the next call. &lt;code&gt;Acc0&lt;/code&gt; is returned if the list is empty.</source>
          <target state="translated">&lt;code&gt;Orddict&lt;/code&gt; の連続するキーと値に対して追加の引数 &lt;code&gt;Acc&lt;/code&gt; （アキュムレータの略）とともに &lt;code&gt;Fun&lt;/code&gt; を呼び出します。 &lt;code&gt;Fun&lt;/code&gt; は、次の呼び出しに渡される新しいアキュムレータを返す必要があります。リストが空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="db2c15c0e80df0b70d2a4c08c9328f07d292a334" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun&lt;/code&gt; on successive keys and values of dictionary &lt;code&gt;Dict1&lt;/code&gt; to return a new value for each key. The evaluation order is undefined.</source>
          <target state="translated">連続するキーと辞書 &lt;code&gt;Dict1&lt;/code&gt; の値で &lt;code&gt;Fun&lt;/code&gt; を呼び出し、各キーの新しい値を返します。評価順序は未定義です。</target>
        </trans-unit>
        <trans-unit id="51e98c878f8461c82b19b807000534c1ee895d35" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Fun&lt;/code&gt; on successive keys and values of dictionary &lt;code&gt;Dict&lt;/code&gt; together with an extra argument &lt;code&gt;Acc&lt;/code&gt; (short for accumulator). &lt;code&gt;Fun&lt;/code&gt; must return a new accumulator that is passed to the next call. &lt;code&gt;Acc0&lt;/code&gt; is returned if the dictionary is empty. The evaluation order is undefined.</source>
          <target state="translated">追加の引数 &lt;code&gt;Acc&lt;/code&gt; （アキュムレータの &lt;code&gt;Dict&lt;/code&gt; とともに辞書Dictの連続するキーと値で &lt;code&gt;Fun&lt;/code&gt; を呼び出します。 &lt;code&gt;Fun&lt;/code&gt; は、次の呼び出しに渡される新しいアキュムレータを返す必要があります。辞書が空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。評価順序は未定義です。</target>
        </trans-unit>
        <trans-unit id="1e38b9bc9aa02fa070ce4650030edfd32a81b7dd" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Function&lt;/code&gt; on successive answers to the query handle together with an extra argument &lt;code&gt;AccIn&lt;/code&gt;. The query handle and the function are evaluated in the calling process. &lt;code&gt;Function&lt;/code&gt; must return a new accumulator, which is passed to the next call. &lt;code&gt;Acc0&lt;/code&gt; is returned if there are no answers to the query handle.</source>
          <target state="translated">追加の引数 &lt;code&gt;AccIn&lt;/code&gt; とともに、クエリハンドルに対する連続した応答で &lt;code&gt;Function&lt;/code&gt; を呼び出します。クエリハンドルと関数は、呼び出しプロセスで評価されます。 &lt;code&gt;Function&lt;/code&gt; は、次の呼び出しに渡される新しいアキュムレータを返す必要があります。クエリハンドルに対する応答がない場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="411261c708a55893631cad145cf652a3f25bc6dd" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;Function&lt;/code&gt; on successive elements of table &lt;code&gt;Name&lt;/code&gt; together with an extra argument &lt;code&gt;AccIn&lt;/code&gt;. The table elements are traversed in unspecified order. &lt;code&gt;Function&lt;/code&gt; must return a new accumulator that is passed to the next call. &lt;code&gt;Acc0&lt;/code&gt; is returned if the table is empty.</source>
          <target state="translated">追加の引数 &lt;code&gt;AccIn&lt;/code&gt; とともに、テーブル &lt;code&gt;Name&lt;/code&gt; の連続する要素で &lt;code&gt;Function&lt;/code&gt; を呼び出します。テーブル要素は、不特定の順序でトラバースされます。 &lt;code&gt;Function&lt;/code&gt; は、次の呼び出しに渡される新しいアキュムレータを返す必要があります。テーブルが空の場合、 &lt;code&gt;Acc0&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="e4d0f89deb9513a8ea8d66e61b19ec50cb6a197f" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;erlang:apply(Func, Args)&lt;/code&gt; surrounded by &lt;code&gt;trace([start, ...])&lt;/code&gt; and &lt;code&gt;trace(stop)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;trace([start, ...])&lt;/code&gt; と &lt;code&gt;trace(stop)&lt;/code&gt; で囲まれた &lt;code&gt;erlang:apply(Func, Args)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="c8e905cfa5d08f37d1d656135714c1381b168281" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:activity(AccessContext, Fun, Args, AccessMod)&lt;/code&gt;, where &lt;code&gt;AccessMod&lt;/code&gt; is the default access callback module obtained by &lt;code&gt;mnesia:system_info(access_module)&lt;/code&gt;. &lt;code&gt;Args&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt; (empty list).</source>
          <target state="translated">コールの &lt;code&gt;mnesia:activity(AccessContext, Fun, Args, AccessMod)&lt;/code&gt; 、 &lt;code&gt;AccessMod&lt;/code&gt; はして得られたデフォルトのアクセスコールバックモジュールです &lt;code&gt;mnesia:system_info(access_module)&lt;/code&gt; 。 &lt;code&gt;Args&lt;/code&gt; のデフォルトは &lt;code&gt;[]&lt;/code&gt; （空のリスト）です。</target>
        </trans-unit>
        <trans-unit id="7ba5ad987837e04f29a6e17ab4165c3bf8a13ef5" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:async_dirty(Fun, Args)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:async_dirty(Fun, Args)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="ffcbed2136c4dbb9cb540ca3e3bb945d48a84489" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:delete(Tab, Key, write)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:delete(Tab, Key, write)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="6cd2ad960a91e2c7b84aad8b8cab2b4af89af1d4" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:delete_object(Tab, Record, write)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Record)&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;mnesia:delete_object(Tab, Record, write)&lt;/code&gt; 、 &lt;code&gt;Tab&lt;/code&gt; ある &lt;code&gt;element(1, Record)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b1619836284281d3b4ace7f8138860d37a317d20" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:dirty_delete(Tab, Key)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_delete(Tab, Key)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="f7eff8e0d0f21895a3712d8b82ab68aad9ff93c2" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:dirty_delete_object(Tab, Record)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Record)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_delete_object(Tab, Record)&lt;/code&gt; 呼び出します。ここで、 &lt;code&gt;Tab&lt;/code&gt; は &lt;code&gt;element(1, Record)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b968f64643fdd3ef4196ca7f2353074d34a25592" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:dirty_match_object(Tab, Pattern)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Pattern)&lt;/code&gt;.</source>
          <target state="translated">呼び出し &lt;code&gt;mnesia:dirty_match_object(Tab, Pattern)&lt;/code&gt; 、 &lt;code&gt;Tab&lt;/code&gt; ある &lt;code&gt;element(1, Pattern)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="dc9bba8191f80d74baf71dc1c6ce5482c73891a5" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:dirty_read(Tab, Key)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:dirty_read(Tab, Key)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="672698b739738396e1aaa279f1425416fa4ed4d3" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:dirty_update_counter(Tab, Key, Incr)&lt;/code&gt;.</source>
          <target state="translated">通話の &lt;code&gt;mnesia:dirty_update_counter(Tab, Key, Incr)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f15de5c4989490ba445d84120b63ae4fef3a10da" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:dirty_write(Tab, Record)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Record)&lt;/code&gt;.</source>
          <target state="translated">通話 &lt;code&gt;mnesia:dirty_write(Tab, Record)&lt;/code&gt; 、 &lt;code&gt;Tab&lt;/code&gt; ある &lt;code&gt;element(1, Record)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a49f85d237c7a52c5025bd7a45bcefecee838aed" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:ets(Fun, Args)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:ets(Fun, Args)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="d1e1b27f2b3d32c30f1a9af2546f7ff28be30d84" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:install_fallback(Opaque, Args)&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; is &lt;code&gt;[{scope, global}, {module, BackupMod}]&lt;/code&gt;.</source>
          <target state="translated">通話 &lt;code&gt;mnesia:install_fallback(Opaque, Args)&lt;/code&gt; 、 &lt;code&gt;Args&lt;/code&gt; のがある &lt;code&gt;[{scope, global}, {module, BackupMod}]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="adefbd4d29b6f99f9c5284fcea99a93af40e2354" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:install_fallback(Opaque, Args)&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; is &lt;code&gt;[{scope, global}]&lt;/code&gt;.</source>
          <target state="translated">通話 &lt;code&gt;mnesia:install_fallback(Opaque, Args)&lt;/code&gt; 、 &lt;code&gt;Args&lt;/code&gt; のがある &lt;code&gt;[{scope, global}]&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6371048f46424da76665133d09722d29e17eb95d" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:match_object(Tab, Pattern, read)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Pattern)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:match_object(Tab, Pattern, read)&lt;/code&gt; 呼び出します。ここで、 &lt;code&gt;Tab&lt;/code&gt; は &lt;code&gt;element(1, Pattern)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="506bd136b0f38c6b5c4e9aba7994479cbf8607c2" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:sync_dirty(Fun, Args)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:sync_dirty(Fun, Args)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="4768e4194eaa19668e98e8297432714da38f80fe" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:sync_transaction(Fun, Args, Retries)&lt;/code&gt;. Notice that the result from &lt;code&gt;Fun&lt;/code&gt; is returned if the transaction is successful (atomic), otherwise the function exits with an abort reason.</source>
          <target state="translated">&lt;code&gt;mnesia:sync_transaction(Fun, Args, Retries)&lt;/code&gt; 呼び出します。トランザクションが成功した場合（アトミック）、 &lt;code&gt;Fun&lt;/code&gt; の結果が返されることに注意してください。そうでない場合、関数は中止理由で終了します。</target>
        </trans-unit>
        <trans-unit id="f4238a5e661c7a2d85c9a77b9854e4b9f7ca29a9" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:transaction(Fun, Args, Retries)&lt;/code&gt;. Notice that the result from &lt;code&gt;Fun&lt;/code&gt; is returned if the transaction is successful (atomic), otherwise the function exits with an abort reason.</source>
          <target state="translated">&lt;code&gt;mnesia:transaction(Fun, Args, Retries)&lt;/code&gt; 呼び出します。トランザクションが成功した場合（アトミック）、 &lt;code&gt;Fun&lt;/code&gt; の結果が返されることに注意してください。そうでない場合、関数は中止理由で終了します。</target>
        </trans-unit>
        <trans-unit id="4bef8126b535186f1c6f440c4f89eb4f6b6acd97" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;mnesia:transform_table(Tab, Fun, NewAttributeList, RecName)&lt;/code&gt;, where &lt;code&gt;RecName&lt;/code&gt; is &lt;code&gt;mnesia:table_info(Tab, record_name)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mnesia:transform_table(Tab, Fun, NewAttributeList, RecName)&lt;/code&gt; 呼び出します。ここで、 &lt;code&gt;RecName&lt;/code&gt; は &lt;code&gt;mnesia:table_info(Tab, record_name)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8f8dac520c4ed465440262ceedf36f6b5ee392b4" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;names(Host)&lt;/code&gt; for all hosts that are specified in the Erlang host file &lt;code&gt;.hosts.erlang&lt;/code&gt;, collects the replies, and then evaluates &lt;code&gt;ping(Node)&lt;/code&gt; on all those nodes. Returns the list of all nodes that are successfully pinged.</source>
          <target state="translated">Erlangホストファイル &lt;code&gt;.hosts.erlang&lt;/code&gt; で指定されているすべてのホストの &lt;code&gt;names(Host)&lt;/code&gt; を呼び出し、応答を収集してから、それらすべての &lt;code&gt;ping(Node)&lt;/code&gt; を評価します。pingが成功したすべてのノードのリストを返します。</target>
        </trans-unit>
        <trans-unit id="6f89caf1a58d70de4bc1545d4d2c63f722e1134d" translate="yes" xml:space="preserve">
          <source>Calls &lt;code&gt;pseudo(Master, ServerList)&lt;/code&gt;. If you want to start a node from the command line and set up a number of pseudo servers, an Erlang runtime system can be started as follows:</source>
          <target state="translated">&lt;code&gt;pseudo(Master, ServerList)&lt;/code&gt; 呼び出します。コマンドラインからノードを起動し、いくつかの疑似サーバーをセットアップする場合は、Erlangランタイムシステムを次のように起動できます。</target>
        </trans-unit>
        <trans-unit id="2fd282143317f0c95d38258aa5488afaefacb19b" translate="yes" xml:space="preserve">
          <source>Calls a fun, passing the elements in &lt;code&gt;Args&lt;/code&gt; as arguments.</source>
          <target state="translated">&lt;code&gt;Args&lt;/code&gt; の要素を引数として渡して、funを呼び出します。</target>
        </trans-unit>
        <trans-unit id="bc1df90caee2a0f744537886d1a4a5d884e3a1f0" translate="yes" xml:space="preserve">
          <source>Calls between functions are either  &lt;strong id=&quot;local_call&quot;&gt;local calls&lt;/strong&gt; like &lt;code&gt;f()&lt;/code&gt;, or  &lt;strong id=&quot;external_call&quot;&gt;external calls&lt;/strong&gt; like &lt;code&gt;m:f()&lt;/code&gt;.  &lt;strong id=&quot;module_data&quot;&gt;Module data&lt;/strong&gt;, which are extracted from BEAM files, include local functions, exported functions, local calls and external calls. By default, calls to built-in functions (BIF) are ignored, but if the option &lt;code&gt;builtins&lt;/code&gt;, accepted by some of this module's functions, is set to &lt;code&gt;true&lt;/code&gt;, calls to BIFs are included as well. It is the analyzing OTP version that decides what functions are BIFs. Functional objects are assumed to be called where they are created (and nowhere else).  &lt;strong id=&quot;unresolved_call&quot;&gt;Unresolved calls&lt;/strong&gt; are calls to &lt;code&gt;apply&lt;/code&gt; or &lt;code&gt;spawn&lt;/code&gt; with variable module, variable function, or variable arguments. Examples are &lt;code&gt;M:F(a)&lt;/code&gt;, &lt;code&gt;apply(M,&amp;nbsp;f,&amp;nbsp;[a])&lt;/code&gt;, and &lt;code&gt;spawn(m,&amp;nbsp;f(),&amp;nbsp;Args)&lt;/code&gt;. Unresolved calls are represented by calls where variable modules have been replaced with the atom &lt;code&gt;'$M_EXPR'&lt;/code&gt;, variable functions have been replaced with the atom &lt;code&gt;'$F_EXPR'&lt;/code&gt;, and variable number of arguments have been replaced with the number &lt;code&gt;-1&lt;/code&gt;. The above mentioned examples are represented by calls to &lt;code&gt;'$M_EXPR':'$F_EXPR'/1&lt;/code&gt;, &lt;code&gt;'$M_EXPR':f/1&lt;/code&gt;, and &lt;code&gt;m:'$F_EXPR'/-1&lt;/code&gt;. The unresolved calls are a subset of the external calls.</source>
          <target state="translated">関数間の呼び出しがされているか、 &lt;strong id=&quot;local_call&quot;&gt;ローカル電話&lt;/strong&gt;など &lt;code&gt;f()&lt;/code&gt; 、または &lt;strong id=&quot;external_call&quot;&gt;外部コール&lt;/strong&gt;など &lt;code&gt;m:f()&lt;/code&gt; 。 BEAMファイルから抽出された&lt;strong id=&quot;module_data&quot;&gt;モジュールデータ&lt;/strong&gt;には、ローカル関数、エクスポートされた関数、ローカル呼び出し、および外部呼び出しが含まれます。デフォルトでは、組み込み関数（BIF）の呼び出しは無視されますが、このモジュールの関数の一部で受け入れられるオプション &lt;code&gt;builtins&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合、BIFの呼び出しも含まれます。どの機能がBIFであるかを決定するのは、分析OTPバージョンです。機能オブジェクトは、それらが作成された場所（および他の場所）では呼び出されないと想定されています。 &lt;strong id=&quot;unresolved_call&quot;&gt;未解決の呼び出し&lt;/strong&gt;は、 &lt;code&gt;apply&lt;/code&gt; または &lt;code&gt;spawn&lt;/code&gt; 可変モジュール、可変関数、または可変引数で生成されます。たとえば、 &lt;code&gt;M:F(a)&lt;/code&gt; 、 &lt;code&gt;apply(M,&amp;nbsp;f,&amp;nbsp;[a])&lt;/code&gt; 、および &lt;code&gt;spawn(m,&amp;nbsp;f(),&amp;nbsp;Args)&lt;/code&gt; です。未解決の呼び出しは、変数モジュールがアトム &lt;code&gt;'$M_EXPR'&lt;/code&gt; に置き換えられ、変数関数がアトム &lt;code&gt;'$F_EXPR'&lt;/code&gt; に置き換えられ、可変数の引数が数値 &lt;code&gt;-1&lt;/code&gt; に置き換えられた呼び出しによって表されます。上記の例は、 &lt;code&gt;'$M_EXPR':'$F_EXPR'/1&lt;/code&gt; 、 &lt;code&gt;'$M_EXPR':f/1&lt;/code&gt; 、および &lt;code&gt;m:'$F_EXPR'/-1&lt;/code&gt; 呼び出しで表されます。未解決の呼び出しは、外部呼び出しのサブセットです。</target>
        </trans-unit>
        <trans-unit id="e175a0645ad31688c1ad90ebe51d1f98332790c8" translate="yes" xml:space="preserve">
          <source>Calls between modules, applications and releases are also directed graphs. The  &lt;strong id=&quot;type&quot;&gt;types&lt;/strong&gt; of the vertices and edges of these graphs are (ranging from the most special to the most general): &lt;code&gt;Fun&lt;/code&gt; for functions; &lt;code&gt;Mod&lt;/code&gt; for modules; &lt;code&gt;App&lt;/code&gt; for applications; and &lt;code&gt;Rel&lt;/code&gt; for releases. The following paragraphs will describe the different constructs of the language used for selecting and analyzing parts of the graphs, beginning with the  &lt;strong id=&quot;constants&quot;&gt;constants&lt;/strong&gt;:</source>
          <target state="translated">モジュール、アプリケーション、リリース間の呼び出しも、有向グラフです。 &lt;strong id=&quot;type&quot;&gt;タイプ&lt;/strong&gt;これらのグラフの頂点と辺の（最も特殊から最も一般的なの範囲）される： &lt;code&gt;Fun&lt;/code&gt; 機能のために、モジュールの &lt;code&gt;Mod&lt;/code&gt; ; &lt;code&gt;App&lt;/code&gt; 用のアプリ。そして、 &lt;code&gt;Rel&lt;/code&gt; リリースの。次の段落では、&lt;strong id=&quot;constants&quot;&gt;定数&lt;/strong&gt;から始めて、グラフの一部を選択および分析するために使用される言語のさまざまな構成について説明します 。</target>
        </trans-unit>
        <trans-unit id="be43177e95bbd471940bc32f6f4691d58dabae5d" translate="yes" xml:space="preserve">
          <source>Calls function &lt;code&gt;mnesia:read(Tab, Key, read)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:read(Tab, Key, read)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="e1ab266a520f0fa15f418f121757a95a2f87b8a3" translate="yes" xml:space="preserve">
          <source>Calls quickcheck and returns the result in a form suitable for &lt;code&gt;Common Test&lt;/code&gt;.</source>
          <target state="translated">quickcheckを呼び出し、 &lt;code&gt;Common Test&lt;/code&gt; に適した形式で結果を返します。</target>
        </trans-unit>
        <trans-unit id="8c7c891f9853016ddc130d88be49b034108f4922" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;Fun&lt;/code&gt; in a context that is not protected by a transaction. The Mnesia function calls performed in the &lt;code&gt;Fun&lt;/code&gt; are mapped to the corresponding dirty functions. It is performed in almost the same context as &lt;code&gt;mnesia:async_dirty/1,2&lt;/code&gt;. The difference is that the operations are performed synchronously. The caller waits for the updates to be performed on all active replicas before the &lt;code&gt;Fun&lt;/code&gt; returns. For details, see &lt;code&gt;mnesia:activity/4&lt;/code&gt; and the User's Guide.</source>
          <target state="translated">トランザクションによって保護されていないコンテキストで &lt;code&gt;Fun&lt;/code&gt; を呼び出します。 &lt;code&gt;Fun&lt;/code&gt; で実行されるMnesia関数呼び出しは、対応するダーティ関数にマップされます。 &lt;code&gt;mnesia:async_dirty/1,2&lt;/code&gt; とほぼ同じコンテキストで実行されます。違いは、操作が同期して実行されることです。呼び出し元は、 &lt;code&gt;Fun&lt;/code&gt; が戻る前に、すべてのアクティブなレプリカで更新が実行されるのを待ちます。詳細については、 &lt;code&gt;mnesia:activity/4&lt;/code&gt; およびユーザーガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="7f3ec8be69b09a2c810b010167a3f606775918ce" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;Fun&lt;/code&gt; in a context that is not protected by a transaction. The Mnesia function calls performed in the &lt;code&gt;Fun&lt;/code&gt; are mapped to the corresponding dirty functions. This still involves logging, replication, and subscriptions, but there is no locking, local transaction storage, or commit protocols involved. Checkpoint retainers and indexes are updated, but they are updated dirty. As for normal &lt;code&gt;mnesia:dirty_*&lt;/code&gt; operations, the operations are performed semi-asynchronously. For details, see &lt;code&gt;mnesia:activity/4&lt;/code&gt; and the User's Guide.</source>
          <target state="translated">トランザクションによって保護されていないコンテキストで &lt;code&gt;Fun&lt;/code&gt; を呼び出します。 &lt;code&gt;Fun&lt;/code&gt; で実行されるMnesia関数呼び出しは、対応するダーティ関数にマップされます。これには、ロギング、レプリケーション、サブスクリプションが含まれますが、ロック、ローカルトランザクションストレージ、コミットプロトコルは含まれません。チェックポイント保持機能とインデックスは更新されますが、ダーティに更新されます。通常の &lt;code&gt;mnesia:dirty_*&lt;/code&gt; 操作と同様に、操作は半非同期で実行されます。詳細については、 &lt;code&gt;mnesia:activity/4&lt;/code&gt; およびユーザーガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="d819d67bdd8cdeb2caeeb18f61988b23312e64a2" translate="yes" xml:space="preserve">
          <source>Calls the &lt;code&gt;Fun&lt;/code&gt; in a raw context that is not protected by a transaction. The Mnesia function call is performed in the &lt;code&gt;Fun&lt;/code&gt; and performed directly on the local ETS tables on the assumption that the local storage type is &lt;code&gt;ram_copies&lt;/code&gt; and the tables are not replicated to other nodes. Subscriptions are not triggered and checkpoints are not updated, but it is extremely fast. This function can also be applied to &lt;code&gt;disc_copies&lt;/code&gt; tables if all operations are read only. For details, see &lt;code&gt;mnesia:activity/4&lt;/code&gt; and the User's Guide.</source>
          <target state="translated">トランザクションによって保護されていない生のコンテキストで &lt;code&gt;Fun&lt;/code&gt; を呼び出します。Mnesia関数呼び出しは、 &lt;code&gt;Fun&lt;/code&gt; で実行され、ローカルストレージタイプが &lt;code&gt;ram_copies&lt;/code&gt; であり、テーブルが他のノードに複製されないことを前提として、ローカルETSテーブルで直接実行されます。サブスクリプションはトリガーされず、チェックポイントは更新されませんが、非常に高速です。すべての操作が読み取り専用の場合、この関数は &lt;code&gt;disc_copies&lt;/code&gt; テーブルにも適用できます。詳細については、 &lt;code&gt;mnesia:activity/4&lt;/code&gt; およびユーザーガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="a8a784dd04ba58d02965f17a28a416dac496f4c6" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:delete(Tab, Key, sticky_write)&lt;/code&gt;</source>
          <target state="translated">関数 &lt;code&gt;mnesia:delete(Tab, Key, sticky_write)&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="ecca9949a5635aaf8c27410eea7636e30e459fb0" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:delete_object(Tab, Record, sticky_write)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Record)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:delete_object(Tab, Record, sticky_write)&lt;/code&gt; 。ここで、 &lt;code&gt;Tab&lt;/code&gt; は &lt;code&gt;element(1, Record)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="949e11ed9c4c541b273d5f803d7f14e93decf845" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:lock({table, Tab}, read)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:lock({table, Tab}, read)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="7a8c4bc10158fea84b8bc4d0f51afdb0e35c5827" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:lock({table, Tab}, write)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:lock({table, Tab}, write)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="cddc0b283837cd9cf6bfc5ffbfc0d1ab69ceebc5" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:read(Tab, Key, write)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:read(Tab, Key, write)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="55f266ac7f0a7fd8339f6a382397f015c2d00cb9" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:uninstall_fallback([{scope, global}])&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:uninstall_fallback([{scope, global}])&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="a04316f127b21a90e451cb0328b531e879c5c8a6" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:write(Tab, Record, sticky_write)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Record)&lt;/code&gt;.</source>
          <target state="translated">関数呼び出し &lt;code&gt;mnesia:write(Tab, Record, sticky_write)&lt;/code&gt; 、 &lt;code&gt;Tab&lt;/code&gt; ある &lt;code&gt;element(1, Record)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6619bcc0446814c6bc36959f774872812e839577" translate="yes" xml:space="preserve">
          <source>Calls the function &lt;code&gt;mnesia:write(Tab, Record, write)&lt;/code&gt;, where &lt;code&gt;Tab&lt;/code&gt; is &lt;code&gt;element(1, Record)&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;mnesia:write(Tab, Record, write)&lt;/code&gt; 呼び出します。ここで、 &lt;code&gt;Tab&lt;/code&gt; は &lt;code&gt;element(1, Record)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="802a6c538e37a7050a99435e4b91321de49b481f" translate="yes" xml:space="preserve">
          <source>Calls the selected tool's function for running the &lt;code&gt;Property&lt;/code&gt;. It is usually and by historical reasons called quickcheck, and that is why that name is used in this module (&lt;code&gt;ct_property_test&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Property&lt;/code&gt; を実行するために選択したツールの関数を呼び出します。これは通常、歴史的な理由でクイックチェックと呼ばれ、そのため、このモジュール（ &lt;code&gt;ct_property_test&lt;/code&gt; ）でその名前が使用されます。</target>
        </trans-unit>
        <trans-unit id="7b9dce33ce75c3e0cd20ec5b024a2864ee93e989" translate="yes" xml:space="preserve">
          <source>Calls the standard &lt;code&gt;free()&lt;/code&gt; function.</source>
          <target state="translated">標準の &lt;code&gt;free()&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="b90d8d44b261c3e05c2a69f75c7d0d01e3b518f9" translate="yes" xml:space="preserve">
          <source>Calls the standard &lt;code&gt;malloc()&lt;/code&gt; function.</source>
          <target state="translated">標準の &lt;code&gt;malloc()&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="61d6494376d82c6585e92497eb43814699b60b7e" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;&lt;a href=&quot;error_logger#error_report-1&quot;&gt; error_logger:error_report/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;error_logger#error_msg-1&quot;&gt; error_logger:error_msg/1,2&lt;/a&gt;&lt;/code&gt;, and corresponding functions for warning and info messages, are all forwarded to Logger as calls to &lt;code&gt;&lt;a href=&quot;logger#log-3&quot;&gt; logger:log(Level,Report,Metadata)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;error_logger#error_report-1&quot;&gt; error_logger:error_report/1,2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;error_logger#error_msg-1&quot;&gt; error_logger:error_msg/1,2&lt;/a&gt;&lt;/code&gt; の呼び出し、および警告メッセージと情報メッセージに対応する関数はすべて、 &lt;code&gt;&lt;a href=&quot;logger#log-3&quot;&gt; logger:log(Level,Report,Metadata)&lt;/a&gt;&lt;/code&gt; 呼び出しとしてLoggerに転送されます。</target>
        </trans-unit>
        <trans-unit id="3f325b7e41b1fdb81e7bc7cb001482dfdf57640d" translate="yes" xml:space="preserve">
          <source>Calls to &lt;code&gt;&lt;a href=&quot;error_logger#error_report-1&quot;&gt;error_logger:error_report/1,2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;error_logger#error_msg-1&quot;&gt;error_logger:error_msg/1,2&lt;/a&gt;&lt;/code&gt;, and corresponding functions for warning and info messages, are all forwarded to Logger as calls to &lt;code&gt;&lt;a href=&quot;logger#log-3&quot;&gt;logger:log(Level,Report,Metadata)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;error_logger#error_report-1&quot;&gt;error_logger:error_report/1,2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;error_logger#error_msg-1&quot;&gt;error_logger:error_msg/1,2&lt;/a&gt;&lt;/code&gt; への呼び出し、および警告メッセージと情報メッセージの対応する関数はすべて、 &lt;code&gt;&lt;a href=&quot;logger#log-3&quot;&gt;logger:log(Level,Report,Metadata)&lt;/a&gt;&lt;/code&gt; への呼び出しとしてLoggerに転送されます。</target>
        </trans-unit>
        <trans-unit id="681ce3661a9a40c6caccc2250ea6929229c7aac3" translate="yes" xml:space="preserve">
          <source>Calls to functions defined by evaluating fun expressions &lt;code&gt;&quot;fun ... end&quot;&lt;/code&gt; are also hidden from non-local function handlers.</source>
          <target state="translated">fun式 &lt;code&gt;&quot;fun ... end&quot;&lt;/code&gt; 評価して定義された関数の呼び出しも、非ローカル関数ハンドラーから隠されます。</target>
        </trans-unit>
        <trans-unit id="a78c70fc8985fb6668305436210f739782826d6b" translate="yes" xml:space="preserve">
          <source>Calls to local or external functions (&lt;code&gt;foo()&lt;/code&gt;, &lt;code&gt;m:foo()&lt;/code&gt;) are the fastest calls.</source>
          <target state="translated">ローカル関数または外部関数（ &lt;code&gt;foo()&lt;/code&gt; 、 &lt;code&gt;m:foo()&lt;/code&gt; ）の呼び出しが最も高速です。</target>
        </trans-unit>
        <trans-unit id="c1368b924e595a7f64353a1c8704cd02aa9b58af" translate="yes" xml:space="preserve">
          <source>Calls to the BIFs specified in table &lt;code&gt;Type Test BIFs&lt;/code&gt;</source>
          <target state="translated">テーブル &lt;code&gt;Type Test BIFs&lt;/code&gt; 指定されたBIFの呼び出し</target>
        </trans-unit>
        <trans-unit id="c476a11e38143a5ca54c749f0467a4a34a7b9e99" translate="yes" xml:space="preserve">
          <source>Calls to the BIFs specified in tables &lt;strong&gt;Type Test BIFs&lt;/strong&gt; and &lt;strong&gt;Other BIFs Allowed in Guard Expressions&lt;/strong&gt;</source>
          <target state="translated">表で指定されたBIFへの呼び出し&lt;strong&gt;タイプテストBIF&lt;/strong&gt;および&lt;strong&gt;ガード式で許可されるその他のBIF&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c5e2dbf1a74a301e38682ebfa666c1939e25bd23" translate="yes" xml:space="preserve">
          <source>Can another internal data representation be used to make things more efficient?</source>
          <target state="translated">別の内部データ表現を使用して、より効率的に物事を進めることができますか?</target>
        </trans-unit>
        <trans-unit id="ce2b0460aad57730836f17162000a27e6d1988d5" translate="yes" xml:space="preserve">
          <source>Can any redundant tests be removed?</source>
          <target state="translated">冗長なテストは削除できますか?</target>
        </trans-unit>
        <trans-unit id="14d70599293b8e413ef952c38a0440843056f84c" translate="yes" xml:space="preserve">
          <source>Can any test be run less often if the order of tests is changed?</source>
          <target state="translated">テストの順番を変更した場合、どのテストも実行回数を減らすことができますか?</target>
        </trans-unit>
        <trans-unit id="1dbbd23b5878e1a733c169db6ec8393bc170cde2" translate="yes" xml:space="preserve">
          <source>Can be a back reference, or another way of writing a tab</source>
          <target state="translated">バックリファレンスにもなるし、タブの別の書き方にもなる</target>
        </trans-unit>
        <trans-unit id="9ff3af864aead7cd729fa897ed19cd40dd3bea5a" translate="yes" xml:space="preserve">
          <source>Can be a back reference, otherwise the character with octal code 113</source>
          <target state="translated">バックリファレンスにすることができ、そうでなければ八進数コード113の文字</target>
        </trans-unit>
        <trans-unit id="ca748588186d1a7e973cd887d71235755974030e" translate="yes" xml:space="preserve">
          <source>Can be a back reference, otherwise value 255 (decimal)</source>
          <target state="translated">バックリファレンスにすることができ、そうでない場合は値 255 (10進数)</target>
        </trans-unit>
        <trans-unit id="7d7475380f4be07d179c7231bb2dd90fbd5279b2" translate="yes" xml:space="preserve">
          <source>Can be called by a process to unregister a specified node from EPMD on the local host. This is, however, usually not allowed, unless EPMD was started with flag &lt;code&gt;-relaxed_command_check&lt;/code&gt;, which it normally is not.</source>
          <target state="translated">ローカルホストのEPMDから指定されたノードの登録を解除するプロセスによって呼び出されます。ただし、通常は許可されないフラグ &lt;code&gt;-relaxed_command_check&lt;/code&gt; を使用してEPMDが開始されない限り、これは通常許可されません。</target>
        </trans-unit>
        <trans-unit id="f44b4080b46d42a3270b0b18ff48ce34cd9d5ec2" translate="yes" xml:space="preserve">
          <source>Can be implemented as:</source>
          <target state="translated">として実装することができます。</target>
        </trans-unit>
        <trans-unit id="435b9419e03f7e525befa539fe46b7b2779ce303" translate="yes" xml:space="preserve">
          <source>Can be one of the following:</source>
          <target state="translated">以下のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="18e0b766363b36ea716659f6503b3ddde9e7ec85" translate="yes" xml:space="preserve">
          <source>Can be removed in a future release of the halfword emulator.</source>
          <target state="translated">ハーフワードエミュレータの将来のリリースで削除できます。</target>
        </trans-unit>
        <trans-unit id="a329dd98b578890314d90cd00ae46894da7e6ba8" translate="yes" xml:space="preserve">
          <source>Can be set to &lt;code&gt;strict&lt;/code&gt; or &lt;code&gt;relaxed&lt;/code&gt;. It controls how each directory in the code path is to be interpreted:</source>
          <target state="translated">&lt;code&gt;strict&lt;/code&gt; または &lt;code&gt;relaxed&lt;/code&gt; に設定できます。コードパスの各ディレクトリの解釈方法を制御します。</target>
        </trans-unit>
        <trans-unit id="61d2fdff92dff8eebb470df37755eb8b633955c3" translate="yes" xml:space="preserve">
          <source>Can be set to a comma-separated list of IP addresses, in which case the &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt; daemon listens only on the specified address(es) and on the loopback address (which is implicitly added to the list if it has not been specified).</source>
          <target state="translated">IPアドレスのコンマ区切りリストに設定できます。この場合、 &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt; デーモンは、指定されたアドレスとループバックアドレス（指定されていない場合はリストに暗黙的に追加されます）でのみ待機します。</target>
        </trans-unit>
        <trans-unit id="1d6e47517b6960079a15e323f8e14b95671cfd59" translate="yes" xml:space="preserve">
          <source>Can be set to a comma-separated list of IP addresses, in which case the &lt;code&gt;epmd&lt;/code&gt; daemon will listen only on the specified address(es) and on the loopback address (which is implicitly added to the list if it has not been specified). The default behavior is to listen on all available IP addresses.</source>
          <target state="translated">IPアドレスのコンマ区切りリストに設定できます。この場合、 &lt;code&gt;epmd&lt;/code&gt; デーモンは、指定されたアドレスとループバックアドレス（指定されていない場合はリストに暗黙的に追加されます）でのみ待機します。デフォルトの動作では、使用可能なすべてのIPアドレスをリッスンします。</target>
        </trans-unit>
        <trans-unit id="32027351ef478fb666878cfb7ea809e9ec8104be" translate="yes" xml:space="preserve">
          <source>Can be used as a name resolving function for &lt;code&gt;&lt;a href=&quot;#register_name-3&quot;&gt;register_name/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#re_register_name-3&quot;&gt;re_register_name/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#register_name-3&quot;&gt;register_name/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#re_register_name-3&quot;&gt;re_register_name/3&lt;/a&gt;&lt;/code&gt; の名前解決関数として使用できます。</target>
        </trans-unit>
        <trans-unit id="a41238ba1ffe4cd44c8669bf5362c16badbd6e66" translate="yes" xml:space="preserve">
          <source>Can be used by a process that initiates a debug structure from a list of options. The values of argument &lt;code&gt;Opt&lt;/code&gt; are the same as for the corresponding functions.</source>
          <target state="translated">オプションのリストからデバッグ構造を開始するプロセスで使用できます。引数 &lt;code&gt;Opt&lt;/code&gt; の値は、対応する関数と同じです。</target>
        </trans-unit>
        <trans-unit id="e44e4550227750d3133233de3b9ab784df8d5876" translate="yes" xml:space="preserve">
          <source>Can be used if interactive performance is not to be affected by the emulator process.</source>
          <target state="translated">インタラクティブなパフォーマンスがエミュレータプロセスの影響を受けない場合に使用できます。</target>
        </trans-unit>
        <trans-unit id="4554428a28a365553523e827200f0a4801491275" translate="yes" xml:space="preserve">
          <source>Can be used if the size of the trace logs must be limited. Default values are &lt;code&gt;Size=128*1024&lt;/code&gt; and &lt;code&gt;Count=8&lt;/code&gt;.</source>
          <target state="translated">トレースログのサイズを制限する必要がある場合に使用できます。デフォルト値は、 &lt;code&gt;Size=128*1024&lt;/code&gt; および &lt;code&gt;Count=8&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="52514699bbc5fce906ba4874a907b457ea6b2ad1" translate="yes" xml:space="preserve">
          <source>Can be used if two Erlang nodes are to reside on one dedicated system and one is to have precedence over the other.</source>
          <target state="translated">2つのErlangノードが1つの専用システムに存在し、1つのノードが他のノードよりも優先される場合に使えます。</target>
        </trans-unit>
        <trans-unit id="1cfd6096580c6f0fc105f7dae283a846f824ac79" translate="yes" xml:space="preserve">
          <source>Can be used to determine which crypto algorithms that are supported by the underlying OpenSSL library</source>
          <target state="translated">基礎となる OpenSSL ライブラリでサポートされている暗号アルゴリズムを決定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="a809d60db9759dca31c0adaa3ee892b7d609a6ef" translate="yes" xml:space="preserve">
          <source>Can be used to determine which crypto algorithms that are supported by the underlying libcrypto library</source>
          <target state="translated">基盤となる libcrypto ライブラリでサポートされている暗号アルゴリズムを決定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="8ac2e838e28c4e79b7b0173c19b32b3299e09f77" translate="yes" xml:space="preserve">
          <source>Can be used to determine which named elliptic curves are supported.</source>
          <target state="translated">どの名前付き楕円曲線がサポートされているかを決定するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="0139eb1de3d0a9614c9b210a184d4b0320912f6e" translate="yes" xml:space="preserve">
          <source>Can be used to make the client act as an &lt;code&gt;HTTP/1.0&lt;/code&gt; or &lt;code&gt;HTTP/0.9&lt;/code&gt; client. By default this is an &lt;code&gt;HTTP/1.1&lt;/code&gt; client. When using &lt;code&gt;HTTP/1.0&lt;/code&gt; persistent connections are not used.</source>
          <target state="translated">クライアントを &lt;code&gt;HTTP/1.0&lt;/code&gt; または &lt;code&gt;HTTP/0.9&lt;/code&gt; クライアントとして機能させるために使用できます。デフォルトでは、これは &lt;code&gt;HTTP/1.1&lt;/code&gt; クライアントです。 &lt;code&gt;HTTP/1.0&lt;/code&gt; を使用する場合、永続的な接続は使用されません。</target>
        </trans-unit>
        <trans-unit id="e9de6dfb4b293a374f8bbe2fd001451aff895674" translate="yes" xml:space="preserve">
          <source>Can be used to retrieve information about the C-node. These values are initially set with &lt;code&gt;ei_connect_init()&lt;/code&gt; or &lt;code&gt;ei_connect_xinit()&lt;/code&gt;.</source>
          <target state="translated">Cノードに関する情報を取得するために使用できます。これらの値は、最初は &lt;code&gt;ei_connect_init()&lt;/code&gt; または &lt;code&gt;ei_connect_xinit()&lt;/code&gt; で設定されます。</target>
        </trans-unit>
        <trans-unit id="b6b6b3b3a5a2150a389c6b25e1e84aa23960992c" translate="yes" xml:space="preserve">
          <source>Can be used when interacting with a server called &lt;code&gt;Name&lt;/code&gt; on node &lt;code&gt;Node&lt;/code&gt;. It is assumed that the server receives messages in the format &lt;code&gt;{From, Msg}&lt;/code&gt; and replies using &lt;code&gt;From ! {ReplyWrapper, Node, Reply}&lt;/code&gt;. This function makes such a server call and ensures that the entire call is packed into an atomic transaction, which either succeeds or fails. It never hangs, unless the server itself hangs.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; の &lt;code&gt;Name&lt;/code&gt; という名前のサーバーと対話するときに使用できます。サーバーが形式でメッセージを受信したとする &lt;code&gt;{From, Msg}&lt;/code&gt; と使用してリプライ &lt;code&gt;From ! {ReplyWrapper, Node, Reply}&lt;/code&gt; 。この関数は、このようなサーバー呼び出しを行い、呼び出し全体がアトミックトランザクションにパックされることを保証します。サーバー自体がハングしない限り、ハングすることはありません。</target>
        </trans-unit>
        <trans-unit id="bb8693797500f3627529857787e0f8552cc7d7b2" translate="yes" xml:space="preserve">
          <source>Can be used when interacting with servers called &lt;code&gt;Name&lt;/code&gt; on the specified nodes. It is assumed that the servers receive messages in the format &lt;code&gt;{From, Msg}&lt;/code&gt; and reply using &lt;code&gt;From ! {Name, Node, Reply}&lt;/code&gt;, where &lt;code&gt;Node&lt;/code&gt; is the name of the node where the server is located. The function returns &lt;code&gt;{Replies, BadNodes}&lt;/code&gt;, where &lt;code&gt;Replies&lt;/code&gt; is a list of all &lt;code&gt;Reply&lt;/code&gt; values, and &lt;code&gt;BadNodes&lt;/code&gt; is one of the following:</source>
          <target state="translated">指定されたノード上の &lt;code&gt;Name&lt;/code&gt; という名前のサーバーと対話するときに使用できます。サーバが形式でメッセージを受信することが想定され &lt;code&gt;{From, Msg}&lt;/code&gt; と使用して返信 &lt;code&gt;From ! {Name, Node, Reply}&lt;/code&gt; 、ここで &lt;code&gt;Node&lt;/code&gt; はサーバーが配置されているノードの名前です。関数の戻り &lt;code&gt;{Replies, BadNodes}&lt;/code&gt; 、 &lt;code&gt;Replies&lt;/code&gt; すべてのリストで &lt;code&gt;Reply&lt;/code&gt; 値、および &lt;code&gt;BadNodes&lt;/code&gt; は、次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="413a11e06a5cc3367aeaca579508da6cce5c360b" translate="yes" xml:space="preserve">
          <source>Can be used with &lt;code&gt;chunk/2,3&lt;/code&gt; and &lt;code&gt;bchunk/2,3&lt;/code&gt; to search through an internally formatted wrap log. It takes as argument a continuation as returned by &lt;code&gt;chunk/2,3&lt;/code&gt;, &lt;code&gt;bchunk/2,3&lt;/code&gt;, or &lt;code&gt;chunk_step/3&lt;/code&gt;, and steps forward (or backward) &lt;code&gt;Step&lt;/code&gt; files in the wrap log. The continuation returned, points to the first log item in the new current file.</source>
          <target state="translated">で使用することができ &lt;code&gt;chunk/2,3&lt;/code&gt; 及び &lt;code&gt;bchunk/2,3&lt;/code&gt; 内部でフォーマットされたラップ・ログを検索します。引数として、 &lt;code&gt;chunk/2,3&lt;/code&gt; 、 &lt;code&gt;bchunk/2,3&lt;/code&gt; 、または &lt;code&gt;chunk_step/3&lt;/code&gt; によって返される継続を受け取り、ラップログ内の &lt;code&gt;Step&lt;/code&gt; ファイルを順方向（または逆方向）にステップします。返された継続は、新しい現在のファイルの最初のログ項目を指します。</target>
        </trans-unit>
        <trans-unit id="54b689659783bb6b4ac1454db70e48394a638a38" translate="yes" xml:space="preserve">
          <source>Can contain the port number &lt;code&gt;epmd&lt;/code&gt; will use. The default port will work fine in most cases. A different port can be specified to allow several instances of &lt;code&gt;epmd&lt;/code&gt;, representing independent clusters of nodes, to co-exist on the same host. All nodes in a cluster must use the same &lt;code&gt;epmd&lt;/code&gt; port number.</source>
          <target state="translated">&lt;code&gt;epmd&lt;/code&gt; が使用するポート番号を含めることができます。ほとんどの場合、デフォルトのポートで問題なく動作します。異なるポートを指定して、ノードの独立したクラスターを表す &lt;code&gt;epmd&lt;/code&gt; の複数のインスタンスを同じホスト上で共存させることができます。クラスター内のすべてのノードは、同じ &lt;code&gt;epmd&lt;/code&gt; ポート番号を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="d1d4e8ff3c787597c2cdf851d9445ac7a46d3eec" translate="yes" xml:space="preserve">
          <source>Can contain the port number to use when communicating with &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt;. The default port works fine in most cases. A different port can be specified to allow nodes of independent clusters to co-exist on the same host. All nodes in a cluster must use the same &lt;code&gt;epmd&lt;/code&gt; port number.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt; との通信時に使用するポート番号を含めることができます。ほとんどの場合、デフォルトのポートで問題なく動作します。異なるポートを指定して、独立したクラスターのノードを同じホスト上で共存させることができます。クラスター内のすべてのノードは、同じ &lt;code&gt;epmd&lt;/code&gt; ポート番号を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="763e2024cfbffcaa35312ea836b3ce5e41e09735" translate="yes" xml:space="preserve">
          <source>Can either be the originals passed into the calling NIF, or can be values created by the calling NIF.</source>
          <target state="translated">呼び出し元のNIFに渡されたオリジナル、または呼び出し元のNIFが作成した値のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="1762b945a07d7a0928b055cdfb86c61f5e180a18" translate="yes" xml:space="preserve">
          <source>Can enable trace on all functions or only exported functions on chosen modules.</source>
          <target state="translated">すべての関数のトレースを有効にするか、選択したモジュールのエクスポートされた関数のみを有効にすることができます。</target>
        </trans-unit>
        <trans-unit id="a6d98498dcb02bc77d5362ec71948bf4dcb80403" translate="yes" xml:space="preserve">
          <source>Can only be used to check the local time of day if the time-zone information of the underlying OS is properly configured.</source>
          <target state="translated">基盤となるOSのタイムゾーン情報が適切に設定されている場合にのみ、ローカルの時間帯を確認するために使用できます。</target>
        </trans-unit>
        <trans-unit id="3b665cc5f87b4b96a8b89bb4858d5c6ded666e00" translate="yes" xml:space="preserve">
          <source>Can only be used with TLS/DTLS connections; &lt;code&gt;{error, undefined}&lt;/code&gt; is returned for SSLv3 connections.</source>
          <target state="translated">TLS / DTLS接続でのみ使用できます。SSLv3接続の &lt;code&gt;{error, undefined}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="65065adca48747308c795b0ca8e2fa3439ca68c0" translate="yes" xml:space="preserve">
          <source>Canadian_Aboriginal</source>
          <target state="translated">Canadian_Aboriginal</target>
        </trans-unit>
        <trans-unit id="0ce7f9b48109071ca45af63e2c7f4cded74fe895" translate="yes" xml:space="preserve">
          <source>Cancel a previous asynchronous request.</source>
          <target state="translated">以前の非同期リクエストをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="8c0d517ae93b9275421781af37452eec4bb2fa47" translate="yes" xml:space="preserve">
          <source>Cancel a previous request to be notified of SNMP manager start.</source>
          <target state="translated">SNMPマネージャの起動を通知するための以前のリクエストをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="a9a0f30cfff3cf2f7919e74d440e32f436d7292c" translate="yes" xml:space="preserve">
          <source>Cancel all outstanding messages for this connection</source>
          <target state="translated">この接続のすべての未処理のメッセージをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="5aba33ae4d23c8305d0ff9ae3f760f6d7bc6c018" translate="yes" xml:space="preserve">
          <source>Cancel an asynchronous request.</source>
          <target state="translated">非同期リクエストをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="2e83179d769a2b44650615f9d44ca78b37a04604" translate="yes" xml:space="preserve">
          <source>Cancel the handshake with a fatal &lt;code&gt;USER_CANCELED&lt;/code&gt; alert.</source>
          <target state="translated">致命的な &lt;code&gt;USER_CANCELED&lt;/code&gt; アラートでハンドシェイクをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="512e48b731dfabfc2f052978658a8655b252b710" translate="yes" xml:space="preserve">
          <source>Cancels a monitor created earlier with &lt;code&gt;&lt;a href=&quot;#enif_monitor_process&quot;&gt; enif_monitor_process&lt;/a&gt;&lt;/code&gt;. Argument &lt;code&gt;obj&lt;/code&gt; is a pointer to the resource holding the monitor and &lt;code&gt;*mon&lt;/code&gt; identifies the monitor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_monitor_process&quot;&gt; enif_monitor_process&lt;/a&gt;&lt;/code&gt; で以前に作成されたモニターをキャンセルします。引数 &lt;code&gt;obj&lt;/code&gt; はモニターを保持しているリソースへのポインターであり、 &lt;code&gt;*mon&lt;/code&gt; はモニターを識別します。</target>
        </trans-unit>
        <trans-unit id="5e51a49231000a90b74f84cb0f1813b99bdab3f4" translate="yes" xml:space="preserve">
          <source>Cancels a monitor created earlier with &lt;code&gt;&lt;a href=&quot;#enif_monitor_process&quot;&gt;enif_monitor_process&lt;/a&gt;&lt;/code&gt;. Argument &lt;code&gt;obj&lt;/code&gt; is a pointer to the resource holding the monitor and &lt;code&gt;*mon&lt;/code&gt; identifies the monitor.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_monitor_process&quot;&gt;enif_monitor_process&lt;/a&gt;&lt;/code&gt; で以前に作成されたモニターをキャンセルします。引数 &lt;code&gt;obj&lt;/code&gt; はモニターを保持するリソースへのポインターであり、 &lt;code&gt;*mon&lt;/code&gt; はモニターを識別します。</target>
        </trans-unit>
        <trans-unit id="96cae339d2d57bc5c2386eed4ecb967d6f0a23af" translate="yes" xml:space="preserve">
          <source>Cancels a monitor created earlier.</source>
          <target state="translated">以前に作成したモニターをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="1f0665372f0c058f76dc85627e4390cc9a27b91a" translate="yes" xml:space="preserve">
          <source>Cancels a previously requested time-out. &lt;code&gt;TRef&lt;/code&gt; is a unique timer reference returned by the related timer function.</source>
          <target state="translated">以前に要求されたタイムアウトをキャンセルします。 &lt;code&gt;TRef&lt;/code&gt; は、関連するタイマー関数によって返される一意のタイマー参照です。</target>
        </trans-unit>
        <trans-unit id="be2d617334028ba42207577f2c0c4db3092e85de" translate="yes" xml:space="preserve">
          <source>Cancels a timer set with &lt;code&gt;&lt;a href=&quot;#driver_set_timer&quot;&gt; driver_set_timer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#driver_set_timer&quot;&gt; driver_set_timer&lt;/a&gt;&lt;/code&gt; で設定されたタイマーをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="2dfd6843c1a8e9b558c9edbe4d27191bbd822b29" translate="yes" xml:space="preserve">
          <source>Cancels a timer set with &lt;code&gt;&lt;a href=&quot;#driver_set_timer&quot;&gt;driver_set_timer&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#driver_set_timer&quot;&gt;driver_set_timer&lt;/a&gt;&lt;/code&gt; で設定されたタイマーをキャンセルします。</target>
        </trans-unit>
        <trans-unit id="b17a85c7c341fb9ad575021c84d0507b60def106" translate="yes" xml:space="preserve">
          <source>Cancels a timer that has been created by &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt; erlang:start_timer&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;TimerRef&lt;/code&gt; identifies the timer, and was returned by the BIF that created the timer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt; erlang:start_timer&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after&lt;/a&gt;&lt;/code&gt; によって作成されたタイマーをキャンセルします。 &lt;code&gt;TimerRef&lt;/code&gt; はタイマーを識別し、タイマーを作成したBIFによって返されました。</target>
        </trans-unit>
        <trans-unit id="f1c27441b4577bb7df82953733b9a8895adaaf42" translate="yes" xml:space="preserve">
          <source>Cancels a timer that has been created by &lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;TimerRef&lt;/code&gt; identifies the timer, and was returned by the BIF that created the timer.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_timer-4&quot;&gt;erlang:start_timer&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#send_after-4&quot;&gt;erlang:send_after&lt;/a&gt;&lt;/code&gt; によって作成されたタイマーをキャンセルします。 &lt;code&gt;TimerRef&lt;/code&gt; はタイマーを識別し、タイマーを作成したBIFによって返されました。</target>
        </trans-unit>
        <trans-unit id="0df1541c96a30a0731a1c3888c1e2faced1631ac" translate="yes" xml:space="preserve">
          <source>Cancels a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#cancel_timer-2&quot;&gt; erlang:cancel_timer(TimerRef, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイマーをキャンセルします。 &lt;code&gt;&lt;a href=&quot;#cancel_timer-2&quot;&gt; erlang:cancel_timer(TimerRef, [])&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="515e3b82893f87b97d2f6951c20fe359a4a9690f" translate="yes" xml:space="preserve">
          <source>Cancels a timer. The same as calling &lt;code&gt;&lt;a href=&quot;#cancel_timer-2&quot;&gt;erlang:cancel_timer(TimerRef, [])&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タイマーをキャンセルします。 &lt;code&gt;&lt;a href=&quot;#cancel_timer-2&quot;&gt;erlang:cancel_timer(TimerRef, [])&lt;/a&gt;&lt;/code&gt; を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="df65de63f9858575da41cfa50c0a1015308635d0" translate="yes" xml:space="preserve">
          <source>Cancels an asynchronous HTTP request. Notice that this does not guarantee that the request response is not delivered. Because it is asynchronous, the request can already have been completed when the cancellation arrives.</source>
          <target state="translated">非同期 HTTP リクエストをキャンセルします。これはリクエストレスポンスが配信されないことを保証するものではないことに注意してください。これは非同期なので、キャンセルが到着したときにはすでにリクエストは完了している可能性があります。</target>
        </trans-unit>
        <trans-unit id="b541e4bb9b743ccb5ae258df54a4b47b94078144" translate="yes" xml:space="preserve">
          <source>Cancels any active timetrap and pauses the execution of the current test case until the user calls function &lt;code&gt;continue/0&lt;/code&gt;. The user can then interact with the Erlang node running the tests, for example, for debugging purposes or for manually executing a part of the test case. If a parallel group is executing, &lt;code&gt;&lt;a href=&quot;#break-2&quot;&gt;ct:break/2&lt;/a&gt;&lt;/code&gt; is to be called instead.</source>
          <target state="translated">ユーザーが関数 &lt;code&gt;continue/0&lt;/code&gt; を呼び出すまで、アクティブなタイムトラップをキャンセルし、現在のテストケースの実行を一時停止します。次に、ユーザーは、たとえばデバッグの目的で、またはテストケースの一部を手動で実行するために、テストを実行しているErlangノードと対話できます。並列グループが実行されている場合は、代わりに &lt;code&gt;&lt;a href=&quot;#break-2&quot;&gt;ct:break/2&lt;/a&gt;&lt;/code&gt; が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="ef0062b553bef5e57661343010bd1663e123fb3c" translate="yes" xml:space="preserve">
          <source>Cannot find a script for upgrading/downgrading between &lt;code&gt;CurrentVsn&lt;/code&gt; and &lt;code&gt;Vsn&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CurrentVsn&lt;/code&gt; と &lt;code&gt;Vsn&lt;/code&gt; の間でアップグレード/ダウングレードするためのスクリプトが見つかりません。</target>
        </trans-unit>
        <trans-unit id="59c2c275dbff28468b338a2a1d74abfdb2ab249d" translate="yes" xml:space="preserve">
          <source>Capabilities Exchange</source>
          <target state="translated">機能交換</target>
        </trans-unit>
        <trans-unit id="6f815b9cd6720fa896907fcc11d7b3e052d3034d" translate="yes" xml:space="preserve">
          <source>Capabilities exchange has failed. &lt;code&gt;Reason&lt;/code&gt; can have one of the following types.</source>
          <target state="translated">機能の交換に失敗しました。 &lt;code&gt;Reason&lt;/code&gt; は、次のいずれかのタイプになります。</target>
        </trans-unit>
        <trans-unit id="650fc093260c1b58ae5fd02c80725cb6220c8159" translate="yes" xml:space="preserve">
          <source>Capabilities-Exchange-Answer</source>
          <target state="translated">Capabilities-Exchange-Answer</target>
        </trans-unit>
        <trans-unit id="acf14eeece446c5904b65bad9ec3f274e5e6164c" translate="yes" xml:space="preserve">
          <source>Capabilities-Exchange-Request</source>
          <target state="translated">Capabilities-Exchange-Request</target>
        </trans-unit>
        <trans-unit id="b2b40c5778d35eb5bdc2d77add606c0d6436b77d" translate="yes" xml:space="preserve">
          <source>Capability options are ignored by connect/1-3 and only_open/1-2, which don't result in an outgoing hello message.</source>
          <target state="translated">能力オプションは connect/1-3 と only_open/1-2 では無視されます。</target>
        </trans-unit>
        <trans-unit id="7409a4b0f3b37f1008c113fb6e626f5103a444b1" translate="yes" xml:space="preserve">
          <source>Capitalized &lt;strong&gt;Diameter&lt;/strong&gt; refers to the protocol, lowercase &lt;strong&gt;diameter&lt;/strong&gt; to the Erlang application.</source>
          <target state="translated">大文字の&lt;strong&gt;直径&lt;/strong&gt;はプロトコルを指し、小文字の&lt;strong&gt;直径&lt;/strong&gt;はErlangアプリケーションを指します。</target>
        </trans-unit>
        <trans-unit id="6454a649d8a2356d9dddbd06143083fa5db5fee7" translate="yes" xml:space="preserve">
          <source>Captures all log events that would normally be printed by the default logger handler, and prints them to the current test case log. If an event cannot be associated with a test case, it is printed in the &lt;code&gt;Common Test&lt;/code&gt; framework log. This happens for test cases running in parallel and events occuring in-between test cases.</source>
          <target state="translated">通常はデフォルトのロガーハンドラーによって出力されるすべてのログイベントをキャプチャし、それらを現在のテストケースログに出力します。イベントをテストケースに関連付けることができない場合は、 &lt;code&gt;Common Test&lt;/code&gt; フレームワークログに出力されます。これは、並行して実行されるテストケースと、テストケース間で発生するイベントで発生します。</target>
        </trans-unit>
        <trans-unit id="3faea7a0af305bcea0e8fcf9cf99c51068a261b7" translate="yes" xml:space="preserve">
          <source>Captures all log events that would normally be printed by the default logger handler, and prints them to the current test case log. If an event cannot be associated with a test case, it is printed in the &lt;code&gt;Common Test&lt;/code&gt; framework log. This happens for test cases running in parallel and events occuring in-between test cases. You can configure the level of &lt;code&gt;SASL&lt;/code&gt; reports using the normal SASL mechanisms.</source>
          <target state="translated">デフォルトのロガーハンドラーによって通常出力されるすべてのログイベントをキャプチャし、現在のテストケースログに出力します。イベントをテストケースに関連付けることができない場合、イベントは &lt;code&gt;Common Test&lt;/code&gt; フレームワークログに出力されます。これは、並行して実行されるテストケースと、テストケースの間に発生するイベントで発生します。通常のSASLメカニズムを使用して、 &lt;code&gt;SASL&lt;/code&gt; レポートのレベルを設定できます。</target>
        </trans-unit>
        <trans-unit id="46bfe99abf367a44ddc81f52e9b2dd6714cf8a38" translate="yes" xml:space="preserve">
          <source>Captures all test results and outputs them as surefire XML into a file. The created file is by default called &lt;code&gt;junit_report.xml&lt;/code&gt;. The file name can be changed by setting option &lt;code&gt;path&lt;/code&gt; for this hook, for example:</source>
          <target state="translated">すべてのテスト結果をキャプチャし、それらを確実なXMLとしてファイルに出力します。作成されたファイルは、デフォルトでは &lt;code&gt;junit_report.xml&lt;/code&gt; と呼ばれます。このフックのオプション &lt;code&gt;path&lt;/code&gt; を設定することで、ファイル名を変更できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="d07225edcafc11a68f3d5eb9b90023be29cd700a" translate="yes" xml:space="preserve">
          <source>Carefully prevent translating the &lt;code&gt;Raw Trace Data&lt;/code&gt; twice</source>
          <target state="translated">&lt;code&gt;Raw Trace Data&lt;/code&gt; 2回変換することを慎重に防ぐ</target>
        </trans-unit>
        <trans-unit id="6e0d5cedfdd10366517f607a93eeeef9b4785a51" translate="yes" xml:space="preserve">
          <source>Carian</source>
          <target state="translated">Carian</target>
        </trans-unit>
        <trans-unit id="df10067f5a8780a3c7f1ce6b060b8d78df100b22" translate="yes" xml:space="preserve">
          <source>Carriage return</source>
          <target state="translated">キャリッジリターン</target>
        </trans-unit>
        <trans-unit id="6816a4bcee325f605828c9a0983b400ec2b0b807" translate="yes" xml:space="preserve">
          <source>Carriage return (CR)</source>
          <target state="translated">キャリッジリターン (CR)</target>
        </trans-unit>
        <trans-unit id="4788a491bde10053f4b29b72d3ab33319a6fa543" translate="yes" xml:space="preserve">
          <source>Carriage return (hex 0D)</source>
          <target state="translated">キャリッジリターン(16進0D</target>
        </trans-unit>
        <trans-unit id="730f6dc38b735a30bd3b01925e8207103f8f081e" translate="yes" xml:space="preserve">
          <source>Carriage return.</source>
          <target state="translated">キャリッジリターン。</target>
        </trans-unit>
        <trans-unit id="ac86d2f38a97ba396ecc606e85913560b9394190" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;binary_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;binary_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="136d8537250d31ffae733f8d73dfb88d027c7ac9" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;driver_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;driver_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="b657ca0fde8e2f710828753eb201ccdcd5d06860" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;eheap_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;eheap_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="af7e183f95d0d26975c1437f27c82e38a4d870eb" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;ets_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ets_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="a0c2c6f39532ac6a69f54b45c1eed8e7d02ee768" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;fix_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;fix_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="5472ccb63504cc29da8f79c43e9078ef65d5ea61" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;ll_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ll_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="01b7000fafc3012b828e16b84f71bfa568e1ae3c" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;sl_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;sl_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="ceb54b6df2e43a144c15799ad5adbf3de30533a4" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with &lt;code&gt;std_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;std_alloc&lt;/code&gt; に関連付けられたキャリアプール。</target>
        </trans-unit>
        <trans-unit id="c7aab2373100333dca607e632e879d37cb0f2d2f" translate="yes" xml:space="preserve">
          <source>Carrier pool associated with the system as a whole.</source>
          <target state="translated">システム全体に関連するキャリアプール。</target>
        </trans-unit>
        <trans-unit id="dc8d706f8d246ecbcbc193deb6d5f3e407c9522d" translate="yes" xml:space="preserve">
          <source>Carriers are abandoned when memory utilization in the allocator instance falls below the utilization value used. Once a carrier is abandoned, no new allocations are made in it. When an allocator instance gets an increased multiblock carrier need, it first tries to fetch an abandoned carrier from an allocator instance of the same allocator type. If no abandoned carrier can be fetched, it creates a new empty carrier. When an abandoned carrier has been fetched, it will function as an ordinary carrier. This feature has special requirements on the &lt;code&gt;&lt;a href=&quot;#M_as&quot;&gt;allocation strategy&lt;/a&gt;&lt;/code&gt; used. Only the strategies &lt;code&gt;aoff&lt;/code&gt;, &lt;code&gt;aoffcbf&lt;/code&gt;, &lt;code&gt;aoffcaobf&lt;/code&gt;, &lt;code&gt;ageffcaoff&lt;/code&gt;m, &lt;code&gt;ageffcbf&lt;/code&gt; and &lt;code&gt;ageffcaobf&lt;/code&gt; support abandoned carriers.</source>
          <target state="translated">アロケータインスタンスのメモリ使用率が使用率を下回ると、キャリアは破棄されます。キャリアが放棄されると、新しい割り当ては行われません。アロケーターインスタンスは、マルチブロックキャリアの必要性が高まると、最初に同じアロケータータイプのアロケーターインスタンスから放棄されたキャリアをフェッチしようとします。放棄されたキャリアを取得できない場合、新しい空のキャリアが作成されます。放棄された運送業者がフェッチされると、通常の運送業者として機能します。この機能には、使用する &lt;code&gt;&lt;a href=&quot;#M_as&quot;&gt;allocation strategy&lt;/a&gt;&lt;/code&gt; に関する特別な要件があります。戦略 &lt;code&gt;aoff&lt;/code&gt; 、 &lt;code&gt;aoffcbf&lt;/code&gt; 、 &lt;code&gt;aoffcaobf&lt;/code&gt; 、 &lt;code&gt;ageffcaoff&lt;/code&gt; m、 &lt;code&gt;ageffcbf&lt;/code&gt; および &lt;code&gt;ageffcaobf&lt;/code&gt; のみ 放棄されたキャリアをサポートします。</target>
        </trans-unit>
        <trans-unit id="caef8d032299864b49e02c5e2220052e5b8ad212" translate="yes" xml:space="preserve">
          <source>Carriers are abandoned when memory utilization in the allocator instance falls below the utilization value used. Once a carrier is abandoned, no new allocations are made in it. When an allocator instance gets an increased multiblock carrier need, it first tries to fetch an abandoned carrier from another allocator instance. If no abandoned carrier can be fetched, it creates a new empty carrier. When an abandoned carrier has been fetched, it will function as an ordinary carrier. This feature has special requirements on the &lt;code&gt;&lt;a href=&quot;#M_as&quot;&gt;allocation strategy&lt;/a&gt;&lt;/code&gt; used. Only the strategies &lt;code&gt;aoff&lt;/code&gt;, &lt;code&gt;aoffcbf&lt;/code&gt;, &lt;code&gt;aoffcaobf&lt;/code&gt;, &lt;code&gt;ageffcaoff&lt;/code&gt;m, &lt;code&gt;ageffcbf&lt;/code&gt; and &lt;code&gt;ageffcaobf&lt;/code&gt; support abandoned carriers.</source>
          <target state="translated">アロケータインスタンスのメモリ使用率が使用されている使用率の値を下回ると、キャリアは破棄されます。キャリアが放棄されると、新しい割り当ては行われません。アロケータインスタンスがマルチブロックキャリアの必要性を高めると、最初に別のアロケータインスタンスから放棄されたキャリアをフェッチしようとします。放棄されたキャリアをフェッチできない場合は、新しい空のキャリアが作成されます。放棄されたキャリアがフェッチされると、通常のキャリアとして機能します。この機能には、使用する &lt;code&gt;&lt;a href=&quot;#M_as&quot;&gt;allocation strategy&lt;/a&gt;&lt;/code&gt; に関する特別な要件があります。戦略 &lt;code&gt;aoff&lt;/code&gt; 、 &lt;code&gt;aoffcbf&lt;/code&gt; 、 &lt;code&gt;aoffcaobf&lt;/code&gt; 、 &lt;code&gt;ageffcaoff&lt;/code&gt; m、 &lt;code&gt;ageffcbf&lt;/code&gt; 、および &lt;code&gt;ageffcaobf&lt;/code&gt; のみが、放棄されたキャリアをサポートします。</target>
        </trans-unit>
        <trans-unit id="248440260111abecc898e4704059b3f4b5c930ae" translate="yes" xml:space="preserve">
          <source>Case-related information is sent to the minor log file.</source>
          <target state="translated">マイナーなログファイルにケース関連の情報が送られてきます。</target>
        </trans-unit>
        <trans-unit id="553cb7afb2839db8e29aca4e968f3b1d24ea5656" translate="yes" xml:space="preserve">
          <source>Categories in a CSS file installed with flag &lt;code&gt;-stylesheet&lt;/code&gt; are on a global test level in the sense that they can be used in any suite that is part of the test run.</source>
          <target state="translated">flag &lt;code&gt;-stylesheet&lt;/code&gt; を使用してインストールされたCSSファイルのカテゴリは、テスト実行の一部であるすべてのスイートで使用できるという意味で、グローバルテストレベルにあります。</target>
        </trans-unit>
        <trans-unit id="1fd68e15271b50917550f2816bf00e0a52193319" translate="yes" xml:space="preserve">
          <source>Caucasian_Albanian</source>
          <target state="translated">Caucasian_Albanian</target>
        </trans-unit>
        <trans-unit id="e2d6fad43a0498df568c18e20abea6e5fa09545f" translate="yes" xml:space="preserve">
          <source>Cause &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; to return &lt;code&gt;ok&lt;/code&gt; as soon as the request in question has been encoded, instead of waiting for and returning the result from a subsequent &lt;code&gt;handle_answer/4&lt;/code&gt; or &lt;code&gt;handle_error/4&lt;/code&gt; callback.</source>
          <target state="translated">原因 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; 戻るには &lt;code&gt;ok&lt;/code&gt; 代わりに待っていると、後続の結果を返すので、すぐに問題の要求がエンコードされているようによう &lt;code&gt;handle_answer/4&lt;/code&gt; または &lt;code&gt;handle_error/4&lt;/code&gt; コールバック。</target>
        </trans-unit>
        <trans-unit id="570360f716edc9b6804b7e0a9d5afd7c16e0085a" translate="yes" xml:space="preserve">
          <source>Causes a &lt;code&gt;return_from&lt;/code&gt; trace message to be sent upon return from the current function. Takes no arguments, returns &lt;code&gt;true&lt;/code&gt; and can only be used in the &lt;code&gt;MatchBody&lt;/code&gt; part when tracing. If the process trace flag &lt;code&gt;silent&lt;/code&gt; is active, the &lt;code&gt;return_from&lt;/code&gt; trace message is inhibited.</source>
          <target state="translated">原因 &lt;code&gt;return_from&lt;/code&gt; のトレースメッセージは、現在の関数からの復帰時に送信されます。引数を &lt;code&gt;MatchBody&lt;/code&gt; ず、 &lt;code&gt;true&lt;/code&gt; を返し、トレース時にMatchBodyパーツでのみ使用できます。プロセストレースフラグ &lt;code&gt;silent&lt;/code&gt; がアクティブな場合、 &lt;code&gt;return_from&lt;/code&gt; トレースメッセージは禁止されます。</target>
        </trans-unit>
        <trans-unit id="0f83a449788035c5daddd3c7cc544bc89f92b0e1" translate="yes" xml:space="preserve">
          <source>Causes all functions in the module to be exported.</source>
          <target state="translated">モジュール内のすべての関数をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="fe332b700f28356ff8a5f78d81f00f95837a3633" translate="yes" xml:space="preserve">
          <source>Causes all functions whose names match &lt;code&gt;..._test()&lt;/code&gt; or &lt;code&gt;..._test_()&lt;/code&gt; to be automatically exported from the module (unless testing is turned off, or the &lt;code&gt;EUNIT_NOAUTO&lt;/code&gt; macro is defined)</source>
          <target state="translated">名前が &lt;code&gt;..._test()&lt;/code&gt; または &lt;code&gt;..._test_()&lt;/code&gt; と一致するすべての関数をモジュールから自動的にエクスポートします（テストがオフになっているか、 &lt;code&gt;EUNIT_NOAUTO&lt;/code&gt; マクロが定義されている場合を除く）。</target>
        </trans-unit>
        <trans-unit id="cbf5a345cd73ab13c594b9386ee0ccc9585d1458" translate="yes" xml:space="preserve">
          <source>Causes an incoming CER to be answered with the specified Result-Code.</source>
          <target state="translated">指定された結果コードで着信 CER に応答します。</target>
        </trans-unit>
        <trans-unit id="bfdce3d3f20fa4bdb35120d035e253a72f1f27ab" translate="yes" xml:space="preserve">
          <source>Causes an incoming CER to be discarded without CEA being sent.</source>
          <target state="translated">着信CERがCEAを送信せずに破棄されるようにします。</target>
        </trans-unit>
        <trans-unit id="1c84a25f88cef95a969186ffd086cc21cc0bdce3" translate="yes" xml:space="preserve">
          <source>Causes errors to be printed as they occur. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">エラーが発生すると、エラーが出力されます。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8faf1fc25487a79ecf11509cc8431e2ab3c9529c" translate="yes" xml:space="preserve">
          <source>Causes errors/warnings to be printed as they occur.</source>
          <target state="translated">エラー/警告が発生したときに印刷されます。</target>
        </trans-unit>
        <trans-unit id="77b4c47a390eff838ecbf5032f6fac69686fec82" translate="yes" xml:space="preserve">
          <source>Causes more verbose information from the compiler describing what it is doing.</source>
          <target state="translated">コンパイラが何をしているかを説明するために、より冗長な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="00e83a1aaa3324cf8e746707d300d67e05f61a48" translate="yes" xml:space="preserve">
          <source>Causes more verbose information from the compiler, describing what it is doing.</source>
          <target state="translated">コンパイラが何をしているかを記述するために、コンパイラからより詳細な情報を提供します。</target>
        </trans-unit>
        <trans-unit id="0147f8a181b5f581485dbe15e687595d798e64d1" translate="yes" xml:space="preserve">
          <source>Causes parsing of the dictionary to terminate: any remaining content is ignored.</source>
          <target state="translated">辞書の解析を終了させます。</target>
        </trans-unit>
        <trans-unit id="d9b63b06428fd02872f1b766f95c730b7cc03fb1" translate="yes" xml:space="preserve">
          <source>Causes the UserMod:handle_disconnect/2 callback function to be invoked. See the megaco_user module for more info about the callback arguments.</source>
          <target state="translated">UserMod:handle_disconnect/2 コールバック関数を呼び出します。コールバック引数の詳細については megaco_user モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="19040404a924124b084f13439cbc9fccbe3088f6" translate="yes" xml:space="preserve">
          <source>Causes the analysis to be appended to the destination file. This option is only allowed with the &lt;code&gt;{dest, Destfile}&lt;/code&gt; option.</source>
          <target state="translated">分析を宛先ファイルに追加します。このオプションは、 &lt;code&gt;{dest, Destfile}&lt;/code&gt; オプションでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="b817b5ff6a5ae6d79528aae932bd44bb7e51b112" translate="yes" xml:space="preserve">
          <source>Causes the macro to behave as if it had never been defined.</source>
          <target state="translated">マクロが定義されていないかのように動作します。</target>
        </trans-unit>
        <trans-unit id="de3d942d1cb015f65f7810221dee3bf9248a3179" translate="yes" xml:space="preserve">
          <source>Causes the parse transformation function &lt;code&gt;Module:parse_transform/2&lt;/code&gt; to be applied to the parsed code before the code is checked for errors.</source>
          <target state="translated">コードのエラーをチェックする前に、解析変換関数 &lt;code&gt;Module:parse_transform/2&lt;/code&gt; が解析済みコードに適用されます。</target>
        </trans-unit>
        <trans-unit id="9b957bc52c303103671e3fd8a1393097cbb4ac1b" translate="yes" xml:space="preserve">
          <source>Causes the trace text dump to be appended to the destination file. This option is only allowed with the &lt;code&gt;{dump, Dumpfile}&lt;/code&gt; option.</source>
          <target state="translated">トレーステキストダンプを宛先ファイルに追加します。このオプションは、 &lt;code&gt;{dump, Dumpfile}&lt;/code&gt; オプションでのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="897e3b8b3636eede78c888d979db2f52548fa5c1" translate="yes" xml:space="preserve">
          <source>Causes warnings to be emitted for malformed format strings as arguments to &lt;code&gt;io:format&lt;/code&gt; and similar functions.</source>
          <target state="translated">&lt;code&gt;io:format&lt;/code&gt; および類似の関数への引数として、不正な形式の文字列に対して警告を発行します。</target>
        </trans-unit>
        <trans-unit id="468df461393d6efb98c52bfe23ce339db17eda3e" translate="yes" xml:space="preserve">
          <source>Causes warnings to be printed as they occur. Default is &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">警告が発生したときに警告を出力します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="0264d4e983281d4906c3269105e1222b5bb44053" translate="yes" xml:space="preserve">
          <source>Causes warnings to be treated as errors.</source>
          <target state="translated">警告がエラーとして扱われるようになります。</target>
        </trans-unit>
        <trans-unit id="3d0409736faa64f257591577d0f14d0f47ce2247" translate="yes" xml:space="preserve">
          <source>Causes warnings to be treated as errors. This option is supported since R13B04.</source>
          <target state="translated">警告をエラーとして扱います。このオプションは R13B04 以降でサポートされています。</target>
        </trans-unit>
        <trans-unit id="f259ea23d772c19d8bca466e8d68aee439724a78" translate="yes" xml:space="preserve">
          <source>Caveats: It is possible that in some intricate uses of macros, the automatic addition or removal of parentheses around uses or arguments could cause the resulting program to be rejected by the compiler; however, we have found no such case in existing code. Programs defining strange macros can usually not be read by this program, and in those cases, no changes will be made.</source>
          <target state="translated">警告。マクロの複雑な使用法によっては、使用法や引数の周りの括弧を自動的に追加したり削除したりすることで、結果のプログラムがコンパイラによって拒否される可能性がありますが、既存のコードではそのようなケースは見つかりませんでした。奇妙なマクロを定義しているプログラムは、通常、このプログラムでは読み込めませんし、その場合は変更は行われません。</target>
        </trans-unit>
        <trans-unit id="cd09cc5afdfaee26581cf1607b738318f0a04c65" translate="yes" xml:space="preserve">
          <source>Certain number ranges are unused in the Unicode standard and certain ranges are even deemed invalid. The most notable invalid range is 16#D800-16#DFFF, as the UTF-16 encoding does not allow for encoding of these numbers. This is possibly because the UTF-16 encoding standard, from the beginning, was expected to be able to hold all Unicode characters in one 16-bit entity, but was then extended, leaving a hole in the Unicode range to handle backward compatibility.</source>
          <target state="translated">特定の数値範囲は Unicode 標準では使われておらず、特定の範囲は無効とみなされています。最も顕著な無効範囲は 16#D800-16#DFFF で、UTF-16 エン コ ーデ ィ ン グでは こ れ ら の数値のエン コ ーデ ィ ン グは許 さ れていません。これはおそらく、UTF-16エンコーディング標準が最初から、1つの16ビット実体の中にすべてのUnicode文字を保持できることが期待されていたのですが、その後拡張され、下位互換性を扱うためにUnicode範囲に穴を残してしまったためです。</target>
        </trans-unit>
        <trans-unit id="5d3c10b1e796e5a14360b76e7498544801074c9d" translate="yes" xml:space="preserve">
          <source>Certain rules are assigned precedence: each rule gets its precedence from the last terminal symbol mentioned in the right hand side of the rule. It is also possible to declare precedence for non-terminals, &quot;one level up&quot;. This is practical when an operator is overloaded (see also example 3 below).</source>
          <target state="translated">特定のルールには優先順位が割り当てられています:各ルールは、ルールの右側にある最後のターミナルシンボルから優先順位を取得します。非終端記号の優先順位を「1レベル上」と宣言することも可能です。これは、演算子がオーバーロードされている場合に実用的です(下記の例3も参照してください)。</target>
        </trans-unit>
        <trans-unit id="3180f1c1f32b65006b85da77cea65d80026bae04" translate="yes" xml:space="preserve">
          <source>Certain test cases can be skipped, for example, if you know beforehand that a specific test case fails. The reason can be functionality that is not yet implemented, a bug that is known but not yet fixed, or some functionality that does not work or is not applicable on a specific platform.</source>
          <target state="translated">特定のテストケースが失敗することが事前にわかっている場合など、特定のテストケースをスキップすることができます。その理由としては、まだ実装されていない機能、既知のバグがあるがまだ修正されていない、あるいは特定のプラットフォームでは動作しない、あるいは適用できない機能などが考えられます。</target>
        </trans-unit>
        <trans-unit id="999e5e7507ba94a1d7631bcf4c10334915590194" translate="yes" xml:space="preserve">
          <source>Certificate has been revoked.</source>
          <target state="translated">証明書が失効しました。</target>
        </trans-unit>
        <trans-unit id="0b6eec6ad7c2348607b9e4b41754fcd255f1c17a" translate="yes" xml:space="preserve">
          <source>Certificate is no longer valid as its expiration date has passed.</source>
          <target state="translated">証明書の有効期限が過ぎているため、証明書の有効期限が切れています。</target>
        </trans-unit>
        <trans-unit id="69417444a01d0d453bf4da2f0da7701629e5a93c" translate="yes" xml:space="preserve">
          <source>Certificate issuer name does not match the name of the issuer certificate in the chain.</source>
          <target state="translated">証明書の発行者名がチェーン内の発行者証明書の名前と一致しません。</target>
        </trans-unit>
        <trans-unit id="8ab1754189014a0bc3712d551c0d0331beb34096" translate="yes" xml:space="preserve">
          <source>Certificate key is used in an invalid way according to the key-usage extension.</source>
          <target state="translated">証明書の鍵が、鍵利用の拡張子に応じて無効な方法で使用されています。</target>
        </trans-unit>
        <trans-unit id="680c591d0862d9b1063d06f96b583acb5de4ebd3" translate="yes" xml:space="preserve">
          <source>Certificate was not signed by its issuer certificate in the chain.</source>
          <target state="translated">証明書は、チェーン内のその発行者証明書によって署名されていませんでした。</target>
        </trans-unit>
        <trans-unit id="a9bc03e07fc3770d504d681b695e6fed1e572534" translate="yes" xml:space="preserve">
          <source>Certificate, required to have the basic constraints extension, does not have a basic constraints extension.</source>
          <target state="translated">証明書、基本的な制約の拡張子を持つ必要がありますが、基本的な制約の拡張子を持っていません。</target>
        </trans-unit>
        <trans-unit id="59b70cee319b6c2654812c5bf036b5f85bf580e7" translate="yes" xml:space="preserve">
          <source>Certificates and encrypted keys</source>
          <target state="translated">証明書と暗号化された鍵</target>
        </trans-unit>
        <trans-unit id="cb6957d832f13c5b979dae257330fa5af06b6aa5" translate="yes" xml:space="preserve">
          <source>Certificates are issued by Certification Authorities (CAs) only. A handful of top CAs in the world issue root certificates. You can examine several of these certificates by clicking through the menus of your web browser.</source>
          <target state="translated">証明書は、認証局(CA)のみが発行します。ルート証明書を発行しているのは、世界でもほんの一握りのトップ認証局です。これらの証明書のいくつかは、ウェブブラウザのメニューをクリックして調べることができます。</target>
        </trans-unit>
        <trans-unit id="3ce54cf97f873be5bebccb8e6c1d864f3b0db087" translate="yes" xml:space="preserve">
          <source>Certificates can be decoded as usual:</source>
          <target state="translated">証明書は通常通りデコードできます。</target>
        </trans-unit>
        <trans-unit id="92db73edd7e65422b778bdc23c60b96a0a395ba3" translate="yes" xml:space="preserve">
          <source>Certificates using weak (md5) digests may also cause problems in TLS. Although TLS 1.2 has an extension for specifying which type of signatures are accepted, and in FIPS mode the ssl application will use it properly, most TLS implementations ignore this extension and simply send whatever certificates they were configured with.</source>
          <target state="translated">弱い (md5)ダイジェストを使った証明書も、TLS で問題を起こす可能性があります。TLS 1.2 には、どのタイプの署名を受け入れるかを指定するための拡張機能があり、FIPS モードでは ssl アプリケーションはそれを適切に使用しますが、ほとんどの TLS 実装ではこの拡張機能は無視され、設定されている証明書は何でも単に送信されます。</target>
        </trans-unit>
        <trans-unit id="003f0acfc90ac4e6ff2e70f00b581c216de026fc" translate="yes" xml:space="preserve">
          <source>Certificates: RSA and ECDSA keys</source>
          <target state="translated">証明書。RSA および ECDSA 鍵</target>
        </trans-unit>
        <trans-unit id="6a803e5d1d5407c176b6adb93c4ec23f4ef3c32f" translate="yes" xml:space="preserve">
          <source>Chakma</source>
          <target state="translated">Chakma</target>
        </trans-unit>
        <trans-unit id="5e052ac9c7fd6c9d46817ea48b907dbb7047ae81" translate="yes" xml:space="preserve">
          <source>Cham</source>
          <target state="translated">Cham</target>
        </trans-unit>
        <trans-unit id="7286ab5f88d6d6d36d7cd5f44676cfc60c5f9003" translate="yes" xml:space="preserve">
          <source>Change active trace pattern globally on all trace nodes.</source>
          <target state="translated">すべてのトレース ノードでアクティブなトレース パターンをグローバルに変更します。</target>
        </trans-unit>
        <trans-unit id="3dd3f919f82791c255901c8a00754ab8bbb9e876" translate="yes" xml:space="preserve">
          <source>Change configuration parameter &lt;code&gt;lines&lt;/code&gt; with text-based presentation. Before the change, 10 lines are presented as follows:</source>
          <target state="translated">テキストベースの表示で構成パラメーターの &lt;code&gt;lines&lt;/code&gt; を変更します。変更前は、次のように10行が表示されています。</target>
        </trans-unit>
        <trans-unit id="c48fe199607ed82477a3bc92a81b82652b6351b0" translate="yes" xml:space="preserve">
          <source>Change directory into the top directory of the Erlang/OTP source tree.</source>
          <target state="translated">ディレクトリをErlang/OTPソースツリーのトップディレクトリに変更します。</target>
        </trans-unit>
        <trans-unit id="c23d69ee8e32cac337611be5b332231d09c49939" translate="yes" xml:space="preserve">
          <source>Change the &lt;code&gt;&lt;a href=&quot;#Callback%20Module&quot;&gt; &lt;strong&gt;callback module&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; for the running server. This can be done during any &lt;strong&gt;state transition&lt;/strong&gt;, whether it is a &lt;strong&gt;state change&lt;/strong&gt; or not, but it can</source>
          <target state="translated">実行中のサーバーの &lt;code&gt;&lt;a href=&quot;#Callback%20Module&quot;&gt; &lt;strong&gt;callback module&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; を変更します。これは、任意の時に行うことができる&lt;strong&gt;状態遷移&lt;/strong&gt;それがあるかどうか、&lt;strong&gt;状態変化&lt;/strong&gt;かどうか、それができ &lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="72d924e009393c56b1a8ab6dc037cbebf547a8a1" translate="yes" xml:space="preserve">
          <source>Change the array size. If &lt;code&gt;Size&lt;/code&gt; is not a non-negative integer, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;. If the specified array has fixed size, also the resulting array has fixed size.</source>
          <target state="translated">配列サイズを変更します。 &lt;code&gt;Size&lt;/code&gt; が負でない整数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。指定された配列が固定サイズの場合、結果の配列も固定サイズになります。</target>
        </trans-unit>
        <trans-unit id="e7a199ef9b5d9d2c5eb0397d8b3600da554f2bdd" translate="yes" xml:space="preserve">
          <source>Change the mib server cache &lt;code&gt;age&lt;/code&gt; property.</source>
          <target state="translated">MIBサーバキャッシュの変更 &lt;code&gt;age&lt;/code&gt; プロパティを。</target>
        </trans-unit>
        <trans-unit id="c9751694da7f73924c4340976c6c033e21cb85c3" translate="yes" xml:space="preserve">
          <source>Change the mib server cache &lt;code&gt;gclimit&lt;/code&gt; property.</source>
          <target state="translated">mibサーバーのキャッシュ &lt;code&gt;gclimit&lt;/code&gt; プロパティを変更します。</target>
        </trans-unit>
        <trans-unit id="e084ea3f5824de0afa0039d0b4e556968aed9ea5" translate="yes" xml:space="preserve">
          <source>Change the pid of the note-store process. This is used when the server re-starts the note_store (e.g. after a crach).</source>
          <target state="translated">note_storeプロセスのpidを変更します。これは、サーバがノートストアを再起動するときに使用されます (例:クラッシュ後)。</target>
        </trans-unit>
        <trans-unit id="f662c37eeb5824eb8f0f0ddeca89cbddc590f1f1" translate="yes" xml:space="preserve">
          <source>Change the table variable of last identifier used. Since multiple writes might occur at the same time this value may already have been changed by to an identifier larger that the one we got. In this case we can continue; otherwise, we need to change it to the identifier we got.</source>
          <target state="translated">最後に使用された識別子のテーブル変数を変更します。複数の書き込みが同時に発生する可能性があるので、この値はすでに取得した識別子よりも大きな識別子に変更されている可能性があります。そうでなければ、取得した識別子に変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="341bfe617120dadefc9fcb3d22fe992700ca08f9" translate="yes" xml:space="preserve">
          <source>Change the verbosity of a running network interface process.</source>
          <target state="translated">実行中のネットワーク・インターフェース・プロセスの冗長性を変更します。</target>
        </trans-unit>
        <trans-unit id="02a9b0ba8593dbfae3c339a44c3092bcba3b8671" translate="yes" xml:space="preserve">
          <source>Change the verbosity of the network interface process.</source>
          <target state="translated">ネットワーク・インターフェース・プロセスの冗長性を変更します。</target>
        </trans-unit>
        <trans-unit id="ff6b6a8f375eca0b9e425530fea55372fbd3365c" translate="yes" xml:space="preserve">
          <source>Changes configuration for a TFTP daemon, server, or client process.</source>
          <target state="translated">TFTP デーモン、サーバー、またはクライアントプロセスの設定を変更します。</target>
        </trans-unit>
        <trans-unit id="f16ea5025d3ec69b9225203c8d7c9acd2b6b84ea" translate="yes" xml:space="preserve">
          <source>Changes configuration for all TFTP daemon processes.</source>
          <target state="translated">すべての TFTP デーモンプロセスの設定を変更します。</target>
        </trans-unit>
        <trans-unit id="b32da3ba11eaa3c316e57b6c769c2daab761c896" translate="yes" xml:space="preserve">
          <source>Changes configuration for all TFTP server processes.</source>
          <target state="translated">すべてのTFTPサーバプロセスの設定を変更します。</target>
        </trans-unit>
        <trans-unit id="8482f68d74594da4f2fd3456f32fb4a41a18bd39" translate="yes" xml:space="preserve">
          <source>Changes directory on remote host.</source>
          <target state="translated">リモートホスト上のディレクトリを変更します。</target>
        </trans-unit>
        <trans-unit id="d281ca109e76e6981bff271db8f62dc625be8e9c" translate="yes" xml:space="preserve">
          <source>Changes file information. Returns &lt;code&gt;ok&lt;/code&gt; if successful, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;. &lt;code&gt;FileInfo&lt;/code&gt; is a record &lt;code&gt;file_info&lt;/code&gt;, defined in the Kernel include file &lt;code&gt;file.hrl&lt;/code&gt;. Include the following directive in the module from which the function is called:</source>
          <target state="translated">ファイル情報を変更します。成功した場合は &lt;code&gt;ok&lt;/code&gt; 、それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。 &lt;code&gt;FileInfo&lt;/code&gt; は、カーネルインクルードファイル &lt;code&gt;file.hrl&lt;/code&gt; で定義されているレコード &lt;code&gt;file_info&lt;/code&gt; です。関数の呼び出し元のモジュールに次のディレクティブを含めます。</target>
        </trans-unit>
        <trans-unit id="c8cf0fa0868a33f5588f4a5b5170d1fcd8206179" translate="yes" xml:space="preserve">
          <source>Changes from RFC 3588</source>
          <target state="translated">RFC 3588からの変更点</target>
        </trans-unit>
        <trans-unit id="2185d4fc37add3289e7fc270b3db893f925e8611" translate="yes" xml:space="preserve">
          <source>Changes group of a file. See &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルのグループを変更します。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="03a9c85cc9b1feb4f5518bdc78b94b4ea466deb3" translate="yes" xml:space="preserve">
          <source>Changes owner and group of a file. See &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルの所有者とグループを変更します。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="405ee5678303f5e16347afc4ce653405b2bad93d" translate="yes" xml:space="preserve">
          <source>Changes owner of a file. See &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルの所有者を変更します。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="073a53e6a3aecdc3f5cd1a10f6cb02b7c344399c" translate="yes" xml:space="preserve">
          <source>Changes permissions of a file. See &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルの権限を変更します。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="bbd474b5d467916b0bc9e853a88f7bd55bc3b1dd" translate="yes" xml:space="preserve">
          <source>Changes the array size to that reported by &lt;code&gt;&lt;a href=&quot;#sparse_size-1&quot;&gt;sparse_size/1&lt;/a&gt;&lt;/code&gt;. If the specified array has fixed size, also the resulting array has fixed size.</source>
          <target state="translated">配列サイズを &lt;code&gt;&lt;a href=&quot;#sparse_size-1&quot;&gt;sparse_size/1&lt;/a&gt;&lt;/code&gt; によって報告されたサイズに変更します。指定された配列が固定サイズの場合、結果の配列も固定サイズになります。</target>
        </trans-unit>
        <trans-unit id="42e8e1bf8b6b458b020c58f0d7cf5e61ace38032" translate="yes" xml:space="preserve">
          <source>Changes the callback module to &lt;code&gt;NewModule&lt;/code&gt; which will be used when calling all subsequent &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callbacks&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コールバックモジュールを &lt;code&gt;NewModule&lt;/code&gt; に変更します。これは、後続のすべての &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callbacks&lt;/a&gt;&lt;/code&gt; 呼び出すときに使用されます。</target>
        </trans-unit>
        <trans-unit id="16b1291ef2ad9b4aec43c99d7e1e7cba0334731f" translate="yes" xml:space="preserve">
          <source>Changes the configuration parameters of the tool during runtime. Allowed parameters are &lt;code&gt;lines&lt;/code&gt;, &lt;code&gt;interval&lt;/code&gt;, &lt;code&gt;accumulate&lt;/code&gt;, and &lt;code&gt;sort&lt;/code&gt;.</source>
          <target state="translated">実行時にツールの構成パラメーターを変更します。許可されるパラメーターは、 &lt;code&gt;lines&lt;/code&gt; 、 &lt;code&gt;interval&lt;/code&gt; 、 &lt;code&gt;accumulate&lt;/code&gt; 、および &lt;code&gt;sort&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="23248a37a3d67f459527886d08feb41c5630ae58" translate="yes" xml:space="preserve">
          <source>Changes the controlling process of &lt;code&gt;Z&lt;/code&gt; to &lt;code&gt;Pid&lt;/code&gt;, which must be a local process.</source>
          <target state="translated">&lt;code&gt;Z&lt;/code&gt; の制御プロセスを &lt;code&gt;Pid&lt;/code&gt; に変更します。これはローカルプロセスでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b2bcd01e499841b88e35ebb5e2f95e2bb587e363" translate="yes" xml:space="preserve">
          <source>Changes the current key to another key. Works like &lt;code&gt;cd&lt;/code&gt;. The key can be specified as a relative path or as an absolute path, starting with &lt;code&gt;\.&lt;/code&gt;</source>
          <target state="translated">現在のキーを別のキーに変更します。 &lt;code&gt;cd&lt;/code&gt; のように動作します。キーは、 &lt;code&gt;\.&lt;/code&gt; で始まる相対パスまたは絶対パスとして指定できます。</target>
        </trans-unit>
        <trans-unit id="81dc09e780693aae3b8c40d802b20f2d68ebb91f" translate="yes" xml:space="preserve">
          <source>Changes the engine id for a target in the &lt;code&gt;snmpTargetAddrTable&lt;/code&gt;. If notifications are sent as Inform requests to a target, its engine id must be set.</source>
          <target state="translated">&lt;code&gt;snmpTargetAddrTable&lt;/code&gt; 内のターゲットのエンジンIDを変更します。通知がInformリクエストとしてターゲットに送信される場合、そのエンジンIDを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="82f302677f18eacd93a3f042d9f2ce8910208cf5" translate="yes" xml:space="preserve">
          <source>Changes the file transfer type.</source>
          <target state="translated">ファイル転送の種類を変更します。</target>
        </trans-unit>
        <trans-unit id="3c0a7cde930b2e8e077e329dea2a405f76520b4a" translate="yes" xml:space="preserve">
          <source>Changes the internal debug level of Mnesia. For details, see &lt;code&gt;&lt;a href=&quot;#configuration_parameters&quot;&gt;Section Configuration Parameters&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Mnesiaの内部デバッグレベルを変更します。詳細については、「 &lt;code&gt;&lt;a href=&quot;#configuration_parameters&quot;&gt;Section Configuration Parameters&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="27ead72514dc8602f8f4d4399518e861eb941dcb" translate="yes" xml:space="preserve">
          <source>Changes the log size of the Audit Trail Log. The application must be configured to use the audit trail log function. Please refer to disk_log(3) in Kernel Reference Manual for a description of how to change the log size.</source>
          <target state="translated">監査証跡ログのログサイズを変更します。アプリケーションが監査証跡ログ機能を使用するように設定されている必要があります。ログサイズの変更方法については、カーネル リファレンス マニュアルの disk_log(3)を参照してください。</target>
        </trans-unit>
        <trans-unit id="edf0f52ab6ef854a099ffb48ffcc61abe0679fbd" translate="yes" xml:space="preserve">
          <source>Changes the minimum binary virtual heap size for the calling process.</source>
          <target state="translated">呼び出しプロセスの最小バイナリ仮想ヒープサイズを変更します。</target>
        </trans-unit>
        <trans-unit id="cd62e646ddb7759d296c1116e9d9b99ab0d39a03" translate="yes" xml:space="preserve">
          <source>Changes the minimum heap size for the calling process.</source>
          <target state="translated">呼び出しプロセスの最小ヒープサイズを変更します。</target>
        </trans-unit>
        <trans-unit id="02d140eecd4ba1c23ab94e5ac346ef7891994f87" translate="yes" xml:space="preserve">
          <source>Changes the modification and access times of a file. See &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルの変更時刻とアクセス時刻を変更します。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="17bbc9dee276ef0c87d8c99c66cd5c924b4de477" translate="yes" xml:space="preserve">
          <source>Changes the modification and last access times of a file. See &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルの変更時刻と最終アクセス時刻を変更します。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="67cc7746cb125f758137fcc8fa2dcf5873b3c571" translate="yes" xml:space="preserve">
          <source>Changes the name of the rule emitted to &lt;code&gt;Target&lt;/code&gt;.</source>
          <target state="translated">出力されたルールの名前を &lt;code&gt;Target&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="193917ddeda5009fd378d28653931edd2c5181f2" translate="yes" xml:space="preserve">
          <source>Changes the permission for &lt;code&gt;Application&lt;/code&gt; to run at the current node. The application must be loaded using &lt;code&gt;load/1,2&lt;/code&gt; for the function to have effect.</source>
          <target state="translated">現在のノードで実行する &lt;code&gt;Application&lt;/code&gt; の権限を変更します。関数を有効にするには、 &lt;code&gt;load/1,2&lt;/code&gt; を使用してアプリケーションをロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="d8bf655f410bfe8330e2a69ecdd33a05eb4542f2" translate="yes" xml:space="preserve">
          <source>Changes the request limit.</source>
          <target state="translated">リクエストの上限を変更します。</target>
        </trans-unit>
        <trans-unit id="19a54b6d38821902fb1eacf32e853750b8478776" translate="yes" xml:space="preserve">
          <source>Changes the return value to &lt;code&gt;{Term, Used}&lt;/code&gt; where &lt;code&gt;Used&lt;/code&gt; is the number of bytes actually read from &lt;code&gt;Binary&lt;/code&gt;.</source>
          <target state="translated">戻り値を &lt;code&gt;{Term, Used}&lt;/code&gt; に変更します &lt;code&gt;Used&lt;/code&gt; は &lt;code&gt;Binary&lt;/code&gt; から実際に読み取られたバイト数です。</target>
        </trans-unit>
        <trans-unit id="8da18ff00c71fe469f9ac5c3e80397ef5102bcce" translate="yes" xml:space="preserve">
          <source>Changes the run-time Audit Trail log type.</source>
          <target state="translated">実行時のAudit Trailログタイプを変更します。</target>
        </trans-unit>
        <trans-unit id="fa6a33e3a50eb4e8a5a042f9d67e51582d656e1d" translate="yes" xml:space="preserve">
          <source>Changes the size of a binary &lt;code&gt;bin&lt;/code&gt;. The source binary can be read-only, in which case it is left untouched and a mutable copy is allocated and assigned to &lt;code&gt;*bin&lt;/code&gt;.</source>
          <target state="translated">バイナリ &lt;code&gt;bin&lt;/code&gt; サイズを変更します。ソースバイナリは読み取り専用にすることができます。その場合は変更されず、変更可能なコピーが割り当てられて &lt;code&gt;*bin&lt;/code&gt; に割り当てられます。</target>
        </trans-unit>
        <trans-unit id="ec2c109c81bf34df1be6bcc026fe60d99cef5d65" translate="yes" xml:space="preserve">
          <source>Changes the size of a registry.</source>
          <target state="translated">レジストリのサイズを変更します。</target>
        </trans-unit>
        <trans-unit id="fc6e6d129d793f579ed4c60aaaa171440d20a874" translate="yes" xml:space="preserve">
          <source>Changes the size of an open log. For a halt log, the size can always be increased, but it cannot be decreased to something less than the current file size.</source>
          <target state="translated">開いているログのサイズを変更します。haltログの場合、サイズは常に大きくすることができますが、現在のファイルサイズよりも小さくすることはできません。</target>
        </trans-unit>
        <trans-unit id="f82528ca1f8c8d719ac1700782b4a886e8ae597b" translate="yes" xml:space="preserve">
          <source>Changes the threshold, given as a float, for disk space utilization.</source>
          <target state="translated">ディスクスペース使用率のしきい値を float で指定して変更します。</target>
        </trans-unit>
        <trans-unit id="498a56145635b463f4ddad568ba393252e6c5530" translate="yes" xml:space="preserve">
          <source>Changes the threshold, given as a float, for process memory allocation.</source>
          <target state="translated">プロセスのメモリ割り当てのしきい値を float で指定して変更します。</target>
        </trans-unit>
        <trans-unit id="d712fca6e04f8ba9e0d7ee48d15c49c58e523a70" translate="yes" xml:space="preserve">
          <source>Changes the threshold, given as a float, for system memory allocation.</source>
          <target state="translated">システム・メモリ割り当てのしきい値を float で指定して変更します。</target>
        </trans-unit>
        <trans-unit id="d9d3dfce0dcea93c7310c068f8122230c707b3b0" translate="yes" xml:space="preserve">
          <source>Changes the time interval, given in minutes, for the periodic disk space check.</source>
          <target state="translated">定期的なディスク容量チェックの時間間隔を分単位で変更します。</target>
        </trans-unit>
        <trans-unit id="fb5aaf2a5afc4687e64062ff6b8607ab256e62d0" translate="yes" xml:space="preserve">
          <source>Changes the time interval, given in minutes, for the periodic memory check.</source>
          <target state="translated">定期的なメモリチェックの時間間隔を分単位で変更します。</target>
        </trans-unit>
        <trans-unit id="f7648c6c0af0fc343ab1c979f02974a75f2a5ba0" translate="yes" xml:space="preserve">
          <source>Changes the timeout value, given in seconds, for memory checks.</source>
          <target state="translated">メモリチェックのタイムアウト値を秒単位で変更します。</target>
        </trans-unit>
        <trans-unit id="fa3f83c43cceb3bbc4bbcac9c93e8ca54d05df5d" translate="yes" xml:space="preserve">
          <source>Changes the value of option &lt;code&gt;head&lt;/code&gt; or &lt;code&gt;head_func&lt;/code&gt; for an owner of a disk log.</source>
          <target state="translated">ディスクログの所有者のオプション &lt;code&gt;head&lt;/code&gt; または &lt;code&gt;head_func&lt;/code&gt; の値を変更します。</target>
        </trans-unit>
        <trans-unit id="c3716e44ad0eada2a249938e42128b73f10a2e61" translate="yes" xml:space="preserve">
          <source>Changes the value of option &lt;code&gt;notify&lt;/code&gt; for an owner of a disk log.</source>
          <target state="translated">ディスクログの所有者のオプション &lt;code&gt;notify&lt;/code&gt; の値を変更します。</target>
        </trans-unit>
        <trans-unit id="4ca015ff8fe3a6b3251a2977c4f3b1787fb7732a" translate="yes" xml:space="preserve">
          <source>Changes the working directory at the remote server to &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">リモートサーバーの作業ディレクトリを &lt;code&gt;Dir&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="b86e20a82126b1241541a7af991aecce7c5f5203" translate="yes" xml:space="preserve">
          <source>Changes the working directory to &lt;code&gt;Dir&lt;/code&gt; for the local client.</source>
          <target state="translated">ローカルクライアントの作業ディレクトリを &lt;code&gt;Dir&lt;/code&gt; に変更します。</target>
        </trans-unit>
        <trans-unit id="146996eed1440f5e90b1b4de2e12e077b5250c53" translate="yes" xml:space="preserve">
          <source>Changes working directory to &lt;code&gt;Dir&lt;/code&gt;, which can be a relative name, and then prints the name of the new working directory.</source>
          <target state="translated">作業ディレクトリを &lt;code&gt;Dir&lt;/code&gt; に変更します。これは相対名にすることができ、新しい作業ディレクトリの名前を出力します。</target>
        </trans-unit>
        <trans-unit id="b7c76b46af51ccf8d7f82302ce30470e158c167b" translate="yes" xml:space="preserve">
          <source>Changing Child Specifications</source>
          <target state="translated">子供の仕様変更</target>
        </trans-unit>
        <trans-unit id="a8a338fd17450383f174fd97f7c474118d4b1671" translate="yes" xml:space="preserve">
          <source>Changing Permissions for Reboot</source>
          <target state="translated">再起動時の権限の変更</target>
        </trans-unit>
        <trans-unit id="563a2787ce4f962782f878a83da7b186e82a5ab6" translate="yes" xml:space="preserve">
          <source>Changing Properties</source>
          <target state="translated">プロパティの変更</target>
        </trans-unit>
        <trans-unit id="c4ae19e16c08b52e2d4b044865ab21e4ec8819f8" translate="yes" xml:space="preserve">
          <source>Changing a zip archive is not supported. To add or remove a file from an archive, the whole archive must be recreated.</source>
          <target state="translated">zip アーカイブの変更はサポートされていません。アーカイブからファイルを追加または削除するには、アーカイブ全体を再作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="266e726d9d7185cbcaf36e4f24317e4e232beefc" translate="yes" xml:space="preserve">
          <source>Changing an application configuration by updating the &lt;code&gt;env&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file is an instance of changing an application specification, see the previous section.</source>
          <target state="translated">&lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;env&lt;/code&gt; キーを更新してアプリケーション構成を変更することは、アプリケーション仕様を変更することのインスタンスです。前のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="312f68bb8dd2023932d8d7051ef64e029badbae2" translate="yes" xml:space="preserve">
          <source>Changing code for a program written in another programming language than Erlang, for example, a port program, is application-dependent and OTP provides no special support for it.</source>
          <target state="translated">Erlang以外のプログラミング言語で書かれたプログラムのコードを変更する、例えば移植プログラムなどはアプリケーションに依存します。</target>
        </trans-unit>
        <trans-unit id="e1a45efbe4b876cddaf41c842c638f7af4dac4f7" translate="yes" xml:space="preserve">
          <source>Changing code in running systems.</source>
          <target state="translated">実行中のシステムでコードを変更する</target>
        </trans-unit>
        <trans-unit id="89bc28f50275938cf54774b906a072619b7b5f17" translate="yes" xml:space="preserve">
          <source>Changing inbound binary and percent-encoding of URIs</source>
          <target state="translated">URIのインバウンドのバイナリとパーセントエンコーディングの変更</target>
        </trans-unit>
        <trans-unit id="0069b33f35595350f463876e0dc7cd74bd7efb23" translate="yes" xml:space="preserve">
          <source>Changing permission for reboot</source>
          <target state="translated">再起動時のパーミッションの変更</target>
        </trans-unit>
        <trans-unit id="f26661251195e16b4f64b3465e31c5c61fc4f591" translate="yes" xml:space="preserve">
          <source>Changing the &lt;code&gt;Modules&lt;/code&gt; field of the child specification can affect the release handling process itself, as this field is used to identify which processes are affected when doing a synchronized code replacement.</source>
          <target state="translated">子仕様の &lt;code&gt;Modules&lt;/code&gt; フィールドを変更すると、リリース処理プロセス自体に影響を与える可能性があります。このフィールドは、同期コード置換を行うときに影響を受けるプロセスを識別するために使用されるためです。</target>
        </trans-unit>
        <trans-unit id="2102ea37ff2bfb3fffd7cfdd154c334ce7f36524" translate="yes" xml:space="preserve">
          <source>Changing the callback module</source>
          <target state="translated">コールバックモジュールの変更</target>
        </trans-unit>
        <trans-unit id="004667a156f84352e632a54416d314f1fab8c554" translate="yes" xml:space="preserve">
          <source>Changing the callback module does not affect the &lt;strong&gt;state transition&lt;/strong&gt; in any way, it only changes which module that handles the events. Be aware that all relevant callback functions in &lt;code&gt;NewModule&lt;/code&gt; such as the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;NewModule:code_change/4&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#Module:format_status-2&quot;&gt; NewModule:format_status/2 &lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt; NewModule:terminate/3 &lt;/a&gt;&lt;/code&gt; must be able to handle the state and data from the old module.</source>
          <target state="translated">コールバックモジュールを変更しても、&lt;strong&gt;状態遷移&lt;/strong&gt;にはまったく影響しません。イベントを処理するモジュールのみが変更されます。 &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#Module:code_change-4&quot;&gt;NewModule:code_change/4&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#Module:format_status-2&quot;&gt; NewModule:format_status/2 &lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt; NewModule:terminate/3 &lt;/a&gt;&lt;/code&gt; など、 &lt;code&gt;NewModule&lt;/code&gt; の関連するすべてのコールバック関数は、古いモジュールの状態とデータを処理できる必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="4d50c67fe4288961fc50484941baf88059761148" translate="yes" xml:space="preserve">
          <source>Changing the values can make a connection less secure. Do not change unless you know exactly what you are doing. If you do not understand the values then you are not supposed to change them.</source>
          <target state="translated">価値観を変えることで、接続の安全性が悪くなることがあります。自分が何をしているのかを正確に理解していない限り、変更してはいけません。値を理解していないのであれば、値を変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="18e03e2a37ba37df713f9665ef752fb8b40fc1e8" translate="yes" xml:space="preserve">
          <source>Channels</source>
          <target state="translated">Channels</target>
        </trans-unit>
        <trans-unit id="0d3ea4e72253a3df4980efbacc5b0334f751af27" translate="yes" xml:space="preserve">
          <source>Channels come in the following three flavors:</source>
          <target state="translated">チャンネルは以下の3つのフレーバーがあります。</target>
        </trans-unit>
        <trans-unit id="c7c394b0a636c8b1d30cc5034081e1f766db234d" translate="yes" xml:space="preserve">
          <source>Channels implemented with the &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt; ssh_client_channel&lt;/a&gt;&lt;/code&gt; behavior do not normally need to call this function as flow control is handled by the behavior. The behavior adjusts the window every time the callback &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt; handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; returns after processing channel data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt; ssh_client_channel&lt;/a&gt;&lt;/code&gt; ビヘイビアーで実装されたチャネルは、フロー制御がビヘイビアーによって処理されるため、通常、この関数を呼び出す必要はありません。この動作は、チャネルデータの処理後にコールバック &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt; handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; が戻るたびにウィンドウを調整します。</target>
        </trans-unit>
        <trans-unit id="b08ff67d0c406c6c0b9f34b81df7ae485e892c7b" translate="yes" xml:space="preserve">
          <source>Channels implemented with the &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; behavior do not normally need to call this function as flow control is handled by the behavior. The behavior adjusts the window every time the callback &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; returns after processing channel data.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; ビヘイビアーで実装されたチャネルは、フロー制御がビヘイビアーによって処理されるため、通常この関数を呼び出す必要はありません。この動作は、チャネルデータの処理後に、コールバック &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; が戻るたびにウィンドウを調整します。</target>
        </trans-unit>
        <trans-unit id="a048c40435a29a09ca42526de00adf2b52f9c645" translate="yes" xml:space="preserve">
          <source>Channels implementing a shell and command execution on the server side are to handle the following messages that can be sent by client- channel processes.</source>
          <target state="translated">サーバ側のシェルとコマンド実行を実装したチャンネルは、クライアント側のチャンネルプロセスが送信することができる以下のメッセージを処理します。</target>
        </trans-unit>
        <trans-unit id="699ab27900d549007002c44489fb26aaaf5d735a" translate="yes" xml:space="preserve">
          <source>Chapter 10: &quot;Definition of Agent Net if&quot; is a reference chapter, which describes the Agent Net if function in detail.</source>
          <target state="translated">第10章「エージェントネットifの定義」は、エージェントネットifの機能を詳しく解説した参考章です。</target>
        </trans-unit>
        <trans-unit id="d34e1f73f52205aaa9e4a31eb68adc37cfabffb5" translate="yes" xml:space="preserve">
          <source>Chapter 11: &quot;Definition of Manager Net if&quot; is a reference chapter, which describes the Manager Net if function in detail.</source>
          <target state="translated">第11章「マネージャネットifの定義」は、マネージャネットifの機能を詳しく解説した参考章です。</target>
        </trans-unit>
        <trans-unit id="87eb31c5080d6da36ceb543fef1eea0ccd9ee696" translate="yes" xml:space="preserve">
          <source>Chapter 12: &quot;Advanced Agent Topics&quot; describes sub-agents, agent semantics, audit trail logging, and the consideration of distributed tables.</source>
          <target state="translated">第12章「高度なエージェントトピック」では、サブエージェント、エージェントセマンティクス、監査証跡ロギング、分散テーブルの考察について説明しています。</target>
        </trans-unit>
        <trans-unit id="fab3d91f87ac4c249e13bd0f9eaddaf278f8cb46" translate="yes" xml:space="preserve">
          <source>Chapter 2: &quot;Architecture&quot; describes the architecture and typical usage of the application.</source>
          <target state="translated">第2章「アーキテクチャ」では、アプリケーションのアーキテクチャと代表的な使い方を説明しています。</target>
        </trans-unit>
        <trans-unit id="4dec362af8eb375be39ac35a314af9fde73a60c2" translate="yes" xml:space="preserve">
          <source>Chapter 2: &quot;Functional Description&quot; describes the features and operation of the SNMP development toolkit. It includes topics on Sub-agents and MIB loading, Internal MIBs, and Traps.</source>
          <target state="translated">第2章「機能説明」では、SNMP開発ツールキットの機能と操作について説明します。サブエージェントとMIBのロード、内部MIB、およびTrapに関するトピックが含まれています。</target>
        </trans-unit>
        <trans-unit id="12470b53b219dfdab4f5572fb7579b7c8e09036a" translate="yes" xml:space="preserve">
          <source>Chapter 2: &quot;Tutorial&quot; provides a walk-through of the various parts of the application. The tutorial is based on &lt;code&gt;Jayson Vantuyl's&lt;/code&gt; article &lt;code&gt;http://souja.net/2009/04/making-sense-of-erlangs-event-tracer.html&lt;/code&gt;.</source>
          <target state="translated">第2章：「チュートリアル」では、アプリケーションのさまざまな部分について説明します。このチュートリアルは、 &lt;code&gt;Jayson Vantuyl's&lt;/code&gt; 記事 &lt;code&gt;http://souja.net/2009/04/making-sense-of-erlangs-event-tracer.html&lt;/code&gt; に基づいています。</target>
        </trans-unit>
        <trans-unit id="12fbe7a83897c503b79e7a85d14c7998722230ed" translate="yes" xml:space="preserve">
          <source>Chapter 2: &quot;Usage&quot; describes the architecture and typical usage of the application.</source>
          <target state="translated">第2章「利用方法」では、アプリケーションのアーキテクチャと代表的な利用方法を説明しています。</target>
        </trans-unit>
        <trans-unit id="f6750cafe062f4ffdbda997dc97d248a13107163" translate="yes" xml:space="preserve">
          <source>Chapter 3: &quot;Description&quot; describes the architecture and typical usage of the application.</source>
          <target state="translated">第3章「解説」では、アプリケーションのアーキテクチャや代表的な使い方を解説しています。</target>
        </trans-unit>
        <trans-unit id="7071f2577cd1de4aee0fdf89922409a7b2f03ef6" translate="yes" xml:space="preserve">
          <source>Chapter 3: &quot;Examples&quot; gives some usage examples</source>
          <target state="translated">第3章:「例題」では、いくつかの使用例を紹介しています。</target>
        </trans-unit>
        <trans-unit id="a799b757db57e54879af9f691a80d5a9a20be410" translate="yes" xml:space="preserve">
          <source>Chapter 3: &quot;Internal form and its encodings&quot; describes the internal form of Megaco/H.248 messages and its various encodings.</source>
          <target state="translated">第3章「内部形式とそのエンコーディング」では、Megaco/H.248メッセージの内部形式とその各種エンコーディングについて解説しています。</target>
        </trans-unit>
        <trans-unit id="6320c85576ee31d5c4d265a2793966bf19bacd19" translate="yes" xml:space="preserve">
          <source>Chapter 3: &quot;The MIB Compiler&quot; describes the features and the operation of the MIB compiler.</source>
          <target state="translated">第3章「MIBコンパイラ」では、MIBコンパイラの機能と動作について解説しています。</target>
        </trans-unit>
        <trans-unit id="54e610bf40a1883eb20d03a8c18d591dc86edf67" translate="yes" xml:space="preserve">
          <source>Chapter 4: &quot;Advanced examples&quot; gives some usage examples</source>
          <target state="translated">第4章:「高度な用例」では、いくつかの用例を紹介しています。</target>
        </trans-unit>
        <trans-unit id="25697c71de4f60fa3bac0727ea27496419a038db" translate="yes" xml:space="preserve">
          <source>Chapter 4: &quot;Running the application&quot; describes how to start and configure the application. Topics on how to debug the application are also included.</source>
          <target state="translated">第4章:「アプリケーションの実行」では、アプリケーションの起動方法と設定方法を説明します。また、アプリケーションのデバッグ方法についても説明しています。</target>
        </trans-unit>
        <trans-unit id="338e15bef9d6416cdf17b7925f4f2e350826208d" translate="yes" xml:space="preserve">
          <source>Chapter 4: &quot;Transport mechanisms&quot; describes how different mechanisms can be used to transport the Megaco/H.248 messages.</source>
          <target state="translated">第4章「トランスポートの仕組み」では、Megaco/H.248メッセージをトランスポートするために、さまざまな仕組みがどのように使用できるかを説明しています。</target>
        </trans-unit>
        <trans-unit id="597f072185d84ad8cc17379cf8e56394d84907cb" translate="yes" xml:space="preserve">
          <source>Chapter 5: &quot;Debugging&quot; describes tracing and debugging.</source>
          <target state="translated">第5章「デバッグ」では、トレースとデバッグについて説明しています。</target>
        </trans-unit>
        <trans-unit id="e7479821f3441c9357b1ca00c1e36bbd27cf97aa" translate="yes" xml:space="preserve">
          <source>Chapter 5: &quot;Definition of Agent Configuration Files&quot; is a reference chapter, which contains more detailed information about the agent configuration files.</source>
          <target state="translated">第5章「エージェント設定ファイルの定義」は、エージェント設定ファイルについてより詳細な情報が記載されている参考章です。</target>
        </trans-unit>
        <trans-unit id="22020ea76e2aac433ecfad203219d4675b24e48f" translate="yes" xml:space="preserve">
          <source>Chapter 6: &quot;Definition of Manager Configuration Files&quot; is a reference chapter, which contains more detailed information about the manager configuration files.</source>
          <target state="translated">第6章「マネージャ設定ファイルの定義」は、マネージャ設定ファイルについてより詳細な情報が記載されている参考章です。</target>
        </trans-unit>
        <trans-unit id="6cbf0856c33c9ecb975047c82a028295d945630c" translate="yes" xml:space="preserve">
          <source>Chapter 7: &quot;Agent Implementation Example&quot; describes how an MIB can be implemented with the SNMP Development Toolkit. Implementation examples are included.</source>
          <target state="translated">第7章「エージェントの実装例」では、SNMP開発ツールキットを使用してMIBを実装する方法を説明します。実装例が含まれています。</target>
        </trans-unit>
        <trans-unit id="076f34961e0e1c7d0516f0f540ffe3d6973fc2a2" translate="yes" xml:space="preserve">
          <source>Chapter 8: &quot;Instrumentation Functions&quot; describes how instrumentation functions should be defined in Erlang for the different operations.</source>
          <target state="translated">第8章:&quot;計装関数 &quot;では、Erlangでどのように計装関数を定義すべきかを説明しています。</target>
        </trans-unit>
        <trans-unit id="3d0f1ca136eed306def0b8a62ab682c35309444f" translate="yes" xml:space="preserve">
          <source>Chapter 9: &quot;Definition of Instrumentation Functions&quot; is a reference chapter which contains more detailed information about the instrumentation functions.</source>
          <target state="translated">第9章「計装機能の定義」は、計装機能についてより詳細な情報が記載されている参考章です。</target>
        </trans-unit>
        <trans-unit id="d53a53309918b4def88f4690959360fcb2d765d6" translate="yes" xml:space="preserve">
          <source>Character &lt;code&gt;*&lt;/code&gt; is an optional return suppression character. It provides a method to specify a field that is to be omitted.</source>
          <target state="translated">文字 &lt;code&gt;*&lt;/code&gt; はオプションの戻り抑制文字です。省略されるフィールドを指定する方法を提供します。</target>
        </trans-unit>
        <trans-unit id="10dc4e431a177556e53df60369a9fb871c823ce1" translate="yes" xml:space="preserve">
          <source>Character &lt;code&gt;~&lt;/code&gt; is written.</source>
          <target state="translated">文字 &lt;code&gt;~&lt;/code&gt; が書かれています。</target>
        </trans-unit>
        <trans-unit id="d4b7b30647ed82c58a1589c60ae3f8434718542a" translate="yes" xml:space="preserve">
          <source>Character class, which matches any of the characters &lt;code&gt;abc...&lt;/code&gt;. Character ranges are specified by a pair of characters separated by a &lt;code&gt;-&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;abc...&lt;/code&gt; いずれかの文字に一致する文字クラス。文字範囲は、 &lt;code&gt;-&lt;/code&gt; で区切られた1組の文字で指定されます。</target>
        </trans-unit>
        <trans-unit id="f62e465bcd7cce1acdf714047daba90806ba8a22" translate="yes" xml:space="preserve">
          <source>Character codes 0-127</source>
          <target state="translated">文字コード 0~127</target>
        </trans-unit>
        <trans-unit id="f3958ab5088befd2a44054cf1546542615ec1ba3" translate="yes" xml:space="preserve">
          <source>Character data can be combined from many sources, sometimes available in a mix of strings and binaries. Erlang has for long had the concept of &lt;code&gt;iodata&lt;/code&gt; or &lt;code&gt;iolist&lt;/code&gt;s, where binaries and lists can be combined to represent a sequence of bytes. In the same way, the Unicode-aware modules often allow for combinations of binaries and lists, where the binaries have characters encoded in UTF-8 and the lists contain such binaries or numbers representing Unicode code points:</source>
          <target state="translated">文字データは多くのソースから組み合わせることができ、文字列とバイナリの組み合わせで利用できることもあります。Erlangには長い間、 &lt;code&gt;iodata&lt;/code&gt; または &lt;code&gt;iolist&lt;/code&gt; の概念がありました。バイナリとリストを組み合わせて、バイトのシーケンスを表すことができます。同様に、Unicode対応モジュールは、バイナリとリストの組み合わせを許可することが多く、バイナリにはUTF-8でエンコードされた文字が含まれ、リストにはそのようなバイナリまたはUnicodeコードポイントを表す数値が含まれます。</target>
        </trans-unit>
        <trans-unit id="0b4a9d35669803e9f5dc2e6f444b82b65bbd17f0" translate="yes" xml:space="preserve">
          <source>Character with hex code hh</source>
          <target state="translated">16進数コードの文字 hh</target>
        </trans-unit>
        <trans-unit id="a5cfa12fd688cc50f0a4a2e82bc4a14c913cc7d9" translate="yes" xml:space="preserve">
          <source>Character with hex code hhh..</source>
          <target state="translated">16進数コードの文字 hhh...</target>
        </trans-unit>
        <trans-unit id="dbfc09d76b2751348746f5d0f726fbdddf63e42d" translate="yes" xml:space="preserve">
          <source>Character with hexadecimal representation XY</source>
          <target state="translated">16進数表現XYの文字</target>
        </trans-unit>
        <trans-unit id="9fb138816ff7cd1b28dff9249e50ecaf7aafc8d8" translate="yes" xml:space="preserve">
          <source>Character with hexadecimal representation; X... is one or more hexadecimal characters</source>
          <target state="translated">16進数表現の文字;X...は1つ以上の16進数文字です。</target>
        </trans-unit>
        <trans-unit id="85b6e08c1a055049545eb425b3ef82c285b56bad" translate="yes" xml:space="preserve">
          <source>Character with octal code 0dd</source>
          <target state="translated">8進数コード0ddの文字</target>
        </trans-unit>
        <trans-unit id="8c531bc02f5a4557270d589919d8d9d1c33dd84a" translate="yes" xml:space="preserve">
          <source>Character with octal code ddd, or back reference</source>
          <target state="translated">8進数コードddddd、またはバックリファレンスを持つ文字</target>
        </trans-unit>
        <trans-unit id="49c6c585b475f6a53492340855982d63e7868324" translate="yes" xml:space="preserve">
          <source>Character with octal representation XYZ, YZ or Z</source>
          <target state="translated">8進数表現のXYZ、YZ、またはZを持つ文字</target>
        </trans-unit>
        <trans-unit id="4d8bbe4ae1dec6f4b66388f0e7417e43a5ee9841" translate="yes" xml:space="preserve">
          <source>Characters are translated to and from UTF-8 encoding before they are written to or read from the file. A file opened in this way can be readable using function &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt;, as long as no data stored on the file lies beyond the ISO Latin-1 range (0..255), but failure occurs if the data contains Unicode code points beyond that range. The file is best read with the functions in the Unicode aware module &lt;code&gt;io(3)&lt;/code&gt;.</source>
          <target state="translated">文字は、ファイルへの書き込みまたはファイルからの読み取りの前に、UTF-8エンコーディングとの間で変換されます。この方法で開かれたファイルは、ファイルに格納されたデータがISO Latin-1の範囲（0..255）を超えない限り、関数 &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; を使用して読み取ることができますが、データにUnicodeコードポイントその範囲。ファイルは、Unicode対応モジュール &lt;code&gt;io(3)&lt;/code&gt; の関数で読み取るのが最適です。</target>
        </trans-unit>
        <trans-unit id="9f41db94f3c3858526bf2d9c0e2c82c748eb1ddb" translate="yes" xml:space="preserve">
          <source>Characters in &lt;code&gt;Target&lt;/code&gt; special to make(1) are quoted.</source>
          <target state="translated">&lt;code&gt;Target&lt;/code&gt; make（1）に特別な文字は引用されます。</target>
        </trans-unit>
        <trans-unit id="aa1179541f8808f873db5c57ac0dd4861f2fed75" translate="yes" xml:space="preserve">
          <source>Characters in an atom</source>
          <target state="translated">原子の中の文字</target>
        </trans-unit>
        <trans-unit id="483e7ec90fc725ea406b056294f684edfa8f5f09" translate="yes" xml:space="preserve">
          <source>Characters that are specified using octal or hexadecimal numbers are limited to certain values, as follows:</source>
          <target state="translated">8進数や16進数で指定する文字は、以下のように一定の値に制限されています。</target>
        </trans-unit>
        <trans-unit id="3b349ab83608db909f06144931bf465a076a5d43" translate="yes" xml:space="preserve">
          <source>Characters that can indicate line breaks are never treated in any special way when matching character classes, whatever line-ending sequence is in use, and whatever setting of options &lt;code&gt;PCRE_DOTALL&lt;/code&gt; and &lt;code&gt;PCRE_MULTILINE&lt;/code&gt; is used. A class such as [^a] always matches one of these characters.</source>
          <target state="translated">改行を示す可能性のある文字は、文字クラスの照合時、使用されている &lt;code&gt;PCRE_DOTALL&lt;/code&gt; 、およびオプションPCRE_DOTALLと &lt;code&gt;PCRE_MULTILINE&lt;/code&gt; の設定が使用されている場合は、特別な方法で処理されることはありません。[^ a]などのクラスは常にこれらの文字のいずれかに一致します。</target>
        </trans-unit>
        <trans-unit id="2d1edf9c232be69d7a016a8a3ba2ae3e44f4f6a1" translate="yes" xml:space="preserve">
          <source>Characters whose value is less than 256 can be defined by either of the two syntaxes for \x. There is no difference in the way they are handled. For example, \xdc is exactly the same as \x{dc}.</source>
          <target state="translated">256以下の値を持つ文字は、2つの構文のどちらかで定義することができます。扱い方に違いはありません。例えば、「\xdc」は、「\x{dc}」と全く同じです。</target>
        </trans-unit>
        <trans-unit id="2b130fd7c648fe09d9088ac10a3fa6dfa01ba612" translate="yes" xml:space="preserve">
          <source>Check if a message is a response to a &lt;code&gt;call&lt;/code&gt; request previously made by the calling process using &lt;code&gt;&lt;a href=&quot;#send_request-4&quot;&gt;erpc:send_request/4&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;RequestId&lt;/code&gt; should be the value returned from the previously made &lt;code&gt;erpc:send_request()&lt;/code&gt; call, and the corresponding response should not already have been received and handled to completion by &lt;code&gt;erpc:check_response()&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#receive_response-2&quot;&gt;erpc:receive_response()&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#wait_response-2&quot;&gt;erpc:wait_response()&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Message&lt;/code&gt; is the message to check.</source>
          <target state="translated">メッセージが、 &lt;code&gt;&lt;a href=&quot;#send_request-4&quot;&gt;erpc:send_request/4&lt;/a&gt;&lt;/code&gt; を使用して呼び出しプロセスによって以前に行われた &lt;code&gt;call&lt;/code&gt; 要求への応答であるかどうかを確認します。 &lt;code&gt;RequestId&lt;/code&gt; は、以前に行われた &lt;code&gt;erpc:send_request()&lt;/code&gt; 呼び出しから返された値である必要があり、対応する応答は、 &lt;code&gt;erpc:check_response()&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#receive_response-2&quot;&gt;erpc:receive_response()&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#wait_response-2&quot;&gt;erpc:wait_response()&lt;/a&gt;&lt;/code&gt; によって受信され、完了まで処理されていない必要があります。。 &lt;code&gt;Message&lt;/code&gt; は確認するメッセージです。</target>
        </trans-unit>
        <trans-unit id="636269b21ec64e1b4c57781fd483b1f6eb014ef4" translate="yes" xml:space="preserve">
          <source>Check that you got the correct wx-config</source>
          <target state="translated">正しい wx-config を取得していることを確認してください。</target>
        </trans-unit>
        <trans-unit id="abcea80cce60fbe20f77494ee80ffc9af8a04be8" translate="yes" xml:space="preserve">
          <source>Check the PLT for consistency and rebuild it if it is not up-to-date.</source>
          <target state="translated">PLTの整合性を確認し、最新でない場合は再構築してください。</target>
        </trans-unit>
        <trans-unit id="268c1187a5d1ae2b90f5cdc9f4cb275c9ad70ab4" translate="yes" xml:space="preserve">
          <source>Check the releases again:</source>
          <target state="translated">再度、リリースをチェックしてみましょう。</target>
        </trans-unit>
        <trans-unit id="906cba3b4a7b65d13acff94d584d482a4041b4f6" translate="yes" xml:space="preserve">
          <source>Check the result codes from &lt;code&gt;ei_decode_-calls&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ei_decode_-calls&lt;/code&gt; からの結果コードを確認します。</target>
        </trans-unit>
        <trans-unit id="a3006d5fda96585cbeb13605068585873b6a87f1" translate="yes" xml:space="preserve">
          <source>Check to see if an Erlang process is alive:</source>
          <target state="translated">Erlangプロセスが生きているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="20402d173d20fdbc8de1eb922d8ebb7baecddece" translate="yes" xml:space="preserve">
          <source>Check what data types the database assigned for the columns. Hopefully this is not a surprise, some times it can be! These are the data types that you should use if you want to do a parameterized query.</source>
          <target state="translated">データベースが列に割り当てたデータタイプを確認してください。これが意外なことではないといいのですが、場合によっては意外なこともあるかもしれません。これらは、パラメータ化されたクエリを実行する場合に使用すべきデータ型です。</target>
        </trans-unit>
        <trans-unit id="35d0ee1ea7a80bd1369cdd8deff771169f1ff621" translate="yes" xml:space="preserve">
          <source>Check which releases there are in the system:</source>
          <target state="translated">システムにどのリリースがあるかを確認します。</target>
        </trans-unit>
        <trans-unit id="a2b3a59adb81ffe32d8631c171b886f3d460360a" translate="yes" xml:space="preserve">
          <source>Checkpoints</source>
          <target state="translated">Checkpoints</target>
        </trans-unit>
        <trans-unit id="e87ce1926feddf058db26307093e491ce24b9536" translate="yes" xml:space="preserve">
          <source>Checkpoints are activated with the function &lt;code&gt;&lt;a href=&quot;mnesia#activate_checkpoint-1&quot;&gt;mnesia:activate_checkpoint(Args)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; is a list of the following tuples:</source>
          <target state="translated">チェックポイントは、関数で活性化さ &lt;code&gt;&lt;a href=&quot;mnesia#activate_checkpoint-1&quot;&gt;mnesia:activate_checkpoint(Args)&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Args&lt;/code&gt; のは、次のタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="9f802420bf755ebc628b011ddcdcefbea605aaca" translate="yes" xml:space="preserve">
          <source>Checkpoints can be explicitly deactivated with the function &lt;code&gt;&lt;a href=&quot;mnesia#deactivate_checkpoint-1&quot;&gt;mnesia:deactivate_checkpoint(Name)&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Name&lt;/code&gt; is the name of an active checkpoint. This function returns &lt;code&gt;ok&lt;/code&gt; if successful or &lt;code&gt;{error, Reason}&lt;/code&gt; if there is an error. All tables in a checkpoint must be attached to at least one checkpoint retainer. The checkpoint is automatically deactivated by &lt;code&gt;Mnesia&lt;/code&gt;, when any table lacks a checkpoint retainer. This can occur when a node goes down or when a replica is deleted. Use arguments &lt;code&gt;min&lt;/code&gt; and &lt;code&gt;max&lt;/code&gt; (described in the following list) to control the degree of checkpoint retainer redundancy.</source>
          <target state="translated">チェックポイントは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#deactivate_checkpoint-1&quot;&gt;mnesia:deactivate_checkpoint(Name)&lt;/a&gt;&lt;/code&gt; を使用して明示的に非アクティブ化できます。ここで、 &lt;code&gt;Name&lt;/code&gt; はアクティブなチェックポイントの名前です。この関数は、成功した場合は &lt;code&gt;ok&lt;/code&gt; を返し、エラーがある場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。チェックポイント内のすべてのテーブルは、少なくとも1つのチェックポイントリテイナーにアタッチする必要があります。チェックポイントは、いずれかのテーブルにチェックポイント保持機能がない場合、 &lt;code&gt;Mnesia&lt;/code&gt; によって自動的に非アクティブ化されます。これは、ノードがダウンしたとき、またはレプリカが削除されたときに発生する可能性があります。引数 &lt;code&gt;min&lt;/code&gt; および &lt;code&gt;max&lt;/code&gt; （次のリストで説明）を使用して、チェックポイント保持機能の冗長性の程度を制御します。</target>
        </trans-unit>
        <trans-unit id="bd05a7f92b1f124795301d9f37652056ff883754" translate="yes" xml:space="preserve">
          <source>Checks all the forms in a module for errors. It returns:</source>
          <target state="translated">モジュール内のすべてのフォームのエラーをチェックします。それは返されます。</target>
        </trans-unit>
        <trans-unit id="a856949551133f4d621c8f983c0ff72dd04c2c2b" translate="yes" xml:space="preserve">
          <source>Checks files for sortedness. If a file is not sorted, the first out-of-order element is returned. The first term on a file has position 1.</source>
          <target state="translated">ファイルがソートされているかどうかをチェックします。ファイルがソートされていない場合、最初の順番外の要素が返されます。ファイルの最初の項の位置は 1 です。</target>
        </trans-unit>
        <trans-unit id="7ba4b1e2a4ab295c5008b5d16d7d26b47a038a4b" translate="yes" xml:space="preserve">
          <source>Checks for a UTF Byte Order Mark (BOM) in the beginning of a binary. If the supplied binary &lt;code&gt;Bin&lt;/code&gt; begins with a valid BOM for either UTF-8, UTF-16, or UTF-32, the function returns the encoding identified along with the BOM length in bytes.</source>
          <target state="translated">バイナリの先頭にあるUTFバイトオーダーマーク（BOM）をチェックします。指定されたバイナリ &lt;code&gt;Bin&lt;/code&gt; がUTF-8、UTF-16、またはUTF-32のいずれかの有効なBOMで始まる場合、関数はバイト単位のBOMの長さとともに識別されたエンコーディングを返します。</target>
        </trans-unit>
        <trans-unit id="510ec36114ebdc62e86252016e95f26f6d7a1f20" translate="yes" xml:space="preserve">
          <source>Checks for multiple usage of object identifiers and traps between MIBs.</source>
          <target state="translated">MIB間でオブジェクト識別子とトラップが複数使用されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="747232dc3b591c50580e517e7cc803fb9e025a85" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;DateAndTime&lt;/code&gt; is a correct DateAndTime value, as specified in RFC2579. This function can be used in instrumentation functions to validate a DateAndTime value.</source>
          <target state="translated">&lt;code&gt;DateAndTime&lt;/code&gt; で指定されているように、DateAndTimeが正しいDateAndTime値であるかどうかを確認します。この関数は、DateAndTime値を検証するためのインストルメンテーション関数で使用できます。</target>
        </trans-unit>
        <trans-unit id="95a79a074380e965f210f3b0d26fcbfdb4da8239" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;IssuerCert&lt;/code&gt; issued &lt;code&gt;Cert&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;IssuerCert&lt;/code&gt; が &lt;code&gt;Cert&lt;/code&gt; を発行したかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="2772e2a03c6bc7bbd4020bdc175792271c77180e" translate="yes" xml:space="preserve">
          <source>Checks if &lt;code&gt;Module&lt;/code&gt; is loaded. If it is, &lt;code&gt;{file, Loaded}&lt;/code&gt; is returned, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; がロードされているかどうかを確認します。ある場合は &lt;code&gt;{file, Loaded}&lt;/code&gt; が返され、それ以外の場合は &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="5818a0956c65d40a8ff10edf8906b485fbeb4030" translate="yes" xml:space="preserve">
          <source>Checks if a certificate is a fixed Diffie-Hellman certificate.</source>
          <target state="translated">証明書が固定された Diffie-Hellman 証明書であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="8386578fed134d83c251c55e8ce2a02a7ef77dfe" translate="yes" xml:space="preserve">
          <source>Checks if a certificate is self-signed.</source>
          <target state="translated">証明書が自己署名されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="605d073b25cd13abdaa22621a8c142cdd64e0fde" translate="yes" xml:space="preserve">
          <source>Checks if a host key is trusted.</source>
          <target state="translated">ホストキーが信頼されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="d711ffc10e42ab11346653fdef9d9261168fbde9" translate="yes" xml:space="preserve">
          <source>Checks if a module can be interpreted. The module can be specified by its module name &lt;code&gt;Module&lt;/code&gt; or its source filename &lt;code&gt;File&lt;/code&gt;. If specified by a module name, the module is searched for in the code path.</source>
          <target state="translated">モジュールが解釈可能かどうかを確認します。モジュールは、モジュール名 &lt;code&gt;Module&lt;/code&gt; またはソースファイル名 &lt;code&gt;File&lt;/code&gt; で指定できます。モジュール名で指定した場合、モジュールはコードパスで検索されます。</target>
        </trans-unit>
        <trans-unit id="6f37d2fd8311965e33637b99d11518d610b4fb8e" translate="yes" xml:space="preserve">
          <source>Checks if a port is a flex scanner port or not (useful when if a port exits).</source>
          <target state="translated">ポートがフレックススキャナポートであるかどうかをチェックします(ポートが抜ける場合に便利です)。</target>
        </trans-unit>
        <trans-unit id="272d82259d08ece025286e406b6b11b2f72fae79" translate="yes" xml:space="preserve">
          <source>Checks if a row in a table exists.</source>
          <target state="translated">テーブルの行が存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="0ce83f3264ff58bca6cc35dfd8e19ea482e8523e" translate="yes" xml:space="preserve">
          <source>Checks if a table exists.</source>
          <target state="translated">テーブルが存在するかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="d18309113b1c9a8ffcfd3bdb7df082f48addf70f" translate="yes" xml:space="preserve">
          <source>Checks if a term is a valid compiled &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. The compiled match specification is an opaque datatype that &lt;strong&gt;cannot&lt;/strong&gt; be sent between Erlang nodes or be stored on disk. Any attempt to create an external representation of a compiled match specification results in an empty binary (&lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt;).</source>
          <target state="translated">用語が有効なコンパイル済み &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; あるかどうかを確認します。コンパイル済みの一致仕様は不透明なデータ型であり、Erlangノード間で送信したり、ディスクに保存したりする&lt;strong&gt;ことはできません&lt;/strong&gt;。コンパイル済みの一致仕様の外部表現を作成しようとすると、空のバイナリ（ &lt;code&gt;&amp;lt;&amp;lt;&amp;gt;&amp;gt;&lt;/code&gt; ）が発生します。</target>
        </trans-unit>
        <trans-unit id="dc25eb5f990617d8a0bd7a27e851e73ad3bc8008" translate="yes" xml:space="preserve">
          <source>Checks if a term represent a valid compiled &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. A compiled match specifications is only valid on the Erlang node where it was compiled by calling &lt;code&gt;&lt;a href=&quot;#match_spec_compile-1&quot;&gt; match_spec_compile/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">用語が有効なコンパイル済み &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; 表すかどうかを確認します。コンパイルされた一致仕様は、 &lt;code&gt;&lt;a href=&quot;#match_spec_compile-1&quot;&gt; match_spec_compile/1&lt;/a&gt;&lt;/code&gt; を呼び出してコンパイルされたErlangノードでのみ有効です。</target>
        </trans-unit>
        <trans-unit id="49fe5d38c23822c89b1d14265222013e7aa623f5" translate="yes" xml:space="preserve">
          <source>Checks if the array has fixed size. Returns &lt;code&gt;true&lt;/code&gt; if the array is fixed, otherwise &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">配列のサイズが固定されているかどうかを確認します。配列が固定されている場合は &lt;code&gt;true&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="6528fc754f99e98b06bda36322e569db3f8f1fc0" translate="yes" xml:space="preserve">
          <source>Checks if the node local process identified by &lt;code&gt;Pid&lt;/code&gt; executes old code for &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; によって識別されるノードローカルプロセスが &lt;code&gt;Module&lt;/code&gt; の古いコードを実行するかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="71e47cd564a205cb1bf9ca547a2026f1c46fec4f" translate="yes" xml:space="preserve">
          <source>Checks if the required configuration is available and gives it a name. The semantics for &lt;code&gt;Required&lt;/code&gt; is the same as in &lt;code&gt;&lt;a href=&quot;#require-1&quot;&gt;ct:require/1&lt;/a&gt;&lt;/code&gt; except that a list of &lt;code&gt;SubKey&lt;/code&gt;s cannot be specified.</source>
          <target state="translated">必要な構成が使用可能かどうかを確認し、名前を付けます。 &lt;code&gt;Required&lt;/code&gt; のセマンティクスは、 &lt;code&gt;SubKey&lt;/code&gt; のリストを指定できないことを除いて、 &lt;code&gt;&lt;a href=&quot;#require-1&quot;&gt;ct:require/1&lt;/a&gt;&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="428578d9af241c74e1a7a32730a10d5366082c85" translate="yes" xml:space="preserve">
          <source>Checks if the required configuration is available. Arbitrarily deep tuples can be specified as &lt;code&gt;Required&lt;/code&gt;. Only the last element of the tuple can be a list of &lt;code&gt;SubKey&lt;/code&gt;s.</source>
          <target state="translated">必要な構成が使用可能かどうかを確認します。任意に深いタプルを &lt;code&gt;Required&lt;/code&gt; として指定できます。タプルの最後の要素のみが &lt;code&gt;SubKey&lt;/code&gt; のリストになります。</target>
        </trans-unit>
        <trans-unit id="ec238f5cb03703ee0f12bade417608420f9de09c" translate="yes" xml:space="preserve">
          <source>Checks if the specified version &lt;code&gt;Vsn&lt;/code&gt; of the release can be installed. The release must not have status &lt;code&gt;current&lt;/code&gt;. Issues warnings if &lt;code&gt;relup&lt;/code&gt; file or &lt;code&gt;sys.config&lt;/code&gt; is not present. If &lt;code&gt;relup&lt;/code&gt; file is present, its contents are checked and &lt;code&gt;{error,Reason}&lt;/code&gt; is returned if an error is found. Also checks that all required applications are present and that all new code can be loaded; &lt;code&gt;{error,Reason}&lt;/code&gt; is returned if an error is found.</source>
          <target state="translated">リリースの指定されたバージョン &lt;code&gt;Vsn&lt;/code&gt; をインストールできるかどうかを確認します。リリースのステータスが &lt;code&gt;current&lt;/code&gt; であってはなりません。 &lt;code&gt;relup&lt;/code&gt; ファイルまたは &lt;code&gt;sys.config&lt;/code&gt; が存在しない場合、警告を発行します。 &lt;code&gt;relup&lt;/code&gt; ファイルが存在する場合、その内容がチェックされ、エラーが見つかった場合は &lt;code&gt;{error,Reason}&lt;/code&gt; が返されます。また、必要なすべてのアプリケーションが存在し、すべての新しいコードをロードできることも確認します。エラーが見つかった場合、 &lt;code&gt;{error,Reason}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="479a9580343413c1f22bd06f4593b79fb04b0a75" translate="yes" xml:space="preserve">
          <source>Checks if the specified year is a leap year.</source>
          <target state="translated">指定した年がうるう年であるかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="078e47111a5ec4795ece814100ad93da9a091cfb" translate="yes" xml:space="preserve">
          <source>Checks if the user key is authorized.</source>
          <target state="translated">ユーザーキーが承認されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="ff7d8e386c89192aae77ae12e3d1fd328088412c" translate="yes" xml:space="preserve">
          <source>Checks the validity of the configuration options before saving them in the internal database. This function can also have a side effect, that is, setup of necessary extra resources implied by the configuration option. It can also resolve possible dependencies among configuration options by changing the value of the option. This function only needs clauses for the options implemented by this particular callback module.</source>
          <target state="translated">内部データベースに保存する前に、設定オプションの有効性をチェックします。この関数は副作用として、設定オプションによって暗示された必要な余分なリソースを設定することもできます。また、オプションの値を変更することで、設定オプション間の依存関係を解決することもできます。この関数が必要とするのは、この特定のコールバックモジュールによって実装されたオプションのための節だけです。</target>
        </trans-unit>
        <trans-unit id="f318de51ea171b0f11fe8ffcba324d6cb2f56901" translate="yes" xml:space="preserve">
          <source>Checks whether the given distribution point matches the Issuing Distribution Point of the CRL, as described in RFC 5280. If the CRL doesn't have an Issuing Distribution Point extension, the distribution point always matches.</source>
          <target state="translated">指定されたディストリビューション・ポイントが、RFC 5280 に記載されているように、CRL の発行ディストリビューション・ポイントと一致するかどうかをチェックする。CRL に発行配布ポイント拡張がない場合、配布ポイントは常に一致する。</target>
        </trans-unit>
        <trans-unit id="6927568c692c1534ead0f5a190223a7149662ac5" translate="yes" xml:space="preserve">
          <source>Cherokee</source>
          <target state="translated">Cherokee</target>
        </trans-unit>
        <trans-unit id="135e7ebc010b592ec029e827d5bc3670e96d3552" translate="yes" xml:space="preserve">
          <source>Child processes added using &lt;code&gt;start_child/2&lt;/code&gt; behave in the same way as the other child processes, with the an important exception: if a supervisor dies and is recreated, then all child processes that were dynamically added to the supervisor are lost.</source>
          <target state="translated">&lt;code&gt;start_child/2&lt;/code&gt; を使用して追加された子プロセスは、他の子プロセスと同じように動作しますが、重要な例外があります。スーパーバイザが停止して再作成された場合、スーパーバイザに動的に追加されたすべての子プロセスは失われます。</target>
        </trans-unit>
        <trans-unit id="d31165313a669b6455ea6e9ad085bc20f3afad95" translate="yes" xml:space="preserve">
          <source>Child processes can be added or deleted, but this is not handled automatically. Instructions must be given by in the &lt;code&gt;.appup&lt;/code&gt; file.</source>
          <target state="translated">子プロセスは追加または削除できますが、これは自動的には処理されません。手順は &lt;code&gt;.appup&lt;/code&gt; ファイルで指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="6ab10a3f0f32c3f2675ecf809a38ba27ac8a5f1a" translate="yes" xml:space="preserve">
          <source>Choice of encoding rules. If omitted, &lt;code&gt;ber&lt;/code&gt; is the default.</source>
          <target state="translated">エンコーディングルールの選択。省略した場合のデフォルトは &lt;code&gt;ber&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7f3ea2b24209a266dcef3e5a9bb60cc369d1de87" translate="yes" xml:space="preserve">
          <source>Choose TLS or DTLS protocol for the transport layer security. Defaults to &lt;code&gt;tls&lt;/code&gt; Introduced in OTP 20, DTLS support is considered experimental in this release. Other transports than UDP are not yet supported.</source>
          <target state="translated">トランスポート層のセキュリティには、TLSまたはDTLSプロトコルを選択します。デフォルトは &lt;code&gt;tls&lt;/code&gt; です。OTP20で導入されたこのリリースでは、DTLSサポートは実験的なものと見なされています。UDP以外のトランスポートはまだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="c31c4041fea7dcf570fd6e4cf1e2c962d365bbbf" translate="yes" xml:space="preserve">
          <source>Choose TLS or DTLS protocol for the transport layer security. Defaults to &lt;code&gt;tls&lt;/code&gt;. For DTLS other transports than UDP are not yet supported.</source>
          <target state="translated">トランスポート層のセキュリティにはTLSまたはDTLSプロトコルを選択します。デフォルトは &lt;code&gt;tls&lt;/code&gt; です。DTLSの場合、UDP以外のトランスポートはまだサポートされていません。</target>
        </trans-unit>
        <trans-unit id="25f5d4d9f2caa81d094ad75fec450f1a06c95420" translate="yes" xml:space="preserve">
          <source>Choose to handle only the desired ones.</source>
          <target state="translated">希望するものだけを扱うように選択してください。</target>
        </trans-unit>
        <trans-unit id="46b52861d4608446563acf9a958bc3592901aff0" translate="yes" xml:space="preserve">
          <source>Choosing the Applications or Modules</source>
          <target state="translated">アプリケーションまたはモジュールの選択</target>
        </trans-unit>
        <trans-unit id="ee581d45d9fc1d0520325bee52149114d648b385" translate="yes" xml:space="preserve">
          <source>Chunk continuation returned by &lt;code&gt;chunk/2,3&lt;/code&gt;, &lt;code&gt;bchunk/2,3&lt;/code&gt;, or &lt;code&gt;chunk_step/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;chunk/2,3&lt;/code&gt; 、 &lt;code&gt;bchunk/2,3&lt;/code&gt; 、または &lt;code&gt;chunk_step/3&lt;/code&gt; によって返されるチャンクの継続。</target>
        </trans-unit>
        <trans-unit id="e4ba655b15f106275903bcb76ff0e9f9a248da7f" translate="yes" xml:space="preserve">
          <source>Chunk data can be returned as binaries or as compound terms. Compound terms are returned when chunks are referenced by names (atoms) rather than identifiers (strings). The recognized names and the corresponding identifiers are as follows:</source>
          <target state="translated">チャンクデータはバイナリまたは複合語として返されます。複合語は、チャンクが識別子(文字列)ではなく名前(原子)で参照される場合に返されます。認識される名前と対応する識別子は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6764e5053e3fe95b1f7c11980b37b710d2758df5" translate="yes" xml:space="preserve">
          <source>Cipher and Mode</source>
          <target state="translated">暗号とモード</target>
        </trans-unit>
        <trans-unit id="30642178bcc449614b9f83d55814b1527c22a7a9" translate="yes" xml:space="preserve">
          <source>CipherText</source>
          <target state="translated">CipherText</target>
        </trans-unit>
        <trans-unit id="bc7425233d01ba6a7be602ba1752667ca73eae3a" translate="yes" xml:space="preserve">
          <source>Ciphers known by the CRYPTO application when using the &lt;code&gt;new API&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;new API&lt;/code&gt; を使用するときにCRYPTOアプリケーションによって認識される暗号。</target>
        </trans-unit>
        <trans-unit id="3c0c4fa76aea2937a0998c363ea02686cbd6a9ee" translate="yes" xml:space="preserve">
          <source>Ciphers known by the CRYPTO application when using the &lt;code&gt;old API&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;old API&lt;/code&gt; を使用するときにCRYPTOアプリケーションによって認識される暗号。</target>
        </trans-unit>
        <trans-unit id="c823bc9e6919d1a6ec1ee621618d405b63ae02b7" translate="yes" xml:space="preserve">
          <source>Ciphers with AEAD - cipher_aead()</source>
          <target state="translated">AEAD を用いた暗号-cipher_aead()</target>
        </trans-unit>
        <trans-unit id="52e903786f3aa5e38839b6ced188e00a2978392f" translate="yes" xml:space="preserve">
          <source>Ciphers with an IV - cipher_iv()</source>
          <target state="translated">IV を持つ暗号-cipher_iv()</target>
        </trans-unit>
        <trans-unit id="edf572b5e6cd15e9e8481efe4e07ee81f9831714" translate="yes" xml:space="preserve">
          <source>Ciphers without an IV - cipher_no_iv()</source>
          <target state="translated">IV を持たない暗号-cipher_no_iv()</target>
        </trans-unit>
        <trans-unit id="6f21a899bfeb7fda2cfbbe7b1fc7403ccdab3ded" translate="yes" xml:space="preserve">
          <source>Ciphers, new API</source>
          <target state="translated">暗号、新しいAPI</target>
        </trans-unit>
        <trans-unit id="8c8c272e11f799bb1c36704a8bd1038391e72fd2" translate="yes" xml:space="preserve">
          <source>Ciphers, old API</source>
          <target state="translated">サイファー、古いAPI</target>
        </trans-unit>
        <trans-unit id="fa89c2516f6a5145ca57d8e994ab91799551cef7" translate="yes" xml:space="preserve">
          <source>Ciphers: all cipher suites are supported</source>
          <target state="translated">暗号:すべての暗号スイートがサポートされています。</target>
        </trans-unit>
        <trans-unit id="6ff9b96266db1f3dd7beca013ae70083f5bd259c" translate="yes" xml:space="preserve">
          <source>Circular logs wrap too quickly so that important data is overwritten.</source>
          <target state="translated">円形のログは、重要なデータが上書きされるように、あまりにも早くラップしてしまいます。</target>
        </trans-unit>
        <trans-unit id="d12a819b1aae084ceb5aef6add0b54bb3383e602" translate="yes" xml:space="preserve">
          <source>Circumflex (only at the start)</source>
          <target state="translated">サーカムフレックス(スタート時のみ</target>
        </trans-unit>
        <trans-unit id="581342987169d6671fc5bf0cc93afadd1b835b06" translate="yes" xml:space="preserve">
          <source>Circumflex needs not to be the first character of the pattern if some alternatives are involved, but it is to be the first thing in each alternative in which it appears if the pattern is ever to match that branch. If all possible alternatives start with a circumflex, that is, if the pattern is constrained to match only at the start of the subject, it is said to be an &quot;anchored&quot; pattern. (There are also other constructs that can cause a pattern to be anchored.)</source>
          <target state="translated">幾つかの代替案が含まれる場合、円弧はパターンの最初の文字である必要はありませんが、パターンがその分岐にマッチする場合には、それが現れる各代替案の最初の文字である必要があります。すべての可能な代替案が円弧で始まる場合、つまり、パターンが主語の開始時にのみ一致するように制約されている場合、それは「固定された」パターンであると言われています(他の構成要素もあります)。(パターンがアンカーされる原因となる他の構文もあります)。</target>
        </trans-unit>
        <trans-unit id="c55dd6a054b7094ae3dc1abafba45b8010c44542" translate="yes" xml:space="preserve">
          <source>Circumstances That Force Copying</source>
          <target state="translated">コピーを余儀なくされる状況</target>
        </trans-unit>
        <trans-unit id="9d200e05d2a156deec0beba2b22e83cff255bcb3" translate="yes" xml:space="preserve">
          <source>Claim an intermediate CA in the chain as trusted. TLS then performs &lt;code&gt;public_key:pkix_path_validation/3&lt;/code&gt; with the selected CA as trusted anchor and the rest of the chain.</source>
          <target state="translated">チェーン内の中間CAを信頼済みとして要求します。次に、TLSは、選択したCAを信頼できるアンカーとして、チェーンの残りの部分として、 &lt;code&gt;public_key:pkix_path_validation/3&lt;/code&gt; を実行します。</target>
        </trans-unit>
        <trans-unit id="39de48c8fa760feda5802b521d8bf939316bf4c2" translate="yes" xml:space="preserve">
          <source>Class AVP</source>
          <target state="translated">クラスAVP</target>
        </trans-unit>
        <trans-unit id="6eacfebc1c0925b3f9fb95e3de34cdc474ca5242" translate="yes" xml:space="preserve">
          <source>Clean start of lttng in a bash shell.</source>
          <target state="translated">bash シェルで lttng のクリーンスタート。</target>
        </trans-unit>
        <trans-unit id="9a4a1562053eb1e1218a691a6c953f8f4062d055" translate="yes" xml:space="preserve">
          <source>Clear the event table.</source>
          <target state="translated">イベントテーブルをクリアします。</target>
        </trans-unit>
        <trans-unit id="cf79802203160fb2e047023927c66043f0069869" translate="yes" xml:space="preserve">
          <source>Clear the hosts table.</source>
          <target state="translated">ホストのテーブルを片付けろ</target>
        </trans-unit>
        <trans-unit id="9bff2b01c2e7f297768e7e1de9b32b6dece5d32c" translate="yes" xml:space="preserve">
          <source>Clear the internal counters. Same as &lt;code&gt;lcnt:clear(Node)&lt;/code&gt;.</source>
          <target state="translated">内部カウンタをクリアします。 &lt;code&gt;lcnt:clear(Node)&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="2b2367a410d59fa17678db3463ba5a821481dc69" translate="yes" xml:space="preserve">
          <source>Clear the list of recorded nameservers (primary and secondary).</source>
          <target state="translated">記録されたネームサーバー(プライマリおよびセカンダリ)のリストをクリアします。</target>
        </trans-unit>
        <trans-unit id="369fb44362e0de877ecb493ee42cb0dc0bd0e79c" translate="yes" xml:space="preserve">
          <source>Clear the list of search domains.</source>
          <target state="translated">検索ドメインのリストをクリアします。</target>
        </trans-unit>
        <trans-unit id="5780206257275a6d0e675772efcba6937710072a" translate="yes" xml:space="preserve">
          <source>Clearly the time-outs are for implementing fault tolerance, not to keep hard real-time promises. The &lt;code&gt;_tmo&lt;/code&gt; functions are for detecting non-responsive peers and to avoid blocking on socket operations.</source>
          <target state="translated">明らかに、タイムアウトはフォールトトレランスを実装するためのものであり、ハードリアルタイムの約束を守るためのものではありません。 &lt;code&gt;_tmo&lt;/code&gt; の機能は非応答ピアを検出すると、ソケット操作のブロックを避けることにあります。</target>
        </trans-unit>
        <trans-unit id="b8b55894a3a573e9c169f2784eaa3824d8dc1f41" translate="yes" xml:space="preserve">
          <source>Clearly, &lt;code&gt;get_chars&lt;/code&gt; and &lt;code&gt;get_line&lt;/code&gt; could be implemented with the &lt;code&gt;get_until&lt;/code&gt; request (and indeed they were originally), but demands for efficiency have made these additions necessary.</source>
          <target state="translated">明らかに、 &lt;code&gt;get_chars&lt;/code&gt; と &lt;code&gt;get_line&lt;/code&gt; は &lt;code&gt;get_until&lt;/code&gt; リクエストを使用して実装できますが（実際、これらは元々ありました）、効率の要求により、これらの追加が必要になりました。</target>
        </trans-unit>
        <trans-unit id="104ddb5596b2b3c6bb809b4e7942686129ee7afb" translate="yes" xml:space="preserve">
          <source>Clearly, the second &lt;code&gt;io:format/2&lt;/code&gt; gives undesired output, as the UTF-8 binary is not in &lt;code&gt;latin1&lt;/code&gt;. For backward compatibility, the non-prefixed control character &lt;code&gt;s&lt;/code&gt; expects bytewise-encoded ISO Latin-1 characters in binaries and lists containing only code points &amp;lt; 256.</source>
          <target state="translated">明らかに、UTF-8バイナリは &lt;code&gt;latin1&lt;/code&gt; にないため、2番目の &lt;code&gt;io:format/2&lt;/code&gt; は望ましくない出力を提供します。下位互換性のために、接頭辞のない制御文字 &lt;code&gt;s&lt;/code&gt; は、バイナリおよびバイト未満でエンコードされたISO Latin-1文字と、256未満のコードポイントのみを含むリストを想定しています。</target>
        </trans-unit>
        <trans-unit id="ac68fc3d2a1c66a24efacfe356996e3f36da43ed" translate="yes" xml:space="preserve">
          <source>Clearly, the text is badly formatted. Instead of formatting this paragraph line by line, let's try &lt;code&gt;erlang-fill-paragraph&lt;/code&gt; by pressing &lt;strong&gt;&lt;code&gt;M-q&lt;/code&gt;&lt;/strong&gt;. The result is:</source>
          <target state="translated">明らかに、テキストの形式が正しくありません。この段落を1行ずつフォーマットする代わりに、&lt;strong&gt; &lt;code&gt;M-q&lt;/code&gt; &lt;/strong&gt;を押して &lt;code&gt;erlang-fill-paragraph&lt;/code&gt; を試してみましょう。結果は次のとおりです。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="86f0101226f5f81bb0f27692ae9b01618069c017" translate="yes" xml:space="preserve">
          <source>Clears a node from the list of traced nodes. Subsequent calls to &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; will not consider that node, but tracing already activated on the node will continue to be in effect.</source>
          <target state="translated">トレースされたノードのリストからノードをクリアします。 &lt;code&gt;&lt;a href=&quot;#tp-2&quot;&gt;tp/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#p-2&quot;&gt;p/2&lt;/a&gt;&lt;/code&gt; への後続の呼び出しでは、そのノードは考慮されませんが、ノードで既にアクティブ化されているトレースは引き続き有効です。</target>
        </trans-unit>
        <trans-unit id="0b13ce8b44b6644dd7e70d2aa9ea4a770cfcfe42" translate="yes" xml:space="preserve">
          <source>Clears all flags.</source>
          <target state="translated">すべてのフラグをクリアします。</target>
        </trans-unit>
        <trans-unit id="467456a156c8089790f8fcb07286226580f312c2" translate="yes" xml:space="preserve">
          <source>Clears all tracing from the node and starts a new &lt;code&gt;fprof&lt;/code&gt; trace. Either option &lt;code&gt;start&lt;/code&gt; or &lt;code&gt;stop&lt;/code&gt; must be specified, but not both.</source>
          <target state="translated">ノードからすべてのトレースをクリアし、新しい &lt;code&gt;fprof&lt;/code&gt; トレースを開始します。オプション &lt;code&gt;start&lt;/code&gt; または &lt;code&gt;stop&lt;/code&gt; を指定する必要がありますが、両方を指定することはできません。</target>
        </trans-unit>
        <trans-unit id="2442f3d1d0666c552ddd200f6f80efa37ba1d36f" translate="yes" xml:space="preserve">
          <source>Clears information about processes executing interpreted code by removing all information about terminated processes.</source>
          <target state="translated">インタプリタコードを実行しているプロセスの情報を、終了したプロセスの情報をすべて削除してクリアします。</target>
        </trans-unit>
        <trans-unit id="19ca408ce500ce988f93c1127be6072ab57dbf07" translate="yes" xml:space="preserve">
          <source>Clears the associated comments of &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; の関連するコメントをクリアします。</target>
        </trans-unit>
        <trans-unit id="ca93ac6b0dd536d4e5f2ea8448f979122bed328d" translate="yes" xml:space="preserve">
          <source>Clears the freelist, where blocks are placed when they are released by &lt;code&gt;erl_free_term()&lt;/code&gt; and &lt;code&gt;erl_free_compound()&lt;/code&gt;.</source>
          <target state="translated">ブロックが &lt;code&gt;erl_free_term()&lt;/code&gt; および &lt;code&gt;erl_free_compound()&lt;/code&gt; によって解放されたときに配置されるフリーリストをクリアします。</target>
        </trans-unit>
        <trans-unit id="bf95008d3bf29f6ae931c4a1447def2c26138965" translate="yes" xml:space="preserve">
          <source>Clears the internal lock statistics from the runtime system. This does not clear the data on the server only on runtime system. All counters for static locks are zeroed, all dynamic locks currently alive are zeroed and all saved locks now destroyed are removed. It also resets the duration timer.</source>
          <target state="translated">ランタイムシステムの内部ロック統計情報をクリアします。これはサーバー上のデータをクリアするものではなく、ランタイムシステム上のデータのみをクリアします。静的ロックのすべてのカウンタはゼロになり、現在生きているダイナミックロックはすべてゼロになり、現在破棄されている保存されたロックはすべて削除されます。また、デュレーションタイマーもリセットされます。</target>
        </trans-unit>
        <trans-unit id="f984b760bad5d198926e4961e47fdf78889ec801" translate="yes" xml:space="preserve">
          <source>Clears the lock counters and then setups the instrumentation to save all destroyed locks. After setup the function is called, passing the elements in &lt;code&gt;Args&lt;/code&gt; as arguments. When the function returns the statistics are immediately collected to the server. After the collection the instrumentation is returned to its previous behavior. The result of the applied function is returned.</source>
          <target state="translated">ロックカウンターをクリアしてから、インストルメンテーションをセットアップして、破棄されたすべてのロックを保存します。セットアップ後、関数が呼び出され、引数として &lt;code&gt;Args&lt;/code&gt; の要素が渡されます。関数が戻ると、統計はすぐにサーバーに収集されます。コレクションの後、インストルメンテーションは以前の動作に戻ります。適用された関数の結果が返されます。</target>
        </trans-unit>
        <trans-unit id="37dcdd456e3c2b69c6b0d8ce4b98fc1d4210c009" translate="yes" xml:space="preserve">
          <source>Clears the temporary boot command. If the system terminates, the normal &lt;code&gt;HEART_COMMAND&lt;/code&gt; is used to reboot.</source>
          <target state="translated">一時的なブートコマンドをクリアします。システムが終了した場合、通常の &lt;code&gt;HEART_COMMAND&lt;/code&gt; を使用して再起動します。</target>
        </trans-unit>
        <trans-unit id="2577cb3633fef5aad5a84c896c2c6f81b1bca437" translate="yes" xml:space="preserve">
          <source>Clears trace patterns on global function calls.</source>
          <target state="translated">グローバル関数呼び出しのトレースパターンをクリアします。</target>
        </trans-unit>
        <trans-unit id="11b01ab35fecb88a64d47127f48dfdab0c530753" translate="yes" xml:space="preserve">
          <source>Clears trace patterns on local and global function calls.</source>
          <target state="translated">ローカルおよびグローバル関数呼び出しのトレースパターンをクリアします。</target>
        </trans-unit>
        <trans-unit id="5e9e55a4beacaabaa7e4c5fc4cd8ca1cff7f3d79" translate="yes" xml:space="preserve">
          <source>Clears trace patterns on local function calls.</source>
          <target state="translated">ローカル関数呼び出しのトレースパターンをクリアします。</target>
        </trans-unit>
        <trans-unit id="d6d6ba23a63720746cd129c4ddd78a9ce8b9db70" translate="yes" xml:space="preserve">
          <source>Clears trace patterns on messages.</source>
          <target state="translated">メッセージのトレースパターンをクリアします。</target>
        </trans-unit>
        <trans-unit id="0fec5dd690b7876869007fa4dc8e05b88546abf4" translate="yes" xml:space="preserve">
          <source>Click button &lt;strong&gt;Start Trace&lt;/strong&gt; to start the trace. By default, trace output is written to a new window. Tracing is stopped when the window is closed, or when clicking button &lt;strong&gt;Stop Trace&lt;/strong&gt;. Trace output can be changed with menu &lt;strong&gt;Options &amp;gt; Output&lt;/strong&gt;. The trace settings, including match specifications, can be saved to, or loaded from, a file.</source>
          <target state="translated">[ &lt;strong&gt;トレース&lt;/strong&gt;開始]ボタン&lt;strong&gt;を&lt;/strong&gt;クリックして、&lt;strong&gt;トレース&lt;/strong&gt;を開始します。デフォルトでは、トレース出力は新しいウィンドウに書き込まれます。ウィンドウが閉じたとき、または[ &lt;strong&gt;トレースの停止&lt;/strong&gt; ]ボタンをクリックすると、トレースが停止します。トレース出力は、メニュー&lt;strong&gt;オプション&amp;gt;出力で&lt;/strong&gt;変更できます。一致仕様を含むトレース設定は、ファイルに保存したり、ファイルからロードしたりできます。</target>
        </trans-unit>
        <trans-unit id="dcef5f474ab1f60b5d9bc1fcf7ce96b36faec402" translate="yes" xml:space="preserve">
          <source>Click on a name tag to display its page.</source>
          <target state="translated">ネームタグをクリックすると、そのページが表示されます。</target>
        </trans-unit>
        <trans-unit id="04d51c8f44c15e0a1e9cd8d40fce6f0329fdae6b" translate="yes" xml:space="preserve">
          <source>Clicking a line highlights it and selects it to be the target of the breakpoint functions available from the &lt;strong&gt;Break&lt;/strong&gt; menu. To set a line breakpoint on a line, double-click it. To remove the breakpoint, double-click the line with an existing breakpoint.</source>
          <target state="translated">行をクリックすると、その行が強調表示され、[ &lt;strong&gt;Break&lt;/strong&gt; ]メニューから使用できるブレークポイント関数のターゲットとして選択されます。行に行ブレークポイントを設定するには、その行をダブルクリックします。ブレークポイントを削除するには、既存のブレークポイントがある行をダブルクリックします。</target>
        </trans-unit>
        <trans-unit id="b3d312baec2796712d75d4a4d40d52f7bba6028b" translate="yes" xml:space="preserve">
          <source>Client Options</source>
          <target state="translated">クライアントオプション</target>
        </trans-unit>
        <trans-unit id="28e22fe3dde53ce03b40861a4b22d205384bde66" translate="yes" xml:space="preserve">
          <source>Clients</source>
          <target state="translated">Clients</target>
        </trans-unit>
        <trans-unit id="5d0bb5fe7a5e961e5880f93d711f0e38dc532408" translate="yes" xml:space="preserve">
          <source>Clients are started with &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;connect/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#connect-4&quot;&gt;connect/4&lt;/a&gt;&lt;/code&gt;. They open an encrypted connection on top of TCP/IP. In that encrypted connection one or more channels could be opened with &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/2,4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">クライアントは、 &lt;code&gt;&lt;a href=&quot;#connect-2&quot;&gt;connect/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#connect-3&quot;&gt;connect/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#connect-4&quot;&gt;connect/4&lt;/a&gt;&lt;/code&gt; で開始されます。TCP / IPの上に暗号化された接続を開きます。その暗号化された接続では、 &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/2,4&lt;/a&gt;&lt;/code&gt; で 1つ以上のチャネルを開くことができます。</target>
        </trans-unit>
        <trans-unit id="ca3bc6fb91b02b317e470f58c63c4f0940df8f0d" translate="yes" xml:space="preserve">
          <source>Clients can request to reuse a session established by a previous full handshake between that client and server by sending the id of the session in the initial handshake message. The server may or may not agree to reuse it. If agreed the server will send back the id and if not it will send a new id. The ssl application has several options for handling session reuse.</source>
          <target state="translated">クライアントは、最初のハンドシェイクメッセージでセッションのIDを送信することで、そのクライアントとサーバ間で前回のフルハンドシェイクで確立されたセッションの再利用を要求することができます。サーバは再利用に同意してもしなくても構いません。同意が得られた場合、サーバはそのIDを送り返し、同意が得られなかった場合は新しいIDを送ります。ssl アプリケーションには、セッションの再利用を処理するためのいくつかのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="0ec0af9b01d531f2c1e91f2576ecad57b1002807" translate="yes" xml:space="preserve">
          <source>Clients uses all files stored in the &lt;code&gt;&lt;a href=&quot;#USERDIR&quot;&gt;USERDIR&lt;/a&gt;&lt;/code&gt; directory.</source>
          <target state="translated">クライアントは、 &lt;code&gt;&lt;a href=&quot;#USERDIR&quot;&gt;USERDIR&lt;/a&gt;&lt;/code&gt; ディレクトリに保存されているすべてのファイルを使用します。</target>
        </trans-unit>
        <trans-unit id="c9afbd6ca86ca26af0ee4601de8d33e0e3db301d" translate="yes" xml:space="preserve">
          <source>Close punctuation</source>
          <target state="translated">句読点を閉じる</target>
        </trans-unit>
        <trans-unit id="c24bd6354c11beadb396720d375c93335e15a7ec" translate="yes" xml:space="preserve">
          <source>Close the mib-storage table.</source>
          <target state="translated">ミブ収納テーブルを閉じます。</target>
        </trans-unit>
        <trans-unit id="592b9786d83b25c310e25098ffbb1c8d8d35ce68" translate="yes" xml:space="preserve">
          <source>Close the mib-storage.</source>
          <target state="translated">ミブストレージを閉じます。</target>
        </trans-unit>
        <trans-unit id="dc569b6b856c7427e167157a74113626f12814c7" translate="yes" xml:space="preserve">
          <source>Close the socket identified by &lt;code&gt;ctx&lt;/code&gt; and destroy the context.</source>
          <target state="translated">&lt;code&gt;ctx&lt;/code&gt; で識別されるソケットを閉じて、コンテキストを破棄します。</target>
        </trans-unit>
        <trans-unit id="a01bd159b8f373e3abf9028301a1b651c7e12f62" translate="yes" xml:space="preserve">
          <source>Closes a TCP socket.</source>
          <target state="translated">TCP ソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="e937c538908fd420cad6e2a18d22a1ccd28c5e7d" translate="yes" xml:space="preserve">
          <source>Closes a TLS/DTLS connection.</source>
          <target state="translated">TLS/DTLS 接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="9496f4074e8f35d723149747305a4b83e6a2e080" translate="yes" xml:space="preserve">
          <source>Closes a UDP socket.</source>
          <target state="translated">UDP ソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="c3012268c89638e549e91dc1baa96b886e28b2a0" translate="yes" xml:space="preserve">
          <source>Closes a connection to a database. This will also terminate all processes that may have been spawned when the connection was opened. This call will always succeed. If the connection can not be disconnected gracefully it will be brutally killed. However you may receive an error message as result if you try to disconnect a connection started by another process.</source>
          <target state="translated">データベースへの接続を閉じます。また、接続がオープンされたときに生成された可能性のあるすべてのプロセスを終了します。この呼び出しは常に成功します。接続を潔く切断できなかった場合は、残酷にも切断されます。しかし、他のプロセスが開始した接続を切断しようとすると、結果としてエラーメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="68bbaec5e74f6047f0e5abcbc8a727621d01ec20" translate="yes" xml:space="preserve">
          <source>Closes a connection to a database. This will also terminate all processes that may have been spawned when the connection was opened. This call will always succeed. If the connection cannot be disconnected gracefully it will be brutally killed. However you may receive an error message as result if you try to disconnect a connection started by another process.</source>
          <target state="translated">データベースへの接続を閉じます。また、接続がオープンされたときに生成された可能性のあるすべてのプロセスを終了します。この呼び出しは常に成功します。接続を潔く切断できなかった場合は、残酷にも切断されます。しかし、他のプロセスが開始した接続を切断しようとすると、結果としてエラーメッセージが表示されることがあります。</target>
        </trans-unit>
        <trans-unit id="fedaf7e7f755777e61b444ad3388a8908bb68e49" translate="yes" xml:space="preserve">
          <source>Closes a handle to an open file or directory on the server.</source>
          <target state="translated">サーバ上で開いているファイルやディレクトリのハンドルを閉じます。</target>
        </trans-unit>
        <trans-unit id="215485c4befae922eb5a5d5935fd733652b4ce47" translate="yes" xml:space="preserve">
          <source>Closes a local or distributed disk log properly. An internally formatted log must be closed before the Erlang system is stopped. Otherwise, the log is regarded as unclosed and the automatic repair procedure is activated next time the log is opened.</source>
          <target state="translated">ローカルまたは分散ディスクのログを適切に閉じます。内部的にフォーマットされたログはErlangシステムが停止する前に閉じなければなりません。そうしないと、ログは閉じられていないとみなされ、次にログが開かれたときに自動修復が行われます。</target>
        </trans-unit>
        <trans-unit id="29e73ff6b566a953cef38a1f7457365c29503626" translate="yes" xml:space="preserve">
          <source>Closes a log file properly.</source>
          <target state="translated">ログファイルを正しく閉じます。</target>
        </trans-unit>
        <trans-unit id="07fc420ec95adbf7d0f9265d705ee3ece3f06902" translate="yes" xml:space="preserve">
          <source>Closes a previously opened connection or listen socket.</source>
          <target state="translated">以前に開いていた接続またはリッスンソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="e4fe071a7ae3117ab43dd5cebfb15042d7d75064" translate="yes" xml:space="preserve">
          <source>Closes a socket in one or two directions.</source>
          <target state="translated">ソケットを一方向または二方向に閉じます。</target>
        </trans-unit>
        <trans-unit id="34f9bfce04a30dbf2d2a5d3ff2b9de4343426661" translate="yes" xml:space="preserve">
          <source>Closes a socket of any type.</source>
          <target state="translated">任意のタイプのソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="07d2d8b051eae4fe9f47eb82e8322135c86a9d13" translate="yes" xml:space="preserve">
          <source>Closes a table. Only processes that have opened a table are allowed to close it.</source>
          <target state="translated">テーブルを閉じます。テーブルを開いたプロセスだけが、テーブルを閉じることができます。</target>
        </trans-unit>
        <trans-unit id="58e1063100c7c97dfae0ff35da3735d6d25aaa8a" translate="yes" xml:space="preserve">
          <source>Closes a tar file opened by &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; によって開かれたtarファイルを閉じます。</target>
        </trans-unit>
        <trans-unit id="f90b891ab0b807043fe4d07d621237e76f50a2a8" translate="yes" xml:space="preserve">
          <source>Closes a zip archive, previously opened with &lt;code&gt;&lt;a href=&quot;#zip_open-1&quot;&gt;zip_open/1,2&lt;/a&gt;&lt;/code&gt;. All resources are closed, and the handle is not to be used after closing.</source>
          <target state="translated">以前に &lt;code&gt;&lt;a href=&quot;#zip_open-1&quot;&gt;zip_open/1,2&lt;/a&gt;&lt;/code&gt; で開いたzipアーカイブを閉じます。すべてのリソースが閉じられ、ハンドルは閉じた後に使用されません。</target>
        </trans-unit>
        <trans-unit id="225c79c841a7ef2d9c14cfd8b6c0560b734eccdf" translate="yes" xml:space="preserve">
          <source>Closes an SSH connection.</source>
          <target state="translated">SSH接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="45417a381f59258abc297027e3e6dd25f02cd21d" translate="yes" xml:space="preserve">
          <source>Closes an SSH session channel.</source>
          <target state="translated">SSH セッションのチャネルを閉じます。</target>
        </trans-unit>
        <trans-unit id="e5e229797e97b628c04b38a55fb8e68b7a123f74" translate="yes" xml:space="preserve">
          <source>Closes an SSH/SFTP connection.</source>
          <target state="translated">SSH/SFTP接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="fb37d2a48e4ea7de8281d62da1148d80ddf77a3c" translate="yes" xml:space="preserve">
          <source>Closes an TLS/DTLS connection.</source>
          <target state="translated">TLS/DTLS 接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="6e2c93e1cd8faf1313158041890dec046b7c45af" translate="yes" xml:space="preserve">
          <source>Closes an open connection to an Erlang node.</source>
          <target state="translated">Erlangノードへのオープンな接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="93f51f1e052bdccb2b5819a8e385ea79a02eae4e" translate="yes" xml:space="preserve">
          <source>Closes an open port. Roughly the same as &lt;code&gt;Port ! {self(), close}&lt;/code&gt; except for the error behavior (see below), being synchronous, and that the port does &lt;strong&gt;not&lt;/strong&gt; reply with &lt;code&gt;{Port, closed}&lt;/code&gt;. Any process can close a port with &lt;code&gt;port_close/1&lt;/code&gt;, not only the port owner (the connected process). If the calling process is linked to the port identified by &lt;code&gt;Port&lt;/code&gt;, the exit signal from the port is guaranteed to be delivered before &lt;code&gt;port_close/1&lt;/code&gt; returns.</source>
          <target state="translated">開いているポートを閉じます。 &lt;code&gt;Port ! {self(), close}&lt;/code&gt; とほぼ同じです！ {self（）、close}（ただし、エラー動作（下記を参照）、同期的、およびポートが &lt;code&gt;{Port, closed}&lt;/code&gt; 応答し&lt;strong&gt;ない&lt;/strong&gt;ことを除く）。ポート所有者（接続されたプロセス）だけでなく、どのプロセスでも &lt;code&gt;port_close/1&lt;/code&gt; を使用してポートを閉じることができます。呼び出しプロセスが &lt;code&gt;Port&lt;/code&gt; で識別されるポートにリンクされている場合、 &lt;code&gt;port_close/1&lt;/code&gt; が戻る前に、ポートからの終了信号が配信されることが保証されます。</target>
        </trans-unit>
        <trans-unit id="b00fa3ba7559016fbe2ca5768febc2df9174ce3f" translate="yes" xml:space="preserve">
          <source>Closes or downgrades a TLS connection. In the latter case the transport connection will be handed over to the &lt;code&gt;NewController&lt;/code&gt; process after receiving the TLS close alert from the peer. The returned transport socket will have the following options set: &lt;code&gt;[{active, false}, {packet, 0}, {mode, binary}]&lt;/code&gt;</source>
          <target state="translated">TLS接続を閉じるかダウングレードします。後者の場合、トランスポート接続は、ピアからTLSクローズアラートを受信した後、 &lt;code&gt;NewController&lt;/code&gt; プロセスに引き渡されます。返されるトランスポートソケットには、次のオプションが設定されます： &lt;code&gt;[{active, false}, {packet, 0}, {mode, binary}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="1e9d4bec3e73259bf8d39d5cd28968440d21e59d" translate="yes" xml:space="preserve">
          <source>Closes or downgrades an TLS connection. In the latter case the transport connection will be handed over to the &lt;code&gt;NewController&lt;/code&gt; process after receiving the TLS close alert from the peer. The returned transport socket will have the following options set: &lt;code&gt;[{active, false}, {packet, 0}, {mode, binary}]&lt;/code&gt;</source>
          <target state="translated">TLS接続を閉じるか、ダウングレードします。後者の場合、トランスポート接続は、ピアからTLSクローズアラートを受信した後、 &lt;code&gt;NewController&lt;/code&gt; プロセスに渡されます。返されるトランスポートソケットには次のオプションが設定されます： &lt;code&gt;[{active, false}, {packet, 0}, {mode, binary}]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="751e30fd02da6e32788d4a5c145fde188cf46230" translate="yes" xml:space="preserve">
          <source>Closes the FTP connection.</source>
          <target state="translated">FTP接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="18d541512ada7266d080309162b7730417e656c5" translate="yes" xml:space="preserve">
          <source>Closes the Telnet connection and stops the process managing it.</source>
          <target state="translated">Telnet接続を閉じ、管理しているプロセスを停止します。</target>
        </trans-unit>
        <trans-unit id="1d8aa591e076329a5cff023401fe06aa6fea372b" translate="yes" xml:space="preserve">
          <source>Closes the access.</source>
          <target state="translated">アクセスを閉じます。</target>
        </trans-unit>
        <trans-unit id="61217cd859d4e901638e1c1975335762abb86efd" translate="yes" xml:space="preserve">
          <source>Closes the current log file. Returns &lt;code&gt;ok&lt;/code&gt;, or &lt;code&gt;{error, module_not_found}&lt;/code&gt;.</source>
          <target state="translated">現在のログファイルを閉じます。 &lt;code&gt;ok&lt;/code&gt; または &lt;code&gt;{error, module_not_found}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="ec24623729c70fb6bea95b4e625a0da9a7e8c998" translate="yes" xml:space="preserve">
          <source>Closes the file referenced by &lt;code&gt;IoDevice&lt;/code&gt;. It mostly returns &lt;code&gt;ok&lt;/code&gt;, except for some severe errors such as out of memory.</source>
          <target state="translated">&lt;code&gt;IoDevice&lt;/code&gt; によって参照されるファイルを閉じます。メモリ不足などのいくつかの重大なエラーを除いて、ほとんどが &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="684f684454d3e1635a242373232771bb9dda7424" translate="yes" xml:space="preserve">
          <source>Closes the given SSH connection.</source>
          <target state="translated">指定された SSH 接続を閉じます。</target>
        </trans-unit>
        <trans-unit id="27c0419dbdad16fe1e643dacd2401a129f7bd772" translate="yes" xml:space="preserve">
          <source>Closes the log file. The output from the RB tool is directed to &lt;code&gt;standard_io&lt;/code&gt;.</source>
          <target state="translated">ログファイルを閉じます。RBツールからの出力は、 &lt;code&gt;standard_io&lt;/code&gt; に送られます。</target>
        </trans-unit>
        <trans-unit id="504626654a412e4798e7dd4e7f5ea514b7c55cf7" translate="yes" xml:space="preserve">
          <source>Closes the port.</source>
          <target state="translated">ポートを閉じます。</target>
        </trans-unit>
        <trans-unit id="b69157f4131c8138ac5adf29a5ca6f8c9971773d" translate="yes" xml:space="preserve">
          <source>Closes the port. Unless the port is already closed, the port replies with &lt;code&gt;{Port,closed}&lt;/code&gt; when all buffers have been flushed and the port really closes.</source>
          <target state="translated">ポートを閉じます。ポートがすでに閉じられていない限り、すべてのバッファがフラッシュされてポートが実際に閉じると、ポートは &lt;code&gt;{Port,closed}&lt;/code&gt; 応答します。</target>
        </trans-unit>
        <trans-unit id="ec9e12048014ec45278b599d7514a7f58d812a5d" translate="yes" xml:space="preserve">
          <source>Closes the preprocessing of a file.</source>
          <target state="translated">ファイルの前処理を閉じます。</target>
        </trans-unit>
        <trans-unit id="269356b8822c1fff23690ce723ac4f1ed4460bf8" translate="yes" xml:space="preserve">
          <source>Closes the registry. After that, the &lt;code&gt;RegHandle&lt;/code&gt; cannot be used.</source>
          <target state="translated">レジストリを閉じます。その後、 &lt;code&gt;RegHandle&lt;/code&gt; は使用できません。</target>
        </trans-unit>
        <trans-unit id="4f12faa3ebf225ccbe7cdef983e0e76eeecdf113" translate="yes" xml:space="preserve">
          <source>Closes the socket and all associations on it. The unsent data is flushed as in &lt;code&gt;&lt;a href=&quot;#eof-2&quot;&gt;eof/2&lt;/a&gt;&lt;/code&gt;. The &lt;code&gt;close/1&lt;/code&gt; call is blocking or otherwise depending of the value of the &lt;code&gt;&lt;a href=&quot;inet#option-linger&quot;&gt;linger&lt;/a&gt;&lt;/code&gt; socket &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;option&lt;/a&gt;&lt;/code&gt;. If &lt;code&gt;close&lt;/code&gt; does not linger or linger time-out expires, the call returns and the data is flushed in the background.</source>
          <target state="translated">ソケットとそのすべての関連付けを閉じます。送信されなかったデータは &lt;code&gt;&lt;a href=&quot;#eof-2&quot;&gt;eof/2&lt;/a&gt;&lt;/code&gt; のようにフラッシュされます。 &lt;code&gt;close/1&lt;/code&gt; コールが遮断またはさもなければの値に依存している &lt;code&gt;&lt;a href=&quot;inet#option-linger&quot;&gt;linger&lt;/a&gt;&lt;/code&gt; ソケット &lt;code&gt;&lt;a href=&quot;#options&quot;&gt;option&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;close&lt;/code&gt; が残っていない場合、またはlingerタイムアウトの期限が切れている場合、呼び出しは戻り、データはバックグラウンドでフラッシュされます。</target>
        </trans-unit>
        <trans-unit id="d088ba46947a0a90bc08a101b18b61eb57bcdcb7" translate="yes" xml:space="preserve">
          <source>Closes the socket.</source>
          <target state="translated">ソケットを閉じます。</target>
        </trans-unit>
        <trans-unit id="7bffc0467918675e50dec5df0e6816862c61c4aa" translate="yes" xml:space="preserve">
          <source>Closes the stream referenced by &lt;code&gt;Z&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Z&lt;/code&gt; によって参照されるストリームを閉じます。</target>
        </trans-unit>
        <trans-unit id="99973cebcb8af97213e10f909e8acc88b7dd1ef1" translate="yes" xml:space="preserve">
          <source>Closes this window and detach from the process.</source>
          <target state="translated">このウィンドウを閉じてプロセスから切り離します。</target>
        </trans-unit>
        <trans-unit id="34a868e0a12f0bd3b0076e904023cd21157c12b0" translate="yes" xml:space="preserve">
          <source>Closing a Channel (RFC 4254, section 5.3)</source>
          <target state="translated">チャネルを閉じる (RFC 4254,セクション 5.3)</target>
        </trans-unit>
        <trans-unit id="dfd86873672c10f114caa15b02aa5a859162a796" translate="yes" xml:space="preserve">
          <source>ClosureOp ::= &lt;code&gt;closure&lt;/code&gt;</source>
          <target state="translated">ClosureOp :: = &lt;code&gt;closure&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="5e90a0d75842a148bf39ca837cd5f740d36c1a9b" translate="yes" xml:space="preserve">
          <source>Cmac functions - &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4493.txt&quot;&gt;The AES-CMAC Algorithm (RFC 4493)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">Cmac関数 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4493.txt&quot;&gt;The AES-CMAC Algorithm (RFC 4493)&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="49cdd0ecba2f4a1cf6ab5d194ad0b2feeb7627e0" translate="yes" xml:space="preserve">
          <source>Co-located callback code for each state, for all &lt;code&gt;&lt;a href=&quot;#Event%20Types%20and%20Event%20Content&quot;&gt; &lt;strong&gt;Event Types&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; (such as &lt;strong&gt;call&lt;/strong&gt;, &lt;strong&gt;cast&lt;/strong&gt; and &lt;strong&gt;info&lt;/strong&gt;)</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;#Event%20Types%20and%20Event%20Content&quot;&gt; &lt;strong&gt;Event Types&lt;/strong&gt; &lt;/a&gt;&lt;/code&gt; （&lt;strong&gt;呼び出し&lt;/strong&gt;、&lt;strong&gt;キャスト&lt;/strong&gt;、&lt;strong&gt;情報など&lt;/strong&gt;）の各状態の同じ場所に配置されたコールバックコード &lt;strong&gt;&lt;/strong&gt; &lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3401a3d9fe92078f97d8cfcd69cd94295181a349" translate="yes" xml:space="preserve">
          <source>Co-located callback code for each state, regardless of &lt;code&gt;&lt;a href=&quot;#Event%20Types&quot;&gt;Event Type&lt;/a&gt;&lt;/code&gt; (such as &lt;strong&gt;call&lt;/strong&gt;, &lt;strong&gt;cast&lt;/strong&gt; and &lt;strong&gt;info&lt;/strong&gt;)</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#Event%20Types&quot;&gt;Event Type&lt;/a&gt;&lt;/code&gt; （&lt;strong&gt;call&lt;/strong&gt;、&lt;strong&gt;cast&lt;/strong&gt;、&lt;strong&gt;infoなど&lt;/strong&gt;）に関係なく、各状態の同じ場所にあるコールバックコード</target>
        </trans-unit>
        <trans-unit id="dce76c393d27cb2285a888bed5709e098f9c85a0" translate="yes" xml:space="preserve">
          <source>Co-located state code</source>
          <target state="translated">同位置の州コード</target>
        </trans-unit>
        <trans-unit id="071b4a868a8b79b6bd06d47e2377e594598062a5" translate="yes" xml:space="preserve">
          <source>Coalescing of free blocks are always performed immediately. Boundary tags (headers and footers) in free blocks are used, which makes the time complexity for coalescing constant.</source>
          <target state="translated">フリーブロックの合体は常に即座に行われます。フリーブロックの境界タグ(ヘッダとフッタ)が使用されるため、合体にかかる時間の複雑さが一定になります。</target>
        </trans-unit>
        <trans-unit id="adac69379a626c2436948a4ef1792c7d719ef929" translate="yes" xml:space="preserve">
          <source>Code</source>
          <target state="translated">Code</target>
        </trans-unit>
        <trans-unit id="f82863ada61185750ed2535d5af42aa575352c0d" translate="yes" xml:space="preserve">
          <source>Code Path</source>
          <target state="translated">コードパス</target>
        </trans-unit>
        <trans-unit id="2cbcb8d71aaf189c59401ae6220a8fde81d304a8" translate="yes" xml:space="preserve">
          <source>Code changes that seem small can cause a deadlock, as unforeseen consequences can occur. The use of &lt;code&gt;input&lt;/code&gt; is dangerous in this type of code.</source>
          <target state="translated">予期しない結果が発生する可能性があるため、コードの変更がわずかに見えるとデッドロックが発生する可能性があります。このタイプのコードでは、 &lt;code&gt;input&lt;/code&gt; の使用は危険です。</target>
        </trans-unit>
        <trans-unit id="f6f0001667925b51aaa144c8555cdf56ab04f2c1" translate="yes" xml:space="preserve">
          <source>Code executing only in the final phase does not have to be able to cope with the time warp.</source>
          <target state="translated">最終段階でのみ実行するコードは、タイムワープに対応する必要はありません。</target>
        </trans-unit>
        <trans-unit id="7da5ff52f9c2e858ddeba30acb14c98399f10834" translate="yes" xml:space="preserve">
          <source>Code generation directives</source>
          <target state="translated">コード生成ディレクティブ</target>
        </trans-unit>
        <trans-unit id="7517d2173bc408241c9c961ca6ed13ae1bf3cf95" translate="yes" xml:space="preserve">
          <source>Code like the following will also be optimized:</source>
          <target state="translated">以下のようなコードも最適化されます。</target>
        </trans-unit>
        <trans-unit id="a42f74f1f02a3aa3006bb5a047e88b03e340b66f" translate="yes" xml:space="preserve">
          <source>Code loading</source>
          <target state="translated">コードの読み込み</target>
        </trans-unit>
        <trans-unit id="e6e4cfb9758510abbc95d1476acfff025d1aadab" translate="yes" xml:space="preserve">
          <source>Code loading mode.</source>
          <target state="translated">コードローディングモード。</target>
        </trans-unit>
        <trans-unit id="8ac67b9a438c843103e19b5b4579252c71ad56fe" translate="yes" xml:space="preserve">
          <source>Code loading works almost as usual, except that interpreted modules are also stored in a database and debugged processes use only this stored code. Reinterpreting an interpreted module results in the new version being stored as well, but does not affect existing processes executing an older version of the code. This means that the code replacement mechanism of Erlang does not work for debugged processes.</source>
          <target state="translated">コードの読み込みは、解釈されたモジュールもデータベースに保存され、デバッグされたプロセスはこの保存されたコードのみを使用することを除いては、ほぼ通常通りに動作します。インタプリタモジュールを再解釈すると新しいバージョンも保存されますが、古いバージョンのコードを実行している既存のプロセスには影響しません。これはErlangのコード置換メカニズムがデバッグされたプロセスでは機能しないことを意味します。</target>
        </trans-unit>
        <trans-unit id="56c19e16bac5b16970cd9ff83784b17afefb33d0" translate="yes" xml:space="preserve">
          <source>Code point 16#FEFF is used for Byte Order Marks (BOMs) and use of that character is not encouraged in other contexts. It is valid though, as the character &quot;ZWNBS&quot; (Zero Width Non Breaking Space). BOMs are used to identify encodings and byte order for programs where such parameters are not known in advance. BOMs are more seldom used than expected, but can become more widely spread as they provide the means for programs to make educated guesses about the Unicode format of a certain file.</source>
          <target state="translated">コードポイント 16#FEFF はバイト・オーダー・マーク(BOM)に使用され、他の文脈ではこの文字の使用は推奨されません。ただし、「ZWNBS」(Zero Width Non Breaking Space)という文字としては有効です。BOM は、エンコーディングとバイトオーダーを識別するために使用され、そのようなパラメータが事前に知られていないプログラムでは、そのようなパラメータを識別するために使用されます。BOM は予想以上にめったに使われていませんが、あるファイルの Unicode 形式についてプログラムが知識を持って推測する手段を提供してくれるので、より広く普及する可能性があります。</target>
        </trans-unit>
        <trans-unit id="63c15bd60bea5d826d7523a85dc068734b1a1ba4" translate="yes" xml:space="preserve">
          <source>Code such as these examples is inherently non-portable, even different versions of the same OS on the same platform can respond differently to this kind of option manipulation. Use with care.</source>
          <target state="translated">これらの例のようなコードは本質的に移植性がなく、同じプラットフォーム上の同じOSの異なるバージョンであっても、この種のオプション操作に対して異なる反応を示す可能性があります。注意して使用してください。</target>
        </trans-unit>
        <trans-unit id="5f527646d672b093be1a4098fc6814606d464bbd" translate="yes" xml:space="preserve">
          <source>Code that is the current latest version of the modules.</source>
          <target state="translated">モジュールの現在の最新バージョンであるコード。</target>
        </trans-unit>
        <trans-unit id="70f90dd78e0b0fb23852ab6b2688deed73f5c02c" translate="yes" xml:space="preserve">
          <source>Code that manipulates the same data records can be run concurrently without the different processes interfering with each other.</source>
          <target state="translated">同じデータレコードを操作するコードは、異なるプロセスが互いに干渉することなく、同時に実行することができます。</target>
        </trans-unit>
        <trans-unit id="8ee529db22d08c438f2f9211e70f671de376615a" translate="yes" xml:space="preserve">
          <source>Code using the same layout is easy to read and maintain.</source>
          <target state="translated">同じレイアウトを使ったコードは読みやすく、メンテナンスも簡単です。</target>
        </trans-unit>
        <trans-unit id="aaa79e3d7390f36f2c6656fca85bff5690139844" translate="yes" xml:space="preserve">
          <source>Code where there exists a newer version in the system, but the old version is not yet purged.</source>
          <target state="translated">システム内に新しいバージョンが存在するが、古いバージョンがまだパージされていないコード。</target>
        </trans-unit>
        <trans-unit id="dda1e35cb5eaf5544e935767c1b869708c6466c8" translate="yes" xml:space="preserve">
          <source>Code written without using behaviours can be more efficient, but the increased efficiency is at the expense of generality. The ability to manage all applications in the system in a consistent manner is important.</source>
          <target state="translated">ビヘイビアを使わずに書かれたコードはより効率的になりますが、効率性の向上は一般性を犠牲にしています。システム内のすべてのアプリケーションを一貫して管理できることが重要です。</target>
        </trans-unit>
        <trans-unit id="aabf94dda285f7b2ce559c0a81d2821b9125e926" translate="yes" xml:space="preserve">
          <source>Collect digit map letters according to the digit map.</source>
          <target state="translated">桁の地図に合わせて桁の地図文字を収集します。</target>
        </trans-unit>
        <trans-unit id="d5c4376d706e0e0926ed6b917a93992a5fa5fd3f" translate="yes" xml:space="preserve">
          <source>Collect trace events and provide a backing storage appropriate for iteration</source>
          <target state="translated">トレースイベントを収集し、イテレーションに適したバッキングストレージを提供します。</target>
        </trans-unit>
        <trans-unit id="e33d648c88485b5e3445ec85a48ee3a200918fb7" translate="yes" xml:space="preserve">
          <source>Collector menu:</source>
          <target state="translated">コレクターメニュー。</target>
        </trans-unit>
        <trans-unit id="2cc767ef47379b0118564589be24769b7d52f979" translate="yes" xml:space="preserve">
          <source>Collects and analyses the call counters presently in the node for either module &lt;code&gt;Mod&lt;/code&gt;, or for all modules (except &lt;code&gt;cprof&lt;/code&gt; itself), and returns:</source>
          <target state="translated">モジュール &lt;code&gt;Mod&lt;/code&gt; またはすべてのモジュール（ &lt;code&gt;cprof&lt;/code&gt; 自体を除く）のノードに現在ある呼び出しカウンターを収集して分析し、次の値を返します。</target>
        </trans-unit>
        <trans-unit id="5b532be13bb4823dedcb40365e8ab9adfcc43c5f" translate="yes" xml:space="preserve">
          <source>Collects call counters and computes the result.</source>
          <target state="translated">呼び出しカウンタを収集し、結果を計算します。</target>
        </trans-unit>
        <trans-unit id="2d339d9851615bae000afcd6bc3156d0c65cf55a" translate="yes" xml:space="preserve">
          <source>Collects lock statistics from the runtime system. The function starts a server if it is not already started. It then populates the server with lock statistics. If the server held any lock statistics data before the collect then that data is lost.</source>
          <target state="translated">ランタイムシステムからロックの統計情報を収集します。この関数は、まだサーバが起動していない場合にはサーバを起動します。その後、ロック統計情報をサーバに入力します。収集前にサーバがロック統計データを保持していた場合、そのデータは失われます。</target>
        </trans-unit>
        <trans-unit id="114d6372609006dd470fd4948b225b11b9aee096" translate="yes" xml:space="preserve">
          <source>Collects several segments of data, referenced by &lt;code&gt;ev&lt;/code&gt;, by copying them in order to the buffer &lt;code&gt;buf&lt;/code&gt;, of the size &lt;code&gt;len&lt;/code&gt;.</source>
          <target state="translated">サイズ &lt;code&gt;len&lt;/code&gt; のバッファ &lt;code&gt;buf&lt;/code&gt; に順にコピーすることにより、 &lt;code&gt;ev&lt;/code&gt; によって参照されるデータのいくつかのセグメントを収集します。</target>
        </trans-unit>
        <trans-unit id="bdf0b5bed937c19a708d35d32ebd309882131285" translate="yes" xml:space="preserve">
          <source>Column &lt;strong&gt;Memory&lt;/strong&gt; shows the 'Memory' field that was added to crashdumps in Erlang/OTP R16B01. This is the total amount of memory used by the process. For crashdumps from earlier releases, this column shows the 'Stack+heap' field. The value is always in bytes.</source>
          <target state="translated">列&lt;strong&gt;メモリ&lt;/strong&gt;は、Erlang / OTP R16B01のクラッシュダンプに追加された「メモリ」フィールドを示しています。これは、プロセスで使用されるメモリの総量です。以前のリリースのクラッシュダンプの場合、この列には「Stack + heap」フィールドが表示されます。値は常にバイト単位です。</target>
        </trans-unit>
        <trans-unit id="f89976c8c47c9f7de7e2ac197cd3c1add9759dd2" translate="yes" xml:space="preserve">
          <source>Column sorting orders.</source>
          <target state="translated">カラムのソート順。</target>
        </trans-unit>
        <trans-unit id="bbcaf86c57cd6bdf869b7c67b5080193d82b8647" translate="yes" xml:space="preserve">
          <source>Combine the statistics from different instances of a lock class.</source>
          <target state="translated">ロッククラスの異なるインスタンスからの統計情報を結合します。</target>
        </trans-unit>
        <trans-unit id="17fcaa24e071e5e36935cbcb3562866374761c3a" translate="yes" xml:space="preserve">
          <source>Combined instructions</source>
          <target state="translated">複合的な指示</target>
        </trans-unit>
        <trans-unit id="7dfd2d72e4720e2879330fef4226ea30d546b398" translate="yes" xml:space="preserve">
          <source>Combines &lt;code&gt;position/2&lt;/code&gt; and &lt;code&gt;read/2&lt;/code&gt; in one operation, which is more efficient than calling them one at a time.</source>
          <target state="translated">&lt;code&gt;position/2&lt;/code&gt; と &lt;code&gt;read/2&lt;/code&gt; を1つの操作で組み合わせます。これは、一度に1つずつ呼び出すよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="dc20251782236128d549d6ebb0e54869f51ae3db" translate="yes" xml:space="preserve">
          <source>Combines &lt;code&gt;position/2&lt;/code&gt; and &lt;code&gt;read/2&lt;/code&gt; in one operation, which is more efficient than calling them one at a time. If &lt;code&gt;IoDevice&lt;/code&gt; is opened in &lt;code&gt;raw&lt;/code&gt; mode, some restrictions apply:</source>
          <target state="translated">&lt;code&gt;position/2&lt;/code&gt; と &lt;code&gt;read/2&lt;/code&gt; を1つの操作で組み合わせます。これは、一度に1つずつ呼び出すよりも効率的です。 &lt;code&gt;IoDevice&lt;/code&gt; が &lt;code&gt;raw&lt;/code&gt; モードで開かれる場合、いくつかの制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="4267bca1f40191888eec6c3429c09752efc2d66c" translate="yes" xml:space="preserve">
          <source>Combines &lt;code&gt;position/2&lt;/code&gt; and &lt;code&gt;write/2&lt;/code&gt; in one operation, which is more efficient than calling them one at a time.</source>
          <target state="translated">&lt;code&gt;position/2&lt;/code&gt; と &lt;code&gt;write/2&lt;/code&gt; を1つの操作で組み合わせます。これは、一度に1つずつ呼び出すよりも効率的です。</target>
        </trans-unit>
        <trans-unit id="4fca0bb2dc4fbd4f474148dae6a3d233006a85be" translate="yes" xml:space="preserve">
          <source>Combines &lt;code&gt;position/2&lt;/code&gt; and &lt;code&gt;write/2&lt;/code&gt; in one operation, which is more efficient than calling them one at a time. If &lt;code&gt;IoDevice&lt;/code&gt; has been opened in &lt;code&gt;raw&lt;/code&gt; mode, some restrictions apply:</source>
          <target state="translated">&lt;code&gt;position/2&lt;/code&gt; と &lt;code&gt;write/2&lt;/code&gt; を1つの操作で組み合わせます。これは、一度に1つずつ呼び出すよりも効率的です。 &lt;code&gt;IoDevice&lt;/code&gt; が &lt;code&gt;raw&lt;/code&gt; モードで開かれている場合、いくつかの制限が適用されます。</target>
        </trans-unit>
        <trans-unit id="60a59ba0758293ba79d03e3211f6ab8c3cf7a44b" translate="yes" xml:space="preserve">
          <source>Combines map and fold in a single operation. This is similar to &lt;code&gt;map/2&lt;/code&gt;, but also propagates an extra value from each application of the &lt;code&gt;Function&lt;/code&gt; to the next, while doing a post-order traversal of the tree like &lt;code&gt;fold/3&lt;/code&gt;. The value &lt;code&gt;Start&lt;/code&gt; is passed to the first function application, and the final result is the result of the last application.</source>
          <target state="translated">単一の操作でマップとフォールドを組み合わせます。これは &lt;code&gt;map/2&lt;/code&gt; に似ていますが、 &lt;code&gt;fold/3&lt;/code&gt; のようにツリーのポストオーダートラバーサルを実行しながら、 &lt;code&gt;Function&lt;/code&gt; 各アプリケーションから次のアプリケーションに追加の値を伝達します。 &lt;code&gt;Start&lt;/code&gt; 値は最初の関数アプリケーションに渡され、最終結果は最後のアプリケーションの結果です。</target>
        </trans-unit>
        <trans-unit id="b3df522de4ef77bd85fda7b30fd4231f0b29e129" translate="yes" xml:space="preserve">
          <source>Combines the elements of three lists of equal length into one list. For each triple &lt;code&gt;X, Y, Z&lt;/code&gt; of list elements from the three lists, the element in the result list is &lt;code&gt;Combine(X, Y, Z)&lt;/code&gt;.</source>
          <target state="translated">同じ長さの3つのリストの要素を1つのリストに結合します。3つのリストのリスト要素の各トリプル &lt;code&gt;X, Y, Z&lt;/code&gt; について、結果リストの要素は &lt;code&gt;Combine(X, Y, Z)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b63fcc6cc8116ab8ae92cf34ec638f3a76d35764" translate="yes" xml:space="preserve">
          <source>Combines the elements of two lists of equal length into one list. For each pair &lt;code&gt;X, Y&lt;/code&gt; of list elements from the two lists, the element in the result list is &lt;code&gt;Combine(X, Y)&lt;/code&gt;.</source>
          <target state="translated">同じ長さの2つのリストの要素を1つのリストに結合します。2つのリストのリスト要素の各ペア &lt;code&gt;X, Y&lt;/code&gt; について、結果リストの要素は &lt;code&gt;Combine(X, Y)&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="df39e33c36c20503114fdd2e4361dfbd8a144da1" translate="yes" xml:space="preserve">
          <source>Combines the operations of &lt;code&gt;&lt;a href=&quot;#map-2&quot;&gt;map/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#foldl-3&quot;&gt;foldl/3&lt;/a&gt;&lt;/code&gt; into one pass.</source>
          <target state="translated">コンバインの操作 &lt;code&gt;&lt;a href=&quot;#map-2&quot;&gt;map/2&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#foldl-3&quot;&gt;foldl/3&lt;/a&gt;&lt;/code&gt; ワンパスに。</target>
        </trans-unit>
        <trans-unit id="9eb3883b2969f22a840c76b882086f1400662f06" translate="yes" xml:space="preserve">
          <source>Combines the operations of &lt;code&gt;&lt;a href=&quot;#map-2&quot;&gt;map/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#foldr-3&quot;&gt;foldr/3&lt;/a&gt;&lt;/code&gt; into one pass.</source>
          <target state="translated">コンバインの操作 &lt;code&gt;&lt;a href=&quot;#map-2&quot;&gt;map/2&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#foldr-3&quot;&gt;foldr/3&lt;/a&gt;&lt;/code&gt; をワンパスに。</target>
        </trans-unit>
        <trans-unit id="001f12c2f7fc722059d0ee491fe8c8b28186a093" translate="yes" xml:space="preserve">
          <source>Combines two Adler-32 checksums into one. For two binaries or iolists, &lt;code&gt;Data1&lt;/code&gt; and &lt;code&gt;Data2&lt;/code&gt; with sizes of &lt;code&gt;Size1&lt;/code&gt; and &lt;code&gt;Size2&lt;/code&gt;, with Adler-32 checksums &lt;code&gt;Adler1&lt;/code&gt; and &lt;code&gt;Adler2&lt;/code&gt;.</source>
          <target state="translated">2つのAdler-32チェックサムを1つに結合します。2つのバイナリーまたはiolistの場合、 &lt;code&gt;Data1&lt;/code&gt; および &lt;code&gt;Data2&lt;/code&gt; のサイズは &lt;code&gt;Size1&lt;/code&gt; および &lt;code&gt;Size2&lt;/code&gt; で、Adler-32チェックサムは &lt;code&gt;Adler1&lt;/code&gt; および &lt;code&gt;Adler2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="08c1251d5cd30a4c857ece6865b552f1070674cf" translate="yes" xml:space="preserve">
          <source>Combines two CRC checksums into one. For two binaries or iolists, &lt;code&gt;Data1&lt;/code&gt; and &lt;code&gt;Data2&lt;/code&gt; with sizes of &lt;code&gt;Size1&lt;/code&gt; and &lt;code&gt;Size2&lt;/code&gt;, with CRC checksums &lt;code&gt;CRC1&lt;/code&gt; and &lt;code&gt;CRC2&lt;/code&gt;.</source>
          <target state="translated">2つのCRCチェックサムを1つに結合します。2つのバイナリーまたはiolistの場合、サイズが &lt;code&gt;Size1&lt;/code&gt; および &lt;code&gt;Size2&lt;/code&gt; で、CRCチェックサムが &lt;code&gt;CRC1&lt;/code&gt; および &lt;code&gt;CRC2&lt;/code&gt; の &lt;code&gt;Data1&lt;/code&gt; および &lt;code&gt;Data2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1746126ff205a59844a881a51b112a8b53e83b98" translate="yes" xml:space="preserve">
          <source>Combines two previously computed adler32 checksums. This computation requires the size of the data object for the second checksum to be known.</source>
          <target state="translated">以前に計算された2つのadler32チェックサムを結合します。この計算では、2つ目のチェックサムのデータオブジェクトのサイズを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="b5a84d5edd7f748866e54345659773ed891e4ac9" translate="yes" xml:space="preserve">
          <source>Combines two previously computed crc32 checksums. This computation requires the size of the data object for the second checksum to be known.</source>
          <target state="translated">以前に計算された2つのcrc32チェックサムを結合します。この計算では、2つ目のチェックサムのデータオブジェクトのサイズを知る必要があります。</target>
        </trans-unit>
        <trans-unit id="7c547b4f5559e9e848f6e074436dd454e9700281" translate="yes" xml:space="preserve">
          <source>Combining maps and filters enables writing of very succinct code. For example, to define a set difference function &lt;code&gt;diff(L1, L2)&lt;/code&gt; to be the difference between the lists &lt;code&gt;L1&lt;/code&gt; and &lt;code&gt;L2&lt;/code&gt;, the code can be written as follows:</source>
          <target state="translated">マップとフィルターを組み合わせると、非常に簡潔なコードを書くことができます。たとえば、リスト差分関数 &lt;code&gt;diff(L1, L2)&lt;/code&gt; をリスト &lt;code&gt;L1&lt;/code&gt; と &lt;code&gt;L2&lt;/code&gt; の差分になるように定義するには、コードを次のように記述します。</target>
        </trans-unit>
        <trans-unit id="dbd234d5db623301ed626dbc5f5a4befa82d3bdc" translate="yes" xml:space="preserve">
          <source>Comma-separated string that determines which authentication methods that the client shall support and in which order they are tried. Defaults to &lt;code&gt;&quot;publickey,keyboard-interactive,password&quot;&lt;/code&gt;</source>
          <target state="translated">クライアントがサポートする認証方式とそれらが試行される順序を決定するカンマ区切りの文字列。デフォルトは &lt;code&gt;&quot;publickey,keyboard-interactive,password&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8901895fb1b1d4c4ea2fec368c25176bf73e2f7e" translate="yes" xml:space="preserve">
          <source>Command</source>
          <target state="translated">Command</target>
        </trans-unit>
        <trans-unit id="342da5a2f1813920c1bbfc4e852eea12f5063e4a" translate="yes" xml:space="preserve">
          <source>Command 1 sets variable &lt;code&gt;Str&lt;/code&gt; to string &lt;code&gt;&quot;abcd&quot;&lt;/code&gt;.</source>
          <target state="translated">コマンド1は、変数 &lt;code&gt;Str&lt;/code&gt; を文字列 &lt;code&gt;&quot;abcd&quot;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="fd9251dc262d6cfde540ad0cd5c6d370876df98b" translate="yes" xml:space="preserve">
          <source>Command 10 prints the current value of &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">コマンド10は、 &lt;code&gt;L&lt;/code&gt; の現在の値を出力します。</target>
        </trans-unit>
        <trans-unit id="549199ae9bb6e901fc9258b242e067c754071753" translate="yes" xml:space="preserve">
          <source>Command 11 tries to match &lt;code&gt;{P, Q, R}&lt;/code&gt; against &lt;code&gt;Descriptor&lt;/code&gt;, which is &lt;code&gt;{4, abc}&lt;/code&gt;. The match fails and none of the new variables become bound. The printout starting with &quot;&lt;code&gt;** exception error:&lt;/code&gt;&quot; is not the value of the expression (the expression had no value because its evaluation failed), but a warning printed by the system to inform the user that an error has occurred. The values of the other variables (&lt;code&gt;L&lt;/code&gt;, &lt;code&gt;Str&lt;/code&gt;, and so on) are unchanged.</source>
          <target state="translated">コマンド11は、 &lt;code&gt;{P, Q, R}&lt;/code&gt; を &lt;code&gt;Descriptor&lt;/code&gt; 、つまり &lt;code&gt;{4, abc}&lt;/code&gt; と照合しようとします。一致は失敗し、新しい変数はバインドされません。「 &lt;code&gt;** exception error:&lt;/code&gt; 」で始まる印刷出力は、式の値ではありません（式が評価に失敗したため値がありませんでした）が、エラーが発生したことをユーザーに通知するためにシステムによって印刷された警告です。他の変数（ &lt;code&gt;L&lt;/code&gt; 、 &lt;code&gt;Str&lt;/code&gt; など）の値は変更されません。</target>
        </trans-unit>
        <trans-unit id="691b9bcaa6996c92d90bae097639c4314d240f78" translate="yes" xml:space="preserve">
          <source>Command 16 clears all bindings.</source>
          <target state="translated">コマンド16はすべてのバインディングをクリアします。</target>
        </trans-unit>
        <trans-unit id="05c70d2234df4548b33a38e52389722995c34012" translate="yes" xml:space="preserve">
          <source>Command 19 evaluates &lt;code&gt;test1:demo(1)&lt;/code&gt;. The evaluation succeeds and the changes made in the process dictionary become visible to the shell. The new value of dictionary item &lt;code&gt;aa&lt;/code&gt; can be seen in command 20.</source>
          <target state="translated">コマンド19は &lt;code&gt;test1:demo(1)&lt;/code&gt; を評価します。評価は成功し、プロセスディクショナリで行われた変更がシェルに表示されます。辞書項目 &lt;code&gt;aa&lt;/code&gt; の新しい値は、コマンド20で確認できます。</target>
        </trans-unit>
        <trans-unit id="571320cb8183e22d95e0984d3435eed120eb8182" translate="yes" xml:space="preserve">
          <source>Command 2 sets &lt;code&gt;L&lt;/code&gt; to the length of string &lt;code&gt;Str&lt;/code&gt;.</source>
          <target state="translated">コマンド2は、 &lt;code&gt;L&lt;/code&gt; を文字列 &lt;code&gt;Str&lt;/code&gt; の長さに設定します。</target>
        </trans-unit>
        <trans-unit id="b305cf69a5307579ebf549236a1a79deee898174" translate="yes" xml:space="preserve">
          <source>Command 3 builds the tuple &lt;code&gt;Descriptor&lt;/code&gt;, evaluating the BIF &lt;code&gt;list_to_atom/1 &lt;/code&gt;.</source>
          <target state="translated">コマンド3は、タプル &lt;code&gt;Descriptor&lt;/code&gt; を作成し、BIF &lt;code&gt;list_to_atom/1 &lt;/code&gt; を評価します。</target>
        </trans-unit>
        <trans-unit id="6a5da20736f5aa69db276e3a85c9eb3bf4a9c347" translate="yes" xml:space="preserve">
          <source>Command 3 builds the tuple &lt;code&gt;Descriptor&lt;/code&gt;, evaluating the BIF &lt;code&gt;list_to_atom/1&lt;/code&gt;.</source>
          <target state="translated">コマンド3は、BIF &lt;code&gt;list_to_atom/1&lt;/code&gt; を評価して、タプル &lt;code&gt;Descriptor&lt;/code&gt; を作成します。</target>
        </trans-unit>
        <trans-unit id="51d00e3abf06e503663d94b19230b0cc26a72c2f" translate="yes" xml:space="preserve">
          <source>Command 33 prints the definition of the record named &lt;code&gt;rec&lt;/code&gt;.</source>
          <target state="translated">コマンド33は、 &lt;code&gt;rec&lt;/code&gt; という名前のレコードの定義を出力します。</target>
        </trans-unit>
        <trans-unit id="45bc49c790b43237868293d2dd2e2edd61652121" translate="yes" xml:space="preserve">
          <source>Command 34 tries to create a &lt;code&gt;rec&lt;/code&gt; record, but fails as function &lt;code&gt;val/0&lt;/code&gt; is undefined.</source>
          <target state="translated">コマンド34は、 &lt;code&gt;rec&lt;/code&gt; レコードの作成を試みますが、関数 &lt;code&gt;val/0&lt;/code&gt; が未定義であるため失敗します。</target>
        </trans-unit>
        <trans-unit id="72dcc67df9bbfa51a0492808644209d31bbd7f2f" translate="yes" xml:space="preserve">
          <source>Command 35 shows the workaround: explicitly assign values to record fields that cannot otherwise be initialized.</source>
          <target state="translated">コマンド 35 は、回避策を示しています:他の方法では初期化できないレコード フィールドに値を明示的に割り当てます。</target>
        </trans-unit>
        <trans-unit id="fa2515e3e9587434ad52b14ccfc30883e7022dde" translate="yes" xml:space="preserve">
          <source>Command 36 prints the newly created record using record definitions maintained by the shell.</source>
          <target state="translated">コマンド36は、シェルが保持するレコード定義を使用して、新しく作成されたレコードを表示します。</target>
        </trans-unit>
        <trans-unit id="9154fd77dee8fff9e9758b70c934a42fa72f2fda" translate="yes" xml:space="preserve">
          <source>Command 37 defines a record directly in the shell. The definition replaces the one read from file &lt;code&gt;ex.beam&lt;/code&gt;.</source>
          <target state="translated">コマンド37は、シェルで直接レコードを定義します。この定義は、ファイル &lt;code&gt;ex.beam&lt;/code&gt; から読み取ったものを置き換えます。</target>
        </trans-unit>
        <trans-unit id="1f8eb1cd9b3187f9b754c49fd8314986efc7792e" translate="yes" xml:space="preserve">
          <source>Command 38 creates a record using the new definition, and prints the result.</source>
          <target state="translated">コマンド 38 は、新しい定義を使用してレコードを作成し、その結果を表示します。</target>
        </trans-unit>
        <trans-unit id="505fd82812bb30eb7dc21bc2b04f27b3d82e3401" translate="yes" xml:space="preserve">
          <source>Command 39 and 40 show that record definitions are updated as side effects. The evaluation of the command fails, but the definition of &lt;code&gt;rec&lt;/code&gt; has been carried out.</source>
          <target state="translated">コマンド39および40は、レコード定義が副作用として更新されることを示しています。コマンドの評価は失敗しましたが、 &lt;code&gt;rec&lt;/code&gt; の定義は実行されました。</target>
        </trans-unit>
        <trans-unit id="c942ae59ce728287fe12cdbf8492f720f289065f" translate="yes" xml:space="preserve">
          <source>Command 4 prints the value of variable &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">コマンド4は、変数 &lt;code&gt;L&lt;/code&gt; の値を出力します。</target>
        </trans-unit>
        <trans-unit id="e7d5c11f36c6ad9e416101362d83e867e199c699" translate="yes" xml:space="preserve">
          <source>Command 41 evaluates &lt;code&gt;test1:loop(0)&lt;/code&gt;, which puts the system into an infinite loop. At this point the user types &lt;code&gt;^G&lt;/code&gt; (Control G), which suspends output from the current process, which is stuck in a loop, and activates &lt;code&gt;JCL&lt;/code&gt; mode. In &lt;code&gt;JCL&lt;/code&gt; mode the user can start and stop jobs.</source>
          <target state="translated">コマンド41は &lt;code&gt;test1:loop(0)&lt;/code&gt; を評価し、システムを無限ループにします。この時点で、ユーザーは &lt;code&gt;^G&lt;/code&gt; （コントロールG）を入力します。これにより、ループでスタックしている現在のプロセスからの出力が中断され、 &lt;code&gt;JCL&lt;/code&gt; モードがアクティブになります。で &lt;code&gt;JCL&lt;/code&gt; のモードユーザーは、ジョブを開始し、停止することができます。</target>
        </trans-unit>
        <trans-unit id="027e48c60bf06fa02b13ef5f87c61d9d7dbea65c" translate="yes" xml:space="preserve">
          <source>Command 42 creates an ETS table.</source>
          <target state="translated">コマンド42は、ETSテーブルを作成する。</target>
        </trans-unit>
        <trans-unit id="bb7e5f60b5a386b27383613df99699547215a065" translate="yes" xml:space="preserve">
          <source>Command 43 tries to insert a tuple into the ETS table, but the first argument (the table) is missing. The exception kills the evaluator process.</source>
          <target state="translated">コマンド 43 は、ETS テーブルにタプルを挿入しようとしますが、第 1 引数 (テーブル)が欠落しています。この例外は評価者プロセスを終了させます。</target>
        </trans-unit>
        <trans-unit id="13e1680dee0b31442dfcf7d8dd715d5303935741" translate="yes" xml:space="preserve">
          <source>Command 44 corrects the mistake, but the ETS table has been destroyed as it was owned by the killed evaluator process.</source>
          <target state="translated">コマンド44で間違いは修正されますが、殺された評価者プロセスが所有していたため、ETSテーブルは破棄されました。</target>
        </trans-unit>
        <trans-unit id="249b0132245dd6a948f325230d14fb2abcebf877" translate="yes" xml:space="preserve">
          <source>Command 46 sets the exception handling of the evaluator process to &lt;code&gt;true&lt;/code&gt;. The exception handling can also be set when starting Erlang by &lt;code&gt;erl -stdlib shell_catch_exception true&lt;/code&gt;.</source>
          <target state="translated">コマンド46は、エバリュエータープロセスの例外処理を &lt;code&gt;true&lt;/code&gt; に設定します。例外処理は &lt;code&gt;erl -stdlib shell_catch_exception true&lt;/code&gt; で Erlangを起動するときにも設定できます。</target>
        </trans-unit>
        <trans-unit id="0109c9c2951329001d2c921ef35da35fce643d09" translate="yes" xml:space="preserve">
          <source>Command 48 makes the same mistake as in command 43, but this time the evaluator process lives on. The single star at the beginning of the printout signals that the exception has been caught.</source>
          <target state="translated">コマンド 48 はコマンド 43 と同じ間違いをしますが、今回は評価プロセスが継続します。プリントアウトの先頭にある 1 つの星は、例外が捕捉されたことを示しています。</target>
        </trans-unit>
        <trans-unit id="89ddd1b26e2c81d79a061e40a387cb68327ed7e7" translate="yes" xml:space="preserve">
          <source>Command 49 successfully inserts the tuple into the ETS table.</source>
          <target state="translated">コマンド49は、タプルをETSテーブルに挿入することに成功しました。</target>
        </trans-unit>
        <trans-unit id="21e9b8de7612160c8ff6fb2d218d6871c257d22f" translate="yes" xml:space="preserve">
          <source>Command 5 evaluates the internal shell command &lt;code&gt;b()&lt;/code&gt;, which is an abbreviation of &quot;bindings&quot;. This prints the current shell variables and their bindings. &lt;code&gt;ok&lt;/code&gt; at the end is the return value of function &lt;code&gt;b()&lt;/code&gt;.</source>
          <target state="translated">コマンド5 は、「バインディング」の省略形である内部シェルコマンド &lt;code&gt;b()&lt;/code&gt; を評価します。これにより、現在のシェル変数とそのバインディングが出力されます。 &lt;code&gt;ok&lt;/code&gt; 最後に、関数の戻り値である &lt;code&gt;b()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b87908b907dbfdaf4cc2680aaedac60ec072bdb0" translate="yes" xml:space="preserve">
          <source>Command 50 inserts another tuple into the ETS table. This time the first argument is the table identifier itself. The shell can parse commands with pids (&lt;code&gt;&amp;lt;0.60.0&amp;gt;&lt;/code&gt;), ports (&lt;code&gt;#Port&amp;lt;0.536&amp;gt;&lt;/code&gt;), references (&lt;code&gt;#Ref&amp;lt;0.1662103692.2407792644.214210&amp;gt;&lt;/code&gt;), and external functions (&lt;code&gt;#Fun&amp;lt;a.b.1&amp;gt;&lt;/code&gt;), but the command fails unless the corresponding pid, port, reference, or function can be created in the running system.</source>
          <target state="translated">コマンド50は、ETSテーブルに別のタプルを挿入します。今回は、最初の引数はテーブル識別子自体です。シェルは、pid（ &lt;code&gt;&amp;lt;0.60.0&amp;gt;&lt;/code&gt; ）、ポート（ &lt;code&gt;#Port&amp;lt;0.536&amp;gt;&lt;/code&gt; ）、参照（ &lt;code&gt;#Ref&amp;lt;0.1662103692.2407792644.214210&amp;gt;&lt;/code&gt; ）、および外部関数（ &lt;code&gt;#Fun&amp;lt;a.b.1&amp;gt;&lt;/code&gt; ）を使用してコマンドを解析できますが、コマンドは失敗します実行中のシステムで対応するpid、ポート、参照、または関数を作成できる場合を除きます。</target>
        </trans-unit>
        <trans-unit id="ef6bff45f7d38fc1ad0f06951a1076b939b05b98" translate="yes" xml:space="preserve">
          <source>Command 51 exits the Erlang runtime system.</source>
          <target state="translated">コマンド51はErlangランタイムシステムを終了します。</target>
        </trans-unit>
        <trans-unit id="4a47187be4d245fbaca39a02661c9beb2fb74371" translate="yes" xml:space="preserve">
          <source>Command 6 evaluates the internal shell command &lt;code&gt;f(L)&lt;/code&gt; (abbreviation of &quot;forget&quot;). The value of variable &lt;code&gt;L&lt;/code&gt; is removed.</source>
          <target state="translated">コマンド6は、内部シェルコマンド &lt;code&gt;f(L)&lt;/code&gt; （「forget」の省略形）を評価します。変数 &lt;code&gt;L&lt;/code&gt; の値が削除されます。</target>
        </trans-unit>
        <trans-unit id="e30b7179ba181a3b5c6b762ceede630731c07eb2" translate="yes" xml:space="preserve">
          <source>Command 7 prints the new bindings.</source>
          <target state="translated">コマンド 7 は新しいバインディングを表示します。</target>
        </trans-unit>
        <trans-unit id="5eb872b4d589d1c1c6adf7d4262edec9d05d3813" translate="yes" xml:space="preserve">
          <source>Command 8 has no effect, as &lt;code&gt;L&lt;/code&gt; has no value.</source>
          <target state="translated">&lt;code&gt;L&lt;/code&gt; には値がないため、コマンド8は無効です。</target>
        </trans-unit>
        <trans-unit id="da435e51bb957a0dcba4d9de8dece9444557cd34" translate="yes" xml:space="preserve">
          <source>Command 9 performs a pattern matching operation on &lt;code&gt;Descriptor&lt;/code&gt;, binding a new value to &lt;code&gt;L&lt;/code&gt;.</source>
          <target state="translated">コマンド9は &lt;code&gt;Descriptor&lt;/code&gt; でパターンマッチング操作を実行し、新しい値を &lt;code&gt;L&lt;/code&gt; にバインドします。</target>
        </trans-unit>
        <trans-unit id="4da205fa9e33785888d3b45cf6c93fdfda35424f" translate="yes" xml:space="preserve">
          <source>Command &lt;code&gt;epmd -stop&lt;/code&gt; (and the corresponding messages to &lt;code&gt;epmd&lt;/code&gt;, as can be specified using &lt;code&gt;erl_interface:ei(3)&lt;/code&gt;) is normally always ignored. This because it can cause a strange situation where two nodes of the same name can be alive at the same time. A node unregisters itself by only closing the connection to &lt;code&gt;epmd&lt;/code&gt;, which is why command &lt;code&gt;stop&lt;/code&gt; was only intended for use in debugging situations.</source>
          <target state="translated">コマンド &lt;code&gt;epmd -stop&lt;/code&gt; （および &lt;code&gt;erl_interface:ei(3)&lt;/code&gt; を使用して指定できる &lt;code&gt;epmd&lt;/code&gt; への対応するメッセージ）は、通常は常に無視されます。これは、同じ名前の2つのノードが同時に生きているという奇妙な状況を引き起こす可能性があるためです。ノードは &lt;code&gt;epmd&lt;/code&gt; への接続を閉じるだけでノード自体の登録を解除します。そのため、コマンド &lt;code&gt;stop&lt;/code&gt; はデバッグ状況での使用のみを目的としていました。</target>
        </trans-unit>
        <trans-unit id="810d0b44379ad61dcf659535b75db6d8cc44230a" translate="yes" xml:space="preserve">
          <source>Command &lt;code&gt;erl -boot Name&lt;/code&gt; starts the system with a boot file called &lt;code&gt;Name.boot&lt;/code&gt;, which is generated from the &lt;code&gt;Name.script&lt;/code&gt; file, using &lt;code&gt;&lt;a href=&quot;systools#script2boot-1&quot;&gt;systools:script2boot/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">コマンド &lt;code&gt;erl -boot Name&lt;/code&gt; と呼ばれるブートファイルを使用してシステムを起動する &lt;code&gt;Name.boot&lt;/code&gt; から生成され、 &lt;code&gt;Name.script&lt;/code&gt; の使用して、ファイル &lt;code&gt;&lt;a href=&quot;systools#script2boot-1&quot;&gt;systools:script2boot/1&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39de423c03daee2f71651de9ffea305f36be9120" translate="yes" xml:space="preserve">
          <source>Command &lt;code&gt;ttb:tracer(dbg)&lt;/code&gt; is a shortcut for the pure &lt;code&gt;dbg&lt;/code&gt; mode (&lt;code&gt;{shell, only}&lt;/code&gt;).</source>
          <target state="translated">コマンド &lt;code&gt;ttb:tracer(dbg)&lt;/code&gt; は、純粋な &lt;code&gt;dbg&lt;/code&gt; モード（ &lt;code&gt;{shell, only}&lt;/code&gt; ）のショートカットです。</target>
        </trans-unit>
        <trans-unit id="c555f15dcf6bb7adaf5f9b063efb4b7e7e6e2ea1" translate="yes" xml:space="preserve">
          <source>Command Code Format Specification</source>
          <target state="translated">コマンドコード形式指定</target>
        </trans-unit>
        <trans-unit id="41fea0af8135b09c720af76c92576ba1ce8cab06" translate="yes" xml:space="preserve">
          <source>Command Codes</source>
          <target state="translated">コマンドコード</target>
        </trans-unit>
        <trans-unit id="44cece384081cdaf653289bf8b1abbd517cb270c" translate="yes" xml:space="preserve">
          <source>Command Flags</source>
          <target state="translated">コマンドフラグ</target>
        </trans-unit>
        <trans-unit id="fcf4ea77789a76f9d1ec8ed42f1e7a3d9fea92e5" translate="yes" xml:space="preserve">
          <source>Command Summary</source>
          <target state="translated">コマンド概要</target>
        </trans-unit>
        <trans-unit id="f4262805dee42a91c3420fb0de8038f14ed1851c" translate="yes" xml:space="preserve">
          <source>Command interface</source>
          <target state="translated">コマンドインタフェース</target>
        </trans-unit>
        <trans-unit id="0ba4d2337dce485f24bbc063f5690cdcfc4ac079" translate="yes" xml:space="preserve">
          <source>Command interface module.</source>
          <target state="translated">コマンドインターフェイスモジュール。</target>
        </trans-unit>
        <trans-unit id="e659d2d4c58b502e091a664b53727f4cb778e670" translate="yes" xml:space="preserve">
          <source>Command timeout (time to wait for a command to return) = 10 seconds</source>
          <target state="translated">コマンドタイムアウト(コマンドが戻るまでの待ち時間)=10秒</target>
        </trans-unit>
        <trans-unit id="3e767b383c6d82a7de3a36422b75eb6ce8c0967f" translate="yes" xml:space="preserve">
          <source>Command-Line Flags</source>
          <target state="translated">コマンドラインフラグ</target>
        </trans-unit>
        <trans-unit id="b276b756560f04ce3d0917009cdbe122769b89ec" translate="yes" xml:space="preserve">
          <source>Command-line arguments &lt;code&gt;-App Par Val&lt;/code&gt;</source>
          <target state="translated">コマンドライン引数 &lt;code&gt;-App Par Val&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="c738a0bbafd852c8a585fb1f2ac29479f5b2dc37" translate="yes" xml:space="preserve">
          <source>Command-line arguments are read from the file &lt;code&gt;FileName&lt;/code&gt;. The arguments read from the file replace flag '&lt;code&gt;-args_file FileName&lt;/code&gt;' on the resulting command line.</source>
          <target state="translated">コマンドライン引数はファイル &lt;code&gt;FileName&lt;/code&gt; から読み取られます。結果のコマンドラインで、ファイル置換フラグ ' &lt;code&gt;-args_file FileName&lt;/code&gt; ' から読み取られた引数。</target>
        </trans-unit>
        <trans-unit id="0815c6d95bf87f31b25e345653bfa997429b0e96" translate="yes" xml:space="preserve">
          <source>Command-line flag &lt;code&gt;-code_path_choice Choice&lt;/code&gt; also affects how module &lt;code&gt;init&lt;/code&gt; interprets the &lt;code&gt;boot script&lt;/code&gt;. The interpretation of the explicit code paths in the &lt;code&gt;boot script&lt;/code&gt; can be &lt;code&gt;strict&lt;/code&gt; or &lt;code&gt;relaxed&lt;/code&gt;. It is particularly useful to set the flag to &lt;code&gt;relaxed&lt;/code&gt; when elaborating with code loading from archives without editing the &lt;code&gt;boot script&lt;/code&gt;. The default is &lt;code&gt;relaxed&lt;/code&gt;. See &lt;code&gt;erts:init(3)&lt;/code&gt;.</source>
          <target state="translated">コマンドラインフラグ &lt;code&gt;-code_path_choice Choice&lt;/code&gt; は、モジュールの &lt;code&gt;init&lt;/code&gt; が &lt;code&gt;boot script&lt;/code&gt; 解釈する方法にも影響します。明示的なコードパスの解釈 &lt;code&gt;boot script&lt;/code&gt; することができ &lt;code&gt;strict&lt;/code&gt; または &lt;code&gt;relaxed&lt;/code&gt; 。 &lt;code&gt;boot script&lt;/code&gt; を編集せずにアーカイブからコードを読み込む場合は、フラグを &lt;code&gt;relaxed&lt;/code&gt; に設定すると特に便利です。デフォルトは &lt;code&gt;relaxed&lt;/code&gt; です。 &lt;code&gt;erts:init(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1e6b935146c98f3aa1d4c9b71666cb047822e2b6" translate="yes" xml:space="preserve">
          <source>Command-line flag &lt;code&gt;-loader Loader&lt;/code&gt; can be used to choose the method used by &lt;code&gt;erl_prim_loader&lt;/code&gt;. Two &lt;code&gt;Loader&lt;/code&gt; methods are supported by the Erlang runtime system: &lt;code&gt;efile&lt;/code&gt; and &lt;code&gt;inet&lt;/code&gt;.</source>
          <target state="translated">コマンドラインフラグ &lt;code&gt;-loader Loader&lt;/code&gt; を使用して、 &lt;code&gt;erl_prim_loader&lt;/code&gt; が使用するメソッドを選択できます。Erlangランタイムシステムでは、 &lt;code&gt;efile&lt;/code&gt; と &lt;code&gt;inet&lt;/code&gt; の 2つの &lt;code&gt;Loader&lt;/code&gt; メソッドがサポートされています。</target>
        </trans-unit>
        <trans-unit id="19ab3f6695abd2d1efac509f3805ab65802f6cd0" translate="yes" xml:space="preserve">
          <source>Commands 12 and 13 show that &lt;code&gt;P&lt;/code&gt; is unbound because the previous command failed, and that &lt;code&gt;Descriptor&lt;/code&gt; has not changed.</source>
          <target state="translated">コマンド12と13 は、前のコマンドが失敗したため &lt;code&gt;P&lt;/code&gt; がバインドされておらず、 &lt;code&gt;Descriptor&lt;/code&gt; が変更されていないことを示しています。</target>
        </trans-unit>
        <trans-unit id="0808717ab8537267fc0acf980e9bc7e73f8a3115" translate="yes" xml:space="preserve">
          <source>Commands 14 and 15 show a correct match where &lt;code&gt;P&lt;/code&gt; and &lt;code&gt;Q&lt;/code&gt; are bound.</source>
          <target state="translated">コマンド14と15は、 &lt;code&gt;P&lt;/code&gt; と &lt;code&gt;Q&lt;/code&gt; がバインドされている正しい一致を示しています。</target>
        </trans-unit>
        <trans-unit id="ba40d80207918719cb767da4bd28be6e2206b511" translate="yes" xml:space="preserve">
          <source>Commands 17 and 18 set and inspect the value of item &lt;code&gt;aa&lt;/code&gt; in the process dictionary.</source>
          <target state="translated">コマンド17と18 は、プロセスディクショナリの項目 &lt;code&gt;aa&lt;/code&gt; の値を設定および検査します。</target>
        </trans-unit>
        <trans-unit id="294bcd96ab5ae5465ab190eddd23f0db5bdd9eb1" translate="yes" xml:space="preserve">
          <source>Commands 21 and 22 change the value of dictionary item &lt;code&gt;aa&lt;/code&gt; to &lt;code&gt;hello&lt;/code&gt; and call &lt;code&gt;test1:demo(2)&lt;/code&gt;. Evaluation fails and the changes made to the dictionary in &lt;code&gt;test1:demo(2)&lt;/code&gt;, before the error occurred, are discarded.</source>
          <target state="translated">コマンド21および22は、辞書項目 &lt;code&gt;aa&lt;/code&gt; の値を &lt;code&gt;hello&lt;/code&gt; に変更し、 &lt;code&gt;test1:demo(2)&lt;/code&gt; を呼び出します。評価は失敗し、エラーが発生する前に &lt;code&gt;test1:demo(2)&lt;/code&gt; で辞書に加えられた変更は破棄されます。</target>
        </trans-unit>
        <trans-unit id="92740ec7f4a6db2c5a8fde98073bc5eafb9b184e" translate="yes" xml:space="preserve">
          <source>Commands 23 and 24 show that &lt;code&gt;Z&lt;/code&gt; was not bound and that dictionary item &lt;code&gt;aa&lt;/code&gt; has retained its original value.</source>
          <target state="translated">コマンド23と24は、 &lt;code&gt;Z&lt;/code&gt; がバインドされておらず、辞書項目 &lt;code&gt;aa&lt;/code&gt; が元の値を保持していることを示しています。</target>
        </trans-unit>
        <trans-unit id="b56b527b4c21ea0ffd3d260fc661f80779b628fe" translate="yes" xml:space="preserve">
          <source>Commands 25, 26, and 27 show the effect of evaluating &lt;code&gt;test1:demo(1)&lt;/code&gt; in the background. In this case, the expression is evaluated in a newly spawned process. Any changes made in the process dictionary are local to the newly spawned process and therefore not visible to the shell.</source>
          <target state="translated">コマンド25、26、および27 は、バックグラウンドで &lt;code&gt;test1:demo(1)&lt;/code&gt; を評価した結果を示しています。この場合、式は新しく生成されたプロセスで評価されます。プロセスディクショナリで行われた変更は、新しく生成されたプロセスに対してローカルであるため、シェルからは見えません。</target>
        </trans-unit>
        <trans-unit id="fbb8fbc989037cd45a07764908684c0276b72d77" translate="yes" xml:space="preserve">
          <source>Commands 28, 29 and 30 use the history facilities of the shell. Command 29 re-evaluates command 28. Command 30 uses the value (result) of command 28. In the cases of a pure function (a function with no side effects), the result is the same. For a function with side effects, the result can be different.</source>
          <target state="translated">コマンド28、29、30はシェルの履歴機能を使用します。コマンド29はコマンド28を再評価します。コマンド30はコマンド28の値(結果)を使用します。純粋な関数(副作用のない関数)の場合、結果は同じです。副作用のある関数の場合は、結果が異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="6bd98506526970354b254ba19f4b457ffe78c8b5" translate="yes" xml:space="preserve">
          <source>Commands 31 and 32 compile file &lt;code&gt;ex.erl&lt;/code&gt; and read the record definitions in &lt;code&gt;ex.beam&lt;/code&gt;. If the compiler did not output any record definitions on the BEAM file, &lt;code&gt;rr(ex)&lt;/code&gt; tries to read record definitions from the source file instead.</source>
          <target state="translated">コマンド31および32は、ファイル &lt;code&gt;ex.erl&lt;/code&gt; をコンパイルし、 &lt;code&gt;ex.beam&lt;/code&gt; のレコード定義を読み取ります。コンパイラがBEAMファイルにレコード定義を出力しなかった場合、 &lt;code&gt;rr(ex)&lt;/code&gt; は代わりにソースファイルからレコード定義を読み取ろうとします。</target>
        </trans-unit>
        <trans-unit id="22230fce6738635959fe1cc4ea2c847698c33886" translate="yes" xml:space="preserve">
          <source>Commands are defined as CCF specifications in dictionary files.</source>
          <target state="translated">コマンドはCCF仕様として辞書ファイルに定義されています。</target>
        </trans-unit>
        <trans-unit id="56e84290b5e3388fcdfc58e1d2baa8a6fd8e4461" translate="yes" xml:space="preserve">
          <source>Comments are embedded in the following example:</source>
          <target state="translated">以下の例では、コメントが埋め込まれています。</target>
        </trans-unit>
        <trans-unit id="8ef3de97bdba18fc781a05004ec85c394079388d" translate="yes" xml:space="preserve">
          <source>Comments can be included in a dictionary file using semicolon: characters from a semicolon to end of line are ignored.</source>
          <target state="translated">コメントはセミコロンを使って辞書ファイルに含めることができます:セミコロンから行末までの文字は無視されます。</target>
        </trans-unit>
        <trans-unit id="26288d5796241c87a8f3348937c33f8c190beec7" translate="yes" xml:space="preserve">
          <source>Comments can be placed anywhere in a module except within strings and quoted atoms. A comment begins with the character &quot;%&quot;, continues up to, but does not include the next end-of-line, and has no effect. Notice that the terminating end-of-line has the effect of white space.</source>
          <target state="translated">コメントは、文字列と引用符で囲まれたアトムの中を除いて、モジュール内のどこにでも置くことができます。コメントは文字 &quot;%&quot; で始まり、行末まで続きますが、次の行末は含まれず、何の効果もありません。行末には空白の効果があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5d789847a2caf02c727ca7174b8c42d0924876dc" translate="yes" xml:space="preserve">
          <source>Comments for individual files are not supported when creating zip archives. The zip archive comment for the whole zip archive is supported.</source>
          <target state="translated">zip アーカイブを作成する際に、個々のファイルに対するコメントはサポートされていません。zip アーカイブ全体のコメントはサポートされています。</target>
        </trans-unit>
        <trans-unit id="8b3a62c8e579699ba00397d2c80ef8144243fbdd" translate="yes" xml:space="preserve">
          <source>Comments on the code:</source>
          <target state="translated">コードについてのコメント。</target>
        </trans-unit>
        <trans-unit id="da35acebd529266c273972c7b3c68d5c1a9be9ff" translate="yes" xml:space="preserve">
          <source>Commit all staged breadpoints by switching &lt;code&gt;erts_active_bp_index&lt;/code&gt;.</source>
          <target state="translated">すべてのスイッチングによってbreadpointsを上演コミット &lt;code&gt;erts_active_bp_index&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="b35af8f67f1302434542fab82b17be91dbc51450" translate="yes" xml:space="preserve">
          <source>Commit the breadpoint by switching &lt;code&gt;erts_active_bp_index&lt;/code&gt;.</source>
          <target state="translated">切り替えることでbreadpointをコミット &lt;code&gt;erts_active_bp_index&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="17bde591b45f1956739cdae90f230bf60f533d89" translate="yes" xml:space="preserve">
          <source>Commits or rollbacks a transaction. Needed on connections where automatic commit is turned off.</source>
          <target state="translated">トランザクションをコミットまたはロールバックします。自動コミットがオフになっている接続で必要です。</target>
        </trans-unit>
        <trans-unit id="7de90a65241a6cdbd9ade485d777715d99285a1e" translate="yes" xml:space="preserve">
          <source>Common</source>
          <target state="translated">Common</target>
        </trans-unit>
        <trans-unit id="241df9920cfb933c5f225205b64b534fff5b5501" translate="yes" xml:space="preserve">
          <source>Common Data Types</source>
          <target state="translated">一般的なデータ型</target>
        </trans-unit>
        <trans-unit id="41d21606dcebe663d602a1344de2a8fca02f49a9" translate="yes" xml:space="preserve">
          <source>Common Derived AVP Data Formats</source>
          <target state="translated">一般的な派生 AVP データフォーマット</target>
        </trans-unit>
        <trans-unit id="0b5334f1456ad098a790e7f352286314bbed47a2" translate="yes" xml:space="preserve">
          <source>Common Gateway Interface (CGI)</source>
          <target state="translated">コモンゲートウェイインタフェース(CGI)</target>
        </trans-unit>
        <trans-unit id="db485912bf25572661767ebba87897fc877dcd95" translate="yes" xml:space="preserve">
          <source>Common Gateway Interface (CGI) scripts can be written in any programming language. CGI scripts are standardized and supported by most web servers. The drawback with CGI scripts is that they are resource-intensive because of their design. CGI requires the server to fork a new OS process for each executable it needs to start.</source>
          <target state="translated">Common Gateway Interface (CGI)スクリプトは、どのようなプログラミング言語でも書くことができます。CGI スクリプトは標準化されており、ほとんどのウェブサーバでサポートされています。CGI スクリプトの欠点は、その設計のためにリソースを大量に消費することです。CGI は、サーバーが起動する必要がある実行ファイルごとに新しい OS プロセスをフォークする必要があります。</target>
        </trans-unit>
        <trans-unit id="19ab22d81ec0ae9cb58d33a88861ce6ef1708b24" translate="yes" xml:space="preserve">
          <source>Common Logfile Format (with or without disk_log(3) support)</source>
          <target state="translated">共通ログファイル形式 (disk_log(3)サポートの有無に関わらず)</target>
        </trans-unit>
        <trans-unit id="4ce20004c1f29ec0692407ac2b38ca6bf8d31367" translate="yes" xml:space="preserve">
          <source>Common Records and ASN.1 Types</source>
          <target state="translated">共通記録とASN.1の種類</target>
        </trans-unit>
        <trans-unit id="6308629ddea5ddb4f6206238004dacdb96f8740d" translate="yes" xml:space="preserve">
          <source>Common Test framework code coverage support module.</source>
          <target state="translated">共通テストフレームワークのコードカバレッジ支援モジュール。</target>
        </trans-unit>
        <trans-unit id="1e2caf325721b603d0dd5b17a62280a7ef4be10c" translate="yes" xml:space="preserve">
          <source>Common Test framework functions for starting and stopping nodes for Large-Scale Testing.</source>
          <target state="translated">大規模テストのためのノード起動・停止のための共通テストフレームワーク機能</target>
        </trans-unit>
        <trans-unit id="30f1b95bb6a879de9c40633f0536016402c329c6" translate="yes" xml:space="preserve">
          <source>Common Test prints the text from &lt;code&gt;ct:log/3,4,5&lt;/code&gt; or &lt;code&gt;ct:pal/3,4,5&lt;/code&gt; inside a &lt;code&gt;pre&lt;/code&gt; element nested under the named &lt;code&gt;div&lt;/code&gt; element. Since the &lt;code&gt;pre&lt;/code&gt; selector has a predefined CSS rule (in file &lt;code&gt;ct_default.css&lt;/code&gt;) for the attributes &lt;code&gt;color&lt;/code&gt;, &lt;code&gt;font-family&lt;/code&gt; and &lt;code&gt;font-size&lt;/code&gt;, if a user wants to change any of the predefined attribute settings, a new rule for &lt;code&gt;pre&lt;/code&gt; must be added to the user stylesheet. Example:</source>
          <target state="translated">Common Testは、 &lt;code&gt;ct:log/3,4,5&lt;/code&gt; または &lt;code&gt;ct:pal/3,4,5&lt;/code&gt; のテキストを、指定された &lt;code&gt;div&lt;/code&gt; 要素の下にネストされた &lt;code&gt;pre&lt;/code&gt; 要素内に出力します。以来 &lt;code&gt;pre&lt;/code&gt; セレクタは（ファイルで定義済みのCSSルールを持っている &lt;code&gt;ct_default.css&lt;/code&gt; 属性の） &lt;code&gt;color&lt;/code&gt; 、 &lt;code&gt;font-family&lt;/code&gt; と &lt;code&gt;font-size&lt;/code&gt; ユーザーが事前に定義された属性の設定を変更したい場合は、のための新しいルール &lt;code&gt;pre&lt;/code&gt; 追加する必要がありますユーザーのスタイルシートに。例：</target>
        </trans-unit>
        <trans-unit id="c04acbea30ab701b6c1687bc2c2baef0bc8d8ac3" translate="yes" xml:space="preserve">
          <source>Common Test specific layer on Erlang/OTP rpc.</source>
          <target state="translated">Erlang/OTP rpc上の共通テスト専用レイヤー。</target>
        </trans-unit>
        <trans-unit id="6200c508ceec372ce5e6d3dd908d4e9056a88ece" translate="yes" xml:space="preserve">
          <source>Common Test specific layer on top of Telnet client ct_telnet_client.erl</source>
          <target state="translated">Telnetクライアントの上にある共通テスト専用レイヤー ct_telnet_client.erl</target>
        </trans-unit>
        <trans-unit id="795765c3a6937dd14e3f9e84bbc1516b51d98f84" translate="yes" xml:space="preserve">
          <source>Common Test user interface module for the SNMP application.</source>
          <target state="translated">SNMPアプリケーション用の共通テスト・ユーザー・インターフェース・モジュール。</target>
        </trans-unit>
        <trans-unit id="c915caf0b5cf6faff380a7f8100663b681679e13" translate="yes" xml:space="preserve">
          <source>Common Test will escape special HTML characters (&amp;lt;, &amp;gt; and &amp;amp;) in printouts to the log file made with &lt;code&gt;ct:pal/4&lt;/code&gt; and &lt;code&gt;io:format/2&lt;/code&gt;. In order to print strings with HTML tags to the log, use the &lt;code&gt;ct:log/3,4,5&lt;/code&gt; function. The character escaping feature is per default disabled for &lt;code&gt;ct:log/3,4,5&lt;/code&gt; but can be enabled with the &lt;code&gt;esc_chars&lt;/code&gt; option in the &lt;code&gt;Opts&lt;/code&gt; list, see &lt;code&gt;&lt;a href=&quot;ct#log-5&quot;&gt; ct:log/3,4,5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Common Testは、印刷出力の特殊なHTML文字（&amp;lt;、&amp;gt;、＆）を &lt;code&gt;ct:pal/4&lt;/code&gt; および &lt;code&gt;io:format/2&lt;/code&gt; で作成されたログファイルにエスケープします。HTMLタグ付きの文字列をログに出力するには、 &lt;code&gt;ct:log/3,4,5&lt;/code&gt; 関数を使用します。文字エスケープ機能は、デフォルトでは &lt;code&gt;ct:log/3,4,5&lt;/code&gt; では無効になっていますが、 &lt;code&gt;Opts&lt;/code&gt; リストの &lt;code&gt;esc_chars&lt;/code&gt; オプションで有効にできます。ct &lt;code&gt;&lt;a href=&quot;ct#log-5&quot;&gt; ct:log/3,4,5&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="4750bbba9bfe2efefedd87368239bf3b9742e5f4" translate="yes" xml:space="preserve">
          <source>Common Test will escape special HTML characters (&amp;lt;, &amp;gt; and &amp;amp;) in printouts to the log file made with &lt;code&gt;ct:pal/4&lt;/code&gt; and &lt;code&gt;io:format/2&lt;/code&gt;. In order to print strings with HTML tags to the log, use the &lt;code&gt;ct:log/3,4,5&lt;/code&gt; function. The character escaping feature is per default disabled for &lt;code&gt;ct:log/3,4,5&lt;/code&gt; but can be enabled with the &lt;code&gt;esc_chars&lt;/code&gt; option in the &lt;code&gt;Opts&lt;/code&gt; list, see &lt;code&gt;&lt;a href=&quot;ct#log-5&quot;&gt;ct:log/3,4,5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Common Testは、 &lt;code&gt;ct:pal/4&lt;/code&gt; および &lt;code&gt;io:format/2&lt;/code&gt; で作成されたログファイルへの出力で、特殊なHTML文字（&amp;lt;、&amp;gt;、および＆）をエスケープします。HTMLタグ付きの文字列をログに出力するには、 &lt;code&gt;ct:log/3,4,5&lt;/code&gt; 関数を使用します。文字エスケープ機能は、 &lt;code&gt;ct:log/3,4,5&lt;/code&gt; ではデフォルトで無効になっていますが、 &lt;code&gt;Opts&lt;/code&gt; リストの &lt;code&gt;esc_chars&lt;/code&gt; オプションで有効にできます。ct &lt;code&gt;&lt;a href=&quot;ct#log-5&quot;&gt;ct:log/3,4,5&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="acedb2a295655cedf03a6d64f7a4770f00468a7c" translate="yes" xml:space="preserve">
          <source>Common Test will not escape special HTML characters (&amp;lt;, &amp;gt; and &amp;amp;) in the text printed with this function, unless the &lt;code&gt;esc_chars&lt;/code&gt; option is used.</source>
          <target state="translated">Common Testは、 &lt;code&gt;esc_chars&lt;/code&gt; オプションを使用しない限り、この関数で出力されるテキスト内の特殊なHTML文字（&amp;lt;、&amp;gt;、＆）をエスケープしません。</target>
        </trans-unit>
        <trans-unit id="dadf2071e7b21987ca0708b9d6985520d78f3217" translate="yes" xml:space="preserve">
          <source>Common config types:</source>
          <target state="translated">共通のコンフィグタイプ。</target>
        </trans-unit>
        <trans-unit id="ac09f939510f1230449f2487860d2c31044efcc5" translate="yes" xml:space="preserve">
          <source>Common data types</source>
          <target state="translated">一般的なデータ型</target>
        </trans-unit>
        <trans-unit id="d94691a074c7593f911e3dc52f3f8f13032dc40a" translate="yes" xml:space="preserve">
          <source>Common non-standard Erlang data types used to describe the record fields in the following sections and which are not defined in the Public Key &lt;code&gt;&lt;a href=&quot;public_key&quot;&gt;Reference Manual&lt;/a&gt;&lt;/code&gt; follows here:</source>
          <target state="translated">以下のセクションでレコードフィールドを説明するために使用され、公開キー &lt;code&gt;&lt;a href=&quot;public_key&quot;&gt;Reference Manual&lt;/a&gt;&lt;/code&gt; 定義されていない一般的な非標準のErlangデータ型を次に示します。</target>
        </trans-unit>
        <trans-unit id="8c0f63b574b67c6705b08577c533549ceb705554" translate="yes" xml:space="preserve">
          <source>Communicate with distributed Erlang.</source>
          <target state="translated">分散されたErlangと通信する。</target>
        </trans-unit>
        <trans-unit id="bd72983883a714962b7215d3a3f5aee15e422d63" translate="yes" xml:space="preserve">
          <source>Communicates with a running port mapper daemon.</source>
          <target state="translated">実行中のポートマッパーデーモンと通信します。</target>
        </trans-unit>
        <trans-unit id="70cdbfe70a51bbd63ce1591394b2d32e526d83f8" translate="yes" xml:space="preserve">
          <source>Communicating with the running &lt;code&gt;epmd&lt;/code&gt; daemon by the &lt;code&gt;epmd&lt;/code&gt; program is done primarily for debugging purposes.</source>
          <target state="translated">&lt;code&gt;epmd&lt;/code&gt; プログラムによる実行中の &lt;code&gt;epmd&lt;/code&gt; デーモンとの通信は、主にデバッグ目的で行われます。</target>
        </trans-unit>
        <trans-unit id="62b1109168a638234d95928543c75a350159ad8e" translate="yes" xml:space="preserve">
          <source>Communication between C nodes and Erlang processes</source>
          <target state="translated">CノードとErlangプロセス間の通信</target>
        </trans-unit>
        <trans-unit id="210328a62ba74dfc81e096c28bc1dd2f82995f3e" translate="yes" xml:space="preserve">
          <source>Communication in Erlang is conceptually performed using asynchronous signaling. All different executing entities, such as processes and ports, communicate through asynchronous signals. The most commonly used signal is a message. Other common signals are exit, link, unlink, monitor, and demonitor signals.</source>
          <target state="translated">Erlangの通信は概念的には非同期シグナリングを使って行われます。プロセスやポートなどのすべての異なる実行エンティティは、非同期シグナルを使って通信します。最もよく使われるシグナルはメッセージです。他の一般的なシグナルは exit,link,unlink,monitor,demonitor シグナルです。</target>
        </trans-unit>
        <trans-unit id="4183b090fb1af0688c00077a895de35dc21295ae" translate="yes" xml:space="preserve">
          <source>Communication utility functions to be used by the Erlang web server API programmer.</source>
          <target state="translated">ErlangのWebサーバAPIプログラマが使用する通信ユーティリティ関数。</target>
        </trans-unit>
        <trans-unit id="80afd53213b9e40ec5102490cac90c9e596e23ff" translate="yes" xml:space="preserve">
          <source>Communication with sockets</source>
          <target state="translated">ソケットとの通信</target>
        </trans-unit>
        <trans-unit id="82de2dfc6db5d20f900f698ba6e19de7560c30d1" translate="yes" xml:space="preserve">
          <source>Compare the severity of two log levels. Returns &lt;code&gt;gt&lt;/code&gt; if &lt;code&gt;Level1&lt;/code&gt; is more severe than &lt;code&gt;Level2&lt;/code&gt;, &lt;code&gt;lt&lt;/code&gt; if &lt;code&gt;Level1&lt;/code&gt; is less severe, and &lt;code&gt;eq&lt;/code&gt; if the levels are equal.</source>
          <target state="translated">2つのログレベルの重大度を比較します。戻り値 &lt;code&gt;gt&lt;/code&gt; あれば &lt;code&gt;Level1&lt;/code&gt; より厳しい &lt;code&gt;Level2&lt;/code&gt; 、 &lt;code&gt;lt&lt;/code&gt; 場合に &lt;code&gt;Level1&lt;/code&gt; それほど深刻であり、 &lt;code&gt;eq&lt;/code&gt; レベルが等しい場合。</target>
        </trans-unit>
        <trans-unit id="b4829635ff8b264cec3be490a754062e423a0438" translate="yes" xml:space="preserve">
          <source>Compare two port identifiers. The comparison is done the same way as Erlang does.</source>
          <target state="translated">2つのポート識別子を比較します。比較はErlangと同じ方法で行われます。</target>
        </trans-unit>
        <trans-unit id="dc33d4612f53d09e85f3f59e9a2fb150d86afb5d" translate="yes" xml:space="preserve">
          <source>Compare two process identifiers. The comparison is done the same way as Erlang does.</source>
          <target state="translated">2つのプロセス識別子を比較します。比較はErlangと同じ方法で行われます。</target>
        </trans-unit>
        <trans-unit id="62e9bf54b39e624437b799beda0e7a99d2c76831" translate="yes" xml:space="preserve">
          <source>Compare two references. The comparison is done the same way as Erlang does.</source>
          <target state="translated">2つのリファレンスを比較してみましょう。比較はErlangと同じ方法で行われます。</target>
        </trans-unit>
        <trans-unit id="151c5d07514ac40bad0d13f9b26b2443190972b1" translate="yes" xml:space="preserve">
          <source>Compared to other SNMP agent packages, there is a significant difference in this way of using sub-agents. Other packages normally use sub-agents to load and unload MIBs in run-time. In Erlang, it is easy to load code in run-time and it is possible to load an MIB into an existing sub-agent. It is not necessary to create a new process for handling a new MIB.</source>
          <target state="translated">他のSNMPエージェントパッケージと比較して、このサブエージェントの使用方法には大きな違いがあります。他のパッケージは通常、ランタイムでMIBをロードしたりアンロードしたりするためにサブエージェントを使います。Erlangでは、ランタイムでコードをロードするのは簡単で、既存のサブエージェントにMIBをロードすることができます。新しいMIBを扱うために新しいプロセスを作る必要はありません。</target>
        </trans-unit>
        <trans-unit id="0c52ead5590f8067968c45ad847b25a4d463504b" translate="yes" xml:space="preserve">
          <source>Compared to the C program in &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt;, using only the plain port, the &lt;code&gt;while&lt;/code&gt;-loop must be rewritten. Messages coming from the port is on the Erlang external term format. They must be converted into an &lt;code&gt;ETERM&lt;/code&gt; struct, which is a C struct similar to an Erlang term. The result of calling &lt;code&gt;foo()&lt;/code&gt; or &lt;code&gt;bar()&lt;/code&gt; must be converted to the Erlang external term format before being sent back to the port. But before calling any other Erl_Interface function, the memory handling must be initiated:</source>
          <target state="translated">単純なポートのみを使用する &lt;code&gt;&lt;a href=&quot;c_port&quot;&gt;Ports&lt;/a&gt;&lt;/code&gt; のCプログラムと比較すると、 &lt;code&gt;while&lt;/code&gt; -loopを書き直す必要があります。ポートから送信されるメッセージは、Erlang外部用語形式です。これらは、 &lt;code&gt;ETERM&lt;/code&gt; 構造体に変換する必要があります。ETERM構造体は、Erlang用語に似たC構造体です。 &lt;code&gt;foo()&lt;/code&gt; または &lt;code&gt;bar()&lt;/code&gt; の呼び出し結果は、ポートに送り返す前に、Erlang外部用語形式に変換する必要があります。ただし、他のErl_Interface関数を呼び出す前に、メモリ処理を開始する必要があります。</target>
        </trans-unit>
        <trans-unit id="c178437fef0499e44fe458af65742e21d4b116d4" translate="yes" xml:space="preserve">
          <source>Compares the BEAM files in two directories as &lt;code&gt;&lt;a href=&quot;#cmp_dirs-2&quot;&gt;cmp_dirs/2&lt;/a&gt;&lt;/code&gt;, but the names of files that exist in only one directory or are different are presented on standard output.</source>
          <target state="translated">2つのディレクトリ内のBEAMファイルを &lt;code&gt;&lt;a href=&quot;#cmp_dirs-2&quot;&gt;cmp_dirs/2&lt;/a&gt;&lt;/code&gt; として比較しますが、1つのディレクトリのみに存在するか、異なるファイルの名前は標準出力に表示されます。</target>
        </trans-unit>
        <trans-unit id="d98bf1bf3f126212e19565bfe2441f8eca0296a5" translate="yes" xml:space="preserve">
          <source>Compares the BEAM files in two directories. Only files with extension &lt;code&gt;&quot;.beam&quot;&lt;/code&gt; are compared. BEAM files that exist only in directory &lt;code&gt;Dir1&lt;/code&gt; (&lt;code&gt;Dir2&lt;/code&gt;) are returned in &lt;code&gt;Only1&lt;/code&gt; (&lt;code&gt;Only2&lt;/code&gt;). BEAM files that exist in both directories but are considered different by &lt;code&gt;cmp/2&lt;/code&gt; are returned as pairs {&lt;code&gt;Filename1&lt;/code&gt;, &lt;code&gt;Filename2&lt;/code&gt;}, where &lt;code&gt;Filename1&lt;/code&gt; (&lt;code&gt;Filename2&lt;/code&gt;) exists in directory &lt;code&gt;Dir1&lt;/code&gt; (&lt;code&gt;Dir2&lt;/code&gt;).</source>
          <target state="translated">2つのディレクトリにあるBEAMファイルを比較します。拡張子が &lt;code&gt;&quot;.beam&quot;&lt;/code&gt; ファイルのみが比較されます。唯一のディレクトリに存在するBEAMファイル &lt;code&gt;Dir1&lt;/code&gt; 内（ &lt;code&gt;Dir2&lt;/code&gt; をは）で返される &lt;code&gt;Only1&lt;/code&gt; （ &lt;code&gt;Only2&lt;/code&gt; ）。両方のディレクトリに存在するが &lt;code&gt;cmp/2&lt;/code&gt; によって異なると見なされるBEAMファイルは、ペア{ &lt;code&gt;Filename1&lt;/code&gt; 、 &lt;code&gt;Filename2&lt;/code&gt; } として返されます。ここで、 &lt;code&gt;Filename1&lt;/code&gt; （ &lt;code&gt;Filename2&lt;/code&gt; ）はディレクトリ &lt;code&gt;Dir1&lt;/code&gt; に存在します（ &lt;code&gt;Dir2&lt;/code&gt; を）。</target>
        </trans-unit>
        <trans-unit id="553a5eb717c257ef16ac7d4161ee3822b465e3e7" translate="yes" xml:space="preserve">
          <source>Compares the contents of two BEAM files. If the module names are the same, and all chunks except for chunk &lt;code&gt;&quot;CInf&quot;&lt;/code&gt; (the chunk containing the compilation information that is returned by &lt;code&gt;Module:module_info(compile)&lt;/code&gt;) have the same contents in both files, &lt;code&gt;ok&lt;/code&gt; is returned. Otherwise an error message is returned.</source>
          <target state="translated">2つのBEAMファイルの内容を比較します。モジュール名が同じで、チャンク &lt;code&gt;&quot;CInf&quot;&lt;/code&gt; を除くすべてのチャンク（ &lt;code&gt;Module:module_info(compile)&lt;/code&gt; によって返されるコンパイル情報を含むチャンク）が両方のファイルで同じ内容である場合、 &lt;code&gt;ok&lt;/code&gt; が返されます。それ以外の場合は、エラーメッセージが返されます。</target>
        </trans-unit>
        <trans-unit id="1371fc9819183da776aa8b206d27ecaadad51181" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;&lt;a href=&quot;#ErlNifMonitor&quot;&gt;ErlNifMonitor&lt;/a&gt;&lt;/code&gt;s. Can also be used to imply some artificial order on monitors, for whatever reason.</source>
          <target state="translated">2つを比較する &lt;code&gt;&lt;a href=&quot;#ErlNifMonitor&quot;&gt;ErlNifMonitor&lt;/a&gt;&lt;/code&gt; をます。理由を問わず、モニターで何らかの人工的な順序を示すために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="7422cbed4d976bf1196e3065965309b4656fcd35" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;&lt;a href=&quot;#ErlNifPid&quot;&gt;ErlNifPid &lt;/a&gt;&lt;/code&gt;s according to term order.</source>
          <target state="translated">用語の順序に従って2つの &lt;code&gt;&lt;a href=&quot;#ErlNifPid&quot;&gt;ErlNifPid &lt;/a&gt;&lt;/code&gt; を比較します。</target>
        </trans-unit>
        <trans-unit id="5229791f8671e196d2b82edc4c7e2f917dd47d48" translate="yes" xml:space="preserve">
          <source>Compares two &lt;code&gt;ErlDrvMonitor&lt;/code&gt;s. Can also be used to imply some artificial order on monitors, for whatever reason.</source>
          <target state="translated">2つを比較する &lt;code&gt;ErlDrvMonitor&lt;/code&gt; をます。理由を問わず、モニターで何らかの人工的な順序を示すために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="00c8883b1a2eb607b39cecd8cab305675f55c676" translate="yes" xml:space="preserve">
          <source>Compares two encoded terms.</source>
          <target state="translated">符号化された2つの項を比較します。</target>
        </trans-unit>
        <trans-unit id="4db48e071567d5840fbc4f9ce1403c03ce1085eb" translate="yes" xml:space="preserve">
          <source>Compares two thread identifiers, &lt;code&gt;tid1&lt;/code&gt; and &lt;code&gt;tid2&lt;/code&gt;, for equality.</source>
          <target state="translated">2つのスレッド識別子 &lt;code&gt;tid1&lt;/code&gt; を比較しますと &lt;code&gt;tid2&lt;/code&gt; が等しいかを。</target>
        </trans-unit>
        <trans-unit id="5d60c7dd62fdcf4abcc61a6a7d335b7117968b4d" translate="yes" xml:space="preserve">
          <source>Compatibility</source>
          <target state="translated">Compatibility</target>
        </trans-unit>
        <trans-unit id="a8a612a1cee1a099e60c55bb976d9e9c6e46b755" translate="yes" xml:space="preserve">
          <source>Compatible between releases.</source>
          <target state="translated">リリース間での互換性があります。</target>
        </trans-unit>
        <trans-unit id="7a3e29c10f00281440509daef8170e445e3cdb30" translate="yes" xml:space="preserve">
          <source>Compatible flow control. Ports have for a very long time had the possibility to use the busy port functionality when implementing flow control. One may argue that this functionality fits very bad with the conceptually completely asynchronous signaling, but the functionality has been there for ages and is expected to be there. When a port sets itself into a busy state, &lt;code&gt;command&lt;/code&gt; signals should not be delivered, and senders of such signals should suspend until the port sets itself in a not busy state.</source>
          <target state="translated">互換性のあるフロー制御。ポートは非​​常に長い間、フロー制御を実装するときにビジーポート機能を使用する可能性がありました。この機能は、概念的に完全に非同期のシグナリングには非常に適合しないと主張する人もいるかもしれませんが、この機能は長年にわたって存在しており、存在すると予想されています。ポートがビジー状態になると、 &lt;code&gt;command&lt;/code&gt; シグナルは配信されず、ポートがビジーでない状態になるまで、そのようなシグナルの送信者は一時停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="bc2ecfdad25dfb789330b4fb6ce1f190fa4a6009" translate="yes" xml:space="preserve">
          <source>Compilation information (options) for the current code. This field is decoded when looked at by the Crashdump Viewer tool.</source>
          <target state="translated">現在のコードのコンパイル情報(オプション)。このフィールドは、Crashdump Viewer ツールで見たときにデコードされます。</target>
        </trans-unit>
        <trans-unit id="a25315637952f3b953fbd470f3a3c029d30dbf7d" translate="yes" xml:space="preserve">
          <source>Compilation information (options) for the old code, if any. This field is decoded when looked at by the Crashdump Viewer tool.</source>
          <target state="translated">古いコードのコンパイル情報 (オプション)。このフィールドは、Crashdump Viewer ツールで見たときにデコードされます。</target>
        </trans-unit>
        <trans-unit id="d203fe989b06cd0b7f625aaf8b091fd82d85ba33" translate="yes" xml:space="preserve">
          <source>Compilation of Latin-1 Encoded Erlang Files</source>
          <target state="translated">Latin-1エンコードされたErlangファイルのコンパイル</target>
        </trans-unit>
        <trans-unit id="c2f3e610efaad31893ca9eea02ebda3f70c91261" translate="yes" xml:space="preserve">
          <source>Compile</source>
          <target state="translated">Compile</target>
        </trans-unit>
        <trans-unit id="f42e39dc3bb6eb7ec13af5ff3a369d976c404115" translate="yes" xml:space="preserve">
          <source>Compile a single dictionary file to Erlang source. Valid options are as follows.</source>
          <target state="translated">一つの辞書ファイルをErlangソースにコンパイルします。有効なオプションは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5dd3dcb33be1e0a1c396852da6964c746cfd4a25" translate="yes" xml:space="preserve">
          <source>Compile a single dictionary file. The input &lt;code&gt;File&lt;/code&gt; can be either a path or a literal dictionary, the occurrence of newline (ascii NL) or carriage return (ascii CR) identifying the latter. &lt;code&gt;Opt&lt;/code&gt; determines the format of the results and whether they are written to file or returned, and can have the following types.</source>
          <target state="translated">単一の辞書ファイルをコンパイルします。入力 &lt;code&gt;File&lt;/code&gt; は、パスまたはリテラルディクショナリ、改行の出現（ascii NL）またはキャリッジリターン（ascii CR）のいずれかで、後者を識別できます。 &lt;code&gt;Opt&lt;/code&gt; は、結果の形式と、結果がファイルに書き込まれるか返されるかを決定します。次のタイプがあります。</target>
        </trans-unit>
        <trans-unit id="ea40bcb5b571a74df14353da32099a206afadd67" translate="yes" xml:space="preserve">
          <source>Compile a syntax tree or list of syntax trees representing a module and load the resulting module into memory.</source>
          <target state="translated">モジュールを表す構文ツリーまたは構文ツリーのリストをコンパイルし、結果のモジュールをメモリにロードします。</target>
        </trans-unit>
        <trans-unit id="d9cce07b3061f732b7e01783d96813c2407e1405" translate="yes" xml:space="preserve">
          <source>Compile a syntax tree or list of syntax trees representing a module into a binary BEAM object.</source>
          <target state="translated">モジュールを表すシンタックスツリーまたはシンタックスツリーのリストをバイナリBEAMオブジェクトにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="a375aba3b710980768146495139b7af7d643a217" translate="yes" xml:space="preserve">
          <source>Compile and test can look as follows (on Linux):</source>
          <target state="translated">コンパイルとテストは以下のようになります(Linuxの場合)。</target>
        </trans-unit>
        <trans-unit id="efeb9236240ba18a33a232714ad55f1346882865" translate="yes" xml:space="preserve">
          <source>Compile and test:</source>
          <target state="translated">コンパイルしてテストします。</target>
        </trans-unit>
        <trans-unit id="009e13386fb7dcb403518ae79beff433bc904f14" translate="yes" xml:space="preserve">
          <source>Compile the file:</source>
          <target state="translated">ファイルをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="aac1b086ee049c8040c4f4f36d211fd3ac0e1a0c" translate="yes" xml:space="preserve">
          <source>Compile-Time Functions</source>
          <target state="translated">コンパイル時関数</target>
        </trans-unit>
        <trans-unit id="95ffe53acbea5b747afd3e7842a4f96dca8af0d9" translate="yes" xml:space="preserve">
          <source>Compile-time errors</source>
          <target state="translated">コンパイル時のエラー</target>
        </trans-unit>
        <trans-unit id="db2b08b37977716ce6fab5afd8fb8ea79479ade1" translate="yes" xml:space="preserve">
          <source>Compile:</source>
          <target state="translated">Compile:</target>
        </trans-unit>
        <trans-unit id="0cb4d20a7b6c25fd2b85e979b6e35af9c0c13cf6" translate="yes" xml:space="preserve">
          <source>Compiled HiPE code can be loaded on the exact same build of ERTS that was used when compiling the code. It might however work on other builds, the emulator verifies checksums in order to determine if it can load the code or not. Note that HiPE has some limitations. For more information see the documentation of the &lt;code&gt;HiPE&lt;/code&gt; application.</source>
          <target state="translated">コンパイルされたHiPEコードは、コードのコンパイル時に使用されたのとまったく同じERTSのビルドにロードできます。ただし、他のビルドでも機能する可能性があります。エミュレータは、コードをロードできるかどうかを判断するためにチェックサムを検証します。HiPEにはいくつかの制限があることに注意してください。詳細については、ドキュメントを参照してください &lt;code&gt;HiPE&lt;/code&gt; アプリケーションの。</target>
        </trans-unit>
        <trans-unit id="af4e4bc880ca00160a867f75ea5f3ae2220aada2" translate="yes" xml:space="preserve">
          <source>Compiled code can be loaded on at least two subsequent releases.</source>
          <target state="translated">コンパイルされたコードは、少なくとも2つのリリースでロードすることができます。</target>
        </trans-unit>
        <trans-unit id="341a20e237ff5c4b89204a3d4d8c8af5f8aa63bb" translate="yes" xml:space="preserve">
          <source>Compiler</source>
          <target state="translated">Compiler</target>
        </trans-unit>
        <trans-unit id="d95945f4aa5cbbd91cada4bcabf68e0085672573" translate="yes" xml:space="preserve">
          <source>Compiler -- GNU C Compiler, &lt;code&gt;gcc&lt;/code&gt; or the C compiler frontend for LLVM, &lt;code&gt;clang&lt;/code&gt;.</source>
          <target state="translated">コンパイラ-GNU Cコンパイラ、 &lt;code&gt;gcc&lt;/code&gt; 、またはLLVMのCコンパイラフロントエンド &lt;code&gt;clang&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="af2c88bc48b05cd87b47590ea9db1fa862bf9e68" translate="yes" xml:space="preserve">
          <source>Compiler options. &lt;code&gt;Options&lt;/code&gt; is a single option or a list of options. This attribute is added to the option list when compiling the module. See the &lt;code&gt; compile(3)&lt;/code&gt; manual page in Compiler.</source>
          <target state="translated">コンパイラオプション。 &lt;code&gt;Options&lt;/code&gt; は、単一のオプションまたはオプションのリストです。この属性は、モジュールのコンパイル時にオプションリストに追加されます。コンパイラの &lt;code&gt; compile(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="1fd7d8f9a4971282aa3f0cede9ec0a2e34e9a6cd" translate="yes" xml:space="preserve">
          <source>Compiler options. &lt;code&gt;Options&lt;/code&gt; is a single option or a list of options. This attribute is added to the option list when compiling the module. See the &lt;code&gt;compile(3)&lt;/code&gt; manual page in Compiler.</source>
          <target state="translated">コンパイラオプション。 &lt;code&gt;Options&lt;/code&gt; は、単一のオプションまたはオプションのリストです。この属性は、モジュールのコンパイル時にオプションリストに追加されます。コンパイラーの &lt;code&gt;compile(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="a97122f5c3385cf8819c76cad4ef6fc4b08ceea9" translate="yes" xml:space="preserve">
          <source>Compiles a list of files by calling &lt;code&gt;compile:file(File, [report_errors, report_warnings])&lt;/code&gt; for each &lt;code&gt;File&lt;/code&gt; in &lt;code&gt;Files&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Files&lt;/code&gt; 内の各 &lt;code&gt;File&lt;/code&gt; に対して &lt;code&gt;compile:file(File, [report_errors, report_warnings])&lt;/code&gt; を呼び出して、ファイルのリストをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="e2047a2918cfe55f2b26d89d11edcfd3cd059df3" translate="yes" xml:space="preserve">
          <source>Compiles a module for Cover analysis. The module is given by its module name &lt;code&gt;Module&lt;/code&gt; or by its file name &lt;code&gt;File&lt;/code&gt;. The &lt;code&gt;.erl&lt;/code&gt; extension may be omitted. If the module is located in another directory, the path has to be specified.</source>
          <target state="translated">カバー分析用のモジュールをコンパイルします。モジュールは、モジュール名 &lt;code&gt;Module&lt;/code&gt; またはファイル名 &lt;code&gt;File&lt;/code&gt; で指定されます。 &lt;code&gt;.erl&lt;/code&gt; 拡張子を省略することができます。モジュールが別のディレクトリにある場合は、パスを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="d0d35e2cea0ebf58ea7da0c0e5ae037788aeac63" translate="yes" xml:space="preserve">
          <source>Compiles a regular expression, with the syntax described below, into an internal format to be used later as a parameter to &lt;code&gt;&lt;a href=&quot;#run-2&quot;&gt;run/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">以下で説明する構文を使用して、正規表現を内部フォーマットにコンパイルし、後で &lt;code&gt;&lt;a href=&quot;#run-2&quot;&gt;run/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; の。</target>
        </trans-unit>
        <trans-unit id="b4b4b69ed812b4e7ab7f1e6412e22181177a9748" translate="yes" xml:space="preserve">
          <source>Compiles a trace into raw profile data held by the &lt;code&gt;fprof&lt;/code&gt; server.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; が保持する生のプロファイルデータにトレースをコンパイルします。サーバーがます。</target>
        </trans-unit>
        <trans-unit id="496d11b730a6b29cbd65fce7dff2e32330c8cd8d" translate="yes" xml:space="preserve">
          <source>Compiles all modules (&lt;code&gt;.beam&lt;/code&gt; files) in a directory &lt;code&gt;Dir&lt;/code&gt; for Cover analysis the same way as &lt;code&gt;compile_beam/1&lt;/code&gt; and returns a list with the return values.</source>
          <target state="translated">&lt;code&gt;compile_beam/1&lt;/code&gt; と同じ方法でカバー分析のためにディレクトリ &lt;code&gt;Dir&lt;/code&gt; 内のすべてのモジュール（ &lt;code&gt;.beam&lt;/code&gt; ファイル）をコンパイルしますとし、戻り値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="c5f842551ac6a97b456ee17b4a34923a2c160458" translate="yes" xml:space="preserve">
          <source>Compiles all modules (&lt;code&gt;.erl&lt;/code&gt; files) in a directory &lt;code&gt;Dir&lt;/code&gt; for Cover analysis the same way as &lt;code&gt;compile_module/1,2&lt;/code&gt; and returns a list with the return values.</source>
          <target state="translated">同じ方法でカバー分析のためにディレクトリ &lt;code&gt;Dir&lt;/code&gt; 内のすべてのモジュール（ &lt;code&gt;.erl&lt;/code&gt; ファイル）をコンパイルします。 &lt;code&gt;compile_module/1,2&lt;/code&gt; とし、戻り値のリストを返します。</target>
        </trans-unit>
        <trans-unit id="309f0ca1eb953e1fbbdcae7b61062e795ffa7fa7" translate="yes" xml:space="preserve">
          <source>Compiles and then loads the code for a file on all nodes. &lt;code&gt;Options&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt;. Compilation is equivalent to:</source>
          <target state="translated">すべてのノードでファイルのコードをコンパイルしてロードします。 &lt;code&gt;Options&lt;/code&gt; デフォルトは &lt;code&gt;[]&lt;/code&gt; です。コンパイルは以下と同等です。</target>
        </trans-unit>
        <trans-unit id="221e138541a5626106fb43c92947e2167555dd13" translate="yes" xml:space="preserve">
          <source>Compiles and then purges and loads the code for a module. &lt;code&gt;Module&lt;/code&gt; can be either a module name or a source file path, with or without &lt;code&gt;.erl&lt;/code&gt; extension. &lt;code&gt;Options&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">モジュールのコードをコンパイルしてから、パージしてロードします。 &lt;code&gt;Module&lt;/code&gt; は、モジュール名またはソースファイルパスのいずれかで、 &lt;code&gt;.erl&lt;/code&gt; 拡張子を付けても付けなくてもかまいません。 &lt;code&gt;Options&lt;/code&gt; デフォルトは &lt;code&gt;[]&lt;/code&gt; ですです。</target>
        </trans-unit>
        <trans-unit id="b52f93d9afc3e00c08182aa65070b9ab7d1d8892" translate="yes" xml:space="preserve">
          <source>Compiles one or more files. The files must include the extension, for example, &lt;code&gt;.erl&lt;/code&gt; for Erlang source code, or &lt;code&gt;.yrl&lt;/code&gt; for Yecc source code. &lt;code&gt;Erlc&lt;/code&gt; uses the extension to invoke the correct compiler.</source>
          <target state="translated">1つ以上のファイルをコンパイルします。ファイルの拡張子は、例えば、含まれている必要があり &lt;code&gt;.erl&lt;/code&gt; Erlangのソースコード、または &lt;code&gt;.yrl&lt;/code&gt; Yeccソースコードのために。 &lt;code&gt;Erlc&lt;/code&gt; は拡張機能を使用して正しいコンパイラーを呼び出します。</target>
        </trans-unit>
        <trans-unit id="34fed5154618994778a93f6748ba20015380e577" translate="yes" xml:space="preserve">
          <source>Compiles the &lt;code&gt;ASN.1&lt;/code&gt; module &lt;code&gt;Asn1module&lt;/code&gt; and generates an Erlang module &lt;code&gt;Asn1module.erl&lt;/code&gt; with encode and decode functions for the types defined in &lt;code&gt;Asn1module&lt;/code&gt;. For each ASN.1 value defined in the module, an Erlang function that returns the value in Erlang representation is generated.</source>
          <target state="translated">&lt;code&gt;ASN.1&lt;/code&gt; モジュール &lt;code&gt;Asn1module&lt;/code&gt; をコンパイルし、Erlangモジュール &lt;code&gt;Asn1module.erl&lt;/code&gt; を生成します。 &lt;code&gt;Asn1module&lt;/code&gt; 。モジュールで定義された各ASN.1値に対して、Erlang表現で値を返すErlang関数が生成されます。</target>
        </trans-unit>
        <trans-unit id="9bedf3a45a5ce0a8899ba240ac388512ac570574" translate="yes" xml:space="preserve">
          <source>Compiles the code in the file &lt;code&gt;File&lt;/code&gt;, which is an Erlang source code file without the &lt;code&gt;.erl&lt;/code&gt; extension. &lt;code&gt;Options&lt;/code&gt; determine the behavior of the compiler.</source>
          <target state="translated">ファイル &lt;code&gt;File&lt;/code&gt; 内のコードをコンパイルします。これは、 &lt;code&gt;.erl&lt;/code&gt; 拡張子のないErlangソースコードファイルです。 &lt;code&gt;Options&lt;/code&gt; はコンパイラの動作を決定します。</target>
        </trans-unit>
        <trans-unit id="b15b4a0ca80870d899887848b2b561183d48d68e" translate="yes" xml:space="preserve">
          <source>Compiles the escript regardless of the value of the mode attribute.</source>
          <target state="translated">mode属性の値に関係なく、escriptをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="69570f1327b6c981b9e63bb2091b8f905c42561a" translate="yes" xml:space="preserve">
          <source>Compiles the escript using flag &lt;code&gt;+native&lt;/code&gt;.</source>
          <target state="translated">フラグ &lt;code&gt;+native&lt;/code&gt; を使用してescriptをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="eac85df8f89173db1370c40338429031ded73b0b" translate="yes" xml:space="preserve">
          <source>Compiles the files with property tests in the subdirectory &lt;code&gt;property_test&lt;/code&gt;</source>
          <target state="translated">サブディレクトリ &lt;code&gt;property_test&lt;/code&gt; のプロパティテストを使用してファイルをコンパイルします</target>
        </trans-unit>
        <trans-unit id="e841c656ad6e0af5f7245e7bfda8da0570795473" translate="yes" xml:space="preserve">
          <source>Compiles the specified MIB file &lt;code&gt;&amp;lt;File&amp;gt;.mib&lt;/code&gt;. The compiled file &lt;code&gt;BinFileName&lt;/code&gt; is called &lt;code&gt;&amp;lt;File&amp;gt;.bin&lt;/code&gt;.</source>
          <target state="translated">指定されたMIBファイル &lt;code&gt;&amp;lt;File&amp;gt;.mib&lt;/code&gt; をコンパイルします。コンパイルされたファイル &lt;code&gt;BinFileName&lt;/code&gt; は &lt;code&gt;&amp;lt;File&amp;gt;.bin&lt;/code&gt; と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="1dbd42cde4e636dbd5d9f39210c69452d50ba1ef" translate="yes" xml:space="preserve">
          <source>Compiles the specified modules and then terminates (with non-zero exit code if the compilation of some file did not succeed). Implies &lt;code&gt;-noinput&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールをコンパイルしてから終了します（一部のファイルのコンパイルが成功しなかった場合はゼロ以外の終了コードで）。意味 &lt;code&gt;-noinput&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="79f1604d887e21632c6157fb43c6ea0b3900d23f" translate="yes" xml:space="preserve">
          <source>Compiles using the SMP emulator. This is mainly useful for compiling native code, which must be compiled with the same runtime system that it is to be run on.</source>
          <target state="translated">SMPエミュレータを使用してコンパイルします。これは主にネイティブコードをコンパイルする際に便利です。</target>
        </trans-unit>
        <trans-unit id="e47fc7a0773cbda86f40b163702495db6f23084c" translate="yes" xml:space="preserve">
          <source>Compiling &lt;code&gt;GUI.asn&lt;/code&gt; including the configuration file is done as follows:</source>
          <target state="translated">構成ファイルを含む &lt;code&gt;GUI.asn&lt;/code&gt; のコンパイルは、次のように行われます。</target>
        </trans-unit>
        <trans-unit id="a3590c7d935d1337384ebe30d0a63b8449a7f0a4" translate="yes" xml:space="preserve">
          <source>Compiling the code:</source>
          <target state="translated">コードをコンパイルします。</target>
        </trans-unit>
        <trans-unit id="c5d3843d2d607e7b8047f8ec33a050336d9069e4" translate="yes" xml:space="preserve">
          <source>Compiling the regular expression before matching is useful if the same expression is to be used in matching against multiple subjects during the lifetime of the program. Compiling once and executing many times is far more efficient than compiling each time one wants to match.</source>
          <target state="translated">マッチングの前に正規表現をコンパイルすることは、プログラムの有効期間中に複数の被験者に対するマッチングで同じ表現を使用する場合に便利です。一度だけコンパイルして何度も実行する方が、マッチしたい時に毎回コンパイルするよりもはるかに効率的です。</target>
        </trans-unit>
        <trans-unit id="39f435fa5106d5274aa216c6cabba9fe1af576c6" translate="yes" xml:space="preserve">
          <source>Compiling this code to beam assembly (&lt;code&gt;erlc -S&lt;/code&gt;) shows exactly what is happening.</source>
          <target state="translated">このコードをビームアセンブリ（ &lt;code&gt;erlc -S&lt;/code&gt; ）にコンパイルすると、何が起こっているかが正確にわかります。</target>
        </trans-unit>
        <trans-unit id="fc4c343469cc1bbf3a31e4474cfc268fdaa2a44f" translate="yes" xml:space="preserve">
          <source>Compiling this gives the following diagnostic:</source>
          <target state="translated">これをコンパイルすると、以下のような診断結果が得られます。</target>
        </trans-unit>
        <trans-unit id="3930914f8b99e680a55bb03e16d8af9eb69ff2ea" translate="yes" xml:space="preserve">
          <source>Compiling your code for use with &lt;code&gt;Erl_Interface&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; で使用するコードをコンパイルする</target>
        </trans-unit>
        <trans-unit id="2ee8aa4143f8abfd86b424e473e8462be5d52390" translate="yes" xml:space="preserve">
          <source>Complex objects</source>
          <target state="translated">複雑なオブジェクト</target>
        </trans-unit>
        <trans-unit id="06e63f260804216a398baf6f2e442df9c9a6cef2" translate="yes" xml:space="preserve">
          <source>Complexity Note</source>
          <target state="translated">複雑さノート</target>
        </trans-unit>
        <trans-unit id="9fb27df4e27c00aa8eb364ebe6cbe8b7f432000e" translate="yes" xml:space="preserve">
          <source>Complicated non-real-time queries mainly for operation and maintenance</source>
          <target state="translated">運用・保守を中心とした複雑な非リアルタイムクエリ</target>
        </trans-unit>
        <trans-unit id="ce8d8f8862e358aa8505e89d95cb74cadb849673" translate="yes" xml:space="preserve">
          <source>Complicated or circular dependencies can make it difficult or even impossible to decide in which order things must be done without risking runtime errors during an upgrade or downgrade. Dependencies can be:</source>
          <target state="translated">複雑な依存関係や循環的な依存関係は、アップグレードやダウングレードの際にランタイムエラーの危険を冒すことなく、実行すべき順序を決めることを困難にしたり、不可能にしたりすることがあります。依存関係には以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="59fca003467aad58f9b2b7e565b2ce3c84cd8c99" translate="yes" xml:space="preserve">
          <source>Composes a form-urlencoded &lt;code&gt;QueryString&lt;/code&gt; based on a &lt;code&gt;QueryList&lt;/code&gt;, a list of non-percent-encoded key-value pairs. Form-urlencoding is defined in section 4.10.21.6 of the &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt; specification and in section 4.10.22.6 of the &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML 5.0&lt;/a&gt;&lt;/code&gt; specification for non-UTF-8 encodings.</source>
          <target state="translated">form-urlencodedで構成し &lt;code&gt;QueryString&lt;/code&gt; に基づい &lt;code&gt;QueryList&lt;/code&gt; 、非パーセントエンコードキーと値のペアのリスト。Form-urlencodingは、 &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html52/&quot;&gt;HTML 5.2&lt;/a&gt;&lt;/code&gt; 仕様のセクション4.10.21.6および非UTF-8エンコーディングの &lt;code&gt;&lt;a href=&quot;https://www.w3.org/TR/html50/&quot;&gt;HTML 5.0&lt;/a&gt;&lt;/code&gt; 仕様のセクション4.10.22.6で定義されています。</target>
        </trans-unit>
        <trans-unit id="c1c2faea65f93de909779259387dfd62954a59b1" translate="yes" xml:space="preserve">
          <source>Composing form-urlencoded query strings from a list of key-value pairs</source>
          <target state="translated">キーと値のペアのリストからフォームurlencodeされたクエリ文字列を作成する</target>
        </trans-unit>
        <trans-unit id="c0f6771c0b4ff62b75c5e9a377f7512f8a2eb0a7" translate="yes" xml:space="preserve">
          <source>Composite terms can be constructed in the &lt;code&gt;Result&lt;/code&gt; part either by simply writing a list, so that the following code:</source>
          <target state="translated">次のコードのように、リストを作成するだけで、 &lt;code&gt;Result&lt;/code&gt; 部分に複合用語を作成できます。</target>
        </trans-unit>
        <trans-unit id="1fe0eda1d9e3db81360d76b01700f1fc22578fac" translate="yes" xml:space="preserve">
          <source>Compress a megaco component. The erlang dist encoder makes no assumption on the how or even if the component is compressed.</source>
          <target state="translated">megacoコンポーネントを圧縮する。erlang distエンコーダはコンポーネントがどのように圧縮されているか、あるいは圧縮されているかどうかについては何も仮定していません。</target>
        </trans-unit>
        <trans-unit id="9a0fa988cf443cd1d375271986427ec83de3c3de" translate="yes" xml:space="preserve">
          <source>Compresses as much data as possible, and stops when the input buffer becomes empty. It can introduce some output latency (reading input without producing any output) except when forced to flush.</source>
          <target state="translated">できるだけ多くのデータを圧縮し、入力バッファが空になると停止します。強制的にフラッシュさせられた場合を除き、出力遅延(出力を生成せずに入力を読み込むこと)が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="ca1de065e72e8ca9af3242c8e400cc65d7c65430" translate="yes" xml:space="preserve">
          <source>Compresses data with gz headers and checksum.</source>
          <target state="translated">gzヘッダとチェックサムでデータを圧縮します。</target>
        </trans-unit>
        <trans-unit id="5c0f619cd36dba9bac61586e413cccabc45aa3bd" translate="yes" xml:space="preserve">
          <source>Compresses data with zlib headers and checksum.</source>
          <target state="translated">zlibヘッダとチェックサムでデータを圧縮します。</target>
        </trans-unit>
        <trans-unit id="f32171029d67c841b304fa7802dd10659367b936" translate="yes" xml:space="preserve">
          <source>Compresses data without zlib headers and checksum.</source>
          <target state="translated">zlib ヘッダとチェックサムを使用せずにデータを圧縮します。</target>
        </trans-unit>
        <trans-unit id="3dd49034da5c932029f1472e527e8712ce79873f" translate="yes" xml:space="preserve">
          <source>Compression is not supported.</source>
          <target state="translated">圧縮には対応していません。</target>
        </trans-unit>
        <trans-unit id="db573c49060217e5ae7cad606cbcc07e7a832439" translate="yes" xml:space="preserve">
          <source>Compression level to use:</source>
          <target state="translated">使用する圧縮レベル。</target>
        </trans-unit>
        <trans-unit id="e004f4ec54c1bdeeaf01ade20386a509b0f50f4b" translate="yes" xml:space="preserve">
          <source>Compression method to use, currently the only supported method is &lt;code&gt;deflated&lt;/code&gt;.</source>
          <target state="translated">使用する圧縮方法。現在サポートされている方法は &lt;code&gt;deflated&lt;/code&gt; のみです。。です。</target>
        </trans-unit>
        <trans-unit id="6150f090d8e22866c8af7ff2aba307952a5dde62" translate="yes" xml:space="preserve">
          <source>Computers in general</source>
          <target state="translated">コンピュータ一般</target>
        </trans-unit>
        <trans-unit id="8617e2409a9b5d81fedafe4823179428b5db9db3" translate="yes" xml:space="preserve">
          <source>Computes a CMAC of type &lt;code&gt;Type&lt;/code&gt; from &lt;code&gt;Data&lt;/code&gt; using &lt;code&gt;Key&lt;/code&gt; as the authentication key.</source>
          <target state="translated">認証キーとして &lt;code&gt;Key&lt;/code&gt; を使用して、 &lt;code&gt;Data&lt;/code&gt; からタイプ &lt;code&gt;Type&lt;/code&gt; CMACを計算します。</target>
        </trans-unit>
        <trans-unit id="5ef091378f6011f32b08cfa86037d11d3811847d" translate="yes" xml:space="preserve">
          <source>Computes a HMAC of type &lt;code&gt;Type&lt;/code&gt; from &lt;code&gt;Data&lt;/code&gt; using &lt;code&gt;Key&lt;/code&gt; as the authentication key.</source>
          <target state="translated">認証キーとして &lt;code&gt;Key&lt;/code&gt; を使用して、 &lt;code&gt;Data&lt;/code&gt; からタイプ &lt;code&gt;Type&lt;/code&gt; HMACを計算します。</target>
        </trans-unit>
        <trans-unit id="57b5d4d63f3cc072fe01656f61d82df0a950c2ad" translate="yes" xml:space="preserve">
          <source>Computes a MAC (Message Authentication Code) as &lt;code&gt;&lt;a href=&quot;#mac-3&quot;&gt;mac/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#mac-4&quot;&gt;mac/4&lt;/a&gt;&lt;/code&gt; but &lt;code&gt;MacLength&lt;/code&gt; will limit the size of the resultant &lt;code&gt;Mac&lt;/code&gt; to at most &lt;code&gt;MacLength&lt;/code&gt; bytes. Note that if &lt;code&gt;MacLength&lt;/code&gt; is greater than the actual number of bytes returned from the underlying hash, the returned hash will have that shorter length instead.</source>
          <target state="translated">MAC（メッセージ認証コード）を &lt;code&gt;&lt;a href=&quot;#mac-3&quot;&gt;mac/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#mac-4&quot;&gt;mac/4&lt;/a&gt;&lt;/code&gt; として計算しますが、 &lt;code&gt;MacLength&lt;/code&gt; は、結果の &lt;code&gt;Mac&lt;/code&gt; のサイズを最大で &lt;code&gt;MacLength&lt;/code&gt; バイトに制限します。 &lt;code&gt;MacLength&lt;/code&gt; が、基になるハッシュから返される実際のバイト数よりも大きい場合、返されるハッシュの長さは代わりに短くなることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b42e2ec67691e90be353f3e69f72f115d660a04c" translate="yes" xml:space="preserve">
          <source>Computes a MAC (Message Authentication Code) of type &lt;code&gt;Type&lt;/code&gt; from &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; からタイプ &lt;code&gt;Type&lt;/code&gt; のMAC（メッセージ認証コード）を計算します。</target>
        </trans-unit>
        <trans-unit id="53549f7a7603013142bc34dff7ebedfb36946cc7" translate="yes" xml:space="preserve">
          <source>Computes a POLY1305 message authentication code (&lt;code&gt;Mac&lt;/code&gt;) from &lt;code&gt;Data&lt;/code&gt; using &lt;code&gt;Key&lt;/code&gt; as the authentication key.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; を認証キーとして使用して、 &lt;code&gt;Data&lt;/code&gt; からPOLY1305メッセージ認証コード（ &lt;code&gt;Mac&lt;/code&gt; ）を計算します。</target>
        </trans-unit>
        <trans-unit id="e7c1891feac89cb6aa9a784a894b9b7b9608ba45" translate="yes" xml:space="preserve">
          <source>Computes a layout for a document and returns the corresponding text. See &lt;code&gt;&lt;a href=&quot;#type-document&quot;&gt;document()&lt;/a&gt;&lt;/code&gt; for further information. Throws &lt;code&gt;no_layout&lt;/code&gt; if no layout could be selected.</source>
          <target state="translated">ドキュメントのレイアウトを計算し、対応するテキストを返します。詳細については、 &lt;code&gt;&lt;a href=&quot;#type-document&quot;&gt;document()&lt;/a&gt;&lt;/code&gt; を参照してください。例外 &lt;code&gt;no_layout&lt;/code&gt; 何のレイアウトを選択できなかった場合。</target>
        </trans-unit>
        <trans-unit id="f4a91015bc370126d2bc5a10fd6fba142f0c14d1" translate="yes" xml:space="preserve">
          <source>Computes a message digest of type &lt;code&gt;Type&lt;/code&gt; from &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; からタイプ &lt;code&gt;Type&lt;/code&gt; メッセージダイジェストを計算します。</target>
        </trans-unit>
        <trans-unit id="cf90dde8a0d4f759f93b97dc9e424324bb51d514" translate="yes" xml:space="preserve">
          <source>Computes an MD5 message digest from &lt;code&gt;Data&lt;/code&gt;, where the length of the digest is 128 bits (16 bytes). &lt;code&gt;Data&lt;/code&gt; is a binary or a list of small integers and binaries.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; からMD5メッセージダイジェストを計算します。ダイジェストの長さは128ビット（16バイト）です。 &lt;code&gt;Data&lt;/code&gt; は、バイナリまたは小さな整数とバイナリのリストです。</target>
        </trans-unit>
        <trans-unit id="c22b3bee40e516d5a07e21c574ff4a1f0971eb34" translate="yes" xml:space="preserve">
          <source>Computes and returns the adler32 checksum for &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; のadler32チェックサムを計算して返します。</target>
        </trans-unit>
        <trans-unit id="a2abd766c0d5933f47abe70569d16c6d23d728d1" translate="yes" xml:space="preserve">
          <source>Computes and returns the crc32 (IEEE 802.3 style) checksum for &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Data&lt;/code&gt; のcrc32（IEEE 802.3スタイル）チェックサムを計算して返します。</target>
        </trans-unit>
        <trans-unit id="5bc8ee5e263121b926d2d7cc593061f196c30372" translate="yes" xml:space="preserve">
          <source>Computes shared secret.</source>
          <target state="translated">共有された秘密を計算します。</target>
        </trans-unit>
        <trans-unit id="acb13ad633fa39b9539693d88f8804c8d59f95c0" translate="yes" xml:space="preserve">
          <source>Computes the date and time from the specified number of gregorian seconds.</source>
          <target state="translated">指定したグレゴリオ秒数から日付と時刻を計算します。</target>
        </trans-unit>
        <trans-unit id="1a60d1d8512d9b43f58c2fa78c69c36bd98988a7" translate="yes" xml:space="preserve">
          <source>Computes the date from the specified number of gregorian days.</source>
          <target state="translated">指定されたグレゴリオ暦の日数から日付を計算します。</target>
        </trans-unit>
        <trans-unit id="6fd928a5422a42545d3f8009960a129cf04f4b60" translate="yes" xml:space="preserve">
          <source>Computes the day of the week from the specified &lt;code&gt;Year&lt;/code&gt;, &lt;code&gt;Month&lt;/code&gt;, and &lt;code&gt;Day&lt;/code&gt;. Returns the day of the week as &lt;code&gt;1&lt;/code&gt;: Monday, &lt;code&gt;2&lt;/code&gt;: Tuesday, and so on.</source>
          <target state="translated">指定した &lt;code&gt;Year&lt;/code&gt; 、 &lt;code&gt;Month&lt;/code&gt; 、 &lt;code&gt;Day&lt;/code&gt; から曜日を計算します。曜日を &lt;code&gt;1&lt;/code&gt; ：月曜日、 &lt;code&gt;2&lt;/code&gt; ：火曜日のように返します。</target>
        </trans-unit>
        <trans-unit id="6bb723f7731befec282ae7ca53f445d61b40a18f" translate="yes" xml:space="preserve">
          <source>Computes the function &lt;code&gt;N^P mod M&lt;/code&gt;.</source>
          <target state="translated">関数 &lt;code&gt;N^P mod M&lt;/code&gt; 計算します。</target>
        </trans-unit>
        <trans-unit id="99dc499279c70ed65d6985615f527cb1c6eca26f" translate="yes" xml:space="preserve">
          <source>Computes the number of days in a month.</source>
          <target state="translated">月の日数を計算します。</target>
        </trans-unit>
        <trans-unit id="1fa973e390e7f2a427dcdf5a3027ba7dbec27578" translate="yes" xml:space="preserve">
          <source>Computes the number of gregorian days starting with year 0 and ending at the specified date.</source>
          <target state="translated">0年から始まり、指定された日付で終わるグレゴリオ暦の日数を計算します。</target>
        </trans-unit>
        <trans-unit id="460e100ab696f364fd9d5ba6fb8d34bc03d60b0c" translate="yes" xml:space="preserve">
          <source>Computes the number of gregorian seconds starting with year 0 and ending at the specified date and time.</source>
          <target state="translated">0年を起点とし、指定した日時に終了するグレゴリオ秒数を計算します。</target>
        </trans-unit>
        <trans-unit id="c47a52a2c77fbf69039f5e7a1c102eeafa864720" translate="yes" xml:space="preserve">
          <source>Computes the shared secret from the private key and the other party's public key. See also &lt;code&gt;public_key:compute_key/2&lt;/code&gt;</source>
          <target state="translated">秘密鍵と相手の公開鍵から共有秘密を計算します。 &lt;code&gt;public_key:compute_key/2&lt;/code&gt; も参照してください</target>
        </trans-unit>
        <trans-unit id="19647b47d421a4ceb33442c666abcffa1275beb1" translate="yes" xml:space="preserve">
          <source>Computes the time from the specified number of seconds. &lt;code&gt;Seconds&lt;/code&gt; must be less than the number of seconds per day (86400).</source>
          <target state="translated">指定された秒数から時間を計算します。 &lt;code&gt;Seconds&lt;/code&gt; は、1日あたりの秒数（86400）未満でなければなりません。</target>
        </trans-unit>
        <trans-unit id="72e55071de1b7db1194725444c44c89aad5472b9" translate="yes" xml:space="preserve">
          <source>Concatenates &lt;code&gt;String1&lt;/code&gt; and &lt;code&gt;String2&lt;/code&gt; to form a new string &lt;code&gt;String3&lt;/code&gt;, which is returned.</source>
          <target state="translated">連結 &lt;code&gt;String1&lt;/code&gt; と &lt;code&gt;String2&lt;/code&gt; 新しい文字列を形成するために &lt;code&gt;String3&lt;/code&gt; 返され、。</target>
        </trans-unit>
        <trans-unit id="c2fd259e1eeb55c9d34cb9be26a6c2f75fe45818" translate="yes" xml:space="preserve">
          <source>Concatenates all text nodes within the tree.</source>
          <target state="translated">ツリー内のすべてのテキストノードを連結します。</target>
        </trans-unit>
        <trans-unit id="9abfe77881130796df1a67c0daaf938195db3463" translate="yes" xml:space="preserve">
          <source>Concatenates documents horizontally. Returns a document representing the concatenation of the documents &lt;code&gt;D1&lt;/code&gt; and &lt;code&gt;D2&lt;/code&gt; such that the last character of &lt;code&gt;D1&lt;/code&gt; is horizontally adjacent to the first character of &lt;code&gt;D2&lt;/code&gt;, in all possible layouts. (Note: any indentation of &lt;code&gt;D2&lt;/code&gt; is lost.)</source>
          <target state="translated">ドキュメントを水平方向に連結します。すべての可能なレイアウトで、 &lt;code&gt;D1&lt;/code&gt; の最後の文字が &lt;code&gt;D2&lt;/code&gt; の最初の文字に水平方向に隣接するように、ドキュメント &lt;code&gt;D1&lt;/code&gt; と &lt;code&gt;D2&lt;/code&gt; の連結を表すドキュメントを返します。（注： &lt;code&gt;D2&lt;/code&gt; のインデントはすべて失われます。）</target>
        </trans-unit>
        <trans-unit id="04e1c1fcf3ff57f50627e79ee514ef9c378133db" translate="yes" xml:space="preserve">
          <source>Concatenates documents vertically. Returns a document representing the concatenation of the documents &lt;code&gt;D1&lt;/code&gt; and &lt;code&gt;D2&lt;/code&gt; such that the first line of &lt;code&gt;D2&lt;/code&gt; follows directly below the last line of &lt;code&gt;D1&lt;/code&gt;, and the first character of &lt;code&gt;D2&lt;/code&gt; is in the same horizontal column as the first character of &lt;code&gt;D1&lt;/code&gt;, in all possible layouts.</source>
          <target state="translated">ドキュメントを垂直方向に連結します。戻り値ドキュメントの連結表す文書 &lt;code&gt;D1&lt;/code&gt; と &lt;code&gt;D2&lt;/code&gt; は、最初のラインよう &lt;code&gt;D2&lt;/code&gt; は直接の最後の行の下に以下の &lt;code&gt;D1&lt;/code&gt; との最初の文字 &lt;code&gt;D2&lt;/code&gt; がの最初の文字と同じ水平列にある &lt;code&gt;D1&lt;/code&gt; すべての可能にし、レイアウト。</target>
        </trans-unit>
        <trans-unit id="d15df121840905ed24abf69eb1607851f11fd815" translate="yes" xml:space="preserve">
          <source>Concatenates the text representation of the elements of &lt;code&gt;Things&lt;/code&gt;. The elements of &lt;code&gt;Things&lt;/code&gt; can be atoms, integers, floats, or strings.</source>
          <target state="translated">&lt;code&gt;Things&lt;/code&gt; の要素のテキスト表現を連結します。 &lt;code&gt;Things&lt;/code&gt; の要素は、アトム、整数、浮動小数点数、または文字列です。</target>
        </trans-unit>
        <trans-unit id="0fbd67c45b9474556de6e975213929d8a6a47459" translate="yes" xml:space="preserve">
          <source>Concatenates two Erlang terms, prepending &lt;code&gt;head&lt;/code&gt; onto &lt;code&gt;tail&lt;/code&gt; and thereby creating a &lt;code&gt;cons&lt;/code&gt; cell. To make a proper list, &lt;code&gt;tail&lt;/code&gt; is always to be a list or an empty list. Notice that &lt;code&gt;NULL&lt;/code&gt; is not a valid list.</source>
          <target state="translated">2つのErlang用語を連結し、 &lt;code&gt;head&lt;/code&gt; から &lt;code&gt;tail&lt;/code&gt; 頭を付け、 &lt;code&gt;cons&lt;/code&gt; を作成します。適切なリストを作成するには、 &lt;code&gt;tail&lt;/code&gt; は常にリストまたは空のリストになります。 &lt;code&gt;NULL&lt;/code&gt; は有効なリストではないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="2c186b6b1deba8a770e9e1695542ea581f1d331a" translate="yes" xml:space="preserve">
          <source>Concatenation. It matches &lt;code&gt;r1&lt;/code&gt; and then &lt;code&gt;r2&lt;/code&gt;.</source>
          <target state="translated">連結。 &lt;code&gt;r1&lt;/code&gt; に一致し、次に &lt;code&gt;r2&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="c05bafdb56031bb64da1f1d1861f60118932c605" translate="yes" xml:space="preserve">
          <source>Concept</source>
          <target state="translated">Concept</target>
        </trans-unit>
        <trans-unit id="4666ff1177aa06dcf2e2acf53d84de400036ddc9" translate="yes" xml:space="preserve">
          <source>Conceptually, a random real number &lt;code&gt;R&lt;/code&gt; is generated from the interval &lt;code&gt;0 =&amp;lt; R &amp;lt; 1&lt;/code&gt; and then the closest rounded down normalized number in the IEEE 754 Double precision format is returned.</source>
          <target state="translated">概念的には、ランダムな実数 &lt;code&gt;R&lt;/code&gt; が区間 &lt;code&gt;0 =&amp;lt; R &amp;lt; 1&lt;/code&gt; から生成され、IEEE 754倍精度形式で最も近い切り捨て正規化数が返されます。</target>
        </trans-unit>
        <trans-unit id="d59061815936968cd27ee5eeaae408a473490a5f" translate="yes" xml:space="preserve">
          <source>Conceptually, call tracing works as follows. Inside the Erlang virtual machine, a set of processes and a set of functions are to be traced. If a traced process calls a traced function, the trace action is taken. Otherwise, nothing happens.</source>
          <target state="translated">概念的には、コールトレースは以下のように動作します。Erlang仮想マシンの中では、プロセスと関数のセットがトレースされます。もしトレースされたプロセスがトレースされた関数を呼び出した場合、トレースされたアクションが実行されます。そうでなければ、何も起こりません。</target>
        </trans-unit>
        <trans-unit id="3c999b08d7c22c76e1e6dc0faa05064eba3a0394" translate="yes" xml:space="preserve">
          <source>Conceptually, the SSH protocol can be partitioned into four layers:</source>
          <target state="translated">概念的には、SSHプロトコルは4つの層に分けることができます。</target>
        </trans-unit>
        <trans-unit id="e39262defe80a83fac1b793497417432c8b1a879" translate="yes" xml:space="preserve">
          <source>Conclusion</source>
          <target state="translated">Conclusion</target>
        </trans-unit>
        <trans-unit id="74b54106acc00f9f724fe295423167276db3a6a8" translate="yes" xml:space="preserve">
          <source>Conclusion: Avoid values 8 and -8 unless you know your zlib version supports them.</source>
          <target state="translated">結論。お使いの zlib のバージョンがサポートしていない限り、値 8 と -8 は避けてください。</target>
        </trans-unit>
        <trans-unit id="bca39e22d6b36f574329075fd07dd2629638ff2f" translate="yes" xml:space="preserve">
          <source>Concurrent Programming in Erlang, 2nd Edition (1996), Prentice-Hall, ISBN 0-13-508301-X.</source>
          <target state="translated">Erlangの並列プログラミング 第2版 (1996年)、プレンティスホール、ISBN 0-13-508301-X.</target>
        </trans-unit>
        <trans-unit id="f6aff0ecefa8fcdacfbed141ac66c352f04cf650" translate="yes" xml:space="preserve">
          <source>Concurrent processes in &lt;code&gt;Mnesia&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; での並行プロセス</target>
        </trans-unit>
        <trans-unit id="c5814c8062d15de57203bd84567426b16df3f497" translate="yes" xml:space="preserve">
          <source>Condition variable. Used when threads must wait for a specific condition to appear before continuing execution. Condition variables must be used with associated mutexes.</source>
          <target state="translated">条件変数。スレッドが実行を継続する前に特定の条件が現れるのを待たなければならない場合に使用されます。条件変数は、関連するミューテックスと一緒に使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="3030b91f9ac5c385e0e5ba58d0f9e9743296576f" translate="yes" xml:space="preserve">
          <source>ConditionExpression ::= ExprMatchVariable | { GuardFunction } | { GuardFunction, ConditionExpression, ... } | TermConstruct</source>
          <target state="translated">条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 ::=ExprMatchVariable|{GuardFunction }|条件式 | 衛戍関数、条件式、...}| 用語集|TermConstruct</target>
        </trans-unit>
        <trans-unit id="bbdc9c98e3ac79ef6aaff8d954cf32028d6e4917" translate="yes" xml:space="preserve">
          <source>Conditional Breakpoints</source>
          <target state="translated">条件付きブレークポイント</target>
        </trans-unit>
        <trans-unit id="290e0b23c3082ece19e13061650a81ca4e400aba" translate="yes" xml:space="preserve">
          <source>Conditional compilation directives</source>
          <target state="translated">条件付きコンパイルディレクティブ</target>
        </trans-unit>
        <trans-unit id="e659f221c6e3ec580224ba7c1c7b2ad09c848aac" translate="yes" xml:space="preserve">
          <source>Config is a list of {Item, Value} tuples. See megaco:user_info/2 about which items and values that are valid.</source>
          <target state="translated">Configは{Item,Value}のタプルのリストです。どの項目と値が有効かについては megaco:user_info/2 を参照してください。</target>
        </trans-unit>
        <trans-unit id="6aa237b9ad391aadf182df8ed22f8e2958d1b069" translate="yes" xml:space="preserve">
          <source>Configurable degree of fault tolerance (by replication)</source>
          <target state="translated">設定可能なフォールトトレランスの程度(レプリケーションによる</target>
        </trans-unit>
        <trans-unit id="646e69fcaff68aa4bd99d792ff12c1ed636760b8" translate="yes" xml:space="preserve">
          <source>Configuration API functions</source>
          <target state="translated">コンフィギュレーションAPI機能</target>
        </trans-unit>
        <trans-unit id="8d87e87971a9b480182707da39f6dc7de52524b0" translate="yes" xml:space="preserve">
          <source>Configuration Parameters</source>
          <target state="translated">設定パラメータ</target>
        </trans-unit>
        <trans-unit id="57b4835664f870ac8b56a60f7a98cea5878873e7" translate="yes" xml:space="preserve">
          <source>Configuration data for the formatter. See &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt; logger_formatter(3)&lt;/a&gt;&lt;/code&gt; for an example of a formatter implementation.</source>
          <target state="translated">フォーマッターの構成データ。フォーマッターの実装例については、 &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt; logger_formatter(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5fe8143de2bd407b7318a9b914132afaf723fced" translate="yes" xml:space="preserve">
          <source>Configuration data for the formatter. See &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter(3)&lt;/a&gt;&lt;/code&gt; for an example of a formatter implementation.</source>
          <target state="translated">フォーマッタの構成データ。フォーマッタ実装の例については、 &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="657e7546b354cf171eeba078e0a7f96bcfb3d842" translate="yes" xml:space="preserve">
          <source>Configuration data may be included in configuration files that is located in the configuration directory. The name of this directory is given in the &lt;code&gt;config_dir&lt;/code&gt; configuration parameter. These files are read at start-up.</source>
          <target state="translated">構成データは、構成ディレクトリにある構成ファイルに含まれている場合があります。このディレクトリーの名前は、 &lt;code&gt;config_dir&lt;/code&gt; 構成パラメーターで指定されます。これらのファイルは起動時に読み取られます。</target>
        </trans-unit>
        <trans-unit id="1df26c4218fb3cc15e90c12f33ffed59b35b1ae8" translate="yes" xml:space="preserve">
          <source>Configuration data values in the CTH can be read by calling &lt;code&gt;&lt;a href=&quot;ct#get_config-1&quot;&gt;ct:get_config/1,2,3&lt;/a&gt;&lt;/code&gt; (as explained in section &lt;code&gt;&lt;a href=&quot;config_file_chapter#require_config_data&quot;&gt;Requiring and Reading Configuration Data&lt;/a&gt;&lt;/code&gt;). The configuration variables in question must, as always, first have been required by a suite-, group-, or test case information function, or by function &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1/2&lt;/a&gt;&lt;/code&gt;. The latter can also be used in CT hook functions.</source>
          <target state="translated">CTHの構成データ値は、 &lt;code&gt;&lt;a href=&quot;ct#get_config-1&quot;&gt;ct:get_config/1,2,3&lt;/a&gt;&lt;/code&gt; を呼び出すことで読み取ることができます（「 &lt;code&gt;&lt;a href=&quot;config_file_chapter#require_config_data&quot;&gt;Requiring and Reading Configuration Data&lt;/a&gt;&lt;/code&gt; 説明）。問題の構成変数は、いつものように、最初にスイート、グループ、またはテストケース情報関数、または関数 &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1/2&lt;/a&gt;&lt;/code&gt; 1/2で必要とされている必要があります。後者はCTフック関数でも使用できます。</target>
        </trans-unit>
        <trans-unit id="acdba8395423767de730ee1b75436df3a0ebc87e" translate="yes" xml:space="preserve">
          <source>Configuration file</source>
          <target state="translated">設定ファイル</target>
        </trans-unit>
        <trans-unit id="856e8e09448b31c0b19cccc7d2f429463a65a741" translate="yes" xml:space="preserve">
          <source>Configuration file.</source>
          <target state="translated">設定ファイル。</target>
        </trans-unit>
        <trans-unit id="cac911d99944c8d8de85519d3c8353adfa4909ed" translate="yes" xml:space="preserve">
          <source>Configuration files containing sensitive data can be encrypted if they must be stored in open and shared directories.</source>
          <target state="translated">機密データを含む設定ファイルは、オープンディレクトリや共有ディレクトリに保存する必要がある場合、暗号化することができます。</target>
        </trans-unit>
        <trans-unit id="983f322fab3effb7b0bc8474c3b652c0529b254b" translate="yes" xml:space="preserve">
          <source>Configuration function for a group, executed after the last test case. (Optional)</source>
          <target state="translated">最後のテストケースの後に実行されるグループの設定関数です。(オプション)</target>
        </trans-unit>
        <trans-unit id="4837fc4e4200eba9faee7e5d7a160f74631dd940" translate="yes" xml:space="preserve">
          <source>Configuration function for a group, executed before the first test case. (Optional)</source>
          <target state="translated">最初のテストケースの前に実行されるグループの設定関数です。(オプション)</target>
        </trans-unit>
        <trans-unit id="0446d4a5ed9002889e3fcbdb5be7abd84be2a99c" translate="yes" xml:space="preserve">
          <source>Configuration function for a testcase, executed after each test case. (Optional)</source>
          <target state="translated">各テストケースの後に実行されるテストケースの設定関数です。(オプション)</target>
        </trans-unit>
        <trans-unit id="bd3c7dde0d6b835f389712e4b422204622e6bba3" translate="yes" xml:space="preserve">
          <source>Configuration function for a testcase, executed before each test case. (Optional)</source>
          <target state="translated">各テストケースの前に実行されるテストケースの設定関数です。(オプション)</target>
        </trans-unit>
        <trans-unit id="54eab7708a8f9ac8e547396221ceb06e955d8621" translate="yes" xml:space="preserve">
          <source>Configuration parameter &lt;code&gt;-mnesia dump_log_update_in_place &amp;lt;bool&amp;gt;&lt;/code&gt; controls the safety level of the function &lt;code&gt;&lt;a href=&quot;mnesia#dump_log-0&quot;&gt;mnesia:dump_log()&lt;/a&gt;&lt;/code&gt; By default, &lt;code&gt;Mnesia&lt;/code&gt; dumps the transaction log directly into the &lt;code&gt;DAT&lt;/code&gt; files. If a power failure occurs during the dump, this can cause the randomly accessed &lt;code&gt;DAT&lt;/code&gt; files to become corrupt. If the parameter is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;Mnesia&lt;/code&gt; copies the &lt;code&gt;DAT&lt;/code&gt; files and target the dump to the new temporary files. If the dump is successful, the temporary files are renamed to their normal &lt;code&gt;DAT&lt;/code&gt; suffixes. The possibility for unrecoverable inconsistencies in the data files becomes much smaller with this strategy. However, the actual dumping of the transaction log becomes considerably slower. The system designer must decide whether speed or safety is the higher priority.</source>
          <target state="translated">構成パラメーター &lt;code&gt;-mnesia dump_log_update_in_place &amp;lt;bool&amp;gt;&lt;/code&gt; は、関数 &lt;code&gt;&lt;a href=&quot;mnesia#dump_log-0&quot;&gt;mnesia:dump_log()&lt;/a&gt;&lt;/code&gt; の安全レベルを制御します。デフォルトでは、 &lt;code&gt;Mnesia&lt;/code&gt; はトランザクションログを直接 &lt;code&gt;DAT&lt;/code&gt; ファイルにダンプします。ダンプ中に停電が発生すると、ランダムにアクセスされた &lt;code&gt;DAT&lt;/code&gt; ファイルが破損する可能性があります。パラメータが &lt;code&gt;false&lt;/code&gt; に設定されている場合、 &lt;code&gt;Mnesia&lt;/code&gt; は &lt;code&gt;DAT&lt;/code&gt; ファイルをコピーし、ダンプのターゲットを新しい一時ファイルにします。ダンプが成功すると、一時ファイルの名前が通常の &lt;code&gt;DAT&lt;/code&gt; に変更されます接尾辞。この戦略により、データファイルに回復不可能な不整合が発生する可能性が大幅に減少します。ただし、トランザクションログの実際のダンプはかなり遅くなります。システム設計者は、速度と安全性のどちらを優先するかを決定する必要があります。</target>
        </trans-unit>
        <trans-unit id="dbd4d4d025501c16c7f2ccb2570c2099b823b966" translate="yes" xml:space="preserve">
          <source>Configuration parameter values in the configuration file override the values in the application resource files (see &lt;code&gt;&lt;a href=&quot;app&quot;&gt;app(4)&lt;/a&gt;&lt;/code&gt;). The values in the configuration file can be overridden by command-line flags (see &lt;code&gt;erts:erl(1)&lt;/code&gt;).</source>
          <target state="translated">構成ファイルの構成パラメーター値は、アプリケーションリソースファイルの値をオーバーライドします（ &lt;code&gt;&lt;a href=&quot;app&quot;&gt;app(4)&lt;/a&gt;&lt;/code&gt; を参照）。構成ファイルの値は、コマンドラインフラグで上書きできます（ &lt;code&gt;erts:erl(1)&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="152137ca072ede4f7367cf2d0089190cd0e9f36f" translate="yes" xml:space="preserve">
          <source>Configuration parameters used by the application. The value of a configuration parameter is retrieved by calling &lt;code&gt;application:get_env/1,2&lt;/code&gt;. The values in the application resource file can be overridden by values in a configuration file (see &lt;code&gt;&lt;a href=&quot;config&quot;&gt;config(4)&lt;/a&gt;&lt;/code&gt;) or by command-line flags (see &lt;code&gt;erts:erl(1)&lt;/code&gt;).</source>
          <target state="translated">アプリケーションが使用する構成パラメーター。設定パラメータの値は、 &lt;code&gt;application:get_env/1,2&lt;/code&gt; を呼び出すことによって取得されます。アプリケーションリソースファイルの値は、構成ファイルの値（ &lt;code&gt;&lt;a href=&quot;config&quot;&gt;config(4)&lt;/a&gt;&lt;/code&gt; を参照）またはコマンドラインフラグ（ &lt;code&gt;erts:erl(1)&lt;/code&gt; を参照）によってオーバーライドできます。</target>
        </trans-unit>
        <trans-unit id="f167a5ff05614d588913f2a3ea7b803864f94594" translate="yes" xml:space="preserve">
          <source>Configuration problems - Everything from that the database was not set up right to that the c-program that should be run through the erlang port was not compiled for your platform.</source>
          <target state="translated">設定の問題-データベースが正しく設定されていなかったことから、erlangポートから実行されるべきcプログラムがあなたのプラットフォーム用にコンパイルされていなかったことまで、すべてです。</target>
        </trans-unit>
        <trans-unit id="adfc00d45d90320f98d4a8966dd99b612af98936" translate="yes" xml:space="preserve">
          <source>Configuration terms can be combined with &lt;code&gt;ct_run&lt;/code&gt; start flags or &lt;code&gt;ct:run_test/1&lt;/code&gt; options. The result is, for some flags/options and terms, that the values are merged (for example, configuration files, include directories, verbosity levels, and silent connections) and for others that the start flags/options override the test specification terms (for example, log directory, label, style sheet, and auto-compilation).</source>
          <target state="translated">構成条件は、 &lt;code&gt;ct_run&lt;/code&gt; 開始フラグまたは &lt;code&gt;ct:run_test/1&lt;/code&gt; オプションと組み合わせることができます。結果として、一部のフラグ/オプションと用語では値がマージされ（たとえば、構成ファイル、インクルードディレクトリ、詳細レベル、サイレント接続）、その他では開始フラグ/オプションがテスト仕様用語（たとえば、ログディレクトリ、ラベル、スタイルシート、自動コンパイルなど）。</target>
        </trans-unit>
        <trans-unit id="111aadb1527fab0c3a3d9158364fe8fbe059dd4b" translate="yes" xml:space="preserve">
          <source>Configuration that alters the behaviour of the watchdog state machine. On key &lt;code&gt;okay&lt;/code&gt;, the non-negative number of answered DWR messages before transitioning from REOPEN to OKAY. On key &lt;code&gt;suspect&lt;/code&gt;, the number of watchdog timeouts before transitioning from OKAY to SUSPECT when DWR is unanswered, or 0 to not make the transition.</source>
          <target state="translated">ウォッチドッグ状態マシンの動作を変更する構成。キー &lt;code&gt;okay&lt;/code&gt; で、REOPENからOKAYに移行する前の、負でない数の回答済みDWRメッセージ。主な &lt;code&gt;suspect&lt;/code&gt; で、DWRが応答されていないときにOKAYからSUSPECTに移行する前のウォッチドッグタイムアウトの数、または移行しない場合の0。</target>
        </trans-unit>
        <trans-unit id="88225db23aed8095cba3daadea46a8efc09bcf97" translate="yes" xml:space="preserve">
          <source>Configuration tool for erts_alloc</source>
          <target state="translated">erts_alloc の設定ツール</target>
        </trans-unit>
        <trans-unit id="a5fa127b18e20d9b955af8441e526ef00d776b55" translate="yes" xml:space="preserve">
          <source>Configure and build Erlang with LTTng support:</source>
          <target state="translated">LTTngをサポートしたErlangの設定とビルド。</target>
        </trans-unit>
        <trans-unit id="6b190ce5efd5aa3a5159cbfc60014c630270e8e5" translate="yes" xml:space="preserve">
          <source>Configure and build Erlang with SystemTap support:</source>
          <target state="translated">SystemTapをサポートしたErlangの設定とビルド。</target>
        </trans-unit>
        <trans-unit id="5d4f8831764e8303911e86ac723330a29d408566" translate="yes" xml:space="preserve">
          <source>Configure and build Erlang/OTP with FIPS support:</source>
          <target state="translated">FIPSをサポートしたErlang/OTPの設定とビルド。</target>
        </trans-unit>
        <trans-unit id="b69539c636b739dc3d9c18ef898b44516eab0391" translate="yes" xml:space="preserve">
          <source>Configure and build all applications in OTP:</source>
          <target state="translated">OTPですべてのアプリケーションを設定して構築します。</target>
        </trans-unit>
        <trans-unit id="8b2484c0c315deeb2ad1807b28fd424c7f06c488" translate="yes" xml:space="preserve">
          <source>Configure and build wxWidgets (on Mavericks - 10.9):</source>
          <target state="translated">wxWidgets の設定とビルド (Mavericks-10.9)。</target>
        </trans-unit>
        <trans-unit id="39d69829cac4583c026b7dac06cd342838c15fea" translate="yes" xml:space="preserve">
          <source>Configure and build wxWidgets (shared library on linux):</source>
          <target state="translated">wxWidgets (linux上の共有ライブラリ)の設定とビルド。</target>
        </trans-unit>
        <trans-unit id="67a1257909b72f3008c5378fbca12636e7276e2e" translate="yes" xml:space="preserve">
          <source>Configure and build wxWidgets (static library on linux):</source>
          <target state="translated">wxWidgets (linux上の静的ライブラリ)の設定とビルド。</target>
        </trans-unit>
        <trans-unit id="c38bfc21b593ce7dfdec5fb0054e7673a03afdbf" translate="yes" xml:space="preserve">
          <source>Configure how wide the target documentation should be rendered. By default &lt;code&gt;shell_docs&lt;/code&gt; used the value returned by &lt;code&gt;&lt;a href=&quot;io#columns-0&quot;&gt;io:columns()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ターゲットドキュメントをレンダリングする幅を構成します。デフォルトでは、 &lt;code&gt;shell_docs&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;io#columns-0&quot;&gt;io:columns()&lt;/a&gt;&lt;/code&gt; によって返される値を使用していました。</target>
        </trans-unit>
        <trans-unit id="45882985975ef9fac87f192f6e545cf51766f699" translate="yes" xml:space="preserve">
          <source>Configure the &lt;code&gt;server_node()&lt;/code&gt; function.</source>
          <target state="translated">&lt;code&gt;server_node()&lt;/code&gt; 関数を構成します。</target>
        </trans-unit>
        <trans-unit id="bce9428e6d9edc0287bc7c097cb864aea994b4a1" translate="yes" xml:space="preserve">
          <source>Configure the application (agent).</source>
          <target state="translated">アプリケーション(エージェント)を設定します。</target>
        </trans-unit>
        <trans-unit id="51a6fc0c6fbca524ff962159da3f3049edca0826" translate="yes" xml:space="preserve">
          <source>Configure the application (manager).</source>
          <target state="translated">アプリケーション(マネージャー)を設定します。</target>
        </trans-unit>
        <trans-unit id="e46814ef7294ecaf5dc1092fc3316c476f79636e" translate="yes" xml:space="preserve">
          <source>Configure the encoding that should be used by the renderer for graphical details such as bullet-points. By default &lt;code&gt;shell_docs&lt;/code&gt; uses the value returned by &lt;code&gt;&lt;a href=&quot;io#getopts-0&quot;&gt;io:getopts()&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">箇条書きなどのグラフィックの詳細にレンダラーが使用するエンコードを構成します。デフォルトでは、 &lt;code&gt;shell_docs&lt;/code&gt; は &lt;code&gt;&lt;a href=&quot;io#getopts-0&quot;&gt;io:getopts()&lt;/a&gt;&lt;/code&gt; によって返される値を使用します。</target>
        </trans-unit>
        <trans-unit id="cd4cfa952c7cb1b3fb9049874d99e02d7fd694ce" translate="yes" xml:space="preserve">
          <source>Configure whether &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt; ansi escape codes&lt;/a&gt;&lt;/code&gt; should be used to render graphical details such as bold and underscore. By default &lt;code&gt;shell_docs&lt;/code&gt; will try to determine if the receiving shell supports ansi escape codes. It is possible to override the automated check by setting the kernel configuration parameter &lt;code&gt;shell_docs_ansi&lt;/code&gt; to a &lt;code&gt;boolean()&lt;/code&gt; value.</source>
          <target state="translated">太字やアンダースコアなどのグラフィカルな詳細をレンダリングするために &lt;code&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/ANSI_escape_code&quot;&gt; ansi escape codes&lt;/a&gt;&lt;/code&gt; を使用するかどうかを構成します。デフォルトでは、 &lt;code&gt;shell_docs&lt;/code&gt; は、受信シェルがANSIエスケープコードをサポートしているかどうかを判断しようとします。カーネル構成パラメーター &lt;code&gt;shell_docs_ansi&lt;/code&gt; を &lt;code&gt;boolean()&lt;/code&gt; 値に設定することにより、自動チェックをオーバーライドすることができます。</target>
        </trans-unit>
        <trans-unit id="d9998129edb861a2783fd9f2d983f3b8f9c04883" translate="yes" xml:space="preserve">
          <source>Configures a TLS 1.3 connection for keylogging</source>
          <target state="translated">キーロギング用のTLS 1.3接続を設定します。</target>
        </trans-unit>
        <trans-unit id="27054e2972268be83aba680767c39676d6755bb8" translate="yes" xml:space="preserve">
          <source>Configures all allocators as they were configured in respective Erlang/OTP release. These will eventually be removed.</source>
          <target state="translated">すべてのアロケータをそれぞれの Erlang/OTP リリースで設定されていた通りに設定します。これらは最終的には削除されます。</target>
        </trans-unit>
        <trans-unit id="e1fa096044e69ac6a707fff4851145fb0bf622ec" translate="yes" xml:space="preserve">
          <source>Configures the maximum amount of bytes that can be sent on a TLS 1.3 connection before an automatic key update is performed.</source>
          <target state="translated">自動鍵更新が実行される前に、TLS 1.3 接続で送信できる最大バイト数を設定します。</target>
        </trans-unit>
        <trans-unit id="493e81d559f9007329e29af0dfb0f57e7a4f1093" translate="yes" xml:space="preserve">
          <source>Configures the middlebox compatibility mode on a TLS 1.3 connection.</source>
          <target state="translated">TLS 1.3 接続のミドルボックス互換性モードを設定します。</target>
        </trans-unit>
        <trans-unit id="caaf0a0801b3a7b065a2bc9b4de4bf8d0218db05" translate="yes" xml:space="preserve">
          <source>Configures the module responsible to communicate to &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt;. Defaults to &lt;code&gt;erl_epmd&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd&lt;/a&gt;&lt;/code&gt; との通信を担当するモジュールを構成します。デフォルトは &lt;code&gt;erl_epmd&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="bd503813fc0045da6207273af5b0357c11782f4a" translate="yes" xml:space="preserve">
          <source>Configures the port used by erl_epmd to listen for connection and connect to other nodes. See &lt;code&gt;erl_epmd&lt;/code&gt; for more details. Defaults to &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">erl_epmdが接続をリッスンし、他のノードに接続するために使用するポートを構成します。詳細については、 &lt;code&gt;erl_epmd&lt;/code&gt; を参照してください。デフォルトは &lt;code&gt;0&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="86997217852f7599e58f2424f86945f3b956ee02" translate="yes" xml:space="preserve">
          <source>Configures the server's built-in anti replay feature based on Bloom filters.</source>
          <target state="translated">ブルームフィルタに基づいて、サーバーに内蔵されているリプレイ防止機能を設定します。</target>
        </trans-unit>
        <trans-unit id="c9e5587526bf34e0c44a725edb0ac01a0dbf94bc" translate="yes" xml:space="preserve">
          <source>Configures the session ticket functionality. Allowed values are &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;manual&lt;/code&gt; and &lt;code&gt;auto&lt;/code&gt;. If it is set to &lt;code&gt;manual&lt;/code&gt; the client will send the ticket information to user process in a 3-tuple:</source>
          <target state="translated">セッションチケット機能を設定します。許可される値は &lt;code&gt;disabled&lt;/code&gt; 、 &lt;code&gt;manual&lt;/code&gt; および &lt;code&gt;auto&lt;/code&gt; です。 &lt;code&gt;manual&lt;/code&gt; 設定されている場合、クライアントはチケット情報を3タプルでユーザープロセスに送信します。</target>
        </trans-unit>
        <trans-unit id="0d71c8eadc43b0d0c1aac71b43d64a1624014b9d" translate="yes" xml:space="preserve">
          <source>Configures the session ticket functionality. Allowed values are &lt;code&gt;disabled&lt;/code&gt;, &lt;code&gt;stateful&lt;/code&gt; and &lt;code&gt;stateless&lt;/code&gt;.</source>
          <target state="translated">セッションチケット機能を設定します。許可される値は &lt;code&gt;disabled&lt;/code&gt; 、 &lt;code&gt;stateful&lt;/code&gt; 、 &lt;code&gt;stateless&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a467e0f743057863caa3e159aa6a46f3dd678d5e" translate="yes" xml:space="preserve">
          <source>Configures the session ticket functionalty in TLS 1.3 client and server.</source>
          <target state="translated">TLS 1.3クライアントとサーバーのセッションチケット機能を設定します。</target>
        </trans-unit>
        <trans-unit id="dff79d039481de88c5036e525e09e7da9c1ef7c7" translate="yes" xml:space="preserve">
          <source>Configures the session tickets to be used for session resumption. It is a mandatory option in &lt;code&gt;manual&lt;/code&gt; mode (&lt;code&gt;session_tickets = manual&lt;/code&gt;).</source>
          <target state="translated">セッション再開に使用するセッションチケットを設定します。 &lt;code&gt;manual&lt;/code&gt; モード（ &lt;code&gt;session_tickets = manual&lt;/code&gt; ）では必須のオプションです。</target>
        </trans-unit>
        <trans-unit id="c76054bf57b43f642c168e37a0c4892b7f72916d" translate="yes" xml:space="preserve">
          <source>Configuring Automatic Start at Boot</source>
          <target state="translated">ブート時の自動起動の設定</target>
        </trans-unit>
        <trans-unit id="6ba44bc8ee2b71bde340df435bd441a9952d9f23" translate="yes" xml:space="preserve">
          <source>Configuring automatic start at boot</source>
          <target state="translated">起動時の自動起動の設定</target>
        </trans-unit>
        <trans-unit id="f49a4931e1853a0fe4fa0602792023cbc59353be" translate="yes" xml:space="preserve">
          <source>Configuring the server</source>
          <target state="translated">サーバーの設定</target>
        </trans-unit>
        <trans-unit id="f5c913b04ded8b2ffe36ec199b0399bc4e16854e" translate="yes" xml:space="preserve">
          <source>Configuring the server's (daemon's) command execution</source>
          <target state="translated">サーバ(デーモン)のコマンド実行を設定する</target>
        </trans-unit>
        <trans-unit id="503bfa6b8b4cecf020c1a30e6445166dec1a4440" translate="yes" xml:space="preserve">
          <source>Conflicting lock requests are automatically queued if there is no risk of a deadlock. Otherwise the transaction must be terminated and executed again. Mnesia does this automatically as long as the upper limit of the maximum &lt;code&gt;retries&lt;/code&gt; is not reached. For details, see &lt;code&gt;mnesia:transaction/3&lt;/code&gt;.</source>
          <target state="translated">デッドロックのリスクがない場合、競合するロック要求は自動的にキューに入れられます。それ以外の場合は、トランザクションを終了して再度実行する必要があります。Mnesiaは、最大 &lt;code&gt;retries&lt;/code&gt; 上限に達していない限り、これを自動的に行います。詳細については、 &lt;code&gt;mnesia:transaction/3&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2080b07c9b432005750511e775ff7af7fc0ee76b" translate="yes" xml:space="preserve">
          <source>Connect the socket identified by &lt;code&gt;ctx&lt;/code&gt; to the address identified by &lt;code&gt;addr&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ctx&lt;/code&gt; で識別されるソケットを &lt;code&gt;addr&lt;/code&gt; で識別されるアドレスに接続します。</target>
        </trans-unit>
        <trans-unit id="cfb84c7d5e0e6a9a5fc9a1a633d1fff5ce509970" translate="yes" xml:space="preserve">
          <source>Connect to a suspended shell</source>
          <target state="translated">吊り貝に接続する</target>
        </trans-unit>
        <trans-unit id="a8a7191deb9b3f0244a3453f396383743b739a70" translate="yes" xml:space="preserve">
          <source>Connect to the database</source>
          <target state="translated">データベースに接続する</target>
        </trans-unit>
        <trans-unit id="dfb47972cff0f154a2285644e3f0befc8c5e2893" translate="yes" xml:space="preserve">
          <source>Connect/session options can be specified in a configuration file with entries like the following.</source>
          <target state="translated">接続/セッションオプションは、以下のようなエントリで設定ファイルに指定することができます。</target>
        </trans-unit>
        <trans-unit id="68c228838ef934f7196305d997754e8802035987" translate="yes" xml:space="preserve">
          <source>ConnectToHost, ConnectToPort) -&amp;gt;</source>
          <target state="translated">ConnectToHost, ConnectToPort) -&amp;gt;</target>
        </trans-unit>
        <trans-unit id="2437d145ba906224318478ddfa7f5cf7b3436b38" translate="yes" xml:space="preserve">
          <source>ConnectToHost, ConnectToPort, Timeout) -&amp;gt;</source>
          <target state="translated">ConnectToHost、ConnectToPort、タイムアウト）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="f2b22ea7c73a23c792930a01a0f5400a135abcc5" translate="yes" xml:space="preserve">
          <source>Connected (4)</source>
          <target state="translated">接続済み (4)</target>
        </trans-unit>
        <trans-unit id="36a66c74a711b5012f4f766353ddd52a449b5a5e" translate="yes" xml:space="preserve">
          <source>Connected nodes</source>
          <target state="translated">接続ノード</target>
        </trans-unit>
        <trans-unit id="2ca30b01eb101978f596dfb4c83992a57c6fb882" translate="yes" xml:space="preserve">
          <source>Connecting a client to the server</source>
          <target state="translated">クライアントをサーバーに接続する</target>
        </trans-unit>
        <trans-unit id="1ed330faf0978f7019e3726be2b5f99e046a3f4c" translate="yes" xml:space="preserve">
          <source>Connecting to a distributed Erlang node</source>
          <target state="translated">分散Erlangノードに接続する</target>
        </trans-unit>
        <trans-unit id="1f32eba569c9805c42f3eab7b2d07fbd5c071012" translate="yes" xml:space="preserve">
          <source>Connecting to other nodes</source>
          <target state="translated">他のノードとの接続</target>
        </trans-unit>
        <trans-unit id="e3a4dd291e41bb38e1db11e5af64f5a26ce5f00c" translate="yes" xml:space="preserve">
          <source>Connection Protocol</source>
          <target state="translated">コネクションプロトコル</target>
        </trans-unit>
        <trans-unit id="4fd62a8d97ad5549bbf8348232d0d6b0c35c3395" translate="yes" xml:space="preserve">
          <source>Connection handle</source>
          <target state="translated">接続ハンドル</target>
        </trans-unit>
        <trans-unit id="2a819b372c3b2a49974a53da0826f1bc5ad2d2c2" translate="yes" xml:space="preserve">
          <source>Connection info - Information regarding connections. Read/Write.</source>
          <target state="translated">接続情報-接続に関する情報。読み取り/書き込み。</target>
        </trans-unit>
        <trans-unit id="acc13ac478b7f7a6df5cb010281833816acda090" translate="yes" xml:space="preserve">
          <source>Connection termination - If a connection is terminated in an abnormal way, or if you try to use a connection that you have already terminated in a normal way by calling disconnect/1, the return value will be&lt;code&gt;{error, connection_closed}&lt;/code&gt;. A connection could end abnormally because of an programming error in the Erlang ODBC application, but also if the ODBC driver crashes.</source>
          <target state="translated">接続の終了-接続が異常な方法で終了した場合、またはdisconnect / 1を呼び出してすでに通常の方法で終了した接続を使用しようとした場合、戻り値は &lt;code&gt;{error, connection_closed}&lt;/code&gt; ます。Erlang ODBCアプリケーションのプログラミングエラーが原因で接続が異常終了する可能性がありますが、ODBCドライバーがクラッシュした場合も同様です。</target>
        </trans-unit>
        <trans-unit id="f630d306abbe920d5aff2c2e026867de87df60cb" translate="yes" xml:space="preserve">
          <source>Connection time-out time, used during the initial request, when the client is &lt;strong&gt;connecting&lt;/strong&gt; to the server.</source>
          <target state="translated">クライアントがサーバーに&lt;strong&gt;接続&lt;/strong&gt;しているときに、最初の要求中に使用される接続タイムアウト時間。</target>
        </trans-unit>
        <trans-unit id="db6dfee0a523a63827ad3c6d672bff28e305c559" translate="yes" xml:space="preserve">
          <source>Connection time-out.</source>
          <target state="translated">接続のタイムアウト。</target>
        </trans-unit>
        <trans-unit id="84f24a79f02b5f5432cf025209afa84534522b4e" translate="yes" xml:space="preserve">
          <source>Connection timeout (time to wait for connection) = 10 seconds</source>
          <target state="translated">接続タイムアウト(接続待ち時間)=10秒</target>
        </trans-unit>
        <trans-unit id="3e9db74206291fe256a5fc7ef954e969d3ba0113" translate="yes" xml:space="preserve">
          <source>Connection to the remote server is prematurely closed.</source>
          <target state="translated">リモートサーバーへの接続が早期に終了している。</target>
        </trans-unit>
        <trans-unit id="9c0cd0e7b81e317003b4ab011ba52828e5f13f08" translate="yes" xml:space="preserve">
          <source>Connection type. To be passed along to &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">接続タイプ。 &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="5e82eede979765f65e15123d56fb52f12de95d73" translate="yes" xml:space="preserve">
          <source>Connection-less socket communication (UDP) consists of an initiator socket at a certain host with a certain port number and a connector socket sending data to it.</source>
          <target state="translated">コネクションレスソケット通信(UDP)は、特定のポート番号のホストにあるイニシエータソケットと、そこにデータを送るコネクタソケットから構成されています。</target>
        </trans-unit>
        <trans-unit id="8923bf50fe66824eb73b05f930aafcd92a3498db" translate="yes" xml:space="preserve">
          <source>Connections are by default transitive. If a node A connects to node B, and node B has a connection to node C, then node A also tries to connect to node C. This feature can be turned off by using the command-line flag &lt;code&gt;-connect_all false&lt;/code&gt;, see the &lt;code&gt;erl(1)&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">接続はデフォルトで推移的です。ノードAがノードBに接続し、ノードBがノードCに接続している場合、ノードAもノードCに接続しようとします。この機能は、コマンドラインフラグ &lt;code&gt;-connect_all false&lt;/code&gt; を使用してオフにできます &lt;code&gt;erl(1)&lt;/code&gt; 参照してください。（1） ERTSのマニュアルページ。</target>
        </trans-unit>
        <trans-unit id="df7a96b9d1ab852162c55262ef869436a1f43920" translate="yes" xml:space="preserve">
          <source>Connections are realized by configuring transport. Sessions are the responsibility of the user.</source>
          <target state="translated">接続はトランスポートを設定することで実現します。セッションはユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="3ac050aca2ac7a4aec63a1a71d8f09959bd07582" translate="yes" xml:space="preserve">
          <source>Connections may either be established by an explicit call to megaco:connect/4 or implicitly at the first invocation of megaco:receive_message/3.</source>
          <target state="translated">接続は、megaco:connect/4 への明示的な呼び出しによって確立されるか、megaco:receive_message/3 の最初の呼び出しで暗黙的に確立されるかのどちらかです。</target>
        </trans-unit>
        <trans-unit id="69b63834c530ccc921274b1f6732ad102c4bd9dd" translate="yes" xml:space="preserve">
          <source>Connections must be opened as follows:</source>
          <target state="translated">接続は以下のように開く必要があります。</target>
        </trans-unit>
        <trans-unit id="72980df161edb38af837eab92658c3a3e6caba2a" translate="yes" xml:space="preserve">
          <source>Connections vs. Sessions</source>
          <target state="translated">接続とセッション</target>
        </trans-unit>
        <trans-unit id="6db35336552131a827a4b1a45bea2ad8b7cf5dce" translate="yes" xml:space="preserve">
          <source>Connector punctuation</source>
          <target state="translated">コネクタの句読点</target>
        </trans-unit>
        <trans-unit id="f7170a28f440536cf3718ba7465f311ddd5a8f4f" translate="yes" xml:space="preserve">
          <source>Connects to a server on TCP port &lt;code&gt;Port&lt;/code&gt; on the host with IP address &lt;code&gt;Address&lt;/code&gt;. Argument &lt;code&gt;Address&lt;/code&gt; can be a hostname or an IP address.</source>
          <target state="translated">TCPポート上のサーバーに接続する &lt;code&gt;Port&lt;/code&gt; IPアドレスを持つホスト上の &lt;code&gt;Address&lt;/code&gt; 。引数 &lt;code&gt;Address&lt;/code&gt; は、ホスト名またはIPアドレスを指定できます。</target>
        </trans-unit>
        <trans-unit id="dd4d77ecb9ea0beb70c140dfe5e069727cc27239" translate="yes" xml:space="preserve">
          <source>Connects to an SSH server at &lt;code&gt;Host&lt;/code&gt; and &lt;code&gt;Port&lt;/code&gt; (defaults to 22) and starts an interactive shell on that remote host.</source>
          <target state="translated">&lt;code&gt;Host&lt;/code&gt; と &lt;code&gt;Port&lt;/code&gt; （デフォルトは22）でSSHサーバーに接続し、そのリモートホストでインタラクティブシェルを起動します。</target>
        </trans-unit>
        <trans-unit id="3901b0235178a62a083958cef9aa253e7ded5f4e" translate="yes" xml:space="preserve">
          <source>Connects to an SSH server at the &lt;code&gt;Host&lt;/code&gt; on &lt;code&gt;Port&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Host&lt;/code&gt; on &lt;code&gt;Port&lt;/code&gt; でSSHサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="d8b7cd7e1ddd732f728c53cb316632742f51fdb5" translate="yes" xml:space="preserve">
          <source>Connects to job number &lt;code&gt;&amp;lt;nn&amp;gt;&lt;/code&gt; or the current job. The standard shell is resumed. Operations that use standard I/O by the current job are interleaved with user inputs to the shell.</source>
          <target state="translated">ジョブ番号 &lt;code&gt;&amp;lt;nn&amp;gt;&lt;/code&gt; または現在のジョブに接続します。標準シェルが再開されます。現在のジョブによる標準I / Oを使用する操作は、シェルへのユーザー入力とインターリーブされます。</target>
        </trans-unit>
        <trans-unit id="a90f171af7aaadbc8a2111970a10fc3906a1623c" translate="yes" xml:space="preserve">
          <source>Connects to the socket named &amp;lt;socket name&amp;gt;.</source>
          <target state="translated">&amp;lt;socket name&amp;gt;という名前のソケットに接続します。</target>
        </trans-unit>
        <trans-unit id="12c4c6846d065c87773544d3b07ce317d854f9c3" translate="yes" xml:space="preserve">
          <source>Consider a &quot;pure&quot; &lt;code&gt;ets:select/2&lt;/code&gt; call that does what &lt;code&gt;ets:foldr&lt;/code&gt; does:</source>
          <target state="translated">&lt;code&gt;ets:foldr&lt;/code&gt; が実行する「純粋な」 &lt;code&gt;ets:select/2&lt;/code&gt; 呼び出しを考えてみます。</target>
        </trans-unit>
        <trans-unit id="efde5834872be2ae75b153813fdd7ce1668940f2" translate="yes" xml:space="preserve">
          <source>Consider a &lt;code&gt;code_length/0&lt;/code&gt; function that returns the length of the correct code. We dispatch all events that are not state-specific to the common function &lt;code&gt;handle_common/3&lt;/code&gt;:</source>
          <target state="translated">検討 &lt;code&gt;code_length/0&lt;/code&gt; 正しいコードの長さを返す関数。共通の関数 &lt;code&gt;handle_common/3&lt;/code&gt; に固有でないすべてのイベントをディスパッチします。</target>
        </trans-unit>
        <trans-unit id="4b8e15fd9a0bd525abf05ad20a9f77d24e2e9bec" translate="yes" xml:space="preserve">
          <source>Consider a Linux machine where option &lt;code&gt;TCP_INFO&lt;/code&gt; can be used to collect TCP statistics for a socket. Assume you are interested in field &lt;code&gt;tcpi_sacked&lt;/code&gt; of &lt;code&gt;struct tcp_info&lt;/code&gt; filled in when asking for &lt;code&gt;TCP_INFO&lt;/code&gt;. To be able to access this information, you need to know the following:</source>
          <target state="translated">オプション &lt;code&gt;TCP_INFO&lt;/code&gt; を使用してソケットのTCP統計を収集できるLinuxマシンを考えてみます。あなたがフィールドに興味を持っていると仮定し &lt;code&gt;tcpi_sacked&lt;/code&gt; の &lt;code&gt;struct tcp_info&lt;/code&gt; を尋ねるときに充填 &lt;code&gt;TCP_INFO&lt;/code&gt; 。この情報にアクセスするには、次のことを知っている必要があります。</target>
        </trans-unit>
        <trans-unit id="8d96d58366d35570e4b5a61813232b9e498b1343" translate="yes" xml:space="preserve">
          <source>Consider a directory containing a file named &quot;bj&amp;ouml;rn&quot; in ISO Latin-1, while the Erlang VM is operating in Unicode filename mode (and therefore expects UTF-8 file naming). The ISO Latin-1 name is not valid UTF-8 and one can be tempted to think that automatic conversion in, for example, &lt;code&gt;file:list_dir/1&lt;/code&gt; is a good idea. But what would happen if we later tried to open the file and have the name as a Unicode list (magically converted from the ISO Latin-1 filename)? The VM converts the filename to UTF-8, as this is the encoding expected. Effectively this means trying to open the file named &amp;lt;&amp;lt;&quot;bj&amp;ouml;rn&quot;/utf8&amp;gt;&amp;gt;. This file does not exist, and even if it existed it would not be the same file as the one that was listed. We could even create two files named &quot;bj&amp;ouml;rn&quot;, one named in UTF-8 encoding and one not. If &lt;code&gt;file:list_dir/1&lt;/code&gt; would automatically convert the ISO Latin-1 filename to a list, we would get two identical filenames as the result. To avoid this, we must differentiate between filenames that are properly encoded according to the Unicode file naming convention (that is, UTF-8) and filenames that are invalid under the encoding. By the common function &lt;code&gt;file:list_dir/1&lt;/code&gt;, the wrongly encoded filenames are ignored in Unicode filename translation mode, but by function &lt;code&gt;file:list_dir_all/1&lt;/code&gt; the filenames with invalid encoding are returned as &quot;raw&quot; filenames, that is, as binaries.</source>
          <target state="translated">Erlang VMがUnicodeファイル名モードで動作している（したがって、UTF-8ファイルの命名を想定している）ISO Latin-1の「bj&amp;ouml;rn」という名前のファイルを含むディレクトリを考えます。 ISO Latin-1の名前は有効なUTF-8ではないため、たとえば &lt;code&gt;file:list_dir/1&lt;/code&gt; での自動変換は良いアイデアだと思われたくなるかもしれません。しかし、後でファイルを開こうとして、名前をUnicodeリスト（ISO Latin-1ファイル名から魔法のように変換されたもの）として持っているとどうなるでしょうか。これは予期されるエンコーディングであるため、VMはファイル名をUTF-8に変換します。事実上、これは&amp;lt;&amp;lt; &quot;bj&amp;ouml;rn&quot; / utf8 &amp;gt;&amp;gt;という名前のファイルを開こうとすることを意味します。このファイルは存在しません。たとえ存在していても、リストされているファイルとは異なります。 「bj&amp;ouml;rn」という名前の2つのファイルを作成することもできます。1つはUTF-8エンコーディングで名前が付けられ、もう1つは名前が付けられていません。もし &lt;code&gt;file:list_dir/1&lt;/code&gt; はISO Latin-1ファイル名をリストに自動的に変換し、結果として2つの同一のファイル名を取得します。これを回避するには、Unicodeファイルの命名規則（UTF-8）に従って適切にエンコードされたファイル名と、そのエンコードでは無効なファイル名を区別する必要があります。共通の関数 &lt;code&gt;file:list_dir/1&lt;/code&gt; により、誤ってエンコードされたファイル名はUnicodeファイル名変換モードで無視されますが、関数 &lt;code&gt;file:list_dir_all/1&lt;/code&gt; により、無効なエンコードのファイル名は「生の」ファイル名、つまりバイナリとして返されます。</target>
        </trans-unit>
        <trans-unit id="85ff3c7e5e58dcfda30947417cbf03dc221285f7" translate="yes" xml:space="preserve">
          <source>Consider a function that adds a subscriber to a telephony system:</source>
          <target state="translated">電話システムに加入者を追加する機能を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="d67d867e1a2c0d3f72d5fed36d8199068542319f" translate="yes" xml:space="preserve">
          <source>Consider a process that receives data from a client process to be forwarded to a server on the network. The process is connected to the server through TCP/IP and does not get any acknowledge for each message it sends, but has to rely on the send time-out option to detect that the other end is unresponsive. Option &lt;code&gt;send_timeout&lt;/code&gt; can be used when connecting:</source>
          <target state="translated">ネットワーク上のサーバーに転送されるクライアントプロセスからデータを受信するプロセスを考えます。プロセスはTCP / IPを介してサーバーに接続され、送信するメッセージごとに確認応答を受け取りませんが、送信タイムアウトオプションに依存して、もう一方の端が応答しないことを検出する必要があります。オプション &lt;code&gt;send_timeout&lt;/code&gt; は、接続時に使用できます。</target>
        </trans-unit>
        <trans-unit id="9e2691c6fb672c519517e1290458846e6ef5963a" translate="yes" xml:space="preserve">
          <source>Consider a simple table of employees:</source>
          <target state="translated">簡単な社員表を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="f4c75d1817bfaec0e89222a276e69880bbb048f7" translate="yes" xml:space="preserve">
          <source>Consider how &lt;code&gt;Reversed_List&lt;/code&gt; is built. It starts as [], then successively the heads are taken off of the list to be reversed and added to the the &lt;code&gt;Reversed_List&lt;/code&gt;, as shown in the following:</source>
          <target state="translated">&lt;code&gt;Reversed_List&lt;/code&gt; の作成方法を検討してください。[]で始まり、次にヘッドがリストから削除されて反転され、 &lt;code&gt;Reversed_List&lt;/code&gt; に追加されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="6ab7f6a1bb41fb01d5cd20aaa578826fc00067f9" translate="yes" xml:space="preserve">
          <source>Consider that you have a module that handles the abstract data type &lt;code&gt;Person&lt;/code&gt;. You export the interface function &lt;code&gt;print_person/1&lt;/code&gt;, which uses the internal functions &lt;code&gt;print_name/1&lt;/code&gt;, &lt;code&gt;print_age/1&lt;/code&gt;, and &lt;code&gt;print_occupation/1&lt;/code&gt;.</source>
          <target state="translated">抽象データ型 &lt;code&gt;Person&lt;/code&gt; を処理するモジュールがあるとします。内部関数 &lt;code&gt;print_name/1&lt;/code&gt; 、 &lt;code&gt;print_age/1&lt;/code&gt; 、および &lt;code&gt;print_occupation/1&lt;/code&gt; を使用するインターフェース関数 &lt;code&gt;print_person/1&lt;/code&gt; をエクスポートします。</target>
        </trans-unit>
        <trans-unit id="e832f8403c198de61e833e7a480735f4053e43ff" translate="yes" xml:space="preserve">
          <source>Consider the example in section &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; in section Running Tests and Analysing Results, now extended with node information and intended to be executed by &lt;code&gt;Common Test&lt;/code&gt; Master:</source>
          <target state="translated">「テストの実行と結果の分析」の「テスト &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specifications&lt;/a&gt;&lt;/code&gt; 例を考えてみます。ノード情報が拡張され、 &lt;code&gt;Common Test&lt;/code&gt; Master によって実行されるようになっています。</target>
        </trans-unit>
        <trans-unit id="39f2b57b5281a62ac0370db4ff59b10198d6ae26" translate="yes" xml:space="preserve">
          <source>Consider the following pattern, which contains non-significant whitespace to make it more readable (assume option &lt;code&gt;extended&lt;/code&gt;) and to divide it into three parts for ease of discussion:</source>
          <target state="translated">次のパターンを考えてみます。重要ではない空白が含まれているため、読みやすく（オプションが &lt;code&gt;extended&lt;/code&gt; と想定）、説明を簡単にするために3つの部分に分割されています。</target>
        </trans-unit>
        <trans-unit id="46bc9d71b555a5f11b94b4eeb5c560673be71af6" translate="yes" xml:space="preserve">
          <source>Consider the following schema for a table of company employees. Each employee is identified by department number and name. The other table column stores the telephone number:</source>
          <target state="translated">会社の従業員のテーブルの次のスキーマを考えてみましょう。各従業員は、部署番号と名前で識別されます。他のテーブルの列には電話番号が格納されています。</target>
        </trans-unit>
        <trans-unit id="cb55da6206ee40073782daa342fe492d6d61166c" translate="yes" xml:space="preserve">
          <source>Consider the function &lt;code&gt;fact&lt;/code&gt;:</source>
          <target state="translated">関数の &lt;code&gt;fact&lt;/code&gt; 考えてみましょう：</target>
        </trans-unit>
        <trans-unit id="ef174d60bac701fec9e09c290d0d3b90c3cf6f8c" translate="yes" xml:space="preserve">
          <source>Consider the problem of matching a string in parentheses, allowing for unlimited nested parentheses. Without the use of recursion, the best that can be done is to use a pattern that matches up to some fixed depth of nesting. It is not possible to handle an arbitrary nesting depth.</source>
          <target state="translated">括弧内の文字列を無制限に入れ子にすることを可能にする、括弧内の文字列のマッチングの問題を考えてみましょう。再帰を使用しない場合、できる最善の方法は、ある程度固定された入れ子の深さまでマッチするパターンを使用することです。任意の入れ子の深さを扱うことはできません。</target>
        </trans-unit>
        <trans-unit id="270cf4c7cb812d80c2aeafefcba021db14b5c9b0" translate="yes" xml:space="preserve">
          <source>Consider the same regular expression, but with the subpattern explicitly named 'FOO':</source>
          <target state="translated">同じ正規表現を、サブパターンに明示的に 'FOO' という名前をつけて考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="11609cf73bda34f9c32c6a76c718328a0992ccb9" translate="yes" xml:space="preserve">
          <source>Consider, for example, a server application under test. The following functionality is to be tested:</source>
          <target state="translated">例えば、テスト対象のサーバー・アプリケーションを考えてみましょう。テスト対象とする機能は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="d91f897bb6a72091261f7b531a2eb9e3cb354e53" translate="yes" xml:space="preserve">
          <source>Consider, for example, the pattern \d+foo when applied to the following subject line:</source>
          <target state="translated">例えば、以下の件名に適用された場合のパターン †d+foo を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="fad23a16477e328da2bd8980efb7502b447bd6f6" translate="yes" xml:space="preserve">
          <source>Considers missing headers as generated files and adds them to the dependencies.</source>
          <target state="translated">不足しているヘッダを生成ファイルとして考慮し、依存関係に追加します。</target>
        </trans-unit>
        <trans-unit id="0ea7b95eab5fbd65070ee5e58e3789c399ad441a" translate="yes" xml:space="preserve">
          <source>Consistency</source>
          <target state="translated">Consistency</target>
        </trans-unit>
        <trans-unit id="2416d42d8d26094930f52fe782ef8c3d55df4f05" translate="yes" xml:space="preserve">
          <source>Consistency checking between MIBs</source>
          <target state="translated">MIB間の整合性チェック</target>
        </trans-unit>
        <trans-unit id="e0b3cee1e82b80ed946d9b0b76f2ee5162f5b5c9" translate="yes" xml:space="preserve">
          <source>Const ::= AtomConst | FunSpec | MFA</source>
          <target state="translated">Const ::=AtomConst | FunSpec | MFA</target>
        </trans-unit>
        <trans-unit id="5cfb1e6566be91ced8a40ddff4da8a615174e201" translate="yes" xml:space="preserve">
          <source>Constant ::= Call | Const</source>
          <target state="translated">定数 ::=コール|定数</target>
        </trans-unit>
        <trans-unit id="1bafe97bb00638010937d06443d9bc18d9b3329f" translate="yes" xml:space="preserve">
          <source>Constant ::= {&lt;code&gt;const&lt;/code&gt;, term()}</source>
          <target state="translated">定数:: = { &lt;code&gt;const&lt;/code&gt; 、term（）}</target>
        </trans-unit>
        <trans-unit id="221ceea8aad6c96db9f85e13a30e3778298ff5d5" translate="yes" xml:space="preserve">
          <source>Constant Erlang terms (also called &lt;strong&gt;literals&lt;/strong&gt;) are kept in constant pools; each loaded module has its own pool. The following function does not build the tuple every time it is called (only to have it discarded the next time the garbage collector was run), but the tuple is located in the module's constant pool:</source>
          <target state="translated">定数Erlang用語（&lt;strong&gt;リテラル&lt;/strong&gt;とも呼ばれ&lt;strong&gt;ます&lt;/strong&gt;）は定数プールに保持されます。ロードされた各モジュールには独自のプールがあります。次の関数は、呼び出されるたびにタプルを作成するわけではありませんが（次回のガベージコレクターの実行時に破棄するためだけです）、タプルはモジュールの定数プールにあります。</target>
        </trans-unit>
        <trans-unit id="18f2cafbf9301a8d594f4c411a820d1a97052f9d" translate="yes" xml:space="preserve">
          <source>Constant Pool</source>
          <target state="translated">一定のプール</target>
        </trans-unit>
        <trans-unit id="0f386d7e7881b32fa39cb7b62bdb15c0f3a4c0e1" translate="yes" xml:space="preserve">
          <source>Constants</source>
          <target state="translated">Constants</target>
        </trans-unit>
        <trans-unit id="e20076a802d4d6fed29c34dfbbd095f1a4303bb6" translate="yes" xml:space="preserve">
          <source>Constants (atoms, integer, floats, lists, tuples, records, binaries, and maps)</source>
          <target state="translated">定数(原子、整数、浮動小数点、リスト、タプル、レコード、バイナリ、マップ</target>
        </trans-unit>
        <trans-unit id="b9002264e3b8be0e5a771c041655682c3c04890d" translate="yes" xml:space="preserve">
          <source>Constants ::= Consts | Consts &lt;code&gt;:&lt;/code&gt; Type | RegExpr</source>
          <target state="translated">定数:: =定数| 定数 &lt;code&gt;:&lt;/code&gt; タイプ| RegExpr</target>
        </trans-unit>
        <trans-unit id="34f461426e164418878dde5aeb8fb12763014553" translate="yes" xml:space="preserve">
          <source>Constants can well replace term &lt;code&gt;node&lt;/code&gt; also, but this still has a declarative value, mainly when used in combination with &lt;code&gt;NodeRefs == all_nodes&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#types&quot;&gt;Types&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">定数は用語 &lt;code&gt;node&lt;/code&gt; を置き換えることもできますが、これは主に &lt;code&gt;NodeRefs == all_nodes&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;#types&quot;&gt;Types&lt;/a&gt;&lt;/code&gt; を参照）と組み合わせて使用​​される場合、宣言的な値を持ちます。</target>
        </trans-unit>
        <trans-unit id="21be61b96cffe6ca7b1165136773aecc5eaa2360" translate="yes" xml:space="preserve">
          <source>Constants make the test specification term &lt;code&gt;alias&lt;/code&gt;, in previous versions of &lt;code&gt;Common Test&lt;/code&gt;, redundant. This term is deprecated but remains supported in upcoming &lt;code&gt;Common Test&lt;/code&gt; releases. Replacing &lt;code&gt;alias&lt;/code&gt; terms with &lt;code&gt;define&lt;/code&gt; is strongly recommended though. An example of such replacement follows:</source>
          <target state="translated">定数は、以前のバージョンの &lt;code&gt;Common Test&lt;/code&gt; では、テスト仕様の &lt;code&gt;alias&lt;/code&gt; 冗長にします。この用語は非推奨ですが、今後の &lt;code&gt;Common Test&lt;/code&gt; リリースでは引き続きサポートされます。ただし、 &lt;code&gt;alias&lt;/code&gt; 用語を &lt;code&gt;define&lt;/code&gt; 置き換えることを強くお勧めします。このような置換の例を次に示します。</target>
        </trans-unit>
        <trans-unit id="8a5e37085481b760804cbc7b5cc4fd93c4883fa7" translate="yes" xml:space="preserve">
          <source>Construct a megaco_receive_handle record from user config</source>
          <target state="translated">ユーザ設定から megaco_receive_handle レコードを構築します。</target>
        </trans-unit>
        <trans-unit id="729a559814639c65233d1bc9939910a711214293" translate="yes" xml:space="preserve">
          <source>Construct a megaco_receive_handle record.</source>
          <target state="translated">megaco_receive_handleレコードを構築します。</target>
        </trans-unit>
        <trans-unit id="080d00f2a1b4ab0493444768788667c25f4a433b" translate="yes" xml:space="preserve">
          <source>Constructing a new map is done by letting an expression &lt;code&gt;K&lt;/code&gt; be associated with another expression &lt;code&gt;V&lt;/code&gt;:</source>
          <target state="translated">新しいマップを作成するには、式 &lt;code&gt;K&lt;/code&gt; を別の式 &lt;code&gt;V&lt;/code&gt; に関連付けます。</target>
        </trans-unit>
        <trans-unit id="5e0cb8439a00ff66a080d006db256cf4251bb30c" translate="yes" xml:space="preserve">
          <source>Constructing new instructions on the right side</source>
          <target state="translated">右側に新しい指示を構築する</target>
        </trans-unit>
        <trans-unit id="6f9ebd028f2b393c1489cd50c343fd65cf6291a5" translate="yes" xml:space="preserve">
          <source>Constructs a new binary by replacing the parts in &lt;code&gt;Subject&lt;/code&gt; matching &lt;code&gt;Pattern&lt;/code&gt; with the content of &lt;code&gt;Replacement&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; 一致 &lt;code&gt;Pattern&lt;/code&gt; パーツを &lt;code&gt;Replacement&lt;/code&gt; のコンテンツで置き換えることにより、新しいバイナリを構築します。</target>
        </trans-unit>
        <trans-unit id="e29f3b3c5fb6da2bad84eb33811c5a8e702e13db" translate="yes" xml:space="preserve">
          <source>Constructs an abstract list skeleton. The result has type &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;nil&lt;/code&gt;. If &lt;code&gt;List&lt;/code&gt; is a nonempty list &lt;code&gt;[E1, ..., En]&lt;/code&gt;, the result has type &lt;code&gt;list&lt;/code&gt; and represents either &quot;&lt;code&gt;[E1, ..., En]&lt;/code&gt;&quot;, if &lt;code&gt;Tail&lt;/code&gt; is &lt;code&gt;none&lt;/code&gt;, or otherwise &quot;&lt;code&gt;[E1, ..., En | Tail]&lt;/code&gt;&quot;. If &lt;code&gt;List&lt;/code&gt; is the empty list, &lt;code&gt;Tail&lt;/code&gt;&lt;strong&gt;must&lt;/strong&gt; be &lt;code&gt;none&lt;/code&gt;, and in that case the result has type &lt;code&gt;nil&lt;/code&gt; and represents &quot;&lt;code&gt;[]&lt;/code&gt;&quot; (see &lt;code&gt;&lt;a href=&quot;#nil-0&quot;&gt;nil/0&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">抽象リストスケルトンを構築します。結果の型は &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;nil&lt;/code&gt; です。場合は &lt;code&gt;List&lt;/code&gt; 空でないリストがある &lt;code&gt;[E1, ..., En]&lt;/code&gt; 、結果の型が持っている &lt;code&gt;list&lt;/code&gt; &quot;とのいずれかを表す &lt;code&gt;[E1, ..., En]&lt;/code&gt; 場合は、&quot; &lt;code&gt;Tail&lt;/code&gt; ありません &lt;code&gt;none&lt;/code&gt; 、あるいは「 &lt;code&gt;[E1, ..., En | Tail]&lt;/code&gt; &quot;。 &lt;code&gt;List&lt;/code&gt; が空のリストの場合、 &lt;code&gt;Tail&lt;/code&gt; &lt;strong&gt;は&lt;/strong&gt; &lt;code&gt;none&lt;/code&gt; である&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。その場合、結果の型は &lt;code&gt;nil&lt;/code&gt; で、「 &lt;code&gt;[]&lt;/code&gt; 」を表します（ &lt;code&gt;&lt;a href=&quot;#nil-0&quot;&gt;nil/0&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="0c1bd0529d6b40d4b62e4277842d1853cd4eb139" translate="yes" xml:space="preserve">
          <source>Consts ::= Constant | &lt;code&gt;[&lt;/code&gt;Constant&lt;code&gt;,&lt;/code&gt; ...&lt;code&gt;]&lt;/code&gt; | &lt;code&gt;{&lt;/code&gt;Constant&lt;code&gt;,&lt;/code&gt; ...&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">定数:: =定数| &lt;code&gt;[&lt;/code&gt; 定数 &lt;code&gt;,&lt;/code&gt; ... &lt;code&gt;]&lt;/code&gt; | &lt;code&gt;{&lt;/code&gt; 定数 &lt;code&gt;,&lt;/code&gt; ... &lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="39992774518c9fff46f13d958f364c2a177e12dd" translate="yes" xml:space="preserve">
          <source>Consumed by &lt;code&gt;&lt;a href=&quot;#next-1&quot;&gt;maps:next/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#filter-2&quot;&gt;maps:filter/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#fold-3&quot;&gt;maps:fold/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#map-2&quot;&gt;maps:map/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">消費 &lt;code&gt;&lt;a href=&quot;#next-1&quot;&gt;maps:next/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#filter-2&quot;&gt;maps:filter/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#fold-3&quot;&gt;maps:fold/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#map-2&quot;&gt;maps:map/2&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b920c3a03e725c9d61f35dce2d6a6eca4e7f8c8f" translate="yes" xml:space="preserve">
          <source>Consuming a URI containing percent-encoded triplets can take many steps. The following example shows how to handle an input URI that is not normalized and contains multiple percent-encoded triplets. First, the input &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_string&quot;&gt;uri_string()&lt;/a&gt;&lt;/code&gt; is to be parsed into a &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt;. The parsing only splits the URI into its components without doing any decoding:</source>
          <target state="translated">パーセントエンコードされたトリプレットを含むURIを使用すると、多くの手順を実行できます。次の例は、正規化されておらず、複数のパーセントエンコードされたトリプレットを含む入力URIを処理する方法を示しています。まず、入力 &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_string&quot;&gt;uri_string()&lt;/a&gt;&lt;/code&gt; が解析されて &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; になります。解析では、デコードを行わずにURIをコンポーネントに分割するだけです。</target>
        </trans-unit>
        <trans-unit id="0e2fed826e8d11841c46e6f1e7451ec0fc8a31bc" translate="yes" xml:space="preserve">
          <source>Contacts the &lt;code&gt;epmd&lt;/code&gt; listening on the specified TCP port number (default 4369). This can also be set using environment variable &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt;; see section &lt;code&gt;&lt;a href=&quot;#environment_variables&quot;&gt;Environment Variables&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定されたTCPポート番号（デフォルトは4369）で &lt;code&gt;epmd&lt;/code&gt; ているepmdに接続します。これは、環境変数 &lt;code&gt;ERL_EPMD_PORT&lt;/code&gt; を使用して設定することもできます。セクション &lt;code&gt;&lt;a href=&quot;#environment_variables&quot;&gt;Environment Variables&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="6d418a206c8b5fc2a7fb5cc7d0c97c6096d675e8" translate="yes" xml:space="preserve">
          <source>Contains a list of additional library directories that the code server searches for applications and adds to the code path; see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">コードサーバーがアプリケーションを検索し、コードパスに追加する追加のライブラリディレクトリのリストが含まれます。 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="20db3f99344de7dc045e4e80f4e3b33db4b93cd7" translate="yes" xml:space="preserve">
          <source>Contains a menu item for each open Debugger window. Selecting one of the items raises the corresponding window.</source>
          <target state="translated">開いている各デバッガ・ウィンドウのメニュー項目を表示します。いずれかの項目を選択すると、対応するウィンドウが表示されます。</target>
        </trans-unit>
        <trans-unit id="800cc7c747ed734c3bd2436ca1facd3a4a3339c0" translate="yes" xml:space="preserve">
          <source>Contains the function arguments passed to the NIF.</source>
          <target state="translated">NIFに渡された関数の引数を含みます。</target>
        </trans-unit>
        <trans-unit id="8a6cf6761af3cc1e8f4d362dab65afa469817b97" translate="yes" xml:space="preserve">
          <source>Content = [Element]</source>
          <target state="translated">内容=[要素]</target>
        </trans-unit>
        <trans-unit id="cc11b3a28fa30ae6d3d3ad1438824cbd5224ba5c" translate="yes" xml:space="preserve">
          <source>Context</source>
          <target state="translated">Context</target>
        </trans-unit>
        <trans-unit id="8c8c410b4730be3fa7570f8567cda07ab85717c1" translate="yes" xml:space="preserve">
          <source>Contexts with an internal state that should not be manipulated but passed between function calls.</source>
          <target state="translated">操作されるべきではなく、関数呼び出しの間に渡されるべき内部状態を持つコンテキスト。</target>
        </trans-unit>
        <trans-unit id="4bc28ecdc9f36671383cecd55edcb0d089e248e6" translate="yes" xml:space="preserve">
          <source>Contextual errors - If API functions are used in the wrong context, the &lt;code&gt;Reason&lt;/code&gt; in the error tuple will be a descriptive atom. For instance if you try to call the function &lt;code&gt;last/[1,2]&lt;/code&gt; without first calling &lt;code&gt;select_count/[2,3]&lt;/code&gt; to associate a result set with the connection. If the ODBC-driver does not support some functions, or if you disabled some functionality for a connection and then try to use it.</source>
          <target state="translated">コンテキストエラー-API関数が間違ったコンテキストで使用された場合、エラータプルの &lt;code&gt;Reason&lt;/code&gt; は説明的なアトムになります。たとえば、最初に &lt;code&gt;select_count/[2,3]&lt;/code&gt; を呼び出さずに関数 &lt;code&gt;last/[1,2]&lt;/code&gt; を呼び出そうとして、結果セットを接続に関連付けたとします。ODBCドライバーが一部の機能をサポートしていない場合、または接続の一部の機能を無効にしてから使用しようとした場合。</target>
        </trans-unit>
        <trans-unit id="070764532b4de17830b5b69712f55feaff04ff9a" translate="yes" xml:space="preserve">
          <source>Continuation = (&lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#type-context&quot;&gt;context()&lt;/a&gt;&lt;/code&gt;) -&amp;gt; &lt;code&gt;&lt;a href=&quot;prettypr#type-document&quot;&gt;prettypr:document()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">継続=（ &lt;code&gt;&lt;a href=&quot;#type-syntaxTree&quot;&gt;syntaxTree()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#type-context&quot;&gt;context()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt; &lt;code&gt;&lt;a href=&quot;prettypr#type-document&quot;&gt;prettypr:document()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="e03e8eebfab40a4fd9be2718ad485476abef0bd3" translate="yes" xml:space="preserve">
          <source>Continuation returned by &lt;code&gt;open/1,2&lt;/code&gt; or &lt;code&gt;chunk/1,2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;open/1,2&lt;/code&gt; または &lt;code&gt;chunk/1,2&lt;/code&gt; によって返される継続。</target>
        </trans-unit>
        <trans-unit id="091fbe1ad605666c6170536967f53980c001530f" translate="yes" xml:space="preserve">
          <source>Continue the SSL/TLS handshake possiby with new, additional or changed options.</source>
          <target state="translated">新しいオプション、追加オプション、または変更されたオプションでSSL/TLSハンドシェイクを続行します。</target>
        </trans-unit>
        <trans-unit id="c36cec59175b4924eb232c04762cff854c28eb3b" translate="yes" xml:space="preserve">
          <source>Continue the TLS handshake possiby with new, additional or changed options.</source>
          <target state="translated">新しいオプション、追加オプション、または変更されたオプションを使用して、TLSハンドシェイクを続行します。</target>
        </trans-unit>
        <trans-unit id="f105f8dee43358db799a59af5e9759b95ef60124" translate="yes" xml:space="preserve">
          <source>Continue the traversal and accumulate &lt;code&gt;Val&lt;/code&gt;. The following function is supplied to collect all objects of a table in a list:</source>
          <target state="translated">走査を続け、 &lt;code&gt;Val&lt;/code&gt; を蓄積します。次の関数は、リスト内のテーブルのすべてのオブジェクトを収集するために提供されています。</target>
        </trans-unit>
        <trans-unit id="fec4067a3f18b3c51fe634a426bc57ca6d7ece02" translate="yes" xml:space="preserve">
          <source>Continue to perform the traversal. For example, the following function can be used to print the contents of a table:</source>
          <target state="translated">引き続き、トラバーサルを実行します。例えば、次のような関数を使用して、表の内容を印刷することができます。</target>
        </trans-unit>
        <trans-unit id="c63ee0550edcb4c377c408f4d3f3eb757e2e5c77" translate="yes" xml:space="preserve">
          <source>Continues a match started with &lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt;. The next chunk of the size specified in the initial &lt;code&gt;match/3&lt;/code&gt; call is returned together with a new &lt;code&gt;Continuation&lt;/code&gt;, which can be used in subsequent calls to this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match-3&quot;&gt;match/3&lt;/a&gt;&lt;/code&gt; で始まるマッチを続行します。最初の &lt;code&gt;match/3&lt;/code&gt; 呼び出しで指定されたサイズの次のチャンクは、新しい &lt;code&gt;Continuation&lt;/code&gt; とともに返されます。これは、この関数の後続の呼び出しで使用できます。</target>
        </trans-unit>
        <trans-unit id="221675e363c83fa1b19e54f0bc32768b67b07030" translate="yes" xml:space="preserve">
          <source>Continues a match started with &lt;code&gt;&lt;a href=&quot;#match_object-3&quot;&gt;match_object/3&lt;/a&gt;&lt;/code&gt;. The next chunk of the size specified in the initial &lt;code&gt;match_object/3&lt;/code&gt; call is returned together with a new &lt;code&gt;Continuation&lt;/code&gt;, which can be used in subsequent calls to this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#match_object-3&quot;&gt;match_object/3&lt;/a&gt;&lt;/code&gt; で始まるマッチを続行します。最初の &lt;code&gt;match_object/3&lt;/code&gt; 呼び出しで指定されたサイズの次のチャンクは、新しい &lt;code&gt;Continuation&lt;/code&gt; とともに返されます。これは、この関数の後続の呼び出しで使用できます。</target>
        </trans-unit>
        <trans-unit id="73c4a5596193700b0e1ff38275cce559943a7265" translate="yes" xml:space="preserve">
          <source>Continues a match started with &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt;. The next chunk of the size specified in the initial &lt;code&gt;select/3&lt;/code&gt; call is returned together with a new &lt;code&gt;Continuation&lt;/code&gt;, which can be used in subsequent calls to this function.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; で始まるマッチを続行します。最初の &lt;code&gt;select/3&lt;/code&gt; 呼び出しで指定されたサイズの次のチャンクが新しい &lt;code&gt;Continuation&lt;/code&gt; とともに返されます。これは、この関数への後続の呼び出しで使用できます。</target>
        </trans-unit>
        <trans-unit id="e0fa645328109d154f1b0ff83c174bc21403d328" translate="yes" xml:space="preserve">
          <source>Continues a match started with &lt;code&gt;&lt;a href=&quot;#select_reverse-3&quot;&gt; select_reverse/3&lt;/a&gt;&lt;/code&gt;. For tables of type &lt;code&gt;ordered_set&lt;/code&gt;, the traversal of the table continues to objects with keys earlier in the Erlang term order. The returned list also contains objects with keys in reverse order. For all other table types, the behavior is exactly that of &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select_reverse-3&quot;&gt; select_reverse/3&lt;/a&gt;&lt;/code&gt; で開始された一致を続行します。タイプ &lt;code&gt;ordered_set&lt;/code&gt; のテーブルの場合、テーブルのトラバーサルは、Erlang用語の順序の前のキーを持つオブジェクトに続きます。返されるリストには、逆の順序でキーを持つオブジェクトも含まれています。他のすべてのテーブルタイプの場合、動作は &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; の動作とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="058b95d57ca8bcafbb27b235c4372981f494e185" translate="yes" xml:space="preserve">
          <source>Continues a match started with &lt;code&gt;&lt;a href=&quot;#select_reverse-3&quot;&gt;select_reverse/3&lt;/a&gt;&lt;/code&gt;. For tables of type &lt;code&gt;ordered_set&lt;/code&gt;, the traversal of the table continues to objects with keys earlier in the Erlang term order. The returned list also contains objects with keys in reverse order. For all other table types, the behavior is exactly that of &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#select_reverse-3&quot;&gt;select_reverse/3&lt;/a&gt;&lt;/code&gt; で始まるマッチを続行します。タイプ &lt;code&gt;ordered_set&lt;/code&gt; のテーブルの場合、テーブルのトラバーサルは、Erlang用語の順序の早い方のキーを持つオブジェクトに続きます。返されるリストには、逆の順序でキーを持つオブジェクトも含まれます。他のすべてのテーブルタイプの場合、動作は &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; の動作とまったく同じです。</target>
        </trans-unit>
        <trans-unit id="8990bdea87bba1599cb1fdcf1951a0e63de9aab9" translate="yes" xml:space="preserve">
          <source>Continues computing the adler32 checksum by combining the previous checksum, &lt;code&gt;OldAdler&lt;/code&gt;, with the checksum of &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="translated">以前のチェックサム &lt;code&gt;OldAdler&lt;/code&gt; と &lt;code&gt;Data&lt;/code&gt; のチェックサムを組み合わせて、adler32チェックサムの計算を続行します。</target>
        </trans-unit>
        <trans-unit id="4996c9d2c0f3507c722df9afeb51e0b92b87a37f" translate="yes" xml:space="preserve">
          <source>Continues computing the crc32 checksum by combining the previous checksum, &lt;code&gt;OldCrc&lt;/code&gt;, with the checksum of &lt;code&gt;Data&lt;/code&gt;.</source>
          <target state="translated">以前のチェックサム &lt;code&gt;OldCrc&lt;/code&gt; を &lt;code&gt;Data&lt;/code&gt; のチェックサムと組み合わせて、crc32チェックサムの計算を続行します。</target>
        </trans-unit>
        <trans-unit id="da1ef0dedc7faef987b7a5a3deb0c768440cd306" translate="yes" xml:space="preserve">
          <source>Continues the execution until the current function returns.</source>
          <target state="translated">現在の関数が戻るまで実行を継続します。</target>
        </trans-unit>
        <trans-unit id="b9a0121ae80323caf5e3871d3094c46759575a34" translate="yes" xml:space="preserve">
          <source>Continues the execution.</source>
          <target state="translated">実行を継続します。</target>
        </trans-unit>
        <trans-unit id="60ebcff772231040684a03eaac59ec0ef5b0efaf" translate="yes" xml:space="preserve">
          <source>Continuing the dialogue with the Erlang shell produces the following:</source>
          <target state="translated">Erlangシェルとの対話を続けると以下のようになります。</target>
        </trans-unit>
        <trans-unit id="550a49346d51f6c69177d23de6582bd904a644a5" translate="yes" xml:space="preserve">
          <source>Continuing the example from the previous section, the three nodes are started, specifying the system configuration file:</source>
          <target state="translated">前節の例に引き続き、システム構成ファイルを指定して3つのノードを起動します。</target>
        </trans-unit>
        <trans-unit id="154943d578744b27e5c0e12560a0ba0b4d4c5ec5" translate="yes" xml:space="preserve">
          <source>Contrary to the fact with &quot;handwritten&quot; match specifications, the &lt;code&gt;is_record&lt;/code&gt; guard works as in ordinary Erlang code.</source>
          <target state="translated">「手書き」の一致指定の場合とは &lt;code&gt;is_record&lt;/code&gt; 的に、is_recordガードは通常のErlangコードと同様に機能します。</target>
        </trans-unit>
        <trans-unit id="ea1d3df298ca84104dbf8b2f6f916c02f6f77c6e" translate="yes" xml:space="preserve">
          <source>Control</source>
          <target state="translated">Control</target>
        </trans-unit>
        <trans-unit id="046e85c2c64b10ec2f7a5a0972a793a917f581c6" translate="yes" xml:space="preserve">
          <source>Control A to control Z</source>
          <target state="translated">コントロールAでZを制御</target>
        </trans-unit>
        <trans-unit id="bce115b0c925643288d6d66089149032ada8c603" translate="yes" xml:space="preserve">
          <source>Control characters</source>
          <target state="translated">制御文字</target>
        </trans-unit>
        <trans-unit id="1bd11088990a2634cb50a4cfec1f5eac588c67e2" translate="yes" xml:space="preserve">
          <source>Control sequences, which have the general format &lt;code&gt;~*FMC&lt;/code&gt;, where:</source>
          <target state="translated">一般的なフォーマット &lt;code&gt;~*FMC&lt;/code&gt; を持つ制御シーケンス。ここで、</target>
        </trans-unit>
        <trans-unit id="ffca644d69cdda7bca9ab35919dc344a16cd88cb" translate="yes" xml:space="preserve">
          <source>Control the timer that a driver can use. The timer has the emulator call the &lt;code&gt;&lt;a href=&quot;driver_entry#timeout&quot;&gt; timeout&lt;/a&gt;&lt;/code&gt; entry function after a specified time. Only one timer is available for each driver instance.</source>
          <target state="translated">ドライバーが使用できるタイマーを制御します。タイマーは、指定された時間の後にエミュレーターに &lt;code&gt;&lt;a href=&quot;driver_entry#timeout&quot;&gt; timeout&lt;/a&gt;&lt;/code&gt; 入力関数を呼び出させます。各ドライバーインスタンスで使用できるタイマーは1つだけです。</target>
        </trans-unit>
        <trans-unit id="d30fd30f66df6d80482e65684b05e8c7c4bc0bb4" translate="yes" xml:space="preserve">
          <source>Control the timer that a driver can use. The timer has the emulator call the &lt;code&gt;&lt;a href=&quot;driver_entry#timeout&quot;&gt;timeout&lt;/a&gt;&lt;/code&gt; entry function after a specified time. Only one timer is available for each driver instance.</source>
          <target state="translated">ドライバーが使用できるタイマーを制御します。タイマーは、エミュレーターに、指定された時間の経過後に &lt;code&gt;&lt;a href=&quot;driver_entry#timeout&quot;&gt;timeout&lt;/a&gt;&lt;/code&gt; エントリ関数を呼び出します。各ドライバーインスタンスで使用できるタイマーは1つだけです。</target>
        </trans-unit>
        <trans-unit id="eeaa2647da0732597913d53570b365738ee8b070" translate="yes" xml:space="preserve">
          <source>Controlling Bursts of Log Requests</source>
          <target state="translated">ログ要求のバーストの制御</target>
        </trans-unit>
        <trans-unit id="5f8185b4b9e44a4d0b11e748fbfb331ea2dacd6c" translate="yes" xml:space="preserve">
          <source>Controlling the Discrepancies Reported by Dialyzer</source>
          <target state="translated">ダイアライザーで報告された不一致の制御</target>
        </trans-unit>
        <trans-unit id="3304568e9e0e1543499ce0803d55dd51136c2a1c" translate="yes" xml:space="preserve">
          <source>ControllingEntity :: port() | pid()}</source>
          <target state="translated">ControllingEntity ::port()| pid()}</target>
        </trans-unit>
        <trans-unit id="1d39ae8d696d2ab79619e780f95f15abc4711971" translate="yes" xml:space="preserve">
          <source>Controls how many reports &lt;code&gt;rb_server&lt;/code&gt; is to read at startup. This option is useful, as the directory can contain a large amount of reports. If this option is specified, the &lt;code&gt;MaxNoOfReports&lt;/code&gt; latest reports are read. Default is &lt;code&gt;all&lt;/code&gt;.</source>
          <target state="translated">起動時に &lt;code&gt;rb_server&lt;/code&gt; が読み取るレポートの数を制御します。ディレクトリには大量のレポートが含まれる可能性があるため、このオプションは便利です。このオプションを指定すると、 &lt;code&gt;MaxNoOfReports&lt;/code&gt; の最新レポートが読み込まれます。デフォルトは &lt;code&gt;all&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="1d569f69f912af29157becf380c027c33c514e56" translate="yes" xml:space="preserve">
          <source>Controls if and how schedulers are bound to logical processors.</source>
          <target state="translated">スケジューラが論理プロセッサにバインドされるかどうか、どのようにバインドされるかを制御します。</target>
        </trans-unit>
        <trans-unit id="c4c206d13c1cf477fffe7e0fbace2e00e092dbe0" translate="yes" xml:space="preserve">
          <source>Controls the level of debug printouts. Default is &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">デバッグ出力のレベルを制御します。デフォルトは &lt;code&gt;none&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f467f08eaae850725a566433bcae52e439e5302a" translate="yes" xml:space="preserve">
          <source>Controls the number of log files written before older files are reused. Defaults to 5, minimum is 2, maximum is 1000.</source>
          <target state="translated">古いファイルが再利用される前に書き込まれるログファイルの数を制御します。デフォルトは5、最小値は2、最大値は1000です。</target>
        </trans-unit>
        <trans-unit id="2caaa1a4bcd099e84cf653002bba67518b149f50" translate="yes" xml:space="preserve">
          <source>Controls what kind of reports &lt;code&gt;rb_server&lt;/code&gt; is to read at startup. &lt;code&gt;ReportType&lt;/code&gt; is a supported type, &lt;code&gt;all&lt;/code&gt;, or a list of supported types. Default is &lt;code&gt;all&lt;/code&gt;.</source>
          <target state="translated">起動時に &lt;code&gt;rb_server&lt;/code&gt; が読み取るレポートの種類を制御します。 &lt;code&gt;ReportType&lt;/code&gt; は、サポートされているタイプ、 &lt;code&gt;all&lt;/code&gt; 、またはサポートされているタイプのリストです。デフォルトは &lt;code&gt;all&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="78f7ae24acbeb3e89d74388b0c043f4636b4e000" translate="yes" xml:space="preserve">
          <source>Controls what types of files to be compressed. Defaults to &lt;code&gt;all&lt;/code&gt;. The following values of &lt;code&gt;What&lt;/code&gt; are allowed:</source>
          <target state="translated">圧縮するファイルのタイプを制御します。デフォルトは &lt;code&gt;all&lt;/code&gt; です。許可される &lt;code&gt;What&lt;/code&gt; の以下の値：</target>
        </trans-unit>
        <trans-unit id="3fcba1873e0dd51f27a814aa230b6082f568ea52" translate="yes" xml:space="preserve">
          <source>Controls what types of files to be uncompressed. Defaults to &lt;code&gt;[&quot;.Z&quot;, &quot;.zip&quot;, &quot;.zoo&quot;, &quot;.arc&quot;, &quot;.lzh&quot;, &quot;.arj&quot;]&lt;/code&gt;. The following values of &lt;code&gt;What&lt;/code&gt; are allowed:</source>
          <target state="translated">圧縮解除するファイルのタイプを制御します。デフォルトは &lt;code&gt;[&quot;.Z&quot;, &quot;.zip&quot;, &quot;.zoo&quot;, &quot;.arc&quot;, &quot;.lzh&quot;, &quot;.arj&quot;]&lt;/code&gt; です。許可される &lt;code&gt;What&lt;/code&gt; の以下の値：</target>
        </trans-unit>
        <trans-unit id="72d4d021ee27a02ab04e242eb179eea92a205773" translate="yes" xml:space="preserve">
          <source>Controls whether to behave as a namespace conformant XML parser, 'false' (default) to not otherwise 'true'.</source>
          <target state="translated">名前空間に準拠したXMLパーサーとして動作するかどうかを制御します。</target>
        </trans-unit>
        <trans-unit id="014f53bfb51da0f31d7ad874005aae30ff2fdae7" translate="yes" xml:space="preserve">
          <source>Controls whether to process as a validating XML parser: 'off' (default) no validation, or validation 'dtd' by DTD or 'schema' by XML Schema. 'false' and 'true' options are obsolete (i.e. they may be removed in a future release), if used 'false' equals 'off' and 'true' equals 'dtd'.</source>
          <target state="translated">バリデーションを行う XML パーサーとして処理するかどうかを制御します。off' (デフォルト)バリデーションを行わないか、DTD による 'dtd' バリデーション、XML スキーマによる 'schema' バリデーションを行います。false' と 'true' オプションは廃止されました (将来のリリースで削除される可能性があります)。</target>
        </trans-unit>
        <trans-unit id="a3bb7bd3cd29a5c3a6c03c82349c51e51bf95ff6" translate="yes" xml:space="preserve">
          <source>Controls which features to reject. This is mostly useful for the server as it can restrict the use of certain TFTP options or read/write access.</source>
          <target state="translated">どの機能を拒否するかを制御します。これは、特定の TFTP オプションの使用や読み書きアクセスを制限することができるので、サーバにとっては主に便利です。</target>
        </trans-unit>
        <trans-unit id="1c4be7e6e4f92b537985118ffae61f13674d390a" translate="yes" xml:space="preserve">
          <source>Convenience functions</source>
          <target state="translated">便利な機能</target>
        </trans-unit>
        <trans-unit id="5c1d5aa10fc30b8ff720235b29bc6f6835f69529" translate="yes" xml:space="preserve">
          <source>Convenience functions for microstate accounting</source>
          <target state="translated">微小国家会計のための便利機能</target>
        </trans-unit>
        <trans-unit id="8ce25c173c335f61eac029ac12bf1102e9bcacfb" translate="yes" xml:space="preserve">
          <source>Convenience functions for some common name lookup functions.</source>
          <target state="translated">いくつかの一般的な名前の検索機能の便利な機能。</target>
        </trans-unit>
        <trans-unit id="697e08358094ab2a49005b63006ea40b28418bea" translate="yes" xml:space="preserve">
          <source>Convenient to be used from the command line (erl -s et_viewer).</source>
          <target state="translated">コマンドラインから使えるのが便利(erl -s et_viewer)。</target>
        </trans-unit>
        <trans-unit id="82972fa0f197d3cff3b3cec5ebfaa62f25d5f57a" translate="yes" xml:space="preserve">
          <source>Conventions Used in This Document</source>
          <target state="translated">このドキュメントで使用されている規約</target>
        </trans-unit>
        <trans-unit id="8d2687667dee08113bf89108622393aba24f20fa" translate="yes" xml:space="preserve">
          <source>Conversion of data between C and Erlang formats</source>
          <target state="translated">CとErlangフォーマット間のデータ変換</target>
        </trans-unit>
        <trans-unit id="a7637a6e621da70105c089476553bfc5d74a542a" translate="yes" xml:space="preserve">
          <source>Convert &lt;code&gt;Raw Trace Data&lt;/code&gt; into an appropriate &lt;code&gt;Event&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Raw Trace Data&lt;/code&gt; を適切な &lt;code&gt;Event&lt;/code&gt; 変換する</target>
        </trans-unit>
        <trans-unit id="9fdde520c3a3d433579d6c33b3e490f3ec80c4b5" translate="yes" xml:space="preserve">
          <source>Convert a &lt;code&gt;RefURI&lt;/code&gt; reference that might be relative to a given base URI into the parsed components of the reference's target, which can then be recomposed to form the target URI.</source>
          <target state="translated">特定のベースURIに関連している可能性のある &lt;code&gt;RefURI&lt;/code&gt; 参照を、参照のターゲットの解析されたコンポーネントに変換します。その後、再構成してターゲットURIを形成できます。</target>
        </trans-unit>
        <trans-unit id="99a05219f8c5c7b0532f80113a0dad96f501d271" translate="yes" xml:space="preserve">
          <source>Convert a log message on report form to &lt;code&gt;{Format, Args}&lt;/code&gt;. This is the default report callback used by &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt; logger_formatter(3)&lt;/a&gt;&lt;/code&gt; when no custom report callback is found. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide for information about report callbacks and valid forms of log messages.</source>
          <target state="translated">レポートフォームのログメッセージを &lt;code&gt;{Format, Args}&lt;/code&gt; 変換します。これは、カスタムレポートコールバックが見つからない場合に &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt; logger_formatter(3)&lt;/a&gt;&lt;/code&gt; によって使用されるデフォルトのレポートコールバックです。レポートのコールバックと有効な形式のログメッセージについては、 『カーネルユーザーズガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 」のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="1e08b6dbc72e0b9830476f0a00a81ef9d8b25c7b" translate="yes" xml:space="preserve">
          <source>Convert a log message on report form to &lt;code&gt;{Format, Args}&lt;/code&gt;. This is the default report callback used by &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter&lt;/a&gt;&lt;/code&gt; when no custom report callback is found. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide for information about report callbacks and valid forms of log messages.</source>
          <target state="translated">レポートフォームのログメッセージを &lt;code&gt;{Format, Args}&lt;/code&gt; 変換します。これは、カスタムレポートコールバックが見つからない場合に &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter&lt;/a&gt;&lt;/code&gt; によって使用されるデフォルトのレポートコールバックです。レポートのコールバックとログメッセージの有効な形式については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="0f555788b20b5f7be0fc65347cd28b0e5580c6e4" translate="yes" xml:space="preserve">
          <source>Convert a token tag to a string</source>
          <target state="translated">トークンタグを文字列に変換する</target>
        </trans-unit>
        <trans-unit id="044a64115586f4d31170517f8714ccd4f18c3c87" translate="yes" xml:space="preserve">
          <source>Convert an IPv4 address to an IPv4-mapped IPv6 address or the reverse. When converting from an IPv6 address all but the 2 low words are ignored so this function also works on some other types of addresses than IPv4-mapped.</source>
          <target state="translated">IPv4アドレスをIPv4マップのIPv6アドレスに変換したり、逆に変換したりします。IPv6アドレスから変換する場合、2つのローワード以外は無視されるので、この機能はIPv4マッピングされていないアドレスでも動作します。</target>
        </trans-unit>
        <trans-unit id="85648e18f68f2ea31b9073f5d647f354e9027d9e" translate="yes" xml:space="preserve">
          <source>Convert binary representation, of an integer, to an Erlang integer.</source>
          <target state="translated">整数のバイナリ表現をErlang整数に変換します。</target>
        </trans-unit>
        <trans-unit id="19f5c5b5e2440fd1432aaad4d1dccfb67de8582b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;&lt;a href=&quot;#type-erl_cipher_suite&quot;&gt;erl_cipher_suite()&lt;/a&gt;&lt;/code&gt; to OpenSSL name string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-erl_cipher_suite&quot;&gt;erl_cipher_suite()&lt;/a&gt;&lt;/code&gt; をOpenSSL名文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="00d1f5a857dbd91b22c2e606f74ae73b3d9ca632" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;&lt;a href=&quot;#type-erl_cipher_suite&quot;&gt;erl_cipher_suite()&lt;/a&gt;&lt;/code&gt; to RFC name string.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-erl_cipher_suite&quot;&gt;erl_cipher_suite()&lt;/a&gt;&lt;/code&gt; をRFC名文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="12bd127af4ad25815294c36888f6e3b3cb5271a2" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;Key&lt;/code&gt; to an OBJECT IDENTIFIER.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; をOBJECT IDENTIFIERに変換します。</target>
        </trans-unit>
        <trans-unit id="64acc9e991da9583e9d8988fd1ae350af1f7d94a" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;Path&lt;/code&gt; to a form accepted by the command shell and native applications on the current platform. On Windows, forward slashes are converted to backward slashes. On all platforms, the name is normalized as done by &lt;code&gt;&lt;a href=&quot;#join-1&quot;&gt;join/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Path&lt;/code&gt; を、コマンドシェルおよび現在のプラットフォームのネイティブアプリケーションで受け入れられる形式に変換します。Windowsでは、スラッシュはバックスラッシュに変換されます。すべてのプラットフォームで、名前は &lt;code&gt;&lt;a href=&quot;#join-1&quot;&gt;join/1&lt;/a&gt;&lt;/code&gt; によって行われるように正規化されます。</target>
        </trans-unit>
        <trans-unit id="ea3719a7fe934bac8263241169003d73b077c876" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;String&lt;/code&gt; to a case-agnostic comparable string. Function &lt;code&gt;casefold/1&lt;/code&gt; is preferred over &lt;code&gt;lowercase/1&lt;/code&gt; when two strings are to be compared for equality. See also &lt;code&gt;&lt;a href=&quot;#equal-4&quot;&gt;equal/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; を大文字小文字を区別しない比較可能な文字列に変換します。関数 &lt;code&gt;casefold/1&lt;/code&gt; より好ましい &lt;code&gt;lowercase/1&lt;/code&gt; 2つの文字列が等しいかどうかを比較する場合。 &lt;code&gt;&lt;a href=&quot;#equal-4&quot;&gt;equal/4&lt;/a&gt;&lt;/code&gt; も参照してください。</target>
        </trans-unit>
        <trans-unit id="83e6c836c0fe9bf44d0723384551fd211532d6a7" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;String&lt;/code&gt; to a list of grapheme clusters.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; を書記素クラスタのリストに変換します。</target>
        </trans-unit>
        <trans-unit id="d925e32023288904ae94a121d00ca3faaf1f0cb6" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;String&lt;/code&gt; to lowercase.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; を小文字に変換します。</target>
        </trans-unit>
        <trans-unit id="64e823d13feb3b6235edac36b29ebd1b351753fe" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;String&lt;/code&gt; to titlecase.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; をタイトルケースに変換します。</target>
        </trans-unit>
        <trans-unit id="40712f79e161abafd2f0cece5db1aa7f56d35ac2" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;String&lt;/code&gt; to uppercase.</source>
          <target state="translated">&lt;code&gt;String&lt;/code&gt; を大文字に変換します。</target>
        </trans-unit>
        <trans-unit id="814be0b57ea4927c8c3826c53afee5e64f538f9e" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;Subject&lt;/code&gt; to a list of &lt;code&gt;byte()&lt;/code&gt;s, each representing the value of one byte. &lt;code&gt;part()&lt;/code&gt; denotes which part of the &lt;code&gt;binary()&lt;/code&gt; to convert.</source>
          <target state="translated">&lt;code&gt;Subject&lt;/code&gt; を、それぞれが1バイトの値を表す &lt;code&gt;byte()&lt;/code&gt; のリストに変換します。 &lt;code&gt;part()&lt;/code&gt; は、 &lt;code&gt;binary()&lt;/code&gt; のどの部分を変換するかを示します。</target>
        </trans-unit>
        <trans-unit id="84357bb46ef942f3222928aff9a548ada141350b" translate="yes" xml:space="preserve">
          <source>Converts &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;Y&lt;/code&gt;, &lt;code&gt;Z&lt;/code&gt; to pid &lt;code&gt;&amp;lt;X.Y.Z&amp;gt;&lt;/code&gt;. This function is only to be used when debugging.</source>
          <target state="translated">&lt;code&gt;X&lt;/code&gt; 、 &lt;code&gt;Y&lt;/code&gt; 、 &lt;code&gt;Z&lt;/code&gt; をpid &lt;code&gt;&amp;lt;X.Y.Z&amp;gt;&lt;/code&gt; 変換します。この関数は、デバッグ時にのみ使用されます。</target>
        </trans-unit>
        <trans-unit id="e870de6673fb58678c90b76e38c40fdef81ef7e8" translate="yes" xml:space="preserve">
          <source>Converts Universal Time Coordinated (UTC) date and time to local date and time in the form &lt;code&gt;{{Year, Month, Day}, {Hour, Minute, Second}}&lt;/code&gt; if supported by the underlying OS. Otherwise no conversion is done, and &lt;code&gt;Universaltime&lt;/code&gt; is returned. Example:</source>
          <target state="translated">基になるOSでサポートされている場合 &lt;code&gt;{{Year, Month, Day}, {Hour, Minute, Second}}&lt;/code&gt; 協定世界時（UTC）の日付と時刻を、{{Year、Month、Day}、{Hour、Minute、Second}}の形式でローカルの日付と時刻に変換します。それ以外の場合、変換は行われず、 &lt;code&gt;Universaltime&lt;/code&gt; が返されます。例：</target>
        </trans-unit>
        <trans-unit id="dfd120e608567bf8e0e047df635cd48870a704de" translate="yes" xml:space="preserve">
          <source>Converts a DateAndTime list to a list of possible universal time(s). The universal time value on the same format as defined in calendar(3).</source>
          <target state="translated">DateAndTime のリストを、可能な普遍的な時刻のリストに変換します。calendar(3)で定義されているのと同じフォーマットの普遍的な時刻の値。</target>
        </trans-unit>
        <trans-unit id="be2ab7a898419e8c5bc5fb6864e946862fab27d5" translate="yes" xml:space="preserve">
          <source>Converts a DateAndTime list to a printable string, according to the DISPLAY-HINT definition in RFC2579, with the extension that it also allows the values &quot;hours from UTC&quot; = 14 together with &quot;minutes from UTC&quot; = 0.</source>
          <target state="translated">RFC2579のDISPLAY-HINT定義に従って、DateAndTimeリストを印刷可能な文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="6e6041bd2c7a5e4ff13a4f7ea74a578cac2bcdd0" translate="yes" xml:space="preserve">
          <source>Converts a DateAndTime list to a printable string, according to the DISPLAY-HINT definition in RFC2579.</source>
          <target state="translated">RFC2579のDISPLAY-HINT定義に従って、DateAndTimeリストを印刷可能な文字列に変換します。</target>
        </trans-unit>
        <trans-unit id="df82c9aad820e9aeb421a06ce9d86abf62090da6" translate="yes" xml:space="preserve">
          <source>Converts a POSIX error code to a string (by calling &lt;code&gt;erl_posix_msg:message/1&lt;/code&gt;).</source>
          <target state="translated">POSIXエラーコードを文字列に変換します（ &lt;code&gt;erl_posix_msg:message/1&lt;/code&gt; を呼び出します）。</target>
        </trans-unit>
        <trans-unit id="7cb36a1d5c42c93d73e9a9490af62b196a3459ce" translate="yes" xml:space="preserve">
          <source>Converts a dictionary to a list representation.</source>
          <target state="translated">辞書をリスト表現に変換します。</target>
        </trans-unit>
        <trans-unit id="5145233388e4e63192922244ccdc8aad08c100c4" translate="yes" xml:space="preserve">
          <source>Converts a line in an Apache-like configuration file to an &lt;code&gt;{Option, Value}&lt;/code&gt; tuple. Some more complex configuration options, such as &lt;code&gt;directory&lt;/code&gt; and &lt;code&gt;security_directory&lt;/code&gt;, create an accumulator. This function only needs clauses for the options implemented by this particular callback module.</source>
          <target state="translated">Apacheのような構成ファイルの行を &lt;code&gt;{Option, Value}&lt;/code&gt; タプルに変換します。 &lt;code&gt;directory&lt;/code&gt; や &lt;code&gt;security_directory&lt;/code&gt; などのより複雑な設定オプションは、アキュムレータを作成します。この関数は、この特定のコールバックモジュールによって実装されるオプションの句のみを必要とします。</target>
        </trans-unit>
        <trans-unit id="1ba2baaacb5bd1fa86bcae22233808d6f9af2ca7" translate="yes" xml:space="preserve">
          <source>Converts a list to an extendible array. &lt;code&gt;Default&lt;/code&gt; is used as the value for uninitialized entries of the array. If &lt;code&gt;List&lt;/code&gt; is not a proper list, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">リストを拡張可能な配列に変換します。 &lt;code&gt;Default&lt;/code&gt; は、配列の初期化されていないエントリの値として使用されます。 &lt;code&gt;List&lt;/code&gt; が適切なリストでない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="46ccd780115ddb3db3a4fceec0e82dd6e0b6fc95" translate="yes" xml:space="preserve">
          <source>Converts a local time value to a list of possible DateAndTime list(s). The local time value on the same format as defined in calendar(3).</source>
          <target state="translated">ローカル時刻の値を、可能な DateAndTime リストのリストに変換します。calendar(3)で定義されているのと同じ形式のローカル時刻の値。</target>
        </trans-unit>
        <trans-unit id="0677e1933e311ee3ab43091b45e003180be5b30d" translate="yes" xml:space="preserve">
          <source>Converts a port handle to the Erlang term format, usable in &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt; erl_drv_output_term&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt; erl_drv_send_term&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポートハンドルを &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt; erl_drv_output_term&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt; erl_drv_send_term&lt;/a&gt;&lt;/code&gt; で使用可能なErlang用語形式に変換します。</target>
        </trans-unit>
        <trans-unit id="1ed8f6dfcb33426ca4e1a7205c23417d3a9d60fa" translate="yes" xml:space="preserve">
          <source>Converts a port handle to the Erlang term format, usable in &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt;erl_drv_send_term&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ポートハンドルを &lt;code&gt;&lt;a href=&quot;#erl_drv_output_term&quot;&gt;erl_drv_output_term&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#erl_drv_send_term&quot;&gt;erl_drv_send_term&lt;/a&gt;&lt;/code&gt; で使用可能なErlang用語形式に変換します。</target>
        </trans-unit>
        <trans-unit id="f1537e7dd396d1f3ae28bd863e00e7d4f2a0ff80" translate="yes" xml:space="preserve">
          <source>Converts a positive integer to the smallest possible representation in a binary digit representation, either big endian or little endian.</source>
          <target state="translated">正の整数を、ビッグエンディアンまたはリトルエンディアンの2進数表現で可能な最小の表現に変換します。</target>
        </trans-unit>
        <trans-unit id="4b06d2c3db2372af5cb08f262a3a235fead48580" translate="yes" xml:space="preserve">
          <source>Converts a possibly deep list filename consisting of characters and atoms into the corresponding flat string filename.</source>
          <target state="translated">文字とアトムからなる可能性のあるディープリストファイル名を、対応するフラットな文字列ファイル名に変換します。</target>
        </trans-unit>
        <trans-unit id="bcdf5ec8404937f0cc26b604615b645a3d632e2c" translate="yes" xml:space="preserve">
          <source>Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Composed characters according to the Unicode standard.</source>
          <target state="translated">文字やバイナリの深い可能性のあるリストを、Unicode 標準に従った正準等価合成文字の正規化形式に変換します。</target>
        </trans-unit>
        <trans-unit id="25cde6c5eb02ad4f574bba02ec1c6f1c1e5ac62f" translate="yes" xml:space="preserve">
          <source>Converts a possibly deep list of characters and binaries into a Normalized Form of canonical equivalent Decomposed characters according to the Unicode standard.</source>
          <target state="translated">文字やバイナリの深い可能性のあるリストを、Unicode 標準に従った正準等価分解文字の正規化形式に変換します。</target>
        </trans-unit>
        <trans-unit id="3756e2cde9505923edd4d4e14aa5e042f713b23b" translate="yes" xml:space="preserve">
          <source>Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Composed characters according to the Unicode standard.</source>
          <target state="translated">文字やバイナリの深いリストを、Unicode標準に従って、互換性のある等価な合成文字の正規形に変換します。</target>
        </trans-unit>
        <trans-unit id="530b1c8ab020feea5c4599c3a34122f44f338da2" translate="yes" xml:space="preserve">
          <source>Converts a possibly deep list of characters and binaries into a Normalized Form of compatibly equivalent Decomposed characters according to the Unicode standard.</source>
          <target state="translated">深い可能性のある文字やバイナリのリストを、Unicode標準に従って、互換性のある等価な分解文字の正規形に変換します。</target>
        </trans-unit>
        <trans-unit id="eea7568b698b464020aabc3712d814408bd4a0f7" translate="yes" xml:space="preserve">
          <source>Converts a possibly deep list of integers and binaries into a list of integers representing Unicode characters. The binaries in the input can have characters encoded as one of the following:</source>
          <target state="translated">整数とバイナリの深い可能性のあるリストを,Unicode キ ャ ラ ク タ を表す整数の リ ス ト に変換 し ます。入力のバイナリは、以下のいずれかでエンコードされた文字を持つことができます。</target>
        </trans-unit>
        <trans-unit id="24b7abb99fbb61c37725003b7ae6ea6832706f64" translate="yes" xml:space="preserve">
          <source>Converts a relative &lt;code&gt;Filename&lt;/code&gt; and returns an absolute name. No attempt is made to create the shortest absolute name, as this can give incorrect results on file systems that allow links.</source>
          <target state="translated">相対 &lt;code&gt;Filename&lt;/code&gt; を変換し、絶対名を返します。リンクを許可するファイルシステムで誤った結果が生じる可能性があるため、最短の絶対名を作成する試みは行われません。</target>
        </trans-unit>
        <trans-unit id="671a1aeac87b27d23dd6ee2e34e272472de95a3a" translate="yes" xml:space="preserve">
          <source>Converts a specified number of seconds into days, hours, minutes, and seconds. &lt;code&gt;Time&lt;/code&gt; is always non-negative, but &lt;code&gt;Days&lt;/code&gt; is negative if argument &lt;code&gt;Seconds&lt;/code&gt; is.</source>
          <target state="translated">指定した秒数を日、時間、分、秒に変換します。 &lt;code&gt;Time&lt;/code&gt; は常に負ではありませんが、引数 &lt;code&gt;Seconds&lt;/code&gt; が負の場合、 &lt;code&gt;Days&lt;/code&gt; は負です。</target>
        </trans-unit>
        <trans-unit id="ed3af2f954d658c30bda990c05b304fc42cc2658" translate="yes" xml:space="preserve">
          <source>Converts a specified system time into local date and time.</source>
          <target state="translated">指定したシステム時刻をローカル日時に変換します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
