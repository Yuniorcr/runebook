<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="f975f613537adf39477a68ad11e1dc4894dd6870" translate="yes" xml:space="preserve">
          <source>Action Mappings</source>
          <target state="translated">アクションマッピング</target>
        </trans-unit>
        <trans-unit id="2440fec108b517d1d709ba90c75d4f7a63c7e81f" translate="yes" xml:space="preserve">
          <source>ActionCall ::= {ActionFunction} | {ActionFunction, ActionTerm, ...}</source>
          <target state="translated">ActionCall ::={ActionFunction}の場合 | {ActionFunction,ActionTerm,...}</target>
        </trans-unit>
        <trans-unit id="5590c86022b5bc14c1ea74cf910bca92aa274578" translate="yes" xml:space="preserve">
          <source>ActionFunction ::= &lt;code&gt;set_seq_token&lt;/code&gt; | &lt;code&gt;get_seq_token&lt;/code&gt; | &lt;code&gt;message&lt;/code&gt; | &lt;code&gt;return_trace&lt;/code&gt; | &lt;code&gt;exception_trace&lt;/code&gt; | &lt;code&gt;process_dump&lt;/code&gt; | &lt;code&gt;enable_trace&lt;/code&gt; | &lt;code&gt;disable_trace&lt;/code&gt; | &lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;display&lt;/code&gt; | &lt;code&gt;caller&lt;/code&gt; | &lt;code&gt;set_tcw&lt;/code&gt; | &lt;code&gt;silent&lt;/code&gt;</source>
          <target state="translated">ActionFunction :: = &lt;code&gt;set_seq_token&lt;/code&gt; | &lt;code&gt;get_seq_token&lt;/code&gt; | &lt;code&gt;message&lt;/code&gt; | &lt;code&gt;return_trace&lt;/code&gt; | &lt;code&gt;exception_trace&lt;/code&gt; | &lt;code&gt;process_dump&lt;/code&gt; | &lt;code&gt;enable_trace&lt;/code&gt; | &lt;code&gt;disable_trace&lt;/code&gt; | &lt;code&gt;trace&lt;/code&gt; | &lt;code&gt;display&lt;/code&gt; | &lt;code&gt;caller&lt;/code&gt; | &lt;code&gt;set_tcw&lt;/code&gt; | &lt;code&gt;silent&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="51c493fd8bfe5291ac344e060529e5b42558f385" translate="yes" xml:space="preserve">
          <source>ActionTerm ::= ConditionExpression | ActionCall</source>
          <target state="translated">ActionTerm ::=ConditionExpression | ActionCall</target>
        </trans-unit>
        <trans-unit id="c3cd636a585b20c40ac2df5ffb403e83cb2eef51" translate="yes" xml:space="preserve">
          <source>Actions</source>
          <target state="translated">Actions</target>
        </trans-unit>
        <trans-unit id="89ff6dbfdb936ca69e6587ae4d22e9a120904bf2" translate="yes" xml:space="preserve">
          <source>Actions :: [&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;] | &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;) -&amp;gt;</source>
          <target state="translated">アクション:: [ &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; ] | &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; ）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="61334da16104ac9d91a8736e913a8cbee03e40e6" translate="yes" xml:space="preserve">
          <source>Actions are executed in the containing list order.</source>
          <target state="translated">アクションは、リストを含む順に実行されます。</target>
        </trans-unit>
        <trans-unit id="6ef0f3b4c93f31bddb43b327dd452b51df2f0936" translate="yes" xml:space="preserve">
          <source>Actions that set &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; override any previous of the same type, so the last in the containing list wins. For example, the last &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; overrides any previous &lt;code&gt;event_timeout()&lt;/code&gt; in the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; を設定するアクションは、同じタイプの以前のタイプをオーバーライドするため、含まれているリストの最後のものが優先されます。たとえば、最後の &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; は以前の &lt;code&gt;event_timeout()&lt;/code&gt; をオーバーライドしますリストです。</target>
        </trans-unit>
        <trans-unit id="b1964869d062538b54d1a15f6f4171d706fef3d8" translate="yes" xml:space="preserve">
          <source>Actions that set &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; override any previous of the same type, so the last in the containing list wins. For example, the last &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; overrides any previous &lt;code&gt;postpone()&lt;/code&gt; in the list.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition options&lt;/a&gt;&lt;/code&gt; を設定するアクションは、同じタイプの以前のタイプをオーバーライドするため、含まれているリストの最後のものが優先されます。例えば、最後の &lt;code&gt;&lt;a href=&quot;#type-postpone&quot;&gt;postpone()&lt;/a&gt;&lt;/code&gt; 以前にオーバーライド &lt;code&gt;postpone()&lt;/code&gt; リストに。</target>
        </trans-unit>
        <trans-unit id="13b1df2d40bde8a02c4921e1004b0065de68e10c" translate="yes" xml:space="preserve">
          <source>Activates a connection to a remote user. When this is done the connection can be used to send messages (with SendMod:send_message/2). The ControlPid is the identifier of a process that controls the connection. That process will be supervised and if it dies, this will be detected and the UserMod:handle_disconnect/2 callback function will be invoked. See the megaco_user module for more info about the callback arguments. The connection may also explicitly be deactivated by invoking megaco:disconnect/2.</source>
          <target state="translated">リモートユーザへの接続を有効にします。これが行われると、その接続を使ってメッセージを送信することができます (SendMod:send_message/2 で)。ControlPid は接続を制御するプロセスの識別子です。そのプロセスは監視され、プロセスが終了した場合はそれが検出され、UserMod:handle_disconnect/2 コールバック関数が呼び出されます。コールバック引数の詳細については megaco_user モジュールを参照してください。megaco:disconnect/2 を呼び出すことで、接続を明示的に停止することもできます。</target>
        </trans-unit>
        <trans-unit id="f69ba29b1f84217c9d2ca2dc152317da71e06308" translate="yes" xml:space="preserve">
          <source>Activates a new checkpoint covering all Mnesia tables, including the schema, with maximum degree of redundancy, and performs a backup using &lt;code&gt;backup_checkpoint/2/3&lt;/code&gt;. The default value of the backup callback module &lt;code&gt;BackupMod&lt;/code&gt; is obtained by &lt;code&gt;mnesia:system_info(backup_module)&lt;/code&gt;.</source>
          <target state="translated">スキーマを含むすべてのMnesiaテーブルをカバーする新しいチェックポイントを最大限の冗長性でアクティブ化し、 &lt;code&gt;backup_checkpoint/2/3&lt;/code&gt; を使用してバックアップを実行します。バックアップコールバックモジュール &lt;code&gt;BackupMod&lt;/code&gt; のデフォルト値は、 &lt;code&gt;mnesia:system_info(backup_module)&lt;/code&gt; によって取得されます。</target>
        </trans-unit>
        <trans-unit id="0574212bd6baf73e32ac9c415b72677146bade9b" translate="yes" xml:space="preserve">
          <source>Activates all events at the debug level. On this level, the &lt;code&gt;Mnesia&lt;/code&gt; event handler starts subscribing to updates on all &lt;code&gt;Mnesia&lt;/code&gt; tables. This level is intended only for debugging small toy systems, as many large events can be generated.</source>
          <target state="translated">すべてのイベントをデバッグレベルでアクティブにします。このレベルでは、 &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーがすべての &lt;code&gt;Mnesia&lt;/code&gt; テーブルの更新のサブスクライブを開始します。多くの大きなイベントが生成される可能性があるため、このレベルは小さなおもちゃのシステムのデバッグのみを目的としています。</target>
        </trans-unit>
        <trans-unit id="1473502b15ef43d2fc312f7968ec2627f8afe701" translate="yes" xml:space="preserve">
          <source>Activates all events at the debug level. On this level, the Mnesia event handler starts subscribing to updates on all Mnesia tables. This level is intended only for debugging small toy systems, as many large events can be generated.</source>
          <target state="translated">デバッグレベルですべてのイベントをアクティブにします。このレベルでは、Mnesia イベントハンドラは、すべての Mnesia テーブルの更新のサブスクライブを開始します。このレベルは、多くの大規模なイベントを生成できるので、小さな玩具システムのデバッグ用にのみ意図されています。</target>
        </trans-unit>
        <trans-unit id="a11fef95fdd152ac782e603cddf000bf9537358d" translate="yes" xml:space="preserve">
          <source>Activates all events at the verbose level plus full trace of all debug events. These debug events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with &lt;code&gt;mnesia:subscribe/1&lt;/code&gt;. The events are always sent to the Mnesia event handler. On this debug level, the Mnesia event handler starts subscribing to updates in the schema table.</source>
          <target state="translated">詳細レベルのすべてのイベントと、すべてのデバッグイベントの完全なトレースをアクティブにします。これらのデバッグイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは &lt;code&gt;mnesia:subscribe/1&lt;/code&gt; でこれらのイベントをサブスクライブできます。イベントは常にMnesiaイベントハンドラーに送信されます。このデバッグレベルでは、Mnesiaイベントハンドラーがスキーマテーブルの更新のサブスクライブを開始します。</target>
        </trans-unit>
        <trans-unit id="d10f11346b4f9c94838ab97da164ecb5b326c009" translate="yes" xml:space="preserve">
          <source>Activates all events at the verbose level plus traces of all debug events. These debug events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with &lt;code&gt;mnesia:subscribe/1&lt;/code&gt;. The events are always sent to the &lt;code&gt;Mnesia&lt;/code&gt; event handler. On this debug level, the &lt;code&gt;Mnesia&lt;/code&gt; event handler starts subscribing to updates in the schema table.</source>
          <target state="translated">詳細レベルのすべてのイベントとすべてのデバッグイベントのトレースをアクティブにします。これらのデバッグイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは、 &lt;code&gt;mnesia:subscribe/1&lt;/code&gt; を使用してこれらのイベントをサブスクライブできます。イベントは常に &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーに送信されます。このデバッグレベルでは、 &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーがスキーマテーブルの更新のサブスクライブを開始します。</target>
        </trans-unit>
        <trans-unit id="6ded0de3f180c32378392899db72b086ca5f1741" translate="yes" xml:space="preserve">
          <source>Activates read data buffering. If &lt;code&gt;read/2&lt;/code&gt; calls are for significantly less than &lt;code&gt;Size&lt;/code&gt; bytes, read operations to the operating system are still performed for blocks of &lt;code&gt;Size&lt;/code&gt; bytes. The extra data is buffered and returned in subsequent &lt;code&gt;read/2&lt;/code&gt; calls, giving a performance gain as the number of operating system calls is reduced.</source>
          <target state="translated">読み取りデータのバッファリングをアクティブにします。場合は &lt;code&gt;read/2&lt;/code&gt; の呼び出しが大幅未満のためのものである &lt;code&gt;Size&lt;/code&gt; バイト、まだのブロックに対して実行されているオペレーティングシステムに読み取り操作 &lt;code&gt;Size&lt;/code&gt; バイト。余分なデータはバッファーに入れられ、後続の &lt;code&gt;read/2&lt;/code&gt; 呼び出しで返されます。これにより、オペレーティングシステムの呼び出し回数が減るので、パフォーマンスが向上します。</target>
        </trans-unit>
        <trans-unit id="eb6a9b28d658257a2883ec371985ebb9360570ed" translate="yes" xml:space="preserve">
          <source>Activates the fragmentation properties of an existing table. &lt;code&gt;FragProps&lt;/code&gt; is either to contain &lt;code&gt;{node_pool, Nodes}&lt;/code&gt; or be empty.</source>
          <target state="translated">既存のテーブルの断片化プロパティをアクティブ化します。 &lt;code&gt;FragProps&lt;/code&gt; は、 &lt;code&gt;{node_pool, Nodes}&lt;/code&gt; を含むか、空にするかのいずれかです。</target>
        </trans-unit>
        <trans-unit id="532f0aa046ec26e3e6682e682916731e989482e8" translate="yes" xml:space="preserve">
          <source>Activates tracing of important debug events. These events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with &lt;code&gt;mnesia:subscribe/1&lt;/code&gt;. The events are always sent to the Mnesia event handler.</source>
          <target state="translated">重要なデバッグイベントのトレースをアクティブにします。これらのイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは、 &lt;code&gt;mnesia:subscribe/1&lt;/code&gt; を使用してこれらのイベントをサブスクライブできます。イベントは常にMnesiaイベントハンドラーに送信されます。</target>
        </trans-unit>
        <trans-unit id="e0f95d91404d34111854383ce61fa17d9871d976" translate="yes" xml:space="preserve">
          <source>Activates tracing of important debug events. These events generate &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; system events. Processes can subscribe to these events with the function &lt;code&gt;&lt;a href=&quot;mnesia#subscribe-1&quot;&gt;mnesia:subscribe/1&lt;/a&gt;&lt;/code&gt;. The events are always sent to the &lt;code&gt;Mnesia&lt;/code&gt; event handler.</source>
          <target state="translated">重要なデバッグイベントのトレースをアクティブにします。これらのイベントは、 &lt;code&gt;{mnesia_info, Format, Args}&lt;/code&gt; システムイベントを生成します。プロセスは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#subscribe-1&quot;&gt;mnesia:subscribe/1&lt;/a&gt;&lt;/code&gt; を使用してこれらのイベントをサブスクライブできます。イベントは常に &lt;code&gt;Mnesia&lt;/code&gt; イベントハンドラーに送信されます。</target>
        </trans-unit>
        <trans-unit id="7f2c331b898e66e4e4d774932df99c6432852c98" translate="yes" xml:space="preserve">
          <source>Activates/deactivates tracing by changing the current trace pattern.</source>
          <target state="translated">現在のトレースパターンを変更してトレースを有効/無効にします。</target>
        </trans-unit>
        <trans-unit id="29f45195e4be19fb8b96702dcdd15944ea37fdad" translate="yes" xml:space="preserve">
          <source>Active breakpoints are displayed in red and inactive breakpoints in blue.</source>
          <target state="translated">アクティブなブレークポイントは赤で、非アクティブなブレークポイントは青で表示されます。</target>
        </trans-unit>
        <trans-unit id="a903c4b66a2fb224f4d96a51df759ac9a67bfc6d" translate="yes" xml:space="preserve">
          <source>Activity concept and various access contexts</source>
          <target state="translated">活動のコンセプトと様々なアクセスの文脈</target>
        </trans-unit>
        <trans-unit id="713a8072ef62aa0b1fde6095af47e4a910316756" translate="yes" xml:space="preserve">
          <source>Actual protocol version.</source>
          <target state="translated">現在のプロトコルのバージョン。</target>
        </trans-unit>
        <trans-unit id="134344cda8fb9734c656b66e40554d208ac6e58b" translate="yes" xml:space="preserve">
          <source>Add &lt;code&gt;-ct_hooks&lt;/code&gt; as an argument to &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;. To add multiple CTHs using this method, append them to each other using the keyword &lt;code&gt;and&lt;/code&gt;, that is, &lt;code&gt;ct_run -ct_hooks cth1 [{debug,true}] and cth2 ...&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;-ct_hooks&lt;/code&gt; の引数として-ct_hooksを追加し &lt;code&gt;&lt;a href=&quot;run_test_chapter#ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; 。この方法を使用して複数のCTHを追加するには、キーワード &lt;code&gt;and&lt;/code&gt; を使用してそれらを互いに追加します。つまり、 &lt;code&gt;ct_run -ct_hooks cth1 [{debug,true}] and cth2 ...&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d8718d4f36d948a3675c6bdc12db7b8c27966873" translate="yes" xml:space="preserve">
          <source>Add a &lt;code&gt;return_trace&lt;/code&gt; message if the function is of arity 3:</source>
          <target state="translated">関数がarity 3の場合は、 &lt;code&gt;return_trace&lt;/code&gt; メッセージを追加します。</target>
        </trans-unit>
        <trans-unit id="dcfe51c34611d10c0d112932679c857d2a6476fa" translate="yes" xml:space="preserve">
          <source>Add a filter to the specified handler.</source>
          <target state="translated">指定したハンドラにフィルタを追加します。</target>
        </trans-unit>
        <trans-unit id="988a7e297bf981c7e71c06b09b7717bd00d611be" translate="yes" xml:space="preserve">
          <source>Add a handler with the given configuration.</source>
          <target state="translated">与えられた設定でハンドラを追加します。</target>
        </trans-unit>
        <trans-unit id="07e4c199b9f19567f7bbd64299d17b2cc8c094ac" translate="yes" xml:space="preserve">
          <source>Add a primary filter to Logger.</source>
          <target state="translated">Logger にプライマリ フィルタを追加します。</target>
        </trans-unit>
        <trans-unit id="1970f7a8e650aa5473c699a8c07cc9a162ef1004" translate="yes" xml:space="preserve">
          <source>Add address (and port, if other than default) of the primary nameserver to use for &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_res(3)&lt;/code&gt; に使用するプライマリネームサーバーのアドレス（およびデフォルト以外の場合はポート）を追加します。</target>
        </trans-unit>
        <trans-unit id="1cfc1bd9fd579f7622617b9af78a944445ba8847" translate="yes" xml:space="preserve">
          <source>Add address (and port, if other than default) of the secondary nameserver for &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_res(3)&lt;/code&gt; のセカンダリネームサーバーのアドレス（およびデフォルト以外の場合はポート）を追加します。</target>
        </trans-unit>
        <trans-unit id="d8a12963c05fa3aec6cf7012ff1f7fc0a2d99e08" translate="yes" xml:space="preserve">
          <source>Add an entry. The entry must not exist.</source>
          <target state="translated">エントリを追加します。エントリは存在しない必要があります。</target>
        </trans-unit>
        <trans-unit id="1e310729251dbd2e2aab36a457e446b150b20e5e" translate="yes" xml:space="preserve">
          <source>Add host entry to the hosts table.</source>
          <target state="translated">hostsテーブルにhostsエントリを追加します。</target>
        </trans-unit>
        <trans-unit id="064eb4472489455e1a24510aa444bd6d5e585d65" translate="yes" xml:space="preserve">
          <source>Add javac &lt;strong&gt;LAST&lt;/strong&gt; to your path environment in bash, in my case this means:</source>
          <target state="translated">javac &lt;strong&gt;LAST&lt;/strong&gt;をbashのパス環境に追加します。私の場合、これは次のことを意味します。</target>
        </trans-unit>
        <trans-unit id="3c0bb0d661a36f1c95bc663da03400bb07c43351" translate="yes" xml:space="preserve">
          <source>Add or update configuration data for the specified handler. If the given &lt;code&gt;Key&lt;/code&gt; already exists, its associated value will be changed to &lt;code&gt;Value&lt;/code&gt;. If it does not exist, it will be added.</source>
          <target state="translated">指定されたハンドラーの構成データを追加または更新します。指定された &lt;code&gt;Key&lt;/code&gt; すでに存在する場合、それに関連付けられた値は &lt;code&gt;Value&lt;/code&gt; に変更されます。存在しない場合は追加されます。</target>
        </trans-unit>
        <trans-unit id="2e23ac8cf9bd396ad94605da91fe04cfdf9b6acd" translate="yes" xml:space="preserve">
          <source>Add or update primary configuration data for Logger. If the given &lt;code&gt;Key&lt;/code&gt; already exists, its associated value will be changed to &lt;code&gt;Value&lt;/code&gt;. If it does not exist, it will be added.</source>
          <target state="translated">ロガーのプライマリ設定データを追加または更新します。指定された &lt;code&gt;Key&lt;/code&gt; すでに存在する場合、それに関連付けられた値は &lt;code&gt;Value&lt;/code&gt; に変更されます。存在しない場合は追加されます。</target>
        </trans-unit>
        <trans-unit id="fa1f218791abec296d536eef9aee8fee9c4907e8" translate="yes" xml:space="preserve">
          <source>Add search domains for &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;inet_res(3)&lt;/code&gt; の検索ドメインを追加します。</target>
        </trans-unit>
        <trans-unit id="fd1016b584a0c08284e356371e0b67d2c6544a4a" translate="yes" xml:space="preserve">
          <source>Add tag &lt;code&gt;ct_hooks&lt;/code&gt; to your &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specification&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">タグ &lt;code&gt;ct_hooks&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;run_test_chapter#test_specifications&quot;&gt;Test Specification&lt;/a&gt;&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="62bfcf8bed94dcc27f1ebd702bd7df63f5908679" translate="yes" xml:space="preserve">
          <source>Add tag &lt;code&gt;ct_hooks&lt;/code&gt; to your call to &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; への呼び出しにタグ &lt;code&gt;ct_hooks&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="bb8bd196c7c5b5791600663f12d69529068e2cf5" translate="yes" xml:space="preserve">
          <source>Add the &lt;code&gt;{scanner, flex}&lt;/code&gt; (or similar) directive to an Erlang system config file for the megaco app (see &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; chapter for details).</source>
          <target state="translated">追加 &lt;code&gt;{scanner, flex}&lt;/code&gt; （参照MEGACOアプリのアーランシステム設定ファイルに（または類似の）指示を &lt;code&gt;&lt;a href=&quot;megaco_run#initial_config&quot;&gt;initial configuration&lt;/a&gt;&lt;/code&gt; 詳細については、章）。</target>
        </trans-unit>
        <trans-unit id="a2012ba10173073b8d6e03fc90ee362531d7db30" translate="yes" xml:space="preserve">
          <source>Add the applications Crypto, Public Key, and SSL with their current version numbers after the STDLIB application.</source>
          <target state="translated">STDLIBアプリケーションの後に、Crypto、Public Key、SSLのアプリケーションを現在のバージョン番号で追加します。</target>
        </trans-unit>
        <trans-unit id="cf34fb9a5fda73afda9f1d571b702839ff2f58b3" translate="yes" xml:space="preserve">
          <source>Add the following directive to the module:</source>
          <target state="translated">モジュールに以下のディレクティブを追加します。</target>
        </trans-unit>
        <trans-unit id="497564ebabd956c895ba8a4ea1a4bb25e8ed7093" translate="yes" xml:space="preserve">
          <source>Add transport capability to a service.</source>
          <target state="translated">サービスにトランスポート機能を追加します。</target>
        </trans-unit>
        <trans-unit id="22ba7777616ece673914dfbc3af9096a68b87e29" translate="yes" xml:space="preserve">
          <source>Adding an application means that the modules defined by the &lt;code&gt;modules&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file are loaded using &lt;code&gt;add_module&lt;/code&gt;.</source>
          <target state="translated">アプリケーションを追加するということは、 &lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;modules&lt;/code&gt; キーで定義されたモジュールが &lt;code&gt;add_module&lt;/code&gt; を使用してロードされることを意味します。</target>
        </trans-unit>
        <trans-unit id="19baa62e86ec3c161512eb728cf268b6e381fb8a" translate="yes" xml:space="preserve">
          <source>Adding an application means that the modules defined by the &lt;code&gt;modules&lt;/code&gt; key in the &lt;code&gt;.app&lt;/code&gt; file are loaded using a number of &lt;code&gt;add_module&lt;/code&gt; instructions, and then the application is started.</source>
          <target state="translated">アプリケーションの追加とは、 &lt;code&gt;.app&lt;/code&gt; ファイルの &lt;code&gt;modules&lt;/code&gt; キーで定義されたモジュールが、いくつかの &lt;code&gt;add_module&lt;/code&gt; 命令を使用してロードされ、その後アプリケーションが起動されることを意味します。</target>
        </trans-unit>
        <trans-unit id="4a2fed64edcf79517387cddb884610573fd90ba1" translate="yes" xml:space="preserve">
          <source>Adding patches</source>
          <target state="translated">パッチの追加</target>
        </trans-unit>
        <trans-unit id="9aa3df6db85161c52e69b8f34d6e3268949dc0a1" translate="yes" xml:space="preserve">
          <source>Adding the &lt;code&gt;fop&lt;/code&gt; script (in &lt;code&gt;$FOP_HOME&lt;/code&gt;) to your &lt;code&gt;$PATH&lt;/code&gt;, either by adding &lt;code&gt;$FOP_HOME&lt;/code&gt; to &lt;code&gt;$PATH&lt;/code&gt;, or by copying the &lt;code&gt;fop&lt;/code&gt; script to a directory already in your &lt;code&gt;$PATH&lt;/code&gt;.</source>
          <target state="translated">追加 &lt;code&gt;fop&lt;/code&gt; （でスクリプト &lt;code&gt;$FOP_HOME&lt;/code&gt; あなたに） &lt;code&gt;$PATH&lt;/code&gt; 追加することにより、いずれか、 &lt;code&gt;$FOP_HOME&lt;/code&gt; する &lt;code&gt;$PATH&lt;/code&gt; 、またはコピーすることにより、 &lt;code&gt;fop&lt;/code&gt; あなたにすでにディレクトリにスクリプトを &lt;code&gt;$PATH&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="38751bf8e4b616e26910db8b22c357a8c20a53f2" translate="yes" xml:space="preserve">
          <source>Adding the location of your installation of &lt;code&gt;fop&lt;/code&gt; in &lt;code&gt;$FOP_HOME&lt;/code&gt;.</source>
          <target state="translated">インストールの場所の追加 &lt;code&gt;fop&lt;/code&gt; で &lt;code&gt;$FOP_HOME&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ab0b27d891b1318285ee4899ad6b140de6e4ed3b" translate="yes" xml:space="preserve">
          <source>Additional information and links of interest for Erlang programmers can be found on the Erlang Open Source site &lt;a href=&quot;http://www.erlang.org/&quot;&gt;http://www.erlang.org&lt;/a&gt;.</source>
          <target state="translated">Erlangプログラマー向けの追加情報および興味のあるリンクは、Erlangオープンソースサイト&lt;a href=&quot;http://www.erlang.org/&quot;&gt;http://www.erlang.orgにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6afdeb8447e9059c599becedc9101b844f957850" translate="yes" xml:space="preserve">
          <source>Additionally, values that can be encoded are limited by way of their encoding as four octets as required by RFC 6733 with the required extension from RFC 2030. In particular, only values between &lt;code&gt;{{1968,1,20},{3,14,8}}&lt;/code&gt; and &lt;code&gt;{{2104,2,26},{9,42,23}}&lt;/code&gt; (both inclusive) can be encoded.</source>
          <target state="translated">さらに、エンコードできる値は、RFC 6733で要求されているように、RFC 2030からの必要な拡張子を持つ4オクテットとしてのエンコードによって制限されています。特に、 &lt;code&gt;{{1968,1,20},{3,14,8}}&lt;/code&gt; および &lt;code&gt;{{2104,2,26},{9,42,23}}&lt;/code&gt; （両方を含む）をエンコードできます。</target>
        </trans-unit>
        <trans-unit id="74fda4b3ec4ffdc7738f6833bc3191a5b59bbcea" translate="yes" xml:space="preserve">
          <source>Addresses as inputs to functions can be either a string or a tuple. For example, the IP address 150.236.20.73 can be passed to &lt;code&gt;gethostbyaddr/1&lt;/code&gt;, either as string &lt;code&gt;&quot;150.236.20.73&quot;&lt;/code&gt; or as tuple &lt;code&gt;{150, 236, 20, 73}&lt;/code&gt;.</source>
          <target state="translated">関数への入力としてのアドレスは、文字列またはタプルです。たとえば、IPアドレス150.236.20.73は、文字列 &lt;code&gt;&quot;150.236.20.73&quot;&lt;/code&gt; またはタプル &lt;code&gt;{150, 236, 20, 73}&lt;/code&gt; 150、236、20、73}として &lt;code&gt;gethostbyaddr/1&lt;/code&gt; に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="919ffc168cee16019d09aa5279148893d8d24a34" translate="yes" xml:space="preserve">
          <source>Addresses besides &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; ones that are returned from socket API functions. See in particular &lt;code&gt;&lt;a href=&quot;#type-local_address&quot;&gt;local_address().&lt;/a&gt;&lt;/code&gt; The &lt;code&gt;unspec&lt;/code&gt; family corresponds to AF_UNSPEC and can occur if the other side has no socket address. The &lt;code&gt;undefined&lt;/code&gt; family can only occur in the unlikely event of an address family that the VM does not recognize.</source>
          <target state="translated">ソケットAPI関数から返される &lt;code&gt;&lt;a href=&quot;#type-ip_address&quot;&gt;ip_address()&lt;/a&gt;&lt;/code&gt; 以外のアドレス。特に &lt;code&gt;&lt;a href=&quot;#type-local_address&quot;&gt;local_address().&lt;/a&gt;&lt;/code&gt; 参照してください。 &lt;code&gt;unspec&lt;/code&gt; 家族がAF_UNSPECに対応し、他側は何のソケットアドレスを持っていない場合に発生することができます。 &lt;code&gt;undefined&lt;/code&gt; 家族は唯一のVMが認識されないことをアドレスファミリの万が一に発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="e5d78a2b44c9f8c46bb6a05a403783dea60e8b77" translate="yes" xml:space="preserve">
          <source>Addresses to the test plant or other instruments</source>
          <target state="translated">テストプラントやその他の機器への住所</target>
        </trans-unit>
        <trans-unit id="e2dc16d39802f8e13757680f2285e270d512d4d0" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Dir&lt;/code&gt; to the beginning of the code path. If &lt;code&gt;Dir&lt;/code&gt; exists, it is removed from the old position in the code path.</source>
          <target state="translated">コードパスの先頭に &lt;code&gt;Dir&lt;/code&gt; を追加します。 &lt;code&gt;Dir&lt;/code&gt; が存在する場合は、コードパスの古い位置から削除されます。</target>
        </trans-unit>
        <trans-unit id="926f262a813d5bf3968371cfef08e827663b2a16" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Dir&lt;/code&gt; to the code path. The directory is added as the last directory in the new path. If &lt;code&gt;Dir&lt;/code&gt; already exists in the path, it is not added.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; をコードパスに追加します。ディレクトリは、新しいパスの最後のディレクトリとして追加されます。 &lt;code&gt;Dir&lt;/code&gt; がパスに既に存在する場合、それは追加されません。</target>
        </trans-unit>
        <trans-unit id="ca41b9b5a14be7cc19bac8bafe3b381efcc40caa" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Dir&lt;/code&gt; to the list of directories to be searched when including a file. When encountering an &lt;code&gt;-include&lt;/code&gt; or &lt;code&gt;-include_lib&lt;/code&gt; directive, the compiler searches for header files in the following directories:</source>
          <target state="translated">ファイルを含めるときに検索するディレクトリのリストに &lt;code&gt;Dir&lt;/code&gt; を追加します。遭遇したとき &lt;code&gt;-include&lt;/code&gt; や &lt;code&gt;-include_lib&lt;/code&gt; ディレクティブ、次のディレクトリにあるヘッダファイルのコンパイラ検索を：</target>
        </trans-unit>
        <trans-unit id="5307e57c8c5d61db386c45a450b3023f9b59e82e" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;IncludeDir&lt;/code&gt; to the search-path for &lt;code&gt;.asn1db&lt;/code&gt; and &lt;code&gt;ASN.1&lt;/code&gt; source files. The compiler tries to open an &lt;code&gt;.asn1db&lt;/code&gt; file when a module imports definitions from another &lt;code&gt;ASN.1&lt;/code&gt; module. If no &lt;code&gt;.asn1db&lt;/code&gt; file is found, the &lt;code&gt;ASN.1&lt;/code&gt; source file is parsed. Several &lt;code&gt;{i, IncludeDir}&lt;/code&gt; can be given.</source>
          <target state="translated">&lt;code&gt;IncludeDir&lt;/code&gt; を &lt;code&gt;.asn1db&lt;/code&gt; および &lt;code&gt;ASN.1&lt;/code&gt; ソースファイルの検索パスに追加します。モジュールが別の &lt;code&gt;ASN.1&lt;/code&gt; モジュールから定義をインポートすると、コンパイラーは &lt;code&gt;.asn1db&lt;/code&gt; ファイルを開こうとします。 &lt;code&gt;.asn1db&lt;/code&gt; ファイルが見つからない場合、 &lt;code&gt;ASN.1&lt;/code&gt; ソースファイルが解析されます。いくつかの &lt;code&gt;{i, IncludeDir}&lt;/code&gt; を指定できます。</target>
        </trans-unit>
        <trans-unit id="595c4b05c70f5ee3afd4c0ee71bd2a9507a8d8e9" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Increment&lt;/code&gt; to the value associated with &lt;code&gt;Key&lt;/code&gt; and store this value. If &lt;code&gt;Key&lt;/code&gt; is not present in the dictionary, &lt;code&gt;Increment&lt;/code&gt; is stored as the first value.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 関連付けられた値に &lt;code&gt;Increment&lt;/code&gt; を追加し、この値を格納します。辞書に &lt;code&gt;Key&lt;/code&gt; が存在しない場合、 &lt;code&gt;Increment&lt;/code&gt; が最初の値として格納されます。</target>
        </trans-unit>
        <trans-unit id="9cf5a5933a7780d09616786318d8b162063b8502" translate="yes" xml:space="preserve">
          <source>Adds &lt;code&gt;Increment&lt;/code&gt; to the value associated with &lt;code&gt;Key&lt;/code&gt; and stores this value. If &lt;code&gt;Key&lt;/code&gt; is not present in the dictionary, &lt;code&gt;Increment&lt;/code&gt; is stored as the first value.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; 関連付けられた値に &lt;code&gt;Increment&lt;/code&gt; を追加し、この値を格納します。辞書に &lt;code&gt;Key&lt;/code&gt; が存在しない場合、 &lt;code&gt;Increment&lt;/code&gt; が最初の値として格納されます。</target>
        </trans-unit>
        <trans-unit id="608d4ac3b1f40dea43a70f3ee04cd69ef181057c" translate="yes" xml:space="preserve">
          <source>Adds a &lt;code&gt;Slave&lt;/code&gt; node to the list of allowed slave hosts.</source>
          <target state="translated">許可されたスレーブホストのリストに &lt;code&gt;Slave&lt;/code&gt; ノードを追加します。</target>
        </trans-unit>
        <trans-unit id="c8419b1c93b9fd6c91cbede4425bbc8634cca3f1" translate="yes" xml:space="preserve">
          <source>Adds a USM security data (user) to the agent config. Equivalent to one line in the &lt;code&gt;usm.conf&lt;/code&gt; file.</source>
          <target state="translated">USMセキュリティデータ（ユーザー）をエージェント構成に追加します。 &lt;code&gt;usm.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="608718b6fe3ec7101404f6c3f283054c442dd2b4" translate="yes" xml:space="preserve">
          <source>Adds a access definition to the agent config. Equivalent to one vacmAccess-line in the &lt;code&gt;vacm.conf&lt;/code&gt; file.</source>
          <target state="translated">エージェント構成にアクセス定義を追加します。 &lt;code&gt;vacm.conf&lt;/code&gt; ファイルの1つのvacmAccess行に相当します。</target>
        </trans-unit>
        <trans-unit id="56be82c63eeffefdb9fecc96c8582dde485169c1" translate="yes" xml:space="preserve">
          <source>Adds a comment to the zip archive.</source>
          <target state="translated">zip アーカイブにコメントを追加します。</target>
        </trans-unit>
        <trans-unit id="43e098c039b116cd95896a1756a343c44df7c071" translate="yes" xml:space="preserve">
          <source>Adds a community to the agent config. Equivalent to one line in the &lt;code&gt;community.conf&lt;/code&gt; file.</source>
          <target state="translated">コミュニティをエージェント構成に追加します。 &lt;code&gt;community.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="45955c71ab38b246ddf99aa7e08be1cf306c82b3" translate="yes" xml:space="preserve">
          <source>Adds a context to the agent config. Equivalent to one line in the &lt;code&gt;context.conf&lt;/code&gt; file.</source>
          <target state="translated">コンテキストをエージェント構成に追加します。 &lt;code&gt;context.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="6c32cf7ccbd49be4e1811292b2c307f4eba42f61" translate="yes" xml:space="preserve">
          <source>Adds a driver entry to the list of drivers known by Erlang. The &lt;code&gt;&lt;a href=&quot;driver_entry#init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; function of parameter &lt;code&gt;de&lt;/code&gt; is called.</source>
          <target state="translated">Erlangが認識しているドライバーのリストにドライバーエントリを追加します。パラメータ &lt;code&gt;de&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;driver_entry#init&quot;&gt;init&lt;/a&gt;&lt;/code&gt; 関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d07970fe182b9d81897e40e78d3b14e7a4e7a0d7" translate="yes" xml:space="preserve">
          <source>Adds a file to a tar file that has been opened for writing by &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; によって書き込み用に開かれたtarファイルにファイルを追加します。</target>
        </trans-unit>
        <trans-unit id="b2fca474d01b00ce9ba861cfe769df64577ac35b" translate="yes" xml:space="preserve">
          <source>Adds a file to a tar file that has been opened for writing by &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;. This function accepts the same options as &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; によって書き込み用に開かれたtarファイルにファイルを追加します。この関数は、 &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3&lt;/a&gt;&lt;/code&gt; と同じオプションを受け入れます。</target>
        </trans-unit>
        <trans-unit id="5eccbecba42ae4288806c579ad8b8fbf3b51a728" translate="yes" xml:space="preserve">
          <source>Adds a fragment to a fragmented table. All records in one of the old fragments are rehashed and about half of them are moved to the new (last) fragment. All other fragmented tables, which refer to this table in their foreign key, automatically get a new fragment. Also, their records are dynamically rehashed in the same manner as for the main table.</source>
          <target state="translated">フラグメント化されたテーブルにフラグメントを追加します。古いフラグメントの1つに含まれるすべてのレコードが再配置され、その約半分が新しいフラグメントに移動されます。他のすべてのフラグメント化されたテーブルは、外部キーでこのテーブルを参照しているため、自動的に新しいフラグメントを取得します。また、それらのレコードは、メインテーブルの場合と同じように動的にリハッシュされます。</target>
        </trans-unit>
        <trans-unit id="d84d2fb93ae834309e6167a0b3e43d9fab2545e1" translate="yes" xml:space="preserve">
          <source>Adds a host key to the set of trusted host keys.</source>
          <target state="translated">信頼できるホスト鍵のセットにホスト鍵を追加します。</target>
        </trans-unit>
        <trans-unit id="2d77c18b4124fe87017036ce4362ca94cf644272" translate="yes" xml:space="preserve">
          <source>Adds a module and its &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The module will not be member of any application. Returns the name of the module.</source>
          <target state="translated">モジュールとその &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。モジュールはどのアプリケーションのメンバーにもなりません。モジュールの名前を返します。</target>
        </trans-unit>
        <trans-unit id="32c8a7869e19433d754f5fcd1913f72de6ee2803" translate="yes" xml:space="preserve">
          <source>Adds a new &lt;code&gt;Key&lt;/code&gt; to the process dictionary, associated with the value &lt;code&gt;Val&lt;/code&gt;, and returns &lt;code&gt;undefined&lt;/code&gt;. If &lt;code&gt;Key&lt;/code&gt; exists, the old value is deleted and replaced by &lt;code&gt;Val&lt;/code&gt;, and the function returns the old value. Example:</source>
          <target state="translated">値 &lt;code&gt;Val&lt;/code&gt; に関連付けられた新しい &lt;code&gt;Key&lt;/code&gt; をプロセスディクショナリに追加し、 &lt;code&gt;undefined&lt;/code&gt; を返します。場合は &lt;code&gt;Key&lt;/code&gt; 存在する場合、古い値が削除さに置き換えられ &lt;code&gt;Val&lt;/code&gt; 、および機能は、以前の値を返します。例：</target>
        </trans-unit>
        <trans-unit id="72a77907fe15211efb4ac1705211f4a6082a3750" translate="yes" xml:space="preserve">
          <source>Adds a new event handler in the same way as &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt;, but also supervises the connection between the event handler and the calling process.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; と同じ方法で新しいイベントハンドラーを追加しますが、イベントハンドラーと呼び出しプロセス間の接続も監視します。</target>
        </trans-unit>
        <trans-unit id="e9446fd51850eeb6666eac3dc67fdb3d82b72082" translate="yes" xml:space="preserve">
          <source>Adds a new event handler to event manager &lt;code&gt;EventMgrRef&lt;/code&gt;. The event manager calls &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; to initiate the event handler and its internal state.</source>
          <target state="translated">新しいイベントハンドラーをイベントマネージャー &lt;code&gt;EventMgrRef&lt;/code&gt; に追加します。イベントマネージャは &lt;code&gt;&lt;a href=&quot;#Module:init-1&quot;&gt;Module:init/1&lt;/a&gt;&lt;/code&gt; を呼び出して、イベントハンドラとその内部状態を開始します。</target>
        </trans-unit>
        <trans-unit id="be923232cecb872d45d1007a0378c8bbbe25c6cc" translate="yes" xml:space="preserve">
          <source>Adds a new event handler to the error logger. The event handler must be implemented as a &lt;code&gt;gen_event&lt;/code&gt; callback module, see &lt;code&gt;gen_event(3)&lt;/code&gt;.</source>
          <target state="translated">エラーロガーに新しいイベントハンドラーを追加します。イベントハンドラーは、 &lt;code&gt;gen_event&lt;/code&gt; コールバックモジュールとして実装する必要があります &lt;code&gt;gen_event(3)&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="346f98f933f954790f0ea34b8324039679ac74dd" translate="yes" xml:space="preserve">
          <source>Adds a node to &lt;code&gt;node_pool&lt;/code&gt;. The new node pool affects the list returned from the function &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, frag_dist)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ノードを &lt;code&gt;node_pool&lt;/code&gt; に追加します。新しいノードプールは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, frag_dist)&lt;/a&gt;&lt;/code&gt; から返されるリストに影響します。</target>
        </trans-unit>
        <trans-unit id="35b3eb9263608d380a272fe1f7c6c1eafd65bf84" translate="yes" xml:space="preserve">
          <source>Adds a notify definition to the agent config. Equivalent to one line in the &lt;code&gt;notify.conf&lt;/code&gt; file.</source>
          <target state="translated">通知定義をエージェント構成に追加します。 &lt;code&gt;notify.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="13890bf5b34b3baf9845e8775db87c295022c6ec" translate="yes" xml:space="preserve">
          <source>Adds a phony target for each dependency.</source>
          <target state="translated">依存関係ごとに偽のターゲットを追加します。</target>
        </trans-unit>
        <trans-unit id="29b1ac0ca171003684f30d397e314620318042ec" translate="yes" xml:space="preserve">
          <source>Adds a reference to resource object &lt;code&gt;obj&lt;/code&gt; obtained from &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt;. Each call to &lt;code&gt;enif_keep_resource&lt;/code&gt; for an object must be balanced by a call to &lt;code&gt;&lt;a href=&quot;#enif_release_resource&quot;&gt;enif_release_resource&lt;/a&gt;&lt;/code&gt; before the object is destructed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt; から取得したリソースオブジェクト &lt;code&gt;obj&lt;/code&gt; への参照を追加します。オブジェクトを &lt;code&gt;&lt;a href=&quot;#enif_release_resource&quot;&gt;enif_release_resource&lt;/a&gt;&lt;/code&gt; 前に、オブジェクトのenif_keep_resourceを呼び出すたびに、enif_release_resourceを呼び出してバランスを &lt;code&gt;enif_keep_resource&lt;/code&gt; 必要があります。</target>
        </trans-unit>
        <trans-unit id="ac2aa5a6a26bf2accad0209a44849095d34310fd" translate="yes" xml:space="preserve">
          <source>Adds a release, the applications of the release, the modules of the applications, and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of the modules to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The applications will be members of the release, and the modules will be members of the applications. The default is to use the base name of the directory as release name, but this can be overridden by the &lt;code&gt;name&lt;/code&gt; option. Returns the name of the release.</source>
          <target state="translated">リリース、リリースのアプリケーション、アプリケーションのモジュール、および &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。アプリケーションはリリースのメンバーになり、モジュールはアプリケーションのメンバーになります。デフォルトでは、ディレクトリのベース名をリリース名として使用しますが、これは &lt;code&gt;name&lt;/code&gt; オプションで上書きできます。リリースの名前を返します。</target>
        </trans-unit>
        <trans-unit id="5963e0eadddadc6570ac86b11276f6f4e83b3156" translate="yes" xml:space="preserve">
          <source>Adds a security to group definition to the agent config. Equivalent to one vacmSecurityToGroup-line in the &lt;code&gt;vacm.conf&lt;/code&gt; file.</source>
          <target state="translated">セキュリティをグループ定義にエージェント構成に追加します。 &lt;code&gt;vacm.conf&lt;/code&gt; ファイルの1つのvacmSecurityToGroup行に相当します。</target>
        </trans-unit>
        <trans-unit id="d4f785833568b0e86ada1e532e1405f500e20a42" translate="yes" xml:space="preserve">
          <source>Adds a small tag to each allocated block that contains basic information about what it is and who allocated it. See &lt;code&gt;&lt;a href=&quot;#M_atags&quot;&gt;+M&amp;lt;S&amp;gt;atags&lt;/a&gt;&lt;/code&gt; for a more complete description.</source>
          <target state="translated">割り当てられた各ブロックに、それが何で、誰が割り当てたかについての基本情報を含む小さなタグを追加します。詳細な説明については、 &lt;code&gt;&lt;a href=&quot;#M_atags&quot;&gt;+M&amp;lt;S&amp;gt;atags&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="0dfd9dbecdeed6491e670fb60727a24505e80431" translate="yes" xml:space="preserve">
          <source>Adds a small tag to each allocated block that contains basic information about what it is and who allocated it. Use the &lt;code&gt;instrument&lt;/code&gt; module to inspect this information.</source>
          <target state="translated">割り当てられた各ブロックに、それが何で、誰が割り当てたかについての基本情報を含む小さなタグを追加します。 &lt;code&gt;instrument&lt;/code&gt; モジュールを使用して、この情報を検査してください。</target>
        </trans-unit>
        <trans-unit id="e4864b206394f8b2d7b76e4230a5c12a58cc9d0e" translate="yes" xml:space="preserve">
          <source>Adds a target address definition to the agent config. Equivalent to one line in the &lt;code&gt;target_addr.conf&lt;/code&gt; file.</source>
          <target state="translated">ターゲットアドレス定義をエージェント構成に追加します。 &lt;code&gt;target_addr.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="82b2d6b8384860d53fc589e045f4515d51086799" translate="yes" xml:space="preserve">
          <source>Adds a target parameter definition to the agent config. Equivalent to one line in the &lt;code&gt;target_params.conf&lt;/code&gt; file.</source>
          <target state="translated">ターゲットパラメータ定義をエージェント構成に追加します。 &lt;code&gt;target_params.conf&lt;/code&gt; ファイルの1行に相当します。</target>
        </trans-unit>
        <trans-unit id="5794b16429f3c188c00edeb3043c4596518ea624" translate="yes" xml:space="preserve">
          <source>Adds a view tree family definition to the agent config. Equivalent to one vacmViewTreeFamily-line in the &lt;code&gt;vacm.conf&lt;/code&gt; file.</source>
          <target state="translated">ビューツリーファミリ定義をエージェント構成に追加します。 &lt;code&gt;vacm.conf&lt;/code&gt; ファイルの1つのvacmViewTreeFamily行に相当します。</target>
        </trans-unit>
        <trans-unit id="10d0b1e780ad0788836f31276e65ce6efb15e764" translate="yes" xml:space="preserve">
          <source>Adds an application, the modules of the application and &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; of the modules to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The modules will be members of the application. The default is to use the base name of the directory with the version removed as application name, but this can be overridden by the &lt;code&gt;name&lt;/code&gt; option. Returns the name of the application.</source>
          <target state="translated">アプリケーション、アプリケーションのモジュール、および &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;module data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。モジュールはアプリケーションのメンバーになります。デフォルトでは、バージョンが削除されたディレクトリのベース名をアプリケーション名として使用しますが、これは &lt;code&gt;name&lt;/code&gt; オプションで上書きできます。アプリケーションの名前を返します。</target>
        </trans-unit>
        <trans-unit id="110ffd01521ffa85d725f633c684562720f4ba39" translate="yes" xml:space="preserve">
          <source>Adds binding &lt;code&gt;Name=Value&lt;/code&gt; to &lt;code&gt;BindingStruct&lt;/code&gt;. Returns an updated binding structure.</source>
          <target state="translated">&lt;code&gt;BindingStruct&lt;/code&gt; にバインディング &lt;code&gt;Name=Value&lt;/code&gt; を追加します。更新されたバインディング構造を返します。</target>
        </trans-unit>
        <trans-unit id="166b6b5a44b378b7ef528300e6dd1ab66edcbe83" translate="yes" xml:space="preserve">
          <source>Adds nodes to current cover test. Notice that this only works if cover support is active.</source>
          <target state="translated">現在のカバーテストにノードを追加します。これは、カバーのサポートがアクティブな場合にのみ機能することに注意してください。</target>
        </trans-unit>
        <trans-unit id="ebbd57f6aab385f9f5cefe84013bbde0f94bd2a8" translate="yes" xml:space="preserve">
          <source>Adds optional capabilities and sends a &lt;code&gt;hello&lt;/code&gt; message to the server and waits for the return.</source>
          <target state="translated">オプション機能を追加し、サーバーに &lt;code&gt;hello&lt;/code&gt; メッセージを送信して、返送を待ちます。</target>
        </trans-unit>
        <trans-unit id="f4e867c0e696fbab1087c9d79da2f2d90aa8bb6f" translate="yes" xml:space="preserve">
          <source>Adds or updates annotations on nodes in a syntax tree. &lt;code&gt;Bindings&lt;/code&gt; specifies the set of bound variables in the environment of the top level node. The following annotations are affected:</source>
          <target state="translated">構文ツリーのノードに注釈を追加または更新します。 &lt;code&gt;Bindings&lt;/code&gt; は、最上位ノードの環境でバインドされた変数のセットを指定します。次の注釈が影響を受けます。</target>
        </trans-unit>
        <trans-unit id="b3ac712b8a650dd6e42451afed1ca538238431c7" translate="yes" xml:space="preserve">
          <source>Adds or updates annotations on nodes in a syntax tree. Equivalent to &lt;code&gt;annotate_bindings(Tree, Bindings)&lt;/code&gt; where the top-level environment &lt;code&gt;Bindings&lt;/code&gt; is taken from the annotation &lt;code&gt;{env, Bindings}&lt;/code&gt; on the root node of &lt;code&gt;Tree&lt;/code&gt;. An exception is thrown if no such annotation should exist.</source>
          <target state="translated">構文ツリーのノードに注釈を追加または更新します。最上位の環境の &lt;code&gt;Bindings&lt;/code&gt; が &lt;code&gt;Tree&lt;/code&gt; のルートノードの注釈 &lt;code&gt;{env, Bindings}&lt;/code&gt; から取得される &lt;code&gt;annotate_bindings(Tree, Bindings)&lt;/code&gt; 同等です。そのような注釈が存在してはならない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7bbf9ca1c736db15763a8239f95f4d5c1b66558d" translate="yes" xml:space="preserve">
          <source>Adds the directories in &lt;code&gt;Dirs&lt;/code&gt; to the end of the code path. If a &lt;code&gt;Dir&lt;/code&gt; exists, it is not added.</source>
          <target state="translated">&lt;code&gt;Dirs&lt;/code&gt; 内のディレクトリをコードパスの最後に追加します。 &lt;code&gt;Dir&lt;/code&gt; が存在する場合、追加されません。</target>
        </trans-unit>
        <trans-unit id="c8d419cc2314f6341b04eb8bad24bf2f277d7f87" translate="yes" xml:space="preserve">
          <source>Adds the modules found in the given directory and the &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;modules' data&lt;/a&gt;&lt;/code&gt; to an &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt;. The default is not to examine subdirectories, but if the option &lt;code&gt;recurse&lt;/code&gt; has the value &lt;code&gt;true&lt;/code&gt;, modules are searched for in subdirectories on all levels as well as in the given directory. Returns a sorted list of the names of the added modules.</source>
          <target state="translated">指定されたディレクトリで見つかったモジュールと &lt;code&gt;&lt;a href=&quot;#module_data&quot;&gt;modules' data&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;&lt;a href=&quot;#xref_server&quot;&gt;Xref server&lt;/a&gt;&lt;/code&gt; 追加します。デフォルトではサブディレクトリは検査されませんが、オプション &lt;code&gt;recurse&lt;/code&gt; の値が &lt;code&gt;true&lt;/code&gt; の場合、モジュールはすべてのレベルのサブディレクトリと指定されたディレクトリで検索されます。追加されたモジュールの名前のソートされたリストを返します。</target>
        </trans-unit>
        <trans-unit id="34d712dcc34471fdb6acaa22554dc0975d1f5dc6" translate="yes" xml:space="preserve">
          <source>Adds the registered name of the process. This can be useful when tracing on many nodes, as processes with that name are then traced on all traced nodes.</source>
          <target state="translated">プロセスの登録名を追加します。これは、多くのノードでトレースする場合に便利です。</target>
        </trans-unit>
        <trans-unit id="6bbf14dbe70908fe6ce0549e066a68aa359629b3" translate="yes" xml:space="preserve">
          <source>Adds the selected process and all processes below, right of it, to tab &lt;strong&gt;Trace Overview&lt;/strong&gt;.</source>
          <target state="translated">選択したプロセスとそのすぐ下にあるすべてのプロセスを[ &lt;strong&gt;トレースの概要&lt;/strong&gt; ]タブに追加します。</target>
        </trans-unit>
        <trans-unit id="3fcbc67018c8db0d7d54f40db7c26439211fb94f" translate="yes" xml:space="preserve">
          <source>Adds the selected process identifier to tab &lt;strong&gt;Trace Overview&lt;/strong&gt; plus the node that the process resides on.</source>
          <target state="translated">選択したプロセス識別子を[ &lt;strong&gt;Trace Overview&lt;/strong&gt; ]タブに加えて、プロセスが存在するノードを追加します。</target>
        </trans-unit>
        <trans-unit id="3aebb82fdca9aa95c0538fef0af13a3b616d5fe2" translate="yes" xml:space="preserve">
          <source>Adds the specified directories to the beginning of the code path, similar to &lt;code&gt;code:add_pathsa/1&lt;/code&gt;. Note that the order of the given directories will be reversed in the resulting path.</source>
          <target state="translated">&lt;code&gt;code:add_pathsa/1&lt;/code&gt; と同様に、指定されたディレクトリをコードパスの先頭に追加します。結果のパスでは、指定されたディレクトリの順序が逆になることに注意してください。</target>
        </trans-unit>
        <trans-unit id="0a1c883186e0d00a77adaf41f013ddc82c811398" translate="yes" xml:space="preserve">
          <source>Adds the specified directories to the end of the code path, similar to &lt;code&gt;code:add_pathsz/1&lt;/code&gt;; see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;code:add_pathsz/1&lt;/code&gt; のように、指定したディレクトリをコードパスの最後に追加します。 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="1d2e0e96fcba01247b2f834ed2a0365db181f6d4" translate="yes" xml:space="preserve">
          <source>Adds the specified primary filters.</source>
          <target state="translated">指定したプライマリフィルタを追加します。</target>
        </trans-unit>
        <trans-unit id="d613e82163d56d8326249e8169f52e84f75a04cb" translate="yes" xml:space="preserve">
          <source>Adds these extensions to the list of compress extensions.</source>
          <target state="translated">これらの拡張子を圧縮拡張子のリストに追加します。</target>
        </trans-unit>
        <trans-unit id="25822e567273ecdc04d1dd713da5a9ee0671d675" translate="yes" xml:space="preserve">
          <source>Adds these extensions to the list of uncompress extensions.</source>
          <target state="translated">これらの拡張子を解凍した拡張子のリストに追加します。</target>
        </trans-unit>
        <trans-unit id="2f502d97e1ab810c3754afd45a8594c92efa30f8" translate="yes" xml:space="preserve">
          <source>Adds to &lt;code&gt;Forms&lt;/code&gt; the code for the standard pre-defined functions (such as &lt;code&gt;module_info/0&lt;/code&gt;) that are to be included in every module.</source>
          <target state="translated">すべてのモジュールに含まれる標準の定義済み関数（ &lt;code&gt;module_info/0&lt;/code&gt; など）のコードを &lt;code&gt;Forms&lt;/code&gt; 追加します。</target>
        </trans-unit>
        <trans-unit id="bb8f1512f2d702beeef48e8c7223a0b1dde1e4a0" translate="yes" xml:space="preserve">
          <source>Adjust the process(&quot;beam&quot;) reference to your beam version and attach the script to a running &quot;beam&quot; instance:</source>
          <target state="translated">process(&quot;beam&quot;)の参照をビームのバージョンに合わせて、実行中の &quot;beam &quot;インスタンスにスクリプトをアタッチします。</target>
        </trans-unit>
        <trans-unit id="c57f256463601b2a2c62f254f5126bfecb16a4d2" translate="yes" xml:space="preserve">
          <source>Adjusts the SSH flow control window. This is to be done by both the client- and server-side channel processes.</source>
          <target state="translated">SSH フロー制御ウィンドウを調整します。これはクライアント側とサーバ側のチャネルプロセスの両方で行われます。</target>
        </trans-unit>
        <trans-unit id="980e8823b26ab3a416e4eec330a78a5f567d8a4d" translate="yes" xml:space="preserve">
          <source>Affects SSL-3.0 and TLS-1.0 connections only. Used to change the BEAST mitigation strategy to interoperate with legacy software. Defaults to &lt;code&gt;one_n_minus_one&lt;/code&gt;.</source>
          <target state="translated">SSL-3.0およびTLS-1.0接続にのみ影響します。従来のソフトウェアと相互運用するようにBEAST緩和戦略を変更するために使用されます。デフォルトは &lt;code&gt;one_n_minus_one&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c6004ea02cc23d09682422b618c26d349782aa93" translate="yes" xml:space="preserve">
          <source>Affects TLS-1.0 connections only. If set to &lt;code&gt;false&lt;/code&gt;, it disables the block cipher padding check to be able to interoperate with legacy software.</source>
          <target state="translated">TLS-1.0接続にのみ影響します。 &lt;code&gt;false&lt;/code&gt; に設定すると、ブロック暗号パディングチェックが無効になり、レガシーソフトウェアと相互運用できるようになります。</target>
        </trans-unit>
        <trans-unit id="4b6ffc59171bd18b8e61a3e781dab573deabf10a" translate="yes" xml:space="preserve">
          <source>Affects ports to external programs on Windows only. The standard input and standard output handles of the port program are, if this option is supplied, opened with flag &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt;, so that the port program can (and must) do overlapped I/O on its standard handles. This is not normally the case for simple port programs, but an option of value for the experienced Windows programmer. &lt;strong&gt;On all other platforms, this option is silently discarded.&lt;/strong&gt;</source>
          <target state="translated">Windows上の外部プログラムへのポートにのみ影響します。ポートプログラムの標準入力ハンドルと標準出力ハンドルは、このオプションが指定されている場合、フラグ &lt;code&gt;FILE_FLAG_OVERLAPPED&lt;/code&gt; で開かれます。これにより、ポートプログラムは、その標準ハンドルで重複したI / Oを実行できます（する必要があります）。これは通常、単純なポートプログラムには当てはまりませんが、経験豊富なWindowsプログラマにとって価値のあるオプションです。&lt;strong&gt;他のすべてのプラットフォームでは、このオプションは通知なく破棄されます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cf4fb0d4263b60ac21dc80f51c2dec3dcfb5747e" translate="yes" xml:space="preserve">
          <source>Affects ports to external programs. The executed program gets its standard error file redirected to its standard output file. &lt;code&gt;stderr_to_stdout&lt;/code&gt; and &lt;code&gt;nouse_stdio&lt;/code&gt; are mutually exclusive.</source>
          <target state="translated">外部プログラムへの移植に影響します。実行されたプログラムは、標準エラーファイルを標準出力ファイルにリダイレクトします。 &lt;code&gt;stderr_to_stdout&lt;/code&gt; と &lt;code&gt;nouse_stdio&lt;/code&gt; は相互に排他的です。</target>
        </trans-unit>
        <trans-unit id="76c066b0f9a1e6496e99cead0881b8f872728f45" translate="yes" xml:space="preserve">
          <source>After LTTng is properly installed on the system Erlang/OTP can be built with LTTng support.</source>
          <target state="translated">LTTngがシステムに正しくインストールされていれば、LTTng対応でErlang/OTPを構築することができます。</target>
        </trans-unit>
        <trans-unit id="1facbcf11ae5793aa1bc80ef16d286aebd0fc34d" translate="yes" xml:space="preserve">
          <source>After \0 up to two further octal digits are read. If there are fewer than two digits, just those that are present are used. Thus the sequence \0\x\015 specifies two binary zeros followed by a CR character (code value 13). Make sure you supply two digits after the initial zero if the pattern character that follows is itself an octal digit.</source>
          <target state="translated">0の後に、さらに2桁までの8進数が読み込まれます。2桁より少ない場合、存在するそれらだけが使用されます。従って、シーケンスは、2つのバイナリ・ゼロの後にCR文字(コード値13)が続くことを指定します。最初のゼロの後に続くパターン文字がそれ自体が 8 進数である場合は、最初のゼロの後に 2 桁の数字を供給することを確認してください。</target>
        </trans-unit>
        <trans-unit id="d732389ea2448ab3a2fa3d0a36ca3e321f1eb8c8" translate="yes" xml:space="preserve">
          <source>After a partial match or a failed match, the last encountered name in the entire match process is returned, for example:</source>
          <target state="translated">部分一致または失敗した一致の後、例えば、一致プロセス全体で最後に見つかった名前が返されます。</target>
        </trans-unit>
        <trans-unit id="18ee0e3703c2647b03b1406f234f9cc3d123429d" translate="yes" xml:space="preserve">
          <source>After adding more records to the &lt;code&gt;Company&lt;/code&gt; database, the result can be the following records:</source>
          <target state="translated">&lt;code&gt;Company&lt;/code&gt; データベースにレコードを追加すると、結果は次のレコードになります。</target>
        </trans-unit>
        <trans-unit id="22669be288b8402f937e20a5b4c0d8be02ada8ae" translate="yes" xml:space="preserve">
          <source>After an analysis, you can inspect this information. In the &lt;strong&gt;PLT&lt;/strong&gt; menu you can choose to either search the PLT or inspect the contents of the whole PLT. The information is presented in &lt;code&gt;EDoc&lt;/code&gt; format.</source>
          <target state="translated">分析後、この情報を検査できます。&lt;strong&gt;PLT&lt;/strong&gt;メニューでは、&lt;strong&gt;PLTを&lt;/strong&gt;検索するか、PLT全体の内容を検査するかを選択できます。情報は &lt;code&gt;EDoc&lt;/code&gt; 形式で表示されます。</target>
        </trans-unit>
        <trans-unit id="6ef9c0c6bbe4e27c696f859b427107c4e849d03c" translate="yes" xml:space="preserve">
          <source>After any post hook has been executed for all installed CTHs, &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_fail-4&quot;&gt;on_tc_fail&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_skip-4&quot;&gt;on_tc_skip&lt;/a&gt;&lt;/code&gt; is called if the testcase failed or was skipped, respectively. You cannot affect the outcome of the tests any further at this point.</source>
          <target state="translated">インストールされているすべてのCTHに対してポストフックが実行された後、テストケースが失敗した場合またはスキップされた場合に、 &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_fail-4&quot;&gt;on_tc_fail&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;ct_hooks#Module:on_tc_skip-4&quot;&gt;on_tc_skip&lt;/a&gt;&lt;/code&gt; がそれぞれ呼び出されます。この時点では、テストの結果にこれ以上影響を与えることはできません。</target>
        </trans-unit>
        <trans-unit id="f056750b4e33f30fb9d5942f6265a2d4f346b9dc" translate="yes" xml:space="preserve">
          <source>After at least one tab-character, the line added is to contain the full name of the named pipe where &lt;code&gt;syslogd&lt;/code&gt; writes its information. The path must be the same as for the files &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; and &lt;code&gt;syslog.conf.OTP&lt;/code&gt;. The filename must be &lt;code&gt;syslog.otp&lt;/code&gt;.</source>
          <target state="translated">少なくとも1つのタブ文字の後に、追加された行には、 &lt;code&gt;syslogd&lt;/code&gt; が情報を書き込む名前付きパイプの完全な名前が含まれます。パスは、 &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; および &lt;code&gt;syslog.conf.OTP&lt;/code&gt; ファイルと同じでなければなりません。ファイル名は &lt;code&gt;syslog.otp&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="5ce4ab81087082fd95156bdaf8c2e0786410e8e3" translate="yes" xml:space="preserve">
          <source>After completing all the normal building steps described above a debug enabled runtime system can be built. To do this you have to change directory to &lt;code&gt;$ERL_TOP/erts/emulator&lt;/code&gt; and execute:</source>
          <target state="translated">上記の通常のビルド手順をすべて完了すると、デバッグが有効なランタイムシステムをビルドできます。これを行うには、ディレクトリを &lt;code&gt;$ERL_TOP/erts/emulator&lt;/code&gt; して実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="9cd742cd300933dfb65e0a535f4d15de36d37f01" translate="yes" xml:space="preserve">
          <source>After decoding a message various user callback functions are invoked in order to allow the user to act properly. See the megaco_user module for more info about the callback arguments.</source>
          <target state="translated">メッセージをデコードした後、ユーザが適切に動作できるようにするために、様々なユーザコールバック関数が呼び出されます。コールバック引数の詳細については、megaco_user モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="dc240b1130d5df1612bf5772e5400cd74e1cad80" translate="yes" xml:space="preserve">
          <source>After flag fields for atom cache references, another half byte flag field is located with the following format:</source>
          <target state="translated">アトムキャッシュ参照のためのフラグフィールドの後に、別のハーフバイトのフラグフィールドが以下のフォーマットで配置されています。</target>
        </trans-unit>
        <trans-unit id="8aca18c81b4ecc6e98bd69677c9d22a41d1f8407" translate="yes" xml:space="preserve">
          <source>After initialization, you set up the connection to the Erlang node. To specify the Erlang node you want to connect to, use &lt;code&gt;erl_connect()&lt;/code&gt;. The following example sets up the connection and is to result in a valid socket file descriptor:</source>
          <target state="translated">初期化後、Erlangノードへの接続をセットアップします。接続したいErlangノードを指定するには、 &lt;code&gt;erl_connect()&lt;/code&gt; を使用します。次の例は、接続をセットアップし、有効なソケットファイル記述子を生成します。</target>
        </trans-unit>
        <trans-unit id="71297d463c83eda2a6c9154b983ee09e837036ff" translate="yes" xml:space="preserve">
          <source>After installation you can access the documentation by</source>
          <target state="translated">インストール後、以下の方法でドキュメントにアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="6b0c5270a184c48e498da3c725b4712069c50f99" translate="yes" xml:space="preserve">
          <source>After matching all six digits and then failing to match &quot;foo&quot;, the normal action of the matcher is to try again with only five digits matching item \d+, and then with four, and so on, before ultimately failing. &quot;Atomic grouping&quot; (a term taken from Jeffrey Friedl's book) provides the means for specifying that once a subpattern has matched, it is not to be re-evaluated in this way.</source>
          <target state="translated">6桁すべてにマッチした後、&quot;foo &quot;にマッチしなかった場合、マッチャーの通常の動作は、項目&quot;\d+&quot;にマッチする5桁の数字だけで再試行し、4桁の数字で再試行してから、最終的に失敗するというものです。&quot;Atomic grouping&quot;(Jeffrey Friedlの本から引用した用語)は、一度マッチしたサブパターンは、このように再評価されないことを指定する手段を提供します。</target>
        </trans-unit>
        <trans-unit id="ae043d6d909deeb13bd861dc2fdf16fc111c0f4f" translate="yes" xml:space="preserve">
          <source>After reading the &lt;code&gt;erts_alloc(3)&lt;/code&gt; documentation, the returned information more or less speaks for itself, but it can be worth explaining some things. Call counts are presented by two values, the first value is giga calls, and the second value is calls. &lt;code&gt;mbcs&lt;/code&gt; and &lt;code&gt;sbcs&lt;/code&gt; denote multi-block carriers, and single-block carriers, respectively. Sizes are presented in bytes. When a size is not presented, it is the amount of something. Sizes and amounts are often presented by three values:</source>
          <target state="translated">&lt;code&gt;erts_alloc(3)&lt;/code&gt; のドキュメントを読んだ後、返された情報は多かれ少なかれそれ自体を物語っていますが、いくつかのことを説明する価値があるかもしれません。コールカウントは2つの値で表されます。最初の値はギガコールで、2番目の値はコールです。 &lt;code&gt;mbcs&lt;/code&gt; と &lt;code&gt;sbcs&lt;/code&gt; は、それぞれマルチブロックキャリアとシングルブロックキャリアを示します。サイズはバイト単位で表示されます。サイズが提示されていない場合、それは何かの量です。サイズと量は、多くの場合3つの値で表されます。</target>
        </trans-unit>
        <trans-unit id="e9095c6393c06f16504fcb2b9e560f38a38a063b" translate="yes" xml:space="preserve">
          <source>After registering the name, use &lt;code&gt;&lt;a href=&quot;erl_connect#erl_accept&quot;&gt;erl_connect:erl_accept&lt;/a&gt;&lt;/code&gt; to wait for incoming connections.</source>
          <target state="translated">名前を登録した後、 &lt;code&gt;&lt;a href=&quot;erl_connect#erl_accept&quot;&gt;erl_connect:erl_accept&lt;/a&gt;&lt;/code&gt; を使用して、着信接続を待ちます。</target>
        </trans-unit>
        <trans-unit id="d3c38468398c9f7ba65583a0574f32622bbcf3f0" translate="yes" xml:space="preserve">
          <source>After sending the message &lt;code&gt;pong&lt;/code&gt; to the process &quot;ping&quot;, &quot;pong&quot; calls the &lt;code&gt;pong&lt;/code&gt; function again, which causes it to get back to the &lt;code&gt;receive&lt;/code&gt; again and wait for another message.</source>
          <target state="translated">プロセス「ping」にメッセージ &lt;code&gt;pong&lt;/code&gt; を送信した後、「pong」は &lt;code&gt;pong&lt;/code&gt; 関数を再度呼び出します。これにより、再びpong関数が &lt;code&gt;receive&lt;/code&gt; 戻り、別のメッセージを待ちます。</target>
        </trans-unit>
        <trans-unit id="e36306045d856ed44b3178bdde7ee2e0ace1e9c1" translate="yes" xml:space="preserve">
          <source>After setting the dictionary the inflate operation should be retried without new input.</source>
          <target state="translated">辞書を設定した後は、新たな入力を行わずにインフレーション操作を再実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="46b2484894cf1b418bcc258ea3f4b87e3bcd685f" translate="yes" xml:space="preserve">
          <source>After testing that the client process exists:</source>
          <target state="translated">クライアントプロセスが存在することをテストした後</target>
        </trans-unit>
        <trans-unit id="22756028dc88f951673801206c8f0149ec02c1b4" translate="yes" xml:space="preserve">
          <source>After the &lt;code&gt;Flags&lt;/code&gt; field follow the &lt;code&gt;AtomCacheRefs&lt;/code&gt;. The first &lt;code&gt;AtomCacheRef&lt;/code&gt; is the one corresponding to &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 0. Higher indices follow in sequence up to index &lt;code&gt;NumberOfAtomCacheRefs - 1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Flags&lt;/code&gt; フィールドの後は &lt;code&gt;AtomCacheRefs&lt;/code&gt; に従います。最初の &lt;code&gt;AtomCacheRef&lt;/code&gt; は、 &lt;code&gt;AtomCacheReferenceIndex&lt;/code&gt; 0に対応するものです。より高いインデックスは、インデックス &lt;code&gt;NumberOfAtomCacheRefs - 1&lt;/code&gt; まで順番に続きます。</target>
        </trans-unit>
        <trans-unit id="dca4e4c96c0a14c7be226e5bd7489709c72d0c43" translate="yes" xml:space="preserve">
          <source>After the application specifications have been updated, the instructions in the script are evaluated and the function returns &lt;code&gt;{ok,OtherVsn,Descr}&lt;/code&gt; if successful. &lt;code&gt;OtherVsn&lt;/code&gt; and &lt;code&gt;Descr&lt;/code&gt; are the version (&lt;code&gt;UpFromVsn&lt;/code&gt; or &lt;code&gt;Vsn&lt;/code&gt;) and description (&lt;code&gt;Descr1&lt;/code&gt; or &lt;code&gt;Descr2&lt;/code&gt;) as specified in the script.</source>
          <target state="translated">アプリケーションの仕様が更新された後、スクリプト内の指示が評価され、成功した場合、関数は &lt;code&gt;{ok,OtherVsn,Descr}&lt;/code&gt; 返します。 &lt;code&gt;OtherVsn&lt;/code&gt; および &lt;code&gt;Descr&lt;/code&gt; は、スクリプトで指定されているバージョン（ &lt;code&gt;UpFromVsn&lt;/code&gt; または &lt;code&gt;Vsn&lt;/code&gt; ）および説明（ &lt;code&gt;Descr1&lt;/code&gt; または &lt;code&gt;Descr2&lt;/code&gt; ）です。</target>
        </trans-unit>
        <trans-unit id="0d4f7a31773a30c9ab44ee914a380f7ad8d9358d" translate="yes" xml:space="preserve">
          <source>After the change, 5 lines are presented as follows:</source>
          <target state="translated">変更後は、以下のように5行が提示されています。</target>
        </trans-unit>
        <trans-unit id="2c691aee72f4af2559c4df9a131c0a55a89cadf0" translate="yes" xml:space="preserve">
          <source>After the database is deleted, it can still be possible to start Mnesia as a disc-less node. This depends on how configuration parameter &lt;code&gt;schema_location&lt;/code&gt; is set.</source>
          <target state="translated">データベースを削除した後でも、Mnesiaをディスクなしのノードとして起動することができます。これは、構成パラメーター &lt;code&gt;schema_location&lt;/code&gt; の設定方法によって異なります。</target>
        </trans-unit>
        <trans-unit id="e4e458fe2735510f2a3f94986ee2e1c2798b1558" translate="yes" xml:space="preserve">
          <source>After the insertion of the employee named &lt;code&gt;klacke&lt;/code&gt;, the database has the following records:</source>
          <target state="translated">&lt;code&gt;klacke&lt;/code&gt; という名前の従業員を挿入すると、データベースには次のレコードが含まれます。</target>
        </trans-unit>
        <trans-unit id="014d2e6e6b7efad4c0429a37b959bc880d48f38c" translate="yes" xml:space="preserve">
          <source>After the installation, the application controller compares the old and new configuration parameters for all running applications and call the callback function:</source>
          <target state="translated">インストール後、アプリケーションコントローラは、実行中のすべてのアプリケーションの新旧の設定パラメータを比較し、コールバック関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="8b5bb17b2c511826d46800999f421579e3ca514c" translate="yes" xml:space="preserve">
          <source>After the restore operation, the entire contents of the registry is marked as unmodified. Notice that this includes any objects that were modified before the restore and not overwritten by the restore.</source>
          <target state="translated">復元操作の後、レジストリの内容全体が変更されていないとマークされます。これには、復元前に変更され、復元によって上書きされなかったオブジェクトも含まれます。</target>
        </trans-unit>
        <trans-unit id="c4f3acb2fc60165a466769fee1869d300231ddf6" translate="yes" xml:space="preserve">
          <source>After the rootsymbol declaration comes an optional declaration of the &lt;code&gt;end_of_input&lt;/code&gt; symbol that your scanner is expected to use. For example:</source>
          <target state="translated">rootsymbol宣言の後に、スキャナーが使用すると予想される &lt;code&gt;end_of_input&lt;/code&gt; シンボルのオプションの宣言が続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="2770f0bd427f63fd51d60a2a398782f6d81807ca" translate="yes" xml:space="preserve">
          <source>After the successful build it's time to patch. The source tree directory, the directory of the installation and the applications to patch are given as arguments to &lt;code&gt;otp_patch_apply&lt;/code&gt;. The dependencies of each application are validated against the applications in the installation and the other applications given as arguments. If a dependency error is detected, the script will be aborted.</source>
          <target state="translated">ビルドが成功したら、パッチを適用します。ソースツリーディレクトリ、インストールのディレクトリ、およびパッチを適用するアプリケーションは、 &lt;code&gt;otp_patch_apply&lt;/code&gt; への引数として指定されます。各アプリケーションの依存関係は、インストール内のアプリケーションおよび引数として指定された他のアプリケーションに対して検証されます。依存関係エラーが検出されると、スクリプトは中止されます。</target>
        </trans-unit>
        <trans-unit id="59c978cfe3812d62d5db4509ebca4d4c5513e4b6" translate="yes" xml:space="preserve">
          <source>After the system has been cross built you can build and install the documentation the same way as after a native build of the system. See the &lt;code&gt;&lt;a href=&quot;install#How-to-Build-and-Install-ErlangOTP_How-to-Build-the-Documentation&quot;&gt;How to Build the Documentation&lt;/a&gt;&lt;/code&gt; section in the &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; document for information on how to build the documentation.</source>
          <target state="translated">システムがクロスビルドされた後、システムのネイティブビルドの後と同じ方法でドキュメントをビルドしてインストールできます。 &lt;code&gt;&lt;a href=&quot;install#How-to-Build-and-Install-ErlangOTP_How-to-Build-the-Documentation&quot;&gt;How to Build the Documentation&lt;/a&gt;&lt;/code&gt; については、 &lt;code&gt;&lt;a href=&quot;install&quot;&gt;$ERL_TOP/HOWTO/INSTALL.md&lt;/a&gt;&lt;/code&gt; ドキュメントの「ドキュメントの作成方法」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="9b3f9b5771b4280d0c55a70767959a27ea46eb52" translate="yes" xml:space="preserve">
          <source>After this is compiled and the file &lt;code&gt;tut19.beam&lt;/code&gt; is copied to the necessary directories, the following is seen on (pong@kosken):</source>
          <target state="translated">これがコンパイルされ、ファイル &lt;code&gt;tut19.beam&lt;/code&gt; が必要なディレクトリにコピーされると、（pong @ kosken）に次のようになります。</target>
        </trans-unit>
        <trans-unit id="e0717a39ec07e9aad70e9e475eae5bb9f752c8e1" translate="yes" xml:space="preserve">
          <source>Again, the &lt;code&gt;relup&lt;/code&gt; file is created manually. Either from scratch or by editing a generated version. Load all code for &lt;code&gt;ch_app&lt;/code&gt; first, and also load the application specification, before &lt;code&gt;prim_sup&lt;/code&gt; is updated. When downgrading, &lt;code&gt;prim_sup&lt;/code&gt; is to updated first, before the code for &lt;code&gt;ch_app&lt;/code&gt; and its application specification are unloaded.</source>
          <target state="translated">ここでも、 &lt;code&gt;relup&lt;/code&gt; ファイルは手動で作成されます。ゼロから、または生成されたバージョンを編集して。 &lt;code&gt;prim_sup&lt;/code&gt; が更新される前に、まず &lt;code&gt;ch_app&lt;/code&gt; のすべてのコードをロードし、アプリケーション仕様もロードします。ダウングレードする場合、 &lt;code&gt;prim_sup&lt;/code&gt; をするためのコードの前に、最初に更新され &lt;code&gt;ch_app&lt;/code&gt; そのアプリケーション仕様がアンロードされています。</target>
        </trans-unit>
        <trans-unit id="1b5e61e0895721c0ebf450f07d288833226aa589" translate="yes" xml:space="preserve">
          <source>Again, this works in Perl, but not in PCRE, and for the same reason. When a deeper recursion has matched a single character, it cannot be entered again to match an empty string. The solution is to separate the two cases, and write out the odd and even cases as alternatives at the higher level:</source>
          <target state="translated">繰り返しになりますが、これはPerlでは動作しますが、PCREでは動作しません。深層の再帰が1文字にマッチした場合、空の文字列にマッチするように再度入力することはできません。解決策は、2つのケースを分離して、奇数と偶数のケースを上位レベルで代替として書き出すことです。</target>
        </trans-unit>
        <trans-unit id="3b2767e308e62a98e4db59a3a9f824fa516512cb" translate="yes" xml:space="preserve">
          <source>Agent configuration:</source>
          <target state="translated">エージェントの設定。</target>
        </trans-unit>
        <trans-unit id="3ec3b79e0abd28ca38f812dac049f7131b92ea23" translate="yes" xml:space="preserve">
          <source>Agent semantics</source>
          <target state="translated">エージェントセマンティクス</target>
        </trans-unit>
        <trans-unit id="292ef3c4e0286769b6dbb07a9c3a55d1d989a61e" translate="yes" xml:space="preserve">
          <source>Agent specific config options and types:</source>
          <target state="translated">エージェント固有の設定オプションとタイプ。</target>
        </trans-unit>
        <trans-unit id="9183ce25ce4e057cce5e3b5d3d28a86f4aa93b15" translate="yes" xml:space="preserve">
          <source>Agents to be accessed by the manager needs to be registered by a user. Once registered, they can be accessed by all registered users.</source>
          <target state="translated">管理者がアクセスするエージェントは、ユーザーが登録する必要があります。登録されたエージェントは、登録されている全てのユーザからアクセスすることができます。</target>
        </trans-unit>
        <trans-unit id="b321e7cb00697b98b1069def622912b90e34756e" translate="yes" xml:space="preserve">
          <source>Aho &amp;amp; Johnson: 'LR Parsing', ACM Computing Surveys, vol. 6:2, 1974.</source>
          <target state="translated">Aho＆Johnson：「LR Parsing」、ACM Computing Surveys、vol。6：2、1974。</target>
        </trans-unit>
        <trans-unit id="8314c1bccd7fbe31d59f08ffd330d112f0923137" translate="yes" xml:space="preserve">
          <source>Aim for finding bugs. Write whatever test that has the highest probability of finding a bug, now or in the future. Concentrate more on the critical parts. Bugs in critical subsystems are much more expensive than others.</source>
          <target state="translated">バグ発見を目指す。今も将来も、バグを発見する確率が最も高いテストを書く。重要な部分に集中する。重要なサブシステムのバグは、他のものよりもはるかに高い。</target>
        </trans-unit>
        <trans-unit id="2e73e04c930e7b3b6a12e1613006c2d06e333b4f" translate="yes" xml:space="preserve">
          <source>Aim for functionality testing rather than implementation details. Implementation details change quite often, and the test suites are to be long lived. Implementation details often differ on different platforms and versions. If implementation details must be tested, try to factor them out into separate test cases. These test cases can later be rewritten or skipped.</source>
          <target state="translated">実装の詳細よりも機能テストを目指す。実装の詳細は頻繁に変更され、テストスイートは長持ちするようにしなければなりません。実装の詳細は、プラットフォームやバージョンによって異なることがよくあります。実装の詳細をテストしなければならない場合は、それらを別々のテストケースにまとめるようにしてください。これらのテストケースは後で書き換えたり、スキップしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="5204c24c2356e334c01209b09953d29e8b1c732c" translate="yes" xml:space="preserve">
          <source>Alarm handling</source>
          <target state="translated">アラーム処理</target>
        </trans-unit>
        <trans-unit id="07994d0d2fea2b8ccddc2fe4a57609e0e8cf0605" translate="yes" xml:space="preserve">
          <source>Alarm, that is, the BEL character (hex 07)</source>
          <target state="translated">アラーム、つまり BEL 文字 (16 進数 07)</target>
        </trans-unit>
        <trans-unit id="44b68bd3aa7ebc745c49072e3fc9224605032491" translate="yes" xml:space="preserve">
          <source>Alarms are reported to the SASL alarm handler, see &lt;code&gt;alarm_handler(3)&lt;/code&gt;. To set an alarm, &lt;code&gt;alarm_handler:set_alarm(Alarm)&lt;/code&gt; is called where &lt;code&gt;Alarm&lt;/code&gt; is either of the alarms specified above.</source>
          <target state="translated">アラームはSASLアラームハンドラーに報告されます &lt;code&gt;alarm_handler(3)&lt;/code&gt; 参照してください。アラームを設定するには、 &lt;code&gt;alarm_handler:set_alarm(Alarm)&lt;/code&gt; を呼び出します。ここで、 &lt;code&gt;Alarm&lt;/code&gt; は上記で指定したアラームのいずれかです。</target>
        </trans-unit>
        <trans-unit id="0f8dd2eebf6d2846565db4f8d38173a2b29d2814" translate="yes" xml:space="preserve">
          <source>Alarms are reported to the SASL alarm handler, see &lt;code&gt;alarm_handler(3)&lt;/code&gt;. To set an alarm, &lt;code&gt;alarm_handler:set_alarm(Alarm)&lt;/code&gt; is called where &lt;code&gt;Alarm&lt;/code&gt; is the alarm specified above.</source>
          <target state="translated">アラームはSASLアラームハンドラーに報告されます &lt;code&gt;alarm_handler(3)&lt;/code&gt; 参照してください。アラームを設定するには、 &lt;code&gt;alarm_handler:set_alarm(Alarm)&lt;/code&gt; を呼び出します。ここで、 &lt;code&gt;Alarm&lt;/code&gt; は上記で指定したアラームです。</target>
        </trans-unit>
        <trans-unit id="84ce7c0201c306089cc2d312b83151f452054aab" translate="yes" xml:space="preserve">
          <source>Alas some drivers only support sequential traversal of the result set, e.i. they do not support what in the ODBC world is known as scrollable cursors. This will have the effect that functions such as &lt;code&gt;first/[1,2]&lt;/code&gt;, &lt;code&gt;last/[1,2]&lt;/code&gt;, &lt;code&gt;prev[1,2]&lt;/code&gt;, etc will return &lt;code&gt;{error, driver_does_not_support_function}&lt;/code&gt;</source>
          <target state="translated">残念ながら、一部のドライバーは、ODBCの世界ではスクロール可能なカーソルと呼ばれるものをサポートしていないため、結果セットの順次走査しかサポートしていません。これにより、 &lt;code&gt;first/[1,2]&lt;/code&gt; 、 &lt;code&gt;last/[1,2]&lt;/code&gt; 、 &lt;code&gt;prev[1,2]&lt;/code&gt; などの &lt;code&gt;{error, driver_does_not_support_function}&lt;/code&gt; を返すという効果があります。</target>
        </trans-unit>
        <trans-unit id="f3544e748508a0bbd0fc5c633ca3118ece8b0800" translate="yes" xml:space="preserve">
          <source>Algorithm &lt;code&gt;dss&lt;/code&gt; can only be used together with digest type &lt;code&gt;sha&lt;/code&gt;.</source>
          <target state="translated">アルゴリズム &lt;code&gt;dss&lt;/code&gt; は、ダイジェストタイプ &lt;code&gt;sha&lt;/code&gt; と一緒にのみ使用できます。</target>
        </trans-unit>
        <trans-unit id="37c4127ccfb7b20befe4cb97e24121c28c2f7f1f" translate="yes" xml:space="preserve">
          <source>Algorithm specific internal state</source>
          <target state="translated">アルゴリズム固有の内部状態</target>
        </trans-unit>
        <trans-unit id="f502ff90b179f9e55f8a7ae7ffe6d44ac52ffa57" translate="yes" xml:space="preserve">
          <source>Algorithm-dependent state that can be printed or saved to file.</source>
          <target state="translated">アルゴリズムに依存した状態で、印刷やファイルへの保存が可能です。</target>
        </trans-unit>
        <trans-unit id="75ed735ab6b662cd2ed59461e6465ca8ad02da5f" translate="yes" xml:space="preserve">
          <source>Algorithm-dependent state.</source>
          <target state="translated">アルゴリズムに依存した状態。</target>
        </trans-unit>
        <trans-unit id="d44cc1b551df7badcd7a33c05306605d60158636" translate="yes" xml:space="preserve">
          <source>Algorithms for directed graphs.</source>
          <target state="translated">有向グラフのアルゴリズム.</target>
        </trans-unit>
        <trans-unit id="479976d6e7303ea1ee63388a8b2e770b0c6d7167" translate="yes" xml:space="preserve">
          <source>Alivename, &lt;code&gt;alive&lt;/code&gt;</source>
          <target state="translated">アライブネーム、 &lt;code&gt;alive&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="113679e7d7df16876eb31c71a0f678be963054d7" translate="yes" xml:space="preserve">
          <source>All &quot;function calls&quot; must be tuples, even if they take no arguments. The value of &lt;code&gt;self&lt;/code&gt; is the atom() &lt;code&gt;self&lt;/code&gt;, but the value of &lt;code&gt;{self}&lt;/code&gt; is the pid() of the current process.</source>
          <target state="translated">引数を取らなくても、すべての「関数呼び出し」はタプルでなければなりません。 &lt;code&gt;self&lt;/code&gt; の値はatom（） &lt;code&gt;self&lt;/code&gt; ですが、 &lt;code&gt;{self}&lt;/code&gt; の値は現在のプロセスのpid（）です。</target>
        </trans-unit>
        <trans-unit id="c96f50147ab1ef9d7a93bb31a493f340cbc1ac77" translate="yes" xml:space="preserve">
          <source>All (in)direct calls from functions in &lt;code&gt;toolbar&lt;/code&gt; to functions in &lt;code&gt;debugger&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;toolbar&lt;/code&gt; 関数から &lt;code&gt;debugger&lt;/code&gt; 関数へのすべての（間接）呼び出し。</target>
        </trans-unit>
        <trans-unit id="089083e2c94f89536494899703365f0e8ddff6fd" translate="yes" xml:space="preserve">
          <source>All (locally) mounted disks are checked, including the swap disk if it is present.</source>
          <target state="translated">すべての (ローカルに)マウントされたディスクがチェックされ、スワップディスクがあればそれもチェックされます。</target>
        </trans-unit>
        <trans-unit id="f677675819b8b0d1f1b80ed411e21b154b117015" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;actions&lt;/a&gt;&lt;/code&gt; are processed in order of appearance.</source>
          <target state="translated">すべての &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;actions&lt;/a&gt;&lt;/code&gt; は、出現順に処理されます。</target>
        </trans-unit>
        <trans-unit id="05aeddfde77656e8d62c4f7d53fc3c8c4d3ed5c3" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;LevelEntry&lt;/code&gt;s of a list must contain the same &lt;code&gt;LevelTag&lt;/code&gt;, except on the top level where both &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;processor&lt;/code&gt;&lt;code&gt;LevelTag&lt;/code&gt;s can coexist.    &lt;code&gt;{LevelTag, SubLevel} == {LevelTag, [], SubLevel}&lt;/code&gt;    More &lt;code&gt;LevelTag&lt;/code&gt;s can be introduced in a future release.     The &lt;code&gt;info_list()&lt;/code&gt; can be extended in a future release.</source>
          <target state="translated">リストのすべての &lt;code&gt;LevelEntry&lt;/code&gt; には、 &lt;code&gt;node&lt;/code&gt; と &lt;code&gt;processor&lt;/code&gt; 両方の &lt;code&gt;LevelTag&lt;/code&gt; が共存できるトップレベルを除いて、同じ &lt;code&gt;LevelTag&lt;/code&gt; が含まれている必要があります。 &lt;code&gt;{LevelTag, SubLevel} == {LevelTag, [], SubLevel}&lt;/code&gt; 今後のリリースでは、 さらに多くの &lt;code&gt;LevelTag&lt;/code&gt; が導入される可能性があります。 &lt;code&gt;info_list()&lt;/code&gt; は、将来のリリースで拡張することができます。</target>
        </trans-unit>
        <trans-unit id="6724788c6ade526686ec55a7af8484e09d219146" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;cth_conn_log&lt;/code&gt; hook options described can also be specified in a configuration file with configuration variable &lt;code&gt;ct_conn_log&lt;/code&gt;.</source>
          <target state="translated">説明されているすべての &lt;code&gt;cth_conn_log&lt;/code&gt; フックオプションは、構成変数 &lt;code&gt;ct_conn_log&lt;/code&gt; を使用して構成ファイルで指定することもできます。</target>
        </trans-unit>
        <trans-unit id="8a4b3de223153d6148caabecc5ca1ade2664a14a" translate="yes" xml:space="preserve">
          <source>All &lt;code&gt;snmp&lt;/code&gt; counters are set to zero.</source>
          <target state="translated">すべての &lt;code&gt;snmp&lt;/code&gt; カウンターはゼロに設定されます。</target>
        </trans-unit>
        <trans-unit id="1518061c2a50f94ff59e63daeae206bdc35745d1" translate="yes" xml:space="preserve">
          <source>All &lt;strong&gt;named&lt;/strong&gt; subpatterns in the regular expression, as if a &lt;code&gt;list()&lt;/code&gt; of all the names &lt;strong&gt;in alphabetical order&lt;/strong&gt; was specified. The list of all names can also be retrieved with &lt;code&gt;&lt;a href=&quot;#inspect-2&quot;&gt;inspect/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">すべての&lt;strong&gt;名前付き&lt;/strong&gt;正規表現でサブパターン、かのように &lt;code&gt;list()&lt;/code&gt; すべての名前のを&lt;strong&gt;アルファベット順に&lt;/strong&gt;指定されました。すべての名前のリストは、 &lt;code&gt;&lt;a href=&quot;#inspect-2&quot;&gt;inspect/2&lt;/a&gt;&lt;/code&gt; でも取得できます。</target>
        </trans-unit>
        <trans-unit id="c4916d63a32f5bd45e8c8ebc0b371a252007867f" translate="yes" xml:space="preserve">
          <source>All API functions that update the index return a &lt;code&gt;NewIndex&lt;/code&gt; term. This is for backward compatibility with a previous implementation that used a B+ tree written purely in Erlang for the index. The &lt;code&gt;NewIndex&lt;/code&gt; return value can now be ignored. The return value is now the unchanged table identifier for the ets table.</source>
          <target state="translated">インデックスを更新するすべてのAPI関数は、 &lt;code&gt;NewIndex&lt;/code&gt; 用語を返します。これは、インデックスに純粋にErlangで記述されたB +ツリーを使用した以前の実装との下位互換性のためです。 &lt;code&gt;NewIndex&lt;/code&gt; 戻り値は現在、無視することができます。これで、戻り値はetsテーブルの変更されていないテーブル識別子になります。</target>
        </trans-unit>
        <trans-unit id="508db9dc0ec99907c00ed0f8830bf421e130f560" translate="yes" xml:space="preserve">
          <source>All API-functions are guarded and if you pass an argument of the wrong type a runtime error will occur. All input parameters to internal functions are trusted to be correct. It is a good programming practise to only distrust input from truly external sources. You are not supposed to catch these errors, it will only make the code very messy and much more complex, which introduces more bugs and in the worst case also covers up the actual faults. Put your effort on testing instead, you should trust your own input.</source>
          <target state="translated">すべてのAPI関数はガードされており、間違った型の引数を渡すと実行時エラーが発生します。内部関数へのすべての入力パラメータは正しいと信頼されています。本当に外部のソースからの入力だけを信頼しないのは、プログラミングの良い習慣です。これらのエラーをキャッチしてはいけないと考えられています。その代わりにテストに力を注ぎ、自分の入力を信頼すべきです。</target>
        </trans-unit>
        <trans-unit id="00ff4622a14c4c7f7fbaab2bf437fe6ca8d16292" translate="yes" xml:space="preserve">
          <source>All DTLS versions supported by the SSL application. DTLS 1.2 requires sufficient support from the Crypto application.</source>
          <target state="translated">SSL アプリケーションでサポートされているすべての DTLS バージョン。DTLS 1.2 は、Crypto アプリケーションからの十分なサポートが必要です。</target>
        </trans-unit>
        <trans-unit id="59b704215a27754dabda2c983777a71cd473ecc4" translate="yes" xml:space="preserve">
          <source>All Dets functions return &lt;code&gt;{error, Reason}&lt;/code&gt; if an error occurs (&lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; are exceptions, they exit the process with the error tuple). If badly formed arguments are specified, all functions exit the process with a &lt;code&gt;badarg&lt;/code&gt; message.</source>
          <target state="translated">すべてのDets関数は、エラーが発生した場合に &lt;code&gt;{error, Reason}&lt;/code&gt; 返します（ &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; は例外であり、エラータプルでプロセスを終了します）。 &lt;code&gt;badarg&lt;/code&gt; 引数が指定されている場合、すべての関数がbadargメッセージでプロセスを終了します。</target>
        </trans-unit>
        <trans-unit id="6860af1b417f061473f28a251963ae51220b55b4" translate="yes" xml:space="preserve">
          <source>All Erlang processes have a default standard I/O device. This device is used when no &lt;code&gt;IoDevice&lt;/code&gt; argument is specified in the function calls in this module. However, it is sometimes desirable to use an explicit &lt;code&gt;IoDevice&lt;/code&gt; argument that refers to the default I/O device. This is the case with functions that can access either a file or the default I/O device. The atom &lt;code&gt;standard_io&lt;/code&gt; has this special meaning. The following example illustrates this:</source>
          <target state="translated">すべてのErlangプロセスには、デフォルトの標準I / Oデバイスがあります。このデバイスは、このモジュールの関数呼び出しで &lt;code&gt;IoDevice&lt;/code&gt; 引数が指定されていない場合に使用されます。ただし、デフォルトのI / Oデバイスを参照する &lt;code&gt;IoDevice&lt;/code&gt; 引数を明示的に使用することが望ましい場合があります。これは、ファイルまたはデフォルトのI / Oデバイスにアクセスできる関数の場合です。アトム &lt;code&gt;standard_io&lt;/code&gt; には、この特別な意味があります。次の例はこれを示しています。</target>
        </trans-unit>
        <trans-unit id="97b951c1c805c5f05124e900fd4fa56864d49618" translate="yes" xml:space="preserve">
          <source>All Erlang types are the string equivalent in LTTng.</source>
          <target state="translated">Erlangの型はすべてLTTngでは文字列に相当します。</target>
        </trans-unit>
        <trans-unit id="d9f521ade6fc1dd9350ccff9c5983982a41844ce" translate="yes" xml:space="preserve">
          <source>All Erlang/OTP applications except the &lt;code&gt;wx&lt;/code&gt; application can be cross compiled. The build of the &lt;code&gt;wx&lt;/code&gt; driver will currently be automatically disabled when cross compiling.</source>
          <target state="translated">&lt;code&gt;wx&lt;/code&gt; アプリケーションを除くすべてのErlang / OTPアプリケーションはクロスコンパイルできます。 &lt;code&gt;wx&lt;/code&gt; ドライバーのビルドは現在、クロスコンパイル時に自動的に無効になります。</target>
        </trans-unit>
        <trans-unit id="5ad88821804527519cf8d8d810f3204aedf5bf2e" translate="yes" xml:space="preserve">
          <source>All I/O from the port is binary data objects as opposed to lists of bytes.</source>
          <target state="translated">ポートからのすべてのI/Oは、バイトのリストとは対照的に、バイナリデータオブジェクトです。</target>
        </trans-unit>
        <trans-unit id="2dd52ee361652541899aa325d9fd9f53e18c02c1" translate="yes" xml:space="preserve">
          <source>All Mnesia transactions, including all the schema update functions, either return value &lt;code&gt;{atomic, Val}&lt;/code&gt; or the tuple &lt;code&gt;{aborted, Reason}&lt;/code&gt;. &lt;code&gt;Reason&lt;/code&gt; can be either of the atoms in the following list. The function &lt;code&gt;error_description/1&lt;/code&gt; returns a descriptive string that describes the error.</source>
          <target state="translated">すべてのスキーマ更新関数を含むすべてのMnesiaトランザクションは、戻り値 &lt;code&gt;{atomic, Val}&lt;/code&gt; またはタプル &lt;code&gt;{aborted, Reason}&lt;/code&gt; いずれかです。 &lt;code&gt;Reason&lt;/code&gt; は、次のリストのいずれかのアトムです。関数 &lt;code&gt;error_description/1&lt;/code&gt; は、エラーを説明する説明文字列を返します。</target>
        </trans-unit>
        <trans-unit id="4d3c60202c3777ca90cba552fcd0b5e85782d21a" translate="yes" xml:space="preserve">
          <source>All NIFs of a module must have an Erlang implementation as well.</source>
          <target state="translated">モジュールのすべてのNIFはErlangの実装も持っていなければなりません。</target>
        </trans-unit>
        <trans-unit id="a725195324a4bf0385d8cc76f623d576b9073dd8" translate="yes" xml:space="preserve">
          <source>All ProcBin objects in a process are part of a linked list, so that the garbage collector can keep track of them and decrement the reference counters in the binary when a ProcBin disappears.</source>
          <target state="translated">プロセス内のすべてのProcBinオブジェクトはリンクされたリストの一部なので、ガベージコレクタはそれらを追跡し、ProcBinが消えたときにバイナリ内の参照カウンタをデクリメントすることができます。</target>
        </trans-unit>
        <trans-unit id="ea090b0550d7e3c8580dc19d0e4eca0afcac1702" translate="yes" xml:space="preserve">
          <source>All SASL reports have a metadata field &lt;code&gt;domain&lt;/code&gt; which is set to &lt;code&gt;[otp,sasl]&lt;/code&gt;. This field can be used by filters to stop or allow the log events.</source>
          <target state="translated">すべてのSASLレポートには、 &lt;code&gt;[otp,sasl]&lt;/code&gt; 設定されたメタデータフィールド &lt;code&gt;domain&lt;/code&gt; あります。このフィールドは、ログイベントを停止または許可するフィルターで使用できます。</target>
        </trans-unit>
        <trans-unit id="4f15754d3db80f2fdc54c4817ccee09d053bbbf8" translate="yes" xml:space="preserve">
          <source>All SSL and TLS versions prior to TLS 1.2 use a combination of md5 and sha1 hashes in the handshake for various purposes:</source>
          <target state="translated">TLS 1.2以前のすべてのSSLとTLSのバージョンは、さまざまな目的のためにハンドシェイクでmd5とsha1ハッシュの組み合わせを使用しています。</target>
        </trans-unit>
        <trans-unit id="4d20ed1ea888788dca7c3c5db66c577a283406e7" translate="yes" xml:space="preserve">
          <source>All SSL/TLS versions supported by the SSL application. TLS 1.2 requires sufficient support from the Crypto application.</source>
          <target state="translated">SSLアプリケーションでサポートされているすべてのSSL/TLSバージョン。TLS 1.2はCryptoアプリケーションからの十分なサポートが必要です。</target>
        </trans-unit>
        <trans-unit id="68fce467cd9e8e0d201b3f589073cfe5fb95d32d" translate="yes" xml:space="preserve">
          <source>All TCP socket options are accepted except &lt;code&gt;active&lt;/code&gt;, &lt;code&gt;binary&lt;/code&gt;, &lt;code&gt;deliver&lt;/code&gt;, &lt;code&gt;list&lt;/code&gt;, &lt;code&gt;mode&lt;/code&gt; and &lt;code&gt;packet&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;active&lt;/code&gt; 、 &lt;code&gt;binary&lt;/code&gt; 、 &lt;code&gt;deliver&lt;/code&gt; 、 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;mode&lt;/code&gt; 、 &lt;code&gt;packet&lt;/code&gt; を除くすべてのTCPソケットオプションが受け入れられます</target>
        </trans-unit>
        <trans-unit id="a5b34ac6bc99e27ebc78ae9ef663f69f3aa7a65b" translate="yes" xml:space="preserve">
          <source>All Unicode newline sequences</source>
          <target state="translated">すべての Unicode 改行シーケンス</target>
        </trans-unit>
        <trans-unit id="2dbd3097b8923c397d9061270fd4c85d43474de4" translate="yes" xml:space="preserve">
          <source>All access files in the path to a requested asset are read once per request. This means that the load on the server increases when &lt;code&gt;htaccess&lt;/code&gt; is used.</source>
          <target state="translated">リクエストされたアセットへのパスにあるすべてのアクセスファイルは、リクエストごとに1回読み込まれます。つまり、 &lt;code&gt;htaccess&lt;/code&gt; を使用すると、サーバーの負荷が増加します。</target>
        </trans-unit>
        <trans-unit id="b65f417a9d96a9f2d2511f358eeb52c2d5221959" translate="yes" xml:space="preserve">
          <source>All allocators based on &lt;code&gt;alloc_util&lt;/code&gt; are effected.</source>
          <target state="translated">&lt;code&gt;alloc_util&lt;/code&gt; に基づくすべてのアロケーターが影響を受けます。</target>
        </trans-unit>
        <trans-unit id="487ed78b0938a6d1f8103db69e76299ed79ed19c" translate="yes" xml:space="preserve">
          <source>All application directories found in the additional directories appears before the standard OTP applications, except for the Kernel and STDLIB applications, which are placed before any additional applications. In other words, modules found in any of the additional library directories override modules with the same name in OTP, except for modules in Kernel and STDLIB.</source>
          <target state="translated">追加ディレクトリ内にあるすべてのアプリケーションディレクトリは、標準の OTP アプリケーションの前に表示されますが、Kernel と STDLIB アプリケーションは追加アプリケーションの前に配置されます。言い換えれば、追加ライブラリディレクトリのいずれかにあるモジュールは、Kernel と STDLIB のモジュールを除いて、OTP で同じ名前のモジュールを上書きします。</target>
        </trans-unit>
        <trans-unit id="aed81dd75a1fe5a5f216237b2556bd6822c73c1d" translate="yes" xml:space="preserve">
          <source>All applications are taken down smoothly, all code is unloaded, and all ports are closed before the system terminates by calling &lt;code&gt;halt(Status)&lt;/code&gt;. If command-line flag &lt;code&gt;-heart&lt;/code&gt; was specified, the &lt;code&gt;heart&lt;/code&gt; program is terminated before the Erlang node terminates. For more information, see &lt;code&gt;heart(3)&lt;/code&gt;.</source>
          <target state="translated">すべてのアプリケーションがスムーズに停止し、すべてのコードがアンロードされ、システムが &lt;code&gt;halt(Status)&lt;/code&gt; を呼び出して終了する前にすべてのポートが閉じられます。コマンドラインフラグ &lt;code&gt;-heart&lt;/code&gt; が指定された場合、Erlangノードが終了する前に &lt;code&gt;heart&lt;/code&gt; プログラムが終了します。詳細については、 &lt;code&gt;heart(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="d181c1e78cebe0843b022cbfb70d621d01c1feeb" translate="yes" xml:space="preserve">
          <source>All applications are taken down smoothly, all code is unloaded, and all ports are closed before the system terminates. If command-line flag &lt;code&gt;-heart&lt;/code&gt; was specified, the &lt;code&gt;heart&lt;/code&gt; program tries to reboot the system. For more information, see &lt;code&gt;heart(3)&lt;/code&gt;.</source>
          <target state="translated">すべてのアプリケーションがスムーズに停止し、すべてのコードがアンロードされ、システムが終了する前にすべてのポートが閉じられます。コマンドラインフラグ &lt;code&gt;-heart&lt;/code&gt; が指定されている場合、 &lt;code&gt;heart&lt;/code&gt; プログラムはシステムの再起動を試みます。詳細については、 &lt;code&gt;heart(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="31bd3e3bf18b14bb65fb12d63888c9cd0d2fd4b0" translate="yes" xml:space="preserve">
          <source>All applications included by this application. When this application is started, all included applications are loaded automatically, but not started, by the application controller. It is assumed that the top-most supervisor of the included application is started by a supervisor of this application.</source>
          <target state="translated">このアプリケーションに含まれるすべてのアプリケーション。このアプリケーションが起動されると、含まれるすべてのアプリケーションは、アプリケーションコントローラによって自動的にロードされますが、起動されることはありません。インクルードされたアプリケーションの最上位のスーパバイザが、このアプリケーションのスーパバイザによって起動されていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="240f8d13b43d7ee3cac18e5842f7f15a95cd9de5" translate="yes" xml:space="preserve">
          <source>All applications that must be started before this application is allowed to be started. &lt;code&gt;systools&lt;/code&gt; uses this list to generate correct start scripts. Defaults to the empty list, but notice that all applications have dependencies to (at least) Kernel and STDLIB.</source>
          <target state="translated">このアプリケーションの開始を許可する前に開始する必要があるすべてのアプリケーション。 &lt;code&gt;systools&lt;/code&gt; はこのリストを使用して、正しい起動スクリプトを生成します。デフォルトは空のリストですが、すべてのアプリケーションが（少なくとも）カーネルとSTDLIBに依存していることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8d2add5c786e4437232e07f68f555e8cec5d10a4" translate="yes" xml:space="preserve">
          <source>All available ports in the Erlang emulator are in use.</source>
          <target state="translated">Erlangエミュレータで利用可能なすべてのポートが使用されています。</target>
        </trans-unit>
        <trans-unit id="f84b54afc405de6cbd2ad11831864c463f1ea3fa" translate="yes" xml:space="preserve">
          <source>All available probes can be listed like this:</source>
          <target state="translated">使用可能なプローブはすべてこのようにリストアップすることができます。</target>
        </trans-unit>
        <trans-unit id="99d3b3bbd1737cb224eb46fd66ec80e666cf1f66" translate="yes" xml:space="preserve">
          <source>All binary operators are left associative; for instance, &lt;code&gt;A&amp;nbsp;|&amp;nbsp;B &amp;nbsp;||&amp;nbsp;C&lt;/code&gt; is equivalent to &lt;code&gt;(A&amp;nbsp;|&amp;nbsp;B)&amp;nbsp;||&amp;nbsp;C&lt;/code&gt;. The following is a list of all operators, in increasing order of  &lt;strong id=&quot;precedence&quot;&gt;precedence&lt;/strong&gt;:</source>
          <target state="translated">すべての二項演算子は結合されたままです。たとえば、 &lt;code&gt;A&amp;nbsp;|&amp;nbsp;B &amp;nbsp;||&amp;nbsp;C&lt;/code&gt; は &lt;code&gt;(A&amp;nbsp;|&amp;nbsp;B)&amp;nbsp;||&amp;nbsp;C&lt;/code&gt; と同等です。C。以下は、&lt;strong id=&quot;precedence&quot;&gt;優先順位の&lt;/strong&gt;昇順でのすべての演算子のリストです 。</target>
        </trans-unit>
        <trans-unit id="4eba54c164609c10e1724efde1b5a4f8594b594d" translate="yes" xml:space="preserve">
          <source>All but the first matching subpattern, that is, all explicitly captured subpatterns, but not the complete matching part of the subject string. This is useful if the regular expression as a whole matches a large part of the subject, but the part you are interested in is in an explicitly captured subpattern. If the return type is &lt;code&gt;list&lt;/code&gt; or &lt;code&gt;binary&lt;/code&gt;, not returning subpatterns you are not interested in is a good way to optimize.</source>
          <target state="translated">最初に一致するサブパターンを除くすべて、つまり、明示的にキャプチャされたすべてのサブパターン。ただし、対象文字列の完全に一致する部分ではありません。これは、正規表現が全体として件名の大部分と一致するが、関心のある部分が明示的にキャプチャされたサブパターンにある場合に役立ちます。戻り値の型が &lt;code&gt;list&lt;/code&gt; または &lt;code&gt;binary&lt;/code&gt; の場合、関心のないサブパターンを返さないことは、最適化の良い方法です。</target>
        </trans-unit>
        <trans-unit id="b4ba388e0b6829ee7e6b0f29a6f89a7986b6d983" translate="yes" xml:space="preserve">
          <source>All calls are stored in the history buffer and can be recalled and stored in a configuration file. This makes it easy to set up the same trace environment, for example, if you want to compare two test runs. It also reduces the amount of typing when using &lt;code&gt;ttb&lt;/code&gt; from the Erlang shell.</source>
          <target state="translated">すべての呼び出しは履歴バッファに保存され、呼び出して構成ファイルに保存できます。これにより、たとえば2つのテスト実行を比較する場合などに、同じトレース環境を簡単に設定できます。また、Erlangシェルから &lt;code&gt;ttb&lt;/code&gt; を使用する場合のタイピングの量を減らします。</target>
        </trans-unit>
        <trans-unit id="b75423c77806558051eb62cb5b02445cef05ff93" translate="yes" xml:space="preserve">
          <source>All calls that have both an external and a local version.</source>
          <target state="translated">外部バージョンとローカルバージョンの両方を持つすべての呼び出し。</target>
        </trans-unit>
        <trans-unit id="d0fd374788e00e86bd43e2341f520f508c4c7e7e" translate="yes" xml:space="preserve">
          <source>All calls to &lt;code&gt;ttb&lt;/code&gt; is stored in the history. This function returns the current content of the history. Any entry can be reexecuted with &lt;code&gt;run_history/1&lt;/code&gt; or stored in a configuration file with &lt;code&gt;write_config/2,3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ttb&lt;/code&gt; へのすべての呼び出しは履歴に保存されます。この関数は、履歴の現在の内容を返します。エントリは、 &lt;code&gt;run_history/1&lt;/code&gt; を使用して再実行するか、 &lt;code&gt;write_config/2,3&lt;/code&gt; を使用して構成ファイルに保存できます。</target>
        </trans-unit>
        <trans-unit id="5bbe19e21b0c2eee883cf8913cd7724d259725e7" translate="yes" xml:space="preserve">
          <source>All calls within the Kernel application.</source>
          <target state="translated">カーネル アプリケーション内のすべての呼び出し。</target>
        </trans-unit>
        <trans-unit id="d69e89620f8a9f9e87b4eee0b38ab9d9d4411b86" translate="yes" xml:space="preserve">
          <source>All captured subpatterns including the complete matching string. This is the default.</source>
          <target state="translated">完全に一致する文字列を含む、キャプチャされたすべてのサブパターン。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="34abf6827e137ec9ba4d30877ba27c48b7d401ae" translate="yes" xml:space="preserve">
          <source>All characters needs to be valid characters on the specific OS using &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;file:native_name_encoding()&lt;/a&gt;&lt;/code&gt; encoding. Note that specifically null characters (integer value zero) are not allowed. However, note that not all invalid characters not necessarily will cause &lt;code&gt;&lt;a href=&quot;#cmd-1&quot;&gt;os:cmd/1&lt;/a&gt;&lt;/code&gt; to fail, but may instead produce invalid results.</source>
          <target state="translated">すべての文字は、 &lt;code&gt;&lt;a href=&quot;file#native_name_encoding-0&quot;&gt;file:native_name_encoding()&lt;/a&gt;&lt;/code&gt; エンコーディングを使用する特定のOSで有効な文字である必要があります。特にnull文字（整数値0）は許可されないことに注意してください。ただし、すべての無効な文字が必ずしも &lt;code&gt;&lt;a href=&quot;#cmd-1&quot;&gt;os:cmd/1&lt;/a&gt;&lt;/code&gt; を失敗させるわけではなく、代わりに無効な結果を生成する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="9ccc47d84718cbe0754906ab548e6f0d0c99ed92" translate="yes" xml:space="preserve">
          <source>All checks with function &lt;code&gt;&lt;a href=&quot;#make_script-1&quot;&gt;make_script&lt;/a&gt;&lt;/code&gt; are performed before the release package is created. Options &lt;code&gt;src_tests&lt;/code&gt; and &lt;code&gt;exref&lt;/code&gt; are also valid here.</source>
          <target state="translated">関数 &lt;code&gt;&lt;a href=&quot;#make_script-1&quot;&gt;make_script&lt;/a&gt;&lt;/code&gt; によるすべてのチェックは、リリースパッケージが作成される前に実行されます。オプション &lt;code&gt;src_tests&lt;/code&gt; および &lt;code&gt;exref&lt;/code&gt; もここで有効です。</target>
        </trans-unit>
        <trans-unit id="2a363a443c582c3241bf4c750bee059e7cc5f662" translate="yes" xml:space="preserve">
          <source>All communication between Erlang and C must be established by creating the port. The Erlang process that creates a port is said to be &lt;strong&gt;the connected process&lt;/strong&gt; of the port. All communication to and from the port must go through the connected process. If the connected process terminates, the port also terminates (and the external program, if it is written properly).</source>
          <target state="translated">ErlangとCの間のすべての通信は、ポートを作成することによって確立する必要があります。ポートを作成するErlangプロセスは、ポート&lt;strong&gt;の接続プロセス&lt;/strong&gt;と呼ばれます。ポートとの間のすべての通信は、接続されたプロセスを経由する必要があります。接続されたプロセスが終了すると、ポートも終了します（適切に記述されている場合は外部プログラムも）。</target>
        </trans-unit>
        <trans-unit id="eb709283e324b3781c25b7de16d1f666dbdb72e8" translate="yes" xml:space="preserve">
          <source>All configuration data must be included in configuration files that are located in the configuration directory. The name of this directory is given in the &lt;code&gt;config_dir&lt;/code&gt; configuration parameter. These files are read at start-up, and are used to initialize the SNMPv2-MIB or STANDARD-MIB, SNMP-FRAMEWORK-MIB, SNMP-MPD-MIB, SNMP-VIEW-BASED-ACM-MIB, SNMP-COMMUNITY-MIB, SNMP-USER-BASED-SM-MIB, SNMP-TARGET-MIB and SNMP-NOTIFICATION-MIB (refer to the &lt;code&gt;&lt;a href=&quot;snmp_agent_funct_descr#management&quot;&gt;Management of the Agent&lt;/a&gt;&lt;/code&gt; for a description of the MIBs).</source>
          <target state="translated">すべての構成データは、構成ディレクトリにある構成ファイルに含まれている必要があります。このディレクトリーの名前は、 &lt;code&gt;config_dir&lt;/code&gt; 構成パラメーターで指定されます。これらのファイルは起動時に読み取られ、SNMPv2-MIBまたはSTANDARD-MIB、SNMP-FRAMEWORK-MIB、SNMP-MPD-MIB、SNMP-VIEW-BASED-ACM-MIB、SNMP-COMMUNITY-MIBを初期化するために使用されます、SNMP-USER-BASED-SM-MIB、SNMP-TARGET-MIB、SNMP-NOTIFICATION-MIB（MIB の説明については、 &lt;code&gt;&lt;a href=&quot;snmp_agent_funct_descr#management&quot;&gt;Management of the Agent&lt;/a&gt;&lt;/code&gt; の管理を参照してください）。</target>
        </trans-unit>
        <trans-unit id="8fb98e168e1cdf700c77f9c617ec623e357237e5" translate="yes" xml:space="preserve">
          <source>All configuration parameters can be set at start by adding &lt;code&gt;-OptName Value&lt;/code&gt; to the command line, for example:</source>
          <target state="translated">コマンドラインに &lt;code&gt;-OptName Value&lt;/code&gt; を追加することで、すべての構成パラメーターを最初に設定できます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="e34d05132c3363672c983606c16c8b3f4cd48ded" translate="yes" xml:space="preserve">
          <source>All contained terms of a list/tuple/map must belong to the same environment as the list/tuple/map itself. Terms can be copied between environments with &lt;code&gt;&lt;a href=&quot;#enif_make_copy&quot;&gt;enif_make_copy&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">リスト/タプル/マップに含まれるすべての用語は、リスト/タプル/マップ自体と同じ環境に属している必要があります。 &lt;code&gt;&lt;a href=&quot;#enif_make_copy&quot;&gt;enif_make_copy&lt;/a&gt;&lt;/code&gt; を使用すると、用語を環境間でコピーできます。</target>
        </trans-unit>
        <trans-unit id="17c9652ae90aa032b597d6483480d6b35f039ee7" translate="yes" xml:space="preserve">
          <source>All created threads must be joined by the driver before it is unloaded. If the driver fails to join all threads created before it is unloaded, the runtime system most likely crashes when the driver code is unloaded.</source>
          <target state="translated">作成されたすべてのスレッドは、アンロードされる前にドライバによって結合されなければなりません。ドライバがアンロードされる前に作成されたすべてのスレッドを結合できない場合、ドライバコードがアンロードされたときにランタイムシステムがクラッシュする可能性が高いです。</target>
        </trans-unit>
        <trans-unit id="b1b81e568bd7b5d5fd8f96a201883e60680fff00" translate="yes" xml:space="preserve">
          <source>All currently existing ports and all that will be created in the future.</source>
          <target state="translated">現在存在するすべてのポートと、今後作成されるすべてのポート。</target>
        </trans-unit>
        <trans-unit id="bc6ddc7f5e7f3a0bc6a355b03f78b8fb8d4e520a" translate="yes" xml:space="preserve">
          <source>All currently existing ports.</source>
          <target state="translated">現在存在するすべてのポート。</target>
        </trans-unit>
        <trans-unit id="f5bd9e7d7b44e072c90e6f8dda758c22961a860e" translate="yes" xml:space="preserve">
          <source>All currently existing processes and all that will be created in the future.</source>
          <target state="translated">現在存在する全ての工程と、今後作られる全ての工程。</target>
        </trans-unit>
        <trans-unit id="2f2c9f694f2fd17dd3c35e9d0f951e41f0de39c2" translate="yes" xml:space="preserve">
          <source>All currently existing processes and ports and all that will be created in the future.</source>
          <target state="translated">現在存在するすべてのプロセスとポート、そして将来的に作成されるすべてのもの。</target>
        </trans-unit>
        <trans-unit id="a4a1660f0cdb5d321af926f22eca810cb75c7869" translate="yes" xml:space="preserve">
          <source>All currently existing processes and ports.</source>
          <target state="translated">現在存在するすべてのプロセスとポート。</target>
        </trans-unit>
        <trans-unit id="f2774916f15014b59bbde049da46ed37bb38a8f7" translate="yes" xml:space="preserve">
          <source>All currently existing processes.</source>
          <target state="translated">現在存在するすべてのプロセス。</target>
        </trans-unit>
        <trans-unit id="ff87064c3c8ceacf6dda1a78dcbdf032fd899aad" translate="yes" xml:space="preserve">
          <source>All data in messages between Erlang processes is copied, except for &lt;code&gt;&lt;a href=&quot;binaryhandling#refc_binary&quot;&gt;refc binaries&lt;/a&gt;&lt;/code&gt; on the same Erlang node.</source>
          <target state="translated">同じErlangノード上の &lt;code&gt;&lt;a href=&quot;binaryhandling#refc_binary&quot;&gt;refc binaries&lt;/a&gt;&lt;/code&gt; を除いて、Erlangプロセス間のメッセージ内のすべてのデータがコピーされます。</target>
        </trans-unit>
        <trans-unit id="aa1a7180beea8d2918397b581bb39b7c3d97266f" translate="yes" xml:space="preserve">
          <source>All dates conform to the Gregorian calendar. This calendar was introduced by Pope Gregory XIII in 1582 and was used in all Catholic countries from this year. Protestant parts of Germany and the Netherlands adopted it in 1698, England followed in 1752, and Russia in 1918 (the October revolution of 1917 took place in November according to the Gregorian calendar).</source>
          <target state="translated">すべての日付はグレゴリオ暦に準拠しています。この暦は1582年に教皇グレゴリオ13世によって導入され、この年からすべてのカトリック諸国で使用されるようになりました。ドイツとオランダのプロテスタントの一部が1698年に採用し、イギリスが1752年に続き、ロシアが1918年に採用しました(1917年の10月革命はグレゴリオ暦では11月に行われました)。</target>
        </trans-unit>
        <trans-unit id="5a9db788cb6f00701b230b3a0369568000727f48" translate="yes" xml:space="preserve">
          <source>All dictionaries should typically inherit RFC 6733 AVPs from &lt;code&gt;diameter_gen_base_rfc6733&lt;/code&gt;.</source>
          <target state="translated">すべてのディクショナリは通常、 &lt;code&gt;diameter_gen_base_rfc6733&lt;/code&gt; からRFC 6733 AVPを継承する必要があります。</target>
        </trans-unit>
        <trans-unit id="4c2f43f5ea4d88b08d32795c7efcb41af6ca7e5e" translate="yes" xml:space="preserve">
          <source>All direct and indirect calls within the Kernel application. Both the calling and the used functions of indirect calls are defined in modules of the kernel application, but it is possible that some functions outside the kernel application are used by indirect calls.</source>
          <target state="translated">カーネルアプリケーション内のすべての直接呼び出しと間接呼び出し。間接呼び出しの呼び出しと使用される関数はいずれもカーネルアプリケーションのモジュールで定義されていますが、カーネルアプリケーション外の関数が間接呼び出しで使用される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d1f33a648178dc389edc92503195d2baefeb6e84" translate="yes" xml:space="preserve">
          <source>All dirty functions execute a call to &lt;code&gt;exit({aborted, Reason})&lt;/code&gt; on failure. Even if the following functions are executed inside a transaction no locks are acquired. The following functions are available:</source>
          <target state="translated">すべてのダーティ関数は、失敗時に &lt;code&gt;exit({aborted, Reason})&lt;/code&gt; 呼び出しを実行します。次の関数がトランザクション内で実行されても、ロックは取得されません。次の機能を使用できます。</target>
        </trans-unit>
        <trans-unit id="f81b19ae425dcfaf7c61e80cc7669618b08d52e7" translate="yes" xml:space="preserve">
          <source>All elements must be bound. Or match a binary:</source>
          <target state="translated">すべての要素はバインドされている必要があります。またはバイナリにマッチしていること。</target>
        </trans-unit>
        <trans-unit id="e35304a8cee7dd66deca414eafb00819e73f44e7" translate="yes" xml:space="preserve">
          <source>All encode functions assume that the &lt;code&gt;buf&lt;/code&gt; and &lt;code&gt;index&lt;/code&gt; parameters point to a buffer large enough for the data. To get the size of an encoded term, without encoding it, pass &lt;code&gt;NULL&lt;/code&gt; instead of a buffer pointer. Parameter &lt;code&gt;index&lt;/code&gt; is incremented, but nothing will be encoded. This is the way in &lt;code&gt;ei&lt;/code&gt; to &quot;preflight&quot; term encoding.</source>
          <target state="translated">すべてのエンコード関数は、 &lt;code&gt;buf&lt;/code&gt; パラメーターと &lt;code&gt;index&lt;/code&gt; パラメーターが、データを格納するのに十分な大きさのバッファーを指すことを前提としています。エンコードせずにエンコードされた用語のサイズを取得するには、バッファーポインターの代わりに &lt;code&gt;NULL&lt;/code&gt; を渡します。パラメータ &lt;code&gt;index&lt;/code&gt; はインクリメントされますが、何もエンコードされません。これは、「プリフライト」用語のエンコーディングへの &lt;code&gt;ei&lt;/code&gt; の方法です。</target>
        </trans-unit>
        <trans-unit id="151ad8ec849846d67f11a6c9c136c41384a8ac5e" translate="yes" xml:space="preserve">
          <source>All event handler modules must have &lt;code&gt;gen_event&lt;/code&gt; behavior. These modules must be precompiled and their locations must be added explicitly to the Erlang code server search path (as in the previous example).</source>
          <target state="translated">すべてのイベントハンドラモジュールには、 &lt;code&gt;gen_event&lt;/code&gt; 動作が必要です。これらのモジュールはプリコンパイルする必要があり、その場所は（前の例のように）Erlangコードサーバーの検索パスに明示的に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="9edf833c0b78d11f089bdd4ddb61ffd9bb5f9435" translate="yes" xml:space="preserve">
          <source>All event handlers added to the error logger must handle the following events. &lt;code&gt;Gleader&lt;/code&gt; is the group leader pid of the process that sent the event, and &lt;code&gt;Pid&lt;/code&gt; is the process that sent the event.</source>
          <target state="translated">エラーロガーに追加されたすべてのイベントハンドラーは、次のイベントを処理する必要があります。 &lt;code&gt;Gleader&lt;/code&gt; は、イベントを送信したプロセスのグループリーダーpidであり、 &lt;code&gt;Pid&lt;/code&gt; は、イベントを送信したプロセスです。</target>
        </trans-unit>
        <trans-unit id="97354d25fc5709fda87feb85d1e3e6ab6be22375" translate="yes" xml:space="preserve">
          <source>All events are filtered thru the collector filter, which optionally may transform or discard the event. The first call should use the pid of the collector process as report handle, while subsequent calls should use the table handle.</source>
          <target state="translated">すべてのイベントはコレクタフィルタによってフィルタリングされ、オプションでイベントを変換したり破棄したりすることができます。最初の呼び出しでは、コレクタープロセスの pid をレポートハンドルとして使用し、その後の呼び出しではテーブルハンドルを使用します。</target>
        </trans-unit>
        <trans-unit id="edda3d39980ef94b93836b935091c5b117c59583" translate="yes" xml:space="preserve">
          <source>All events stored with &lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;next_event&lt;/code&gt; are inserted to be processed before previously queued events.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#type-action&quot;&gt;action()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;next_event&lt;/code&gt; で保存されたすべてのイベントが挿入され、以前にキューに入れられたイベントの前に処理されます。</target>
        </trans-unit>
        <trans-unit id="3491bb0a7d4060188eb065fbc6bc2594ddbd17ff" translate="yes" xml:space="preserve">
          <source>All existing ports are traced.</source>
          <target state="translated">既存のポートはすべてトレースされます。</target>
        </trans-unit>
        <trans-unit id="2c72dcc5bba29ea41d56cc0f3108b0b76f9c39f4" translate="yes" xml:space="preserve">
          <source>All existing processes and ports are traced.</source>
          <target state="translated">既存のすべてのプロセスとポートがトレースされます。</target>
        </trans-unit>
        <trans-unit id="5a4d069c79f3590b37639cb25e98cd7c35810632" translate="yes" xml:space="preserve">
          <source>All existing processes are traced.</source>
          <target state="translated">既存のプロセスはすべてトレースされています。</target>
        </trans-unit>
        <trans-unit id="5747d94a7ab87afa870a4b1a23637cb5fdeb263d" translate="yes" xml:space="preserve">
          <source>All exported functions &lt;code&gt;f/0&lt;/code&gt;, &lt;code&gt;f/1&lt;/code&gt; and so on are deprecated.</source>
          <target state="translated">エクスポートされた関数 &lt;code&gt;f/0&lt;/code&gt; 、 &lt;code&gt;f/1&lt;/code&gt; などはすべて非推奨です。</target>
        </trans-unit>
        <trans-unit id="ebe25266a3aaabe1092ea2284360d4d7880f5b5d" translate="yes" xml:space="preserve">
          <source>All exported functions in the module are deprecated and will eventually be removed.</source>
          <target state="translated">モジュール内のエクスポートされた関数はすべて非推奨であり、最終的には削除されます。</target>
        </trans-unit>
        <trans-unit id="7d0101bf6297ebfbf7dbf99d16c4071d8e1de6f5" translate="yes" xml:space="preserve">
          <source>All exported functions in the module are deprecated. Equivalent to &lt;code&gt;-deprecated({'_','_'}).&lt;/code&gt;.</source>
          <target state="translated">モジュールでエクスポートされたすべての関数は非推奨です。 &lt;code&gt;-deprecated({'_','_'}).&lt;/code&gt; 同等です。。</target>
        </trans-unit>
        <trans-unit id="a830cb4b996f3591a6f1ba33560d9c6eba657de5" translate="yes" xml:space="preserve">
          <source>All exported functions of the &lt;code&gt;digraph&lt;/code&gt; module used (in)directly by some function in &lt;code&gt;digraph&lt;/code&gt;.</source>
          <target state="translated">すべてのエクスポートされた関数 &lt;code&gt;digraph&lt;/code&gt; モジュールは、直接に、いくつかの関数で（に）使用される &lt;code&gt;digraph&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a0ffdac5fcbe59b543d6b023f7bcb7ab4d567156" translate="yes" xml:space="preserve">
          <source>All exported functions of the &lt;code&gt;xref&lt;/code&gt; module. The first operand of the intersection operator &lt;code&gt;*&lt;/code&gt; is implicitly converted to the more special type of the second operand.</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; モジュールのすべてのエクスポートされた関数。交差演算子 &lt;code&gt;*&lt;/code&gt; の最初のオペランドは、暗黙的に2番目のオペランドのより特殊な型に変換されます。</target>
        </trans-unit>
        <trans-unit id="942827b9949c1750c953f7ebc266219ebc7cdd42" translate="yes" xml:space="preserve">
          <source>All external calls to local functions.</source>
          <target state="translated">すべての外部からのローカル関数の呼び出し。</target>
        </trans-unit>
        <trans-unit id="ce56e411c31ac7116e9fd3632deb508253a985ba" translate="yes" xml:space="preserve">
          <source>All files are compressed (as long as they pass the &lt;code&gt;uncompress&lt;/code&gt; condition).</source>
          <target state="translated">すべてのファイルは圧縮されます（それらが &lt;code&gt;uncompress&lt;/code&gt; 条件を通過する限り）。</target>
        </trans-unit>
        <trans-unit id="0489e9084611f97b451f50f894c7a01abd2cecc5" translate="yes" xml:space="preserve">
          <source>All files are searched for in the current path. It is assumed that the &lt;code&gt;.app&lt;/code&gt; and &lt;code&gt;.beam&lt;/code&gt; files for an application are located in the same directory. The &lt;code&gt;.erl&lt;/code&gt; files are also assumed to be located in this directory, unless it is an &lt;code&gt;ebin&lt;/code&gt; directory in which case they can be located in the corresponding &lt;code&gt;src&lt;/code&gt; directory.</source>
          <target state="translated">すべてのファイルが現在のパスで検索されます。アプリケーションの &lt;code&gt;.app&lt;/code&gt; ファイルと &lt;code&gt;.beam&lt;/code&gt; ファイルは同じディレクトリにあると想定されています。 &lt;code&gt;.erl&lt;/code&gt; ファイルもそれがある場合を除き、このディレクトリに配置されているものとする &lt;code&gt;ebin&lt;/code&gt; の彼らは対応して配置することができ、その場合には、ディレクトリ &lt;code&gt;src&lt;/code&gt; ディレクトリ。</target>
        </trans-unit>
        <trans-unit id="8252fbc317a2198d72c5445b998e2855db44bf75" translate="yes" xml:space="preserve">
          <source>All filters (registered in a &lt;code&gt;Collector&lt;/code&gt; or in a &lt;code&gt;Viewer&lt;/code&gt;) must be able to handle an &lt;code&gt;Event record&lt;/code&gt; as input. The &lt;code&gt;Collector Filter&lt;/code&gt; (that is the filter named &lt;code&gt;all&lt;/code&gt;) is a little bit special, as its input also may be raw &lt;code&gt;Erlang Trace Data&lt;/code&gt;</source>
          <target state="translated">すべてのフィルター（ &lt;code&gt;Collector&lt;/code&gt; または &lt;code&gt;Viewer&lt;/code&gt; 登録されている）は、 &lt;code&gt;Event record&lt;/code&gt; を入力として処理できる必要があります。 &lt;code&gt;Collector Filter&lt;/code&gt; （名前付きフィルタである &lt;code&gt;all&lt;/code&gt; の入力はまた、生であってもよいように）、少しの特別な &lt;code&gt;Erlang Trace Data&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="422be21988c49192a9f5f28262b52e1e51a8fd90" translate="yes" xml:space="preserve">
          <source>All function calls from &lt;code&gt;xref&lt;/code&gt; and &lt;code&gt;xref_base&lt;/code&gt; to &lt;code&gt;lists&lt;/code&gt; and &lt;code&gt;digraph&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; および &lt;code&gt;xref_base&lt;/code&gt; から &lt;code&gt;lists&lt;/code&gt; および &lt;code&gt;digraph&lt;/code&gt; へのすべての関数呼び出し。</target>
        </trans-unit>
        <trans-unit id="9db576c6625a484a5d2e923a006859fafb0310a1" translate="yes" xml:space="preserve">
          <source>All function calls from &lt;code&gt;xref&lt;/code&gt; to &lt;code&gt;lists&lt;/code&gt;, and all function calls from &lt;code&gt;xref_base&lt;/code&gt; to &lt;code&gt;digraph&lt;/code&gt;.</source>
          <target state="translated">以下からのすべての関数呼び出し &lt;code&gt;xref&lt;/code&gt; の &lt;code&gt;lists&lt;/code&gt; 、およびからのすべての関数呼び出し &lt;code&gt;xref_base&lt;/code&gt; に &lt;code&gt;digraph&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d129df75799c1b4bd0113f7d6ec3fb57b5027d20" translate="yes" xml:space="preserve">
          <source>All function calls from &lt;code&gt;xref&lt;/code&gt; to &lt;code&gt;xref_base&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; から &lt;code&gt;xref_base&lt;/code&gt; へのすべての関数呼び出し。</target>
        </trans-unit>
        <trans-unit id="7ca2ffb4856752604dde896ca6470b50c7619bd8" translate="yes" xml:space="preserve">
          <source>All functions can have an optional argument, which specifies a hook that is called if an attempt is made to print an unknown form.</source>
          <target state="translated">すべての関数はオプションの引数を持つことができ、未知の形式を印刷しようとした場合に呼び出されるフックを指定します。</target>
        </trans-unit>
        <trans-unit id="823a79f73d165ac889d6bd172b59abd37f41a632" translate="yes" xml:space="preserve">
          <source>All functions exported from this module can be used as primary or handler filters. See &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; for more information about how filters are added.</source>
          <target state="translated">このモジュールからエクスポートされたすべての関数は、プライマリフィルターまたはハンドラーフィルターとして使用できます。フィルターの追加方法の詳細については、 &lt;code&gt;&lt;a href=&quot;logger#add_primary_filter-2&quot;&gt;logger:add_primary_filter/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;logger#add_handler_filter-3&quot;&gt;logger:add_handler_filter/3&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="ec741d9917990170ff113c4353ac60a9452852b7" translate="yes" xml:space="preserve">
          <source>All functions fail with reason &lt;code&gt;badarg&lt;/code&gt; if arguments are of wrong type, for example, queue arguments are not queues, indexes are not integers, and list arguments are not lists. Improper lists cause internal crashes. An index out of range for a queue also causes a failure with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">引数のタイプが間違っている場合、すべての関数は &lt;code&gt;badarg&lt;/code&gt; で失敗します。たとえば、キュ​​ーの引数がキューではなく、インデックスが整数ではなく、リストの引数がリストではありません。不適切なリストは内部クラッシュを引き起こします。キューの範囲外のインデックスも &lt;code&gt;badarg&lt;/code&gt; の理由で失敗を引き起こします。</target>
        </trans-unit>
        <trans-unit id="e43fac8a393e657d49457e2719a0083470b80dc0" translate="yes" xml:space="preserve">
          <source>All functions in all loaded modules.</source>
          <target state="translated">ロードされたすべてのモジュールのすべての関数</target>
        </trans-unit>
        <trans-unit id="ef103221583f1169bd63b6128675c2644466fb99" translate="yes" xml:space="preserve">
          <source>All functions in module &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;Module&lt;/code&gt; のすべての関数。</target>
        </trans-unit>
        <trans-unit id="2466011b635e6de04d4ec84d7f837c33d888a271" translate="yes" xml:space="preserve">
          <source>All functions in module &lt;code&gt;seq_trace&lt;/code&gt;, except &lt;code&gt;set_system_tracer/1&lt;/code&gt;, can be used after the trace port is started with &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;seq_trace&lt;/code&gt; 内のすべての関数（ &lt;code&gt;set_system_tracer/1&lt;/code&gt; を除く）は、 &lt;code&gt;ttb:tracer/0,1,2&lt;/code&gt; でトレースポートを開始した後で使用できます。</target>
        </trans-unit>
        <trans-unit id="43c6b1b0a958a8deaa986884119e0ee53ee936a8" translate="yes" xml:space="preserve">
          <source>All functions in the driver takes a handle (returned from &lt;code&gt;start&lt;/code&gt;) that is just passed along by the Erlang process. This must in some way refer to the port driver instance.</source>
          <target state="translated">ドライバーのすべての関数は、Erlangプロセスによって渡された（ &lt;code&gt;start&lt;/code&gt; から返された）ハンドルを受け取ります。これは、何らかの方法でポートドライバーインスタンスを参照する必要があります。</target>
        </trans-unit>
        <trans-unit id="f6a9297c81dbe83f85ddbef20dc3f747dd1bff17" translate="yes" xml:space="preserve">
          <source>All functions in this Reference Manual can be used in any combination with queries using the list comprehension notation. For information about the query notation, see the &lt;code&gt;qlc&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">このリファレンスマニュアルのすべての関数は、リスト内包表記を使用して、クエリと任意の組み合わせで使用できます。クエリ表記については、 &lt;code&gt;qlc&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="83563c273b58224103fb5b60259d697709cba0bd" translate="yes" xml:space="preserve">
          <source>All functions in this behavior must be implemented as NIFs. This limitation can be removed in a future releases. An &lt;code&gt;&lt;a href=&quot;#example&quot;&gt;example tracer module NIF&lt;/a&gt;&lt;/code&gt; implementation is provided at the end of this page.</source>
          <target state="translated">この動作のすべての関数は、NIFとして実装する必要があります。この制限は、将来のリリースで削除される可能性があります。このページの最後に、 &lt;code&gt;&lt;a href=&quot;#example&quot;&gt;example tracer module NIF&lt;/a&gt;&lt;/code&gt; 実装の例を示します。</target>
        </trans-unit>
        <trans-unit id="5ba27ab55837d04a290469850ad1f69dc5566c5f" translate="yes" xml:space="preserve">
          <source>All functions in this module have an optional parameter &lt;code&gt;IoDevice&lt;/code&gt;. If included, it must be the pid of a process that handles the I/O protocols. Normally, it is the &lt;code&gt;IoDevice&lt;/code&gt; returned by &lt;code&gt;file:open/2&lt;/code&gt;.</source>
          <target state="translated">このモジュールのすべての関数には、オプションのパラメーター &lt;code&gt;IoDevice&lt;/code&gt; があります。含める場合は、I / Oプロトコルを処理するプロセスのPIDである必要があります。通常、これは &lt;code&gt;file:open/2&lt;/code&gt; によって返される &lt;code&gt;IoDevice&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="726200fe284b64e025780d2f8b454ec9973f6634" translate="yes" xml:space="preserve">
          <source>All functions of any arity named &lt;code&gt;Function&lt;/code&gt; in module &lt;code&gt;Module&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;Module&lt;/code&gt; 内の &lt;code&gt;Function&lt;/code&gt; という名前のアリティのすべての関数。</target>
        </trans-unit>
        <trans-unit id="f45f048113d0373b3ce22b0d7dd55cfb45f73d15" translate="yes" xml:space="preserve">
          <source>All functions of the &lt;code&gt;xref&lt;/code&gt; module.</source>
          <target state="translated">&lt;code&gt;xref&lt;/code&gt; モジュールのすべての機能。</target>
        </trans-unit>
        <trans-unit id="eba6863daa045e951bded6ccc11181d5402b27a1" translate="yes" xml:space="preserve">
          <source>All functions return &lt;code&gt;0&lt;/code&gt; if successful, otherwise &lt;code&gt;-1&lt;/code&gt; (for example, if a term is not of the expected type, or the data to decode is an invalid Erlang term).</source>
          <target state="translated">すべての関数は、成功した場合は &lt;code&gt;0&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;-1&lt;/code&gt; を返します（たとえば、用語が予期されたタイプではない場合、またはデコードするデータが無効なErlang用語である場合）。</target>
        </trans-unit>
        <trans-unit id="f5bc6aaf22245be7eb164a817018deef6e568078" translate="yes" xml:space="preserve">
          <source>All functions take two parameters:</source>
          <target state="translated">すべての関数は2つのパラメータを取ります。</target>
        </trans-unit>
        <trans-unit id="956ed5e678dd45f2252e7ddbe4d7c18199877e4b" translate="yes" xml:space="preserve">
          <source>All functions that a driver needs to do with Erlang are performed through driver API functions. Functions exist for the following functionality:</source>
          <target state="translated">ドライバがErlangで必要とするすべての関数はドライバAPI関数を使って実行されます。以下の機能のための関数があります。</target>
        </trans-unit>
        <trans-unit id="060ec634508a875eb366a978194bdb8554c750a9" translate="yes" xml:space="preserve">
          <source>All functions with a &lt;code&gt;FuncCallCount&lt;/code&gt; lower than &lt;code&gt;Limit&lt;/code&gt; are excluded from &lt;code&gt;FuncAnalysisList&lt;/code&gt;. They are still included in &lt;code&gt;ModCallCount&lt;/code&gt;, though. The default value for &lt;code&gt;Limit&lt;/code&gt; is &lt;code&gt;1&lt;/code&gt;.</source>
          <target state="translated">すべての機能 &lt;code&gt;FuncCallCount&lt;/code&gt; より低い &lt;code&gt;Limit&lt;/code&gt; から除外され &lt;code&gt;FuncAnalysisList&lt;/code&gt; 。ただし、これらはまだ &lt;code&gt;ModCallCount&lt;/code&gt; に含まれています。 &lt;code&gt;Limit&lt;/code&gt; のデフォルト値は &lt;code&gt;1&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="046534351d00f7cf7cc373a50278b04994192a3a" translate="yes" xml:space="preserve">
          <source>All initialization, including name registration, is done in &lt;code&gt;init&lt;/code&gt;. The new process must also acknowledge that it has been started to the parent:</source>
          <target state="translated">名前の登録を含むすべての初期化は、 &lt;code&gt;init&lt;/code&gt; で行われます。新しいプロセスは、親に対して開始されたことを確認する必要もあります。</target>
        </trans-unit>
        <trans-unit id="46cda0f29f9968b1b8eac1178e9399bb98ac0756" translate="yes" xml:space="preserve">
          <source>All interaction between NIF code and the Erlang runtime system is performed by calling NIF API functions. Functions exist for the following functionality:</source>
          <target state="translated">NIFコードとErlangランタイムシステムの間のすべてのインタラクションはNIF API関数を呼び出すことで行われます。以下の機能のための関数があります。</target>
        </trans-unit>
        <trans-unit id="b8bf9347aac7d69c1a7c4192dd20e3c477cd2eef" translate="yes" xml:space="preserve">
          <source>All involved nodes must agree on the global group definition, otherwise the behavior of the system is undefined.</source>
          <target state="translated">関係するすべてのノードがグローバルグループの定義に同意しなければならず、そうでなければシステムの動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="2ddeb2fa9e303d6ec0189514f0afae8c313983ca" translate="yes" xml:space="preserve">
          <source>All involved nodes must have the same value for &lt;code&gt;distributed&lt;/code&gt; and &lt;code&gt;sync_nodes_timeout&lt;/code&gt;. Otherwise the system behaviour is undefined.</source>
          <target state="translated">関係するすべてのノードの &lt;code&gt;distributed&lt;/code&gt; および &lt;code&gt;sync_nodes_timeout&lt;/code&gt; の値は同じでなければなりません。それ以外の場合、システムの動作は未定義です。</target>
        </trans-unit>
        <trans-unit id="cc6547cbb70d26e829dedc7fc557e10f893223e6" translate="yes" xml:space="preserve">
          <source>All items in &lt;code&gt;Options&lt;/code&gt; that are not make options are assumed to be compiler options and are passed as-is to &lt;code&gt;compile:file/2&lt;/code&gt;. &lt;code&gt;Options&lt;/code&gt; defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">make &lt;code&gt;Options&lt;/code&gt; ではないオプションのすべての項目はコンパイラオプションであると想定され、そのまま &lt;code&gt;compile:file/2&lt;/code&gt; に渡されます。 &lt;code&gt;Options&lt;/code&gt; デフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6a74854341f74c068c82ad0a8f0663aa4e14988f" translate="yes" xml:space="preserve">
          <source>All jobs that do not use standard I/O run in the normal way.</source>
          <target state="translated">標準のI/Oを使用しないすべてのジョブは、通常の方法で実行されます。</target>
        </trans-unit>
        <trans-unit id="1865391b0c3e8e089483ce4975e720c45e5a9c41" translate="yes" xml:space="preserve">
          <source>All keys and values in the map are terms. Any expression is first evaluated and then the resulting terms are used as &lt;strong&gt;key&lt;/strong&gt; and &lt;strong&gt;value&lt;/strong&gt; respectively.</source>
          <target state="translated">マップ内のすべてのキーと値は用語です。すべての式が最初に評価され、次に結果の用語がそれぞれ&lt;strong&gt;キー&lt;/strong&gt;と&lt;strong&gt;値&lt;/strong&gt;として使用され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="b9288c9e5c221796e80a2e7498e046ec5f58a8b5" translate="yes" xml:space="preserve">
          <source>All keys and values must belong to &lt;code&gt;env&lt;/code&gt;.</source>
          <target state="translated">すべてのキーと値は &lt;code&gt;env&lt;/code&gt; に属している必要があります。</target>
        </trans-unit>
        <trans-unit id="3aae0ef6a36eb4138caa9b3ee5995eea319883b4" translate="yes" xml:space="preserve">
          <source>All list expressions are evaluated. If a cursor has been created, evaluation takes place in the cursor process. For list expressions that are QLCs, the list expressions of the generators of the QLCs are evaluated as well. Be careful if list expressions have side effects, as list expressions are evaluated in unspecified order.</source>
          <target state="translated">すべてのリスト式が評価されます。カーソルが作成されている場合、評価はカーソルの処理で行われます。QLCであるリスト式については、QLCの生成元のリスト式も評価されます。リスト式が不特定の順番で評価されるため、リスト式に副作用がある場合は注意が必要です。</target>
        </trans-unit>
        <trans-unit id="ea62e05bff6ced6fe4f7db7a70fe5d182215dc60" translate="yes" xml:space="preserve">
          <source>All lists of identifiers must produce the same number of identifiers.</source>
          <target state="translated">識別子のリストはすべて同じ数の識別子を生成しなければなりません。</target>
        </trans-unit>
        <trans-unit id="831a903ff3acb3a95d91bc2244d77f78dbc1b105" translate="yes" xml:space="preserve">
          <source>All locks are continuously monitored and its statistics updated. Use &lt;code&gt;lcnt:clear/0&lt;/code&gt; to initially clear all counters before running any specific tests. This command will also reset the duration timer internally.</source>
          <target state="translated">すべてのロックは継続的に監視され、その統計は更新されます。特定のテストを実行する前に、 &lt;code&gt;lcnt:clear/0&lt;/code&gt; を使用して、最初にすべてのカウンターをクリアします。このコマンドはまた、継続時間タイマーを内部でリセットします。</target>
        </trans-unit>
        <trans-unit id="9cd647737f1c87ee7c161c5ee26fe910048843cf" translate="yes" xml:space="preserve">
          <source>All logical drives of type &quot;FIXED_DISK&quot; are checked.</source>
          <target state="translated">FIXED_DISK &quot;タイプのすべての論理ドライブがチェックされます。</target>
        </trans-unit>
        <trans-unit id="d4db0be4b4b4c802ce985caea6e5dff7b25d978f" translate="yes" xml:space="preserve">
          <source>All macro names generated by the compiler are prefixed with &lt;code&gt;Prefix&lt;/code&gt;. This is useful when multiple protocols that contain macros with identical names are included in a single module.</source>
          <target state="translated">コンパイラーによって生成されるすべてのマクロ名には、接頭辞 &lt;code&gt;Prefix&lt;/code&gt; が付きます。これは、同じ名前のマクロを含む複数のプロトコルが単一のモジュールに含まれている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="494705700ec0edc0b3e9bd3d1008f1481b1665ee" translate="yes" xml:space="preserve">
          <source>All macros expand to a call to Logger, where &lt;code&gt;Level&lt;/code&gt; is taken from the macro name, and location data is added to the metadata. See the description of the &lt;code&gt;&lt;a href=&quot;#type-metadata&quot;&gt;metadata()&lt;/a&gt;&lt;/code&gt; type for more information about the location data.</source>
          <target state="translated">すべてのマクロは、Loggerへの呼び出しに展開されます。ここで、 &lt;code&gt;Level&lt;/code&gt; はマクロ名から取得され、位置データがメタデータに追加されます。位置データの詳細については、 &lt;code&gt;&lt;a href=&quot;#type-metadata&quot;&gt;metadata()&lt;/a&gt;&lt;/code&gt; タイプの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="d0c8d5eebae1c81c9d4cc44fa89d86c186216006" translate="yes" xml:space="preserve">
          <source>All memory sizes are presented as number of &lt;strong&gt;bytes&lt;/strong&gt;.</source>
          <target state="translated">すべてのメモリサイズは&lt;strong&gt;バイト&lt;/strong&gt;数で表され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="c95b69f492d38b3c97ab065a21ebadda9800ddeb" translate="yes" xml:space="preserve">
          <source>All messages in the message queue will eventually be placed on heap. They can however temporarily be stored off heap. This is how messages always have been stored up until ERTS 8.0.</source>
          <target state="translated">メッセージキュー内のすべてのメッセージは、最終的にはヒープ上に置かれます。しかし、一時的にヒープから外れた場所に保存することは可能です。これが ERTS 8.0 までのメッセージの保存方法です。</target>
        </trans-unit>
        <trans-unit id="f77aafd15225e94bc1f5d8df9caf3f4c48675dfa" translate="yes" xml:space="preserve">
          <source>All messages sent over the transport interface are of the form &lt;code&gt;{diameter, term()}&lt;/code&gt;.</source>
          <target state="translated">トランスポートインターフェースを介して送信されるすべてのメッセージの形式は &lt;code&gt;{diameter, term()}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="d9fadb6f85546bb42570866cced284af7083a859" translate="yes" xml:space="preserve">
          <source>All modules introduced by this application. &lt;code&gt;systools&lt;/code&gt; uses this list when generating start scripts and tar files. A module can only be defined in one application.</source>
          <target state="translated">このアプリケーションによって導入されたすべてのモジュール。 &lt;code&gt;systools&lt;/code&gt; は、起動スクリプトとtarファイルを生成するときにこのリストを使用します。モジュールは1つのアプリケーションでのみ定義できます。</target>
        </trans-unit>
        <trans-unit id="b81023ab4e25ef6717f23395a1aedb12fb5ddbc7" translate="yes" xml:space="preserve">
          <source>All modules of the Tools application.</source>
          <target state="translated">ツールアプリケーションのすべてのモジュール。</target>
        </trans-unit>
        <trans-unit id="429cfbd4010cf55e09670589087f82f8687b863b" translate="yes" xml:space="preserve">
          <source>All modules with a name beginning with &lt;code&gt;xref_&lt;/code&gt;.</source>
          <target state="translated">名前が &lt;code&gt;xref_&lt;/code&gt; で始まるすべてのモジュール。</target>
        </trans-unit>
        <trans-unit id="d8fe3d0304a41f7579b1ba411ab3df7b0920caa7" translate="yes" xml:space="preserve">
          <source>All names of registered processes started in this application. &lt;code&gt;systools&lt;/code&gt; uses this list to detect name clashes between different applications.</source>
          <target state="translated">このアプリケーションで開始された登録済みプロセスのすべての名前。 &lt;code&gt;systools&lt;/code&gt; はこのリストを使用して、異なるアプリケーション間の名前の衝突を検出します。</target>
        </trans-unit>
        <trans-unit id="63603405883458e08fdb5a997ded4a3cb73fef22" translate="yes" xml:space="preserve">
          <source>All nitty gritty details of the event.</source>
          <target state="translated">イベントのすべてのニトリの詳細。</target>
        </trans-unit>
        <trans-unit id="8955d624f919ff35c5d686d0dd52b90c5392d816" translate="yes" xml:space="preserve">
          <source>All nodes added with &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; will be affected by this call, and if Module is not &lt;code&gt;'_'&lt;/code&gt; the module will be loaded on all nodes.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; で追加されたすべてのノードはこの呼び出しの影響を受け、Moduleが &lt;code&gt;'_'&lt;/code&gt; でない場合、モジュールはすべてのノードにロードされます。</target>
        </trans-unit>
        <trans-unit id="c596dc51ad6ac7a667444d4ab6da510586b442cc" translate="yes" xml:space="preserve">
          <source>All nodes added with &lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; will be affected by this call.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#n-1&quot;&gt;n/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; で追加されたすべてのノードは、この呼び出しの影響を受けます。</target>
        </trans-unit>
        <trans-unit id="d9448e54ad1639a4fc81a3d2181edf3fa2a36dab" translate="yes" xml:space="preserve">
          <source>All nodes connected to this node.</source>
          <target state="translated">このノードに接続されているすべてのノード。</target>
        </trans-unit>
        <trans-unit id="c16d866482510d3df4a4d9c10e80cfd8693ce976" translate="yes" xml:space="preserve">
          <source>All of these MIBs should be loaded into the Master Agent. Once loaded, these MIBs are always available in all contexts.</source>
          <target state="translated">これらのMIBはすべてマスターエージェントにロードする必要があります。ロードされると、これらのMIBはすべてのコンテキストで常に利用可能になります。</target>
        </trans-unit>
        <trans-unit id="5404924b8d62bd94a8e2b48b441dd9ef3bb2c473" translate="yes" xml:space="preserve">
          <source>All of these can be used in guards. Now for some BIFs that cannot be used in guards:</source>
          <target state="translated">これらはすべてガードで使用することができます。では、ガードで使えないBIFをいくつか紹介します。</target>
        </trans-unit>
        <trans-unit id="50f0e79a9827c7185eb8a799e8536a39c5dbce1a" translate="yes" xml:space="preserve">
          <source>All open tables must be closed before the system is stopped. If an attempt is made to open a table that is not properly closed, Dets automatically tries to repair it.</source>
          <target state="translated">システムを停止する前に、開いているテーブルはすべて閉じておく必要があります。適切に閉じられていないテーブルを開こうとすると、Detsは自動的に修復を試みます。</target>
        </trans-unit>
        <trans-unit id="9366c0e819489e6627469b740a2d8b3479faca40" translate="yes" xml:space="preserve">
          <source>All operations has an amortized O(1) running time, except &lt;code&gt;&lt;a href=&quot;#filter-2&quot;&gt;filter/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#join-2&quot;&gt;join/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#len-1&quot;&gt;len/1&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#member-2&quot;&gt;member/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#split-2&quot;&gt;split/2&lt;/a&gt;&lt;/code&gt; that have O(n). To minimize the size of a queue minimizing the amount of garbage built by queue operations, the queues do not contain explicit length information, and that is why &lt;code&gt;len/1&lt;/code&gt; is O(n). If better performance for this particular operation is essential, it is easy for the caller to keep track of the length.</source>
          <target state="translated">O（n）を持つ &lt;code&gt;&lt;a href=&quot;#filter-2&quot;&gt;filter/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#join-2&quot;&gt;join/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#len-1&quot;&gt;len/1&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#member-2&quot;&gt;member/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#split-2&quot;&gt;split/2&lt;/a&gt;&lt;/code&gt; を除いて、すべての操作には償却されたO（1）実行時間が含まれます。キューのサイズを最小化してキュー操作によって構築されるガベージの量を最小化するために、キューには明示的な長さ情報が含まれていないため、 &lt;code&gt;len/1&lt;/code&gt; はO（n）です。この特定の操作のパフォーマンス向上が不可欠である場合、呼び出し元が長さを追跡するのは簡単です。</target>
        </trans-unit>
        <trans-unit id="4bb3faf2c2244b5d385e1264229f20eef126b3f8" translate="yes" xml:space="preserve">
          <source>All operations on applications are coordinated by the application controller. It is interacted through the functions in the module &lt;code&gt;application&lt;/code&gt;, see the &lt;code&gt;application(3)&lt;/code&gt; manual page in Kernel. In particular, applications can be loaded, unloaded, started, and stopped.</source>
          <target state="translated">アプリケーションのすべての操作は、アプリケーションコントローラによって調整されます。モジュール内の関数を介して相互作用している &lt;code&gt;application&lt;/code&gt; を参照、 &lt;code&gt;application(3)&lt;/code&gt; カーネルでマニュアルページを。特に、アプリケーションは、ロード、アンロード、開始、および停止できます。</target>
        </trans-unit>
        <trans-unit id="9a155092927253ab8adb73277ff15a9389de0ffb" translate="yes" xml:space="preserve">
          <source>All operations that can be performed on &lt;code&gt;dets&lt;/code&gt; files can also be performed on the &lt;code&gt;Mnesia&lt;/code&gt; data files. For example, &lt;code&gt;dets&lt;/code&gt; contains the function &lt;code&gt;dets:traverse/2&lt;/code&gt;, which can be used to view the contents of a &lt;code&gt;Mnesia&lt;/code&gt;&lt;code&gt;DAT&lt;/code&gt; file. However, this can only be done when &lt;code&gt;Mnesia&lt;/code&gt; is not running. So, to view the schema file, do as follows;</source>
          <target state="translated">&lt;code&gt;dets&lt;/code&gt; ファイルで実行できるすべての操作は、 &lt;code&gt;Mnesia&lt;/code&gt; データファイルでも実行できます。たとえば、 &lt;code&gt;dets&lt;/code&gt; には関数 &lt;code&gt;dets:traverse/2&lt;/code&gt; が含まれ、 &lt;code&gt;Mnesia&lt;/code&gt; &lt;code&gt;DAT&lt;/code&gt; ファイルの内容を表示するために使用できます。ただし、これは &lt;code&gt;Mnesia&lt;/code&gt; が実行されていない場合にのみ実行できます。したがって、スキーマファイルを表示するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="7944ca23e769d63791bf6d56110b8504cc650e69" translate="yes" xml:space="preserve">
          <source>All options &lt;code&gt;Opt&lt;/code&gt; are set on the socket before the association is attempted. If an option record has undefined field values, the options record is first read from the socket for those values. In effect, &lt;code&gt;Opt&lt;/code&gt; option records only define field values to change before connecting.</source>
          <target state="translated">すべてのオプション &lt;code&gt;Opt&lt;/code&gt; は、関連付けが試行される前にソケットに設定されます。オプションレコードに未定義のフィールド値がある場合、オプションレコードはまずそれらの値のソケットから読み取られます。実際、 &lt;code&gt;Opt&lt;/code&gt; オプションレコードは、接続する前に変更するフィールド値のみを定義します。</target>
        </trans-unit>
        <trans-unit id="717f82077e05a6bd5c4e1f6ec9f053ccca43eecd" translate="yes" xml:space="preserve">
          <source>All options has default values.</source>
          <target state="translated">すべてのオプションにはデフォルト値があります。</target>
        </trans-unit>
        <trans-unit id="df6d621c39e158f12320b634e0dfbb13f7f0a03f" translate="yes" xml:space="preserve">
          <source>All options, except the include path (&lt;code&gt;{i,Dir}&lt;/code&gt;), can also be given in the file with attribute &lt;code&gt;-compile([Option,...])&lt;/code&gt;. Attribute &lt;code&gt;-compile()&lt;/code&gt; is allowed after the function definitions.</source>
          <target state="translated">インクルードパス（ &lt;code&gt;{i,Dir}&lt;/code&gt; ）を除くすべてのオプションは、属性 &lt;code&gt;-compile([Option,...])&lt;/code&gt; してファイルに指定することもできます。関数定義の後に属性 &lt;code&gt;-compile()&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="3262efdb0e0795ddd30e0491c99cd9db2b1217ce" translate="yes" xml:space="preserve">
          <source>All other error codes are to be translated by function &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;. Notice that calls to &lt;code&gt;format_error&lt;/code&gt; are to be performed from the same running instance of the Erlang virtual machine as the error is detected in, because of system-dependent behavior concerning error values.</source>
          <target state="translated">他のすべてのエラーコードは、関数 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; によって変換されます。エラー値に関するシステム依存の動作のため、 &lt;code&gt;format_error&lt;/code&gt; の呼び出しは、エラーが検出されたErlang仮想マシンの同じ実行中のインスタンスから実行されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5f6a14eeedaaeb7e6254232d3638d6dc2f6e8555" translate="yes" xml:space="preserve">
          <source>All other funs are called &lt;strong&gt;local&lt;/strong&gt;. When a local fun is called, the same version of the code that created the fun is called (even if a newer version of the module has been loaded).</source>
          <target state="translated">他のすべてのファンは&lt;strong&gt;ローカル&lt;/strong&gt;と呼ばれます。ローカルfunが呼び出されると、funを作成したのと同じバージョンのコードが呼び出されます（モジュールの新しいバージョンがロードされている場合でも）。</target>
        </trans-unit>
        <trans-unit id="8838f7dce02b840a82ef3664122b2c9a0564b86c" translate="yes" xml:space="preserve">
          <source>All other options are directly passed to &lt;code&gt;&lt;a href=&quot;ssh&quot;&gt;ssh:connect/3&lt;/a&gt;&lt;/code&gt; or ignored if a connection is already provided.</source>
          <target state="translated">他のすべてのオプションは &lt;code&gt;&lt;a href=&quot;ssh&quot;&gt;ssh:connect/3&lt;/a&gt;&lt;/code&gt; に直接渡されるか、接続がすでに提供されている場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="0fdd5012a3999f248928e35df9097ed59369e26c" translate="yes" xml:space="preserve">
          <source>All other tables that refer to this table in their foreign key</source>
          <target state="translated">外部キーでこのテーブルを参照している他のすべてのテーブル</target>
        </trans-unit>
        <trans-unit id="7bef1fa75d2399a77a342855446a7b8e1b60ed9b" translate="yes" xml:space="preserve">
          <source>All paragraphs up to the next process header only concerns function calls within this process.</source>
          <target state="translated">次のプロセスヘッダーまでのすべての段落は、このプロセス内の関数呼び出しにのみ関係しています。</target>
        </trans-unit>
        <trans-unit id="a921a840e963ba360d450906acb47195c661a0fd" translate="yes" xml:space="preserve">
          <source>All parts returned as binaries.</source>
          <target state="translated">すべてのパーツがバイナリとして返されます。</target>
        </trans-unit>
        <trans-unit id="21e943024f0cf28dbeb8a994a76fa77df65f90d8" translate="yes" xml:space="preserve">
          <source>All parts returned as lists of characters (&quot;strings&quot;).</source>
          <target state="translated">すべてのパーツは、文字のリスト(「文字列」)として返されます。</target>
        </trans-unit>
        <trans-unit id="eacdc8b4f05f878b8de176b164d8e1333a39ed8a" translate="yes" xml:space="preserve">
          <source>All patterns must be matched in a sequence. A match is not concluded until all patterns are matched. This option can be interrupted by one or more &lt;code&gt;HaltPatterns&lt;/code&gt;. &lt;code&gt;MatchList&lt;/code&gt; is always returned, that is, a list of &lt;code&gt;Match&lt;/code&gt; instead of only one &lt;code&gt;Match&lt;/code&gt;. Also &lt;code&gt;HaltReason&lt;/code&gt; is returned.</source>
          <target state="translated">すべてのパターンはシーケンスで一致する必要があります。すべてのパターンが一致するまで、一致は終了しません。このオプションは、1つ以上の &lt;code&gt;HaltPatterns&lt;/code&gt; によって中断される可能性があります。 &lt;code&gt;MatchList&lt;/code&gt; は常に返されます。つまり、1つの &lt;code&gt;Match&lt;/code&gt; ではなく、 &lt;code&gt;Match&lt;/code&gt; のリストです。また、 &lt;code&gt;HaltReason&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="fe1686901bbde4606445ec2f94e1d9d4f885ae9d" translate="yes" xml:space="preserve">
          <source>All ports created after the call is are to be traced.</source>
          <target state="translated">呼び出し後に作成されたすべてのポートをトレースします。</target>
        </trans-unit>
        <trans-unit id="f925b88f64b63747ed903430e90112298afb46f9" translate="yes" xml:space="preserve">
          <source>All ports in the system as well as all ports created hereafter are to be traced.</source>
          <target state="translated">システム内のすべてのポートおよび今後作成されるすべてのポートを追跡する。</target>
        </trans-unit>
        <trans-unit id="17489271f7d94016b64b27eb715c1631842f0ea9" translate="yes" xml:space="preserve">
          <source>All ports that will be created in the future.</source>
          <target state="translated">今後作られるであろう全てのポート。</target>
        </trans-unit>
        <trans-unit id="76ff66e92ea2da8c3fa29ddd1a6eef5dcf62d533" translate="yes" xml:space="preserve">
          <source>All pre hooks, except &lt;code&gt;pre_end_per_testcase/4&lt;/code&gt;, can skip or fail the test by returning a tuple with &lt;code&gt;skip&lt;/code&gt; or &lt;code&gt;fail&lt;/code&gt;, and a reason as the result.</source>
          <target state="translated">&lt;code&gt;pre_end_per_testcase/4&lt;/code&gt; を除くすべてのpreフックは、skipまたはfailを含むタプルを返し、結果として理由を返すことで、テストを &lt;code&gt;skip&lt;/code&gt; または &lt;code&gt;fail&lt;/code&gt; させることができます。</target>
        </trans-unit>
        <trans-unit id="c675952980c889f0d89ff8e73fd8703b823a9ed6" translate="yes" xml:space="preserve">
          <source>All printable Unicode characters are considered when determining if a list of integers is to be displayed in string syntax. This can give unexpected results if, for example, your font does not cover all Unicode characters.</source>
          <target state="translated">すべての印字可能な Unicode キ ャ ラ ク タ は、 整数の リ ス ト を文字列構文で表示す る かど う かを決定す る 際に考慮 さ れます。こ れは、 た と えば、 フ ォ ン ト がすべての Unicode キ ャ ラ ク タ を網羅 し ていない と き には、 予期せぬ結果を与え る こ と があ り ます。</target>
        </trans-unit>
        <trans-unit id="3b7ed40b3a03fdb7bdd0b017e905acbe12c81905" translate="yes" xml:space="preserve">
          <source>All processes and ports created after the call is are to be traced.</source>
          <target state="translated">呼び出し後に作成されたすべてのプロセスとポートをトレースします。</target>
        </trans-unit>
        <trans-unit id="ec9536dced588a5adfc7f095f97a48ee12e811ce" translate="yes" xml:space="preserve">
          <source>All processes and ports in the system as well as all processes and ports created hereafter are to be traced.</source>
          <target state="translated">システム内のすべてのプロセスとポート、および今後作成されるすべてのプロセスとポートを追跡する。</target>
        </trans-unit>
        <trans-unit id="02ef48a5ab6a5d0ee8466733327d3e4350edfd7d" translate="yes" xml:space="preserve">
          <source>All processes and ports that will be created in the future.</source>
          <target state="translated">今後作成されるすべてのプロセスとポート。</target>
        </trans-unit>
        <trans-unit id="d9be8009e2c7f6a938c6f743db853b2dfb9ccf36" translate="yes" xml:space="preserve">
          <source>All processes created after the call is are to be traced.</source>
          <target state="translated">呼び出し後に作成されたすべてのプロセスをトレースします。</target>
        </trans-unit>
        <trans-unit id="058932c80ec58afa4c752d8e488f1fd07db947f7" translate="yes" xml:space="preserve">
          <source>All processes executing code in interpreted modules are displayed in the Monitor window.</source>
          <target state="translated">インタプリタモジュールでコードを実行しているすべてのプロセスがモニタウィンドウに表示されます。</target>
        </trans-unit>
        <trans-unit id="974deb8f031d33a6740c7ebe7532a4266b1e29c9" translate="yes" xml:space="preserve">
          <source>All processes in the system as well as all processes created hereafter are to be traced.</source>
          <target state="translated">システム内の全てのプロセスと、今後作成される全てのプロセスをトレースすること。</target>
        </trans-unit>
        <trans-unit id="263aac7a2b0fbff02edd125aaea0db769c21d0fa" translate="yes" xml:space="preserve">
          <source>All processes that will be created in the future.</source>
          <target state="translated">今後作成される全ての工程。</target>
        </trans-unit>
        <trans-unit id="b62c900a4023fa86a2240db1615b7f1efe40eb78" translate="yes" xml:space="preserve">
          <source>All programs accessing the database through the transaction system can be written as if they had sole access to the data. This is a desirable property, as all synchronization is taken care of by the transaction handler. If a program reads or writes data, the system ensures that no other program tries to manipulate the same data at the same time.</source>
          <target state="translated">トランザクションシステムを介してデータベースにアクセスするすべてのプログラムは、あたかも自分たちがデータに単独でアクセスしているかのように書くことができます。これは、すべての同期化がトランザクションハンドラによって行われるため、望ましい特性です。あるプログラムがデータを読み書きする場合、システムは他のプログラムが同時に同じデータを操作しようとしないことを保証します。</target>
        </trans-unit>
        <trans-unit id="17a5433d9d8b1ba8d9bee65a3013cbeaf6dd7b31" translate="yes" xml:space="preserve">
          <source>All record names generated by the compiler are prefixed with &lt;code&gt;Prefix&lt;/code&gt;. This is useful when multiple protocols that contain records with identical names are included in a single module.</source>
          <target state="translated">コンパイラーによって生成されるすべてのレコード名には、接頭辞 &lt;code&gt;Prefix&lt;/code&gt; が付きます。これは、同じ名前のレコードを含む複数のプロトコルが単一のモジュールに含まれている場合に役立ちます。</target>
        </trans-unit>
        <trans-unit id="979b4a0590268416125e90127fc8bfa28240add9" translate="yes" xml:space="preserve">
          <source>All records used in this Reference Manual are generated from ASN.1 specifications and are documented in the User's Guide. See &lt;code&gt;&lt;a href=&quot;public_key_records&quot;&gt;Public-key Records&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このリファレンスマニュアルで使用されるすべてのレコードはASN.1仕様から生成され、ユーザーガイドに記載されています。 &lt;code&gt;&lt;a href=&quot;public_key_records&quot;&gt;Public-key Records&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="9ac9354c0bfca95837d962e8ba1466208a9c37ae" translate="yes" xml:space="preserve">
          <source>All references to this node can then use the node name. For example, a file over FTP is fetched like follows:</source>
          <target state="translated">このノードへのすべての参照は、ノード名を使用することができます。例えば、FTP上のファイルは以下のように取得されます。</target>
        </trans-unit>
        <trans-unit id="9078a5064d8a2d7b1b465df78627e79bf9b494a4" translate="yes" xml:space="preserve">
          <source>All replicas are &lt;code&gt;ram_copies&lt;/code&gt;.</source>
          <target state="translated">すべてのレプリカは &lt;code&gt;ram_copies&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="02e9fe7f27cf72b855151f6db9301e6668c3912f" translate="yes" xml:space="preserve">
          <source>All reports containing a common pattern can be shown. Suppose a process crashes because it tries to call a non-existing function &lt;code&gt;release_handler:mbj_func/1&lt;/code&gt;. The reports can then be shown as follows:</source>
          <target state="translated">共通のパターンを含むすべてのレポートを表示できます。存在しない関数 &lt;code&gt;release_handler:mbj_func/1&lt;/code&gt; を呼び出そうとしたためにプロセスがクラッシュしたとします。レポートは次のように表示できます。</target>
        </trans-unit>
        <trans-unit id="d223dc7b2bab3d6a8406ce4cb25c92a16820e095" translate="yes" xml:space="preserve">
          <source>All reports matching the regular expression &lt;code&gt;RegExp&lt;/code&gt; are displayed. &lt;code&gt;RegExp&lt;/code&gt; can be any of the following:</source>
          <target state="translated">正規表現 &lt;code&gt;RegExp&lt;/code&gt; に一致するすべてのレポートが表示されます。 &lt;code&gt;RegExp&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="feccd905133ca27d919366e9013d126e914e1433" translate="yes" xml:space="preserve">
          <source>All request made by the client to the connection are synchronous. If the timeout is used and expires the client process will exit with reason timeout. Proably the right thing to do is let the client die and perhaps be restarted by its supervisor. But if the client chooses to catch this timeout, it is a good idea to wait a little while before trying again. If there are too many consecutive timeouts that are caught the connection process will conclude that there is something radically wrong and terminate the connection.</source>
          <target state="translated">クライアントが接続に対して行ったすべてのリクエストは同期しています。タイムアウトが使用され、期限切れになった場合、クライアントプロセスは理由のあるタイムアウトで終了します。おそらく正しいのは、クライアントを終了させて、おそらくそのスーパーバイザによって再起動させることです。しかし、クライアントがこのタイムアウトをキャッチすることを選択した場合は、再試行する前に少し待ってみるのが良いでしょう。もし連続したタイムアウトが多すぎると、接続プロセスは何か根本的に問題があると判断し、接続を終了させます。</target>
        </trans-unit>
        <trans-unit id="032cbcc0d828f70779b0c0ed0bc3facdb5203770" translate="yes" xml:space="preserve">
          <source>All resource objects are created as instances of some &lt;strong&gt;resource type&lt;/strong&gt;. This makes resources from different modules to be distinguishable. A resource type is created by calling &lt;code&gt;&lt;a href=&quot;#enif_open_resource_type&quot;&gt;enif_open_resource_type&lt;/a&gt;&lt;/code&gt; when a library is loaded. Objects of that resource type can then later be allocated and &lt;code&gt;enif_get_resource&lt;/code&gt; verifies that the resource is of the expected type. A resource type can have a user-supplied destructor function, which is automatically called when resources of that type are released (by either the garbage collector or &lt;code&gt;enif_release_resource&lt;/code&gt;). Resource types are uniquely identified by a supplied name string and the name of the implementing module.</source>
          <target state="translated">すべてのリソースオブジェクトは、いくつかの&lt;strong&gt;リソースタイプの&lt;/strong&gt;インスタンスとして作成されます。これにより、さまざまなモジュールのリソースを区別できるようになります。リソースタイプは、ライブラリのロード時に &lt;code&gt;&lt;a href=&quot;#enif_open_resource_type&quot;&gt;enif_open_resource_type&lt;/a&gt;&lt;/code&gt; を呼び出すことによって作成されます。そのリソースタイプのオブジェクトを後で割り当てることができ、 &lt;code&gt;enif_get_resource&lt;/code&gt; は、リソースが予期されたタイプであることを確認します。リソースタイプには、ユーザー指定のデストラクタ関数を &lt;code&gt;enif_release_resource&lt;/code&gt; ことができます。この関数は、そのタイプのリソースが（ガベージコレクターまたはenif_release_resourceによって）解放されたときに自動的に呼び出されます。リソースタイプは、指定された名前文字列と実装モジュールの名前によって一意に識別されます。</target>
        </trans-unit>
        <trans-unit id="8b7a4f2a8dc320cacf959f8d17456e7115df6332" translate="yes" xml:space="preserve">
          <source>All runtime dependencies specified in OTP applications during the OTP 17 release may not be completely correct. This is actively being worked on. Declared runtime dependencies in OTP applications are expected to be correct in OTP 18.</source>
          <target state="translated">OTP 17 リリース中に OTP アプリケーションで指定されたすべてのランタイム依存関係が完全に正しいとは限りません。これは現在、積極的に取り組んでいます。OTPアプリケーションで宣言されたランタイム依存関係は、OTP 18では正しいものになると予想されます。</target>
        </trans-unit>
        <trans-unit id="8d4e91d8f62a7df11a977cb27005070535f221fd" translate="yes" xml:space="preserve">
          <source>All sections are returned even if they do not exist in the escript. If a particular section happens to have the same value as the default value, the extracted value is set to the atom &lt;code&gt;default&lt;/code&gt;. If a section is missing, the extracted value is set to the atom &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">セクションがescriptに存在しない場合でも、すべてのセクションが返されます。特定のセクションが偶然デフォルト値と同じ値を持つ場合、抽出された値はアトムの &lt;code&gt;default&lt;/code&gt; 設定されます。セクションがない場合、抽出された値はアトム &lt;code&gt;undefined&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="93c2177455dcce657afa2684588a0241cb58b085" translate="yes" xml:space="preserve">
          <source>All sizes are in words.</source>
          <target state="translated">サイズは全てワードでの表記となります。</target>
        </trans-unit>
        <trans-unit id="816578661858d321b1e0e5d92462cad1bde0c144" translate="yes" xml:space="preserve">
          <source>All source directories identified by &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-l&lt;/code&gt; should contain build results of OTP applications.</source>
          <target state="translated">&lt;code&gt;-s&lt;/code&gt; および &lt;code&gt;-l&lt;/code&gt; で識別されるすべてのソースディレクトリには、OTPアプリケーションのビルド結果が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="279a723e274bbdf44bf4e5f4cdb64a6e1d7b0708" translate="yes" xml:space="preserve">
          <source>All strongly connected components of the Inter Call Graph. Each component is a set of exported or unused local functions that call each other (in)directly.</source>
          <target state="translated">インターコール・グラフのすべての強く接続されたコンポーネント。各コンポーネントは、エクスポートされた、または使用されていないローカル関数のセットであり、お互いを(内部で)直接呼び出します。</target>
        </trans-unit>
        <trans-unit id="ce9911ac68b49180cc63944c113ff7ba4d2e2e06" translate="yes" xml:space="preserve">
          <source>All subexpressions are evaluated before an expression itself is evaluated, unless explicitly stated otherwise. For example, consider the expression:</source>
          <target state="translated">明示的に指定されていない限り、すべての副式は式自体が評価される前に評価されます。例えば、次の式を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="bc8cf988787046c6e827bee8905f94b4d9c3ab4c" translate="yes" xml:space="preserve">
          <source>All subroutine calls, recursive or not, are always treated as atomic groups. That is, once a subroutine has matched some of the subject string, it is never re-entered, even if it contains untried alternatives and there is a subsequent matching failure. Any capturing parentheses that are set during the subroutine call revert to their previous values afterwards.</source>
          <target state="translated">再帰的かどうかに関わらず、すべてのサブルーチン呼び出しは常にアトミックグループとして扱われます。つまり、一度サブルーチンが対象文字列の一部にマッチした後は、未検証の代替案が含まれていて、その後にマッチに失敗した場合でも、その文字列が再入力されることはありません。サブルーチン呼び出し中に設定された捕獲括弧は、その後は以前の値に戻ります。</target>
        </trans-unit>
        <trans-unit id="1d5c8272d5e19cda4e470b25066c4bee5acf4aba" translate="yes" xml:space="preserve">
          <source>All supported applications are sent in CEA. The user can reject an incoming CER or CEA in a configured callback.</source>
          <target state="translated">サポートされているアプリケーションはすべてCEAで送信されます。ユーザーは、設定されたコールバックで着信CERまたはCEAを拒否することができます。</target>
        </trans-unit>
        <trans-unit id="275f9905a31aea84897da6140c192789acae8be1" translate="yes" xml:space="preserve">
          <source>All system events are subscribed by the &lt;code&gt;Mnesia&lt;/code&gt;&lt;code&gt;gen_event&lt;/code&gt; handler. The default &lt;code&gt;gen_event&lt;/code&gt; handler is &lt;code&gt;mnesia_event&lt;/code&gt;, but it can be changed by using application parameter &lt;code&gt;event_module&lt;/code&gt;. The value of this parameter must be the name of a module implementing a complete handler, as specified by the &lt;code&gt;gen_event&lt;/code&gt; module in &lt;code&gt;STDLIB&lt;/code&gt;.</source>
          <target state="translated">すべてのシステムイベントは、 &lt;code&gt;Mnesia&lt;/code&gt; &lt;code&gt;gen_event&lt;/code&gt; ハンドラーによってサブスクライブされます。デフォルトの &lt;code&gt;gen_event&lt;/code&gt; ハンドラーは &lt;code&gt;mnesia_event&lt;/code&gt; ですが、アプリケーションパラメーター &lt;code&gt;event_module&lt;/code&gt; を使用して変更できます。で指定され、このパラメータの値は、完全なハンドラを実装したモジュールの名前でなければなりません &lt;code&gt;gen_event&lt;/code&gt; でモジュール &lt;code&gt;STDLIB&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d08314aed5dcca44e10e6d9a69ebf73a80227eb" translate="yes" xml:space="preserve">
          <source>All tables in these MIBs have a column of type &lt;code&gt;StorageType&lt;/code&gt;. The value of this column specifies how each row is stored, and what happens in case of a restart of the agent. The implementation supports the values &lt;code&gt;volatile&lt;/code&gt; and &lt;code&gt;nonVolatile&lt;/code&gt;. When the tables are initially filled with data from the configuration files, these rows will automatically have storage type &lt;code&gt;nonVolatile&lt;/code&gt;. Should the agent restart, all &lt;code&gt;nonVolatile&lt;/code&gt; rows survive the restart, while the &lt;code&gt;volatile&lt;/code&gt; rows are lost. The configuration files are not read at restart, by default.</source>
          <target state="translated">これらのMIBのすべてのテーブルには、タイプ &lt;code&gt;StorageType&lt;/code&gt; の列があります。この列の値は、各行がどのように格納されるか、およびエージェントの再始動の場合に何が起こるかを指定します。実装では、 &lt;code&gt;volatile&lt;/code&gt; および &lt;code&gt;nonVolatile&lt;/code&gt; の値がサポートされています。テーブルに最初に構成ファイルのデータが入力されると、これらの行のストレージタイプは &lt;code&gt;nonVolatile&lt;/code&gt; になります。エージェントが再起動すると、 &lt;code&gt;volatile&lt;/code&gt; 行は失われますが、すべての &lt;code&gt;nonVolatile&lt;/code&gt; 揮発性行は再起動後も存続します。デフォルトでは、構成ファイルは再起動時に読み取られません。</target>
        </trans-unit>
        <trans-unit id="2be215003503f0345c1ed6d0ccc3e065ee26074f" translate="yes" xml:space="preserve">
          <source>All tables in this MIB have a column of type &lt;code&gt;StorageType&lt;/code&gt;. The value of the column specifies how each row is stored, and what happens in case of a restart of the agent. The implementation supports the values &lt;code&gt;volatile&lt;/code&gt; and &lt;code&gt;nonVolatile&lt;/code&gt;. When the tables are initially filled with data from the configuration files, these rows will automatically have storage type &lt;code&gt;nonVolatile&lt;/code&gt;. Should the agent restart, all &lt;code&gt;nonVolatile&lt;/code&gt; rows survive the restart, while the &lt;code&gt;volatile&lt;/code&gt; rows are lost. The configuration files are not read at restart, by default.</source>
          <target state="translated">このMIBのすべてのテーブルには、タイプ &lt;code&gt;StorageType&lt;/code&gt; の列があります。列の値は、各行の格納方法、およびエージェントを再起動した場合に何が発生するかを指定します。実装では、 &lt;code&gt;volatile&lt;/code&gt; および &lt;code&gt;nonVolatile&lt;/code&gt; の値がサポートされています。テーブルに最初に構成ファイルのデータが入力されると、これらの行のストレージタイプは &lt;code&gt;nonVolatile&lt;/code&gt; になります。エージェントが再起動すると、 &lt;code&gt;volatile&lt;/code&gt; 行は失われますが、すべての &lt;code&gt;nonVolatile&lt;/code&gt; 揮発性行は再起動後も存続します。デフォルトでは、構成ファイルは再起動時に読み取られません。</target>
        </trans-unit>
        <trans-unit id="b6acc62d86c3d4707c0eac98a8d2e6fe30ade03d" translate="yes" xml:space="preserve">
          <source>All tables in this MIB have a column of type &lt;code&gt;StorageType&lt;/code&gt;. The value of this column specifies how each row is stored, and what happens in case of a restart of the agent. The implementation supports the values &lt;code&gt;volatile&lt;/code&gt; and &lt;code&gt;nonVolatile&lt;/code&gt;. When the tables are initially filled with data from the configuration files, these rows will automatically have storage type &lt;code&gt;nonVolatile&lt;/code&gt;. Should the agent restart, all &lt;code&gt;nonVolatile&lt;/code&gt; rows survive the restart, while the &lt;code&gt;volatile&lt;/code&gt; rows are lost. The configuration files are not read at restart by default.</source>
          <target state="translated">このMIBのすべてのテーブルには、タイプ &lt;code&gt;StorageType&lt;/code&gt; の列があります。この列の値は、各行がどのように格納されるか、およびエージェントの再始動の場合に何が起こるかを指定します。実装では、 &lt;code&gt;volatile&lt;/code&gt; および &lt;code&gt;nonVolatile&lt;/code&gt; の値がサポートされています。テーブルに最初に構成ファイルのデータが入力されると、これらの行のストレージタイプは &lt;code&gt;nonVolatile&lt;/code&gt; になります。エージェントが再起動すると、 &lt;code&gt;volatile&lt;/code&gt; 行は失われますが、すべての &lt;code&gt;nonVolatile&lt;/code&gt; 揮発性行は再起動後も存続します。デフォルトでは、再起動時に構成ファイルは読み込まれません。</target>
        </trans-unit>
        <trans-unit id="00646ed20fc05656dbed000a1f7dd63af6936be5" translate="yes" xml:space="preserve">
          <source>All tables in this MIB have a column of type &lt;code&gt;StorageType&lt;/code&gt;. The value of this column specifies how each row is stored, and what happens in case of a restart of the agent. The implementation supports the values &lt;code&gt;volatile&lt;/code&gt; and &lt;code&gt;nonVolatile&lt;/code&gt;. When the tables are initially filled with data from the configuration files, these rows will automatically have storage type &lt;code&gt;nonVolatile&lt;/code&gt;. Should the agent restart, all &lt;code&gt;nonVolatile&lt;/code&gt; rows survive the restart, while the &lt;code&gt;volatile&lt;/code&gt; rows are lost. The configuration files are not read at restart, by default.</source>
          <target state="translated">このMIBのすべてのテーブルには、タイプ &lt;code&gt;StorageType&lt;/code&gt; の列があります。この列の値は、各行がどのように格納されるか、およびエージェントの再始動の場合に何が起こるかを指定します。実装では、 &lt;code&gt;volatile&lt;/code&gt; および &lt;code&gt;nonVolatile&lt;/code&gt; の値がサポートされています。テーブルに最初に構成ファイルのデータが入力されると、これらの行のストレージタイプは &lt;code&gt;nonVolatile&lt;/code&gt; になります。エージェントが再起動すると、 &lt;code&gt;volatile&lt;/code&gt; 行は失われますが、すべての &lt;code&gt;nonVolatile&lt;/code&gt; 揮発性行は再起動後も存続します。デフォルトでは、構成ファイルは再起動時に読み取られません。</target>
        </trans-unit>
        <trans-unit id="1d08c6b8f5332d226fb098f25e3d0026f24d96b0" translate="yes" xml:space="preserve">
          <source>All terminal sessions, forwarded connections, and so on, are channels. Multiple channels are multiplexed into a single connection. All channels are flow-controlled. This means that no data is sent to a channel peer until a message is received to indicate that window space is available. The &lt;strong&gt;initial window size&lt;/strong&gt; specifies how many bytes of channel data that can be sent to the channel peer without adjusting the window. Typically, an SSH client opens a channel, sends data (commands), receives data (control information), and then closes the channel. The &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; behaviour handles generic parts of SSH channel management. This makes it easy to write your own SSH client/server processes that use flow-control and thus opens for more focus on the application logic.</source>
          <target state="translated">すべての端末セッション、転送された接続などはチャネルです。複数のチャネルが単一の接続に多重化されます。すべてのチャネルはフロー制御されています。つまり、ウィンドウスペースが利用可能であることを示すメッセージが受信されるまで、データはチャネルピアに送信されません。&lt;strong&gt;初期ウィンドウサイズの&lt;/strong&gt;指定どのように多くのウィンドウを調整することなく、チャネルピアに送信することができ、チャネルデータのバイト数。通常、SSHクライアントはチャネルを開き、データ（コマンド）を送信し、データ（制御情報）を受信して​​からチャネルを閉じます。 &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; の挙動はSSHチャネル管理の一般的な部分を処理します。これにより、フロー制御を使用する独自のSSHクライアント/サーバープロセスを簡単に作成できるようになり、アプリケーションロジックにより重点を置くことができます。</target>
        </trans-unit>
        <trans-unit id="bbaac04b0726304e8bc0e8488270b15fbabc7eec" translate="yes" xml:space="preserve">
          <source>All terms of type &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; belong to an environment of type &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;ErlNifEnv&lt;/a&gt;&lt;/code&gt;. The lifetime of a term is controlled by the lifetime of its environment object. All API functions that read or write terms has the environment that the term belongs to as the first function argument.</source>
          <target state="translated">タイプ &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; のすべての用語は、タイプErlNifEnvの環境に &lt;code&gt;&lt;a href=&quot;#ErlNifEnv&quot;&gt;ErlNifEnv&lt;/a&gt;&lt;/code&gt; ます。用語の存続期間は、その環境オブジェクトの存続期間によって制御されます。用語を読み書きするすべてのAPI関数は、最初の関数引数として、用語が属する環境を持っています。</target>
        </trans-unit>
        <trans-unit id="a9bcc2ff9eb94545ba2264a6548aeeb2cfbc7213" translate="yes" xml:space="preserve">
          <source>All test specification terms can have a &lt;code&gt;NodeRefs&lt;/code&gt; element. This element specifies which node or nodes a configuration operation or a test is to be executed on. &lt;code&gt;NodeRefs&lt;/code&gt; is defined as follows:</source>
          <target state="translated">すべてのテスト仕様用語は &lt;code&gt;NodeRefs&lt;/code&gt; 要素を持つことができます。この要素は、構成操作またはテストを実行するノードを指定します。 &lt;code&gt;NodeRefs&lt;/code&gt; は次のように定義されます。</target>
        </trans-unit>
        <trans-unit id="48735adbc1ab5a93b4785b0a0f4fffaf6f1c2e20" translate="yes" xml:space="preserve">
          <source>All the Latin-1 printable characters can be used and are shown without the escape backslash convention.</source>
          <target state="translated">すべての Latin-1 印刷可能な文字が使用でき、エスケープバックスラッシュの規約なしで表示されます。</target>
        </trans-unit>
        <trans-unit id="c7d4b662d48820ea13cd394713d1d0d65d538449" translate="yes" xml:space="preserve">
          <source>All the files are searched for in the code path. It is assumed that the &lt;code&gt;.app&lt;/code&gt; and &lt;code&gt;.appup&lt;/code&gt; files for an application are located in the same directory.</source>
          <target state="translated">すべてのファイルがコードパスで検索されます。アプリケーションの &lt;code&gt;.app&lt;/code&gt; ファイルと &lt;code&gt;.appup&lt;/code&gt; ファイルは同じディレクトリにあると想定されています。</target>
        </trans-unit>
        <trans-unit id="0444fd0cb5c7b225515f5d7a7b6af2522512c8ad" translate="yes" xml:space="preserve">
          <source>All the makefiles in the entire directory tree use the environment variable &lt;code&gt;ERL_TOP&lt;/code&gt; to find the absolute path of the installation. The &lt;code&gt;configure&lt;/code&gt; script will figure this out and set it in the top level Makefile (which, when building, it will pass on). However, when developing it is sometimes convenient to be able to run make in a subdirectory. To do this you must set the &lt;code&gt;ERL_TOP&lt;/code&gt; variable before you run make.</source>
          <target state="translated">ディレクトリツリー全体のすべてのメイクファイルは、環境変数 &lt;code&gt;ERL_TOP&lt;/code&gt; を使用して、インストールの絶対パスを検索します。 &lt;code&gt;configure&lt;/code&gt; スクリプトは、このアウトを理解し、トップレベル（ビルドするとき、それは上渡します、）Makefileでそれを設定します。ただし、開発時には、サブディレクトリでmakeを実行できると便利な場合があります。これを行うには、 &lt;code&gt;ERL_TOP&lt;/code&gt; を実行する前にERL_TOP変数を設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="4e454e4a6b739313895f7f1cd6dd60a39deee0fd" translate="yes" xml:space="preserve">
          <source>All the sequences that define a single character value can be used both inside and outside character classes. Also, inside a character class, \b is interpreted as the backspace character (hex 08).</source>
          <target state="translated">1 つの文字値を定義するすべてのシーケンスは、文字クラスの内部でも外部でも使用することができます。また、文字クラス内では、bはバックスペース文字(16進数08)として解釈されます。</target>
        </trans-unit>
        <trans-unit id="4ee45dea67a291aecd38cc8ca1fc6c4d76ed45cd" translate="yes" xml:space="preserve">
          <source>All the standard &lt;code&gt;erlc&lt;/code&gt; flags are supported, e.g.</source>
          <target state="translated">すべての標準 &lt;code&gt;erlc&lt;/code&gt; フラグがサポートされています。例：</target>
        </trans-unit>
        <trans-unit id="7f1c4eba20235be2abd7c818764fb7f15db8c9f6" translate="yes" xml:space="preserve">
          <source>All these approaches have different advantages and disadvantages. Mnesia applications can easily be opened to the SNMP protocol. A direct 1-to-1 mapping can be established between Mnesia tables and SNMP tables. This means that a Mnesia table can be configured to be &lt;strong&gt;both&lt;/strong&gt; a Mnesia table and an SNMP table. A number of functions to control this behavior are described in the Reference Manual.</source>
          <target state="translated">これらすべてのアプローチには、さまざまな利点と欠点があります。Mnesiaアプリケーションは、SNMPプロトコルに対して簡単に開くことができます。MnesiaテーブルとSNMPテーブルの間で、1対1の直接マッピングを確立できます。つまり、Mnesiaテーブルは、MnesiaテーブルとSNMPテーブルの&lt;strong&gt;両方に&lt;/strong&gt;なるように構成できます。この動作を制御する多数の関数がリファレンスマニュアルに記載されています。</target>
        </trans-unit>
        <trans-unit id="1fac601052f4adfe0b1a57d2c3f3d2911074176e" translate="yes" xml:space="preserve">
          <source>All these files are searched for in the current path. If option &lt;code&gt;{path,[Dir]}&lt;/code&gt; is specified, this path is appended to the current path. Wildcard &lt;code&gt;*&lt;/code&gt; is expanded to all matching directories. Example: &lt;code&gt;&quot;lib/*/ebin&quot;&lt;/code&gt;.</source>
          <target state="translated">これらのファイルはすべて、現在のパスで検索されます。オプション &lt;code&gt;{path,[Dir]}&lt;/code&gt; が指定されている場合、このパスは現在のパスに追加されます。ワイルドカード &lt;code&gt;*&lt;/code&gt; は、一致するすべてのディレクトリに展開されます。例： &lt;code&gt;&quot;lib/*/ebin&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7e2356ccbec315a42104120c05856a52f734c98" translate="yes" xml:space="preserve">
          <source>All these specifications are commonly referred to as &quot;SNMPv3&quot;, but it is actually only the Message module, which defines a new message format, and Security module, which takes care of encryption and authentication, that cannot be used with SNMPv1 or SNMPv2c. In this version of the agent toolkit, all the standard MIBs for agent configuration are used. This includes MIBs for definition of management targets for notifications. These MIBs are used regardless of which SNMP version the agent is configured to use.</source>
          <target state="translated">これらの仕様はすべて一般的に「SNMPv3」と呼ばれていますが、実際には新しいメッセージ形式を定義する「Messageモジュール」と、暗号化や認証を担当する「Securityモジュール」のみで、SNMPv1やSNMPv2cでは使用できません。このバージョンのエージェントツールキットでは、エージェント設定のための標準MIBをすべて使用しています。これには、通知のための管理対象の定義のためのMIBが含まれます。これらのMIBは、エージェントが使用するように構成されているSNMPのバージョンに関係なく使用されます。</target>
        </trans-unit>
        <trans-unit id="3cac96e5ed27b35536f52f9e48ab7dabf6e3dcbc" translate="yes" xml:space="preserve">
          <source>All these terms are tuples or atoms and this property will hold in any future version of &lt;code&gt;gen_statem&lt;/code&gt;.</source>
          <target state="translated">これらの用語はすべてタプルまたはアトムであり、このプロパティは &lt;code&gt;gen_statem&lt;/code&gt; の将来のバージョンでも保持されます。</target>
        </trans-unit>
        <trans-unit id="890112740b2f13fe0da0f81f57e7bfd71e15b913" translate="yes" xml:space="preserve">
          <source>All those processes are suspended using &lt;code&gt;sys:suspend&lt;/code&gt;, the new module version is loaded, and then the processes are resumed using &lt;code&gt;sys:resume&lt;/code&gt;.</source>
          <target state="translated">これらのプロセスはすべて &lt;code&gt;sys:suspend&lt;/code&gt; を使用して中断され、新しいモジュールバージョンがロードされてから、 &lt;code&gt;sys:resume&lt;/code&gt; を使用してプロセスが再開されます。</target>
        </trans-unit>
        <trans-unit id="cdb00a5ac19881ad68109f99749ac6602091708a" translate="yes" xml:space="preserve">
          <source>All time values in the printout are in milliseconds.</source>
          <target state="translated">プリントアウトの時間値はすべてミリ秒単位です。</target>
        </trans-unit>
        <trans-unit id="3664934232b9c1e3d5ba66ce6f23f716a86fdf6f" translate="yes" xml:space="preserve">
          <source>All time-out parameters in &lt;code&gt;ct_ssh&lt;/code&gt; functions are values in milliseconds.</source>
          <target state="translated">&lt;code&gt;ct_ssh&lt;/code&gt; 関数のすべてのタイムアウトパラメータは、ミリ秒単位の値です。</target>
        </trans-unit>
        <trans-unit id="73ac2e4652c66f37048e2ce303fb4b7c12c7f46b" translate="yes" xml:space="preserve">
          <source>All trace messages are now sent to the trace port driver, which in turn listens for connections on the TCP/IP port 4711. If we want to see the messages on another node, preferably on another host, we do like this:</source>
          <target state="translated">すべてのトレースメッセージはトレースポートドライバに送信され、TCP/IPポート4711での接続をリッスンします。別のノード、できれば別のホストでメッセージを見たい場合は、次のようにします。</target>
        </trans-unit>
        <trans-unit id="8f71e5171eeb0a212a223f31caa94583b81ed2fb" translate="yes" xml:space="preserve">
          <source>All trace messages described in &lt;code&gt;erlang:trace/3&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;erlang:trace/3&lt;/code&gt; に記述されているすべてのトレースメッセージ</target>
        </trans-unit>
        <trans-unit id="d3efff8fa8f318980d38111160f5b67cc47267dc" translate="yes" xml:space="preserve">
          <source>All tracepoints are in the domain of &lt;code&gt;org_erlang_dyntrace&lt;/code&gt;</source>
          <target state="translated">すべてのトレースポイントは &lt;code&gt;org_erlang_dyntrace&lt;/code&gt; のドメインにあります</target>
        </trans-unit>
        <trans-unit id="44cb4a9b19b2ae441f7387b7938876140dd1d39f" translate="yes" xml:space="preserve">
          <source>All tracepoints are in the domain of &lt;code&gt;org_erlang_otp&lt;/code&gt;</source>
          <target state="translated">すべてのトレースポイントは &lt;code&gt;org_erlang_otp&lt;/code&gt; のドメインにあります</target>
        </trans-unit>
        <trans-unit id="fe016daf62582765dc4aa1a03f24a6e0af233e2a" translate="yes" xml:space="preserve">
          <source>All tracepoints via dyntrace are now visibile and can be listed through &lt;code&gt;lttng list -u&lt;/code&gt;.</source>
          <target state="translated">dyntraceを介したすべてのトレースポイントが表示され、 &lt;code&gt;lttng list -u&lt;/code&gt; を使用して一覧表示できます。</target>
        </trans-unit>
        <trans-unit id="499f82751e8891c03eee132bbb924f122760fc91" translate="yes" xml:space="preserve">
          <source>All uses of &lt;code&gt;erlang:now/0&lt;/code&gt; are not necessarily time warp unsafe. If you do not use it to get time, it is time warp safe. However, &lt;strong&gt;all uses of &lt;code&gt;erlang:now/0&lt;/code&gt; are suboptimal&lt;/strong&gt; from a performance and scalability perspective. So you really want to replace the use of it with other functionality. For examples of how to replace the use of &lt;code&gt;erlang:now/0&lt;/code&gt;, see section &lt;code&gt;&lt;a href=&quot;#Dos_and_Donts&quot;&gt;How to Work with the New API&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:now/0&lt;/code&gt; をすべて使用しても、必ずしもタイムワープが危険であるとは限りません。時間を稼ぐために使用しない場合は、タイムワープセーフです。ただし、&lt;strong&gt; &lt;code&gt;erlang:now/0&lt;/code&gt; の&lt;/strong&gt;&lt;strong&gt;使用はすべて&lt;/strong&gt;、パフォーマンスとスケーラビリティの観点から&lt;strong&gt;は最適と&lt;/strong&gt;&lt;strong&gt;は&lt;/strong&gt;言え&lt;strong&gt;ません&lt;/strong&gt;。したがって、あなたは本当にそれの使用を他の機能に置き換えたいです。 &lt;code&gt;erlang:now/0&lt;/code&gt; の使用を置き換える方法の例については、「 &lt;code&gt;&lt;a href=&quot;#Dos_and_Donts&quot;&gt;How to Work with the New API&lt;/a&gt;&lt;/code&gt; 」セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="211631ba4463502ebe4c8f751cdd7698a665a9d5" translate="yes" xml:space="preserve">
          <source>All valid &lt;code&gt;Modifier&lt;/code&gt;s can be combined. Repeated (valid) &lt;code&gt;Modifier&lt;/code&gt;s in the &lt;code&gt;ModifierList&lt;/code&gt; are ignored.</source>
          <target state="translated">すべての有効な &lt;code&gt;Modifier&lt;/code&gt; を組み合わせることができます。 &lt;code&gt;Modifier&lt;/code&gt; List内の繰り返された（有効な） &lt;code&gt;ModifierList&lt;/code&gt; は無視されます。</target>
        </trans-unit>
        <trans-unit id="b7b522b5a14ce33ffd78ac8c417a27a7fc89b353" translate="yes" xml:space="preserve">
          <source>All value tuples returned, except user terms, have the node name as first element.</source>
          <target state="translated">返された値タプルは、ユーザー用語を除くすべての値タプルが、最初の要素としてノード名を持っています。</target>
        </trans-unit>
        <trans-unit id="21e9bece8ea26173685ff9911582acaf9d4050b7" translate="yes" xml:space="preserve">
          <source>All variables are bound in the head of a match specification, so the translator cannot allow multiple bindings. The special case when matching is done on the top-level makes the variable bind to &lt;code&gt;'$_'&lt;/code&gt; in the resulting match specification. It is to allow a more natural access to the whole matched object. Pseudo function &lt;code&gt;object()&lt;/code&gt; can be used instead, see below.</source>
          <target state="translated">すべての変数は一致仕様の先頭でバインドされるため、トランスレータは複数のバインドを許可できません。トップレベルでマッチングが行われる特殊なケースでは、結果のマッチング仕様で変数が &lt;code&gt;'$_'&lt;/code&gt; にバインドされます。一致したオブジェクト全体へのより自然なアクセスを可能にするためです。代わりに、疑似関数 &lt;code&gt;object()&lt;/code&gt; を使用できます。以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="3239372c6832b6066bf1341e4487441749e323f8" translate="yes" xml:space="preserve">
          <source>All variables in this section can also be used when native compiling.</source>
          <target state="translated">このセクションのすべての変数は、ネイティブコンパイル時にも使用できます。</target>
        </trans-unit>
        <trans-unit id="e461c8c7353cd1b34f013d7ed1f82ff4c3ffca7d" translate="yes" xml:space="preserve">
          <source>All variables that occur in a generator pattern are assumed to be &quot;fresh&quot; variables.</source>
          <target state="translated">ジェネレータパターンで発生するすべての変数は、「新鮮な」変数であることを前提としています。</target>
        </trans-unit>
        <trans-unit id="df218dfee4c4921dcfbc282d5dc989b168d2e1f4" translate="yes" xml:space="preserve">
          <source>All variables that occur in the head of a fun are assumed to be &quot;fresh&quot; variables.</source>
          <target state="translated">ファンの先頭で発生するすべての変数は、&quot;新鮮な &quot;変数であると仮定しています。</target>
        </trans-unit>
        <trans-unit id="9dca8a39352aeb9ee959a27cda59139e72297719" translate="yes" xml:space="preserve">
          <source>All versions of a release, except the first one, must contain a &lt;code&gt;relup&lt;/code&gt; file.</source>
          <target state="translated">最初のバージョンを除くすべてのリリースバージョンには、 &lt;code&gt;relup&lt;/code&gt; ファイルが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="1e91b63c830fdded4d39a3a4df9692ba7ad1288f" translate="yes" xml:space="preserve">
          <source>All write operations must be written to persistent storage.</source>
          <target state="translated">すべての書き込み操作は、永続的なストレージに書き込まれなければなりません。</target>
        </trans-unit>
        <trans-unit id="156cc2a3256755987835162d54df2b3bc251cdec" translate="yes" xml:space="preserve">
          <source>Allocates a binary of size &lt;code&gt;size&lt;/code&gt; bytes and creates an owning term. The binary data is mutable until the calling NIF returns. This is a quick way to create a new binary without having to use &lt;code&gt;&lt;a href=&quot;#ErlNifBinary&quot;&gt;ErlNifBinary&lt;/a&gt;&lt;/code&gt;. The drawbacks are that the binary cannot be kept between NIF calls and it cannot be reallocated.</source>
          <target state="translated">サイズ &lt;code&gt;size&lt;/code&gt; バイトのバイナリを割り当て、所有期間を作成します。バイナリデータは、呼び出し側のNIFが戻るまで変更可能です。これは、 &lt;code&gt;&lt;a href=&quot;#ErlNifBinary&quot;&gt;ErlNifBinary&lt;/a&gt;&lt;/code&gt; を使用せずに新しいバイナリを作成する簡単な方法です。欠点は、バイナリをNIF呼び出し間で保持できず、再割り当てできないことです。</target>
        </trans-unit>
        <trans-unit id="fb968cb7c5633735b69c8c6ae48cba56207bf43d" translate="yes" xml:space="preserve">
          <source>Allocates a driver binary with a memory block of at least &lt;code&gt;size&lt;/code&gt; bytes, and returns a pointer to it, or &lt;code&gt;NULL&lt;/code&gt; on failure (out of memory). When a driver binary has been sent to the emulator, it must not be changed. Every allocated binary is to be freed by a corresponding call to &lt;code&gt;&lt;a href=&quot;#driver_free_binary&quot;&gt;driver_free_binary&lt;/a&gt;&lt;/code&gt; (unless otherwise stated).</source>
          <target state="translated">少なくとも &lt;code&gt;size&lt;/code&gt; バイトのメモリブロックでドライババイナリを割り当て、それへのポインタを返すか、失敗した場合（メモリ不足）に &lt;code&gt;NULL&lt;/code&gt; を返します。ドライバーバイナリーがエミュレーターに送信された後は、変更しないでください。割り当てられたすべてのバイナリは、対応する &lt;code&gt;&lt;a href=&quot;#driver_free_binary&quot;&gt;driver_free_binary&lt;/a&gt;&lt;/code&gt; の呼び出しによって解放されます（特に明記されていない限り）。</target>
        </trans-unit>
        <trans-unit id="833eb9c3ea4fa101cb31390f1caf6a0a0d2db0c7" translate="yes" xml:space="preserve">
          <source>Allocates a memory block of the size specified in &lt;code&gt;size&lt;/code&gt;, and returns it. This fails only on out of memory, in which case &lt;code&gt;NULL&lt;/code&gt; is returned. (This is most often a wrapper for &lt;code&gt;malloc&lt;/code&gt;).</source>
          <target state="translated">で指定されたサイズの割り当てメモリのブロック &lt;code&gt;size&lt;/code&gt; 、戻ること。これはメモリ不足でのみ失敗し、その場合 &lt;code&gt;NULL&lt;/code&gt; が返されます。（これはほとんどの場合、 &lt;code&gt;malloc&lt;/code&gt; のラッパーです）。</target>
        </trans-unit>
        <trans-unit id="7113d00f84f8c1774bce3cf42e016073857670b7" translate="yes" xml:space="preserve">
          <source>Allocates a memory-managed resource object of type &lt;code&gt;type&lt;/code&gt; and size &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">タイプ &lt;code&gt;type&lt;/code&gt; およびサイズ &lt;code&gt;size&lt;/code&gt; バイトのメモリ管理リソースオブジェクトを割り当てます。</target>
        </trans-unit>
        <trans-unit id="40cbb022971bb0ea9616862fa9f96313f80c2ace" translate="yes" xml:space="preserve">
          <source>Allocates a new &lt;code&gt;ei_x_buff&lt;/code&gt; buffer. The fields of the structure pointed to by parameter &lt;code&gt;x&lt;/code&gt; is filled in, and a default buffer is allocated. &lt;code&gt;ei_x_new_with_version()&lt;/code&gt; also puts an initial version byte, which is used in the binary format (so that &lt;code&gt;ei_x_encode_version()&lt;/code&gt; will not be needed.)</source>
          <target state="translated">新しい &lt;code&gt;ei_x_buff&lt;/code&gt; バッファを割り当てます。パラメータ &lt;code&gt;x&lt;/code&gt; が指す構造体のフィールドが入力され、デフォルトのバッファが割り当てられます。 &lt;code&gt;ei_x_new_with_version()&lt;/code&gt; は、バイナリ形式で使用される初期バージョンバイトも書き込みます（そのため、 &lt;code&gt;ei_x_encode_version()&lt;/code&gt; は不要になります）。</target>
        </trans-unit>
        <trans-unit id="aba86698e833f8743e3f8398d4c7b3c5cba11222" translate="yes" xml:space="preserve">
          <source>Allocates a new binary of size &lt;code&gt;size&lt;/code&gt; bytes. Initializes the structure pointed to by &lt;code&gt;bin&lt;/code&gt; to refer to the allocated binary. The binary must either be released by &lt;code&gt;&lt;a href=&quot;#enif_release_binary&quot;&gt;enif_release_binary&lt;/a&gt;&lt;/code&gt; or ownership transferred to an Erlang term with &lt;code&gt;&lt;a href=&quot;#enif_make_binary&quot;&gt;enif_make_binary&lt;/a&gt;&lt;/code&gt;. An allocated (and owned) &lt;code&gt;ErlNifBinary&lt;/code&gt; can be kept between NIF calls.</source>
          <target state="translated">サイズ &lt;code&gt;size&lt;/code&gt; バイトの新しいバイナリを割り当てます。 &lt;code&gt;bin&lt;/code&gt; が指す構造体を初期化して、割り当てられたバイナリを参照します。バイナリ必見によって解除することのいずれか &lt;code&gt;&lt;a href=&quot;#enif_release_binary&quot;&gt;enif_release_binary&lt;/a&gt;&lt;/code&gt; かとErlangの項に転送所有権 &lt;code&gt;&lt;a href=&quot;#enif_make_binary&quot;&gt;enif_make_binary&lt;/a&gt;&lt;/code&gt; 。割り当てられた（および所有されている） &lt;code&gt;ErlNifBinary&lt;/code&gt; は、NIF呼び出し間で保持できます。</target>
        </trans-unit>
        <trans-unit id="7773bdff2c5401e19b3fa0521031da780795237d" translate="yes" xml:space="preserve">
          <source>Allocates a new binary with &lt;code&gt;&lt;a href=&quot;#enif_alloc_binary&quot;&gt;enif_alloc_binary&lt;/a&gt;&lt;/code&gt; and stores the result of encoding &lt;code&gt;term&lt;/code&gt; according to the Erlang external term format.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_alloc_binary&quot;&gt;enif_alloc_binary&lt;/a&gt;&lt;/code&gt; で新しいバイナリを割り当て、Erlang外部用語形式に従って &lt;code&gt;term&lt;/code&gt; をエンコードした結果を格納します。</target>
        </trans-unit>
        <trans-unit id="7d5526a3227cb0d073e447c7c317d1cd47b6a7bb" translate="yes" xml:space="preserve">
          <source>Allocates a new process-independent environment. The environment can be used to hold terms that are not bound to any process. Such terms can later be copied to a process environment with &lt;code&gt;&lt;a href=&quot;#enif_make_copy&quot;&gt;enif_make_copy&lt;/a&gt;&lt;/code&gt; or be sent to a process as a message with &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスに依存しない新しい環境を割り当てます。環境は、プロセスにバインドされていない用語を保持するために使用できます。そのような用語は、それ以降の処理環境にコピーすることができ &lt;code&gt;&lt;a href=&quot;#enif_make_copy&quot;&gt;enif_make_copy&lt;/a&gt;&lt;/code&gt; 又は有するメッセージとしてプロセスに送信することが &lt;code&gt;&lt;a href=&quot;#enif_send&quot;&gt;enif_send&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef1154674774259204ce883b3c8820bd4b8d7df0" translate="yes" xml:space="preserve">
          <source>Allocates an &lt;code&gt;(ETERM)&lt;/code&gt; structure.</source>
          <target state="translated">&lt;code&gt;(ETERM)&lt;/code&gt; 構造を割り当てます。</target>
        </trans-unit>
        <trans-unit id="24619459ec0a72f9cf9f4e797e9676fdd79c448d" translate="yes" xml:space="preserve">
          <source>Allocates and initializes a thread option structure.</source>
          <target state="translated">スレッドオプション構造体を割り当て、初期化します。</target>
        </trans-unit>
        <trans-unit id="a18ef353480e9b28111af2f5cb94cf322d5db150" translate="yes" xml:space="preserve">
          <source>Allocates memory of &lt;code&gt;size&lt;/code&gt; bytes.</source>
          <target state="translated">&lt;code&gt;size&lt;/code&gt; バイトのメモリを割り当てます。</target>
        </trans-unit>
        <trans-unit id="6d3c5411f35ce9d979ab943b82f49536b0b3d755" translate="yes" xml:space="preserve">
          <source>Allocation strategy. The following strategies are valid:</source>
          <target state="translated">割り当て戦略。以下の戦略が有効です。</target>
        </trans-unit>
        <trans-unit id="90fca3fd6d65264d4e4e5dc53f3e23f12741c724" translate="yes" xml:space="preserve">
          <source>Allocator used by the &lt;code&gt;HiPE&lt;/code&gt; application for native executable code.</source>
          <target state="translated">&lt;code&gt;HiPE&lt;/code&gt; アプリケーションがネイティブ実行可能コードに使用するアロケーター。</target>
        </trans-unit>
        <trans-unit id="e5156ecc9d7848780f93b6f5ebc71cee114aba96" translate="yes" xml:space="preserve">
          <source>Allocator used for &lt;code&gt;ets&lt;/code&gt; data.</source>
          <target state="translated">&lt;code&gt;ets&lt;/code&gt; データに使用されるアロケータ。</target>
        </trans-unit>
        <trans-unit id="efc1c3dea60e348865091b6b8e2060dd569f66c2" translate="yes" xml:space="preserve">
          <source>Allocator used for Erlang binary data.</source>
          <target state="translated">Erlangのバイナリデータに使われるアロケータ。</target>
        </trans-unit>
        <trans-unit id="7a3adf2a9bd06e8c3a3e083ec99105ea6ffe70ec" translate="yes" xml:space="preserve">
          <source>Allocator used for Erlang heap data, such as Erlang process heaps.</source>
          <target state="translated">ErlangプロセスヒープなどのErlangヒープデータに使われるアロケータ。</target>
        </trans-unit>
        <trans-unit id="8e85fcae342a51464bc8fd23b308ac874d7d0a04" translate="yes" xml:space="preserve">
          <source>Allocator used for constant terms in Erlang code.</source>
          <target state="translated">Erlangコードの定数に使われるアロケータ。</target>
        </trans-unit>
        <trans-unit id="e1d6940ddd5a1c15fef14e15f5f4c63526b4e648" translate="yes" xml:space="preserve">
          <source>Allocator used for driver data.</source>
          <target state="translated">ドライバデータに使用するアロケータです。</target>
        </trans-unit>
        <trans-unit id="3ea76fff61ed65e7a4390d7beabc10d7b1f5293b" translate="yes" xml:space="preserve">
          <source>Allocator used for memory blocks that are expected to be long-lived, for example, Erlang code.</source>
          <target state="translated">Erlangのコードなど、長持ちすると予想されるメモリブロックに使われるアロケータ。</target>
        </trans-unit>
        <trans-unit id="a3b32174d0cb257a1aff46d5fa0ab778500a96d6" translate="yes" xml:space="preserve">
          <source>Allocator used for memory blocks that are expected to be short-lived.</source>
          <target state="translated">短命が予想されるメモリブロックに使用されるアロケータ。</target>
        </trans-unit>
        <trans-unit id="d37461cad7f410e82c9bcd356e966dab124d9b70" translate="yes" xml:space="preserve">
          <source>Allocator used for most memory blocks not allocated through any of the other allocators described above.</source>
          <target state="translated">上記の他のどのアロケータを使用しても割り当てられないほとんどのメモリブロックに使用されるアロケータ。</target>
        </trans-unit>
        <trans-unit id="e693dfe3e7d7c8a81002580ac04e0ce504a69571" translate="yes" xml:space="preserve">
          <source>Allocator used for temporary allocations.</source>
          <target state="translated">一時的な割り当てに使用されるアロケータ。</target>
        </trans-unit>
        <trans-unit id="10f9e4423c6925e89dc2106becb3f6ab79d98e45" translate="yes" xml:space="preserve">
          <source>Allow &lt;code&gt;sys_alloc&lt;/code&gt; carriers. Defaults to &lt;code&gt;true&lt;/code&gt;. If set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;sys_alloc&lt;/code&gt; carriers are never created by allocators using the &lt;code&gt;alloc_util&lt;/code&gt; framework.</source>
          <target state="translated">&lt;code&gt;sys_alloc&lt;/code&gt; キャリアを許可します。デフォルトは &lt;code&gt;true&lt;/code&gt; です。 &lt;code&gt;false&lt;/code&gt; に設定すると、 &lt;code&gt;sys_alloc&lt;/code&gt; キャリアは、 &lt;code&gt;alloc_util&lt;/code&gt; フレームワークを使用するアロケーターによって作成されることはありません。</target>
        </trans-unit>
        <trans-unit id="eff7134dcdaeb2b5c83d79ef04547c8d9cc7e16d" translate="yes" xml:space="preserve">
          <source>Allow Erlang code to supply annotations.</source>
          <target state="translated">Erlangコードがアノテーションを提供できるようにする。</target>
        </trans-unit>
        <trans-unit id="2367e7a84c9f7bf24def174981a401bf837d2c24" translate="yes" xml:space="preserve">
          <source>Allowed in guard tests if &lt;code&gt;RecordTag&lt;/code&gt; is a literal atom and &lt;code&gt;Size&lt;/code&gt; is a literal integer.</source>
          <target state="translated">&lt;code&gt;RecordTag&lt;/code&gt; がリテラルアトムで、 &lt;code&gt;Size&lt;/code&gt; がリテラル整数の場合、ガードテストで許可されます。</target>
        </trans-unit>
        <trans-unit id="501b2ae74253f22d1b49c8d28118aa90b6840545" translate="yes" xml:space="preserve">
          <source>Allowed in guard tests, if &lt;code&gt;RecordTag&lt;/code&gt; is a literal atom.</source>
          <target state="translated">&lt;code&gt;RecordTag&lt;/code&gt; がリテラルアトムの場合、ガードテストで許可されます。</target>
        </trans-unit>
        <trans-unit id="bc41d2a47a402c530d62da0bb42913ffb6baf173" translate="yes" xml:space="preserve">
          <source>Allowed in guard tests.</source>
          <target state="translated">ガードテストで許可されています。</target>
        </trans-unit>
        <trans-unit id="36ba60d3da32240e2b1d7c2743d638c321c3a258" translate="yes" xml:space="preserve">
          <source>Allowed values for &lt;code&gt;Encoding&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;Encoding&lt;/code&gt; 値：</target>
        </trans-unit>
        <trans-unit id="99a20c43f2025ca6e009397d28af92a72d22a63a" translate="yes" xml:space="preserve">
          <source>Allows &lt;code&gt;&lt;a href=&quot;#cycle&quot;&gt;cycles&lt;/a&gt;&lt;/code&gt; in the digraph (default).</source>
          <target state="translated">ダイグラフの &lt;code&gt;&lt;a href=&quot;#cycle&quot;&gt;cycles&lt;/a&gt;&lt;/code&gt; を許可します（デフォルト）。</target>
        </trans-unit>
        <trans-unit id="9f8f1bb0255618251aa9f45e2eb49f1f0585198d" translate="yes" xml:space="preserve">
          <source>Allows Igor to work as a component of the Erlang compiler. Including the term &lt;code&gt;{parse_transform, igor}&lt;/code&gt; in the compile options when compiling an Erlang module (cf. &lt;code&gt;compile:file/2&lt;/code&gt;), will call upon Igor to process the source code, allowing automatic inclusion of other source files. No files are created or overwritten when this function is used.</source>
          <target state="translated">IgorがErlangコンパイラのコンポーネントとして機能できるようにします。Erlangモジュールをコンパイルするとき（ &lt;code&gt;compile:file/2&lt;/code&gt; を参照）のコンパイルオプションに &lt;code&gt;{parse_transform, igor}&lt;/code&gt; という用語を含めると、Igorがソースコードを処理し、他のソースファイルを自動的に含めることができます。この機能を使用しても、ファイルの作成や上書きは行われません。</target>
        </trans-unit>
        <trans-unit id="d62f1a06265052c97727445916da061a31b46c03" translate="yes" xml:space="preserve">
          <source>Allows an Erlang process to access any currently opened file descriptors used by Erlang. The file descriptor &lt;code&gt;In&lt;/code&gt; can be used for standard input, and the file descriptor &lt;code&gt;Out&lt;/code&gt; for standard output. It is only used for various servers in the Erlang OS (&lt;code&gt;shell&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt;). Hence, its use is limited.</source>
          <target state="translated">Erlangプロセスが、Erlangによって使用されている現在開かれているファイル記述子にアクセスできるようにします。ファイル記述子 &lt;code&gt;In&lt;/code&gt; は標準入力に使用でき、ファイル記述子 &lt;code&gt;Out&lt;/code&gt; は標準出力に使用できます。これは、Erlang OSのさまざまなサーバー（ &lt;code&gt;shell&lt;/code&gt; および &lt;code&gt;user&lt;/code&gt; ）でのみ使用されます。したがって、その使用は制限されています。</target>
        </trans-unit>
        <trans-unit id="720d85d8bcd2b0982465cd89217c4403945af062" translate="yes" xml:space="preserve">
          <source>Allows an existing file-descriptor to be used (passed on to the transport protocol).</source>
          <target state="translated">既存のファイルディスクリプタの使用を許可します(トランスポートプロトコルに渡されます)。</target>
        </trans-unit>
        <trans-unit id="5a7d300ab2bf430dd90e7faf7d031bdea72764be" translate="yes" xml:space="preserve">
          <source>Allows compilers built on top of &lt;code&gt;compile&lt;/code&gt; to attach extra compilation metadata to the &lt;code&gt;compile_info&lt;/code&gt; chunk in the generated beam file.</source>
          <target state="translated">&lt;code&gt;compile&lt;/code&gt; 上に構築されたコンパイラが、生成されたビームファイルの &lt;code&gt;compile_info&lt;/code&gt; チャンクに追加のコンパイルメタデータを添付できるようにします。</target>
        </trans-unit>
        <trans-unit id="e2d9ebd39621d33904a794e05cf3bb97eb76cd7e" translate="yes" xml:space="preserve">
          <source>Allows faster access to a file, as no Erlang process is needed to handle the file. However, a file opened in this way has the following limitations:</source>
          <target state="translated">ファイルを扱うためにErlangプロセスが必要ないので、ファイルへのアクセスが速くなります。しかし、この方法で開かれたファイルには以下の制限があります。</target>
        </trans-unit>
        <trans-unit id="11d38a6520a61a4489f42b5d87122e227d5717f7" translate="yes" xml:space="preserve">
          <source>Allows or disallows local reuse of port numbers. By default, reuse is disallowed.</source>
          <target state="translated">ポート番号のローカルでの再利用を許可するかどうかを指定します。デフォルトでは、再利用は禁止されています。</target>
        </trans-unit>
        <trans-unit id="ffa1d032886c439e4bec827547cfb0410648a8e3" translate="yes" xml:space="preserve">
          <source>Allows specification of the directory to fetch the data to. If the directory already exists, an error is thrown.</source>
          <target state="translated">データを取得するディレクトリの指定を許可します。ディレクトリが既に存在する場合はエラーとなります。</target>
        </trans-unit>
        <trans-unit id="cb4fe77b0bd1f96cbd1b0f77fd621a2567c4e7b4" translate="yes" xml:space="preserve">
          <source>Allows to enable overload checking on the nodes under trace. &lt;code&gt;Module:Function(check)&lt;/code&gt; is performed each &lt;code&gt;MSec&lt;/code&gt; millisecond. If the check returns &lt;code&gt;true&lt;/code&gt;, the tracing is disabled on a specified node.</source>
          <target state="translated">トレース中のノードで過負荷チェックを有効にできます。 &lt;code&gt;Module:Function(check)&lt;/code&gt; は、 &lt;code&gt;MSec&lt;/code&gt; ミリ秒ごとに実行されます。チェックが &lt;code&gt;true&lt;/code&gt; を返す場合、トレースは指定されたノードで無効になります。</target>
        </trans-unit>
        <trans-unit id="4d34cd5d35400761bb61a8de2c3b8cac8b75f88f" translate="yes" xml:space="preserve">
          <source>Allows to specify DTD name when it isn't available in the XML document. This option has effect only together with &lt;code&gt;{validation,'dtd'&lt;/code&gt; option.</source>
          <target state="translated">XMLドキュメントで使用できない場合にDTD名を指定できます。このオプションは、 &lt;code&gt;{validation,'dtd'&lt;/code&gt; オプションと一緒にのみ効果があります。</target>
        </trans-unit>
        <trans-unit id="47912c360e75c64559b07b272500ccc88ac1869a" translate="yes" xml:space="preserve">
          <source>Allows to specify the order of preference for named curves and to restrict their usage when using a cipher suite supporting them.</source>
          <target state="translated">名前付き曲線の優先順位を指定し、それをサポートする暗号スイートを使用する際の使用を制限することができます。</target>
        </trans-unit>
        <trans-unit id="f489a56c04187aff8cb1e8fd899369509580cc57" translate="yes" xml:space="preserve">
          <source>Allows user-specific terms in a test specification (described later).</source>
          <target state="translated">テスト仕様でのユーザー固有の用語を許可します(後述)。</target>
        </trans-unit>
        <trans-unit id="a041c6fe34c8772f10490994f72eedc84ac17b8e" translate="yes" xml:space="preserve">
          <source>Allows you to disable chunked transfer-encoding when sending a response to an HTTP/1.1 client. Default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">HTTP / 1.1クライアントに応答を送信するときに、チャンク転送エンコーディングを無効にすることができます。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2f7dfd6f2f9e5a386b1eb293fb8cbfe622a3386d" translate="yes" xml:space="preserve">
          <source>Almost all functionality available in the &lt;code&gt;et_viewer&lt;/code&gt; is also available via shortcuts. Which key that has the same effect as selecting a menu entry is shown enclosed in parentheses. For example pressing the key &lt;code&gt;r&lt;/code&gt; is equivalent to selecting the menu entry &lt;code&gt;Viewer-&amp;gt;Refresh&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;et_viewer&lt;/code&gt; で利用できるほぼすべての機能は、ショートカットからも利用できます。メニューエントリの選択と同じ効果を持つキーは、括弧で囲まれて表示されます。たとえば、キー &lt;code&gt;r&lt;/code&gt; を押すことは、メニューエントリ &lt;code&gt;Viewer-&amp;gt;Refresh&lt;/code&gt; を選択することと同じです。</target>
        </trans-unit>
        <trans-unit id="d5ddea236d72017f9bb6251d4cd4ca6ee8c89d93" translate="yes" xml:space="preserve">
          <source>Almost all server functionality has been implemented using an especially crafted server API, which is described in the Erlang Web Server API. This API can be used to enhance the core server functionality, for example with custom logging and authentication.</source>
          <target state="translated">ほとんどすべてのサーバ機能は特別に作られたサーバAPIを使って実装されており、Erlang Web Server APIで説明されています。このAPIはコアとなるサーバ機能を強化するために使うことができます。</target>
        </trans-unit>
        <trans-unit id="e164535afa87d85e1d8e4d869a83d45ecdea2bd2" translate="yes" xml:space="preserve">
          <source>Alpha converts a pattern (renames variables). Similar to tsubst/1, but only renames variables (including globs).</source>
          <target state="translated">Alphaはパターンを変換します(変数の名前を変更します)。tsubst/1と似ていますが、変数の名前を変更するだけです(グロブを含む)。</target>
        </trans-unit>
        <trans-unit id="94e6d313a320186aef8a05e769cde9d6aee31ec8" translate="yes" xml:space="preserve">
          <source>Also a simulation of a busy server. Inserts a delay before a reply is sent.</source>
          <target state="translated">また、サーバーが混雑している場合のシミュレーションも行います。返信が送信されるまでの遅延を挿入します。</target>
        </trans-unit>
        <trans-unit id="c107930bfba767a92d8fada4aaa539db162143a4" translate="yes" xml:space="preserve">
          <source>Also environment variable operations used to accept names and values of environment variables containing null characters (integer value zero). This caused operations to silently produce erroneous results. Environment variable names and values containing null characters inside the name or value are now &lt;strong&gt;rejected&lt;/strong&gt; and will cause environment variable operations to fail.</source>
          <target state="translated">また、ヌル文字（整数値0）を含む環境変数の名前と値を受け入れるために使用される環境変数操作。これにより、操作は静かに誤った結果を生成しました。名前または値の内部にnull文字を含む環境変数の名前と値が&lt;strong&gt;拒否され&lt;/strong&gt;、環境変数の操作が失敗するようになりました。</target>
        </trans-unit>
        <trans-unit id="d9b60222b2c75f1c86ff987c34e09f8cde41625a" translate="yes" xml:space="preserve">
          <source>Also for convenience, record notation is allowed to be used. Records are shorthands for the corresponding tuples:</source>
          <target state="translated">また、便宜上、レコード表記を使用することもできます。レコードは対応するタプルの略記法です。</target>
        </trans-unit>
        <trans-unit id="a3a4b07a56cad329b79384243949038cbc1372cd" translate="yes" xml:space="preserve">
          <source>Also note that Erlang records will be renamed as necessary to avoid non-equivalent definitions using the same record name. This does not work if the source code accesses the name field of such record tuples by &lt;code&gt;element/2&lt;/code&gt; or similar methods. Always use the record syntax to handle record tuples, if possible.</source>
          <target state="translated">また、Erlangレコードは、同じレコード名を使用した同等でない定義を回避するために、必要に応じて名前が変更されることにも注意してください。これは、ソースコードが &lt;code&gt;element/2&lt;/code&gt; または同様のメソッドによってそのようなレコードタプルの名前フィールドにアクセスする場合は機能しません。可能であれば、常にレコード構文を使用してレコードタプルを処理します。</target>
        </trans-unit>
        <trans-unit id="7ac5f975913185a02359637f04ddfbdfbcd994b3" translate="yes" xml:space="preserve">
          <source>Also note that there are some shell features like history list (control-p and control-n), in line editing (Emacs key bindings) and module and function name completion (tab) if the module is loaded.</source>
          <target state="translated">また、履歴リスト(control-pやcontrol-n)、行内編集(Emacsのキーバインド)、モジュールが読み込まれていればモジュール名や関数名の補完(タブ)などのシェル機能があることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="8a063b92ca8f32cb5670e7484a2f6224c06de2e7" translate="yes" xml:space="preserve">
          <source>Also note when upgrading a &lt;code&gt;gen_statem&lt;/code&gt;, this function and hence the &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; parameter in the &lt;code&gt;appup&lt;/code&gt; file is not only needed to update the internal state or to act on the &lt;code&gt;Extra&lt;/code&gt; argument. It is also needed if an upgrade or downgrade should change &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, or else the callback mode after the code change will not be honoured, most probably causing a server crash.</source>
          <target state="translated">また、 &lt;code&gt;gen_statem&lt;/code&gt; をアップグレードするときは、この関数、したがって &lt;code&gt;appup&lt;/code&gt; ファイルの &lt;code&gt;Change={advanced,Extra}&lt;/code&gt; パラメータは、内部状態を更新したり、 &lt;code&gt;Extra&lt;/code&gt; 引数に作用したりするためだけに必要なわけではありません。アップグレードまたはダウングレードで &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; を変更する必要がある場合にも必要です。そうでない場合、コード変更後のコールバックモードは維持されず、おそらくサーバークラッシュを引き起こします。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="b03a08b970bd32744c558ee650c59b74bf3ec43b" translate="yes" xml:space="preserve">
          <source>Also try the &lt;code&gt;&lt;a href=&quot;erl_tidy&quot;&gt;erl_tidy&lt;/a&gt;&lt;/code&gt; module, as follows:</source>
          <target state="translated">次のように、 &lt;code&gt;&lt;a href=&quot;erl_tidy&quot;&gt;erl_tidy&lt;/a&gt;&lt;/code&gt; モジュールも試してください。</target>
        </trans-unit>
        <trans-unit id="c49a065dda16af9230d583d9a156ea20f71a1f7b" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;errno&lt;/code&gt; values from &lt;code&gt;socket&lt;/code&gt;&lt;strong&gt;(2)&lt;/strong&gt; and &lt;code&gt;connect&lt;/code&gt;&lt;strong&gt;(2)&lt;/strong&gt; system calls can be propagated into &lt;code&gt;erl_errno&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;socket&lt;/code&gt; &lt;strong&gt;（2）&lt;/strong&gt;および &lt;code&gt;connect&lt;/code&gt; &lt;strong&gt;（2）&lt;/strong&gt;システムコールからの &lt;code&gt;errno&lt;/code&gt; 値を &lt;code&gt;erl_errno&lt;/code&gt; に伝播できます。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="0950deda4048dd3e61bbd230b1ca6f75c0083a70" translate="yes" xml:space="preserve">
          <source>Also, &lt;code&gt;errno&lt;/code&gt; values from &lt;code&gt;socket&lt;/code&gt;&lt;strong&gt;(2)&lt;/strong&gt; and &lt;code&gt;connect&lt;/code&gt;&lt;strong&gt;(2)&lt;/strong&gt; system calls may be propagated into &lt;code&gt;erl_errno&lt;/code&gt;.</source>
          <target state="translated">また、 &lt;code&gt;socket&lt;/code&gt; &lt;strong&gt;（2）&lt;/strong&gt;および &lt;code&gt;connect&lt;/code&gt; &lt;strong&gt;（2）&lt;/strong&gt;システムコールからの &lt;code&gt;errno&lt;/code&gt; 値が &lt;code&gt;erl_errno&lt;/code&gt; に伝播される場合があります。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="89386e204a09fa8d2107f970fae5575cde96ce99" translate="yes" xml:space="preserve">
          <source>Also, a read-only traversal of the source backup can be performed without updating a target backup. If &lt;code&gt;TargetMod==read_only&lt;/code&gt;, no target backup is accessed.</source>
          <target state="translated">また、ターゲットバックアップを更新せずに、ソースバックアップの読み取り専用トラバーサルを実行できます。 &lt;code&gt;TargetMod==read_only&lt;/code&gt; 場合、ターゲットバックアップはアクセスされません。</target>
        </trans-unit>
        <trans-unit id="35a2ab2594479e34bf702bdcbfc2a6ff056e0ee5" translate="yes" xml:space="preserve">
          <source>Also, a time-out of five seconds has been introduced in the &lt;code&gt;await_result&lt;/code&gt; function. That is, if the server does not reply within five seconds (5000 ms), the client terminates. This is only needed in the logon sequence before the client and the server are linked.</source>
          <target state="translated">また、 &lt;code&gt;await_result&lt;/code&gt; 関数で5秒のタイムアウトが導入されました。つまり、サーバーが5秒（5000ミリ秒）以内に応答しない場合、クライアントは終了します。これは、クライアントとサーバーがリンクされる前のログオンシーケンスでのみ必要です。</target>
        </trans-unit>
        <trans-unit id="fbe49c130871a8ea81b48a336d4846f52b1db188" translate="yes" xml:space="preserve">
          <source>Also, aim for testing everything once, no less, no more. It is not effective having every test case fail only because one function in the interface changed.</source>
          <target state="translated">また、すべてのテストを一度に行うことを目標にしましょう。インターフェースの関数が変わったからといって、すべてのテストケースを失敗させるのは効果的ではありません。</target>
        </trans-unit>
        <trans-unit id="38092a15de7c4da112bf97ddb70a794cc7c246e0" translate="yes" xml:space="preserve">
          <source>Also, because of fragmentation and prereservation of memory areas, the size of the memory segments containing the dynamically allocated memory blocks can be much larger than the total size of the dynamically allocated memory blocks.</source>
          <target state="translated">また、メモリ領域の断片化およびプリセーブのため、動的に割り当てられたメモリブロックを含むメモリセグメントのサイズは、動的に割り当てられたメモリブロックの合計サイズよりもはるかに大きくなる可能性がある。</target>
        </trans-unit>
        <trans-unit id="d5b32fcc26a6a8b9a2395401bc02ead29333f9bb" translate="yes" xml:space="preserve">
          <source>Also, different activity access contexts can be mixed while nesting. However, the dirty ones (&lt;code&gt;async_dirty&lt;/code&gt;, &lt;code&gt;sync_dirty&lt;/code&gt;, and &lt;code&gt;ets&lt;/code&gt;) inherit the transaction semantics if they are called inside a transaction and thus grab locks and use two or three phase commit.</source>
          <target state="translated">また、ネスト中に、異なるアクティビティアクセスコンテキストを混在させることができます。ただし、ダーティなもの（ &lt;code&gt;async_dirty&lt;/code&gt; 、 &lt;code&gt;sync_dirty&lt;/code&gt; 、および &lt;code&gt;ets&lt;/code&gt; ）は、トランザクション内で呼び出されるとトランザクションセマンティクスを継承し、ロックを取得して2フェーズまたは3フェーズコミットを使用します。</target>
        </trans-unit>
        <trans-unit id="823028d8a3ebcfad8bc2f54c9ca2e8fbebc07b0d" translate="yes" xml:space="preserve">
          <source>Also, for documentation purposes, argument names can be given:</source>
          <target state="translated">また、ドキュメント化のために引数名をつけることもできます。</target>
        </trans-unit>
        <trans-unit id="d5a32ab36ee173194b5ab198d8e878626de325e7" translate="yes" xml:space="preserve">
          <source>Also, if &lt;code&gt;encoding&lt;/code&gt; is set to something else than &lt;code&gt;latin1&lt;/code&gt;, the &lt;code&gt;read/3&lt;/code&gt; call fails if the data contains characters larger than 255, which is why module &lt;code&gt;io(3)&lt;/code&gt; is to be preferred when reading such a file.</source>
          <target state="translated">また、 &lt;code&gt;encoding&lt;/code&gt; が &lt;code&gt;latin1&lt;/code&gt; 以外に設定されている場合、データに255より大きい文字が含まれていると、 &lt;code&gt;read/3&lt;/code&gt; 呼び出しは失敗します。そのため、このようなファイルを読み取る場合は、モジュール &lt;code&gt;io(3)&lt;/code&gt; が推奨されます。</target>
        </trans-unit>
        <trans-unit id="425722573d70397b1c7d94c9000e50ce9ddd142d" translate="yes" xml:space="preserve">
          <source>Also, the API driver functions &lt;code&gt;driver_output*&lt;/code&gt; and &lt;code&gt;driver_vec_to_buf&lt;/code&gt;, &lt;code&gt;driver_alloc/realloc*&lt;/code&gt;, and the &lt;code&gt;driver_*&lt;/code&gt; queue functions were changed to have larger length arguments and return values. This is a lesser problem, as code that passes smaller types gets them auto-converted in the calls, and as long as the driver does not handle sizes that overflow an &lt;code&gt;int&lt;/code&gt;, all will work as before.</source>
          <target state="translated">また、APIドライバー関数 &lt;code&gt;driver_output*&lt;/code&gt; および &lt;code&gt;driver_vec_to_buf&lt;/code&gt; 、 &lt;code&gt;driver_alloc/realloc*&lt;/code&gt; 、および &lt;code&gt;driver_*&lt;/code&gt; キュー関数は、より長い引数と戻り値を持つように変更されました。小さい型を渡すコードは呼び出しでそれらを自動変換するため、これはより小さな問題です。また、ドライバーが &lt;code&gt;int&lt;/code&gt; をオーバーフローするサイズを処理しない限り、すべてが以前と同様に機能します。</target>
        </trans-unit>
        <trans-unit id="5bf6719ad80d4978b49cbb0963084e0b9ffea279" translate="yes" xml:space="preserve">
          <source>Also, the Erlang implementation requires understanding of concepts that were never an issue for many (Erlang) programmers. To understand and use Unicode characters requires that you study the subject thoroughly, even if you are an experienced programmer.</source>
          <target state="translated">また、Erlangの実装では、多くの(Erlangの)プログラマにとって決して問題ではなかった概念を理解する必要があります。Unicode文字を理解して使うためには、たとえ経験豊富なプログラマであっても徹底的に勉強する必要があります。</target>
        </trans-unit>
        <trans-unit id="97ffcd43fe119d65b1c38d259f0ad035db9d9f66" translate="yes" xml:space="preserve">
          <source>Also, the toolkit does not support dependencies between sub-agents. A sub-agent should by definition be stand alone and it is therefore not good design to create dependencies between them.</source>
          <target state="translated">また、ツールキットはサブエージェント間の依存関係をサポートしていません。サブエージェントは、定義上、独立したものでなければならないので、サブエージェント間で依存関係を作るのは良い設計ではありません。</target>
        </trans-unit>
        <trans-unit id="36abf7ef6c434f71bc62120ad73dd9f305fae2ba" translate="yes" xml:space="preserve">
          <source>Also, this code compares lists elements using the &quot;&lt;code&gt;==&lt;/code&gt;&quot; operator, while &quot;&lt;code&gt;--&lt;/code&gt;&quot; uses the &quot;&lt;code&gt;=:=&lt;/code&gt;&quot; operator. If that difference is important, &lt;code&gt;sets&lt;/code&gt; can be used instead of &lt;code&gt;gb_sets&lt;/code&gt;, but &lt;code&gt;sets:from_list/1&lt;/code&gt; is much slower than &lt;code&gt;gb_sets:from_list/1&lt;/code&gt; for long lists.</source>
          <target state="translated">また、このコードは「 &lt;code&gt;==&lt;/code&gt; 」演算子を使用してリスト要素を比較し、「 &lt;code&gt;--&lt;/code&gt; 」は「 &lt;code&gt;=:=&lt;/code&gt; 」演算子を使用します。その違いが重要な場合は、 &lt;code&gt;gb_sets&lt;/code&gt; の代わりに &lt;code&gt;sets&lt;/code&gt; を使用できますが、長いリストの場合、 &lt;code&gt;sets:from_list/1&lt;/code&gt; は &lt;code&gt;gb_sets:from_list/1&lt;/code&gt; よりもはるかに遅くなります。</target>
        </trans-unit>
        <trans-unit id="6b487a502989be65a999a414931c10e73d9e958d" translate="yes" xml:space="preserve">
          <source>Also, when &lt;code&gt;OptionList == []&lt;/code&gt;, only visible nodes, that is, nodes that appear in the result of &lt;code&gt;erlang:nodes/0&lt;/code&gt;, are monitored.</source>
          <target state="translated">また、 &lt;code&gt;OptionList == []&lt;/code&gt; 場合、表示されているノード、つまり &lt;code&gt;erlang:nodes/0&lt;/code&gt; の結果に表示されるノードのみが監視されます。</target>
        </trans-unit>
        <trans-unit id="7c7e2f70e0a7fca68066437851c1d0da8c3f758e" translate="yes" xml:space="preserve">
          <source>Also, when a table is opened this file is read, if it exists.</source>
          <target state="translated">また、テーブルを開いたときに、このファイルが存在する場合には、このファイルが読み込まれます。</target>
        </trans-unit>
        <trans-unit id="bf226a59dfe6aed5d51c1238c21cc12d02623322" translate="yes" xml:space="preserve">
          <source>Alternation. It matches either &lt;code&gt;r1&lt;/code&gt; or &lt;code&gt;r2&lt;/code&gt;.</source>
          <target state="translated">交互。 &lt;code&gt;r1&lt;/code&gt; または &lt;code&gt;r2&lt;/code&gt; のいずれかに一致します。</target>
        </trans-unit>
        <trans-unit id="2d3884e669febf89019a2dd3d1f7118c5ae8dd7e" translate="yes" xml:space="preserve">
          <source>Alternation. Matches one of the alternatives.</source>
          <target state="translated">選択肢。選択肢の1つと一致します。</target>
        </trans-unit>
        <trans-unit id="b0e0df8a7d7ac3abd4437e1480f042a0637f8891" translate="yes" xml:space="preserve">
          <source>Alternative &lt;code&gt;ab&lt;/code&gt; is found and the result is [{1,2},{1,2}]. The result is added to the list of results and the position in the search string is advanced two steps.</source>
          <target state="translated">代替 &lt;code&gt;ab&lt;/code&gt; が見つかり、結果は[{1,2}、{1,2}]です。結果が結果のリストに追加され、検索文字列内の位置が2ステップ進みます。</target>
        </trans-unit>
        <trans-unit id="388bde91034a0c2bd5c6b83f406e6d950cb39478" translate="yes" xml:space="preserve">
          <source>Alternative syntax for acquisition of table locks is as follows:</source>
          <target state="translated">テーブルロック取得の代替構文は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="de359fc26767f6609fd33d4bab9ab9ec84302a3a" translate="yes" xml:space="preserve">
          <source>Alternative way to stop the HTTP client profile:</source>
          <target state="translated">HTTPクライアントプロファイルを停止する代替方法。</target>
        </trans-unit>
        <trans-unit id="3b8239e68048624328c3887db9856779071451e0" translate="yes" xml:space="preserve">
          <source>Alternative:</source>
          <target state="translated">Alternative:</target>
        </trans-unit>
        <trans-unit id="84eb863ce8c5fe0eaf266247b00e7b639109efa7" translate="yes" xml:space="preserve">
          <source>Alternatively you download MinGW and MSYS. You'll find the latest installer at:</source>
          <target state="translated">または、MinGWとMSYSをダウンロードしてください。最新のインストーラーは以下にあります。</target>
        </trans-unit>
        <trans-unit id="2a9a5b357a1ebe1596911f8227c3f50733821b16" translate="yes" xml:space="preserve">
          <source>Alternatively, application configuration parameters can be added or updated in &lt;code&gt;sys.config&lt;/code&gt;.</source>
          <target state="translated">または、アプリケーション構成パラメーターを &lt;code&gt;sys.config&lt;/code&gt; で追加または更新できます。</target>
        </trans-unit>
        <trans-unit id="1d257655b31583a29c42cb081673cc370da4eb39" translate="yes" xml:space="preserve">
          <source>Alternatively, for more control, use functions &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3,4&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#close-1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">または、より詳細に制御するには、関数 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#add-3&quot;&gt;add/3,4&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#close-1&quot;&gt;close/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="1d20174a3ef0c0e03812655f5a1538626e3ef7e1" translate="yes" xml:space="preserve">
          <source>Alternatively, setting flags to &lt;code&gt;EI_FORCE&lt;/code&gt; causes a full backup to be done, and &lt;code&gt;EI_NOPURGE&lt;/code&gt; causes the deleted objects to be left in the registry afterwards. These can be bitwise OR'ed together if both behaviors are desired. If &lt;code&gt;EI_NOPURGE&lt;/code&gt; was specified, &lt;code&gt;ei_reg_purge()&lt;/code&gt; can be used to explicitly remove the deleted items from the registry later.</source>
          <target state="translated">または、フラグを &lt;code&gt;EI_FORCE&lt;/code&gt; に設定すると、完全バックアップが実行され、 &lt;code&gt;EI_NOPURGE&lt;/code&gt; を使用すると、削除されたオブジェクトが後でレジストリに残されます。両方の動作が必要な場合は、これらをビット単位でOR演算できます。 &lt;code&gt;EI_NOPURGE&lt;/code&gt; が指定された場合、 &lt;code&gt;ei_reg_purge()&lt;/code&gt; を使用して、後でレジストリから削除されたアイテムを明示的に削除できます。</target>
        </trans-unit>
        <trans-unit id="eda106df891b543c9d37c11d60d93578eda797a2" translate="yes" xml:space="preserve">
          <source>Alternatively, you can use &lt;code&gt;erl_send()&lt;/code&gt; and &lt;code&gt;erl_receive_msg&lt;/code&gt;, which handle the encoding and decoding of messages transparently.</source>
          <target state="translated">あるいは、メッセージのエンコードとデコードを透過的に処理する &lt;code&gt;erl_send()&lt;/code&gt; および &lt;code&gt;erl_receive_msg&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="8a36a8fbf04bc6a8060ec964f113d3388e9e6727" translate="yes" xml:space="preserve">
          <source>Although &lt;code&gt;Common Test&lt;/code&gt; was created primarily for black-box testing, nothing prevents it from working perfectly as a white-box testing tool as well. This is especially true when the application to test is written in Erlang. Then the test ports are easily realized with Erlang function calls.</source>
          <target state="translated">が &lt;code&gt;Common Test&lt;/code&gt; ブラックボックステスト、ホワイトボックステストツールとして完璧に働いて同様から何も防ぎ、それをするために主に作成されました。これは、テストするアプリケーションがErlangで記述されている場合に特に当てはまります。次に、テストポートはErlang関数呼び出しで簡単に実現されます。</target>
        </trans-unit>
        <trans-unit id="4b19755925d10feb1c1eeb84ec413b87f2a2d0e8" translate="yes" xml:space="preserve">
          <source>Although EUnit uses many preprocessor macros, they have been designed to be as nonintrusive as possible, and should not cause conflicts with existing code. Adding EUnit tests to a module should thus not normally require changing existing code. Furthermore, tests that only exercise the exported functions of a module can always be placed in a completely separate module, avoiding any conflicts entirely.</source>
          <target state="translated">EUnitは多くのプリプロセッサマクロを使用していますが、可能な限り邪魔にならないように設計されており、既存のコードとのコンフリクトを起こさないようにしています。そのため、モジュールにEUnitテストを追加しても、通常は既存のコードを変更する必要はありません。さらに、モジュールのエクスポートされた関数のみを実行するテストは、常に完全に別のモジュールに配置することができ、コンフリクトを完全に回避することができます。</target>
        </trans-unit>
        <trans-unit id="16e985c50acb7aa3cc2e37887e81edfb84b36580" translate="yes" xml:space="preserve">
          <source>Although Erlang can handle Unicode data in many forms does not automatically mean that the content of any file can be Unicode text. The external entities, such as ports and I/O servers, are not generally Unicode capable.</source>
          <target state="translated">Erlangは多くの形式のUnicodeデータを扱うことができますが、どのファイルの内容も自動的にUnicodeテキストになるわけではありません。ポートやI/Oサーバなどの外部エンティティは一般的にUnicodeに対応していません。</target>
        </trans-unit>
        <trans-unit id="02df0b028081655673738d27b03c581fc80907e4" translate="yes" xml:space="preserve">
          <source>Although Erlang drivers in general can be beyond the scope of this section, a brief introduction seems to be in place.</source>
          <target state="translated">一般的なErlangドライバはこのセクションの範囲を超えていますが、簡単な紹介をしておきましょう。</target>
        </trans-unit>
        <trans-unit id="145c19dfbd3603b0f1f5d0df7751ed8d04c50799" translate="yes" xml:space="preserve">
          <source>Although all the functionality of EUnit is available even without the use of preprocessor macros, the EUnit header file defines a number of such macros in order to make it as easy as possible to write unit tests as compactly as possible and without getting too many details in the way.</source>
          <target state="translated">EUnitの全機能はプリプロセッサマクロを使用しなくても利用できますが、EUnitのヘッダファイルではそのようなマクロを多数定義しており、ユニットテストをできるだけコンパクトに、かつ細かいことをあまり気にせずに簡単に書くことができるようにしています。</target>
        </trans-unit>
        <trans-unit id="288b1873eb386778abf8c7efb5abf1c61cbff2fe" translate="yes" xml:space="preserve">
          <source>Although it would be both pointless and counterproductive to use segmentation on a transport that already does this (e.g. TCP), the megaco application does not check this. Instead, it is up to the user to configure this properly.</source>
          <target state="translated">すでにセグメンテーションが行われているトランスポート(TCP など)でセグメンテーションを使用するのは無意味であり、逆効果ですが、megaco アプリケーションはこれをチェックしません。代わりに、これを適切に設定するのはユーザ次第です。</target>
        </trans-unit>
        <trans-unit id="beb0a28a74c40d09218865dad1a734397c647414" translate="yes" xml:space="preserve">
          <source>Although public key algorithms are supported in FIPS mode they can only be used with secure key sizes. The Security Policy requires the following minimum values:</source>
          <target state="translated">公開鍵アルゴリズムはFIPSモードでサポートされていますが、安全な鍵サイズでのみ使用できます。セキュリティポリシーでは、以下の最小値が必要です。</target>
        </trans-unit>
        <trans-unit id="bc4daacf4342e7c4815a182117afe540cdf564a1" translate="yes" xml:space="preserve">
          <source>Although the garbage collector grows the heap, it grows it step-by-step, which is more costly than directly establishing a larger heap when the process is spawned.</source>
          <target state="translated">ガベージコレクタはヒープを成長させますが、ステップバイステップで成長させるので、プロセスがスポーンされたときに直接より大きなヒープを確立するよりもコストがかかります。</target>
        </trans-unit>
        <trans-unit id="24878073b1b7f8b78f02e6ee00d8bf88d852b349" translate="yes" xml:space="preserve">
          <source>Although the options are described in a Unix-like format, the case of the options or commands is not relevant, and both character &quot;/&quot; and &quot;-&quot; can be used for options.</source>
          <target state="translated">オプションはUnix風に記述されていますが、オプションやコマンドの大文字小文字は関係なく、オプションには&quot;/&quot;と&quot;-&quot;の両方の文字を使用することができます。</target>
        </trans-unit>
        <trans-unit id="bce09f2137d6fc334364eda633d224f186c26d70" translate="yes" xml:space="preserve">
          <source>Although the program is located together with files specific to the emulator version, it is not expected to be specific to the emulator version. The release handler does &lt;strong&gt;not&lt;/strong&gt; change option &lt;code&gt;-machine&lt;/code&gt; to &lt;code&gt;erlsrv&lt;/code&gt; during emulator restart. Locate the (possibly customized) &lt;code&gt;start_erl&lt;/code&gt; program so that it is not overwritten during upgrade.</source>
          <target state="translated">プログラムは、エミュレータのバージョンに固有のファイルと一緒に配置されますが、エミュレータのバージョンに固有である必要はありません。エミュレータの再起動中に、リリースハンドラはオプション &lt;code&gt;-machine&lt;/code&gt; を &lt;code&gt;erlsrv&lt;/code&gt; に変更しませ&lt;strong&gt;ん&lt;/strong&gt;。アップグレード中に上書きされないように（カスタマイズされている可能性がある） &lt;code&gt;start_erl&lt;/code&gt; プログラムを見つけます。</target>
        </trans-unit>
        <trans-unit id="3f57a9d4c00bcaabefc52fe8a80642733e554720" translate="yes" xml:space="preserve">
          <source>Although the record syntax is used, it is still hard to read and even harder to write. The first element of the tuple, &lt;code&gt;#emp{empno = '$1', dept = sales, _='_'}&lt;/code&gt;, tells what to match. Elements not matching this are not returned, as in the &lt;code&gt;ets:match/2&lt;/code&gt; example. The second element, the empty list, is a list of guard expressions, which we do not need. The third element is the list of expressions constructing the return value (in ETS this is almost always a list containing one single term). In our case &lt;code&gt;'$1'&lt;/code&gt; is bound to the employee number in the head (first element of the tuple), and hence the employee number is returned. The result is &lt;code&gt;[&quot;011103&quot;,&quot;076324&quot;]&lt;/code&gt;, as in the &lt;code&gt;ets:foldr/3&lt;/code&gt; example, but the result is retrieved much more efficiently in terms of execution speed and memory consumption.</source>
          <target state="translated">レコード構文が使用されますが、それでも読みにくく、書きにくいです。タプルの最初の要素 &lt;code&gt;#emp{empno = '$1', dept = sales, _='_'}&lt;/code&gt; 、何を一致させるかを示します。 &lt;code&gt;ets:match/2&lt;/code&gt; の例のように、これに一致しない要素は返されません。 2番目の要素である空のリストは、ガード式のリストであり、必要ありません。 3番目の要素は、戻り値を構成する式のリストです（ETSでは、ほとんどの場合、これは単一の用語を含むリストです）。この例では、 &lt;code&gt;'$1'&lt;/code&gt; はヘッド（タプルの最初の要素）の従業員番号にバインドされているため、従業員番号が返されます。 &lt;code&gt;ets:foldr/3&lt;/code&gt; のように、結果は &lt;code&gt;[&quot;011103&quot;,&quot;076324&quot;]&lt;/code&gt; 。 例ですが、結果は実行速度とメモリ消費の点ではるかに効率的に取得されます。</target>
        </trans-unit>
        <trans-unit id="2efab97f3a7a5d8ce0a89e59cc48828bf99d33d8" translate="yes" xml:space="preserve">
          <source>Always &lt;code&gt;binary()&lt;/code&gt; when used as return value</source>
          <target state="translated">戻り値として使用する場合は常に &lt;code&gt;binary()&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="92fdd4e6d9d913fcd655491ab0c7675897f9b7ef" translate="yes" xml:space="preserve">
          <source>Always a back reference</source>
          <target state="translated">常にバックリファレンス</target>
        </trans-unit>
        <trans-unit id="34df78fa84d9ab6d470efe918d9b6fe7aa623768" translate="yes" xml:space="preserve">
          <source>Always a tab</source>
          <target state="translated">常にタブ</target>
        </trans-unit>
        <trans-unit id="a4786c7c8c425f21c582ab746681367ee698691a" translate="yes" xml:space="preserve">
          <source>Always derefrence aliases.</source>
          <target state="translated">常にディレフェレンスエイリアス。</target>
        </trans-unit>
        <trans-unit id="f8137d77147791c2cdd31baefa8bf6fa8cd8ceff" translate="yes" xml:space="preserve">
          <source>Always returns &lt;code&gt;ok&lt;/code&gt;, regardless of the validity of each individual &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">個々の &lt;code&gt;Dir&lt;/code&gt; の有効性に関係なく、常に &lt;code&gt;ok&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="27f040498856798609fee3be2f41e6c84980a8f5" translate="yes" xml:space="preserve">
          <source>Always use this function instead of the BIF for processes started using &lt;code&gt;proc_lib&lt;/code&gt; functions.</source>
          <target state="translated">&lt;code&gt;proc_lib&lt;/code&gt; 関数を使用して開始されたプロセスには、常にBIFの代わりにこの関数を使用してください。</target>
        </trans-unit>
        <trans-unit id="1816d6498b5f2b91f67cb09f0eef413cb5e709bf" translate="yes" xml:space="preserve">
          <source>An  &lt;strong id=&quot;analyzed_module&quot;&gt;analyzed module&lt;/strong&gt; is a module that has been added to an Xref server together with its module data. A  &lt;strong id=&quot;library_module&quot;&gt;library module&lt;/strong&gt; is a module located in some directory mentioned in the  &lt;strong id=&quot;library_path&quot;&gt;library path&lt;/strong&gt;. A library module is said to be used if some of its exported functions are used by some analyzed module. An  &lt;strong id=&quot;unknown_module&quot;&gt;unknown module&lt;/strong&gt; is a module that is neither an analyzed module nor a library module, but whose exported functions are used by some analyzed module. An  &lt;strong id=&quot;unknown_function&quot;&gt;unknown function&lt;/strong&gt; is a used function that is neither local or exported by any analyzed module nor exported by any library module. An  &lt;strong id=&quot;undefined_function&quot;&gt;undefined function&lt;/strong&gt; is an externally used function that is not exported by any analyzed module or library module. With this notion, a local function can be an undefined function, namely if it is externally used from some module. All unknown functions are also undefined functions; there is a &lt;code&gt;&lt;a href=&quot;xref_chapter#venn2&quot;&gt;figure&lt;/a&gt;&lt;/code&gt; in the User's Guide that illustrates this relationship.</source>
          <target state="translated">&lt;strong id=&quot;analyzed_module&quot;&gt;分析モジュールは、&lt;/strong&gt;そのモジュールデータとともに外部参照サーバに追加されたモジュールです。 &lt;strong id=&quot;library_module&quot;&gt;ライブラリモジュールは&lt;/strong&gt;で述べたいくつかのディレクトリにあるモジュールで &lt;strong id=&quot;library_path&quot;&gt;、ライブラリパス&lt;/strong&gt;。ライブラリモジュールは、そのエクスポートされた関数の一部が分析されたモジュールによって使用される場合に使用されます。 &lt;strong id=&quot;unknown_module&quot;&gt;未知のモジュールは&lt;/strong&gt;、分析モジュールやライブラリモジュールでもないモジュールですが、そのエクスポート機能をいくつか分析したモジュールで使用されています。 &lt;strong id=&quot;unknown_function&quot;&gt;未知の機能は&lt;/strong&gt;どちらも、ローカルまたは任意のライブラリモジュールによってどの分析したモジュールがエクスポートしたり、エクスポートで使用する機能です。 &lt;strong id=&quot;undefined_function&quot;&gt;未定義関数&lt;/strong&gt;分析されたモジュールまたはライブラリモジュールによってエクスポートされない外部で使用される関数です。この概念では、ローカル関数は未定義の関数になる可能性があります。つまり、あるモジュールから外部的に使用される場合です。すべての未知の関数も未定義の関数です。この関係を説明する &lt;code&gt;&lt;a href=&quot;xref_chapter#venn2&quot;&gt;figure&lt;/a&gt;&lt;/code&gt; がユーザーズガイドにあります。</target>
        </trans-unit>
        <trans-unit id="61d493bfba03f3650f2161ca9afdcc61c11c1f50" translate="yes" xml:space="preserve">
          <source>An &quot;electric&quot; command is a character that in addition to just inserting the character performs some type of action. For example the &quot;;&quot; character is typed in a situation where is ends a function clause a new function header is generated. The electric commands are as follows:</source>
          <target state="translated">エレクトリック」コマンドとは、単に文字を挿入するだけでなく、何らかのアクションを行う文字のことです。例えば、&quot;;&quot;文字は、関数節が終了して新しい関数ヘッダが生成されるような状況で入力されます。electricコマンドは以下の通りです。</target>
        </trans-unit>
        <trans-unit id="6226e0305af70826bf5fe3ce4b1308a84190ed32" translate="yes" xml:space="preserve">
          <source>An &quot;index.html&quot; page is written for each test run (that is, stored in the &lt;code&gt;ct_run&lt;/code&gt; directory tagged with node name, date, and time). This file provides an overview of all individual tests performed in the same test run. The test names follow the following convention:</source>
          <target state="translated">「index.html」ページは、テスト実行ごとに書き込まれます（つまり、ノード名、日付、および時刻でタグ付けされた &lt;code&gt;ct_run&lt;/code&gt; ディレクトリに保存されます）。このファイルは、同じテスト実行で実行されたすべての個々のテストの概要を提供します。テスト名は次の規則に従います。</target>
        </trans-unit>
        <trans-unit id="00e6ea986b63d5c9739d49f4c3238bab97235630" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;#external_set&quot;&gt;external set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#external_set&quot;&gt;external set&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1a0395f6f1fbeee27182938ba0839ebfac3dc6b9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;#n_ary_relation&quot;&gt;n-ary relation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#n_ary_relation&quot;&gt;n-ary relation&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8ad952e4eb8fcd79b39f9d7f3056d23ad1340548" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;#sets_definition&quot;&gt;ordered set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アンは、 &lt;code&gt;&lt;a href=&quot;#sets_definition&quot;&gt;ordered set&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f732501fb2f351bec1b39a9b35f38cdddbe7895e" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;#sets_definition&quot;&gt;unordered set&lt;/a&gt;&lt;/code&gt; of unordered sets.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#sets_definition&quot;&gt;unordered set&lt;/a&gt;&lt;/code&gt; 順不同セット。</target>
        </trans-unit>
        <trans-unit id="abe550712a0e6ae829a57ff7d8dfef218ca5d4e5" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;&lt;a href=&quot;#sets_definition&quot;&gt;unordered set&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#sets_definition&quot;&gt;unordered set&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0255682239807b3289c234495e03c8b41192e931" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Event&lt;/code&gt; may be an action performed by one single actor (blue text label) or it may involve two actors and is then depicted as an arrow directed from one actor to another (red text label). Details of an &lt;code&gt;Event&lt;/code&gt; can be shown by clicking (press and release the mouse button 1) on the event label text or on the arrow. When doing that a &lt;code&gt;Contents Viewer&lt;/code&gt; window pops up. It may look like this:</source>
          <target state="translated">AN &lt;code&gt;Event&lt;/code&gt; 単一のアクター（青テキストラベル）によって実行されるアクションであってもよいし、2人の俳優を含んでいてもよいし、次いで、別のアクターから向かう矢印（赤いテキストラベル）として示されています。 &lt;code&gt;Event&lt;/code&gt; 詳細は、イベントラベルテキストまたは矢印をクリック（マウスボタン1を押して離す）することで表示できます。これを行うと、 &lt;code&gt;Contents Viewer&lt;/code&gt; ウィンドウがポップアップします。次のようになります。</target>
        </trans-unit>
        <trans-unit id="0255b57e28b30c83aed0be71d9a37eb90b3506e9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;FTP&lt;/code&gt; client.</source>
          <target state="translated">&lt;code&gt;FTP&lt;/code&gt; のクライアント。</target>
        </trans-unit>
        <trans-unit id="3fb173ebbce3795b42d50041e455d5925eea1573" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;Instantiator&lt;/code&gt; function receives the same value as the &lt;code&gt;Cleanup&lt;/code&gt; function, i.e., the value returned by the &lt;code&gt;Setup&lt;/code&gt; function. It should then behave much like a generator (see &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt;), and return a test set whose tests have been &lt;strong&gt;instantiated&lt;/strong&gt; with the given value. A special case is the syntax &lt;code&gt;{with, [AbstractTestFun]}&lt;/code&gt; which represents an instantiator function that distributes the value over a list of unary functions; see &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt;: &lt;code&gt;{with, X, [...]}&lt;/code&gt; for more details.</source>
          <target state="translated">アン &lt;code&gt;Instantiator&lt;/code&gt; 機能は同じ値を受け取り &lt;code&gt;Cleanup&lt;/code&gt; 機能、すなわち、値が返されたことにより、 &lt;code&gt;Setup&lt;/code&gt; 機能。その後、ジェネレータ（ &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt; 参照）のように動作し、指定された値でテストが&lt;strong&gt;インスタンス化&lt;/strong&gt;されたテストセットを返します。特殊なケースは構文 &lt;code&gt;{with, [AbstractTestFun]}&lt;/code&gt; これは単項関数のリストに値を分散するインスタンス化関数を表します。詳細については、 &lt;code&gt;&lt;a href=&quot;#Primitives&quot;&gt;Primitives&lt;/a&gt;&lt;/code&gt; ： &lt;code&gt;{with, X, [...]}&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="616e10ae1a8e1fb39bdb912ebeef6ab5ca6b40b1" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;accept_callback()&lt;/code&gt; will be called and the boolean return value &lt;code&gt;true&lt;/code&gt; will make the client accept the Host Key. A return value of &lt;code&gt;false&lt;/code&gt; will make the client to reject the Host Key and as a result the connection will be closed. The arguments to the fun are:</source>
          <target state="translated">&lt;code&gt;accept_callback()&lt;/code&gt; が呼び出されると、boolean型の戻り値 &lt;code&gt;true&lt;/code&gt; 、クライアントがホストキーを受け入れるようになります。 &lt;code&gt;false&lt;/code&gt; の戻り値は、クライアントにホストキーを拒否させ、結果として接続が閉じられます。楽しみの引数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="413cf6d7a307b2b9673ad27e8dbed416e9a8cd0b" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;atom&lt;/code&gt;, defaults to &lt;code&gt;megaco_pretty_text_encoder&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;atom&lt;/code&gt; 、デフォルト &lt;code&gt;megaco_pretty_text_encoder&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fa860461448cf61fc6c4412f7dfeeae18b2f5502" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;atom&lt;/code&gt;, defaults to &lt;code&gt;megaco_tcp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;atom&lt;/code&gt; 、デフォルト &lt;code&gt;megaco_tcp&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="51e3e48053897de71e5e9525b4fac400d5d8b48f" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;boolean&lt;/code&gt;, default is true.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 、デフォルトはtrueです。</target>
        </trans-unit>
        <trans-unit id="a54f797ba37540946ac0de61f8e73f6a99a9bc1c" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;boolean&lt;/code&gt;, defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;boolean&lt;/code&gt; 、デフォルト &lt;code&gt;false&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7304f44642298f3032f1c5b607dd7eafc4c3c8ed" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;eval&lt;/code&gt; term for the node and &lt;code&gt;startup_functions&lt;/code&gt; in the &lt;code&gt;node_start&lt;/code&gt; options list can be specified. In this case, the node is started first, then the &lt;code&gt;startup_functions&lt;/code&gt; are executed, and finally functions specified with &lt;code&gt;eval&lt;/code&gt; are called.</source>
          <target state="translated">&lt;code&gt;node_start&lt;/code&gt; オプションリスト内のノードと &lt;code&gt;startup_functions&lt;/code&gt; の &lt;code&gt;eval&lt;/code&gt; 期間を指定できます。この場合、ノードが最初に起動され、次に &lt;code&gt;startup_functions&lt;/code&gt; が実行され、最後に &lt;code&gt;eval&lt;/code&gt; で指定された関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="8cf0639c1fa382f7a371e1fb9d74d243f730a9ec" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;in_cookie&lt;/code&gt; is the cookie expected to be used by another node when communicating with us, so that &lt;code&gt;A&lt;/code&gt;'s &lt;code&gt;in_cookie&lt;/code&gt; for &lt;code&gt;B&lt;/code&gt; corresponds with &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;out_cookie&lt;/code&gt; for &lt;code&gt;A&lt;/code&gt;. Below the function &lt;code&gt;in_cookie(Node)&lt;/code&gt; returns the current node's &lt;code&gt;in_cookie&lt;/code&gt; for &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;in_cookie&lt;/code&gt; はその結果、私たちと通信するとき、他のノードによって使用されることが予想クッキーである &lt;code&gt;A&lt;/code&gt; さん &lt;code&gt;in_cookie&lt;/code&gt; ため &lt;code&gt;B&lt;/code&gt; に対応する &lt;code&gt;B&lt;/code&gt; S ' &lt;code&gt;out_cookie&lt;/code&gt; 用 &lt;code&gt;A&lt;/code&gt; 。関数 &lt;code&gt;in_cookie(Node)&lt;/code&gt; の下で、現在のノードの &lt;code&gt;Node&lt;/code&gt; の &lt;code&gt;in_cookie&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9d7e048e19b245a7755b67de29c724332d234fef" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;install&lt;/code&gt; program that can take multiple file names.</source>
          <target state="translated">&lt;code&gt;install&lt;/code&gt; 複数のファイル名を取ることができ、プログラムを。</target>
        </trans-unit>
        <trans-unit id="dc1cc59f23e31d3f2faabd0e06404fca41020443" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer()&lt;/code&gt; representing a valid ISO Latin-1 character (0-255).</source>
          <target state="translated">&lt;code&gt;integer()&lt;/code&gt; 有効なISO Latin-1文字（0〜255）を表します。</target>
        </trans-unit>
        <trans-unit id="1e0bac35dea3f1f84ddba60032770d90571b70a9" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt;, default is 1.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; 、デフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="873fbda47245c24d2fb8c42c588854a5bbbe1999" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt;, defaults to 0.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; 、0デフォルト。</target>
        </trans-unit>
        <trans-unit id="0db32e18586f2823cb1832056d1faf59a25ee88d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt;, defaults to 10.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; 、10デフォルト。</target>
        </trans-unit>
        <trans-unit id="be7525ff96efc958521012096b0629c32d985beb" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;integer&lt;/code&gt;, defaults to 2048.</source>
          <target state="translated">&lt;code&gt;integer&lt;/code&gt; 、2048年にデフォルト設定。</target>
        </trans-unit>
        <trans-unit id="226fe72bb662892694081c7e4669e49ce4dfb607" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ok&lt;/code&gt; return value only means that &lt;code&gt;sanity_check/0&lt;/code&gt; did not find any issues, &lt;strong&gt;not&lt;/strong&gt; that no issues exist.</source>
          <target state="translated">&lt;code&gt;ok&lt;/code&gt; 戻り値はのみことを意味し &lt;code&gt;sanity_check/0&lt;/code&gt; は、すべての問題を見つけられませんでした&lt;strong&gt;ではない&lt;/strong&gt;何の問題が存在しないこと。</target>
        </trans-unit>
        <trans-unit id="cb144d37fcad9dec67a783fea0c08715340b0e47" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ordered_set&lt;/code&gt; only guarantees that objects are processed in &lt;strong&gt;key&lt;/strong&gt; order. Results from functions such as &lt;code&gt;ets:select/2&lt;/code&gt; appear in &lt;strong&gt;key&lt;/strong&gt; order even if the key is not included in the result.</source>
          <target state="translated">&lt;code&gt;ordered_set&lt;/code&gt; はオブジェクトのみが中に処理されることを保証する&lt;strong&gt;キー&lt;/strong&gt;の順序。キーが結果に含まれていない場合でも、 &lt;code&gt;ets:select/2&lt;/code&gt; などの関数からの結果は&lt;strong&gt;キーの&lt;/strong&gt;順序で表示され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="1ac32ce0e6bfa96623b07134d73e1a74a678a422" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;other_error()&lt;/code&gt;, indicates some other error such as timeout.</source>
          <target state="translated">&lt;code&gt;other_error()&lt;/code&gt; 、例えば、タイムアウトのようないくつかの他のエラーを示しています。</target>
        </trans-unit>
        <trans-unit id="c055e209749d7630d0667a2b7111dd1440c4439d" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;other_reason()&lt;/code&gt;, indicates some other error such as:</source>
          <target state="translated">&lt;code&gt;other_reason()&lt;/code&gt; 、のようないくつかの他のエラーを示しています。</target>
        </trans-unit>
        <trans-unit id="894fd973b7b8b5b01a93ed5aca695081618b3394" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;out_cookie&lt;/code&gt; is the cookie used in outgoing communication to a certain node, so that &lt;code&gt;A&lt;/code&gt;'s &lt;code&gt;out_cookie&lt;/code&gt; for &lt;code&gt;B&lt;/code&gt; is to correspond with &lt;code&gt;B&lt;/code&gt;'s &lt;code&gt;in_cookie&lt;/code&gt; for &lt;code&gt;A&lt;/code&gt; and conversely. &lt;code&gt;A&lt;/code&gt;'s &lt;code&gt;out_cookie&lt;/code&gt; for &lt;code&gt;B&lt;/code&gt; and &lt;code&gt;A&lt;/code&gt;'s &lt;code&gt;in_cookie&lt;/code&gt; for &lt;code&gt;B&lt;/code&gt; need &lt;strong&gt;not&lt;/strong&gt; be the same. Below the function &lt;code&gt;out_cookie(Node)&lt;/code&gt; returns the current node's &lt;code&gt;out_cookie&lt;/code&gt; for &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;out_cookie&lt;/code&gt; は、その結果、特定のノードへの発信通信に使用されるクッキーである &lt;code&gt;A&lt;/code&gt; さん &lt;code&gt;out_cookie&lt;/code&gt; ため &lt;code&gt;B&lt;/code&gt; はに対応している &lt;code&gt;B&lt;/code&gt; S ' &lt;code&gt;in_cookie&lt;/code&gt; ための &lt;code&gt;A&lt;/code&gt; と逆。 &lt;code&gt;A&lt;/code&gt; さん &lt;code&gt;out_cookie&lt;/code&gt; のための &lt;code&gt;B&lt;/code&gt; と &lt;code&gt;A&lt;/code&gt; s 'を &lt;code&gt;in_cookie&lt;/code&gt; のための &lt;code&gt;B&lt;/code&gt; の必要性は&lt;strong&gt;ない&lt;/strong&gt;と同じこと。関数 &lt;code&gt;out_cookie(Node)&lt;/code&gt; の下で、現在のノードの &lt;code&gt;Node&lt;/code&gt; の &lt;code&gt;out_cookie&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="d7eef5074a9774a00c738e43d74f620a383d53d0" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;ssl_options&lt;/code&gt; list must be specified if and only if the transport in question has set &lt;code&gt;Inband-Security-Id&lt;/code&gt; to 1 (&lt;code&gt;TLS&lt;/code&gt;), as specified to either &lt;code&gt;&lt;a href=&quot;diameter#start_service-2&quot;&gt;diameter:start_service/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt;, so that the transport process will receive notification of whether or not to commence with a TLS handshake following capabilities exchange. Failing to specify an options list on a TLS-capable transport for which TLS is negotiated will cause TLS handshake to fail. Failing to specify TLS capability when &lt;code&gt;ssl_options&lt;/code&gt; has been specified will cause the transport process to wait for a notification that will not be forthcoming, which will eventually cause the RFC 3539 watchdog to take down the connection.</source>
          <target state="translated">アン &lt;code&gt;ssl_options&lt;/code&gt; 、問題のトランスポートが設定されている場合にのみ場合は、リストを指定する必要があります &lt;code&gt;Inband-Security-Id&lt;/code&gt; 1（に &lt;code&gt;TLS&lt;/code&gt; ）のいずれかに指定されているように、 &lt;code&gt;&lt;a href=&quot;diameter#start_service-2&quot;&gt;diameter:start_service/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;diameter#add_transport-2&quot;&gt;diameter:add_transport/2&lt;/a&gt;&lt;/code&gt; 、その輸送過程が受け取ります機能交換後のTLSハンドシェイクで開始するかどうかの通知。TLSがネゴシエートされるTLS対応トランスポートでオプションリストを指定しないと、TLSハンドシェイクが失敗します。 &lt;code&gt;ssl_options&lt;/code&gt; のときにTLS機能を指定できない が指定されている場合、トランスポートプロセスは通知されない通知を待機します。これにより、最終的にRFC 3539ウォッチドッグが接続を切断します。</target>
        </trans-unit>
        <trans-unit id="5953af02f70fe1bd6cb42949e24f0078af4d3ff4" translate="yes" xml:space="preserve">
          <source>An &lt;code&gt;{outstream, Id}&lt;/code&gt; tuple in the &lt;code&gt;transport_data&lt;/code&gt; field of a outgoing diameter_packet record sets the outbound stream on which the message is sent, modulo the negotiated number of outbound streams. Any other value causes successive such sends to cycle though all outbound streams.</source>
          <target state="translated">発信diameter_packetレコードの &lt;code&gt;transport_data&lt;/code&gt; フィールドの &lt;code&gt;{outstream, Id}&lt;/code&gt; タプルは、メッセージが送信される発信ストリームを、交渉された発信ストリーム数を法として設定します。その他の値を指定すると、そのような送信がすべてのアウトバウンドストリームを循環します。</target>
        </trans-unit>
        <trans-unit id="d5fa362d0f65e987c4b8318080cab175e37513ad" translate="yes" xml:space="preserve">
          <source>An &lt;strong id=&quot;acyclic_digraph&quot;&gt;acyclic digraph&lt;/strong&gt; is a digraph without cycles.</source>
          <target state="translated">&lt;strong id=&quot;acyclic_digraph&quot;&gt;非環式有向グラフは、&lt;/strong&gt;サイクルのない有向グラフです。</target>
        </trans-unit>
        <trans-unit id="c3aa68fd8d0814a5d205c457e0d32e4bc17b0175" translate="yes" xml:space="preserve">
          <source>An &lt;strong id=&quot;arborescence&quot;&gt;arborescence&lt;/strong&gt; is an acyclic digraph with a vertex V, the &lt;strong id=&quot;root&quot;&gt;root&lt;/strong&gt;, such that there is a unique path from V to every other vertex of G.</source>
          <target state="translated">&lt;strong id=&quot;arborescence&quot;&gt;樹枝は、&lt;/strong&gt;頂点Vを持つ非環式有向グラフ、ある&lt;strong id=&quot;root&quot;&gt;ルート&lt;/strong&gt; Gの他のすべての頂点にVから一意のパスが存在するように、</target>
        </trans-unit>
        <trans-unit id="742a6d0f8438c960e1610deecf0bc0fce6d56d78" translate="yes" xml:space="preserve">
          <source>An &lt;strong id=&quot;external_set&quot;&gt;external set&lt;/strong&gt; is an element of the range of Sets.</source>
          <target state="translated">&lt;strong id=&quot;external_set&quot;&gt;外部のセットは、&lt;/strong&gt;セットの範囲の要素です。</target>
        </trans-unit>
        <trans-unit id="edf6ff8399e6bc41f3e349775438bc0fb18b7111" translate="yes" xml:space="preserve">
          <source>An &lt;strong&gt;embedded target system&lt;/strong&gt; where there is also support for logging output from the system to file for later inspection, and where the system can be started automatically at boot time.</source>
          <target state="translated">&lt;strong&gt;埋め込まれたターゲット・システム&lt;/strong&gt;が、後に検査のためにファイルにシステムからの出力を記録するためのサポートもあり、システムがブート時に自動的に起動することができる場所。</target>
        </trans-unit>
        <trans-unit id="380c35ec1379b2732006ec744451c0160e09d7d7" translate="yes" xml:space="preserve">
          <source>An ASN.1 compiler for Erlang, which generates encode and decode functions to be used by Erlang programs sending and receiving ASN.1 specified data.</source>
          <target state="translated">ErlangプログラムがASN.1で指定されたデータを送受信する際に使用するエンコード関数とデコード関数を生成するErlang用ASN.1コンパイラです。</target>
        </trans-unit>
        <trans-unit id="2072c4a338574b8129ce6b5952267c903a250059" translate="yes" xml:space="preserve">
          <source>An Alarm Handling Process</source>
          <target state="translated">アラーム処理プロセス</target>
        </trans-unit>
        <trans-unit id="23ba32dda2e50be421eaa9dbe7743df19b802a29" translate="yes" xml:space="preserve">
          <source>An Erlang code preprocessor.</source>
          <target state="translated">Erlangのコードプリプロセッサ。</target>
        </trans-unit>
        <trans-unit id="163e8de0a613994fca6438b452c975b50aeb03f4" translate="yes" xml:space="preserve">
          <source>An Erlang crash dump is produced with &lt;code&gt;Status&lt;/code&gt; as slogan. Then the runtime system exits with status code &lt;code&gt;1&lt;/code&gt;. The string will be truncated if longer than 200 characters.</source>
          <target state="translated">Erlangのクラッシュダンプは、 &lt;code&gt;Status&lt;/code&gt; をスローガンとして生成されます。次に、ランタイムシステムはステータスコード &lt;code&gt;1&lt;/code&gt; で終了します。文字列は、200文字を超えると切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="4512b1e2b9f7565d7aad070a59e6db442ba6e364" translate="yes" xml:space="preserve">
          <source>An Erlang driver is a library containing a set of native driver callback functions that the Erlang Virtual Machine calls when certain events occur. There can be multiple instances of a driver, each instance is associated with an Erlang port.</source>
          <target state="translated">Erlangドライバはネイティブドライバのコールバック関数のセットを含むライブラリで、特定のイベントが発生したときにErlang仮想マシンが呼び出すようになっています。ドライバは複数のインスタンスがあり、それぞれのインスタンスはErlangポートに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="46d02d2d1f7bf010b89b68c50051d352cdf1f1c7" translate="yes" xml:space="preserve">
          <source>An Erlang driver is a native code module written in C (or assembler), which serves as an interface for some special operating system service. This is a general mechanism that is used throughout the Erlang emulator for all kinds of I/O. An Erlang driver can be dynamically linked (or loaded) to the Erlang emulator at runtime by using the &lt;code&gt;erl_ddll&lt;/code&gt; Erlang module. Some of the drivers in OTP are however statically linked to the runtime system, but that is more an optimization than a necessity.</source>
          <target state="translated">Erlangドライバーは、C（またはアセンブラー）で記述されたネイティブコードモジュールであり、特別なオペレーティングシステムサービスのインターフェイスとして機能します。これは、Erlangエミュレータ全体であらゆる種類のI / Oに使用される一般的なメカニズムです。 Erlangドライバーは、 &lt;code&gt;erl_ddll&lt;/code&gt; Erlangモジュールを使用して、実行時に動的にErlangエミュレーターにリンク（またはロード）できます。ただし、OTPの一部のドライバーはランタイムシステムに静的にリンクされていますが、これは必要以上に最適化されています。</target>
        </trans-unit>
        <trans-unit id="e9d5ba03efbb958aec77ffebac7f1f229efa740a" translate="yes" xml:space="preserve">
          <source>An Erlang driver only exports one function: the driver entry function. This is defined with a macro, &lt;code&gt;DRIVER_INIT&lt;/code&gt;, which returns a pointer to a C &lt;code&gt;struct&lt;/code&gt; containing the entry points that are called from the emulator. The &lt;code&gt;struct&lt;/code&gt; defines the entries that the emulator calls to call the driver, with a &lt;code&gt;NULL&lt;/code&gt; pointer for entries that are not defined and used by the driver.</source>
          <target state="translated">Erlangドライバーは、ドライバーエントリー関数という1つの関数のみをエクスポートします。これは、エミュレータから呼び出されるエントリポイントを含むC &lt;code&gt;struct&lt;/code&gt; へのポインタを返す &lt;code&gt;DRIVER_INIT&lt;/code&gt; マクロで定義されます。 &lt;code&gt;struct&lt;/code&gt; エミュレータと、ドライバーを呼び出すために呼び出すことのエントリを定義 &lt;code&gt;NULL&lt;/code&gt; のドライバによって定義され、使用されていないエントリへのポインタ。</target>
        </trans-unit>
        <trans-unit id="bd548a3ef940c79c88bddfa47cccbd8fb1829c8b" translate="yes" xml:space="preserve">
          <source>An Erlang module containing a collection of test cases for a specific functional area.</source>
          <target state="translated">特定の機能領域のテストケースを集めたErlangモジュール。</target>
        </trans-unit>
        <trans-unit id="ad9ae30d2c55cc4178422772dd42ca73a04b1365" translate="yes" xml:space="preserve">
          <source>An Erlang node acting as a client to another Erlang node typically sends a request and waits for a reply. Such a request is included in a function call at a remote node and is called a remote procedure call.</source>
          <target state="translated">Erlangノードが他のErlangノードへのクライアントとして動作している場合、通常はリクエストを送って返事を待ちます。このようなリクエストはリモートノードの関数呼び出しに含まれ、リモートプロシージャコールと呼ばれます。</target>
        </trans-unit>
        <trans-unit id="56710ac893f31a54d4164ee165dd753222462531" translate="yes" xml:space="preserve">
          <source>An Erlang node is started using command-line flag &lt;code&gt;-name&lt;/code&gt; or &lt;code&gt;-sname&lt;/code&gt;:</source>
          <target state="translated">Erlangノードは、コマンドラインフラグ &lt;code&gt;-name&lt;/code&gt; または &lt;code&gt;-sname&lt;/code&gt; を使用して起動します。</target>
        </trans-unit>
        <trans-unit id="599c98b38dfe8d71da51449f0bdd899eee1b39d4" translate="yes" xml:space="preserve">
          <source>An Erlang node name has the form host@shortname or host@longname. The node name is used as an atom within the system, so the maximum size of 255 holds also for the node name.</source>
          <target state="translated">Erlangのノード名はhost@shortnameかhost@longnameの形をしています。ノード名はシステム内でアトムとして使われるので、ノード名の最大サイズは255です。</target>
        </trans-unit>
        <trans-unit id="1e0759134862f9ad1e90191482caa5537f8967ba" translate="yes" xml:space="preserve">
          <source>An Erlang pattern is a term that can contain unbound variables or &lt;code&gt;&quot;do not care&quot;&lt;/code&gt; symbols. Such a pattern can be matched against a term and, if the match is successful, any unbound variables in the pattern will be bound as a side effect. The content of a bound variable can then be retrieved:</source>
          <target state="translated">Erlangパターンは、バインドされていない変数または &lt;code&gt;&quot;do not care&quot;&lt;/code&gt; 記号を含むことができる用語です。このようなパターンは用語に対して照合でき、一致が成功した場合、パターン内のバインドされていない変数はすべて副作用としてバインドされます。バインドされた変数の内容を取得できます。</target>
        </trans-unit>
        <trans-unit id="1200c0da52a399921a5c78fb7e044cea6d860a20" translate="yes" xml:space="preserve">
          <source>An Erlang process (conceptually) runs until it does a &lt;code&gt;receive&lt;/code&gt; and there is no message which it wants to receive in the message queue. &quot;conceptually&quot; is used here because the Erlang system shares the CPU time between the active processes in the system.</source>
          <target state="translated">それはないまでアンErlangのプロセスは、（概念的には）走る &lt;code&gt;receive&lt;/code&gt; と、それはメッセージキューに受信したいメッセージがありません。Erlangシステムはシステム内のアクティブなプロセス間でCPU時間を共有するため、ここでは「概念的に」が使用されています。</target>
        </trans-unit>
        <trans-unit id="51ffaec9560fba4d779993b121c3d8e77dcf2ff0" translate="yes" xml:space="preserve">
          <source>An Erlang process can set up links to other Erlang processes. If a process calls &lt;code&gt;link(Other_Pid)&lt;/code&gt; it sets up a bidirectional link between itself and the process called &lt;code&gt;Other_Pid&lt;/code&gt;. When a process terminates, it sends something called a &lt;strong&gt;signal&lt;/strong&gt; to all the processes it has links to.</source>
          <target state="translated">Erlangプロセスは他のErlangプロセスへのリンクを設定できます。プロセスが &lt;code&gt;link(Other_Pid)&lt;/code&gt; を呼び出す場合、プロセスはそれ自体と &lt;code&gt;Other_Pid&lt;/code&gt; と呼ばれるプロセスとの間に双方向リンクを設定します。プロセスが終了すると、そのプロセスはリンク先のすべてのプロセスに&lt;strong&gt;シグナル&lt;/strong&gt;と呼ばれるものを送信します。</target>
        </trans-unit>
        <trans-unit id="9970a8a7b56df81fb08ac05a8463925914e6cf12" translate="yes" xml:space="preserve">
          <source>An Erlang process is lightweight compared to threads and processes in operating systems.</source>
          <target state="translated">Erlangプロセスはオペレーティングシステムのスレッドやプロセスに比べて軽量です。</target>
        </trans-unit>
        <trans-unit id="09a9e4871d3bc24cfef4abf9dd5b18af33c141ab" translate="yes" xml:space="preserve">
          <source>An Erlang runtime system internal memory allocator library.</source>
          <target state="translated">Erlang ランタイムシステムの内部メモリアロケータライブラリ。</target>
        </trans-unit>
        <trans-unit id="e0378125a458b38016849cc67d1615f3807c8d9e" translate="yes" xml:space="preserve">
          <source>An Erlang runtime system is made a distributed Erlang node by giving it a name. A distributed Erlang node can connect to, and monitor, other nodes. It can also spawn processes at other nodes. Message passing and error handling between processes at different nodes are transparent. A number of useful STDLIB modules are available in a distributed Erlang system. For example, &lt;code&gt;global&lt;/code&gt;, which provides global name registration. The distribution mechanism is implemented using TCP/IP sockets.</source>
          <target state="translated">Erlangランタイムシステムは、名前を付けることにより、分散Erlangノードになります。分散Erlangノードは他のノードに接続して監視できます。また、他のノードでプロセスを生成することもできます。異なるノードのプロセス間のメッセージの受け渡しとエラー処理は透過的です。分散Erlangシステムでは、いくつかの便利なSTDLIBモジュールが利用できます。たとえば、 &lt;code&gt;global&lt;/code&gt; 名登録を提供するglobal。配布メカニズムは、TCP / IPソケットを使用して実装されます。</target>
        </trans-unit>
        <trans-unit id="04046988b941940151b9b5fc8a82309ae841ddb6" translate="yes" xml:space="preserve">
          <source>An Erlang runtime system is started with command &lt;code&gt;erl&lt;/code&gt;:</source>
          <target state="translated">Erlangランタイムシステムは、コマンド &lt;code&gt;erl&lt;/code&gt; で起動します。</target>
        </trans-unit>
        <trans-unit id="3393487efc373a12bc45e05f1eacb861280e2ede" translate="yes" xml:space="preserve">
          <source>An Erlang runtime system to be monitored by a heart program is to be started with command-line flag &lt;code&gt;-heart&lt;/code&gt; (see also &lt;code&gt;erl(1)&lt;/code&gt;). The &lt;code&gt;heart&lt;/code&gt; process is then started automatically:</source>
          <target state="translated">ハートプログラムによって監視されるErlangランタイムシステムは、コマンドラインフラグ &lt;code&gt;-heart&lt;/code&gt; で起動されます（ &lt;code&gt;erl(1)&lt;/code&gt; も参照）。 &lt;code&gt;heart&lt;/code&gt; プロセスが自動的に開始されます。</target>
        </trans-unit>
        <trans-unit id="f733ec70702901146b379fda30a66a57a35b70fb" translate="yes" xml:space="preserve">
          <source>An Erlang script file must always contain the &lt;code&gt;main/1&lt;/code&gt; function. When the script is run, the &lt;code&gt;main/1&lt;/code&gt; function is called with a list of strings representing the arguments specified to the script (not changed or interpreted in any way).</source>
          <target state="translated">Erlangスクリプトファイルには、常に &lt;code&gt;main/1&lt;/code&gt; 関数が含まれている必要があります。スクリプトが実行されると、スクリプトに指定された引数を表す文字列のリストを使用して &lt;code&gt;main/1&lt;/code&gt; 関数が呼び出されます（変更も解釈もされていません）。</target>
        </trans-unit>
        <trans-unit id="73dec7304e5c6b791062b7b3aca15db293d62078" translate="yes" xml:space="preserve">
          <source>An Erlang session must be started and a &lt;code&gt;Mnesia&lt;/code&gt; directory must be specified for the database.</source>
          <target state="translated">Erlangセッションを開始し、データベースに &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリを指定する必要があります。</target>
        </trans-unit>
        <trans-unit id="ce5518b8587007e4c494155014d3a550a3741ae1" translate="yes" xml:space="preserve">
          <source>An Erlang term is represented by a C structure of type &lt;code&gt;ETERM&lt;/code&gt;. Applications should not reference any fields in this structure directly, as it can be changed in future releases to provide faster and more compact term storage. Instead, applications should use the macros and functions provided.</source>
          <target state="translated">Erlang用語は、タイプ &lt;code&gt;ETERM&lt;/code&gt; の C構造体によって表されます。この構造のフィールドはアプリケーションで直接参照しないでください。将来のリリースで変更され、より高速でコンパクトな期間のストレージが提供される可能性があります。代わりに、アプリケーションは提供されたマクロと関数を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="164c80b922f57a9bdd50001a74df476a789dbd1f" translate="yes" xml:space="preserve">
          <source>An Erlang/OTP installation.</source>
          <target state="translated">Erlang/OTPのインストール。</target>
        </trans-unit>
        <trans-unit id="1054640745b3e48822c3fd2338dfbcd899d7c1b8" translate="yes" xml:space="preserve">
          <source>An Erlang/OTP source tree containing the updated applications that you want to patch into the existing Erlang/OTP installation.</source>
          <target state="translated">Erlang/OTPソースツリーには、既存のErlang/OTPインストールにパッチを当てたい更新されたアプリケーションが含まれています。</target>
        </trans-unit>
        <trans-unit id="33e5f51ee47766fa568bcc250e6552444bf87f73" translate="yes" xml:space="preserve">
          <source>An Ets table is a single-key table (either a hash table or a tree ordered by the key) and is to be used as one. In other words, use the key to look up things whenever possible. A lookup by a known key in a &lt;code&gt;set&lt;/code&gt; Ets table is constant and for an &lt;code&gt;ordered_set&lt;/code&gt; Ets table it is O(logN). A key lookup is always preferable to a call where the whole table has to be scanned. In the previous examples, the field &lt;code&gt;idno&lt;/code&gt; is the key of the table and all lookups where only the name is known result in a complete scan of the (possibly large) table for a matching result.</source>
          <target state="translated">Etsテーブルは単一キーのテーブル（ハッシュテーブルまたはキーで順序付けられたツリー）であり、1つのテーブルとして使用されます。つまり、可能な限りキーを使用して検索します。 &lt;code&gt;set&lt;/code&gt; Etsテーブルの既知のキーによる検索は一定であり、 &lt;code&gt;ordered_set&lt;/code&gt; Etsテーブルの場合はO（logN）です。キー検索は、テーブル全体をスキャンする必要がある呼び出しよりも常に望ましい方法です。前の例では、フィールド &lt;code&gt;idno&lt;/code&gt; がテーブルのキーであり、名前だけがわかっているすべてのルックアップで、一致する結果の（場合によっては大きい）テーブルが完全にスキャンされます。</target>
        </trans-unit>
        <trans-unit id="a7cf253c697b4afabd6dffd4bbe2047b45daa497" translate="yes" xml:space="preserve">
          <source>An Extensible multi-lingual SNMP agent, which understands SNMPv1 (RFC1157), SNMPv2c (RFC1901, 1905, 1906 and 1907), SNMPv3 (RFC2271, 2272, 2273, 2274 and 2275), or any combination of these protocols.</source>
          <target state="translated">SNMPv1 (RFC1157)、SNMPv2c (RFC1901、1905、1906、1907)、SNMPv3 (RFC2271、2272、2273、2274、2275)、またはこれらのプロトコルの任意の組み合わせを理解する拡張可能な多言語SNMPエージェント。</target>
        </trans-unit>
        <trans-unit id="05553bae8eb36ff1c70b542ddf36a56af29990c8" translate="yes" xml:space="preserve">
          <source>An FTP client can be started in two ways. One is using the &lt;code&gt;&lt;a href=&quot;#service_start&quot;&gt;service_start&lt;/a&gt;&lt;/code&gt; function, the other is to start it directly as a standalone process using function &lt;code&gt;&lt;a href=&quot;#open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">FTPクライアントは2つの方法で起動できます。1つは &lt;code&gt;&lt;a href=&quot;#service_start&quot;&gt;service_start&lt;/a&gt;&lt;/code&gt; 関数を使用する方法で、もう1つは関数 &lt;code&gt;&lt;a href=&quot;#open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; を使用してスタンドアロンプ​​ロセスとして直接開始する方法です。</target>
        </trans-unit>
        <trans-unit id="142111236af13f256edac0459b9be958dddb9369" translate="yes" xml:space="preserve">
          <source>An HTTP client and server</source>
          <target state="translated">HTTP クライアントとサーバ</target>
        </trans-unit>
        <trans-unit id="2afe7b47404b7ad13ca9bd0ff2a980472ed68c85" translate="yes" xml:space="preserve">
          <source>An HTTP client can be configured to start when starting the &lt;code&gt;Inets&lt;/code&gt; application or started dynamically in runtime by calling the &lt;code&gt;Inets&lt;/code&gt; application API &lt;code&gt;inets:start(httpc, ServiceConfig)&lt;/code&gt; or &lt;code&gt;inets:start(httpc, ServiceConfig, How)&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;inets&quot;&gt;inets(3)&lt;/a&gt;&lt;/code&gt;. The configuration options are as follows:</source>
          <target state="translated">HTTPクライアントは、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションの起動時に開始するように構成したり、 &lt;code&gt;Inets&lt;/code&gt; アプリケーションAPI &lt;code&gt;inets:start(httpc, ServiceConfig)&lt;/code&gt; または &lt;code&gt;inets:start(httpc, ServiceConfig, How)&lt;/code&gt; 呼び出して実行時に動的に開始したりできます &lt;code&gt;&lt;a href=&quot;inets&quot;&gt;inets(3)&lt;/a&gt;&lt;/code&gt; 参照してください。構成オプションは次のとおりです。</target>
        </trans-unit>
        <trans-unit id="ac94cd7f217b34f41616cfaaff0e53eb269f96bc" translate="yes" xml:space="preserve">
          <source>An HTTP/1.1 client</source>
          <target state="translated">HTTP/1.1 クライアント</target>
        </trans-unit>
        <trans-unit id="42eecf40b49071e953314f2ad636039400fdbb0d" translate="yes" xml:space="preserve">
          <source>An I/O device, either &lt;code&gt;standard_io&lt;/code&gt;, &lt;code&gt;standard_error&lt;/code&gt;, a registered name, or a pid handling I/O protocols (returned from &lt;code&gt;file:open/2&lt;/code&gt;).</source>
          <target state="translated">I / Oデバイス &lt;code&gt;standard_io&lt;/code&gt; 、 &lt;code&gt;standard_error&lt;/code&gt; 、登録名、またはpid処理I / Oプロトコル（ &lt;code&gt;file:open/2&lt;/code&gt; から返されます）。</target>
        </trans-unit>
        <trans-unit id="ae711fee4d3a7baed5f9d46d07c066788a61f314" translate="yes" xml:space="preserve">
          <source>An I/O server in binary mode affects the data sent to the client, so that it must be able to handle binary data. For convenience, the modes of an I/O server can be set and retrieved using the following I/O requests:</source>
          <target state="translated">バイナリモードのI/Oサーバは、クライアントに送信されるデータに影響を与えるため、バイナリデータを扱えるようにする必要があります。便利なように、I/Oサーバーのモードは、以下のI/Oリクエストを使って設定したり取得したりすることができます。</target>
        </trans-unit>
        <trans-unit id="b62015dba8d016181c61cc4f29681a2a099c1f41" translate="yes" xml:space="preserve">
          <source>An I/O server is any process capable of handling the I/O protocol. There is no generic I/O server behavior, but could well be. The framework is simple, a process handling incoming requests, usually both I/O-requests and other I/O device-specific requests (positioning, closing, and so on).</source>
          <target state="translated">I/Oサーバとは、I/Oプロトコルを扱うことができるプロセスのことです。一般的なI/Oサーバーの動作はありませんが、よくあるかもしれません。フレームワークはシンプルで、通常はI/O要求と他のI/Oデバイス固有の要求(位置決め、クローズなど)の両方を処理するプロセスです。</target>
        </trans-unit>
        <trans-unit id="71aa558a385dde730a823188e9e6c5a3a9ad8c43" translate="yes" xml:space="preserve">
          <source>An I/O vector containing &lt;code&gt;iovcnt&lt;/code&gt;&lt;code&gt;SysIOVec&lt;/code&gt;s pointing to the data. It is used by &lt;code&gt;&lt;a href=&quot;#enif_inspect_iovec&quot;&gt;enif_inspect_iovec&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#enif_ioq_enqv&quot;&gt;enif_ioq_enqv&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">データを指す &lt;code&gt;iovcnt&lt;/code&gt; &lt;code&gt;SysIOVec&lt;/code&gt; を含むI / Oベクトル。 &lt;code&gt;&lt;a href=&quot;#enif_inspect_iovec&quot;&gt;enif_inspect_iovec&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#enif_ioq_enqv&quot;&gt;enif_ioq_enqv&lt;/a&gt;&lt;/code&gt; で使用されます。</target>
        </trans-unit>
        <trans-unit id="41130f0f20d700a7cd9c6bd00e3e478bc7b4d3be" translate="yes" xml:space="preserve">
          <source>An IP datagram header is of variable length. This length is measured in the number of 32-bit words and is given in the segment corresponding to &lt;code&gt;HLen&lt;/code&gt;. The minimum value of &lt;code&gt;HLen&lt;/code&gt; is 5. It is the segment corresponding to &lt;code&gt;Opts&lt;/code&gt; that is variable, so if &lt;code&gt;HLen&lt;/code&gt; is equal to 5, &lt;code&gt;Opts&lt;/code&gt; becomes an empty binary.</source>
          <target state="translated">IPデータグラムヘッダーは可変長です。この長さは32ビットワードの数で測定され、 &lt;code&gt;HLen&lt;/code&gt; に対応するセグメントで指定されます。最小値 &lt;code&gt;HLen&lt;/code&gt; それに対応するセグメントであり、5である &lt;code&gt;Opts&lt;/code&gt; 変数であり、もしそうであれば &lt;code&gt;HLen&lt;/code&gt; 5に等しく、 &lt;code&gt;Opts&lt;/code&gt; 空のバイナリなります。</target>
        </trans-unit>
        <trans-unit id="8b34d40f0dbe3b588d3da6f27a42d0abb207e154" translate="yes" xml:space="preserve">
          <source>An LALR-1 parser generator for Erlang, similar to &lt;code&gt;yacc&lt;/code&gt;. Takes a BNF grammar definition as input, and produces Erlang code for a parser.</source>
          <target state="translated">&lt;code&gt;yacc&lt;/code&gt; に似た、Erlang用のLALR-1パーサージェネレーター。BNF文法定義を入力として受け取り、パーサー用のErlangコードを生成します。</target>
        </trans-unit>
        <trans-unit id="7f4de0ab059529b74fa404e77bd9bce10ca57adb" translate="yes" xml:space="preserve">
          <source>An MGC must initiate its transport service in order to listen to MG's trying to connect. How the actual transport is initiated is outside the scope of this application. However a send handle (typically a socket id or host and port) must be provided from the transport service in order to enable us to send the message to the correct destination. We do however not assume anything about this, from our point of view, opaque handle. Hopefully it is rather small since it will passed around the system between processes rather frequently.</source>
          <target state="translated">MGCは、接続しようとするMGをリッスンするために、そのトランスポートサービスを開始しなければなりません。実際のトランスポートがどのように開始されるかは、このアプリケーションの範囲外です。しかし、正しい宛先にメッセージを送信するためには、トランスポートサービスから送信ハンドル(一般的にはソケットIDやホストとポート)が提供されなければなりません。しかし、この不透明なハンドルについては何も仮定していません。うまくいけば、プロセス間で頻繁にシステム内を行き来することになるので、このハンドルはかなり小さいものであることを願っています。</target>
        </trans-unit>
        <trans-unit id="3f19384fb5f4be8e031ef20ebc7f31d2d84b520a" translate="yes" xml:space="preserve">
          <source>An MIB view is a collection of included and excluded sub-trees. A sub-tree is identified by an OBJECT IDENTIFIER. A mask is associated with each sub-tree.</source>
          <target state="translated">MIBビューは、含まれるサブツリーと除外されるサブツリーのコレクションです。サブツリーは OBJECT IDENTIFIER によって識別されます。マスクは各サブツリーに関連付けられています。</target>
        </trans-unit>
        <trans-unit id="a21abf65ff184b2ac5dfa83b3fd2726d82ff5f71" translate="yes" xml:space="preserve">
          <source>An RFC 3539 watchdog state machine has changed state.</source>
          <target state="translated">RFC 3539ウォッチドッグ・ステートマシンの状態が変更されました。</target>
        </trans-unit>
        <trans-unit id="3111bfc27ffe841290b619c09a5ae5ead1e40f85" translate="yes" xml:space="preserve">
          <source>An RSA private key encrypted with a password can look as follows:</source>
          <target state="translated">パスワードで暗号化されたRSA秘密鍵は以下のようになります。</target>
        </trans-unit>
        <trans-unit id="bc7347d7de31b66546bd97686f70b5b899b1f5d0" translate="yes" xml:space="preserve">
          <source>An SFTP client (&lt;code&gt;&lt;a href=&quot;ssh_sftp&quot;&gt;ssh_sftp&lt;/a&gt;&lt;/code&gt;) and server (&lt;code&gt;&lt;a href=&quot;ssh_sftp&quot;&gt;ssh_sftpd&lt;/a&gt;&lt;/code&gt;)</source>
          <target state="translated">SFTPクライアント（ &lt;code&gt;&lt;a href=&quot;ssh_sftp&quot;&gt;ssh_sftp&lt;/a&gt;&lt;/code&gt; ）およびサーバー（ &lt;code&gt;&lt;a href=&quot;ssh_sftp&quot;&gt;ssh_sftpd&lt;/a&gt;&lt;/code&gt; ）</target>
        </trans-unit>
        <trans-unit id="c30ebe58cf85f0d3449f206c0fc62e2bc8c29633" translate="yes" xml:space="preserve">
          <source>An SNMP &lt;strong&gt;community&lt;/strong&gt; is a relationship between an SNMP agent and a set of SNMP managers that defines authentication, access control and proxy characteristics.</source>
          <target state="translated">SNMP &lt;strong&gt;コミュニティ&lt;/strong&gt;は、SNMPエージェントと、認証、アクセス制御、およびプロキシの特性を定義する一連のSNMPマネージャ間の関係です。</target>
        </trans-unit>
        <trans-unit id="5c02aa7e99ca473f6341708b73eb0f8e28713993" translate="yes" xml:space="preserve">
          <source>An SNMPv3 agent must implement the SNMP-FRAMEWORK-MIB and SNMP-MPD-MIB. These MIBs are loaded by default, if the agent is configured for SNMPv3. These MIBs can be loaded for other versions as well.</source>
          <target state="translated">SNMPv3エージェントは、SNMP-FRAMEWORK-MIBおよびSNMP-MPD-MIBを実装しなければなりません。エージェントがSNMPv3用に設定されている場合、これらのMIBはデフォルトでロードされます。これらのMIBは、他のバージョンでもロードすることができます。</target>
        </trans-unit>
        <trans-unit id="7e6913d726a46e4ef23b14ab9fbfca01ba07d162" translate="yes" xml:space="preserve">
          <source>An abstract character-based &quot;document&quot; representing a number of possible layouts, which can be processed to produce a single concrete layout. A concrete layout can then be rendered as a sequence of characters containing linebreaks, which can be passed to a printer or terminal that uses a fixed-width font.</source>
          <target state="translated">抽象的な文字ベースの「文書」は、いくつかの可能なレイアウトを表し、それを処理して一つの具体的なレイアウトを生成することができます。具象レイアウトは、その後、改行を含む一連の文字としてレンダリングされ、固定幅フォントを使用するプリンタや端末に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="5ec400c22d9bf133e13c29bd14a5a46147f57249" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree. See the &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; module for details.</source>
          <target state="translated">抽象構文ツリー。詳細については、 &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="1d7ca6b5f69a072fd3b2d3d406795b2d4821be23" translate="yes" xml:space="preserve">
          <source>An abstract syntax tree. The &lt;code&gt;&lt;a href=&quot;#type-erl_parse&quot;&gt;erl_parse()&lt;/a&gt;&lt;/code&gt; &quot;parse tree&quot; representation is a proper subset of the &lt;code&gt;syntaxTree()&lt;/code&gt; representation.</source>
          <target state="translated">抽象構文ツリー。 &lt;code&gt;&lt;a href=&quot;#type-erl_parse&quot;&gt;erl_parse()&lt;/a&gt;&lt;/code&gt; 「解析ツリー」の表現は、適切なサブセットである &lt;code&gt;syntaxTree()&lt;/code&gt; 表現。</target>
        </trans-unit>
        <trans-unit id="e5d3cde78159d4684ac47feb70581b71c34485ec" translate="yes" xml:space="preserve">
          <source>An additional filter, &lt;code&gt;integer(X)&lt;/code&gt;, can be added to restrict the result to integers:</source>
          <target state="translated">追加のフィルター &lt;code&gt;integer(X)&lt;/code&gt; を追加して、結果を整数に制限できます。</target>
        </trans-unit>
        <trans-unit id="ce6cdc456e7459d3c957081ebfa2dcff54001d0a" translate="yes" xml:space="preserve">
          <source>An address list is available to the start function of a &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport module&lt;/a&gt;&lt;/code&gt;, which can return a new list for use in the subsequent CER or CEA. Host-IP-Address need not be specified if the transport module in question communicates an address list as described in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">アドレスリストは、後続のCERまたはCEAで使用するための新しいリストを返すことができる &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;transport module&lt;/a&gt;&lt;/code&gt; 開始関数で使用できます。問題のトランスポートモジュールが、 &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; で説明されているアドレスリストを通信する場合は、Host-IP-Addressを指定する必要はありません。</target>
        </trans-unit>
        <trans-unit id="d1e1407ae2e41532b81ffc2fdaec5e23d7093e2d" translate="yes" xml:space="preserve">
          <source>An agent can have many MIBs loaded at the same time.</source>
          <target state="translated">エージェントは同時に多くのMIBをロードすることができます。</target>
        </trans-unit>
        <trans-unit id="f492d7625cc14110ff6afa2865fa5e903887bda9" translate="yes" xml:space="preserve">
          <source>An agent responds to commands from the manager, and sends notification to the manager. There are potentially many agents in a system.</source>
          <target state="translated">エージェントは、マネージャからのコマンドに応答し、マネージャに通知を送信します。システムには潜在的に多くのエージェントが存在します。</target>
        </trans-unit>
        <trans-unit id="ca2e691f8fc810a8b8ce022a203ae58e956a286d" translate="yes" xml:space="preserve">
          <source>An algorithm is selected for computing a secret encryption key. Among examples are: the old nowadays week &lt;code&gt;'diffie-hellman-group-exchange-sha1'&lt;/code&gt; and the very strong and modern &lt;code&gt;'ecdh-sha2-nistp512'&lt;/code&gt;.</source>
          <target state="translated">秘密の暗号化キーを計算するためのアルゴリズムが選択されます。例としては、最近の週の &lt;code&gt;'diffie-hellman-group-exchange-sha1'&lt;/code&gt; と非常に強力で最新の &lt;code&gt;'ecdh-sha2-nistp512'&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="40a51c62e24096d5cc5decd65a67cd1b36502a80" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;utf8&lt;/code&gt;, as this is the preferred encoding for Unicode characters in binaries.</source>
          <target state="translated">&lt;code&gt;utf8&lt;/code&gt; のエイリアス。これはバイナリのUnicode文字の推奨エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="e889063dded89fc29b40235f1212d83a1c277549" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;{utf16,big}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{utf16,big}&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="2d83d259ee7d8e8db95f58d4f28b7d2b435fc514" translate="yes" xml:space="preserve">
          <source>An alias for &lt;code&gt;{utf32,big}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{utf32,big}&lt;/code&gt; のエイリアス。</target>
        </trans-unit>
        <trans-unit id="77817f9811fa0bbd6bf15b9e08ba9162578eb833" translate="yes" xml:space="preserve">
          <source>An alias for debug.</source>
          <target state="translated">デバッグのエイリアス。</target>
        </trans-unit>
        <trans-unit id="44d338f0d6e24a84de02e7eea09361912aac703c" translate="yes" xml:space="preserve">
          <source>An alias for none.</source>
          <target state="translated">noneの別名。</target>
        </trans-unit>
        <trans-unit id="47cdcc943c5527c2b6d51204fba8e07c3ec38fe4" translate="yes" xml:space="preserve">
          <source>An allocator manages multiple areas, called carriers, in which memory blocks are placed. A carrier is either placed in a separate memory segment (allocated through &lt;code&gt;mseg_alloc&lt;/code&gt;), or in the heap segment (allocated through &lt;code&gt;sys_alloc&lt;/code&gt;).</source>
          <target state="translated">アロケータは、メモリブロックが配置されるキャリアと呼ばれる複数の領域を管理します。キャリアは、別のメモリセグメント（ &lt;code&gt;mseg_alloc&lt;/code&gt; を介して割り当てられる）またはヒープセグメント（ &lt;code&gt;sys_alloc&lt;/code&gt; を介して割り当てられる）に配置されます。</target>
        </trans-unit>
        <trans-unit id="6febbd430369646d426d8b717469d67277d0bee6" translate="yes" xml:space="preserve">
          <source>An alternative &lt;code&gt;RequestURI&lt;/code&gt; has been generated.</source>
          <target state="translated">別の &lt;code&gt;RequestURI&lt;/code&gt; が生成されました。</target>
        </trans-unit>
        <trans-unit id="ef675fb1db408db7ca8ad5c68c12c4eb53d35683" translate="yes" xml:space="preserve">
          <source>An alternative approach is to use named parentheses instead. The Perl syntax for this is (?&amp;amp;name). The earlier PCRE syntax (?P&amp;gt;name) is also supported. We can rewrite the above example as follows:</source>
          <target state="translated">代わりの方法は、代わりに名前付き括弧を使用することです。このためのPerl構文は（？＆name）です。以前のPCRE構文（？P&amp;gt; name）もサポートされています。上記の例を次のように書き換えます。</target>
        </trans-unit>
        <trans-unit id="5e8ca0dc7201fb7d51c9dde7758788591e257936" translate="yes" xml:space="preserve">
          <source>An alternative approach using this &quot;branch reset&quot; feature is to use duplicate named subpatterns, as described in the next section.</source>
          <target state="translated">この「ブランチリセット」機能を使用する別のアプローチは、次のセクションで説明するように、名前のついたサブパターンを重複して使用することです。</target>
        </trans-unit>
        <trans-unit id="a0a954e9d1a777f3530d50c8cc1016f12452336b" translate="yes" xml:space="preserve">
          <source>An alternative description is that a subpattern of this type matches the string of characters that an identical standalone pattern would match, if anchored at the current point in the subject string.</source>
          <target state="translated">別の説明として、このタイプのサブパターンは、同一のスタンドアロンパターンがマッチするであろう文字列にマッチし、もしサブジェクト文字列の現在のポイントに固定されていれば、その文字列にマッチします。</target>
        </trans-unit>
        <trans-unit id="9ba8c75b43a6385ab4627c92aea25e2d33f00302" translate="yes" xml:space="preserve">
          <source>An alternative to links are &lt;strong&gt;monitors&lt;/strong&gt;. A process &lt;code&gt;Pid1&lt;/code&gt; can create a monitor for &lt;code&gt;Pid2&lt;/code&gt; by calling the BIF &lt;code&gt;erlang:monitor(process, Pid2)&lt;/code&gt;. The function returns a reference &lt;code&gt;Ref&lt;/code&gt;.</source>
          <target state="translated">リンクの代替手段は&lt;strong&gt;モニター&lt;/strong&gt;です。プロセス &lt;code&gt;Pid1&lt;/code&gt; は、BIF &lt;code&gt;erlang:monitor(process, Pid2)&lt;/code&gt; 呼び出すことにより、 &lt;code&gt;Pid2&lt;/code&gt; のモニターを作成できます。関数は参照 &lt;code&gt;Ref&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="8533112274eb7c989f917717ae151564846d5862" translate="yes" xml:space="preserve">
          <source>An alternative to the &lt;code&gt;rsh&lt;/code&gt; program can be specified on the command line to &lt;code&gt;erl(1)&lt;/code&gt; as follows:</source>
          <target state="translated">コマンドラインで &lt;code&gt;erl(1)&lt;/code&gt; の &lt;code&gt;rsh&lt;/code&gt; プログラムの代わりを次のように指定できます。</target>
        </trans-unit>
        <trans-unit id="a41af40dfe8039be24689b8d9fa5a4dec7a7425d" translate="yes" xml:space="preserve">
          <source>An application &lt;code&gt;myapp&lt;/code&gt; is to run at the node &lt;code&gt;cp1@cave&lt;/code&gt;. If this node goes down, &lt;code&gt;myapp&lt;/code&gt; is to be restarted at &lt;code&gt;cp2@cave&lt;/code&gt; or &lt;code&gt;cp3@cave&lt;/code&gt;. A system configuration file &lt;code&gt;cp1.config&lt;/code&gt; for &lt;code&gt;cp1@cave&lt;/code&gt; can look as follows:</source>
          <target state="translated">アプリケーション &lt;code&gt;myapp&lt;/code&gt; は、ノード &lt;code&gt;cp1@cave&lt;/code&gt; で実行されます。このノードがダウンした場合、 &lt;code&gt;myapp&lt;/code&gt; は &lt;code&gt;cp2@cave&lt;/code&gt; または &lt;code&gt;cp3@cave&lt;/code&gt; で再起動されます。 &lt;code&gt;cp1@cave&lt;/code&gt; システム構成ファイル &lt;code&gt;cp1.config&lt;/code&gt; は、次のようになります。</target>
        </trans-unit>
        <trans-unit id="476b23116cd9f8d3580ef27603fba21f5399f9c3" translate="yes" xml:space="preserve">
          <source>An application archive file and a regular application directory can coexist. This can be useful when it is needed to have parts of the application as regular files. A typical case is the &lt;code&gt;priv&lt;/code&gt; directory, which must reside as a regular directory to link in drivers dynamically and start port programs. For other applications that do not need this, directory &lt;code&gt;priv&lt;/code&gt; can reside in the archive and the files under the directory &lt;code&gt;priv&lt;/code&gt; can be read through &lt;code&gt;erl_prim_loader&lt;/code&gt;.</source>
          <target state="translated">アプリケーションアーカイブファイルと通常のアプリケーションディレクトリは共存できます。これは、アプリケーションの一部を通常のファイルとして持つ必要がある場合に役立ちます。典型的なケースは、ドライバを動的にリンクしてポートプログラムを開始するために、通常のディレクトリとして存在する必要がある &lt;code&gt;priv&lt;/code&gt; ディレクトリです。これを必要としない他のアプリケーションでは、ディレクトリ &lt;code&gt;priv&lt;/code&gt; アーカイブ内に存在することができ、ディレクトリ下のファイル &lt;code&gt;priv&lt;/code&gt; を通じて読み取ることができ &lt;code&gt;erl_prim_loader&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="81e9ecb32e44895786dfebfa55679adffcc065bb" translate="yes" xml:space="preserve">
          <source>An application can &lt;strong&gt;include&lt;/strong&gt; other applications. An &lt;strong&gt;included application&lt;/strong&gt; has its own application directory and &lt;code&gt;.app&lt;/code&gt; file, but it is started as part of the supervisor tree of another application.</source>
          <target state="translated">アプリケーションに&lt;strong&gt;は&lt;/strong&gt;他のアプリケーションを&lt;strong&gt;含める&lt;/strong&gt;ことができます。&lt;strong&gt;含まれるアプリケーションは&lt;/strong&gt;、独自のアプリケーションディレクトリおよび持つ &lt;code&gt;.app&lt;/code&gt; ファイルを、それは別のアプリケーションのスーパーバイザー・ツリーの一部として開始されます。</target>
        </trans-unit>
        <trans-unit id="bbba1c85e48e64885f006fdefa341a6cc281a7c7" translate="yes" xml:space="preserve">
          <source>An application can always be stopped explicitly by calling &lt;code&gt;application:stop/1&lt;/code&gt;. Regardless of the mode, no other applications are affected.</source>
          <target state="translated">&lt;code&gt;application:stop/1&lt;/code&gt; を呼び出すことにより、アプリケーションを常に明示的に停止できます。モードに関係なく、他のアプリケーションは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="4237e4a4e71361c449280ec1eb5b5ab2013b9c88" translate="yes" xml:space="preserve">
          <source>An application can be configured using &lt;strong&gt;configuration parameters&lt;/strong&gt;. These are a list of &lt;code&gt;{Par,Val}&lt;/code&gt; tuples specified by a key &lt;code&gt;env&lt;/code&gt; in the &lt;code&gt;.app&lt;/code&gt; file:</source>
          <target state="translated">アプリケーションは、&lt;strong&gt;構成パラメーター&lt;/strong&gt;を使用して&lt;strong&gt;構成できます&lt;/strong&gt;。これらは、 &lt;code&gt;.app&lt;/code&gt; ファイルのキー &lt;code&gt;env&lt;/code&gt; によって指定された &lt;code&gt;{Par,Val}&lt;/code&gt; タプルのリストです。</target>
        </trans-unit>
        <trans-unit id="2e4737552f8acb83cea1b0aaa1c749b9a4b1bebd" translate="yes" xml:space="preserve">
          <source>An application can only be included by one other application.</source>
          <target state="translated">アプリケーションは、他の1つのアプリケーションでのみ含めることができます。</target>
        </trans-unit>
        <trans-unit id="1b998578ccefe4ab3f65c6754297234509b764f6" translate="yes" xml:space="preserve">
          <source>An application can use the atom &lt;code&gt;asn1_DEFAULT&lt;/code&gt; to indicate that the encoding is to be omitted for that position in the &lt;code&gt;SEQUENCE&lt;/code&gt;.</source>
          <target state="translated">アプリケーションは、アトム &lt;code&gt;asn1_DEFAULT&lt;/code&gt; を使用して、 &lt;code&gt;SEQUENCE&lt;/code&gt; 内のその位置のエンコーディングが省略されることを示すことができます。</target>
        </trans-unit>
        <trans-unit id="610dd49b9ed69c0fcdd8e4b86353cb6bb81aba12" translate="yes" xml:space="preserve">
          <source>An application directory &lt;code&gt;AppDir&lt;/code&gt; under a library directory is recognized by the existence of an &lt;code&gt;AppDir/ebin&lt;/code&gt; directory. If this does not exist, Reltool will not consider &lt;code&gt;AppDir&lt;/code&gt; at all when looking for applications.</source>
          <target state="translated">ライブラリディレクトリの下のアプリケーションディレクトリ &lt;code&gt;AppDir&lt;/code&gt; は、 &lt;code&gt;AppDir/ebin&lt;/code&gt; ディレクトリの存在によって認識されます。これが存在しない場合、Reltoolはアプリケーションを探すときに &lt;code&gt;AppDir&lt;/code&gt; をまったく考慮しません。</target>
        </trans-unit>
        <trans-unit id="11790a3abc0ee5cdb260b3defc07c38712b24580" translate="yes" xml:space="preserve">
          <source>An application has an invalid &lt;code&gt;.app&lt;/code&gt; file. The second element identifies the application which has the invalid &lt;code&gt;.app&lt;/code&gt; file.</source>
          <target state="translated">アプリケーションに無効な &lt;code&gt;.app&lt;/code&gt; ファイルがあります。2番目の要素は、無効な &lt;code&gt;.app&lt;/code&gt; ファイルを持つアプリケーションを識別します。</target>
        </trans-unit>
        <trans-unit id="b872a6c7b25b61b98a67c571917b77e9c18745dd" translate="yes" xml:space="preserve">
          <source>An application has an invalid application version. The second element identifies the application version that is invalid.</source>
          <target state="translated">アプリケーションには無効なアプリケーションのバージョンがあります。2 番目の要素は、無効なアプリケーションのバージョンを識別します。</target>
        </trans-unit>
        <trans-unit id="f6f21f5a29839ae0eb3a520c3267f5725a862871" translate="yes" xml:space="preserve">
          <source>An application is defined by an &lt;strong&gt;application specification&lt;/strong&gt;. The specification is normally located in an &lt;strong&gt;application resource file&lt;/strong&gt; named &lt;code&gt;Application.app&lt;/code&gt;, where &lt;code&gt;Application&lt;/code&gt; is the application name. For details about the application specification, see &lt;code&gt;&lt;a href=&quot;app&quot;&gt;app(4)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アプリケーションは、&lt;strong&gt;アプリケーション仕様&lt;/strong&gt;によって定義され&lt;strong&gt;ます&lt;/strong&gt;。仕様は、通常に位置している&lt;strong&gt;アプリケーションのリソースファイル&lt;/strong&gt;の名前 &lt;code&gt;Application.app&lt;/code&gt; 、 &lt;code&gt;Application&lt;/code&gt; アプリケーション名です。アプリケーション仕様の詳細については、 &lt;code&gt;&lt;a href=&quot;app&quot;&gt;app(4)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="35cc8d34265eba507b77d8ce059b8e74c5366d40" translate="yes" xml:space="preserve">
          <source>An application is missing &lt;code&gt;runtime dependencies&lt;/code&gt;. The second element identifies the application (with version) that has missing dependencies. The third element contains the missing dependencies.</source>
          <target state="translated">アプリケーションに &lt;code&gt;runtime dependencies&lt;/code&gt; がありません。2番目の要素は、依存関係のないアプリケーション（およびバージョン）を識別します。3番目の要素には、欠落している依存関係が含まれています。</target>
        </trans-unit>
        <trans-unit id="de2d6a9e6ff979b71cea277fe00e98011788f397" translate="yes" xml:space="preserve">
          <source>An application is started by calling:</source>
          <target state="translated">呼び出してアプリケーションを起動します。</target>
        </trans-unit>
        <trans-unit id="2fec5bb7dc2630ef6ad69450c1671267747da522" translate="yes" xml:space="preserve">
          <source>An application is stopped, but not unloaded, by calling:</source>
          <target state="translated">呼び出してアプリケーションを停止しますが、アンロードはしません。</target>
        </trans-unit>
        <trans-unit id="bce15355fd14cfb6694d5cb7ccae2f7417ded65c" translate="yes" xml:space="preserve">
          <source>An application started the function &lt;code&gt;&lt;a href=&quot;mnesia#report_event-1&quot;&gt;mnesia:report_event(Event)&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Event&lt;/code&gt; can be any Erlang data structure. When tracing a system of &lt;code&gt;Mnesia&lt;/code&gt; applications, it is useful to be able to interleave own events of &lt;code&gt;Mnesia&lt;/code&gt; with application-related events that give information about the application context. Whenever the application starts with a new and demanding &lt;code&gt;Mnesia&lt;/code&gt; activity, or enters a new and interesting phase in its execution, it can be a good idea to use &lt;code&gt;mnesia:report_event/1&lt;/code&gt;.</source>
          <target state="translated">アプリケーションが関数 &lt;code&gt;&lt;a href=&quot;mnesia#report_event-1&quot;&gt;mnesia:report_event(Event)&lt;/a&gt;&lt;/code&gt; を開始しました。 &lt;code&gt;Event&lt;/code&gt; は任意のErlangデータ構造にすることができます。システムトレース時 &lt;code&gt;Mnesia&lt;/code&gt; のアプリケーションを、自身のイベントインタリーブすることができることが有用である &lt;code&gt;Mnesia&lt;/code&gt; アプリケーション・コンテキストについての情報を与えるアプリケーション関連イベントとを。アプリケーションが新しく要求の厳しい &lt;code&gt;Mnesia&lt;/code&gt; アクティビティで始まる場合、またはその実行で新しく興味深いフェーズに入る場合は &lt;code&gt;mnesia:report_event/1&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="f14ca986d2f7db147026ee6782679a5a03b84408" translate="yes" xml:space="preserve">
          <source>An application that has been stopped, or has never been started, can be unloaded. The information about the application is erased from the internal database of the application controller.</source>
          <target state="translated">停止している、または起動したことのないアプリケーションをアンロードすることができます。アプリケーションに関する情報は、アプリケーションコントローラの内部データベースから消去されます。</target>
        </trans-unit>
        <trans-unit id="c9401bc6499ac0973c3774424958a83ea895fc37" translate="yes" xml:space="preserve">
          <source>An application that is not included by any other application is called a &lt;strong&gt;primary application&lt;/strong&gt;.</source>
          <target state="translated">他のアプリケーションに含まれていないアプリケーションは、&lt;strong&gt;プライマリアプリケーション&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6d9139252544974ea454236628ab9eb7e354e643" translate="yes" xml:space="preserve">
          <source>An application that needs to import this MIB into another MIB is to use the &lt;code&gt;il&lt;/code&gt; option to the SNMP MIB compiler:</source>
          <target state="translated">このMIBを別のMIBにインポートする必要があるアプリケーションは、SNMP MIBコンパイラに &lt;code&gt;il&lt;/code&gt; オプションを使用することです。</target>
        </trans-unit>
        <trans-unit id="aedbc71f0d851c4a267d3a1c0c5aaf62f7d4dba9" translate="yes" xml:space="preserve">
          <source>An application version or an OTP version identifies source code versions. That is, it implies nothing about how the application or OTP has been built.</source>
          <target state="translated">アプリケーションのバージョンや OTP のバージョンは、ソースコードのバージョンを識別します。つまり、アプリケーションや OTP がどのように構築されたかについては何も示唆していません。</target>
        </trans-unit>
        <trans-unit id="0f4a2e38a016cb917aa540b614b135781aa21ea6" translate="yes" xml:space="preserve">
          <source>An application with processes is easiest implemented as a supervision tree using the standard behaviours.</source>
          <target state="translated">プロセスを持つアプリケーションは、標準的なビヘイビアを使った監視ツリーとして実装するのが最も簡単です。</target>
        </trans-unit>
        <trans-unit id="66dea70011adf556837c53a3cf0529342b0737a2" translate="yes" xml:space="preserve">
          <source>An arbitrary term of meaning only to the transport process in question, as documented in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; に記載されている、問題のトランスポートプロセスに対してのみ意味のある任意の用語。</target>
        </trans-unit>
        <trans-unit id="bd2f0e142f69d7ddafd6b4e615512721bf634753" translate="yes" xml:space="preserve">
          <source>An archive file for an application can, for example, be created like this:</source>
          <target state="translated">アプリケーションのアーカイブファイルは、例えば次のように作成することができます。</target>
        </trans-unit>
        <trans-unit id="893f8dfc800bfa1b0e951f0e6684d0ff5c925843" translate="yes" xml:space="preserve">
          <source>An arithmetic expression can be used within a pattern if it meets both of the following two conditions:</source>
          <target state="translated">算術式は、以下の2つの条件の両方を満たしていれば、パターン内で使用することができます。</target>
        </trans-unit>
        <trans-unit id="c099d0285433de3759b9f43727e0ca89ef8d8154" translate="yes" xml:space="preserve">
          <source>An assertion is a test on the characters following or preceding the current matching point that does not consume any characters. The simple assertions coded as \b, \B, \A, \G, \Z, \z, ^, and $ are described in the previous sections.</source>
          <target state="translated">アサーションは、現在のマッチングポイントの前後の文字についてのテストで、文字を消費しないものである。\b、\B、\A、\G、\Z、\z、^、および$としてコード化された単純なアサーションは、前のセクションで説明されている。</target>
        </trans-unit>
        <trans-unit id="978ae9153d3b935114d56f1e2ba916c150175de4" translate="yes" xml:space="preserve">
          <source>An association A is one of the following:</source>
          <target state="translated">アソシエーションAは、以下のいずれかに該当します。</target>
        </trans-unit>
        <trans-unit id="fdf937e643d3d794f4dfc3d3b0be30aaa9ddfa6d" translate="yes" xml:space="preserve">
          <source>An atom is a literal, a constant with name. An atom is to be enclosed in single quotes (') if it does not begin with a lower-case letter or if it contains other characters than alphanumeric characters, underscore (_), or @.</source>
          <target state="translated">アトムはリテラルであり、名前のついた定数です。アトムが小文字で始まらない場合や、英数字、アンダースコア(_)、@以外の文字を含む場合は、シングルクォーテーション(')で囲みます。</target>
        </trans-unit>
        <trans-unit id="8c8ee9420b38206282974e3cd3d3b4d8640789fe" translate="yes" xml:space="preserve">
          <source>An atom is stored with a 1 byte unsigned length, followed by &lt;code&gt;Len&lt;/code&gt; bytes containing the &lt;code&gt;AtomName&lt;/code&gt; encoded in UTF-8. Longer atoms encoded in UTF-8 can be represented using &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アトムは1バイトの符号なしの長さで格納され、その後にUTF-8でエンコードされた &lt;code&gt;AtomName&lt;/code&gt; を含む &lt;code&gt;Len&lt;/code&gt; バイトが続きます。UTF-8でエンコードされたより長いアトムは、 &lt;code&gt;&lt;a href=&quot;#ATOM_UTF8_EXT&quot;&gt;ATOM_UTF8_EXT&lt;/a&gt;&lt;/code&gt; を使用して表すことができます。</target>
        </trans-unit>
        <trans-unit id="f5b4b168d4917cd1441088fb0d3d767f247862aa" translate="yes" xml:space="preserve">
          <source>An atom is stored with a 1 byte unsigned length, followed by &lt;code&gt;Len&lt;/code&gt; numbers of 8-bit Latin-1 characters that forms the &lt;code&gt;AtomName&lt;/code&gt;.</source>
          <target state="translated">アトムは、1バイトの符号なしの長さで格納され、その後に &lt;code&gt;AtomName&lt;/code&gt; を形成する8ビットのLatin-1文字の &lt;code&gt;Len&lt;/code&gt; 番号が続きます。</target>
        </trans-unit>
        <trans-unit id="07c34b58920482b4d31c13cdc559df7d2359423e" translate="yes" xml:space="preserve">
          <source>An atom is stored with a 2 byte unsigned length in big-endian order, followed by &lt;code&gt;Len&lt;/code&gt; bytes containing the &lt;code&gt;AtomName&lt;/code&gt; encoded in UTF-8.</source>
          <target state="translated">アトムは、ビッグエンディアン順の2バイトの符号なし長さで格納され、その後にUTF-8でエンコードされた &lt;code&gt;AtomName&lt;/code&gt; を含む &lt;code&gt;Len&lt;/code&gt; バイトが続きます。</target>
        </trans-unit>
        <trans-unit id="025e110ec6c6fcee1721f7cbcbad132a16cef024" translate="yes" xml:space="preserve">
          <source>An atom is stored with a 2 byte unsigned length in big-endian order, followed by &lt;code&gt;Len&lt;/code&gt; numbers of 8-bit Latin-1 characters that forms the &lt;code&gt;AtomName&lt;/code&gt;. The maximum allowed value for &lt;code&gt;Len&lt;/code&gt; is 255.</source>
          <target state="translated">アトムは、ビッグエンディアン順の2バイトの符号なしの長さで格納され、その後に &lt;code&gt;AtomName&lt;/code&gt; を形成する8ビットのLatin-1文字の &lt;code&gt;Len&lt;/code&gt; 番号が続きます。 &lt;code&gt;Len&lt;/code&gt; の最大許容値は255です。</target>
        </trans-unit>
        <trans-unit id="b431bae2fda8c033fdb39409998689e38c1c1e1e" translate="yes" xml:space="preserve">
          <source>An atom refers into an atom table, which also consumes memory. The atom text is stored once for each unique atom in this table. The atom table is &lt;strong&gt;not&lt;/strong&gt; garbage-collected.</source>
          <target state="translated">アトムはアトムテーブルを参照し、メモリも消費します。アトムテキストは、このテーブルの一意のアトムごとに1回保存されます。アトムテーブルはガベージコレクションされ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="8a0191848aafc2915da6d60330900193c80a5474" translate="yes" xml:space="preserve">
          <source>An atom that is named from the POSIX error codes used in Unix, and in the runtime libraries of most C compilers.</source>
          <target state="translated">Unix やほとんどの C コンパイラのランタイムライブラリで使用されている POSIX エラーコードから命名されたアトム。</target>
        </trans-unit>
        <trans-unit id="96460aed347ebf24b2ed9071452af314293b4756" translate="yes" xml:space="preserve">
          <source>An atom that is named from the POSIX error codes used in Unix, and in the runtime libraries of most C compilers. See section &lt;code&gt;&lt;a href=&quot;#error_codes&quot;&gt;POSIX Error Codes&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">UnixおよびほとんどのCコンパイラのランタイムライブラリで使用されているPOSIXエラーコードから名前が付けられたアトム。See section &lt;code&gt;&lt;a href=&quot;#error_codes&quot;&gt;POSIX Error Codes&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="9e8843a0acaa52daf81257b21ad8836b998c8089" translate="yes" xml:space="preserve">
          <source>An earlier application version to downgrade to. If it is a string, it is interpreted as a specific version number. If it is a binary, it is interpreted as a regular expression that can match multiple version numbers.</source>
          <target state="translated">ダウングレードする以前のアプリケーションのバージョン。文字列の場合は、特定のバージョン番号として解釈されます。バイナリの場合は、複数のバージョン番号にマッチする正規表現として解釈されます。</target>
        </trans-unit>
        <trans-unit id="63ac8cc2733af5ba4520a25e1a0a5d26e1de0048" translate="yes" xml:space="preserve">
          <source>An earlier application version to upgrade from. If it is a string, it is interpreted as a specific version number. If it is a binary, it is interpreted as a regular expression that can match multiple version numbers.</source>
          <target state="translated">アップグレードするアプリケーションの以前のバージョン。文字列の場合は、特定のバージョン番号として解釈されます。バイナリの場合は、複数のバージョン番号にマッチする正規表現として解釈されます。</target>
        </trans-unit>
        <trans-unit id="86d25cc1b1c119f7c9ce21b1b20f631ca251d2b2" translate="yes" xml:space="preserve">
          <source>An earlier example pointed out that the following pattern matches &quot;sense and sensibility&quot; and &quot;response and responsibility&quot;, but not &quot;sense and responsibility&quot;:</source>
          <target state="translated">先の例では、以下のパターンが「センスと感性」と「対応と責任」には合致するが、「センスと責任」には合致しないと指摘しています。</target>
        </trans-unit>
        <trans-unit id="c42c79091566f1fa867808f3997379fa20e2ae07" translate="yes" xml:space="preserve">
          <source>An easier way to do this is to use &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-1&quot;&gt;erlang:monotonic_time/1&lt;/a&gt;&lt;/code&gt; with the desired time unit. However, you can then lose accuracy and precision.</source>
          <target state="translated">これを行う簡単な方法は、目的の時間単位で &lt;code&gt;&lt;a href=&quot;erlang#monotonic_time-1&quot;&gt;erlang:monotonic_time/1&lt;/a&gt;&lt;/code&gt; を使用することです。ただし、その場合、精度と精度が失われる可能性があります。</target>
        </trans-unit>
        <trans-unit id="f3e6d13ae9ee54a2968464f59c022d1a0a22fec2" translate="yes" xml:space="preserve">
          <source>An edge e = (v, w) is said to &lt;strong id=&quot;emanate&quot;&gt;emanate&lt;/strong&gt; from vertex v and to be &lt;strong id=&quot;incident&quot;&gt;incident&lt;/strong&gt; on vertex w.</source>
          <target state="translated">エッジEは=（V、W）と言われている&lt;strong id=&quot;emanate&quot;&gt;発散&lt;/strong&gt;頂点vからとなるように&lt;strong id=&quot;incident&quot;&gt;入射&lt;/strong&gt; W頂点に。</target>
        </trans-unit>
        <trans-unit id="172599b2aba9fdd5cd8e0641d69258937859fbb4" translate="yes" xml:space="preserve">
          <source>An employee works at a department, hence the &lt;code&gt;at_dep&lt;/code&gt; relationship.</source>
          <target state="translated">従業員は部門で働いているため、 &lt;code&gt;at_dep&lt;/code&gt; 関係です。</target>
        </trans-unit>
        <trans-unit id="536601c2cbcd6150b3784edaf6a33c2948983d16" translate="yes" xml:space="preserve">
          <source>An empty list &lt;code&gt;[]&lt;/code&gt;. This is equivalent to passing &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">空のリスト &lt;code&gt;[]&lt;/code&gt; 。これは &lt;code&gt;none&lt;/code&gt; を渡すことと同じです。</target>
        </trans-unit>
        <trans-unit id="da49af945864fc175e1244b31cb186e75a716158" translate="yes" xml:space="preserve">
          <source>An empty map is constructed by not associating any terms with each other:</source>
          <target state="translated">空のマップは、用語同士を関連付けないことで構築されます。</target>
        </trans-unit>
        <trans-unit id="20bc15d4624ad61f2625ada525d5ff17ad373837" translate="yes" xml:space="preserve">
          <source>An empty match spec deactivates tracing of calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">空のマッチスペックは &lt;code&gt;et:trace_me/4,5&lt;/code&gt; への呼び出しのトレースを無効にします</target>
        </trans-unit>
        <trans-unit id="f0f2a6b5cf3bee32b54e68dd8605481238a3fa00" translate="yes" xml:space="preserve">
          <source>An empty schema must be initialized on all the participating nodes.</source>
          <target state="translated">空のスキーマは、すべての参加ノードで初期化する必要があります。</target>
        </trans-unit>
        <trans-unit id="82d8e46ec9a0b6406017d5e01235b4160883931e" translate="yes" xml:space="preserve">
          <source>An empty string is interpreted as local time. The values &lt;code&gt;&quot;Z&quot;&lt;/code&gt;, &lt;code&gt;&quot;z&quot;&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; are interpreted as Universal Coordinated Time (UTC).</source>
          <target state="translated">空の文字列は現地時間として解釈されます。値 &lt;code&gt;&quot;Z&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;z&quot;&lt;/code&gt; 又は &lt;code&gt;0&lt;/code&gt; を協定世界時（UTC）として解釈されます。</target>
        </trans-unit>
        <trans-unit id="67b4376e4a5d5d2b6491c06b36b24207239ad5a6" translate="yes" xml:space="preserve">
          <source>An empty string is not considered to be a valid match if this option is specified. If alternatives in the pattern exist, they are tried. If all the alternatives match the empty string, the entire match fails.</source>
          <target state="translated">このオプションが指定されている場合、空の文字列は有効なマッチとはみなされません。パターン内に代替案が存在する場合は、それらが試行されます。すべての代替案が空文字列にマッチした場合、すべてのマッチは失敗します。</target>
        </trans-unit>
        <trans-unit id="ede47d5a8df58bc759c031e79f49d50dd3d6152e" translate="yes" xml:space="preserve">
          <source>An emulation of the &lt;code&gt;get_line&lt;/code&gt; request can be (inefficiently) implemented using the following functions:</source>
          <target state="translated">&lt;code&gt;get_line&lt;/code&gt; 要求のエミュレーションは、次の関数を使用して（非効率的に）実装できます。</target>
        </trans-unit>
        <trans-unit id="769ee572886ec7114895ada8db85a98957037066" translate="yes" xml:space="preserve">
          <source>An engine could among other tasks provide a storage for private or public keys. Such a storage could be made safer than the normal file system. Thoose techniques are not described in this User's Guide. Here we concentrate on how to use private or public keys stored in such an engine.</source>
          <target state="translated">エンジンは、他のタスクの中で、秘密鍵や公開鍵のためのストレージを提供することができる。このようなストレージは、通常のファイルシステムよりも安全性を高めることができる。これらの技術については、このユーザーズガイドでは説明しない。ここでは、このようなエンジンに格納された秘密鍵や公開鍵をどのように使用するかに焦点を当てる。</target>
        </trans-unit>
        <trans-unit id="de3c35730fbd4317113e17cb1a8316aa1ba146c4" translate="yes" xml:space="preserve">
          <source>An entry &lt;code&gt;init&lt;/code&gt; is called when the driver is loaded. However, we do not use this, as it is executed only once, and we want to have the possibility of several instances of the driver.</source>
          <target state="translated">ドライバーがロードされると、エントリー &lt;code&gt;init&lt;/code&gt; が呼び出されます。ただし、これは1回だけ実行されるため、使用しないでください。また、ドライバーの複数のインスタンスの可能性を持たせたいと考えています。</target>
        </trans-unit>
        <trans-unit id="f8c9e3c9a42748333730203820467c57427c23cd" translate="yes" xml:space="preserve">
          <source>An entry in the &lt;code&gt;snmpNotifyTable&lt;/code&gt; selects a set of management targets, which should receive notifications, as well as the type (trap or inform) of notification that should be sent to each selected management target. When an application sends a notification using the function &lt;code&gt;send_notification/5&lt;/code&gt; or the function &lt;code&gt;send_trap&lt;/code&gt; the parameter &lt;code&gt;NotifyName&lt;/code&gt;, specified in the call, is used as an index in the table. The notification is sent to the management targets selected by that entry.</source>
          <target state="translated">&lt;code&gt;snmpNotifyTable&lt;/code&gt; のエントリは、通知を受信する必要がある一連の管理ターゲットと、選択した各管理ターゲットに送信する必要がある通知のタイプ（トラップまたは通知）を選択します。アプリケーションは、機能使用して通知を送信するとき &lt;code&gt;send_notification/5&lt;/code&gt; または機能を &lt;code&gt;send_trap&lt;/code&gt; パラメータ &lt;code&gt;NotifyName&lt;/code&gt; 、呼び出しで指定され、テーブルのインデックスとして使用されます。通知は、そのエントリで選択された管理ターゲットに送信されます。</target>
        </trans-unit>
        <trans-unit id="d30f9a9d06d4cdda3d95205ef3f8e3559b78ed6a" translate="yes" xml:space="preserve">
          <source>An entry in the &lt;code&gt;snmpTargetAddrTable&lt;/code&gt; defines transport parameters (such as IP address and UDP port) for each management target. Each row in the &lt;code&gt;snmpNotifyTable&lt;/code&gt; refers to potentially many rows in the &lt;code&gt;snmpTargetAddrTable&lt;/code&gt;. Each row in the &lt;code&gt;snmpTargetAddrTable&lt;/code&gt; refers to an entry in the &lt;code&gt;snmpTargetParamsTable&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;snmpTargetAddrTable&lt;/code&gt; のエントリは、各管理ターゲットのトランスポートパラメータ（IPアドレスやUDPポートなど）を定義します。各行 &lt;code&gt;snmpNotifyTable&lt;/code&gt; に潜在的に多数の行を指す &lt;code&gt;snmpTargetAddrTable&lt;/code&gt; 。 &lt;code&gt;snmpTargetAddrTable&lt;/code&gt; の各行は、snmpTargetParamsTableのエントリを参照し &lt;code&gt;snmpTargetParamsTable&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c864a3c020fb7453c6c9230310fc8c808b2ea57f" translate="yes" xml:space="preserve">
          <source>An entry in the &lt;code&gt;snmpTargetParamsTable&lt;/code&gt; defines which SNMP version to use, and which security parameters to use.</source>
          <target state="translated">&lt;code&gt;snmpTargetParamsTable&lt;/code&gt; のエントリは、使用するSNMPバージョンと使用するセキュリティパラメータを定義します。</target>
        </trans-unit>
        <trans-unit id="c6d027e6ae888a87324f48f2f95ccca79a8943b4" translate="yes" xml:space="preserve">
          <source>An enum is defined for the different types of ports:</source>
          <target state="translated">さまざまなタイプのポートのための列挙が定義されています。</target>
        </trans-unit>
        <trans-unit id="112db680b6814a15cbebf4072e243401d2d30dc2" translate="yes" xml:space="preserve">
          <source>An enumeration of the options that can be specified to &lt;code&gt;&lt;a href=&quot;#enif_binary_to_term&quot;&gt;enif_binary_to_term&lt;/a&gt;&lt;/code&gt;. For default behavior, use value &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_binary_to_term&quot;&gt;enif_binary_to_term&lt;/a&gt;&lt;/code&gt; に指定できるオプションの列挙。デフォルトの動作では、値 &lt;code&gt;0&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="6252cac5ba4fabe28fb4f86a057202e9f901cf22" translate="yes" xml:space="preserve">
          <source>An enumeration of the properties that can be requested from &lt;code&gt;&lt;a href=&quot;#enif_make_unique_integer&quot;&gt;enif_make_unique_integer&lt;/a&gt;&lt;/code&gt;. For default properties, use value &lt;code&gt;0&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_make_unique_integer&quot;&gt;enif_make_unique_integer&lt;/a&gt;&lt;/code&gt; から要求できるプロパティの列挙。デフォルトのプロパティには、値 &lt;code&gt;0&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="65635c741693783b8faf9619014d7e4c157b5504" translate="yes" xml:space="preserve">
          <source>An enumeration of the supported hash types that can be generated using &lt;code&gt;&lt;a href=&quot;#enif_hash&quot;&gt;enif_hash&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#enif_hash&quot;&gt;enif_hash&lt;/a&gt;&lt;/code&gt; を使用して生成できる、サポートされているハッシュタイプの列挙。</target>
        </trans-unit>
        <trans-unit id="a0579ec30b9bde18751f5dc44f0719d4615425a5" translate="yes" xml:space="preserve">
          <source>An enumeration of time units supported by the NIF API:</source>
          <target state="translated">NIF API でサポートされている時間単位の列挙。</target>
        </trans-unit>
        <trans-unit id="168bb5a8fd94c8cd10d8ed3f141a0191574b88ed" translate="yes" xml:space="preserve">
          <source>An enumeration of time units supported by the driver API:</source>
          <target state="translated">ドライバ API がサポートする時間単位の列挙。</target>
        </trans-unit>
        <trans-unit id="5667406f6f2878a322440a8811e0537af3474b50" translate="yes" xml:space="preserve">
          <source>An erroneous port driver causes the entire Erlang runtime system to leak memory, hang or crash.</source>
          <target state="translated">誤ったポートドライバを使うとErlangランタイムシステム全体がメモリリークしたり、ハングしたりクラッシュしたりします。</target>
        </trans-unit>
        <trans-unit id="a25480ae66be12a6963d7a72edaa77057ebfd25a" translate="yes" xml:space="preserve">
          <source>An erroneously implemented driver callback can cause a VM internal state inconsistency, which can cause a crash of the VM, or miscellaneous misbehaviors of the VM at any point after the call to the driver callback.</source>
          <target state="translated">誤って実装されたドライバコールバックは、VM の内部状態の不整合を引き起こし、VM のクラッシュや、ドライバコールバックへの呼び出し後の任意の時点で VM の雑多な動作を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="b8892af8dce296a6140e1075e6fda16d2be53087" translate="yes" xml:space="preserve">
          <source>An erroneously implemented native function can cause a VM internal state inconsistency, which can cause a crash of the VM, or miscellaneous misbehaviors of the VM at any point after the call to the native function.</source>
          <target state="translated">誤って実装されたネイティブ関数は、VM の内部状態の不整合を引き起こし、VM のクラッシュや、ネイティブ関数を呼び出した後の任意の時点で VM の雑多な挙動を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="7e29ee9045f599d9ba3e88fde145184df3fac58d" translate="yes" xml:space="preserve">
          <source>An error (preferably &lt;code&gt;enotsup&lt;/code&gt;) is to be expected if the option is not supported by the I/O server (like if an &lt;code&gt;echo&lt;/code&gt; option is sent in a &lt;code&gt;setopts&lt;/code&gt; request to a plain file).</source>
          <target state="translated">オプションがI / Oサーバーでサポートされていない場合（ &lt;code&gt;setopts&lt;/code&gt; 、 &lt;code&gt;echo&lt;/code&gt; オプションがプレーンファイルへのsetoptsリクエストで送信された場合など）は、エラー（できれば &lt;code&gt;enotsup&lt;/code&gt; ）が予想されます。</target>
        </trans-unit>
        <trans-unit id="ef53805af65d4aec1042beb62bf786a927bf0949" translate="yes" xml:space="preserve">
          <source>An error in the token, &lt;code&gt;ErrString&lt;/code&gt; is a string describing the error.</source>
          <target state="translated">トークンのエラー、 &lt;code&gt;ErrString&lt;/code&gt; はエラーを説明する文字列です。</target>
        </trans-unit>
        <trans-unit id="9675f812e2ec4204b8069b26c2c16fc3d11e7e72" translate="yes" xml:space="preserve">
          <source>An error is generated if a POSIX character class (see below) or an escape sequence other than one that defines a single character appears at a point where a range ending character is expected. For example, [z-\xff] is valid, but [A-\d] and [A-[:digit:]] are not.</source>
          <target state="translated">POSIX 文字クラス(後述)や、1 文字を定義するエスケープシーケンス以外のエスケープシーケンスが、範囲終了文字が期待される位置に出現した場合、エラーとなります。例えば、[z-\xff]は有効ですが、[A-\d]と[A-[:digit:]]は有効ではありません。</target>
        </trans-unit>
        <trans-unit id="70ffc117acf0983da95ec8d6661c1771f05359ce" translate="yes" xml:space="preserve">
          <source>An error is returned if the file is inaccessible, badly damaged, or not produced with &lt;code&gt;&lt;a href=&quot;#tab2file-2&quot;&gt;tab2file/2&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルにアクセスできない、破損している、または &lt;code&gt;&lt;a href=&quot;#tab2file-2&quot;&gt;tab2file/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt; で作成されていない場合は、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="f4fccfc1950a3f6ff91e3d72c1993a335c05397b" translate="yes" xml:space="preserve">
          <source>An error message from Yecc will be shown if the grammar is not of the LALR type (for example too ambiguous). Shift/reduce conflicts are resolved in favor of shifting if there are no operator precedence declarations. Refer to the &lt;code&gt;yacc&lt;/code&gt; documentation on the use of operator precedence.</source>
          <target state="translated">文法がLALRタイプではない（あいまいすぎるなど）場合、Yeccからのエラーメッセージが表示されます。演算子の優先順位宣言がない場合は、シフト/リデュースの競合が解決され、シフトが優先されます。演算子の優先順位の使用については、 &lt;code&gt;yacc&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="31c2414153ba301793b3dd12a7fe55e753d09f20" translate="yes" xml:space="preserve">
          <source>An error occurred and parameter &lt;code&gt;What&lt;/code&gt; gives a hint about the error.</source>
          <target state="translated">エラーが発生し、パラメーター &lt;code&gt;What&lt;/code&gt; はエラーについてのヒントを与えます。</target>
        </trans-unit>
        <trans-unit id="b554e8c8ed24e5d9bc17d2154801582fa6248c31" translate="yes" xml:space="preserve">
          <source>An error occurred when interpreting the Erlang expressions in the file. To convert the three-element tuple to an English description of the error, use &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイル内のErlang式の解釈中にエラーが発生しました。3要素のタプルをエラーの英語の説明に変換するには、 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="767d840af8cc500417913c45ac5faa2d43fc36cf" translate="yes" xml:space="preserve">
          <source>An error occurred when interpreting the Erlang expressions in the file. Use &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; to convert the three-element tuple to an English description of the error.</source>
          <target state="translated">ファイル内のErlang式の解釈中にエラーが発生しました。使用 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; エラーの英語の説明を3要素のタプルを変換します。</target>
        </trans-unit>
        <trans-unit id="08fb924c8d5034ec7f5547cd83f8fcb4ccca9d79" translate="yes" xml:space="preserve">
          <source>An error occurred when interpreting the Erlang terms in the file. To convert the three-element tuple to an English description of the error, use &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイル内のErlang用語の解釈中にエラーが発生しました。3要素のタプルをエラーの英語の説明に変換するには、 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="33ce206664f8a29d19d98811cc9c199fb73695df" translate="yes" xml:space="preserve">
          <source>An error occurred when interpreting the Erlang terms in the file. Use &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; to convert the three-element tuple to an English description of the error.</source>
          <target state="translated">ファイル内のErlang用語の解釈中にエラーが発生しました。使用 &lt;code&gt;&lt;a href=&quot;#format_error-1&quot;&gt;format_error/1&lt;/a&gt;&lt;/code&gt; エラーの英語の説明を3要素のタプルを変換します。</target>
        </trans-unit>
        <trans-unit id="d42f0460cf512a9c365e9827248b96d2dd4f4f2b" translate="yes" xml:space="preserve">
          <source>An error occurred when opening the file or reading it. For a list of typical error codes, see &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ファイルのオープンまたは読み取り中にエラーが発生しました。一般的なエラーコードのリストについては、 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="865e7e88d043baea59e5a9ce2c7bdc0ec2a285ad" translate="yes" xml:space="preserve">
          <source>An error occurred while tokenizing or parsing.</source>
          <target state="translated">トークン化または解析中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="4c273a93c70896df1c5d70c89b20ce9bedbd1cc9" translate="yes" xml:space="preserve">
          <source>An error occurred while tokenizing.</source>
          <target state="translated">トークン化中にエラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="bccc6f1f5cca72606032b0c35b12d1e01e8749d0" translate="yes" xml:space="preserve">
          <source>An error occurred.</source>
          <target state="translated">エラーが発生しました。</target>
        </trans-unit>
        <trans-unit id="956fbfe776acc43caa6cf6b2b6cd39d20367cfeb" translate="yes" xml:space="preserve">
          <source>An error occurred. &lt;code&gt;ErrorLocation&lt;/code&gt; is the first location after the erroneous token.</source>
          <target state="translated">エラーが発生しました。 &lt;code&gt;ErrorLocation&lt;/code&gt; は、エラーのあるトークンの後の最初の場所です。</target>
        </trans-unit>
        <trans-unit id="b5debc76cc659427400c33c7089e9a450f8d6749" translate="yes" xml:space="preserve">
          <source>An error occurred. &lt;code&gt;LeftOverChars&lt;/code&gt; is the remaining characters of the input data, starting from &lt;code&gt;EndLocation&lt;/code&gt;.</source>
          <target state="translated">エラーが発生しました。 &lt;code&gt;LeftOverChars&lt;/code&gt; から出発して、入力データの残りの文字である &lt;code&gt;EndLocation&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b04e7309a02162567e2429e9aecf5da14464d91f" translate="yes" xml:space="preserve">
          <source>An error with this reason is caused by the user &lt;code&gt;&lt;a href=&quot;megaco_user#connect&quot;&gt;handle_connect&lt;/a&gt;&lt;/code&gt; callback function either returning an error or an invalid value.</source>
          <target state="translated">この理由によるエラーは、ユーザーの &lt;code&gt;&lt;a href=&quot;megaco_user#connect&quot;&gt;handle_connect&lt;/a&gt;&lt;/code&gt; コールバック関数がエラーまたは無効な値を返すことによって発生します。</target>
        </trans-unit>
        <trans-unit id="6c4ed44541e86a0e82fda185481726a9fa534460" translate="yes" xml:space="preserve">
          <source>An error with this reason is generated by the megaco application itself.</source>
          <target state="translated">この理由でエラーが発生するのは、megacoアプリ自体が原因です。</target>
        </trans-unit>
        <trans-unit id="40f386a85299f082984b2271fcfb815a37ab5075" translate="yes" xml:space="preserve">
          <source>An escape such as \d or \pL that matches a single character</source>
          <target state="translated">一文字にマッチしたエスケープ。</target>
        </trans-unit>
        <trans-unit id="3dbab65b35422e9a5f18088ebc06d25e9fad346a" translate="yes" xml:space="preserve">
          <source>An escript without header can be created as follows:</source>
          <target state="translated">ヘッダのない escript は以下のように作成できます。</target>
        </trans-unit>
        <trans-unit id="caa651d62e89a3194457422deac44f5099468104" translate="yes" xml:space="preserve">
          <source>An event handler that logs events to disk.</source>
          <target state="translated">イベントをディスクに記録するイベントハンドラ。</target>
        </trans-unit>
        <trans-unit id="5819d554802a07971f53d1cb6535b01dfcbb09e8" translate="yes" xml:space="preserve">
          <source>An event manager can also be stopped by calling:</source>
          <target state="translated">イベントマネージャーは、呼び出して停止させることもできます。</target>
        </trans-unit>
        <trans-unit id="f0e3aa08515364f27e3115f4b2dbde9ad919a3bf" translate="yes" xml:space="preserve">
          <source>An event manager implemented using this module has a standard set of interface functions and includes functionality for tracing and error reporting. It also fits into an OTP supervision tree. For more information, see &lt;code&gt;OTP Design Principles&lt;/code&gt;.</source>
          <target state="translated">このモジュールを使用して実装されたイベントマネージャーには、標準のインターフェイス関数セットがあり、トレースとエラー報告のための機能が含まれています。また、OTP監視ツリーにも適合します。詳細については、 &lt;code&gt;OTP Design Principles&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="886ccc722947fa7b5754f99dcfc5af3986ac55e6" translate="yes" xml:space="preserve">
          <source>An event manager is implemented as a process and each event handler is implemented as a callback module.</source>
          <target state="translated">イベントマネージャはプロセスとして実装され、各イベントハンドラはコールバックモジュールとして実装されます。</target>
        </trans-unit>
        <trans-unit id="f09b12972f030994c4bc8f915a66c78fbd4519e1" translate="yes" xml:space="preserve">
          <source>An event message sent to processes that have subscribed to these using &lt;code&gt;&lt;a href=&quot;#subscribe-1&quot;&gt;subscribe/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#subscribe-1&quot;&gt;subscribe/1&lt;/a&gt;&lt;/code&gt; を使用してこれらにサブスクライブしたプロセスに送信されるイベントメッセージ。</target>
        </trans-unit>
        <trans-unit id="7912692308fccb18e880ce6533510b32643ba616" translate="yes" xml:space="preserve">
          <source>An event of type &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;internal&lt;/a&gt;&lt;/code&gt; is to be used when you want to reliably distinguish an event inserted this way from any external event.</source>
          <target state="translated">タイプのイベント &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;internal&lt;/a&gt;&lt;/code&gt; あなたが確実に任意の外部イベントから、このように挿入されたイベントを区別したいときに使用します。</target>
        </trans-unit>
        <trans-unit id="a40597cb2b6a0fd7a5b617f8cfce1e45596c4fc9" translate="yes" xml:space="preserve">
          <source>An event record consists of the following fields:</source>
          <target state="translated">イベントレコードは以下のフィールドで構成されています。</target>
        </trans-unit>
        <trans-unit id="c961b5dc628efa399b055d52eefc6a02b7a6cc27" translate="yes" xml:space="preserve">
          <source>An event time-out is cancelled by any other event so you either get some other event or the time-out event. It is therefore not possible nor needed to cancel or restart an event time-out. Whatever event you act on has already cancelled the event time-out...</source>
          <target state="translated">イベントタイムアウトは他のイベントによってキャンセルされるため、他のイベントを取得するか、タイムアウトイベントを取得するかのどちらかになります。したがって、イベントタイムアウトをキャンセルしたり、再開したりすることはできませんし、その必要もありません。あなたが行動したイベントはすでにキャンセルされています。</target>
        </trans-unit>
        <trans-unit id="a3e4ac702417db8112a904d57243c3232ddfe095" translate="yes" xml:space="preserve">
          <source>An event_handler tuple in argument &lt;code&gt;Opts&lt;/code&gt; has the following definition (see &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">引数 &lt;code&gt;Opts&lt;/code&gt; のevent_handlerタプルには、次の定義があります（ &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; を参照）。</target>
        </trans-unit>
        <trans-unit id="3a969467552c52e537f903625bc429c6574d2c9a" translate="yes" xml:space="preserve">
          <source>An example command line doing the same as the example in the previous section can now look as follows (line breaks in the command are for readability, and shall not be there when typed):</source>
          <target state="translated">前節の例と同じようなコマンドラインの例は、以下のようになります(コマンドの改行は読みやすくするためのものであり、入力時には存在しないものとします)。</target>
        </trans-unit>
        <trans-unit id="24e3e494ce66660334a3ee83d7103bc438d96d0c" translate="yes" xml:space="preserve">
          <source>An example command line with this option would look like this:</source>
          <target state="translated">このオプションを使用したコマンドラインの例は次のようになります。</target>
        </trans-unit>
        <trans-unit id="3a72f95d3b2dbe62f799c4b641925aa95c266cbd" translate="yes" xml:space="preserve">
          <source>An example implementation of a distribution module can be found in &lt;code&gt;$ERL_TOP/lib/kernel/examples/gen_tcp_dist/src/gen_tcp_dist.erl&lt;/code&gt;. It implements the distribution over TCP/IP using the &lt;code&gt;gen_tcp&lt;/code&gt; API with distribution controllers implemented by processes. This instead of using port distribution controllers as the ordinary TCP/IP distribution uses.</source>
          <target state="translated">配布モジュールの実装例は、 &lt;code&gt;$ERL_TOP/lib/kernel/examples/gen_tcp_dist/src/gen_tcp_dist.erl&lt;/code&gt; ます。これは、プロセスによって実装された分散コントローラーを備えた &lt;code&gt;gen_tcp&lt;/code&gt; APIを使用して、TCP / IPを介した分散を実装します。これは、通常のTCP / IP配布が使用するポート配布コントローラーを使用する代わりに。</target>
        </trans-unit>
        <trans-unit id="f25cec01bb097ac34ef114606afd83d4604845c7" translate="yes" xml:space="preserve">
          <source>An example of &lt;code&gt;&amp;lt;MibName&amp;gt;&lt;/code&gt; is &lt;code&gt;RFC1213-MIB&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&amp;lt;MibName&amp;gt;&lt;/code&gt; の例は &lt;code&gt;RFC1213-MIB&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dd190ce9f4e4adebb4a1e9e43f55af888513aa13" translate="yes" xml:space="preserve">
          <source>An example of a connection string: &lt;code&gt;&quot;DSN=sql-server;UID=aladdin;PWD=sesame&quot;&lt;/code&gt; where DSN is your ODBC Data Source Name, UID is a database user id and PWD is the password for that user. These are usually the attributes required in the connection string, but some drivers have other driver specific attributes, for example &lt;code&gt;&quot;DSN=Oracle8;DBQ=gandalf;UID=aladdin;PWD=sesame&quot;&lt;/code&gt; where DBQ is your TNSNAMES.ORA entry name e.g. some Oracle specific configuration attribute.</source>
          <target state="translated">接続文字列の例： &lt;code&gt;&quot;DSN=sql-server;UID=aladdin;PWD=sesame&quot;&lt;/code&gt; ここで、DSNはODBCデータソース名、UIDはデータベースユーザーID、PWDはそのユーザーのパスワードです。これらは通常、接続文字列で必要な属性ですが、一部のドライバーには他のドライバー固有の属性があります。たとえば、 &lt;code&gt;&quot;DSN=Oracle8;DBQ=gandalf;UID=aladdin;PWD=sesame&quot;&lt;/code&gt; ここで、DBQはTNSNAMES.ORAエントリ名です。 Oracle固有の構成属性。</target>
        </trans-unit>
        <trans-unit id="4c63ca8ea69582d13ba623fe7884e3eaf6dde10a" translate="yes" xml:space="preserve">
          <source>An example of a simple server written in plain Erlang is provided in &lt;code&gt;&lt;a href=&quot;des_princ#ch1&quot;&gt;Overview&lt;/a&gt;&lt;/code&gt;. The server can be reimplemented using &lt;code&gt;gen_server&lt;/code&gt;, resulting in this callback module:</source>
          <target state="translated">単純なErlangで記述された単純なサーバーの例は、 &lt;code&gt;&lt;a href=&quot;des_princ#ch1&quot;&gt;Overview&lt;/a&gt;&lt;/code&gt; されています。サーバーは &lt;code&gt;gen_server&lt;/code&gt; を使用して再実装でき、次のコールバックモジュールになります。</target>
        </trans-unit>
        <trans-unit id="766c8ed5398a618e0ab57071580f3ae767ca73f1" translate="yes" xml:space="preserve">
          <source>An example of a simple test function could be the following:</source>
          <target state="translated">単純なテスト関数の例としては、以下のようなものが考えられます。</target>
        </trans-unit>
        <trans-unit id="fc8a1c6616df7bc9e05cd29f7f66081b9d15ab3e" translate="yes" xml:space="preserve">
          <source>An example of a test case information function follows:</source>
          <target state="translated">テストケース情報機能の例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="263edddce7f8f5ac177f18b46f0285f0e12e001a" translate="yes" xml:space="preserve">
          <source>An example of a typical ordering function is less than or equal to: &lt;code&gt;=&amp;lt;/2&lt;/code&gt;.</source>
          <target state="translated">典型的な順序付け関数の例は、以下です： &lt;code&gt;=&amp;lt;/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0cfd15cad67827179545aee45fbe9cd3e6e0b77" translate="yes" xml:space="preserve">
          <source>An example of a value that can be encoded as type &lt;code&gt;T1&lt;/code&gt; is &lt;code&gt;{12,&quot;hello&quot;}&lt;/code&gt;.</source>
          <target state="translated">タイプとして符号化することができる値の一例 &lt;code&gt;T1&lt;/code&gt; はある &lt;code&gt;{12,&quot;hello&quot;}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="641b3d8cec6c829548d6cff0640c2452dac92d4d" translate="yes" xml:space="preserve">
          <source>An example of an XML configuration file follows:</source>
          <target state="translated">以下にXML設定ファイルの例を示します。</target>
        </trans-unit>
        <trans-unit id="3c953ad1d3b8e0a028a4a0e50272f51e08c62029" translate="yes" xml:space="preserve">
          <source>An example of branched versions: The version &lt;code&gt;6.0.2.1&lt;/code&gt; is a branched version from the base version &lt;code&gt;6.0.2&lt;/code&gt;. Versions on the form &lt;code&gt;6.0.2.&amp;lt;X&amp;gt;&lt;/code&gt; can be compared with normal versions smaller than or equal to &lt;code&gt;6.0.2&lt;/code&gt;, and other versions on the form &lt;code&gt;6.0.2.&amp;lt;X&amp;gt;&lt;/code&gt;. The version &lt;code&gt;6.0.2.1&lt;/code&gt; will include all changes in &lt;code&gt;6.0.2&lt;/code&gt;. However, &lt;code&gt;6.0.3&lt;/code&gt; will most likely &lt;strong&gt;not&lt;/strong&gt; include all changes in &lt;code&gt;6.0.2.1&lt;/code&gt; (note that these versions have no order). A second branched version from the base version &lt;code&gt;6.0.2&lt;/code&gt; will be version &lt;code&gt;6.0.2.0.1&lt;/code&gt;, and a third branched version will be &lt;code&gt;6.0.2.0.0.1&lt;/code&gt;.</source>
          <target state="translated">分岐バージョンの例：バージョン &lt;code&gt;6.0.2.1&lt;/code&gt; は、ベースバージョン &lt;code&gt;6.0.2&lt;/code&gt; からの分岐バージョンです。フォーム上のバージョンが &lt;code&gt;6.0.2.&amp;lt;X&amp;gt;&lt;/code&gt; より小さいか等しい通常のバージョンと比較することができる &lt;code&gt;6.0.2&lt;/code&gt; フォームに、および他のバージョン &lt;code&gt;6.0.2.&amp;lt;X&amp;gt;&lt;/code&gt; バージョン &lt;code&gt;6.0.2.1&lt;/code&gt; には6.0.2のすべての変更が含まれ &lt;code&gt;6.0.2&lt;/code&gt; 。ただし、 &lt;code&gt;6.0.3&lt;/code&gt; には &lt;code&gt;6.0.2.1&lt;/code&gt; のすべての変更が含まれるとは限り&lt;strong&gt;ません&lt;/strong&gt;（これらのバージョンには順序がないことに注意してください）。ベースバージョン &lt;code&gt;6.0.2&lt;/code&gt; からの2番目の分岐バージョンはバージョン &lt;code&gt;6.0.2.0.1&lt;/code&gt; で、3番目の分岐バージョンは &lt;code&gt;6.0.2.0.0.1&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4d2b79780a92a75d625b2977e20ae40bf2d1dc5d" translate="yes" xml:space="preserve">
          <source>An example of how to compile code with debug information from the Erlang shell:</source>
          <target state="translated">Erlangシェルのデバッグ情報を使ってコードをコンパイルする方法の例です。</target>
        </trans-unit>
        <trans-unit id="283dddecff25e45c32ff2ee6dc6f7deae1f48787" translate="yes" xml:space="preserve">
          <source>An example of how to compile code with debug information using &lt;code&gt;erlc&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; を使用してデバッグ情報を含むコードをコンパイルする方法の例：</target>
        </trans-unit>
        <trans-unit id="0b041b3192c84c6c42972b6454b8d190b043db34" translate="yes" xml:space="preserve">
          <source>An example of how to replace the standard handler with a disk_log handler at startup is found in the &lt;code&gt;&lt;a href=&quot;logger_disk_log_h&quot;&gt;logger_disk_log_h&lt;/a&gt;&lt;/code&gt; manual.</source>
          <target state="translated">起動時に標準ハンドラーをdisk_logハンドラーに置き換える方法の例は、 &lt;code&gt;&lt;a href=&quot;logger_disk_log_h&quot;&gt;logger_disk_log_h&lt;/a&gt;&lt;/code&gt; マニュアルにあります。</target>
        </trans-unit>
        <trans-unit id="ad7a08deebfc0de42e62f5ac0c0a37270a88259d" translate="yes" xml:space="preserve">
          <source>An example of how to use function &lt;code&gt;seq_trigger_ms/0,1&lt;/code&gt; follows:</source>
          <target state="translated">関数 &lt;code&gt;seq_trigger_ms/0,1&lt;/code&gt; の使用例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="52a1c522c256f4824c6c143ccc112c9b3e8d1721" translate="yes" xml:space="preserve">
          <source>An example of process tracing of &lt;code&gt;os_mon&lt;/code&gt; and friends.</source>
          <target state="translated">&lt;code&gt;os_mon&lt;/code&gt; およびそのフレンドのプロセストレースの例。</target>
        </trans-unit>
        <trans-unit id="d183a4063c6f62966aa70116abbdb5e2ed3c3fa0" translate="yes" xml:space="preserve">
          <source>An example of the suite information function follows:</source>
          <target state="translated">スイート情報機能の例を以下に示します。</target>
        </trans-unit>
        <trans-unit id="71b617f2d4fc8a3ed842c6355b6026c8ba8babba" translate="yes" xml:space="preserve">
          <source>An example of this is the SFTP support in &lt;code&gt;ssh_sftp:open_tar/3&lt;/code&gt;. This function opens a tar file on a remote machine using an SFTP channel.</source>
          <target state="translated">この例は、 &lt;code&gt;ssh_sftp:open_tar/3&lt;/code&gt; でのSFTPサポートです。この関数は、SFTPチャネルを使用してリモートマシンのtarファイルを開きます。</target>
        </trans-unit>
        <trans-unit id="623a8785811ca24208a4398108f7f9357baa4841" translate="yes" xml:space="preserve">
          <source>An example with an implicit match specification:</source>
          <target state="translated">暗黙の一致を指定した例。</target>
        </trans-unit>
        <trans-unit id="b77a79055b4c741418b72739ec8b6223e715e638" translate="yes" xml:space="preserve">
          <source>An example with implicit match specification:</source>
          <target state="translated">暗黙の一致指定をした例。</target>
        </trans-unit>
        <trans-unit id="8f768fcb2e6876510a24de877e85b8f46f23c3ca" translate="yes" xml:space="preserve">
          <source>An exception (such as &lt;code&gt;badarg&lt;/code&gt;) in the &lt;code&gt;MatchCondition&lt;/code&gt; part, which resembles an Erlang guard, generates immediate failure.</source>
          <target state="translated">Erlangガードに似た &lt;code&gt;MatchCondition&lt;/code&gt; 部分の例外（ &lt;code&gt;badarg&lt;/code&gt; など）は、即時の失敗を生成します。</target>
        </trans-unit>
        <trans-unit id="c55f6f36b8c26386f173147d732e092f93370b5b" translate="yes" xml:space="preserve">
          <source>An exception consists of its class, an exit reason (see &lt;code&gt;&lt;a href=&quot;#exit_reasons&quot;&gt;Exit Reason&lt;/a&gt;&lt;/code&gt;), and a stack trace (which aids in finding the code location of the exception).</source>
          <target state="translated">例外は、そのクラス、終了理由（ &lt;code&gt;&lt;a href=&quot;#exit_reasons&quot;&gt;Exit Reason&lt;/a&gt;&lt;/code&gt; を参照）、およびスタックトレース（例外のコードの場所を見つけるのに役立ちます）で構成されます。</target>
        </trans-unit>
        <trans-unit id="786ccd01cb23da0a273209436d12e92170626910" translate="yes" xml:space="preserve">
          <source>An exception in the &lt;code&gt;MatchBody&lt;/code&gt; part, which resembles the body of an Erlang function, is implicitly caught and results in the single atom &lt;code&gt;'EXIT'&lt;/code&gt;.</source>
          <target state="translated">Erlang関数の本体に似た &lt;code&gt;MatchBody&lt;/code&gt; パーツの例外は暗黙的にキャッチされ、単一のアトム &lt;code&gt;'EXIT'&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="eea16817ebabde2bb1160184fce27148bc39b259" translate="yes" xml:space="preserve">
          <source>An exception is if the application has the &lt;code&gt;start_phases&lt;/code&gt; key defined (see &lt;code&gt;&lt;a href=&quot;included_applications&quot;&gt;Included Applications&lt;/a&gt;&lt;/code&gt;). The application is then instead started by calling:</source>
          <target state="translated">例外は、アプリケーションに &lt;code&gt;start_phases&lt;/code&gt; キーが定義されている場合です（ &lt;code&gt;&lt;a href=&quot;included_applications&quot;&gt;Included Applications&lt;/a&gt;&lt;/code&gt; 参照）。代わりに、アプリケーションは次の呼び出しによって開始されます。</target>
        </trans-unit>
        <trans-unit id="ccfc7a550c54e8241796ed0b6744cf68e3304ef5" translate="yes" xml:space="preserve">
          <source>An exception is thrown if &lt;code&gt;fun_expr_clauses(Node)&lt;/code&gt; returns an empty list, or if the first element of that list is not a syntax tree &lt;code&gt;C&lt;/code&gt; of type &lt;code&gt;clause&lt;/code&gt; such that &lt;code&gt;clause_patterns(C)&lt;/code&gt; is a nonempty list.</source>
          <target state="translated">場合、例外がスローされ &lt;code&gt;fun_expr_clauses(Node)&lt;/code&gt; 空のリストを返す、またはそのリストの最初の要素は、構文木でない場合に &lt;code&gt;C&lt;/code&gt; 型の &lt;code&gt;clause&lt;/code&gt; よう &lt;code&gt;clause_patterns(C)&lt;/code&gt; 空でないリストです。</target>
        </trans-unit>
        <trans-unit id="b82407baecc4ff5b4d3851e388407e7da330afd7" translate="yes" xml:space="preserve">
          <source>An exception is thrown if &lt;code&gt;function_clauses(Node)&lt;/code&gt; returns an empty list, or if the first element of that list is not a syntax tree &lt;code&gt;C&lt;/code&gt; of type &lt;code&gt;clause&lt;/code&gt; such that &lt;code&gt;clause_patterns(C)&lt;/code&gt; is a nonempty list.</source>
          <target state="translated">&lt;code&gt;function_clauses(Node)&lt;/code&gt; が空のリストを返す場合、またはそのリストの最初の要素が &lt;code&gt;clause_patterns(C)&lt;/code&gt; が空でないリストであるようなタイプ &lt;code&gt;clause&lt;/code&gt; 構文ツリー &lt;code&gt;C&lt;/code&gt; でない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="f52143a4be751dfd326004be48fd5e21eb1bb7aa" translate="yes" xml:space="preserve">
          <source>An exception is thrown if &lt;code&gt;named_fun_expr_clauses(Node)&lt;/code&gt; returns an empty list, or if the first element of that list is not a syntax tree &lt;code&gt;C&lt;/code&gt; of type &lt;code&gt;clause&lt;/code&gt; such that &lt;code&gt;clause_patterns(C)&lt;/code&gt; is a nonempty list.</source>
          <target state="translated">&lt;code&gt;named_fun_expr_clauses(Node)&lt;/code&gt; が空のリストを返す場合、またはそのリストの最初の要素が、 &lt;code&gt;clause_patterns(C)&lt;/code&gt; が空でないリストであるようなタイプ &lt;code&gt;clause&lt;/code&gt; 構文ツリー &lt;code&gt;C&lt;/code&gt; でない場合、例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="e847ae794f483b76a1568dd706204639135518bf" translate="yes" xml:space="preserve">
          <source>An exception occurring during the evaluation of &lt;code&gt;Body&lt;/code&gt; is not caught.</source>
          <target state="translated">&lt;code&gt;Body&lt;/code&gt; の評価中に発生した例外はキャッチされません。</target>
        </trans-unit>
        <trans-unit id="7b5eab4cdd40c5d5e4cc289495dd5e5e68d0fea2" translate="yes" xml:space="preserve">
          <source>An exception of class &lt;code&gt;error&lt;/code&gt; is also known as a run-time error.</source>
          <target state="translated">クラス &lt;code&gt;error&lt;/code&gt; の例外は、実行時エラーとも呼ばれます。</target>
        </trans-unit>
        <trans-unit id="4450a7ddfc454818593e6096f098ce6aa2d7511c" translate="yes" xml:space="preserve">
          <source>An exception to the above is if the exit reason is &lt;code&gt;kill&lt;/code&gt;, that is if &lt;code&gt;exit(Pid,kill)&lt;/code&gt; has been called. This unconditionally terminates the process, regardless of if it is trapping exit signals.</source>
          <target state="translated">上記の例外は、終了理由が &lt;code&gt;kill&lt;/code&gt; の場合、つまり &lt;code&gt;exit(Pid,kill)&lt;/code&gt; が呼び出された場合です。これは、終了シグナルをトラップしているかどうかに関係なく、無条件にプロセスを終了します。</target>
        </trans-unit>
        <trans-unit id="d07cbfc2bcd69590e32840931392d6ea6afd078a" translate="yes" xml:space="preserve">
          <source>An exception will be thrown if a preset dictionary is required for further decompression. See &lt;code&gt;&lt;a href=&quot;#inflateSetDictionary-2&quot;&gt;inflateSetDictionary/2&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">さらに解凍するためにプリセット辞書が必要な場合、例外がスローされます。詳細については、 &lt;code&gt;&lt;a href=&quot;#inflateSetDictionary-2&quot;&gt;inflateSetDictionary/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b1c641f1b9af49cd4d1923ca86b8594f8f949e59" translate="yes" xml:space="preserve">
          <source>An exception within the callback will be treated as a validation failure.</source>
          <target state="translated">コールバック内の例外は、検証の失敗として扱われます。</target>
        </trans-unit>
        <trans-unit id="f30fc06164cbf07d72025eed006de40eb4481362" translate="yes" xml:space="preserve">
          <source>An executable line contains an Erlang expression such as a matching or a function call. A blank line or a line containing a comment, function head or pattern in a &lt;code&gt;case&lt;/code&gt;- or &lt;code&gt;receive&lt;/code&gt; statement is not executable.</source>
          <target state="translated">実行可能な行には、マッチングや関数呼び出しなどのErlang式が含まれています。空白行またはコメントで、機能ヘッドやパターンを含む行 &lt;code&gt;case&lt;/code&gt; -または &lt;code&gt;receive&lt;/code&gt; ステートメントが実行可能ではありません。</target>
        </trans-unit>
        <trans-unit id="8606c5f9fe59cd2685a78631470346707ae72155" translate="yes" xml:space="preserve">
          <source>An expected CEA was not received within &lt;code&gt;&lt;a href=&quot;#capx_timeout&quot;&gt;capx_timeout&lt;/a&gt;&lt;/code&gt; of connection establishment.</source>
          <target state="translated">接続確立の &lt;code&gt;&lt;a href=&quot;#capx_timeout&quot;&gt;capx_timeout&lt;/a&gt;&lt;/code&gt; 内に予期されたCEAが受信されませんでした。</target>
        </trans-unit>
        <trans-unit id="0cfddc07c615cb5d5e6262a7a3331cc836bbb0c2" translate="yes" xml:space="preserve">
          <source>An expected CER was not received within &lt;code&gt;&lt;a href=&quot;#capx_timeout&quot;&gt;capx_timeout&lt;/a&gt;&lt;/code&gt; of connection establishment.</source>
          <target state="translated">接続が確立されてから &lt;code&gt;&lt;a href=&quot;#capx_timeout&quot;&gt;capx_timeout&lt;/a&gt;&lt;/code&gt; 内に予期されたCERが受信されませんでした。</target>
        </trans-unit>
        <trans-unit id="d1e9be959321b894a2874f0c88caf59a243a800d" translate="yes" xml:space="preserve">
          <source>An explicit match specification is here used to traverse the table:</source>
          <target state="translated">ここでは、明示的なマッチ指定を使用してテーブルをトラバースします。</target>
        </trans-unit>
        <trans-unit id="057acda345b8319968a51559e553710109f3e800" translate="yes" xml:space="preserve">
          <source>An expression E is one of the following:</source>
          <target state="translated">式Eは、次のいずれかである。</target>
        </trans-unit>
        <trans-unit id="79ec765b52e5254ae35be2bfa0a2b1b7402af860" translate="yes" xml:space="preserve">
          <source>An expression defining the map to be updated, is put in front of the expression defining the keys to be updated and their respective values:</source>
          <target state="translated">更新されるマップを定義する式は、更新されるキーとその値を定義する式の前に置かれます。</target>
        </trans-unit>
        <trans-unit id="4c5709bbd83330fdb0802325f414deebc289f34a" translate="yes" xml:space="preserve">
          <source>An expression that can be evaluated as a function in the following sense.</source>
          <target state="translated">次の意味で関数として評価できる式。</target>
        </trans-unit>
        <trans-unit id="b3ffd3c48acbdb730fd9ee6452c9c6da8b28f7c0" translate="yes" xml:space="preserve">
          <source>An extendible array can be made fixed-size later:</source>
          <target state="translated">拡張可能な配列は後から固定サイズにすることができます。</target>
        </trans-unit>
        <trans-unit id="8053c45d586487397b53559d19e27dd0eec873c5" translate="yes" xml:space="preserve">
          <source>An identity parse transform.</source>
          <target state="translated">ID パース変換。</target>
        </trans-unit>
        <trans-unit id="ecdfc6b7cd9818342bbf2008fadc35280070bfc8" translate="yes" xml:space="preserve">
          <source>An implementation of an HTTP 1.1 compliant web server, as defined in &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt;. Provides web server start options, administrative functions, and an Erlang callback API.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc2616.txt&quot;&gt;RFC 2616&lt;/a&gt;&lt;/code&gt; で定義されているHTTP 1.1準拠のWebサーバーの実装。Webサーバーの起動オプション、管理機能、ErlangコールバックAPIを提供します。</target>
        </trans-unit>
        <trans-unit id="bccff937aee314a7a7bbe2e29ed38d05e459fc04" translate="yes" xml:space="preserve">
          <source>An important aspect of these functions is that the system can access a table while it is being reconfigured. For example, it is possible to move a table and simultaneously perform write operations to the same table. This feature is essential for applications that require continuous service.</source>
          <target state="translated">これらの機能の重要な側面は、システムがテーブルを再構成している間にアクセスできることです。例えば、テーブルを移動しながら、同じテーブルへの書き込み操作を同時に行うことが可能です。この機能は、継続的なサービスを必要とするアプリケーションには欠かせない機能です。</target>
        </trans-unit>
        <trans-unit id="8103190c74242180849af27697a68cc90031c667" translate="yes" xml:space="preserve">
          <source>An important feature of the Erlang programming language is the ability to change module code in runtime, &lt;strong&gt;code replacement&lt;/strong&gt;, as described in the Erlang Reference Manual.</source>
          <target state="translated">Erlangリファレンスマニュアルで説明されているように、Erlang プログラミング言語の重要な機能は、実行時にモジュールコードを変更する機能、&lt;strong&gt;コードの置き換え&lt;/strong&gt;です。</target>
        </trans-unit>
        <trans-unit id="b984515f043cbeceb35298b231ea0fb8cdbe98e2" translate="yes" xml:space="preserve">
          <source>An important notion is that of  &lt;strong id=&quot;conversion&quot;&gt;conversion&lt;/strong&gt; of expressions. The syntax of a cast expression is:</source>
          <target state="translated">重要な概念は、式の &lt;strong id=&quot;conversion&quot;&gt;変換&lt;/strong&gt;です。キャスト式の構文は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="e7373b7e60caa76da4c06b8f17342dc9bd893d3f" translate="yes" xml:space="preserve">
          <source>An inbound Diameter message.</source>
          <target state="translated">インバウンドのDiameterメッセージ。</target>
        </trans-unit>
        <trans-unit id="27e2e729d2af483eadb06f0f20ab32c601a79adb" translate="yes" xml:space="preserve">
          <source>An included application can include other applications.</source>
          <target state="translated">含まれるアプリケーションには、他のアプリケーションを含めることができます。</target>
        </trans-unit>
        <trans-unit id="6fad7fec6bf12045b5bbf5068c4c8a4f43bff8d4" translate="yes" xml:space="preserve">
          <source>An incoming CEA contained errors and has been rejected. &lt;code&gt;Caps&lt;/code&gt; contains only values for the local node. &lt;code&gt;Pkt&lt;/code&gt; contains the CEA in question.</source>
          <target state="translated">着信CEAにエラーが含まれていたため、拒否されました。 &lt;code&gt;Caps&lt;/code&gt; には、ローカルノードの値のみが含まれます。 &lt;code&gt;Pkt&lt;/code&gt; には、問題のCEAが含まれています。</target>
        </trans-unit>
        <trans-unit id="59cee863f9f3f47fe8ac63e3064c6869185c82bc" translate="yes" xml:space="preserve">
          <source>An incoming CEA has been rejected for the indicated reason. An integer-valued &lt;code&gt;Result&lt;/code&gt; indicates the result code sent by the peer. &lt;code&gt;Caps&lt;/code&gt; contains pairs of values for the local node and remote peer. &lt;code&gt;Pkt&lt;/code&gt; contains the CEA in question. In the case of rejection by a capabilities callback, the tuple contains the rejecting callback.</source>
          <target state="translated">示されている理由により、着信CEAが拒否されました。整数値の &lt;code&gt;Result&lt;/code&gt; は、ピアによって送信された結果コードを示します。 &lt;code&gt;Caps&lt;/code&gt; には、ローカルノードとリモートピアの値のペアが含まれています。 &lt;code&gt;Pkt&lt;/code&gt; には、問題のCEAが含まれています。機能コールバックによる拒否の場合、タプルには拒否コールバックが含まれます。</target>
        </trans-unit>
        <trans-unit id="b1def14681d1943bacda3c612720c72d742fb87a" translate="yes" xml:space="preserve">
          <source>An incoming CER contained errors and has been answered with the indicated result code. &lt;code&gt;Caps&lt;/code&gt; contains values for the local node only. &lt;code&gt;Pkt&lt;/code&gt; contains the CER in question.</source>
          <target state="translated">着信CERにエラーが含まれており、示された結果コードで応答されました。 &lt;code&gt;Caps&lt;/code&gt; には、ローカルノードの値のみが含まれます。 &lt;code&gt;Pkt&lt;/code&gt; には、問題のCERが含まれています。</target>
        </trans-unit>
        <trans-unit id="44f0c3ff8baccd820cf7209b6da707bb1df632ba" translate="yes" xml:space="preserve">
          <source>An incoming CER has been answered with the indicated result code, or discarded. &lt;code&gt;Caps&lt;/code&gt; contains pairs of values, for the local node and remote peer respectively. &lt;code&gt;Pkt&lt;/code&gt; contains the CER in question. In the case of rejection by a capabilities callback, the tuple contains the rejecting callback.</source>
          <target state="translated">着信CERは、示された結果コードで応答されたか、破棄されました。 &lt;code&gt;Caps&lt;/code&gt; には、ローカルノードとリモートピアそれぞれの値のペアが含まれます。 &lt;code&gt;Pkt&lt;/code&gt; には、問題のCERが含まれています。機能コールバックによる拒否の場合、タプルには拒否コールバックが含まれます。</target>
        </trans-unit>
        <trans-unit id="c010a7263cd57740edb22b37dcc807299770bfbd" translate="yes" xml:space="preserve">
          <source>An index number. Each fun within a module has an unique index. &lt;code&gt;Index&lt;/code&gt; is stored in big-endian byte order.</source>
          <target state="translated">インデックス番号。モジュール内の各ファンには一意のインデックスがあります。 &lt;code&gt;Index&lt;/code&gt; はビッグエンディアンのバイト順で格納されます。</target>
        </trans-unit>
        <trans-unit id="e0917d687832d3450bdf1dd4a6ec48cbe0e0d9e3" translate="yes" xml:space="preserve">
          <source>An index table for the table in the previous examples would have to be a bag (as keys would appear more than once) and can have the following contents:</source>
          <target state="translated">先ほどの例のテーブルのインデックステーブルは、(キーが複数回出現するため)袋でなければならず、次のような内容を持つことができます。</target>
        </trans-unit>
        <trans-unit id="f3a716603d7f6fd090e2b620d82712d6086ee98c" translate="yes" xml:space="preserve">
          <source>An info report is written when the upgrade is completed. To programmatically determine if the upgrade is complete, call &lt;code&gt;&lt;a href=&quot;release_handler#which_releases-0&quot;&gt;release_handler:which_releases/0,1&lt;/a&gt;&lt;/code&gt; and check if the expected release has status &lt;code&gt;current&lt;/code&gt;.</source>
          <target state="translated">アップグレードが完了すると、情報レポートが書き込まれます。アップグレードが完了したかどうかをプログラムで判断するには、 &lt;code&gt;&lt;a href=&quot;release_handler#which_releases-0&quot;&gt;release_handler:which_releases/0,1&lt;/a&gt;&lt;/code&gt; を呼び出し、予期されるリリースのステータスが &lt;code&gt;current&lt;/code&gt; かどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="4c23fa577741650a0b90f37b9ba01e57e91c10bd" translate="yes" xml:space="preserve">
          <source>An info report is written when the upgrade is completed. To programmatically find out if the upgrade is complete, call &lt;code&gt;release_handler:which_releases(current)&lt;/code&gt; and check if it returns the expected (that is, the new) release.</source>
          <target state="translated">アップグレードが完了すると、情報レポートが書き込まれます。アップグレードが完了したかどうかをプログラムで調べるには、 &lt;code&gt;release_handler:which_releases(current)&lt;/code&gt; を呼び出して、期待される（つまり、新しい）リリースが返されるかどうかを確認します。</target>
        </trans-unit>
        <trans-unit id="54c7f8a299a2c3884adcc720f6b4c75f5057c0ab" translate="yes" xml:space="preserve">
          <source>An initial megaco_receive_handle record may be obtained with megaco:user_info(UserMid, receive_handle)</source>
          <target state="translated">megaco_receive_handle の初期レコードは、megaco:user_info(UserMid,receive_handle)で取得できます。</target>
        </trans-unit>
        <trans-unit id="1540a39cc27f66083ac255242e015830b64ff885" translate="yes" xml:space="preserve">
          <source>An installed, but not permanent, release can be &lt;strong&gt;removed&lt;/strong&gt;. Information about the release is then deleted from &lt;code&gt;$ROOT/releases/RELEASES&lt;/code&gt; and the release-specific code, that is, the new application directories and the &lt;code&gt;$ROOT/releases/Vsn&lt;/code&gt; directory, are removed.</source>
          <target state="translated">インストールされているが永続的ではないリリースは&lt;strong&gt;削除&lt;/strong&gt;できます。次に、リリースに関する情報が &lt;code&gt;$ROOT/releases/RELEASES&lt;/code&gt; から削除され、リリース固有のコード、つまり新しいアプリケーションディレクトリと &lt;code&gt;$ROOT/releases/Vsn&lt;/code&gt; ディレクトリが削除されます。</target>
        </trans-unit>
        <trans-unit id="543b81b3ca97b671430c105dbe9f1ef27cc417d9" translate="yes" xml:space="preserve">
          <source>An instance of the global group server, &lt;code&gt;global_group&lt;/code&gt;, must be running on each node. The processes are automatically started and synchronized when a node is started.</source>
          <target state="translated">グローバルグループサーバーのインスタンス &lt;code&gt;global_group&lt;/code&gt; は、各ノードで実行されている必要があります。ノードが開始されると、プロセスは自動的に開始され、同期されます。</target>
        </trans-unit>
        <trans-unit id="37e43d40c9bbabdd039d304ba4e86e08e3ffdef1" translate="yes" xml:space="preserve">
          <source>An instrumentation function is associated with each managed object. This is the function, which actually implements the operations and will be called by the agent when it receives a request from the management station.</source>
          <target state="translated">各管理オブジェクトには、インストルメンテーション機能が関連付けられています。これは、実際に操作を実装する関数であり、エージェントが管理局からの要求を受けたときに呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c415bc220831ee9b6e63013e939f47504d9e06e6" translate="yes" xml:space="preserve">
          <source>An integer &amp;gt; 1.</source>
          <target state="translated">1より大きい整数。</target>
        </trans-unit>
        <trans-unit id="02913d17fb755af0fd3c86a0adae0000c2d01a6b" translate="yes" xml:space="preserve">
          <source>An integer &amp;gt; 16#10FFFF (the maximum Unicode character)</source>
          <target state="translated">16＃10FFFFを超える整数（最大Unicode文字）</target>
        </trans-unit>
        <trans-unit id="ad0ece817502015092c7dcb2a91f78120a1b145a" translate="yes" xml:space="preserve">
          <source>An integer &amp;gt;= 0, defaults to 5000 (= 5 seconds).</source>
          <target state="translated">0以上の整数、デフォルトは5000（= 5秒）。</target>
        </trans-unit>
        <trans-unit id="20367003fe74f6da823d6b30bb16e4e87af78658" translate="yes" xml:space="preserve">
          <source>An integer (1-3) that together with the node name identifies a specific instance of the node.</source>
          <target state="translated">ノード名と一緒にノードの特定のインスタンスを識別する整数 (1-3)。</target>
        </trans-unit>
        <trans-unit id="2b542080580abe037742a55ddf14a6930d08becf" translate="yes" xml:space="preserve">
          <source>An integer encoded using &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Uniq&lt;/code&gt; is the hash value of the parse for the fun.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt; を使用してエンコードされた整数。 &lt;code&gt;Uniq&lt;/code&gt; は、楽しみのための解析のハッシュ値です。</target>
        </trans-unit>
        <trans-unit id="1e4efa5efcaeac48981fcfd626c607b83f7f9504" translate="yes" xml:space="preserve">
          <source>An integer encoded using &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt;. &lt;code&gt;Uniq&lt;/code&gt; is the hash value of the parse tree for the fun.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt; を使用してエンコードされた整数。 &lt;code&gt;Uniq&lt;/code&gt; は、楽しみのための解析ツリーのハッシュ値です。</target>
        </trans-unit>
        <trans-unit id="6a456c7d96d3be7599b8cda2609e6963d6b1de33" translate="yes" xml:space="preserve">
          <source>An integer encoded using &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt;. Is typically a small index into the module's fun table.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt; を使用してエンコードされた整数。通常は、モジュールのfunテーブルへの小さなインデックスです。</target>
        </trans-unit>
        <trans-unit id="6847ab27f51bb9e93819111b69d00c639f57f360" translate="yes" xml:space="preserve">
          <source>An integer encoded using &lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt;. It is typically a small index into the module's fun table.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#SMALL_INTEGER_EXT&quot;&gt;SMALL_INTEGER_EXT&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#INTEGER_EXT&quot;&gt;INTEGER_EXT&lt;/a&gt;&lt;/code&gt; を使用してエンコードされた整数。これは通常、モジュールのfunテーブルへの小さなインデックスです。</target>
        </trans-unit>
        <trans-unit id="52ca0689079aeaec22ad11a25c6606e5822f73a2" translate="yes" xml:space="preserve">
          <source>An integer in base 2-36 with Erlang-style base prefix (for example, &lt;code&gt;&quot;16#ffff&quot;&lt;/code&gt;) is expected.</source>
          <target state="translated">Erlangスタイルのベースプレフィックス（たとえば、 &lt;code&gt;&quot;16#ffff&quot;&lt;/code&gt; ）付きのベース2-36の整数が必要です。</target>
        </trans-unit>
        <trans-unit id="0baa0e36919cfd4cb52692449c99e08703eaa7db" translate="yes" xml:space="preserve">
          <source>An integer in the range 16#D800 to 16#DFFF (invalid range reserved for UTF-16 surrogate pairs)</source>
          <target state="translated">16#D800 ~ 16#DFFF の範囲の整数 (UTF-16 サロゲートペア用に予約された無効な範囲)。</target>
        </trans-unit>
        <trans-unit id="bb1ed6dc3882ba274f91970e7d75def0f49d509c" translate="yes" xml:space="preserve">
          <source>An integer time-out value means that the supervisor tells the child process to terminate by calling &lt;code&gt;exit(Child, shutdown)&lt;/code&gt; and then waits for an exit signal back. If no exit signal is received within the specified time, the child process is unconditionally terminated using &lt;code&gt;exit(Child, kill)&lt;/code&gt;.</source>
          <target state="translated">整数のタイムアウト値は、スーパーバイザが &lt;code&gt;exit(Child, shutdown)&lt;/code&gt; を呼び出して終了するように子プロセスに指示し、終了信号が戻るのを待つことを意味します。指定された時間内に終了シグナルを受信しない場合、子プロセスは &lt;code&gt;exit(Child, kill)&lt;/code&gt; を使用して無条件に終了します。</target>
        </trans-unit>
        <trans-unit id="dabb549e21a83ec6de830a51776d90cd83956482" translate="yes" xml:space="preserve">
          <source>An integer value must be at least 6000 as required by RFC 3539. Defaults to 30000.</source>
          <target state="translated">整数値は、RFC 3539 で要求されているように 6000 以上でなければなりません。デフォルトは 30000 です。</target>
        </trans-unit>
        <trans-unit id="d78dcbf8380694136f9fe0e5e3000d89748b331e" translate="yes" xml:space="preserve">
          <source>An integer() =&amp;lt; byte_size(Replacement)</source>
          <target state="translated">integer（）= &amp;lt;byte_size（Replacement）</target>
        </trans-unit>
        <trans-unit id="eae8aee5e13d9ea04bc6a6da3331604fadfde37c" translate="yes" xml:space="preserve">
          <source>An integer, defaults to 10.</source>
          <target state="translated">整数で、デフォルトは 10 です。</target>
        </trans-unit>
        <trans-unit id="aaa8bce129155fc26fcd48a021b1aba6aab1fe3e" translate="yes" xml:space="preserve">
          <source>An interesting case is if the client terminates before the server links to it. This is taken care of because linking to a non-existent process causes an exit signal, &lt;code&gt;{'EXIT',From,noproc}&lt;/code&gt;, to be automatically generated. This is as if the process terminated immediately after the link operation.</source>
          <target state="translated">興味深いケースは、サーバーがリンクする前にクライアントが終了した場合です。存在しないプロセスにリンクすると、終了信号 &lt;code&gt;{'EXIT',From,noproc}&lt;/code&gt; が自動的に生成されるため、これは処理されます。これは、リンク操作の直後にプロセスが終了した場合と同様です。</target>
        </trans-unit>
        <trans-unit id="ee03f04c6056f21df390b2f5c06e43f9b491765e" translate="yes" xml:space="preserve">
          <source>An interface to the BEAM file format.</source>
          <target state="translated">BEAMファイルフォーマットへのインターフェース。</target>
        </trans-unit>
        <trans-unit id="4ca4ff078056e9ca1ab23144711d3518ee5bc785" translate="yes" xml:space="preserve">
          <source>An interval timer, that is, a timer created by evaluating any of the functions &lt;code&gt;&lt;a href=&quot;#apply_interval-4&quot;&gt;apply_interval/4&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#send_interval-3&quot;&gt;send_interval/3&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#send_interval-2&quot;&gt;send_interval/2&lt;/a&gt;&lt;/code&gt; is linked to the process to which the timer performs its task.</source>
          <target state="translated">インターバルタイマー、つまり、関数 &lt;code&gt;&lt;a href=&quot;#apply_interval-4&quot;&gt;apply_interval/4&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#send_interval-3&quot;&gt;send_interval/3&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#send_interval-2&quot;&gt;send_interval/2&lt;/a&gt;&lt;/code&gt; を評価することによって作成されたタイマーは、タイマーがタスクを実行するプロセスにリンクされています。</target>
        </trans-unit>
        <trans-unit id="627a27fca6a1a1ae0460efe310199a632e472370" translate="yes" xml:space="preserve">
          <source>An introduction to release handling and an example is provided in &lt;code&gt;OTP Design Principles&lt;/code&gt; in &lt;strong&gt;System Documentation&lt;/strong&gt;.</source>
          <target state="translated">リリース処理の概要と例は、&lt;strong&gt;システムドキュメントの&lt;/strong&gt; &lt;code&gt;OTP Design Principles&lt;/code&gt; れてい&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="287260ebb6db5e5582d099b0dc6bfe58c59eb75e" translate="yes" xml:space="preserve">
          <source>An invalid filter is equivalent to &lt;code&gt;{any,[]}&lt;/code&gt;, a filter that matches no peer.</source>
          <target state="translated">無効なフィルターは、ピアに一致しないフィルターである &lt;code&gt;{any,[]}&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="9e6dcd0df7d6d68a6b64b4961a4174415586bdf3" translate="yes" xml:space="preserve">
          <source>An invalid option will cause &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; to fail.</source>
          <target state="translated">無効なオプションを指定すると、 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; が失敗します。</target>
        </trans-unit>
        <trans-unit id="76b5573333f8a9fca96e5af38089644ca66d3800" translate="yes" xml:space="preserve">
          <source>An iterator representing the key value associations in a map.</source>
          <target state="translated">マップ内のキー値の関連付けを表すイテレータ。</target>
        </trans-unit>
        <trans-unit id="14321e1cc5b6395a120d907a4630fb98a62c2d1a" translate="yes" xml:space="preserve">
          <source>An object has a DESCRIPTIONS field. The descriptions-field will not be included in the compiled mib by default. In order to get the description, the mib must be compiled with the option &lt;code&gt;description&lt;/code&gt;.</source>
          <target state="translated">オブジェクトにはDESCRIPTIONSフィールドがあります。description-fieldは、デフォルトではコンパイル済みMIBに含まれません。説明を取得するには、MIBをオプションの &lt;code&gt;description&lt;/code&gt; コンパイルする必要があります。</target>
        </trans-unit>
        <trans-unit id="ee729cb9bca371486670bc70823bacf43371b316" translate="yes" xml:space="preserve">
          <source>An object is an instance of a class. An object set is a set containing objects of a specified class. A definition can look as follows:</source>
          <target state="translated">オブジェクトはクラスのインスタンスです。オブジェクト集合は、指定されたクラスのオブジェクトを含む集合です。定義は次のようになります。</target>
        </trans-unit>
        <trans-unit id="e2b7535d7ca9a8df2239bf3e1efc196455c377ac" translate="yes" xml:space="preserve">
          <source>An object stored on the process heap, called a &lt;strong&gt;ProcBin&lt;/strong&gt;</source>
          <target state="translated">&lt;strong&gt;ProcBin&lt;/strong&gt;と呼ばれる、プロセスヒープに格納されたオブジェクト&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3818f7783f7171a63429c22bb4302a762ba63b49" translate="yes" xml:space="preserve">
          <source>An on-the-fly FIPS mode change would thus have to be performed in a critical section protected from any concurrently running crypto operations. Furthermore in case of failure all crypto calls would have to be disabled from the Erlang or nif code. This would be too much effort put into this not too important feature.</source>
          <target state="translated">その場でFIPSモードを変更するには、同時に実行されているcrypto操作から保護された クリティカルなセクションで実行する必要があります。さらに、失敗した場合はErlangやnifコードからすべてのcryptoコールを無効にしなければなりません。これはあまり重要ではない機能に労力をかけすぎたことになります。</target>
        </trans-unit>
        <trans-unit id="9371fdc5c24675c1a03db0e4febf59f3f93d39d8" translate="yes" xml:space="preserve">
          <source>An opaque continuation.</source>
          <target state="translated">不透明な続き。</target>
        </trans-unit>
        <trans-unit id="9edd135f1be094e9884cdcb725f6b9ae29fe3900" translate="yes" xml:space="preserve">
          <source>An opaque handle identifing a distribution channel.</source>
          <target state="translated">ディストリビューション・チャネルを識別する不透明なハンドル。</target>
        </trans-unit>
        <trans-unit id="8c06de9b53b4d538ad0727d2caa8126ac3202325" translate="yes" xml:space="preserve">
          <source>An opaque term (a tuple) representing a trace token.</source>
          <target state="translated">トレーストークンを表す不透明項(タプル)。</target>
        </trans-unit>
        <trans-unit id="ffe2dac12bf2d4212d4d945b02bbd44d5376742d" translate="yes" xml:space="preserve">
          <source>An opaque term holding prepared code.</source>
          <target state="translated">用意されたコードを保持する不透明な用語。</target>
        </trans-unit>
        <trans-unit id="03858ce2c3f12ebaf6e00e9dd03bc97d803626cb" translate="yes" xml:space="preserve">
          <source>An opaque term returned in, for example, &lt;code&gt;#sctp_paddr_change{}&lt;/code&gt;, which identifies an association for an SCTP socket. The term is opaque except for the special value &lt;code&gt;0&lt;/code&gt;, which has a meaning such as &quot;the whole endpoint&quot; or &quot;all future associations&quot;.</source>
          <target state="translated">&lt;code&gt;#sctp_paddr_change{}&lt;/code&gt; などで返される不透明な用語。SCTPソケットの関連付けを識別します。「エンドポイント全体」や「将来のすべての関連付け」などの意味を持つ特別な値 &lt;code&gt;0&lt;/code&gt; を除いて、この用語は不透明です。</target>
        </trans-unit>
        <trans-unit id="1e180467754d1704f0a1df2c1b8933d6555d46e3" translate="yes" xml:space="preserve">
          <source>An open disk log that is not a distributed disk log is said to be a &lt;strong&gt;local disk log&lt;/strong&gt;. A local disk log is only accessible from the node where the disk log process runs, whereas a distributed disk log is accessible from all nodes in the Erlang system, except for those nodes where a local disk log with the same name as the distributed disk log exists. All processes on nodes that have access to a local or distributed disk log can log items or otherwise change, inspect, or close the log.</source>
          <target state="translated">分散ディスクログではないオープンディスクログは、&lt;strong&gt;ローカルディスクログ&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。ローカルディスクログには、ディスクログプロセスが実行されているノードからのみアクセスできますが、分散ディスクログには、Erlangシステムのすべてのノードからアクセスできます。ただし、ローカルディスクログが分散ディスクログと同じ名前のノードは除きます。存在します。ローカルまたは分散ディスクログにアクセスできるノード上のすべてのプロセスは、アイテムをログに記録したり、その他の方法でログを変更、検査、または閉じることができます。</target>
        </trans-unit>
        <trans-unit id="663c631411ce98e587cb31bbdd92c54b2f404346" translate="yes" xml:space="preserve">
          <source>An opening curly bracket that appears in a position where a quantifier is not allowed, or one that does not match the syntax of a quantifier, is taken as a literal character. For example, {,6} is not a quantifier, but a literal string of four characters.</source>
          <target state="translated">量詞が許可されていない位置に現れた中括弧や、量詞の構文と一致しない開括弧は、リテラル文字として扱われます。例えば、{,6}は量詞ではなく、4文字のリテラル文字列です。</target>
        </trans-unit>
        <trans-unit id="6d91a90e980eb6fd08ac0210bb0e415b4c7d6aec" translate="yes" xml:space="preserve">
          <source>An opening square bracket introduces a character class, terminated by a closing square bracket. A closing square bracket on its own is not special by default. However, if option &lt;code&gt;PCRE_JAVASCRIPT_COMPAT&lt;/code&gt; is set, a lone closing square bracket causes a compile-time error. If a closing square bracket is required as a member of the class, it is to be the first data character in the class (after an initial circumflex, if present) or escaped with a backslash.</source>
          <target state="translated">開き角括弧は文字クラスを導入し、閉じ角括弧で終了します。閉じ角括弧自体は、デフォルトでは特別ではありません。ただし、オプション &lt;code&gt;PCRE_JAVASCRIPT_COMPAT&lt;/code&gt; が設定されている場合、閉じ角括弧が1 つしかないと、コンパイル時エラーが発生します。閉じ角かっこがクラスのメンバーとして必要な場合、それはクラスの最初のデータ文字（最初のサーカムフレックスがある場合）になるか、バックスラッシュでエスケープされます。</target>
        </trans-unit>
        <trans-unit id="421ee4a2487ab9d284a55e10a7feef99df36fe1c" translate="yes" xml:space="preserve">
          <source>An operator &lt;code&gt;Op/A&lt;/code&gt; is called (this is handled as a call to function &lt;code&gt;erlang:Op/A&lt;/code&gt;).</source>
          <target state="translated">オペレーター &lt;code&gt;Op/A&lt;/code&gt; が呼び出されます（これは関数 &lt;code&gt;erlang:Op/A&lt;/code&gt; の呼び出しとして処理されます）。</target>
        </trans-unit>
        <trans-unit id="e3b3ea6fc52831c5fd41836eff34ba6b00be455a" translate="yes" xml:space="preserve">
          <source>An option change within a subpattern (see section &lt;code&gt;&lt;a href=&quot;#sect11&quot;&gt;Subpatterns&lt;/a&gt;&lt;/code&gt;) affects only that part of the subpattern that follows it. So, the following matches abc and aBc and no other strings (assuming &lt;code&gt;caseless&lt;/code&gt; is not used):</source>
          <target state="translated">サブパターン内のオプションの変更は、（セクションを参照 &lt;code&gt;&lt;a href=&quot;#sect11&quot;&gt;Subpatterns&lt;/a&gt;&lt;/code&gt; ）、それを次のサブパターンの部分のみに影響します。だから、次の試合のABCとABCなし他の文字列（仮定 &lt;code&gt;caseless&lt;/code&gt; 使用されていません）：</target>
        </trans-unit>
        <trans-unit id="551e2c1420f8fdac698ff16d393dbd32e2b136d1" translate="yes" xml:space="preserve">
          <source>An option is to have table columns that are not visible through the SNMP protocol. These columns must be the last columns of the table. In the previous example, the SNMP table could have columns &lt;code&gt;department&lt;/code&gt; and &lt;code&gt;name&lt;/code&gt; only. The application could then use column &lt;code&gt;telno&lt;/code&gt; internally, but it would not be visible to the SNMP managers.</source>
          <target state="translated">オプションは、SNMPプロトコルを介して表示されないテーブル列を持つことです。これらの列は、テーブルの最後の列でなければなりません。前の例では、SNMPテーブルに &lt;code&gt;department&lt;/code&gt; と &lt;code&gt;name&lt;/code&gt; のみの列を含めることができます。その後、アプリケーションは列 &lt;code&gt;telno&lt;/code&gt; を内部で使用できますが、SNMPマネージャーには表示されません。</target>
        </trans-unit>
        <trans-unit id="251d94f1b858e81b3828d5510ef8d65b4159fa2d" translate="yes" xml:space="preserve">
          <source>An optional sign character is expected. A sign character &lt;code&gt;-&lt;/code&gt; gives return value &lt;code&gt;-1&lt;/code&gt;. Sign character &lt;code&gt;+&lt;/code&gt; or none gives &lt;code&gt;1&lt;/code&gt;. The field width parameter is ignored. Leading whitespace characters are not skipped.</source>
          <target state="translated">オプションの記号文字が必要です。符号文字 &lt;code&gt;-&lt;/code&gt; 戻り値 &lt;code&gt;-1&lt;/code&gt; を返します。符号文字 &lt;code&gt;+&lt;/code&gt; またはnoneは &lt;code&gt;1&lt;/code&gt; を返します。フィールド幅パラメーターは無視されます。先頭の空白文字はスキップされません。</target>
        </trans-unit>
        <trans-unit id="5bd063d57db649e289c855dd3e2315e3fa45b28a" translate="yes" xml:space="preserve">
          <source>An ordinary send operation has occurred and &lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; contains the pid of the recipient. The message is in &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt;.</source>
          <target state="translated">通常の送信操作が発生し、 &lt;code&gt;emsg-&amp;gt;to&lt;/code&gt; に受信者のPIDが含まれています。メッセージは &lt;code&gt;emsg-&amp;gt;msg&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="e1d95c4d5591cafb0876b899034ba6f76ed65f97" translate="yes" xml:space="preserve">
          <source>An outbound Diameter message.</source>
          <target state="translated">送信されたDiameterメッセージ。</target>
        </trans-unit>
        <trans-unit id="1e88996446c45983e274f354d9264bc09768f004" translate="yes" xml:space="preserve">
          <source>An overview and summary log file for one or more test suites.</source>
          <target state="translated">1 つ以上のテストスイートの概要と要約ログファイル。</target>
        </trans-unit>
        <trans-unit id="07c751adb15fe1a4d90ad6b7ab4efbae14d0517a" translate="yes" xml:space="preserve">
          <source>An positive integer, Current default is 1.</source>
          <target state="translated">正の整数で、現在のデフォルトは1です。</target>
        </trans-unit>
        <trans-unit id="787be85125e87b09b59e0cb657acd9746aadc985" translate="yes" xml:space="preserve">
          <source>An small receive buffer may result in a peer having to resend incoming messages: set the &lt;code&gt;inet(3)&lt;/code&gt; option &lt;code&gt;recbuf&lt;/code&gt; to increase the buffer size.</source>
          <target state="translated">受信バッファーが小さいと、ピアが着信メッセージを再送信しなければならなくなる可能性があります &lt;code&gt;recbuf&lt;/code&gt; &lt;code&gt;inet(3)&lt;/code&gt; オプションのrecbufを設定して、バッファーサイズを増やします。</target>
        </trans-unit>
        <trans-unit id="b84da375fbfec2799e71fb40dea34b2a15da15f8" translate="yes" xml:space="preserve">
          <source>An small send buffer may result in outgoing messages being discarded: set the &lt;code&gt;inet(3)&lt;/code&gt; option &lt;code&gt;sndbuf&lt;/code&gt; to increase the buffer size.</source>
          <target state="translated">送信バッファーが小さいと、送信メッセージが破棄される場合があります &lt;code&gt;sndbuf&lt;/code&gt; &lt;code&gt;inet(3)&lt;/code&gt; オプションのsndbufを設定して、バッファーサイズを増やします。</target>
        </trans-unit>
        <trans-unit id="d96da95c5f83e85028d2b14bb4d255a0e3e94e02" translate="yes" xml:space="preserve">
          <source>An unanchored pattern is required to match before or at the first newline in the subject string, although the matched text can continue over the newline.</source>
          <target state="translated">サブジェクト文字列の最初の改行の前かその位置でマッチする必要がありますが、マッチしたテキストは改行を超えて続けることができます。</target>
        </trans-unit>
        <trans-unit id="4b306841248c236a72e8f0555640ea69d77d6059" translate="yes" xml:space="preserve">
          <source>An unpacked release can be &lt;strong&gt;installed&lt;/strong&gt;. The release handler then evaluates the instructions in &lt;code&gt;relup&lt;/code&gt;, step by step:</source>
          <target state="translated">解凍されたリリースを&lt;strong&gt;インストール&lt;/strong&gt;できます。次に、リリースハンドラは &lt;code&gt;relup&lt;/code&gt; の指示を段階的に評価します。</target>
        </trans-unit>
        <trans-unit id="e2a7a24dafaa1825d952fc1c97adf9898005d178" translate="yes" xml:space="preserve">
          <source>An unsigned integer in base 2-36 is expected. The field width parameter is used to specify base. Leading whitespace characters are not skipped.</source>
          <target state="translated">ベース 2-36 の符号なし整数が想定されます。フィールド幅パラメータは、ベースを指定するために使用されます。先頭の空白文字はスキップされません。</target>
        </trans-unit>
        <trans-unit id="5286dbe6f7d10b81b53f17ba799c7e96413f6797" translate="yes" xml:space="preserve">
          <source>An unsigned integer type to be used as &lt;code&gt;size_t&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;size_t&lt;/code&gt; として使用される符号なし整数型。</target>
        </trans-unit>
        <trans-unit id="e3acdebb60e03e4a5883afd990fc02df22667fa4" translate="yes" xml:space="preserve">
          <source>An unsigned number specifies an absolute reference without the ambiguity that is present in the older syntax. It is also useful when literal digits follow the reference. A negative number is a relative reference. Consider the following example:</source>
          <target state="translated">符号なしの数値は、古い構文のような曖昧さを伴わない絶対参照を指定します。また、リテラル数字が参照に続く場合にも便利です。負の数は相対参照です。次の例を考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="a5a2acb9415f75900acb288ec02a5216db6932a2" translate="yes" xml:space="preserve">
          <source>An unsuccessful parse results in an error, which may be a tuple &lt;code&gt;{error,Reason}&lt;/code&gt; or an exit: &lt;code&gt;{'EXIT',Reason}&lt;/code&gt;. According to the XML 1.0 standard there are &lt;code&gt;fatal error&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; situations. The fatal errors &lt;strong&gt;must&lt;/strong&gt; be detected by a conforming parser while an error &lt;strong&gt;may&lt;/strong&gt; be detected. Both categories of errors are reported as fatal errors by this version of xmerl, most often as an exit.</source>
          <target state="translated">解析に失敗するとエラーが発生します。これは、タプル &lt;code&gt;{error,Reason}&lt;/code&gt; または終了： &lt;code&gt;{'EXIT',Reason}&lt;/code&gt; ます。XML 1.0標準によれば、 &lt;code&gt;fatal error&lt;/code&gt; と &lt;code&gt;error&lt;/code&gt; 状況があります。致命的なエラー&lt;strong&gt;は&lt;/strong&gt;、エラーが検出される&lt;strong&gt;可能性&lt;/strong&gt;がある間に、適合パーサーによって検出される&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。両方のカテゴリのエラーは、このバージョンのxmerlによって致命的なエラーとして報告され、ほとんどの場合、出口として報告されます。</target>
        </trans-unit>
        <trans-unit id="7163f714c0d7d3d9c32d044b0d111ec28a619786" translate="yes" xml:space="preserve">
          <source>An unsuccessful parse returns &lt;code&gt;fail&lt;/code&gt;.</source>
          <target state="translated">失敗した解析は &lt;code&gt;fail&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="02f4b27ab4513330d46be679798a210b6836a2bb" translate="yes" xml:space="preserve">
          <source>Analogous to &lt;code&gt;file/1&lt;/code&gt;, but takes a list of forms (in the Erlang abstract format representation) as first argument. Option &lt;code&gt;binary&lt;/code&gt; is implicit, that is, no object code file is produced. For options that normally produce a listing file, such as 'E', the internal format for that compiler pass (an Erlang term, usually not a binary) is returned instead of a binary.</source>
          <target state="translated">&lt;code&gt;file/1&lt;/code&gt; に似ていますが、フォームのリスト（Erlang抽象フォーマット表現）を最初の引数として受け取ります。オプション &lt;code&gt;binary&lt;/code&gt; は暗黙的です。つまり、オブジェクトコードファイルは作成されません。通常「E」などのリストファイルを生成するオプションの場合、そのコンパイラパスの内部形式（Erlang用語、通常はバイナリではない）がバイナリではなく返されます。</target>
        </trans-unit>
        <trans-unit id="3cfe04f04027764dce50d28f04c6ecdc62b2192c" translate="yes" xml:space="preserve">
          <source>Analyses raw profile data in the &lt;code&gt;fprof&lt;/code&gt; server. If called while there is no raw profile data available, &lt;code&gt;{error, no_profile}&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; サーバーの未加工のプロファイルデータを分析します。利用可能な生のプロファイルデータがないときに呼び出された場合、 &lt;code&gt;{error, no_profile}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="89317b6eabbaf1e93c0ba769bafe3e74241cb74f" translate="yes" xml:space="preserve">
          <source>Analysing; the raw profile data is sorted and dumped in text format either to file or console.</source>
          <target state="translated">解析:生のプロファイルデータはソートされ、テキスト形式でファイルまたはコンソールにダンプされます。</target>
        </trans-unit>
        <trans-unit id="d2cf6f5074202c6dffeb5df464d0d684dc5098ed" translate="yes" xml:space="preserve">
          <source>Analysing; the raw profile data is sorted, filtered and dumped in text format either to file or console. The text format intended to be both readable for a human reader, as well as parsable with the standard erlang parsing tools.</source>
          <target state="translated">解析;生のプロファイルデータはソートされ、フィルタリングされ、テキスト形式でファイルかコンソールに出力されます。このテキストフォーマットは、人間が読んでも読めるように、また標準的なエルラン解析ツールで解析できるようにすることを意図しています。</target>
        </trans-unit>
        <trans-unit id="4263863a7deae978003d2e013055bda2bff811e8" translate="yes" xml:space="preserve">
          <source>Analysis and Utility Functions for Instrumentation</source>
          <target state="translated">計装用の解析機能とユーティリティ機能</target>
        </trans-unit>
        <trans-unit id="33f45b6fb7384ec22cc9390f7b457147372d66b4" translate="yes" xml:space="preserve">
          <source>Analysis of type &lt;code&gt;calls&lt;/code&gt; is used to find out how many times something has been called and is represented by an integer &lt;code&gt;Calls&lt;/code&gt;.</source>
          <target state="translated">タイプ &lt;code&gt;calls&lt;/code&gt; 分析は、何かが呼び出された回数を見つけるために使用され、整数 &lt;code&gt;Calls&lt;/code&gt; で表されます。</target>
        </trans-unit>
        <trans-unit id="48073b1fc4f77f2b869e441fa62a40b84feeabf7" translate="yes" xml:space="preserve">
          <source>Analysis of type &lt;code&gt;coverage&lt;/code&gt; is used to find out how much of the code has been executed and how much has not been executed. Coverage is represented by a tuple &lt;code&gt;{Cov,NotCov}&lt;/code&gt;, where &lt;code&gt;Cov&lt;/code&gt; is the number of executable lines that have been executed at least once and &lt;code&gt;NotCov&lt;/code&gt; is the number of executable lines that have not been executed.</source>
          <target state="translated">タイプ &lt;code&gt;coverage&lt;/code&gt; 分析は、実行されたコードの量と実行されていないコードの量を見つけるために使用されます。カバレッジは、タプル &lt;code&gt;{Cov,NotCov}&lt;/code&gt; で表されます。ここで、 &lt;code&gt;Cov&lt;/code&gt; は少なくとも1回実行された実行可能行の数であり、 &lt;code&gt;NotCov&lt;/code&gt; は実行されていない実行可能行の数です。</target>
        </trans-unit>
        <trans-unit id="28ba17ebd62463c58ee41d92b0a1a95c3083533c" translate="yes" xml:space="preserve">
          <source>Analyzed Modules.</source>
          <target state="translated">分析されたモジュール。</target>
        </trans-unit>
        <trans-unit id="460a405a1e58156272bea6a12fd732a955bce079" translate="yes" xml:space="preserve">
          <source>Analyzes a &quot;source code form&quot; node. If &lt;code&gt;Node&lt;/code&gt; is a &quot;form&quot; type (cf. &lt;code&gt;erl_syntax:is_form/1&lt;/code&gt;), the returned value is a tuple &lt;code&gt;{Type, Info}&lt;/code&gt; where &lt;code&gt;Type&lt;/code&gt; is the node type and &lt;code&gt;Info&lt;/code&gt; depends on &lt;code&gt;Type&lt;/code&gt;, as follows:</source>
          <target state="translated">「ソースコードフォーム」ノードを分析します。場合 &lt;code&gt;Node&lt;/code&gt; 「フォーム」タイプである（参照 &lt;code&gt;erl_syntax:is_form/1&lt;/code&gt; ）、戻り値はタプル &lt;code&gt;{Type, Info}&lt;/code&gt; &lt;code&gt;Type&lt;/code&gt; ノード・タイプであり、 &lt;code&gt;Info&lt;/code&gt; 依存する &lt;code&gt;Type&lt;/code&gt; は、次のように：</target>
        </trans-unit>
        <trans-unit id="70965802de1cdb6b126e1b8a48df610079f9270c" translate="yes" xml:space="preserve">
          <source>Analyzes a sequence of &quot;program forms&quot;. The given &lt;code&gt;Forms&lt;/code&gt; may be a single syntax tree of type &lt;code&gt;form_list&lt;/code&gt;, or a list of &quot;program form&quot; syntax trees. The returned value is a list of pairs &lt;code&gt;{Key, Info}&lt;/code&gt;, where each value of &lt;code&gt;Key&lt;/code&gt; occurs at most once in the list; the absence of a particular key indicates that there is no well-defined value for that key.</source>
          <target state="translated">「プログラム形式」のシーケンスを分析します。指定された &lt;code&gt;Forms&lt;/code&gt; は、 &lt;code&gt;form_list&lt;/code&gt; タイプの単一の構文ツリー、または「プログラムフォーム」構文ツリーのリストです。戻り値はペアのリスト &lt;code&gt;{Key, Info}&lt;/code&gt; 。ここで、 &lt;code&gt;Key&lt;/code&gt; の各値はリスト内で最大1回発生します。特定のキーがない場合は、そのキーに明確に定義された値がないことを示しています。</target>
        </trans-unit>
        <trans-unit id="125ee5a1deaa5b8939564769889b333464e04925" translate="yes" xml:space="preserve">
          <source>Analyzes an attribute node. If &lt;code&gt;Node&lt;/code&gt; represents a preprocessor directive, the atom &lt;code&gt;preprocessor&lt;/code&gt; is returned. Otherwise, if &lt;code&gt;Node&lt;/code&gt; represents a module attribute &quot;&lt;code&gt;-&amp;lt;em&amp;gt;Name&amp;lt;/em&amp;gt;...&lt;/code&gt;&quot;, a tuple &lt;code&gt;{Name, Info}&lt;/code&gt; is returned, where &lt;code&gt;Info&lt;/code&gt; depends on &lt;code&gt;Name&lt;/code&gt;, as follows:</source>
          <target state="translated">属性ノードを分析します。 &lt;code&gt;Node&lt;/code&gt; がプリプロセッサディレクティブを表す場合、atom &lt;code&gt;preprocessor&lt;/code&gt; が返されます。それ以外の場合、 &lt;code&gt;Node&lt;/code&gt; がモジュール属性「 &lt;code&gt;-&amp;lt;em&amp;gt;Name&amp;lt;/em&amp;gt;...&lt;/code&gt; 」を表す場合、次のように、タプル &lt;code&gt;{Name, Info}&lt;/code&gt; が返されます &lt;code&gt;Info&lt;/code&gt; は &lt;code&gt;Name&lt;/code&gt; に依存します。</target>
        </trans-unit>
        <trans-unit id="ef0e889da6c5673f0c6c3783750b01ddef2430db" translate="yes" xml:space="preserve">
          <source>Anchoring a regular expression with &lt;code&gt;^&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; is not implemented in the current version of Leex and just generates a parse error.</source>
          <target state="translated">&lt;code&gt;^&lt;/code&gt; と &lt;code&gt;$&lt;/code&gt; を使用した正規表現のアンカーは、現在のバージョンのLeexでは実装されておらず、解析エラーを生成するだけです。</target>
        </trans-unit>
        <trans-unit id="5aace8ed00b60bb7e100a0b020b8edb7ad2f3f46" translate="yes" xml:space="preserve">
          <source>And Erlang can, for example, be started as follows:</source>
          <target state="translated">そしてErlangは、例えば以下のように起動することができます。</target>
        </trans-unit>
        <trans-unit id="b8f34731c7287aa9d542ce40b48dcd5e89055c21" translate="yes" xml:space="preserve">
          <source>And Fred logs on at c3@gollum:</source>
          <target state="translated">そしてフレッドはc3@gollumでログオン。</target>
        </trans-unit>
        <trans-unit id="ad418175758dc89c620d8f9c8bf36148160d3cc4" translate="yes" xml:space="preserve">
          <source>And a callback module &lt;code&gt;ch2.erl&lt;/code&gt;:</source>
          <target state="translated">そしてコールバックモジュール &lt;code&gt;ch2.erl&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="bc42de5f14df63fba8158204084452c3de1e9550" translate="yes" xml:space="preserve">
          <source>And a message is sent to &lt;code&gt;mess_client&lt;/code&gt;:</source>
          <target state="translated">そしてメッセージが &lt;code&gt;mess_client&lt;/code&gt; に送信されます：</target>
        </trans-unit>
        <trans-unit id="f85832be1eb32b29f34ce60cf06e70f7454181cc" translate="yes" xml:space="preserve">
          <source>And a registered process &lt;code&gt;call_server&lt;/code&gt; with &lt;code&gt;Pid == &amp;lt;0.31.0&amp;gt;&lt;/code&gt; like this:</source>
          <target state="translated">And a registered process &lt;code&gt;call_server&lt;/code&gt; with &lt;code&gt;Pid == &amp;lt;0.31.0&amp;gt;&lt;/code&gt; like this:</target>
        </trans-unit>
        <trans-unit id="016bfa826d5a0a1dc763d9d701f8d84a2f10cb83" translate="yes" xml:space="preserve">
          <source>And finally a print-out of the entire internal form:</source>
          <target state="translated">そして、最後に内部フォーム全体のプリントアウト。</target>
        </trans-unit>
        <trans-unit id="2dce29dbbed23249542b78338df490da31ae18ce" translate="yes" xml:space="preserve">
          <source>And for 32 bit MSYS2:</source>
          <target state="translated">そして32ビットのMSYS2の場合。</target>
        </trans-unit>
        <trans-unit id="18268da8563e564ff18a86c591d17c9624d33b67" translate="yes" xml:space="preserve">
          <source>And for &lt;code&gt;id_key_purpose()&lt;/code&gt;:</source>
          <target state="translated">And for &lt;code&gt;id_key_purpose()&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="768d8655abda5968a013c7a5532efc554753aa5e" translate="yes" xml:space="preserve">
          <source>And for a general range, with &lt;code&gt;N = 1&lt;/code&gt; for &lt;code&gt;exrop&lt;/code&gt;, and &lt;code&gt;N = 3&lt;/code&gt; for &lt;code&gt;exs1024s&lt;/code&gt;:</source>
          <target state="translated">And for a general range, with &lt;code&gt;N = 1&lt;/code&gt; for &lt;code&gt;exrop&lt;/code&gt; , and &lt;code&gt;N = 3&lt;/code&gt; for &lt;code&gt;exs1024s&lt;/code&gt; :</target>
        </trans-unit>
        <trans-unit id="61f39e10b59f839d05bcb5b7c68284a73641ca05" translate="yes" xml:space="preserve">
          <source>And for a table:</source>
          <target state="translated">そして、テーブルのために。</target>
        </trans-unit>
        <trans-unit id="f32a5379f3901539fad45723e5315643f98fc032" translate="yes" xml:space="preserve">
          <source>And in, for example, a test suite or a &lt;code&gt;Common Test Hook&lt;/code&gt; function:</source>
          <target state="translated">And in, for example, a test suite or a &lt;code&gt;Common Test Hook&lt;/code&gt; function:</target>
        </trans-unit>
        <trans-unit id="b39e800fe601dd23ff96f3b954343b70886eba71" translate="yes" xml:space="preserve">
          <source>And now calculate the factorial of 4.</source>
          <target state="translated">そして今度は4の倍数を計算します。</target>
        </trans-unit>
        <trans-unit id="ff53b326c9030dfc8cca6e6eeea89ed1bca8b120" translate="yes" xml:space="preserve">
          <source>And so on. This is an example of &quot;lazy embedding&quot;.</source>
          <target state="translated">といった具合に。怠惰な埋め込み」の例です。</target>
        </trans-unit>
        <trans-unit id="3d04ebfadc776eff044e9ab17fb00bbb3672b0de" translate="yes" xml:space="preserve">
          <source>And some more missing time can be explained by the fact that &lt;code&gt;prim_file:open_int/4&lt;/code&gt; both calls &lt;code&gt;prim_file:drv_command/2&lt;/code&gt; directly as well as through &lt;code&gt;prim_file:open_int_setopts/3&lt;/code&gt;, which complicates the picture.</source>
          <target state="translated">And some more missing time can be explained by the fact that &lt;code&gt;prim_file:open_int/4&lt;/code&gt; both calls &lt;code&gt;prim_file:drv_command/2&lt;/code&gt; directly as well as through &lt;code&gt;prim_file:open_int_setopts/3&lt;/code&gt; , which complicates the picture.</target>
        </trans-unit>
        <trans-unit id="8cf834b4e9e15474add0506b2ca7667f1657b7fc" translate="yes" xml:space="preserve">
          <source>And that the following &lt;code&gt;match_object/2&lt;/code&gt; call:</source>
          <target state="translated">And that the following &lt;code&gt;match_object/2&lt;/code&gt; call:</target>
        </trans-unit>
        <trans-unit id="8f00d04a945f184b6b51fdfb0f37681af77ca055" translate="yes" xml:space="preserve">
          <source>And the &quot;ping&quot; process on kosken is started (from the code above you can see that a parameter of the &lt;code&gt;start_ping&lt;/code&gt; function is the node name of the Erlang system where &quot;pong&quot; is running):</source>
          <target state="translated">そして、koskenの「ping」プロセスが開始されます（上のコードから、 &lt;code&gt;start_ping&lt;/code&gt; 関数のパラメーターが「pong」が実行されているErlangシステムのノード名であることがわかります）。</target>
        </trans-unit>
        <trans-unit id="2693ffaa052313e03eb07995024a1c7e72e3275b" translate="yes" xml:space="preserve">
          <source>And the following is seen on (ping@gollum):</source>
          <target state="translated">そして、(ping@gollum)には以下のようなものが見られます。</target>
        </trans-unit>
        <trans-unit id="ebfe1b54ebc30947606f5975c34d6ebe29e39c89" translate="yes" xml:space="preserve">
          <source>And the programmers view of the same message. First a list of ActionRequest records are constructed and then it is sent with one of the send functions in the API:</source>
          <target state="translated">そして、同じメッセージのプログラマービュー。最初にActionRequestレコードのリストが作成され、APIのsend関数のいずれかで送信されます。</target>
        </trans-unit>
        <trans-unit id="03698758048cbbb8b318d7515b41284328ea7526" translate="yes" xml:space="preserve">
          <source>And the result shows that the Diffie-Hellman Group1 is added at the head of the kex list</source>
          <target state="translated">そして、その結果、Diffie-Hellman Group1がkexリストの先頭に追加されていることを示しています。</target>
        </trans-unit>
        <trans-unit id="677cd0a3c0fb90ee5c86c4248e6d3267ac590429" translate="yes" xml:space="preserve">
          <source>And then start the node like this (line breaks in the command are for readability, and shall not be there when typed):</source>
          <target state="translated">そして、このようにノードを起動します(コマンドの改行は読みやすくするためのもので、入力時には存在しないものとします)。</target>
        </trans-unit>
        <trans-unit id="fde94e3ac5c46972cb11a3709289f9bf4a90825b" translate="yes" xml:space="preserve">
          <source>And waits for a reply from the server.</source>
          <target state="translated">そして、サーバーからの返信を待ちます。</target>
        </trans-unit>
        <trans-unit id="f29a859de34d8206276e4fbe86c78577ef463680" translate="yes" xml:space="preserve">
          <source>And:</source>
          <target state="translated">And:</target>
        </trans-unit>
        <trans-unit id="ad0b0ead53d6b8fc85f3fce651e80aab826cba51" translate="yes" xml:space="preserve">
          <source>Anders Lindgren. The Erlang editing mode for Emacs. Ericsson, 1998.</source>
          <target state="translated">Anders Lindgren。Emacs用のErlang編集モード。エリクソン、1998年。</target>
        </trans-unit>
        <trans-unit id="3739bc370f12e87066b88cf2270e55e1c92949ae" translate="yes" xml:space="preserve">
          <source>Annotate as much of the Erlang VM as is practical.</source>
          <target state="translated">Erlang VMを実用的な範囲でアノテーションします。</target>
        </trans-unit>
        <trans-unit id="42f041d8d82dfcdd94c890b27d2f3e8b347c5ee7" translate="yes" xml:space="preserve">
          <source>Another (and quite common) case is where the regular expression matches all of the subject:</source>
          <target state="translated">もう一つの(そしてかなり一般的な)ケースは、正規表現が主語のすべてにマッチする場合です。</target>
        </trans-unit>
        <trans-unit id="e1571b6f7c9e0a03f663d6275fdaf99d08ee31ce" translate="yes" xml:space="preserve">
          <source>Another (probably more) useful value is to calculate total scheduler utilization weighted against maximum amount of available CPU time:</source>
          <target state="translated">もう一つの(おそらくもっと)有用な値は、利用可能なCPU時間の最大量に対して重み付けされたスケジューラの総利用率を計算することです。</target>
        </trans-unit>
        <trans-unit id="b99bcf832002b6fe6b87b103723c706b4bdbbefb" translate="yes" xml:space="preserve">
          <source>Another case where implicit anchoring is not applied is when the leading .* is inside an atomic group. Once again, a match at the start can fail where a later one succeeds. Consider the following pattern:</source>
          <target state="translated">暗黙のアンカーリングが適用されないもう一つのケースは、先頭の .*がアトミックグループの中にある場合です。この場合も、最初にマッチしたものは失敗し、後にマッチしたものは成功することがあります。次のパターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="b6501d70d60a5f422101c69f878f9e7bfb3e72c3" translate="yes" xml:space="preserve">
          <source>Another change in OTP R16 is that the generated function &lt;code&gt;encode/2&lt;/code&gt; always returns a binary. Function &lt;code&gt;encode/2&lt;/code&gt; for the &lt;code&gt;BER&lt;/code&gt; back end used to return an iolist.</source>
          <target state="translated">OTP R16のもう1つの変更は、生成された関数 &lt;code&gt;encode/2&lt;/code&gt; が常にバイナリを返すことです。機能 &lt;code&gt;encode/2&lt;/code&gt; 用の &lt;code&gt;BER&lt;/code&gt; のバックエンドは、iolistというを返すために使用されます。</target>
        </trans-unit>
        <trans-unit id="b70c5cc0d369162e261ca81ea1735ca702bccb0d" translate="yes" xml:space="preserve">
          <source>Another class of warnings is generated by the compiler during optimization and code generation. They warn about patterns that will never match (such as &lt;code&gt;a=b&lt;/code&gt;), guards that always evaluate to false, and expressions that always fail (such as &lt;code&gt;atom+42&lt;/code&gt;).</source>
          <target state="translated">別のクラスの警告は、最適化とコード生成中にコンパイラーによって生成されます。決して一致しないパターン（ &lt;code&gt;a=b&lt;/code&gt; など）、常にfalseと評価されるガード、および常に失敗する式（ &lt;code&gt;atom+42&lt;/code&gt; など）について警告します。</target>
        </trans-unit>
        <trans-unit id="59b4ff59fcdc233f63b2cf21983b15abb6faf95d" translate="yes" xml:space="preserve">
          <source>Another epmd module may return port and distribution protocol version as well.</source>
          <target state="translated">別の epmd モジュールは、ポートと配布プロトコルのバージョンも返すかもしれません。</target>
        </trans-unit>
        <trans-unit id="ea09d8fd71909463182da1b49dfda6ea71b82be5" translate="yes" xml:space="preserve">
          <source>Another example is provided in the discussion of DEFINE earlier.</source>
          <target state="translated">別の例は、先ほどの DEFINE の議論にあります。</target>
        </trans-unit>
        <trans-unit id="3ea9622b1ad7af37a9c244233dff71af29dca1a6" translate="yes" xml:space="preserve">
          <source>Another example is the accented characters, where the same glyph has two different representations. The Swedish letter &quot;&amp;ouml;&quot; is one example. The Unicode standard has a code point for it, but you can also write it as &quot;o&quot; followed by &quot;U+0308&quot; (Combining Diaeresis, with the simplified meaning that the last letter is to have &quot;&amp;uml;&quot; above). They have the same glyph, user perceived character. They are for most purposes the same, but have different representations. For example, MacOS X converts all filenames to use Combining Diaeresis, while most other programs (including Erlang) try to hide that by doing the opposite when, for example, listing directories. However it is done, it is usually important to normalize such characters to avoid confusion.</source>
          <target state="translated">別の例はアクセント付き文字で、同じグリフに2つの異なる表現があります。スウェーデン語の文字「&amp;ouml;」はその一例です。 Unicode規格にはコードポイントがありますが、 &quot;o&quot;の後に &quot;U + 0308&quot;と書くこともできます（分音記号を組み合わせたもので、最後の文字が上記の &quot;&amp;uml;&quot;になることを意味します）。彼らは同じグリフ、ユーザーが認識した文字を持っています。ほとんどの目的で同じですが、表現が異なります。たとえば、MacOS Xはすべてのファイル名をCombining Diaeresisを使用するように変換しますが、他のほとんどのプログラム（Erlangを含む）は、ディレクトリをリストするときなど、反対のことを行って非表示にしようとします。それが行われたとしても、混乱を避けるためにそのような文字を正規化することは通常重要です。</target>
        </trans-unit>
        <trans-unit id="dedf5ccdeb6bf446ef7cfb01d8db4c4b042b2078" translate="yes" xml:space="preserve">
          <source>Another example:</source>
          <target state="translated">別の例です。</target>
        </trans-unit>
        <trans-unit id="10e22f420f5fb57de1efd47e3c06ac5d2818764b" translate="yes" xml:space="preserve">
          <source>Another format handler can be used to calculate the time spent by the garbage collector:</source>
          <target state="translated">別のフォーマットハンドラを使用して、ガベージコレクタが費やした時間を計算することができます。</target>
        </trans-unit>
        <trans-unit id="e08d37d65c3f60aefa8f056e068de920de2ce50a" translate="yes" xml:space="preserve">
          <source>Another function, &lt;code&gt;FunctionName&lt;/code&gt;, written in the same module, can be passed as an argument, using the following syntax:</source>
          <target state="translated">同じモジュールで記述された別の関数 &lt;code&gt;FunctionName&lt;/code&gt; は、次の構文を使用して引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="309724e134f98c0df5fbbbce98193626ec467206" translate="yes" xml:space="preserve">
          <source>Another interesting category of test suites is the one checking that fixed bugs do not reoccur. When a bugfix is introduced, a test case that checks for that specific bug is written and submitted to the affected test suites.</source>
          <target state="translated">もう一つの興味深いテストスイートのカテゴリは、修正されたバグが再発しないかどうかをチェックするものです。バグフィックスが導入されると、その特定のバグをチェックするテストケースが書かれ、影響を受けるテストスイートに提出されます。</target>
        </trans-unit>
        <trans-unit id="cb92a0549dc41682e51c74824d96791888dae3f5" translate="yes" xml:space="preserve">
          <source>Another list-valued representation allows a message to be specified as a list whose head is a &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; and whose tail is an &lt;code&gt;&lt;a href=&quot;#avp&quot;&gt;avp()&lt;/a&gt;&lt;/code&gt; list. This representation is used by diameter itself when relaying requests as directed by the return value of a &lt;code&gt;handle_request/3&lt;/code&gt; callback. It differs from the other two in that it bypasses the checks for messages that do not agree with their definitions in the dictionary in question: messages are sent exactly as specified.</source>
          <target state="translated">別のリスト値表現では、メッセージを、先頭が &lt;code&gt;&lt;a href=&quot;#header&quot;&gt;header()&lt;/a&gt;&lt;/code&gt; で末尾が &lt;code&gt;&lt;a href=&quot;#avp&quot;&gt;avp()&lt;/a&gt;&lt;/code&gt; リストであるリストとして指定できます。この表現は、 &lt;code&gt;handle_request/3&lt;/code&gt; コールバックの戻り値によって指示された要求をリレーするときに、直径自体によって使用されます。それは、問題の辞書の定義と一致しないメッセージのチェックをバイパスするという点で他の2つとは異なります。メッセージは指定されたとおりに送信されます。</target>
        </trans-unit>
        <trans-unit id="3bc710dca2b3bdaba9f012e29980c13b5a971099" translate="yes" xml:space="preserve">
          <source>Another not uncommon scenario is to use the &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Out&lt;/a&gt;&lt;/code&gt; to trigger hibernation after a certain time of inactivity. There is also a server start option &lt;code&gt;{hibernate_after, Timeout}&lt;/code&gt; for &lt;code&gt;start/3,4&lt;/code&gt; or &lt;code&gt;start_link/3,4&lt;/code&gt; that may be used to automatically hibernate the server.</source>
          <target state="translated">もう1つの珍しいシナリオは、 &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;Event Time-Out&lt;/a&gt;&lt;/code&gt; を使用して、一定の非アクティブ時間が経過した後に休止状態をトリガーすることです。サーバ起動オプションもあり &lt;code&gt;{hibernate_after, Timeout}&lt;/code&gt; ための &lt;code&gt;start/3,4&lt;/code&gt; 又は &lt;code&gt;start_link/3,4&lt;/code&gt; 自動的にサーバを休止するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="044ae5d76a606877516f83b8c8933abd5c6a7076" translate="yes" xml:space="preserve">
          <source>Another obstacle is that some drivers do not support scrollable cursors which has the effect that the only way to traverse the result set is sequentially, with next, from the first row to the last, and once you pass a row you can not go back. This means that some functions in the interface will not work together with certain drivers. A similar problem is that not all drivers support &quot;row count&quot; for select queries, hence resulting in that the function &lt;code&gt;select_count/[3,4]&lt;/code&gt; will return &lt;code&gt;{ok, undefined}&lt;/code&gt; instead of &lt;code&gt;{ok, NrRows}&lt;/code&gt; where &lt;code&gt;NrRows&lt;/code&gt; is the number of rows in the result set.</source>
          <target state="translated">別の障害は、一部のドライバーがスクロール可能なカーソルをサポートしていないことです。これにより、結果セットをトラバースする唯一の方法は、次の最初の行から最後の行まで順次であり、行を渡すと戻ることができません。これは、インターフェースの一部の機能が特定のドライバーと一緒に機能しないことを意味します。同様の問題は、すべてのドライバーが選択クエリの「行カウント」をサポートしているわけではないため、関数 &lt;code&gt;select_count/[3,4]&lt;/code&gt; が &lt;code&gt;{ok, NrRows}&lt;/code&gt; ではなく &lt;code&gt;{ok, undefined}&lt;/code&gt; を返すということです。ここで、 &lt;code&gt;NrRows&lt;/code&gt; は結果セットの行。</target>
        </trans-unit>
        <trans-unit id="03ee6d9c0afb580323a804d3eab4b79501841ee3" translate="yes" xml:space="preserve">
          <source>Another option is to have an entire Erlang archive in the script. In an archive script, the interpretation of the script header is the same as in a script containing source code. This means that you can make an archive file executable by prepending the file with the lines starting with &lt;code&gt;#!&lt;/code&gt; and &lt;code&gt;%%!&lt;/code&gt; mentioned above. In an archive script, the &lt;code&gt;main/1&lt;/code&gt; function must be exported. By default the &lt;code&gt;main/1&lt;/code&gt; function in the module with the same name as the basename of the &lt;code&gt;escript&lt;/code&gt; file is invoked. This behavior can be overridden by setting flag &lt;code&gt;-escript main Module&lt;/code&gt; as one of the emulator flags. &lt;code&gt;Module&lt;/code&gt; must be the name of a module that has an exported &lt;code&gt;main/1&lt;/code&gt; function. For more information about archives and code loading, see &lt;code&gt;code(3)&lt;/code&gt;.</source>
          <target state="translated">別のオプションは、スクリプトにErlangアーカイブ全体を含めることです。アーカイブスクリプトでは、スクリプトヘッダーの解釈は、ソースコードを含むスクリプトと同じです。つまり、 &lt;code&gt;#!&lt;/code&gt; で始まる行をファイルの先頭に追加することで、アーカイブファイルを実行可能にすることができます。そして &lt;code&gt;%%!&lt;/code&gt; 上記の通り。アーカイブスクリプトでは、 &lt;code&gt;main/1&lt;/code&gt; 関数をエクスポートする必要があります。デフォルトでは、 &lt;code&gt;escript&lt;/code&gt; ファイルのベース名と同じ名前のモジュール内の &lt;code&gt;main/1&lt;/code&gt; 関数が呼び出されます。この動作は、フラグ &lt;code&gt;-escript main Module&lt;/code&gt; をエミュレータフラグの1つとして設定することでオーバーライドできます。 &lt;code&gt;Module&lt;/code&gt; は、エクスポートされた &lt;code&gt;main/1&lt;/code&gt; を持つモジュールの名前でなければなりません関数。アーカイブとコードのロードの詳細については、 &lt;code&gt;code(3)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="4546ea403c4311f977adb2b766d698fe32f245cc" translate="yes" xml:space="preserve">
          <source>Another option is to try to read the whole file in UTF-8 encoding and see if it fails. Here we need to read the file using function &lt;code&gt;io:get_chars/3&lt;/code&gt;, as we have to read characters with a code point &amp;gt; 255:</source>
          <target state="translated">別のオプションは、ファイル全体をUTF-8エンコードで読み取って、失敗するかどうかを確認することです。ここでは、コードポイント&amp;gt; 255の文字を読み取る必要があるため、関数 &lt;code&gt;io:get_chars/3&lt;/code&gt; を使用してファイルを読み取る必要があります。</target>
        </trans-unit>
        <trans-unit id="2021d9cc317b0927635ce1f21baa6d5c5c2fd2c7" translate="yes" xml:space="preserve">
          <source>Another reason to filter the state can be that the state is too large to print, as it fills the error log with uninteresting details.</source>
          <target state="translated">状態をフィルタリングするもう一つの理由は、エラーログを興味のない詳細で埋めてしまうため、状態が大きすぎて印刷できないということも考えられます。</target>
        </trans-unit>
        <trans-unit id="7a115c72c46457e1cc897d74c27eca7f1027cedb" translate="yes" xml:space="preserve">
          <source>Another special case is &lt;code&gt;{message, true}&lt;/code&gt;, which sets the default behavior, as if the function had no match specification; trace message is sent with no extra information (if no other calls to &lt;code&gt;message&lt;/code&gt; are placed before &lt;code&gt;{message, true}&lt;/code&gt;, it is in fact a &quot;noop&quot;).</source>
          <target state="translated">別の特別なケースは &lt;code&gt;{message, true}&lt;/code&gt; 、これはあたかも関数に一致指定がないかのようにデフォルトの動作を設定します。トレースメッセージは追加情報なしで送信されます（ &lt;code&gt;message&lt;/code&gt; への他の呼び出しが &lt;code&gt;{message, true}&lt;/code&gt; 前に配置されていない場合、それは実際には「noop」です）。</target>
        </trans-unit>
        <trans-unit id="b328fda19cc7c09a7238c9e06a0a0739b5922118" translate="yes" xml:space="preserve">
          <source>Another thing that has been added to the messenger is a macro. The file &lt;code&gt;mess_config.hrl&lt;/code&gt; contains the definition:</source>
          <target state="translated">メッセンジャーに追加されたもう1つはマクロです。ファイル &lt;code&gt;mess_config.hrl&lt;/code&gt; には次の定義が含まれています。</target>
        </trans-unit>
        <trans-unit id="99d5f93c71127e50ff2df112ec2940a1427d89fd" translate="yes" xml:space="preserve">
          <source>Another top type is &lt;code&gt;Window&lt;/code&gt; whose subcomponent actions in type &lt;code&gt;Status&lt;/code&gt; and the parts of component &lt;code&gt;buttonList&lt;/code&gt; are to be left undecoded. For this type, the function is named &lt;code&gt;decode__Window_exclusive&lt;/code&gt;. The complete &lt;code&gt;Exclusive_Decode_Instruction&lt;/code&gt; configuration is as follows:</source>
          <target state="translated">もう1つの上位タイプは &lt;code&gt;Window&lt;/code&gt; で、タイプ &lt;code&gt;Status&lt;/code&gt; のサブコンポーネントアクションとコンポーネント &lt;code&gt;buttonList&lt;/code&gt; の部分はデコードされないままになります。このタイプの場合、関数の名前は &lt;code&gt;decode__Window_exclusive&lt;/code&gt; です。完全な &lt;code&gt;Exclusive_Decode_Instruction&lt;/code&gt; 構成は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="13dcc540145f3717c4e3da385edb41a46331941d" translate="yes" xml:space="preserve">
          <source>Another typical overload situation is when the transaction manager cannot commit transactions at the same pace as the applications perform updates of disc resident tables. When this occurs, the message queue of the transaction manager continues to grow until the memory is exhausted or the load decreases.</source>
          <target state="translated">もう一つの典型的な過負荷の状況は、アプリケーションがディスク常駐テーブルの更新を実行するのと同じペースでトランザクションマネージャがトランザクションをコミットできない場合です。これが発生すると、メモリが枯渇するか負荷が減少するまで、トランザクションマネージャのメッセージキューは成長を続けます。</target>
        </trans-unit>
        <trans-unit id="98678e4d7ab8dd43533df21422a00a975cfb7ba2" translate="yes" xml:space="preserve">
          <source>Another use of backslash is for specifying generic character types:</source>
          <target state="translated">バックスラッシュのもう一つの用途は、一般的な文字種を指定する場合です。</target>
        </trans-unit>
        <trans-unit id="d11989cebb406290ee365764c7d5bbc4cda6a5df" translate="yes" xml:space="preserve">
          <source>Another use of resource objects is to create binary terms with user-defined memory management. &lt;code&gt;&lt;a href=&quot;#enif_make_resource_binary&quot;&gt;enif_make_resource_binary&lt;/a&gt;&lt;/code&gt; creates a binary term that is connected to a resource object. The destructor of the resource is called when the binary is garbage collected, at which time the binary data can be released. An example of this can be a binary term consisting of data from a &lt;code&gt;mmap&lt;/code&gt;'ed file. The destructor can then do &lt;code&gt;munmap&lt;/code&gt; to release the memory region.</source>
          <target state="translated">リソースオブジェクトのもう1つの用途は、ユーザー定義のメモリ管理でバイナリ用語を作成することです。 &lt;code&gt;&lt;a href=&quot;#enif_make_resource_binary&quot;&gt;enif_make_resource_binary&lt;/a&gt;&lt;/code&gt; は、リソースオブジェクトに接続されるバイナリ用語を作成します。リソースのデストラクタは、バイナリがガベージコレクションされたときに呼び出され、その時点でバイナリデータを解放できます。この例として、 &lt;code&gt;mmap&lt;/code&gt; されたファイルからのデータで構成されるバイナリ項があります。その後、デストラクタは &lt;code&gt;munmap&lt;/code&gt; を実行してメモリ領域を解放できます。</target>
        </trans-unit>
        <trans-unit id="89a360b85a80ca71d493e71ccdbdd60966421147" translate="yes" xml:space="preserve">
          <source>Another usefull way to debug the agent is to pretty-print the content of all the tables and/or variables handled directly by the agent. This can be done by simply calling:</source>
          <target state="translated">エージェントをデバッグするもう一つの有用な方法は、エージェントによって直接処理されるすべてのテーブルおよび/または変数の内容をきれいに印刷することです。これは単に呼び出すことで行うことができます。</target>
        </trans-unit>
        <trans-unit id="631c1a6022578e3dee77a77d5a201dbaf7fc890e" translate="yes" xml:space="preserve">
          <source>Another way of creating and giving a variable a value is by using the match operator = . So if you write &lt;code&gt;M = 5&lt;/code&gt;, a variable called &lt;code&gt;M&lt;/code&gt; is created with the value 5. If, in the same scope, you then write &lt;code&gt;M = 6&lt;/code&gt;, an error is returned. Try this out in the shell:</source>
          <target state="translated">変数を作成して値を与える別の方法は、一致演算子=を使用することです。したがって、 &lt;code&gt;M = 5&lt;/code&gt; と書くと、値5で &lt;code&gt;M&lt;/code&gt; と呼ばれる変数が作成されます。同じスコープで &lt;code&gt;M = 6&lt;/code&gt; と書くと、エラーが返されます。シェルでこれを試してください：</target>
        </trans-unit>
        <trans-unit id="beaca871bb31a9b7342a385e8665dcccb5f095c3" translate="yes" xml:space="preserve">
          <source>Another way of measuring system load is to divide the number of busy CPU cycles by the total number of CPU cycles. This produces values in the 0-100 range immediately. However, this method hides the fact that a machine can be more or less saturated. CPU utilization is therefore a better name than system load for this measure.</source>
          <target state="translated">システム負荷を測定するもう一つの方法は、ビジー状態のCPUサイクル数をCPUサイクルの合計数で割ることです。これにより、0~100の範囲の値がすぐに得られます。しかし、この方法では、マシンが多かれ少なかれ飽和状態になる可能性があるという事実が隠されています。したがって、この測定にはシステム負荷よりもCPU利用率の方が適しています。</target>
        </trans-unit>
        <trans-unit id="b77873668d8c56ac39491fa5217a49f4134bcf11" translate="yes" xml:space="preserve">
          <source>Another way of tracing from the shell is to explicitly start a &lt;strong&gt;tracer&lt;/strong&gt; and then set the &lt;strong&gt;trace flags&lt;/strong&gt; of your choice on the processes you want to trace, e.g. trace messages and process events:</source>
          <target state="translated">シェルからトレースするもう1つの方法は、&lt;strong&gt;トレーサー&lt;/strong&gt;を明示的に開始してから、トレースするプロセス（トレースメッセージやプロセスイベントなど）に選択した&lt;strong&gt;トレースフラグ&lt;/strong&gt;を設定することです。</target>
        </trans-unit>
        <trans-unit id="4b3ea1157a1e3ea0689f0faf146db56bad7d2042" translate="yes" xml:space="preserve">
          <source>Another way of writing an ASCII space</source>
          <target state="translated">アスキースペースの別の書き方</target>
        </trans-unit>
        <trans-unit id="a5bc6479b6ef5274ab93784eff95e33c9f88ddd5" translate="yes" xml:space="preserve">
          <source>Another way to avoid the ambiguity inherent in the use of digits following a backslash is to use the \g escape sequence. This escape must be followed by an unsigned number or a negative number, optionally enclosed in braces. The following examples are identical:</source>
          <target state="translated">バックスラッシュに続く数字の使用に固有の曖昧さを避けるもう一つの方法は、\g エスケープシーケンスを使用することです。このエスケープの後には、符号なしの数字か負の数字を続け、オプションで中括弧で囲まなければなりません。以下の例は同じです。</target>
        </trans-unit>
        <trans-unit id="f458a6491b77ecc59537584a0547eeea4ea55395" translate="yes" xml:space="preserve">
          <source>Another way to do it is through a convenience macro &lt;code&gt;?HANDLE_COMMON/0&lt;/code&gt;:</source>
          <target state="translated">これを行う別の方法は、便利なマクロ &lt;code&gt;?HANDLE_COMMON/0&lt;/code&gt; を使用することです。</target>
        </trans-unit>
        <trans-unit id="b35642aab3a9386c91529db83078918912ca068a" translate="yes" xml:space="preserve">
          <source>Another way to handle a late time-out can be to not cancel it, but to ignore it if it arrives in a state where it is known to be late.</source>
          <target state="translated">また、タイムアウトが遅れた場合の対処法としては、キャンセルせず、遅れていることがわかっている状態で到着した場合は無視するという方法もあります。</target>
        </trans-unit>
        <trans-unit id="eab5fcb4424189a95f4719598653f6d7d5dc728f" translate="yes" xml:space="preserve">
          <source>Another way to shut down the Erlang system is by entering &lt;code&gt;halt()&lt;/code&gt;:</source>
          <target state="translated">Erlangシステムをシャットダウンする別の方法は、 &lt;code&gt;halt()&lt;/code&gt; を入力することです：</target>
        </trans-unit>
        <trans-unit id="92b1a017090fced695e7f6bcf9c838e8a0d3d945" translate="yes" xml:space="preserve">
          <source>Another way to to profile a specific function is to use &lt;code&gt;lcnt:apply/3&lt;/code&gt; or &lt;code&gt;lcnt:apply/1&lt;/code&gt; which does &lt;code&gt;lcnt:clear/0&lt;/code&gt; before the function and &lt;code&gt;lcnt:collect/0&lt;/code&gt; after its invocation. This method should only be used in micro-benchmarks since it sets &lt;code&gt;copy_save&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for the duration of the function call, which may cause the emulator to run out of memory if attempted under load.</source>
          <target state="translated">特定の関数のプロファイルを作成する別の方法は、 &lt;code&gt;lcnt:apply/3&lt;/code&gt; または &lt;code&gt;lcnt:apply/1&lt;/code&gt; を使用して、関数の前に &lt;code&gt;lcnt:clear/0&lt;/code&gt; を呼び出し、関数の呼び出し後に &lt;code&gt;lcnt:collect/0&lt;/code&gt; を実行することです。このメソッドは、関数呼び出しの間 &lt;code&gt;copy_save&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定するため、マイクロベンチマークでのみ使用する必要があります。これにより、負荷がかかると、エミュレーターがメモリ不足になる可能性があります。</target>
        </trans-unit>
        <trans-unit id="5c508f0c9fa83edd30ab43020e59877671989a88" translate="yes" xml:space="preserve">
          <source>Answer message are constructed by the user, except in the case of some protocol errors, in which case the procedures are followed.</source>
          <target state="translated">回答メッセージは、プロトコルエラーが発生した場合を除き、ユーザが作成します。</target>
        </trans-unit>
        <trans-unit id="f990ff206be9a4e762b0a5b682dfe432e3832419" translate="yes" xml:space="preserve">
          <source>Answers are formulated by the user in most cases. Answers setting the E-bit can be sent by diameter itself in response to a request that cannot be handled by the user.</source>
          <target state="translated">アンサーはほとんどの場合、ユーザが策定する。Eビットを設定したアンサーは、ユーザが処理できないリクエストに応答して、dameter自身が送信することができる。</target>
        </trans-unit>
        <trans-unit id="169733414ac8e9f0faf1ef2e5d16061544324aa9" translate="yes" xml:space="preserve">
          <source>Answers sent by diameter set the E-bit in the Diameter Header. Since RFC 3588 allows only 3xxx result codes in an &lt;code&gt;answer-message&lt;/code&gt;, &lt;code&gt;answer&lt;/code&gt; has the same semantics as &lt;code&gt;answer_3xxx&lt;/code&gt; when the transport in question has been configured with &lt;code&gt;diameter_gen_base_rfc3588&lt;/code&gt; as its common dictionary. Since RFC 6733 allows both 3xxx and 5xxx result codes in an &lt;code&gt;answer-message&lt;/code&gt;, a transport with &lt;code&gt;diameter_gen_base_rfc6733&lt;/code&gt; as its common dictionary does distinguish between &lt;code&gt;answer_3xxx&lt;/code&gt; and &lt;code&gt;answer&lt;/code&gt;.</source>
          <target state="translated">直径によって送信された応答は、DiameterヘッダーのEビットを設定します。RFC 3588は &lt;code&gt;answer-message&lt;/code&gt; で3xxxの結果コードのみを許可するため、問題のトランスポートが共通ディクショナリとして &lt;code&gt;diameter_gen_base_rfc3588&lt;/code&gt; を使用して設定されている場合、 &lt;code&gt;answer&lt;/code&gt; は &lt;code&gt;answer_3xxx&lt;/code&gt; と同じセマンティクスを持ちます。RFC 6733では &lt;code&gt;answer-message&lt;/code&gt; で3xxxと5xxxの両方の結果コードが &lt;code&gt;answer_3xxx&lt;/code&gt; されているため、共通のディクショナリとして &lt;code&gt;diameter_gen_base_rfc6733&lt;/code&gt; を使用するトランスポートはanswer_3xxxと &lt;code&gt;answer&lt;/code&gt; を区別します。</target>
        </trans-unit>
        <trans-unit id="9583537a8ed59cb672cc8682638edb7ea0041ae4" translate="yes" xml:space="preserve">
          <source>Answers with an unknown Hop-by-Hop Identifier are discarded.</source>
          <target state="translated">Hop-by-Hop Identifierが不明な回答は破棄されます。</target>
        </trans-unit>
        <trans-unit id="3e81377569d145d2611633104ee94d8766283535" translate="yes" xml:space="preserve">
          <source>Any &quot;non-word&quot; character</source>
          <target state="translated">任意の「非単語」文字</target>
        </trans-unit>
        <trans-unit id="85b67100ee7b90e2d2abf4839ebeec56e0874f69" translate="yes" xml:space="preserve">
          <source>Any &quot;word&quot; character</source>
          <target state="translated">任意の「単語」の文字</target>
        </trans-unit>
        <trans-unit id="1da1afe530c2a09d5e4de484a6f1c75175270218" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;actions&lt;/a&gt;&lt;/code&gt; returned from this call are handled as if they were appended to the actions returned by the state callback that caused the state entry.</source>
          <target state="translated">任意の &lt;code&gt;&lt;a href=&quot;#type-enter_action&quot;&gt;actions&lt;/a&gt;&lt;/code&gt; この呼び出しから返されたそれらは状態エントリを引き起こした状態コールバックによって返されたアクションに追加されたかのように扱われます。</target>
        </trans-unit>
        <trans-unit id="0b7cf207a939aac0db4a1f7cbab14794dc67dd5e" translate="yes" xml:space="preserve">
          <source>Any &lt;code&gt;{netmask,_}&lt;/code&gt;, &lt;code&gt;{broadaddr,_}&lt;/code&gt;, or &lt;code&gt;{dstaddr,_}&lt;/code&gt; tuples that follow an &lt;code&gt;{addr,_}&lt;/code&gt; tuple concerns that address.</source>
          <target state="translated">任意 &lt;code&gt;{netmask,_}&lt;/code&gt; 、 &lt;code&gt;{broadaddr,_}&lt;/code&gt; 、または &lt;code&gt;{dstaddr,_}&lt;/code&gt; 従うタプル &lt;code&gt;{addr,_}&lt;/code&gt; アドレスタプル懸念を。</target>
        </trans-unit>
        <trans-unit id="9fe20daf09d18f48c6423a6e429a2fc557aba724" translate="yes" xml:space="preserve">
          <source>Any Erlang terms can be passed to a NIF as function arguments and be returned as function return values. The terms are of C-type &lt;code&gt;&lt;a href=&quot;#ERL_NIF_TERM&quot;&gt;ERL_NIF_TERM&lt;/a&gt;&lt;/code&gt; and can only be read or written using API functions. Most functions to read the content of a term are prefixed &lt;code&gt;enif_get_&lt;/code&gt; and usually return &lt;code&gt;true&lt;/code&gt; (or &lt;code&gt;false&lt;/code&gt;) if the term is of the expected type (or not). The functions to write terms are all prefixed &lt;code&gt;enif_make_&lt;/code&gt; and usually return the created &lt;code&gt;ERL_NIF_TERM&lt;/code&gt;. There are also some functions to query terms, like &lt;code&gt;enif_is_atom&lt;/code&gt;, &lt;code&gt;enif_is_identical&lt;/code&gt;, and &lt;code&gt;enif_compare&lt;/code&gt;.</source>
          <target state="translated">Erlangの用語は、関数の引数としてNIFに渡し、関数の戻り値として返すことができます。これらの用語はCタイプの &lt;code&gt;&lt;a href=&quot;#ERL_NIF_TERM&quot;&gt;ERL_NIF_TERM&lt;/a&gt;&lt;/code&gt; であり、API関数を使用してのみ読み取りまたは書き込みを行うことができます。用語の内容を読み取るほとんどの関数には、接頭辞 &lt;code&gt;enif_get_&lt;/code&gt; が付き、用語が期待されるタイプ（またはそうでない場合）の場合、通常は &lt;code&gt;true&lt;/code&gt; （または &lt;code&gt;false&lt;/code&gt; ）を返します。用語を書き込むための関数には、すべて接頭辞 &lt;code&gt;enif_make_&lt;/code&gt; が付き、通常は作成された &lt;code&gt;ERL_NIF_TERM&lt;/code&gt; を返します。 &lt;code&gt;enif_is_atom&lt;/code&gt; 、 &lt;code&gt;enif_is_identical&lt;/code&gt; 、および &lt;code&gt;enif_compare&lt;/code&gt; など、用語を照会するいくつかの関数もあります。</target>
        </trans-unit>
        <trans-unit id="91ee5b553226d8e2804f2a9b1b852b4188f05b90" translate="yes" xml:space="preserve">
          <source>Any Perl &quot;word&quot; character. Matches the same characters as Xan, plus underscore.</source>
          <target state="translated">Perl の任意の &quot;単語&quot; 文字。Xan と同じ文字にアンダースコアを加えたものにマッチします。</target>
        </trans-unit>
        <trans-unit id="2a6ee9049397cf4af2bc8f42c671c9f43f3a14a3" translate="yes" xml:space="preserve">
          <source>Any Perl space character. Matches the same as Xps, except that vertical tab is excluded.</source>
          <target state="translated">Perl の任意のスペース文字。垂直タブが除外されることを除いて、Xps と同じです。</target>
        </trans-unit>
        <trans-unit id="226314c00726c9d0643044e7e14db2c1e0125f64" translate="yes" xml:space="preserve">
          <source>Any Posix space character. Matches the characters tab, line feed, vertical tab, form feed, carriage return, and any other character that has the Z (separator) property.</source>
          <target state="translated">任意の Posix スペース文字。タブ、改行、縦タブ、フォームフィード、キャリッジリターン、および Z (区切り文字)プロパティを持つその他の文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="86c83cd82d7f4cc2cb73a7ce452f11a22f90230a" translate="yes" xml:space="preserve">
          <source>Any SNMP agent must implement the &lt;code&gt;system&lt;/code&gt; group and the &lt;code&gt;snmp&lt;/code&gt; group, defined in MIB-II. The definitions of these groups have changed from SNMPv1 to SNMPv2. MIBs and implementations for both of these versions are Provided in the distribution. The MIB file for SNMPv1 is called STANDARD-MIB, and the corresponding for SNMPv2 is called SNMPv2-MIB. If the agent is configured for SNMPv1 only, the STANDARD-MIB is loaded by default; otherwise, the SNMPv2-MIB is loaded by default. It is possible to override this default behavior, by explicitly loading another version of this MIB, for example, you could choose to implement the union of all objects in these two MIBs.</source>
          <target state="translated">SNMPエージェントは、MIB-IIで定義されている &lt;code&gt;system&lt;/code&gt; グループと &lt;code&gt;snmp&lt;/code&gt; グループを実装する必要があります。これらのグループの定義は、SNMPv1からSNMPv2に変更されました。これらの両方のバージョンのMIBと実装は、ディストリビューションで提供されています。SNMPv1のMIBファイルはSTANDARD-MIBと呼ばれ、対応するSNMPv2はSNMPv2-MIBと呼ばれます。エージェントがSNMPv1のみに設定されている場合、デフォルトでSTANDARD-MIBがロードされます。それ以外の場合、SNMPv2-MIBはデフォルトでロードされます。このMIBの別のバージョンを明示的にロードすることにより、このデフォルトの動作を上書きすることが可能です。たとえば、これら2つのMIBのすべてのオブジェクトの結合を実装することを選択できます。</target>
        </trans-unit>
        <trans-unit id="196d50214eeaa49a69b1974dba346995c28a22e1" translate="yes" xml:space="preserve">
          <source>Any Unicode newline sequence</source>
          <target state="translated">任意の Unicode 改行シーケンス</target>
        </trans-unit>
        <trans-unit id="a65ddd3bdd2944c171915eb7fa336f1a4c035808" translate="yes" xml:space="preserve">
          <source>Any alphanumeric character. Matches characters that have either the L (letter) or the N (number) property.</source>
          <target state="translated">任意の英数字。L (文字)または N (数値)プロパティのいずれかを持つ文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="8e4c53abc141aa6a5505d99af2747ead8bf5f3b8" translate="yes" xml:space="preserve">
          <source>Any argument starting with character &lt;code&gt;+&lt;/code&gt; is interpreted as an &lt;code&gt;&lt;a href=&quot;#emu_flags&quot;&gt;emulator flag&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字 &lt;code&gt;+&lt;/code&gt; で始まる引数は、 &lt;code&gt;&lt;a href=&quot;#emu_flags&quot;&gt;emulator flag&lt;/a&gt;&lt;/code&gt; として解釈されます。</target>
        </trans-unit>
        <trans-unit id="2ec0d985bf2bc312c2013a5109c14aa8377ee3b4" translate="yes" xml:space="preserve">
          <source>Any argument starting with character &lt;code&gt;-&lt;/code&gt; (hyphen) is interpreted as a &lt;code&gt;&lt;a href=&quot;#init_flags&quot;&gt;flag&lt;/a&gt;&lt;/code&gt;, which is to be passed to the Erlang part of the runtime system, more specifically to the &lt;code&gt;init&lt;/code&gt; system process, see &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">文字 &lt;code&gt;-&lt;/code&gt; （ハイフン）で始まる引数はすべて、 &lt;code&gt;&lt;a href=&quot;#init_flags&quot;&gt;flag&lt;/a&gt;&lt;/code&gt; として解釈され、ランタイムシステムのErlang部分に渡されます。具体的には、 &lt;code&gt;init&lt;/code&gt; システムプロセスに渡されます &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="a38632ef9e937e28c7efee903ba40a94fa4e2fdf" translate="yes" xml:space="preserve">
          <source>Any available SSL/TLS option can be specified in an options file, but note that options that take a &lt;code&gt;fun()&lt;/code&gt; has to use the syntax &lt;code&gt;fun Mod:Func/Arity&lt;/code&gt; since a function body can not be compiled when consulting a file.</source>
          <target state="translated">利用可能なSSL / TLSオプションはオプションファイルで指定できますが、 &lt;code&gt;fun()&lt;/code&gt; をとるオプションでは構文 &lt;code&gt;fun Mod:Func/Arity&lt;/code&gt; を使用する必要があることに注意してください。これは、ファイルを参照するときに関数本体をコンパイルできないためです。</target>
        </trans-unit>
        <trans-unit id="01cf19500fd684b4fcd4ae4381bd475d059416c3" translate="yes" xml:space="preserve">
          <source>Any binaries in the input must be encoded with utf8 encoding.</source>
          <target state="translated">入力に含まれるバイナリはすべて utf8 エンコーディングでエンコードされていなければなりません。</target>
        </trans-unit>
        <trans-unit id="d4fbd6641fa6af8908c4acddf8ea7d500dda6804" translate="yes" xml:space="preserve">
          <source>Any character that \p{Nd} matches (decimal digit)</source>
          <target state="translated">\p{Nd}が一致する文字(10進数)。</target>
        </trans-unit>
        <trans-unit id="ea8d8e8635593d775e42e49ce0087f6c13f6687f" translate="yes" xml:space="preserve">
          <source>Any character that \p{Z} or \h or \v</source>
          <target state="translated">Any character that \p{Z}or \h or \vvv</target>
        </trans-unit>
        <trans-unit id="5a07d4df31dba87893c12b1bbe3486e16831b58c" translate="yes" xml:space="preserve">
          <source>Any character that is not a decimal digit</source>
          <target state="translated">10進数以外の文字</target>
        </trans-unit>
        <trans-unit id="a220eeb7e71547f74bdb672a46dbf62304938ae3" translate="yes" xml:space="preserve">
          <source>Any character that is not a horizontal whitespace character</source>
          <target state="translated">横長の空白文字以外の文字</target>
        </trans-unit>
        <trans-unit id="38b05e383aff7b661066a32cce33de8ce1d64c59" translate="yes" xml:space="preserve">
          <source>Any character that is not a vertical whitespace character</source>
          <target state="translated">縦書きの空白文字以外の文字</target>
        </trans-unit>
        <trans-unit id="637eb6003dd0e91f78519cb1c04ebd5b49030962" translate="yes" xml:space="preserve">
          <source>Any character that is not a whitespace character</source>
          <target state="translated">空白文字以外の文字</target>
        </trans-unit>
        <trans-unit id="4f01080c6afb4764ff8a2fd9f3cf18325105c6f2" translate="yes" xml:space="preserve">
          <source>Any character that matches \p{L} or \p{N} matches, plus underscore</source>
          <target state="translated">\p{L}または\p{N}にマッチする文字には、アンダースコアが含まれています。</target>
        </trans-unit>
        <trans-unit id="9e0fc4e31db4954506ff95018d4e32009cec2276" translate="yes" xml:space="preserve">
          <source>Any child process, static or dynamic, can be stopped in accordance with the shutdown specification:</source>
          <target state="translated">静的または動的な子プロセスは、シャットダウン仕様に従って停止することができます。</target>
        </trans-unit>
        <trans-unit id="e61f1827d9b493037b4c65e46ae25e3793bc6166" translate="yes" xml:space="preserve">
          <source>Any decimal digit</source>
          <target state="translated">任意の10進数</target>
        </trans-unit>
        <trans-unit id="319ee56af7d8c4842eef10b32506ec7273db2e2d" translate="yes" xml:space="preserve">
          <source>Any directory structure for development will suffice as long as the released directory structure adhere to the &lt;code&gt;&lt;a href=&quot;#app_dir_released&quot;&gt;description below&lt;/a&gt;&lt;/code&gt;, but it is encouraged that the same directory structure also be used in a development environment. The version number should be omitted from the application directory name since this is an artifact of the release step.</source>
          <target state="translated">リリースされたディレクトリ構造が &lt;code&gt;&lt;a href=&quot;#app_dir_released&quot;&gt;description below&lt;/a&gt;&lt;/code&gt; の説明に準拠している限り、開発用のディレクトリ構造で十分ですが、開発環境でも同じディレクトリ構造を使用することをお勧めします。これはリリース手順の成果物であるため、バージョン番号はアプリケーションディレクトリ名から省略してください。</target>
        </trans-unit>
        <trans-unit id="0f8a0eebe69f32841c1055bf42eb38c869fc05ac" translate="yes" xml:space="preserve">
          <source>Any error responded from ssl:connect/3</source>
          <target state="translated">ssl:connect/3 から応答されたエラーはすべて</target>
        </trans-unit>
        <trans-unit id="dec33b5efd25869658a9a136d55b25ab0eb75ddb" translate="yes" xml:space="preserve">
          <source>Any event cancels an &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; so a zero time event time-out is only generated if the event queue is empty.</source>
          <target state="translated">どのイベントでも &lt;code&gt;&lt;a href=&quot;#type-event_timeout&quot;&gt;event_timeout()&lt;/a&gt;&lt;/code&gt; をキャンセルするため、ゼロタイムイベントタイムアウトは、イベントキューが空の場合にのみ生成されます。</target>
        </trans-unit>
        <trans-unit id="f3230758bd2f1f41e208786128600a644fbcfaad" translate="yes" xml:space="preserve">
          <source>Any event that arrives cancels this time-out. Note that a retried or inserted event counts as arrived. So does a state time-out zero event, if it was generated before this time-out is requested.</source>
          <target state="translated">到着したイベントはすべてこのタイムアウトをキャンセルします。再試行されたイベントや挿入されたイベントは到着したものとしてカウントされることに注意してください。このタイムアウトが要求される前に生成された場合、状態のタイムアウトゼロイベントも同様にカウントされます。</target>
        </trans-unit>
        <trans-unit id="8b1366eda009f3cb3ff94bd016d0c7d4a6262e2b" translate="yes" xml:space="preserve">
          <source>Any existing file &lt;code&gt;ConfigFile&lt;/code&gt; is deleted and a new file is created when &lt;code&gt;write_config/2&lt;/code&gt; is called. Option &lt;code&gt;append&lt;/code&gt; can be used to add something at the end of an existing configuration file, for example, &lt;code&gt;ttb:write_config(ConfigFile,What,[append])&lt;/code&gt;.</source>
          <target state="translated">既存のファイル &lt;code&gt;ConfigFile&lt;/code&gt; はすべて削除され、 &lt;code&gt;write_config/2&lt;/code&gt; が呼び出されると新しいファイルが作成されます。オプション &lt;code&gt;append&lt;/code&gt; を使用して、既存の構成ファイルの最後に何かを追加できます（例 &lt;code&gt;ttb:write_config(ConfigFile,What,[append])&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="566ef8318f6e8dea307d9a0b22e6f9fb3da4fcf5" translate="yes" xml:space="preserve">
          <source>Any field from the default object that is updated is not an integer.</source>
          <target state="translated">デフォルトのオブジェクトから更新されるフィールドはすべて整数ではありません。</target>
        </trans-unit>
        <trans-unit id="633c884f979bcb23bdcf6332835bc8f4a916554f" translate="yes" xml:space="preserve">
          <source>Any file in the archive can be compressed, but to speed up the access of frequently read files, it can be a good idea to store &lt;code&gt;beam&lt;/code&gt; and &lt;code&gt;app&lt;/code&gt; files uncompressed in the archive.</source>
          <target state="translated">アーカイブ内のファイルは圧縮できますが、頻繁に読み取られるファイルへのアクセスを高速化するために、 &lt;code&gt;beam&lt;/code&gt; および &lt;code&gt;app&lt;/code&gt; ファイルを圧縮せずにアーカイブに保存することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c9e92376776fce4af3e899f17a6815d5de8767ca" translate="yes" xml:space="preserve">
          <source>Any further messages sent to the servers, after this function has returned, are received by all servers after this message.</source>
          <target state="translated">この関数が戻った後、サーバに送信されたそれ以上のメッセージは、このメッセージの後にすべてのサーバによって受信されます。</target>
        </trans-unit>
        <trans-unit id="05a7cdc632d004fced39b4b64081edd1072ad277" translate="yes" xml:space="preserve">
          <source>Any help module (that is, regular Erlang module with name not ending with &quot;_SUITE&quot;) that resides in the same test object directory as a suite, which is part of the test, is also automatically compiled. A help module is not mistaken for a test suite (unless it has a &quot;_SUITE&quot; name). All help modules in a particular test object directory are compiled, no matter if all or only particular suites in the directory are part of the test.</source>
          <target state="translated">テストの一部であるスイートと同じテストオブジェクトディレクトリにあるヘルプモジュール(&quot;_SUITE &quot;で終わらない名前の通常のErlangモジュール)も自動的にコンパイルされます。ヘルプモジュールはテストスイートと間違われることはありません(&quot;_SUITE &quot;という名前がない限り)。特定のテストオブジェクトディレクトリにあるすべてのヘルプモジュールは、ディレクトリ内のすべての特定のスイートがテストの一部であるかどうかに関わらず、コンパイルされます。</target>
        </trans-unit>
        <trans-unit id="3a6931e3ecbbcf6123711ba9b45a1b2a389671aa" translate="yes" xml:space="preserve">
          <source>Any horizontal whitespace character</source>
          <target state="translated">任意の水平方向の空白文字</target>
        </trans-unit>
        <trans-unit id="59054d406899b9265407eef94618b3745ddccb9c" translate="yes" xml:space="preserve">
          <source>Any kind of set (also included are the atomic sets).</source>
          <target state="translated">任意の種類の集合(原子集合も含まれます)。</target>
        </trans-unit>
        <trans-unit id="3059e6bd637c2c7edbf7392d90b2b06549a0c4a4" translate="yes" xml:space="preserve">
          <source>Any message from an agent that is not registered is delivered to the &lt;strong&gt;default user&lt;/strong&gt;.</source>
          <target state="translated">登録されていないエージェントからのメッセージは、&lt;strong&gt;デフォルトのユーザーに&lt;/strong&gt;配信され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="9e3cde1fa4436f7ff04b9991cb3b2f50c010632c" translate="yes" xml:space="preserve">
          <source>Any module attribute can be specified. The attributes are stored in the compiled code and can be retrieved by calling &lt;code&gt;Module:module_info(attributes)&lt;/code&gt;, or by using the module &lt;code&gt;beam_lib(3)&lt;/code&gt; in STDLIB.</source>
          <target state="translated">任意のモジュール属性を指定できます。属性はコンパイルされたコードに保存され、 &lt;code&gt;Module:module_info(attributes)&lt;/code&gt; を呼び出すか、 &lt;code&gt;beam_lib(3)&lt;/code&gt; のモジュールBeam_lib（3）を使用して取得できます。</target>
        </trans-unit>
        <trans-unit id="29b8882fa4dee978fed00f1684dc7ee4e8066671" translate="yes" xml:space="preserve">
          <source>Any more option that is applied is passed to the final step when the generated &lt;code&gt;.erl&lt;/code&gt; file is compiled.</source>
          <target state="translated">適用されるオプションは、生成された &lt;code&gt;.erl&lt;/code&gt; ファイルがコンパイルされるときに最後のステップに渡されます。</target>
        </trans-unit>
        <trans-unit id="b639a0e3ab8cf373688218aa41c8bf04708e870b" translate="yes" xml:space="preserve">
          <source>Any node in &lt;code&gt;Tree&lt;/code&gt; whose node type is &lt;code&gt;variable&lt;/code&gt; (see &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt;), and whose list of annotations (see &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt;) contains the atom &lt;code&gt;meta_var&lt;/code&gt;, will remain unchanged in the resulting tree, except that exactly one occurrence of &lt;code&gt;meta_var&lt;/code&gt; is removed from its annotation list.</source>
          <target state="translated">ノードタイプが &lt;code&gt;variable&lt;/code&gt; （ &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; を参照）であり、注釈のリスト（ &lt;code&gt;&lt;a href=&quot;#get_ann-1&quot;&gt;get_ann/1&lt;/a&gt;&lt;/code&gt; を参照）にアトム &lt;code&gt;meta_var&lt;/code&gt; が含まれる &lt;code&gt;Tree&lt;/code&gt; 内のノードは、 &lt;code&gt;meta_var&lt;/code&gt; が1つだけ削除されることを除いて、結果のツリーでは変更されません。その注釈リスト。</target>
        </trans-unit>
        <trans-unit id="12506e60046e3f66a27e9d0f21bb59c5951fbf0d" translate="yes" xml:space="preserve">
          <source>Any nodes created outside of this module must have type tags distinct from those currently defined by this module; see &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; for a complete list.</source>
          <target state="translated">このモジュールの外部で作成されたノードには、このモジュールで現在定義されているものとは異なるタイプタグが必要です。完全なリストについては、 &lt;code&gt;&lt;a href=&quot;#type-1&quot;&gt;type/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="2dd390a9f5c9070fbf0caa7f7decb4d0243c2039" translate="yes" xml:space="preserve">
          <source>Any number of alternatives can appear, and an empty alternative is permitted (matching the empty string). The matching process tries each alternative in turn, from left to right, and the first that succeeds is used. If the alternatives are within a subpattern (defined in section &lt;code&gt;&lt;a href=&quot;#sect11&quot;&gt;Subpatterns&lt;/a&gt;&lt;/code&gt;), &quot;succeeds&quot; means matching the remaining main pattern and the alternative in the subpattern.</source>
          <target state="translated">任意の数の選択肢を表示でき、空の選択肢が許可されます（空の文字列に一致）。マッチングプロセスでは、左から右に順番に各選択肢が試行され、成功したものが最初に使用されます。代替パターンがサブパターン（セクション &lt;code&gt;&lt;a href=&quot;#sect11&quot;&gt;Subpatterns&lt;/a&gt;&lt;/code&gt; 定義）内にある場合、「成功」とは、残りのメインパターンとサブパターンの代替パターンを照合することを意味します。</target>
        </trans-unit>
        <trans-unit id="3b219ac3ab7183b58c39d339b6c5af13a6e6e890" translate="yes" xml:space="preserve">
          <source>Any number of test terms can be declared in sequence. &lt;code&gt;Common Test&lt;/code&gt; compiles by default the terms into one or more tests to be performed in one resulting test run. A term that specifies a set of test cases &quot;swallows&quot; one that only specifies a subset of these cases. For example, the result of merging one term specifying that all cases in suite S are to be executed, with another term specifying only test case X and Y in S, is a test of all cases in S. However, if a term specifying test case X and Y in S is merged with a term specifying case Z in S, the result is a test of X, Y, and Z in S. To disable this behavior, that is, to instead perform each test sequentially in a &quot;script-like&quot; manner, set term &lt;code&gt;merge_tests&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt; in the test specification.</source>
          <target state="translated">テスト用語はいくつでも順番に宣言できます。 &lt;code&gt;Common Test&lt;/code&gt; は、デフォルトで用語を1つ以上のテストにコンパイルして、1回のテスト実行で実行されます。テストケースのセットを指定する用語は、これらのケースのサブセットのみを指定するものを「飲み込み」ます。たとえば、スイートSのすべてのケースを実行することを指定する1つの用語を、SのテストケースXおよびYのみを指定する別の用語とマージすると、Sのすべてのケースのテストになります。ただし、テストを指定する用語の場合SのケースXとYは、SのケースZを指定する用語とマージされます。結果は、SのX、Y、およびZのテストです。この動作を無効にするには、代わりに、「スクリプトと同じように、テスト仕様で用語 &lt;code&gt;merge_tests&lt;/code&gt; を &lt;code&gt;false&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="7f1d0eacfac7695ff6458e838ae9c63e075002a8" translate="yes" xml:space="preserve">
          <source>Any of &lt;code&gt;Pos&lt;/code&gt;, &lt;code&gt;Incr&lt;/code&gt;, &lt;code&gt;Threshold&lt;/code&gt;, or &lt;code&gt;SetValue&lt;/code&gt; is not an integer.</source>
          <target state="translated">任意の &lt;code&gt;Pos&lt;/code&gt; 、 &lt;code&gt;Incr&lt;/code&gt; 、 &lt;code&gt;Threshold&lt;/code&gt; 、または &lt;code&gt;SetValue&lt;/code&gt; 整数ではありません。</target>
        </trans-unit>
        <trans-unit id="a07471bf046332e50c16cdbf9fa2f0e4219c9dce" translate="yes" xml:space="preserve">
          <source>Any of the Boolean options can be set to &lt;code&gt;true&lt;/code&gt; by stating the name of the option. For example, &lt;code&gt;verbose&lt;/code&gt; is equivalent to &lt;code&gt;{verbose, true}&lt;/code&gt;.</source>
          <target state="translated">オプションの名前を指定することにより、ブールオプションのいずれかを &lt;code&gt;true&lt;/code&gt; に設定できます。たとえば、 &lt;code&gt;verbose&lt;/code&gt; は &lt;code&gt;{verbose, true}&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="0d0154918457ea334a0a14f2ca39bfe72abe9e56" translate="yes" xml:space="preserve">
          <source>Any of the newline sequences above, and the Unicode sequences VT (vertical tab, U+000B), FF (formfeed, U+000C), NEL (next line, U+0085), LS (line separator, U+2028), and PS (paragraph separator, U+2029).</source>
          <target state="translated">上記の改行配列のいずれかと、Unicode配列VT (縦タブ、U+000B)、FF (フォームフィード、U+000C)、NEL (次行、U+0085)、LS (行区切り文字、U+2028)、PS (段落区切り文字、U+2029)。</target>
        </trans-unit>
        <trans-unit id="4e36b2886b60e8d8125482994d6c845a19875794" translate="yes" xml:space="preserve">
          <source>Any of the three above</source>
          <target state="translated">上記3つのうちどれか</target>
        </trans-unit>
        <trans-unit id="86ba96738491ceb49b98c521a1260c55ed5485fb" translate="yes" xml:space="preserve">
          <source>Any of the three preceding sequences is be recognized.</source>
          <target state="translated">先行する3つのシーケンスのいずれかが認識されます。</target>
        </trans-unit>
        <trans-unit id="81ac719a424443fef6b057e36ab2fb49dfe28608" translate="yes" xml:space="preserve">
          <source>Any of the three preceding sequences is to be recognized.</source>
          <target state="translated">つの先行配列のいずれかを認識すること。</target>
        </trans-unit>
        <trans-unit id="58b743365bb43cbc12421219d500fe35e8ea844d" translate="yes" xml:space="preserve">
          <source>Any option can be added to the Erlang compiler when compiling the generated Erlang files. Any option unrecognized by the ASN.1 compiler is passed to the Erlang compiler.</source>
          <target state="translated">生成されたErlangファイルをコンパイルするときに、任意のオプションをErlangコンパイラに追加することができます。ASN.1コンパイラが認識しないオプションはErlangコンパイラに渡されます。</target>
        </trans-unit>
        <trans-unit id="d80bad487ffa73c04585c5699f22527d1888dc5c" translate="yes" xml:space="preserve">
          <source>Any other character literally, for example &lt;code&gt;\\&lt;/code&gt; for backslash, &lt;code&gt;\&quot;&lt;/code&gt; for &lt;code&gt;&quot;&lt;/code&gt;.</source>
          <target state="translated">例えば、文字通りそれ以外の文字、 &lt;code&gt;\\&lt;/code&gt; バックスラッシュのため、 &lt;code&gt;\&quot;&lt;/code&gt; のために &lt;code&gt;&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2982c9337e5698148dd46ac21f02f3137461b4a8" translate="yes" xml:space="preserve">
          <source>Any other return values (including exit signals or throw) and the &lt;code&gt;DefaultED&lt;/code&gt; will be used.</source>
          <target state="translated">その他の戻り値（終了シグナルまたはスローを含む）および &lt;code&gt;DefaultED&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="249dc2b99b732aa6241eec01386b07432c7788b4" translate="yes" xml:space="preserve">
          <source>Any other return values (including exit signals or throw) will result in an error descriptor with code 500 (internal gateway error) and the module name (of the callback module) as reason.</source>
          <target state="translated">その他の戻り値 (終了信号や throw を含む)は、コード 500 (内部ゲートウェイエラー)とモジュール名 (コールバックモジュールの)を理由とするエラー記述子になります。</target>
        </trans-unit>
        <trans-unit id="a942dcaa5bd45f30971473c45442d68ed922cbd5" translate="yes" xml:space="preserve">
          <source>Any other value &lt;code&gt;OtherValue&lt;/code&gt; returned by &lt;code&gt;Fun&lt;/code&gt; terminates the traversal and is returned immediately.</source>
          <target state="translated">&lt;code&gt;Fun&lt;/code&gt; によって返されるその他の値 &lt;code&gt;OtherValue&lt;/code&gt; はトラバーサルを終了し、すぐに返されます。</target>
        </trans-unit>
        <trans-unit id="f4d82480914c3ee14ba49d105622133bf704f763" translate="yes" xml:space="preserve">
          <source>Any other value is immediately returned as value of the current call to &lt;code&gt;sort&lt;/code&gt; or &lt;code&gt;keysort&lt;/code&gt;. Each input function is called exactly once. If an error occurs, the last function is called with argument &lt;code&gt;close&lt;/code&gt;, the reply of which is ignored.</source>
          <target state="translated">その他の値は、現在の &lt;code&gt;sort&lt;/code&gt; または &lt;code&gt;keysort&lt;/code&gt; の呼び出しの値としてすぐに返されます。各入力関数は1回だけ呼び出されます。エラーが発生すると、最後の関数が引数 &lt;code&gt;close&lt;/code&gt; で呼び出され、その応答は無視されます。</target>
        </trans-unit>
        <trans-unit id="f850a68f9f85d9da673e19d77155ac0b55fea37c" translate="yes" xml:space="preserve">
          <source>Any other variable needed by the test</source>
          <target state="translated">テストで必要とされるその他の変数</target>
        </trans-unit>
        <trans-unit id="9d0e66f20ad63939bfb7baf4ceddb82fb6504347" translate="yes" xml:space="preserve">
          <source>Any parameters are of the wrong type.</source>
          <target state="translated">パラメータの種類が間違っています。</target>
        </trans-unit>
        <trans-unit id="933ef808931a1467e93c9ed25ccfb4780e6ed6ed" translate="yes" xml:space="preserve">
          <source>Any process can probe a blocked log with &lt;code&gt;info/1&lt;/code&gt; or close it with &lt;code&gt;close/1&lt;/code&gt;. The blocking process can also use functions &lt;code&gt;chunk/2,3&lt;/code&gt;, &lt;code&gt;bchunk/2,3&lt;/code&gt;, &lt;code&gt;chunk_step/3&lt;/code&gt;, and &lt;code&gt;unblock/1&lt;/code&gt; without being affected by the block. Any other attempt than those mentioned so far to update or read a blocked log suspends the calling process until the log is unblocked or returns error message &lt;code&gt;{blocked_log, Log}&lt;/code&gt;, depending on whether the value of &lt;code&gt;QueueLogRecords&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;. &lt;code&gt;QueueLogRecords&lt;/code&gt; defaults to &lt;code&gt;true&lt;/code&gt;, which is used by &lt;code&gt;block/1&lt;/code&gt;.</source>
          <target state="translated">どのプロセスでも、ブロックされたログを &lt;code&gt;info/1&lt;/code&gt; でプローブするか、 &lt;code&gt;close/1&lt;/code&gt; で閉じることができます。ブロックプロセスは、ブロックの影響を受けずに、関数 &lt;code&gt;chunk/2,3&lt;/code&gt; 、 &lt;code&gt;bchunk/2,3&lt;/code&gt; 、 &lt;code&gt;chunk_step/3&lt;/code&gt; 、およびunblock &lt;code&gt;unblock/1&lt;/code&gt; を使用することもできます。 &lt;code&gt;QueueLogRecords&lt;/code&gt; の値が &lt;code&gt;true&lt;/code&gt; か &lt;code&gt;false&lt;/code&gt; かに応じて、これまでに述べた以外に、ブロックされたログを更新または読み取ろうとすると、ログがブロック解除されるか、エラーメッセージ &lt;code&gt;{blocked_log, Log}&lt;/code&gt; が返されるまで、呼び出しプロセスが中断されます。 &lt;code&gt;QueueLogRecords&lt;/code&gt; のデフォルトは &lt;code&gt;true&lt;/code&gt; で、 &lt;code&gt;block/1&lt;/code&gt; によって使用されます。</target>
        </trans-unit>
        <trans-unit id="08eca955417b5ab22bebcc976cc21d89efe94422" translate="yes" xml:space="preserve">
          <source>Any process can read or write to the table.</source>
          <target state="translated">どのようなプロセスでも、テーブルを読み書きすることができます。</target>
        </trans-unit>
        <trans-unit id="782da514823c3f76e59a01f8bc9028c411c82cda" translate="yes" xml:space="preserve">
          <source>Any process, in any application, with &lt;code&gt;Module&lt;/code&gt; as residence module, is killed when the instruction is evaluated. The user must therefore ensure that all such processes are terminated before deleting the module, to avoid a situation with failing supervisor restarts.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; が常駐モジュールであるアプリケーションのプロセスは、命令が評価されるときに強制終了されます。したがって、ユーザーは、モジュールを削除する前にそのようなすべてのプロセスが終了していることを確認して、スーパーバイザの再起動が失敗する状況を回避する必要があります。</target>
        </trans-unit>
        <trans-unit id="89c73d072c780c8bd405077821b4399412adb61c" translate="yes" xml:space="preserve">
          <source>Any record, containing type information or not, once defined, can be used as a type using the following syntax:</source>
          <target state="translated">型情報を含むかどうかに関わらず、一度定義されたレコードは、以下の構文を使用して型として使用することができます。</target>
        </trans-unit>
        <trans-unit id="4b9ac647f7a1c06663cb2845807c8bed2b8a0381" translate="yes" xml:space="preserve">
          <source>Any relative paths, specified in the test specification, are relative to the directory containing the test specification file if &lt;code&gt;ct_run -spec TestSpecFile ...&lt;/code&gt; or &lt;code&gt;ct:run:test([{spec,TestSpecFile},...])&lt;/code&gt; executes the test.</source>
          <target state="translated">&lt;code&gt;ct_run -spec TestSpecFile ...&lt;/code&gt; または &lt;code&gt;ct:run:test([{spec,TestSpecFile},...])&lt;/code&gt; がテストを実行する場合、テスト仕様で指定された相対パスは、テスト仕様ファイルを含むディレクトリを基準にしています。。</target>
        </trans-unit>
        <trans-unit id="b95b8d2f2c5d4e842e94679e4847a285aed6e939" translate="yes" xml:space="preserve">
          <source>Any required padding is added by diameter when encoding outgoing messages.</source>
          <target state="translated">送信メッセージをエンコードする際に、必要なパディングは直径で追加されます。</target>
        </trans-unit>
        <trans-unit id="6a9a8124f1b80519c1f040df8df911b83b4c84b7" translate="yes" xml:space="preserve">
          <source>Any start flags to the Erlang runtime system (application ERTS) can also be passed as parameters to &lt;code&gt;ct_run&lt;/code&gt;. It is, for example, useful to be able to pass directories to be added to the Erlang code server search path with flag &lt;code&gt;-pa&lt;/code&gt; or &lt;code&gt;-pz&lt;/code&gt;. If you have common help- or library modules for test suites (separately compiled), stored in other directories than the test suite directories, these &lt;code&gt;help/lib&lt;/code&gt; directories are preferably added to the code path this way.</source>
          <target state="translated">Erlangランタイムシステム（アプリケーションERTS）への開始フラグも、パラメーターとして &lt;code&gt;ct_run&lt;/code&gt; に渡すことができます。たとえば、フラグ &lt;code&gt;-pa&lt;/code&gt; または &lt;code&gt;-pz&lt;/code&gt; を使用して、Erlangコードサーバーの検索パスに追加するディレクトリを渡すことができると便利です。テストスイート用の共通のヘルプまたはライブラリモジュール（個別にコンパイル済み）があり、テストスイートディレクトリ以外のディレクトリに保存されている場合、これらの &lt;code&gt;help/lib&lt;/code&gt; ライブラリディレクトリは、この方法でコードパスに追加されることが望ましい。</target>
        </trans-unit>
        <trans-unit id="f182f567f67c83a2ce8839de78f5dd9c2331c337" translate="yes" xml:space="preserve">
          <source>Any term, defaults to the atom &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">任意の項、デフォルトはアトム &lt;code&gt;undefined&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="05f2f648b8aa07f43583597f53b95459b0d86b71" translate="yes" xml:space="preserve">
          <source>Any test or test set &lt;code&gt;T&lt;/code&gt; can be annotated with a title, by wrapping it in a pair &lt;code&gt;{Title, T}&lt;/code&gt;, where &lt;code&gt;Title&lt;/code&gt; is a string. For convenience, any test which is normally represented using a tuple can simply be given a title string as the first element, i.e., writing &lt;code&gt;{&quot;The Title&quot;, ...}&lt;/code&gt; instead of adding an extra tuple wrapper as in &lt;code&gt;{&quot;The Title&quot;, {...}}&lt;/code&gt;.</source>
          <target state="translated">すべてのテストまたはテストセット &lt;code&gt;T&lt;/code&gt; は、 &lt;code&gt;{Title, T}&lt;/code&gt; ペアでラップすることにより、タイトルで注釈を付けることができます。ここで、 &lt;code&gt;Title&lt;/code&gt; は文字列です。便宜のために、通常のタプルを使用して表現されている任意のテストは、単に最初の要素、すなわち、書き込みなどのタイトル文字列を挙げることができる &lt;code&gt;{&quot;The Title&quot;, ...}&lt;/code&gt; 代わりのように余分なタプルラッパーを追加する &lt;code&gt;{&quot;The Title&quot;, {...}}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cdfd965642f53e0b7729140f8c9073111a331ea3" translate="yes" xml:space="preserve">
          <source>Any transport option except &lt;code&gt;applications&lt;/code&gt; or &lt;code&gt;capabilities&lt;/code&gt;. Used as defaults for transport configuration, values passed to &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; overriding values configured on the service.</source>
          <target state="translated">&lt;code&gt;applications&lt;/code&gt; または &lt;code&gt;capabilities&lt;/code&gt; を除くすべての転送オプション。トランスポート構成のデフォルトとして使用され、サービスに構成されている値をオーバーライドする &lt;code&gt;&lt;a href=&quot;#add_transport-2&quot;&gt;add_transport/2&lt;/a&gt;&lt;/code&gt; に渡される値。</target>
        </trans-unit>
        <trans-unit id="36287aab00e4133075843c606c024c1da69b5da0" translate="yes" xml:space="preserve">
          <source>Any undocumented functions in &lt;code&gt;string&lt;/code&gt; are not to be used.</source>
          <target state="translated">ドキュメント化されていない &lt;code&gt;string&lt;/code&gt; 関数は使用されません。</target>
        </trans-unit>
        <trans-unit id="4472d33a875806b4fa8c5622d64ebe7f23ffe886" translate="yes" xml:space="preserve">
          <source>Any unspecified fields are assumed to have the type in the original record declaration.</source>
          <target state="translated">指定されていないフィールドは、元のレコード宣言の型を持つと仮定されます。</target>
        </trans-unit>
        <trans-unit id="f8b06f554103b0e00f9de05aa58d618718ce1b34" translate="yes" xml:space="preserve">
          <source>Any variables that are defined before the list comprehension, and that are used in filters, have the values they had before the list comprehension.</source>
          <target state="translated">リスト内包の前に定義された変数で、フィルタで使用されるものは、リスト内包の前に持っていた値を持っています。</target>
        </trans-unit>
        <trans-unit id="f184dfb123fe5531382db694e54de8fc62711d8d" translate="yes" xml:space="preserve">
          <source>Any vertical whitespace character</source>
          <target state="translated">垂直方向の空白文字</target>
        </trans-unit>
        <trans-unit id="dc95992a9a8880a458bf0ac420ad7827afd47252" translate="yes" xml:space="preserve">
          <source>Any whitespace character</source>
          <target state="translated">任意の空白文字</target>
        </trans-unit>
        <trans-unit id="7d41ee854a3d2e6ed49f2b637df36ad7f9e23190" translate="yes" xml:space="preserve">
          <source>Apart from the ordinary allocators described above, some pre-allocators are used for some specific data types. These pre-allocators pre-allocate a fixed amount of memory for certain data types when the runtime system starts. As long as pre-allocated memory is available, it is used. When no pre-allocated memory is available, memory is allocated in ordinary allocators. These pre-allocators are typically much faster than the ordinary allocators, but can only satisfy a limited number of requests.</source>
          <target state="translated">上で説明した通常のアロケータとは別に、いくつかの特定のデータ型のためにいくつかのプリアロケータが使用されています。これらのプリアロケータは、ランタイムシステムの起動時に、特定のデータ型のために一定量のメモリを事前に割り当てます。事前に割り当てられたメモリが利用可能である限り、それが使用されます。事前に割り当てられたメモリが利用できない場合、メモリは通常のアロケータで割り当てられます。これらの事前アロケータは一般的に通常のアロケータよりもはるかに高速ですが、限られた数のリクエストしか満たすことができません。</target>
        </trans-unit>
        <trans-unit id="b6fbecd567654b9cb7f086f33e2e4b65e3a20dbc" translate="yes" xml:space="preserve">
          <source>Appart from the reply message, the &lt;code&gt;{asynchronous, ReplyTag}&lt;/code&gt; option behaves exactly the same as the &lt;code&gt;asynchronous&lt;/code&gt; option without reply tag.</source>
          <target state="translated">返信メッセージとは &lt;code&gt;{asynchronous, ReplyTag}&lt;/code&gt; 、{asynchronous、ReplyTag}オプションは、返信タグなしの &lt;code&gt;asynchronous&lt;/code&gt; オプションとまったく同じように動作します。</target>
        </trans-unit>
        <trans-unit id="e3e791b60ddfbf72d731c8a8fbb0e6ea943e25bd" translate="yes" xml:space="preserve">
          <source>Appears when option &lt;code&gt;reload&lt;/code&gt; is specified. The driver &lt;code&gt;Name&lt;/code&gt; is not in the system. Only drivers loaded by this process can be reloaded.</source>
          <target state="translated">オプション &lt;code&gt;reload&lt;/code&gt; が指定されている場合に表示されます。ドライバ &lt;code&gt;Name&lt;/code&gt; がシステムにありません。このプロセスによってロードされたドライバーのみが再ロードできます。</target>
        </trans-unit>
        <trans-unit id="49cc99a35d08f4016ff481d7d8153734e5631682" translate="yes" xml:space="preserve">
          <source>Appears when option &lt;code&gt;reload&lt;/code&gt; is specified. The driver &lt;code&gt;Name&lt;/code&gt; is present in the system, but there is no &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; of it in this process.</source>
          <target state="translated">オプション &lt;code&gt;reload&lt;/code&gt; が指定されている場合に表示されます。ドライバ &lt;code&gt;Name&lt;/code&gt; はシステムに存在し &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; が、このプロセスではそのユーザーは存在しません。</target>
        </trans-unit>
        <trans-unit id="9ca9605c2bfb20ec231ac66a12bdad85113549dc" translate="yes" xml:space="preserve">
          <source>Append or prepend supported but not enabled algorithm(s) to the list of algorithms. If the wanted algorithms already are in &lt;code&gt;A&lt;/code&gt; they will first be removed and then appended or prepended,</source>
          <target state="translated">サポートされているが有効になっていないアルゴリズムをアルゴリズムのリストに追加または追加します。必要なアルゴリズムがすでに &lt;code&gt;A&lt;/code&gt; にある場合、それらは最初に削除され、次に追加または追加されます。</target>
        </trans-unit>
        <trans-unit id="0eee5e3eef37b4e12873f20fbe9bf8c113511624" translate="yes" xml:space="preserve">
          <source>Append the agents config to the current manager agents config file.</source>
          <target state="translated">現在のマネージャのエージェント設定ファイルにエージェント設定を追加します。</target>
        </trans-unit>
        <trans-unit id="670ede32b75903ea1e527f007ab3467a091effc0" translate="yes" xml:space="preserve">
          <source>Append the community config to the current agent community config file.</source>
          <target state="translated">現在のエージェントのコミュニティ設定ファイルにコミュニティ設定を追加します。</target>
        </trans-unit>
        <trans-unit id="7f98e246919d3685a6470b54ee550be705b1a20d" translate="yes" xml:space="preserve">
          <source>Append the config to the current agent config file.</source>
          <target state="translated">現在のエージェントコンフィグファイルにコンフィグを追加します。</target>
        </trans-unit>
        <trans-unit id="5b99d7bbf0744498145642e57ca0d9bbc5019b3e" translate="yes" xml:space="preserve">
          <source>Append the config to the current manager config file.</source>
          <target state="translated">現在のマネージャ設定ファイルに設定を追加します。</target>
        </trans-unit>
        <trans-unit id="4715714a265ef18003ce3a95c049a6579c5fdc19" translate="yes" xml:space="preserve">
          <source>Append the context config to the current agent context config file.</source>
          <target state="translated">現在のエージェントのコンテキストコンフィグファイルにコンテキストコンフィグを追加します。</target>
        </trans-unit>
        <trans-unit id="098b355d60044dcd195c72fb3d8921d6f5c79432" translate="yes" xml:space="preserve">
          <source>Append the notify config to the current agent notify config file.</source>
          <target state="translated">現在のエージェントのnotify configファイルにnotify configを追加します。</target>
        </trans-unit>
        <trans-unit id="eacde046205397e77177cf51c65a5911a57b8615" translate="yes" xml:space="preserve">
          <source>Append the standard config to the current agent standard config file.</source>
          <target state="translated">現在のエージェント標準設定ファイルに標準設定を追加します。</target>
        </trans-unit>
        <trans-unit id="10e85fc06cc23b8efed1d3e1c3fb54a94ebffb97" translate="yes" xml:space="preserve">
          <source>Append the target_addr config to the current agent target_addr config file.</source>
          <target state="translated">現在のエージェントのtarget_addr configファイルにtarget_addr configを追加します。</target>
        </trans-unit>
        <trans-unit id="87b72ce0520ffbff2c18e79fe54c87ebbca4b2fe" translate="yes" xml:space="preserve">
          <source>Append the target_params config to the current agent target_params config file.</source>
          <target state="translated">現在のエージェントのtarget_params設定ファイルにtarget_params設定を追加します。</target>
        </trans-unit>
        <trans-unit id="95a8435503ae194bc5982a16880db13756b12c3e" translate="yes" xml:space="preserve">
          <source>Append the users config to the current manager users config file.</source>
          <target state="translated">現在のマネージャのユーザー設定ファイルにユーザー設定を追加します。</target>
        </trans-unit>
        <trans-unit id="20d781b651b76cd62733934321351ec945be0a2a" translate="yes" xml:space="preserve">
          <source>Append the usm config to the current agent vacm config file.</source>
          <target state="translated">usm configを現在のエージェントのvacm configファイルに追加します。</target>
        </trans-unit>
        <trans-unit id="57c21804df817ec8d20c17ff38774329e716571b" translate="yes" xml:space="preserve">
          <source>Append the usm config to the current manager usm config file.</source>
          <target state="translated">現在のマネージャの usm 設定ファイルに usm 設定を追加します。</target>
        </trans-unit>
        <trans-unit id="5ed7647b353b68ed84afe6fde045a7489b9154cc" translate="yes" xml:space="preserve">
          <source>Append the vacm config to the current agent vacm config file.</source>
          <target state="translated">現在のエージェントの vacm config ファイルに vacm config を追加します。</target>
        </trans-unit>
        <trans-unit id="85d8a97e8351cb485e2588c8ecfff62c9d854b68" translate="yes" xml:space="preserve">
          <source>Appending to a binary in an efficient way can be done as follows:</source>
          <target state="translated">効率的な方法でバイナリに追加するには、次のようにします。</target>
        </trans-unit>
        <trans-unit id="ea77b245b41191501f470789eca4aba72934b9e1" translate="yes" xml:space="preserve">
          <source>Appending to a binary or bitstring is specially optimized by the &lt;strong&gt;runtime system&lt;/strong&gt;:</source>
          <target state="translated">バイナリまたはビット文字列への追加は、&lt;strong&gt;ランタイムシステム&lt;/strong&gt;によって特別に最適化され&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="6eda043cc568cf13970a30ffbc0034adfa99e03f" translate="yes" xml:space="preserve">
          <source>Appendix A describes the conversion of SNMPv2 to SNMPv1 error messages.</source>
          <target state="translated">付録Aでは、SNMPv2からSNMPv1のエラーメッセージへの変換について説明しています。</target>
        </trans-unit>
        <trans-unit id="ee91e579fc45ec4f74f6a038125846de007b671e" translate="yes" xml:space="preserve">
          <source>Appendix B contains the RFC1903 text on &lt;code&gt;RowStatus&lt;/code&gt;.</source>
          <target state="translated">付録Bには、 &lt;code&gt;RowStatus&lt;/code&gt; に関するRFC1903テキストが含まれています。</target>
        </trans-unit>
        <trans-unit id="df0c86c3bdb24e665fb2b6f20747db8d823ab88c" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;Comments&lt;/code&gt; to the post-comments of &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; のポスト &lt;code&gt;Comments&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="f2d60430814dd0a0d3f29b110da1184762bf96c4" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;Comments&lt;/code&gt; to the pre-comments of &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; の事前 &lt;code&gt;Comments&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="a59eafb92455934508f727a752eaa14a058cbb57" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;Directory&lt;/code&gt; to the code path in the invoked Erlang emulator.</source>
          <target state="translated">呼び出されたErlangエミュレーターのコードパスに &lt;code&gt;Directory&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="f1ae1ca945105d0b0412c9d33c6ca6cdfd36c3ed" translate="yes" xml:space="preserve">
          <source>Appends &lt;code&gt;Directory&lt;/code&gt; to the front of the code path in the invoked Erlang emulator. This can be used to invoke another compiler than the default one.</source>
          <target state="translated">呼び出されたErlangエミュレーターのコードパスの前に &lt;code&gt;Directory&lt;/code&gt; を追加します。これを使用して、デフォルト以外のコンパイラを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="cb49cdd164f55f2c7a30cfc667b98571effb1dc9" translate="yes" xml:space="preserve">
          <source>Appends a list of values &lt;code&gt;ValList&lt;/code&gt; to the current list of values associated with &lt;code&gt;Key&lt;/code&gt;. An exception is generated if the initial value associated with &lt;code&gt;Key&lt;/code&gt; is not a list of values.</source>
          <target state="translated">値のリスト &lt;code&gt;ValList&lt;/code&gt; を、 &lt;code&gt;Key&lt;/code&gt; に関連付けられた現在の値のリストに追加します。 &lt;code&gt;Key&lt;/code&gt; 関連付けられた初期値が値のリストでない場合は、例外が生成されます。</target>
        </trans-unit>
        <trans-unit id="598f89859880c8e0c4b7b657bbbf567d531c94b2" translate="yes" xml:space="preserve">
          <source>Appends a new &lt;code&gt;Value&lt;/code&gt; to the current list of values associated with &lt;code&gt;Key&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; に関連付けられている現在の値リストに新しい &lt;code&gt;Value&lt;/code&gt; を追加します。</target>
        </trans-unit>
        <trans-unit id="84026150b614acc7231607e9aad74b0ddcd360b0" translate="yes" xml:space="preserve">
          <source>Appends a new &lt;code&gt;Value&lt;/code&gt; to the current list of values associated with &lt;code&gt;Key&lt;/code&gt;. An exception is generated if the initial value associated with &lt;code&gt;Key&lt;/code&gt; is not a list of values.</source>
          <target state="translated">&lt;code&gt;Key&lt;/code&gt; に関連付けられている現在の値リストに新しい &lt;code&gt;Value&lt;/code&gt; を追加します。 &lt;code&gt;Key&lt;/code&gt; 関連付けられた初期値が値のリストでない場合は、例外が生成されます。</target>
        </trans-unit>
        <trans-unit id="cc8c687a22dd5ccfe5def8e49d349b9718a5a0ba" translate="yes" xml:space="preserve">
          <source>Appends data at the end of buffer &lt;code&gt;x&lt;/code&gt;.</source>
          <target state="translated">バッファ &lt;code&gt;x&lt;/code&gt; の最後にデータを追加します。</target>
        </trans-unit>
        <trans-unit id="394be8930f77fa3eaca7c0be83cce9cd9e021402" translate="yes" xml:space="preserve">
          <source>Appends items to a single file, which size can be limited by the &lt;code&gt;disk_log&lt;/code&gt; module.</source>
          <target state="translated">アイテムを単一のファイルに追加します。このサイズは、 &lt;code&gt;disk_log&lt;/code&gt; モジュールによって制限できます。</target>
        </trans-unit>
        <trans-unit id="cdc7f1a4511966dfd1a8a1b210a23216447ca621" translate="yes" xml:space="preserve">
          <source>Appends the comments of &lt;code&gt;Source&lt;/code&gt; to the current comments of &lt;code&gt;Target&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; のコメントを &lt;code&gt;Target&lt;/code&gt; の現在のコメントに追加します。</target>
        </trans-unit>
        <trans-unit id="ea301cbca7c8ac46cf5931d51f42837ef8522c8f" translate="yes" xml:space="preserve">
          <source>Appends the term &lt;code&gt;Annotation&lt;/code&gt; to the list of user annotations of &lt;code&gt;Node&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; というユーザー注釈のリストに &lt;code&gt;Annotation&lt;/code&gt; という用語を追加します。</target>
        </trans-unit>
        <trans-unit id="42124fae91a7c7b871162f34d0590a73350f98e4" translate="yes" xml:space="preserve">
          <source>Application - skeletons for the OTP application behavior</source>
          <target state="translated">アプリケーション-OTPアプリケーションの動作のスケルトン</target>
        </trans-unit>
        <trans-unit id="b92e83d37579fa02e707537bdedda6f2347cdd94" translate="yes" xml:space="preserve">
          <source>Application ::= Atom</source>
          <target state="translated">アプリケーション ::=アトム</target>
        </trans-unit>
        <trans-unit id="3101ceef607cbc0ae4473ea0836a862c09e72c75" translate="yes" xml:space="preserve">
          <source>Application Edges. All application calls.</source>
          <target state="translated">アプリケーションエッジ。すべてのアプリケーションコール。</target>
        </trans-unit>
        <trans-unit id="3925a6e948fb7872d335532f8d20c939d631d4b3" translate="yes" xml:space="preserve">
          <source>Application Identifiers</source>
          <target state="translated">アプリケーション識別子</target>
        </trans-unit>
        <trans-unit id="d291c82890b136b5e80c48e67c846c73663b4e1e" translate="yes" xml:space="preserve">
          <source>Application dependencies</source>
          <target state="translated">アプリケーションの依存関係</target>
        </trans-unit>
        <trans-unit id="cf171227ff1428401819ab3800da2acc36ae658c" translate="yes" xml:space="preserve">
          <source>Application name.</source>
          <target state="translated">アプリケーション名。</target>
        </trans-unit>
        <trans-unit id="8c7c4bdcb550a019467191f10d8c79d46c9076de" translate="yes" xml:space="preserve">
          <source>Application parameter &lt;code&gt;schema_location&lt;/code&gt; controls where &lt;code&gt;Mnesia&lt;/code&gt; searches for its schema. The parameter can be one of the following atoms:</source>
          <target state="translated">アプリケーションパラメータ &lt;code&gt;schema_location&lt;/code&gt; は、 &lt;code&gt;Mnesia&lt;/code&gt; がスキーマを検索する場所を制御します。パラメータは、次のいずれかのアトムです。</target>
        </trans-unit>
        <trans-unit id="1c8d3536642343f82c03359ee86f1e6c6ed51cdc" translate="yes" xml:space="preserve">
          <source>Application programs can access the values of the command-line arguments by calling the function &lt;code&gt;init:get_argument(Key)&lt;/code&gt; or &lt;code&gt;init:get_arguments()&lt;/code&gt;. See the &lt;code&gt;init(3)&lt;/code&gt; manual page in ERTS.</source>
          <target state="translated">アプリケーションプログラムは、関数 &lt;code&gt;init:get_argument(Key)&lt;/code&gt; または &lt;code&gt;init:get_arguments()&lt;/code&gt; を呼び出すことにより、コマンドライン引数の値にアクセスできます。ERTS の &lt;code&gt;init(3)&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="9a3c99c39895beeb540f03e2907eaa65e2e3d13b" translate="yes" xml:space="preserve">
          <source>Application resource file</source>
          <target state="translated">アプリケーションリソースファイル</target>
        </trans-unit>
        <trans-unit id="75ccf582ca3ec68d22db59ba1f474b3c7e769bc8" translate="yes" xml:space="preserve">
          <source>Application resource file.</source>
          <target state="translated">アプリケーションリソースファイル。</target>
        </trans-unit>
        <trans-unit id="d7df03c04ece2fd1b98a72e8d327f0eca8e79615" translate="yes" xml:space="preserve">
          <source>Application settings</source>
          <target state="translated">アプリケーションの設定</target>
        </trans-unit>
        <trans-unit id="e32c3cf432797b7c1d1e8a63e8761c1703d72948" translate="yes" xml:space="preserve">
          <source>Application specific configuration. An application has a mandatory name and application level options that are described below.</source>
          <target state="translated">アプリケーション固有の設定。アプリケーションには、以下に説明する必須の名前とアプリケーション レベルのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="ae55983f0b6d7e237d6c21df4a6fc064eb76c1b8" translate="yes" xml:space="preserve">
          <source>Application upgrade file</source>
          <target state="translated">アプリケーションのアップグレードファイル</target>
        </trans-unit>
        <trans-unit id="781ef14400b810abfadd4a95a97b21db97359040" translate="yes" xml:space="preserve">
          <source>Application-specific error reason that is to be checked by the &lt;code&gt;verify_fun&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;verify_fun&lt;/code&gt; によってチェックされるアプリケーション固有のエラー理由。</target>
        </trans-unit>
        <trans-unit id="4507ffa27565890275789b83392e39507e0ef155" translate="yes" xml:space="preserve">
          <source>Application-specific records are defined in the hrl files resulting from dictionary file compilation.</source>
          <target state="translated">アプリケーション固有のレコードは、辞書ファイルのコンパイルの結果として得られる hrl ファイルで定義されます。</target>
        </trans-unit>
        <trans-unit id="76c74bd071dd73f01696fddbbffc77712a479faf" translate="yes" xml:space="preserve">
          <source>Applications</source>
          <target state="translated">Applications</target>
        </trans-unit>
        <trans-unit id="5dd7e803139ba20c70acea8fa0e0d5743ed7b495" translate="yes" xml:space="preserve">
          <source>Applications are not required to be located under directory &lt;code&gt;$ROOT/lib&lt;/code&gt;. Several installation directories, which contain different parts of a system, can thus exist. For example, the previous example can be extended as follows:</source>
          <target state="translated">アプリケーションは &lt;code&gt;$ROOT/lib&lt;/code&gt; ディレクトリの下にある必要はありません。したがって、システムのさまざまな部分を含むいくつかのインストールディレクトリが存在する可能性があります。たとえば、前の例は次のように拡張できます。</target>
        </trans-unit>
        <trans-unit id="362b31da52f21329511e4763851061ec08ac4166" translate="yes" xml:space="preserve">
          <source>Applications that access databases or log files often write a tiny data fragment (for example, one line in a log file) and then call &lt;code&gt;fsync()&lt;/code&gt; immediately to ensure that the written data is physically stored on the hard disk. Unfortunately, &lt;code&gt;fsync()&lt;/code&gt; always initiates two write operations: one for the newly written data and another one to update the modification time stored in the &lt;code&gt;inode&lt;/code&gt;. If the modification time is not a part of the transaction concept, &lt;code&gt;fdatasync()&lt;/code&gt; can be used to avoid unnecessary &lt;code&gt;inode&lt;/code&gt; disk write operations.</source>
          <target state="translated">多くの場合、データベースまたはログファイルにアクセスするアプリケーションは、小さなデータフラグメント（たとえば、ログファイルの1行）を書き込み、すぐに &lt;code&gt;fsync()&lt;/code&gt; を呼び出して、書き込まれたデータが物理的にハードディスクに保存されていることを確認します。残念ながら、 &lt;code&gt;fsync()&lt;/code&gt; は常に2つの書き込み操作を開始します。1つは新しく書き込まれたデータ用で、もう1つは &lt;code&gt;inode&lt;/code&gt; 保存されている変更時刻を更新するためです。変更時間がトランザクションの概念の一部ではない場合、 &lt;code&gt;fdatasync()&lt;/code&gt; を使用して、不要な &lt;code&gt;inode&lt;/code&gt; ディスクの書き込み操作を回避できます。</target>
        </trans-unit>
        <trans-unit id="36e5e3b3c875b142ebb079646179db76a16ac509" translate="yes" xml:space="preserve">
          <source>Applications that merely need a look-up dictionary that can be stored to disc. Those applications use the standard library module &lt;code&gt;dets&lt;/code&gt;, which is a disc-based version of the module &lt;code&gt;ets&lt;/code&gt;. For information about &lt;code&gt;dets&lt;/code&gt;, see the &lt;code&gt;dets&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">ディスクに保存できるルックアップ辞書が必要なだけのアプリケーション。これらのアプリケーションは、モジュールライブラリ &lt;code&gt;ets&lt;/code&gt; のディスクベースのバージョンである標準ライブラリモジュール &lt;code&gt;dets&lt;/code&gt; を使用します。詳細については &lt;code&gt;dets&lt;/code&gt; 、ご覧ください &lt;code&gt;dets&lt;/code&gt; STDLIBでマニュアルページを。</target>
        </trans-unit>
        <trans-unit id="08caa89c85c4c4b67db04b49770e72f7b261a582" translate="yes" xml:space="preserve">
          <source>Applications that need disc logging facilities. Those applications can use the module &lt;code&gt;disk_log&lt;/code&gt; by preference. For information about &lt;code&gt;disk_log&lt;/code&gt;, see the &lt;code&gt;disk_log&lt;/code&gt; manual page in Kernel.</source>
          <target state="translated">ディスクロギング機能を必要とするアプリケーション。これらのアプリケーションは、優先的にモジュール &lt;code&gt;disk_log&lt;/code&gt; を使用できます。詳細については &lt;code&gt;disk_log&lt;/code&gt; 、ご覧ください &lt;code&gt;disk_log&lt;/code&gt; カーネル内のマニュアルページを。</target>
        </trans-unit>
        <trans-unit id="d65e8afb7e2d8dc2f453fde746bc143e776e7bfd" translate="yes" xml:space="preserve">
          <source>Applications that need to replicate data.</source>
          <target state="translated">データの複製が必要なアプリケーション</target>
        </trans-unit>
        <trans-unit id="0a893d683aa9bd2d820b6ec80f57f8073df0221a" translate="yes" xml:space="preserve">
          <source>Applications that need to use atomic transactions to update several records simultaneously.</source>
          <target state="translated">アトミックトランザクションを使用して複数のレコードを同時に更新する必要があるアプリケーション。</target>
        </trans-unit>
        <trans-unit id="b472e8ea80b9c154d3b89eb9393528fe5e667863" translate="yes" xml:space="preserve">
          <source>Applications that perform complicated searches on data.</source>
          <target state="translated">データに対して複雑な検索を行うアプリケーション。</target>
        </trans-unit>
        <trans-unit id="218beaf6e33b2c2bfe36be6da2b6bedcdac994cd" translate="yes" xml:space="preserve">
          <source>Applications that use soft real-time characteristics.</source>
          <target state="translated">ソフトリアルタイム特性を利用したアプリケーション</target>
        </trans-unit>
        <trans-unit id="e2d9778da73c053006242c383a365963dcdf2431" translate="yes" xml:space="preserve">
          <source>Applications.</source>
          <target state="translated">Applications.</target>
        </trans-unit>
        <trans-unit id="fa321d507b3a35d5a25a7182b72ba551d90893aa" translate="yes" xml:space="preserve">
          <source>Applies &lt;code&gt;Fun&lt;/code&gt; to each object stored in table &lt;code&gt;Name&lt;/code&gt; in some unspecified order. Different actions are taken depending on the return value of &lt;code&gt;Fun&lt;/code&gt;. The following &lt;code&gt;Fun&lt;/code&gt; return values are allowed:</source>
          <target state="translated">いくつかの不特定の順序でテーブル &lt;code&gt;Name&lt;/code&gt; に格納されている各オブジェクトに &lt;code&gt;Fun&lt;/code&gt; を適用します。 &lt;code&gt;Fun&lt;/code&gt; の戻り値に応じて、異なるアクションが実行されます。以下 &lt;code&gt;Fun&lt;/code&gt; 戻り値が許可されます。</target>
        </trans-unit>
        <trans-unit id="c175a40ddabcc4446ea6e7c02e64574ef36699b4" translate="yes" xml:space="preserve">
          <source>Applies a function to each immediate subtree of a syntax tree. The result of each application replaces the corresponding original node.</source>
          <target state="translated">構文ツリーの各サブツリーに関数を適用します。各アプリケーションの結果は、対応する元のノードを置き換えます。</target>
        </trans-unit>
        <trans-unit id="a163f49988d544f596168407c81d1f2429198f1c" translate="yes" xml:space="preserve">
          <source>Applies a function to each node of a syntax tree. The result of each application replaces the corresponding original node. The order of traversal is bottom-up.</source>
          <target state="translated">構文ツリーの各ノードに関数を適用します。各アプリケーションの結果は、対応する元のノードを置き換えます。探索の順序はボトムアップです。</target>
        </trans-unit>
        <trans-unit id="2f3b02962a0c819c60e2a8cb9eea77ed6172b4d6" translate="yes" xml:space="preserve">
          <source>Applies a match specification to some objects stored in a table and returns a non-empty list of the results. The table, the match specification, and the number of objects that are matched are all defined by &lt;code&gt;Continuation&lt;/code&gt;, which is returned by a previous call to &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルに格納されている一部のオブジェクトに一致仕様を適用し、結果の空でないリストを返します。テーブル、一致仕様、および一致するオブジェクトの数はすべて、 &lt;code&gt;Continuation&lt;/code&gt; によって定義されます。これは、前回の &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#select-3&quot;&gt;select/3&lt;/a&gt;&lt;/code&gt; の呼び出しによって返されます。</target>
        </trans-unit>
        <trans-unit id="4c464d5076dfa5b81db106edd89f699c8ab10fb5" translate="yes" xml:space="preserve">
          <source>Applies argument &lt;code&gt;Fun&lt;/code&gt; to all records in the table. &lt;code&gt;Fun&lt;/code&gt; is a function that takes a record of the old type and returns a transformed record of the new type. Argument &lt;code&gt;Fun&lt;/code&gt; can also be the atom &lt;code&gt;ignore&lt;/code&gt;, which indicates that only the metadata about the table is updated. Use of &lt;code&gt;ignore&lt;/code&gt; is not recommended, but included as a possibility for the user do to an own transformation.</source>
          <target state="translated">引数 &lt;code&gt;Fun&lt;/code&gt; をテーブル内のすべてのレコードに適用します。 &lt;code&gt;Fun&lt;/code&gt; は、古いタイプのレコードを取り、新しいタイプの変換されたレコードを返す関数です。引数 &lt;code&gt;Fun&lt;/code&gt; はアトム &lt;code&gt;ignore&lt;/code&gt; にすることもできます。これは、テーブルに関するメタデータのみが更新されることを示します。 &lt;code&gt;ignore&lt;/code&gt; 使用は推奨されませんが、ユーザーが独自の変換を行う可能性として含まれています。</target>
        </trans-unit>
        <trans-unit id="cf3f39b03019ec061c371b31fff84840bf62260f" translate="yes" xml:space="preserve">
          <source>Applies file extension specific rules to find the source file for a given object file relative to the object directory. For example, for a file with the extension &lt;code&gt;.beam&lt;/code&gt;, the default rule is to look for a file with a corresponding extension &lt;code&gt;.erl&lt;/code&gt; by replacing the suffix &lt;code&gt;&quot;ebin&quot;&lt;/code&gt; of the object directory path with &lt;code&gt;&quot;src&quot;&lt;/code&gt; or &lt;code&gt;&quot;src/*&quot;&lt;/code&gt;. The file search is done through &lt;code&gt;&lt;a href=&quot;#find_file-3&quot;&gt;find_file/3&lt;/a&gt;&lt;/code&gt;. The directory of the object file is always tried before any other directory specified by the rules.</source>
          <target state="translated">ファイル拡張子固有のルールを適用して、オブジェクトディレクトリを基準にして、指定されたオブジェクトファイルのソースファイルを検索します。たとえば、拡張子が &lt;code&gt;.beam&lt;/code&gt; のファイルの場合、デフォルトのルールは、オブジェクトディレクトリパスのサフィックス &lt;code&gt;&quot;ebin&quot;&lt;/code&gt; を &lt;code&gt;&quot;src&quot;&lt;/code&gt; または &lt;code&gt;&quot;src/*&quot;&lt;/code&gt; 置き換えることにより、対応する拡張子 &lt;code&gt;.erl&lt;/code&gt; のファイルを探すことです。ファイル検索は &lt;code&gt;&lt;a href=&quot;#find_file-3&quot;&gt;find_file/3&lt;/a&gt;&lt;/code&gt; を介して行われます。オブジェクトファイルのディレクトリは、ルールで指定された他のディレクトリの前に常に試行されます。</target>
        </trans-unit>
        <trans-unit id="e8f326da15ffb7ae813d23c15eec50f7c444699f" translate="yes" xml:space="preserve">
          <source>Applying an &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt;&lt;code&gt;E&lt;/code&gt; to an argument list &lt;code&gt;A&lt;/code&gt; is meant in the sense of &lt;code&gt;eval([E|A])&lt;/code&gt;.</source>
          <target state="translated">引数リスト &lt;code&gt;A&lt;/code&gt; に &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; &lt;code&gt;E&lt;/code&gt; を適用することは、 &lt;code&gt;eval([E|A])&lt;/code&gt; の意味で意味されます。</target>
        </trans-unit>
        <trans-unit id="b14b38298fd4bda910b4630394ad60fbf3511557" translate="yes" xml:space="preserve">
          <source>Applying an exported function (&lt;code&gt;Mod:Name()&lt;/code&gt;, &lt;code&gt;apply(Mod, Name, [])&lt;/code&gt;) is about twice as expensive as calling a fun or about &lt;strong&gt;six times&lt;/strong&gt; as expensive as calling a local function.</source>
          <target state="translated">エクスポートされた関数（ &lt;code&gt;Mod:Name()&lt;/code&gt; 、 &lt;code&gt;apply(Mod, Name, [])&lt;/code&gt; ）を適用すると、funを呼び出す場合の約&lt;strong&gt;2倍&lt;/strong&gt;、または約&lt;strong&gt;6倍の&lt;/strong&gt;コストがかかります。&lt;strong&gt;&lt;/strong&gt;、ローカル関数を呼び出すコストがかかります。</target>
        </trans-unit>
        <trans-unit id="953254328751bb2f8e674cc873b7ff2bdf1e5334" translate="yes" xml:space="preserve">
          <source>Approach to Extensibility</source>
          <target state="translated">拡張性の考え方</target>
        </trans-unit>
        <trans-unit id="0d9fa01dbd526bfbb910c0a4cf194e3ddc6ecb6f" translate="yes" xml:space="preserve">
          <source>Approximate consumed fraction of a full time-slice in percent.</source>
          <target state="translated">フルタイムスライスのおおよその消費割合をパーセントで表示しています。</target>
        </trans-unit>
        <trans-unit id="3c77ccb79f8b6f72613400296314a0c96ee58298" translate="yes" xml:space="preserve">
          <source>Approximation of '$1' | '$2' | '$3' | ...</source>
          <target state="translated">'$1'の近似|'$2'の近似|'$3'の近似|...</target>
        </trans-unit>
        <trans-unit id="af4f4762f9bd3f0f4a10caf5b6e63dc4ce543724" translate="yes" xml:space="preserve">
          <source>Arabic</source>
          <target state="translated">Arabic</target>
        </trans-unit>
        <trans-unit id="9a1bdf411ab1c83198eecd5f0731a5c27bbb4381" translate="yes" xml:space="preserve">
          <source>Arabic Letter Mark</source>
          <target state="translated">アラビア文字マーク</target>
        </trans-unit>
        <trans-unit id="594b76f0b7b11a63e0ba97c983e39193011c18c1" translate="yes" xml:space="preserve">
          <source>Arbitrary derived data formats are supported by the dictionary interface.</source>
          <target state="translated">辞書インタフェースでは、任意の派生データ形式がサポートされています。</target>
        </trans-unit>
        <trans-unit id="a286f7c446f5fbd534896a188edddbc7d7a34e76" translate="yes" xml:space="preserve">
          <source>Arbitrary term state</source>
          <target state="translated">任意項の状態</target>
        </trans-unit>
        <trans-unit id="b4ea29fb4d4c1648e6d2e3c64705a89e987e421d" translate="yes" xml:space="preserve">
          <source>Are there other ways to do this that are equivalent and more efficient?</source>
          <target state="translated">他にも等価で効率的な方法があるのでしょうか?</target>
        </trans-unit>
        <trans-unit id="c7427a7532716d8ddc0f775b7a270adc70ce506b" translate="yes" xml:space="preserve">
          <source>Args :: term(),</source>
          <target state="translated">Args ::term()。</target>
        </trans-unit>
        <trans-unit id="0fde5a51f492378b1ac1c7a090a3a9a9c4d7e9b5" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Args&lt;/code&gt; is a list of &lt;code&gt;{Key, Val}&lt;/code&gt; tuples, where the following values are allowed:</source>
          <target state="translated">Argument &lt;code&gt;Args&lt;/code&gt; は &lt;code&gt;{Key, Val}&lt;/code&gt; リストですタプルのあり、次の値を使用できます。</target>
        </trans-unit>
        <trans-unit id="2a8f4ad3dae9bd362edcdfe9517b3ed392fd27ef" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Args&lt;/code&gt; is used to set &lt;code&gt;erl&lt;/code&gt; command-line arguments. If provided, it is passed to the new node and can be used for a variety of purposes; see &lt;code&gt;erl(1)&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Args&lt;/code&gt; は、 &lt;code&gt;erl&lt;/code&gt; コマンドライン引数を設定するために使用されます。指定すると、新しいノードに渡され、さまざまな目的に使用できます。 &lt;code&gt;erl(1)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="528cc3f851bb138092b3a54cd9007848b26b85a1" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Beam&lt;/code&gt;, which can be a string or an atom, specifies either the module name or the path to the source code, with or without extension &lt;code&gt;&quot;.erl&quot;&lt;/code&gt;. In either case, the module must be known by the code server, that is, &lt;code&gt;code:which(Module)&lt;/code&gt; must succeed.</source>
          <target state="translated">引数 &lt;code&gt;Beam&lt;/code&gt; は、文字列またはアトムであり、モジュール名またはソースコードへのパスのいずれかを指定します。拡張子は &lt;code&gt;&quot;.erl&quot;&lt;/code&gt; です。どちらの場合でも、モジュールはコードサーバーによって認識されている必要があります。つまり、 &lt;code&gt;code:which(Module)&lt;/code&gt; です。は成功する必要があります。</target>
        </trans-unit>
        <trans-unit id="e0c91ae2ecb7961a54a5e641d90a053be1d77b62" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Category&lt;/code&gt; in the previous example can have the value (atom) &lt;code&gt;sys_config&lt;/code&gt; (blue background), &lt;code&gt;sys_state&lt;/code&gt; (yellow background), or &lt;code&gt;error&lt;/code&gt; (white text on red background).</source>
          <target state="translated">前の例の引数 &lt;code&gt;Category&lt;/code&gt; には、値（アトム） &lt;code&gt;sys_config&lt;/code&gt; （青色の背景）、 &lt;code&gt;sys_state&lt;/code&gt; （黄色の背景）、または &lt;code&gt;error&lt;/code&gt; （赤色の背景に白いテキスト）を設定できます。</target>
        </trans-unit>
        <trans-unit id="cf43e2c4fa0b2acf4779f5e6cae85724db020b9a" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;ExtraOptions&lt;/code&gt; is added to the options found in the configuration file. If the same options are specified, the values from the configuration file overwrite &lt;code&gt;ExtraOptions&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;ExtraOptions&lt;/code&gt; は、構成ファイルにあるオプションに追加されます。同じオプションが指定されている場合、構成ファイルの値によって &lt;code&gt;ExtraOptions&lt;/code&gt; が上書きされます。</target>
        </trans-unit>
        <trans-unit id="c6e370d885f073ebe4056fc20b4ead3d6c0bc12b" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;FlagList&lt;/code&gt; must be &lt;code&gt;[]&lt;/code&gt; for receive tracing.</source>
          <target state="translated">引数 &lt;code&gt;FlagList&lt;/code&gt; は &lt;code&gt;[]&lt;/code&gt; である必要がありますトレースを受信するには、であるます。</target>
        </trans-unit>
        <trans-unit id="63c68c228727c0c08a966c916cd09a8193ea4126" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;FlagList&lt;/code&gt; must be &lt;code&gt;[]&lt;/code&gt; for send tracing.</source>
          <target state="translated">トレースを送信するには、引数 &lt;code&gt;FlagList&lt;/code&gt; が &lt;code&gt;[]&lt;/code&gt; である必要があります。</target>
        </trans-unit>
        <trans-unit id="5969bfd1f2a4922bae1c797825bd94636e7492ca" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Fun&lt;/code&gt; can also be the atom &lt;code&gt;ignore&lt;/code&gt;, which indicates that only the metadata about the table is updated. Use of &lt;code&gt;ignore&lt;/code&gt; is not recommended (as it creates inconsistencies between the metadata and the actual data) but it is included as a possibility for the user do to an own (offline) transform.</source>
          <target state="translated">引数 &lt;code&gt;Fun&lt;/code&gt; はアトム &lt;code&gt;ignore&lt;/code&gt; にすることもできます。これは、テーブルに関するメタデータのみが更新されることを示します。メタデータと実際のデータの間に不整合が生じるため、 &lt;code&gt;ignore&lt;/code&gt; 使用は推奨されませんが、ユーザーが独自の（オフライン）変換を行う可能性として含まれています。</target>
        </trans-unit>
        <trans-unit id="ede8746fe6cfaaaacae3ce131c1347e609e2da3f" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Importance&lt;/code&gt; specifies a level of importance that, compared to a verbosity level (general and/or set per category), determines if the printout is to be visible. &lt;code&gt;Importance&lt;/code&gt; is any integer in the range 0..99. Predefined constants exist in the &lt;code&gt;ct.hrl&lt;/code&gt; header file. The default importance level, &lt;code&gt;?STD_IMPORTANCE&lt;/code&gt; (used if argument &lt;code&gt;Importance&lt;/code&gt; is not provided), is 50. This is also the importance used for standard I/O, for example, from printouts made with &lt;code&gt;io:format/2&lt;/code&gt;, &lt;code&gt;io:put_chars/1&lt;/code&gt;, and so on.</source>
          <target state="translated">引数の &lt;code&gt;Importance&lt;/code&gt; 度は、詳細レベル（一般および/またはカテゴリごとに設定）と比較して、印刷物を表示するかどうかを決定する重要度のレベルを指定します。 &lt;code&gt;Importance&lt;/code&gt; は0〜99の範囲の整数です。定義済み定数は &lt;code&gt;ct.hrl&lt;/code&gt; ヘッダーファイルにあります。デフォルトの重要度レベル &lt;code&gt;?STD_IMPORTANCE&lt;/code&gt; （引数 &lt;code&gt;Importance&lt;/code&gt; が指定されていない場合に使用）は50です。これは、たとえば &lt;code&gt;io:format/2&lt;/code&gt; 、 &lt;code&gt;io:put_chars/1&lt;/code&gt; で作成された印刷物からの標準I / Oにも使用される重要度です。、 等々。</target>
        </trans-unit>
        <trans-unit id="a74c242839b6e17cec6e9fda29e9cd4d39199929" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Length&lt;/code&gt; is meaningful only when the socket is in mode &lt;code&gt;raw&lt;/code&gt; and denotes the number of bytes to read. If &lt;code&gt;Length&lt;/code&gt; = 0, all available bytes are returned. If &lt;code&gt;Length&lt;/code&gt; &amp;gt; 0, exactly &lt;code&gt;Length&lt;/code&gt; bytes are returned, or an error; possibly discarding less than &lt;code&gt;Length&lt;/code&gt; bytes of data when the socket gets closed from the other side.</source>
          <target state="translated">引数の &lt;code&gt;Length&lt;/code&gt; は、ソケットが &lt;code&gt;raw&lt;/code&gt; モードの場合にのみ意味があり、読み取るバイト数を示します。 &lt;code&gt;Length&lt;/code&gt; = 0の場合、使用可能なすべてのバイトが返されます。 &lt;code&gt;Length&lt;/code&gt; &amp;gt; 0の場合、正確に &lt;code&gt;Length&lt;/code&gt; バイトが返されるか、エラーが返されます。 &lt;code&gt;Length&lt;/code&gt; 未満を破棄する可能性がありますソケットが反対側から閉じられるときに、データのバイトます。</target>
        </trans-unit>
        <trans-unit id="cbac04ffb93617fd9cb7fd3fdb28dcbec27f1793" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Length&lt;/code&gt; is only meaningful when the socket is in &lt;code&gt;raw&lt;/code&gt; mode and denotes the number of bytes to read. If &lt;code&gt;Length&lt;/code&gt; is &lt;code&gt;0&lt;/code&gt;, all available bytes are returned. If &lt;code&gt;Length&lt;/code&gt; &amp;gt; &lt;code&gt;0&lt;/code&gt;, exactly &lt;code&gt;Length&lt;/code&gt; bytes are returned, or an error; possibly discarding less than &lt;code&gt;Length&lt;/code&gt; bytes of data when the socket is closed from the other side.</source>
          <target state="translated">引数の &lt;code&gt;Length&lt;/code&gt; は、ソケットが &lt;code&gt;raw&lt;/code&gt; モードの場合にのみ意味があり、読み取るバイト数を示します。 &lt;code&gt;Length&lt;/code&gt; が &lt;code&gt;0&lt;/code&gt; の場合、使用可能なすべてのバイトが返されます。 &lt;code&gt;Length&lt;/code&gt; &amp;gt; &lt;code&gt;0&lt;/code&gt; の場合、正確に &lt;code&gt;Length&lt;/code&gt; バイトが返されるか、エラーが返されます。 &lt;code&gt;Length&lt;/code&gt; 未満を破棄する可能性がありますソケットが反対側から閉じられると、データのバイトます。</target>
        </trans-unit>
        <trans-unit id="7df54cbc41d8be6702a7d18339b129a60b117176" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;MFA&lt;/code&gt; is to be a tuple, such as &lt;code&gt;{Module, Function, Arity}&lt;/code&gt;, or the atom &lt;code&gt;on_load&lt;/code&gt; (described below). It can be the module, function, and arity for a function (or a BIF in any module). The atom &lt;code&gt;'_'&lt;/code&gt; can be used as a wildcard in any of the following ways:</source>
          <target state="translated">引数 &lt;code&gt;MFA&lt;/code&gt; は、 &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; &lt;code&gt;on_load&lt;/code&gt; }などのタプル、またはアトムon_load（以下で説明）です。これは、モジュール、関数、および関数（または任意のモジュールのBIF）のアリティです。アトム &lt;code&gt;'_'&lt;/code&gt; は、次のいずれかの方法でワイルドカードとして使用できます。</target>
        </trans-unit>
        <trans-unit id="9c5ab418823236be2e40f29077d515164f418559" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;MatchSpec&lt;/code&gt; can take the following forms:</source>
          <target state="translated">引数 &lt;code&gt;MatchSpec&lt;/code&gt; は次の形式を取ることができます。</target>
        </trans-unit>
        <trans-unit id="632db5ffef7ffbf7896b027d5a4845557c315e16" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Misc&lt;/code&gt; can be used to save internal data in a process, for example, its state. It is sent to &lt;code&gt;Module:system_continue/3&lt;/code&gt; or &lt;code&gt;Module:system_terminate/4&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Misc&lt;/code&gt; は、プロセスの内部データ（状態など）を保存するために使用できます。 &lt;code&gt;Module:system_continue/3&lt;/code&gt; または &lt;code&gt;Module:system_terminate/4&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="f490daf6a024205229629ca457c94764493e4043" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Modes&lt;/code&gt; is a list of possible modes, see &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt;, and defaults to &lt;code&gt;[]&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Modes&lt;/code&gt; は可能なモードのリストであり、 &lt;code&gt;&lt;a href=&quot;#open-2&quot;&gt;open/2&lt;/a&gt;&lt;/code&gt; を参照してください。デフォルトは &lt;code&gt;[]&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="c41785291fefd33e5c56b0234e5a635c5016d3b1" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;NodesOrDist&lt;/code&gt; can either be a list of nodes or the result from the function &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, frag_dist)&lt;/a&gt;&lt;/code&gt;. Argument &lt;code&gt;NodesOrDist&lt;/code&gt; is assumed to be a sorted list with the best nodes to host new replicas first in the list. The new fragment gets the same number of replicas as the first fragment (see &lt;code&gt;n_ram_copies&lt;/code&gt;, &lt;code&gt;n_disc_copies&lt;/code&gt;, and &lt;code&gt;n_disc_only_copies&lt;/code&gt;). The &lt;code&gt;NodesOrDist&lt;/code&gt; list must at least contain one element for each replica that needs to be allocated.</source>
          <target state="translated">引数 &lt;code&gt;NodesOrDist&lt;/code&gt; は、ノードのリストまたは関数 &lt;code&gt;&lt;a href=&quot;mnesia#table_info-2&quot;&gt;mnesia:table_info(Tab, frag_dist)&lt;/a&gt;&lt;/code&gt; の結果のいずれかです。引数 &lt;code&gt;NodesOrDist&lt;/code&gt; は、リストの最初に新しいレプリカをホストするのに最適なノードを持つソートされたリストであると想定されます。新しいフラグメントは、最初のフラグメントと同じ数のレプリカを取得します（ &lt;code&gt;n_ram_copies&lt;/code&gt; 、 &lt;code&gt;n_disc_copies&lt;/code&gt; 、および &lt;code&gt;n_disc_only_copies&lt;/code&gt; を参照）。 &lt;code&gt;NodesOrDist&lt;/code&gt; のリスト必見少なくとも割り当てる必要が各レプリカに1つの要素が含まれています。</target>
        </trans-unit>
        <trans-unit id="46d85843a85d8a0d52723585742b11afd0899160" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;OptionList&lt;/code&gt; can be used to specify certain behavior regarding ports and triggering monitors under certain conditions:</source>
          <target state="translated">引数 &lt;code&gt;OptionList&lt;/code&gt; は、特定の条件下でのポートとトリガーモニターに関する特定の動作を指定するために使用できます。</target>
        </trans-unit>
        <trans-unit id="de736e1203b55111eca5eccfabbf9c9e91ef73a2" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Options&lt;/code&gt; is a list of &lt;code&gt;{Key, Val}&lt;/code&gt; tuples, where the following values are allowed:</source>
          <target state="translated">引数 &lt;code&gt;Options&lt;/code&gt; は、次の値が許可されている &lt;code&gt;{Key, Val}&lt;/code&gt; タプルのリストです。</target>
        </trans-unit>
        <trans-unit id="f846b2639fdccdd7fe83e5494fa41e5843c66eb2" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;PreArgs&lt;/code&gt; is a list of tagged values. There are two tags, &lt;code&gt;parent_value&lt;/code&gt; and &lt;code&gt;stop_fun&lt;/code&gt;, used by Mnesia for managing transactions.</source>
          <target state="translated">引数 &lt;code&gt;PreArgs&lt;/code&gt; は、タグ付けされた値のリストです。Mnesiaがトランザクションを管理するために使用する2つのタグ &lt;code&gt;parent_value&lt;/code&gt; と &lt;code&gt;stop_fun&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="63f20a5312d5f256e87436cce6c76d1a556dfbb0" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Server&lt;/code&gt; in the SFTP functions is only to be used for SFTP sessions that have been started on existing SSH connections (that is, when the original connection type is &lt;code&gt;ssh&lt;/code&gt;). Whenever the connection type is &lt;code&gt;sftp&lt;/code&gt;, use the SSH connection reference only.</source>
          <target state="translated">SFTP関数のArgument &lt;code&gt;Server&lt;/code&gt; は、既存のSSH接続で開始された（つまり、元の接続タイプが &lt;code&gt;ssh&lt;/code&gt; である）SFTPセッションにのみ使用されます。接続タイプが &lt;code&gt;sftp&lt;/code&gt; の場合は常に、SSH接続参照のみを使用してください。</target>
        </trans-unit>
        <trans-unit id="127495432a40845ab9ada867dc7fc2fee4865175" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;SnmpStruct&lt;/code&gt; is a list of SNMP information. Currently, the only information needed is information about the key types in the table. Multiple keys cannot be handled in Mnesia, but many SNMP tables have multiple keys. Therefore, the following convention is used: if a table has multiple keys, these must always be stored as a tuple of the keys. Information about the key types is specified as a tuple of atoms describing the types. The only significant type is &lt;code&gt;fix_string&lt;/code&gt;. This means that a string has a fixed size.</source>
          <target state="translated">引数 &lt;code&gt;SnmpStruct&lt;/code&gt; は、SNMP情報のリストです。現在、必要な情報は、テーブル内のキータイプに関する情報だけです。Mnesiaでは複数のキーを処理できませんが、多くのSNMPテーブルには複数のキーがあります。したがって、次の規則が使用されます。テーブルに複数のキーがある場合、これらは常にキーのタプルとして格納する必要があります。キータイプに関する情報は、タイプを説明するアトムのタプルとして指定されます。唯一の重要なタイプは &lt;code&gt;fix_string&lt;/code&gt; です。つまり、文字列のサイズは固定されています。</target>
        </trans-unit>
        <trans-unit id="134ccc578ec25f4a1b41da580e909377b6e00202" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;SpawnOpts&lt;/code&gt;, if specified, is passed as the last argument to the &lt;code&gt;spawn_opt/2,3,4,5&lt;/code&gt; BIF.</source>
          <target state="translated">引数 &lt;code&gt;SpawnOpts&lt;/code&gt; が指定されている場合は、最後の引数として &lt;code&gt;spawn_opt/2,3,4,5&lt;/code&gt; BIFに渡されます。</target>
        </trans-unit>
        <trans-unit id="e3cedb4f6297db65a16db517b2fa86b4c83da9c5" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;State&lt;/code&gt; is a tuple &lt;code&gt;{ShellState,ExprState}&lt;/code&gt;. The return value &lt;code&gt;NewState&lt;/code&gt; has the same form. This can be used to carry a state between calls to the callback functions. Data saved in &lt;code&gt;ShellState&lt;/code&gt; lives through an entire shell session. Data saved in &lt;code&gt;ExprState&lt;/code&gt; lives only through the evaluation of the current expression.</source>
          <target state="translated">引数の &lt;code&gt;State&lt;/code&gt; は、タプル &lt;code&gt;{ShellState,ExprState}&lt;/code&gt; です。戻り値 &lt;code&gt;NewState&lt;/code&gt; も同じ形式です。これは、コールバック関数の呼び出し間で状態を運ぶために使用できます。 &lt;code&gt;ShellState&lt;/code&gt; に保存されたデータは、シェルセッション全体を通じて存続します。 &lt;code&gt;ExprState&lt;/code&gt; に保存されたデータは、現在の式の評価を通じてのみ存続します。</target>
        </trans-unit>
        <trans-unit id="4b4b0aee165785dc7cf379568e4015cc77271225" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;String&lt;/code&gt; is expected to start with a valid text represented float (the digits are ASCII values). Remaining characters in the string after the float are returned in &lt;code&gt;Rest&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;String&lt;/code&gt; は、フロートで表された有効なテキストで始まることが期待されます（数字はASCII値です）。フロートの後の文字列の残りの文字は &lt;code&gt;Rest&lt;/code&gt; に返されます。</target>
        </trans-unit>
        <trans-unit id="99bddf0ad5e13463903ca5db19b6f229eaaa62d0" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;String&lt;/code&gt; is expected to start with a valid text represented integer (the digits are ASCII values). Remaining characters in the string after the integer are returned in &lt;code&gt;Rest&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;String&lt;/code&gt; は、有効なテキストで表される整数で始まることが期待されます（数字はASCII値です）。整数の後の文字列の残りの文字は &lt;code&gt;Rest&lt;/code&gt; に返されます。</target>
        </trans-unit>
        <trans-unit id="8f022d7270d5362d0771335ef05b9154a045868e" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;Type&lt;/code&gt; specifies the type of the application. If omitted, it defaults to &lt;code&gt;temporary&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Type&lt;/code&gt; は、アプリケーションのタイプを指定します。省略した場合、デフォルトで &lt;code&gt;temporary&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="52529ec5b3dbe90218521bf7062ae0ba51481ae8" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;event&lt;/code&gt; identifies the event object. On Unix systems, the functions &lt;code&gt;select&lt;/code&gt;/&lt;code&gt;poll&lt;/code&gt; are used. The event object must be a socket, pipe or other file descriptor object that &lt;code&gt;select&lt;/code&gt;/&lt;code&gt;poll&lt;/code&gt; can use.</source>
          <target state="translated">引数 &lt;code&gt;event&lt;/code&gt; は、イベントオブジェクトを識別します。Unixシステムでは、関数 &lt;code&gt;select&lt;/code&gt; / &lt;code&gt;poll&lt;/code&gt; が使用されます。イベントオブジェクトは、ソケット、パイプ、または &lt;code&gt;select&lt;/code&gt; / &lt;code&gt;poll&lt;/code&gt; が使用できるその他のファイル記述子オブジェクトである必要があります。</target>
        </trans-unit>
        <trans-unit id="8c82d16dce6414cf83d8d93f8e672741f4d9ca8a" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;event&lt;/code&gt; is not a valid OS event object.</source>
          <target state="translated">引数 &lt;code&gt;event&lt;/code&gt; は有効なOSイベントオブジェクトではありません。</target>
        </trans-unit>
        <trans-unit id="7980baebdda9326ef971ef864a7e3442b2b16145" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;index&lt;/code&gt; is updated, that is, this function can be viewed as a decode function that decodes a term into a human-readable format.</source>
          <target state="translated">引数 &lt;code&gt;index&lt;/code&gt; が更新されます。つまり、この関数は、用語を人間が読める形式にデコードするデコード関数と見なすことができます。</target>
        </trans-unit>
        <trans-unit id="a75ce9ef93d0395faba2903cbdd1f49f30b2929e" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;init&lt;/code&gt; is a pointer to an &lt;code&gt;&lt;a href=&quot;#ErlNifResourceTypeInit&quot;&gt;ErlNifResourceTypeInit&lt;/a&gt;&lt;/code&gt; structure that contains the function pointers for destructor, down and stop callbacks for the resource type.</source>
          <target state="translated">引数 &lt;code&gt;init&lt;/code&gt; は、リソースタイプのデストラクタ、ダウン、およびストップコールバックの関数ポインタを含む &lt;code&gt;&lt;a href=&quot;#ErlNifResourceTypeInit&quot;&gt;ErlNifResourceTypeInit&lt;/a&gt;&lt;/code&gt; 構造体へのポインタです。</target>
        </trans-unit>
        <trans-unit id="9dfed7a573331b550431a030fa57b0d3e26d11e8" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;mode&lt;/code&gt; describes the type of events to wait for. It can be &lt;code&gt;ERL_NIF_SELECT_READ&lt;/code&gt;, &lt;code&gt;ERL_NIF_SELECT_WRITE&lt;/code&gt; or a bitwise OR combination to wait for both. It can also be &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; which is described further below. When a read or write event is triggered, a notification message like this is sent to the process identified by &lt;code&gt;pid&lt;/code&gt;:</source>
          <target state="translated">引数 &lt;code&gt;mode&lt;/code&gt; は、待機するイベントのタイプを示します。 &lt;code&gt;ERL_NIF_SELECT_READ&lt;/code&gt; 、 &lt;code&gt;ERL_NIF_SELECT_WRITE&lt;/code&gt; 、または両方を待機するビット単位のORの組み合わせを使用できます。以下でさらに説明する &lt;code&gt;ERL_NIF_SELECT_STOP&lt;/code&gt; にすることもできます。読み取りまたは書き込みイベントがトリガーされると、次のような通知メッセージが &lt;code&gt;pid&lt;/code&gt; で識別されるプロセスに送信されます。</target>
        </trans-unit>
        <trans-unit id="5a90058d12d7cac1628a470a0a7fcf5ea024b094" translate="yes" xml:space="preserve">
          <source>Argument &lt;code&gt;obj&lt;/code&gt; is a resource object obtained from &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt;. The purpose of the resource objects is as a container of the event object to manage its state and lifetime. A handle to the resource is received in the notification message as &lt;code&gt;Obj&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;obj&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#enif_alloc_resource&quot;&gt;enif_alloc_resource&lt;/a&gt;&lt;/code&gt; から取得したリソースオブジェクトです。リソースオブジェクトの目的は、その状態と存続期間を管理するためのイベントオブジェクトのコンテナーとしてです。リソースのハンドルは、通知メッセージで &lt;code&gt;Obj&lt;/code&gt; として受信されます。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
