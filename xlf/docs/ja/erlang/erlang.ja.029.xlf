<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="2b4dcd80a65565039360cb58b9873fb3744a25eb" translate="yes" xml:space="preserve">
          <source>Log the given message.</source>
          <target state="translated">与えられたメッセージを記録します。</target>
        </trans-unit>
        <trans-unit id="257f9074dd9a3273e0ecc0bf2277c09f48d1ab6f" translate="yes" xml:space="preserve">
          <source>Logger API functions that apply to handler configuration are:</source>
          <target state="translated">ハンドラの設定に適用されるロガーAPI関数は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="5304ec3e6860fd753d440e00b333f7b7952e2873" translate="yes" xml:space="preserve">
          <source>Logger API functions that apply to the primary Logger configuration are:</source>
          <target state="translated">プライマリ ロガー設定に適用されるロガー API 関数は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="459822e04b58487fbab71512de0c13bbcb5802d9" translate="yes" xml:space="preserve">
          <source>Logger adds the following metadata to each log event:</source>
          <target state="translated">ロガーは各ログイベントに以下のメタデータを追加します。</target>
        </trans-unit>
        <trans-unit id="37165244e9071117a04c3897531cff43e65233d3" translate="yes" xml:space="preserve">
          <source>Logger allows adding multiple instances of a handler callback. That is, if a callback module implementation allows it, you can add multiple handler instances using the same callback module. The different instances are identified by unique handler identities.</source>
          <target state="translated">Logger では、ハンドラコールバックの複数のインスタンスを追加することができます。つまり、コールバックモジュールの実装が許可している場合、同じコールバックモジュールを使用して複数のハンドラインスタンスを追加することができます。異なるインスタンスは、一意のハンドラ ID で識別されます。</target>
        </trans-unit>
        <trans-unit id="32814cbaff4ab32f839a5572bf470491707d186f" translate="yes" xml:space="preserve">
          <source>Logger does, to a certain extent, check its input data before forwarding a log event to filters and handlers. It does, however, not evaluate report callbacks, or check the validity of format strings and arguments. This means that all filters and handlers must be careful when formatting the data of a log event, making sure that it does not crash due to bad input data or faulty callbacks.</source>
          <target state="translated">ロガーは、ログイベントをフィルタやハンドラに転送する前に、入力データをある程度チェックします。しかし、レポートのコールバックを評価したり、フォーマット文字列や引数の有効性をチェックしたりはしません。つまり、すべてのフィルタやハンドラは、ログイベントのデータをフォーマットする際に注意しなければならず、悪い入力データや欠陥のあるコールバックによってクラッシュしないようにしなければなりません。</target>
        </trans-unit>
        <trans-unit id="81f578032fd43b4ad866def6cb23e116c34a3a72" translate="yes" xml:space="preserve">
          <source>Logger functions</source>
          <target state="translated">ロガー機能</target>
        </trans-unit>
        <trans-unit id="5a30a202ff6e7537109cfe3ce75b8beb4047b16f" translate="yes" xml:space="preserve">
          <source>Logger merges all the metadata maps before forwarding the log event to the handlers. If the same keys occur, values from the log call overwrite process metadata, which in turn overwrite values set by Logger.</source>
          <target state="translated">Logger は、ログ イベントをハンドラに転送する前に、すべてのメタデータ マップをマージします。同じキーが発生した場合、ログ呼び出しからの値がプロセスのメタデータを上書きし、その結果、Logger によって設定された値が上書きされます。</target>
        </trans-unit>
        <trans-unit id="12780a5781ba0da418e4440c2f80cf58b1993381" translate="yes" xml:space="preserve">
          <source>Logger provides backwards compatibility with &lt;code&gt;error_logger&lt;/code&gt; in the following ways:</source>
          <target state="translated">ロガーは、以下の方法で &lt;code&gt;error_logger&lt;/code&gt; との下位互換性を提供します。</target>
        </trans-unit>
        <trans-unit id="57003616863fe634c645e342ee9080681e419c5f" translate="yes" xml:space="preserve">
          <source>Logging</source>
          <target state="translated">Logging</target>
        </trans-unit>
        <trans-unit id="1dd635d9867292503b89dea88db780ad83186225" translate="yes" xml:space="preserve">
          <source>Logging API functions</source>
          <target state="translated">ロギングAPI機能</target>
        </trans-unit>
        <trans-unit id="a4cf2d82c9d86421275e3d731c6c1f28619eb2da" translate="yes" xml:space="preserve">
          <source>Logging of events during execution</source>
          <target state="translated">実行中のイベントのロギング</target>
        </trans-unit>
        <trans-unit id="70d888e147aabaf8fa1dfb2483f315253b5163ed" translate="yes" xml:space="preserve">
          <source>Logging to file with &lt;code&gt;ct:log/1,2,3,4,5&lt;/code&gt; or &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt; only works when &lt;code&gt;Common Test&lt;/code&gt; is running. Printouts with &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt; are however always displayed on screen.</source>
          <target state="translated">&lt;code&gt;ct:log/1,2,3,4,5&lt;/code&gt; または &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt; を使用したファイルへのロギングは、 &lt;code&gt;Common Test&lt;/code&gt; が実行されている場合にのみ機能します。ただし、 &lt;code&gt;ct:pal/1,2,3,4,5&lt;/code&gt; プリントアウトは常に画面に表示されます。</target>
        </trans-unit>
        <trans-unit id="f2e14633e86adb02560262087e31589175004916" translate="yes" xml:space="preserve">
          <source>Logging.</source>
          <target state="translated">Logging.</target>
        </trans-unit>
        <trans-unit id="c5d5c5fb2a8798e4f962780fba63386de96b07b6" translate="yes" xml:space="preserve">
          <source>Logical AND</source>
          <target state="translated">論理 AND</target>
        </trans-unit>
        <trans-unit id="e9b0aefdf7ed2c67abbfc572bbc5743979450674" translate="yes" xml:space="preserve">
          <source>Logical OR</source>
          <target state="translated">論理和</target>
        </trans-unit>
        <trans-unit id="93425a1fb1ee61afdd5c8bde53ad3e437fa5c378" translate="yes" xml:space="preserve">
          <source>Logical XOR</source>
          <target state="translated">論理XOR</target>
        </trans-unit>
        <trans-unit id="189c88af11bff23eaa5470818ba782219adfeb6c" translate="yes" xml:space="preserve">
          <source>Logical errors</source>
          <target state="translated">論理エラー</target>
        </trans-unit>
        <trans-unit id="b639be33714dfa7d1e5de7c8923f3afaa6ea2eb2" translate="yes" xml:space="preserve">
          <source>Logs a warning message. See &lt;code&gt;error_logger:warning_msg/2&lt;/code&gt; for details.</source>
          <target state="translated">警告メッセージをログに記録します。詳細については、 &lt;code&gt;error_logger:warning_msg/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="5c7284beba7b87f4db66029f580195bdcb14e18a" translate="yes" xml:space="preserve">
          <source>Logs an error message. See &lt;code&gt;error_logger:error_msg/2&lt;/code&gt; for details.</source>
          <target state="translated">エラーメッセージを記録します。詳細については、 &lt;code&gt;error_logger:error_msg/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="181bd8b6829579eef29a5e97835c83f4d8736de3" translate="yes" xml:space="preserve">
          <source>Logs an info message. See &lt;code&gt;error_logger:info_msg/2&lt;/code&gt; for details.</source>
          <target state="translated">情報メッセージをログに記録します。詳細については、 &lt;code&gt;error_logger:info_msg/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="631539dc5343898549c85b01b6e598967f305bce" translate="yes" xml:space="preserve">
          <source>Logs can be found in &lt;code&gt;/usr/local/erl-target/log&lt;/code&gt;. This directory is specified as an argument to &lt;code&gt;run_erl&lt;/code&gt;in the start script listed above.</source>
          <target state="translated">ログは &lt;code&gt;/usr/local/erl-target/log&lt;/code&gt; にあります。このディレクトリは、上記の起動スクリプトで &lt;code&gt;run_erl&lt;/code&gt; の引数として指定されています。</target>
        </trans-unit>
        <trans-unit id="bee8d520364ca487a1e8615fbc5892acb2cf4610" translate="yes" xml:space="preserve">
          <source>Look for &lt;code&gt;example.beam&lt;/code&gt; in the code path, parse the BEAM file and retrieve the &lt;code&gt;Docs&lt;/code&gt; chunk. If the chunk is not available, it should look for &quot;example.beam&quot; in the code path and find the &lt;code&gt;doc/chunks/example.chunk&lt;/code&gt; file in the application that defines the &lt;code&gt;example&lt;/code&gt; module. If a .chunk file is not available, then documentation is not available.</source>
          <target state="translated">コードパスで &lt;code&gt;example.beam&lt;/code&gt; を探し、BEAMファイルを解析して、 &lt;code&gt;Docs&lt;/code&gt; チャンクを取得します。チャンクが利用できない場合は、コードパスで「example.beam」を探し、 &lt;code&gt;example&lt;/code&gt; モジュールを定義するアプリケーションで &lt;code&gt;doc/chunks/example.chunk&lt;/code&gt; ファイルを見つける必要があります。.chunkファイルが利用できない場合、ドキュメントは利用できません。</target>
        </trans-unit>
        <trans-unit id="d394eaa2c896b383401e9868f1f1c7fd394042f0" translate="yes" xml:space="preserve">
          <source>Look up all current Logger configuration, including primary and handler configuration, and module level settings.</source>
          <target state="translated">プライマリおよびハンドラの設定、モジュール レベルの設定など、現在のロガーのすべての設定を検索します。</target>
        </trans-unit>
        <trans-unit id="1ae68bf451cf6f0d3a38eb520585141004fe0c88" translate="yes" xml:space="preserve">
          <source>Look up all current Logger configuration, including primary, handler, and proxy configuration, and module level settings.</source>
          <target state="translated">プライマリ、ハンドラ、プロキシ設定、モジュール レベルの設定を含む、現在のロガーのすべての設定を検索します。</target>
        </trans-unit>
        <trans-unit id="2f067d3e406691e75fba8d1ab1c80c002673266e" translate="yes" xml:space="preserve">
          <source>Look up all current module levels. Returns a list containing one &lt;code&gt;{Module,Level}&lt;/code&gt; element for each module for which the module level was previously set with &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt; set_module_level/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のすべてのモジュールレベルを検索します。モジュールレベルが以前に &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt; set_module_level/2&lt;/a&gt;&lt;/code&gt; で設定されたモジュールごとに1つの &lt;code&gt;{Module,Level}&lt;/code&gt; 要素を含むリストを返します。</target>
        </trans-unit>
        <trans-unit id="467add5a91389ace0fffa89049ee83d9c088b039" translate="yes" xml:space="preserve">
          <source>Look up all current module levels. Returns a list containing one &lt;code&gt;{Module,Level}&lt;/code&gt; element for each module for which the module level was previously set with &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt;set_module_level/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">現在のすべてのモジュールレベルを調べます。モジュールレベルが以前に &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt;set_module_level/2&lt;/a&gt;&lt;/code&gt; で設定された各モジュールの1つの &lt;code&gt;{Module,Level}&lt;/code&gt; 要素を含むリストを返します。</target>
        </trans-unit>
        <trans-unit id="ed68e7f8cb77748b3410c3da1ddc86795dc0c780" translate="yes" xml:space="preserve">
          <source>Look up the current configuration for all handlers.</source>
          <target state="translated">すべてのハンドラーの現在の設定を調べます。</target>
        </trans-unit>
        <trans-unit id="a5084ee32b982850716660225421b03ec5c65767" translate="yes" xml:space="preserve">
          <source>Look up the current configuration for the Logger proxy.</source>
          <target state="translated">ロガー プロキシの現在の設定を検索します。</target>
        </trans-unit>
        <trans-unit id="67650debe1e8550cab53ba9b912a888f4830fbd0" translate="yes" xml:space="preserve">
          <source>Look up the current configuration for the given handler.</source>
          <target state="translated">与えられたハンドラの現在の設定を調べます。</target>
        </trans-unit>
        <trans-unit id="9f081df8fdfea5d9826fc29f0d5b6a73152406c1" translate="yes" xml:space="preserve">
          <source>Look up the current level for the given modules. Returns a list containing one &lt;code&gt;{Module,Level}&lt;/code&gt; element for each of the given modules for which the module level was previously set with &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt; set_module_level/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールの現在のレベルを検索します。モジュールレベルが以前に &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt; set_module_level/2&lt;/a&gt;&lt;/code&gt; で設定された、指定されたモジュールごとに1つの &lt;code&gt;{Module,Level}&lt;/code&gt; 要素を含むリストを返します。</target>
        </trans-unit>
        <trans-unit id="5b7fd66f8792b2995650ec41a426440bdc8c6525" translate="yes" xml:space="preserve">
          <source>Look up the current level for the given modules. Returns a list containing one &lt;code&gt;{Module,Level}&lt;/code&gt; element for each of the given modules for which the module level was previously set with &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt;set_module_level/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">指定されたモジュールの現在のレベルを調べます。モジュールレベルが以前に &lt;code&gt;&lt;a href=&quot;#set_module_level-2&quot;&gt;set_module_level/2&lt;/a&gt;&lt;/code&gt; で設定された特定のモジュールごとに1つの &lt;code&gt;{Module,Level}&lt;/code&gt; 要素を含むリストを返します。</target>
        </trans-unit>
        <trans-unit id="28a2ce6edf729b5984078bb368a73e647f062c59" translate="yes" xml:space="preserve">
          <source>Look up the current primary configuration for Logger.</source>
          <target state="translated">Logger の現在のプライマリ設定を検索します。</target>
        </trans-unit>
        <trans-unit id="48789371fd54ac83d13e3db9cfce2e95be6bb545" translate="yes" xml:space="preserve">
          <source>Look up the identities for all installed handlers.</source>
          <target state="translated">インストールされているすべてのハンドラの ID を調べます。</target>
        </trans-unit>
        <trans-unit id="9eafe480d9cb3d8a690b9224bbee0ac5a9549b6e" translate="yes" xml:space="preserve">
          <source>Lookahead assertions start with (?= for positive assertions and (?! for negative assertions. For example, the following matches a word followed by a semicolon, but does not include the semicolon in the match:</source>
          <target state="translated">ルックヘッドアサーションは、正のアサーションの場合は (?=)で始まり、負のアサーションの場合は (?!)で始まります。たとえば、以下の例では、セミコロンが続く単語にマッチしますが、セミコロンはマッチに含まれません。</target>
        </trans-unit>
        <trans-unit id="c07ff987e22dccf5863c21c8249616b8a6ed83fb" translate="yes" xml:space="preserve">
          <source>Lookbehind assertions start with (?&amp;lt;= for positive assertions and (?&amp;lt;! for negative assertions. For example, the following finds an occurrence of &quot;bar&quot; that is not preceded by &quot;foo&quot;:</source>
          <target state="translated">後読みアサーションは、（？&amp;lt;=の場合は正のアサーション、（？&amp;lt;！の場合は負のアサーション）で始まります。たとえば、次の例では、「foo」が前に付いていない「bar」のオカレンスを検索します。</target>
        </trans-unit>
        <trans-unit id="0b4292b6dd1e4f4ea19e5757b522cc47b1f50858" translate="yes" xml:space="preserve">
          <source>Looking at how &lt;code&gt;lists:append/1&lt;/code&gt; or &lt;code&gt;++&lt;/code&gt; would be implemented in plain Erlang, clearly the first list is copied:</source>
          <target state="translated">どのように &lt;code&gt;lists:append/1&lt;/code&gt; または &lt;code&gt;++&lt;/code&gt; がプレーンErlangで実装されるかを見て、明らかに最初のリストがコピーされます：</target>
        </trans-unit>
        <trans-unit id="ae8011d7d2dbc5d36c38aa015da2647371e61405" translate="yes" xml:space="preserve">
          <source>Looking at the &lt;code&gt;tut17&lt;/code&gt; code, you see that the &lt;code&gt;pong&lt;/code&gt; function itself is unchanged, the following lines work in the same way irrespective of on which node the &quot;ping&quot; process is executes:</source>
          <target state="translated">見ると &lt;code&gt;tut17&lt;/code&gt; のコード、あなたがいることがわかり &lt;code&gt;pong&lt;/code&gt; 機能自体は次の行にかかわらず、その上に、同じように機能「ピング」プロセスが実行されているノード、変更されていません。</target>
        </trans-unit>
        <trans-unit id="555c7665597e54d469c381ad38552ff5090271dc" translate="yes" xml:space="preserve">
          <source>Looking at the assembler code we can see three things: The heap requirement in this function turns out to be only six words, as seen by the &lt;code&gt;{test_heap,6,1}&lt;/code&gt; instruction. All the allocations are combined to a single instruction. The bulk of the data &lt;code&gt;{text, &quot;hello world!&quot;}&lt;/code&gt; is a &lt;strong&gt;literal&lt;/strong&gt;. Literals, sometimes referred to as constants, are not allocated in the function since they are a part of the module and allocated at load time.</source>
          <target state="translated">アセンブラコードを見ると、次の3つのことがわかります。 &lt;code&gt;{test_heap,6,1}&lt;/code&gt; 命令からわかるように、この関数のヒープ要件は6ワードしかないことがわかります。すべての割り当てが1つの命令に結合されます。データの大部分 &lt;code&gt;{text, &quot;hello world!&quot;}&lt;/code&gt; は&lt;strong&gt;リテラル&lt;/strong&gt;です。リテラルは、定数と呼ばれることもありますが、モジュールの一部であり、ロード時に割り当てられるため、関数には割り当てられません。</target>
        </trans-unit>
        <trans-unit id="dc4ea395786cdf2a9b882e1323bffb04f3d43ded" translate="yes" xml:space="preserve">
          <source>Looking at the function &lt;code&gt;ping/2&lt;/code&gt;, the second clause of &lt;code&gt;ping/2&lt;/code&gt; is executed since the value of the first argument is 3 (not 0) (first clause head is &lt;code&gt;ping(0,Pong_PID)&lt;/code&gt;, second clause head is &lt;code&gt;ping(N,Pong_PID)&lt;/code&gt;, so &lt;code&gt;N&lt;/code&gt; becomes 3).</source>
          <target state="translated">関数 &lt;code&gt;ping/2&lt;/code&gt; を見ると、最初の引数の値が3（0ではない）であるため、 &lt;code&gt;ping/2&lt;/code&gt; の2番目の句が実行されます（最初の句のヘッドは &lt;code&gt;ping(0,Pong_PID)&lt;/code&gt; 、2番目の句のヘッドは &lt;code&gt;ping(N,Pong_PID)&lt;/code&gt; なので、 &lt;code&gt;N&lt;/code&gt; は3）になります。</target>
        </trans-unit>
        <trans-unit id="bb76af27b840c114115effd83744ad34a439d0c6" translate="yes" xml:space="preserve">
          <source>Looking up only &lt;code&gt;{2,2}&lt;/code&gt; would not return &lt;code&gt;b&lt;/code&gt; and &lt;code&gt;c&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;{2,2}&lt;/code&gt; だけを検索しても、 &lt;code&gt;b&lt;/code&gt; および &lt;code&gt;c&lt;/code&gt; は返されません。</target>
        </trans-unit>
        <trans-unit id="79cecfb0f48fcf27b9c36092d68f350e007736e3" translate="yes" xml:space="preserve">
          <source>Looks for a file of the given name by applying suffix rules to the given directory path. For example, a rule &lt;code&gt;{&quot;ebin&quot;, &quot;src&quot;}&lt;/code&gt; means that if the directory path ends with &lt;code&gt;&quot;ebin&quot;&lt;/code&gt;, the corresponding path ending in &lt;code&gt;&quot;src&quot;&lt;/code&gt; should be searched.</source>
          <target state="translated">指定されたディレクトリパスにサフィックスルールを適用して、指定された名前のファイルを検索します。例えば、ルール &lt;code&gt;{&quot;ebin&quot;, &quot;src&quot;}&lt;/code&gt; のディレクトリパス終了するとことを意味する &lt;code&gt;&quot;ebin&quot;&lt;/code&gt; 、で終わる対応するパス &lt;code&gt;&quot;src&quot;&lt;/code&gt; 検索されなければなりません。</target>
        </trans-unit>
        <trans-unit id="572250e9df056859af227d0dcd9f4fa92b7ecd08" translate="yes" xml:space="preserve">
          <source>Looks up &lt;code&gt;Key&lt;/code&gt; in &lt;code&gt;Tree&lt;/code&gt;. Returns &lt;code&gt;{value, Value}&lt;/code&gt;, or &lt;code&gt;none&lt;/code&gt; if &lt;code&gt;Key&lt;/code&gt; is not present.</source>
          <target state="translated">見上げ &lt;code&gt;Key&lt;/code&gt; で &lt;code&gt;Tree&lt;/code&gt; 。戻り &lt;code&gt;{value, Value}&lt;/code&gt; 、又は &lt;code&gt;none&lt;/code&gt; 場合 &lt;code&gt;Key&lt;/code&gt; 存在しません。</target>
        </trans-unit>
        <trans-unit id="fb9dfef148e9ec6b8cf8c2740447332c851aec8e" translate="yes" xml:space="preserve">
          <source>Looks up a cache entry. Is to be callable from any process.</source>
          <target state="translated">キャッシュエントリを検索します。どのプロセスからでも呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="3a52acb767c4795552ad229633861bc31c72674b" translate="yes" xml:space="preserve">
          <source>Looks up a name in &lt;code&gt;global&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;global&lt;/code&gt; 名前を検索します。</target>
        </trans-unit>
        <trans-unit id="78101c6cc3d27d2ba6e58fe21274768cb0746cd8" translate="yes" xml:space="preserve">
          <source>Looks up a port by its registered name.</source>
          <target state="translated">登録されている名前でポートを調べます。</target>
        </trans-unit>
        <trans-unit id="30d78191ce5ffb897b0972e9eb8f6d616fa60717" translate="yes" xml:space="preserve">
          <source>Looks up a process by its registered name.</source>
          <target state="translated">登録名でプロセスを調べます。</target>
        </trans-unit>
        <trans-unit id="1d157b4e78c7c3e66517498884591593ccc59f89" translate="yes" xml:space="preserve">
          <source>Looks up the OBJECT IDENTIFIER of a MIB object, given the symbolic name. Note, the OBJECT IDENTIFIER is given for the object, not for an instance.</source>
          <target state="translated">シンボリック名で与えられた MIB オブジェクトの OBJECT IDENTIFIER を調べます。OBJECT IDENTIFIER はインスタンスではなくオブジェクトに対して与えられることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6c5bf56fd6ef4f1df6829e5e6bfa87397c2baa95" translate="yes" xml:space="preserve">
          <source>Looks up the symbolic name of a MIB object, given OBJECT IDENTIFIER.</source>
          <target state="translated">OBJECT IDENTIFIERが与えられたMIBオブジェクトのシンボリック名を検索します。</target>
        </trans-unit>
        <trans-unit id="08b0f2af44d0672e5833994d490452fc72a7fb05" translate="yes" xml:space="preserve">
          <source>Lookup a dictionary entry and return zero or one value.</source>
          <target state="translated">辞書エントリを検索し、ゼロまたは1つの値を返します。</target>
        </trans-unit>
        <trans-unit id="ae6f5a731780983b4856c7c170673fb5330edbc2" translate="yes" xml:space="preserve">
          <source>Lookup information about an active connection</source>
          <target state="translated">アクティブな接続に関する情報を検索</target>
        </trans-unit>
        <trans-unit id="045c842e1d6e6cd467265d71631ecd62a55e3333" translate="yes" xml:space="preserve">
          <source>Lookup join is handled analogously to lookup of constants in a table: if the join operator is &lt;code&gt;==/2&lt;/code&gt;, and the table where constants are to be looked up uses &lt;code&gt;=:=/2&lt;/code&gt; when testing keys for equality, then the &lt;code&gt;qlc&lt;/code&gt; module does not consider lookup join for that table.</source>
          <target state="translated">ルックアップ結合は、テーブル内の定数のルックアップと同様に処理されます。結合演算子が &lt;code&gt;==/2&lt;/code&gt; であり、定数がルックアップされるテーブルが &lt;code&gt;=:=/2&lt;/code&gt; を使用して、キーの等価性をテストする場合、 &lt;code&gt;qlc&lt;/code&gt; モジュールはそのテーブルのルックアップ結合は考慮しません。</target>
        </trans-unit>
        <trans-unit id="35bb462b9b5d0daab8ea39fbe0dc5389a6f8b9fe" translate="yes" xml:space="preserve">
          <source>Lookup method</source>
          <target state="translated">ルックアップ方式</target>
        </trans-unit>
        <trans-unit id="067bc036849c0ea9f3a88839506df146bbb74c53" translate="yes" xml:space="preserve">
          <source>Lookup system information</source>
          <target state="translated">ルックアップシステム情報</target>
        </trans-unit>
        <trans-unit id="95287f575a0e7411367945df70317705255f8115" translate="yes" xml:space="preserve">
          <source>Lookup the CRLs belonging to the distribution point &lt;code&gt;Distributionpoint&lt;/code&gt;. This function may choose to only look in the cache or to follow distribution point links depending on how the cache is administrated.</source>
          <target state="translated">配布ポイント &lt;code&gt;Distributionpoint&lt;/code&gt; に属するCRLを検索します。この機能は、キャッシュの管理方法に応じて、キャッシュのみを参照するか、配布ポイントリンクをたどることを選択できます。</target>
        </trans-unit>
        <trans-unit id="a6fa78d0fd70423aadd6b451927544578762dd1d" translate="yes" xml:space="preserve">
          <source>Lookup user information</source>
          <target state="translated">ユーザー情報を調べる</target>
        </trans-unit>
        <trans-unit id="19942bda356f106b651a5a8f34c9a238875451dc" translate="yes" xml:space="preserve">
          <source>Loops are detected by diameter when the return value of a request callback asks that a request be forwarded. Loop detection in other cases is the responsibility of the user.</source>
          <target state="translated">ループは、リクエストコールバックの戻り値がリクエストを転送するように要求したときに、直径によって検出されます。それ以外の場合のループの検出はユーザの責任となります。</target>
        </trans-unit>
        <trans-unit id="ad31b4a45582d492103decc7ce7a4a81c5c0e3e9" translate="yes" xml:space="preserve">
          <source>Loss of Sharing</source>
          <target state="translated">共有の喪失</target>
        </trans-unit>
        <trans-unit id="3dd4c3b37165b69206ec0c19aa805a2a0483a821" translate="yes" xml:space="preserve">
          <source>Low-Level Instructions</source>
          <target state="translated">低レベルの指示</target>
        </trans-unit>
        <trans-unit id="3ac7f763ea9e07bb988a045d46a8d40a6820054e" translate="yes" xml:space="preserve">
          <source>Low-level Erlang loader.</source>
          <target state="translated">低レベルのErlangローダー。</target>
        </trans-unit>
        <trans-unit id="5b779e63c115b7d4a7dfed98a4b6ed54c59b2bcc" translate="yes" xml:space="preserve">
          <source>Low-level socket connection (1)</source>
          <target state="translated">低レベルソケット接続 (1)</target>
        </trans-unit>
        <trans-unit id="72c1e1d78aed59b6fe1fe5b89bf5d964d2c9be82" translate="yes" xml:space="preserve">
          <source>Lowercase letter</source>
          <target state="translated">小文字</target>
        </trans-unit>
        <trans-unit id="26e7bfca24fa187e97eeb696c1c3b5c2e4216480" translate="yes" xml:space="preserve">
          <source>Lowercase letters</source>
          <target state="translated">小文字</target>
        </trans-unit>
        <trans-unit id="71a644cdf0cedda6a1fe30c2848ffe7f7691a9bf" translate="yes" xml:space="preserve">
          <source>Luckily there is a simplified way to start tracing of &lt;code&gt;et:trace_me/5&lt;/code&gt; function calls. The idea is that you should instrument your code with calls to &lt;code&gt;et:trace_me/5&lt;/code&gt; in strategic places where you have interesting information available in your program. Then you just start the &lt;code&gt;Collector&lt;/code&gt; with global tracing enabled:</source>
          <target state="translated">幸い、 &lt;code&gt;et:trace_me/5&lt;/code&gt; 関数呼び出しのトレースを開始する簡単な方法があります。プログラムで興味深い情報を入手できる戦略的な場所で、 &lt;code&gt;et:trace_me/5&lt;/code&gt; への呼び出しを使用してコードをインストルメント化するという考え方です。次に、グローバルトレースを有効にして &lt;code&gt;Collector&lt;/code&gt; を起動します。</target>
        </trans-unit>
        <trans-unit id="f9156a05ab3755f6c7a6aab965a12bc73fd9cc2c" translate="yes" xml:space="preserve">
          <source>Lycian</source>
          <target state="translated">Lycian</target>
        </trans-unit>
        <trans-unit id="253fa34d4b816ad16ebad60a0945ef037709d0b8" translate="yes" xml:space="preserve">
          <source>Lydian</source>
          <target state="translated">Lydian</target>
        </trans-unit>
        <trans-unit id="dfec75d824ab931885b10c2deb8b602ddf385540" translate="yes" xml:space="preserve">
          <source>M-b</source>
          <target state="translated">M-b</target>
        </trans-unit>
        <trans-unit id="a213eb1de2d97fd8ab6c0c8486e553f7cdc3e521" translate="yes" xml:space="preserve">
          <source>M-d</source>
          <target state="translated">M-d</target>
        </trans-unit>
        <trans-unit id="add69bf7aa5e86e6ac1a17b8047a626986b67564" translate="yes" xml:space="preserve">
          <source>M-f</source>
          <target state="translated">M-f</target>
        </trans-unit>
        <trans-unit id="151f313215c3295e0ad33723c8a62d7e46bf10b6" translate="yes" xml:space="preserve">
          <source>MACs (Message Authentication Codes)</source>
          <target state="translated">MAC(メッセージ認証コード</target>
        </trans-unit>
        <trans-unit id="d6a7c28d96631e7edde69c8cc5ffb71acda67d91" translate="yes" xml:space="preserve">
          <source>MANDATORY</source>
          <target state="translated">MANDATORY</target>
        </trans-unit>
        <trans-unit id="fdfcee3d700fd62abd643079cd9ee1e3425dd0be" translate="yes" xml:space="preserve">
          <source>MAY choose to pad</source>
          <target state="translated">埋めることを選択してもよい</target>
        </trans-unit>
        <trans-unit id="d24661d0d54387c538a6352f93f35bdc335534bf" translate="yes" xml:space="preserve">
          <source>MBCs are more restricted. They can only have a number of fixed sizes that are powers of 2. The start address need to have a very large aligment (currently 256 kb, called &quot;super alignment&quot;). This is a design choice that allows very low overhead per allocated block in the MBC.</source>
          <target state="translated">MBC はより制限されています。開始アドレスは非常に大きなアリグメントを持つ必要があります(現在は256kb、&quot;スーパーアラインメント &quot;と呼ばれています)。これは、MBC の割り当てられたブロックあたりのオーバーヘッドを非常に低くするための設計上の選択です。</target>
        </trans-unit>
        <trans-unit id="86e9fff1d00c68995ba96d3b00b707d9685f6995" translate="yes" xml:space="preserve">
          <source>MD4</source>
          <target state="translated">MD4</target>
        </trans-unit>
        <trans-unit id="b773bed04a48de200b96981bb79467413a222066" translate="yes" xml:space="preserve">
          <source>MD5</source>
          <target state="translated">MD5</target>
        </trans-unit>
        <trans-unit id="2a10b6977b13d4b417a565ad4f26126926a4a59b" translate="yes" xml:space="preserve">
          <source>MFA ::= &lt;code&gt;{&lt;/code&gt;Module&lt;code&gt;,&lt;/code&gt; Function&lt;code&gt;,&lt;/code&gt; Arity&lt;code&gt;}&lt;/code&gt;</source>
          <target state="translated">MFA :: = &lt;code&gt;{&lt;/code&gt; Module &lt;code&gt;,&lt;/code&gt; Function &lt;code&gt;,&lt;/code&gt; Arity &lt;code&gt;}&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b3a37583e66cb48e239f5143bba8733ec51efe1b" translate="yes" xml:space="preserve">
          <source>MIB Structure</source>
          <target state="translated">MIB構造</target>
        </trans-unit>
        <trans-unit id="3d945d68cd16cd86023529b0ae4e4b00d3131a1f" translate="yes" xml:space="preserve">
          <source>MIB View Semantics</source>
          <target state="translated">MIB ビューセマンティクス</target>
        </trans-unit>
        <trans-unit id="04c6a062dba8d860ecd8d08014fad091eaa98372" translate="yes" xml:space="preserve">
          <source>MIB for SNMP. It generates a &lt;code&gt;.bin&lt;/code&gt; file.</source>
          <target state="translated">SNMPのMIB。 &lt;code&gt;.bin&lt;/code&gt; ファイルを生成します。</target>
        </trans-unit>
        <trans-unit id="c4de5d52a9bb8b810300afe15b33e4b1a582332d" translate="yes" xml:space="preserve">
          <source>MIBs for agent configuration are defined.</source>
          <target state="translated">エージェント設定のためのMIBが定義されています。</target>
        </trans-unit>
        <trans-unit id="ff5ab6fdf3d48b5ee7242edd434ed0f3c0b7ee4f" translate="yes" xml:space="preserve">
          <source>MUST NOT be interleaved with other record types</source>
          <target state="translated">他のレコードタイプと混在させてはならない(MUST NOT)</target>
        </trans-unit>
        <trans-unit id="89855aeb4ba3a4e2501c3ac2832fb7ff1adb9028" translate="yes" xml:space="preserve">
          <source>MUST NOT send Handshake and Alert records that have a zero-length TLSInnerPlaintext.content</source>
          <target state="translated">長さが0のTLSInnerPlaintext.contentを持つハンドシェイクとアラートレコードを送ってはならない[MUST NOT]。</target>
        </trans-unit>
        <trans-unit id="0781fd32b1c90fe445ee273639b623824e3a14f5" translate="yes" xml:space="preserve">
          <source>MUST NOT send zero-length fragments</source>
          <target state="translated">長さゼロのフラグメントを送信してはならない(MUST NOT)</target>
        </trans-unit>
        <trans-unit id="fb478b059be626a8463cdde3d8c5a79b80af0ebd" translate="yes" xml:space="preserve">
          <source>MUST NOT span key changes</source>
          <target state="translated">キーの変更をスパンしてはならない(MUST NOT)</target>
        </trans-unit>
        <trans-unit id="7361ea9122404701017ae76f89f305178bc46709" translate="yes" xml:space="preserve">
          <source>MUST implement the TLS_AES_128_GCM_SHA256</source>
          <target state="translated">TLS_AES_128_GCM_SHA256 を実装しなければならない (MUST)</target>
        </trans-unit>
        <trans-unit id="4ed4e46e7ea8c8dcc17449bbb14f42ffea88f86b" translate="yes" xml:space="preserve">
          <source>MUST support ecdsa_secp256r1_sha256</source>
          <target state="translated">ecdsa_secp256r1_sha256 をサポートしなければならない (MUST)</target>
        </trans-unit>
        <trans-unit id="6cd9f925d98388558742ca449a1ccf4823b4ff39" translate="yes" xml:space="preserve">
          <source>MUST support key exchange with secp256r1</source>
          <target state="translated">secp256r1 との鍵交換をサポートしなければならない(MUST)</target>
        </trans-unit>
        <trans-unit id="2222260842f566ee437c8aa4bc02c5a1cedbd937" translate="yes" xml:space="preserve">
          <source>MUST support rsa_pkcs1_sha256 (for certificates)</source>
          <target state="translated">rsa_pkcs1_sha256 (証明書用)をサポートしなければならない (MUST)</target>
        </trans-unit>
        <trans-unit id="2d0def43c1da453010af74fe324f2c04b878ed38" translate="yes" xml:space="preserve">
          <source>MUST support rsa_pss_rsae_sha256 (for CertificateVerify and certificates)</source>
          <target state="translated">rsa_pss_rsae_sha256 (CertificateVerify と証明書用)をサポートしなければならない (MUST)。</target>
        </trans-unit>
        <trans-unit id="6ffd738ce904c33fbbb9ded8005bc90491fa4b7b" translate="yes" xml:space="preserve">
          <source>MUST support the use of the &quot;server_name&quot; extension</source>
          <target state="translated">server_name」拡張子の使用をサポートしなければならない[MUST]。</target>
        </trans-unit>
        <trans-unit id="4d083bf9151a4dce0d477062bb5b2c45afa91d7b" translate="yes" xml:space="preserve">
          <source>Mac | &lt;code&gt;&lt;a href=&quot;#type-descriptive_error&quot;&gt;descriptive_error()&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">Mac | &lt;code&gt;&lt;a href=&quot;#type-descriptive_error&quot;&gt;descriptive_error()&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="490ac4f548272126971fbad865a9e5c77d3dd621" translate="yes" xml:space="preserve">
          <source>MacOS X reorganizes the filenames so that the representation of accents, and so on, uses the &quot;combining characters&quot;. For example, character &lt;code&gt;&amp;ouml;&lt;/code&gt; is represented as code points &lt;code&gt;[111,776]&lt;/code&gt;, where &lt;code&gt;111&lt;/code&gt; is character &lt;code&gt;o&lt;/code&gt; and &lt;code&gt;776&lt;/code&gt; is the special accent character &quot;Combining Diaeresis&quot;. This way of normalizing Unicode is otherwise very seldom used. Erlang normalizes those filenames in the opposite way upon retrieval, so that filenames using combining accents are not passed up to the Erlang application. In Erlang, filename &quot;bj&amp;ouml;rn&quot; is retrieved as &lt;code&gt;[98,106,246,114,110]&lt;/code&gt;, not as &lt;code&gt;[98,106,117,776,114,110]&lt;/code&gt;, although the file system can think differently. The normalization into combining accents is redone when accessing files, so this can usually be ignored by the Erlang programmer.</source>
          <target state="translated">MacOS Xは、アクセントの表現などが「結合文字」を使用するようにファイル名を再編成します。例えば、文字 &lt;code&gt;&amp;ouml;&lt;/code&gt; コードポイントとして表され &lt;code&gt;[111,776]&lt;/code&gt; 、 &lt;code&gt;111&lt;/code&gt; は文字であり &lt;code&gt;o&lt;/code&gt; 及び &lt;code&gt;776&lt;/code&gt; は「分音記号を組み合わせる」特殊アクセント文字です。 Unicodeを正規化するこの方法は、それ以外の場合はほとんど使用されません。 Erlangは、検索時にそれらのファイル名を逆の方法で正規化するため、結合アクセントを使用するファイル名はErlangアプリケーションに渡されません。 Erlangで、ファイル名が&quot;ビョルンが&quot;として検索される &lt;code&gt;[98,106,246,114,110]&lt;/code&gt; ないように、 &lt;code&gt;[98,106,117,776,114,110]&lt;/code&gt; 、ただし、ファイルシステムの考え方は異なる場合があります。アクセントを組み合わせるための正規化は、ファイルにアクセスするときにやり直されるため、通常、Erlangプログラマはこれを無視できます。</target>
        </trans-unit>
        <trans-unit id="768e486d6aa5224dfa45f14bc7b92f9b71384261" translate="yes" xml:space="preserve">
          <source>Macro definitions have the following format:</source>
          <target state="translated">マクロの定義には以下のような形式があります。</target>
        </trans-unit>
        <trans-unit id="899bd694d29ace1be956ab35177075021977560b" translate="yes" xml:space="preserve">
          <source>Macros</source>
          <target state="translated">Macros</target>
        </trans-unit>
        <trans-unit id="c21df95bcab5149fd0542e1989e579553cef5ea9" translate="yes" xml:space="preserve">
          <source>Macros are expanded during compilation. A simple macro &lt;code&gt;?Const&lt;/code&gt; is replaced with &lt;code&gt;Replacement&lt;/code&gt;.</source>
          <target state="translated">マクロはコンパイル中に展開されます。単純なマクロ &lt;code&gt;?Const&lt;/code&gt; は &lt;code&gt;Replacement&lt;/code&gt; に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="5ec67ef3c01b88ea7d04419a08a29e5d6ee738c6" translate="yes" xml:space="preserve">
          <source>Macros in the macros.tab file</source>
          <target state="translated">macros.tabファイル内のマクロ</target>
        </trans-unit>
        <trans-unit id="bafb56f75026725c63578890f318e2634ca3f79f" translate="yes" xml:space="preserve">
          <source>Magically notice traces of the &lt;code&gt;et:trace_me/5&lt;/code&gt; function and make appropriate &lt;code&gt;Events&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;et:trace_me/5&lt;/code&gt; 関数のトレースに魔法のように気づき、適切な &lt;code&gt;Events&lt;/code&gt; を作成します</target>
        </trans-unit>
        <trans-unit id="607c4f3f1fc132b892e746284e6f6a2a7788ff50" translate="yes" xml:space="preserve">
          <source>Mahajani</source>
          <target state="translated">Mahajani</target>
        </trans-unit>
        <trans-unit id="ce03a922df1904d63b3c52366acd1e4d5dfa8f72" translate="yes" xml:space="preserve">
          <source>Main API of the Event Trace (ET) application</source>
          <target state="translated">イベントトレース(ET)アプリケーションの主なAPI</target>
        </trans-unit>
        <trans-unit id="c9a8168cc646feb22f71f8973ad3e9998dbfe20e" translate="yes" xml:space="preserve">
          <source>Main API of the Megaco application</source>
          <target state="translated">Megacoアプリの主なAPI</target>
        </trans-unit>
        <trans-unit id="7290931f77376ec9118ea4cf32caad5589c36ebf" translate="yes" xml:space="preserve">
          <source>Main API of the Reltool application</source>
          <target state="translated">Reltoolアプリケーションの主なAPI</target>
        </trans-unit>
        <trans-unit id="014771aa765bee2f30af23c70717253cfb96da9f" translate="yes" xml:space="preserve">
          <source>Main API of the diameter application.</source>
          <target state="translated">直径アプリケーションの主なAPI。</target>
        </trans-unit>
        <trans-unit id="4fcfcea0b000eea06fc6d4ed4be0088adbe04013" translate="yes" xml:space="preserve">
          <source>Main API of the ssh application</source>
          <target state="translated">ssh アプリケーションの主な API</target>
        </trans-unit>
        <trans-unit id="4140ba76dde001a1b5b6d82503aaee2fca05b0aa" translate="yes" xml:space="preserve">
          <source>Main multiblock carrier size. Sets the size of the main multiblock carrier for allocator &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;. The main multiblock carrier is allocated through &lt;code&gt;sys_alloc&lt;/code&gt; and is never deallocated.</source>
          <target state="translated">メインマルチブロックキャリアサイズ。アロケータ &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; のメインマルチブロックキャリアのサイズを設定します。メインのマルチブロックキャリアは &lt;code&gt;sys_alloc&lt;/code&gt; を通じて割り当てられ、割り当て解除されることはありません。</target>
        </trans-unit>
        <trans-unit id="98d070980c8de15123661b75681a9415be24bed3" translate="yes" xml:space="preserve">
          <source>Main user interface for the &lt;code&gt;Common Test&lt;/code&gt; framework.</source>
          <target state="translated">&lt;code&gt;Common Test&lt;/code&gt; フレームワークのメインユーザーインターフェイス。</target>
        </trans-unit>
        <trans-unit id="34c6a81f8a68bddb86631e45d9f0b3b6bd8f93e5" translate="yes" xml:space="preserve">
          <source>Main user interface for the Common Test framework.</source>
          <target state="translated">Common Test フレームワークのメインユーザーインターフェース。</target>
        </trans-unit>
        <trans-unit id="caf95b7396f0360a962cd9ce06b569c833ad967e" translate="yes" xml:space="preserve">
          <source>Maintenance of the fully connected network</source>
          <target state="translated">完全に接続されたネットワークのメンテナンス</target>
        </trans-unit>
        <trans-unit id="97b7b36933fc3b0a0416b2f556a08cd0e6213e92" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;Deferred&lt;/code&gt; suites become the least preferred suites, that is put them at the end of the cipher suite list &lt;code&gt;Suites&lt;/code&gt; after removing them from &lt;code&gt;Suites&lt;/code&gt; if present. &lt;code&gt;Deferred&lt;/code&gt; may be a list of cipher suites or a list of filters in which case the filters are use on &lt;code&gt;Suites&lt;/code&gt; to extract the Deferred cipher list.</source>
          <target state="translated">作る &lt;code&gt;Deferred&lt;/code&gt; スイートは暗号スイートのリストの末尾に置かれる最も好ましくないスイートとなっ &lt;code&gt;Suites&lt;/code&gt; からそれらを削除した後 &lt;code&gt;Suites&lt;/code&gt; 存在する場合。 &lt;code&gt;Deferred&lt;/code&gt; は、暗号スイートのリストまたはフィルターのリストである場合があります。その場合、フィルターは、 &lt;code&gt;Suites&lt;/code&gt; Deferred暗号リストを抽出するために使用されます。</target>
        </trans-unit>
        <trans-unit id="683ba771dba7958f68fbac6a0cabbea4e324174e" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;Deferred&lt;/code&gt; suites become the least preferred suites, that is put them at the end of the cipher suite list &lt;code&gt;Suites&lt;/code&gt; after removing them from &lt;code&gt;Suites&lt;/code&gt; if present. &lt;code&gt;Deferred&lt;/code&gt; may be a list of cipher suits or a list of filters in which case the filters are use on &lt;code&gt;Suites&lt;/code&gt; to extract the Deferred cipher list.</source>
          <target state="translated">作る &lt;code&gt;Deferred&lt;/code&gt; スイートは暗号スイートのリストの末尾に置かれる最も好ましくないスイートとなっ &lt;code&gt;Suites&lt;/code&gt; からそれらを削除した後 &lt;code&gt;Suites&lt;/code&gt; 存在する場合。 &lt;code&gt;Deferred&lt;/code&gt; は、暗号スーツのリストまたはフィルターのリストである場合があります。この場合、フィルターは &lt;code&gt;Suites&lt;/code&gt; Deferred暗号リストを抽出するために使用されます。</target>
        </trans-unit>
        <trans-unit id="26c15d02af3e15dd010130baee6fab8be956145d" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;Preferred&lt;/code&gt; suites become the most preferred suites that is put them at the head of the cipher suite list &lt;code&gt;Suites&lt;/code&gt; after removing them from &lt;code&gt;Suites&lt;/code&gt; if present. &lt;code&gt;Preferred&lt;/code&gt; may be a list of cipher suites or a list of filters in which case the filters are use on &lt;code&gt;Suites&lt;/code&gt; to extract the preferred cipher list.</source>
          <target state="translated">作る &lt;code&gt;Preferred&lt;/code&gt; スイートは暗号スイートのリストの先頭にそれらを入れて、最も好ましいのスイートとなっ &lt;code&gt;Suites&lt;/code&gt; からそれらを削除した後 &lt;code&gt;Suites&lt;/code&gt; 存在する場合。 &lt;code&gt;Preferred&lt;/code&gt; れるのは、暗号スイートのリストまたはフィルターのリストであり、その場合、フィルターは、優先される暗号リストを抽出するために &lt;code&gt;Suites&lt;/code&gt; 使用されます。</target>
        </trans-unit>
        <trans-unit id="d09c0a2ffb9d90565c340512a769d32848189c99" translate="yes" xml:space="preserve">
          <source>Make &lt;code&gt;Preferred&lt;/code&gt; suites become the most preferred suites that is put them at the head of the cipher suite list &lt;code&gt;Suites&lt;/code&gt; after removing them from &lt;code&gt;Suites&lt;/code&gt; if present. &lt;code&gt;Preferred&lt;/code&gt; may be a list of cipher suits or a list of filters in which case the filters are use on &lt;code&gt;Suites&lt;/code&gt; to extract the preferred cipher list.</source>
          <target state="translated">作る &lt;code&gt;Preferred&lt;/code&gt; スイートは暗号スイートのリストの先頭にそれらを入れて、最も好ましいのスイートとなっ &lt;code&gt;Suites&lt;/code&gt; からそれらを削除した後 &lt;code&gt;Suites&lt;/code&gt; 存在する場合。 &lt;code&gt;Preferred&lt;/code&gt; は、暗号スーツのリストまたはフィルターのリストである場合があり、その場合、フィルターは &lt;code&gt;Suites&lt;/code&gt; 使用され、優先される暗号リストを抽出します。</target>
        </trans-unit>
        <trans-unit id="b9ea499659acd96747d610ef617848faf8002c00" translate="yes" xml:space="preserve">
          <source>Make Dialyzer a bit more quiet.</source>
          <target state="translated">ダイアライザーをもう少し静かにしてください。</target>
        </trans-unit>
        <trans-unit id="ee2cafda4f9116a303a421f649a4f70f2f925a8d" translate="yes" xml:space="preserve">
          <source>Make Dialyzer a bit more verbose.</source>
          <target state="translated">ダイアライザーをもう少し冗長にしてください。</target>
        </trans-unit>
        <trans-unit id="10ba2efeabebf0489b4847ad8643fcdf0992e15a" translate="yes" xml:space="preserve">
          <source>Make Dialyzer emit warnings even when manipulating the PLT. Warnings are only emitted for files that are analyzed.</source>
          <target state="translated">PLTを操作していても警告が出るようにしました。警告は解析中のファイルに対してのみ表示されるようにした。</target>
        </trans-unit>
        <trans-unit id="7715175917b7a7d605296680b1ca41edb30157cf" translate="yes" xml:space="preserve">
          <source>Make Dialyzer print information about the PLT and then quit. The PLT can be specified with &lt;code&gt;--plt(s)&lt;/code&gt;.</source>
          <target state="translated">DialyzerにPLTに関する情報を印刷させ、終了します。PLTは &lt;code&gt;--plt(s)&lt;/code&gt; で指定できます。</target>
        </trans-unit>
        <trans-unit id="8f5adb962b2fbef3d7acd737ca5f836fe51e4afa" translate="yes" xml:space="preserve">
          <source>Make a copy of the Solaris standard configuration file for &lt;code&gt;syslogd&lt;/code&gt;. This file is usually named &lt;code&gt;syslog.conf&lt;/code&gt; and found in directory &lt;code&gt;/etc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;syslogd&lt;/code&gt; の Solaris標準構成ファイルのコピーを作成します。このファイルは通常、 &lt;code&gt;syslog.conf&lt;/code&gt; という名前で、ディレクトリ &lt;code&gt;/etc&lt;/code&gt; にあります。</target>
        </trans-unit>
        <trans-unit id="dafd7bb78e3c0fc4210ac348a96cd2dd1d2c78ff" translate="yes" xml:space="preserve">
          <source>Make a full copy of all the active access structures. This copy is called the staging area and is identified by the global atomic variable &lt;code&gt;the_staging_code_index&lt;/code&gt;.</source>
          <target state="translated">すべてのアクティブなアクセス構造の完全なコピーを作成します。このコピーはステージング領域と呼ばれ、グローバルアトミック変数 &lt;code&gt;the_staging_code_index&lt;/code&gt; によって識別されます。</target>
        </trans-unit>
        <trans-unit id="0e586a8c6ff263d0afce189a56818cee918e1347" translate="yes" xml:space="preserve">
          <source>Make a key out of an event record or an old key.</source>
          <target state="translated">イベントレコードや古いキーからキーを作成します。</target>
        </trans-unit>
        <trans-unit id="1415885484de34303a471ea6db61c1acc9cb54f8" translate="yes" xml:space="preserve">
          <source>Make a simple hello world and try to compile it with the &lt;code&gt;cl&lt;/code&gt; command from within bash. If that does not work, your environment needs fixing. Remember, there should be no backslashes in your path environment variable in Cygwin bash, but LIB and INCLUDE should contain Windows style paths with semicolon, drive letters and backslashes.</source>
          <target state="translated">単純なhello worldを作成し、bash内から &lt;code&gt;cl&lt;/code&gt; コマンドでコンパイルしてみます。それが機能しない場合は、環境を修正する必要があります。Cygwin bashのパス環境変数にはバックスラッシュを含めないでください。ただし、LIBおよびINCLUDEには、セミコロン、ドライブ文字、バックスラッシュを含むWindowsスタイルのパスを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="1dcb4e238263c7a5afbedf884d34e60decef3679" translate="yes" xml:space="preserve">
          <source>Make an edited copy of the backup copy previously made.</source>
          <target state="translated">事前に作成したバックアップコピーの編集コピーを作成します。</target>
        </trans-unit>
        <trans-unit id="bfc8145db5663246acf8191e3d36605eb676990d" translate="yes" xml:space="preserve">
          <source>Make process &lt;code&gt;Pid&lt;/code&gt; the new owner of table &lt;code&gt;Tab&lt;/code&gt;. If successful, message &lt;code&gt;{'ETS-TRANSFER',Tab,FromPid,GiftData}&lt;/code&gt; is sent to the new owner.</source>
          <target state="translated">Makeプロセス &lt;code&gt;Pid&lt;/code&gt; をテーブル &lt;code&gt;Tab&lt;/code&gt; の新しい所有者にします。成功した場合、メッセージ &lt;code&gt;{'ETS-TRANSFER',Tab,FromPid,GiftData}&lt;/code&gt; が新しい所有者に送信されます。</target>
        </trans-unit>
        <trans-unit id="7b44f78041d63c29886fd3ab915b1c7a217bbe5f" translate="yes" xml:space="preserve">
          <source>Make some particular suites the most preferred, or least preferred by changing prepend to append.</source>
          <target state="translated">prependをappendに変更することで、いくつかの特定のスイートを最も好ましいものにしたり、最も好ましくないものにしたりすることができます。</target>
        </trans-unit>
        <trans-unit id="c2ba192403adbb128258a263d55b31ddd0872ee8" translate="yes" xml:space="preserve">
          <source>Make sure that the command &lt;code&gt;hostname&lt;/code&gt; returns a valid fully qualified host name (this is configured in &lt;code&gt;/etc/hostconfig&lt;/code&gt;). Otherwise you might experience problems when running distributed systems.</source>
          <target state="translated">コマンド &lt;code&gt;hostname&lt;/code&gt; が有効な完全修飾ホスト名を返すことを確認します（これは &lt;code&gt;/etc/hostconfig&lt;/code&gt; で構成されます）。そうしないと、分散システムの実行時に問題が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="605b087786603fea0d76e7acb85a392c7a2ca554" translate="yes" xml:space="preserve">
          <source>Make sure to install the basic dev tools, but avoid the MinGW autoconf and install the msys one instead.</source>
          <target state="translated">基本的な開発ツールは必ずインストールするようにしてくださいが、MinGWのautoconfは避けて、代わりにmsysのものをインストールしてください。</target>
        </trans-unit>
        <trans-unit id="f71b08b9686f12317202560047739ba3b1216b0e" translate="yes" xml:space="preserve">
          <source>Make sure to set the PATH so that NSIS and Microsoft SDK is found before the MSYS/Cygwin tools and that Java is last in the PATH.</source>
          <target state="translated">MSYS/Cygwinツールの前にNSISとMicrosoft SDKが見つかるようにPATHを設定し、JavaがPATHの最後に来るようにしてください。</target>
        </trans-unit>
        <trans-unit id="bf36bcf4ace9356a062d8090033e2ca09b36f682" translate="yes" xml:space="preserve">
          <source>Make sure you're in the top directory in the source tree.</source>
          <target state="translated">ソースツリーのトップディレクトリにあることを確認してください。</target>
        </trans-unit>
        <trans-unit id="c7432411584b2a6828a2cfe381ef427f482a9a7d" translate="yes" xml:space="preserve">
          <source>Make that series of NIF calls from the Erlang level.</source>
          <target state="translated">Erlangレベルから一連のNIFコールをしてみましょう。</target>
        </trans-unit>
        <trans-unit id="1f5db744ecb6a5d733780b21850a0e20203a81db" translate="yes" xml:space="preserve">
          <source>Make the client tell the server that the client accepts extension negotiation, that is, include &lt;code&gt;ext-info-c&lt;/code&gt; in the kexinit message sent. See &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8308&quot;&gt;RFC 8308&lt;/a&gt;&lt;/code&gt; for details and &lt;code&gt;ssh(6)&lt;/code&gt; for a list of currently implemented extensions.</source>
          <target state="translated">クライアントに拡張ネゴシエーションを受け入れることをサーバーに通知します。つまり、送信されるkexinitメッセージに &lt;code&gt;ext-info-c&lt;/code&gt; を含めます。詳細については &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8308&quot;&gt;RFC 8308&lt;/a&gt;&lt;/code&gt; を、現在実装されている拡張機能のリストについては &lt;code&gt;ssh(6)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f086742bdd779ab84c5ff9b5ee2da13b93823b4f" translate="yes" xml:space="preserve">
          <source>Make the handling of large files fast by setting &lt;code&gt;time&lt;/code&gt;, but this will use more memory. The &lt;code&gt;space&lt;/code&gt; variant shrinks the memory requirements, but with a higher time consumption.</source>
          <target state="translated">&lt;code&gt;time&lt;/code&gt; を設定して大きなファイルの処理を高速化しますが、これにより多くのメモリが使用されます。 &lt;code&gt;space&lt;/code&gt; バリアントは、より高い消費時間と、メモリ要件を縮小します。</target>
        </trans-unit>
        <trans-unit id="d5035cf3f169978e011505d0d2efbb3700dc36cf" translate="yes" xml:space="preserve">
          <source>Make the server (daemon) tell the client that the server accepts extension negotiation, that is, include &lt;code&gt;ext-info-s&lt;/code&gt; in the kexinit message sent. See &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8308&quot;&gt;RFC 8308&lt;/a&gt;&lt;/code&gt; for details and &lt;code&gt;ssh(6)&lt;/code&gt; for a list of currently implemented extensions.</source>
          <target state="translated">サーバー（デーモン）がクライアントにサーバーが拡張ネゴシエーションを受け入れることを通知するようにします。つまり、送信されるkexinitメッセージに &lt;code&gt;ext-info-s&lt;/code&gt; を含めます。詳細については &lt;code&gt;&lt;a href=&quot;https://tools.ietf.org/html/rfc8308&quot;&gt;RFC 8308&lt;/a&gt;&lt;/code&gt; を、現在実装されている拡張機能のリストについては &lt;code&gt;ssh(6)&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="93635322e3d683204b0ba689a72acc16c2071f8e" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;init&lt;/code&gt; call the specified function. &lt;code&gt;Func&lt;/code&gt; defaults to &lt;code&gt;start&lt;/code&gt;. If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; as argument. All arguments are passed as atoms. See &lt;code&gt;&lt;a href=&quot;init&quot;&gt; init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">作るには、 &lt;code&gt;init&lt;/code&gt; の指定された関数を呼び出します。 &lt;code&gt;Func&lt;/code&gt; のデフォルトは &lt;code&gt;start&lt;/code&gt; です。引数が指定されていない場合、関数はアリティ0であると見なされます。それ以外の場合は、リスト &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; を引数としてアリティ1であると見なされます。すべての引数はアトムとして渡されます。 &lt;code&gt;&lt;a href=&quot;init&quot;&gt; init(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="93aa92102b400ac9f00b97c87885b225d1e6c53c" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;init&lt;/code&gt; call the specified function. &lt;code&gt;Func&lt;/code&gt; defaults to &lt;code&gt;start&lt;/code&gt;. If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; as argument. All arguments are passed as atoms. See &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">作るには、 &lt;code&gt;init&lt;/code&gt; の指定された関数を呼び出します。 &lt;code&gt;Func&lt;/code&gt; のデフォルトは &lt;code&gt;start&lt;/code&gt; です。引数が指定されていない場合、関数はアリティ0であると想定されます。それ以外の場合は、リスト &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; を引数として、アリティ1であると想定されます。すべての引数はアトムとして渡されます。 &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e9ea1b4687eb85a92b7f1801d82c53a8f83c6123" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;init&lt;/code&gt; call the specified function. &lt;code&gt;Func&lt;/code&gt; defaults to &lt;code&gt;start&lt;/code&gt;. If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; as argument. All arguments are passed as strings. See &lt;code&gt;&lt;a href=&quot;init&quot;&gt; init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">作るには、 &lt;code&gt;init&lt;/code&gt; の指定された関数を呼び出します。 &lt;code&gt;Func&lt;/code&gt; のデフォルトは &lt;code&gt;start&lt;/code&gt; です。引数が指定されていない場合、関数はアリティ0であると見なされます。それ以外の場合は、リスト &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; を引数としてアリティ1であると見なされます。すべての引数は文字列として渡されます。 &lt;code&gt;&lt;a href=&quot;init&quot;&gt; init(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="cc491ef04c29a912ad13bb0dab3aa78550c1a0b0" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;init&lt;/code&gt; call the specified function. &lt;code&gt;Func&lt;/code&gt; defaults to &lt;code&gt;start&lt;/code&gt;. If no arguments are provided, the function is assumed to be of arity 0. Otherwise it is assumed to be of arity 1, taking the list &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; as argument. All arguments are passed as strings. See &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">作るには、 &lt;code&gt;init&lt;/code&gt; の指定された関数を呼び出します。 &lt;code&gt;Func&lt;/code&gt; のデフォルトは &lt;code&gt;start&lt;/code&gt; です。引数が指定されていない場合、関数はアリティ0であると想定されます。それ以外の場合は、リスト &lt;code&gt;[Arg1,Arg2,...]&lt;/code&gt; を引数として、アリティ1であると想定されます。すべての引数は文字列として渡されます。 &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="effbaf150909b5681b041c7c93ee8c1dd9234e3b" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;init&lt;/code&gt; evaluate the expression &lt;code&gt;Expr&lt;/code&gt;; see &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">作り &lt;code&gt;init&lt;/code&gt; は表現を評価 &lt;code&gt;Expr&lt;/code&gt; にします。 &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6f6e437de83ae71822d270a49d45206d77f45c59" translate="yes" xml:space="preserve">
          <source>Makes &lt;code&gt;init&lt;/code&gt; write some debug information while interpreting the boot script.</source>
          <target state="translated">作るには、 &lt;code&gt;init&lt;/code&gt; の起動スクリプトを解釈しながら、いくつかのデバッグ情報を書き込みます。</target>
        </trans-unit>
        <trans-unit id="1c12aa164fb9326a07158879ddf33e08ec2da65e" translate="yes" xml:space="preserve">
          <source>Makes a &lt;code&gt;badarg&lt;/code&gt; exception to be returned from a NIF, and associates it with environment &lt;code&gt;env&lt;/code&gt;. Once a NIF or any function it calls invokes &lt;code&gt;enif_make_badarg&lt;/code&gt;, the runtime ensures that a &lt;code&gt;badarg&lt;/code&gt; exception is raised when the NIF returns, even if the NIF attempts to return a non-exception term instead.</source>
          <target state="translated">作り &lt;code&gt;badarg&lt;/code&gt; 例外がNIFから返されると、環境に関連付け &lt;code&gt;env&lt;/code&gt; 。NIFまたはそれが呼び出す関数が &lt;code&gt;enif_make_badarg&lt;/code&gt; を呼び出すと、ランタイムは、NIFが例外以外の用語を返そうとしても、NIFが返ったときに &lt;code&gt;badarg&lt;/code&gt; 例外が発生するようにします。</target>
        </trans-unit>
        <trans-unit id="237c55ef12224693f0ea9298c5b4012406e52202" translate="yes" xml:space="preserve">
          <source>Makes a binary term from &lt;code&gt;bin&lt;/code&gt;. Any ownership of the binary data is transferred to the created term and &lt;code&gt;bin&lt;/code&gt; is to be considered read-only for the rest of the NIF call and then as released.</source>
          <target state="translated">&lt;code&gt;bin&lt;/code&gt; からバイナリ項を作成します。バイナリデータの所有権は、作成された期間に転送され、 &lt;code&gt;bin&lt;/code&gt; は、残りのNIF呼び出しでは読み取り専用と見なされ、その後解放されます。</target>
        </trans-unit>
        <trans-unit id="b692874a74db2c05c40ad42ce60cf8791216d646" translate="yes" xml:space="preserve">
          <source>Makes a copy of map &lt;code&gt;map_in&lt;/code&gt; and inserts &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;value&lt;/code&gt;. If &lt;code&gt;key&lt;/code&gt; already exists in &lt;code&gt;map_in&lt;/code&gt;, the old associated value is replaced by &lt;code&gt;value&lt;/code&gt;.</source>
          <target state="translated">マップ &lt;code&gt;map_in&lt;/code&gt; のコピーを作成し、 &lt;code&gt;value&lt;/code&gt; とともに &lt;code&gt;key&lt;/code&gt; を挿入します。 &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;map_in&lt;/code&gt; にすでに存在する場合、以前に関連付けられた値はvalueに置き換えられ &lt;code&gt;value&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3bdd484fa8278609492e238310d156b1e791c1d1" translate="yes" xml:space="preserve">
          <source>Makes a copy of map &lt;code&gt;map_in&lt;/code&gt; and replace the old associated value for &lt;code&gt;key&lt;/code&gt; with &lt;code&gt;new_value&lt;/code&gt;.</source>
          <target state="translated">マップ &lt;code&gt;map_in&lt;/code&gt; のコピーを作成し、 &lt;code&gt;key&lt;/code&gt; 関連付けられていた古い値を &lt;code&gt;new_value&lt;/code&gt; に置き換えます。</target>
        </trans-unit>
        <trans-unit id="ca6b1dc8e5e0672574d5436088c1dcb75a32cecf" translate="yes" xml:space="preserve">
          <source>Makes a copy of term &lt;code&gt;src_term&lt;/code&gt;. The copy is created in environment &lt;code&gt;dst_env&lt;/code&gt;. The source term can be located in any environment.</source>
          <target state="translated">用語 &lt;code&gt;src_term&lt;/code&gt; のコピーを作成します。コピーは環境 &lt;code&gt;dst_env&lt;/code&gt; に作成されます。ソース用語は任意の環境に配置できます。</target>
        </trans-unit>
        <trans-unit id="4f47a6753bc06d4318555d47c144bd14353686e3" translate="yes" xml:space="preserve">
          <source>Makes a hard link from &lt;code&gt;Existing&lt;/code&gt; to &lt;code&gt;New&lt;/code&gt; on platforms supporting links (Unix and Windows). This function returns &lt;code&gt;ok&lt;/code&gt; if the link was successfully created, otherwise &lt;code&gt;{error, Reason}&lt;/code&gt;. On platforms not supporting links, &lt;code&gt;{error,enotsup}&lt;/code&gt; is returned.</source>
          <target state="translated">リンクをサポートするプラットフォーム（UNIXおよびWindows）で、 &lt;code&gt;Existing&lt;/code&gt; から &lt;code&gt;New&lt;/code&gt; へのハードリンクを作成します。この関数は、リンクが正常に作成された場合は &lt;code&gt;ok&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;{error, Reason}&lt;/code&gt; 返します。リンクをサポートしていないプラットフォームでは、 &lt;code&gt;{error,enotsup}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="31595caf2c636a46957c7deabbd5e7359493a864" translate="yes" xml:space="preserve">
          <source>Makes a map term from the given keys and values.</source>
          <target state="translated">与えられたキーと値からマップ項を作成します。</target>
        </trans-unit>
        <trans-unit id="5faa6d950f146c4cea5b655391ad27bfb6046562" translate="yes" xml:space="preserve">
          <source>Makes a node into a hidden node.</source>
          <target state="translated">ノードを非表示ノードにします。</target>
        </trans-unit>
        <trans-unit id="bff410db84d22381d23b1c5efa073c2289972394" translate="yes" xml:space="preserve">
          <source>Makes a pid term from &lt;code&gt;*pid&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;*pid&lt;/code&gt; からpid項を作成します。</target>
        </trans-unit>
        <trans-unit id="89a04157c6789f62d77b3947257f75e905e4072a" translate="yes" xml:space="preserve">
          <source>Makes a pid term or the atom &lt;code&gt;&lt;a href=&quot;#enif_set_pid_undefined&quot;&gt; undefined&lt;/a&gt;&lt;/code&gt; from &lt;code&gt;*pid&lt;/code&gt;.</source>
          <target state="translated">pid項またはアトムを &lt;code&gt;*pid&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;#enif_set_pid_undefined&quot;&gt; undefined&lt;/a&gt;&lt;/code&gt; します。</target>
        </trans-unit>
        <trans-unit id="7dd7181219d969635c334047d9c09a9edcb4c4b1" translate="yes" xml:space="preserve">
          <source>Makes a printout of all interpreted modules. Modules are printed together with the full path name of the corresponding source code file.</source>
          <target state="translated">すべての解釈されたモジュールのプリントアウトを行います。モジュールは、対応するソースコードファイルのフルパス名とともに印刷されます。</target>
        </trans-unit>
        <trans-unit id="401f2043961677427104b10d6d8254a7b9499556" translate="yes" xml:space="preserve">
          <source>Makes a runtime system into a node, using long node names.</source>
          <target state="translated">長いノード名を使ってランタイムシステムをノードにします。</target>
        </trans-unit>
        <trans-unit id="bcf8732784b73fa9047c7ff22861f746856adbaa" translate="yes" xml:space="preserve">
          <source>Makes a runtime system into a node, using short node names.</source>
          <target state="translated">短いノード名を使用して、ランタイムシステムをノードにします。</target>
        </trans-unit>
        <trans-unit id="dd9eb421a3c6821005298718ecb81d1924332eb6" translate="yes" xml:space="preserve">
          <source>Makes a subbinary of binary &lt;code&gt;bin_term&lt;/code&gt;, starting at zero-based position &lt;code&gt;pos&lt;/code&gt; with a length of &lt;code&gt;size&lt;/code&gt; bytes. &lt;code&gt;bin_term&lt;/code&gt; must be a binary or bitstring. &lt;code&gt;pos+size&lt;/code&gt; must be less or equal to the number of whole bytes in &lt;code&gt;bin_term&lt;/code&gt;.</source>
          <target state="translated">バイナリ &lt;code&gt;bin_term&lt;/code&gt; のサブバイナリを作成します。 &lt;code&gt;size&lt;/code&gt; バイトで、ゼロベースの位置 &lt;code&gt;pos&lt;/code&gt; から始まります。 &lt;code&gt;bin_term&lt;/code&gt; は、バイナリまたはビット文字列でなければなりません。 &lt;code&gt;pos+size&lt;/code&gt; は、 &lt;code&gt;bin_term&lt;/code&gt; 内の全体のバイト数以下でなければなりません。</target>
        </trans-unit>
        <trans-unit id="7262155d7bc31943fbd8dc38a73406384f311be3" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to all &lt;code&gt;gen_server&lt;/code&gt; processes locally registered as &lt;code&gt;Name&lt;/code&gt; at the specified nodes by first sending a request to every node and then waits for the replies. The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">最初にすべてのノードに要求を送信し、次に応答を待つことにより、指定されたノードで &lt;code&gt;Name&lt;/code&gt; としてローカルに登録されているすべての &lt;code&gt;gen_server&lt;/code&gt; プロセスに同期呼び出しを行います。 &lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; リクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="1da6e2cfd5a96004af2990791a93360f29c745d3" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to all &lt;code&gt;gen_server&lt;/code&gt; processes locally registered as &lt;code&gt;Name&lt;/code&gt; at the specified nodes by first sending a request to every node and then waits for the replies. The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">指定されたノードで &lt;code&gt;Name&lt;/code&gt; としてローカルに登録されているすべての &lt;code&gt;gen_server&lt;/code&gt; プロセスに対して同期呼び出しを行います。最初にすべてのノードに要求を送信し、次に応答を待ちます。 &lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; リクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="378a856d28e2805c7ccd54bf685ba494b6362dc9" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to event handler &lt;code&gt;Handler&lt;/code&gt; installed in event manager &lt;code&gt;EventMgrRef&lt;/code&gt; by sending a request and waiting until a reply arrives or a time-out occurs. The event manager calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-2&quot;&gt; Module:handle_call/2&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">要求を送信し、応答が到着するかタイムアウトが発生するまで待機することにより、イベントマネージャー &lt;code&gt;EventMgrRef&lt;/code&gt; にインストールされているイベントハンドラー &lt;code&gt;Handler&lt;/code&gt; を同期的に呼び出します。イベントマネージャは、 &lt;code&gt;&lt;a href=&quot;#Module:handle_call-2&quot;&gt; Module:handle_call/2&lt;/a&gt;&lt;/code&gt; を呼び出して要求を処理します。</target>
        </trans-unit>
        <trans-unit id="ea1c1ab573f83f8ab3377d2d58aa5424f46f4767" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to event handler &lt;code&gt;Handler&lt;/code&gt; installed in event manager &lt;code&gt;EventMgrRef&lt;/code&gt; by sending a request and waiting until a reply arrives or a time-out occurs. The event manager calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-2&quot;&gt;Module:handle_call/2&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">要求を送信し、応答が到着するかタイムアウトが発生するまで待機することにより、イベントマネージャー &lt;code&gt;EventMgrRef&lt;/code&gt; にインストールされているイベントハンドラー &lt;code&gt;Handler&lt;/code&gt; に同期呼び出しを行います。イベントマネージャは、 &lt;code&gt;&lt;a href=&quot;#Module:handle_call-2&quot;&gt;Module:handle_call/2&lt;/a&gt;&lt;/code&gt; を呼び出してリクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="73018f52a5d37426cbfbcafd584e4bff3254755a" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to the &lt;code&gt;ServerRef&lt;/code&gt; of the &lt;code&gt;gen_server&lt;/code&gt; process by sending a request and waiting until a reply arrives or a time-out occurs. The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">要求を送信し、応答が到着するかタイムアウトが発生するまで待機することにより、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの &lt;code&gt;ServerRef&lt;/code&gt; への同期呼び出しを行います。 &lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt; Module:handle_call/3&lt;/a&gt;&lt;/code&gt; リクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="f82c270c0090923069cb76b8c5ac5d301204fbd0" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to the &lt;code&gt;ServerRef&lt;/code&gt; of the &lt;code&gt;gen_server&lt;/code&gt; process by sending a request and waiting until a reply arrives or a time-out occurs. The &lt;code&gt;gen_server&lt;/code&gt; process calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; to handle the request.</source>
          <target state="translated">要求を送信し、応答が到着するかタイムアウトになるまで待機することにより、 &lt;code&gt;gen_server&lt;/code&gt; プロセスの &lt;code&gt;ServerRef&lt;/code&gt; への同期呼び出しを行います。 &lt;code&gt;gen_server&lt;/code&gt; のプロセスが呼び出す &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; リクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="2f2c5c0d01b79b1beb9e9e9be1f42f74eb88acd6" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to the &lt;code&gt;gen_statem&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;ServerRef&lt;/a&gt;&lt;/code&gt; by sending a request and waiting until its reply arrives. The &lt;code&gt;gen_statem&lt;/code&gt; calls the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{call,From}&lt;/code&gt; and event content &lt;code&gt;Request&lt;/code&gt;.</source>
          <target state="translated">同期呼び出しを行い &lt;code&gt;gen_statem&lt;/code&gt; の &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;ServerRef&lt;/a&gt;&lt;/code&gt; 要求を送信し、その応答が到着するまで待つことを。 &lt;code&gt;gen_statem&lt;/code&gt; は、コール &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;&lt;strong&gt;state callback&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 用いて &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{call,From}&lt;/code&gt; とイベントコンテンツ &lt;code&gt;Request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e047abadcd4125bf1a47c5e3a18f5763c2f66409" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to the &lt;code&gt;gen_statem&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;ServerRef&lt;/a&gt;&lt;/code&gt; by sending a request and waiting until its reply arrives. The &lt;code&gt;gen_statem&lt;/code&gt; calls the &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt;&lt;code&gt;{call,From}&lt;/code&gt; and event content &lt;code&gt;Request&lt;/code&gt;.</source>
          <target state="translated">要求を送信し、応答が届くまで待機することにより、 &lt;code&gt;gen_statem&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;ServerRef&lt;/a&gt;&lt;/code&gt; への同期呼び出しを行います。 &lt;code&gt;gen_statem&lt;/code&gt; は、コール &lt;code&gt;&lt;a href=&quot;#state%20callback&quot;&gt;state callback&lt;/a&gt;&lt;/code&gt; 用いて &lt;code&gt;&lt;a href=&quot;#type-event_type&quot;&gt;event_type()&lt;/a&gt;&lt;/code&gt; &lt;code&gt;{call,From}&lt;/code&gt; とイベントコンテンツ &lt;code&gt;Request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="f5e97befb3fc0e650a9c087f592d9705da519e48" translate="yes" xml:space="preserve">
          <source>Makes a synchronous call to the channel process by sending a message and waiting until a reply arrives, or a time-out occurs. The channel calls &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; to handle the message. If the channel process does not exist, &lt;code&gt;{error, closed}&lt;/code&gt; is returned.</source>
          <target state="translated">メッセージを送信し、応答が到着するか、タイムアウトが発生するまで待機することにより、チャネルプロセスを同期的に呼び出します。チャネルは &lt;code&gt;&lt;a href=&quot;#Module:handle_call-3&quot;&gt;Module:handle_call/3&lt;/a&gt;&lt;/code&gt; を呼び出してメッセージを処理します。チャネルプロセスが存在しない場合、 &lt;code&gt;{error, closed}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="eb060cc8d8a3df5d96be3f4fcf2d8f7d2bded14f" translate="yes" xml:space="preserve">
          <source>Makes a trace pattern suitable to feed change_pattern/1</source>
          <target state="translated">トレースパターンをフィードに適したものにする change_pattern/1</target>
        </trans-unit>
        <trans-unit id="ea447adb75c049935be0ade2d24d0e02a46cb4ff" translate="yes" xml:space="preserve">
          <source>Makes all the preprocessor macros of EUnit available, to help writing tests</source>
          <target state="translated">EUnit のすべてのプリプロセッサマクロを利用できるようにし、テストを書くのに役立つようにします。</target>
        </trans-unit>
        <trans-unit id="97e3039873bad96bb14bae33094fcd93e52bc160" translate="yes" xml:space="preserve">
          <source>Makes all warnings into errors.</source>
          <target state="translated">すべての警告をエラーにします。</target>
        </trans-unit>
        <trans-unit id="247956d646f73c5083d686557419faaf07611729" translate="yes" xml:space="preserve">
          <source>Makes an empty map term.</source>
          <target state="translated">空のマップ用語を作成します。</target>
        </trans-unit>
        <trans-unit id="48107dc847232e089a1763920ba9c6eb752826f4" translate="yes" xml:space="preserve">
          <source>Makes an existing process an &lt;code&gt;ssh_client_channel&lt;/code&gt; (replaces ssh_channel) process. Does not return, instead the calling process enters the &lt;code&gt;ssh_client_channel&lt;/code&gt; (replaces ssh_channel) process receive loop and become an &lt;code&gt;ssh_client_channel&lt;/code&gt; process. The process must have been started using one of the start functions in &lt;code&gt;proc_lib&lt;/code&gt;, see the &lt;code&gt;proc_lib(3)&lt;/code&gt; manual page in STDLIB. The user is responsible for any initialization of the process and must call &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">既存のプロセスを &lt;code&gt;ssh_client_channel&lt;/code&gt; （ssh_channelを置き換える）プロセスにします。戻らない、代わりに、呼び出し元のプロセスが入る &lt;code&gt;ssh_client_channel&lt;/code&gt; （置き換えssh_channel）プロセスは、ループを受け取るとなっ &lt;code&gt;ssh_client_channel&lt;/code&gt; のプロセス。プロセスはのスタート機能のいずれかを使用して開始されている必要があります &lt;code&gt;proc_lib&lt;/code&gt; を参照して、 &lt;code&gt;proc_lib(3)&lt;/code&gt; マニュアルページSTDLIBインチユーザーはプロセスの初期化を担当し、 &lt;code&gt;&lt;a href=&quot;#init-1&quot;&gt;init/1&lt;/a&gt;&lt;/code&gt; を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="22bc96ed22188f42e5c515e5da6efb8258670300" translate="yes" xml:space="preserve">
          <source>Makes an existing process into a &lt;code&gt;gen_server&lt;/code&gt; process. Does not return, instead the calling process enters the &lt;code&gt;gen_server&lt;/code&gt; process receive loop and becomes a &lt;code&gt;gen_server&lt;/code&gt; process. The process &lt;strong&gt;must&lt;/strong&gt; have been started using one of the start functions in &lt;code&gt;&lt;a href=&quot;proc_lib&quot;&gt;proc_lib(3)&lt;/a&gt;&lt;/code&gt;. The user is responsible for any initialization of the process, including registering a name for it.</source>
          <target state="translated">既存のプロセスを &lt;code&gt;gen_server&lt;/code&gt; プロセスにします。呼び出し元プロセスが入る代わりに、戻らない &lt;code&gt;gen_server&lt;/code&gt; のプロセスがループを受けるとなると &lt;code&gt;gen_server&lt;/code&gt; のプロセス。プロセス&lt;strong&gt;は&lt;/strong&gt;、 &lt;code&gt;&lt;a href=&quot;proc_lib&quot;&gt;proc_lib(3)&lt;/a&gt;&lt;/code&gt; の開始関数の1つを使用して開始されている&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。ユーザーは、プロセスの名前の登録など、プロセスの初期化を担当します。</target>
        </trans-unit>
        <trans-unit id="ca23188a55ed798e178a8cdc711ee096dc651317" translate="yes" xml:space="preserve">
          <source>Makes another copy of a table at the node &lt;code&gt;Node&lt;/code&gt;. Argument &lt;code&gt;Type&lt;/code&gt; must be either of the atoms &lt;code&gt;ram_copies&lt;/code&gt;, &lt;code&gt;disc_copies&lt;/code&gt;, or &lt;code&gt;disc_only_copies&lt;/code&gt;. For example, the following call ensures that a disc replica of the &lt;code&gt;person&lt;/code&gt; table also exists at node &lt;code&gt;Node&lt;/code&gt;:</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; にテーブルの別のコピーを作成します。引数の &lt;code&gt;Type&lt;/code&gt; は、アトム &lt;code&gt;ram_copies&lt;/code&gt; 、 &lt;code&gt;disc_copies&lt;/code&gt; 、または &lt;code&gt;disc_only_copies&lt;/code&gt; のいずれかでなければなりません。たとえば、次の呼び出しにより、ノード &lt;code&gt;Node&lt;/code&gt; に &lt;code&gt;person&lt;/code&gt; テーブルのディスクレプリカも存在することが保証されます。</target>
        </trans-unit>
        <trans-unit id="aa974f84878c85c9522eb437dfa9236890e3b59a" translate="yes" xml:space="preserve">
          <source>Makes any process created by a traced process inherit its trace flags, including flag &lt;code&gt;set_on_spawn&lt;/code&gt;.</source>
          <target state="translated">トレースされたプロセスによって作成されたプロセスに、フラグ &lt;code&gt;set_on_spawn&lt;/code&gt; を含むそのトレースフラグを継承させます。</target>
        </trans-unit>
        <trans-unit id="d6fe67417b1a2349e7be32124ba5fe55fba98791" translate="yes" xml:space="preserve">
          <source>Makes any process linked by a traced process inherit its trace flags, including flag &lt;code&gt;set_on_link&lt;/code&gt;.</source>
          <target state="translated">トレースされたプロセスによってリンクされたプロセスに、フラグ &lt;code&gt;set_on_link&lt;/code&gt; を含むそのトレースフラグを継承させます。</target>
        </trans-unit>
        <trans-unit id="81962eacd7a836ddf3c4da74a5b02410645fe00a" translate="yes" xml:space="preserve">
          <source>Makes copies of the source file for the given modules, where it for each executable line is specified how many times it has been executed.</source>
          <target state="translated">与えられたモジュールのソースファイルのコピーを作成します。</target>
        </trans-unit>
        <trans-unit id="91fe360029900348adebe5c87f81ee0c4d1d7bfa" translate="yes" xml:space="preserve">
          <source>Makes it possible to handle removal of releases outside the release handler. Tells the release handler that the release is removed from the system. This function does not delete any files.</source>
          <target state="translated">リリースハンドラの外でリリースの削除を処理できるようにします。リリースがシステムから削除されたことをリリースハンドラに通知します。この関数はファイルを削除しません。</target>
        </trans-unit>
        <trans-unit id="d8d3cd6f1fa13ad3388a331a2a27038c3db886f4" translate="yes" xml:space="preserve">
          <source>Makes it possible to handle unpacking of releases outside the release handler. Tells the release handler that the release is unpacked. &lt;code&gt;Vsn&lt;/code&gt; is extracted from the release resource file &lt;code&gt;RelFile&lt;/code&gt;.</source>
          <target state="translated">リリースハンドラの外でリリースのアンパックを処理できるようにします。リリースがアンパックされたことをリリースハンドラーに通知します。 &lt;code&gt;Vsn&lt;/code&gt; は、リリースリソースファイル &lt;code&gt;RelFile&lt;/code&gt; から抽出されます。</target>
        </trans-unit>
        <trans-unit id="550cc3842fa85cd7551150ef1a3ffbb8ecf08f4e" translate="yes" xml:space="preserve">
          <source>Makes it possible to read or write gzip compressed files. Option &lt;code&gt;compressed&lt;/code&gt; must be combined with &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;, but not both. Notice that the file size obtained with &lt;code&gt;&lt;a href=&quot;#read_file_info-1&quot;&gt;read_file_info/1&lt;/a&gt;&lt;/code&gt; does probably not match the number of bytes that can be read from a compressed file.</source>
          <target state="translated">gzip圧縮ファイルの読み取りまたは書き込みを可能にします。オプション &lt;code&gt;compressed&lt;/code&gt; は、 &lt;code&gt;read&lt;/code&gt; または &lt;code&gt;write&lt;/code&gt; と組み合わせる必要がありますが、両方を組み合わせることはできません。 &lt;code&gt;&lt;a href=&quot;#read_file_info-1&quot;&gt;read_file_info/1&lt;/a&gt;&lt;/code&gt; で取得したファイルサイズが、圧縮ファイルから読み取れるバイト数と一致しない可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="47c408fbb745313fb815eff80dafd2c1c61a239e" translate="yes" xml:space="preserve">
          <source>Makes necessary initializations and returns the initial channel state if the initializations succeed.</source>
          <target state="translated">必要な初期化を行い、初期化に成功した場合はチャンネルの初期状態を返します。</target>
        </trans-unit>
        <trans-unit id="fa89cf81f10044b652f143f54fcc25e4b34fd715" translate="yes" xml:space="preserve">
          <source>Makes the &lt;code&gt;efile&lt;/code&gt; loader write some debug information, such as the reason for failures, while it handles files.</source>
          <target state="translated">作り &lt;code&gt;efile&lt;/code&gt; それはファイルを処理する一方で、そのような失敗の理由として、いくつかのデバッグ情報を書き込むローダーを。</target>
        </trans-unit>
        <trans-unit id="d304b67681b86e2abd50ebc5b49fc156fedec9bb" translate="yes" xml:space="preserve">
          <source>Makes the Erlang emulator be restarted (with whatever parameters are registered for the service at the occasion) when it stops. If the emulator stops again within 10 seconds, it is not restarted to avoid an infinite loop, which could hang the Windows system.</source>
          <target state="translated">Erlangエミュレータが停止したときに(そのときのサービスに登録されているパラメータで)再起動させます。もしエミュレータが10秒以内に再び停止した場合、Windowsシステムをハングアップさせるような無限ループを避けるために再起動されません。</target>
        </trans-unit>
        <trans-unit id="e3a7e58acd1b6273937af4828973ccfe2aa9acaf" translate="yes" xml:space="preserve">
          <source>Makes the Erlang runtime system into a distributed node, similar to &lt;code&gt;-name&lt;/code&gt;, but the host name portion of the node name &lt;code&gt;Name@Host&lt;/code&gt; will be the short name, not fully qualified.</source>
          <target state="translated">Erlangランタイムシステムを &lt;code&gt;-name&lt;/code&gt; と同様に分散ノードにしますが、ノード名 &lt;code&gt;Name@Host&lt;/code&gt; のホスト名部分は完全修飾されていない短い名前になります。</target>
        </trans-unit>
        <trans-unit id="40ffd151e829beb987a01b9018b4b4d87ff04f18" translate="yes" xml:space="preserve">
          <source>Makes the Erlang runtime system into a distributed node, similar to &lt;code&gt;&lt;a href=&quot;#name&quot;&gt;-name&lt;/a&gt;&lt;/code&gt;, but the host name portion of the node name &lt;code&gt;Name@Host&lt;/code&gt; will be the short name, not fully qualified.</source>
          <target state="translated">Erlangランタイムシステムを &lt;code&gt;&lt;a href=&quot;#name&quot;&gt;-name&lt;/a&gt;&lt;/code&gt; と同様に分散ノードにしますが、ノード名 &lt;code&gt;Name@Host&lt;/code&gt; のホスト名部分は短い名前になり、完全修飾されません。</target>
        </trans-unit>
        <trans-unit id="c9cf5142abfabd14124fcdb58d0036a8bd902fda" translate="yes" xml:space="preserve">
          <source>Makes the Erlang runtime system into a distributed node. This flag invokes all network servers necessary for a node to become distributed; see &lt;code&gt; net_kernel(3)&lt;/code&gt;. It is also ensured that &lt;code&gt;epmd&lt;/code&gt; runs on the current host before Erlang is started; see &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd(1)&lt;/a&gt;&lt;/code&gt;.and the &lt;code&gt;&lt;a href=&quot;#start_epmd&quot;&gt;-start_epmd&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">Erlangランタイムシステムを分散ノードにします。このフラグは、ノードが分散されるために必要なすべてのネットワークサーバーを呼び出します。 &lt;code&gt; net_kernel(3)&lt;/code&gt; を参照してください。Erlangが開始される前に、 &lt;code&gt;epmd&lt;/code&gt; が現在のホストで実行されることも保証されます。 &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd(1)&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#start_epmd&quot;&gt;-start_epmd&lt;/a&gt;&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="f7aa031d2e4d7c3b20a440dd107fb282795ac6f0" translate="yes" xml:space="preserve">
          <source>Makes the Erlang runtime system into a distributed node. This flag invokes all network servers necessary for a node to become distributed; see &lt;code&gt;net_kernel(3)&lt;/code&gt;. It is also ensured that &lt;code&gt;epmd&lt;/code&gt; runs on the current host before Erlang is started; see &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd(1)&lt;/a&gt;&lt;/code&gt;.and the &lt;code&gt;&lt;a href=&quot;#start_epmd&quot;&gt;-start_epmd&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">Erlangランタイムシステムを分散ノードにします。このフラグは、ノードが分散されるために必要なすべてのネットワークサーバーを呼び出します。 &lt;code&gt;net_kernel(3)&lt;/code&gt; を参照してください。また、Erlangが起動する前に、 &lt;code&gt;epmd&lt;/code&gt; が現在のホストで実行されることも保証されています。 &lt;code&gt;&lt;a href=&quot;epmd&quot;&gt;epmd(1)&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;#start_epmd&quot;&gt;-start_epmd&lt;/a&gt;&lt;/code&gt; オプションを参照してください。</target>
        </trans-unit>
        <trans-unit id="b8a750500054d695ef79dc67c8e3f89388948a20" translate="yes" xml:space="preserve">
          <source>Makes the Erlang runtime system invoke &lt;code&gt;make:all()&lt;/code&gt; in the current working directory and then terminate; see &lt;code&gt;make(3)&lt;/code&gt;. Implies &lt;code&gt;-noinput&lt;/code&gt;.</source>
          <target state="translated">Erlangランタイムシステムに、現在の作業ディレクトリで &lt;code&gt;make:all()&lt;/code&gt; を起動させてから終了させます。 &lt;code&gt;make(3)&lt;/code&gt; を参照してください。意味 &lt;code&gt;-noinput&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c606e85ac2aed92be8eb1ce19cdcab5a15e4f9b9" translate="yes" xml:space="preserve">
          <source>Makes the array resizable. (Reverses the effects of &lt;code&gt;&lt;a href=&quot;#fix-1&quot;&gt;fix/1&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">配列のサイズを変更可能にします。（ &lt;code&gt;&lt;a href=&quot;#fix-1&quot;&gt;fix/1&lt;/a&gt;&lt;/code&gt; の効果を逆にします。）</target>
        </trans-unit>
        <trans-unit id="ab845853493a2c837853fd6b3e8f0aaa392fd64f" translate="yes" xml:space="preserve">
          <source>Makes the breakpoint at &lt;code&gt;Line&lt;/code&gt; in &lt;code&gt;Module&lt;/code&gt; active.</source>
          <target state="translated">ブレークポイント作り &lt;code&gt;Line&lt;/code&gt; で &lt;code&gt;Module&lt;/code&gt; アクティブ。</target>
        </trans-unit>
        <trans-unit id="66efe312d73a33922588677a593f505e5441c8f3" translate="yes" xml:space="preserve">
          <source>Makes the breakpoint at &lt;code&gt;Line&lt;/code&gt; in &lt;code&gt;Module&lt;/code&gt; inactive.</source>
          <target state="translated">ブレークポイントを作る &lt;code&gt;Line&lt;/code&gt; で &lt;code&gt;Module&lt;/code&gt; 非アクティブ。</target>
        </trans-unit>
        <trans-unit id="4197e2c90774db9c9ce91b8b094791dfa882c29c" translate="yes" xml:space="preserve">
          <source>Makes the calling process become a &lt;code&gt;gen_statem&lt;/code&gt;. Does not return, instead the calling process enters the &lt;code&gt;gen_statem&lt;/code&gt; receive loop and becomes a &lt;code&gt;gen_statem&lt;/code&gt; server. The process &lt;strong&gt;must&lt;/strong&gt; have been started using one of the start functions in &lt;code&gt;&lt;a href=&quot;proc_lib&quot;&gt;proc_lib&lt;/a&gt;&lt;/code&gt;. The user is responsible for any initialization of the process, including registering a name for it.</source>
          <target state="translated">呼び出しプロセスを &lt;code&gt;gen_statem&lt;/code&gt; にします。戻りません。代わりに、呼び出しプロセスは &lt;code&gt;gen_statem&lt;/code&gt; 受信ループに入り、 &lt;code&gt;gen_statem&lt;/code&gt; サーバーになります。プロセス&lt;strong&gt;は&lt;/strong&gt;、 &lt;code&gt;&lt;a href=&quot;proc_lib&quot;&gt;proc_lib&lt;/a&gt;&lt;/code&gt; の開始関数の1つを使用して開始されている&lt;strong&gt;必要&lt;/strong&gt;が&lt;strong&gt;あり&lt;/strong&gt;ます。ユーザーは、プロセスの名前の登録など、プロセスの初期化を担当します。</target>
        </trans-unit>
        <trans-unit id="7816dd7bfd9f71c9801ecdf559eb8559d1fd39dd" translate="yes" xml:space="preserve">
          <source>Makes the current code for &lt;code&gt;Module&lt;/code&gt; become old code and deletes all references for this module from the export table. Returns &lt;code&gt;undefined&lt;/code&gt; if the module does not exist, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; の現在のコードを古いコードにし、このモジュールのすべての参照をエクスポートテーブルから削除します。モジュールが存在しない場合は &lt;code&gt;undefined&lt;/code&gt; を返し、それ以外の場合は &lt;code&gt;true&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="2ffc4bee79fb8820e1fdd4f31e40972ffd12cfcd" translate="yes" xml:space="preserve">
          <source>Makes the current version of &lt;code&gt;Mod&lt;/code&gt; old. &lt;code&gt;PrePurge&lt;/code&gt; is ignored. For a description of &lt;code&gt;PostPurge&lt;/code&gt;, see the high-level instruction &lt;code&gt;update&lt;/code&gt; earlier.</source>
          <target state="translated">&lt;code&gt;Mod&lt;/code&gt; の現在のバージョンを古いものにします。 &lt;code&gt;PrePurge&lt;/code&gt; は無視されます。 &lt;code&gt;PostPurge&lt;/code&gt; の説明については、前述の高レベルの命令の &lt;code&gt;update&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="75ccf5b40e3c580610c11910676d267ac96338b9" translate="yes" xml:space="preserve">
          <source>Makes the emulator print its version number.</source>
          <target state="translated">エミュレータにバージョン番号を表示させます。</target>
        </trans-unit>
        <trans-unit id="03fcc3406838240ad7e71ecfcf6e7cb062a03c52" translate="yes" xml:space="preserve">
          <source>Makes the emulator print its version number. The same as &lt;code&gt;erl +V&lt;/code&gt;.</source>
          <target state="translated">エミュレータにバージョン番号を印刷させます。 &lt;code&gt;erl +V&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="0c6eda41af82625c188e23faff139b871d0dc271" translate="yes" xml:space="preserve">
          <source>Makes the file perform automatic translation of characters to and from a specific (Unicode) encoding. Notice that the data supplied to &lt;code&gt;&lt;a href=&quot;#write-2&quot;&gt;write/2&lt;/a&gt;&lt;/code&gt; or returned by &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; still is byte-oriented; this option denotes only how data is stored in the disk file.</source>
          <target state="translated">特定の（Unicode）エンコーディングとの間で文字の自動変換をファイルに実行させます。 &lt;code&gt;&lt;a href=&quot;#write-2&quot;&gt;write/2&lt;/a&gt;&lt;/code&gt; に提供された、または &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; から返されたデータは依然としてバイト指向であることに注意してください。このオプションは、データがディスクファイルに格納される方法のみを示します。</target>
        </trans-unit>
        <trans-unit id="ce1b5535c27729e37b24da5577a1e2edda190797" translate="yes" xml:space="preserve">
          <source>Makes the first process created by a traced process inherit its trace flags, excluding flag &lt;code&gt;set_on_first_spawn&lt;/code&gt;.</source>
          <target state="translated">トレースされたプロセスによって作成された最初のプロセスに、フラグ &lt;code&gt;set_on_first_spawn&lt;/code&gt; を除くトレースフラグを継承させます。</target>
        </trans-unit>
        <trans-unit id="51a7e91b712508eac0b349f8e399224c503bf1a3" translate="yes" xml:space="preserve">
          <source>Makes the first process linked to by a traced process inherit its trace flags, excluding flag &lt;code&gt;set_on_first_link&lt;/code&gt;.</source>
          <target state="translated">トレースされたプロセスによってリンクされた最初のプロセスに、フラグ &lt;code&gt;set_on_first_link&lt;/code&gt; を除くトレースフラグを継承させます。</target>
        </trans-unit>
        <trans-unit id="699e692edb812c99776e6de21b71da2e27456acb" translate="yes" xml:space="preserve">
          <source>Makes the function &lt;code&gt;F/A&lt;/code&gt; no longer being auto-imported from the &lt;code&gt;erlang&lt;/code&gt; module, which resolves BIF name clashes. This option must be used to resolve name clashes with BIFs auto-imported before R14A, if it is needed to call the local function with the same name as an auto-imported BIF without module prefix.</source>
          <target state="translated">関数 &lt;code&gt;F/A&lt;/code&gt; が &lt;code&gt;erlang&lt;/code&gt; モジュールから自動インポートされなくなり、BIF名の衝突が解決されます。モジュールプレフィックスなしで自動インポートされたBIFと同じ名前でローカル関数を呼び出す必要がある場合、このオプションを使用して、R14Aより前に自動インポートされたBIFとの名前の衝突を解決する必要があります。</target>
        </trans-unit>
        <trans-unit id="5ad0c7129eb3658b1728b9b552dafdedadbc94c1" translate="yes" xml:space="preserve">
          <source>Makes the process &lt;code&gt;Pid&lt;/code&gt; leave the group &lt;code&gt;Name&lt;/code&gt;. If the process is not a member of the group, &lt;code&gt;ok&lt;/code&gt; is returned.</source>
          <target state="translated">プロセス &lt;code&gt;Pid&lt;/code&gt; をグループ &lt;code&gt;Name&lt;/code&gt; のままにします。プロセスがグループのメンバーでない場合は、 &lt;code&gt;ok&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="bd055dbda48a993a104503584a8249f43561a9d2" translate="yes" xml:space="preserve">
          <source>Makes the process &lt;code&gt;PidOrPids&lt;/code&gt; leave the group &lt;code&gt;Name&lt;/code&gt;. If the process is not a member of the group, &lt;code&gt;not_joined&lt;/code&gt; is returned.</source>
          <target state="translated">プロセス &lt;code&gt;PidOrPids&lt;/code&gt; がグループ &lt;code&gt;Name&lt;/code&gt; 離れるようにします。プロセスがグループのメンバーでない場合、 &lt;code&gt;not_joined&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="45ad2871084bc4b367921bd684d396b4d847881d" translate="yes" xml:space="preserve">
          <source>Makes the specified release version &lt;code&gt;Vsn&lt;/code&gt; permanent.</source>
          <target state="translated">指定したリリースバージョン &lt;code&gt;Vsn&lt;/code&gt; を永続的なものにします。</target>
        </trans-unit>
        <trans-unit id="2f4cd63c2b38297a9b1944489ca49b98d5502133" translate="yes" xml:space="preserve">
          <source>Makes the transaction silently return the tuple &lt;code&gt;{aborted, Reason}&lt;/code&gt;. Termination of a Mnesia transaction means that an exception is thrown to an enclosing &lt;code&gt;catch&lt;/code&gt;. Thus, the expression &lt;code&gt;catch mnesia:abort(x)&lt;/code&gt; does not terminate the transaction.</source>
          <target state="translated">トランザクションが黙ってタプル &lt;code&gt;{aborted, Reason}&lt;/code&gt; 返すようにします。 Mnesiaトランザクションの終了は、例外を囲んでいる &lt;code&gt;catch&lt;/code&gt; にスローされることを意味します。したがって、式 &lt;code&gt;catch mnesia:abort(x)&lt;/code&gt; はトランザクションを終了しません。</target>
        </trans-unit>
        <trans-unit id="a92284d3fd76d4749295a03455474b61c19acbee" translate="yes" xml:space="preserve">
          <source>Making Hardware Watchdog Available</source>
          <target state="translated">ハードウェアウォッチドッグの利用可能化</target>
        </trans-unit>
        <trans-unit id="c3c361414f40468ac17c2fe68754d480ca1bcf62" translate="yes" xml:space="preserve">
          <source>Making a hardware watchdog available</source>
          <target state="translated">ハードウェアのウォッチドッグを利用可能にする</target>
        </trans-unit>
        <trans-unit id="a6b950fad26bf1993d43209bd38ff1959147aa83" translate="yes" xml:space="preserve">
          <source>Making calls from a &lt;code&gt;high&lt;/code&gt; priority process into code that you has no control over can cause the &lt;code&gt;high&lt;/code&gt; priority process to wait for a process with lower priority. That is, effectively decreasing the priority of the &lt;code&gt;high&lt;/code&gt; priority process during the call. Even if this is not the case with one version of the code that you have no control over, it can be the case in a future version of it. This can, for example, occur if a &lt;code&gt;high&lt;/code&gt; priority process triggers code loading, as the code server runs on priority &lt;code&gt;normal&lt;/code&gt;.</source>
          <target state="translated">以下からの呼び出しを行う &lt;code&gt;high&lt;/code&gt; あなたが管理していないことをコードに優先度のプロセスは、発生する可能性があります &lt;code&gt;high&lt;/code&gt; 優先度のプロセスは、優先度の低いプロセスを待ちます。つまり、効果の優先度低下、ある &lt;code&gt;high&lt;/code&gt; 通話中優先度のプロセスを。これは、制御できないコードの1つのバージョンに当てはまらない場合でも、将来のバージョンのコードに当てはまる可能性があります。場合、この缶は、例えば、発生する &lt;code&gt;high&lt;/code&gt; 優先度のプロセストリガコードローディングコードサーバが優先度に実行されるように、 &lt;code&gt;normal&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="31c6d1769fe27f5b364867a2ba03a8a0ce740773" translate="yes" xml:space="preserve">
          <source>Making requests without checking that the return value indicates success can be OK if the test case fails later, but it is never acceptable just to print an error message (into the log file) and return successfully. Such test cases do harm, as they create a false sense of security when overviewing the test results.</source>
          <target state="translated">戻り値が成功を示しているかどうかを確認せずにリクエストを行うことは、テストケースが後で失敗しても問題ありませんが、(ログファイルに)エラーメッセージを表示して成功を返すだけのテストケースは決して受け入れられません。このようなテストケースは、テスト結果を見るときに誤った安心感を与えてしまうので、害があります。</target>
        </trans-unit>
        <trans-unit id="2d4f453eee7e2dd34a8e386a2b75375fa105539c" translate="yes" xml:space="preserve">
          <source>Making several calls to &lt;code&gt;monitor/2&lt;/code&gt; for the same &lt;code&gt;Item&lt;/code&gt; and/or &lt;code&gt;Type&lt;/code&gt; is not an error; it results in as many independent monitoring instances.</source>
          <target state="translated">同じ &lt;code&gt;Item&lt;/code&gt; や &lt;code&gt;Type&lt;/code&gt; に対して &lt;code&gt;monitor/2&lt;/code&gt; を何度も呼び出してもエラーにはなりません。その結果、独立した監視インスタンスがいくつも生成されます。</target>
        </trans-unit>
        <trans-unit id="466c358751442005c7e7d386e4d7e639cbf1ac39" translate="yes" xml:space="preserve">
          <source>Making several calls to &lt;code&gt;monitor_node(Node, true)&lt;/code&gt; for the same &lt;code&gt;Node&lt;/code&gt; is not an error; it results in as many independent monitoring instances.</source>
          <target state="translated">同じ &lt;code&gt;Node&lt;/code&gt; に対して &lt;code&gt;monitor_node(Node, true)&lt;/code&gt; を数回呼び出してもエラーにはなりません。その結果、独立した監視インスタンスがいくつも生成されます。</target>
        </trans-unit>
        <trans-unit id="c730df3afaaac142f305e8f798eca241f12abf9f" translate="yes" xml:space="preserve">
          <source>Malayalam</source>
          <target state="translated">Malayalam</target>
        </trans-unit>
        <trans-unit id="8b70bb3a4d458cf297ab7b3a3b07b63b5ca07de9" translate="yes" xml:space="preserve">
          <source>Man</source>
          <target state="translated">Man</target>
        </trans-unit>
        <trans-unit id="eef68d8ca2c02e4bd3d5725888ca18ccdc7ca252" translate="yes" xml:space="preserve">
          <source>Manage a &lt;code&gt;Trace Pattern&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;Trace Pattern&lt;/code&gt; 管理する</target>
        </trans-unit>
        <trans-unit id="eca3bc872fab76a0e1f06e59d94263eaf1ea2a3a" translate="yes" xml:space="preserve">
          <source>Managed threads frequently need to update their thread progress by calling the following functions:</source>
          <target state="translated">管理されたスレッドは、以下の関数を呼び出してスレッドの進行状況を更新する必要があることが頻繁にあります。</target>
        </trans-unit>
        <trans-unit id="94ed4ca267e8c86206518dfa468e6a4dccf31403" translate="yes" xml:space="preserve">
          <source>Management of Fragmented Tables</source>
          <target state="translated">フラグメント化されたテーブルの管理</target>
        </trans-unit>
        <trans-unit id="b9ba49c22120fc0a45e8578b1bb98cbe3f8dd731" translate="yes" xml:space="preserve">
          <source>Management of processes internally in the runtime system suffered from these problems. When changing state on a process, for example from &lt;code&gt;waiting&lt;/code&gt; to &lt;code&gt;runnable&lt;/code&gt;, a lock on the process needed to be locked. When inserting a process into a run queue also a lock protecting the run queue had to be locked. When migrating a process from one run queue to another run queue, locks on both run queues and on the process had to be locked.</source>
          <target state="translated">ランタイムシステムの内部でのプロセスの管理には、これらの問題がありました。プロセスの状態を、たとえば &lt;code&gt;waiting&lt;/code&gt; から &lt;code&gt;runnable&lt;/code&gt; に変更する場合、プロセスのロックをロックする必要がありました。プロセスを実行キューに挿入するときは、実行キューを保護するロックもロックする必要がありました。プロセスをある実行キューから別の実行キューに移行する場合、実行キューとプロセスの両方のロックをロックする必要がありました。</target>
        </trans-unit>
        <trans-unit id="ff5123b141ff090ff835a7f30332c3740b2707e5" translate="yes" xml:space="preserve">
          <source>Manager configuration:</source>
          <target state="translated">マネージャーの設定。</target>
        </trans-unit>
        <trans-unit id="65a4a223a80dcdb4faa701bab0904a7145c7139e" translate="yes" xml:space="preserve">
          <source>Manager specific config options and types:</source>
          <target state="translated">マネージャー固有の設定オプションとタイプ。</target>
        </trans-unit>
        <trans-unit id="63617cfe427854e42387ca5fb2dd42a8d02042c4" translate="yes" xml:space="preserve">
          <source>Mandaic</source>
          <target state="translated">Mandaic</target>
        </trans-unit>
        <trans-unit id="4c2ea2d10dc0ede0423eff4ee1aac7300cd7cc28" translate="yes" xml:space="preserve">
          <source>Mandatory</source>
          <target state="translated">Mandatory</target>
        </trans-unit>
        <trans-unit id="55779720bd078b43fecc03c38a4dee19d2f0260c" translate="yes" xml:space="preserve">
          <source>Mandatory RAM. The schema resides in RAM only. At startup, a tiny new schema is generated. This default schema contains only the definition of the schema table and resides on the local node only. Since no other nodes are found in the default schema, configuration parameter &lt;code&gt;extra_db_nodes&lt;/code&gt; must be used to let the node share its table definitions with other nodes. (Parameter &lt;code&gt;extra_db_nodes&lt;/code&gt; can also be used on disc-full nodes.)</source>
          <target state="translated">必須RAM。スキーマはRAMにのみ存在します。起動時に、小さな新しいスキーマが生成されます。このデフォルトのスキーマには、スキーマテーブルの定義のみが含まれ、ローカルノードにのみ存在します。デフォルトのスキーマには他のノードが見つからないため、ノードが他のノードとテーブル定義を共有できるようにするには、構成パラメーター &lt;code&gt;extra_db_nodes&lt;/code&gt; を使用する必要があります。（パラメーター &lt;code&gt;extra_db_nodes&lt;/code&gt; は、ディスクフルノードでも使用できます。）</target>
        </trans-unit>
        <trans-unit id="ef7f5fd2af32ce149c0ca960148e8bf3bd0f1d1a" translate="yes" xml:space="preserve">
          <source>Mandatory RAM. The schema resides in RAM only. At startup, a tiny new schema is generated. This default schema only contains the definition of the schema table and only resides on the local node. Since no other nodes are found in the default schema, configuration parameter &lt;code&gt;extra_db_nodes&lt;/code&gt; must be used to let the node share its table definitions with other nodes.</source>
          <target state="translated">必須RAM。スキーマはRAMにのみ存在します。起動時に、小さな新しいスキーマが生成されます。このデフォルトのスキーマには、スキーマテーブルの定義のみが含まれ、ローカルノードにのみ存在します。デフォルトのスキーマには他のノードが見つからないため、ノードが他のノードとテーブル定義を共有できるようにするには、構成パラメーター &lt;code&gt;extra_db_nodes&lt;/code&gt; を使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="dd245892c4cf7481ff0b76736f06f016f9538140" translate="yes" xml:space="preserve">
          <source>Mandatory disc. The schema is assumed to be located in the &lt;code&gt;Mnesia&lt;/code&gt; directory. If the schema cannot be found, &lt;code&gt;Mnesia&lt;/code&gt; refuses to start.</source>
          <target state="translated">必須のディスク。スキーマは &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリにあると想定されています。スキーマが見つからない場合、 &lt;code&gt;Mnesia&lt;/code&gt; は起動を拒否します。</target>
        </trans-unit>
        <trans-unit id="056c789bb6261a61e562f98c5294a028b2c27e2a" translate="yes" xml:space="preserve">
          <source>Mandatory disc. The schema is assumed to be located in the Mnesia directory. If the schema cannot be found, Mnesia refuses to start. This is the old behavior.</source>
          <target state="translated">必須ディスク。スキーマはMnesiaディレクトリにあるものとします。スキーマが見つからない場合、Mnesiaは起動を拒否します。これは古い動作です。</target>
        </trans-unit>
        <trans-unit id="9bf3e3f7107080f2dd0decda36be42d7dcd887d3" translate="yes" xml:space="preserve">
          <source>Mandatory if &lt;code&gt;-reldir&lt;/code&gt; is not specified and no &lt;code&gt;RELDIR&lt;/code&gt; exists in the environment. This specifies the Erlang installation root directory (under which the &lt;code&gt;lib&lt;/code&gt;, &lt;code&gt;releases&lt;/code&gt;, and &lt;code&gt;erts-&amp;lt;Version&amp;gt;&lt;/code&gt; directories are located). If only &lt;code&gt;-reldir&lt;/code&gt; (or environment variable &lt;code&gt;RELDIR&lt;/code&gt;) is specified, the Erlang root is assumed to be the directory exactly one level above the release directory.</source>
          <target state="translated">&lt;code&gt;-reldir&lt;/code&gt; が指定されておらず、環境に &lt;code&gt;RELDIR&lt;/code&gt; が存在しない場合は必須です。これは、Erlangインストールルートディレクトリ（その下に &lt;code&gt;lib&lt;/code&gt; 、 &lt;code&gt;releases&lt;/code&gt; 、および &lt;code&gt;erts-&amp;lt;Version&amp;gt;&lt;/code&gt; ディレクトリがある）を指定します。場合にのみ &lt;code&gt;-reldir&lt;/code&gt; （または環境変数 &lt;code&gt;RELDIR&lt;/code&gt; が）指定された、Erlangのルートが1つのレベルだけリリースディレクトリ上のディレクトリであると想定されます。</target>
        </trans-unit>
        <trans-unit id="27228686f00efd9069abdd5d3e934b51d59f64a9" translate="yes" xml:space="preserve">
          <source>Mandatory if environment variable &lt;code&gt;RELDIR&lt;/code&gt; is not specified and no &lt;code&gt;-rootdir&lt;/code&gt; option is specified. Tells &lt;code&gt;start_erl&lt;/code&gt; where the root of the release tree is located in the file system (typically &amp;lt;Erlang root&amp;gt;\\releases). The &lt;code&gt;start_erl.data&lt;/code&gt; file is expected to be located in this directory (unless otherwise specified). If only option &lt;code&gt;-rootdir&lt;/code&gt; is specified, the directory is assumed to be &amp;lt;Erlang root&amp;gt;\\releases.</source>
          <target state="translated">環境変数 &lt;code&gt;RELDIR&lt;/code&gt; が指定されておらず、 &lt;code&gt;-rootdir&lt;/code&gt; オプションが指定されていない場合は必須です。リリースツリーのルートがファイルシステムのどこにあるかを &lt;code&gt;start_erl&lt;/code&gt; に通知します（通常は&amp;lt;Erlang root&amp;gt; \\ releases）。 &lt;code&gt;start_erl.data&lt;/code&gt; ファイルは（特に指定のない限り）、このディレクトリに配置されることが予想されます。オプション &lt;code&gt;-rootdir&lt;/code&gt; のみが指定されている場合、ディレクトリは&amp;lt;Erlang root&amp;gt; \\ releasesであると想定されます。</target>
        </trans-unit>
        <trans-unit id="d51f3b74b92dcfdb5b928a635f84a5f51200457c" translate="yes" xml:space="preserve">
          <source>Mandatory. Delimits &lt;code&gt;start_erl&lt;/code&gt; options from normal Erlang options. Everything on the command line &lt;strong&gt;before&lt;/strong&gt;&lt;code&gt;++&lt;/code&gt; is interpreted as options to be sent to the &lt;code&gt;erl&lt;/code&gt; program. Everything &lt;strong&gt;after&lt;/strong&gt;&lt;code&gt;++&lt;/code&gt; is interpreted as options to &lt;code&gt;start_erl&lt;/code&gt; itself.</source>
          <target state="translated">必須。 &lt;code&gt;start_erl&lt;/code&gt; オプションを通常のErlangオプションから区切ります。 &lt;code&gt;++&lt;/code&gt; の&lt;strong&gt;前&lt;/strong&gt;のコマンドライン上のすべては、 &lt;code&gt;erl&lt;/code&gt; プログラムに送信されるオプションとして解釈されます。 &lt;code&gt;++&lt;/code&gt; &lt;strong&gt;以降&lt;/strong&gt;はすべて&lt;strong&gt;、&lt;/strong&gt; &lt;code&gt;start_erl&lt;/code&gt; 自体のオプションとして解釈されます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="fc48591fe7588ae910f82a8e32e5898f8b677543" translate="yes" xml:space="preserve">
          <source>Mandatory: one or more</source>
          <target state="translated">必須:1つ以上</target>
        </trans-unit>
        <trans-unit id="40331ec2ec252f48c8769280f8a9d0addf85621c" translate="yes" xml:space="preserve">
          <source>Manichaean</source>
          <target state="translated">Manichaean</target>
        </trans-unit>
        <trans-unit id="1a83f62a1c9d2ea7c7b76528168eeb1027e1c303" translate="yes" xml:space="preserve">
          <source>Manipulate the return of all suite configuration calls and by extension the result of the test themselves.</source>
          <target state="translated">すべてのスイートの設定呼び出しの戻り値を操作し、ひいてはテスト結果そのものを操作します。</target>
        </trans-unit>
        <trans-unit id="a70642b028568014a36d3c8b54782719d4573d07" translate="yes" xml:space="preserve">
          <source>Manipulate the return of all suite configuration calls, and in extension, the result of the tests themselves.</source>
          <target state="translated">すべてのスイートの設定呼び出しの戻り値を操作し、ひいてはテストの結果そのものを操作します。</target>
        </trans-unit>
        <trans-unit id="28533b136858ffce59b77b52f8bc0d5d5c92201b" translate="yes" xml:space="preserve">
          <source>Manipulate the runtime configuration before each suite configuration call.</source>
          <target state="translated">各スイート設定呼び出しの前にランタイム設定を操作します。</target>
        </trans-unit>
        <trans-unit id="a777446b5191e48dad7cad24722806c79d3f271e" translate="yes" xml:space="preserve">
          <source>Manipulation of data represented as Erlang data types</source>
          <target state="translated">Erlangデータ型で表現されたデータの操作</target>
        </trans-unit>
        <trans-unit id="8d09db94e4c55d4786f4570130a4d22ac51744f7" translate="yes" xml:space="preserve">
          <source>Manner in which incoming answer messages containing decode errors are handled.</source>
          <target state="translated">デコードエラーを含む受信アンサーメッセージの処理方法。</target>
        </trans-unit>
        <trans-unit id="6284d04575c3819f39fde9f65fd471b9435e0ad1" translate="yes" xml:space="preserve">
          <source>Manner in which incoming requests are handled when an error other than 3007 (DIAMETER_APPLICATION_UNSUPPORTED, which cannot be associated with an application callback module), is detected.</source>
          <target state="translated">3007 (DIAMETER_APPLICATION_UNSUPPORTED,アプリケーションコールバックモジュールに関連付けられない)以外のエラーが検出された場合の受信要求の処理方法。</target>
        </trans-unit>
        <trans-unit id="33b69b29ea474749d0da92aa4fbd4214e3920f4e" translate="yes" xml:space="preserve">
          <source>Manual handling of session tickets is also supported. In manual mode, it is the responsibility of the client to handle received session tickets.</source>
          <target state="translated">セッションチケットの手動処理もサポートされています。手動モードでは、受信したセッションチケットを処理するのはクライアントの責任です。</target>
        </trans-unit>
        <trans-unit id="5351cf3c5581dd875efa06c896ad751d99613d56" translate="yes" xml:space="preserve">
          <source>Manually performs a mib server cache gc. This can be done regardless of the value of the &lt;code&gt;autogc&lt;/code&gt; option. The &lt;code&gt;NumElementsGCed&lt;/code&gt; value indicates how many elements where actually removed from the cache.</source>
          <target state="translated">mibサーバーキャッシュgcを手動で実行します。これは、 &lt;code&gt;autogc&lt;/code&gt; オプションの値に関係なく実行できます。 &lt;code&gt;NumElementsGCed&lt;/code&gt; の値は実際にはキャッシュから削除どのように多くの要素を示します。</target>
        </trans-unit>
        <trans-unit id="c5c7ebf32bd378c4ba16c49e6124169115f258a7" translate="yes" xml:space="preserve">
          <source>Many assertions (of any sort) can occur in succession. For example, the following matches &quot;foo&quot; preceded by three digits that are not &quot;999&quot;:</source>
          <target state="translated">多くのアサーション(どんな種類のものでも)が連続して発生することがあります。例えば、以下は「999」ではない3桁の数字が先行する「foo」にマッチします。</target>
        </trans-unit>
        <trans-unit id="7f887661a9b51d0d5237dac908440eb7b836be70" translate="yes" xml:space="preserve">
          <source>Many driver API functions have changed argument type and/or return value to &lt;code&gt;ErlDrvSizeT&lt;/code&gt; from mostly &lt;code&gt;int&lt;/code&gt;. Automatic type-casting probably makes these changes necessary only for a driver that encounters sizes &amp;gt; 32 bits.</source>
          <target state="translated">多くのドライバーAPI関数は、引数の型や戻り値を、ほとんど &lt;code&gt;int&lt;/code&gt; から &lt;code&gt;ErlDrvSizeT&lt;/code&gt; に変更しました。自動型キャストにより、これらの変更は、32ビットを超えるサイズに遭遇するドライバーに対してのみ必要になります。</target>
        </trans-unit>
        <trans-unit id="ae795bffdcb1fe7cf5ecc8403f7d637849040545" translate="yes" xml:space="preserve">
          <source>Many have been in contact with the command 'ssh' on a Linux machine (or similar) to remotly log in on another machine. One types</source>
          <target state="translated">多くの人は、Linux マシン(またはそれに近いもの)上のコマンド 'ssh' に接触して、別のマシンでリモートログインしています。あるコマンドは、次のようにタイプします</target>
        </trans-unit>
        <trans-unit id="56029af12913d9bc7ea74d4914ee32e80f6707df" translate="yes" xml:space="preserve">
          <source>Many list comprehension expressions can be evaluated by the &lt;code&gt;qlc&lt;/code&gt; module. Exceptions are expressions, such that variables introduced in patterns (or filters) are used in some generator later in the list comprehension. As an example, consider an implementation of &lt;code&gt;lists:append(L)&lt;/code&gt;: &lt;code&gt;[X ||Y &amp;lt;- L, X &amp;lt;- Y]&lt;/code&gt;. &lt;code&gt;Y&lt;/code&gt; is introduced in the first generator and used in the second. The ordinary list comprehension is normally to be preferred when there is a choice as to which to use. One difference is that &lt;code&gt;&lt;a href=&quot;#eval-1&quot;&gt;eval/1,2&lt;/a&gt;&lt;/code&gt; collects answers in a list that is finally reversed, while list comprehensions collect answers on the stack that is finally unwound.</source>
          <target state="translated">多くのリスト内包表記は &lt;code&gt;qlc&lt;/code&gt; モジュールで評価できます。例外は式であり、パターン（またはフィルター）で導入された変数は、後のリスト内包のジェネレーターで使用されます。例として、 &lt;code&gt;lists:append(L)&lt;/code&gt; ： &lt;code&gt;[X ||Y &amp;lt;- L, X &amp;lt;- Y]&lt;/code&gt; 実装を考えます。 &lt;code&gt;Y&lt;/code&gt; は最初のジェネレータで導入され、2番目のジェネレータで使用されます。どちらを使用するかを選択できる場合は、通常のリスト内包表記をお勧めします。 1つの違いは、 &lt;code&gt;&lt;a href=&quot;#eval-1&quot;&gt;eval/1,2&lt;/a&gt;&lt;/code&gt; は最終的に逆転したリストで回答を収集するのに対し、リスト内包表記はスタックから最終的に解かれた回答を収集することです。</target>
        </trans-unit>
        <trans-unit id="4a3eae152029d738a0ebe7e23d689a8ac8f03946" translate="yes" xml:space="preserve">
          <source>Many nice things can be done with the iterator functions but take some caution about performance and memory use for large tables.</source>
          <target state="translated">イテレータ関数では多くの素晴らしいことができますが、大きなテーブルでのパフォーマンスとメモリ使用には注意が必要です。</target>
        </trans-unit>
        <trans-unit id="9fdf7f9f32446c75f533a26900329aea292fc48d" translate="yes" xml:space="preserve">
          <source>Many of the operators can only be applied to arguments of a certain type. For example, arithmetic operators can only be applied to numbers. An argument of the wrong type causes a &lt;code&gt;badarg&lt;/code&gt; runtime error.</source>
          <target state="translated">演算子の多くは、特定のタイプの引数にのみ適用できます。たとえば、算術演算子は数値にのみ適用できます。間違ったタイプの引数は、 &lt;code&gt;badarg&lt;/code&gt; ランタイムエラーを引き起こします。</target>
        </trans-unit>
        <trans-unit id="f2f1df17f07587c5055c0ce8c9221879d8708726" translate="yes" xml:space="preserve">
          <source>Many of the output functions have a &quot;header buffer&quot;, with &lt;code&gt;hbuf&lt;/code&gt; and &lt;code&gt;hlen&lt;/code&gt; parameters. This buffer is sent as a list before the binary (or list, depending on port mode) that is sent. This is convenient when matching on messages received from the port. (Although in the latest Erlang versions there is the binary syntax, which enables you to match on the beginning of a binary.)</source>
          <target state="translated">出力関数の多くには、 &lt;code&gt;hbuf&lt;/code&gt; パラメーターと &lt;code&gt;hlen&lt;/code&gt; パラメーターを持つ「ヘッダーバッファー」があります。このバッファーは、バイナリー（またはポート・モードによってはリスト）が送信される前に、リストとして送信されます。これは、ポートから受信したメッセージを照合するときに便利です。（最新のErlangバージョンにはバイナリ構文があり、バイナリの先頭で一致させることができます。）</target>
        </trans-unit>
        <trans-unit id="2ff407509d30c8b3a82bd0672d36e2f5b3903c78" translate="yes" xml:space="preserve">
          <source>Many operations communicating with a process executing a dirty NIF can, however, complete while it executes the dirty NIF. For example, retrieving information about it through &lt;code&gt;&lt;a href=&quot;erlang#process_info-1&quot;&gt; process_info&lt;/a&gt;&lt;/code&gt;, setting its group leader, register/unregister its name, and so on.</source>
          <target state="translated">ただし、ダーティNIFを実行しているプロセスと通信する多くの操作は、ダーティNIFの実行中に完了する可能性があります。たとえば、 &lt;code&gt;&lt;a href=&quot;erlang#process_info-1&quot;&gt; process_info&lt;/a&gt;&lt;/code&gt; を介して情報を取得したり、グループリーダーを設定したり、名前を登録/登録解除したりします。</target>
        </trans-unit>
        <trans-unit id="21b179b8985ad61d572fc99ea80a2e913e1d0bdd" translate="yes" xml:space="preserve">
          <source>Many operations communicating with a process executing a dirty NIF can, however, complete while it executes the dirty NIF. For example, retrieving information about it through &lt;code&gt;erlang:process_info&lt;/code&gt;, setting its group leader, register/unregister its name, and so on.</source>
          <target state="translated">ただし、ダーティNIFを実行するプロセスと通信する多くの操作は、ダーティNIFを実行している間に完了できます。たとえば、 &lt;code&gt;erlang:process_info&lt;/code&gt; を介してそれに関する情報を取得し、グループリーダーを設定し、その名前を登録/登録解除します。</target>
        </trans-unit>
        <trans-unit id="f86703eb2414253099183ba096ef8f59d855dec4" translate="yes" xml:space="preserve">
          <source>Many restrictions apply to the fun that is translated into a match specification. To put it simple: you cannot use anything in the fun that you cannot use in a match specification. This means that, among others, the following restrictions apply to the fun itself:</source>
          <target state="translated">マッチ仕様に翻訳されたファンには、多くの制限が適用されます。簡単に言えば、マッチ指定では使用できないものをファンで使用することはできません。これは、特に以下の制限が fun 自体にも適用されることを意味します。</target>
        </trans-unit>
        <trans-unit id="b3277af475a535b5e15ac96f9ce422da3543b8bc" translate="yes" xml:space="preserve">
          <source>Many small test cases tend to result in extra, and possibly duplicated code, as well as slow test execution because of large overhead for initializations and cleanups. Avoid duplicated code, for example, by using common help functions. Otherwise, the resulting suite becomes difficult to read and understand, and expensive to maintain.</source>
          <target state="translated">多くの小さなテストケースでは、初期化やクリーンアップのオーバーヘッドが大きいため、余分なコードや重複するコードが発生したり、テストの実行に時間がかかったりする傾向があります。例えば、共通のヘルプ関数を使用するなどして、重複したコードを避けてください。そうしないと、結果として得られるスイートは読みにくく、理解しにくくなり、保守にもコストがかかります。</target>
        </trans-unit>
        <trans-unit id="f4757731a17b024e345545fcb6d59364979c23d4" translate="yes" xml:space="preserve">
          <source>Many telecommunications applications have unique requirements on lookup times for certain types of records. If the &lt;code&gt;Company&lt;/code&gt; database had been a part of a telecommunications system, it could be to minimize the lookup time of an employee &lt;strong&gt;together&lt;/strong&gt; with a list of the projects the employee is working on. If this is the case, a drastically different data model without direct relationships can be chosen. You would then have only the records themselves, and different records could contain either direct references to other records, or contain other records that are not part of the &lt;code&gt;Mnesia&lt;/code&gt; schema.</source>
          <target state="translated">多くの電気通信アプリケーションには、特定のタイプのレコードのルックアップ時間に固有の要件があります。 &lt;code&gt;Company&lt;/code&gt; データベースが通信システムの一部であった場合、従業員が取り組んでいるプロジェクトのリスト&lt;strong&gt;とともに&lt;/strong&gt;、従業員の検索時間を最小限に抑えることができます。この場合、直接的な関係のない大幅に異なるデータモデルを選択できます。その場合、レコード自体のみがあり、別のレコードには他のレコードへの直接参照、または &lt;code&gt;Mnesia&lt;/code&gt; スキーマの一部ではない他のレコードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="68017d6821eb323d2063e3ce0fd2add46797e7ea" translate="yes" xml:space="preserve">
          <source>Many telecommunications applications must be controlled and reconfigured remotely. It is sometimes an advantage to perform this remote control with an open protocol such as the Simple Network Management Protocol (SNMP). The alternatives to this would be the following:</source>
          <target state="translated">多くの電気通信アプリケーションは、リモートで制御および再設定する必要があります。Simple Network Management Protocol (SNMP)のようなオープンプロトコルを使用して、このリモートコントロールを実行することが利点となる場合があります。これに代わるものとしては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="76d244eb5695df75281d39dbf3ed66bd8b67982c" translate="yes" xml:space="preserve">
          <source>Many thanks to Sebastiano Vigna for his help with the 58 bit adaption.</source>
          <target state="translated">58ビット化に協力してくれたSebastiano Vigna氏に感謝します。</target>
        </trans-unit>
        <trans-unit id="e7b004a583d02bc15f8db5aaa5239ed752c86ac6" translate="yes" xml:space="preserve">
          <source>Map holding the main components of a URI.</source>
          <target state="translated">URIの主要な構成要素を保持するマップ。</target>
        </trans-unit>
        <trans-unit id="f9636957ea9c74ef69d5b705de848b9cde84373e" translate="yes" xml:space="preserve">
          <source>Mapping of SNMPv2 error message to SNMPv1:</source>
          <target state="translated">SNMPv2のエラーメッセージをSNMPv1にマッピングします。</target>
        </trans-unit>
        <trans-unit id="2eb0d74870184c7f673bb050cdd8b5d41a869ece" translate="yes" xml:space="preserve">
          <source>Mapping the 28-bit integer to an index into the array.</source>
          <target state="translated">28ビット整数を配列のインデックスにマッピングします。</target>
        </trans-unit>
        <trans-unit id="a84d64ae1d03f9ff9bd84aab36be92ff55171896" translate="yes" xml:space="preserve">
          <source>Mappings between network interface index and names.</source>
          <target state="translated">ネットワーク・インターフェース・インデックスと名前のマッピング。</target>
        </trans-unit>
        <trans-unit id="94b57e1a0a21353f0acb8fe2dfd2f7899d2deac1" translate="yes" xml:space="preserve">
          <source>Mappings between network interface names and indexes.</source>
          <target state="translated">ネットワーク・インターフェース名とインデックス間のマッピング。</target>
        </trans-unit>
        <trans-unit id="6b8ce83c2e2c5a484157b664057c2b8bdf654df2" translate="yes" xml:space="preserve">
          <source>Maps a function onto the nodes of a tree. This replaces each node in the tree by the result of applying the given function on the original node, bottom-up.</source>
          <target state="translated">ツリーのノードに関数をマップします.これは,元のノードに与えられた関数をボトムアップで適用した結果を,ツリーの各ノードに置き換えます.</target>
        </trans-unit>
        <trans-unit id="c286942228a25588025573f075da4c09d52b9607" translate="yes" xml:space="preserve">
          <source>Maps are a set of key to value associations. These associations are encapsulated with &quot;#{&quot; and &quot;}&quot;. To create an association from &quot;key&quot; to value 42:</source>
          <target state="translated">マップは、キーと値の関連付けのセットです。これらのアソシエーションは、&quot;#{&quot;と&quot;}&quot;でカプセル化されています。キー」から「値」へのアソシエーションを作成するには、42.</target>
        </trans-unit>
        <trans-unit id="04b5c5dbf8eab96a0231ea5b92737fd2b0a1ce74" translate="yes" xml:space="preserve">
          <source>Maps are allowed in guards as long as all subexpressions are valid guard expressions.</source>
          <target state="translated">すべてのサブ式が有効なガード式である限り、マップはガード内で使用できます。</target>
        </trans-unit>
        <trans-unit id="363ad38891c14a93a51e759557264fd84b9d27cc" translate="yes" xml:space="preserve">
          <source>Maps are considered to be experimental during Erlang/OTP R17.</source>
          <target state="translated">Erlang/OTP R17ではマップは実験的なものと考えられています。</target>
        </trans-unit>
        <trans-unit id="d13027fd4ebe765466d95071c641f5db67b026f6" translate="yes" xml:space="preserve">
          <source>Maps are ordered by size, two maps with the same size are compared by keys in ascending term order and then by values in key order. In maps key order integers types are considered less than floats types.</source>
          <target state="translated">マップはサイズ順に並べられ、同じサイズの2つのマップは、項の昇順でキーによって比較され、その後、キー順で値によって比較されます。マップのキーオーダーでは、整数型は浮動小数点型よりも小さいとみなされます。</target>
        </trans-unit>
        <trans-unit id="d3761b3f052ddea8579fdb64072c5ede6d3ff627" translate="yes" xml:space="preserve">
          <source>Maps function F(K, V1) -&amp;gt; V2 to all key-value pairs of tree &lt;code&gt;Tree1&lt;/code&gt;. Returns a new tree &lt;code&gt;Tree2&lt;/code&gt; with the same set of keys as &lt;code&gt;Tree1&lt;/code&gt; and the new set of values &lt;code&gt;V2&lt;/code&gt;.</source>
          <target state="translated">関数F（K、V1）-&amp;gt; V2をツリー &lt;code&gt;Tree1&lt;/code&gt; のすべてのキーと値のペアにマップします。新しいツリーを返し &lt;code&gt;Tree2&lt;/code&gt; などのキーの同じセットで &lt;code&gt;Tree1&lt;/code&gt; と値の新しいセット &lt;code&gt;V2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="04a0ed588e558dfeb24dbb776767b9768927953d" translate="yes" xml:space="preserve">
          <source>Maps in Guards</source>
          <target state="translated">衛兵の地図</target>
        </trans-unit>
        <trans-unit id="63d572d3b65816384952bcc7c3b9b3b9faea1088" translate="yes" xml:space="preserve">
          <source>Maps in Patterns</source>
          <target state="translated">パターンのマップ</target>
        </trans-unit>
        <trans-unit id="729cd71fbff021f36308a64f8ae94d9a49e5da1b" translate="yes" xml:space="preserve">
          <source>Maps processing</source>
          <target state="translated">マップ処理</target>
        </trans-unit>
        <trans-unit id="7ea86ddec10f80bb2c7782afe4921fda0718970f" translate="yes" xml:space="preserve">
          <source>Maps processing functions.</source>
          <target state="translated">マップ処理機能。</target>
        </trans-unit>
        <trans-unit id="6501b098152b10c2d1fd7868786d299194e00b4a" translate="yes" xml:space="preserve">
          <source>Maps the specified function onto each array element, skipping default-valued entries. The elements are visited in order from the lowest index to the highest. If &lt;code&gt;Function&lt;/code&gt; is not a function, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">デフォルト値のエントリをスキップして、指定された関数を各配列要素にマップします。要素は、最低のインデックスから最高のインデックスの順に訪問されます。 &lt;code&gt;Function&lt;/code&gt; が関数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="7d1791268d9973c2080f7cdeef13debd8dce8751" translate="yes" xml:space="preserve">
          <source>Maps the specified function onto each array element. The elements are visited in order from the lowest index to the highest. If &lt;code&gt;Function&lt;/code&gt; is not a function, the call fails with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">指定された関数を各配列要素にマップします。要素は、最低のインデックスから最高のインデックスの順に訪問されます。 &lt;code&gt;Function&lt;/code&gt; が関数でない場合、呼び出しは理由 &lt;code&gt;badarg&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="31e9697d43a1a66f2e45db652019fb9a6216df22" translate="yes" xml:space="preserve">
          <source>Mark</source>
          <target state="translated">Mark</target>
        </trans-unit>
        <trans-unit id="10a075120eb484727a09f2f3701ac80c559eec39" translate="yes" xml:space="preserve">
          <source>Mark the directories/modules you want to analyze for discrepancies and click &lt;strong&gt;Add&lt;/strong&gt;. You can either add the &lt;code&gt;.beam&lt;/code&gt; and &lt;code&gt;.erl&lt;/code&gt; files directly, or add directories that contain these kind of files. Notice that you are only allowed to add the type of files that can be analyzed in the current mode of operation (see below), and that you cannot mix &lt;code&gt;.beam&lt;/code&gt; and &lt;code&gt;.erl&lt;/code&gt; files.</source>
          <target state="translated">不一致を分析するディレクトリ/モジュールをマークし、[ &lt;strong&gt;追加&lt;/strong&gt; ] &lt;strong&gt;を&lt;/strong&gt;クリックします。あなたはどちらか追加することができます &lt;code&gt;.beam&lt;/code&gt; と &lt;code&gt;.erl&lt;/code&gt; ファイルを直接、またはこれらのファイルの種類を含むディレクトリを追加します。現在の操作モードで分析できるファイルのタイプ（下記参照）のみを追加でき、 &lt;code&gt;.erl&lt;/code&gt; ファイルと.erlファイルを混在さ &lt;code&gt;.beam&lt;/code&gt; ことはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="197dfa50ea4b8649cb35689f0decbb6c374c77b7" translate="yes" xml:space="preserve">
          <source>Marks &lt;code&gt;Dir&lt;/code&gt; as sticky.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; を付箋としてマークします。</target>
        </trans-unit>
        <trans-unit id="7b5406131a661f19f4b14f972097e09771980111" translate="yes" xml:space="preserve">
          <source>Marks a registry object as dirty. This ensures that it is included in the next backup to &lt;code&gt;Mnesia&lt;/code&gt;. Normally this operation is not necessary, as all of the normal registry 'set' functions do this automatically. However, if you have retrieved the value of a string or binary object from the registry and modified the contents, then the change is invisible to the registry and the object is assumed to be unmodified. This function allows you to make such modifications and then let the registry know about them.</source>
          <target state="translated">レジストリオブジェクトをダーティとしてマークします。これにより、 &lt;code&gt;Mnesia&lt;/code&gt; への次のバックアップに含まれます。通常のレジストリの「設定」機能はすべてこれを自動的に行うため、通常、この操作は必要ありません。ただし、文字列またはバイナリオブジェクトの値をレジストリから取得して内容を変更した場合、変更はレジストリからは見えず、オブジェクトは変更されていないと見なされます。この機能を使用すると、このような変更を行ってから、レジストリにそのことを知らせることができます。</target>
        </trans-unit>
        <trans-unit id="1709de2e6065059c80b7bb75d222b5ba4f0c8c88" translate="yes" xml:space="preserve">
          <source>Marks that driver instances can handle being called in the &lt;code&gt;&lt;a href=&quot;#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; callbacks although a driver instance has marked itself as busy (see &lt;code&gt;&lt;a href=&quot;erl_driver#set_busy_port&quot;&gt; erl_driver:set_busy_port&lt;/a&gt;&lt;/code&gt;). As from ERTS 5.7.4 this flag is required for drivers used by the Erlang distribution (the behavior has always been required by drivers used by the distribution).</source>
          <target state="translated">ドライバーインスタンスがそれ自体をビジーとしてマークしているにもかかわらず、ドライバーインスタンスが &lt;code&gt;&lt;a href=&quot;#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; および/または &lt;code&gt;&lt;a href=&quot;#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; コールバックで呼び出されることを処理できることをマークします（ &lt;code&gt;&lt;a href=&quot;erl_driver#set_busy_port&quot;&gt; erl_driver:set_busy_port&lt;/a&gt;&lt;/code&gt; を参照）。ERTS 5.7.4以降、このフラグはアーラン分布で使用されるドライバーに必要です（この動作は常に分布で使用されるドライバーに必要です）。</target>
        </trans-unit>
        <trans-unit id="bcbfc3c88f06b01ad7c3cccfab1c852094317788" translate="yes" xml:space="preserve">
          <source>Marks that driver instances can handle being called in the &lt;code&gt;&lt;a href=&quot;#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; callbacks although a driver instance has marked itself as busy (see &lt;code&gt;&lt;a href=&quot;erl_driver#set_busy_port&quot;&gt;erl_driver:set_busy_port&lt;/a&gt;&lt;/code&gt;). As from ERTS 5.7.4 this flag is required for drivers used by the Erlang distribution (the behavior has always been required by drivers used by the distribution).</source>
          <target state="translated">ドライバーインスタンスがそれ自体をビジーとしてマークしているが、ドライバーインスタンスが &lt;code&gt;&lt;a href=&quot;#output&quot;&gt;output&lt;/a&gt;&lt;/code&gt; および/または &lt;code&gt;&lt;a href=&quot;#outputv&quot;&gt;outputv&lt;/a&gt;&lt;/code&gt; コールバックで呼び出されることを処理できることをマークします（ &lt;code&gt;&lt;a href=&quot;erl_driver#set_busy_port&quot;&gt;erl_driver:set_busy_port&lt;/a&gt;&lt;/code&gt; を参照）。ERTS 5.7.4以降、このフラグは、Erlangディストリビューションで使用されるドライバーに必要です（この動作は、ディストリビューションで使用されるドライバーでは常に必要でした）。</target>
        </trans-unit>
        <trans-unit id="44a77f06fe20eb0136352abea280e4ae8f164595" translate="yes" xml:space="preserve">
          <source>Marshall T. Rose (1991), &quot;The Simple Book - An Introduction to Internet Management&quot;, Prentice-Hall</source>
          <target state="translated">マーシャル・T・ローズ(1991)、「シンプル・ブック-インターネット管理入門」、プレンティスホール</target>
        </trans-unit>
        <trans-unit id="eb16e2eaaa41a17fa7c2ea2240cca72be26d1651" translate="yes" xml:space="preserve">
          <source>Match Context</source>
          <target state="translated">マッチコンテキスト</target>
        </trans-unit>
        <trans-unit id="e292a510978ff43c30aad8eecbcdd9404449eef9" translate="yes" xml:space="preserve">
          <source>Match Operator = in Patterns</source>
          <target state="translated">一致演算子=パターン内</target>
        </trans-unit>
        <trans-unit id="ff171d7e2ec66d8d77776b728f30299bf8e3e6c9" translate="yes" xml:space="preserve">
          <source>Match a pattern against a syntax tree (or patterns against syntax trees) returning an environment mapping variable names to subtrees; the environment is always sorted on keys. Note that multiple occurrences of metavariables in the pattern is not allowed, but is not checked.</source>
          <target state="translated">構文ツリー (または構文ツリーに対するパターン)に対してパターンをマッチさせ、変数名をサブツリーにマッピングする環境を返します。パターン内にメタ変数が複数出現することは許可されていませんが、チェックはされていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d2de4afa174487d24d4a58ea206ea53aeb3c9f62" translate="yes" xml:space="preserve">
          <source>Match against one or more clauses with patterns and optional guards.</source>
          <target state="translated">パターンと任意のガードを持つ1つ以上の節にマッチします。</target>
        </trans-unit>
        <trans-unit id="509635766fe25fda0e8fcb1e73a1a4900a524a90" translate="yes" xml:space="preserve">
          <source>Match all objects in an ETS table with arity &amp;gt; 1 and the first element is 'gandalf', and return element 2:</source>
          <target state="translated">アリティが1より大きいETSテーブルのすべてのオブジェクトに一致し、最初の要素は「gandalf」であり、要素2を返します。</target>
        </trans-unit>
        <trans-unit id="5cb24c4903ed09ea4659ce737242ec2cae99a47b" translate="yes" xml:space="preserve">
          <source>Match all objects in an ETS table, where the first element is the atom &lt;code&gt;'strider'&lt;/code&gt; and the tuple arity is 3, and return the whole object:</source>
          <target state="translated">最初の要素がアトム &lt;code&gt;'strider'&lt;/code&gt; あり、タプルアリティが3 であるETSテーブル内のすべてのオブジェクトに一致し、オブジェクト全体を返します。</target>
        </trans-unit>
        <trans-unit id="7edee42de18d23f1dd88981c1e38214f04375e1b" translate="yes" xml:space="preserve">
          <source>Match an argument list of three, where the first and third arguments are equal:</source>
          <target state="translated">第1引数と第3引数が等しい3つの引数リストにマッチします。</target>
        </trans-unit>
        <trans-unit id="007b6fe417206569cf211bcff5829b2fb375ff62" translate="yes" xml:space="preserve">
          <source>Match an argument list of three, where the second argument is a number &amp;gt; 3:</source>
          <target state="translated">3つの引数リストに一致します。2番目の引数は数値&amp;gt; 3です。</target>
        </trans-unit>
        <trans-unit id="aaa654601a0768fd3a5ea8e1f4e632cb6ef820a5" translate="yes" xml:space="preserve">
          <source>Match an argument list of three, where the third argument is either a tuple containing argument one and two, &lt;strong&gt;or&lt;/strong&gt; a list beginning with argument one and two (that is, &lt;code&gt;[a,b,[a,b,c]]&lt;/code&gt; or &lt;code&gt;[a,b,{a,b}]&lt;/code&gt;):</source>
          <target state="translated">3つの引数リストに一致します。3番目の引数は、引数1と2を含むタプル、&lt;strong&gt;または&lt;/strong&gt;引数1と2で始まるリスト（つまり、 &lt;code&gt;[a,b,[a,b,c]]&lt;/code&gt; または &lt;code&gt;[a,b,{a,b}]&lt;/code&gt; ）：</target>
        </trans-unit>
        <trans-unit id="92514756645fe7077028fc14821601f7e85836da" translate="yes" xml:space="preserve">
          <source>Match any character except newline (by default)</source>
          <target state="translated">改行以外の任意の文字にマッチします(デフォルト)</target>
        </trans-unit>
        <trans-unit id="62e56bea29683834bf7ec08fb1eb30aa1828744a" translate="yes" xml:space="preserve">
          <source>Match some dictionary entries</source>
          <target state="translated">いくつかの辞書項目と一致する</target>
        </trans-unit>
        <trans-unit id="311fb719c2d9cb64132a0b11b661fb396a3a0223" translate="yes" xml:space="preserve">
          <source>Match specification, see section &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; in the ERTS User's Guide and &lt;code&gt;&lt;a href=&quot;ms_transform&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">一致仕様。「ERTSユーザーガイド」の「 &lt;code&gt;Match Specifications in Erlang&lt;/code&gt; 」セクションと &lt;code&gt;&lt;a href=&quot;ms_transform&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="c08d65581b61fabe23402aa00e8ab9a94f3ae9ef" translate="yes" xml:space="preserve">
          <source>Match specifications are used more or less as filters. They resemble usual Erlang matching in a list comprehension or in a fun used with &lt;code&gt;&lt;a href=&quot;lists#foldl-3&quot;&gt;lists:foldl/3&lt;/a&gt;&lt;/code&gt;, and so on. However, the syntax of pure match specifications is awkward, as they are made up purely by Erlang terms, and the language has no syntax to make the match specifications more readable.</source>
          <target state="translated">一致仕様は、多かれ少なかれフィルターとして使用されます。それらは、リスト内包や、 &lt;code&gt;&lt;a href=&quot;lists#foldl-3&quot;&gt;lists:foldl/3&lt;/a&gt;&lt;/code&gt; などで使用される楽しい点での通常のErlangマッチングに似ています。ただし、純粋な一致仕様の構文は、Erlangの用語によって純粋に構成されており、言語には一致仕様を読みやすくする構文がないため、扱いにくいものです。</target>
        </trans-unit>
        <trans-unit id="28103d4192f64923a9e433e5c840bc4e8b567bda" translate="yes" xml:space="preserve">
          <source>Match specifications used can be saved in a file (if a read-write file system is present) for use in later debugging sessions, see &lt;code&gt;&lt;a href=&quot;#wtp-1&quot;&gt;wtp/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#rtp-1&quot;&gt;rtp/1&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">使用される一致仕様は、後のデバッグセッションで使用するためにファイルに保存できます（読み取り/書き込みファイルシステムが存在する場合） &lt;code&gt;&lt;a href=&quot;#wtp-1&quot;&gt;wtp/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#rtp-1&quot;&gt;rtp/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8b4396a07794713ae25d8191b311ff7059dec215" translate="yes" xml:space="preserve">
          <source>Match specifications, see section &lt;code&gt; Match Specification in Erlang&lt;/code&gt; in ERTS User's Guide and the &lt;code&gt;&lt;a href=&quot;ms_transform&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">一致仕様。ERTSユーザーズガイドの &lt;code&gt; Match Specification in Erlang&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;ms_transform&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="1229fff8a073694fbfc1092526ee8748365e4bdf" translate="yes" xml:space="preserve">
          <source>Match specifications, see section &lt;code&gt;Match Specification in Erlang&lt;/code&gt; in ERTS User's Guide and the &lt;code&gt;&lt;a href=&quot;ms_transform&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt; module.</source>
          <target state="translated">一致仕様については、「ERTSユーザーガイド」の「 &lt;code&gt;Match Specification in Erlang&lt;/code&gt; 」セクションと &lt;code&gt;&lt;a href=&quot;ms_transform&quot;&gt;ms_transform(3)&lt;/a&gt;&lt;/code&gt; モジュールを参照してください。</target>
        </trans-unit>
        <trans-unit id="c45c41f60cedeecdd4b1c366db7e307e66a6a606" translate="yes" xml:space="preserve">
          <source>Match target</source>
          <target state="translated">マッチターゲット</target>
        </trans-unit>
        <trans-unit id="58de7407dcefed17ecbb0f0f0caecc0925acc26e" translate="yes" xml:space="preserve">
          <source>Match the &lt;code&gt;MatchHead&lt;/code&gt; part against the match target term, binding the &lt;code&gt;'$&amp;lt;number&amp;gt;'&lt;/code&gt; variables (much like in &lt;code&gt;ets:match/2&lt;/code&gt;). If the &lt;code&gt;MatchHead&lt;/code&gt; part cannot match the arguments, the match fails.</source>
          <target state="translated">一致 &lt;code&gt;MatchHead&lt;/code&gt; の結合、マッチ対象の用語に対して一部を &lt;code&gt;'$&amp;lt;number&amp;gt;'&lt;/code&gt; （多くの中のような変数 &lt;code&gt;ets:match/2&lt;/code&gt; ）。場合 &lt;code&gt;MatchHead&lt;/code&gt; の一部は、引数と一致しないことができ、マッチは失敗します。</target>
        </trans-unit>
        <trans-unit id="d0bb026735ab1b1a560327096ea49590520df5c7" translate="yes" xml:space="preserve">
          <source>Match three arguments. When all three are equal and are numbers, append the process dump to the trace message, otherwise let the trace message be &quot;as is&quot;, but set the sequential trace token label to 4711:</source>
          <target state="translated">3 つの引数をマッチさせます。3つがすべて等しく、かつ数値である場合、プロセスダンプをトレースメッセージに追加します。そうでない場合は、トレースメッセージを「そのまま」にして、シーケンシャルトレーストークンラベルを4711に設定します。</target>
        </trans-unit>
        <trans-unit id="50d2b574a0b4bf14c816284735e4a32f6738492f" translate="yes" xml:space="preserve">
          <source>Match tuples of three elements, where the second element is either &lt;code&gt;'merry'&lt;/code&gt; or &lt;code&gt;'pippin'&lt;/code&gt;, and return the whole objects:</source>
          <target state="translated">2番目の要素が &lt;code&gt;'merry'&lt;/code&gt; または &lt;code&gt;'pippin'&lt;/code&gt; の3つの要素のタプルと一致し、オブジェクト全体を返します。</target>
        </trans-unit>
        <trans-unit id="b52bb892dfc03f66052c156357fd98f06f6d6ad0" translate="yes" xml:space="preserve">
          <source>Match two arguments, where the first is a tuple beginning with a list that in turn begins with the second argument times two (that is, &lt;code&gt;[{[4,x],y},2]&lt;/code&gt; or &lt;code&gt;[{[8], y, z},4])&lt;/code&gt;:</source>
          <target state="translated">2つの引数に一致します。最初の引数は、2番目の引数の2倍で始まるリストで始まるタプルです（つまり、 &lt;code&gt;[{[4,x],y},2]&lt;/code&gt; または &lt;code&gt;[{[8], y, z},4])&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="da3931950dd632f760d810b04a1dfee915ca645d" translate="yes" xml:space="preserve">
          <source>MatchBody ::= [ ActionTerm ]</source>
          <target state="translated">MatchBody ::=[ActionTerm]です。</target>
        </trans-unit>
        <trans-unit id="49eed79dc355081fc78c915df6e6741691fad326" translate="yes" xml:space="preserve">
          <source>MatchBody ::= [ ConditionExpression, ... ]</source>
          <target state="translated">MatchBody ::=[ConditionExpression,...]</target>
        </trans-unit>
        <trans-unit id="e7543ce8b4424850514899929477fd3fd4bc7586" translate="yes" xml:space="preserve">
          <source>MatchCondition ::= { GuardFunction } | { GuardFunction, ConditionExpression, ... }</source>
          <target state="translated">MatchCondition ::={GuardFunction}| 衛戍関数、条件式、...}</target>
        </trans-unit>
        <trans-unit id="7a1238f4170ab727b947ac14efc193f8277c9e1a" translate="yes" xml:space="preserve">
          <source>MatchConditions ::= [ MatchCondition, ...] | &lt;code&gt;[]&lt;/code&gt;</source>
          <target state="translated">MatchConditions :: = [MatchCondition、...] | &lt;code&gt;[]&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="95bf5fe6015be79d0f9353ed2e6ebd9f6f5c1aaf" translate="yes" xml:space="preserve">
          <source>MatchExpression ::= [ MatchFunction, ... ]</source>
          <target state="translated">MatchExpression ::=[MatchFunction,...]</target>
        </trans-unit>
        <trans-unit id="4362346f5ab9c3e849d7a732cb6f7149b013ecea" translate="yes" xml:space="preserve">
          <source>MatchFunction ::= { MatchHead, MatchConditions, MatchBody }</source>
          <target state="translated">MatchFunction ::={MatchHead,MatchConditions,MatchBody }。</target>
        </trans-unit>
        <trans-unit id="62fe68ac64e3f31f3bc26fda2674c9914f299bee" translate="yes" xml:space="preserve">
          <source>MatchHead ::= MatchVariable | &lt;code&gt;'_'&lt;/code&gt; | [ MatchHeadPart, ... ]</source>
          <target state="translated">MatchHead :: = MatchVariable | &lt;code&gt;'_'&lt;/code&gt; | [MatchHeadPart、...]</target>
        </trans-unit>
        <trans-unit id="8d11a2590b00416cc7fd21aa567f9dc7dcd1e80a" translate="yes" xml:space="preserve">
          <source>MatchHead ::= MatchVariable | &lt;code&gt;'_'&lt;/code&gt; | { MatchHeadPart, ... }</source>
          <target state="translated">MatchHead :: = MatchVariable | &lt;code&gt;'_'&lt;/code&gt; | {MatchHeadPart、...}</target>
        </trans-unit>
        <trans-unit id="4c3dc5459e996623b4e979c498a0b4c1d7e9b686" translate="yes" xml:space="preserve">
          <source>MatchHeadPart ::= term() | MatchVariable | &lt;code&gt;'_'&lt;/code&gt;</source>
          <target state="translated">MatchHeadPart :: = term（）| MatchVariable | &lt;code&gt;'_'&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b5c57568dca7b0bd330575231a9b4b598aa5de7d" translate="yes" xml:space="preserve">
          <source>MatchVariable ::= '$&amp;lt;number&amp;gt;'</source>
          <target state="translated">MatchVariable :: = '$ &amp;lt;number&amp;gt;'</target>
        </trans-unit>
        <trans-unit id="e03f215314c88dd829465d19bf121cc264d405e1" translate="yes" xml:space="preserve">
          <source>Matches a pattern against an expression. The returned value is &lt;code&gt;none&lt;/code&gt; if a match is impossible, &lt;code&gt;{true, Bindings}&lt;/code&gt; if &lt;code&gt;Pattern&lt;/code&gt; definitely matches &lt;code&gt;Expr&lt;/code&gt;, and &lt;code&gt;{false, Bindings}&lt;/code&gt; if a match is not definite, but cannot be excluded. &lt;code&gt;Bindings&lt;/code&gt; is then a list of pairs &lt;code&gt;{Var, SubExpr}&lt;/code&gt;, associating each variable in the pattern with either the corresponding subexpression of &lt;code&gt;Expr&lt;/code&gt;, or with the atom &lt;code&gt;any&lt;/code&gt; if no matching subexpression exists. (Recall that variables may not be repeated in a Core Erlang pattern.) The list of bindings is given in innermost-first order; this should only be of interest if &lt;code&gt;Pattern&lt;/code&gt; contains one or more alias patterns. If the returned value is &lt;code&gt;{true, []}&lt;/code&gt;, it implies that the pattern and the expression are syntactically identical.</source>
          <target state="translated">パターンを式と照合します。戻り値は、一致が不可能な場合は &lt;code&gt;none&lt;/code&gt; 、 &lt;code&gt;Pattern&lt;/code&gt; が &lt;code&gt;Expr&lt;/code&gt; と完全に一致する場合は &lt;code&gt;{true, Bindings}&lt;/code&gt; 、一致が明確ではないが除外できない場合は &lt;code&gt;{false, Bindings}&lt;/code&gt; です。 &lt;code&gt;Bindings&lt;/code&gt; 次にペアのリストである &lt;code&gt;{Var, SubExpr}&lt;/code&gt; の対応する部分式のいずれかのパターンの各変数を関連付ける、 &lt;code&gt;Expr&lt;/code&gt; に、または原子で &lt;code&gt;any&lt;/code&gt; 一致する部分式が存在しない場合。 （変数はCore Erlangパターンで繰り返されない可能性があることを思い出してください。）バインディングのリストは最も内側から1番目の順序で示されます。これは、 &lt;code&gt;Pattern&lt;/code&gt; 場合にのみ重要です。1つ以上のエイリアスパターンが含まれています。戻り値が &lt;code&gt;{true, []}&lt;/code&gt; 場合、パターンと式が構文的に同一であることを意味します。</target>
        </trans-unit>
        <trans-unit id="0086ec33bc64b94a17c1488954c54ae1f0850ff5" translate="yes" xml:space="preserve">
          <source>Matches any character.</source>
          <target state="translated">任意の文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="b0bce32c5a3c3fc3ed0e703a29ce005a9a59c17b" translate="yes" xml:space="preserve">
          <source>Matches any number of characters up to the end of the filename, the next dot, or the next slash.</source>
          <target state="translated">ファイル名の末尾、次のドット、または次のスラッシュまでの任意の文字数にマッチします。</target>
        </trans-unit>
        <trans-unit id="f115e2cfefeef7ee50e81931c874414b0559f037" translate="yes" xml:space="preserve">
          <source>Matches any of the characters listed. Two characters separated by a hyphen match a range of characters. Example: &lt;code&gt;[A-Z]&lt;/code&gt; matches any uppercase letter.</source>
          <target state="translated">リストされた文字のいずれかに一致します。ハイフンで区切られた2つの文字は、ある範囲の文字と一致します。例： &lt;code&gt;[A-Z]&lt;/code&gt; すべての大文字に一致します。</target>
        </trans-unit>
        <trans-unit id="50795a0a08132b80e78d1e76523a0677ba80c9ba" translate="yes" xml:space="preserve">
          <source>Matches any peer. This is a convenience that provides a filter equivalent to no filter.</source>
          <target state="translated">任意のピアにマッチします。これは、フィルタなしと同等のフィルタを提供する便利な機能です。</target>
        </trans-unit>
        <trans-unit id="45303a6504cacc79e7d23b3bbb52fa9c500e5dd8" translate="yes" xml:space="preserve">
          <source>Matches at a word boundary.</source>
          <target state="translated">単語の境界で一致します。</target>
        </trans-unit>
        <trans-unit id="7ac95a7b57dc892c5cbccecec503375cd8b75457" translate="yes" xml:space="preserve">
          <source>Matches at the end of the subject, and before a newline at the end of the subject.</source>
          <target state="translated">被写体の最後に、被写体の最後に改行が入る前にマッチします。</target>
        </trans-unit>
        <trans-unit id="dfe97d17ef60dfa95587204790b8e7a03401165c" translate="yes" xml:space="preserve">
          <source>Matches at the first matching position in the subject.</source>
          <target state="translated">被写体の最初の一致位置で一致します。</target>
        </trans-unit>
        <trans-unit id="30957d7eb006582b971d8e18207879a7a2e62a2f" translate="yes" xml:space="preserve">
          <source>Matches at the start of the subject.</source>
          <target state="translated">科目の開始時にマッチします。</target>
        </trans-unit>
        <trans-unit id="c20e2cfc85fd5962f00bfd1aab37748d15201d74" translate="yes" xml:space="preserve">
          <source>Matches one character.</source>
          <target state="translated">1文字にマッチします。</target>
        </trans-unit>
        <trans-unit id="bf384d7f3f9dc4a8d07f9032759bd099ac99af1e" translate="yes" xml:space="preserve">
          <source>Matches one or more &lt;code&gt;rs&lt;/code&gt;.</source>
          <target state="translated">1つ以上の &lt;code&gt;rs&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="95b0a058c78027f9b36554648c7e31c06df213b3" translate="yes" xml:space="preserve">
          <source>Matches only at the end of the subject.</source>
          <target state="translated">科目の最後にのみマッチします。</target>
        </trans-unit>
        <trans-unit id="bce02edb2750c6f7e1edccc714e57113b0b26a46" translate="yes" xml:space="preserve">
          <source>Matches only those peers for which the specified &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt; when applied to the connection's &lt;code&gt;diameter_caps&lt;/code&gt; record. Any other return value or exception is equivalent to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">接続の &lt;code&gt;diameter_caps&lt;/code&gt; レコードに適用されたときに、指定された &lt;code&gt;&lt;code&gt;&lt;a href=&quot;#eval&quot;&gt;eval()&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; を返すピアのみに一致します。その他の戻り値または例外は &lt;code&gt;false&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="c84c071e773e0343110738922ba722b0e2af3f2c" translate="yes" xml:space="preserve">
          <source>Matches only those peers matched by at least one filter in the specified list. The resulting list will be in match order, peers matching the first filter of the list sorting before those matched by the second, and so on.</source>
          <target state="translated">指定したリスト内の少なくともひとつのフィルタにマッチした相手のみにマッチします。結果として得られるリストは、マッチした順に並べ替えられ、リストの最初のフィルタにマッチした相手は 2 番目のフィルタにマッチした相手よりも前に並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="2f2592920b5282895068215ce350574baf645c52" translate="yes" xml:space="preserve">
          <source>Matches only those peers matched by each filter in the specified list.</source>
          <target state="translated">指定されたリストの各フィルタにマッチしたピアのみにマッチします。</target>
        </trans-unit>
        <trans-unit id="589f2d5ff54077f4e7ded5e562f61c1d207b2d40" translate="yes" xml:space="preserve">
          <source>Matches only those peers not matched by the specified filter.</source>
          <target state="translated">指定したフィルタにマッチしないピアのみにマッチします。</target>
        </trans-unit>
        <trans-unit id="a63639f69671438d06e3a88ceb05c2fd6d45b827" translate="yes" xml:space="preserve">
          <source>Matches only those peers whose Origin-Host has the same value as Destination-Host in the outgoing request in question, or any peer if the request does not contain a Destination-Host AVP.</source>
          <target state="translated">Origin-Hostが問題の送信リクエストのDestination-Hostと同じ値を持つピアのみ、またはリクエストにDestination-Host AVPが含まれていない場合は任意のピアにマッチします。</target>
        </trans-unit>
        <trans-unit id="7246e14a8a2a6df71afafbd3a74a8b44cdfbd531" translate="yes" xml:space="preserve">
          <source>Matches only those peers whose Origin-Host has the specified value, or all peers if the atom &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">Origin-Hostに指定された値があるピアのみ、またはアトム &lt;code&gt;any&lt;/code&gt; の場合はすべてのピアに一致します。</target>
        </trans-unit>
        <trans-unit id="95597417bac7dc49af239c255741702c0c22bdaf" translate="yes" xml:space="preserve">
          <source>Matches only those peers whose Origin-Realm has the same value as Destination-Realm in the outgoing request in question, or any peer if the request does not contain a Destination-Realm AVP.</source>
          <target state="translated">Origin-Realmが問題の送信リクエストのDestination-Realmと同じ値を持つピアのみ、またはリクエストにDestination-Realm AVPが含まれていない場合はどのピアにもマッチします。</target>
        </trans-unit>
        <trans-unit id="4616ccf0ec60315c7670131e4744903a3aa36484" translate="yes" xml:space="preserve">
          <source>Matches only those peers whose Origin-Realm has the specified value, or all peers if the atom &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">Origin-Realmに指定された値があるピアのみ、またはアトム &lt;code&gt;any&lt;/code&gt; の場合はすべてのピアに一致します。</target>
        </trans-unit>
        <trans-unit id="8a4e16b1f64f5c039f506ff58b839fd8686c547b" translate="yes" xml:space="preserve">
          <source>Matches some objects stored in a table and returns a non-empty list of the bindings matching a specified pattern in some unspecified order. The table, the pattern, and the number of objects that are matched are all defined by &lt;code&gt;Continuation&lt;/code&gt;, which has been returned by a previous call to &lt;code&gt;match/1&lt;/code&gt; or &lt;code&gt;match/3&lt;/code&gt;.</source>
          <target state="translated">テーブルに格納されているいくつかのオブジェクトを照合し、指定されたパターンと一致するバインディングの空でないリストを不特定の順序で返します。テーブル、パターン、および一致するオブジェクトの数はすべて、 &lt;code&gt;Continuation&lt;/code&gt; によって定義されます。これは、前回の &lt;code&gt;match/1&lt;/code&gt; または &lt;code&gt;match/3&lt;/code&gt; の呼び出しによって返されたものです。</target>
        </trans-unit>
        <trans-unit id="fd0109e8c46b7b74ad55d61eaa83a0d60c1cd8f8" translate="yes" xml:space="preserve">
          <source>Matches some or all objects of table &lt;code&gt;Name&lt;/code&gt; and returns a non-empty list of the bindings that match &lt;code&gt;Pattern&lt;/code&gt; in some unspecified order. For a description of patterns, see &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Name&lt;/code&gt; の一部またはすべてのオブジェクトに一致し、不特定の順序で &lt;code&gt;Pattern&lt;/code&gt; に一致するバインディングの空でないリストを返します。パターンの説明については、 &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7450adfcb4b169def8a4607352e723d68bd86b34" translate="yes" xml:space="preserve">
          <source>Matches some or all objects stored in table &lt;code&gt;Name&lt;/code&gt; and returns a non-empty list of the objects that match &lt;code&gt;Pattern&lt;/code&gt; in some unspecified order. For a description of patterns, see &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Name&lt;/code&gt; に格納されている一部またはすべてのオブジェクトに一致し、不特定の順序で &lt;code&gt;Pattern&lt;/code&gt; に一致するオブジェクトの空でないリストを返します。パターンの説明については、 &lt;code&gt;&lt;a href=&quot;ets#match-2&quot;&gt;ets:match/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="adb3e1824193dafdae7a5fd33b8ea49f66c2c1dd" translate="yes" xml:space="preserve">
          <source>Matches the beginning of a string.</source>
          <target state="translated">文字列の先頭にマッチします。</target>
        </trans-unit>
        <trans-unit id="4c548c831bb16f2a3bc17e5430fb0fb7ff876eb6" translate="yes" xml:space="preserve">
          <source>Matches the end of a string.</source>
          <target state="translated">文字列の末尾にマッチします。</target>
        </trans-unit>
        <trans-unit id="2cdef85f0928e6e8b1028572e8dc40e0e560c24e" translate="yes" xml:space="preserve">
          <source>Matches the escape sequence or literal character c.</source>
          <target state="translated">エスケープシーケンスまたはリテラル文字 c にマッチします。</target>
        </trans-unit>
        <trans-unit id="0435b1eedb79970f4013fe9211b9ebe7da670511" translate="yes" xml:space="preserve">
          <source>Matches the non-metacharacter c.</source>
          <target state="translated">メタキャラクタではないcにマッチします。</target>
        </trans-unit>
        <trans-unit id="e28e6ed212ebaee585530d5991166a71f8b48a86" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; against pattern &lt;code&gt;Pattern&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトをパターン &lt;code&gt;Pattern&lt;/code&gt; と照合します。</target>
        </trans-unit>
        <trans-unit id="1d29aca058cbf8d1d0f58db77974d455fcaada07" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; against pattern &lt;code&gt;Pattern&lt;/code&gt;. For a description of patterns, see &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt;. The function returns a list of all objects that match the pattern.</source>
          <target state="translated">テーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトをパターン &lt;code&gt;Pattern&lt;/code&gt; と照合します。パターンの説明については、 &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt; を参照してください。この関数は、パターンに一致するすべてのオブジェクトのリストを返します。</target>
        </trans-unit>
        <trans-unit id="db735a0007cc043e4574b21e24e3a6e8e46b90e2" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. If the match specification returns &lt;code&gt;true&lt;/code&gt; for an object, that object considered a match and is counted. For any other result from the match specification the object is not considered a match and is therefore not counted.</source>
          <target state="translated">一致 &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; を使用して、テーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトを一致させます。一致指定がオブジェクトに対して &lt;code&gt;true&lt;/code&gt; を返す場合、そのオブジェクトは一致と見なされ、カウントされます。一致指定からの他の結果については、オブジェクトは一致と見なされないため、カウントされません。</target>
        </trans-unit>
        <trans-unit id="455a15388f0d3001f88cee281c911981a69199e3" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. If the match specification returns &lt;code&gt;true&lt;/code&gt; for an object, that object is removed from the table. For any other result from the match specification the object is retained. This is a more general call than the &lt;code&gt;&lt;a href=&quot;#match_delete-2&quot;&gt; match_delete/2&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">一致 &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; を使用して、テーブル &lt;code&gt;Tab&lt;/code&gt; 内のオブジェクトを一致させます。一致仕様がオブジェクトに対して &lt;code&gt;true&lt;/code&gt; を返す場合、そのオブジェクトはテーブルから削除されます。一致仕様からの他の結果については、オブジェクトが保持されます。これは、 &lt;code&gt;&lt;a href=&quot;#match_delete-2&quot;&gt; match_delete/2&lt;/a&gt;&lt;/code&gt; 呼び出しよりも一般的な呼び出しです。</target>
        </trans-unit>
        <trans-unit id="6b012b167808e61a37f3f13edeb00bcf37acbcee" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. If the match specification returns &lt;code&gt;true&lt;/code&gt; for an object, that object is removed from the table. For any other result from the match specification the object is retained. This is a more general call than the &lt;code&gt;&lt;a href=&quot;#match_delete-2&quot;&gt;match_delete/2&lt;/a&gt;&lt;/code&gt; call.</source>
          <target state="translated">一致 &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; を使用して、テーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトを一致させます。一致指定がオブジェクトに対して &lt;code&gt;true&lt;/code&gt; を返す場合、そのオブジェクトはテーブルから削除されます。一致仕様からの他の結果については、オブジェクトが保持されます。これは、 &lt;code&gt;&lt;a href=&quot;#match_delete-2&quot;&gt;match_delete/2&lt;/a&gt;&lt;/code&gt; 呼び出しよりも一般的な呼び出しです。</target>
        </trans-unit>
        <trans-unit id="f314d3d7e1fd748578a641bfbf6311159aed1316" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. This is a more general call than &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#match_object-2&quot;&gt;match_object/2&lt;/a&gt;&lt;/code&gt; calls. In its simplest form, the match specification is as follows:</source>
          <target state="translated">一致 &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; を使用して、テーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトを一致させます。これは、 &lt;code&gt;&lt;a href=&quot;#match-2&quot;&gt;match/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#match_object-2&quot;&gt;match_object/2&lt;/a&gt;&lt;/code&gt; 呼び出しよりも一般的な呼び出しです。最も単純な形式では、一致指定は次のようになります。</target>
        </trans-unit>
        <trans-unit id="8dfac617898b79dd2741468d1513c14a6c53d233" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;match_spec&lt;/code&gt; as described in the &lt;code&gt;ERTS&lt;/code&gt; User's Guide, and returns a chunk of terms and a continuation. The wanted number of returned terms is specified by argument &lt;code&gt;NObjects&lt;/code&gt;. The lock argument can be &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt;. The continuation is to be used as argument to &lt;code&gt;mnesia:select/1&lt;/code&gt;, if more or all answers are needed.</source>
          <target state="translated">&lt;code&gt;ERTS&lt;/code&gt; ユーザーガイドで説明されているように、match_specを使用してテーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトを &lt;code&gt;match_spec&lt;/code&gt; し、用語のチャンクと継続を返します。返される用語の必要な数は、引数 &lt;code&gt;NObjects&lt;/code&gt; で指定されます。ロック引数は &lt;code&gt;read&lt;/code&gt; または &lt;code&gt;write&lt;/code&gt; が可能です。より多くまたはすべての答えが必要な場合、継続は &lt;code&gt;mnesia:select/1&lt;/code&gt; への引数として使用されます。</target>
        </trans-unit>
        <trans-unit id="e64640be20ca493c8fc40edf41b5b9186f3b2197" translate="yes" xml:space="preserve">
          <source>Matches the objects in table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;match_spec&lt;/code&gt; as described in the &lt;code&gt;ets:select/3&lt;/code&gt;. Optionally a lock &lt;code&gt;read&lt;/code&gt; or &lt;code&gt;write&lt;/code&gt; can be given as the third argument. Default is &lt;code&gt;read&lt;/code&gt;. The return value depends on &lt;code&gt;MatchSpec&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;ets:select/3&lt;/code&gt; で説明されているように、 &lt;code&gt;match_spec&lt;/code&gt; を使用してテーブル &lt;code&gt;Tab&lt;/code&gt; のオブジェクトを照合します。オプションで、3番目の引数としてロックの &lt;code&gt;read&lt;/code&gt; または &lt;code&gt;write&lt;/code&gt; を指定できます。デフォルトは &lt;code&gt;read&lt;/code&gt; です。戻り値は &lt;code&gt;MatchSpec&lt;/code&gt; によって異なります。</target>
        </trans-unit>
        <trans-unit id="a1f9639126fbeb35a28a58c64b5cdf217294a65f" translate="yes" xml:space="preserve">
          <source>Matches the objects in the table &lt;code&gt;Tab&lt;/code&gt; using a &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt;. For each matched object, the existing object is replaced with the match specification result.</source>
          <target state="translated">一致 &lt;code&gt;&lt;a href=&quot;#match_spec&quot;&gt;match specification&lt;/a&gt;&lt;/code&gt; を使用して、テーブル &lt;code&gt;Tab&lt;/code&gt; 内のオブジェクトを一致させます。一致したオブジェクトごとに、既存のオブジェクトが一致仕様の結果に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="473b51b88af255ce39d9fa5d375d31e69528b449" translate="yes" xml:space="preserve">
          <source>Matches when not at a word boundary.</source>
          <target state="translated">単語の境界にない場合にマッチします。</target>
        </trans-unit>
        <trans-unit id="ff59d4c3d244f3cad2fc9a4df684903b72e3fa73" translate="yes" xml:space="preserve">
          <source>Matches zero or more &lt;code&gt;rs&lt;/code&gt;.</source>
          <target state="translated">0個以上の &lt;code&gt;rs&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="bf4e77ebb7ccf37afab91a38875933929de61e50" translate="yes" xml:space="preserve">
          <source>Matches zero or one &lt;code&gt;rs&lt;/code&gt;.</source>
          <target state="translated">ゼロまたは1つの &lt;code&gt;rs&lt;/code&gt; に一致します。</target>
        </trans-unit>
        <trans-unit id="5bcae9e03d2abf08b09e53c355319ed13551bd27" translate="yes" xml:space="preserve">
          <source>Matching &lt;code&gt;{foo, X = {bar, Y}}&lt;/code&gt; against expression &quot;&lt;code&gt;{foo, {bar, baz}}&lt;/code&gt;&quot; yields &lt;code&gt;{true, Bindings}&lt;/code&gt; where &lt;code&gt;Bindings&lt;/code&gt; associates &quot;&lt;code&gt;Y&lt;/code&gt;&quot; with &quot;&lt;code&gt;baz&lt;/code&gt;&quot;, and &quot;&lt;code&gt;X&lt;/code&gt;&quot; with &quot;&lt;code&gt;{bar, baz}&lt;/code&gt;&quot;.</source>
          <target state="translated">&lt;code&gt;{foo, X = {bar, Y}}&lt;/code&gt; を式 &quot; &lt;code&gt;{foo, {bar, baz}}&lt;/code&gt; &quot;と照合すると、 &lt;code&gt;{true, Bindings}&lt;/code&gt; が生成されます &lt;code&gt;Bindings&lt;/code&gt; &quot; &lt;code&gt;Y&lt;/code&gt; &quot;を &quot; &lt;code&gt;baz&lt;/code&gt; &quot;に関連付け、 &quot; &lt;code&gt;X&lt;/code&gt; &quot;を &quot; &lt;code&gt;{bar, baz}&lt;/code&gt; &quot;。</target>
        </trans-unit>
        <trans-unit id="b60d1249c4c758556a1d227c9f807ee709be4c34" translate="yes" xml:space="preserve">
          <source>Matching Syntax</source>
          <target state="translated">マッチング構文</target>
        </trans-unit>
        <trans-unit id="71e571ae9130ba825368a44ee875bfb358022107" translate="yes" xml:space="preserve">
          <source>Matching a binary will also cause it to shrink and the next append operation will copy the binary data:</source>
          <target state="translated">バイナリを一致させると、それも縮小され、次の追加操作でバイナリデータがコピーされます。</target>
        </trans-unit>
        <trans-unit id="04c82124a2a309af1e4d0004642386e1fa87f06d" translate="yes" xml:space="preserve">
          <source>Matching a pattern &quot;&lt;code&gt;{X, Y}&lt;/code&gt;&quot; against &lt;code&gt;any&lt;/code&gt; yields &lt;code&gt;{false, Bindings}&lt;/code&gt; where &lt;code&gt;Bindings&lt;/code&gt; associates both &quot;&lt;code&gt;X&lt;/code&gt;&quot; and &quot;&lt;code&gt;Y&lt;/code&gt;&quot; with &lt;code&gt;any&lt;/code&gt;.</source>
          <target state="translated">パターン「 &lt;code&gt;{X, Y}&lt;/code&gt; 」を &lt;code&gt;any&lt;/code&gt; と照合すると、 &lt;code&gt;{false, Bindings}&lt;/code&gt; が生成されます。ここで、 &lt;code&gt;Bindings&lt;/code&gt; は「 &lt;code&gt;X&lt;/code&gt; 」と「 &lt;code&gt;Y&lt;/code&gt; 」の両方を &lt;code&gt;any&lt;/code&gt; 関連付けます。</target>
        </trans-unit>
        <trans-unit id="ad2bcb27e7add44b28aa94618d57a047fab264ce" translate="yes" xml:space="preserve">
          <source>Matching a pattern &quot;&lt;code&gt;{X, Y}&lt;/code&gt;&quot; against the expression &quot;&lt;code&gt;{foo, f(Z)}&lt;/code&gt;&quot; yields &lt;code&gt;{true, Bindings}&lt;/code&gt; where &lt;code&gt;Bindings&lt;/code&gt; associates &quot;&lt;code&gt;X&lt;/code&gt;&quot; with the subtree &quot;&lt;code&gt;foo&lt;/code&gt;&quot; and &quot;&lt;code&gt;Y&lt;/code&gt;&quot; with the subtree &quot;&lt;code&gt;f(Z)&lt;/code&gt;&quot;.</source>
          <target state="translated">パターン「 &lt;code&gt;{X, Y}&lt;/code&gt; 」を式「 &lt;code&gt;{foo, f(Z)}&lt;/code&gt; 」と照合すると、 &lt;code&gt;{true, Bindings}&lt;/code&gt; が生成されます。ここで、 &lt;code&gt;Bindings&lt;/code&gt; は「 &lt;code&gt;X&lt;/code&gt; 」をサブツリー「 &lt;code&gt;foo&lt;/code&gt; 」に関連付け、「 &lt;code&gt;Y&lt;/code&gt; 」をサブツリー「 &lt;code&gt;f(Z)&lt;/code&gt; 」に関連付けます。（Z） &quot;。</target>
        </trans-unit>
        <trans-unit id="36481aa97a951a1dcf7d8486d523f317dc45f5dc" translate="yes" xml:space="preserve">
          <source>Matching an expression against an empty map literal, matches its type but no variables are bound:</source>
          <target state="translated">空のマップリテラルに対して式をマッチングさせると、その型にマッチしますが、変数はバインドされません。</target>
        </trans-unit>
        <trans-unit id="3d117b8c447d4889a004e4beb80ae87b3b9f61b4" translate="yes" xml:space="preserve">
          <source>Matching can be used in combination with records, as shown in the following example:</source>
          <target state="translated">マッチングは、以下の例のように、レコードと組み合わせて使用することができます。</target>
        </trans-unit>
        <trans-unit id="21db0315aaeea4915646c1ba5a3af148311bbc82" translate="yes" xml:space="preserve">
          <source>Matching characters by Unicode property is not fast, as PCRE must do a multistage table lookup to find a character property. That is why the traditional escape sequences such as \d and \w do not use Unicode properties in PCRE by default. However, you can make them do so by setting option &lt;code&gt;ucp&lt;/code&gt; or by starting the pattern with (*UCP).</source>
          <target state="translated">PCREは文字プロパティを見つけるために多段階のテーブル検索を行う必要があるため、Unicodeプロパティによる文字の一致は高速ではありません。そのため、\ dや\ wなどの従来のエスケープシーケンスは、デフォルトでPCREでUnicodeプロパティを使用しません。ただし、オプション &lt;code&gt;ucp&lt;/code&gt; を設定するか、（* UCP）でパターンを開始することで、そうすることができます。</target>
        </trans-unit>
        <trans-unit id="daa0e37dc758ae15a4e0e7ac7d8a0c3a7422c8e2" translate="yes" xml:space="preserve">
          <source>Matching in maps only allows for &lt;code&gt;:=&lt;/code&gt; as delimiters of associations.</source>
          <target state="translated">マップでのマッチングでは、関連付けの区切り文字として &lt;code&gt;:=&lt;/code&gt; のみが許可されます。</target>
        </trans-unit>
        <trans-unit id="e0b3439d7561cb2dee16bc2f99dd957cfc474df0" translate="yes" xml:space="preserve">
          <source>Matching of key-value associations from maps is done as follows:</source>
          <target state="translated">マップからのキーと値の関連付けのマッチングは、以下のようにして行われる。</target>
        </trans-unit>
        <trans-unit id="e9cba95bb8e1514e71368d11f0995ae0398f3886" translate="yes" xml:space="preserve">
          <source>Matching of literals as keys are allowed in function heads:</source>
          <target state="translated">関数ヘッドでは、リテラルをキーとしてマッチングさせることができます。</target>
        </trans-unit>
        <trans-unit id="74c212bf6fa09d18e1ec277db201559eabf9e7c0" translate="yes" xml:space="preserve">
          <source>Matching on the top-level of the fun head can be a more natural way to access &lt;code&gt;'$_'&lt;/code&gt;, see above.</source>
          <target state="translated">funヘッドのトップレベルでマッチングすることは、 &lt;code&gt;'$_'&lt;/code&gt; にアクセスするより自然な方法です（上記を参照）。</target>
        </trans-unit>
        <trans-unit id="049506329261487bb3976b3275edff9e35424978" translate="yes" xml:space="preserve">
          <source>Matching pattern &quot;&lt;code&gt;{X, {bar, Y}}&lt;/code&gt;&quot; against expression &quot;&lt;code&gt;{foo, f(Z)}&lt;/code&gt;&quot; yields &lt;code&gt;{false, Bindings}&lt;/code&gt; where &lt;code&gt;Bindings&lt;/code&gt; associates &quot;&lt;code&gt;X&lt;/code&gt;&quot; with the subtree &quot;&lt;code&gt;foo&lt;/code&gt;&quot; and &quot;&lt;code&gt;Y&lt;/code&gt;&quot; with &lt;code&gt;any&lt;/code&gt; (because it is not known if &quot;&lt;code&gt;{foo, Y}&lt;/code&gt;&quot; might match the run-time value of &quot;&lt;code&gt;f(Z)&lt;/code&gt;&quot; or not).</source>
          <target state="translated">パターン「 &lt;code&gt;{X, {bar, Y}}&lt;/code&gt; 」を式「 &lt;code&gt;{foo, f(Z)}&lt;/code&gt; 」と照合すると、 &lt;code&gt;{false, Bindings}&lt;/code&gt; が生成されます。ここで、 &lt;code&gt;Bindings&lt;/code&gt; は「 &lt;code&gt;X&lt;/code&gt; 」をサブツリー「 &lt;code&gt;foo&lt;/code&gt; 」に関連付け、「 &lt;code&gt;Y&lt;/code&gt; 」を &lt;code&gt;any&lt;/code&gt; （ 「 &lt;code&gt;{foo, Y}&lt;/code&gt; 」が「 &lt;code&gt;f(Z)&lt;/code&gt; 」の実行時の値と一致するかどうかは不明であるため）。</target>
        </trans-unit>
        <trans-unit id="41eadb2a54882c5622d4b38b554e5de62b2f70fb" translate="yes" xml:space="preserve">
          <source>Matching pattern &quot;&lt;code&gt;{foo, bar}&lt;/code&gt;&quot; against expression &quot;&lt;code&gt;{foo, f()}&lt;/code&gt;&quot; yields &lt;code&gt;{false, []}&lt;/code&gt;, telling us that there might be a match, but we cannot deduce any bindings.</source>
          <target state="translated">パターン &quot; &lt;code&gt;{foo, bar}&lt;/code&gt; &quot;を式 &quot; &lt;code&gt;{foo, f()}&lt;/code&gt; &quot;と照合すると、 &lt;code&gt;{false, []}&lt;/code&gt; が生成され、一致する可能性があることがわかりますが、バインディングを推測することはできません。</target>
        </trans-unit>
        <trans-unit id="565f0418bb5db88e5d8e94d04658199d8610d3a3" translate="yes" xml:space="preserve">
          <source>Matching with &lt;code&gt;=&lt;/code&gt; cannot be used in the body. It can only be used on the top-level in the head of the fun. Example from the shell again:</source>
          <target state="translated">本文で &lt;code&gt;=&lt;/code&gt; を使用することはできません。楽しみの頭のトップレベルでのみ使用できます。再びシェルからの例：</target>
        </trans-unit>
        <trans-unit id="a3b81034e705bd05b97727252f92caaa6d4b0b26" translate="yes" xml:space="preserve">
          <source>Mathematical functions.</source>
          <target state="translated">数学的な関数。</target>
        </trans-unit>
        <trans-unit id="a06a77cda1f0fe480299649af647924142a54fb7" translate="yes" xml:space="preserve">
          <source>Mathematical symbol</source>
          <target state="translated">数学記号</target>
        </trans-unit>
        <trans-unit id="c58ea4f87745ada36a92fb71c082ea8bc73755ba" translate="yes" xml:space="preserve">
          <source>Max detail level activates tracing of all calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">最大詳細レベルは、 &lt;code&gt;et:trace_me/4,5&lt;/code&gt; へのすべての呼び出しのトレースをアクティブにします</target>
        </trans-unit>
        <trans-unit id="11d44674eb08f7f43d0a32b42fd60d63d0160c36" translate="yes" xml:space="preserve">
          <source>Max message size. If the encoded message (PDU) exceeds this size, the message should be segmented, and then encoded.</source>
          <target state="translated">メッセージの最大サイズ。符号化されたメッセージ(PDU)がこのサイズを超える場合、メッセージはセグメント化された後、符号化されるべきである。</target>
        </trans-unit>
        <trans-unit id="3d97f56b8e291a3ee3880e81646a3d47ce560d1f" translate="yes" xml:space="preserve">
          <source>Max number of reconnection attempts = 3</source>
          <target state="translated">再接続の最大試行回数=3</target>
        </trans-unit>
        <trans-unit id="8f6fcbc1873209046a71e4646a7bf770c375c7d7" translate="yes" xml:space="preserve">
          <source>Max number of simultaneous requests handled by the agent.</source>
          <target state="translated">エージェントが処理する同時リクエストの最大数。</target>
        </trans-unit>
        <trans-unit id="67ecefff02b1fa60a3ed3d34a164e5b55ca3b553" translate="yes" xml:space="preserve">
          <source>MaxHeapSize :: &lt;code&gt;&lt;a href=&quot;#type-max_heap_size&quot;&gt;max_heap_size()&lt;/a&gt;&lt;/code&gt;}</source>
          <target state="translated">MaxHeapSize :: &lt;code&gt;&lt;a href=&quot;#type-max_heap_size&quot;&gt;max_heap_size()&lt;/a&gt;&lt;/code&gt;}</target>
        </trans-unit>
        <trans-unit id="134ec94ac95c6d28341162fd550979562d4d3df9" translate="yes" xml:space="preserve">
          <source>MaxHeapSize :: max_heap_size()}</source>
          <target state="translated">MaxHeapSize ::max_heap_size()}</target>
        </trans-unit>
        <trans-unit id="7fb79c4fc5ed76bf0ff64ddd38b1f62fc36d71a2" translate="yes" xml:space="preserve">
          <source>Maximum &lt;code&gt;mseg_alloc&lt;/code&gt; carriers. Maximum number of carriers placed in separate memory segments. When this limit is reached, new carriers are placed in memory retrieved from &lt;code&gt;sys_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mseg_alloc&lt;/code&gt; キャリアの最大数。個別のメモリセグメントに配置されるキャリアの最大数。この制限に達すると、新しいキャリアは &lt;code&gt;sys_alloc&lt;/code&gt; から取得されたメモリに配置されます。</target>
        </trans-unit>
        <trans-unit id="e6eacd663f585efc475070891fcbc20a37ca64c6" translate="yes" xml:space="preserve">
          <source>Maximum &lt;code&gt;mseg_alloc&lt;/code&gt; multiblock carriers. Maximum number of multiblock carriers allocated through &lt;code&gt;mseg_alloc&lt;/code&gt; by allocator &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;. When this limit is reached, new multiblock carriers are allocated through &lt;code&gt;sys_alloc&lt;/code&gt;.</source>
          <target state="translated">最大 &lt;code&gt;mseg_alloc&lt;/code&gt; マルチブロックキャリア。アロケータ &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; によって &lt;code&gt;mseg_alloc&lt;/code&gt; によって割り当てられたマルチブロックキャリアの最大数。この制限に達すると、新しいマルチブロックキャリアが &lt;code&gt;sys_alloc&lt;/code&gt; を介して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="bd2141dfa85073c5d5d798b526c7807965d10406" translate="yes" xml:space="preserve">
          <source>Maximum &lt;code&gt;mseg_alloc&lt;/code&gt; singleblock carriers. Maximum number of singleblock carriers allocated through &lt;code&gt;mseg_alloc&lt;/code&gt; by allocator &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;. When this limit is reached, new singleblock carriers are allocated through &lt;code&gt;sys_alloc&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mseg_alloc&lt;/code&gt; シングルブロックキャリアの最大数。アロケータ &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; によって &lt;code&gt;mseg_alloc&lt;/code&gt; を通じて割り当てられたシングルブロックキャリアの最大数。この制限に達すると、新しいシングルブロックキャリアが &lt;code&gt;sys_alloc&lt;/code&gt; を介して割り当てられます。</target>
        </trans-unit>
        <trans-unit id="2560b86e3ae10f6289deb0fb563e661e33d86418" translate="yes" xml:space="preserve">
          <source>Maximum block search depth. This flag has effect only if the good fit strategy is selected for allocator &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt;. When the good fit strategy is used, free blocks are placed in segregated free-lists. Each free-list contains blocks of sizes in a specific range. The maxiumum block search depth sets a limit on the maximum number of blocks to inspect in a free-list during a search for suitable block satisfying the request.</source>
          <target state="translated">最大ブロック検索深度。このフラグは、アロケータ &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; に適切な戦略が選択されている場合にのみ有効です。適切な適合戦略が使用される場合、空きブロックは分離された空きリストに配置されます。各空きリストには、特定の範囲のサイズのブロックが含まれています。最大ブロック検索深度は、要求を満たす適切なブロックの検索中にフリーリストで検査するブロックの最大数に制限を設定します。</target>
        </trans-unit>
        <trans-unit id="d51cca9df00fb6d2d33b5042e7197395c4a8e7ed" translate="yes" xml:space="preserve">
          <source>Maximum cached segments. The maximum number of memory segments stored in the memory segment cache. Valid range is &lt;code&gt;[0, 30]&lt;/code&gt;. Defaults to &lt;code&gt;10&lt;/code&gt;.</source>
          <target state="translated">キャッシュされるセグメントの最大数。メモリセグメントキャッシュに格納されるメモリセグメントの最大数。有効な範囲は &lt;code&gt;[0, 30]&lt;/code&gt; 0、30 ]です。デフォルトは &lt;code&gt;10&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="3aacd33489c919c3259f3def36a32db78de3dce1" translate="yes" xml:space="preserve">
          <source>Maximum content-length in an incoming request, in bytes. Requests with content larger than this are answered with status 413. Default is &lt;code&gt;100000000&lt;/code&gt; (100 MB).</source>
          <target state="translated">着信要求の最大コンテンツ長（バイト単位）。これより大きいコンテンツのリクエストは、ステータス413で応答されます。デフォルトは &lt;code&gt;100000000&lt;/code&gt; （100 MB）です。</target>
        </trans-unit>
        <trans-unit id="a1f8a644c87141329a80f40e8e889c2fcd6e043d" translate="yes" xml:space="preserve">
          <source>Maximum depth to which terms are printed in case of error.</source>
          <target state="translated">エラーが発生した場合に用語が印刷される最大の深さ。</target>
        </trans-unit>
        <trans-unit id="3d28b59ad57e9489a6f4dacef960badc6138d55c" translate="yes" xml:space="preserve">
          <source>Maximum number of accumulated ack's. At most this many ack's will be accumulated by the transaction sender (if started and configured to accumulate ack's).</source>
          <target state="translated">蓄積されたACKの最大数。最大でもこれだけの数のアックがトランザクションの送信者によって蓄積される(開始され、アックを蓄積するように設定されている場合)。</target>
        </trans-unit>
        <trans-unit id="3fd6bff2681eda77c96a1c420386709c1976443f" translate="yes" xml:space="preserve">
          <source>Maximum number of accumulated requests. At most this many requests will be accumulated by the transaction sender (if started and configured to accumulate requests).</source>
          <target state="translated">蓄積されたリクエストの最大数。最大でもこれだけの数のリクエストがトランザクション送信者によって蓄積される (開始され、リクエストを蓄積するように設定されている場合)。</target>
        </trans-unit>
        <trans-unit id="266851f73fafaca0bf2a7c683bc5bb3b6087f7f7" translate="yes" xml:space="preserve">
          <source>Maximum number of inbound streams</source>
          <target state="translated">インバウンドストリームの最大数</target>
        </trans-unit>
        <trans-unit id="8e8430ded43149745cb3e173c59fd623e6e072ee" translate="yes" xml:space="preserve">
          <source>Maximum number of locks printed or no limit with &lt;code&gt;none&lt;/code&gt;.</source>
          <target state="translated">印刷されるロックの最大数、または制限 &lt;code&gt;none&lt;/code&gt; 、なし。</target>
        </trans-unit>
        <trans-unit id="32bf44bb5328eccf585529f07558abf83b7b8e84" translate="yes" xml:space="preserve">
          <source>Maximum number of non-self-issued intermediate certificates that can follow the peer certificate in a valid certification path. So, if depth is 0 the PEER must be signed by the trusted ROOT-CA directly; if 1 the path can be PEER, CA, ROOT-CA; if 2 the path can be PEER, CA, CA, ROOT-CA, and so on. The default value is 1.</source>
          <target state="translated">有効な認証パスにおいて、ピア証明書に続くことができる自己発行ではない中間証明書の最大数。つまり、深さが0の場合、PEERは信頼されたROOT-CAによって直接署名されなければならず、1の場合、パスはPEER、CA、ROOT-CAとなり、2の場合、パスはPEER、CA、CA、ROOT-CAとなることができます。デフォルト値は1です。</target>
        </trans-unit>
        <trans-unit id="99fff8db195ccd6c7a048657d30498c73cc01e79" translate="yes" xml:space="preserve">
          <source>Maximum number of processes allowed in the application.</source>
          <target state="translated">アプリケーションで許可されるプロセスの最大数。</target>
        </trans-unit>
        <trans-unit id="2aaab3dedee65069b116c73b83377fb65720dd78" translate="yes" xml:space="preserve">
          <source>Maximum number of retransmissions before this address is considered unreachable (and an alternative address is selected)</source>
          <target state="translated">このアドレスが到達不可能と判断されるまでの最大再送回数(代替アドレスが選択される)</target>
        </trans-unit>
        <trans-unit id="f9241fef7fbe8fcf32ca009d6ccfebe5481eab50" translate="yes" xml:space="preserve">
          <source>Maximum retransmissions while establishing an association</source>
          <target state="translated">アソシエーション確立時の最大再送回数</target>
        </trans-unit>
        <trans-unit id="48fdfa1e1dccf2224acc92084ff1e406b0b85d9e" translate="yes" xml:space="preserve">
          <source>Maximum size of the accumulated requests. At most this much requests will be accumulated by the transaction sender (if started and configured to accumulate requests).</source>
          <target state="translated">蓄積されるリクエストの最大サイズ。最大でこれだけのリクエストがトランザクション送信者によって蓄積されます (リクエストを蓄積するように起動され、設定されている場合)。</target>
        </trans-unit>
        <trans-unit id="28c7bf59062e8e7b399ad75612dd36c886f2132d" translate="yes" xml:space="preserve">
          <source>Maximum time in milliseconds for the authentication negotiation. Defaults to 120000 ms (2 minutes). If the client fails to log in within this time, the connection is closed.</source>
          <target state="translated">認証ネゴシエーションの最大時間をミリ秒単位で指定します。既定値は 120000 ミリ秒 (2 分)です。クライアントがこの時間内にログインできなかった場合、接続は閉じられます。</target>
        </trans-unit>
        <trans-unit id="d14bf4fb6ca42413fd5488014cf2a641dac8fb5a" translate="yes" xml:space="preserve">
          <source>Maximum time in milliseconds for the authentication negotiation. If the client fails to log in within this time, the connection is closed. The default value is 2 minutes. It is quite a long time, but can lowered if the client is supposed to be fast like if it is a program logging in.</source>
          <target state="translated">認証ネゴシエーションの最大時間をミリ秒単位で指定します。クライアントがこの時間内にログインに失敗した場合、接続は閉じられます。デフォルト値は 2 分です。これはかなり長い時間ですが、プログラムがログインしている場合のようにクライアントが高速であることを前提としている場合には、この値を下げることができます。</target>
        </trans-unit>
        <trans-unit id="4eb54965303d76ed44f2699d6c6c107cb1d43611" translate="yes" xml:space="preserve">
          <source>Maximum time in milliseconds for the first part of the ssh session setup, the hello message exchange. Defaults to 30000 ms (30 seconds). If the client fails to send the first message within this time, the connection is closed.</source>
          <target state="translated">ssh セッションのセットアップの最初の部分、hello メッセージの交換の最大時間 (ミリ秒)。既定値は 30000 ミリ秒 (30 秒)です。クライアントがこの時間内に最初のメッセージを送信できなかった場合、接続は閉じられます。</target>
        </trans-unit>
        <trans-unit id="5ed8876370f72890efa02c30deff24e537f34e66" translate="yes" xml:space="preserve">
          <source>Maximum time, in milliseconds, that the application is allowed to run. After the specified time, the application terminates automatically.</source>
          <target state="translated">アプリケーションの実行を許可する最大時間をミリ秒単位で指定します。指定した時間が経過すると、アプリケーションは自動的に終了します。</target>
        </trans-unit>
        <trans-unit id="03a8609c95b88388f510edabb0f8dfa6fd3c54d0" translate="yes" xml:space="preserve">
          <source>May raise exception &lt;code&gt;error:low_entropy&lt;/code&gt; in case the random generator failed due to lack of secure &quot;randomness&quot;.</source>
          <target state="translated">安全な「ランダム性」がないためにランダムジェネレーターが失敗した場合、例外 &lt;code&gt;error:low_entropy&lt;/code&gt; が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="23a279860156131505cf4f4d1f1bcaf4decacdec" translate="yes" xml:space="preserve">
          <source>May raise exception &lt;code&gt;error:notsup&lt;/code&gt; in case engine functionality is not supported by the underlying OpenSSL implementation.</source>
          <target state="translated">エンジン機能が基盤となるOpenSSL実装でサポートされていない場合、例外 &lt;code&gt;error:notsup&lt;/code&gt; が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="29a2af3a497fa54b209d1a74654b69dca236080c" translate="yes" xml:space="preserve">
          <source>May raise exception &lt;code&gt;error:notsup&lt;/code&gt; in case the chosen &lt;code&gt;Type&lt;/code&gt; is not supported by the underlying libcrypto implementation.</source>
          <target state="translated">選択した &lt;code&gt;Type&lt;/code&gt; が基盤となるlibcrypto実装でサポートされていない場合、例外 &lt;code&gt;error:notsup&lt;/code&gt; が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="7c8a55a92a5e0b80769310573f2935c9817cc3ed" translate="yes" xml:space="preserve">
          <source>May raise exception &lt;code&gt;error:notsup&lt;/code&gt; in case there is no engine support in the underlying OpenSSL implementation.</source>
          <target state="translated">基盤となるOpenSSL実装にエンジンサポートがない場合、例外 &lt;code&gt;error:notsup&lt;/code&gt; が発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="1d10e5666a4350d3a74dfeb650aa6e788de3d69f" translate="yes" xml:space="preserve">
          <source>May throw exception &lt;code&gt;low_entropy&lt;/code&gt; in case the random generator failed due to lack of secure &quot;randomness&quot;.</source>
          <target state="translated">安全な「ランダム性」がないためにランダムジェネレーターが失敗した場合、例外 &lt;code&gt;low_entropy&lt;/code&gt; をスローすることがあります。</target>
        </trans-unit>
        <trans-unit id="646deba2eac00f7933fd5cbe027cc187e501a16e" translate="yes" xml:space="preserve">
          <source>May throw exception &lt;code&gt;notsup&lt;/code&gt; in case the chosen &lt;code&gt;Type&lt;/code&gt; is not supported by the underlying OpenSSL implementation.</source>
          <target state="translated">選択した &lt;code&gt;Type&lt;/code&gt; が、基になるOpenSSL実装でサポートされていない場合、例外 &lt;code&gt;notsup&lt;/code&gt; をスローすることがあります。</target>
        </trans-unit>
        <trans-unit id="de3eaac3de9e89ba4866a20aae2b339c0035484b" translate="yes" xml:space="preserve">
          <source>May throw exception notsup in case there is no engine support in the underlying OpenSSL implementation.</source>
          <target state="translated">OpenSSL の実装でエンジンがサポートされていない場合、例外 notsup を投げることがあります。</target>
        </trans-unit>
        <trans-unit id="74a5150721719a6283a47c9cfb72e9bc9bff9f71" translate="yes" xml:space="preserve">
          <source>Md5 is a popular choice as a hash function, but it is not secure enough to be validated. Try to use sha instead wherever possible.</source>
          <target state="translated">Md5 はハッシュ関数として人気がありますが、検証されるほど安全ではありません。可能な限り代わりに sha を使うようにしてください。</target>
        </trans-unit>
        <trans-unit id="d947c601b953e99cf3b99eb1e54ea06bc8cd7368" translate="yes" xml:space="preserve">
          <source>Meaning that you don't care if the reply is acknowledged or not.</source>
          <target state="translated">返信の有無を気にしないという意味。</target>
        </trans-unit>
        <trans-unit id="1c14c209285d898ae15b996256e223eda68f99fc" translate="yes" xml:space="preserve">
          <source>Meaning that you want an acknowledgement &lt;strong&gt;sometime&lt;/strong&gt;. When the acknowledgement eventually is received, the handle_trans_ack/4 callback function will be invoked with the ack_data() as one of its arguments. ack_data() may be any Erlang term.</source>
          <target state="translated">&lt;strong&gt;いつか&lt;/strong&gt;謝辞が欲しいという意味。最終的に確認応答を受信すると、handle_trans_ack / 4コールバック関数が、ack_data（）を引数の1つとして呼び出されます。ack_data（）は任意のErlang用語です。</target>
        </trans-unit>
        <trans-unit id="0a6a0ba0223a6ae2bd06adfc210359ea6aab4c09" translate="yes" xml:space="preserve">
          <source>Meaning that you want an immediate acknowledgement when the other part receives this transaction reply. When the acknowledgement eventually is received, the handle_trans_ack/4 callback function will be invoked with the ack_data() as one of its arguments. ack_data() may be any Erlang term.</source>
          <target state="translated">つまり、他の部分がこのトランザクションリプライを受け取ったときにすぐに確認応答をしたいということです。最終的に確認応答を受け取ると、handle_trans_ack/4 コールバック関数が ack_data()を引数の一つとして呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7f498b784a10213b6d5daff6b5f8c433f00ab391" translate="yes" xml:space="preserve">
          <source>Meaningful atoms, not specified above, are the ssl option names.</source>
          <target state="translated">上記で指定されていない意味のあるアトムは、sslオプション名です。</target>
        </trans-unit>
        <trans-unit id="04a146d79042e9bb8204c7ef5d4ff5347d02259b" translate="yes" xml:space="preserve">
          <source>Meas results</source>
          <target state="translated">測定結果</target>
        </trans-unit>
        <trans-unit id="04424ff7354672ffdc45258bd640170e14936cbb" translate="yes" xml:space="preserve">
          <source>Measure Elapsed Time</source>
          <target state="translated">経過時間の測定</target>
        </trans-unit>
        <trans-unit id="f049a7f84606387c1f036369b9d17679bb303ce9" translate="yes" xml:space="preserve">
          <source>Measure scheduler utilization</source>
          <target state="translated">スケジューラの使用率の測定</target>
        </trans-unit>
        <trans-unit id="7f45833b5c1ba2a9c0ab4a66fccfcb8ca4b25b6f" translate="yes" xml:space="preserve">
          <source>Measure utilization for normal and dirty-cpu schedulers during &lt;code&gt;Seconds&lt;/code&gt; seconds, and then return the result.</source>
          <target state="translated">&lt;code&gt;Seconds&lt;/code&gt; 秒の間に通常およびダーティCPUスケジューラの使用率を測定し、結果を返します。</target>
        </trans-unit>
        <trans-unit id="abb7023ce648e065965ab27aefcab22defabb76e" translate="yes" xml:space="preserve">
          <source>Measurement tool directory name</source>
          <target state="translated">測定ツールのディレクトリ名</target>
        </trans-unit>
        <trans-unit id="28e896074d31c2da6938ce8b9dd8662ed8369129" translate="yes" xml:space="preserve">
          <source>Measurement(s)</source>
          <target state="translated">Measurement(s)</target>
        </trans-unit>
        <trans-unit id="d404968ea90b07f16774ce75c7978d6ff60962f2" translate="yes" xml:space="preserve">
          <source>Medium</source>
          <target state="translated">Medium</target>
        </trans-unit>
        <trans-unit id="d4bb05883bb5a243cfcc4f9296f5649fd60af7f8" translate="yes" xml:space="preserve">
          <source>Medium mathematical space</source>
          <target state="translated">中規模の数学的空間</target>
        </trans-unit>
        <trans-unit id="a66ec7d3e2375014d1ffe12adf1704c1f323a128" translate="yes" xml:space="preserve">
          <source>Meetei_Mayek</source>
          <target state="translated">Meetei_Mayek</target>
        </trans-unit>
        <trans-unit id="291fdbd8f605e558c302e6b671f37cb0a11631da" translate="yes" xml:space="preserve">
          <source>Megaco and peer protocols are complementary in nature and entirely compatible within the same system. At a system level, Megaco allows for</source>
          <target state="translated">メガコとピアプロトコルは本質的に補完的であり、同一システム内では完全に互換性があります。システムレベルでは、メガコは以下のことを可能にします。</target>
        </trans-unit>
        <trans-unit id="efb29db4c9a5b8efca98c20c485c0a71a7d66580" translate="yes" xml:space="preserve">
          <source>Megaco encoder behaviour.</source>
          <target state="translated">メガコエンコーダの挙動。</target>
        </trans-unit>
        <trans-unit id="1ab0d5d513da1a6a7bc7432ddbc64c528b364f30" translate="yes" xml:space="preserve">
          <source>Megaco erlang dist compress behaviour.</source>
          <target state="translated">Megaco erlang distの圧縮動作。</target>
        </trans-unit>
        <trans-unit id="220d827864f1e91dd8d479ee473263ef26b35de7" translate="yes" xml:space="preserve">
          <source>Megaco is a (master/slave) protocol for control of gateway functions at the edge of the packet network. Examples of this is IP-PSTN trunking gateways and analog line gateways. The main function of Megaco is to allow gateway decomposition into a call agent (call control) part (known as Media Gateway Controller, MGC) - master, and an gateway interface part (known as Media Gateway, MG) - slave. The MG has no call control knowledge and only handle making the connections and simple configurations.</source>
          <target state="translated">メガコは、パケットネットワークのエッジでゲートウェイ機能を制御するための(マスター/スレーブ)プロトコルです。IP-PSTNトランキングゲートウェイやアナログ回線ゲートウェイなどがその例です。メガコの主な機能は、ゲートウェイをコールエージェント(呼制御)部分(メディアゲートウェイコントローラ、MGCとして知られている)-マスターとゲートウェイインタフェース部分(メディアゲートウェイ、MGとして知られている)-スレーブに分解できるようにすることである。MGは呼制御の知識を持たず、接続や簡単な設定のみを行う。</target>
        </trans-unit>
        <trans-unit id="5bffe747cacf35d066423541d229ecb49cc0807e" translate="yes" xml:space="preserve">
          <source>Megaco message transformation utility.</source>
          <target state="translated">Megacoのメッセージ変換ユーティリティ。</target>
        </trans-unit>
        <trans-unit id="20993d68c2198a64d2417ac2d87867b327655a8f" translate="yes" xml:space="preserve">
          <source>Megaco transport behaviour.</source>
          <target state="translated">メガコの輸送行動。</target>
        </trans-unit>
        <trans-unit id="ca3af7e570175c4264bb51201980217711f1fa1b" translate="yes" xml:space="preserve">
          <source>Megaco version 3 encoding config</source>
          <target state="translated">Megacoバージョン3のエンコーディング設定</target>
        </trans-unit>
        <trans-unit id="234c693a674eb5d604a026611a56402135865454" translate="yes" xml:space="preserve">
          <source>Megaco/H.248 is a protocol for control of elements in a physically decomposed multimedia gateway, enabling separation of call control from media conversion. A Media Gateway Controller (MGC) controls one or more Media Gateways (MG).</source>
          <target state="translated">メガコ/H.248は、物理的に分解されたマルチメディアゲートウェイ内の要素を制御するためのプロトコルであり、呼制御とメディア変換を分離することを可能にする。メディアゲートウェイコントローラ(MGC)は、1つまたは複数のメディアゲートウェイ(MG)を制御する。</target>
        </trans-unit>
        <trans-unit id="cda9df8ada294fa5717dc7c1fc6e9914b12f8c01" translate="yes" xml:space="preserve">
          <source>Megaco/H.248 version 1 (RFC3525) updated according to Implementors Guide version 10-13.</source>
          <target state="translated">Megaco/H.248バージョン1(RFC3525)を実装者ガイドバージョン10-13に合わせて更新しました。</target>
        </trans-unit>
        <trans-unit id="8857c1ee6501c5ec79a912365370d5a6a0f747fc" translate="yes" xml:space="preserve">
          <source>Megaco/H.248 version 2 as defined by draft-ietf-megaco-h248v2-04 updated according to Implementors Guide version 10-13.</source>
          <target state="translated">draft-ietf-megaco-h248v2-04で定義されているMegaco/H.248バージョン2を実装者ガイドバージョン10-13に合わせて更新しました。</target>
        </trans-unit>
        <trans-unit id="56058cc7ccdad804c1b70639153c0e96607997f8" translate="yes" xml:space="preserve">
          <source>Megaco/H.248 version 3 as defined by ITU H.248.1 (09/2005).</source>
          <target state="translated">ITU H.248.1(09/2005)で定義されたMegaco/H.248バージョン3。</target>
        </trans-unit>
        <trans-unit id="88287078a76b16499606b0eda112892d7c56b922" translate="yes" xml:space="preserve">
          <source>Membership of an object instance in an MIB view is determined by the following algorithm:</source>
          <target state="translated">MIBビューにおけるオブジェクトインスタンスのメンバシップは、以下のアルゴリズムによって決定されます。</target>
        </trans-unit>
        <trans-unit id="e0f688c59c802fa1afb6c57fd1cbe6c48ddef5de" translate="yes" xml:space="preserve">
          <source>Membership view is not transitive. If &lt;code&gt;node1&lt;/code&gt; is not directly connected to &lt;code&gt;node2&lt;/code&gt;, they will not see each other groups. But if both are connected to &lt;code&gt;node3&lt;/code&gt;, &lt;code&gt;node3&lt;/code&gt; will have the full view.</source>
          <target state="translated">メンバーシップビューは推移的ではありません。 &lt;code&gt;node1&lt;/code&gt; が &lt;code&gt;node2&lt;/code&gt; に直接接続されていない場合、それらは互いにグループを認識しません。ただし、両方が &lt;code&gt;node3&lt;/code&gt; に接続されている場合、 &lt;code&gt;node3&lt;/code&gt; は完全なビューを持ちます。</target>
        </trans-unit>
        <trans-unit id="30350d30f29ea3b12a784ca65d59e4a1c44504dd" translate="yes" xml:space="preserve">
          <source>Memory allocated must be explicitly freed with a corresponding call to &lt;code&gt;&lt;a href=&quot;#driver_free&quot;&gt;driver_free&lt;/a&gt;&lt;/code&gt; (unless otherwise stated).</source>
          <target state="translated">割り当てられたメモリは、対応する &lt;code&gt;&lt;a href=&quot;#driver_free&quot;&gt;driver_free&lt;/a&gt;&lt;/code&gt; の呼び出しで明示的に解放する必要があります（特に明記されていない限り）。</target>
        </trans-unit>
        <trans-unit id="8a7c93315d7681329a5299a5f17af5e70109e588" translate="yes" xml:space="preserve">
          <source>Memory allocation failed</source>
          <target state="translated">メモリ割り当てに失敗しました。</target>
        </trans-unit>
        <trans-unit id="e570bc956a4274803362d894f6047828e5106277" translate="yes" xml:space="preserve">
          <source>Memory allocation functions.</source>
          <target state="translated">メモリの割り当て機能。</target>
        </trans-unit>
        <trans-unit id="2684c7e649eb37683099bd99b0ac2e74ac12a361" translate="yes" xml:space="preserve">
          <source>Memory allocation information. Equivalent to &lt;code&gt;erlang:memory/0&lt;/code&gt;.</source>
          <target state="translated">メモリ割り当て情報。 &lt;code&gt;erlang:memory/0&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="158a065a76be26284f9a9200a508e6ac49bd3965" translate="yes" xml:space="preserve">
          <source>Memory allocation information. Equivalent to &lt;code&gt;erlang:memory/1&lt;/code&gt;.</source>
          <target state="translated">メモリ割り当て情報。 &lt;code&gt;erlang:memory/1&lt;/code&gt; と同等です。</target>
        </trans-unit>
        <trans-unit id="909293f836f9e597ec4a004c609be9b42bb7b1af" translate="yes" xml:space="preserve">
          <source>Memory allocator system flags have the following syntax: &lt;code&gt;+M&amp;lt;S&amp;gt;&amp;lt;P&amp;gt; &amp;lt;V&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; is a letter identifying a subsystem, &lt;code&gt;&amp;lt;P&amp;gt;&lt;/code&gt; is a parameter, and &lt;code&gt;&amp;lt;V&amp;gt;&lt;/code&gt; is the value to use. The flags can be passed to the Erlang emulator (&lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt;) as command-line arguments.</source>
          <target state="translated">メモリアロケータシステムフラグの構文は次のとおりです。 &lt;code&gt;+M&amp;lt;S&amp;gt;&amp;lt;P&amp;gt; &amp;lt;V&amp;gt;&lt;/code&gt; 、ここで &lt;code&gt;&amp;lt;S&amp;gt;&lt;/code&gt; はサブシステムを識別する文字、 &lt;code&gt;&amp;lt;P&amp;gt;&lt;/code&gt; はパラメーター、 &lt;code&gt;&amp;lt;V&amp;gt;&lt;/code&gt; は使用する値です。フラグはコマンドライン引数としてErlangエミュレーター（ &lt;code&gt;&lt;a href=&quot;erl&quot;&gt;erl(1)&lt;/a&gt;&lt;/code&gt; ）に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="8dd2eade140452aa8bdce3e4ed57281be8adbbab" translate="yes" xml:space="preserve">
          <source>Memory allocator-specific flags. For more information, see &lt;code&gt;&lt;a href=&quot;erts_alloc&quot;&gt;erts_alloc(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メモリアロケータ固有のフラグ。詳細は、 &lt;code&gt;&lt;a href=&quot;erts_alloc&quot;&gt;erts_alloc(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="fdb6e5cf15d341e3aa96990976dacd306d089ec3" translate="yes" xml:space="preserve">
          <source>Memory consumption, system limits</source>
          <target state="translated">メモリ消費量、システム制限</target>
        </trans-unit>
        <trans-unit id="7527155aa02588eea7da969db8693cc9ca0cf4a9" translate="yes" xml:space="preserve">
          <source>Memory types:</source>
          <target state="translated">メモリの種類。</target>
        </trans-unit>
        <trans-unit id="1ac17298e965f8785571301bd292200f1c1741e9" translate="yes" xml:space="preserve">
          <source>Memory use for the loaded code, in bytes.</source>
          <target state="translated">ロードされたコードのメモリ使用量をバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="4dd0c06f98123356440797c194d0014596cf4b1f" translate="yes" xml:space="preserve">
          <source>Memory use for the old code, if any.</source>
          <target state="translated">古いコードのメモリ使用量(もしあれば)。</target>
        </trans-unit>
        <trans-unit id="9b8e4f1f3e91d8f85eeac155da9f5cb32aabeb22" translate="yes" xml:space="preserve">
          <source>Memory use for the old code, in bytes.</source>
          <target state="translated">古いコードのメモリ使用量をバイト単位で表示します。</target>
        </trans-unit>
        <trans-unit id="2bbb76271791ef8b2e5ac70d40f275e4232f3424" translate="yes" xml:space="preserve">
          <source>Mende_Kikakui</source>
          <target state="translated">Mende_Kikakui</target>
        </trans-unit>
        <trans-unit id="119e8b7d23fe6df42b1eaf06cf2b4d696139b05c" translate="yes" xml:space="preserve">
          <source>Merge the specified PLTs to create the initial PLT. This requires that the PLTs are disjoint (that is, do not have any module appearing in more than one PLT). The PLTs are created in the usual way:</source>
          <target state="translated">指定された PLT をマージして初期 PLT を作成します。これは、PLT が不連続であることを必要とします(つまり、1 つ以上の PLT にモジュールが出現しないこと)。PLT は通常の方法で作成されます。</target>
        </trans-unit>
        <trans-unit id="e3929df6cd4273ec09922ee67ab9ff5aa6b66122" translate="yes" xml:space="preserve">
          <source>Merges source code files and syntax trees to a single syntax tree. This is a file-reading front end to &lt;code&gt;merge_sources/3&lt;/code&gt;. &lt;code&gt;Name&lt;/code&gt; specifies the name of the resulting module - not the name of the output file. &lt;code&gt;Sources&lt;/code&gt; is a list of syntax trees and/or lists of &quot;source code form&quot; syntax trees, each entry representing a module definition. &lt;code&gt;Files&lt;/code&gt; is a list of file names and/or module names of source modules to be read and included. All the input modules must be distinctly named.</source>
          <target state="translated">ソースコードファイルと構文ツリーを1つの構文ツリーにマージします。これは、 &lt;code&gt;merge_sources/3&lt;/code&gt; のファイル読み取りフロントエンドです。 &lt;code&gt;Name&lt;/code&gt; は、出力ファイルの名前ではなく、結果のモジュールの名前を指定します。 &lt;code&gt;Sources&lt;/code&gt; は、構文ツリーのリストおよび/または「ソースコード形式」構文ツリーのリストであり、各エントリはモジュール定義を表します。 &lt;code&gt;Files&lt;/code&gt; は、読み込まれてインクルードされるソースモジュールのファイル名またはモジュール名、あるいはその両方のリストです。すべての入力モジュールには、明確に名前を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="914f8309af3ca6cfa2e83d7e921c466e8a40172d" translate="yes" xml:space="preserve">
          <source>Merges source code files to a single file. &lt;code&gt;Name&lt;/code&gt; specifies the name of the resulting module - not the name of the output file. &lt;code&gt;Files&lt;/code&gt; is a list of file names and/or module names of source modules to be read and merged (see &lt;code&gt;merge_files/4&lt;/code&gt; for details). All the input modules must be distinctly named.</source>
          <target state="translated">ソースコードファイルを単一のファイルにマージします。 &lt;code&gt;Name&lt;/code&gt; は、出力ファイルの名前ではなく、結果のモジュールの名前を指定します。 &lt;code&gt;Files&lt;/code&gt; は、読み込まれてマージされるソースモジュールのファイル名またはモジュール名、あるいはその両方のリストです（詳細については、 &lt;code&gt;merge_files/4&lt;/code&gt; を参照してください）。すべての入力モジュールには、明確に名前を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="61ef0f26ed0f675da05d869af4a295417123a3d7" translate="yes" xml:space="preserve">
          <source>Merges syntax trees to a single syntax tree. This is the main code merging &quot;engine&quot;. &lt;code&gt;Name&lt;/code&gt; specifies the name of the resulting module. &lt;code&gt;Sources&lt;/code&gt; is a list of syntax trees of type &lt;code&gt;form_list&lt;/code&gt; and/or lists of &quot;source code form&quot; syntax trees, each entry representing a module definition. All the input modules must be distinctly named.</source>
          <target state="translated">構文ツリーを単一の構文ツリーにマージします。これは、「エンジン」をマージするメインコードです。 &lt;code&gt;Name&lt;/code&gt; は、結果のモジュールの名前を指定します。 &lt;code&gt;Sources&lt;/code&gt; は、 &lt;code&gt;form_list&lt;/code&gt; タイプの構文ツリーのリストおよび/または「ソースコードフォーム」構文ツリーのリストであり、各エントリはモジュール定義を表します。すべての入力モジュールには、明確に名前を付ける必要があります。</target>
        </trans-unit>
        <trans-unit id="3d2a293b058966cf02ea5fa803aede107a277d1e" translate="yes" xml:space="preserve">
          <source>Merges terms on files. Each input file is assumed to be sorted.</source>
          <target state="translated">ファイル上の用語をマージします。各入力ファイルはソートされていることを前提としています。</target>
        </trans-unit>
        <trans-unit id="ca627cc38a16c0db5470a1230525775bd4b5efc4" translate="yes" xml:space="preserve">
          <source>Merges tuples on files. Each input file is assumed to be sorted on key(s).</source>
          <target state="translated">ファイル上のタプルをマージします。各入力ファイルはキーでソートされているものとします。</target>
        </trans-unit>
        <trans-unit id="6351ca1bc7f6afb34d654f76c66afcef185ec40c" translate="yes" xml:space="preserve">
          <source>Merges two dictionaries, &lt;code&gt;Dict1&lt;/code&gt; and &lt;code&gt;Dict2&lt;/code&gt;, to create a new dictionary. All the &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; pairs from both dictionaries are included in the new dictionary. If a key occurs in both dictionaries, &lt;code&gt;Fun&lt;/code&gt; is called with the key and both values to return a new value. &lt;code&gt;merge&lt;/code&gt; can be defined as follows, but is faster:</source>
          <target state="translated">2つの辞書 &lt;code&gt;Dict1&lt;/code&gt; と &lt;code&gt;Dict2&lt;/code&gt; をマージして、新しい辞書を作成します。すべての &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 両方の辞書からのペアは、新しい辞書に含まれています。キーが両方のディクショナリで発生した場合、 &lt;code&gt;Fun&lt;/code&gt; はキーと両方の値で呼び出され、新しい値を返します。 &lt;code&gt;merge&lt;/code&gt; は次のように定義できますが、より高速です。</target>
        </trans-unit>
        <trans-unit id="d26d2ded712b884fedeee08ada284ef051b3b38a" translate="yes" xml:space="preserve">
          <source>Merges two dictionaries, &lt;code&gt;Orddict1&lt;/code&gt; and &lt;code&gt;Orddict2&lt;/code&gt;, to create a new dictionary. All the &lt;code&gt;Key&lt;/code&gt;-&lt;code&gt;Value&lt;/code&gt; pairs from both dictionaries are included in the new dictionary. If a key occurs in both dictionaries, &lt;code&gt;Fun&lt;/code&gt; is called with the key and both values to return a new value. &lt;code&gt;merge/3&lt;/code&gt; can be defined as follows, but is faster:</source>
          <target state="translated">2つの辞書 &lt;code&gt;Orddict1&lt;/code&gt; と &lt;code&gt;Orddict2&lt;/code&gt; をマージして、新しい辞書を作成します。すべての &lt;code&gt;Key&lt;/code&gt; - &lt;code&gt;Value&lt;/code&gt; 両方の辞書からのペアは、新しい辞書に含まれています。キーが両方のディクショナリで発生した場合、 &lt;code&gt;Fun&lt;/code&gt; はキーと両方の値で呼び出され、新しい値を返します。 &lt;code&gt;merge/3&lt;/code&gt; は次のように定義できますが、より高速です：</target>
        </trans-unit>
        <trans-unit id="ec7e01625093b63d2959063dd1a662a878ea5c0e" translate="yes" xml:space="preserve">
          <source>Merges two maps into a single map &lt;code&gt;Map3&lt;/code&gt;. If two keys exist in both maps, the value in &lt;code&gt;Map1&lt;/code&gt; is superseded by the value in &lt;code&gt;Map2&lt;/code&gt;.</source>
          <target state="translated">2つのマップを1つのマップ &lt;code&gt;Map3&lt;/code&gt; にマージします。2つのキーが両方のマップに存在する場合、 &lt;code&gt;Map1&lt;/code&gt; の値は &lt;code&gt;Map2&lt;/code&gt; の値に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="6735763c165e3286d74b4273c933f33e3f5ec752" translate="yes" xml:space="preserve">
          <source>Merging different versions of the schema table does not always require the cookies to be the same. If the storage type of the schema table is &lt;code&gt;disc_copies&lt;/code&gt;, the cookie is immutable, and all other &lt;code&gt;db_nodes&lt;/code&gt; must have the same cookie. When the schema is stored as type &lt;code&gt;ram_copies&lt;/code&gt;, its cookie can be replaced with a cookie from another node (&lt;code&gt;ram_copies&lt;/code&gt; or &lt;code&gt;disc_copies&lt;/code&gt;). The cookie replacement (during merge of the schema table definition) is performed each time a RAM node connects to another node.</source>
          <target state="translated">異なるバージョンのスキーマテーブルをマージする場合、必ずしも同じCookieである必要はありません。スキーマテーブルのストレージタイプが &lt;code&gt;disc_copies&lt;/code&gt; の場合、Cookieは不変であり、他のすべての &lt;code&gt;db_nodes&lt;/code&gt; は同じCookieを持つ必要があります。スキーマが &lt;code&gt;ram_copies&lt;/code&gt; 型として格納されている場合、そのcookieは別のノード（ &lt;code&gt;ram_copies&lt;/code&gt; または &lt;code&gt;disc_copies&lt;/code&gt; ）のcookieで置き換えることができます。 （スキーマテーブル定義のマージ中の）Cookieの置換は、RAMノードが別のノードに接続するたびに実行されます。</target>
        </trans-unit>
        <trans-unit id="41b5e66fa06088a4b56fe703bb862a285dff3ab5" translate="yes" xml:space="preserve">
          <source>Merl can only parse a fragment of text if it follows the basic syntactical rules of Erlang. In most places, a normal Erlang variable can be used as metavariable, for example:</source>
          <target state="translated">MerlはErlangの基本的な構文ルールに従っている場合にのみテキストの断片をパースすることができます。ほとんどの場所では、通常のErlangの変数がメタ変数として使えます。</target>
        </trans-unit>
        <trans-unit id="fad43e700acf724fbc03a57e905d1e33999d5a95" translate="yes" xml:space="preserve">
          <source>Meroitic_Cursive</source>
          <target state="translated">Meroitic_Cursive</target>
        </trans-unit>
        <trans-unit id="16256e81ed15ae584494444b4607752969d09a87" translate="yes" xml:space="preserve">
          <source>Meroitic_Hieroglyphs</source>
          <target state="translated">Meroitic_Hieroglyphs</target>
        </trans-unit>
        <trans-unit id="0d77c6f0a440925729997c58732eb390465bad0a" translate="yes" xml:space="preserve">
          <source>Message Processing and Dispatch module for the SNMP agent</source>
          <target state="translated">SNMPエージェントのためのメッセージ処理とディスパッチモジュール</target>
        </trans-unit>
        <trans-unit id="834a3b3a12d9955dd19120adc9ef57807900ee6d" translate="yes" xml:space="preserve">
          <source>Message Processing and Dispatch module for the SNMP manager</source>
          <target state="translated">SNMPマネージャ用のメッセージ処理およびディスパッチモジュール</target>
        </trans-unit>
        <trans-unit id="02371a390b8862f0fb277fe1f69a5aec05d5978c" translate="yes" xml:space="preserve">
          <source>Message Queue Length</source>
          <target state="translated">メッセージキューの長さ</target>
        </trans-unit>
        <trans-unit id="dfb051fb0d4beb2aa1f14d08e0e4d39de55bd026" translate="yes" xml:space="preserve">
          <source>Message Transformation</source>
          <target state="translated">トランスフォーメーションメッセージ</target>
        </trans-unit>
        <trans-unit id="79df93b3eaeb4cccfb42f6840f1b4d449096cc8e" translate="yes" xml:space="preserve">
          <source>Message authentication code</source>
          <target state="translated">メッセージ認証コード</target>
        </trans-unit>
        <trans-unit id="c6d065b029fde73824807bcb7a4f88522968466d" translate="yes" xml:space="preserve">
          <source>Message errors are detected remotely on the other side of the protocol. And you probably don't want to reply to it, but it may indicate that you have outstanding transactions that not will get any response (request -&amp;gt; reply; reply -&amp;gt; ack).</source>
          <target state="translated">メッセージエラーは、プロトコルの反対側でリモートで検出されます。そしておそらくあなたはそれに返信したくないでしょうが、それはあなたが何の応答もしない未処理のトランザクションがあることを示しているかもしれません（リクエスト-&amp;gt;返信;返信-&amp;gt; ack）。</target>
        </trans-unit>
        <trans-unit id="19842f503704a8912fdf5969e80cd251a7b79c11" translate="yes" xml:space="preserve">
          <source>Message package file</source>
          <target state="translated">メッセージパッケージファイル</target>
        </trans-unit>
        <trans-unit id="03bf9094ba44ce8eb3a756071ecbb6363ddf4c1c" translate="yes" xml:space="preserve">
          <source>Message reception detects 5001, 5004, 5005, 5008, 5009, 5010, 5011, 5014, 5015, and 5017 errors. It ignores 5013 errors at the admonition of sections 3 and 4.1.</source>
          <target state="translated">メッセージ受信は、50011、5004、5005、5008、5009、5010、5011、5014、5015、5017のエラーを検出する。セクション3、4.1のアドモナクションで5013エラーを無視する。</target>
        </trans-unit>
        <trans-unit id="2297ecf9967e2341ba11a1ac6137bfeff96d6f16" translate="yes" xml:space="preserve">
          <source>Message records</source>
          <target state="translated">メッセージレコード</target>
        </trans-unit>
        <trans-unit id="31deece58687e26fd50c8809af9d97cfb48aa92a" translate="yes" xml:space="preserve">
          <source>Message sending is asynchronous and safe, the message is guaranteed to eventually reach the recipient, provided that the recipient exists.</source>
          <target state="translated">メッセージの送信は非同期で安全であり、受信者が存在する限り、メッセージは最終的に受信者に到達することが保証されています。</target>
        </trans-unit>
        <trans-unit id="a7c63e918af7eff798c82c0e88aefb50d97f2578" translate="yes" xml:space="preserve">
          <source>Message size at which SCTP fragmentation occurs</source>
          <target state="translated">SCTP フラグメンテーションが発生するメッセージサイズ</target>
        </trans-unit>
        <trans-unit id="b750d8fad975d29078dc3817706283c95d7080b2" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt; call&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt; return_from&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt; call&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt; return_from&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2284766da0e8eee8510824e820fbb024eeb2e85a" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt; call&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt; return_from&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt; return_to&lt;/a&gt;&lt;/code&gt;. Or rather, the absence of.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt; call&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt; return_from&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt; return_to&lt;/a&gt;&lt;/code&gt; 。というか、の不在。</target>
        </trans-unit>
        <trans-unit id="7bf49996d9fb115e00764acfda8430d93e84eb42" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt;return_from&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt;return_from&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ac347e4302154cf539a13312237b96cc114cdfa9" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt;call&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt;return_from&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt;return_to&lt;/a&gt;&lt;/code&gt;. Or rather, the absence of.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_call&quot;&gt;call&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_from&quot;&gt;return_from&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt;return_to&lt;/a&gt;&lt;/code&gt; 。というか、欠如。</target>
        </trans-unit>
        <trans-unit id="d55b10e6602cdac34aaaf0e3cdd87ae3eba9e3c4" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_start&quot;&gt; gc_minor_start&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_max_heap_size&quot;&gt; gc_max_heap_size&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_end&quot;&gt; gc_minor_end&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_start&quot;&gt; gc_minor_start&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_max_heap_size&quot;&gt; gc_max_heap_size&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_end&quot;&gt; gc_minor_end&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="861b1c2d1e66807add82f45f362fb827341c6bc5" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_start&quot;&gt;gc_minor_start&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_max_heap_size&quot;&gt;gc_max_heap_size&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_end&quot;&gt;gc_minor_end&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_start&quot;&gt;gc_minor_start&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_max_heap_size&quot;&gt;gc_max_heap_size&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_gc_minor_end&quot;&gt;gc_minor_end&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e0e7108836afb16e38c44c652a4e62d909356441" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_exiting_proc&quot;&gt; in_exiting&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exiting_proc&quot;&gt; out_exiting&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exited_proc&quot;&gt; out_exited&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_exiting_proc&quot;&gt; in_exiting&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exiting_proc&quot;&gt; out_exiting&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exited_proc&quot;&gt; out_exited&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="64249446e1241b8f9d4c261cdb93987c31f20de2" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_exiting_proc&quot;&gt;in_exiting&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exiting_proc&quot;&gt;out_exiting&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exited_proc&quot;&gt;out_exited&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_exiting_proc&quot;&gt;in_exiting&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exiting_proc&quot;&gt;out_exiting&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_exited_proc&quot;&gt;out_exited&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cbd3f651bc7160b6a497c91cf5402436859647af" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_port&quot;&gt; in&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_port&quot;&gt; out&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_port&quot;&gt; in&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_port&quot;&gt; out&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d456b159601bfe4ba88f4b3b670553e61afb6b4d" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_port&quot;&gt;in&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_port&quot;&gt;out&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_port&quot;&gt;in&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_port&quot;&gt;out&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="416881b9d5540cfe9873bf0ebffec446874cdd3d" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_proc&quot;&gt; in&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_proc&quot;&gt; out&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_proc&quot;&gt; in&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_proc&quot;&gt; out&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="498dd804ab57af76daece1cf044904cff1eb753f" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_proc&quot;&gt;in&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_proc&quot;&gt;out&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_in_proc&quot;&gt;in&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_out_proc&quot;&gt;out&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68930d265f4db910af9eba0b28146a7b7899c6bc" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_open&quot;&gt; open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_closed&quot;&gt; closed&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt; register&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt; unregister&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt; getting_linked&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt; getting_unlinked&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_open&quot;&gt; open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_closed&quot;&gt; closed&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt; register&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt; unregister&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt; getting_linked&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt; getting_unlinked&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="fef22350b8b577df133e3cb6cedbf6dc60aaa87c" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_open&quot;&gt;open&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_closed&quot;&gt;closed&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt;register&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt;unregister&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt;getting_linked&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt;getting_unlinked&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_closed&quot;&gt;closed&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt;register&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt;unregister&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt;getting_linked&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt;getting_unlinked&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e6512f01d3c770be7226241736812f0d69fa4514" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_receive&quot;&gt; 'receive'&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_receive&quot;&gt; 'receive'&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d00e4b40aebde71fd90f9fddfebc8612e44ddb8f" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_receive&quot;&gt;'receive'&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_receive&quot;&gt;'receive'&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="3c491f5bf100ca2885d053c861f62400fb713ad9" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt; return_to&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt; return_to&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ef5f53652270bb984920cbfaaa3925022a3b6e1c" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt;return_to&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_return_to&quot;&gt;return_to&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="aa13bce159f2aec6f79783cc4440e2c288e0bab0" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send&quot;&gt; send&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send_to_non_existing_process&quot;&gt; send_to_non_existing_process&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send&quot;&gt; send&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send_to_non_existing_process&quot;&gt; send_to_non_existing_process&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7160c31113f5c016d9d063ac1996aecb61589a8a" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send&quot;&gt;send&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send_to_non_existing_process&quot;&gt;send_to_non_existing_process&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send&quot;&gt;send&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_send_to_non_existing_process&quot;&gt;send_to_non_existing_process&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53366600ccc75a4be0906a21afaa84e288188f3d" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawn&quot;&gt; spawn&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawned&quot;&gt; spawned&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_exit&quot;&gt; exit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt; register&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt; unregister&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_link&quot;&gt; link&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unlink&quot;&gt; unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt; getting_linked&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt; getting_unlinked&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawn&quot;&gt; spawn&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawned&quot;&gt; spawned&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_exit&quot;&gt; exit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt; register&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt; unregister&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_link&quot;&gt; link&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unlink&quot;&gt; unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt; getting_linked&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt; getting_unlinked&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="0ff3b1c2d91914176c2ace60ad5ed8c3dbe8dfb0" translate="yes" xml:space="preserve">
          <source>Message tags: &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawn&quot;&gt;spawn&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawned&quot;&gt;spawned&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt;register&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt;unregister&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_link&quot;&gt;link&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt;getting_linked&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt;getting_unlinked&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">メッセージタグ： &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawn&quot;&gt;spawn&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_spawned&quot;&gt;spawned&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_exit&quot;&gt;exit&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_register&quot;&gt;register&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unregister&quot;&gt;unregister&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_link&quot;&gt;link&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_unlink&quot;&gt;unlink&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_linked&quot;&gt;getting_linked&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;#trace_3_trace_messages_getting_unlinked&quot;&gt;getting_unlinked&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c83c1bde9d4d8aa8318863a5d51aa34ce5bfc795" translate="yes" xml:space="preserve">
          <source>Messages are delivered on a per line basis. Each line (delimited by the OS-dependent newline sequence) is delivered in a single message. The message data format is &lt;code&gt;{Flag, Line}&lt;/code&gt;, where &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;eol&lt;/code&gt; or &lt;code&gt;noeol&lt;/code&gt;, and &lt;code&gt;Line&lt;/code&gt; is the data delivered (without the newline sequence).</source>
          <target state="translated">メッセージは行ごとに配信されます。各行（OS依存の改行シーケンスで区切られている）は、単一のメッセージで配信されます。メッセージのデータ形式は &lt;code&gt;{Flag, Line}&lt;/code&gt; で、 &lt;code&gt;Flag&lt;/code&gt; は &lt;code&gt;eol&lt;/code&gt; または &lt;code&gt;noeol&lt;/code&gt; で、 &lt;code&gt;Line&lt;/code&gt; は配信されたデータです（改行シーケンスなし）。</target>
        </trans-unit>
        <trans-unit id="4efc9f43ab150329eedfc4f946099f0a5f3094d9" translate="yes" xml:space="preserve">
          <source>Messages are preceded by their length, sent in &lt;code&gt;N&lt;/code&gt; bytes, with the most significant byte first. The valid values for &lt;code&gt;N&lt;/code&gt; are 1, 2, and 4.</source>
          <target state="translated">メッセージの前には、長さが &lt;code&gt;N&lt;/code&gt; バイトで送信され、最上位バイトが最初になります。 &lt;code&gt;N&lt;/code&gt; の有効な値は1、2、および4です。</target>
        </trans-unit>
        <trans-unit id="6b07457b9a14b5fa6fa1cbfe7c24fba2d20941a5" translate="yes" xml:space="preserve">
          <source>Messages are sent to this process in the format &lt;code&gt;{http, ReplyInfo}&lt;/code&gt;.</source>
          <target state="translated">メッセージは、このプロセスに &lt;code&gt;{http, ReplyInfo}&lt;/code&gt; 形式で送信されます。</target>
        </trans-unit>
        <trans-unit id="dea0176313f64667ac747bcda6d934ed85bcd005" translate="yes" xml:space="preserve">
          <source>Messages between Erlang processes are simply valid Erlang terms. That is, they can be lists, tuples, integers, atoms, pids, and so on.</source>
          <target state="translated">Erlangプロセス間のメッセージは単純に有効なErlang用語です。つまり、リスト、タプル、整数、アトム、ピドなどです。</target>
        </trans-unit>
        <trans-unit id="43e3fbb1d87e293b330ad523caa73111b3400f23" translate="yes" xml:space="preserve">
          <source>Messages can become a part of the process heap at different times. This depends on how the process is configured. We can configure the behaviour of each process using &lt;code&gt;process_flag(message_queue_data, off_heap | on_heap)&lt;/code&gt; or we can set a default for all processes at start using the option &lt;code&gt;+hmqd&lt;/code&gt;.</source>
          <target state="translated">メッセージは、さまざまな時点でプロセスヒープの一部になる可能性があります。これは、プロセスの構成方法によって異なります。 &lt;code&gt;process_flag(message_queue_data, off_heap | on_heap)&lt;/code&gt; を使用して各プロセスの動作を構成するか、オプション &lt;code&gt;+hmqd&lt;/code&gt; を使用して開始時にすべてのプロセスのデフォルトを設定できます。</target>
        </trans-unit>
        <trans-unit id="1ba3a1c108d58aee0ff81fd9ec2d1208708c9bdb" translate="yes" xml:space="preserve">
          <source>Messages encoded before the connection has been set up may still use the &lt;code&gt;SEND&lt;/code&gt; control message. However, once a &lt;code&gt;SEND_SENDER&lt;/code&gt; or &lt;code&gt;SEND_SENDER_TT&lt;/code&gt; control message has been sent, no more &lt;code&gt;SEND&lt;/code&gt; control messages will be sent in the same direction on the connection.</source>
          <target state="translated">接続が設定される前にエンコードされたメッセージは、 &lt;code&gt;SEND&lt;/code&gt; 制御メッセージを引き続き使用できます。ただし、 &lt;code&gt;SEND_SENDER&lt;/code&gt; または &lt;code&gt;SEND_SENDER_TT&lt;/code&gt; 制御メッセージが送信されると、接続で同じ方向に送信される &lt;code&gt;SEND&lt;/code&gt; 制御メッセージはなくなります。</target>
        </trans-unit>
        <trans-unit id="21f2cc5097a001d22180191c6222e6d580784485" translate="yes" xml:space="preserve">
          <source>Messages encoded before the connection has been set up may still use the &lt;code&gt;SEND_TT&lt;/code&gt; control message. However, once a &lt;code&gt;SEND_SENDER&lt;/code&gt; or &lt;code&gt;SEND_SENDER_TT&lt;/code&gt; control message has been sent, no more &lt;code&gt;SEND_TT&lt;/code&gt; control messages will be sent in the same direction on the connection.</source>
          <target state="translated">接続が設定される前にエンコードされたメッセージは、 &lt;code&gt;SEND_TT&lt;/code&gt; 制御メッセージを使用できます。ただし、 &lt;code&gt;SEND_SENDER&lt;/code&gt; または &lt;code&gt;SEND_SENDER_TT&lt;/code&gt; 制御メッセージが送信されると、接続で同じ方向に送信される &lt;code&gt;SEND_TT&lt;/code&gt; 制御メッセージはなくなります。</target>
        </trans-unit>
        <trans-unit id="a9a00bffcae348db8ab4ea736b2a2912ab5091c8" translate="yes" xml:space="preserve">
          <source>Messages encoded before the connection has been set up may still use the non-PAYLOAD variant. However, once a PAYLOAD control message has been sent, no more non-PAYLOAD control messages will be sent in the same direction on the connection.</source>
          <target state="translated">接続がセットアップされる前にエンコードされたメッセージは、非 PAYLOAD バリアントを使用することができます。しかし、一度PAYLOAD制御メッセージが送信されると、それ以上の非PAYLOAD制御メッセージは接続上で同じ方向に送信されません。</target>
        </trans-unit>
        <trans-unit id="b450d9a68961ebef8efd8c7dece1b02f8d8dab97" translate="yes" xml:space="preserve">
          <source>Messages received from the operating system results in an user defined callback function being called. This function can do whatever filtering and formatting is necessary and then deploy any type of logging suitable for the user's application.</source>
          <target state="translated">オペレーティングシステムから受信したメッセージは、ユーザー定義のコールバック関数が呼び出されます。この関数は、必要なフィルタリングやフォーマットを行い、ユーザーのアプリケーションに適したタイプのロギングを展開することができます。</target>
        </trans-unit>
        <trans-unit id="d76ced0d32a80d8214bb32cc24e01e1631f869fe" translate="yes" xml:space="preserve">
          <source>Messages sent between Erlang nodes can sometimes be quite large. Since OTP-22 it is possible to split large messages into smaller fragments in order to allow smaller messages to be interleaved between larges messages. It is only the &lt;code&gt;message&lt;/code&gt; part of each &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#connected_nodes&quot;&gt;distributed message&lt;/a&gt;&lt;/code&gt; that may be split using fragmentation. Therefore it is recommended to use the &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#new-ctrlmessages-for-erlang-otp-22&quot;&gt; PAYLOAD control messages&lt;/a&gt;&lt;/code&gt; introduced in OTP-22.</source>
          <target state="translated">Erlangノード間で送信されるメッセージは非常に大きくなる場合があります。OTP-22以降、大きなメッセージを小さなフラグメントに分割して、小さなメッセージを大きなメッセージ間でインターリーブできるようにすることができます。フラグメンテーションを使用して分割できるのは、各 &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#connected_nodes&quot;&gt;distributed message&lt;/a&gt;&lt;/code&gt; &lt;code&gt;message&lt;/code&gt; 部分のみです。したがって、OTP-22で導入された &lt;code&gt;&lt;a href=&quot;erl_dist_protocol#new-ctrlmessages-for-erlang-otp-22&quot;&gt; PAYLOAD control messages&lt;/a&gt;&lt;/code&gt; を使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="83ae0fa23c0d7748fed32601f2608880147c1ffa" translate="yes" xml:space="preserve">
          <source>Messages that include a &lt;code&gt;WantReply&lt;/code&gt; expect the channel handling process to call &lt;code&gt;&lt;a href=&quot;ssh_connection#reply_request-4&quot;&gt; ssh_connection:reply_request/4&lt;/a&gt;&lt;/code&gt; with the boolean value of &lt;code&gt;WantReply&lt;/code&gt; as the second argument.</source>
          <target state="translated">&lt;code&gt;WantReply&lt;/code&gt; を含むメッセージは、チャネル処理プロセスが2番目の引数として &lt;code&gt;WantReply&lt;/code&gt; のブール値を使用して &lt;code&gt;&lt;a href=&quot;ssh_connection#reply_request-4&quot;&gt; ssh_connection:reply_request/4&lt;/a&gt;&lt;/code&gt; を呼び出すことを想定しています。</target>
        </trans-unit>
        <trans-unit id="7a53365e992adfd42db65c7720bf07ff4ac1814b" translate="yes" xml:space="preserve">
          <source>Messing up for subsequent test cases:</source>
          <target state="translated">後続のテストケースのために台無しにする。</target>
        </trans-unit>
        <trans-unit id="30041e23a0f72a119313b16f9b3d4df540137e77" translate="yes" xml:space="preserve">
          <source>Meta-tracing traces all processes and does not care about the process trace flags set by &lt;code&gt;erlang:trace/3&lt;/code&gt;, the trace flags are instead fixed to &lt;code&gt;[call, timestamp]&lt;/code&gt;.</source>
          <target state="translated">メタトレースはすべてのプロセスをトレースし、 &lt;code&gt;erlang:trace/3&lt;/code&gt; によって設定されたプロセストレースフラグを気にしません。トレースフラグは &lt;code&gt;[call, timestamp]&lt;/code&gt; に固定されます。</target>
        </trans-unit>
        <trans-unit id="251edc0eb5a820646bda4e103f0f007fd55321f3" translate="yes" xml:space="preserve">
          <source>Metadata</source>
          <target state="translated">Metadata</target>
        </trans-unit>
        <trans-unit id="1d674c23267ff3e893a9e1474fed16ac7f558c49" translate="yes" xml:space="preserve">
          <source>Metadata associated with one specific log event is given as the last parameter to the log macro or Logger API function when the event is issued. For example:</source>
          <target state="translated">特定のログ イベントに関連付けられたメタデータは、イベントが発行されたときに、ログ マクロまたはロガー API 関数の最後のパラメータとして与えられます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="885e65968ef7efdba81656ad741bbd6682841ebf" translate="yes" xml:space="preserve">
          <source>Metadata contains additional data associated with a log message. Logger inserts some metadata fields by default, and the client can add custom metadata in two different ways:</source>
          <target state="translated">メタデータには、ログ メッセージに関連付けられた追加データが含まれます。ロガーはデフォルトでいくつかのメタデータフィールドを挿入しますが、クライアントは2つの異なる方法でカスタムメタデータを追加することができます。</target>
        </trans-unit>
        <trans-unit id="a1e44a13044d8e9cd06618d7ce5207e1fbeec00f" translate="yes" xml:space="preserve">
          <source>Metadata for the log event.</source>
          <target state="translated">ログイベントのメタデータ。</target>
        </trans-unit>
        <trans-unit id="4342240162e294c2bc03db17fdee5ddbc87876d8" translate="yes" xml:space="preserve">
          <source>Metaprogramming in Erlang.</source>
          <target state="translated">Erlangのメタプログラミング。</target>
        </trans-unit>
        <trans-unit id="87ced016c5bb1aba95f8f208a0c630b0abd89fd8" translate="yes" xml:space="preserve">
          <source>Metaprogramming in Erlang. Merl is a more user friendly interface to the &lt;code&gt;erl_syntax&lt;/code&gt; module, making it easy both to build new ASTs from scratch and to match and decompose existing ASTs. For details that are outside the scope of Merl itself, please see the documentation of &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">Erlangでのメタプログラミング。Merlは &lt;code&gt;erl_syntax&lt;/code&gt; モジュールへのユーザーフレンドリーなインターフェイスであり、新しいASTを最初から作成することも、既存のASTを照合して分解することも簡単です。Merl自体の範囲外の詳細については、 &lt;code&gt;&lt;a href=&quot;erl_syntax&quot;&gt;erl_syntax&lt;/a&gt;&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="cc7e0e02c16756d9acee15cd9d7a7473daeb068d" translate="yes" xml:space="preserve">
          <source>Miao</source>
          <target state="translated">Miao</target>
        </trans-unit>
        <trans-unit id="1ead8ccfae61c22af5dea71102bcf319bd3b337a" translate="yes" xml:space="preserve">
          <source>Micka&amp;euml;l R&amp;eacute;mond mickael.remond@process-one.net</source>
          <target state="translated">ミカエル・レモンドmickael.remond@process-one.net</target>
        </trans-unit>
        <trans-unit id="e3161feceeebbf2efa94b967c31c3a533e827d4e" translate="yes" xml:space="preserve">
          <source>Micka&amp;euml;l R&amp;eacute;mond mickael.remond@process-one.net Richard Carlsson carlsson.richard@gmail.com</source>
          <target state="translated">ミカエル・レモンドmickael.remond@process-one.netリチャード・カールソンcarlsson.richard@gmail.com</target>
        </trans-unit>
        <trans-unit id="c51b97dfe72702f7a4db88668d6bbc27ffd18957" translate="yes" xml:space="preserve">
          <source>Microseconds</source>
          <target state="translated">Microseconds</target>
        </trans-unit>
        <trans-unit id="ad4d37efa374335ef5074617d100776dbcc4796b" translate="yes" xml:space="preserve">
          <source>Microsofts Windows SDK version 8.1 (corresponding to VC++ 12.0 and Visual Studio 2013). You'll find it here:</source>
          <target state="translated">Microsofts Windows SDKバージョン8.1(VC++12.0とVisual Studio 2013に対応)。こちらにあります。</target>
        </trans-unit>
        <trans-unit id="24a147f8ecf3e3ea0e4e34c911ef22efe0ff4546" translate="yes" xml:space="preserve">
          <source>Microstate accounting can be used to measure how much time the Erlang runtime system spends doing various tasks. It is designed to be as lightweight as possible, but some overhead exists when this is enabled. Microstate accounting is meant to be a profiling tool to help finding performance bottlenecks. To &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt;/&lt;code&gt;reset&lt;/code&gt; microstate accounting, use system flag &lt;code&gt;&lt;a href=&quot;#system_flag_microstate_accounting&quot;&gt; microstate_accounting&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マイクロステートアカウンティングは、Erlangランタイムシステムがさまざまなタスクの実行に費やす時間を測定するために使用できます。可能な限り軽量になるように設計されていますが、これを有効にするとオーバーヘッドが発生します。マイクロステートアカウンティングは、パフォーマンスのボトルネックを見つけるのに役立つプロファイリングツールとなることを目的としています。マイクロステートアカウンティングを &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; / &lt;code&gt;reset&lt;/code&gt; するには、システムフラグ &lt;code&gt;&lt;a href=&quot;#system_flag_microstate_accounting&quot;&gt; microstate_accounting&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5fe50fa08740afc3a20f9d3d442ba75955fee423" translate="yes" xml:space="preserve">
          <source>Microstate accounting can be used to measure how much time the Erlang runtime system spends doing various tasks. It is designed to be as lightweight as possible, but some overhead exists when this is enabled. Microstate accounting is meant to be a profiling tool to help finding performance bottlenecks. To &lt;code&gt;start&lt;/code&gt;/&lt;code&gt;stop&lt;/code&gt;/&lt;code&gt;reset&lt;/code&gt; microstate accounting, use system flag &lt;code&gt;&lt;a href=&quot;#system_flag_microstate_accounting&quot;&gt;microstate_accounting&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">マイクロステートアカウンティングを使用して、Erlangランタイムシステムがさまざまなタスクの実行に費やした時間を測定できます。可能な限り軽量になるように設計されていますが、これを有効にするとオーバーヘッドが発生します。マイクロステートアカウンティングは、パフォーマンスのボトルネックを見つけるのに役立つプロファイリングツールであることを意図しています。マイクロステートアカウンティングを &lt;code&gt;start&lt;/code&gt; / &lt;code&gt;stop&lt;/code&gt; / &lt;code&gt;reset&lt;/code&gt; するには、システムフラグ &lt;code&gt;&lt;a href=&quot;#system_flag_microstate_accounting&quot;&gt;microstate_accounting&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="5bc93878c3ba17340102ebf0f740f8c3302add0b" translate="yes" xml:space="preserve">
          <source>Milliseconds</source>
          <target state="translated">Milliseconds</target>
        </trans-unit>
        <trans-unit id="fb85391c2c8505ba20e51e3d8c6b33571699f58c" translate="yes" xml:space="preserve">
          <source>Min detail level deactivates tracing of calls to &lt;code&gt;et:trace_me/4,5&lt;/code&gt;</source>
          <target state="translated">最小詳細レベルは &lt;code&gt;et:trace_me/4,5&lt;/code&gt; への呼び出しのトレースを無効にします</target>
        </trans-unit>
        <trans-unit id="68daf61d5874aaae0cf757e3faf2f324a6515679" translate="yes" xml:space="preserve">
          <source>MinBinVHeapSize :: integer() &amp;gt;= 1}</source>
          <target state="translated">MinBinVHeapSize :: integer（）&amp;gt; = 1}</target>
        </trans-unit>
        <trans-unit id="4fed7661f4d42301d68ec8563e610bd36ddbbfe8" translate="yes" xml:space="preserve">
          <source>MinHeapSize :: integer() &amp;gt;= 1}</source>
          <target state="translated">MinHeapSize :: integer（）&amp;gt; = 1}</target>
        </trans-unit>
        <trans-unit id="d75c514e27a03879ebcd47b9d5dc273dcad02469" translate="yes" xml:space="preserve">
          <source>Minimal Example</source>
          <target state="translated">最小限の例</target>
        </trans-unit>
        <trans-unit id="f25a88ac3eb732d57dc4ba0d3e990489173fb9aa" translate="yes" xml:space="preserve">
          <source>Minimizes the representation of all entries in the list. This is equivalent to &lt;code&gt;[property(P) || P &amp;lt;- ListIn]&lt;/code&gt;.</source>
          <target state="translated">リスト内のすべてのエントリの表現を最小化します。これは、 &lt;code&gt;[property(P) || P &amp;lt;- ListIn]&lt;/code&gt; と同等です。P &amp;lt;-ListIn]。</target>
        </trans-unit>
        <trans-unit id="baa687b4835396d9bf1f310f2267dc46209a08e5" translate="yes" xml:space="preserve">
          <source>Miscellaneous API functions</source>
          <target state="translated">その他のAPI機能</target>
        </trans-unit>
        <trans-unit id="32e23d465d0629b84d76e5f09fb507ede0cb1461" translate="yes" xml:space="preserve">
          <source>Miscellaneous flags:</source>
          <target state="translated">雑多なフラグ。</target>
        </trans-unit>
        <trans-unit id="3e70a7515b00e7c226a15edab218fd1f4dd573e0" translate="yes" xml:space="preserve">
          <source>Miscellaneous utility functions to be used when implementing Erlang web server API modules.</source>
          <target state="translated">ErlangのWebサーバAPIモジュールを実装する際に使用するその他のユーティリティ関数。</target>
        </trans-unit>
        <trans-unit id="e28720b55817fffaed736aa55d8047afa4cf1137" translate="yes" xml:space="preserve">
          <source>Missing permission for reading the file or searching one of the parent directories.</source>
          <target state="translated">ファイルの読み込みや親ディレクトリの検索の権限がありません。</target>
        </trans-unit>
        <trans-unit id="7aa38c37efdf79a5acef9cef7e555976f20e2ad9" translate="yes" xml:space="preserve">
          <source>Missing permission for reading the file, or for searching one of the parent directories.</source>
          <target state="translated">ファイルの読み込み、または親ディレクトリの一つを検索するためのパーミッションがありません。</target>
        </trans-unit>
        <trans-unit id="9efd7c6d83c7981adb874ec7297e295c58042b1f" translate="yes" xml:space="preserve">
          <source>Missing permission for the directory or one of its parents.</source>
          <target state="translated">ディレクトリまたはその親のいずれかのパーミッションがありません。</target>
        </trans-unit>
        <trans-unit id="3baa40bad1885eea32466c0be3b003163935955e" translate="yes" xml:space="preserve">
          <source>Missing permission for the file or one of its parents.</source>
          <target state="translated">ファイルまたはその親のいずれかが許可されていません。</target>
        </trans-unit>
        <trans-unit id="da94f56d96d2d085bea8dd51d423535445ba4d6f" translate="yes" xml:space="preserve">
          <source>Missing permission for writing the file or searching one of the parent directories.</source>
          <target state="translated">ファイルの書き込みや親ディレクトリの検索の権限がありません。</target>
        </trans-unit>
        <trans-unit id="061e8bb20890cbf13271d93b5804b980c9a0f90b" translate="yes" xml:space="preserve">
          <source>Missing read or write permissions for the parent directories of &lt;code&gt;Existing&lt;/code&gt; or &lt;code&gt;New&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Existing&lt;/code&gt; または &lt;code&gt;New&lt;/code&gt; の親ディレクトリに対する読み取りまたは書き込み権限がありません。</target>
        </trans-unit>
        <trans-unit id="6b9b56e3be8c9130a50f7b4b55f58db626553ba0" translate="yes" xml:space="preserve">
          <source>Missing read or write permissions for the parent directories of &lt;code&gt;Source&lt;/code&gt; or &lt;code&gt;Destination&lt;/code&gt;. On some platforms, this error is given if either &lt;code&gt;Source&lt;/code&gt; or &lt;code&gt;Destination&lt;/code&gt; is open.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; または &lt;code&gt;Destination&lt;/code&gt; の親ディレクトリに対する読み取りまたは書き込み権限がありません。一部のプラットフォームでは、このエラーは、 &lt;code&gt;Source&lt;/code&gt; または &lt;code&gt;Destination&lt;/code&gt; いずれかが開いている場合に発生します。</target>
        </trans-unit>
        <trans-unit id="28336423496ccaf52c7936f6b41a6f9ad88604eb" translate="yes" xml:space="preserve">
          <source>Missing read permission for one of the parents of the current directory.</source>
          <target state="translated">カレントディレクトリの親のうちの1つに読み取り権限がありません。</target>
        </trans-unit>
        <trans-unit id="d5005e02795d55eb02a3f6a112157b99bce1e935" translate="yes" xml:space="preserve">
          <source>Missing search or write permissions for &lt;code&gt;Dir&lt;/code&gt; or one of its parent directories.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; またはその親ディレクトリの1つに対する検索または書き込み権限がありません。</target>
        </trans-unit>
        <trans-unit id="dc45e80a5b65727123e0ebc0703fe14768293b68" translate="yes" xml:space="preserve">
          <source>Missing search or write permissions for the parent directories of &lt;code&gt;Dir&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; の親ディレクトリに対する検索または書き込み権限がありません。</target>
        </trans-unit>
        <trans-unit id="dc1c55c040e5f0948f15231f73c916f3526d9f6e" translate="yes" xml:space="preserve">
          <source>Missing search permission for one of the parent directories of the file.</source>
          <target state="translated">ファイルの親ディレクトリの一つに検索権限がありません。</target>
        </trans-unit>
        <trans-unit id="3450bbc34d200da9fb5b92b5c6f6571a71324a0a" translate="yes" xml:space="preserve">
          <source>Mnesia As Authentication Database</source>
          <target state="translated">認証データベースとしてのMnesia</target>
        </trans-unit>
        <trans-unit id="3e14767dc1dedaea0f193b494b8754d578aec896" translate="yes" xml:space="preserve">
          <source>Mnesia contains the following features that combine to produce a fault-tolerant, distributed DBMS written in Erlang:</source>
          <target state="translated">Mnesiaには以下の機能が含まれており、Erlangで書かれたフォールトトレラントな分散DBMSを生成します。</target>
        </trans-unit>
        <trans-unit id="2d270fde8f4afa30deacf2e5ac64258dc95380f4" translate="yes" xml:space="preserve">
          <source>Mnesia forwards calls to the following functions:</source>
          <target state="translated">Mnesiaは以下の関数に呼び出しを転送します。</target>
        </trans-unit>
        <trans-unit id="e89dea5925db30b38ca5a4a01818590924fb2279" translate="yes" xml:space="preserve">
          <source>Mnesia has no special counter records. However, records of the form &lt;code&gt;{Tab, Key, Integer}&lt;/code&gt; can be used as (possibly disc-resident) counters when &lt;code&gt;Tab&lt;/code&gt; is a &lt;code&gt;set&lt;/code&gt;. This function updates a counter with a positive or negative number. However, counters can never become less than zero. There are two significant differences between this function and the action of first reading the record, performing the arithmetics, and then writing the record:</source>
          <target state="translated">Mnesiaには特別なカウンターレコードはありません。ただし、 &lt;code&gt;{Tab, Key, Integer}&lt;/code&gt; の形式のレコードは、 &lt;code&gt;Tab&lt;/code&gt; が &lt;code&gt;set&lt;/code&gt; の場合、（ディスク常駐の）カウンターとして使用できます。この関数は、正または負の数でカウンターを更新します。ただし、カウンターがゼロ未満になることはありません。この関数と、最初にレコードを読み取り、算術を実行し、次にレコードを書き込むアクションには、2つの大きな違いがあります。</target>
        </trans-unit>
        <trans-unit id="2a2c5988b423c05d899728a690476666f426fc19" translate="yes" xml:space="preserve">
          <source>Mnesia is a multiuser distributed DBMS specially made for industrial telecommunications applications written in Erlang, which is also the intended target language. Mnesia tries to address all the data management issues required for typical telecommunications systems. It has a number of features that are not normally found in traditional databases.</source>
          <target state="translated">Mnesiaは、産業用通信アプリケーションのために特別に作られたマルチユーザ分散DBMSで、ターゲット言語でもあるErlangで書かれています。Mnesiaは、典型的な電気通信システムに必要なデータ管理の問題をすべて解決しようとしています。従来のデータベースには通常見られない多くの機能を持っています。</target>
        </trans-unit>
        <trans-unit id="a0af7e030b61efa3af7bcba4659fb088190690f3" translate="yes" xml:space="preserve">
          <source>Mnesia is also interesting because of its tight coupling to Erlang, thus almost turning Erlang into a database programming language. This has many benefits, the foremost is that the impedance mismatch between the data format used by the DBMS and the data format used by the programming language, which is used to manipulate the data, completely disappears.</source>
          <target state="translated">Mnesiaはまた、Erlangとの緊密な結合により、Erlangをほとんどデータベースプログラミング言語にしてしまうという点でも興味深い。これには多くの利点がありますが、何よりもDBMSが使用するデータフォーマットと、データを操作するために使用するプログラミング言語が使用するデータフォーマットとの間のインピーダンスの不一致が完全になくなることです。</target>
        </trans-unit>
        <trans-unit id="44aa259738f2f02d017fee9119158e2bcbe7c0c2" translate="yes" xml:space="preserve">
          <source>Mnesia is designed with the typical data management problems of telecommunications applications in mind. This sets Mnesia apart from most other DBMS. Hence Mnesia combines many concepts found in traditional databases such as transactions and queries with concepts found in data management systems for telecommunications applications, for example:</source>
          <target state="translated">Mnesiaは、電気通信アプリケーションの典型的なデータ管理の問題を念頭に置いて設計されています。これが他のほとんどのDBMSとは一線を画しています。そのため、Mnesiaは、トランザクションやクエリなどの従来のデータベースに見られる多くの概念を、例えば電気通信アプリケーション用のデータ管理システムに見られる概念と組み合わせています。</target>
        </trans-unit>
        <trans-unit id="df09d370f13b24dc32d72bd352185aa6d3460032" translate="yes" xml:space="preserve">
          <source>Mnesia is implemented in, and tightly connected to Erlang. It provides the functionality that is necessary for the implementation of fault tolerant telecommunications systems.</source>
          <target state="translated">MnesiaはErlangで実装されており、Erlangと密接に接続されています。フォールトトレラント通信システムの実装に必要な機能を提供します。</target>
        </trans-unit>
        <trans-unit id="fc6fa382209f2c0fc7fcb32177c787306e164f05" translate="yes" xml:space="preserve">
          <source>Mnesia is not as appropriate with the following types of applications:</source>
          <target state="translated">以下のような用途では、ムネジアはあまり適切ではありません。</target>
        </trans-unit>
        <trans-unit id="845e3498f5ba4596f8fba48d33cc6a74bac4d6f0" translate="yes" xml:space="preserve">
          <source>Mnesia is started on a node. &lt;code&gt;Node&lt;/code&gt; is the node name. By default this event is ignored.</source>
          <target state="translated">Mnesiaはノード上で開始されます。 &lt;code&gt;Node&lt;/code&gt; はノード名です。デフォルトでは、このイベントは無視されます。</target>
        </trans-unit>
        <trans-unit id="b3e1fa53e8464658bfcdc7fbdecb69fa1444e78e" translate="yes" xml:space="preserve">
          <source>Mnesia is stopped on a node. &lt;code&gt;Node&lt;/code&gt; is the node name. By default this event is ignored.</source>
          <target state="translated">Mnesiaはノードで停止しています。 &lt;code&gt;Node&lt;/code&gt; はノード名です。デフォルトでは、このイベントは無視されます。</target>
        </trans-unit>
        <trans-unit id="7c1dcaece45ef92fbe42e06c5252abce132af739" translate="yes" xml:space="preserve">
          <source>Mnesia reads the following application configuration parameters:</source>
          <target state="translated">Mnesiaは、以下のアプリケーション設定パラメータを読み込みます。</target>
        </trans-unit>
        <trans-unit id="0726b2991715ca8d77350ad4cbf6cf39dd4a573d" translate="yes" xml:space="preserve">
          <source>Mnesia startup is asynchronous. The function call &lt;code&gt;mnesia:start()&lt;/code&gt; returns the atom &lt;code&gt;ok&lt;/code&gt; and then starts to initialize the different tables. Depending on the size of the database, this can take some time, and the application programmer must wait for the tables that the application needs before they can be used. This is achieved by using the function &lt;code&gt;mnesia:wait_for_tables/2&lt;/code&gt;.</source>
          <target state="translated">Mnesiaの起動は非同期です。関数呼び出し &lt;code&gt;mnesia:start()&lt;/code&gt; は、アトム &lt;code&gt;ok&lt;/code&gt; を返し、さまざまなテーブルの初期化を開始します。データベースのサイズによっては、これには時間がかかる場合があり、アプリケーションプログラマーは、アプリケーションが必要とするテーブルを使用する前に待機する必要があります。これは、関数 &lt;code&gt;mnesia:wait_for_tables/2&lt;/code&gt; を使用して実現されます。</target>
        </trans-unit>
        <trans-unit id="6d914dda751476720c28b61ae3bd0ff8b42cfeb7" translate="yes" xml:space="preserve">
          <source>Mode = &lt;code&gt;active | passive&lt;/code&gt;</source>
          <target state="translated">モード= &lt;code&gt;active | passive&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="99f50e7814fad5179000cd91fa4e8ee4f72c44ef" translate="yes" xml:space="preserve">
          <source>Mode for running multiple independent test sessions in parallel with central control and configuration</source>
          <target state="translated">複数の独立したテストセッションを中央制御と設定で並行して実行するためのモード</target>
        </trans-unit>
        <trans-unit id="2620d89dab477718fe6a6ecadb48be52562f1585" translate="yes" xml:space="preserve">
          <source>Modi</source>
          <target state="translated">Modi</target>
        </trans-unit>
        <trans-unit id="6de26bd1e99650e13b775d6b454183fe80a5672b" translate="yes" xml:space="preserve">
          <source>Modification of a value causes it to not be representable internally in the VM. For example, incrementation of a counter past the largest integer representable.</source>
          <target state="translated">値を変更すると、VM内で内部的に表現できなくなります。例えば、カウンタのインクリメントが表現可能な最大の整数を超えた場合などです。</target>
        </trans-unit>
        <trans-unit id="347a94d0029aefe56171fcf91033436e5c682c85" translate="yes" xml:space="preserve">
          <source>Modified timing affects the following:</source>
          <target state="translated">タイミングを変更した場合、以下のような影響があります。</target>
        </trans-unit>
        <trans-unit id="bad23ea5529c0f8c6c8d290e83637676c692c2dd" translate="yes" xml:space="preserve">
          <source>Modifier letter</source>
          <target state="translated">文字の変更</target>
        </trans-unit>
        <trans-unit id="253879158d55c56d709e1481da82674291cad63a" translate="yes" xml:space="preserve">
          <source>Modifier symbol</source>
          <target state="translated">記号の変更</target>
        </trans-unit>
        <trans-unit id="a0cfb5739548a4dc910c1db16690c1ef42b6dcf6" translate="yes" xml:space="preserve">
          <source>Modifies the &lt;code&gt;erl_parse&lt;/code&gt; tree &lt;code&gt;Abstr&lt;/code&gt; by applying &lt;code&gt;Fun&lt;/code&gt; on each collection of annotations of the nodes of the &lt;code&gt;erl_parse&lt;/code&gt; tree, while at the same time updating an accumulator. The first call to &lt;code&gt;Fun&lt;/code&gt; has &lt;code&gt;AccIn&lt;/code&gt; as second argument, the returned accumulator &lt;code&gt;AccOut&lt;/code&gt; is passed to the next call, and so on. The modified &lt;code&gt;erl_parse&lt;/code&gt; tree and the final value of the accumulator are returned. The &lt;code&gt;erl_parse&lt;/code&gt; tree is traversed in a depth-first, left-to-right fashion.</source>
          <target state="translated">修正 &lt;code&gt;erl_parse&lt;/code&gt; ツリー &lt;code&gt;Abstr&lt;/code&gt; 適用して &lt;code&gt;Fun&lt;/code&gt; のノードの注釈の各コレクションに &lt;code&gt;erl_parse&lt;/code&gt; のと同時に、アキュムレータを更新している間、木。最初の呼び出し &lt;code&gt;Fun&lt;/code&gt; あり &lt;code&gt;AccIn&lt;/code&gt; をアキュムレータ返され、2番目の引数として &lt;code&gt;AccOut&lt;/code&gt; は、次の呼び出しに渡された、というようにしています。変更された &lt;code&gt;erl_parse&lt;/code&gt; ツリーとアキュムレータの最終値が返されます。 &lt;code&gt;erl_parse&lt;/code&gt; のツリーは深さ優先、左から右への方法で横断されます。</target>
        </trans-unit>
        <trans-unit id="ada6b07489b4caa86b644d594e210d3d7df73a75" translate="yes" xml:space="preserve">
          <source>Modifies the &lt;code&gt;erl_parse&lt;/code&gt; tree &lt;code&gt;Abstr&lt;/code&gt; by applying &lt;code&gt;Fun&lt;/code&gt; on each collection of annotations of the nodes of the &lt;code&gt;erl_parse&lt;/code&gt; tree. The &lt;code&gt;erl_parse&lt;/code&gt; tree is traversed in a depth-first, left-to-right fashion.</source>
          <target state="translated">修正 &lt;code&gt;erl_parse&lt;/code&gt; ツリー &lt;code&gt;Abstr&lt;/code&gt; 適用して &lt;code&gt;Fun&lt;/code&gt; のノードの注釈の各コレクションに &lt;code&gt;erl_parse&lt;/code&gt; の木。 &lt;code&gt;erl_parse&lt;/code&gt; のツリーは深さ優先、左から右への方法で横断されます。</target>
        </trans-unit>
        <trans-unit id="d6767e7b3024caf3c0392eb069c62606173a9f1a" translate="yes" xml:space="preserve">
          <source>Modifies the filename of the annotations Anno.</source>
          <target state="translated">アノテーションのファイル名を変更します。</target>
        </trans-unit>
        <trans-unit id="f5817a19c5f89b9a4e372f141f435c1a42a9dd33" translate="yes" xml:space="preserve">
          <source>Modifies the generated marker of the annotations Anno.</source>
          <target state="translated">アノテーションの生成されたマーカーを変更します。</target>
        </trans-unit>
        <trans-unit id="037defcfe58535f15797aebbd1fbb203e7cd9af8" translate="yes" xml:space="preserve">
          <source>Modifies the line of the annotations Anno.</source>
          <target state="translated">アノテーションの行を変更します。</target>
        </trans-unit>
        <trans-unit id="c6cc4351008b5ab2535c804b7cd295d8836544e6" translate="yes" xml:space="preserve">
          <source>Modifies the list of algorithms to use in the algorithm negotiation. The modifications are applied after the option &lt;code&gt;preferred_algorithms&lt;/code&gt; (if existing) is applied.</source>
          <target state="translated">アルゴリズムのネゴシエーションで使用するアルゴリズムのリストを変更します。変更は、 &lt;code&gt;preferred_algorithms&lt;/code&gt; （存在する場合）オプションが適用された後に適用されます。</target>
        </trans-unit>
        <trans-unit id="c1311f97ce347997edad775a69d938fac98b1ab7" translate="yes" xml:space="preserve">
          <source>Modifies the location of the annotations Anno.</source>
          <target state="translated">アノテーションの位置を変更します。</target>
        </trans-unit>
        <trans-unit id="cf1b78ca3bb67cc73d9a5ef2e74df6aa835b463e" translate="yes" xml:space="preserve">
          <source>Modifies the record marker of the annotations Anno.</source>
          <target state="translated">アノテーションのレコードマーカーを変更します。</target>
        </trans-unit>
        <trans-unit id="7eb7754f43a795536f0ab7aea723cfd8a2dcf954" translate="yes" xml:space="preserve">
          <source>Modifies the text of the annotations Anno.</source>
          <target state="translated">アノテーションのテキストを変更します。</target>
        </trans-unit>
        <trans-unit id="fad6e92bd8f724516530123632d526536ce733e0" translate="yes" xml:space="preserve">
          <source>Modify PATH and other environment variables so that all these tools are runnable from a bash shell. Still standing in &lt;code&gt;$ERL_TOP&lt;/code&gt;, issue the following commands (for 32-bit Windows, remove the x64 from the first row and change &lt;code&gt;otp_win64_21&lt;/code&gt; to &lt;code&gt;otp_win32_21&lt;/code&gt; on the last row):</source>
          <target state="translated">これらすべてのツールがbashシェルから実行できるように、PATHおよびその他の環境変数を変更します。それでもに立っ &lt;code&gt;$ERL_TOP&lt;/code&gt; （32ビットWindows用に、最初の行からのx64を削除し、変更するには、次のコマンドを発行し、 &lt;code&gt;otp_win64_21&lt;/code&gt; に &lt;code&gt;otp_win32_21&lt;/code&gt; 最後の行に）：</target>
        </trans-unit>
        <trans-unit id="ba5f42ab3559a652255f5e966c07cfbd4d94e9fe" translate="yes" xml:space="preserve">
          <source>Modify PATH and other environment variables so that all these tools are runnable from a bash shell. Still standing in &lt;code&gt;$ERL_TOP&lt;/code&gt;, issue the following commands (for 32-bit Windows, remove the x64 from the first row and change &lt;code&gt;otp_win64_23&lt;/code&gt; to &lt;code&gt;otp_win32_23&lt;/code&gt; on the last row):</source>
          <target state="translated">これらすべてのツールがbashシェルから実行できるように、PATHおよびその他の環境変数を変更します。 &lt;code&gt;$ERL_TOP&lt;/code&gt; に立ったまま、次のコマンドを発行します（32ビットWindowsの場合、最初の行からx64を削除し、最後の行で &lt;code&gt;otp_win64_23&lt;/code&gt; を &lt;code&gt;otp_win32_23&lt;/code&gt; に変更します）。</target>
        </trans-unit>
        <trans-unit id="12f926fde51df220b3a44737fd7a8d3f5f5cf650" translate="yes" xml:space="preserve">
          <source>Modify an entry.</source>
          <target state="translated">エントリを修正します。</target>
        </trans-unit>
        <trans-unit id="10f726edf41c57d1e88f9e6b3584066a593e9aea" translate="yes" xml:space="preserve">
          <source>Modify the DN of an entry. &lt;code&gt;DeleteOldRDN&lt;/code&gt; indicates whether the current RDN should be removed from the attribute list after the after operation. &lt;code&gt;NewSupDN&lt;/code&gt; is the new parent that the RDN shall be moved to. If the old parent should remain as parent, &lt;code&gt;NewSupDN&lt;/code&gt; shall be &quot;&quot;.</source>
          <target state="translated">エントリのDNを変更します。 &lt;code&gt;DeleteOldRDN&lt;/code&gt; は、after操作の後に現在のRDNを属性リストから削除する必要があるかどうかを示します。 &lt;code&gt;NewSupDN&lt;/code&gt; は、RDNの移動先となる新しい親です。古い親を親のままにする必要がある場合、 &lt;code&gt;NewSupDN&lt;/code&gt; は &quot;&quot;になります。</target>
        </trans-unit>
        <trans-unit id="1acf68e46d209b11d8d1dd169940e50cad8dd506" translate="yes" xml:space="preserve">
          <source>Modify the DN of an entry. &lt;code&gt;DeleteOldRDN&lt;/code&gt; indicates whether the current RDN should be removed from the attribute list after the operation. &lt;code&gt;NewSupDN&lt;/code&gt; is the new parent that the RDN shall be moved to. If the old parent should remain as parent, &lt;code&gt;NewSupDN&lt;/code&gt; shall be &quot;&quot;.</source>
          <target state="translated">エントリのDNを変更します。 &lt;code&gt;DeleteOldRDN&lt;/code&gt; は、操作後に現在のRDNを属性リストから削除する必要があるかどうかを示します。 &lt;code&gt;NewSupDN&lt;/code&gt; は、RDNの移動先となる新しい親です。古い親を親のままにする必要がある場合、 &lt;code&gt;NewSupDN&lt;/code&gt; は「」になります。</target>
        </trans-unit>
        <trans-unit id="aaa722d609855294fcc06f9f555621df06ec84a5" translate="yes" xml:space="preserve">
          <source>Modify the default handler to only print errors and more severe log events to &quot;log/erlang.log&quot;, and add another handler to print all log events to &quot;log/debug.log&quot;.</source>
          <target state="translated">エラーやより深刻なログイベントのみを &quot;log/erlang.log &quot;に表示するようにデフォルトのハンドラを変更し、すべてのログイベントを &quot;log/debug.log &quot;に表示するように別のハンドラを追加しました。</target>
        </trans-unit>
        <trans-unit id="d3fd275091bd2e943ed17a3e09212992146dc33a" translate="yes" xml:space="preserve">
          <source>Modify the default handler to print each log event as a single line:</source>
          <target state="translated">各ログイベントを1行で表示するようにデフォルトのハンドラを変更します。</target>
        </trans-unit>
        <trans-unit id="dd1a86ac0a2c106289b6452634be890061d7e0ee" translate="yes" xml:space="preserve">
          <source>Modify the default handler to print the pid of the logging process for each log event:</source>
          <target state="translated">デフォルトのハンドラを変更して、各ログイベントのロギングプロセスの pid を表示するようにします。</target>
        </trans-unit>
        <trans-unit id="78a2b877311ab0e1542d92e5d0d77e8835127859" translate="yes" xml:space="preserve">
          <source>Modify the default handler to print to a file instead of &lt;code&gt;standard_io&lt;/code&gt;:</source>
          <target state="translated">&lt;code&gt;standard_io&lt;/code&gt; の代わりにファイルに出力するようにデフォルトのハンドラーを変更します。</target>
        </trans-unit>
        <trans-unit id="60ff3ee60fb042d23c742fd31feed7fec7ed6a1c" translate="yes" xml:space="preserve">
          <source>Modify the password of a user.</source>
          <target state="translated">ユーザーのパスワードを変更します。</target>
        </trans-unit>
        <trans-unit id="78971b16f8399500c31431d1ca9618f6dee87669" translate="yes" xml:space="preserve">
          <source>Modify the password of a user. See &lt;code&gt;&lt;a href=&quot;#modify_password-4&quot;&gt;modify_password/4&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ユーザーのパスワードを変更します。 &lt;code&gt;&lt;a href=&quot;#modify_password-4&quot;&gt;modify_password/4&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="51b459ec8aabe598314683815cd6576876569d8f" translate="yes" xml:space="preserve">
          <source>Modifying answers is the responsibility of the user in callbacks from diameter.</source>
          <target state="translated">回答の修正は、直径からのコールバックではユーザーの責任となります。</target>
        </trans-unit>
        <trans-unit id="b8ff02892916ff59f7fbd4e617fccd01f6bca576" translate="yes" xml:space="preserve">
          <source>Module</source>
          <target state="translated">Module</target>
        </trans-unit>
        <trans-unit id="e38d402d9b28b267f7bbb774745d5b1326cac05a" translate="yes" xml:space="preserve">
          <source>Module :: module(),</source>
          <target state="translated">モジュール ::module()。</target>
        </trans-unit>
        <trans-unit id="e2422bff0b69502b127f4dbc4235fb67ea1f739d" translate="yes" xml:space="preserve">
          <source>Module ::= Atom</source>
          <target state="translated">モジュール ::=アトム</target>
        </trans-unit>
        <trans-unit id="7da910aa1163387303b43f2f30ab78aed84ec504" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;&lt;a href=&quot;ssh_client_key_api&quot;&gt;ssh_client_key_api&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;&lt;a href=&quot;ssh_client_key_api&quot;&gt;ssh_client_key_api&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="734c7672bf31a9ad24405d2c26dfc8c63ce96e2a" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;&lt;a href=&quot;ssh_server_key_api&quot;&gt;ssh_server_key_api&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">モジュール &lt;code&gt;&lt;a href=&quot;ssh_server_key_api&quot;&gt;ssh_server_key_api&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d5bda4d30c8d6fa83505f2d8e9d0cca830b01ddf" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;multitrace&lt;/code&gt; in directory &lt;code&gt;src&lt;/code&gt; of the Observer application provides a small tool with three possible trace settings. The trace messages are written to binary files, which can be formatted with function &lt;code&gt;multitrace:format/1,2&lt;/code&gt;:</source>
          <target state="translated">Observerアプリケーションのディレクトリ &lt;code&gt;src&lt;/code&gt; にあるモジュール &lt;code&gt;multitrace&lt;/code&gt; は、3つの可能なトレース設定を持つ小さなツールを提供します。トレースメッセージはバイナリファイルに書き込まれます。このファイルは、関数 &lt;code&gt;multitrace:format/1,2&lt;/code&gt; でフォーマットできます。</target>
        </trans-unit>
        <trans-unit id="fadc79bb4f4079275ed96cbc52aaafb49fe144c9" translate="yes" xml:space="preserve">
          <source>Module &lt;code&gt;ttb&lt;/code&gt; is the interface to all functions in Trace Tool Builder.</source>
          <target state="translated">モジュール &lt;code&gt;ttb&lt;/code&gt; は、Trace Tool Builderのすべての関数へのインターフェースです。</target>
        </trans-unit>
        <trans-unit id="0f51d8b77d3dc630a64fa03791646f65e006ef89" translate="yes" xml:space="preserve">
          <source>Module Dependencies</source>
          <target state="translated">モジュールの依存関係</target>
        </trans-unit>
        <trans-unit id="b1299646aab374780f3464f47be41a7599458cc8" translate="yes" xml:space="preserve">
          <source>Module Edges. All module calls.</source>
          <target state="translated">モジュールエッジ。すべてのモジュールの呼び出し。</target>
        </trans-unit>
        <trans-unit id="25c39cd87ce1e8902744b9d921475fb58d5d669b" translate="yes" xml:space="preserve">
          <source>Module Menu</source>
          <target state="translated">モジュールメニュー</target>
        </trans-unit>
        <trans-unit id="ced0e862b16bd4e8e4a82b06efe646e55fe1c54e" translate="yes" xml:space="preserve">
          <source>Module Summary</source>
          <target state="translated">モジュールの概要</target>
        </trans-unit>
        <trans-unit id="4de0a6a0634d489b9158f70004696bcc4b277613" translate="yes" xml:space="preserve">
          <source>Module and application names are atoms, while file and directory names are strings. For backward compatibility reasons, some functions accept both strings and atoms, but a future release will probably only allow the arguments that are documented.</source>
          <target state="translated">モジュール名とアプリケーション名はアトム、ファイル名とディレクトリ名は文字列です。後方互換性の理由から、いくつかの関数は文字列とアトムの両方を受け入れていますが、将来のリリースではおそらくドキュメント化されている引数のみを許可することになるでしょう。</target>
        </trans-unit>
        <trans-unit id="98d340d054026300c96f6d0c3d9034ee4899cc53" translate="yes" xml:space="preserve">
          <source>Module atomics was introduced in OTP 21.2.</source>
          <target state="translated">モジュールアトミックはOTP 21.2で導入されました。</target>
        </trans-unit>
        <trans-unit id="53bcb5e4dbe6774226d92c1d8796a8dd249ddb9a" translate="yes" xml:space="preserve">
          <source>Module attributes for the current code. This field is decoded when looked at by the Crashdump Viewer tool.</source>
          <target state="translated">現在のコードのモジュール属性。このフィールドは、Crashdump Viewer ツールで見るとデコードされます。</target>
        </trans-unit>
        <trans-unit id="f7f9e0f5b07f095dde5495f6ff4abc79cb69752f" translate="yes" xml:space="preserve">
          <source>Module attributes for the old code, if any. This field is decoded when looked at by the Crashdump Viewer tool.</source>
          <target state="translated">古いコードのモジュール属性。このフィールドは、Crashdump Viewer ツールで見たときにデコードされます。</target>
        </trans-unit>
        <trans-unit id="e3a2b561ade9a1dd5f8967dfaccdbb1ed9cc9dd4" translate="yes" xml:space="preserve">
          <source>Module binary was introduced in OTP R14B.</source>
          <target state="translated">OTP R14Bでモジュールバイナリが導入されました。</target>
        </trans-unit>
        <trans-unit id="42bc5742ba4cf708fc095b36dac3c3d69cf85223" translate="yes" xml:space="preserve">
          <source>Module counters was introduced in OTP 21.2.</source>
          <target state="translated">OTP 21.2でモジュールカウンタが導入されました。</target>
        </trans-unit>
        <trans-unit id="d300479faeca730c8a2edff00ae488f9dbd90edc" translate="yes" xml:space="preserve">
          <source>Module ct_hooks was introduced in OTP R14B02.</source>
          <target state="translated">ct_hooksモジュールがOTP R14B02で導入されました。</target>
        </trans-unit>
        <trans-unit id="d8654aa3f69b8803429d2756555ab92f9a06f3f2" translate="yes" xml:space="preserve">
          <source>Module ct_netconfc was introduced in OTP R15B02.</source>
          <target state="translated">OTP R15B02にct_netconfcモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="bb8f670cf7ca3b5196482b7892cd895e28618601" translate="yes" xml:space="preserve">
          <source>Module ct_property_test was introduced in OTP 17.3.</source>
          <target state="translated">ct_property_testモジュールはOTP 17.3で導入されました。</target>
        </trans-unit>
        <trans-unit id="cd1985927abe27a2940645bdcf2c01634f896588" translate="yes" xml:space="preserve">
          <source>Module ct_slave was introduced in OTP R14B.</source>
          <target state="translated">ct_slaveモジュールはOTP R14Bで導入されました。</target>
        </trans-unit>
        <trans-unit id="71757788af33c89da2724ac0be59def60e579311" translate="yes" xml:space="preserve">
          <source>Module ct_testspec was introduced in OTP 19.3.</source>
          <target state="translated">ct_testspecモジュールはOTP 19.3で導入されました。</target>
        </trans-unit>
        <trans-unit id="9ec0fffee38c98db4b9f15f636dd6e2046e7c657" translate="yes" xml:space="preserve">
          <source>Module declaration, defining the name of the module. The name &lt;code&gt;Module&lt;/code&gt;, an atom, is to be same as the file name minus the extension &lt;code&gt;.erl&lt;/code&gt;. Otherwise &lt;code&gt;&lt;a href=&quot;code_loading#loading&quot;&gt;code loading&lt;/a&gt;&lt;/code&gt; does not work as intended.</source>
          <target state="translated">モジュール宣言。モジュールの名前を定義します。 &lt;code&gt;Module&lt;/code&gt; という名前のアトムは、ファイル名から拡張子 &lt;code&gt;.erl&lt;/code&gt; を除いたものと同じになります。そうしないと、 &lt;code&gt;&lt;a href=&quot;code_loading#loading&quot;&gt;code loading&lt;/a&gt;&lt;/code&gt; が意図したとおりに機能しません。</target>
        </trans-unit>
        <trans-unit id="a9f410e5b1b65a73903dd4626c286783c1bfbc2a" translate="yes" xml:space="preserve">
          <source>Module dependencies</source>
          <target state="translated">モジュールの依存関係</target>
        </trans-unit>
        <trans-unit id="c4de41b866e4495590e15d7c4a7b74f33f765b7e" translate="yes" xml:space="preserve">
          <source>Module diameter was introduced in OTP R14B03.</source>
          <target state="translated">OTP R14B03にモジュール径が導入されました。</target>
        </trans-unit>
        <trans-unit id="6998b7f5007c0f34c3b91765b2d49b9e909b15d9" translate="yes" xml:space="preserve">
          <source>Module diameter_codec was introduced in OTP R15B03.</source>
          <target state="translated">OTP R15B03でdiameter_codecモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="e1781d9a9cfea982093f1d123e6e61590d06c935" translate="yes" xml:space="preserve">
          <source>Module diameter_make was introduced in OTP R14B03.</source>
          <target state="translated">OTP R14B03でdiameter_makeモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="e8db744877f88892a28379110dae10e240b2a6e7" translate="yes" xml:space="preserve">
          <source>Module diameter_sctp was introduced in OTP R14B03.</source>
          <target state="translated">OTP R14B03でdiameter_sctpモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="27eff594940bc25f1e99bfd84ee3fb6c4154e5d6" translate="yes" xml:space="preserve">
          <source>Module diameter_tcp was introduced in OTP R14B03.</source>
          <target state="translated">OTP R14B03でdiameter_tcpモジュールが導入された。</target>
        </trans-unit>
        <trans-unit id="f4643ea3d5e93df18457f3816130a86a4cb67c84" translate="yes" xml:space="preserve">
          <source>Module diameter_transport was introduced in OTP R14B03.</source>
          <target state="translated">OTP R14B03でdiameter_transportモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="a05a780b6f39019fcc9e863afd833ffd6fa0637a" translate="yes" xml:space="preserve">
          <source>Module dyntrace was introduced in OTP R15B01.</source>
          <target state="translated">OTP R15B01でモジュールdyntraceが導入されました。</target>
        </trans-unit>
        <trans-unit id="d1960cdf98aa936a227554c01e07f847482cb927" translate="yes" xml:space="preserve">
          <source>Module eldap was introduced in OTP R15B01.</source>
          <target state="translated">OTP R15B01でモジュールeldapが紹介されました。</target>
        </trans-unit>
        <trans-unit id="6b41bc65fac019eeb84f457522e15550888a0c1d" translate="yes" xml:space="preserve">
          <source>Module erl_anno was introduced in OTP 18.0.</source>
          <target state="translated">OTP 18.0 で erl_anno モジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="a03ddeb54cfdc35710842e3d8532a4f17c4650a0" translate="yes" xml:space="preserve">
          <source>Module erl_epmd was introduced in OTP R14B.</source>
          <target state="translated">OTP R14Bでモジュールerl_epmdが導入されました。</target>
        </trans-unit>
        <trans-unit id="9f0baad627fb53cb766ea5990049b80e397bd783" translate="yes" xml:space="preserve">
          <source>Module erl_tracer was introduced in OTP 19.0.</source>
          <target state="translated">OTP 19.0 で erl_tracer モジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="3a9344f7e59758da1995c11adfd8c34f62c8de06" translate="yes" xml:space="preserve">
          <source>Module erpc was introduced in OTP 23.0.</source>
          <target state="translated">OTP 23.0でモジュールerpcが導入されました。</target>
        </trans-unit>
        <trans-unit id="6d5e21488abfc382926728e15dad73e13de36aa3" translate="yes" xml:space="preserve">
          <source>Module gen_statem was introduced in OTP 19.0.</source>
          <target state="translated">gen_statemモジュールはOTP 19.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="d8448c6a252cc708f8ac2682727d5382278405f4" translate="yes" xml:space="preserve">
          <source>Module http_uri was introduced in OTP R15B01.</source>
          <target state="translated">OTP R15B01でhttp_uriモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="6e2810043d820a944ddb633953afd8052c0ce6ef" translate="yes" xml:space="preserve">
          <source>Module httpc was introduced in OTP R13B04.</source>
          <target state="translated">OTP R13B04にhttpcモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="8634e8bf781897309210834c63a15c29db7618ed" translate="yes" xml:space="preserve">
          <source>Module httpd_custom_api was introduced in OTP 17.5.6.</source>
          <target state="translated">httpd_custom_api モジュールは OTP 17.5.6 で導入されました。</target>
        </trans-unit>
        <trans-unit id="29831323c7df8a96814b2f509d3ff6857f030f35" translate="yes" xml:space="preserve">
          <source>Module implementing a transport process as defined in &lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt;. Defaults to &lt;code&gt;diameter_tcp&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;diameter_transport&quot;&gt;diameter_transport(3)&lt;/a&gt;&lt;/code&gt; で定義されているトランスポートプロセスを実装するモジュール。デフォルトは、 &lt;code&gt;diameter_tcp&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="e4e38a18f0719919f3c40ded9bbdfc81eabab76a" translate="yes" xml:space="preserve">
          <source>Module implementing the behaviour &lt;code&gt;&lt;a href=&quot;ssh_client_key_api&quot;&gt;ssh_client_key_api&lt;/a&gt;&lt;/code&gt; and/or &lt;code&gt;&lt;a href=&quot;ssh_server_key_api&quot;&gt;ssh_server_key_api&lt;/a&gt;&lt;/code&gt;. Can be used to customize the handling of public keys. If callback options are provided along with the module name, they are made available to the callback module via the options passed to it under the key 'key_cb_private'.</source>
          <target state="translated">動作 &lt;code&gt;&lt;a href=&quot;ssh_client_key_api&quot;&gt;ssh_client_key_api&lt;/a&gt;&lt;/code&gt; および/または &lt;code&gt;&lt;a href=&quot;ssh_server_key_api&quot;&gt;ssh_server_key_api&lt;/a&gt;&lt;/code&gt; を実装するモジュール。公開鍵の処理をカスタマイズするために使用できます。コールバックオプションがモジュール名と共に提供されている場合、それらは、キー 'key_cb_private'の下で渡されたオプションを介して、コールバックモジュールで使用できるようになります。</target>
        </trans-unit>
        <trans-unit id="35eeaf69ae679cc6ded3a7a1fc0ebe15bf8b481c" translate="yes" xml:space="preserve">
          <source>Module implementing the callback interface defined in &lt;code&gt;diameter_app(3)&lt;/code&gt;, along with any extra arguments to be appended to those documented. Note that extra arguments specific to an outgoing request can be specified to &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt;, in which case those are appended to any module-specific extra arguments.</source>
          <target state="translated">&lt;code&gt;diameter_app(3)&lt;/code&gt; で定義されているコールバックインターフェイスを実装するモジュール、およびドキュメントに追加される追加の引数。発信要求に固有の追加の引数を &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; に指定できることに注意してください。この場合、それらはモジュール固有の追加の引数に追加されます。</target>
        </trans-unit>
        <trans-unit id="ed10eea74bdfe74fc718b32265df8faa84bb27bd" translate="yes" xml:space="preserve">
          <source>Module lcnt was introduced in OTP R13B04.</source>
          <target state="translated">OTP R13B04でlcntモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="f76dccaeb308983d0ab2086843bbd0324e8a1f3b" translate="yes" xml:space="preserve">
          <source>Module logger was introduced in OTP 21.0.</source>
          <target state="translated">OTP 21.0でモジュールロガーが導入されました。</target>
        </trans-unit>
        <trans-unit id="77ed1b4c9f1ec7add037110c6b44d492cbfb56ac" translate="yes" xml:space="preserve">
          <source>Module logger_disk_log_h was introduced in OTP 21.0.</source>
          <target state="translated">OTP 21.0でlogger_disk_log_hモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="ad79037def86c5caece0e0f70a8728b4f1386a27" translate="yes" xml:space="preserve">
          <source>Module logger_filters was introduced in OTP 21.0.</source>
          <target state="translated">logger_filters モジュールは OTP 21.0 で導入されました。</target>
        </trans-unit>
        <trans-unit id="6d4a95e265a533fcdfc83d36567c4d6d3b690652" translate="yes" xml:space="preserve">
          <source>Module logger_formatter was introduced in OTP 21.0.</source>
          <target state="translated">logger_formatterモジュールはOTP 21.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="c50ee9b3cbc5bd184a9c25bc215d101ba11a5592" translate="yes" xml:space="preserve">
          <source>Module logger_std_h was introduced in OTP 21.0.</source>
          <target state="translated">logger_std_hモジュールはOTP 21.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="f2f7add00a5fc14394421a99d67553e865a40d25" translate="yes" xml:space="preserve">
          <source>Module maps was introduced in OTP 17.0.</source>
          <target state="translated">OTP 17.0でモジュールマップが導入されました。</target>
        </trans-unit>
        <trans-unit id="e5c5f2cab8107c7a9e4bec2343033279f34b5f64" translate="yes" xml:space="preserve">
          <source>Module msacc was introduced in OTP 19.0.</source>
          <target state="translated">msacc モジュールは OTP 19.0 で導入されました。</target>
        </trans-unit>
        <trans-unit id="8ac3ab9dcc2e8cb2a00c7b4ced3af3f822b18ebf" translate="yes" xml:space="preserve">
          <source>Module net was introduced in OTP 22.0.</source>
          <target state="translated">モジュールネットはOTP 22.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="4d139b86ec78e2818e601c5322274086b1b15ed7" translate="yes" xml:space="preserve">
          <source>Module observer was introduced in OTP R15B.</source>
          <target state="translated">OTP R15Bにモジュールオブザーバが導入されました。</target>
        </trans-unit>
        <trans-unit id="39b9e9a97d1c4649a00289e3047bd1dabea168f6" translate="yes" xml:space="preserve">
          <source>Module persistent_term was introduced in OTP 21.2.</source>
          <target state="translated">モジュール persistent_term は OTP 21.2 で導入されました。</target>
        </trans-unit>
        <trans-unit id="dd286c283f38f2ad248b0537a881b820d16f22d1" translate="yes" xml:space="preserve">
          <source>Module pg was introduced in OTP 23.0.</source>
          <target state="translated">モジュールpgはOTP 23.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="39eb77688a27b94673c3c07215c1826cb63c9bae" translate="yes" xml:space="preserve">
          <source>Module rand was introduced in OTP 18.0.</source>
          <target state="translated">モジュールランドはOTP 18.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="b390807d1e54ffa01182b3c85c577695ce4c0197" translate="yes" xml:space="preserve">
          <source>Module scheduler was introduced in OTP 21.0.</source>
          <target state="translated">OTP 21.0でモジュールスケジューラが導入されました。</target>
        </trans-unit>
        <trans-unit id="276beee08cc3300520de13eb90fe0711d380edd4" translate="yes" xml:space="preserve">
          <source>Module shell_docs was introduced in OTP 23.0.</source>
          <target state="translated">shell_docs モジュールは OTP 23.0 で導入されました。</target>
        </trans-unit>
        <trans-unit id="bebf5352b9be67e031b37602eea4f1cb5c0304bb" translate="yes" xml:space="preserve">
          <source>Module snmpa_mib_data was introduced in OTP R16B01.</source>
          <target state="translated">OTP R16B01でモジュールsnmpa_mib_dataが導入されました。</target>
        </trans-unit>
        <trans-unit id="0e70a8ea85ca84be44893d82b6c3a280a38540f8" translate="yes" xml:space="preserve">
          <source>Module snmpa_mib_storage was introduced in OTP R16B01.</source>
          <target state="translated">OTP R16B01でモジュールsnmpa_mib_storageが導入されました。</target>
        </trans-unit>
        <trans-unit id="ace0e955e027d0b0000299b51fa7e9c1b021ff27" translate="yes" xml:space="preserve">
          <source>Module socket was introduced in OTP 22.0.</source>
          <target state="translated">OTP 22.0でモジュールソケットが導入されました。</target>
        </trans-unit>
        <trans-unit id="3b1e11776366f8fb2d72c2cb79f09bb4fa24e742" translate="yes" xml:space="preserve">
          <source>Module specific configuration. A module has a mandatory name and module level options that are described below.</source>
          <target state="translated">モジュール固有の設定。モジュールには必須の名前と、以下に説明するモジュールレベルのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="72dc920d6466f3a51ff148a6c22c0149e736b012" translate="yes" xml:space="preserve">
          <source>Module ssh_agent was introduced in OTP 23.0.</source>
          <target state="translated">ssh_agent モジュールは OTP 23.0 で導入されました。</target>
        </trans-unit>
        <trans-unit id="5b536e7ce1fd7488bfc6ee5456bc8fa4439ff032" translate="yes" xml:space="preserve">
          <source>Module ssh_client_channel was introduced in OTP 21.0.</source>
          <target state="translated">OTP 21.0 で ssh_client_channel モジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="2f869e3e3bb6f5ddde6f36f71cb3a4d4cec6836e" translate="yes" xml:space="preserve">
          <source>Module ssh_client_key_api was introduced in OTP R16B.</source>
          <target state="translated">OTP R16Bでssh_client_key_apiモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="6a18eb111cdd15328a4e1f834f89cd65be3ee034" translate="yes" xml:space="preserve">
          <source>Module ssh_file was introduced in OTP 21.2.</source>
          <target state="translated">ssh_file モジュールは OTP 21.2 で導入されました。</target>
        </trans-unit>
        <trans-unit id="57feb238e6679d7b5b4205e5260bb2378fe1534f" translate="yes" xml:space="preserve">
          <source>Module ssh_server_channel was introduced in OTP 21.0.</source>
          <target state="translated">ssh_server_channel モジュールは OTP 21.0 で導入されました。</target>
        </trans-unit>
        <trans-unit id="ec9c71a107f47f6dda0c427212ee44e14c11900f" translate="yes" xml:space="preserve">
          <source>Module ssh_server_key_api was introduced in OTP R16B.</source>
          <target state="translated">OTP R16Bでssh_server_key_apiモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="2dd245aa2de3105d5d30fc67148a14bc85ad6386" translate="yes" xml:space="preserve">
          <source>Module ssl_crl_cache was introduced in OTP 18.0.</source>
          <target state="translated">モジュール ssl_crl_cache が OTP 18.0 で導入されました。</target>
        </trans-unit>
        <trans-unit id="7196fbbf96abe91ca288980df4ef82ab8959fe8c" translate="yes" xml:space="preserve">
          <source>Module ssl_crl_cache_api was introduced in OTP 18.0.</source>
          <target state="translated">OTP 18.0 で ssl_crl_cache_api モジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="1be353989bfb013991c9a0ee8d97a17097a338f0" translate="yes" xml:space="preserve">
          <source>Module ssl_session_cache_api was introduced in OTP R14B.</source>
          <target state="translated">OTP R14Bでssl_session_cache_apiモジュールが導入されました。</target>
        </trans-unit>
        <trans-unit id="cacaca54d1da5bb7e4da7be2e842da46f15421fe" translate="yes" xml:space="preserve">
          <source>Module system_information was introduced in OTP 17.0.</source>
          <target state="translated">system_informationモジュールはOTP 17.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="315a38a0921c5df7ca4ea57d01f6e3c02d81b5a7" translate="yes" xml:space="preserve">
          <source>Module table. One entry for each loaded module.</source>
          <target state="translated">モジュールテーブル。ロードされたモジュールごとに1つのエントリ。</target>
        </trans-unit>
        <trans-unit id="798bbcabe6f7c0a85968c3aa75968373336b7c59" translate="yes" xml:space="preserve">
          <source>Module uri_string was introduced in OTP 21.0.</source>
          <target state="translated">uri_stringモジュールはOTP 21.0で導入されました。</target>
        </trans-unit>
        <trans-unit id="f9b60e96ee40b88550cfc1f8c7fcfd25f0c8cd62" translate="yes" xml:space="preserve">
          <source>Module version. &lt;code&gt;Vsn&lt;/code&gt; is any literal term and can be retrieved using &lt;code&gt;beam_lib:version/1&lt;/code&gt;, see the &lt;code&gt;beam_lib(3)&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">モジュールのバージョン。 &lt;code&gt;Vsn&lt;/code&gt; 任意のリテラル用語であり、使用して取得することができる &lt;code&gt;beam_lib:version/1&lt;/code&gt; 参照して、 &lt;code&gt;beam_lib(3)&lt;/code&gt; STDLIBでマニュアルページを。</target>
        </trans-unit>
        <trans-unit id="44a12cea34941c3636ff9a5c6f66929acd277169" translate="yes" xml:space="preserve">
          <source>Module which handles the network interface filter part for the SNMP agent. Must implement the &lt;code&gt;&lt;a href=&quot;snmpa_network_interface_filter&quot;&gt;snmpa_network_interface_filter &lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">SNMPエージェントのネットワークインターフェースフィルター部分を処理するモジュール。 &lt;code&gt;&lt;a href=&quot;snmpa_network_interface_filter&quot;&gt;snmpa_network_interface_filter &lt;/a&gt;&lt;/code&gt; の動作を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="503ebafe676df7f757d99bf2c13d2488fb6ebde6" translate="yes" xml:space="preserve">
          <source>Module which handles the network interface filter part for the SNMP agent. Must implement the &lt;code&gt;&lt;a href=&quot;snmpa_network_interface_filter&quot;&gt;snmpa_network_interface_filter&lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">SNMPエージェントのネットワークインターフェイスフィルター部分を処理するモジュール。 &lt;code&gt;&lt;a href=&quot;snmpa_network_interface_filter&quot;&gt;snmpa_network_interface_filter&lt;/a&gt;&lt;/code&gt; 動作を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="1abddb44834be834e4e4bfa19c743e11a954f223" translate="yes" xml:space="preserve">
          <source>Module which handles the network interface filter part for the SNMP manager. Must implement the &lt;code&gt;&lt;a href=&quot;snmpm_network_interface_filter&quot;&gt;snmpm_network_interface_filter&lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">SNMPマネージャーのネットワークインターフェイスフィルター部分を処理するモジュール。 &lt;code&gt;&lt;a href=&quot;snmpm_network_interface_filter&quot;&gt;snmpm_network_interface_filter&lt;/a&gt;&lt;/code&gt; 動作を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="e44abc149b672de3d2e38a78a614dd0b902536c9" translate="yes" xml:space="preserve">
          <source>Module which handles the network interface part for the SNMP agent. Must implement the &lt;code&gt;&lt;a href=&quot;snmpa_network_interface&quot;&gt;snmpa_network_interface&lt;/a&gt;&lt;/code&gt; behaviour.</source>
          <target state="translated">SNMPエージェントのネットワークインターフェイス部分を処理するモジュール。 &lt;code&gt;&lt;a href=&quot;snmpa_network_interface&quot;&gt;snmpa_network_interface&lt;/a&gt;&lt;/code&gt; 動作を実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="e55ad072ead98bed5f6005b9ebdc8c72b3e6734f" translate="yes" xml:space="preserve">
          <source>Module-local type, that is, with a definition that is present in the code of the module</source>
          <target state="translated">モジュールローカル型、つまり、モジュールのコードに存在する定義を持つ</target>
        </trans-unit>
        <trans-unit id="3bb18ecc75afce04897d2fff035677396581e539" translate="yes" xml:space="preserve">
          <source>ModuleName = atom()</source>
          <target state="translated">モジュール名=atom()</target>
        </trans-unit>
        <trans-unit id="04e9462c0ff02bb9032b92abd45881a3c7e15fb7" translate="yes" xml:space="preserve">
          <source>Modules</source>
          <target state="translated">Modules</target>
        </trans-unit>
        <trans-unit id="91edcf2737edcc491331e2f8bedfb98b3d292c2d" translate="yes" xml:space="preserve">
          <source>Modules are auto loaded when they are first referenced if the runtime system runs in &lt;code&gt;interactive&lt;/code&gt; mode, which is the default. In &lt;code&gt;embedded&lt;/code&gt; mode modules are not auto loaded. The latter is recommended when the boot script preloads all modules, as conventionally happens in OTP releases. See &lt;code&gt;code(3)&lt;/code&gt;</source>
          <target state="translated">ランタイムシステムが &lt;code&gt;interactive&lt;/code&gt; モードで実行されている場合、モジュールは最初に参照されるときに自動的にロードされます。これがデフォルトです。 &lt;code&gt;embedded&lt;/code&gt; モードのモジュールが自動的にロードされません。後者は、OTPリリースで従来行われているように、ブートスクリプトがすべてのモジュールをプリロードするときに推奨されます。 &lt;code&gt;code(3)&lt;/code&gt; を参照</target>
        </trans-unit>
        <trans-unit id="bb1481c22b555900c17ca93bb499831901e632cf" translate="yes" xml:space="preserve">
          <source>Modules for which these requirements are not fulfilled are not interpretable and are therefore displayed within parentheses.</source>
          <target state="translated">これらの要件が満たされていないモジュールは解釈できないため、括弧内に表示されます。</target>
        </trans-unit>
        <trans-unit id="3655dff16c3acb075f3aa4eb83a55de4222d8dcd" translate="yes" xml:space="preserve">
          <source>Modules handling textual data (such as &lt;code&gt;io_lib&lt;/code&gt; and &lt;code&gt;string&lt;/code&gt; are sometimes subject to conversion or extension to be able to handle Unicode characters.</source>
          <target state="translated">テキストデータを処理するモジュール（ &lt;code&gt;io_lib&lt;/code&gt; や &lt;code&gt;string&lt;/code&gt; など）は、Unicode文字を処理できるように変換または拡張される場合があります。</target>
        </trans-unit>
        <trans-unit id="a4c3f31c3058b3e9540e1619be8ab2562d234db4" translate="yes" xml:space="preserve">
          <source>Modules that can use match specifications for optimized traversal of tables are to call &lt;code&gt;qlc:table/2&lt;/code&gt; with an unary &lt;code&gt;TraverseFun&lt;/code&gt;. An example is &lt;code&gt;&lt;a href=&quot;ets#table-2&quot;&gt; ets:table/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルのトラバーサルを最適化するために一致仕様を使用できるモジュールは、単項 &lt;code&gt;TraverseFun&lt;/code&gt; を使用して &lt;code&gt;qlc:table/2&lt;/code&gt; を呼び出すことです。例は &lt;code&gt;&lt;a href=&quot;ets#table-2&quot;&gt; ets:table/2&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5f2ee43d36d04a016e320f127714934e6c2e4d80" translate="yes" xml:space="preserve">
          <source>Modules that can use match specifications for optimized traversal of tables are to call &lt;code&gt;qlc:table/2&lt;/code&gt; with an unary &lt;code&gt;TraverseFun&lt;/code&gt;. An example is &lt;code&gt;&lt;a href=&quot;ets#table-2&quot;&gt;ets:table/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テーブルのトラバーサルを最適化するために一致仕様を使用できるモジュールは、単項 &lt;code&gt;TraverseFun&lt;/code&gt; で &lt;code&gt;qlc:table/2&lt;/code&gt; を呼び出すことです。例は &lt;code&gt;&lt;a href=&quot;ets#table-2&quot;&gt;ets:table/2&lt;/a&gt;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="422ffac5358de536fa7258027d227737932e212a" translate="yes" xml:space="preserve">
          <source>Modules to be debugged must include debug information, for example, &lt;code&gt;erlc +debug_info MODULE.erl&lt;/code&gt;.</source>
          <target state="translated">デバッグするモジュールには、 &lt;code&gt;erlc +debug_info MODULE.erl&lt;/code&gt; などのデバッグ情報が含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="ad051bc5d863047321817c8bcfbe0c4f0ad41d7f" translate="yes" xml:space="preserve">
          <source>Modules. All modules: analyzed modules, used library modules, and unknown modules.</source>
          <target state="translated">モジュール。すべてのモジュール:解析されたモジュール、使用されたライブラリモジュール、不明なモジュール。</target>
        </trans-unit>
        <trans-unit id="c3bdbab40a4be4ac1b8eb1ccb2dbb2eaf8ed480f" translate="yes" xml:space="preserve">
          <source>Mongolian</source>
          <target state="translated">Mongolian</target>
        </trans-unit>
        <trans-unit id="787f0f344756f8edefb0e5d7c62ebb26c5a4a55b" translate="yes" xml:space="preserve">
          <source>Mongolian Vowel Separator</source>
          <target state="translated">モンゴル語母音分離器</target>
        </trans-unit>
        <trans-unit id="600aa04e59197f341b9f4d4f4b67aac5860b9298" translate="yes" xml:space="preserve">
          <source>Mongolian vowel separator</source>
          <target state="translated">母音分離器</target>
        </trans-unit>
        <trans-unit id="01e57fc0fd45173cbed0acd0fdb7a3a5528fd3cf" translate="yes" xml:space="preserve">
          <source>Monitor the SNMP manager. In case of a crash, the calling (monitoring) process will get a 'DOWN' message (see the erlang module for more info).</source>
          <target state="translated">SNMPマネージャを監視します。クラッシュした場合、呼び出した(監視している)プロセスは 'DOWN' メッセージを受け取ります(詳細は erlang モジュールを見て下さい)。</target>
        </trans-unit>
        <trans-unit id="344910a8e2960c1213ce5adc8d4e0d2e7e946399" translate="yes" xml:space="preserve">
          <source>Monitor the current status of all processes executing code in interpreted modules, also processes at other Erlang nodes.</source>
          <target state="translated">インタプリタモジュールでコードを実行しているすべてのプロセスの現在の状態を監視し、他のErlangノードのプロセスも監視します。</target>
        </trans-unit>
        <trans-unit id="861055aa27b6909c706d63bc66a51be73f91acc2" translate="yes" xml:space="preserve">
          <source>Monitor the status of the node &lt;code&gt;Node&lt;/code&gt;. If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, monitoring is turned on. If &lt;code&gt;Flag&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, monitoring is turned off.</source>
          <target state="translated">ノード &lt;code&gt;Node&lt;/code&gt; のステータスを監視します。場合は &lt;code&gt;Flag&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、監視がオンになっています。 &lt;code&gt;Flag&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、監視はオフになります。</target>
        </trans-unit>
        <trans-unit id="ebcb5e6cac0f295c708f39a3c4a6170117db14de" translate="yes" xml:space="preserve">
          <source>MonitorRef</source>
          <target state="translated">MonitorRef</target>
        </trans-unit>
        <trans-unit id="470c3f4925fdbce53327014ba80ea684bb7bb834" translate="yes" xml:space="preserve">
          <source>Monitoring of the master node by the slaves. A slave node can be stopped if the master node terminates. (Configurable.)</source>
          <target state="translated">スレーブによるマスタノードの監視。マスターノードが終了した場合、スレーブノードを停止することができます。(設定可能)。</target>
        </trans-unit>
        <trans-unit id="0f28429d58b7c5efe00cd63a0b3f938a3c652898" translate="yes" xml:space="preserve">
          <source>Monitors are unidirectional. Repeated calls to &lt;code&gt;erlang:monitor(process, Pid)&lt;/code&gt; creates several independent monitors, and each one sends a 'DOWN' message when &lt;code&gt;Pid&lt;/code&gt; terminates.</source>
          <target state="translated">モニターは単方向です。 &lt;code&gt;erlang:monitor(process, Pid)&lt;/code&gt; を繰り返し呼び出すと、いくつかの独立したモニターが作成され、 &lt;code&gt;Pid&lt;/code&gt; が終了すると、それぞれが「DOWN」メッセージを送信します。</target>
        </trans-unit>
        <trans-unit id="cdb09466cb66d0cbd945a8e99ed6c52ea020f0ad" translate="yes" xml:space="preserve">
          <source>Monitors can be created for processes with registered names, also at other nodes.</source>
          <target state="translated">登録された名前のプロセスに対して、他のノードでもモニターを作成することができます。</target>
        </trans-unit>
        <trans-unit id="01bc156298d3c730abf64a20c2aed5c87c1f305c" translate="yes" xml:space="preserve">
          <source>Monitors changes in &lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt;time offset&lt;/a&gt;&lt;/code&gt; between &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_System_Time&quot;&gt;Erlang system time&lt;/a&gt;&lt;/code&gt;. One valid &lt;code&gt;Item&lt;/code&gt; exists in combination with the &lt;code&gt;time_offset Type&lt;/code&gt;, namely the atom &lt;code&gt;clock_service&lt;/code&gt;. Notice that the atom &lt;code&gt;clock_service&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; the registered name of a process. In this case it serves as an identifier of the runtime system internal clock service at current runtime system instance.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;time_correction#Erlang_Monotonic_Time&quot;&gt;Erlang monotonic time&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;time_correction#Erlang_System_Time&quot;&gt;Erlang system time&lt;/a&gt;&lt;/code&gt; 間の &lt;code&gt;&lt;a href=&quot;#time_offset-0&quot;&gt;time offset&lt;/a&gt;&lt;/code&gt; 変化を監視します。 &lt;code&gt;time_offset Type&lt;/code&gt; と組み合わせて1つの有効な &lt;code&gt;Item&lt;/code&gt; 、つまり、アトム &lt;code&gt;clock_service&lt;/code&gt; が存在します。アトム &lt;code&gt;clock_service&lt;/code&gt; は、プロセスの登録名では&lt;strong&gt;ない&lt;/strong&gt;ことに注意してください。この場合、現在のランタイムシステムインスタンスでのランタイムシステム内部クロックサービスの識別子として機能します。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="6278940d00dc973b9fac020727e51dbaff5a2934" translate="yes" xml:space="preserve">
          <source>Monitors the new process (like &lt;code&gt;&lt;a href=&quot;#monitor-2&quot;&gt;monitor/2&lt;/a&gt;&lt;/code&gt; does).</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;#monitor-2&quot;&gt;monitor/2&lt;/a&gt;&lt;/code&gt; のように）新しいプロセスを監視します。</target>
        </trans-unit>
        <trans-unit id="cad13ed7bd36f4e4080c9a5204dc6f837cb3bfe8" translate="yes" xml:space="preserve">
          <source>Monitors the status of &lt;code&gt;Node&lt;/code&gt;. A message&lt;code&gt;{nodedown, Node}&lt;/code&gt; is received if the connection to it is lost.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; のステータスを監視します。メッセージへの接続が失われた場合、メッセージ &lt;code&gt;{nodedown, Node}&lt;/code&gt; が受信されます。</target>
        </trans-unit>
        <trans-unit id="c216ef5762c4c0ce5f8e7770265d785983bc6ae3" translate="yes" xml:space="preserve">
          <source>Monitors when a driver gets unloaded. If one monitors a driver that is not present in the system, one immediately gets notified that the driver got unloaded. There is no guarantee that the driver was ever loaded.</source>
          <target state="translated">ドライバがアンロードされたときに監視します。システムに存在しないドライバを監視すると、ドライバがアンロードされたことをすぐに通知される。ドライバーがロードされたことを保証するものではありません。</target>
        </trans-unit>
        <trans-unit id="054691f4ee3b3917016ebbaa64173208c28be20d" translate="yes" xml:space="preserve">
          <source>Monotonically Increasing</source>
          <target state="translated">単調増加</target>
        </trans-unit>
        <trans-unit id="bd9b10ee2a0012e1817ee26b4049755fcb0ac1ff" translate="yes" xml:space="preserve">
          <source>More &lt;code&gt;Option&lt;/code&gt;s can be added in the future.</source>
          <target state="translated">今後、さらに &lt;code&gt;Option&lt;/code&gt; を追加できます。</target>
        </trans-unit>
        <trans-unit id="d00ed339af89630d658502ba6fa422f63b92791b" translate="yes" xml:space="preserve">
          <source>More &lt;code&gt;Option&lt;/code&gt;s may be added in the future.</source>
          <target state="translated">今後、さらに &lt;code&gt;Option&lt;/code&gt; が追加される可能性があります。</target>
        </trans-unit>
        <trans-unit id="5800ca3d1d23bed63e706fafc9995e33a99a9d14" translate="yes" xml:space="preserve">
          <source>More &lt;strong&gt;Examples:&lt;/strong&gt;</source>
          <target state="translated">その他の&lt;strong&gt;例：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="65607507695dbb68853f7200e33956e39fd6a15d" translate="yes" xml:space="preserve">
          <source>More Examples</source>
          <target state="translated">その他の例</target>
        </trans-unit>
        <trans-unit id="d583518560cd4a6b87be9bc7d0b5d20f375dd723" translate="yes" xml:space="preserve">
          <source>More about schema management</source>
          <target state="translated">スキーマ管理の詳細</target>
        </trans-unit>
        <trans-unit id="084d33c5ffa622aae8b80c260f0553ad2cf85f5d" translate="yes" xml:space="preserve">
          <source>More about this mapping later.</source>
          <target state="translated">このマッピングの詳細は後ほど。</target>
        </trans-unit>
        <trans-unit id="6f6b5d611fb9be7645dc68d59bbad9a1cb5dc15a" translate="yes" xml:space="preserve">
          <source>More complicated assertions are coded as subpatterns. There are two kinds: those that look ahead of the current position in the subject string, and those that look behind it. An assertion subpattern is matched in the normal way, except that it does not cause the current matching position to be changed.</source>
          <target state="translated">より複雑なアサーションはサブパターンとしてコード化されています。サブパターンには、サブジェクト文字列の現在位置の前方を見るものと、後方を見るものの2種類があります。アサーションのサブパターンは通常の方法でマッチングされますが、現在のマッチング位置は変更されません。</target>
        </trans-unit>
        <trans-unit id="dc0707bf61bc70dcb1ccf38732ab029880726d5a" translate="yes" xml:space="preserve">
          <source>More complicated filters must be applied to all objects returned by &lt;code&gt;select/3&lt;/code&gt; given a match specification that matches all objects.</source>
          <target state="translated">すべてのオブジェクトに一致する一致仕様が指定されている &lt;code&gt;select/3&lt;/code&gt; 、select / 3によって返されるすべてのオブジェクトに、より複雑なフィルターを適用する必要があります。</target>
        </trans-unit>
        <trans-unit id="bc35fb8a88b65701f3530def0b268e553aeb3acf" translate="yes" xml:space="preserve">
          <source>More data is required for building a term. &lt;code&gt;Continuation1&lt;/code&gt; must be passed in a new call to &lt;code&gt;tokens/3,4&lt;/code&gt; when more data is available.</source>
          <target state="translated">用語を作成するには、より多くのデータが必要です。 &lt;code&gt;Continuation1&lt;/code&gt; は、より多くのデータが利用可能な場合、 &lt;code&gt;tokens/3,4&lt;/code&gt; への新しい呼び出しで渡される必要があります。</target>
        </trans-unit>
        <trans-unit id="61d71bef3701b166a8820075cfe5c6b25a998a5a" translate="yes" xml:space="preserve">
          <source>More data is required to build a term. &lt;code&gt;Continuation&lt;/code&gt; must be passed to &lt;code&gt;fread/3&lt;/code&gt; when more data becomes available.</source>
          <target state="translated">用語を作成するには、さらに多くのデータが必要です。より多くのデータが利用可能になると、 &lt;code&gt;Continuation&lt;/code&gt; を &lt;code&gt;fread/3&lt;/code&gt; に渡す必要があります。</target>
        </trans-unit>
        <trans-unit id="39cdc5b92133a83e1358f08b311f1434a7fd0514" translate="yes" xml:space="preserve">
          <source>More examples are provided in &lt;code&gt; Programming Examples.&lt;/code&gt;</source>
          <target state="translated">その他の例は、 &lt;code&gt; Programming Examples.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="b81ad47803878c0c922b614506252ef0f78c294e" translate="yes" xml:space="preserve">
          <source>More examples are provided in &lt;code&gt; Programming Examples&lt;/code&gt;.</source>
          <target state="translated">その他の例は、 &lt;code&gt; Programming Examples&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="724f9066e927cf5e78aa33ce4b0b56cdb2c9bad0" translate="yes" xml:space="preserve">
          <source>More examples are provided in &lt;code&gt;Programming Examples.&lt;/code&gt;</source>
          <target state="translated">より多くの例が &lt;code&gt;Programming Examples.&lt;/code&gt; 提供されます。</target>
        </trans-unit>
        <trans-unit id="9ed94e5cafdef76e06a28a02d1fb7d9d847eb489" translate="yes" xml:space="preserve">
          <source>More examples are provided in &lt;code&gt;Programming Examples&lt;/code&gt;.</source>
          <target state="translated">より多くの例が &lt;code&gt;Programming Examples&lt;/code&gt; 提供されています。</target>
        </trans-unit>
        <trans-unit id="0f0c04bd8d50bdec5467c598e0a5b535a66ddbd3" translate="yes" xml:space="preserve">
          <source>More fine-grained &lt;code&gt;MSAcc_Thread_State&lt;/code&gt;s can be added through configure (such as &lt;code&gt;./configure --with-microstate-accounting=extra&lt;/code&gt;). Enabling these states causes performance degradation when microstate accounting is turned off and increases the overhead when it is turned on.</source>
          <target state="translated">より詳細な &lt;code&gt;MSAcc_Thread_State&lt;/code&gt; は、configure（ &lt;code&gt;./configure --with-microstate-accounting=extra&lt;/code&gt; ）。これらの状態を有効にすると、マイクロステートアカウンティングをオフにするとパフォーマンスが低下し、オンにするとオーバーヘッドが増加します。</target>
        </trans-unit>
        <trans-unit id="a2265fcb92dc15d3c0d1088cf4a7cda3cf89b5a9" translate="yes" xml:space="preserve">
          <source>More flags may be introduced in the future.</source>
          <target state="translated">今後、さらに多くのフラグが導入される可能性があります。</target>
        </trans-unit>
        <trans-unit id="2acb3fbd866339988fd39b1c284e6c3b2ab38a8d" translate="yes" xml:space="preserve">
          <source>More identifiers can exist, for example, server-side namespace.</source>
          <target state="translated">サーバ側の名前空間など、より多くの識別子が存在しても構いません。</target>
        </trans-unit>
        <trans-unit id="1694f778d2be24087b41889858ea210d0111ac2d" translate="yes" xml:space="preserve">
          <source>More information can be found at</source>
          <target state="translated">詳細は以下のサイトでご覧いただけます。</target>
        </trans-unit>
        <trans-unit id="64269325714a31b2baa9a9331c4f44390f41f060" translate="yes" xml:space="preserve">
          <source>More information is provided by the &lt;code&gt;ms_transform&lt;/code&gt; manual page in STDLIB.</source>
          <target state="translated">&lt;code&gt;ms_transform&lt;/code&gt; によって詳細情報が提供されますマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="88f4919d857f59d8c447803f4828a40dd5c28e81" translate="yes" xml:space="preserve">
          <source>More information, if any. If the process is stopped at a breakpoint, the field contains information about the location &lt;code&gt;{Module,Line}&lt;/code&gt;. If the process has terminated, the field contains the exit reason.</source>
          <target state="translated">詳細情報（ある場合）。プロセスがブレークポイントで停止した場合、フィールドには場所 &lt;code&gt;{Module,Line}&lt;/code&gt; に関する情報が含まれます。プロセスが終了した場合、フィールドには終了理由が含まれます。</target>
        </trans-unit>
        <trans-unit id="ee6de05aba35fe8266245c0993bc1f9805274eb9" translate="yes" xml:space="preserve">
          <source>More options can be added in a future release.</source>
          <target state="translated">今後のリリースでは、より多くのオプションを追加することができます。</target>
        </trans-unit>
        <trans-unit id="624affd09f46bdb2e3938ac33ddbe38974e12c14" translate="yes" xml:space="preserve">
          <source>More than three parts are not possible with this indata, so</source>
          <target state="translated">このインダータでは3部以上は無理なので</target>
        </trans-unit>
        <trans-unit id="b885fb398d558b327a8bb15c26cf1ab822a084fa" translate="yes" xml:space="preserve">
          <source>More tuples in the returned list can be added in a future release.</source>
          <target state="translated">返されたリストに含まれるタプルは、将来のリリースで追加することができます。</target>
        </trans-unit>
        <trans-unit id="a8221a6661a6dd450a6a5dfd76d4419180368d29" translate="yes" xml:space="preserve">
          <source>Moreover, traversals not done in a &lt;strong&gt;safe&lt;/strong&gt; way, on tables where keys are inserted or deleted during the traversal, may yield the following undesired effects:</source>
          <target state="translated">さらに、トラバーサル中にキーが挿入または削除されるテーブルで&lt;strong&gt;安全な&lt;/strong&gt;方法でトラバーサルが行われないと、次の望ましくない影響が生じる可能性があります。</target>
        </trans-unit>
        <trans-unit id="da67cb977d2af46ee848b2a1678e58ecf46a909c" translate="yes" xml:space="preserve">
          <source>Most API functions require that the TLS/DTLS connection is established to work as expected.</source>
          <target state="translated">ほとんどのAPI機能は、TLS/DTLS接続が確立されていることで期待通りに動作するようになっています。</target>
        </trans-unit>
        <trans-unit id="d2f77ff3575a46c8961aaa5e120590c63bc009a2" translate="yes" xml:space="preserve">
          <source>Most Unix operating systems have adopted a simpler approach, namely that Unicode file naming is not enforced, but by convention. Those systems usually use UTF-8 encoding for Unicode filenames, but do not enforce it. On such a system, a filename containing characters with code points from 128 through 255 can be named as plain ISO Latin-1 or use UTF-8 encoding. As no consistency is enforced, the Erlang VM cannot do consistent translation of all filenames.</source>
          <target state="translated">ほとんどの Unix オペレーティングシステムでは、Unicode ファイル名の命名は強制されておらず、慣習に従っているという、より単純なアプローチを採用しています。これらのシステムは通常、Unicode ファイル名に UTF-8 エンコーディングを使用していますが、それを強制しません。こ の よ う なシ ス テ ムでは、 コ ー ド 点が 128 か ら 255 までのキ ャ ラ ク タ を含む フ ァ イ ル名は、 プ レーン ISO Latin-1 と し て命名す る か、 または UTF-8 エン コ ーデ ィ ン グ を使用す る こ と がで き ます。一貫性がないので、Erlang VMはすべてのファイル名を一貫して翻訳することができません。</target>
        </trans-unit>
        <trans-unit id="f0ba27548898cb4c334f12ba233f3dfd33b35de6" translate="yes" xml:space="preserve">
          <source>Most applications only need the Master Agent because an agent can have multiple MIBs loaded at the same time.</source>
          <target state="translated">ほとんどのアプリケーションでは、エージェントが複数のMIBを同時にロードすることができるため、マスターエージェントのみを必要とします。</target>
        </trans-unit>
        <trans-unit id="f4dc046cd951e52d7b06645a8907d9bc64484dc4" translate="yes" xml:space="preserve">
          <source>Most drivers written before the runtime system with SMP support existed can run in the runtime system with SMP support, without being rewritten, if driver level locking is used.</source>
          <target state="translated">SMPサポート付きのランタイムシステムが存在する以前に書かれたドライバのほとんどは、ドライバレベルロックが使用されていれば、書き換えられることなく、SMPサポート付きのランタイムシステムで実行することができます。</target>
        </trans-unit>
        <trans-unit id="36d595b42429aa7673a2aecb223ad49cf5a73ec5" translate="yes" xml:space="preserve">
          <source>Most functions appear in a version with the suffix &lt;code&gt;_tmo&lt;/code&gt; appended to the function name. Those functions take an extra argument, a time-out in &lt;strong&gt;milliseconds&lt;/strong&gt;. The semantics is this: for each communication primitive involved in the operation, if the primitive does not complete within the time specified, the function returns an error and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;ETIMEDOUT&lt;/code&gt;. With communication primitive is meant an operation on the socket, like &lt;code&gt;connect&lt;/code&gt;, &lt;code&gt;accept&lt;/code&gt;, &lt;code&gt;recv&lt;/code&gt;, or &lt;code&gt;send&lt;/code&gt;.</source>
          <target state="translated">ほとんどの関数は、関数名にサフィックス &lt;code&gt;_tmo&lt;/code&gt; が追加されたバージョンで表示されます。これらの関数は、&lt;strong&gt;ミリ秒単位の&lt;/strong&gt;タイムアウトという追加の引数を取り&lt;strong&gt;ます&lt;/strong&gt;。セマンティクスは次のとおりです。操作に関与する各通信プリミティブについて、指定された時間内にプリミティブが完了しない場合、関数はエラーを返し、 &lt;code&gt;erl_errno&lt;/code&gt; がETIMEDOUTに設定され &lt;code&gt;ETIMEDOUT&lt;/code&gt; 。通信プリミティブとは、 &lt;code&gt;connect&lt;/code&gt; 、 &lt;code&gt;accept&lt;/code&gt; 、 &lt;code&gt;recv&lt;/code&gt; 、または &lt;code&gt;send&lt;/code&gt; などのソケットの操作を意味します。</target>
        </trans-unit>
        <trans-unit id="a85fc0308845fa5554e3cce6dc65bbf6089cf9b5" translate="yes" xml:space="preserve">
          <source>Most functions in &lt;code&gt;Erl_Interface&lt;/code&gt; report failures to the caller by returning some otherwise meaningless value (typically &lt;code&gt;NULL&lt;/code&gt; or a negative number). As this only tells you that things did not go well, examine the error code in &lt;code&gt;erl_errno&lt;/code&gt; if you want to find out more about the failure.</source>
          <target state="translated">&lt;code&gt;Erl_Interface&lt;/code&gt; のほとんどの関数は、他の意味のない値（通常は &lt;code&gt;NULL&lt;/code&gt; または負の数）を返すことにより、呼び出し元に失敗を報告します。これはうまくいかなかったことを &lt;code&gt;erl_errno&lt;/code&gt; するだけなので、失敗の詳細を知りたい場合はerl_errnoのエラーコードを調べてください。</target>
        </trans-unit>
        <trans-unit id="6b9a8701c6eef5e39f2cf96b687e2ad091233f9f" translate="yes" xml:space="preserve">
          <source>Most functions in this API are &lt;strong&gt;not&lt;/strong&gt; thread-safe, that is, they &lt;strong&gt;cannot&lt;/strong&gt; be called from arbitrary threads. Functions that are not documented as thread-safe can only be called from driver callbacks or function calls descending from a driver callback call. Notice that driver callbacks can be called from different threads. This, however, is not a problem for any function in this API, as the emulator has control over these threads.</source>
          <target state="translated">このAPIのほとんどの関数&lt;strong&gt;は&lt;/strong&gt;スレッドセーフではあり&lt;strong&gt;ません&lt;/strong&gt;。つまり、任意のスレッドから呼び出す&lt;strong&gt;ことはできません&lt;/strong&gt;。スレッドセーフとして文書化されていない関数は、ドライバーコールバックまたはドライバーコールバック呼び出しからの関数呼び出しからのみ呼び出すことができます。ドライバーのコールバックは異なるスレッドから呼び出せることに注意してください。ただし、エミュレータはこれらのスレッドを制御できるため、これはこのAPIのどの関数にとっても問題にはなりません。</target>
        </trans-unit>
        <trans-unit id="66cf9f2e24e97469377d6bb06bc86d3532009574" translate="yes" xml:space="preserve">
          <source>Most importantly, the object must have been created with a single call to &lt;code&gt;malloc()&lt;/code&gt; (or similar), so that it can later be removed by a single call to &lt;code&gt;free()&lt;/code&gt;. Objects are freed by the registry when it is closed, or when you assign a new value to an object that previously contained a string or binary.</source>
          <target state="translated">最も重要なのは、オブジェクトは &lt;code&gt;malloc()&lt;/code&gt; （または同様の）への1回の呼び出しで作成されている必要があるため、後で &lt;code&gt;free()&lt;/code&gt; への1回の呼び出しでオブジェクトを削除できるようにするためです。オブジェクトは、レジストリが閉じられたとき、または以前に文字列またはバイナリを含んでいたオブジェクトに新しい値を割り当てたときに、レジストリによって解放されます。</target>
        </trans-unit>
        <trans-unit id="259d848432008a34f52bb0dbba925c35f2c8e9d8" translate="yes" xml:space="preserve">
          <source>Most likely, some type of table coordinator already exists. This process should take care of the instrumentation for the table.</source>
          <target state="translated">ほとんどの場合、何らかのタイプのテーブルコーディネータが既に存在している。このプロセスは、テーブルのための計装を担当する必要があります。</target>
        </trans-unit>
        <trans-unit id="d0e2d6f01b9b328d4a5f37c7cbd2074b9468e6ea" translate="yes" xml:space="preserve">
          <source>Most modern operating systems support Unicode filenames in some way. There are many different ways to do this and Erlang by default treats the different approaches differently:</source>
          <target state="translated">ほとんどの最新のオペレーティングシステムは何らかの方法でUnicodeファイル名をサポートしています。これを行う方法はたくさんありますが、デフォルトではErlangは異なるアプローチを扱います。</target>
        </trans-unit>
        <trans-unit id="42ea3df0b70c1046c7bcf6523dedc152b3d519c9" translate="yes" xml:space="preserve">
          <source>Most of the functions expect all input to be normalized to one form, see for example &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt; unicode:characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの関数は、すべての入力が1つの形式に正規化されることを想定しています。たとえば、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt; unicode:characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="94bf990af8b5bba4715948822b6d909da6a73a07" translate="yes" xml:space="preserve">
          <source>Most of the functions expect all input to be normalized to one form, see for example &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt;unicode:characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ほとんどの関数は、すべての入力が1つの形式に正規化されることを期待しています。たとえば、 &lt;code&gt;&lt;a href=&quot;unicode#characters_to_nfc_list-1&quot;&gt;unicode:characters_to_nfc_list/1&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="3acc15056b9b45c5a0b8bb83b1ecaadb55f64f07" translate="yes" xml:space="preserve">
          <source>Most of the functions in this module have one variant with a &lt;code&gt;Timeout&lt;/code&gt; parameter, and one without. If nothing else is specified, the default value &lt;code&gt;infinity&lt;/code&gt; is used when the &lt;code&gt;Timeout&lt;/code&gt; parameter is not given.</source>
          <target state="translated">このモジュールのほとんどの関数には、 &lt;code&gt;Timeout&lt;/code&gt; パラメーターがあるバリアントとないものがあります。他に何も指定されていない場合、 &lt;code&gt;Timeout&lt;/code&gt; パラメーターを指定しないと、デフォルト値の &lt;code&gt;infinity&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="1c21332b5de08b2fbd3d7faeca43f33090fab572" translate="yes" xml:space="preserve">
          <source>Most of the modules in Erlang/OTP are Unicode-unaware in the sense that they have no notion of Unicode and should not have. Typically they handle non-textual or byte-oriented data (such as &lt;code&gt;gen_tcp&lt;/code&gt;).</source>
          <target state="translated">Erlang / OTPのほとんどのモジュールは、Unicodeの概念がなく、あるべきではないという意味で、Unicodeに対応していません。通常、これらは非テキストまたはバイト指向のデータ（ &lt;code&gt;gen_tcp&lt;/code&gt; など）を処理します）を処理します。</target>
        </trans-unit>
        <trans-unit id="76641edebd3126877e42070a39301c6bf778343f" translate="yes" xml:space="preserve">
          <source>Most of the options are common for both the client and the server side, but some of them differs a little. The available &lt;code&gt;option()&lt;/code&gt;s are as follows:</source>
          <target state="translated">ほとんどのオプションはクライアント側とサーバー側の両方に共通ですが、いくつかは少し異なります。使用可能な &lt;code&gt;option()&lt;/code&gt; は次のとおりです。</target>
        </trans-unit>
        <trans-unit id="5e0d4e811a2f740e5d587160a505db4b80acdc72" translate="yes" xml:space="preserve">
          <source>Most of these flags are highly implementation-dependent and can be changed or removed without prior notice.</source>
          <target state="translated">これらのフラグのほとんどは実装に大きく依存しており、予告なしに変更または削除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e7cba0447d8d7195a8296a095d999aca792c4346" translate="yes" xml:space="preserve">
          <source>Most operating systems have a command interpreter or shell, UNIX and Linux have many, Windows has the command prompt. Erlang has its own shell where bits of Erlang code can be written directly, and be evaluated to see what happens (see the &lt;code&gt;shell(3)&lt;/code&gt; manual page in STDLIB).</source>
          <target state="translated">ほとんどのオペレーティングシステムにはコマンドインタープリターまたはシェルがあり、UNIXおよびLinuxには多数あり、Windowsにはコマンドプロンプトがあります。 Erlangには独自のシェルがあり、Erlangコードのビットを直接書き込み、評価して何が起こるかを確認できます（STDLIBの &lt;code&gt;shell(3)&lt;/code&gt; マニュアルページを参照）。</target>
        </trans-unit>
        <trans-unit id="39c2fb5ddc35fb498363b9b722fc5915d7d947f6" translate="yes" xml:space="preserve">
          <source>Most programmers also expect time to be reliable, at least until they realize that the wall clock time on their workstation is off by a minute. Then they set it to the correct time, but most probably not in a smooth way.</source>
          <target state="translated">ほとんどのプログラマーは、少なくともワークステーションの壁時計の時間が1分ずれていることに気づくまでは、時間が信頼できるものであることを期待しています。その後、彼らは正しい時刻に設定しますが、おそらくほとんどの場合、スムーズな方法ではありません。</target>
        </trans-unit>
        <trans-unit id="d49d2009b77de7ac08a0afaec3a6bddcd20dae8e" translate="yes" xml:space="preserve">
          <source>Most programs will be modified during their lifetime: bugs will be fixed, features will be added, optimizations may become necessary, or the code will need to be refactored or cleaned up in other ways to make it easier to work with. But every change to a working program is a risk of introducing new bugs - or reintroducing bugs that had previously been fixed. Having a set of unit tests that you can run with very little effort makes it easy to know that the code still works as it should (this use is called &lt;strong&gt;regression testing&lt;/strong&gt;; see &lt;code&gt;&lt;a href=&quot;#Terminology&quot;&gt;Terminology&lt;/a&gt;&lt;/code&gt;). This goes a long way to reduce the resistance to changing and refactoring code.</source>
          <target state="translated">ほとんどのプログラムはその存続期間中に変更されます。バグが修正されるか、機能が追加されるか、最適化が必要になる場合があります。または、コードをリファクタリングするか、他の方法でクリーンアップして、作業を容易にする必要があります。しかし、動作中のプログラムに変更を加えるたびに、新しいバグが導入されたり、以前に修正されていたバグが再導入されたりするリスクがあります。ほんの少しの労力で実行できる一連の単体テストがあると、コードがまだ正常に機能していることが簡単にわかります（この使用法は&lt;strong&gt;回帰テスト&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。 &lt;code&gt;&lt;a href=&quot;#Terminology&quot;&gt;Terminology&lt;/a&gt;&lt;/code&gt; 参照してください））。これは、コードの変更とリファクタリングへの抵抗を減らすのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="22312ab51d7c6c1f35dbc3ee3223deb0c786bd3e" translate="yes" xml:space="preserve">
          <source>Most role-specific behaviour is implemented by the user. How a node advertises itself at capabilities exchange is determined by user configuration.</source>
          <target state="translated">ほとんどのロール固有の動作はユーザーによって実装されます。ノードがどのように能力交換で自分自身を広告するかは、ユーザの設定によって決定されます。</target>
        </trans-unit>
        <trans-unit id="86e32c3cb060fb634a619eef0dd5d1eef4747958" translate="yes" xml:space="preserve">
          <source>Most systems handle variable &lt;code&gt;LC_CTYPE&lt;/code&gt; before &lt;code&gt;LANG&lt;/code&gt;, so if that is set, it must be set to &lt;code&gt;UTF-8&lt;/code&gt;:</source>
          <target state="translated">ほとんどのシステムは &lt;code&gt;LANG&lt;/code&gt; の前に変数 &lt;code&gt;LC_CTYPE&lt;/code&gt; を処理するため、それが設定されている場合は &lt;code&gt;UTF-8&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="56244bcac54ef39e9d4826088a4c9d7b27054731" translate="yes" xml:space="preserve">
          <source>Moves the copy of table &lt;code&gt;Tab&lt;/code&gt; from node &lt;code&gt;From&lt;/code&gt; to node &lt;code&gt;To&lt;/code&gt;.</source>
          <target state="translated">テーブル &lt;code&gt;Tab&lt;/code&gt; のコピーをノード &lt;code&gt;From&lt;/code&gt; からノード &lt;code&gt;To&lt;/code&gt; に移動します。</target>
        </trans-unit>
        <trans-unit id="8b30cc0ae00fc3d8210b07f3cf78930cce84bbd4" translate="yes" xml:space="preserve">
          <source>Mro</source>
          <target state="translated">Mro</target>
        </trans-unit>
        <trans-unit id="b1fee5a1630c4cf74b49738a6b5de770a03930a2" translate="yes" xml:space="preserve">
          <source>Much of the work involved is automated. This includes &lt;code&gt;get-next&lt;/code&gt; processing and &lt;code&gt;RowStatus&lt;/code&gt; handling.</source>
          <target state="translated">関連する作業の多くは自動化されています。これには、 &lt;code&gt;get-next&lt;/code&gt; 処理と &lt;code&gt;RowStatus&lt;/code&gt; 処理が含まれます。</target>
        </trans-unit>
        <trans-unit id="28dd4fba871bafc6251102ec641d8e20bb52017b" translate="yes" xml:space="preserve">
          <source>Multi-Round-Time-Out AVP</source>
          <target state="translated">マルチラウンドタイムアウトAVP</target>
        </trans-unit>
        <trans-unit id="6fa491dd40bfcdce2b73e2657ea80c4608fb14b5" translate="yes" xml:space="preserve">
          <source>Multi-Time Warp Mode</source>
          <target state="translated">マルチタイムワープモード</target>
        </trans-unit>
        <trans-unit id="e1f017ea475a1c73e4195e0bff09e16cde8df8aa" translate="yes" xml:space="preserve">
          <source>Multi-file error report logging is used to store error messages received by &lt;code&gt;error_logger&lt;/code&gt;. The error messages are stored in several files and each file is smaller than a specified number of kilobytes. No more than a specified number of files exist at the same time. The logging is very fast, as each error message is written as a binary term.</source>
          <target state="translated">複数ファイルのエラーレポートロギングは、 &lt;code&gt;error_logger&lt;/code&gt; が受信したエラーメッセージを保存するために使用されます。エラーメッセージはいくつかのファイルに保存され、各ファイルは指定されたキロバイト数よりも小さくなります。同時に存在するのは、指定された数を超えるファイルはありません。各エラーメッセージはバイナリ用語として書き込まれるため、ロギングは非常に高速です。</target>
        </trans-unit>
        <trans-unit id="d5421d352983c0b9fc43e3a80915204a161e3a58" translate="yes" xml:space="preserve">
          <source>Multiblock carriers are used for storage of several blocks.</source>
          <target state="translated">マルチブロックキャリアは、複数のブロックを格納するために使用されます。</target>
        </trans-unit>
        <trans-unit id="1fec23604015b2ecb5fcc1e2452ac43e2d5d2bf0" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;--inherits&lt;/code&gt; options can be specified.</source>
          <target state="translated">複数の &lt;code&gt;--inherits&lt;/code&gt; オプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="41efb021af75ddc40ae618d768069c0d301604b2" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;-i&lt;/code&gt; options can be specified.</source>
          <target state="translated">複数の &lt;code&gt;-i&lt;/code&gt; オプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="bdf347cf86397485cf04a5bdb8b11bd1e69ffecc" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;&lt;a href=&quot;#disconnect_cb&quot;&gt;disconnect_cb&lt;/a&gt;&lt;/code&gt; options can be specified, in which case the corresponding callbacks are applied until one of them returns a value other than &lt;code&gt;ignore&lt;/code&gt;. All callbacks returning &lt;code&gt;ignore&lt;/code&gt; is equivalent to not having configured them.</source>
          <target state="translated">複数の &lt;code&gt;&lt;a href=&quot;#disconnect_cb&quot;&gt;disconnect_cb&lt;/a&gt;&lt;/code&gt; オプションを指定できます。その場合、対応するコールバックは、それらのいずれかが &lt;code&gt;ignore&lt;/code&gt; 以外の値を返すまで適用されます。 &lt;code&gt;ignore&lt;/code&gt; 返すすべてのコールバックは、それらを構成していないことと同じです。</target>
        </trans-unit>
        <trans-unit id="204798c1114f47e98e981a537b711d39b1311eda" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;include&lt;/code&gt; options can be specified.</source>
          <target state="translated">複数の &lt;code&gt;include&lt;/code&gt; オプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="6e0d1680057ecce93b665efdb88bfc3e3c1e5449" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;inherits&lt;/code&gt; options can be specified.</source>
          <target state="translated">複数の &lt;code&gt;inherits&lt;/code&gt; オプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="ce8d65e7ae8dec4ab75e8c06bdc2eceb56c1abf6" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;ip&lt;/code&gt; options can be specified for a multihomed peer. If none are specified then the values of &lt;code&gt;Host-IP-Address&lt;/code&gt; in the &lt;code&gt;diameter_service&lt;/code&gt; record are used. Option &lt;code&gt;port&lt;/code&gt; defaults to 3868 for a listening transport and 0 for a connecting transport.</source>
          <target state="translated">マルチホームピアに複数の &lt;code&gt;ip&lt;/code&gt; オプションを指定できます。何も指定されていない場合は、 &lt;code&gt;diameter_service&lt;/code&gt; レコードの &lt;code&gt;Host-IP-Address&lt;/code&gt; の値が使用されます。オプション &lt;code&gt;port&lt;/code&gt; デフォルトは、リスニングトランスポートの場合は3868、接続トランスポートの場合は0です。</target>
        </trans-unit>
        <trans-unit id="088c280ad46a55ad788090a74438dc30fa9e951f" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;sys&lt;/code&gt; traceable replies</source>
          <target state="translated">複数の &lt;code&gt;sys&lt;/code&gt; 追跡可能な応答</target>
        </trans-unit>
        <trans-unit id="f06b4f8d09b8eaee5c332e885ceba194958a51dc" translate="yes" xml:space="preserve">
          <source>Multiple &lt;code&gt;transport_module&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#transport_config&quot;&gt;transport_config&lt;/a&gt;&lt;/code&gt; options are allowed. The order of these is significant in this case (and only in this case), a &lt;code&gt;transport_module&lt;/code&gt; being paired with the first &lt;code&gt;&lt;a href=&quot;#transport_config&quot;&gt;transport_config&lt;/a&gt;&lt;/code&gt; following it in the options list, or the default value for trailing modules. Transport starts will be attempted with each of the modules in order until one establishes a connection within the corresponding timeout (see below) or all fail.</source>
          <target state="translated">複数の &lt;code&gt;transport_module&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#transport_config&quot;&gt;transport_config&lt;/a&gt;&lt;/code&gt; オプションを使用できます。これらの順序は、この場合に有意である（そしてこの場合のみ）、 &lt;code&gt;transport_module&lt;/code&gt; は最初と対になっている &lt;code&gt;&lt;a href=&quot;#transport_config&quot;&gt;transport_config&lt;/a&gt;&lt;/code&gt; オプションリストでそれを次、またはモジュールを後続のデフォルト値。トランスポートの開始は、対応するタイムアウト（以下を参照）内で接続が確立されるか、すべてが失敗するまで、各モジュールで順番に試行されます。</target>
        </trans-unit>
        <trans-unit id="8a333a79ebe5ff34c8d76c9900da678f2524bef2" translate="yes" xml:space="preserve">
          <source>Multiple Erlang nodes implementing the same Diameter node should be configured with different sequence masks to ensure that each node uses a unique range of End-to-End and Hop-by-Hop Identifiers for outgoing requests.</source>
          <target state="translated">同じDiameterノードを実装している複数のErlangノードは、それぞれのノードがユニークな範囲のEnd-to-EndとHop-by-Hop Identifierを使ってリクエストを送信するように、異なるシーケンスマスクを設定しなければなりません。</target>
        </trans-unit>
        <trans-unit id="918e90f086f758494202e7c1057dc9d090319e70" translate="yes" xml:space="preserve">
          <source>Multiple connections are independent and governed by their own peer and watchdog state machines.</source>
          <target state="translated">複数の接続は独立しており、それぞれのピアおよびウォッチドッグステートマシンによって管理されています。</target>
        </trans-unit>
        <trans-unit id="39c7dc292ea6c4ca667c03d03c78abb261ad3cd3" translate="yes" xml:space="preserve">
          <source>Multiple connections to the same peer is possible. ICMP messages are not interpreted.</source>
          <target state="translated">同一ピアへの複数接続が可能です。ICMPメッセージは解釈されません。</target>
        </trans-unit>
        <trans-unit id="47cd1d5d6231055845e7ad6743d6544e8318516d" translate="yes" xml:space="preserve">
          <source>Multiple entries of this type are allowed.</source>
          <target state="translated">このタイプの複数のエントリが許可されています。</target>
        </trans-unit>
        <trans-unit id="38d744a92105856b5a02b866c88de04b40d669df" translate="yes" xml:space="preserve">
          <source>Multiple generic named time-outs</source>
          <target state="translated">複数の一般的な名前付きタイムアウト</target>
        </trans-unit>
        <trans-unit id="8b65c69f112a6d8c5b4685ec30e6ffdcf36c27c8" translate="yes" xml:space="preserve">
          <source>Multiple, thread-specific instances of the allocator. This option has only effect on the runtime system with SMP support. Default behavior on the runtime system with SMP support is &lt;code&gt;NoSchedulers+1&lt;/code&gt; instances. Each scheduler uses a lock-free instance of its own and other threads use a common instance.</source>
          <target state="translated">アロケータの複数のスレッド固有インスタンス。このオプションは、SMPをサポートするランタイムシステムにのみ影響します。SMPをサポートするランタイムシステムのデフォルトの動作は &lt;code&gt;NoSchedulers+1&lt;/code&gt; です。インスタンスです。各スケジューラは独自のロックフリーインスタンスを使用し、他のスレッドは共通のインスタンスを使用します。</target>
        </trans-unit>
        <trans-unit id="2f6d5d47eb24e552ff49945236f4445a4cf174f2" translate="yes" xml:space="preserve">
          <source>Multiple-line comments as in C, &lt;code&gt;/* ... */&lt;/code&gt;, are supported.</source>
          <target state="translated">Cのような複数行コメント &lt;code&gt;/* ... */&lt;/code&gt; がサポートされています。</target>
        </trans-unit>
        <trans-unit id="1914a937f0807f0283547ebd09066fb830cf5d9a" translate="yes" xml:space="preserve">
          <source>Must be seconds since or before Unix time epoch, which is 1970-01-01 00:00 UTC.</source>
          <target state="translated">1970-01-01 00:00 UTCのUnixタイムエポックから、またはそれ以前の秒数でなければなりません。</target>
        </trans-unit>
        <trans-unit id="0a004964de291cbe488f9f8bc3e151f3bcd7aa7b" translate="yes" xml:space="preserve">
          <source>Must be set to &lt;code&gt;0&lt;/code&gt; for a regular NIF. If the emulator was built with dirty scheduler support enabled, &lt;code&gt;flags&lt;/code&gt; can be set to either &lt;code&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; if the job is expected to be CPU-bound, or &lt;code&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt; for jobs that will be I/O-bound. If dirty scheduler threads are not available in the emulator, an attempt to schedule such a job results in a &lt;code&gt;notsup&lt;/code&gt; exception.</source>
          <target state="translated">通常のNIFの場合は &lt;code&gt;0&lt;/code&gt; に設定する必要があります。ダーティスケジューラのサポートを有効にしてエミュレータを構築した場合、 &lt;code&gt;flags&lt;/code&gt; は、ジョブがCPUにバインドされることが予想される場合は &lt;code&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt; 、またはI / Oがバインドされるジョブの場合は &lt;code&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; 設定できます。ダーティスケジューラスレッドがエミュレータで使用できない場合、そのようなジョブをスケジュールしようとすると、 &lt;code&gt;notsup&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="d99a3b8cea5bf9690f0427b0ac08c915ac93008c" translate="yes" xml:space="preserve">
          <source>Must be used with and be later than &lt;code&gt;StartTime&lt;/code&gt;. Values of &lt;code&gt;StopTime&lt;/code&gt; in the future are valid. This parameter is of type &lt;code&gt;dateTime&lt;/code&gt; and compliant to RFC 3339. Implementations must support time zones.</source>
          <target state="translated">&lt;code&gt;StartTime&lt;/code&gt; と一緒に使用し、StartTimeより後にする必要があります。将来の &lt;code&gt;StopTime&lt;/code&gt; の値は有効です。このパラメーターのタイプは &lt;code&gt;dateTime&lt;/code&gt; で、RFC 3339に準拠しています。実装はタイムゾーンをサポートする必要があります。</target>
        </trans-unit>
        <trans-unit id="343d9e25c8247ada5612875ca81c9f7947f3e480" translate="yes" xml:space="preserve">
          <source>Must denote a valid date and time.</source>
          <target state="translated">有効な日時を示す必要があります。</target>
        </trans-unit>
        <trans-unit id="1fa6f6533bff6aa5b9533df23cf9344981b03f0c" translate="yes" xml:space="preserve">
          <source>Must initiate data for a port. We do not create any sockets here, only initialize data structures.</source>
          <target state="translated">ポートのデータを開始する必要があります。ここではソケットは作成せず、データ構造を初期化するだけです。</target>
        </trans-unit>
        <trans-unit id="ac5b330f1d3ccf5e6f1d498219f9f2b403798468" translate="yes" xml:space="preserve">
          <source>Must of the functions below has an optional &lt;code&gt;Extra&lt;/code&gt; argument (e.g. &lt;code&gt;&lt;a href=&quot;#unexpected_trans&quot;&gt;handle_unexpected_trans/4&lt;/a&gt;&lt;/code&gt;). The functions which takes this argument will be called if and only if one of the functions &lt;code&gt;&lt;a href=&quot;megaco#receive_message&quot;&gt;receive_message/5&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;megaco#process_received_message&quot;&gt;process_received_message/5&lt;/a&gt;&lt;/code&gt; was called with the &lt;code&gt;Extra&lt;/code&gt; argument different than &lt;code&gt;ignore_extra&lt;/code&gt;.</source>
          <target state="translated">以下の関数の必須 &lt;code&gt;&lt;a href=&quot;#unexpected_trans&quot;&gt;handle_unexpected_trans/4&lt;/a&gt;&lt;/code&gt; は、オプションの &lt;code&gt;Extra&lt;/code&gt; 引数があります（例：handle_unexpected_trans / 4）。この引数を取る関数は、関数 &lt;code&gt;&lt;a href=&quot;megaco#receive_message&quot;&gt;receive_message/5&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;megaco#process_received_message&quot;&gt;process_received_message/5&lt;/a&gt;&lt;/code&gt; の 1つが &lt;code&gt;ignore_extra&lt;/code&gt; とは異なる &lt;code&gt;Extra&lt;/code&gt; 引数で呼び出された場合にのみ呼び出されます。</target>
        </trans-unit>
        <trans-unit id="7ffc4b83d53a4262e348ddeab52e859129df93ad" translate="yes" xml:space="preserve">
          <source>Mutual exclusion lock. Used for synchronizing access to shared data. Only one thread at a time can lock a mutex.</source>
          <target state="translated">相互排除ロック。共有データへのアクセスを同期させるために使用されます。一度に1つのスレッドだけがミューテックスをロックすることができます。</target>
        </trans-unit>
        <trans-unit id="928b7c48a60ad93b81bc3bee9d274c5f2aed9ad3" translate="yes" xml:space="preserve">
          <source>Myanmar</source>
          <target state="translated">Myanmar</target>
        </trans-unit>
        <trans-unit id="b51a60734da64be0e618bacbea2865a8a7dcd669" translate="yes" xml:space="preserve">
          <source>N</source>
          <target state="translated">N</target>
        </trans-unit>
        <trans-unit id="19a21faf21159c116d212d930e958b4e48e27561" translate="yes" xml:space="preserve">
          <source>N | 0</source>
          <target state="translated">N | 0</target>
        </trans-unit>
        <trans-unit id="53110edb9232b435b7ecd44976ac1b46ea9cd99d" translate="yes" xml:space="preserve">
          <source>N'</source>
          <target state="translated">N'</target>
        </trans-unit>
        <trans-unit id="5372a9a248f9a06cc2f439c7194a9046904b1126" translate="yes" xml:space="preserve">
          <source>N/A means not accessible.</source>
          <target state="translated">N/Aはアクセスできないことを意味します。</target>
        </trans-unit>
        <trans-unit id="0604b491f5fa41cfffff730fb0a22dcd65418e3f" translate="yes" xml:space="preserve">
          <source>N1</source>
          <target state="translated">N1</target>
        </trans-unit>
        <trans-unit id="65bb4fc755e8bb11ccb0ee8cbfedee5528535446" translate="yes" xml:space="preserve">
          <source>N2</source>
          <target state="translated">N2</target>
        </trans-unit>
        <trans-unit id="70c7d4c52124c93b637e59dd435f7ca991164c3f" translate="yes" xml:space="preserve">
          <source>N3</source>
          <target state="translated">N3</target>
        </trans-unit>
        <trans-unit id="ce71d863e71837e0ee26dc56978e19026728b6e0" translate="yes" xml:space="preserve">
          <source>N4</source>
          <target state="translated">N4</target>
        </trans-unit>
        <trans-unit id="d3406dc507b393378bb88f5316f07b7c31cea1fd" translate="yes" xml:space="preserve">
          <source>N5</source>
          <target state="translated">N5</target>
        </trans-unit>
        <trans-unit id="ee2493b90e1342d0219ace167d7fdfeb9ab6a044" translate="yes" xml:space="preserve">
          <source>NC</source>
          <target state="translated">NC</target>
        </trans-unit>
        <trans-unit id="c03fd3d8effb17b3c70ec90a280bc5eddbf1a748" translate="yes" xml:space="preserve">
          <source>NETCONF client module compliant with RFC 6241, NETCONF Configuration Protocol, and RFC 6242, Using the NETCONF Configuration Protocol over Secure SHell (SSH), and with support for RFC 5277, NETCONF Event Notifications.</source>
          <target state="translated">RFC 6241、NETCONF Configuration Protocol、RFC 6242、Using NETCONF Configuration Protocol over Secure SHell (SSH)に準拠した NETCONF クライアントモジュールで、RFC 5277、NETCONF Event Notifications をサポートしています。</target>
        </trans-unit>
        <trans-unit id="66bebc7980918515be0940e1250f00a7cdb2a30c" translate="yes" xml:space="preserve">
          <source>NETCONF client module.</source>
          <target state="translated">NETCONF クライアントモジュール。</target>
        </trans-unit>
        <trans-unit id="b64c6c7cdb62874f32c03bc2fb48dabf64192bed" translate="yes" xml:space="preserve">
          <source>NETCONF sessions can either be opened by a single call to &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1,2&lt;/a&gt;&lt;/code&gt; or by a call to &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1,2&lt;/a&gt;&lt;/code&gt; followed by one or more calls to &lt;code&gt;&lt;a href=&quot;#session-1&quot;&gt;session/1,2,3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">NETCONFセッションは、 &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1,2&lt;/a&gt;&lt;/code&gt; への単一の呼び出し、または &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1,2&lt;/a&gt;&lt;/code&gt; への呼び出しと、それに続く &lt;code&gt;&lt;a href=&quot;#session-1&quot;&gt;session/1,2,3&lt;/a&gt;&lt;/code&gt; への1つ以上の呼び出しで開くことができます。</target>
        </trans-unit>
        <trans-unit id="6cc17604486656396f55bda1048a9ca72c9fb9fd" translate="yes" xml:space="preserve">
          <source>NETCONF traffic is not logged.</source>
          <target state="translated">NETCONF トラフィックはログに記録されません。</target>
        </trans-unit>
        <trans-unit id="57b93faae8cfee3611b3f0966ad1cb1ad092f30f" translate="yes" xml:space="preserve">
          <source>NIF libraries are loaded by calling &lt;code&gt;erlang:load_nif/2&lt;/code&gt;, with the name of the shared library as argument. The second argument can be any term that will be passed on to the library and used for initialization:</source>
          <target state="translated">NIFライブラリは、共有ライブラリの名前を引数として &lt;code&gt;erlang:load_nif/2&lt;/code&gt; を呼び出すことによってロードされます。2番目の引数は、ライブラリに渡され、初期化に使用される任意の用語です。</target>
        </trans-unit>
        <trans-unit id="f7f5adb8aa2205182a8ae0d0874dfd09d3d15439" translate="yes" xml:space="preserve">
          <source>NIFs were introduced in Erlang/OTP R13B03 as an experimental feature. It is a simpler and more efficient way of calling C-code than using port drivers. NIFs are most suitable for synchronous functions, such as &lt;code&gt;foo&lt;/code&gt; and &lt;code&gt;bar&lt;/code&gt; in the example, that do some relatively short calculations without side effects and return the result.</source>
          <target state="translated">NIFは実験的な機能としてErlang / OTP R13B03で導入されました。これは、ポートドライバーを使用するよりも簡単で効率的なCコードの呼び出し方法です。NIFは、例の &lt;code&gt;foo&lt;/code&gt; や &lt;code&gt;bar&lt;/code&gt; など、副作用なしに比較的短い計算を実行して結果を返す同期関数に最適です。</target>
        </trans-unit>
        <trans-unit id="56815d5677a168f7684f66e9c1b9a9615a0991c1" translate="yes" xml:space="preserve">
          <source>NOTE: It is important that source on the windows disk.</source>
          <target state="translated">注:Windows ディスク上のソースが重要です。</target>
        </trans-unit>
        <trans-unit id="dc50c726c2ad84ad90f8b5f7018cdda7d604c92c" translate="yes" xml:space="preserve">
          <source>NPTL glibc is strongly preferred, or a LinuxThreads glibc configured for &quot;floating stacks&quot;. Old non-floating stacks glibcs have a fundamental problem that makes HiPE support and threads support mutually exclusive.</source>
          <target state="translated">NPTL glibc、または「フローティング・スタック」用に構成された LinuxThreads glibc が強く推奨されます。古い非フローティングスタック用の glibc には、HiPE サポートとスレッドサポートを相互に排他的にしてしまう根本的な問題があります。</target>
        </trans-unit>
        <trans-unit id="a707e05e3576a19dcc3c4c0b3a0f37a4d4a79406" translate="yes" xml:space="preserve">
          <source>NUMA node identifiers are system wide. That is, each NUMA node on the system must have a unique identifier. Processor identifiers are also system wide. Core identifiers are processor wide. Thread identifiers are core wide.</source>
          <target state="translated">NUMAノードの識別子はシステム全体のものです。つまり、システム上の各NUMAノードは一意の識別子を持たなければなりません。プロセッサ識別子もシステムワイドです。コア識別子はプロセッサワイドです。スレッド識別子はコアワイドです。</target>
        </trans-unit>
        <trans-unit id="96ca732e61f2bdd45036bc7061a358ac23542609" translate="yes" xml:space="preserve">
          <source>NUMERIC (precision, scale), DECIMAL (precision, scale), DEC (precision, scale ) precision - total number of digits, scale - total number of decimal places</source>
          <target state="translated">目標(精度、目盛)、DECIMAL(精度、目盛)、DEC(精度、目盛)精度-桁数の合計、目盛-小数点以下の桁数の合計。</target>
        </trans-unit>
        <trans-unit id="5c4cdee3ac47988555d2e4826cdf0ce2779c7bcd" translate="yes" xml:space="preserve">
          <source>Nabataean</source>
          <target state="translated">Nabataean</target>
        </trans-unit>
        <trans-unit id="49842eacbc9108e11c13f4f1a82e44c7d5e94e3e" translate="yes" xml:space="preserve">
          <source>Name = atom()</source>
          <target state="translated">名前=atom()</target>
        </trans-unit>
        <trans-unit id="26e8e343acf0543965774a3ea971fea3f354d4ad" translate="yes" xml:space="preserve">
          <source>Name Resolving</source>
          <target state="translated">名前解決</target>
        </trans-unit>
        <trans-unit id="09b603578ce92bd3efd6f652e0314619369218a8" translate="yes" xml:space="preserve">
          <source>Name and value of a TFTP option.</source>
          <target state="translated">TFTP オプションの名前と値。</target>
        </trans-unit>
        <trans-unit id="c0f9e377e9e709bae968b8e8e63298cf66b15bba" translate="yes" xml:space="preserve">
          <source>Name collisions is another unwanted effect that can occur in multi file-compilation. The compiler solves this problem in one of two ways:</source>
          <target state="translated">名前の衝突は、マルチファイルコンパイルで発生するもう一つの望ましくない影響です。コンパイラはこの問題を2つの方法のうちの1つで解決します。</target>
        </trans-unit>
        <trans-unit id="8fcf8ecda81b9b18e00c6dd548525fd833fd2355" translate="yes" xml:space="preserve">
          <source>Name identifying a Diameter application in service configuration. Passed to &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; when sending requests defined by the application.</source>
          <target state="translated">サービス構成でDiameterアプリケーションを識別する名前。アプリケーションで定義されたリクエストを送信するときに &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;call/4&lt;/a&gt;&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="71819df6815dce60c7b749d24399fc212153d954" translate="yes" xml:space="preserve">
          <source>Name listing, that is, gives a list of all names registered on the host</source>
          <target state="translated">ホストに登録されているすべての名前のリストを表示します。</target>
        </trans-unit>
        <trans-unit id="8558c62ee07217f1a409e574c1eed556f16d0d5a" translate="yes" xml:space="preserve">
          <source>Name of a configuration parameter.</source>
          <target state="translated">設定パラメータの名前。</target>
        </trans-unit>
        <trans-unit id="fdd675b8843afe95f166148e521e9af5572f2c5b" translate="yes" xml:space="preserve">
          <source>Name of a service as passed to &lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; and with which the service is identified. There can be at most one service with a given name on a given node. Note that &lt;code&gt;erlang:make_ref/0&lt;/code&gt; can be used to generate a service name that is somewhat unique.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#start_service-2&quot;&gt;start_service/2&lt;/a&gt;&lt;/code&gt; に渡され、サービスが識別されるサービスの名前。指定されたノードには、指定された名前のサービスが1つしか存在できません。 &lt;code&gt;erlang:make_ref/0&lt;/code&gt; を使用して、ややユニークなサービス名を生成できることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b9e1cf8d6c3186f4d60ebb503a782d0a2af71404" translate="yes" xml:space="preserve">
          <source>Name of an application included in the release.</source>
          <target state="translated">リリースに含まれるアプリケーションの名前。</target>
        </trans-unit>
        <trans-unit id="8f09bbb27e998d8b4e1d54c80a6e9f9e419ecbbe" translate="yes" xml:space="preserve">
          <source>Name of an encode/decode module for the Diameter messages defined by the application. These modules are generated from files whose format is documented in &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;diameter_dict(4)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">アプリケーションによって定義されたDiameterメッセージのエンコード/デコードモジュールの名前。これらのモジュールは、その形式が &lt;code&gt;&lt;a href=&quot;diameter_dict&quot;&gt;diameter_dict(4)&lt;/a&gt;&lt;/code&gt; に記載されているファイルから生成されます。</target>
        </trans-unit>
        <trans-unit id="fea55da9488bc6b080a2d195d952706c2922e0f1" translate="yes" xml:space="preserve">
          <source>Name of another &lt;code&gt;.config&lt;/code&gt; file. Extension &lt;code&gt;.config&lt;/code&gt; can be omitted. It is recommended to use absolute paths. If a relative path is used, &lt;code&gt;File&lt;/code&gt; is searched, first, relative from &lt;code&gt;sys.config&lt;/code&gt; directory, then relative to the current working directory of the emulator, for backward compatibility. This allow to use a &lt;code&gt;sys.config&lt;/code&gt; pointing out other &lt;code&gt;.config&lt;/code&gt; files in a release or in a node started manually using &lt;code&gt;-config ...&lt;/code&gt; with same result whatever the current working directory.</source>
          <target state="translated">別の &lt;code&gt;.config&lt;/code&gt; ファイルの名前。拡張子 &lt;code&gt;.config&lt;/code&gt; は省略できます。絶対パスを使用することをお勧めします。相対パスを使用する場合、後方互換性のために、最初に &lt;code&gt;sys.config&lt;/code&gt; ディレクトリから、次にエミュレータの現在の作業ディレクトリからの相対で &lt;code&gt;File&lt;/code&gt; が検索されます。これにより、リリース内または &lt;code&gt;-config ...&lt;/code&gt; を使用して手動で開始されたノード内の他の &lt;code&gt;.config&lt;/code&gt; ファイルを指す &lt;code&gt;sys.config&lt;/code&gt; を使用して、現在の作業ディレクトリが何であっても同じ結果になります。</target>
        </trans-unit>
        <trans-unit id="6861f1ccaff61ef5f193977a356660fc3597d944" translate="yes" xml:space="preserve">
          <source>Name of the module implementing the service-specific parts of the channel.</source>
          <target state="translated">チャネルのサービス固有の部分を実装するモジュールの名前です。</target>
        </trans-unit>
        <trans-unit id="22d1ae1c673a94829dfb8e83a7bb9cf9e8965d80" translate="yes" xml:space="preserve">
          <source>Name of the node that the event originated from (only relevant for &lt;code&gt;Common Test&lt;/code&gt; Master event handlers).</source>
          <target state="translated">イベントの発生元のノードの名前（ &lt;code&gt;Common Test&lt;/code&gt; Masterイベントハンドラーにのみ関連）。</target>
        </trans-unit>
        <trans-unit id="b760b08100c634abc56d0ded647804bdc7f195fd" translate="yes" xml:space="preserve">
          <source>Name of the other node. This field is only mandatory when this node initiates the connection. That is, when connection is set up via &lt;code&gt;&lt;a href=&quot;#setup&quot;&gt;setup/5&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">他のノードの名前。このフィールドは、このノードが接続を開始するときにのみ必須です。つまり、接続が &lt;code&gt;&lt;a href=&quot;#setup&quot;&gt;setup/5&lt;/a&gt;&lt;/code&gt; を介して設定されている場合です。</target>
        </trans-unit>
        <trans-unit id="dc0f0987cfc3071fee54739de9248fcf0b3b84b9" translate="yes" xml:space="preserve">
          <source>Name of the profile, see &lt;code&gt;&lt;a href=&quot;#DATA_TYPES&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt;. This option is mandatory.</source>
          <target state="translated">プロファイルの名前 &lt;code&gt;&lt;a href=&quot;#DATA_TYPES&quot;&gt;DATA TYPES&lt;/a&gt;&lt;/code&gt; 参照してください。このオプションは必須です。</target>
        </trans-unit>
        <trans-unit id="7ca26e64b9064a42da13098416e3e7bb4bf4ed2c" translate="yes" xml:space="preserve">
          <source>Name of the reporting supervisor.</source>
          <target state="translated">報告責任者の名前。</target>
        </trans-unit>
        <trans-unit id="dfdc16cf0a3aafa431b5fbcdc7de5f060dd8e75e" translate="yes" xml:space="preserve">
          <source>Name of the security data file. The filename can either be absolute or relative to the &lt;code&gt;server_root&lt;/code&gt;. This file is used to store persistent data for module &lt;code&gt;mod_security&lt;/code&gt;.</source>
          <target state="translated">セキュリティデータファイルの名前。ファイル名は、絶対 &lt;code&gt;server_root&lt;/code&gt; またはserver_rootに対する相対パスのいずれかです。このファイルは、モジュール &lt;code&gt;mod_security&lt;/code&gt; の永続データを格納するために使用されます。</target>
        </trans-unit>
        <trans-unit id="815591c3d2946d084be9c0e9370d8e5d2a5e8031" translate="yes" xml:space="preserve">
          <source>Name of the user callback module. See the the reference manual for megaco_user for more info.</source>
          <target state="translated">ユーザ・コールバック・モジュールの名前。詳細は megaco_user のリファレンスマニュアルを参照してください。</target>
        </trans-unit>
        <trans-unit id="f29ab265b46a1c65a2110325442c0296db3b5e7b" translate="yes" xml:space="preserve">
          <source>Name specification to use when starting a &lt;code&gt;gen_statem&lt;/code&gt; server. See &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt; below.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; サーバーの起動時に使用する名前の指定。下記の &lt;code&gt;&lt;a href=&quot;#start_link-3&quot;&gt;start_link/3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#type-server_ref&quot;&gt;server_ref()&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="b8f752f803e242b87f3c03a4082c687998ac3da7" translate="yes" xml:space="preserve">
          <source>Named lock or named set of locks (classes). The same name used for initializing the lock in the VM.</source>
          <target state="translated">名前付きロックまたは名前付きロックのセット(クラス)。VM内のロックの初期化に使用されるのと同じ名前です。</target>
        </trans-unit>
        <trans-unit id="2b7c08c3ab75f37e2da656c1aab228f5f3a793b1" translate="yes" xml:space="preserve">
          <source>Names</source>
          <target state="translated">Names</target>
        </trans-unit>
        <trans-unit id="28c4c1865ec1cbfe19fb070c31f8a53818589235" translate="yes" xml:space="preserve">
          <source>Names consist of up to 32 alphanumeric characters and underscores, but must start with a non-digit. Named capturing parentheses are still allocated numbers as well as names, exactly as if the names were not present. The &lt;code&gt;capture&lt;/code&gt; specification to &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt; run/3&lt;/a&gt;&lt;/code&gt; can use named values if they are present in the regular expression.</source>
          <target state="translated">名前は最大32文字の英数字とアンダースコアで構成されますが、数字以外で始める必要があります。名前付きキャプチャ括弧には、名前が存在しない場合とまったく同じように、名前だけでなく番号も割り当てられます。 &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt; run/3&lt;/a&gt;&lt;/code&gt; の &lt;code&gt;capture&lt;/code&gt; 仕様では、名前付きの値が正規表現に存在する場合、それらを使用できます。</target>
        </trans-unit>
        <trans-unit id="e9dd77b6e1709773eb7654ae6b320bce9c21508d" translate="yes" xml:space="preserve">
          <source>Names consist of up to 32 alphanumeric characters and underscores, but must start with a non-digit. Named capturing parentheses are still allocated numbers as well as names, exactly as if the names were not present. The &lt;code&gt;capture&lt;/code&gt; specification to &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; can use named values if they are present in the regular expression.</source>
          <target state="translated">名前は最大32文字の英数字とアンダースコアで構成されますが、数字以外で始まる必要があります。名前付きのキャプチャ括弧は、名前が存在しない場合とまったく同じように、名前だけでなく番号も割り当てられます。 &lt;code&gt;&lt;a href=&quot;#run-3&quot;&gt;run/3&lt;/a&gt;&lt;/code&gt; への &lt;code&gt;capture&lt;/code&gt; 仕様は、正規表現に存在する場合、名前付き値を使用できます。</target>
        </trans-unit>
        <trans-unit id="7093792812d2bcab51e7c92258df5d9e6b4b018a" translate="yes" xml:space="preserve">
          <source>Names of files needed by the test</source>
          <target state="translated">テストに必要なファイル名</target>
        </trans-unit>
        <trans-unit id="7257f798528c7c674ee2f8465b8c5680983ef6ca" translate="yes" xml:space="preserve">
          <source>Names of programs to be executed during the test</source>
          <target state="translated">テスト中に実行するプログラム名</target>
        </trans-unit>
        <trans-unit id="8df9c18f0f6605c9864c1c03438f7d9bd20d3dfe" translate="yes" xml:space="preserve">
          <source>Names used to identify capturing subpatterns need not be unique. This can be helpful for certain types of pattern when it is known that only one instance of the named subpattern can ever be matched. More details of named subpatterns are provided below.</source>
          <target state="translated">捕獲サブパターンを識別するために使用される名前は、一意である必要はありません。これは、名前付きサブパターンの1つのインスタンスしかマッチしないことがわかっている場合に、ある種のパターンに役立ちます。名前付きサブパターンの詳細を以下に示す。</target>
        </trans-unit>
        <trans-unit id="400c3476c738eefb94528ac0d99970ee7cad1461" translate="yes" xml:space="preserve">
          <source>Nameservers</source>
          <target state="translated">Nameservers</target>
        </trans-unit>
        <trans-unit id="d081bf458b12ded79224fc426e9b704fda3eb830" translate="yes" xml:space="preserve">
          <source>Nanoseconds</source>
          <target state="translated">Nanoseconds</target>
        </trans-unit>
        <trans-unit id="69fd8f514808c906504e870b76d0ad25cb1a2810" translate="yes" xml:space="preserve">
          <source>Narrow no-break space</source>
          <target state="translated">狭いノーブレイクスペース</target>
        </trans-unit>
        <trans-unit id="19cf0fcc0b86f78ec04f6f1388bfa92de80267cc" translate="yes" xml:space="preserve">
          <source>Native atomic implementation in the order preferred:</source>
          <target state="translated">望ましい順にネイティブなアトミック実装。</target>
        </trans-unit>
        <trans-unit id="f4ceb03af949e9762ac45be133b29937865498db" translate="yes" xml:space="preserve">
          <source>Native lookup (system calls) is always the default resolver method. This is true for all platforms, except VxWorks and OSE Delta where &lt;code&gt;'file'&lt;/code&gt; or &lt;code&gt;'dns'&lt;/code&gt; is used (in that priority order).</source>
          <target state="translated">ネイティブルックアップ（システムコール）は常にデフォルトのリゾルバーメソッドです。これは、 &lt;code&gt;'file'&lt;/code&gt; または &lt;code&gt;'dns'&lt;/code&gt; が（その優先順位で）使用されているVxWorksおよびOSE Deltaを除き、すべてのプラットフォームに当てはまります。</target>
        </trans-unit>
        <trans-unit id="2f3e991d2e06301019e7df6974c400874b1e24a9" translate="yes" xml:space="preserve">
          <source>Native-endian means that the endianness is resolved at load time to be either big-endian or little-endian, depending on what is native for the CPU that the Erlang machine is run on. Endianness only matters when the Type is either &lt;code&gt;integer&lt;/code&gt;, &lt;code&gt;utf16&lt;/code&gt;, &lt;code&gt;utf32&lt;/code&gt;, or &lt;code&gt;float&lt;/code&gt;. The default is &lt;code&gt;big&lt;/code&gt;.</source>
          <target state="translated">ネイティブエンディアンとは、Erlangマシンが実行されているCPUのネイティブに応じて、ロード時にエンディアンがビッグエンディアンまたはリトルエンディアンに解決されることを意味します。エンディアンは、Typeが &lt;code&gt;integer&lt;/code&gt; 、 &lt;code&gt;utf16&lt;/code&gt; 、 &lt;code&gt;utf32&lt;/code&gt; 、または &lt;code&gt;float&lt;/code&gt; の場合にのみ重要です。デフォルトは &lt;code&gt;big&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="88ec7eb1fe551ab56659dcb328c9e9308618cdd5" translate="yes" xml:space="preserve">
          <source>Need 10 bytes, plus the space for the node name, which is an atom.</source>
          <target state="translated">10バイトと、アトムであるノード名のスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="dfe1c4e24186450c5c19fcf8debfad6318586391" translate="yes" xml:space="preserve">
          <source>Need 3 bytes, plus 1 byte for each character (the terminating 0 is not encoded). Really long strings (more than 64k characters) are encoded as lists. Atoms cannot contain more than 256 characters.</source>
          <target state="translated">3バイトと1文字につき1バイトが必要です(終端の0はエンコードされていません)。本当に長い文字列(64k文字以上)はリストとしてエンコードされます。アトムは256文字を超える文字を含むことはできません。</target>
        </trans-unit>
        <trans-unit id="6a2629810e6dae5fd2ed18399d49c9f6234b2d75" translate="yes" xml:space="preserve">
          <source>Need 32 bytes.</source>
          <target state="translated">32バイト必要。</target>
        </trans-unit>
        <trans-unit id="dd1ab6a463a6a8cb3b094e2a5ffe579607280a5c" translate="yes" xml:space="preserve">
          <source>Need 5 bytes, plus the space for each element, and 1 more byte for the empty list at the end.</source>
          <target state="translated">5バイトと各要素のスペース、そして最後の空のリストのためにもう1バイト必要です。</target>
        </trans-unit>
        <trans-unit id="0331bba0a243dd4f934fa2e9828a630bcd871f86" translate="yes" xml:space="preserve">
          <source>Need 5 bytes, plus the space for each element.</source>
          <target state="translated">5バイトと各要素のスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="c0aabf92511a79ab04e6d0216eff8b4f3d2d00af" translate="yes" xml:space="preserve">
          <source>Need 5 bytes.</source>
          <target state="translated">5バイト必要。</target>
        </trans-unit>
        <trans-unit id="175e1f869033a45b5e96e2f6f2ecaeb8e97b007a" translate="yes" xml:space="preserve">
          <source>Need 6 bytes, plus the space for the node name, which is an atom.</source>
          <target state="translated">6バイトと、アトムであるノード名のスペースが必要です。</target>
        </trans-unit>
        <trans-unit id="1156c7af2383ba07233854d7dd710d317bc45336" translate="yes" xml:space="preserve">
          <source>Negate a filter.</source>
          <target state="translated">フィルタリングを拒否します。</target>
        </trans-unit>
        <trans-unit id="20692085423110f20958119048a05722032e1bc2" translate="yes" xml:space="preserve">
          <source>Negate the class, but only if the first character</source>
          <target state="translated">クラスを否定しますが、最初の文字が</target>
        </trans-unit>
        <trans-unit id="f153dc3672bdd71d80e9c27aa57b80cf24f1ae5f" translate="yes" xml:space="preserve">
          <source>Negated character class, which matches any character except &lt;code&gt;abc...&lt;/code&gt;.</source>
          <target state="translated">否定された文字クラス。これは &lt;code&gt;abc...&lt;/code&gt; を除くすべての文字に一致します。</target>
        </trans-unit>
        <trans-unit id="de3797823858d972e58f40676bf0b9c8044164ac" translate="yes" xml:space="preserve">
          <source>Negated versions, such as [:^alpha:], use \P instead of \p. Three other POSIX classes are handled specially in UCP mode:</source>
          <target state="translated">否定されたバージョン、[:^alpha:]のように、\pの代わりに\Pを使う。他の3つのPOSIXクラスは、UCPモードで特別に扱われる。</target>
        </trans-unit>
        <trans-unit id="ea9c2b442d3489fafed30d313fd4bb83f3a5f3ae" translate="yes" xml:space="preserve">
          <source>Negates its single argument (anything other than &lt;code&gt;false&lt;/code&gt; gives &lt;code&gt;false&lt;/code&gt;).</source>
          <target state="translated">単一の引数を無効にします（ &lt;code&gt;false&lt;/code&gt; 以外のものはfalseを &lt;code&gt;false&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="9ed6e5275d882c1d7a3e78254834d37cdc3ae869" translate="yes" xml:space="preserve">
          <source>Negative assertions are, however, different, to ensure that changing a positive assertion into a negative assertion changes its result. Backtracking into (*COMMIT), (*SKIP), or (*PRUNE) causes a negative assertion to be true, without considering any further alternative branches in the assertion. Backtracking into (*THEN) causes it to skip to the next enclosing alternative within the assertion (the normal behavior), but if the assertion does not have such an alternative, (*THEN) behaves like (*PRUNE).</source>
          <target state="translated">しかし、肯定的なアサーションを否定的なアサーションに変更すると結果が変わることを確実にするために、否定的なアサーションは異なります。(*COMMIT)、(*SKIP)、または (*PRUNE)にバックトラックすると、負のアサーションは、アサーション内のそれ以上の代替ブランチを考慮せずに真になります。(*THEN)にバックトラックすると、アサーション内の次の代替案にスキップしますが (通常の動作)、アサーションにそのような代替案がない場合、(*THEN)は (*PRUNE)のように動作します。</target>
        </trans-unit>
        <trans-unit id="ebf32ee53eee5495ff25445bebe98e3b2f6d93ca" translate="yes" xml:space="preserve">
          <source>Negative length can be used to extract bytes at the end of a binary, for example:</source>
          <target state="translated">負の長さは、例えばバイナリの最後にバイトを抽出するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="ef697431c2b7bdf995c5f37d8fc7eec02af8d561" translate="yes" xml:space="preserve">
          <source>Negotiated Groups</source>
          <target state="translated">交渉グループ</target>
        </trans-unit>
        <trans-unit id="b5a05483241f86212e46d2efad89e6999eecd1d1" translate="yes" xml:space="preserve">
          <source>Nested test cases:</source>
          <target state="translated">入れ子になったテストケース。</target>
        </trans-unit>
        <trans-unit id="127f49081f658cece5f3811cf0dc1334ffa1512f" translate="yes" xml:space="preserve">
          <source>Nested transactions</source>
          <target state="translated">入れ子になったトランザクション</target>
        </trans-unit>
        <trans-unit id="9d178bd65e3d29cc6434618a4937bb2f5c582992" translate="yes" xml:space="preserve">
          <source>Net if must send the following message when it receives an SNMP PDU from the network that is aimed for the MasterAgent:</source>
          <target state="translated">Net if は、MasterAgent を対象としたネットワークから SNMP PDU を受信した場合、以下のメッセージを送信する必要があります。</target>
        </trans-unit>
        <trans-unit id="8f62bf25b466c186d1af5cfde979303cd21e7891" translate="yes" xml:space="preserve">
          <source>Net load mode. Loads all recompiled modules on all known nodes.</source>
          <target state="translated">ネットロードモード。すべての既知のノードで、すべての再コンパイルされたモジュールをロードします。</target>
        </trans-unit>
        <trans-unit id="0114e1a690d0d3b69edf39a672c8130542ac6aac" translate="yes" xml:space="preserve">
          <source>Net tick time-out.</source>
          <target state="translated">ネットティックのタイムアウト。</target>
        </trans-unit>
        <trans-unit id="3ee6be7a9d02660b3a4c34bd8c49e09d465d52a8" translate="yes" xml:space="preserve">
          <source>Network address and service translation.</source>
          <target state="translated">ネットワークアドレスとサービス変換。</target>
        </trans-unit>
        <trans-unit id="80b9638cdf66c48bf06a6a5ecf503be992cbcebf" translate="yes" xml:space="preserve">
          <source>Network interface.</source>
          <target state="translated">ネットワークインターフェース。</target>
        </trans-unit>
        <trans-unit id="110548035d847260e8d0a9e8d8ce3832b7e46903" translate="yes" xml:space="preserve">
          <source>Never derefrence aliases, treat aliases as entries.</source>
          <target state="translated">決してエイリアスを省略しないで、エイリアスをエントリとして扱います。</target>
        </trans-unit>
        <trans-unit id="225ec74e73e8bc4eb82cef59bdadd070f326267c" translate="yes" xml:space="preserve">
          <source>New / Delete Operations</source>
          <target state="translated">新規/削除操作</target>
        </trans-unit>
        <trans-unit id="daa1ec0c63bdc175afef3521716bd266db3aa640" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;InfoItem&lt;/code&gt;s can be added and old undocumented &lt;code&gt;InfoItem&lt;/code&gt;s can be removed without notice.</source>
          <target state="translated">新しい &lt;code&gt;InfoItem&lt;/code&gt; を追加したり、ドキュメント化されていない古い &lt;code&gt;InfoItem&lt;/code&gt; を予告なく削除したりできます。</target>
        </trans-unit>
        <trans-unit id="65a81bf26d684841baa361ac6ddd6963f7889e13" translate="yes" xml:space="preserve">
          <source>New &lt;code&gt;InfoKey&lt;/code&gt;s can be added and old undocumented &lt;code&gt;InfoKey&lt;/code&gt;s can be removed without notice.</source>
          <target state="translated">新しい &lt;code&gt;InfoKey&lt;/code&gt; を追加したり、ドキュメント化されていない古い &lt;code&gt;InfoKey&lt;/code&gt; を予告なく削除したりできます。</target>
        </trans-unit>
        <trans-unit id="04d21f5a0f5485bf2ef2e4808496c8082ff1168d" translate="yes" xml:space="preserve">
          <source>New API</source>
          <target state="translated">新しいAPI</target>
        </trans-unit>
        <trans-unit id="25dfab9ef64421c944663406fd9382ff81ddcbe8" translate="yes" xml:space="preserve">
          <source>New AVPs can be defined using the dictionary interface. Both RFC data formats and extensions are supported.</source>
          <target state="translated">新しい AVP は、辞書インターフェースを使用して定義することができます。RFC データ形式と拡張子の両方がサポートされています。</target>
        </trans-unit>
        <trans-unit id="6f85697e78940a14b00420d0acefc501d482f7c5" translate="yes" xml:space="preserve">
          <source>New Erlang Monotonic Time</source>
          <target state="translated">新しいErlangの単調な時間</target>
        </trans-unit>
        <trans-unit id="5416773a10d805e30e6f5bc99d1554c94eafc798" translate="yes" xml:space="preserve">
          <source>New applications can be defined using the dictionary interface.</source>
          <target state="translated">新しいアプリケーションは、辞書インターフェースを使用して定義することができます。</target>
        </trans-unit>
        <trans-unit id="416932539df1b3d2d48bade29a12d73c261c20c5" translate="yes" xml:space="preserve">
          <source>New commands can be defined using the dictionary interface.</source>
          <target state="translated">新しいコマンドは、辞書インターフェースを使用して定義することができます。</target>
        </trans-unit>
        <trans-unit id="03915f753991cfd0758ccd0006c587629ef3a527" translate="yes" xml:space="preserve">
          <source>New instructions must be added at the end of the file, with higher numbers than the previous instructions.</source>
          <target state="translated">ファイルの最後に、前回の指示よりも高い数字で新しい指示を追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="b21bafe5e2b543d12417c1f410bfa49ddc920dfa" translate="yes" xml:space="preserve">
          <source>New maps can include multiple associations at construction by listing every association:</source>
          <target state="translated">新しいマップは、すべての協会をリストアップすることで、建設時に複数の協会を含めることができます。</target>
        </trans-unit>
        <trans-unit id="6664f56a53edf8b2fadc61d9507782caf98822df" translate="yes" xml:space="preserve">
          <source>New replicas can be added before all other replicas of the table have been loaded, provided that at least one other replica is active.</source>
          <target state="translated">テーブルの他のすべてのレプリカがロードされる前に新しいレプリカを追加することができますが、少なくとも1つのレプリカがアクティブであることが条件です。</target>
        </trans-unit>
        <trans-unit id="d04bdf4b4e76aa242a32e437a5883cf844d9d4b7" translate="yes" xml:space="preserve">
          <source>New schemas are created explicitly with the function &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema/1&lt;/a&gt;&lt;/code&gt; or implicitly by starting &lt;code&gt;Mnesia&lt;/code&gt; without a disc resident schema. Whenever a table (including the schema table) is created, it is assigned its own unique cookie. The schema table is not created with the function &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; as normal tables.</source>
          <target state="translated">新しいスキーマは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema/1&lt;/a&gt;&lt;/code&gt; を使用して明示的に作成されるか、ディスク常駐スキーマなしで &lt;code&gt;Mnesia&lt;/code&gt; を開始することによって暗黙的に作成されます。テーブル（スキーマテーブルを含む）が作成されるたびに、独自の一意のCookieが割り当てられます。スキーマテーブルは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_table-2&quot;&gt;mnesia:create_table/2&lt;/a&gt;&lt;/code&gt; を使用して通常のテーブルとして作成されません。</target>
        </trans-unit>
        <trans-unit id="b998dd3bf2b993a54515b2681267a6568c0a6475" translate="yes" xml:space="preserve">
          <source>New shell (&lt;code&gt;erlang-shell&lt;/code&gt;) - Starts a new Erlang shell.</source>
          <target state="translated">新しいシェル（ &lt;code&gt;erlang-shell&lt;/code&gt; ）-新しいErlangシェルを起動します。</target>
        </trans-unit>
        <trans-unit id="d6fab7333579c2c88a17284641c16835218f93ad" translate="yes" xml:space="preserve">
          <source>New tagged tuples may be added in the resulting list at any time.</source>
          <target state="translated">新しいタグ付きタプルはいつでも結果のリストに追加することができます。</target>
        </trans-unit>
        <trans-unit id="536da4d36da096022ab2eba3a4c7b2072e6bab86" translate="yes" xml:space="preserve">
          <source>New time functionality and a new time API was introduced. For more information see the &lt;code&gt;Time and Time Correction&lt;/code&gt; chapter in the ERTS User's guide and specifically the &lt;code&gt;Dos and Donts&lt;/code&gt; section on how to replace usage of &lt;code&gt;erlang:now/0&lt;/code&gt;.</source>
          <target state="translated">新しい時間機能と新しい時間APIが導入されました。詳細については、ERTSユーザーズガイドの「 &lt;code&gt;Time and Time Correction&lt;/code&gt; 章を参照してください。具体的には、 &lt;code&gt;erlang:now/0&lt;/code&gt; の使用を置き換える方法に関する「 &lt;code&gt;Dos and Donts&lt;/code&gt; セクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="aa4c2977862e2e3f49c4b7dd716229ca641b9204" translate="yes" xml:space="preserve">
          <source>New warnings may be issued between releases.</source>
          <target state="translated">リリース間に新たな警告が出る場合があります。</target>
        </trans-unit>
        <trans-unit id="e065f7f968be75fb2dabe72e66ffd9f54ef07c5e" translate="yes" xml:space="preserve">
          <source>NewVal :: integer()</source>
          <target state="translated">NewVal ::integer()</target>
        </trans-unit>
        <trans-unit id="47cc38a5f6affc6fd9f8a8683e76dfafa574aed8" translate="yes" xml:space="preserve">
          <source>New_Tai_Lue</source>
          <target state="translated">New_Tai_Lue</target>
        </trans-unit>
        <trans-unit id="d706a7f27906e3a8bf4f4fed0f9c3d7edc4a240a" translate="yes" xml:space="preserve">
          <source>Newline</source>
          <target state="translated">Newline</target>
        </trans-unit>
        <trans-unit id="808b78209485244b8997d57758391c54f156212c" translate="yes" xml:space="preserve">
          <source>Newline (line feed).</source>
          <target state="translated">改行(改行)。</target>
        </trans-unit>
        <trans-unit id="5afff985ebf32e8270418f54db6417fb06d959ae" translate="yes" xml:space="preserve">
          <source>Newline is indicated by a single character &lt;code&gt;cr&lt;/code&gt; (ASCII 13).</source>
          <target state="translated">改行は、単一文字 &lt;code&gt;cr&lt;/code&gt; （ASCII 13）で示されます。</target>
        </trans-unit>
        <trans-unit id="e0b583b651d9a2285954a06341ac73241bded628" translate="yes" xml:space="preserve">
          <source>Newline is indicated by a single character CR (ASCII 13).</source>
          <target state="translated">改行は一文字のCR(ASCII 13)で示されます。</target>
        </trans-unit>
        <trans-unit id="9187e5ffa24cd194b0938789b60c4fc382a957ab" translate="yes" xml:space="preserve">
          <source>Newline is indicated by a single character LF (ASCII 10), the default.</source>
          <target state="translated">改行は1文字LF(ASCII 10)で表示されます。</target>
        </trans-unit>
        <trans-unit id="d601bad3ec62c50f75f6a3ba9573e21733220395" translate="yes" xml:space="preserve">
          <source>Newline is indicated by the two-character CRLF (ASCII 13 followed by ASCII 10) sequence.</source>
          <target state="translated">改行は、2文字のCRLF(ASCII 13の後にASCII 10が続く)配列で示される。</target>
        </trans-unit>
        <trans-unit id="18d8a520a75d3617fd621fe2e386b1424f0b50e7" translate="yes" xml:space="preserve">
          <source>Next come the &lt;code&gt;grammar rules&lt;/code&gt;. Each rule has the general form</source>
          <target state="translated">次に &lt;code&gt;grammar rules&lt;/code&gt; 。各ルールには一般的な形式があります</target>
        </trans-unit>
        <trans-unit id="857695141b6b6a959a5e9f08218ec562945d5a77" translate="yes" xml:space="preserve">
          <source>Next comes a declaration of the &lt;code&gt;nonterminal categories&lt;/code&gt; to be used in the rules. For example:</source>
          <target state="translated">次に、ルールで使用される &lt;code&gt;nonterminal categories&lt;/code&gt; 宣言が続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="e83a4b5708be5e10a3a091382f374fd5808b3211" translate="yes" xml:space="preserve">
          <source>Next comes a declaration of the &lt;code&gt;rootsymbol&lt;/code&gt;, or start category of the grammar. For example:</source>
          <target state="translated">次に来るのは、 &lt;code&gt;rootsymbol&lt;/code&gt; の宣言、つまり文法の開始カテゴリです。例えば：</target>
        </trans-unit>
        <trans-unit id="fef9750a2a463281a998e47d19f0d0871be00c7d" translate="yes" xml:space="preserve">
          <source>Next comes a declaration of the &lt;code&gt;terminal categories&lt;/code&gt;, which are the categories of tokens produced by the scanner. For example:</source>
          <target state="translated">次に、スキャナーによって生成されるトークンのカテゴリーである &lt;code&gt;terminal categories&lt;/code&gt; 宣言が続きます。例えば：</target>
        </trans-unit>
        <trans-unit id="c9e370493e9e17b4819d6f79d261d079cacde553" translate="yes" xml:space="preserve">
          <source>Next comes one or more declarations of &lt;code&gt;operator precedences&lt;/code&gt;, if needed. These are used to resolve shift/reduce conflicts (see &lt;code&gt;yacc&lt;/code&gt; documentation).</source>
          <target state="translated">次に、必要に応じて、 &lt;code&gt;operator precedences&lt;/code&gt; 1つ以上の宣言が続きます。これらは、シフト/削減の競合を解決するために使用されます（ &lt;code&gt;yacc&lt;/code&gt; のドキュメントを参照）。</target>
        </trans-unit>
        <trans-unit id="0f7553f74bd8b74cc4fcc22ad756157cb5776f2f" translate="yes" xml:space="preserve">
          <source>Next is an example of using &lt;code&gt;after&lt;/code&gt;. This closes the file, even in the event of exceptions in &lt;code&gt;file:read/2&lt;/code&gt; or in &lt;code&gt;binary_to_term/1&lt;/code&gt;. The exceptions are the same as without the &lt;code&gt;try&lt;/code&gt;...&lt;code&gt;after&lt;/code&gt;...&lt;code&gt;end&lt;/code&gt; expression:</source>
          <target state="translated">次に、 &lt;code&gt;after&lt;/code&gt; の使用例を示します。これにより、 &lt;code&gt;file:read/2&lt;/code&gt; または &lt;code&gt;binary_to_term/1&lt;/code&gt; で例外が発生した場合でも、ファイルが閉じます。例外は、 &lt;code&gt;try&lt;/code&gt; ... &lt;code&gt;after&lt;/code&gt; ... &lt;code&gt;end&lt;/code&gt; 式がない場合と同じです。</target>
        </trans-unit>
        <trans-unit id="baf40b5d188d7e3554eac9acbf598ea4267e238b" translate="yes" xml:space="preserve">
          <source>Next is an example of using &lt;code&gt;try&lt;/code&gt; to emulate &lt;code&gt;catch Expr&lt;/code&gt;:</source>
          <target state="translated">次に、 &lt;code&gt;catch Expr&lt;/code&gt; をエミュレートする &lt;code&gt;try&lt;/code&gt; の使用例を示します。</target>
        </trans-unit>
        <trans-unit id="d4a825048b23dd21dd4cd211258efcc4e2e6dbd4" translate="yes" xml:space="preserve">
          <source>Next let's look at how we can do some optimizations using transformation rules. For simple instructions such as &lt;code&gt;move/2&lt;/code&gt;, the instruction dispatch overhead can be substantial. A simple optimization is to combine common instructions sequences to a single instruction. One such common sequence is multiple &lt;code&gt;move&lt;/code&gt; instructions moving X registers to Y registers.</source>
          <target state="translated">次に、変換ルールを使用していくつかの最適化を行う方法を見てみましょう。 &lt;code&gt;move/2&lt;/code&gt; などの単純な命令の場合、命令ディスパッチのオーバーヘッドが大きくなる可能性があります。簡単な最適化は、一般的な命令シーケンスを1つの命令に結合することです。そのような一般的なシーケンスの1つは、XレジスタをYレジスタに移動する複数の &lt;code&gt;move&lt;/code&gt; 命令です。</target>
        </trans-unit>
        <trans-unit id="c4092f0a830b3e6796bef07ac155e4adee4739ca" translate="yes" xml:space="preserve">
          <source>Next line (NEL)</source>
          <target state="translated">次の行(NEL</target>
        </trans-unit>
        <trans-unit id="2f96dddd46b5dcb9c4396f98ae433fa9b86dd63a" translate="yes" xml:space="preserve">
          <source>Next step is to start a service according to the ssh request. In case of a request of a shell, a new one is started which handles the OS-commands that arrives from the client (that's &quot;you&quot;).</source>
          <target state="translated">次に、ssh リクエストに応じてサービスを起動します。シェルのリクエストがあった場合は、クライアント(つまり「あなた」)から届くOSコマンドを処理する新しいシェルを起動します。</target>
        </trans-unit>
        <trans-unit id="49c36c588e423f9755f10724b38b806cab7bb00b" translate="yes" xml:space="preserve">
          <source>Next the system to be analyzed is added to the Xref server. Here the system will be OTP, so no library path will be needed. Otherwise, when analyzing a system that uses OTP, the OTP modules are typically made library modules by setting the library path to the default OTP code path (or to &lt;code&gt;code_path&lt;/code&gt;, see the &lt;code&gt;&lt;a href=&quot;xref#code_path&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt;). By default, the names of read BEAM files and warnings are output when adding analyzed modules, but these messages can be avoided by setting default values of some options:</source>
          <target state="translated">次に、分析するシステムが外部参照サーバーに追加されます。ここではシステムはOTPであるため、ライブラリパスは必要ありません。それ以外の場合、OTPを使用するシステムを分析する場合、OTPモジュールは通常、ライブラリパスをデフォルトのOTPコードパス（または &lt;code&gt;code_path&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;xref#code_path&quot;&gt;reference manual&lt;/a&gt;&lt;/code&gt; ）に設定することにより、ライブラリモジュールになります。デフォルトでは、分析されたモジュールを追加すると、読み込まれたBEAMファイルの名前と警告が出力されますが、これらのメッセージは、いくつかのオプションのデフォルト値を設定することで回避できます。</target>
        </trans-unit>
        <trans-unit id="80d521b3788a65371a641f56d5e8d11c4ad08f4b" translate="yes" xml:space="preserve">
          <source>Next transaction id. A positive integer or the atom &lt;code&gt;undefined_serial&lt;/code&gt; (only in case of error).</source>
          <target state="translated">次のトランザクションID。正の整数またはアトム &lt;code&gt;undefined_serial&lt;/code&gt; （エラーの場合のみ）。</target>
        </trans-unit>
        <trans-unit id="dd6bc460b4d14d33fe3d511ad06eeecb72c9edc0" translate="yes" xml:space="preserve">
          <source>Next we define the fragment that will pick up the value from the register from the first operand:</source>
          <target state="translated">次に、最初のオペランドからレジスタから値を拾うフラグメントを定義します。</target>
        </trans-unit>
        <trans-unit id="2bcc2284b1bbb94c0e744639578496a06f1ff6a1" translate="yes" xml:space="preserve">
          <source>Next we define the main part of the code that do the actual incrementing.</source>
          <target state="translated">次に、実際にインクリメントを行うコードの主要部分を定義します。</target>
        </trans-unit>
        <trans-unit id="0defe52a66513a79940e5ab6dc6388b2167016ac" translate="yes" xml:space="preserve">
          <source>Next we handle the different requests, first the fairly generic multi-request type:</source>
          <target state="translated">次に、さまざまなリクエストを処理します。</target>
        </trans-unit>
        <trans-unit id="45243a2c405fc73eda33c63058c67d022a0c9f29" translate="yes" xml:space="preserve">
          <source>Next we will look at when the &lt;code&gt;-no_next&lt;/code&gt; directive can be used. Here is the &lt;code&gt;jump/1&lt;/code&gt; instruction:</source>
          <target state="translated">次に、 &lt;code&gt;-no_next&lt;/code&gt; ディレクティブをいつ使用できるかを見ていきます。これが &lt;code&gt;jump/1&lt;/code&gt; 命令です：</target>
        </trans-unit>
        <trans-unit id="d2101e96703268b0a370202e8ee193996232f211" translate="yes" xml:space="preserve">
          <source>Next, the two higher order functions &lt;code&gt;pand&lt;/code&gt; and &lt;code&gt;por&lt;/code&gt; are defined. They combine primitive parsers to produce more complex parsers.</source>
          <target state="translated">次に、2つの高次関数 &lt;code&gt;pand&lt;/code&gt; と &lt;code&gt;por&lt;/code&gt; が定義されます。プリミティブパーサーを組み合わせて、より複雑なパーサーを作成します。</target>
        </trans-unit>
        <trans-unit id="55674258a28777513c3ee8a1247d68d39b7e5128" translate="yes" xml:space="preserve">
          <source>Nko</source>
          <target state="translated">Nko</target>
        </trans-unit>
        <trans-unit id="cf9ccefe9fbda77917b667cca9134ccee3903031" translate="yes" xml:space="preserve">
          <source>Nlen</source>
          <target state="translated">Nlen</target>
        </trans-unit>
        <trans-unit id="816c52fd2bdd94a63cd0944823a6c0aa9384c103" translate="yes" xml:space="preserve">
          <source>No</source>
          <target state="translated">No</target>
        </trans-unit>
        <trans-unit id="b75cac20c58d75851a13dd19c8019111fb0da9c8" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;CLASSPATH&lt;/code&gt; or anything is needed. Type &lt;code&gt;javac.exe&lt;/code&gt; in the bash prompt and you should get a list of available Java options.</source>
          <target state="translated">&lt;code&gt;CLASSPATH&lt;/code&gt; などは必要ありません。入力 &lt;code&gt;javac.exe&lt;/code&gt; プロンプトbashで、あなたは可能なJavaオプションのリストを取得する必要があります。</target>
        </trans-unit>
        <trans-unit id="306df27b0e9baa7048471bce2f90b4c62b83a515" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;CLASSPATH&lt;/code&gt; or anything is needed. Type &lt;code&gt;javac&lt;/code&gt; in the bash prompt and you should get a list of available Java options. Make sure, e.g by typing &lt;code&gt;type java&lt;/code&gt;, that you use the Java you installed. Note however that Cygwin's/MinGW's/MSYS2's &lt;code&gt;jar.exe&lt;/code&gt; is used. That's why the JDK bin-directory should be added last in the &lt;code&gt;PATH&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;CLASSPATH&lt;/code&gt; などは必要ありません。入力 &lt;code&gt;javac&lt;/code&gt; プロンプトbashで、あなたは可能なJavaオプションのリストを取得する必要があります。たとえば、 &lt;code&gt;type java&lt;/code&gt; と入力して、インストールしたJavaを使用していることを確認します。ただし、Cygwin / MinGW / MSYS2の &lt;code&gt;jar.exe&lt;/code&gt; が使用されていることに注意してください。そのため、JDK bin-directoryを &lt;code&gt;PATH&lt;/code&gt; の最後に追加する必要があります。</target>
        </trans-unit>
        <trans-unit id="20123f437cbed011ee99b107692f5a0de92f5b78" translate="yes" xml:space="preserve">
          <source>No &lt;code&gt;OTP_VERSION&lt;/code&gt; file is placed in a &lt;code&gt;&lt;a href=&quot;create_target&quot;&gt;target system&lt;/a&gt;&lt;/code&gt; created by OTP tools. This since one easily can create a target system where it is hard to even determine the base OTP version. You can, however, place such a file there if you know the OTP version.</source>
          <target state="translated">OTPツールで作成された &lt;code&gt;&lt;a href=&quot;create_target&quot;&gt;target system&lt;/a&gt;&lt;/code&gt; &lt;code&gt;OTP_VERSION&lt;/code&gt; ファイルは配置されません。これは、ベースOTPバージョンを判別することさえ難しいターゲットシステムを簡単に作成できるためです。ただし、OTPバージョンがわかっている場合は、そのようなファイルをそこに配置できます。</target>
        </trans-unit>
        <trans-unit id="a2c45cced64f7eeac215e46b87b5f0266dfddf0d" translate="yes" xml:space="preserve">
          <source>No Time Warp Mode</source>
          <target state="translated">タイムワープモードなし</target>
        </trans-unit>
        <trans-unit id="96af42e99b6235700bd5fb58880e48e6032a35fe" translate="yes" xml:space="preserve">
          <source>No active supervision of the net-if process.</source>
          <target state="translated">ネットイフプロセスの積極的な監督はしていません。</target>
        </trans-unit>
        <trans-unit id="b26bf8ba2172d52337372f5408c0374da428f07b" translate="yes" xml:space="preserve">
          <source>No available CPU topology. That is, the runtime system was not able to detect the CPU topology automatically, and no &lt;code&gt;&lt;a href=&quot;#+sct&quot;&gt;user-defined CPU topology&lt;/a&gt;&lt;/code&gt; was set.</source>
          <target state="translated">使用可能なCPUトポロジはありません。つまり、ランタイムシステムはCPUトポロジを自動的に検出できず、 &lt;code&gt;&lt;a href=&quot;#+sct&quot;&gt;user-defined CPU topology&lt;/a&gt;&lt;/code&gt; は設定されていませんでした。</target>
        </trans-unit>
        <trans-unit id="3b10bd61863afa70db914b4200f2158aa1e35253" translate="yes" xml:space="preserve">
          <source>No channel is started. This is done by calling &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt; ssh_connection:session_channel/[2, 4]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">チャネルは開始されません。これは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt; ssh_connection:session_channel/[2, 4]&lt;/a&gt;&lt;/code&gt; 呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="a85ad1a848cbb91f4217ade2f8af6dd92f90a8ce" translate="yes" xml:space="preserve">
          <source>No channel is started. This is done by calling &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/[2, 4]&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">チャネルは開始されていません。これは、 &lt;code&gt;&lt;a href=&quot;ssh_connection#session_channel-2&quot;&gt;ssh_connection:session_channel/[2, 4]&lt;/a&gt;&lt;/code&gt; 呼び出すことによって行われます。</target>
        </trans-unit>
        <trans-unit id="fddf0f31436a33dc7eb65b7e662b0a272aad9fa5" translate="yes" xml:space="preserve">
          <source>No character in the Unicode table has the Cn (unassigned) property. This property is instead assumed for any code point that is not in the Unicode table.</source>
          <target state="translated">Unicode テーブル内のどのキ ャ ラ ク タ も Cn (未割り当て)プ ロ パテ ィ を持ちません。こ のプ ロ パテ ィ は、 代わりに、 Unicode テーブルにないすべての コ ー ド 点に対 し て想定 さ れます。</target>
        </trans-unit>
        <trans-unit id="d72c3c7afe7adf0ff8406edeea270902ae726752" translate="yes" xml:space="preserve">
          <source>No exec-requests are executed but shell-requests are not affected, they follow the &lt;code&gt;&lt;a href=&quot;#type-shell_daemon_option&quot;&gt;shell_spec&lt;/a&gt;&lt;/code&gt;'s value.</source>
          <target state="translated">exec-requestsは実行されませんが、shell-requestsは影響を受けず、 &lt;code&gt;&lt;a href=&quot;#type-shell_daemon_option&quot;&gt;shell_spec&lt;/a&gt;&lt;/code&gt; の値に従います。</target>
        </trans-unit>
        <trans-unit id="dc57d984725306844c55a6e549f5434351f897bb" translate="yes" xml:space="preserve">
          <source>No execution mode. Just prints the name of each module that needs to be compiled.</source>
          <target state="translated">実行モードはありません。コンパイルする必要のある各モジュールの名前を表示するだけです。</target>
        </trans-unit>
        <trans-unit id="4f359a331e2d8e32338d669077706cc69d91dc7c" translate="yes" xml:space="preserve">
          <source>No file with object code exists.</source>
          <target state="translated">オブジェクトコードを含むファイルが存在しません。</target>
        </trans-unit>
        <trans-unit id="13241af56c130b238829c77fe317f13857c53de0" translate="yes" xml:space="preserve">
          <source>No file with object code was found.</source>
          <target state="translated">オブジェクトコードを含むファイルは見つかりませんでした。</target>
        </trans-unit>
        <trans-unit id="440071f450e51e9d450fcc9382feef4bf2695f38" translate="yes" xml:space="preserve">
          <source>No files are compressed.</source>
          <target state="translated">ファイルは圧縮されていません。</target>
        </trans-unit>
        <trans-unit id="0dc01295326d7bbe83d6152968ff814da6bb7e65" translate="yes" xml:space="preserve">
          <source>No form of peer discovery is implemented. The user can implement this independently of diameter if required.</source>
          <target state="translated">ピアディスカバリーの形態は実装されていない。必要に応じて、ユーザは、直径とは別にこれを実装することができる。</target>
        </trans-unit>
        <trans-unit id="72c55b9244448dbb0de0232a0eac2de1afdad171" translate="yes" xml:space="preserve">
          <source>No garbage collection was performed, as the process identified by &lt;code&gt;Pid&lt;/code&gt; terminated before the request could be satisfied.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; で識別されたプロセスは、要求が満たされる前に終了したため、ガベージコレクションは実行されませんでした。</target>
        </trans-unit>
        <trans-unit id="2f23a91f9bb422d0761d2bc7e964443f6476d113" translate="yes" xml:space="preserve">
          <source>No locks are released when child transactions terminate. Locks created by a sequence of nested transactions are kept until the topmost transaction terminates. Furthermore, any update performed by a nested transaction is only propagated in such a manner so that the parent of the nested transaction sees the updates. No final commitment is done until the top-level transaction terminates. So, although a nested transaction returns &lt;code&gt;{atomic, Val}&lt;/code&gt;, if the enclosing parent transaction terminates, the entire nested operation terminates.</source>
          <target state="translated">子トランザクションが終了してもロックは解放されません。ネストされたトランザクションのシーケンスによって作成されたロックは、最上位のトランザクションが終了するまで保持されます。さらに、ネストされたトランザクションによって実行される更新は、ネストされたトランザクションの親が更新を確認できるような方法でのみ伝播されます。トップレベルのトランザクションが終了するまで、最終的なコミットメントは行われません。したがって、ネストされたトランザクションは &lt;code&gt;{atomic, Val}&lt;/code&gt; 返しますが、それを囲む親トランザクションが終了すると、ネストされた操作全体が終了します。</target>
        </trans-unit>
        <trans-unit id="f674a37123f0ffc3506454e7b55512d60713fa52" translate="yes" xml:space="preserve">
          <source>No matching branch is found when evaluating a &lt;code&gt;case&lt;/code&gt; expression. The value &lt;code&gt;V&lt;/code&gt; did not match.</source>
          <target state="translated">&lt;code&gt;case&lt;/code&gt; 式を評価するときに、一致するブランチが見つかりません。値 &lt;code&gt;V&lt;/code&gt; が一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="7043cf82452e810d5c16d3e477ed93f700205d66" translate="yes" xml:space="preserve">
          <source>No matching branch is found when evaluating the of-section of a &lt;code&gt;try&lt;/code&gt; expression. The value &lt;code&gt;V&lt;/code&gt; did not match.</source>
          <target state="translated">&lt;code&gt;try&lt;/code&gt; 式のセクションの評価時に一致するブランチが見つかりません。値 &lt;code&gt;V&lt;/code&gt; が一致しませんでした。</target>
        </trans-unit>
        <trans-unit id="bafda3e67a73a9fac5366e727d20ddc61884e3fb" translate="yes" xml:space="preserve">
          <source>No matching function clause is found when evaluating a function call.</source>
          <target state="translated">関数呼び出しを評価するときに一致する関数節が見つかりません。</target>
        </trans-unit>
        <trans-unit id="b154fd09fbcc9049abbeb9b2cae25aa1de56f340" translate="yes" xml:space="preserve">
          <source>No more available OS processes.</source>
          <target state="translated">利用可能なOSのプロセスが無くなりました。</target>
        </trans-unit>
        <trans-unit id="30a54d12705f7304413a1180c01d997ab6369210" translate="yes" xml:space="preserve">
          <source>No more available file descriptors (for the OS process that the Erlang emulator runs in).</source>
          <target state="translated">利用可能なファイルディスクリプタが無くなりました(Erlangエミュレータが動作するOSプロセス用)。</target>
        </trans-unit>
        <trans-unit id="a8ffa3b27d199208e567b9f7e6b61c30d8a4fd15" translate="yes" xml:space="preserve">
          <source>No more memory is available.</source>
          <target state="translated">これ以上のメモリはありません。</target>
        </trans-unit>
        <trans-unit id="bf3f0d88be368d141ccef5093be9613bf0c9230c" translate="yes" xml:space="preserve">
          <source>No network is available.</source>
          <target state="translated">ネットワークはありません。</target>
        </trans-unit>
        <trans-unit id="c489474600adaec621c887ab5f0e2e6aff78625a" translate="yes" xml:space="preserve">
          <source>No new options can be added, but those present in &lt;code&gt;SuggestedOptions&lt;/code&gt; can be omitted or replaced with new values in &lt;code&gt;AcceptedOptions&lt;/code&gt;.</source>
          <target state="translated">新しいオプションを追加することはできませんが、 &lt;code&gt;SuggestedOptions&lt;/code&gt; にあるオプションは省略したり、 &lt;code&gt;AcceptedOptions&lt;/code&gt; の新しい値に置き換えることができます。</target>
        </trans-unit>
        <trans-unit id="cccb01175197e57cc2cc371d3deb57037c621f92" translate="yes" xml:space="preserve">
          <source>No object code is found. It is assumed that the source code and object code are located either in the same directory, or in &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;ebin&lt;/code&gt; directories next to each other.</source>
          <target state="translated">オブジェクトコードが見つかりません。ソースコードとオブジェクトコードは、同じディレクトリにあるか、または &lt;code&gt;src&lt;/code&gt; と &lt;code&gt;ebin&lt;/code&gt; のディレクトリの隣にあると想定されています。</target>
        </trans-unit>
        <trans-unit id="a11ca60fca56c33b2c64441ebd0092b5a2034edf" translate="yes" xml:space="preserve">
          <source>No object with the correct key exists and no default object was supplied.</source>
          <target state="translated">正しいキーを持つオブジェクトが存在せず、既定のオブジェクトが提供されませんでした。</target>
        </trans-unit>
        <trans-unit id="01bb309c51c64719a36ff0535eb3f933818be49b" translate="yes" xml:space="preserve">
          <source>No optimization was found. A match specification matching all objects is used if &lt;code&gt;TraverseFun&lt;/code&gt; is unary.</source>
          <target state="translated">最適化は見つかりませんでした。 &lt;code&gt;TraverseFun&lt;/code&gt; が単項の場合、すべてのオブジェクトに一致する一致仕様が使用されます。</target>
        </trans-unit>
        <trans-unit id="cd5da193599373a0a6119b861beeeab1a8bf22a1" translate="yes" xml:space="preserve">
          <source>No other support is available within this module that would guarantee consistency between objects. However, function &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt;safe_fixtable/2&lt;/a&gt;&lt;/code&gt; can be used to guarantee that a sequence of &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; calls traverse the table without errors and that each existing object in the table is visited exactly once, even if another (or the same) process simultaneously deletes or inserts objects into the table. Nothing else is guaranteed; in particular objects that are inserted or deleted during such a traversal can be visited once or not at all. Functions that internally traverse over a table, like &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match&lt;/a&gt;&lt;/code&gt;, give the same guarantee as &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt;safe_fixtable&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このモジュール内では、オブジェクト間の一貫性を保証する他のサポートはありません。ただし、関数 &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt;safe_fixtable/2&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;&lt;a href=&quot;#first-1&quot;&gt;first/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#next-2&quot;&gt;next/2&lt;/a&gt;&lt;/code&gt; 呼び出しのシーケンスがエラーなしでテーブルをトラバースし、別の（または同じ）プロセスであっても、テーブル内の既存の各オブジェクトが1回だけアクセスされることを保証できます。同時にテーブルからオブジェクトを削除または挿入します。他には何も保証されません。特に、このようなトラバーサル中に挿入または削除されたオブジェクトには、一度だけアクセスすることも、まったくアクセスしないこともできます。 &lt;code&gt;&lt;a href=&quot;#select-1&quot;&gt;select&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;#match-1&quot;&gt;match&lt;/a&gt;&lt;/code&gt; のように内部的にテーブルをトラバースする関数は &lt;code&gt;&lt;a href=&quot;#safe_fixtable-2&quot;&gt;safe_fixtable&lt;/a&gt;&lt;/code&gt; と同じ保証を与えます。</target>
        </trans-unit>
        <trans-unit id="cd17e64205667c500758839414e3602b81b56476" translate="yes" xml:space="preserve">
          <source>No packaging is done.</source>
          <target state="translated">梱包はしておりません。</target>
        </trans-unit>
        <trans-unit id="ba80c47298de4f4f293a1e5e303c27b3b69db4f4" translate="yes" xml:space="preserve">
          <source>No packet handling is done. The entire binary is returned unless it is empty.</source>
          <target state="translated">パケット処理は行われません。空でない限り、バイナリ全体が返されます。</target>
        </trans-unit>
        <trans-unit id="ca6f2c7da1bb311124b43ce0e8411af0807caf66" translate="yes" xml:space="preserve">
          <source>No persistent information is updated, so these functions can be used on any Erlang node, embedded or not. Also, using these functions does not affect which code is loaded if there is a reboot.</source>
          <target state="translated">永続的な情報は更新されないので、これらの関数は埋め込まれているかどうかに関わらず、どのようなErlangノードでも使うことができます。また、これらの関数を使っても再起動してもどのコードがロードされるかには影響しません。</target>
        </trans-unit>
        <trans-unit id="05eb06aea519cecedac753c3c3fc222e914de94b" translate="yes" xml:space="preserve">
          <source>No problems were found during the analysis and no warnings were emitted.</source>
          <target state="translated">解析中に問題はなく、警告も出ていません。</target>
        </trans-unit>
        <trans-unit id="c647cf715eac6879d4c3134da30ff7c15996866b" translate="yes" xml:space="preserve">
          <source>No problems were found during the analysis, but warnings were emitted.</source>
          <target state="translated">解析中に問題は見つかりませんでしたが、警告が出ていました。</target>
        </trans-unit>
        <trans-unit id="7a7ee8e9ab08c0d3ec811abad79a71a98bba9463" translate="yes" xml:space="preserve">
          <source>No remote shell program was found on the computer. Note that &lt;code&gt;ssh&lt;/code&gt; is used by default, but this can be overridden with the &lt;code&gt;-rsh&lt;/code&gt; flag.</source>
          <target state="translated">コンピューター上にリモートシェルプログラムが見つかりませんでした。デフォルトでは &lt;code&gt;ssh&lt;/code&gt; が使用されますが、これは &lt;code&gt;-rsh&lt;/code&gt; フラグでオーバーライドできることに注意してください。</target>
        </trans-unit>
        <trans-unit id="bd4d5686ec105c4061bf6d87bd047c5882b61b8e" translate="yes" xml:space="preserve">
          <source>No separate (variable) packages are generated. Applications that are found underneath a variable directory are ignored.</source>
          <target state="translated">個別の(変数の)パッケージは生成されません。変数ディレクトリの下にあるアプリケーションは無視されます。</target>
        </trans-unit>
        <trans-unit id="c2645af938c8d0d4b9ae8e002cf483a4d95efd04" translate="yes" xml:space="preserve">
          <source>No source code is found. It is assumed that the source code and object code are located either in the same directory, or in &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;ebin&lt;/code&gt; directories next to each other.</source>
          <target state="translated">ソースコードが見つかりません。ソースコードとオブジェクトコードは、同じディレクトリにあるか、または &lt;code&gt;src&lt;/code&gt; と &lt;code&gt;ebin&lt;/code&gt; のディレクトリの隣にあると想定されています。</target>
        </trans-unit>
        <trans-unit id="c80de0efbf261d9e095f902e0f2d665fd88ad9d3" translate="yes" xml:space="preserve">
          <source>No space is left on the device.</source>
          <target state="translated">端末にはスペースがありません。</target>
        </trans-unit>
        <trans-unit id="6b964042be0f5b6a57a3eff551407bd909108832" translate="yes" xml:space="preserve">
          <source>No spawn reply message will be sent to the caller if the spawn operation fails, but a &lt;code&gt;&lt;a href=&quot;#spawn_request_success_message&quot;&gt;&lt;i&gt;success message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; will be sent to the caller if the operation succeeds.</source>
          <target state="translated">スポーン操作が失敗した場合、スポーン応答メッセージは呼び出し元に送信されませんが、操作が &lt;code&gt;&lt;a href=&quot;#spawn_request_success_message&quot;&gt;&lt;i&gt;success message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; 場合、&lt;i&gt;成功メッセージ&lt;/i&gt;が呼び出し元に送信されます。</target>
        </trans-unit>
        <trans-unit id="041742c7ea87a9c88a4b7cf7b446431513db18bb" translate="yes" xml:space="preserve">
          <source>No spawn reply message will be sent to the caller if the spawn operation succeeds, but an &lt;code&gt;&lt;a href=&quot;#spawn_request_error_message&quot;&gt;&lt;i&gt;error message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; will be sent to the caller if the operation fails.</source>
          <target state="translated">スポーン操作が成功した場合、スポーン応答メッセージは呼び出し元に送信されませんが、操作が失敗した場合、 &lt;code&gt;&lt;a href=&quot;#spawn_request_error_message&quot;&gt;&lt;i&gt;error message&lt;/i&gt;&lt;/a&gt;&lt;/code&gt; が呼び出し元に送信されます。</target>
        </trans-unit>
        <trans-unit id="752d4c648b51ab1613cae015ad187b4a22a9e618" translate="yes" xml:space="preserve">
          <source>No spawn reply message will be sent to the caller when the spawn operation completes. This regardless of whether the operation succeeds or not.</source>
          <target state="translated">スポーン操作が完了しても、呼び出し元にスポーン応答メッセージは送信されません。これは、操作が成功したかどうかに関係なく行われます。</target>
        </trans-unit>
        <trans-unit id="f9fa080f482a6c7afdf11e32c95599e768cf1721" translate="yes" xml:space="preserve">
          <source>No spawn request was abandoned. The &lt;code&gt;ReqId&lt;/code&gt; request identifier did not correspond to an outstanding spawn request issued by the calling process. The reason for this is either:</source>
          <target state="translated">スポーンリクエストは破棄されませんでした。 &lt;code&gt;ReqId&lt;/code&gt; 要求識別子は、呼び出したプロセスにより発行済スポーン要求に対応していませんでした。この理由は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="db50afb4ab4c477aba8edc312545bbe5ac56992b" translate="yes" xml:space="preserve">
          <source>No such file or directory, or directory already exists, or permission denied.</source>
          <target state="translated">そのようなファイルやディレクトリ、またはディレクトリが既に存在しないか、または許可が拒否されています。</target>
        </trans-unit>
        <trans-unit id="861215d646ab11b3c7364a81ae9819205bd22341" translate="yes" xml:space="preserve">
          <source>No such type.</source>
          <target state="translated">そのようなタイプはありません。</target>
        </trans-unit>
        <trans-unit id="6f3f7a13db71f33cfa022de055c35c8dce0c2f17" translate="yes" xml:space="preserve">
          <source>No syntax rule definitions or other declarations may follow this section. To avoid conflicts with internal variables, do not use variable names beginning with two underscore characters ('__') in the Erlang code in this section, or in the code associated with the individual syntax rules.</source>
          <target state="translated">構文ルールの定義や他の宣言はこのセクションには続きません。内部変数との衝突を避けるために、このセクションのErlangコードや個々の構文ルールに関連するコードではアンダースコア2文字('__')で始まる変数名を使わないでください。</target>
        </trans-unit>
        <trans-unit id="aa48fa9b98593eafebf1b9c977ec3beb73292810" translate="yes" xml:space="preserve">
          <source>No table traversal will guarantee a consistent snapshot of the entire table if the table is also updated by concurrent processes during the traversal. The result of each concurrently updated object may be seen (or not) depending on if it has happened when the traversal visits that part of the table. The only way to guarantee a full consistent table snapshot (if you really need that) is to disallow concurrent updates during the entire traversal.</source>
          <target state="translated">探索中に同時進行プロセスによってもテーブルが更新された場合、どのテーブル探索もテーブル全体の一貫したスナップショットを保証することはできません。並行して更新された各オブジェクトの結果は、 探索がテーブルのその部分を訪問したときにそれが起こったかどうかに応じて表示されるかもしれません (または表示されないかもしれません)。完全な一貫性のあるテーブルスナップショットを保証する唯一の方法は(本当に必要な場合)、探索全体の間の同時更新を禁止することです。</target>
        </trans-unit>
        <trans-unit id="56bd79ad5b51fb7729ca3566ff1b2fd96321741b" translate="yes" xml:space="preserve">
          <source>No trace outputs. This is the default.</source>
          <target state="translated">トレース出力はありません。これがデフォルトです。</target>
        </trans-unit>
        <trans-unit id="1bcae2b67b6703a4dda088ac83adf2fa3c139258" translate="yes" xml:space="preserve">
          <source>No true branch is found when evaluating an &lt;code&gt;if&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;if&lt;/code&gt; 式の評価時に真の分岐が見つかりません。</target>
        </trans-unit>
        <trans-unit id="eda586f9e6ba047d97471f1bf9867a4ab7b5c6e7" translate="yes" xml:space="preserve">
          <source>No trusted CA was found in the trusted store. The trusted CA is normally a so called ROOT CA, which is a self-signed certificate. Trust can be claimed for an intermediate CA (trusted anchor does not have to be self-signed according to X-509) by using option &lt;code&gt;partial_chain&lt;/code&gt;.</source>
          <target state="translated">信頼できるCAが信頼できるストアで見つかりませんでした。信頼できるCAは通常、いわゆるROOT CAであり、自己署名証明書です。オプション &lt;code&gt;partial_chain&lt;/code&gt; を使用することで、中間CAに対して信頼を要求できます（信頼できるアンカーはX-509に従って自己署名する必要はありません）。</target>
        </trans-unit>
        <trans-unit id="51620f6ec27898e6c0fbd64ab1461dbab02323bd" translate="yes" xml:space="preserve">
          <source>No way of finding all possible answers by looking up keys was found, but the filters could be transformed into a match specification. All answers are found by calling &lt;code&gt;TraverseFun(MatchExpression)&lt;/code&gt;.</source>
          <target state="translated">キーを検索してすべての可能な答えを見つける方法は見つかりませんでしたが、フィルターを一致仕様に変換できました。すべての回答は &lt;code&gt;TraverseFun(MatchExpression)&lt;/code&gt; を呼び出すことで見つかります。</target>
        </trans-unit>
        <trans-unit id="49473ae5e307a442940553470cec56549ee7d425" translate="yes" xml:space="preserve">
          <source>Node :: node(),</source>
          <target state="translated">Node ::node()。</target>
        </trans-unit>
        <trans-unit id="54c13c8fd7aa90de3fb8911bcf7fa43f2889a260" translate="yes" xml:space="preserve">
          <source>Node name of remote node. To be passed along to &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">リモートノードのノード名。 &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="777c88d4603f4203bbb592ad1459cf50c6255ac4" translate="yes" xml:space="preserve">
          <source>Node name of this node. To be passed along to &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">このノードのノード名。 &lt;code&gt;dist_util:handshake_other_started(HsData)&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="9eae106cd79565d2506dacd99d934bb27987eb1e" translate="yes" xml:space="preserve">
          <source>Node name of this node. To be passed along to &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt;.</source>
          <target state="translated">このノードのノード名。 &lt;code&gt;dist_util:handshake_we_started(HsData)&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="f4609ded8720acb4a14254c4923dd53fe7c48e94" translate="yes" xml:space="preserve">
          <source>Node name, &lt;code&gt;node&lt;/code&gt;</source>
          <target state="translated">ノード名、 &lt;code&gt;node&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="07577846f355b02783c690185edc121991468e96" translate="yes" xml:space="preserve">
          <source>Node table entries that are not referred linger in the table for at least the amount of time that this parameter determines. The lingering prevents repeated deletions and insertions in the tables from occurring.</source>
          <target state="translated">参照されていないノードテーブル項目は、このパラメータが決定した時間以上、テーブル内に滞留します。リギングは、テーブル内の削除や挿入が繰り返されることを防ぎます。</target>
        </trans-unit>
        <trans-unit id="609dd2f5616d5def969c38a398d805318ea1a788" translate="yes" xml:space="preserve">
          <source>Nodes can be added to and removed from a &lt;code&gt;Mnesia&lt;/code&gt; system. This can be done by adding a copy of the schema to those nodes.</source>
          <target state="translated">ノードは &lt;code&gt;Mnesia&lt;/code&gt; システムに追加したり、Mnesiaシステムから削除したりできます。これは、それらのノードにスキーマのコピーを追加することで実行できます。</target>
        </trans-unit>
        <trans-unit id="6747accaf683f772944ea14fe4c794ccba9b86a1" translate="yes" xml:space="preserve">
          <source>Nodes connected through hidden connections can be monitored as any other nodes.</source>
          <target state="translated">隠れた接続を介して接続されたノードは、他のノードと同様に監視することができます。</target>
        </trans-unit>
        <trans-unit id="41e6879915cbf13a3b60e8d7f1f912973f81167b" translate="yes" xml:space="preserve">
          <source>Nodes connected to this node through hidden connections.</source>
          <target state="translated">隠れた接続を介してこのノードに接続されているノード。</target>
        </trans-unit>
        <trans-unit id="cc5d70b541f8501e9d01ec3e0e4e3fde1b4be2ae" translate="yes" xml:space="preserve">
          <source>Nodes connected to this node through normal connections.</source>
          <target state="translated">通常の接続でこのノードに接続されているノード。</target>
        </trans-unit>
        <trans-unit id="57c1df2289899b41768f671fc1b5ee2f1c0b48d9" translate="yes" xml:space="preserve">
          <source>Nodes from which communicated peers are made available in the remote candidates list of &lt;code&gt;pick_peer/4&lt;/code&gt; callbacks.</source>
          <target state="translated">通信されたピアが利用可能なノードは、 &lt;code&gt;pick_peer/4&lt;/code&gt; コールバックのリモート候補リストで利用可能になります。</target>
        </trans-unit>
        <trans-unit id="ba142752b13504899f6e0583213af78a0deb9255" translate="yes" xml:space="preserve">
          <source>Nodes that are known to this node. That is, connected nodes and nodes referred to by process identifiers, port identifiers, and references located on this node. The set of known nodes is garbage collected. Notice that this garbage collection can be delayed. For more information, see &lt;code&gt;&lt;a href=&quot;erlang#system_info_delayed_node_table_gc&quot;&gt; erlang:system_info(delayed_node_table_gc)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このノードに認識されているノード。つまり、接続されたノードと、このノードにあるプロセスID、ポートID、および参照によって参照されるノード。既知のノードのセットはガベージコレクションされます。このガベージコレクションは遅延する可能性があることに注意してください。詳細については、 &lt;code&gt;&lt;a href=&quot;erlang#system_info_delayed_node_table_gc&quot;&gt; erlang:system_info(delayed_node_table_gc)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="506bf95685aeda7d65c4825675264344d9902300" translate="yes" xml:space="preserve">
          <source>Nodes that are known to this node. That is, connected nodes and nodes referred to by process identifiers, port identifiers, and references located on this node. The set of known nodes is garbage collected. Notice that this garbage collection can be delayed. For more information, see &lt;code&gt;&lt;a href=&quot;erlang#system_info_delayed_node_table_gc&quot;&gt;erlang:system_info(delayed_node_table_gc)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">このノードに認識されているノード。つまり、接続されたノードと、このノードにあるプロセス識別子、ポート識別子、および参照によって参照されるノードです。既知のノードのセットはガベージコレクションされます。このガベージコレクションは遅延する可能性があることに注意してください。詳細については、 &lt;code&gt;&lt;a href=&quot;erlang#system_info_delayed_node_table_gc&quot;&gt;erlang:system_info(delayed_node_table_gc)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="7afefd4eb39dfd1fda9f65fc8df0dedddd2ab71e" translate="yes" xml:space="preserve">
          <source>Nodes to which peer connections established on the local Erlang node are communicated. Shared peers become available in the remote candidates list passed to &lt;code&gt;pick_peer/4&lt;/code&gt; callbacks on remote nodes whose services are configured to use them: see &lt;code&gt;use_shared_peers&lt;/code&gt; below.</source>
          <target state="translated">ローカルErlangノードで確立されたピア接続が通信されるノード。共有ピアは、サービスがそれらを使用するように構成されているリモートノードの &lt;code&gt;pick_peer/4&lt;/code&gt; コールバックに渡されるリモート候補リストで使用可能になります。以下の &lt;code&gt;use_shared_peers&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="67987925527526d6c9ece6f89eadcf6f992becee" translate="yes" xml:space="preserve">
          <source>Nodes with an ERTS version earlier than 5.7.2 (OTP R13B) does not pass the distribution flag that enables the distribution header. Messages passed between nodes have in this case the following format:</source>
          <target state="translated">ERTSのバージョンが5.7.2(OTP R13B)よりも前のノードは、ディストリビューションヘッダを有効にするディストリビューションフラグを渡さない。ノード間で渡されるメッセージは、この場合、次のような形式になります。</target>
        </trans-unit>
        <trans-unit id="9ad3afeccc2c07ec40ffda2f6fe1a23dce971210" translate="yes" xml:space="preserve">
          <source>Nodes with an ERTS version earlier than 5.7.2 does not pass the distribution flag that enables the distribution header. Messages passed between nodes have in this case the following format:</source>
          <target state="translated">5.7.2より前のERTSバージョンを持つノードは、ディストリビューションヘッダを有効にするディストリビューションフラグを渡さない。ノード間で渡されるメッセージは、この場合、以下の形式を持ちます。</target>
        </trans-unit>
        <trans-unit id="8d28e8cb93663f40b3e02d5f32274b7bcf92428c" translate="yes" xml:space="preserve">
          <source>Nodes with disc database schema must be defined and implemented with the function &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema(NodeList)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ディスクデータベーススキーマを持つノードは、関数 &lt;code&gt;&lt;a href=&quot;mnesia#create_schema-1&quot;&gt;mnesia:create_schema(NodeList)&lt;/a&gt;&lt;/code&gt; を使用して定義および実装する必要があります。</target>
        </trans-unit>
        <trans-unit id="9b1284ec6c573e51f2ee9f680fc573581c6be9d1" translate="yes" xml:space="preserve">
          <source>Noise has a high level as opposed to essentials.</source>
          <target state="translated">ノイズは本質的なものとは対照的にレベルが高い。</target>
        </trans-unit>
        <trans-unit id="1fc01fac8604f4aff7927b10b69d74ea30f3ab0a" translate="yes" xml:space="preserve">
          <source>Non-Persistent Database Storage</source>
          <target state="translated">非永続データベースストレージ</target>
        </trans-unit>
        <trans-unit id="a72b2ae853945e5b8956182bbfb749378e193bfd" translate="yes" xml:space="preserve">
          <source>Non-blocking version of &lt;code&gt;&lt;a href=&quot;#yield-1&quot;&gt;yield/1&lt;/a&gt;&lt;/code&gt;. It returns the tuple &lt;code&gt;{value, Val}&lt;/code&gt; when the computation is finished, or &lt;code&gt;timeout&lt;/code&gt; when &lt;code&gt;Timeout&lt;/code&gt; milliseconds has elapsed.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#yield-1&quot;&gt;yield/1&lt;/a&gt;&lt;/code&gt; の非ブロッキングバージョン。それはタプルを返し &lt;code&gt;{value, Val}&lt;/code&gt; の演算が終了し、または &lt;code&gt;timeout&lt;/code&gt; するとき &lt;code&gt;Timeout&lt;/code&gt; ミリ秒が経過しました。</target>
        </trans-unit>
        <trans-unit id="5f87b67027ba8d1bf675b11281146e26fb2801e6" translate="yes" xml:space="preserve">
          <source>Non-break space</source>
          <target state="translated">ノンブレークスペース</target>
        </trans-unit>
        <trans-unit id="9786bbd5d9ae8aa15cfdb070c883540a4bc7d290" translate="yes" xml:space="preserve">
          <source>Non-default cipher suites including anonymous cipher suites (PRE TLS-1.3) are supported for interop/testing purposes and may be used by adding them to your cipher suite list. Note that they must also be supported/enabled by the peer to actually be used.</source>
          <target state="translated">anonymous cipher suite (PRE TLS-1.3)を含むデフォルトではない暗号スイートは相互運用/テスト目的でサポートされており、暗号スイートリストに追加することで使用することができます。実際に使用するには、ピアによってサポートされているか有効にされていなければならないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="1ea42666026a195787b7284149d9b03550517a0d" translate="yes" xml:space="preserve">
          <source>Non-portable hash function that only guarantees the same hash for the same term within one Erlang VM instance.</source>
          <target state="translated">移植性のないハッシュ関数で、1つのErlang VMインスタンス内で同じタームの同じハッシュのみを保証します。</target>
        </trans-unit>
        <trans-unit id="234a623f6ba9a7ff287ed003837119c0295841fe" translate="yes" xml:space="preserve">
          <source>Non-spacing mark</source>
          <target state="translated">ノンスペーシングマーク</target>
        </trans-unit>
        <trans-unit id="26b2867ce328c59018c79a884756714da802589b" translate="yes" xml:space="preserve">
          <source>NonCompositeTerm ::= term() (not list or tuple or map)</source>
          <target state="translated">NonCompositeTerm ::=term()(リストでもタプルでもマップでもない)</target>
        </trans-unit>
        <trans-unit id="4c6ddabca28c82e409457c62e73c0bb7ebc8fa48" translate="yes" xml:space="preserve">
          <source>NonLocalFunctionHandler) -&amp;gt;</source>
          <target state="translated">NonLocalFunctionHandler）-&amp;gt;</target>
        </trans-unit>
        <trans-unit id="18ebf28795ec5199819d1e5ac39fe97c6224fefd" translate="yes" xml:space="preserve">
          <source>NonLocalFunctionHandler,</source>
          <target state="translated">NonLocalFunctionHandler,</target>
        </trans-unit>
        <trans-unit id="55d124f30f131b3e3c6067792a7521dc039a3924" translate="yes" xml:space="preserve">
          <source>NonLocalFunctionHandler, ReturnFormat) -&amp;gt;</source>
          <target state="translated">NonLocalFunctionHandler, ReturnFormat) -&amp;gt;</target>
        </trans-unit>
        <trans-unit id="d6ae77cee906d18da7aaf78a7c7ab33073d61cbe" translate="yes" xml:space="preserve">
          <source>None, but the version number was increased anyway.</source>
          <target state="translated">なしですが、とにかくバージョン数が増えました。</target>
        </trans-unit>
        <trans-unit id="e27fd656202878645a6eba759532293545f66d3d" translate="yes" xml:space="preserve">
          <source>Normal Distribution Header</source>
          <target state="translated">正規分布ヘッダ</target>
        </trans-unit>
        <trans-unit id="cc969dc2084d0c57d3c3f18672b1cb587110032f" translate="yes" xml:space="preserve">
          <source>Normal Windows NT installation is performed. No additional application programs are needed, such as Internet Explorer or web server. Networking with TCP/IP is required.</source>
          <target state="translated">通常のWindows NTのインストールを行います。Internet ExplorerやWebサーバなどの追加アプリケーションプログラムは必要ありません。TCP/IPによるネットワーク接続が必要です。</target>
        </trans-unit>
        <trans-unit id="e00a61616c0ebb576daec9ce3da5c44b01d68c1a" translate="yes" xml:space="preserve">
          <source>Normal locking requires the following:</source>
          <target state="translated">通常のロックには以下が必要です。</target>
        </trans-unit>
        <trans-unit id="c968deef42bc269fc435a9f4d346232704145288" translate="yes" xml:space="preserve">
          <source>Normal mode, in which text lines can be edited and sent to the shell.</source>
          <target state="translated">テキスト行を編集してシェルに送ることができる通常モード。</target>
        </trans-unit>
        <trans-unit id="d1edc765ff24644e61756ff101878b69d65d58a3" translate="yes" xml:space="preserve">
          <source>Normal schedulers will have scheduler identifiers in the range &lt;code&gt;1 =&amp;lt; SchedulerId =&amp;lt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt; erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt;. Dirty CPU schedulers will have scheduler identifiers in the range &lt;code&gt;erlang:system_info(schedulers) &amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) +&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt; erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常のスケジューラーは、 &lt;code&gt;1 =&amp;lt; SchedulerId =&amp;lt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt; erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; の範囲のスケジューラー識別子を持ちます。ダーティCPUスケジューラーは、 &lt;code&gt;erlang:system_info(schedulers) &amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) +&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt; erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt; （schedulers）+ erlang：system_info（dirty_cpu_schedulers）の範囲のスケジューラー識別子を持ちます。</target>
        </trans-unit>
        <trans-unit id="c72d62413b1b0e473e04d83afe069f0e8f1245a9" translate="yes" xml:space="preserve">
          <source>Normal schedulers will have scheduler identifiers in the range &lt;code&gt;1 =&amp;lt; SchedulerId =&amp;lt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt;. Dirty CPU schedulers will have scheduler identifiers in the range &lt;code&gt;erlang:system_info(schedulers) &amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) +&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常のスケジューラーは、 &lt;code&gt;1 =&amp;lt; SchedulerId =&amp;lt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_schedulers&quot;&gt;erlang:system_info(schedulers)&lt;/a&gt;&lt;/code&gt; の範囲のスケジューラーIDを持ちます。ダーティーCPUスケジューラーは、 &lt;code&gt;erlang:system_info(schedulers) &amp;lt; SchedulerId =&amp;lt; erlang:system_info(schedulers) +&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;#system_info_dirty_cpu_schedulers&quot;&gt;erlang:system_info(dirty_cpu_schedulers)&lt;/a&gt;&lt;/code&gt; （schedulers）+ erlang：system_info（dirty_cpu_schedulers）の範囲のスケジューラーIDを持ちます。</target>
        </trans-unit>
        <trans-unit id="63856520df5f6e7c2b81ba0324073ec61c706fa4" translate="yes" xml:space="preserve">
          <source>Normal-form XML elements can thus be included in the simple-form representation. Note that content lists must be flat. An &lt;code&gt;IOString&lt;/code&gt; is a (possibly deep) list of characters and/or binaries.</source>
          <target state="translated">したがって、通常形式のXML要素を単純形式の表現に含めることができます。コンテンツリストはフラットでなければならないことに注意してください。アン &lt;code&gt;IOString&lt;/code&gt; は文字及び/またはバイナリの（おそらく深い）のリストです。</target>
        </trans-unit>
        <trans-unit id="79f12813d5d24944ba41387d476392f4c8e44e2e" translate="yes" xml:space="preserve">
          <source>Normalization has 6 distinct steps. First the input URI is parsed into an intermediate form that can handle &lt;code&gt;&lt;a href=&quot;unicode_usage#what-unicode-is&quot;&gt;Unicode&lt;/a&gt;&lt;/code&gt; characters. This datatype is the &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt;, that can hold the components of the URI in map elements of type &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt;. After having the intermediate form, a sequence of normalization algorithms are applied to the individual URI components:</source>
          <target state="translated">正規化には6つの異なるステップがあります。最初に、入力URIが &lt;code&gt;&lt;a href=&quot;unicode_usage#what-unicode-is&quot;&gt;Unicode&lt;/a&gt;&lt;/code&gt; 文字を処理できる中間形式に解析されます。このデータ型は &lt;code&gt;&lt;a href=&quot;uri_string#type-uri_map&quot;&gt;uri_map()&lt;/a&gt;&lt;/code&gt; であり、 &lt;code&gt;&lt;a href=&quot;unicode#type-chardata&quot;&gt;unicode:chardata()&lt;/a&gt;&lt;/code&gt; 型のマップ要素にURIのコンポーネントを保持できます。中間形式を取得した後、一連の正規化アルゴリズムが個々のURIコンポーネントに適用されます。</target>
        </trans-unit>
        <trans-unit id="35ce673e0f3c6f12cce80180092d208ba37aa4a0" translate="yes" xml:space="preserve">
          <source>Normalization is the operation of converting the input URI into a</source>
          <target state="translated">正規化とは、入力URIを</target>
        </trans-unit>
        <trans-unit id="a74e793a642e0b2e3ac1ab81016078fc7282ff3d" translate="yes" xml:space="preserve">
          <source>Normalizes an issuer name so that it can be easily compared to another issuer name.</source>
          <target state="translated">発行体名を正規化し、他の発行体名と容易に比較できるようにします。</target>
        </trans-unit>
        <trans-unit id="123bb07c3020981f40b2d515466fa01c393f5d17" translate="yes" xml:space="preserve">
          <source>Normally a Media Gateway (MG) connects explicitly while a Media Gateway Controller (MGC) connects implicitly.</source>
          <target state="translated">通常、メディアゲートウェイ(MG)は明示的に接続し、メディアゲートウェイコントローラ(MGC)は暗黙的に接続します。</target>
        </trans-unit>
        <trans-unit id="9313afe2d7de25d7b0b5bfa53250c311418c0f2d" translate="yes" xml:space="preserve">
          <source>Normally a driver instance has no port data lock. If the driver instance wants to use a port data lock, it must create the port data lock by calling &lt;code&gt;&lt;a href=&quot;#driver_pdl_create&quot;&gt; driver_pdl_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常、ドライバインスタンスにはポートデータロックがありません。ドライバインスタンスがポートデータロックを使用する場合は、 &lt;code&gt;&lt;a href=&quot;#driver_pdl_create&quot;&gt; driver_pdl_create&lt;/a&gt;&lt;/code&gt; を呼び出してポートデータロックを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="62b21d6a5acaba334f3b92e5191990bacc474890" translate="yes" xml:space="preserve">
          <source>Normally a driver instance has no port data lock. If the driver instance wants to use a port data lock, it must create the port data lock by calling &lt;code&gt;&lt;a href=&quot;#driver_pdl_create&quot;&gt;driver_pdl_create&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常、ドライバーインスタンスにはポートデータロックがありません。ドライバーインスタンスがポートデータロックを使用する場合は、 &lt;code&gt;&lt;a href=&quot;#driver_pdl_create&quot;&gt;driver_pdl_create&lt;/a&gt;&lt;/code&gt; を呼び出してポートデータロックを作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="c68be6d33361ec0e77716005c64c0f636bd81f1e" translate="yes" xml:space="preserve">
          <source>Normally a trusted certificate, but it can also be a path-validation error that can be discovered while constructing the input to this function and that is to be run through the &lt;code&gt;verify_fun&lt;/code&gt;. Examples are &lt;code&gt;unknown_ca&lt;/code&gt; and &lt;code&gt;selfsigned_peer.&lt;/code&gt;</source>
          <target state="translated">通常は信頼できる証明書ですが、この関数への入力の構築中に発見され、 &lt;code&gt;verify_fun&lt;/code&gt; を通じて実行されるパス検証エラーの場合もあります。例は、 &lt;code&gt;unknown_ca&lt;/code&gt; および &lt;code&gt;selfsigned_peer.&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="8c1e2b2f12271535c195bd263adbd772fd1b1450" translate="yes" xml:space="preserve">
          <source>Normally an RSA, DSA or ECDSA public key, but handling of other public keys can be added</source>
          <target state="translated">通常はRSA、DSA、ECDSAの公開鍵を使用するが、その他の公開鍵の取り扱いを追加することができる。</target>
        </trans-unit>
        <trans-unit id="32e8583c2f35a0fb6147ddcbc88cc5b16ce06fba" translate="yes" xml:space="preserve">
          <source>Normally an RSA, DSA or ECDSA public key, but handling of other public keys can be added.</source>
          <target state="translated">通常はRSA、DSA、ECDSAの公開鍵ですが、その他の公開鍵の取り扱いを追加することができます。</target>
        </trans-unit>
        <trans-unit id="5a323154df5db7c6023a4765a91c3d178bc3620d" translate="yes" xml:space="preserve">
          <source>Normally an allocator creates a &quot;main multiblock carrier&quot;. Main multiblock carriers are never deallocated. The size of the main multiblock carrier is determined by the value of parameter &lt;code&gt;&lt;a href=&quot;#M_mmbcs&quot;&gt;mmbcs&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常、アロケータは「メインマルチブロックキャリア」を作成します。メインマルチブロックキャリアが割り当て解除されることはありません。メインマルチブロックキャリアのサイズは、パラメーター &lt;code&gt;&lt;a href=&quot;#M_mmbcs&quot;&gt;mmbcs&lt;/a&gt;&lt;/code&gt; の値によって決まります。</target>
        </trans-unit>
        <trans-unit id="3b4c50780b89a61508f82bc073504b8cf437882c" translate="yes" xml:space="preserve">
          <source>Normally in the range &lt;code&gt;-15..-8 | 8..15&lt;/code&gt;.</source>
          <target state="translated">通常は &lt;code&gt;-15..-8 | 8..15&lt;/code&gt; の範囲です。8..15。</target>
        </trans-unit>
        <trans-unit id="5a3591546de23ffebac17f3c960ad1cc664b2e7e" translate="yes" xml:space="preserve">
          <source>Normally it is the programmer's responsibility to free each Erlang term that has been returned from any of the &lt;code&gt;Erl_Interface&lt;/code&gt; functions. However, as many of the functions that build new Erlang terms in fact share objects with other existing terms, it can be difficult for the programmer to maintain pointers to all such terms to free them individually.</source>
          <target state="translated">通常、 &lt;code&gt;Erl_Interface&lt;/code&gt; 関数のいずれかから返された各Erlang用語を解放するのはプログラマーの責任です。ただし、実際に新しいErlang用語を作成する関数の多くはオブジェクトを他の既存の用語と共有するため、プログラマーがそれらすべての用語へのポインターを維持してそれらを個別に解放することは難しい場合があります。</target>
        </trans-unit>
        <trans-unit id="1516500c60371d958d26c4174d5a863989b039fb" translate="yes" xml:space="preserve">
          <source>Normally the compiler treats calls to &lt;code&gt;is_record/2&lt;/code&gt; especially. It emits code to verify that &lt;code&gt;Term&lt;/code&gt; is a tuple, that its first element is &lt;code&gt;RecordTag&lt;/code&gt;, and that the size is correct. However, if &lt;code&gt;RecordTag&lt;/code&gt; is not a literal atom, the BIF &lt;code&gt;is_record/2&lt;/code&gt; is called instead and the size of the tuple is not verified.</source>
          <target state="translated">通常、コンパイラは &lt;code&gt;is_record/2&lt;/code&gt; への呼び出しを特に扱います。これは、 &lt;code&gt;Term&lt;/code&gt; がタプルであること、最初の要素が &lt;code&gt;RecordTag&lt;/code&gt; であること、およびサイズが正しいことを確認するコードを発行します。ただし、 &lt;code&gt;RecordTag&lt;/code&gt; がリテラルアトムでない場合は、代わりにBIF &lt;code&gt;is_record/2&lt;/code&gt; が呼び出され、タプルのサイズは検証されません。</target>
        </trans-unit>
        <trans-unit id="ca1a7de4987b858f3cc368eec0c0c2caaad58778" translate="yes" xml:space="preserve">
          <source>Normally the compiler verifies that the module name given in the source code is the same as the base name of the output file and refuses to generate an output file if there is a mismatch. If you have a good reason (or other reason) for having a module name unrelated to the name of the output file, this option disables that verification (there will not even be a warning if there is a mismatch).</source>
          <target state="translated">通常、コンパイラはソースコードで指定されたモジュール名が出力ファイルのベース名と同じであるかどうかを検証し、不一致がある場合は出力ファイルの生成を拒否します。出力ファイルの名前とは関係のないモジュール名を持つ正当な理由(またはその他の理由)がある場合、このオプションはその検証を無効にします(不一致があっても警告は表示されません)。</target>
        </trans-unit>
        <trans-unit id="c85cefd516f432dd52d61776ad47ad9e932cefa9" translate="yes" xml:space="preserve">
          <source>Normally the top directory of an application is located in library directory &lt;code&gt;$OTPROOT/lib&lt;/code&gt; or in a directory referred to by environment variable &lt;code&gt;ERL_LIBS&lt;/code&gt;. At startup, when the initial code path is computed, the code server also looks for archive files in these directories and possibly adds &lt;code&gt;ebin&lt;/code&gt; directories in archives to the code path. The code path then contains paths to directories that look like &lt;code&gt;$OTPROOT/lib/mnesia.ez/mnesia/ebin&lt;/code&gt; or &lt;code&gt;$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin&lt;/code&gt;.</source>
          <target state="translated">通常、アプリケーションのトップディレクトリは、ライブラリディレクトリ &lt;code&gt;$OTPROOT/lib&lt;/code&gt; または環境変数 &lt;code&gt;ERL_LIBS&lt;/code&gt; によって参照されるディレクトリにあります。起動時に初期コードパスが計算されると、コードサーバーはこれらのディレクトリでアーカイブファイルも検索し、アーカイブ内の &lt;code&gt;ebin&lt;/code&gt; ディレクトリをコードパスに追加します。コードパスには、 &lt;code&gt;$OTPROOT/lib/mnesia.ez/mnesia/ebin&lt;/code&gt; または &lt;code&gt;$OTPROOT/lib/mnesia-4.4.7.ez/mnesia-4.4.7/ebin&lt;/code&gt; ようなディレクトリへのパスが含まれます。</target>
        </trans-unit>
        <trans-unit id="16dc8854601f473350bd4444afad1c3e95d0bfe6" translate="yes" xml:space="preserve">
          <source>Normally these are minimal stub implementations that throw an exception. But they can also be used as fallback implementations for functions that do not have native implemenations on some architectures.</source>
          <target state="translated">通常、これらは例外を投げる最小限のスタブ実装です。しかし、アーキテクチャによってはネイティブ実装を持たない関数のフォールバック実装として使用することもできます。</target>
        </trans-unit>
        <trans-unit id="d7e199a9abb107c5708b3c551b3f4ac7d6bc7e25" translate="yes" xml:space="preserve">
          <source>Normally, &lt;code&gt;Loaded&lt;/code&gt; is the absolute filename &lt;code&gt;Filename&lt;/code&gt; from which the code is obtained. If the module is preloaded (see &lt;code&gt;script(4)&lt;/code&gt;), &lt;code&gt;Loaded==preloaded&lt;/code&gt;. If the module is Cover-compiled (see &lt;code&gt;cover(3)&lt;/code&gt;), &lt;code&gt;Loaded==cover_compiled&lt;/code&gt;.</source>
          <target state="translated">通常、 &lt;code&gt;Loaded&lt;/code&gt; は、コードを取得する絶対ファイル &lt;code&gt;Filename&lt;/code&gt; です。モジュールがプリロードされている場合（ &lt;code&gt;script(4)&lt;/code&gt; を参照）、 &lt;code&gt;Loaded==preloaded&lt;/code&gt; 。モジュールがCoverコンパイルされている場合（ &lt;code&gt;cover(3)&lt;/code&gt; を参照）、 &lt;code&gt;Loaded==cover_compiled&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="b5203fe540eb93014569c65ea374e32f208fcdb8" translate="yes" xml:space="preserve">
          <source>Normally, after a pending message has been received, the request is not resent (since a pending message is an indication that the request has been received). But since the reply (to the request) can be lost, this behaviour has its values.</source>
          <target state="translated">通常、保留中のメッセージを受信した後、リクエストは再送されません(保留中のメッセージはリクエストを受信したことを示すものなので)。しかし、(リクエストへの)返信は失われる可能性があるので、この動作にはその値があります。</target>
        </trans-unit>
        <trans-unit id="b537284cd04df03d36bf92033e8259f158494ca4" translate="yes" xml:space="preserve">
          <source>Normally, connections are established automatically when another node is referenced. This functionality can be disabled by setting Kernel configuration parameter &lt;code&gt;dist_auto_connect&lt;/code&gt; to &lt;code&gt;never&lt;/code&gt;, see &lt;code&gt;kernel(6)&lt;/code&gt;. In this case, connections must be established explicitly by calling &lt;code&gt;&lt;a href=&quot;#connect_node-1&quot;&gt;connect_node/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">通常、接続は別のノードが参照されると自動的に確立されます。この機能を無効にするに &lt;code&gt;never&lt;/code&gt; 、カーネル構成パラメーター &lt;code&gt;dist_auto_connect&lt;/code&gt; をneverに設定します。kernel &lt;code&gt;kernel(6)&lt;/code&gt; 参照してください。この場合、 &lt;code&gt;&lt;a href=&quot;#connect_node-1&quot;&gt;connect_node/1&lt;/a&gt;&lt;/code&gt; を呼び出して接続を明示的に確立する必要があります。</target>
        </trans-unit>
        <trans-unit id="637694f595e135bf986d734041974495ca2f7d71" translate="yes" xml:space="preserve">
          <source>Normally, the &lt;code&gt;/etc/ssh&lt;/code&gt; directory is only readable by root.</source>
          <target state="translated">通常、 &lt;code&gt;/etc/ssh&lt;/code&gt; ディレクトリはrootだけが読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="c133a4bf588437e7a024274a632985a8eb26b1b7" translate="yes" xml:space="preserve">
          <source>Normally, the functions described above behave exactly as shown, but they are free to perform other actions. For example, a get-request may have side effects such as setting some other variable, perhaps a global &lt;code&gt;lastAccessed&lt;/code&gt; variable.</source>
          <target state="translated">通常、上記の関数は示されているとおりに動作しますが、他のアクションを自由に実行できます。たとえば、getリクエストには、他の変数、おそらくグローバルな &lt;code&gt;lastAccessed&lt;/code&gt; 変数を設定するなどの副作用がある場合があります。</target>
        </trans-unit>
        <trans-unit id="544ca2481d30ca25eb88bc4478419d207c6b42f3" translate="yes" xml:space="preserve">
          <source>Normally, there is no need to worry about the speed of &lt;code&gt;length/1&lt;/code&gt;, because it is efficiently implemented in C. In time-critical code, you might want to avoid it if the input list could potentially be very long.</source>
          <target state="translated">通常、 &lt;code&gt;length/1&lt;/code&gt; はCで効率的に実装されるため、速度を気にする必要はありません。タイムクリティカルなコードでは、入力リストが非常に長くなる可能性がある場合は、それを避けたい場合があります。</target>
        </trans-unit>
        <trans-unit id="432c6c8cb64925afd6f974d52af838a844075bba" translate="yes" xml:space="preserve">
          <source>Normally, when an Erlang process sends to a socket, the driver tries to send the data immediately. If that fails, the driver uses any means available to queue up the message to be sent whenever the operating system says it can handle it. Setting &lt;code&gt;{delay_send, true}&lt;/code&gt; makes &lt;strong&gt;all&lt;/strong&gt; messages queue up. The messages sent to the network are then larger but fewer. The option affects the scheduling of send requests versus Erlang processes instead of changing any real property of the socket. The option is implementation-specific. Defaults to &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">通常、Erlangプロセスがソケットに送信すると、ドライバーはすぐにデータを送信しようとします。それが失敗した場合、ドライバーは、オペレーティングシステムがメッセージを処理できると言ったときに送信するメッセージをキューに入れるために利用可能な任意の手段を使用します。 &lt;code&gt;{delay_send, true}&lt;/code&gt; を設定すると、&lt;strong&gt;すべての&lt;/strong&gt;メッセージがキューに入れられます。ネットワークに送信されるメッセージは大きくなりますが、少なくなります。このオプションは、ソケットの実際のプロパティを変更する代わりに、送信リクエストとErlangプロセスのスケジューリングに影響します。オプションは実装固有です。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8fad0923dba8395d1d335b96e476819a3a071dc5" translate="yes" xml:space="preserve">
          <source>Normative References</source>
          <target state="translated">規範的な参照</target>
        </trans-unit>
        <trans-unit id="4c829414eaf27118bfedf26c7e8237c300423db1" translate="yes" xml:space="preserve">
          <source>Not a &lt;code&gt;pid()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;pid()&lt;/code&gt; ではありません。</target>
        </trans-unit>
        <trans-unit id="deed9da173527db14150ff0b085131feec28ae66" translate="yes" xml:space="preserve">
          <source>Not all fields of this map has to be present. The flags field can be used to test for some of the fields. For example &lt;code&gt;broadaddr&lt;/code&gt; will only be present if the &lt;code&gt;broadcast&lt;/code&gt; flag is present in flags.</source>
          <target state="translated">このマップのすべてのフィールドが存在する必要はありません。フラグフィールドは、一部のフィールドをテストするために使用できます。たとえば、 &lt;code&gt;broadaddr&lt;/code&gt; は、 &lt;code&gt;broadcast&lt;/code&gt; フラグがフラグに存在する場合にのみ存在します。</target>
        </trans-unit>
        <trans-unit id="c737921363d7d8bbbfc2bf38000b57e386aed1b1" translate="yes" xml:space="preserve">
          <source>Not all functions are provided on all platforms. In particular, the &lt;code&gt;&lt;a href=&quot;#erf-1&quot;&gt;erf/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#erfc-1&quot;&gt;erfc/1&lt;/a&gt;&lt;/code&gt; functions are not provided on Windows.</source>
          <target state="translated">すべての機能がすべてのプラットフォームで提供されるわけではありません。特に、 &lt;code&gt;&lt;a href=&quot;#erf-1&quot;&gt;erf/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#erfc-1&quot;&gt;erfc/1&lt;/a&gt;&lt;/code&gt; 関数はWindowsでは提供されていません。</target>
        </trans-unit>
        <trans-unit id="50eeaa129a18f1db0ba0b1a0b68ec33d5a9d6b03" translate="yes" xml:space="preserve">
          <source>Not all options are valid on all platforms. That is, even if &quot;we&quot; support an option, that does not mean that the underlying OS does.</source>
          <target state="translated">すべてのオプションがすべてのプラットフォームで有効というわけではありません。つまり、「私たちが」オプションをサポートしていたとしても、それは基盤となる OS がサポートしているという意味ではありません。</target>
        </trans-unit>
        <trans-unit id="f60564ddfb74e83034e43211b6dc56c962f055f4" translate="yes" xml:space="preserve">
          <source>Not all systems send signals. For details on valid string values, see RFC 4254, Section 6.10</source>
          <target state="translated">すべてのシステムが信号を送信するわけではありません。有効な文字列値の詳細については、RFC 4254 のセクション 6.10 を参照してください。</target>
        </trans-unit>
        <trans-unit id="a834a9b315fc2a330e09ba52fb9c66fcf454a31e" translate="yes" xml:space="preserve">
          <source>Not being able to control the application remotely</source>
          <target state="translated">アプリケーションを遠隔操作できないこと</target>
        </trans-unit>
        <trans-unit id="1a46fcc227b8efe8fe76d1f3917346701207d128" translate="yes" xml:space="preserve">
          <source>Not built-in</source>
          <target state="translated">内蔵されていない</target>
        </trans-unit>
        <trans-unit id="e5c26cb1806bfcc16aba23e2bcd43b6fab4a7dce" translate="yes" xml:space="preserve">
          <source>Not enough memory to create the port.</source>
          <target state="translated">ポートを作成するのに十分なメモリがありません。</target>
        </trans-unit>
        <trans-unit id="5a93ba71c6009e894f071984d5a041fabb7da94e" translate="yes" xml:space="preserve">
          <source>Not enough space left to write the file.</source>
          <target state="translated">書き込むスペースが足りない</target>
        </trans-unit>
        <trans-unit id="b498326e15a92ae0d8b8c9b12f4c1b41ff6d4998" translate="yes" xml:space="preserve">
          <source>Not equal to</source>
          <target state="translated">と同じではない</target>
        </trans-unit>
        <trans-unit id="46885249352a064243a6dddeac62ab075a4dd8a5" translate="yes" xml:space="preserve">
          <source>Not recommended, as the machine will possibly be inaccessible to interactive users.</source>
          <target state="translated">インタラクティブなユーザーには、マシンにアクセスできない可能性があるため、お勧めしません。</target>
        </trans-unit>
        <trans-unit id="943fa3c1c3bedd251cb678cfcff592882249becf" translate="yes" xml:space="preserve">
          <source>Not recommended; use &lt;code&gt;&lt;a href=&quot;erlc&quot;&gt;erlc&lt;/a&gt;&lt;/code&gt; instead.</source>
          <target state="translated">推奨されません。代わりに &lt;code&gt;&lt;a href=&quot;erlc&quot;&gt;erlc&lt;/a&gt;&lt;/code&gt; を使用してください。</target>
        </trans-unit>
        <trans-unit id="a35d63cc7db198d75edb76a9f80fbc617cd6daa6" translate="yes" xml:space="preserve">
          <source>Not unexpectedly, we see that &lt;code&gt;file:write/2&lt;/code&gt; was called from &lt;code&gt;foo:create_file_slow/3&lt;/code&gt; and &lt;code&gt;foo:create_file_slow/2&lt;/code&gt;. The number of calls in each case as well as the used time are also just confirms the previous results.</source>
          <target state="translated">予期せず、 &lt;code&gt;file:write/2&lt;/code&gt; が &lt;code&gt;foo:create_file_slow/3&lt;/code&gt; および &lt;code&gt;foo:create_file_slow/2&lt;/code&gt; から呼び出されたことがわかります。各ケースのコール数と使用時間も、以前の結果を確認するだけです。</target>
        </trans-unit>
        <trans-unit id="844262b1792d0ef92bc2117e202d50d8b150ea0d" translate="yes" xml:space="preserve">
          <source>Not using the code loading generations (or any other code duplication) means that &lt;code&gt;trace_pattern&lt;/code&gt; must at some point write to the active beam code in order for running processes to reach the staged breakpoints structures. This can be done with one single atomic write operation per instrumented function. The beam instruction words are however read with normal memory loads and not through the atomic API. The only guarantee we need is that the written instruction word is seen as atomic. Either fully written or not at all. This is true for word aligned write operation on all hardware architectures we use.</source>
          <target state="translated">コード読み込み世代（またはその他のコード重複）を &lt;code&gt;trace_pattern&lt;/code&gt; ないということは、実行中のプロセスが段階的なブレークポイント構造に到達するために、ある時点でtrace_patternがアクティブなビームコードに書き込む必要があることを意味します。これは、インストルメントされた関数ごとに1つのアトミック書き込み操作で実行できます。ただし、ビーム命令ワードは、アトミックAPIを介さずに、通常のメモリ負荷で読み取られます。必要な唯一の保証は、書かれた命令ワードがアトミックと見なされることです。完全に書かれているか、まったく書かれていないかのどちらかです。これは、使用するすべてのハードウェアアーキテクチャでのワードアライン書き込み操作に当てはまります。</target>
        </trans-unit>
        <trans-unit id="5e2bc95e45520449726b41dddaa10d65e1171c4f" translate="yes" xml:space="preserve">
          <source>Not yet supported</source>
          <target state="translated">未対応</target>
        </trans-unit>
        <trans-unit id="2c924e3088204ee77ba681f72be3444357932fca" translate="yes" xml:space="preserve">
          <source>Note</source>
          <target state="translated">Note</target>
        </trans-unit>
        <trans-unit id="fb48271e25bdfecded1918413e5015fa92ec99a7" translate="yes" xml:space="preserve">
          <source>Note again that a successfull decode only returns a partially initiated message.</source>
          <target state="translated">デコードが成功した場合は、部分的に開始されたメッセージのみが返されることに注意してください。</target>
        </trans-unit>
        <trans-unit id="8bb5fcd3ca24d41d35ec2f21eaba5915f96c6ec6" translate="yes" xml:space="preserve">
          <source>Note also that the &lt;code&gt;Options&lt;/code&gt; argument comes from the &lt;code&gt;options&lt;/code&gt; config option of the mib-storage config option, and is passed on as is.</source>
          <target state="translated">&lt;code&gt;Options&lt;/code&gt; 引数は、mib-storage configオプションの &lt;code&gt;options&lt;/code&gt; configオプションから取得され、そのまま渡されることにも注意してください。</target>
        </trans-unit>
        <trans-unit id="0627636f71c6f80361b94f0198da347d52ca866f" translate="yes" xml:space="preserve">
          <source>Note also that the shared group leader (&lt;code&gt;SharedGL&lt;/code&gt;) must never be terminated by the user, only by Common Test. Group leader processes for parallel test case groups (&lt;code&gt;OtherGLs&lt;/code&gt;) may however be terminated in post_end_per_group hook functions.</source>
          <target state="translated">また、共有グループリーダー（ &lt;code&gt;SharedGL&lt;/code&gt; ）をユーザーが終了させて​​はならず、Common Testのみで終了させて​​ください。ただし、並列テストケースグループ（ &lt;code&gt;OtherGLs&lt;/code&gt; ）のグループリーダープロセスは、post_end_per_groupフック関数で終了できます。</target>
        </trans-unit>
        <trans-unit id="edc2e031b8dd55503b20741805cebfb2cf07a730" translate="yes" xml:space="preserve">
          <source>Note cleanup time. When storing a note in the note store, each note is given lifetime. Every &lt;code&gt;timeout&lt;/code&gt; the note_store process performs a GC to remove the expired note's. Time in milli-seconds.</source>
          <target state="translated">クリーンアップ時間に注意してください。メモストアにメモを保存すると、各メモには有効期間が与えられます。 &lt;code&gt;timeout&lt;/code&gt; するたびに、note_storeプロセスはGCを実行して、期限切れのメモを削除します。ミリ秒単位の時間。</target>
        </trans-unit>
        <trans-unit id="0728c4c2bab748430bb05050c43d78407cdbf77b" translate="yes" xml:space="preserve">
          <source>Note of caution</source>
          <target state="translated">注意事項</target>
        </trans-unit>
        <trans-unit id="b6e15564a2d085965b6a647a62b080ce57e8687b" translate="yes" xml:space="preserve">
          <source>Note support for legacy configuration file with Apache syntax is dropped in OTP-23.</source>
          <target state="translated">OTP-23では、Apacheの構文を持つレガシー設定ファイルのサポートが削除されていることに注意してください。</target>
        </trans-unit>
        <trans-unit id="ec5960d916e9578d7d801b0cab9fba678951306b" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;LIMIT_MATCH&lt;/code&gt; and &lt;code&gt;LIMIT_RECURSION&lt;/code&gt; can only reduce the value of the limits set by the caller, not increase them.</source>
          <target state="translated">&lt;code&gt;LIMIT_MATCH&lt;/code&gt; と &lt;code&gt;LIMIT_RECURSION&lt;/code&gt; は、呼び出し側によって設定された制限の値を減らすことができるだけで、増やすことはできないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="5fcd20ceeac028edcb91c3032d79c7d19a743557" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;daemon_info/1&lt;/code&gt; and &lt;code&gt;daemon_info/2&lt;/code&gt; returns different types due to compatibility reasons.</source>
          <target state="translated">互換性の理由から、 &lt;code&gt;daemon_info/1&lt;/code&gt; と &lt;code&gt;daemon_info/2&lt;/code&gt; は異なるタイプを返すことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d24e50ca0ad0e8aeae5b135428467a7fb92766a7" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;verify_fun&lt;/code&gt; needs to be written in a different form than the corresponding SSL/TLS option, since funs are not accepted on the command line.</source>
          <target state="translated">&lt;code&gt;verify_fun&lt;/code&gt; はコマンドラインでは受け入れられないため、verify_funは対応するSSL / TLSオプションとは異なる形式で記述する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="52b662fe1f129e8596062fb70fec226b6c4a68bf" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;verify_fun&lt;/code&gt; needs to be written in a different form than the corresponding TLS option, since funs are not accepted on the command line.</source>
          <target state="translated">&lt;code&gt;verify_fun&lt;/code&gt; はコマンドラインで受け入れられないため、verify_funは対応するTLSオプションとは異なる形式で記述する必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="1d1c85c3f2e3a52e04f26f9459fd07fac45960dd" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;watchdog&lt;/code&gt;, &lt;code&gt;peer&lt;/code&gt;, &lt;code&gt;apps&lt;/code&gt;, &lt;code&gt;caps&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; entries depend on connectivity with the peer and may not be present. Note also that the &lt;code&gt;statistics&lt;/code&gt; entry presents values accumulated during the lifetime of the transport configuration.</source>
          <target state="translated">&lt;code&gt;watchdog&lt;/code&gt; 、 &lt;code&gt;peer&lt;/code&gt; 、 &lt;code&gt;apps&lt;/code&gt; 、 &lt;code&gt;caps&lt;/code&gt; 、および &lt;code&gt;port&lt;/code&gt; エントリは、ピアとの接続に依存しており、存在しない場合があることに注意してください。 &lt;code&gt;statistics&lt;/code&gt; エントリは、トランスポート構成の存続期間中に累積された値を示すことにも注意してください。</target>
        </trans-unit>
        <trans-unit id="336af6e83620751fb885cf9732b59c5d61916d15" translate="yes" xml:space="preserve">
          <source>Note that &lt;code&gt;{error,encode}&lt;/code&gt; is the only return value which guarantees that the request has &lt;strong&gt;not&lt;/strong&gt; been sent over the transport connection.</source>
          <target state="translated">&lt;code&gt;{error,encode}&lt;/code&gt; は、リクエストがトランスポート接続を介して送信されて&lt;strong&gt;いない&lt;/strong&gt;ことを保証する唯一の戻り値であることに注意してください。</target>
        </trans-unit>
        <trans-unit id="c43786df6d68a9130e86553a3fb94cd475618c7f" translate="yes" xml:space="preserve">
          <source>Note that EdDSA passhrases (Curves 25519 and 448) are not implemented.</source>
          <target state="translated">EdDSA パスフレーズ(曲線 25519 と 448)は実装されていないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="90fbe442617bf7481c90ae87dcf9bb86893f3220" translate="yes" xml:space="preserve">
          <source>Note that Erlang shell specific functions and control sequences like for example &lt;code&gt;h().&lt;/code&gt; are not supported.</source>
          <target state="translated">Erlangシェル固有の関数と制御シーケンス &lt;code&gt;h().&lt;/code&gt; 注意してください。サポートされていません。</target>
        </trans-unit>
        <trans-unit id="d0fdecc142de3ad70dcbabaed28cc8ece32529ae" translate="yes" xml:space="preserve">
          <source>Note that RFC 3588 did not allow 5xxx result codes in answers setting the E-bit, while RFC 6733 does. This is a potential interoperability problem since the Diameter protocol version has not changed.</source>
          <target state="translated">RFC 3588ではEビットを設定した回答に5xxxの結果コードを許可していませんが、RFC 6733では許可しています。これは、Diameterプロトコルのバージョンが変更されていないため、相互運用性の問題となる可能性があります。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
