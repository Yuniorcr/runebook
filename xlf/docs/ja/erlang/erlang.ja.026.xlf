<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="erlang">
    <body>
      <group id="erlang">
        <trans-unit id="1adf89e8e92228a60dd07895fb1499d746d2f997" translate="yes" xml:space="preserve">
          <source>If T is a map type &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association type, then Rep(T) = &lt;code&gt;{type,ANNO,map,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Tがマップタイプ &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連付けタイプである場合、Rep（T）= &lt;code&gt;{type,ANNO,map,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="f6a030c9807953845560f8db0809d5cae00b3b69" translate="yes" xml:space="preserve">
          <source>If T is a map type &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt;, where each &lt;code&gt;A_i&lt;/code&gt; is an association type, then Rep(T) = &lt;code&gt;{type,LINE,map,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt;. For Rep(A), see below.</source>
          <target state="translated">Tがマップタイプ &lt;code&gt;#{A_1, ..., A_k}&lt;/code&gt; であり、各 &lt;code&gt;A_i&lt;/code&gt; が関連タイプである場合、Rep（T）= &lt;code&gt;{type,LINE,map,[Rep(A_1), ..., Rep(A_k)]}&lt;/code&gt; 。Rep（A）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="a3d2ad35675d5afe54ca0bd9c3179fed7255c00e" translate="yes" xml:space="preserve">
          <source>If T is a map type &lt;code&gt;map()&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,map,any}&lt;/code&gt;.</source>
          <target state="translated">Tがマップタイプ &lt;code&gt;map()&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,ANNO,map,any}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b831583f902b7b1e825485ae91283de7c5ae12d8" translate="yes" xml:space="preserve">
          <source>If T is a map type &lt;code&gt;map()&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,map,any}&lt;/code&gt;.</source>
          <target state="translated">Tがマップタイプ &lt;code&gt;map()&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,LINE,map,any}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="393b51301cf31a12b2c86b8f1d9bbdef7251ed54" translate="yes" xml:space="preserve">
          <source>If T is a predefined (or built-in) type &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tが事前定義された（または組み込みの）タイプ &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{type,ANNO,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="e65f43c9b04c981a0f08dbd4e0efeaf97f33b27e" translate="yes" xml:space="preserve">
          <source>If T is a predefined (or built-in) type &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tが事前定義（または組み込み）タイプ &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{type,LINE,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ca56d7b0dd371abffc166a298e3aa5c771e44b2d" translate="yes" xml:space="preserve">
          <source>If T is a record type &lt;code&gt;#Name{F_1, ..., F_k}&lt;/code&gt;, where each &lt;code&gt;F_i&lt;/code&gt; is a record field type, then Rep(T) = &lt;code&gt;{type,ANNO,record,[Rep(Name),Rep(F_1), ..., Rep(F_k)]}&lt;/code&gt;. For Rep(F), see below.</source>
          <target state="translated">Tがレコードタイプ &lt;code&gt;#Name{F_1, ..., F_k}&lt;/code&gt; であり、各 &lt;code&gt;F_i&lt;/code&gt; がレコードフィールドタイプである場合、Rep（T）= &lt;code&gt;{type,ANNO,record,[Rep(Name),Rep(F_1), ..., Rep(F_k)]}&lt;/code&gt; 。Rep（F）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="81796f903baaa46af3b80b5d8688ebe92b7c0403" translate="yes" xml:space="preserve">
          <source>If T is a record type &lt;code&gt;#Name{F_1, ..., F_k}&lt;/code&gt;, where each &lt;code&gt;F_i&lt;/code&gt; is a record field type, then Rep(T) = &lt;code&gt;{type,LINE,record,[Rep(Name),Rep(F_1), ..., Rep(F_k)]}&lt;/code&gt;. For Rep(F), see below.</source>
          <target state="translated">Tがレコードタイプ &lt;code&gt;#Name{F_1, ..., F_k}&lt;/code&gt; で、各 &lt;code&gt;F_i&lt;/code&gt; がレコードフィールドタイプである場合、Rep（T）= &lt;code&gt;{type,LINE,record,[Rep(Name),Rep(F_1), ..., Rep(F_k)]}&lt;/code&gt; 。Rep（F）については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="3222c4ffd098914385913646a36a5eb933808ff6" translate="yes" xml:space="preserve">
          <source>If T is a remote type &lt;code&gt;M:N(T_1, ..., T_k)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{remote_type,ANNO,[Rep(M),Rep(N),[Rep(T_1), ..., Rep(T_k)]]}&lt;/code&gt;.</source>
          <target state="translated">Tがリモートタイプ &lt;code&gt;M:N(T_1, ..., T_k)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{remote_type,ANNO,[Rep(M),Rep(N),[Rep(T_1), ..., Rep(T_k)]]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ee8d572503b5c61f934efe1a703bfabdb6fef560" translate="yes" xml:space="preserve">
          <source>If T is a remote type &lt;code&gt;M:N(T_1, ..., T_k)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{remote_type,LINE,[Rep(M),Rep(N),[Rep(T_1), ..., Rep(T_k)]]}&lt;/code&gt;.</source>
          <target state="translated">Tがリモートタイプ &lt;code&gt;M:N(T_1, ..., T_k)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{remote_type,LINE,[Rep(M),Rep(N),[Rep(T_1), ..., Rep(T_k)]]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8647f8866bf0895e0a5b40a325be9d138c2a1081" translate="yes" xml:space="preserve">
          <source>If T is a tuple type &lt;code&gt;tuple()&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,tuple,any}&lt;/code&gt;.</source>
          <target state="translated">Tがタプルタイプ &lt;code&gt;tuple()&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,ANNO,tuple,any}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68b1161c8a498bf9c973de5bfb81d671743d9c3d" translate="yes" xml:space="preserve">
          <source>If T is a tuple type &lt;code&gt;tuple()&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,tuple,any}&lt;/code&gt;.</source>
          <target state="translated">Tがタプルタイプ &lt;code&gt;tuple()&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,LINE,tuple,any}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="207c50704c87beebe7a6e20ca5b5d3c04f6d1d99" translate="yes" xml:space="preserve">
          <source>If T is a tuple type &lt;code&gt;{T_1, ..., T_k}&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,tuple,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tがタプルタイプ &lt;code&gt;{T_1, ..., T_k}&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{type,ANNO,tuple,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d1e4f6cf136dfa1b7d4b66063686fadb91908818" translate="yes" xml:space="preserve">
          <source>If T is a tuple type &lt;code&gt;{T_1, ..., T_k}&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,tuple,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tがタプルタイプ &lt;code&gt;{T_1, ..., T_k}&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{type,LINE,tuple,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a938cb6958277c0935e0d57bb6651a672684a8d4" translate="yes" xml:space="preserve">
          <source>If T is a type union &lt;code&gt;T_1 | ... | T_k&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,union,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tが型共用体の場合 &lt;code&gt;T_1 | ... | T_k&lt;/code&gt; 、次にRep（T）= &lt;code&gt;{type,ANNO,union,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="39f7c924bddde4fb82ebc04d0dc2ef68e7d3ec80" translate="yes" xml:space="preserve">
          <source>If T is a type union &lt;code&gt;T_1 | ... | T_k&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,LINE,union,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tが型共用体 &lt;code&gt;T_1 | ... | T_k&lt;/code&gt; 、次にRep（T）= &lt;code&gt;{type,LINE,union,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="da23467e91ab40f667601ddef52da4d45d5feefe" translate="yes" xml:space="preserve">
          <source>If T is a type variable &lt;code&gt;V&lt;/code&gt;, then Rep(T) = &lt;code&gt;{var,ANNO,A}&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;. A type variable is any variable except underscore (&lt;code&gt;_&lt;/code&gt;).</source>
          <target state="translated">Tが型変数 &lt;code&gt;V&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{var,ANNO,A}&lt;/code&gt; 。ここで、 &lt;code&gt;A&lt;/code&gt; は、 &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。型変数は、アンダースコア（ &lt;code&gt;_&lt;/code&gt; ）を除く任意の変数です。</target>
        </trans-unit>
        <trans-unit id="04b9ae17be7ca13037caad5b425aea5153523426" translate="yes" xml:space="preserve">
          <source>If T is a type variable &lt;code&gt;V&lt;/code&gt;, then Rep(T) = &lt;code&gt;{var,LINE,A}&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom with a printname consisting of the same characters as &lt;code&gt;V&lt;/code&gt;. A type variable is any variable except underscore (&lt;code&gt;_&lt;/code&gt;).</source>
          <target state="translated">Tが型変数 &lt;code&gt;V&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{var,LINE,A}&lt;/code&gt; 。ここで、 &lt;code&gt;A&lt;/code&gt; は &lt;code&gt;V&lt;/code&gt; と同じ文字で構成される印刷名を持つアトムです。型変数は、アンダースコア（ &lt;code&gt;_&lt;/code&gt; ）を除く任意の変数です。</target>
        </trans-unit>
        <trans-unit id="9009a6974b8dc4d03f245e007c8f49b5b6d34b52" translate="yes" xml:space="preserve">
          <source>If T is a user-defined type &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{user_type,ANNO,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tがユーザー定義タイプ &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{user_type,ANNO,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="11ece75db2c93e58198cc536b47ac3b68361a0ca" translate="yes" xml:space="preserve">
          <source>If T is a user-defined type &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt;, then Rep(T) = &lt;code&gt;{user_type,LINE,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt;.</source>
          <target state="translated">Tがユーザー定義型 &lt;code&gt;N(T_1, ..., T_k)&lt;/code&gt; 場合、Rep（T）= &lt;code&gt;{user_type,LINE,N,[Rep(T_1), ..., Rep(T_k)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f07bf781162482afd2013d4024c6c725654680a1" translate="yes" xml:space="preserve">
          <source>If T is an annotated type &lt;code&gt;A :: T_0&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is a variable, then Rep(T) = &lt;code&gt;{ann_type,ANNO,[Rep(A),Rep(T_0)]}&lt;/code&gt;.</source>
          <target state="translated">Tが注釈付きタイプ &lt;code&gt;A :: T_0&lt;/code&gt; （ &lt;code&gt;A&lt;/code&gt; は変数）の場合、Rep（T）= &lt;code&gt;{ann_type,ANNO,[Rep(A),Rep(T_0)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="308a5eeab7204b0380423b04a4f96b78a2bb9a71" translate="yes" xml:space="preserve">
          <source>If T is an annotated type &lt;code&gt;A :: T_0&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is a variable, then Rep(T) = &lt;code&gt;{ann_type,LINE,[Rep(A),Rep(T_0)]}&lt;/code&gt;.</source>
          <target state="translated">Tが注釈付きタイプ &lt;code&gt;A :: T_0&lt;/code&gt; であり、 &lt;code&gt;A&lt;/code&gt; が変数である場合、Rep（T）= &lt;code&gt;{ann_type,LINE,[Rep(A),Rep(T_0)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="7a9ca5d4370f68ffd4aacee2420b758f185ae7c5" translate="yes" xml:space="preserve">
          <source>If T is an atom or integer literal L, then Rep(T) = Rep(L).</source>
          <target state="translated">Tが原子または整数リテラルLならば、Rep(T)=Rep(L)となります。</target>
        </trans-unit>
        <trans-unit id="88da671c68682a76fd63acbbd82cd33cfc329377" translate="yes" xml:space="preserve">
          <source>If T is an atom, a character, or an integer literal L, then Rep(T) = Rep(L).</source>
          <target state="translated">Tが原子、文字、整数リテラルLの場合、Rep(T)=Rep(L)となります。</target>
        </trans-unit>
        <trans-unit id="1c0240293ad37bae225227647e0e3b7e2bac07ec" translate="yes" xml:space="preserve">
          <source>If T is an integer range type &lt;code&gt;L .. H&lt;/code&gt;, where &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; are singleton integer types, then Rep(T) = &lt;code&gt;{type,ANNO,range,[Rep(L),Rep(H)]}&lt;/code&gt;.</source>
          <target state="translated">Tが整数範囲タイプ &lt;code&gt;L .. H&lt;/code&gt; であり、 &lt;code&gt;L&lt;/code&gt; と &lt;code&gt;H&lt;/code&gt; がシングルトン整数タイプである場合、Rep（T）= &lt;code&gt;{type,ANNO,range,[Rep(L),Rep(H)]}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ad797cc1858fce32e5e441213921861198714eb2" translate="yes" xml:space="preserve">
          <source>If T is an integer range type &lt;code&gt;L .. H&lt;/code&gt;, where &lt;code&gt;L&lt;/code&gt; and &lt;code&gt;H&lt;/code&gt; are singleton integer types, then Rep(T) = &lt;code&gt;{type,LINE,range,[Rep(L),Rep(H)]}&lt;/code&gt;.</source>
          <target state="translated">Tが整数範囲型 &lt;code&gt;L .. H&lt;/code&gt; である場合（ &lt;code&gt;L&lt;/code&gt; および &lt;code&gt;H&lt;/code&gt; はシングルトン整数型）、Rep（T）= &lt;code&gt;{type,LINE,range,[Rep(L),Rep(H)]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="fc03bf3c127d2db614b6ef5e1997a93c0412bfa2" translate="yes" xml:space="preserve">
          <source>If T is an operator type &lt;code&gt;Op T_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator (this is an occurrence of an expression that can be evaluated to an integer at compile time), then Rep(T) = &lt;code&gt;{op,ANNO,Op,Rep(T_0)}&lt;/code&gt;.</source>
          <target state="translated">Tが演算子タイプ &lt;code&gt;Op T_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子（これはコンパイル時に整数に評価できる式の出現です）の場合、Rep（T）= &lt;code&gt;{op,ANNO,Op,Rep(T_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="eb40c0e15c57779039c33cac1f747c5810dbf6ac" translate="yes" xml:space="preserve">
          <source>If T is an operator type &lt;code&gt;Op T_0&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a unary operator (this is an occurrence of an expression that can be evaluated to an integer at compile time), then Rep(T) = &lt;code&gt;{op,LINE,Op,Rep(T_0)}&lt;/code&gt;.</source>
          <target state="translated">Tが演算子タイプ &lt;code&gt;Op T_0&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が単項演算子である場合（これは、コンパイル時に整数に評価できる式のオカレンスです）、Rep（T）= &lt;code&gt;{op,LINE,Op,Rep(T_0)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="98ccf953cec087c4f37edbb5474ed7922f3550a3" translate="yes" xml:space="preserve">
          <source>If T is an operator type &lt;code&gt;T_1 Op T_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator (this is an occurrence of an expression that can be evaluated to an integer at compile time), then Rep(T) = &lt;code&gt;{op,ANNO,Op,Rep(T_1),Rep(T_2)}&lt;/code&gt;.</source>
          <target state="translated">Tが演算子タイプ &lt;code&gt;T_1 Op T_2&lt;/code&gt; であり、 &lt;code&gt;Op&lt;/code&gt; が二項演算子（これはコンパイル時に整数に評価できる式のオカレンスです）の場合、Rep（T）= &lt;code&gt;{op,ANNO,Op,Rep(T_1),Rep(T_2)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff8ff3216bb70a3e5574e4f729d37b4404373ced" translate="yes" xml:space="preserve">
          <source>If T is an operator type &lt;code&gt;T_1 Op T_2&lt;/code&gt;, where &lt;code&gt;Op&lt;/code&gt; is a binary operator (this is an occurrence of an expression that can be evaluated to an integer at compile time), then Rep(T) = &lt;code&gt;{op,LINE,Op,Rep(T_1),Rep(T_2)}&lt;/code&gt;.</source>
          <target state="translated">Tが演算子タイプ &lt;code&gt;T_1 Op T_2&lt;/code&gt; で、 &lt;code&gt;Op&lt;/code&gt; が2項演算子である場合（これは、コンパイル時に整数に評価できる式のオカレンスです）、Rep（T）= &lt;code&gt;{op,LINE,Op,Rep(T_1),Rep(T_2)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="c0cf8513a746893009eda27d45a4780f2cc888dc" translate="yes" xml:space="preserve">
          <source>If T is the empty list type &lt;code&gt;[]&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,ANNO,nil,[]}&lt;/code&gt;, that is, the empty list type &lt;code&gt;[]&lt;/code&gt; cannot be distinguished from the predefined type &lt;code&gt;nil()&lt;/code&gt;.</source>
          <target state="translated">Tが空のリストタイプ &lt;code&gt;[]&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,ANNO,nil,[]}&lt;/code&gt; 、つまり、空のリストタイプ &lt;code&gt;[]&lt;/code&gt; は事前定義されたタイプ &lt;code&gt;nil()&lt;/code&gt; と区別できません。</target>
        </trans-unit>
        <trans-unit id="50ad15b3d0471bd3faa5be48d2ae0de7d86566a4" translate="yes" xml:space="preserve">
          <source>If T is the empty list type &lt;code&gt;[]&lt;/code&gt;, then Rep(T) = &lt;code&gt;{type,Line,nil,[]}&lt;/code&gt;.</source>
          <target state="translated">Tが空のリスト型 &lt;code&gt;[]&lt;/code&gt; の場合、Rep（T）= &lt;code&gt;{type,Line,nil,[]}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a4fd606c5ec8d6d6bb3851df48abcb81b06d7a38" translate="yes" xml:space="preserve">
          <source>If TLS is requested (&lt;code&gt;Bool=true&lt;/code&gt;) then a connecting process should initiate a TLS handshake with the peer and an accepting process should prepare to accept a handshake. A successful handshake should be followed by a &lt;code&gt;{diameter, {tls, Ref}}&lt;/code&gt; message to the parent process. A failed handshake should cause the process to exit.</source>
          <target state="translated">TLSが要求された場合（ &lt;code&gt;Bool=true&lt;/code&gt; ）、接続プロセスはピアとのTLSハンドシェイクを開始し、受け入れプロセスはハンドシェイクを受け入れる準備をする必要があります。成功したハンドシェイクの後に、親プロセスへの &lt;code&gt;{diameter, {tls, Ref}}&lt;/code&gt; メッセージが続きます。ハンドシェイクに失敗すると、プロセスが終了します。</target>
        </trans-unit>
        <trans-unit id="fdc7d15812f21bafb9f2d4f973c0a1f450ecf989" translate="yes" xml:space="preserve">
          <source>If TS is a type specifier &lt;code&gt;A:Value&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom and &lt;code&gt;Value&lt;/code&gt; is an integer, then Rep(TS) = &lt;code&gt;{A,Value}&lt;/code&gt;.</source>
          <target state="translated">TSが型指定子 &lt;code&gt;A:Value&lt;/code&gt; （ &lt;code&gt;A&lt;/code&gt; はアトムで &lt;code&gt;Value&lt;/code&gt; は整数）の場合、Rep（TS）= &lt;code&gt;{A,Value}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="a0e7b2ba399cca51e247046ccdbff7d00ba5b8ab" translate="yes" xml:space="preserve">
          <source>If TS is a type specifier &lt;code&gt;A&lt;/code&gt;, where &lt;code&gt;A&lt;/code&gt; is an atom, then Rep(TS) = &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">TSが型指定子 &lt;code&gt;A&lt;/code&gt; であり、 &lt;code&gt;A&lt;/code&gt; がアトムである場合、Rep（TS）= &lt;code&gt;A&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="cffa66b34c2d2e22ea4103aaa24ab719e89c2fec" translate="yes" xml:space="preserve">
          <source>If Trace Tool Builder is to be used against a remote node, it is highly recommended to start the trace control node as &lt;strong&gt;hidden&lt;/strong&gt;. This way it can connect to the traced node without being &quot;seen&quot; by it, that is, if the &lt;code&gt;nodes()&lt;/code&gt; BIF is called on the traced node, the trace control node does not show. To start a hidden node, add option &lt;code&gt;-hidden&lt;/code&gt; to the &lt;code&gt;erl&lt;/code&gt; command, for example:</source>
          <target state="translated">Trace Tool Builderをリモートノードに対して使用する場合は、トレースコントロールノードを&lt;strong&gt;非表示&lt;/strong&gt;として開始することを強くお勧めします。このようにして、「見られる」ことなくトレースされたノードに接続できます。つまり、 &lt;code&gt;nodes()&lt;/code&gt; BIFがトレースされたノードで呼び出された場合、トレース制御ノードは表示されません。非表示のノードを開始するには、オプション &lt;code&gt;-hidden&lt;/code&gt; を &lt;code&gt;erl&lt;/code&gt; コマンドに追加します。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="f981e82f10b1b120a81d1801123ff119c9dd5647" translate="yes" xml:space="preserve">
          <source>If Unicode filename encoding is in effect (see the &lt;code&gt;erl manual page&lt;/code&gt;), the string &lt;code&gt;VarName&lt;/code&gt; can contain characters with codepoints &amp;gt; 255.</source>
          <target state="translated">Unicodeファイル名エンコーディングが有効な場合（ &lt;code&gt;erl manual page&lt;/code&gt; ）、文字列 &lt;code&gt;VarName&lt;/code&gt; にはコードポイントが255を超える文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="57716f17031652959455a3f19555742110bf4198" translate="yes" xml:space="preserve">
          <source>If Unicode filename encoding is in effect (see the &lt;code&gt;erl manual page&lt;/code&gt;), the strings &lt;code&gt;VarName&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; can contain characters with codepoints &amp;gt; 255.</source>
          <target state="translated">Unicodeファイル名エンコーディングが有効になっている場合（ &lt;code&gt;erl manual page&lt;/code&gt; ）、文字列 &lt;code&gt;VarName&lt;/code&gt; および &lt;code&gt;Value&lt;/code&gt; には、コードポイントが255を超える文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="dc97ec63a0f0a73856ddcd04133122fc9570583f" translate="yes" xml:space="preserve">
          <source>If Unicode filename encoding is in effect (see the &lt;code&gt;erl manual page&lt;/code&gt;), the strings can contain characters with codepoints &amp;gt; 255.</source>
          <target state="translated">Unicodeファイル名エンコーディングが有効になっている場合（ &lt;code&gt;erl manual page&lt;/code&gt; ）、文字列にはコードポイントが255を超える文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="1ab68d3d8a84e8ac67ee4631fedf30ccfba50dcc" translate="yes" xml:space="preserve">
          <source>If Unicode filename encoding is in effect (see the &lt;code&gt;erlmanual page&lt;/code&gt;), the string &lt;code&gt;VarName&lt;/code&gt; can contain characters with codepoints &amp;gt; 255.</source>
          <target state="translated">Unicodeファイル名エンコーディングが有効な場合（ &lt;code&gt;erlmanual page&lt;/code&gt; ）、文字列 &lt;code&gt;VarName&lt;/code&gt; にコードポイント&amp;gt; 255の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="349a1b5c23c6400e11f34baaeede22206381d4e8" translate="yes" xml:space="preserve">
          <source>If Unicode filename encoding is in effect (see the &lt;code&gt;erlmanual page&lt;/code&gt;), the strings &lt;code&gt;VarName&lt;/code&gt; and &lt;code&gt;Value&lt;/code&gt; can contain characters with codepoints &amp;gt; 255.</source>
          <target state="translated">Unicodeファイル名エンコーディングが有効である場合（ &lt;code&gt;erlmanual page&lt;/code&gt; ）、文字列 &lt;code&gt;VarName&lt;/code&gt; および &lt;code&gt;Value&lt;/code&gt; には、コードポイント&amp;gt; 255の文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="8063f0dff7c5946dc972277dda605fd528422b32" translate="yes" xml:space="preserve">
          <source>If Unicode filename encoding is in effect (see the &lt;code&gt;erlmanual page&lt;/code&gt;), the strings can contain characters with codepoints &amp;gt; 255.</source>
          <target state="translated">Unicodeファイル名エンコーディングが有効な場合（ &lt;code&gt;erlmanual page&lt;/code&gt; ）、文字列には、コードポイントが255を超える文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="50def98f37f2942e5e50a32fd6672fe00221e237" translate="yes" xml:space="preserve">
          <source>If Unicode filename translation is in effect and the file system is transparent, filenames that cannot be interpreted as Unicode can be encountered, in which case the &lt;code&gt;fun()&lt;/code&gt; must be prepared to handle raw filenames (that is, binaries). If the regular expression contains codepoints &amp;gt; 255, it does not match filenames that do not conform to the expected character encoding (that is, are not encoded in valid UTF-8).</source>
          <target state="translated">Unicodeファイル名変換が有効で、ファイルシステムが透過的である場合、Unicodeとして解釈できないファイル名に遭遇する可能性があります。その場合、 &lt;code&gt;fun()&lt;/code&gt; は未加工のファイル名（つまり、バイナリ）を処理できるように準備する必要があります。正規表現に255を超えるコードポイントが含まれている場合、期待される文字エンコーディングに準拠していない（つまり、有効なUTF-8でエンコードされていない）ファイル名には一致しません。</target>
        </trans-unit>
        <trans-unit id="27d8be04dca27e76e1518b6381c78e6ba0f1228a" translate="yes" xml:space="preserve">
          <source>If Unicode filenames are enabled, the calls to &lt;code&gt;os:getenv/0,1&lt;/code&gt;, &lt;code&gt;os:putenv/2&lt;/code&gt;, and &lt;code&gt;os:unsetenv/1&lt;/code&gt; handle Unicode strings. On Unix-like platforms, the built-in functions translate environment variables in UTF-8 to/from Unicode strings, possibly with code points &amp;gt; 255. On Windows, the Unicode versions of the environment system API are used, and code points &amp;gt; 255 are allowed.</source>
          <target state="translated">Unicodeファイル名が有効な場合、 &lt;code&gt;os:getenv/0,1&lt;/code&gt; 、 &lt;code&gt;os:putenv/2&lt;/code&gt; 、および &lt;code&gt;os:unsetenv/1&lt;/code&gt; の呼び出しはUnicode文字列を処理します。Unixライクなプラットフォームでは、組み込み関数は、UTF-8の環境変数をUnicode文字列との間で変換します。おそらく、コードポイント&amp;gt; 255です。Windowsでは、環境システムAPIのUnicodeバージョンが使用され、コードポイント&amp;gt; 255です。許可されています。</target>
        </trans-unit>
        <trans-unit id="7fd5167b3902c5e1022270db7b7037a7e5ba7572" translate="yes" xml:space="preserve">
          <source>If Unicode translation is in effect (&lt;code&gt;~ts&lt;/code&gt;), characters &amp;gt; 255 are accepted, otherwise not. With the translation modifier, the returned list can as a consequence also contain integers &amp;gt; 255:</source>
          <target state="translated">Unicode変換が有効な場合（ &lt;code&gt;~ts&lt;/code&gt; ）、255を超える文字は受け入れられ、そうでない場合は受け入れられません。変換修飾子を使用すると、結果として、返されるリストに255より大きい整数も含まれる可能性があります。</target>
        </trans-unit>
        <trans-unit id="3e9eb4fb01bd12ad300a0a96c219b150663189ba" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A :: T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is a type, then Rep(V) = &lt;code&gt;{typed_record_field,{record_field,ANNO,Rep(A)},Rep(T)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A :: T&lt;/code&gt; 場合、 &lt;code&gt;T&lt;/code&gt; はタイプであり、Rep（V）= &lt;code&gt;{typed_record_field,{record_field,ANNO,Rep(A)},Rep(T)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8109397071948c43826e0713ed25b859b8a44c79" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A :: T&lt;/code&gt;, where &lt;code&gt;T&lt;/code&gt; is a type, then Rep(V) = &lt;code&gt;{typed_record_field,{record_field,LINE,Rep(A)},Rep(T)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A :: T&lt;/code&gt; 場合（ &lt;code&gt;T&lt;/code&gt; は型）、Rep（V）= &lt;code&gt;{typed_record_field,{record_field,LINE,Rep(A)},Rep(T)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="bb6fe32cd5968d212727cb82bd15e47cc5d23b10" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A = E :: T&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is an expression and &lt;code&gt;T&lt;/code&gt; is a type, then Rep(V) = &lt;code&gt;{typed_record_field,{record_field,ANNO,Rep(A),Rep(E)},Rep(T)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A = E :: T&lt;/code&gt; 場合、 &lt;code&gt;E&lt;/code&gt; は式、 &lt;code&gt;T&lt;/code&gt; は型である場合、Rep（V）= &lt;code&gt;{typed_record_field,{record_field,ANNO,Rep(A),Rep(E)},Rep(T)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a7f32a52c794ffe7684b6b2810c41e4682238d59" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A = E :: T&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is an expression and &lt;code&gt;T&lt;/code&gt; is a type, then Rep(V) = &lt;code&gt;{typed_record_field,{record_field,LINE,Rep(A),Rep(E)},Rep(T)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A = E :: T&lt;/code&gt; であり、 &lt;code&gt;E&lt;/code&gt; が式で &lt;code&gt;T&lt;/code&gt; が型である場合、Rep（V）= &lt;code&gt;{typed_record_field,{record_field,LINE,Rep(A),Rep(E)},Rep(T)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="cc17addad3b18cec2f98a0aa96fe46ca497758bf" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A = E&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(V) = &lt;code&gt;{record_field,ANNO,Rep(A),Rep(E)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A = E&lt;/code&gt; 場合、 &lt;code&gt;E&lt;/code&gt; は式であり、Rep（V）= &lt;code&gt;{record_field,ANNO,Rep(A),Rep(E)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="5f396f938bddcba478f3de3dee1d32cdd215e7c9" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A = E&lt;/code&gt;, where &lt;code&gt;E&lt;/code&gt; is an expression, then Rep(V) = &lt;code&gt;{record_field,LINE,Rep(A),Rep(E)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A = E&lt;/code&gt; 場合（ &lt;code&gt;E&lt;/code&gt; は式）、Rep（V）= &lt;code&gt;{record_field,LINE,Rep(A),Rep(E)}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="530b26a08f1369a0dde3ebbcc4e657abbc43c708" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A&lt;/code&gt;, then Rep(V) = &lt;code&gt;{record_field,ANNO,Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A&lt;/code&gt; の場合、Rep（V）= &lt;code&gt;{record_field,ANNO,Rep(A)}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="46feb36a0599dccd153195f0bebe327e41e1d422" translate="yes" xml:space="preserve">
          <source>If V is &lt;code&gt;A&lt;/code&gt;, then Rep(V) = &lt;code&gt;{record_field,LINE,Rep(A)}&lt;/code&gt;.</source>
          <target state="translated">Vが &lt;code&gt;A&lt;/code&gt; の場合、Rep（V）= &lt;code&gt;{record_field,LINE,Rep(A)}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="be88adeac37e6ad073f87c039fc9ee408a3d9604" translate="yes" xml:space="preserve">
          <source>If VM is in Unicode filename mode, &lt;code&gt;string()&lt;/code&gt; and &lt;code&gt;char()&lt;/code&gt; are allowed to be &amp;gt; 255. See also the documentation of the &lt;code&gt;&lt;a href=&quot;#type-name_all&quot;&gt;name_all()&lt;/a&gt;&lt;/code&gt; type.</source>
          <target state="translated">VMがUnicodeファイル名モードの場合、 &lt;code&gt;string()&lt;/code&gt; および &lt;code&gt;char()&lt;/code&gt; は&amp;gt; 255にすることができます &lt;code&gt;&lt;a href=&quot;#type-name_all&quot;&gt;name_all()&lt;/a&gt;&lt;/code&gt; タイプのドキュメントも参照してください。</target>
        </trans-unit>
        <trans-unit id="bf04572355facf77510f6eb707d8bddd39905f32" translate="yes" xml:space="preserve">
          <source>If VM is in Unicode filename mode, characters are allowed to be &amp;gt; 255. &lt;code&gt;RawFilename&lt;/code&gt; is a filename not subject to Unicode translation, meaning that it can contain characters not conforming to the Unicode encoding expected from the file system (that is, non-UTF-8 characters although the VM is started in Unicode filename mode). Null characters (integer value zero) are &lt;strong&gt;not&lt;/strong&gt; allowed in filenames (not even at the end).</source>
          <target state="translated">VMがUnicodeファイル名モードの場合、文字は255を &lt;code&gt;RawFilename&lt;/code&gt; ことができます。RawFilenameは、Unicode変換の対象外のファイル名です。つまり、ファイルシステムから予期されるUnicodeエンコーディングに準拠しない文字（つまり、非UTF）を含むことができます。 -8文字（ただし、VMはUnicodeファイル名モードで起動されます）。ファイル名にヌル文字（整数値0）を使用することは&lt;strong&gt;できません&lt;/strong&gt;（末尾にも使用できません）。</target>
        </trans-unit>
        <trans-unit id="c6fa19e3c49a3ba084dbfa57062e1a1ae9c3810d" translate="yes" xml:space="preserve">
          <source>If X = Y, then R is called a relation &lt;strong&gt;in&lt;/strong&gt; X.</source>
          <target state="translated">X = Yの場合、RはXの関係と呼ば&lt;strong&gt;れます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="00c65a44486df5482c6dc2dd5875d8d6aaf46534" translate="yes" xml:space="preserve">
          <source>If a &quot;traditional&quot; transport is specified (without explicit &lt;code&gt;Kind&lt;/code&gt;, handling both requests and traps) for a transport domain, its &lt;strong&gt;not&lt;/strong&gt; possible to also specify a transport (for that domain) with a specific &lt;code&gt;Kind&lt;/code&gt;. This is for example &lt;strong&gt;not&lt;/strong&gt; allowed:</source>
          <target state="translated">トランスポートドメインに「従来の」トランスポートが指定されている場合（明示的な &lt;code&gt;Kind&lt;/code&gt; なしで、要求とトラップの両方を処理）、特定の &lt;code&gt;Kind&lt;/code&gt; で（そのドメインの）トランスポートを指定することもでき&lt;strong&gt;ません&lt;/strong&gt;。これは、たとえば許可されて&lt;strong&gt;いません&lt;/strong&gt;。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="a5da42cb98de8f66497fcf02d854f52ee32aab90" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;&lt;a href=&quot;#simple_cycle&quot;&gt;simple cycle&lt;/a&gt;&lt;/code&gt; of length two or more exists through vertex &lt;code&gt;V&lt;/code&gt;, the cycle is returned as a list &lt;code&gt;[V,&amp;nbsp;...,&amp;nbsp;V]&lt;/code&gt; of vertices. If a &lt;code&gt;&lt;a href=&quot;#loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; through &lt;code&gt;V&lt;/code&gt; exists, the loop is returned as a list &lt;code&gt;[V]&lt;/code&gt;. If no cycles through &lt;code&gt;V&lt;/code&gt; exist, &lt;code&gt;false&lt;/code&gt; is returned.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#simple_cycle&quot;&gt;simple cycle&lt;/a&gt;&lt;/code&gt; 長二つ以上の頂点を通って存在 &lt;code&gt;V&lt;/code&gt; 、サイクルがリストとして返される &lt;code&gt;[V,&amp;nbsp;...,&amp;nbsp;V]&lt;/code&gt; の頂点。場合 &lt;code&gt;&lt;a href=&quot;#loop&quot;&gt;loop&lt;/a&gt;&lt;/code&gt; スルー &lt;code&gt;V&lt;/code&gt; が存在し、ループがリストとして返される &lt;code&gt;[V]&lt;/code&gt; 。 &lt;code&gt;V&lt;/code&gt; を介したサイクルが存在しない場合、 &lt;code&gt;false&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="f4c540f1bcb01b8107384c4ecb40a93c9ff68733" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Dir&lt;/code&gt; already exists in the code path, it is removed from the old position.</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; がコードパスに既に存在する場合は、古い位置から削除されます。</target>
        </trans-unit>
        <trans-unit id="74a148d16947689b4aa97fa5371e271e751763f1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;StateFun&lt;/code&gt; function crashes or throws an exception, the original state of the process is unchanged for &lt;code&gt;gen_server&lt;/code&gt;, and &lt;code&gt;gen_statem&lt;/code&gt; processes. For &lt;code&gt;gen_event&lt;/code&gt; processes, a crashing or failing &lt;code&gt;StateFun&lt;/code&gt; function means that only the state of the particular event handler it was working on when it failed or crashed is unchanged; it can still succeed in changing the states of other event handlers registered in the same &lt;code&gt;gen_event&lt;/code&gt; process.</source>
          <target state="translated">&lt;code&gt;StateFun&lt;/code&gt; 関数がクラッシュするか、例外をスローする場合、プロセスの元の状態は &lt;code&gt;gen_server&lt;/code&gt; および &lt;code&gt;gen_statem&lt;/code&gt; プロセスで変更されていません。以下のために &lt;code&gt;gen_event&lt;/code&gt; プロセス、クラッシュまたは失敗 &lt;code&gt;StateFun&lt;/code&gt; の、それが失敗したか、クラッシュしたとき、それはに取り組んでいた特定のイベントハンドラの状態のみが変更されていない機能手段 それでも、同じ &lt;code&gt;gen_event&lt;/code&gt; プロセスに登録されている他のイベントハンドラーの状態を正常に変更できます。</target>
        </trans-unit>
        <trans-unit id="f16194ae42169305df9c2ac40e5f3bc5d8ab5294" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;StateFun&lt;/code&gt; function decides not to effect any change in process state, then regardless of process type, it can return its &lt;code&gt;State&lt;/code&gt; argument.</source>
          <target state="translated">&lt;code&gt;StateFun&lt;/code&gt; 関数がプロセス状態の変更に影響を与えないと決定した場合、プロセスタイプに関係なく、 &lt;code&gt;State&lt;/code&gt; 引数を返すことができます。</target>
        </trans-unit>
        <trans-unit id="9f3a01e0c748edc694108fe2d71299f36d697f5f" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Tag&lt;/code&gt; is specified, the returned &lt;code&gt;Match&lt;/code&gt; also includes the matched &lt;code&gt;Tag&lt;/code&gt;. Otherwise, only &lt;code&gt;RxMatch&lt;/code&gt; is returned.</source>
          <target state="translated">場合は &lt;code&gt;Tag&lt;/code&gt; 指定され、返された &lt;code&gt;Match&lt;/code&gt; もマッチ含ん &lt;code&gt;Tag&lt;/code&gt; 。それ以外の場合は、 &lt;code&gt;RxMatch&lt;/code&gt; のみが返されます。</target>
        </trans-unit>
        <trans-unit id="71a0319e49e50710f02ee82c0914b94ac22dbba1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Tag&lt;/code&gt; is speciifed, the returned &lt;code&gt;Match&lt;/code&gt; also includes the matched &lt;code&gt;Tag&lt;/code&gt;. Otherwise, only &lt;code&gt;RxMatch&lt;/code&gt; is returned.</source>
          <target state="translated">場合は &lt;code&gt;Tag&lt;/code&gt; speciifedされ、返された &lt;code&gt;Match&lt;/code&gt; もマッチ含ん &lt;code&gt;Tag&lt;/code&gt; 。それ以外の場合は、 &lt;code&gt;RxMatch&lt;/code&gt; のみが返されます。</target>
        </trans-unit>
        <trans-unit id="3a7555617310e8eeba0e7553e2392a16068784c6" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;Threshold&lt;/code&gt; is specified, the counter is reset to value &lt;code&gt;SetValue&lt;/code&gt; if the following conditions occur:</source>
          <target state="translated">場合 &lt;code&gt;Threshold&lt;/code&gt; 指定され、カウンタが値にリセットされ &lt;code&gt;SetValue&lt;/code&gt; を以下の条件が発生した場合：</target>
        </trans-unit>
        <trans-unit id="a5a595a63e0041392424b473cbdb427fc8601eee" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;pid()&lt;/code&gt;, the tuples &lt;code&gt;{timeout, Millis}&lt;/code&gt;, &lt;code&gt;{in, Location}&lt;/code&gt;, and &lt;code&gt;{out, Location}&lt;/code&gt; are present, where &lt;code&gt;Location&lt;/code&gt; is either an MFA (&lt;code&gt;{Module, Function, Arity}&lt;/code&gt;) describing the function where the process was scheduled in/out, or the atom &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;pid()&lt;/code&gt; 、タプル &lt;code&gt;{timeout, Millis}&lt;/code&gt; 、 &lt;code&gt;{in, Location}&lt;/code&gt; 、及び &lt;code&gt;{out, Location}&lt;/code&gt; 存在している、 &lt;code&gt;Location&lt;/code&gt; （MFAのいずれかであり &lt;code&gt;{Module, Function, Arity}&lt;/code&gt; 関数を説明）ここで、工程スケジュールされたイン/アウト、またはアトム &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="68177e2c897ada3a2210fd2fd1b8bee05a073d3a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;port()&lt;/code&gt;, the tuples &lt;code&gt;{timeout, Millis}&lt;/code&gt; and &lt;code&gt;{port_op,Op}&lt;/code&gt; are present. &lt;code&gt;Op&lt;/code&gt; is one of &lt;code&gt;proc_sig&lt;/code&gt;, &lt;code&gt;timeout&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;output&lt;/code&gt;, &lt;code&gt;event&lt;/code&gt;, or &lt;code&gt;dist_cmd&lt;/code&gt;, depending on which driver callback was executing.</source>
          <target state="translated">場合 &lt;code&gt;port()&lt;/code&gt; 、タプル &lt;code&gt;{timeout, Millis}&lt;/code&gt; 及び &lt;code&gt;{port_op,Op}&lt;/code&gt; 存在しています。 &lt;code&gt;Op&lt;/code&gt; は、実行中のドライバーコールバックに応じて、 &lt;code&gt;proc_sig&lt;/code&gt; 、 &lt;code&gt;timeout&lt;/code&gt; 、 &lt;code&gt;input&lt;/code&gt; 、 &lt;code&gt;output&lt;/code&gt; 、 &lt;code&gt;event&lt;/code&gt; 、または &lt;code&gt;dist_cmd&lt;/code&gt; のいずれかです。</target>
        </trans-unit>
        <trans-unit id="793f68726c5cebcf04eed2e69bb996595dba56b1" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;property_parm()&lt;/code&gt; is found as part of the input (&lt;code&gt;SDP&lt;/code&gt;) then it is left unchanged.</source>
          <target state="translated">&lt;code&gt;property_parm()&lt;/code&gt; が入力（ &lt;code&gt;SDP&lt;/code&gt; ）の一部として見つかった場合、変更されません。</target>
        </trans-unit>
        <trans-unit id="85b487c95345f7250096baeb7f6ceb5385465d9a" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;pwdfun&lt;/code&gt; is defined, that one is called and the returned boolean is the authentication result.</source>
          <target state="translated">&lt;code&gt;pwdfun&lt;/code&gt; が定義されている場合、そのpwdfunが呼び出され、返されるブール値が認証結果になります。</target>
        </trans-unit>
        <trans-unit id="64a1cdf79545c23e02941821b867906efcc046dd" translate="yes" xml:space="preserve">
          <source>If a &lt;code&gt;relup&lt;/code&gt; file and/or a system configuration file called &lt;code&gt;sys.config&lt;/code&gt;, or a &lt;code&gt;sys.config.src&lt;/code&gt;, is found, these files are also included in the release package. See &lt;code&gt;&lt;a href=&quot;release_handling#req&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;relup&lt;/code&gt; ファイルおよび/またはと呼ばれるシステム・コンフィギュレーション・ファイル &lt;code&gt;sys.config&lt;/code&gt; 、または &lt;code&gt;sys.config.src&lt;/code&gt; 発見され、これらのファイルもリリースパッケージに含まれています。 &lt;code&gt;&lt;a href=&quot;release_handling#req&quot;&gt;Release Handling&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="90bab5222409642ed3e9b025afcf25e28ff5080e" translate="yes" xml:space="preserve">
          <source>If a &lt;strong&gt;tick&lt;/strong&gt; occurs, that is, the Erlang node on the other end of the connection has polled this node to see if it is still alive, the function returns &lt;code&gt;ERL_TICK&lt;/code&gt; and no message is placed in the buffer. Also, &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EAGAIN&lt;/code&gt;.</source>
          <target state="translated">場合&lt;strong&gt;ダニが&lt;/strong&gt;発生する、すなわち、接続のもう一方の端にアーラン・ノードは、それがまだ生きているかどうかを確認するために、このノードをポーリングしており、この関数は返す &lt;code&gt;ERL_TICK&lt;/code&gt; およびNOメッセージがバッファに置かれていません。また、 &lt;code&gt;erl_errno&lt;/code&gt; は &lt;code&gt;EAGAIN&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="20a48a4a5f7af813214b4a1f7a53e0d6d083deb2" translate="yes" xml:space="preserve">
          <source>If a &lt;strong&gt;tick&lt;/strong&gt; occurs, that is, the Erlang node on the other end of the connection has polled this node to see if it is still alive, the function returns &lt;code&gt;ERL_TICK&lt;/code&gt; indicating that the tick has been received and responded to, but no message is placed in the buffer. In this case you are to call &lt;code&gt;erl_receive_msg()&lt;/code&gt; again.</source>
          <target state="translated">場合&lt;strong&gt;ダニが&lt;/strong&gt;発生し、接続のもう一方の端にアーラン・ノードは、それがまだ生きているかどうかを確認するために、このノードをポーリングしているとすると、この関数は返す &lt;code&gt;ERL_TICK&lt;/code&gt; をダニが受信さに応答したことを示すが、何らメッセージが置かれていませんバッファ内。この場合、 &lt;code&gt;erl_receive_msg()&lt;/code&gt; を再度呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="688f42cde6aa17e471ac615786a4c6b4015e0179" translate="yes" xml:space="preserve">
          <source>If a URI component has a character that is not allowed, it will be percent-encoded when the URI is produced:</source>
          <target state="translated">URIコンポーネントが許可されていない文字を持つ場合、URIが生成されるときにパーセンテージエンコードされる。</target>
        </trans-unit>
        <trans-unit id="f4364cbd8c0d3d620c728241f3c91ca9a0df5663" translate="yes" xml:space="preserve">
          <source>If a binary is sent as a message to a process or port, the binary will be shrunk and any further append operation will copy the binary data into a new binary. For example, in the following code fragment &lt;code&gt;Bin1&lt;/code&gt; will be copied in the third line:</source>
          <target state="translated">バイナリがメッセージとしてプロセスまたはポートに送信されると、バイナリは縮小され、追加の操作によってバイナリデータが新しいバイナリにコピーされます。たとえば、次のコードでは、 &lt;code&gt;Bin1&lt;/code&gt; が3行目にコピーされます。</target>
        </trans-unit>
        <trans-unit id="5090ad34e0febaa291c69020c02b54e9b3cafd88" translate="yes" xml:space="preserve">
          <source>If a binary references a larger binary (often described as being a subbinary), it can be useful to get the size of the referenced binary. This function can be used in a program to trigger the use of &lt;code&gt;&lt;a href=&quot;#copy-1&quot;&gt;copy/1&lt;/a&gt;&lt;/code&gt;. By copying a binary, one can dereference the original, possibly large, binary that a smaller binary is a reference to.</source>
          <target state="translated">バイナリがより大きなバイナリを参照する場合（サブバイナリであることが多い）、参照されるバイナリのサイズを取得すると便利です。この関数は、プログラムで &lt;code&gt;&lt;a href=&quot;#copy-1&quot;&gt;copy/1&lt;/a&gt;&lt;/code&gt; の使用をトリガーするために使用できます。バイナリをコピーすることにより、元の、おそらく大きいバイナリを逆参照することができ、小さいバイナリはそれを参照します。</target>
        </trans-unit>
        <trans-unit id="bcde4e46ca8a493fcb199170b76f962a5fc5534f" translate="yes" xml:space="preserve">
          <source>If a call is added to this function, say in module &lt;code&gt;m1&lt;/code&gt;, a runtime error could can occur during release upgrade if the new version of &lt;code&gt;m1&lt;/code&gt; is loaded first and calls &lt;code&gt;ch3:available/0&lt;/code&gt; before the new version of &lt;code&gt;ch3&lt;/code&gt; is loaded.</source>
          <target state="translated">この関数に呼び出しが追加された場合（モジュール &lt;code&gt;m1&lt;/code&gt; など）、新しいバージョンの &lt;code&gt;m1&lt;/code&gt; が最初にロードされ、新しいバージョンの &lt;code&gt;ch3&lt;/code&gt; がロードされる前に &lt;code&gt;ch3:available/0&lt;/code&gt; を呼び出すと、リリースのアップグレード中にランタイムエラーが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="d672e9be794bb20d13fca259b638d9872ca48c52" translate="yes" xml:space="preserve">
          <source>If a callback (performing the file access in the TFTP server) takes too long time (more than the double TFTP time-out), the server aborts the connection and sends an error reply to the client. This implies that the server releases resources attached to the connection faster than before. The server simply assumes that the client has given up.</source>
          <target state="translated">コールバック (TFTP サーバでのファイルアクセスの実行)に時間がかかりすぎると (TFTP のタイムアウト時間の 2 倍以上)、サーバは接続を中止し、クライアントにエラー応答を送信します。これは、サーバが接続に接続されているリソースを以前よりも速く解放することを意味します。サーバは単にクライアントがあきらめたと仮定しています。</target>
        </trans-unit>
        <trans-unit id="b5299cdbeb0a91fc95e90dba08d8ca1a2663ba62" translate="yes" xml:space="preserve">
          <source>If a callback function fails or returns a bad value, the &lt;code&gt;gen_server&lt;/code&gt; process terminates.</source>
          <target state="translated">コールバック関数が失敗した場合、または不正な値を返した場合、 &lt;code&gt;gen_server&lt;/code&gt; プロセスは終了します。</target>
        </trans-unit>
        <trans-unit id="e4e015fa7495e24f93ba1b6d6271a425520bd035" translate="yes" xml:space="preserve">
          <source>If a callback function fails or returns a bad value, the &lt;code&gt;gen_statem&lt;/code&gt; terminates, unless otherwise stated. However, an exception of class &lt;code&gt;throw&lt;/code&gt; is not regarded as an error but as a valid return from all callback functions.</source>
          <target state="translated">コールバック関数が失敗した場合、または不正な値を返した場合、特に明記されていない限り、 &lt;code&gt;gen_statem&lt;/code&gt; は終了します。ただし、クラス &lt;code&gt;throw&lt;/code&gt; の例外はエラーとは見なされず、すべてのコールバック関数からの有効な戻りと見なされます。</target>
        </trans-unit>
        <trans-unit id="cb6c6d4e44bcb4f44a78613ffcfcc49d8fc1ed0e" translate="yes" xml:space="preserve">
          <source>If a carrier employed by a foreign allocator becomes empty, it will be passed back to the owner for deallocation using the delayed dealloc functionality.</source>
          <target state="translated">外部アロケータに採用されたキャリアが空になった場合、遅延dealloc機能を使用してdeallocのために所有者に引き渡されます。</target>
        </trans-unit>
        <trans-unit id="4900c7b9d94d3b64a0cfc23cc79861beaa9067fc" translate="yes" xml:space="preserve">
          <source>If a carrier in the pool becomes empty, it will be withdrawn from the pool and be deallocated by the owner which already employs it.</source>
          <target state="translated">プール内のキャリアが空になった場合、そのキャリアはプールから取り外され、すでにそれを採用しているオーナーによって再配置されます。</target>
        </trans-unit>
        <trans-unit id="d2220ee07a02652209f14bbc36c9099d4b6fe0ac" translate="yes" xml:space="preserve">
          <source>If a child process terminates, all other child processes are terminated, and then all child processes, including the terminated one, are restarted.</source>
          <target state="translated">子プロセスが終了すると、他のすべての子プロセスが終了し、終了したものを含むすべての子プロセスが再起動されます。</target>
        </trans-unit>
        <trans-unit id="c9c437f353a175442240ea2029595a8633f65dff" translate="yes" xml:space="preserve">
          <source>If a child process terminates, only that process is restarted.</source>
          <target state="translated">子プロセスが終了した場合は、そのプロセスのみが再起動されます。</target>
        </trans-unit>
        <trans-unit id="7507b23dc1b78f0736fa82a074e0d7da39372d83" translate="yes" xml:space="preserve">
          <source>If a child process terminates, the rest of the child processes (that is, the child processes after the terminated process in start order) are terminated. Then the terminated child process and the rest of the child processes are restarted.</source>
          <target state="translated">子プロセスが終了すると、残りの子プロセス(つまり、開始順に終了したプロセスの後の子プロセス)が終了する。その後、終了した子プロセスと残りの子プロセスが再起動されます。</target>
        </trans-unit>
        <trans-unit id="d930d204b5a28f5ad0b963925f58f75368275cfb" translate="yes" xml:space="preserve">
          <source>If a client and a server wants to use an upgrade mechanism, such as defined by RFC 2817, to upgrade a regular TCP/IP connection to a TLS connection, this is supported by the Erlang SSL application API. This can be useful for, for example, supporting HTTP and HTTPS on the same port and implementing virtual hosting. Note this is a TLS feature only.</source>
          <target state="translated">クライアントとサーバがRFC 2817で定義されているようなアップグレードメカニズムを使って、通常のTCP/IP接続をTLS接続にアップグレードしたい場合、Erlang SSLアプリケーションAPIでサポートされています。これは例えば、同じポートでHTTPとHTTPSをサポートしたり、バーチャルホスティングを実装したりするのに便利です。これはTLS機能のみであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="30f0124339350cc4e352e860e84fd95007fc0287" translate="yes" xml:space="preserve">
          <source>If a client and a server wants to use an upgrade mechanism, such as defined by RFC 2817, to upgrade a regular TCP/IP connection to an TLS connection, this is supported by the Erlang SSL application API. This can be useful for, for example, supporting HTTP and HTTPS on the same port and implementing virtual hosting. Note this is a TLS feature only.</source>
          <target state="translated">クライアントとサーバがRFC 2817で定義されているようなアップグレードメカニズムを使って、通常のTCP/IP接続をTLS接続にアップグレードしたい場合、Erlang SSLアプリケーションAPIでサポートされています。これは例えば、同じポートでHTTPとHTTPSをサポートしたり、バーチャルホスティングを実装したりするのに便利です。これはTLS機能のみであることに注意してください。</target>
        </trans-unit>
        <trans-unit id="6fb7903555258379fa86ef3cac0cdacd6a86b7aa" translate="yes" xml:space="preserve">
          <source>If a client is started (ssh:connect et al), the environment variable &lt;code&gt;client_options&lt;/code&gt; is used. Similarly for a daemon the &lt;code&gt;server_options&lt;/code&gt; variable is handled.</source>
          <target state="translated">クライアントが開始されると（ssh：connect et al）、環境変数 &lt;code&gt;client_options&lt;/code&gt; が使用されます。同様に、デーモンの場合、 &lt;code&gt;server_options&lt;/code&gt; 変数が処理されます。</target>
        </trans-unit>
        <trans-unit id="5cf674d6f811a6898fedc16a08be96658f66f44f" translate="yes" xml:space="preserve">
          <source>If a client sends more than one of the header fields that restricts the servers right to respond, the standard does not specify how this is to be handled. &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd(3)&lt;/a&gt;&lt;/code&gt; controls each field in the following order and if one of the fields does not match the current state, the request is rejected with a proper response:</source>
          <target state="translated">クライアントがサーバーの応答権を制限する複数のヘッダーフィールドを送信する場合、標準ではこれをどのように処理するかは指定されていません。 &lt;code&gt;&lt;a href=&quot;httpd&quot;&gt;httpd(3)&lt;/a&gt;&lt;/code&gt; は、各フィールドを次の順序で制御し、フィールドの1つが現在の状態と一致しない場合、要求は適切な応答で拒否されます。</target>
        </trans-unit>
        <trans-unit id="e27ccd3f361e3a3fbab2cff1701eede9199b66b3" translate="yes" xml:space="preserve">
          <source>If a command (local function call) is not recognized by the shell, an attempt is first made to find the function in module &lt;code&gt;user_default&lt;/code&gt;, where customized local commands can be placed. If found, the function is evaluated, otherwise an attempt is made to evaluate the function in module &lt;code&gt;shell_default&lt;/code&gt;. Module &lt;code&gt;user_default&lt;/code&gt; must be explicitly loaded.</source>
          <target state="translated">コマンド（ローカル関数呼び出し）がシェルによって認識されない場合は、最初にモジュール &lt;code&gt;user_default&lt;/code&gt; で関数を検索する試みが行われ、カスタマイズされたローカルコマンドを配置できます。見つかった場合、関数が評価されます。 &lt;code&gt;shell_default&lt;/code&gt; た場合、モジュールshell_defaultで関数の評価が試行されます。モジュール &lt;code&gt;user_default&lt;/code&gt; は明示的にロードする必要があります。</target>
        </trans-unit>
        <trans-unit id="c36c504c5a55c7d3e1004baa209d8df31f96a326" translate="yes" xml:space="preserve">
          <source>If a comment selecting the &lt;code&gt;encoding&lt;/code&gt; exists, it can be located on the second line.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; 選択するコメントが存在する場合は、2行目に配置できます。</target>
        </trans-unit>
        <trans-unit id="81cca8ba4d8e6db9b3078f3494bdf4b64a21625a" translate="yes" xml:space="preserve">
          <source>If a complete system consists of disk-less and/or read-only client nodes, a &lt;code&gt;clients&lt;/code&gt; directory is to be added to the &lt;code&gt;$ROOT&lt;/code&gt; directory. A read-only node is a node with a read-only file system.</source>
          <target state="translated">完全なシステムがディスクレスまたは読み取り専用のクライアントノードで構成されている場合、 &lt;code&gt;clients&lt;/code&gt; ディレクトリが &lt;code&gt;$ROOT&lt;/code&gt; ディレクトリに追加されます。読み取り専用ノードは、読み取り専用ファイルシステムを持つノードです。</target>
        </trans-unit>
        <trans-unit id="114507e06ec8251c1f8b58a05d6e95c9f0294db1" translate="yes" xml:space="preserve">
          <source>If a compressed stream with a larger window size is specified as input, &lt;code&gt;&lt;a href=&quot;#inflate-2&quot;&gt;inflate/2&lt;/a&gt;&lt;/code&gt; throws the &lt;code&gt;data_error&lt;/code&gt; exception.</source>
          <target state="translated">ウィンドウサイズが大きい圧縮ストリームが入力として指定されている場合、 &lt;code&gt;&lt;a href=&quot;#inflate-2&quot;&gt;inflate/2&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;data_error&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="d5d1665dab7973da2ee300d7146a8bea80f54e0b" translate="yes" xml:space="preserve">
          <source>If a condition test for a subpattern having matched refers to a non-unique number, the test is true if any of the subpatterns of that number have matched.</source>
          <target state="translated">一致したサブパターンの条件テストが非一意でない数を参照している場合、その数のサブパターンのどれかが一致していればテストは真です。</target>
        </trans-unit>
        <trans-unit id="54dcbb12cbe33c06847716fee8fa5d710e5db085" translate="yes" xml:space="preserve">
          <source>If a configuration variable is defined in multiple files and you want to access all possible values, use function &lt;code&gt;&lt;a href=&quot;ct#get_config-3&quot;&gt;ct:get_config/3&lt;/a&gt;&lt;/code&gt; and specify &lt;code&gt;all&lt;/code&gt; in the options list. The values are then returned in a list and the order of the elements corresponds to the order that the configuration files were specified at startup.</source>
          <target state="translated">構成変数が複数のファイルで定義されていて、可能なすべての値にアクセスする場合は、関数 &lt;code&gt;&lt;a href=&quot;ct#get_config-3&quot;&gt;ct:get_config/3&lt;/a&gt;&lt;/code&gt; を使用して、オプションリストに &lt;code&gt;all&lt;/code&gt; を指定します。次に、値はリストで返され、要素の順序は、起動時に構成ファイルが指定された順序に対応します。</target>
        </trans-unit>
        <trans-unit id="0feca975d542bb0cc969b217767e215cd1ff5ce8" translate="yes" xml:space="preserve">
          <source>If a configuration variable is defined in multiple files, use option &lt;code&gt;all&lt;/code&gt; to access all possible values. The values are returned in a list. The order of the elements corresponds to the order that the configuration files were specified at startup.</source>
          <target state="translated">構成変数が複数のファイルで定義されている場合は、オプション &lt;code&gt;all&lt;/code&gt; を使用して、可能なすべての値にアクセスします。値はリストで返されます。要素の順序は、起動時に構成ファイルが指定された順序に対応しています。</target>
        </trans-unit>
        <trans-unit id="1b9661fe7033eba3fb41e53ee1dcb7e1bb7fe5b9" translate="yes" xml:space="preserve">
          <source>If a configuration variable key has been associated with a name (by &lt;code&gt;&lt;a href=&quot;#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt; or a &lt;code&gt;require&lt;/code&gt; statement), the name can be used instead of the key to read the value:</source>
          <target state="translated">構成変数キーが名前に関連付けられている場合（ &lt;code&gt;&lt;a href=&quot;#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;require&lt;/code&gt; ステートメントによって）、キーの代わりに名前を使用して値を読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="9a3f8db667e8bd436b47dbf9ca11fe7bcf52f5e1" translate="yes" xml:space="preserve">
          <source>If a connection attempt fails, the following can be checked:</source>
          <target state="translated">接続の試みが失敗した場合は、以下を確認することができます。</target>
        </trans-unit>
        <trans-unit id="64f616a997808c9474daa0409579dbb91fef959e" translate="yes" xml:space="preserve">
          <source>If a crash occurs after this instruction, the system cannot recover and is restarted from the old release version. The instruction must only occur once in a script. It is to be placed after all &lt;code&gt;load_object_code&lt;/code&gt; instructions.</source>
          <target state="translated">この指示の後にクラッシュが発生した場合、システムは回復できず、古いリリースバージョンから再起動されます。命令はスクリプト内で1回だけ発生する必要があります。すべての &lt;code&gt;load_object_code&lt;/code&gt; 命令の後に配置されます。</target>
        </trans-unit>
        <trans-unit id="a2df1e7bdcf4b38219e76db42a7407ed6f3a44c6" translate="yes" xml:space="preserve">
          <source>If a crash occurs, an &lt;code&gt;erl_crash.dump&lt;/code&gt; is &lt;strong&gt;not&lt;/strong&gt; written unless environment variable &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; is set:</source>
          <target state="translated">クラッシュが発生した場合、環境変数 &lt;code&gt;ERL_CRASH_DUMP_SECONDS&lt;/code&gt; が設定されていない限り、 &lt;code&gt;erl_crash.dump&lt;/code&gt; は書き込まれ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="990352c71d728a05d2ecb284bad93c6958f6c7e3" translate="yes" xml:space="preserve">
          <source>If a custom CLI is installed (see the option &lt;code&gt;&lt;a href=&quot;#type-ssh_cli_daemon_option&quot;&gt;ssh_cli&lt;/a&gt;&lt;/code&gt;) the rules above are replaced by thoose implied by the custom CLI.</source>
          <target state="translated">カスタムCLIがインストールされている場合（オプション &lt;code&gt;&lt;a href=&quot;#type-ssh_cli_daemon_option&quot;&gt;ssh_cli&lt;/a&gt;&lt;/code&gt; を参照）、上記のルールは、カスタムCLIによって暗黙的に指定されたルールに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="a77a173e95ad2269f4f246fd4ce1b5864fc76ada" translate="yes" xml:space="preserve">
          <source>If a default object &lt;code&gt;Default&lt;/code&gt; is specified, it is used as the object to be updated if the key is missing from the table. The value in place of the key is ignored and replaced by the proper key value. The return value is as if the default object had not been used, that is, a single updated element or a list of them.</source>
          <target state="translated">デフォルトのオブジェクト &lt;code&gt;Default&lt;/code&gt; が指定されている場合、テーブルにキーがない場合に更新されるオブジェクトとして使用されます。キーの代わりの値は無視され、適切なキー値に置き換えられます。戻り値は、デフォルトのオブジェクトが使用されなかったかのようです。つまり、単一の更新された要素またはそれらのリストです。</target>
        </trans-unit>
        <trans-unit id="fedf7b02f05498afd04860368d31fbddefe371d5" translate="yes" xml:space="preserve">
          <source>If a directory is limited both by authentication directives in the HTTP server configuration file and by the &lt;code&gt;htaccess&lt;/code&gt; files, the user must be allowed to get access to the file by both methods for the request to succeed.</source>
          <target state="translated">ディレクトリがHTTPサーバー構成ファイルの認証ディレクティブと &lt;code&gt;htaccess&lt;/code&gt; ファイルの両方によって制限されている場合、リクエストが成功するには、ユーザーは両方の方法でファイルへのアクセスを許可されている必要があります。</target>
        </trans-unit>
        <trans-unit id="06b77a14a9631e3efe172824e4438ea9844c1c57" translate="yes" xml:space="preserve">
          <source>If a disaster occurs and the &lt;code&gt;Mnesia&lt;/code&gt; database is corrupted, it can be reconstructed from a backup. Regard this as a last resort, as the backup contains old data. The data is hopefully consistent, but data is definitely lost when an old backup is used to restore the database.</source>
          <target state="translated">災害が発生して &lt;code&gt;Mnesia&lt;/code&gt; データベースが破損した場合、バックアップから再構築できます。バックアップには古いデータが含まれているため、これは最後の手段と見なしてください。データは整合性が取れていることが望まれますが、古いバックアップを使用してデータベースを復元すると、データは確実に失われます。</target>
        </trans-unit>
        <trans-unit id="5f3cf29891ec99694dc2c7c6253ad367ac7a3461" translate="yes" xml:space="preserve">
          <source>If a diskless and/or read-only client node is about to start, file &lt;code&gt;start_erl.data&lt;/code&gt; is located in the client directory at the master node. Thus, the &lt;code&gt;START_ERL_DATA&lt;/code&gt; line is to look like:</source>
          <target state="translated">ディスクレスおよび/または読み取り専用のクライアントノードが起動しようとしている場合、ファイル &lt;code&gt;start_erl.data&lt;/code&gt; はマスターノードのクライアントディレクトリにあります。したがって、 &lt;code&gt;START_ERL_DATA&lt;/code&gt; 行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="82a0e287fdd1e5f6d5eb37393a55caeaa8bd420e" translate="yes" xml:space="preserve">
          <source>If a diskless and/or read-only client node with the SASL configuration parameter &lt;code&gt;static_emulator&lt;/code&gt; set to &lt;code&gt;true&lt;/code&gt; is about to start, the &lt;code&gt;-boot&lt;/code&gt; and &lt;code&gt;-config&lt;/code&gt; flags must be changed.</source>
          <target state="translated">SASL構成パラメーター &lt;code&gt;static_emulator&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定したディスクレスまたは読み取り専用のクライアントノード（あるいはその両方）が起動しようとしている場合は、 &lt;code&gt;-boot&lt;/code&gt; および &lt;code&gt;-config&lt;/code&gt; フラグを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="727df7ab6749918e93887b82b12046b24dcb7655" translate="yes" xml:space="preserve">
          <source>If a driver is used in a functional way (that is, holds no state, but only does some heavy calculation and returns a result), several ports with registered names can be opened beforehand, and the port to be used can be chosen based on the scheduler ID as follows:</source>
          <target state="translated">ドライバを機能的に使用する場合(状態を保持せず、重い計算をして結果を返すだけの場合)には、あらかじめ登録された名前のポートを複数開いておき、スケジューラIDに基づいて以下のように使用するポートを選択することができます。</target>
        </trans-unit>
        <trans-unit id="3f6d6f3cd21444705a34e8bba2dffb954001faed" translate="yes" xml:space="preserve">
          <source>If a feature has been added in R13A or later, this is mentioned in the text.</source>
          <target state="translated">R13A以降で機能が追加されている場合は、本文に記載されています。</target>
        </trans-unit>
        <trans-unit id="34f202d62579e4feee1dfdcda9ab5acaef776ff3" translate="yes" xml:space="preserve">
          <source>If a filename is specified as argument, Debugger tries to load its settings from this file. For details about settings, see the User's Guide.</source>
          <target state="translated">引数にファイル名を指定すると、デバッガはこのファイルから設定を読み込もうとします。設定の詳細については、ユーザーズガイドを参照してください。</target>
        </trans-unit>
        <trans-unit id="ea25cbb8b26670068e8ad47b07d6ef15d55f99f4" translate="yes" xml:space="preserve">
          <source>If a filter or handler still crashes, Logger will remove the filter or handler in question from the configuration, and print a short error message to the terminal. A debug event containing the crash reason and other details is also issued.</source>
          <target state="translated">フィルタやハンドラがまだクラッシュしている場合、Logger は設定から問題のフィルタやハンドラを削除し、短いエラーメッセージをターミナルに表示します。クラッシュの理由やその他の詳細を含むデバッグイベントも発行されます。</target>
        </trans-unit>
        <trans-unit id="cceb2b6f7ec210d1178bfcad319491366c2280e9" translate="yes" xml:space="preserve">
          <source>If a fun is already registered when attempting to register a fun, &lt;code&gt;{error, exists}&lt;/code&gt; is returned.</source>
          <target state="translated">ファンを登録しようとしたときにすでにファンが登録されている場合、 &lt;code&gt;{error, exists}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="369b66436bacc61b5a02e5467b68ce2d193e98ed" translate="yes" xml:space="preserve">
          <source>If a function is specified as input and the last input function returns &lt;code&gt;{end_of_input, Value}&lt;/code&gt;, the function specified as output is called with argument &lt;code&gt;{value, Value}&lt;/code&gt;. This makes it easy to initiate the sequence of output functions with a value calculated by the input functions.</source>
          <target state="translated">関数が入力として指定され、最後の入力関数が &lt;code&gt;{end_of_input, Value}&lt;/code&gt; 返す場合、出力として指定された関数は引数 &lt;code&gt;{value, Value}&lt;/code&gt; 呼び出されます。これにより、入力関数によって計算された値で出力関数のシーケンスを簡単に開始できます。</target>
        </trans-unit>
        <trans-unit id="6ebc3e92f35620a8a503c6277f4b94fd5dcf6d25" translate="yes" xml:space="preserve">
          <source>If a garbage collection in the system results in the allocated size of a heap being at least &lt;code&gt;Size&lt;/code&gt; words, a message &lt;code&gt;{monitor, GcPid, large_heap, Info}&lt;/code&gt; is sent to &lt;code&gt;MonitorPid&lt;/code&gt;. &lt;code&gt;GcPid&lt;/code&gt; and &lt;code&gt;Info&lt;/code&gt; are the same as for &lt;code&gt;long_gc&lt;/code&gt; earlier, except that the tuple tagged with &lt;code&gt;timeout&lt;/code&gt; is not present.</source>
          <target state="translated">システムのガベージコレクションの結果、割り当てられたヒープのサイズが少なくとも &lt;code&gt;Size&lt;/code&gt; ワードの場合、メッセージ &lt;code&gt;{monitor, GcPid, large_heap, Info}&lt;/code&gt; が &lt;code&gt;MonitorPid&lt;/code&gt; に送信されます。 &lt;code&gt;GcPid&lt;/code&gt; と &lt;code&gt;Info&lt;/code&gt; は、 &lt;code&gt;timeout&lt;/code&gt; でタグ付けされたタプルが存在しないことを除いて、以前の &lt;code&gt;long_gc&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="0fa572748a61109872681b645add693c92c91ac0" translate="yes" xml:space="preserve">
          <source>If a garbage collection in the system takes at least &lt;code&gt;Time&lt;/code&gt; wall clock milliseconds, a message &lt;code&gt;{monitor, GcPid, long_gc, Info}&lt;/code&gt; is sent to &lt;code&gt;MonitorPid&lt;/code&gt;. &lt;code&gt;GcPid&lt;/code&gt; is the pid that was garbage collected. &lt;code&gt;Info&lt;/code&gt; is a list of two-element tuples describing the result of the garbage collection.</source>
          <target state="translated">システム内のガベージコレクションは、少なくともかかる場合 &lt;code&gt;Time&lt;/code&gt; 壁時計ミリ秒、メッセージ &lt;code&gt;{monitor, GcPid, long_gc, Info}&lt;/code&gt; に送信され &lt;code&gt;MonitorPid&lt;/code&gt; 。 &lt;code&gt;GcPid&lt;/code&gt; は、ガベージコレクションされたpidです。 &lt;code&gt;Info&lt;/code&gt; は、ガベージコレクションの結果を説明する2要素のタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="9fc0db6a6ffa20f6ce91fac40d2bed50efc41760" translate="yes" xml:space="preserve">
          <source>If a given module is not Cover compiled, this is indicated by the error reason &lt;code&gt;{not_cover_compiled,Module}&lt;/code&gt;.</source>
          <target state="translated">特定のモジュールがカバーコンパイルされていない場合、これはエラー理由 &lt;code&gt;{not_cover_compiled,Module}&lt;/code&gt; 示されます。</target>
        </trans-unit>
        <trans-unit id="1fd4da11cbcec24fe617e2cfb21bda9700c3ceef" translate="yes" xml:space="preserve">
          <source>If a group contains subgroups, the execution properties for these can also be specified in the group tuple: &lt;code&gt;{group,GroupName,Properties,SubGroups}&lt;/code&gt; Where, &lt;code&gt;SubGroups&lt;/code&gt; is a list of tuples, &lt;code&gt;{GroupName,Properties}&lt;/code&gt; or &lt;code&gt;{GroupName,Properties,SubGroups}&lt;/code&gt; representing the subgroups. Any subgroups defined in &lt;code&gt;group/0&lt;/code&gt; for a group, that are not specified in the &lt;code&gt;SubGroups&lt;/code&gt; list, executes with their predefined properties.</source>
          <target state="translated">グループにサブグループが含まれている場合、これらの実行プロパティはグループタプルで指定することもできます。 &lt;code&gt;{group,GroupName,Properties,SubGroups}&lt;/code&gt; ここで、 &lt;code&gt;SubGroups&lt;/code&gt; はタプルのリストです。 &lt;code&gt;{GroupName,Properties}&lt;/code&gt; または &lt;code&gt;{GroupName,Properties,SubGroups}&lt;/code&gt; サブグループを表す}。で定義された任意のサブグループ &lt;code&gt;group/0&lt;/code&gt; で指定されていないグループのために、 &lt;code&gt;SubGroups&lt;/code&gt; リスト、それらの事前定義された特性を有する実行します。</target>
        </trans-unit>
        <trans-unit id="2666a5da5f12edc23c65da1ead81b4fae39f0c6b" translate="yes" xml:space="preserve">
          <source>If a group has a parallel property, its test cases are spawned simultaneously and get executed in parallel. However, a test case is not allowed to execute in parallel with &lt;code&gt;end_per_group/2&lt;/code&gt;, which means that the time to execute a parallel group is equal to the execution time of the slowest test case in the group. A negative side effect of running test cases in parallel is that the HTML summary pages are not updated with links to the individual test case logs until function &lt;code&gt;end_per_group/2&lt;/code&gt; for the group has finished.</source>
          <target state="translated">グループに並列プロパティがある場合、そのテストケースは同時に生成され、並列で実行されます。ただし、テストケースを &lt;code&gt;end_per_group/2&lt;/code&gt; と並行して実行することはできません。つまり、並列グループの実行時間は、グループ内で最も遅いテストケースの実行時間と同じです。テストケースを並行して実行することのマイナスの副作用は、グループの関数 &lt;code&gt;end_per_group/2&lt;/code&gt; が終了するまで、HTMLサマリーページが個々のテストケースログへのリンクで更新されないことです。</target>
        </trans-unit>
        <trans-unit id="8bb7010fa14d24ee8209de3626a77d1e0f85e457" translate="yes" xml:space="preserve">
          <source>If a key is removed compared to the current configuration, and the key is known by Logger, the default value is used. If it is a custom key, then it is up to the handler implementation if the value is removed or a default value is inserted.</source>
          <target state="translated">現在の設定と比較してキーが削除され、そのキーがロガーによって知られている場合、デフォルト値が使用されます。それがカスタム キーの場合、値が削除されるか、デフォルト値が挿入されるかは、ハンドラの実装次第です。</target>
        </trans-unit>
        <trans-unit id="11708959f85882a0251af3731723c98e8ebf01ea" translate="yes" xml:space="preserve">
          <source>If a key is removed compared to the current configuration, the default value is used.</source>
          <target state="translated">現在の構成と比較してキーが削除された場合は、デフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="5dfcb13b302f0d14decac13131536de1d6f9c84b" translate="yes" xml:space="preserve">
          <source>If a list of &lt;code&gt;ModFiles&lt;/code&gt; is given as input, a list of &lt;code&gt;Result&lt;/code&gt; will be returned. The order of the returned list is undefined.</source>
          <target state="translated">&lt;code&gt;ModFiles&lt;/code&gt; リストを入力として指定すると、 &lt;code&gt;Result&lt;/code&gt; のリストが返されます。返されるリストの順序は定義されていません。</target>
        </trans-unit>
        <trans-unit id="f8890c3d642a5caba2f616485052ab5bd181a9ec" translate="yes" xml:space="preserve">
          <source>If a list of identifiers is used in an &lt;code&gt;&amp;lt;IdDefs&amp;gt;&lt;/code&gt;:</source>
          <target state="translated">識別子のリストが &lt;code&gt;&amp;lt;IdDefs&amp;gt;&lt;/code&gt; で使用されている場合：</target>
        </trans-unit>
        <trans-unit id="69f7917cc57f0edf963801bba057a225f78af5d2" translate="yes" xml:space="preserve">
          <source>If a local function has the same name as an auto-imported BIF, the semantics is that implicitly qualified function calls are directed to the locally defined function, not to the BIF. To avoid confusion, there is a compiler directive available, &lt;code&gt;-compile({no_auto_import,[F/A]})&lt;/code&gt;, that makes a BIF not being auto-imported. In certain situations, such a compile-directive is mandatory.</source>
          <target state="translated">ローカル関数の名前が自動インポートされたBIFと同じである場合、セマンティクスは、暗黙的に修飾された関数呼び出しがBIFではなくローカルで定義された関数に送られることです。混乱を避けるために、BIFが自動インポートされないようにするコンパイラディレクティブ &lt;code&gt;-compile({no_auto_import,[F/A]})&lt;/code&gt; があります。特定の状況では、そのようなコンパイルディレクティブは必須です。</target>
        </trans-unit>
        <trans-unit id="6f9bef85716e3a896ddd92ef48c5bf0c2c758aee" translate="yes" xml:space="preserve">
          <source>If a log event passes through all primary filters and all handler filters for a specific handler, Logger forwards the event to the &lt;strong&gt;handler callback&lt;/strong&gt;. The handler formats and prints the event to its destination. See section &lt;code&gt;&lt;a href=&quot;#handlers&quot;&gt;Handlers&lt;/a&gt;&lt;/code&gt; for more details.</source>
          <target state="translated">ログイベントが特定のハンドラーのすべてのプライマリフィルターとすべてのハンドラーフィルターを通過する場合、ロガーはイベントを&lt;strong&gt;ハンドラーコールバックに&lt;/strong&gt;転送し&lt;strong&gt;ます&lt;/strong&gt;。ハンドラーは、イベントをフォーマットして宛先に出力します。詳細については、「 &lt;code&gt;&lt;a href=&quot;#handlers&quot;&gt;Handlers&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="e96f947dd13a984704288142af512a8f72e3acc3" translate="yes" xml:space="preserve">
          <source>If a log is configured to be distributed, it is possible that all items are not logged on all nodes. &lt;code&gt;wrap_log_reader&lt;/code&gt; only reads the log on the called node; it is up to the user to be sure that all items are read.</source>
          <target state="translated">ログが分散するように構成されている場合、すべてのアイテムがすべてのノードに記録されない可能性があります。 &lt;code&gt;wrap_log_reader&lt;/code&gt; は、呼び出されたノードのログのみを読み取ります。すべてのアイテムが読み取られることを確認するのはユーザーの責任です。</target>
        </trans-unit>
        <trans-unit id="5666e4e832cec3f259cd26eabc4f7091a56c83aa" translate="yes" xml:space="preserve">
          <source>If a log with a specified name is local on some node, and one tries to open the log distributed on the same node, the tuple &lt;code&gt;{error, {node_already_open, Log}}&lt;/code&gt; is returned. The same tuple is returned if the log is distributed on some node, and one tries to open the log locally on the same node. Opening individual distributed disk logs for the first time adds those logs to a (possibly empty) distributed disk log. The supplied option values are used on all nodes mentioned by option &lt;code&gt;distributed&lt;/code&gt;. Individual distributed logs know nothing about each other's option values, so each node can be given unique option values by creating a distributed log with many calls to &lt;code&gt;open/1&lt;/code&gt;.</source>
          <target state="translated">指定された名前のログが一部のノードでローカルであり、同じノードに配布されたログを開こうとすると、タプル &lt;code&gt;{error, {node_already_open, Log}}&lt;/code&gt; が返されます。ログがいくつかのノードに配布され、同じノードでローカルにログを開こうとすると、同じタプルが返されます。個々の分散ディスクログを初めて開くと、それらのログが（おそらく空の）分散ディスクログに追加されます。提供されたオプション値は、オプション &lt;code&gt;distributed&lt;/code&gt; で言及されたすべてのノードで使用されます。個々の分散ログは互いのオプション値について何も知らないため、 &lt;code&gt;open/1&lt;/code&gt; への多数の呼び出しを含む分散ログを作成することにより、各ノードに一意のオプション値を与えることができます。</target>
        </trans-unit>
        <trans-unit id="b469c9bb8a16915f90eba775ff31e5fe6d62248d" translate="yes" xml:space="preserve">
          <source>If a macro is used in several modules, it is recommended that the macro definition is placed in an include file.</source>
          <target state="translated">マクロを複数のモジュールで使用する場合は、マクロの定義をインクルードファイルに入れることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="0bac8e18db1d29ae2b7dd77be807faeccb09df3e" translate="yes" xml:space="preserve">
          <source>If a match specification (applicable only for &lt;code&gt;call&lt;/code&gt;, &lt;code&gt;send&lt;/code&gt; and &lt;code&gt;'receive'&lt;/code&gt; tracing) contains a &lt;code&gt;{message}&lt;/code&gt; action function with a non-boolean value, that value is added as an extra element to the message tuple either in the last position or before the timestamp (if it is present).</source>
          <target state="translated">一致仕様（ &lt;code&gt;call&lt;/code&gt; 、 &lt;code&gt;send&lt;/code&gt; 、および &lt;code&gt;'receive'&lt;/code&gt; トレースにのみ適用可能）にブール値以外の値を持つ &lt;code&gt;{message}&lt;/code&gt; アクション関数が含まれている場合、その値は、最後の位置または前のいずれかでメッセージタプルに追加要素として追加されます。タイムスタンプ（存在する場合）。</target>
        </trans-unit>
        <trans-unit id="0a0e324c5eb502ceba59e0414f16795091f6741d" translate="yes" xml:space="preserve">
          <source>If a match specification passed as argument has excessive nesting which causes scheduler stack exhaustion for the scheduler that the calling process is executing on. &lt;code&gt;Scheduler stack size&lt;/code&gt; can be configured when starting the runtime system.</source>
          <target state="translated">引数として渡された一致仕様に過度のネストがあり、呼び出しプロセスが実行されているスケジューラーのスケジューラースタックが使い果たされた場合。 &lt;code&gt;Scheduler stack size&lt;/code&gt; は、ランタイムシステムの起動時に構成できます。</target>
        </trans-unit>
        <trans-unit id="f532881cad197bff88db03f3d5191a830d7bf595" translate="yes" xml:space="preserve">
          <source>If a matching fails, there could be circumstances when the certificate should be accepted anyway. Think for example of a web browser where you choose to accept an outdated certificate. This option enables implementation of such a function. This &lt;code&gt;fun/1&lt;/code&gt; is called when no &lt;code&gt;ReferenceID&lt;/code&gt; matches. The return value of the fun (a &lt;code&gt;boolean()&lt;/code&gt;) decides the outcome. If &lt;code&gt;true&lt;/code&gt; the the certificate is accepted otherwise it is rejected. See &lt;code&gt;&lt;a href=&quot;using_public_key#-pinning--a-certificate&quot;&gt;&quot;Pinning&quot; a Certificate&lt;/a&gt;&lt;/code&gt; in the User's Guide.</source>
          <target state="translated">照合が失敗した場合、とにかく証明書を受け入れる必要がある場合があります。たとえば、古い証明書を受け入れるように選択したWebブラウザーの例を考えてみてください。このオプションは、そのような機能の実装を可能にします。この &lt;code&gt;fun/1&lt;/code&gt; は、 &lt;code&gt;ReferenceID&lt;/code&gt; が一致しない場合に呼び出されます。fun（ &lt;code&gt;boolean()&lt;/code&gt; ）の戻り値が結果を決定します。 &lt;code&gt;true&lt;/code&gt; の場合、証明書は受け入れられ、それ以外の場合は拒否されます。ユーザーガイドの &lt;code&gt;&lt;a href=&quot;using_public_key#-pinning--a-certificate&quot;&gt;&quot;Pinning&quot; a Certificate&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="4aba75283b25dadf865010d69b6030de96baf1b7" translate="yes" xml:space="preserve">
          <source>If a member terminates, it is automatically removed from the group.</source>
          <target state="translated">メンバーが終了した場合、そのメンバーは自動的にグループから削除されます。</target>
        </trans-unit>
        <trans-unit id="1162149be57c33d9e6fc9573f2f1305c9430528f" translate="yes" xml:space="preserve">
          <source>If a message is received before the &quot;virtual&quot; connection has been established, the connection will be setup automatically. An MGC may be real open minded and dynamically decide which encoding and transport service to use depending on how the transport layer contact is performed. For IP transports two ports are standardized, one for textual encoding and one for binary encoding. If for example an UDP packet was received on the text port it would be possible to decide encoding and transport on the fly.</source>
          <target state="translated">仮想」接続が確立される前にメッセージを受信した場合、接続は自動的に設定される。MGCは、トランスポート層のコンタクトがどのように行われるかに応じて、どのエンコーディングとトランスポートサービスを使用するかを動的に決定することができます。IPトランスポートでは、2つのポートが標準化されており、1つはテキスト・エンコーディング用、もう1つはバイナリ・エンコーディング用です。例えばUDPパケットがテキストポートで受信された場合、その場でエンコーディングとトランスポートを決定することが可能になります。</target>
        </trans-unit>
        <trans-unit id="b24fb0bcd517815519471545f5c58487dce8e63f" translate="yes" xml:space="preserve">
          <source>If a module is not Cover compiled, this is indicated by the error reason &lt;code&gt;{not_cover_compiled,Module}&lt;/code&gt;.</source>
          <target state="translated">モジュールがカバーコンパイルされていない場合、これはエラー理由 &lt;code&gt;{not_cover_compiled,Module}&lt;/code&gt; 示されます。</target>
        </trans-unit>
        <trans-unit id="7967640d362f8afe4a91bac33b7793d78de475b7" translate="yes" xml:space="preserve">
          <source>If a module was cover compiled from the &lt;code&gt;.beam&lt;/code&gt; file, i.e. using &lt;code&gt;compile_beam/1&lt;/code&gt; or &lt;code&gt;compile_beam_directory/0,1&lt;/code&gt;, it is assumed that the source code can be found in the same directory as the &lt;code&gt;.beam&lt;/code&gt; file, in &lt;code&gt;../src&lt;/code&gt; relative to that directory, or using the source path in &lt;code&gt;Module:module_info(compile)&lt;/code&gt;. When using the latter, two paths are examined: first the one constructed by joining &lt;code&gt;../src&lt;/code&gt; and the tail of the compiled path below a trailing &lt;code&gt;src&lt;/code&gt; component, then the compiled path itself. If no source code is found, this is indicated by the error reason &lt;code&gt;{no_source_code_found,Module}&lt;/code&gt;.</source>
          <target state="translated">モジュールが &lt;code&gt;.beam&lt;/code&gt; ファイルからカバーコンパイルされた場合、つまり &lt;code&gt;compile_beam/1&lt;/code&gt; または &lt;code&gt;compile_beam_directory/0,1&lt;/code&gt; を使用した場合、ソースコードは &lt;code&gt;.beam&lt;/code&gt; ファイルと同じディレクトリの &lt;code&gt;../src&lt;/code&gt; 相対にあると想定されます。そのディレクトリに、または &lt;code&gt;Module:module_info(compile)&lt;/code&gt; のソースパスを使用します。後者を使用する場合、2つのパスが調べられます。最初に &lt;code&gt;../src&lt;/code&gt; と、コンパイルされたパスの末尾を結合して作成されたパスが、末尾の &lt;code&gt;src&lt;/code&gt; コンポーネントの下にあり、次にコンパイルされたパス自体です。ソースコードが見つからない場合、これはエラー理由 &lt;code&gt;{no_source_code_found,Module}&lt;/code&gt; 示されます。</target>
        </trans-unit>
        <trans-unit id="22f56a79590fe78f12a072ad074e3e889605db4d" translate="yes" xml:space="preserve">
          <source>If a monitoring process gets so large that it itself starts to cause system monitor messages when garbage collecting, the messages enlarge the process message queue and probably make the problem worse.</source>
          <target state="translated">ガベージコレクト時に監視プロセスが非常に大きくなり、それ自体がシステムモニタメッセージを発生させ始めると、メッセージはプロセスメッセージキューを拡大し、おそらく問題を悪化させてしまいます。</target>
        </trans-unit>
        <trans-unit id="0f2d8b6af86eed1a143439cc301064ec94ca2bef" translate="yes" xml:space="preserve">
          <source>If a more complex change has been made, for example, a change to the format of the internal state of a &lt;code&gt;gen_server&lt;/code&gt;, simple code replacement is not sufficient. Instead, it is necessary to:</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; の内部状態の形式を変更するなど、より複雑な変更が行われた場合、単純なコード置換では不十分です。代わりに、次のことが必要です。</target>
        </trans-unit>
        <trans-unit id="9709ba0c2dc81a1b8284809a6f8a81abf726c6a5" translate="yes" xml:space="preserve">
          <source>If a name collision occurs, the compiler reports a &lt;code&gt;&quot;NOTICE: ...&quot;&lt;/code&gt; message that tells if a definition was renamed, and the new name that must be used to encode/decode data.</source>
          <target state="translated">名前の衝突が発生した場合、コンパイラは、定義の名前が変更されたかどうかを示す &lt;code&gt;&quot;NOTICE: ...&quot;&lt;/code&gt; メッセージと、データのエンコード/デコードに使用する必要がある新しい名前を報告します。</target>
        </trans-unit>
        <trans-unit id="cd783a31aebc8e052e7a2e8a344df67638bdfe57" translate="yes" xml:space="preserve">
          <source>If a name in &lt;code&gt;Files&lt;/code&gt; is not the name of an existing file, Igor assumes it represents a module name, and tries to locate and read the corresponding source file. The parsed files are appended to &lt;code&gt;Sources&lt;/code&gt; and passed on to &lt;code&gt;merge_sources/3&lt;/code&gt;, i.e., entries in &lt;code&gt;Sources&lt;/code&gt; are listed before entries read from files.</source>
          <target state="translated">&lt;code&gt;Files&lt;/code&gt; の名前が​​既存のファイルの名前ではない場合、Igorはそれがモジュール名を表していると想定し、対応するソースファイルを見つけて読み取ろうとします。解析されたファイルは &lt;code&gt;Sources&lt;/code&gt; に追加され、 &lt;code&gt;merge_sources/3&lt;/code&gt; に渡されます。つまり、 &lt;code&gt;Sources&lt;/code&gt; のエントリは、ファイルから読み取られるエントリの前にリストされます。</target>
        </trans-unit>
        <trans-unit id="5f3d40f62d554584090ae4d71b42895c212400c3" translate="yes" xml:space="preserve">
          <source>If a name is given by a single atom, it should either be a &quot;simple&quot; atom which does not need to be single-quoted in Erlang, or otherwise its print name should correspond to a proper Erlang variable, i.e., begin with an uppercase character or an underscore. Names on the form &lt;code&gt;{A, N}&lt;/code&gt; represent function name variables &quot;&lt;code&gt;A/N&lt;/code&gt;&quot;; these are special variables which may be bound only in the function definitions of a module or a &lt;code&gt;letrec&lt;/code&gt;. They may not be bound in &lt;code&gt;let&lt;/code&gt; expressions and cannot occur in clause patterns. The atom &lt;code&gt;A&lt;/code&gt; in a function name may be any atom; the integer &lt;code&gt;N&lt;/code&gt; must be nonnegative. The functions &lt;code&gt;c_fname/2&lt;/code&gt; etc. are utilities for handling function name variables.</source>
          <target state="translated">名前が単一のアトムで指定されている場合、Erlangで一重引用符で囲む必要のない「単純な」アトムであるか、そうでない場合、その出力名は適切なErlang変数に対応する必要があります。つまり大文字で始まります。文字またはアンダースコア。 &lt;code&gt;{A, N}&lt;/code&gt; 形式の名前は、関数名変数 &quot; &lt;code&gt;A/N&lt;/code&gt; &quot;を表します。これらは、モジュールまたは &lt;code&gt;letrec&lt;/code&gt; の関数定義でのみバインドできる特別な変数です。これらは &lt;code&gt;let&lt;/code&gt; 式にバインドできず、句パターンで発生することはできません。関数名のアトム &lt;code&gt;A&lt;/code&gt; は任意のアトムです。整数 &lt;code&gt;N&lt;/code&gt; は非負でなければなりません。関数 &lt;code&gt;c_fname/2&lt;/code&gt; などは、関数名変数を処理するためのユーティリティです。</target>
        </trans-unit>
        <trans-unit id="dfb3773364e26824edee6292b7366b7013d08419" translate="yes" xml:space="preserve">
          <source>If a new item is inserted with the same key as an existing record, the old record is overwritten. However, if a table is of type &lt;code&gt;bag&lt;/code&gt;, each key can map to several records. All records in type &lt;code&gt;bag&lt;/code&gt; tables are unique, only the keys can be duplicated.</source>
          <target state="translated">既存のレコードと同じキーで新しいアイテムが挿入されると、古いレコードが上書きされます。ただし、テーブルのタイプが &lt;code&gt;bag&lt;/code&gt; の場合、各キーは複数のレコードにマップできます。タイプ &lt;code&gt;bag&lt;/code&gt; テーブルのすべてのレコードは一意であり、複製できるのはキーだけです。</target>
        </trans-unit>
        <trans-unit id="105d061d00a8d9f92d43b213988e0acb45e2f7f6" translate="yes" xml:space="preserve">
          <source>If a new module is introduced, the following instruction is used:</source>
          <target state="translated">新しいモジュールが導入された場合は、以下の命令を使用します。</target>
        </trans-unit>
        <trans-unit id="5f35aad99efc30cb9fc4c6453834ff14def063cf" translate="yes" xml:space="preserve">
          <source>If a node goes down in the middle of a dirty operation, the table load mechanism ensures that the update is performed on all replicas, or none. Both asynchronous dirty updates and synchronous dirty updates use the same recovery principle as lightweight transactions.</source>
          <target state="translated">ダーティな操作の途中でノードがダウンした場合、テーブル負荷メカニズムは、更新がすべてのレプリカで実行されるか、または何も実行されないことを保証します。非同期ダーティ更新と同期ダーティ更新の両方とも、軽量トランザクションと同じリカバリ原理を使用します。</target>
        </trans-unit>
        <trans-unit id="327048d2049523b0f127e33e21231e0e526e41f3" translate="yes" xml:space="preserve">
          <source>If a node goes down, all connections to that node are removed. Calling &lt;code&gt;erlang:disconnect_node(Node)&lt;/code&gt; forces disconnection of a node.</source>
          <target state="translated">ノードがダウンすると、そのノードへのすべての接続が削除されます。 &lt;code&gt;erlang:disconnect_node(Node)&lt;/code&gt; を呼び出すと、ノードが強制的に切断されます。</target>
        </trans-unit>
        <trans-unit id="b4217b58d768f80a1045777fccb8ca8bcb03c9aa" translate="yes" xml:space="preserve">
          <source>If a node is started, which has higher priority according to &lt;code&gt;distributed&lt;/code&gt; than the node where a distributed application is running, the application is restarted at the new node and stopped at the old node. This is called a &lt;strong&gt;takeover&lt;/strong&gt;.</source>
          <target state="translated">分散アプリケーションが実行されているノードよりも &lt;code&gt;distributed&lt;/code&gt; 応じて優先度が高いノードが起動されると、アプリケーションは新しいノードで再起動され、古いノードで停止されます。これは&lt;strong&gt;テイクオーバー&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="bc63ca0578b8d746c309ca79e6507b21130aadd5" translate="yes" xml:space="preserve">
          <source>If a particular clause can be selected, the function returns &lt;code&gt;{true, {Clause, Bindings}}&lt;/code&gt;, where &lt;code&gt;Clause&lt;/code&gt; is the selected clause and &lt;code&gt;Bindings&lt;/code&gt; is a list of pairs &lt;code&gt;{Var, SubExpr}&lt;/code&gt; associating the variables occurring in the patterns of &lt;code&gt;Clause&lt;/code&gt; with the corresponding subexpressions in &lt;code&gt;Exprs&lt;/code&gt;. The list of bindings is given in innermost-first order; see the &lt;code&gt;match/2&lt;/code&gt; function for details.</source>
          <target state="translated">特定の句を選択することができる場合は、関数戻り &lt;code&gt;{true, {Clause, Bindings}}&lt;/code&gt; 、 &lt;code&gt;Clause&lt;/code&gt; 選択句であり、 &lt;code&gt;Bindings&lt;/code&gt; ペアのリストである &lt;code&gt;{Var, SubExpr}&lt;/code&gt; のパターンで発生する変数関連付ける &lt;code&gt;Clause&lt;/code&gt; とは &lt;code&gt;Exprs&lt;/code&gt; の対応する部分式。バインディングのリストは、最も内側から1番目の順序で示されます。詳細については、 &lt;code&gt;match/2&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="f888cd8bd0f80a569dfdaa82a2f031133a869106" translate="yes" xml:space="preserve">
          <source>If a pattern is compiled with option &lt;code&gt;extended&lt;/code&gt;, whitespace in the pattern (other than in a character class) and characters between a # outside a character class and the next newline are ignored. An escaping backslash can be used to include a whitespace or # character as part of the pattern.</source>
          <target state="translated">オプションが &lt;code&gt;extended&lt;/code&gt; でコンパイルされた場合、パターン内の空白（文字クラス以外）と、文字クラス外の＃と次の改行の間の文字は無視されます。エスケープするバックスラッシュを使用して、パターンの一部として空白または＃文字を含めることができます。</target>
        </trans-unit>
        <trans-unit id="9e8b4db27222acc7892ee1eda43334910e96e198" translate="yes" xml:space="preserve">
          <source>If a pattern starts with .* or .{0,} and option &lt;code&gt;dotall&lt;/code&gt; (equivalent to Perl option &lt;code&gt;/s&lt;/code&gt;) is set, thus allowing the dot to match newlines, the pattern is implicitly anchored, because whatever follows is tried against every character position in the subject string. So, there is no point in retrying the overall match at any position after the first. PCRE normally treats such a pattern as if it was preceded by \A.</source>
          <target state="translated">パターンが。*または。{0、}で &lt;code&gt;dotall&lt;/code&gt; 、オプションdotall（Perlオプション &lt;code&gt;/s&lt;/code&gt; と同等）が設定されている場合、ドットが改行と一致するようにすると、パターンは暗黙的にアンカーされます。件名の文字列内。したがって、最初の位置以降の任意の位置で全体の一致を再試行しても意味がありません。PCREは通常、そのようなパターンを\ Aが前にあるかのように扱います。</target>
        </trans-unit>
        <trans-unit id="b87ae6dafb0124e6e46c837d4958c2fa1f2a81db" translate="yes" xml:space="preserve">
          <source>If a pattern starts with &lt;code&gt;(*NO_START_OPT)&lt;/code&gt;, it has the same effect as setting option &lt;code&gt;no_start_optimize&lt;/code&gt; at compile time.</source>
          <target state="translated">パターンが &lt;code&gt;(*NO_START_OPT)&lt;/code&gt; で始まる場合、コンパイル時にオプション &lt;code&gt;no_start_optimize&lt;/code&gt; を設定するのと同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="9510cfbb42b2f63e8d24764760322df07deba921" translate="yes" xml:space="preserve">
          <source>If a permanent application terminates, all other applications and the entire Erlang node are also terminated.</source>
          <target state="translated">恒久的なアプリケーションが終了すると、他のすべてのアプリケーションとErlangノード全体も終了します。</target>
        </trans-unit>
        <trans-unit id="ae39c8a4064e4c9103a84535d6791f3c2355574b" translate="yes" xml:space="preserve">
          <source>If a permanent application terminates, all other applications and the runtime system are also terminated.</source>
          <target state="translated">恒久的なアプリケーションが終了すると、他のすべてのアプリケーションとランタイムシステムも終了します。</target>
        </trans-unit>
        <trans-unit id="7d39ec2ef37ef98a358722319b34017d061d33a4" translate="yes" xml:space="preserve">
          <source>If a port is put into or removed from the run queue, a message, &lt;code&gt;{profile, Port, State, 0, Ts}&lt;/code&gt;, is sent to &lt;code&gt;ProfilerPid&lt;/code&gt;.</source>
          <target state="translated">ポートが実行キューに追加または削除されると、メッセージ &lt;code&gt;{profile, Port, State, 0, Ts}&lt;/code&gt; が &lt;code&gt;ProfilerPid&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="b0081080fd8645d025c38129c1f724e4dbeb1f5a" translate="yes" xml:space="preserve">
          <source>If a positive assertion containing one or more capturing subpatterns succeeds, but failure to match later in the pattern causes backtracking over this assertion, the captures within the assertion are reset only if no higher numbered captures are already set. This is, unfortunately, a fundamental limitation of the current implementation, and as PCRE1 is now in maintenance-only status, it is unlikely ever to change.</source>
          <target state="translated">1つ以上のキャプチャサブパターンを含む正のアサーションが成功しても、パターンの後の方でマッチしなかった場合、このアサーションの上にバックトラックが発生した場合、アサーション内のキャプチャは、より高い番号のキャプチャが既に設定されていない場合にのみリセットされます。これは残念ながら、現在の実装の基本的な制限であり、PCRE1 は現在メンテナンスのみの状態なので、これが変更される可能性は低いでしょう。</target>
        </trans-unit>
        <trans-unit id="9cb8ee97edf59cd0007ed1238bc9ac0388e87e9d" translate="yes" xml:space="preserve">
          <source>If a preset dictionary is required for further decompression, this function returns a &lt;code&gt;need_dictionary&lt;/code&gt; tuple. See &lt;code&gt;&lt;a href=&quot;#inflateSetDictionary-2&quot;&gt; inflateSetDictionary/2&lt;/a&gt;&lt;/code&gt;) for details.</source>
          <target state="translated">さらに解凍するためにプリセットディクショナリが必要な場合、この関数は &lt;code&gt;need_dictionary&lt;/code&gt; タプルを返します。詳細については、 &lt;code&gt;&lt;a href=&quot;#inflateSetDictionary-2&quot;&gt; inflateSetDictionary/2&lt;/a&gt;&lt;/code&gt; ）を参照してください。</target>
        </trans-unit>
        <trans-unit id="93a3a5bfdb59e73fc8a0334b43ff4eba1a20ef35" translate="yes" xml:space="preserve">
          <source>If a preset dictionary is required for further decompression, this function returns a &lt;code&gt;need_dictionary&lt;/code&gt; tuple. See &lt;code&gt;&lt;a href=&quot;#inflateSetDictionary-2&quot;&gt;inflateSetDictionary/2&lt;/a&gt;&lt;/code&gt;) for details.</source>
          <target state="translated">さらに解凍するために事前設定された辞書が必要な場合、この関数は &lt;code&gt;need_dictionary&lt;/code&gt; タプルを返します。詳細については、 &lt;code&gt;&lt;a href=&quot;#inflateSetDictionary-2&quot;&gt;inflateSetDictionary/2&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="83f7f43de6aead79d3e988b3241d9856a34d875b" translate="yes" xml:space="preserve">
          <source>If a process calls &lt;code&gt;&lt;a href=&quot;#uniform-0&quot;&gt;uniform/0&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#uniform-1&quot;&gt;uniform/1&lt;/a&gt;&lt;/code&gt; without setting a seed first, &lt;code&gt;&lt;a href=&quot;#seed-0&quot;&gt;seed/0&lt;/a&gt;&lt;/code&gt; is called automatically.</source>
          <target state="translated">プロセスが最初に &lt;code&gt;&lt;a href=&quot;#seed-0&quot;&gt;seed/0&lt;/a&gt;&lt;/code&gt; を設定せずに &lt;code&gt;&lt;a href=&quot;#uniform-0&quot;&gt;uniform/0&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#uniform-1&quot;&gt;uniform/1&lt;/a&gt;&lt;/code&gt; を呼び出す場合、seed / 0は自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="a36c70330162b05d5a32dea8c99f296dd07fa13f" translate="yes" xml:space="preserve">
          <source>If a process calls &lt;code&gt;&lt;a href=&quot;#uniform-0&quot;&gt;uniform/0&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#uniform-1&quot;&gt;uniform/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#uniform_real-0&quot;&gt;uniform_real/0&lt;/a&gt;&lt;/code&gt; without setting a seed first, &lt;code&gt;&lt;a href=&quot;#seed-1&quot;&gt;seed/1&lt;/a&gt;&lt;/code&gt; is called automatically with the default algorithm and creates a non-constant seed.</source>
          <target state="translated">プロセスが最初に &lt;code&gt;&lt;a href=&quot;#seed-1&quot;&gt;seed/1&lt;/a&gt;&lt;/code&gt; を設定せずに &lt;code&gt;&lt;a href=&quot;#uniform-0&quot;&gt;uniform/0&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#uniform-1&quot;&gt;uniform/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#uniform_real-0&quot;&gt;uniform_real/0&lt;/a&gt;&lt;/code&gt; を呼び出す場合、seed / 1はデフォルトのアルゴリズムで自動的に呼び出され、定数でないシードを作成します。</target>
        </trans-unit>
        <trans-unit id="ee2bd61bda12e84b2a6d621165135cd3817f20fe" translate="yes" xml:space="preserve">
          <source>If a process having the driver loaded dies, it has the same effect as if unloading is done.</source>
          <target state="translated">ドライバを搭載したプロセスが死亡した場合、アンロードした場合と同様の効果があります。</target>
        </trans-unit>
        <trans-unit id="15014d5a4ff0f8066241b0151c8891a216ed87df" translate="yes" xml:space="preserve">
          <source>If a process in the system gets suspended because it sends to a busy port, a message &lt;code&gt;{monitor, SusPid, busy_port, Port}&lt;/code&gt; is sent to &lt;code&gt;MonitorPid&lt;/code&gt;. &lt;code&gt;SusPid&lt;/code&gt; is the pid that got suspended when sending to &lt;code&gt;Port&lt;/code&gt;.</source>
          <target state="translated">システム内のプロセスがビジーポートに送信されたために中断された場合、メッセージ &lt;code&gt;{monitor, SusPid, busy_port, Port}&lt;/code&gt; が &lt;code&gt;MonitorPid&lt;/code&gt; に送信されます。 &lt;code&gt;SusPid&lt;/code&gt; は、 &lt;code&gt;Port&lt;/code&gt; への送信時に一時停止されたpidです。</target>
        </trans-unit>
        <trans-unit id="4d68a1d07888243eae02b4e13f79a1936bb61d64" translate="yes" xml:space="preserve">
          <source>If a process in the system gets suspended because it sends to a process on a remote node whose inter-node communication was handled by a busy port, a message &lt;code&gt;{monitor, SusPid, busy_dist_port, Port}&lt;/code&gt; is sent to &lt;code&gt;MonitorPid&lt;/code&gt;. &lt;code&gt;SusPid&lt;/code&gt; is the pid that got suspended when sending through the inter-node communication port &lt;code&gt;Port&lt;/code&gt;.</source>
          <target state="translated">システム内のプロセスがビジーポートによってノード間通信が処理されたリモートノード上のプロセスに送信されるために中断された場合、メッセージ &lt;code&gt;{monitor, SusPid, busy_dist_port, Port}&lt;/code&gt; が &lt;code&gt;MonitorPid&lt;/code&gt; に送信されます。 &lt;code&gt;SusPid&lt;/code&gt; は、ノード間通信ポート &lt;code&gt;Port&lt;/code&gt; を介して送信するときに中断されたpidです。</target>
        </trans-unit>
        <trans-unit id="c045c61e4349e5f89593c090cba3d3de09bd27de" translate="yes" xml:space="preserve">
          <source>If a process is put into or removed from the run queue, a message, &lt;code&gt;{profile, Pid, State, Mfa, Ts}&lt;/code&gt;, is sent to &lt;code&gt;ProfilerPid&lt;/code&gt;. Running processes that are reinserted into the run queue after having been pre-empted do not trigger this message.</source>
          <target state="translated">プロセスが実行キュー &lt;code&gt;{profile, Pid, State, Mfa, Ts}&lt;/code&gt; または実行キューから削除されると、メッセージ{profile、Pid、State、Mfa、Ts}が &lt;code&gt;ProfilerPid&lt;/code&gt; に送信されます。横取りされた後に実行キューに再挿入された実行中のプロセスは、このメッセージをトリガーしません。</target>
        </trans-unit>
        <trans-unit id="4105e92988b9e0273b2afe1380f53a0c26000be5" translate="yes" xml:space="preserve">
          <source>If a process or port in the system runs uninterrupted for at least &lt;code&gt;Time&lt;/code&gt; wall clock milliseconds, a message &lt;code&gt;{monitor, PidOrPort, long_schedule, Info}&lt;/code&gt; is sent to &lt;code&gt;MonitorPid&lt;/code&gt;. &lt;code&gt;PidOrPort&lt;/code&gt; is the process or port that was running. &lt;code&gt;Info&lt;/code&gt; is a list of two-element tuples describing the event.</source>
          <target state="translated">システム内のプロセスまたはポートが中断されずに少なくとも &lt;code&gt;Time&lt;/code&gt; ウォールクロックミリ秒実行された場合、メッセージ &lt;code&gt;{monitor, PidOrPort, long_schedule, Info}&lt;/code&gt; が &lt;code&gt;MonitorPid&lt;/code&gt; に送信されます。 &lt;code&gt;PidOrPort&lt;/code&gt; は、実行されていたプロセスまたはポートです。 &lt;code&gt;Info&lt;/code&gt; は、イベントを説明する2要素のタプルのリストです。</target>
        </trans-unit>
        <trans-unit id="4369b22f5f2ff0b202004df9cfaa90a8b5c4a981" translate="yes" xml:space="preserve">
          <source>If a process simply keeps binaries (either in &quot;loop data&quot; or in the process dictionary), the garbage collector can eventually shrink the binaries. If only one such binary is kept, it will not be shrunk. If the process later appends to a binary that has been shrunk, the binary object will be reallocated to make place for the data to be appended.</source>
          <target state="translated">プロセスが単にバイナリを(「ループデータ」またはプロセス辞書に)保持しているだけの場合、ガベージコレクタは最終的にバイナリを縮小することができる。そのようなバイナリが 1 つだけ保持されている場合、それは縮小されない。プロセスが後で縮小されたバイナリに追加する場合、バイナリオブジェクトは、追加するデータのための場所を作るために再割り当てされます。</target>
        </trans-unit>
        <trans-unit id="f775d4e54bbee2d9dbda35be5042e4e186972f7c" translate="yes" xml:space="preserve">
          <source>If a process that holds a lock dies, or the node goes down, the locks held by the process are deleted.</source>
          <target state="translated">ロックを保持しているプロセスが死亡したり、ノードがダウンしたりすると、そのプロセスが保持していたロックが削除されます。</target>
        </trans-unit>
        <trans-unit id="349bb33896dc8851d34347287725d343380e07fb" translate="yes" xml:space="preserve">
          <source>If a process with a registered name dies, or the node goes down, the name is unregistered on all nodes.</source>
          <target state="translated">登録された名前を持つプロセスが死亡したり、ノードがダウンしたりすると、すべてのノードで名前の登録が解除されます。</target>
        </trans-unit>
        <trans-unit id="17f27468045dfd75afeb4d681d13f4dbea90b34b" translate="yes" xml:space="preserve">
          <source>If a process, &lt;code&gt;P&lt;/code&gt;, is spawned during execution of, for example, &lt;code&gt;init_per_suite/1&lt;/code&gt;, it inherits the group leader of the &lt;code&gt;init_per_suite&lt;/code&gt; process. This group leader is the central I/O server process mentioned earlier. If, at a later time, &lt;strong&gt;during parallel test case execution&lt;/strong&gt;, some event triggers process &lt;code&gt;P&lt;/code&gt; to call &lt;code&gt;io:format/1/2&lt;/code&gt;, that call never returns (as the group leader is in a non-responsive state) and causes &lt;code&gt;P&lt;/code&gt; to hang.</source>
          <target state="translated">たとえば、プロセス &lt;code&gt;P&lt;/code&gt; が &lt;code&gt;init_per_suite/1&lt;/code&gt; の実行中に生成された場合、そのプロセスは &lt;code&gt;init_per_suite&lt;/code&gt; プロセスのグループリーダーを継承します。このグループリーダーは、前述の中心的なI / Oサーバープロセスです。後で、&lt;strong&gt;並列テストケースの実行中に&lt;/strong&gt;、いくつかのイベントがプロセス &lt;code&gt;P&lt;/code&gt; をトリガーして &lt;code&gt;io:format/1/2&lt;/code&gt; を呼び出す&lt;strong&gt;場合&lt;/strong&gt;、その呼び出しは返されず（グループリーダーが応答しない状態であるため）、 &lt;code&gt;P&lt;/code&gt; がハングします。 。</target>
        </trans-unit>
        <trans-unit id="8bf8390a7e5daa53c1c72aaa18283abc83275ce3" translate="yes" xml:space="preserve">
          <source>If a public key is used for logging in, there is normally no checking of the user name. It could be enabled by setting the option &lt;code&gt;&lt;a href=&quot;ssh#option-pk_check_user&quot;&gt;pk_check_user&lt;/a&gt;&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;. In that case the pwdfun will get the atom &lt;code&gt;pubkey&lt;/code&gt; in the password argument.</source>
          <target state="translated">ログインに公開鍵を使用する場合、通常、ユーザー名のチェックは行われません。オプション &lt;code&gt;&lt;a href=&quot;ssh#option-pk_check_user&quot;&gt;pk_check_user&lt;/a&gt;&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定することで有効にできます。その場合、pwdfunはpassword引数でアトム &lt;code&gt;pubkey&lt;/code&gt; を取得します。</target>
        </trans-unit>
        <trans-unit id="ff1cac2bbd83699ad97f93b747512a76b2a8a979" translate="yes" xml:space="preserve">
          <source>If a range that includes letters is used when caseless matching is set, it matches the letters in either case. For example, [W-c] is equivalent to [][\\^_`wxyzabc], matched caselessly. In a non-UTF mode, if character tables for a French locale are in use, [\xc8-\xcb] matches accented E characters in both cases. In UTF modes, PCRE supports the concept of case for characters with values &amp;gt; 255 only when it is compiled with Unicode property support.</source>
          <target state="translated">大文字と小文字を区別しない一致が設定されているときに文字を含む範囲が使用されている場合、どちらの場合も文字と一致します。たとえば、[Wc]は[] [\\ ^ _ `wxyzabc]と同等で、大文字と小文字を区別せずに一致します。非UTFモードでは、フランス語ロケールの文字テーブルが使用されている場合、[\ xc8- \ xcb]はどちらの場合もアクセント付きE文字に一致します。UTFモードでは、PCREは、Unicodeプロパティのサポートでコンパイルされた場合にのみ、255より大きい値の文字の大文字と小文字の概念をサポートします。</target>
        </trans-unit>
        <trans-unit id="cefcc947210800042f579f6706da18141c734c3a" translate="yes" xml:space="preserve">
          <source>If a received message contains several transaction requests, this option indicates whether the requests should be handled sequentially in the same process (&lt;code&gt;false&lt;/code&gt;), or if each request should be handled by its own process (&lt;code&gt;true&lt;/code&gt; i.e. a separate process is spawned for each request).</source>
          <target state="translated">受信したメッセージに複数のトランザクション要求が含まれている場合、このオプションは、要求を同じプロセスで順次処理する必要があるか（ &lt;code&gt;false&lt;/code&gt; ）、または各要求を独自のプロセスで処理する必要があるか（ &lt;code&gt;true&lt;/code&gt; 、つまり、要求ごとに個別のプロセスが生成される） 。</target>
        </trans-unit>
        <trans-unit id="b2fc74a5a7f43f310bc65da23c24d79b44a52f9d" translate="yes" xml:space="preserve">
          <source>If a record is stuck at node &lt;code&gt;N1&lt;/code&gt; and you try to set a sticky lock for the record on node &lt;code&gt;N2&lt;/code&gt;, the record must be unstuck. This operation is expensive and reduces performance. The unsticking is done automatically if you issue &lt;code&gt;s_write/1&lt;/code&gt; requests at &lt;code&gt;N2&lt;/code&gt;.</source>
          <target state="translated">レコードがノード &lt;code&gt;N1&lt;/code&gt; でスタックしていて、ノード &lt;code&gt;N2&lt;/code&gt; でそのレコードにスティッキーロックを設定しようとする場合、レコードのスタックを解除する必要があります。この操作はコストがかかり、パフォーマンスが低下します。 &lt;code&gt;N2&lt;/code&gt; で &lt;code&gt;s_write/1&lt;/code&gt; リクエストを発行すると、解放が自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="7bbe2237d0bda60b504f73886161206ea6b2f204" translate="yes" xml:space="preserve">
          <source>If a record is used in several modules, it is recommended that the record definition is placed in an include file.</source>
          <target state="translated">レコードが複数のモジュールで使用されている場合は、レコードの定義をインクルードファイルに入れることをお勧めします。</target>
        </trans-unit>
        <trans-unit id="e2be8cb7a69f1955706c91f4c83ac23caeea40af" translate="yes" xml:space="preserve">
          <source>If a recoverable error occurs, the function returns &lt;code&gt;{error,Reason}&lt;/code&gt; and the original application specifications are restored. If a non-recoverable error occurs, the system is restarted.</source>
          <target state="translated">回復可能なエラーが発生した場合、関数は &lt;code&gt;{error,Reason}&lt;/code&gt; を返し、元のアプリケーション仕様が復元されます。回復不可能なエラーが発生した場合、システムは再起動されます。</target>
        </trans-unit>
        <trans-unit id="22cf54ba81d8faabf766e624c3e7d1674171bb89" translate="yes" xml:space="preserve">
          <source>If a regular core dump is wanted, let &lt;code&gt;heart&lt;/code&gt; know by setting the kill signal to abort using environment variable &lt;code&gt;HEART_KILL_SIGNAL=SIGABRT&lt;/code&gt;. If unset, or not set to &lt;code&gt;SIGABRT&lt;/code&gt;, the default behavior is a kill signal using &lt;code&gt;SIGKILL&lt;/code&gt;:</source>
          <target state="translated">通常のコアダンプが必要な場合は、環境変数 &lt;code&gt;HEART_KILL_SIGNAL=SIGABRT&lt;/code&gt; を使用して強制終了信号を中止するように設定して、 &lt;code&gt;heart&lt;/code&gt; 知らせます。設定されていない場合、または &lt;code&gt;SIGABRT&lt;/code&gt; に設定されていない場合、デフォルトの動作は &lt;code&gt;SIGKILL&lt;/code&gt; を使用した強制終了シグナルです。</target>
        </trans-unit>
        <trans-unit id="cc4cda006faf8c5c4a357b487a51055ca7991742" translate="yes" xml:space="preserve">
          <source>If a regular directory called &lt;code&gt;Name&lt;/code&gt; or &lt;code&gt;Name-Vsn&lt;/code&gt; exists in the code path with an &lt;code&gt;ebin&lt;/code&gt; subdirectory, the path to this directory is returned (not the &lt;code&gt;ebin&lt;/code&gt; directory).</source>
          <target state="translated">呼ばれる通常のディレクトリ場合 &lt;code&gt;Name&lt;/code&gt; または &lt;code&gt;Name-Vsn&lt;/code&gt; 有するコード・パスに存在する &lt;code&gt;ebin&lt;/code&gt; のサブディレクトリ、このディレクトリへのパスは（ない返され &lt;code&gt;ebin&lt;/code&gt; のディレクトリ）。</target>
        </trans-unit>
        <trans-unit id="5d41dbfbe2ec7024dcb9b99c3ee2932c5b54d378" translate="yes" xml:space="preserve">
          <source>If a reply to a request is not received in time, the megaco stack removes all info about the request from its tables. If a reply should arrive after this has been done the app has no way of knowing where to send this message. The message is delivered to the &quot;user&quot; by calling this function on the local node (the node which has the link).</source>
          <target state="translated">リクエストへの返信が間に合わなかった場合、MEGACO スタックはテーブルからリクエストに関するすべての情報を削除します。これが行われた後に返信が届いた場合、アプリはこのメッセージをどこに送ればいいのか知る方法がありません。メッセージは、ローカルノード(リンクを持つノード)でこの関数を呼び出すことで、「ユーザー」に配信されます。</target>
        </trans-unit>
        <trans-unit id="98d501fda955c0480d302e83623ef7940c95c989" translate="yes" xml:space="preserve">
          <source>If a row is created, we always set the internal column to &lt;code&gt;&quot;internal&quot;&lt;/code&gt;.</source>
          <target state="translated">行が作成される場合、常に内部列を &lt;code&gt;&quot;internal&quot;&lt;/code&gt; に設定します。</target>
        </trans-unit>
        <trans-unit id="6bcc6cd834e1b61a016a579e0ab9636b50732f34" translate="yes" xml:space="preserve">
          <source>If a scheduler fails to bind, this is often silently ignored, as it is not always possible to verify valid logical processor identifiers. If an error is reported, an error event is logged. To verify that the schedulers have bound as requested, call &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt; erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スケジューラーがバインドに失敗した場合、有効な論理プロセッサーIDを常に検証できるとは限らないため、これは黙って無視されることがよくあります。エラーが報告された場合、エラーイベントがログに記録されます。スケジューラーが要求どおりにバインドされたことを確認するには、 &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt; erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="1ebc1546b581fe9ec3e1aa902afae9065bac8290" translate="yes" xml:space="preserve">
          <source>If a scheduler fails to bind, this is often silently ignored, as it is not always possible to verify valid logical processor identifiers. If an error is reported, an error event is logged. To verify that the schedulers have bound as requested, call &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スケジューラーがバインドに失敗した場合、有効な論理プロセッサーIDを常に検証できるとは限らないため、これは暗黙のうちに無視されることがよくあります。エラーが報告されると、エラーイベントがログに記録されます。スケジューラーが要求どおりにバインドされたことを確認するには、 &lt;code&gt;&lt;a href=&quot;#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="5a0818c4665c47cbb9e80ed0764a80aff0ec1b7a" translate="yes" xml:space="preserve">
          <source>If a scheduler fails to bind, this is often silently ignored, as it is not always possible to verify valid logical processor identifiers. If an error is reported, it is reported to the &lt;code&gt;error_logger&lt;/code&gt;. If you want to verify that the schedulers have bound as requested, call &lt;code&gt;&lt;a href=&quot;erlang#system_info_scheduler_bindings&quot;&gt; erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スケジューラーがバインドに失敗した場合、有効な論理プロセッサーIDを常に検証できるとは限らないため、これは黙って無視されることがよくあります。エラーが報告された場合は、 &lt;code&gt;error_logger&lt;/code&gt; に報告されます。スケジューラーが要求どおりにバインドされていることを確認する場合は、 &lt;code&gt;&lt;a href=&quot;erlang#system_info_scheduler_bindings&quot;&gt; erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="95196719288c8a4037a8712bcbf85254190e9568" translate="yes" xml:space="preserve">
          <source>If a scheduler fails to bind, this is often silently ignored, as it is not always possible to verify valid logical processor identifiers. If an error is reported, it is reported to the &lt;code&gt;error_logger&lt;/code&gt;. If you want to verify that the schedulers have bound as requested, call &lt;code&gt;&lt;a href=&quot;erlang#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">スケジューラーがバインドに失敗した場合、有効な論理プロセッサーIDを常に検証できるとは限らないため、これは暗黙のうちに無視されることがよくあります。エラーが報告されると、 &lt;code&gt;error_logger&lt;/code&gt; に報告されます。スケジューラーが要求どおりにバインドされたことを確認する場合は、 &lt;code&gt;&lt;a href=&quot;erlang#system_info_scheduler_bindings&quot;&gt;erlang:system_info(scheduler_bindings)&lt;/a&gt;&lt;/code&gt; を呼び出します。</target>
        </trans-unit>
        <trans-unit id="70c51b792a482c1acceec2498ed07a15eeff4e4d" translate="yes" xml:space="preserve">
          <source>If a scheduler is put to sleep or awoken, a message, &lt;code&gt;{profile, scheduler, Id, State, NoScheds, Ts}&lt;/code&gt;, is sent to &lt;code&gt;ProfilerPid&lt;/code&gt;.</source>
          <target state="translated">スケジューラーがスリープまたは覚醒すると、メッセージ &lt;code&gt;{profile, scheduler, Id, State, NoScheds, Ts}&lt;/code&gt; が &lt;code&gt;ProfilerPid&lt;/code&gt; に送信されます。</target>
        </trans-unit>
        <trans-unit id="c83d78ce9bb009d70f32a1197570bf9131a81777" translate="yes" xml:space="preserve">
          <source>If a scheduler thread create a new reference each nano second, references will at earliest be reused after more than 584 years. That is, for the foreseeable future they are unique enough.</source>
          <target state="translated">スケジューラのスレッドがナノ秒ごとに新しい参照を作成する場合、参照は早くても584年以上後に再利用されることになります。つまり、予見可能な将来のためには、十分にユニークなものであるということです。</target>
        </trans-unit>
        <trans-unit id="4907dacbb20e81759e0cdf9eb1879f2ddefb0697" translate="yes" xml:space="preserve">
          <source>If a script is found, the first thing that happens is that the application specifications are updated according to the &lt;code&gt;.app&lt;/code&gt; files and &lt;code&gt;sys.config&lt;/code&gt; belonging to the release version &lt;code&gt;Vsn&lt;/code&gt;.</source>
          <target state="translated">スクリプトが見つかった場合、最初に起こることは、アプリケーション仕様がリリースバージョン &lt;code&gt;Vsn&lt;/code&gt; に属する &lt;code&gt;.app&lt;/code&gt; ファイルと &lt;code&gt;sys.config&lt;/code&gt; に従って更新されることです。</target>
        </trans-unit>
        <trans-unit id="332eeb8191104a7c5c740b708710a7e691d869fa" translate="yes" xml:space="preserve">
          <source>If a shell service request arrives to the server, an</source>
          <target state="translated">シェルサービスのリクエストがサーバに到着すると</target>
        </trans-unit>
        <trans-unit id="84d4a6395eb04a368d97e3a781384bca1f8ac150" translate="yes" xml:space="preserve">
          <source>If a shuffled test case group is repeated, the seed is not reset between turns.</source>
          <target state="translated">シャッフルされたテストケース群が繰り返される場合、ターン間にシードはリセットされません。</target>
        </trans-unit>
        <trans-unit id="f211a4f0b3b5f8149bc67ba0e458b150aec8e31c" translate="yes" xml:space="preserve">
          <source>If a simple extension has been made to a functional module, it is sufficient to load the new version of the module into the system, and remove the old version. This is called &lt;strong&gt;simple code replacement&lt;/strong&gt; and for this the following instruction is used:</source>
          <target state="translated">機能モジュールに単純な拡張が行われた場合は、モジュールの新しいバージョンをシステムにロードし、古いバージョンを削除するだけで十分です。これは&lt;strong&gt;単純なコード置換&lt;/strong&gt;と呼ばれ、次の命令が使用されます。</target>
        </trans-unit>
        <trans-unit id="820e1f62550d2d1dc4b7d5110225b45b02793e4e" translate="yes" xml:space="preserve">
          <source>If a socket has somehow been connected without using &lt;code&gt;gen_tcp&lt;/code&gt;, use this option to pass the file descriptor for it.</source>
          <target state="translated">&lt;code&gt;gen_tcp&lt;/code&gt; を使用せずに何らかの方法でソケットが接続されている場合は、このオプションを使用してソケットのファイル記述子を渡します。</target>
        </trans-unit>
        <trans-unit id="bf685931edb5e2ee94fb5c82e823cca317fe8b98" translate="yes" xml:space="preserve">
          <source>If a socket has somehow been connected without using &lt;code&gt;gen_tcp&lt;/code&gt;, use this option to pass the file descriptor for it. If &lt;code&gt;{ip, Address}&lt;/code&gt; and/or &lt;code&gt;{port, port_number()}&lt;/code&gt; is combined with this option, the &lt;code&gt;fd&lt;/code&gt; is bound to the specified interface and port before connecting. If these options are not specified, it is assumed that the &lt;code&gt;fd&lt;/code&gt; is already bound appropriately.</source>
          <target state="translated">&lt;code&gt;gen_tcp&lt;/code&gt; を使用せずに何らかの方法でソケットが接続されている場合は、このオプションを使用してソケットのファイル記述子を渡します。場合 &lt;code&gt;{ip, Address}&lt;/code&gt; および/または &lt;code&gt;{port, port_number()}&lt;/code&gt; このオプションと組み合わされ、 &lt;code&gt;fd&lt;/code&gt; 接続する前に、指定インターフェースとポートにバインドされています。これらのオプションが指定されていない場合、 &lt;code&gt;fd&lt;/code&gt; はすでに適切にバインドされていると見なされます。</target>
        </trans-unit>
        <trans-unit id="88d20f7afcab3c9941388d26759eb43e0f494eda" translate="yes" xml:space="preserve">
          <source>If a socket has somehow been opened without using &lt;code&gt;gen_udp&lt;/code&gt;, use this option to pass the file descriptor for it. If &lt;code&gt;Port&lt;/code&gt; is not set to &lt;code&gt;0&lt;/code&gt; and/or &lt;code&gt;{ip, ip_address()}&lt;/code&gt; is combined with this option, the &lt;code&gt;fd&lt;/code&gt; is bound to the specified interface and port after it is being opened. If these options are not specified, it is assumed that the &lt;code&gt;fd&lt;/code&gt; is already bound appropriately.</source>
          <target state="translated">&lt;code&gt;gen_udp&lt;/code&gt; を使用せずに何らかの方法でソケットが開かれている場合は、このオプションを使用してソケットのファイル記述子を渡します。場合 &lt;code&gt;Port&lt;/code&gt; に設定されていない &lt;code&gt;0&lt;/code&gt; および/または &lt;code&gt;{ip, ip_address()}&lt;/code&gt; このオプションと組み合わされ、 &lt;code&gt;fd&lt;/code&gt; 、それが開かれた後、指定されたインターフェイスとポートにバインドされています。これらのオプションが指定されていない場合、 &lt;code&gt;fd&lt;/code&gt; はすでに適切にバインドされていると見なされます。</target>
        </trans-unit>
        <trans-unit id="c3d4cd539d93fb17b915657f42699b04d0414500" translate="yes" xml:space="preserve">
          <source>If a socket is connected already, option &lt;code&gt;{udp, [{fd, integer()}]}&lt;/code&gt; can be used to pass the open file descriptor to &lt;code&gt;gen_udp&lt;/code&gt;. This can be automated by using a command-line argument stating the prebound file descriptor number. For example, if the port is 69 and file descriptor 22 is opened by &lt;code&gt;setuid_socket_wrap&lt;/code&gt;, the command-line argument &quot;-tftpd_69 22&quot; triggers the prebound file descriptor 22 to be used instead of opening port 69. The UDP option &lt;code&gt;{udp, [{fd, 22}]}&lt;/code&gt; is automatically added. See &lt;code&gt;init:get_argument/&lt;/code&gt; about command-line arguments and &lt;code&gt;gen_udp:open/2&lt;/code&gt; about UDP options.</source>
          <target state="translated">ソケットがすでに接続されている場合、オプション &lt;code&gt;{udp, [{fd, integer()}]}&lt;/code&gt; を使用して、開いているファイル記述子を &lt;code&gt;gen_udp&lt;/code&gt; に渡すことができます。これは、事前バインドされたファイル記述子番号を示すコマンドライン引数を使用して自動化できます。たとえば、ポートが69で、ファイル記述子22が &lt;code&gt;setuid_socket_wrap&lt;/code&gt; によって開かれている場合、コマンドライン引数「-tftpd_69 22」は、ポート69を開く代わりに事前バインドされたファイル記述子22をトリガーします。UDPオプション &lt;code&gt;{udp, [{fd, 22}]}&lt;/code&gt; が自動的に追加されます。コマンドライン引数については &lt;code&gt;init:get_argument/&lt;/code&gt; 、UDPオプションについては &lt;code&gt;gen_udp:open/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="8adda14107128cbabef9332c232b6afdafabc519" translate="yes" xml:space="preserve">
          <source>If a subgroup is specified in a group with a &lt;code&gt;shuffle&lt;/code&gt; property, the execution order of this subgroup in relation to the test cases (and other subgroups) in the group, is random. The order of the test cases in the subgroup is however not random (unless the subgroup has a &lt;code&gt;shuffle&lt;/code&gt; property).</source>
          <target state="translated">サブグループが &lt;code&gt;shuffle&lt;/code&gt; プロパティを持つグループで指定されている場合、グループ内のテストケース（および他のサブグループ）に対するこのサブグループの実行順序はランダムです。ただし、サブグループ内のテストケースの順序はランダムではありません（サブグループに &lt;code&gt;shuffle&lt;/code&gt; プロパティがない限り）。</target>
        </trans-unit>
        <trans-unit id="f8f9318070c1a0b76966d2350817b608770dbd93" translate="yes" xml:space="preserve">
          <source>If a synchronous call to a port from a process is done, the calling process is considered not runnable during the call runtime to the port. The calling process is notified as &lt;code&gt;inactive&lt;/code&gt;, and later &lt;code&gt;active&lt;/code&gt; when the port callback returns.</source>
          <target state="translated">プロセスからポートへの同期呼び出しが行われた場合、呼び出しプロセスは、ポートへの呼び出しランタイム中に実行不可能と見なされます。呼び出しプロセスは &lt;code&gt;inactive&lt;/code&gt; として通知され、後でポートコールバックが戻ったときに &lt;code&gt;active&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="03163668ea38b2448adbb495833cb5c9d2fb18c2" translate="yes" xml:space="preserve">
          <source>If a table is of type &lt;code&gt;bag&lt;/code&gt;, it can sometimes be needed to delete only some of the records with a certain key. This can be done with the function &lt;code&gt;delete_object/3&lt;/code&gt;. A complete record must be supplied to this function.</source>
          <target state="translated">テーブルのタイプが &lt;code&gt;bag&lt;/code&gt; の場合、特定のキーを持つレコードの一部のみを削除することが必要になる場合があります。これは、関数 &lt;code&gt;delete_object/3&lt;/code&gt; で実行できます。この関数には完全なレコードを提供する必要があります。</target>
        </trans-unit>
        <trans-unit id="d6399fd24f009cc3e3ffb42705ab75b017db16fb" translate="yes" xml:space="preserve">
          <source>If a table is of type &lt;code&gt;set&lt;/code&gt;, each key leads to either one or zero records.</source>
          <target state="translated">テーブルのタイプが &lt;code&gt;set&lt;/code&gt; の場合、各キーは1つまたはゼロのレコードにつながります。</target>
        </trans-unit>
        <trans-unit id="cc60ddbc56bced221eb285cedf24eccba7391477" translate="yes" xml:space="preserve">
          <source>If a temporary application terminates, this is reported but no other applications are terminated.</source>
          <target state="translated">一時的なアプリケーションが終了した場合、これは報告されますが、他のアプリケーションは終了しません。</target>
        </trans-unit>
        <trans-unit id="1c78c30e29b702d609a635a08cca518cae737159" translate="yes" xml:space="preserve">
          <source>If a terminal symbol is the only member of a category, and the symbol name is identical to the category name, the token format may be &lt;code&gt;{Symbol, LineNumber}&lt;/code&gt;.</source>
          <target state="translated">端末シンボルがカテゴリの唯一のメンバーであり、シンボル名がカテゴリ名と同じである場合、トークンの形式は &lt;code&gt;{Symbol, LineNumber}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="39831a6256c96762c2da58783be93b30bfb60bf0" translate="yes" xml:space="preserve">
          <source>If a test case belonging to a group (according to the group definition) is executed without a group specification, that is, simply by (using the command line):</source>
          <target state="translated">グループに属するテストケースが(グループの定義に従って)グループ指定なしで実行された場合、つまり、単に(コマンドラインを使って)実行された場合。</target>
        </trans-unit>
        <trans-unit id="502798b518aba9797ae119aec810b4ce5b5d0729" translate="yes" xml:space="preserve">
          <source>If a test case fails, this funcion is called after &lt;code&gt;&lt;a href=&quot;#Module:post_end_per_testcase-5&quot;&gt;post_end_per_testcase&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テストケースが失敗した場合、この関数は &lt;code&gt;&lt;a href=&quot;#Module:post_end_per_testcase-5&quot;&gt;post_end_per_testcase&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="335080793d3bf721193087f47f63eafaac01cbbd" translate="yes" xml:space="preserve">
          <source>If a test case is skipped, this function is called after &lt;code&gt;&lt;a href=&quot;#Module:post_end_per_testcase-5&quot;&gt;post_end_per_testcase&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">テストケースがスキップされた場合、この関数は &lt;code&gt;&lt;a href=&quot;#Module:post_end_per_testcase-5&quot;&gt;post_end_per_testcase&lt;/a&gt;&lt;/code&gt; の後に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d6a471993c391b1bd64637c48e80cd9c14d7854c" translate="yes" xml:space="preserve">
          <source>If a test case needs to suspend itself for a time that also gets multipled by &lt;code&gt;multiply_timetraps&lt;/code&gt; (and possibly also scaled up if &lt;code&gt;scale_timetraps&lt;/code&gt; is enabled), the function &lt;code&gt;&lt;a href=&quot;ct#sleep-1&quot;&gt;ct:sleep/1&lt;/a&gt;&lt;/code&gt; can be used (instead of, for example, &lt;code&gt;timer:sleep/1&lt;/code&gt;).</source>
          <target state="translated">テストケースが &lt;code&gt;multiply_timetraps&lt;/code&gt; で乗算される時間（および &lt;code&gt;scale_timetraps&lt;/code&gt; が有効になっている場合はさらにスケールアップされる）も一時停止する必要がある場合は、関数 &lt;code&gt;&lt;a href=&quot;ct#sleep-1&quot;&gt;ct:sleep/1&lt;/a&gt;&lt;/code&gt; を使用できます（たとえば、 &lt;code&gt;timer:sleep/1&lt;/code&gt; 代わりに）。1）。</target>
        </trans-unit>
        <trans-unit id="5226c324f9ac4409e33361c519af1aca1d4d0288" translate="yes" xml:space="preserve">
          <source>If a third instance of the module is loaded, the code server removes (purges) the old code and any processes lingering in it are terminated. Then the third instance becomes 'current' and the previously current code becomes 'old'.</source>
          <target state="translated">モジュールの 3 番目のインスタンスがロードされると、コードサーバは古いコードを削除 (パージ)し、その中に残っているプロセスはすべて終了します。その後、3つ目のインスタンスは 'current' になり、以前の現在のコードは 'old' になります。</target>
        </trans-unit>
        <trans-unit id="4b71ff8bf7808e50acef36bf51fec54b753b169f" translate="yes" xml:space="preserve">
          <source>If a third instance of the module is loaded, the code server removes (purges) the old code and any processes lingering in it is terminated. Then the third instance becomes 'current' and the previously current code becomes 'old'.</source>
          <target state="translated">モジュールの 3 番目のインスタンスがロードされると、コードサーバは古いコードを削除 (パージ)し、その中に残っているプロセスはすべて終了します。その後、3つ目のインスタンスは 'current' になり、以前の現在のコードは 'old' になります。</target>
        </trans-unit>
        <trans-unit id="9b209316ada835a355f0bceb58d85107e4df7fa7" translate="yes" xml:space="preserve">
          <source>If a thread is already working, the calls are queued up and executed in order. Using the same thread for each driver instance ensures that the calls are made in sequence.</source>
          <target state="translated">スレッドが既に動作している場合、呼び出しはキューに入れられて順番に実行されます。各ドライバインスタンスに同じスレッドを使用することで、呼び出しが順番に実行されることを保証します。</target>
        </trans-unit>
        <trans-unit id="f81497c9931883554b1a22b52663496f9755cc27" translate="yes" xml:space="preserve">
          <source>If a thread pool is available, a thread is used. If argument &lt;code&gt;key&lt;/code&gt; is &lt;code&gt;NULL&lt;/code&gt;, the threads from the pool are used in a round-robin way, each call to &lt;code&gt;driver_async&lt;/code&gt; uses the next thread in the pool. With argument &lt;code&gt;key&lt;/code&gt; set, this behavior is changed. The two same values of &lt;code&gt;*key&lt;/code&gt; always get the same thread.</source>
          <target state="translated">スレッドプールが使用可能な場合、スレッドが使用されます。引数 &lt;code&gt;key&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; の場合、プールからのスレッドはラウンドロビン方式で使用され、 &lt;code&gt;driver_async&lt;/code&gt; への各呼び出しはプール内の次のスレッドを使用します。引数 &lt;code&gt;key&lt;/code&gt; 設定すると、この動作が変更されます。 &lt;code&gt;*key&lt;/code&gt; の2つの同じ値は、常に同じスレッドを取得します。</target>
        </trans-unit>
        <trans-unit id="2ae4841a41da1bafc39b445eb14fcf5adc83b911" translate="yes" xml:space="preserve">
          <source>If a time-out is started with the time &lt;code&gt;0&lt;/code&gt; it will actually not be started. Instead the time-out event will immediately be inserted to be processed after any events already enqueued, and before any not yet received external events. Note that some time-outs are automatically cancelled so if you for example combine &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postponing&lt;/a&gt;&lt;/code&gt; an event in a &lt;strong&gt;state change&lt;/strong&gt; with starting an &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;event time-out&lt;/a&gt;&lt;/code&gt; with time &lt;code&gt;0&lt;/code&gt; there will be no time-out event inserted since the event time-out is cancelled by the postponed event that is delivered due to the state change.</source>
          <target state="translated">タイムアウトが時刻 &lt;code&gt;0&lt;/code&gt; で開始された場合、実際には開始されません。代わりに、タイムアウトイベントはすぐに挿入され、すでにキューに入れられているイベントの後、まだ受信されていない外部イベントの前に処理されます。一部のタイムアウトは自動的にキャンセルされるため、たとえば、&lt;strong&gt;状態変更&lt;/strong&gt;でのイベントの &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;postponing&lt;/a&gt;&lt;/code&gt; 、時間 &lt;code&gt;0&lt;/code&gt; での &lt;code&gt;&lt;a href=&quot;#Event%20Time-Outs&quot;&gt;event time-out&lt;/a&gt;&lt;/code&gt; 開始を組み合わせると、イベントのタイムアウトはによってキャンセルされるため、タイムアウトイベントは挿入されないことに注意してください。状態の変化により配信される延期されたイベント。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="5ed3fc97d55d4fa64719146d29086a7ad193da5e" translate="yes" xml:space="preserve">
          <source>If a time-out is started with the time &lt;code&gt;infinity&lt;/code&gt; it will never time out, in fact it will not even be started, and any running time-out with the same tag will be cancelled. The &lt;code&gt;EventContent&lt;/code&gt; will in this case be ignored, so why not set it to &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">タイムアウトが時間 &lt;code&gt;infinity&lt;/code&gt; で開始された場合、タイムアウトになることはなく、実際には開始されておらず、同じタグで実行中のタイムアウトはキャンセルされます。 &lt;code&gt;EventContent&lt;/code&gt; は、この場合には無視され、なぜそれを設定しません &lt;code&gt;undefined&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="4f35f3c6d4b31e8b5610fe46bbb2c396d6dec610" translate="yes" xml:space="preserve">
          <source>If a trace port (see &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt;) is running on the local node, remote nodes can not be traced with a tracer process. The error reason &lt;code&gt;cant_trace_remote_pid_to_local_port&lt;/code&gt; is returned. A trace port can however be started on the remote node with the &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">トレースポート（ &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; を参照）がローカルノードで実行されている場合、リモートノードはトレーサプロセスでトレースできません。エラー理由 &lt;code&gt;cant_trace_remote_pid_to_local_port&lt;/code&gt; が返されます。ただし、 &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; 機能を使用すると、リモートノードでトレースポートを開始できます。</target>
        </trans-unit>
        <trans-unit id="be4166c81b6aa45a3706a93a3be13529c5b52b9c" translate="yes" xml:space="preserve">
          <source>If a trace port (see &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt;) is running on the local node, remote nodes cannot be traced with a tracer process. The error reason &lt;code&gt;cant_trace_remote_pid_to_local_port&lt;/code&gt; is returned. A trace port can however be started on the remote node with the &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; function.</source>
          <target state="translated">トレースポート（ &lt;code&gt;&lt;a href=&quot;#trace_port-2&quot;&gt;trace_port/2&lt;/a&gt;&lt;/code&gt; を参照）がローカルノードで実行されている場合、リモートノードはトレーサープロセスでトレースできません。エラー理由 &lt;code&gt;cant_trace_remote_pid_to_local_port&lt;/code&gt; が返されます。ただし、 &lt;code&gt;&lt;a href=&quot;#tracer-3&quot;&gt;tracer/3&lt;/a&gt;&lt;/code&gt; 機能を使用して、リモートノードでトレースポートを開始できます。</target>
        </trans-unit>
        <trans-unit id="763b6ed1f9356f6927dce6575fc162a00e017c98" translate="yes" xml:space="preserve">
          <source>If a tracer is specified in both lists, the tracer in the enable list takes precedence. If no tracer is specified, the same tracer as the process executing the match specification is used (not the meta tracer). If that process doesn't have tracer either, then trace flags are ignored.</source>
          <target state="translated">両方のリストにトレーサが指定されている場合は、enable リストのトレーサが優先されます。トレーサが指定されていない場合は、マッチ指定を実行しているプロセスと同じトレーサが使用されます(メタトレーサではありません)。そのプロセスにトレーサがない場合、トレースフラグは無視されます。</target>
        </trans-unit>
        <trans-unit id="b082e683a06ac559acb1ef17f3dfa0a3a24bd825" translate="yes" xml:space="preserve">
          <source>If a transaction involves updates of asymmetrically replicated tables or updates of the schema table, a heavyweight commit protocol is used. This protocol can finish the transaction regardless of how the tables are replicated. The typical use of a heavyweight transaction is when a replica is to be moved from one node to another. Then ensure that the replica either is entirely moved or left as it was. Do never end up in a situation with replicas on both nodes, or on no node at all. Even if a node crashes in the middle of the commit protocol, the transaction must be guaranteed to be atomic. The heavyweight commit protocol involves more messages between the transaction coordinator and its participants than a lightweight protocol, and it performs recovery work at startup to finish the terminating or commit work.</source>
          <target state="translated">トランザクションが非対称的にレプリケートされたテーブルの更新やスキーマテーブルの更新を含む場合、ヘビーウェイトコミットプロトコルが使用されます。このプロトコルは、テーブルがどのようにレプリケートされているかに関係なく、トランザクションを終了させることができます。ヘビーウェイトトランザクションの典型的な使用法は、レプリカをあるノードから別のノードに移動させる場合です。その後、レプリカが完全に移動されるか、またはそのままになっていることを確認してください。両方のノードにレプリカがある、あるいは全くないノードにレプリカがあるという状況にならないようにしてください。たとえコミットプロトコルの途中でノードがクラッシュしたとしても、トランザクションはアトミックであることが保証されていなければなりません。ヘビーウェイトコミットプロトコルは、ライトウェイトプロトコルよりもトランザクションコーディネータとその参加者の間でより多くのメッセージを含み、起動時に回復作業を行い、ターミネーション作業やコミット作業を終了させる。</target>
        </trans-unit>
        <trans-unit id="be9ed32b4b23ddaaa7542c4292ca46e3b1d16e3a" translate="yes" xml:space="preserve">
          <source>If a transaction terminates abnormally, &lt;code&gt;Mnesia&lt;/code&gt; automatically releases the locks held by the transaction.</source>
          <target state="translated">トランザクションが異常終了した場合、 &lt;code&gt;Mnesia&lt;/code&gt; はトランザクションによって保持されているロックを自動的に解放します。</target>
        </trans-unit>
        <trans-unit id="ddb095e9f47a7e392a2d545f1d0433b6aff3499a" translate="yes" xml:space="preserve">
          <source>If a transformation rule matched, the loader applies the transformation rules again.</source>
          <target state="translated">変換ルールが一致した場合、ローダは再び変換ルールを適用します。</target>
        </trans-unit>
        <trans-unit id="d768f6b886e49430d7bcd0e5e091ee1cc5e44534" translate="yes" xml:space="preserve">
          <source>If a transient application terminates abnormally, all other applications and the entire Erlang node are also terminated.</source>
          <target state="translated">トランジェントアプリケーションが異常終了した場合、他のすべてのアプリケーションとErlangノード全体も終了します。</target>
        </trans-unit>
        <trans-unit id="1b042eac1f57ab6a81bbf8b7e159e1151ec77d9d" translate="yes" xml:space="preserve">
          <source>If a transient application terminates with &lt;code&gt;Reason == normal&lt;/code&gt;, this is reported but no other applications are terminated.</source>
          <target state="translated">一時的なアプリケーションが &lt;code&gt;Reason == normal&lt;/code&gt; で終了した場合、これは報告されますが、他のアプリケーションは終了しません。</target>
        </trans-unit>
        <trans-unit id="7d851ba83013456de4862df5a0550756dd9ddcb5" translate="yes" xml:space="preserve">
          <source>If a transient application terminates with reason &lt;code&gt;normal&lt;/code&gt;, this is reported but no other applications are terminated. If a transient application terminates abnormally, that is with any other reason than &lt;code&gt;normal&lt;/code&gt;, all other applications and the runtime system are also terminated.</source>
          <target state="translated">一時的なアプリケーションが &lt;code&gt;normal&lt;/code&gt; 理由で終了した場合、これは報告されますが、他のアプリケーションは終了しません。一時的なアプリケーションが異常終了した場合、つまり &lt;code&gt;normal&lt;/code&gt; 以外の理由で発生した場合、他のすべてのアプリケーションとランタイムシステムも終了します。</target>
        </trans-unit>
        <trans-unit id="2a6dabddba08d7663fc55e59a178732b34a37ab9" translate="yes" xml:space="preserve">
          <source>If a unique integer is created each nano second, unique integers will at earliest be reused after more than 584 years. That is, for the foreseeable future they are unique enough.</source>
          <target state="translated">ナノ秒ごとにユニークな整数が作られるとすると、ユニークな整数は早くても584年以上後に再利用されることになる。つまり、予見可能な未来には、それは十分にユニークであるということです。</target>
        </trans-unit>
        <trans-unit id="8212ea9be32c0602ffe0b39d535c8ff1c3704caf" translate="yes" xml:space="preserve">
          <source>If a user wants to run only a subset of a test suite, there is no way one test case could successfully depend on another.</source>
          <target state="translated">ユーザーがテストスイートのサブセットのみを実行したい場合、1つのテストケースが他のテストケースにうまく依存する方法はありません。</target>
        </trans-unit>
        <trans-unit id="7a2111f1ccabd04661a065f18bb26413e12a43cc" translate="yes" xml:space="preserve">
          <source>If a value for an object is not given to the &lt;code&gt;send_notification&lt;/code&gt; function, the sub-agent will perform a get-operation to retrieve it. If the object is not implemented in this sub-agent, its parent agent tries to perform a get-operation to retrieve it. If the object is not implemented in this agent either, it forwards the object to its parent, and so on. Eventually the Master Agent is reached and at this point all unknown object values must be resolved. If some object is unknown even to the Master Agent, this is regarded as an error and is reported with a call to &lt;code&gt;user_err/2&lt;/code&gt; of the error report module. No notifications are sent in this case.</source>
          <target state="translated">オブジェクトの値が &lt;code&gt;send_notification&lt;/code&gt; 関数に指定されていない場合、サブエージェントはget操作を実行してそれを取得します。オブジェクトがこのサブエージェントに実装されていない場合、その親エージェントは、get操作を実行してオブジェクトを取得しようとします。オブジェクトがこのエージェントにも実装されていない場合は、オブジェクトをその親に転送します。最終的にマスターエージェントに到達し、この時点ですべての不明なオブジェクト値を解決する必要があります。マスターエージェントでも不明なオブジェクトがある場合、これはエラーと見なされ、エラーレポートモジュールの &lt;code&gt;user_err/2&lt;/code&gt; への呼び出しで報告されます。この場合、通知は送信されません。</target>
        </trans-unit>
        <trans-unit id="7f05ffe858a8cb96ed8902253d604666829ad99b" translate="yes" xml:space="preserve">
          <source>If a variable in the notification is a table element, the &lt;code&gt;RowIndex&lt;/code&gt; for the element must be given in the &lt;code&gt;Varbinds&lt;/code&gt; list. In this case, the OBJECT IDENTIFIER sent in the notification is the OBJECT IDENTIFIER that identifies this element. This OBJECT IDENTIFIER could be used in a get operation later.</source>
          <target state="translated">通知内の変数は、table要素である場合は、 &lt;code&gt;RowIndex&lt;/code&gt; 要素のためには、で与えられなければならない &lt;code&gt;Varbinds&lt;/code&gt; リスト。この場合、通知で送信されるOBJECT IDENTIFIERは、この要素を識別するOBJECT IDENTIFIERです。このOBJECT IDENTIFIERは、後でget操作で使用できます。</target>
        </trans-unit>
        <trans-unit id="efa23222c6a2a3e5338c7520ab1388a99a7dfcaa" translate="yes" xml:space="preserve">
          <source>If a verb with a name is encountered in a positive assertion that is true, the name is recorded and passed back if it is the last encountered. This does not occur for negative assertions or failing positive assertions.</source>
          <target state="translated">正のアサーションで名前のある動詞が真である場合、その名前は記録され、それが最後に遭遇した動詞である場合に引き渡されます。これは、負のアサーションや正のアサーションに失敗した場合には発生しません。</target>
        </trans-unit>
        <trans-unit id="3c078e743c8ad3031e0b9776799a11e94ca09596" translate="yes" xml:space="preserve">
          <source>If a word is a keyword in any of SMIv1 or SMIv2, it is a keyword in the compiler (deviates from SMIv1 only).</source>
          <target state="translated">SMIv1またはSMIv2のいずれかの単語がキーワードになっている場合、それはコンパイラのキーワードになります(SMIv1のみ逸脱しています)。</target>
        </trans-unit>
        <trans-unit id="626f4bf2cfcfd59884034c767d316b8382a2cf65" translate="yes" xml:space="preserve">
          <source>If all above checks passed both &lt;strong&gt;current&lt;/strong&gt; and &lt;strong&gt;old&lt;/strong&gt; Bloom filters are checked to detect if binder was already seen. Being a probabilistic data structure, false positives can occur and they trigger a full handshake.</source>
          <target state="translated">上記のすべてのチェックに合格すると、&lt;strong&gt;現在の&lt;/strong&gt;ブルームフィルターと&lt;strong&gt;古い&lt;/strong&gt;ブルームフィルターの両方がチェックされ、バインダーがすでに表示されているかどうかが検出されます。確率的なデータ構造であるため、誤検知が発生する可能性があり、完全なハンドシェイクがトリガーされます。</target>
        </trans-unit>
        <trans-unit id="1149a0ac86645906ae73725e9fb076d1a22fe0f5" translate="yes" xml:space="preserve">
          <source>If all is going well, &lt;code&gt;{atomic, ResultOfFun}&lt;/code&gt; is returned, where &lt;code&gt;ResultOfFun&lt;/code&gt; is the value of the last expression in &lt;code&gt;Fun&lt;/code&gt;.</source>
          <target state="translated">すべてが順調に進んでいる場合、 &lt;code&gt;{atomic, ResultOfFun}&lt;/code&gt; が返されます。ここで、 &lt;code&gt;ResultOfFun&lt;/code&gt; は &lt;code&gt;Fun&lt;/code&gt; の最後の式の値です。</target>
        </trans-unit>
        <trans-unit id="b01530d249514addedfdbdbbd983e4e8a11a58ae" translate="yes" xml:space="preserve">
          <source>If all the alternatives of a pattern begin with \G, the expression is anchored to the starting match position, and the &quot;anchored&quot; flag is set in the compiled regular expression.</source>
          <target state="translated">パターンのすべての選択肢が\Gで始まる場合、式はマッチ開始位置に固定され、コンパイルされた正規表現に &quot;anchored &quot;フラグが設定されます。</target>
        </trans-unit>
        <trans-unit id="e1594cd6a4b2cab6cb92767668a0eff338a52692" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;.erlang&lt;/code&gt; file is found, it is assumed to contain valid Erlang expressions. These expressions are evaluated as if they were input to the shell.</source>
          <target state="translated">&lt;code&gt;.erlang&lt;/code&gt; ファイルが見つかった場合、有効なErlang式が含まれていると見なされます。これらの式は、シェルに入力されたかのように評価されます。</target>
        </trans-unit>
        <trans-unit id="af472d7bbaa2fc6a0ea1097c69c14756e497ac62" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;&lt;a href=&quot;erts_alloc&quot;&gt;erts_alloc(3)&lt;/a&gt;&lt;/code&gt; allocator has been disabled.</source>
          <target state="translated">もし &lt;code&gt;&lt;a href=&quot;erts_alloc&quot;&gt;erts_alloc(3)&lt;/a&gt;&lt;/code&gt; アロケータが無効になっています。</target>
        </trans-unit>
        <trans-unit id="09d966cba699040070b071c5c784aefbdf8752e2" translate="yes" xml:space="preserve">
          <source>If an &lt;code&gt;erpc&lt;/code&gt; operation fails, but it is unknown if the function is/will be applied (that is, a timeout, connection loss, or an improper &lt;code&gt;Nodes&lt;/code&gt; list), the caller will not receive any further information about the result if/when the applied function completes. If the applied function communicates with the calling process, such communication may, of course, reach the calling process.</source>
          <target state="translated">場合 &lt;code&gt;erpc&lt;/code&gt; 操作は失敗しますが、機能は/（、タイムアウト、接続損失、または不適切であることに適用されますされている場合、それは不明である &lt;code&gt;Nodes&lt;/code&gt; リスト）、呼び出し側があれば、結果についてのさらなる情報を受信しません/とき適用された機能が完了します。適用された機能が呼び出しプロセスと通信する場合、そのような通信はもちろん呼び出しプロセスに到達する可能性があります。</target>
        </trans-unit>
        <trans-unit id="b0fe7f6a7a0b539b5749a7e1d2f251c0f18f21ac" translate="yes" xml:space="preserve">
          <source>If an I/O device is set in binary mode, functions &lt;code&gt;&lt;a href=&quot;#get_chars-2&quot;&gt;get_chars/2,3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; can return binaries instead of lists. The binaries are, as from Erlang/OTP R13A, encoded in UTF-8.</source>
          <target state="translated">I / Oデバイスがバイナリモードに設定されている場合、関数 &lt;code&gt;&lt;a href=&quot;#get_chars-2&quot;&gt;get_chars/2,3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; はリストの代わりにバイナリを返すことができます。バイナリは、Erlang / OTP R13Aからのように、UTF-8でエンコードされています。</target>
        </trans-unit>
        <trans-unit id="950a5eee2a6c7e7d5ca333de354cd42eaef1ad34" translate="yes" xml:space="preserve">
          <source>If an I/O server encounters a request that it does not recognize (that is, the &lt;code&gt;io_request&lt;/code&gt; tuple has the expected format, but the &lt;code&gt;Request&lt;/code&gt; is unknown), the I/O server is to send a valid reply with the error tuple:</source>
          <target state="translated">I / Oサーバーが認識しない要求に遭遇した場合（つまり、 &lt;code&gt;io_request&lt;/code&gt; タプルの形式は予期されているが、 &lt;code&gt;Request&lt;/code&gt; が不明である場合）、I / Oサーバーはエラータプルとともに有効な応答を送信します。</target>
        </trans-unit>
        <trans-unit id="a4f36f7aa69d8f80d8d7146716c4e8049b3bf51a" translate="yes" xml:space="preserve">
          <source>If an MIB object instance belongs to exactly one sub-tree, then the instance is included in, or excluded from, the relevant MIB view according to the type of that entry.</source>
          <target state="translated">MIBオブジェクトのインスタンスが正確に1つのサブツリーに属している場合、そのインスタンスは、そのエントリのタイプに応じて、関連するMIBビューに含まれるか、または除外されます。</target>
        </trans-unit>
        <trans-unit id="a99df1ec1c1a80894724865e2ce569291af72e66" translate="yes" xml:space="preserve">
          <source>If an MIB object instance belongs to more than one sub-tree, then the sub-tree which comprises the greatest number of sub-identifiers, and is the lexicographically greatest, is used.</source>
          <target state="translated">MIB オブジェクトのインスタンスが複数のサブツリーに属している場合は、サブ識別子の数が最も多く、字句学的に最も大きいサブツリーが使用されます。</target>
        </trans-unit>
        <trans-unit id="e6bdb8ad60adae512c56f4674456a5be529864a3" translate="yes" xml:space="preserve">
          <source>If an MIB object instance does not belong to any of the relevant sub-trees, then the instance is not in the MIB view.</source>
          <target state="translated">MIB オブジェクトのインスタンスが関連するサブツリーのいずれにも属していない場合、そのインスタンスは MIB ビューにはありません。</target>
        </trans-unit>
        <trans-unit id="705cdb188be71ada04fc74b872d92dbacc75dd7e" translate="yes" xml:space="preserve">
          <source>If an alg_entry() is missing in the algs_list(), the default value is used for that entry.</source>
          <target state="translated">alg_entry()が algs_list()の中にない場合は、そのエントリのデフォルト値が使用されます。</target>
        </trans-unit>
        <trans-unit id="5c83f6426a048bc4d7852aaa3ae581e49a373491" translate="yes" xml:space="preserve">
          <source>If an algorithm name occurs more than once in a list, the behaviour is undefined. The tags in the property lists are also assumed to occur at most one time.</source>
          <target state="translated">アルゴリズム名がリスト内に複数回出現した場合、動作は未定義です。プロパティリスト内のタグもまた、最大で1回出現することが想定されています。</target>
        </trans-unit>
        <trans-unit id="ce7071090130d498a0f2639cfbfd5be9f3e8c347" translate="yes" xml:space="preserve">
          <source>If an application callback made in processing the request fails (pick_peer, prepare_request, prepare_retransmit, handle_answer or handle_error) then either &lt;code&gt;{error,encode}&lt;/code&gt; or &lt;code&gt;{error,failure}&lt;/code&gt; is returned depending on whether or not there has been an attempt to send the request over the transport.</source>
          <target state="translated">リクエストの処理中に作成されたアプリケーションコールバックが失敗した場合（pick_peer、prepare_request、prepare_retransmit、handle_answer、またはhandle_error）、リクエストを送信しようとしたかどうかに応じて &lt;code&gt;{error,encode}&lt;/code&gt; または &lt;code&gt;{error,failure}&lt;/code&gt; が返されます。トランスポート。</target>
        </trans-unit>
        <trans-unit id="9bc38fb01d5bf31a73055c19a3816c95b41bcc62" translate="yes" xml:space="preserve">
          <source>If an application is given more than once or if an application has the same key given more than once, the behaviour is undefined and a warning message will be logged. In future releases, an error will be raised.</source>
          <target state="translated">アプリケーションが複数回与えられた場合や、同じキーが複数回与えられた場合、動作は未定義であり、警告メッセージが記録されます。今後のリリースでは、エラーが発生します。</target>
        </trans-unit>
        <trans-unit id="39738be45b65649837e2fb936bf724db2dc8cf3a" translate="yes" xml:space="preserve">
          <source>If an argument is invalid.</source>
          <target state="translated">引数が無効な場合。</target>
        </trans-unit>
        <trans-unit id="8620de6a5aec3c030672b28f6a7fdb90f2fa4d64" translate="yes" xml:space="preserve">
          <source>If an arithmetic expression, a Boolean expression, a short-circuit expression, or a call to a guard BIF fails (because of invalid arguments), the entire guard fails. If the guard was part of a guard sequence, the next guard in the sequence (that is, the guard following the next semicolon) is evaluated.</source>
          <target state="translated">算術式、ブール演算式、短絡式、またはガード BIF への呼び出しが (無効な引数のために)失敗した場合、ガード全体が失敗します。ガードがガードシーケンスの一部であった場合、シーケンスの次のガード (つまり、次のセミコロンに続くガード)が評価されます。</target>
        </trans-unit>
        <trans-unit id="ee90b274af3aff2cc9d248f74e9b5167e0839059" translate="yes" xml:space="preserve">
          <source>If an attempt to open a log file for the first time fails, the disk log process terminates with the EXIT message &lt;code&gt;{{failed,Reason},[{disk_log,open,1}]}&lt;/code&gt;. The function returns &lt;code&gt;{error, Reason}&lt;/code&gt; for all other errors.</source>
          <target state="translated">ログファイルを初めて開く試みが失敗した場合、ディスクログプロセスは終了メッセージ &lt;code&gt;{{failed,Reason},[{disk_log,open,1}]}&lt;/code&gt; ます。この関数は &lt;code&gt;{error, Reason}&lt;/code&gt; 他のすべてのエラーに対して{error、Reason}を返します。</target>
        </trans-unit>
        <trans-unit id="6c78e44d2f2d9461d5a0cc6159a7d3b1775f8cf6" translate="yes" xml:space="preserve">
          <source>If an attempt to reopen or truncate a log fails (see &lt;code&gt;&lt;a href=&quot;#reopen-2&quot;&gt;reopen/2,3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#truncate-1&quot;&gt;truncate/1,2&lt;/a&gt;&lt;/code&gt;) the disk log process terminates immediately. Before the process terminates, links to owners and blocking processes (see &lt;code&gt;&lt;a href=&quot;#block-1&quot;&gt;block/1,2&lt;/a&gt;&lt;/code&gt;) are removed. The effect is that the links work in one direction only. Any process using a disk log must check for error message &lt;code&gt;no_such_log&lt;/code&gt; if some other process truncates or reopens the log simultaneously.</source>
          <target state="translated">ログの再オープンまたはトランケートの試行が失敗した場合（ &lt;code&gt;&lt;a href=&quot;#reopen-2&quot;&gt;reopen/2,3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#truncate-1&quot;&gt;truncate/1,2&lt;/a&gt;&lt;/code&gt; を参照）、ディスクログプロセスは即座に終了します。プロセスが終了する前に、所有者およびブロックプロセス（ &lt;code&gt;&lt;a href=&quot;#block-1&quot;&gt;block/1,2&lt;/a&gt;&lt;/code&gt; を参照）へのリンクが削除されます。その結果、リンクは一方向にのみ機能します。他のプロセスがログを同時に切り捨てたり、 &lt;code&gt;no_such_log&lt;/code&gt; 場合、ディスクログを使用するプロセスはすべて、エラーメッセージno_such_logを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="efa1a720322487c68ded0dc02a8c51e5dc94fcf9" translate="yes" xml:space="preserve">
          <source>If an edge is emanating from v and incident on w, then w is said to be an  &lt;strong id=&quot;out_neighbour&quot;&gt;out-neighbor&lt;/strong&gt; of v, and v is said to be an &lt;strong id=&quot;in_neighbour&quot;&gt;in-neighbor&lt;/strong&gt; of w.</source>
          <target state="translated">エッジがvから発せられ、wに入射している場合、wは vの&lt;strong id=&quot;out_neighbour&quot;&gt;外隣&lt;/strong&gt;であると言われ、vはwの&lt;strong id=&quot;in_neighbour&quot;&gt;内隣&lt;/strong&gt;であると言われます。</target>
        </trans-unit>
        <trans-unit id="a481b829b72ba85ee7ff861e87909f902fa230b7" translate="yes" xml:space="preserve">
          <source>If an employee started 1997 or later, but before 2001, return &lt;code&gt;{rookie, &amp;lt;employee number&amp;gt;}&lt;/code&gt;.</source>
          <target state="translated">従業員が1997年以降に開始したが2001年より前の場合は、 &lt;code&gt;{rookie, &amp;lt;employee number&amp;gt;}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="267d94e1e64e36b71e95d1e768da8da0ab4dabd6" translate="yes" xml:space="preserve">
          <source>If an employee started before 1997, return the tuple &lt;code&gt;{inventory, &amp;lt;employee number&amp;gt;}&lt;/code&gt;.</source>
          <target state="translated">従業員が1997年より前に開始した場合、タプル &lt;code&gt;{inventory, &amp;lt;employee number&amp;gt;}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="0b9b3a599385dc1e77b6effb7fdcc0ba87017325" translate="yes" xml:space="preserve">
          <source>If an emulator restart is necessary and no upgrade instructions are needed, that is, if the restart itself is enough for the upgraded applications to start running the new versions, a simple &lt;code&gt;relup&lt;/code&gt; file can be created manually:</source>
          <target state="translated">エミュレータの再起動が必要で、アップグレード手順が不要な場合、つまり、再起動自体が、アップグレードされたアプリケーションが新しいバージョンの実行を開始するのに十分である場合、簡単な &lt;code&gt;relup&lt;/code&gt; ファイルを手動で作成できます。</target>
        </trans-unit>
        <trans-unit id="0be98b96fbc89792dcc19067b12124fdf6e59e27" translate="yes" xml:space="preserve">
          <source>If an encode error takes place during retransmission then the request process fails and &lt;code&gt;{error,failure}&lt;/code&gt; is returned.</source>
          <target state="translated">再送信中にエンコードエラーが発生した場合、リクエストプロセスは失敗し、 &lt;code&gt;{error,failure}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="4d90f4b09c609d55842d57250ea621c86bccd2a5" translate="yes" xml:space="preserve">
          <source>If an entire packet is contained in &lt;code&gt;Bin&lt;/code&gt;, it is returned together with the remainder of the binary as &lt;code&gt;{ok,Packet,Rest}&lt;/code&gt;.</source>
          <target state="translated">パケット全体が含まれている場合 &lt;code&gt;Bin&lt;/code&gt; にている場合は、残りのバイナリとともに &lt;code&gt;{ok,Packet,Rest}&lt;/code&gt; として返されます。</target>
        </trans-unit>
        <trans-unit id="811984ae5951261acbbb238684d0b7c77bf502d9" translate="yes" xml:space="preserve">
          <source>If an error code is returned, the port is not started.</source>
          <target state="translated">エラーコードが返された場合、ポートは起動されていません。</target>
        </trans-unit>
        <trans-unit id="da4e739db10805f14ff747b7b4e80017ae2c1b09" translate="yes" xml:space="preserve">
          <source>If an error is found in the configuration file, it is reported using the function &lt;code&gt;&lt;a href=&quot;snmpa_error#config_err&quot;&gt;config_err/2&lt;/a&gt;&lt;/code&gt; of the error report module, and the function fails with the reason &lt;code&gt;configuration_error&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでエラーが見つかった場合、 &lt;code&gt;&lt;a href=&quot;snmpa_error#config_err&quot;&gt;config_err/2&lt;/a&gt;&lt;/code&gt; 関数を使用して報告されます。報告モジュールをは理由 &lt;code&gt;configuration_error&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="9669e70dbc35431ddeb5cae9c621269171a463e4" translate="yes" xml:space="preserve">
          <source>If an error is found in the configuration file, it is reported using the function &lt;code&gt;config_err/2&lt;/code&gt; of the , and the function fails with the reason &lt;code&gt;configuration_error&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでエラーが見つかった場合、 &lt;code&gt;config_err/2&lt;/code&gt; 関数を使用して報告されます。をは理由 &lt;code&gt;configuration_error&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="16106449fe5fc75aadfe943e285574d04cf0155a" translate="yes" xml:space="preserve">
          <source>If an error is found in the configuration file, it is reported using the function &lt;code&gt;config_err/2&lt;/code&gt; of the error report module, and the function fails with reason &lt;code&gt;configuration_error&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでエラーが見つかった場合、 &lt;code&gt;config_err/2&lt;/code&gt; 関数を使用して報告されます。報告モジュールを、関数は理由 &lt;code&gt;configuration_error&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="3f27e177a4e1612c45d2451a4b610d2b6a6e50b1" translate="yes" xml:space="preserve">
          <source>If an error is found in the configuration file, it is reported using the function &lt;code&gt;config_err/2&lt;/code&gt; of the error report module, and the function fails with the reason &lt;code&gt;configuration_error&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでエラーが見つかった場合、エラー報告モジュールの関数 &lt;code&gt;config_err/2&lt;/code&gt; を使用して報告され、関数は理由で失敗します &lt;code&gt;configuration_error&lt;/code&gt; でます。</target>
        </trans-unit>
        <trans-unit id="32a6f97b5644649bdcac70889144dbc30cbf50c8" translate="yes" xml:space="preserve">
          <source>If an error is found in the configuration file, it is reported using the function &lt;code&gt;config_err/2&lt;/code&gt; of the error, report module and the function fails with reason &lt;code&gt;configuration_error&lt;/code&gt;.</source>
          <target state="translated">構成ファイルでエラーが見つかった場合は、エラーの関数 &lt;code&gt;config_err/2&lt;/code&gt; を使用して報告され、モジュールを報告すると、関数が理由で失敗します。 &lt;code&gt;configuration_error&lt;/code&gt; 。 configuration_errorでます。</target>
        </trans-unit>
        <trans-unit id="a6bbaf85823709f47c63afa4741f86471e008208" translate="yes" xml:space="preserve">
          <source>If an error is returned, it can be due to errors in compilation of the match specification. Such errors are presented as a list of tuples &lt;code&gt;{error, string()}&lt;/code&gt; where the string is a textual explanation of the compilation error. An example:</source>
          <target state="translated">エラーが返された場合は、一致仕様のコンパイルのエラーが原因である可能性があります。このようなエラーはタプルのリストとして表示されます &lt;code&gt;{error, string()}&lt;/code&gt; ここで、stringは、コンパイルエラーのテキストによる説明です。例：</target>
        </trans-unit>
        <trans-unit id="4a4d238b84b9d8f7ce4275d02e1e061ea04cf76d" translate="yes" xml:space="preserve">
          <source>If an error is returned, it can either be due to a tracer server already running (&lt;code&gt;{error,already_started}&lt;/code&gt;) or due to the &lt;code&gt;HandlerFun&lt;/code&gt; throwing an exception.</source>
          <target state="translated">エラーが返された場合、すでに実行されているトレーサーサーバー（ &lt;code&gt;{error,already_started}&lt;/code&gt; ）または &lt;code&gt;HandlerFun&lt;/code&gt; が原因である可能性がありますが例外をスローしたがあります。</target>
        </trans-unit>
        <trans-unit id="4e9dbcebd3f214207a33235b48bfaaf49bf5e244" translate="yes" xml:space="preserve">
          <source>If an error occurred, this function is called after the &lt;code&gt;is_set_ok&lt;/code&gt; function is called. If &lt;code&gt;set&lt;/code&gt; is called for this object, &lt;code&gt;undo&lt;/code&gt; is not called.</source>
          <target state="translated">エラーが発生した場合、 &lt;code&gt;is_set_ok&lt;/code&gt; 関数が呼び出された後にこの関数が呼び出されます。場合 &lt;code&gt;set&lt;/code&gt; 、このオブジェクトのために呼ばれ、 &lt;code&gt;undo&lt;/code&gt; 呼び出されません。</target>
        </trans-unit>
        <trans-unit id="4ffdf980152bda82758e93fa5363e955a51a162e" translate="yes" xml:space="preserve">
          <source>If an error occurs during the installation, the system is rebooted using the old version of the release. If installation succeeds, the system is afterwards using the new version of the release, but if anything happens and the system is rebooted, it starts using the previous version again.</source>
          <target state="translated">インストール中にエラーが発生した場合、システムは古いバージョンのリリースを使用して再起動されます。インストールが成功した場合、システムはその後、新しいバージョンのリリースを使用しますが、何かが起きてシステムが再起動されると、再び前のバージョンを使用し始めます。</target>
        </trans-unit>
        <trans-unit id="e3b9183a591452f1c5ebde1eae8e316833b13a50" translate="yes" xml:space="preserve">
          <source>If an error occurs on the socket, the following message is delivered (unless &lt;code&gt;{active, false}&lt;/code&gt; is specified in the option list for the socket, in which case packets are retrieved by calling &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2&lt;/a&gt;&lt;/code&gt;):</source>
          <target state="translated">ソケットでエラーが発生すると、次のメッセージが配信されます（ソケットのオプションリストで &lt;code&gt;{active, false}&lt;/code&gt; が指定されている場合を除く）。この場合、パケットは &lt;code&gt;&lt;a href=&quot;#recv-2&quot;&gt;recv/2&lt;/a&gt;&lt;/code&gt; を呼び出して取得されます。）。</target>
        </trans-unit>
        <trans-unit id="ee097c045f410ae6ef1682702f02130e44879ffb" translate="yes" xml:space="preserve">
          <source>If an error occurs when accessing an open file with module &lt;code&gt;io&lt;/code&gt;, the process handling the file exits. The dead file process can hang if a process tries to access it later. This will be fixed in a future release.</source>
          <target state="translated">モジュール &lt;code&gt;io&lt;/code&gt; で開いているファイルにアクセスするときにエラーが発生した場合で処理するプロセスは終了します。プロセスが後でアクセスしようとすると、デッドファイルプロセスがハングする可能性があります。これは将来のリリースで修正される予定です。</target>
        </trans-unit>
        <trans-unit id="1e80b8f25b6627161bccd2087c0375b81e9072e8" translate="yes" xml:space="preserve">
          <source>If an error occurs, The function &lt;code&gt;f(undo, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; is called after the &lt;code&gt;is_set_ok&lt;/code&gt; function. If &lt;code&gt;set&lt;/code&gt; is called for this object, &lt;code&gt;undo&lt;/code&gt; is not called.</source>
          <target state="translated">エラーが発生した場合、 &lt;code&gt;is_set_ok&lt;/code&gt; 関数の後に関数 &lt;code&gt;f(undo, RowIndex, Cols [, ExtraArgs])&lt;/code&gt; が呼び出されます。場合 &lt;code&gt;set&lt;/code&gt; 、このオブジェクトのために呼ばれ、 &lt;code&gt;undo&lt;/code&gt; 呼び出されません。</target>
        </trans-unit>
        <trans-unit id="ae997c53a260dda31bdd5632662979a9e41a9ab0" translate="yes" xml:space="preserve">
          <source>If an error occurs, either in the &lt;code&gt;is_set_ok&lt;/code&gt; phase, or in the &lt;code&gt;set&lt;/code&gt; phase, all functions which were called with &lt;code&gt;is_set_ok&lt;/code&gt; but not &lt;code&gt;set&lt;/code&gt;, are called with &lt;code&gt;undo&lt;/code&gt;.</source>
          <target state="translated">エラーが発生した場合、いずれかで &lt;code&gt;is_set_ok&lt;/code&gt; 相、またはで &lt;code&gt;set&lt;/code&gt; 相、と呼ばれたすべての関数 &lt;code&gt;is_set_ok&lt;/code&gt; ではなく、 &lt;code&gt;set&lt;/code&gt; 、と呼ばれています &lt;code&gt;undo&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="276746b794853efb127f75c7e5ec07717c8d976f" translate="yes" xml:space="preserve">
          <source>If an error occurs, the applications started by the function are stopped to bring the set of running applications back to its initial state.</source>
          <target state="translated">エラーが発生した場合、この関数によって起動されたアプリケーションを停止して、実行中のアプリケーションのセットを初期状態に戻します。</target>
        </trans-unit>
        <trans-unit id="5c1a2d5fdbf25c48c2a0e3dd8bc47d65a9c912ff" translate="yes" xml:space="preserve">
          <source>If an error occurs, the process is exited with an error tuple &lt;code&gt;{error, Reason}&lt;/code&gt;.</source>
          <target state="translated">エラーが発生した場合、プロセスはエラータプル &lt;code&gt;{error, Reason}&lt;/code&gt; 終了しますます。</target>
        </trans-unit>
        <trans-unit id="198b396c8242aa281ca2808a3e1fe29feecf86f5" translate="yes" xml:space="preserve">
          <source>If an error occurs, the process is exited with an error tuple &lt;code&gt;{error, Reason}&lt;/code&gt;. The error tuple is not returned, as it cannot be distinguished from a key.</source>
          <target state="translated">エラーが発生した場合、プロセスはエラータプル &lt;code&gt;{error, Reason}&lt;/code&gt; 終了しますます。エラーとは区別できないため、エラータプルは返されません。</target>
        </trans-unit>
        <trans-unit id="9366b8a06735f2ef6c5bd64e2d4894f28c5e9fd9" translate="yes" xml:space="preserve">
          <source>If an error occurs, the stack trace becomes empty in this case.</source>
          <target state="translated">エラーが発生した場合、この場合、スタックトレースは空になります。</target>
        </trans-unit>
        <trans-unit id="5334f6f487ef5e94e1d3f8d91a903cad1c7ae4ca" translate="yes" xml:space="preserve">
          <source>If an error occurs, there is no output. Example:</source>
          <target state="translated">エラーが発生した場合、出力はありません。例としては、以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="eaf4f64d81bc2ecc63f1691d3a8ab14648012ce3" translate="yes" xml:space="preserve">
          <source>If an exception occurs during evaluation of &lt;code&gt;AfterBody&lt;/code&gt; itself, it is not caught. So if &lt;code&gt;AfterBody&lt;/code&gt; is evaluated after an exception in &lt;code&gt;Exprs&lt;/code&gt;, &lt;code&gt;Body&lt;/code&gt;, or &lt;code&gt;ExceptionBody&lt;/code&gt;, that exception is lost and masked by the exception in &lt;code&gt;AfterBody&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;AfterBody&lt;/code&gt; 自体の評価中に例外が発生しても、キャッチされません。したがって、 &lt;code&gt;Exprs&lt;/code&gt; 、 &lt;code&gt;Body&lt;/code&gt; 、または &lt;code&gt;ExceptionBody&lt;/code&gt; の例外の後で &lt;code&gt;AfterBody&lt;/code&gt; が評価されると、その例外は失われ、 &lt;code&gt;AfterBody&lt;/code&gt; の例外によってマスクされます。。</target>
        </trans-unit>
        <trans-unit id="73b3692cd35fbb24365c57783d388c12c52b16ba" translate="yes" xml:space="preserve">
          <source>If an exception occurs during evaluation of &lt;code&gt;ExceptionBody&lt;/code&gt;, it is not caught.</source>
          <target state="translated">&lt;code&gt;ExceptionBody&lt;/code&gt; の評価中に例外が発生した場合、それはキャッチされません。</target>
        </trans-unit>
        <trans-unit id="15e21c88415fba00ea3b007d2430e70dde7b38c0" translate="yes" xml:space="preserve">
          <source>If an exception occurs during evaluation of &lt;code&gt;Exprs&lt;/code&gt; but there is no matching &lt;code&gt;ExceptionPattern&lt;/code&gt; of the right &lt;code&gt;Class&lt;/code&gt; with a true guard sequence, the exception is passed on as if &lt;code&gt;Exprs&lt;/code&gt; had not been enclosed in a &lt;code&gt;try&lt;/code&gt; expression.</source>
          <target state="translated">&lt;code&gt;Exprs&lt;/code&gt; の評価中に例外が発生したが、正しい &lt;code&gt;Class&lt;/code&gt; 一致する &lt;code&gt;ExceptionPattern&lt;/code&gt; がtrueガードシーケンスにない場合、 &lt;code&gt;Exprs&lt;/code&gt; が &lt;code&gt;try&lt;/code&gt; で囲まれていないかのように例外が渡されます。式でます。</target>
        </trans-unit>
        <trans-unit id="8d16bf5cd6125b26b68df1e48e19c1d35055d07b" translate="yes" xml:space="preserve">
          <source>If an exit signal is received as above, the tuple &lt;code&gt;{From,Name}&lt;/code&gt; is deleted from the servers &lt;code&gt;User_List&lt;/code&gt; using the &lt;code&gt;server_logoff&lt;/code&gt; function. If the node on which the server runs goes down, an exit signal (automatically generated by the system) is sent to all of the client processes: &lt;code&gt;{'EXIT',MessengerPID,noconnection}&lt;/code&gt; causing all the client processes to terminate.</source>
          <target state="translated">上記のように終了信号を受信すると、 &lt;code&gt;server_logoff&lt;/code&gt; 関数を使用して、タプル &lt;code&gt;{From,Name}&lt;/code&gt; がサーバーの &lt;code&gt;User_List&lt;/code&gt; から削除されます。サーバーが実行されているノードがダウンすると、終了シグナル（システムによって自動的に生成されます）がすべてのクライアントプロセスに送信されます： &lt;code&gt;{'EXIT',MessengerPID,noconnection}&lt;/code&gt; により、すべてのクライアントプロセスが終了します。</target>
        </trans-unit>
        <trans-unit id="b7e0ea0cc95b3d589060e057229e831ff5a8ff4e" translate="yes" xml:space="preserve">
          <source>If an instrumentation function in the association file for a variable &lt;code&gt;myVar&lt;/code&gt; does not have a name when compiling an MIB, the compiler generates an entry.</source>
          <target state="translated">変数 &lt;code&gt;myVar&lt;/code&gt; の関連付けファイルにインストルメンテーション関数がある場合 MIBのコンパイル時に名前がない場合、コンパイラはエントリを生成します。</target>
        </trans-unit>
        <trans-unit id="b4e274b3831003e60f76d89037c8e16f5e3d04d9" translate="yes" xml:space="preserve">
          <source>If an integer time-out value is provided, a time-out occurs unless a request or a message is received within &lt;code&gt;Timeout&lt;/code&gt; milliseconds. A time-out is represented by the atom &lt;code&gt;timeout&lt;/code&gt;, which is to be handled by the &lt;code&gt;&lt;a href=&quot;#Module:handle_info-2&quot;&gt; Module:handle_info/2&lt;/a&gt;&lt;/code&gt; callback function. The atom &lt;code&gt;infinity&lt;/code&gt; can be used to wait indefinitely, this is the default value.</source>
          <target state="translated">整数のタイムアウト値が指定されている場合、 &lt;code&gt;Timeout&lt;/code&gt; ミリ秒以内に要求またはメッセージが受信されない限り、タイムアウトが発生します。 &lt;code&gt;timeout&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#Module:handle_info-2&quot;&gt; Module:handle_info/2&lt;/a&gt;&lt;/code&gt; コールバック関数によって処理されるアトムタイムアウトによって表されます。アトム &lt;code&gt;infinity&lt;/code&gt; は無期限に待機するために使用できます。これがデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="4901f204507135ee6a79147a0e0e1064225a4fc4" translate="yes" xml:space="preserve">
          <source>If an integer time-out value is provided, a time-out occurs unless a request or a message is received within &lt;code&gt;Timeout&lt;/code&gt; milliseconds. A time-out is represented by the atom &lt;code&gt;timeout&lt;/code&gt;, which is to be handled by the &lt;code&gt;&lt;a href=&quot;#Module:handle_info-2&quot;&gt;Module:handle_info/2&lt;/a&gt;&lt;/code&gt; callback function. The atom &lt;code&gt;infinity&lt;/code&gt; can be used to wait indefinitely, this is the default value.</source>
          <target state="translated">整数のタイムアウト値が指定されている場合、 &lt;code&gt;Timeout&lt;/code&gt; ミリ秒以内に要求またはメッセージが受信されない限り、タイムアウトが発生します。 &lt;code&gt;timeout&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#Module:handle_info-2&quot;&gt;Module:handle_info/2&lt;/a&gt;&lt;/code&gt; コールバック関数によって処理されるアトムタイムアウトによって表されます。アトム &lt;code&gt;infinity&lt;/code&gt; は無期限に待機するために使用できます。これはデフォルト値です。</target>
        </trans-unit>
        <trans-unit id="f34784d34b261e41d724f171d45d4c2db9bc38eb" translate="yes" xml:space="preserve">
          <source>If an option is set in more than one way, what happens?</source>
          <target state="translated">オプションが複数の方法で設定されている場合はどうなりますか?</target>
        </trans-unit>
        <trans-unit id="c317bf8995de9827a88e47cfa9f960f031966c21" translate="yes" xml:space="preserve">
          <source>If an owner attempts to open a log as owner once again, it is acknowledged with the return value &lt;code&gt;{ok, Log}&lt;/code&gt;, but the state of the disk log is not affected.</source>
          <target state="translated">所有者がログを再度所有者として開こうとすると、戻り値 &lt;code&gt;{ok, Log}&lt;/code&gt; で確認されますが、ディスクログの状態には影響しません。</target>
        </trans-unit>
        <trans-unit id="6d1c8f7e5679322dcbb64d8108251b9319c084c5" translate="yes" xml:space="preserve">
          <source>If an unrecognized type option &lt;code&gt;T&lt;/code&gt; is specified or &lt;code&gt;Type&lt;/code&gt; is not a proper list, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">認識されないタイプオプション &lt;code&gt;T&lt;/code&gt; が指定されているか、 &lt;code&gt;Type&lt;/code&gt; が適切なリストでない場合、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="5edd7e14ee514521a82d9d312927e864fd8b6b43" translate="yes" xml:space="preserve">
          <source>If an unsupported algorithm is in the &lt;code&gt;modify_algs_list()&lt;/code&gt;, it will be silently ignored</source>
          <target state="translated">サポートされていないアルゴリズムが &lt;code&gt;modify_algs_list()&lt;/code&gt; にある場合、それは暗黙的に無視されます</target>
        </trans-unit>
        <trans-unit id="ac90fe515c674df1b687955496c9be8fee6118f2" translate="yes" xml:space="preserve">
          <source>If an upgrade includes a change from an emulator earlier than OTP R15 to OTP R15 or later, the warning &lt;code&gt;pre_R15_emulator_upgrade&lt;/code&gt; is issued. For more information about this, see &lt;code&gt;Design Principles&lt;/code&gt; in &lt;strong&gt;System Documentation&lt;/strong&gt;.</source>
          <target state="translated">アップグレードにOTP R15より前のエミュレータからOTP R15以降への変更が含まれている場合、警告 &lt;code&gt;pre_R15_emulator_upgrade&lt;/code&gt; が発行されます。この詳細については、「&lt;strong&gt;システムドキュメント」の&lt;/strong&gt;「 &lt;code&gt;Design Principles&lt;/code&gt; を参照してください。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="c2bc5a0b1d5c34b06e7086cddd297167569f7462" translate="yes" xml:space="preserve">
          <source>If and how to compress the message. Examples are &lt;code&gt;none&lt;/code&gt;, that is, no compression and &lt;code&gt;zlib&lt;/code&gt;.</source>
          <target state="translated">メッセージを圧縮する場合とその方法。例は &lt;code&gt;none&lt;/code&gt; です。つまり、圧縮や &lt;code&gt;zlib&lt;/code&gt; はありません。</target>
        </trans-unit>
        <trans-unit id="3e7a133c6b3bee84f3bf4462f30e02bb30fa3e98" translate="yes" xml:space="preserve">
          <source>If and only if the Unicode translation modifier is used in the format string (that is, &lt;code&gt;~ts&lt;/code&gt; or &lt;code&gt;~tc&lt;/code&gt;), the resulting list can contain characters beyond the ISO Latin-1 character range (that is, numbers &amp;gt; 255). If so, the result is still an ordinary Erlang &lt;code&gt;string()&lt;/code&gt;, and can well be used in any context where Unicode data is allowed.</source>
          <target state="translated">Unicode変換修飾子がフォーマット文字列（つまり &lt;code&gt;~ts&lt;/code&gt; または &lt;code&gt;~tc&lt;/code&gt; ）で使用されている場合に限り、結果のリストにはISO Latin-1文字の範囲を超える文字（つまり、255より大きい数値）を含めることができます。その場合でも、結果は通常のErlang &lt;code&gt;string()&lt;/code&gt; であり、Unicodeデータが許可されているすべてのコンテキストで適切に使用できます。</target>
        </trans-unit>
        <trans-unit id="8c687f2de4701a7ffef4cc4c42ee7473077335c1" translate="yes" xml:space="preserve">
          <source>If and when you would like to start and manipulate &lt;code&gt;Mnesia&lt;/code&gt;, it is often easier to write the definitions and data into an ordinary text file. Initially, no tables and no data exist, or which tables are required. At the initial stages of prototyping, it is prudent to write all data into one file, process that file, and have the data in the file inserted into the database. &lt;code&gt;Mnesia&lt;/code&gt; can be initialized with data read from a text file. The following two functions can be used to work with text files.</source>
          <target state="translated">&lt;code&gt;Mnesia&lt;/code&gt; を起動して操作したい場合は、通常のテキストファイルに定義とデータを書き込む方が簡単です。最初は、テーブルもデータも存在せず、必要なテーブルもありません。プロトタイピングの初期段階では、すべてのデータを1つのファイルに書き込み、そのファイルを処理して、ファイル内のデータをデータベースに挿入するのが賢明です。 &lt;code&gt;Mnesia&lt;/code&gt; は、テキストファイルから読み取ったデータで初期化できます。次の2つの関数を使用して、テキストファイルを操作できます。</target>
        </trans-unit>
        <trans-unit id="80417b144fe2bc5c20d55da668bc56d430c25c36" translate="yes" xml:space="preserve">
          <source>If another implementation of any of these variables is needed, e.g. to store the persistent variables in a Mnesia database, an own implementation of the variables must be made. That MIB will be compiled and loaded instead of the default MIB. The new compiled MIB must have the same name as the original MIB (i.e. STANDARD-MIB or SNMPv2-MIB), and be located in the SNMP configuration directory (see &lt;code&gt;&lt;a href=&quot;snmp_config&quot;&gt;Configuration Files&lt;/a&gt;&lt;/code&gt;.)</source>
          <target state="translated">これらの変数の別の実装が必要な場合、たとえば永続変数をMnesiaデータベースに格納する場合は、変数の独自の実装を行う必要があります。そのMIBは、デフォルトのMIBの代わりにコンパイルおよびロードされます。新しくコンパイルされたMIBは、元のMIBと同じ名前（つまり、STANDARD-MIBまたはSNMPv2-MIB）で、SNMP構成ディレクトリにある必要があります（ &lt;code&gt;&lt;a href=&quot;snmp_config&quot;&gt;Configuration Files&lt;/a&gt;&lt;/code&gt; 参照）。</target>
        </trans-unit>
        <trans-unit id="a2491a0f8f402474246f9fb8f195513ec14b76dd" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;&lt;a href=&quot;ssh#type-preferred_algorithms_common_option&quot;&gt;preferred_algorithms&lt;/a&gt;&lt;/code&gt; is present, the one with the highest level is used, that is, the &lt;code&gt;Option&lt;/code&gt; list parameter has the highest priority. Then the &lt;code&gt;&lt;a href=&quot;ssh#type-modify_algorithms_common_option&quot;&gt;modify_algorithms&lt;/a&gt;&lt;/code&gt; on all levels in order starting with level 0 are applied.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh#type-preferred_algorithms_common_option&quot;&gt;preferred_algorithms&lt;/a&gt;&lt;/code&gt; が存在する場合は、レベルが最も高いものが使用されます。つまり、 &lt;code&gt;Option&lt;/code&gt; listパラメーターの優先度が最も高くなります。次に、レベル0から始まる順序ですべてのレベルの &lt;code&gt;&lt;a href=&quot;ssh#type-modify_algorithms_common_option&quot;&gt;modify_algorithms&lt;/a&gt;&lt;/code&gt; が適用されます。</target>
        </trans-unit>
        <trans-unit id="80ee411849a587dd3deef8de9d6f9689dcf9ebe0" translate="yes" xml:space="preserve">
          <source>If any &lt;code&gt;Dir&lt;/code&gt; is not a directory name</source>
          <target state="translated">&lt;code&gt;Dir&lt;/code&gt; がディレクトリ名でない場合</target>
        </trans-unit>
        <trans-unit id="7226b47ac607cfe4ee033cbac112e9d47878f35b" translate="yes" xml:space="preserve">
          <source>If any Erlang process &lt;code&gt;Pid&lt;/code&gt; in the system has allocated more than a certain amount of total system memory, the alarm &lt;code&gt;{process_memory_high_watermark, Pid}&lt;/code&gt; is set.</source>
          <target state="translated">システム内の任意のErlangプロセス &lt;code&gt;Pid&lt;/code&gt; が一定量以上の合計システムメモリを割り当てている場合、アラーム &lt;code&gt;{process_memory_high_watermark, Pid}&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="56bae9cc860914f3d89871e3baff9cb1dcabb640" translate="yes" xml:space="preserve">
          <source>If any HTTP header fields are added by the script, they must be in the first call to &lt;code&gt;deliver/2&lt;/code&gt;, and the data in the call must be a string. Calls after the headers are complete can contain binary data to reduce copying overhead. Do not assume anything about the data type of &lt;code&gt;SessionID&lt;/code&gt;. &lt;code&gt;SessionID&lt;/code&gt; must be the value given as input to the ESI callback function that you implemented.</source>
          <target state="translated">スクリプトによってHTTPヘッダーフィールドが追加される場合、それらのフィールドは、 &lt;code&gt;deliver/2&lt;/code&gt; への最初の呼び出しに含まれている必要があり、呼び出しのデータは文字列である必要があります。ヘッダーが完成した後の呼び出しには、コピーのオーバーヘッドを減らすためにバイナリデータを含めることができます。 &lt;code&gt;SessionID&lt;/code&gt; のデータ型については何も想定しないでください。 &lt;code&gt;SessionID&lt;/code&gt; は、実装したESIコールバック関数への入力として指定された値である必要があります。</target>
        </trans-unit>
        <trans-unit id="5adb78f4f1efbc66139e964187c434397d354611" translate="yes" xml:space="preserve">
          <source>If any argument has the wrong format.</source>
          <target state="translated">いずれかの引数の形式が間違っている場合</target>
        </trans-unit>
        <trans-unit id="b0b51878bfcad40bdb7c8e819fd02580c5711eff" translate="yes" xml:space="preserve">
          <source>If any child process start function fails or returns an error tuple or an erroneous value, the supervisor first terminates all already started child processes with reason &lt;code&gt;shutdown&lt;/code&gt; and then terminate itself and returns &lt;code&gt;{error, {shutdown, Reason}}&lt;/code&gt;.</source>
          <target state="translated">いずれかの子プロセスの開始関数が失敗するか、エラータプルまたは誤った値を返す場合、スーパーバイザは最初に理由 &lt;code&gt;shutdown&lt;/code&gt; すでに開始されているすべての子プロセスを終了し、次にそれ自体を終了して &lt;code&gt;{error, {shutdown, Reason}}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="ebd2be4d8ca214fa53676834f412514083348fde" translate="yes" xml:space="preserve">
          <source>If any functions (for example, Telnet or FTP) using &quot;required configuration data&quot; are to be called from the Erlang shell, configuration data must first be required with &lt;code&gt;&lt;a href=&quot;#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">「必要な構成データ」を使用する関数（TelnetやFTPなど）がErlangシェルから呼び出される場合、最初に &lt;code&gt;&lt;a href=&quot;#require-2&quot;&gt;ct:require/2&lt;/a&gt;&lt;/code&gt; で構成データが必要になります。</target>
        </trans-unit>
        <trans-unit id="784d2fd65e27ddf88a5b740f50b285e092cfde1d" translate="yes" xml:space="preserve">
          <source>If any functions using &quot;required configuration data&quot; (for example, functions &lt;code&gt;ct_telnet&lt;/code&gt; or &lt;code&gt;ct_ftp&lt;/code&gt;) are to be called from the Erlang shell, first require configuration data with &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt; ct:require/1,2&lt;/a&gt;&lt;/code&gt;. This is equivalent to a &lt;code&gt;require&lt;/code&gt; statement in the &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; or in the &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">「必要な構成データ」を使用する関数（たとえば、関数 &lt;code&gt;ct_telnet&lt;/code&gt; または &lt;code&gt;ct_ftp&lt;/code&gt; ）をErlangシェルから呼び出す場合は、最初に &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt; ct:require/1,2&lt;/a&gt;&lt;/code&gt; を使用して構成データを要求します。これは、 &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; &lt;code&gt;require&lt;/code&gt; ステートメントと同等です。</target>
        </trans-unit>
        <trans-unit id="e7f4af54f6decb45db597b9e963b792ae46e26cb" translate="yes" xml:space="preserve">
          <source>If any functions using &quot;required configuration data&quot; (for example, functions &lt;code&gt;ct_telnet&lt;/code&gt; or &lt;code&gt;ct_ftp&lt;/code&gt;) are to be called from the Erlang shell, first require configuration data with &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt;. This is equivalent to a &lt;code&gt;require&lt;/code&gt; statement in the &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; or in the &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">「必要な構成データ」を使用する関数（たとえば、関数 &lt;code&gt;ct_telnet&lt;/code&gt; または &lt;code&gt;ct_ftp&lt;/code&gt; ）がErlangシェルから呼び出される場合は、最初に &lt;code&gt;&lt;a href=&quot;ct#require-1&quot;&gt;ct:require/1,2&lt;/a&gt;&lt;/code&gt; で構成データを要求します。これは、 &lt;code&gt;&lt;a href=&quot;write_test_chapter#suite&quot;&gt;Test Suite Information Function&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;write_test_chapter#info_function&quot;&gt;Test Case Information Function&lt;/a&gt;&lt;/code&gt; &lt;code&gt;require&lt;/code&gt; ステートメントに相当します。</target>
        </trans-unit>
        <trans-unit id="50c6245e20c77d69a688a02f4c540697d905913f" translate="yes" xml:space="preserve">
          <source>If any of the arguments are invalid, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">引数のいずれかが無効な場合、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b3295c7085224a5c975d29da6224a233ad1e1a01" translate="yes" xml:space="preserve">
          <source>If any of the socket &lt;code&gt;&lt;a href=&quot;#type-option&quot;&gt;options&lt;/a&gt;&lt;/code&gt;&lt;code&gt;&lt;a href=&quot;inet#option-recvtos&quot;&gt;recvtos&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;inet#option-recvtclass&quot;&gt;recvtclass&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;inet#option-recvttl&quot;&gt;recvttl&lt;/a&gt;&lt;/code&gt; are active, the &lt;code&gt;RecvData&lt;/code&gt; tuple contains an &lt;code&gt;AncData&lt;/code&gt; field, otherwise it does not.</source>
          <target state="translated">ソケット &lt;code&gt;&lt;a href=&quot;#type-option&quot;&gt;options&lt;/a&gt;&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;inet#option-recvtos&quot;&gt;recvtos&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;inet#option-recvtclass&quot;&gt;recvtclass&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;inet#option-recvttl&quot;&gt;recvttl&lt;/a&gt;&lt;/code&gt; のいずれかがアクティブな場合、 &lt;code&gt;RecvData&lt;/code&gt; タプルには &lt;code&gt;AncData&lt;/code&gt; フィールドが含まれ、それ以外の場合は含まれません。</target>
        </trans-unit>
        <trans-unit id="692ed4da2eebf1c4f217366a6369dae2f3d80d78" translate="yes" xml:space="preserve">
          <source>If any of the tables does not exist or the Dets table is not open, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">テーブルが存在しないか、Detsテーブルが開いていない場合は、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="570be644a648abf241c9b8dd2548fe13d19dd232" translate="yes" xml:space="preserve">
          <source>If any of these errors occur when &lt;code&gt;+sbt&lt;/code&gt; has been passed, the runtime system prints an error message, and refuses to start. If any of these errors occur when &lt;code&gt;+stbt&lt;/code&gt; has been passed, the runtime system silently ignores the error, and start up using unbound schedulers.</source>
          <target state="translated">&lt;code&gt;+sbt&lt;/code&gt; が渡されたときにこれらのエラーのいずれかが発生した場合、ランタイムシステムはエラーメッセージを出力し、起動を拒否します。 &lt;code&gt;+stbt&lt;/code&gt; が渡されたときにこれらのエラーのいずれかが発生した場合、ランタイムシステムは警告なしでエラーを無視し、バインドされていないスケジューラを使用して起動します。</target>
        </trans-unit>
        <trans-unit id="eaa7aa976033707bd386e9983d12159b899132bc" translate="yes" xml:space="preserve">
          <source>If any one of these are true:</source>
          <target state="translated">どれか一つでも当てはまれば</target>
        </trans-unit>
        <trans-unit id="96761e0bc247ac872393ae1bb5eb9df6c975a841" translate="yes" xml:space="preserve">
          <source>If any position specified in &lt;code&gt;InsPos&lt;/code&gt; &amp;gt; size of the replacement binary, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;InsPos&lt;/code&gt; &amp;gt;置換バイナリのサイズで指定された位置がある場合、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="e3ad0f81da4a204750014fc62764a9cd40b26ee9" translate="yes" xml:space="preserve">
          <source>If argument &lt;code&gt;-daemon&lt;/code&gt; is not specified, &lt;code&gt;epmd&lt;/code&gt; runs as a normal program with the controlling terminal of the shell in which it is started. Normally, it is to be run as a daemon.</source>
          <target state="translated">引数 &lt;code&gt;-daemon&lt;/code&gt; が指定されていない場合、 &lt;code&gt;epmd&lt;/code&gt; は、それが開始されたシェルの制御端末を使用して通常のプログラムとして実行されます。通常、デーモンとして実行されます。</target>
        </trans-unit>
        <trans-unit id="dca95539f85ceb7c7fbb3f3a95acdd29f703f0c8" translate="yes" xml:space="preserve">
          <source>If argument &lt;code&gt;Archive&lt;/code&gt; is specified as a binary, the contents of the binary is assumed to be a zip archive, otherwise a filename.</source>
          <target state="translated">引数 &lt;code&gt;Archive&lt;/code&gt; がバイナリとして指定されている場合、バイナリの内容はzipアーカイブであると想定され、それ以外の場合はファイル名であると想定されます。</target>
        </trans-unit>
        <trans-unit id="4234f7b924c77e169e97fc3a3a0a5fff439177f4" translate="yes" xml:space="preserve">
          <source>If argument &lt;code&gt;MFA&lt;/code&gt; is the atom &lt;code&gt;on_load&lt;/code&gt;, the match specification and flag list are used on all modules that are newly loaded.</source>
          <target state="translated">引数 &lt;code&gt;MFA&lt;/code&gt; の場合がアトム &lt;code&gt;on_load&lt;/code&gt; の場合、新しく指定されたすべてのモジュールで一致指定とフラグリストが使用されます。</target>
        </trans-unit>
        <trans-unit id="5218de8ae45e50ce943a78eed5b9597b86f9e98a" translate="yes" xml:space="preserve">
          <source>If argument &lt;code&gt;Name&lt;/code&gt; is specified as &lt;code&gt;{binary,Binary}&lt;/code&gt;, the contents of the binary is assumed to be a tar archive.</source>
          <target state="translated">引数 &lt;code&gt;Name&lt;/code&gt; 場合が &lt;code&gt;{binary,Binary}&lt;/code&gt; として指定されている、バイナリの内容はtarアーカイブであると想定されます。</target>
        </trans-unit>
        <trans-unit id="2a16809777595118890feda8207e9529558557f0" translate="yes" xml:space="preserve">
          <source>If argument &lt;code&gt;Name&lt;/code&gt; is specified as &lt;code&gt;{file,Fd}&lt;/code&gt;, &lt;code&gt;Fd&lt;/code&gt; is assumed to be a file descriptor returned from function &lt;code&gt;file:open/2&lt;/code&gt;.</source>
          <target state="translated">引数 &lt;code&gt;Name&lt;/code&gt; が &lt;code&gt;{file,Fd}&lt;/code&gt; 、 &lt;code&gt;Fd&lt;/code&gt; として指定されている場合は関数 &lt;code&gt;file:open/2&lt;/code&gt; から返されたファイル記述子であると想定されます。</target>
        </trans-unit>
        <trans-unit id="8eca364f037b451eb12fd01d43884ccc2a4bd5d4" translate="yes" xml:space="preserve">
          <source>If argument &lt;code&gt;type&lt;/code&gt; is specified, all loaded reports of this type are displayed. If an integer argument is specified, the report with this reference number is displayed. If no argument is specified, all reports are displayed.</source>
          <target state="translated">引数の場合 &lt;code&gt;type&lt;/code&gt; を指定すると、このタイプのロードされたすべてのレポートが表示されます。整数の引数が指定されている場合、この参照番号のレポートが表示されます。引数を指定しない場合、すべてのレポートが表示されます。</target>
        </trans-unit>
        <trans-unit id="7d9ccdcf897aa5e543e57f74baa9344de03cc64a" translate="yes" xml:space="preserve">
          <source>If atom &lt;code&gt;start&lt;/code&gt; is specified as continuation, a disk log to read terms from is chosen. A local or distributed disk log on the current node is preferred to an individual distributed log on some other node.</source>
          <target state="translated">原子なら &lt;code&gt;start&lt;/code&gt; が継続として指定されている場合、用語を読み取るディスクログが選択されます。現在のノードのローカルまたは分散ディスクログは、他のノードの個々の分散ログよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="c7c06078653d000d4834d7b538bf165c25d0318c" translate="yes" xml:space="preserve">
          <source>If atomic grouping is used for the previous example, the matcher gives up immediately on failing to match &quot;foo&quot; the first time. The notation is a kind of special parenthesis, starting with &lt;code&gt;(?&amp;gt;&lt;/code&gt; as in the following example:</source>
          <target state="translated">前の例でアトミックグループ化が使用されている場合、マッチャーは最初に「foo」との一致に失敗するとすぐに諦めます。表記は一種の特別な括弧で始まり、 &lt;code&gt;(?&amp;gt;&lt;/code&gt; 、次の例のように、（？&amp;gt;です。</target>
        </trans-unit>
        <trans-unit id="6a9902259e3c589622f30bf01a90d5b7ffcb0cc1" translate="yes" xml:space="preserve">
          <source>If attribute &lt;code&gt;{local_content, true}&lt;/code&gt; is specified when you create the table, the table resides on the nodes where you specify the table to exist, but the write operations on the table are only performed on the local copy.</source>
          <target state="translated">if属性 &lt;code&gt;{local_content, true}&lt;/code&gt; テーブルの作成時に {local_content、true}が指定されている場合、テーブルは存在するテーブルを指定したノードに存在しますが、テーブルに対する書き込み操作はローカルコピーに対してのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="ebd8d24d8a76114c5ed2e0d95e53c4aab5d47e75" translate="yes" xml:space="preserve">
          <source>If authentication or encryption is used (SNMPv3 only), start the &lt;code&gt;crypto&lt;/code&gt; application.</source>
          <target state="translated">認証や暗号化が使用されている場合（SNMPv3はのみ）、開始 &lt;code&gt;crypto&lt;/code&gt; アプリケーションをます。</target>
        </trans-unit>
        <trans-unit id="b32ca34021019e0bb153a3955d0b724a94e48269" translate="yes" xml:space="preserve">
          <source>If authentication or encryption is used (SNMPv3 only), start the &lt;code&gt;crypto&lt;/code&gt; application. If this step is forgotten, the agent will not start, but report a &lt;code&gt;{config_error,{unsupported_crypto,_}}&lt;/code&gt; error.</source>
          <target state="translated">認証または暗号化が使用されている場合（SNMPv3のみ）、 &lt;code&gt;crypto&lt;/code&gt; アプリケーションを起動します。この手順を忘れると、エージェントは起動しませんが、 &lt;code&gt;{config_error,{unsupported_crypto,_}}&lt;/code&gt; エラーを報告します。</target>
        </trans-unit>
        <trans-unit id="a84fea11161ee2b8221ded08279d7f5da6e7793e" translate="yes" xml:space="preserve">
          <source>If auto-skipped test cases do not affect the exit status. The default behavior can be changed using start flag:</source>
          <target state="translated">自動スキップされたテストケースが終了ステータスに影響しない場合。デフォルトの動作は start フラグを使用して変更できます。</target>
        </trans-unit>
        <trans-unit id="a54c92e18be4a676b9c1c2d1749ff8f920d1f0f1" translate="yes" xml:space="preserve">
          <source>If automatic commit mode is turned on, each query will be considered as an individual transaction and will be automatically committed after it has been executed. If you want more than one query to be part of the same transaction the automatic commit mode should be turned off. Then you will have to call commit/3 explicitly to end a transaction.</source>
          <target state="translated">自動コミットモードがオンになっている場合、各クエリは個々のトランザクションとみなされ、実行された後に自動的にコミットされます。複数のクエリを同じトランザクションの一部としたい場合は、自動コミットモードをオフにしなければなりません。そうすると、トランザクションを終了させるために明示的に commit/3 を呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="fe29c622b52d7e166afb8b3558351d082aa789d3" translate="yes" xml:space="preserve">
          <source>If available in the dump, this is the total number of atoms in the atom table. If the size of the atom table is unavailable, the number of atoms visible in the dump is displayed.</source>
          <target state="translated">ダンプで利用可能な場合は、アトムテーブル内の原子の総数です。アトムテーブルのサイズが利用できない場合は、ダンプに表示されているアトムの数が表示されます。</target>
        </trans-unit>
        <trans-unit id="1614181d9da9b94aedfb64164481447f45935dca" translate="yes" xml:space="preserve">
          <source>If binaries that are no longer used are to be thrown away as soon as possible. (Set &lt;code&gt;Number&lt;/code&gt; to zero.)</source>
          <target state="translated">使用されなくなったバイナリをできるだけ早く破棄する場合。（ &lt;code&gt;Number&lt;/code&gt; をゼロに設定します。）</target>
        </trans-unit>
        <trans-unit id="88996aec0b15ab1d16ddf824ee8cf7cd32e2a161" translate="yes" xml:space="preserve">
          <source>If binding of schedulers is not supported.</source>
          <target state="translated">スケジューラのバインディングがサポートされていない場合。</target>
        </trans-unit>
        <trans-unit id="90d98aa8f41f34030c7bdee94cac730737033718" translate="yes" xml:space="preserve">
          <source>If both &lt;code&gt;Source&lt;/code&gt; and &lt;code&gt;Destination&lt;/code&gt; refer to filenames, the files are opened with &lt;code&gt;[read, binary]&lt;/code&gt; and &lt;code&gt;[write, binary]&lt;/code&gt; prepended to their mode lists, respectively, to optimize the copy.</source>
          <target state="translated">&lt;code&gt;Source&lt;/code&gt; と &lt;code&gt;Destination&lt;/code&gt; 両方がファイル名を参照している場合、ファイルは &lt;code&gt;[read, binary]&lt;/code&gt; 開かれ、 &lt;code&gt;[write, binary]&lt;/code&gt; 、コピーを最適化するために、それぞれモードリストの前に [write、binary]をます。</target>
        </trans-unit>
        <trans-unit id="2c3e1b70d92e6d563bb5e9d6c3cd26f59813a13f" translate="yes" xml:space="preserve">
          <source>If call count tracing is started while already running, the count is restarted from zero. To pause running counters, use &lt;code&gt;MatchSpec == pause&lt;/code&gt;. Paused and running counters can be restarted from zero with &lt;code&gt;MatchSpec == restart&lt;/code&gt;.</source>
          <target state="translated">すでに実行されているときにコールカウントトレースが開始されると、カウントはゼロから再開されます。実行中のカウンターを一時停止するには、 &lt;code&gt;MatchSpec == pause&lt;/code&gt; 使用します。 &lt;code&gt;MatchSpec == restart&lt;/code&gt; して、一時停止中および実行中のカウンターをゼロから再開できます。</target>
        </trans-unit>
        <trans-unit id="3ddb54b87a2d744f4668c0309f8b603f7cbd2a39" translate="yes" xml:space="preserve">
          <source>If call counters are still running while &lt;code&gt;analyse/0..2&lt;/code&gt; is executing, you might get an inconsistent result. This happens if the process executing &lt;code&gt;analyse/0..2&lt;/code&gt; gets scheduled out so some other process can increment the counters that are being analysed, Calling &lt;code&gt;pause()&lt;/code&gt; before analysing takes care of the problem.</source>
          <target state="translated">&lt;code&gt;analyse/0..2&lt;/code&gt; の実行中にコールカウンターがまだ実行されていると、一貫性のない結果になる可能性があります。これは、 &lt;code&gt;analyse/0..2&lt;/code&gt; を実行するプロセスがスケジュールされ、他のプロセスが分析中のカウンターをインクリメントできる場合に発生します。分析する前に &lt;code&gt;pause()&lt;/code&gt; を呼び出して問題を処理します。</target>
        </trans-unit>
        <trans-unit id="ad4325523bd9822e6e53cf121c4e7f2d415527ec" translate="yes" xml:space="preserve">
          <source>If call time tracing is started while already running, the count and time restart from zero. To pause running counters, use &lt;code&gt;MatchSpec == pause&lt;/code&gt;. Paused and running counters can be restarted from zero with &lt;code&gt;MatchSpec == restart&lt;/code&gt;.</source>
          <target state="translated">すでに実行中に呼び出し時間トレースが開始されると、カウントと時間はゼロから再開します。実行中のカウンターを一時停止するには、 &lt;code&gt;MatchSpec == pause&lt;/code&gt; 使用します。 &lt;code&gt;MatchSpec == restart&lt;/code&gt; を使用すると、一時停止および実行中のカウンターをゼロから再開できます。</target>
        </trans-unit>
        <trans-unit id="8441a1f4ebffc73cdc2dc005353bc55ee1751fa1" translate="yes" xml:space="preserve">
          <source>If called several times, only the last comment is printed. The test case return value &lt;code&gt;{comment,Comment}&lt;/code&gt; overwrites the string set by this function.</source>
          <target state="translated">複数回呼び出された場合、最後のコメントのみが出力されます。テストケースの戻り値 &lt;code&gt;{comment,Comment}&lt;/code&gt; は、この関数によって設定された文字列を上書きします。</target>
        </trans-unit>
        <trans-unit id="ada9d2aefe42bda67c41d0801c3618aeb38428b7" translate="yes" xml:space="preserve">
          <source>If called with an extension unknown to the user application, return value &lt;code&gt;{unknown, UserState}&lt;/code&gt; is to be used.</source>
          <target state="translated">ユーザーアプリケーションに不明な拡張子で呼び出された場合、戻り値 &lt;code&gt;{unknown, UserState}&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="610648cf712693e340f20ab9aac63c6b94c019dc" translate="yes" xml:space="preserve">
          <source>If calling &lt;code&gt;FormatFun&lt;/code&gt; with an argument including &lt;code&gt;NElements&lt;/code&gt; and &lt;code&gt;DepthFun&lt;/code&gt; fails, &lt;code&gt;FormatFun&lt;/code&gt; is called once again with an argument excluding &lt;code&gt;NElements&lt;/code&gt; and &lt;code&gt;DepthFun&lt;/code&gt; (&lt;code&gt;{lookup,&amp;nbsp;Position,&amp;nbsp;Keys}&lt;/code&gt; or &lt;code&gt;all&lt;/code&gt;).</source>
          <target state="translated">呼び出した場合 &lt;code&gt;FormatFun&lt;/code&gt; 含む引数を指定した &lt;code&gt;NElements&lt;/code&gt; と &lt;code&gt;DepthFun&lt;/code&gt; が失敗し、 &lt;code&gt;FormatFun&lt;/code&gt; は引数を除くと、再び呼ばれ &lt;code&gt;NElements&lt;/code&gt; と &lt;code&gt;DepthFun&lt;/code&gt; （ &lt;code&gt;{lookup,&amp;nbsp;Position,&amp;nbsp;Keys}&lt;/code&gt; または &lt;code&gt;all&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="77f72ab6f85f6c9d8cbda669ebba998dc661fc5e" translate="yes" xml:space="preserve">
          <source>If caseful matching is in force at the time of the back reference, the case of letters is relevant. For example, the following matches &quot;rah rah&quot; and &quot;RAH RAH&quot;, but not &quot;RAH rah&quot;, although the original capturing subpattern is matched caselessly:</source>
          <target state="translated">バックリファレンスの時点でケースフルマッチングが行われている場合は、文字のケースが関係している。例えば、以下の例では、元の捕捉サブパターンはケースレスでマッチングされるが、&quot;rah rah rah &quot;と &quot;rah rah &quot;はマッチングされるが、&quot;rah rah &quot;はマッチングされない。</target>
        </trans-unit>
        <trans-unit id="e13d741efb191e9fa7c1727072c2302000c01f26" translate="yes" xml:space="preserve">
          <source>If certain port-specific data must be accessed from other threads than those calling the driver callbacks, a port data lock can be used to synchronize the operations on the data. Currently, the only port-specific data that the emulator associates with the port data lock is the driver queue.</source>
          <target state="translated">特定のポート固有のデータにドライバコールバックを呼び出すスレッド以外からアクセスする必要がある場合、ポートデータロックを使用してデータの操作を同期させることができます。現在、エミュレータがポートデータロックと関連付けるポート固有のデータは、ドライバキューのみです。</target>
        </trans-unit>
        <trans-unit id="cd4b4afe54513271fef096e7c304b9cfa2e00765" translate="yes" xml:space="preserve">
          <source>If command line option +MMscrpm (Reserve Physical Memory) is set to false, only virtual space is allocated for the super carrier from start. The super carrier then acts as an &quot;alternative mmap&quot; implementation without changing the consumption of physical memory pages. Physical pages will be reserved on demand when an allocation is done from the super carrier and be unreserved when the memory is released back to the super carrier.</source>
          <target state="translated">コマンドラインオプション +MMscrpm (Reserve Physical Memory)が false に設定されている場合、スーパーキャリアには最初から仮想領域のみが割り当てられます。その後、スーパーキャリアは、物理メモリページの消費量を変更することなく、&quot;代替mmap &quot;実装として動作します。物理ページは、スーパーキャリアから割り当てが行われたときにオンデマンドで予約され、メモリがスーパーキャリアに戻って解放されたときには予約されていない状態になります。</target>
        </trans-unit>
        <trans-unit id="f54d5e9e6d2fd31d6eabb83cccb9c261c4f828a5" translate="yes" xml:space="preserve">
          <source>If compilation fails for one or more suites, the compilation errors are printed to tty and the operator is asked if the test run is to proceed without the missing suites, or be aborted. If the operator chooses to proceed, the tests having missing suites are noted in the HTML log. If &lt;code&gt;Common Test&lt;/code&gt; is unable to prompt the user after compilation failure (if &lt;code&gt;Common Test&lt;/code&gt; does not control &lt;code&gt;stdin&lt;/code&gt;), the test run proceeds automatically without the missing suites. This behavior can however be modified with the &lt;code&gt;ct_run&lt;/code&gt; flag &lt;code&gt;-abort_if_missing_suites&lt;/code&gt;, or the &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; option &lt;code&gt;{abort_if_missing_suites,TrueOrFalse}&lt;/code&gt;. If &lt;code&gt;abort_if_missing_suites&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the test run stops immediately if some suites fail to compile.</source>
          <target state="translated">1つまたは複数のスイートのコンパイルが失敗した場合、コンパイルエラーがttyに出力され、オペレーターは、欠落したスイートなしでテスト実行を続行するか、中止するかを尋ねられます。オペレーターが続行することを選択した場合、欠落したスイートがあるテストはHTMLログに記録されます。場合は &lt;code&gt;Common Test&lt;/code&gt; （場合、コンパイルに失敗した後にユーザにプロンプトを表示することができない &lt;code&gt;Common Test&lt;/code&gt; 制御しない &lt;code&gt;stdin&lt;/code&gt; ）、テストの実行は、行方不明のスイートなしで自動的に進行します。ただし、この動作は &lt;code&gt;ct_run&lt;/code&gt; フラグ &lt;code&gt;-abort_if_missing_suites&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;ct#run_test-1&quot;&gt;ct:run_test/1&lt;/a&gt;&lt;/code&gt; オプション &lt;code&gt;{abort_if_missing_suites,TrueOrFalse}&lt;/code&gt; できます。 &lt;code&gt;abort_if_missing_suites&lt;/code&gt; の場合が &lt;code&gt;true&lt;/code&gt; 設定されている場合、一部のスイートがコンパイルに失敗した場合、テストの実行はすぐに停止します。</target>
        </trans-unit>
        <trans-unit id="ddef6fb238c70a7447c7b61165fd491bf02611b6" translate="yes" xml:space="preserve">
          <source>If compiling a NIF for static inclusion through &lt;code&gt;--enable-static-nifs&lt;/code&gt;, you must define &lt;code&gt;STATIC_ERLANG_NIF&lt;/code&gt; before the &lt;code&gt;ERL_NIF_INIT&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;--enable-static-nifs&lt;/code&gt; &lt;code&gt;STATIC_ERLANG_NIF&lt;/code&gt; 使用して静的包含のためにNIFをコンパイルする場合は、ERL_NIF_INITの前に &lt;code&gt;ERL_NIF_INIT&lt;/code&gt; 定義する必要があります。宣言の。</target>
        </trans-unit>
        <trans-unit id="9cca373adf442d693560ee904763df365fc27eee" translate="yes" xml:space="preserve">
          <source>If compiling a driver for static inclusion through &lt;code&gt;--enable-static-drivers&lt;/code&gt;, you must define &lt;code&gt;STATIC_ERLANG_DRIVER&lt;/code&gt; before the &lt;code&gt;DRIVER_INIT&lt;/code&gt; declaration.</source>
          <target state="translated">&lt;code&gt;--enable-static-drivers&lt;/code&gt; を使用して静的包含用のドライバーをコンパイルする場合は、 &lt;code&gt;STATIC_ERLANG_DRIVER&lt;/code&gt; 前に &lt;code&gt;DRIVER_INIT&lt;/code&gt; 定義する必要があります宣言。</target>
        </trans-unit>
        <trans-unit id="f7c1f0b07bbf198171947df86c5f80f0e8b91bec" translate="yes" xml:space="preserve">
          <source>If configuration elements (key-value tuples) are to be returned as result instead of values, use option &lt;code&gt;element&lt;/code&gt;. The returned elements are then on the form &lt;code&gt;{Required,Value}&lt;/code&gt;.</source>
          <target state="translated">値の代わりに構成要素（Key-Valueタプル）が結果として返される場合は、option &lt;code&gt;element&lt;/code&gt; を使用します。返される要素は、 &lt;code&gt;{Required,Value}&lt;/code&gt; 形式になります。ます。</target>
        </trans-unit>
        <trans-unit id="9e21b434342c495e7cd41bb3f46d93a5eba516c9" translate="yes" xml:space="preserve">
          <source>If containing a &quot;supported_groups&quot; extension, it MUST also contain a &quot;key_share&quot; extension, and vice versa. An empty KeyShare.client_shares vector is permitted.</source>
          <target state="translated">supported_groups」拡張子を含む場合は、「key_share」拡張子も含まなければならない[MUST]。空の KeyShare.client_shares ベクトルが許される。</target>
        </trans-unit>
        <trans-unit id="f827f0de33d203f9e3d3e27b4a69d02e3a754313" translate="yes" xml:space="preserve">
          <source>If cross cover analysis is performed, and there are accumulated coverage results for the current test, the link &quot;Coverdata collected over all tests&quot; takes you to these results.</source>
          <target state="translated">クロスカバー分析が実行され、現在のテストの累積カバレッジ結果がある場合、リンク「Coverdata collected over all tests」をクリックすると、これらの結果が表示されます。</target>
        </trans-unit>
        <trans-unit id="5d96e5091e8d9707ed005b18c015f0afc06954f5" translate="yes" xml:space="preserve">
          <source>If data is sent to an &lt;code&gt;io_device()&lt;/code&gt; in a format that cannot be converted to the specified encoding, or if data is read by a function that returns data in a format that cannot cope with the character range of the data, an error occurs and the file is closed.</source>
          <target state="translated">指定されたエンコーディングに変換できない形式で &lt;code&gt;io_device()&lt;/code&gt; にデータが送信された場合、またはデータの文字範囲に対応できない形式でデータを返す関数によってデータが読み取られた場合、エラーが発生し、ファイルは閉じています。</target>
        </trans-unit>
        <trans-unit id="432e1b16af8182ee4323fbba32056a19e755694b" translate="yes" xml:space="preserve">
          <source>If defined, disables input and output flow control for the pty opend by &lt;code&gt;run_erl&lt;/code&gt;. Useful if you want to remove any risk of accidentally blocking the flow control by using Ctrl-S (instead of Ctrl-D to detach), which can result in blocking of the entire Beam process, and in the case of running heart as supervisor even the heart process becomes blocked when writing log message to terminal, leaving the heart process unable to do its work.</source>
          <target state="translated">定義されている場合、run_erlによって &lt;code&gt;run_erl&lt;/code&gt; れたptyの入出力フロー制御を無効にします。ビームプロセス全体がブロックされる可能性があり、スーパーバイザーとして心臓を実行している場合でも、Ctrl-Dを使用してフロー制御を誤ってブロックするリスクを取り除きたい場合に役立ちます（切り離すにはCtrl-Dではありません）。端末にログメッセージを書き込むと、ハートプロセスがブロックされ、ハートプロセスが作業を実行できなくなります。</target>
        </trans-unit>
        <trans-unit id="51ec3e002de949fe36acc63a13c907879ad3bcd0" translate="yes" xml:space="preserve">
          <source>If differentiation between empty matches and non-existing subpatterns is necessary, use the &lt;code&gt;type&lt;/code&gt;&lt;code&gt;index&lt;/code&gt; and do the conversion to the final type in Erlang code.</source>
          <target state="translated">空の一致と存在しないサブパターンを区別する必要がある場合は、 &lt;code&gt;type&lt;/code&gt; &lt;code&gt;index&lt;/code&gt; を使用して、Erlangコードで最終的な型に変換します。</target>
        </trans-unit>
        <trans-unit id="49295520e0b6d8a184569401922957d15009d327" translate="yes" xml:space="preserve">
          <source>If doing encryption, the &lt;code&gt;final_fun()&lt;/code&gt; in the &lt;code&gt;&lt;a href=&quot;#type-tar_crypto_spec&quot;&gt;tar_crypto_spec&lt;/a&gt;&lt;/code&gt; is applied to the last piece of data. The &lt;code&gt;final_fun()&lt;/code&gt; is responsible for padding (if needed) and encryption of that last piece.</source>
          <target state="translated">暗号化を行う場合は、 &lt;code&gt;final_fun()&lt;/code&gt; 内 &lt;code&gt;&lt;a href=&quot;#type-tar_crypto_spec&quot;&gt;tar_crypto_spec&lt;/a&gt;&lt;/code&gt; は、データの最後の部分に適用されます。 &lt;code&gt;final_fun()&lt;/code&gt; はその最後のピースのパディング（必要な場合）と暗号化を担当しています。</target>
        </trans-unit>
        <trans-unit id="e301f5120b552d4bf6f7613573c8dff6a6c32f8f" translate="yes" xml:space="preserve">
          <source>If empty, the scheduler was doing some work. If not empty, the scheduler is either in some state of sleep, or suspended. This entry is only present in an SMP-enabled emulator.</source>
          <target state="translated">空の場合、スケジューラは何らかの作業を行っています。空でなければ、スケジューラは何らかのスリープ状態にあるか、サスペンド状態にある。このエントリはSMP対応のエミュレータでのみ存在します。</target>
        </trans-unit>
        <trans-unit id="1afa77778077164a71f88c72fb4b32ad3297d31d" translate="yes" xml:space="preserve">
          <source>If enabled and available, shows the process SASL log entries.</source>
          <target state="translated">有効で利用可能な場合、プロセスSASLログエントリを表示します。</target>
        </trans-unit>
        <trans-unit id="7f6edf3b58ff2519bb720cd88ea08b2b0a6a0946" translate="yes" xml:space="preserve">
          <source>If enabled, a signal will be sent to each scheduler to check its responsiveness. The system check occurs before any heartbeat sent to the port program. If any scheduler is not responsive enough the heart program will not receive its heartbeat and thus eventually terminate the node.</source>
          <target state="translated">有効にすると、各スケジューラの応答性をチェックするための信号が各スケジューラに送信されます。システムチェックは、ポートプログラムに送られるハートビートの前に行われます。スケジューラが十分に反応しない場合、ハートプログラムはハートビートを受信しないため、最終的にはノードを終了させます。</target>
        </trans-unit>
        <trans-unit id="148b1ea2e5a9c15263dc8ca4149113489de1e307" translate="yes" xml:space="preserve">
          <source>If everything succeeds, the callback function can add possible default values or internal state values to the configuration, and return the adjusted map in &lt;code&gt;{ok,Config2}&lt;/code&gt;.</source>
          <target state="translated">すべてが成功した場合、コールバック関数は可能なデフォルト値または内部状態値を構成に追加し、調整されたマップを &lt;code&gt;{ok,Config2}&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="df38b6fefb42b5ad05d2e66a0fe9a0579def5bda" translate="yes" xml:space="preserve">
          <source>If everything succeeds, the callback function must return a possibly adjusted configuration in &lt;code&gt;{ok,Config3}&lt;/code&gt;.</source>
          <target state="translated">すべてが成功した場合、コールバック関数は、調整された可能性のある構成を &lt;code&gt;{ok,Config3}&lt;/code&gt; で返す必要があります。</target>
        </trans-unit>
        <trans-unit id="2fa1005e80fa8c58a4740b29710f28976ae1bc25" translate="yes" xml:space="preserve">
          <source>If everything succeeds, the callback function must return a possibly adjusted configuration in &lt;code&gt;{ok,Config}&lt;/code&gt;.</source>
          <target state="translated">すべてが成功した場合、コールバック関数は &lt;code&gt;{ok,Config}&lt;/code&gt; で調整された可能性のある構成を返す必要があります。</target>
        </trans-unit>
        <trans-unit id="364e140fe39154a26dff03af44ca4298c8c2ac50" translate="yes" xml:space="preserve">
          <source>If flag &lt;code&gt;-loader&lt;/code&gt; is omitted, it defaults to &lt;code&gt;efile&lt;/code&gt;.</source>
          <target state="translated">flag &lt;code&gt;-loader&lt;/code&gt; を省略すると、デフォルトで &lt;code&gt;efile&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="1454b961b40da8803e24e93858c630e5ff3bb457" translate="yes" xml:space="preserve">
          <source>If flag &lt;code&gt;timestamp&lt;/code&gt;, &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt;, or &lt;code&gt;monotonic_timestamp&lt;/code&gt; is specified, the first tuple element is &lt;code&gt;trace_ts&lt;/code&gt; instead, and the time stamp is added as an extra element last in the message tuple. If multiple time stamp flags are passed, &lt;code&gt;timestamp&lt;/code&gt; has precedence over &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt;, which in turn has precedence over &lt;code&gt;monotonic_timestamp&lt;/code&gt;. All time stamp flags are remembered, so if two are passed and the one with highest precedence later is disabled, the other one becomes active.</source>
          <target state="translated">フラグ &lt;code&gt;timestamp&lt;/code&gt; 、 &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt; 、または &lt;code&gt;monotonic_timestamp&lt;/code&gt; が指定されている場合、最初のタプル要素は &lt;code&gt;trace_ts&lt;/code&gt; であり、タイムスタンプはメッセージタプルの最後の追加要素として追加されます。複数のタイムスタンプフラグが渡された場合、 &lt;code&gt;timestamp&lt;/code&gt; は &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt; よりも優先され、これは &lt;code&gt;monotonic_timestamp&lt;/code&gt; よりも優先されます。すべてのタイムスタンプフラグが記憶されるため、2つが渡され、後で優先順位が最も高いフラグが無効になっている場合、もう一方がアクティブになります。</target>
        </trans-unit>
        <trans-unit id="7e5b82748f9af0c18d76e825667a1416cb4f5744" translate="yes" xml:space="preserve">
          <source>If flags &lt;code&gt;-pa&lt;/code&gt; or &lt;code&gt;-pz&lt;/code&gt; are specified in the &lt;code&gt;Common Test&lt;/code&gt; group of options (preceding &lt;code&gt;-erl_args&lt;/code&gt;), relative directories are converted to absolute and reinserted into the code path by &lt;code&gt;Common Test&lt;/code&gt;. This is to avoid problems loading user modules when &lt;code&gt;Common Test&lt;/code&gt; changes working directory during test runs. However, &lt;code&gt;Common Test&lt;/code&gt; ignores flags &lt;code&gt;-pa&lt;/code&gt; and &lt;code&gt;-pz&lt;/code&gt; following &lt;code&gt;-erl_args&lt;/code&gt; on the command line. These directories are added to the code path normally (that is, on specified form).</source>
          <target state="translated">フラグ &lt;code&gt;-pa&lt;/code&gt; または &lt;code&gt;-pz&lt;/code&gt; が &lt;code&gt;Common Test&lt;/code&gt; グループのオプション（ &lt;code&gt;-erl_args&lt;/code&gt; の前に）で指定されている場合、相対ディレクトリは絶対パスに変換され、 &lt;code&gt;Common Test&lt;/code&gt; によってコードパスに再挿入されます。これは、テストの実行中に &lt;code&gt;Common Test&lt;/code&gt; が作業ディレクトリを変更したときにユーザーモジュールをロードする際の問題を回避するためです。ただし、 &lt;code&gt;Common Test&lt;/code&gt; は、コマンド行で &lt;code&gt;-erl_args&lt;/code&gt; に続くフラグ &lt;code&gt;-pa&lt;/code&gt; および &lt;code&gt;-pz&lt;/code&gt; を無視します。これらのディレクトリは、通常（つまり、指定された形式で）コードパスに追加されます。</target>
        </trans-unit>
        <trans-unit id="1e378e106e4077ae24d5e6f29ec376f6a4bd3b26" translate="yes" xml:space="preserve">
          <source>If for some reason megaco is unable to deliver the reply, the reason for this will be passed to the user via a call to the callback function &lt;code&gt;&lt;a href=&quot;#trans_ack&quot;&gt;handle_trans_ack&lt;/a&gt;&lt;/code&gt;, unless &lt;code&gt;ack_action() = discard_ack&lt;/code&gt;.</source>
          <target state="translated">何らかの理由でMEGACOが回答をお届けできない場合、その理由は、コールバック関数への呼び出しを介してユーザに渡される &lt;code&gt;&lt;a href=&quot;#trans_ack&quot;&gt;handle_trans_ack&lt;/a&gt;&lt;/code&gt; ない限り、 &lt;code&gt;ack_action() = discard_ack&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="17a3144d24e90d3f080c638b20288fd31695b9f8" translate="yes" xml:space="preserve">
          <source>If found, this file is automatically included when a release package is created.</source>
          <target state="translated">見つかった場合、このファイルはリリースパッケージの作成時に自動的にインクルードされます。</target>
        </trans-unit>
        <trans-unit id="88a8d1bcc6dc202674f35ee136d67e69ecbf0dcd" translate="yes" xml:space="preserve">
          <source>If function &lt;code&gt;start_link/3,4,5&lt;/code&gt; is used and the process crashes before it has called &lt;code&gt;init_ack/1,2&lt;/code&gt;, &lt;code&gt;{error, Reason}&lt;/code&gt; is returned if the calling process traps exits.</source>
          <target state="translated">関数 &lt;code&gt;start_link/3,4,5&lt;/code&gt; が使用され、プロセスが &lt;code&gt;init_ack/1,2&lt;/code&gt; を呼び出す前にクラッシュした場合、呼び出しプロセスが終了すると、 &lt;code&gt;{error, Reason}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="fc69364c0ae557a1dbe6b4d9aa1b146e1216ffbd" translate="yes" xml:space="preserve">
          <source>If function calls are traced, trace patterns must be added by clicking button &lt;strong&gt;Add Trace Pattern&lt;/strong&gt;. Select a module, function(s), and a match specification. If no functions are selected, all functions in the module are traced.</source>
          <target state="translated">関数呼び出しをトレースする場合は、[ &lt;strong&gt;トレースパターン&lt;/strong&gt;を&lt;strong&gt;追加&lt;/strong&gt; ]ボタン&lt;strong&gt;を&lt;/strong&gt;クリックして、トレースパターンを追加する必要があります。モジュール、関数、および一致仕様を選択します。関数が選択されていない場合、モジュール内のすべての関数がトレースされます。</target>
        </trans-unit>
        <trans-unit id="1f07e18dbc5f57c6c6717a768b0ed4eaba425e5a" translate="yes" xml:space="preserve">
          <source>If given, sets a minimum of bytes per second value for connections.</source>
          <target state="translated">指定された場合、接続の最小バイト/秒値を設定します。</target>
        </trans-unit>
        <trans-unit id="b172d1229983e5a1a9ff5fbcf190541819d75da7" translate="yes" xml:space="preserve">
          <source>If header file &lt;code&gt;ms_transform.hrl&lt;/code&gt; is not included, the fun is not translated, which can result in a &lt;strong&gt;runtime error&lt;/strong&gt; (depending on whether the fun is valid in a pure Erlang context).</source>
          <target state="translated">ヘッダーファイル &lt;code&gt;ms_transform.hrl&lt;/code&gt; が含まれていない場合、funは変換されないため、&lt;strong&gt;ランタイムエラーが発生&lt;/strong&gt;する可能性があり&lt;strong&gt;ます&lt;/strong&gt;（funが純粋なErlangコンテキストで有効かどうかによって異なります）。</target>
        </trans-unit>
        <trans-unit id="16995098726e7577905f8e4783d07b32252efedf" translate="yes" xml:space="preserve">
          <source>If heart should &lt;strong&gt;not&lt;/strong&gt; kill the Erlang runtime system, this can be indicated using the environment variable &lt;code&gt;HEART_NO_KILL=TRUE&lt;/code&gt;. This can be useful if the command executed by heart takes care of this, for example as part of a specific cleanup sequence. If unset, or not set to &lt;code&gt;TRUE&lt;/code&gt;, the default behaviour will be to kill as described above.</source>
          <target state="translated">心がなければならない場合&lt;strong&gt;ではない&lt;/strong&gt;のErlangランタイムシステムを殺す、これは環境変数を使用して示すことができる &lt;code&gt;HEART_NO_KILL=TRUE&lt;/code&gt; を。これは、たとえば特定のクリーンアップシーケンスの一部として、ハートによって実行されるコマンドがこれを処理する場合に役立ちます。設定されていない場合、または &lt;code&gt;TRUE&lt;/code&gt; に設定されていない場合、デフォルトの動作は上記のようにkillすることです。</target>
        </trans-unit>
        <trans-unit id="b95d064b6fe476b33228869a58d35631e292ffa4" translate="yes" xml:space="preserve">
          <source>If instead &lt;code&gt;m1&lt;/code&gt; and &lt;code&gt;ch3&lt;/code&gt; belong to the same application, the &lt;code&gt;.appup&lt;/code&gt; file can look as follows:</source>
          <target state="translated">代わりに &lt;code&gt;m1&lt;/code&gt; と &lt;code&gt;ch3&lt;/code&gt; が同じアプリケーションに属している場合、 &lt;code&gt;.appup&lt;/code&gt; ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="dc6d61b4492f1c7e6142a54cbe978ede62016351" translate="yes" xml:space="preserve">
          <source>If instead the cover specification for &lt;code&gt;s2&lt;/code&gt; is like the following:</source>
          <target state="translated">代わりに、 &lt;code&gt;s2&lt;/code&gt; のカバー仕様は次のようになります。</target>
        </trans-unit>
        <trans-unit id="0a7e93ff7cf25c1c8178af08584a9eabcf3e9a0a" translate="yes" xml:space="preserve">
          <source>If instead the following pattern is used, it matches &quot;sense and responsibility&quot; and the other two strings:</source>
          <target state="translated">代わりに以下のパターンを使用すると、「センスと責任」と他の2つの文字列にマッチします。</target>
        </trans-unit>
        <trans-unit id="2cc8cc207fcbebe26bafa392de36c0b0727d0b02" translate="yes" xml:space="preserve">
          <source>If it is determined during execution of &lt;code&gt;end_per_testcase&lt;/code&gt; that the status of a successful test case is to be changed to failed, &lt;code&gt;end_per_testcase&lt;/code&gt; can return the tuple &lt;code&gt;{fail,Reason}&lt;/code&gt; (where &lt;code&gt;Reason&lt;/code&gt; describes why the test case fails).</source>
          <target state="translated">&lt;code&gt;end_per_testcase&lt;/code&gt; の実行中に、成功したテストケースのステータスを失敗に変更することが決定された場合、 &lt;code&gt;end_per_testcase&lt;/code&gt; はタプル &lt;code&gt;{fail,Reason}&lt;/code&gt; 返すことができます（ &lt;code&gt;Reason&lt;/code&gt; は、テストケースが失敗した理由を示します）。</target>
        </trans-unit>
        <trans-unit id="7ff18467b22f0114a8805a4726fb2dcc0392ce69" translate="yes" xml:space="preserve">
          <source>If it is important to get similar indentation and newlines as in the original document you have to add #xmlText{} records with space and newline values in appropriate places. It may also be necessary to keep the original prolog where the DTD is referenced. If so, it is possible to pass a RootAttribute &lt;code&gt;{prolog,Value}&lt;/code&gt; to &lt;code&gt;export_simple/3&lt;/code&gt;. The following example code fixes those changes in the previous example:</source>
          <target state="translated">元のドキュメントと同様のインデントと改行を取得することが重要な場合は、適切な場所にスペースと改行の値を含む#xmlText {}レコードを追加する必要があります。また、DTDが参照されている元のプロローグを保持する必要がある場合もあります。その場合、RootAttribute &lt;code&gt;{prolog,Value}&lt;/code&gt; を &lt;code&gt;export_simple/3&lt;/code&gt; に渡すことができます。次のコード例は、前の例の変更を修正しています。</target>
        </trans-unit>
        <trans-unit id="0edefb6e50405687abd870a868c1bcff5bf5189f" translate="yes" xml:space="preserve">
          <source>If it is important to minimize the time that an application is inactive while changing code, use &lt;code&gt;&lt;a href=&quot;#prepare_loading-1&quot;&gt;prepare_loading/1&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#finish_loading-1&quot;&gt;finish_loading/1&lt;/a&gt;&lt;/code&gt; instead of &lt;code&gt;atomic_load/1&lt;/code&gt;. Here is an example:</source>
          <target state="translated">コード、利用変えながらアプリケーションが非アクティブであることを時間最小限に抑えることが重要である場合 &lt;code&gt;&lt;a href=&quot;#prepare_loading-1&quot;&gt;prepare_loading/1&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#finish_loading-1&quot;&gt;finish_loading/1&lt;/a&gt;&lt;/code&gt; の代わりに、 &lt;code&gt;atomic_load/1&lt;/code&gt; 。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="04b581ca359dbb5b4e61555833c3a8149c91dfc0" translate="yes" xml:space="preserve">
          <source>If it is necessary to clean up before termination, the shutdown strategy must be a time-out value and the &lt;code&gt;gen_server&lt;/code&gt; must be set to trap exit signals in function &lt;code&gt;init&lt;/code&gt;. When ordered to shutdown, the &lt;code&gt;gen_server&lt;/code&gt; then calls the callback function &lt;code&gt;terminate(shutdown, State)&lt;/code&gt;:</source>
          <target state="translated">終了前にクリーンアップする必要がある場合、シャットダウン戦略はタイムアウト値である必要があり、 &lt;code&gt;gen_server&lt;/code&gt; は関数 &lt;code&gt;init&lt;/code&gt; で終了信号をトラップするように設定する必要があります。シャットダウンするように命令されると、 &lt;code&gt;gen_server&lt;/code&gt; はコールバック関数 &lt;code&gt;terminate(shutdown, State)&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="e79bb817b263e5ddf9ba4cef4ae14edfb7ff9782" translate="yes" xml:space="preserve">
          <source>If it is necessary to clean up before termination, the shutdown strategy must be a time-out value and the &lt;code&gt;gen_statem&lt;/code&gt; must in function &lt;code&gt;init/1&lt;/code&gt; set itself to trap exit signals by calling &lt;code&gt;process_flag(trap_exit, true)&lt;/code&gt;:</source>
          <target state="translated">それが終了する前にクリーンアップする必要がある場合は、シャットダウン戦略はタイムアウト値でなければなりません &lt;code&gt;gen_statem&lt;/code&gt; 機能で必須 &lt;code&gt;init/1&lt;/code&gt; 呼び出すことにより、トラップ出口信号にセット自体 &lt;code&gt;process_flag(trap_exit, true)&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c10551de78ce4c13b76bdcb633906a358226cfc9" translate="yes" xml:space="preserve">
          <source>If it is needed to compile a set of &lt;code&gt;ASN.1&lt;/code&gt; modules into an Erlang file with encode/decode functions, ensure to list all involved files in a configuration file. This configuration file must have a double extension &lt;code&gt;&quot;.set.asn&quot;&lt;/code&gt; (&lt;code&gt;&quot;.asn&quot;&lt;/code&gt; can alternatively be &lt;code&gt;&quot;.asn1&quot;&lt;/code&gt; or &lt;code&gt;&quot;.py&quot;&lt;/code&gt;). List the input file names within quotation marks (&quot;&quot;), one at each row in the file. If the input files are &lt;code&gt;File1.asn&lt;/code&gt;, &lt;code&gt;File2.asn&lt;/code&gt;, and &lt;code&gt;File3.asn&lt;/code&gt;, the configuration file must look as follows:</source>
          <target state="translated">エンコード/デコード機能を使用して &lt;code&gt;ASN.1&lt;/code&gt; モジュールのセットをErlangファイルにコンパイルする必要がある場合は、構成ファイルにすべての関連ファイルをリストしてください。この構成ファイルには、2つの拡張子 &lt;code&gt;&quot;.set.asn&quot;&lt;/code&gt; が必要です（ &lt;code&gt;&quot;.asn&quot;&lt;/code&gt; は、 &lt;code&gt;&quot;.asn1&quot;&lt;/code&gt; または &lt;code&gt;&quot;.py&quot;&lt;/code&gt; にすることもできます）。入力ファイル名をファイルの各行に1つずつ、引用符（ &quot;&quot;）で囲んでリストします。入力ファイルが &lt;code&gt;File1.asn&lt;/code&gt; 、 &lt;code&gt;File2.asn&lt;/code&gt; 、および &lt;code&gt;File3.asn&lt;/code&gt; の場合、構成ファイルは次のようになります。</target>
        </trans-unit>
        <trans-unit id="ac7e64fc378f2a5b91895bad1f8c83d469b481c8" translate="yes" xml:space="preserve">
          <source>If it is not specified it will use a default list ([x25519, x448, secp256r1, secp384r1]) that is filtered based on the installed crypto library version.</source>
          <target state="translated">指定しない場合は、インストールされているcryptoライブラリのバージョンに基づいてフィルタリングされた デフォルトのリスト([x25519,x448,secp256r1,secp384r1])を使用する。</target>
        </trans-unit>
        <trans-unit id="5d51fd241eafb95c913d685374e5a264641108ee" translate="yes" xml:space="preserve">
          <source>If it is possible for a manager to create or delete rows in the table, there must be a &lt;code&gt;RowStatus&lt;/code&gt; column for &lt;code&gt;is_set_ok&lt;/code&gt;, &lt;code&gt;set&lt;/code&gt; and &lt;code&gt;undo&lt;/code&gt; to work properly.</source>
          <target state="translated">マネージャーがテーブルの行を作成または削除できる場合、 &lt;code&gt;is_set_ok&lt;/code&gt; の &lt;code&gt;RowStatus&lt;/code&gt; 列が存在し、正しく &lt;code&gt;set&lt;/code&gt; 、 &lt;code&gt;undo&lt;/code&gt; に戻される必要があります。</target>
        </trans-unit>
        <trans-unit id="78796728bcb7c7764f0d079115e6608598e07dda" translate="yes" xml:space="preserve">
          <source>If it is possible to load &lt;code&gt;Module&lt;/code&gt; and function &lt;code&gt;Function/N&lt;/code&gt; is exported, it is called.</source>
          <target state="translated">&lt;code&gt;Module&lt;/code&gt; ロードが可能であり、関数 &lt;code&gt;Function/N&lt;/code&gt; がエクスポートされている場合、それが呼び出されます。</target>
        </trans-unit>
        <trans-unit id="34f89c49da4f3e679accd5b84c8be09ec8b3341c" translate="yes" xml:space="preserve">
          <source>If it is required that Mnesia must build and maintain an extra index table on attribute &lt;code&gt;address&lt;/code&gt; of all the &lt;code&gt;person&lt;/code&gt; records that are inserted in the table, the following code would be issued:</source>
          <target state="translated">Mnesiaがテーブルに挿入されたすべての &lt;code&gt;person&lt;/code&gt; レコードの属性 &lt;code&gt;address&lt;/code&gt; に追加のインデックステーブルを作成して維持する必要がある場合は、次のコードが発行されます。</target>
        </trans-unit>
        <trans-unit id="d545f3dffae84feb539a9a4a2658199f48d1fd1a" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;auto&lt;/code&gt;, the client automatically handles received tickets and tries to use them when making new TLS connections (session resumption with pre-shared keys).</source>
          <target state="translated">&lt;code&gt;auto&lt;/code&gt; に設定されている場合、クライアントは受信したチケットを自動的に処理し、新しいTLS接続（事前共有キーを使用したセッション再開）を行うときにそれらを使用しようとします。</target>
        </trans-unit>
        <trans-unit id="a8576255de740a4f910003bb08212e24357ef1fd" translate="yes" xml:space="preserve">
          <source>If it is set to &lt;code&gt;stateful&lt;/code&gt; or &lt;code&gt;stateless&lt;/code&gt;, session resumption with pre-shared keys is enabled and the server will send stateful or stateless session tickets to the client after successful connections.</source>
          <target state="translated">&lt;code&gt;stateful&lt;/code&gt; または &lt;code&gt;stateless&lt;/code&gt; 設定されている場合、事前共有キーを使用したセッション再開が有効になり、接続が成功すると、サーバーはステートフルまたはステートレスのセッションチケットをクライアントに送信します。</target>
        </trans-unit>
        <trans-unit id="5cea858b85f406ece423faeb209b445f4f52401b" translate="yes" xml:space="preserve">
          <source>If it takes two arguments, the first is the report, and the second is a map containing extra data that allows direct coversion to a string:</source>
          <target state="translated">2つの引数を取る場合、1つ目はレポートであり、2つ目は文字列への直接のカバレッジを可能にする追加データを含むマップです。</target>
        </trans-unit>
        <trans-unit id="88bfd8938101283cd461120f722bba92f5d433c5" translate="yes" xml:space="preserve">
          <source>If key &lt;code&gt;K&lt;/code&gt; does not match any existing key in the map, a new association is created from key &lt;code&gt;K&lt;/code&gt; to value &lt;code&gt;V&lt;/code&gt;.</source>
          <target state="translated">キー &lt;code&gt;K&lt;/code&gt; がマップ内の既存のキーと一致しない場合、キー &lt;code&gt;K&lt;/code&gt; から値 &lt;code&gt;V&lt;/code&gt; への新しい関連付けが作成されます。</target>
        </trans-unit>
        <trans-unit id="361674b6db4757a45860f6c0ff467ce229682848" translate="yes" xml:space="preserve">
          <source>If key &lt;code&gt;K&lt;/code&gt; does not match any existing keys in map &lt;code&gt;M&lt;/code&gt;, an exception of type &lt;code&gt;badarg&lt;/code&gt; is triggered at runtime. If a matching key &lt;code&gt;K&lt;/code&gt; is present in map &lt;code&gt;M&lt;/code&gt;, its associated value is replaced by the new value &lt;code&gt;V&lt;/code&gt;, and the evaluated map expression returns a new map.</source>
          <target state="translated">キー &lt;code&gt;K&lt;/code&gt; がマップ &lt;code&gt;M&lt;/code&gt; の既存のキーと一致しない場合、タイプ &lt;code&gt;badarg&lt;/code&gt; の例外が実行時にトリガーされます。一致するキー &lt;code&gt;K&lt;/code&gt; がマップ &lt;code&gt;M&lt;/code&gt; に存在する場合、関連する値は新しい値 &lt;code&gt;V&lt;/code&gt; に置き換えられ、評価されたマップ式は新しいマップを返します。</target>
        </trans-unit>
        <trans-unit id="c0a6ddca5224e31c09a05fdd6034a788ec478e89" translate="yes" xml:space="preserve">
          <source>If key &lt;code&gt;K&lt;/code&gt; matches an existing key in map &lt;code&gt;M&lt;/code&gt;, its associated value is replaced by the new value &lt;code&gt;V&lt;/code&gt;. In both cases, the evaluated map expression returns a new map.</source>
          <target state="translated">キー &lt;code&gt;K&lt;/code&gt; がマップ &lt;code&gt;M&lt;/code&gt; の既存のキーと一致する場合、その関連する値は新しい値 &lt;code&gt;V&lt;/code&gt; に置き換えられます。どちらの場合も、評価されたマップ式は新しいマップを返します。</target>
        </trans-unit>
        <trans-unit id="42a830a40777cba9136dab78e83126fb44890b72" translate="yes" xml:space="preserve">
          <source>If later &lt;code&gt;Pid&lt;/code&gt; terminates with a reason &lt;code&gt;Reason&lt;/code&gt;, the supervisor bridge terminates with reason &lt;code&gt;Reason&lt;/code&gt; as well. If later the supervisor bridge is stopped by its supervisor with reason &lt;code&gt;Reason&lt;/code&gt;, it calls &lt;code&gt;Module:terminate(Reason,State)&lt;/code&gt; to terminate.</source>
          <target state="translated">後で &lt;code&gt;Pid&lt;/code&gt; が理由 &lt;code&gt;Reason&lt;/code&gt; で終了した場合、スーパーバイザブリッジも理由 &lt;code&gt;Reason&lt;/code&gt; で終了します。後でスーパーバイザーブリッジが理由 &lt;code&gt;Reason&lt;/code&gt; でスーパーバイザーによって停止された場合、 &lt;code&gt;Module:terminate(Reason,State)&lt;/code&gt; を呼び出して終了します。</target>
        </trans-unit>
        <trans-unit id="3a49b5785a5ebb3a3e817628501985a6f158407e" translate="yes" xml:space="preserve">
          <source>If long node node names are used, initiation is done by calling &lt;code&gt;erl_connect_xinit()&lt;/code&gt;:</source>
          <target state="translated">長いノードのノード名が使用されている場合、開始は &lt;code&gt;erl_connect_xinit()&lt;/code&gt; を呼び出して行われます。</target>
        </trans-unit>
        <trans-unit id="0a0fdc2466475ba354acc0c8a05ce784a5bde5f7" translate="yes" xml:space="preserve">
          <source>If many processes fix a table, the table remains fixed until all processes have released it (or terminated). A reference counter is kept on a per process basis, and N consecutive fixes requires N releases to release the table.</source>
          <target state="translated">多くのプロセスがテーブルを修正した場合、すべてのプロセスがテーブルをリリースする(または終了する)までテーブルは修正されたままになります。参照カウンタはプロセスごとに保持され、N個の連続した修正は、テーブルをリリースするためにN個のリリースを必要とします。</target>
        </trans-unit>
        <trans-unit id="0c297e380855cf1730e1b5795f833b28141150c8" translate="yes" xml:space="preserve">
          <source>If many processes fix a table, the table remains fixed until all processes have released it or terminated. A reference counter is kept on a per process basis, and N consecutive fixes require N releases to release the table.</source>
          <target state="translated">多くのプロセスがテーブルを修正した場合、すべてのプロセスがテーブルをリリースするか終了するまで、テーブルは修正されたままになります。参照カウンタはプロセスごとに保持され、N個の連続した修正は、テーブルをリリースするためにN個のリリースを必要とします。</target>
        </trans-unit>
        <trans-unit id="53435afc4e831537f2a17e9899dbdd4cb79d80ed" translate="yes" xml:space="preserve">
          <source>If map &lt;code&gt;map_in&lt;/code&gt; contains &lt;code&gt;key&lt;/code&gt;, this function makes a copy of &lt;code&gt;map_in&lt;/code&gt; in &lt;code&gt;*map_out&lt;/code&gt;, and removes &lt;code&gt;key&lt;/code&gt; and the associated value. If map &lt;code&gt;map_in&lt;/code&gt; does not contain &lt;code&gt;key&lt;/code&gt;, &lt;code&gt;*map_out&lt;/code&gt; is set to &lt;code&gt;map_in&lt;/code&gt;.</source>
          <target state="translated">マップ &lt;code&gt;map_in&lt;/code&gt; に &lt;code&gt;key&lt;/code&gt; が含まれている場合、この関数は &lt;code&gt;*map_out&lt;/code&gt; に &lt;code&gt;map_in&lt;/code&gt; のコピーを作成し、 &lt;code&gt;key&lt;/code&gt; と関連する値を削除します。マップ &lt;code&gt;map_in&lt;/code&gt; に &lt;code&gt;key&lt;/code&gt; が含まれていない場合、 &lt;code&gt;*map_out&lt;/code&gt; はmap_inに設定され &lt;code&gt;map_in&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6edf0f9b76d8b501d4e816cd9d78be0eb60417a0" translate="yes" xml:space="preserve">
          <source>If mode is disturbing, the server is blocked forcefully, all ongoing requests terminates, and the reload starts immediately. If mode is non-disturbing, no new connections are accepted, but ongoing requests are allowed to complete before the reload is done.</source>
          <target state="translated">妨害モードの場合、サーバは強制的にブロックされ、進行中のリクエストはすべて終了し、直ちにリロードが開始されます。モードが妨害されていない場合、新規接続は受け付けられませんが、進行中のリクエストはリロードが完了する前に完了することが許可されます。</target>
        </trans-unit>
        <trans-unit id="e360c70f0d772545e95505fb9d2d98d4f6aab9bb" translate="yes" xml:space="preserve">
          <source>If modules are compiled with inlining, spurious warnings can be emitted. In the &lt;strong&gt;Options&lt;/strong&gt; menu you can choose to ignore inline-compiled modules when analyzing byte code. When starting from source code, this is not a problem because inlining is explicitly turned off by Dialyzer. The option causes Dialyzer to suppress all warnings from inline-compiled modules, as there is currently no way for Dialyzer to find what parts of the code have been produced by inlining.</source>
          <target state="translated">モジュールをインライン化してコンパイルすると、誤った警告が出される可能性があります。&lt;strong&gt;オプション&lt;/strong&gt;メニューでは、バイトコードを分析するときにインラインコンパイルされたモジュールを無視するように選択できます。ソースコードから開始する場合、インライン展開はDialyzerによって明示的にオフにされるため、これは問題にはなりません。現在、Dialyzerがインライン化によって生成されたコードの部分を見つける方法がないため、このオプションにより、Dialyzerはインラインコンパイルされたモジュールからのすべての警告を抑制します。</target>
        </trans-unit>
        <trans-unit id="ae716d5d8a33ea589343e3a0fd8de6a8cb8c320e" translate="yes" xml:space="preserve">
          <source>If more complex filtering is needed, use &lt;code&gt;&lt;a href=&quot;#get-2&quot;&gt;ct_netconfc:get/2,3&lt;/a&gt;&lt;/code&gt; and specify the exact filter according to &quot;XML Schema for Event Notifications&quot; in RFC 5277.</source>
          <target state="translated">より複雑なフィルタリングが必要な場合は、 &lt;code&gt;&lt;a href=&quot;#get-2&quot;&gt;ct_netconfc:get/2,3&lt;/a&gt;&lt;/code&gt; を使用し、RFC 5277の「イベント通知のXMLスキーマ」に従って正確なフィルターを指定します。</target>
        </trans-unit>
        <trans-unit id="36a1865d02dfc0df8a1f4e482a94e12100776ba1" translate="yes" xml:space="preserve">
          <source>If more than &lt;code&gt;MaxR&lt;/code&gt; number of restarts occur in the last &lt;code&gt;MaxT&lt;/code&gt; seconds, the supervisor terminates all the child processes and then itself. The termination reason for the supervisor itself in that case will be &lt;code&gt;shutdown&lt;/code&gt;.</source>
          <target state="translated">以上の場合は &lt;code&gt;MaxR&lt;/code&gt; 再起動の回数が最後に発生し &lt;code&gt;MaxT&lt;/code&gt; 秒、スーパーバイザはすべての子プロセスを終了してから自分自身。その場合のスーパーバイザ自体の終了理由は &lt;code&gt;shutdown&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="4518103e529715a70474c2780a5c3ec980b88617" translate="yes" xml:space="preserve">
          <source>If more than a certain amount of available system memory is allocated, as reported by the underlying operating system, the alarm &lt;code&gt;{system_memory_high_watermark, []}&lt;/code&gt; is set.</source>
          <target state="translated">基盤となるオペレーティングシステムによって報告されるように、利用可能なシステムメモリが一定量以上割り当てられている場合、アラーム &lt;code&gt;{system_memory_high_watermark, []}&lt;/code&gt; が設定されます。</target>
        </trans-unit>
        <trans-unit id="d231020eccfbc66c22211e22df6c7cecb22eb6a5" translate="yes" xml:space="preserve">
          <source>If more than one backtracking verb exists in a pattern, a different one that follows (*COMMIT) can be triggered first, so merely passing (*COMMIT) during a match does not always guarantee that a match must be at this starting point.</source>
          <target state="translated">パターン内に複数のバックトラック動詞が存在する場合、(*COMMIT)に続く別の動詞が最初にトリガされる可能性があるため、単にマッチ中に(*COMMIT)を渡すだけでは、必ずしもマッチがこの開始点でなければならないとは限りません。</target>
        </trans-unit>
        <trans-unit id="3508e8e529ddb74814eed659592c5affc8d5bd2a" translate="yes" xml:space="preserve">
          <source>If more than one backtracking verb is present in a pattern, the one that is backtracked onto first acts. For example, consider the following pattern, where A, B, and so on, are complex pattern fragments:</source>
          <target state="translated">パターンに複数のバックトラック動詞が存在する場合、バックトラックされたものが最初の行為になります。例えば、A,Bなどが複雑なパターンの断片である次のパターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="aeb08026d08e982ee4c93506a7932708091433e1" translate="yes" xml:space="preserve">
          <source>If more than one process tries to load an already loaded driver with the same &lt;code&gt;Path&lt;/code&gt;, or if the same process tries to load it many times, the function returns &lt;code&gt;ok&lt;/code&gt;. The emulator keeps track of the &lt;code&gt;load/2&lt;/code&gt; calls, so that a corresponding number of &lt;code&gt;unload/2&lt;/code&gt; calls must be done from the same process before the driver gets unloaded. It is therefore safe for an application to load a driver that is shared between processes or applications when needed. It can safely be unloaded without causing trouble for other parts of the system.</source>
          <target state="translated">複数のプロセスが同じ &lt;code&gt;Path&lt;/code&gt; ですでにロードされているドライバーをロードしようとした場合、または同じプロセスが何度もそれをロードしようとした場合、関数は &lt;code&gt;ok&lt;/code&gt; を返します。エミュレーターは &lt;code&gt;load/2&lt;/code&gt; 呼び出しを追跡するため、ドライバーがアンロードされる前に、対応する数の &lt;code&gt;unload/2&lt;/code&gt; 呼び出しを同じプロセスから実行する必要があります。したがって、アプリケーションは、必要に応じてプロセスまたはアプリケーション間で共有されるドライバーをロードしても安全です。システムの他の部分に問題を引き起こすことなく、安全にアンロードできます。</target>
        </trans-unit>
        <trans-unit id="2967b6a58919e3d3f7de7bef014b85f80942bbf1" translate="yes" xml:space="preserve">
          <source>If multi-scheduling is enabled, more than one scheduler thread is used by the emulator. Multi-scheduling can be blocked in two different ways. Either all schedulers but one is blocked, or all &lt;strong&gt;normal&lt;/strong&gt; schedulers but one is blocked. When only normal schedulers are blocked, dirty schedulers are free to continue to schedule processes.</source>
          <target state="translated">マルチスケジューリングが有効な場合、エミュレーターは複数のスケジューラースレッドを使用します。マルチスケジューリングは、2つの異なる方法でブロックできます。1つを除くすべてのスケジューラーがブロックされるか、1つを除くすべての&lt;strong&gt;通常の&lt;/strong&gt;スケジューラーがブロックされます。通常のスケジューラーのみがブロックされている場合、ダーティースケジューラーはプロセスのスケジューリングを続行できます。</target>
        </trans-unit>
        <trans-unit id="e264c2c185809d37a3371b5c09778551bfdd2307" translate="yes" xml:space="preserve">
          <source>If multiple &lt;code&gt;-eval&lt;/code&gt; expressions are specified, they are evaluated sequentially in the order specified. &lt;code&gt;-eval&lt;/code&gt; expressions are evaluated sequentially with &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-run&lt;/code&gt; function calls (this also in the order specified). As with &lt;code&gt;-s&lt;/code&gt; and &lt;code&gt;-run&lt;/code&gt;, an evaluation that does not terminate blocks the system initialization process.</source>
          <target state="translated">複数の &lt;code&gt;-eval&lt;/code&gt; 式が指定されている場合、それらは指定された順序で順番に評価されます。 &lt;code&gt;-eval&lt;/code&gt; 式は、 &lt;code&gt;-s&lt;/code&gt; および &lt;code&gt;-run&lt;/code&gt; 関数呼び出しで順次評価されます（これも指定された順序で行われます）。 &lt;code&gt;-s&lt;/code&gt; および &lt;code&gt;-run&lt;/code&gt; と同様に、終了しない評価はシステム初期化プロセスをブロックします。</target>
        </trans-unit>
        <trans-unit id="97280216c73ddbe9bd1cfe50f8b9e6e9ba9af2e9" translate="yes" xml:space="preserve">
          <source>If multiple timestamp flags are passed, &lt;code&gt;timestamp&lt;/code&gt; has precedence over &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt; which in turn has precedence over &lt;code&gt;monotonic_timestamp&lt;/code&gt;. All timestamp flags are remembered, so if two are passed and the one with highest precedence later is disabled the other one will become active.</source>
          <target state="translated">複数のタイムスタンプフラグが渡された場合、 &lt;code&gt;timestamp&lt;/code&gt; は &lt;code&gt;strict_monotonic_timestamp&lt;/code&gt; よりも優先され、strict_monotonic_timestampは &lt;code&gt;monotonic_timestamp&lt;/code&gt; よりも優先されます。すべてのタイムスタンプフラグが記憶されるため、2つが渡され、優先順位が最も高いフラグが後で無効になった場合、もう一方のフラグがアクティブになります。</target>
        </trans-unit>
        <trans-unit id="15446137a98bae984b924e92fba150a1dcc2db3c" translate="yes" xml:space="preserve">
          <source>If name registration succeeds, the new &lt;code&gt;gen_server&lt;/code&gt; process calls the callback function &lt;code&gt;ch3:init([])&lt;/code&gt;. &lt;code&gt;init&lt;/code&gt; is expected to return &lt;code&gt;{ok, State}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the internal state of the &lt;code&gt;gen_server&lt;/code&gt;. In this case, the state is the available channels.</source>
          <target state="translated">名前の登録が成功すると、新しい &lt;code&gt;gen_server&lt;/code&gt; プロセスはコールバック関数 &lt;code&gt;ch3:init([])&lt;/code&gt; を呼び出します。 &lt;code&gt;init&lt;/code&gt; は &lt;code&gt;{ok, State}&lt;/code&gt; を返すことが期待されてい &lt;code&gt;gen_server&lt;/code&gt; 。ここで、 &lt;code&gt;State&lt;/code&gt; はgen_serverの内部状態です。この場合、状態は使用可能なチャネルです。</target>
        </trans-unit>
        <trans-unit id="2fbbe04e09f325bd4aa00a3af49946b86a67830b" translate="yes" xml:space="preserve">
          <source>If name registration succeeds, the new &lt;code&gt;gen_statem&lt;/code&gt; process calls callback function &lt;code&gt;code_lock:init(Code)&lt;/code&gt;. This function is expected to return &lt;code&gt;{ok, State, Data}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the initial state of the &lt;code&gt;gen_statem&lt;/code&gt;, in this case &lt;code&gt;locked&lt;/code&gt;; assuming that the door is locked to begin with. &lt;code&gt;Data&lt;/code&gt; is the internal server data of the &lt;code&gt;gen_statem&lt;/code&gt;. Here the server data is a &lt;code&gt;map&lt;/code&gt; with key &lt;code&gt;code&lt;/code&gt; that stores the correct button sequence, key &lt;code&gt;length&lt;/code&gt; store its length, and key &lt;code&gt;buttons&lt;/code&gt; that stores the collected buttons up to the same length.</source>
          <target state="translated">名前の登録が成功すると、新しい &lt;code&gt;gen_statem&lt;/code&gt; プロセスがコールバック関数 &lt;code&gt;code_lock:init(Code)&lt;/code&gt; を呼び出します。この関数は &lt;code&gt;{ok, State, Data}&lt;/code&gt; を返すことが期待されています。ここで、 &lt;code&gt;State&lt;/code&gt; は &lt;code&gt;gen_statem&lt;/code&gt; の初期状態で、この場合は &lt;code&gt;locked&lt;/code&gt; ます。最初はドアがロックされていると仮定します。 &lt;code&gt;Data&lt;/code&gt; は &lt;code&gt;gen_statem&lt;/code&gt; の内部サーバーデータです。ここで、サーバデータが &lt;code&gt;map&lt;/code&gt; のキーとの &lt;code&gt;code&lt;/code&gt; その記憶正しいボタン配列、キー &lt;code&gt;length&lt;/code&gt; ストアその長さ、およびキー &lt;code&gt;buttons&lt;/code&gt; 同じ長さまで格納収集ボタン。</target>
        </trans-unit>
        <trans-unit id="7e65163ad8d72d6ee5d80daa0e098b4aadff312b" translate="yes" xml:space="preserve">
          <source>If neither &lt;code&gt;-minimal&lt;/code&gt;, nor &lt;code&gt;-sasl&lt;/code&gt; is passed as argument you will be prompted.</source>
          <target state="translated">どちらの場合 &lt;code&gt;-minimal&lt;/code&gt; 、また &lt;code&gt;-sasl&lt;/code&gt; が引数として渡されたかを確認するメッセージが表示されます。</target>
        </trans-unit>
        <trans-unit id="5532948dc2571760fbfaa0cdce397fe861e00347" translate="yes" xml:space="preserve">
          <source>If neither endpoint is desired you can test and re-try like this:</source>
          <target state="translated">どちらのエンドポイントも望まない場合は、このようにテストして再試行することができます。</target>
        </trans-unit>
        <trans-unit id="7ed5063391f45e25222dbefda8015e8ee48fbb82" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;-name&lt;/code&gt; or &lt;code&gt;-sname&lt;/code&gt; is given the node will be started using &lt;code&gt;-sname undefined&lt;/code&gt;. If &lt;code&gt;Node&lt;/code&gt; does not contain a hostname, one is automatically taken from &lt;code&gt;-name&lt;/code&gt; or &lt;code&gt;-sname&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;-name&lt;/code&gt; または &lt;code&gt;-sname&lt;/code&gt; が指定されていない場合、ノードは &lt;code&gt;-sname undefined&lt;/code&gt; を使用して開始されます。 &lt;code&gt;Node&lt;/code&gt; にホスト名が含まれていない場合は、 &lt;code&gt;-name&lt;/code&gt; または &lt;code&gt;-sname&lt;/code&gt; から自動的に取得されます。</target>
        </trans-unit>
        <trans-unit id="73bad7222a27717f2f7fdcb509b4a128ed0ea2cf" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;ContextName&lt;/code&gt; is specified, the default &lt;code&gt;&quot;&quot;&lt;/code&gt; context is used.</source>
          <target state="translated">&lt;code&gt;ContextName&lt;/code&gt; が指定されていない場合、デフォルトの &lt;code&gt;&quot;&quot;&lt;/code&gt; コンテキストが使用されます。</target>
        </trans-unit>
        <trans-unit id="5f8fa538da1412a2b10a3518391e831a5459dc85" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;NotifyName&lt;/code&gt; is specified (or if it is &lt;code&gt;&quot;&quot;&lt;/code&gt;), the notification is sent to all management targets (&lt;code&gt;Addresses&lt;/code&gt; below).</source>
          <target state="translated">&lt;code&gt;NotifyName&lt;/code&gt; が指定されていない場合（または &lt;code&gt;&quot;&quot;&lt;/code&gt; の場合）、通知はすべての管理ターゲット（以下の &lt;code&gt;Addresses&lt;/code&gt; ）に送信されます。</target>
        </trans-unit>
        <trans-unit id="80ccb4b7a89fa0c5a71d360eba8cfe0f8b2d5620" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;Type&lt;/code&gt; is specified, all reports are listed.</source>
          <target state="translated">&lt;code&gt;Type&lt;/code&gt; を指定しない場合、すべてのレポートがリストされます。</target>
        </trans-unit>
        <trans-unit id="ac9629aacf5a541205c4ec779ff11edb1576409e" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;context&lt;/code&gt; is specified, the default context, &lt;code&gt;&quot;&quot;&lt;/code&gt;, is used.</source>
          <target state="translated">&lt;code&gt;context&lt;/code&gt; が指定されていない場合、デフォルトのコンテキスト &lt;code&gt;&quot;&quot;&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="ed97555002c32aa9440a97e73ca69137e2f1b0fe" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;epmd&lt;/code&gt; (TCP port mapper daemon) is used, also command-line option &lt;code&gt;-no_epmd&lt;/code&gt; is to be specified, which makes Erlang skip the &lt;code&gt;epmd&lt;/code&gt; startup, both as an OS process and as an Erlang ditto.</source>
          <target state="translated">&lt;code&gt;epmd&lt;/code&gt; （TCPポートマッパーデーモン）を使用しない場合は、コマンドラインオプション &lt;code&gt;-no_epmd&lt;/code&gt; も指定する必要があります。これにより、Erlang はOSプロセスとしてもErlang &lt;code&gt;epmd&lt;/code&gt; としてもepmdの起動をスキップします。</target>
        </trans-unit>
        <trans-unit id="a8006619350a5226e5dc4b2683c9eea3a8bdbda4" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;extended_info&lt;/code&gt; is present in the file and &lt;code&gt;{verify,true}&lt;/code&gt; is specified, the number of objects written is compared to the size of the original table when the dump was started. This can make verification fail if the table was &lt;code&gt;public&lt;/code&gt; and objects were added or removed while the table was dumped to file. To avoid this problem, either do not verify files dumped while updated simultaneously or use option &lt;code&gt;{extended_info, [object_count]}&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt;, which extends the information in the file with the number of objects written.</source>
          <target state="translated">ファイルに &lt;code&gt;extended_info&lt;/code&gt; が存在せず、 &lt;code&gt;{verify,true}&lt;/code&gt; が指定されている場合、書き込まれたオブジェクトの数は、ダンプが開始されたときの元のテーブルのサイズと比較されます。これにより、テーブルが &lt;code&gt;public&lt;/code&gt; あり、テーブルがファイルにダンプされている間にオブジェクトが追加または削除された場合、検証が失敗する可能性があります。この問題を回避するには、同時に更新されている間にダンプされたファイルを検証しないか &lt;code&gt;{extended_info, [object_count]}&lt;/code&gt; オプション{extended_info、[object_count]}を &lt;code&gt;&lt;a href=&quot;#tab2file-3&quot;&gt;tab2file/3&lt;/a&gt;&lt;/code&gt; に使用して、書き込まれたオブジェクトの数でファイル内の情報を拡張します。</target>
        </trans-unit>
        <trans-unit id="8a45ca5e05cc70fae2783d55cbff20b1f8725403" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;name&lt;/code&gt; is specified (or if it is &lt;code&gt;&quot;&quot;&lt;/code&gt;), the notification is sent to all management targets.</source>
          <target state="translated">&lt;code&gt;name&lt;/code&gt; を指定しない場合（または &lt;code&gt;&quot;&quot;&lt;/code&gt; の場合）、通知はすべての管理ターゲットに送信されます。</target>
        </trans-unit>
        <trans-unit id="32886c8cd8eda5943ea7814b65ec8cd639317821" translate="yes" xml:space="preserve">
          <source>If no &lt;code&gt;tracer&lt;/code&gt; is specified, the calling process receives all the trace messages.</source>
          <target state="translated">&lt;code&gt;tracer&lt;/code&gt; が指定されていない場合、呼び出しプロセスはすべてのトレースメッセージを受信します。</target>
        </trans-unit>
        <trans-unit id="8acb8279a4661a4f996c3af79ec9be1db1d63648" translate="yes" xml:space="preserve">
          <source>If no BEAM file contains debug information, then a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">デバッグ情報を含むBEAMファイルがない場合は、タプルのリストが返されます。各タプルの最初の要素は、以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="44e5f3c4af2c18aaf89a34918cf838e205862cec" translate="yes" xml:space="preserve">
          <source>If no BOM is found, the function returns &lt;code&gt;{latin1,0}&lt;/code&gt;.</source>
          <target state="translated">BOMが見つからない場合、関数は &lt;code&gt;{latin1,0}&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="e07f0cc9e55f8b5cf0585baaee7cd300085bb99c" translate="yes" xml:space="preserve">
          <source>If no CPU topology is available when flag &lt;code&gt;+sbt&lt;/code&gt; is processed and &lt;code&gt;BindType&lt;/code&gt; is any other type than &lt;code&gt;u&lt;/code&gt;, the runtime system fails to start. CPU topology can be defined using flag &lt;code&gt;&lt;a href=&quot;#+sct&quot;&gt;+sct&lt;/a&gt;&lt;/code&gt;. Notice that flag &lt;code&gt;+sct&lt;/code&gt; can have to be passed before flag &lt;code&gt;+sbt&lt;/code&gt; on the command line (if no CPU topology has been automatically detected).</source>
          <target state="translated">フラグ &lt;code&gt;+sbt&lt;/code&gt; が処理され、 &lt;code&gt;BindType&lt;/code&gt; が &lt;code&gt;u&lt;/code&gt; 以外のタイプであるときにCPUトポロジーが使用できない場合、ランタイムシステムは起動に失敗します。CPUトポロジは、フラグ &lt;code&gt;&lt;a href=&quot;#+sct&quot;&gt;+sct&lt;/a&gt;&lt;/code&gt; を使用して定義できます。コマンドラインでフラグ &lt;code&gt;+sct&lt;/code&gt; をフラグ &lt;code&gt;+sbt&lt;/code&gt; の前に渡す必要があることに注意してください（CPUトポロジが自動的に検出されていない場合）。</target>
        </trans-unit>
        <trans-unit id="dccd7290f5c52ab540d1d1066d43a3aaf228c19a" translate="yes" xml:space="preserve">
          <source>If no argument is provided, Debugger starts in global mode.</source>
          <target state="translated">引数を指定しない場合、デバッガはグローバルモードで起動します。</target>
        </trans-unit>
        <trans-unit id="622b281cf52c77f356f35ba9cbbad1c260bbd03f" translate="yes" xml:space="preserve">
          <source>If no boot script is specified, it defaults to &lt;code&gt;ROOT/bin/start&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#default_boot_scripts&quot;&gt; Default Boot Scripts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ブートスクリプトが指定されていない場合、デフォルトで &lt;code&gt;ROOT/bin/start&lt;/code&gt; になります。 &lt;code&gt;&lt;a href=&quot;#default_boot_scripts&quot;&gt; Default Boot Scripts&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="1fe7b07f514dd69941a31088b490f38f80374e4c" translate="yes" xml:space="preserve">
          <source>If no boot script is specified, it defaults to &lt;code&gt;ROOT/bin/start&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;#default_boot_scripts&quot;&gt;Default Boot Scripts&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">ブートスクリプトが指定されていない場合、デフォルトは &lt;code&gt;ROOT/bin/start&lt;/code&gt; です。 &lt;code&gt;&lt;a href=&quot;#default_boot_scripts&quot;&gt;Default Boot Scripts&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="1a8687c3d2fddc8ffec405bf127b2012f252abb2" translate="yes" xml:space="preserve">
          <source>If no carrier in &lt;code&gt;pooled_tree&lt;/code&gt; had a large enough free block, we search it again to find any carrier that may act as an entry point into the shared list of all pooled carriers. This in order to, if possible, avoid starting at the sentinel and thereby ease the &quot;bad clustering&quot; problem.</source>
          <target state="translated">&lt;code&gt;pooled_tree&lt;/code&gt; 内に十分な大きさの空きブロックがないキャリアがない場合は、もう一度検索して、プールされたすべてのキャリアの共有リストへのエントリポイントとして機能する可能性のあるキャリアを見つけます。これは、可能であれば、番兵から開始することを避け、それによって「悪いクラスタリング」の問題を緩和するためです。</target>
        </trans-unit>
        <trans-unit id="221abc0dca23710976162240a2b9fb59a1bb2e0e" translate="yes" xml:space="preserve">
          <source>If no clause could be definitely selected, the function returns &lt;code&gt;{false, NewClauses}&lt;/code&gt;, where &lt;code&gt;NewClauses&lt;/code&gt; is the list of entries in &lt;code&gt;Clauses&lt;/code&gt; that remain after eliminating unselectable clauses, preserving the relative order.</source>
          <target state="translated">何句が明確に選択することができなかった場合は、関数戻り &lt;code&gt;{false, NewClauses}&lt;/code&gt; 、 &lt;code&gt;NewClauses&lt;/code&gt; は、エントリのリストである &lt;code&gt;Clauses&lt;/code&gt; 相対的な順序を維持し、選択不可節を除去した後に残ります。</target>
        </trans-unit>
        <trans-unit id="b11dd24d2508db0b969937d6f16c64e7e9a757da" translate="yes" xml:space="preserve">
          <source>If no command-line flag is entered, the &lt;code&gt;Mnesia&lt;/code&gt; directory becomes the current working directory on the node where the Erlang shell is started.</source>
          <target state="translated">コマンドラインフラグが入力されていない場合、 &lt;code&gt;Mnesia&lt;/code&gt; ディレクトリは、Erlangシェルが起動されているノードの現在の作業ディレクトリになります。</target>
        </trans-unit>
        <trans-unit id="19b61bf39702f61088362c4f3caf5fec39790a79" translate="yes" xml:space="preserve">
          <source>If no configuration exists for a server, use &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; instead, and specify all necessary options in the &lt;code&gt;Options&lt;/code&gt; parameter.</source>
          <target state="translated">サーバーの構成が存在しない場合は、代わりに &lt;code&gt;&lt;a href=&quot;#connect-1&quot;&gt;connect/1&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#open-1&quot;&gt;open/1&lt;/a&gt;&lt;/code&gt; を使用して、必要なすべての &lt;code&gt;Options&lt;/code&gt; パラメーターで指定します。</target>
        </trans-unit>
        <trans-unit id="a0a2525519fce3b84f0628d21fec24d0d54a30b8" translate="yes" xml:space="preserve">
          <source>If no configuration file is specified with command &lt;code&gt;ct_run&lt;/code&gt;, a warning is displayed. If &lt;code&gt;Common Test&lt;/code&gt; has been run from the same directory earlier, the same configuration file(s) are used again. If &lt;code&gt;Common Test&lt;/code&gt; has not been run from this directory before, no configuration files are available.</source>
          <target state="translated">コマンド &lt;code&gt;ct_run&lt;/code&gt; で構成ファイルが指定されていない場合、警告が表示されます。場合は &lt;code&gt;Common Test&lt;/code&gt; 以前と同じディレクトリから実行された、同じ設定ファイル（複数可）が再び使用されています。以前にこのディレクトリから &lt;code&gt;Common Test&lt;/code&gt; を実行したことがない場合、使用可能な構成ファイルはありません。</target>
        </trans-unit>
        <trans-unit id="905acdf151b0fff2093942d03e8fda7ba4d6ef97" translate="yes" xml:space="preserve">
          <source>If no connection reference is provided, a connection is set up, and the new connection is returned. An SSH channel process is started to handle the communication with the SFTP server. The returned &lt;code&gt;pid&lt;/code&gt; for this process is to be used as input to all other API functions in this module.</source>
          <target state="translated">接続参照が指定されていない場合、接続が設定され、新しい接続が返されます。SSHチャネルプロセスが開始され、SFTPサーバーとの通信を処理します。このプロセスで返される &lt;code&gt;pid&lt;/code&gt; は、このモジュールの他のすべてのAPI関数への入力として使用されます。</target>
        </trans-unit>
        <trans-unit id="a012950e61dc5d03cdb78960de0564c38b5541f9" translate="yes" xml:space="preserve">
          <source>If no encoder module is given, the default is used (which is pretty).</source>
          <target state="translated">エンコーダモジュールが指定されていない場合は、デフォルトが使用されます(これはきれいです)。</target>
        </trans-unit>
        <trans-unit id="9348a769518853e44d89b99ac342c57ff1b5e15b" translate="yes" xml:space="preserve">
          <source>If no error occurs, the second phase is performed. This phase calls the user defined &lt;code&gt;set&lt;/code&gt; function for all variables.</source>
          <target state="translated">エラーが発生しない場合は、2番目のフェーズが実行されます。このフェーズでは、すべての変数に対してユーザー定義の &lt;code&gt;set&lt;/code&gt; 関数を呼び出します。</target>
        </trans-unit>
        <trans-unit id="3b135a2849366f4513f0e061b53465a7e3a779a4" translate="yes" xml:space="preserve">
          <source>If no exports are listed by an &lt;code&gt;export&lt;/code&gt; option (see &lt;code&gt;merge_sources/3&lt;/code&gt; for details), then if &lt;code&gt;Name&lt;/code&gt; is also the name of one of the input modules, that module will be exported; otherwise, the first listed module will be exported. Cf. the examples under &lt;code&gt;merge/3&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;export&lt;/code&gt; オプションでエクスポートがリストされていない場合（詳細については、 &lt;code&gt;merge_sources/3&lt;/code&gt; を参照）、 &lt;code&gt;Name&lt;/code&gt; が入力モジュールの1つの名前でもある場合、そのモジュールがエクスポートされます。それ以外の場合は、最初にリストされているモジュールがエクスポートされます。Cf. &lt;code&gt;merge/3&lt;/code&gt; の下の例。</target>
        </trans-unit>
        <trans-unit id="186696412f510e31ad8ed3a38fb86c31cd6ca5ca" translate="yes" xml:space="preserve">
          <source>If no extra options are specified with flag/option &lt;code&gt;step&lt;/code&gt;, breakpoints are set automatically on the test cases that are to be executed by &lt;code&gt;Common Test&lt;/code&gt;, and those functions only. If step option &lt;code&gt;config&lt;/code&gt; is specified, breakpoints are also initially set on the configuration functions in the suite, that is, &lt;code&gt;init_per_suite/1&lt;/code&gt;, &lt;code&gt;end_per_suite/1&lt;/code&gt;, &lt;code&gt;init_per_group/2&lt;/code&gt;, &lt;code&gt;end_per_group/2&lt;/code&gt;, &lt;code&gt;init_per_testcase/2&lt;/code&gt; and &lt;code&gt;end_per_testcase/2&lt;/code&gt;.</source>
          <target state="translated">flag / option &lt;code&gt;step&lt;/code&gt; で追加のオプションが指定されていない場合、ブレークポイントは、 &lt;code&gt;Common Test&lt;/code&gt; によって実行されるテストケースとそれらの関数のみに自動的に設定されます。ステップオプションの場合は &lt;code&gt;config&lt;/code&gt; 指定され、ブレークポイントはまた、最初のスイート内の構成機能に設定されている、即ち、 &lt;code&gt;init_per_suite/1&lt;/code&gt; 、 &lt;code&gt;end_per_suite/1&lt;/code&gt; 、 &lt;code&gt;init_per_group/2&lt;/code&gt; 、 &lt;code&gt;end_per_group/2&lt;/code&gt; 、 &lt;code&gt;init_per_testcase/2&lt;/code&gt; 及び &lt;code&gt;end_per_testcase/2&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="49e1803a2624ccbd4e21f90db6095850fb9331a7" translate="yes" xml:space="preserve">
          <source>If no formatter information is specified for a handler, Logger uses &lt;code&gt;logger_formatter&lt;/code&gt; as default. See the &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter(3)&lt;/a&gt;&lt;/code&gt; manual page for more information about this module.</source>
          <target state="translated">ハンドラーにフォーマッター情報が指定されていない場合、ロガーはデフォルトで &lt;code&gt;logger_formatter&lt;/code&gt; を使用します。このモジュールの詳細については、 &lt;code&gt;&lt;a href=&quot;logger_formatter&quot;&gt;logger_formatter(3)&lt;/a&gt;&lt;/code&gt; のマニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="41b05b11e2a531a16c3ad32baf03f74559983750" translate="yes" xml:space="preserve">
          <source>If no graph type is specified, &lt;code&gt;&lt;a href=&quot;digraph#new-0&quot;&gt; digraph:new/0&lt;/a&gt;&lt;/code&gt; is used for creating the directed graph, otherwise argument &lt;code&gt;GraphType&lt;/code&gt; is passed on as second argument to &lt;code&gt;&lt;a href=&quot;digraph#new-1&quot;&gt;digraph:new/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">グラフタイプが指定されていない場合、 &lt;code&gt;&lt;a href=&quot;digraph#new-0&quot;&gt; digraph:new/0&lt;/a&gt;&lt;/code&gt; が有向グラフの作成に使用されます。指定されていない場合、引数 &lt;code&gt;GraphType&lt;/code&gt; が2番目の引数として &lt;code&gt;&lt;a href=&quot;digraph#new-1&quot;&gt;digraph:new/1&lt;/a&gt;&lt;/code&gt; に渡されます。</target>
        </trans-unit>
        <trans-unit id="534f259af2115bebe106710668093e3ef6ffd155" translate="yes" xml:space="preserve">
          <source>If no graph type is specified, &lt;code&gt;&lt;a href=&quot;digraph#new-0&quot;&gt;digraph:new/0&lt;/a&gt;&lt;/code&gt; is used for creating the directed graph, otherwise argument &lt;code&gt;GraphType&lt;/code&gt; is passed on as second argument to &lt;code&gt;&lt;a href=&quot;digraph#new-1&quot;&gt;digraph:new/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">グラフタイプが指定されていない場合、 &lt;code&gt;&lt;a href=&quot;digraph#new-0&quot;&gt;digraph:new/0&lt;/a&gt;&lt;/code&gt; 作成にはdigraph：new / 0が使用されます。それ以外の場合は、引数 &lt;code&gt;GraphType&lt;/code&gt; が &lt;code&gt;&lt;a href=&quot;digraph#new-1&quot;&gt;digraph:new/1&lt;/a&gt;&lt;/code&gt; の 2番目の引数として渡されます。</target>
        </trans-unit>
        <trans-unit id="4eb03e181763fc340f89dd2fee8a41ea21ee5c23" translate="yes" xml:space="preserve">
          <source>If no guard sequence is evaluated as true, an &lt;code&gt;if_clause&lt;/code&gt; run-time error occurs. If necessary, the guard expression &lt;code&gt;true&lt;/code&gt; can be used in the last branch, as that guard sequence is always true.</source>
          <target state="translated">どのガードシーケンスもtrueと評価されない場合、 &lt;code&gt;if_clause&lt;/code&gt; ランタイムエラーが発生します。ガードシーケンスは常にtrueであるため、必要に応じて、最後のブランチでガード式 &lt;code&gt;true&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="b9f6b9adc1152f1b0fd0e1ed73ad8eec4e1f624e" translate="yes" xml:space="preserve">
          <source>If no log with the specified name exist on the specified node, &lt;code&gt;no_such_log&lt;/code&gt; is returned.</source>
          <target state="translated">指定したノードに指定した名前のログが存在しない場合は、 &lt;code&gt;no_such_log&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="8f6ab79d1d5e9e2cd8b43d5f286fe816764eabff" translate="yes" xml:space="preserve">
          <source>If no match is found for &lt;code&gt;Tag&lt;/code&gt;, &lt;code&gt;Result&lt;/code&gt; will be the empty string (&lt;code&gt;[]&lt;/code&gt;).</source>
          <target state="translated">&lt;code&gt;Tag&lt;/code&gt; に一致するものが見つからない場合、 &lt;code&gt;Result&lt;/code&gt; は空の文字列（ &lt;code&gt;[]&lt;/code&gt; ）になります。</target>
        </trans-unit>
        <trans-unit id="668861363db131d12510c671297ba7af08f41273" translate="yes" xml:space="preserve">
          <source>If no more event handlers exist after the deletion, &lt;code&gt;error_logger&lt;/code&gt; is removed as a Logger handler, and the &lt;code&gt;error_logger&lt;/code&gt; process is stopped.</source>
          <target state="translated">削除後にイベントハンドラーがなくなると、 &lt;code&gt;error_logger&lt;/code&gt; がロガーハンドラーとして削除され、 &lt;code&gt;error_logger&lt;/code&gt; プロセスが停止します。</target>
        </trans-unit>
        <trans-unit id="97bba64e22bb5e3d712c27f199cd41bb5ed00da4" translate="yes" xml:space="preserve">
          <source>If no name is provided, the supervisor bridge is not registered.</source>
          <target state="translated">名前が記載されていない場合、スーパーバイザーブリッジは登録されていません。</target>
        </trans-unit>
        <trans-unit id="145b04378100b2af31635cfab7037e102fc50e14" translate="yes" xml:space="preserve">
          <source>If no name is provided, the supervisor is not registered.</source>
          <target state="translated">名前が記載されていない場合は、監督者は登録されていません。</target>
        </trans-unit>
        <trans-unit id="7209e6d7e59cd86554bad77c729bc91b2aac2993" translate="yes" xml:space="preserve">
          <source>If no new memory blocks are inserted into the list, it should eventually be emptied. All pointers to the list however expect to always point to something. This is solved by inserting an empty &quot;marker&quot; element, which only has to purpose of being there in the absense of other elements. That is when the list is empty it only contains this &quot;marker&quot; element.</source>
          <target state="translated">新しいメモリブロックがリストに挿入されなければ、最終的には空になるはずです。しかし、リストへのすべてのポインタは、常に何かを指すことを期待しています。これは、空の &quot;マーカー&quot; 要素を挿入することで解決します。つまり、リストが空の場合は、この &quot;マーカー &quot;要素だけが含まれます。</target>
        </trans-unit>
        <trans-unit id="962cccbaba0fe2900b8b208ab74fd43b13540b3f" translate="yes" xml:space="preserve">
          <source>If no object with key &lt;code&gt;Key&lt;/code&gt; exists, the function exits with reason &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">キー &lt;code&gt;Key&lt;/code&gt; を持つオブジェクトが存在しない場合、関数は理由 &lt;code&gt;badarg&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="f3ace922192dd1a66ce93d65f216be69e6bdcfa0" translate="yes" xml:space="preserve">
          <source>If no options are specified, a read lock is acquired, 100 results are returned in each chunk, and &lt;code&gt;select&lt;/code&gt; is used to traverse the table, that is:</source>
          <target state="translated">オプションが指定されていない場合、読み取りロックが取得され、各チャンクで100の結果が返され、 &lt;code&gt;select&lt;/code&gt; を使用してテーブルをトラバースします。</target>
        </trans-unit>
        <trans-unit id="be43c0999b074d475f47490047515316aff57a56" translate="yes" xml:space="preserve">
          <source>If no or an unknown version is given, the &lt;strong&gt;best&lt;/strong&gt; version is used (which is v3).</source>
          <target state="translated">バージョンがない、または不明なバージョンが指定されている場合は、&lt;strong&gt;最適な&lt;/strong&gt;バージョン（v3）が使用されます。</target>
        </trans-unit>
        <trans-unit id="bc0db3920bc02374e1ab1e1eb3ced79753b79531" translate="yes" xml:space="preserve">
          <source>If no output comes from the Erlang shell, but the Erlang machine still seems to be alive, an &quot;ALIVE&quot; message is written to the log; it is a time stamp and is written, by default, after 15 minutes of inactivity. Also, if output from Erlang is logged, but more than 5 minutes (default) has passed since last time we got anything from Erlang, a time stamp is written in the log. The &quot;ALIVE&quot; messages look as follows:</source>
          <target state="translated">もしErlangシェルから何も出力されていないのにErlangマシンがまだ生きているように見える場合、&quot;ALIVE &quot;メッセージがログに書き込まれます。また、Erlangからの出力がログに記録されていて、最後にErlangから何かを受け取ってから5分以上経過している場合(デフォルト)、タイムスタンプがログに書き込まれます。ALIVE &quot;メッセージは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="e2dda439a8b57752f5158a6910e3f618737cb035" translate="yes" xml:space="preserve">
          <source>If no process metadata exists, the function behaves as &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt; set_process_metadata/1 &lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスメタデータが存在しない場合、関数は &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt; set_process_metadata/1 &lt;/a&gt;&lt;/code&gt; として動作します。</target>
        </trans-unit>
        <trans-unit id="609daf9d4941227cdd07f7a145c9f4b97a9dd23d" translate="yes" xml:space="preserve">
          <source>If no process metadata exists, the function behaves as &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プロセスメタデータが存在しない場合、関数は &lt;code&gt;&lt;a href=&quot;#set_process_metadata-1&quot;&gt;set_process_metadata/1&lt;/a&gt;&lt;/code&gt; として動作します。</target>
        </trans-unit>
        <trans-unit id="2bcf9e8cbdaa54440e55a1604d7759707d84c686" translate="yes" xml:space="preserve">
          <source>If no response is received before &lt;code&gt;WaitTime&lt;/code&gt; milliseconds, the atom &lt;code&gt;no_response&lt;/code&gt; is returned. It is valid to continue waiting for a response as many times as needed up until a response has been received and completed by &lt;code&gt;erpc:check_response()&lt;/code&gt;, &lt;code&gt;erpc:receive_response()&lt;/code&gt;, or &lt;code&gt;erpc:wait_response()&lt;/code&gt;. If a response is received, the &lt;code&gt;call&lt;/code&gt; operation is completed and either the result is returned as &lt;code&gt;{response, Result}&lt;/code&gt; where &lt;code&gt;Result&lt;/code&gt; corresponds to the value returned from the applied function or an exception is raised. The exceptions that can be raised corresponds to the same exceptions as can be raised by &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;erpc:call/4&lt;/a&gt;&lt;/code&gt;. That is, no &lt;code&gt;{erpc, timeout}&lt;/code&gt;&lt;code&gt;error&lt;/code&gt; exception can be raised. &lt;code&gt;erpc:wait_response()&lt;/code&gt; will fail with an &lt;code&gt;{erpc, badarg}&lt;/code&gt; exception if/when an invalid &lt;code&gt;RequestId&lt;/code&gt; is detected or if an invalid &lt;code&gt;WaitTime&lt;/code&gt; is passed.</source>
          <target state="translated">&lt;code&gt;WaitTime&lt;/code&gt; ミリ秒の前に応答が受信されない場合、アトム &lt;code&gt;no_response&lt;/code&gt; が返されます。 &lt;code&gt;erpc:check_response()&lt;/code&gt; 、 &lt;code&gt;erpc:receive_response()&lt;/code&gt; 、または &lt;code&gt;erpc:wait_response()&lt;/code&gt; によって応答が受信されて完了するまで、必要な回数だけ応答を待機し続けることが有効です。応答が受信された場合、 &lt;code&gt;call&lt;/code&gt; 操作が完了し、結果は以下のように戻されるか &lt;code&gt;{response, Result}&lt;/code&gt; &lt;code&gt;Result&lt;/code&gt; 、印加機能または例外から返された値に対応が上昇します。発生する可能性のある例外は、 &lt;code&gt;&lt;a href=&quot;#call-4&quot;&gt;erpc:call/4&lt;/a&gt;&lt;/code&gt; によって発生する可能性のある例外と同じです。。つまり、 &lt;code&gt;{erpc, timeout}&lt;/code&gt; &lt;code&gt;error&lt;/code&gt; 例外を発生させることはできません。 &lt;code&gt;erpc:wait_response()&lt;/code&gt; は、無効な &lt;code&gt;RequestId&lt;/code&gt; が検出された場合、または無効な &lt;code&gt;WaitTime&lt;/code&gt; が渡された場合、 &lt;code&gt;{erpc, badarg}&lt;/code&gt; 例外で失敗します。</target>
        </trans-unit>
        <trans-unit id="129f0fba3cda34f511f81ef498c5983a08b6fef4" translate="yes" xml:space="preserve">
          <source>If no service name is specified, a brief listing of all Erlang services is presented. If a service name is supplied, all options for that service are presented.</source>
          <target state="translated">サービス名が指定されていない場合、すべてのErlangサービスの簡単なリストが表示されます。サービス名が指定された場合、そのサービスのすべてのオプションが表示されます。</target>
        </trans-unit>
        <trans-unit id="f74a0bc86a24e556d294700bf2367dba448274f4" translate="yes" xml:space="preserve">
          <source>If no specific browser start command is specified, Firefox is the default browser on Unix platforms, and Internet Explorer on Windows. If &lt;code&gt;Common Test&lt;/code&gt; fails to start a browser automatically, or &lt;code&gt;none&lt;/code&gt; is specified as the value for &lt;code&gt;-browser&lt;/code&gt; (that is, &lt;code&gt;-browser none&lt;/code&gt;), start your favourite browser manually and type the URL that &lt;code&gt;Common Test&lt;/code&gt; displays in the shell.</source>
          <target state="translated">特定のブラウザー開始コマンドが指定されていない場合、FirefoxがUNIXプラットフォームのデフォルトのブラウザーで、Internet ExplorerがWindowsのデフォルトのブラウザーです。 &lt;code&gt;Common Test&lt;/code&gt; がブラウザーを自動的に開始できない場合、または &lt;code&gt;-browser&lt;/code&gt; の値として &lt;code&gt;none&lt;/code&gt; が指定されている場合（つまり、 &lt;code&gt;-browser none&lt;/code&gt; ）、お気に入りのブラウザーを手動で開始し、 &lt;code&gt;Common Test&lt;/code&gt; がシェルに表示するURLを入力します。</target>
        </trans-unit>
        <trans-unit id="3bd56a176fb29e1e8248ad526f6f69316f9b58af" translate="yes" xml:space="preserve">
          <source>If no such fun is registered, &lt;code&gt;beam_lib&lt;/code&gt; instead searches for an &lt;code&gt;.erlang.crypt&lt;/code&gt; file, see the next section.</source>
          <target state="translated">そのようなfunが登録されていない場合、 &lt;code&gt;beam_lib&lt;/code&gt; は代わりに &lt;code&gt;.erlang.crypt&lt;/code&gt; ファイルを検索します。次のセクションを参照してください。</target>
        </trans-unit>
        <trans-unit id="287f2765f0e3b66bca8a3294ba1f1a9c4a144428" translate="yes" xml:space="preserve">
          <source>If no support is found for any tool, this function returns &lt;code&gt;{skip, Explanation}&lt;/code&gt;.</source>
          <target state="translated">どのツールのサポートも見つからない場合、この関数は &lt;code&gt;{skip, Explanation}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="40469f7012f9c99e344b26a6dfa3a4f344430f04" translate="yes" xml:space="preserve">
          <source>If no time-out of the same type is active instead insert the time-out event just like when starting a time-out with relative &lt;code&gt;Time = 0&lt;/code&gt;.</source>
          <target state="translated">同じタイプのタイムアウトがアクティブになっていない場合は、相対 &lt;code&gt;Time = 0&lt;/code&gt; タイムアウトを開始するときと同じように、代わりにタイムアウトイベントを挿入します。</target>
        </trans-unit>
        <trans-unit id="5b73a3ec1f7134600f89a051364f83c286cb4411" translate="yes" xml:space="preserve">
          <source>If no transformation rule match, the loader will begin rewriting the first of generic instructions to a specific instruction.</source>
          <target state="translated">変換ルールが一致しない場合、ローダは汎用命令の最初の命令から特定の命令への書き換えを開始します。</target>
        </trans-unit>
        <trans-unit id="d1d762df86c391a1b492c91b19c8e6c06437bbda" translate="yes" xml:space="preserve">
          <source>If no user configuration file is specified and Erlang is started in non-distributed or short name distributed mode, Erlang uses default configuration settings and a native lookup method that works correctly under most circumstances. Erlang reads no information from system &lt;code&gt;inet&lt;/code&gt; configuration files (such as &lt;code&gt;/etc/host.conf&lt;/code&gt; and &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt;) in these modes, except for &lt;code&gt;/etc/resolv.conf&lt;/code&gt; and &lt;code&gt;/etc/hosts&lt;/code&gt; that is read and monitored for changes on Unix platforms for the internal DNS client &lt;code&gt;inet_res(3)&lt;/code&gt;.</source>
          <target state="translated">ユーザー構成ファイルが指定されておらず、Erlangが非分散モードまたは短縮名分散モードで開始されている場合、Erlangはデフォルトの構成設定と、ほとんどの状況で正しく機能するネイティブルックアップメソッドを使用します。Erlang は、これらのモードでシステムの &lt;code&gt;inet&lt;/code&gt; 構成ファイル（ &lt;code&gt;/etc/host.conf&lt;/code&gt; や &lt;code&gt;/etc/nsswitch.conf&lt;/code&gt; など）から情報を読み取りません。ただし、 &lt;code&gt;/etc/hosts&lt;/code&gt; &lt;code&gt;/etc/resolv.conf&lt;/code&gt; と/ etc / hostsは読み取られ、変更が監視されます。内部DNSクライアントのUnixプラットフォームでは &lt;code&gt;inet_res(3)&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13936c5aba4f403aada92256e268f1fefbc0b6d4" translate="yes" xml:space="preserve">
          <source>If no value for &lt;code&gt;Retries&lt;/code&gt; is specified, &lt;code&gt;infinity&lt;/code&gt; is used.</source>
          <target state="translated">&lt;code&gt;Retries&lt;/code&gt; の値が指定されていない場合は、 &lt;code&gt;infinity&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="205ea9177e47ff562742443567460c481c26083e" translate="yes" xml:space="preserve">
          <source>If none of &lt;code&gt;delayed_write&lt;/code&gt; or &lt;code&gt;{delayed_write,Size,Delay}&lt;/code&gt; is found in the list, &lt;code&gt;delayed_write&lt;/code&gt; is added.</source>
          <target state="translated">いずれも場合 &lt;code&gt;delayed_write&lt;/code&gt; 又は &lt;code&gt;{delayed_write,Size,Delay}&lt;/code&gt; リストで発見されていない、 &lt;code&gt;delayed_write&lt;/code&gt; が添加されます。</target>
        </trans-unit>
        <trans-unit id="4b55a7b8716a559ffcad32612bbf10761dc5678f" translate="yes" xml:space="preserve">
          <source>If none of &lt;code&gt;write&lt;/code&gt;, &lt;code&gt;append&lt;/code&gt; or &lt;code&gt;exclusive&lt;/code&gt; is found in the list, &lt;code&gt;append&lt;/code&gt; is added.</source>
          <target state="translated">リストに &lt;code&gt;write&lt;/code&gt; 、 &lt;code&gt;append&lt;/code&gt; 、 &lt;code&gt;exclusive&lt;/code&gt; のいずれも見つからない場合は、 &lt;code&gt;append&lt;/code&gt; が追加されます。</target>
        </trans-unit>
        <trans-unit id="94c3223fb92528e085bdc89d88a03ccfd3c590d9" translate="yes" xml:space="preserve">
          <source>If none of the above are available for your architecture/compiler, you are recommended to build and install &lt;code&gt;&lt;a href=&quot;https://github.com/ivmai/libatomic_ops/&quot;&gt;libatomic_ops&lt;/a&gt;&lt;/code&gt; before building Erlang/OTP. The &lt;code&gt;libatomic_ops&lt;/code&gt; library provides native atomic memory operations for a variety of architectures and compilers. When building Erlang/OTP you need to inform the build system of where the &lt;code&gt;libatomic_ops&lt;/code&gt; library is installed using the &lt;code&gt;--with-libatomic_ops=PATH&lt;/code&gt;&lt;code&gt;configure&lt;/code&gt; switch.</source>
          <target state="translated">上記のいずれもアーキテクチャ/コンパイラで利用できない場合は、Erlang / OTP をビルドする前に &lt;code&gt;&lt;a href=&quot;https://github.com/ivmai/libatomic_ops/&quot;&gt;libatomic_ops&lt;/a&gt;&lt;/code&gt; をビルドしてインストールすることをお勧めします。 &lt;code&gt;libatomic_ops&lt;/code&gt; ライブラリは、アーキテクチャとコンパイラのさまざまなネイティブアトミックメモリ操作を提供します。Erlang / OTPをビルドする場合、 &lt;code&gt;libatomic_ops&lt;/code&gt; &lt;code&gt;--with-libatomic_ops=PATH&lt;/code&gt; &lt;code&gt;configure&lt;/code&gt; スイッチを使用してlibatomic_opsライブラリがインストールされている場所をビルドシステムに通知する必要があります。</target>
        </trans-unit>
        <trans-unit id="9440ff5a97925b9c13d62c177e03518391502a24" translate="yes" xml:space="preserve">
          <source>If none of the first three clauses match, the fourth clause match as a variable always matches.</source>
          <target state="translated">最初の3つの節のどれもマッチしない場合、変数としての第4節のマッチは常にマッチします。</target>
        </trans-unit>
        <trans-unit id="f62e5b4dade736a66aa048e49499435f1f4d7fdc" translate="yes" xml:space="preserve">
          <source>If none of the strings in &lt;code&gt;Pattern&lt;/code&gt; is found, the atom &lt;code&gt;nomatch&lt;/code&gt; is returned.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; 内の文字列が見つからない場合、アトム &lt;code&gt;nomatch&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="aeb11b61b9cc24cd2031d9dda015e2462ccc0499" translate="yes" xml:space="preserve">
          <source>If none of the strings in a pattern is found, an empty list is returned.</source>
          <target state="translated">パターン内の文字列が見つからない場合は、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="c826d8a5c30fbaafd8ba535e4315b2bb2ea4206a" translate="yes" xml:space="preserve">
          <source>If not containing a &quot;pre_shared_key&quot; extension, it MUST contain both a &quot;signature_algorithms&quot; extension and a &quot;supported_groups&quot; extension.</source>
          <target state="translated">pre_shared_key」拡張子を含まない場合、「signature_algorithms」拡張子と「supported_groups」拡張子の両方を含まなければならない[MUST]。</target>
        </trans-unit>
        <trans-unit id="652472f45cf3561f5b3dd17763a17700dfcd88cc" translate="yes" xml:space="preserve">
          <source>If not empty, a scheduler internal auxiliary work is scheduled to be done.</source>
          <target state="translated">空でなければ、スケジューラの内部補助作業が予定されています。</target>
        </trans-unit>
        <trans-unit id="9937b44a2ec57528d4de1534b4257202ba316ad9" translate="yes" xml:space="preserve">
          <source>If not implemented, the CTH acts as if this function returned a call to &lt;code&gt;make_ref/0&lt;/code&gt;.</source>
          <target state="translated">実装されていない場合、CTHは、この関数が &lt;code&gt;make_ref/0&lt;/code&gt; の呼び出しを返したかのように動作します。</target>
        </trans-unit>
        <trans-unit id="c288cca9f0fb59e5fd99ac4b40424bd7ecc21978" translate="yes" xml:space="preserve">
          <source>If not present, audit trail logging is not used.</source>
          <target state="translated">存在しない場合、監査証跡ロギングは使用されません。</target>
        </trans-unit>
        <trans-unit id="3dcb002efb7975058562ec638f68a0e701480231" translate="yes" xml:space="preserve">
          <source>If not set, &lt;code&gt;ei&lt;/code&gt; will implement the timeout using &lt;code&gt;select()&lt;/code&gt; in order to determine when to call the callbacks and when to time out. The &lt;code&gt;tmo&lt;/code&gt; arguments of the &lt;code&gt;accept()&lt;/code&gt;, &lt;code&gt;connect()&lt;/code&gt;, &lt;code&gt;writev()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and &lt;code&gt;read()&lt;/code&gt; callbacks should be ignored. The callbacks may be called in non-blocking mode. The callbacks are not allowed to change between blocking and non-blocking mode. In order for this to work, &lt;code&gt;select()&lt;/code&gt; needs to interact with the socket primitives used the same way as it interacts with the ordinary socket primitives. If this is not the case, the callbacks &lt;strong&gt;need&lt;/strong&gt; to implement timeouts and this flag should be set.</source>
          <target state="translated">設定されていない場合、 &lt;code&gt;ei&lt;/code&gt; は、コールバックを呼び出すタイミングとタイムアウトするタイミングを決定するために、 &lt;code&gt;select()&lt;/code&gt; を使用してタイムアウトを実装します。 &lt;code&gt;accept()&lt;/code&gt; 、 &lt;code&gt;connect()&lt;/code&gt; 、 &lt;code&gt;writev()&lt;/code&gt; 、 &lt;code&gt;write()&lt;/code&gt; 、および &lt;code&gt;read()&lt;/code&gt; コールバックの &lt;code&gt;tmo&lt;/code&gt; 引数は無視する必要があります。コールバックは、非ブロッキングモードで呼び出すことができます。コールバックは、ブロッキングモードと非ブロッキングモードの間で変更することはできません。これが機能するためには、 &lt;code&gt;select()&lt;/code&gt; が通常のソケットプリミティブと相互作用するのと同じ方法で使用されるソケットプリミティブと相互作用する必要があります。そうでない場合、コールバック&lt;strong&gt;は&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt; タイムアウトを実装するには、このフラグを設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="0e3b7ad4aa64090ecee7bb02c7f143402ada38cd" translate="yes" xml:space="preserve">
          <source>If not, the &lt;code&gt;&lt;a href=&quot;#type-reason&quot;&gt;reason()&lt;/a&gt;&lt;/code&gt; indicates what went wrong:</source>
          <target state="translated">そうでない場合、 &lt;code&gt;&lt;a href=&quot;#type-reason&quot;&gt;reason()&lt;/a&gt;&lt;/code&gt; は何がうまくいかなかったかを示します。</target>
        </trans-unit>
        <trans-unit id="29e29374c41854c469f97e992cbb29625d1d3ef4" translate="yes" xml:space="preserve">
          <source>If not, this is the atom &lt;code&gt;all&lt;/code&gt; which implies that the &lt;code&gt;UtilDesc&lt;/code&gt; contains information about all CPUs.</source>
          <target state="translated">そうでない場合、これは &lt;code&gt;UtilDesc&lt;/code&gt; にすべてのCPUに関する情報が含まれていることを意味するアトム &lt;code&gt;all&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f15293549ba601ce95a5307be4274cf3a235ee45" translate="yes" xml:space="preserve">
          <source>If not, this is the sum of the percentage shares of the CPU cycles spent in all states identified as busy.</source>
          <target state="translated">そうでない場合は、ビジー状態であると識別されたすべての状態で使用されたCPUサイクルの割合の合計です。</target>
        </trans-unit>
        <trans-unit id="a5425f5051ad47a7b173e5435c9b894080331b92" translate="yes" xml:space="preserve">
          <source>If nothing else is stated, it is presumed that the &lt;code&gt;otptest&lt;/code&gt; user has an entry in the &lt;strong&gt;authorized_keys&lt;/strong&gt; file of &lt;strong&gt;tarlop&lt;/strong&gt; (allowed to log in over &lt;code&gt;ssh&lt;/code&gt; without entering a password). Also, &lt;strong&gt;tarlop&lt;/strong&gt; is a known host in the &lt;code&gt;known_hosts&lt;/code&gt; file of the user &lt;code&gt;otptest&lt;/code&gt;. This means that host-verification can be done without user-interaction.</source>
          <target state="translated">他に何も述べられていない場合、と推測される &lt;code&gt;otptest&lt;/code&gt; ユーザがエントリがある&lt;strong&gt;のauthorized_keys&lt;/strong&gt;のファイル&lt;strong&gt;tarlopを&lt;/strong&gt;（オーバーでログインを許可 &lt;code&gt;ssh&lt;/code&gt; のパスワードを入力せずに）。また、&lt;strong&gt;tarlop&lt;/strong&gt;は、ユーザー &lt;code&gt;otptest&lt;/code&gt; の &lt;code&gt;known_hosts&lt;/code&gt; ファイルにある既知のホストです。つまり、ホストの検証は、ユーザーの操作なしで実行できます。</target>
        </trans-unit>
        <trans-unit id="85b52863c7b73a113224224b8a0c4d01a407b7d9" translate="yes" xml:space="preserve">
          <source>If objects have been added while the table was fixed, the hash list starts to grow when the table is released, which significantly slows down access to the table for a period of time.</source>
          <target state="translated">テーブルが固定されている間にオブジェクトが追加されていた場合、テーブルが解放されたときにハッシュリストが成長し始め、一定期間テーブルへのアクセスが大幅に遅くなります。</target>
        </trans-unit>
        <trans-unit id="828acc15f06ea3d0ebf75bc3294946979fd85c6d" translate="yes" xml:space="preserve">
          <source>If on the other hand the Version argument is an integer, it means that this is the expected version of the message and the decoder for that version should be used.</source>
          <target state="translated">一方、引数Versionが整数の場合は、これが期待されるメッセージのバージョンであり、そのバージョン用のデコーダを使用する必要があることを意味します。</target>
        </trans-unit>
        <trans-unit id="7ee7ad00a53993074166a752357e3a491c2d6eb1" translate="yes" xml:space="preserve">
          <source>If one &lt;strong&gt;really&lt;/strong&gt; wants to monitor when the driver gets unloaded, this message distorts the picture, because no unloading was done. Option &lt;code&gt;unloaded_only&lt;/code&gt; creates a monitor similar to an &lt;code&gt;unloaded&lt;/code&gt; monitor, but never results in this message.</source>
          <target state="translated">1の場合は&lt;strong&gt;本当に&lt;/strong&gt;ドライバーがアンロードされますときに監視したい何のアンロードが行われなかったため、このメッセージは、画像を歪めます。オプションは &lt;code&gt;unloaded_only&lt;/code&gt; に似てモニターを作成 &lt;code&gt;unloaded&lt;/code&gt; モニターを、このメッセージにつながることはありません。</target>
        </trans-unit>
        <trans-unit id="c5ebea37f196f871b2a70d380f83941fc18ead49" translate="yes" xml:space="preserve">
          <source>If one UTF character is split over two consecutive binaries in the &lt;code&gt;Data&lt;/code&gt;, the conversion succeeds. This means that a character can be decoded from a range of binaries as long as the whole range is specified as input without errors occurring.</source>
          <target state="translated">1つのUTF文字が &lt;code&gt;Data&lt;/code&gt; 内の2つの連続するバイナリに分割されている場合、変換は成功します。つまり、範囲全体が入力として指定されている限り、エラーは発生せずに、バイナリの範囲から文字をデコードできます。</target>
        </trans-unit>
        <trans-unit id="90ed92af5805bd230adc121faf96993bce08b918" translate="yes" xml:space="preserve">
          <source>If one of the &lt;code&gt;ERL_NIF_DIRTY_JOB_*_BOUND&lt;/code&gt; flags is set, and the runtime system has no support for dirty schedulers, the runtime system refuses to load the NIF library.</source>
          <target state="translated">&lt;code&gt;ERL_NIF_DIRTY_JOB_*_BOUND&lt;/code&gt; フラグの1つが設定されていて、ランタイムシステムがダーティスケジューラをサポートしていない場合、ランタイムシステムはNIFライブラリのロードを拒否します。</target>
        </trans-unit>
        <trans-unit id="da2865f4d243741aece7d05e455898a782a870b4" translate="yes" xml:space="preserve">
          <source>If one of the nodes cannot process monitors, for example, C or Java nodes, and the &lt;code&gt;gen_server&lt;/code&gt; process is not started when the requests are sent, but starts within 2 seconds, this function waits the whole &lt;code&gt;Timeout&lt;/code&gt;, which may be infinity.</source>
          <target state="translated">ノードの1つがモニターを処理できない場合（CノードやJavaノードなど）、要求の送信時に &lt;code&gt;gen_server&lt;/code&gt; プロセスが開始されず、2秒以内に開始される場合、この関数は &lt;code&gt;Timeout&lt;/code&gt; 全体を待機します。</target>
        </trans-unit>
        <trans-unit id="2ff50154efe11e68e30a0801c8327e55b0714e5d" translate="yes" xml:space="preserve">
          <source>If one or more carriers could not be scanned in full without harming the responsiveness of the system, &lt;code&gt;UnscannedSize&lt;/code&gt; is the number of bytes that had to be skipped.</source>
          <target state="translated">システムの応答性を損なうことなく1つ以上のキャリアを完全にスキャンできなかった場合、 &lt;code&gt;UnscannedSize&lt;/code&gt; はスキップする必要があったバイト数です。</target>
        </trans-unit>
        <trans-unit id="9b3b6b44750cd929fb5194f2e7f17a52f91bfeb2" translate="yes" xml:space="preserve">
          <source>If only one access file exists, setting this parameter to &lt;code&gt;none&lt;/code&gt; can ease the burden on the server as the server then stops looking for access files.</source>
          <target state="translated">アクセスファイルが1つしか存在しない場合、このパラメーターを &lt;code&gt;none&lt;/code&gt; に設定すると、サーバーがアクセスファイルの検索を停止するため、サーバーの負担を軽減できます。</target>
        </trans-unit>
        <trans-unit id="78efdbd37020ca2e2d25f04642dce2c0495aa809" translate="yes" xml:space="preserve">
          <source>If only one letter is specified with \p or \P, it includes all the general category properties that start with that letter. In this case, in the absence of negation, the curly brackets in the escape sequence are optional. The following two examples have the same effect:</source>
          <target state="translated">1文字だけが\pまたは\Pで指定される場合、その文字で始まるすべての一般的なカテゴリプロパティを含む。この場合、否定がない場合、エスケープシーケンスの中の中括弧は任意である。以下の2つの例は、同じ効果を持つ。</target>
        </trans-unit>
        <trans-unit id="d1f740d3ae5b1c6572bd4172c4f16e8373ec6b45" translate="yes" xml:space="preserve">
          <source>If only one value is present, it is the current value. &lt;code&gt;fix_alloc&lt;/code&gt; memory block types are presented by two values. The first value is the memory pool size and the second value is the used memory size.</source>
          <target state="translated">値が1つしかない場合は、それが現在の値です。 &lt;code&gt;fix_alloc&lt;/code&gt; メモリブロックタイプは、2つの値で表されます。最初の値はメモリプールサイズで、2番目の値は使用済みメモリサイズです。</target>
        </trans-unit>
        <trans-unit id="c5da55d1092af23b098acf7d69c8679113b881cd" translate="yes" xml:space="preserve">
          <source>If only the module name (i.e. not the full name of the &lt;code&gt;.beam&lt;/code&gt; file) is given to this function, the &lt;code&gt;.beam&lt;/code&gt; file is found by calling &lt;code&gt;code:which(Module)&lt;/code&gt;. If no &lt;code&gt;.beam&lt;/code&gt; file is found, the error reason &lt;code&gt;non_existing&lt;/code&gt; is returned. If the module is already cover compiled with &lt;code&gt;compile_beam/1&lt;/code&gt;, the &lt;code&gt;.beam&lt;/code&gt; file will be picked from the same location as the first time it was compiled. If the module is already cover compiled with &lt;code&gt;compile/1,2&lt;/code&gt;, there is no way to find the correct &lt;code&gt;.beam&lt;/code&gt; file, so the error reason &lt;code&gt;{already_cover_compiled,no_beam_found,Module}&lt;/code&gt; is returned.</source>
          <target state="translated">この関数にモジュール名のみ（つまり、 &lt;code&gt;.beam&lt;/code&gt; ファイルの完全な名前ではない）だけが指定されている場合、 &lt;code&gt;code:which(Module)&lt;/code&gt; を呼び出すと、 &lt;code&gt;.beam&lt;/code&gt; ファイルが見つかります。何場合 &lt;code&gt;.beam&lt;/code&gt; ファイルが見つからない、エラー理由 &lt;code&gt;non_existing&lt;/code&gt; が返されます。モジュールがすでに &lt;code&gt;compile_beam/1&lt;/code&gt; でコンパイル済みの場合、 &lt;code&gt;.beam&lt;/code&gt; ファイルは、最初にコンパイルされたときと同じ場所から選択されます。モジュールがすでに &lt;code&gt;compile/1,2&lt;/code&gt; でカバーコンパイルされている場合、正しい &lt;code&gt;.beam&lt;/code&gt; ファイルを見つける方法がないため、エラー理由 &lt;code&gt;{already_cover_compiled,no_beam_found,Module}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="84bdcab65ed9e153d52722d8ccf698faa98c0614" translate="yes" xml:space="preserve">
          <source>If only undefined options are requested the resulting list can be empty.</source>
          <target state="translated">未定義のオプ シ ョ ンのみを要求 し た場合は、 結果の リ ス ト は空にな る こ と がで き ます。</target>
        </trans-unit>
        <trans-unit id="c3d6b0c4be9ac174bfcec9988c3498fdbe5d2f55" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;&lt;a href=&quot;#type-debug_opt&quot;&gt;{debug,Dbgs}&lt;/a&gt;&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, debugging through &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; is activated.</source>
          <target state="translated">オプション &lt;code&gt;&lt;a href=&quot;#type-debug_opt&quot;&gt;{debug,Dbgs}&lt;/a&gt;&lt;/code&gt; が &lt;code&gt;Opts&lt;/code&gt; に存在する場合、 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; によるデバッグがアクティブになります。</target>
        </trans-unit>
        <trans-unit id="0d1d165321c33bcdb22f8f6a5267e4f891a4d819" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;&lt;a href=&quot;#type-enter_loop_opt&quot;&gt; {debug,Dbgs} &lt;/a&gt;&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, debugging through &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; is activated.</source>
          <target state="translated">オプション &lt;code&gt;&lt;a href=&quot;#type-enter_loop_opt&quot;&gt; {debug,Dbgs} &lt;/a&gt;&lt;/code&gt; が &lt;code&gt;Opts&lt;/code&gt; に存在する場合、 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys&lt;/a&gt;&lt;/code&gt; を介したデバッグがアクティブ化されます。</target>
        </trans-unit>
        <trans-unit id="16ab9ca1d15e67f3dd0537fe7133aa59008f55d3" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;&lt;a href=&quot;#type-enter_loop_opt&quot;&gt; {hibernate_after,HibernateAfterTimeout} &lt;/a&gt;&lt;/code&gt; is present, the &lt;code&gt;gen_statem&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">オプション &lt;code&gt;&lt;a href=&quot;#type-enter_loop_opt&quot;&gt; {hibernate_after,HibernateAfterTimeout} &lt;/a&gt;&lt;/code&gt; が存在する場合、 &lt;code&gt;gen_statem&lt;/code&gt; プロセスは &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; ミリ秒の間メッセージを待機し、メッセージが受信されない場合、プロセスは自動的に休止状態になります（ &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を呼び出すことにより）。</target>
        </trans-unit>
        <trans-unit id="ed3aa68b73e10a456d4b0d56c548ffefa2777a94" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;&lt;a href=&quot;#type-start_opt&quot;&gt; {spawn_opt,SpawnOpts} &lt;/a&gt;&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, &lt;code&gt;SpawnOpts&lt;/code&gt; is passed as option list to &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt;, which is used to spawn the &lt;code&gt;gen_statem&lt;/code&gt; process.</source>
          <target state="translated">オプション &lt;code&gt;&lt;a href=&quot;#type-start_opt&quot;&gt; {spawn_opt,SpawnOpts} &lt;/a&gt;&lt;/code&gt; が &lt;code&gt;Opts&lt;/code&gt; に存在する場合、 &lt;code&gt;SpawnOpts&lt;/code&gt; はオプションリストとして &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt; に渡されます。これは、 &lt;code&gt;gen_statem&lt;/code&gt; プロセスを生成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="cba326e78241846819e3473e15898cf1eb3e7fec" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;&lt;a href=&quot;#type-start_opt&quot;&gt; {timeout,Time} &lt;/a&gt;&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, the &lt;code&gt;gen_statem&lt;/code&gt; is allowed to spend &lt;code&gt;Time&lt;/code&gt; milliseconds initializing or it terminates and the start function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,timeout}&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;&lt;a href=&quot;#type-start_opt&quot;&gt; {timeout,Time} &lt;/a&gt;&lt;/code&gt; が &lt;code&gt;Opts&lt;/code&gt; に存在する場合、 &lt;code&gt;gen_statem&lt;/code&gt; は初期化に &lt;code&gt;Time&lt;/code&gt; ミリ秒を費やすことが許可されるか、終了してstart関数が &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,timeout}&lt;/a&gt;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="769611976869b84c5779bcf180081ddcd9ad1bfa" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;c&lt;/code&gt; is used with &lt;code&gt;oldshell&lt;/code&gt; on Unix, &lt;code&gt;Ctrl-C&lt;/code&gt; will restart the shell process rather than interrupt it.</source>
          <target state="translated">オプション &lt;code&gt;c&lt;/code&gt; がUnixの &lt;code&gt;oldshell&lt;/code&gt; で使用される場合、 &lt;code&gt;Ctrl-C&lt;/code&gt; はシェルプロセスを中断するのではなく再起動します。</target>
        </trans-unit>
        <trans-unit id="096a0eaa955fff41e809fc817940102bc82e3b7a" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;compact&lt;/code&gt; is specified, the trailing zeros at the end of the list are truncated. This option is only meaningful together with option &lt;code&gt;decimals&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;compact&lt;/code&gt; が指定されている場合、リストの最後の後続ゼロは切り捨てられます。このオプションは、オプション &lt;code&gt;decimals&lt;/code&gt; と共にのみ意味があります。</target>
        </trans-unit>
        <trans-unit id="e006a20906cf19e410666b42e37a9c3e19a3e41a" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;compressed&lt;/code&gt; is provided, the external term format is compressed. The compressed format is automatically recognized by &lt;code&gt;binary_to_term/1&lt;/code&gt; as from Erlang/OTP R7B.</source>
          <target state="translated">&lt;code&gt;compressed&lt;/code&gt; オプションが提供されている場合、外部用語形式は圧縮されます。圧縮形式は、Erlang / OTP R7Bからのものとして、 &lt;code&gt;binary_to_term/1&lt;/code&gt; によって自動的に認識されます。</target>
        </trans-unit>
        <trans-unit id="5de3ee850f4f14cadbc9c1e776ec192b168f5ad1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;decimals&lt;/code&gt; is specified, the returned value contains at most &lt;code&gt;Decimals&lt;/code&gt; number of digits past the decimal point. If the number does not fit in the internal static buffer of 256 bytes, the function throws &lt;code&gt;badarg&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;decimals&lt;/code&gt; が指定されている場合、戻り値には、小数点以下最大で &lt;code&gt;Decimals&lt;/code&gt; 桁の数字が含まれます。数値が256バイトの内部静的バッファーに収まらない場合、関数は &lt;code&gt;badarg&lt;/code&gt; をスローします。</target>
        </trans-unit>
        <trans-unit id="4d32ea21453f7c1a1069cac8907bb379c47719c1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;eof&lt;/code&gt; is specified also, the messages &lt;code&gt;eof&lt;/code&gt; and &lt;code&gt;exit_status&lt;/code&gt; appear in an unspecified order.</source>
          <target state="translated">オプション &lt;code&gt;eof&lt;/code&gt; も指定されている場合、メッセージ &lt;code&gt;eof&lt;/code&gt; および &lt;code&gt;exit_status&lt;/code&gt; が不特定の順序で表示されます。</target>
        </trans-unit>
        <trans-unit id="32ae7856c177425822832835b7fef1768d20a52e" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;force&lt;/code&gt; has been passed, but the driver of the port does not allow forcing through a busy port.</source>
          <target state="translated">オプション &lt;code&gt;force&lt;/code&gt; が渡されたが、ポートのドライバーがビジー状態のポートを強制することを許可していない場合。</target>
        </trans-unit>
        <trans-unit id="441c9bb025fc2889c41f42aea8b90d9817c38b34" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;format&lt;/code&gt; is specified to &lt;code&gt;ttb:stop/1&lt;/code&gt;, the formatting is automatically done when stopping &lt;code&gt;ttb&lt;/code&gt;.</source>
          <target state="translated">オプションの &lt;code&gt;format&lt;/code&gt; が &lt;code&gt;ttb:stop/1&lt;/code&gt; に指定されている場合、フォーマットは &lt;code&gt;ttb&lt;/code&gt; の停止時に自動的に行われます。</target>
        </trans-unit>
        <trans-unit id="5d2376aceac49d07a344ae2362a017172221e3a6" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;format&lt;/code&gt; is specified to &lt;code&gt;ttb:stop/1&lt;/code&gt;, the trace logs are automatically formatted after tracing is stopped.</source>
          <target state="translated">オプションの &lt;code&gt;format&lt;/code&gt; が &lt;code&gt;ttb:stop/1&lt;/code&gt; に指定されている場合、トレースが停止すると、トレースログは自動的にフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="06c4d5d9e31e528aa6774014ad6ec78d401b5e9f" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;info&lt;/code&gt; is combined with option &lt;code&gt;flush&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt; is returned if a flush was needed, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">オプションの場合は &lt;code&gt;info&lt;/code&gt; オプションと組み合わせた &lt;code&gt;flush&lt;/code&gt; 、 &lt;code&gt;false&lt;/code&gt; フラッシュが必要になった場合にはそうでない場合は、返される &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="6c6534bbbe7210a2a4f9c6ad85ccdb4879fb04d3" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;kill_ports&lt;/code&gt; is used, monitor trigging is crucial, as the ports are not guaranteed to be killed until the driver is unloaded. Thus, a monitor must be triggered for at least the &lt;code&gt;pending_driver&lt;/code&gt; case.</source>
          <target state="translated">オプション &lt;code&gt;kill_ports&lt;/code&gt; を使用する場合、ドライバーがアンロードされるまでポートが強制終了されることが保証されていないため、モニターのトリガーは重要です。したがって、少なくとも &lt;code&gt;pending_driver&lt;/code&gt; のケースではモニターをトリガーする必要があります。</target>
        </trans-unit>
        <trans-unit id="6aa1db8f0800b8eada993c86c8a59c1d17dfb52c" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;linked_in_driver&lt;/code&gt; or &lt;code&gt;permanent&lt;/code&gt; returns &lt;code&gt;true&lt;/code&gt;, all other options return &lt;code&gt;linked_in_driver&lt;/code&gt; or &lt;code&gt;permanent&lt;/code&gt;, respectively.</source>
          <target state="translated">オプションの場合 &lt;code&gt;linked_in_driver&lt;/code&gt; または &lt;code&gt;permanent&lt;/code&gt; 戻り &lt;code&gt;true&lt;/code&gt; 、他のすべてのオプションを返す &lt;code&gt;linked_in_driver&lt;/code&gt; または &lt;code&gt;permanent&lt;/code&gt; それぞれ。</target>
        </trans-unit>
        <trans-unit id="c57ff6b7c6782f60fe59ca940f65912e4d479346" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;monitor&lt;/code&gt; is specified, the newly created process is monitored, and both the pid and reference for the monitor are returned.</source>
          <target state="translated">オプション &lt;code&gt;monitor&lt;/code&gt; を指定すると、新しく作成されたプロセスが監視され、pidとモニターの参照の両方が返されます。</target>
        </trans-unit>
        <trans-unit id="04d4436e947c7fe2bfe4be7b9ccd10a7ac2337af" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;no_dot_erlang&lt;/code&gt; is specified, the instruction to load the &lt;code&gt;.erlang&lt;/code&gt; file during boot is &lt;strong&gt;not&lt;/strong&gt; included.</source>
          <target state="translated">オプション &lt;code&gt;no_dot_erlang&lt;/code&gt; が指定されている場合、起動中に &lt;code&gt;.erlang&lt;/code&gt; ファイルをロードする命令&lt;strong&gt;は&lt;/strong&gt;含まれ&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="dd0a5200f0c674efc5a1ca9a83309cd9b7fe26b6" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;noexec&lt;/code&gt; is specified, the function returns the same values as for &lt;code&gt;silent&lt;/code&gt; but no &lt;code&gt;relup&lt;/code&gt; file is created.</source>
          <target state="translated">オプション &lt;code&gt;noexec&lt;/code&gt; が指定されている場合、関数は &lt;code&gt;silent&lt;/code&gt; と同じ値を返しますが、 &lt;code&gt;relup&lt;/code&gt; ファイルは作成されません。</target>
        </trans-unit>
        <trans-unit id="3c2f80ddb4accdf1246a3219780f43c13b4e27f2" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;purge&lt;/code&gt; is specified, all old code that can be soft-purged is purged after all other checks are successfully completed. This can be useful to reduce the time needed by &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;purge&lt;/code&gt; が指定されている場合、他のすべてのチェックが正常に完了した後、ソフトパージできるすべての古いコードがパージされます。これは、 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1&lt;/a&gt;&lt;/code&gt; に必要な時間を短縮するのに役立ちます。</target>
        </trans-unit>
        <trans-unit id="f207e9cbf62b31891d035fb3346f08b4121c927b" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;restart_emulator&lt;/code&gt; is specified, a low-level instruction to restart the emulator is appended to the &lt;code&gt;relup&lt;/code&gt; file. This ensures that a complete reboot of the system is done when the system is upgraded or downgraded.</source>
          <target state="translated">オプション &lt;code&gt;restart_emulator&lt;/code&gt; が指定されている場合、エミュレータを再起動するための低レベルの命令が &lt;code&gt;relup&lt;/code&gt; ファイルに追加されます。これにより、システムがアップグレードまたはダウングレードされたときに、システムが完全に再起動されます。</target>
        </trans-unit>
        <trans-unit id="ef31277dfcdd9b3fea33e70696e85cc6a58e6495" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;scientific&lt;/code&gt; is specified, the float is formatted using scientific notation with &lt;code&gt;Decimals&lt;/code&gt; digits of precision.</source>
          <target state="translated">オプション場合 &lt;code&gt;scientific&lt;/code&gt; 指定され、フロートを有する科学的表記法を使用してフォーマットされた &lt;code&gt;Decimals&lt;/code&gt; 精度の桁。</target>
        </trans-unit>
        <trans-unit id="68354b12f57b501c10eb39d65b11549593ad808d" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;src_tests&lt;/code&gt; is specified, a warning is issued if the source code for a module is missing or is newer than the object code.</source>
          <target state="translated">オプション &lt;code&gt;src_tests&lt;/code&gt; が指定されている場合、モジュールのソースコードが見つからないか、オブジェクトコードよりも新しい場合、警告が発行されます。</target>
        </trans-unit>
        <trans-unit id="3b698628086185a232f3b1c8c64f2b5821c29478" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;sync&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, it ensures that the content of the file is written to the disk before &lt;code&gt;tab2file&lt;/code&gt; returns. Defaults to &lt;code&gt;{sync, false}&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;sync&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; に設定されている場合、 &lt;code&gt;tab2file&lt;/code&gt; が戻る前に、ファイルのコンテンツがディスクに書き込まれることが保証されます。デフォルトは &lt;code&gt;{sync, false}&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="16c1274c0980810787faf4c8323f084b49c5a2fa" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;ungreedy&lt;/code&gt; is set (an option that is not available in Perl), the quantifiers are not greedy by default, but individual ones can be made greedy by following them with a question mark. That is, it inverts the default behavior.</source>
          <target state="translated">オプション &lt;code&gt;ungreedy&lt;/code&gt; が設定されている場合（Perlでは使用できないオプション）、量指定子はデフォルトでは貪欲ではありませんが、疑問符を付けることで個々の量指定子を貪欲にすることができます。つまり、デフォルトの動作を反転させます。</target>
        </trans-unit>
        <trans-unit id="6ebecfa9ef794349da407c48663db38e0205dfc1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;url_base&lt;/code&gt; is set, an extra attribute named &lt;code&gt;url&lt;/code&gt; is added to each &lt;code&gt;testsuite&lt;/code&gt; and &lt;code&gt;testcase&lt;/code&gt; XML element. The value is constructed from &lt;code&gt;url_base&lt;/code&gt; and a relative path to the test suite or test case log, respectively, for example:</source>
          <target state="translated">オプションの場合 &lt;code&gt;url_base&lt;/code&gt; が設定され、余分な属性という名前の &lt;code&gt;url&lt;/code&gt; それぞれに追加された &lt;code&gt;testsuite&lt;/code&gt; と &lt;code&gt;testcase&lt;/code&gt; XML要素。値は、 &lt;code&gt;url_base&lt;/code&gt; およびテストスイートまたはテストケースログへの相対パスからそれぞれ構成されます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="7a53503422cb0ac19329aceb31af878b5ec300e5" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;warnings_as_errors&lt;/code&gt; is specified, warnings are treated as errors.</source>
          <target state="translated">オプション &lt;code&gt;warnings_as_errors&lt;/code&gt; が指定されている場合、警告はエラーとして扱われます。</target>
        </trans-unit>
        <trans-unit id="41ac36f3b8b38269747bee1634966538895f2ee4" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{debug,Dbgs}&lt;/code&gt; is present, the corresponding &lt;code&gt;sys&lt;/code&gt; function is called for each item in &lt;code&gt;Dbgs&lt;/code&gt;; see &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{debug,Dbgs}&lt;/code&gt; が存在する場合、対応する &lt;code&gt;sys&lt;/code&gt; 関数が &lt;code&gt;Dbgs&lt;/code&gt; の各アイテムに対して呼び出されます。 &lt;code&gt;&lt;a href=&quot;sys&quot;&gt;sys(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="65c08f8f94d4db76f6cc364152658be9a80df8fa" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{handshake, hello}&lt;/code&gt; is specified the handshake is paused after receiving the client hello message and the success response is &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; instead of &lt;code&gt;{ok, SslSocket}&lt;/code&gt;. Thereafter the handshake is continued or canceled by calling &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt; handshake_continue/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{handshake, hello}&lt;/code&gt; が指定されている場合、クライアントhelloメッセージの受信後にハンドシェイクが一時停止され、成功応答は &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; ではなく{ok、SslSocket、Ext}に &lt;code&gt;{ok, SslSocket}&lt;/code&gt; 。その後、handshake_continue &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt; handshake_continue/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、ハンドシェイクが続行またはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="e804aab039286890448ffee48895432a1b352c17" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{handshake, hello}&lt;/code&gt; is specified the handshake is paused after receiving the client hello message and the success response is &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; instead of &lt;code&gt;{ok, SslSocket}&lt;/code&gt;. Thereafter the handshake is continued or canceled by calling &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{handshake, hello}&lt;/code&gt; が指定されている場合、クライアントのhelloメッセージの受信後にハンドシェイクが一時停止され、成功の応答は &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; ではなく{ok、SslSocket、Ext}に &lt;code&gt;{ok, SslSocket}&lt;/code&gt; 。その後、handshake_continue &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、ハンドシェイクが続行またはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="9802b121f3f842baa16ccec18f6827e8efefe976" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; is present, the &lt;code&gt;gen_event&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">オプション &lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; が存在する場合、 &lt;code&gt;gen_event&lt;/code&gt; プロセスはメッセージを &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; ミリ秒待機し、メッセージが受信されない場合、プロセスは自動的に休止状態になります（ &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を呼び出すことにより）。</target>
        </trans-unit>
        <trans-unit id="80d6ad9348d486b54eb01008ea70fa22ab22a998" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; is present, the &lt;code&gt;gen_server&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">オプション &lt;code&gt;{hibernate_after,HibernateAfterTimeout}&lt;/code&gt; が存在する場合、 &lt;code&gt;gen_server&lt;/code&gt; プロセスは &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; ミリ秒の間メッセージを待ち、メッセージが受信されない場合、プロセスは自動的に休止状態になります（ &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を呼び出すことにより）。</target>
        </trans-unit>
        <trans-unit id="1afccf80e87b972a02a03ba25b3fcfd4c6d492f1" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{path,[Dir]}&lt;/code&gt; is specified, this path is appended to the current path. A directory in the path can be specified with a wildcard &lt;code&gt;*&lt;/code&gt;, this is expanded to all matching directories. Example: &lt;code&gt;&quot;lib/*/ebin&quot;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{path,[Dir]}&lt;/code&gt; が指定されている場合、このパスは現在のパスに追加されます。パス内のディレクトリはワイルドカード &lt;code&gt;*&lt;/code&gt; で指定できます。これは、一致するすべてのディレクトリに展開されます。例： &lt;code&gt;&quot;lib/*/ebin&quot;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="521a357383f837ccbed508cea165f5ba1a72a4ba" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{path,[Dir]}&lt;/code&gt; is specified, this path is appended to the current path. Wildcard &lt;code&gt;*&lt;/code&gt; is expanded to all matching directories, for example, &lt;code&gt;lib/*/ebin&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{path,[Dir]}&lt;/code&gt; が指定されている場合、このパスは現在のパスに追加されます。ワイルドカード &lt;code&gt;*&lt;/code&gt; は、 &lt;code&gt;lib/*/ebin&lt;/code&gt; など、一致するすべてのディレクトリに展開されます。</target>
        </trans-unit>
        <trans-unit id="5a5e0fc842c3e7f86267427d3814bd82d53e295a" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{spawn_opt,SOpts}&lt;/code&gt; is present, &lt;code&gt;SOpts&lt;/code&gt; is passed as option list to the &lt;code&gt;spawn_opt&lt;/code&gt; BIF, which is used to spawn the &lt;code&gt;gen_server&lt;/code&gt; process; see &lt;code&gt; spawn_opt/2&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{spawn_opt,SOpts}&lt;/code&gt; が存在する場合、 &lt;code&gt;SOpts&lt;/code&gt; はオプションリストとして &lt;code&gt;spawn_opt&lt;/code&gt; BIFに渡されます。これは、 &lt;code&gt;gen_server&lt;/code&gt; プロセスを生成するために使用されます。 &lt;code&gt; spawn_opt/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="319e803f0c4dc5797ff076e88abf3ae72c4731f8" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{spawn_opt,SOpts}&lt;/code&gt; is present, &lt;code&gt;SOpts&lt;/code&gt; is passed as option list to the &lt;code&gt;spawn_opt&lt;/code&gt; BIF, which is used to spawn the &lt;code&gt;gen_server&lt;/code&gt; process; see &lt;code&gt;spawn_opt/2&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{spawn_opt,SOpts}&lt;/code&gt; が存在する場合、 &lt;code&gt;SOpts&lt;/code&gt; はオプションリストとして &lt;code&gt;spawn_opt&lt;/code&gt; BIFに渡され、BIFは &lt;code&gt;gen_server&lt;/code&gt; プロセスを生成するために使用されます。 &lt;code&gt;spawn_opt/2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="f134a5284d4d1605e5d535d5f02614e7f9564b83" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{spawn_opt,SpawnOpts}&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, &lt;code&gt;SpawnOpts&lt;/code&gt; is passed as option list to &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt;, which is used to spawn the &lt;code&gt;gen_statem&lt;/code&gt; process.</source>
          <target state="translated">オプション &lt;code&gt;{spawn_opt,SpawnOpts}&lt;/code&gt; が &lt;code&gt;Opts&lt;/code&gt; に存在する場合、 &lt;code&gt;SpawnOpts&lt;/code&gt; はオプションリストとして &lt;code&gt;erlang:spawn_opt/2&lt;/code&gt; に渡されます。これは、 &lt;code&gt;gen_statem&lt;/code&gt; プロセスを生成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="c971670358afb5846db5d77c2b0b19aad5a3c579" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{timeout,Time}&lt;/code&gt; is present in &lt;code&gt;Opts&lt;/code&gt;, the &lt;code&gt;gen_statem&lt;/code&gt; is allowed to spend &lt;code&gt;Time&lt;/code&gt; milliseconds initializing or it terminates and the start function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,timeout}&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{timeout,Time}&lt;/code&gt; が &lt;code&gt;Opts&lt;/code&gt; に存在する場合、 &lt;code&gt;gen_statem&lt;/code&gt; は初期化に &lt;code&gt;Time&lt;/code&gt; ミリ秒を費やすことが許可されているか、終了して終了関数が &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,timeout}&lt;/a&gt;&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="341a32ddba103c08ae86b78ec53524b7702998b8" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{timeout,Time}&lt;/code&gt; is present, the &lt;code&gt;gen_server&lt;/code&gt; process is allowed to spend &lt;code&gt;Time&lt;/code&gt; milliseconds initializing or it is terminated and the start function returns &lt;code&gt;{error,timeout}&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{timeout,Time}&lt;/code&gt; が存在する場合、 &lt;code&gt;gen_server&lt;/code&gt; プロセスは初期化に &lt;code&gt;Time&lt;/code&gt; ミリ秒を費やすことが許可されているか、終了して終了関数が &lt;code&gt;{error,timeout}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="a928786d0e9ca7308ebc039e35ade6afdfb8bc1d" translate="yes" xml:space="preserve">
          <source>If option &lt;code&gt;{tls, tls_options()}&lt;/code&gt; is present, the FTP session is transported over &lt;code&gt;tls&lt;/code&gt; (&lt;code&gt;ftps&lt;/code&gt;, see &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;RFC 4217&lt;/a&gt;&lt;/code&gt;). The list &lt;code&gt;tls_options()&lt;/code&gt; can be empty. The function &lt;code&gt;ssl:connect/3&lt;/code&gt; is used for securing both the control connection and the data sessions.</source>
          <target state="translated">オプション &lt;code&gt;{tls, tls_options()}&lt;/code&gt; が存在する場合、FTPセッションは &lt;code&gt;tls&lt;/code&gt; （ &lt;code&gt;ftps&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;http://www.ietf.org/rfc/rfc4217.txt&quot;&gt;RFC 4217&lt;/a&gt;&lt;/code&gt; を参照）を介して転送されます。リスト &lt;code&gt;tls_options()&lt;/code&gt; は空にすることができます。関数 &lt;code&gt;ssl:connect/3&lt;/code&gt; は、制御接続とデータセッションの両方を保護するために使用されます。</target>
        </trans-unit>
        <trans-unit id="20a3a531905a20d30fd9f374cce827942989f5e9" translate="yes" xml:space="preserve">
          <source>If option&lt;code&gt;&lt;a href=&quot;#type-hibernate_after_opt&quot;&gt;{hibernate_after,HibernateAfterTimeout}&lt;/a&gt;&lt;/code&gt; is present, the &lt;code&gt;gen_statem&lt;/code&gt; process awaits any message for &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; milliseconds and if no message is received, the process goes into hibernation automatically (by calling &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">オプション &lt;code&gt;&lt;a href=&quot;#type-hibernate_after_opt&quot;&gt;{hibernate_after,HibernateAfterTimeout}&lt;/a&gt;&lt;/code&gt; が存在する場合、 &lt;code&gt;gen_statem&lt;/code&gt; プロセスはメッセージを &lt;code&gt;HibernateAfterTimeout&lt;/code&gt; ミリ秒待機し、メッセージが受信されない場合、プロセスは自動的に休止状態になります（ &lt;code&gt;&lt;a href=&quot;proc_lib#hibernate-3&quot;&gt;proc_lib:hibernate/3&lt;/a&gt;&lt;/code&gt; を呼び出すことにより）。</target>
        </trans-unit>
        <trans-unit id="2fd0a104622064a3e02a4f4c3eca0f47d309b91b" translate="yes" xml:space="preserve">
          <source>If or when &lt;code&gt;monitor/2&lt;/code&gt; is extended, other possible values for &lt;code&gt;Tag&lt;/code&gt;, &lt;code&gt;Object&lt;/code&gt;, and &lt;code&gt;Info&lt;/code&gt; in the monitor message will be introduced.</source>
          <target state="translated">&lt;code&gt;monitor/2&lt;/code&gt; が拡張されている場合、または拡張されている場合、モニターメッセージ内の &lt;code&gt;Tag&lt;/code&gt; 、 &lt;code&gt;Object&lt;/code&gt; 、および &lt;code&gt;Info&lt;/code&gt; の他の可能な値が導入されます。</target>
        </trans-unit>
        <trans-unit id="a47b00202aed4c182ff58ce236e280bf55db7d71" translate="yes" xml:space="preserve">
          <source>If other &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; have the driver loaded, this option has no effect.</source>
          <target state="translated">他の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;users&lt;/a&gt;&lt;/code&gt; がドライバをロードしている場合、このオプションは効果がありません。</target>
        </trans-unit>
        <trans-unit id="597bab21aef8fd8fbc55474998e0dbac33663b0f" translate="yes" xml:space="preserve">
          <source>If padding is &lt;code&gt;{padding,none}&lt;/code&gt; or not specifed and the total data from all subsequent &lt;code&gt;&lt;a href=&quot;crypto#crypto_update-2&quot;&gt;crypto_updates&lt;/a&gt;&lt;/code&gt; does not fill the last block fully, that last data is lost. In case of &lt;code&gt;{padding,none}&lt;/code&gt; there will be an error in this case. If padding is not specified, the bytes of the unfilled block is silently discarded.</source>
          <target state="translated">パディングが &lt;code&gt;{padding,none}&lt;/code&gt; か指定されておらず、後続のすべての &lt;code&gt;&lt;a href=&quot;crypto#crypto_update-2&quot;&gt;crypto_updates&lt;/a&gt;&lt;/code&gt; からの合計データが最後のブロックを完全に満たしていない場合、その最後のデータは失われます。以下の場合には &lt;code&gt;{padding,none}&lt;/code&gt; この場合にエラーが存在することになります。パディングが指定されていない場合、埋められていないブロックのバイトはサイレントに破棄されます。</target>
        </trans-unit>
        <trans-unit id="1578eb3698cf666fa7f690b04c9f11cc163c2d2b" translate="yes" xml:space="preserve">
          <source>If padding was not enabled, the call to &lt;code&gt;&lt;a href=&quot;crypto#crypto_final-1&quot;&gt;crypto_final/1&lt;/a&gt;&lt;/code&gt; may be excluded.</source>
          <target state="translated">パディングが有効になっていない場合、 &lt;code&gt;&lt;a href=&quot;crypto#crypto_final-1&quot;&gt;crypto_final/1&lt;/a&gt;&lt;/code&gt; への呼び出しは除外される可能性があります。</target>
        </trans-unit>
        <trans-unit id="56b3ce2063e2924ca7e8faa87611f5b6c2819567" translate="yes" xml:space="preserve">
          <source>If parameter &lt;code&gt;Dates&lt;/code&gt; is specified, the reports are filtered according to the date when they occurred. If &lt;code&gt;Dates&lt;/code&gt; has the form &lt;code&gt;{DateFrom, from}&lt;/code&gt;, reports that occurred after &lt;code&gt;DateFrom&lt;/code&gt; are displayed.</source>
          <target state="translated">パラメータ &lt;code&gt;Dates&lt;/code&gt; が指定されている場合、レポートはそれらが発生した日付に従ってフィルタリングされます。場合 &lt;code&gt;Dates&lt;/code&gt; フォーム有する &lt;code&gt;{DateFrom, from}&lt;/code&gt; 、後に発生したレポート &lt;code&gt;DateFrom&lt;/code&gt; が表示されています。</target>
        </trans-unit>
        <trans-unit id="6511239690521e295477c51f44e7169510af0e54" translate="yes" xml:space="preserve">
          <source>If possible, avoid writing or deleting records in the same transaction before iterating over the table.</source>
          <target state="translated">可能であれば、テーブルを反復処理する前に、同じトランザクション内のレコードの書き込みや削除は避けてください。</target>
        </trans-unit>
        <trans-unit id="3eb1eeddf032eb186133fc7df8919fb2d11d384d" translate="yes" xml:space="preserve">
          <source>If possible, the client keeps its connections alive and uses persistent connections with or without pipeline depending on configuration and current circumstances. The HTTP/1.1 specification does not provide a guideline for how many requests that are ideal to be sent on a persistent connection. This depends much on the application.</source>
          <target state="translated">可能であれば、クライアントは接続を生きたままにしておき、設定や現在の状況に応じてパイプラインの有無に関わらず持続的接続を使用します。HTTP/1.1 の仕様では、持続的接続で送信するのが理想的なリクエストの数についてのガイドラインを提供していません。これはアプリケーションに大きく依存します。</target>
        </trans-unit>
        <trans-unit id="6eb80024b1f8a5a58791d40e0d60ce7a9e24c7b7" translate="yes" xml:space="preserve">
          <source>If possible, the comment should be moved before any preceding separator characters on the same line. E.g.:</source>
          <target state="translated">可能であれば、コメントは同一行内で先行するセパレータ文字の前に移動させるべきです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="11f459fa45ff86ea26d4123b486b2667eb195a88" translate="yes" xml:space="preserve">
          <source>If possible, the comment should be moved past any following separator characters on the same line, rather than placing the separators on the following line. E.g.:</source>
          <target state="translated">可能であれば、コメントは、次の行にセパレータを配置するのではなく、同じ行の後続のセパレータ文字の前に移動させるべきです。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0e22a764d95b33db30751234a49a657e83e7510e" translate="yes" xml:space="preserve">
          <source>If possible, use the &lt;code&gt;&lt;a href=&quot;beam_lib&quot;&gt;beam_lib(3)&lt;/a&gt;&lt;/code&gt; module to extract the compiler options and the abstract code format from the Beam file and compile that instead.</source>
          <target state="translated">可能であれば、 &lt;code&gt;&lt;a href=&quot;beam_lib&quot;&gt;beam_lib(3)&lt;/a&gt;&lt;/code&gt; モジュールを使用して、Beamファイルからコンパイラオプションと抽象コード形式を抽出し、代わりにコンパイルします。</target>
        </trans-unit>
        <trans-unit id="aede57d6ae41eb953c1c470da89fb0e057e8b902" translate="yes" xml:space="preserve">
          <source>If precedence is client, the negotiated protocol is the first protocol to be shown on the client preference list, which is also on the server advertised list.</source>
          <target state="translated">優先順位がclientの場合、ネゴシエートされたプロトコルは、クライアントの優先順位リストに最初に表示されるプロトコルであり、サーバのアドバタイズドされたリストにも表示されます。</target>
        </trans-unit>
        <trans-unit id="51ff54d9c737f36da2074bfa07dabdd6029e6f8a" translate="yes" xml:space="preserve">
          <source>If precedence is server, the negotiated protocol is the first protocol to be shown on the server advertised list, which is also on the client preference list.</source>
          <target state="translated">優先順位がserverの場合、ネゴシエートされたプロトコルはserver advertised listに最初に表示されるプロトコルで、これはclient preference listにも表示されます。</target>
        </trans-unit>
        <trans-unit id="6739d735ae41522a99fdf3833670c2cb63d21a98" translate="yes" xml:space="preserve">
          <source>If present, this option specifies the options for the &lt;strong&gt;audit trail logging&lt;/strong&gt;. The &lt;code&gt;disk_log&lt;/code&gt; module is used to maintain a wrap log. If present, the &lt;code&gt;dir&lt;/code&gt; and &lt;code&gt;size&lt;/code&gt; options are mandatory.</source>
          <target state="translated">存在する場合、このオプションは&lt;strong&gt;監査証跡ログの&lt;/strong&gt;オプションを指定します。 &lt;code&gt;disk_log&lt;/code&gt; モジュールは、ラップログを維持するために使用されます。存在する場合、 &lt;code&gt;dir&lt;/code&gt; および &lt;code&gt;size&lt;/code&gt; オプションは必須です。</target>
        </trans-unit>
        <trans-unit id="c374078c3ce837fa7c145904897f0747ce0fa052" translate="yes" xml:space="preserve">
          <source>If process metadata exists for the current process, this function behaves as if it was implemented as follows:</source>
          <target state="translated">現在のプロセスにプロセスメタデータが存在する場合、この関数は以下のように実装されているかのように動作します。</target>
        </trans-unit>
        <trans-unit id="6453efa6a699c594656266a7d0d5934c8aa65586" translate="yes" xml:space="preserve">
          <source>If pseudo function triggering the translation is &lt;code&gt;ets:fun2ms/1&lt;/code&gt;, the head of the fun must contain a single variable or a single tuple. If the pseudo function is &lt;code&gt;dbg:fun2ms/1&lt;/code&gt;, the head of the fun must contain a single variable or a single list.</source>
          <target state="translated">変換をトリガーする疑似関数が &lt;code&gt;ets:fun2ms/1&lt;/code&gt; の場合、funの先頭には単一の変数または単一のタプルが含まれている必要があります。疑似関数が &lt;code&gt;dbg:fun2ms/1&lt;/code&gt; の場合、funのヘッドには単一の変数または単一のリストが含まれている必要があります。</target>
        </trans-unit>
        <trans-unit id="3bbf5cb920ce0732e8a77fc0ab511fa8e53d27bc" translate="yes" xml:space="preserve">
          <source>If quantifier is {0,n}, where n &amp;gt; 0, it is treated as if it was {0,1}. At runtime, the remaining pattern match is tried with and without the assertion, the order depends on the greediness of the quantifier.</source>
          <target state="translated">数量詞が{0、n}の場合（n&amp;gt; 0）、{0,1}であるかのように扱われます。実行時に、アサーションの有無にかかわらず、残りのパターンマッチが試行され、順序は数量詞の貪欲さに依存します。</target>
        </trans-unit>
        <trans-unit id="a4e6534fccad96b9c365841e907e49b7cde2c28d" translate="yes" xml:space="preserve">
          <source>If records are written and deleted during the traversal, use the function &lt;code&gt;&lt;a href=&quot;mnesia#foldl&quot;&gt;mnesia:foldl/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;mnesia#foldr&quot;&gt;mnesia:foldr/3&lt;/a&gt;&lt;/code&gt; with a &lt;code&gt;write&lt;/code&gt; lock. Or the function &lt;code&gt;&lt;a href=&quot;mnesia#write_lock_table-1&quot;&gt;mnesia:write_lock_table/1&lt;/a&gt;&lt;/code&gt; when using &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt;.</source>
          <target state="translated">走査中にレコードが書き込まれ、削除される場合は、 &lt;code&gt;write&lt;/code&gt; ロックを指定して関数 &lt;code&gt;&lt;a href=&quot;mnesia#foldl&quot;&gt;mnesia:foldl/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;mnesia#foldr&quot;&gt;mnesia:foldr/3&lt;/a&gt;&lt;/code&gt; を使用します。または、 &lt;code&gt;first&lt;/code&gt; および &lt;code&gt;next&lt;/code&gt; を使用する場合は、関数 &lt;code&gt;&lt;a href=&quot;mnesia#write_lock_table-1&quot;&gt;mnesia:write_lock_table/1&lt;/a&gt;&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="169c4bd14dbb4d6e16657fce0c0a61cc8e3f8798" translate="yes" xml:space="preserve">
          <source>If reloading is not requested, it can still be useful to specify option &lt;code&gt;monitor&lt;/code&gt;, as forced unloads (driver option &lt;code&gt;kill_ports&lt;/code&gt; or option &lt;code&gt;kill_ports&lt;/code&gt; to &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt;) trigger a transient state where driver loading cannot be performed until all closing ports are closed. Thus, as &lt;code&gt;try_unload&lt;/code&gt; can, in almost all situations, return &lt;code&gt;{ok, pending_driver}&lt;/code&gt;, always specify at least &lt;code&gt;{monitor, pending_driver}&lt;/code&gt; in production code (see the monitor discussion earlier).</source>
          <target state="translated">強制アンロード（ドライバーオプション &lt;code&gt;kill_ports&lt;/code&gt; またはオプション &lt;code&gt;kill_ports&lt;/code&gt; から &lt;code&gt;&lt;a href=&quot;#try_unload-2&quot;&gt;try_unload/2&lt;/a&gt;&lt;/code&gt; ）が一時的な状態をトリガーし、閉じているすべてのポートが閉じるまでドライバーのロードを実行できないため、再読み込みが要求されない場合でも、オプション &lt;code&gt;monitor&lt;/code&gt; を指定すると便利です。したがって、 &lt;code&gt;try_unload&lt;/code&gt; はほとんどすべての状況で &lt;code&gt;{ok, pending_driver}&lt;/code&gt; 返すことができる &lt;code&gt;{monitor, pending_driver}&lt;/code&gt; 本番用コードでは常に少なくとも{monitor、pending_driver}を指定します（前述のモニターの説明を参照）。</target>
        </trans-unit>
        <trans-unit id="55c076ea86b99a552c3ee63a0beaa5dfb25c1e33" translate="yes" xml:space="preserve">
          <source>If resolver option &lt;code&gt;inet6&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt;, an IPv6 address is looked up.</source>
          <target state="translated">リゾルバーオプション &lt;code&gt;inet6&lt;/code&gt; が &lt;code&gt;true&lt;/code&gt; の場合、IPv6アドレスが検索されます。</target>
        </trans-unit>
        <trans-unit id="71218f752e39cbf302806385e7e620598fcd4560" translate="yes" xml:space="preserve">
          <source>If restricted mode has been enabled on a particular node, remote shells connecting to this node also run in restricted mode.</source>
          <target state="translated">特定のノードで制限モードが有効になっている場合、このノードに接続するリモートシェルも制限モードで実行されます。</target>
        </trans-unit>
        <trans-unit id="81be79c2e31a4efcff85293a46775d5d0aa9c619" translate="yes" xml:space="preserve">
          <source>If run with option &lt;code&gt;caseless&lt;/code&gt;, this pattern matches phrases such as &quot;A man, a plan, a canal: Panama!&quot; and it works well in both PCRE and Perl. Notice the use of the possessive quantifier *+ to avoid backtracking into sequences of non-word characters. Without this, PCRE takes much longer (10 times or more) to match typical phrases, and Perl takes so long that you think it has gone into a loop.</source>
          <target state="translated">オプション &lt;code&gt;caseless&lt;/code&gt; で実行すると、このパターンは「男、計画、運河：パナマ！」などのフレーズに一致します。PCREとPerlの両方でうまく機能します。非所有文字のシーケンスへのバックトラックを回避するために、所有的量指定子* +の使用に注意してください。これがないと、PCREは典型的なフレーズと一致するのにはるかに長い時間（10倍以上）を要し、Perlは非常に時間がかかるため、ループに入ったと考えます。</target>
        </trans-unit>
        <trans-unit id="56762a0f1f42178490b0db9862f2814f477e1842" translate="yes" xml:space="preserve">
          <source>If set before start, the &lt;code&gt;epmd&lt;/code&gt; daemon behaves as if option &lt;code&gt;-relaxed_command_check&lt;/code&gt; was specified at startup. Consequently, if this option is set before starting the Erlang virtual machine, the automatically started &lt;code&gt;epmd&lt;/code&gt; accepts the &lt;code&gt;-kill&lt;/code&gt; and &lt;code&gt;-stop&lt;/code&gt; commands without restrictions.</source>
          <target state="translated">起動前に設定すると、 &lt;code&gt;epmd&lt;/code&gt; デーモンは、起動時にオプション &lt;code&gt;-relaxed_command_check&lt;/code&gt; が指定されたかのように動作します。したがって、Erlang仮想マシンを起動する前にこのオプションが設定されている場合、自動的に起動される &lt;code&gt;epmd&lt;/code&gt; は、制限なしに &lt;code&gt;-kill&lt;/code&gt; および &lt;code&gt;-stop&lt;/code&gt; コマンドを受け入れます。</target>
        </trans-unit>
        <trans-unit id="9f59dad82faaa4c2914703b6f2eec0c0bd7bf03c" translate="yes" xml:space="preserve">
          <source>If set hibernate the &lt;code&gt;gen_statem&lt;/code&gt;, treated in section &lt;code&gt;&lt;a href=&quot;#Hibernation&quot;&gt;Hibernation&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; を休止状態に設定した場合、セクション &lt;code&gt;&lt;a href=&quot;#Hibernation&quot;&gt;Hibernation&lt;/a&gt;&lt;/code&gt; で処理されます</target>
        </trans-unit>
        <trans-unit id="997d2e694bf42fce758c366fad9b952364db63dd" translate="yes" xml:space="preserve">
          <source>If set hibernate the &lt;code&gt;gen_statem&lt;/code&gt;, treated in section &lt;code&gt;&lt;a href=&quot;#Hibernation&quot;&gt;Hibernation&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; を休止状態に設定すると、セクション &lt;code&gt;&lt;a href=&quot;#Hibernation&quot;&gt;Hibernation&lt;/a&gt;&lt;/code&gt; で扱われます。</target>
        </trans-unit>
        <trans-unit id="60eef1c452cfc1dd1bd601c01baa121d5df8c903" translate="yes" xml:space="preserve">
          <source>If set in binary mode (&lt;code&gt;binary&lt;/code&gt; or &lt;code&gt;{binary, true}&lt;/code&gt;), the I/O server sends binary data (encoded in UTF-8) as answers to the &lt;code&gt;get_line&lt;/code&gt;, &lt;code&gt;get_chars&lt;/code&gt;, and, if possible, &lt;code&gt;get_until&lt;/code&gt; requests (for details, see section &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt;) in the User's Guide). The immediate effect is that &lt;code&gt;&lt;a href=&quot;#get_chars-2&quot;&gt;get_chars/2,3&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; return UTF-8 binaries instead of lists of characters for the affected I/O device.</source>
          <target state="translated">バイナリモード（ &lt;code&gt;binary&lt;/code&gt; または &lt;code&gt;{binary, true}&lt;/code&gt; ）に設定されている場合、I / Oサーバーは、バイナリデータ（UTF-8でエンコードされた）を &lt;code&gt;get_line&lt;/code&gt; 、 &lt;code&gt;get_chars&lt;/code&gt; 、および &lt;code&gt;get_until&lt;/code&gt; リクエスト（詳細については、ユーザーガイドの &lt;code&gt;&lt;a href=&quot;io_protocol&quot;&gt;The Erlang I/O Protocol&lt;/a&gt;&lt;/code&gt; セクション）。即時の影響は、影響を受けるI / Oデバイスの文字のリストではなく、 &lt;code&gt;&lt;a href=&quot;#get_chars-2&quot;&gt;get_chars/2,3&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;#get_line-1&quot;&gt;get_line/1,2&lt;/a&gt;&lt;/code&gt; がUTF-8バイナリを返すことです。</target>
        </trans-unit>
        <trans-unit id="60e11f2d401fbb6a7bc13e95b2d0df9464865aea" translate="yes" xml:space="preserve">
          <source>If set postpone the current event, see section &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;Postponing Events&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">セットは、現在のイベントを延期する場合は、セクションを参照 &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;Postponing Events&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="cfee0bffb0c9371226233925794bed564e96b2bf" translate="yes" xml:space="preserve">
          <source>If set postpone the current event, see section &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;Postponing Events&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">セットは、現在のイベントを延期する場合は、セクションを参照 &lt;code&gt;&lt;a href=&quot;#Postponing%20Events&quot;&gt;Postponing Events&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ff2642f766dbab3720562602e51b82a07e9e8906" translate="yes" xml:space="preserve">
          <source>If set the scheduler id is to be included by the tracer.</source>
          <target state="translated">設定した場合、トレーサに含めるスケジューラIDを指定します。</target>
        </trans-unit>
        <trans-unit id="913831f334573f274f7a4b77334d9d4e872f104b" translate="yes" xml:space="preserve">
          <source>If set the tracepoint has included additional data about the trace event. What the additional data is depends on which &lt;code&gt;TraceTag&lt;/code&gt; has been triggered. The &lt;code&gt;extra&lt;/code&gt; trace data corresponds to the fifth element in the trace tuples described in &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt; erlang:trace/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">設定されている場合、トレースポイントにはトレースイベントに関する追加データが含まれています。追加データが何であるかは、どの &lt;code&gt;TraceTag&lt;/code&gt; がトリガーされたかによって異なります。 &lt;code&gt;extra&lt;/code&gt; に記載のトレースタプルで5番目の要素へのトレースデータが対応する &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt; erlang:trace/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b36ae2f0946222aa466ec9f357bec978063329ec" translate="yes" xml:space="preserve">
          <source>If set the tracepoint has included additional data about the trace event. What the additional data is depends on which &lt;code&gt;TraceTag&lt;/code&gt; has been triggered. The &lt;code&gt;extra&lt;/code&gt; trace data corresponds to the fifth element in the trace tuples described in &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">設定されている場合、トレースポイントには、トレースイベントに関する追加データが含まれています。追加データとは、どの &lt;code&gt;TraceTag&lt;/code&gt; がトリガーされたかによって異なります。 &lt;code&gt;extra&lt;/code&gt; に記載のトレースタプルで5番目の要素へのトレースデータが対応する &lt;code&gt;&lt;a href=&quot;erlang#trace_3_trace_messages&quot;&gt;erlang:trace/3&lt;/a&gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="537421ac5bc876e1157770197d20f5be1d7bdfa8" translate="yes" xml:space="preserve">
          <source>If set the tracer has been requested to include a time stamp.</source>
          <target state="translated">設定されている場合は、トレーサーにタイムスタンプを含めるように要求されています。</target>
        </trans-unit>
        <trans-unit id="ebb92b7f506965bd75353ec4f02388501a5389c5" translate="yes" xml:space="preserve">
          <source>If set the tracer has been requested to include the output of a match specification that was run.</source>
          <target state="translated">セットされている場合、トレーサは、実行されたマッチ指定の出力を含めるように要求されています。</target>
        </trans-unit>
        <trans-unit id="655f54de5d5fcd636afc8c5192a0cd83bf1d3634" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt;, TLS/DTLS Alert reports are not displayed. Deprecated in OTP 22, use {log_level, &lt;code&gt;&lt;a href=&quot;#type-logging_level&quot;&gt;logging_level()&lt;/a&gt;&lt;/code&gt;} instead.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、TLS / DTLSアラートレポートは表示されません。OTP 22で非推奨になり、代わりに{log_level、 &lt;code&gt;&lt;a href=&quot;#type-logging_level&quot;&gt;logging_level()&lt;/a&gt;&lt;/code&gt; }を使用してください。</target>
        </trans-unit>
        <trans-unit id="c658f8f2f205584d1fb8b1c5da7c1178ed36dd48" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;false&lt;/code&gt;, error reports are not displayed.</source>
          <target state="translated">&lt;code&gt;false&lt;/code&gt; に設定すると、エラーレポートは表示されません。</target>
        </trans-unit>
        <trans-unit id="2c4759d1764534d362731027d076405776344611" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;on_heap&lt;/code&gt;, the sending process will first attempt to allocate the space for the message directly on the young heap block of the receiving process. This is not always possible as it requires taking the &lt;strong&gt;main lock&lt;/strong&gt; of the receiving process. The main lock is also held when the process is executing. The possibility for a lock conflict is thus likely in an intensely collaborating system. If the sending process cannot acquire the main lock, a heap fragment is instead created for the message and the message payload is copied onto that. With the &lt;code&gt;off_heap&lt;/code&gt; option the sender process always creates heap fragments for messages sent to that process.</source>
          <target state="translated">&lt;code&gt;on_heap&lt;/code&gt; に設定されている場合、送信プロセスは最初に、受信プロセスの若いヒープブロックにメッセージ用のスペースを直接割り当てようとします。受信プロセスの&lt;strong&gt;メインロック&lt;/strong&gt;を取得する必要があるため、これが常に可能であるとは限りません。プロセスの実行中もメインロックが保持されます。したがって、ロックの競合が発生する可能性は、緊密に連携するシステムで発生する可能性があります。送信プロセスがメインロックを取得できない場合は、代わりにメッセージのヒープフラグメントが作成され、メッセージペイロードがそこにコピーされます。 &lt;code&gt;off_heap&lt;/code&gt; オプション送信者プロセスは、常にそのプロセスに送信されるメッセージのヒープの断片を作成します。</target>
        </trans-unit>
        <trans-unit id="310d96f77be1e1791ce6fea41e63aca706ddcee9" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt; a header field is added to logger_formatter's part of &lt;code&gt;Metadata&lt;/code&gt;. The value of this field is a string similar to the header created by the old &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; event handlers. It can be included in the log event by adding the list &lt;code&gt;[logger_formatter,header]&lt;/code&gt; to the template. See the description of the &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; type for more information.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、ヘッダーフィールドが &lt;code&gt;Metadata&lt;/code&gt; の logger_formatterの部分に追加されます。このフィールドの値は、古い &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger&lt;/a&gt;&lt;/code&gt; イベントハンドラーによって作成されたヘッダーと同様の文字列です。テンプレートにリスト &lt;code&gt;[logger_formatter,header]&lt;/code&gt; を追加することで、ログイベントに含めることができます。詳細については、 &lt;code&gt;&lt;a href=&quot;#type-template&quot;&gt;template()&lt;/a&gt;&lt;/code&gt; タイプの説明を参照してください。</target>
        </trans-unit>
        <trans-unit id="bd8fb908e24bb62be623e19143f8ea77156d0120" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt; activates returning the received &lt;code&gt;TCLASS&lt;/code&gt; value on platforms that implements the protocol &lt;code&gt;IPPROTO_IPV6&lt;/code&gt; option &lt;code&gt;IPV6_RECVTCLASS&lt;/code&gt; or &lt;code&gt;IPV6_2292RECVTCLASS&lt;/code&gt; for the socket. The value is returned as a &lt;code&gt;{tclass,TCLASS}&lt;/code&gt; tuple regardless of if the platform returns an &lt;code&gt;IPV6_TCLASS&lt;/code&gt; or an &lt;code&gt;IPV6_RECVTCLASS&lt;/code&gt; CMSG value.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、ソケットのプロトコル &lt;code&gt;IPPROTO_IPV6&lt;/code&gt; オプション &lt;code&gt;IPV6_RECVTCLASS&lt;/code&gt; または &lt;code&gt;IPV6_2292RECVTCLASS&lt;/code&gt; を実装するプラットフォームで受信した &lt;code&gt;TCLASS&lt;/code&gt; 値を返すことがアクティブになります。値として返される &lt;code&gt;{tclass,TCLASS}&lt;/code&gt; タプルかかわらずプラットフォーム返す場合 &lt;code&gt;IPV6_TCLASS&lt;/code&gt; 又は &lt;code&gt;IPV6_RECVTCLASS&lt;/code&gt; CMSG値。</target>
        </trans-unit>
        <trans-unit id="c1327e3fb152f87bc84a12b83acd5ce3c1ed9810" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt; activates returning the received &lt;code&gt;TOS&lt;/code&gt; value on platforms that implements the protocol &lt;code&gt;IPPROTO_IP&lt;/code&gt; option &lt;code&gt;IP_RECVTOS&lt;/code&gt; for the socket. The value is returned as a &lt;code&gt;{tos,TOS}&lt;/code&gt; tuple regardless of if the platform returns an &lt;code&gt;IP_TOS&lt;/code&gt; or an &lt;code&gt;IP_RECVTOS&lt;/code&gt; CMSG value.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、ソケットのプロトコル &lt;code&gt;IPPROTO_IP&lt;/code&gt; オプション &lt;code&gt;IP_RECVTOS&lt;/code&gt; を実装するプラットフォームで受信した &lt;code&gt;TOS&lt;/code&gt; 値を返すことがアクティブになります。値として返される &lt;code&gt;{tos,TOS}&lt;/code&gt; タプルかかわらずプラットフォーム返す場合 &lt;code&gt;IP_TOS&lt;/code&gt; 又は &lt;code&gt;IP_RECVTOS&lt;/code&gt; CMSG値。</target>
        </trans-unit>
        <trans-unit id="25ca95fc90cd615829fa6bcc45ce252e70ac9443" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt; activates returning the received &lt;code&gt;TTL&lt;/code&gt; value on platforms that implements the protocol &lt;code&gt;IPPROTO_IP&lt;/code&gt; option &lt;code&gt;IP_RECVTTL&lt;/code&gt; for the socket. The value is returned as a &lt;code&gt;{ttl,TTL}&lt;/code&gt; tuple regardless of if the platform returns an &lt;code&gt;IP_TTL&lt;/code&gt; or an &lt;code&gt;IP_RECVTTL&lt;/code&gt; CMSG value.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、ソケットのプロトコル &lt;code&gt;IPPROTO_IP&lt;/code&gt; オプション &lt;code&gt;IP_RECVTTL&lt;/code&gt; を実装するプラットフォームで受信した &lt;code&gt;TTL&lt;/code&gt; 値を返すことがアクティブになります。値として返される &lt;code&gt;{ttl,TTL}&lt;/code&gt; かかわらず、プラットフォームが返された場合のタプル &lt;code&gt;IP_TTL&lt;/code&gt; 又は &lt;code&gt;IP_RECVTTL&lt;/code&gt; CMSG値。</target>
        </trans-unit>
        <trans-unit id="4ce4e9a3ec15985becd6d1fc4438e42ee9f02d87" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, all newlines in the message are replaced with &lt;code&gt;&quot;, &quot;&lt;/code&gt;, and white spaces following directly after newlines are removed. Notice that newlines added by the &lt;code&gt;template&lt;/code&gt; parameter are not replaced.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、メッセージ内のすべての改行が &lt;code&gt;&quot;, &quot;&lt;/code&gt; 置き換えられ、改行が削除された直後の空白文字が続きます。 &lt;code&gt;template&lt;/code&gt; パラメータによって追加された改行は置き換えられないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="bdbfcee3def687520000625ed9063759bcd7fdfe" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, each log event is printed as a single line. To achieve this, &lt;code&gt;logger_formatter&lt;/code&gt; sets the field width to &lt;code&gt;0&lt;/code&gt; for all &lt;code&gt;~p&lt;/code&gt; and &lt;code&gt;~P&lt;/code&gt; control sequences in the format a string (see &lt;code&gt; io:format/2&lt;/code&gt;), and replaces all newlines in the message with &lt;code&gt;&quot;, &quot;&lt;/code&gt;. White spaces following directly after newlines are removed. Notice that newlines added by the &lt;code&gt;template&lt;/code&gt; parameter are not replaced.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、各ログイベントは1行として出力されます。これを達成するために、 &lt;code&gt;logger_formatter&lt;/code&gt; はにフィールド幅を設定します &lt;code&gt;0&lt;/code&gt; すべてのために &lt;code&gt;~p&lt;/code&gt; と &lt;code&gt;~P&lt;/code&gt; （参照形式でコントロール配列の文字列 &lt;code&gt; io:format/2&lt;/code&gt; ）、および持つメッセージ内のすべての改行を置き換えます &lt;code&gt;&quot;, &quot;&lt;/code&gt; 。改行が削除された直後に続く空白。 &lt;code&gt;template&lt;/code&gt; パラメータによって追加された改行は置き換えられないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="d7bc2e449028a1b238287b1e7e1da57633ce0aa2" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, the &lt;code&gt;ct_master logs&lt;/code&gt; are written on a primitive HTML format, not using the &lt;code&gt;Common Test&lt;/code&gt; CSS style sheet.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、 &lt;code&gt;ct_master logs&lt;/code&gt; は、 &lt;code&gt;Common Test&lt;/code&gt; CSSスタイルシートを使用せずに、プリミティブHTML形式で書き込まれます。</target>
        </trans-unit>
        <trans-unit id="c67db27336a237041f3f770706b8f2027a618516" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, this makes &lt;code&gt;epp_dodger&lt;/code&gt; try to repair the source code as it seems fit, in certain cases where parsing would otherwise fail. Currently, it inserts &lt;code&gt;++&lt;/code&gt;-operators between string literals and macros where it looks like concatenation was intended. The default value is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定した場合、これにより、 &lt;code&gt;epp_dodger&lt;/code&gt; はソースコードを適切と思われるように修復しようとします。現在、文字列リテラルとマクロの間に &lt;code&gt;++&lt;/code&gt; 演算子が挿入されており、連結が意図されているように見えます。デフォルト値は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="553412c0540657c6dfbc0cf5ff30e8dae32d51db" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, use the server preference for cipher selection. If set to &lt;code&gt;false&lt;/code&gt; (the default), use the client preference.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定されている場合は、暗号の選択にサーバー設定を使用します。 &lt;code&gt;false&lt;/code&gt; （デフォルト）に設定されている場合は、クライアント設定を使用します。</target>
        </trans-unit>
        <trans-unit id="845d16e801c4d035d7da73e779db3b12f92e8193" translate="yes" xml:space="preserve">
          <source>If set to &lt;code&gt;true&lt;/code&gt;, workarounds for known server deviations from the HTTP-standard are enabled.</source>
          <target state="translated">&lt;code&gt;true&lt;/code&gt; に設定すると、HTTP標準からのサーバーの既知の逸脱に対する回避策が有効になります。</target>
        </trans-unit>
        <trans-unit id="4e5151c0c30a4e7bb11fe24669fcb768cff8dff0" translate="yes" xml:space="preserve">
          <source>If set to anything else than &lt;code&gt;0&lt;/code&gt;, it makes all times displayed by &lt;code&gt;run_erl&lt;/code&gt; to be in UTC (GMT, CET, MET, without Daylight Saving Time), rather than in local time. This does not affect data coming from Erlang, only the logs output directly by &lt;code&gt;run_erl&lt;/code&gt;. Application SASL can be modified accordingly by setting the Erlang application variable &lt;code&gt;utc_log&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;0&lt;/code&gt; 以外に設定すると、 &lt;code&gt;run_erl&lt;/code&gt; によって表示されるすべての時刻は、現地時間ではなくUTC（GMT、CET、MET、夏時間なし）になります。これはErlangからのデータには影響せず、 &lt;code&gt;run_erl&lt;/code&gt; によって直接出力されるログにのみ影響します。Erlangアプリケーション変数 &lt;code&gt;utc_log&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定することにより、アプリケーションSASLを適宜変更できます。</target>
        </trans-unit>
        <trans-unit id="54ecba8897a2d3cf6ca4714afe4059ed1a0bc69c" translate="yes" xml:space="preserve">
          <source>If set to false (the default value), only one login is handled at a time. If set to true, an unlimited number of login attempts are allowed simultaneously.</source>
          <target state="translated">false(デフォルト値)に設定すると、一度に1つのログインのみが処理されます。true に設定されている場合は、同時に無制限の回数のログインが許可されます。</target>
        </trans-unit>
        <trans-unit id="d7a47f9a94c76c57c796417eab15c787a00acacf" translate="yes" xml:space="preserve">
          <source>If set to false (the default value), only one login is handled at a time. If set to true, the number of simultaneous login attempts are limited by the value of &lt;code&gt;&lt;a href=&quot;ssh#hardening_daemon_options--max_sessions&quot;&gt;max_sessions&lt;/a&gt;&lt;/code&gt; option.</source>
          <target state="translated">false（デフォルト値）に設定すると、一度に1つのログインのみが処理されます。trueに設定すると、同時ログイン試行の回数は &lt;code&gt;&lt;a href=&quot;ssh#hardening_daemon_options--max_sessions&quot;&gt;max_sessions&lt;/a&gt;&lt;/code&gt; オプションの値によって制限されます。</target>
        </trans-unit>
        <trans-unit id="f7e5e755a8f0aa4316d9b9f5d9dcea02be971e72" translate="yes" xml:space="preserve">
          <source>If set to other than &quot;NoPassword&quot;, the password is required for all API calls. If the password is set to &quot;DummyPassword&quot;, the password must be changed before any other API calls. To secure the authenticating data, the password must be changed after the web server is started. Otherwise it is written in clear text in the configuration file.</source>
          <target state="translated">NoPassword &quot;以外に設定されている場合、すべてのAPIコールでパスワードが必要となります。DummyPasswordに設定されている場合は、他のAPIコールを行う前にパスワードを変更する必要があります。認証データの安全性を確保するために、ウェブサーバの起動後にパスワードを変更する必要があります。それ以外の場合は、設定ファイルにクリアテキストで記述されます。</target>
        </trans-unit>
        <trans-unit id="9508965c72b0132e5a02e474dd8d5307005afa10" translate="yes" xml:space="preserve">
          <source>If set, the &lt;code&gt;accept()&lt;/code&gt;, &lt;code&gt;connect()&lt;/code&gt;, &lt;code&gt;writev()&lt;/code&gt;, &lt;code&gt;write()&lt;/code&gt;, and &lt;code&gt;read()&lt;/code&gt; callbacks implements timeouts. The timeout is passed in the &lt;code&gt;tmo&lt;/code&gt; argument and is given in milli seconds. Note that the &lt;code&gt;tmo&lt;/code&gt; argument to these callbacks differ from the timeout arguments in the &lt;code&gt;ei&lt;/code&gt; API. Zero means a zero timeout. That is, poll and timeout immediately unless the operation is successful. &lt;code&gt;EI_SCLBK_INF_TMO&lt;/code&gt; (max &lt;code&gt;unsigned&lt;/code&gt;) means infinite timeout. The file descriptor is in blocking mode when a callback is called, and it must be in blocking mode when the callback returns.</source>
          <target state="translated">設定されている場合、 &lt;code&gt;accept()&lt;/code&gt; 、 &lt;code&gt;connect()&lt;/code&gt; 、 &lt;code&gt;writev()&lt;/code&gt; 、 &lt;code&gt;write()&lt;/code&gt; 、および &lt;code&gt;read()&lt;/code&gt; コールバックはタイムアウトを実装します。タイムアウトは &lt;code&gt;tmo&lt;/code&gt; 引数で渡され、ミリ秒単位で指定されます。注こと &lt;code&gt;tmo&lt;/code&gt; これらのコールバックの引数は、タイムアウトの引数と異なる &lt;code&gt;ei&lt;/code&gt; API。ゼロはゼロタイムアウトを意味します。つまり、操作が成功しない限り、すぐにポーリングしてタイムアウトします。 &lt;code&gt;EI_SCLBK_INF_TMO&lt;/code&gt; （max &lt;code&gt;unsigned&lt;/code&gt; ）は、無限のタイムアウトを意味します。ファイル記述子は、コールバックが呼び出されたときはブロッキングモードであり、コールバックが戻ったときはブロッキングモードである必要があります。</target>
        </trans-unit>
        <trans-unit id="cbc8baf201837b9902d99d9c6ceeaafc45b233fd" translate="yes" xml:space="preserve">
          <source>If several fields are to be assigned the same value, the following construction can be used:</source>
          <target state="translated">複数のフィールドに同じ値を割り当てる場合は、以下のような構成にすることができます。</target>
        </trans-unit>
        <trans-unit id="21ef3b935d35dcc97954564f91b02dc29963a181" translate="yes" xml:space="preserve">
          <source>If so, or if possibly needed in future versions, then you should consider using &lt;code&gt;gen_statem&lt;/code&gt; over &lt;code&gt;gen_server&lt;/code&gt;.</source>
          <target state="translated">その場合、または将来のバージョンで必要になる可能性がある場合は、 &lt;code&gt;gen_statem&lt;/code&gt; なく &lt;code&gt;gen_server&lt;/code&gt; を使用することを検討する必要があります。</target>
        </trans-unit>
        <trans-unit id="f43fb2b2715e85b137bcfdf2730b0beccbdd0c4b" translate="yes" xml:space="preserve">
          <source>If so, the user is authorized.</source>
          <target state="translated">そうであれば、そのユーザーは認可されています。</target>
        </trans-unit>
        <trans-unit id="33f2cb0ac87e42cdbdf8827c536efd85bb8b5ca2" translate="yes" xml:space="preserve">
          <source>If some of the found BEAM files contain &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt;, then those modules are checked and a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">見つかった一部のBEAMファイルに &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; が含まれている場合、それらのモジュールがチェックされ、タプルのリストが返されます。各タプルの最初の要素は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="6a5a8a25ced47d4519279df0ad60d300b9fdd3ac" translate="yes" xml:space="preserve">
          <source>If some variables were present in the configuration, but are not loaded using this function, they are removed from the configuration table together with their aliases.</source>
          <target state="translated">いくつかの変数が設定に存在していたが、この関数を使用してロードされなかった場合、それらの変数はエイリアスと共に設定テーブルから削除されます。</target>
        </trans-unit>
        <trans-unit id="908c252e088323e888f147ff16d100c7706161d0" translate="yes" xml:space="preserve">
          <source>If something goes wrong, the function can also return an error tuple &lt;code&gt;{error,Error}&lt;/code&gt;.</source>
          <target state="translated">何かがうまくいかない場合、関数はエラータプル &lt;code&gt;{error,Error}&lt;/code&gt; 返すこともできます。</target>
        </trans-unit>
        <trans-unit id="70476ad38abe74628a91e231b10da869d250c572" translate="yes" xml:space="preserve">
          <source>If specified by its filename, the filename can include a path and the &lt;code&gt;.erl&lt;/code&gt; extension can be omitted. The object code &lt;code&gt;Module.beam&lt;/code&gt; is searched for first in the same directory as the source code, then in an &lt;code&gt;ebin&lt;/code&gt; directory next to it, and then in the current path.</source>
          <target state="translated">ファイル名で指定する場合、ファイル名にパスを含めることができ、 &lt;code&gt;.erl&lt;/code&gt; 拡張子は省略できます。オブジェクトコード &lt;code&gt;Module.beam&lt;/code&gt; は、最初にソースコードと同じディレクトリで検索され、次にその隣の &lt;code&gt;ebin&lt;/code&gt; ディレクトリ、次に現在のパスで検索されます。</target>
        </trans-unit>
        <trans-unit id="50b19f1c8b9a65cb742065615e51dec1da364a91" translate="yes" xml:space="preserve">
          <source>If specified by its module name, the object code &lt;code&gt;Module.beam&lt;/code&gt; is searched for in the current path. The source code &lt;code&gt;Module.erl&lt;/code&gt; is searched for first in the same directory as the object code, then in an &lt;code&gt;src&lt;/code&gt; directory next to it.</source>
          <target state="translated">モジュール名で指定されている場合、オブジェクトコード &lt;code&gt;Module.beam&lt;/code&gt; が現在のパスで検索されます。ソースコード &lt;code&gt;Module.erl&lt;/code&gt; は、最初にオブジェクトコードと同じディレクトリで検索され、次にその隣の &lt;code&gt;src&lt;/code&gt; ディレクトリで検索されます。</target>
        </trans-unit>
        <trans-unit id="a8d0b6cf013a5c0d8770719696ef065b65aefbe7" translate="yes" xml:space="preserve">
          <source>If starting the test with a general verbosity level of 50 (&lt;code&gt;?STD_VERBOSITY&lt;/code&gt;):</source>
          <target state="translated">一般的な詳細レベル50（ &lt;code&gt;?STD_VERBOSITY&lt;/code&gt; ）でテストを開始する場合：</target>
        </trans-unit>
        <trans-unit id="bff20119788e7f9fcb0386bb0ba5f7207f1771ed" translate="yes" xml:space="preserve">
          <source>If starting the test with:</source>
          <target state="translated">でテストを開始する場合。</target>
        </trans-unit>
        <trans-unit id="26a65a58a274c5e83de124292f3254f1ac090467" translate="yes" xml:space="preserve">
          <source>If status was &lt;code&gt;alive&lt;/code&gt;, node &lt;code&gt;A&lt;/code&gt; answers with another status message containing either &lt;code&gt;true&lt;/code&gt;, which means that the connection is to continue (the old connection from this node is broken), or &lt;code&gt;false&lt;/code&gt;, which means that the connection is to be closed (the connection attempt was a mistake.</source>
          <target state="translated">状態だった場合は &lt;code&gt;alive&lt;/code&gt; 、ノード &lt;code&gt;A&lt;/code&gt; のいずれか含む別のステータスメッセージと答え &lt;code&gt;true&lt;/code&gt; の接続が継続していることを意味し（このノードからの古い接続が切断された）、または、 &lt;code&gt;false&lt;/code&gt; 接続がクローズされることを意味し、（接続試みは間違いでした。</target>
        </trans-unit>
        <trans-unit id="7b9b70b7cbd405f4ef48bddbc33725b6c4cf3c30" translate="yes" xml:space="preserve">
          <source>If sticky locks are used, the code must first be changed as follows:</source>
          <target state="translated">スティッキーロックを使用する場合は、まず以下のようにコードを変更する必要があります。</target>
        </trans-unit>
        <trans-unit id="c7eb71447bfe22582a45b3625c21c45102fb30a5" translate="yes" xml:space="preserve">
          <source>If subexpressions are specified in the regular expression, the matching subexpressions are returned in the resulting list as well. For example:</source>
          <target state="translated">正規表現で副式が指定されている場合、一致する副式は結果のリストにも返されます。例えば、以下のようになります。</target>
        </trans-unit>
        <trans-unit id="0b8ddaa042ba6e6a6e6f3aa8c56ca060f0b33630" translate="yes" xml:space="preserve">
          <source>If successful</source>
          <target state="translated">成功した場合</target>
        </trans-unit>
        <trans-unit id="211664819a4310bd77112b972f6e1afd6ef67b18" translate="yes" xml:space="preserve">
          <source>If successful, the function must return the updated internal state in an &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; tuple.</source>
          <target state="translated">成功した場合、関数は更新された内部状態を &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; タプルで返す必要があります。</target>
        </trans-unit>
        <trans-unit id="4e8c6ee9fde6d55757690d169dc69ff0e99e718e" translate="yes" xml:space="preserve">
          <source>If successful, the function must return the updated internal state.</source>
          <target state="translated">成功した場合、この関数は更新された内部状態を返さなければなりません。</target>
        </trans-unit>
        <trans-unit id="932989b7c1361152a0b0809cc73761645d677b31" translate="yes" xml:space="preserve">
          <source>If successful, the function returns &lt;code&gt;ok&lt;/code&gt;. If the child specification identified by &lt;code&gt;Id&lt;/code&gt; exists but the corresponding child process is running or is about to be restarted, the function returns &lt;code&gt;{error,running}&lt;/code&gt; or &lt;code&gt;{error,restarting}&lt;/code&gt;, respectively. If the child specification identified by &lt;code&gt;Id&lt;/code&gt; does not exist, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;.</source>
          <target state="translated">成功した場合、関数は &lt;code&gt;ok&lt;/code&gt; を返します。 &lt;code&gt;Id&lt;/code&gt; で識別される子仕様は存在するが、対応する子プロセスが実行中または再起動されようとしている場合、関数はそれぞれ &lt;code&gt;{error,running}&lt;/code&gt; または &lt;code&gt;{error,restarting}&lt;/code&gt; 返します。 &lt;code&gt;Id&lt;/code&gt; で識別される子仕様が存在しない場合、関数は &lt;code&gt;{error,not_found}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="2a7459c85147eae0af4289577e8d8cb1033070c0" translate="yes" xml:space="preserve">
          <source>If successful, the function returns &lt;code&gt;ok&lt;/code&gt;. If there is no child specification with the specified &lt;code&gt;Id&lt;/code&gt;, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;.</source>
          <target state="translated">成功した場合、関数は &lt;code&gt;ok&lt;/code&gt; を返します。指定された &lt;code&gt;Id&lt;/code&gt; を持つ子仕様がない場合、関数は &lt;code&gt;{error,not_found}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="6c554336fd49d3d6148f3873055df50396396c91" translate="yes" xml:space="preserve">
          <source>If successful, the function returns &lt;code&gt;{ok,State}&lt;/code&gt; or &lt;code&gt;{ok,State,hibernate}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the initial internal state of the event handler.</source>
          <target state="translated">成功した場合、関数は &lt;code&gt;{ok,State}&lt;/code&gt; または &lt;code&gt;{ok,State,hibernate}&lt;/code&gt; 返します。ここで、 &lt;code&gt;State&lt;/code&gt; はイベントハンドラーの初期内部状態です。</target>
        </trans-unit>
        <trans-unit id="2203259483f235e1b092ade2119d4c07d6241b2e" translate="yes" xml:space="preserve">
          <source>If successful, this function sets &lt;code&gt;*map_out&lt;/code&gt; to the new map and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;map_in&lt;/code&gt; is not a map or if it does not contain &lt;code&gt;key&lt;/code&gt;.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;*map_out&lt;/code&gt; を新しいマップに設定し、 &lt;code&gt;true&lt;/code&gt; を返します。戻り値の &lt;code&gt;false&lt;/code&gt; の場合 &lt;code&gt;map_in&lt;/code&gt; はそれが含まれていない場合のマップではないか、 &lt;code&gt;key&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="ba18cbb490e9c8d2f3b6ef180516f04715f3defa" translate="yes" xml:space="preserve">
          <source>If successful, this function sets &lt;code&gt;*map_out&lt;/code&gt; to the new map and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;map_in&lt;/code&gt; is not a map.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;*map_out&lt;/code&gt; を新しいマップに設定し、 &lt;code&gt;true&lt;/code&gt; を返します。 &lt;code&gt;map_in&lt;/code&gt; がマップでない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="c57bdf287994755b6e44fdfc60facab5a9f11a53" translate="yes" xml:space="preserve">
          <source>If successful, this function sets &lt;code&gt;*map_out&lt;/code&gt; to the new map and returns &lt;code&gt;true&lt;/code&gt;. Returns &lt;code&gt;false&lt;/code&gt; there are any duplicate keys.</source>
          <target state="translated">成功した場合、この関数は &lt;code&gt;*map_out&lt;/code&gt; を新しいマップに設定し、 &lt;code&gt;true&lt;/code&gt; を返します。重複するキーがある場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="235077c5f09d774b9f3db45cd19ec2e827847cd9" translate="yes" xml:space="preserve">
          <source>If such a clause cannot be found, a &lt;code&gt;function_clause&lt;/code&gt; runtime error occurs.</source>
          <target state="translated">そのような句が見つからない場合、 &lt;code&gt;function_clause&lt;/code&gt; ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="283f86d98b5d92d6ad1ce6bfc63055da78218576" translate="yes" xml:space="preserve">
          <source>If such a clause is found, the corresponding clause body is evaluated. That is, the expressions in the body are evaluated sequentially and the value of the last expression is returned.</source>
          <target state="translated">そのような節が見つかった場合、対応する節ボディが評価されます。つまり、ボディ内の式が順次評価され、最後の式の値が返されます。</target>
        </trans-unit>
        <trans-unit id="b28412a4d9f9549fe2f357ee3ab836136e195e5c" translate="yes" xml:space="preserve">
          <source>If support is found, the option &lt;code&gt;{property_test_tool,ToolModule}&lt;/code&gt; with the selected tool main module name (&lt;code&gt;eqc&lt;/code&gt;, &lt;code&gt;proper&lt;/code&gt; or &lt;code&gt;triq&lt;/code&gt;) is added to the list &lt;code&gt;Config&lt;/code&gt; which then is returned.</source>
          <target state="translated">サポートが見つかった場合、選択したツールのメインモジュール名（ &lt;code&gt;eqc&lt;/code&gt; 、 &lt;code&gt;proper&lt;/code&gt; 、または &lt;code&gt;triq&lt;/code&gt; ）を持つオプション &lt;code&gt;{property_test_tool,ToolModule}&lt;/code&gt; がリスト &lt;code&gt;Config&lt;/code&gt; に追加され、それが返されます。</target>
        </trans-unit>
        <trans-unit id="b2fcf16676aca666b69b183aa34b448a75829f94" translate="yes" xml:space="preserve">
          <source>If synchronization is not possible, an error report is sent to the error logger (see also &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">同期が不可能な場合は、エラーレポートがエラーロガーに送信されます（ &lt;code&gt;&lt;a href=&quot;error_logger&quot;&gt;error_logger(3)&lt;/a&gt;&lt;/code&gt; も参照してください）。</target>
        </trans-unit>
        <trans-unit id="36f347d7b778b3a4f6fb90496e2acb23c2a7a864" translate="yes" xml:space="preserve">
          <source>If syntax errors are discovered in these files they are reported with the function &lt;code&gt;config_err/2&lt;/code&gt; of the &lt;code&gt;&lt;a href=&quot;snmpa_error_report&quot;&gt;error report module&lt;/a&gt;&lt;/code&gt; at start-up.</source>
          <target state="translated">これらのファイルで構文エラーが発見された場合、起動時に &lt;code&gt;&lt;a href=&quot;snmpa_error_report&quot;&gt;error report module&lt;/a&gt;&lt;/code&gt; の関数 &lt;code&gt;config_err/2&lt;/code&gt; で報告されます。</target>
        </trans-unit>
        <trans-unit id="e5db19b0c235be5b01f2325198c01dc60d89585f" translate="yes" xml:space="preserve">
          <source>If tagged allocations are not enabled on any of the specified allocator types, the call will fail with &lt;code&gt;{error, not_enabled}&lt;/code&gt;.</source>
          <target state="translated">指定されたアロケータタイプのいずれかでタグ付き割り当てが有効になっていない場合、呼び出しは &lt;code&gt;{error, not_enabled}&lt;/code&gt; 失敗します。</target>
        </trans-unit>
        <trans-unit id="430e9485ed1c99e4dac7dca3da3dfa4aa8c39ab8" translate="yes" xml:space="preserve">
          <source>If term &lt;code&gt;MatchSpec&lt;/code&gt; cannot be compiled (does not represent a valid match specification), a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">&lt;code&gt;MatchSpec&lt;/code&gt; という用語をコンパイルできない場合（有効な一致指定を表していない場合）、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="763ff93c3062ce44172fb309cebb5a06079fead9" translate="yes" xml:space="preserve">
          <source>If term &lt;code&gt;MatchSpec&lt;/code&gt; does not represent a valid match specification, a &lt;code&gt;badarg&lt;/code&gt; exception is raised.</source>
          <target state="translated">用語 &lt;code&gt;MatchSpec&lt;/code&gt; が有効な一致仕様を表していない場合、 &lt;code&gt;badarg&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="b34a1091c99e6fe485396a9633ee9cf35b5e6022" translate="yes" xml:space="preserve">
          <source>If test suites or help modules include header files stored in other locations than the test directory, these include directories can be specified by using flag &lt;code&gt;-include&lt;/code&gt; with &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt;, or option &lt;code&gt;include&lt;/code&gt; with &lt;code&gt;ct:run_test/1&lt;/code&gt;. Also, an include path can be specified with an OS environment variable, &lt;code&gt;CT_INCLUDE_PATH&lt;/code&gt;.</source>
          <target state="translated">テストスイートまたはヘルプモジュールに、テストディレクトリ以外の場所に格納されているヘッダーファイルが含まれている場合、これらのインクルードディレクトリは、フラグ &lt;code&gt;-include&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;ct_run&quot;&gt;ct_run&lt;/a&gt;&lt;/code&gt; 、またはオプション &lt;code&gt;include&lt;/code&gt; と &lt;code&gt;ct:run_test/1&lt;/code&gt; を使用して指定できます。また、インクルードパスはOS環境変数 &lt;code&gt;CT_INCLUDE_PATH&lt;/code&gt; で指定できます。</target>
        </trans-unit>
        <trans-unit id="7e790d3acc547bf4dd4b0058bee91f205e4b15cf" translate="yes" xml:space="preserve">
          <source>If the &quot;certificate_authorities&quot; extension in the CertificateRequest message was present, at least one of the certificates in the certificate chain SHOULD be issued by one of the listed CAs.</source>
          <target state="translated">CertificateRequestメッセージの「certificate_authorities」拡張が存在する場合、証明書チェインの証明書のうち少なくとも1つは、リストされたCAの1つによって発行されるべきである[SHOULD]。</target>
        </trans-unit>
        <trans-unit id="c4c1965cf3b85e5ae91bfc7f462d56b4e302c996" translate="yes" xml:space="preserve">
          <source>If the 'main' worker is busy, a temporary process is spawned to handle that 'get-request'.</source>
          <target state="translated">main' ワーカーがビジー状態の場合、その 'get-request' を処理するための一時的なプロセスが生成されます。</target>
        </trans-unit>
        <trans-unit id="ece8268eb3bcace140f99c6e854d866eed3ef694" translate="yes" xml:space="preserve">
          <source>If the 'main' worker is busy, a temporary process is spawned to handle that job ('get-request' or notification).</source>
          <target state="translated">main' ワーカーがビジー状態の場合、そのジョブを処理するための一時的なプロセスが生成されます ('get-request' または通知)。</target>
        </trans-unit>
        <trans-unit id="c9279b9016abb718b19436b545788de84fa2134f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; of the Xref server is &lt;code&gt;functions&lt;/code&gt;, BEAM files that contain no &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; are ignored.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; 外部参照サーバのです &lt;code&gt;functions&lt;/code&gt; 、全く含まないBEAMファイルの &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; 無視されます。</target>
        </trans-unit>
        <trans-unit id="c813a10d16024092b88cb717d0c880a3632b14a1" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; of the Xref server is &lt;code&gt;functions&lt;/code&gt;, and the BEAM file contains no &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt;, the error message &lt;code&gt;no_debug_info&lt;/code&gt; is returned.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;#mode&quot;&gt;mode&lt;/a&gt;&lt;/code&gt; 外部参照サーバのです &lt;code&gt;functions&lt;/code&gt; 、およびBEAMファイルは一切含まれていない &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; 、エラーメッセージ &lt;code&gt;no_debug_info&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ef80d1f8c11747796d02d57345e648de2094089e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;handle_event_function&lt;/code&gt;, the state can be any term. After a &lt;strong&gt;state change&lt;/strong&gt; (&lt;code&gt;NextState =/= State&lt;/code&gt;), all postponed events are retried.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;handle_event_function&lt;/code&gt; 、状態は任意の用語することができます。後の&lt;strong&gt;状態変化&lt;/strong&gt;（ &lt;code&gt;NextState =/= State&lt;/code&gt; ）、全ての延期イベントが再試行されます。</target>
        </trans-unit>
        <trans-unit id="0b9197e338e3401c234d140df6601d7f0bd0de9f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;handle_event_function&lt;/code&gt;, the state can be any term. After a state change (&lt;code&gt;NextState =/= State&lt;/code&gt;), all postponed events are retried.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;handle_event_function&lt;/code&gt; 、状態は任意の用語することができます。状態変更（ &lt;code&gt;NextState =/= State&lt;/code&gt; ）の後、延期されたすべてのイベントが再試行されます。</target>
        </trans-unit>
        <trans-unit id="77912caa4ee948d9b6eee0f54f2cb39e15b274ee" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;state_functions&lt;/code&gt;, the state must be an atom. After a &lt;strong&gt;state change&lt;/strong&gt; (&lt;code&gt;NextState =/= State&lt;/code&gt;), all postponed events are retried. Note that the state &lt;code&gt;terminate&lt;/code&gt; is not possible to use since it would collide with the optional callback function &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;state_functions&lt;/code&gt; 、状態はアトムでなければなりません。後の&lt;strong&gt;状態変化&lt;/strong&gt;（ &lt;code&gt;NextState =/= State&lt;/code&gt; ）、全ての延期イベントが再試行されます。状態 &lt;code&gt;terminate&lt;/code&gt; は、オプションのコールバック関数 &lt;code&gt;&lt;a href=&quot;#Module:terminate-3&quot;&gt;Module:terminate/3&lt;/a&gt;&lt;/code&gt; と衝突するため、使用できないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="74c7a5f40b37419e0dfdb9c000a09ebaefa7ede7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; is &lt;code&gt;state_functions&lt;/code&gt;, the state must be of this type. After a state change (&lt;code&gt;NextState =/= State&lt;/code&gt;), all postponed events are retried.</source>
          <target state="translated">場合は &lt;code&gt;&lt;a href=&quot;#type-callback_mode&quot;&gt;&lt;strong&gt;callback mode&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; ある &lt;code&gt;state_functions&lt;/code&gt; 、状態はこのタイプでなければなりません。状態変更（ &lt;code&gt;NextState =/= State&lt;/code&gt; ）の後、延期されたすべてのイベントが再試行されます。</target>
        </trans-unit>
        <trans-unit id="693335b3ceb4c3438c26542cdb03f54e066d8540" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt; ERL_DRV_FLAG_SOFT_BUSY&lt;/a&gt;&lt;/code&gt; has been set in the &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt;, data can be forced into the driver through &lt;code&gt;&lt;a href=&quot;erlang#port_command-3&quot;&gt; erlang:port_command(Port, Data, [force])&lt;/a&gt;&lt;/code&gt; even if the driver has signaled that it is busy.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt; ERL_DRV_FLAG_SOFT_BUSY&lt;/a&gt;&lt;/code&gt; が設定されている &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; 、データを介してドライバに強制することができ &lt;code&gt;&lt;a href=&quot;erlang#port_command-3&quot;&gt; erlang:port_command(Port, Data, [force])&lt;/a&gt;&lt;/code&gt; ドライバーはそれがビジー状態であることを通知した場合であっても。</target>
        </trans-unit>
        <trans-unit id="720d616c478f9b1d1e0e376e567468c7cbccb10c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt;ERL_DRV_FLAG_SOFT_BUSY&lt;/a&gt;&lt;/code&gt; has been set in the &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt;, data can be forced into the driver through &lt;code&gt;&lt;a href=&quot;erlang#port_command-3&quot;&gt;erlang:port_command(Port, Data, [force])&lt;/a&gt;&lt;/code&gt; even if the driver has signaled that it is busy.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;driver_entry#driver_flags&quot;&gt;ERL_DRV_FLAG_SOFT_BUSY&lt;/a&gt;&lt;/code&gt; が設定されている &lt;code&gt;&lt;a href=&quot;driver_entry&quot;&gt;driver_entry&lt;/a&gt;&lt;/code&gt; 、データを介してドライバに強制することができ &lt;code&gt;&lt;a href=&quot;erlang#port_command-3&quot;&gt;erlang:port_command(Port, Data, [force])&lt;/a&gt;&lt;/code&gt; ドライバーはそれがビジー状態であることを通知した場合であっても。</target>
        </trans-unit>
        <trans-unit id="24fb3b31f2e1a1b36aa86e0260daf033dbd388cc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;snmp_config#manager_irb&quot;&gt;inform request behaviour&lt;/a&gt;&lt;/code&gt; configuration option is set to &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;{user, integer()}&lt;/code&gt;, the response (acknowledgment) to this inform-request will be sent when this function returns.</source>
          <target state="translated">場合 &lt;code&gt;&lt;a href=&quot;snmp_config#manager_irb&quot;&gt;inform request behaviour&lt;/a&gt;&lt;/code&gt; 設定オプションに設定されている &lt;code&gt;user&lt;/code&gt; または &lt;code&gt;{user, integer()}&lt;/code&gt; 、この通知要求に対する応答（確認応答）をすると、この関数のリターンを送信します。</target>
        </trans-unit>
        <trans-unit id="436abcfe6ccf26003670b7e8f6ead1ae9566d2af" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; behavior is used to implement the channel process, these messages are handled by &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;ssh_client_channel&quot;&gt;ssh_client_channel&lt;/a&gt;&lt;/code&gt; 動作を使用してチャネルプロセスを実装する場合、これらのメッセージは &lt;code&gt;&lt;a href=&quot;ssh_client_channel#Module:handle_ssh_msg-2&quot;&gt;handle_ssh_msg/2&lt;/a&gt;&lt;/code&gt; によって処理されます。</target>
        </trans-unit>
        <trans-unit id="b5b8a260b0935e82c1c23c647ce2490c52e709f8" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Data&lt;/code&gt; argument for &lt;code&gt;port_control/3&lt;/code&gt; is a binary, the driver will be passed a pointer to the contents of the binary and the binary will not be copied. If the &lt;code&gt;Data&lt;/code&gt; argument is an iolist (list of binaries and lists), all binaries in the iolist will be copied.</source>
          <target state="translated">&lt;code&gt;port_control/3&lt;/code&gt; の &lt;code&gt;Data&lt;/code&gt; 引数がバイナリの場合、ドライバにはバイナリの内容へのポインタが渡され、バイナリはコピーされません。場合は &lt;code&gt;Data&lt;/code&gt; 引数はiolistという（バイナリとリストのリスト）で、iolistというのすべてのバイナリがコピーされます。</target>
        </trans-unit>
        <trans-unit id="22cf2f621c573393bcc21b524ec1f8b2f0eb496f" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;EI_SCLBK_FLG_FULL_IMPL&lt;/code&gt; flag has been set, &lt;code&gt;tmo&lt;/code&gt; contains timeout time in milliseconds.</source>
          <target state="translated">場合 &lt;code&gt;EI_SCLBK_FLG_FULL_IMPL&lt;/code&gt; のフラグが設定されている、 &lt;code&gt;tmo&lt;/code&gt; ミリ秒単位のタイムアウト時間が含まれています。</target>
        </trans-unit>
        <trans-unit id="9f73654015166f98aadbf7b3b123e17e68232e9b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;HEART_COMMAND&lt;/code&gt; environment variable is to be set in the &lt;code&gt;start&lt;/code&gt; script in &lt;strong&gt;Starting Erlang&lt;/strong&gt;, and if the value is to be set to the path of the Solaris &lt;code&gt;reboot&lt;/code&gt; command, that is:</source>
          <target state="translated">場合 &lt;code&gt;HEART_COMMAND&lt;/code&gt; の環境変数がに設定される &lt;code&gt;start&lt;/code&gt; でスクリプト&lt;strong&gt;アーランを開始し&lt;/strong&gt;、その値は、Solarisのパスに設定する場合は &lt;code&gt;reboot&lt;/code&gt; コマンド、それは次のようになります。</target>
        </trans-unit>
        <trans-unit id="944e73a76d9846f1844b61fadd1ef6be5fa46f07" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Item&lt;/code&gt; is a string &quot;&amp;lt;X.Y.Z&amp;gt;&quot; as returned from &lt;code&gt;pid_to_list/1&lt;/code&gt;, the process &lt;code&gt;&amp;lt;X.Y.Z&amp;gt;&lt;/code&gt; is traced.</source>
          <target state="translated">場合は &lt;code&gt;Item&lt;/code&gt; 文字列であるから返される「&amp;lt;XYZ&amp;gt;」 &lt;code&gt;pid_to_list/1&lt;/code&gt; 、工程 &lt;code&gt;&amp;lt;X.Y.Z&amp;gt;&lt;/code&gt; トレースされます。</target>
        </trans-unit>
        <trans-unit id="61eca5d5aa872cbcbe9a56199f7268cf843102ce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Mod&lt;/code&gt; argument is given, the result contains a &lt;code&gt;ModAnalysis&lt;/code&gt; tuple for module &lt;code&gt;Mod&lt;/code&gt; only, otherwise the result contains one &lt;code&gt;ModAnalysis&lt;/code&gt; tuple for all modules returned from &lt;code&gt;code:all_loaded()&lt;/code&gt; except &lt;code&gt;cprof&lt;/code&gt; itself.</source>
          <target state="translated">場合 &lt;code&gt;Mod&lt;/code&gt; 引数が指定され、結果が含ま &lt;code&gt;ModAnalysis&lt;/code&gt; のモジュールのためのタプル &lt;code&gt;Mod&lt;/code&gt; のみを、そうでなければ結果は、いずれかが含ま &lt;code&gt;ModAnalysis&lt;/code&gt; のから返されたすべてのモジュールのタプル &lt;code&gt;code:all_loaded()&lt;/code&gt; 以外 &lt;code&gt;cprof&lt;/code&gt; 自体。</target>
        </trans-unit>
        <trans-unit id="692d7ddeb29364bd451d87d06edbd7eec80bea02" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; for the next &lt;code&gt;AtomCacheRef&lt;/code&gt; has been set, a &lt;code&gt;NewAtomCacheRef&lt;/code&gt; on the following format follows:</source>
          <target state="translated">場合 &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; 次のため &lt;code&gt;AtomCacheRef&lt;/code&gt; が設定されている、 &lt;code&gt;NewAtomCacheRef&lt;/code&gt; 次の形式では、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="04c0254fa6d70d431ad5a486ddf123ee44618a15" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; for the next &lt;code&gt;AtomCacheRef&lt;/code&gt; has not been set, a &lt;code&gt;CachedAtomRef&lt;/code&gt; on the following format follows:</source>
          <target state="translated">場合 &lt;code&gt;NewCacheEntryFlag&lt;/code&gt; 次のため &lt;code&gt;AtomCacheRef&lt;/code&gt; が設定されていない、 &lt;code&gt;CachedAtomRef&lt;/code&gt; 次の形式では、次のとおりです。</target>
        </trans-unit>
        <trans-unit id="8c90300fd144cf66a22b387cf8df2ba0e1883646" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;ssh2_pubkey&lt;/code&gt;, the &lt;code&gt;InData&lt;/code&gt; shall be &lt;code&gt;InData_ssh2_pubkey&lt;/code&gt;. Otherwise it shall be &lt;code&gt;OtherInData&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; ある &lt;code&gt;ssh2_pubkey&lt;/code&gt; 、 &lt;code&gt;InData&lt;/code&gt; しなければならない &lt;code&gt;InData_ssh2_pubkey&lt;/code&gt; 。それ以外の場合は、 &lt;code&gt;OtherInData&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="5892c57f59a62e642afcb7987d330a6a6bddcb6e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;Type&lt;/code&gt; is &lt;code&gt;ssh2_pubkey&lt;/code&gt;, the result will be &lt;code&gt;Decoded_ssh2_pubkey&lt;/code&gt;. Otherwise it will be &lt;code&gt;Decoded_OtherType&lt;/code&gt;.</source>
          <target state="translated">場合は &lt;code&gt;Type&lt;/code&gt; ある &lt;code&gt;ssh2_pubkey&lt;/code&gt; 、結果になります &lt;code&gt;Decoded_ssh2_pubkey&lt;/code&gt; 。それ以外の場合は、 &lt;code&gt;Decoded_OtherType&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="5abbbca51e0d96970bfc6e932a6073fa6c1b8d91" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;WrapSize&lt;/code&gt; is specified as &lt;code&gt;{time, WrapTime}&lt;/code&gt;, the current file is closed when it has been open more than &lt;code&gt;WrapTime&lt;/code&gt; milliseconds, regardless of it being empty or not.</source>
          <target state="translated">場合 &lt;code&gt;WrapSize&lt;/code&gt; をとして指定されている &lt;code&gt;{time, WrapTime}&lt;/code&gt; それはよりオープン以上であった場合、現在のファイルが閉じられ &lt;code&gt;WrapTime&lt;/code&gt; のかかわらず、それが空かどうかという、ミリ。</target>
        </trans-unit>
        <trans-unit id="3bce9200cd49c0302061751c509bff17706e1d1e" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;collector_pid&lt;/code&gt; is &lt;code&gt;undefined&lt;/code&gt; a new &lt;code&gt;et_collector&lt;/code&gt; will be started with the following parameter settings: &lt;code&gt;parent_pid&lt;/code&gt;, &lt;code&gt;event_order&lt;/code&gt;, &lt;code&gt;trace_global&lt;/code&gt;, &lt;code&gt;trace_pattern&lt;/code&gt;, &lt;code&gt;trace_port&lt;/code&gt;, &lt;code&gt;trace_max_queue&lt;/code&gt;, &lt;code&gt;trace_client&lt;/code&gt;, &lt;code&gt;dict_insert&lt;/code&gt; and &lt;code&gt;dict_delete&lt;/code&gt;. The new &lt;code&gt;et_viewer&lt;/code&gt; will register itself as an &lt;code&gt;et_collector&lt;/code&gt; subscriber.</source>
          <target state="translated">&lt;code&gt;collector_pid&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; 場合、新しい &lt;code&gt;et_collector&lt;/code&gt; は次のパラメーター設定で開始されます： &lt;code&gt;parent_pid&lt;/code&gt; 、 &lt;code&gt;event_order&lt;/code&gt; 、 &lt;code&gt;trace_global&lt;/code&gt; 、 &lt;code&gt;trace_pattern&lt;/code&gt; 、 &lt;code&gt;trace_port&lt;/code&gt; 、 &lt;code&gt;trace_max_queue&lt;/code&gt; 、 &lt;code&gt;trace_client&lt;/code&gt; 、 &lt;code&gt;dict_insert&lt;/code&gt; 、 &lt;code&gt;dict_delete&lt;/code&gt; 。新しい &lt;code&gt;et_viewer&lt;/code&gt; は、それ自体を &lt;code&gt;et_collector&lt;/code&gt; サブスクライバーとして登録します。</target>
        </trans-unit>
        <trans-unit id="3ef49ec23c42d8c8e08d0e1a55605acb0e8d5ac7" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;crypto_fun()&lt;/code&gt; reurns a &lt;code&gt;chunk_size()&lt;/code&gt;, that value is as block size for further blocks in calls to &lt;code&gt;crypto_fun()&lt;/code&gt;.</source>
          <target state="translated">もし &lt;code&gt;crypto_fun()&lt;/code&gt; reurns &lt;code&gt;chunk_size()&lt;/code&gt; 値が呼び出しでさらにブロックのブロックサイズとしてあること、 &lt;code&gt;crypto_fun()&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="1705267e03ee01724d59b40bc5f0214567319c46" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;detailed&lt;/code&gt; and/or &lt;code&gt;per_cpu&lt;/code&gt; option is given, this is the CPU number, or a list of the CPU numbers.</source>
          <target state="translated">場合 &lt;code&gt;detailed&lt;/code&gt; および/または &lt;code&gt;per_cpu&lt;/code&gt; のオプションが与えられ、これは、CPUの数、またはCPU番号のリストです。</target>
        </trans-unit>
        <trans-unit id="e77d603a3001a1e9c1762cdeaacfe7bfa22a3f03" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;detailed&lt;/code&gt; option is given, this is a list of &lt;code&gt;{State, Share}&lt;/code&gt; tuples, where each tuple contains information about a processor state that has been identified as a busy processor state (see below). The atom &lt;code&gt;State&lt;/code&gt; is the name of the state, and the float &lt;code&gt;Share&lt;/code&gt; represents the percentage share of the CPU cycles spent in this state since the last call to &lt;code&gt;util/0&lt;/code&gt; or &lt;code&gt;util/1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;detailed&lt;/code&gt; オプションが指定されている場合、これは &lt;code&gt;{State, Share}&lt;/code&gt; タプルのリストです。各タプルには、ビジー状態のプロセッサ状態として識別されたプロセッサ状態に関する情報が含まれます（以下を参照）。アトム &lt;code&gt;State&lt;/code&gt; は状態の名前であり、float &lt;code&gt;Share&lt;/code&gt; は、最後の &lt;code&gt;util/0&lt;/code&gt; または &lt;code&gt;util/1&lt;/code&gt; の呼び出し以降にこの状態で費やされたCPUサイクルのシェアを表します。</target>
        </trans-unit>
        <trans-unit id="ceeca0dd799d0c2b30a43e745da4464b5bf6bdd0" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;erpc&lt;/code&gt; operation fails, but it is unknown if the function is/will be applied (that is, a connection loss), the caller will not receive any further information about the result if/when the applied function completes. If the applied function explicitly communicates with the calling process, such communication may, of course, reach the calling process.</source>
          <target state="translated">場合 &lt;code&gt;erpc&lt;/code&gt; 操作は失敗しますが、機能は/（、接続損失であること）が適用されますされている場合、それが未知の場合適用された機能の完了/場合、呼び出し側は結果についての更なる情報を受け取ることができません。適用された関数が呼び出しプロセスと明示的に通信する場合、そのような通信はもちろん呼び出しプロセスに到達する可能性があります。</target>
        </trans-unit>
        <trans-unit id="2e75076deae26fb176f6e6643de28792f0d16c28" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;erpc&lt;/code&gt; operation fails, but it is unknown if the function is/will be applied (that is, a timeout or a connection loss), the caller will not receive any further information about the result if/when the applied function completes. If the applied function explicitly communicates with the calling process, such communication may, of course, reach the calling process.</source>
          <target state="translated">場合 &lt;code&gt;erpc&lt;/code&gt; 操作は失敗しますが、機能は/（、タイムアウトや接続損失であること）が適用されますされている場合、それが未知の場合適用された機能の完了/場合、呼び出し側は結果についての更なる情報を受け取ることができません。適用された関数が呼び出しプロセスと明示的に通信する場合、そのような通信はもちろん呼び出しプロセスに到達する可能性があります。</target>
        </trans-unit>
        <trans-unit id="c62b99585baeb954cbb0731a4ba30894bb10a1da" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;erpc&lt;/code&gt; operation fails, but it is unknown if the function is/will be applied (that is, a timeout, or a connection loss), the caller will not receive any further information about the result if/when the applied function completes. If the applied function explicitly communicates with the calling process, such communication may, of course, reach the calling process.</source>
          <target state="translated">場合 &lt;code&gt;erpc&lt;/code&gt; 操作は失敗しますが、機能は/（、タイムアウト、または接続損失であること）が適用されますされている場合、それが未知の場合適用された機能の完了/場合、呼び出し側は結果についての更なる情報を受け取ることができません。適用された関数が呼び出しプロセスと明示的に通信する場合、そのような通信はもちろん呼び出しプロセスに到達する可能性があります。</target>
        </trans-unit>
        <trans-unit id="54a3a64fa23b1c369a1e49078a7eef230d3e65da" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;erpc&lt;/code&gt; operation fails, but it is unknown if the function is/will be applied (that is, a too large wait time value, or a connection loss), the caller will not receive any further information about the result if/when the applied function completes. If the applied function explicitly communicates with the calling process, such communication may, of course, reach the calling process.</source>
          <target state="translated">場合 &lt;code&gt;erpc&lt;/code&gt; 操作は失敗しますが、機能は/（、大きすぎる待機時間値、または接続損失であること）が適用されますされている場合、それは不明で、呼び出し側があれば、結果についてのさらなる情報を受信しません/とき適用された機能が完了します。適用された関数が呼び出しプロセスと明示的に通信する場合、そのような通信はもちろん呼び出しプロセスに到達する可能性があります。</target>
        </trans-unit>
        <trans-unit id="01f6b148b35fa3a772ed4cf02b8f14d1a3fb663b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;excl_lib&lt;/code&gt; option is set to &lt;code&gt;otp_root&lt;/code&gt; then reltool will not copy anything from the Erlang/OTP installation ($OTP_ROOT) into the target structure. The goal is to create a &quot;slim&quot; release which can be used together with an existing Erlang/OTP installation. The target structure will therefore only contain a &lt;code&gt;lib&lt;/code&gt; directory with the applications that were found outside of $OTP_ROOT (typically your own applications), and a &lt;code&gt;releases&lt;/code&gt; directory with the generated &lt;code&gt;.rel,&lt;/code&gt;&lt;code&gt;.script&lt;/code&gt; and &lt;code&gt;.boot&lt;/code&gt; files.</source>
          <target state="translated">場合 &lt;code&gt;excl_lib&lt;/code&gt; オプションがに設定されている &lt;code&gt;otp_root&lt;/code&gt; reltoolターゲット構造へのErlang / OTPのインストール（$ OTP_ROOT）から何かをコピーしません。目標は、既存のErlang / OTPインストールと一緒に使用できる「スリム」リリースを作成することです。ターゲット構造は、そのためだけ含まれています &lt;code&gt;lib&lt;/code&gt; $ OTP_ROOT（通常は、独自のアプリケーション）の外側に、そして発見されたアプリケーションとディレクトリを &lt;code&gt;releases&lt;/code&gt; 、生成したディレクトリを &lt;code&gt;.rel,&lt;/code&gt; &lt;code&gt;.script&lt;/code&gt; と &lt;code&gt;.boot&lt;/code&gt; ファイル。</target>
        </trans-unit>
        <trans-unit id="be47c608e84207db441f123dc3b022c3bdfe3832" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;fprof&lt;/code&gt; server is not running, this function returns immediately with the same return value.</source>
          <target state="translated">&lt;code&gt;fprof&lt;/code&gt; サーバーが実行されていない場合、この関数は同じ戻り値ですぐに戻ります。</target>
        </trans-unit>
        <trans-unit id="4cfc64c80cf0754288971ed2f55082185d9efbaf" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_event&lt;/code&gt; is to be able to receive other messages than events, the callback function &lt;code&gt;handle_info(Info, StateName, StateData)&lt;/code&gt; must be implemented to handle them. Examples of other messages are exit messages, if the &lt;code&gt;gen_event&lt;/code&gt; is linked to other processes (than the supervisor) and trapping exit signals.</source>
          <target state="translated">&lt;code&gt;gen_event&lt;/code&gt; がイベント以外のメッセージを受信できるようにする場合は、それらを処理するためにコールバック関数 &lt;code&gt;handle_info(Info, StateName, StateData)&lt;/code&gt; 実装する必要があります。他のメッセージの例は、 &lt;code&gt;gen_event&lt;/code&gt; が（スーパーバイザ以外の）他のプロセスにリンクされ、終了信号をトラップする場合の終了メッセージです。</target>
        </trans-unit>
        <trans-unit id="5aad944a4a47c5bc78a9273e949274df0e9ed557" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; is not part of a supervision tree, a stop function can be useful, for example:</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; が監視ツリーの一部ではない場合、停止機能が役立ちます。次に例を示します。</target>
        </trans-unit>
        <trans-unit id="4832a13c9684cb02c06fa828f9150cd6ab481d33" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; is part of a supervision tree, no stop function is needed. The &lt;code&gt;gen_server&lt;/code&gt; is automatically terminated by its supervisor. Exactly how this is done is defined by a &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; set in the supervisor.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; が監視ツリーの一部である場合、停止機能は必要ありません。 &lt;code&gt;gen_server&lt;/code&gt; は自動的にスーパーバイザで終了します。これが正確にどのように行われるかは、スーパーバイザに設定された &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="3b4cc7e563bc4ab43d392728008910f94dfb10ae" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; is to be able to receive other messages than requests, the callback function &lt;code&gt;handle_info(Info, State)&lt;/code&gt; must be implemented to handle them. Examples of other messages are exit messages, if the &lt;code&gt;gen_server&lt;/code&gt; is linked to other processes (than the supervisor) and trapping exit signals.</source>
          <target state="translated">場合 &lt;code&gt;gen_server&lt;/code&gt; が要求以外のメッセージを受信できるようにすることです、コールバック関数 &lt;code&gt;handle_info(Info, State)&lt;/code&gt; それらを処理するために実装する必要があります。他のメッセージの例は、 &lt;code&gt;gen_server&lt;/code&gt; が（スーパーバイザ以外の）他のプロセスにリンクされており、終了信号をトラップしている場合の終了メッセージです。</target>
        </trans-unit>
        <trans-unit id="2f9738619fd7812022c1fdbad1b01a2e041bfacc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; process is part of a supervision tree and is ordered by its supervisor to terminate, this function is called with &lt;code&gt;Reason=shutdown&lt;/code&gt; if the following conditions apply:</source>
          <target state="translated">場合は &lt;code&gt;gen_server&lt;/code&gt; のプロセスが監督・ツリーの一部であり、終了するためにその上司が注文されて、この機能を使用して呼び出され &lt;code&gt;Reason=shutdown&lt;/code&gt; 次の条件が適用される場合：</target>
        </trans-unit>
        <trans-unit id="deb0cd9df07520473713789c264957ed22e0fd37" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; process is successfully created and initialized, the function returns &lt;code&gt;{ok,Pid}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the &lt;code&gt;gen_server&lt;/code&gt; process. If a process with the specified &lt;code&gt;ServerName&lt;/code&gt; exists already, the function returns &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of that process.</source>
          <target state="translated">場合 &lt;code&gt;gen_server&lt;/code&gt; のプロセスが正常に作成され、初期化され、関数が戻る &lt;code&gt;{ok,Pid}&lt;/code&gt; 、ここで、 &lt;code&gt;Pid&lt;/code&gt; のPIDである &lt;code&gt;gen_server&lt;/code&gt; のプロセス。指定された &lt;code&gt;ServerName&lt;/code&gt; を持つプロセスがすでに存在する場合、関数は &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はそのプロセスのpidです。</target>
        </trans-unit>
        <trans-unit id="7b56e5a9d7d5389ddf0dc35b8aa333d9d01bbefc" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_server&lt;/code&gt; process needs to perform an action immediately after initialization or to break the execution of a callback into multiple steps, it can return &lt;code&gt;{continue,Continue}&lt;/code&gt; in place of the time-out or hibernation value, which will immediately invoke the &lt;code&gt;handle_continue/2&lt;/code&gt; callback.</source>
          <target state="translated">&lt;code&gt;gen_server&lt;/code&gt; プロセスが初期化の直後にアクションを実行する必要がある場合、またはコールバックの実行を複数のステップに分割する必要がある場合、タイムアウト値または休止値の代わりに &lt;code&gt;{continue,Continue}&lt;/code&gt; 返すことができます。これにより、 &lt;code&gt;handle_continue/2&lt;/code&gt; が直ちに呼び出されます。 2コールバック。</target>
        </trans-unit>
        <trans-unit id="490e75ed674d410c271a45a56872f3c49ab0b58b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is not part of a supervision tree, it can be stopped using &lt;code&gt;gen_statem:stop&lt;/code&gt;, preferably through an API function:</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; が監視ツリーの一部でない場合は、gen_statem &lt;code&gt;gen_statem:stop&lt;/code&gt; を使用して、できればAPI関数を使用して停止できます。</target>
        </trans-unit>
        <trans-unit id="36f4edf0379e907c933af357c419f98ac2861c66" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is part of a supervision tree and is ordered by its supervisor to terminate, this function is called with &lt;code&gt;Reason = shutdown&lt;/code&gt; if both the following conditions apply:</source>
          <target state="translated">場合 &lt;code&gt;gen_statem&lt;/code&gt; が監督・ツリーの一部であり、終了するためにその上司が注文されて、この機能を使用して呼び出され &lt;code&gt;Reason = shutdown&lt;/code&gt; 次の両方の条件に該当する場合：</target>
        </trans-unit>
        <trans-unit id="ac199e9236c5ed4f285d3986ed2287bb9a4c55ce" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is part of a supervision tree, no stop function is needed. The &lt;code&gt;gen_statem&lt;/code&gt; is automatically terminated by its supervisor. Exactly how this is done is defined by a &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; set in the supervisor.</source>
          <target state="translated">&lt;code&gt;gen_statem&lt;/code&gt; が監視ツリーの一部である場合、停止機能は必要ありません。 &lt;code&gt;gen_statem&lt;/code&gt; は自動的にスーパーバイザで終了します。これが正確にどのように行われるかは、スーパーバイザに設定された &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; によって定義されます。</target>
        </trans-unit>
        <trans-unit id="622dc023e6ca738739a4198b61e3fabf701c009b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; is successfully created and initialized, this function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{ok,Pid}&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the &lt;code&gt;pid()&lt;/code&gt; of the &lt;code&gt;gen_statem&lt;/code&gt;. If a process with the specified &lt;code&gt;ServerName&lt;/code&gt; exists already, this function returns &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,{already_started,Pid}}&lt;/a&gt;&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the &lt;code&gt;pid()&lt;/code&gt; of that process.</source>
          <target state="translated">場合 &lt;code&gt;gen_statem&lt;/code&gt; が正常に作成され、初期化され、この関数の戻り &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{ok,Pid}&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Pid&lt;/code&gt; ある &lt;code&gt;pid()&lt;/code&gt; の &lt;code&gt;gen_statem&lt;/code&gt; 。指定された &lt;code&gt;ServerName&lt;/code&gt; を持つプロセスがすでに存在する場合、この関数は &lt;code&gt;&lt;a href=&quot;#type-start_ret&quot;&gt;{error,{already_started,Pid}}&lt;/a&gt;&lt;/code&gt; 返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はその &lt;code&gt;pid()&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="6640f29cc42fa72e56c964d772278b2e50af15d6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;gen_statem&lt;/code&gt; runs with &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt;, the &lt;strong&gt;state enter call&lt;/strong&gt; is repeated, see type &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt;, other than that &lt;code&gt;repeat_state&lt;/code&gt; is the same as &lt;code&gt;keep_state&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;gen_statem&lt;/code&gt; と実行 &lt;code&gt;&lt;a href=&quot;#type-state_enter&quot;&gt;&lt;strong&gt;state enter calls&lt;/strong&gt;&lt;/a&gt;&lt;/code&gt; 、&lt;strong&gt;状態が通話を入力して&lt;/strong&gt;繰り返され、型を参照 &lt;code&gt;&lt;a href=&quot;#type-transition_option&quot;&gt;transition_option()&lt;/a&gt;&lt;/code&gt; 、それ以外の &lt;code&gt;repeat_state&lt;/code&gt; は同じです &lt;code&gt;keep_state&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="b7d4b7b9947ceb2e1f75b847cb2c2cefc610ce87" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;inform request behaviour&lt;/code&gt; configuration option is set to &lt;code&gt;user&lt;/code&gt; or &lt;code&gt;{user, integer()}&lt;/code&gt;, the response (acknowledgment) to this inform-request will be sent when this function returns.</source>
          <target state="translated">場合 &lt;code&gt;inform request behaviour&lt;/code&gt; 設定オプションに設定されている &lt;code&gt;user&lt;/code&gt; または &lt;code&gt;{user, integer()}&lt;/code&gt; 、この通知要求に対する応答（確認応答）をすると、この関数のリターンを送信します。</target>
        </trans-unit>
        <trans-unit id="f12a4aa7db27654fb06f0356ee419770a3c5990d" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;main/1&lt;/code&gt; function in the script returns successfully, the exit status for the script is &lt;code&gt;0&lt;/code&gt;. If an exception is generated during execution, a short message is printed and the script terminates with exit status &lt;code&gt;127&lt;/code&gt;.</source>
          <target state="translated">スクリプトの &lt;code&gt;main/1&lt;/code&gt; 関数が正常に戻る場合、スクリプトの終了ステータスは &lt;code&gt;0&lt;/code&gt; です。実行中に例外が生成されると、短いメッセージが出力され、スクリプトは終了ステータス &lt;code&gt;127&lt;/code&gt; で終了します。</target>
        </trans-unit>
        <trans-unit id="6df86c1718762f44b04c0cb308484d1d6c310a34" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;max_sessions&lt;/code&gt; option is set to &lt;code&gt;N&lt;/code&gt; and &lt;code&gt;parallel_login&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, the maximum number of simultaneous login attempts at any time is limited to &lt;code&gt;N-K&lt;/code&gt;, where &lt;code&gt;K&lt;/code&gt; is the number of authenticated connections present at this daemon.</source>
          <target state="translated">場合 &lt;code&gt;max_sessions&lt;/code&gt; オプションに設定されている &lt;code&gt;N&lt;/code&gt; と &lt;code&gt;parallel_login&lt;/code&gt; がに設定されている &lt;code&gt;true&lt;/code&gt; 、任意の時点での同時ログイン試行の最大数が制限される &lt;code&gt;N-K&lt;/code&gt; 、 &lt;code&gt;K&lt;/code&gt; は、このデーモンに存在する認証された接続の数です。</target>
        </trans-unit>
        <trans-unit id="279c740df4997832935268858ff97ba56a5fb972" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;parse_transform&lt;/code&gt; is not applied to a module that calls this pseudo function, the call fails in runtime (with a &lt;code&gt;badarg&lt;/code&gt;). The &lt;code&gt;ets&lt;/code&gt; module exports a function with this name, but it is never to be called except when using the function in the shell. If the &lt;code&gt;parse_transform&lt;/code&gt; is properly applied by including header file &lt;code&gt;ms_transform.hrl&lt;/code&gt;, compiled code never calls the function, but the function call is replaced by a literal match specification.</source>
          <target state="translated">この疑似関数を呼び出すモジュールに &lt;code&gt;parse_transform&lt;/code&gt; が適用されていない場合、呼び出しは実行時に失敗します（ &lt;code&gt;badarg&lt;/code&gt; を使用）。 &lt;code&gt;ets&lt;/code&gt; モジュールは、この名前の関数をエクスポートしますが、それはシェルで機能を使用する場合を除き、呼び出されることはありません。ヘッダーファイル &lt;code&gt;ms_transform.hrl&lt;/code&gt; を &lt;code&gt;parse_transform&lt;/code&gt; が適切に適用されている場合、コンパイルされたコードが関数を呼び出すことはありませんが、関数呼び出しはリテラル一致指定に置き換えられます。</target>
        </trans-unit>
        <trans-unit id="91c8b62af5511bc181fbe7c0815f7318805644f6" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;per_cpu&lt;/code&gt; is not given, the value(s) presented are the average of all CPUs.</source>
          <target state="translated">&lt;code&gt;per_cpu&lt;/code&gt; が指定されていない場合、表示される値はすべてのCPUの平均です。</target>
        </trans-unit>
        <trans-unit id="2c4b5f09b562c0e8df5ab61a0939a3cca6eab6e5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;qlc&lt;/code&gt; module at compile time can determine that some constant is free of integers, it does not matter which one of &lt;code&gt;==/2&lt;/code&gt; or &lt;code&gt;=:=/2&lt;/code&gt; is used:</source>
          <target state="translated">場合 &lt;code&gt;qlc&lt;/code&gt; コンパイル時にモジュールは、いくつかの定数は整数の自由であると判断することができ、それは問題ではその一つではないん &lt;code&gt;==/2&lt;/code&gt; または &lt;code&gt;=:=/2&lt;/code&gt; が使用されます。</target>
        </trans-unit>
        <trans-unit id="9ebaa062ac28936382e2d57abb7b4e12d177d78c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;relup&lt;/code&gt; file is relatively simple, it can be created manually. It is only to contain low-level instructions.</source>
          <target state="translated">&lt;code&gt;relup&lt;/code&gt; ファイルが比較的単純な場合は、手動で作成できます。低レベルの命令を含めるだけです。</target>
        </trans-unit>
        <trans-unit id="345d6310f85895e6842a34eabfe92151229e6b95" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;relup&lt;/code&gt; file is relatively simple, it can be created manually. It it only to contain low-level instructions.</source>
          <target state="translated">&lt;code&gt;relup&lt;/code&gt; ファイルが比較的単純な場合は、手動で作成できます。それは低レベルの命令を含むだけです。</target>
        </trans-unit>
        <trans-unit id="c30c579f26aae9f62a722f68b38557366dc19832" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction is found in the script, &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt;. This because &lt;code&gt;restart_new_emulator&lt;/code&gt; requires a new version of the emulator to be started before the rest of the upgrade instructions can be executed, and this can only be done by &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;restart_new_emulator&lt;/code&gt; の命令は、スクリプト、に見出される &lt;code&gt;&lt;a href=&quot;#eval_appup_script-4&quot;&gt;eval_appup_script/4&lt;/a&gt;&lt;/code&gt; 戻る &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt; 。これは、 &lt;code&gt;restart_new_emulator&lt;/code&gt; では、残りのアップグレード手順を実行する前に、新しいバージョンのエミュレーターを起動する必要があるためです。これは、 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; によってのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="a3734548d24c8fafceb3c3b7a48423c44c0a982c" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;restart_new_emulator&lt;/code&gt; instruction is found in the script, &lt;code&gt;&lt;a href=&quot;#upgrade_app-2&quot;&gt;upgrade_app/2&lt;/a&gt;&lt;/code&gt; returns &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt;. This because &lt;code&gt;restart_new_emulator&lt;/code&gt; requires a new version of the emulator to be started before the rest of the upgrade instructions can be executed, and this can only be done by &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;restart_new_emulator&lt;/code&gt; の命令は、スクリプト、に見出される &lt;code&gt;&lt;a href=&quot;#upgrade_app-2&quot;&gt;upgrade_app/2&lt;/a&gt;&lt;/code&gt; 戻る &lt;code&gt;{error,restart_new_emulator}&lt;/code&gt; 。これは、 &lt;code&gt;restart_new_emulator&lt;/code&gt; では、残りのアップグレード手順を実行する前に、新しいバージョンのエミュレーターを起動する必要があるためです。これは、 &lt;code&gt;&lt;a href=&quot;#install_release-1&quot;&gt;install_release/1,2&lt;/a&gt;&lt;/code&gt; によってのみ実行できます。</target>
        </trans-unit>
        <trans-unit id="52741bb5942e459f72dab152ca12b8b26eff70c9" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;send_notification/3,4&lt;/code&gt; function is used, all management targets are selected, as defined in RFC2273. The &lt;code&gt;Receiver&lt;/code&gt; parameter defines where the agent should send information about the delivery of inform requests.</source>
          <target state="translated">&lt;code&gt;send_notification/3,4&lt;/code&gt; 関数が使用される場合、RFC2273で定義されているように、すべての管理ターゲットが選択されます。 &lt;code&gt;Receiver&lt;/code&gt; エージェントが通知要求の配信に関する情報を送信する必要があり、パラメータを定義。</target>
        </trans-unit>
        <trans-unit id="4e603d462637bea7ebad3ed1b02ae3e6befcd5e2" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;send_notification/5&lt;/code&gt; function is used, an &lt;code&gt;NotifyName&lt;/code&gt; must be provided. This parameter is used as an index in the &lt;code&gt;snmpNotifyTable&lt;/code&gt;, and the management targets defined by that single entry is used.</source>
          <target state="translated">場合 &lt;code&gt;send_notification/5&lt;/code&gt; 機能を使用している、 &lt;code&gt;NotifyName&lt;/code&gt; が提供されなければなりません。このパラメーターは &lt;code&gt;snmpNotifyTable&lt;/code&gt; のインデックスとして使用され、その単一のエントリによって定義された管理ターゲットが使用されます。</target>
        </trans-unit>
        <trans-unit id="dde37de921a26a59041af8e4c9013eabdc7311af" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;system_logger&lt;/code&gt; process dies, this flag will be reset to &lt;code&gt;logger&lt;/code&gt;.</source>
          <target state="translated">場合 &lt;code&gt;system_logger&lt;/code&gt; のプロセスが死んだ、このフラグはリセットされます &lt;code&gt;logger&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="13bd2cdf7f65d1258410067e1dbfa02e06ec92b4" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;wxUSE_POSTSCRIPT&lt;/code&gt; isn't enabled in &lt;code&gt;&amp;lt;path\to\pgm&amp;gt;\wxMSW-3.0.3\include\wx\msw\setup.h&lt;/code&gt;, enable it.</source>
          <target state="translated">&lt;code&gt;&amp;lt;path\to\pgm&amp;gt;\wxMSW-3.0.3\include\wx\msw\setup.h&lt;/code&gt; で &lt;code&gt;wxUSE_POSTSCRIPT&lt;/code&gt; が有効になっていない場合は、有効にします。</target>
        </trans-unit>
        <trans-unit id="d160ec14cdba130b3a52eed8160428fd608a596b" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;wxUSE_POSTSCRIPT&lt;/code&gt; isn't enabled in &lt;code&gt;c:/opt/local64/pgm/wxWidgets-3.1.3/include/wx/msw/setup.h&lt;/code&gt;, enable it.</source>
          <target state="translated">&lt;code&gt;c:/opt/local64/pgm/wxWidgets-3.1.3/include/wx/msw/setup.h&lt;/code&gt; で &lt;code&gt;wxUSE_POSTSCRIPT&lt;/code&gt; が有効になっていない場合は、有効にします。</target>
        </trans-unit>
        <trans-unit id="99871da2f295c0790df21d324a78c1b82d11e8b5" translate="yes" xml:space="preserve">
          <source>If the &lt;code&gt;{extra_files, ExtraFiles}&lt;/code&gt; option is given then the &lt;code&gt;ExtraFiles&lt;/code&gt; are added to the tarball after everything else to be included has been added. The &lt;code&gt;ExtraFiles&lt;/code&gt; list is a list of files or directories in the same format as the &lt;code&gt;add_type()&lt;/code&gt; tuple for &lt;code&gt;erl_tar:add/3,4&lt;/code&gt;</source>
          <target state="translated">場合は &lt;code&gt;{extra_files, ExtraFiles}&lt;/code&gt; オプションが与えられ、その後 &lt;code&gt;ExtraFiles&lt;/code&gt; が含まれる他のすべての後のtarballに追加された追加されました。 &lt;code&gt;ExtraFiles&lt;/code&gt; のリストには、同じ形式のファイルまたはディレクトリのリストである &lt;code&gt;add_type()&lt;/code&gt; のためのタプル &lt;code&gt;erl_tar:add/3,4&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="275e62491f49fb1a70d7127de6210ff8d9a19127" translate="yes" xml:space="preserve">
          <source>If the ASN.1 module has been compiled with option &lt;code&gt;maps&lt;/code&gt;, the types &lt;code&gt;SEQUENCE&lt;/code&gt; and &lt;code&gt;SET&lt;/code&gt; are represented as maps.</source>
          <target state="translated">ASN.1モジュールがオプション &lt;code&gt;maps&lt;/code&gt; でコンパイルされている場合、タイプ &lt;code&gt;SEQUENCE&lt;/code&gt; および &lt;code&gt;SET&lt;/code&gt; はマップとして表されます。</target>
        </trans-unit>
        <trans-unit id="722c5c772253cfa0375f5705288b0321c521aa8d" translate="yes" xml:space="preserve">
          <source>If the AckStatus is ok, it is indicating that this is a true acknowledgement of the transaction reply.</source>
          <target state="translated">AckStatusがOKであれば、それはこれがトランザクションリプライの真の確認であることを示している。</target>
        </trans-unit>
        <trans-unit id="d0f84b01e010783659e66100fe954814d18e563f" translate="yes" xml:space="preserve">
          <source>If the AckStatus is {error, Reason}, it is an indication that the acknowledgement or even the reply (for which this is an acknowledgement) was not delivered, but there is no point in waiting any longer for it to arrive. This happens when:</source>
          <target state="translated">AckStatus が {error,Reason}である場合、これは確認応答や応答(これが確認応答である)が届かなかったことを示していますが、これ以上到着を待っても意味がありません。これは次のような場合に起こります。</target>
        </trans-unit>
        <trans-unit id="88faac2c33abe1fdc3fc1b10f5136c262bb64e7a" translate="yes" xml:space="preserve">
          <source>If the BEAM file contains &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt;, then a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">BEAMファイルに &lt;code&gt;&lt;a href=&quot;#debug_info&quot;&gt;debug information&lt;/a&gt;&lt;/code&gt; が含まれている場合、タプルのリストが返されます。各タプルの最初の要素は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="52ebbcd03e14972b092b8f0cc1bbe4c3dd868b59" translate="yes" xml:space="preserve">
          <source>If the BEAM file does not contain debug information, then a list of tuples is returned. The first element of each tuple is one of:</source>
          <target state="translated">BEAM ファイルにデバッグ情報が含まれていない場合は、タプルのリストが返されます。各タプルの最初の要素は、以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="5e318cbbe5a1c0ec48c8b2b2021ac1f10131570e" translate="yes" xml:space="preserve">
          <source>If the C node acts as a server, it must first create a socket (call &lt;code&gt;bind()&lt;/code&gt; and &lt;code&gt;listen()&lt;/code&gt;) listening to a certain port number &lt;code&gt;port&lt;/code&gt;. It then publishes its name and port number with &lt;code&gt;epmd&lt;/code&gt;, the Erlang port mapper daemon. For details, see the &lt;code&gt;epmd&lt;/code&gt; manual page in ERTS:</source>
          <target state="translated">Cノードがサーバーとして機能する場合、最初に特定のポート番号 &lt;code&gt;port&lt;/code&gt; を &lt;code&gt;listen()&lt;/code&gt; &lt;code&gt;bind()&lt;/code&gt; ソケット（bind（）およびlisten（）を呼び出す）を作成する必要があります。次に、Erlangポートマッパーデーモンである &lt;code&gt;epmd&lt;/code&gt; を使用して、名前とポート番号を公開します。詳細については、 &lt;code&gt;epmd&lt;/code&gt; マニュアルページを参照してください。</target>
        </trans-unit>
        <trans-unit id="82d38ec527a550307461604062c03b211a833f6c" translate="yes" xml:space="preserve">
          <source>If the COND1 pattern matches, FOO is tried (and possibly further items after the end of the group if FOO succeeds). On failure, the matcher skips to the second alternative and tries COND2, without backtracking into COND1. If that succeeds and BAR fails, COND3 is tried. If BAZ then fails, there are no more alternatives, so there is a backtrack to whatever came before the entire group. If (*THEN) is not inside an alternation, it acts like (*PRUNE).</source>
          <target state="translated">COND1 パターンが一致した場合、FOO が試行される(FOO が成功した場合は、グループの終了後にさらに別の項目が試行される可能性もある)。失敗した場合、マッチャーは2番目の代替案にスキップし、COND1にバックトラックせずにCOND2を試みる。これが成功してBARが失敗した場合、COND3が試される。BAZ が失敗した場合、それ以上の選択肢はないので、グループ全体の前に来たものへのバックトラックが発生する。(*THEN)が選択肢の中にない場合は、(*PRUNE)のように動作します。</target>
        </trans-unit>
        <trans-unit id="ac5eaef6ff1820888de0ffa5ad9b4186d0234433" translate="yes" xml:space="preserve">
          <source>If the CPU information has changed since the last time it was read, the atom &lt;code&gt;changed&lt;/code&gt; is returned, otherwise the atom &lt;code&gt;unchanged&lt;/code&gt;. If the CPU information has changed, you probably want to &lt;code&gt;&lt;a href=&quot;#system_flag_schedulers_online&quot;&gt;adjust the number of schedulers online&lt;/a&gt;&lt;/code&gt;. You typically want to have as many schedulers online as &lt;code&gt;&lt;a href=&quot;#system_info_logical_processors_available&quot;&gt;logical processors available&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">CPU情報は、それが読まれた最後の時間以降に変更された場合には、原子 &lt;code&gt;changed&lt;/code&gt; そうでない原子、返される &lt;code&gt;unchanged&lt;/code&gt; 。CPU情報が変更された場合は、おそらく &lt;code&gt;&lt;a href=&quot;#system_flag_schedulers_online&quot;&gt;adjust the number of schedulers online&lt;/a&gt;&lt;/code&gt; を調整する必要があります。通常、 &lt;code&gt;&lt;a href=&quot;#system_info_logical_processors_available&quot;&gt;logical processors available&lt;/a&gt;&lt;/code&gt; 同じ数のスケジューラをオンラインにしたいとします。</target>
        </trans-unit>
        <trans-unit id="a41da23020d6b98e8307d0411d62373331fcee35" translate="yes" xml:space="preserve">
          <source>If the CertificateRequest message contained a non-empty &quot;oid_filters&quot; extension, the end-entity certificate MUST match the extension OIDs that are recognized by the client</source>
          <target state="translated">CertificateRequestメッセージに空でない「oid_filters」拡張が含まれていた場合、エンドエンティティ証明書は、クライア ントが認識する拡張OIDと一致しなければならない[MUST]。</target>
        </trans-unit>
        <trans-unit id="674a0c6bf29cc8c8f0b253946e997318f6046675" translate="yes" xml:space="preserve">
          <source>If the Dets storage method is used, the group database is maintained by Dets and must not be edited by hand. Use the API for module &lt;code&gt;mod_auth&lt;/code&gt; to create/edit the group database. This directive is ignored if the Mnesia storage method is used. For security reasons, ensure that the &lt;code&gt;auth_group_file&lt;/code&gt; is stored outside the document tree of the web server. If it is placed in the directory that it protects, clients can download it.</source>
          <target state="translated">Detsストレージ方式を使用する場合、グループデータベースはDetsによって維持され、手動で編集することはできません。モジュール &lt;code&gt;mod_auth&lt;/code&gt; のAPIを使用して、グループデータベースを作成/編集します。 Mnesiaストレージ方式が使用されている場合、このディレクティブは無視されます。セキュリティ上の理由から、 &lt;code&gt;auth_group_file&lt;/code&gt; がWebサーバーのドキュメントツリーの外部に格納されていることを確認してください。それが保護するディレクトリに配置されている場合、クライアントはそれをダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="2690e1607b444fbdfb4354a7fc5e69fab4fc5a65" translate="yes" xml:space="preserve">
          <source>If the Dets storage method is used, the user database is maintained by Dets and must not be edited by hand. Use the API functions in module &lt;code&gt;mod_auth&lt;/code&gt; to create/edit the user database. This directive is ignored if the Mnesia storage method is used. For security reasons, ensure that &lt;code&gt;auth_user_file&lt;/code&gt; is stored outside the document tree of the web server. If it is placed in the directory that it protects, clients can download it.</source>
          <target state="translated">Detsストレージ方式を使用する場合、ユーザーデータベースはDetsによって維持され、手動で編集してはなりません。モジュール &lt;code&gt;mod_auth&lt;/code&gt; の API関数を使用して、ユーザーデータベースを作成/編集します。 Mnesiaストレージ方式が使用されている場合、このディレクティブは無視されます。セキュリティ上の理由から、 &lt;code&gt;auth_user_file&lt;/code&gt; がWebサーバーのドキュメントツリーの外部に格納されていることを確認してください。それが保護するディレクトリに配置されている場合、クライアントはそれをダウンロードできます。</target>
        </trans-unit>
        <trans-unit id="5d6f0952016312ac237e99b15d9161adf55f700d" translate="yes" xml:space="preserve">
          <source>If the Erlang node was alive, that is, set up for communicating with other nodes, this section lists the connections that were active. The following fields can exist:</source>
          <target state="translated">Erlangノードが生きていた場合、つまり他のノードと通信できるように設定されていた場合、このセクションではアクティブなコネクションのリストを表示します。以下のフィールドが存在します。</target>
        </trans-unit>
        <trans-unit id="18daf2db870215dd47d6849bc420623f1e0d4030" translate="yes" xml:space="preserve">
          <source>If the Erlang runtime system is the only OS process binding threads to logical processors, this improves the performance of the runtime system. However, if other OS processes (for example, another Erlang runtime system) also bind threads to logical processors, there can be a performance penalty instead. Sometimes this performance penalty can be severe. If so, it is recommended to not bind the schedulers.</source>
          <target state="translated">もしErlangランタイムシステムが唯一のOSプロセスが論理プロセッサにスレッドをバインドしている場合、ランタイムシステムのパフォーマンスが向上します。しかし、他のOSプロセス(例えば、他のErlangランタイムシステム)もスレッドを論理プロセッサにバインドしている場合、パフォーマンスのペナルティが発生することがあります。時には、このパフォーマンスペナルティが深刻になることもあります。その場合、スケジューラをバインドしないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="3549c6b8d3c0426e098c164e7bd7160b6e4be362" translate="yes" xml:space="preserve">
          <source>If the Erlang runtime system is the only operating system process that binds threads to logical processors, this improves the performance of the runtime system. However, if other operating system processes (for example another Erlang runtime system) also bind threads to logical processors, there can be a performance penalty instead. This performance penalty can sometimes be severe. If so, you are advised not to bind the schedulers.</source>
          <target state="translated">もしErlangランタイムシステムがスレッドを論理プロセッサにバインドする唯一のオペレーティングシステムプロセスなら、ランタイムシステムのパフォーマンスが向上します。しかし、他のオペレーティングシステムプロセス(例えば他のErlangランタイムシステム)もスレッドを論理プロセッサにバインドしている場合、パフォーマンスのペナルティが発生することがあります。このパフォーマンスペナルティは時に深刻になることがあります。その場合、スケジューラをバインドしないことをお勧めします。</target>
        </trans-unit>
        <trans-unit id="78b8e3a5a6a0636736a794de9e5a1415d4c36fbf" translate="yes" xml:space="preserve">
          <source>If the Erlang shell buffer would be killed the command line history is saved to a file. The command line history is automatically retrieved when a new Erlang shell is started.</source>
          <target state="translated">もしErlangシェルバッファが死んでしまった場合、コマンドラインの履歴はファイルに保存されます。コマンドラインの履歴は新しいErlangシェルが起動すると自動的に取得されます。</target>
        </trans-unit>
        <trans-unit id="5ad331d93d63bf83b44ef888cb4e43e94ea364bb" translate="yes" xml:space="preserve">
          <source>If the INDEX column is of type INTEGER, or derived from INTEGER, the corresponding type should be &lt;code&gt;integer&lt;/code&gt;. If it is a variable length type (e.g. OBJECT IDENTIFIER, OCTET STRING), the corresponding type should be &lt;code&gt;string&lt;/code&gt;. Finally, if the type is of variable length, but with a fixed size restriction (e.g. IpAddress), the corresponding type should be &lt;code&gt;fix_string&lt;/code&gt;.</source>
          <target state="translated">INDEX列のタイプがINTEGERであるか、INTEGERから派生している場合、対応するタイプは &lt;code&gt;integer&lt;/code&gt; でなければなりません。可変長タイプ（OBJECT IDENTIFIER、OCTET STRINGなど）の場合、対応するタイプは &lt;code&gt;string&lt;/code&gt; でなければなりません。最後に、型が可変長であるが、サイズ制限が固定されている場合（IpAddressなど）、対応する型は &lt;code&gt;fix_string&lt;/code&gt; でなければなりません。</target>
        </trans-unit>
        <trans-unit id="27815f723f23d4e4cf3d912f3476eb64c838477e" translate="yes" xml:space="preserve">
          <source>If the MG cannot be provisioned with the MID of the MGC, the MG can use the atom 'preliminary_mid' as the RemoteMid parameter to megaco:connect/4 and the call flow will look like this:</source>
          <target state="translated">MGがMGCのMIDでプロビジョニングできない場合、MGはmegaco:connect/4のRemoteMidパラメータにアトム'previous_mid'を使用することができ、コールフローは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="291d17d4be116cb44759c41864d170474773407f" translate="yes" xml:space="preserve">
          <source>If the MG has been provisioned with the MID of the MGC it can be given as the RemoteMid parameter to megaco:connect/4 and the call flow will look like this:</source>
          <target state="translated">MGがMGCのMIDでプロビジョニングされている場合は、そのMIDをRemoteMidパラメータとしてmegaco:connect/4に与えることができ、コールフローは以下のようになります。</target>
        </trans-unit>
        <trans-unit id="3d3ec8b1bad21c29a9fcf6552b6d84ffcf7600b8" translate="yes" xml:space="preserve">
          <source>If the Mnesia database is used, this function calls &lt;code&gt;mnesia:write&lt;/code&gt; to store the values. This means that this function must be called from within a transaction (&lt;code&gt;mnesia:transaction/1&lt;/code&gt; or &lt;code&gt;mnesia:dirty/1&lt;/code&gt;).</source>
          <target state="translated">Mnesiaデータベースが使用されている場合、この関数は &lt;code&gt;mnesia:write&lt;/code&gt; を呼び出して値を格納します。つまり、この関数はトランザクション内から呼び出す必要があります（ &lt;code&gt;mnesia:transaction/1&lt;/code&gt; または &lt;code&gt;mnesia:dirty/1&lt;/code&gt; ）。</target>
        </trans-unit>
        <trans-unit id="40a56f15bd541bd82f926eed2c112eaac90f9e71" translate="yes" xml:space="preserve">
          <source>If the NIF call is too lengthy, this must be handled in one of the following ways to avoid degraded responsiveness, scheduler load balancing problems, and other strange behaviors:</source>
          <target state="translated">NIFコールが長すぎる場合、応答性の低下、スケジューラのロードバランシング問題、その他の奇妙な動作を避けるために、以下のいずれかの方法で処理する必要があります。</target>
        </trans-unit>
        <trans-unit id="436a83604c57a3e3475d1d2d6359ca37e137b110" translate="yes" xml:space="preserve">
          <source>If the OBJECT IDENTIFIER is longer than an OBJECT IDENTIFIER of an object type in the MIB, it refers to object instances. Because of this, it is possible to control whether or not particular rows in a table shall be visible.</source>
          <target state="translated">OBJECT IDENTIFIERがMIB内のオブジェクト型のOBJECT IDENTIFIERよりも長い場合は,オブジェクトインスタンスを参照する。このため,テーブル内の特定の行を可視化するかどうかを制御することが可能である。</target>
        </trans-unit>
        <trans-unit id="b1b26d2a72fe7f32dcd9c24e2f00608157279f71" translate="yes" xml:space="preserve">
          <source>If the OS used does not support non-blocking &lt;code&gt;sendfile&lt;/code&gt;, an Erlang fallback using &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;gen_tcp#send-2&quot;&gt;gen_tcp:send/2&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">使用しているOSが非ブロッキング &lt;code&gt;sendfile&lt;/code&gt; をサポートしていない場合、 &lt;code&gt;&lt;a href=&quot;#read-2&quot;&gt;read/2&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;gen_tcp#send-2&quot;&gt;gen_tcp:send/2&lt;/a&gt;&lt;/code&gt; を使用したErlangフォールバックが使用されます。</target>
        </trans-unit>
        <trans-unit id="b3598222fc1bb53b9989c1f5e6bfd02eed50487d" translate="yes" xml:space="preserve">
          <source>If the SNMP agent needs to interact with sub-agents constructed in another package, a special sub-agent should be used, which communicates through a protocol specified by the other package.</source>
          <target state="translated">SNMPエージェントが他のパッケージで構築されたサブエージェントと対話する必要がある場合、他のパッケージで指定されたプロトコルを介して通信する特別なサブエージェントを使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1c500f599c51107a79c77a136f03f46d05fafc58" translate="yes" xml:space="preserve">
          <source>If the SNMP table has more than one INDEX column, the corresponding Mnesia row is a tuple, where the first element is a tuple with the INDEX columns. Generally, if the SNMP table has &lt;strong&gt;N&lt;/strong&gt; INDEX columns and &lt;strong&gt;C&lt;/strong&gt; data columns, the Mnesia table is of arity &lt;strong&gt;(C-N)+1&lt;/strong&gt;, where the key is a tuple of arity &lt;strong&gt;N&lt;/strong&gt; if &lt;strong&gt;N &amp;gt; 1&lt;/strong&gt;, or a single term if &lt;strong&gt;N = 1&lt;/strong&gt;.</source>
          <target state="translated">SNMPテーブルに複数のINDEX列がある場合、対応するMnesia行はタプルです。最初の要素はINDEX列を持つタプルです。一般に、SNMPテーブルに&lt;strong&gt;N&lt;/strong&gt; INDEX列と&lt;strong&gt;C&lt;/strong&gt;データ列がある場合、Mnesiaテーブルはアリティ&lt;strong&gt;（CN）+1&lt;/strong&gt;であり、キーは&lt;strong&gt;N&amp;gt; 1の&lt;/strong&gt;場合はアリティ&lt;strong&gt;Nの&lt;/strong&gt;タプル、&lt;strong&gt;N = 1の&lt;/strong&gt;場合は単一の項です。&lt;strong&gt;&lt;/strong&gt;&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="3c217a2396ebcee146469f461600abdf337e010c" translate="yes" xml:space="preserve">
          <source>If the TFTP server receives yet another request from the same client (same host and port) while it already has an active connection to the client, it ignores the new request if the request is equal to the first one (same filename and options). This implies that the (new) client will be served by the already ongoing connection on the server side. By not setting up yet another connection, in parallel with the ongoing one, the server consumes less resources.</source>
          <target state="translated">TFTP サーバは、既にクライアントへのアクティブな接続がある状態で、 同じクライアント (同じホストとポート)から別のリクエストを受け取った場合、 そのリクエストが最初のリクエスト (ファイル名とオプションが同じ)と同じであれば、その新しいリクエストを無視します。これは、(新しい)クライアントはサーバ側で既に進行中の接続によって 扱われることを意味しています。進行中の接続と並行して別の接続を設定しないことで、サーバはより少ないリソースを消費します。</target>
        </trans-unit>
        <trans-unit id="89cbc4f7538c3f8a055eafb734ab8d43e17f7e9a" translate="yes" xml:space="preserve">
          <source>If the Unicode translation modifier (&lt;code&gt;t&lt;/code&gt;) is in effect, the integer argument can be any number representing a valid Unicode codepoint, otherwise it is to be an integer less than or equal to 255, otherwise it is masked with 16#FF:</source>
          <target state="translated">Unicode変換修飾子（ &lt;code&gt;t&lt;/code&gt; ）が有効な場合、整数の引数は有効なUnicodeコードポイントを表す任意の数値にすることができます。それ以外の場合は、255以下の整数にし、そうでない場合は16＃FFでマスクします。</target>
        </trans-unit>
        <trans-unit id="cc5c86359b9d2f999369876543233d4ea822c7b0" translate="yes" xml:space="preserve">
          <source>If the Unicode translation modifier (&lt;code&gt;t&lt;/code&gt;) is used in the format string, all event handlers must ensure that the formatted output is correctly encoded for the I/O device.</source>
          <target state="translated">Unicode変換修飾子（ &lt;code&gt;t&lt;/code&gt; ）がフォーマット文字列で使用されている場合、すべてのイベントハンドラーは、フォーマットされた出力がI / Oデバイス用に正しくエンコードされていることを確認する必要があります。</target>
        </trans-unit>
        <trans-unit id="9a64305e88f74d03f63e30e4aff9344ad3928f49" translate="yes" xml:space="preserve">
          <source>If the analysis is made on clause level, the result is given as a list of tuples &lt;code&gt;{Clause,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the number of calls to each function clause:</source>
          <target state="translated">分析が句レベルで行われる場合、結果はタプル &lt;code&gt;{Clause,Calls}&lt;/code&gt; リストとして提供されます。ここで &lt;code&gt;Calls&lt;/code&gt; は、各関数句の呼び出し数です。</target>
        </trans-unit>
        <trans-unit id="7bb518d0fd97d3152a60a637270e37af04b13222" translate="yes" xml:space="preserve">
          <source>If the analysis is made on clause level, the result is given as a list of tuples &lt;code&gt;{Clause,{Cov,NotCov}}&lt;/code&gt;, one for each function clause in the module. A clause is specified by its module name, function name, arity and position within the function definition:</source>
          <target state="translated">分析が句レベルで行われる場合、結果はモジュールの各関数句に1つ &lt;code&gt;{Clause,{Cov,NotCov}}&lt;/code&gt; タプル{Clause、{Cov、NotCov}}のリストとして提供されます。節は、モジュール名、関数名、アリティ、および関数定義内の位置によって指定されます。</target>
        </trans-unit>
        <trans-unit id="2478a8c8617596c655cc3da82b5c379b47e51b09" translate="yes" xml:space="preserve">
          <source>If the analysis is made on function level, the result is given as a list of tuples &lt;code&gt;{Function,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the number of calls to each function:</source>
          <target state="translated">分析が関数レベルで行われる場合、結果はタプルのリスト &lt;code&gt;{Function,Calls}&lt;/code&gt; として与えられます。ここで、 &lt;code&gt;Calls&lt;/code&gt; は各関数の呼び出し数です。</target>
        </trans-unit>
        <trans-unit id="55b7df1c13246cf49b1f19e127c65003b3a10d37" translate="yes" xml:space="preserve">
          <source>If the analysis is made on function level, the result is given as a list of tuples &lt;code&gt;{Function,{Cov,NotCov}}&lt;/code&gt;, one for each function in the module. A function is specified by its module name, function name and arity:</source>
          <target state="translated">分析が関数レベルで行われる場合、結果はモジュール内の関数ごとに1つのタプル &lt;code&gt;{Function,{Cov,NotCov}}&lt;/code&gt; リストとして提供されます。関数は、そのモジュール名、関数名、およびアリティによって指定されます。</target>
        </trans-unit>
        <trans-unit id="77e592dc92d7ea0f9403bfb4d1e1860bc8a3fe5a" translate="yes" xml:space="preserve">
          <source>If the analysis is made on module level, the result is given as a tuple &lt;code&gt;{Module,Calls}&lt;/code&gt;. Here &lt;code&gt;Calls&lt;/code&gt; is the total number of calls to functions in the module:</source>
          <target state="translated">分析がモジュールレベルで行われる場合、結果はタプル &lt;code&gt;{Module,Calls}&lt;/code&gt; として与えられます。ここでの &lt;code&gt;Calls&lt;/code&gt; は、モジュール内の関数への呼び出しの総数です。</target>
        </trans-unit>
        <trans-unit id="5cba27c146502c3ec8e1044a59eca78a126f8832" translate="yes" xml:space="preserve">
          <source>If the analysis is made on module level, the result is given for the entire module as a tuple &lt;code&gt;{Module,{Cov,NotCov}}&lt;/code&gt;:</source>
          <target state="translated">分析がモジュールレベルで行われる場合、結果はモジュール全体に対してタプル &lt;code&gt;{Module,{Cov,NotCov}}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="b39d0ccaa857b9f0a8f4a5ffffbdf43a68463d85" translate="yes" xml:space="preserve">
          <source>If the application SSH &lt;strong&gt;is&lt;/strong&gt;&lt;code&gt;&lt;a href=&quot;ssh#start-0&quot;&gt;started&lt;/a&gt;&lt;/code&gt;, the command &lt;code&gt;&lt;a href=&quot;ssh#default_algorithms-0&quot;&gt;ssh:default_algorithms/0&lt;/a&gt;&lt;/code&gt; delvers the list of algorithms after application of level 0 and level 1 configurations.</source>
          <target state="translated">アプリケーションSSH&lt;strong&gt;が&lt;/strong&gt; &lt;code&gt;&lt;a href=&quot;ssh#start-0&quot;&gt;started&lt;/a&gt;&lt;/code&gt; 場合、コマンド &lt;code&gt;&lt;a href=&quot;ssh#default_algorithms-0&quot;&gt;ssh:default_algorithms/0&lt;/a&gt;&lt;/code&gt; は、レベル0およびレベル1の構成を適用した後、アルゴリズムのリストを調べます。</target>
        </trans-unit>
        <trans-unit id="e53045943992891c562424981e5024fb26dfffc6" translate="yes" xml:space="preserve">
          <source>If the application SSH is &lt;strong&gt;not&lt;/strong&gt;&lt;code&gt;&lt;a href=&quot;ssh#start-0&quot;&gt;started&lt;/a&gt;&lt;/code&gt;, the command &lt;code&gt;&lt;a href=&quot;ssh#default_algorithms-0&quot;&gt;ssh:default_algorithms/0&lt;/a&gt;&lt;/code&gt; delivers the list of default (hardcoded) algorithms with respect to the support in the current cryptolib.</source>
          <target state="translated">アプリケーションSSHが &lt;code&gt;&lt;a href=&quot;ssh#start-0&quot;&gt;started&lt;/a&gt;&lt;/code&gt; &lt;strong&gt;いない&lt;/strong&gt;場合、コマンド &lt;code&gt;&lt;a href=&quot;ssh#default_algorithms-0&quot;&gt;ssh:default_algorithms/0&lt;/a&gt;&lt;/code&gt; は、現在のcryptolibでのサポートに関するデフォルト（ハードコードされた）アルゴリズムのリストを提供します。</target>
        </trans-unit>
        <trans-unit id="cde9769f09668ea79529ce6edefab85a0899d6da" translate="yes" xml:space="preserve">
          <source>If the application detects a communication failure (in a potentially partitioned network) that can have caused an inconsistent database, it can use the function &lt;code&gt;mnesia:set_master_nodes(Tab, MasterNodes)&lt;/code&gt; to define from which nodes each table is to be loaded. At startup, the Mnesia normal table load algorithm is bypassed and the table is loaded from one of the master nodes defined for the table, regardless of when and if Mnesia terminated on other nodes. &lt;code&gt;MasterNodes&lt;/code&gt; can only contain nodes where the table has a replica. If the &lt;code&gt;MasterNodes&lt;/code&gt; list is empty, the master node recovery mechanism for the particular table is reset, and the normal load mechanism is used at the next restart.</source>
          <target state="translated">アプリケーションが、データベースの不整合を引き起こした可能性のある（潜在的に分割されたネットワークで）通信障害を検出した場合、関数 &lt;code&gt;mnesia:set_master_nodes(Tab, MasterNodes)&lt;/code&gt; を使用して、各テーブルをロードするノードを定義できます。起動時に、Mnesiaの通常のテーブルロードアルゴリズムはバイパスされ、Mnesiaが他のノードでいつ終了したかに関わらず、テーブルに定義されたマスターノードの1つからテーブルがロードされます。 &lt;code&gt;MasterNodes&lt;/code&gt; は、テーブルにレプリカがあるノードのみを含めることができます。 &lt;code&gt;MasterNodes&lt;/code&gt; リストが空の場合、特定のテーブルのマスターノード回復メカニズムがリセットされ、次の再起動時に通常のロードメカニズムが使用されます。</target>
        </trans-unit>
        <trans-unit id="130ab90516f90ac945b3ebb327eb04a5eb66e021" translate="yes" xml:space="preserve">
          <source>If the application detects that there has been a communication failure that can have caused an inconsistent database, it can use the function &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-2&quot;&gt;mnesia:set_master_nodes(Tab, Nodes)&lt;/a&gt;&lt;/code&gt; to pinpoint from which nodes each table can be loaded.</source>
          <target state="translated">データベースの不整合を引き起こした可能性のある通信障害が発生したことをアプリケーションが検出した場合、アプリケーションは関数 &lt;code&gt;&lt;a href=&quot;mnesia#set_master_nodes-2&quot;&gt;mnesia:set_master_nodes(Tab, Nodes)&lt;/a&gt;&lt;/code&gt; を使用して、各テーブルをロードできるノードを特定できます。</target>
        </trans-unit>
        <trans-unit id="afc60992fdf5138ada7ac0487b61ff57acf63af0" translate="yes" xml:space="preserve">
          <source>If the application is distributed, setting the permission to &lt;code&gt;false&lt;/code&gt; means that the application will be started at, or moved to, another node according to how its distribution is configured (see &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">アプリケーションが配布される場合、許可を &lt;code&gt;false&lt;/code&gt; に設定すると、アプリケーションは、その配布の構成方法（ &lt;code&gt;&lt;a href=&quot;#load-2&quot;&gt;load/2&lt;/a&gt;&lt;/code&gt; を参照）に従って別のノードで開始または移動されます。</target>
        </trans-unit>
        <trans-unit id="ff80acb30d9dab81e0a46a50c51388e4dd17f7a3" translate="yes" xml:space="preserve">
          <source>If the application is not already loaded, the application controller first loads it using &lt;code&gt;application:load/1&lt;/code&gt;. It checks the value of the &lt;code&gt;applications&lt;/code&gt; key, to ensure that all applications that are to be started before this application are running.</source>
          <target state="translated">アプリケーションがまだロードされていない場合、アプリケーションコントローラーは最初に &lt;code&gt;application:load/1&lt;/code&gt; を使用してアプリケーションをロードします。 &lt;code&gt;applications&lt;/code&gt; キーの値をチェックして、このアプリケーションが実行される前に起動されるすべてのアプリケーションを確認します。</target>
        </trans-unit>
        <trans-unit id="04b974d958e0b100d3e2e5b38644fd0a6abff6f9" translate="yes" xml:space="preserve">
          <source>If the application needs to include a generated &lt;code&gt;.hrl&lt;/code&gt; file, it is to use the &lt;code&gt;-include_lib&lt;/code&gt; directive to the Erlang compiler:</source>
          <target state="translated">アプリケーションが生成された &lt;code&gt;.hrl&lt;/code&gt; ファイルを含める必要がある場合は、Erlangコンパイラーに &lt;code&gt;-include_lib&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="60e7f4b69d5dbe87fef4344be83c638457c7eec7" translate="yes" xml:space="preserve">
          <source>If the application needs to include the generated &lt;code&gt;.hrl&lt;/code&gt; file, it is to use the &lt;code&gt;-include_lib&lt;/code&gt; directive to the Erlang compiler:</source>
          <target state="translated">アプリケーションが生成された &lt;code&gt;.hrl&lt;/code&gt; ファイルを含める必要がある場合は、Erlangコンパイラに &lt;code&gt;-include_lib&lt;/code&gt; ディレクティブを使用します。</target>
        </trans-unit>
        <trans-unit id="683ef606c81dc1c47b5d3b9c095a4243030bc6f8" translate="yes" xml:space="preserve">
          <source>If the argument is &lt;code&gt;Func&lt;/code&gt;, the timetrap is triggered when this function returns. &lt;code&gt;Func&lt;/code&gt; can also return a new &lt;code&gt;Time&lt;/code&gt; value, which in that case is the value for the new timetrap.</source>
          <target state="translated">引数が &lt;code&gt;Func&lt;/code&gt; の場合、この関数が戻るとタイムトラップがトリガーされます。 &lt;code&gt;Func&lt;/code&gt; は、新しいTimetrapの値である新しい &lt;code&gt;Time&lt;/code&gt; 値を返すこともできます。</target>
        </trans-unit>
        <trans-unit id="0044e9d649274cc90388ee08844dd19dea89fffe" translate="yes" xml:space="preserve">
          <source>If the argument is &lt;code&gt;false&lt;/code&gt;, the call trace message mode for the current process is set to normal (non-silent) for this call and all later calls.</source>
          <target state="translated">引数が &lt;code&gt;false&lt;/code&gt; の場合、現在のプロセスの呼び出しトレースメッセージモードは、この呼び出しとそれ以降のすべての呼び出しで通常（非サイレント）に設定されます。</target>
        </trans-unit>
        <trans-unit id="580f4ef0ac5467ad7d400143bdf178fbf747f519" translate="yes" xml:space="preserve">
          <source>If the argument is invalid</source>
          <target state="translated">引数が無効な場合</target>
        </trans-unit>
        <trans-unit id="c3def1ea3a84c13010f731140dbb829f22745007" translate="yes" xml:space="preserve">
          <source>If the argument is not &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;, the call trace message mode is unaffected.</source>
          <target state="translated">引数が &lt;code&gt;true&lt;/code&gt; または &lt;code&gt;false&lt;/code&gt; でない場合、呼び出しトレースメッセージモードは影響を受けません。</target>
        </trans-unit>
        <trans-unit id="259c1b3a1fe7d6190505c0293c344282223212ec" translate="yes" xml:space="preserve">
          <source>If the arguments or options are malformed, the function throws a &lt;code&gt;badarg&lt;/code&gt; exception.</source>
          <target state="translated">引数またはオプションの形式が正しくない場合、関数は &lt;code&gt;badarg&lt;/code&gt; 例外をスローします。</target>
        </trans-unit>
        <trans-unit id="6b60aa2a26e0a24944e43c25dc549ab30b52857b" translate="yes" xml:space="preserve">
          <source>If the array does not have fixed size, and &lt;code&gt;I&lt;/code&gt; is greater than &lt;code&gt;size(Array)-1&lt;/code&gt;, the array grows to size &lt;code&gt;I+1&lt;/code&gt;.</source>
          <target state="translated">配列のサイズが固定されておらず、 &lt;code&gt;I&lt;/code&gt; が &lt;code&gt;size(Array)-1&lt;/code&gt; より大きい場合、配列のサイズは &lt;code&gt;I+1&lt;/code&gt; になります。</target>
        </trans-unit>
        <trans-unit id="e97eb155a25d26096ef78fc2b67cf5447071cfc9" translate="yes" xml:space="preserve">
          <source>If the array does not have fixed size, the default value for any index &lt;code&gt;I&lt;/code&gt; greater than &lt;code&gt;size(Array)-1&lt;/code&gt; is returned.</source>
          <target state="translated">配列のサイズが固定されていない場合は、 &lt;code&gt;size(Array)-1&lt;/code&gt; より大きいインデックス &lt;code&gt;I&lt;/code&gt; のデフォルト値が返されます。</target>
        </trans-unit>
        <trans-unit id="5552e65bff8e7b19a94e0b983a0ae9846e97b32b" translate="yes" xml:space="preserve">
          <source>If the atom already exists, this function stores the term in &lt;code&gt;*atom&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. Also returns &lt;code&gt;false&lt;/code&gt; if &lt;code&gt;len&lt;/code&gt; exceeds the maximum length allowed for an atom (255 characters).</source>
          <target state="translated">アトムは既に、この機能を格納用語が存在する場合 &lt;code&gt;*atom&lt;/code&gt; と戻り &lt;code&gt;true&lt;/code&gt; 、そうでない場合 &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;len&lt;/code&gt; がアトムに許可されている最大長（255文字）を超える場合も &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="0d657f088165dffa1fac0e9bbe37e81e0983227b" translate="yes" xml:space="preserve">
          <source>If the atom already exists, this function stores the term in &lt;code&gt;*atom&lt;/code&gt; and returns &lt;code&gt;true&lt;/code&gt;, otherwise &lt;code&gt;false&lt;/code&gt;. Also returns &lt;code&gt;false&lt;/code&gt; if the length of &lt;code&gt;name&lt;/code&gt; exceeds the maximum length allowed for an atom (255 characters).</source>
          <target state="translated">アトムは既に、この機能を格納用語が存在する場合 &lt;code&gt;*atom&lt;/code&gt; と戻り &lt;code&gt;true&lt;/code&gt; 、そうでない場合 &lt;code&gt;false&lt;/code&gt; 。 &lt;code&gt;name&lt;/code&gt; の長さがアトムに許可されている最大長（255文字）を超える場合も &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="9a4fe1851aab21eaf10695f8609bb67b63980301" translate="yes" xml:space="preserve">
          <source>If the atomic compare and swap described above failed, the last pointer didn't point to the last element. In this case we need to insert the new element somewhere between the element that the last pointer pointed to and the actual last element. If we do it this way the last pointer will eventually end up at the last element when threads stop adding new elements. When trying to insert somewhere near the end and failing to do so, the inserting thread sometimes moves to the next element and sometimes tries with the same element again. This in order to spread the inserted elements during heavy contention. That is, we try to spread the modifications of memory to different locations instead of letting all threads continue to try to modify the same location in memory.</source>
          <target state="translated">上で説明したアトミック比較とスワップが失敗した場合、最後のポインタが最後の要素を指していませんでした。この場合、最後のポインタが指し示した要素と実際の最後の要素の間のどこかに新しい要素を挿入する必要があります。このようにすると、スレッドが新しい要素の追加を止めたときに、最後のポインタが最終的に最後の要素を指すようになってしまいます。最後の近くのどこかに挿入しようとして失敗した場合、挿入するスレッドは次の要素に移動して、同じ要素で再試行することがあります。これは、激しい競合時に挿入した要素を分散させるためです。つまり、すべてのスレッドにメモリ内の同じ場所を修正しようとし続けるのではなく、メモリの修正を異なる場所に分散させようとしているのです。</target>
        </trans-unit>
        <trans-unit id="cbc8e0e10b7bf47bd128f48e3648baa81fc6271d" translate="yes" xml:space="preserve">
          <source>If the attempt to truncate the log fails, the disk log process terminates with the EXIT message &lt;code&gt;{{failed,Reason},[{disk_log,Fun,Arity}]}&lt;/code&gt;. Other processes having requests queued receive the message &lt;code&gt;{disk_log, Node, {error, disk_log_stopped}}&lt;/code&gt;.</source>
          <target state="translated">ログを切り捨てる試みが失敗した場合、ディスクログプロセスはEXITメッセージ &lt;code&gt;{{failed,Reason},[{disk_log,Fun,Arity}]}&lt;/code&gt; ます。リクエストがキューに入れられている他のプロセスは、メッセージ &lt;code&gt;{disk_log, Node, {error, disk_log_stopped}}&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="88a48f973bcaa36e009e8c2234922f730ca71334" translate="yes" xml:space="preserve">
          <source>If the binder is not seen, the binder is validated. If the binder is valid, the server proceeds with the 0-RTT handshake.</source>
          <target state="translated">バインダーが見えない場合は、バインダーを検証します。バインダーが有効であれば、サーバは 0-RTT ハンドシェイクを行います。</target>
        </trans-unit>
        <trans-unit id="d7ec818fc01c7aa387cc6cab61ea5c97ff0c8f49" translate="yes" xml:space="preserve">
          <source>If the boot script contains a path variable &lt;code&gt;Var&lt;/code&gt; other than &lt;code&gt;$ROOT&lt;/code&gt;, this variable is expanded to &lt;code&gt;Dir&lt;/code&gt;. Used when applications are installed in another directory than &lt;code&gt;$ROOT/lib&lt;/code&gt;; see &lt;code&gt; systools:make_script/1,2&lt;/code&gt; in SASL.</source>
          <target state="translated">ブートスクリプトに &lt;code&gt;$ROOT&lt;/code&gt; 以外のパス変数 &lt;code&gt;Var&lt;/code&gt; が含まれている場合、この変数は &lt;code&gt;Dir&lt;/code&gt; に展開されます。アプリケーションが &lt;code&gt;$ROOT/lib&lt;/code&gt; 以外のディレクトリにインストールされている場合に使用されます。SASLの &lt;code&gt; systools:make_script/1,2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="e7576e0423d861bfb48c83bfa3b5b0c281c96ce4" translate="yes" xml:space="preserve">
          <source>If the boot script contains a path variable &lt;code&gt;Var&lt;/code&gt; other than &lt;code&gt;$ROOT&lt;/code&gt;, this variable is expanded to &lt;code&gt;Dir&lt;/code&gt;. Used when applications are installed in another directory than &lt;code&gt;$ROOT/lib&lt;/code&gt;; see &lt;code&gt;systools:make_script/1,2&lt;/code&gt; in SASL.</source>
          <target state="translated">ブートスクリプトに &lt;code&gt;$ROOT&lt;/code&gt; 以外のパス変数 &lt;code&gt;Var&lt;/code&gt; が含まれている場合、この変数は &lt;code&gt;Dir&lt;/code&gt; に展開されます。アプリケーションが &lt;code&gt;$ROOT/lib&lt;/code&gt; 以外のディレクトリにインストールされている場合に使用されます。SASLの &lt;code&gt;systools:make_script/1,2&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dc4746e92bb60b88599fe7a3e474a68b05603534" translate="yes" xml:space="preserve">
          <source>If the call times out, a &lt;code&gt;timeout&lt;/code&gt; exception is raised.</source>
          <target state="translated">呼び出しが &lt;code&gt;timeout&lt;/code&gt; と、タイムアウト例外が発生します。</target>
        </trans-unit>
        <trans-unit id="55cc2b4bba08ca73afe9b3ccf29541b97304c864" translate="yes" xml:space="preserve">
          <source>If the call to &lt;code&gt;erlang:load_nif/2&lt;/code&gt; fails, the module is unloaded and a warning report is sent to the error loader.</source>
          <target state="translated">&lt;code&gt;erlang:load_nif/2&lt;/code&gt; の呼び出しが失敗した場合、モジュールはアンロードされ、警告レポートがエラーローダーに送信されます。</target>
        </trans-unit>
        <trans-unit id="4b48d532db57aebd987ac6820de7ad7436dd64ed" translate="yes" xml:space="preserve">
          <source>If the callback module cannot be loaded, an error tuple is returned. The &lt;code&gt;Reason&lt;/code&gt; in the error tuple is the one returned by the code loader when trying to load the code of the callback module.</source>
          <target state="translated">コールバックモジュールをロードできない場合、エラータプルが返されます。エラータプルの &lt;code&gt;Reason&lt;/code&gt; は、コールバックモジュールのコードをロードしようとしたときにコードローダーによって返された理由です。</target>
        </trans-unit>
        <trans-unit id="8bf050fe2cb79b5d36a88eaed63edd7eed898889" translate="yes" xml:space="preserve">
          <source>If the callback module does not export a &lt;code&gt;system_get_state/1&lt;/code&gt; function, &lt;code&gt;get_state/1,2&lt;/code&gt; assumes that the &lt;code&gt;Misc&lt;/code&gt; value is the state of the callback module and returns it directly instead.</source>
          <target state="translated">コールバックモジュールが &lt;code&gt;system_get_state/1&lt;/code&gt; 関数をエクスポートしない場合、 &lt;code&gt;get_state/1,2&lt;/code&gt; は &lt;code&gt;Misc&lt;/code&gt; 値がコールバックモジュールの状態であると想定し、代わりに直接返します。</target>
        </trans-unit>
        <trans-unit id="883a1351f7fb38c93f27abac246b139ddf314ded" translate="yes" xml:space="preserve">
          <source>If the callback module does not export a &lt;code&gt;system_replace_state/2&lt;/code&gt; function, &lt;code&gt;&lt;a href=&quot;#replace_state-2&quot;&gt;replace_state/2,3&lt;/a&gt;&lt;/code&gt; assumes that &lt;code&gt;Misc&lt;/code&gt; is the state of the callback module, passes it to &lt;code&gt;StateFun&lt;/code&gt; and uses the return value as both the new state and as the new value of &lt;code&gt;Misc&lt;/code&gt;.</source>
          <target state="translated">コールバックモジュールが &lt;code&gt;system_replace_state/2&lt;/code&gt; 関数をエクスポートしない場合、 &lt;code&gt;&lt;a href=&quot;#replace_state-2&quot;&gt;replace_state/2,3&lt;/a&gt;&lt;/code&gt; は &lt;code&gt;Misc&lt;/code&gt; がコールバックモジュールの状態であると想定し、それを &lt;code&gt;StateFun&lt;/code&gt; に渡し、戻り値を新しい状態と &lt;code&gt;Misc&lt;/code&gt; の新しい値の両方として使用します。。</target>
        </trans-unit>
        <trans-unit id="79079b06e33e739dcb437556ed9482e9eedc90a9" translate="yes" xml:space="preserve">
          <source>If the callback module exports a &lt;code&gt;&lt;a href=&quot;#Module:system_replace_state-2&quot;&gt; system_replace_state/2&lt;/a&gt;&lt;/code&gt; function, it is called in the target process to replace its state using &lt;code&gt;StateFun&lt;/code&gt;. Its two arguments are &lt;code&gt;StateFun&lt;/code&gt; and &lt;code&gt;Misc&lt;/code&gt;, where &lt;code&gt;Misc&lt;/code&gt; is the same as the &lt;code&gt;Misc&lt;/code&gt; value returned by &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt;. A &lt;code&gt;system_replace_state/2&lt;/code&gt; function is expected to return &lt;code&gt;{ok, NewState, NewMisc}&lt;/code&gt;, where &lt;code&gt;NewState&lt;/code&gt; is the new state of the callback module, obtained by calling &lt;code&gt;StateFun&lt;/code&gt;, and &lt;code&gt;NewMisc&lt;/code&gt; is a possibly new value used to replace the original &lt;code&gt;Misc&lt;/code&gt; (required as &lt;code&gt;Misc&lt;/code&gt; often contains the state of the callback module within it).</source>
          <target state="translated">コールバックモジュールがエクスポートした場合 &lt;code&gt;&lt;a href=&quot;#Module:system_replace_state-2&quot;&gt; system_replace_state/2&lt;/a&gt;&lt;/code&gt; 機能を、それを使用して、その状態を置き換えるために、ターゲット・プロセスで呼び出され &lt;code&gt;StateFun&lt;/code&gt; を。その2つの引数は &lt;code&gt;StateFun&lt;/code&gt; と &lt;code&gt;Misc&lt;/code&gt; です。ここで、 &lt;code&gt;Misc&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt; によって返される &lt;code&gt;Misc&lt;/code&gt; 値と同じです。 &lt;code&gt;system_replace_state/2&lt;/code&gt; 関数を返すことが期待されている &lt;code&gt;{ok, NewState, NewMisc}&lt;/code&gt; 、 &lt;code&gt;NewState&lt;/code&gt; には呼び出すことによって取得コールバックモジュールの新しい状態である &lt;code&gt;StateFun&lt;/code&gt; を、そして &lt;code&gt;NewMisc&lt;/code&gt; は元交換するために使用される可能性の新しい値である &lt;code&gt;Misc&lt;/code&gt; （として必要 &lt;code&gt;Misc&lt;/code&gt; は、コールバックモジュールの状態が含まれていることがよくあります）。</target>
        </trans-unit>
        <trans-unit id="6b0469d22f2398ad4902a9f0274d691cde96d200" translate="yes" xml:space="preserve">
          <source>If the callback module exports a &lt;code&gt;&lt;a href=&quot;#Module:system_replace_state-2&quot;&gt;system_replace_state/2&lt;/a&gt;&lt;/code&gt; function, it is called in the target process to replace its state using &lt;code&gt;StateFun&lt;/code&gt;. Its two arguments are &lt;code&gt;StateFun&lt;/code&gt; and &lt;code&gt;Misc&lt;/code&gt;, where &lt;code&gt;Misc&lt;/code&gt; is the same as the &lt;code&gt;Misc&lt;/code&gt; value returned by &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt;. A &lt;code&gt;system_replace_state/2&lt;/code&gt; function is expected to return &lt;code&gt;{ok, NewState, NewMisc}&lt;/code&gt;, where &lt;code&gt;NewState&lt;/code&gt; is the new state of the callback module, obtained by calling &lt;code&gt;StateFun&lt;/code&gt;, and &lt;code&gt;NewMisc&lt;/code&gt; is a possibly new value used to replace the original &lt;code&gt;Misc&lt;/code&gt; (required as &lt;code&gt;Misc&lt;/code&gt; often contains the state of the callback module within it).</source>
          <target state="translated">コールバックモジュールがエクスポートした場合 &lt;code&gt;&lt;a href=&quot;#Module:system_replace_state-2&quot;&gt;system_replace_state/2&lt;/a&gt;&lt;/code&gt; 機能を、それを使用して、その状態を置き換えるために、ターゲット・プロセスで呼び出され &lt;code&gt;StateFun&lt;/code&gt; を。その2つの引数は &lt;code&gt;StateFun&lt;/code&gt; 及び &lt;code&gt;Misc&lt;/code&gt; 、 &lt;code&gt;Misc&lt;/code&gt; 同じである &lt;code&gt;Misc&lt;/code&gt; によって返される値 &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt; 。 &lt;code&gt;system_replace_state/2&lt;/code&gt; 関数を返すことが期待されている &lt;code&gt;{ok, NewState, NewMisc}&lt;/code&gt; 、 &lt;code&gt;NewState&lt;/code&gt; には呼び出すことによって取得コールバックモジュールの新しい状態である &lt;code&gt;StateFun&lt;/code&gt; を、そして &lt;code&gt;NewMisc&lt;/code&gt; は元交換するために使用される可能性の新しい値である &lt;code&gt;Misc&lt;/code&gt; （として必要 &lt;code&gt;Misc&lt;/code&gt; は、コールバックモジュールの状態が含まれていることがよくあります）。</target>
        </trans-unit>
        <trans-unit id="cdcc08df51274710d006dbff0355880927f9ffef" translate="yes" xml:space="preserve">
          <source>If the callback module exports a function &lt;code&gt;system_get_state/1&lt;/code&gt;, it is called in the target process to get its state. Its argument is the same as the &lt;code&gt;Misc&lt;/code&gt; value returned by &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt;, and function &lt;code&gt;&lt;a href=&quot;#Module:system_get_state-1&quot;&gt; Module:system_get_state/1&lt;/a&gt;&lt;/code&gt; is expected to extract the state of the callback module from it. Function &lt;code&gt;system_get_state/1&lt;/code&gt; must return &lt;code&gt;{ok, State}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the state of the callback module.</source>
          <target state="translated">コールバックモジュールが関数 &lt;code&gt;system_get_state/1&lt;/code&gt; をエクスポートする場合、その状態を取得するためにターゲットプロセスで呼び出されます。その引数は &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt; によって返される &lt;code&gt;Misc&lt;/code&gt; 値と同じであり、関数 &lt;code&gt;&lt;a href=&quot;#Module:system_get_state-1&quot;&gt; Module:system_get_state/1&lt;/a&gt;&lt;/code&gt; はそこからコールバックモジュールの状態を抽出することが期待されています。関数 &lt;code&gt;system_get_state/1&lt;/code&gt; は &lt;code&gt;{ok, State}&lt;/code&gt; 返す必要があります。ここで、 &lt;code&gt;State&lt;/code&gt; はコールバックモジュールの状態です。</target>
        </trans-unit>
        <trans-unit id="22c3eecf9345190c4251d4199b67e06fe9f176a1" translate="yes" xml:space="preserve">
          <source>If the callback module exports a function &lt;code&gt;system_get_state/1&lt;/code&gt;, it is called in the target process to get its state. Its argument is the same as the &lt;code&gt;Misc&lt;/code&gt; value returned by &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt;, and function &lt;code&gt;&lt;a href=&quot;#Module:system_get_state-1&quot;&gt;Module:system_get_state/1&lt;/a&gt;&lt;/code&gt; is expected to extract the state of the callback module from it. Function &lt;code&gt;system_get_state/1&lt;/code&gt; must return &lt;code&gt;{ok, State}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the state of the callback module.</source>
          <target state="translated">コールバックモジュールが関数 &lt;code&gt;system_get_state/1&lt;/code&gt; をエクスポートする場合、その状態を取得するためにターゲットプロセスで呼び出されます。その引数は &lt;code&gt;&lt;a href=&quot;#get_status-1&quot;&gt;get_status/1,2&lt;/a&gt;&lt;/code&gt; によって返される &lt;code&gt;Misc&lt;/code&gt; 値と同じで、関数 &lt;code&gt;&lt;a href=&quot;#Module:system_get_state-1&quot;&gt;Module:system_get_state/1&lt;/a&gt;&lt;/code&gt; はそこからコールバックモジュールの状態を抽出することが期待されています。関数 &lt;code&gt;system_get_state/1&lt;/code&gt; は &lt;code&gt;{ok, State}&lt;/code&gt; 返す必要があります。ここで、 &lt;code&gt;State&lt;/code&gt; はコールバックモジュールの状態です。</target>
        </trans-unit>
        <trans-unit id="01c2d9fbdbf4902fbd9ed598640b451a617bf5cc" translate="yes" xml:space="preserve">
          <source>If the callback module's &lt;code&gt;system_get_state/1&lt;/code&gt; function crashes or throws an exception, the caller exits with error &lt;code&gt;{callback_failed, {Module, system_get_state}, {Class, Reason}}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the name of the callback module and &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Reason&lt;/code&gt; indicate details of the exception.</source>
          <target state="translated">コールバックモジュールの &lt;code&gt;system_get_state/1&lt;/code&gt; 関数がクラッシュまたは例外をスローした場合、呼び出し元はエラー &lt;code&gt;{callback_failed, {Module, system_get_state}, {Class, Reason}}&lt;/code&gt; で終了します。ここで、 &lt;code&gt;Module&lt;/code&gt; はコールバックモジュールの名前、 &lt;code&gt;Class&lt;/code&gt; と &lt;code&gt;Reason&lt;/code&gt; は詳細を示します例外の。</target>
        </trans-unit>
        <trans-unit id="7986fc8d38f019b96fd636349aa5cfd63d9efc6a" translate="yes" xml:space="preserve">
          <source>If the callback module's function &lt;code&gt;system_replace_state/2&lt;/code&gt; crashes or throws an exception, the caller exits with error &lt;code&gt;{callback_failed, {Module, system_replace_state}, {Class, Reason}}&lt;/code&gt;, where &lt;code&gt;Module&lt;/code&gt; is the name of the callback module and &lt;code&gt;Class&lt;/code&gt; and &lt;code&gt;Reason&lt;/code&gt; indicate details of the exception. If the callback module does not provide a &lt;code&gt;system_replace_state/2&lt;/code&gt; function and &lt;code&gt;StateFun&lt;/code&gt; crashes or throws an exception, the caller exits with error &lt;code&gt;{callback_failed, StateFun, {Class, Reason}}&lt;/code&gt;.</source>
          <target state="translated">コールバックモジュールの関数 &lt;code&gt;system_replace_state/2&lt;/code&gt; がクラッシュまたは例外をスローした場合、呼び出し元はエラー &lt;code&gt;{callback_failed, {Module, system_replace_state}, {Class, Reason}}&lt;/code&gt; で終了します。ここで、 &lt;code&gt;Module&lt;/code&gt; はコールバックモジュールの名前、 &lt;code&gt;Class&lt;/code&gt; と &lt;code&gt;Reason&lt;/code&gt; は詳細を示します例外の。コールバックモジュールが &lt;code&gt;system_replace_state/2&lt;/code&gt; 関数を提供せず、 &lt;code&gt;StateFun&lt;/code&gt; がクラッシュまたは例外をスローした場合、呼び出し元はエラー &lt;code&gt;{callback_failed, StateFun, {Class, Reason}}&lt;/code&gt; 終了します。</target>
        </trans-unit>
        <trans-unit id="f20f590333f587ce4f158c6bd3d9e3042df378fe" translate="yes" xml:space="preserve">
          <source>If the caller of the function wants to know whether or not acknowledgments are received for a certain notification (provided it is sent as an inform), the &lt;code&gt;Receiver&lt;/code&gt; parameter can be specified as &lt;code&gt;{Tag, ProcessName}&lt;/code&gt; (refer to the Reference Manual, section snmp, module &lt;code&gt;snmp&lt;/code&gt; for more details). In this case, the agent send a message &lt;code&gt;{snmp_notification, Tag, {got_response, ManagerAddr}}&lt;/code&gt; or &lt;code&gt;{snmp_notification, Tag, {no_response, ManagerAddr}}&lt;/code&gt; for each management target.</source>
          <target state="translated">関数の呼び出し元が特定の通知の確認応答を受信したかどうかを知りたい場合（通知として送信された場合）、 &lt;code&gt;Receiver&lt;/code&gt; パラメーターを &lt;code&gt;{Tag, ProcessName}&lt;/code&gt; として指定できます（リファレンスマニュアルのセクションsnmpを参照） 、詳細についてはモジュール &lt;code&gt;snmp&lt;/code&gt; ）。この場合、エージェントは各管理ターゲットに対してメッセージ &lt;code&gt;{snmp_notification, Tag, {got_response, ManagerAddr}}&lt;/code&gt; または &lt;code&gt;{snmp_notification, Tag, {no_response, ManagerAddr}}&lt;/code&gt; を送信します。</target>
        </trans-unit>
        <trans-unit id="b596624aa0902d380836d0a8912ab2326ff5b443" translate="yes" xml:space="preserve">
          <source>If the calling process holds on to the value of the persistent term and the persistent term is deleted in the future, the term will be copied to the process.</source>
          <target state="translated">呼び出し側のプロセスが永続項の値を保持しており、将来、永続項が削除された場合、その永続項はプロセスにコピーされます。</target>
        </trans-unit>
        <trans-unit id="74d99e3904aef3995d136af596a2f043101aa1f9" translate="yes" xml:space="preserve">
          <source>If the calling process is not trapping exits, and checking &lt;code&gt;PidOrPort&lt;/code&gt; is cheap (that is, if &lt;code&gt;PidOrPort&lt;/code&gt; is local), &lt;code&gt;link/1&lt;/code&gt; fails with reason &lt;code&gt;noproc&lt;/code&gt;.</source>
          <target state="translated">呼び出しプロセスが出口をトラップしておらず、 &lt;code&gt;PidOrPort&lt;/code&gt; のチェックが安価である場合（つまり、 &lt;code&gt;PidOrPort&lt;/code&gt; がローカルの場合）、 &lt;code&gt;link/1&lt;/code&gt; は理由 &lt;code&gt;noproc&lt;/code&gt; で失敗します。</target>
        </trans-unit>
        <trans-unit id="51149d8666bb19147118b83bb274dae83a5f60ca" translate="yes" xml:space="preserve">
          <source>If the calling process later terminates with &lt;code&gt;Reason&lt;/code&gt;, the event manager deletes the event handler by calling &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt; Module:terminate/2&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;{stop,Reason}&lt;/code&gt; as argument.</source>
          <target state="translated">呼び出しプロセスが後で &lt;code&gt;Reason&lt;/code&gt; で終了する場合、イベントマネージャーは &lt;code&gt;{stop,Reason}&lt;/code&gt; を引数として &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt; Module:terminate/2&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、イベントハンドラーを削除します。</target>
        </trans-unit>
        <trans-unit id="49a8b4f21577fe3cc5ca8d0fd53bd3ee9424f7f7" translate="yes" xml:space="preserve">
          <source>If the calling process later terminates with &lt;code&gt;Reason&lt;/code&gt;, the event manager deletes the event handler by calling &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate/2&lt;/a&gt;&lt;/code&gt; with &lt;code&gt;{stop,Reason}&lt;/code&gt; as argument.</source>
          <target state="translated">呼び出しプロセスが後で &lt;code&gt;Reason&lt;/code&gt; で終了した場合、イベントマネージャーは、引数として &lt;code&gt;{stop,Reason}&lt;/code&gt; を指定して &lt;code&gt;&lt;a href=&quot;#Module:terminate-2&quot;&gt;Module:terminate/2&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、イベントハンドラーを削除します。</target>
        </trans-unit>
        <trans-unit id="f41eb527b8f8f2ec9a45659469012def9325921e" translate="yes" xml:space="preserve">
          <source>If the capture options describe that no substring capturing is to be done (&lt;code&gt;{capture, none}&lt;/code&gt;), the function returns the single atom &lt;code&gt;match&lt;/code&gt; upon successful matching, otherwise the tuple &lt;code&gt;{match, ValueList}&lt;/code&gt;. Disabling capturing can be done either by specifying &lt;code&gt;none&lt;/code&gt; or an empty list as &lt;code&gt;ValueSpec&lt;/code&gt;.</source>
          <target state="translated">キャプチャーオプションで部分文字列のキャプチャーを行わないことを記述している場合（ &lt;code&gt;{capture, none}&lt;/code&gt; ）、関数は &lt;code&gt;match&lt;/code&gt; が成功すると単一の原子の一致を返し、そうでない場合はタプル &lt;code&gt;{match, ValueList}&lt;/code&gt; 返します。キャプチャを無効にするには、 &lt;code&gt;ValueSpec&lt;/code&gt; に &lt;code&gt;none&lt;/code&gt; または空のリストを指定します。</target>
        </trans-unit>
        <trans-unit id="8dfe9740232e522c9dccf1bcdb49e9bacfa76b87" translate="yes" xml:space="preserve">
          <source>If the carrier could not be scanned in full without harming the responsiveness of the system, &lt;code&gt;UnscannedSize&lt;/code&gt; is the number of bytes that had to be skipped.</source>
          <target state="translated">システムの応答性を損なうことなくキャリアを完全にスキャンできなかった場合、 &lt;code&gt;UnscannedSize&lt;/code&gt; はスキップする必要があったバイト数です。</target>
        </trans-unit>
        <trans-unit id="b3d882b62bc462be24a22c4ebd1a0b80e4bbf23e" translate="yes" xml:space="preserve">
          <source>If the character escaping feature needs to be disabled (typically for backwards compatibility reasons), use the &lt;code&gt;ct_run&lt;/code&gt; start flag &lt;code&gt;-no_esc_chars&lt;/code&gt;, or the &lt;code&gt;ct:run_test/1&lt;/code&gt; start option &lt;code&gt;{esc_chars,Bool}&lt;/code&gt; (this start option is also supported in test specifications).</source>
          <target state="translated">文字エスケープ機能を無効にする必要がある場合（通常は下位互換性の理由から）、 &lt;code&gt;ct_run&lt;/code&gt; 開始フラグ &lt;code&gt;-no_esc_chars&lt;/code&gt; または &lt;code&gt;ct:run_test/1&lt;/code&gt; 開始オプション &lt;code&gt;{esc_chars,Bool}&lt;/code&gt; （この開始オプションはテスト仕様でもサポートされています）。 。</target>
        </trans-unit>
        <trans-unit id="93733502359d2306f277753fcf5f39262e0db10b" translate="yes" xml:space="preserve">
          <source>If the child is temporary, the child specification is deleted as soon as the process terminates. This means that &lt;code&gt;delete_child/2&lt;/code&gt; has no meaning and &lt;code&gt;restart_child/2&lt;/code&gt; cannot be used for these children.</source>
          <target state="translated">子が一時的なものである場合、子仕様はプロセスが終了するとすぐに削除されます。この手段 &lt;code&gt;delete_child/2&lt;/code&gt; は何の意味と持っていない &lt;code&gt;restart_child/2&lt;/code&gt; は、これらの子供たちのために使用することはできません。</target>
        </trans-unit>
        <trans-unit id="43bb63cf5661d4a237a06093eced5cd149d67b35" translate="yes" xml:space="preserve">
          <source>If the child process is another supervisor, it is to be set to &lt;code&gt;infinity&lt;/code&gt; to give the subtree enough time to shut down. It is also allowed to set it to &lt;code&gt;infinity&lt;/code&gt;, if the child process is a worker. See the warning below:</source>
          <target state="translated">子プロセスが別の監視プログラムである場合、サブツリーにシャットダウンするのに十分な時間を与えるために、それは &lt;code&gt;infinity&lt;/code&gt; に設定されます。子プロセスがワーカーの場合は、 &lt;code&gt;infinity&lt;/code&gt; に設定することもできます。以下の警告をご覧ください。</target>
        </trans-unit>
        <trans-unit id="d5e42700559025ed548daef3157e2a83d1175a5d" translate="yes" xml:space="preserve">
          <source>If the child process is another supervisor, it must be set to &lt;code&gt;infinity&lt;/code&gt; to give the subtree enough time to shut down. It is also allowed to set it to &lt;code&gt;infinity&lt;/code&gt;, if the child process is a worker. See the warning below:</source>
          <target state="translated">子プロセスが別のスーパーバイザーである場合、サブツリーをシャットダウンするのに十分な時間を与えるために、子プロセスを &lt;code&gt;infinity&lt;/code&gt; に設定する必要があります。子プロセスがワーカーの場合は、 &lt;code&gt;infinity&lt;/code&gt; に設定することもできます。以下の警告を参照してください。</target>
        </trans-unit>
        <trans-unit id="04ca616fb018a5f7ed9b1457ccf717eb545a0d6c" translate="yes" xml:space="preserve">
          <source>If the child process is another supervisor, the shutdown time is to be set to &lt;code&gt;infinity&lt;/code&gt; to give the subtree ample time to shut down. It is also allowed to set it to &lt;code&gt;infinity&lt;/code&gt;, if the child process is a worker.</source>
          <target state="translated">子プロセスが別のスーパーバイザの場合、サブツリーにシャットダウンする十分な時間を与えるために、シャットダウン時間は &lt;code&gt;infinity&lt;/code&gt; に設定されます。子プロセスがワーカーの場合は、 &lt;code&gt;infinity&lt;/code&gt; に設定することもできます。</target>
        </trans-unit>
        <trans-unit id="65acda7f63f750f753fdf6f71ac3163eb7c73a09" translate="yes" xml:space="preserve">
          <source>If the child process is another supervisor, the shutdown time must be set to &lt;code&gt;infinity&lt;/code&gt; to give the subtree ample time to shut down.</source>
          <target state="translated">子プロセスが別のスーパーバイザーである場合、サブツリーに十分なシャットダウン時間を与えるために、シャットダウン時間を &lt;code&gt;infinity&lt;/code&gt; に設定する必要があります。</target>
        </trans-unit>
        <trans-unit id="f6c8d2313d1867bff7ceabb992796a9dc2cb660e" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;ignore&lt;/code&gt;, the child specification is added to the supervisor (unless the supervisor is a &lt;code&gt;simple_one_for_one&lt;/code&gt; supervisor, see below), the pid is set to &lt;code&gt;undefined&lt;/code&gt;, and the function returns &lt;code&gt;{ok,undefined}&lt;/code&gt;.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;ignore&lt;/code&gt; を返す場合、子の仕様がスーパーバイザーに追加され（スーパーバイザーが &lt;code&gt;simple_one_for_one&lt;/code&gt; スーパーバイザーでない限り、以下を参照）、pidが &lt;code&gt;undefined&lt;/code&gt; に設定され、関数は &lt;code&gt;{ok,undefined}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="5ef5502f7b080e1244d616694cf24b3ea2478505" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;ignore&lt;/code&gt;, the pid remains set to &lt;code&gt;undefined&lt;/code&gt; and the function returns &lt;code&gt;{ok,undefined}&lt;/code&gt;.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;ignore&lt;/code&gt; を返した場合、pidは &lt;code&gt;undefined&lt;/code&gt; に設定されたままで、関数は &lt;code&gt;{ok,undefined}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="2f7a47396e2013d77055f46cf69011c8dbc710aa" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;{ok,Child}&lt;/code&gt; or &lt;code&gt;{ok,Child,Info}&lt;/code&gt;, the child specification and pid are added to the supervisor and the function returns the same value.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;{ok,Child}&lt;/code&gt; または &lt;code&gt;{ok,Child,Info}&lt;/code&gt; 返す場合、子の仕様とpidがスーパーバイザーに追加され、関数は同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="48c5d696f2b0fd45c1b44f5e625a2accf1b0ea21" translate="yes" xml:space="preserve">
          <source>If the child process start function returns &lt;code&gt;{ok,Child}&lt;/code&gt; or &lt;code&gt;{ok,Child,Info}&lt;/code&gt;, the pid is added to the supervisor and the function returns the same value.</source>
          <target state="translated">子プロセスの開始関数が &lt;code&gt;{ok,Child}&lt;/code&gt; または &lt;code&gt;{ok,Child,Info}&lt;/code&gt; 返す場合、pidがスーパーバイザーに追加され、関数は同じ値を返します。</target>
        </trans-unit>
        <trans-unit id="6d773deb857a328ed14a9080339dfab940c8161a" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, the child specification is discarded, and the function returns &lt;code&gt;{error,Error}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is a term containing information about the error and child specification.</source>
          <target state="translated">子プロセスのスタート機能は、エラータプルまたは誤った値を返し、または、それが失敗した場合、子仕様は破棄され、関数が戻る場合は &lt;code&gt;{error,Error}&lt;/code&gt; 、 &lt;code&gt;Error&lt;/code&gt; エラーと子仕様に関する用語を含む情報です。</target>
        </trans-unit>
        <trans-unit id="1b122e474c03f3cefc84e42bbf3408fd35e5bb5e" translate="yes" xml:space="preserve">
          <source>If the child process start function returns an error tuple or an erroneous value, or if it fails, the function returns &lt;code&gt;{error,Error}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is a term containing information about the error.</source>
          <target state="translated">子プロセスの開始関数がエラータプルまたは誤った値を返す場合、または失敗した場合、関数は &lt;code&gt;{error,Error}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Error&lt;/code&gt; はエラーに関する情報を含む用語です。</target>
        </trans-unit>
        <trans-unit id="4b1288099957500451c193cb8d9ad26569f30036" translate="yes" xml:space="preserve">
          <source>If the child specification identified by &lt;code&gt;Id&lt;/code&gt; does not exist, the function returns &lt;code&gt;{error,not_found}&lt;/code&gt;. If the child specification exists but the corresponding process is already running, the function returns &lt;code&gt;{error,running}&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Id&lt;/code&gt; で識別される子仕様が存在しない場合、関数は &lt;code&gt;{error,not_found}&lt;/code&gt; 返します。子の仕様は存在するが、対応するプロセスがすでに実行されている場合、関数は &lt;code&gt;{error,running}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="cdb0f0cbc98dc7d94d6b59162ff7e5e589d60364" translate="yes" xml:space="preserve">
          <source>If the client does not support any of the server advertised protocols or the server does not advertise any protocols, the client falls back to the first protocol in its list or to the default protocol (if a default is supplied). If the server does not support Next Protocol Negotiation, the connection terminates if no default protocol is supplied.</source>
          <target state="translated">クライアントがサーバがアドバタイズしたプロトコルのいずれもサポートしていない場合、またはサーバがいずれのプロトコルもアドバタイズしていない場合、クライアントはリストの最初のプロトコル、またはデフォルトプロトコル(デフォルトが提供されている場合)にフォールバックする。サーバが Next Protocol Negotiation をサポートしていない場合、デフォルトプロトコルが指定されていない場合、接続は終了します。</target>
        </trans-unit>
        <trans-unit id="1eacb16ee64844ecf9771b5e95710813db228ddf" translate="yes" xml:space="preserve">
          <source>If the client earlier has acquired a lock through &lt;code&gt;&lt;a href=&quot;#lock-2&quot;&gt;lock/2,3&lt;/a&gt;&lt;/code&gt;, this operation releases the associated lock. To access another target than &lt;code&gt;running&lt;/code&gt;, the server must support &lt;code&gt;:candidate&lt;/code&gt; and/or &lt;code&gt;:startup&lt;/code&gt;.</source>
          <target state="translated">クライアントが以前に &lt;code&gt;&lt;a href=&quot;#lock-2&quot;&gt;lock/2,3&lt;/a&gt;&lt;/code&gt; を介してロックを取得している場合、この操作は関連するロックを解放します。 &lt;code&gt;running&lt;/code&gt; 中以外のターゲットにアクセスするには、サーバーが &lt;code&gt;:candidate&lt;/code&gt; や &lt;code&gt;:startup&lt;/code&gt; をサポートしている必要があります。</target>
        </trans-unit>
        <trans-unit id="35cb61822f1edfb65ab7f8cb515f968decf80d92" translate="yes" xml:space="preserve">
          <source>If the client fails to send the first ssh message after a tcp connection setup within this time (in milliseconds), the connection is closed. The default value is 30 seconds. This is actualy a generous time, so it can lowered to make the daemon less prone to DoS attacks.</source>
          <target state="translated">クライアントが tcp 接続のセットアップ後、この時間 (ミリ秒単位)内に最初の ssh メッセージの送信に失敗した場合、接続は閉じられます。デフォルト値は 30 秒です。これは実際には余裕のある時間ですので、DoS 攻撃を受けにくくするために下げることができます。</target>
        </trans-unit>
        <trans-unit id="bc1ef493c0d6b60856faddf62e5c3f0669465abe" translate="yes" xml:space="preserve">
          <source>If the code cannot be structured as in the &lt;code&gt;multiple_setelement/1&lt;/code&gt; example, the best way to modify multiple elements in a large tuple is to convert the tuple to a list, modify the list, and convert it back to a tuple.</source>
          <target state="translated">&lt;code&gt;multiple_setelement/1&lt;/code&gt; の例のようにコードを構造化できない場合、大きなタプルの複数の要素を変更する最良の方法は、タプルをリストに変換し、リストを変更して、それをタプルに戻すことです。</target>
        </trans-unit>
        <trans-unit id="929332aa79f38c1ef62558eac8beb42b63e4173b" translate="yes" xml:space="preserve">
          <source>If the common &lt;strong&gt;state callback&lt;/strong&gt; needs to know the current state a function &lt;code&gt;handle_common/4&lt;/code&gt; can be used instead:</source>
          <target state="translated">共通&lt;strong&gt;状態コールバック&lt;/strong&gt;が現在の状態を知る必要がある場合は、代わりに関数 &lt;code&gt;handle_common/4&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="f0b7ca0808d04f400f34111028c04d20133e9b2d" translate="yes" xml:space="preserve">
          <source>If the common event handler needs to know the current state a function &lt;code&gt;handle_common/4&lt;/code&gt; can be used instead:</source>
          <target state="translated">共通イベントハンドラーが現在の状態を知る必要がある場合は、代わりに関数 &lt;code&gt;handle_common/4&lt;/code&gt; を使用できます。</target>
        </trans-unit>
        <trans-unit id="ff5b1741be466acda153b10a36fc7487f2ca70d6" translate="yes" xml:space="preserve">
          <source>If the compiler is to warn for missing callback functions, as it does for the OTP behaviours, add &lt;code&gt;-callback&lt;/code&gt; attributes in the behaviour module to describe the expected callbacks:</source>
          <target state="translated">コンパイラーがOTP動作の場合と同様に、欠落しているコールバック関数について警告する場合は、動作モジュールに &lt;code&gt;-callback&lt;/code&gt; 属性を追加して、予期されるコールバックを記述します。</target>
        </trans-unit>
        <trans-unit id="523bb4f391597ed38f62115f28e3a49961855867" translate="yes" xml:space="preserve">
          <source>If the complete history is to be stored in the configuration file, &lt;code&gt;Config&lt;/code&gt; must be &lt;code&gt;all&lt;/code&gt;. If only a selected number of entries from the history are to be stored, &lt;code&gt;Config&lt;/code&gt; must be a list of integers pointing out the entries to be stored.</source>
          <target state="translated">完全な履歴を構成ファイルに保存する場合、 &lt;code&gt;Config&lt;/code&gt; は &lt;code&gt;all&lt;/code&gt; でなければなりません。履歴から選択した数のエントリのみを保存する場合、 &lt;code&gt;Config&lt;/code&gt; は、保存するエントリを指す整数のリストでなければなりません。</target>
        </trans-unit>
        <trans-unit id="21e0716b03f7aa9ffd13782b0d420ef9a664a3d2" translate="yes" xml:space="preserve">
          <source>If the condition is not in any of the above formats, it must be an assertion. This can be a positive or negative lookahead or lookbehind assertion. Consider the following pattern, containing non-significant whitespace, and with the two alternatives on the second line:</source>
          <target state="translated">条件が上記の形式のいずれにもない場合は、アサーションでなければなりません。これは、正または負のルックヘッドまたはルックバックのアサーションになります。次のパターンを考えてみましょう。</target>
        </trans-unit>
        <trans-unit id="8a2fdb8b039278dbbab74f5b7bfb97af967770cd" translate="yes" xml:space="preserve">
          <source>If the condition is satisfied, the yes-pattern is used, otherwise the no-pattern (if present). If more than two alternatives exist in the subpattern, a compile-time error occurs. Each of the two alternatives can itself contain nested subpatterns of any form, including conditional subpatterns; the restriction to two alternatives applies only at the level of the condition. The following pattern fragment is an example where the alternatives are complex:</source>
          <target state="translated">条件が満たされていれば yes-pattern が使用され、そうでなければ no-pattern が使用される(存在する場合)。サブパターンに2つ以上の選択肢が存在する場合、コンパイル時エラーが発生します。2つの選択肢のそれぞれは、条件付きのサブパターンを含め、どんな形式の入れ子になったサブパターンを含むことができます;2つの選択肢への制限は、条件のレベルでのみ適用されます。以下のパターンの断片は、選択肢が複雑な場合の例です。</target>
        </trans-unit>
        <trans-unit id="fa304219623acf477a2744ed1bbab72da379738b" translate="yes" xml:space="preserve">
          <source>If the condition is the string (DEFINE), and there is no subpattern with the name DEFINE, the condition is always false. In this case, there can be only one alternative in the subpattern. It is always skipped if control reaches this point in the pattern. The idea of DEFINE is that it can be used to define &quot;subroutines&quot; that can be referenced from elsewhere. (The use of subroutines is described below.) For example, a pattern to match an IPv4 address, such as &quot;192.168.23.245&quot;, can be written like this (ignore whitespace and line breaks):</source>
          <target state="translated">条件が文字列(DEFINE)であり、DEFINEという名前のサブパターンが存在しない場合、条件は常にFalseとなります。この場合、サブパターンには1つの選択肢しかありません。制御がパターンのこの点に達すると、常にスキップされます。DEFINEの考え方は、他の場所から参照できる「サブルーチン」を定義するのに使えるということです。(サブルーチンの使用法については後述します。)例えば、IPv4アドレスにマッチするパターン、例えば &quot;192.168.23.245 &quot;のように、次のように書くことができます(空白や改行は無視してください)。</target>
        </trans-unit>
        <trans-unit id="8e3f4e65a85b857108a35b24009e6fe7e2ac2084" translate="yes" xml:space="preserve">
          <source>If the condition is the string (R), and there is no subpattern with the name R, the condition is true if a recursive call to the whole pattern or any subpattern has been made. If digits or a name preceded by ampersand follow the letter R, for example:</source>
          <target state="translated">条件が文字列(R)であり、Rという名前のサブパターンが存在しない場合、パターン全体または任意のサブパターンへの再帰的呼び出しが行われた場合、条件は真となります。数字や名前の前にアンパサンドが付いている場合は、例えば、Rの後に文字が続きます。</target>
        </trans-unit>
        <trans-unit id="95c431a360008991bb1b7759c9f06391d6e75043" translate="yes" xml:space="preserve">
          <source>If the configuration is faulty, or if the initiation fails, the callback function must return &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">構成に問題がある場合、または開始が失敗した場合、コールバック関数は &lt;code&gt;{error,Reason}&lt;/code&gt; 返す必要があります。</target>
        </trans-unit>
        <trans-unit id="18a294113eb6042d9ad2a36514917a6dc077c344" translate="yes" xml:space="preserve">
          <source>If the configuration is faulty, the callback function must return &lt;code&gt;{error,Reason}&lt;/code&gt;.</source>
          <target state="translated">設定に誤りがある場合、コールバック関数は &lt;code&gt;{error,Reason}&lt;/code&gt; 返す必要があります。</target>
        </trans-unit>
        <trans-unit id="6a82e12e149afd95e3ddf1bb75d52a9982f828ca" translate="yes" xml:space="preserve">
          <source>If the configuration parameter &lt;code&gt;os_sup_enable&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, this function is called automatically by &lt;code&gt;os_sup&lt;/code&gt;, using the same arguments as when &lt;code&gt;enable/2&lt;/code&gt; was called.</source>
          <target state="translated">構成パラメーター &lt;code&gt;os_sup_enable&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、この関数は、 &lt;code&gt;enable/2&lt;/code&gt; が呼び出されたときと同じ引数を使用して、 &lt;code&gt;os_sup&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="aedee7601f2ce3a18dc9a8c63054f54ca3093e3f" translate="yes" xml:space="preserve">
          <source>If the configuration parameter &lt;code&gt;os_sup_enable&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;, this function is called automatically by &lt;code&gt;os_sup&lt;/code&gt;, using the values of &lt;code&gt;os_sup_own&lt;/code&gt; and &lt;code&gt;os_sup_syslogconf&lt;/code&gt; as arguments.</source>
          <target state="translated">構成パラメーター &lt;code&gt;os_sup_enable&lt;/code&gt; が &lt;code&gt;false&lt;/code&gt; の場合、この関数は &lt;code&gt;os_sup_own&lt;/code&gt; および &lt;code&gt;os_sup_syslogconf&lt;/code&gt; の値を引数として使用して、 &lt;code&gt;os_sup&lt;/code&gt; によって自動的に呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b2ffcf1c22e3ce76143a4b07b440007a5df05ea7" translate="yes" xml:space="preserve">
          <source>If the configuration parameter &lt;code&gt;relocatable&lt;/code&gt; was set to &lt;code&gt;true&lt;/code&gt; there is no need to install the target system with &lt;code&gt;reltool:install/2&lt;/code&gt; before it can be started. In that case the file tree containing the target system can be moved without re-installation.</source>
          <target state="translated">設定パラメータの場合は &lt;code&gt;relocatable&lt;/code&gt; に設定された &lt;code&gt;true&lt;/code&gt; とターゲット・システムをインストールする必要はありません &lt;code&gt;reltool:install/2&lt;/code&gt; 、それを開始する前に。その場合、ターゲットシステムを含むファイルツリーは、再インストールせずに移動できます。</target>
        </trans-unit>
        <trans-unit id="f9be9f192141862f112332246e5a8f6499cf62cb" translate="yes" xml:space="preserve">
          <source>If the connection between the nodes involved in the spawn operation is lost during the spawn operation, the spawn operation will fail with an error reason of &lt;code&gt;noconnection&lt;/code&gt;. A new process may or may not have been created.</source>
          <target state="translated">スポーン操作中にスポーン操作に関係するノード間の接続が失われた場合、スポーン操作は &lt;code&gt;noconnection&lt;/code&gt; のエラー理由で失敗します。新しいプロセスが作成されている場合と作成されていない場合があります。</target>
        </trans-unit>
        <trans-unit id="2a9759af159af887f4fafa82c8992b674a1e93e4" translate="yes" xml:space="preserve">
          <source>If the connection between the nodes involved in the spawn operation is lost during the spawn operation, the spawn operation will fail with an error reason of &lt;code&gt;noconnection&lt;/code&gt;. A new process may or may not have been created. If it has been created, it will be delivered an exit signal with an exit reason of &lt;code&gt;noconnection&lt;/code&gt;.</source>
          <target state="translated">スポーン操作中にスポーン操作に関係するノード間の接続が失われた場合、スポーン操作は &lt;code&gt;noconnection&lt;/code&gt; のエラー理由で失敗します。新しいプロセスが作成されている場合と作成されていない場合があります。作成されている場合は、 &lt;code&gt;noconnection&lt;/code&gt; 終了理由で終了シグナルが配信されます。</target>
        </trans-unit>
        <trans-unit id="90f42cb19285f317fb015c9fad2016cce36110ed" translate="yes" xml:space="preserve">
          <source>If the connection timeout option &lt;code&gt;connect_timeout&lt;/code&gt; is set, that value is used also for the negotiation timeout and this option (&lt;code&gt;timeout&lt;/code&gt;) is ignored.</source>
          <target state="translated">接続タイムアウトオプション &lt;code&gt;connect_timeout&lt;/code&gt; が設定されている場合、その値はネゴシエーションタイムアウトにも使用され、このオプション（ &lt;code&gt;timeout&lt;/code&gt; ）は無視されます。</target>
        </trans-unit>
        <trans-unit id="860a4598c1d1ec6a83570120e591b858d6e8f890" translate="yes" xml:space="preserve">
          <source>If the connection to a remote node goes down, the main node will mark it as lost. If the node comes back it will be added again. If the remote node was alive during the disconnected periode, cover data from before and during this periode will be included in the analysis.</source>
          <target state="translated">リモートノードへの接続がダウンした場合、メインノードはそれを紛失したものとしてマークします。ノードが復帰した場合は、再び追加されます。切断されたペリオデ中にリモートノードが生きていた場合、このペリオデの前後のカバーデータが解析に含まれます。</target>
        </trans-unit>
        <trans-unit id="a99ee1cb6fcf81c8bae71874c193979ebe43ebab" translate="yes" xml:space="preserve">
          <source>If the constraints described so far is not enough, additional constraints can be written in C in &lt;code&gt;beam_load.c&lt;/code&gt; and be called as a guard function on the left side of the transformation. If the guard function returns a non-zero value, the matching of the rule will continue, otherwise the match will fail. For example:</source>
          <target state="translated">これまでに説明した制約では不十分な場合は、Cで &lt;code&gt;beam_load.c&lt;/code&gt; に追加の制約を記述し、変換の左側でガード関数として呼び出すことができます。ガード関数がゼロ以外の値を返す場合、ルールの照合は続行されます。それ以外の場合、照合は失敗します。例えば：</target>
        </trans-unit>
        <trans-unit id="c3b7535bf38d5e1053e0dcfad4dfa786c040f2e7" translate="yes" xml:space="preserve">
          <source>If the contents of &lt;code&gt;.erlang&lt;/code&gt; are changed and a private version of &lt;code&gt;user_default&lt;/code&gt; is defined, the Erlang/OTP environment can be customized. More powerful changes can be made by supplying command-line arguments in the startup script &lt;code&gt;erl&lt;/code&gt;. For more information, see &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;.erlang&lt;/code&gt; の内容が変更され、プライベートバージョンの &lt;code&gt;user_default&lt;/code&gt; が定義されている場合、Erlang / OTP環境をカスタマイズできます。起動スクリプト &lt;code&gt;erl&lt;/code&gt; でコマンドライン引数を指定することにより、より強力な変更を行うことができます。詳細については、 &lt;code&gt;&lt;a href=&quot;init&quot;&gt;init(3)&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="6279554b0d57c5f26b8ffa794daeaf8c67036750" translate="yes" xml:space="preserve">
          <source>If the context requires an integer rather than a variable, an atom, or a string, you cannot use the uppercase convention to mark an automatic metavariable. Instead, if the integer (without the &lt;code&gt;909&lt;/code&gt;-prefix and lift/glob markers) ends in a &lt;code&gt;9&lt;/code&gt;, the integer will become an Erlang-level variable prefixed with &lt;code&gt;Q&lt;/code&gt;, and if it ends with &lt;code&gt;99&lt;/code&gt; it will also be automatically abstracted. For example, the following will increment the arity of the exported function f:</source>
          <target state="translated">コンテキストが変数、アトム、または文字列ではなく整数を必要とする場合、大文字の規則を使用して自動メタ変数をマークすることはできません。代わりに、整数（ &lt;code&gt;909&lt;/code&gt; プレフィックスとリフト/グロブマーカーなし）が &lt;code&gt;9&lt;/code&gt; で終わる場合、整数は &lt;code&gt;Q&lt;/code&gt; で始まるErlangレベルの変数になり、 &lt;code&gt;99&lt;/code&gt; で終わる場合も、自動的に抽象化されます。たとえば、次はエクスポートされた関数fのアリティをインクリメントします。</target>
        </trans-unit>
        <trans-unit id="e14244783ffadbf99f1d872c65ba8477af77375e" translate="yes" xml:space="preserve">
          <source>If the converse of a function F is a function F', then F' is called the &lt;strong id=&quot;inverse&quot;&gt;inverse&lt;/strong&gt; of F.</source>
          <target state="translated">関数Fの逆が関数F 'である場合、F'はFの&lt;strong id=&quot;inverse&quot;&gt;逆&lt;/strong&gt;と呼ばれます。</target>
        </trans-unit>
        <trans-unit id="04e1722c7eed1557956908ac595866c524c53815" translate="yes" xml:space="preserve">
          <source>If the cross compilation tools are prefixed by &lt;code&gt;&amp;lt;HOST&amp;gt;-&lt;/code&gt; you probably do not need to set these variables (where &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; is what has been passed as &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt; argument to &lt;code&gt;configure&lt;/code&gt;).</source>
          <target state="translated">クロスコンパイルツールの前に &lt;code&gt;&amp;lt;HOST&amp;gt;-&lt;/code&gt; が付いている場合、おそらくこれらの変数を設定する必要はありません（ &lt;code&gt;&amp;lt;HOST&amp;gt;&lt;/code&gt; は &lt;code&gt;--host=&amp;lt;HOST&amp;gt;&lt;/code&gt; 引数として &lt;code&gt;configure&lt;/code&gt; に渡されたものです）。</target>
        </trans-unit>
        <trans-unit id="97604b617615c0b88c829c8abf48415d16d68d04" translate="yes" xml:space="preserve">
          <source>If the current working directory for &lt;code&gt;erlc&lt;/code&gt; is different from the working directory active when the compile server was started, &lt;strong&gt;and&lt;/strong&gt; if the compile server has active jobs, it will be restarted as soon as those jobs have finished. (Build systems that build files randomly across multiple directories in parallel will probably not benefit from the compile server.)</source>
          <target state="translated">&lt;code&gt;erlc&lt;/code&gt; の現在の作業ディレクトリが、コンパイルサーバーの起動時にアクティブだった作業ディレクトリと異なる場合、&lt;strong&gt;および&lt;/strong&gt;コンパイルサーバーにアクティブなジョブがある場合、それらのジョブが終了するとすぐに再起動されます。（複数のディレクトリにまたがってランダムにファイルをビルドするシステムをビルドしても、コンパイルサーバーのメリットはおそらく得られません。）</target>
        </trans-unit>
        <trans-unit id="693638c468a0a688aceae31ef9d5b589f67e3d3d" translate="yes" xml:space="preserve">
          <source>If the data cannot be converted, either because of illegal Unicode/ISO Latin-1 characters in the list, or because of invalid UTF encoding in any binaries, an error tuple is returned. The error tuple contains the tag &lt;code&gt;error&lt;/code&gt;, a list representing the characters that could be converted before the error occurred and a representation of the characters including and after the offending integer/bytes. The last part is mostly for debugging, as it still constitutes a possibly deep or mixed list, or both, not necessarily of the same depth as the original data. The error occurs when traversing the list and whatever is left to decode is returned &quot;as is&quot;.</source>
          <target state="translated">リスト内のUnicode / ISO Latin-1文字が正しくないため、またはバイナリのUTFエンコードが無効であるためにデータを変換できない場合、エラータプルが返されます。エラータプルには、タグ &lt;code&gt;error&lt;/code&gt; 、エラーが発生する前に変換された可能性のある文字を表すリスト、および問題の整数/バイトを含む文字とその後の文字の表現が含まれています。最後の部分は、おそらく元のデータと同じ深さである必要はなく、おそらく深いリストまたは混合リスト、あるいはその両方を構成するため、ほとんどがデバッグ用です。このエラーは、リストをトラバースするときに発生し、デコードされずに残っているものはすべて「そのまま」返されます。</target>
        </trans-unit>
        <trans-unit id="830c19e2812b5ad638344d6692b4a5d1c14189d2" translate="yes" xml:space="preserve">
          <source>If the data in the table is to be accessed so that the order of the keys in the table is significant, the table type &lt;code&gt;ordered_set&lt;/code&gt; can be used instead of the more usual &lt;code&gt;set&lt;/code&gt; table type. An &lt;code&gt;ordered_set&lt;/code&gt; is always traversed in Erlang term order regarding the key field so that the return values from functions such as &lt;code&gt;select&lt;/code&gt;, &lt;code&gt;match_object&lt;/code&gt;, and &lt;code&gt;foldl&lt;/code&gt; are ordered by the key values. Traversing an &lt;code&gt;ordered_set&lt;/code&gt; with the &lt;code&gt;first&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; operations also returns the keys ordered.</source>
          <target state="translated">テーブル内のデータにアクセスして、テーブル内のキーの順序が重要になる場合は、通常の &lt;code&gt;set&lt;/code&gt; テーブルタイプの代わりにテーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; を使用できます。 &lt;code&gt;ordered_set&lt;/code&gt; は、いつものような関数からの戻り値をそのキーフィールドに関するErlangの項順序にトラバースされる &lt;code&gt;select&lt;/code&gt; 、 &lt;code&gt;match_object&lt;/code&gt; 、および &lt;code&gt;foldl&lt;/code&gt; のは、キー値によって順序付けられます。 &lt;code&gt;first&lt;/code&gt; と &lt;code&gt;next&lt;/code&gt; 操作で &lt;code&gt;ordered_set&lt;/code&gt; をトラバースすると、順序付けされたキーも返されます。</target>
        </trans-unit>
        <trans-unit id="c7cef7dde804ec38da41a38a959068e58669e710" translate="yes" xml:space="preserve">
          <source>If the data is to be sent from the driver to the port owner process, it is faster to use &lt;code&gt;&lt;a href=&quot;#driver_outputv&quot;&gt;driver_outputv&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">データがドライバーからポート所有者プロセスに送信される場合は、 &lt;code&gt;&lt;a href=&quot;#driver_outputv&quot;&gt;driver_outputv&lt;/a&gt;&lt;/code&gt; を使用する方が高速です。</target>
        </trans-unit>
        <trans-unit id="d69f0718531a0dc4b5192097fe34a9a400874115" translate="yes" xml:space="preserve">
          <source>If the database is huge, it it not always possible to restore it online. In such cases, restore the old database by installing a fallback and then restart.</source>
          <target state="translated">データベースが巨大な場合、オンラインで復元できるとは限りません。そのような場合は、フォールバックをインストールして古いデータベースを復元してから再起動してください。</target>
        </trans-unit>
        <trans-unit id="1a465de33f0929289f4ba867f52979d6f1b60be6" translate="yes" xml:space="preserve">
          <source>If the decoded message happens to be received before the connection is established, a new &quot;virtual&quot; connection is established. This is typically the case for the Media Gateway Controller (MGC) upon the first Service Change. When this occurs the following callback function will be invoked:</source>
          <target state="translated">接続が確立される前にデコードされたメッセージを受信した場合、新しい「仮想」接続が確立されます。これは通常、最初のサービス変更時にメディアゲートウェイコントローラ(MGC)で発生します。この場合、以下のコールバック関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fbdce8830ddb42e0e285519e4fb52411ce2090fe" translate="yes" xml:space="preserve">
          <source>If the decoded message instead of transactions contains a message error, the following callback function will be invoked:</source>
          <target state="translated">トランザクションではなくデコードされたメッセージにメッセージエラーが含まれている場合は、以下のコールバック関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="6be7e8b5958c0936e75a2ab6e68f6fdfd8645d72" translate="yes" xml:space="preserve">
          <source>If the default value is not suitable, the type letter can be followed by &lt;code&gt;=&lt;/code&gt; and a value. Most types take an integer value. The value for an atom is written the same way as in the C source code. For example, the atom &lt;code&gt;false&lt;/code&gt; is written as &lt;code&gt;am_false&lt;/code&gt;. The atom must be listed in &lt;code&gt;atom.names&lt;/code&gt;.</source>
          <target state="translated">デフォルト値が適切でない場合は、タイプ文字の後に &lt;code&gt;=&lt;/code&gt; と値を続けることができます。ほとんどのタイプは整数値を取ります。アトムの値は、Cソースコードと同じ方法で記述されます。たとえば、アトム &lt;code&gt;false&lt;/code&gt; は &lt;code&gt;am_false&lt;/code&gt; と記述されます。アトムは &lt;code&gt;atom.names&lt;/code&gt; にリストされている必要があります。</target>
        </trans-unit>
        <trans-unit id="e05877711912cb7abc7753f9ce969b4440e6bb55" translate="yes" xml:space="preserve">
          <source>If the definitions are identical, the output module keeps only one definition with the original name.</source>
          <target state="translated">定義が同一の場合、出力モジュールは元の名前で1つの定義だけを保持します。</target>
        </trans-unit>
        <trans-unit id="709eb064721592f0145e0c9870df4b79e36f2fb2" translate="yes" xml:space="preserve">
          <source>If the definitions have the same name and differs in the definition, they are renamed. The new names are the definition name and the original module name concatenated.</source>
          <target state="translated">定義が同じ名前で、定義が異なる場合は名前を変更します。新しい名前は、定義名と元のモジュール名を連結したものです。</target>
        </trans-unit>
        <trans-unit id="c3055c07c7bca6e36c452534d5a6de3daec9136a" translate="yes" xml:space="preserve">
          <source>If the deleted entry is a registered subscriber, it will imply that the subscriber process gets is unregistered as subscriber as well as it gets it final message.</source>
          <target state="translated">削除されたエントリが登録されたサブスクライバである場合、サブスクライバプロセスが最終メッセージを取得すると同時に、サブスクライバとして登録されていないことを意味する。</target>
        </trans-unit>
        <trans-unit id="b7794972861adba2b5114706df92a0c8a22b1b7d" translate="yes" xml:space="preserve">
          <source>If the deleted term (or any part of it) is still used by a process, that process will do a major (fullsweep) garbage collection and copy the term into the process. However, at most two processes at a time will be scheduled to do that kind of garbage collection.</source>
          <target state="translated">削除された用語(またはその一部)がまだプロセスで使用されている場合、そのプロセスはメジャー(フルスイープ)のガベージコレクションを行い、その用語をプロセスにコピーします。しかし、この種のガベージコレクションを行うために、最大でも一度に2つのプロセスがスケジュールされます。</target>
        </trans-unit>
        <trans-unit id="818e5bafa76101bf732fc51de14593ea48da629f" translate="yes" xml:space="preserve">
          <source>If the destination node would have to be auto-connected to do the send, &lt;code&gt;noconnect&lt;/code&gt; is returned instead.</source>
          <target state="translated">送信を行うために宛先ノードを自動接続する必要がある &lt;code&gt;noconnect&lt;/code&gt; は、代わりにnoconnectが返されます。</target>
        </trans-unit>
        <trans-unit id="fa49b96a6e23a80a21210ac903528ecee8169a93" translate="yes" xml:space="preserve">
          <source>If the directory for the files &lt;code&gt;syslog.conf.ORIG&lt;/code&gt; and &lt;code&gt;syslog.conf.OTP&lt;/code&gt; is &lt;code&gt;/etc&lt;/code&gt;, the line in &lt;code&gt;syslog.conf.OTP&lt;/code&gt; is as follows:</source>
          <target state="translated">&lt;code&gt;syslog.conf.ORIG&lt;/code&gt; および &lt;code&gt;syslog.conf.OTP&lt;/code&gt; ファイルのディレクトリが &lt;code&gt;/etc&lt;/code&gt; の場合、 &lt;code&gt;syslog.conf.OTP&lt;/code&gt; の行は次のようになります。</target>
        </trans-unit>
        <trans-unit id="1cfa13bd96270a398f97e146ebd653c8f1622e36" translate="yes" xml:space="preserve">
          <source>If the directory is not found</source>
          <target state="translated">ディレクトリが見つからない場合</target>
        </trans-unit>
        <trans-unit id="ee9c7c20028055c752f1006405fb6ac3dd62c654" translate="yes" xml:space="preserve">
          <source>If the directory refers to a directory in an archive, the archive name is stripped away before the path is returned. For example, if directory &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2.ez/mnesia-4.2.2/ebin&lt;/code&gt; is in the path, &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2/ebin&lt;/code&gt; is returned. This means that the library directory for an application is the same, regardless if the application resides in an archive or not.</source>
          <target state="translated">ディレクトリがアーカイブ内のディレクトリを参照している場合、パスが返される前にアーカイブ名が削除されます。たとえば、ディレクトリ &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2.ez/mnesia-4.2.2/ebin&lt;/code&gt; がパスにある場合、/ &lt;code&gt;/usr/local/otp/lib/mnesia-4.2.2/ebin&lt;/code&gt; 返されます。つまり、アプリケーションがアーカイブに存在するかどうかに関係なく、アプリケーションのライブラリディレクトリは同じです。</target>
        </trans-unit>
        <trans-unit id="f85643a441c622fdd2576beffc4873deda4e4256" translate="yes" xml:space="preserve">
          <source>If the dirty NIF is expected to be CPU-bound, its &lt;code&gt;flags&lt;/code&gt; field is to be set to &lt;code&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; or &lt;code&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt;.</source>
          <target state="translated">ダーティNIFがCPUにバインドされていると予想される場合、その &lt;code&gt;flags&lt;/code&gt; フィールドは &lt;code&gt;ERL_NIF_DIRTY_JOB_CPU_BOUND&lt;/code&gt; または &lt;code&gt;ERL_NIF_DIRTY_JOB_IO_BOUND&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="23d292909c9d32167cfb8c2e96fc30eeaf637bf8" translate="yes" xml:space="preserve">
          <source>If the driver for some reason wants to keep a driver binary around, for example in a static variable, the reference count is to be incremented, and the binary can later be freed in the &lt;code&gt;&lt;a href=&quot;driver_entry#stop&quot;&gt; stop&lt;/a&gt;&lt;/code&gt; callback, with &lt;code&gt;driver_free_binary&lt;/code&gt;.</source>
          <target state="translated">何らかの理由でドライバーがドライバーのバイナリーを保持したい場合、たとえば静的変数の場合、参照カウントがインクリメントされ、後で &lt;code&gt;driver_free_binary&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;driver_entry#stop&quot;&gt; stop&lt;/a&gt;&lt;/code&gt; コールバックでバイナリーを解放できます。</target>
        </trans-unit>
        <trans-unit id="9c2ddfd812a9a461d82c50bcdf565e3ca018a4da" translate="yes" xml:space="preserve">
          <source>If the driver for some reason wants to keep a driver binary around, for example in a static variable, the reference count is to be incremented, and the binary can later be freed in the &lt;code&gt;&lt;a href=&quot;driver_entry#stop&quot;&gt;stop&lt;/a&gt;&lt;/code&gt; callback, with &lt;code&gt;driver_free_binary&lt;/code&gt;.</source>
          <target state="translated">ドライバーが何らかの理由でドライバーのバイナリを静的変数などに保持したい場合は、参照カウントをインクリメントし、後で &lt;code&gt;&lt;a href=&quot;driver_entry#stop&quot;&gt;stop&lt;/a&gt;&lt;/code&gt; コールバックで &lt;code&gt;driver_free_binary&lt;/code&gt; を使用してバイナリを解放できます。</target>
        </trans-unit>
        <trans-unit id="a12df4e4fa0309d2f4f4f74b51f81225f4bdeeaf" translate="yes" xml:space="preserve">
          <source>If the driver has option &lt;code&gt;kill_ports&lt;/code&gt; set, or if &lt;code&gt;kill_ports&lt;/code&gt; is specified as an option to this function, all pending ports using this driver are killed when unloading is done by the last &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt;. If no port-killing is involved and there are open ports, the unloading is delayed until no more open ports use the driver. If, in this case, another &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; (or even this user) loads the driver again before the driver is unloaded, the unloading never takes place.</source>
          <target state="translated">ドライバーにオプション &lt;code&gt;kill_ports&lt;/code&gt; が設定されている場合、またはこの関数のオプションとして &lt;code&gt;kill_ports&lt;/code&gt; が指定されている場合、最後の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; がアンロードを実行すると、このドライバーを使用する保留中のすべてのポートが強制終了されます。ポートキリングが行われておらず、開いているポートがある場合、開いているポートがドライバを使用しなくなるまで、アンロードは遅延されます。この場合、別の &lt;code&gt;&lt;a href=&quot;#users&quot;&gt;user&lt;/a&gt;&lt;/code&gt; （またはこのユーザー）がドライバーをアンロードする前に再度ロードすると、アンロードは行われません。</target>
        </trans-unit>
        <trans-unit id="fcf785a336b2c213c45577e83eb09e396c7e3eab" translate="yes" xml:space="preserve">
          <source>If the driver is unloaded (not present in the system), error code &lt;code&gt;not_loaded&lt;/code&gt; is returned. Option &lt;code&gt;reload&lt;/code&gt; is intended for when the user has already loaded the driver in advance.</source>
          <target state="translated">ドライバがアンロードされている（システムに存在しない）場合、エラーコード &lt;code&gt;not_loaded&lt;/code&gt; が返されます。オプションの &lt;code&gt;reload&lt;/code&gt; は、ユーザーが事前にドライバーを既にロードしている場合を対象としています。</target>
        </trans-unit>
        <trans-unit id="4d39f81561d0eb5e9555b68509516e98553687c4" translate="yes" xml:space="preserve">
          <source>If the driver wants to return data, it is to return it in &lt;code&gt;rbuf&lt;/code&gt;. When &lt;code&gt;control&lt;/code&gt; is called, &lt;code&gt;*rbuf&lt;/code&gt; points to a default buffer of &lt;code&gt;rlen&lt;/code&gt; bytes, which can be used to return data. Data is returned differently depending on the port control flags (those that are set with &lt;code&gt;&lt;a href=&quot;erl_driver#set_port_control_flags&quot;&gt; erl_driver:set_port_control_flags&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ドライバーがデータを返したい場合は、 &lt;code&gt;rbuf&lt;/code&gt; で返します。場合 &lt;code&gt;control&lt;/code&gt; 、と呼ばれる &lt;code&gt;*rbuf&lt;/code&gt; デフォルトのバッファにポイント &lt;code&gt;rlen&lt;/code&gt; データを返すために使用することができるバイト。データは、ポート制御フラグ（ &lt;code&gt;&lt;a href=&quot;erl_driver#set_port_control_flags&quot;&gt; erl_driver:set_port_control_flags&lt;/a&gt;&lt;/code&gt; で設定されたフラグ）に応じて異なる方法で返されます。</target>
        </trans-unit>
        <trans-unit id="af3e2b2e4d5d486f038ae4047d709485c51ebafd" translate="yes" xml:space="preserve">
          <source>If the driver wants to return data, it is to return it in &lt;code&gt;rbuf&lt;/code&gt;. When &lt;code&gt;control&lt;/code&gt; is called, &lt;code&gt;*rbuf&lt;/code&gt; points to a default buffer of &lt;code&gt;rlen&lt;/code&gt; bytes, which can be used to return data. Data is returned differently depending on the port control flags (those that are set with &lt;code&gt;&lt;a href=&quot;erl_driver#set_port_control_flags&quot;&gt;erl_driver:set_port_control_flags&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">ドライバがデータを返したい場合は、それを &lt;code&gt;rbuf&lt;/code&gt; で返します。場合 &lt;code&gt;control&lt;/code&gt; 、と呼ばれる &lt;code&gt;*rbuf&lt;/code&gt; デフォルトのバッファにポイント &lt;code&gt;rlen&lt;/code&gt; データを返すために使用することができるバイト。データは、ポート制御フラグ（ &lt;code&gt;&lt;a href=&quot;erl_driver#set_port_control_flags&quot;&gt;erl_driver:set_port_control_flags&lt;/a&gt;&lt;/code&gt; で設定されるもの）に応じて異なる方法で返されます。</target>
        </trans-unit>
        <trans-unit id="f299a698f91b18144d2db6873d22e3355371e343" translate="yes" xml:space="preserve">
          <source>If the driver was previously unloaded, but is still present because of open ports to it, a call to &lt;code&gt;load/2&lt;/code&gt; stops the unloading and keeps the driver (as long as &lt;code&gt;Path&lt;/code&gt; is the same), and &lt;code&gt;ok&lt;/code&gt; is returned. If you really want the object code to be reloaded, use &lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt; or the low-level interface &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; instead. See also the description of &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;different scenarios&lt;/a&gt;&lt;/code&gt; for loading/unloading in the introduction.</source>
          <target state="translated">ドライバーが以前にアンロードされたが、ポートが開いているためにまだ存在する場合、 &lt;code&gt;load/2&lt;/code&gt; の呼び出しによりアンロードが停止され、（ &lt;code&gt;Path&lt;/code&gt; が同じである限り）ドライバーが保持され、 &lt;code&gt;ok&lt;/code&gt; が返されます。本当にオブジェクトコードを &lt;code&gt;&lt;a href=&quot;#reload-2&quot;&gt;reload/2&lt;/a&gt;&lt;/code&gt; 場合は、代わりにreload / 2または低レベルインターフェイス &lt;code&gt;&lt;a href=&quot;#try_load-3&quot;&gt;try_load/3&lt;/a&gt;&lt;/code&gt; を使用してください。概要のロード/アンロードの &lt;code&gt;&lt;a href=&quot;#scenarios&quot;&gt;different scenarios&lt;/a&gt;&lt;/code&gt; の説明も参照してください。</target>
        </trans-unit>
        <trans-unit id="73cd90e7e567fcfaa60abf0aba49564831915adf" translate="yes" xml:space="preserve">
          <source>If the edge would create a cycle in an &lt;code&gt;&lt;a href=&quot;#acyclic_digraph&quot;&gt;acyclic digraph&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;Path}}&lt;/code&gt; is returned. If &lt;code&gt;G&lt;/code&gt; already has an edge with value &lt;code&gt;E&lt;/code&gt; connecting a different pair of vertices, &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;[V1,&amp;nbsp;V2]}}&lt;/code&gt; is returned. If either of &lt;code&gt;V1&lt;/code&gt; or &lt;code&gt;V2&lt;/code&gt; is not a vertex of digraph &lt;code&gt;G&lt;/code&gt;, &lt;code&gt;{error,&amp;nbsp;{bad_vertex,&amp;nbsp;&lt;/code&gt;V&lt;code&gt;}}&lt;/code&gt; is returned, V = &lt;code&gt;V1&lt;/code&gt; or V = &lt;code&gt;V2&lt;/code&gt;.</source>
          <target state="translated">エッジが &lt;code&gt;&lt;a href=&quot;#acyclic_digraph&quot;&gt;acyclic digraph&lt;/a&gt;&lt;/code&gt; で循環を作成する場合、 &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;Path}}&lt;/code&gt; が返されます。 &lt;code&gt;G&lt;/code&gt; に別の頂点のペアを接続する値 &lt;code&gt;E&lt;/code&gt; のエッジが既にある場合、 &lt;code&gt;{error,&amp;nbsp;{bad_edge,&amp;nbsp;[V1,&amp;nbsp;V2]}}&lt;/code&gt; が返されます。 &lt;code&gt;V1&lt;/code&gt; または &lt;code&gt;V2&lt;/code&gt; のいずれかがダイグラフ &lt;code&gt;G&lt;/code&gt; の頂点でない場合、 &lt;code&gt;{error,&amp;nbsp;{bad_vertex,&amp;nbsp;&lt;/code&gt; V &lt;code&gt;}}&lt;/code&gt; が返されます。V= &lt;code&gt;V1&lt;/code&gt; またはV = &lt;code&gt;V2&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="88548b0769c08599153c91bedffecba4076939a2" translate="yes" xml:space="preserve">
          <source>If the emulator detects an internal error (or runs out of memory), it, by default, generates both a crash dump and a core dump. The core dump is, however, not very useful as the content of process heaps is destroyed by the crash dump generation.</source>
          <target state="translated">エミュレータが内部エラーを検出した場合(またはメモリ不足に陥った場合)、デフォルトではクラッシュダンプとコアダンプの両方を生成します。しかし、プロセスヒープの内容はクラッシュダンプの生成によって破壊されてしまうので、コアダンプはあまり有用ではありません。</target>
        </trans-unit>
        <trans-unit id="1c268e0a4f924dc7fcacea261eaf98d33a0b39dd" translate="yes" xml:space="preserve">
          <source>If the emulator needs to be restarted after upgrading or downgrading, that is, if the ERTS version differs between &lt;code&gt;Name.rel&lt;/code&gt; and &lt;code&gt;Name2.rel&lt;/code&gt;</source>
          <target state="translated">アップグレードまたはダウングレード後にエミュレータを再起動する必要がある場合、つまり、ERTSバージョンが &lt;code&gt;Name.rel&lt;/code&gt; と &lt;code&gt;Name2.rel&lt;/code&gt; で異なる場合</target>
        </trans-unit>
        <trans-unit id="0e5cf3cf162417b51e0a5af24e5040b612349b1b" translate="yes" xml:space="preserve">
          <source>If the emulator needs to write a crash dump, the value of this variable is the filename of the crash dump file. If the variable is not set, the name of the crash dump file is &lt;code&gt;erl_crash.dump&lt;/code&gt; in the current directory.</source>
          <target state="translated">エミュレータがクラッシュダンプを書き込む必要がある場合、この変数の値はクラッシュダンプファイルのファイル名です。変数が設定されていない場合、クラッシュダンプファイルの名前は現在のディレクトリの &lt;code&gt;erl_crash.dump&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2eec4c147205e5216572281566e1e6a996fb672c" translate="yes" xml:space="preserve">
          <source>If the emulator was built with support for &lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt; dirty schedulers&lt;/a&gt;&lt;/code&gt;, changing the number of schedulers online can also change the number of dirty CPU schedulers online. For example, if 12 schedulers and 6 dirty CPU schedulers are online, and &lt;code&gt;system_flag/2&lt;/code&gt; is used to set the number of schedulers online to 6, then the number of dirty CPU schedulers online is automatically decreased by half as well, down to 3. Similarly, the number of dirty CPU schedulers online increases proportionally to increases in the number of schedulers online.</source>
          <target state="translated">エミュレータが &lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt; dirty schedulers&lt;/a&gt;&lt;/code&gt; をサポートするように構築されている場合、オンラインでスケジューラの数を変更すると、ダーティCPUスケジューラの数もオンラインで変更できます。たとえば、12個のスケジューラと6個のダーティCPUスケジューラがオンラインであり、 &lt;code&gt;system_flag/2&lt;/code&gt; を使用してオンラインのスケジューラの数を6に設定すると、オンラインのダーティCPUスケジューラの数も自動的に半分に減少して3になります。同様に、オンラインのダーティCPUスケジューラーの数は、オンラインのスケジューラーの数の増加に比例して増加します。</target>
        </trans-unit>
        <trans-unit id="40c61683ad15fa177c304fbdf476f8b2479cdc64" translate="yes" xml:space="preserve">
          <source>If the emulator was built with support for &lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt;dirty schedulers&lt;/a&gt;&lt;/code&gt;, changing the number of schedulers online can also change the number of dirty CPU schedulers online. For example, if 12 schedulers and 6 dirty CPU schedulers are online, and &lt;code&gt;system_flag/2&lt;/code&gt; is used to set the number of schedulers online to 6, then the number of dirty CPU schedulers online is automatically decreased by half as well, down to 3. Similarly, the number of dirty CPU schedulers online increases proportionally to increases in the number of schedulers online.</source>
          <target state="translated">&lt;code&gt;&lt;a href=&quot;#system_flag_dirty_cpu_schedulers_online&quot;&gt;dirty schedulers&lt;/a&gt;&lt;/code&gt; をサポートするようにエミュレータが構築されている場合、オンラインでスケジューラの数を変更すると、オンラインでダーティCPUスケジューラの数も変更される可能性があります。たとえば、12個のスケジューラと6個のダーティCPUスケジューラがオンラインで、 &lt;code&gt;system_flag/2&lt;/code&gt; を使用してオンラインのスケジューラ数を6に設定すると、オンラインのダーティCPUスケジューラの数も自動的に半分に減り、3になります。同様に、オンラインのダーティCPUスケジューラの数は、オンラインのスケジューラの数の増加に比例して増加します。</target>
        </trans-unit>
        <trans-unit id="53196a3c7142e79d1e176b567fb18778d22d10f3" translate="yes" xml:space="preserve">
          <source>If the encoding rule option is omitted, &lt;code&gt;ber&lt;/code&gt; is the default.</source>
          <target state="translated">エンコーディングルールオプションを省略した場合、 &lt;code&gt;ber&lt;/code&gt; がデフォルトになります。</target>
        </trans-unit>
        <trans-unit id="b9353bd702a35793ac18305b8482171f21007231" translate="yes" xml:space="preserve">
          <source>If the end of the pattern is reached, the match succeeds and you can retrieve the contents of the variable.</source>
          <target state="translated">パターンの終了に到達した場合は、一致が成功し、変数の内容を取得することができます。</target>
        </trans-unit>
        <trans-unit id="ec86b8e10359d9eb0c69eab5270c60f057cce319" translate="yes" xml:space="preserve">
          <source>If the engine is located in the OpenSSL/LibreSSL installation &lt;code&gt;engines&lt;/code&gt; directory.</source>
          <target state="translated">エンジンがOpenSSL / LibreSSLインストール &lt;code&gt;engines&lt;/code&gt; ディレクトリにある場合。</target>
        </trans-unit>
        <trans-unit id="46c40e2b5cd9693ace2f62de74c9f71bc27ab4c5" translate="yes" xml:space="preserve">
          <source>If the entire log is successfully converted, the function will return &lt;code&gt;ok&lt;/code&gt;. If one of more entries fail to convert, the function will instead return &lt;code&gt;{ok, {NumOK, NumERR}}&lt;/code&gt;, where the counters indicate how many valid and erroneous entries where found. If instead &lt;code&gt;{error, Reason}&lt;/code&gt; is returned, the conversion encountered a fatal error and where either never done of aborted midway.</source>
          <target state="translated">ログ全体が正常に変換されると、関数は &lt;code&gt;ok&lt;/code&gt; を返します。1つ以上のエントリが変換に失敗した場合、関数は代わりに &lt;code&gt;{ok, {NumOK, NumERR}}&lt;/code&gt; ここで、カウンタは、見つかった有効なエントリと誤ったエントリの数を示します。代わりに &lt;code&gt;{error, Reason}&lt;/code&gt; が返された場合、変換で致命的なエラーが発生し、途中で中止されたことはありません。</target>
        </trans-unit>
        <trans-unit id="17edef4a35e3cca0ca8935fe0f2de48f9e5dfe47" translate="yes" xml:space="preserve">
          <source>If the entry is a new subscriber, it will imply that the new subscriber process first will get one message for each already stored dictionary entry, before it and all old subscribers will get this particular entry. The collector process links to and then supervises the subscriber process. If the subscriber process dies it will imply that it gets unregistered as with a normal dict_delete/2.</source>
          <target state="translated">エントリが新しいサブスクライバの場合、新しいサブスクライバプロセスは、それとすべての古いサブスクライバが この特定のエントリを取得する前に、すでに格納されているディクショナリエントリごとに 1 つのメッセージを最初に取得することを意味する。コレクタープロセスは、サブスクライバプロセスにリンクしてから監視する。サブスクライバプロセスが終了した場合、通常の dict_delete/2 と同様に登録解除されることを意味する。</target>
        </trans-unit>
        <trans-unit id="4d245a9827d109c394220e412fd90299a8b7ff0f" translate="yes" xml:space="preserve">
          <source>If the evaluation of &lt;code&gt;Exprs&lt;/code&gt; succeeds without an exception, the patterns &lt;code&gt;Pattern&lt;/code&gt; are sequentially matched against the result in the same way as for a &lt;code&gt;&lt;a href=&quot;#case&quot;&gt;case&lt;/a&gt;&lt;/code&gt; expression, except that if the matching fails, a &lt;code&gt;try_clause&lt;/code&gt; run-time error occurs instead of a &lt;code&gt;case_clause&lt;/code&gt;.</source>
          <target state="translated">評価の場合 &lt;code&gt;Exprs&lt;/code&gt; 例外なく成功し、パターンの &lt;code&gt;Pattern&lt;/code&gt; 順次の場合と同じように、結果と照合された &lt;code&gt;&lt;a href=&quot;#case&quot;&gt;case&lt;/a&gt;&lt;/code&gt; マッチングが失敗した場合、ことを除いて、式 &lt;code&gt;try_clause&lt;/code&gt; ランタイムエラーが代わりに発生 &lt;code&gt;case_clause&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="a094e54489c949e55e10b1bfd099675a9945d8d2" translate="yes" xml:space="preserve">
          <source>If the evaluation of &lt;code&gt;Exprs&lt;/code&gt; succeeds without an exception, the patterns &lt;code&gt;Pattern&lt;/code&gt; are sequentially matched against the result in the same way as for a &lt;code&gt;&lt;a href=&quot;#case&quot;&gt;case&lt;/a&gt;&lt;/code&gt; expression, except that if the matching fails, a &lt;code&gt;try_clause&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">&lt;code&gt;Exprs&lt;/code&gt; の評価が例外なく成功すると、パターン &lt;code&gt;Pattern&lt;/code&gt; は、 &lt;code&gt;&lt;a href=&quot;#case&quot;&gt;case&lt;/a&gt;&lt;/code&gt; 式の場合と同じ方法で結果に対して順次照合されますが、照合が失敗した場合は、 &lt;code&gt;try_clause&lt;/code&gt; ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="1729265d2a1b2d02d46f2b13db7a6628cfce7401" translate="yes" xml:space="preserve">
          <source>If the event handler is added because of a call to &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#add_sup_handler-3&quot;&gt; add_sup_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;InitArgs&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument of these functions.</source>
          <target state="translated">イベントハンドラが原因への呼び出しを追加した場合 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#add_sup_handler-3&quot;&gt; add_sup_handler/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;InitArgs&lt;/code&gt; がある &lt;code&gt;Args&lt;/code&gt; のこれらの関数の引数。</target>
        </trans-unit>
        <trans-unit id="631031b9e342940aba31e2236569e617b51e7128" translate="yes" xml:space="preserve">
          <source>If the event handler is added because of a call to &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#add_sup_handler-3&quot;&gt;add_sup_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;InitArgs&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument of these functions.</source>
          <target state="translated">イベントハンドラが原因への呼び出しを追加した場合 &lt;code&gt;&lt;a href=&quot;#add_handler-3&quot;&gt;add_handler/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#add_sup_handler-3&quot;&gt;add_sup_handler/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;InitArgs&lt;/code&gt; がある &lt;code&gt;Args&lt;/code&gt; のこれらの関数の引数。</target>
        </trans-unit>
        <trans-unit id="72f67e0f506eeca69ed3305947843432edc7a69d" translate="yes" xml:space="preserve">
          <source>If the event handler is deleted because of a call to &lt;code&gt;&lt;a href=&quot;#delete_handler-3&quot;&gt;delete_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt; swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Arg&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument of this function call.</source>
          <target state="translated">イベントハンドラがあるために、コールの削除された場合 &lt;code&gt;&lt;a href=&quot;#delete_handler-3&quot;&gt;delete_handler/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt; swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Arg&lt;/code&gt; がある &lt;code&gt;Args&lt;/code&gt; この関数呼び出しの引数。</target>
        </trans-unit>
        <trans-unit id="3160cb662d43645579ff66ccf206017473a57cb3" translate="yes" xml:space="preserve">
          <source>If the event handler is deleted because of a call to &lt;code&gt;&lt;a href=&quot;#delete_handler-3&quot;&gt;delete_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;, or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;Arg&lt;/code&gt; is the &lt;code&gt;Args&lt;/code&gt; argument of this function call.</source>
          <target state="translated">イベントハンドラがあるために、コールの削除された場合 &lt;code&gt;&lt;a href=&quot;#delete_handler-3&quot;&gt;delete_handler/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 、または &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;Arg&lt;/code&gt; がある &lt;code&gt;Args&lt;/code&gt; この関数呼び出しの引数。</target>
        </trans-unit>
        <trans-unit id="89ab1aecc97fe6f0f9ffea8f0aa54544b441d79d" translate="yes" xml:space="preserve">
          <source>If the event handler is deleted later, the event manager sends a message &lt;code&gt;{gen_event_EXIT,Handler,Reason}&lt;/code&gt; to the calling process. &lt;code&gt;Reason&lt;/code&gt; is one of the following:</source>
          <target state="translated">イベントハンドラーが後で削除された場合、イベントマネージャーはメッセージ &lt;code&gt;{gen_event_EXIT,Handler,Reason}&lt;/code&gt; を呼び出しプロセスに送信します。 &lt;code&gt;Reason&lt;/code&gt; は次のいずれかです。</target>
        </trans-unit>
        <trans-unit id="b5a39103796e2c04d1e2ceb8b092ca0d507d8cca" translate="yes" xml:space="preserve">
          <source>If the event handler replaces another event handler because of a call to &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt; swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;, or because of a &lt;code&gt;swap&lt;/code&gt; return tuple from one of the other callback functions, &lt;code&gt;InitArgs&lt;/code&gt; is a tuple &lt;code&gt;{Args,Term}&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; is the argument provided in the function call/return tuple and &lt;code&gt;Term&lt;/code&gt; is the result of terminating the old event handler, see &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">イベントハンドラが原因の呼び出しの別のイベントハンドラを置き換える場合 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt; swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 、又はための &lt;code&gt;swap&lt;/code&gt; 他のコールバック関数のいずれかからの戻りタプルは、 &lt;code&gt;InitArgs&lt;/code&gt; があるタプル &lt;code&gt;{Args,Term}&lt;/code&gt; 、ここで、 &lt;code&gt;Args&lt;/code&gt; あります関数call / returnタプルおよび &lt;code&gt;Term&lt;/code&gt; で提供される引数は、古いイベントハンドラーを終了した結果です &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="b6a4d7864917b404d52d14fae5596ac8786e5389" translate="yes" xml:space="preserve">
          <source>If the event handler replaces another event handler because of a call to &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt;, or because of a &lt;code&gt;swap&lt;/code&gt; return tuple from one of the other callback functions, &lt;code&gt;InitArgs&lt;/code&gt; is a tuple &lt;code&gt;{Args,Term}&lt;/code&gt;, where &lt;code&gt;Args&lt;/code&gt; is the argument provided in the function call/return tuple and &lt;code&gt;Term&lt;/code&gt; is the result of terminating the old event handler, see &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">イベントハンドラが原因の呼び出しの別のイベントハンドラを置き換える場合 &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 又は &lt;code&gt;&lt;a href=&quot;#swap_sup_handler-3&quot;&gt;swap_sup_handler/3&lt;/a&gt;&lt;/code&gt; 、又はための &lt;code&gt;swap&lt;/code&gt; 他のコールバック関数のいずれかからの戻りタプルは、 &lt;code&gt;InitArgs&lt;/code&gt; があるタプル &lt;code&gt;{Args,Term}&lt;/code&gt; 、ここで、 &lt;code&gt;Args&lt;/code&gt; あります関数呼び出し/戻りタプルで提供される引数と &lt;code&gt;Term&lt;/code&gt; は、古いイベントハンドラーの終了の結果です &lt;code&gt;&lt;a href=&quot;#swap_handler-3&quot;&gt;swap_handler/3&lt;/a&gt;&lt;/code&gt; 参照してください。</target>
        </trans-unit>
        <trans-unit id="3ce21bfa638e6a6dac050034a055b97270608155" translate="yes" xml:space="preserve">
          <source>If the event log is configured to wrap around automatically, records that have arrived to the log and been overwritten when &lt;code&gt;nteventlog&lt;/code&gt; was not running are lost. However, it detects this state and loses no records that are not overwritten.</source>
          <target state="translated">イベントログが自動的にラップアラウンドするように構成されている場合、ログに到着し、 &lt;code&gt;nteventlog&lt;/code&gt; が実行されていないときに上書きされたレコードは失われます。ただし、この状態を検出し、上書きされていないレコードは失われません。</target>
        </trans-unit>
        <trans-unit id="bd74a922c6e5b981bbc80b4da38fda2c75c0b1ea" translate="yes" xml:space="preserve">
          <source>If the event log is configured to wrap around automatically, records that have arrived to the log and been overwritten when &lt;code&gt;nteventlog&lt;/code&gt; was not running are lost. It however detects this state and loses no records that are not overwritten.</source>
          <target state="translated">イベントログが自動的に &lt;code&gt;nteventlog&lt;/code&gt; ように構成されている場合、ログに到着し、nteventlogが実行されていなかったときに上書きされたレコードは失われます。ただし、この状態を検出し、上書きされていないレコードを失うことはありません。</target>
        </trans-unit>
        <trans-unit id="1781a9137364e9b0633c2b37fb076419c90678b9" translate="yes" xml:space="preserve">
          <source>If the event manager is part of a supervision tree, no stop function is needed. The event manager is automatically terminated by its supervisor. Exactly how this is done is defined by a &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; set in the supervisor.</source>
          <target state="translated">イベントマネージャが監視ツリーの一部である場合、停止機能は必要ありません。イベントマネージャは、そのスーパーバイザによって自動的に終了されます。これがどのように行われるかは、スーパーバイザに設定された &lt;code&gt;&lt;a href=&quot;sup_princ#shutdown&quot;&gt;shutdown strategy&lt;/a&gt;&lt;/code&gt; によって正確に定義されます。</target>
        </trans-unit>
        <trans-unit id="23a26a698f7576e3a5781ee1ace5ea565efded8a" translate="yes" xml:space="preserve">
          <source>If the event manager is successfully created, the function returns &lt;code&gt;{ok,Pid}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of the event manager. If a process with the specified &lt;code&gt;EventMgrName&lt;/code&gt; exists already, the function returns &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt;, where &lt;code&gt;Pid&lt;/code&gt; is the pid of that process.</source>
          <target state="translated">イベントマネージャが正常に作成されると、関数は &lt;code&gt;{ok,Pid}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はイベントマネージャのpidです。指定された &lt;code&gt;EventMgrName&lt;/code&gt; を持つプロセスがすでに存在する場合、関数は &lt;code&gt;{error,{already_started,Pid}}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Pid&lt;/code&gt; はそのプロセスのpidです。</target>
        </trans-unit>
        <trans-unit id="85c7349696150a1895889e8faf7c4713894d022f" translate="yes" xml:space="preserve">
          <source>If the exclusive decode function has, for example, the name &lt;code&gt;decode_exclusive&lt;/code&gt; and an ASN.1 encoded message &lt;code&gt;Bin&lt;/code&gt; is to be exclusive decoded, the call is as follows:</source>
          <target state="translated">たとえば、排他的なデコード関数の名前が &lt;code&gt;decode_exclusive&lt;/code&gt; で、ASN.1でエンコードされたメッセージ &lt;code&gt;Bin&lt;/code&gt; を排他的にデコードする場合、呼び出しは次のようになります。</target>
        </trans-unit>
        <trans-unit id="03f0f3b2eabafa60c9e9c721aa1cad9fcc5b78a3" translate="yes" xml:space="preserve">
          <source>If the failed test case belongs to a test case group, the first argument is a tuple &lt;code&gt;{FuncName,GroupName}&lt;/code&gt;, otherwise only the function name.</source>
          <target state="translated">失敗したテストケースがテストケースグループに属している場合、最初の引数はタプル &lt;code&gt;{FuncName,GroupName}&lt;/code&gt; です。それ以外の場合は、関数名のみです。</target>
        </trans-unit>
        <trans-unit id="ae5596ad95475cf2f268aa093acd0a50a12f5551" translate="yes" xml:space="preserve">
          <source>If the file contains source code (as in the example above), it is processed by the &lt;code&gt;epp&lt;/code&gt; preprocessor. This means that you, for example, can use predefined macros (such as &lt;code&gt;?MODULE&lt;/code&gt;) and include directives like the &lt;code&gt;-include_lib&lt;/code&gt; directive. For example, use</source>
          <target state="translated">（上記の例のように）ファイルにソースコードが含まれている場合、そのファイルは &lt;code&gt;epp&lt;/code&gt; プリプロセッサによって処理されます。つまり、たとえば、事前定義されたマクロ（ &lt;code&gt;?MODULE&lt;/code&gt; など）を使用して、 &lt;code&gt;-include_lib&lt;/code&gt; ディレクティブなどのディレクティブを含めることができます。たとえば、</target>
        </trans-unit>
        <trans-unit id="09f7b5f0081b8333cb37ae76ae1513548332cd8c" translate="yes" xml:space="preserve">
          <source>If the file is opened in binary mode, the read bytes are returned in a binary, otherwise in a list.</source>
          <target state="translated">ファイルがバイナリモードで開かれている場合、読み込まれたバイトはバイナリで返され、そうでない場合はリストで返されます。</target>
        </trans-unit>
        <trans-unit id="d43d376c036cd6704fab6602e0a821d2fca0f536" translate="yes" xml:space="preserve">
          <source>If the file is opened with &lt;code&gt;encoding&lt;/code&gt; set to something else than &lt;code&gt;latin1&lt;/code&gt;, each byte written can result in many bytes being written to the file, as the byte range 0..255 can represent anything between one and four bytes depending on value and UTF encoding type.</source>
          <target state="translated">&lt;code&gt;encoding&lt;/code&gt; &lt;code&gt;latin1&lt;/code&gt; 以外に設定してファイルを開いた場合、バイト範囲0..255は値とUTFエンコーディングに応じて1〜4バイトを表すことができるため、書き込まれる各バイトは多くのバイトをファイルに書き込む可能性があります。タイプ。</target>
        </trans-unit>
        <trans-unit id="3ff2942f4038fb71563badd19ea96ee04bc36590" translate="yes" xml:space="preserve">
          <source>If the file is read past &lt;code&gt;eof&lt;/code&gt;, only the remaining bytes are read and returned. If no bytes are read, &lt;code&gt;eof&lt;/code&gt; is returned.</source>
          <target state="translated">ファイルが &lt;code&gt;eof&lt;/code&gt; を超えて読み取られた場合、残りのバイトのみが読み取られて返されます。バイトが読み込まれない場合は、 &lt;code&gt;eof&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="0301143503899c06f595e73d4da8e12a605f082d" translate="yes" xml:space="preserve">
          <source>If the file is specified as an empty string &lt;code&gt;&quot;&quot;&lt;/code&gt;, no file is read or monitored in the future. This emulates the old behavior of not configuring the DNS client when the node is started in short name distributed mode.</source>
          <target state="translated">ファイルが空の文字列 &lt;code&gt;&quot;&quot;&lt;/code&gt; として指定されている場合、今後ファイルの読み取りや監視は行われません。これは、ノードが短い名前の分散モードで起動されたときにDNSクライアントを構成しないという古い動作をエミュレートします。</target>
        </trans-unit>
        <trans-unit id="f524572ea2342154f69f71b644500e15cc9901dc" translate="yes" xml:space="preserve">
          <source>If the file server of this node is not a slave, the file was opened by the file server of this node (this implies that &lt;code&gt;Pid&lt;/code&gt; must be a local pid) and the file is not closed. &lt;code&gt;Filename&lt;/code&gt; is the filename in flat string format.</source>
          <target state="translated">このノードのファイルサーバーがスレーブでない場合、ファイルはこのノードのファイルサーバーによって開かれ（ &lt;code&gt;Pid&lt;/code&gt; はローカルpidでなければならないことを意味します）、ファイルは閉じられません。 &lt;code&gt;Filename&lt;/code&gt; は、フラットストリング形式のファイル名です。</target>
        </trans-unit>
        <trans-unit id="19dad8b9ff6393c913546c9bff544a5e8d858493" translate="yes" xml:space="preserve">
          <source>If the file was opened in binary mode, the read bytes are returned in a binary, otherwise in a list. The list or binary is shorter than the number of bytes requested if end of file was reached.</source>
          <target state="translated">ファイルがバイナリモードで開かれている場合、読み込んだバイトはバイナリで返され、そうでない場合はリストで返されます。ファイルの終端に達した場合、リストまたはバイナリは要求されたバイト数よりも短くなります。</target>
        </trans-unit>
        <trans-unit id="ead416d9e5e17b9f14938d13eb799b54c7ee7032" translate="yes" xml:space="preserve">
          <source>If the file write fails (for example, &lt;code&gt;enospc&lt;/code&gt;), the command is aborted and &lt;code&gt;{error, file_write_error_reason()}&lt;/code&gt; is returned. However, the file is &lt;strong&gt;not&lt;/strong&gt; removed.</source>
          <target state="translated">ファイルの書き込みが失敗した場合（ &lt;code&gt;enospc&lt;/code&gt; など）、コマンドは中止され、 &lt;code&gt;{error, file_write_error_reason()}&lt;/code&gt; が返されます。ただし、ファイルは削除され&lt;strong&gt;ません&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="3f0c09a69dc8ebf1e91578b9796f029369abc850" translate="yes" xml:space="preserve">
          <source>If the filename &lt;code&gt;File&lt;/code&gt; is absolute (possibly after variable substitution), the include file with that name is included. Otherwise, the specified file is searched for in the following directories, and in this order:</source>
          <target state="translated">ファイル名 &lt;code&gt;File&lt;/code&gt; が絶対変数の場合（おそらく変数置換後）、その名前のインクルードファイルが含まれます。それ以外の場合は、指定されたファイルが次のディレクトリでこの順序で検索されます。</target>
        </trans-unit>
        <trans-unit id="f6fdb5791718e9cf14d2a9c0a809646872e636fd" translate="yes" xml:space="preserve">
          <source>If the filter does not match, it returns &lt;code&gt;ignore&lt;/code&gt;, meaning that other filters, or the value of the configuration parameter &lt;code&gt;filter_default&lt;/code&gt;, decide if the event is allowed or not.</source>
          <target state="translated">フィルターが一致しない場合は、 &lt;code&gt;ignore&lt;/code&gt; を返します。つまり、他のフィルター、または構成パラメーター &lt;code&gt;filter_default&lt;/code&gt; の値が、イベントを許可するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="298fc01aae2302d31a30ab2828690b737a94df8b" translate="yes" xml:space="preserve">
          <source>If the filter does not match, it returns &lt;code&gt;ignore&lt;/code&gt;, meaning that other filters, or the value of the configuration parameter &lt;code&gt;filter_default&lt;/code&gt;, will decide if the event is allowed or not.</source>
          <target state="translated">フィルターが一致しない場合は、 &lt;code&gt;ignore&lt;/code&gt; を返します。つまり、他のフィルター、または構成パラメーター &lt;code&gt;filter_default&lt;/code&gt; の値が、イベントを許可するかどうかを決定します。</target>
        </trans-unit>
        <trans-unit id="3e713bc836d6d924cbd200c2e55ce5f9136754b5" translate="yes" xml:space="preserve">
          <source>If the filter function returns &lt;code&gt;ignore&lt;/code&gt;, it means that it did not recognize the log event, and thus leaves to other filters to decide the event's destiny.</source>
          <target state="translated">フィルター関数が &lt;code&gt;ignore&lt;/code&gt; を返す場合、それはログイベントを認識しなかったので、他のフィルターに任せてイベントの運命を決定します。</target>
        </trans-unit>
        <trans-unit id="957041343c23aa2d4654805ac48c48dc4fb915f8" translate="yes" xml:space="preserve">
          <source>If the filter has the form &lt;code&gt;{Key, RegExp, re}&lt;/code&gt;, the report must contain an element with key equal to &lt;code&gt;Key&lt;/code&gt; and the value must match the regular expression &lt;code&gt;RegExp&lt;/code&gt;.</source>
          <target state="translated">フィルターの形式が &lt;code&gt;{Key, RegExp, re}&lt;/code&gt; 場合、レポートには &lt;code&gt;Key&lt;/code&gt; と等しいキーを持つ要素が含まれている必要があり、値は正規表現 &lt;code&gt;RegExp&lt;/code&gt; と一致する必要があります。</target>
        </trans-unit>
        <trans-unit id="6e1184361ce4e087a6b4dd8211b45d80ed4f9e48" translate="yes" xml:space="preserve">
          <source>If the filter matches and &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;log&lt;/code&gt;, the log event is allowed. If the filter matches and &lt;code&gt;Action&lt;/code&gt; is &lt;code&gt;stop&lt;/code&gt;, the log event is stopped.</source>
          <target state="translated">フィルターが一致し、 &lt;code&gt;Action&lt;/code&gt; が &lt;code&gt;log&lt;/code&gt; の場合、ログイベントが許可されます。フィルターが一致し、 &lt;code&gt;Action&lt;/code&gt; が &lt;code&gt;stop&lt;/code&gt; の場合、ログイベントは停止されます。</target>
        </trans-unit>
        <trans-unit id="32e9da768719e8b90b1faba156fc380cf35dffea" translate="yes" xml:space="preserve">
          <source>If the final string is too long, it is truncated according to the value of configuration parameter &lt;code&gt;&lt;a href=&quot;#max_size&quot;&gt;max_size&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">最終的な文字列が長すぎる場合は、構成パラメーター &lt;code&gt;&lt;a href=&quot;#max_size&quot;&gt;max_size&lt;/a&gt;&lt;/code&gt; の値に従って切り捨てられます。</target>
        </trans-unit>
        <trans-unit id="42b76af1133577086d028a4fb0a1a30d07e3d9f8" translate="yes" xml:space="preserve">
          <source>If the flag is set to &lt;code&gt;0&lt;/code&gt;, data is returned as a list of integers. Either use the default buffer or set &lt;code&gt;*rbuf&lt;/code&gt; to point to a larger buffer allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt; erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt;. The buffer is freed automatically after &lt;code&gt;control&lt;/code&gt; has returned.</source>
          <target state="translated">フラグが &lt;code&gt;0&lt;/code&gt; に設定されている場合、データは整数のリストとして返されます。デフォルトのバッファーを使用するか、 &lt;code&gt;*rbuf&lt;/code&gt; を設定して、 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt; erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt; で割り当てられたより大きなバッファーを指すようにします。 &lt;code&gt;control&lt;/code&gt; が戻った後、バッファは自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="f6ebf0a745164970b389f3300cbccd27f4b3b5d3" translate="yes" xml:space="preserve">
          <source>If the flag is set to &lt;code&gt;0&lt;/code&gt;, data is returned as a list of integers. Either use the default buffer or set &lt;code&gt;*rbuf&lt;/code&gt; to point to a larger buffer allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt;erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt;. The buffer is freed automatically after &lt;code&gt;control&lt;/code&gt; has returned.</source>
          <target state="translated">フラグが &lt;code&gt;0&lt;/code&gt; に設定されている場合、データは整数のリストとして返されます。デフォルトのバッファーを使用するか、 &lt;code&gt;*rbuf&lt;/code&gt; を設定して &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc&quot;&gt;erl_driver:driver_alloc&lt;/a&gt;&lt;/code&gt; で割り当てられたより大きなバッファーを指すようにします。 &lt;code&gt;control&lt;/code&gt; が戻ると、バッファーは自動的に解放されます。</target>
        </trans-unit>
        <trans-unit id="8c08f7138ffb7c0800eaee0ee64686780f8678ed" translate="yes" xml:space="preserve">
          <source>If the flag is set to &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt;, a binary is returned. Small binaries can be returned by writing the raw data into the default buffer. A binary can also be returned by setting &lt;code&gt;*rbuf&lt;/code&gt; to point to a binary allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc_binary&quot;&gt; erl_driver:driver_alloc_binary&lt;/a&gt;&lt;/code&gt;. This binary is freed automatically after &lt;code&gt;control&lt;/code&gt; has returned. The driver can retain the binary for &lt;strong&gt;read only&lt;/strong&gt; access with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_binary_inc_refc&quot;&gt; erl_driver:driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; to be freed later with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_free_binary&quot;&gt; erl_driver:driver_free_binary&lt;/a&gt;&lt;/code&gt;. It is never allowed to change the binary after &lt;code&gt;control&lt;/code&gt; has returned. If &lt;code&gt;*rbuf&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt;, an empty list is returned.</source>
          <target state="translated">フラグが &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt; に設定されている場合、バイナリが返されます。生データをデフォルトのバッファに書き込むことで、小さなバイナリを返すことができます。 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc_binary&quot;&gt; erl_driver:driver_alloc_binary&lt;/a&gt;&lt;/code&gt; で割り当てられたバイナリを指すように &lt;code&gt;*rbuf&lt;/code&gt; を設定することによって、バイナリを返すこともできます。このバイナリは、 &lt;code&gt;control&lt;/code&gt; が戻った後に自動的に解放されます。ドライバーは、 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_binary_inc_refc&quot;&gt; erl_driver:driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; を使用して&lt;strong&gt;読み取り専用&lt;/strong&gt;アクセス用にバイナリを保持し、後でerl_driver：driver_free_binaryを使用して解放 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_free_binary&quot;&gt; erl_driver:driver_free_binary&lt;/a&gt;&lt;/code&gt; ます。 &lt;code&gt;control&lt;/code&gt; が戻った後、バイナリを変更することはできません。 &lt;code&gt;*rbuf&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; に設定されている場合&lt;strong&gt;&lt;/strong&gt;、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="3fdf06cbeca702cf9635bd5a2282dbe52c9f9489" translate="yes" xml:space="preserve">
          <source>If the flag is set to &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt;, a binary is returned. Small binaries can be returned by writing the raw data into the default buffer. A binary can also be returned by setting &lt;code&gt;*rbuf&lt;/code&gt; to point to a binary allocated with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc_binary&quot;&gt;erl_driver:driver_alloc_binary&lt;/a&gt;&lt;/code&gt;. This binary is freed automatically after &lt;code&gt;control&lt;/code&gt; has returned. The driver can retain the binary for &lt;strong&gt;read only&lt;/strong&gt; access with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_binary_inc_refc&quot;&gt;erl_driver:driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; to be freed later with &lt;code&gt;&lt;a href=&quot;erl_driver#driver_free_binary&quot;&gt;erl_driver:driver_free_binary&lt;/a&gt;&lt;/code&gt;. It is never allowed to change the binary after &lt;code&gt;control&lt;/code&gt; has returned. If &lt;code&gt;*rbuf&lt;/code&gt; is set to &lt;code&gt;NULL&lt;/code&gt;, an empty list is returned.</source>
          <target state="translated">フラグが &lt;code&gt;PORT_CONTROL_FLAG_BINARY&lt;/code&gt; に設定されている場合、バイナリが返されます。生データをデフォルトのバッファに書き込むことにより、小さなバイナリを返すことができます。 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_alloc_binary&quot;&gt;erl_driver:driver_alloc_binary&lt;/a&gt;&lt;/code&gt; で割り当てられたバイナリを指すように &lt;code&gt;*rbuf&lt;/code&gt; を設定することにより、バイナリを返すこともできます。このバイナリは、 &lt;code&gt;control&lt;/code&gt; が戻ると自動的に解放されます。ドライバーは、 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_binary_inc_refc&quot;&gt;erl_driver:driver_binary_inc_refc&lt;/a&gt;&lt;/code&gt; を使用して&lt;strong&gt;読み取り専用&lt;/strong&gt;アクセス用のバイナリーを保持し、後でerl_driver：driver_free_binaryを使用して解放 &lt;code&gt;&lt;a href=&quot;erl_driver#driver_free_binary&quot;&gt;erl_driver:driver_free_binary&lt;/a&gt;&lt;/code&gt; ます。 &lt;code&gt;control&lt;/code&gt; が戻った後は、バイナリを変更することはできません。 &lt;code&gt;*rbuf&lt;/code&gt; が &lt;code&gt;NULL&lt;/code&gt; に設定されている場合&lt;strong&gt;&lt;/strong&gt;、空のリストが返されます。</target>
        </trans-unit>
        <trans-unit id="ba4d8831063581aeb6c792a1b032f97e23a799b0" translate="yes" xml:space="preserve">
          <source>If the following pattern is applied to a string not beginning with &quot;a&quot; or &quot;b&quot;, it would normally match the empty string at the start of the subject:</source>
          <target state="translated">&quot;a &quot;や &quot;b &quot;で始まらない文字列に以下のパターンを適用した場合、通常は件名の先頭にある空の文字列と一致します。</target>
        </trans-unit>
        <trans-unit id="f145ecc5627d0896817e500b5d377db659310775" translate="yes" xml:space="preserve">
          <source>If the formatter module exports the optional callback function &lt;code&gt;&lt;a href=&quot;logger#FModule:check_config-1&quot;&gt; check_config(FConfig)&lt;/a&gt;&lt;/code&gt;, Logger calls this function when the formatter information is set or modified, to verify the validity of the formatter configuration.</source>
          <target state="translated">フォーマッターモジュールがオプションのコールバック関数 &lt;code&gt;&lt;a href=&quot;logger#FModule:check_config-1&quot;&gt; check_config(FConfig)&lt;/a&gt;&lt;/code&gt; をエクスポートする場合、ロガーは、フォーマッター情報が設定または変更されたときにこの関数を呼び出して、フォーマッター構成の有効性を検証します。</target>
        </trans-unit>
        <trans-unit id="2009a1faa40085a7c2fd996ec540bc12d65d8f07" translate="yes" xml:space="preserve">
          <source>If the formatter module exports the optional callback function &lt;code&gt;&lt;a href=&quot;logger#FModule:check_config-1&quot;&gt;check_config(FConfig)&lt;/a&gt;&lt;/code&gt;, Logger calls this function when the formatter information is set or modified, to verify the validity of the formatter configuration.</source>
          <target state="translated">フォーマッタモジュールがオプションのコールバック関数 &lt;code&gt;&lt;a href=&quot;logger#FModule:check_config-1&quot;&gt;check_config(FConfig)&lt;/a&gt;&lt;/code&gt; をエクスポートする場合、フォーマッタ情報が設定または変更されたときにLoggerがこの関数を呼び出し、フォーマッタ構成の有効性を確認します。</target>
        </trans-unit>
        <trans-unit id="05f7a6a810b002e4a0681949501258c2a927f78c" translate="yes" xml:space="preserve">
          <source>If the fragment option is &lt;code&gt;true&lt;/code&gt;, the URI fragment is returned as part of the parsing result, otherwise it is ignored.</source>
          <target state="translated">フラグメントオプションが &lt;code&gt;true&lt;/code&gt; の場合、URIフラグメントは解析結果の一部として返されます。それ以外の場合は無視されます。</target>
        </trans-unit>
        <trans-unit id="a9f39219b3544f3ad6a57e7c4b45e2e83b08a49c" translate="yes" xml:space="preserve">
          <source>If the fully connected network is not set up properly, try first to increase the value of &lt;code&gt;net_setuptime&lt;/code&gt;.</source>
          <target state="translated">完全に接続されたネットワークが正しく設定されていない場合は、 &lt;code&gt;net_setuptime&lt;/code&gt; の値を増やしてみてください。</target>
        </trans-unit>
        <trans-unit id="e9be0c3ab255377067e7c9ca15639a8fa64c8dbb" translate="yes" xml:space="preserve">
          <source>If the fun/3 is used, it is called when the actual authentication occurs and may therefore return dynamic data like time, remote ip etc.</source>
          <target state="translated">fun/3が使用されている場合、実際の認証が発生した時に呼び出され、時間やリモートIPなどの動的なデータを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="1a6e0071d7a3ba398410b3a04cc87132cfab9e23" translate="yes" xml:space="preserve">
          <source>If the fun/3 or fun/4 is used, it is called when the actual authentication occurs and may therefore return dynamic data like time, remote ip etc.</source>
          <target state="translated">fun/3 または fun/4 が使用されている場合、実際の認証が発生した時に呼び出され、時間やリモートIPなどの動的なデータを返すことがあります。</target>
        </trans-unit>
        <trans-unit id="a10d9917bf561ed6546055b4ad6ae668ede9a486" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;mnesia:table_info/2&lt;/code&gt; is started in the activity context of module &lt;code&gt;mnesia_frag&lt;/code&gt;, information of several new items can be obtained:</source>
          <target state="translated">関数 &lt;code&gt;mnesia:table_info/2&lt;/code&gt; がモジュール &lt;code&gt;mnesia_frag&lt;/code&gt; のアクティビティコンテキストで開始されると、いくつかの新しいアイテムの情報を取得できます：</target>
        </trans-unit>
        <trans-unit id="b7b2e6d233f123be817d60a836703d289792c0af" translate="yes" xml:space="preserve">
          <source>If the function &lt;code&gt;print_name/1&lt;/code&gt;, and so on, had been interface functions, the situation would have been different, as you do not want the user of the interface to know about the internal data representation.</source>
          <target state="translated">関数 &lt;code&gt;print_name/1&lt;/code&gt; などがインターフェイス関数であった場合、インターフェイスのユーザーに内部データ表現について知らせたくないため、状況は異なります。</target>
        </trans-unit>
        <trans-unit id="ac91618962c7d06d3c9f00caac895bd89a410ca3" translate="yes" xml:space="preserve">
          <source>If the function is called, it will be called again with &lt;code&gt;undo&lt;/code&gt;, or with &lt;code&gt;set&lt;/code&gt; as first argument.</source>
          <target state="translated">関数が呼び出されると、 &lt;code&gt;undo&lt;/code&gt; または最初の引数として &lt;code&gt;set&lt;/code&gt; を使用して、再度呼び出されます。</target>
        </trans-unit>
        <trans-unit id="40c262c2c2a844d0cf26a7433449f15feea3fd0e" translate="yes" xml:space="preserve">
          <source>If the function is found, the function clauses are scanned sequentially until a clause is found that fulfills both of the following two conditions:</source>
          <target state="translated">関数が見つかった場合は、以下の2つの条件の両方を満たす節が見つかるまで、関数節を順次スキャンしていきます。</target>
        </trans-unit>
        <trans-unit id="c5c83cab902e2b61262a72c526eeaa77228c4460" translate="yes" xml:space="preserve">
          <source>If the function is rewritten as follows, the compiler is free to rearrange the clauses:</source>
          <target state="translated">関数を以下のように書き換えれば、コンパイラは自由に節を並べ替えることができます。</target>
        </trans-unit>
        <trans-unit id="b63119293c0f8660be248a19b2479210b58e3c5a" translate="yes" xml:space="preserve">
          <source>If the function returns &lt;code&gt;ignore&lt;/code&gt;, then it is assumed that either:</source>
          <target state="translated">関数が &lt;code&gt;ignore&lt;/code&gt; を返す場合、次のいずれかが想定されます。</target>
        </trans-unit>
        <trans-unit id="d3d840a1e8e533a047b65414d5bcef0d60c4bcbd" translate="yes" xml:space="preserve">
          <source>If the function returns &lt;code&gt;{cancel, Reason}&lt;/code&gt;, this means the transport module decided not to send the message. This is &lt;strong&gt;not&lt;/strong&gt; an error. No error messages will be issued and no error counters incremented. What actions this will result in depends on what kind of message was sent.</source>
          <target state="translated">関数が &lt;code&gt;{cancel, Reason}&lt;/code&gt; 返す場合、これはトランスポートモジュールがメッセージを送信しないことを決定したことを意味します。これはエラーではあり&lt;strong&gt;ません&lt;/strong&gt;。エラーメッセージは発行されず、エラーカウンターは増加しません。これによりどのようなアクションが発生するかは、送信されたメッセージの種類によって異なります。</target>
        </trans-unit>
        <trans-unit id="7fa5ac3ae4df99fa5b9b2dd8db96506aecf3fefc" translate="yes" xml:space="preserve">
          <source>If the function returns &lt;code&gt;{error,Reason}&lt;/code&gt;, the ongoing upgrade fails and rolls back to the old release.</source>
          <target state="translated">関数が &lt;code&gt;{error,Reason}&lt;/code&gt; 返す場合、進行中のアップグレードは失敗し、古いリリースにロールバックします。</target>
        </trans-unit>
        <trans-unit id="cace8ed5fbcae8411e61d141c38b3af395942b38" translate="yes" xml:space="preserve">
          <source>If the function returns a failure &lt;code&gt;Reason&lt;/code&gt;, the ongoing upgrade fails and rolls back to the old release. Note that &lt;code&gt;Reason&lt;/code&gt; can not be an &lt;code&gt;{ok,_,_}&lt;/code&gt; tuple since that will be regarded as a &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; tuple, and that a tuple matching &lt;code&gt;{ok,_}&lt;/code&gt; is an also invalid failure &lt;code&gt;Reason&lt;/code&gt;. It is recommended to use an atom as &lt;code&gt;Reason&lt;/code&gt; since it will be wrapped in an &lt;code&gt;{error,Reason}&lt;/code&gt; tuple.</source>
          <target state="translated">関数が失敗 &lt;code&gt;Reason&lt;/code&gt; を返した場合、進行中のアップグレードは失敗し、古いリリースにロールバックします。 &lt;code&gt;Reason&lt;/code&gt; は &lt;code&gt;{ok,_,_}&lt;/code&gt; タプルにはならないことに注意してください。これは、 &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; タプルと見なされるためです。また &lt;code&gt;{ok,_}&lt;/code&gt; 一致するタプルも無効な失敗 &lt;code&gt;Reason&lt;/code&gt; です。アトムは &lt;code&gt;{error,Reason}&lt;/code&gt; タプルでラップされるため、 &lt;code&gt;Reason&lt;/code&gt; としてアトムを使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="c37aef2f6cca5a5ce8aa9a711a7c69aab7ee274a" translate="yes" xml:space="preserve">
          <source>If the function returns a failure &lt;code&gt;Reason&lt;/code&gt;, the ongoing upgrade fails and rolls back to the old release. Note that &lt;code&gt;Reason&lt;/code&gt; cannot be an &lt;code&gt;{ok,_,_}&lt;/code&gt; tuple since that will be regarded as a &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; tuple, and that a tuple matching &lt;code&gt;{ok,_}&lt;/code&gt; is an also invalid failure &lt;code&gt;Reason&lt;/code&gt;. It is recommended to use an atom as &lt;code&gt;Reason&lt;/code&gt; since it will be wrapped in an &lt;code&gt;{error,Reason}&lt;/code&gt; tuple.</source>
          <target state="translated">関数が失敗の &lt;code&gt;Reason&lt;/code&gt; 返す場合、進行中のアップグレードは失敗し、古いリリースにロールバックします。 &lt;code&gt;Reason&lt;/code&gt; を &lt;code&gt;{ok,_,_}&lt;/code&gt; タプルにすることはできません。これは、 &lt;code&gt;{ok,NewState,NewData}&lt;/code&gt; タプルと見なされるためです。また &lt;code&gt;{ok,_}&lt;/code&gt; 一致するタプルも無効な失敗 &lt;code&gt;Reason&lt;/code&gt; であることに注意してください。アトムは &lt;code&gt;{error,Reason}&lt;/code&gt; タプルでラップされるため、 &lt;code&gt;Reason&lt;/code&gt; として使用することをお勧めします。</target>
        </trans-unit>
        <trans-unit id="23b279a0456aa090aac1cc8d9973e0efdd61b891" translate="yes" xml:space="preserve">
          <source>If the function returns anything else, the test case is considered successful. The return value always gets printed in the test case log file.</source>
          <target state="translated">関数が何か他のものを返すと、テストケースは成功したとみなされます。戻り値は常にテストケースのログファイルに出力されます。</target>
        </trans-unit>
        <trans-unit id="f7a01fb7804d1dc8b9d59f7e2487cb33130c4689" translate="yes" xml:space="preserve">
          <source>If the functionality of a long-running NIF can be split so that its work can be achieved through a series of shorter NIF calls, the application has two options:</source>
          <target state="translated">長く実行されているNIFの機能を分割して、より短いNIFの呼び出しで作業を行うことができるようにするには、アプリケーションには2つのオプションがあります。</target>
        </trans-unit>
        <trans-unit id="ba5aec2652bfb4fd0698f0092b5faec8c5e7749c" translate="yes" xml:space="preserve">
          <source>If the given directory has a subdirectory named &lt;code&gt;ebin&lt;/code&gt;, modules (BEAM files) are searched for in that directory, otherwise modules are searched for in the given directory.</source>
          <target state="translated">指定されたディレクトリに &lt;code&gt;ebin&lt;/code&gt; という名前のサブディレクトリがある場合、モジュール（BEAMファイル）はそのディレクトリで検索されます。それ以外の場合、モジュールは指定されたディレクトリで検索されます。</target>
        </trans-unit>
        <trans-unit id="206b9b6e0e97d510493a5ac088ad8e22427aae29" translate="yes" xml:space="preserve">
          <source>If the given directory has a subdirectory named &lt;code&gt;lib&lt;/code&gt;, the directories in that directory are assumed to be application directories, otherwise all subdirectories of the given directory are assumed to be application directories. If there are several versions of some application, the one with the highest version is chosen.</source>
          <target state="translated">指定されたディレクトリに &lt;code&gt;lib&lt;/code&gt; というサブディレクトリがある場合、そのディレクトリ内のディレクトリはアプリケーションディレクトリと見なされます。それ以外の場合、指定されたディレクトリのすべてのサブディレクトリはアプリケーションディレクトリと見なされます。アプリケーションのバージョンが複数ある場合は、最も高いバージョンのものが選択されます。</target>
        </trans-unit>
        <trans-unit id="33fb4bc732c4bac52e2f3ecc8dc02b6458e5f64a" translate="yes" xml:space="preserve">
          <source>If the global name server fails to connect nodes (&lt;code&gt;N1&lt;/code&gt; and &lt;code&gt;N3&lt;/code&gt; in the example), a warning event is sent to the error logger. The presence of such an event does not exclude the nodes to connect later (you can, for example, try command &lt;code&gt;rpc:call(N1, net_adm, ping, [N2])&lt;/code&gt; in the Erlang shell), but it indicates a network problem.</source>
          <target state="translated">グローバルネームサーバーがノード（例では &lt;code&gt;N1&lt;/code&gt; と &lt;code&gt;N3&lt;/code&gt; ）の接続に失敗すると、警告イベントがエラーロガーに送信されます。そのようなイベントが存在しても、後で接続するノードは除外されません（たとえば、Erlangシェルでコマンド &lt;code&gt;rpc:call(N1, net_adm, ping, [N2])&lt;/code&gt; を試すことができます）が、ネットワークの問題を示しています。</target>
        </trans-unit>
        <trans-unit id="90420c92850a1634589e73fa3152ae2df519947e" translate="yes" xml:space="preserve">
          <source>If the guard test &lt;code&gt;is_integer(Int)&lt;/code&gt; succeeds, the fourth clause is executed.</source>
          <target state="translated">ガードテスト &lt;code&gt;is_integer(Int)&lt;/code&gt; が成功すると、4番目の句が実行されます。</target>
        </trans-unit>
        <trans-unit id="51156ed0f0b60bdec0db2a3c5c342e77e9337761" translate="yes" xml:space="preserve">
          <source>If the guard test fails, the input value is compared to &lt;code&gt;four&lt;/code&gt;, &lt;code&gt;five&lt;/code&gt;, and &lt;code&gt;six&lt;/code&gt;, and the appropriate clause is selected. (There is a &lt;code&gt;function_clause&lt;/code&gt; exception if none of the values matched.)</source>
          <target state="translated">ガードテストが失敗した場合、入力値が比較される &lt;code&gt;four&lt;/code&gt; 、 &lt;code&gt;five&lt;/code&gt; 、及び &lt;code&gt;six&lt;/code&gt; 、及び適切な句が選択されます。（一致する値がない場合は、 &lt;code&gt;function_clause&lt;/code&gt; 例外があります。）</target>
        </trans-unit>
        <trans-unit id="042ae23e884f62c0355d18895948d09799091a5c" translate="yes" xml:space="preserve">
          <source>If the handler is meant to replace the default handler, the Kernel's default handler have to be disabled before the new handler is added. A &lt;code&gt;sys.config&lt;/code&gt; file that disables the Kernel handler and adds a custom handler could look like this:</source>
          <target state="translated">ハンドラーがデフォルトハンドラーを置き換えることを目的としている場合、新しいハンドラーを追加する前に、カーネルのデフォルトハンドラーを無効にする必要があります。 &lt;code&gt;sys.config&lt;/code&gt; のカーネルハンドラを無効にして、次のようになりますカスタムハンドラを追加したファイル：</target>
        </trans-unit>
        <trans-unit id="65f1827df55837b13a3b7ed59d4d8ea4a1983d32" translate="yes" xml:space="preserve">
          <source>If the handler is terminated, it restarts automatically after a delay specified in milliseconds. The value &lt;code&gt;infinity&lt;/code&gt; prevents restarts.</source>
          <target state="translated">ハンドラーが終了した場合、ミリ秒単位で指定された遅延後に自動的に再起動します。値 &lt;code&gt;infinity&lt;/code&gt; は再起動を防ぎます。</target>
        </trans-unit>
        <trans-unit id="b7ef0ec4d5b98a48302f9d89b544d31dce7e98f5" translate="yes" xml:space="preserve">
          <source>If the handler process is terminated because of overload, it prints information about it in the log. It also prints information about when a restart has taken place, and the handler is back in action.</source>
          <target state="translated">ハンドラプロセスが過負荷のために終了した場合、その情報をログに出力します。また、いつ再起動が行われ、ハンドラが動作を再開したかについての情報も表示します。</target>
        </trans-unit>
        <trans-unit id="71ca4e1b2a57423c539bf11275ee92c1598c8e04" translate="yes" xml:space="preserve">
          <source>If the host has many network interfaces, this option specifies which one to listen on.</source>
          <target state="translated">ホストが多くのネットワークインターフェースを持っている場合、このオプションはどのネットワークインターフェースをリッスンするかを指定します。</target>
        </trans-unit>
        <trans-unit id="5938c2bcb45adfa6db096780d07c1f69ca15570f" translate="yes" xml:space="preserve">
          <source>If the host has many network interfaces, this option specifies which one to use.</source>
          <target state="translated">ホストが多くのネットワークインターフェースを持っている場合、このオプションはどのネットワークインターフェースを使用するかを指定します。</target>
        </trans-unit>
        <trans-unit id="7a3654ae9fae9da43a3b1501da91842a28524e6b" translate="yes" xml:space="preserve">
          <source>If the included application itself contains included applications, instead the &lt;code&gt;{mod, {application_starter, [Module,StartArgs]}}&lt;/code&gt; option must be included.</source>
          <target state="translated">含まれているアプリケーション自体に含まれているアプリケーションが含まれている場合は、代わりに &lt;code&gt;{mod, {application_starter, [Module,StartArgs]}}&lt;/code&gt; オプションを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="93280124390abf78f821c80eb86f0bf50631ec9d" translate="yes" xml:space="preserve">
          <source>If the initial call is to one of the system-defined behaviors such as &lt;code&gt;gen_server&lt;/code&gt; or &lt;code&gt;gen_event&lt;/code&gt;, it is translated to more useful information. If a &lt;code&gt;gen_server&lt;/code&gt; is spawned, the returned &lt;code&gt;Module&lt;/code&gt; is the name of the callback module and &lt;code&gt;Function&lt;/code&gt; is &lt;code&gt;init&lt;/code&gt; (the function that initiates the new server).</source>
          <target state="translated">最初の呼び出しが &lt;code&gt;gen_server&lt;/code&gt; や &lt;code&gt;gen_event&lt;/code&gt; などのシステム定義の動作の1つである場合、それはより有用な情報に変換されます。場合 &lt;code&gt;gen_server&lt;/code&gt; が起動され、返された &lt;code&gt;Module&lt;/code&gt; 、コールバックモジュールの名前である &lt;code&gt;Function&lt;/code&gt; れる &lt;code&gt;init&lt;/code&gt; （機能を開始新しいサーバーという）。</target>
        </trans-unit>
        <trans-unit id="e36a8cae40a2ccda598cbf83afe268a5c720aa0e" translate="yes" xml:space="preserve">
          <source>If the initial encode of the outgoing request fails, then the request process fails and &lt;code&gt;{error,encode}&lt;/code&gt; is returned.</source>
          <target state="translated">発信リクエストの初期エンコードが失敗した場合、リクエストプロセスは失敗し、 &lt;code&gt;{error,encode}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="512a1cbc51d5459f85caaea2fd4bfade04f37668" translate="yes" xml:space="preserve">
          <source>If the initialization fails, the function is to return &lt;code&gt;{error,Error}&lt;/code&gt;, where &lt;code&gt;Error&lt;/code&gt; is any term, or &lt;code&gt;ignore&lt;/code&gt;.</source>
          <target state="translated">初期化が失敗した場合、関数は &lt;code&gt;{error,Error}&lt;/code&gt; を返します。ここで、 &lt;code&gt;Error&lt;/code&gt; は任意の項であるか、 &lt;code&gt;ignore&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="4efffcc1b527bd1b225e810cb600a2ae77401619" translate="yes" xml:space="preserve">
          <source>If the initialization fails, the function is to return &lt;code&gt;{stop,Reason}&lt;/code&gt;, where &lt;code&gt;Reason&lt;/code&gt; is any term, or &lt;code&gt;ignore&lt;/code&gt;.</source>
          <target state="translated">初期化が失敗した場合、関数は &lt;code&gt;{stop,Reason}&lt;/code&gt; （ &lt;code&gt;Reason&lt;/code&gt; は任意の項）を返すか、 &lt;code&gt;ignore&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="9346621e797dd1360944a672ab82ead28612c984" translate="yes" xml:space="preserve">
          <source>If the initialization is successful, the function is to return &lt;code&gt;{ok,State}&lt;/code&gt;, &lt;code&gt;{ok,State,Timeout}&lt;/code&gt;, or &lt;code&gt;{ok,State,hibernate}&lt;/code&gt;, where &lt;code&gt;State&lt;/code&gt; is the internal state of the &lt;code&gt;gen_server&lt;/code&gt; process.</source>
          <target state="translated">初期化が成功した場合、関数は &lt;code&gt;{ok,State}&lt;/code&gt; 、 &lt;code&gt;{ok,State,Timeout}&lt;/code&gt; 、または &lt;code&gt;{ok,State,hibernate}&lt;/code&gt; &lt;code&gt;gen_server&lt;/code&gt; ます。ここで、 &lt;code&gt;State&lt;/code&gt; はgen_serverプロセスの内部状態です。</target>
        </trans-unit>
        <trans-unit id="fc28d6116f22c2a3f33906970ce46ac4053da35d" translate="yes" xml:space="preserve">
          <source>If the input encoding is not UTF-8, an error tuple is returned.</source>
          <target state="translated">入力エンコーディングがUTF-8でない場合は、エラータプルを返します。</target>
        </trans-unit>
        <trans-unit id="eddc615bd88d8608ab31b9841323633dc12870aa" translate="yes" xml:space="preserve">
          <source>If the installation fails, the system can be rebooted. The old release version is then automatically used.</source>
          <target state="translated">インストールに失敗した場合は、システムを再起動することができます。その後、古いリリースバージョンが自動的に使用されます。</target>
        </trans-unit>
        <trans-unit id="c0e9d4940ae270a2841d572606f563a099b85e09" translate="yes" xml:space="preserve">
          <source>If the installation succeeds, the new version is made the default version, which is to now be used if there is a system reboot.</source>
          <target state="translated">インストールに成功した場合、新しいバージョンがデフォルトバージョンになり、システムの再起動時に使用されるようになります。</target>
        </trans-unit>
        <trans-unit id="08dbb0e86d47275a0a4e636be8892780b15448e3" translate="yes" xml:space="preserve">
          <source>If the instruction appears after instruction &lt;code&gt;point_of_no_return&lt;/code&gt; and the function call fails, the system is restarted.</source>
          <target state="translated">命令が &lt;code&gt;point_of_no_return&lt;/code&gt; 命令の後に表示され、関数呼び出しが失敗した場合、システムが再起動されます。</target>
        </trans-unit>
        <trans-unit id="efab2c6cbaff99e6149cda9413164011c49b633d" translate="yes" xml:space="preserve">
          <source>If the instruction appears before instruction &lt;code&gt;point_of_no_return&lt;/code&gt;, a failure is caught. &lt;code&gt;&lt;a href=&quot;release_handler#install_release-1&quot;&gt;release_handler:install_release/1&lt;/a&gt;&lt;/code&gt; then returns &lt;code&gt;{error,{'EXIT',Reason}}&lt;/code&gt;, unless &lt;code&gt;{error,Error}&lt;/code&gt; is thrown or returned. Then it returns &lt;code&gt;{error,Error}&lt;/code&gt;.</source>
          <target state="translated">命令が &lt;code&gt;point_of_no_return&lt;/code&gt; 命令の前にある場合、失敗がキャッチされます。次に、 &lt;code&gt;{error,Error}&lt;/code&gt; がスローまたは返されない限り &lt;code&gt;{error,{'EXIT',Reason}}&lt;/code&gt; &lt;code&gt;&lt;a href=&quot;release_handler#install_release-1&quot;&gt;release_handler:install_release/1&lt;/a&gt;&lt;/code&gt; は{error、{'EXIT'、Reason}}を返します。次に、 &lt;code&gt;{error,Error}&lt;/code&gt; 返します。</target>
        </trans-unit>
        <trans-unit id="6accd78db997b4f0cc8c3eb17cc0cfe9969dd581" translate="yes" xml:space="preserve">
          <source>If the instrumentation functions communicate with UNIX processes, it might be a good idea to use a special sub-agent. This sub-agent sends the SNMP request to the other process in one packet in order to minimize context switches. For example, if a whole MIB is implemented on the C level in UNIX, but you still want to use the Erlang SNMP tool, then you may have one special sub-agent, which sends the variables in the request as a single operation down to C.</source>
          <target state="translated">計装機能がUNIXプロセスと通信する場合、特別なサブエージェントを使用するのが良いでしょう。このサブエージェントはコンテキストスイッチを最小限にするために、SNMPリクエストを1つのパケットで他のプロセスに送ります。例えば、MIB全体がUNIXのCレベルで実装されていて、それでもErlangのSNMPツールを使いたい場合、特別なサブエージェントを1つ持っていて、リクエストの中の変数を1つの操作としてCに送ることができます。</target>
        </trans-unit>
        <trans-unit id="6073ddc2f6ff51455fef10943643ff33d4a41b31" translate="yes" xml:space="preserve">
          <source>If the key attribute is bound in a pattern, the match operation is efficient. However, if the key attribute in a pattern is given as &lt;code&gt;'_'&lt;/code&gt; or &lt;code&gt;'$1'&lt;/code&gt;, the whole &lt;code&gt;employee&lt;/code&gt; table must be searched for records that match. Hence if the table is large, this can become a time-consuming operation, but it can be remedied with indexes (see &lt;code&gt;&lt;a href=&quot;mnesia_chap5#indexing&quot;&gt;Indexing&lt;/a&gt;&lt;/code&gt;) if the function &lt;code&gt;&lt;a href=&quot;mnesia#match_object-1&quot;&gt;mnesia:match_object&lt;/a&gt;&lt;/code&gt; is used.</source>
          <target state="translated">キー属性がパターンでバインドされている場合、一致操作は効率的です。ただし、パターンのキー属性が &lt;code&gt;'_'&lt;/code&gt; または &lt;code&gt;'$1'&lt;/code&gt; として指定されている場合、 &lt;code&gt;employee&lt;/code&gt; テーブル全体で一致するレコードを検索する必要があります。したがって、テーブルが大きい場合、これは時間のかかる操作になる可能性がありますが、関数 &lt;code&gt;&lt;a href=&quot;mnesia#match_object-1&quot;&gt;mnesia:match_object&lt;/a&gt;&lt;/code&gt; が使用されている場合は、 &lt;code&gt;&lt;a href=&quot;mnesia_chap5#indexing&quot;&gt;Indexing&lt;/a&gt;&lt;/code&gt; 使用して修正できます（インデックス作成を参照）。</target>
        </trans-unit>
        <trans-unit id="702da889833ee1dc6797c2ff9a6559f2d21f93ff" translate="yes" xml:space="preserve">
          <source>If the key is specified in the pattern, the match is very efficient. If the key is not specified, that is, if it is a variable or an underscore, the entire table must be searched. The search time can be substantial if the table is very large.</source>
          <target state="translated">パターンの中でキーが指定されている場合は、非常に効率的にマッチします。キーが指定されていない場合、つまり変数やアンダースコアの場合は、テーブル全体を検索しなければなりません。テーブルが非常に大きい場合、検索時間はかなりのものになります。</target>
        </trans-unit>
        <trans-unit id="006f97d543b8ad5e428fa64fac1606142a9e3339" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is bound, the match specification is applied to all objects of the table with the correct key(s). If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is unbound, the match specification is applied to all objects of the table, &lt;code&gt;N&lt;/code&gt; objects at a time, until at least one object matches or the end of the table is reached. The default, indicated by giving &lt;code&gt;N&lt;/code&gt; the value &lt;code&gt;default&lt;/code&gt;, is to let the number of objects vary depending on the sizes of the objects. All objects with the same key are always handled at the same time, which implies that the match specification can be applied to more than N objects.</source>
          <target state="translated">keypos'th要素場合 &lt;code&gt;MatchSpec&lt;/code&gt; が結合され、一致仕様は、正しいキー（S）を持つテーブルのすべてのオブジェクトに適用されます。 keypos'th要素場合 &lt;code&gt;MatchSpec&lt;/code&gt; が未結合である、マッチ仕様がテーブルのすべてのオブジェクトに適用され、 &lt;code&gt;N&lt;/code&gt; は、少なくとも一つのオブジェクトの一致またはテーブルの端に到達するまで、一度にオブジェクト。 &lt;code&gt;N&lt;/code&gt; に &lt;code&gt;default&lt;/code&gt; という値を与えることで示されるデフォルトは、オブジェクトのサイズに応じてオブジェクトの数を変化させることです。同じキーを持つすべてのオブジェクトは常に同時に処理されます。これは、Nを超えるオブジェクトに一致仕様を適用できることを意味します。</target>
        </trans-unit>
        <trans-unit id="5b16233e004fe373963364905dc9a2ad762556f0" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is bound, the match specification is applied to the objects with the correct key(s) only.</source>
          <target state="translated">keypos'th要素場合 &lt;code&gt;MatchSpec&lt;/code&gt; が結合され、一致仕様は、正しいキー（S）を持つオブジェクトに適用されます。</target>
        </trans-unit>
        <trans-unit id="f90ff4fedc7cf136ced2894c42e307fbd5a5c73b" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;MatchSpec&lt;/code&gt; is unbound, the match specification is applied to all objects of the table. If the keypos'th element is bound, the match specification is applied to the objects with the correct key(s) only.</source>
          <target state="translated">keypos'th要素場合 &lt;code&gt;MatchSpec&lt;/code&gt; が未結合である、マッチ仕様はテーブルのすべてのオブジェクトに適用されます。keyposの要素がバインドされている場合、一致仕様は正しいキーのみを持つオブジェクトに適用されます。</target>
        </trans-unit>
        <trans-unit id="c802fc2a3fde97f62fdbabfc7b66189e18b5dfc7" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, all table objects are matched. If the keypos'th element is unbound, all table objects are matched, &lt;code&gt;N&lt;/code&gt; objects at a time, until at least one object matches or the end of the table is reached. The default, indicated by giving &lt;code&gt;N&lt;/code&gt; the value &lt;code&gt;default&lt;/code&gt;, is to let the number of objects vary depending on the sizes of the objects. All matching objects with the same key are always returned in the same reply, which implies that more than N objects can sometimes be returned.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; のkeypos番目の要素がバインドされている場合、すべてのテーブルオブジェクトが一致します。 keyposの要素がバインドされていない場合、少なくとも1つのオブジェクトが一致するか、テーブルの最後に到達するまで、一度に &lt;code&gt;N&lt;/code&gt; 個のオブジェクトがすべてのテーブルオブジェクトと一致します。 &lt;code&gt;N&lt;/code&gt; に &lt;code&gt;default&lt;/code&gt; という値を与えることで示されるデフォルトは、オブジェクトのサイズに応じてオブジェクトの数を変化させることです。同じキーを持つすべての一致するオブジェクトは、常に同じ応答で返されます。これは、Nを超えるオブジェクトが返される場合があることを意味します。</target>
        </trans-unit>
        <trans-unit id="ee8399b71f2614d1c169eead97f1d70700fb4b6e" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, all table objects are matched. If the keypos'th element is unbound, all table objects are matched, &lt;code&gt;N&lt;/code&gt; objects at a time, until at least one object matches or the end of the table is reached. The default, indicated by giving &lt;code&gt;N&lt;/code&gt; the value &lt;code&gt;default&lt;/code&gt;, is to let the number of objects vary depending on the sizes of the objects. All objects with the same key are always matched at the same time, which implies that more than N objects can sometimes be matched.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; のkeypos番目の要素がバインドされている場合、すべてのテーブルオブジェクトが一致します。keyposの要素がバインドされていない場合、少なくとも1つのオブジェクトが一致するか、テーブルの最後に到達するまで、一度に &lt;code&gt;N&lt;/code&gt; 個のオブジェクトがすべてのテーブルオブジェクトと一致します。 &lt;code&gt;N&lt;/code&gt; に &lt;code&gt;default&lt;/code&gt; という値を与えることで示されるデフォルトは、オブジェクトのサイズに応じてオブジェクトの数を変化させることです。同じキーを持つすべてのオブジェクトは常に同時に照合されます。これは、Nを超えるオブジェクトが照合される場合があることを意味します。</target>
        </trans-unit>
        <trans-unit id="81cd44a63c897e4a4fbbf303d633ae129d55b04f" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, only the objects with the correct key are matched.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; のkeypos番目の要素がバインドされている場合、正しいキーを持つオブジェクトのみが一致します。</target>
        </trans-unit>
        <trans-unit id="519fdb3cbbeb8df2c304203d27f11912d501b21d" translate="yes" xml:space="preserve">
          <source>If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is unbound, all table objects are matched. If the keypos'th element of &lt;code&gt;Pattern&lt;/code&gt; is bound, only the objects with the correct key are matched.</source>
          <target state="translated">&lt;code&gt;Pattern&lt;/code&gt; のkeypos番目の要素がバインドされていない場合、すべてのテーブルオブジェクトが一致します。 &lt;code&gt;Pattern&lt;/code&gt; のkeypos番目の要素がバインドされている場合、正しいキーを持つオブジェクトのみが一致します。</target>
        </trans-unit>
        <trans-unit id="56e84a693998be360a017f2de3532689d94a7f87" translate="yes" xml:space="preserve">
          <source>If the last expression of a function body is a function call, a &lt;strong&gt;tail recursive&lt;/strong&gt; call is done. This is to ensure that no system resources, for example, call stack, are consumed. This means that an infinite loop can be done if it uses tail-recursive calls.</source>
          <target state="translated">関数本体の最後の式が関数呼び出しの場合、&lt;strong&gt;末尾再帰&lt;/strong&gt;呼び出しが行われます。これは、コールスタックなどのシステムリソースが消費されないようにするためです。つまり、末尾再帰呼び出しを使用すると、無限ループが発生する可能性があります。</target>
        </trans-unit>
        <trans-unit id="9ae06ba70f228c8b154f39f0df23503609bcb3bd" translate="yes" xml:space="preserve">
          <source>If the length of the message queue grows larger than this threshold, a flush (delete) operation takes place. To flush events, the handler discards the messages in the message queue by receiving them in a loop without logging. Client processes waiting for a response from a synchronous log request receive a reply from the handler indicating that the request is dropped. The handler process increases its priority during the flush loop to make sure that no new events are received during the operation. Notice that after the flush operation is performed, the handler prints information in the log about how many events have been deleted.</source>
          <target state="translated">メッセージキューの長さがこのしきい値よりも大きくなると、フラッシュ(削除)操作が行われます。イベントをフラッシュするために、ハンドラはメッセージキュー内のメッセージをログを記録せずにループで受信して破棄します。同期ログ要求からの応答を待っているクライアントプロセスは、ハンドラから要求が取り下げられたことを示す応答を受け取ります。ハンドラプロセスは、操作中に新しいイベントが受信されないことを確認するために、フラッシュループ中に優先度を上げます。フラッシュ操作が実行された後、ハンドラは削除されたイベントの数についての情報をログに表示することに注意してください。</target>
        </trans-unit>
        <trans-unit id="d10dfdc12d1915667ccceb0a8869e7352174a1a5" translate="yes" xml:space="preserve">
          <source>If the level for &lt;code&gt;mymodule&lt;/code&gt; is now set to &lt;code&gt;debug&lt;/code&gt;, then debug events from this module will be logged by the handler &lt;code&gt;h2&lt;/code&gt;, but not by handler &lt;code&gt;h1&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;mymodule&lt;/code&gt; のレベルが &lt;code&gt;debug&lt;/code&gt; に設定されている場合、このモジュールからのデバッグイベントはハンドラー &lt;code&gt;h2&lt;/code&gt; ではなくハンドラー &lt;code&gt;h1&lt;/code&gt; によって記録されます。</target>
        </trans-unit>
        <trans-unit id="57aa00c976a435bf8bda5a05ad6230ef4e15342c" translate="yes" xml:space="preserve">
          <source>If the library path is set to &lt;code&gt;code_path&lt;/code&gt;, the set of library modules is not determined, and the &lt;code&gt;info&lt;/code&gt; functions will return empty lists of library modules.</source>
          <target state="translated">ライブラリパスが &lt;code&gt;code_path&lt;/code&gt; に設定されている場合、ライブラリモジュールのセットは決定されず、 &lt;code&gt;info&lt;/code&gt; 関数はライブラリモジュールの空のリストを返します。</target>
        </trans-unit>
        <trans-unit id="5a12290de86cdc8197c1cbb41227356d8ad7a7f4" translate="yes" xml:space="preserve">
          <source>If the list contains more than one object with &lt;strong&gt;matching&lt;/strong&gt; keys and the table type is &lt;code&gt;set&lt;/code&gt;, one is inserted, which one is not defined. The same holds for table type &lt;code&gt;ordered_set&lt;/code&gt; if the keys &lt;strong&gt;compare equal&lt;/strong&gt;.</source>
          <target state="translated">リストに&lt;strong&gt;一致する&lt;/strong&gt;キーを持つ複数のオブジェクトが含まれ、テーブルタイプが &lt;code&gt;set&lt;/code&gt; されている場合は、定義されていないオブジェクトが挿入されます。キーが&lt;strong&gt;等しい&lt;/strong&gt;場合、テーブルタイプ &lt;code&gt;ordered_set&lt;/code&gt; にも同じことが言えます。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="306fdef74e5ed0763cd6967950f14b6cd849bc3e" translate="yes" xml:space="preserve">
          <source>If the list of applications contains core applications, i.e &lt;code&gt;erts&lt;/code&gt;, &lt;code&gt;kernel&lt;/code&gt;, &lt;code&gt;stdlib&lt;/code&gt; or &lt;code&gt;sasl&lt;/code&gt;, the &lt;code&gt;Install&lt;/code&gt; script in the patched Erlang/OTP installation must be rerun.</source>
          <target state="translated">アプリケーションのリストにコアアプリケーション、つまり &lt;code&gt;erts&lt;/code&gt; 、 &lt;code&gt;kernel&lt;/code&gt; 、 &lt;code&gt;stdlib&lt;/code&gt; 、または &lt;code&gt;sasl&lt;/code&gt; が含まれている場合は、パッチが適用されたErlang / OTPインストールの &lt;code&gt;Install&lt;/code&gt; スクリプトを再実行する必要があります。</target>
        </trans-unit>
        <trans-unit id="e5dc7d4fb91d3eb052a864414f12051609f1bc34" translate="yes" xml:space="preserve">
          <source>If the local implementation of Erlang defines &lt;code&gt;char()&lt;/code&gt; as a subset of &lt;code&gt;integer()&lt;/code&gt;, then &lt;code&gt;is_c_int(Node)&lt;/code&gt; will also yield &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">アーランのローカル実装が定義されている場合 &lt;code&gt;char()&lt;/code&gt; のサブセットとして &lt;code&gt;integer()&lt;/code&gt; 、次いで &lt;code&gt;is_c_int(Node)&lt;/code&gt; ももたらす &lt;code&gt;true&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="8acd485e36998d865f417532aa218ed4f2b0d80e" translate="yes" xml:space="preserve">
          <source>If the local node is part of a global group, &lt;code&gt;State&lt;/code&gt; is equal to &lt;code&gt;synced&lt;/code&gt;. If no global groups are defined, &lt;code&gt;State&lt;/code&gt; is equal to &lt;code&gt;no_conf&lt;/code&gt;.</source>
          <target state="translated">ローカルノードがグローバルグループの一部である場合、 &lt;code&gt;State&lt;/code&gt; は &lt;code&gt;synced&lt;/code&gt; と等しくなります。グローバルグループが定義されていない場合、 &lt;code&gt;State&lt;/code&gt; は &lt;code&gt;no_conf&lt;/code&gt; に等しくなります。</target>
        </trans-unit>
        <trans-unit id="b3dc78cf933189665aca88d0f65ce3644c34d9ac" translate="yes" xml:space="preserve">
          <source>If the log event is returned, the next filter function is called with the returned value as the first argument. That is, if a filter function modifies the log event, the next filter function receives the modified event. The value returned from the last filter function is the value that the handler callback receives.</source>
          <target state="translated">ログイベントが返された場合、返された値を第一引数として次のフィルタ関数が呼び出されます。つまり、フィルタ関数がログイベントを変更した場合、次のフィルタ関数は変更されたイベントを受け取ります。最後のフィルタ関数から返される値は、ハンドラコールバックが受け取る値となります。</target>
        </trans-unit>
        <trans-unit id="d41baef54ef4b512298e69bbec24ae875c8c68a0" translate="yes" xml:space="preserve">
          <source>If the log is blocked by the closing process, the log is also unblocked.</source>
          <target state="translated">終了処理でログがブロックされている場合は、ログのブロックも解除されます。</target>
        </trans-unit>
        <trans-unit id="8605585ed728deb58354312d2da402db9d75ef1c" translate="yes" xml:space="preserve">
          <source>If the log is local on the current node, &lt;code&gt;Dist&lt;/code&gt; has the value &lt;code&gt;local&lt;/code&gt;, otherwise all nodes where the log is distributed are returned as a list.</source>
          <target state="translated">ログが現在のノードのローカルである場合、 &lt;code&gt;Dist&lt;/code&gt; の値は &lt;code&gt;local&lt;/code&gt; です。それ以外の場合、ログが配布されているすべてのノードがリストとして返されます。</target>
        </trans-unit>
        <trans-unit id="b9bd861272d3ff7a5522d24a3e8060f05d2cf0e7" translate="yes" xml:space="preserve">
          <source>If the log message is specified as a &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;report_cb&lt;/code&gt; key can be associated with a fun (report callback) that converts the report to a format string and arguments, or directly to a string. See the type definition of &lt;code&gt;&lt;a href=&quot;#type-report_cb&quot;&gt;report_cb()&lt;/a&gt;&lt;/code&gt;, and section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the User's Guide for more information about report callbacks.</source>
          <target state="translated">ログメッセージは次のように指定された場合 &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;report_cb&lt;/code&gt; のキーは、書式文字列と引数に、または直接文字列に変換したレポートを楽しい（レポートコールバック）に関連付けることができます。レポートコールバックの詳細については、 &lt;code&gt;&lt;a href=&quot;#type-report_cb&quot;&gt;report_cb()&lt;/a&gt;&lt;/code&gt; のタイプ定義、およびユーザーズガイドのセクション &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="dafa7b7f2609edae55f58fdb8dad531885491f7e" translate="yes" xml:space="preserve">
          <source>If the log message is specified as a &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report()&lt;/a&gt;&lt;/code&gt;, the &lt;code&gt;report_cb&lt;/code&gt; key can be associated with a fun (report callback) that converts the report to a format string and arguments. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the User's Guide for more information about report callbacks.</source>
          <target state="translated">ログメッセージは次のように指定された場合 &lt;code&gt;&lt;a href=&quot;#type-report&quot;&gt;report()&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;report_cb&lt;/code&gt; のキーは、書式文字列と引数にレポートを変換し楽しい（レポートコールバック）に関連付けることができます。レポートコールバックの詳細については、ユーザーガイドの「 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="de16ab6d2dd843eaf98a56613e46e210c0e2c90f" translate="yes" xml:space="preserve">
          <source>If the log size is decreased, for example, to save space, function &lt;code&gt;&lt;a href=&quot;#inc_wrap_file-1&quot;&gt;inc_wrap_file/1&lt;/a&gt;&lt;/code&gt; can be used to force the log to wrap.</source>
          <target state="translated">たとえば、スペースを節約するためにログサイズが減少した場合、関数 &lt;code&gt;&lt;a href=&quot;#inc_wrap_file-1&quot;&gt;inc_wrap_file/1&lt;/a&gt;&lt;/code&gt; を使用してログを強制的にラップできます。</target>
        </trans-unit>
        <trans-unit id="720cb0ae706744e4ee9df32b00d37adc564581fe" translate="yes" xml:space="preserve">
          <source>If the macro &lt;code&gt;MERL_NO_TRANSFORM&lt;/code&gt; is defined before the &lt;code&gt;merl.hrl&lt;/code&gt; header file is included, the parse transform used by Merl will be disabled, and in that case, the match expressions &lt;code&gt;?Q(...) = ...&lt;/code&gt;, case switches using &lt;code&gt;?Q(...)&lt;/code&gt; patterns, and automatic metavariables like &lt;code&gt;_@Tuple&lt;/code&gt; cannot be used in your code, but the Merl macros and functions still work. To do metavariable substitution, you need to use the &lt;code&gt;?Q(Text, Map)&lt;/code&gt; macro, e.g.:</source>
          <target state="translated">マクロ場合 &lt;code&gt;MERL_NO_TRANSFORM&lt;/code&gt; が前に定義されて &lt;code&gt;merl.hrl&lt;/code&gt; のヘッダファイルが含まれている、MERLによって使用される変換解析が無効になって、その場合には、一致表現されます &lt;code&gt;?Q(...) = ...&lt;/code&gt; 、場合は、使用してスイッチ &lt;code&gt;?Q(...)&lt;/code&gt; パターン、および &lt;code&gt;_@Tuple&lt;/code&gt; Tupleなどの自動メタ変数はコードで使用できませんが、Merlマクロと関数は引き続き機能します。メタ変数置換を行うには、 &lt;code&gt;?Q(Text, Map)&lt;/code&gt; マクロを使用する必要があります。例：</target>
        </trans-unit>
        <trans-unit id="2f7a0ebf63b23efbe71cc89202b72b358a0f129b" translate="yes" xml:space="preserve">
          <source>If the macro &lt;code&gt;NOASSERT&lt;/code&gt; is defined before the EUnit header file is included, these macros have no effect when testing is also disabled; see &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">EUnitヘッダーファイルをインクルードする前にマクロ &lt;code&gt;NOASSERT&lt;/code&gt; が定義されている場合、これらのマクロはテストも無効になっている場合は効果がありません。詳細については、 &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="146cb0ce4e92421175ea3746cf274e2455137df9" translate="yes" xml:space="preserve">
          <source>If the macro &lt;code&gt;NODEBUG&lt;/code&gt; is defined before the EUnit header file is included, these macros have no effect; see &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; for details.</source>
          <target state="translated">EUnitヘッダーファイルをインクルードする前にマクロ &lt;code&gt;NODEBUG&lt;/code&gt; が定義されている場合、これらのマクロは効果がありません。詳細については、 &lt;code&gt;&lt;a href=&quot;#Compilation_control_macros&quot;&gt;Compilation control macros&lt;/a&gt;&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="9b5a901ceceb4e69c701bf0dc03c50b6bae11f7b" translate="yes" xml:space="preserve">
          <source>If the manager is not configured to use any particular transport domain, the behaviour &lt;code&gt;handle_agent/4&lt;/code&gt; will for backwards copmpatibility reasons be called with the old &lt;code&gt;IpAddr&lt;/code&gt; and &lt;code&gt;PortNumber&lt;/code&gt; arguments</source>
          <target state="translated">マネージャーが特定のトランスポートドメインを使用するように構成されていない場合、下位互換性のために、 &lt;code&gt;handle_agent/4&lt;/code&gt; の動作が古い &lt;code&gt;IpAddr&lt;/code&gt; および &lt;code&gt;PortNumber&lt;/code&gt; 引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="f6efb33521a71965325da2bbd03e23ab8ae58659" translate="yes" xml:space="preserve">
          <source>If the manager tries to set the same variable many times in the same PDU, the agent is free to improvise. There is no definition which determines if the instrumentation will be called once or twice. If called once only, there is no definition that determines which of the new values is going to be supplied.</source>
          <target state="translated">管理者が同じPDUで何度も同じ変数を設定しようとした場合、エージェントは自由に即興をすることができます。インストルメントが一度だけ呼ばれるか二度だけ呼ばれるかを決定する定義はありません。一度だけ呼び出された場合、どちらの新しい値が供給されようとしているかを決定する定義はありません。</target>
        </trans-unit>
        <trans-unit id="74415b1346dd0ddc93d29cb9c0389734be028243" translate="yes" xml:space="preserve">
          <source>If the master node fails, the entire pool exits.</source>
          <target state="translated">マスターノードに障害が発生した場合、プール全体が終了します。</target>
        </trans-unit>
        <trans-unit id="ada210019d5db3434b3a98372ed4ed0f124b6d6b" translate="yes" xml:space="preserve">
          <source>If the match specification contains errors, tuple &lt;code&gt;{error, Errors}&lt;/code&gt; is returned, where &lt;code&gt;Errors&lt;/code&gt; is a list of natural language descriptions of what was wrong with the match specification.</source>
          <target state="translated">一致指定にエラーが含まれている場合、タプル &lt;code&gt;{error, Errors}&lt;/code&gt; が返されます。ここで、 &lt;code&gt;Errors&lt;/code&gt; は、一致指定の何が問題であったかを自然言語で記述したリストです。</target>
        </trans-unit>
        <trans-unit id="73520de0bbd30344138b28e89ae6e3ad45ab6a3d" translate="yes" xml:space="preserve">
          <source>If the match specification is executed when selecting objects from an ETS table:</source>
          <target state="translated">ETS テーブルからオブジェクトを選択する際にマッチ指定が実行された場合。</target>
        </trans-unit>
        <trans-unit id="c4b956c127ba515516d186daa8a6509787e44051" translate="yes" xml:space="preserve">
          <source>If the match specification is executing when tracing:</source>
          <target state="translated">トレース時にマッチ指定が実行されている場合。</target>
        </trans-unit>
        <trans-unit id="8673441fb53d8c53d833ea8413d411b45f3c363b" translate="yes" xml:space="preserve">
          <source>If the match specification is syntactically correct, the function either returns &lt;code&gt;{ok,Result}&lt;/code&gt;, where &lt;code&gt;Result&lt;/code&gt; is what would have been the result in a real &lt;code&gt;select/2&lt;/code&gt; call, or &lt;code&gt;false&lt;/code&gt; if the match specification does not match object &lt;code&gt;Tuple&lt;/code&gt;.</source>
          <target state="translated">一致指定が構文的に正しい場合、関数は &lt;code&gt;{ok,Result}&lt;/code&gt; 返します。ここで、 &lt;code&gt;Result&lt;/code&gt; は実際の &lt;code&gt;select/2&lt;/code&gt; 呼び出しの結果となるものか、一致指定がオブジェクト &lt;code&gt;Tuple&lt;/code&gt; と一致しない場合は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="760d740968a06c49ac007f36a245af2196bd1b34" translate="yes" xml:space="preserve">
          <source>If the matching conditions are not met, the match fails, either with:</source>
          <target state="translated">一致する条件が満たされていない場合は、以下のいずれかの条件で一致に失敗します。</target>
        </trans-unit>
        <trans-unit id="1935f33d435bd33bb34072fa05214583d09d6dc0" translate="yes" xml:space="preserve">
          <source>If the matching fails, a &lt;code&gt;badmatch&lt;/code&gt; run-time error occurs.</source>
          <target state="translated">マッチングが失敗すると、 &lt;code&gt;badmatch&lt;/code&gt; ランタイムエラーが発生します。</target>
        </trans-unit>
        <trans-unit id="5e6c9dcffff87aa8aa658e5eae30b4366a1b2bb3" translate="yes" xml:space="preserve">
          <source>If the matching subpart of &lt;code&gt;Subject&lt;/code&gt; giving raise to the replacement is to be inserted in the result, option &lt;code&gt;{insert_replaced, InsPos}&lt;/code&gt; inserts the matching part into &lt;code&gt;Replacement&lt;/code&gt; at the specified position (or positions) before inserting &lt;code&gt;Replacement&lt;/code&gt; into &lt;code&gt;Subject&lt;/code&gt;.</source>
          <target state="translated">置換を発生させる &lt;code&gt;Subject&lt;/code&gt; の一致するサブパートを結果に挿入する場合、オプション &lt;code&gt;{insert_replaced, InsPos}&lt;/code&gt; は、 &lt;code&gt;Replacement&lt;/code&gt; を &lt;code&gt;Subject&lt;/code&gt; に挿入する前に、一致する部分を &lt;code&gt;Replacement&lt;/code&gt; の指定された位置に挿入します。</target>
        </trans-unit>
        <trans-unit id="fdd041679c28a1dfb5c5129e21e191da62b2500c" translate="yes" xml:space="preserve">
          <source>If the matching succeeds, any unbound variable in the pattern becomes bound and the value of &lt;code&gt;Expr2&lt;/code&gt; is returned.</source>
          <target state="translated">マッチングが成功すると、パターン内のバインドされていない変数がバインドされ、 &lt;code&gt;Expr2&lt;/code&gt; の値が返されます。</target>
        </trans-unit>
        <trans-unit id="5059fa619d98d60a3d0f2e7f4484d57de08a27f3" translate="yes" xml:space="preserve">
          <source>If the maximum depth is reached, it cannot be read in the resultant output. Also, the &lt;code&gt;,...&lt;/code&gt; form in a tuple denotes that there are more elements in the tuple but these are below the print depth.</source>
          <target state="translated">最大深度に達すると、結果の出力で読み取ることができません。また、タプル内の &lt;code&gt;,...&lt;/code&gt; フォームは、タプル内により多くの要素があることを示しますが、これらは印刷深度より下にあります。</target>
        </trans-unit>
        <trans-unit id="6c939753050268aea10f52760cad514608911137" translate="yes" xml:space="preserve">
          <source>If the message cannot be decoded the following callback function will be invoked:</source>
          <target state="translated">メッセージがデコードできない場合は、以下のコールバック関数が呼び出されます。</target>
        </trans-unit>
        <trans-unit id="fa13ca2255dfd047e4217a3af88a01b044ce4d8d" translate="yes" xml:space="preserve">
          <source>If the message is on report form, it is converted to &lt;code&gt;{Format,Args}&lt;/code&gt; by calling the report callback. See section &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; in the Kernel User's Guide for more information about report callbacks and valid forms of log messages.</source>
          <target state="translated">メッセージがレポートフォームにある場合、レポートコールバックを呼び出すことにより &lt;code&gt;{Format,Args}&lt;/code&gt; 変換されます。レポートコールバックとログメッセージの有効な形式の詳細については、 『カーネルユーザーガイド』の「 &lt;code&gt;&lt;a href=&quot;logger_chapter#log_message&quot;&gt;Log Message&lt;/a&gt;&lt;/code&gt; 」を参照してください。</target>
        </trans-unit>
        <trans-unit id="c5713a5c2133c11304f85627e2ccde367a7ac635" translate="yes" xml:space="preserve">
          <source>If the minimum repetition is &amp;gt; 0, the quantifier is ignored. The assertion is obeyed only once when encountered during matching.</source>
          <target state="translated">最小繰り返しが&amp;gt; 0の場合、数量詞は無視されます。アサーションは、マッチング中に遭遇したときに一度だけ従われます。</target>
        </trans-unit>
        <trans-unit id="5f724a3bd58fe6f9ce42fc406728de7f89ce0ad1" translate="yes" xml:space="preserve">
          <source>If the module &lt;code&gt;m1&lt;/code&gt; is introduced in version &quot;2&quot; of &lt;code&gt;ch_app&lt;/code&gt;, it must also be loaded when upgrading and deleted when downgrading:</source>
          <target state="translated">モジュール &lt;code&gt;m1&lt;/code&gt; が &lt;code&gt;ch_app&lt;/code&gt; のバージョン「2」で導入された場合、アップグレード時にもロードし、ダウングレード時に削除する必要があります。</target>
        </trans-unit>
        <trans-unit id="7aff411ea6299d7bca7ad227ec0e1bc26a882a00" translate="yes" xml:space="preserve">
          <source>If the module cannot be found, &lt;code&gt;non_existing&lt;/code&gt; is returned.</source>
          <target state="translated">モジュールが見つからない場合は、 &lt;code&gt;non_existing&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="5745afeece7b41ec1bfc061d3b5f18d8e8d1dfba" translate="yes" xml:space="preserve">
          <source>If the module is Cover-compiled, &lt;code&gt;cover_compiled&lt;/code&gt; is returned.</source>
          <target state="translated">モジュールがカバーコンパイルされている場合、 &lt;code&gt;cover_compiled&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="52f516f712d9242bfd152b08a6fd0f4a2793c3fd" translate="yes" xml:space="preserve">
          <source>If the module is loaded, it returns the name of the file containing the loaded object code.</source>
          <target state="translated">モジュールがロードされている場合は、ロードされたオブジェクトコードを含むファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="46dba590f6c1f6f800702e68508881918dc97bf9" translate="yes" xml:space="preserve">
          <source>If the module is not loaded, this function searches the code path for the first file containing object code for &lt;code&gt;Module&lt;/code&gt; and returns the absolute filename.</source>
          <target state="translated">モジュールがロードされていない場合、この関数は &lt;code&gt;Module&lt;/code&gt; オブジェクトコードを含む最初のファイルのコードパスを検索し、絶対ファイル名を返します。</target>
        </trans-unit>
        <trans-unit id="229acd9737c1671ac97dd505de45081f475b5a4e" translate="yes" xml:space="preserve">
          <source>If the module is preloaded, &lt;code&gt;preloaded&lt;/code&gt; is returned.</source>
          <target state="translated">モジュールがプリロードされている場合、 &lt;code&gt;preloaded&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="ea6cb550bcdaadfe5116319b2dd6e7b241b066a1" translate="yes" xml:space="preserve">
          <source>If the module is successfully Cover compiled, the function returns &lt;code&gt;{ok,Module}&lt;/code&gt;. Otherwise the function returns &lt;code&gt;{error,File}&lt;/code&gt;. Errors and warnings are printed as they occur.</source>
          <target state="translated">モジュールがCoverコンパイルに成功すると、関数は &lt;code&gt;{ok,Module}&lt;/code&gt; 返します。それ以外の場合、関数は &lt;code&gt;{error,File}&lt;/code&gt; 返します。エラーと警告は、発生時に出力されます。</target>
        </trans-unit>
        <trans-unit id="1e0a91a6b9e2e2cfbc8f28ae6d3d48928ca8ba21" translate="yes" xml:space="preserve">
          <source>If the modules used to implement the process change dynamically during runtime, the process must understand one more message. An example is the &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; processes. The message is &lt;code&gt;{_Label, {From, Ref}, get_modules}&lt;/code&gt;. The reply to this message is &lt;code&gt;From ! {Ref, Modules}&lt;/code&gt;, where &lt;code&gt;Modules&lt;/code&gt; is a list of the currently active modules in the process.</source>
          <target state="translated">プロセスの実装に使用されるモジュールが実行時に動的に変化する場合、プロセスはもう1つのメッセージを理解する必要があります。例は、 &lt;code&gt;&lt;a href=&quot;gen_event&quot;&gt;gen_event&lt;/a&gt;&lt;/code&gt; プロセスです。メッセージは &lt;code&gt;{_Label, {From, Ref}, get_modules}&lt;/code&gt; です。このメッセージへの返信は &lt;code&gt;From ! {Ref, Modules}&lt;/code&gt; 、ここで &lt;code&gt;Modules&lt;/code&gt; は、プロセスで現在アクティブなモジュールのリストです。</target>
        </trans-unit>
        <trans-unit id="df61dd8b4c6d4d214b129a5077aaee5f7910b304" translate="yes" xml:space="preserve">
          <source>If the name after the prefix and any lift and glob markers is &lt;code&gt;_&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt;, the variable is treated as an anonymous catch-all pattern in matches. For example, &lt;code&gt;_@_&lt;/code&gt;, &lt;code&gt;_@@_&lt;/code&gt;, &lt;code&gt;_@__&lt;/code&gt;, or even &lt;code&gt;_@__@_&lt;/code&gt;.</source>
          <target state="translated">接頭辞とリフトマーカーとグロブマーカーの後の名前が &lt;code&gt;_&lt;/code&gt; または &lt;code&gt;0&lt;/code&gt; の場合、変数は一致で匿名のキャッチオールパターンとして扱われます。たとえば、 &lt;code&gt;_@_&lt;/code&gt; 、 &lt;code&gt;_@@_&lt;/code&gt; 、 &lt;code&gt;_@__&lt;/code&gt; 、さらには &lt;code&gt;_@__@_&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="8c34344ea584c9364120e1acb56d82e908a1af1b" translate="yes" xml:space="preserve">
          <source>If the name is omitted, the &lt;code&gt;gen_server&lt;/code&gt; is not registered. Instead its pid must be used. The name can also be given as &lt;code&gt;{global, Name}&lt;/code&gt;, in which case the &lt;code&gt;gen_server&lt;/code&gt; is registered using &lt;code&gt;global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">名前を省略すると、 &lt;code&gt;gen_server&lt;/code&gt; は登録されません。代わりに、そのpidを使用する必要があります。名前は &lt;code&gt;{global, Name}&lt;/code&gt; として指定することもできます。その場合、 &lt;code&gt;gen_server&lt;/code&gt; は &lt;code&gt;global:register_name/2&lt;/code&gt; を使用して登録されます。</target>
        </trans-unit>
        <trans-unit id="5f90545e460868142094a7469ef7c519e7a99526" translate="yes" xml:space="preserve">
          <source>If the name is omitted, the &lt;code&gt;gen_statem&lt;/code&gt; is not registered. Instead its pid must be used. The name can also be specified as &lt;code&gt;{global,Name}&lt;/code&gt;, then the &lt;code&gt;gen_statem&lt;/code&gt; is registered using &lt;code&gt;global:register_name/2&lt;/code&gt; in Kernel.</source>
          <target state="translated">名前を省略すると、 &lt;code&gt;gen_statem&lt;/code&gt; は登録されません。代わりに、そのpidを使用する必要があります。名前は &lt;code&gt;{global,Name}&lt;/code&gt; として指定することもできます。その後、 &lt;code&gt;gen_statem&lt;/code&gt; はカーネルで &lt;code&gt;global:register_name/2&lt;/code&gt; を使用して登録されます。</target>
        </trans-unit>
        <trans-unit id="bce770e9e17197a693d6f9ec8afdca775fdac582" translate="yes" xml:space="preserve">
          <source>If the name is omitted, the event manager is not registered. Instead its pid must be used. The name can also be given as &lt;code&gt;{global, Name}&lt;/code&gt;, in which case the event manager is registered using &lt;code&gt;global:register_name/2&lt;/code&gt;.</source>
          <target state="translated">名前を省略した場合、イベントマネージャーは登録されません。代わりに、そのpidを使用する必要があります。名前は &lt;code&gt;{global, Name}&lt;/code&gt; として指定することもできます。その場合、イベントマネージャは &lt;code&gt;global:register_name/2&lt;/code&gt; を使用して登録されます。</target>
        </trans-unit>
        <trans-unit id="980ec5f2e4cbb3a6bcddf606d02e3f399d751b31" translate="yes" xml:space="preserve">
          <source>If the name used in a condition of this kind is a duplicate, the test is applied to all subpatterns of the same name, and is true if any one of them has matched.</source>
          <target state="translated">この種の条件で使用されている名前が重複している場合、このテストは同じ名前のすべてのサブパターンに適用され、その中のどれかが一致していれば真となります。</target>
        </trans-unit>
        <trans-unit id="15ab8218177de1094fcd225608c4c1ed9bb318cc" translate="yes" xml:space="preserve">
          <source>If the node identified by &lt;code&gt;Node&lt;/code&gt; does not support distributed &lt;code&gt;spawn_monitor()&lt;/code&gt;, the call will fail with a &lt;code&gt;notsup&lt;/code&gt; exception.</source>
          <target state="translated">&lt;code&gt;Node&lt;/code&gt; で識別されるノードが分散 &lt;code&gt;spawn_monitor()&lt;/code&gt; をサポートしていない場合、 &lt;code&gt;notsup&lt;/code&gt; 例外で呼び出しは失敗します。</target>
        </trans-unit>
        <trans-unit id="49bffa909b81c50ee39e3329bfdea53c42d35846" translate="yes" xml:space="preserve">
          <source>If the node is distributed, all referenced nodes are visible. Column &lt;strong&gt;Connection type&lt;/strong&gt; shows if the node is visible, hidden, or not connected. Visible nodes are alive nodes with a living connection to the originating node. Hidden nodes are the same as visible nodes, except they are started with flag &lt;code&gt;-hidden&lt;/code&gt;. Not connected nodes are nodes that are not connected to the originating node anymore, but references (that is, process or port identifiers) exist.</source>
          <target state="translated">ノードが分散している場合、参照されているすべてのノードが表示されます。列&lt;strong&gt;接続タイプ&lt;/strong&gt;は、ノードが表示、非表示、または接続されていないかを示します。可視ノードは、元のノードへの生きた接続を持つ生きたノードです。非表示ノードは、フラグ &lt;code&gt;-hidden&lt;/code&gt; で開始されることを除いて、表示ノードと同じです。接続されていないノードは、元のノードに接続されなくなったノードですが、参照（つまり、プロセスまたはポートの識別子）は存在します。</target>
        </trans-unit>
        <trans-unit id="9c56f0553bb17f48448269d8c3f6b6f7e5b7e66d" translate="yes" xml:space="preserve">
          <source>If the node is started with command-line flag &lt;code&gt;-sname&lt;/code&gt;, the node name is &lt;code&gt;foobar@Host&lt;/code&gt;, where &lt;code&gt;Host&lt;/code&gt; is the short name of the host (not the fully qualified domain name). If started with flag &lt;code&gt;-name&lt;/code&gt;, the node name is &lt;code&gt;foobar@Host&lt;/code&gt;, where &lt;code&gt;Host&lt;/code&gt; is the fully qualified domain name. For more information, see &lt;code&gt;erl&lt;/code&gt;.</source>
          <target state="translated">ノードがコマンドラインフラグ &lt;code&gt;-sname&lt;/code&gt; で起動されている場合、ノード名は &lt;code&gt;foobar@Host&lt;/code&gt; 。ここで、 &lt;code&gt;Host&lt;/code&gt; はホストの短い名前です（完全修飾ドメイン名ではありません）。フラグ &lt;code&gt;-name&lt;/code&gt; で開始した場合、ノード名は &lt;code&gt;foobar@Host&lt;/code&gt; 。ここで、 &lt;code&gt;Host&lt;/code&gt; は完全修飾ドメイン名です。詳細については、 &lt;code&gt;erl&lt;/code&gt; を参照してください。</target>
        </trans-unit>
        <trans-unit id="95b56bcd18c923019bf4643e2b58f9471a6acfb9" translate="yes" xml:space="preserve">
          <source>If the node was not distributed.</source>
          <target state="translated">ノードが分散していなかった場合</target>
        </trans-unit>
        <trans-unit id="aedd11aac41ef6bf71a8b2c8d09b6e7316fb0ef3" translate="yes" xml:space="preserve">
          <source>If the node was successfully unregistered from EPMD, &lt;code&gt;0&lt;/code&gt; is returned, otherwise &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">ノードがEPMDから正常に登録解除された場合、 &lt;code&gt;0&lt;/code&gt; が返されます。それ以外の場合は &lt;code&gt;-1&lt;/code&gt; が返され、 &lt;code&gt;erl_errno&lt;/code&gt; が &lt;code&gt;EIO&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="9460cf94d8c06eac24b50547fafb0d6e9b4fd6e1" translate="yes" xml:space="preserve">
          <source>If the node was successfully unregistered from EPMD, the function returns &lt;code&gt;0&lt;/code&gt;. Otherwise, &lt;code&gt;-1&lt;/code&gt; is returned and &lt;code&gt;erl_errno&lt;/code&gt; is set to &lt;code&gt;EIO&lt;/code&gt;.</source>
          <target state="translated">ノードがEPMDから正常に登録解除された場合、関数は &lt;code&gt;0&lt;/code&gt; を返します。それ以外の場合は、 &lt;code&gt;-1&lt;/code&gt; が返され、 &lt;code&gt;erl_errno&lt;/code&gt; が &lt;code&gt;EIO&lt;/code&gt; に設定されます。</target>
        </trans-unit>
        <trans-unit id="0d5ac939fb10f304c0c8f3c91721403a64646c5e" translate="yes" xml:space="preserve">
          <source>If the node where the application is running goes down, the application is restarted (after the specified time-out) at the first operational node that is listed in the list of nodes in the &lt;code&gt;distributed&lt;/code&gt; configuration parameter. This is called a &lt;strong&gt;failover&lt;/strong&gt;.</source>
          <target state="translated">アプリケーションが実行されているノードがダウンした場合、アプリケーションは（指定されたタイムアウト後に） &lt;code&gt;distributed&lt;/code&gt; 構成パラメーターのノードのリストにリストされている最初の稼働ノードで再始動されます。これは&lt;strong&gt;フェイルオーバー&lt;/strong&gt;と呼ばれ&lt;strong&gt;ます&lt;/strong&gt;。</target>
        </trans-unit>
        <trans-unit id="a5d2b0ad4edfef4bb3e88a7ddeeff16d1de18813" translate="yes" xml:space="preserve">
          <source>If the number of arguments are known at compile time, the call is better written as &lt;code&gt;Module:Function(Arg1, Arg2, ..., ArgN)&lt;/code&gt;.</source>
          <target state="translated">引数の数がコンパイル時にわかっている場合、呼び出しは &lt;code&gt;Module:Function(Arg1, Arg2, ..., ArgN)&lt;/code&gt; として記述する方が適切です。</target>
        </trans-unit>
        <trans-unit id="37c7a476d1b0b827d6493e10ef324cd201488a29" translate="yes" xml:space="preserve">
          <source>If the number of elements in the arguments are known at compile time, the call is better written as &lt;code&gt;Fun(Arg1, Arg2, ... ArgN)&lt;/code&gt;.</source>
          <target state="translated">引数の要素の数がコンパイル時にわかっている場合、呼び出しは &lt;code&gt;Fun(Arg1, Arg2, ... ArgN)&lt;/code&gt; として記述する方が適切です。</target>
        </trans-unit>
        <trans-unit id="ed56e6304627b8d6f8ad0ab5b8d27fa5330578a8" translate="yes" xml:space="preserve">
          <source>If the old behaviour is preferred, the Kernel configuration parameter &lt;code&gt; logger_sasl_compatible&lt;/code&gt; can be set to &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;SASL configuration parameters&lt;/code&gt; can then be used as before, and the SASL reports will only be printed if the SASL application is running, through a second log handler named &lt;code&gt;sasl&lt;/code&gt;.</source>
          <target state="translated">古い動作を優先する場合は、カーネル構成パラメーター &lt;code&gt; logger_sasl_compatible&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定できます。その後、 &lt;code&gt;SASL configuration parameters&lt;/code&gt; を以前と同じように使用できます。SASLレポートは、SASLアプリケーションが実行されている場合にのみ、 &lt;code&gt;sasl&lt;/code&gt; という名前の2番目のログハンドラーを介して出力されます。</target>
        </trans-unit>
        <trans-unit id="5f1678d016c144fe15d956c065fed8204d1f4e8c" translate="yes" xml:space="preserve">
          <source>If the old behaviour is preferred, the Kernel configuration parameter &lt;code&gt;logger_sasl_compatible&lt;/code&gt; can be set to &lt;code&gt;true&lt;/code&gt;. The &lt;code&gt;SASL configuration parameters&lt;/code&gt; can then be used as before, and the SASL reports will only be printed if the SASL application is running, through a second log handler named &lt;code&gt;sasl&lt;/code&gt;.</source>
          <target state="translated">古い動作が望ましい場合は、カーネル構成パラメーター &lt;code&gt;logger_sasl_compatible&lt;/code&gt; を &lt;code&gt;true&lt;/code&gt; に設定できます。その後、 &lt;code&gt;SASL configuration parameters&lt;/code&gt; を以前と同様に使用できます。SASLレポートは、SASLアプリケーションが実行されている場合にのみ、 &lt;code&gt;sasl&lt;/code&gt; という2番目のログハンドラーを介して出力されます。</target>
        </trans-unit>
        <trans-unit id="e5231cf8edc57a7fbd05d3b31ba66fb76e90acd0" translate="yes" xml:space="preserve">
          <source>If the operation fails, a bad match error occurs that terminates the test case.</source>
          <target state="translated">操作が失敗した場合、一致不良エラーが発生してテストケースが終了します。</target>
        </trans-unit>
        <trans-unit id="279228e8ee1eea55ae3919811a086bb57153efdc" translate="yes" xml:space="preserve">
          <source>If the operation is aborted for whatever reason (e.g. if the socket is closed &quot;by someone else&quot;). The &lt;code&gt;Info&lt;/code&gt; part contains the abort reason (in this case that the socket has been closed &lt;code&gt;Info = {SelectRef, closed}&lt;/code&gt;).</source>
          <target state="translated">何らかの理由で操作が中止された場合（たとえば、ソケットが「他の誰かによって」閉じられた場合）。 &lt;code&gt;Info&lt;/code&gt; 部分は、（ソケットが閉じられたことを、この場合に中断理由含ま &lt;code&gt;Info = {SelectRef, closed}&lt;/code&gt; ）を。</target>
        </trans-unit>
        <trans-unit id="76c8fb74e6d95469ef49c5c6891c58f75c46dd19" translate="yes" xml:space="preserve">
          <source>If the operation is denied because of table access rights (&lt;code&gt;&lt;a href=&quot;#protected&quot;&gt;protected&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#private&quot;&gt;private&lt;/a&gt;&lt;/code&gt;).</source>
          <target state="translated">テーブルアクセス権（ &lt;code&gt;&lt;a href=&quot;#protected&quot;&gt;protected&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#private&quot;&gt;private&lt;/a&gt;&lt;/code&gt; ）が原因で操作が拒否された場合。</target>
        </trans-unit>
        <trans-unit id="1eb00786bd693115a31f9e1bae9c1bd9187b7cb1" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;active&lt;/code&gt; is set to &lt;code&gt;once&lt;/code&gt;, &lt;code&gt;true&lt;/code&gt; or an integer value, the process owning the sslsocket will receive messages of type &lt;code&gt;&lt;a href=&quot;#type-active_msgs&quot;&gt; active_msgs() &lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">オプション &lt;code&gt;active&lt;/code&gt; が &lt;code&gt;once&lt;/code&gt; 、 &lt;code&gt;true&lt;/code&gt; 、または整数値に設定されている場合、sslsocketを所有するプロセスはタイプ &lt;code&gt;&lt;a href=&quot;#type-active_msgs&quot;&gt; active_msgs() &lt;/a&gt;&lt;/code&gt; のメッセージを受信します。</target>
        </trans-unit>
        <trans-unit id="660ac0936f3ad9df7f0818b651fbd055b3e48bf8" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;anti_replay&lt;/code&gt; is defined in the server, a pair of Bloom filters (&lt;strong&gt;current&lt;/strong&gt; and &lt;strong&gt;old&lt;/strong&gt;) are used to record incoming ClientHello messages (it is the unique binder value that is actually stored). The &lt;strong&gt;current&lt;/strong&gt; Bloom filter is used for &lt;code&gt;WindowSize&lt;/code&gt; seconds to store new elements. At the end of the time window the Bloom filters are rotated (the &lt;strong&gt;current&lt;/strong&gt; Bloom filter becomes the &lt;strong&gt;old&lt;/strong&gt; and an empty Bloom filter is set as &lt;strong&gt;current&lt;/strong&gt;.</source>
          <target state="translated">サーバーでオプション &lt;code&gt;anti_replay&lt;/code&gt; が定義されている場合、ブルームフィルターのペア（&lt;strong&gt;現在&lt;/strong&gt;と&lt;strong&gt;古い&lt;/strong&gt;）を使用して、着信ClientHelloメッセージを記録します（実際に保存されるのは一意のバインダー値です）。&lt;strong&gt;現在の&lt;/strong&gt;ブルームフィルタが使用され &lt;code&gt;WindowSize&lt;/code&gt; の新しい要素を格納する秒。時間枠の終わりに、ブルームフィルターが回転します（&lt;strong&gt;現在の&lt;/strong&gt;ブルームフィルターが&lt;strong&gt;古く&lt;/strong&gt;なり、空のブルームフィルターが&lt;strong&gt;現在&lt;/strong&gt;として設定されます。</target>
        </trans-unit>
        <trans-unit id="965b40d04fea8544035ae2adb0a45bfab2ddc16f" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;raw&lt;/code&gt; is set, the file server is not called and only information about local files is returned.</source>
          <target state="translated">オプション &lt;code&gt;raw&lt;/code&gt; が設定されている場合、ファイルサーバーは呼び出されず、ローカルファイルに関する情報のみが返されます。</target>
        </trans-unit>
        <trans-unit id="4e75c5ca6851d3d1260e2334b0fd3550965b29e5" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;raw&lt;/code&gt; is set, the file server is not called and only information about local files is returned. Note that this will break this module's atomicity guarantees as it can race with a concurrent call to &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2 &lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">オプション &lt;code&gt;raw&lt;/code&gt; が設定されている場合、ファイルサーバーは呼び出されず、ローカルファイルに関する情報のみが返されます。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2 &lt;/a&gt;&lt;/code&gt; の同時呼び出しと競合する可能性があるため、これによりこのモジュールのアトミック性の保証が破られることに注意してください。</target>
        </trans-unit>
        <trans-unit id="b1f856775e657213352223a21e03401b4aa2a209" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;raw&lt;/code&gt; is set, the file server is not called and only information about local files is returned. Note that this will break this module's atomicity guarantees as it can race with a concurrent call to &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2 &lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;raw&lt;/code&gt; が設定されている場合、ファイルサーバーは呼び出されず、ローカルファイルに関する情報のみが返されます。 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2 &lt;/a&gt;&lt;/code&gt; の同時呼び出しと競合する可能性があるため、これによりこのモジュールのアトミック性の保証が破られることに注意してください。</target>
        </trans-unit>
        <trans-unit id="5e127046f0102151c6ef18467d6c0abf9dd2f077" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;raw&lt;/code&gt; is set, the file server is not called and only information about local files is returned. Note that this will break this module's atomicity guarantees as it can race with a concurrent call to &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">オプション &lt;code&gt;raw&lt;/code&gt; が設定されている場合、ファイルサーバーは呼び出されず、ローカルファイルに関する情報のみが返されます。これは、 &lt;code&gt;&lt;a href=&quot;#write_file_info-2&quot;&gt;write_file_info/1,2&lt;/a&gt;&lt;/code&gt; への同時呼び出しと競合する可能性があるため、このモジュールのアトミック性の保証に違反します。</target>
        </trans-unit>
        <trans-unit id="400845971be3dd0decd026d5b02cf869e6e7945b" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;user_dir_fun&lt;/code&gt; is defined, that fun is called and the returned directory is used,</source>
          <target state="translated">オプション &lt;code&gt;user_dir_fun&lt;/code&gt; が定義されている場合、そのfunが呼び出され、返されたディレクトリが使用されます。</target>
        </trans-unit>
        <trans-unit id="4d027da67948b3928fcb8c40cf4bee29a349c9ad" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;verify&lt;/code&gt; is set to &lt;code&gt;verify_peer&lt;/code&gt; the option &lt;code&gt;server_name_indication&lt;/code&gt; shall also be specified, if it is not no Server Name Indication extension will be sent, and &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; will be called with the IP-address of the connection as &lt;code&gt;ReferenceID&lt;/code&gt;, which is proably not what you want.</source>
          <target state="translated">オプション &lt;code&gt;verify&lt;/code&gt; が &lt;code&gt;verify_peer&lt;/code&gt; に設定されている場合、オプション &lt;code&gt;server_name_indication&lt;/code&gt; も指定する必要があります。指定されていない場合、サーバー名表示拡張が送信され、 &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; が &lt;code&gt;ReferenceID&lt;/code&gt; として接続のIPアドレスで呼び出されます。おそらくあなたが望むものではありません。</target>
        </trans-unit>
        <trans-unit id="8ee4266e447f2d44213209bd3f7598d7638964ff" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;verify&lt;/code&gt; is set to &lt;code&gt;verify_peer&lt;/code&gt; the option &lt;code&gt;server_name_indication&lt;/code&gt; shall also be specified, if it is not no Server Name Indication extension will be sent, and &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; will be called with the IP-address of the connection as &lt;code&gt;ReferenceID&lt;/code&gt;, which is probably not what you want.</source>
          <target state="translated">オプション &lt;code&gt;verify&lt;/code&gt; が &lt;code&gt;verify_peer&lt;/code&gt; に設定されている場合は、オプション &lt;code&gt;server_name_indication&lt;/code&gt; も指定する必要があります。そうでない場合は、Server Name Indication拡張子が送信され、 &lt;code&gt;public_key:pkix_verify_hostname/2&lt;/code&gt; が、接続のIPアドレスを &lt;code&gt;ReferenceID&lt;/code&gt; として呼び出されます。おそらくあなたが望むものではありません。</target>
        </trans-unit>
        <trans-unit id="70f682b6a405b33cd20dc6b87dfbd76f644b7558" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;{handshake, hello}&lt;/code&gt; is used the handshake is paused after receiving the server hello message and the success response is &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; instead of &lt;code&gt;{ok, SslSocket}&lt;/code&gt;. Thereafter the handshake is continued or canceled by calling &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt; handshake_continue/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{handshake, hello}&lt;/code&gt; を使用すると、サーバーhelloメッセージの受信後にハンドシェイクが一時停止し、成功応答は &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; ではなく{ok、SslSocket、Ext}に &lt;code&gt;{ok, SslSocket}&lt;/code&gt; 。その後、handshake_continue &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt; handshake_continue/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、ハンドシェイクが続行またはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="c3a18e0b35e87dbcf1a9dcdd4db312f82e11bde7" translate="yes" xml:space="preserve">
          <source>If the option &lt;code&gt;{handshake, hello}&lt;/code&gt; is used the handshake is paused after receiving the server hello message and the success response is &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; instead of &lt;code&gt;{ok, SslSocket}&lt;/code&gt;. Thereafter the handshake is continued or canceled by calling &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">オプション &lt;code&gt;{handshake, hello}&lt;/code&gt; を使用すると、サーバーのhelloメッセージを受信した後にハンドシェイクが一時停止し、成功の応答は &lt;code&gt;{ok, SslSocket, Ext}&lt;/code&gt; ではなく{ok、SslSocket、Ext}に &lt;code&gt;{ok, SslSocket}&lt;/code&gt; 。その後、handshake_continue &lt;code&gt;&lt;a href=&quot;#handshake_continue-3&quot;&gt;handshake_continue/3&lt;/a&gt;&lt;/code&gt; または &lt;code&gt;&lt;a href=&quot;#handshake_cancel-1&quot;&gt;handshake_cancel/1&lt;/a&gt;&lt;/code&gt; を呼び出すことにより、ハンドシェイクが続行またはキャンセルされます。</target>
        </trans-unit>
        <trans-unit id="a077df380f70545e70cd306e5e5521ae67d9f379" translate="yes" xml:space="preserve">
          <source>If the option is enabled, and no &lt;code&gt;&lt;a href=&quot;#option-pwdfun&quot;&gt;pwdfun&lt;/a&gt;&lt;/code&gt; is present, the user name must present in the &lt;code&gt;&lt;a href=&quot;#option-user_passwords&quot;&gt;user_passwords&lt;/a&gt;&lt;/code&gt; for the check to succeed but the value of the password is not checked.</source>
          <target state="translated">オプションが有効で、 &lt;code&gt;&lt;a href=&quot;#option-pwdfun&quot;&gt;pwdfun&lt;/a&gt;&lt;/code&gt; が存在しない場合、チェックを成功させるにはユーザー名が &lt;code&gt;&lt;a href=&quot;#option-user_passwords&quot;&gt;user_passwords&lt;/a&gt;&lt;/code&gt; に存在する必要がありますが、パスワードの値はチェックされません。</target>
        </trans-unit>
        <trans-unit id="948c45ffdeba267366402b1a519f264bb85a2b52" translate="yes" xml:space="preserve">
          <source>If the option is intended only for a server or for a client, it may be set in this way:</source>
          <target state="translated">このオプションがサーバのみ、あるいはクライアントのみを対象としている場合は、このように設定してもよい。</target>
        </trans-unit>
        <trans-unit id="06f7f3873edec45c49aeb8ad204a603fa73eff84" translate="yes" xml:space="preserve">
          <source>If the order is set to &lt;code&gt;allow deny&lt;/code&gt;, the users network address is first controlled to be in the allow subset. If the user network address is not in the allowed subset, the user is denied to get the asset. If the network address is in the allowed subset, a second control is performed. That is, the user network address is not in the subset of network addresses to be denied as specified by parameter &lt;code&gt;deny&lt;/code&gt;.</source>
          <target state="translated">順序が &lt;code&gt;allow deny&lt;/code&gt; を許可するように設定されている場合、ユーザーのネットワークアドレスは、最初にallowサブセットに含まれるように制御されます。ユーザーのネットワークアドレスが許可されたサブセットにない場合、ユーザーはアセットの取得を拒否されます。ネットワークアドレスが許可されたサブセット内にある場合、2番目の制御が実行されます。つまり、ユーザーのネットワークアドレスは、 &lt;code&gt;deny&lt;/code&gt; パラメータで指定されているように、拒否されるネットワークアドレスのサブセットに含まれていません。</target>
        </trans-unit>
        <trans-unit id="48d8a47c543c2d39d92d2c1d202bacab80c1642d" translate="yes" xml:space="preserve">
          <source>If the order is set to &lt;code&gt;deny allow&lt;/code&gt;, only users from networks specified to be in the allowed subset succeeds to request assets in the limited area.</source>
          <target state="translated">順序が &lt;code&gt;deny allow&lt;/code&gt; に設定されている場合、許可されたサブセットに含まれるように指定されたネットワークからのユーザーのみが、制限された領域のアセットをリクエストできます。</target>
        </trans-unit>
        <trans-unit id="5413791d17ed0b4814f8fb694ad1efb815f76c05" translate="yes" xml:space="preserve">
          <source>If the order of the answers is not important, there is an alternative to the &lt;code&gt;unique&lt;/code&gt; option, namely to sort the answers uniquely:</source>
          <target state="translated">回答の順序が重要でない場合は、 &lt;code&gt;unique&lt;/code&gt; オプションに代わるものがあります。つまり、回答を一意に並べ替えます。</target>
        </trans-unit>
        <trans-unit id="b054305581b7663ed91514b307669add31ca5b5b" translate="yes" xml:space="preserve">
          <source>If the packet does not conform to the protocol format, &lt;code&gt;{error,Reason}&lt;/code&gt; is returned.</source>
          <target state="translated">パケットがプロトコル形式に準拠していない場合、 &lt;code&gt;{error,Reason}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="a2c9f15b9a918cfc529cc22dc69ae62a00c732a6" translate="yes" xml:space="preserve">
          <source>If the page is empty, it means either of the following:</source>
          <target state="translated">ページが空の場合は、以下のいずれかを意味します。</target>
        </trans-unit>
        <trans-unit id="f52fa558245396ce59f0c16eb282e09760e84891" translate="yes" xml:space="preserve">
          <source>If the parse_transform is not applied to a module which calls this pseudo function, the call will fail in runtime (with a &lt;code&gt;badarg&lt;/code&gt;). The module &lt;code&gt;dbg&lt;/code&gt; actually exports a function with this name, but it should never really be called except for when using the function in the shell. If the &lt;code&gt;parse_transform&lt;/code&gt; is properly applied by including the &lt;code&gt;ms_transform.hrl&lt;/code&gt; header file, compiled code will never call the function, but the function call is replaced by a literal match_spec.</source>
          <target state="translated">この疑似関数を呼び出すモジュールにparse_transformが適用されていない場合、呼び出しは実行時に失敗します（ &lt;code&gt;badarg&lt;/code&gt; を使用）。モジュール &lt;code&gt;dbg&lt;/code&gt; は実際にはこの名前の関数をエクスポートしますが、シェルで関数を使用する場合を除いて、この関数を実際に呼び出すことはできません。 &lt;code&gt;ms_transform.hrl&lt;/code&gt; ヘッダーファイルを &lt;code&gt;parse_transform&lt;/code&gt; が適切に適用されている場合、コンパイルされたコードは関数を呼び出すことはありませんが、関数呼び出しはリテラルmatch_specに置き換えられます。</target>
        </trans-unit>
        <trans-unit id="7c4c35e1fed61f85f87d7154c2244f967d2936c6" translate="yes" xml:space="preserve">
          <source>If the pattern is unanchored, the normal &quot;bumpalong&quot; advance to the next starting character then occurs. Backtracking can occur as usual to the left of (*PRUNE), before it is reached, or when matching to the right of (*PRUNE), but if there is no match to the right, backtracking cannot cross (*PRUNE). In simple cases, the use of (*PRUNE) is just an alternative to an atomic group or possessive quantifier, but there are some uses of (*PRUNE) that cannot be expressed in any other way. In an anchored pattern, (*PRUNE) has the same effect as (*COMMIT).</source>
          <target state="translated">パターンがアンチャンクされていない場合は、次の開始文字への通常の「バンパロン」進撃が発生します。バックトラッキングは、(*PRUNE)の左に通常通り、(*PRUNE)に到達する前、または(*PRUNE)の右に一致したときに発生しますが、右に一致するものがない場合、バックトラッキングは(*PRUNE)を越えることができません。単純なケースでは、(*PRUNE)の使用は、原子群や所有的量詞の代わりになるだけですが、(*PRUNE)には、他の方法では表現できない使用法があります。アンカードパターンでは、(*PRUNE)は(*COMMIT)と同じ効果があります。</target>
        </trans-unit>
        <trans-unit id="caf53e7076db6e332a206c64cff8afbb0ab34c47" translate="yes" xml:space="preserve">
          <source>If the permission of a loaded, but not started, application is set to &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;start&lt;/code&gt; returns &lt;code&gt;ok&lt;/code&gt; but the application is not started until the permission is set to &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">ロードされたが開始されていないアプリケーションの許可が &lt;code&gt;false&lt;/code&gt; に設定されている場合、 &lt;code&gt;start&lt;/code&gt; は &lt;code&gt;ok&lt;/code&gt; を返しますが、許可が &lt;code&gt;true&lt;/code&gt; に設定されるまでアプリケーションは開始されません。</target>
        </trans-unit>
        <trans-unit id="fb5424927d13c1c2f8655ecb9fa4aea52eaa565c" translate="yes" xml:space="preserve">
          <source>If the permission of a running application is set to &lt;code&gt;false&lt;/code&gt;, the application is stopped. If the permission later is set to &lt;code&gt;true&lt;/code&gt;, it is restarted.</source>
          <target state="translated">実行中のアプリケーションの許可が &lt;code&gt;false&lt;/code&gt; に設定されている場合、アプリケーションは停止します。後でパーミッションを &lt;code&gt;true&lt;/code&gt; に設定すると、再起動されます。</target>
        </trans-unit>
        <trans-unit id="1f18562fd499738cfc53fedde95228c6abb3a3c9" translate="yes" xml:space="preserve">
          <source>If the platform implements the IPv4 option &lt;code&gt;IP_PKTOPTIONS&lt;/code&gt;, or the IPv6 option &lt;code&gt;IPV6_PKTOPTIONS&lt;/code&gt; or &lt;code&gt;IPV6_2292PKTOPTIONS&lt;/code&gt; for the socket this value is returned from &lt;code&gt;&lt;a href=&quot;inet#getopts-2&quot;&gt;inet:getopts/2&lt;/a&gt;&lt;/code&gt; when called with the option name &lt;code&gt;&lt;a href=&quot;#type-option_name&quot;&gt;pktoptions&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">プラットフォームがIPv4オプション &lt;code&gt;IP_PKTOPTIONS&lt;/code&gt; 、またはソケットのIPv6オプション &lt;code&gt;IPV6_PKTOPTIONS&lt;/code&gt; または &lt;code&gt;IPV6_2292PKTOPTIONS&lt;/code&gt; を実装している場合、この値は、オプション名 &lt;code&gt;&lt;a href=&quot;#type-option_name&quot;&gt;pktoptions&lt;/a&gt;&lt;/code&gt; で呼び出されたときに &lt;code&gt;&lt;a href=&quot;inet#getopts-2&quot;&gt;inet:getopts/2&lt;/a&gt;&lt;/code&gt; から返されます。</target>
        </trans-unit>
        <trans-unit id="d4dfea1ce63878f9ba8f72e4692fc1e8aa917a62" translate="yes" xml:space="preserve">
          <source>If the port command is aborted, &lt;code&gt;false&lt;/code&gt; is returned, otherwise &lt;code&gt;true&lt;/code&gt;.</source>
          <target state="translated">portコマンドが中止された場合は &lt;code&gt;false&lt;/code&gt; が返され、それ以外の場合は &lt;code&gt;true&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="c1c15fb5c83bfc2a91269d248f12f67e81fee63b" translate="yes" xml:space="preserve">
          <source>If the port driver does not support synchronous control operations.</source>
          <target state="translated">ポートドライバが同期制御動作をサポートしていない場合。</target>
        </trans-unit>
        <trans-unit id="0d0817e3d68cbd798c7a2e44b1c69c87bcdb5eaf" translate="yes" xml:space="preserve">
          <source>If the port driver so decides for any reason (probably something wrong with &lt;code&gt;Operation&lt;/code&gt; or &lt;code&gt;Data&lt;/code&gt;).</source>
          <target state="translated">ポートドライバーが何らかの理由（おそらく &lt;code&gt;Operation&lt;/code&gt; または &lt;code&gt;Data&lt;/code&gt; に問題がある）で決定した場合。</target>
        </trans-unit>
        <trans-unit id="6d151f89de14a3a981ce006759dc3e5172e69a5a" translate="yes" xml:space="preserve">
          <source>If the port has terminated for some reason.</source>
          <target state="translated">何らかの理由でポートが終了した場合。</target>
        </trans-unit>
        <trans-unit id="478c30ae507a35c9772a0df1cd3d96a72d57ca57" translate="yes" xml:space="preserve">
          <source>If the port identified by &lt;code&gt;Port&lt;/code&gt; is not open, &lt;code&gt;undefined&lt;/code&gt; is returned. If the port is closed and the calling process was previously linked to the port, the exit signal from the port is guaranteed to be delivered before &lt;code&gt;port_info/2&lt;/code&gt; returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Port&lt;/code&gt; で識別されるポートが開いていない場合、 &lt;code&gt;undefined&lt;/code&gt; が返されます。ポートが閉じていて、呼び出しプロセスが以前にポートにリンクされていた場合、 &lt;code&gt;port_info/2&lt;/code&gt; が &lt;code&gt;undefined&lt;/code&gt; を返す前に、ポートからの終了信号が確実に配信されます。</target>
        </trans-unit>
        <trans-unit id="853a76f0837b416b340a6bf46f68d0b7ffc26aa7" translate="yes" xml:space="preserve">
          <source>If the port is busy, the calling process is suspended until the port is not busy any more.</source>
          <target state="translated">ポートがビジー状態の場合、ポートがそれ以上ビジー状態でなくなるまで呼び出し処理が中断されます。</target>
        </trans-unit>
        <trans-unit id="8e93ad76f9dc1354beffe48343ad7231e136396f" translate="yes" xml:space="preserve">
          <source>If the port is busy, the calling process is suspended until the port is not busy anymore.</source>
          <target state="translated">ポートがビジー状態の場合、ポートがビジー状態でなくなるまで呼び出し処理が中断されます。</target>
        </trans-unit>
        <trans-unit id="6e75c78d0feb81a1196647eabb58d38723b98522" translate="yes" xml:space="preserve">
          <source>If the port program closes its &lt;code&gt;stdout&lt;/code&gt; without exiting, option &lt;code&gt;exit_status&lt;/code&gt; does not work.</source>
          <target state="translated">ポートプログラムが終了せずに &lt;code&gt;stdout&lt;/code&gt; を閉じる場合、オプション &lt;code&gt;exit_status&lt;/code&gt; は機能しません。</target>
        </trans-unit>
        <trans-unit id="db113293208f7fe3c23990353c9eaabbd0d53db0" translate="yes" xml:space="preserve">
          <source>If the port program is to be updated, the code for the &lt;code&gt;gen_server&lt;/code&gt; can be extended with a &lt;code&gt;code_change&lt;/code&gt; function, which closes the old port and opens a new port. (If necessary, the &lt;code&gt;gen_server&lt;/code&gt; can first request data that must be saved from the port program and pass this data to the new port):</source>
          <target state="translated">ポートプログラムを更新する場合、 &lt;code&gt;gen_server&lt;/code&gt; のコードは、古いポートを閉じて新しいポートを開く &lt;code&gt;code_change&lt;/code&gt; 関数で拡張できます。（必要に応じて、 &lt;code&gt;gen_server&lt;/code&gt; は最初にポートプログラムから保存する必要があるデータを要求し、このデータを新しいポートに渡すことができます）：</target>
        </trans-unit>
        <trans-unit id="38a0c5b075f7274afd3c7af203177b865a7ca3d6" translate="yes" xml:space="preserve">
          <source>If the process calling &lt;code&gt;erlang:resume_process/1&lt;/code&gt; had not previously increased the suspend count on the process identified by &lt;code&gt;Suspendee&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;erlang:resume_process/1&lt;/code&gt; を呼び出すプロセスが、以前に &lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスの中断カウントを増やしていなかった場合。</target>
        </trans-unit>
        <trans-unit id="9584990023c5a96bcc22ea4479bca2d11aee6db9" translate="yes" xml:space="preserve">
          <source>If the process crashes before it has called &lt;code&gt;init_ack/1,2&lt;/code&gt;, &lt;code&gt;Ret = {error, Reason}&lt;/code&gt; will be returned if the calling process traps exits.</source>
          <target state="translated">&lt;code&gt;init_ack/1,2&lt;/code&gt; を呼び出す前にプロセスがクラッシュした場合、呼び出し元のプロセストラップが終了すると、 &lt;code&gt;Ret = {error, Reason}&lt;/code&gt; が返されます。</target>
        </trans-unit>
        <trans-unit id="7dde4932a93f8e946ee90206f0656471a4679385" translate="yes" xml:space="preserve">
          <source>If the process does not exist, a &lt;code&gt;noproc&lt;/code&gt; exception is raised.</source>
          <target state="translated">プロセスが存在しない場合、 &lt;code&gt;noproc&lt;/code&gt; 例外が発生します。</target>
        </trans-unit>
        <trans-unit id="20b1fa7364ea436067720e9fd90a1b6ba70feb9e" translate="yes" xml:space="preserve">
          <source>If the process executing the call does not belong to any application, the function returns &lt;code&gt;undefined&lt;/code&gt;.</source>
          <target state="translated">呼び出しを実行するプロセスがどのアプリケーションにも属していない場合、関数は &lt;code&gt;undefined&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="581efb60de5599bb6f030da89d279c27e9892d5a" translate="yes" xml:space="preserve">
          <source>If the process has any message in its message queue, the process is awakened immediately in the same way as described earlier.</source>
          <target state="translated">プロセスがメッセージキューにメッセージを持っている場合は、先に説明したのと同じ方法で直ちにプロセスを覚醒させます。</target>
        </trans-unit>
        <trans-unit id="084bfd0c081f4fee78443d764a32418d4196357e" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Pid&lt;/code&gt; has a registered name, also an &lt;code&gt;InfoTuple&lt;/code&gt; with item &lt;code&gt;registered_name&lt;/code&gt; is included.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; で識別されるプロセスに登録名がある場合は、項目 &lt;code&gt;registered_name&lt;/code&gt; を持つ &lt;code&gt;InfoTuple&lt;/code&gt; も含まれます。</target>
        </trans-unit>
        <trans-unit id="b81261e08e1610fbb4a750870cfa04d7610f65e5" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Pid&lt;/code&gt; is not an existing local process.</source>
          <target state="translated">&lt;code&gt;Pid&lt;/code&gt; で識別されるプロセスが既存のローカルプロセスでない場合。</target>
        </trans-unit>
        <trans-unit id="6f56d002efe6106da3a84a3e2016c451482b68c7" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; has been suspended more times by the calling process than can be represented by the currently used internal data structures. The system limit is &amp;gt; 2,000,000,000 suspends and will never be lower.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスが、現在使用されている内部データ構造で表すことができる回数よりも、呼び出しプロセスによって一時停止されている場合。システム制限は2,000,000,000を超えるサスペンドであり、これを下回ることはありません。</target>
        </trans-unit>
        <trans-unit id="036dbfabe540cf1c1a2eb6e8693ac0992c59c911" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; has been suspended more times by the calling process than can be represented by the currently used internal data structures. The system limit is greater than 2,000,000,000 suspends and will never be lower.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスが、現在使用されている内部データ構造で表すことができるよりも多くの回数、呼び出しプロセスによって中断されている場合。システム制限は2,000,000,000を超えるサスペンドであり、これより低くなることはありません。</target>
        </trans-unit>
        <trans-unit id="7e6414a88b13aa6c8a9b8f6f5c8c66d946440583" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; is not alive.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスが生きていない場合。</target>
        </trans-unit>
        <trans-unit id="641aca5b56bf74307b3adf498b7c5e8e5c4b1259" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; is the same process as the process calling &lt;code&gt;erlang:suspend_process/2&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; によって識別されるプロセスが &lt;code&gt;erlang:suspend_process/2&lt;/code&gt; を呼び出すプロセスと同じプロセスである場合。</target>
        </trans-unit>
        <trans-unit id="651c23453333c69005cd277bbe1fcf8cf3b85f49" translate="yes" xml:space="preserve">
          <source>If the process identified by &lt;code&gt;Suspendee&lt;/code&gt; resides on another node.</source>
          <target state="translated">&lt;code&gt;Suspendee&lt;/code&gt; によって識別されたプロセスが別のノードにある場合。</target>
        </trans-unit>
        <trans-unit id="e4ca7dc0b151bb1f9cd8a2a4aff6bffd4a0444e4" translate="yes" xml:space="preserve">
          <source>If the process is alive and a single &lt;code&gt;Item&lt;/code&gt; is specified, the returned value is the corresponding &lt;code&gt;InfoTuple&lt;/code&gt;, unless &lt;code&gt;Item =:= registered_name&lt;/code&gt; and the process has no registered name. In this case, &lt;code&gt;[]&lt;/code&gt; is returned. This strange behavior is because of historical reasons, and is kept for backward compatibility.</source>
          <target state="translated">プロセスが &lt;code&gt;InfoTuple&lt;/code&gt; で、単一の &lt;code&gt;Item&lt;/code&gt; が指定されている場合、 &lt;code&gt;Item =:= registered_name&lt;/code&gt; でプロセスに登録名がない場合を除き、戻り値は対応するInfoTupleです。この場合、 &lt;code&gt;[]&lt;/code&gt; が返されます。この奇妙な動作は歴史的な理由によるものであり、下位互換性のために残されています。</target>
        </trans-unit>
        <trans-unit id="1a9a0fee2f5bd85201e0094b8e33070b42b45236" translate="yes" xml:space="preserve">
          <source>If the process is to replace its state using the fun &lt;code&gt;StateFun&lt;/code&gt;, &lt;code&gt;handle_system_msg&lt;/code&gt; calls:</source>
          <target state="translated">プロセスがfun &lt;code&gt;StateFun&lt;/code&gt; を使用して状態を置き換える場合、handle_system_msgは &lt;code&gt;handle_system_msg&lt;/code&gt; 呼び出します。</target>
        </trans-unit>
        <trans-unit id="3df3174e4f4f8d76818b78c9db43318524d54225" translate="yes" xml:space="preserve">
          <source>If the process is to return its state, &lt;code&gt;handle_system_msg&lt;/code&gt; calls:</source>
          <target state="translated">プロセスがその状態を返す場合、 &lt;code&gt;handle_system_msg&lt;/code&gt; は以下を呼び出します。</target>
        </trans-unit>
        <trans-unit id="54575a5d04700d078536008be3d7a71568b2f2f0" translate="yes" xml:space="preserve">
          <source>If the process or port is already registered (already has a name).</source>
          <target state="translated">プロセスやポートが既に登録されている場合(名前が既に登録されている場合)。</target>
        </trans-unit>
        <trans-unit id="72499bc5509543fc3c3a1dc36c89e29a09a5bee5" translate="yes" xml:space="preserve">
          <source>If the process potentially can get many messages in its queue, you are advised to set the flag to &lt;code&gt;off_heap&lt;/code&gt;. This because a garbage collection with many messages placed on the heap can become extremely expensive and the process can consume large amounts of memory. Performance of the actual message passing is however generally better when not using flag &lt;code&gt;off_heap&lt;/code&gt;.</source>
          <target state="translated">プロセスがそのキューで多くのメッセージを取得する可能性がある場合は、フラグを &lt;code&gt;off_heap&lt;/code&gt; に設定することをお勧めします。これは、ヒープに多くのメッセージが配置されたガベージコレクションが非常に高価になり、プロセスが大量のメモリを消費する可能性があるためです。ただし、実際のメッセージパッシングのパフォーマンスは、フラグ &lt;code&gt;off_heap&lt;/code&gt; を使用しないほうが一般に良くなります。</target>
        </trans-unit>
        <trans-unit id="2977b37e3f3fa2bacc4a55c85d9c30b69a4999c8" translate="yes" xml:space="preserve">
          <source>If the process terminates with another reason than &lt;code&gt;normal&lt;/code&gt; or &lt;code&gt;shutdown&lt;/code&gt;, a crash report is generated. For more information about the crash report, see the SASL User's Guide.</source>
          <target state="translated">プロセスが &lt;code&gt;normal&lt;/code&gt; または &lt;code&gt;shutdown&lt;/code&gt; 以外の理由で終了した場合、クラッシュレポートが生成されます。クラッシュレポートの詳細については、 『SASLユーザーズガイド』を参照してください。</target>
        </trans-unit>
        <trans-unit id="24d7be87e875bc81d2fad8f3b3e621f25756c364" translate="yes" xml:space="preserve">
          <source>If the process was spawned using a fun, &lt;code&gt;initial_call/1&lt;/code&gt; no longer returns the fun, but the module, function for the local function implementing the fun, and the arity, for example, &lt;code&gt;{some_module,-work/3-fun-0-,0}&lt;/code&gt; (meaning that the fun was created in function &lt;code&gt;some_module:work/3&lt;/code&gt;). The reason is that keeping the fun would prevent code upgrade for the module, and that a significant amount of memory could be wasted.</source>
          <target state="translated">funを使用してプロセスが生成された場合、 &lt;code&gt;initial_call/1&lt;/code&gt; はfunを返さなくなりますが、モジュール、funを実装するローカル関数の関数、およびアリティ、たとえば &lt;code&gt;{some_module,-work/3-fun-0-,0}&lt;/code&gt; （ファンが関数 &lt;code&gt;some_module:work/3&lt;/code&gt; で作成されたことを意味します）。その理由は、楽しみを維持すると、モジュールのコードアップグレードが妨げられ、大量のメモリが浪費される可能性があるからです。</target>
        </trans-unit>
        <trans-unit id="e063f0c97bd3b9f2ca10490b0726825eb1a13207" translate="yes" xml:space="preserve">
          <source>If the program is too large to be profiled by &lt;code&gt;fprof&lt;/code&gt; or &lt;code&gt;eprof&lt;/code&gt;, &lt;code&gt;cprof&lt;/code&gt; can be used to locate code parts that are to be more thoroughly profiled using &lt;code&gt;fprof&lt;/code&gt; or &lt;code&gt;eprof&lt;/code&gt;.</source>
          <target state="translated">プログラムがでプロファイリングするには大きすぎる場合は &lt;code&gt;fprof&lt;/code&gt; または &lt;code&gt;eprof&lt;/code&gt; 、 &lt;code&gt;cprof&lt;/code&gt; はより徹底的に使用してプロファイルされるコードの部品配置するために使用することができます &lt;code&gt;fprof&lt;/code&gt; または &lt;code&gt;eprof&lt;/code&gt; を。</target>
        </trans-unit>
        <trans-unit id="5c014cbf0073f75ddbbd2b83b405b67fe36da992" translate="yes" xml:space="preserve">
          <source>If the provided public key is not found, the authentication fails.</source>
          <target state="translated">提供された公開鍵が見つからない場合は、認証に失敗します。</target>
        </trans-unit>
        <trans-unit id="f62378f1f957382ee8a052b1c61d99645a009e49" translate="yes" xml:space="preserve">
          <source>If the pure encode/decode performance really is a serious issue, our erl_dist encoder could be used, as the encoding/decoding of the erlang distribution format is much faster than all the other alternatives. Its major drawback is that it is has not been approved as a valid Megaco/H.248 message encoding.</source>
          <target state="translated">純粋なエンコード/デコード性能が本当に深刻な問題であれば、erlang配布フォーマットのエンコード/デコードが他のすべての選択肢よりもはるかに速いので、私たちのerl_distエンコーダを使うことができます。主な欠点は、有効なMegaco/H.248メッセージエンコーディングとして承認されていないことです。</target>
        </trans-unit>
        <trans-unit id="a4deb3a5f5f018b337b5754c6b3743ec42918472" translate="yes" xml:space="preserve">
          <source>If the quantifier is {0}, the assertion is never obeyed during matching. However, it can contain internal capturing parenthesized groups that are called from elsewhere through the subroutine mechanism.</source>
          <target state="translated">定量化子が{0}の場合、マッチング中にアサーションに従うことはありません。しかし、サブルーチンの仕組みを利用して他の場所から呼び出される内部捕獲括弧付きグループを含むことができます。</target>
        </trans-unit>
        <trans-unit id="15a112cbde0806d4bd82db516d60932759dd1e88" translate="yes" xml:space="preserve">
          <source>If the regular expression contains capturing subpatterns, like in:</source>
          <target state="translated">正規表現に in のようなキャプチャサブパターンが含まれている場合。</target>
        </trans-unit>
        <trans-unit id="53c05be9c33eb1a96dab74d00ca7378c333d60b5" translate="yes" xml:space="preserve">
          <source>If the regular expression is previously compiled, the option list can only contain the following options:</source>
          <target state="translated">正規表現が以前にコンパイルされている場合、オプションリストには以下のオプションのみを含めることができます。</target>
        </trans-unit>
        <trans-unit id="22619338e12940ef34ae589b0ca2c131b656f3a0" translate="yes" xml:space="preserve">
          <source>If the regular expression was previously compiled with option &lt;code&gt;unicode&lt;/code&gt;, &lt;code&gt;Subject&lt;/code&gt; is to be provided as a valid Unicode &lt;code&gt;charlist()&lt;/code&gt;, otherwise any &lt;code&gt;iodata()&lt;/code&gt; will do. If compilation is involved and option &lt;code&gt;unicode&lt;/code&gt; is specified, both &lt;code&gt;Subject&lt;/code&gt; and the regular expression are to be specified as valid Unicode &lt;code&gt;charlists()&lt;/code&gt;.</source>
          <target state="translated">正規表現がオプション &lt;code&gt;unicode&lt;/code&gt; を使用して以前にコンパイルされている場合、 &lt;code&gt;Subject&lt;/code&gt; は有効なUnicode &lt;code&gt;charlist()&lt;/code&gt; として提供されます。それ以外の場合は、 &lt;code&gt;iodata()&lt;/code&gt; が提供します。コンパイルが関係し、オプション &lt;code&gt;unicode&lt;/code&gt; が指定されている場合、 &lt;code&gt;Subject&lt;/code&gt; と正規表現の両方が有効なUnicode &lt;code&gt;charlists()&lt;/code&gt; として指定されます。</target>
        </trans-unit>
        <trans-unit id="95cb6c73038fea5d38c77487c266df25c09c2a93" translate="yes" xml:space="preserve">
          <source>If the release is to be upgraded, it must also include the SASL application.</source>
          <target state="translated">リリースをアップグレードする場合は、SASLアプリケーションも含まれていなければなりません。</target>
        </trans-unit>
        <trans-unit id="209b3e073d6604d9f31c31d6ea0d348f2a50c0c5" translate="yes" xml:space="preserve">
          <source>If the release package is to contain a new Erlang runtime system, the &lt;code&gt;bin&lt;/code&gt; directory of the specified runtime system &lt;code&gt;{erts,Dir}&lt;/code&gt; is copied to &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt;.</source>
          <target state="translated">リリースパッケージに新しいErlangランタイムシステムを含める場合、指定したランタイムシステムの &lt;code&gt;bin&lt;/code&gt; ディレクトリ &lt;code&gt;{erts,Dir}&lt;/code&gt; が &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt; にコピーされます。</target>
        </trans-unit>
        <trans-unit id="363cb8688a551cced7d3018ac246f3d6efe48af3" translate="yes" xml:space="preserve">
          <source>If the release package is to contain a new Erlang runtime system, the &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt; directory of the specified runtime system &lt;code&gt;{erts,Dir}&lt;/code&gt; is copied to &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt;. Some erts executables are not copied by default, if you want to include all executables you can give the &lt;code&gt;erts_all&lt;/code&gt; option.</source>
          <target state="translated">リリースパッケージに新しいErlangランタイムシステムが含まれる場合、指定されたランタイムシステム &lt;code&gt;{erts,Dir}&lt;/code&gt; の &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt; ディレクトリが &lt;code&gt;erts-ErtsVsn/bin&lt;/code&gt; にコピーされます。一部のerts実行可能ファイルは、デフォルトではコピーされません。すべての実行可能ファイルを含める場合は、 &lt;code&gt;erts_all&lt;/code&gt; オプションを指定できます。</target>
        </trans-unit>
        <trans-unit id="f636f7002f64f569ae3d458b76d340d2355447e2" translate="yes" xml:space="preserve">
          <source>If the reply arrives after the call times out, no message contaminates the caller's message queue, as this function spawns off a middleman process to act as (a void) destination for such an orphan reply. This feature also makes this function more expensive than &lt;code&gt;call/4&lt;/code&gt; at the caller's end.</source>
          <target state="translated">呼び出しのタイムアウト後に応答が到着した場合、この関数は仲介者プロセスを生成して、このような孤立した応答の（無効な）宛先として機能するため、呼び出し元のメッセージキューを汚染するメッセージはありません。この機能により、この関数は呼び出し側の &lt;code&gt;call/4&lt;/code&gt; よりも高価になります。</target>
        </trans-unit>
        <trans-unit id="97bf926e93bf111383afef246646bb072493b10d" translate="yes" xml:space="preserve">
          <source>If the reply arrives after the call times out, no message contaminates the caller's message queue.</source>
          <target state="translated">呼がタイムアウトした後に返信が到着した場合、発信者のメッセージキューを汚染するメッセージはありません。</target>
        </trans-unit>
        <trans-unit id="72de28ff26e478c709ccef28f5ec9b72f45a4e23" translate="yes" xml:space="preserve">
          <source>If the report browser is used offline, the reports can be copied to another directory specified when starting the browser. If no such directory is specified, the browser reads reports from the SASL &lt;code&gt;error_logger_mf_dir&lt;/code&gt;.</source>
          <target state="translated">レポートブラウザーをオフラインで使用する場合、ブラウザーの起動時に指定した別のディレクトリにレポートをコピーできます。そのようなディレクトリが指定されていない場合、ブラウザはSASL &lt;code&gt;error_logger_mf_dir&lt;/code&gt; からレポートを読み取ります。</target>
        </trans-unit>
        <trans-unit id="d403abf04385b59be919058fa57d3e12c76fe7b9" translate="yes" xml:space="preserve">
          <source>If the request functions for the SFTP channel return &lt;code&gt;{error, timeout}&lt;/code&gt;, no answer was received from the server within the expected time.</source>
          <target state="translated">SFTPチャネルの要求関数が &lt;code&gt;{error, timeout}&lt;/code&gt; 返した場合、予想される時間内にサーバーから応答がありませんでした。</target>
        </trans-unit>
        <trans-unit id="68fcf1aa779848125b39efeaf9b8566022844620" translate="yes" xml:space="preserve">
          <source>If the request is an HTTP/1.1 request, the URI can be in the absolute URI format. In that case, &lt;code&gt;httpd&lt;/code&gt; saves the absolute URI in this field. An Example of an absolute URI is &lt;code&gt;&quot;http://ServerName:Part/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt;</source>
          <target state="translated">要求がHTTP / 1.1要求の場合、URIは絶対URI形式にすることができます。その場合、 &lt;code&gt;httpd&lt;/code&gt; はこのフィールドに絶対URIを保存します。絶対URIの例は &lt;code&gt;&quot;http://ServerName:Part/cgi-bin/find.pl?person=jocke&quot;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="bf8c6e0e4e32eeefc924406bd2971a4ed6ef9777" translate="yes" xml:space="preserve">
          <source>If the request is successfully encoded and sent but the answer times out then a &lt;code&gt;handle_error/4&lt;/code&gt; callback takes place with &lt;code&gt;Reason = timeout&lt;/code&gt;.</source>
          <target state="translated">リクエストが正常にエンコードされて送信されたが、応答がタイムアウトした場合、 &lt;code&gt;Reason = timeout&lt;/code&gt; &lt;code&gt;handle_error/4&lt;/code&gt; コールバックが発生します。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
