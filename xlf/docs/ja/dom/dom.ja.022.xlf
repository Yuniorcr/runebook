<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="dom">
    <body>
      <group id="dom">
        <trans-unit id="e0f19ec1e06b9ae4900d618b18f622f02a09a801" translate="yes" xml:space="preserve">
          <source>In other words, any option contained within the &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; element may be part of the results, but option groups are not included in the list.</source>
          <target state="translated">つまり、 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 要素内に含まれるオプションは結果の一部になる可能性がありますが、オプショングループはリストに含まれません。</target>
        </trans-unit>
        <trans-unit id="97a7c108b5c6140b4173059986003f1376e968b1" translate="yes" xml:space="preserve">
          <source>In other words, if window &lt;code&gt;A&lt;/code&gt; opens window &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;B.opener&lt;/code&gt; returns &lt;code&gt;A&lt;/code&gt;.</source>
          <target state="translated">つまり、ウィンドウ &lt;code&gt;A&lt;/code&gt; がウィンドウ &lt;code&gt;B&lt;/code&gt; を開いた場合、 &lt;code&gt;B.opener&lt;/code&gt; は &lt;code&gt;A&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="7ce78e8d1d2a0d50c2a376afec5e90ceb657b19e" translate="yes" xml:space="preserve">
          <source>In other words, the DOM tree for the following document will look like the image below (using &quot;\n&quot; to represent newlines):</source>
          <target state="translated">つまり、以下のドキュメントの DOM ツリーは、以下の画像のようになります (改行を表すために &quot;\n&quot; を使用します)。</target>
        </trans-unit>
        <trans-unit id="5c1995dd1809228319a7049ef9140329c0aa7889" translate="yes" xml:space="preserve">
          <source>In other words, the current acceleration of the sensor's rotation around the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="translated">つまり、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; 軸を中心としたセンサーの回転の現在の加速度です。</target>
        </trans-unit>
        <trans-unit id="e24aa6a1d2a326510cfb988f82d3d16ac3740449" translate="yes" xml:space="preserve">
          <source>In other words, the current acceleration of the sensor, along the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="translated">つまり、 &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; 軸に沿ったセンサーの現在の加速度。</target>
        </trans-unit>
        <trans-unit id="26342f65c936d9d1b499fb61c1d5657e37c0d6de" translate="yes" xml:space="preserve">
          <source>In other words, the current velocity at which the sensor is moving along the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="translated">つまり、センサーが &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; 軸に沿って移動している現在の速度です。</target>
        </trans-unit>
        <trans-unit id="c8756d342164e2002ce05df955f382173498e783" translate="yes" xml:space="preserve">
          <source>In other words, the current velocity at which the sensor is rotating around the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, and &lt;code&gt;z&lt;/code&gt; axes.</source>
          <target state="translated">つまり、センサーが &lt;code&gt;x&lt;/code&gt; 、 &lt;code&gt;y&lt;/code&gt; 、 &lt;code&gt;z&lt;/code&gt; 軸の周りを回転している現在の速度です。</target>
        </trans-unit>
        <trans-unit id="aa5bb749fa017e61f3287c0d596f0a5cd62ab091" translate="yes" xml:space="preserve">
          <source>In other words, until you've been notified that nodes are being split off from your monitored subtree, you'll get notifications of changes to that split-off subtree and its nodes. This prevents you from missing changes that occur after the connection is severed and before you have a chance to specifically begin monitoring the moved node or subtree for changes.</source>
          <target state="translated">つまり、監視しているサブツリーからノードが分割されたことが通知されるまでは、分割されたサブツリーとそのノードの変更が通知されます。これにより、接続が切断された後、移動したノードやサブツリーの変更の監視を開始する前に発生した変更を見逃すことがなくなります。</target>
        </trans-unit>
        <trans-unit id="b1886b08f743d589301dd5bab055f2e5446d6484" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">当社では&lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;Emogotchiデモ&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;ソースコードを参照&lt;/a&gt;）、我々は簡単なの実行 &lt;code&gt;spawnNotification()&lt;/code&gt; 私たちは、通知を起動したいときに関数を-これは私たちが望むボディ、アイコンとタイトルを指定する引数が渡され、それが必要な作成 &lt;code&gt;options&lt;/code&gt; オブジェクトや火災&lt;a href=&quot;notification&quot;&gt; &lt;code&gt;Notification()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用した通知。</target>
        </trans-unit>
        <trans-unit id="3afbb59e3e9bdc76ed12c72cfc11652669eb6607" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;code&gt;Notification()&lt;/code&gt; constructor.</source>
          <target state="translated">当社では&lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;Emogotchiデモ&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;ソースコードを参照&lt;/a&gt;）、我々は簡単なの実行 &lt;code&gt;spawnNotification()&lt;/code&gt; 私たちは、通知を起動したいときに関数を-これは私たちが望むボディ、アイコンとタイトルを指定する引数が渡され、それが必要な作成 &lt;code&gt;options&lt;/code&gt; オブジェクトや火災 &lt;code&gt;Notification()&lt;/code&gt; コンストラクタを使用した通知。</target>
        </trans-unit>
        <trans-unit id="90d003531c911f7be4dd1c486c92d6ac6b8bf562" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-array-buffer/&quot;&gt;fetch array buffer live&lt;/a&gt;, we have a Play button. When pressed, the &lt;code&gt;getData()&lt;/code&gt; function is run. Note that before playing full audio file will be downloaded. If you need to play ogg during downloading (stream it) - consider &lt;a href=&quot;../htmlaudioelement&quot;&gt;&lt;code&gt;HTMLAudioElement&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-array-buffer/&quot;&gt;、ライブバッファ配列フェッチ&lt;/a&gt;、我々は再生ボタンを持っています。押すと、 &lt;code&gt;getData()&lt;/code&gt; 関数が実行されます。再生する前に、完全なオーディオファイルがダウンロードされることに注意してください。ダウンロード中にoggを再生する必要がある場合（ストリーミングする）&lt;a href=&quot;../htmlaudioelement&quot;&gt; &lt;code&gt;HTMLAudioElement&lt;/code&gt; &lt;/a&gt;検討してください：</target>
        </trans-unit>
        <trans-unit id="3473029b722643bd0de6270c006a9471e3640d38" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/scrolltooptions&quot;&gt;scrolltooptions example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/dom-examples/scrolltooptions/&quot;&gt;see it live&lt;/a&gt;) we include a form that allows the user to enter three values &amp;mdash; two numbers representing the left and top properties (i.e. the positions to scroll to along the X and Y axes), and a checkbox indicating whether they want smooth scrolling enabled or not.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/scrolltooptions&quot;&gt;scrolltooptionsの例&lt;/a&gt;（&lt;a href=&quot;https://mdn.github.io/dom-examples/scrolltooptions/&quot;&gt;それが生きる見る&lt;/a&gt; leftとtopプロパティを表す2つの数値（XとY軸に沿っへスクロールするすなわち位置）、およびかどうかを示すチェックボックス- ）私たちは、ユーザーが3つの値を入力できるようにするためのフォームを含めますスムーズスクロールを有効にするかどうかを指定します。</target>
        </trans-unit>
        <trans-unit id="c64086b9539917286e2d87d93d5db7c8c949df9f" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams&quot;&gt;dom-examples/streams&lt;/a&gt; repo you&amp;rsquo;ll find a &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/streams/simple-writer/index.html&quot;&gt;Simple writer example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-writer/&quot;&gt;see it live also&lt;/a&gt;). This takes a given message and writes it into a writable stream, displaying each chunk on the UI as it is written to the stream and also displaying the whole message on the UI when writing has finished.</source>
          <target state="translated">私たちの&lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams&quot;&gt;dom-examples / streams&lt;/a&gt;リポジトリには、&lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/streams/simple-writer/index.html&quot;&gt;シンプルなライターの例があります&lt;/a&gt;（&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-writer/&quot;&gt;これもライブでご覧ください&lt;/a&gt;）。これは、指定されたメッセージを取得して書き込み可能なストリームに書き込み、ストリームに書き込まれるときに各チャンクをUIに表示し、書き込みが完了するとメッセージ全体をUIに表示します。</target>
        </trans-unit>
        <trans-unit id="85832bf0175fde6ba53c86bd83b82b6cef373f12" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/blob/master/fetch-with-init-then-request/index.html&quot;&gt;Fetch with init then Request example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-with-init-then-request/&quot;&gt;Fetch Request init live&lt;/a&gt;) we do the same thing except that we pass in an init object when we invoke &lt;code&gt;fetch()&lt;/code&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/blob/master/fetch-with-init-then-request/index.html&quot;&gt;、リクエストの例initで取得&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-with-init-then-request/&quot;&gt;、ライブのinitフェッチ要求を&lt;/a&gt;、我々は我々が起動するとき、我々は初期化オブジェクトを渡すことを除いて同じことを行う） &lt;code&gt;fetch()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5332e06ca745e4910ad89f54152ef29d7fe3c242" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request&quot;&gt;fetch request example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;fetch request live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a JPG. When the fetch is successful, we read a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;blob()&lt;/code&gt;, put it into an object URL using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and then set that URL as the source of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to display the image.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request&quot;&gt;フェッチ要求の例&lt;/a&gt;（実行&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;、我々が使用して新しい要求を作成）&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request.Request&lt;/code&gt; &lt;/a&gt;そして、コンストラクタをJPGを取得するためにそれを使用。フェッチが成功したら、 &lt;code&gt;blob()&lt;/code&gt; を使用して応答から&lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;Blob&lt;/code&gt; &lt;/a&gt;を読み取り、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; &lt;/a&gt;を使用してそれをオブジェクトURLに入れ、そのURLを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素のソースとして設定して画像を表示します。</target>
        </trans-unit>
        <trans-unit id="0d101dce8f5c51f9422d663e004d452e7e16ec9b" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request&quot;&gt;fetch request example&lt;/a&gt; (run &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;fetch request live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a JPG. When the fetch is successful, we read a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;blob()&lt;/code&gt;, put it into an object URL using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and then set that URL as the source of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to display the image.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-request&quot;&gt;フェッチ要求の例&lt;/a&gt;（実行&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;、我々が使用して新しい要求を作成）&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request.Request&lt;/code&gt; &lt;/a&gt;そして、コンストラクタをJPGを取得するためにそれを使用。フェッチが成功すると、 &lt;code&gt;blob()&lt;/code&gt; を使用して応答から&lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;Blob&lt;/code&gt; &lt;/a&gt;を読み取り、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトURLに配置し、そのURLを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素のソースとして設定して画像を表示します。</target>
        </trans-unit>
        <trans-unit id="981ffc61170f85abb6ad923d558244f17fb966ec" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, extract a blob from the response using &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of it using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display this in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response&quot;&gt;応答例を取得する&lt;/a&gt;（参照&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;、ライブレスポンスを取得&lt;/a&gt;）当社は、新規作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用してオブジェクト&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;それをJPGパスを渡して、コンストラクタを。我々は、次に使用して、このフェッチ要求&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;/a&gt;、使用応答からブロブを抽出&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; を&lt;/a&gt;使用してのオブジェクトURLのアウトを作成し、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; を&lt;/a&gt;、そして、これを表示する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="47efe581808e3a6301104c72c40dd7b8c644c71a" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, extract a blob from the response using &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of it using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display this in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response&quot;&gt;応答例を取得する&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;、ライブレスポンスを取得&lt;/a&gt;）当社は、新規作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用してオブジェクト&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;それをJPGパスを渡して、コンストラクタを。我々は、次に使用して、このフェッチ要求&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;/a&gt;、使用応答からブロブを抽出&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; を&lt;/a&gt;使用してのオブジェクトURLのアウトを作成し、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; を&lt;/a&gt;、そして、これを表示する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="32986a6f47816d4bd1d2722cbc2f89d5eb06ee4c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response-clone&quot;&gt;Fetch Response clone example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response-clone/&quot;&gt;Fetch Response clone live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;. When the fetch resolves successfully, we clone it, extract a blob from both responses using two &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; calls, create object URLs out of the blobs using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display them in two separate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response-clone&quot;&gt;レスポンスのクローンの例を取得する&lt;/a&gt;（参照&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response-clone/&quot;&gt;、ライブレスポンスクローンを取得&lt;/a&gt;）当社は、新規作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用してオブジェクト&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;それをJPGパスを渡して、コンストラクタを。次に、fetch &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;/a&gt;を使用してこのリクエストをフェッチします。首尾よく解決さをフェッチするとき、私たちは2つの使用して、両方の応答からブロブを抽出し、それを複製し&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; の&lt;/a&gt;使用ブロブのうち、対象のURLを作成し、呼び出しを&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; を&lt;/a&gt;、2つの別々に表示し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素。</target>
        </trans-unit>
        <trans-unit id="f7428450a5e166dfe2cdf66308a9b3668fafec2d" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response-clone&quot;&gt;Fetch Response clone example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response-clone/&quot;&gt;Fetch Response clone live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;. When the fetch resolves successfully, we clone it, extract a blob from both responses using two &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; calls, create object URLs out of the blobs using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display them in two separate &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; elements.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/gh-pages/fetch-response-clone&quot;&gt;レスポンスのクローンの例を取得する&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response-clone/&quot;&gt;、ライブレスポンスクローンを取得&lt;/a&gt;）当社は、新規作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用してオブジェクト&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;それをJPGパスを渡して、コンストラクタを。次に、fetch &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;/a&gt;を使用してこのリクエストをフェッチします。首尾よく解決さをフェッチするとき、私たちは2つの使用して、両方の応答からブロブを抽出し、それを複製し&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; の&lt;/a&gt;使用ブロブのうち、対象のURLを作成し、呼び出しを&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; を&lt;/a&gt;、2つの別々に表示し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素。</target>
        </trans-unit>
        <trans-unit id="d92cc65101815d73ef9b8d0210a121eef752599a" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/basic-fetch&quot;&gt;basic fetch example&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/fetch-examples/basic-fetch/&quot;&gt;run example live&lt;/a&gt;) we use a simple &lt;code&gt;fetch()&lt;/code&gt; call to grab an image and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; tag. The &lt;code&gt;fetch()&lt;/code&gt; call returns a promise, which resolves with the &lt;code&gt;Response&lt;/code&gt; object associated with the resource fetch operation. You'll notice that since we are requesting an image, we need to run &lt;a href=&quot;body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; implements body) to give the response its correct MIME type.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/basic-fetch&quot;&gt;基本的な例をフェッチ&lt;/a&gt;（&lt;a href=&quot;http://mdn.github.io/fetch-examples/basic-fetch/&quot;&gt;実行例ライブ&lt;/a&gt;我々は簡単な使用） &lt;code&gt;fetch()&lt;/code&gt; 画像を取得し、それを表示するには、コール&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;タグを。 &lt;code&gt;fetch()&lt;/code&gt; 呼び出しが戻ると解決さ約束、 &lt;code&gt;Response&lt;/code&gt; リソースに関連付けられたオブジェクトが操作をフェッチします。画像をリクエストしているので、&lt;a href=&quot;body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt; implements body）を実行して、応答に正しいMIMEタイプを与える必要があることに気づくでしょう。</target>
        </trans-unit>
        <trans-unit id="3c3708ec93d13a062b8e98bc5aee35d05de5a091" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/basic-fetch&quot;&gt;basic fetch example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/fetch-examples/basic-fetch/&quot;&gt;run example live&lt;/a&gt;) we use a simple &lt;code&gt;fetch()&lt;/code&gt; call to grab an image and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; tag. The &lt;code&gt;fetch()&lt;/code&gt; call returns a promise, which resolves with the &lt;code&gt;Response&lt;/code&gt; object associated with the resource fetch operation. You'll notice that since we are requesting an image, we need to run &lt;a href=&quot;body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; (&lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; implements body) to give the response its correct MIME type.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/basic-fetch&quot;&gt;基本的な例をフェッチ&lt;/a&gt;（&lt;a href=&quot;https://mdn.github.io/fetch-examples/basic-fetch/&quot;&gt;実行例ライブ&lt;/a&gt;我々は簡単な使用） &lt;code&gt;fetch()&lt;/code&gt; 画像を取得し、それを表示するには、コール&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;タグを。 &lt;code&gt;fetch()&lt;/code&gt; 呼び出しが戻ると解決さ約束、 &lt;code&gt;Response&lt;/code&gt; リソースに関連付けられたオブジェクトが操作をフェッチします。画像をリクエストしているので、&lt;a href=&quot;body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; &lt;/a&gt;（&lt;a href=&quot;response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;はbodyを実装します）を実行して、応答に正しいMIMEタイプを与える必要があることに気付くでしょう。</target>
        </trans-unit>
        <trans-unit id="f5a5837fac2c53936e626ad72a9dc42b1ca8ce3d" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-json&quot;&gt;fetch json example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-json/&quot;&gt;fetch json live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a &lt;code&gt;.json&lt;/code&gt; file. When the fetch is successful, we read and parse the data using &lt;code&gt;json()&lt;/code&gt;, then read values out of the resulting objects as you'd expect and insert them into list items to display our product data.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-json&quot;&gt;、JSONの例をフェッチ&lt;/a&gt;（実行は&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-json/&quot;&gt;ライブJSONフェッチ&lt;/a&gt;）、我々は、使用して新しい要求を作成&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request.Request&lt;/code&gt; &lt;/a&gt;フェッチするためにそれを使用し、その後、コンストラクタを &lt;code&gt;.json&lt;/code&gt; のファイルを。フェッチが成功すると、 &lt;code&gt;json()&lt;/code&gt; を使用してデータを読み取って解析し、期待どおりに結果のオブジェクトから値を読み取り、リストアイテムに挿入して製品データを表示します。</target>
        </trans-unit>
        <trans-unit id="7ae241e56a62bc67c9d4136f6fe8a9f4a2e03d27" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-json&quot;&gt;fetch json example&lt;/a&gt; (run &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-json/&quot;&gt;fetch json live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a &lt;code&gt;.json&lt;/code&gt; file. When the fetch is successful, we read and parse the data using &lt;code&gt;json()&lt;/code&gt;, then read values out of the resulting objects as you'd expect and insert them into list items to display our product data.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-json&quot;&gt;、JSONの例をフェッチ&lt;/a&gt;（実行は&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-json/&quot;&gt;ライブJSONフェッチ&lt;/a&gt;）、我々は、使用して新しい要求を作成&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request.Request&lt;/code&gt; &lt;/a&gt;フェッチするためにそれを使用し、その後、コンストラクタを &lt;code&gt;.json&lt;/code&gt; のファイルを。フェッチが成功すると、 &lt;code&gt;json()&lt;/code&gt; を使用してデータを読み取って解析し、期待どおりに結果のオブジェクトから値を読み取り、それらをリストアイテムに挿入して、製品データを表示します。</target>
        </trans-unit>
        <trans-unit id="33598b258d8cdb59feb13ce2af053fa7a45fa3e5" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;Fetch Request example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;Fetch Request live&lt;/a&gt;) we create a new &lt;code&gt;Request&lt;/code&gt; object using the constructor, then fetch it using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;GlobalFetch.fetch&lt;/code&gt;&lt;/a&gt; call. Since we are fetching an image, we run &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; on the response to give it the proper MIME type so it will be handled properly, then create an Object URL of it and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;リクエストの例を取得&lt;/a&gt;（参照&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;）我々は新しい作成 &lt;code&gt;Request&lt;/code&gt; 使用して、それを取得、その後、コンストラクタを使用してオブジェクトを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;GlobalFetch.fetch&lt;/code&gt; の&lt;/a&gt;コールを。画像をフェッチしているので、応答に対して&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; &lt;/a&gt;を実行して適切なMIMEタイプを与え、適切に処理されるようにし、次にそのオブジェクトURLを作成して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に表示します。</target>
        </trans-unit>
        <trans-unit id="1ac15390cc020979be92c6b7e3dd8af32b67ef87" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;Fetch Request example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;Fetch Request live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the relevant constructor, then fetch it using a &lt;code&gt;fetch()&lt;/code&gt; call. Since we are fetching an image, we run &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob()&lt;/code&gt;&lt;/a&gt; on the response to give it the proper MIME type so it will be handled properly, then create an Object URL of it and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">当社で&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;リクエストの例を取得&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;）我々は新しい作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用して、それを取得、その後、関連するコンストラクタを使用してオブジェクトを &lt;code&gt;fetch()&lt;/code&gt; の呼び出しを。画像をフェッチしているので、レスポンスに対して&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob()&lt;/code&gt; &lt;/a&gt;を実行して適切なMIMEタイプを与え、適切に処理されるようにしてから、そのオブジェクトURLを作成して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に表示します。</target>
        </trans-unit>
        <trans-unit id="d1791256ce709863d7e36df1d89b06276f8f86aa" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;Fetch Request example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;Fetch Request live&lt;/a&gt;) we create a new &lt;code&gt;Request&lt;/code&gt; object using the constructor, then fetch it using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;GlobalFetch.fetch&lt;/code&gt;&lt;/a&gt; call. Since we are fetching an image, we run &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt; on the response to give it the proper MIME type so it will be handled properly, then create an Object URL of it and display it in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;リクエストの例を取得&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;）我々は新しい作成 &lt;code&gt;Request&lt;/code&gt; 使用して、それを取得、その後、コンストラクタを使用してオブジェクトを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;GlobalFetch.fetch&lt;/code&gt; の&lt;/a&gt;コールを。画像をフェッチしているので、応答に対して&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; &lt;/a&gt;を実行して適切なMIMEタイプを指定し、適切に処理されるようにします。次に、画像のオブジェクトURLを作成し、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に表示します。</target>
        </trans-unit>
        <trans-unit id="9b73fce4a7cf8dd740fcaa9165fde287eca56939" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;fetch request example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;fetch request live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a JPG. When the fetch is successful, we read a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;blob()&lt;/code&gt;, put it into an object URL using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and then set that URL as the source of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to display the image.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;フェッチ要求の例&lt;/a&gt;（実行&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;、我々が使用して新しい要求を作成）&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request.Request&lt;/code&gt; &lt;/a&gt;そして、コンストラクタをJPGを取得するためにそれを使用。フェッチが成功したら、 &lt;code&gt;blob()&lt;/code&gt; を使用して応答から&lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;Blob&lt;/code&gt; &lt;/a&gt;を読み取り、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; &lt;/a&gt;を使用してそれをオブジェクトURLに入れ、そのURLを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素のソースとして設定して画像を表示します。</target>
        </trans-unit>
        <trans-unit id="5063e155aa1435ac6704658a0d22b5a136569cc3" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;fetch request example&lt;/a&gt; (run &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;fetch request live&lt;/a&gt;), we create a new request using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request.Request&lt;/code&gt;&lt;/a&gt; constructor, then use it to fetch a JPG. When the fetch is successful, we read a &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; out of the response using &lt;code&gt;blob()&lt;/code&gt;, put it into an object URL using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and then set that URL as the source of an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt; element to display the image.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request&quot;&gt;フェッチ要求の例&lt;/a&gt;（実行&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request/&quot;&gt;ライブフェッチ要求&lt;/a&gt;、我々が使用して新しい要求を作成）&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request.Request&lt;/code&gt; &lt;/a&gt;そして、コンストラクタをJPGを取得するためにそれを使用。フェッチが成功すると、 &lt;code&gt;blob()&lt;/code&gt; を使用して応答から&lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;Blob&lt;/code&gt; &lt;/a&gt;を読み取り、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; &lt;/a&gt;を使用してオブジェクトURLに配置し、そのURLを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;要素のソースとして設定して画像を表示します。</target>
        </trans-unit>
        <trans-unit id="e49ee4ec9b5aad393af7294108af5db41d880394" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request-with-init&quot;&gt;Fetch Request with init example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request-with-init/&quot;&gt;Fetch Request init live&lt;/a&gt;) we do the same thing except that we pass in an init object when we invoke &lt;code&gt;fetch()&lt;/code&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request-with-init&quot;&gt;初期化の例とフェッチ要求&lt;/a&gt;（参照&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-request-with-init/&quot;&gt;、ライブのinitフェッチ要求を&lt;/a&gt;、我々は我々が起動するとき、我々は初期化オブジェクトを渡すことを除いて同じことを行う） &lt;code&gt;fetch()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="546fd7ea9d0c39175d2380caf1fd3c0790c4d912" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request-with-init&quot;&gt;Fetch Request with init example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request-with-init/&quot;&gt;Fetch Request init live&lt;/a&gt;) we do the same thing except that we pass in an init object when we invoke &lt;code&gt;fetch()&lt;/code&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-request-with-init&quot;&gt;初期化の例とフェッチ要求&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-request-with-init/&quot;&gt;、ライブのinitフェッチ要求を&lt;/a&gt;、我々は我々が起動するとき、我々は初期化オブジェクトを渡すことを除いて同じことを行う） &lt;code&gt;fetch()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="fa15d07ba21295882ff149b53a3dba8adc14c5dc" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, extract a blob from the response using &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of it using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display this in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;応答例を取得する&lt;/a&gt;（参照&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;、ライブレスポンスを取得&lt;/a&gt;）当社は、新規作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用してオブジェクト&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;それをJPGパスを渡して、コンストラクタを。我々は、次に使用して、このフェッチ要求&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;/a&gt;、使用応答からブロブを抽出&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; を&lt;/a&gt;使用してのオブジェクトURLのアウトを作成し、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; を&lt;/a&gt;、そして、これを表示する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="665c8210d0a86cdfd980ce3198e2c1e460bd929c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;code&gt;Response&lt;/code&gt; object using the constructor, passing it a new &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; as a body, and an init object containing a custom &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;statusText&lt;/code&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;応答例を取得する&lt;/a&gt;（参照&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;、ライブレスポンスを取得し&lt;/a&gt;、我々は新しい作成する） &lt;code&gt;Response&lt;/code&gt; それに新しい渡し、コンストラクタを使用してオブジェクトを&lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;Blob&lt;/code&gt; &lt;/a&gt;体として、およびカスタム含む初期化オブジェクト &lt;code&gt;status&lt;/code&gt; と &lt;code&gt;statusText&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="5fe58fa424b62eab748986ef8e888fcc9f78c8c8" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;a href=&quot;../request&quot;&gt;&lt;code&gt;Request&lt;/code&gt;&lt;/a&gt; object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, passing it a JPG path. We then fetch this request using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/a&gt;, extract a blob from the response using &lt;a href=&quot;../body/blob&quot;&gt;&lt;code&gt;Body.blob&lt;/code&gt;&lt;/a&gt;, create an object URL out of it using &lt;a href=&quot;../url/createobjecturl&quot;&gt;&lt;code&gt;URL.createObjectURL&lt;/code&gt;&lt;/a&gt;, and display this in an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt;&lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;応答例を取得する&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;、ライブレスポンスを取得&lt;/a&gt;）当社は、新規作成&lt;a href=&quot;../request&quot;&gt; &lt;code&gt;Request&lt;/code&gt; &lt;/a&gt;使用してオブジェクト&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;それをJPGパスを渡して、コンストラクタを。我々は、次に使用して、このフェッチ要求&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GlobalFetch/fetch&quot;&gt; &lt;code&gt;fetch()&lt;/code&gt; &lt;/a&gt;、使用応答からブロブを抽出&lt;a href=&quot;../body/blob&quot;&gt; &lt;code&gt;Body.blob&lt;/code&gt; を&lt;/a&gt;使用してのオブジェクトURLのアウトを作成し、&lt;a href=&quot;../url/createobjecturl&quot;&gt; &lt;code&gt;URL.createObjectURL&lt;/code&gt; を&lt;/a&gt;、そして、これを表示する&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/img&quot;&gt; &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6c6b787266439d11eee12f8d3fb894fc6c665818" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;Fetch Response example&lt;/a&gt; (see &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;Fetch Response live&lt;/a&gt;) we create a new &lt;code&gt;Response&lt;/code&gt; object using the constructor, passing it a new &lt;a href=&quot;../blob&quot;&gt;&lt;code&gt;Blob&lt;/code&gt;&lt;/a&gt; as a body, and an init object containing a custom &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;statusText&lt;/code&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-response&quot;&gt;応答例を取得する&lt;/a&gt;（参照&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-response/&quot;&gt;、ライブレスポンスを取得し&lt;/a&gt;、我々は新しい作成する） &lt;code&gt;Response&lt;/code&gt; それに新しい渡し、コンストラクタを使用してオブジェクトを&lt;a href=&quot;../blob&quot;&gt; &lt;code&gt;Blob&lt;/code&gt; &lt;/a&gt;体として、およびカスタム含む初期化オブジェクト &lt;code&gt;status&lt;/code&gt; と &lt;code&gt;statusText&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="96e27f02256264c5a91b2636219a5045584adc7e" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-text&quot;&gt;fetch text example&lt;/a&gt; (run &lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-text/&quot;&gt;fetch text live&lt;/a&gt;), we have an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot;&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/a&gt; element and three links (stored in the &lt;code&gt;myLinks&lt;/code&gt; array.) First, we loop through all of these and give each one an &lt;code&gt;onclick&lt;/code&gt; event handler so that the &lt;code&gt;getData()&lt;/code&gt; function is run &amp;mdash; with the link's &lt;code&gt;data-page&lt;/code&gt; identifier passed to it as an argument &amp;mdash; when one of the links is clicked.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-text&quot;&gt;、テキストの例をフェッチ&lt;/a&gt;（実行は&lt;a href=&quot;http://mdn.github.io/fetch-examples/fetch-text/&quot;&gt;ライブテキストを取得&lt;/a&gt;）、我々が持っている&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot;&gt; &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; &lt;/a&gt;要素と3つのリンク（に保存された &lt;code&gt;myLinks&lt;/code&gt; 配列を。）これらのすべてを第一に、我々ループし、それぞれを与える &lt;code&gt;onclick&lt;/code&gt; のようにイベントハンドラ &lt;code&gt;getData()&lt;/code&gt; 関数は、リンクの1つがクリックされたときに、引数として渡されたリンクの &lt;code&gt;data-page&lt;/code&gt; 識別子を使用して実行されます。</target>
        </trans-unit>
        <trans-unit id="72a9b5f3c66003cb4e2114ac6995b4b31910f37c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-text&quot;&gt;fetch text example&lt;/a&gt; (run &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-text/&quot;&gt;fetch text live&lt;/a&gt;), we have an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot;&gt;&lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt;&lt;/a&gt; element and three links (stored in the &lt;code&gt;myLinks&lt;/code&gt; array.) First, we loop through all of these and give each one an &lt;code&gt;onclick&lt;/code&gt; event handler so that the &lt;code&gt;getData()&lt;/code&gt; function is run &amp;mdash; with the link's &lt;code&gt;data-page&lt;/code&gt; identifier passed to it as an argument &amp;mdash; when one of the links is clicked.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/fetch-examples/tree/master/fetch-text&quot;&gt;、テキストの例をフェッチ&lt;/a&gt;（実行は&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-text/&quot;&gt;ライブテキストを取得&lt;/a&gt;）、我々が持っている&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/article&quot;&gt; &lt;code&gt;&amp;lt;article&amp;gt;&lt;/code&gt; &lt;/a&gt;要素と3つのリンク（に保存された &lt;code&gt;myLinks&lt;/code&gt; 配列を。）これらのすべてを第一に、我々ループし、それぞれを与える &lt;code&gt;onclick&lt;/code&gt; のようにイベントハンドラ &lt;code&gt;getData()&lt;/code&gt; 関数は、リンクの1つがクリックされると、リンクの &lt;code&gt;data-page&lt;/code&gt; 識別子が引数として渡されて実行されます。</target>
        </trans-unit>
        <trans-unit id="c74a1899d542a1f17ec28a78d061c7d3c322554c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/simple-shared-worker&quot;&gt;Basic shared worker example&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/simple-shared-worker/&quot;&gt;run shared worker&lt;/a&gt;), we have two HTML pages, each of which uses some JavaScript to perform a simple calculation. The different scripts are using the same worker file to perform the calculation &amp;mdash; they can both access it, even if their pages are running inside different windows.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/simple-shared-worker&quot;&gt;基本的な共有ワーカー例&lt;/a&gt;（&lt;a href=&quot;http://mdn.github.io/simple-shared-worker/&quot;&gt;共有のワーカーを実行&lt;/a&gt;）、我々は単純な計算を実行するために、いくつかのJavaScriptを使用して、それぞれが2つのHTMLページを持っています。異なるスクリプトは、同じワーカーファイルを使用して計算を実行しています&amp;mdash;ページが異なるウィンドウ内で実行されている場合でも、両方がアクセスできます。</target>
        </trans-unit>
        <trans-unit id="62205317399cbeb87e40ddac8e483eba79380741" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/simple-shared-worker&quot;&gt;Basic shared worker example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/simple-shared-worker/&quot;&gt;run shared worker&lt;/a&gt;), we have two HTML pages, each of which uses some JavaScript to perform a simple calculation. The different scripts are using the same worker file to perform the calculation &amp;mdash; they can both access it, even if their pages are running inside different windows.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/simple-shared-worker&quot;&gt;基本的な共有ワーカー例&lt;/a&gt;（&lt;a href=&quot;https://mdn.github.io/simple-shared-worker/&quot;&gt;共有のワーカーを実行&lt;/a&gt;）、我々は単純な計算を実行するために、いくつかのJavaScriptを使用して、それぞれが2つのHTMLページを持っています。異なるスクリプトは、同じワーカーファイルを使用して計算を実行します。ページが異なるウィンドウ内で実行されている場合でも、両方がアクセスできます。</target>
        </trans-unit>
        <trans-unit id="1a52dcb200ff811c53a01149609f176603f2ec40" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://github.com/mdn/web-components-examples/tree/master/simple-template&quot;&gt;simple-template example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/web-components-examples/simple-template/&quot;&gt;see it live&lt;/a&gt;), we create a trivial custom element example called &lt;code&gt;&amp;lt;my-paragraph&amp;gt;&lt;/code&gt; in which a shadow root is attached and then populated using the contents of a template that contains a slot named &lt;code&gt;my-text&lt;/code&gt;.</source>
          <target state="translated">当社では&lt;a href=&quot;https://github.com/mdn/web-components-examples/tree/master/simple-template&quot;&gt;、簡単なテンプレートの例&lt;/a&gt;（&lt;a href=&quot;https://mdn.github.io/web-components-examples/simple-template/&quot;&gt;それが生きる参照&lt;/a&gt;）、我々はと呼ばれる些細なカスタム要素の例を作成し &lt;code&gt;&amp;lt;my-paragraph&amp;gt;&lt;/code&gt; 影のルートを装着して、名前のスロットが含まれたテンプレートの内容を使用して移入されている &lt;code&gt;my-text&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7d243b03f6d86fe5242e67b052f046fa1fec14bc" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/dom-examples/screenleft-screentop/&quot;&gt;screenleft-screentop&lt;/a&gt; example, you'll see a canvas onto which has been drawn a circle. In this example we are using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenLeft&quot;&gt;&lt;code&gt;Window.screenLeft&lt;/code&gt;&lt;/a&gt;/&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenTop&quot;&gt;&lt;code&gt;Window.screenTop&lt;/code&gt;&lt;/a&gt; plus &lt;a href=&quot;requestanimationframe&quot;&gt;&lt;code&gt;Window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; to constantly redraw the circle in the same physical position on the screen, even if the window position is moved.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/dom-examples/screenleft-screentop/&quot;&gt;screenleft-screentopの&lt;/a&gt;例は、円を描かれた上にキャンバスが表示されます。この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenLeft&quot;&gt; &lt;code&gt;Window.screenLeft&lt;/code&gt; &lt;/a&gt; / &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/window/screenTop&quot;&gt; &lt;code&gt;Window.screenTop&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;requestanimationframe&quot;&gt; &lt;code&gt;Window.requestAnimationFrame()&lt;/code&gt; &lt;/a&gt;を使用して、ウィンドウの位置が移動された場合でも、画面上の同じ物理的な位置に常に円を再描画しています。</target>
        </trans-unit>
        <trans-unit id="74c680f742b2a10e14602c5e84ba9854962bbedf" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/dom-examples/screenleft-screentop/&quot;&gt;screenleft-screentop&lt;/a&gt; example, you'll see a canvas onto which has been drawn a circle. In this example we are using &lt;code&gt;screenLeft&lt;/code&gt;/&lt;code&gt;screenTop&lt;/code&gt; plus &lt;a href=&quot;requestanimationframe&quot;&gt;&lt;code&gt;Window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; to constantly redraw the circle in the same physical position on the screen, even if the window position is moved.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/dom-examples/screenleft-screentop/&quot;&gt;screenleft-screentopの&lt;/a&gt;例は、円を描かれた上にキャンバスが表示されます。この例では、 &lt;code&gt;screenLeft&lt;/code&gt; / &lt;code&gt;screenTop&lt;/code&gt; plus &lt;a href=&quot;requestanimationframe&quot;&gt; &lt;code&gt;Window.requestAnimationFrame()&lt;/code&gt; &lt;/a&gt;を使用して、ウィンドウの位置が移動された場合でも、画面上の同じ物理的な位置に常に円を再描画しています。</target>
        </trans-unit>
        <trans-unit id="6e4a5bddabd7d835f9e44b124c0a3fca92d1c53e" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-pump.html&quot;&gt;simple stream pump&lt;/a&gt; example we fetch an image, expose the response's stream using &lt;code&gt;response.body&lt;/code&gt;, create a reader using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Body/getReader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt;, then enqueue that stream's chunks into a second, custom readable stream &amp;mdash; effectively creating an identical copy of the image.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-pump.html&quot;&gt;、単純なストリームポンプ&lt;/a&gt;の例私たちが使用して応答のストリームを公開し、画像を取り込む &lt;code&gt;response.body&lt;/code&gt; を使用して、読者の作成、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Body/getReader&quot;&gt; &lt;code&gt;ReadableStream.getReader()&lt;/code&gt; &lt;/a&gt;、そして、第二にカスタム読み込み可能なストリームをそのストリームのチャンクをエンキュー-効果の同一のコピーを作成します画像。</target>
        </trans-unit>
        <trans-unit id="22e305a832fce0d83b4f9af63ebf0741e3108c8a" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;a href=&quot;notification&quot;&gt;&lt;code&gt;Notification()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;Emogotchiデモ&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;ソースコードを参照&lt;/a&gt;）、我々は簡単なの実行 &lt;code&gt;spawnNotification()&lt;/code&gt; 私たちは、通知を起動したいときに関数を-これは私たちが望むボディ、アイコンとタイトルを指定する引数が渡され、それが必要な作成 &lt;code&gt;options&lt;/code&gt; オブジェクトや火災&lt;a href=&quot;notification&quot;&gt; &lt;code&gt;Notification()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用した通知。</target>
        </trans-unit>
        <trans-unit id="683a603487205cb062446c6eb51dc112af4518a7" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;see source code&lt;/a&gt;), we run a simple &lt;code&gt;spawnNotification()&lt;/code&gt; function when we want to fire a notification &amp;mdash; this is passed arguments to specify the body, icon and title we want, then it creates the necessary &lt;code&gt;options&lt;/code&gt; object and fires the notification using the &lt;code&gt;Notification()&lt;/code&gt; constructor.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;Emogotchiデモ&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;ソースコードを参照&lt;/a&gt;）、我々は簡単なの実行 &lt;code&gt;spawnNotification()&lt;/code&gt; 私たちは、通知を起動したいときに関数を-これは私たちが望むボディ、アイコンとタイトルを指定する引数が渡され、それが必要な作成 &lt;code&gt;options&lt;/code&gt; オブジェクトや火災 &lt;code&gt;Notification()&lt;/code&gt; コンストラクターを使用した通知。</target>
        </trans-unit>
        <trans-unit id="2062739bd8de15d0be159e878962bb0b9199b597" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-array-buffer/&quot;&gt;fetch array buffer live&lt;/a&gt;, we have a Play button. When pressed, the &lt;code&gt;getData()&lt;/code&gt; function is run. Note that before playing full audio file will be downloaded. If you need to play ogg during downloading (stream it) - consider &lt;a href=&quot;../htmlaudioelement&quot;&gt;&lt;code&gt;HTMLAudioElement&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/fetch-examples/fetch-array-buffer/&quot;&gt;、ライブバッファ配列フェッチ&lt;/a&gt;、我々は再生ボタンを持っています。押すと、 &lt;code&gt;getData()&lt;/code&gt; 関数が実行されます。完全なオーディオファイルを再生する前にダウンロードされることに注意してください。ダウンロード中にoggを再生する必要がある場合（ストリーミング）&lt;a href=&quot;../htmlaudioelement&quot;&gt; &lt;code&gt;HTMLAudioElement&lt;/code&gt; &lt;/a&gt;検討してください：</target>
        </trans-unit>
        <trans-unit id="5448b0c22b58314f5ef162c1128a5d091ccc5e7c" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) HTML we have a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element along with a slider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; to increase and decrease pan value. In the JavaScript we create a &lt;a href=&quot;../mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;, and connect the two together using the &lt;code&gt;connect() &lt;/code&gt;method. We then use an &lt;code&gt;oninput&lt;/code&gt; event handler to change the value of the &lt;a href=&quot;../stereopannernode/pan&quot;&gt;&lt;code&gt;StereoPannerNode.pan&lt;/code&gt;&lt;/a&gt; parameter and update the pan value display when the slider is moved.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode例&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;ソースコードを参照してください&lt;/a&gt;私たちは、単純なHTML持っている）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt; &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; &lt;/a&gt;スライダーと一緒に要素を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;/a&gt;増加とパン値を小さくします。 JavaScriptでは、我々は、作成&lt;a href=&quot;../mediaelementaudiosourcenode&quot;&gt; &lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../stereopannernode&quot;&gt; &lt;code&gt;StereoPannerNode&lt;/code&gt; を&lt;/a&gt;、そして一緒に使用して2を接続する &lt;code&gt;connect() &lt;/code&gt; メソッドを。次に、 &lt;code&gt;oninput&lt;/code&gt; イベントハンドラーを使用して、&lt;a href=&quot;../stereopannernode/pan&quot;&gt; &lt;code&gt;StereoPannerNode.pan&lt;/code&gt; &lt;/a&gt;パラメーターの値を変更し、スライダーが移動したときにパン値の表示を更新します。</target>
        </trans-unit>
        <trans-unit id="1ef472553ce51c5551cc764c780e04aeb0e15df5" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) HTML we have a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element along with a slider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; to increase and decrease pan value. In the JavaScript we create a &lt;a href=&quot;../mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;, and connect the two together using the &lt;code&gt;connect() &lt;/code&gt;method. We then use an &lt;code&gt;oninput&lt;/code&gt; event handler to change the value of the &lt;a href=&quot;pan&quot;&gt;&lt;code&gt;StereoPannerNode.pan&lt;/code&gt;&lt;/a&gt; parameter and update the pan value display when the slider is moved.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode例&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;ソースコードを参照してください&lt;/a&gt;私たちは、単純なHTML持っている）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt; &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; &lt;/a&gt;スライダーと一緒に要素を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;/a&gt;増加とパン値を小さくします。 JavaScriptでは、我々は、作成&lt;a href=&quot;../mediaelementaudiosourcenode&quot;&gt; &lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../stereopannernode&quot;&gt; &lt;code&gt;StereoPannerNode&lt;/code&gt; を&lt;/a&gt;、そして一緒に使用して2を接続する &lt;code&gt;connect() &lt;/code&gt; メソッドを。次に、 &lt;code&gt;oninput&lt;/code&gt; イベントハンドラーを使用して、&lt;a href=&quot;pan&quot;&gt; &lt;code&gt;StereoPannerNode.pan&lt;/code&gt; &lt;/a&gt;パラメーターの値を変更し、スライダーが移動したときにパン値の表示を更新します。</target>
        </trans-unit>
        <trans-unit id="24b1e8227913f5e438a96548e9512c9d7ab13215" translate="yes" xml:space="preserve">
          <source>In our &lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode example&lt;/a&gt; (&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;see source code&lt;/a&gt;) HTML we have a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; element along with a slider &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt; to increase and decrease pan value. In the JavaScript we create a &lt;a href=&quot;mediaelementaudiosourcenode&quot;&gt;&lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;stereopannernode&quot;&gt;&lt;code&gt;StereoPannerNode&lt;/code&gt;&lt;/a&gt;, and connect the two together using the &lt;code&gt;connect() &lt;/code&gt;method. We then use an &lt;code&gt;oninput&lt;/code&gt; event handler to change the value of the &lt;a href=&quot;stereopannernode/pan&quot;&gt;&lt;code&gt;StereoPannerNode.pan&lt;/code&gt;&lt;/a&gt; parameter and update the pan value display when the slider is moved.</source>
          <target state="translated">当社では&lt;a href=&quot;https://mdn.github.io/webaudio-examples/stereo-panner-node/&quot;&gt;StereoPannerNode例&lt;/a&gt;（&lt;a href=&quot;https://github.com/mdn/webaudio-examples/tree/master/stereo-panner-node&quot;&gt;ソースコードを参照してください&lt;/a&gt;私たちは、単純なHTML持っている）&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt; &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; &lt;/a&gt;スライダーと一緒に要素を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;/a&gt;増加とパン値を小さくします。 JavaScriptでは、我々は、作成&lt;a href=&quot;mediaelementaudiosourcenode&quot;&gt; &lt;code&gt;MediaElementAudioSourceNode&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;stereopannernode&quot;&gt; &lt;code&gt;StereoPannerNode&lt;/code&gt; を&lt;/a&gt;、そして一緒に使用して2を接続する &lt;code&gt;connect() &lt;/code&gt; メソッドを。次に、 &lt;code&gt;oninput&lt;/code&gt; イベントハンドラーを使用して、&lt;a href=&quot;stereopannernode/pan&quot;&gt; &lt;code&gt;StereoPannerNode.pan&lt;/code&gt; &lt;/a&gt;パラメーターの値を変更し、スライダーが移動したときにパン値の表示を更新します。</target>
        </trans-unit>
        <trans-unit id="4843f354641ea241795a71b67236c07ac52c08d2" translate="yes" xml:space="preserve">
          <source>In our JavaScript file we get a reference to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; shown above, then log a reference to the name of the corresponding &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element.</source>
          <target state="translated">JavaScriptファイルでは、上記の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;への参照を取得してから、対応する &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 要素の名前への参照を記録します。</target>
        </trans-unit>
        <trans-unit id="87cdc4f6fb01a46a3f43555e37d60504ad6e6dd7" translate="yes" xml:space="preserve">
          <source>In our JavaScript file we get a reference to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; shown above, then log a reference to the original &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; element the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; was inserted in.</source>
          <target state="translated">JavaScriptファイルで、上記の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;への参照を取得し、 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; が挿入された元の &lt;code&gt;&amp;lt;slot&amp;gt;&lt;/code&gt; 要素への参照をログに記録します。</target>
        </trans-unit>
        <trans-unit id="ceab9ce6de460ad33a9e2a0900d79499acae975c" translate="yes" xml:space="preserve">
          <source>In our Simple stream pump example, we consume the custom readable stream by passing it into a &lt;a href=&quot;../response/response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; constructor call, after which we consume it as a blob().</source>
          <target state="translated">シンプルストリームポンプの例では、カスタムの読み取り可能なストリームを&lt;a href=&quot;../response/response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;コンストラクター呼び出しに渡して消費し、その後、blob（）として消費します。</target>
        </trans-unit>
        <trans-unit id="cedc9de0305eebfbe50f45abf0dddefb92a97c35" translate="yes" xml:space="preserve">
          <source>In our basic &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speak-easy-synthesis&quot;&gt;Speech synthesiser demo&lt;/a&gt;, we first grab a reference to the SpeechSynthesis controller using &lt;code&gt;window.speechSynthesis&lt;/code&gt;. After defining some necessary variables, we retrieve a list of the voices available using &lt;a href=&quot;../speechsynthesis/getvoices&quot;&gt;&lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt;&lt;/a&gt; and populate a select menu with them so the user can choose what voice they want.</source>
          <target state="translated">基本的な&lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speak-easy-synthesis&quot;&gt;音声合成のデモ&lt;/a&gt;では、最初に &lt;code&gt;window.speechSynthesis&lt;/code&gt; を使用してSpeechSynthesisコントローラーへの参照を取得します。いくつかの必要な変数を定義した後、&lt;a href=&quot;../speechsynthesis/getvoices&quot;&gt; &lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt; &lt;/a&gt;を使用して利用可能な音声のリストを取得し、ユーザーが希望する音声を選択できるように、選択メニューにそれらを入力します。</target>
        </trans-unit>
        <trans-unit id="10bc88397b40f8468da95f606bd3cb1baa9c28c7" translate="yes" xml:space="preserve">
          <source>In our basic &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speak-easy-synthesis&quot;&gt;Speech synthesiser demo&lt;/a&gt;, we first grab a reference to the SpeechSynthesis controller using &lt;code&gt;window.speechSynthesis&lt;/code&gt;. After defining some necessary variables, we retrieve a list of the voices available using &lt;a href=&quot;speechsynthesis/getvoices&quot;&gt;&lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt;&lt;/a&gt; and populate a select menu with them so the user can choose what voice they want.</source>
          <target state="translated">基本的な&lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speak-easy-synthesis&quot;&gt;音声合成のデモ&lt;/a&gt;では、最初に &lt;code&gt;window.speechSynthesis&lt;/code&gt; を使用してSpeechSynthesisコントローラーへの参照を取得します。いくつかの必要な変数を定義した後、&lt;a href=&quot;speechsynthesis/getvoices&quot;&gt; &lt;code&gt;SpeechSynthesis.getVoices()&lt;/code&gt; &lt;/a&gt;を使用して利用可能な音声のリストを取得し、ユーザーが希望する音声を選択できるように、選択メニューにそれらを入力します。</target>
        </trans-unit>
        <trans-unit id="7f3902c16a8973e44c8b4760bf85303af8be51ec" translate="yes" xml:space="preserve">
          <source>In our composed-composed-path example (see it live), we define two trivial custom elements, &lt;code&gt;&amp;lt;open-shadow&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;closed-shadow&amp;gt;&lt;/code&gt;, both of which take the contents of their text attribute and insert them into the element's shadow DOM as the text content of a &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; element. The only difference between the two is that their shadow roots are attached with their modes set to &lt;code&gt;open&lt;/code&gt; and &lt;code&gt;closed&lt;/code&gt; respectively.</source>
          <target state="translated">私たちの合成合成パスの例（実際に見る）では、2つの自明なカスタム要素 &lt;code&gt;&amp;lt;open-shadow&amp;gt;&lt;/code&gt; と &lt;code&gt;&amp;lt;closed-shadow&amp;gt;&lt;/code&gt; を定義します。どちらもテキスト属性の内容を取り、要素のシャドウに挿入します &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 要素のテキストコンテンツとしてのDOM 。2つの唯一の違いは、それらのシャドウルートが、モードをそれぞれ &lt;code&gt;open&lt;/code&gt; および &lt;code&gt;closed&lt;/code&gt; 設定してアタッチされていることです。</target>
        </trans-unit>
        <trans-unit id="548f7889383439313cf256bedd4737c1ccdb4456" translate="yes" xml:space="preserve">
          <source>In our example code we have defined a multiplication function &amp;mdash; &lt;code&gt;multiplyMatrixAndPoint()&lt;/code&gt;:</source>
          <target state="translated">このサンプルコードでは、乗算関数&amp;mdash; &lt;code&gt;multiplyMatrixAndPoint()&lt;/code&gt; を定義しています。</target>
        </trans-unit>
        <trans-unit id="b491f21954464f6fdc67aba99f7bb95bfd6f9f11" translate="yes" xml:space="preserve">
          <source>In our example we are using the controller&amp;rsquo;s &lt;a href=&quot;../readablestreamdefaultcontroller/enqueue&quot;&gt;&lt;code&gt;enqueue()&lt;/code&gt;&lt;/a&gt; method to enqueue a value into the custom stream after it is read from the fetch body.</source>
          <target state="translated">この例では、コントローラーの&lt;a href=&quot;../readablestreamdefaultcontroller/enqueue&quot;&gt; &lt;code&gt;enqueue()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、値がフェッチ本文から読み取られた後、値をカスタムストリームにエンキューします。</target>
        </trans-unit>
        <trans-unit id="a07f47e691c12ee34185e61f30d75659b3927288" translate="yes" xml:space="preserve">
          <source>In our example, we are testing the decoding capabilities of a video configuration. The configuration requires the type of media being tested &amp;mdash; e.g. a plain &lt;code&gt;file&lt;/code&gt; or &lt;a href=&quot;../mediasource&quot;&gt;&lt;code&gt;MediaSource&lt;/code&gt;&lt;/a&gt; &amp;mdash; and a &lt;a href=&quot;../videoconfiguration&quot;&gt;&lt;code&gt;VideoConfiguration&lt;/code&gt;&lt;/a&gt; including values for the&lt;code&gt;contentType&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;, &lt;code&gt;bitrate&lt;/code&gt;, and &lt;code&gt;framerate&lt;/code&gt;&lt;strong&gt;:&lt;/strong&gt;</source>
          <target state="translated">この例では、ビデオ構成のデコード機能をテストしています。例えばA平野-構成がテストされているメディアの種類が必要です &lt;code&gt;file&lt;/code&gt; または&lt;a href=&quot;../mediasource&quot;&gt; &lt;code&gt;MediaSource&lt;/code&gt; を&lt;/a&gt; -と&lt;a href=&quot;../videoconfiguration&quot;&gt; &lt;code&gt;VideoConfiguration&lt;/code&gt; &lt;/a&gt;の値を含めて &lt;code&gt;contentType&lt;/code&gt; 、 &lt;code&gt;width&lt;/code&gt; 、 &lt;code&gt;height&lt;/code&gt; 、 &lt;code&gt;bitrate&lt;/code&gt; 、および &lt;code&gt;framerate&lt;/code&gt; &lt;strong&gt;：&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f70c4cf3e23400c73ceb83819675631bf670e470" translate="yes" xml:space="preserve">
          <source>In our simple &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speech-color-changer&quot;&gt;Speech color changer&lt;/a&gt; example, we create a new &lt;code&gt;SpeechRecognition&lt;/code&gt; object instance using the &lt;a href=&quot;../speechrecognition/speechrecognition&quot;&gt;&lt;code&gt;SpeechRecognition()&lt;/code&gt;&lt;/a&gt; constructor, create a new &lt;a href=&quot;../speechgrammarlist&quot;&gt;&lt;code&gt;SpeechGrammarList&lt;/code&gt;&lt;/a&gt;, add our grammar string to it using the &lt;a href=&quot;addfromstring&quot;&gt;&lt;code&gt;SpeechGrammarList.addFromString&lt;/code&gt;&lt;/a&gt; method, and set it to be the grammar that will be recognised by the &lt;code&gt;SpeechRecognition&lt;/code&gt; instance using the &lt;a href=&quot;../speechrecognition/grammars&quot;&gt;&lt;code&gt;SpeechRecognition.grammars&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">私たちのシンプルで&lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speech-color-changer&quot;&gt;スピーチカラーチェンジャー&lt;/a&gt;例は、我々は新しい作成する &lt;code&gt;SpeechRecognition&lt;/code&gt; 使用して、オブジェクトのインスタンスを&lt;a href=&quot;../speechrecognition/speechrecognition&quot;&gt; &lt;code&gt;SpeechRecognition()&lt;/code&gt; &lt;/a&gt;コンストラクタを、新たに作成&lt;a href=&quot;../speechgrammarlist&quot;&gt; &lt;code&gt;SpeechGrammarList&lt;/code&gt; を&lt;/a&gt;使用して、そこに私たちの文法の文字列を追加&lt;a href=&quot;addfromstring&quot;&gt; &lt;code&gt;SpeechGrammarList.addFromString&lt;/code&gt; の&lt;/a&gt;方法を、となります文法可能に設定し&lt;a href=&quot;../speechrecognition/grammars&quot;&gt; &lt;code&gt;SpeechRecognition.grammars&lt;/code&gt; &lt;/a&gt;プロパティを使用して &lt;code&gt;SpeechRecognition&lt;/code&gt; インスタンスによって認識されます。</target>
        </trans-unit>
        <trans-unit id="48357f57f72de62af8d9addacb9ecaa3d210de7b" translate="yes" xml:space="preserve">
          <source>In our simple &lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speech-color-changer&quot;&gt;Speech color changer&lt;/a&gt; example, we create a new &lt;code&gt;SpeechRecognition&lt;/code&gt; object instance using the &lt;a href=&quot;speechrecognition/speechrecognition&quot;&gt;&lt;code&gt;SpeechRecognition()&lt;/code&gt;&lt;/a&gt; constructor, create a new &lt;a href=&quot;speechgrammarlist&quot;&gt;&lt;code&gt;SpeechGrammarList&lt;/code&gt;&lt;/a&gt;, add our grammar string to it using the &lt;a href=&quot;speechgrammarlist/addfromstring&quot;&gt;&lt;code&gt;SpeechGrammarList.addFromString&lt;/code&gt;&lt;/a&gt; method, and set it to be the grammar that will be recognised by the &lt;code&gt;SpeechRecognition&lt;/code&gt; instance using the &lt;a href=&quot;speechrecognition/grammars&quot;&gt;&lt;code&gt;SpeechRecognition.grammars&lt;/code&gt;&lt;/a&gt; property.</source>
          <target state="translated">私たちのシンプルで&lt;a href=&quot;https://github.com/mdn/web-speech-api/tree/master/speech-color-changer&quot;&gt;スピーチカラーチェンジャー&lt;/a&gt;例は、我々は新しい作成する &lt;code&gt;SpeechRecognition&lt;/code&gt; 使用して、オブジェクトのインスタンスを&lt;a href=&quot;speechrecognition/speechrecognition&quot;&gt; &lt;code&gt;SpeechRecognition()&lt;/code&gt; &lt;/a&gt;コンストラクタを、新たに作成&lt;a href=&quot;speechgrammarlist&quot;&gt; &lt;code&gt;SpeechGrammarList&lt;/code&gt; を&lt;/a&gt;使用して、そこに私たちの文法の文字列を追加&lt;a href=&quot;speechgrammarlist/addfromstring&quot;&gt; &lt;code&gt;SpeechGrammarList.addFromString&lt;/code&gt; の&lt;/a&gt;方法を、となります文法可能に設定し&lt;a href=&quot;speechrecognition/grammars&quot;&gt; &lt;code&gt;SpeechRecognition.grammars&lt;/code&gt; &lt;/a&gt;プロパティを使用して &lt;code&gt;SpeechRecognition&lt;/code&gt; インスタンスによって認識されます。</target>
        </trans-unit>
        <trans-unit id="6af9da9369fc06dde854a8e586e239d409f0f40c" translate="yes" xml:space="preserve">
          <source>In our video decoding example, a &lt;code&gt;TypeError&lt;/code&gt; would be raised if the media configuration passed to the &lt;code&gt;decodingInfo()&lt;/code&gt;method was invalid. The error can be due to the &lt;code&gt;type&lt;/code&gt; not being one of the two possible values, the &lt;code&gt;contentType&lt;/code&gt; not being a valid codec MIMME type, or invalid or omitted definitions required in the &lt;a href=&quot;../videoconfiguration&quot;&gt;&lt;code&gt;VideoConfiguration&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ビデオのデコード例では、 &lt;code&gt;decodingInfo()&lt;/code&gt; メソッドに渡されたメディア構成が無効な場合、 &lt;code&gt;TypeError&lt;/code&gt; が発生します。このエラーは、 &lt;code&gt;type&lt;/code&gt; が2つの可能な値のいずれでもないこと、 &lt;code&gt;contentType&lt;/code&gt; が有効なコーデックMIMMEタイプでないこと、またはVideoConfigurationで必要な無効または省略された定義が&lt;a href=&quot;../videoconfiguration&quot;&gt; &lt;code&gt;VideoConfiguration&lt;/code&gt; &lt;/a&gt;である可能性があります。</target>
        </trans-unit>
        <trans-unit id="444a38410f8eee1ada6ea0e8209c29ec9a64dec4" translate="yes" xml:space="preserve">
          <source>In pages requiring many timers, it can often be difficult to keep track of all of the running timer events. One approach to solving this problem is to store information about the state of a timer in an object. Following is a minimal example of such an abstraction. The constructor architecture explicitly avoids the use of closures. It also offers an alternative way to pass the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt;&lt;code&gt;this&lt;/code&gt;&lt;/a&gt; object to the callback function (see &lt;a href=&quot;#The_.22this.22_problem&quot;&gt;The &quot;this&quot; problem&lt;/a&gt; for details). The following code is also &lt;a href=&quot;https://github.com/madmurphy/minidaemon.js&quot;&gt;available on GitHub&lt;/a&gt;.</source>
          <target state="translated">多くのタイマーを必要とするページでは、実行中のすべてのタイマーイベントを追跡するのが難しい場合があります。この問題を解決する1つの方法は、タイマーの状態に関する情報をオブジェクトに格納することです。以下は、そのような抽象化の最小限の例です。コンストラクタアーキテクチャでは、クロージャの使用を明示的に回避しています。また、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this&quot;&gt; &lt;code&gt;this&lt;/code&gt; &lt;/a&gt;オブジェクトをコールバック関数に渡す別の方法も提供します（詳細については&lt;a href=&quot;#The_.22this.22_problem&quot;&gt;、「this」問題&lt;/a&gt;を参照してください）。次のコードでもあります&lt;a href=&quot;https://github.com/madmurphy/minidaemon.js&quot;&gt;GitHubのに利用できます&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="a4781153838b86061ae7ac471f555a0b2eeb6554" translate="yes" xml:space="preserve">
          <source>In particular, if a developer already has a method in place for connecting two devices, it doesn&amp;rsquo;t make sense for them to have to use another one, defined by the specification, just for WebRTC. Since WebRTC doesn&amp;rsquo;t live in a vacuum, there is likely other connectivity in play, so it makes sense to avoid having to add additional connection channels for signaling if an existing one can be used.</source>
          <target state="translated">特に、開発者がすでに2つのデバイスを接続する方法を用意している場合、WebRTCのためだけに、仕様で定義されている別のデバイスを使用する必要はありません。WebRTCは孤立して存在しないため、他の接続が機能している可能性があるため、既存の接続チャネルを使用できる場合は、シグナリング用の接続チャネルを追加する必要がないようにするのが理にかなっています。</target>
        </trans-unit>
        <trans-unit id="480b273d124987d12c16a0c8f4ff78bcac4ee760" translate="yes" xml:space="preserve">
          <source>In particular, note that usage of textures in vertex shaders is only possible if &lt;code&gt;webgl.getParameter(webgl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)&lt;/code&gt; is greater than zero. Typically, this fails on current mobile hardware.</source>
          <target state="translated">特に、頂点シェーダーでのテクスチャの使用は、 &lt;code&gt;webgl.getParameter(webgl.MAX_VERTEX_TEXTURE_IMAGE_UNITS)&lt;/code&gt; がゼロより大きい場合にのみ可能であることに注意してください。通常、これは現在のモバイルハードウェアでは失敗します。</target>
        </trans-unit>
        <trans-unit id="863023de54e429bfc0d9fe4e4a41838da46ee3d6" translate="yes" xml:space="preserve">
          <source>In particular, the specification doesn't indicate a maximum or minimum number of audio contexts that must be able to be open at the same time, so this is left up to the browser implementations to decide.</source>
          <target state="translated">特に、この仕様では、同時に開くことができるオーディオコンテキストの最大数や最小数は示されていないので、これはブラウザの実装に委ねられています。</target>
        </trans-unit>
        <trans-unit id="e57fac6451e79fec18e227cafa36d4d1a55b1f49" translate="yes" xml:space="preserve">
          <source>In plain words, all asynchronous methods return a request object. If the request has been completed successfully, the result is made available through the &lt;code&gt;result&lt;/code&gt; property and an event indicating success is fired at the request (&lt;a href=&quot;idbrequest/onsuccess&quot;&gt;&lt;code&gt;IDBRequest.onsuccess&lt;/code&gt;&lt;/a&gt;). If an error occurs while performing the operation, the exception is made available through the &lt;code&gt;result&lt;/code&gt; property and an error event is fired (&lt;a href=&quot;idbrequest/onerror&quot;&gt;&lt;code&gt;IDBRequest.onerror&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">簡単に言うと、すべての非同期メソッドはリクエストオブジェクトを返します。リクエストが正常に完了すると、 &lt;code&gt;result&lt;/code&gt; プロパティを通じて結果が利用可能になり、リクエストで成功を示すイベントが発生します（&lt;a href=&quot;idbrequest/onsuccess&quot;&gt; &lt;code&gt;IDBRequest.onsuccess&lt;/code&gt; &lt;/a&gt;）。操作の実行中にエラーが発生した場合、 &lt;code&gt;result&lt;/code&gt; プロパティを通じて例外が使用可能になり、エラーイベントが発生します（&lt;a href=&quot;idbrequest/onerror&quot;&gt; &lt;code&gt;IDBRequest.onerror&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="24e59c71bda4325aef46faa4602d34b63b60de52" translate="yes" xml:space="preserve">
          <source>In practice this is easier to do with a library &amp;mdash; the Web Audio API was built to be built upon. If you are about to embark on building something more complex, &lt;a href=&quot;https://tonejs.github.io/&quot;&gt;tone.js&lt;/a&gt; would be a good place to start. However, we want to demonstrate how to build such a demo from first principles, as a learning exercise.</source>
          <target state="translated">実際には、ライブラリを使用する方が簡単です。WebAudio APIは、その上に構築されるように構築されています。もっと複雑なものを&lt;a href=&quot;https://tonejs.github.io/&quot;&gt;作成&lt;/a&gt;しようとしている場合は、tone.jsから始めるのが良いでしょう。ただし、このようなデモを第一原理から構築する方法を学習課題として示したいと思います。</target>
        </trans-unit>
        <trans-unit id="32516160de0372f860bce99327d1d19a3ef70023" translate="yes" xml:space="preserve">
          <source>In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled horizontally from the origin, where a positive value means the content is scrolled to the left. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all left or right, then &lt;code&gt;scrollX&lt;/code&gt; is 0.</source>
          <target state="translated">実際には、戻り値は、ドキュメントが現在原点から水平にスクロールされているピクセル数を示す倍精度浮動小数点値です。正の値は、コンテンツが左にスクロールされることを意味します。ドキュメントがサブピクセル精度のデバイスでレンダリングされる場合、戻り値もサブピクセル精度であり、小数コンポーネントが含まれる場合があります。ドキュメントがまったく左右にスクロールされていない場合、 &lt;code&gt;scrollX&lt;/code&gt; は0です。</target>
        </trans-unit>
        <trans-unit id="c9e4c3224f024b670cafe3c2640c0a1d7b515001" translate="yes" xml:space="preserve">
          <source>In practice, the returned value is a double-precision floating-point value indicating the number of pixels the document is currently scrolled vertically from the origin, where a positive value means the content is scrolled to upward. If the document is rendered on a subpixel-precise device, then the returned value is also subpixel-precise and may contain a decimal component. If the document isn't scrolled at all up or down, then &lt;code&gt;scrollY&lt;/code&gt; is 0.</source>
          <target state="translated">実際には、戻り値は、ドキュメントが現在原点から垂直方向にスクロールされているピクセル数を示す倍精度浮動小数点値です。正の値は、コンテンツが上方向にスクロールされることを意味します。ドキュメントがサブピクセル精度のデバイスでレンダリングされる場合、戻り値もサブピクセル精度であり、小数コンポーネントが含まれる場合があります。ドキュメントが上下にスクロールされていない場合、 &lt;code&gt;scrollY&lt;/code&gt; は0です。</target>
        </trans-unit>
        <trans-unit id="295312640161fdff38c2b50bcde9aea3c51e2408" translate="yes" xml:space="preserve">
          <source>In previous DOM specifications this API was defined within the &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">以前のDOM仕様では、このAPIは&lt;a href=&quot;../node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;インターフェース内で定義されていました。</target>
        </trans-unit>
        <trans-unit id="9d2c9022f0f0d8e5ecaf15700987363c21780126" translate="yes" xml:space="preserve">
          <source>In rendering environments supporting interactivity, forces the user agent to immediately redraw all regions of the viewport that require updating.</source>
          <target state="translated">インタラクティブ性をサポートするレンダリング環境では、更新が必要なビューポートのすべての領域をユーザーエージェントに即座に再描画させます。</target>
        </trans-unit>
        <trans-unit id="adeae07f8e178d7be0eacd5d918d3c410b86f38a" translate="yes" xml:space="preserve">
          <source>In sequence 1 &amp;amp; 3, the &lt;code&gt;KeyboardEvent.key&lt;/code&gt; attribute is defined and is set appropriately to a value according to the rules defined ealier.</source>
          <target state="translated">シーケンス1と3で、 &lt;code&gt;KeyboardEvent.key&lt;/code&gt; 属性が定義されており、定義されたルールに従って値が適切に設定されています。</target>
        </trans-unit>
        <trans-unit id="cc146c3c739a1f1ab859df4b0940afcbe4e3c4fd" translate="yes" xml:space="preserve">
          <source>In shared or service workers, the value in the worker might be higher than that of the main context because that window can be created after those workers.</source>
          <target state="translated">シェアードワーカーやサービスワーカーでは、それらのワーカーの後にウィンドウができるので、ワーカーの価値はメインコンテキストの価値よりも高いかもしれません。</target>
        </trans-unit>
        <trans-unit id="e9dd0af79438852a4f8d38f9d9dc72e257be0b7a" translate="yes" xml:space="preserve">
          <source>In short, the &lt;a href=&quot;../mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; method &lt;code&gt;stop()&lt;/code&gt; method stops the track.</source>
          <target state="translated">つまり、&lt;a href=&quot;../mediastreamtrack&quot;&gt; &lt;code&gt;MediaStreamTrack&lt;/code&gt; &lt;/a&gt;メソッドの &lt;code&gt;stop()&lt;/code&gt; メソッドはトラックを停止します。</target>
        </trans-unit>
        <trans-unit id="6fe9767585f5a6087e3eefc48ac674b59b8cc1d1" translate="yes" xml:space="preserve">
          <source>In simple words, a binary string is a sequence of 1's and 0's. Javascript is loaded with rich features to manipulate the raw binary data in lower level.</source>
          <target state="translated">簡単に言えば、バイナリ文字列は1と0の連続です。Javascriptには、生のバイナリデータを下のレベルで操作するための豊富な機能が搭載されています。</target>
        </trans-unit>
        <trans-unit id="59a183e4146a1597816ed082d6fe201ce9f7aca4" translate="yes" xml:space="preserve">
          <source>In some GTK-based environments, auto-repeat dispatches a native key-up event automatically during auto-repeat, and there's no way for Gecko to know the difference between a repeated series of keypresses and an auto-repeat. On those platforms, then, an auto-repeat key will generate the following sequence of events:</source>
          <target state="translated">いくつかの GTK ベースの環境では、オートリピートはオートリピート中にネイティブのキーアップイベントを自動的にディスパッチし、Gecko が一連のキープレスの繰り返しとオートリピートの違いを知る方法はありません。これらのプラットフォームでは、自動リピートキーは以下のような一連のイベントを生成します。</target>
        </trans-unit>
        <trans-unit id="172174b9f593a512a9a6c6f3a6aa9205ede7b089" translate="yes" xml:space="preserve">
          <source>In some browsers, if a stylesheet is loaded from a different domain, calling &lt;code&gt;cssRules&lt;/code&gt; results in &lt;code&gt;SecurityError&lt;/code&gt;.</source>
          <target state="translated">一部のブラウザでは、スタイルシートが別のドメインから読み込まれると、 &lt;code&gt;cssRules&lt;/code&gt; を呼び出すと &lt;code&gt;SecurityError&lt;/code&gt; が発生します。</target>
        </trans-unit>
        <trans-unit id="dce1dcc3b182fd4da4a701ed003a7bf79ced8b8f" translate="yes" xml:space="preserve">
          <source>In some cases, an animation may run on a separate thread or process and will continue updating even while long-running JavaScript delays the main thread. In such a case, setting the &lt;a href=&quot;playbackrate&quot;&gt;&lt;code&gt;playbackRate&lt;/code&gt;&lt;/a&gt; on the animation directly may cause the animation's playback position to jump since its playback position on the main thread may have drifted from the playback position where it is currently running.</source>
          <target state="translated">場合によっては、アニメーションが別のスレッドまたはプロセスで実行され、長時間実行されているJavaScriptがメインスレッドを遅延させている間でも、更新が続行されることがあります。そのような場合には、設定&lt;a href=&quot;playbackrate&quot;&gt; &lt;code&gt;playbackRate&lt;/code&gt; を&lt;/a&gt;アニメーションにして直接メインスレッド上での再生位置が現在実行されている再生位置から漂流している可能性があるからジャンプして、アニメーションの再生位置を引き起こす可能性があります。</target>
        </trans-unit>
        <trans-unit id="4655844bbc80dc899c798f617d6fd3597b928e06" translate="yes" xml:space="preserve">
          <source>In some cases, the &lt;code&gt;NodeList&lt;/code&gt; is &lt;em&gt;live&lt;/em&gt;, which means that changes in the DOM automatically update the collection. For example, &lt;a href=&quot;node/childnodes&quot;&gt;&lt;code&gt;Node.childNodes&lt;/code&gt;&lt;/a&gt; is live:</source>
          <target state="translated">場合によっては、 &lt;code&gt;NodeList&lt;/code&gt; は&lt;em&gt;live&lt;/em&gt;です。つまり、DOMの変更により、コレクションが自動的に更新されます。たとえば、&lt;a href=&quot;node/childnodes&quot;&gt; &lt;code&gt;Node.childNodes&lt;/code&gt; &lt;/a&gt;はライブです。</target>
        </trans-unit>
        <trans-unit id="6ee0c3405328ac0a1e364e03bbe1b6759943b171" translate="yes" xml:space="preserve">
          <source>In some cases, the above conversion to UTF-8 and then to Base64 will not be very space efficient. UTF-8 produces longer output than UTF-16 when the text contains a large percentage of characters in the range U+0800-U+FFFF, which are encoded with three bytes in UTF-8 but two in UTF-16. In the case where the JavaScript string contains evenly-distributed UTF-16 code points, one might consider encoding to UTF-16 instead of UTF-8 before the conversion to Base64, for a 40% reduction in size.</source>
          <target state="translated">場合によっては、上記の UTF-8 への変換を行った後に Base64 への変換は、スペース効率があまり良くないことがあります。UTF-8 の方が UTF-16 よりも長い出力を生成するのは、テキストが U+0800-U+FFFF の範囲のキ ャ ラ ク タ を多 く 含んでいる場合です。JavaScript 文字列が UTF-16 コードポイントを均等に分散して含んでいる場合には、Base64 への変換の前に UTF-8 ではなく UTF-16 へのエンコードを検討すると、サイズを 40% 削減することができます。</target>
        </trans-unit>
        <trans-unit id="132eae7008230e83d3da8ea93f84689e6de2d4b3" translate="yes" xml:space="preserve">
          <source>In some cases, you must read many external files. This is a standard function which uses the &lt;code&gt;XMLHttpRequest&lt;/code&gt; object asynchronously in order to switch the content of the read file to a specified listener.</source>
          <target state="translated">場合によっては、多くの外部ファイルを読み取る必要があります。これは、読み取りファイルのコンテンツを指定されたリスナーに切り替えるために、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; オブジェクトを非同期で使用する標準関数です。</target>
        </trans-unit>
        <trans-unit id="b299ff99aea1bc61ce766adae31254860b288ce2" translate="yes" xml:space="preserve">
          <source>In some countries, like Belgium, it's uncommon for people to provide a region as part of their postal address. In such cases, the browser returns an empty string as the value of &lt;code&gt;region&lt;/code&gt;. However, the address should still be acceptable to use for its intended purpose (e.g., to ship a product). However, always verify addresses to make sure what the user provides is usable.</source>
          <target state="translated">ベルギーなど一部の国では、住所の一部として地域を指定することは一般的ではありません。このような場合、ブラウザーは &lt;code&gt;region&lt;/code&gt; の値として空の文字列を返します。ただし、住所は、意図された目的（たとえば、製品の発送）で使用するために許容されるはずです。ただし、常にアドレスを確認して、ユーザーが提供したものが使用可能であることを確認してください。</target>
        </trans-unit>
        <trans-unit id="e6dea87d6416b39807b2dab77adc9ccde9c3b546" translate="yes" xml:space="preserve">
          <source>In some implementations, passing anything other than a number for the screen and client fields will throw a &lt;code&gt;TypeError&lt;/code&gt;.</source>
          <target state="translated">一部の実装では、画面フィールドとクライアントフィールドに数値以外のものを渡すと、 &lt;code&gt;TypeError&lt;/code&gt; がスローされます。</target>
        </trans-unit>
        <trans-unit id="c947099d79761880f47f1b5181a546601c8aeb25" translate="yes" xml:space="preserve">
          <source>In some instances, &lt;code&gt;InputDeviceCapabilities&lt;/code&gt; represents the capabilities of logical devices rather than physical devices. This allows, for example, touchscreen keyboards and physical keyboards to be represented the same way when they produce the same input.</source>
          <target state="translated">場合によっては、 &lt;code&gt;InputDeviceCapabilities&lt;/code&gt; は、物理デバイスではなく論理デバイスの機能を表します。これにより、たとえば、タッチスクリーンキーボードと物理キーボードが同じ入力を生成するときに、同じ方法で表すことができます。</target>
        </trans-unit>
        <trans-unit id="455954cdb79d203d096072cc645e2352e3bacba8" translate="yes" xml:space="preserve">
          <source>In some rare cases, packing greyscale textures which belong together into the color channels of a single texture might help.</source>
          <target state="translated">まれに、一緒に属しているグレースケールのテクスチャを単一のテクスチャのカラーチャンネルに詰め込むと便利な場合があります。</target>
        </trans-unit>
        <trans-unit id="8807053eb3061f5ccd904706d857bd4ee81c15de" translate="yes" xml:space="preserve">
          <source>In some scenarios there may be multiple pointers (for example a device with both a touchscreen and a mouse) or a pointer supports multiple contact points (for example a touchscreen that supports multiple finger touches). The application can use the &lt;a href=&quot;pointerevent/isprimary&quot;&gt;&lt;code&gt;isPrimary&lt;/code&gt;&lt;/a&gt; property to identify a master pointer among the set of &lt;em&gt;active pointers&lt;/em&gt; for each pointer type. If an application only wants to support a primary pointer, it can ignore all pointer events that are not primary.</source>
          <target state="translated">いくつかのシナリオでは、複数のポインター（たとえば、タッチスクリーンとマウスの両方を備えたデバイス）があるか、ポインターが複数の接触点をサポートしています（たとえば、複数の指のタッチをサポートするタッチスクリーン）。アプリケーションは、&lt;a href=&quot;pointerevent/isprimary&quot;&gt; &lt;code&gt;isPrimary&lt;/code&gt; &lt;/a&gt;プロパティを使用して、各ポインタータイプの&lt;em&gt;アクティブポインター&lt;/em&gt;のセットからマスターポインターを識別できます。アプリケーションがプライマリポインターのみをサポートしたい場合、プライマリでないすべてのポインターイベントを無視できます。</target>
        </trans-unit>
        <trans-unit id="4b7e8dede71e0c3ed9e9fb5f42051be333943383" translate="yes" xml:space="preserve">
          <source>In tandem with appropriate HTML and CSS, the result is:</source>
          <target state="translated">適切なHTMLとCSSとの連携で、結果が出ます。</target>
        </trans-unit>
        <trans-unit id="87785b6aae731be29028f0420000582fe05b36af" translate="yes" xml:space="preserve">
          <source>In technical terms, we apply a &lt;a href=&quot;http://webaudio.github.io/web-audio-api/#blackman-window&quot;&gt;Blackman window&lt;/a&gt; and smooth the values over time. The default value is good enough for most cases.</source>
          <target state="translated">技術的には、&lt;a href=&quot;http://webaudio.github.io/web-audio-api/#blackman-window&quot;&gt;Blackmanウィンドウ&lt;/a&gt;を適用し、時間の経過とともに値を平滑化します。ほとんどの場合、デフォルト値で十分です。</target>
        </trans-unit>
        <trans-unit id="aeeed0f09e85e80f9003a8af352d35ffe73f1e3b" translate="yes" xml:space="preserve">
          <source>In technical terms, we apply a &lt;a href=&quot;https://webaudio.github.io/web-audio-api/#blackman-window&quot;&gt;Blackman window&lt;/a&gt; and smooth the values over time. The default value is good enough for most cases.</source>
          <target state="translated">技術的には、&lt;a href=&quot;https://webaudio.github.io/web-audio-api/#blackman-window&quot;&gt;ブラックマンウィンドウ&lt;/a&gt;を適用し、時間の経過とともに値を平滑化します。ほとんどの場合、デフォルト値で十分です。</target>
        </trans-unit>
        <trans-unit id="4569a112b815930f3f6110fdab139a3c9f156284" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Pool of Tears&lt;/a&gt; example, each tear is passed a random &lt;code&gt;duration&lt;/code&gt; via its timing object:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;涙&lt;/a&gt;のプールの例では、各涙にはタイミングオブジェクトを介してランダムな &lt;code&gt;duration&lt;/code&gt; が渡されます。</target>
        </trans-unit>
        <trans-unit id="84baeba554340df677d283c92acea536f934dd81" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Pool of Tears&lt;/a&gt; example, each tear is passed a random delay via its timing object:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;涙&lt;/a&gt;のプールの例では、各涙にはタイミングオブジェクトを介してランダムな遅延が渡されます。</target>
        </trans-unit>
        <trans-unit id="8840866ab7b70934813f8b44dc4d3acedd59684a" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV&quot;&gt;Red Queen Race&lt;/a&gt; example, we can inspect Alice and the RedQueen's animation to see its individual keyframes like so:</source>
          <target state="translated">では&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV&quot;&gt;赤の女王のレース&lt;/a&gt;たとえば、我々はそうのような個々のキーフレームを参照してくださいアリスとRedQueenのアニメーションを調べることができます。</target>
        </trans-unit>
        <trans-unit id="4e53b83e14cfbf2b6cb2206f2d31afedefa47e79" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV?editors=0010&quot;&gt;Red Queen's Race&lt;/a&gt; example, we animate Alice and the Red Queen by passing an easing &lt;code&gt;of&amp;nbsp;steps(7, end)&lt;/code&gt; to &lt;code&gt;animate()&lt;/code&gt;:</source>
          <target state="translated">では&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNGGaV?editors=0010&quot;&gt;赤の女王のレース&lt;/a&gt;たとえば、我々は緩和渡すことによって、アリスと赤の女王をアニメーション化 &lt;code&gt;of&amp;nbsp;steps(7, end)&lt;/code&gt; に &lt;code&gt;animate()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4d48fff257a7eaf677c500603cba8675d9ec15a0" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Drink Me/Eat Me game&lt;/a&gt;, Alice's height is animated so it can go from small to large or large to small. At the start of the game, her height is set between the two extremes by setting her animation's &lt;code&gt;currentTime&lt;/code&gt; to half her &lt;a href=&quot;../effecttiming&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;'s duration&lt;/a&gt;:</source>
          <target state="translated">では&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;ミー/ Meのゲームを食べる飲む&lt;/a&gt;、それは大小の小から大まで行くことができますので、アリスの高さがアニメ化されます。ゲームの開始時に、アニメーションの &lt;code&gt;currentTime&lt;/code&gt; を&lt;a href=&quot;../effecttiming&quot;&gt; &lt;code&gt;KeyframeEffect&lt;/code&gt; の持続時間の&lt;/a&gt;半分に設定することにより、彼女の身長は両極端の間に設定されます。</target>
        </trans-unit>
        <trans-unit id="dff4039fcfe679b0dec49d92d0aba4320d8da9c3" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the bottle causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to play backwards, causing her to get smaller. It is done by setting &lt;code&gt;aliceChange&lt;/code&gt;'s &lt;a href=&quot;playbackrate&quot;&gt;&lt;code&gt;Animation.playbackRate&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;-1&lt;/code&gt; like so:</source>
          <target state="translated">では&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;アリスゲームの縮小/成長&lt;/a&gt;の例を、ボトルをクリックするかタップすると、アリスの成長アニメーション（原因 &lt;code&gt;aliceChange&lt;/code&gt; を彼女が小さくなるために引き起こして、逆方向に再生します）。これは、次のように &lt;code&gt;aliceChange&lt;/code&gt; の&lt;a href=&quot;playbackrate&quot;&gt; &lt;code&gt;Animation.playbackRate&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;-1&lt;/code&gt; に設定することによって行われます。</target>
        </trans-unit>
        <trans-unit id="75ccab065512a27e756e2ce4032133c4b2ab5ec4" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the bottle causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to reverse, causing her to shrink:</source>
          <target state="translated">では&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;アリスゲームの縮小/成長&lt;/a&gt;の例を、ボトルをクリックするかタップすると、アリスの成長アニメーション（原因 &lt;code&gt;aliceChange&lt;/code&gt; を彼女が縮小させ、逆に）：</target>
        </trans-unit>
        <trans-unit id="a6f044f5fc3c895453f3a3776f76e7cb90e07603" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the cake causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to play forward, causing her to get bigger, as well as triggering the cake's animation. Two &lt;code&gt;Animation.play()&lt;/code&gt;s, one &lt;code&gt;EventListener&lt;/code&gt;:</source>
          <target state="translated">では&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;アリスゲームの縮小/成長&lt;/a&gt;の例を、ケーキをクリックするかタップすると、アリスの成長アニメーション（原因 &lt;code&gt;aliceChange&lt;/code&gt; を彼女が大きく取得させるだけでなく、ケーキのアニメーションをトリガし、前方に再生するために）。2つの &lt;code&gt;Animation.play()&lt;/code&gt; 、1つの &lt;code&gt;EventListener&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="ce47f4fbd44866013a3484c775bc335526230a6b" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, players can get an ending with &lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Alice crying into a pool of tears&lt;/a&gt;. In the game, for performance reasons, the tears should only be animating when they're visible. So they must be paused as soon as they are animated like so:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;成長/縮小アリスゲームの&lt;/a&gt;例として、プレイヤーはで終わるを得ることができます&lt;a href=&quot;http://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;アリスは涙のプールに泣いて&lt;/a&gt;。ゲームでは、パフォーマンス上の理由から、涙は目に見える場合にのみアニメーション化する必要があります。したがって、アニメーション化されたらすぐに一時停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="1f97c5e22a8412f74172efbe4d3fc58e65eafcde" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;Forgotten Key&lt;/a&gt; example, Alice waves her arm up and down by passing her an &lt;code&gt;alternate&lt;/code&gt; value for her &lt;code&gt;direction&lt;/code&gt; property:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;忘れられたキー&lt;/a&gt;例えば、アリス波が彼女は彼女に渡すことによって、上下アームと &lt;code&gt;alternate&lt;/code&gt; 彼女のための値 &lt;code&gt;direction&lt;/code&gt; 性を：</target>
        </trans-unit>
        <trans-unit id="5c8cbb2f566cba2fd38c09a4aa57733808943991" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;Forgotten Key&lt;/a&gt; example, Alice waves her arm up and down the entire time the page is open by passing &lt;code&gt;Infinity&lt;/code&gt; as the value for her &lt;code&gt;iterations&lt;/code&gt; property:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;忘れられた主な&lt;/a&gt;例として、アリスの波が彼女には、最大腕全体のダウンタイムのページには、渡すことで開いている &lt;code&gt;Infinity&lt;/code&gt; 彼女のための値として、 &lt;code&gt;iterations&lt;/code&gt; プロパティ：</target>
        </trans-unit>
        <trans-unit id="2c892ed1b4c2d80a928b1b6bc3d60c8e0ce6d8a0" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, &lt;code&gt;whiteRabbit&lt;/code&gt; sets the &lt;code&gt;target&lt;/code&gt; element to be animated:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、 &lt;code&gt;whiteRabbit&lt;/code&gt; は、設定 &lt;code&gt;target&lt;/code&gt; 要素をアニメーション化します：</target>
        </trans-unit>
        <trans-unit id="d57f87a4c92a2dd36732c3007295e662906a7cb1" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the &lt;code&gt;Animation()&lt;/code&gt; constructor is used to create an &lt;code&gt;Animation&lt;/code&gt; for the &lt;code&gt;rabbitDownKeyframes&lt;/code&gt; using the document's &lt;code&gt;timeline&lt;/code&gt;:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、 &lt;code&gt;Animation()&lt;/code&gt; コンストラクタを作成するために使用される &lt;code&gt;Animation&lt;/code&gt; のための &lt;code&gt;rabbitDownKeyframes&lt;/code&gt; ドキュメントの使用して &lt;code&gt;timeline&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="e919e7052a1fb04189f5298ef0aeed5addb60a81" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the &lt;code&gt;KeyframeEffect&lt;/code&gt; constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、 &lt;code&gt;KeyframeEffect&lt;/code&gt; のコンストラクタは、白ウサギが穴を下にアニメーション化すべき方法を指示することをキーフレームのセットを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="5dc7d3f46c7c879ce882c77ba8667b3a8c0fcd98" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the KeyframeEffect constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、KeyframeEffectコンストラクタは、白ウサギが穴を下にアニメーション化すべき方法を指示することをキーフレームのセットを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="071693fd0cc0ece3fcd2069423c95fa1c37f35fd" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, you can assign the &lt;code&gt;rabbitDownAnimation&lt;/code&gt; an &lt;code&gt;id&lt;/code&gt; like so:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;フォロー白うさぎの例&lt;/a&gt;は、割り当てることができ &lt;code&gt;rabbitDownAnimation&lt;/code&gt; を &lt;code&gt;id&lt;/code&gt; そうのように：</target>
        </trans-unit>
        <trans-unit id="31e3f097211b1868c0e1036a1f521e423e1d689e" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;Follow the White Rabbit&lt;/a&gt; example, the White Rabbit's animation is formed by coupling a &lt;code&gt;KeyframeEffect&lt;/code&gt; with an &lt;code&gt;Animation&lt;/code&gt; object. The &lt;code&gt;keyframeEffect&lt;/code&gt; takes an object of &lt;a href=&quot;../effecttiming&quot;&gt;timing properties&lt;/a&gt;, which is where we pass in &lt;code&gt;fill&lt;/code&gt;. &lt;code&gt;Forwards&lt;/code&gt; makes the rabbit retain its last keyframe rather than reverting to its unanimated state:</source>
          <target state="translated">&lt;a href=&quot;http://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;フォローホワイトラビット&lt;/a&gt;例えば、白ウサギのアニメーションが結合することによって形成される &lt;code&gt;KeyframeEffect&lt;/code&gt; を用いて &lt;code&gt;Animation&lt;/code&gt; オブジェクト。 &lt;code&gt;keyframeEffect&lt;/code&gt; は対象とる&lt;a href=&quot;../effecttiming&quot;&gt;タイミング特性&lt;/a&gt;我々は渡しここで、 &lt;code&gt;fill&lt;/code&gt; 。 &lt;code&gt;Forwards&lt;/code&gt; すると、ウサギはアニメーション化されていない状態に戻るのではなく、最後のキーフレームを保持します。</target>
        </trans-unit>
        <trans-unit id="9f9e06b09ced74d19ee9f6966beb25606973889e" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;http://codepen.io/rachelnabors/pen/zxYexJ?editors=0010&quot;&gt;Running on Web Animations API example&lt;/a&gt;, the we can sync all new animated cats by giving them all the same &lt;code&gt;startTime&lt;/code&gt; as the original running cat:</source>
          <target state="translated">で&lt;a href=&quot;http://codepen.io/rachelnabors/pen/zxYexJ?editors=0010&quot;&gt;ウェブアニメーションAPIの例を実行する&lt;/a&gt;、我々は彼らにすべて同じ与えることによって、すべての新しいアニメーションの猫を同期することができ &lt;code&gt;startTime&lt;/code&gt; 元の実行の猫として：</target>
        </trans-unit>
        <trans-unit id="88ac2a60a399b5e7c111692972c3940c0a6fb38d" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Pool of Tears&lt;/a&gt; example, each tear is passed a random &lt;code&gt;duration&lt;/code&gt; via its timing object:</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;涙&lt;/a&gt;のプールの例では、各涙はそのタイミングオブジェクトを介してランダムな &lt;code&gt;duration&lt;/code&gt; が渡されます。</target>
        </trans-unit>
        <trans-unit id="5e464a34ff90376d7ea749efa0e7f75fe8ed71bc" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Pool of Tears&lt;/a&gt; example, each tear is passed a random delay via its timing object:</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;涙のプール&lt;/a&gt;、例えば、それぞれの涙は、そのタイミングオブジェクトを介してランダム遅延を渡されます。</target>
        </trans-unit>
        <trans-unit id="4ed2b1a446ce3fa8afa38e4e86f7adbfa605378d" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNGGaV&quot;&gt;Red Queen Race&lt;/a&gt; example, we can inspect Alice and the RedQueen's animation to see its individual keyframes like so:</source>
          <target state="translated">では&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNGGaV&quot;&gt;赤の女王のレース&lt;/a&gt;たとえば、我々はそうのような個々のキーフレームを参照してくださいアリスとRedQueenのアニメーションを調べることができます。</target>
        </trans-unit>
        <trans-unit id="34453336eba1b51c35c2f752355201cfd9e76ada" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNGGaV?editors=0010&quot;&gt;Red Queen's Race&lt;/a&gt; example, we animate Alice and the Red Queen by passing an easing &lt;code&gt;of&amp;nbsp;steps(7, end)&lt;/code&gt; to &lt;code&gt;animate()&lt;/code&gt;:</source>
          <target state="translated">では&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNGGaV?editors=0010&quot;&gt;赤の女王のレース&lt;/a&gt;たとえば、我々は緩和渡すことによって、アリスと赤の女王をアニメーション化 &lt;code&gt;of&amp;nbsp;steps(7, end)&lt;/code&gt; に &lt;code&gt;animate()&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="c69f712228aafab52dddedecdbcc156e426e4138" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Drink Me/Eat Me game&lt;/a&gt;, Alice's height is animated so it can go from small to large or large to small. At the start of the game, her height is set between the two extremes by setting her animation's &lt;code&gt;currentTime&lt;/code&gt; to half her &lt;a href=&quot;../effecttiming&quot;&gt;&lt;code&gt;KeyframeEffect&lt;/code&gt;'s duration&lt;/a&gt;:</source>
          <target state="translated">では&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;ミー/ Meのゲームを食べる飲む&lt;/a&gt;、それは大小の小から大まで行くことができますので、アリスの高さがアニメ化されます。ゲームの開始時に、アニメーションの &lt;code&gt;currentTime&lt;/code&gt; を&lt;a href=&quot;../effecttiming&quot;&gt; &lt;code&gt;KeyframeEffect&lt;/code&gt; の持続時間の&lt;/a&gt;半分に設定することにより、彼女の身長は2つの極値の間に設定されます。</target>
        </trans-unit>
        <trans-unit id="cde67b0ce36cacccdd5026937c070e9d148910c7" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the bottle causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to play backwards, causing her to get smaller. It is done by setting &lt;code&gt;aliceChange&lt;/code&gt;'s &lt;a href=&quot;playbackrate&quot;&gt;&lt;code&gt;Animation.playbackRate&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;-1&lt;/code&gt; like so:</source>
          <target state="translated">では&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;アリスゲームの縮小/成長&lt;/a&gt;の例を、ボトルをクリックするかタップすると、アリスの成長アニメーション（原因 &lt;code&gt;aliceChange&lt;/code&gt; を彼女が小さくなるために引き起こして、逆方向に再生します）。これは、次のように &lt;code&gt;aliceChange&lt;/code&gt; の&lt;a href=&quot;playbackrate&quot;&gt; &lt;code&gt;Animation.playbackRate&lt;/code&gt; &lt;/a&gt;を &lt;code&gt;-1&lt;/code&gt; に設定することによって行われます。</target>
        </trans-unit>
        <trans-unit id="38816fd23636215e530bddac4dcffafebb92a768" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the bottle causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to reverse, causing her to shrink:</source>
          <target state="translated">では&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;アリスゲームの縮小/成長&lt;/a&gt;の例を、ボトルをクリックするかタップすると、アリスの成長アニメーション（原因 &lt;code&gt;aliceChange&lt;/code&gt; を彼女が縮小させ、逆に）：</target>
        </trans-unit>
        <trans-unit id="bb7bbd3b10df3341bf54420df3245ae56afceaba" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, clicking or tapping the cake causes Alice's growing animation (&lt;code&gt;aliceChange&lt;/code&gt;) to play forward, causing her to get bigger, as well as triggering the cake's animation. Two &lt;code&gt;Animation.play()&lt;/code&gt;s, one &lt;code&gt;EventListener&lt;/code&gt;:</source>
          <target state="translated">では&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;アリスゲームの縮小/成長&lt;/a&gt;の例を、ケーキをクリックするかタップすると、アリスの成長アニメーション（原因 &lt;code&gt;aliceChange&lt;/code&gt; を彼女が大きく取得させるだけでなく、ケーキのアニメーションをトリガし、前方に再生するために）。2つの &lt;code&gt;Animation.play()&lt;/code&gt; 、1つの &lt;code&gt;EventListener&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="6ef23af827e85a5861c780f99ea433263bbb0a97" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;Growing/Shrinking Alice Game&lt;/a&gt; example, players can get an ending with &lt;a href=&quot;https://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;Alice crying into a pool of tears&lt;/a&gt;. In the game, for performance reasons, the tears should only be animating when they're visible. So they must be paused as soon as they are animated like so:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/PNYGZQ?editors=0010&quot;&gt;成長/縮小アリスゲームの&lt;/a&gt;例として、プレイヤーはで終わるを得ることができます&lt;a href=&quot;https://codepen.io/rachelnabors/pen/EPJdJx?editors=0010&quot;&gt;アリスは涙のプールに泣いて&lt;/a&gt;。ゲームでは、パフォーマンス上の理由から、涙は目に見えるときにのみアニメーション化する必要があります。したがって、次のようにアニメーション化されたらすぐに一時停止する必要があります。</target>
        </trans-unit>
        <trans-unit id="56e0254a62f3a9fe6f3181f4fcb639da5cf97c9a" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;Forgotten Key&lt;/a&gt; example, Alice waves her arm up and down by passing her an &lt;code&gt;alternate&lt;/code&gt; value for her &lt;code&gt;direction&lt;/code&gt; property:</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;忘れられたキー&lt;/a&gt;例えば、アリス波が彼女は彼女に渡すことによって、上下アームと &lt;code&gt;alternate&lt;/code&gt; 彼女のための値 &lt;code&gt;direction&lt;/code&gt; 性を：</target>
        </trans-unit>
        <trans-unit id="1ef9baecf9e2c453ca8572d610eb3b20cb005591" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;Forgotten Key&lt;/a&gt; example, Alice waves her arm up and down the entire time the page is open by passing &lt;code&gt;Infinity&lt;/code&gt; as the value for her &lt;code&gt;iterations&lt;/code&gt; property:</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/rachelnabors/pen/bEPdQr?editors=0010&quot;&gt;忘れられた主な&lt;/a&gt;例として、アリスの波が彼女には、最大腕全体のダウンタイムのページには、渡すことで開いている &lt;code&gt;Infinity&lt;/code&gt; 彼女のための値として、 &lt;code&gt;iterations&lt;/code&gt; プロパティ：</target>
        </trans-unit>
        <trans-unit id="5d262ea0b7a3cb611940b96df6d333ba2a5aa957" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, &lt;code&gt;whiteRabbit&lt;/code&gt; sets the &lt;code&gt;target&lt;/code&gt; element to be animated:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、 &lt;code&gt;whiteRabbit&lt;/code&gt; は、設定 &lt;code&gt;target&lt;/code&gt; 要素をアニメーション化します：</target>
        </trans-unit>
        <trans-unit id="3f660d13038715f45fcfe9d3ad3f889a68029288" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the &lt;code&gt;Animation()&lt;/code&gt; constructor is used to create an &lt;code&gt;Animation&lt;/code&gt; for the &lt;code&gt;rabbitDownKeyframes&lt;/code&gt; using the document's &lt;code&gt;timeline&lt;/code&gt;:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、 &lt;code&gt;Animation()&lt;/code&gt; コンストラクタを作成するために使用される &lt;code&gt;Animation&lt;/code&gt; のための &lt;code&gt;rabbitDownKeyframes&lt;/code&gt; ドキュメントの使用して &lt;code&gt;timeline&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="4fc8700c4acc46704a06c9307fad96fecaa9dfce" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the &lt;code&gt;KeyframeEffect&lt;/code&gt; constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、 &lt;code&gt;KeyframeEffect&lt;/code&gt; のコンストラクタは、白ウサギが穴を下にアニメーション化すべき方法を指示することをキーフレームのセットを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="35e0e6c454df99d76a76f51c668dc32a681b43f5" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, the KeyframeEffect constructor is used to create a set of keyframes that dictate how the White Rabbit should animate down the hole:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm/?editors=0010&quot;&gt;フォロー白うさぎ例&lt;/a&gt;、KeyframeEffectコンストラクタは、白ウサギが穴を下にアニメーション化すべき方法を指示することをキーフレームのセットを作成するために使用されます。</target>
        </trans-unit>
        <trans-unit id="57c9b9602948e18006c99850ab1f4adc420ba741" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;Follow the White Rabbit example&lt;/a&gt;, you can assign the &lt;code&gt;rabbitDownAnimation&lt;/code&gt; an &lt;code&gt;id&lt;/code&gt; like so:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;フォロー白うさぎの例&lt;/a&gt;は、割り当てることができ &lt;code&gt;rabbitDownAnimation&lt;/code&gt; を &lt;code&gt;id&lt;/code&gt; そうのように：</target>
        </trans-unit>
        <trans-unit id="17a1e58921bb84ed692f0bb0b8fb047f9a984993" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;Follow the White Rabbit&lt;/a&gt; example, the White Rabbit's animation is formed by coupling a &lt;code&gt;KeyframeEffect&lt;/code&gt; with an &lt;code&gt;Animation&lt;/code&gt; object. The &lt;code&gt;keyframeEffect&lt;/code&gt; takes an object of &lt;a href=&quot;../effecttiming&quot;&gt;timing properties&lt;/a&gt;, which is where we pass in &lt;code&gt;fill&lt;/code&gt;. &lt;code&gt;Forwards&lt;/code&gt; makes the rabbit retain its last keyframe rather than reverting to its unanimated state:</source>
          <target state="translated">&lt;a href=&quot;https://codepen.io/rachelnabors/pen/eJyWzm?editors=0010&quot;&gt;フォローホワイトラビット&lt;/a&gt;例えば、白ウサギのアニメーションが結合することによって形成される &lt;code&gt;KeyframeEffect&lt;/code&gt; を用いて &lt;code&gt;Animation&lt;/code&gt; オブジェクト。 &lt;code&gt;keyframeEffect&lt;/code&gt; は対象とる&lt;a href=&quot;../effecttiming&quot;&gt;タイミング特性&lt;/a&gt;我々は渡しここで、 &lt;code&gt;fill&lt;/code&gt; 。 &lt;code&gt;Forwards&lt;/code&gt; を使用すると、ウサギはアニメーション化されていない状態に戻るのではなく、最後のキーフレームを保持します。</target>
        </trans-unit>
        <trans-unit id="58e7bb6e8605811e572edf3ef05381201408fc6b" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://codepen.io/rachelnabors/pen/zxYexJ?editors=0010&quot;&gt;Running on Web Animations API example&lt;/a&gt;, the we can sync all new animated cats by giving them all the same &lt;code&gt;startTime&lt;/code&gt; as the original running cat:</source>
          <target state="translated">で&lt;a href=&quot;https://codepen.io/rachelnabors/pen/zxYexJ?editors=0010&quot;&gt;ウェブアニメーションAPIの例を実行する&lt;/a&gt;、我々は彼らにすべて同じ与えることによって、すべての新しいアニメーションの猫を同期することができ &lt;code&gt;startTime&lt;/code&gt; 元の実行の猫として：</target>
        </trans-unit>
        <trans-unit id="748f5741c26a5bddcbc0305b56737ef101affdfe" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API/Introduction&quot;&gt;File System API&lt;/a&gt;, a &lt;code&gt;FileError&lt;/code&gt; represents error conditions that you might encounter while accessing the file system using the asynchronous API. It extends the &lt;code&gt;FileError&lt;/code&gt; interface described in &lt;a href=&quot;http://dev.w3.org/2009/dap/file-system/pub/FileSystem/#bib-FILE-WRITER&quot;&gt;File Writer&lt;/a&gt; and adds several new error codes.</source>
          <target state="translated">では&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API/Introduction&quot;&gt;ファイルシステムAPI&lt;/a&gt;、 &lt;code&gt;FileError&lt;/code&gt; 非同期APIを使用してファイルシステムへのアクセス中に発生する可能性のあるエラー状態を表します。&lt;a href=&quot;http://dev.w3.org/2009/dap/file-system/pub/FileSystem/#bib-FILE-WRITER&quot;&gt;File Writerで&lt;/a&gt;説明されている &lt;code&gt;FileError&lt;/code&gt; インターフェイスを拡張し、いくつかの新しいエラーコードを追加します。</target>
        </trans-unit>
        <trans-unit id="3e95bcc3871e1fe11276d4f662264f5c7a41c256" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API/Introduction&quot;&gt;File System API&lt;/a&gt;, a &lt;code&gt;FileError&lt;/code&gt; represents error conditions that you might encounter while accessing the file system using the asynchronous API. It extends the &lt;code&gt;FileError&lt;/code&gt; interface described in &lt;a href=&quot;https://dev.w3.org/2009/dap/file-system/pub/FileSystem/#bib-FILE-WRITER&quot;&gt;File Writer&lt;/a&gt; and adds several new error codes.</source>
          <target state="translated">では&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/File_and_Directory_Entries_API/Introduction&quot;&gt;ファイルシステムAPI&lt;/a&gt;、 &lt;code&gt;FileError&lt;/code&gt; 非同期APIを使用してファイルシステムへのアクセス中に発生する可能性のあるエラー状態を表します。&lt;a href=&quot;https://dev.w3.org/2009/dap/file-system/pub/FileSystem/#bib-FILE-WRITER&quot;&gt;File Writerで&lt;/a&gt;説明されている &lt;code&gt;FileError&lt;/code&gt; インターフェイスを拡張し、いくつかの新しいエラーコードを追加します。</target>
        </trans-unit>
        <trans-unit id="31b81cbbb80d238a2f89066bdaabab365cf298d7" translate="yes" xml:space="preserve">
          <source>In the &lt;a href=&quot;webvr_api&quot;&gt;WebVR API&lt;/a&gt;, &lt;code&gt;DOMPoint&lt;/code&gt; values are used to represent points in the coordinate space that the user's head mounted display exists in. In the following snippet, the position of the VR HMD can be retrieved by first grabbing a reference to the position sensor's current state using &lt;a href=&quot;positionsensorvrdevice/getstate&quot;&gt;&lt;code&gt;PositionSensorVRDevice.getState()&lt;/code&gt;&lt;/a&gt;, then accessing the resulting &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRPositionState&quot;&gt;&lt;code&gt;VRPositionState&lt;/code&gt;&lt;/a&gt;'s &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/position&quot;&gt;&lt;code&gt;position&lt;/code&gt;&lt;/a&gt; property, which returns a &lt;code&gt;DOMPoint&lt;/code&gt;. Note below the usage of &lt;code&gt;position.x&lt;/code&gt;, &lt;code&gt;position.y&lt;/code&gt;, and &lt;code&gt;position.z&lt;/code&gt;.</source>
          <target state="translated">で&lt;a href=&quot;webvr_api&quot;&gt;WebVRのAPI&lt;/a&gt;、 &lt;code&gt;DOMPoint&lt;/code&gt; の値は、ユーザの頭部がディスプレイの中に存在して取り付けられたことを座標空間内の点を表すために使用されている。次のスニペットでは、VR HMDの位置は、位置センサの現在の状態に最初つかむ参照することによって取得することができ使用&lt;a href=&quot;positionsensorvrdevice/getstate&quot;&gt; &lt;code&gt;PositionSensorVRDevice.getState()&lt;/code&gt; &lt;/a&gt;次に、得られたアクセス、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRPositionState&quot;&gt; &lt;code&gt;VRPositionState&lt;/code&gt; &lt;/a&gt;の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/VRPositionState/position&quot;&gt; &lt;code&gt;position&lt;/code&gt; &lt;/a&gt;返すプロパティ、 &lt;code&gt;DOMPoint&lt;/code&gt; を。 &lt;code&gt;position.x&lt;/code&gt; 、 &lt;code&gt;position.y&lt;/code&gt; 、および &lt;code&gt;position.z&lt;/code&gt; の使用法に注意してください。</target>
        </trans-unit>
        <trans-unit id="bb1fc260c83966dd331019cec75ccb6c2f27f605" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;displayPoseStats()&lt;/code&gt; function, we grab all of the data we want to display out of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose&quot;&gt;&lt;code&gt;GamepadPose&lt;/code&gt;&lt;/a&gt; object passed into it, then print them into the UI panel that exists in the demo for displaying such data:</source>
          <target state="translated">で &lt;code&gt;displayPoseStats()&lt;/code&gt; 関数で、我々は我々が出て表示するデータのすべてをつかむ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/GamepadPose&quot;&gt; &lt;code&gt;GamepadPose&lt;/code&gt; の&lt;/a&gt;ようなデータを表示するためのデモに存在するUIパネルにそれらを印刷し、その後、それに渡されたオブジェクトを：</target>
        </trans-unit>
        <trans-unit id="7c51818ebbd3921f216a6e778639df0d79c9f898" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;draw()&lt;/code&gt; function, we call the &lt;code&gt;fillRect()&lt;/code&gt; function nine times using two &lt;code&gt;for&lt;/code&gt; loops. In each loop, the canvas is translated, the rectangle is drawn, and the canvas is returned back to its original state. Note how the call to &lt;code&gt;fillRect()&lt;/code&gt; uses the same coordinates each time, relying on &lt;code&gt;translate()&lt;/code&gt; to adjust the drawing position.</source>
          <target state="translated">で &lt;code&gt;draw()&lt;/code&gt; 関数で、我々は呼んで &lt;code&gt;fillRect()&lt;/code&gt; 2使用して9回関数 &lt;code&gt;for&lt;/code&gt; ループ。各ループでは、キャンバスが変換され、長方形が描画され、キャンバスが元の状態に戻ります。呼び出し方法を注意 &lt;code&gt;fillRect()&lt;/code&gt; に頼って、毎回同じ座標を使用して &lt;code&gt;translate()&lt;/code&gt; 描画位置を調整します。</target>
        </trans-unit>
        <trans-unit id="b56af66348fd5d195d217eafa61955360f6eb10f" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;readStream()&lt;/code&gt; function itself, we lock a reader to the stream using &lt;a href=&quot;../readablestream/getreader&quot;&gt;&lt;code&gt;ReadableStream.getReader()&lt;/code&gt;&lt;/a&gt;, then follow the same kind of pattern we saw earlier &amp;mdash; reading each chunk with &lt;code&gt;read()&lt;/code&gt;, checking whether &lt;code&gt;done&lt;/code&gt; is &lt;code&gt;true&lt;/code&gt; and then ending the process if so, and reading the next chunk and processing it if not, before running the &lt;code&gt;read()&lt;/code&gt; function again.</source>
          <target state="translated">で &lt;code&gt;readStream()&lt;/code&gt; 関数自体、私たちが使用してストリームに読者ロック&lt;a href=&quot;../readablestream/getreader&quot;&gt; &lt;code&gt;ReadableStream.getReader()&lt;/code&gt; &lt;/a&gt;で各チャンク読んで- 、そして、私たちは前に見たパターンと同じ種類の続く &lt;code&gt;read()&lt;/code&gt; かどうかをチェックし、 &lt;code&gt;done&lt;/code&gt; ある &lt;code&gt;true&lt;/code&gt; 、その後終了その場合は処理し、次のチャンクを読み取って処理しない場合は、 &lt;code&gt;read()&lt;/code&gt; 関数を再度実行します。</target>
        </trans-unit>
        <trans-unit id="bb029e4341e6bd4f62bafbfdb2ab6af6d7d6b7b3" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;updateStyle()&lt;/code&gt; function itself, we get a reference to the shadow DOM using &lt;a href=&quot;element/shadowroot&quot;&gt;&lt;code&gt;Element.shadowRoot&lt;/code&gt;&lt;/a&gt;. From here we use standard DOM traversal techniques to find the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; element inside the shadow DOM and then update the CSS found inside it:</source>
          <target state="translated">で &lt;code&gt;updateStyle()&lt;/code&gt; 関数自体、我々は使用して影のDOMへの参照を取得&lt;a href=&quot;element/shadowroot&quot;&gt; &lt;code&gt;Element.shadowRoot&lt;/code&gt; を&lt;/a&gt;。ここから、標準のDOMトラバーサル手法を使用して、シャドウDOM内の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt; &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; &lt;/a&gt;要素を見つけ、その中にあるCSSを更新します。</target>
        </trans-unit>
        <trans-unit id="9c6ff5af1334148b91029abc027cca914a15f932" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;updateStyle()&lt;/code&gt; function itself, we get a reference to the shadow DOM using &lt;a href=&quot;shadowroot&quot;&gt;&lt;code&gt;Element.shadowRoot&lt;/code&gt;&lt;/a&gt;. From here we use standard DOM traversal techniques to find the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; element inside the shadow DOM and then update the CSS found inside it:</source>
          <target state="translated">で &lt;code&gt;updateStyle()&lt;/code&gt; 関数自体、我々は使用して影のDOMへの参照を取得&lt;a href=&quot;shadowroot&quot;&gt; &lt;code&gt;Element.shadowRoot&lt;/code&gt; を&lt;/a&gt;。ここから、標準のDOMトラバーサル手法を使用して、シャドウDOM内の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt; &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; &lt;/a&gt;要素を見つけ、その中にあるCSSを更新します。</target>
        </trans-unit>
        <trans-unit id="04650fa0d0cd02a07bf39fff451f43fb09793e92" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;worker.js&lt;/code&gt; script, a &lt;code&gt;DedicatedWorkerGlobalScope.onmessage&lt;/code&gt; handler is used to handle messages from the main script:</source>
          <target state="translated">で &lt;code&gt;worker.js&lt;/code&gt; スクリプト、 &lt;code&gt;DedicatedWorkerGlobalScope.onmessage&lt;/code&gt; のハンドラは、メインスクリプトからハンドルメッセージに使用されます。</target>
        </trans-unit>
        <trans-unit id="7a0be8078e13bc0c5378221913e5c62968ec583b" translate="yes" xml:space="preserve">
          <source>In the &lt;code&gt;worker.js&lt;/code&gt; script, an &lt;code&gt;onmessage&lt;/code&gt; handler is used the handle messages from the main script:</source>
          <target state="translated">で &lt;code&gt;worker.js&lt;/code&gt; スクリプト &lt;code&gt;onmessage&lt;/code&gt; ハンドラは、メインスクリプトからハンドルのメッセージを使用しています：</target>
        </trans-unit>
        <trans-unit id="46c335918199385a46beee58c2f3e09cb27b9c1f" translate="yes" xml:space="preserve">
          <source>In the HTML we just need to hook our function to the `onkeypress` event and specify that our textarea does not accept pasting:</source>
          <target state="translated">HTMLでは、関数を `onkeypress` イベントにフックして、テキストエリアが貼り付けを受け付けないように指定するだけです。</target>
        </trans-unit>
        <trans-unit id="9eaf6573ce3ac8e6c6ba35bfea60e7baeeeb376e" translate="yes" xml:space="preserve">
          <source>In the Media Stream API, both &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; have constrainable properties.</source>
          <target state="translated">Media Stream APIでは、&lt;a href=&quot;../mediastream&quot;&gt; &lt;code&gt;MediaStream&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;../mediastreamtrack&quot;&gt; &lt;code&gt;MediaStreamTrack&lt;/code&gt; の&lt;/a&gt;両方に制約可能なプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="159a217b1d19a1ba5a26df24bfe572fb5946b57a" translate="yes" xml:space="preserve">
          <source>In the above example it can be observed that we can use the identifier and pseudo class name for defining the language of caption, where &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; tag is for italics.</source>
          <target state="translated">上記の例では、キャプションの言語を定義するために識別子と疑似クラス名を使用できることがわかります。ここで、 &lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt; タグはイタリック体です。</target>
        </trans-unit>
        <trans-unit id="2ea2b539c7a1c9b9602da25dfb485fd9becc08f6" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;#text&lt;/code&gt; nodes are inserted in the DOM where whitespace occurs between tags (i.e. after the closing tag of an element and before the opening tag of the next).</source>
          <target state="translated">上記の例では、 &lt;code&gt;#text&lt;/code&gt; ノードがDOMに挿入され、タグ間で空白が発生します（つまり、要素の終了タグの後、次の開始タグの前）。</target>
        </trans-unit>
        <trans-unit id="2c6ec540892c01e0fe46e63eef1516429f317e9b" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;selObj.toString()&lt;/code&gt; is automatically called when it is passed to &lt;a href=&quot;../window/alert&quot;&gt;&lt;code&gt;Window.alert()&lt;/code&gt;&lt;/a&gt;. However, attempting to use a JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String&lt;/a&gt; property or method such as &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; directly on a &lt;a href=&quot;../selection&quot;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt; object results in an error if it does not have that property or method and may return unexpected results if it does. To use a &lt;code&gt;Selection&lt;/code&gt; object as a string, call its &lt;code&gt;toString()&lt;/code&gt; method directly:</source>
          <target state="translated">上記の例では、 &lt;code&gt;selObj.toString()&lt;/code&gt; はそれが渡されたときに自動的に呼び出される&lt;a href=&quot;../window/alert&quot;&gt; &lt;code&gt;Window.alert()&lt;/code&gt; &lt;/a&gt;。ただし、&lt;a href=&quot;../selection&quot;&gt; &lt;code&gt;Selection&lt;/code&gt; &lt;/a&gt;オブジェクトでJavaScriptの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String&lt;/a&gt;プロパティまたはメソッド（ &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; など）を直接使用しようとすると、そのプロパティまたはメソッドがない場合はエラーが発生し、そうでない場合は予期しない結果が返されることがあります。 &lt;code&gt;Selection&lt;/code&gt; オブジェクトを文字列として使用するには、その &lt;code&gt;toString()&lt;/code&gt; メソッドを直接呼び出します。</target>
        </trans-unit>
        <trans-unit id="a89d604b3477fbfe0e9e3f5d0a2727debd14b6b3" translate="yes" xml:space="preserve">
          <source>In the above example, &lt;code&gt;selObj.toString()&lt;/code&gt; is automatically called when it is passed to &lt;a href=&quot;alert&quot;&gt;&lt;code&gt;window.alert()&lt;/code&gt;&lt;/a&gt;. However, attempting to use a JavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;String&lt;/a&gt; property or method such as &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; or &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; directly on a &lt;a href=&quot;../selection&quot;&gt;&lt;code&gt;Selection&lt;/code&gt;&lt;/a&gt; object will result in an error if it does not have that property or method and may return unexpected results if it does. To use a &lt;code&gt;Selection&lt;/code&gt; object as a string, call its &lt;code&gt;toString()&lt;/code&gt; method directly:</source>
          <target state="translated">上記の例では、 &lt;code&gt;selObj.toString()&lt;/code&gt; は&lt;a href=&quot;alert&quot;&gt; &lt;code&gt;window.alert()&lt;/code&gt; に&lt;/a&gt;渡されると自動的に呼び出されます。ただし、&lt;a href=&quot;../selection&quot;&gt; &lt;code&gt;Selection&lt;/code&gt; &lt;/a&gt;オブジェクトで &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/length&quot;&gt;length&lt;/a&gt;&lt;/code&gt; や &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr&quot;&gt;substr&lt;/a&gt;&lt;/code&gt; などのJavaScript &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String&quot;&gt;文字列&lt;/a&gt;プロパティまたはメソッドを直接使用しようとすると、そのプロパティまたはメソッドがない場合はエラーが発生し、そうでない場合は予期しない結果が返される可能性があります。 &lt;code&gt;Selection&lt;/code&gt; オブジェクトを文字列として使用するには、その &lt;code&gt;toString()&lt;/code&gt; メソッドを直接呼び出します。</target>
        </trans-unit>
        <trans-unit id="b312d18e2d1af2f83dda821db09d7aa9fdb45b7f" translate="yes" xml:space="preserve">
          <source>In the above examples &lt;code&gt;ws&lt;/code&gt; has replaced &lt;code&gt;http&lt;/code&gt;, similarly &lt;code&gt;wss&lt;/code&gt; replaces &lt;code&gt;https&lt;/code&gt;. Establishing a WebSocket relies on the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism&quot;&gt;HTTP Upgrade mechanism&lt;/a&gt;, so the request for the protocol upgrade is implicit when we address the HTTP server as &lt;code&gt;ws://www.example.com&lt;/code&gt; or &lt;code&gt;wss://www.example.com&lt;/code&gt;.</source>
          <target state="translated">上記の例では、 &lt;code&gt;ws&lt;/code&gt; が &lt;code&gt;http&lt;/code&gt; に取って代わり、同様に &lt;code&gt;wss&lt;/code&gt; が &lt;code&gt;https&lt;/code&gt; に取って代わりました。WebSocketの確立は&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Protocol_upgrade_mechanism&quot;&gt;HTTPアップグレードメカニズムに&lt;/a&gt;依存しているため、HTTPサーバーを &lt;code&gt;ws://www.example.com&lt;/code&gt; または &lt;code&gt;wss://www.example.com&lt;/code&gt; としてアドレス指定すると、プロトコルアップグレードの要求が暗黙的に行われます。</target>
        </trans-unit>
        <trans-unit id="5ca15d3b8cb4a4353208bf48eb6ce069f10ddff6" translate="yes" xml:space="preserve">
          <source>In the above snippet, a named function &lt;code&gt;loop()&lt;/code&gt; is declared and is immediately executed. &lt;code&gt;loop()&lt;/code&gt; is recursively called inside &lt;code&gt;setTimeout()&lt;/code&gt; after the logic has completed executing. While this pattern does not guarantee execution on a fixed interval, it does guarantee that the previous interval has completed before recursing.</source>
          <target state="translated">上記のスニペットでは、名前付き関数 &lt;code&gt;loop()&lt;/code&gt; が宣言され、すぐに実行されます。 &lt;code&gt;loop()&lt;/code&gt; は、ロジックの実行が完了した後、 &lt;code&gt;setTimeout()&lt;/code&gt; 内で再帰的に呼び出されます。このパターンは、一定の間隔での実行を保証するものではありませんが、再帰する前に前の間隔が完了していることを保証します。</target>
        </trans-unit>
        <trans-unit id="038d50dc49f2e3b4b746867cf1c760513919ead8" translate="yes" xml:space="preserve">
          <source>In the above, the &lt;a href=&quot;../console&quot;&gt;console&lt;/a&gt; will show '#text' because a text node is inserted to maintain the whitespace between the end of the opening &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; tags. &lt;strong&gt;Any&lt;/strong&gt;&lt;a href=&quot;../document_object_model/whitespace_in_the_dom&quot;&gt;whitespace&lt;/a&gt; will create a &lt;code&gt;#text&lt;/code&gt; node, from a single space to multiple spaces, returns, tabs, and so on.</source>
          <target state="translated">上記では、開始 &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; タグと&amp;lt;span&amp;gt;タグの終わりの間の空白を維持するためにテキストノードが挿入されているため、&lt;a href=&quot;../console&quot;&gt;コンソール&lt;/a&gt;には「#text」が表示されます。&lt;strong&gt;任意の&lt;/strong&gt;&lt;a href=&quot;../document_object_model/whitespace_in_the_dom&quot;&gt;空白が&lt;/a&gt;作成する &lt;code&gt;#text&lt;/code&gt; ように複数のスペース、復帰、タブ、および単一空間から、ノード。&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="367d14782071c764710cebf410d8d975d3cbc7b3" translate="yes" xml:space="preserve">
          <source>In the article &lt;a href=&quot;web_audio_api/controlling_multiple_parameters_with_constantsourcenode&quot;&gt;Controlling multiple parameters with ConstantSourceNode&lt;/a&gt;, a &lt;code&gt;ConstantSourceNode&lt;/code&gt; is created to allow one slider control to change the gain on two &lt;a href=&quot;gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt;s. The three nodes are set up like this:</source>
          <target state="translated">「&lt;a href=&quot;web_audio_api/controlling_multiple_parameters_with_constantsourcenode&quot;&gt;ConstantSourceNode&lt;/a&gt;で複数のパラメーターを制御する」の記事では、1つのスライダーコントロールで2つの&lt;a href=&quot;gainnode&quot;&gt; &lt;code&gt;GainNode&lt;/code&gt; &lt;/a&gt;のゲインを変更できるように、 &lt;code&gt;ConstantSourceNode&lt;/code&gt; を作成しています。3つのノードは次のように設定されています。</target>
        </trans-unit>
        <trans-unit id="4b77e474bcf3ab917f6ed436e550316024843d15" translate="yes" xml:space="preserve">
          <source>In the beginning, JavaScript and the DOM were tightly intertwined, but eventually, they evolved into separate entities. The page content is stored in the DOM and may be accessed and manipulated via JavaScript, so that we may write this approximative equation:</source>
          <target state="translated">当初、JavaScriptとDOMは密接に絡み合っていましたが、最終的には別々の存在に進化しました。ページの内容はDOMに格納されており、JavaScriptを介してアクセスしたり操作したりすることができるので、この近似式を書くことができます。</target>
        </trans-unit>
        <trans-unit id="5bb136d61139a16fcd17f87f13d568e3b53f76eb" translate="yes" xml:space="preserve">
          <source>In the below sections we'll look at our raw-webgl-demo in detail, and see where exactly the above features are used.</source>
          <target state="translated">以下のセクションでは、私たちの raw-webgl-demo を詳細に見て、上記の機能が正確にどこで使われているかを見ていきます。</target>
        </trans-unit>
        <trans-unit id="710670cb1700ac6bed01130dcfab169685441a86" translate="yes" xml:space="preserve">
          <source>In the box demo an additional &lt;code&gt;.computeSimpleProjectionMatrix()&lt;/code&gt; method is added. This is called in the &lt;code&gt;.draw()&lt;/code&gt; method and has the scale factor passed to it. The result should be identical to the last example:</source>
          <target state="translated">ボックスのデモでは、追加の &lt;code&gt;.computeSimpleProjectionMatrix()&lt;/code&gt; メソッドが追加されています。これは &lt;code&gt;.draw()&lt;/code&gt; メソッドで呼び出され、スケールファクターが渡されます。結果は最後の例と同じになるはずです。</target>
        </trans-unit>
        <trans-unit id="f23d9de14b710f223f240ff496d1dc7617be6575" translate="yes" xml:space="preserve">
          <source>In the case of an HTML document, you can also replace portions of the DOM with new DOM trees built from HTML by setting the value of the &lt;a href=&quot;element/innerhtml&quot;&gt;&lt;code&gt;Element.innerHTML&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;element/outerhtml&quot;&gt;&lt;code&gt;outerHTML&lt;/code&gt;&lt;/a&gt; properties. These properties can also be read to fetch HTML fragments corresponding to the corresponding DOM subtree.</source>
          <target state="translated">HTMLドキュメントの場合、&lt;a href=&quot;element/innerhtml&quot;&gt; &lt;code&gt;Element.innerHTML&lt;/code&gt; &lt;/a&gt;プロパティと&lt;a href=&quot;element/outerhtml&quot;&gt; &lt;code&gt;outerHTML&lt;/code&gt; &lt;/a&gt;プロパティの値を設定することにより、DOMの一部をHTMLから構築された新しいDOMツリーに置き換えることもできます。これらのプロパティを読み取って、対応するDOMサブツリーに対応するHTMLフラグメントをフェッチすることもできます。</target>
        </trans-unit>
        <trans-unit id="ae5881bd36ab53447d14d96fa581095cfc3ec7b3" translate="yes" xml:space="preserve">
          <source>In the case of audio, a disabled track generates frames of silence (that is, frames in which every sample's value is 0). For video tracks, every frame is filled entirely with black pixels.</source>
          <target state="translated">オーディオの場合、無効化されたトラックは、無音のフレームを生成します(つまり、すべてのサンプルの値が 0 のフレーム)。ビデオトラックの場合、すべてのフレームが黒のピクセルで埋め尽くされます。</target>
        </trans-unit>
        <trans-unit id="91e954687ec9108d17a620e698e7b922f3826401" translate="yes" xml:space="preserve">
          <source>In the case of each cue:</source>
          <target state="translated">各キューの場合。</target>
        </trans-unit>
        <trans-unit id="134c6dc788f159c41ef3215b21caa99007fa1a6c" translate="yes" xml:space="preserve">
          <source>In the case of readable streams, these are the chunks that have been enqueued but not yet read</source>
          <target state="translated">読み取り可能なストリームの場合、これらのチャンクはエンキューされているがまだ読み取られていないものです。</target>
        </trans-unit>
        <trans-unit id="3f53490f9424fcb6f6b4369c3cc51225440326d7" translate="yes" xml:space="preserve">
          <source>In the case of writable streams, these are chunks that have been written but not yet processed by the underlying sink.</source>
          <target state="translated">書き込み可能なストリームの場合、これらは書き込まれているが、基礎となるシンクではまだ処理されていないチャンクです。</target>
        </trans-unit>
        <trans-unit id="be56e67b0d7c13ff05b3c79f41df3127c8b70dd0" translate="yes" xml:space="preserve">
          <source>In the case you need to obtain more details about the text, the following method allows you to measure it.</source>
          <target state="translated">文章の詳細を知りたい場合は、以下の方法で測定することができます。</target>
        </trans-unit>
        <trans-unit id="361649fe0478299dc207f1091242e89204e295a2" translate="yes" xml:space="preserve">
          <source>In the chapter about &lt;a href=&quot;drawing_shapes&quot;&gt;drawing shapes&lt;/a&gt; I only mentioned the &lt;code&gt;stroke()&lt;/code&gt; and &lt;code&gt;fill()&lt;/code&gt; methods, but there's a third method we can use with paths, called &lt;code&gt;clip()&lt;/code&gt;.</source>
          <target state="translated">&lt;a href=&quot;drawing_shapes&quot;&gt;形状の描画&lt;/a&gt;に関する章では、 &lt;code&gt;stroke()&lt;/code&gt; &lt;code&gt;fill()&lt;/code&gt; メソッドとfill（）メソッドのみを説明しましたが、パスで使用できる3番目のメソッド、 &lt;code&gt;clip()&lt;/code&gt; があります。</target>
        </trans-unit>
        <trans-unit id="a556f68a246f6b0190846f10137ad4c3abd05977" translate="yes" xml:space="preserve">
          <source>In the chapter about &lt;a href=&quot;drawing_shapes&quot;&gt;drawing shapes&lt;/a&gt;, we used only the default line and fill styles. Here we will explore the canvas options we have at our disposal to make our drawings a little more attractive. You will learn how to add different colors, line styles, gradients, patterns and shadows to your drawings.</source>
          <target state="translated">&lt;a href=&quot;drawing_shapes&quot;&gt;図形の描画&lt;/a&gt;に関する章では、デフォルトの線と塗りつぶしのスタイルのみを使用しました。ここでは、図面をもう少し魅力的にするために自由に使えるキャンバスオプションについて説明します。さまざまな色、線のスタイル、グラデーション、パターン、影を図面に追加する方法を学びます。</target>
        </trans-unit>
        <trans-unit id="c631c29a2b75acd27f3b25ebe6d701570901afdb" translate="yes" xml:space="preserve">
          <source>In the code above &lt;var&gt;allCookies&lt;/var&gt; is a string containing a semicolon-separated list of all cookies (i.e. &lt;code&gt;&lt;var&gt;key&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; pairs). Note that each &lt;var&gt;key&lt;/var&gt; and &lt;var&gt;value&lt;/var&gt; may be surrounded by whitespace (space and tab characters): in fact &lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt; mandates a single space after each semicolon, but some user agents may not abide by this.</source>
          <target state="translated">上記のコードで、 &lt;var&gt;allCookies&lt;/var&gt; はセミコロンで区切られたすべてのCookieのリストを含む文字列です（つまり、 &lt;code&gt;&lt;var&gt;key&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; ペア）。各 &lt;var&gt;key&lt;/var&gt; と &lt;var&gt;value&lt;/var&gt; は空白（スペースとタブ文字）で囲まれている可能性があることに注意してください。実際、&lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;RFC 6265&lt;/a&gt;は各セミコロンの後に単一のスペースを要求しますが、一部のユーザーエージェントはこれに従わない場合があります。</target>
        </trans-unit>
        <trans-unit id="1beb82ea79fef09ff7e1a22efa54cee0599c7186" translate="yes" xml:space="preserve">
          <source>In the code above, &lt;code&gt;newCookie&lt;/code&gt; is a string of form &lt;code&gt;&lt;var&gt;key&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt;. Note that you can only set/update a single cookie at a time using this method. Consider also that:</source>
          <target state="translated">上記のコードでは、 &lt;code&gt;newCookie&lt;/code&gt; は &lt;code&gt;&lt;var&gt;key&lt;/var&gt;=&lt;var&gt;value&lt;/var&gt;&lt;/code&gt; という形式の文字列です。このメソッドを使用して一度に設定/更新できるのは1つのCookieのみであることに注意してください。以下も考慮してください。</target>
        </trans-unit>
        <trans-unit id="751430196020e462a1062f8a888bc205355532d9" translate="yes" xml:space="preserve">
          <source>In the code example, &quot;caches&quot; is an attribute of the service worker's &lt;code&gt;WorkerGlobalScope&lt;/code&gt;. It holds the &lt;code&gt;CacheStorage&lt;/code&gt; object, by which by can access the &lt;a href=&quot;cachestorage&quot;&gt;&lt;code&gt;CacheStorage&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">コード例では、「キャッシュ」はサービスワーカーの &lt;code&gt;WorkerGlobalScope&lt;/code&gt; の属性です。これは、 &lt;code&gt;CacheStorage&lt;/code&gt; オブジェクトを保持します。これにより、&lt;a href=&quot;cachestorage&quot;&gt; &lt;code&gt;CacheStorage&lt;/code&gt; &lt;/a&gt;インターフェースにアクセスできます。</target>
        </trans-unit>
        <trans-unit id="790fbaf97cead8a6a45860bb674cff8e4c36ab8a" translate="yes" xml:space="preserve">
          <source>In the common case the base URL is simply the location of the document, but it can be affected by many factors, including the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt;&lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;&lt;/a&gt; element in HTML and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XML/xml:base&quot;&gt;xml:base&lt;/a&gt;&lt;/code&gt; attribute in XML.</source>
          <target state="translated">一般的なケースでは、ベースURLは単にドキュメントの場所ですが、HTMLの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base&quot;&gt; &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt; &lt;/a&gt;要素や &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/XML/xml:base&quot;&gt;xml:base&lt;/a&gt;&lt;/code&gt; 属性など、多くの要因の影響を受ける可能性があります。</target>
        </trans-unit>
        <trans-unit id="e5efef753ebf52497839ffd70a6f90392e3a260d" translate="yes" xml:space="preserve">
          <source>In the console, the following trace will be displayed:</source>
          <target state="translated">コンソールでは、以下のようなトレースが表示されます。</target>
        </trans-unit>
        <trans-unit id="184092cb6374f0fdb574e64edd6fa7228f3006f0" translate="yes" xml:space="preserve">
          <source>In the definition of &lt;code&gt;render()&lt;/code&gt; if &lt;code&gt;copyVideo&lt;/code&gt; is true, then we call &lt;code&gt;updateTexture()&lt;/code&gt; each time just before we call the &lt;code&gt;drawScene()&lt;/code&gt; function.</source>
          <target state="translated">定義では &lt;code&gt;render()&lt;/code&gt; 場合 &lt;code&gt;copyVideo&lt;/code&gt; が真である、そして我々は呼んで &lt;code&gt;updateTexture()&lt;/code&gt; 我々が呼ぶ直前に毎回 &lt;code&gt;drawScene()&lt;/code&gt; 関数を。</target>
        </trans-unit>
        <trans-unit id="1a2b40f1952f87fed97f07552defd99596f27dfe" translate="yes" xml:space="preserve">
          <source>In the demo &lt;a href=&quot;https://codepen.io/rachelnabors/pen/rxpmJL/?editors=0010&quot;&gt;Down the Rabbit Hole (with the Web Animation API)&lt;/a&gt;, we use the convenient &lt;code&gt;animate()&lt;/code&gt; method to immediately create and play an animation on the &lt;code&gt;#tunnel&lt;/code&gt; element to make it flow upwards, infinitely. Notice the array of objects passed as keyframes and also the timing options block.</source>
          <target state="translated">デモ&lt;a href=&quot;https://codepen.io/rachelnabors/pen/rxpmJL/?editors=0010&quot;&gt;ダウンザラビットホール（WebアニメーションAPI&lt;/a&gt;を使用）では、便利な &lt;code&gt;animate()&lt;/code&gt; メソッドを使用して &lt;code&gt;#tunnel&lt;/code&gt; 要素のアニメーションをすぐに作成および再生し、無限に上向きに流れます。キーフレームとして渡されたオブジェクトの配列とタイミングオプションブロックにも注目してください。</target>
        </trans-unit>
        <trans-unit id="202f4b98e2e457f51462bd23a0954aa84dff43bc" translate="yes" xml:space="preserve">
          <source>In the example below, 10 straight lines are drawn with increasing line widths. The line on the far left is 1.0 units wide. However, the leftmost and all other odd-integer-width thickness lines do not appear crisp, because of the path's positioning.</source>
          <target state="translated">下の例では、10本の直線を線幅を大きくして描いています。一番左端の線は1.0単位の太さです。しかし、左端をはじめとするすべての奇数整数幅の太さの線は、パスの位置関係でサクサクとは見えません。</target>
        </trans-unit>
        <trans-unit id="4780447d1e77484538059276c40fc54c59ac1837" translate="yes" xml:space="preserve">
          <source>In the example below, &lt;code&gt;onpayerdetailchange&lt;/code&gt; is used to set up a listener for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/payerdetailchange&quot;&gt;payerdetailchange&lt;/a&gt;&lt;/code&gt; event in order to validate the information entered by the user, requesting that any mistakes be corrected</source>
          <target state="translated">次の例では、 &lt;code&gt;onpayerdetailchange&lt;/code&gt; を使用して &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/payerdetailchange&quot;&gt;payerdetailchange&lt;/a&gt;&lt;/code&gt; イベントのリスナーを設定し、ユーザーが入力した情報を検証して、誤りの修正を要求しています</target>
        </trans-unit>
        <trans-unit id="206c3c63cab7b422d50e2a3959c149ce7f63615b" translate="yes" xml:space="preserve">
          <source>In the example below, a data channel is established, and an &lt;code&gt;onerror&lt;/code&gt; handler is added to it. The error handler passes information about the error to a UI library's alert box function to present an error message to the user.</source>
          <target state="translated">以下の例では、データチャネルが確立され、 &lt;code&gt;onerror&lt;/code&gt; ハンドラーが追加されています。エラーハンドラーは、エラーに関する情報をUIライブラリのアラートボックス関数に渡し、ユーザーにエラーメッセージを表示します。</target>
        </trans-unit>
        <trans-unit id="cc512e47a94228213beabd56b67ae6b89f92ac38" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaoptionchange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaoptionchange&lt;/code&gt;&lt;/a&gt; event is called. It calls &lt;code&gt;updateDetails()&lt;/code&gt; to toggle the shipping method between &quot;standard&quot; and &quot;express&quot;.</source>
          <target state="translated">以下の例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaoptionchange&quot;&gt; &lt;code&gt;PaymentRequest.onshippingaoptionchange&lt;/code&gt; &lt;/a&gt;イベントが呼び出されます。 &lt;code&gt;updateDetails()&lt;/code&gt; を呼び出して、配送方法を「標準」と「エクスプレス」の間で切り替えます。</target>
        </trans-unit>
        <trans-unit id="034961eecc07f0e41d6e1c8958f78f79a6d78deb" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;a href=&quot;onshippingoptionchange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingoptionchange&lt;/code&gt;&lt;/a&gt; and the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaoptionchange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaoptionchange&lt;/code&gt;&lt;/a&gt; events are dispatched. In each calls to &lt;code&gt;updateDetails()&lt;/code&gt; are made, one using a promise, and the other with a plain JS object. This demotrates synchrounous and asynchronous updates to a payment sheet.</source>
          <target state="translated">以下の例では、&lt;a href=&quot;onshippingoptionchange&quot;&gt; &lt;code&gt;PaymentRequest.onshippingoptionchange&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/PaymentRequest/onshippingaoptionchange&quot;&gt; &lt;code&gt;PaymentRequest.onshippingaoptionchange&lt;/code&gt; の&lt;/a&gt;イベントが送出されています。 &lt;code&gt;updateDetails()&lt;/code&gt; の呼び出しごとに、1つはpromiseを使用し、もう1つはプレーンなJSオブジェクトを使用して行われます。このデモは、支払いシートへの同期および非同期の更新をデモートします。</target>
        </trans-unit>
        <trans-unit id="106802246ff2cba3885c494ae2d379522d6bdd57" translate="yes" xml:space="preserve">
          <source>In the example below, the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; attribute of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a&quot;&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/a&gt; element is set to &lt;code&gt;_blank&lt;/code&gt; and when the link is clicked, it logs to notify whether the condition is met or not.</source>
          <target state="translated">以下の例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Element/a&quot;&gt; &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; &lt;/a&gt;要素の &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/target&quot;&gt;target&lt;/a&gt;&lt;/code&gt; 属性が &lt;code&gt;_blank&lt;/code&gt; に設定されており、リンクをクリックすると、条件が満たされているかどうかを通知するためにログに記録されます。</target>
        </trans-unit>
        <trans-unit id="c6e4566e82bb56ea28b1e39a446bd27f432d4250" translate="yes" xml:space="preserve">
          <source>In the example below, the cost of shipping varies by geography. When the &lt;a href=&quot;../paymentrequest/onshippingaddresschange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaddresschange&lt;/code&gt;&lt;/a&gt; is called, &lt;code&gt;updateDetails()&lt;/code&gt; is called to update the details of the &lt;code&gt;PaymentRequest&lt;/code&gt;, using &lt;code&gt;shippingAddress&lt;/code&gt; to set the correct shipping cost.</source>
          <target state="translated">以下の例では、送料は地域によって異なります。とき&lt;a href=&quot;../paymentrequest/onshippingaddresschange&quot;&gt; &lt;code&gt;PaymentRequest.onshippingaddresschange&lt;/code&gt; が&lt;/a&gt;呼ばれ、 &lt;code&gt;updateDetails()&lt;/code&gt; の詳細更新するために呼び出され &lt;code&gt;PaymentRequest&lt;/code&gt; を使用して、 &lt;code&gt;shippingAddress&lt;/code&gt; 正しい送料を設定します。</target>
        </trans-unit>
        <trans-unit id="49f2eefcbea9337ae5b9fac581b8e7748a4c155f" translate="yes" xml:space="preserve">
          <source>In the example below, the cost of shipping varies by geography. When the &lt;a href=&quot;onshippingaddresschange&quot;&gt;&lt;code&gt;PaymentRequest.onshippingaddresschange&lt;/code&gt;&lt;/a&gt; is called, &lt;code&gt;updateDetails()&lt;/code&gt; is called to update the details of the &lt;code&gt;PaymentRequest&lt;/code&gt;, using &lt;code&gt;shippingAddress&lt;/code&gt; to set the correct shipping cost.</source>
          <target state="translated">以下の例では、送料は地域によって異なります。とき&lt;a href=&quot;onshippingaddresschange&quot;&gt; &lt;code&gt;PaymentRequest.onshippingaddresschange&lt;/code&gt; が&lt;/a&gt;呼ばれ、 &lt;code&gt;updateDetails()&lt;/code&gt; の詳細更新するために呼び出され &lt;code&gt;PaymentRequest&lt;/code&gt; を使用して、 &lt;code&gt;shippingAddress&lt;/code&gt; 正しい送料を設定します。</target>
        </trans-unit>
        <trans-unit id="f834c92189fcef8cd83b56bd0f3787c0ffac414c" translate="yes" xml:space="preserve">
          <source>In the example below, we create a node with mixed display and whitespace characters and the attribute is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">以下の例では、表示文字と空白文字が混在するノードを作成し、属性は &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="f50f8120d66119424065d02349efc2de9a03cfe6" translate="yes" xml:space="preserve">
          <source>In the example below, we see the implementation of a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; event.</source>
          <target state="translated">以下の例では、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/negotiationneeded&quot;&gt;negotiationneeded&lt;/a&gt;&lt;/code&gt; イベントのハンドラーの実装を示しています。</target>
        </trans-unit>
        <trans-unit id="dbc943052673e05ede088a6d5deb6f01db9d4689" translate="yes" xml:space="preserve">
          <source>In the example here, once we have retrieved the data, we insert the string as the textual content of the target. This has the effect of inserting the dragged text where it was dropped, assuming that the drop target is an area of text such as a &lt;code&gt;p&lt;/code&gt; or &lt;code&gt;div&lt;/code&gt; element.</source>
          <target state="translated">この例では、データを取得したら、ターゲットのテキストコンテンツとして文字列を挿入します。これには、ドロップターゲットが &lt;code&gt;p&lt;/code&gt; や &lt;code&gt;div&lt;/code&gt; 要素などのテキストの領域であると想定して、ドロップされた場所にドラッグされたテキストを挿入する効果があります。</target>
        </trans-unit>
        <trans-unit id="aace07f97eb3431fa0c4367c7c8f5e95ae0370e2" translate="yes" xml:space="preserve">
          <source>In the examples above we are already making use of the &lt;code&gt;font&lt;/code&gt; property to make the text a bit larger than the default size. There are some more properties which let you adjust the way the text gets displayed on the canvas:</source>
          <target state="translated">上記の例では、 &lt;code&gt;font&lt;/code&gt; プロパティを使用して、テキストをデフォルトサイズよりも少し大きくしています。テキストがキャンバスに表示される方法を調整できるいくつかのプロパティがあります。</target>
        </trans-unit>
        <trans-unit id="82a8b02b028ba58b7dfd42bdea7a01498ef4c3a6" translate="yes" xml:space="preserve">
          <source>In the examples below, we'll refer to the peer which is turning &quot;hold&quot; mode on and off as the local peer and the user being placed on hold as the remote peer.</source>
          <target state="translated">以下の例では、ホールドモードをオンオフするピアをローカルピア、ホールドされるユーザをリモートピアと呼ぶことにします。</target>
        </trans-unit>
        <trans-unit id="f0ca896ae7b838120090476440aeaef9eca87c3f" translate="yes" xml:space="preserve">
          <source>In the examples below, we'll use the &lt;a href=&quot;../../window/requestanimationframe&quot;&gt;&lt;code&gt;window.requestAnimationFrame()&lt;/code&gt;&lt;/a&gt; method to control the animation. The &lt;code&gt;requestAnimationFrame&lt;/code&gt; method provides a smoother and more efficient way for animating by calling the animation frame when the system is ready to paint the frame. The number of callbacks is usually 60 times per second and may be reduced to a lower rate when running in background tabs. For more information about the animation loop, especially for games, see the article &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games/Anatomy&quot;&gt;Anatomy of a video game&lt;/a&gt; in our &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games&quot;&gt;Game development zone&lt;/a&gt;.</source>
          <target state="translated">以下の例では、&lt;a href=&quot;../../window/requestanimationframe&quot;&gt; &lt;code&gt;window.requestAnimationFrame()&lt;/code&gt; &lt;/a&gt;メソッドを使用してアニメーションを制御します。 &lt;code&gt;requestAnimationFrame&lt;/code&gt; のの方法は、システムがフレームをペイントする準備ができたときにアニメーションフレームを呼び出すことによって、アニメーションのためのよりスムーズで効率的な方法を提供します。コールバックの数は通常1秒あたり60回であり、バックグラウンドタブで実行している場合は、レートが低くなることがあります。アニメーションループ、特にゲームの詳細については、「&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games&quot;&gt;ゲーム開発ゾーンの&lt;/a&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Games/Anatomy&quot;&gt;ビデオゲームの構造」を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5ead6a925f82797217bc4febda9e2848c9ca16de" translate="yes" xml:space="preserve">
          <source>In the final example of this chapter, we'll build a little art gallery. The gallery consists of a table containing several images. When the page is loaded, a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt; element is inserted for each image and a frame is drawn around it.</source>
          <target state="translated">この章の最後の例では、小さなアートギャラリーを作成します。ギャラリーは、いくつかの画像を含むテーブルで構成されています。ページが読み込まれると、各画像に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt; &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; &lt;/a&gt;要素が挿入され、その周りにフレームが描画されます。</target>
        </trans-unit>
        <trans-unit id="00f8f41bb21484324aa74a2ec592c179f7309a51" translate="yes" xml:space="preserve">
          <source>In the final part of the handler, we include an &lt;a href=&quot;../speechsynthesisutterance/onpause&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance.onpause&lt;/code&gt;&lt;/a&gt; handler to demonstrate how &lt;a href=&quot;../speechsynthesisevent&quot;&gt;&lt;code&gt;SpeechSynthesisEvent&lt;/code&gt;&lt;/a&gt; can be put to good use. When &lt;a href=&quot;../speechsynthesis/pause&quot;&gt;&lt;code&gt;SpeechSynthesis.pause()&lt;/code&gt;&lt;/a&gt; is invoked, this returns a message reporting the character number and name that the speech was paused at.</source>
          <target state="translated">ハンドラの最後の部分では、我々は、&lt;a href=&quot;../speechsynthesisutterance/onpause&quot;&gt; &lt;code&gt;SpeechSynthesisUtterance.onpause&lt;/code&gt; の&lt;/a&gt;方法を実証するためのハンドラ&lt;a href=&quot;../speechsynthesisevent&quot;&gt; &lt;code&gt;SpeechSynthesisEvent&lt;/code&gt; を&lt;/a&gt;うまく利用して置くことができます。とき&lt;a href=&quot;../speechsynthesis/pause&quot;&gt; &lt;code&gt;SpeechSynthesis.pause()&lt;/code&gt; が&lt;/a&gt;呼び出され、これは音声がで一時停止されたことを文字の番号と名前を報告するメッセージを返します。</target>
        </trans-unit>
        <trans-unit id="d72204efa77b6140c17c0cf9a91bf2d8f8666f30" translate="yes" xml:space="preserve">
          <source>In the first case above, a new (anonymous) handler function is created with each iteration of the loop. In the second case, the same previously declared function is used as an event handler, which results in smaller memory consumption because there is only one handler function created. Moreover, in the first case, it is not possible to call &lt;a href=&quot;removeeventlistener&quot;&gt;&lt;code&gt;removeEventListener()&lt;/code&gt;&lt;/a&gt; because no reference to the anonymous function is kept (or here, not kept to any of the multiple anonymous functions the loop might create.) In the second case, it's possible to do &lt;code&gt;myElement.removeEventListener(&quot;click&quot;, processEvent, false)&lt;/code&gt; because &lt;code&gt;processEvent&lt;/code&gt; is the function reference.</source>
          <target state="translated">上記の最初のケースでは、ループの各反復で新しい（匿名）ハンドラー関数が作成されます。 2番目のケースでは、以前に宣言された同じ関数がイベントハンドラーとして使用されます。これにより、作成されるハンドラー関数は1つだけなので、メモリ消費量が少なくなります。さらに、最初のケースでは、無名関数への参照が保持されないため（または、ここでは、ループが作成する可能性のある複数の無名関数のいずれにも保持されないため&lt;a href=&quot;removeeventlistener&quot;&gt; &lt;code&gt;removeEventListener()&lt;/code&gt; &lt;/a&gt;、removeEventListener（）を呼び出すことができません。2番目のケースでは、行うことが可能 &lt;code&gt;myElement.removeEventListener(&quot;click&quot;, processEvent, false)&lt;/code&gt; ので、 &lt;code&gt;processEvent&lt;/code&gt; を関数参照です。</target>
        </trans-unit>
        <trans-unit id="b6a06616d2d1a79d80ad40c424ea14279868eba9" translate="yes" xml:space="preserve">
          <source>In the first example, we have to wait for &lt;code&gt;myFunction()&lt;/code&gt; to run and return &lt;code&gt;value&lt;/code&gt; before any more of the code can execute. In the second example, &lt;code&gt;myFunction()&lt;/code&gt; returns a promise for &lt;code&gt;value&lt;/code&gt;, then the rest of the code can carry on running. When the promise resolves, the code inside &lt;code&gt;then&lt;/code&gt; will be run, asynchronously.</source>
          <target state="translated">最初の例では、 &lt;code&gt;myFunction()&lt;/code&gt; が実行されて &lt;code&gt;value&lt;/code&gt; 返されるのを待ってから、コードを実行できます。2番目の例では、 &lt;code&gt;myFunction()&lt;/code&gt; が &lt;code&gt;value&lt;/code&gt; の promiseを返し、残りのコードは実行を継続できます。約束の解決さは、コードが内部の場合は &lt;code&gt;then&lt;/code&gt; 、非同期で実行されます。</target>
        </trans-unit>
        <trans-unit id="237bf8a80763a604c41a957e192af6c016815343" translate="yes" xml:space="preserve">
          <source>In the first few lines of code, we draw a black rectangle the size of the canvas as a backdrop, then translate the origin to the center. Next, we create the circular clipping path by drawing an arc and calling &lt;code&gt;clip()&lt;/code&gt;. Clipping paths are also part of the canvas save state. If we wanted to keep the original clipping path we could have saved the canvas state before creating the new one.</source>
          <target state="translated">コードの最初の数行で、キャンバスのサイズの黒い長方形を背景として描画し、原点を中心に変換します。次に、弧を描いて &lt;code&gt;clip()&lt;/code&gt; を呼び出すことにより、円形のクリッピングパスを作成します。クリッピングパスもキャンバスの保存状態の一部です。元のクリッピングパスを保持したい場合は、新しい状態を作成する前にキャンバスの状態を保存できます。</target>
        </trans-unit>
        <trans-unit id="e01d4fbb899e1c9bfb390594c1d8dfcfcc14fd99" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a &lt;code&gt;handleMessage&lt;/code&gt; handler function, run when a message is sent back to this document using &lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt;&lt;code&gt;EventTarget.addEventListener&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のコードブロックでは、&lt;a href=&quot;../eventtarget/addeventlistener&quot;&gt; &lt;code&gt;EventTarget.addEventListener&lt;/code&gt; &lt;/a&gt;を使用してメッセージがこのドキュメントに送り返されたときに実行される &lt;code&gt;handleMessage&lt;/code&gt; ハンドラー関数を確認できます。</target>
        </trans-unit>
        <trans-unit id="2d23ea443c6c17d8a7b8694e2f35584131bc5044" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a &lt;code&gt;handleMessage&lt;/code&gt; handler function, run when a message is sent back to this document using &lt;code&gt;onmessage&lt;/code&gt;:</source>
          <target state="translated">次のコードブロックでは、あなたが見ることができる &lt;code&gt;handleMessage&lt;/code&gt; メッセージを使用して、この文書に送り返されるハンドラ関数、実行 &lt;code&gt;onmessage&lt;/code&gt; ：</target>
        </trans-unit>
        <trans-unit id="0ef7b50d4cd728b13b1faa603128d4d510d733a4" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;../messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor. When the IFrame has loaded, we pass &lt;a href=&quot;../messagechannel/port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; to the IFrame using &lt;a href=&quot;../window/postmessage&quot;&gt;&lt;code&gt;window.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the IFrame using &lt;code&gt;onmessage&lt;/code&gt;, putting it into a paragraph &amp;mdash; &lt;a href=&quot;../messagechannel/port1&quot;&gt;&lt;code&gt;MessageChannel.port1&lt;/code&gt;&lt;/a&gt; is listened to, to check when the message arrives.</source>
          <target state="translated">次のコードブロックでは、&lt;a href=&quot;../messagechannel&quot;&gt; &lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して作成される新しいチャネルを確認できます。 IFrameが読み込まれたら、&lt;a href=&quot;../window/postmessage&quot;&gt; &lt;code&gt;window.postMessage&lt;/code&gt; &lt;/a&gt;とメッセージを使用して&lt;a href=&quot;../messagechannel/port2&quot;&gt; &lt;code&gt;MessageChannel.port2&lt;/code&gt; &lt;/a&gt;をIFrameに渡します。次に、 &lt;code&gt;handleMessage&lt;/code&gt; ハンドラーは、onmessageを使用してIFrameから送り返されたメッセージに応答し、メッセージを &lt;code&gt;onmessage&lt;/code&gt; に入れます&amp;mdash; &lt;a href=&quot;../messagechannel/port1&quot;&gt; &lt;code&gt;MessageChannel.port1&lt;/code&gt; &lt;/a&gt;がリッスンされ、メッセージがいつ到着したかを確認します。</target>
        </trans-unit>
        <trans-unit id="e25cf09426d4c6a9936cbd7dd3d621e9ca1d71c2" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;../messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor. When the IFrame has loaded, we pass &lt;a href=&quot;../messagechannel/port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; to the IFrame using &lt;a href=&quot;postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the IFrame using &lt;code&gt;onmessage&lt;/code&gt;, putting it into a paragraph &amp;mdash; &lt;a href=&quot;../messagechannel/port1&quot;&gt;&lt;code&gt;MessageChannel.port1&lt;/code&gt;&lt;/a&gt; is listened to, to check when the message arrives.</source>
          <target state="translated">次のコードブロックでは、&lt;a href=&quot;../messagechannel&quot;&gt; &lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して作成される新しいチャネルを確認できます。 IFrameが読み込まれたら、&lt;a href=&quot;postmessage&quot;&gt; &lt;code&gt;MessagePort.postMessage&lt;/code&gt; &lt;/a&gt;とメッセージを使用して&lt;a href=&quot;../messagechannel/port2&quot;&gt; &lt;code&gt;MessageChannel.port2&lt;/code&gt; &lt;/a&gt;をIFrameに渡します。次に、 &lt;code&gt;handleMessage&lt;/code&gt; ハンドラーは、onmessageを使用してIFrameから送り返されたメッセージに応答し、メッセージを &lt;code&gt;onmessage&lt;/code&gt; に入れます&amp;mdash; &lt;a href=&quot;../messagechannel/port1&quot;&gt; &lt;code&gt;MessageChannel.port1&lt;/code&gt; &lt;/a&gt;がリッスンされ、メッセージがいつ到着したかを確認します。</target>
        </trans-unit>
        <trans-unit id="238f0592be750da1ce24eabeb82568b629e83a6c" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;../messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor. When the IFrame has loaded, we pass &lt;code&gt;port2&lt;/code&gt; to the IFrame using &lt;a href=&quot;../messageport/postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the IFrame (using &lt;a href=&quot;../messageport/onmessage&quot;&gt;&lt;code&gt;MessagePort.onmessage&lt;/code&gt;&lt;/a&gt;), putting it into a paragraph. &lt;a href=&quot;port1&quot;&gt;&lt;code&gt;MessageChannel.port1&lt;/code&gt;&lt;/a&gt; is listened to, to check when the message arrives.</source>
          <target state="translated">次のコードブロックでは、&lt;a href=&quot;../messagechannel&quot;&gt; &lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して作成される新しいチャネルを確認できます。 IFrameが読み込まれたら、&lt;a href=&quot;../messageport/postmessage&quot;&gt; &lt;code&gt;MessagePort.postMessage&lt;/code&gt; &lt;/a&gt;とメッセージを使用して、 &lt;code&gt;port2&lt;/code&gt; をIFrameに渡します。次に、 &lt;code&gt;handleMessage&lt;/code&gt; ハンドラーは、IFrameから返信されたメッセージに応答し（&lt;a href=&quot;../messageport/onmessage&quot;&gt; &lt;code&gt;MessagePort.onmessage&lt;/code&gt; &lt;/a&gt;を使用）、メッセージを段落に入れます。&lt;a href=&quot;port1&quot;&gt; &lt;code&gt;MessageChannel.port1&lt;/code&gt; &lt;/a&gt;がリッスンされ、メッセージがいつ到着したかを確認します。</target>
        </trans-unit>
        <trans-unit id="8c569cdb98e9ad9e8e436cf060158927e2b6214b" translate="yes" xml:space="preserve">
          <source>In the following code block, you can see a new channel being created using the &lt;a href=&quot;messagechannel&quot;&gt;&lt;code&gt;MessageChannel()&lt;/code&gt;&lt;/a&gt; constructor. When the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; has loaded, we pass &lt;a href=&quot;port2&quot;&gt;&lt;code&gt;MessageChannel.port2&lt;/code&gt;&lt;/a&gt; to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../messageport/postmessage&quot;&gt;&lt;code&gt;MessagePort.postMessage&lt;/code&gt;&lt;/a&gt; along with a message. The &lt;code&gt;handleMessage&lt;/code&gt; handler then responds to a message being sent back from the &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; (using &lt;a href=&quot;../messageport/onmessage&quot;&gt;&lt;code&gt;MessagePort.onmessage&lt;/code&gt;&lt;/a&gt;), putting it into a paragraph. The &lt;code&gt;handleMessage&lt;/code&gt; method is associated to the &lt;code&gt;port1&lt;/code&gt; to listen when the message arrives.</source>
          <target state="translated">次のコードブロックでは、&lt;a href=&quot;messagechannel&quot;&gt; &lt;code&gt;MessageChannel()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して作成される新しいチャネルを確認できます。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;が読み込まれたら、&lt;a href=&quot;../messageport/postmessage&quot;&gt; &lt;code&gt;MessagePort.postMessage&lt;/code&gt; &lt;/a&gt;とメッセージを使用して&lt;a href=&quot;port2&quot;&gt; &lt;code&gt;MessageChannel.port2&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; に&lt;/a&gt;渡します。次に、 &lt;code&gt;handleMessage&lt;/code&gt; ハンドラーは、（&lt;a href=&quot;../messageport/onmessage&quot;&gt; &lt;code&gt;MessagePort.onmessage&lt;/code&gt; &lt;/a&gt;を使用して） &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; から送り返されたメッセージに応答し、それを段落に入れます。 &lt;code&gt;handleMessage&lt;/code&gt; の方法はに関連付けられている &lt;code&gt;port1&lt;/code&gt; メッセージが到着したときに聴くこと。</target>
        </trans-unit>
        <trans-unit id="039a0c183e5267a50a7d7965f3b3a21f6386cb9c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを開くリクエストを作成し、成功とエラーのケースのハンドラーを含めています。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="203564004d63ef9803dfc5ed03299bf1c96dc000" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを開くように要求し、成功およびエラーの場合のハンドラーを含めています。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="c8cbca89f7feedc8066d85994128a264e3657052" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; interface. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを開くリクエストを作成し、成功とエラーのケースのハンドラーを含めています。これらのイベントは、カスタム &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; インターフェイスを介して発生します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a160d6777c219baa8546ec200f449a4e02c14895" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. These events are fired via the custom &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; interface. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを開くように要求し、成功およびエラーの場合のハンドラーを含めています。これらのイベントは、カスタム &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; インターフェイスを介して発生します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="420b628a66fb512c01a6129bb5bc84419417fe9e" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. Upon a version change (after an &lt;code&gt;upgradedneeded&lt;/code&gt; event), the &lt;code&gt;success&lt;/code&gt; event will implement the &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; interface. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを開くリクエストを作成し、成功とエラーのケースのハンドラーを含めています。（後のバージョン変更の際に &lt;code&gt;upgradedneeded&lt;/code&gt; イベント）、 &lt;code&gt;success&lt;/code&gt; イベントが実装されます &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; のインターフェイスを。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="d8e2942e5c163a847dd284e6198181ef8ebdcc5b" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we make a request to open a database, and include handlers for the success and error cases. Upon a version change (after an &lt;code&gt;upgradedneeded&lt;/code&gt; event), the &lt;code&gt;success&lt;/code&gt; event will implement the &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; interface. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを開くように要求し、成功およびエラーの場合のハンドラーを含めています。（後のバージョン変更の際に &lt;code&gt;upgradedneeded&lt;/code&gt; イベント）、 &lt;code&gt;success&lt;/code&gt; イベントが実装されます &lt;code&gt;IDBVersionChangeEvent&lt;/code&gt; のインターフェイスを。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="62bc6fcc2be4b4f1f6f5c4e9f84a194400ac424f" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a database asynchronously (&lt;a href=&quot;idbfactory&quot;&gt;&lt;code&gt;IDBFactory&lt;/code&gt;&lt;/a&gt;), handle success and error cases, and create a new object store in the case that an upgrade is needed (&lt;a href=&quot;idbdatabase&quot;&gt;&lt;code&gt;IDBdatabase&lt;/code&gt;&lt;/a&gt;). For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを非同期で開き（&lt;a href=&quot;idbfactory&quot;&gt; &lt;code&gt;IDBFactory&lt;/code&gt; &lt;/a&gt;）、成功とエラーのケースを処理し、アップグレードが必要な場合に新しいオブジェクトストアを作成します（&lt;a href=&quot;idbdatabase&quot;&gt; &lt;code&gt;IDBdatabase&lt;/code&gt; &lt;/a&gt;）。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="0ec1f5ac3d97e3fe9dce538aea60fd75cf2e7b74" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a database asynchronously (&lt;a href=&quot;idbfactory&quot;&gt;&lt;code&gt;IDBFactory&lt;/code&gt;&lt;/a&gt;), handle success and error cases, and create a new object store in the case that an upgrade is needed (&lt;a href=&quot;idbdatabase&quot;&gt;&lt;code&gt;IDBdatabase&lt;/code&gt;&lt;/a&gt;). For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを非同期で開き（&lt;a href=&quot;idbfactory&quot;&gt; &lt;code&gt;IDBFactory&lt;/code&gt; &lt;/a&gt;）、成功とエラーのケースを処理し、アップグレードが必要な場合に備えて新しいオブジェクトストアを作成します（&lt;a href=&quot;idbdatabase&quot;&gt; &lt;code&gt;IDBdatabase&lt;/code&gt; &lt;/a&gt;）。完全な実例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="5201c411fb9613fec411faeac1fccc27317c475e" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a database asynchronously and make a request; &lt;code&gt;onerror&lt;/code&gt; and &lt;code&gt;onsuccess&lt;/code&gt; functions are included to handle the success and error cases. For a full working example, see our &lt;a href=&quot;https://github.com/chrisdavidmills/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://chrisdavidmills.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを非同期で開いてリクエストを作成しています。 &lt;code&gt;onerror&lt;/code&gt; および &lt;code&gt;onsuccess&lt;/code&gt; 関数は、成功およびエラーのケースを処理するために含まれています。完全に機能する例については、&lt;a href=&quot;https://github.com/chrisdavidmills/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://chrisdavidmills.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="03954c9da8614f1b491551a23db847f36720de4d" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a database asynchronously and make a request; &lt;code&gt;onerror&lt;/code&gt; and &lt;code&gt;onsuccess&lt;/code&gt; functions are included to handle the success and error cases. For a full working example, see our &lt;a href=&quot;https://github.com/chrisdavidmills/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://chrisdavidmills.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースを非同期で開き、リクエストを行います。 &lt;code&gt;onerror&lt;/code&gt; 関数と &lt;code&gt;onsuccess&lt;/code&gt; 関数は、成功とエラーのケースを処理するために含まれています。完全に機能する例については、&lt;a href=&quot;https://github.com/chrisdavidmills/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://chrisdavidmills.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="6036a2ba927c9abc293afb9b69926b7f16b41102" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.autoIncrement to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してデータをオブジェクトストアに追加します。オブジェクトストアが作成されたら、objectStore.autoIncrementをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="281424c8b1c755a8d0bde6faaeb4b5d3cd5c9962" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.autoIncrement to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してオブジェクトストアにデータを追加します。オブジェクトストアが作成された後、objectStore.autoIncrementをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="dccc72e4a6a99203b539f07581c3ddeb17ef1de9" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.indexNames to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してデータをオブジェクトストアに追加します。オブジェクトストアが作成されたら、objectStore.indexNamesをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a595fbcb52a522d2d22487b4af1a945e6d7c11fc" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.indexNames to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してオブジェクトストアにデータを追加します。オブジェクトストアが作成された後、objectStore.indexNamesをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="e91d5f62da27efa68634f15d76c6ace1df3b040d" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.keyPath to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してデータをオブジェクトストアに追加します。オブジェクトストアが作成されたら、objectStore.keyPathをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="25fd3c2809064c1e57b2ac1524d273c5bd0f0652" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.keyPath to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してオブジェクトストアにデータを追加します。オブジェクトストアが作成されたら、objectStore.keyPathをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="8880b8fdee4d42f903cebcfe0d82afd6cc260c9b" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.name to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してデータをオブジェクトストアに追加します。オブジェクトストアが作成されたら、objectStore.nameをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="95cdd9ddc979671b7f567bc0d120e89ff426c671" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.name to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してオブジェクトストアにデータを追加します。オブジェクトストアが作成された後、objectStore.nameをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="947b2b78865f74f8222655dfed99286833cbbf25" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.transaction to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してデータをオブジェクトストアに追加します。オブジェクトストアが作成されたら、objectStore.transactionをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="f54fd2b3376937fe47617247ba5ce07dd4d96867" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. After the object store has been created, we log objectStore.transaction to the console. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してオブジェクトストアにデータを追加します。オブジェクトストアが作成された後、objectStore.transactionをコンソールに記録します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="aa9becddc2bb7ec90c0a3e3c9ece22246fe9674c" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してデータをオブジェクトストアに追加します。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="6bee2c87eee1fe8b979e90beef582d28b95172d1" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store using &lt;code&gt;add()&lt;/code&gt;. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;add()&lt;/code&gt; を使用してオブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="ad57a299009527ac8f2dd1dbd0ecdab42e093614" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we return the associated database connection using &lt;code&gt;db&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加しています。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。最後に、関連するデータベース接続を &lt;code&gt;db&lt;/code&gt; を使用して返します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="44506a0ef3c2a5572e98cf946cfb5e2d458ea8c0" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we return the associated database connection using &lt;code&gt;db&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。最後に、 &lt;code&gt;db&lt;/code&gt; を使用して関連するデータベース接続を返します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="75eb1d616f6d05a9fa0821f8947490f9ee9f24f8" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we simply abort any activity done under the current transaction using &lt;code&gt;abort()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加しています。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。最後に、 &lt;code&gt;abort()&lt;/code&gt; を使用して、現在のトランザクションで行われたアクティビティを単に中止します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="2ae7d43b9600e9ca587855b883a9f1113c7a69e6" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we simply abort any activity done under the current transaction using &lt;code&gt;abort()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。最後に、 &lt;code&gt;abort()&lt;/code&gt; を使用して、現在のトランザクションで実行されたすべてのアクティビティを中止します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="13f59a285e31ec4566d2471042003d4ea3a258b3" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we simply log the mode of the current transaction using &lt;code&gt;mode&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加しています。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。最後に、modeを使用して現在のトランザクションのモードをログに記録するだけ &lt;code&gt;mode&lt;/code&gt; 。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="7d59c16e6af35dbf2bdabc341d7a3007df0f5931" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. At the end, we simply log the mode of the current transaction using &lt;code&gt;mode&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。最後に、modeを使用して現在のトランザクションのモードをログに記録するだけ &lt;code&gt;mode&lt;/code&gt; 。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="1f4e437b34ba4b47c7d721167ae38f8bc64c3026" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加しています。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="c06cc3ddfb51ea2161fc890f8456b2e2807365cf" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="e0396bfc53f463837f3f50ead91b4ccd0303058f" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.onabort = function(event) { };&lt;/code&gt; block, reporting when the transaction has been aborted. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。 &lt;code&gt;transaction.onabort = function(event) { };&lt;/code&gt; 注意してください。ブロックし、トランザクションが中止されたときに報告します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a232551d760684539f1f15565c238686d66bdcfd" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.onabort = function(event) { };&lt;/code&gt; block, reporting when the transaction has been aborted. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。 &lt;code&gt;transaction.onabort = function(event) { };&lt;/code&gt; 注意してください。ブロック、トランザクションが中止されたときに報告します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="9291a990b541f5f63cec02e040f4b041c8298814" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.oncomplete = function(event) { };&lt;/code&gt; block, which reports back when the transaction was successful. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。 &lt;code&gt;transaction.oncomplete = function(event) { };&lt;/code&gt; 注意してください。ブロック、トランザクションが成功したときに報告します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="08da8ea76c03a3a0264cdaeec3acd2b8609154c3" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.oncomplete = function(event) { };&lt;/code&gt; block, which reports back when the transaction was successful. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。 &lt;code&gt;transaction.oncomplete = function(event) { };&lt;/code&gt; 注意してください。ブロック。トランザクションが成功したときに報告します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="5d979572fd1f87f060179ec0c46d8d5416b88385" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.onerror = function(event) { };&lt;/code&gt; block, making use of &lt;code&gt;transaction.error&lt;/code&gt; to help in reporting what went wrong when the transaction was unsuccessful. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。トランザクションイベントハンドラーに接続されている関数にも注意してください。これは、成功または失敗した場合にトランザクションが開いた結果を報告するためのものです。 &lt;code&gt;transaction.onerror = function(event) { };&lt;/code&gt; 注意してください。ブロックします &lt;code&gt;transaction.error&lt;/code&gt; を使用して、トランザクションが失敗したときに何が問題だったかを報告します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="04631617e5a776628d32d3bd3e976e2158c9d27a" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and add some data to an object store. Note also the functions attached to transaction event handlers to report on the outcome of the transaction opening in the event of success or failure. Note the &lt;code&gt;transaction.onerror = function(event) { };&lt;/code&gt; block, making use of &lt;code&gt;transaction.error&lt;/code&gt; to help in reporting what went wrong when the transaction was unsuccessful. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、オブジェクトストアにデータを追加します。成功または失敗した場合にトランザクション開始の結果をレポートするために、トランザクションイベントハンドラーにアタッチされた関数にも注意してください。 &lt;code&gt;transaction.onerror = function(event) { };&lt;/code&gt; 注意してください。ブロックし、 &lt;code&gt;transaction.error&lt;/code&gt; を利用して、トランザクションが失敗したときに何がうまくいかなかったかを報告します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="1cadd885e1bfec1eafbd9f9798e746af01ce2da6" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and clear all the current data out of the object store using &lt;code&gt;clear()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;clear()&lt;/code&gt; を使用して現在のデータをすべてオブジェクトストアから消去します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="75ba7e18aeca1985310d78fd3d5962eba8ff5eaf" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and clear all the current data out of the object store using &lt;code&gt;clear()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;clear()&lt;/code&gt; を使用してオブジェクトストアから現在のすべてのデータをクリアします。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="a59db44b4f9b5e947b3716a6d848b8d1f98f87d3" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and delete one specific record out of our object store using &lt;code&gt;delete()&lt;/code&gt; &amp;mdash; a sample record with the key &quot;Walk dog&quot;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;delete()&lt;/code&gt; を使用してオブジェクトストアから特定のレコードを1つ削除します。サンプルレコードは「Walk dog」キーです。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="c9040f617b74d8289eab3961d9dbcdcafbe568a8" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and delete one specific record out of our object store using &lt;code&gt;delete()&lt;/code&gt; &amp;mdash; a sample record with the key &quot;Walk dog&quot;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;delete()&lt;/code&gt; を使用してオブジェクトストアから特定のレコードを1つ削除します。これは、キー「Walkdog」のサンプルレコードです。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="13f30641085b558285bc8c95bc595644bdab0929" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and get one specific record from object store using &lt;code&gt;get()&lt;/code&gt; &amp;mdash; a sample record with the key &quot;Walk dog&quot;. Once this data object is retrieved, you could then update it using normal JavaScript, then put it back into the database using a &lt;a href=&quot;put&quot;&gt;&lt;code&gt;IDBObjectStore.put&lt;/code&gt;&lt;/a&gt; operation. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;get()&lt;/code&gt; を使用してオブジェクトストアから特定のレコードを1つ取得します。サンプルレコードは「Walk dog」キーです。このデータオブジェクトを取得したら、通常のJavaScriptを使用して更新し、&lt;a href=&quot;put&quot;&gt; &lt;code&gt;IDBObjectStore.put&lt;/code&gt; &lt;/a&gt;操作を使用してデータベースに戻すことができます。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="e8adc92dccfa3729c212ca7707b4e2ccf25fbdfc" translate="yes" xml:space="preserve">
          <source>In the following code snippet, we open a read/write transaction on our database and get one specific record from object store using &lt;code&gt;get()&lt;/code&gt; &amp;mdash; a sample record with the key &quot;Walk dog&quot;. Once this data object is retrieved, you could then update it using normal JavaScript, then put it back into the database using a &lt;a href=&quot;put&quot;&gt;&lt;code&gt;IDBObjectStore.put&lt;/code&gt;&lt;/a&gt; operation. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次のコードスニペットでは、データベースで読み取り/書き込みトランザクションを開き、 &lt;code&gt;get()&lt;/code&gt; を使用してオブジェクトストアから特定のレコードを1つ取得します。これは、キー「Walkdog」を持つサンプルレコードです。このデータオブジェクトが取得されたら、通常のJavaScriptを使用して更新し、&lt;a href=&quot;put&quot;&gt; &lt;code&gt;IDBObjectStore.put&lt;/code&gt; &lt;/a&gt;操作を使用してデータベースに戻すことができます。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="322feb9948540265079df18f99d48a9e2d37112d" translate="yes" xml:space="preserve">
          <source>In the following example (see &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/png-transform-stream/&quot;&gt;Unpack chunks of a PNG&lt;/a&gt; for the full code running live, and &lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams/png-transform-stream&quot;&gt;png-transform-stream&lt;/a&gt; for the source code), an image is fetched and its body retrieved as a &lt;a href=&quot;../readablestream&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt;. Next, we log the contents of the readable stream, use &lt;code&gt;pipeThrough()&lt;/code&gt; to send it to a new function that creates a gray-scaled version of the stream, then log the new stream's contents too.</source>
          <target state="translated">次の例（ライブで実行される完全なコードについては&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/png-transform-stream/&quot;&gt;PNGのチャンクを&lt;/a&gt;&lt;a href=&quot;https://github.com/mdn/dom-examples/tree/master/streams/png-transform-stream&quot;&gt;アンパック&lt;/a&gt;し、ソースコードについてはpng-transform-streamを参照）では、画像がフェッチされ、その本体が&lt;a href=&quot;../readablestream&quot;&gt; &lt;code&gt;ReadableStream&lt;/code&gt; &lt;/a&gt;として取得されます。次に、読み取り可能なストリームのコンテンツをログに記録し、 &lt;code&gt;pipeThrough()&lt;/code&gt; を使用して、ストリームのグレースケールバージョンを作成する新しい関数に送信し、新しいストリームのコンテンツもログに記録します。</target>
        </trans-unit>
        <trans-unit id="287bf3de9023d80525000b897ab3a6b79e79ad05" translate="yes" xml:space="preserve">
          <source>In the following example we are using a biquad filter on a media stream (for the full demo, see our &lt;a href=&quot;http://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-buffer demo&lt;/a&gt; live, or &lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;read the source&lt;/a&gt;.) As part of this demo, we get the frequency responses for this biquad filter, for five sample frequencies. We first create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt;s we need, one containing the input frequencies, and two to receive the output magnitude and phase values:</source>
          <target state="translated">次の例では、メディアストリームでバイカッドフィルターを使用しています（完全なデモについては、&lt;a href=&quot;http://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-bufferデモを&lt;/a&gt;ライブで参照するか&lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;、ソースを読み取り&lt;/a&gt;ます）。このデモの一部として、このバイカッドの周波数応答を取得します。フィルター、5つのサンプル周波数用。最初に、必要な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;を作成します。1つは入力周波数を含み、2つは出力の振幅と位相の値を受け取るためのものです。</target>
        </trans-unit>
        <trans-unit id="5de17f0708bbab83f9692976f400984d415116e1" translate="yes" xml:space="preserve">
          <source>In the following example we are using a biquad filter on a media stream (for the full demo, see our &lt;a href=&quot;https://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-buffer demo&lt;/a&gt; live, or &lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;read the source&lt;/a&gt;.) As part of this demo, we get the frequency responses for this biquad filter, for five sample frequencies. We first create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt;s we need, one containing the input frequencies, and two to receive the output magnitude and phase values:</source>
          <target state="translated">次の例では、メディアストリームでバイクアッドフィルターを使用しています（完全なデモについては、&lt;a href=&quot;https://mdn.github.io/stream-source-buffer/&quot;&gt;ストリーム-ソース-バッファーのデモを&lt;/a&gt;ライブで参照するか&lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;、ソースを読んでください&lt;/a&gt;）。このデモの一部として、このバイクアッドの周波数応答を取得します。フィルタ、5つのサンプル周波数用。まず、必要な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;を作成します。1つは入力周波数を含み、2つは出力の振幅と位相の値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="13dcb52783e92bbdc8c8fdc2ccc00529dab0bb8c" translate="yes" xml:space="preserve">
          <source>In the following example we are using an IIR filter on a media stream (for a complete full demo, see our &lt;a href=&quot;http://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-buffer demo&lt;/a&gt; live, or &lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;read its source&lt;/a&gt;.) As part of this demo, we get the frequency responses for this IIR filter, for five sample frequencies. We first create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; objects we need, one containing the input frequencies, and two to receive the output magnitude and phase values:</source>
          <target state="translated">次の例では、メディアストリームでIIRフィルターを使用しています（完全な完全なデモについては、&lt;a href=&quot;http://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-bufferデモを&lt;/a&gt;ライブで参照するか&lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;、そのソースを読み取り&lt;/a&gt;ます）。このデモの一部として、この周波数応答を取得します。 IIRフィルター、5つのサンプル周波数用。最初に、必要な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;オブジェクトを作成します。1つは入力周波数を含み、2つは出力の振幅と位相の値を受け取るためのものです。</target>
        </trans-unit>
        <trans-unit id="b3210bd8325ed0b9949e39b46982826e9b9d1fe4" translate="yes" xml:space="preserve">
          <source>In the following example we are using an IIR filter on a media stream (for a complete full demo, see our &lt;a href=&quot;https://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-buffer demo&lt;/a&gt; live, or &lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;read its source&lt;/a&gt;.) As part of this demo, we get the frequency responses for this IIR filter, for five sample frequencies. We first create the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt;&lt;code&gt;Float32Array&lt;/code&gt;&lt;/a&gt; objects we need, one containing the input frequencies, and two to receive the output magnitude and phase values:</source>
          <target state="translated">次の例では、メディアストリームでIIRフィルターを使用しています（完全な完全なデモについては、&lt;a href=&quot;https://mdn.github.io/stream-source-buffer/&quot;&gt;stream-source-bufferデモを&lt;/a&gt;ライブで参照するか&lt;a href=&quot;https://github.com/mdn/stream-source-buffer/blob/gh-pages/index.html&quot;&gt;、そのソースを読み取って&lt;/a&gt;ください）。このデモの一部として、この周波数応答を取得します。 IIRフィルター、5つのサンプル周波数用。まず、必要な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array&quot;&gt; &lt;code&gt;Float32Array&lt;/code&gt; &lt;/a&gt;オブジェクトを作成します。1つは入力周波数を含み、2つは出力の大きさと位相の値を受け取ります。</target>
        </trans-unit>
        <trans-unit id="8816669e8174eda20010d216bd1c027736021aeb" translate="yes" xml:space="preserve">
          <source>In the following example we create a two second buffer, fill it with white noise, and then play it via an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. The comments should clearly explain what is going on. You can also &lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-buffer/&quot;&gt;run the code live&lt;/a&gt;, or &lt;a href=&quot;https://github.com/mdn/webaudio-examples&quot;&gt;view the source&lt;/a&gt;.</source>
          <target state="translated">次の例では、2秒のバッファを作成し、ホワイトノイズを入れてから、&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; を&lt;/a&gt;介して再生します。コメントは、何が起こっているのかを明確に説明する必要があります。&lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-buffer/&quot;&gt;コードをライブ&lt;/a&gt;で実行したり&lt;a href=&quot;https://github.com/mdn/webaudio-examples&quot;&gt;、ソースを表示し&lt;/a&gt;たりすることもできます。</target>
        </trans-unit>
        <trans-unit id="f4bb5bc0782a7e14fcddc65635b72a17225427f8" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;../idbindex/opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、&lt;a href=&quot;../idbindex/opencursor&quot;&gt; &lt;code&gt;IDBIndex.openCursor&lt;/code&gt; &lt;/a&gt;を使用してインデックスで基本的なカーソルを開きます&amp;mdash;これは、&lt;a href=&quot;opencursor&quot;&gt; &lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;ObjectStore&lt;/code&gt; でカーソルを直接開くのと同じように機能しますが、返されるレコードは、主キーではなくインデックスに基づいて並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="ad642637028d27153d859e39e2a13769514d21e8" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;idbindex/opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、&lt;a href=&quot;idbindex/opencursor&quot;&gt; &lt;code&gt;IDBIndex.openCursor&lt;/code&gt; &lt;/a&gt;を使用してインデックスで基本的なカーソルを開きます&amp;mdash;これは、&lt;a href=&quot;idbobjectstore/opencursor&quot;&gt; &lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;ObjectStore&lt;/code&gt; でカーソルを直接開くのと同じように機能しますが、返されるレコードは、主キーではなくインデックスに基づいて並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="0d39035e98ce578c166dc6ba88a351fd3b654900" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor()&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBObjectStore&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;openCursor()&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、&lt;a href=&quot;opencursor&quot;&gt; &lt;code&gt;IDBIndex.openCursor()&lt;/code&gt; &lt;/a&gt;を使用してインデックスで基本的なカーソルを開きます。これは、&lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt; &lt;code&gt;openCursor()&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;../idbobjectstore&quot;&gt; &lt;code&gt;IDBObjectStore&lt;/code&gt; で&lt;/a&gt;カーソルを直接開くのと同じように機能しますが、返されるレコードは、主キーではなくインデックスに基づいて並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="8694728b278a221349f924251115114166382831" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、&lt;a href=&quot;opencursor&quot;&gt; &lt;code&gt;IDBIndex.openCursor&lt;/code&gt; &lt;/a&gt;を使用してインデックスで基本的なカーソルを開きます&amp;mdash;これは、&lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt; &lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;ObjectStore&lt;/code&gt; でカーソルを直接開くのと同じように機能しますが、返されるレコードは、主キーではなくインデックスに基づいて並べ替えられます。</target>
        </trans-unit>
        <trans-unit id="21af5877ddb1b88586e3b5af4da9dc9daac0d4b3" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;a href=&quot;opencursor&quot;&gt;&lt;code&gt;IDBIndex.openCursor&lt;/code&gt;&lt;/a&gt;. This works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、&lt;a href=&quot;opencursor&quot;&gt; &lt;code&gt;IDBIndex.openCursor&lt;/code&gt; &lt;/a&gt;を使用して、インデックス上に基本的なカーソルを開きます。これは、&lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt; &lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;ObjectStore&lt;/code&gt; でカーソルを直接開くのと同じように機能しますが、返されるレコードは、主キーではなくインデックスに基づいてソートされる点が異なります。</target>
        </trans-unit>
        <trans-unit id="2153f7d8004598ac2fbd4d16d4205d6e81657077" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a basic cursor on the index using &lt;code&gt;openCursor()&lt;/code&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、 &lt;code&gt;openCursor()&lt;/code&gt; を使用してインデックスで基本的なカーソルを開きます。これは、&lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt; &lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;ObjectStore&lt;/code&gt; でカーソルを直接開くのと同じように機能しますが、返されるレコードは主キーではなくインデックスに基づいてソートされます。</target>
        </trans-unit>
        <trans-unit id="db1fd518abc2e6f0d259edf6cbb8abcb90bf3a2a" translate="yes" xml:space="preserve">
          <source>In the following example we open a transaction and an object store, then get the index &lt;code&gt;lName&lt;/code&gt; from a simple contacts database. We then open a key cursor on the index using &lt;code&gt;openKeyCursor()&lt;/code&gt; &amp;mdash; this works the same as opening a cursor directly on an &lt;code&gt;ObjectStore&lt;/code&gt; using &lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt;&lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt;&lt;/a&gt; except that the returned records are sorted based on the index, not the primary key.</source>
          <target state="translated">次の例では、トランザクションとオブジェクトストアを開き、単純な連絡先データベースからインデックス &lt;code&gt;lName&lt;/code&gt; を取得します。次に、 &lt;code&gt;openKeyCursor()&lt;/code&gt; を使用してインデックスのキーカーソルを開きます。これは、&lt;a href=&quot;../idbobjectstore/opencursor&quot;&gt; &lt;code&gt;IDBObjectStore.openCursor&lt;/code&gt; &lt;/a&gt;を使用して &lt;code&gt;ObjectStore&lt;/code&gt; でカーソルを直接開くのと同じように機能しますが、返されるレコードは主キーではなくインデックスに基づいてソートされる点が異なります。</target>
        </trans-unit>
        <trans-unit id="661e7c3cacb1693d266978ce785db96652a78191" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;, then write the length of the list to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得し、リストの長さを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="0fb8e79747df298ec02744826ec466d0cb841caf" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;, then write the value of the list to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得し、リストの値を &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e3fb2b98c2295ca8eb5c3796813d65b887f85f69" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We then add a new token to the list, and write the list into the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。次に、新しいトークンをリストに追加し、リストを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="6314fe34a4c0773a5ad364e04bb1727ec3a892d1" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We then remove a token from the list, and write the list into the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。次に、リストからトークンを削除し、リストを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="2b8d3549bdaccd85694618343c44840dc8b75dde" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We then replace a token in the list, and write the list into the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。次に、リスト内のトークンを置き換え、リストを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="a9cfdfabede97a3597014b8c77e99331d6f81f65" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We then retrieve the last item in the list using &lt;em&gt;item(length-1)&lt;/em&gt;, and write it into the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。次に、&lt;em&gt;item（length-1）&lt;/em&gt;を使用してリストの最後の項目を取得し、 &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="cbd4456897d73632161c4026bbd09eda383125bd" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We then test for the existance of &quot;c&quot; in the list, and write the result into the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。次に、リスト内の「c」の存在をテストし、結果を &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="4723cbb96ee6003379a085ede8636c82f49f1599" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We when retrieve an iterator containing the key/value pairs using &lt;code&gt;entries()&lt;/code&gt;, then iterate through each one using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt; loop, writing them to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。 &lt;code&gt;entries()&lt;/code&gt; を使用してキーと値のペアを含むイテレータを取得し、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt;ループを使用してそれぞれを反復処理し、それらを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8a83f029918f125f9b06f315db005ff4c274e3b7" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We when retrieve an iterator containing the keys using &lt;code&gt;values()&lt;/code&gt;, then iterate through those keys using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt; loop, writing each one to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。 &lt;code&gt;values()&lt;/code&gt; を使用してキーを含むイテレータを取得し、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt;ループを使用してこれらのキーを反復処理し、それぞれを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="5c84caeb0524ec397b2ed807abab877a001f12a6" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We when retrieve an iterator containing the values using &lt;code&gt;forEach()&lt;/code&gt;, writing each one to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt; inside the &lt;code&gt;forEach()&lt;/code&gt; inner function.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。 &lt;code&gt;forEach()&lt;/code&gt; を使用して値を含むイテレータを取得し、それぞれを &lt;code&gt;forEach()&lt;/code&gt; 内部関数内の &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="e4898e0c51bf694e8df16b5cae1e6a80feab8323" translate="yes" xml:space="preserve">
          <source>In the following example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;../element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;. We when retrieve an iterator containing the values using &lt;code&gt;values()&lt;/code&gt;, then iterate through those values using a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt; loop, writing each one to the &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;'s &lt;a href=&quot;../node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;DOMTokenList&lt;/code&gt; を使用して、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に設定されたクラスのリストを&lt;a href=&quot;../element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;として取得します。 &lt;code&gt;values()&lt;/code&gt; を使用して値を含むイテレータを取得し、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of&quot;&gt;for ... of&lt;/a&gt;ループを使用してこれらの値を反復処理し、それぞれを &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; の&lt;a href=&quot;../node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; に書き込み&lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="d69e2d116fd184274ad84c6854087c8aa5445e9e" translate="yes" xml:space="preserve">
          <source>In the following example you can see the &lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt;&lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt;&lt;/a&gt; handler being used to update the database structure if a database with a higher version number is loaded. &lt;a href=&quot;createindex&quot;&gt;&lt;code&gt;IDBObjectStore.createIndex&lt;/code&gt;&lt;/a&gt; is used to create new indexes on the object store, after which we delete the unneeded old indexes with &lt;code&gt;deleteIndex()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次の例では、&lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt; &lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt; &lt;/a&gt;ハンドラーを使用して、より高いバージョン番号のデータベースがロードされている場合にデータベース構造を更新しています。&lt;a href=&quot;createindex&quot;&gt; &lt;code&gt;IDBObjectStore.createIndex&lt;/code&gt; &lt;/a&gt;は、オブジェクトストアに新しいインデックスを作成するために使用されます。その後、 &lt;code&gt;deleteIndex()&lt;/code&gt; を使用して不要な古いインデックスを削除します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="a9858a9a945fe9b82efc2849e4db1b2796bdaa39" translate="yes" xml:space="preserve">
          <source>In the following example you can see the &lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt;&lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt;&lt;/a&gt; handler being used to update the database structure if a database with a higher version number is loaded. &lt;a href=&quot;createindex&quot;&gt;&lt;code&gt;IDBObjectStore.createIndex&lt;/code&gt;&lt;/a&gt; is used to create new indexes on the object store, after which we delete the unneeded old indexes with &lt;code&gt;deleteIndex()&lt;/code&gt;. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次の例では、バージョン番号の大きいデータベースがロードされた場合に、データベース構造を更新するために&lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt; &lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt; &lt;/a&gt;ハンドラーが使用されていることがわかります。&lt;a href=&quot;createindex&quot;&gt; &lt;code&gt;IDBObjectStore.createIndex&lt;/code&gt; &lt;/a&gt;は、オブジェクトストアに新しいインデックスを作成するために使用されます。その後、 &lt;code&gt;deleteIndex()&lt;/code&gt; を使用して不要な古いインデックスを削除します。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="4675addd7f45c9cd325e8724ce11ee6ba2cc68bb" translate="yes" xml:space="preserve">
          <source>In the following example you can see the &lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt;&lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt;&lt;/a&gt; handler being used to update the database structure if a database with a higher version number is loaded. &lt;code&gt;createIndex()&lt;/code&gt; is used to create new indexes on the object store. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次の例では、&lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt; &lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt; &lt;/a&gt;ハンドラーを使用して、より高いバージョン番号のデータベースがロードされている場合にデータベース構造を更新しています。 &lt;code&gt;createIndex()&lt;/code&gt; は、オブジェクトストアに新しいインデックスを作成するために使用されます。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="076ddd7a50eeca831e9f451ffefd40c7903995b8" translate="yes" xml:space="preserve">
          <source>In the following example you can see the &lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt;&lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt;&lt;/a&gt; handler being used to update the database structure if a database with a higher version number is loaded. &lt;code&gt;createIndex()&lt;/code&gt; is used to create new indexes on the object store. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次の例では、バージョン番号の大きいデータベースがロードされた場合に、データベース構造を更新するために&lt;a href=&quot;../idbopendbrequest/onupgradeneeded&quot;&gt; &lt;code&gt;IDBOpenDBRequest.onupgradeneeded&lt;/code&gt; &lt;/a&gt;ハンドラーが使用されていることがわかります。 &lt;code&gt;createIndex()&lt;/code&gt; は、オブジェクトストアに新しいインデックスを作成するために使用されます。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="d23b9b90041a93e60212c2af6b49484b331f08c5" translate="yes" xml:space="preserve">
          <source>In the following example you can see the onupgradeneeded handler being used to update the database structure if a database with a higher version number is loaded. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次の例では、より高いバージョン番号のデータベースがロードされている場合、onupgradeneededハンドラーがデータベース構造の更新に使用されているのがわかります。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="77b73082ee005f6dcb639dab8973451c5a03c64b" translate="yes" xml:space="preserve">
          <source>In the following example you can see the onupgradeneeded handler being used to update the database structure if a database with a higher version number is loaded. For a full working example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">次の例では、バージョン番号の大きいデータベースがロードされた場合に、onupgradeneededハンドラーを使用してデータベース構造を更新していることがわかります。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/tree/gh-pages&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="51fd9196a1ac8412898f0b0bc25d6a4e218acd7c" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body&quot;&gt;&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/a&gt; specifies a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload&quot;&gt;beforeunload&lt;/a&gt;&lt;/code&gt; events and the handler calls &lt;code&gt;sendBeacon()&lt;/code&gt; with the value of &lt;a href=&quot;../window/location&quot;&gt;&lt;code&gt;window.location&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/body&quot;&gt; &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; &lt;/a&gt;のハンドラを指定する &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/beforeunload&quot;&gt;beforeunload&lt;/a&gt;&lt;/code&gt; イベントハンドラを呼び出し &lt;code&gt;sendBeacon()&lt;/code&gt; の値で&lt;a href=&quot;../window/location&quot;&gt; &lt;code&gt;window.location&lt;/code&gt; の&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="0c8b1dd516e3678411afd33e740d3bc2bdeab48c" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;getElementsByTagName()&lt;/code&gt; starts from a particular parent element and searches top-down recursively through the DOM from that parent element, building a collection of all descendant elements which match the tag &lt;code&gt;name&lt;/code&gt; parameter. This demonstrates both &lt;code&gt;document.getElementsByTagName()&lt;/code&gt; and the functionally identical &lt;a href=&quot;../element/getelementsbytagname&quot;&gt;&lt;code&gt;Element.getElementsByTagName()&lt;/code&gt;&lt;/a&gt;, which starts the search at a specific element within the DOM tree.</source>
          <target state="translated">次の例では、 &lt;code&gt;getElementsByTagName()&lt;/code&gt; は特定の親要素から始まり、その親要素からDOMを介して再帰的にトップダウン検索し、タグ &lt;code&gt;name&lt;/code&gt; パラメーターに一致するすべての子孫要素のコレクションを構築します。これは、 &lt;code&gt;document.getElementsByTagName()&lt;/code&gt; と、DOMツリー内の特定の要素から検索を開始する機能的に同一の&lt;a href=&quot;../element/getelementsbytagname&quot;&gt; &lt;code&gt;Element.getElementsByTagName()&lt;/code&gt; の&lt;/a&gt;両方を示しています。</target>
        </trans-unit>
        <trans-unit id="c239cd0ef33c89351889a414b03386a638b7915e" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;setAttribute()&lt;/code&gt; is used to set attributes on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt;&lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;setAttribute()&lt;/code&gt; を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button&quot;&gt; &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt; に&lt;/a&gt;属性を設定しています。</target>
        </trans-unit>
        <trans-unit id="15a0f0de05f2bdbd6afba0e27ceea9a538c6f64f" translate="yes" xml:space="preserve">
          <source>In the following example, &lt;code&gt;toggleAttribute()&lt;/code&gt; is used to toggle the &lt;code&gt;readonly&lt;/code&gt; attribute of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次の例では、 &lt;code&gt;toggleAttribute()&lt;/code&gt; を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; の&lt;/a&gt; &lt;code&gt;readonly&lt;/code&gt; 属性を切り替えます。</target>
        </trans-unit>
        <trans-unit id="2136ebdeb382da448c738322af6206e3691418a1" translate="yes" xml:space="preserve">
          <source>In the following example, a &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; sends a beacon using the URL and data from the global context.</source>
          <target state="translated">次の例では、&lt;a href=&quot;../worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;はURLとグローバルコンテキストからのデータを使用してビーコンを送信します。</target>
        </trans-unit>
        <trans-unit id="e2c4b52405c33bb76581b3b25475df910f8055c2" translate="yes" xml:space="preserve">
          <source>In the following example, a &lt;code&gt;PaymentRequest&lt;/code&gt; object is instantiated before the &lt;code&gt;show()&lt;/code&gt; method is called. This method triggers the user agent's built-in process for retrieving payment information from the user. The &lt;code&gt;show()&lt;/code&gt; method returns a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; that resolves to a &lt;a href=&quot;../paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; object when the user interaction is complete. The developer then uses the information in the &lt;code&gt;PaymentResponse&lt;/code&gt; object to format and send payment data to the server. You should send the payment information to the server asynchronously so that the final call to &lt;a href=&quot;../paymentresponse/complete&quot;&gt;&lt;code&gt;paymentResponse.complete()&lt;/code&gt;&lt;/a&gt; can indicate the success or failure of the payment.</source>
          <target state="translated">次の例では、 &lt;code&gt;show()&lt;/code&gt; メソッドが呼び出される前に &lt;code&gt;PaymentRequest&lt;/code&gt; オブジェクトがインスタンス化されます。このメソッドは、ユーザーから支払い情報を取得するためのユーザーエージェントの組み込みプロセスをトリガーします。 &lt;code&gt;show()&lt;/code&gt; メソッドを返し&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;に解決されること&lt;a href=&quot;../paymentresponse&quot;&gt; &lt;code&gt;PaymentResponse&lt;/code&gt; の&lt;/a&gt;ユーザインタラクションが完全なオブジェクトである場合。次に、開発者は &lt;code&gt;PaymentResponse&lt;/code&gt; オブジェクトの情報を使用して、支払いデータをフォーマットしてサーバーに送信します。支払い情報をサーバーに非同期に送信して、&lt;a href=&quot;../paymentresponse/complete&quot;&gt; &lt;code&gt;paymentResponse.complete()&lt;/code&gt; &lt;/a&gt;への最後の呼び出しで支払いの成功または失敗を示すことができるようにする必要があります。</target>
        </trans-unit>
        <trans-unit id="b5ff12a4f3863904b511398d8dbb0bbb6fb2cca4" translate="yes" xml:space="preserve">
          <source>In the following example, an artifical &lt;a href=&quot;response&quot;&gt;&lt;code&gt;Response&lt;/code&gt;&lt;/a&gt; is created to stream HTML fragments fetched from another resource to the browser.</source>
          <target state="translated">次の例では、別のリソースからフェッチされたHTMLフラグメントをブラウザーにストリーミングするための人工的な&lt;a href=&quot;response&quot;&gt; &lt;code&gt;Response&lt;/code&gt; &lt;/a&gt;が作成されます。</target>
        </trans-unit>
        <trans-unit id="074d15ec140caa2cf001de7db84d2c0f9c261301" translate="yes" xml:space="preserve">
          <source>In the following example, default touch behavior is disabled for some &lt;code&gt;button&lt;/code&gt; elements.</source>
          <target state="translated">次の例では、一部の &lt;code&gt;button&lt;/code&gt; 要素のデフォルトのタッチ動作が無効になっています。</target>
        </trans-unit>
        <trans-unit id="435f4702a2e343f1c7339da7a8f80d5950f63c17" translate="yes" xml:space="preserve">
          <source>In the following example, is &lt;a href=&quot;https://rsolomakhin.github.io/samples/paymentrequest/can-make-payment/&quot;&gt;excerpted from a demo&lt;/a&gt; that asynchronously builds a &lt;code&gt;PaymentRequest&lt;/code&gt; object for both Android Pay and credit cards. It wraps the call to &lt;code&gt;canMakePayment()&lt;/code&gt; in feature detection, and calls an appropriate callback depending on the resolution of the &lt;code&gt;Promise&lt;/code&gt;.</source>
          <target state="translated">次の例は、Android Payとクレジットカードの両方の &lt;code&gt;PaymentRequest&lt;/code&gt; オブジェクトを非同期で構築する&lt;a href=&quot;https://rsolomakhin.github.io/samples/paymentrequest/can-make-payment/&quot;&gt;デモからの抜粋&lt;/a&gt;です。 &lt;code&gt;canMakePayment()&lt;/code&gt; の呼び出しを機能検出にラップし、 &lt;code&gt;Promise&lt;/code&gt; の解決に応じて適切なコールバックを呼び出します。</target>
        </trans-unit>
        <trans-unit id="a89cbe350cc5914c90c8f16cde6b42e2ba8e80cf" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;a href=&quot;paymentrequest/paymentrequest&quot;&gt;&lt;code&gt;PaymentRequest()&lt;/code&gt;&lt;/a&gt; constructor is used to create a new payment request, which takes three objects as parameters &amp;mdash; one containing details of the payment methods that can be used for the payment, one containing details of the actual order (such as items bought and shipping options), and an optional object containing further options.</source>
          <target state="translated">次の例では、&lt;a href=&quot;paymentrequest/paymentrequest&quot;&gt; &lt;code&gt;PaymentRequest()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して、3つのオブジェクトをパラメーターとして取る新しい支払い要求を作成します。1つは支払いに使用できる支払い方法の詳細を含み、1つは実際の注文の詳細を含みます（購入したアイテムおよび配送オプションとして）、および追加のオプションを含むオプションのオブジェクト。</target>
        </trans-unit>
        <trans-unit id="69a4afce05318d660f9a2d64558901c1c08b8728" translate="yes" xml:space="preserve">
          <source>In the following example, the &lt;a href=&quot;paymentrequest/paymentrequest&quot;&gt;&lt;code&gt;PaymentRequest()&lt;/code&gt;&lt;/a&gt; constructor is used to create a new payment request, which takes three objects as parameters &amp;mdash; one containing details of the payment methods that can be used for the payment, one containing details of the actual order (such as items bought and shipping options), and an optional object that describes what data is needed to fullfil the payment (e.g., a shipping address).</source>
          <target state="translated">次の例では、&lt;a href=&quot;paymentrequest/paymentrequest&quot;&gt; &lt;code&gt;PaymentRequest()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して、3つのオブジェクトをパラメーターとして取る新しい支払い要求を作成します。1つは支払いに使用できる支払い方法の詳細を含み、1つは実際の注文の詳細を含みます（購入したアイテムと配送オプションとして）、および支払いを完了するために必要なデータを説明するオプションのオブジェクト（配送先住所など）。</target>
        </trans-unit>
        <trans-unit id="9399fcb632d7fa954193a19bfe23757637053c4f" translate="yes" xml:space="preserve">
          <source>In the following example, the browser's default touch behavior is disabled for the &lt;code&gt;div&lt;/code&gt; element.</source>
          <target state="translated">次の例では、ブラウザーのデフォルトのタッチ動作が &lt;code&gt;div&lt;/code&gt; 要素に対して無効になっています。</target>
        </trans-unit>
        <trans-unit id="c4954c22bd76143fe072e377c4963440f2a90e26" translate="yes" xml:space="preserve">
          <source>In the following example, the observer only processes &quot;&lt;code&gt;frame&lt;/code&gt;&quot; entries.</source>
          <target state="translated">次の例では、オブザーバーは「 &lt;code&gt;frame&lt;/code&gt; 」エントリのみを処理します。</target>
        </trans-unit>
        <trans-unit id="1433807e8aed33cbe342c63308336b4d4f59743d" translate="yes" xml:space="preserve">
          <source>In the following example, the observer registers to be notified when several different &lt;a href=&quot;../performanceentry/entrytype&quot;&gt;&lt;code&gt;performance entry types&lt;/code&gt;&lt;/a&gt; are added to the performance timeline.</source>
          <target state="translated">次の例では、いくつかの異なる&lt;a href=&quot;../performanceentry/entrytype&quot;&gt; &lt;code&gt;performance entry types&lt;/code&gt; &lt;/a&gt;がパフォーマンスタイムラインに追加されたときに通知するオブザーバーを登録します。</target>
        </trans-unit>
        <trans-unit id="ea0a664d609a3f3c335bc180ae43dd32b5c2f10b" translate="yes" xml:space="preserve">
          <source>In the following example, the state of the animation will be &lt;code&gt;running&lt;/code&gt; when the &lt;strong&gt;current ready Promise&lt;/strong&gt; is resolved because the animation does not leave the &lt;code&gt;pending&lt;/code&gt; play state in between the calls to &lt;code&gt;pause&lt;/code&gt; and &lt;code&gt;play&lt;/code&gt; and hence the &lt;strong&gt;current ready Promise&lt;/strong&gt; does not change.</source>
          <target state="translated">次の例では、アニメーションの状態がされます &lt;code&gt;running&lt;/code&gt; とき&lt;strong&gt;、現在準備の約束を&lt;/strong&gt;アニメーションは残していないので、解決された &lt;code&gt;pending&lt;/code&gt; の呼び出しの間に再生状態を &lt;code&gt;pause&lt;/code&gt; し、 &lt;code&gt;play&lt;/code&gt; 、したがって&lt;strong&gt;、現在準備の約束は&lt;/strong&gt;変更されません。</target>
        </trans-unit>
        <trans-unit id="e63de5a71b8870039b14aa4bd411ec24bdfe2f0a" translate="yes" xml:space="preserve">
          <source>In the following example, the value of the &lt;code&gt;*Start&lt;/code&gt; and &lt;code&gt;*End&lt;/code&gt; properties of all &quot;&lt;code&gt;resource&lt;/code&gt;&quot; &lt;a href=&quot;../performanceentry/entrytype&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; events are logged.</source>
          <target state="translated">次の例では、すべての「 &lt;code&gt;resource&lt;/code&gt; 」&lt;a href=&quot;../performanceentry/entrytype&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;イベントの &lt;code&gt;*Start&lt;/code&gt; および &lt;code&gt;*End&lt;/code&gt; プロパティの値がログに記録されます。</target>
        </trans-unit>
        <trans-unit id="272a68d6fbc5f4442d1315c4d1b6de3e82eca052" translate="yes" xml:space="preserve">
          <source>In the following example, there are three messages sent. The first is just a comment, since it starts with a colon character. As mentioned previously, this can be useful as a keep-alive if messages may not be sent regularly.</source>
          <target state="translated">次の例では、3つのメッセージが送信されています。最初のものはコロン文字で始まるので、単なるコメントです。前述したように、これはメッセージが定期的に送信されない可能性がある場合のキープアライブとして有用です。</target>
        </trans-unit>
        <trans-unit id="5c03a598ed9c91ab1c9ee7e227c36c0439717838" translate="yes" xml:space="preserve">
          <source>In the following example, we use an onclick handler to open a webpage in a new tab (specified by the inclusion of the &lt;code&gt;'_blank'&lt;/code&gt; parameter) once a notification is clicked:</source>
          <target state="translated">次の例では、通知がクリックされると、onclickハンドラーを使用して、（ &lt;code&gt;'_blank'&lt;/code&gt; パラメーターを含めることで指定された）新しいタブでWebページを開きます。</target>
        </trans-unit>
        <trans-unit id="fad7ceb798d82f026b15c9c84b22426bc2473d27" translate="yes" xml:space="preserve">
          <source>In the following example, we will use an external image as the backdrop for a small line graph. Using backdrops can make your script considerably smaller because we can avoid the need for code to generate the background. In this example, we're only using one image, so I use the image object's &lt;code&gt;load&lt;/code&gt; event handler to execute the drawing statements. The &lt;code&gt;drawImage()&lt;/code&gt; method places the backdrop at the coordinate (0, 0), which is the top-left corner of the canvas.</source>
          <target state="translated">次の例では、小さな線グラフの背景として外部画像を使用します。背景を使用することで、背景を生成するコードが不要になるため、スクリプトを大幅に小さくすることができます。この例では、1つの画像のみを使用しているため、画像オブジェクトの &lt;code&gt;load&lt;/code&gt; イベントハンドラーを使用して描画ステートメントを実行します。 &lt;code&gt;drawImage()&lt;/code&gt; メソッドは、キャンバスの左上隅である、（0、0）座標での背景を置きます。</target>
        </trans-unit>
        <trans-unit id="a2ea89db3c927ff7b96eac5c3aa09d70af60c212" translate="yes" xml:space="preserve">
          <source>In the following example, when the &lt;code&gt;target&lt;/code&gt; element is touched, it will only pan in the horizontal direction.</source>
          <target state="translated">次の例では、 &lt;code&gt;target&lt;/code&gt; 要素がタッチされると、水平方向にのみパンします。</target>
        </trans-unit>
        <trans-unit id="27103044b8cb0dedb1968025603095f2edc97939" translate="yes" xml:space="preserve">
          <source>In the following example, you can see a new channel being created using the &lt;a href=&quot;messagechannel&quot;&gt;&lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">次の例では、&lt;a href=&quot;messagechannel&quot;&gt; &lt;code&gt;MessageChannel.MessageChannel&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して作成される新しいチャネルを確認できます。</target>
        </trans-unit>
        <trans-unit id="267443cd206379d124942634e201ae0c8ab5d59b" translate="yes" xml:space="preserve">
          <source>In the following example, you can see an example of how the &lt;code&gt;createPanner()&lt;/code&gt; method, &lt;a href=&quot;../audiolistener&quot;&gt;&lt;code&gt;AudioListener&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; would be used to control audio spatialisation. Generally you will define the position in 3D space that your audio listener and panner (source) occupy initially, and then update the position of one or both of these as the application is used. You might be moving a character around inside a game world for example, and wanting delivery of audio to change realistically as your character moves closer to or further away from a music player such as a stereo. In the example you can see this being controlled by the functions &lt;code&gt;moveRight()&lt;/code&gt;, &lt;code&gt;moveLeft()&lt;/code&gt;, etc., which set new values for the panner position via the &lt;code&gt;PositionPanner()&lt;/code&gt; function.</source>
          <target state="translated">次の例では、 &lt;code&gt;createPanner()&lt;/code&gt; メソッド、&lt;a href=&quot;../audiolistener&quot;&gt; &lt;code&gt;AudioListener&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../pannernode&quot;&gt; &lt;code&gt;PannerNode&lt;/code&gt; &lt;/a&gt;を使用してオーディオの空間化を制御する方法の例を示しています。通常は、オーディオリスナーとパンナー（ソース）が最初に占める3D空間内の位置を定義し、アプリケーションの使用時にこれらの一方または両方の位置を更新します。たとえば、ゲームの世界内でキャラクターを動かし、キャラクターがステレオなどの音楽プレーヤーに近づいたり遠ざかったりするときに、音声の配信をリアルに変更したいとします。この例では、関数 &lt;code&gt;moveRight()&lt;/code&gt; 、 &lt;code&gt;moveLeft()&lt;/code&gt; によって制御されていることがわかります。、など、 &lt;code&gt;PositionPanner()&lt;/code&gt; 関数を介してパンナー位置の新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="0fbc992a8d37b0d921869bc0d62f0d91d2f3c4f5" translate="yes" xml:space="preserve">
          <source>In the following example, you can see an example of how the &lt;code&gt;createPanner()&lt;/code&gt; method, &lt;a href=&quot;audiolistener&quot;&gt;&lt;code&gt;AudioListener&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; would be used to control audio spatialisation. Generally you will define the position in 3D space that your audio listener and panner (source) occupy initially, and then update the position of one or both of these as the application is used. You might be moving a character around inside a game world for example, and wanting delivery of audio to change realistically as your character moves closer to or further away from a music player such as a stereo. In the example you can see this being controlled by the functions &lt;code&gt;moveRight()&lt;/code&gt;, &lt;code&gt;moveLeft()&lt;/code&gt;, etc., which set new values for the panner position via the &lt;code&gt;PositionPanner()&lt;/code&gt; function.</source>
          <target state="translated">次の例では、 &lt;code&gt;createPanner()&lt;/code&gt; メソッド、&lt;a href=&quot;audiolistener&quot;&gt; &lt;code&gt;AudioListener&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;pannernode&quot;&gt; &lt;code&gt;PannerNode&lt;/code&gt; &lt;/a&gt;を使用してオーディオの空間化を制御する方法の例を示しています。通常は、オーディオリスナーとパンナー（ソース）が最初に占める3D空間内の位置を定義し、アプリケーションの使用時にこれらの一方または両方の位置を更新します。たとえば、ゲームの世界内でキャラクターを動かし、キャラクターがステレオなどの音楽プレーヤーに近づいたり遠ざかったりするときに、音声の配信をリアルに変更したいとします。この例では、関数 &lt;code&gt;moveRight()&lt;/code&gt; 、 &lt;code&gt;moveLeft()&lt;/code&gt; によって制御されていることがわかります。、など、 &lt;code&gt;PositionPanner()&lt;/code&gt; 関数を介してパンナー位置の新しい値を設定します。</target>
        </trans-unit>
        <trans-unit id="5dd1b59215ad923cdb79fd53376e012a6544888f" translate="yes" xml:space="preserve">
          <source>In the following illustration, the client area is show in white. (The segments labeled &quot;Top&quot;, &quot;Right&quot;, etc. have no significance regarding the client area.) The clientTop value is the distance from where the margin (yellow) area ends and the padding and content areas (white) begin.</source>
          <target state="translated">以下の図では、クライアント領域が白で表示されています(「上」「右」などと表示されている部分は、クライアント領域に関する意味はありません)。clientTopの値は、マージン(黄色)の領域が終わり、パディングとコンテンツの領域(白)が始まるまでの距離です。</target>
        </trans-unit>
        <trans-unit id="474a83ac9b651165c2d3beae70139fedcda6414c" translate="yes" xml:space="preserve">
          <source>In the following simple example we retrieve the list of classes set on a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt; element as a &lt;code&gt;DOMTokenList&lt;/code&gt; using &lt;a href=&quot;element/classlist&quot;&gt;&lt;code&gt;Element.classList&lt;/code&gt;&lt;/a&gt;, add a class using &lt;a href=&quot;domtokenlist/add&quot;&gt;&lt;code&gt;DOMTokenList.add()&lt;/code&gt;&lt;/a&gt;, and then update the &lt;a href=&quot;node/textcontent&quot;&gt;&lt;code&gt;Node.textContent&lt;/code&gt;&lt;/a&gt; of the &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; to equal the &lt;code&gt;DOMTokenList&lt;/code&gt;.</source>
          <target state="translated">以下の単純な例では、上に設定クラスのリスト取得&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &lt;/a&gt;のような要素 &lt;code&gt;DOMTokenList&lt;/code&gt; 使用&lt;a href=&quot;element/classlist&quot;&gt; &lt;code&gt;Element.classList&lt;/code&gt; &lt;/a&gt;使用して、クラス追加&lt;a href=&quot;domtokenlist/add&quot;&gt; &lt;code&gt;DOMTokenList.add()&lt;/code&gt; &lt;/a&gt;、次に更新&lt;a href=&quot;node/textcontent&quot;&gt; &lt;code&gt;Node.textContent&lt;/code&gt; &lt;/a&gt;の &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; 等しいです &lt;code&gt;DOMTokenList&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="80f8f0c900b82d25d4e356ac33ff134dd6e1af5c" translate="yes" xml:space="preserve">
          <source>In the following simple example, a custom &lt;code&gt;ReadableStream&lt;/code&gt; is created using a constructor (see our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;Simple random stream example&lt;/a&gt; for the full code). The &lt;code&gt;start()&lt;/code&gt; function generates a random string of text every second and enqueues it into the stream &amp;mdash; see &lt;code&gt;controller.enqueue(string)&lt;/code&gt;. A &lt;code&gt;cancel()&lt;/code&gt; function is also provided to stop the generation if &lt;a href=&quot;../readablestream/cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt; is called for any reason.</source>
          <target state="translated">次の単純な例では、コンストラクターを使用してカスタム &lt;code&gt;ReadableStream&lt;/code&gt; が作成されます（完全なコードについては、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;単純なランダムストリームの例&lt;/a&gt;を参照してください）。 &lt;code&gt;start()&lt;/code&gt; 関数は、ストリームに毎秒とエンキューそれをテキストのランダムな文字列を生成-参照 &lt;code&gt;controller.enqueue(string)&lt;/code&gt; 。 &lt;code&gt;cancel()&lt;/code&gt; 関数もあれば発生を停止するために提供される&lt;a href=&quot;../readablestream/cancel&quot;&gt; &lt;code&gt;ReadableStream.cancel()&lt;/code&gt; &lt;/a&gt;何らかの理由で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="59cb84714140f3e5268fa616f6ba90deb1e77626" translate="yes" xml:space="preserve">
          <source>In the following simple example, a custom &lt;code&gt;ReadableStream&lt;/code&gt; is created using a constructor (see our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;Simple random stream example&lt;/a&gt; for the full code). The &lt;code&gt;start()&lt;/code&gt; function generates a random string of text every second and enqueues it into the stream. A &lt;code&gt;cancel()&lt;/code&gt; fuction is also provided to stop the generation if &lt;a href=&quot;cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt; is called for any reason.</source>
          <target state="translated">次の単純な例では、コンストラクターを使用してカスタム &lt;code&gt;ReadableStream&lt;/code&gt; が作成されます（完全なコードについては、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;単純なランダムストリームの例&lt;/a&gt;を参照してください）。 &lt;code&gt;start()&lt;/code&gt; 関数は、毎秒テキストのランダムな文字列を生成し、ストリームにそれをエンキューします。 &lt;code&gt;cancel()&lt;/code&gt; のfuctionもあれば発生を停止するために設けられている&lt;a href=&quot;cancel&quot;&gt; &lt;code&gt;ReadableStream.cancel()&lt;/code&gt; が&lt;/a&gt;何らかの理由で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="c4ff1cf79f45c57303c62ae0c938833b77546406" translate="yes" xml:space="preserve">
          <source>In the following simple example, a custom &lt;code&gt;ReadableStream&lt;/code&gt; is created using a constructor (see our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;Simple random stream example&lt;/a&gt; for the full code). The &lt;code&gt;start()&lt;/code&gt; function generates a random string of text every second and enqueues it into the stream. A &lt;code&gt;cancel()&lt;/code&gt; function is also provided to stop the generation if &lt;a href=&quot;../readablestream/cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt; is called for any reason.</source>
          <target state="translated">次の単純な例では、コンストラクターを使用してカスタム &lt;code&gt;ReadableStream&lt;/code&gt; が作成されます（完全なコードについては、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;単純なランダムストリームの例&lt;/a&gt;を参照してください）。 &lt;code&gt;start()&lt;/code&gt; 関数は、毎秒テキストのランダムな文字列を生成し、ストリームにそれをエンキューします。 &lt;code&gt;cancel()&lt;/code&gt; 関数もあれば発生を停止するために提供される&lt;a href=&quot;../readablestream/cancel&quot;&gt; &lt;code&gt;ReadableStream.cancel()&lt;/code&gt; &lt;/a&gt;何らかの理由で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="5e2870fcf6209e4e65b1b15b629e6b41a8003f8e" translate="yes" xml:space="preserve">
          <source>In the following simple example, a custom &lt;code&gt;ReadableStream&lt;/code&gt; is created using a constructor (see our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;Simple random stream example&lt;/a&gt; for the full code). The &lt;code&gt;start()&lt;/code&gt; function generates a random string of text every second and enqueues it into the stream. A &lt;code&gt;cancel()&lt;/code&gt; function is also provided to stop the generation if &lt;a href=&quot;readablestream/cancel&quot;&gt;&lt;code&gt;ReadableStream.cancel()&lt;/code&gt;&lt;/a&gt; is called for any reason.</source>
          <target state="translated">次の単純な例では、コンストラクターを使用してカスタム &lt;code&gt;ReadableStream&lt;/code&gt; が作成されます（完全なコードについては、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;単純なランダムストリームの例&lt;/a&gt;を参照してください）。 &lt;code&gt;start()&lt;/code&gt; 関数は、毎秒テキストのランダムな文字列を生成し、ストリームにそれをエンキューします。 &lt;code&gt;cancel()&lt;/code&gt; 関数もあれば発生を停止するために提供される&lt;a href=&quot;readablestream/cancel&quot;&gt; &lt;code&gt;ReadableStream.cancel()&lt;/code&gt; &lt;/a&gt;何らかの理由で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="b4b18390b90a48249fd37f0687cb1a40ede06b2e" translate="yes" xml:space="preserve">
          <source>In the following simple example, a previously-created custom &lt;code&gt;ReadableStream&lt;/code&gt; is read using a &lt;a href=&quot;../readablestreamdefaultreader&quot;&gt;&lt;code&gt;ReadableStreamDefaultReader&lt;/code&gt;&lt;/a&gt; created using &lt;code&gt;getReader()&lt;/code&gt;. (see our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;Simple random stream example&lt;/a&gt; for the full code). Each chunk is read sequentially and output to the UI, until the stream has finished being read, at which point we return out of the recursive function and print the entire stream to another part of the UI.</source>
          <target state="translated">次の簡単な例では、以前に作成されたカスタム &lt;code&gt;ReadableStream&lt;/code&gt; が、 &lt;code&gt;getReader()&lt;/code&gt; を使用して作成された&lt;a href=&quot;../readablestreamdefaultreader&quot;&gt; &lt;code&gt;ReadableStreamDefaultReader&lt;/code&gt; &lt;/a&gt;を使用して読み取られます。 （完全なコードについては、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;単純なランダムストリームの例&lt;/a&gt;を参照してください）。各チャンクは順次読み取られ、ストリームの読み取りが完了するまでUIに出力されます。この時点で、再帰関数から戻り、ストリーム全体をUIの別の部分に出力します。</target>
        </trans-unit>
        <trans-unit id="70da65ac6eaead2e5668e0c03b6541cc8e7d2e27" translate="yes" xml:space="preserve">
          <source>In the following simple example, a previously-created custom &lt;code&gt;ReadableStream&lt;/code&gt; is read using a &lt;a href=&quot;../readablestreamdefaultreader&quot;&gt;&lt;code&gt;ReadableStreamDefaultReader&lt;/code&gt;&lt;/a&gt; created using &lt;code&gt;getReader()&lt;/code&gt;. (this code is based on our &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;Simple random stream example&lt;/a&gt;). Each chunk is read sequentially and output to the UI, until the stream has finished being read, at which point we return out of the recursive function and print the entire stream to another part of the UI.</source>
          <target state="translated">次の簡単な例では、以前に作成されたカスタム &lt;code&gt;ReadableStream&lt;/code&gt; が、 &lt;code&gt;getReader()&lt;/code&gt; を使用して作成された&lt;a href=&quot;../readablestreamdefaultreader&quot;&gt; &lt;code&gt;ReadableStreamDefaultReader&lt;/code&gt; &lt;/a&gt;を使用して読み取られます。 （このコードは、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-random-stream/&quot;&gt;単純なランダムストリームの例に&lt;/a&gt;基づいています）。各チャンクは順次読み取られ、ストリームの読み取りが完了するまでUIに出力されます。この時点で、再帰関数から戻り、ストリーム全体をUIの別の部分に出力します。</target>
        </trans-unit>
        <trans-unit id="2c3326db0ccb36af73ef9fce2fd3ca9bc5c2ece9" translate="yes" xml:space="preserve">
          <source>In the following simple example, a previously-created stream is teed, then both resulting streams (contained in two members of a generated array) are passed to a function that reads the data out of the two streams and prints each stream's chunks sequentially to a different part of the UI. See &lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-tee-example/&quot;&gt;Simple tee example&lt;/a&gt; for the full code.</source>
          <target state="translated">次の簡単な例では、以前に作成されたストリームがティーされ、次に、生成された両方のストリーム（生成された配列の2つのメンバーに含まれる）が2つのストリームからデータを読み取り、各ストリームのチャンクを順番に出力する関数に渡されます。 UIの別の部分。完全なコードについては、&lt;a href=&quot;https://mdn.github.io/dom-examples/streams/simple-tee-example/&quot;&gt;シンプルなT字の例&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c22e74fba95ca0693e32f5fa4b058e21c5c71986" translate="yes" xml:space="preserve">
          <source>In the following simple example, we create a &lt;a href=&quot;../mediastreamaudiodestinationnode&quot;&gt;&lt;code&gt;MediaStreamAudioDestinationNode&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;../mediarecorder&quot;&gt;&lt;code&gt;MediaRecorder&lt;/code&gt;&lt;/a&gt; (the example will therefore only work in Firefox and Chrome at this time.) The &lt;code&gt;MediaRecorder&lt;/code&gt; is set up to record information from the &lt;code&gt;MediaStreamDestinationNode&lt;/code&gt;.</source>
          <target state="translated">次の簡単な例では、&lt;a href=&quot;../mediastreamaudiodestinationnode&quot;&gt; &lt;code&gt;MediaStreamAudioDestinationNode&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;../oscillatornode&quot;&gt; &lt;code&gt;OscillatorNode&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;../mediarecorder&quot;&gt; &lt;code&gt;MediaRecorder&lt;/code&gt; &lt;/a&gt;を作成します（したがって、この例は、現時点ではFirefoxおよびChromeでのみ機能します。） &lt;code&gt;MediaRecorder&lt;/code&gt; は、 &lt;code&gt;MediaStreamDestinationNode&lt;/code&gt; からの情報を記録するように設定されています。</target>
        </trans-unit>
        <trans-unit id="412081b079739248cd449f45f3df036233949d8a" translate="yes" xml:space="preserve">
          <source>In the following simple example, we create a &lt;a href=&quot;mediastreamaudiodestinationnode&quot;&gt;&lt;code&gt;MediaStreamAudioDestinationNode&lt;/code&gt;&lt;/a&gt;, an &lt;a href=&quot;oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; and a &lt;a href=&quot;mediarecorder&quot;&gt;&lt;code&gt;MediaRecorder&lt;/code&gt;&lt;/a&gt; (the example will therefore only work in Firefox and Chrome at this time.) The &lt;code&gt;MediaRecorder&lt;/code&gt; is set up to record information from the &lt;code&gt;MediaStreamDestinationNode&lt;/code&gt;.</source>
          <target state="translated">次の簡単な例では、&lt;a href=&quot;mediastreamaudiodestinationnode&quot;&gt; &lt;code&gt;MediaStreamAudioDestinationNode&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;oscillatornode&quot;&gt; &lt;code&gt;OscillatorNode&lt;/code&gt; &lt;/a&gt;、および&lt;a href=&quot;mediarecorder&quot;&gt; &lt;code&gt;MediaRecorder&lt;/code&gt; &lt;/a&gt;を作成します（したがって、この例は、現時点ではFirefoxおよびChromeでのみ機能します。） &lt;code&gt;MediaRecorder&lt;/code&gt; は、 &lt;code&gt;MediaStreamDestinationNode&lt;/code&gt; からの情報を記録するように設定されています。</target>
        </trans-unit>
        <trans-unit id="35c15027522574712e5fe6ced6b122df70aed2c4" translate="yes" xml:space="preserve">
          <source>In the following snippet we do just this &amp;mdash; depending on whether the user can make a fast payment or needs to add payment credentials first, the title of the checkout button changes between &quot;Fast Checkout with W3C&quot; and &quot;Setup W3C Checkout&quot;. In both cases, the checkout button calls &lt;a href=&quot;../paymentrequest/show&quot;&gt;&lt;code&gt;PaymentRequest.show()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">次のスニペットでは、これを行います。ユーザーが高速支払いを実行できるか、最初に支払い認証情報を追加する必要があるかによって、チェックアウトボタンのタイトルが「W3Cでの高速チェックアウト」と「W3Cチェックアウトのセットアップ」の間で変わります。どちらの場合も、チェックアウトボタンは&lt;a href=&quot;../paymentrequest/show&quot;&gt; &lt;code&gt;PaymentRequest.show()&lt;/code&gt; を&lt;/a&gt;呼び出します。</target>
        </trans-unit>
        <trans-unit id="6aa744a3eb4f9113956367367e140c4cfafdff30" translate="yes" xml:space="preserve">
          <source>In the following snippet, a merchant page performs this check, and if it returns &lt;code&gt;true&lt;/code&gt; updates the checkout button to use &lt;code&gt;PaymentRequest&lt;/code&gt; instead of legacy web forms.</source>
          <target state="translated">次のスニペットでは、マーチャントページがこのチェックを実行し、 &lt;code&gt;true&lt;/code&gt; が返された場合、チェックアウトボタンを更新して、レガシーWebフォームの代わりに &lt;code&gt;PaymentRequest&lt;/code&gt; を使用します。</target>
        </trans-unit>
        <trans-unit id="ed8de38c803e9a9a0c44ea1d4286580acb8d3f34" translate="yes" xml:space="preserve">
          <source>In the following snippet, found in our &lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;view it running live&lt;/a&gt;), we have a simple function that when called creates an &lt;code&gt;options&lt;/code&gt; object and then a new notification. At the end of the function, it also calls &lt;code&gt;close()&lt;/code&gt; inside a &lt;a href=&quot;../windoworworkerglobalscope/settimeout&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; function to close the notification after 4 seconds (some browsers close spawned notifications automatically, and some such as Chrome and Opera do not.) Also note the use of &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind()&lt;/a&gt;&lt;/code&gt; to make sure the &lt;code&gt;close()&lt;/code&gt; call is associated with the notification.</source>
          <target state="translated">次のスニペットは、&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;Emogotchiデモ&lt;/a&gt;（&lt;a href=&quot;http://mdn.github.io/emogotchi/&quot;&gt;ライブで実行中を表示&lt;/a&gt;）にあり、呼び出されたときに &lt;code&gt;options&lt;/code&gt; オブジェクトを作成してから新しい通知を作成する単純な関数があります。関数の最後に、&lt;a href=&quot;../windoworworkerglobalscope/settimeout&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;関数内で &lt;code&gt;close()&lt;/code&gt; も呼び出して、4秒後に通知を閉じます（ブラウザによっては、生成された通知を自動的に閉じたり、ChromeやOperaなどの一部では閉じません）。 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind()&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;close()&lt;/code&gt; 呼び出しが通知に関連付けられていることを確認します。</target>
        </trans-unit>
        <trans-unit id="06e3dfe446238d616cb4da8087d2c56b3ff2de04" translate="yes" xml:space="preserve">
          <source>In the following snippet, found in our &lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;Emogotchi demo&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;view it running live&lt;/a&gt;), we have a simple function that when called creates an &lt;code&gt;options&lt;/code&gt; object and then a new notification. At the end of the function, it also calls &lt;code&gt;close()&lt;/code&gt; inside a &lt;a href=&quot;../windoworworkerglobalscope/settimeout&quot;&gt;&lt;code&gt;setTimeout()&lt;/code&gt;&lt;/a&gt; function to close the notification after 4 seconds (some browsers close spawned notifications automatically, and some such as Chrome and Opera do not.) Also note the use of &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind()&lt;/a&gt;&lt;/code&gt; to make sure the &lt;code&gt;close()&lt;/code&gt; call is associated with the notification.</source>
          <target state="translated">&lt;a href=&quot;https://github.com/mdn/emogotchi&quot;&gt;Emogotchiデモ&lt;/a&gt;（&lt;a href=&quot;https://mdn.github.io/emogotchi/&quot;&gt;ライブで実行&lt;/a&gt;されていることを確認）にある次のスニペットには、呼び出されたときに &lt;code&gt;options&lt;/code&gt; オブジェクトを作成し、次に新しい通知を作成する単純な関数があります。関数の最後に、&lt;a href=&quot;../windoworworkerglobalscope/settimeout&quot;&gt; &lt;code&gt;setTimeout()&lt;/code&gt; &lt;/a&gt;関数内で &lt;code&gt;close()&lt;/code&gt; を呼び出して、4秒後に通知を閉じます（一部のブラウザーは生成された通知を自動的に閉じますが、ChromeやOperaなどの一部は閉じません）。 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind&quot;&gt;bind()&lt;/a&gt;&lt;/code&gt; を使用して、 &lt;code&gt;close()&lt;/code&gt; 呼び出しが通知に関連付けられていることを確認します。</target>
        </trans-unit>
        <trans-unit id="1d8c734a5c806c7eafd766294af616d92c5077a4" translate="yes" xml:space="preserve">
          <source>In the following snippet, we aim to download a video using the &lt;a href=&quot;../fetch_api&quot;&gt;Fetch API&lt;/a&gt;.</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;../fetch_api&quot;&gt;Fetch API&lt;/a&gt;を使用して動画をダウンロードすることを目指しています。</target>
        </trans-unit>
        <trans-unit id="142af4e4f8156e83cae740b9eac83eea2036a02e" translate="yes" xml:space="preserve">
          <source>In the following snippet, we aim to download a video using the &lt;a href=&quot;fetch_api&quot;&gt;Fetch API&lt;/a&gt;.</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;fetch_api&quot;&gt;Fetch API&lt;/a&gt;を使用して動画をダウンロードすることを目指しています。</target>
        </trans-unit>
        <trans-unit id="ec6ac752fbbf3cd68e0661ddea25be5b49e124b7" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new &lt;code&gt;AbortController&lt;/code&gt; object, and get its &lt;a href=&quot;../abortsignal&quot;&gt;&lt;code&gt;AbortSignal&lt;/code&gt;&lt;/a&gt; (available in the &lt;code&gt;signal&lt;/code&gt; property). Later on we check whether or not it the signal has been aborted using the &lt;code&gt;aborted&lt;/code&gt; property, and send an appropriate log to the console.</source>
          <target state="translated">次のスニペットでは、新しい &lt;code&gt;AbortController&lt;/code&gt; オブジェクトを作成し、その&lt;a href=&quot;../abortsignal&quot;&gt; &lt;code&gt;AbortSignal&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;signal&lt;/code&gt; プロパティで使用可能）を取得します。後で、 &lt;code&gt;aborted&lt;/code&gt; プロパティを使用して信号が中止されているかどうかを確認し、適切なログをコンソールに送信します。</target>
        </trans-unit>
        <trans-unit id="ea686afe1ee305f352aed33c09e2ec95b6f72277" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new &lt;code&gt;AbortController&lt;/code&gt; object, and get its &lt;a href=&quot;../abortsignal&quot;&gt;&lt;code&gt;AbortSignal&lt;/code&gt;&lt;/a&gt; (available in the &lt;code&gt;signal&lt;/code&gt; property). Later on we check whether or not it the signal has been aborted using the &lt;code&gt;onabort&lt;/code&gt; property, and send an appropriate log to the console.</source>
          <target state="translated">次のスニペットでは、新しい &lt;code&gt;AbortController&lt;/code&gt; オブジェクトを作成し、その&lt;a href=&quot;../abortsignal&quot;&gt; &lt;code&gt;AbortSignal&lt;/code&gt; &lt;/a&gt;（ &lt;code&gt;signal&lt;/code&gt; プロパティで使用可能）を取得します。後で &lt;code&gt;onabort&lt;/code&gt; プロパティを使用して信号が中止されたかどうかを確認し、適切なログをコンソールに送信します。</target>
        </trans-unit>
        <trans-unit id="a7d1a678fcd8ff9ee037e00996cd0d0af7fc5746" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new header using the &lt;code&gt;Headers()&lt;/code&gt; constructor, add a new header to it using &lt;code&gt;append()&lt;/code&gt;, then return that header value using &lt;code&gt;get()&lt;/code&gt;:</source>
          <target state="translated">次のスニペットでは、 &lt;code&gt;Headers()&lt;/code&gt; コンストラクターを使用して新しいヘッダーを作成し、 &lt;code&gt;append()&lt;/code&gt; を使用して新しいヘッダーを追加し、 &lt;code&gt;get()&lt;/code&gt; を使用してそのヘッダー値を返します。</target>
        </trans-unit>
        <trans-unit id="0113a15ee50c09fd5ed788dcb4b202cde3015285" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the method of the request in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストのメソッドを変数に保存します。</target>
        </trans-unit>
        <trans-unit id="047219316e77e34566358106fcfe3d1d2d36a8a4" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request &lt;code&gt;integrity&lt;/code&gt; value in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストの &lt;code&gt;integrity&lt;/code&gt; 値を変数に保存します。</target>
        </trans-unit>
        <trans-unit id="46ec4b615ea56657916ea54950d286e832c9b90c" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request &lt;code&gt;redirect&lt;/code&gt; value in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストの &lt;code&gt;redirect&lt;/code&gt; 値を変数に保存します。</target>
        </trans-unit>
        <trans-unit id="5271e44768600db81781e8e63fb680a7e0a11ae4" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request credentials in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストの認証情報を変数に保存します。</target>
        </trans-unit>
        <trans-unit id="e497b0a8e103f4b14c38c2c3214304e313b28efe" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request headers in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストヘッダーを変数に保存します。</target>
        </trans-unit>
        <trans-unit id="b81550d707e6017872865cc14baddebf7ce3d17b" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request mode in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しい要求を作成し（スクリプトと同じディレクトリにあるイメージファイルの場合）、要求モードを変数に保存します。</target>
        </trans-unit>
        <trans-unit id="89a843eb07910b2ff896f7f83b80b2a3442e2c69" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request referrer in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しい要求を作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、要求リファラーを変数に保存します。</target>
        </trans-unit>
        <trans-unit id="94dc59db46b69d55a1258db2220fd9408467cd5d" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request referrer policy in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにあるイメージファイルの場合）、リクエストリファラーポリシーを変数に保存します。</target>
        </trans-unit>
        <trans-unit id="cb05d02bfd17a04454879b1e41ac2480db3aa891" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the request's destination:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストの宛先を保存します。</target>
        </trans-unit>
        <trans-unit id="bac1c73ce2c6e044a2258e3a144ec58e0a59af55" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt; constructor (for an image file in the same directory as the script), then save the url of the request in a variable:</source>
          <target state="translated">次のスニペットでは、&lt;a href=&quot;request&quot;&gt; &lt;code&gt;Request.Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用して新しい要求を作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、要求のURLを変数に保存します。</target>
        </trans-unit>
        <trans-unit id="2df97c2abfe2cd3b96a48bed84dcd9b3ae61a78f" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;code&gt;&lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; constructor (for an image file in the same directory as the script), then clone the request.</source>
          <target state="translated">次のスニペットでは、 &lt;code&gt;&lt;a href=&quot;request&quot;&gt;&lt;code&gt;Request.Request()&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; コンストラクタを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにあるイメージファイルの場合）、リクエストを複製します。</target>
        </trans-unit>
        <trans-unit id="05be4f8cd3d08c8dd5e9bd42521389487107b774" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;code&gt;Request()&lt;/code&gt; constructor (for an image file in the same directory as the script), then return some property values of the request:</source>
          <target state="translated">次のスニペットでは、 &lt;code&gt;Request()&lt;/code&gt; コンストラクターを使用して新しいリクエストを作成し（スクリプトと同じディレクトリにある画像ファイルの場合）、リクエストのいくつかのプロパティ値を返します。</target>
        </trans-unit>
        <trans-unit id="c5a050a87a9317524698c10863ce25e61d3b8f3c" translate="yes" xml:space="preserve">
          <source>In the following snippet, we create a new request using the &lt;code&gt;Request()&lt;/code&gt; constructor with some initial data and body content for an api request which need a body payload:</source>
          <target state="translated">次のスニペットでは、ボディペイロードを必要とするAPIリクエストの初期データとボディコンテンツを含む &lt;code&gt;Request()&lt;/code&gt; コンストラクターを使用して、新しいリクエストを作成します。</target>
        </trans-unit>
        <trans-unit id="9db0b32bd283d4e2b68536621d346008c46ee4ae" translate="yes" xml:space="preserve">
          <source>In the future, if neither &lt;code&gt;audioCapabilities&lt;/code&gt; nor &lt;code&gt;videoCapabilities&lt;/code&gt; is specified in the &lt;code&gt;supportedConfigurations&lt;/code&gt;, a &lt;code&gt;NotSupported&lt;/code&gt; exception will be thrown.</source>
          <target state="translated">どちらの場合は将来的には、 &lt;code&gt;audioCapabilities&lt;/code&gt; も &lt;code&gt;videoCapabilities&lt;/code&gt; がで指定され &lt;code&gt;supportedConfigurations&lt;/code&gt; 、 &lt;code&gt;NotSupported&lt;/code&gt; 例外がスローされます。</target>
        </trans-unit>
        <trans-unit id="7e51f1e5e05401da9b84fce6191bdd16901080f3" translate="yes" xml:space="preserve">
          <source>In the future, service workers will be able to do a number of other useful things for the web platform that will bring it closer towards native app viability. Interestingly, other specifications can and will start to make use of the service worker context, for example:</source>
          <target state="translated">将来的には、サービスワーカーはウェブプラットフォームをネイティブアプリの実現可能性に近づけるために、他にも多くの便利なことができるようになるでしょう。興味深いことに、他の仕様でもサービスワーカーのコンテキストを利用することができますし、利用を開始する予定です。</target>
        </trans-unit>
        <trans-unit id="f50f83c09ccffe7e16fac729e5c41ab3340af1e3" translate="yes" xml:space="preserve">
          <source>In the general case, however, it's safe to simply think of this as the bounds rectangle of the target element.</source>
          <target state="translated">しかし、一般的なケースでは、これは単純にターゲット要素の境界の矩形と考えるのが無難です。</target>
        </trans-unit>
        <trans-unit id="166e236e27479f3359db19347c47ab1e24e726ea" translate="yes" xml:space="preserve">
          <source>In the image below, the red outline represents a clipping region shaped like a star. Only those parts of the checkerboard pattern that are within the clipping region get drawn.</source>
          <target state="translated">下の画像では、赤い輪郭が星の形をしたクリッピング領域を表しています。市松模様の中でクリッピング領域内にある部分だけが描画されます。</target>
        </trans-unit>
        <trans-unit id="d70633f113da8640ad30f56a1fbd952af0f8b1d7" translate="yes" xml:space="preserve">
          <source>In the last chapter we made some &lt;a href=&quot;basic_animations&quot;&gt;basic animations&lt;/a&gt; and got to know ways to get things moving. In this part we will have a closer look at the motion itself and are going to add some physics to make our animations more advanced.</source>
          <target state="translated">前の章では、いくつかの&lt;a href=&quot;basic_animations&quot;&gt;基本的なアニメーション&lt;/a&gt;を作成し、物事を動かす方法を学びました。この部分では、モーション自体を詳しく見ていき、アニメーションをより高度にするためにいくつかの物理を追加します。</target>
        </trans-unit>
        <trans-unit id="80221b0d9d8d53e433ca3a37f0d52488ebb331c6" translate="yes" xml:space="preserve">
          <source>In the latest version of the box demo the &lt;code&gt;computeSimpleProjectionMatrix()&lt;/code&gt; method has been replaced with the &lt;code&gt;computePerspectiveMatrix()&lt;/code&gt; method.</source>
          <target state="translated">デモボックスの最新バージョンでは &lt;code&gt;computeSimpleProjectionMatrix()&lt;/code&gt; メソッドに置き換えられました &lt;code&gt;computePerspectiveMatrix()&lt;/code&gt; メソッド。</target>
        </trans-unit>
        <trans-unit id="aca7779931f5cbdb5fc3ba8626ff7f5e34f21e93" translate="yes" xml:space="preserve">
          <source>In the main page of the demo, we have a simple form with a text input for entering messages to be sent to an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;. We also have a paragraph which we will use later on to display confirmation messages that we will receive back from the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">デモのメインページには、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;に送信されるメッセージを入力するためのテキスト入力を備えたシンプルなフォームがあります。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;から受信する確認メッセージを表示するために後で使用する段落もあります。</target>
        </trans-unit>
        <trans-unit id="a52efceb8351056ff1daf867ac5e1b4160814385" translate="yes" xml:space="preserve">
          <source>In the main script, &lt;code&gt;onmessage&lt;/code&gt; would have to be called on a &lt;code&gt;Worker object&lt;/code&gt;, whereas inside the worker script you just need &lt;code&gt;onmessage&lt;/code&gt; because the worker is effectively the global scope (&lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt;&lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">メインスクリプトでは、 &lt;code&gt;onmessage&lt;/code&gt; を &lt;code&gt;Worker object&lt;/code&gt; で &lt;code&gt;onmessage&lt;/code&gt; 必要がありますが、ワーカースクリプトではワーカーが事実上グローバルスコープ（&lt;a href=&quot;../dedicatedworkerglobalscope&quot;&gt; &lt;code&gt;DedicatedWorkerGlobalScope&lt;/code&gt; &lt;/a&gt;）であるため、onmessageが必要です。</target>
        </trans-unit>
        <trans-unit id="1b552ae71a5217f0ad239529ae236a44c5cd6279" translate="yes" xml:space="preserve">
          <source>In the main window, when it's time to open the panels, code like the following is used.</source>
          <target state="translated">メインウィンドウでは、パネルを開くときに以下のようなコードを使用します。</target>
        </trans-unit>
        <trans-unit id="2caed150184b39aaa18dc62af2691d1ffc3fcbcd" translate="yes" xml:space="preserve">
          <source>In the next section we'll take this step of copying Z into the w slot and turn it into a matrix.</source>
          <target state="translated">次のセクションでは、このステップでZをwスロットにコピーして行列にしてみましょう。</target>
        </trans-unit>
        <trans-unit id="a865ee829a3275fb2e2d62b456bffac6a8f483ca" translate="yes" xml:space="preserve">
          <source>In the original, we only passed in a URL to an image we wanted to load. In this version, we pass in a JSON fragment containing all the data for a single image (see what they look like in &lt;a href=&quot;https://github.com/mdn/sw-test/blob/gh-pages/image-list.js&quot;&gt;image-list.js&lt;/a&gt;). This is because all the data for each promise resolve has to be passed in with the promise, as it is asynchronous. If you just passed in the url, and then tried to access the other items in the JSON separately when the &lt;code&gt;for()&lt;/code&gt; loop is being iterated through later on, it wouldn&amp;rsquo;t work, as the promise wouldn&amp;rsquo;t resolve at the same time as the iterations are being done (that is a synchronous process.)</source>
          <target state="translated">オリジナルでは、ロードしたい画像へのURLのみを渡しました。このバージョンでは、1つの画像のすべてのデータを含むJSONフラグメントを渡します（&lt;a href=&quot;https://github.com/mdn/sw-test/blob/gh-pages/image-list.js&quot;&gt;image-list.js&lt;/a&gt;でどのように表示されるかを確認してください）。これは、非同期であるため、promiseの解決ごとにすべてのデータをpromiseとともに渡す必要があるためです。単にURLを渡して、後で &lt;code&gt;for()&lt;/code&gt; ループが繰り返されるときにJSONの他のアイテムに個別にアクセスしようとした場合、promiseは同時に解決されないため、機能しません。反復が行われているとき（同期プロセスです）。</target>
        </trans-unit>
        <trans-unit id="7ca9e228ce8cdc14458ead88cc18d84b81932129" translate="yes" xml:space="preserve">
          <source>In the past the &lt;a href=&quot;../request/url&quot;&gt;&lt;code&gt;FetchEvent.request.url&lt;/code&gt;&lt;/a&gt; was used as the final URL in all cases. The provided &lt;a href=&quot;../response/url&quot;&gt;&lt;code&gt;Response.url&lt;/code&gt;&lt;/a&gt; was effectively ignored.</source>
          <target state="translated">以前は、&lt;a href=&quot;../request/url&quot;&gt; &lt;code&gt;FetchEvent.request.url&lt;/code&gt; &lt;/a&gt;がすべての場合に最終URLとして使用されていました。提供された&lt;a href=&quot;../response/url&quot;&gt; &lt;code&gt;Response.url&lt;/code&gt; &lt;/a&gt;は事実上無視されました。</target>
        </trans-unit>
        <trans-unit id="2afef193946887224bf55fa913f26ccd4e5fc44a" translate="yes" xml:space="preserve">
          <source>In the past we would resolve the relative URL against the current global, for example:</source>
          <target state="translated">以前は、相対 URL を現在のグローバルに対して解決していました。</target>
        </trans-unit>
        <trans-unit id="efb794add570268a52fda49abf02c1b035d242cb" translate="yes" xml:space="preserve">
          <source>In the past, when you called the &lt;code&gt;window&lt;/code&gt; object's &lt;code&gt;close()&lt;/code&gt; method directly, rather than calling &lt;code&gt;close()&lt;/code&gt; on a &lt;code&gt;window&lt;/code&gt;&lt;strong&gt;instance&lt;/strong&gt;, the browser closed the frontmost window, whether your script created that window or not. This is no longer the case; for security reasons, scripts are no longer allowed to close windows they didn't open. (Firefox 46.0.1: scripts can not close windows, they had not opened)</source>
          <target state="translated">以前は、 &lt;code&gt;window&lt;/code&gt; &lt;strong&gt;インスタンス&lt;/strong&gt;で &lt;code&gt;close()&lt;/code&gt; を呼び出すのではなく、 &lt;code&gt;window&lt;/code&gt; オブジェクトの &lt;code&gt;close()&lt;/code&gt; メソッドを直接呼び出すと、スクリプトがそのウィンドウを作成したかどうかに関係なく、ブラウザは最前面のウィンドウを閉じました。これはもう当てはまりません。セキュリティ上の理由から、スクリプトは開いていないウィンドウを閉じることができなくなりました。 （Firefox 46.0.1：スクリプトはウィンドウを閉じることができず、開いていませんでした）&lt;strong&gt;&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="2b6cc36a3ecf8cc588fba453375e70e27575f7a4" translate="yes" xml:space="preserve">
          <source>In the previous example, &lt;code&gt;sp1&lt;/code&gt; could be inserted after &lt;code&gt;sp2&lt;/code&gt; using:</source>
          <target state="translated">前の例では、次を使用して &lt;code&gt;sp2&lt;/code&gt; の後に &lt;code&gt;sp1&lt;/code&gt; を挿入できます。</target>
        </trans-unit>
        <trans-unit id="f1770efa08cde8987ce6c2d74d34f1b92eb66dca" translate="yes" xml:space="preserve">
          <source>In the second case, the event listeners only propagate as far as the &lt;code&gt;&amp;lt;closed-shadow&amp;gt;&lt;/code&gt; element itself, but not to the nodes inside the shadow boundary.</source>
          <target state="translated">2番目のケースでは、イベントリスナーは &lt;code&gt;&amp;lt;closed-shadow&amp;gt;&lt;/code&gt; 要素自体までしか伝播せず、シャドウ境界内のノードには伝播しません。</target>
        </trans-unit>
        <trans-unit id="6d34b828fa7e048616d1778e2b694e7b26f1d8fe" translate="yes" xml:space="preserve">
          <source>In the second code block, we wait for a &lt;a href=&quot;fetchevent&quot;&gt;&lt;code&gt;FetchEvent&lt;/code&gt;&lt;/a&gt; to fire. We construct a custom response like so:</source>
          <target state="translated">2番目のコードブロックでは、&lt;a href=&quot;fetchevent&quot;&gt; &lt;code&gt;FetchEvent&lt;/code&gt; &lt;/a&gt;が発生するのを待ちます。次のようなカスタム応答を作成します。</target>
        </trans-unit>
        <trans-unit id="9b53a7e8e7ffacee8a73ee954e83ca19d9ff6544" translate="yes" xml:space="preserve">
          <source>In the second gradient, we didn't assign the starting color (at position 0.0) since it wasn't strictly necessary, because it will automatically assume the color of the next color stop. Therefore, assigning the black color at position 0.5 automatically makes the gradient, from the start to this stop, black.</source>
          <target state="translated">2つ目のグラデーションでは、開始色 (0.0の位置)は厳密には必要ないので割り当てませんでした。したがって、0.5の位置に黒を代入すると、グラデーションの開始色からこの停止色までが自動的に黒になります。</target>
        </trans-unit>
        <trans-unit id="b2445149813d9ee0b54a74efc28c3220ce79ac4a" translate="yes" xml:space="preserve">
          <source>In the second syntax-form however, there is no &lt;code&gt;oldChild&lt;/code&gt; reference kept, so assuming your code has not kept any other reference to the node elsewhere, it will immediately become unusable and irretrievable, and will usually be &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;automatically deleted&lt;/a&gt; from memory after a short time.</source>
          <target state="translated">ただし、2番目の構文形式では &lt;code&gt;oldChild&lt;/code&gt; 参照は保持されないため、コードが他のノードへの参照を保持していないとすると、コードはすぐに使用できなくなり、回復できなくなり、通常は短時間で&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Memory_Management&quot;&gt;自動的に&lt;/a&gt;メモリから削除されます。</target>
        </trans-unit>
        <trans-unit id="0529bf6c0eb26ec1762e946292358a808cf01177" translate="yes" xml:space="preserve">
          <source>In the shader each position vertex is first transformed into a homogeneous coordinate (vec4), and then multiplied against the model matrix.</source>
          <target state="translated">シェーダでは、各位置頂点が最初に均質座標(vec4)に変換され、モデル行列に対して乗算されます。</target>
        </trans-unit>
        <trans-unit id="fe789ec50d5a4e802e089b2d79bf7730f6c4653a" translate="yes" xml:space="preserve">
          <source>In the worker thread, workers may close themselves by calling their own &lt;a href=&quot;../workerglobalscope&quot;&gt;&lt;code&gt;close&lt;/code&gt;&lt;/a&gt; method:</source>
          <target state="translated">ワーカースレッドでは、ワーカーは独自の&lt;a href=&quot;../workerglobalscope&quot;&gt; &lt;code&gt;close&lt;/code&gt; &lt;/a&gt;メソッドを呼び出して自分自身を閉じることができます。</target>
        </trans-unit>
        <trans-unit id="747faaac8adbae729530d9fafd2e204101332993" translate="yes" xml:space="preserve">
          <source>In the worker, we can respond when the message is received by writing an event handler block like this (&lt;a href=&quot;https://github.com/mdn/simple-web-worker/blob/gh-pages/worker.js&quot;&gt;worker.js&lt;/a&gt;):</source>
          <target state="translated">ワーカーでは、次のようなイベントハンドラーブロック（&lt;a href=&quot;https://github.com/mdn/simple-web-worker/blob/gh-pages/worker.js&quot;&gt;worker.js&lt;/a&gt;）を記述することで、メッセージを受信したときに応答できます。</target>
        </trans-unit>
        <trans-unit id="27ee606f5a7096b9af4937eaa2543bd000f624c9" translate="yes" xml:space="preserve">
          <source>In their most basic forms, both create() and get() receive a very large random number called a challenge from the server and they return the challenge signed by the private key back to the server. This proves to the server that a user is in possession of the private key required for authentication without revealing any secrets over the network.</source>
          <target state="translated">最も基本的な形式では、 create()と get()の両方ともサーバからチャレンジと呼ばれる非常に大きな乱数を受け取り、 秘密鍵で署名されたチャレンジをサーバに返します。これにより、ユーザが認証に必要な秘密鍵を持っていることをサーバに証明します。</target>
        </trans-unit>
        <trans-unit id="4df9571818d6d981dd291e20430935363e55c7e1" translate="yes" xml:space="preserve">
          <source>In these cases, a recursive &lt;code&gt;setTimeout()&lt;/code&gt; pattern is preferred:</source>
          <target state="translated">これらの場合、再帰的な &lt;code&gt;setTimeout()&lt;/code&gt; パターンが推奨されます。</target>
        </trans-unit>
        <trans-unit id="e039aad2c0155f950651a6dba4c3ff8927bffa24" translate="yes" xml:space="preserve">
          <source>In these environments, unfortunately, there's no way for web content to tell the difference between auto-repeating keys and keys that are just being pressed repeatedly.</source>
          <target state="translated">このような環境では、残念ながら、自動リピートキーとただ繰り返し押しているだけのキーの違いをウェブコンテンツで見分ける方法はありません。</target>
        </trans-unit>
        <trans-unit id="5b1b648527abedf64cd55d6727a0c77588c433e6" translate="yes" xml:space="preserve">
          <source>In these reference articles, you'll find the fundamental information you'll need to know about each of the interfaces and events that make up the Media Capture and Streams API.</source>
          <target state="translated">これらのリファレンス記事では、Media Capture and Streams API を構成する各インターフェースやイベントについて知っておく必要のある基本的な情報を紹介しています。</target>
        </trans-unit>
        <trans-unit id="e918402b5cbdf8a6c4b40b28955c38a6e57c2da7" translate="yes" xml:space="preserve">
          <source>In this WebGL example, we create a canvas and within it render a rotating square using WebGL. The coordinate system we use to represent our scene is the same as the canvas's coordinate system. That is, (0, 0) is at the top-left corner and the bottom-right corner is at (600, 460).</source>
          <target state="translated">この WebGL の例では、キャンバスを作成し、その中で WebGL を使用して回転する正方形をレンダリングします。シーンを表現するために使用する座標系は、キャンバスの座標系と同じです。つまり、(0,0)が左上、(600,460)が右下です。</target>
        </trans-unit>
        <trans-unit id="d6c5f2cb2ab21a4fb634fdc399fb6ca277e9b128" translate="yes" xml:space="preserve">
          <source>In this application, a pointer move is represented by the target's border being set to &lt;code&gt;dashed&lt;/code&gt; to provide a clear visual indication that the element has received this event.</source>
          <target state="translated">このアプリケーションでは、ポインターの移動は、ターゲットの境界が &lt;code&gt;dashed&lt;/code&gt; に設定されていることによって表され、要素がこのイベントを受け取ったことを明確に視覚的に示します。</target>
        </trans-unit>
        <trans-unit id="d98f37ad364ba5fdee4fa5e8cf09ef457d4aa33f" translate="yes" xml:space="preserve">
          <source>In this application, this handler is also used for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointercancel&quot;&gt;pointercancel&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointerleave&quot;&gt;pointerleave&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointerout&quot;&gt;pointerout&lt;/a&gt;&lt;/code&gt; events.</source>
          <target state="translated">このアプリケーションでは、このハンドラも使用され &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointercancel&quot;&gt;pointercancel&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointerleave&quot;&gt;pointerleave&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/pointerout&quot;&gt;pointerout&lt;/a&gt;&lt;/code&gt; イベント。</target>
        </trans-unit>
        <trans-unit id="d6a8ded075cda7fc6015e230452248e4bbb967c9" translate="yes" xml:space="preserve">
          <source>In this application, when a pointer is placed down on an element, the background color of the element changes, depending on the number of active touch points the element has. See the &lt;code&gt;&lt;a href=&quot;#Update_background_color&quot;&gt;update_background&lt;/a&gt;&lt;/code&gt; function for more details about the color changes.</source>
          <target state="translated">このアプリケーションでは、要素の上にポインターを置くと、要素が持つアクティブなタッチポイントの数に応じて、要素の背景色が変化します。色の変更の詳細については、 &lt;code&gt;&lt;a href=&quot;#Update_background_color&quot;&gt;update_background&lt;/a&gt;&lt;/code&gt; 関数を参照してください。</target>
        </trans-unit>
        <trans-unit id="4370ea5ea1c8d368335f2e8e67a642d611fb0861" translate="yes" xml:space="preserve">
          <source>In this article is published a library of ours whose aims are:</source>
          <target state="translated">この記事では、その目的がある私たちのライブラリを公開しています。</target>
        </trans-unit>
        <trans-unit id="b041da60b635adafbe970738766e44924736c766" translate="yes" xml:space="preserve">
          <source>In this article we'll explore the basics of using this technology.</source>
          <target state="translated">この記事では、この技術を使う上での基本を探っていきます。</target>
        </trans-unit>
        <trans-unit id="1fba83f0d7f521e3a9c91ddf9e8cef09aa7106fe" translate="yes" xml:space="preserve">
          <source>In this article, we will further enhance the &lt;a href=&quot;https://mdn-samples.mozilla.org/s/websocket-chat&quot;&gt;WebSocket chat&lt;/a&gt; first created as part of our WebSocket documentation (this article link is forthcoming; it isn't actually online yet) to support opening a two-way video call between users. You can &lt;a href=&quot;https://webrtc-from-chat.glitch.me/&quot;&gt;try out this example on Glitch&lt;/a&gt;, and you can &lt;a href=&quot;https://glitch.com/edit/#!/remix/webrtc-from-chat&quot;&gt;remix the example&lt;/a&gt; to experiment with it as well. You can also &lt;a href=&quot;https://github.com/mdn/samples-server/tree/master/s/webrtc-from-chat&quot;&gt;look at the full project&lt;/a&gt; on GitHub.</source>
          <target state="translated">この記事では、WebSocketドキュメントの一部として最初に作成された&lt;a href=&quot;https://mdn-samples.mozilla.org/s/websocket-chat&quot;&gt;WebSocketチャット&lt;/a&gt;（この記事のリンクは近日公開、実際にはまだオンラインではありません）をさらに強化して、ユーザー間の双方向ビデオ通話を開始できるようにします。&lt;a href=&quot;https://webrtc-from-chat.glitch.me/&quot;&gt;この例をGlitch&lt;/a&gt;で試すことができます。また&lt;a href=&quot;https://glitch.com/edit/#!/remix/webrtc-from-chat&quot;&gt;、例&lt;/a&gt;をリミックスして実験することもできます。GitHubで&lt;a href=&quot;https://github.com/mdn/samples-server/tree/master/s/webrtc-from-chat&quot;&gt;プロジェクト全体を確認&lt;/a&gt;することもできます。</target>
        </trans-unit>
        <trans-unit id="d1b40ede08c4f8be0f417f21def083ee10592797" translate="yes" xml:space="preserve">
          <source>In this basic example, an &lt;code&gt;EventSource&lt;/code&gt; is created to receive events from the server; a page with the name &lt;code&gt;&quot;sse.php&quot;&lt;/code&gt; is responsible for generating the events.</source>
          <target state="translated">この基本的な例では、サーバーからイベントを受信するために &lt;code&gt;EventSource&lt;/code&gt; が作成されます。 &lt;code&gt;&quot;sse.php&quot;&lt;/code&gt; という名前のページがイベントの生成を担当します。</target>
        </trans-unit>
        <trans-unit id="6a7d6c348e32849c67816ae957749276867dc54b" translate="yes" xml:space="preserve">
          <source>In this basic example, the first element in the &lt;a href=&quot;../documentfragment&quot;&gt;&lt;code&gt;DocumentFragment&lt;/code&gt;&lt;/a&gt; with the class &quot;&lt;code&gt;myclass&lt;/code&gt;&quot; is returned:</source>
          <target state="translated">この基本的な例では、クラス &quot; &lt;code&gt;myclass&lt;/code&gt; &quot;を持つ&lt;a href=&quot;../documentfragment&quot;&gt; &lt;code&gt;DocumentFragment&lt;/code&gt; の&lt;/a&gt;最初の要素が返されます。</target>
        </trans-unit>
        <trans-unit id="361df78b941d4fd8a47090d14f97a69c047a8d77" translate="yes" xml:space="preserve">
          <source>In this case, every image has a fixed width and height, as does the frame that's drawn around them. You could enhance the script so that it uses the image's width and height to make the frame fit perfectly around it.</source>
          <target state="translated">この場合、すべての画像の幅と高さは固定されており、その周りに描かれるフレームも固定されています。画像の幅と高さを利用して、その周りに枠がぴったりと収まるようにスクリプトを強化することができます。</target>
        </trans-unit>
        <trans-unit id="276ffafaadc51c838b49947876ba4aad8b0bd36a" translate="yes" xml:space="preserve">
          <source>In this case, the constraints indicate that any values are fine for nearly all properties, but that a standard high definition (HD) video size is desired, with the standard 16:9 aspect ratio. There's no guarantee that the resulting track will match any of these, but the user agent should do its best to match as many as possible.</source>
          <target state="translated">この場合、制約は、ほぼすべてのプロパティに対してどのような値でも構わないことを示していますが、標準の16:9のアスペクト比の標準的な高精細(HD)ビデオサイズが望まれています。結果として得られるトラックがこれらのどれにもマッチするという保証はありませんが、ユーザエージェントは、可能な限り多くのものにマッチするように最善を尽くすべきです。</target>
        </trans-unit>
        <trans-unit id="031f4c135971e59b7fae739ab01bab44a4cc4c16" translate="yes" xml:space="preserve">
          <source>In this case, the data value is &quot;Text to drag&quot; and is of the format &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#text&quot;&gt;text/plain&lt;/a&gt;.</source>
          <target state="translated">この場合、データ値は「ドラッグするテキスト」であり、フォーマットは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#text&quot;&gt;text / plain&lt;/a&gt;です。</target>
        </trans-unit>
        <trans-unit id="4cad29bf51cb46269d006567b6429c9032b4f4f8" translate="yes" xml:space="preserve">
          <source>In this case, the database will already have the object stores from the previous version of the database, so you do not have to create these object stores again. You only need to create any new object stores, or delete object stores from the previous version that are no longer needed. If you need to change an existing object store (e.g., to change the &lt;code&gt;keyPath&lt;/code&gt;), then you must delete the old object store and create it again with the new options. (Note that this will delete the information in the object store! If you need to save that information, you should read it out and save it somewhere else before upgrading the database.)</source>
          <target state="translated">この場合、データベースには以前のバージョンのデータベースのオブジェクトストアが既にあるため、これらのオブジェクトストアを再度作成する必要はありません。新しいオブジェクトストアを作成するか、不要になった以前のバージョンからオブジェクトストアを削除するだけです。既存のオブジェクトストアを変更する必要がある場合（たとえば、 &lt;code&gt;keyPath&lt;/code&gt; を変更する場合）は、古いオブジェクトストアを削除して、新しいオプションで再度作成する必要があります。（これにより、オブジェクトストア内の情報が削除されることに注意してください。その情報を保存する必要がある場合は、データベースをアップグレードする前に、情報を読み取り、別の場所に保存する必要があります。）</target>
        </trans-unit>
        <trans-unit id="57eec1ad1f4b038a24465f660119efe22c851150" translate="yes" xml:space="preserve">
          <source>In this case, the file list passed to the &lt;code&gt;handleFiles()&lt;/code&gt; function contains one &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object for each file the user selected.</source>
          <target state="translated">この場合、 &lt;code&gt;handleFiles()&lt;/code&gt; 関数に渡されるファイルリストには、ユーザーが選択したファイルごとに1つの&lt;a href=&quot;../file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;オブジェクトが含まれます。</target>
        </trans-unit>
        <trans-unit id="f699d83d33360e670c86e02d2f0b476f5ea229fa" translate="yes" xml:space="preserve">
          <source>In this case, we're simply returning white every time, since we're just drawing a white square, with no lighting in use.</source>
          <target state="translated">この場合、照明を使わずに白い四角を描いているだけなので、毎回白を返しているだけです。</target>
        </trans-unit>
        <trans-unit id="a4d2e2bb48a9b84c4673956d3f1c7f44d996cb8b" translate="yes" xml:space="preserve">
          <source>In this case, we've offset the starting point slightly from the end point to achieve a spherical 3D effect. It's best to try to avoid letting the inside and outside circles overlap because this results in strange effects which are hard to predict.</source>
          <target state="translated">今回は、始点を終点から少しずらして、球状の立体感を出すようにしています。内側の円と外側の円が重ならないようにした方が良いでしょう。</target>
        </trans-unit>
        <trans-unit id="18cbfec0be83d5c96de48b42542e47b7ad14af8c" translate="yes" xml:space="preserve">
          <source>In this code snippet we wait for an &lt;a href=&quot;../serviceworkerglobalscope/onactivate&quot;&gt;&lt;code&gt;activate&lt;/code&gt;&lt;/a&gt; event, and then run a &lt;a href=&quot;../extendableevent/waituntil&quot;&gt;&lt;code&gt;waitUntil()&lt;/code&gt;&lt;/a&gt; block that clears up any old, unused caches before a new service worker is activated. Here we have a whitelist containing the names of the caches we want to keep. We return the keys of the caches in the &lt;a href=&quot;../cachestorage&quot;&gt;&lt;code&gt;CacheStorage&lt;/code&gt;&lt;/a&gt; object using &lt;code&gt;keys()&lt;/code&gt;, then check each key to see if it is in the whitelist. If not, we delete it using &lt;a href=&quot;delete&quot;&gt;&lt;code&gt;CacheStorage.delete&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このコードスニペットでは、&lt;a href=&quot;../serviceworkerglobalscope/onactivate&quot;&gt; &lt;code&gt;activate&lt;/code&gt; &lt;/a&gt;イベントを待ってから、新しいサービスワーカーがアクティブ化される前に、古い未使用のキャッシュをクリアする&lt;a href=&quot;../extendableevent/waituntil&quot;&gt; &lt;code&gt;waitUntil()&lt;/code&gt; &lt;/a&gt;ブロックを実行します。ここに、保持したいキャッシュの名前を含むホワイトリストがあります。 &lt;code&gt;keys()&lt;/code&gt; を使用して&lt;a href=&quot;../cachestorage&quot;&gt; &lt;code&gt;CacheStorage&lt;/code&gt; &lt;/a&gt;オブジェクトのキャッシュのキーを返し、各キーをチェックしてホワイトリストにあるかどうかを確認します。そうでない場合は、&lt;a href=&quot;delete&quot;&gt; &lt;code&gt;CacheStorage.delete&lt;/code&gt; &lt;/a&gt;を使用して削除します。</target>
        </trans-unit>
        <trans-unit id="f7b237c5b5122f635999f0f232a6e34ae7685ddc" translate="yes" xml:space="preserve">
          <source>In this code snippet we wait for an activate event, and then run a &lt;a href=&quot;../extendableevent/waituntil&quot;&gt;&lt;code&gt;waitUntil()&lt;/code&gt;&lt;/a&gt; block that clears up any old, unused caches before a new service worker is activated. Here we have a whitelist containing the name of the cache we want to keep. We return the keys of the caches in the &lt;a href=&quot;../cachestorage&quot;&gt;&lt;code&gt;CacheStorage&lt;/code&gt;&lt;/a&gt; object using &lt;a href=&quot;keys&quot;&gt;&lt;code&gt;CacheStorage.keys&lt;/code&gt;&lt;/a&gt;, then check each key to see if it is in the whitelist. If not, we delete it using &lt;code&gt;delete()&lt;/code&gt;.</source>
          <target state="translated">このコードスニペットでは、アクティブ化イベントを待ってから、新しいサービスワーカーがアクティブ化される前に、古い未使用のキャッシュをクリアする&lt;a href=&quot;../extendableevent/waituntil&quot;&gt; &lt;code&gt;waitUntil()&lt;/code&gt; &lt;/a&gt;ブロックを実行します。ここに、保持したいキャッシュの名前を含むホワイトリストがあります。私たちは中にキャッシュのキーを返す&lt;a href=&quot;../cachestorage&quot;&gt; &lt;code&gt;CacheStorage&lt;/code&gt; のを&lt;/a&gt;使用してオブジェクト&lt;a href=&quot;keys&quot;&gt; &lt;code&gt;CacheStorage.keys&lt;/code&gt; を&lt;/a&gt;、その後、それがホワイトリストにあるかどうかを確認するために、各キーを確認してください。そうでない場合は、 &lt;code&gt;delete()&lt;/code&gt; を使用して削除します。</target>
        </trans-unit>
        <trans-unit id="729125e1bb8d7b3b127e10d27b0d336716742c36" translate="yes" xml:space="preserve">
          <source>In this code snippet, &lt;code&gt;enumerateDevices()&lt;/code&gt; is used to examine the available input devices, locate those which are audio input devices, and create &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option&quot;&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;&lt;/a&gt; elements that are then added to a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element representing an input source picker.</source>
          <target state="translated">このコードスニペットでは、 &lt;code&gt;enumerateDevices()&lt;/code&gt; を使用して、使用可能な入力デバイスを調べ、オーディオ入力デバイスであるデバイスを特定し、入力&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/option&quot;&gt; &lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt; &lt;/a&gt;表す&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt; &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に追加される&amp;lt;option&amp;gt;要素を作成します。</target>
        </trans-unit>
        <trans-unit id="50899138f59205c98ab66e512d5085dc24e9011d" translate="yes" xml:space="preserve">
          <source>In this code, &lt;code&gt;modifyText()&lt;/code&gt; is a listener for &lt;code&gt;click&lt;/code&gt; events registered using &lt;code&gt;addEventListener()&lt;/code&gt;. A click anywhere in the table bubbles up to the handler and runs &lt;code&gt;modifyText()&lt;/code&gt;.</source>
          <target state="translated">このコードでは、 &lt;code&gt;modifyText()&lt;/code&gt; は &lt;code&gt;addEventListener()&lt;/code&gt; を使用して登録された &lt;code&gt;click&lt;/code&gt; イベントのリスナーです。テーブル内の任意の場所をクリックすると、ハンドラーに &lt;code&gt;modifyText()&lt;/code&gt; が実行されます。</target>
        </trans-unit>
        <trans-unit id="70c16c5e0a79aa8b20c0ac21843dfc5a0f4947c7" translate="yes" xml:space="preserve">
          <source>In this code, the methods &lt;code&gt;checkAddress()&lt;/code&gt; and &lt;code&gt;checkShipping()&lt;/code&gt;, respectively, check the shipping address and the shipping option changes and supply in response either a &lt;a href=&quot;../paymentdetailsupdate&quot;&gt;&lt;code&gt;PaymentDetailsUpdate&lt;/code&gt;&lt;/a&gt; object or a promise to return one; this object contains the fields in the &lt;a href=&quot;../paymentresponse&quot;&gt;&lt;code&gt;PaymentResponse&lt;/code&gt;&lt;/a&gt; which have been or need to be changed.</source>
          <target state="translated">このコードでは、メソッド &lt;code&gt;checkAddress()&lt;/code&gt; と &lt;code&gt;checkShipping()&lt;/code&gt; がそれぞれ配送先住所と配送オプションの変更を確認し、&lt;a href=&quot;../paymentdetailsupdate&quot;&gt; &lt;code&gt;PaymentDetailsUpdate&lt;/code&gt; &lt;/a&gt;オブジェクトまたは返却する約束のいずれかに応答して提供します。このオブジェクトには、変更された、または変更する必要がある&lt;a href=&quot;../paymentresponse&quot;&gt; &lt;code&gt;PaymentResponse&lt;/code&gt; &lt;/a&gt;のフィールドが含まれています。</target>
        </trans-unit>
        <trans-unit id="0154f1006d012823f6a39fe62981f3a8df912997" translate="yes" xml:space="preserve">
          <source>In this code, the offer is created, and once successful, the local end of the &lt;a href=&quot;../rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; is configured to match by passing the offer (which is represented using an object conforming to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescriptionInit&quot;&gt;&lt;code&gt;RTCSessionDescriptionInit&lt;/code&gt;&lt;/a&gt;) into &lt;a href=&quot;setlocaldescription&quot;&gt;&lt;code&gt;setLocalDescription()&lt;/code&gt;&lt;/a&gt;. Once that's done, the offer is sent to the remote system over the signaling channel; in this case, by using a custom function called &lt;code&gt;sendToServer()&lt;/code&gt;. The implementation of the signaling server is independent from the WebRTC specification, so it doesn't matter how the offer is sent as long as both the caller and potential receiver are using the same one.</source>
          <target state="translated">このコードでは、オファーが作成され、そして成功した後のローカルエンド&lt;a href=&quot;../rtcpeerconnection&quot;&gt; &lt;code&gt;RTCPeerConnection&lt;/code&gt; が&lt;/a&gt;（に適合するオブジェクト使用して表現されるオファー通過させることにより一致するように設定されている&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/RTCSessionDescriptionInit&quot;&gt; &lt;code&gt;RTCSessionDescriptionInit&lt;/code&gt; &lt;/a&gt;に）&lt;a href=&quot;setlocaldescription&quot;&gt; &lt;code&gt;setLocalDescription()&lt;/code&gt; &lt;/a&gt;。それが完了すると、オファーはシグナリングチャネルを介してリモートシステムに送信されます。この場合、 &lt;code&gt;sendToServer()&lt;/code&gt; というカスタム関数を使用します。シグナリングサーバーの実装はWebRTC仕様から独立しているため、発信者と潜在的な受信者の両方が同じものを使用している限り、オファーがどのように送信されるかは問題ではありません。</target>
        </trans-unit>
        <trans-unit id="acf716c5032dda34dd3bfdc3edd8d240f757ee38" translate="yes" xml:space="preserve">
          <source>In this demonstration, we build upon the previous example by replacing our static textures with the frames of an mp4 video file that's playing. This is actually pretty easy to do and fun to watch, so let's get started. You can use similar code to use any sort of data (such as a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt;&lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt;&lt;/a&gt;) as the source for your textures.</source>
          <target state="translated">このデモンストレーションでは、静的テクスチャを再生中のmp4ビデオファイルのフレームで置き換えることにより、前の例を基にしています。これは実際にはとても簡単で、見ていて楽しいので、始めましょう。同様のコードを使用して、任意の種類のデータ（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas&quot;&gt; &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; など&lt;/a&gt;）をテクスチャのソースとして使用できます。</target>
        </trans-unit>
        <trans-unit id="512ac688aaef338832699370e37eefcc02030cf3" translate="yes" xml:space="preserve">
          <source>In this document, we&amp;rsquo;ll talk about the ethical use of web push notifications. Sometimes they can eliminate frustration and annoyance, and sometimes they can cause them, and it&amp;rsquo;s up to you as a developer to make wise recommendations (and decisions) about the use of push notifications.</source>
          <target state="translated">このドキュメントでは、Webプッシュ通知の倫理的な使用について説明します。時々彼らは欲求不満と煩わしさを取り除くことができます、そして時には彼らはそれらを引き起こすことができます、そしてプッシュ通知の使用について賢明な推奨（そして決定）をするのは開発者次第です。</target>
        </trans-unit>
        <trans-unit id="31734cebb1978c995b4bd29bc19331fec01dfba4" translate="yes" xml:space="preserve">
          <source>In this example the function &lt;code&gt;refreshPopupWindow()&lt;/code&gt; calls the &lt;code&gt;reload&lt;/code&gt; method of the popup's location object to refresh its data. If the popup hasn't been opened yet or the user has closed it a new window is opened.</source>
          <target state="translated">この例では、関数 &lt;code&gt;refreshPopupWindow()&lt;/code&gt; がポップアップの位置オブジェクトの &lt;code&gt;reload&lt;/code&gt; メソッドを呼び出して、データを更新します。ポップアップがまだ開かれていないか、ユーザーが閉じている場合は、新しいウィンドウが開きます。</target>
        </trans-unit>
        <trans-unit id="a15daa80588607e4477964dfd27a2fe7e339632a" translate="yes" xml:space="preserve">
          <source>In this example three lines are drawn, each with a different value for the &lt;code&gt;lineCap&lt;/code&gt; property. Two guides to see the exact differences between the three are added. Each of these lines starts and ends exactly on these guides.</source>
          <target state="translated">この例では、3つの線が描かれ、それぞれ &lt;code&gt;lineCap&lt;/code&gt; プロパティの値が異なります。3つのガイドの正確な違いを確認するための2つのガイドが追加されています。これらの各行は、これらのガイドで正確に開始および終了します。</target>
        </trans-unit>
        <trans-unit id="99e99c59aa9f04ae82e8b51902eeb459b88d9827" translate="yes" xml:space="preserve">
          <source>In this example we are creating a marching ants effect. It is an animation technique often found in selection tools of computer graphics programs. It helps the user to distinguish the selection border from the image background by animating the border. In a later part of this tutorial, you can learn how to do this and other &lt;a href=&quot;basic_animations&quot;&gt;basic animations&lt;/a&gt;.</source>
          <target state="translated">この例では、行進アリの効果を作成しています。コンピュータグラフィックスプログラムの選択ツールによく見られるアニメーション技法です。これは、境界線をアニメーション化することにより、ユーザーが選択境界線と画像の背景を区別するのに役立ちます。このチュートリアルの後半では、この方法とその他の&lt;a href=&quot;basic_animations&quot;&gt;基本的なアニメーションの&lt;/a&gt;方法を学ぶことができます。</target>
        </trans-unit>
        <trans-unit id="23213470633aad5a46d88e3d77045d3c2aefb809" translate="yes" xml:space="preserve">
          <source>In this example we are using the &lt;a href=&quot;../../canvasrenderingcontext2d/getimagedata&quot;&gt;getImageData() &lt;/a&gt;method to display the color under the mouse cursor. For this, we need the current position of the mouse with &lt;code&gt;layerX&lt;/code&gt; and &lt;code&gt;layerY&lt;/code&gt;, then we look up the pixel data on that position in the pixel array that &lt;a href=&quot;../../canvasrenderingcontext2d/getimagedata&quot;&gt;getImageData()&lt;/a&gt; provides us. Finally, we use the array data to set a background color and a text in the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; to display the color.</source>
          <target state="translated">この例では、&lt;a href=&quot;../../canvasrenderingcontext2d/getimagedata&quot;&gt;getImageData（）&lt;/a&gt;メソッドを使用して、マウスカーソルの下に色を表示しています。そのためには、 &lt;code&gt;layerX&lt;/code&gt; と &lt;code&gt;layerY&lt;/code&gt; を使用したマウスの現在の位置が必要です。次に、&lt;a href=&quot;../../canvasrenderingcontext2d/getimagedata&quot;&gt;getImageData（）が&lt;/a&gt;提供するピクセル配列でその位置のピクセルデータを検索します。最後に、配列データを使用して背景色を設定し、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; にテキストを表示して色を表示します。</target>
        </trans-unit>
        <trans-unit id="0173f6588cd0db49687ec868bac0c846da7ae952" translate="yes" xml:space="preserve">
          <source>In this example we are using the &lt;code&gt;evenodd&lt;/code&gt; rule.</source>
          <target state="translated">この例では、 &lt;code&gt;evenodd&lt;/code&gt; ルールを使用しています。</target>
        </trans-unit>
        <trans-unit id="9de88f05f8db36432f807ddbf5990b1403a4ecb6" translate="yes" xml:space="preserve">
          <source>In this example we create a function that will apply three different transformations to the SVG element that has been clicked on. In order to do this we create a separate &lt;a href=&quot;svgtransform&quot;&gt;&lt;code&gt;SVGTransform&lt;/code&gt;&lt;/a&gt; object for each transformation -- such as &lt;code&gt;translate&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt;, and &lt;code&gt;scale&lt;/code&gt;. We apply multiple transformation by appending the transform object to the &lt;code&gt;SVGTransformList&lt;/code&gt; associated with an SVG element.</source>
          <target state="translated">この例では、クリックされたSVG要素に3つの異なる変換を適用する関数を作成します。これを行うには、 &lt;code&gt;translate&lt;/code&gt; 、 &lt;code&gt;rotate&lt;/code&gt; 、 &lt;code&gt;scale&lt;/code&gt; などの変換ごとに個別の&lt;a href=&quot;svgtransform&quot;&gt; &lt;code&gt;SVGTransform&lt;/code&gt; &lt;/a&gt;オブジェクトを作成します。SVG要素に関連付けられた &lt;code&gt;SVGTransformList&lt;/code&gt; に変換オブジェクトを追加することにより、複数の変換を適用します。</target>
        </trans-unit>
        <trans-unit id="be366d5af68084a9d740b3524dc0ea0b7e53bc44" translate="yes" xml:space="preserve">
          <source>In this example we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using &lt;code&gt;cursor.value.foo&lt;/code&gt;. For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/IDBcursor-example/&quot;&gt;IDBCursor example&lt;/a&gt; (&lt;a href=&quot;http://mdn.github.io/IDBcursor-example/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">この例では、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストアのすべてのレコードを反復処理します。カーソルでは、キーに基づいてデータを選択する必要はありません。すべてを取得できます。また、ループの各反復で、 &lt;code&gt;cursor.value.foo&lt;/code&gt; を使用して、カーソルオブジェクトの下の現在のレコードからデータを取得できることにも注意してください。完全な実用例については、&lt;a href=&quot;https://github.com/mdn/IDBcursor-example/&quot;&gt;IDBCursorの例を&lt;/a&gt;参照してください（&lt;a href=&quot;http://mdn.github.io/IDBcursor-example/&quot;&gt;例のライブを表示&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="381558f5d7cdb87126bf989084c23b7d13e9bc2b" translate="yes" xml:space="preserve">
          <source>In this example we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using &lt;code&gt;cursor.value.foo&lt;/code&gt;. For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/IDBcursor-example/&quot;&gt;IDBCursor example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/IDBcursor-example/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">この例では、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストア内のすべてのレコードを反復処理します。カーソルは、キーに基づいてデータを選択する必要はありません。すべてをつかむことができます。また、ループの各反復で、 &lt;code&gt;cursor.value.foo&lt;/code&gt; を使用して、カーソルオブジェクトの下の現在のレコードからデータを取得できることにも注意してください。完全に機能する例については、&lt;a href=&quot;https://github.com/mdn/IDBcursor-example/&quot;&gt;IDBCursorの例を&lt;/a&gt;参照してください（&lt;a href=&quot;https://mdn.github.io/IDBcursor-example/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="94eff65887bdd82101774699c3b48378b321fabe" translate="yes" xml:space="preserve">
          <source>In this example we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the value of the cursor with &lt;code&gt;cursor.value&lt;/code&gt;.</source>
          <target state="translated">この例では、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストアのすべてのレコードを反復処理します。各反復内で、カーソルの値を &lt;code&gt;cursor.value&lt;/code&gt; で記録します。</target>
        </trans-unit>
        <trans-unit id="860dfabd12474dd4d7cc2d9f1c57f37ebf422b33" translate="yes" xml:space="preserve">
          <source>In this example we define two event handler functions &amp;mdash; &lt;code&gt;onclick&lt;/code&gt; and &lt;code&gt;onauxclick&lt;/code&gt;. The former changes the color of the button background, while the latter changes the button foreground (text) color. You can see the two functions in action by trying the demo out with a multi-button mouse (&lt;a href=&quot;https://mdn.github.io/dom-examples/auxclick/&quot;&gt;see it live on GitHub&lt;/a&gt;; also &lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/auxclick/index.html&quot;&gt;see the source code&lt;/a&gt;).</source>
          <target state="translated">この例では、2つのイベントハンドラー関数（ &lt;code&gt;onclick&lt;/code&gt; および &lt;code&gt;onauxclick&lt;/code&gt; )を定義します。前者はボタンの背景の色を変更し、後者はボタンの前景（テキスト）の色を変更します。マルチボタンマウスでデモを試すことで、2つの関数の動作を&lt;a href=&quot;https://mdn.github.io/dom-examples/auxclick/&quot;&gt;確認&lt;/a&gt;できます（GitHubでライブで&lt;a href=&quot;https://github.com/mdn/dom-examples/blob/master/auxclick/index.html&quot;&gt;確認するか、ソースコード&lt;/a&gt;も確認してください）。</target>
        </trans-unit>
        <trans-unit id="1ab31ccd2a18eaed1766aed70644304d542527f9" translate="yes" xml:space="preserve">
          <source>In this example we iterate over all pixels to change their values, then we put the modified pixel array back to the canvas using &lt;a href=&quot;../../canvasrenderingcontext2d/putimagedata&quot;&gt;putImageData()&lt;/a&gt;. The invert function simply subtracts each color from the max value 255. The grayscale function simply uses the average of red, green and blue. You can also use a weighted average, given by the formula &lt;code&gt;x = 0.299r + 0.587g + 0.114b&lt;/code&gt;, for example. See &lt;a href=&quot;http://en.wikipedia.org/wiki/Grayscale&quot;&gt;Grayscale&lt;/a&gt; on Wikipedia for more information.</source>
          <target state="translated">この例では、すべてのピクセルを反復処理して値を変更し、次に&lt;a href=&quot;../../canvasrenderingcontext2d/putimagedata&quot;&gt;putImageData（）&lt;/a&gt;を使用して変更されたピクセル配列をキャンバスに戻します。関数invertは単純に最大値255から各色を減算します。グレースケール関数は単に赤、緑、青の平均を使用します。たとえば、式 &lt;code&gt;x = 0.299r + 0.587g + 0.114b&lt;/code&gt; で与えられる加重平均を使用することもできます。詳細については、ウィキペディアの&lt;a href=&quot;http://en.wikipedia.org/wiki/Grayscale&quot;&gt;グレースケール&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f9f9e808ab7494edff1b764adf11ccc5c89f2590" translate="yes" xml:space="preserve">
          <source>In this example we iterate over all pixels to change their values, then we put the modified pixel array back to the canvas using &lt;a href=&quot;../../canvasrenderingcontext2d/putimagedata&quot;&gt;putImageData()&lt;/a&gt;. The invert function simply subtracts each color from the max value 255. The grayscale function simply uses the average of red, green and blue. You can also use a weighted average, given by the formula &lt;code&gt;x = 0.299r + 0.587g + 0.114b&lt;/code&gt;, for example. See &lt;a href=&quot;https://en.wikipedia.org/wiki/Grayscale&quot;&gt;Grayscale&lt;/a&gt; on Wikipedia for more information.</source>
          <target state="translated">この例では、すべてのピクセルを反復処理して値を変更してから、&lt;a href=&quot;../../canvasrenderingcontext2d/putimagedata&quot;&gt;putImageData（）&lt;/a&gt;を使用して変更したピクセル配列をキャンバスに戻します。反転関数は、最大値255から各色を単純に減算します。グレースケール関数は、単に赤、緑、青の平均を使用します。たとえば、式 &lt;code&gt;x = 0.299r + 0.587g + 0.114b&lt;/code&gt; で与えられる加重平均を使用することもできます。詳細については、ウィキペディアの&lt;a href=&quot;https://en.wikipedia.org/wiki/Grayscale&quot;&gt;グレースケール&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="7c0eaa3839370e9b11f9d498e774d53db59f6a7b" translate="yes" xml:space="preserve">
          <source>In this example we open a database connection, then use transaction() to open a transaction on the database. For a complete example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">この例では、データベース接続を開いてから、transaction（）を使用してデータベースのトランザクションを開きます。完全な例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-Do通知&lt;/a&gt;アプリ（&lt;a href=&quot;http://mdn.github.io/to-do-notifications/&quot;&gt;ライブの例を表示&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="d862f43096b8bc02fac700d27db32d40d0f5d79c" translate="yes" xml:space="preserve">
          <source>In this example we open a database connection, then use transaction() to open a transaction on the database. For a complete example, see our &lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To-do Notifications&lt;/a&gt; app (&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">この例では、データベース接続を開き、transaction（）を使用してデータベースでトランザクションを開きます。完全な例については、&lt;a href=&quot;https://github.com/mdn/to-do-notifications/&quot;&gt;To Do通知&lt;/a&gt;アプリを参照してください（&lt;a href=&quot;https://mdn.github.io/to-do-notifications/&quot;&gt;例をライブで表示し&lt;/a&gt;ます）。</target>
        </trans-unit>
        <trans-unit id="11d3846222bbea70252b7fa2cadb65bab7d20dab" translate="yes" xml:space="preserve">
          <source>In this example we show how an embedded cross-origin &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; can access a user&amp;rsquo;s cookies under a storage access policy that blocks third-party cookies.</source>
          <target state="translated">この例では、埋め込まれたクロスオリジン&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;が、サードパーティのCookieをブロックするストレージアクセスポリシーの下でユーザーのCookieにアクセスする方法を示します。</target>
        </trans-unit>
        <trans-unit id="af8f39f9074021c348ce30b9c798ab6cc65a4382" translate="yes" xml:space="preserve">
          <source>In this example we style a simple &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; element, then retrieve the styles using &lt;code&gt;getComputedStyle()&lt;/code&gt;, printing them into the text content of the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">この例では、単純な&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;/a&gt;要素にスタイルを &lt;code&gt;getComputedStyle()&lt;/code&gt; してから、getComputedStyle（）を使用してスタイルを取得し、 &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; のテキストコンテンツに出力します。</target>
        </trans-unit>
        <trans-unit id="94287e1eb4ed92f83036ee2cbfb18265405d90e1" translate="yes" xml:space="preserve">
          <source>In this example, &lt;code&gt;fetchValidationData()&lt;/code&gt; is a function which loads the payment handler specific identifying information from the address given by &lt;code&gt;validationURL&lt;/code&gt;. By then delivering this data (or a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; which resolves to the loaded data) to the payment handler by passing it into &lt;code&gt;complete()&lt;/code&gt;, the payment handler can use the retrieved data and whatever algorithm and other data to support in order to verify that the merchant can use the payment handler.</source>
          <target state="translated">この例では、 &lt;code&gt;fetchValidationData()&lt;/code&gt; は、 &lt;code&gt;validationURL&lt;/code&gt; で指定されたアドレスから支払いハンドラ固有の識別情報をロードする関数です。次に、このデータ（またはロードされたデータに解決される&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;）をそれを &lt;code&gt;complete()&lt;/code&gt; に渡して支払いハンドラーに配信することにより、支払いハンドラーは、取得したデータと、サポートするアルゴリズムやその他のデータを使用して、販売者は支払いハンドラを使用できます。</target>
        </trans-unit>
        <trans-unit id="ce707d59c5c11b6a532cc1062262495b2c90eb98" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/a&gt; text node will be split into two text nodes and a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; inserted between them.</source>
          <target state="translated">この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt; &lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt; &lt;/a&gt;テキストノードが2つのテキストノードに分割され、その間に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; が&lt;/a&gt;挿入されます。</target>
        </trans-unit>
        <trans-unit id="b1fec8bd0711c0a1fe288f8fa37f597c0bb9cdaa" translate="yes" xml:space="preserve">
          <source>In this example, a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element with a number of options is used to let the user order various food items.</source>
          <target state="translated">この例では、いくつかのオプションを持つ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt; &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; &lt;/a&gt;要素を使用して、ユーザーがさまざまな食品を注文できるようにしています。</target>
        </trans-unit>
        <trans-unit id="3db519acbd6cd12c65f39c5250157a86b8bb16f5" translate="yes" xml:space="preserve">
          <source>In this example, a Mutation Observer is set up to watch for changes to the &lt;code&gt;status&lt;/code&gt; and &lt;code&gt;username&lt;/code&gt; attributes in any elements contained within a subtree that displays the names of users in a chat room. This lets the code, for example, reflect changes to users' nicknames, or to mark them as away from keyboard (AFK) or offline.</source>
          <target state="translated">この例では、チャットルームのユーザーの名前を表示するサブツリー内に含まれている要素の &lt;code&gt;status&lt;/code&gt; 属性と &lt;code&gt;username&lt;/code&gt; 属性の変更を監視するように変異オブザーバーが設定されています。これにより、たとえば、ユーザーのニックネームへの変更をコードに反映させたり、キーボード（AFK）から離れている、またはオフラインとしてマークを付けることができます。</target>
        </trans-unit>
        <trans-unit id="8623707ae19e43abaddd0a1897272aa0510e3414" translate="yes" xml:space="preserve">
          <source>In this example, a drop zone is created, which responds to the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; event by scanning through the dropped files and directories, outputting a hierarchical directory listing.</source>
          <target state="translated">この例では、ドロップゾーンが作成され、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; されたファイルとディレクトリをスキャンしてドロップイベントに応答し、階層的なディレクトリリストを出力します。</target>
        </trans-unit>
        <trans-unit id="e5d91397658b0538cadcece929660b8681e953c5" translate="yes" xml:space="preserve">
          <source>In this example, a function is presented whose job it is to locate within a user's app data directory a JSON file containing a user dictionary for a specified language, then load that dictionary.</source>
          <target state="translated">この例では、ユーザーのアプリ データ ディレクトリ内に、指定された言語のユーザー辞書を含む JSON ファイルを検索し、その辞書をロードする関数が提示されています。</target>
        </trans-unit>
        <trans-unit id="ecec12f9ac5b042101f2549655100905a801d26a" translate="yes" xml:space="preserve">
          <source>In this example, a listener is added for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot;&gt;dragstart&lt;/a&gt;&lt;/code&gt; event by using the &lt;code&gt;&lt;a href=&quot;../globaleventhandlers/ondragstart&quot;&gt;&lt;code&gt;ondragstart&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; attribute.</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;../globaleventhandlers/ondragstart&quot;&gt;&lt;code&gt;ondragstart&lt;/code&gt;&lt;/a&gt;&lt;/code&gt; 属性を使用して、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragstart&quot;&gt;dragstart&lt;/a&gt;&lt;/code&gt; イベントのリスナーが追加されます。</target>
        </trans-unit>
        <trans-unit id="445a4dff0fe37a28c74e711c64e405b0e130c9d2" translate="yes" xml:space="preserve">
          <source>In this example, a media source is assigned to a newly-created &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">この例では、メディアソースが新しく作成された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt; &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; &lt;/a&gt;要素に割り当てられています。</target>
        </trans-unit>
        <trans-unit id="bab2015bc6e851b3989e1bf634866a489c3bfcad" translate="yes" xml:space="preserve">
          <source>In this example, a new &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/datachannel&quot;&gt;datachannel&lt;/a&gt;&lt;/code&gt; event is created. &lt;code&gt;dc&lt;/code&gt; is a data channel which already exists.</source>
          <target state="translated">この例では、新しい &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/datachannel&quot;&gt;datachannel&lt;/a&gt;&lt;/code&gt; イベントが作成されます。 &lt;code&gt;dc&lt;/code&gt; は、すでに存在するデータチャネルです。</target>
        </trans-unit>
        <trans-unit id="fa899bca8fd3cc5d52875f9d4d8a36584a28a153" translate="yes" xml:space="preserve">
          <source>In this example, a new stream whose source is the user's local camera and microphone is requested using &lt;a href=&quot;../mediadevices/getusermedia&quot;&gt;&lt;code&gt;getUserMedia()&lt;/code&gt;&lt;/a&gt;. When that stream becomes available (that is, when the returned &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; is fulfilled, a button on the page is updated based on whether or not the stream is currently active.</source>
          <target state="translated">この例では、ソースがユーザーのローカルカメラとマイクである新しいストリームが、&lt;a href=&quot;../mediadevices/getusermedia&quot;&gt; &lt;code&gt;getUserMedia()&lt;/code&gt; &lt;/a&gt;を使用してリクエストされます。そのストリームが利用可能になると（つまり、返された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; &lt;/a&gt;が満たされると、ストリームが現在アクティブであるかどうかに基づいて、ページ上のボタンが更新されます。</target>
        </trans-unit>
        <trans-unit id="0777b73f2904d4e63b0147cb708ba7e8be39350f" translate="yes" xml:space="preserve">
          <source>In this example, a panorama is scrolled left-to-right. We're using &lt;a href=&quot;http://commons.wikimedia.org/wiki/File:Capitan_Meadows,_Yosemite_National_Park.jpg&quot;&gt;an image of Yosemite National Park&lt;/a&gt; we took from Wikipedia, but you could use any image that's larger than the canvas.</source>
          <target state="translated">この例では、パノラマは左から右にスクロールされます。私たちは、使用している&lt;a href=&quot;http://commons.wikimedia.org/wiki/File:Capitan_Meadows,_Yosemite_National_Park.jpg&quot;&gt;ヨセミテ国立公園の画像&lt;/a&gt;私たちはウィキペディアから取ったが、しかし、あなたはキャンバスより大きいです任意の画像を使用することができます。</target>
        </trans-unit>
        <trans-unit id="ea44456228ce51e687c7a261db71f14151513838" translate="yes" xml:space="preserve">
          <source>In this example, a panorama is scrolled left-to-right. We're using &lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Capitan_Meadows,_Yosemite_National_Park.jpg&quot;&gt;an image of Yosemite National Park&lt;/a&gt; we took from Wikipedia, but you could use any image that's larger than the canvas.</source>
          <target state="translated">この例では、パノラマが左から右にスクロールされます。私たちは、使用している&lt;a href=&quot;https://commons.wikimedia.org/wiki/File:Capitan_Meadows,_Yosemite_National_Park.jpg&quot;&gt;ヨセミテ国立公園の画像&lt;/a&gt;私たちはウィキペディアから取ったが、しかし、あなたはキャンバスより大きいです任意の画像を使用することができます。</target>
        </trans-unit>
        <trans-unit id="b549b3af1035399e0042a4215c63b40485711610" translate="yes" xml:space="preserve">
          <source>In this example, a request is created and sent, and a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/readystatechange&quot;&gt;readystatechange&lt;/a&gt;&lt;/code&gt; handler is established to look for the &lt;a href=&quot;readystate&quot;&gt;&lt;code&gt;readyState&lt;/code&gt;&lt;/a&gt; to indicate that the headers have been received; when that is the case, the value of the &lt;code&gt;Content-Type&lt;/code&gt; header is fetched. If the &lt;code&gt;Content-Type&lt;/code&gt; isn't the desired value, the &lt;code&gt;XMLHttpRequest&lt;/code&gt; is canceled by calling &lt;a href=&quot;abort&quot;&gt;&lt;code&gt;abort()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、要求が作成されて送信され、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/readystatechange&quot;&gt;readystatechange&lt;/a&gt;&lt;/code&gt; ハンドラーが確立されて、&lt;a href=&quot;readystate&quot;&gt; &lt;code&gt;readyState&lt;/code&gt; &lt;/a&gt;を探してヘッダーが受信されたことを示します。その場合、 &lt;code&gt;Content-Type&lt;/code&gt; ヘッダーの値がフェッチされます。場合 &lt;code&gt;Content-Type&lt;/code&gt; 希望する値ではない、 &lt;code&gt;XMLHttpRequest&lt;/code&gt; 呼び出すことによってキャンセルされる&lt;a href=&quot;abort&quot;&gt; &lt;code&gt;abort()&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="9fd6c928683051ce0353aa453a116c96cbb919cd" translate="yes" xml:space="preserve">
          <source>In this example, a routine called &lt;code&gt;sendMessage()&lt;/code&gt; is created; it accepts an object as input and sends to the remote peer, over the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt;, a JSON string with the specified object and a time stamp.</source>
          <target state="translated">この例では、 &lt;code&gt;sendMessage()&lt;/code&gt; というルーチンが作成されます。オブジェクトを入力として受け入れ、&lt;a href=&quot;../rtcdatachannel&quot;&gt; &lt;code&gt;RTCDataChannel&lt;/code&gt; を介し&lt;/a&gt;て、指定されたオブジェクトとタイムスタンプを含むJSON文字列をリモートピアに送信します。</target>
        </trans-unit>
        <trans-unit id="b2e800b02224e03b8e4508e406f32fc7ae938020" translate="yes" xml:space="preserve">
          <source>In this example, a video is presented in a web page. Pressing the</source>
          <target state="translated">この例では、Web ページに動画が表示されています。を押すと、動画が表示されます。</target>
        </trans-unit>
        <trans-unit id="7553087c5ea0bcb1176c2f4f434d8d4afcf61618" translate="yes" xml:space="preserve">
          <source>In this example, all of the audio tracks on a given element are muted.</source>
          <target state="translated">この例では、与えられた要素のすべてのオーディオトラックがミュートされています。</target>
        </trans-unit>
        <trans-unit id="2753b38ccd7fd72e7681d2f0f313030c88d93803" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt;&lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt;&lt;/a&gt; is created and filled with content, then a specific element within the document is scrolled into view in the frame. Once that's done, the vertical scroll position is checked by looking at the value of &lt;code&gt;pageYOffset&lt;/code&gt; in the frame's &lt;a href=&quot;../htmliframeelement/contentwindow&quot;&gt;&lt;code&gt;contentWindow&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/iframe&quot;&gt; &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; &lt;/a&gt;が作成され、コンテンツが入力された後、ドキュメント内の特定の要素がフレーム内のビューにスクロールされます。それを行うのならば、垂直スクロール位置はの値を見ることで確認され &lt;code&gt;pageYOffset&lt;/code&gt; フレームの中&lt;a href=&quot;../htmliframeelement/contentwindow&quot;&gt; &lt;code&gt;contentWindow&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="3283f576040dbc538fd2abec4ec5a475e73b4500" translate="yes" xml:space="preserve">
          <source>In this example, an &lt;code&gt;onmute&lt;/code&gt; handler is established to set the content HTML of an element to display the &quot;muted speaker&quot; Emoji.</source>
          <target state="translated">この例では、 &lt;code&gt;onmute&lt;/code&gt; ハンドラーが確立され、要素のコンテンツHTMLが「ミュートスピーカー」の絵文字を表示するように設定されます。</target>
        </trans-unit>
        <trans-unit id="42cb8ae243a3dd66f800b23e5566571583b3449c" translate="yes" xml:space="preserve">
          <source>In this example, an audio context is created, then a &lt;code&gt;ConstantSourceNode&lt;/code&gt; is established with its &lt;code&gt;offset&lt;/code&gt; initialized to 0.5.</source>
          <target state="translated">この例では、オーディオコンテキストが作成され、 &lt;code&gt;ConstantSourceNode&lt;/code&gt; が確立され、 &lt;code&gt;offset&lt;/code&gt; が0.5に初期化されます。</target>
        </trans-unit>
        <trans-unit id="4988685974cd44d8c51603e933d72494389ccb17" translate="yes" xml:space="preserve">
          <source>In this example, an event handler for &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/selectedcandidatepairchange&quot;&gt;selectedcandidatepairchange&lt;/a&gt;&lt;/code&gt; is set up to update an on-screen display showing the protocol used by the currently selected candidate pair.</source>
          <target state="translated">この例では、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/selectedcandidatepairchange&quot;&gt;selectedcandidatepairchange&lt;/a&gt;&lt;/code&gt; のイベントハンドラーを設定して、現在選択されている候補ペアが使用するプロトコルを示す画面上の表示を更新します。</target>
        </trans-unit>
        <trans-unit id="8cd2936f85b53eeb145d70d84bc0691f43f4f2bb" translate="yes" xml:space="preserve">
          <source>In this example, an event handler is established so that clicking a button starts capturing the contents of a media element with the ID &lt;code&gt;&quot;playback&quot;&lt;/code&gt; into a &lt;a href=&quot;../mediastream&quot;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt;. The stream can then be used for other purposes&amp;mdash;like a source for streaming over WebRTC, to allow sharing prerecorded videos with another person during a video call.</source>
          <target state="translated">この例では、イベントハンドラが確立されているため、ボタンをクリックすると、IDが &lt;code&gt;&quot;playback&quot;&lt;/code&gt; メディア要素のコンテンツが&lt;a href=&quot;../mediastream&quot;&gt; &lt;code&gt;MediaStream&lt;/code&gt; に&lt;/a&gt;キャプチャされます。ストリームは、WebRTCを介したストリーミングのソースなど、他の目的に使用して、ビデオ通話中に他の人と事前に記録されたビデオを共有することができます。</target>
        </trans-unit>
        <trans-unit id="f7b2efe73d871e19d88c213c4adbb245db86c7e0" translate="yes" xml:space="preserve">
          <source>In this example, an event listener is added to the window (the event target). If, from an external source, a tab, a link, marked text or a file is dragged and dropped onto this window, the alert is fired. Note how &lt;code&gt;event.stopPropagation();&lt;/code&gt; prevents the browser from loading the dropped tab, link or file.</source>
          <target state="translated">この例では、イベントリスナーがウィンドウ（イベントターゲット）に追加されます。外部ソースから、タブ、リンク、マークされたテキスト、またはファイルがこのウィンドウにドラッグアンドドロップされると、アラートが発生します。注どのように &lt;code&gt;event.stopPropagation();&lt;/code&gt; ブラウザーがドロップされたタブ、リンク、またはファイルをロードしないようにします。</target>
        </trans-unit>
        <trans-unit id="b690e5b6ba5733a149cf38c64d196c6e4b1e7021" translate="yes" xml:space="preserve">
          <source>In this example, before attempting to request full-screen mode for a video element, the value of &lt;code&gt;fullscreenEnabled&lt;/code&gt; is checked, in order to avoid making the attempt when not available.</source>
          <target state="translated">この例では、ビデオ要素のフルスクリーンモードを要求する前に、 &lt;code&gt;fullscreenEnabled&lt;/code&gt; の値がチェックされ、利用できない場合にその試みが行われないようにします。</target>
        </trans-unit>
        <trans-unit id="612c8be2c94c9a550c727aa3fb9a83fe1a2915c5" translate="yes" xml:space="preserve">
          <source>In this example, constraints are applied at &lt;code&gt;getUserMedia()&lt;/code&gt; time, asking for an ideal set of options with fallbacks for the video.</source>
          <target state="translated">この例では、 &lt;code&gt;getUserMedia()&lt;/code&gt; 時に制約が適用され、ビデオのフォールバックを備えた理想的なオプションセットが求められます。</target>
        </trans-unit>
        <trans-unit id="ec34774fc07a9affedec82ac24370cd5d09c33a2" translate="yes" xml:space="preserve">
          <source>In this example, copy is the effect that is performed.</source>
          <target state="translated">この例では、コピーは実行される効果です。</target>
        </trans-unit>
        <trans-unit id="580eb57dc98480d367a8456413811fa8359cd2ca" translate="yes" xml:space="preserve">
          <source>In this example, it has already been determined that ICE restart is needed, and that negotiation needs to be done using a different ICE server.</source>
          <target state="translated">この例では、ICEの再起動が必要であることがすでに決定されており、別のICEサーバを使用してネゴシエーションを行う必要があります。</target>
        </trans-unit>
        <trans-unit id="1bd2235c4e7e3020e6a6c71b8df9ad0168a02431" translate="yes" xml:space="preserve">
          <source>In this example, one &lt;a href=&quot;../worker&quot;&gt;&lt;code&gt;Worker&lt;/code&gt;&lt;/a&gt; is created for each logical processor reported by the browser and a record is created which includes a reference to the new worker as well as a Boolean value indicating whether or not we're using that worker yet; these objects are, in turn, stored into an array for later use. This creates a pool of workers we can use to process requests later.</source>
          <target state="translated">この例では、ブラウザーによって報告された論理プロセッサーごとに1つの&lt;a href=&quot;../worker&quot;&gt; &lt;code&gt;Worker&lt;/code&gt; &lt;/a&gt;が作成され、新しいワーカーへの参照と、そのワーカーをまだ使用しているかどうかを示すブール値を含むレコードが作成されます。これらのオブジェクトは、後で使用するために配列に格納されます。これにより、後でリクエストを処理するために使用できるワーカーのプールが作成されます。</target>
        </trans-unit>
        <trans-unit id="f26c1e49c118d7a73b7002bf47ebd9673e0f5075" translate="yes" xml:space="preserve">
          <source>In this example, only HTML documents retrieved with the GET HTTP verb will be cached. If our &lt;code&gt;if()&lt;/code&gt; condition is false, then this fetch handler won't intercept the request. If there are any other fetch handlers registered, they will get a chance to call &lt;code&gt;event.respondWith()&lt;/code&gt;. If no fetch handlers call &lt;code&gt;event.respondWith()&lt;/code&gt;, the request will be handled by the browser as if there were no service worker involvement. If &lt;code&gt;fetch()&lt;/code&gt; returns a valid HTTP response with an response code in the 4xx or 5xx range, the &lt;code&gt;catch()&lt;/code&gt; will NOT be called.</source>
          <target state="translated">この例では、GET HTTP動詞で取得されたHTMLドキュメントのみがキャッシュされます。私たちの場合 &lt;code&gt;if()&lt;/code&gt; 条件が偽である、これはなりません、要求インターセプトハンドラを取得します。他のフェッチハンドラーが登録されている場合、それらは &lt;code&gt;event.respondWith()&lt;/code&gt; を呼び出す機会を得ます。フェッチハンドラーが &lt;code&gt;event.respondWith()&lt;/code&gt; を呼び出さない場合、リクエストはブラウザによって処理され、サービスワーカーの関与がないかのように処理されます。 &lt;code&gt;fetch()&lt;/code&gt; が4xxまたは5xxの範囲の応答コードで有効なHTTP応答を返す場合、 &lt;code&gt;catch()&lt;/code&gt; は呼び出されません。</target>
        </trans-unit>
        <trans-unit id="7ae4cdf19eb6e5d809b1054493ff7f1d42907e63" translate="yes" xml:space="preserve">
          <source>In this example, only a copy is allowed. You can combine the values in various ways:</source>
          <target state="translated">この例では、コピーのみが許可されています。いろいろな方法で値を組み合わせることができます。</target>
        </trans-unit>
        <trans-unit id="edf772260b685eb66c6342eb172925afdb0e7fcd" translate="yes" xml:space="preserve">
          <source>In this example, playback of video is toggled off and on by the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt;&lt;code&gt;playVideo()&lt;/code&gt; function. It tries to play the video, and if successful sets the class name of the &lt;code&gt;playButton&lt;/code&gt; element to &lt;code&gt;&quot;playing&quot;&lt;/code&gt;. If playback fails to start, the &lt;code&gt;playButton&lt;/code&gt; element's class is cleared, restoring its default appearance. This ensures that the play button matches the actual state of playback by watching for the resolution or rejection of the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;&lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; returned by &lt;code&gt;play()&lt;/code&gt;.</source>
          <target state="translated">この例では、ビデオの再生は &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function&quot;&gt;async&lt;/a&gt;&lt;/code&gt; &lt;code&gt;playVideo()&lt;/code&gt; 関数によってオフとオンが切り替えられます。ビデオの再生を試み、成功した場合は、 &lt;code&gt;playButton&lt;/code&gt; 要素のクラス名を &lt;code&gt;&quot;playing&quot;&lt;/code&gt; に設定します。再生の開始に失敗した場合、 &lt;code&gt;playButton&lt;/code&gt; 要素のクラスはクリアされ、デフォルトの外観に戻ります。これにより、 &lt;code&gt;play()&lt;/code&gt; によって返された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt; &lt;code&gt;Promise&lt;/code&gt; の&lt;/a&gt;解決または拒否を監視することにより、再生ボタンが実際の再生状態と一致するようになります。</target>
        </trans-unit>
        <trans-unit id="f93abc1b7f6ad1ed74a87393f318cf42607eee37" translate="yes" xml:space="preserve">
          <source>In this example, taken from the &lt;code&gt;animateScene()&lt;/code&gt; method in the article &lt;a href=&quot;../webgl_api/basic_2d_animation_example#Drawing_and_animating_the_scene&quot;&gt;A basic 2D WebGL animation example&lt;/a&gt;, obtains the locations of three uniforms from the shading program, then sets the value of each of the three uniforms.</source>
          <target state="translated">この例では、「&lt;a href=&quot;../webgl_api/basic_2d_animation_example#Drawing_and_animating_the_scene&quot;&gt;基本的な2D WebGLアニメーションの例&lt;/a&gt;」の &lt;code&gt;animateScene()&lt;/code&gt; メソッドを使用して、シェーディングプログラムから3つのユニフォームの場所を取得し、3つの各ユニフォームの値を設定しています。</target>
        </trans-unit>
        <trans-unit id="d6cef1164ab5b2f3be86d7a7527912b1a880ae0e" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData()&lt;/code&gt;&lt;/a&gt; function is used to decode an audio track and put it into an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. Buttons are provided to play and stop the audio playback, and slider controls are used to change the &lt;code&gt;playbackRate&lt;/code&gt;, &lt;code&gt;loopStart&lt;/code&gt; and &lt;code&gt;loopEnd&lt;/code&gt; properties on the fly.</source>
          <target state="translated">この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt; &lt;code&gt;AudioContext.decodeAudioData()&lt;/code&gt; &lt;/a&gt;関数を使用してオーディオトラックをデコードし、それを&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; に&lt;/a&gt;入れています。オーディオ再生を再生および停止するためのボタンが用意されており、スライダーコントロールを使用して、 &lt;code&gt;playbackRate&lt;/code&gt; 、 &lt;code&gt;loopStart&lt;/code&gt; 、および &lt;code&gt;loopEnd&lt;/code&gt; プロパティをオンザフライで変更できます。</target>
        </trans-unit>
        <trans-unit id="e191f3c43d3c9e76a208ca7989db6ff0625ab7f0" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData()&lt;/code&gt;&lt;/a&gt; function is used to decode an audio track and put it into an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. Buttons are provided to play and stop the audio playback, and slider controls are used to change the &lt;code&gt;playbackRate&lt;/code&gt;, &lt;code&gt;loopStart&lt;/code&gt;, and &lt;code&gt;loopEnd&lt;/code&gt; properties on the fly.</source>
          <target state="translated">この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt; &lt;code&gt;AudioContext.decodeAudioData()&lt;/code&gt; &lt;/a&gt;関数を使用してオーディオトラックをデコードし、それを&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; に&lt;/a&gt;入れています。オーディオ再生を再生および停止するためのボタンが用意されており、スライダーコントロールを使用して、 &lt;code&gt;playbackRate&lt;/code&gt; 、 &lt;code&gt;loopStart&lt;/code&gt; 、 &lt;code&gt;loopEnd&lt;/code&gt; プロパティをその場で変更できます。</target>
        </trans-unit>
        <trans-unit id="cf1a8ca3c62625b8e7dc68235a2c841adebd9aea" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData()&lt;/code&gt;&lt;/a&gt; function is used to decode an audio track, and put it into an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. Buttons are provided to play and stop the audio playback, and a slider control is used to change the &lt;code&gt;playbackRate&lt;/code&gt; property value on the fly.</source>
          <target state="translated">この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt; &lt;code&gt;AudioContext.decodeAudioData()&lt;/code&gt; &lt;/a&gt;関数を使用してオーディオトラックをデコードし、それを&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; に&lt;/a&gt;入れています。オーディオの再生を再生および停止するためのボタンが用意されており、スライダーコントロールを使用して、 &lt;code&gt;playbackRate&lt;/code&gt; プロパティの値をオンザフライで変更できます。</target>
        </trans-unit>
        <trans-unit id="7e0e85313768f4fee34737467a678f39e1f405b8" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt;&lt;/a&gt; function is used to decode an audio track and put it into an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. Buttons are provided to play and stop the audio playback, and a slider control is used to change the &lt;code&gt;playbackRate&lt;/code&gt; property value on the fly. When the audio is played, it loops.</source>
          <target state="translated">この例では、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt; &lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt; &lt;/a&gt;関数を使用してオーディオトラックをデコードし、&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; に&lt;/a&gt;入れています。オーディオの再生を再生および停止するためのボタンが用意されており、スライダーコントロールを使用して、 &lt;code&gt;playbackRate&lt;/code&gt; プロパティの値をオンザフライで変更できます。オーディオが再生されると、ループします。</target>
        </trans-unit>
        <trans-unit id="163e2e79d4911243af806737cb607859685dd893" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;datachannel&lt;/code&gt; event handler is set up to save the data channel reference and set up handlers for the events which need to be monitored. The &lt;a href=&quot;rtcdatachannelevent/channel&quot;&gt;&lt;code&gt;channel&lt;/code&gt;&lt;/a&gt; property provides the &lt;a href=&quot;rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; representing the connection to the other peer.</source>
          <target state="translated">この例では、 &lt;code&gt;datachannel&lt;/code&gt; イベントハンドラは、データチャネルリファレンスを保存し、監視する必要があるイベントのハンドラを設定するように設定されています。&lt;a href=&quot;rtcdatachannelevent/channel&quot;&gt; &lt;code&gt;channel&lt;/code&gt; &lt;/a&gt;プロパティが提供&lt;a href=&quot;rtcdatachannel&quot;&gt; &lt;code&gt;RTCDataChannel&lt;/code&gt; &lt;/a&gt;他のピアへの接続を表現します。</target>
        </trans-unit>
        <trans-unit id="08b49c5969e6d0a7e0e1124fcf0c205ef567427d" translate="yes" xml:space="preserve">
          <source>In this example, the &lt;code&gt;getData()&lt;/code&gt; function uses XHR to load an audio track, setting the &lt;code&gt;responseType&lt;/code&gt; of the request to &lt;code&gt;arraybuffer&lt;/code&gt; so that it returns an array buffer as its &lt;code&gt;response&lt;/code&gt; that we then store in the &lt;code&gt;audioData&lt;/code&gt; variable . We then pass this buffer into a &lt;code&gt;decodeAudioData()&lt;/code&gt; function; the success callback takes the successfully decoded PCM data, puts it into an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; created using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource&quot;&gt;&lt;code&gt;AudioContext.createBufferSource()&lt;/code&gt;&lt;/a&gt;, connects the source to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination&quot;&gt;&lt;code&gt;AudioContext.destination&lt;/code&gt;&lt;/a&gt; and sets it to loop.</source>
          <target state="translated">この例では、 &lt;code&gt;getData()&lt;/code&gt; 関数はXHRを使用してオーディオトラックをロードし、リクエストの &lt;code&gt;responseType&lt;/code&gt; を &lt;code&gt;arraybuffer&lt;/code&gt; に設定して、配列バッファーを &lt;code&gt;response&lt;/code&gt; として返し、それを &lt;code&gt;audioData&lt;/code&gt; 変数に格納します。次に、このバッファーを &lt;code&gt;decodeAudioData()&lt;/code&gt; 関数に渡します。成功コールバックは、正常にデコードされたPCMデータを受け取り、それを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/createBufferSource&quot;&gt; &lt;code&gt;AudioContext.createBufferSource()&lt;/code&gt; &lt;/a&gt;を使用して作成された&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; に&lt;/a&gt;入れ、ソースを&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/destination&quot;&gt; &lt;code&gt;AudioContext.destination&lt;/code&gt; に&lt;/a&gt;接続してループするように設定します。</target>
        </trans-unit>
        <trans-unit id="e2553f447b0a7f13d7f858289824a799f7edf6b6" translate="yes" xml:space="preserve">
          <source>In this example, the candidate's &lt;a href=&quot;protocol&quot;&gt;&lt;code&gt;protocol&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;tcpType&lt;/code&gt; are used to adjust the user interface for simultaneous-open TCP candidates.</source>
          <target state="translated">この例では、候補の&lt;a href=&quot;protocol&quot;&gt; &lt;code&gt;protocol&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;tcpType&lt;/code&gt; を使用して、同時オープンTCP候補のユーザーインターフェイスを調整します。</target>
        </trans-unit>
        <trans-unit id="15416d370de442429f39af7e3c76d675ab370e0a" translate="yes" xml:space="preserve">
          <source>In this example, the candidate's &lt;a href=&quot;type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; is checked, and then debugging output is presented, based on the candidate type, including the candidate's &lt;a href=&quot;ip&quot;&gt;&lt;code&gt;ip&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;relatedAddress&lt;/code&gt;.</source>
          <target state="translated">この例では、候補者の&lt;a href=&quot;type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;がチェックされ、候補者の&lt;a href=&quot;ip&quot;&gt; &lt;code&gt;ip&lt;/code&gt; &lt;/a&gt;と &lt;code&gt;relatedAddress&lt;/code&gt; を含む候補者タイプに基づいてデバッグ出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="201f60616bca196654e9402b2b58dfcb78cfa71c" translate="yes" xml:space="preserve">
          <source>In this example, the candidate's &lt;a href=&quot;type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; is checked, and then debugging output is presented, based on the candidate type, including the candidate's type, address (&lt;code&gt;ip&lt;/code&gt; and &lt;a href=&quot;port&quot;&gt;&lt;code&gt;port&lt;/code&gt;&lt;/a&gt;), and related address (&lt;a href=&quot;relatedaddress&quot;&gt;&lt;code&gt;relatedAddress&lt;/code&gt;&lt;/a&gt; and &lt;code&gt;relatedPort&lt;/code&gt;).</source>
          <target state="translated">この例では、候補者の&lt;a href=&quot;type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;がチェックされ、候補者のタイプ、アドレス（ &lt;code&gt;ip&lt;/code&gt; および&lt;a href=&quot;port&quot;&gt; &lt;code&gt;port&lt;/code&gt; &lt;/a&gt;）、および関連アドレス（&lt;a href=&quot;relatedaddress&quot;&gt; &lt;code&gt;relatedAddress&lt;/code&gt; &lt;/a&gt;および &lt;code&gt;relatedPort&lt;/code&gt; ）を含む候補者タイプに基づいて、デバッグ出力が表示されます。</target>
        </trans-unit>
        <trans-unit id="58c1518f1b3061d52806a8f57541db39fc55ffb7" translate="yes" xml:space="preserve">
          <source>In this example, the candidate's &lt;a href=&quot;type&quot;&gt;&lt;code&gt;type&lt;/code&gt;&lt;/a&gt; is used to present a modified user interface for host candidates (those where the &lt;a href=&quot;ip&quot;&gt;&lt;code&gt;ip&lt;/code&gt;&lt;/a&gt; refers directly to the remote peer, rather than an intermediary).</source>
          <target state="translated">この例では、候補の&lt;a href=&quot;type&quot;&gt; &lt;code&gt;type&lt;/code&gt; &lt;/a&gt;を使用して、ホスト候補（&lt;a href=&quot;ip&quot;&gt; &lt;code&gt;ip&lt;/code&gt; が&lt;/a&gt;中間ではなくリモートピアを直接参照するもの）の変更されたユーザーインターフェイスを提示します。</target>
        </trans-unit>
        <trans-unit id="cc6f3b02d5deab8a3b83310b17000c961201387b" translate="yes" xml:space="preserve">
          <source>In this example, the code first checks whether the browser supports service workers and if so registers one. Next, it adds and &lt;code&gt;updatefound&lt;/code&gt; event in which it uses the service worker registration to listen for further changes to the service worker's state. If the service worker hasn't changed since the last time it was registered, than the &lt;code&gt;updatefound&lt;/code&gt; event will not be fired.</source>
          <target state="translated">この例では、コードはまずブラウザーがService Workerをサポートしているかどうかをチェックし、サポートしている場合はそれを登録します。次に、サービスワーカーの登録を使用して、サービスワーカーの状態のさらなる変更をリッスンする &lt;code&gt;updatefound&lt;/code&gt; イベントを追加します。サービスワーカーが最後に登録されてから変更されていない場合、 &lt;code&gt;updatefound&lt;/code&gt; イベントは発生しません。</target>
        </trans-unit>
        <trans-unit id="bfa403877c4c43915e3268d68d935f629ac5ca29" translate="yes" xml:space="preserve">
          <source>In this example, the control point is red and the start and end points are blue.</source>
          <target state="translated">この例では、制御点が赤、開始点と終了点が青となっています。</target>
        </trans-unit>
        <trans-unit id="fb5baaf426e8d237b19f4d2fe7c1d60995299a72" translate="yes" xml:space="preserve">
          <source>In this example, the control points are red and the start and end points are blue.</source>
          <target state="translated">この例では、制御点が赤、開始点と終了点が青となっています。</target>
        </trans-unit>
        <trans-unit id="982ef6acb98509f633dea2c864771fc9ba468835" translate="yes" xml:space="preserve">
          <source>In this example, the current mouse coordinates are drawn while you mouse around after clicking and holding down on an element.</source>
          <target state="translated">この例では、要素をクリックして長押しした後にマウスを動かしている間に、現在のマウス座標が描画されます。</target>
        </trans-unit>
        <trans-unit id="ca785739fa3691c8d03322adc082ae3250ff3a6c" translate="yes" xml:space="preserve">
          <source>In this example, the drop-down menus dynamically update such DOM-accessible aspects of the web page as its background color (&lt;code&gt;bgColor&lt;/code&gt;), the color of the hyperlinks (&lt;code&gt;aLink&lt;/code&gt;), and color of the text (&lt;code&gt;text&lt;/code&gt;). However, you design your test pages, testing the interfaces as you read about them is an important part of learning how to use the DOM effectively.</source>
          <target state="translated">この例では、ドロップダウンメニューは、WebページのDOMからアクセス可能な要素を、その背景色（ &lt;code&gt;bgColor&lt;/code&gt; ）、ハイパーリンクの色（ &lt;code&gt;aLink&lt;/code&gt; ）、およびテキストの色（ &lt;code&gt;text&lt;/code&gt; ）として動的に更新します。ただし、テストページを設計し、それらについて読むときにインターフェイスをテストすることは、DOMを効果的に使用する方法を学ぶ上で重要な部分です。</target>
        </trans-unit>
        <trans-unit id="465b3a82d486e0aec332aa8b645b205a38bbf8ad" translate="yes" xml:space="preserve">
          <source>In this example, the element with the class &lt;code&gt;droparea&lt;/code&gt; will receive a 1 pixel black border while it is a valid drop target, that is, if the &lt;a href=&quot;../event/preventdefault&quot;&gt;&lt;code&gt;preventDefault()&lt;/code&gt;&lt;/a&gt; method was called during the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; event. Note that you must cancel the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; event for this pseudoclass to apply, as this state is not checked for the &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; event.</source>
          <target state="translated">この例では、クラス &lt;code&gt;droparea&lt;/code&gt; を持つ要素は、有効なドロップターゲットである間、 &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; イベント中に&lt;a href=&quot;../event/preventdefault&quot;&gt; &lt;code&gt;preventDefault()&lt;/code&gt; &lt;/a&gt;メソッドが呼び出された場合、1ピクセルの黒い境界線を受け取ります。この状態は &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; イベントに対してチェックされないため、この疑似クラスを適用するには &lt;code&gt;&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt;&lt;/code&gt; イベントをキャンセルする必要があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="3f6e83c0e3cf81e14e1c69317467e959134733b7" translate="yes" xml:space="preserve">
          <source>In this example, the entire document is placed into full-screen mode by calling &lt;a href=&quot;../element/requestfullscreen&quot;&gt;&lt;code&gt;requestFullscreen()&lt;/code&gt;&lt;/a&gt; on the document's &lt;a href=&quot;../document/documentelement&quot;&gt;&lt;code&gt;Document.documentElement&lt;/code&gt;&lt;/a&gt;, which is the document's root &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html&quot;&gt;&lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;&lt;/a&gt; element.</source>
          <target state="translated">この例では、ドキュメントのルート&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/html&quot;&gt; &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; &lt;/a&gt;要素であるドキュメントの&lt;a href=&quot;../document/documentelement&quot;&gt; &lt;code&gt;Document.documentElement&lt;/code&gt; &lt;/a&gt;で&lt;a href=&quot;../element/requestfullscreen&quot;&gt; &lt;code&gt;requestFullscreen()&lt;/code&gt; &lt;/a&gt;を呼び出すことにより、ドキュメント全体をフルスクリーンモードにします。</target>
        </trans-unit>
        <trans-unit id="367095866ab40684b1f0a53b14ca330364c3c585" translate="yes" xml:space="preserve">
          <source>In this example, the event handler will fire each time a new selection is made. &lt;code&gt;console.log(selection.type)&lt;/code&gt; will return &lt;code&gt;Caret&lt;/code&gt; or &lt;code&gt;Range&lt;/code&gt; depending on whether the caret is placed at a single point in the text, or a range has been selected.</source>
          <target state="translated">この例では、新しい選択が行われるたびにイベントハンドラーが発生します。 &lt;code&gt;console.log(selection.type)&lt;/code&gt; が返され &lt;code&gt;Caret&lt;/code&gt; または &lt;code&gt;Range&lt;/code&gt; キャレットは、テキスト内の単一の点に配置され、または範囲が選択されているかどうかに応じ。</target>
        </trans-unit>
        <trans-unit id="f753d4b527f43838b7ad05090d3a32e196476272" translate="yes" xml:space="preserve">
          <source>In this example, the event returns false only if the data transfer contains the &lt;code&gt;application/x-moz-file&lt;/code&gt; type. During the drop event, the data associated with the file type is retrieved, and the filename of the file is added to the listbox. Note that the &lt;code&gt;instanceof&lt;/code&gt; operator is used here as the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozGetDataAt&quot;&gt;&lt;code&gt;mozGetDataAt()&lt;/code&gt;&lt;/a&gt; method will return an &lt;code&gt;nsISupports&lt;/code&gt; that needs to be checked and converted into an nsIFile. This is also a good extra check in case someone made a mistake and added a non-file for this type.</source>
          <target state="translated">この例では、データ転送に &lt;code&gt;application/x-moz-file&lt;/code&gt; タイプが含まれている場合にのみ、イベントがfalseを返します。ドロップイベント中に、ファイルタイプに関連付けられたデータが取得され、ファイルのファイル名がリストボックスに追加されます。ここでは、 &lt;code&gt;instanceof&lt;/code&gt; 演算子が使用されています。これは、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer/mozGetDataAt&quot;&gt; &lt;code&gt;mozGetDataAt()&lt;/code&gt; &lt;/a&gt;メソッドが、チェックしてnsIFileに変換する必要がある &lt;code&gt;nsISupports&lt;/code&gt; を返すためです。これは、誰かがミスを犯してこのタイプのファイル以外を追加した場合の、優れた追加チェックでもあります。</target>
        </trans-unit>
        <trans-unit id="c35f4e83e991b38c8b525ed5db71d9282a02e058" translate="yes" xml:space="preserve">
          <source>In this example, the first element in the document with the class &quot;&lt;code&gt;myclass&lt;/code&gt;&quot; is returned:</source>
          <target state="translated">この例では、クラス「 &lt;code&gt;myclass&lt;/code&gt; 」を持つドキュメントの最初の要素が返されます。</target>
        </trans-unit>
        <trans-unit id="7eda5ee6535afdac60c8225b0d92fac23d7db6ad" translate="yes" xml:space="preserve">
          <source>In this example, the path created by &lt;code&gt;arcTo()&lt;/code&gt; is &lt;strong&gt;thick and black&lt;/strong&gt;. Tangent lines are gray, control points are red, and the start point is blue.</source>
          <target state="translated">この例では、 &lt;code&gt;arcTo()&lt;/code&gt; によって作成されたパスは&lt;strong&gt;厚くて黒&lt;/strong&gt;です。接線は灰色、制御点は赤色、開始点は青色です。</target>
        </trans-unit>
        <trans-unit id="c8cda7d3e1d677b1c13eac19d45b39f188eb4bd0" translate="yes" xml:space="preserve">
          <source>In this example, the specified easing only applies from the keyframe where it is specified until the next keyframe. Any &lt;code&gt;easing&lt;/code&gt; value specified on the &lt;code&gt;options&lt;/code&gt; argument, however, applies across a single iteration of the animation &amp;mdash; for the entire duration.</source>
          <target state="translated">この例では、指定されたイージングは​​、指定されたキーフレームから次のキーフレームまでにのみ適用されます。任意の &lt;code&gt;easing&lt;/code&gt; に指定された値 &lt;code&gt;options&lt;/code&gt; 引数は、しかし、アニメーションの1回の反復全体に適用さ-全期間。</target>
        </trans-unit>
        <trans-unit id="267559976150f69d6d4d0c2b0d5569c75b7e94b1" translate="yes" xml:space="preserve">
          <source>In this example, the supported constraints are fetched, and a control that lets the user configure the frame rate is disabled if the &lt;code&gt;frameRate&lt;/code&gt; constraint isn't supported.</source>
          <target state="translated">この例では、サポートされている制約がフェッチされ、 &lt;code&gt;frameRate&lt;/code&gt; 制約がサポートされていない場合、ユーザーがフレームレートを構成できるようにするコントロールは無効になります。</target>
        </trans-unit>
        <trans-unit id="3e1714fe91905ce13bda4c1d188a50423345b1a9" translate="yes" xml:space="preserve">
          <source>In this example, the window will be resizable, it will render scrollbar(s) if needed, if the content overflows requested window dimensions and it will render the status bar. It will not render the menubar nor the location bar. Since the author knew about the size of the image (400 pixels wide and 200 pixels high), they added the margins applied to the root element in MSIE 6 which is 15 pixels for top margin, 15 pixels for the bottom margin, 10 pixels for the left margin and 10 pixels for the right margin.</source>
          <target state="translated">この例では、ウィンドウのサイズを変更し、必要に応じてスクロールバーをレンダリングし、コンテンツが要求されたウィンドウのサイズを超えた場合はステータスバーをレンダリングします。メニューバーや位置情報バーは表示されません。作者は画像のサイズ(幅400ピクセル、高さ200ピクセル)を知っていたので、MSIE 6のルート要素に適用されるマージンを追加しました。</target>
        </trans-unit>
        <trans-unit id="f6668171476bd59987c3b7afd0c6951a8ff53c28" translate="yes" xml:space="preserve">
          <source>In this example, we are creating a rectangle and a circle. Both are stored as a &lt;code&gt;Path2D&lt;/code&gt; object, so that they are available for later usage. With the new &lt;code&gt;Path2D&lt;/code&gt; API, several methods got updated to optionally accept a &lt;code&gt;Path2D&lt;/code&gt; object to use instead of the current path. Here, &lt;code&gt;stroke&lt;/code&gt; and &lt;code&gt;fill&lt;/code&gt; are used with a path argument to draw both objects onto the canvas, for example.</source>
          <target state="translated">この例では、長方形と円を作成しています。どちらも &lt;code&gt;Path2D&lt;/code&gt; オブジェクトとして保存されるため、後で使用できます。新しい &lt;code&gt;Path2D&lt;/code&gt; APIでは、現在のパスの代わりに使用する &lt;code&gt;Path2D&lt;/code&gt; オブジェクトをオプションで受け入れるようにいくつかのメソッドが更新されました。ここでは、 &lt;code&gt;stroke&lt;/code&gt; と &lt;code&gt;fill&lt;/code&gt; をパス引数とともに使用して、たとえば両方のオブジェクトをキャンバスに描画します。</target>
        </trans-unit>
        <trans-unit id="a52f843befec7a52e6f5e41fd4174d560b5ab04a" translate="yes" xml:space="preserve">
          <source>In this example, we assume the user initiates a touch on an element with an id of &lt;code&gt;source&lt;/code&gt;, moves within the element or out of the element and then releases contact with the surface. When the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchend&quot;&gt;touchend&lt;/a&gt;&lt;/code&gt; event handler is invoked, the changes in the &lt;a href=&quot;clientx&quot;&gt;&lt;code&gt;Touch.clientX&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;clienty&quot;&gt;&lt;code&gt;Touch.clientY&lt;/code&gt;&lt;/a&gt; coordinates, from the starting touch point to the ending touch point, are calculated.</source>
          <target state="translated">この例では、ユーザーが &lt;code&gt;source&lt;/code&gt; の IDを持つ要素へのタッチを開始し、要素内または要素の外に移動してから、表面との接触を解除すると想定します。場合 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/touchend&quot;&gt;touchend&lt;/a&gt;&lt;/code&gt; のイベントハンドラが呼び出され、変化&lt;a href=&quot;clientx&quot;&gt; &lt;code&gt;Touch.clientX&lt;/code&gt; &lt;/a&gt;と&lt;a href=&quot;clienty&quot;&gt; &lt;code&gt;Touch.clientY&lt;/code&gt; &lt;/a&gt;開始タッチポイントから終了タッチ点座標が、計算されます。</target>
        </trans-unit>
        <trans-unit id="8c0c118e28b688be6a0747aa72e0a1aa68c483fd" translate="yes" xml:space="preserve">
          <source>In this example, we create a function called &lt;code&gt;updateDeviceList()&lt;/code&gt;, which is called once when &lt;a href=&quot;getusermedia&quot;&gt;&lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt;&lt;/a&gt; successfully obtains a stream, and then is called any time the device list changes. It displays in the browser window two lists: one of audio devices and one of video devices, with both the device's label (name) and whether it's an input or an output device. Because the example provides a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/devicechange&quot;&gt;devicechange&lt;/a&gt;&lt;/code&gt; event, the list is refreshed any time a media device is attached to or removed from the device running the sample.</source>
          <target state="translated">この例では、 &lt;code&gt;updateDeviceList()&lt;/code&gt; という関数を作成します。これは、&lt;a href=&quot;getusermedia&quot;&gt; &lt;code&gt;MediaDevices.getUserMedia()&lt;/code&gt; &lt;/a&gt;がストリームを正常に取得したときに一度呼び出され、デバイスリストが変更されるたびに呼び出されます。ブラウザーウィンドウに、オーディオデバイスの1つとビデオデバイスの1つの2つのリストが表示されます。デバイスのラベル（名前）と、デバイスが入力デバイスか出力デバイスかが表示されます。この例では &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/devicechange&quot;&gt;devicechange&lt;/a&gt;&lt;/code&gt; イベントのハンドラーを提供しているため、サンプルを実行しているデバイスにメディアデバイスが接続または削除されるたびに、リストが更新されます。</target>
        </trans-unit>
        <trans-unit id="d9d7dc59eefb2ee5886f4e878b891431cb41de58" translate="yes" xml:space="preserve">
          <source>In this example, we create a two second buffer, fill it with white noise, and then play it via an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt;. The comments should clearly explain what is going on.</source>
          <target state="translated">この例では、2秒のバッファーを作成し、ホワイトノイズで満たしてから、&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; を&lt;/a&gt;介して再生します。コメントは、何が起こっているのかを明確に説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="fab986e1b6786156fa6be771a1b43c8e4dbf2328" translate="yes" xml:space="preserve">
          <source>In this example, we create a two-second buffer, fill it with white noise, and then play it using an &lt;code&gt;AudioBufferSourceNode&lt;/code&gt;. The comments should clearly explain what is going on.</source>
          <target state="translated">この例では、2秒のバッファーを作成し、ホワイトノイズを入れてから、 &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; を使用して再生します。コメントは、何が起こっているのかを明確に説明する必要があります。</target>
        </trans-unit>
        <trans-unit id="4e482baa2c8cd7d195256df32d2f9f1e92606735" translate="yes" xml:space="preserve">
          <source>In this example, we create an exerciser which lets you experiment with media constraints by editing the source code describing the constraint sets for audio and video tracks. You can then apply those changes and see the result, including both what the stream looks like and what the actual media settings are set to after applying the new constraints.</source>
          <target state="translated">この例では、オーディオ・トラックとビデオ・トラックの制約セットを記述したソース・コードを編集して、メディア制約を試すことができるエクササイズ・プログラムを作成します。そして、それらの変更を適用して、ストリームがどのように見えるか、新しい制約を適用した後の実際のメディア設定がどのように設定されているかなどの結果を見ることができます。</target>
        </trans-unit>
        <trans-unit id="fd46de23b07410450ff05b715974c2d2c9756e48" translate="yes" xml:space="preserve">
          <source>In this example, we create three &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; blocks. The first and third have the same contents and attributes, while the second is different. Then we run some JavaScript to compare the nodes using &lt;code&gt;isEqualNode()&lt;/code&gt; and output the results.</source>
          <target state="translated">この例では、3つの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;/a&gt;ブロックを作成します。1つ目と3つ目は同じ内容と属性を持ち、2つ目は異なります。次に、JavaScriptを実行して、 &lt;code&gt;isEqualNode()&lt;/code&gt; を使用してノードを比較し、結果を出力します。</target>
        </trans-unit>
        <trans-unit id="e3bd8b1ecedb3b66ec35fd0745aeaf21cf758ef8" translate="yes" xml:space="preserve">
          <source>In this example, we create three &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;&lt;/a&gt; blocks. The first and third have the same contents and attributes, while the second is different. Then we run some JavaScript to compare the nodes using &lt;code&gt;isSameNode()&lt;/code&gt; and output the results.</source>
          <target state="translated">この例では、3つの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/div&quot;&gt; &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; &lt;/a&gt;ブロックを作成します。1つ目と3つ目は同じ内容と属性を持ち、2つ目は異なります。次に、JavaScriptを実行して、 &lt;code&gt;isSameNode()&lt;/code&gt; を使用してノードを比較し、結果を出力します。</target>
        </trans-unit>
        <trans-unit id="ce294ed21690ab98ca2ee9531ef435f32db0ec3d" translate="yes" xml:space="preserve">
          <source>In this example, we demonstrate how to handle any undelivered &lt;a href=&quot;../mutationrecord&quot;&gt;&lt;code&gt;MutationRecord&lt;/code&gt;&lt;/a&gt;s by calling &lt;code&gt;takeRecords()&lt;/code&gt; just before disconnecting the observer.</source>
          <target state="translated">この例では、オブザーバーを切断する直前に &lt;code&gt;takeRecords()&lt;/code&gt; を呼び出して、未配信の&lt;a href=&quot;../mutationrecord&quot;&gt; &lt;code&gt;MutationRecord&lt;/code&gt; &lt;/a&gt;を処理する方法を示します。</target>
        </trans-unit>
        <trans-unit id="35cd073c24971ec516ca42696a4fac4a4aef872b" translate="yes" xml:space="preserve">
          <source>In this example, we grab a media (audio + video) stream from &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/navigator/getUserMedia&quot;&gt;&lt;code&gt;navigator.getUserMedia&lt;/code&gt;&lt;/a&gt;, feed the media into a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element to play then mute the audio, but then also feed the audio into a &lt;a href=&quot;mediastreamaudiosourcenode&quot;&gt;&lt;code&gt;MediaStreamAudioSourceNode&lt;/code&gt;&lt;/a&gt;. Next, we feed this source audio into a low pass &lt;a href=&quot;biquadfilternode&quot;&gt;&lt;code&gt;BiquadFilterNode&lt;/code&gt;&lt;/a&gt; (which effectively serves as a bass booster), then a &lt;a href=&quot;audiodestinationnode&quot;&gt;&lt;code&gt;AudioDestinationNode&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、我々はからのメディア（オーディオ+ビデオ）ストリームつかむ&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/navigator/getUserMedia&quot;&gt; &lt;code&gt;navigator.getUserMedia&lt;/code&gt; を&lt;/a&gt;、にメディアを養う&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt; &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; &lt;/a&gt;オーディオをミュートが、その後もにオーディオを送り、次にプレイする要素&lt;a href=&quot;mediastreamaudiosourcenode&quot;&gt; &lt;code&gt;MediaStreamAudioSourceNode&lt;/code&gt; &lt;/a&gt;。次に、このソースオーディオをローパス&lt;a href=&quot;biquadfilternode&quot;&gt; &lt;code&gt;BiquadFilterNode&lt;/code&gt; &lt;/a&gt;（バスブースターとして効果的に機能します）に&lt;a href=&quot;audiodestinationnode&quot;&gt; &lt;code&gt;AudioDestinationNode&lt;/code&gt; &lt;/a&gt;、次にAudioDestinationNodeに送ります。</target>
        </trans-unit>
        <trans-unit id="ccc58765134b1f7e62cc7ef555821b468da9d29c" translate="yes" xml:space="preserve">
          <source>In this example, we have a media source with a single button (see the &lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/audio-param/index.html&quot;&gt;webaudio-examples repo&lt;/a&gt; for the source code, or &lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-param/&quot;&gt;view the example live&lt;/a&gt;.) When this button is pressed, &lt;code&gt;setValueCurveAtTime()&lt;/code&gt; is used to change the gain value between the values contained in the waveArray array:</source>
          <target state="translated">この例では、ボタンが1つあるメディアソースがあります（ソースコードについては&lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/audio-param/index.html&quot;&gt;webaudio-examplesリポジトリ&lt;/a&gt;を参照するか&lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-param/&quot;&gt;、サンプルのliveをご覧&lt;/a&gt;ください）。このボタンを押すと、 &lt;code&gt;setValueCurveAtTime()&lt;/code&gt; を使用して、 waveArray配列に含まれる値：</target>
        </trans-unit>
        <trans-unit id="ccf0481644782b94cadbf7ac0020968d1b303da9" translate="yes" xml:space="preserve">
          <source>In this example, we have a media source with two control buttons (see the &lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-param repo&lt;/a&gt; for the source code, or &lt;a href=&quot;http://mdn.github.io/audio-param/&quot;&gt;view the example live&lt;/a&gt;.) When these buttons are pressed, &lt;code&gt;exponentialRampToValueAtTime()&lt;/code&gt; is used to fade the gain value up to 1.0, and down to 0, respectively. This is pretty useful for fade in/fade out effects:</source>
          <target state="translated">この例では、2つのコントロールボタンを備えたメディアソースがあります（ソースコードの&lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-paramリポジトリ&lt;/a&gt;を参照するか&lt;a href=&quot;http://mdn.github.io/audio-param/&quot;&gt;、ライブの例を表示して&lt;/a&gt;ください）。これらのボタンを押すと、 &lt;code&gt;exponentialRampToValueAtTime()&lt;/code&gt; を使用してゲイン値を最大にフェードしますそれぞれ1.0、および0まで。これは、フェードイン/フェードアウト効果に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="2188bb6508942db951a84aadd2a902856171d6ba" translate="yes" xml:space="preserve">
          <source>In this example, we have a media source with two control buttons (see the &lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-param repo&lt;/a&gt; for the source code, or &lt;a href=&quot;http://mdn.github.io/audio-param/&quot;&gt;view the example live&lt;/a&gt;.) When these buttons are pressed, &lt;code&gt;linearRampToValueAtTime()&lt;/code&gt; is used to fade the gain value up to 1.0, and down to 0, respectively. This is pretty useful for fade in/fade out effects, although &lt;a href=&quot;exponentialramptovalueattime&quot;&gt;&lt;code&gt;AudioParam.exponentialRampToValueAtTime()&lt;/code&gt;&lt;/a&gt; is often said to be a bit more natural.</source>
          <target state="translated">この例では、2つのコントロールボタンを備えたメディアソースがあります（ソースコードについては、&lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-paramリポジトリ&lt;/a&gt;を参照するか&lt;a href=&quot;http://mdn.github.io/audio-param/&quot;&gt;、ライブの例を&lt;/a&gt;参照してください）。これらのボタンを押すと、 &lt;code&gt;linearRampToValueAtTime()&lt;/code&gt; を使用してゲイン値を最大にフェードしますそれぞれ1.0、および0まで。&lt;a href=&quot;exponentialramptovalueattime&quot;&gt; &lt;code&gt;AudioParam.exponentialRampToValueAtTime()&lt;/code&gt; &lt;/a&gt;はより自然であるとしばしば言われていますが、これはフェードイン/フェードアウト効果にかなり役立ちます。</target>
        </trans-unit>
        <trans-unit id="44e3feb4b28bd4b92e3d9fe560e242b2f6ac7a9b" translate="yes" xml:space="preserve">
          <source>In this example, we have a media source with two control buttons (see the &lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-param repo&lt;/a&gt; for the source code, or &lt;a href=&quot;https://mdn.github.io/audio-param/&quot;&gt;view the example live&lt;/a&gt;.) When these buttons are pressed, &lt;code&gt;exponentialRampToValueAtTime()&lt;/code&gt; is used to fade the gain value up to 1.0, and down to 0, respectively. This is pretty useful for fade in/fade out effects:</source>
          <target state="translated">この例では、2つのコントロールボタンを備えたメディアソースがあります（ソースコードの&lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-paramリポジトリ&lt;/a&gt;を参照するか&lt;a href=&quot;https://mdn.github.io/audio-param/&quot;&gt;、サンプルをライブで表示し&lt;/a&gt;ます）。これらのボタンを押すと、 &lt;code&gt;exponentialRampToValueAtTime()&lt;/code&gt; を使用してゲイン値を最大にフェードします。それぞれ1.0、および0まで。これは、フェードイン/フェードアウト効果に非常に役立ちます。</target>
        </trans-unit>
        <trans-unit id="6b48daca16e710d8be6daedd4e2fc551624d0a87" translate="yes" xml:space="preserve">
          <source>In this example, we have a media source with two control buttons (see the &lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-param repo&lt;/a&gt; for the source code, or &lt;a href=&quot;https://mdn.github.io/audio-param/&quot;&gt;view the example live&lt;/a&gt;.) When these buttons are pressed, &lt;code&gt;linearRampToValueAtTime()&lt;/code&gt; is used to fade the gain value up to 1.0, and down to 0, respectively. This is pretty useful for fade in/fade out effects, although &lt;a href=&quot;exponentialramptovalueattime&quot;&gt;&lt;code&gt;AudioParam.exponentialRampToValueAtTime()&lt;/code&gt;&lt;/a&gt; is often said to be a bit more natural.</source>
          <target state="translated">この例では、2つのコントロールボタンを備えたメディアソースがあります（ソースコードの&lt;a href=&quot;https://github.com/mdn/audio-param&quot;&gt;audio-paramリポジトリ&lt;/a&gt;を参照するか&lt;a href=&quot;https://mdn.github.io/audio-param/&quot;&gt;、サンプルをライブで表示し&lt;/a&gt;ます）。これらのボタンを押すと、 &lt;code&gt;linearRampToValueAtTime()&lt;/code&gt; を使用してゲイン値を最大にフェードします。それぞれ1.0、および0まで。これはフェードイン/フェードアウト効果に非常に役立ちますが、&lt;a href=&quot;exponentialramptovalueattime&quot;&gt; &lt;code&gt;AudioParam.exponentialRampToValueAtTime()&lt;/code&gt; &lt;/a&gt;はもう少し自然であるとよく言われます。</target>
        </trans-unit>
        <trans-unit id="ea847032a52a9255c530666fe41bee22f86d8247" translate="yes" xml:space="preserve">
          <source>In this example, we have a media source with two control buttons (see the &lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/audio-param/index.html&quot;&gt;webaudio-examples repo&lt;/a&gt; for the source code, or &lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-param/&quot;&gt;view the example live&lt;/a&gt;.) When these buttons are pressed, &lt;code&gt;setTargetAtTime()&lt;/code&gt; is used to fade the gain value up to 1.0, and down to 0, respectively, with the effect starting after 1 second, and the length of time the effect lasts being controlled by the timeConstant.</source>
          <target state="translated">この例では、2つのコントロールボタンを備えたメディアソースがあります（ソースコードについては&lt;a href=&quot;https://github.com/mdn/webaudio-examples/blob/master/audio-param/index.html&quot;&gt;webaudio-examplesリポジトリ&lt;/a&gt;を参照するか&lt;a href=&quot;https://mdn.github.io/webaudio-examples/audio-param/&quot;&gt;、サンプルのliveを表示して&lt;/a&gt;ください）。これらのボタンを押すと、 &lt;code&gt;setTargetAtTime()&lt;/code&gt; を使用してゲイン値を最大にフェードしますエフェクトは1秒後に開始し、エフェクトが継続する時間の長さはtimeConstantによって制御されます。</target>
        </trans-unit>
        <trans-unit id="9630380a9675da2560954aaf7b1eafa480b5cb09" translate="yes" xml:space="preserve">
          <source>In this example, we have an app that displays information about the number of channels available. To keep it up to date, handlers for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/addtrack&quot;&gt;addtrack&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/removetrack&quot;&gt;removetrack&lt;/a&gt;&lt;/code&gt; events are set up.</source>
          <target state="translated">この例では、利用可能なチャネルの数に関する情報を表示するアプリがあります。最新の状態に保つために、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/addtrack&quot;&gt;addtrack&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/removetrack&quot;&gt;removetrack&lt;/a&gt;&lt;/code&gt; イベントのハンドラーがセットアップされます。</target>
        </trans-unit>
        <trans-unit id="8c303f6da21dfb3d8c2b33d0a464e641f1dd2701" translate="yes" xml:space="preserve">
          <source>In this example, we have two paragraphs containing spans, each one containing a single word. The first one is set as the &lt;code&gt;anchorNode&lt;/code&gt; and the second is set as the &lt;code&gt;focusNode&lt;/code&gt;. We also have an additional paragraph that sits in between the two nodes.</source>
          <target state="translated">この例では、スパンを含む2つの段落があり、それぞれに1つの単語が含まれています。最初のものは、以下のように設定されている &lt;code&gt;anchorNode&lt;/code&gt; 及び第二のように設定されている &lt;code&gt;focusNode&lt;/code&gt; 。 2つのノードの間にある追加の段落もあります。</target>
        </trans-unit>
        <trans-unit id="81ca574b9f153f27f1c2ef8e8cb8240fc8d35f1d" translate="yes" xml:space="preserve">
          <source>In this example, we log to the screen which tone just finished playing. In a more advanced application, you might update the user interface, for example, to indicate which note is currently playing.</source>
          <target state="translated">この例では、どの音が演奏を終えたかを画面に記録しています。より高度なアプリケーションでは、例えば、どの音が現在演奏されているかを示すために、ユーザーインターフェイスを更新することがあります。</target>
        </trans-unit>
        <trans-unit id="81b7a389aa7c652466b303aba75d21853bc7296f" translate="yes" xml:space="preserve">
          <source>In this example, we make one canvas the drag image. As the canvas is 50 pixels wide and 50 pixels high, we use offsets of half of this (25 and 25) so that the image appears centered on the mouse pointer.</source>
          <target state="translated">この例では、1つのキャンバスをドラッグ画像にしています。キャンバスは幅50ピクセル、高さ50ピクセルなので、画像がマウスポインタの中心に表示されるように、この半分のオフセット(25と25)を使用します。</target>
        </trans-unit>
        <trans-unit id="c46188d764f23e23d335bbe677679eb481f819f5" translate="yes" xml:space="preserve">
          <source>In this example, we obtain the usage estimates and present the percentage of storage capacity currently used to the user.</source>
          <target state="translated">本実施例では、使用推定値を取得し、現在使用されているストレージ容量の割合をユーザに提示する。</target>
        </trans-unit>
        <trans-unit id="9337e308804ef69389c8d203e7e002cfad5dbac6" translate="yes" xml:space="preserve">
          <source>In this example, we once again use two &lt;code&gt;for&lt;/code&gt; loops to draw a grid of rectangles, each in a different color. The resulting image should look something like the screenshot. There is nothing too spectacular happening here. We use the two variables &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; to generate a unique RGB color for each square, and only modify the red and green values. The blue channel has a fixed value. By modifying the channels, you can generate all kinds of palettes. By increasing the steps, you can achieve something that looks like the color palettes Photoshop uses.</source>
          <target state="translated">この例では、もう一度2つの &lt;code&gt;for&lt;/code&gt; ループを使用して、それぞれ異なる色の長方形のグリッドを描画します。結果の画像はスクリーンショットのようになります。ここではあまりにも壮観な出来事はありません。 2つの変数 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; を使用して、正方形ごとに一意のRGBカラーを生成し、赤と緑の値のみを変更します。青チャンネルは固定値です。チャンネルを変更することで、あらゆる種類のパレットを生成できます。ステップを増やすことで、Photoshopが使用するカラーパレットのような外観を実現できます。</target>
        </trans-unit>
        <trans-unit id="98af2039db8b66e977aa7991dd9d63518587d6f0" translate="yes" xml:space="preserve">
          <source>In this example, we provide a simple value of &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;audio&lt;/code&gt; property. This tells &lt;code&gt;getUserMedia()&lt;/code&gt; that we require an audio track, but we don't care about any specifics beyond that.</source>
          <target state="translated">この例では、 &lt;code&gt;audio&lt;/code&gt; プロパティに単純な値 &lt;code&gt;true&lt;/code&gt; を指定しています。これは、オーディオトラックが必要であることを &lt;code&gt;getUserMedia()&lt;/code&gt; に通知しますが、それ以上の詳細については気にしません。</target>
        </trans-unit>
        <trans-unit id="bb70d56b359412c2a32569e1159e9c723a8316c7" translate="yes" xml:space="preserve">
          <source>In this example, we provide a simple value of &lt;code&gt;true&lt;/code&gt; for the &lt;code&gt;video&lt;/code&gt; property. This tells &lt;code&gt;getUserMedia()&lt;/code&gt; that we require a video track, but we don't care about any specifics beyond that.</source>
          <target state="translated">この例では、 &lt;code&gt;video&lt;/code&gt; プロパティに単純な値 &lt;code&gt;true&lt;/code&gt; を指定しています。これは、ビデオトラックが必要であることを &lt;code&gt;getUserMedia()&lt;/code&gt; に通知しますが、それ以上の詳細については気にしません。</target>
        </trans-unit>
        <trans-unit id="e39a66a1a2f22dad8eb5785967592dff2d095705" translate="yes" xml:space="preserve">
          <source>In this example, we see a function which receives as input an SDP string containing an ICE candidate received from the remote peer during the signaling process.</source>
          <target state="translated">この例では、シグナリングプロセス中にリモートピアから受信したICE候補を含む SDP文字列を入力として受け取る関数を示す。</target>
        </trans-unit>
        <trans-unit id="07de7f5b0b830e6f80bde783fd8477ffaba0c870" translate="yes" xml:space="preserve">
          <source>In this example, we see a function which stops a streamed video by calling &lt;code&gt;stop()&lt;/code&gt; on every track on a given &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、指定された&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/video&quot;&gt; &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; の&lt;/a&gt;すべてのトラックで &lt;code&gt;stop()&lt;/code&gt; を呼び出すことにより、ストリーミングビデオを停止する関数を示しています。</target>
        </trans-unit>
        <trans-unit id="2a762c8a948bcebca5803e4da85bcb88b890eb53" translate="yes" xml:space="preserve">
          <source>In this example, we see how to obtain the list of form controls as well as how to access its members by index and by name or ID.</source>
          <target state="translated">この例では、フォームコントロールのリストを取得する方法と、そのメンバーにインデックスや名前やIDでアクセスする方法を見てみましょう。</target>
        </trans-unit>
        <trans-unit id="4e94b37ba240c064e307d3a473ef2d23402a3fc7" translate="yes" xml:space="preserve">
          <source>In this example, we see the client-side code needed to support merchant validation for a payment request called &lt;code&gt;payRequest&lt;/code&gt;:</source>
          <target state="translated">この例では、 &lt;code&gt;payRequest&lt;/code&gt; と呼ばれる支払い要求のマーチャント検証をサポートするために必要なクライアント側コードが表示されています。</target>
        </trans-unit>
        <trans-unit id="397540554038af1abe7e13ccd4b7117cb5f6cbe6" translate="yes" xml:space="preserve">
          <source>In this example, we set the &lt;code&gt;myP&lt;/code&gt; variable to the DOM object for the second &lt;code&gt;p&lt;/code&gt; element inside the body:</source>
          <target state="translated">この例では、本体内の2番目の &lt;code&gt;p&lt;/code&gt; 要素のDOMオブジェクトに &lt;code&gt;myP&lt;/code&gt; 変数を設定します。</target>
        </trans-unit>
        <trans-unit id="193a5e01e317a4cf3badfeacdf6f6924e166662a" translate="yes" xml:space="preserve">
          <source>In this example, we use the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionrun&quot;&gt;transitionrun&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionend&quot;&gt;transitionend&lt;/a&gt;&lt;/code&gt; events to detect when the transition begins and ends, to cause a text update to occur during the transition. This could also be used to trigger animations or other effects, to allow chaining of reactions.</source>
          <target state="translated">この例では、使用 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionrun&quot;&gt;transitionrun&lt;/a&gt;&lt;/code&gt; と &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/transitionend&quot;&gt;transitionend&lt;/a&gt;&lt;/code&gt; 移行が開始および終了時にテキスト更新が移行中に発生させるために、検出するためのイベントを。これは、アニメーションやその他の効果をトリガーして、反応の連鎖を可能にするためにも使用できます。</target>
        </trans-unit>
        <trans-unit id="cfea6be697c26a8e3b806b6a604c6b803f975696" translate="yes" xml:space="preserve">
          <source>In this example, we use the &lt;code&gt;contains&lt;/code&gt; method to check if the type &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#link&quot;&gt;text/uri-list&lt;/a&gt; is present in the list of types. If it is, we will cancel the event so that a drop may be allowed. If the drag data does not contain a link, the event will not be cancelled, and a drop cannot occur at that location.</source>
          <target state="translated">この例では、 &lt;code&gt;contains&lt;/code&gt; メソッドを使用して、タイプの&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/DragDrop/Recommended_Drag_Types#link&quot;&gt;リストにtext / uri-list&lt;/a&gt;タイプが存在するかどうかを確認します。そうであれば、ドロップを許可するためにイベントをキャンセルします。ドラッグデータにリンクが含まれていない場合、イベントはキャンセルされず、その場所でドロップは発生しません。</target>
        </trans-unit>
        <trans-unit id="c125208a146c8df7cf111d5d4b663bb2d72f5078" translate="yes" xml:space="preserve">
          <source>In this example, we use two &lt;code&gt;for&lt;/code&gt; loops and the &lt;a href=&quot;arc&quot;&gt;&lt;code&gt;arc()&lt;/code&gt;&lt;/a&gt; method to draw a grid of circles, each having a different stroke color. To achieve this, we use the two variables &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; to generate a unique RGB color for each circle, and only modify the green and blue values. (The red channel has a fixed value.)</source>
          <target state="translated">この例では、2つの &lt;code&gt;for&lt;/code&gt; ループと&lt;a href=&quot;arc&quot;&gt; &lt;code&gt;arc()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、それぞれが異なるストロークカラーを持つ円のグリッドを描画します。これを実現するには、2つの変数 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; を使用して、各円に一意のRGBカラーを生成し、緑と青の値のみを変更します。（赤のチャネルは固定値です。）</target>
        </trans-unit>
        <trans-unit id="8b7ece5ac40d64b3011ce5d10aef00c57dce8beb" translate="yes" xml:space="preserve">
          <source>In this example, we use two &lt;code&gt;for&lt;/code&gt; loops to draw a grid of rectangles, each having a different fill color. To achieve this, we use the two variables &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; to generate a unique RGB color for each square, and only modify the red and green values. (The blue channel has a fixed value.) By modifying the channels, you can generate all kinds of palettes.</source>
          <target state="translated">この例では、2つの &lt;code&gt;for&lt;/code&gt; ループを使用して、それぞれ異なる塗りつぶし色を持つ長方形のグリッドを描画します。これを実現するには、2つの変数 &lt;code&gt;i&lt;/code&gt; と &lt;code&gt;j&lt;/code&gt; を使用して、各正方形に一意のRGBカラーを生成し、赤と緑の値のみを変更します。（青のチャネルは固定値です。）チャネルを変更することで、あらゆる種類のパレットを生成できます。</target>
        </trans-unit>
        <trans-unit id="be30db5e965764d08737c1735711edf22d8bf31f" translate="yes" xml:space="preserve">
          <source>In this example, we watch for changes both to the charging status (whether or not we're plugged in and charging) and for changes to the battery level and timing. This is done by listening for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/chargingchange&quot;&gt;chargingchange&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/levelchange&quot;&gt;levelchange&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/chargingtimechange&quot;&gt;chargingtimechange&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dischargingtimechange&quot;&gt;dischargingtimechange&lt;/a&gt;&lt;/code&gt; events.</source>
          <target state="translated">この例では、充電状態の変化（プラグインして充電しているかどうか）と、バッテリーレベルとタイミングの変化の両方を監視しています。これは、のために聞くことによって行われる &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/chargingchange&quot;&gt;chargingchange&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/levelchange&quot;&gt;levelchange&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/chargingtimechange&quot;&gt;chargingtimechange&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dischargingtimechange&quot;&gt;dischargingtimechange&lt;/a&gt;&lt;/code&gt; のイベント。</target>
        </trans-unit>
        <trans-unit id="1ae1903a2ce8da21cbd358cb28830bbf3a11b07c" translate="yes" xml:space="preserve">
          <source>In this example, we will be altering the gain value of a &lt;a href=&quot;../gainnode&quot;&gt;&lt;code&gt;GainNode&lt;/code&gt;&lt;/a&gt; using an &lt;a href=&quot;../oscillatornode&quot;&gt;&lt;code&gt;OscillatorNode&lt;/code&gt;&lt;/a&gt; with a slow frequency value. This technique is know as an &lt;em&gt;LFO&lt;/em&gt;-controlled parameter.</source>
          <target state="translated">この例では、遅い周波数値の&lt;a href=&quot;../oscillatornode&quot;&gt; &lt;code&gt;OscillatorNode&lt;/code&gt; &lt;/a&gt;を使用して、&lt;a href=&quot;../gainnode&quot;&gt; &lt;code&gt;GainNode&lt;/code&gt; の&lt;/a&gt;ゲイン値を変更します。この手法は、&lt;em&gt;LFOで&lt;/em&gt;制御されるパラメーターとして知られています。&lt;em&gt;&lt;/em&gt;</target>
        </trans-unit>
        <trans-unit id="19f0b555340040f31f931795cc5628714d581fce" translate="yes" xml:space="preserve">
          <source>In this example, we will open an &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; connection linking two elements on the same page. While that's obviously a contrived scenario, it's useful for demonstrating the flow of connecting two peers. We'll cover the mechanics of accomplishing the connection and transmitting and receiving data, but we will save the bits about locating and linking to a remote computer for another example.</source>
          <target state="translated">この例では、同じページの2つの要素をリンクする&lt;a href=&quot;../rtcdatachannel&quot;&gt; &lt;code&gt;RTCDataChannel&lt;/code&gt; &lt;/a&gt;接続を開きます。これは明らかに不自然なシナリオですが、2つのピアを接続するフローを示すのに役立ちます。接続を確立し、データを送受信するメカニズムについて説明しますが、別の例として、リモートコンピューターの検索とリンクに関するビットを節約します。</target>
        </trans-unit>
        <trans-unit id="ebc0efdb9335d1e7ab7fba33a0a6e566348c0244" translate="yes" xml:space="preserve">
          <source>In this example, we'll actually rotate our square plane.</source>
          <target state="translated">この例では、実際に正方形の平面を回転させてみましょう。</target>
        </trans-unit>
        <trans-unit id="e2ae0369b063e5cb8b02e4cd4f3cc3db65cf0a8d" translate="yes" xml:space="preserve">
          <source>In this example, we'll create two different gradients. As you can see here, both the &lt;code&gt;strokeStyle&lt;/code&gt; and &lt;code&gt;fillStyle&lt;/code&gt; properties can accept a &lt;code&gt;canvasGradient&lt;/code&gt; object as valid input.</source>
          <target state="translated">この例では、2つの異なるグラデーションを作成します。ここでわかるように、 &lt;code&gt;strokeStyle&lt;/code&gt; プロパティと &lt;code&gt;fillStyle&lt;/code&gt; プロパティはどちらも &lt;code&gt;canvasGradient&lt;/code&gt; オブジェクトを有効な入力として受け入れることができます。</target>
        </trans-unit>
        <trans-unit id="814128aec4e84ce67ab137a622034343272a35c8" translate="yes" xml:space="preserve">
          <source>In this example, we'll define four different radial gradients. Because we have control over the start and closing points of the gradient, we can achieve more complex effects than we would normally have in the &quot;classic&quot; radial gradients we see in, for instance, Photoshop (that is, a gradient with a single center point where the gradient expands outward in a circular shape).</source>
          <target state="translated">この例では、4 つの異なる放射状グラデーションを定義します。グラデーションの開始点と終了点を制御できるので、たとえば Photoshop などで見られる「古典的な」放射状グラデーション (つまり、中心点が 1 つのグラデーションで、グラデーションが外側に向かって円形に拡大するグラデーション)よりも複雑な効果を得ることができます。</target>
        </trans-unit>
        <trans-unit id="abf24155846543a1d608deadac53d6bae4401a7a" translate="yes" xml:space="preserve">
          <source>In this example, we'll demonstrate how changing the orientation parameters of a &lt;a href=&quot;../pannernode&quot;&gt;&lt;code&gt;PannerNode&lt;/code&gt;&lt;/a&gt; in combination with &lt;a href=&quot;coneinnerangle&quot;&gt;&lt;code&gt;coneInnerAngle&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;coneouterangle&quot;&gt;&lt;code&gt;coneOuterAngle&lt;/code&gt;&lt;/a&gt; affects volume. To help us visualise how the orientation vector affects, we can use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Right-hand_rule&quot;&gt;Right-hand rule&lt;/a&gt;:</source>
          <target state="translated">この例では、&lt;a href=&quot;coneinnerangle&quot;&gt; &lt;code&gt;coneInnerAngle&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;coneouterangle&quot;&gt; &lt;code&gt;coneOuterAngle&lt;/code&gt; &lt;/a&gt;と組み合わせてPannerNodeの方向パラメーターを変更すると、&lt;a href=&quot;../pannernode&quot;&gt; &lt;code&gt;PannerNode&lt;/code&gt; &lt;/a&gt;にどのように影響するかを示します。方向ベクトルがどのように影響するかを視覚化するために、&lt;a href=&quot;https://en.wikipedia.org/wiki/Right-hand_rule&quot;&gt;右手の法則を&lt;/a&gt;使用できます。</target>
        </trans-unit>
        <trans-unit id="34bd2e6da323133b67c6f5dd47b77a02943750d6" translate="yes" xml:space="preserve">
          <source>In this example, we'll draw a background of four different colored squares. On top of these, we'll draw a set of semi-transparent circles. The &lt;code&gt;globalAlpha&lt;/code&gt; property is set at &lt;code&gt;0.2&lt;/code&gt; which will be used for all shapes from that point on. Every step in the &lt;code&gt;for&lt;/code&gt; loop draws a set of circles with an increasing radius. The final result is a radial gradient. By overlaying ever more circles on top of each other, we effectively reduce the transparency of the circles that have already been drawn. By increasing the step count and in effect drawing more circles, the background would completely disappear from the center of the image.</source>
          <target state="translated">この例では、4つの異なる色の正方形の背景を描画します。これらの上に、半透明の円のセットを描画します。 &lt;code&gt;globalAlpha&lt;/code&gt; のプロパティがに設定されている &lt;code&gt;0.2&lt;/code&gt; にその時点からすべての図形に使用されるであろう。 &lt;code&gt;for&lt;/code&gt; ループのすべてのステップで、半径が増加する一連の円を描画します。最終結果は、放射状グラデーションです。円をさらに重ね合わせることで、すでに描かれている円の透明度を効果的に減らします。ステップ数を増やし、実際にはより多くの円を描くことにより、背景が画像の中心から完全に消えます。</target>
        </trans-unit>
        <trans-unit id="e9e6f189c11322e25d3b6e4f1f02eabbb327fe6b" translate="yes" xml:space="preserve">
          <source>In this example, we'll draw three lines, each with a different value for the &lt;code&gt;lineCap&lt;/code&gt; property. I also added two guides to see the exact differences between the three. Each of these lines starts and ends exactly on these guides.</source>
          <target state="translated">この例では、3つの線を描画し、それぞれに &lt;code&gt;lineCap&lt;/code&gt; プロパティの異なる値を設定します。また、2つのガイドを追加して、3つのガイドの正確な違いを確認しました。これらの各行は、これらのガイドで正確に開始および終了します。</target>
        </trans-unit>
        <trans-unit id="4f43b2c421608328632877c3d333f1f5d4347714" translate="yes" xml:space="preserve">
          <source>In this example, we'll take a look at how you can use &lt;a href=&quot;window/requestidlecallback&quot;&gt;&lt;code&gt;requestIdleCallback()&lt;/code&gt;&lt;/a&gt; to run time-consuming, low-priority tasks during time the browser would otherwise be idle. In addition, this example demonstrates how to schedule updates to the document content using &lt;a href=&quot;window/requestanimationframe&quot;&gt;&lt;code&gt;requestAnimationFrame()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この例では、&lt;a href=&quot;window/requestidlecallback&quot;&gt; &lt;code&gt;requestIdleCallback()&lt;/code&gt; &lt;/a&gt;を使用して、ブラウザがアイドル状態である間に、時間のかかる低優先度のタスクを実行する方法を見ていきます。さらに、この例は、&lt;a href=&quot;window/requestanimationframe&quot;&gt; &lt;code&gt;requestAnimationFrame()&lt;/code&gt; &lt;/a&gt;を使用してドキュメントコンテンツの更新をスケジュールする方法を示しています。</target>
        </trans-unit>
        <trans-unit id="17e17790be8217891122ba9446c743e32e6b8ece" translate="yes" xml:space="preserve">
          <source>In this example, we'll use a circular clipping path to restrict the drawing of a set of random stars to a particular region.</source>
          <target state="translated">この例では、円形のクリッピングパスを使用して、ランダムな星のセットの描画を特定の領域に制限します。</target>
        </trans-unit>
        <trans-unit id="266ee78f5cef2206a78b0c9edd7e566f1c1b980e" translate="yes" xml:space="preserve">
          <source>In this example, we'll use an image as a wallpaper and repeat it several times on the canvas. This is done simply by looping and placing the scaled images at different positions. In the code below, the first &lt;code&gt;for&lt;/code&gt; loop iterates over the rows. The second &lt;code&gt;for&lt;/code&gt; loop iterates over the columns. The image is scaled to one third of its original size, which is 50x38 pixels.</source>
          <target state="translated">この例では、画像を壁紙として使用し、キャンバス上で数回繰り返します。これは単に、スケーリングされた画像をループして、異なる位置に配置することによって行われます。以下のコードでは、最初の &lt;code&gt;for&lt;/code&gt; ループが行を反復処理します。2番目の &lt;code&gt;for&lt;/code&gt; ループは列を反復処理します。画像は元のサイズの3分の1、つまり50x38ピクセルにスケーリングされます。</target>
        </trans-unit>
        <trans-unit id="022a2e3e42b8d904439f150fc539e6602925f0ad" translate="yes" xml:space="preserve">
          <source>In this example, we'll use the &lt;code&gt;rotate()&lt;/code&gt; method to first rotate a rectangle from the canvas origin and then from the center of the rectangle itself with the help of &lt;code&gt;translate()&lt;/code&gt;.</source>
          <target state="translated">この例では、 &lt;code&gt;rotate()&lt;/code&gt; メソッドを使用して、まずキャンバスの原点から長方形を回転させ、次に &lt;code&gt;translate()&lt;/code&gt; を使用して長方形自体の中心から回転させます。</target>
        </trans-unit>
        <trans-unit id="c58fa8c8ea0380b25ba655c866f0bb3a7fd8a411" translate="yes" xml:space="preserve">
          <source>In this example, we'll use the same rhino as in the previous example, but we'll slice out its head and composite it into a picture frame. The picture frame image is a 24-bit PNG which includes a drop shadow. Because 24-bit PNG images include a full 8-bit alpha channel, unlike GIF and 8-bit PNG images, it can be placed onto any background without worrying about a matte color.</source>
          <target state="translated">この例では、先ほどの例と同じサイを使いますが、頭をスライスして額縁に合成します。ピクチャーフレーム画像は、ドロップシャドウを含む24ビットのPNG画像です。24ビットPNG画像はGIFや8ビットPNG画像と違って8ビットのアルファチャンネルを完全に含んでいるので、マットな色を気にせずにどんな背景にも配置できます。</target>
        </trans-unit>
        <trans-unit id="05ea17c4f059e35225af14b1428fb4f8cc607a3f" translate="yes" xml:space="preserve">
          <source>In this example, we're not computing any lighting at all, since we haven't yet applied any to the scene. That will come later, in the example &lt;a href=&quot;lighting_in_webgl&quot;&gt;Lighting in WebGL&lt;/a&gt;. Note also the lack of any work with textures here; that will be added in &lt;a href=&quot;using_textures_in_webgl&quot;&gt;Using textures in WebGL&lt;/a&gt;.</source>
          <target state="translated">この例では、まだシーンに何も適用していないため、照明をまったく計算していません。これは後で、&lt;a href=&quot;lighting_in_webgl&quot;&gt;WebGLの照明&lt;/a&gt;の例で説明します。ここでテクスチャを使用した作業がないことにも注意してください。これは&lt;a href=&quot;using_textures_in_webgl&quot;&gt;、WebGLでのテクスチャの使用&lt;/a&gt;で追加されます。</target>
        </trans-unit>
        <trans-unit id="c2f0f67e4ce391ad82aaecc6f16683f4555d0d01" translate="yes" xml:space="preserve">
          <source>In this example, we're turning the element with the ID &lt;code&gt;dropbox&lt;/code&gt; into our drop zone. This is done by adding listeners for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt;, &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt;, and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; events.</source>
          <target state="translated">この例では、ID &lt;code&gt;dropbox&lt;/code&gt; を持つ要素をドロップゾーンに変換しています。これを行うには、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragenter&quot;&gt;dragenter&lt;/a&gt;&lt;/code&gt; 、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/dragover&quot;&gt;dragover&lt;/a&gt;&lt;/code&gt; 、および &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/drop&quot;&gt;drop&lt;/a&gt;&lt;/code&gt; イベントのリスナーを追加します。</target>
        </trans-unit>
        <trans-unit id="30fd2479a473fe2accd8672d7ae0f1020810c674" translate="yes" xml:space="preserve">
          <source>In this example, when selecting &lt;code&gt;&quot;.outer .inner&quot;&lt;/code&gt; in the context the &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; with the class &lt;code&gt;&quot;select&quot;&lt;/code&gt;, the element with the class &lt;code&gt;&quot;.inner&quot;&lt;/code&gt; is still found, even though &lt;code&gt;.outer&lt;/code&gt; is not a descendant of the base element on which the search is performed (&lt;code&gt;&quot;.select&quot;&lt;/code&gt;). By default, &lt;code&gt;querySelectorAll()&lt;/code&gt; only verifies that the last element in the selector is within the search scope.</source>
          <target state="translated">この例では、クラス &lt;code&gt;&quot;select&quot;&lt;/code&gt; の &lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt; コンテキストで &lt;code&gt;&quot;.outer .inner&quot;&lt;/code&gt; を選択すると、 &lt;code&gt;.outer&lt;/code&gt; がベースの子孫ではなくても、クラス &lt;code&gt;&quot;.inner&quot;&lt;/code&gt; の要素がまだ見つかります。検索が実行される要素（ &lt;code&gt;&quot;.select&quot;&lt;/code&gt; ）。デフォルトでは、 &lt;code&gt;querySelectorAll()&lt;/code&gt; は、セレクターの最後の要素が検索範囲内にあることのみを確認します。</target>
        </trans-unit>
        <trans-unit id="cca8b2079efbc5a79438c07b451ae507ba7434a5" translate="yes" xml:space="preserve">
          <source>In this example, you use the &lt;a href=&quot;../pointer_events&quot;&gt;&lt;code&gt;pointer events&lt;/code&gt;&lt;/a&gt; to simultaneously detect two pointing devices of any type, including fingers, mice, and pens. The pinch in (zoom out ) gesture, which moves the two pointers toward each other, changes the target element's background color to &lt;code&gt;lightblue&lt;/code&gt;. The pinch out (zoom in) gesture, which moves the two pointers away from each other, changes the target element's background color to &lt;code&gt;pink&lt;/code&gt;.</source>
          <target state="translated">この例では、&lt;a href=&quot;../pointer_events&quot;&gt; &lt;code&gt;pointer events&lt;/code&gt; &lt;/a&gt;を使用して、指、マウス、ペンなど、任意のタイプの2つのポインティングデバイスを同時に検出します。ピンチイン（ズームアウト）ジェスチャー（2つのポインターを互いに近づける）は、ターゲット要素の背景色を &lt;code&gt;lightblue&lt;/code&gt; ます。ピンチアウト（ズームイン）ジェスチャーは、2つのポインターを相互に離し、ターゲット要素の背景色を &lt;code&gt;pink&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="5046379abd72346ca7dcb8f46945c3c6656e0318" translate="yes" xml:space="preserve">
          <source>In this first example, the first &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/a&gt; element which either has no type or has type &quot;text/css&quot; in the HTML document body is returned:</source>
          <target state="translated">この最初の例では、HTMLドキュメント本文にタイプがないか、タイプが「text / css」である最初の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/style&quot;&gt; &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; &lt;/a&gt;要素が返されます。</target>
        </trans-unit>
        <trans-unit id="fda36049e9aa613d57cbac65ccca7948c4968fc7" translate="yes" xml:space="preserve">
          <source>In this game, Alice has an animation that causes her to go from small to big which we control via a bottle and a cupcake. Both of these have their own animations.</source>
          <target state="translated">このゲームでは、アリスはボトルとカップケーキを介して制御する小さなから大きなへと彼女を引き起こすアニメーションを持っています。これらの両方は、独自のアニメーションを持っています。</target>
        </trans-unit>
        <trans-unit id="bb79012abaf6107ed9af637c940e7ec0f1c7c46e" translate="yes" xml:space="preserve">
          <source>In this group, &lt;code&gt;mozilla.org&lt;/code&gt;, &lt;code&gt;www.mozilla.org&lt;/code&gt;, and &lt;code&gt;joe.blogs.mozilla.org&lt;/code&gt; can aggregately use a maximum of 20% of the global limit. &lt;code&gt;firefox.com&lt;/code&gt; has a separate maximum of 20%.</source>
          <target state="translated">このグループでは、 &lt;code&gt;mozilla.org&lt;/code&gt; 、 &lt;code&gt;www.mozilla.org&lt;/code&gt; 、および &lt;code&gt;joe.blogs.mozilla.org&lt;/code&gt; は、グローバル制限の最大20％を合計して使用できます。 &lt;code&gt;firefox.com&lt;/code&gt; には別の最大20％があります。</target>
        </trans-unit>
        <trans-unit id="a8e182f7ec1df8b63f7f0149897b2fd1b4dac845" translate="yes" xml:space="preserve">
          <source>In this guide, we'll take a look at how to use &lt;a href=&quot;../xmlhttprequest&quot;&gt;&lt;code&gt;XMLHttpRequest&lt;/code&gt;&lt;/a&gt; to issue &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP&quot;&gt;HTTP&lt;/a&gt; requests in order to exchange data between the web site and a server. Examples of both common and more obscure use cases for &lt;code&gt;XMLHttpRequest&lt;/code&gt; are included.</source>
          <target state="translated">このガイドでは、Webサイトとサーバー間でデータを交換するために、&lt;a href=&quot;../xmlhttprequest&quot;&gt; &lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;/a&gt;を使用して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP&quot;&gt;HTTP&lt;/a&gt;リクエストを発行する方法について説明します。 &lt;code&gt;XMLHttpRequest&lt;/code&gt; の一般的な使用例とあいまいな使用例の両方が含まれています。</target>
        </trans-unit>
        <trans-unit id="59f5b5a68fd39578d554023865d5245c7df478f2" translate="yes" xml:space="preserve">
          <source>In this last example, we'll create a pattern to assign to the &lt;code&gt;fillStyle&lt;/code&gt; property. The only thing worth noting is the use of the image's &lt;code&gt;onload&lt;/code&gt; handler. This is to make sure the image is loaded before it is assigned to the pattern.</source>
          <target state="translated">この最後の例では、 &lt;code&gt;fillStyle&lt;/code&gt; プロパティに割り当てるパターンを作成します。注意すべき唯一のことは、イメージの &lt;code&gt;onload&lt;/code&gt; ハンドラーの使用です。これは、画像がパターンに割り当てられる前に読み込まれるようにするためです。</target>
        </trans-unit>
        <trans-unit id="7ef73d8b96e3c24bc5aaa79fb46030447718ec1c" translate="yes" xml:space="preserve">
          <source>In this last example, we'll draw shapes with different scaling factors.</source>
          <target state="translated">最後の例では、スケーリングファクターの異なる図形を描いてみましょう。</target>
        </trans-unit>
        <trans-unit id="61ca7ed45b8da0b66d08458393d793cf5ef4808a" translate="yes" xml:space="preserve">
          <source>In this revised example, the audio and video capabilities include possible codecs which should be permitted, and therefore are valid requests.</source>
          <target state="translated">この改訂例では、オーディオおよびビデオ機能は、許可されるべき可能性のあるコーデックを含み、したがって、有効な要求である。</target>
        </trans-unit>
        <trans-unit id="51085302b40fcc099af63f040e198ec714817da9" translate="yes" xml:space="preserve">
          <source>In this sample from a hypothetical instant messaging client, a data channel is created, then handlers for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; and &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; events are set up to enable and disable user interface objects based on the state of the channel. This way, the message entry field and the send button are only enabled for use when the connection is actually open.</source>
          <target state="translated">架空のインスタントメッセージングクライアントからのこのサンプルでは、​​データチャネルが作成され、チャネルの状態に基づいてユーザーインターフェイスオブジェクトを有効または無効にするために、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/open&quot;&gt;open&lt;/a&gt;&lt;/code&gt; および &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/close&quot;&gt;close&lt;/a&gt;&lt;/code&gt; イベントのハンドラーが設定されます。このようにして、メッセージ入力フィールドと送信ボタンは、接続が実際に開いている場合にのみ使用可能になります。</target>
        </trans-unit>
        <trans-unit id="379d3246f5406ec54e7fd0d095b9573687300cf0" translate="yes" xml:space="preserve">
          <source>In this second example, we do something similar to the one above, but instead of drawing circles on top of each other, I've drawn small rectangles with increasing opacity. Using &lt;code&gt;rgba()&lt;/code&gt; gives you a little more control and flexibility because we can set the fill and stroke style individually.</source>
          <target state="translated">この2番目の例では、上の例と同様の処理を行いますが、円を重ねて描画する代わりに、不透明度を上げながら小さな長方形を描画しました。 &lt;code&gt;rgba()&lt;/code&gt; を使用すると、塗りと線のスタイルを個別に設定できるため、制御と柔軟性が少し向上します。</target>
        </trans-unit>
        <trans-unit id="5f2cb59106a8f250c21ba056000d24c7048b0a78" translate="yes" xml:space="preserve">
          <source>In this section</source>
          <target state="translated">このセクションでは</target>
        </trans-unit>
        <trans-unit id="a3f0061b9db31137ebd46a70468da2be4481cf47" translate="yes" xml:space="preserve">
          <source>In this section we will first cover the older callback-based system and then the newer promise-based syntax.</source>
          <target state="translated">このセクションでは、まず古いコールバックベースのシステム、そして新しいプロミスベースの構文について説明します。</target>
        </trans-unit>
        <trans-unit id="f5e6a6420d067c107db21582be6db10d8306f1d7" translate="yes" xml:space="preserve">
          <source>In this section we'll discuss the &lt;code&gt;displayPoseStats()&lt;/code&gt; function, which displays our updated pose data on each frame. The function is fairly simple.</source>
          <target state="translated">このセクションでは、更新されたポーズデータを各フレームに表示する &lt;code&gt;displayPoseStats()&lt;/code&gt; 関数について説明します。機能はかなりシンプルです。</target>
        </trans-unit>
        <trans-unit id="9cc82d7cefd9413d0371a52786476131facb6c5f" translate="yes" xml:space="preserve">
          <source>In this simple example, an event listener for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/ended&quot;&gt;ended&lt;/a&gt;&lt;/code&gt; event is set up to enable a &quot;Start&quot; button in the user interface when the node stops playing.</source>
          <target state="translated">この簡単な例では、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/ended&quot;&gt;ended&lt;/a&gt;&lt;/code&gt; イベントのイベントリスナーを設定して、ノードの再生が停止したときにユーザーインターフェイスの[開始]ボタンを有効にします。</target>
        </trans-unit>
        <trans-unit id="b95f20b6e939798cff1ad8b1476f55e7ed05bbb3" translate="yes" xml:space="preserve">
          <source>In this simple example, an intersection callback is used to update a counter of how many targeted elements are currently intersecting with the &lt;a href=&quot;../intersectionobserver/root&quot;&gt;intersection root&lt;/a&gt;.</source>
          <target state="translated">この単純な例では、交差コールバックを使用して、&lt;a href=&quot;../intersectionobserver/root&quot;&gt;交差ルート&lt;/a&gt;と現在交差しているターゲット要素の数のカウンターを更新します。</target>
        </trans-unit>
        <trans-unit id="2f69406f44746401693b0b0ca00283839421f947" translate="yes" xml:space="preserve">
          <source>In this simple example, an intersection callback sets each target element's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity&quot;&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/a&gt; to the intersection ratio of that element with the root.</source>
          <target state="translated">この単純な例では、交差コールバックは、各ターゲット要素の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity&quot;&gt; &lt;code&gt;opacity&lt;/code&gt; &lt;/a&gt;を、その要素とルートの交差率に設定します。</target>
        </trans-unit>
        <trans-unit id="8770d442b646ceb6f776efde1f482da12ad52e60" translate="yes" xml:space="preserve">
          <source>In this simple example, an intersection callback stores the intersection rectangle for later use by the code that draws the target elements' contents, so that only the visible area is redrawn.</source>
          <target state="translated">この単純な例では、交差のコールバックは、ターゲット要素の内容を描画するコードが後で使用するために交差の矩形を保存し、可視領域のみが再描画されるようにしています。</target>
        </trans-unit>
        <trans-unit id="83744b534492cb2ff2bd028e44378cb72e7e58c5" translate="yes" xml:space="preserve">
          <source>In this simple example, each targeted element's &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity&quot;&gt;&lt;code&gt;opacity&lt;/code&gt;&lt;/a&gt; is set to its &lt;a href=&quot;intersectionratio&quot;&gt;&lt;code&gt;intersectionRatio&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この単純な例では、各ターゲット要素の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/opacity&quot;&gt; &lt;code&gt;opacity&lt;/code&gt; &lt;/a&gt;は、&lt;a href=&quot;intersectionratio&quot;&gt; &lt;code&gt;intersectionRatio&lt;/code&gt; に&lt;/a&gt;設定されています。</target>
        </trans-unit>
        <trans-unit id="dc3628ae8209202b0b2c37b436dfd071255a3fef" translate="yes" xml:space="preserve">
          <source>In this simple example, some basic style properties of an HTML paragraph element are accessed using the style object on the element and that object's CSS style properties, which can be retrieved and set from the DOM. In this case, you are manipulating the individual styles directly. In the next example (see Example 4), you can use stylesheets and their rules to change styles for whole documents.</source>
          <target state="translated">この単純な例では、HTML 段落要素のいくつかの基本的なスタイル・プロパティには、要素上のスタイル・オブジェクトと、そのオブジェクトの CSS スタイル・プロパティを使用してアクセスします。この場合、個々のスタイルを直接操作していることになります。次の例(例4参照)では、スタイルシートとそのルールを使って、ドキュメント全体のスタイルを変更することができます。</target>
        </trans-unit>
        <trans-unit id="1fc9de96d086a09ee6097fc69fdf1594bb8c872e" translate="yes" xml:space="preserve">
          <source>In this simple example, we declare both an &lt;a href=&quot;../audiocontext&quot;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt; and an &lt;code&gt;OfflineAudioContext&lt;/code&gt; object. We use the &lt;code&gt;AudioContext&lt;/code&gt; to load an audio track via XHR (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt;&lt;/a&gt;), then the &lt;code&gt;OfflineAudioContext&lt;/code&gt; to render the audio into an &lt;a href=&quot;../audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; and play the track through. After the offline audio graph is set up, you need to render it to an &lt;a href=&quot;../audiobuffer&quot;&gt;&lt;code&gt;AudioBuffer&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;startrendering&quot;&gt;&lt;code&gt;OfflineAudioContext.startRendering&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この簡単な例では、&lt;a href=&quot;../audiocontext&quot;&gt; &lt;code&gt;AudioContext&lt;/code&gt; &lt;/a&gt;オブジェクトと &lt;code&gt;OfflineAudioContext&lt;/code&gt; オブジェクトの両方を宣言しています。 &lt;code&gt;AudioContext&lt;/code&gt; を使用してXHR（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt; &lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt; &lt;/a&gt;）を介してオーディオトラックを読み込み、次に &lt;code&gt;OfflineAudioContext&lt;/code&gt; を使用してオーディオを&lt;a href=&quot;../audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; &lt;/a&gt;にレンダリングし、トラックを再生します。オフラインオーディオグラフを設定したら、&lt;a href=&quot;startrendering&quot;&gt; &lt;code&gt;OfflineAudioContext.startRendering&lt;/code&gt; &lt;/a&gt;を使用してそれを&lt;a href=&quot;../audiobuffer&quot;&gt; &lt;code&gt;AudioBuffer&lt;/code&gt; &lt;/a&gt;にレンダリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="82e4af4070c1ad769f784c88b76d773a5e5c44ea" translate="yes" xml:space="preserve">
          <source>In this simple example, we declare both an &lt;a href=&quot;audiocontext&quot;&gt;&lt;code&gt;AudioContext&lt;/code&gt;&lt;/a&gt; and an &lt;code&gt;OfflineAudioContext&lt;/code&gt; object. We use the &lt;code&gt;AudioContext&lt;/code&gt; to load an audio track via XHR (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt;&lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt;&lt;/a&gt;), then the &lt;code&gt;OfflineAudioContext&lt;/code&gt; to render the audio into an &lt;a href=&quot;audiobuffersourcenode&quot;&gt;&lt;code&gt;AudioBufferSourceNode&lt;/code&gt;&lt;/a&gt; and play the track through. After the offline audio graph is set up, you need to render it to an &lt;a href=&quot;audiobuffer&quot;&gt;&lt;code&gt;AudioBuffer&lt;/code&gt;&lt;/a&gt; using &lt;a href=&quot;offlineaudiocontext/startrendering&quot;&gt;&lt;code&gt;OfflineAudioContext.startRendering&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">この簡単な例では、&lt;a href=&quot;audiocontext&quot;&gt; &lt;code&gt;AudioContext&lt;/code&gt; &lt;/a&gt;オブジェクトと &lt;code&gt;OfflineAudioContext&lt;/code&gt; オブジェクトの両方を宣言しています。 &lt;code&gt;AudioContext&lt;/code&gt; を使用してXHR（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/AudioContext/decodeAudioData&quot;&gt; &lt;code&gt;AudioContext.decodeAudioData&lt;/code&gt; &lt;/a&gt;）を介してオーディオトラックを読み込み、次に &lt;code&gt;OfflineAudioContext&lt;/code&gt; を使用してオーディオを&lt;a href=&quot;audiobuffersourcenode&quot;&gt; &lt;code&gt;AudioBufferSourceNode&lt;/code&gt; &lt;/a&gt;にレンダリングし、トラックを再生します。オフラインオーディオグラフを設定したら、&lt;a href=&quot;offlineaudiocontext/startrendering&quot;&gt; &lt;code&gt;OfflineAudioContext.startRendering&lt;/code&gt; &lt;/a&gt;を使用してそれを&lt;a href=&quot;audiobuffer&quot;&gt; &lt;code&gt;AudioBuffer&lt;/code&gt; &lt;/a&gt;にレンダリングする必要があります。</target>
        </trans-unit>
        <trans-unit id="681ab51c9dd14526c8ee92e5a13e0431bfa956dd" translate="yes" xml:space="preserve">
          <source>In this simple example, we fetch the user's location and display the resulting coordinates once they're returned.</source>
          <target state="translated">このシンプルな例では、ユーザーの位置情報を取得して、その座標を返した後に表示します。</target>
        </trans-unit>
        <trans-unit id="a05d3336a426baa2f1e1a5bcaabb75b821cb1751" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then count the number of records in the store using &lt;code&gt;count()&lt;/code&gt; &amp;mdash; when the success handler fires, we log the count value (an integer) to the console.</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得してから、 &lt;code&gt;count()&lt;/code&gt; を使用してストア内のレコード数をカウントします。成功ハンドラが起動すると、カウント値（整数）をコンソールに記録します。</target>
        </trans-unit>
        <trans-unit id="55594aaf4907355f8a97d6ded8e81c58aeddff5c" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. If the &lt;code&gt;albumTitle&lt;/code&gt; of the current cursor is &quot;A farewell to kings&quot;, we update year the album was released using &lt;code&gt;var request = cursor.update();&lt;/code&gt;.</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストア内のすべてのレコードを反復処理します。場合 &lt;code&gt;albumTitle&lt;/code&gt; 現在のカーソルのが「王にお別れ」で、私たちはアルバムを使用してリリースされた年更新 &lt;code&gt;var request = cursor.update();&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d622d98b6db09b89272000416c2a7cda1761e9c2" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. If the &lt;code&gt;albumTitle&lt;/code&gt; of the current cursor is &quot;Grace under pressure&quot;, we delete that entire record using &lt;code&gt;var request = cursor.delete();&lt;/code&gt;.</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストア内のすべてのレコードを反復処理します。場合 &lt;code&gt;albumTitle&lt;/code&gt; 現在のカーソルのが「圧力下でグレース」で、我々は使用してそのレコード全体を削除 &lt;code&gt;var request = cursor.delete();&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="32aec80fac39a5ef7f1168b19d20800c4854adba" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. The cursor does not require us to select the data based on a key; we can just grab all of it. Also note that in each iteration of the loop, you can grab data from the current record under the cursor object using &lt;code&gt;cursor.value.foo&lt;/code&gt;. For a complete working example, see our &lt;a href=&quot;https://github.com/mdn/indexeddb-examples/tree/master/idbcursor&quot;&gt;IDBCursor example&lt;/a&gt; (&lt;a href=&quot;https://mdn.github.io/indexeddb-examples/idbcursor/&quot;&gt;view example live&lt;/a&gt;.)</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストア内のすべてのレコードを反復処理します。カーソルでは、キーに基づいてデータを選択する必要はありません。すべてを取得できます。また、ループの各反復で、 &lt;code&gt;cursor.value.foo&lt;/code&gt; を使用して、カーソルオブジェクトの下の現在のレコードからデータを取得できることにも注意してください。完全な実用例については、&lt;a href=&quot;https://github.com/mdn/indexeddb-examples/tree/master/idbcursor&quot;&gt;IDBCursorの例を&lt;/a&gt;参照してください（&lt;a href=&quot;https://mdn.github.io/indexeddb-examples/idbcursor/&quot;&gt;例のライブを表示&lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="832a70d0e060bd84daa7eb798d106c513fdb77c8" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the direction of the cursor, something like this:</source>
          <target state="translated">この単純な断片では、トランザクションを作成し、オブジェクトストアを取得し、カーソルを使用してオブジェクトストア内のすべてのレコードを反復します。各反復の中で、カーソルの方向を以下のようにログに記録します。</target>
        </trans-unit>
        <trans-unit id="814c0e566f410daf5c70e8490e53955f7fb4b66a" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the key of the cursor to the console, something like this (its the album title in each case, which is our key).</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得し、カーソルを使用してオブジェクトストア内のすべてのレコードを反復します。各反復の中で、カーソルのキーをコンソールに記録します。</target>
        </trans-unit>
        <trans-unit id="4cba140ebb5bc58e4a4354e3c40ea79f806a0635" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the primary key of the cursor to the console, something like this (its the album title in each case, which is our primarykey):</source>
          <target state="translated">この単純な断片では、トランザクションを作成し、オブジェクトストアを取得し、カーソルを使用してオブジェクトストア内の全てのレコードを反復します。各反復の中で、カーソルの主キーをコンソールに記録します。</target>
        </trans-unit>
        <trans-unit id="850d106da3d9514aacc08416cf7006deab08d008" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store. Within each iteration we log the source of the cursor, which will log our &lt;a href=&quot;../idbobjectstore&quot;&gt;&lt;code&gt;IDBobjectStore&lt;/code&gt;&lt;/a&gt; object to the console, something like this:</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストア内のすべてのレコードを反復処理します。各反復内で、次のような&lt;a href=&quot;../idbobjectstore&quot;&gt; &lt;code&gt;IDBobjectStore&lt;/code&gt; &lt;/a&gt;オブジェクトをコンソールに記録するカーソルのソースを記録します。</target>
        </trans-unit>
        <trans-unit id="cc976e76f4d1f788c617666a202ae23adcd40597" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through all the records in the object store:</source>
          <target state="translated">この単純な断片では、トランザクションを作成し、オブジェクトストアを取得し、カーソルを使用してオブジェクトストア内のすべてのレコードを反復処理します。</target>
        </trans-unit>
        <trans-unit id="c5fb75273e3c5815b5208459099c0e2ff4fc42b0" translate="yes" xml:space="preserve">
          <source>In this simple fragment we create a transaction, retrieve an object store, then use a cursor to iterate through the records in the object store. Here we use &lt;code&gt;cursor.advance(2)&lt;/code&gt; to jump 2 places forward each time, meaning that only every other result will be displayed. &lt;code&gt;advance()&lt;/code&gt; works in a similar way to &lt;a href=&quot;continue&quot;&gt;&lt;code&gt;IDBCursor.continue&lt;/code&gt;&lt;/a&gt;, except that it allows you to jump multiple records at a time, not just always go onto the next record.</source>
          <target state="translated">この単純なフラグメントでは、トランザクションを作成し、オブジェクトストアを取得してから、カーソルを使用してオブジェクトストア内のレコードを反復処理します。ここでは、 &lt;code&gt;cursor.advance(2)&lt;/code&gt; を使用して、毎回 2桁前にジャンプします。つまり、他のすべての結果のみが表示されます。 &lt;code&gt;advance()&lt;/code&gt; は、&lt;a href=&quot;continue&quot;&gt; &lt;code&gt;IDBCursor.continue&lt;/code&gt; &lt;/a&gt;と同様に機能しますが、常に次のレコードに移動するだけでなく、一度に複数のレコードをジャンプできる点が異なります。</target>
        </trans-unit>
        <trans-unit id="1368dbb1dc7c76c5a140767ff39a952918de0875" translate="yes" xml:space="preserve">
          <source>In this snapshot of &lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standard&lt;/a&gt;, the &lt;code&gt;HTMLFormControlsCollections&lt;/code&gt; is defined for the first time.</source>
          <target state="translated">この&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standardの&lt;/a&gt;スナップショットでは、 &lt;code&gt;HTMLFormControlsCollections&lt;/code&gt; が初めて定義されています。</target>
        </trans-unit>
        <trans-unit id="718876f635ac57f7855f3588069fc256e51f6006" translate="yes" xml:space="preserve">
          <source>In this snippet of code, &lt;code&gt;bufferedAmountLowThreshold&lt;/code&gt; is set to 64kB, and a handler for the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/bufferedamountlow&quot;&gt;bufferedamountlow&lt;/a&gt;&lt;/code&gt; event is established by setting the &lt;a href=&quot;onbufferedamountlow&quot;&gt;&lt;code&gt;RTCDataChannel.onbufferedamountlow&lt;/code&gt;&lt;/a&gt; property to a function which should send more data into the buffer by calling &lt;a href=&quot;send&quot;&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">このコードスニペットでは、 &lt;code&gt;bufferedAmountLowThreshold&lt;/code&gt; が64kBに設定されており、&lt;a href=&quot;onbufferedamountlow&quot;&gt; &lt;code&gt;RTCDataChannel.onbufferedamountlow&lt;/code&gt; &lt;/a&gt;プロパティを&lt;a href=&quot;send&quot;&gt; &lt;code&gt;send()&lt;/code&gt; を&lt;/a&gt;呼び出してより多くのデータをバッファーに送信する必要がある関数に設定することにより、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/bufferedamountlow&quot;&gt;bufferedamountlow&lt;/a&gt;&lt;/code&gt; イベントのハンドラーが確立されます。</target>
        </trans-unit>
        <trans-unit id="d046b27ce4e913f19c224b17b7bc56c497466156" translate="yes" xml:space="preserve">
          <source>In this snippet, a node is being examined for its &lt;a href=&quot;localname&quot;&gt;&lt;code&gt;Node.localName&lt;/code&gt;&lt;/a&gt; and its &lt;code&gt;namespaceURI&lt;/code&gt;. If the &lt;code&gt;namespaceURI&lt;/code&gt; returns the XUL namespace and the &lt;code&gt;localName&lt;/code&gt; returns &quot;browser&quot;, then the node is understood to be a XUL &lt;code&gt;&amp;lt;browser/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このスニペットでは、ノードの&lt;a href=&quot;localname&quot;&gt; &lt;code&gt;Node.localName&lt;/code&gt; &lt;/a&gt;とその &lt;code&gt;namespaceURI&lt;/code&gt; が検査されています。場合 &lt;code&gt;namespaceURI&lt;/code&gt; XUL名前空間と戻り &lt;code&gt;localName&lt;/code&gt; 返す「ブラウザ」を、そのノードがXULであると理解される &lt;code&gt;&amp;lt;browser/&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12214e1122c220323a9395fe6a1c4c8c5e179dca" translate="yes" xml:space="preserve">
          <source>In this snippet, a previously-created reader is queried to see if the stream has been closed. When it is closed, the promise fulfills and the message is logged to the console.</source>
          <target state="translated">このスニペットでは、ストリームが閉じられたかどうかを確認するために、先に作成されたリーダーを問い合わせます。クローズされると、約束が履行され、メッセージがコンソールに記録されます。</target>
        </trans-unit>
        <trans-unit id="dde13d5e875bf0d7b9496c1520b0ac0209a347fa" translate="yes" xml:space="preserve">
          <source>In this snippet, an attribute is being examined for its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/LocalName&quot;&gt;&lt;code&gt;localName&lt;/code&gt;&lt;/a&gt; and its &lt;code&gt;namespaceURI&lt;/code&gt;. If the &lt;code&gt;namespaceURI&lt;/code&gt; returns the XUL namespace and the &lt;code&gt;localName&lt;/code&gt; returns &quot;browser&quot;, then the node is understood to be a XUL &lt;code&gt;&amp;lt;browser/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このスニペットでは、属性の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/LocalName&quot;&gt; &lt;code&gt;localName&lt;/code&gt; &lt;/a&gt;とその &lt;code&gt;namespaceURI&lt;/code&gt; が調べられています。場合 &lt;code&gt;namespaceURI&lt;/code&gt; XUL名前空間と戻り &lt;code&gt;localName&lt;/code&gt; 返す「ブラウザ」を、そのノードがXULであると理解される &lt;code&gt;&amp;lt;browser/&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="d0cfa68d879ef6fc5ac4f7bcb7a16d97b33017d1" translate="yes" xml:space="preserve">
          <source>In this snippet, an element is being examined for its &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/LocalName&quot;&gt;&lt;code&gt;localName&lt;/code&gt;&lt;/a&gt; and its &lt;code&gt;namespaceURI&lt;/code&gt;. If the &lt;code&gt;namespaceURI&lt;/code&gt; returns the XUL namespace and the &lt;code&gt;localName&lt;/code&gt; returns &quot;browser&quot;, then the node is understood to be a XUL &lt;code&gt;&amp;lt;browser/&amp;gt;&lt;/code&gt;.</source>
          <target state="translated">このスニペットでは、要素の&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/LocalName&quot;&gt; &lt;code&gt;localName&lt;/code&gt; &lt;/a&gt;とその &lt;code&gt;namespaceURI&lt;/code&gt; を調べています。場合 &lt;code&gt;namespaceURI&lt;/code&gt; XUL名前空間と戻り &lt;code&gt;localName&lt;/code&gt; 返す「ブラウザ」を、そのノードがXULであると理解される &lt;code&gt;&amp;lt;browser/&amp;gt;&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="84cfcc3513c79670f3066a2722a670929030b0e7" translate="yes" xml:space="preserve">
          <source>In this snippet, the video track referenced by &lt;code&gt;videoTrack&lt;/code&gt; is updated so that its resolution as closely as possible matches 1920x1080 pixels (1080p high definition).</source>
          <target state="translated">このスニペットでは、 &lt;code&gt;videoTrack&lt;/code&gt; によって参照されるビデオトラックが更新され、その解像度が1920x1080ピクセル（1080p高解像度）にできるだけ一致するようになっています。</target>
        </trans-unit>
        <trans-unit id="b731c82fc7714591ccf7a5143c009282ccc24be2" translate="yes" xml:space="preserve">
          <source>In this snippet, which is part of an event handler, the event is checked to see if it generates a character; if it does, the value of &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/which&quot;&gt;&lt;code&gt;UIEvent.which&lt;/code&gt;&lt;/a&gt; is appended to a string which buffers the typed characters.</source>
          <target state="translated">イベントハンドラーの一部であるこのスニペットでは、イベントがチェックされ、文字が生成されるかどうかが確認されます。含まれている場合は、入力された文字をバッファする文字列に&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/UIEvent/which&quot;&gt; &lt;code&gt;UIEvent.which&lt;/code&gt; &lt;/a&gt;の値が追加されます。</target>
        </trans-unit>
        <trans-unit id="55f609b09d74ad2c79f4f7660d4aad6ef45e6828" translate="yes" xml:space="preserve">
          <source>In this tutorial</source>
          <target state="translated">このチュートリアルでは</target>
        </trans-unit>
        <trans-unit id="be11e027321d8795073b405e53b37ee7625eec0b" translate="yes" xml:space="preserve">
          <source>In this tutorial, we're going to cover sound creation and modification, as well as timing and scheduling. We're going to introduce sample loading, envelopes, filters, wavetables, and frequency modulation. If you're familiar with these terms and you're looking for an introduction to their application within with the Web Audio API, you've come to the right place.</source>
          <target state="translated">このチュートリアルでは、サウンドの作成と修正、タイミングとスケジューリングについて説明します。サンプルロード、エンベロープ、フィルター、ウェーブテーブル、周波数変調について紹介します。これらの用語に精通していて、Web Audio API を使ったアプリケーションの紹介をお探しの方は、ここをクリックしてください。</target>
        </trans-unit>
        <trans-unit id="d8279e87f0ef0b99ee25e194ffc668a2709260d1" translate="yes" xml:space="preserve">
          <source>In upcoming pages we'll see two alternative methods for &lt;code&gt;clearRect()&lt;/code&gt;, and we'll also see how to change the color and stroke style of the rendered shapes.</source>
          <target state="translated">今後のページでは、 &lt;code&gt;clearRect()&lt;/code&gt; の 2つの代替メソッドを確認し、レンダリングされた形状の色とストロークスタイルを変更する方法も確認します。</target>
        </trans-unit>
        <trans-unit id="2c20088053fbe20aac17f1a6dd9ab682f57c6d8e" translate="yes" xml:space="preserve">
          <source>In version 28, if a negative value is passed to %d, it will be rounded down to the closest negative integer, so -0.1 becomes -1.</source>
          <target state="translated">バージョン 28 では、負の値が %d に渡されると、最も近い負の整数に切り捨てられるため、-0.1 は -1 になります。</target>
        </trans-unit>
        <trans-unit id="a957b2719e6714e1b0526c3b37a182f3c19afb94" translate="yes" xml:space="preserve">
          <source>In version 45, the ability to have multiple shadow roots was deprecated.</source>
          <target state="translated">バージョン45では、複数のシャドウルートを持つ機能は非推奨となりました。</target>
        </trans-unit>
        <trans-unit id="6c59c43a51e4c2dbe1031b63a5139168c96dee40" translate="yes" xml:space="preserve">
          <source>In web pages, the window object is also a &lt;em&gt;global object&lt;/em&gt;. This means:</source>
          <target state="translated">Webページでは、ウィンドウオブジェクトも&lt;em&gt;グローバルオブジェクト&lt;/em&gt;です。これの意味は：</target>
        </trans-unit>
        <trans-unit id="522d23cd43af81ed0ba9fefced6ae28e6b51c6e5" translate="yes" xml:space="preserve">
          <source>In your application, you may find that some objects need to move or change frequently, while others remain relatively static. A possible optimization in this situation is to layer your items using multiple &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; elements.</source>
          <target state="translated">アプリケーションでは、頻繁に移動または変更する必要があるオブジェクトもあれば、比較的静的なままであるオブジェクトもあります。この状況で可能な最適化は、複数の &lt;code&gt;&amp;lt;canvas&amp;gt;&lt;/code&gt; 要素を使用してアイテムをレイヤー化することです。</target>
        </trans-unit>
        <trans-unit id="691a6d3c26002fd244c2fe3e46d9247ac2325e8d" translate="yes" xml:space="preserve">
          <source>Inactive tabs</source>
          <target state="translated">非アクティブなタブ</target>
        </trans-unit>
        <trans-unit id="9d57a8f5a6ecb6d09aa18654fd3572fb220d7cea" translate="yes" xml:space="preserve">
          <source>Inappropriate use cases include:</source>
          <target state="translated">不適切なユースケースには以下のようなものがあります。</target>
        </trans-unit>
        <trans-unit id="63be67330c43c8775d88e054ce632bca21a2f3d0" translate="yes" xml:space="preserve">
          <source>Include adapter.js in your project: &lt;code&gt;&amp;lt;script src=&quot;adapter.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;</source>
          <target state="translated">プロジェクトにadapter.jsを含めます： &lt;code&gt;&amp;lt;script src=&quot;adapter.js&quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="05be5fcbf7db5f7d55a0aa8a3de0c822294f95a8" translate="yes" xml:space="preserve">
          <source>Includes the &lt;a href=&quot;serviceworkerglobalscope/onnotificationclick&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope.onnotificationclick&lt;/code&gt;&lt;/a&gt; handler, for firing custom functions when a notification is clicked.</source>
          <target state="translated">通知がクリックされたときにカスタム関数を起動するための&lt;a href=&quot;serviceworkerglobalscope/onnotificationclick&quot;&gt; &lt;code&gt;ServiceWorkerGlobalScope.onnotificationclick&lt;/code&gt; &lt;/a&gt;ハンドラーが含まれています。</target>
        </trans-unit>
        <trans-unit id="d5845804c66387a55465958f317c01f71b1975eb" translate="yes" xml:space="preserve">
          <source>Includes the &lt;a href=&quot;serviceworkerregistration/shownotification&quot;&gt;&lt;code&gt;ServiceWorkerRegistration.showNotification()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;serviceworkerregistration/getnotifications&quot;&gt;&lt;code&gt;ServiceWorkerRegistration.getNotifications()&lt;/code&gt;&lt;/a&gt; method, for controlling the display of notifications.</source>
          <target state="translated">通知の表示を制御するための&lt;a href=&quot;serviceworkerregistration/shownotification&quot;&gt; &lt;code&gt;ServiceWorkerRegistration.showNotification()&lt;/code&gt; &lt;/a&gt;および&lt;a href=&quot;serviceworkerregistration/getnotifications&quot;&gt; &lt;code&gt;ServiceWorkerRegistration.getNotifications()&lt;/code&gt; &lt;/a&gt;メソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="e52e6ec9948618f31dc8ee651ae745196bcda323" translate="yes" xml:space="preserve">
          <source>Incomplete list of MIME types</source>
          <target state="translated">MIME タイプの不完全なリスト</target>
        </trans-unit>
        <trans-unit id="40d19249d0e4e2f912d2fd965cdb9d08c08e04ae" translate="yes" xml:space="preserve">
          <source>Incorrect behavior before Firefox 23.</source>
          <target state="translated">Firefox 23の前に不正な動作をしていました。</target>
        </trans-unit>
        <trans-unit id="6e4d1aecb9f6b7b06b53111d8cf03d80b27e2925" translate="yes" xml:space="preserve">
          <source>Incorrectly stated as the &lt;code&gt;target&lt;/code&gt; parameter in the specification, see &lt;a href=&quot;https://www.khronos.org/bugzilla/show_bug.cgi?id=674&quot;&gt;https://www.khronos.org/bugzilla/show_bug.cgi?id=674&lt;/a&gt;.</source>
          <target state="translated">仕様の &lt;code&gt;target&lt;/code&gt; パラメータとして誤って記述されている場合は、&lt;a href=&quot;https://www.khronos.org/bugzilla/show_bug.cgi?id=674&quot;&gt;https：//www.khronos.org/bugzilla/show_bug.cgi？id = 674を&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="a0b4ddc4bf449509a0538e7bc8033f88af302e1f" translate="yes" xml:space="preserve">
          <source>Increments the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-value&quot;&gt;value&lt;/a&gt;&lt;/code&gt; by (&lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step&quot;&gt;step&lt;/a&gt;&lt;/code&gt; * n), where n defaults to 1 if not specified. Throws an INVALID_STATE_ERR exception:</source>
          <target state="translated">（ &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-step&quot;&gt;step&lt;/a&gt;&lt;/code&gt; * n）だけ &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-value&quot;&gt;value&lt;/a&gt;&lt;/code&gt; 増分します。指定しない場合、nのデフォルトは1です。INVALID_STATE_ERR例外をスローします。</target>
        </trans-unit>
        <trans-unit id="8081736d1ac6dcda760e249c8dd2d4f3a584e610" translate="yes" xml:space="preserve">
          <source>Increments the current stencil buffer value. Clamps to the maximum representable unsigned value.</source>
          <target state="translated">現在のステンシルバッファの値をインクリメントします。最大表現可能な符号なし値にクランプします。</target>
        </trans-unit>
        <trans-unit id="be7dac374eed7d82dbad5faa66c622391d223c33" translate="yes" xml:space="preserve">
          <source>Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum representable unsigned value.</source>
          <target state="translated">現在のステンシルバッファ値をインクリメントします。最大表現可能な符号なし値をインクリメントする際に、ステンシルバッファの値をゼロにラップします。</target>
        </trans-unit>
        <trans-unit id="d6aea63c3a868fe32a3a54b5c4ef59776e7299d1" translate="yes" xml:space="preserve">
          <source>Indents the line containing the selection or insertion point. In Firefox, if the selection spans multiple lines at different levels of indentation, only the least indented lines in the selection will be indented.</source>
          <target state="translated">選択範囲または挿入点を含む行をインデントします。Firefox では、選択範囲が複数の行にまたがってインデントのレベルが異なる場合、 選択範囲内で最もインデントの少ない行だけがインデントされます。</target>
        </trans-unit>
        <trans-unit id="c2df9b932637fe9d32a0f16da1c11873398f873d" translate="yes" xml:space="preserve">
          <source>Index</source>
          <target state="translated">Index</target>
        </trans-unit>
        <trans-unit id="f181eb8ab18eb11eb9aae7d4b052bf6fdaf30b56" translate="yes" xml:space="preserve">
          <source>Index as &lt;code&gt;before&lt;/code&gt; parameter</source>
          <target state="translated">&lt;code&gt;before&lt;/code&gt; パラメータと同じようにインデックスを付ける</target>
        </trans-unit>
        <trans-unit id="453f6f1b30bdb747c10d7094a2d3af0d476d8525" translate="yes" xml:space="preserve">
          <source>Index parameter is optional</source>
          <target state="translated">インデックスパラメータは任意です。</target>
        </trans-unit>
        <trans-unit id="cb00000e0c9d14d8226a6c223add0eff48fa40b4" translate="yes" xml:space="preserve">
          <source>Indexed Database 2.0</source>
          <target state="translated">インデックス付きデータベース2.0</target>
        </trans-unit>
        <trans-unit id="d637246c1fa4afc50f71e4295df237a3e1d668ab" translate="yes" xml:space="preserve">
          <source>Indexed Database API</source>
          <target state="translated">インデックス化されたデータベースAPI</target>
        </trans-unit>
        <trans-unit id="44e2528e7cab3047343ca8911db09e908af3adee" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0</source>
          <target state="translated">インデックスデータベース API 2.0</target>
        </trans-unit>
        <trans-unit id="cf3c2bf57140cb50bdcb4435cfe3c8cc98fec9e3" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBCursorWithValue' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBCursorWithValue」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f9f3ada24ea8441c7e501f0b2e64fb6a58609b22" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBDatabase' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBDatabase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2ebc95c88d7838ee71145c4c1d52559715d2af58" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBFactory' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBFactory」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cc4709b9a3c74acfccad8b4d50368e7de06c1193" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBIndex' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBIndex」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8b626ead75d74638447876f47c7267e6bd563b32" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBKeyRange' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBKeyRange」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a98dce7586528c81295a33dfffd89abea038c094" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBObjectStore' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBObjectStore」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f2fd5a547291e4f1c1df2167564c7cf8cdcbbc0b" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBOpenDBRequest' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBOpenDBRequest」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="366ff2b766d3fde0f46eadb9652a8028403e5871" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBRequest' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBRequest」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e172db036c5b8cc18472ce1f243ae21fce1fdfa5" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBTransaction' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBTransaction」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="86ca6a350879afcd58319e7901de7b5f12a1999f" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'IDBVersionChangeEvent' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「IDBVersionChangeEvent」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2483d48ea22b253fe19e230fe96da18b3465a79a" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'ObjectStoreNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「ObjectStoreNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2d24555331c5da72096e5808f4cf4f8f4586ddc9" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'abort()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「abort（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eef67f38e90ded178d6e114a73d151cf44193234" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'add()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「add（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="565444d18890dfed22bb1a7971dd2beb5877acfd" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'advance()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「advance（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fd38b18571abe02ec1a94bef07451fad57adefbc" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'autoIncrement' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「autoIncrement」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="72acb3c050df56eacc5354cd716dfd7e6be561a0" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'bound()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「bound（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="95bf4516b0f0ddb4d168b48ebe7cfdd57ef313f4" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'clear()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「clear（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7d097be1f46dadf6b1dcc606f63890d4e870be42" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'close()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「close（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e458e7eca4d070001c437ecab313a7149206cea5" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'cmp()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「cmp（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="56afd053a165dfa5223c2b27963eaede2d59cb5b" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'continue()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「continue（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2cbba46e3985e689aef7a567540cda47e5247aee" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'continuePrimaryKey()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「continuePrimaryKey（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="359ceb4fb14bbfa71e680cef243281286a923668" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'count()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「count（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2084cf90d209d8bd05f2d57bf91333837fd3f5e3" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'createIndex()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様での「createIndex（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d835d91443e674d0acf51eb142631a285c04119e" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'createObjectStore()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「createObjectStore（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ef995c0b2febfecfdd36cea57b732d7cdcf5287a" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'cursor' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「カーソル」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="38f10f8380a6b5e6f41186c0db1a2fd0aa5008b3" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'db' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「db」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4a4ef8021ea3bc36e24afea70d3820230221ab43" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'delete()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「delete（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b4a031a0e3660058b826aee6042781d2cc9bd1b9" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'deleteDatabase()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「deleteDatabase（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eeeb7bf7ab32d139a370c8c2a2148627df043fde" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'deleteIndex()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「deleteIndex（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="74f7694c88487bcfa1c66e035a6d91b0b256565b" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'deleteObjectStore()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「deleteObjectStore（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4bb8e411e9d145a59bb655cb831927e34daf9f25" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'direction' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「方向」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d52b88ece91077a2b5378c0907e0dac19f03916a" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'error' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「エラー」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d83a41406b8b5f39de7880f14b05813739bcec78" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'get()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「get（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c361dd3c30f0851a14dcf525ea68c948d7001b93" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'getAll()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「getAll（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="305f735a2d1b3d60a72e45fdd86d0c679dd71627" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'getAllKeys()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「getAllKeys（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fa59a8416303ad16526b18f1671b9ceca2ea6f8d" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'getKey()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「getKey（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7a4cb455566f19c2d93aab75e4b8d3f286785b8a" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'includes()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「includes（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="30b93aae7f4eb8320462c857f5d3cdc4638db4b6" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'index()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「index（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="007d5c9a531de84aaa0c98128f53bb4ec2c3eb46" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'indexNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「indexNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="20330097346a31e05a3fe659347ba59d8c400bb3" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'indexedDB' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「indexedDB」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5f19c90186ce0514aa7567d95d834f6ef7846877" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'key' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「キー」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1d96905469d788cc6a2838d4438ce2e215b9f114" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'keyPath' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「keyPath」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f8bc75669286d94288860b321ad9de3973e7c6f1" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'lower' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「下位」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b62d5b107a11062b448f57e6feba433bdcc04762" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'lowerBound()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「lowerBound（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="532c8a2bcb059f2160bc13c34853948e535f5b2d" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'lowerOpen' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「lowerOpen」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="cbaff618042c850c4e25af8b3275ec9392745749" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'mode' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「モード」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7cd80db335f83115f3ae3dadc4dc9ebc25c17635" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'multiEntry' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「multiEntry」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8fec81ff92d176d83e3c578beeaa47cea22bdefa" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'name' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「名前」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5dccef01c2cb593520a4b8f11545557c9afb29b2" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'newVersion' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「newVersion」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5c39e376f73640df7311df01c47ac0608485eb63" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'objectStore' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「objectStore」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="4d3eb819ce5c4ef8cdb37001b2b7095d9dfe8f47" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'objectStore()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「objectStore（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6b273e10893aa4e25d3c25e1b2b2020f154ade55" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'objectStoreNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「objectStoreNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="22250b0c4fd94c03083ffa26e2ef4a0b499582ba" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'oldVersion' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「oldVersion」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bb36b1b2f8719f68e8c8155c09f77faeb217d242" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onabort' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「onabort」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="072af3276aff47a544daf4cd8c1d262c6d04e204" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onblocked' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「onblocked」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3acd6c4dc9e3904bea456d4fd31b565ea5d424bb" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onclose' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「onclose」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6edcc07b8f1185e4de4d83920f58e1970eb1253a" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'oncomplete' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「oncomplete」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b590997d05ce08a4bcaa509a8e4fcd64de2c2e21" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onerror' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「onerror」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="82318a50f4f3255d202e60c9711e7cddcbe9d5f3" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'only' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「のみ」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3101a1e90405213a2b367b75e4b0f09456dbbb1f" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onsuccess' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「成功」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ee5a05937565b3a5392bfbc6a807476076035242" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onupgradeneeded' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「onupgradeneeded」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="20f75cbcc12a953edfaadfbdc33dd852bbda49ab" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'onversionchange' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「onversionchange」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b7b15bc9ed72d370db298363aa5dcb2e327a511a" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'open()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「open（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b08aef57453e96a590cfdb4704d8ac32d8553c93" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'openCursor()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「openCursor（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bc35c36a616f6ae5cd109302290383d4cde131eb" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'openKeyCursor()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「openKeyCursor（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6923cf52253c0f54321f165f7222f9c99cec00df" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'primaryKey' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「primaryKey」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b47645c292faaa766aa017cc085dccc6f7f77a4b" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'put()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「put（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="85873746ba77a4fd2f0df44d19a60de5c6815a3e" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'readyState' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「readyState」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="224d82d66e55aacb498e6f243e14a62612fbaf25" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'result' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「結果」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="155af68f307f309c95deef47ca761a3159b2249d" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'source' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「ソース」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="372945225136d520564d1a611136c27aef6db228" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'transaction' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「トランザクション」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="333f1e58387e849584fc5699a8d4ecd08e4bd652" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'transaction()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「transaction（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d171cc085fbfa94541307a9a1a95b03ba0d34be0" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'unique' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「ユニーク」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="728f83f7a25ed968510be6dd9028044f8593be0b" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'update()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「update（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3cff63d7bfa3639b141b79293eabf745fddba769" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'upper' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「上位」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d0f92c56692d621729245708a1fac2e1e1c6925d" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'upperBound()' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「upperBound（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fdde0e8f904e8ab718432532831461eb15560522" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'upperOpen' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「upperOpen」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="d6c7169e9eab2e6e102cb332a6512b739114862f" translate="yes" xml:space="preserve">
          <source>Indexed Database API 2.0&lt;br/&gt;&lt;small&gt;The definition of 'version' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API 2.0 &lt;br/&gt;&lt;small&gt;その仕様における「バージョン」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="86dd037fabe26353d744a49a2f3f211c22e56655" translate="yes" xml:space="preserve">
          <source>Indexed Database API Specification</source>
          <target state="translated">索引付きデータベースAPI仕様書</target>
        </trans-unit>
        <trans-unit id="15dcefe503ae939f4d17016b014badae64406aaf" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBCursorWithValue' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「IDBCursorWithValue」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1d2db3332262a4e4e1516f47a4e074d9c3bdf85a" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBDatabase' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBDatabase」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bfd2d3b95a559c2b8aea5a2912b6511187e33b1f" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBEnvironment' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBEnvironment」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e46811739e8fac3983c25412940cb2332f15a4ad" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBFactory' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBFactory」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="691e781932751d3292cb3b4930ffe52f73b1b236" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBIndex' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBIndex」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="611be58c07c404d8526d854df25f66003f3069de" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBKeyRange' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBKeyRange」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="59daffd89ec28d7ac3ec5a4305617ef9d4d0dd8f" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBObjectStore' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBObjectStore」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a273cc23ce36ea16ffcd1302e7070903b844cd71" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBOpenDBRequest' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBOpenDBRequest」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="56288fe09d641575439a9776988cac2de8190eb9" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBRequest' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBRequest」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e771b04c61cb47b8fd38c5469fa4ef34fc63418a" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBTransaction' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBTransaction」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0eac9aceead0e96a04fe93cf32beb3ef59db3744" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'IDBVersionChangeEvent' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「IDBVersionChangeEvent」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="911b9d35b9530c35a7308c9169b41e19c79ce383" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'ObjectStoreNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「ObjectStoreNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2628e177531c037e4196c6c10e80fa051100ebe4" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'abort()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「abort（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="1e854dcb956fee1f0c995f9c1109b2236e9792b2" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'add()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「add（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="09deb334bcb221a11b4b2bb85f2af98f1bd6e7a9" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'advance()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「advance（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9b0b42c6453d106fce6d153ce2c4ad8dee2c45db" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'autoIncrement' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「autoIncrement」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6f3a37a443be19177f4b8a495b6b8ead0e939114" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'bound()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「bound（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e13169fcf1e2a1ae929256c6afb3b6693c263022" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'clear()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「clear（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bcd403a9ad6105cd7308fde4d75697466aea1897" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'close()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「close（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0d6f0d44727ae5724a2d2328eec2a30ebee648b5" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'cmp()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「cmp（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eac95acdc1b19269ed03ed418901a15294428e44" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'continue()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「continue（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="81384d7528eb5071f34276d3ebf3059631ad224b" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'count()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「count（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2cb73699dc23b20b21c5ac80302856ee5846d539" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'createIndex()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「createIndex（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="2218d0fa34d3b35bd2b4e90f1450937fa10e85a8" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'createObjectStore()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「createObjectStore（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0c88861c3b22110048d091e0f25bd0e15a5016cf" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'cursor' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「カーソル」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f2a25c2af2c83eedfeaa08dafeafa0f36cd0897a" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'db' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「db」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="10332307eaa30b008b1f909ca434651e20a4de05" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'delete()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「delete（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e92a85ba7b79ae5331b78373c58d2cbba760e4e3" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'deleteDatabase()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「deleteDatabase（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="54f6ea3b718a1de1a3801aa5227dc0a1d4b3206f" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'deleteIndex()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「deleteIndex（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7c95de7954581905c3d2a169dbd4854c07514db4" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'deleteObjectStore()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「deleteObjectStore（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="fdebea39b4d10372f3bd9b38d97777aabadb4918" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'direction' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「方向」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6d04c2bc1c2197776407094c820f131c73a2233e" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'error' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「エラー」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b414db91d4e5e32efd881af45685602ef03fc6c4" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'get()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「get（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6d1c2603e2276e829282532ef2b7fddeef87b394" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'getKey()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「getKey（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0632408e0d9f890ce40439718d26b59d0b1ea9c3" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'index()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「index（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8855870f8b8cb2b6cbfa7b6b57a027123de15ab5" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'indexNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「indexNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7447d1d70f58dbf59be79029e014a48a670a8b66" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'indexedDB' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「indexedDB」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8b1ef5cf6723bc22d79ce3d27a87ae7424a21d94" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'key' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「キー」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ccc2dcf3076abf39177a6c0831fdbaddbaa7967a" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'keyPath' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「keyPath」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3c4513b97a9353b1be9f780446325b384579a6cf" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'lower' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「下位」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="f568c0456b800d0587f407a78978657ed10df745" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'lowerBound()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「lowerBound（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c3c9f91b2e8731ca81a8316a0ef2c6e46ed37eb8" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'lowerOpen' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「lowerOpen」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bf1a5bf21683ff2acc2c5f37f0b5460647c37f40" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'mode' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「モード」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="69166e3532729ebc28c86dcaa75d2f1773da8058" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'multiEntry' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「multiEntry」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="828a60b756ce091624a5cc20173b4cfd65fbcea0" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'name' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「名前」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b63c2b5977ffbfb35ec6e0b22f15b35dbdc1712d" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'newVersion' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「newVersion」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="03bf406431d9396c6b1e91be881710f07da13e27" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'objectStore' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「objectStore」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8b22b41c914108d17a37775e566ddc2e935b823f" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'objectStore()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「objectStore（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="31a62dc7e40b0a3bbb8e5e9b8d63f89ccbca8fa8" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'objectStoreNames' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「objectStoreNames」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="90cbc4b8126cfd58744831fa92c33e196fd4e803" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'oldVersion' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様での「oldVersion」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a4181dd53726ade87755f3806355f1892c5a3321" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'onabort' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「onabort」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="16e33e65ebd3f08212d6591dc0f80a049ba8d713" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'onblocked' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「onblocked」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="90ff0853c470806b03e60173a8c999b9b58e9cf7" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'oncomplete' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「oncomplete」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="54dcb861d8f2b331f5416bb77e539a57bf6ca9ea" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'onerror' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「onerror」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e76da573a9c2ab3e2f40bf6f41daa5c14b1d2e87" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'only' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「のみ」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="804a05dbfac297e19d36ab76864338397c155b69" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'onsuccess' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「成功」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="28cd5e96470a4716e2eb5a3c5b4b77ec6cb47deb" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'onupgradeneeded' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「onupgradeneeded」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="efb89d54c8ed5af9d4203d9310a24b3b778bf78e" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'onversionchange' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「onversionchange」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3eb1b277067a6f7dd2b2d0187b643f2bc75236c1" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'open()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「open（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8dc9ab6ebf006c17f8ad11c842247cfd490bff97" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'openCursor()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「openCursor（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="6fdc69a06bf643bea974ceb8cbfa6a363a18ab6c" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'openKeyCursor()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「openKeyCursor（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e43cde1e437281ba65cdee6155261c6634c428bc" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'primaryKey' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「primaryKey」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="65c5862b6a8d0d25c0599486e840a3a36f22bab5" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'put()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「put（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b04c81f2d77ecadc1e89604e8da0caa81bf928a1" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'readyState' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「readyState」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="71d39fab67c17ff72cc77f575520a7faef2db3bc" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'result' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「結果」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="c54f04b4eb11eed7d16db47e65b3df2a59ad815b" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'source' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「ソース」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a24fef6d73be8a9b808c19676f0becf79aaea3a2" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'transaction' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「トランザクション」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="b815919711c3e32c862a428849c2c61e8a45e5d2" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'transaction()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「transaction（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="5502e65b6c775cb9069ddf69202a9b5e7c84f8fb" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'unique' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様での「一意」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="9e73f2eca00cd3a258eb079d51b2a2467aa8c3d1" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'update()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「update（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="3b58c63f1f55a0ea874370904bb189c2046cfc40" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'upper' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「上位」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="e055db0e658a620506779abf1d6bf260040502df" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'upperBound()' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「upperBound（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="eee1dd1553968d42120e87c5e1773f94fa20cf0c" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'upperOpen' in that specification.&lt;/small&gt;</source>
          <target state="translated">Indexed Database API &lt;br/&gt;&lt;small&gt;その仕様における「upperOpen」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="bdd6ae14a8af64bff9a712771fb91b75e832f09a" translate="yes" xml:space="preserve">
          <source>Indexed Database API&lt;br/&gt;&lt;small&gt;The definition of 'version' in that specification.&lt;/small&gt;</source>
          <target state="translated">インデックス付きデータベースAPI &lt;br/&gt;&lt;small&gt;その仕様における「バージョン」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="64cb9fad0cca0cd58b28b495a70bd84a63329164" translate="yes" xml:space="preserve">
          <source>IndexedDB</source>
          <target state="translated">IndexedDB</target>
        </trans-unit>
        <trans-unit id="92305269bb35c9337865684e253bfb77eb72c316" translate="yes" xml:space="preserve">
          <source>IndexedDB &amp;mdash; The Store in Your Browser</source>
          <target state="translated">IndexedDB &amp;mdash;ブラウザのストア</target>
        </trans-unit>
        <trans-unit id="532f0f31fc0dc48e0188546b9833978d0aae4b88" translate="yes" xml:space="preserve">
          <source>IndexedDB &lt;a href=&quot;https://mxr.mozilla.org/mozilla-central/find?text=&amp;amp;string=dom%2FindexedDB%2F.*%5C.idl&amp;amp;regexp=1&quot;&gt;interface files&lt;/a&gt; in the Firefox source code</source>
          <target state="translated">FirefoxソースコードのIndexedDB &lt;a href=&quot;https://mxr.mozilla.org/mozilla-central/find?text=&amp;amp;string=dom%2FindexedDB%2F.*%5C.idl&amp;amp;regexp=1&quot;&gt;インターフェースファイル&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="36e8a68a5966ec79c4cfedb6fedc772a2a03acc9" translate="yes" xml:space="preserve">
          <source>IndexedDB API</source>
          <target state="translated">インデックスデータベース API</target>
        </trans-unit>
        <trans-unit id="2c08a2cbfe1907178688e0f31d8d060b8974f8ab" translate="yes" xml:space="preserve">
          <source>IndexedDB API Reference</source>
          <target state="translated">IndexedDB API リファレンス</target>
        </trans-unit>
        <trans-unit id="6cd580e87eab9b24853e0a6b1592a0793dd57d15" translate="yes" xml:space="preserve">
          <source>IndexedDB API: Basic Concepts Behind IndexedDB</source>
          <target state="translated">IndexedDBのAPI。IndexedDBを支える基本的な概念</target>
        </trans-unit>
        <trans-unit id="7f627958554992cdc01d435d1566efedb5d88fe1" translate="yes" xml:space="preserve">
          <source>IndexedDB API: Browser storage limits and eviction criteria</source>
          <target state="translated">IndexedDBのAPI。ブラウザのストレージ制限と退避基準</target>
        </trans-unit>
        <trans-unit id="424b4cf4029e03a1ae19e57459b914283c39c31c" translate="yes" xml:space="preserve">
          <source>IndexedDB API: Using IndexedDB</source>
          <target state="translated">IndexedDBのAPIです。IndexedDBの使用</target>
        </trans-unit>
        <trans-unit id="6a1def3c340fdfe28cbce10fc9a0a803d9f4f57d" translate="yes" xml:space="preserve">
          <source>IndexedDB API: Using IndexedDB in chrome</source>
          <target state="translated">IndexedDBのAPI。クロームでIndexedDBを使う</target>
        </trans-unit>
        <trans-unit id="147e826602f19e0ac009e2bd0ea268d779b0f279" translate="yes" xml:space="preserve">
          <source>IndexedDB databases</source>
          <target state="translated">インデックス付きデータベース</target>
        </trans-unit>
        <trans-unit id="ce537135320d542bbf2ed585262978a7deda8fdf" translate="yes" xml:space="preserve">
          <source>IndexedDB is a low-level API for client-side storage of significant amounts of structured data, including files/blobs. This API uses indexes to enable high-performance searches of this data. While &lt;a href=&quot;web_storage_api&quot;&gt;Web Storage&lt;/a&gt; is useful for storing smaller amounts of data, it is less useful for storing larger amounts of structured data. IndexedDB provides a solution. This is the main landing page for MDN's IndexedDB coverage &amp;mdash; here we provide links to the full API reference and usage guides, browser support details, and some explanation of key concepts.</source>
          <target state="translated">IndexedDBは、ファイル/ブロブを含む大量の構造化データをクライアント側で保存するための低レベルAPIです。このAPIはインデックスを使用して、このデータの高性能検索を可能にします。一方で&lt;a href=&quot;web_storage_api&quot;&gt;ウェブストレージは、&lt;/a&gt;より少量のデータを格納するために有用である、それは構造化大量のデータを格納するためのあまり有用です。 IndexedDBはソリューションを提供します。これは、MDNのIndexedDBカバレッジのメインランディングページです。ここでは、完全なAPIリファレンスと使用ガイドへのリンク、ブラウザサポートの詳細、主要な概念の説明を提供します。</target>
        </trans-unit>
        <trans-unit id="cc1663032a22b6bf6e4418d1765f05a8f9e117cd" translate="yes" xml:space="preserve">
          <source>IndexedDB is a transactional database system, like an SQL-based RDBMS. However, unlike SQL-based RDBMSes, which use fixed-column tables, IndexedDB is a JavaScript-based object-oriented database. IndexedDB lets you store and retrieve objects that are indexed with a &lt;strong&gt;key&lt;/strong&gt;; any objects supported by the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm&quot;&gt;structured clone algorithm&lt;/a&gt; can be stored. You need to specify the database schema, open a connection to your database, and then retrieve and update data within a series of &lt;strong&gt;transactions&lt;/strong&gt;.</source>
          <target state="translated">IndexedDBは、SQLベースのRDBMSのようなトランザクションデータベースシステムです。ただし、固定列テーブルを使用するSQLベースのRDBMSとは異なり、IndexedDBはJavaScriptベースのオブジェクト指向データベースです。 IndexedDBを使用すると、&lt;strong&gt;キーで&lt;/strong&gt;インデックス付けされたオブジェクトを格納および取得できます。&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Guide/API/DOM/The_structured_clone_algorithm&quot;&gt;構造化クローンアルゴリズムで&lt;/a&gt;サポートされているオブジェクトを保存できます。データベーススキーマを指定し、データベースへの接続を開き、一連の&lt;strong&gt;トランザクション&lt;/strong&gt;内でデータを取得して更新する必要があります。</target>
        </trans-unit>
        <trans-unit id="86a9af6a45ae874e6ab4548cbadc35f2cdbac1de" translate="yes" xml:space="preserve">
          <source>IndexedDB is a way for you to persistently store data inside a user's browser. Because it lets you create web applications with rich query abilities regardless of network availability, your applications can work both online and offline.</source>
          <target state="translated">IndexedDBは、ユーザーのブラウザ内にデータを永続的に保存するための方法です。これにより、ネットワークの可用性に関係なく、豊富なクエリ機能を持つWebアプリケーションを作成できるため、アプリケーションはオンラインとオフラインの両方で動作することができます。</target>
        </trans-unit>
        <trans-unit id="f3ba47cda434e153228419f3d5a637fffd7d4b3e" translate="yes" xml:space="preserve">
          <source>IndexedDB is an &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#Asynchronous_API&quot;&gt;asynchronous&lt;/a&gt; API that can be used in most contexts, including &lt;a href=&quot;../web_workers_api/using_web_workers&quot;&gt;Web Workers&lt;/a&gt;. It used to include a &lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#Synchronous_API&quot;&gt;synchronous&lt;/a&gt; version also, for use in web workers, but this was removed from the spec due to lack of interest by the web community.</source>
          <target state="translated">IndexedDBは、&lt;a href=&quot;../web_workers_api/using_web_workers&quot;&gt;Webワーカー&lt;/a&gt;を含むほとんどのコンテキストで使用できる&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#Asynchronous_API&quot;&gt;非同期&lt;/a&gt; APIです。以前はウェブワーカーで使用するための&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB#Synchronous_API&quot;&gt;同期&lt;/a&gt;バージョンも含まれていましたが、ウェブコミュニティからの関心がないため、仕様から削除されました。</target>
        </trans-unit>
        <trans-unit id="f2d92b8f877cc367a585ef74ae7cf6ec2470db87" translate="yes" xml:space="preserve">
          <source>IndexedDB is designed to cover most cases that need client-side storage. However, it is not designed for a few cases like the following:</source>
          <target state="translated">IndexedDBは、クライアントサイドストレージを必要とするほとんどのケースをカバーするように設計されています。しかし、以下のような一部のケースには対応していません。</target>
        </trans-unit>
        <trans-unit id="10b63894d086dcec12e25d8e17051a3412213e28" translate="yes" xml:space="preserve">
          <source>IndexedDB lets you store and retrieve objects that are indexed with a &quot;key.&quot; All changes that you make to the database happen within transactions. Like most web storage solutions, IndexedDB follows a &lt;a href=&quot;http://www.w3.org/Security/wiki/Same_Origin_Policy&quot;&gt;same-origin policy&lt;/a&gt;. So while you can access stored data within a domain, you cannot access data across different domains.</source>
          <target state="translated">IndexedDBを使用すると、「キー」でインデックス付けされたオブジェクトを保存および取得できます。データベースに加えたすべての変更は、トランザクション内で行われます。ほとんどのWebストレージソリューションと同様に、IndexedDBは&lt;a href=&quot;http://www.w3.org/Security/wiki/Same_Origin_Policy&quot;&gt;同一生成元ポリシーに&lt;/a&gt;従います。したがって、ドメイン内に保存されているデータにアクセスすることはできますが、異なるドメイン間でデータにアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="193a3ef4e236d0b00b36041627e8f96f853cd54e" translate="yes" xml:space="preserve">
          <source>IndexedDB lets you store and retrieve objects that are indexed with a &quot;key.&quot; All changes that you make to the database happen within transactions. Like most web storage solutions, IndexedDB follows a &lt;a href=&quot;https://www.w3.org/Security/wiki/Same_Origin_Policy&quot;&gt;same-origin policy&lt;/a&gt;. So while you can access stored data within a domain, you cannot access data across different domains.</source>
          <target state="translated">IndexedDBを使用すると、「キー」でインデックス付けされたオブジェクトを保存および取得できます。データベースに加えるすべての変更は、トランザクション内で行われます。ほとんどのWebストレージソリューションと同様に、IndexedDBは&lt;a href=&quot;https://www.w3.org/Security/wiki/Same_Origin_Policy&quot;&gt;同一生成元ポリシーに&lt;/a&gt;従います。したがって、ドメイン内に保存されているデータにアクセスすることはできますが、異なるドメイン間でデータにアクセスすることはできません。</target>
        </trans-unit>
        <trans-unit id="9f8bbfa15d98e608887f8a17bd492f4cfb52892d" translate="yes" xml:space="preserve">
          <source>IndexedDB used to have a competing spec, WebSQL Database, but the W3C deprecated it on November 18, 2010. While both IndexedDB and WebSQL are solutions for storage, they do not offer the same functionalities. WebSQL Database is a relational database access system, whereas IndexedDB is an indexed table system.</source>
          <target state="translated">IndexedDBにはかつてWebSQL Databaseという競合仕様がありましたが、W3Cは2010年11月18日に非推奨としました。IndexedDBもWebSQLもストレージのためのソリューションではありますが、同じ機能を提供しているわけではありません。WebSQL Databaseがリレーショナルデータベースアクセスシステムであるのに対し、IndexedDBはインデックス付きテーブルシステムです。</target>
        </trans-unit>
        <trans-unit id="a16c113e5edf37916985279b120ad28b6f0ce5b8" translate="yes" xml:space="preserve">
          <source>IndexedDB uses the same-origin principle, which means that it ties the store to the origin of the site that creates it (typically, this is the site domain or subdomain), so it cannot be accessed by any other origin.</source>
          <target state="translated">IndexedDB は同一オリジンの原則を使用しています。これは、ストアを作成したサイトのオリジン (一般的にはサイトドメインやサブドメイン)と結びつけているため、他のオリジンからはアクセスできないということを意味します。</target>
        </trans-unit>
        <trans-unit id="e739a8052896b204b56c67f413dc1f61084d45fa" translate="yes" xml:space="preserve">
          <source>Indicates an occurrence of a of dual-tone multi-frequency (DTMF). This event does not bubble (except where otherwise stated) and is not cancelable (except where otherwise stated).</source>
          <target state="translated">デュアルトーン多周波(DTMF)の発生を示します。このイベントは(別段の記載がある場合を除いて)泡立たず、(別段の記載がある場合を除いて)キャンセルできません。</target>
        </trans-unit>
        <trans-unit id="943e0bc6f637339f8291a07a89984e56e8deb86e" translate="yes" xml:space="preserve">
          <source>Indicates how far along the animation is through its current iteration with values between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;. Returns &lt;code&gt;null&lt;/code&gt; if the animation is not running or its &lt;code&gt;KeyframeEffect&lt;/code&gt; isn't associated with an &lt;code&gt;Animation&lt;/code&gt;.</source>
          <target state="translated">アニメーションに沿っ間の値と現在のイテレーションを経てどのくらい離れているかを示します &lt;code&gt;0&lt;/code&gt; と &lt;code&gt;1&lt;/code&gt; 。アニメーションが実行されていない場合、またはその &lt;code&gt;KeyframeEffect&lt;/code&gt; が &lt;code&gt;Animation&lt;/code&gt; に関連付けられていない場合は、 &lt;code&gt;null&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="3d83f6c1c7cc711aef429748efd49ce074848343" translate="yes" xml:space="preserve">
          <source>Indicates how peaked the frequency is around the cutoff. The greater the value is, the greater is the peak.</source>
          <target state="translated">カットオフ付近での周波数のピークの大きさを示します。値が大きいほどピークが大きくなります。</target>
        </trans-unit>
        <trans-unit id="60f2983f4478702c91cef6d0b9af81733779d6e3" translate="yes" xml:space="preserve">
          <source>Indicates how peaked the frequency is around the cutoff. The greater the value, the greater the peak.</source>
          <target state="translated">カットオフ付近での周波数のピークの大きさを示します。値が大きいほどピークが大きくなります。</target>
        </trans-unit>
        <trans-unit id="92d419ed0fcbf4bcc8e8433f5f3b80f03eb22d20" translate="yes" xml:space="preserve">
          <source>Indicates how the violated policy is configured to be treated by the user agent. This will be &lt;code&gt;&quot;enforce&quot;&lt;/code&gt; or &lt;code&gt;&quot;report&quot;&lt;/code&gt;.</source>
          <target state="translated">違反したポリシーがユーザーエージェントによって処理されるように構成されている方法を示します。これは &lt;code&gt;&quot;enforce&quot;&lt;/code&gt; または &lt;code&gt;&quot;report&quot;&lt;/code&gt; ます。</target>
        </trans-unit>
        <trans-unit id="09f9825b7b6213674627e80352ff75e27100f384" translate="yes" xml:space="preserve">
          <source>Indicates if a certain node is part of the selection.</source>
          <target state="translated">特定のノードが選択範囲に含まれているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="dc053b6c7ef02ee44213f9913f0ebb3bc3ca087b" translate="yes" xml:space="preserve">
          <source>Indicates if the device has sensed a nearby physical object.</source>
          <target state="translated">デバイスが近くの物理的な物体を感知したかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="5a88e82c3afff7c9f6ddf9b702753e7f8b74e3f6" translate="yes" xml:space="preserve">
          <source>Indicates if the document is loading from a cache.</source>
          <target state="translated">ドキュメントがキャッシュから読み込まれているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="8728b80cde2cc4e2ed417e1c13080c30fb7ef778" translate="yes" xml:space="preserve">
          <source>Indicates if the pointer represents the primary pointer of this pointer type.</source>
          <target state="translated">このポインタがこのポインタ型のプライマリポインタを表しているかどうかを示す。</target>
        </trans-unit>
        <trans-unit id="c459e8ad4fb869276addd12b5b14c86486e1f0eb" translate="yes" xml:space="preserve">
          <source>Indicates that a new incoming &lt;a href=&quot;mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; was created and an associated &lt;a href=&quot;rtcrtpreceiver&quot;&gt;&lt;code&gt;RTCRtpReceiver&lt;/code&gt;&lt;/a&gt; object was added to the &lt;a href=&quot;rtcpeerconnection&quot;&gt;&lt;code&gt;RTCPeerConnection&lt;/code&gt;&lt;/a&gt; object.</source>
          <target state="translated">新しい着信&lt;a href=&quot;mediastreamtrack&quot;&gt; &lt;code&gt;MediaStreamTrack&lt;/code&gt; &lt;/a&gt;が作成され、関連する&lt;a href=&quot;rtcrtpreceiver&quot;&gt; &lt;code&gt;RTCRtpReceiver&lt;/code&gt; &lt;/a&gt;オブジェクトがRTCPeerConnectionオブジェクトに追加されたことを&lt;a href=&quot;rtcpeerconnection&quot;&gt; &lt;code&gt;RTCPeerConnection&lt;/code&gt; &lt;/a&gt;ます。</target>
        </trans-unit>
        <trans-unit id="8afc3807453f24c4f66868b645b61a2573a07625" translate="yes" xml:space="preserve">
          <source>Indicates that the availability of the presentation display has changed.</source>
          <target state="translated">演出表示の可否が変更されたことを示す。</target>
        </trans-unit>
        <trans-unit id="28c86b5d39c8b81b39a074ef35d899dac126f042" translate="yes" xml:space="preserve">
          <source>Indicates that the text track has been loaded with no fatal errors.</source>
          <target state="translated">テキストトラックが致命的なエラーなく読み込まれていることを示します。</target>
        </trans-unit>
        <trans-unit id="857f4cf4987d80b1a5814654e9f9797314e49641" translate="yes" xml:space="preserve">
          <source>Indicates that the text track is loading and there have been no fatal errors encountered so far. Further cues might still be added to the track by the parser.</source>
          <target state="translated">テキストトラックがロード中で、今のところ致命的なエラーは発生していないことを示します。パーサによってトラックにさらなるキューが追加されるかもしれません。</target>
        </trans-unit>
        <trans-unit id="eda4b30bd8d00a73daae2e5c7b50e1f510f556e9" translate="yes" xml:space="preserve">
          <source>Indicates that the text track was enabled, but when the user agent attempted to obtain it, this failed in some way. Some or all of the cues are likely missing and will not be obtained.</source>
          <target state="translated">テキストトラックが有効になっていたが、ユーザーエージェントがそれを取得しようとしたときに、何らかの方法で失敗したことを示します。キューの一部または全部が欠けている可能性が高く、取得できません。</target>
        </trans-unit>
        <trans-unit id="de229eca824b55dc0a01ef5e8e646022795469c5" translate="yes" xml:space="preserve">
          <source>Indicates that the text track's cues have not been obtained.</source>
          <target state="translated">テキストトラックのキューが取得されていないことを示します。</target>
        </trans-unit>
        <trans-unit id="5a1e7a27262732663c8aaccb2e6965933d2d3f8d" translate="yes" xml:space="preserve">
          <source>Indicates that the text will be displayed vertically rather than horizontally, such as in some Asian languages.</source>
          <target state="translated">アジアの一部の言語のように、テキストが横方向ではなく縦方向に表示されることを示します。</target>
        </trans-unit>
        <trans-unit id="756ceef19a8802f6fa9c6c724bbde5c8c0b00f67" translate="yes" xml:space="preserve">
          <source>Indicates the accuracy of the derivative calculation for the GLSL built-in functions: &lt;code&gt;dFdx&lt;/code&gt;, &lt;code&gt;dFdy&lt;/code&gt;, and &lt;code&gt;fwidth&lt;/code&gt;.</source>
          <target state="translated">GLSL組み込み関数の微分計算の精度を示します： &lt;code&gt;dFdx&lt;/code&gt; 、 &lt;code&gt;dFdy&lt;/code&gt; 、および &lt;code&gt;fwidth&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="5f476999b5fc6af5989004522caf60a6b77aaef4" translate="yes" xml:space="preserve">
          <source>Indicates the amount of time, in seconds, that remain until the battery is fully charged.</source>
          <target state="translated">バッテリーが完全に充電されるまでの残り時間を秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="0cb14f029e722d38e78fa8c314af9264028e5e5f" translate="yes" xml:space="preserve">
          <source>Indicates the amount of time, in seconds, that remains until the battery is fully discharged.</source>
          <target state="translated">バッテリーが完全に放電するまでの残り時間を秒単位で表示します。</target>
        </trans-unit>
        <trans-unit id="4dcdce9af50fb71fd294b26eadee66245c48b589" translate="yes" xml:space="preserve">
          <source>Indicates the current battery charge level as a value between &lt;code&gt;0.0&lt;/code&gt; and &lt;code&gt;1.0&lt;/code&gt;.</source>
          <target state="translated">間の値として現在のバッテリ充電レベルを示し &lt;code&gt;0.0&lt;/code&gt; と &lt;code&gt;1.0&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="2752511a47f92f5ae331dc73946fdb5c8286874a" translate="yes" xml:space="preserve">
          <source>Indicates the current offset of the audio stream that was created by a call to &lt;code&gt;mozWriteAudio()&lt;/code&gt;. This offset is specified as the number of samples since the beginning of the stream.</source>
          <target state="translated">&lt;code&gt;mozWriteAudio()&lt;/code&gt; の呼び出しによって作成されたオーディオストリームの現在のオフセットを示します。このオフセットは、ストリームの開始以降のサンプル数として指定されます。</target>
        </trans-unit>
        <trans-unit id="33387dcb2fc19aefe8db1d79d43f13804b752ce6" translate="yes" xml:space="preserve">
          <source>Indicates the device type that caused the event (mouse, pen, touch, etc.)</source>
          <target state="translated">イベントの原因となったデバイスの種類(マウス、ペン、タッチなど)を示します。</target>
        </trans-unit>
        <trans-unit id="670facc19573cdf9413def0fb93eb003831bace7" translate="yes" xml:space="preserve">
          <source>Indicates the font-face's loading status. It will be one of &lt;code&gt;'loading'&lt;/code&gt; or &lt;code&gt;'loaded'&lt;/code&gt;.</source>
          <target state="translated">フォントフェイスの読み込みステータスを示します。これは、のいずれかになります &lt;code&gt;'loading'&lt;/code&gt; または &lt;code&gt;'loaded'&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="12e10815e3517b0bfc615ce72f4978ae81859a1f" translate="yes" xml:space="preserve">
          <source>Indicates the function to call when the specified action type is invoked. This is a void function, with no parameters.</source>
          <target state="translated">指定されたアクションタイプが呼び出されたときに呼び出す関数を示します。これは void 関数で、パラメータはありません。</target>
        </trans-unit>
        <trans-unit id="92a6696cb0c1a9574f3a98901317ec74d1eff0f7" translate="yes" xml:space="preserve">
          <source>Indicates the horizontal alignment of the cell data in the column.</source>
          <target state="translated">列内のセルデータの水平方向の位置合わせを示す。</target>
        </trans-unit>
        <trans-unit id="de0215c62713d8a1f2a26586bf95a98eba8d402e" translate="yes" xml:space="preserve">
          <source>Indicates the horizontal distance the shadow should extend from the object. This value isn't affected by the transformation matrix. The default is 0.</source>
          <target state="translated">影がオブジェクトから伸びるべき水平距離を示します。この値は変換行列の影響を受けません。デフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="d3a3683fb1126e821280de7cf8bdcf1feed014bd" translate="yes" xml:space="preserve">
          <source>Indicates the name of the identity assertion provider.</source>
          <target state="translated">ID アサーション・プロバイダの名前を示す。</target>
        </trans-unit>
        <trans-unit id="d4c0bd6d459586c0f92e582d37373292e23d800a" translate="yes" xml:space="preserve">
          <source>Indicates the name of the style sheet set that's currently in use.</source>
          <target state="translated">現在使用中のスタイルシートセットの名前を示します。</target>
        </trans-unit>
        <trans-unit id="89c65e8efdd80c668c59ea6823544ef4127545d1" translate="yes" xml:space="preserve">
          <source>Indicates the number of the endpoint to clear. The promise will reject if an invalid endpoint is supplied.</source>
          <target state="translated">クリアするエンドポイントの番号を示します。無効なエンドポイントが与えられた場合、プロミスは拒否されます。</target>
        </trans-unit>
        <trans-unit id="0a476d7abc82a932b12b8e9df8568e20909ed28d" translate="yes" xml:space="preserve">
          <source>Indicates the provider of the identity assertion.</source>
          <target state="translated">ID アサーションのプロバイダを示す。</target>
        </trans-unit>
        <trans-unit id="8abb26c645db9c1f05e28bb68d1f62f8736b62af" translate="yes" xml:space="preserve">
          <source>Indicates the size of the blurring effect; this value doesn't correspond to a number of pixels and is not affected by the current transformation matrix. The default value is 0.</source>
          <target state="translated">この値はピクセル数に対応しておらず、現在の変換行列の影響を受けません。デフォルト値は 0 です。</target>
        </trans-unit>
        <trans-unit id="39462415955f44d1e8b23904530abcbdd9bb7332" translate="yes" xml:space="preserve">
          <source>Indicates the type of message. May be one of &lt;code&gt;license-request&lt;/code&gt;, &lt;code&gt;license-renewal&lt;/code&gt;, &lt;code&gt;license-renewal&lt;/code&gt;, or &lt;code&gt;individualization-request&lt;/code&gt;.</source>
          <target state="translated">メッセージのタイプを示します。一つであり &lt;code&gt;license-request&lt;/code&gt; 、 &lt;code&gt;license-renewal&lt;/code&gt; 、 &lt;code&gt;license-renewal&lt;/code&gt; 、または &lt;code&gt;individualization-request&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="71623b83c5b10a6500c1b3253d31f4375fb05d7a" translate="yes" xml:space="preserve">
          <source>Indicates the vertical alignment of the cell data in the column.</source>
          <target state="translated">列内のセルデータの垂直方向の位置合わせを示します。</target>
        </trans-unit>
        <trans-unit id="c659be4f9bebe1ad9886bfa1ca77e5943e12f522" translate="yes" xml:space="preserve">
          <source>Indicates the vertical distance the shadow should extend from the object. This value isn't affected by the transformation matrix. The default is 0.</source>
          <target state="translated">影がオブジェクトから伸びるべき垂直方向の距離を示します。この値は変換行列の影響を受けません。デフォルトは 0 です。</target>
        </trans-unit>
        <trans-unit id="6f892da6b733d5eaf06855ec14d1cac874f2091f" translate="yes" xml:space="preserve">
          <source>Indicates the visibility of the current client. This value can be one of &lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;visible&lt;/code&gt;, &lt;code&gt;prerender&lt;/code&gt;, or &lt;code&gt;unloaded&lt;/code&gt;.</source>
          <target state="translated">現在のクライアントの可視性を示します。この値は、 &lt;code&gt;hidden&lt;/code&gt; 、 &lt;code&gt;visible&lt;/code&gt; 、 &lt;code&gt;prerender&lt;/code&gt; 、または &lt;code&gt;unloaded&lt;/code&gt; いずれかです。</target>
        </trans-unit>
        <trans-unit id="263abb9e83a986ee34435d657f244e87bb128285" translate="yes" xml:space="preserve">
          <source>Indicates whether a context is capable of using features that require secure contexts.</source>
          <target state="translated">コンテキストが、安全なコンテキストを必要とする機能を使用できるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="8f3e675f73f1593382fcae2b67992a8859c9a1fa" translate="yes" xml:space="preserve">
          <source>Indicates whether a persistent distinctive identifier is required.</source>
          <target state="translated">永続的な特徴的な識別子が必要かどうかを示す。</target>
        </trans-unit>
        <trans-unit id="09ac7218d9aa20e78da6980428d1b9a2e0d7bc5f" translate="yes" xml:space="preserve">
          <source>Indicates whether a session has been started with a paired USB device.</source>
          <target state="translated">ペアリングされたUSBデバイスでセッションが開始されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="5e538254f76e96fb281a0e7a4e9ce69d2ede8aef" translate="yes" xml:space="preserve">
          <source>Indicates whether or not &lt;a href=&quot;event/preventdefault&quot;&gt;&lt;code&gt;event.preventDefault()&lt;/code&gt;&lt;/a&gt; has been called on the event.</source>
          <target state="translated">イベントで&lt;a href=&quot;event/preventdefault&quot;&gt; &lt;code&gt;event.preventDefault()&lt;/code&gt; &lt;/a&gt;が呼び出されたかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="47c2fd8a58e98d8b4b46b757d418223f6e55bf4a" translate="yes" xml:space="preserve">
          <source>Indicates whether or not messages sent on the &lt;a href=&quot;../rtcdatachannel&quot;&gt;&lt;code&gt;RTCDataChannel&lt;/code&gt;&lt;/a&gt; are required to arrive at their destination in the same order in which they were sent (&lt;code&gt;true&lt;/code&gt;), or if they're allowed to arrive out-of-order (&lt;code&gt;false&lt;/code&gt;). &lt;code&gt;true&lt;/code&gt;</source>
          <target state="translated">&lt;a href=&quot;../rtcdatachannel&quot;&gt; &lt;code&gt;RTCDataChannel&lt;/code&gt; で&lt;/a&gt;送信されたメッセージが、送信されたのと同じ順序で宛先に到着する必要があるか（ &lt;code&gt;true&lt;/code&gt; ）、順不同で到着することが許可されているか（ &lt;code&gt;false&lt;/code&gt; ）を示します。 &lt;code&gt;true&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="79cfac20185cac0f489e4c931060f626ad8c19ff" translate="yes" xml:space="preserve">
          <source>Indicates whether or not sending and receiving using the paired &lt;code&gt;RTCRtpSender&lt;/code&gt; and &lt;code&gt;RTCRtpReceiver&lt;/code&gt; has been permanently disabled, either due to SDP offer/answer, or due to a call to &lt;a href=&quot;rtcrtptransceiver/stop&quot;&gt;&lt;code&gt;stop()&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">ペアの &lt;code&gt;RTCRtpSender&lt;/code&gt; と &lt;code&gt;RTCRtpReceiver&lt;/code&gt; を使用した送受信が、SDPオファー/アンサー、または&lt;a href=&quot;rtcrtptransceiver/stop&quot;&gt; &lt;code&gt;stop()&lt;/code&gt; の&lt;/a&gt;呼び出しにより、永続的に無効にされているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="59cf01226259dc793b3314431ae2e36c9963f453" translate="yes" xml:space="preserve">
          <source>Indicates whether or not the device is providing orientation data absolutely (that is, in reference to the Earth's coordinate frame) or using some arbitrary frame determined by the device. See &lt;a href=&quot;https://developer.mozilla.org/en/DOM/Orientation_and_motion_data_explained&quot;&gt;Orientation and motion data explained&lt;/a&gt; for details.</source>
          <target state="translated">デバイスが方位データを完全に（つまり、地球の座標フレームを参照して）提供しているか、デバイスによって決定された任意のフレームを使用しているかを示します。詳細については、&lt;a href=&quot;https://developer.mozilla.org/en/DOM/Orientation_and_motion_data_explained&quot;&gt;方向とモーションデータの説明&lt;/a&gt;をご覧ください。</target>
        </trans-unit>
        <trans-unit id="78957535526dc4925910f8b70f5c4bf6b8a81ec8" translate="yes" xml:space="preserve">
          <source>Indicates whether or not the event was initiated by the browser (after a user click for instance) or by a script (using an event creation method, like &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent&quot;&gt;event.initEvent&lt;/a&gt;).</source>
          <target state="translated">イベントがブラウザー（ユーザーがクリックした後など）によって開始されたか、スクリプト（&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/Event/initEvent&quot;&gt;event.initEvent&lt;/a&gt;などのイベント作成メソッドを使用して）によって開始されたかを示します。</target>
        </trans-unit>
        <trans-unit id="c0c357a065bf3d6f657e2df70fd5dd6997e7eb26" translate="yes" xml:space="preserve">
          <source>Indicates whether or not the response is the result of a redirect; that is, its URL list has more than one entry.</source>
          <target state="translated">レスポンスがリダイレクトの結果であるかどうかを示す。</target>
        </trans-unit>
        <trans-unit id="c821825b0c76f63357ee9e9fbd99a620ac826fc3" translate="yes" xml:space="preserve">
          <source>Indicates whether or not there is currently an active stream of video running.</source>
          <target state="translated">現在実行中の動画のアクティブなストリームがあるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="be80c9199209ddc4eaf845c7c68cde13dbbfcaca" translate="yes" xml:space="preserve">
          <source>Indicates whether the &lt;code&gt;MediaRecorder&lt;/code&gt; instance will record input when the input &lt;a href=&quot;mediastreamtrack&quot;&gt;&lt;code&gt;MediaStreamTrack&lt;/code&gt;&lt;/a&gt; is muted. If this attribute is &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;MediaRecorder&lt;/code&gt; will record silence for audio and black frames for video. The default is &lt;code&gt;false&lt;/code&gt;.</source>
          <target state="translated">入力&lt;a href=&quot;mediastreamtrack&quot;&gt; &lt;code&gt;MediaStreamTrack&lt;/code&gt; &lt;/a&gt;がミュートされているときに &lt;code&gt;MediaRecorder&lt;/code&gt; インスタンスが入力を記録するかどうかを示します。この属性が &lt;code&gt;false&lt;/code&gt; の場合、 &lt;code&gt;MediaRecorder&lt;/code&gt; はオーディオの無音とビデオの黒フレームを記録します。デフォルトは &lt;code&gt;false&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="42c3cb6e0b5aba8e748535d09bddd2e84d045ba9" translate="yes" xml:space="preserve">
          <source>Indicates whether the &lt;code&gt;PaymentRequest&lt;/code&gt; object can make a payment before calling &lt;code&gt;show()&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;show()&lt;/code&gt; を呼び出す前に &lt;code&gt;PaymentRequest&lt;/code&gt; オブジェクトが支払いを行えるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="4d5331ca4d2f8ff22635a9bbda0c4ffc343528c0" translate="yes" xml:space="preserve">
          <source>Indicates whether the ability to persist state is required.</source>
          <target state="translated">状態を持続させる能力が必要かどうかを示す。</target>
        </trans-unit>
        <trans-unit id="3dcb541000db277de6a73be2618295168fa554ce" translate="yes" xml:space="preserve">
          <source>Indicates whether the animation is currently waiting for an asynchronous operation such as initiating playback or pausing a running animation.</source>
          <target state="translated">アニメーションが現在、再生を開始したり、実行中のアニメーションを一時停止したりするなどの非同期操作を待っているかどうかを示す。</target>
        </trans-unit>
        <trans-unit id="0e5ee5b6414063f4374fdf05be2729ba9380a7e6" translate="yes" xml:space="preserve">
          <source>Indicates whether the attribute is an &quot;ID attribute&quot;. An &quot;ID attribute&quot; being an attribute which value is expected to be unique across a DOM Document. In HTML DOM, &quot;id&quot; is the only ID attribute, but XML documents could define others. Whether or not an attribute is unique is often determined by a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/DTD&quot;&gt;DTD&lt;/a&gt; or other schema description.</source>
          <target state="translated">属性が「ID属性」であるかどうかを示します。「ID属性」は、DOMドキュメント全体で一意であることが期待される属性です。HTML DOMでは、 &quot;id&quot;が唯一のID属性ですが、XMLドキュメントは他の属性を定義できます。属性が一意であるかどうかは、多くの場合、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/DTD&quot;&gt;DTD&lt;/a&gt;またはその他のスキーマ記述によって決定されます。</target>
        </trans-unit>
        <trans-unit id="de5bea75b1380592d1126bd58fe92433f4180ae3" translate="yes" xml:space="preserve">
          <source>Indicates whether the current media session is playing. Valid values are &lt;code&gt;&quot;none&quot;&lt;/code&gt;, &lt;code&gt;&quot;paused&quot;&lt;/code&gt;, or &lt;code&gt;&quot;playing&quot;&lt;/code&gt;.</source>
          <target state="translated">現在のメディアセッションが再生中かどうかを示します。有効な値は &lt;code&gt;&quot;none&quot;&lt;/code&gt; 、 &lt;code&gt;&quot;paused&quot;&lt;/code&gt; 、または &lt;code&gt;&quot;playing&quot;&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="dbec7f6539d606f3f1db5c5a4b158313bfe93759" translate="yes" xml:space="preserve">
          <source>Indicates whether the devices input or output should be cleared. Valid values are &lt;code&gt;'in'&lt;/code&gt; or &lt;code&gt;'out'&lt;/code&gt;.</source>
          <target state="translated">デバイスの入力または出力をクリアする必要があるかどうかを示します。有効な値は &lt;code&gt;'in'&lt;/code&gt; または &lt;code&gt;'out'&lt;/code&gt; です。</target>
        </trans-unit>
        <trans-unit id="2d007cc5129d76ac92234990a583e3589562ab12" translate="yes" xml:space="preserve">
          <source>Indicates whether the document is rendered in &lt;a href=&quot;https://developer.mozilla.org/en/Quirks_Mode_and_Standards_Mode&quot;&gt;Quirks mode&lt;/a&gt; or Standards mode.</source>
          <target state="translated">ドキュメントが&lt;a href=&quot;https://developer.mozilla.org/en/Quirks_Mode_and_Standards_Mode&quot;&gt;Quirksモード&lt;/a&gt;とStandardsモードのどちらでレンダリングされるかを示します。</target>
        </trans-unit>
        <trans-unit id="d9979a4e1c75f19075eb4234f278473d1471d513" translate="yes" xml:space="preserve">
          <source>Indicates whether the document is rendered in &lt;em&gt;quirks&lt;/em&gt; or &lt;em&gt;strict&lt;/em&gt; mode.</source>
          <target state="translated">ドキュメントが&lt;em&gt;互換&lt;/em&gt;モードまたは&lt;em&gt;厳密&lt;/em&gt;モードでレンダリングされるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="920a3ad7650a5914adadcf90f00d4875e9b89311" translate="yes" xml:space="preserve">
          <source>Indicates whether the element on which it is invoked has pointer capture for the pointer identified by the given pointer ID.</source>
          <target state="translated">呼び出された要素が、与えられたポインタIDで識別されるポインタのポインタキャプチャを持っているかどうかを示す。</target>
        </trans-unit>
        <trans-unit id="52877506a30c4059937d86864e7d92ec1837bc62" translate="yes" xml:space="preserve">
          <source>Indicates whether the option is currently selected.</source>
          <target state="translated">オプションが現在選択されているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="d42405514ac15e244a1866a08f02a537ed7c51a0" translate="yes" xml:space="preserve">
          <source>Indicates whether the specified property is in the &lt;code&gt;StylePropertyMapReadOnly&lt;/code&gt; object.</source>
          <target state="translated">指定したプロパティが &lt;code&gt;StylePropertyMapReadOnly&lt;/code&gt; オブジェクトにあるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="80aaec07420325168a56eaaa04ee7ad690d01cef" translate="yes" xml:space="preserve">
          <source>Indicates whether the upper bound excludes the endpoint value. The default is false.</source>
          <target state="translated">上限がエンドポイント値を除外するかどうかを示します。デフォルトはfalseです。</target>
        </trans-unit>
        <trans-unit id="3711be406bf25bfdb58e502f4c5613e3c5583099" translate="yes" xml:space="preserve">
          <source>Indicates whether the user agent is controlled by automation.</source>
          <target state="translated">ユーザーエージェントがオートメーションによって制御されているかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="a349b6ccf98bb02b9d50a2a55022dc73b09207cf" translate="yes" xml:space="preserve">
          <source>Indicates whether the video can be rendered more efficiently.</source>
          <target state="translated">動画をより効率的にレンダリングできるかどうかを示します。</target>
        </trans-unit>
        <trans-unit id="05fc56c6e337be9e7958cc1d91e67239d5828050" translate="yes" xml:space="preserve">
          <source>Indicates which phase of the event flow is being processed.</source>
          <target state="translated">イベントフローのどのフェーズが処理されているかを示します。</target>
        </trans-unit>
        <trans-unit id="e65d49bd8da934bd8237e4eb10f374f5e2fc4a5a" translate="yes" xml:space="preserve">
          <source>Indicates which phase of the event flow is currently being evaluated.</source>
          <target state="translated">イベントフローのどのフェーズが現在評価されているかを示します。</target>
        </trans-unit>
        <trans-unit id="313a0571fda078724f569e72a0578a3cbaa3ebae" translate="yes" xml:space="preserve">
          <source>Indicates why the connection was closed. This property takes one of the following values: &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;closed&lt;/code&gt;, or &lt;code&gt;wentaway&lt;/code&gt;.</source>
          <target state="translated">接続が閉じられた理由を示します。このプロパティは次のいずれかの値を取ります： &lt;code&gt;error&lt;/code&gt; 、 &lt;code&gt;closed&lt;/code&gt; 、または &lt;code&gt;wentaway&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="7a2436fa32b60c93f3ae0214f7abc8af02c91c34" translate="yes" xml:space="preserve">
          <source>Indication</source>
          <target state="translated">Indication</target>
        </trans-unit>
        <trans-unit id="107c579b95c81170e17edde104041a737b9b922b" translate="yes" xml:space="preserve">
          <source>Individual &lt;a href=&quot;../file&quot;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; objects can be retrieved by simply accessing the list as an array:</source>
          <target state="translated">個々の&lt;a href=&quot;../file&quot;&gt; &lt;code&gt;File&lt;/code&gt; &lt;/a&gt;オブジェクトは、配列としてリストにアクセスするだけで取得できます。</target>
        </trans-unit>
        <trans-unit id="cd19e8167746bd3a2c71c2b016e8f9128b4aa837" translate="yes" xml:space="preserve">
          <source>Individual transformations of points and polygons in space in WebGL are handled by the basic transformation matrices like translation, scale, and rotation. These matrices can be composed together and grouped in special ways to make them useful for rendering complicated 3d scenes. These composed matrices ultimately move the original model data around into a special coordinate space called clip space. This is a 2 unit wide cube. The center coordinate is (0,0,0), while the corners range from (-1,-1,-1) to (1,1,1). This clip space is compressed down into a 2d space and rasterized into an image.</source>
          <target state="translated">WebGL における空間内の点やポリゴンの個々の変換は、並進、スケール、回転などの基本的な変換行列によって処理されます。これらの行列は、複雑な 3D シーンのレンダリングに便利なように、特別な方法で組み合わせたり、グループ化したりすることができます。これらの構成された行列は、最終的に元のモデルデータをクリップ空間と呼ばれる特殊な座標空間に移動させます。これは 2 単位幅の立方体です。中心座標は(0,0,0)で、角は(-1,-1,-1)から(1,1,1)までの範囲です。このクリップ空間を2次元空間に圧縮してラスタライズして画像にしています。</target>
        </trans-unit>
        <trans-unit id="6bcc9a981a51e3ebc371a32152669ea9066624b1" translate="yes" xml:space="preserve">
          <source>Information exchanged during signaling</source>
          <target state="translated">シグナリング中に交換される情報</target>
        </trans-unit>
        <trans-unit id="376bc1157a4b933fae2a9dfb20684a86ce2cf24d" translate="yes" xml:space="preserve">
          <source>Information needed in order to set up the connection: the IP addressing and port information needed for the peers to be able to talk to one another.</source>
          <target state="translated">接続をセットアップするために必要な情報:ピアがお互いに話ができるようにするために必要なIPアドレスとポート情報。</target>
        </trans-unit>
        <trans-unit id="72ec802f7446ac769ada0d55fecb94ce5fbb4d81" translate="yes" xml:space="preserve">
          <source>Information on working with event handlers</source>
          <target state="translated">イベントハンドラでの作業に関する情報</target>
        </trans-unit>
        <trans-unit id="aedc2e372d5cb458a850dc90bc72925df23a2fa5" translate="yes" xml:space="preserve">
          <source>Informative logging of information. You may use &lt;a href=&quot;console#Using_string_substitutions&quot;&gt;string substitution&lt;/a&gt; and additional arguments with this method.</source>
          <target state="translated">情報の有益なロギング。このメソッドでは、&lt;a href=&quot;console#Using_string_substitutions&quot;&gt;文字列置換&lt;/a&gt;と追加の引数を使用できます。</target>
        </trans-unit>
        <trans-unit id="fdaddb9ce367c2ca746a97cc24d2e8817a51f27d" translate="yes" xml:space="preserve">
          <source>Inheritance</source>
          <target state="translated">Inheritance</target>
        </trans-unit>
        <trans-unit id="7864bef4e98617d80cf4ddb1b5036da383315b0c" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;authenticatorresponse/clientdatajson&quot;&gt;&lt;code&gt;AuthenticatorResponse.clientDataJSON&lt;/code&gt;&lt;/a&gt;. Includes the client data for the authentication, such as origin and challenge.</source>
          <target state="translated">&lt;a href=&quot;authenticatorresponse/clientdatajson&quot;&gt; &lt;code&gt;AuthenticatorResponse.clientDataJSON&lt;/code&gt; &lt;/a&gt;から継承されます。オリジンやチャレンジなどの認証用のクライアントデータが含まれます。</target>
        </trans-unit>
        <trans-unit id="a7c45c31b4d0dcea6ac286ee958b4a4a4570cf91" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;credential&quot;&gt;&lt;code&gt;Credential&lt;/code&gt;&lt;/a&gt; and overridden to be the &lt;a href=&quot;windowbase64/base64_encoding_and_decoding&quot;&gt;base64url encoding&lt;/a&gt; of PublicKeyCredential.rawId.</source>
          <target state="translated">&lt;a href=&quot;credential&quot;&gt; &lt;code&gt;Credential&lt;/code&gt; &lt;/a&gt;から継承され、PublicKeyCredential.rawIdの&lt;a href=&quot;windowbase64/base64_encoding_and_decoding&quot;&gt;base64urlエンコーディング&lt;/a&gt;にオーバーライドされます。</target>
        </trans-unit>
        <trans-unit id="a0e18e44079bb7f7a831ff7f2d4adaf758db6e18" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;credential&quot;&gt;&lt;code&gt;Credential&lt;/code&gt;&lt;/a&gt;. Always set to &quot;public-key&quot; for PublicKeyCredentials.</source>
          <target state="translated">&lt;a href=&quot;credential&quot;&gt; &lt;code&gt;Credential&lt;/code&gt; &lt;/a&gt;から継承されます。PublicKeyCredentialsの場合は常に「public-key」に設定します。</target>
        </trans-unit>
        <trans-unit id="3041d69f79ff14b70c9a0438662f5882cc0505d2" translate="yes" xml:space="preserve">
          <source>Inherited from &lt;a href=&quot;eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;:</source>
          <target state="translated">&lt;a href=&quot;eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; &lt;/a&gt;から継承：</target>
        </trans-unit>
        <trans-unit id="01f177b463fc294bdcc09de6dbbf7ff775050cc0" translate="yes" xml:space="preserve">
          <source>Inherited from WorkerGlobalScope</source>
          <target state="translated">WorkerGlobalScope から継承</target>
        </trans-unit>
        <trans-unit id="7951150c36a5b0078509be63ec158d0a10f3f90a" translate="yes" xml:space="preserve">
          <source>Inherited properties</source>
          <target state="translated">継承されたプロパティ</target>
        </trans-unit>
        <trans-unit id="84f16ef56773ff7e3a91862b69e96c346f436cf4" translate="yes" xml:space="preserve">
          <source>Inherits from: &lt;a href=&quot;eventtarget&quot;&gt;&lt;code&gt;EventTarget&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">継承元：&lt;a href=&quot;eventtarget&quot;&gt; &lt;code&gt;EventTarget&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="57c0c56df543c82fcefc44413b3ac85e77b0f769" translate="yes" xml:space="preserve">
          <source>Inherits from: &lt;a href=&quot;eventtarget&quot;&gt;EventTarget&lt;/a&gt;</source>
          <target state="translated">継承元：&lt;a href=&quot;eventtarget&quot;&gt;EventTarget&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="e9714939fe6408b5bc2e98878b76913f55c712ab" translate="yes" xml:space="preserve">
          <source>Inherits from: &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBRequest&quot;&gt;IDBRequest&lt;/a&gt;&lt;/code&gt;</source>
          <target state="translated">継承元： &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en/IndexedDB/IDBRequest&quot;&gt;IDBRequest&lt;/a&gt;&lt;/code&gt;</target>
        </trans-unit>
        <trans-unit id="14cb9bffa021be1c70926c7c04cf3e99959a6e0a" translate="yes" xml:space="preserve">
          <source>Inherits methods from its parent interface, &lt;a href=&quot;idbcursor&quot;&gt;&lt;code&gt;IDBCursor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">親インターフェイス&lt;a href=&quot;idbcursor&quot;&gt; &lt;code&gt;IDBCursor&lt;/code&gt; &lt;/a&gt;からメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="b2934e25eb4a8ca0fc3ce529391eeb98fe33cba7" translate="yes" xml:space="preserve">
          <source>Inherits methods from its parent, &lt;a href=&quot;event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">親である&lt;a href=&quot;event&quot;&gt; &lt;code&gt;Event&lt;/code&gt; &lt;/a&gt;からメソッドを継承します。</target>
        </trans-unit>
        <trans-unit id="bfe8191bb0774c32f0167b16772b5dcaf8299d17" translate="yes" xml:space="preserve">
          <source>Inherits properties from its parent interface, &lt;a href=&quot;idbcursor&quot;&gt;&lt;code&gt;IDBCursor&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">親インターフェイス&lt;a href=&quot;idbcursor&quot;&gt; &lt;code&gt;IDBCursor&lt;/code&gt; &lt;/a&gt;からプロパティを継承します。</target>
        </trans-unit>
        <trans-unit id="53b42937afb55f5c7827416aa911796e83c49c0d" translate="yes" xml:space="preserve">
          <source>Inherits properties from its parent, &lt;a href=&quot;event&quot;&gt;&lt;code&gt;Event&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">親である&lt;a href=&quot;event&quot;&gt; &lt;code&gt;Event&lt;/code&gt; &lt;/a&gt;からプロパティを継承します。</target>
        </trans-unit>
        <trans-unit id="3d508e28156c7e964397687023c44172ddeee6e9" translate="yes" xml:space="preserve">
          <source>Initial (older) definition, which is now outdated.</source>
          <target state="translated">初期(旧)の定義で、現在は古くなっています。</target>
        </trans-unit>
        <trans-unit id="35f764caa3bea8e54772a7830f20925d8c69dbdf" translate="yes" xml:space="preserve">
          <source>Initial (older) definition.</source>
          <target state="translated">初期の(古い)定義。</target>
        </trans-unit>
        <trans-unit id="035932ce61bd03f6681a2dfbb742b6af7b651dcc" translate="yes" xml:space="preserve">
          <source>Initial Definition</source>
          <target state="translated">初期定義</target>
        </trans-unit>
        <trans-unit id="9e915d7086e42ba7ad8fb470ce6fd37be732353b" translate="yes" xml:space="preserve">
          <source>Initial definition</source>
          <target state="translated">初期定義</target>
        </trans-unit>
        <trans-unit id="b05a13b2525f74836ec1dfae834faa32544e2380" translate="yes" xml:space="preserve">
          <source>Initial definition (&lt;a href=&quot;https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3Events-key.html#keys-modifier&quot;&gt;Modifier Keys spec&lt;/a&gt;)</source>
          <target state="translated">初期定義（&lt;a href=&quot;https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3Events-key.html#keys-modifier&quot;&gt;修飾キーの仕様&lt;/a&gt;）</target>
        </trans-unit>
        <trans-unit id="57b0dbba5b7b00a290af593cd2b5e8d5860d6d28" translate="yes" xml:space="preserve">
          <source>Initial definition (DOM Level 0)</source>
          <target state="translated">初期定義(DOM レベル 0</target>
        </trans-unit>
        <trans-unit id="1dad956cc1872349ad5efc994aa62cd85f1c1fb6" translate="yes" xml:space="preserve">
          <source>Initial definition (Note: This event is specified in the Push API, but accessed through &lt;a href=&quot;../serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;.)</source>
          <target state="translated">初期定義（注：このイベントはPush APIで指定されていますが、&lt;a href=&quot;../serviceworkerglobalscope&quot;&gt; &lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt; &lt;/a&gt;を介してアクセスされます。）</target>
        </trans-unit>
        <trans-unit id="d4f82f8b30c03539c90f752f0acf6bdde2d12e45" translate="yes" xml:space="preserve">
          <source>Initial definition (as an obsolete property).</source>
          <target state="translated">初期定義(廃止されたプロパティとして)。</target>
        </trans-unit>
        <trans-unit id="12bc585995f4384d0038313f4051b21a82ad9267" translate="yes" xml:space="preserve">
          <source>Initial definition (implements &lt;code&gt;URLUtils&lt;/code&gt;).</source>
          <target state="translated">初期定義（ &lt;code&gt;URLUtils&lt;/code&gt; を実装）。</target>
        </trans-unit>
        <trans-unit id="61fe4cce703b9897ba32b003276af3ef1a9476c7" translate="yes" xml:space="preserve">
          <source>Initial definition for WebGL.</source>
          <target state="translated">WebGLの初期定義。</target>
        </trans-unit>
        <trans-unit id="ba1f93feb2f3bfdbbb984cac6c6a774c6bf12318" translate="yes" xml:space="preserve">
          <source>Initial definition for the interface</source>
          <target state="translated">インターフェースの初期定義</target>
        </trans-unit>
        <trans-unit id="bd3e29ae4544172ea15498e979ce6e1fdfcf9df3" translate="yes" xml:space="preserve">
          <source>Initial definition in the DOM 1 specification.</source>
          <target state="translated">DOM 1 仕様での初期定義。</target>
        </trans-unit>
        <trans-unit id="50beb284a7176e1493be211730ab0c49ca4a53e1" translate="yes" xml:space="preserve">
          <source>Initial definition in the DOM 2 Events specification.</source>
          <target state="translated">DOM 2 Events 仕様での初期定義。</target>
        </trans-unit>
        <trans-unit id="d38ed773e0e13defb944605bec75dfe2aa4b20d9" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;PerformanceObserver()&lt;/code&gt; constructor.</source>
          <target state="translated">&lt;code&gt;PerformanceObserver()&lt;/code&gt; コンストラクターの初期定義。</target>
        </trans-unit>
        <trans-unit id="dabb3ed7c33e82a10614679f9e35dc2eaee58c7f" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;PerformanceObserver&lt;/code&gt; interface.</source>
          <target state="translated">&lt;code&gt;PerformanceObserver&lt;/code&gt; インターフェイスの初期定義。</target>
        </trans-unit>
        <trans-unit id="88268710602bd6eaccf32feac9b1e7c525b37729" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;disconnect()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;disconnect()&lt;/code&gt; メソッドの初期定義。</target>
        </trans-unit>
        <trans-unit id="70a3de73f0e3220ea5de9b77004d45bb529a8999" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;getEntriesByName()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getEntriesByName()&lt;/code&gt; メソッドの初期定義。</target>
        </trans-unit>
        <trans-unit id="cb74f8ce571789279cc896e18ad0b05c31469e31" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;getEntriesByType()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;getEntriesByType()&lt;/code&gt; メソッドの初期定義。</target>
        </trans-unit>
        <trans-unit id="252bd294b03bcca2e27217155bf30813ef9cb582" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;observe()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;observe()&lt;/code&gt; メソッドの初期定義。</target>
        </trans-unit>
        <trans-unit id="8671988156f022034f5168efce00429d73b77250" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;takeRecords()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;takeRecords()&lt;/code&gt; メソッドの初期定義。</target>
        </trans-unit>
        <trans-unit id="ae5a5c6262be02332c66eab4bf367bd9a030763e" translate="yes" xml:space="preserve">
          <source>Initial definition of &lt;code&gt;toJSON()&lt;/code&gt; method.</source>
          <target state="translated">&lt;code&gt;toJSON()&lt;/code&gt; メソッドの初期定義。</target>
        </trans-unit>
        <trans-unit id="9f1113be36362e8733f10569daacac2dbc77f447" translate="yes" xml:space="preserve">
          <source>Initial definition, as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/a&gt; was associated with an &lt;a href=&quot;htmlelement&quot;&gt;&lt;code&gt;HTMLElement&lt;/code&gt;&lt;/a&gt; before that.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/span&quot;&gt; &lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt; &lt;/a&gt;がその前に&lt;a href=&quot;htmlelement&quot;&gt; &lt;code&gt;HTMLElement&lt;/code&gt; &lt;/a&gt;に関連付けられていたため、初期定義。</target>
        </trans-unit>
        <trans-unit id="b22604826ce7839aacd9494e8bdf74cbc0fe1acf" translate="yes" xml:space="preserve">
          <source>Initial definition, included &lt;a href=&quot;https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3Events-code.html&quot;&gt;code values&lt;/a&gt;.</source>
          <target state="translated">初期定義、含まれる&lt;a href=&quot;https://dvcs.w3.org/hg/dom3events/raw-file/tip/html/DOM3Events-code.html&quot;&gt;コード値&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="6abb7831e174c8e76df3cd001d41996c6533a878" translate="yes" xml:space="preserve">
          <source>Initial definition, included key values.</source>
          <target state="translated">初期定義、キー値を含む。</target>
        </trans-unit>
        <trans-unit id="5219982ee9454fa5b7b6d90858dc0c8ef94330b4" translate="yes" xml:space="preserve">
          <source>Initial definition, on the &lt;a href=&quot;../node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; interface.</source>
          <target state="translated">&lt;a href=&quot;../node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;インターフェースでの初期定義。</target>
        </trans-unit>
        <trans-unit id="020c5ef04c8e0349aef5df24ce031e6c67e3bd41" translate="yes" xml:space="preserve">
          <source>Initial definition, snapshot of &lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standard&lt;/a&gt;</source>
          <target state="translated">初期定義、&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standardの&lt;/a&gt;スナップショット</target>
        </trans-unit>
        <trans-unit id="34d5fd7eb564370744ddfdfc409121e6028c5008" translate="yes" xml:space="preserve">
          <source>Initial definition, snapshot of &lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standard&lt;/a&gt;.</source>
          <target state="translated">最初の定義、&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standardの&lt;/a&gt;スナップショット。</target>
        </trans-unit>
        <trans-unit id="1996078361460df53a1d2f9e9930c7c26d7f873c" translate="yes" xml:space="preserve">
          <source>Initial definition.</source>
          <target state="translated">初期定義。</target>
        </trans-unit>
        <trans-unit id="9b547c0e3963f5dc594e276ea01a9690d086e3fc" translate="yes" xml:space="preserve">
          <source>Initial definition. Based on OpenGL ES 2.0</source>
          <target state="translated">初期定義。OpenGL ES 2.0をベースにしています。</target>
        </trans-unit>
        <trans-unit id="01ff8be5558c7f502c55f3a230f8bd98f0622ce6" translate="yes" xml:space="preserve">
          <source>Initial definition. Older versions of this spec were called &quot;Media Capture Output&quot;.</source>
          <target state="translated">初期定義。この仕様の古いバージョンでは、「メディアキャプチャ出力」と呼ばれていました。</target>
        </trans-unit>
        <trans-unit id="c211f960f5d88cc90b25080b6c3a905417d435f8" translate="yes" xml:space="preserve">
          <source>Initial definition. This event is specified in the Push API, but accessed through &lt;a href=&quot;../serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期定義。このイベントはPush APIで指定されていますが、&lt;a href=&quot;../serviceworkerglobalscope&quot;&gt; &lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt; を&lt;/a&gt;介してアクセスされます。</target>
        </trans-unit>
        <trans-unit id="6ad0f5594d284a1d7d442f941281392d4637da77" translate="yes" xml:space="preserve">
          <source>Initial definition. This property is specified on the &lt;a href=&quot;../notifications_api&quot;&gt;&lt;code&gt;Notifications_API&lt;/code&gt;&lt;/a&gt; even though it's part of &lt;a href=&quot;../serviceworkerglobalscope&quot;&gt;&lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">初期定義。このプロパティは、&lt;a href=&quot;../serviceworkerglobalscope&quot;&gt; &lt;code&gt;ServiceWorkerGlobalScope&lt;/code&gt; &lt;/a&gt;の一部であっても、&lt;a href=&quot;../notifications_api&quot;&gt; &lt;code&gt;Notifications_API&lt;/code&gt; &lt;/a&gt;で指定されます。</target>
        </trans-unit>
        <trans-unit id="a5a806ce0a9f8bc786f4eb5fc74231ac2baf8dd9" translate="yes" xml:space="preserve">
          <source>Initial definition. Unlike OpenGL, WebGL requires &lt;code&gt;zNear&lt;/code&gt; and &lt;code&gt;zFar&lt;/code&gt; values to be clamped to the range 0 to 1. Additionally, &lt;code&gt;zNear&lt;/code&gt; must be less than or equal to &lt;code&gt;zFar&lt;/code&gt;.</source>
          <target state="translated">初期定義。OpenGLのとは異なり、WebGLのに必要 &lt;code&gt;zNear&lt;/code&gt; と &lt;code&gt;zFar&lt;/code&gt; さらに1に範囲0にクランプされる値を、 &lt;code&gt;zNear&lt;/code&gt; は以下でなければならないか等しい &lt;code&gt;zFar&lt;/code&gt; 。</target>
        </trans-unit>
        <trans-unit id="53cb0e86655e97503e5060e4c704294482fa666c" translate="yes" xml:space="preserve">
          <source>Initial definition; living specification.</source>
          <target state="translated">初期定義;生活仕様。</target>
        </trans-unit>
        <trans-unit id="022515f406a57864f40cd1203eb4dcb41febf436" translate="yes" xml:space="preserve">
          <source>Initial defintion.</source>
          <target state="translated">初期定義。</target>
        </trans-unit>
        <trans-unit id="79ea0d21e059f23d3bd03e3e331e0629c38b7aa4" translate="yes" xml:space="preserve">
          <source>Initial oscillator</source>
          <target state="translated">初期発振器</target>
        </trans-unit>
        <trans-unit id="b05c468492e894bf720cb26fc99830351a2cef87" translate="yes" xml:space="preserve">
          <source>Initial specification</source>
          <target state="translated">初期仕様</target>
        </trans-unit>
        <trans-unit id="8f03130f43d80f7b832367da10284552d03021e1" translate="yes" xml:space="preserve">
          <source>Initial specification.</source>
          <target state="translated">初期仕様。</target>
        </trans-unit>
        <trans-unit id="33627a6943eb41fb54dab553888b9b11f79e79fd" translate="yes" xml:space="preserve">
          <source>Initial specification; snapshot of an early version&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standard&lt;/a&gt;.</source>
          <target state="translated">初期仕様; 初期バージョンの&lt;a href=&quot;https://html.spec.whatwg.org/multipage/&quot;&gt;HTML Living Standardの&lt;/a&gt;スナップショット。</target>
        </trans-unit>
        <trans-unit id="fcb1ddc45496d5bd9bbb1d0e3e24a58c56f33281" translate="yes" xml:space="preserve">
          <source>Initial value</source>
          <target state="translated">初期値</target>
        </trans-unit>
        <trans-unit id="94193ed67d9a7ccb8f78c1137546b993638b466f" translate="yes" xml:space="preserve">
          <source>Initial version</source>
          <target state="translated">初期バージョン</target>
        </trans-unit>
        <trans-unit id="2d2745c6a52a8530e3d1ae44888db948ce2624e9" translate="yes" xml:space="preserve">
          <source>Initial version.</source>
          <target state="translated">初期バージョン。</target>
        </trans-unit>
        <trans-unit id="68fa16ffd48f366e4fa8d57fea78ff03fcab0191" translate="yes" xml:space="preserve">
          <source>Initialization</source>
          <target state="translated">Initialization</target>
        </trans-unit>
        <trans-unit id="ffa659950aa5f6b232f7f21e3d97090137ebd5db" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;AnimationEvent&lt;/code&gt; created using the deprecated &lt;a href=&quot;document/createevent&quot;&gt;&lt;code&gt;Document.createEvent(&quot;AnimationEvent&quot;)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">非推奨の&lt;a href=&quot;document/createevent&quot;&gt; &lt;code&gt;Document.createEvent(&quot;AnimationEvent&quot;)&lt;/code&gt; &lt;/a&gt;メソッドを使用して作成された &lt;code&gt;AnimationEvent&lt;/code&gt; を初期化します。</target>
        </trans-unit>
        <trans-unit id="78e3a109f29ee532cd63abc0ee0effe5fe2e1e61" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;CustomEvent&lt;/code&gt; object. If the event has already being dispatched, this method does nothing.</source>
          <target state="translated">&lt;code&gt;CustomEvent&lt;/code&gt; オブジェクトを初期化します。イベントがすでに送出されている場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="6732f0a3699c1db29b9e02c9c049eb47ae50eaca" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;KeyboardEvent&lt;/code&gt; object. This is now deprecated. You should instead use the &lt;a href=&quot;keyboardevent/keyboardevent&quot;&gt;&lt;code&gt;KeyboardEvent()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;KeyboardEvent&lt;/code&gt; オブジェクトを初期化します。これは非推奨になりました。代わりに、&lt;a href=&quot;keyboardevent/keyboardevent&quot;&gt; &lt;code&gt;KeyboardEvent()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7d78528a797d39b036860b58b63de9ba562bb324" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;KeyboardEvent&lt;/code&gt; object. This was implemented only by Firefox, and is no longer supported even there; instead, you should use the &lt;a href=&quot;keyboardevent/keyboardevent&quot;&gt;&lt;code&gt;KeyboardEvent()&lt;/code&gt;&lt;/a&gt; constructor.</source>
          <target state="translated">&lt;code&gt;KeyboardEvent&lt;/code&gt; オブジェクトを初期化します。これはFirefoxによってのみ実装され、そこでもサポートされなくなりました。代わりに、&lt;a href=&quot;keyboardevent/keyboardevent&quot;&gt; &lt;code&gt;KeyboardEvent()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="26c4db6f5861ca66a43d4d8492ae9dcaee84972c" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;ProgressEvent&lt;/code&gt; created using the deprecated &lt;a href=&quot;document/createevent&quot;&gt;&lt;code&gt;Document.createEvent(&quot;ProgressEvent&quot;)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">非推奨の&lt;a href=&quot;document/createevent&quot;&gt; &lt;code&gt;Document.createEvent(&quot;ProgressEvent&quot;)&lt;/code&gt; &lt;/a&gt;メソッドを使用して作成された &lt;code&gt;ProgressEvent&lt;/code&gt; を初期化します。</target>
        </trans-unit>
        <trans-unit id="74e7c3f59972e88347dd0157c94890b0aaee4bae" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;TransitionEvent&lt;/code&gt; created using the deprecated &lt;a href=&quot;document/createevent&quot;&gt;&lt;code&gt;Document.createEvent(&quot;TransitionEvent&quot;)&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">非推奨の&lt;a href=&quot;document/createevent&quot;&gt; &lt;code&gt;Document.createEvent(&quot;TransitionEvent&quot;)&lt;/code&gt; &lt;/a&gt;メソッドを使用して作成された &lt;code&gt;TransitionEvent&lt;/code&gt; を初期化します。</target>
        </trans-unit>
        <trans-unit id="b9636f89accefad2958ace45cedc9145593a860d" translate="yes" xml:space="preserve">
          <source>Initializes a &lt;code&gt;UIEvent&lt;/code&gt; object. If the event has already being dispatched, this method does nothing.</source>
          <target state="translated">&lt;code&gt;UIEvent&lt;/code&gt; オブジェクトを初期化します。イベントがすでに送出されている場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="d7faf8950ff40b7f1d5367cdb4b3f759a853c2b0" translate="yes" xml:space="preserve">
          <source>Initializes a message event. &lt;strong&gt;Do not use this anymore&lt;/strong&gt; &amp;mdash; &lt;strong&gt;use the &lt;a href=&quot;messageevent/messageevent&quot;&gt;&lt;code&gt;MessageEvent()&lt;/code&gt;&lt;/a&gt; constructor instead.&lt;/strong&gt;</source>
          <target state="translated">メッセージイベントを初期化します。&lt;strong&gt;もうこれは使用しないでください&lt;/strong&gt; - &lt;strong&gt;使用&lt;a href=&quot;messageevent/messageevent&quot;&gt; &lt;code&gt;MessageEvent()&lt;/code&gt; &lt;/a&gt;の代わりにコンストラクタを。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="cc72a97513e03452903940f5a3175e175471678d" translate="yes" xml:space="preserve">
          <source>Initializes a request. This method is to be used from JavaScript code; to initialize a request from native code, use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXMLHttpRequest#openRequest()&quot;&gt;&lt;code&gt;openRequest()&lt;/code&gt;&lt;/a&gt; instead.</source>
          <target state="translated">リクエストを初期化します。このメソッドはJavaScriptコードから使用されます。ネイティブコードからのリクエストを初期化するには、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXMLHttpRequest#openRequest()&quot;&gt; &lt;code&gt;openRequest()&lt;/code&gt; を&lt;/a&gt;使用します。</target>
        </trans-unit>
        <trans-unit id="f8f1d8f720489f222bea703914d6dde97722af0a" translate="yes" xml:space="preserve">
          <source>Initializes a request. This method is to be used from native code; to initialize a request from JavaScript code, use &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXMLHttpRequest#open()&quot;&gt;&lt;code&gt;open()&lt;/code&gt;&lt;/a&gt; instead. See the documentation for &lt;code&gt;open()&lt;/code&gt;.</source>
          <target state="translated">リクエストを初期化します。このメソッドはネイティブコードから使用されます。JavaScriptコードからのリクエストを初期化するには、代わりに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XPCOM/Reference/Interface/nsIXMLHttpRequest#open()&quot;&gt; &lt;code&gt;open()&lt;/code&gt; を&lt;/a&gt;使用します。 &lt;code&gt;open()&lt;/code&gt; のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="4acd7bc886002218be09386ceda041709a986e82" translate="yes" xml:space="preserve">
          <source>Initializes and creates the buffer object's data store.</source>
          <target state="translated">バッファオブジェクトのデータストアを初期化し、作成します。</target>
        </trans-unit>
        <trans-unit id="662441d69fafea09e1cbd1dcab8079ebbb3b52b6" translate="yes" xml:space="preserve">
          <source>Initializes the attributes of a &lt;code&gt;CompositionEvent&lt;/code&gt; object.</source>
          <target state="translated">&lt;code&gt;CompositionEvent&lt;/code&gt; オブジェクトの属性を初期化します。</target>
        </trans-unit>
        <trans-unit id="9b30e6ba4d6da9f93a54a79fa3a16b11835d28b7" translate="yes" xml:space="preserve">
          <source>Initializes the event in a manner analogous to the similarly-named method in the DOM Events interfaces.</source>
          <target state="translated">DOM Events インターフェースの同様の名前のメソッドに似た方法でイベントを初期化します。</target>
        </trans-unit>
        <trans-unit id="7cae6813da6309eb2702605c41e8ccd6dc0e0aa7" translate="yes" xml:space="preserve">
          <source>Initializes the object for use from C++ code.</source>
          <target state="translated">C++コードから使用するためのオブジェクトを初期化します。</target>
        </trans-unit>
        <trans-unit id="1fea38e764b61808f3dc21af351183323340a29a" translate="yes" xml:space="preserve">
          <source>Initializes the value of a &lt;code&gt;CloseEvent&lt;/code&gt; created. If the event has already being dispatched, this method does nothing. Do not use this method anymore, use the &lt;a href=&quot;closeevent/closeevent&quot;&gt;&lt;code&gt;CloseEvent()&lt;/code&gt;&lt;/a&gt; constructor instead.</source>
          <target state="translated">作成された &lt;code&gt;CloseEvent&lt;/code&gt; の値を初期化します。イベントがすでに送出されている場合、このメソッドは何もしません。このメソッドは使用せず、代わりに&lt;a href=&quot;closeevent/closeevent&quot;&gt; &lt;code&gt;CloseEvent()&lt;/code&gt; &lt;/a&gt;コンストラクタを使用してください。</target>
        </trans-unit>
        <trans-unit id="99afa371f39ad6cb5ad2b7c5dd4889017665940a" translate="yes" xml:space="preserve">
          <source>Initializes the value of a &lt;code&gt;MouseEvent&lt;/code&gt; created. If the event has already being dispatched, this method does nothing.</source>
          <target state="translated">作成された &lt;code&gt;MouseEvent&lt;/code&gt; の値を初期化します。イベントがすでに送出されている場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="2a3e4c3cf54f38745050cedd7f18833099798cfb" translate="yes" xml:space="preserve">
          <source>Initializes the value of an Event created. If the event has already being dispatched, this method does nothing.</source>
          <target state="translated">作成されたイベントの値を初期化します。イベントが既にディスパッチされている場合、このメソッドは何もしません。</target>
        </trans-unit>
        <trans-unit id="573b5b6de349656f4fef286e1811251aef4d4b1c" translate="yes" xml:space="preserve">
          <source>Initializing ImageData with an array</source>
          <target state="translated">配列でImageDataを初期化する</target>
        </trans-unit>
        <trans-unit id="c5d87bc69ebaed7dbd4d56b900875e09f3daf25d" translate="yes" xml:space="preserve">
          <source>Initializing the chroma-key player</source>
          <target state="translated">クロマキープレイヤーの初期化</target>
        </trans-unit>
        <trans-unit id="697cac7fff1bf187eb6c1c4b427beda45b688da2" translate="yes" xml:space="preserve">
          <source>Initializing the program is handled through a &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; event handler called &lt;code&gt;startup()&lt;/code&gt;:</source>
          <target state="translated">プログラムの初期化は、 &lt;code&gt;startup()&lt;/code&gt; という &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/load&quot;&gt;load&lt;/a&gt;&lt;/code&gt; イベントハンドラーを介して処理されます。</target>
        </trans-unit>
        <trans-unit id="c30c64e10224eb904a609cdf362200a3d555c5e0" translate="yes" xml:space="preserve">
          <source>Initializing the shaders</source>
          <target state="translated">シェーダーの初期化</target>
        </trans-unit>
        <trans-unit id="b892e8007c1dc132c62aa70ab89ebceb38052cbf" translate="yes" xml:space="preserve">
          <source>Initially, the element is in default mode, and so the contents of the element represent both the value of the element and its default value.</source>
          <target state="translated">初期状態では、要素はデフォルトモードになっているので、要素の内容は要素の値とデフォルト値の両方を表しています。</target>
        </trans-unit>
        <trans-unit id="b670fa7dcdf1eee0fdb8b5eb0f0bfb32e790e4f8" translate="yes" xml:space="preserve">
          <source>Initially, this method was returning a &lt;code&gt;NodeList&lt;/code&gt;; it was then changed to reflect the spec change.</source>
          <target state="translated">最初、このメソッドは &lt;code&gt;NodeList&lt;/code&gt; を返していました。その後、仕様の変更を反映するように変更されました。</target>
        </trans-unit>
        <trans-unit id="6dd656a78dd481247e783b5be565d858b1dc3d8f" translate="yes" xml:space="preserve">
          <source>Initiates or reconnects to a presentation made by a controlling browsing context.</source>
          <target state="translated">制御しているブラウジング コンテキストによって作成されたプレゼンテーションを開始または再接続します。</target>
        </trans-unit>
        <trans-unit id="59c19052a8f26aaaebf861bf35063562486d35aa" translate="yes" xml:space="preserve">
          <source>Inject the content into the body of a &lt;a href=&quot;../documentfragment&quot;&gt;document fragment&lt;/a&gt; via &lt;code&gt;fragment.body.innerHTML&lt;/code&gt; and traverse the DOM of the fragment.</source>
          <target state="translated">&lt;a href=&quot;../documentfragment&quot;&gt;fragment.body.innerHTML&lt;/a&gt;を介してコンテンツをドキュメントフラグメントの本文に挿入し、 &lt;code&gt;fragment.body.innerHTML&lt;/code&gt; のDOMをトラバースします。</target>
        </trans-unit>
        <trans-unit id="98e31f31621b2b2c96108c691b61747cdf07b860" translate="yes" xml:space="preserve">
          <source>Inner structure of a WebVTT file</source>
          <target state="translated">WebVTTファイルの内部構造</target>
        </trans-unit>
        <trans-unit id="b568d47f2e244743b1fd7472db836ef9769c21f8" translate="yes" xml:space="preserve">
          <source>Input</source>
          <target state="translated">Input</target>
        </trans-unit>
        <trans-unit id="d9da3dd2d2fbe2bab51f830bc33170422fbdab95" translate="yes" xml:space="preserve">
          <source>Input Events Level 2&lt;br/&gt;&lt;small&gt;The definition of 'InputEvent' in that specification.&lt;/small&gt;</source>
          <target state="translated">入力イベントレベル2 &lt;br/&gt;&lt;small&gt;その仕様における「InputEvent」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="0a4a4993a5df231f30f5a18ac543ebd7ac8b70b8" translate="yes" xml:space="preserve">
          <source>Input Events Level 2&lt;br/&gt;&lt;small&gt;The definition of 'data' in that specification.&lt;/small&gt;</source>
          <target state="translated">入力イベントレベル2 &lt;br/&gt;&lt;small&gt;その仕様における「データ」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="437455a9abade3441d0df35892bd7bc2af4865a1" translate="yes" xml:space="preserve">
          <source>Input Events Level 2&lt;br/&gt;&lt;small&gt;The definition of 'dataTransfer' in that specification.&lt;/small&gt;</source>
          <target state="translated">入力イベントレベル2 &lt;br/&gt;&lt;small&gt;その仕様における「dataTransfer」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="a14c73becb4bf8e4f3fc4cc2032947ca56afc58d" translate="yes" xml:space="preserve">
          <source>Input Events Level 2&lt;br/&gt;&lt;small&gt;The definition of 'getTargetRanges()' in that specification.&lt;/small&gt;</source>
          <target state="translated">入力イベントレベル2 &lt;br/&gt;&lt;small&gt;その仕様における「getTargetRanges（）」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="8cec7374ec334792691792b74c817e86f782261d" translate="yes" xml:space="preserve">
          <source>Input Events Level 2&lt;br/&gt;&lt;small&gt;The definition of 'inputType' in that specification.&lt;/small&gt;</source>
          <target state="translated">入力イベントレベル2 &lt;br/&gt;&lt;small&gt;その仕様での「inputType」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="64d0116d32048d9ab214211ec1523e226958d96f" translate="yes" xml:space="preserve">
          <source>Input Port API</source>
          <target state="translated">入力ポートAPI</target>
        </trans-unit>
        <trans-unit id="b2d980366df121db4b1956c37b9110632881299b" translate="yes" xml:space="preserve">
          <source>Input channels</source>
          <target state="translated">入力チャンネル</target>
        </trans-unit>
        <trans-unit id="95da1bce38f52cee1035ff4f22a6afc78da3e92c" translate="yes" xml:space="preserve">
          <source>Input device capabilities concepts and usage</source>
          <target state="translated">入力デバイスの能力の概念と使い方</target>
        </trans-unit>
        <trans-unit id="b3c4d64d691c433c68f619cc19dac9a8c6c1547d" translate="yes" xml:space="preserve">
          <source>Input devices</source>
          <target state="translated">入力装置</target>
        </trans-unit>
        <trans-unit id="3f37e64e1fb0569e1f9eac1670a8c657e750c404" translate="yes" xml:space="preserve">
          <source>InputDeviceCapabilities</source>
          <target state="translated">InputDeviceCapabilities</target>
        </trans-unit>
        <trans-unit id="d985897548b763bac8d0429f38523fedeeb12231" translate="yes" xml:space="preserve">
          <source>InputDeviceCapabilities API</source>
          <target state="translated">InputDeviceCapabilities API</target>
        </trans-unit>
        <trans-unit id="6ee398ed5d6d97b18e4bf72f5615ec3d1c483f69" translate="yes" xml:space="preserve">
          <source>InputDeviceCapabilities.constructor</source>
          <target state="translated">InputDeviceCapabilities.constructor</target>
        </trans-unit>
        <trans-unit id="8801a8bb7b406d600a25ac86b66a4e1a68673b3d" translate="yes" xml:space="preserve">
          <source>InputDeviceCapabilities.firesTouchEvents</source>
          <target state="translated">InputDeviceCapabilities.firesTouchEvents</target>
        </trans-unit>
        <trans-unit id="e891f6963a79ad31742aa8577785624c73d984cb" translate="yes" xml:space="preserve">
          <source>InputDeviceCapabilities&lt;br/&gt;&lt;small&gt;The definition of 'fireTouchEvents' in that specification.&lt;/small&gt;</source>
          <target state="translated">InputDeviceCapabilities &lt;br/&gt;&lt;small&gt;その仕様における「fireTouchEvents」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="7f2e8ab5f23551daffbc3adc0778e5f4008990ef" translate="yes" xml:space="preserve">
          <source>InputDeviceCapabilities&lt;br/&gt;&lt;small&gt;The definition of 'sourceCapabilities' in that specification.&lt;/small&gt;</source>
          <target state="translated">InputDeviceCapabilities &lt;br/&gt;&lt;small&gt;その仕様での「sourceCapabilities」の定義。&lt;/small&gt;</target>
        </trans-unit>
        <trans-unit id="ec99bd83c71d3d8a08f77e563059a952e996dff6" translate="yes" xml:space="preserve">
          <source>InputEvent</source>
          <target state="translated">InputEvent</target>
        </trans-unit>
        <trans-unit id="db405689c885ffc9cc491389bcf8d84e692afd89" translate="yes" xml:space="preserve">
          <source>InputEvent.constructor</source>
          <target state="translated">InputEvent.constructor</target>
        </trans-unit>
        <trans-unit id="d15e51806926190c3df82872202c0f939c48fad8" translate="yes" xml:space="preserve">
          <source>InputEvent.data</source>
          <target state="translated">InputEvent.data</target>
        </trans-unit>
        <trans-unit id="48cbcf65de3e4c182e3fca4276375a3269f458b6" translate="yes" xml:space="preserve">
          <source>InputEvent.dataTransfer</source>
          <target state="translated">InputEvent.dataTransfer</target>
        </trans-unit>
        <trans-unit id="d6a6b797bed1c610ef20390f06850b601524b857" translate="yes" xml:space="preserve">
          <source>InputEvent.getTargetRanges</source>
          <target state="translated">InputEvent.getTargetRanges</target>
        </trans-unit>
        <trans-unit id="82ebd5a248dd7f3fe04ab6f879b2dfdcd0f9ef70" translate="yes" xml:space="preserve">
          <source>InputEvent.inputType</source>
          <target state="translated">InputEvent.inputType</target>
        </trans-unit>
        <trans-unit id="d07007435ff1dacf72421bb3156159bbb6e415d8" translate="yes" xml:space="preserve">
          <source>InputEvent.isComposing</source>
          <target state="translated">InputEvent.isComposing</target>
        </trans-unit>
        <trans-unit id="434b0f50e01b1e9b69ea2e02d51cd44a3d4a98bb" translate="yes" xml:space="preserve">
          <source>InputStream</source>
          <target state="translated">InputStream</target>
        </trans-unit>
        <trans-unit id="1965ac7f3c5c7f389e62a29e10303ce93360fd9f" translate="yes" xml:space="preserve">
          <source>Insert HTML tags example</source>
          <target state="translated">HTMLタグの挿入例</target>
        </trans-unit>
        <trans-unit id="ae922ecf5095e3e2fe8c510278b6030c90ed9264" translate="yes" xml:space="preserve">
          <source>Insert a &lt;a href=&quot;node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; at the start of a &lt;code&gt;Range&lt;/code&gt;.</source>
          <target state="translated">&lt;code&gt;Range&lt;/code&gt; の先頭に&lt;a href=&quot;node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;を挿入します。</target>
        </trans-unit>
        <trans-unit id="83d717b5377b7eec0113939e7508465cd29001e1" translate="yes" xml:space="preserve">
          <source>Insert an element before the first child element, using the &lt;a href=&quot;firstchild&quot;&gt;firstChild&lt;/a&gt; property.</source>
          <target state="translated">&lt;a href=&quot;firstchild&quot;&gt;firstChild&lt;/a&gt;プロパティを使用して、最初の子要素の前に要素を挿入します。</target>
        </trans-unit>
        <trans-unit id="21ab3203efcbe8c3ecf469b814689e10adcaf751" translate="yes" xml:space="preserve">
          <source>Insert some HTML tags or &lt;em&gt;smiles&lt;/em&gt; or any custom text in a textarea.</source>
          <target state="translated">textareaにHTMLタグ、&lt;em&gt;笑顔、&lt;/em&gt;またはカスタムテキストを挿入します。</target>
        </trans-unit>
        <trans-unit id="994f2ea1394789d1f139c8de08078c350364e57f" translate="yes" xml:space="preserve">
          <source>Inserting Elements with appendChild(..)</source>
          <target state="translated">appendChild(...)による要素の挿入</target>
        </trans-unit>
        <trans-unit id="72c5d3255605eb901fa336f1912cde4b54d0033c" translate="yes" xml:space="preserve">
          <source>Inserting an element</source>
          <target state="translated">要素の挿入</target>
        </trans-unit>
        <trans-unit id="0652d25bcd4cdec684cce236de4c9dacf309fd35" translate="yes" xml:space="preserve">
          <source>Inserting an element and text</source>
          <target state="translated">要素とテキストの挿入</target>
        </trans-unit>
        <trans-unit id="e12f5e0042cd2f9fa12df63031d30e4caa49b8fe" translate="yes" xml:space="preserve">
          <source>Inserting nodes into a DOM based on XML</source>
          <target state="translated">XML に基づいて DOM にノードを挿入する</target>
        </trans-unit>
        <trans-unit id="0a38d6d632941f0ea8c458a3b8bc942694d75445" translate="yes" xml:space="preserve">
          <source>Inserting text</source>
          <target state="translated">テキストの挿入</target>
        </trans-unit>
        <trans-unit id="6d3f13b9d73e6f7ffe0149524ed91514865833b6" translate="yes" xml:space="preserve">
          <source>Inserting to an Existing Collection</source>
          <target state="translated">既存のコレクションへの挿入</target>
        </trans-unit>
        <trans-unit id="4d0d6ae61fcfcd1ce695d3f562854a697f8bd34e" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr&quot;&gt;&lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;&lt;/a&gt; element at the insertion point, or replaces the selection with it.</source>
          <target state="translated">インサート&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/hr&quot;&gt; &lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt; &lt;/a&gt;挿入ポイントの要素、又はそれとの選択を置き換えます。</target>
        </trans-unit>
        <trans-unit id="d375aa3df90c1211891dd7ca9148d1357e5a7429" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;paragraph&lt;/a&gt; around the selection or the current line. (Internet Explorer inserts a paragraph at the insertion point and deletes the selection.)</source>
          <target state="translated">選択範囲または現在の行の周りに&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/p&quot;&gt;段落を&lt;/a&gt;挿入します。（Internet Explorerは挿入ポイントに段落を挿入し、選択範囲を削除します。）</target>
        </trans-unit>
        <trans-unit id="c401c34a03720ae87319424959251642e43866d2" translate="yes" xml:space="preserve">
          <source>Inserts a &lt;a href=&quot;node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; before the reference node as a child of a specified parent node.</source>
          <target state="translated">指定した親ノードの子として、参照&lt;a href=&quot;node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;前にノードを挿入します。</target>
        </trans-unit>
        <trans-unit id="b32f0cf62f3fe8e784980780da27c28810bad28f" translate="yes" xml:space="preserve">
          <source>Inserts a given element node at a given position relative to the element it is invoked upon.</source>
          <target state="translated">指定された要素ノードを、呼び出された要素に対する指定された位置に挿入します。</target>
        </trans-unit>
        <trans-unit id="9198c76ff394c0e1571f89ea8465da728f4d1789" translate="yes" xml:space="preserve">
          <source>Inserts a given text node at a given position relative to the element it is invoked upon.</source>
          <target state="translated">指定されたテキストノードを、それが呼び出された要素に対する相対的な指定された位置に挿入します。</target>
        </trans-unit>
        <trans-unit id="e16b7a1720921c090ef71907a89d6ebd2154a3ef" translate="yes" xml:space="preserve">
          <source>Inserts a new cell just before the given position in the row. If the given position is not given or is &lt;code&gt;-1&lt;/code&gt;, it appends the cell to the row. If the given position is greater (or equal as it starts at zero) than the amount of cells in the row, or is smaller than &lt;code&gt;-1&lt;/code&gt;, it raises a &lt;a href=&quot;domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;IndexSizeError&lt;/code&gt; value. Returns a reference to a &lt;a href=&quot;htmltablecellelement&quot;&gt;HTMLTableCellElement [en-US]&lt;/a&gt;.</source>
          <target state="translated">行の指定された位置の直前に新しいセルを挿入します。指定された位置が指定されていないか &lt;code&gt;-1&lt;/code&gt; の場合、セルが行に追加されます。指定された位置が行のセルの量よりも大きい（またはゼロから始まる）場合、または &lt;code&gt;-1&lt;/code&gt; より小さい場合は、 &lt;code&gt;IndexSizeError&lt;/code&gt; 値を持つ&lt;a href=&quot;domexception&quot;&gt; &lt;code&gt;DOMException&lt;/code&gt; が発生&lt;/a&gt;します。&lt;a href=&quot;htmltablecellelement&quot;&gt;HTMLTableCellElement [en-US]&lt;/a&gt;への参照を返します。</target>
        </trans-unit>
        <trans-unit id="18c42eae009d646ef6832ce53a717794ef241fde" translate="yes" xml:space="preserve">
          <source>Inserts a new item at the end of the list. If &lt;code&gt;newItem&lt;/code&gt; is already in a list, it is removed from its previous list before it is inserted into this list. The inserted item is the item itself and not a copy.</source>
          <target state="translated">リストの最後に新しいアイテムを挿入します。場合 &lt;code&gt;newItem&lt;/code&gt; がリストに既にあるそれはこのリストの中に挿入される前に、それは、その前のリストから削除されます。挿入されたアイテムはアイテムそのものであり、コピーではありません。</target>
        </trans-unit>
        <trans-unit id="0551168480c2030ca5cd18674f1d710020d09a7d" translate="yes" xml:space="preserve">
          <source>Inserts a new item into the list at the specified position. The first item is number 0. If &lt;code&gt;newItem&lt;/code&gt; is already in a list, it is removed from its previous list before it is inserted into this list. The inserted item is the item itself and not a copy. If the item is already in this list, note that the index of the item to insert before is before the removal of the item. If the &lt;code&gt;index&lt;/code&gt; is equal to 0, then the new item is inserted at the front of the list. If the index is greater than or equal to &lt;code&gt;numberOfItems&lt;/code&gt;, then the new item is appended to the end of the list.</source>
          <target state="translated">リストの指定された位置に新しいアイテムを挿入します。最初のアイテムは番号0です &lt;code&gt;newItem&lt;/code&gt; が既にリストにある場合、このリストに挿入される前に、前のリストから削除されます。挿入されたアイテムはアイテムそのものであり、コピーではありません。アイテムが既にこのリストにある場合は、前に挿入するアイテムのインデックスがアイテムの削除前であることに注意してください。場合 &lt;code&gt;index&lt;/code&gt; 0に等しく、新しい項目がリストの先頭に挿入されます。インデックスが &lt;code&gt;numberOfItems&lt;/code&gt; 以上の場合、新しいアイテムはリストの最後に追加されます。</target>
        </trans-unit>
        <trans-unit id="369c39b0458869aaf69518b3a1bc61eb2a25a309" translate="yes" xml:space="preserve">
          <source>Inserts a new keyframe rule into the current CSSKeyframesRule. The parameter is a &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; containing a keyframe in the same format as an entry of a &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt;&lt;code&gt;@keyframes&lt;/code&gt;&lt;/a&gt; at-rule. If it contains more than one keyframe rule, a &lt;a href=&quot;domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with a &lt;code&gt;SYNTAX_ERR&lt;/code&gt; is thrown.</source>
          <target state="translated">現在のCSSKeyframesRuleに新しいキーフレームルールを挿入します。パラメータは&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/@keyframes&quot;&gt; &lt;code&gt;@keyframes&lt;/code&gt; &lt;/a&gt; at-ruleのエントリと同じ形式のキーフレームを含む&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;です。複数のキーフレームルールが含まれている場合、 &lt;code&gt;SYNTAX_ERR&lt;/code&gt; を持つ&lt;a href=&quot;domexception&quot;&gt; &lt;code&gt;DOMException&lt;/code&gt; &lt;/a&gt;がスローされます。</target>
        </trans-unit>
        <trans-unit id="d84958f861217deb4b18189950e9034063e4b115" translate="yes" xml:space="preserve">
          <source>Inserts a new row just before the given position in the section. If the given position is not given or is &lt;code&gt;-1&lt;/code&gt;, it appends the row to the end of section. If the given position is greater (or equal as it starts at zero) than the amount of rows in the section, or is smaller than &lt;code&gt;-1&lt;/code&gt;, it raises a &lt;a href=&quot;domexception&quot;&gt;&lt;code&gt;DOMException&lt;/code&gt;&lt;/a&gt; with the &lt;code&gt;IndexSizeError&lt;/code&gt; value.</source>
          <target state="translated">セクション内の指定された位置の直前に新しい行を挿入します。指定された位置が指定されていないか &lt;code&gt;-1&lt;/code&gt; の場合、行はセクションの最後に追加されます。指定された位置がセクションの行数よりも大きい（またはゼロから始まる）場合、または &lt;code&gt;-1&lt;/code&gt; より小さい場合は、 &lt;code&gt;IndexSizeError&lt;/code&gt; 値を持つ&lt;a href=&quot;domexception&quot;&gt; &lt;code&gt;DOMException&lt;/code&gt; が発生&lt;/a&gt;します。</target>
        </trans-unit>
        <trans-unit id="d14fe1d3a033b778600fe743acddbdb35bc53f11" translate="yes" xml:space="preserve">
          <source>Inserts a new rule at the specified position in the style sheet, given the textual representation of the rule.</source>
          <target state="translated">ルールのテキスト表現を指定して、スタイルシートの指定した位置に新しいルールを挿入します。</target>
        </trans-unit>
        <trans-unit id="ff86515e72a20292677bcf708c9044255a02f2f5" translate="yes" xml:space="preserve">
          <source>Inserts a new style rule into the current style sheet.</source>
          <target state="translated">現在のスタイルシートに新しいスタイルルールを挿入します。</target>
        </trans-unit>
        <trans-unit id="7af864a925b9475a7f37efadcbfc3afebc06fb41" translate="yes" xml:space="preserve">
          <source>Inserts a set of &lt;a href=&quot;node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; objects or &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects after the last child of the &lt;code&gt;ParentNode&lt;/code&gt;. &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects are inserted as equivalent &lt;a href=&quot;text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">&lt;code&gt;ParentNode&lt;/code&gt; の最後の子の後に&lt;a href=&quot;node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;オブジェクトまたは&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトのセットを挿入します。&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトは同等の&lt;a href=&quot;text&quot;&gt; &lt;code&gt;Text&lt;/code&gt; &lt;/a&gt;ノードとして挿入されます。</target>
        </trans-unit>
        <trans-unit id="ad2b812dd4a0b3289d236fb0c28314cdbc30e68d" translate="yes" xml:space="preserve">
          <source>Inserts a set of &lt;a href=&quot;node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; objects or &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects before the first child of the &lt;code&gt;ParentNode&lt;/code&gt;. &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects are inserted as equivalent &lt;a href=&quot;text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">&lt;code&gt;ParentNode&lt;/code&gt; の最初の子の前に一連の&lt;a href=&quot;node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;オブジェクトまたは&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトを挿入します。&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトは同等の&lt;a href=&quot;text&quot;&gt; &lt;code&gt;Text&lt;/code&gt; &lt;/a&gt;ノードとして挿入されます。</target>
        </trans-unit>
        <trans-unit id="de6cbf3211322474fdd816ebff27c4249e7adc30" translate="yes" xml:space="preserve">
          <source>Inserts a set of &lt;a href=&quot;node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects in the children list of this &lt;code&gt;ChildNode&lt;/code&gt;'s parent, just after this &lt;code&gt;ChildNode&lt;/code&gt;. &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects are inserted as equivalent &lt;a href=&quot;text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">この &lt;code&gt;ChildNode&lt;/code&gt; の直後に、この &lt;code&gt;ChildNode&lt;/code&gt; の親の子リストに&lt;a href=&quot;node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;オブジェクトまたは&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトのセットを挿入します。&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトは同等の&lt;a href=&quot;text&quot;&gt; &lt;code&gt;Text&lt;/code&gt; &lt;/a&gt;ノードとして挿入されます。</target>
        </trans-unit>
        <trans-unit id="594b3f4e14345ff52decd720033fb77c43bddd51" translate="yes" xml:space="preserve">
          <source>Inserts a set of &lt;a href=&quot;node&quot;&gt;&lt;code&gt;Node&lt;/code&gt;&lt;/a&gt; or &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects in the children list of this &lt;code&gt;ChildNode&lt;/code&gt;'s parent, just before this &lt;code&gt;ChildNode&lt;/code&gt;. &lt;a href=&quot;domstring&quot;&gt;&lt;code&gt;DOMString&lt;/code&gt;&lt;/a&gt; objects are inserted as equivalent &lt;a href=&quot;text&quot;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt; nodes.</source>
          <target state="translated">インサートのセット&lt;a href=&quot;node&quot;&gt; &lt;code&gt;Node&lt;/code&gt; &lt;/a&gt;または&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;この子リスト内のオブジェクトを &lt;code&gt;ChildNode&lt;/code&gt; ちょうどこの前に、の親 &lt;code&gt;ChildNode&lt;/code&gt; 。&lt;a href=&quot;domstring&quot;&gt; &lt;code&gt;DOMString&lt;/code&gt; &lt;/a&gt;オブジェクトは同等の&lt;a href=&quot;text&quot;&gt; &lt;code&gt;Text&lt;/code&gt; &lt;/a&gt;ノードとして挿入されます。</target>
        </trans-unit>
        <trans-unit id="d16851c6926d05979e9da774b4492f88c23b9de3" translate="yes" xml:space="preserve">
          <source>Inserts an HTML string at the insertion point (deletes selection). Requires a valid HTML string as a value argument. (Not supported by Internet Explorer.)</source>
          <target state="translated">HTML文字列を挿入箇所に挿入します(選択範囲を削除します)。値の引数に有効な HTML 文字列が必要です。(Internet Explorerではサポートされていません)。</target>
        </trans-unit>
        <trans-unit id="2734ffd87350ff1d4336985aea37b4a052b6c023" translate="yes" xml:space="preserve">
          <source>Inserts an image at the insertion point (deletes selection). Requires a URL string for the image's &lt;code&gt;src&lt;/code&gt; as a value argument. The requirements for this string are the same as &lt;code&gt;createLink&lt;/code&gt;.</source>
          <target state="translated">挿入ポイントに画像を挿入します（選択を削除します）。値の引数として画像の &lt;code&gt;src&lt;/code&gt; の URL文字列が必要です。この文字列の要件は &lt;code&gt;createLink&lt;/code&gt; と同じです。</target>
        </trans-unit>
        <trans-unit id="38efcf96ae2a45c10979bf8c1b8b42feb2f89769" translate="yes" xml:space="preserve">
          <source>Inserts the given plain text at the insertion point (deletes selection).</source>
          <target state="translated">与えられたプレーンテキストを挿入点に挿入します (選択範囲を削除します)。</target>
        </trans-unit>
        <trans-unit id="5031da81798bc50c2dc9cb234cb9c2f39822f01c" translate="yes" xml:space="preserve">
          <source>Inserts the specified video effect into the media pipeline.</source>
          <target state="translated">指定されたビデオエフェクトをメディアパイプラインに挿入します。</target>
        </trans-unit>
        <trans-unit id="a5400ca437b7ea06a46e3c149d5a4ad34005be5e" translate="yes" xml:space="preserve">
          <source>Inside &lt;code&gt;waitUntil()&lt;/code&gt; we use the &lt;a href=&quot;../cachestorage/open&quot;&gt;&lt;code&gt;caches.open()&lt;/code&gt;&lt;/a&gt; method to create a new cache called &lt;code&gt;v1&lt;/code&gt;, which will be version 1 of our site resources cache. This returns a promise for a created cache; once resolved, we then call a function that calls &lt;code&gt;addAll()&lt;/code&gt; on the created cache, which for its parameter takes an array of origin-relative URLs to all the resources you want to cache.</source>
          <target state="translated">&lt;code&gt;waitUntil()&lt;/code&gt; の内部では、&lt;a href=&quot;../cachestorage/open&quot;&gt; &lt;code&gt;caches.open()&lt;/code&gt; &lt;/a&gt;メソッドを使用して、サイトリソースキャッシュのバージョン1となる &lt;code&gt;v1&lt;/code&gt; という新しいキャッシュを作成します。これは、作成されたキャッシュのpromiseを返します。解決したら、作成したキャッシュで &lt;code&gt;addAll()&lt;/code&gt; を呼び出す関数を呼び出します。この関数は、パラメーターとして、キャッシュするすべてのリソースへの起点相対URLの配列を取ります。</target>
        </trans-unit>
        <trans-unit id="ca031060ac3d32f4982b877e58e26db111f79013" translate="yes" xml:space="preserve">
          <source>Inside each ad, for demonstration purposes, we draw the current value of its &lt;code&gt;totalViewTime&lt;/code&gt;, converted into minutes and seconds. This is handled by passing the ad's element into the &lt;code&gt;drawAdTimer()&lt;/code&gt; function:</source>
          <target state="translated">各広告内では、デモンストレーションの目的で、分と秒に変換された &lt;code&gt;totalViewTime&lt;/code&gt; の現在の値を描画します。これは、広告の要素を &lt;code&gt;drawAdTimer()&lt;/code&gt; 関数に渡すことで処理されます。</target>
        </trans-unit>
        <trans-unit id="04c112b37be107bb5972963b46f67c326b629a27" translate="yes" xml:space="preserve">
          <source>Inside our &lt;code&gt;if() { ... }&lt;/code&gt; block, we run the &lt;a href=&quot;../navigator/getvrdisplays&quot;&gt;&lt;code&gt;Navigator.getVRDisplays()&lt;/code&gt;&lt;/a&gt; function. This returns a promise, which is fulfilled with an array containing all the VR display devices connected to the computer. If none are connected, the array will be empty.</source>
          <target state="translated">私たちの内部で &lt;code&gt;if() { ... }&lt;/code&gt; ブロック、我々は実行&lt;a href=&quot;../navigator/getvrdisplays&quot;&gt; &lt;code&gt;Navigator.getVRDisplays()&lt;/code&gt; &lt;/a&gt;関数を。これはpromiseを返します。promiseは、コンピューターに接続されているすべてのVRディスプレイデバイスを含む配列で満たされます。接続されていない場合、配列は空になります。</target>
        </trans-unit>
        <trans-unit id="3e1b0ccb3a85ffc80137a0b7686c08e182631d5d" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;&amp;lt;custom-square&amp;gt;&lt;/code&gt; element's class definition we include some life cycle callbacks that make a call to an external function, &lt;code&gt;updateStyle()&lt;/code&gt;, which actually applies the size and color to the element. You'll see that we are passing it &lt;code&gt;this&lt;/code&gt; (the custom element itself) as a parameter.</source>
          <target state="translated">内部 &lt;code&gt;&amp;lt;custom-square&amp;gt;&lt;/code&gt; 要素のクラス定義我々は、外部関数の呼び出しを行い、いくつかのライフ・サイクル・コールバック、含ま &lt;code&gt;updateStyle()&lt;/code&gt; 実際の要素にサイズと色を適用し、。 &lt;code&gt;this&lt;/code&gt; （パラメーター自体）をパラメーターとして渡していることがわかります。</target>
        </trans-unit>
        <trans-unit id="1546e0ffda0dddfade36a903f9a6b7fd69e43648" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;drawVRScene()&lt;/code&gt; function, you'll find this bit of code:</source>
          <target state="translated">&lt;code&gt;drawVRScene()&lt;/code&gt; 関数内には、次のコードが含まれています。</target>
        </trans-unit>
        <trans-unit id="61d24c97484d712bff9735e4c9280ceaa1436730" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;inputForm.onsubmit&lt;/code&gt; handler, we stop the form submitting with &lt;a href=&quot;../event/preventdefault&quot;&gt;preventDefault()&lt;/a&gt;, create a new &lt;a href=&quot;../speechsynthesisutterance&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt;&lt;/a&gt; instance containing the text from the text &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt;, set the utterance's voice to the voice selected in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element, and start the utterance speaking via the &lt;a href=&quot;../speechsynthesis/speak&quot;&gt;&lt;code&gt;SpeechSynthesis.speak()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;inputForm.onsubmit&lt;/code&gt; ハンドラー内で、フォームの送信を&lt;a href=&quot;../event/preventdefault&quot;&gt;preventDefault（）&lt;/a&gt;で停止し、テキストを含む新しい&lt;a href=&quot;../speechsynthesisutterance&quot;&gt; &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; &lt;/a&gt;インスタンスをテキスト&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;/a&gt;から作成し、発声の音声を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt; &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; &lt;/a&gt;要素で選択した音声に設定して、&lt;a href=&quot;../speechsynthesis/speak&quot;&gt; &lt;code&gt;SpeechSynthesis.speak()&lt;/code&gt; &lt;/a&gt;メソッドによる発話。</target>
        </trans-unit>
        <trans-unit id="8a9527350bb6153413577f95b1696c63969b3fc3" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;inputForm.onsubmit&lt;/code&gt; handler, we stop the form submitting with &lt;a href=&quot;event/preventdefault&quot;&gt;preventDefault()&lt;/a&gt;, create a new &lt;a href=&quot;speechsynthesisutterance&quot;&gt;&lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt;&lt;/a&gt; instance containing the text from the text &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt;, set the utterance's voice to the voice selected in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element, and start the utterance speaking via the &lt;a href=&quot;speechsynthesis/speak&quot;&gt;&lt;code&gt;SpeechSynthesis.speak()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;inputForm.onsubmit&lt;/code&gt; ハンドラー内で、フォームの送信を&lt;a href=&quot;event/preventdefault&quot;&gt;preventDefault（）&lt;/a&gt;で停止し、テキストを含む新しい&lt;a href=&quot;speechsynthesisutterance&quot;&gt; &lt;code&gt;SpeechSynthesisUtterance&lt;/code&gt; &lt;/a&gt;インスタンスをテキスト&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;/a&gt;から作成し、発声の音声を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt; &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; &lt;/a&gt;要素で選択した音声に設定して、&lt;a href=&quot;speechsynthesis/speak&quot;&gt; &lt;code&gt;SpeechSynthesis.speak()&lt;/code&gt; &lt;/a&gt;メソッドによる発話。</target>
        </trans-unit>
        <trans-unit id="1dc1cec2069ec0bc76d28172357e7319e953ccff" translate="yes" xml:space="preserve">
          <source>Inside the &lt;code&gt;inputForm.onsubmit&lt;/code&gt; handler, we stop the form submitting with &lt;a href=&quot;event/preventdefault&quot;&gt;preventDefault()&lt;/a&gt;, use the &lt;a href=&quot;speechsynthesisutterance/speechsynthesisutterance&quot;&gt;&lt;code&gt;constructor&lt;/code&gt;&lt;/a&gt; to create a new utterance instance containing the text from the text &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/a&gt;, set the utterance's &lt;a href=&quot;speechsynthesisutterance/voice&quot;&gt;&lt;code&gt;voice&lt;/code&gt;&lt;/a&gt; to the voice selected in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;&lt;/a&gt; element, and start the utterance speaking via the &lt;a href=&quot;speechsynthesis/speak&quot;&gt;&lt;code&gt;SpeechSynthesis.speak()&lt;/code&gt;&lt;/a&gt; method.</source>
          <target state="translated">&lt;code&gt;inputForm.onsubmit&lt;/code&gt; ハンドラー内で、フォームの送信を&lt;a href=&quot;event/preventdefault&quot;&gt;preventDefault（）&lt;/a&gt;で停止し、&lt;a href=&quot;speechsynthesisutterance/speechsynthesisutterance&quot;&gt; &lt;code&gt;constructor&lt;/code&gt; &lt;/a&gt;を使用して、テキスト&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input&quot;&gt; &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; &lt;/a&gt;からのテキストを含む新しい発話インスタンスを作成し、発話の&lt;a href=&quot;speechsynthesisutterance/voice&quot;&gt; &lt;code&gt;voice&lt;/code&gt; &lt;/a&gt;を&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select&quot;&gt; &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; &lt;/a&gt;要素で選択した音声に設定します、&lt;a href=&quot;speechsynthesis/speak&quot;&gt; &lt;code&gt;SpeechSynthesis.speak()&lt;/code&gt; &lt;/a&gt;メソッドを使用して発話を開始します。</target>
        </trans-unit>
        <trans-unit id="3a90d492da1d8e3c5c1d52e4dc717d5d29a4b2f4" translate="yes" xml:space="preserve">
          <source>Inside the Party Bus: Building a Web App with Multiple Live Video Streams + Interactive Graphics</source>
          <target state="translated">パーティーバスの中で:複数のライブビデオストリーム+インタラクティブグラフィックスを使ったWebアプリの構築</target>
        </trans-unit>
        <trans-unit id="79e8023a8c1a5f58d27c2b9ce8b7711e24f4836d" translate="yes" xml:space="preserve">
          <source>Inside the context, create sources &amp;mdash; such as &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt;, oscillator, or stream.</source>
          <target state="translated">コンテキスト内で、&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/audio&quot;&gt; &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; &lt;/a&gt;、オシレーター、ストリームなどのソースを作成します。</target>
        </trans-unit>
        <trans-unit id="60a727ae8299354e94b0a6b4ac1738c5351ea2f2" translate="yes" xml:space="preserve">
          <source>Inside the context, create sources &amp;mdash; such as &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;, oscillator, stream</source>
          <target state="translated">コンテキスト内で、 &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; 、オシレーター、ストリームなどのソースを作成します</target>
        </trans-unit>
        <trans-unit id="14163be7049f8f1fe99917c7452746adbb8f5ddf" translate="yes" xml:space="preserve">
          <source>Inside the event handler function you can include code to upgrade the database structure, as shown in the example below.</source>
          <target state="translated">イベントハンドラ関数の内部には、以下の例のようにデータベース構造をアップグレードするコードを含めることができます。</target>
        </trans-unit>
        <trans-unit id="8e746ae8ae6de16f0bd864a1387244108a586ac5" translate="yes" xml:space="preserve">
          <source>Inside the promise &lt;code&gt;then()&lt;/code&gt; block, we check whether the array length is more than 0; if so, we set the value of our &lt;code&gt;vrDisplay&lt;/code&gt; variable to the 0 index item inside the array. &lt;code&gt;vrDisplay&lt;/code&gt; now contains a &lt;a href=&quot;../vrdisplay&quot;&gt;&lt;code&gt;VRDisplay&lt;/code&gt;&lt;/a&gt; object representing our connected display!</source>
          <target state="translated">promise &lt;code&gt;then()&lt;/code&gt; ブロック内で、配列の長さが0より大きいかどうかを確認します。もしそうなら、 &lt;code&gt;vrDisplay&lt;/code&gt; 変数の値を配列内の0インデックス項目に設定します。 &lt;code&gt;vrDisplay&lt;/code&gt; には、接続されたディスプレイを表す&lt;a href=&quot;../vrdisplay&quot;&gt; &lt;code&gt;VRDisplay&lt;/code&gt; &lt;/a&gt;オブジェクトが含まれています。</target>
        </trans-unit>
        <trans-unit id="26c461de447110f1457abba012d174dbab22fc6b" translate="yes" xml:space="preserve">
          <source>Inside the rendering loop, you grab the data required to display the current frame (&lt;a href=&quot;../vrdisplay/getframedata&quot;&gt;&lt;code&gt;VRDisplay.getFrameData()&lt;/code&gt;&lt;/a&gt;), draw the displayed scene twice &amp;mdash; once for the view in each eye &amp;mdash; then submit the rendered view to the display to show to the user via (&lt;a href=&quot;../vrdisplay/submitframe&quot;&gt;&lt;code&gt;VRDisplay.submitFrame()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">レンダリングループ内で、現在のフレームを表示するために必要なデータ（&lt;a href=&quot;../vrdisplay/getframedata&quot;&gt; &lt;code&gt;VRDisplay.getFrameData()&lt;/code&gt; &lt;/a&gt;）を取得し、表示されたシーンを2度（それぞれの目のビューに対して1回）描画し、レンダリングされたビューをディスプレイに送信してユーザーに表示します。 （&lt;a href=&quot;../vrdisplay/submitframe&quot;&gt; &lt;code&gt;VRDisplay.submitFrame()&lt;/code&gt; &lt;/a&gt;）経由。</target>
        </trans-unit>
        <trans-unit id="baa217054091fd3c22a64c7040a9c9c31244eca8" translate="yes" xml:space="preserve">
          <source>Inside the rendering loop, you grab the data required to display the current frame (&lt;a href=&quot;vrdisplay/getframedata&quot;&gt;&lt;code&gt;VRDisplay.getFrameData()&lt;/code&gt;&lt;/a&gt;), draw the displayed scene twice &amp;mdash; once for the view in each eye, then submit the rendered view to the display to show to the user (&lt;a href=&quot;vrdisplay/submitframe&quot;&gt;&lt;code&gt;VRDisplay.submitFrame()&lt;/code&gt;&lt;/a&gt;).</source>
          <target state="translated">レンダリングループ内で、現在のフレームを表示するために必要なデータ（&lt;a href=&quot;vrdisplay/getframedata&quot;&gt; &lt;code&gt;VRDisplay.getFrameData()&lt;/code&gt; &lt;/a&gt;）を取得し、表示されたシーンを2度描画します。 （&lt;a href=&quot;vrdisplay/submitframe&quot;&gt; &lt;code&gt;VRDisplay.submitFrame()&lt;/code&gt; &lt;/a&gt;）。</target>
        </trans-unit>
        <trans-unit id="bc9bf201d11fd65f401fdc0af621b6fc48106873" translate="yes" xml:space="preserve">
          <source>Inside the worker we use the &lt;a href=&quot;sharedworkerglobalscope/onconnect&quot;&gt;&lt;code&gt;SharedWorkerGlobalScope.onconnect&lt;/code&gt;&lt;/a&gt; handler to connect to the same port discussed above. The ports associated with that worker are accessible in the &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/connect&quot;&gt;connect&lt;/a&gt;&lt;/code&gt; event's &lt;code&gt;ports&lt;/code&gt; property &amp;mdash; we then use &lt;a href=&quot;messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;&lt;code&gt;start()&lt;/code&gt; method to start the port, and the &lt;code&gt;onmessage&lt;/code&gt; handler to deal with messages sent from the main threads.</source>
          <target state="translated">ワーカー内では、&lt;a href=&quot;sharedworkerglobalscope/onconnect&quot;&gt; &lt;code&gt;SharedWorkerGlobalScope.onconnect&lt;/code&gt; &lt;/a&gt;ハンドラーを使用して、上記と同じポートに接続します。そのワーカーに関連付けられたポートには、 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/connect&quot;&gt;connect&lt;/a&gt;&lt;/code&gt; イベントの &lt;code&gt;ports&lt;/code&gt; プロパティでアクセスできます。次に、&lt;a href=&quot;messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt; &lt;code&gt;start()&lt;/code&gt; メソッドを使用してポートを開始し、 &lt;code&gt;onmessage&lt;/code&gt; ハンドラーを使用してメインスレッドから送信されたメッセージを処理します。</target>
        </trans-unit>
        <trans-unit id="5c2fff1d6a493b498dce4ab64858d000cd8f051f" translate="yes" xml:space="preserve">
          <source>Inspired by the same &lt;code&gt;WebGLRenderingContext&lt;/code&gt; method it returns &lt;code&gt;true&lt;/code&gt; if the Canvas context has been lost, or &lt;code&gt;false&lt;/code&gt; if not.</source>
          <target state="translated">同じ &lt;code&gt;WebGLRenderingContext&lt;/code&gt; メソッドに触発されて、Canvasコンテキストが失われている場合は &lt;code&gt;true&lt;/code&gt; を返し、失われていない場合は &lt;code&gt;false&lt;/code&gt; を返します。</target>
        </trans-unit>
        <trans-unit id="fd6c3ebf7befca9f8208f86c76e4d4180303745c" translate="yes" xml:space="preserve">
          <source>Install</source>
          <target state="translated">Install</target>
        </trans-unit>
        <trans-unit id="529ef97d2434980bc3da73a6c23dfa087b8d8566" translate="yes" xml:space="preserve">
          <source>Install and activate: populating your cache</source>
          <target state="translated">インストールとアクティベート:キャッシュの設定</target>
        </trans-unit>
        <trans-unit id="ba9acc3abc056e12e0be26f1eea479d335744427" translate="yes" xml:space="preserve">
          <source>InstallEvent</source>
          <target state="translated">InstallEvent</target>
        </trans-unit>
        <trans-unit id="fcbdb4d8154e422d310072d516c8bb815d0591d2" translate="yes" xml:space="preserve">
          <source>InstallEvent.activeWorker</source>
          <target state="translated">InstallEvent.activeWorker</target>
        </trans-unit>
        <trans-unit id="233bf443ea9be7bb1a5a76f34e4b353c0523472c" translate="yes" xml:space="preserve">
          <source>InstallEvent.constructor</source>
          <target state="translated">InstallEvent.constructor</target>
        </trans-unit>
        <trans-unit id="d83be3eea0c30e92a95fc7899aa4f1c848b8659b" translate="yes" xml:space="preserve">
          <source>Installation is attempted when the downloaded file is found to be new &amp;mdash; either different to an existing service worker (byte-wise compared), or the first service worker encountered for this page/site.</source>
          <target state="translated">ダウンロードされたファイルが新しいことがわかった場合、インストールが試行されます&amp;mdash;既存のService Worker（バイト単位で比較）とは異なるか、このページ/サイトで最初に検出されたService Workerです。</target>
        </trans-unit>
        <trans-unit id="43c86f4d4fe63b59e961d4b906df36f8231533a5" translate="yes" xml:space="preserve">
          <source>Installation of the worker is attempted when service worker-controlled pages are accessed subsequently. An Install event is always the first one sent to a service worker (this can be used to start the process of populating an IndexedDB, and caching site assets). This is really the same kind of procedure as installing a native or Firefox OS app &amp;mdash; making everything available for use offline.</source>
          <target state="translated">その後、サービスワーカーが制御するページにアクセスすると、ワーカーのインストールが試行されます。Installイベントは常にService Workerに送信される最初のイベントです（これを使用して、IndexedDBにデータを入力し、サイトアセットをキャッシュするプロセスを開始できます）。これは、ネイティブまたはFirefox OSアプリをインストールするのと同じ種類の手順で、すべてをオフラインで使用できるようにします。</target>
        </trans-unit>
        <trans-unit id="d8b9e1efb77595d8bce0403d0a0273eb38fcd6ba" translate="yes" xml:space="preserve">
          <source>Installing a global &lt;code&gt;error&lt;/code&gt; event handler is useful for automated collection of error reports.</source>
          <target state="translated">グローバル &lt;code&gt;error&lt;/code&gt; イベントハンドラーのインストールは、エラーレポートの自動収集に役立ちます。</target>
        </trans-unit>
        <trans-unit id="6ab7d1d49dd26afc2c53ee28fa81799fd390b0a3" translate="yes" xml:space="preserve">
          <source>Instance methods</source>
          <target state="translated">インスタンスメソッド</target>
        </trans-unit>
        <trans-unit id="c1f424042c7e8bee2655a6672ddd3752109cc8d7" translate="yes" xml:space="preserve">
          <source>Instance properties</source>
          <target state="translated">インスタンスのプロパティ</target>
        </trans-unit>
        <trans-unit id="96a6e5b943089530e0ea57a11cccb06af28aa459" translate="yes" xml:space="preserve">
          <source>Instances of &lt;code&gt;XMLHttpRequest&lt;/code&gt; can be used to submit forms in two ways:</source>
          <target state="translated">&lt;code&gt;XMLHttpRequest&lt;/code&gt; のインスタンスを使用して、次の2つの方法でフォームを送信できます。</target>
        </trans-unit>
        <trans-unit id="b792d4c91114fd0db1546cefe814b8b7c1e7b3a8" translate="yes" xml:space="preserve">
          <source>Instead of assigning a color value to the fragment's color, the fragment's color is computed by fetching the &lt;strong&gt;texel&lt;/strong&gt; (that is, the pixel within the texture) based on the value of &lt;code&gt;vTextureCoord&lt;/code&gt; which like the colors is interpolated bewteen vertices.</source>
          <target state="translated">フラグメントのカラーにカラー値を割り当てる代わりに、フラグメントのカラーは、カラーのように複数の頂点が補間される &lt;code&gt;vTextureCoord&lt;/code&gt; の値に基づいて&lt;strong&gt;テクセル&lt;/strong&gt;（つまり、テクスチャ内のピクセル）をフェッチすることによって計算されます。</target>
        </trans-unit>
        <trans-unit id="a1f4766ccc7c14d5ece280d88a05d02ccad87579" translate="yes" xml:space="preserve">
          <source>Instead of creating a &lt;code&gt;Clipboard&lt;/code&gt; object through instantiation, you access the system clipboard through the &lt;a href=&quot;navigator/clipboard&quot;&gt;&lt;code&gt;Navigator.clipboard&lt;/code&gt;&lt;/a&gt; global:</source>
          <target state="translated">インスタンス化によって &lt;code&gt;Clipboard&lt;/code&gt; オブジェクトを作成する代わりに、&lt;a href=&quot;navigator/clipboard&quot;&gt; &lt;code&gt;Navigator.clipboard&lt;/code&gt; &lt;/a&gt;グローバルを通じてシステムクリップボードにアクセスします。</target>
        </trans-unit>
        <trans-unit id="ea086f7f803f51e2394fba444d8215ce65c15b39" translate="yes" xml:space="preserve">
          <source>Instead of immediately failing, you could choose to call &lt;a href=&quot;../paymentresponse/retry&quot;&gt;&lt;code&gt;retry()&lt;/code&gt;&lt;/a&gt; on the response object to ask the user agent to try to process the payment again; this should usually only be done after the user has made any needed corrections to the order.</source>
          <target state="translated">すぐに失敗するのではなく、応答オブジェクトで&lt;a href=&quot;../paymentresponse/retry&quot;&gt; &lt;code&gt;retry()&lt;/code&gt; &lt;/a&gt;を呼び出して、ユーザーエージェントに支払いの処理をもう一度試すように依頼することもできます。これは通常、ユーザーが注文に必要な修正を加えた後にのみ行う必要があります。</target>
        </trans-unit>
        <trans-unit id="892e8c8924ea72198052c8b2b57cba1d81281f31" translate="yes" xml:space="preserve">
          <source>Instead of passing a path to the resource you want to request into the &lt;code&gt;fetch()&lt;/code&gt; call, you can create a request object using the &lt;a href=&quot;../request/request&quot;&gt;&lt;code&gt;Request()&lt;/code&gt;&lt;/a&gt; constructor, and pass that in as a &lt;code&gt;fetch()&lt;/code&gt; method argument:</source>
          <target state="translated">リクエストするリソースへのパスを &lt;code&gt;fetch()&lt;/code&gt; コールに渡す代わりに、&lt;a href=&quot;../request/request&quot;&gt; &lt;code&gt;Request()&lt;/code&gt; &lt;/a&gt;コンストラクターを使用してリクエストオブジェクトを作成し、それを &lt;code&gt;fetch()&lt;/code&gt; メソッドの引数として渡すことができます。</target>
        </trans-unit>
        <trans-unit id="897f41e243ba6de41d3899c837ab683df9cde303" translate="yes" xml:space="preserve">
          <source>Instead of the assigning the promise to a variable, we can post the values returned by the promise to console:</source>
          <target state="translated">プロミスを変数に代入する代わりに、プロミスで返された値をコンソールに投稿することができます。</target>
        </trans-unit>
        <trans-unit id="5279508d21cd4bf74a53ce4f52858fd97ca5b254" translate="yes" xml:space="preserve">
          <source>Instead of trying to juggle shaders, geometry, and working with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/GPU&quot;&gt;GPU&lt;/a&gt; memory, already in the first program, the examples here explore WebGL in an incremental way. We believe that it leads to a more effective learning experience and ultimately a deeper understanding of the underlying concepts.</source>
          <target state="translated">シェーダー、ジオメトリを操作して&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/GPU&quot;&gt;GPU&lt;/a&gt;メモリを操作する代わりに、すでに最初のプログラムで、ここの例ではインクリメンタルな方法でWebGLを探索します。私たちはそれがより効果的な学習体験につながり、最終的には基礎となる概念のより深い理解につながると信じています。</target>
        </trans-unit>
        <trans-unit id="7f28e0e2862b2735d471d2510b9d28fb96c4842f" translate="yes" xml:space="preserve">
          <source>Instead, use another method, such as:</source>
          <target state="translated">その代わりに、別の方法、例えば</target>
        </trans-unit>
        <trans-unit id="7319116bc29acba4a03e6c679da2d8dc5eb0a039" translate="yes" xml:space="preserve">
          <source>Instead, we could build our own promise to handle this kind of case. (See our &lt;a href=&quot;https://github.com/mdn/promises-test&quot;&gt;Promises test&lt;/a&gt; example for the source code, or &lt;a href=&quot;https://mdn.github.io/promises-test/&quot;&gt;look at it running live&lt;/a&gt;.)</source>
          <target state="translated">代わりに、この種のケースを処理するという独自の約束を築くことができます。（ソースコードについては、&lt;a href=&quot;https://github.com/mdn/promises-test&quot;&gt;Promisesテストの&lt;/a&gt;例を参照するか、&lt;a href=&quot;https://mdn.github.io/promises-test/&quot;&gt;ライブで実行されていることを確認してください&lt;/a&gt;。）</target>
        </trans-unit>
        <trans-unit id="3f8ca590a89d1b2ae2151afad76c0729e4148590" translate="yes" xml:space="preserve">
          <source>Instructs the ICE agent to gather both &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/RTP&quot;&gt;RTP&lt;/a&gt; and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/RTCP&quot;&gt;RTCP&lt;/a&gt; candidates. If the remote peer can multiplex RTCP, then RTCP candidates are multiplexed atop the corresponding RTP candidates. Otherwise, both the RTP and RTCP candidates are returned, separately.</source>
          <target state="translated">&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/RTP&quot;&gt;RTP&lt;/a&gt;と&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/RTCP&quot;&gt;RTCPの&lt;/a&gt;両方の候補を収集するようにICEエージェントに指示します。リモートピアがRTCPを多重化できる場合、RTCP候補は対応するRTP候補の上に多重化されます。それ以外の場合は、RTPとRTCPの両方の候補が個別に返されます。</target>
        </trans-unit>
        <trans-unit id="9edcffff4461c9083fbff857f8dcee0f0769cbd4" translate="yes" xml:space="preserve">
          <source>Integer</source>
          <target state="translated">Integer</target>
        </trans-unit>
        <trans-unit id="73e231f79604a7c61096425e88c9207010167d1c" translate="yes" xml:space="preserve">
          <source>Integer attributes</source>
          <target state="translated">整数属性</target>
        </trans-unit>
        <trans-unit id="9f83d80fb724e4b2e585f21faccf00e673b14a5e" translate="yes" xml:space="preserve">
          <source>Integer specifying the number of channels for this node's input, defaults to 2. Values of up to 32 are supported.</source>
          <target state="translated">このノードの入力のチャンネル数を指定する整数で、デフォルトは2です。 32までの値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="0e8c70135aeb9e67664f194885c20f5b37b1b0d0" translate="yes" xml:space="preserve">
          <source>Integer specifying the number of channels for this node's output, defaults to 2. Values of up to 32 are supported.</source>
          <target state="translated">このノードの出力のチャンネル数を指定する整数で、デフォルトは2です。 32までの値がサポートされています。</target>
        </trans-unit>
        <trans-unit id="b24c43fa84cfe1c396462aae4deb27e4ca5db45f" translate="yes" xml:space="preserve">
          <source>Intel Mac OS X x.y</source>
          <target state="translated">インテル Mac OS X x.y</target>
        </trans-unit>
        <trans-unit id="0af1a09e7db4b8180679ccbe171043bd28271d6a" translate="yes" xml:space="preserve">
          <source>Intend to supersede DOM 3</source>
          <target state="translated">DOM 3 の後継となる予定です。</target>
        </trans-unit>
        <trans-unit id="cba11397e0f22632da727f4ce21cc937cbe0e1f7" translate="yes" xml:space="preserve">
          <source>Intended for HD backing stores, but removed from canvas specifications.</source>
          <target state="translated">HDバッキングストア向けに意図されたものですが、キャンバス仕様からは削除されています。</target>
        </trans-unit>
        <trans-unit id="4041c96ee493f72ebc3bb0487c361430bd19f0d0" translate="yes" xml:space="preserve">
          <source>Intended for metering purposes, it returns a value in dB, or &lt;code&gt;0&lt;/code&gt; (no gain reduction) if no signal is fed into the &lt;code&gt;DynamicsCompressorNode&lt;/code&gt;. The range of this value is between &lt;code&gt;-20&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; (in dB).</source>
          <target state="translated">目的を計量するためのもの、それは、dB単位の値を返さない、または &lt;code&gt;0&lt;/code&gt; ない信号が中に供給されていない場合には（ゲインリダクション） &lt;code&gt;DynamicsCompressorNode&lt;/code&gt; 。この値の範囲は、間にある &lt;code&gt;-20&lt;/code&gt; 及び &lt;code&gt;0&lt;/code&gt; （dBで）。</target>
        </trans-unit>
        <trans-unit id="17e84ce8df7e2c8110c50fc187d1de51e7e6ced8" translate="yes" xml:space="preserve">
          <source>Inter-App Connection API</source>
          <target state="translated">アプリ間接続API</target>
        </trans-unit>
        <trans-unit id="4fa4c0b1f03f5de1eda4e13416854c2ad45a0c73" translate="yes" xml:space="preserve">
          <source>Interaction between privileged and non-privileged pages</source>
          <target state="translated">特権ページと非特権ページの相互作用</target>
        </trans-unit>
        <trans-unit id="cdff695781360f6bfbf6b35887cdae6fa3a391f2" translate="yes" xml:space="preserve">
          <source>Interactive Connectivity Establishment (ICE): A Protocol for Network Address Translator (NAT) Traversal for Offer/Answer Protocol</source>
          <target state="translated">インタラクティブ接続確立(ICE)。オファー/アンサープロトコルのためのネットワークアドレストランスレータ(NAT)トラバーサルのためのプロトコル</target>
        </trans-unit>
        <trans-unit id="cd27452e2c44dc5939e52298713f123e1301d10e" translate="yes" xml:space="preserve">
          <source>Interactive cross-browser demo on navigator properties</source>
          <target state="translated">ナビゲータプロパティのインタラクティブなクロスブラウザデモ</target>
        </trans-unit>
        <trans-unit id="7b4db7ef1fa23cfb5e115a2a2c89d46a6a2ebc4a" translate="yes" xml:space="preserve">
          <source>Interface</source>
          <target state="translated">Interface</target>
        </trans-unit>
        <trans-unit id="200d3784af8f514ef960c6d538b2d33d53c7a4ed" translate="yes" xml:space="preserve">
          <source>Interface &lt;code&gt;SVGTransformable&lt;/code&gt; contains properties and methods that apply to all elements which have attribute &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform&quot;&gt;transform&lt;/a&gt;&lt;/code&gt;.</source>
          <target state="translated">インターフェース &lt;code&gt;SVGTransformable&lt;/code&gt; には、属性 &lt;code&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/transform&quot;&gt;transform&lt;/a&gt;&lt;/code&gt; を持つすべての要素に適用されるプロパティとメソッドが含まれています。</target>
        </trans-unit>
        <trans-unit id="3a097b716fe935f0c7f35b06867b3a019d2aeda0" translate="yes" xml:space="preserve">
          <source>Interface overview</source>
          <target state="translated">インターフェースの概要</target>
        </trans-unit>
        <trans-unit id="b356313f979923fc829adb909098ed26a5a01aff" translate="yes" xml:space="preserve">
          <source>Interfaces</source>
          <target state="translated">Interfaces</target>
        </trans-unit>
        <trans-unit id="75cd03c9d18a39dee265e66002f9eb352dda00c6" translate="yes" xml:space="preserve">
          <source>Interfaces and Objects</source>
          <target state="translated">インターフェースとオブジェクト</target>
        </trans-unit>
        <trans-unit id="d039372089feeb8f7b5e2b217b7232a938b564b8" translate="yes" xml:space="preserve">
          <source>Interfaces based on CSSStyleValue</source>
          <target state="translated">CSSStyleValueに基づくインターフェース</target>
        </trans-unit>
        <trans-unit id="d003a38c073224d2eec165303e57b8d05c1ab063" translate="yes" xml:space="preserve">
          <source>Interfaces based on Event</source>
          <target state="translated">イベントに基づくインターフェース</target>
        </trans-unit>
        <trans-unit id="90a1f856fa6933c89f743692324e6bfc3c2ab42f" translate="yes" xml:space="preserve">
          <source>Interfaces based on OrientationSensor</source>
          <target state="translated">OrientationSensorをベースにしたインターフェース</target>
        </trans-unit>
        <trans-unit id="8654abfd9f308122059e4edfb87fcb0c7cd8a0c6" translate="yes" xml:space="preserve">
          <source>Interfaces based on Sensor</source>
          <target state="translated">センサに基づくインターフェース</target>
        </trans-unit>
        <trans-unit id="5fa37d0a32838a7026ed67c57aa06d63af52c7bd" translate="yes" xml:space="preserve">
          <source>Interfaces for defining effects that you want to apply to your audio sources.</source>
          <target state="translated">オーディオソースに適用したいエフェクトを定義するためのインターフェース。</target>
        </trans-unit>
        <trans-unit id="a5f16ffefd099418416bc8d49b8c9be9e4d87ae5" translate="yes" xml:space="preserve">
          <source>Interfaces implementing it: &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;messageport&quot;&gt;&lt;code&gt;MessagePort&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;imagebitmap&quot;&gt;&lt;code&gt;ImageBitmap&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">それを実装するインターフェース：&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt; &lt;code&gt;ArrayBuffer&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;messageport&quot;&gt; &lt;code&gt;MessagePort&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;imagebitmap&quot;&gt; &lt;code&gt;ImageBitmap&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="21d1dedf699526e24b11c85c09fcdc4706fc0746" translate="yes" xml:space="preserve">
          <source>Interfaces implementing this one: &lt;a href=&quot;htmlanchorelement&quot;&gt;&lt;code&gt;HTMLAnchorElement&lt;/code&gt;&lt;/a&gt;, &lt;a href=&quot;htmlareaelement&quot;&gt;&lt;code&gt;HTMLAreaElement&lt;/code&gt;&lt;/a&gt;</source>
          <target state="translated">これを実装するインターフェース：&lt;a href=&quot;htmlanchorelement&quot;&gt; &lt;code&gt;HTMLAnchorElement&lt;/code&gt; &lt;/a&gt;、&lt;a href=&quot;htmlareaelement&quot;&gt; &lt;code&gt;HTMLAreaElement&lt;/code&gt; &lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="3c761c11f5b380121d50fbeca5cbf0136988a6d5" translate="yes" xml:space="preserve">
          <source>Interfaces implementing this one: &lt;a href=&quot;workerlocation&quot;&gt;&lt;code&gt;WorkerLocation&lt;/code&gt;&lt;/a&gt;.</source>
          <target state="translated">これを実装するインターフェース：&lt;a href=&quot;workerlocation&quot;&gt; &lt;code&gt;WorkerLocation&lt;/code&gt; &lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="38913081b01712423aec4e92268089a3f2fb07c4" translate="yes" xml:space="preserve">
          <source>Interfaces replaced by this one:</source>
          <target state="translated">インターフェイスがこれに置き換わりました。</target>
        </trans-unit>
        <trans-unit id="8c7ec68825639c82f7b25867f9f387b96e50316e" translate="yes" xml:space="preserve">
          <source>Interfaces that define audio sources for use in the Web Audio API.</source>
          <target state="translated">Web Audio APIで使用するオーディオソースを定義するインターフェース。</target>
        </trans-unit>
        <trans-unit id="55dac7fdb60427fc4607925175b94125a7743dcd" translate="yes" xml:space="preserve">
          <source>Internal APIs (chrome-context only)</source>
          <target state="translated">内部API (chrome-contextのみ)</target>
        </trans-unit>
        <trans-unit id="23575f35a521e9c261d274ac4cb29c2f05b261ac" translate="yes" xml:space="preserve">
          <source>Internal Error</source>
          <target state="translated">内部エラー</target>
        </trans-unit>
        <trans-unit id="a5a53f80d4bfb545a817aa4be8fc50db0b968da0" translate="yes" xml:space="preserve">
          <source>Internal queues and queuing strategies</source>
          <target state="translated">内部キューとキューイング戦略</target>
        </trans-unit>
        <trans-unit id="14bd2ceb08e4a5d50bba8c2633d3ee72cb8d1cf7" translate="yes" xml:space="preserve">
          <source>Internal queues employ a &lt;strong&gt;queuing strategy&lt;/strong&gt;, which dictates how to signal backpressure based on the &lt;strong&gt;internal queue state.&lt;/strong&gt;</source>
          <target state="translated">内部キューは、&lt;strong&gt;内部キューの状態に&lt;/strong&gt;基づいてバックプレッシャーを通知する方法を決定する&lt;strong&gt;キューイング戦略を&lt;/strong&gt;採用してい&lt;strong&gt;ます。&lt;/strong&gt;</target>
        </trans-unit>
        <trans-unit id="f3c5def8456e9130773962ecb46f93b2f558e543" translate="yes" xml:space="preserve">
          <source>Internationalized sorting. Not all languages sort strings in the same way, so internationalized sorting is not supported. While the database can't store data in a specific internationalized order, you can sort the data that you've read out of the database yourself. Note, however, that &lt;a href=&quot;using_indexeddb#Locale-aware_sorting&quot;&gt;locale-aware sorting&lt;/a&gt; has been allowed with an experimental flag enabled (currently for Firefox only) since Firefox 43.</source>
          <target state="translated">国際化されたソート。すべての言語が文字列を同じ方法でソートするわけではないため、国際化されたソートはサポートされていません。データベースは特定の国際化された順序でデータを保存することはできませんが、データベースから読み取ったデータを自分で並べ替えることができます。ただし、Firefox 43以降では、実験的なフラグを有効にして（現在はFirefoxのみ）、&lt;a href=&quot;using_indexeddb#Locale-aware_sorting&quot;&gt;ロケール対応のソート&lt;/a&gt;が許可されています。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
