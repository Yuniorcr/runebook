<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" version="1.2">
  <file source-language="en" target-language="ja" datatype="htmlbody" original="go">
    <body>
      <group id="go">
        <trans-unit id="cd38865133cd9a5c006edfe52fb23197b681651e" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://blog.golang.org/context&quot;&gt;https://blog.golang.org/context&lt;/a&gt; for example code for a server that uses Contexts.</source>
          <target state="translated">コンテキストを使用するサーバーのコード例については、&lt;a href=&quot;https://blog.golang.org/context&quot;&gt;https：//blog.golang.org/context&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f8fa4b86ca7a1947812b5144ad80bb7923b98b76" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://blog.golang.org/http-tracing&quot;&gt;https://blog.golang.org/http-tracing&lt;/a&gt; for more.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://blog.golang.org/http-tracing&quot;&gt;https：//blog.golang.org/http-tracing&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="55fd6381c1e6f556a9d9a122b9ddab024cd5623c" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels&quot;&gt;https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels&lt;/a&gt;.</source>
          <target state="translated">&lt;a href=&quot;https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levels&quot;&gt;https://en.wikipedia.org/wiki/Isolation_(database_systems)#Isolation_levelsを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="5b6207cb402edce8d859bdca9debb6fc32598a7f" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials&quot;&gt;https://en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials&lt;/a&gt; for information.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials&quot;&gt;https：//en.wikipedia.org/wiki/Mathematics_of_cyclic_redundancy_checks#Reversed_representations_and_reciprocal_polynomials&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="822defb6e38c1c8b51e3bd857cd8e75be7930a08" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://en.wikipedia.org/wiki/Web_colors#Web-safe_colors&quot;&gt;https://en.wikipedia.org/wiki/Web_colors#Web-safe_colors&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://en.wikipedia.org/wiki/Web_colors#Web-safe_colors&quot;&gt;https：//en.wikipedia.org/wiki/Web_colors#Web-safe_colors&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="012d19a411e4e0484271ae09bcb7f34da4a9a591" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://fast-cgi.github.io/&quot;&gt;https://fast-cgi.github.io/&lt;/a&gt; for an unofficial mirror of the original documentation.</source>
          <target state="translated">元のドキュメントの非公式のミラーについては、&lt;a href=&quot;https://fast-cgi.github.io/&quot;&gt;https：//fast-cgi.github.io/&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="c591b3698d1803b8997f519f5ea5ff42b510cd7a" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00&quot;&gt;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00&quot;&gt;https：//tools.ietf.org/html/draft-ietf-httpbis-cookie-same-site-00&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ebe2d422131406c7b8b8363b0278a5d60f19e086" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;https://tools.ietf.org/html/rfc6265&lt;/a&gt; for details.</source>
          <target state="translated">詳細については、&lt;a href=&quot;https://tools.ietf.org/html/rfc6265&quot;&gt;https：//tools.ietf.org/html/rfc6265&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="f939efd0712db18e39e637012cde4b443ec363ef" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xmlを&lt;/a&gt;参照してください</target>
        </trans-unit>
        <trans-unit id="cfeb891e01c83428f5fff33780366881bea259da" translate="yes" xml:space="preserve">
          <source>See &lt;a href=&quot;https://www.w3.org/TR/css3-syntax/#parsing&quot;&gt;https://www.w3.org/TR/css3-syntax/#parsing&lt;/a&gt; and &lt;a href=&quot;https://web.archive.org/web/20090211114933/http://w3.org/TR/css3-syntax#style&quot;&gt;https://web.archive.org/web/20090211114933/http://w3.org/TR/css3-syntax#style&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.w3.org/TR/css3-syntax/#parsing&quot;&gt;https://www.w3.org/TR/css3-syntax/#parsing&lt;/a&gt;および&lt;a href=&quot;https://web.archive.org/web/20090211114933/http://w3.org/TR/css3-syntax#style&quot;&gt;https://web.archive.org/web/20090211114933/http://w3.org/TR/css3-syntax#styleを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="b12c5bb65217a01227ad162d33c3fed71b0401c9" translate="yes" xml:space="preserve">
          <source>See MarshalIndent for an example.</source>
          <target state="translated">例としては、MarshalIndentを参照してください。</target>
        </trans-unit>
        <trans-unit id="cec031b75e78fe653173c9a966907dfc7a5c304d" translate="yes" xml:space="preserve">
          <source>See PublicKey.Equal for details on how Curve is compared.</source>
          <target state="translated">Curveの比較方法の詳細については、PublicKey.Equalを参照してください。</target>
        </trans-unit>
        <trans-unit id="4a1e97ca1a62398cd193e09c77540d6a3a116112" translate="yes" xml:space="preserve">
          <source>See also &amp;ldquo;A Layman's Guide to a Subset of ASN.1, BER, and DER,&amp;rdquo; &lt;a href=&quot;http://luca.ntop.org/Teaching/Appunti/asn1.html&quot;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt;.</source>
          <target state="translated">「ASN.1、BER、およびDERのサブセットにA素人のガイド」も参照してください&lt;a href=&quot;http://luca.ntop.org/Teaching/Appunti/asn1.html&quot;&gt;http://luca.ntop.org/Teaching/Appunti/asn1.html&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="f35fe0b7c2e4d6b79cc655771a00378e8038d6ad" translate="yes" xml:space="preserve">
          <source>See also Rob Pike, &amp;ldquo;Lexical File Names in Plan 9 or Getting Dot-Dot Right,&amp;rdquo; &lt;a href=&quot;https://9p.io/sys/doc/lexnames.html&quot;&gt;https://9p.io/sys/doc/lexnames.html&lt;/a&gt;</source>
          <target state="translated">Rob Pikeの「Plan 9のレキシカルファイル名またはドットドットの正しい取得」も&lt;a href=&quot;https://9p.io/sys/doc/lexnames.html&quot;&gt;参照してください。https：//9p.io/sys/doc/lexnames.html&lt;/a&gt;</target>
        </trans-unit>
        <trans-unit id="c57c543e703b305eac0e44a135198463dbeead16" translate="yes" xml:space="preserve">
          <source>See func Dial for a description of the host and port parameters.</source>
          <target state="translated">ホストとポートのパラメータの説明は func Dial を参照してください。</target>
        </trans-unit>
        <trans-unit id="b9538b240ebef42fb9902c82f39f4d8fe015d462" translate="yes" xml:space="preserve">
          <source>See func Dial for a description of the hostport parameter, and host and port results.</source>
          <target state="translated">hostport パラメータの説明、およびホストとポートの結果については func Dial を参照してください。</target>
        </trans-unit>
        <trans-unit id="f55bd52960d8a9b74f8c169b63b303f83068df0d" translate="yes" xml:space="preserve">
          <source>See func Dial for a description of the network and address parameters.</source>
          <target state="translated">ネットワークとアドレスパラメータの説明は func Dial を参照してください。</target>
        </trans-unit>
        <trans-unit id="27af5de3a2347f6faceaa84c4b1f14ae1dbd0c9d" translate="yes" xml:space="preserve">
          <source>See func Listen for a description of the network and address parameters.</source>
          <target state="translated">ネットワークとアドレスパラメータの説明は func Listen を参照してください。</target>
        </trans-unit>
        <trans-unit id="6b6b3dee4908b79bcc47570b27eb5ceec2a78402" translate="yes" xml:space="preserve">
          <source>See func ListenPacket for a description of the network and address parameters.</source>
          <target state="translated">ネットワークとアドレスのパラメータの説明は func ListenPacket を参照してください。</target>
        </trans-unit>
        <trans-unit id="ad4f4bb8708490d77806cbbb7379b205b4ed91be" translate="yes" xml:space="preserve">
          <source>See package json to understand how non-string content is marshaled for embedding in JavaScript contexts.</source>
          <target state="translated">文字列以外のコンテンツがどのようにして JavaScript コンテキストに埋め込むためにマーシャリングされるかについては json パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="6e66c2f2a3fcd4dca444d07ce7d1a4b916782623" translate="yes" xml:space="preserve">
          <source>See page 36 of RFC 959 (&lt;a href=&quot;https://www.ietf.org/rfc/rfc959.txt&quot;&gt;https://www.ietf.org/rfc/rfc959.txt&lt;/a&gt;) for details of another form of response accepted:</source>
          <target state="translated">受け入れられる別の形式の応答の詳細については、RFC 959の36ページ（&lt;a href=&quot;https://www.ietf.org/rfc/rfc959.txt&quot;&gt;https://www.ietf.org/rfc/rfc959.txt&lt;/a&gt;）を参照してください。</target>
        </trans-unit>
        <trans-unit id="89753a3f5bb64713c93e9dd202de0a7448a21cee" translate="yes" xml:space="preserve">
          <source>See the Client.Do method documentation for details on how redirects are handled.</source>
          <target state="translated">リダイレクトの処理方法の詳細については、 Client.Do メソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ca6b0bd4889c5a06e76626f48ec79733e1fde8b5" translate="yes" xml:space="preserve">
          <source>See the Decoder.Strict and Decoder.Entity fields' documentation.</source>
          <target state="translated">Decoder.Strict および Decoder.Entity フィールドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="69633a7324ac73d11db8887864a0a74fd2f5588f" translate="yes" xml:space="preserve">
          <source>See the documentation for Marshal for details about the conversion of Go values to JSON.</source>
          <target state="translated">Go値のJSONへの変換については、Marshalのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="45c89cab840adb83eec8d88d66bfe51744007d64" translate="yes" xml:space="preserve">
          <source>See the documentation for Marshal for details about the conversion of Go values to XML.</source>
          <target state="translated">Go の値の XML への変換については、Marshal のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="f6ad8d64ce7abf48e48759b114cf5bbde1ec1217" translate="yes" xml:space="preserve">
          <source>See the documentation for Reader's DotReader method for details about dot-encoding.</source>
          <target state="translated">ドットエンコーディングの詳細については、ReaderのDotReaderメソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="07bb2782143cae54efbc20f97e601c6258fdfa3a" translate="yes" xml:space="preserve">
          <source>See the documentation for Unmarshal for details about the conversion of JSON into a Go value.</source>
          <target state="translated">JSONからGo値への変換の詳細については、Unmarshalのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="5b7d9e398b9767ef1472ee8144b5fcbf7154f428" translate="yes" xml:space="preserve">
          <source>See the documentation for the DotReader method for details about dot-encoding.</source>
          <target state="translated">ドット・エンコーディングの詳細については、DotReader メソッドのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="20a56feb05a514c49115ca9854f4e8b6ab081007" translate="yes" xml:space="preserve">
          <source>See the documentation of ErrorCode for details.</source>
          <target state="translated">詳細はErrorCodeのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="130b144345eef54088939126445f2041356e9967" translate="yes" xml:space="preserve">
          <source>See the net/http/pprof package for more details about all of the debug endpoints installed by this import.</source>
          <target state="translated">このインポートによってインストールされたすべてのデバッグエンドポイントの詳細については net/http/pprof パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="8ea13af2c476fd8c34b53410467a8c4eec967244" translate="yes" xml:space="preserve">
          <source>See the net/http/pprof package for more details.</source>
          <target state="translated">詳細は net/http/pprof パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="7129eb47abb47be846a8de8beba3573c278ce39c" translate="yes" xml:space="preserve">
          <source>See type IPNet and func ParseCIDR for details.</source>
          <target state="translated">詳細はIPNet型とfunc ParseCIDRを参照してください。</target>
        </trans-unit>
        <trans-unit id="d95f74a97d247876324f75dbbfb30fd3fdf53de6" translate="yes" xml:space="preserve">
          <source>See: &lt;a href=&quot;https://www.pkware.com/appnote&quot;&gt;https://www.pkware.com/appnote&lt;/a&gt;</source>
          <target state="translated">参照：&lt;a href=&quot;https://www.pkware.com/appnote&quot;&gt;https&lt;/a&gt; : //www.pkware.com/appnote</target>
        </trans-unit>
        <trans-unit id="4c4d4997512bc2a6a144281549f19954818ba0de" translate="yes" xml:space="preserve">
          <source>Seed returns h's seed value.</source>
          <target state="translated">Seedは、hのシード値を返します。</target>
        </trans-unit>
        <trans-unit id="421cab07939e4ef921a875d22fec2c50b6b26cc4" translate="yes" xml:space="preserve">
          <source>Seed returns the private key seed corresponding to priv. It is provided for interoperability with RFC 8032. RFC 8032's private keys correspond to seeds in this package.</source>
          <target state="translated">Seed は priv に対応する秘密鍵シードを返す。これは RFC 8032 との相互運用性のために提供されています。RFC 8032 の秘密鍵は、このパッケージのシードに対応しています。</target>
        </trans-unit>
        <trans-unit id="b24f14f5efbc89ced2f3c041e71ddf2e16d01a87" translate="yes" xml:space="preserve">
          <source>Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2&amp;sup3;&amp;sup1;-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.</source>
          <target state="translated">シードは、提供されたシード値を使用して、デフォルトのソースを決定性状態に初期化します。Seedが呼び出されない場合、ジェネレーターはSeed（1）によってシードされたかのように動作します。2&amp;sup3;&amp;sup1;-1で割ったときに同じ余りを持つシード値は、同じ疑似ランダムシーケンスを生成します。Rand.Seedメソッドとは異なり、シードは同時使用に対して安全です。</target>
        </trans-unit>
        <trans-unit id="a2daea0c21550e6b91614c2942780e2e38582d89" translate="yes" xml:space="preserve">
          <source>Seed uses the provided seed value to initialize the default Source to a deterministic state. If Seed is not called, the generator behaves as if seeded by Seed(1). Seed values that have the same remainder when divided by 2^31-1 generate the same pseudo-random sequence. Seed, unlike the Rand.Seed method, is safe for concurrent use.</source>
          <target state="translated">Seedは、提供されたシード値を使用してデフォルトのソースを決定論的な状態に初期化します。Seedが呼ばれなかった場合、ジェネレータはSeed(1)によってシードされたかのように振る舞います。2^31-1で割ったときに同じ余白を持つシード値は、同じ擬似乱数シーケンスを生成します。SeedはRand.Seedメソッドとは異なり、同時使用でも安全です。</target>
        </trans-unit>
        <trans-unit id="06599ffd87d9ecfcc5955a8a8f6f2e80af71b779" translate="yes" xml:space="preserve">
          <source>Seed uses the provided seed value to initialize the generator to a deterministic state. Seed should not be called concurrently with any other Rand method.</source>
          <target state="translated">Seedは、提供されたシード値を使用して、ジェネレーターを決定論的な状態に初期化します。Seedは、他のRandメソッドと同時に呼ばれるべきではありません。</target>
        </trans-unit>
        <trans-unit id="63eada0c1ee90c191cced8ff6a478d23ec01c7bb" translate="yes" xml:space="preserve">
          <source>Seek implements the io.Seeker interface.</source>
          <target state="translated">Seekはio.Seekerインターフェイスを実装しています。</target>
        </trans-unit>
        <trans-unit id="410f9d629b5b2020b5303452364dec83676d0a30" translate="yes" xml:space="preserve">
          <source>Seek positions the Reader at offset off in the encoded entry stream. Offset 0 can be used to denote the first entry.</source>
          <target state="translated">シークは、エンコードされたエントリストリームのオフセットオフにリーダを配置します。オフセット0は最初のエントリを示すために使用することができます。</target>
        </trans-unit>
        <trans-unit id="73550a62d2076f2c392030c22ea826a5948745a2" translate="yes" xml:space="preserve">
          <source>Seek restores the line table reader to a position returned by Tell.</source>
          <target state="translated">Seekは、Tellが返した位置に行テーブルリーダーを戻します。</target>
        </trans-unit>
        <trans-unit id="6d637ad9eaafe14fbed4d5e3bc3eb33df03f11cb" translate="yes" xml:space="preserve">
          <source>Seek sets the offset for the next Read or Write on file to offset, interpreted according to whence: 0 means relative to the origin of the file, 1 means relative to the current offset, and 2 means relative to the end. It returns the new offset and an error, if any. The behavior of Seek on a file opened with O_APPEND is not specified.</source>
          <target state="translated">Seekは、ファイルの次のReadまたはWriteのオフセットを設定します。0 はファイルの原点からの相対的なもの、1 は現在のオフセットからの相対的なもの、2 は終了点からの相対的なものを意味します。0 はファイルの原点からの相対的なもの、1 は現在のオフセットからの相対的なもの、2 は終了点からの相対的なものを意味します。O_APPENDでオープンされたファイルに対するSeekの動作は指定されていません。</target>
        </trans-unit>
        <trans-unit id="e00a273e91af976fc6df810663ccae8e6326bc28" translate="yes" xml:space="preserve">
          <source>Seek sets the offset for the next Read or Write to offset, interpreted according to whence: SeekStart means relative to the start of the file, SeekCurrent means relative to the current offset, and SeekEnd means relative to the end. Seek returns the new offset relative to the start of the file and an error, if any.</source>
          <target state="translated">Seekは、次のReadまたはWriteのオフセットを設定し、どこから来たかに応じて解釈します。SeekStartはファイルの先頭からの相対的なオフセットを意味し、SeekCurrentは現在のオフセットからの相対的なオフセットを意味し、SeekEndは末尾からの相対的なオフセットを意味します。SeekStartはファイルの先頭からの相対的なオフセットを、SeekCurrentは現在のオフセットからの相対的なオフセットを、SeekEndは末尾からの相対的なオフセットを返します。</target>
        </trans-unit>
        <trans-unit id="f2691430f4c04cd93d687e7abb0ccf591170c83f" translate="yes" xml:space="preserve">
          <source>Seek whence values.</source>
          <target state="translated">値の出所を求めて</target>
        </trans-unit>
        <trans-unit id="69cfaf772b14f0b576e9cb0bbd8f02155636d19d" translate="yes" xml:space="preserve">
          <source>SeekPC returns the Entry for the compilation unit that includes pc, and positions the reader to read the children of that unit. If pc is not covered by any unit, SeekPC returns ErrUnknownPC and the position of the reader is undefined.</source>
          <target state="translated">SeekPCはpcを含むコンパイルユニットのエントリを返し、そのユニットの子を読み取るためにリーダを配置します。pcがどのユニットにも含まれていない場合、SeekPCはErrUnknownPCを返し、リーダの位置は未定義です。</target>
        </trans-unit>
        <trans-unit id="ce674d68613294249c458dda3fd950d087fbda52" translate="yes" xml:space="preserve">
          <source>SeekPC sets *entry to the LineEntry that includes pc and positions the reader on the next entry in the line table. If necessary, this will seek backwards to find pc.</source>
          <target state="translated">SeekPCは、pcを含むLineEntryに*entryを設定し、行テーブルの次のエントリにリーダを配置します。必要に応じて、これは pc を見つけるために後方にシークします。</target>
        </trans-unit>
        <trans-unit id="9d91685eee68f0702fc5f565a2ad58bdb01cbd6c" translate="yes" xml:space="preserve">
          <source>Seeker is the interface that wraps the basic Seek method.</source>
          <target state="translated">Seekerは基本的なSeekメソッドをラップするインターフェースです。</target>
        </trans-unit>
        <trans-unit id="c221b3bf48536c91e36f1aa582e0e6ad14671a86" translate="yes" xml:space="preserve">
          <source>Seeking to an offset before the start of the file is an error. Seeking to any positive offset is legal, but the behavior of subsequent I/O operations on the underlying object is implementation-dependent.</source>
          <target state="translated">ファイルの開始前のオフセットを求めるとエラーになります。任意の正のオフセットへのシークは合法ですが、基になるオブジェクトに対するそれ以降のI/O操作の動作は実装に依存します。</target>
        </trans-unit>
        <trans-unit id="d283b12149f88184eedb3514ba9c006d88d9d635" translate="yes" xml:space="preserve">
          <source>Segment returns the first Segment with the given name, or nil if no such segment exists.</source>
          <target state="translated">Segment は、指定された名前の最初の Segment を返します。</target>
        </trans-unit>
        <trans-unit id="4ee9c170709717ea62d8ec2ac63808bf3b81d532" translate="yes" xml:space="preserve">
          <source>Select executes a select operation described by the list of cases. Like the Go select statement, it blocks until at least one of the cases can proceed, makes a uniform pseudo-random choice, and then executes that case. It returns the index of the chosen case and, if that case was a receive operation, the value received and a boolean indicating whether the value corresponds to a send on the channel (as opposed to a zero value received because the channel is closed).</source>
          <target state="translated">Select は、ケースのリストで記述された選択操作を実行します。Go select文と同様に、ケースのうち少なくとも1つが進むことができるまでブロックし、一様な擬似ランダムな選択を行い、そのケースを実行します。選択されたケースのインデックスを返し、そのケースが受信操作であった場合は、受信した値と、その値がチャネル上での送信に対応するかどうかを示すブール値を返します (チャネルが閉じているために受信した値がゼロであるのとは対照的です)。</target>
        </trans-unit>
        <trans-unit id="9f23aae7e3512dd0773f6a470359d03ccb841782" translate="yes" xml:space="preserve">
          <source>Select executes a select operation described by the list of cases. Like the Go select statement, it blocks until at least one of the cases can proceed, makes a uniform pseudo-random choice, and then executes that case. It returns the index of the chosen case and, if that case was a receive operation, the value received and a boolean indicating whether the value corresponds to a send on the channel (as opposed to a zero value received because the channel is closed). Select supports a maximum of 65536 cases.</source>
          <target state="translated">Select は、ケースのリストで記述された選択操作を実行します。Go select文と同様に、ケースのうち少なくとも1つが進むことができるまでブロックし、一様な擬似ランダムな選択を行い、そのケースを実行します。選択されたケースのインデックスを返し、そのケースが受信操作であった場合は、受信した値と、その値がチャネル上での送信に対応するかどうかを示すブール値を返します (チャネルが閉じているために受信した値がゼロであるのとは対照的です)。セレクトは最大65536件のケースをサポートしています。</target>
        </trans-unit>
        <trans-unit id="7716a94c0a405511b91cc23c646dfce03e542371" translate="yes" xml:space="preserve">
          <source>SelectionKind describes the kind of a selector expression x.f (excluding qualified identifiers).</source>
          <target state="translated">SelectionKindは、セレクタ式x.f(修飾された識別子を除く)の種類を記述します。</target>
        </trans-unit>
        <trans-unit id="656dfc577aeb6e9f277a9a8820fcfc6e5db75f21" translate="yes" xml:space="preserve">
          <source>SelectionString returns the string form of s. The Qualifier controls the printing of package-level objects, and may be nil.</source>
          <target state="translated">SelectionStringは、sの文字列形式を返します。 Qualifierは、パッケージレベルのオブジェクトの印刷を制御し、nilにすることもできます。</target>
        </trans-unit>
        <trans-unit id="edad40365c9764afdd964f9245649f6856af2d11" translate="yes" xml:space="preserve">
          <source>Send sends x on the channel v. It panics if v's kind is not Chan or if x's type is not the same type as v's element type. As in Go, x's value must be assignable to the channel's element type.</source>
          <target state="translated">v の種類が Chan でない場合や、x の型が v の要素型と同じ型でない場合にパニックになります。Go と同様に、x の値はチャンネルの要素型に代入可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="2750b0f06411195ed08fefe45f59d520ab6f8353" translate="yes" xml:space="preserve">
          <source>SendMail</source>
          <target state="translated">SendMail</target>
        </trans-unit>
        <trans-unit id="1a5bbac84e0744da338847af3ed794816ef236ce" translate="yes" xml:space="preserve">
          <source>SendMail connects to the server at addr, switches to TLS if possible, authenticates with the optional mechanism a if possible, and then sends an email from address from, to addresses to, with message msg. The addr must include a port, as in &quot;mail.example.com:smtp&quot;.</source>
          <target state="translated">SendMail は addr でサーバに接続し、可能であれば TLS に切り替え、可能であればオプションの機構 a で認証を行い、アドレスからアドレスへ、アドレスからアドレスへ、メッセージ msg で電子メールを送信します。addrには、&quot;mail.example.com:smtp &quot;のようにポートを含める必要があります。</target>
        </trans-unit>
        <trans-unit id="9866b4faed06fd643cf801f0e203a46a3fe6c756" translate="yes" xml:space="preserve">
          <source>Serve accepts incoming FastCGI connections on the listener l, creating a new goroutine for each. The goroutine reads requests and then calls handler to reply to them. If l is nil, Serve accepts connections from os.Stdin. If handler is nil, http.DefaultServeMux is used.</source>
          <target state="translated">Serve はリスナー l 上で着信 FastCGI 接続を受け入れ、それぞれに新しい goroutine を作成します。goroutine はリクエストを読み込んでから handler を呼び出して応答します。l が nil の場合、Serve は os.Stdin からの接続を受け入れます。handler が nil の場合は http.DefaultServeMux が使われます。</target>
        </trans-unit>
        <trans-unit id="d8de44e0fb5292324dadb958bb0ec67283e1e920" translate="yes" xml:space="preserve">
          <source>Serve accepts incoming HTTP connections on the listener l, creating a new service goroutine for each. The service goroutines read requests and then call handler to reply to them.</source>
          <target state="translated">Serve はリスナー l 上で着信 HTTP 接続を受け入れ、それぞれに新しいサービスゴローチンを作成します。サービスゴローチンはリクエストを読み込んでからハンドラを呼び出して応答します。</target>
        </trans-unit>
        <trans-unit id="fb2fbb4a3d173feafc83e986b5d91f4c043b98cd" translate="yes" xml:space="preserve">
          <source>Serve accepts incoming connections on the Listener l, creating a new service goroutine for each. The service goroutines read requests and then call srv.Handler to reply to them.</source>
          <target state="translated">Serveはリスナーl上で着信接続を受け付け、それぞれに新しいサービスゴローチンを作成します。サービスゴローチンはリクエストを読み込んでから srv.Handler を呼び出して応答します。</target>
        </trans-unit>
        <trans-unit id="f65496b12ef6ef062ca261d02fdcc1afec4ce5ea" translate="yes" xml:space="preserve">
          <source>Serve always returns a non-nil error and closes l. After Shutdown or Close, the returned error is ErrServerClosed.</source>
          <target state="translated">Serve は常に非 null でないエラーを返し、l を閉じます。</target>
        </trans-unit>
        <trans-unit id="4671511496e9d853a658f8c526e4dbf184a2c34c" translate="yes" xml:space="preserve">
          <source>Serve always returns a non-nil error.</source>
          <target state="translated">Serveは常に非nilのエラーを返します。</target>
        </trans-unit>
        <trans-unit id="497078ba977bfc095dad2477b3172dcb26f1c0ab" translate="yes" xml:space="preserve">
          <source>Serve executes the provided Handler on the currently active CGI request, if any. If there's no current CGI environment an error is returned. The provided handler may be nil to use http.DefaultServeMux.</source>
          <target state="translated">Serve は、現在アクティブな CGI リクエストがあれば、提供されたハンドラを実行します。現在の CGI 環境がない場合はエラーが返されます。提供されるハンドラは、http.DefaultServeMux を使用するために nil であるかもしれません。</target>
        </trans-unit>
        <trans-unit id="dbfb7d2b5b789e7fe76f3c2462b4817839783a1b" translate="yes" xml:space="preserve">
          <source>ServeCodec is like ServeConn but uses the specified codec to decode requests and encode responses.</source>
          <target state="translated">ServeCodec は ServeConn と似ていますが、指定されたコーデックを使用してリクエストをデコードし、レスポンスをエンコードします。</target>
        </trans-unit>
        <trans-unit id="09ac76223546ffdd3d100d24b6bc49c0b7956df0" translate="yes" xml:space="preserve">
          <source>ServeConn runs the DefaultServer on a single connection. ServeConn blocks, serving the connection until the client hangs up. The caller typically invokes ServeConn in a go statement. ServeConn uses the gob wire format (see package gob) on the connection. To use an alternate codec, use ServeCodec. See NewClient's comment for information about concurrent access.</source>
          <target state="translated">ServeConn は単一の接続で DefaultServer を実行します。ServeConn はブロックして、クライアントがハングアップするまで接続を提供します。呼び出し元は通常 go 文で ServeConn を呼び出します。ServeConn は接続で gob ワイヤフォーマット (gob パッケージを参照)を使用します。別のコーデックを使用するには、ServeCodec を使用してください。同時アクセスについては、NewClientのコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="d136d0992046f83551cea5f2576de13dc7e39384" translate="yes" xml:space="preserve">
          <source>ServeConn runs the JSON-RPC server on a single connection. ServeConn blocks, serving the connection until the client hangs up. The caller typically invokes ServeConn in a go statement.</source>
          <target state="translated">ServeConn は単一の接続で JSON-RPC サーバーを実行します。ServeConn はブロックし、クライアントがハングアップするまで接続を提供します。発信者は通常 go 文で ServeConn を呼び出します。</target>
        </trans-unit>
        <trans-unit id="2f01374418f76760c6cb616cbabd675e38909787" translate="yes" xml:space="preserve">
          <source>ServeConn runs the server on a single connection. ServeConn blocks, serving the connection until the client hangs up. The caller typically invokes ServeConn in a go statement. ServeConn uses the gob wire format (see package gob) on the connection. To use an alternate codec, use ServeCodec. See NewClient's comment for information about concurrent access.</source>
          <target state="translated">ServeConn は単一の接続でサーバーを実行します。ServeConn はブロックし、クライアントがハングアップするまで接続を提供します。発信者は通常 go 文で ServeConn を呼び出します。ServeConn は接続で gob ワイヤフォーマット (gob パッケージを参照)を使用します。別のコーデックを使用するには、ServeCodec を使用してください。同時アクセスについては、NewClientのコメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="ef53643ab98faf2b116983a1f327c585aaa8a435" translate="yes" xml:space="preserve">
          <source>ServeContent replies to the request using the content in the provided ReadSeeker. The main benefit of ServeContent over io.Copy is that it handles Range requests properly, sets the MIME type, and handles If-Match, If-Unmodified-Since, If-None-Match, If-Modified-Since, and If-Range requests.</source>
          <target state="translated">ServeContent は、提供された ReadSeeker のコンテンツを使用してリクエストに応答します。io.Copy よりも ServeContent の主な利点は、Range リクエストを適切に処理し、MIME タイプを設定し、If-Match、If-Unmodified-Since、If-None-Match、If-Modified-Since、および If-Range リクエストを処理することです。</target>
        </trans-unit>
        <trans-unit id="cfd658fe667ad1d964897018a5c4cf11bec05335" translate="yes" xml:space="preserve">
          <source>ServeFile replies to the request with the contents of the named file or directory.</source>
          <target state="translated">ServeFile は、指定されたファイルまたはディレクトリの内容でリクエストに応答します。</target>
        </trans-unit>
        <trans-unit id="049197d23952867737fe7bc77daa12a248c70057" translate="yes" xml:space="preserve">
          <source>ServeHTTP calls f(w, r).</source>
          <target state="translated">ServeHTTP は f(w,r)を呼び出します。</target>
        </trans-unit>
        <trans-unit id="4c4916bc850460672f4222f24dda17f824b214d6" translate="yes" xml:space="preserve">
          <source>ServeHTTP dispatches the request to the handler whose pattern most closely matches the request URL.</source>
          <target state="translated">ServeHTTP はリクエストの URL に最も近いパターンを持つハンドラにリクエストをディスパッチします。</target>
        </trans-unit>
        <trans-unit id="21deb32922a44f4fb534ed8afc10e377cb3ed92e" translate="yes" xml:space="preserve">
          <source>ServeHTTP implements an http.Handler that answers RPC requests.</source>
          <target state="translated">ServeHTTP は RPC リクエストに応答する http.Handler を実装しています。</target>
        </trans-unit>
        <trans-unit id="6b5f212880feffc9d4b20ece24bb964f1dfe9a0e" translate="yes" xml:space="preserve">
          <source>ServeHTTP should write reply headers and data to the ResponseWriter and then return. Returning signals that the request is finished; it is not valid to use the ResponseWriter or read from the Request.Body after or concurrently with the completion of the ServeHTTP call.</source>
          <target state="translated">ServeHTTP は応答ヘッダとデータを ResponseWriter に書き込んでから返すべきです。ServeHTTP 呼び出しの完了後やそれと同時に ResponseWriter を使用したり、Request.Body から読み込んだりすることはできません。</target>
        </trans-unit>
        <trans-unit id="643b76d4394a8e8ca4ec7165cbad824736ed0dab" translate="yes" xml:space="preserve">
          <source>ServeMux also takes care of sanitizing the URL request path and the Host header, stripping the port number and redirecting any request containing . or .. elements or repeated slashes to an equivalent, cleaner URL.</source>
          <target state="translated">ServeMux は URL リクエストパスとホストヘッダーのサニタイズも行い、ポート番号を除去し、.または.の要素や繰り返しのスラッシュを含むリクエストを同等のよりクリーンな URL にリダイレクトします。</target>
        </trans-unit>
        <trans-unit id="c2c623da8699103087cc62f3c47b54b0c6fbdef4" translate="yes" xml:space="preserve">
          <source>ServeMux is an HTTP request multiplexer. It matches the URL of each incoming request against a list of registered patterns and calls the handler for the pattern that most closely matches the URL.</source>
          <target state="translated">ServeMux は HTTP リクエストマルチプレクサです。これは、登録されたパターンのリストと各受信リクエストの URL をマッチさせ、URL に最も近いパターンのハンドラを呼び出します。</target>
        </trans-unit>
        <trans-unit id="d57d6d29bc00d69dcb5016e00c29678f29b25c20" translate="yes" xml:space="preserve">
          <source>ServeMux.Handle</source>
          <target state="translated">ServeMux.Handle</target>
        </trans-unit>
        <trans-unit id="a2ccb85e8b555a7018f6848932b3cf1638f89e04" translate="yes" xml:space="preserve">
          <source>ServeRequest is like ServeCodec but synchronously serves a single request. It does not close the codec upon completion.</source>
          <target state="translated">ServeRequest は ServeCodec と似ていますが、同期的に単一のリクエストを処理します。完了時にコーデックを閉じることはありません。</target>
        </trans-unit>
        <trans-unit id="914b527f3acbaa5705eeffe44b971ef90f12446b" translate="yes" xml:space="preserve">
          <source>ServeTLS accepts incoming HTTPS connections on the listener l, creating a new service goroutine for each. The service goroutines read requests and then call handler to reply to them.</source>
          <target state="translated">ServeTLS はリスナー l 上で着信 HTTPS 接続を受け入れ、それぞれに新しいサービスゴローチンを作成します。サービスゴローチンはリクエストを読み込み、ハンドラを呼び出してそれに応答します。</target>
        </trans-unit>
        <trans-unit id="0a96e454a3074cfb2a672bba732fc55cf3ace063" translate="yes" xml:space="preserve">
          <source>ServeTLS accepts incoming connections on the Listener l, creating a new service goroutine for each. The service goroutines perform TLS setup and then read requests, calling srv.Handler to reply to them.</source>
          <target state="translated">ServeTLSはリスナーl上で着信接続を受け付け、それぞれに新しいサービスゴローチンを作成します。サービスゴローチンはTLSの設定を行い、その後リクエストを読み込み、srv.Handlerを呼び出してそれに応答します。</target>
        </trans-unit>
        <trans-unit id="5d05c42df2acb99153f40488ff8b30bf621e7c31" translate="yes" xml:space="preserve">
          <source>ServeTLS always returns a non-nil error.</source>
          <target state="translated">ServeTLS は常に非 0 以外のエラーを返します。</target>
        </trans-unit>
        <trans-unit id="49b6a1abd7e8e016f95152133848467bef1659cf" translate="yes" xml:space="preserve">
          <source>ServeTLS always returns a non-nil error. After Shutdown or Close, the returned error is ErrServerClosed.</source>
          <target state="translated">ServeTLS は常に非 null のエラーを返します。シャットダウンまたはクローズ後、返されるエラーは ErrServerClosed です。</target>
        </trans-unit>
        <trans-unit id="cb0cb170d106f8e8d5af1e05bbdbd3a96a7de197" translate="yes" xml:space="preserve">
          <source>Server</source>
          <target state="translated">Server</target>
        </trans-unit>
        <trans-unit id="fd27359b7f3750869c6d376d504d1fa87f6d2a64" translate="yes" xml:space="preserve">
          <source>Server (HTTP2)</source>
          <target state="translated">サーバー(HTTP2)</target>
        </trans-unit>
        <trans-unit id="4ddf4403b77024142dd6473786b6571dc8b196f9" translate="yes" xml:space="preserve">
          <source>Server represents an RPC Server.</source>
          <target state="translated">Server は RPC Server を表します。</target>
        </trans-unit>
        <trans-unit id="313ac33490fd78320856fae075839a276bcab472" translate="yes" xml:space="preserve">
          <source>Server returns a new TLS server side connection using conn as the underlying transport. The configuration config must be non-nil and must include at least one certificate or else set GetCertificate.</source>
          <target state="translated">Server は、基礎となるトランスポートとして conn を使用した新しい TLS サーバサイド接続を返します。構成設定はnilではなく、少なくとも1つの証明書を含まなければなりません。</target>
        </trans-unit>
        <trans-unit id="e0b4e659e40eb8a8a1e289fa3271bf98ef6e2706" translate="yes" xml:space="preserve">
          <source>Server.Shutdown</source>
          <target state="translated">Server.Shutdown</target>
        </trans-unit>
        <trans-unit id="e8983457da1ab21a6c85c2a9507e94af92a8934d" translate="yes" xml:space="preserve">
          <source>ServerConn is an artifact of Go's early HTTP implementation. It is low-level, old, and unused by Go's current HTTP stack. We should have deleted it before Go 1.</source>
          <target state="translated">ServerConn は、Go の初期の HTTP 実装の成果物です。これは低レベルで古く、Goの現在のHTTPスタックでは使われていません。Go 1 の前に削除しておくべきでした。</target>
        </trans-unit>
        <trans-unit id="e48e77ca43f54c7c217d619efb9bd95f1a1f8aba" translate="yes" xml:space="preserve">
          <source>ServerError represents an error that has been returned from the remote side of the RPC connection.</source>
          <target state="translated">ServerError は、RPC 接続のリモート側から返されたエラーを表します。</target>
        </trans-unit>
        <trans-unit id="547b92e886182f3f71367607ff47558fb0fe8029" translate="yes" xml:space="preserve">
          <source>ServerInfo records information about an SMTP server.</source>
          <target state="translated">ServerInfo は、SMTP サーバーに関する情報を記録します。</target>
        </trans-unit>
        <trans-unit id="870594a7b5d015bba7a8d2c0875c56f2fce85f71" translate="yes" xml:space="preserve">
          <source>SessionResetter may be implemented by Conn to allow drivers to reset the session state associated with the connection and to signal a bad connection.</source>
          <target state="translated">ドライバが接続に関連付けられたセッションの状態をリセットし、接続不良を知らせるために、ConnによってSessionResetterが実装されているかもしれません。</target>
        </trans-unit>
        <trans-unit id="aab8e5c4d0aeae85893fd621bc37db1b1a73696a" translate="yes" xml:space="preserve">
          <source>Set assigns x to the value v. It panics if CanSet returns false. As in Go, x's value must be assignable to v's type.</source>
          <target state="translated">Set は x を値 v に代入します。Go と同様に、x の値は v の型に代入可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="1d2a8709f5b7f411cc9ba583a652581b21b6d185" translate="yes" xml:space="preserve">
          <source>Set is called once, in command line order, for each flag present. The flag package may call the String method with a zero-valued receiver, such as a nil pointer.</source>
          <target state="translated">Set は、存在する各フラグに対して、コマンドライン順に一度だけ呼び出されます。フラグパッケージは、nil ポインタのようなゼロ値のレシーバを使用して String メソッドを呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="e8fb40cfeae3d73e6b30e01495ac2c9fe7ff8cc2" translate="yes" xml:space="preserve">
          <source>Set sets the JavaScript property p of value v to ValueOf(x). It panics if v is not a JavaScript object.</source>
          <target state="translated">Set は、値 v の JavaScript プロパティ p を ValueOf(x)に設定します。vがJavaScriptオブジェクトでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="87f6096d8457ac4b04a70faa68ba0c62c9f61ecc" translate="yes" xml:space="preserve">
          <source>Set sets the header entries associated with key to the single element value. It replaces any existing values associated with key.</source>
          <target state="translated">Set は、key に関連付けられたヘッダエントリを単一の要素値に設定します。これは、キーに関連付けられた既存の値をすべて置き換えます。</target>
        </trans-unit>
        <trans-unit id="82fcf24728ab76cc9481c998a3f5414cead1eb36" translate="yes" xml:space="preserve">
          <source>Set sets the header entries associated with key to the single element value. It replaces any existing values associated with key. The key is case insensitive; it is canonicalized by textproto.CanonicalMIMEHeaderKey. To use non-canonical keys, assign to the map directly.</source>
          <target state="translated">Set は、key に関連付けられたヘッダエントリを単一の要素値に設定します。これは、キーに関連付けられている既存の値をすべて置き換えます。キーは大文字小文字を区別せず、textproto.CanonicalMIMEHeaderKeyによって正規化されます。非正規キーを使用するには、マップに直接代入します。</target>
        </trans-unit>
        <trans-unit id="ac88d8d813ac589b26e82c68ebe23a65cc8513a6" translate="yes" xml:space="preserve">
          <source>Set sets the key to value. It replaces any existing values.</source>
          <target state="translated">Set は、キーを値に設定します。既存の値をすべて置き換えます。</target>
        </trans-unit>
        <trans-unit id="03d2da815b81b3b89a818437487ee57f67fe7d66" translate="yes" xml:space="preserve">
          <source>Set sets the value of the named command-line flag.</source>
          <target state="translated">Set は、指定されたコマンドラインフラグの値を設定します。</target>
        </trans-unit>
        <trans-unit id="f73f9638b07619a017d2f6dac015fd0d243d8333" translate="yes" xml:space="preserve">
          <source>Set sets the value of the named flag.</source>
          <target state="translated">Set は、指定されたフラグの値を設定します。</target>
        </trans-unit>
        <trans-unit id="2c301753363dd5c13e85e87be14b65f72e0bdbb9" translate="yes" xml:space="preserve">
          <source>Set sets v to value.</source>
          <target state="translated">v を値に設定します。</target>
        </trans-unit>
        <trans-unit id="0e0649c67f5fc5e092366b50d2ec623dd85834a8" translate="yes" xml:space="preserve">
          <source>Set sets z to the (possibly rounded) value of x and returns z. If z's precision is 0, it is changed to the precision of x before setting z (and rounding will have no effect). Rounding is performed according to z's precision and rounding mode; and z's accuracy reports the result error relative to the exact (not rounded) result.</source>
          <target state="translated">z の精度が 0 の場合、z を設定する前に x の精度に変更されます(丸めは影響しません)。丸めは z の精度と丸めモードに応じて実行され、z の精度は正確な(丸められていない)結果に対する結果の誤差を報告します。</target>
        </trans-unit>
        <trans-unit id="74c097d8a8db6198a9f30d1da9cc40810faf97ea" translate="yes" xml:space="preserve">
          <source>Set sets z to x (by making a copy of x) and returns z.</source>
          <target state="translated">Set は z を x にセットし(x のコピーを作成することで)、z を返します。</target>
        </trans-unit>
        <trans-unit id="2de2c16a0340db2bee0118ccf9d1587fd704cd50" translate="yes" xml:space="preserve">
          <source>Set sets z to x and returns z.</source>
          <target state="translated">Set は z を x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="fd19264e05439f601808981687979a9cbd55329f" translate="yes" xml:space="preserve">
          <source>SetBasicAuth sets the request's Authorization header to use HTTP Basic Authentication with the provided username and password.</source>
          <target state="translated">SetBasicAuth は、リクエストの Authorization ヘッダを設定して、指定されたユーザ名とパスワードを使用して HTTP Basic Authentication を使用します。</target>
        </trans-unit>
        <trans-unit id="22bdae472d3db85cab5c57989c6be910d803a01e" translate="yes" xml:space="preserve">
          <source>SetBit sets z to x, with x's i'th bit set to b (0 or 1). That is, if b is 1 SetBit sets z = x | (1 &amp;lt;&amp;lt; i); if b is 0 SetBit sets z = x &amp;amp;^ (1 &amp;lt;&amp;lt; i). If b is not 0 or 1, SetBit will panic.</source>
          <target state="translated">SetBitは、zをxに設定し、xのi番目のビットをb（0または1）に設定します。つまり、bが1の場合、SetBitはz = x |を設定します。（1 &amp;lt;&amp;lt; i）; bが0の場合、SetBitはz = x＆^（1 &amp;lt;&amp;lt; i）を設定します。bが0または1でない場合、SetBitはパニックになります。</target>
        </trans-unit>
        <trans-unit id="feba31f1e1635889b9235c6993fbb340077ba325" translate="yes" xml:space="preserve">
          <source>SetBits provides raw (unchecked but fast) access to z by setting its value to abs, interpreted as a little-endian Word slice, and returning z. The result and abs share the same underlying array. SetBits is intended to support implementation of missing low-level Int functionality outside this package; it should be avoided otherwise.</source>
          <target state="translated">SetBits は、その値を abs に設定してリトルエンディアンの Word スライスとして解釈し、z を返すことで、z への生の (チェックはしていませんが高速な)アクセスを提供します。SetBits は、本パッケージ外の低レベル Int 機能の実装をサポートすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="f0a90ede61cca8ba0e26af9fe2c3c6480079bf80" translate="yes" xml:space="preserve">
          <source>SetBlockProfileRate controls the fraction of goroutine blocking events that are reported in the blocking profile. The profiler aims to sample an average of one blocking event per rate nanoseconds spent blocked.</source>
          <target state="translated">SetBlockProfileRate は、ブロッキング プロファイルで報告されるゴロチン ブロッキング イベントの割合を制御します。このプロファイラは、ブロックされた時間がナノ秒のレートごとに平均1つのブロッキングイベントをサンプリングすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="459d3a69d65d385fb3b3fbe398bb9c85138ddcc2" translate="yes" xml:space="preserve">
          <source>SetBool sets v's underlying value. It panics if v's Kind is not Bool or if CanSet() is false.</source>
          <target state="translated">SetBool は v の基本的な値を設定します。v の Kind が Bool でない場合や CanSet()が false の場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="7e2455227631da0419c37dea6613f51644e9e03d" translate="yes" xml:space="preserve">
          <source>SetBoundary must be called before any parts are created, may only contain certain ASCII characters, and must be non-empty and at most 70 bytes long.</source>
          <target state="translated">SetBoundaryは、パーツが作成される前に呼び出されなければならず、特定のASCII文字のみを含むことができ、空ではなく、最大70バイトの長さでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b06cf4ca1fda2091c2541de19f0b4a515ade4ba9" translate="yes" xml:space="preserve">
          <source>SetBoundary overrides the Writer's default randomly-generated boundary separator with an explicit value.</source>
          <target state="translated">SetBoundary は、ライターのデフォルトのランダムに生成された境界の区切り文字を明示的な値で上書きします。</target>
        </trans-unit>
        <trans-unit id="6106f2ae31464af3b2e7f9b63e64b76356750152" translate="yes" xml:space="preserve">
          <source>SetBytes interprets buf as the bytes of a big-endian unsigned integer, sets z to that value, and returns z.</source>
          <target state="translated">SetBytes は、buf をビッグエンディアンの符号なし整数のバイトとして解釈し、その値に z をセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="7a0583b12bc86b9434e36c34c4ce6e8b5c26ba75" translate="yes" xml:space="preserve">
          <source>SetBytes records the number of bytes processed in a single operation. If this is called, the benchmark will report ns/op and MB/s.</source>
          <target state="translated">SetBytesは、1回の操作で処理されたバイト数を記録します。これが呼ばれると、ベンチマークは ns/op と MB/s をレポートします。</target>
        </trans-unit>
        <trans-unit id="bba92654aa999e9512f4dfa6313cb2838144dfe3" translate="yes" xml:space="preserve">
          <source>SetBytes sets v's underlying value. It panics if v's underlying value is not a slice of bytes.</source>
          <target state="translated">SetBytes は v の基礎となる値を設定します。v の基礎となる値がバイトのスライスではない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="344d8ddf2a696d0cf0cc16a1825af1241c772a89" translate="yes" xml:space="preserve">
          <source>SetCPUProfileRate sets the CPU profiling rate to hz samples per second. If hz &amp;lt;= 0, SetCPUProfileRate turns off profiling. If the profiler is on, the rate cannot be changed without first turning it off.</source>
          <target state="translated">SetCPUProfileRateは、CPUプロファイリング率をhzサンプル/秒に設定します。hz &amp;lt;= 0の場合、SetCPUProfileRateはプロファイリングをオフにします。プロファイラーがオンの場合、最初にオフにしないとレートを変更できません。</target>
        </trans-unit>
        <trans-unit id="1afcde63337e23e05a9b84c1c7b85f57c0092cd7" translate="yes" xml:space="preserve">
          <source>SetCap sets v's capacity to n. It panics if v's Kind is not Slice or if n is smaller than the length or greater than the capacity of the slice.</source>
          <target state="translated">SetCap は v の容量を n に設定します。 v の Kind が Slice でない場合、または n がスライスの長さより小さいか容量より大きい場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="44731bc16b3d80516224c7c852f64732d07d62c1" translate="yes" xml:space="preserve">
          <source>SetCgoTraceback records three C functions to use to gather traceback information from C code and to convert that traceback information into symbolic information. These are used when printing stack traces for a program that uses cgo.</source>
          <target state="translated">SetCgoTracebackは、Cコードからトレースバック情報を収集し、そのトレースバック情報をシンボリック情報に変換するために使用する3つのC関数を記録しています。これらは、cgo を使用するプログラムのスタックトレースを印刷する際に使用します。</target>
        </trans-unit>
        <trans-unit id="348727b9cf484ab1b9762cea6ba0daa8dde8a933" translate="yes" xml:space="preserve">
          <source>SetCgoTraceback should be called only once, ideally from an init function.</source>
          <target state="translated">SetCgoTracebackは一度だけ、理想的にはinit関数から呼び出されるべきです。</target>
        </trans-unit>
        <trans-unit id="67fdfbbba9d56846727e0eb32ef8332c0bf20f53" translate="yes" xml:space="preserve">
          <source>SetComment sets the end-of-central-directory comment field. It can only be called before Close.</source>
          <target state="translated">SetComment は中央ディレクトリの終わりのコメントフィールドを設定します。これは Close の前にのみ呼び出すことができます。</target>
        </trans-unit>
        <trans-unit id="64f03250bccb0b87aeb45d79cb945d1dd0319cb9" translate="yes" xml:space="preserve">
          <source>SetComplex sets v's underlying value to x. It panics if v's Kind is not Complex64 or Complex128, or if CanSet() is false.</source>
          <target state="translated">SetComplex は、v の基本的な値を x に設定します。 v の種類が Complex64 または Complex128 でない場合、または CanSet()が false の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="b69ac591abf21b23b441af754a7112fe6fa046f7" translate="yes" xml:space="preserve">
          <source>SetConnMaxIdleTime sets the maximum amount of time a connection may be idle.</source>
          <target state="translated">SetConnMaxIdleTime は、接続がアイドル状態になる最大時間を設定します。</target>
        </trans-unit>
        <trans-unit id="ac6f79734771b4e3adca460b8931ae634206e20f" translate="yes" xml:space="preserve">
          <source>SetConnMaxLifetime sets the maximum amount of time a connection may be reused.</source>
          <target state="translated">SetConnMaxLifetime は、接続を再利用できる最大時間を設定します。</target>
        </trans-unit>
        <trans-unit id="cdfc398e60b71e846a0a56ba3b1860f275a8c713" translate="yes" xml:space="preserve">
          <source>SetCookie adds a Set-Cookie header to the provided ResponseWriter's headers. The provided cookie must have a valid Name. Invalid cookies may be silently dropped.</source>
          <target state="translated">SetCookie は、提供された ResponseWriter のヘッダに Set-Cookie ヘッダを追加します。提供されるクッキーは有効な名前を持つ必要があります。無効なクッキーは黙って削除されることがあります。</target>
        </trans-unit>
        <trans-unit id="b1b53737e17baa71a51a0e5ede6a121ccba30720" translate="yes" xml:space="preserve">
          <source>SetCookies implements the SetCookies method of the http.CookieJar interface.</source>
          <target state="translated">SetCookies は http.CookieJar インターフェースの SetCookies メソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="d3cec8d8761e8a9c75efaa51883455428c208775" translate="yes" xml:space="preserve">
          <source>SetDeadline implements the Conn SetDeadline method.</source>
          <target state="translated">SetDeadlineはConnのSetDeadlineメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="c0b50695667af085ed75f6ae0d7d496b50008cd3" translate="yes" xml:space="preserve">
          <source>SetDeadline sets the deadline associated with the listener. A zero time value disables the deadline.</source>
          <target state="translated">SetDeadlineは、リスナーに関連付けられた期限を設定します。時間値がゼロの場合は、期限を無効にします。</target>
        </trans-unit>
        <trans-unit id="a7b4723a8859169359d85b5290587d68a0fc3307" translate="yes" xml:space="preserve">
          <source>SetDeadline sets the read and write deadlines associated with the connection. A zero value for t means Read and Write will not time out. After a Write has timed out, the TLS state is corrupt and all future writes will return the same error.</source>
          <target state="translated">SetDeadline は、接続に関連する読み書きの期限を設定します。t の値が 0 の場合は、Read と Write がタイムアウトしないことを意味します。Write がタイムアウトした後、TLS の状態は破損しており、今後のすべての書き込みは同じエラーを返します。</target>
        </trans-unit>
        <trans-unit id="883b1167470e9a9bc17df175940ef7113ec71b15" translate="yes" xml:space="preserve">
          <source>SetDeadline sets the read and write deadlines for a File. It is equivalent to calling both SetReadDeadline and SetWriteDeadline.</source>
          <target state="translated">SetDeadlineは、ファイルの読み取り期限と書き込み期限を設定します。これは、SetReadDeadlineとSetWriteDeadlineの両方を呼び出すのと同じです。</target>
        </trans-unit>
        <trans-unit id="7aad8c47d1ea7eb52b60d62c5b63c9894a7f6a08" translate="yes" xml:space="preserve">
          <source>SetEscapeHTML specifies whether problematic HTML characters should be escaped inside JSON quoted strings. The default behavior is to escape &amp;amp;, &amp;lt;, and &amp;gt; to \u0026, \u003c, and \u003e to avoid certain safety problems that can arise when embedding JSON in HTML.</source>
          <target state="translated">SetEscapeHTMLは、問題のあるHTML文字をJSONで引用された文字列内でエスケープするかどうかを指定します。デフォルトの動作では、＆、&amp;lt;、および&amp;gt;を\ u0026、\ u003c、および\ u003eにエスケープして、HTMLにJSONを埋め込むときに発生する可能性がある特定の安全上の問題を回避します。</target>
        </trans-unit>
        <trans-unit id="dd27241a174aea4c1fb70802e55de9c35c7e1aca" translate="yes" xml:space="preserve">
          <source>SetFinalizer sets the finalizer associated with obj to the provided finalizer function. When the garbage collector finds an unreachable block with an associated finalizer, it clears the association and runs finalizer(obj) in a separate goroutine. This makes obj reachable again, but now without an associated finalizer. Assuming that SetFinalizer is not called again, the next time the garbage collector sees that obj is unreachable, it will free obj.</source>
          <target state="translated">SetFinalizer は、obj に関連付けられたファイナライザを提供されたファイナライザ関数にセットします。ガベージコレクタが、関連付けられたファイナライザを持つ到達不可能なブロックを見つけると、アソシエーションをクリアして、別のゴローチンで finalizer(obj)を実行します。これにより obj は再び到達可能になりますが、現在は関連付けられたファイナライザはありません。SetFinalizer が再度呼び出されないと仮定すると、次にガベージコレクタが obj が到達不可能であることを確認したとき、obj は解放されます。</target>
        </trans-unit>
        <trans-unit id="516de8a9b6e7300def0c0d80a14119cce09c9af1" translate="yes" xml:space="preserve">
          <source>SetFinalizer(obj, nil) clears any finalizer associated with obj.</source>
          <target state="translated">SetFinalizer(obj,nil)obj に関連付けられたファイナライザをクリアします。</target>
        </trans-unit>
        <trans-unit id="fce6aef209330cc8b12176816b79927fb4cacd60" translate="yes" xml:space="preserve">
          <source>SetFlags sets the output flags for the logger.</source>
          <target state="translated">SetFlags は、ロガーの出力フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="2389acee4b107177db39a04d2a50d69a80e07539" translate="yes" xml:space="preserve">
          <source>SetFlags sets the output flags for the logger. The flag bits are Ldate, Ltime, and so on.</source>
          <target state="translated">SetFlags は、ロガーの出力フラグを設定します。フラグビットはLdate、Ltimeなどです。</target>
        </trans-unit>
        <trans-unit id="dd0ec7930cc082a2a1ef8ed98443be56c5746d85" translate="yes" xml:space="preserve">
          <source>SetFlags sets the output flags for the standard logger.</source>
          <target state="translated">SetFlags は、標準ロガーの出力フラグを設定します。</target>
        </trans-unit>
        <trans-unit id="e112d20317b511d78e95cf42b818e10d239d1b7a" translate="yes" xml:space="preserve">
          <source>SetFlags sets the output flags for the standard logger. The flag bits are Ldate, Ltime, and so on.</source>
          <target state="translated">SetFlags は、標準ロガーの出力フラグを設定します。フラグビットはLdate、Ltimeなどです。</target>
        </trans-unit>
        <trans-unit id="a44e49f661219c769f20780167a6964483f17f7a" translate="yes" xml:space="preserve">
          <source>SetFloat sets v's underlying value to x. It panics if v's Kind is not Float32 or Float64, or if CanSet() is false.</source>
          <target state="translated">SetFloat は、v の基本値を x に設定します。 v の種類が Float32 または Float64 でない場合、または CanSet()が false の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="8e47d96a49d3af2841a8dc184d5134cb1a32de48" translate="yes" xml:space="preserve">
          <source>SetFloat64 sets z to exactly f and returns z. If f is not finite, SetFloat returns nil.</source>
          <target state="translated">SetFloat64は、zを正確にfにセットしてzを返します。fが有限でない場合、SetFloatはnilを返します。</target>
        </trans-unit>
        <trans-unit id="7d8e2534e02690c3fed1859413bf2f8f63c436f1" translate="yes" xml:space="preserve">
          <source>SetFloat64 sets z to the (possibly rounded) value of x and returns z. If z's precision is 0, it is changed to 53 (and rounding will have no effect). SetFloat64 panics with ErrNaN if x is a NaN.</source>
          <target state="translated">SetFloat64 は z を x の(四捨五入の可能性のある)値に設定して z を返します。 z の精度が 0 の場合は 53 に変更されます(四捨五入は影響しません)。SetFloat64は、xがNaNの場合はErrNaNでパニックになります。</target>
        </trans-unit>
        <trans-unit id="7b801568b0fa82e3d000c6cfdb98f7b328836a9b" translate="yes" xml:space="preserve">
          <source>SetFrac sets z to a/b and returns z.</source>
          <target state="translated">SetFrac は z を a/b に設定して z を返します。</target>
        </trans-unit>
        <trans-unit id="a9ac4380aa91d01b1e1308169f05c3eff9861e31" translate="yes" xml:space="preserve">
          <source>SetFrac sets z to a/b and returns z. If b == 0, SetFrac panics.</source>
          <target state="translated">SetFrac は z を a/b に設定して z を返します。</target>
        </trans-unit>
        <trans-unit id="45fde5eac415722d6b8394ea7547d400d1373021" translate="yes" xml:space="preserve">
          <source>SetFrac64 sets z to a/b and returns z.</source>
          <target state="translated">SetFrac64 は z を a/b に設定して z を返します。</target>
        </trans-unit>
        <trans-unit id="5993df56e43367a1c47f44460a83d56bdcf65739" translate="yes" xml:space="preserve">
          <source>SetFrac64 sets z to a/b and returns z. If b == 0, SetFrac64 panics.</source>
          <target state="translated">SetFrac64 は z を a/b に設定して z を返します。</target>
        </trans-unit>
        <trans-unit id="805636f93a7dd0b6aa2183e35b0d00ca6d7104e9" translate="yes" xml:space="preserve">
          <source>SetGCPercent sets the garbage collection target percentage: a collection is triggered when the ratio of freshly allocated data to live data remaining after the previous collection reaches this percentage. SetGCPercent returns the previous setting. The initial setting is the value of the GOGC environment variable at startup, or 100 if the variable is not set. A negative percentage disables garbage collection.</source>
          <target state="translated">SetGCPercent は、ガベージコレクションのターゲットパーセンテージを設定します。前回のコレクションの後に残っているライブデータに対する割り当てられたばかりのデータの比率がこのパーセンテージに達したときに、コレクションがトリガーされます。SetGCPercent は、前回の設定を返します。初期設定は、起動時の GOGC 環境変数の値、または変数が設定されていない場合は 100 です。負のパーセンテージはガベージコレクションを無効にします。</target>
        </trans-unit>
        <trans-unit id="906978195b1fb386902e36080f453c88d02f6211" translate="yes" xml:space="preserve">
          <source>SetGoroutineLabels sets the current goroutine's labels to match ctx. A new goroutine inherits the labels of the goroutine that created it. This is a lower-level API than Do, which should be used instead when possible.</source>
          <target state="translated">SetGoroutineLabelsは、現在のgoroutineのラベルをctxに一致するように設定します。新しいゴローチンは、それを作成したゴローチンのラベルを継承します。これはDoよりも低レベルのAPIであり、可能な場合には代わりに使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="7c95fdd46823686f50f0d15060d185e4b4e5d563" translate="yes" xml:space="preserve">
          <source>SetImports sets the list of explicitly imported packages to list. It is the caller's responsibility to make sure list elements are unique.</source>
          <target state="translated">SetImports は、明示的にインポートされたパッケージのリストを設定します。リストの要素が一意であることを確認するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="e7fb2cb55e4274d490452e6757d30cb84eb70855" translate="yes" xml:space="preserve">
          <source>SetIndent instructs the encoder to format each subsequent encoded value as if indented by the package-level function Indent(dst, src, prefix, indent). Calling SetIndent(&quot;&quot;, &quot;&quot;) disables indentation.</source>
          <target state="translated">SetIndent は、パッケージレベルの関数 Indent(dst,src,prefix,indent)によってインデントされているかのようにエンコードされた後続の各値をフォーマットするようにエンコーダに指示します。SetIndent(&quot;&quot;,&quot;&quot;)を呼び出すと、インデントを無効にします。</target>
        </trans-unit>
        <trans-unit id="17d73d2c7105e3ec880ec1de340daf4f290af178" translate="yes" xml:space="preserve">
          <source>SetIndex sets the JavaScript index i of value v to ValueOf(x). It panics if v is not a JavaScript object.</source>
          <target state="translated">SetIndexは、値vのJavaScriptインデックスiをValueOf(x)に設定します。vがJavaScriptオブジェクトでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="cea11721fc2a69428fc01f2bd7212d126248c97a" translate="yes" xml:space="preserve">
          <source>SetInf sets z to the infinite Float -Inf if signbit is set, or +Inf if signbit is not set, and returns z. The precision of z is unchanged and the result is always Exact.</source>
          <target state="translated">SetInf は、signbit が設定されている場合は無限大の Float -Inf、設定されていない場合は +Inf に z を設定し、z を返します。</target>
        </trans-unit>
        <trans-unit id="7fbe79d67709b54bb947c5fb56d1678d22a06e68" translate="yes" xml:space="preserve">
          <source>SetInt sets v's underlying value to x. It panics if v's Kind is not Int, Int8, Int16, Int32, or Int64, or if CanSet() is false.</source>
          <target state="translated">v の種類が Int、Int8、Int16、Int32、または Int64 でない場合、または CanSet()が false の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="e9791f172aed7c20562244430ee2933689079ec7" translate="yes" xml:space="preserve">
          <source>SetInt sets z to the (possibly rounded) value of x and returns z. If z's precision is 0, it is changed to the larger of x.BitLen() or 64 (and rounding will have no effect).</source>
          <target state="translated">SetInt は z を x の (丸められた可能性のある)値に設定し、z を返します。 z の精度が 0 の場合は、x.BitLen()または 64 のどちらか大きい方に変更されます (丸めは影響しません)。</target>
        </trans-unit>
        <trans-unit id="512491a3910b089e941ff0967a1c4600d38512e1" translate="yes" xml:space="preserve">
          <source>SetInt sets z to x (by making a copy of x) and returns z.</source>
          <target state="translated">SetInt は z を x にセットして (x のコピーを作成して)z を返します。</target>
        </trans-unit>
        <trans-unit id="e98bca88644a6b411de0d879f43c3dc3a73ef347" translate="yes" xml:space="preserve">
          <source>SetInt64 sets z to the (possibly rounded) value of x and returns z. If z's precision is 0, it is changed to 64 (and rounding will have no effect).</source>
          <target state="translated">SetInt64 は z を x の (丸められた可能性のある)値に設定し、z を返します。 z の精度が 0 の場合は 64 に変更されます (丸めは影響しません)。</target>
        </trans-unit>
        <trans-unit id="b8bc149266ba57391034d803e65399926af1a382" translate="yes" xml:space="preserve">
          <source>SetInt64 sets z to x and returns z.</source>
          <target state="translated">SetInt64 は z を x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="d8ce7465b1093a7258c6cd344217beee671aa978" translate="yes" xml:space="preserve">
          <source>SetKeepAlive sets whether the operating system should send keep-alive messages on the connection.</source>
          <target state="translated">SetKeepAlive は、オペレーティングシステムが接続時にキープアライブメッセージを送信するかどうかを設定します。</target>
        </trans-unit>
        <trans-unit id="89bf3d4dd275ff44ab7379e669050fce6f5a7eee" translate="yes" xml:space="preserve">
          <source>SetKeepAlivePeriod sets period between keep-alives.</source>
          <target state="translated">SetKeepAlivePeriod は、キープアライブの間隔を設定します。</target>
        </trans-unit>
        <trans-unit id="582102a7fa3d8dd186ee22dfa213a701e54c1846" translate="yes" xml:space="preserve">
          <source>SetKeepAlivesEnabled controls whether HTTP keep-alives are enabled. By default, keep-alives are always enabled. Only very resource-constrained environments or servers in the process of shutting down should disable them.</source>
          <target state="translated">SetKeepAlivesEnabled は、HTTP キープアライブを有効にするかどうかを制御します。デフォルトでは、キープアライブは常に有効になっています。非常にリソースが制限されている環境やシャットダウン中のサーバだけが、キープアライブを無効にしなければなりません。</target>
        </trans-unit>
        <trans-unit id="26dfe6afebdd675610dd8f1d4858b29cc7ee92db" translate="yes" xml:space="preserve">
          <source>SetLen sets v's length to n. It panics if v's Kind is not Slice or if n is negative or greater than the capacity of the slice.</source>
          <target state="translated">SetLen は v の長さを n に設定します。 v の Kind が Slice でない場合、または n が負の値か Slice の容量より大きい場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="549c2b676df9b698394503e0fb62c18e8fa20e0b" translate="yes" xml:space="preserve">
          <source>SetLines sets the line offsets for a file and reports whether it succeeded. The line offsets are the offsets of the first character of each line; for instance for the content &quot;ab\nc\n&quot; the line offsets are {0, 3}. An empty file has an empty line offset table. Each line offset must be larger than the offset for the previous line and smaller than the file size; otherwise SetLines fails and returns false. Callers must not mutate the provided slice after SetLines returns.</source>
          <target state="translated">SetLinesは、ファイルの行オフセットを設定し、成功したかどうかを報告します。行オフセットは、各行の最初の文字のオフセットです。例えば、コンテンツ &quot;ab\ncn &quot;の場合、行オフセットは{0,3}です。空のファイルには空の行オフセットテーブルがあります。各行オフセットは、前の行のオフセットよりも大きく、ファイルサイズよりも小さくなければなりません。呼び出し元は、SetLines が返ってきた後に、提供されたスライスを変異させてはいけません。</target>
        </trans-unit>
        <trans-unit id="d21966bc8423cbdfca9062e709a1e1bfe2b23f9c" translate="yes" xml:space="preserve">
          <source>SetLinesForContent sets the line offsets for the given file content. It ignores position-altering //line comments.</source>
          <target state="translated">SetLinesForContent は、指定されたファイルの内容の行オフセットを設定します。これは、位置を変更する //行コメントを無視します。</target>
        </trans-unit>
        <trans-unit id="7ead5ff3e458c012090db0e3e46dd956293c59f9" translate="yes" xml:space="preserve">
          <source>SetLinger sets the behavior of Close on a connection which still has data waiting to be sent or to be acknowledged.</source>
          <target state="translated">SetLinger は、送信待ちまたは承認待ちのデータが残っている接続の Close の動作を設定します。</target>
        </trans-unit>
        <trans-unit id="be9cec1a054bdf6dae13515b712cb92bca8f03d8" translate="yes" xml:space="preserve">
          <source>SetMantExp sets z to mant &amp;times; 2**exp and returns z. The result z has the same precision and rounding mode as mant. SetMantExp is an inverse of MantExp but does not require 0.5 &amp;lt;= |mant| &amp;lt; 1.0. Specifically:</source>
          <target state="translated">SetMantExpはzをmant&amp;times;2 ** expに設定し、zを返します。結果のzの精度と丸めモードはmantと同じです。SetMantExpはMantExpの逆ですが、0.5 &amp;lt;= | mant |を必要としません &amp;lt;1.0。具体的には：</target>
        </trans-unit>
        <trans-unit id="e756f252cafbddbad755f1c06583ad4489564d92" translate="yes" xml:space="preserve">
          <source>SetMapIndex sets the element associated with key in the map v to elem. It panics if v's Kind is not Map. If elem is the zero Value, SetMapIndex deletes the key from the map. Otherwise if v holds a nil map, SetMapIndex will panic. As in Go, key's elem must be assignable to the map's key type, and elem's value must be assignable to the map's elem type.</source>
          <target state="translated">SetMapIndex は、マップ v のキーに関連付けられた要素を elem に設定します。v の Kind が Map でない場合はパニックになります。elem が 0 の場合は、マップからキーを削除します。そうでない場合、v が 0 のマップを保持している場合、SetMapIndex はパニックを起こします。Go と同様に、キーの elem はマップのキー タイプに代入可能でなければならず、elem の値はマップの elem タイプに代入可能でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b83dfa89acb5e3c977158b5fc2760de63b71e48b" translate="yes" xml:space="preserve">
          <source>SetMaxIdleConns sets the maximum number of connections in the idle connection pool.</source>
          <target state="translated">SetMaxIdleConns は、アイドル接続プールの最大接続数を設定します。</target>
        </trans-unit>
        <trans-unit id="aa3863aa142a9c48791c290f00a7c4c3d76f3b6e" translate="yes" xml:space="preserve">
          <source>SetMaxOpenConns sets the maximum number of open connections to the database.</source>
          <target state="translated">SetMaxOpenConnsは、データベースへのオープン接続の最大数を設定します。</target>
        </trans-unit>
        <trans-unit id="f71d21e95f096f232e72fff30f80b920b1e3f9f5" translate="yes" xml:space="preserve">
          <source>SetMaxStack is useful mainly for limiting the damage done by goroutines that enter an infinite recursion. It only limits future stack growth.</source>
          <target state="translated">SetMaxStackは、主に無限再帰に入るgoroutineによるダメージを制限するのに便利です。これは、将来のスタックの増加を制限するだけです。</target>
        </trans-unit>
        <trans-unit id="eeacbe78a8fd0d4396f1b6456e34f5857612c565" translate="yes" xml:space="preserve">
          <source>SetMaxStack sets the maximum amount of memory that can be used by a single goroutine stack. If any goroutine exceeds this limit while growing its stack, the program crashes. SetMaxStack returns the previous setting. The initial setting is 1 GB on 64-bit systems, 250 MB on 32-bit systems.</source>
          <target state="translated">SetMaxStackは、1つのgoroutineスタックで使用できる最大メモリ量を設定します。スタックを成長させている間にいずれかの goroutine がこの制限を超えると、プログラムはクラッシュします。SetMaxStackは以前の設定を返します。初期設定は64ビットシステムでは1GB、32ビットシステムでは250MBです。</target>
        </trans-unit>
        <trans-unit id="67aff5f59d34d3ecd519adad914c8c6423eaf752" translate="yes" xml:space="preserve">
          <source>SetMaxThreads is useful mainly for limiting the damage done by programs that create an unbounded number of threads. The idea is to take down the program before it takes down the operating system.</source>
          <target state="translated">SetMaxThreadsは、主に無制限の数のスレッドを作成するプログラムが与えるダメージを制限するのに便利です。これは、オペレーティングシステムをダウンさせる前にプログラムをダウンさせることを目的としています。</target>
        </trans-unit>
        <trans-unit id="c6d8bc8cae003fe5d78cf6cda31fbae67e36c482" translate="yes" xml:space="preserve">
          <source>SetMaxThreads sets the maximum number of operating system threads that the Go program can use. If it attempts to use more than this many, the program crashes. SetMaxThreads returns the previous setting. The initial setting is 10,000 threads.</source>
          <target state="translated">SetMaxThreads は、Go プログラムが使用できるオペレーティング システム スレッドの最大数を設定します。これ以上の数を使用しようとすると、プログラムはクラッシュします。SetMaxThreads は、以前の設定に戻ります。初期設定は 10,000 スレッドです。</target>
        </trans-unit>
        <trans-unit id="806ff185f3a93cc6a21f24b12259c49de358388c" translate="yes" xml:space="preserve">
          <source>SetModTime sets the Modified, ModifiedTime, and ModifiedDate fields to the given time in UTC.</source>
          <target state="translated">SetModTime は、Modified、ModifiedTime、および ModifiedDate フィールドを UTC で指定された時間に設定します。</target>
        </trans-unit>
        <trans-unit id="e9c592771061ffaaa3d588fb3aae3da84d0635b8" translate="yes" xml:space="preserve">
          <source>SetMode changes the permission and mode bits for the FileHeader.</source>
          <target state="translated">SetModeは、FileHeaderのパーミッションとモードのビットを変更します。</target>
        </trans-unit>
        <trans-unit id="de45da11e316c622a3816956315a15e8817585f9" translate="yes" xml:space="preserve">
          <source>SetMode sets z's rounding mode to mode and returns an exact z. z remains unchanged otherwise. z.SetMode(z.Mode()) is a cheap way to set z's accuracy to Exact.</source>
          <target state="translated">z.SetMode(z.Mode())は、z の丸めモードをモードに設定し、正確な z を返します。</target>
        </trans-unit>
        <trans-unit id="b01a08220867d2b1a3c66f3bf6f8b7ca7ea5c1ae" translate="yes" xml:space="preserve">
          <source>SetMutexProfileFraction controls the fraction of mutex contention events that are reported in the mutex profile. On average 1/rate events are reported. The previous rate is returned.</source>
          <target state="translated">SetMutexProfileFraction は、ミューテックスプロファイルに報告されるミューテックス競合イベントの割合を制御します。平均して1/rateのイベントが報告されます。前のレートが返されます。</target>
        </trans-unit>
        <trans-unit id="8c38b4a404d96b417f171861cd9ebaba18b51eaf" translate="yes" xml:space="preserve">
          <source>SetName sets the package name.</source>
          <target state="translated">SetName はパッケージ名を設定します。</target>
        </trans-unit>
        <trans-unit id="d31306f3f7eb161aa0c0b28fdb6eed5363c589c3" translate="yes" xml:space="preserve">
          <source>SetNoDelay controls whether the operating system should delay packet transmission in hopes of sending fewer packets (Nagle's algorithm). The default is true (no delay), meaning that data is sent as soon as possible after a Write.</source>
          <target state="translated">SetNoDelayは、オペレーティングシステムがより少ないパケットを送信することを期待してパケット送信を遅延させるかどうかを制御します(Nagleのアルゴリズム)。デフォルトは true (遅延なし)で、Write の後、できるだけ早くデータが送信されることを意味します。</target>
        </trans-unit>
        <trans-unit id="27a3c03ba54fb2a44f36a6c425cfa58520c56752" translate="yes" xml:space="preserve">
          <source>SetOffset sets the offset of the beginning of the zip data within the underlying writer. It should be used when the zip data is appended to an existing file, such as a binary executable. It must be called before any data is written.</source>
          <target state="translated">SetOffset は、基礎となるライタ内の zip データの先頭のオフセットを設定します。これは、zip データがバイナリ実行ファイルなどの既存のファイルに追加されている場合に使用します。これは、データが書き込まれる前に呼び出す必要があります。</target>
        </trans-unit>
        <trans-unit id="004613f6cff6f004aabdb462fd19757cc3df0edb" translate="yes" xml:space="preserve">
          <source>SetOutput sets the destination for usage and error messages. If output is nil, os.Stderr is used.</source>
          <target state="translated">SetOutput は、使用状況やエラーメッセージの出力先を設定します。出力がnilの場合は、os.Stderrが使用されます。</target>
        </trans-unit>
        <trans-unit id="36faf63cafa162e1ef49476325f422ab20f856dd" translate="yes" xml:space="preserve">
          <source>SetOutput sets the output destination for the logger.</source>
          <target state="translated">SetOutput は、ロガーの出力先を設定します。</target>
        </trans-unit>
        <trans-unit id="76988d10d7783ed1525981a82207c054e24adba8" translate="yes" xml:space="preserve">
          <source>SetOutput sets the output destination for the standard logger.</source>
          <target state="translated">SetOutput 標準ロガーの出力先を設定します。</target>
        </trans-unit>
        <trans-unit id="2547ce0f12468d65a113d53c2cfbf0ddbb6dc9bb" translate="yes" xml:space="preserve">
          <source>SetPanicOnFault controls the runtime's behavior when a program faults at an unexpected (non-nil) address. Such faults are typically caused by bugs such as runtime memory corruption, so the default response is to crash the program. Programs working with memory-mapped files or unsafe manipulation of memory may cause faults at non-nil addresses in less dramatic situations; SetPanicOnFault allows such programs to request that the runtime trigger only a panic, not a crash. SetPanicOnFault applies only to the current goroutine. It returns the previous setting.</source>
          <target state="translated">SetPanicOnFaultは、予期しない(nil以外の)アドレスでプログラムがフォールトした場合のランタイムの動作を制御します。このようなフォールトは通常、ランタイムのメモリ破損などのバグによって引き起こされるため、デフォルトの応答はプログラムをクラッシュさせることになります。メモリマップされたファイルを扱うプログラムや、安全でないメモリ操作を行うプログラムでは、それほど劇的ではない状況でも、非nilアドレスでフォールトが発生することがあります。SetPanicOnFaultは、現在のgoroutineにのみ適用されます。それは以前の設定を返します。</target>
        </trans-unit>
        <trans-unit id="72fac8e6222bd170971f1f697af6f11d0715e763" translate="yes" xml:space="preserve">
          <source>SetParallelism sets the number of goroutines used by RunParallel to p*GOMAXPROCS. There is usually no need to call SetParallelism for CPU-bound benchmarks. If p is less than 1, this call will have no effect.</source>
          <target state="translated">SetParallelismは、RunParallelが使用するゴローチンの数をp*GOMAXPROCSに設定します。通常、CPUに依存するベンチマークではSetParallelismを呼び出す必要はありません。pが1より小さい場合、この呼び出しは何の効果もありません。</target>
        </trans-unit>
        <trans-unit id="8bcdfe56d7b7abb5a2feda191bae07f8cec5d4b8" translate="yes" xml:space="preserve">
          <source>SetPointer sets the unsafe.Pointer value v to x. It panics if v's Kind is not UnsafePointer.</source>
          <target state="translated">SetPointer は unsafe.Pointer の値 v を x に設定します。</target>
        </trans-unit>
        <trans-unit id="59bd457f6414829faae9decbaede734f70a9845c" translate="yes" xml:space="preserve">
          <source>SetPos sets the position. NewIdentifier is a public method so we can't modify its signature. Chained for convenience. TODO: fix one day?</source>
          <target state="translated">SetPosは位置を設定します。NewIdentifierはパブリックメソッドなので、シグネチャを変更することはできません。便利なように鎖で繋いでいます。TODO:いつか修正?</target>
        </trans-unit>
        <trans-unit id="d6d5511f09814008767ff9cfe0f77abca174ef5c" translate="yes" xml:space="preserve">
          <source>SetPrec sets z's precision to prec and returns the (possibly) rounded value of z. Rounding occurs according to z's rounding mode if the mantissa cannot be represented in prec bits without loss of precision. SetPrec(0) maps all finite values to &amp;plusmn;0; infinite values remain unchanged. If prec &amp;gt; MaxPrec, it is set to MaxPrec.</source>
          <target state="translated">SetPrecはzの精度をprecに設定し、zの（場合によっては）丸められた値を返します。仮数が精度を失うことなくprecビットで表現できない場合、zの丸めモードに従って丸めが行われます。SetPrec（0）は、すべての有限値を&amp;plusmn;0にマップします。無限値は変更されません。prec&amp;gt; MaxPrecの場合、MaxPrecに設定されます。</target>
        </trans-unit>
        <trans-unit id="d2d0c71771db3b5022796766d08921a2f8600461" translate="yes" xml:space="preserve">
          <source>SetPrefix sets the output prefix for the logger.</source>
          <target state="translated">SetPrefix は、ロガーの出力プレフィックスを設定します。</target>
        </trans-unit>
        <trans-unit id="6bbad9fae1ec236892af0fd5032d525acd1599d4" translate="yes" xml:space="preserve">
          <source>SetPrefix sets the output prefix for the standard logger.</source>
          <target state="translated">SetPrefix は、標準ロガーの出力プレフィックスを設定します。</target>
        </trans-unit>
        <trans-unit id="ad88a7e02a294ade703b1e817a40a72d93a7117f" translate="yes" xml:space="preserve">
          <source>SetRat sets z to the (possibly rounded) value of x and returns z. If z's precision is 0, it is changed to the largest of a.BitLen(), b.BitLen(), or 64; with x = a/b.</source>
          <target state="translated">z の精度が 0 の場合は、a.BitLen()、b.BitLen()、または 64 のいずれかの最大値に変更されます。</target>
        </trans-unit>
        <trans-unit id="6d4064f9d933c367ae2ed00ed675edff7a545a0e" translate="yes" xml:space="preserve">
          <source>SetReadBuffer sets the size of the operating system's receive buffer associated with the connection.</source>
          <target state="translated">SetReadBuffer は、接続に関連付けられたオペレーティングシステムの受信バッファのサイズを設定します。</target>
        </trans-unit>
        <trans-unit id="ccd6113cf88478a21eac0a31572f18b8edd4bad3" translate="yes" xml:space="preserve">
          <source>SetReadDeadline implements the Conn SetReadDeadline method.</source>
          <target state="translated">SetReadDeadlineはConnのSetReadDeadlineメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="73112eb9e955bd18073b2a5d03cd0dc0569c7e77" translate="yes" xml:space="preserve">
          <source>SetReadDeadline sets the deadline for future Read calls and any currently-blocked Read call. A zero value for t means Read will not time out. Not all files support setting deadlines; see SetDeadline.</source>
          <target state="translated">SetReadDeadline は、今後の Read 呼び出しと、現在ブロックされているすべての Read 呼び出しの期限を設定します。t の値がゼロの場合は、Read がタイムアウトしないことを意味します。すべてのファイルが期限の設定をサポートしているわけではありません。</target>
        </trans-unit>
        <trans-unit id="fed46b093271b3a5ec6430ef1d4235557caf69e8" translate="yes" xml:space="preserve">
          <source>SetReadDeadline sets the read deadline on the underlying connection. A zero value for t means Read will not time out.</source>
          <target state="translated">SetReadDeadline は、基礎となる接続の読み取り期限を設定します。tの値が0の場合は、リードがタイムアウトしないことを意味します。</target>
        </trans-unit>
        <trans-unit id="a671d8f530db9b20355013a1524aa0514ba3175c" translate="yes" xml:space="preserve">
          <source>SetSeed sets h to use seed, which must have been returned by MakeSeed or by another Hash's Seed method. Two Hash objects with the same seed behave identically. Two Hash objects with different seeds will very likely behave differently. Any bytes added to h before this call will be discarded.</source>
          <target state="translated">SetSeed は h がシードを使用するように設定します。シードは MakeSeed または別の Hash の Seed メソッドによって返されたものでなければなりません。同じシードを持つ 2 つの Hash オブジェクトは同じように動作します。異なるシードを持つ2つのHashオブジェクトは、異なる動作をする可能性が高いです。この呼び出しの前に h に追加されたバイトはすべて破棄されます。</target>
        </trans-unit>
        <trans-unit id="9e522bee4b13d693f1283de4766e87f7104cee24" translate="yes" xml:space="preserve">
          <source>SetSessionTicketKeys updates the session ticket keys for a server.</source>
          <target state="translated">SetSessionTicketKeysは、サーバーのセッションチケットキーを更新します。</target>
        </trans-unit>
        <trans-unit id="c85e891cbcac943a2a1c3092ec5cc6bdcd4ebc48" translate="yes" xml:space="preserve">
          <source>SetSessionTicketKeys updates the session ticket keys for a server. The first key will be used when creating new tickets, while all keys can be used for decrypting tickets. It is safe to call this function while the server is running in order to rotate the session ticket keys. The function will panic if keys is empty.</source>
          <target state="translated">SetSessionTicketKeys はサーバーのセッションチケットのキーを更新します。最初のキーは新しいチケットを作成する際に使用され、すべてのキーはチケットの復号化に使用することができます。セッションチケットのキーを回転させるために、サーバが動作している間にこの関数を呼び出すのが安全です。keys が空の場合、この関数はパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="8a945e442cacd2fa72eff38e8c9f6290d8ddbda2" translate="yes" xml:space="preserve">
          <source>SetString sets v's underlying value to x. It panics if v's Kind is not String or if CanSet() is false.</source>
          <target state="translated">v の種類が String でない場合、または CanSet()が false の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="e889ea521a067b34dab32ac1ec6528fffbf097cc" translate="yes" xml:space="preserve">
          <source>SetString sets z to the value of s and returns z and a boolean indicating success. s can be given as a (possibly signed) fraction &quot;a/b&quot;, or as a floating-point number optionally followed by an exponent. If a fraction is provided, both the dividend and the divisor may be a decimal integer or independently use a prefix of &amp;ldquo;0b&amp;rdquo;, &amp;ldquo;0&amp;rdquo; or &amp;ldquo;0o&amp;rdquo;, or &amp;ldquo;0x&amp;rdquo; (or their upper-case variants) to denote a binary, octal, or hexadecimal integer, respectively. The divisor may not be signed. If a floating-point number is provided, it may be in decimal form or use any of the same prefixes as above but for &amp;ldquo;0&amp;rdquo; to denote a non-decimal mantissa. A leading &amp;ldquo;0&amp;rdquo; is considered a decimal leading 0; it does not indicate octal representation in this case. An optional base-10 &amp;ldquo;e&amp;rdquo; or base-2 &amp;ldquo;p&amp;rdquo; (or their upper-case variants) exponent may be provided as well, except for hexadecimal floats which only accept an (optional) &amp;ldquo;p&amp;rdquo; exponent (because an &amp;ldquo;e&amp;rdquo; or &amp;ldquo;E&amp;rdquo; cannot be distinguished from a mantissa digit). The entire string, not just a prefix, must be valid for success. If the operation failed, the value of z is undefined but the returned value is nil.</source>
          <target state="translated">SetStringはzをsの値に設定し、zと成功を示すブール値を返します。 sは（おそらく符号付きの）分数 &quot;a / b&quot;として、またはオプションで指数が後に続く浮動小数点数として指定できます。分数が指定されている場合、被除数と除数は両方とも10進整数であるか、独立して「0b」、「0」、「0o」、または「0x」（またはそれらの大文字の変形）のプレフィックスを使用して、それぞれ、2進、8進、または16進の整数。除数は署名されていない可能性があります。浮動小数点数が指定されている場合、それは10進形式であるか、上記と同じ接頭辞のいずれかを使用できますが、「0」は非10進数の仮数を示します。先頭の「0」は、10進数の先頭の0と見なされます。この場合、8進数表現は示しません。オプションのbase-10&amp;ldquo; e&amp;rdquo;またはbase-2&amp;ldquo; p​​&amp;rdquo;（またはそれらの大文字の変形）指数も提供できます。（オプションの）「p」指数のみを受け入れる16進浮動小数点数を除きます（「e」または「E」は仮数と区別できないため）。接頭辞だけでなく、文字列全体が成功するには有効である必要があります。操作が失敗した場合、zの値は未定義ですが、戻り値はnilです。</target>
        </trans-unit>
        <trans-unit id="efbb232582df792d37509713c9b27b267d546a58" translate="yes" xml:space="preserve">
          <source>SetString sets z to the value of s and returns z and a boolean indicating success. s must be a floating-point number of the same format as accepted by Parse, with base argument 0. The entire string (not just a prefix) must be valid for success. If the operation failed, the value of z is undefined but the returned value is nil.</source>
          <target state="translated">SetString は z を s の値に設定し、成功を示す z と boolean を返します。 s は Parse で受け入れられるのと同じ形式の浮動小数点数で、基底引数 0 でなければなりません。 成功するためには、文字列全体 (接頭辞だけでなく)が有効でなければなりません。操作が失敗した場合、z の値は未定義ですが、返される値は nil です。</target>
        </trans-unit>
        <trans-unit id="63e18202e9d9aea4fa241b783984e3dc354de835" translate="yes" xml:space="preserve">
          <source>SetString sets z to the value of s, interpreted in the given base, and returns z and a boolean indicating success. The entire string (not just a prefix) must be valid for success. If SetString fails, the value of z is undefined but the returned value is nil.</source>
          <target state="translated">SetString は、指定されたベースで解釈された s の値に z を設定し、成功を示す z とブーリアンを返します。成功するには、文字列全体 (接頭辞だけでなく)が有効でなければなりません。SetString が失敗した場合、z の値は未定義ですが、返される値は nil です。</target>
        </trans-unit>
        <trans-unit id="38dbbaefe7e4a783f76cb46c7ca92c9417de8b66" translate="yes" xml:space="preserve">
          <source>SetTraceback sets the amount of detail printed by the runtime in the traceback it prints before exiting due to an unrecovered panic or an internal runtime error. The level argument takes the same values as the GOTRACEBACK environment variable. For example, SetTraceback(&quot;all&quot;) ensure that the program prints all goroutines when it crashes. See the package runtime documentation for details. If SetTraceback is called with a level lower than that of the environment variable, the call is ignored.</source>
          <target state="translated">SetTracebackは、回復していないパニックや内部ランタイムエラーのために終了する前にランタイムが印刷するトレースバックの詳細量を設定します。level 引数は、環境変数 GOTRACEBACK と同じ値を取ります。例えば、SetTraceback(&quot;all&quot;)は、プログラムがクラッシュしたときにすべての goroutines を表示することを保証します。詳細はパッケージのランタイムドキュメントを参照してください。環境変数のレベルよりも低いレベルで SetTraceback が呼び出された場合、その呼び出しは無視されます。</target>
        </trans-unit>
        <trans-unit id="2fefbf475ce2643229d0cfdbfe83dace76ec0745" translate="yes" xml:space="preserve">
          <source>SetTree sets the parent tree for the node. NewIdentifier is a public method so we can't modify its signature. Chained for convenience. TODO: fix one day?</source>
          <target state="translated">SetTreeはノードの親ツリーを設定します。NewIdentifierはパブリックメソッドなので、シグネチャを変更することはできません。便利なようにチェーン化しています。TODO:いつか修正?</target>
        </trans-unit>
        <trans-unit id="c67115f13df235c71277ca4e4cc4cdf9edef929f" translate="yes" xml:space="preserve">
          <source>SetUint sets v's underlying value to x. It panics if v's Kind is not Uint, Uintptr, Uint8, Uint16, Uint32, or Uint64, or if CanSet() is false.</source>
          <target state="translated">v の種類が Uint、Uintptr、Uint8、Uint16、Uint32、Uint64 でない場合、または CanSet()が false の場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="a0d44c574be3e0563cede63a8860a8c3c9c0ea08" translate="yes" xml:space="preserve">
          <source>SetUint64 sets z to the (possibly rounded) value of x and returns z. If z's precision is 0, it is changed to 64 (and rounding will have no effect).</source>
          <target state="translated">SetUint64は、zを(丸められた可能性のある)xの値に設定し、zを返します。zの精度が0の場合、64に変更されます(丸めは影響しません)。</target>
        </trans-unit>
        <trans-unit id="0241edc0d224ec2868d9f80a9b9550102e93ffe8" translate="yes" xml:space="preserve">
          <source>SetUint64 sets z to x and returns z.</source>
          <target state="translated">SetUint64 は z を x にセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="d938745882d5a8df95a9972a3a9bbbee174d3301" translate="yes" xml:space="preserve">
          <source>SetUnderlying sets the underlying type and marks t as complete.</source>
          <target state="translated">SetUnderlying は、基礎となる型を設定し、t を完全なものとしてマークします。</target>
        </trans-unit>
        <trans-unit id="6743e47079d741cfccfdce2738e02e6efcdc6dc1" translate="yes" xml:space="preserve">
          <source>SetUnlinkOnClose sets whether the underlying socket file should be removed from the file system when the listener is closed.</source>
          <target state="translated">SetUnlinkOnClose は、リスナーが閉じられたときに、基礎となるソケットファイルをファイルシステムから削除するかどうかを設定します。</target>
        </trans-unit>
        <trans-unit id="3a7d70c082a7c060c7f1583bead1a8cb995d2129" translate="yes" xml:space="preserve">
          <source>SetWriteBuffer sets the size of the operating system's transmit buffer associated with the connection.</source>
          <target state="translated">SetWriteBuffer は、接続に関連付けられたオペレーティングシステムの送信バッファのサイズを設定します。</target>
        </trans-unit>
        <trans-unit id="ce72366b97c1e87523bdc3b4986d2a5ed5efea78" translate="yes" xml:space="preserve">
          <source>SetWriteDeadline implements the Conn SetWriteDeadline method.</source>
          <target state="translated">SetWriteDeadlineはConnのSetWriteDeadlineメソッドを実装しています。</target>
        </trans-unit>
        <trans-unit id="94da0323d7e4b44c2641176fd8ed70132d7e560c" translate="yes" xml:space="preserve">
          <source>SetWriteDeadline sets the deadline for any future Write calls and any currently-blocked Write call. Even if Write times out, it may return n &amp;gt; 0, indicating that some of the data was successfully written. A zero value for t means Write will not time out. Not all files support setting deadlines; see SetDeadline.</source>
          <target state="translated">SetWriteDeadlineは、今後の書き込み呼び出しと現在ブロックされている書き込み呼び出しの期限を設定します。書き込みがタイムアウトになった場合でも、n&amp;gt; 0を返し、一部のデータが正常に書き込まれたことを示します。tのゼロ値は、書き込みがタイムアウトしないことを意味します。すべてのファイルが期限の設定をサポートしているわけではありません。SetDeadlineを参照してください。</target>
        </trans-unit>
        <trans-unit id="e383d386b9651b389cbae33232566bb47ae2af13" translate="yes" xml:space="preserve">
          <source>SetWriteDeadline sets the write deadline on the underlying connection. A zero value for t means Write will not time out. After a Write has timed out, the TLS state is corrupt and all future writes will return the same error.</source>
          <target state="translated">SetWriteDeadline は、基礎となる接続の書き込み期限を設定します。t の値がゼロの場合は、Write がタイムアウトしないことを意味します。Write がタイムアウトした後、TLS の状態は破損しており、今後のすべての書き込みは同じエラーを返します。</target>
        </trans-unit>
        <trans-unit id="308be1977132bdbc81c0f89a2767dd32da76c702" translate="yes" xml:space="preserve">
          <source>Setenv sets the value of the environment variable named by the key. It returns an error, if any.</source>
          <target state="translated">Setenvは、キーで指定された環境変数の値を設定します。エラーが発生した場合は、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="509f2c6d0467d5d83c9526f638c505af46797567" translate="yes" xml:space="preserve">
          <source>Setters, numeric operations and predicates are represented as methods of the form:</source>
          <target state="translated">セッター、数値演算、および述語は、形式のメソッドとして表現されます。</target>
        </trans-unit>
        <trans-unit id="8b84f9f04ca185b4b399c76c8fc7c01ef4f564e3" translate="yes" xml:space="preserve">
          <source>Shift returns the result of the shift expression x op s with op == token.SHL or token.SHR (&amp;lt;&amp;lt; or &amp;gt;&amp;gt;). x must be an Int or an Unknown. If x is Unknown, the result is x.</source>
          <target state="translated">Shiftは、シフト式x op sの結果をop == token.SHLまたはtoken.SHR（&amp;lt;&amp;lt;または&amp;gt;&amp;gt;）で返します。xはIntまたはUnknownでなければなりません。xが不明の場合、結果はxです。</target>
        </trans-unit>
        <trans-unit id="fde43f2305da307b56958af17198c21e47808653" translate="yes" xml:space="preserve">
          <source>Short reports whether the -test.short flag is set.</source>
          <target state="translated">shortは、-test.shortフラグが設定されているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="5b772b7bfd0a43273fb7c5f49a6c16d837261f35" translate="yes" xml:space="preserve">
          <source>Shuffle</source>
          <target state="translated">Shuffle</target>
        </trans-unit>
        <trans-unit id="79a2c163367d393e517ed372229f5d310534a9d9" translate="yes" xml:space="preserve">
          <source>Shuffle (SlicesInUnison)</source>
          <target state="translated">シャッフル(SlicesInUnison</target>
        </trans-unit>
        <trans-unit id="732d9d1b7fa9ce160a254c0eec34ec29c54e1b79" translate="yes" xml:space="preserve">
          <source>Shuffle pseudo-randomizes the order of elements using the default Source. n is the number of elements. Shuffle panics if n &amp;lt; 0. swap swaps the elements with indexes i and j.</source>
          <target state="translated">デフォルトのソースを使用して、要素の順序を疑似ランダム化してシャッフルします。nは要素の数です。n &amp;lt;0の場合、パニックをシャッフルします。swapは、インデックスiおよびjの要素を交換します。</target>
        </trans-unit>
        <trans-unit id="6d3cd15e0fd6a7a5b1756b9af5c51872006c475b" translate="yes" xml:space="preserve">
          <source>Shuffle pseudo-randomizes the order of elements. n is the number of elements. Shuffle panics if n &amp;lt; 0. swap swaps the elements with indexes i and j.</source>
          <target state="translated">シャッフルは、要素の順序を擬似ランダム化します。nは要素の数です。n &amp;lt;0の場合、パニックをシャッフルします。swapは、インデックスiおよびjの要素を交換します。</target>
        </trans-unit>
        <trans-unit id="8e0c7b7cdf248102d52e5f44dcd474d4d82c359e" translate="yes" xml:space="preserve">
          <source>Shutdown does not attempt to close nor wait for hijacked connections such as WebSockets. The caller of Shutdown should separately notify such long-lived connections of shutdown and wait for them to close, if desired. See RegisterOnShutdown for a way to register shutdown notification functions.</source>
          <target state="translated">Shutdownは、WebSocketsのようなハイジャックされた接続を閉じようともせず、待つこともしません。Shutdownの呼び出し元は、必要に応じて、そのような長生きした接続に個別にシャットダウンを通知して、それらが閉じるのを待つべきです。シャットダウン通知関数を登録する方法についてはRegisterOnShutdownを参照してください。</target>
        </trans-unit>
        <trans-unit id="38dcf86ad76a9ad474561d4239201b3f812c81b9" translate="yes" xml:space="preserve">
          <source>Shutdown gracefully shuts down the server without interrupting any active connections. Shutdown works by first closing all open listeners, then closing all idle connections, and then waiting indefinitely for connections to return to idle and then shut down. If the provided context expires before the shutdown is complete, Shutdown returns the context's error, otherwise it returns any error returned from closing the Server's underlying Listener(s).</source>
          <target state="translated">シャットダウンは、アクティブな接続を中断することなく、優雅にサーバをシャットダウンします。シャットダウンは、最初に開いているリスナーをすべて閉じ、次にアイドル状態の接続をすべて閉じ、接続がアイドル状態に戻るのを無期限に待ってからシャットダウンすることで動作します。シャットダウンが完了する前に提供されたコンテキストが期限切れになった場合、Shutdown はコンテキストのエラーを返し、そうでない場合はサーバーの基礎となるリスナーを閉じたことで返されたエラーを返します。</target>
        </trans-unit>
        <trans-unit id="8b3d8d665a765918b70a3f5f0378d51df00b92dd" translate="yes" xml:space="preserve">
          <source>Sign</source>
          <target state="translated">Sign</target>
        </trans-unit>
        <trans-unit id="4dc2181e93ae969f803429357fe579abd176b4b4" translate="yes" xml:space="preserve">
          <source>Sign returns -1, 0, or 1 depending on whether x &amp;lt; 0, x == 0, or x &amp;gt; 0; x must be numeric or Unknown. For complex values x, the sign is 0 if x == 0, otherwise it is != 0. If x is Unknown, the result is 1.</source>
          <target state="translated">Signは、x &amp;lt;0、x == 0、またはx&amp;gt; 0かどうかに応じて、-1、0、または1を返します。xは数値または不明でなければなりません。複素数値xの場合、x == 0の場合、符号は0です。それ以外の場合、！= 0です。xが不明の場合、結果は1です。</target>
        </trans-unit>
        <trans-unit id="b52aac6f1207124113d4a678eb49a1b5cf712f7a" translate="yes" xml:space="preserve">
          <source>Sign returns:</source>
          <target state="translated">サインが返ってくる。</target>
        </trans-unit>
        <trans-unit id="6589591f2f20ffb39adee81e8ba10edbe7dacc2e" translate="yes" xml:space="preserve">
          <source>Sign signs a hash (which should be the result of hashing a larger message) using the private key, priv. If the hash is longer than the bit-length of the private key's curve order, the hash will be truncated to that length. It returns the signature as a pair of integers. The security of the private key depends on the entropy of rand.</source>
          <target state="translated">Signは秘密鍵privを用いてハッシュ(より大きなメッセージをハッシュした結果であるべきもの)に署名します。ハッシュが秘密鍵の曲線順のビット長よりも長い場合、ハッシュはその長さに切り捨てられます。これは署名を整数のペアとして返します。秘密鍵の安全性は rand のエントロピーに依存します。</target>
        </trans-unit>
        <trans-unit id="311212195f2e7e53bfbdc1974b3a767400f6e3ff" translate="yes" xml:space="preserve">
          <source>Sign signs an arbitrary length hash (which should be the result of hashing a larger message) using the private key, priv. It returns the signature as a pair of integers. The security of the private key depends on the entropy of rand.</source>
          <target state="translated">Signは、秘密鍵privを用いて任意の長さのハッシュ(より大きなメッセージをハッシュした結果でなければなりません)に署名します。署名は整数のペアとして返されます。秘密鍵の安全性は rand のエントロピーに依存します。</target>
        </trans-unit>
        <trans-unit id="c12807935684d6d5a767b5418d3f2f1d36802c6e" translate="yes" xml:space="preserve">
          <source>Sign signs digest with priv, reading randomness from rand. If opts is a *PSSOptions then the PSS algorithm will be used, otherwise PKCS #1 v1.5 will be used. digest must be the result of hashing the input message using opts.HashFunc().</source>
          <target state="translated">randからランダム性を読み取ってprivでダイジェストを符号化します。opts が *PSSOptions の場合は PSS アルゴリズムが使用され、そうでない場合は PKCS #1 v1.5 が使用されます。</target>
        </trans-unit>
        <trans-unit id="cd714756dfd32673e7a5fdf4e7a7d3f4c1f0476c" translate="yes" xml:space="preserve">
          <source>Sign signs digest with priv, reading randomness from rand. If opts is a *PSSOptions then the PSS algorithm will be used, otherwise PKCS#1 v1.5 will be used.</source>
          <target state="translated">署名はprivでダイジェストし、ランダム性をrandから読み込みます。opts が *PSSOptions の場合は PSS アルゴリズムが使用され、そうでない場合は PKCS#1 v1.5 が使用されます。</target>
        </trans-unit>
        <trans-unit id="725a324c83bff5484063c9fb79ed06b1a642a7c9" translate="yes" xml:space="preserve">
          <source>Sign signs digest with priv, reading randomness from rand. The opts argument is not currently used but, in keeping with the crypto.Signer interface, should be the hash function used to digest the message.</source>
          <target state="translated">署名はprivでダイジェストし、ランダム性をrandから読み取る。opts引数は現在使用されていませんが、 crypto.Signerインターフェイスに合わせて、メッセージのダイジェストに使用されるハッシュ関数にすべきです。</target>
        </trans-unit>
        <trans-unit id="cb5cc6baa9959aae2928064eeabac37026d1fdd3" translate="yes" xml:space="preserve">
          <source>Sign signs the given message with priv. Ed25519 performs two passes over messages to be signed and therefore cannot handle pre-hashed messages. Thus opts.HashFunc() must return zero to indicate the message hasn't been hashed. This can be achieved by passing crypto.Hash(0) as the value for opts.</source>
          <target state="translated">Signは、与えられたメッセージにprivで署名します。Ed25519は署名されるメッセージに対して2回のパスを実行するため、事前にハッシュ化されたメッセージを扱うことができません。したがって、 opts.HashFunc()は、メッセージがハッシュされていないことを示すためにゼロを返す必要があります。これは、crypto.Hash(0)を opts.HashFunc()の値として渡すことで実現できる。</target>
        </trans-unit>
        <trans-unit id="8d9bc9097d624689f3abd051873c0827e390ddd8" translate="yes" xml:space="preserve">
          <source>Sign signs the message with privateKey and returns a signature. It will panic if len(privateKey) is not PrivateKeySize.</source>
          <target state="translated">SignはメッセージにprivateKeyで署名し、署名を返します。len(privateKey)がPrivateKeySizeでない場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="374ef04419fa455579e2922ef305611877eeff57" translate="yes" xml:space="preserve">
          <source>SignASN1 signs a hash (which should be the result of hashing a larger message) using the private key, priv. If the hash is longer than the bit-length of the private key's curve order, the hash will be truncated to that length. It returns the ASN.1 encoded signature. The security of the private key depends on the entropy of rand.</source>
          <target state="translated">SignASN1 は秘密鍵 priv を用いてハッシュ(より大きなメッセージをハッシュした結果でなければならない)に署名します。ハッシュが秘密鍵の曲線順のビット長よりも長い場合、ハッシュはその長さに切り捨てられます。これはASN.1で符号化された署名を返します。秘密鍵の安全性は、randのエントロピーに依存します。</target>
        </trans-unit>
        <trans-unit id="73058d5661f51255d2d044bad5e22d1dbeb1615f" translate="yes" xml:space="preserve">
          <source>SignPKCS1v15</source>
          <target state="translated">SignPKCS1v15</target>
        </trans-unit>
        <trans-unit id="c0fa762cfc4f83cc1ae6eb824e2e7d2490239baf" translate="yes" xml:space="preserve">
          <source>SignPKCS1v15 calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN from RSA PKCS #1 v1.5. Note that hashed must be the result of hashing the input message using the given hash function. If hash is zero, hashed is signed directly. This isn't advisable except for interoperability.</source>
          <target state="translated">SignPKCS1v15はRSA PKCS #1 v1.5からRSASSA-PKCS1-V1_5-SIGNを用いてハッシュ化された署名を計算します。ハッシュは、与えられたハッシュ関数を使用して入力メッセージをハッシュした結果でなければならないことに注意してください。ハッシュが0の場合、ハッシュは直接署名されます。これは相互運用性以外では推奨されません。</target>
        </trans-unit>
        <trans-unit id="76a7f1a903c9bd79d05146e331e0afbf510916e4" translate="yes" xml:space="preserve">
          <source>SignPKCS1v15 calculates the signature of hashed using RSASSA-PKCS1-V1_5-SIGN from RSA PKCS#1 v1.5. Note that hashed must be the result of hashing the input message using the given hash function. If hash is zero, hashed is signed directly. This isn't advisable except for interoperability.</source>
          <target state="translated">SignPKCS1v15はRSA PKCS#1 v1.5からRSASSA-PKCS1-V1_5-SIGNを用いてハッシュ化された署名を計算します。ハッシュは、与えられたハッシュ関数を使用して入力メッセージをハッシュした結果でなければならないことに注意してください。ハッシュがゼロの場合、ハッシュは直接署名されます。これは相互運用性以外では推奨されません。</target>
        </trans-unit>
        <trans-unit id="a8dc8c6fdf07694c004d0ad09c1805b1db05045f" translate="yes" xml:space="preserve">
          <source>SignPSS calculates the signature of digest using PSS.</source>
          <target state="translated">SignPSSは、PSSを用いてダイジェストの署名を計算します。</target>
        </trans-unit>
        <trans-unit id="4dc02ffb85c827150cad191cf75b74252c850c11" translate="yes" xml:space="preserve">
          <source>SignPSS calculates the signature of hashed using RSASSA-PSS [1]. Note that hashed must be the result of hashing the input message using the given hash function. The opts argument may be nil, in which case sensible defaults are used.</source>
          <target state="translated">SignPSSはRSASSA-PSS [1]を用いてハッシュ化された署名を計算します。hashedは与えられたハッシュ関数を使って入力メッセージをハッシュした結果でなければならないことに注意してください。opts引数はnilかもしれませんが、その場合は賢明なデフォルトが使用されます。</target>
        </trans-unit>
        <trans-unit id="456ecb37c3fc5855213ab977448f009637d487e9" translate="yes" xml:space="preserve">
          <source>Signal sends a signal to the Process. Sending Interrupt on Windows is not implemented.</source>
          <target state="translated">シグナルはプロセスに信号を送ります。Windows上での割り込み送信は実装されていません。</target>
        </trans-unit>
        <trans-unit id="113054b65e3d478c55ce8ee9e7136eef91adbb6a" translate="yes" xml:space="preserve">
          <source>Signal wakes one goroutine waiting on c, if there is any.</source>
          <target state="translated">シグナルはcを待っているゴロチンを1つ起こします。</target>
        </trans-unit>
        <trans-unit id="2346a18ea3002ff04eca3a130c7f40e65c56f0c9" translate="yes" xml:space="preserve">
          <source>Signals</source>
          <target state="translated">Signals</target>
        </trans-unit>
        <trans-unit id="9a761dffcc7f2df5b531ae01c6e9c1d10354c3aa" translate="yes" xml:space="preserve">
          <source>Signals are primarily used on Unix-like systems. For the use of this package on Windows and Plan 9, see below.</source>
          <target state="translated">シグナルは主にUnix系のシステムで使用されます。Windows と Plan 9 でのこのパッケージの使用については、以下を参照してください。</target>
        </trans-unit>
        <trans-unit id="be08fe4d5181cd9a339446858cf8e98d5d370ad9" translate="yes" xml:space="preserve">
          <source>SignatureScheme identifies a signature algorithm supported by TLS. See RFC 8446, Section 4.2.3.</source>
          <target state="translated">SignatureScheme は、TLS がサポートする署名アルゴリズムを識別する。RFC 8446 のセクション 4.2.3 を参照のこと。</target>
        </trans-unit>
        <trans-unit id="72364e765319ca6184606bdfcbeaf4bae3efe083" translate="yes" xml:space="preserve">
          <source>Signbit reports whether x is negative or negative zero.</source>
          <target state="translated">サインビットは、xが負または負のゼロであるかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="06f0622cc55ee3b1ba8ef5291dd67f388a633bbf" translate="yes" xml:space="preserve">
          <source>Signed integers may be received into any signed integer variable: int, int16, etc.; unsigned integers may be received into any unsigned integer variable; and floating point values may be received into any floating point variable. However, the destination variable must be able to represent the value or the decode operation will fail.</source>
          <target state="translated">符号付き整数は、任意の符号付き整数変数:int、int16 などに受け取ることができ、符号なし整数は任意の符号なし整数変数に受け取ることができ、浮動小数点値は任意の浮動小数点変数に受け取ることができます。ただし、宛先変数が値を表すことができなければ、デコード操作は失敗します。</target>
        </trans-unit>
        <trans-unit id="ae900b849a1bf306b492bb9034be4bb3bc19b163" translate="yes" xml:space="preserve">
          <source>Signer is an interface for an opaque private key that can be used for signing operations. For example, an RSA key kept in a hardware module.</source>
          <target state="translated">Signer は、署名操作に使用できる不透明な秘密鍵のインターフェイスです。例えば、ハードウェアモジュールに保存されている RSA 鍵などです。</target>
        </trans-unit>
        <trans-unit id="38f4531ed194c331b7b23a6d3502ef6906c2f74a" translate="yes" xml:space="preserve">
          <source>SignerOpts contains options for signing with a Signer.</source>
          <target state="translated">SignerOpts には、署名者との署名のためのオプションが含まれています。</target>
        </trans-unit>
        <trans-unit id="8332f3ce4c218d0bde5211f46f41f270a3be8e0c" translate="yes" xml:space="preserve">
          <source>Similarly to attributes with namespaces, attributes with a &quot;data-&quot; prefix are treated as if they had no &quot;data-&quot; prefix. So given</source>
          <target state="translated">名前空間を持つ属性と同様に、&quot;data-&quot;接頭辞を持つ属性は、&quot;data-&quot;接頭辞を持たない属性と同じように扱われます。そのため、与えられた</target>
        </trans-unit>
        <trans-unit id="966d50452c96c3fa11f316a011f44cf776d22a17" translate="yes" xml:space="preserve">
          <source>SimpleFold</source>
          <target state="translated">SimpleFold</target>
        </trans-unit>
        <trans-unit id="8bf97e6e8efa121264307227008493331dea504d" translate="yes" xml:space="preserve">
          <source>SimpleFold iterates over Unicode code points equivalent under the Unicode-defined simple case folding. Among the code points equivalent to rune (including rune itself), SimpleFold returns the smallest rune &amp;gt; r if one exists, or else the smallest rune &amp;gt;= 0. If r is not a valid Unicode code point, SimpleFold(r) returns r.</source>
          <target state="translated">SimpleFoldは、Unicodeで定義された単純なケースフォールディングで同等のUnicodeコードポイントを反復処理します。ルーン（ルーン自体を含む）と同等のコードポイントの中で、SimpleFoldは最小のルーン&amp;gt; rが存在する場合はそれを返し、そうでない場合は最小のルーン&amp;gt; = 0を返します。rが有効なUnicodeコードポイントでない場合、SimpleFold（r）はrを返します。</target>
        </trans-unit>
        <trans-unit id="b27adf68197f928a987f44243ba3dcfcda229444" translate="yes" xml:space="preserve">
          <source>Simplify returns a regexp equivalent to re but without counted repetitions and with various other simplifications, such as rewriting /(?:a+)+/ to /a+/. The resulting regexp will execute correctly but its string representation will not produce the same parse tree, because capturing parentheses may have been duplicated or removed. For example, the simplified form for /(x){1,2}/ is /(x)(x)?/ but both parentheses capture as $1. The returned regexp may share structure with or be the original.</source>
          <target state="translated">Simplify は re と同等の正規表現を返しますが、カウントされた繰り返しはなく、/(?:a+)+/を /a+/に書き換えるなど、さまざまな簡略化が施されています。結果として得られる正規表現は正しく実行されますが、その文字列表現は同じパースツリーを生成しません。例えば、/(x){1,2}/の簡略化された形式は /(x)(x)?/となりますが、両方の括弧は $1 としてキャプチャされます。 返される正規表現は、構造を共有している場合もあれば、オリジナルの場合もあります。</target>
        </trans-unit>
        <trans-unit id="1baaf4288309b641acaf8ca1164546c4028a35a7" translate="yes" xml:space="preserve">
          <source>Sin</source>
          <target state="translated">Sin</target>
        </trans-unit>
        <trans-unit id="60fef841296be9ebf7de4bce978c61ea99668ac2" translate="yes" xml:space="preserve">
          <source>Sin returns the sine of the radian argument x.</source>
          <target state="translated">Sinは、ラジアンの引数xのサインを返します。</target>
        </trans-unit>
        <trans-unit id="2d7deeeba21d579c050c2a33e2db608612f16ced" translate="yes" xml:space="preserve">
          <source>Sin returns the sine of x.</source>
          <target state="translated">Sinは、xのサインを返します。</target>
        </trans-unit>
        <trans-unit id="032d0e9143af25fee0463a47b08e83403e61fbe1" translate="yes" xml:space="preserve">
          <source>Since os.FileInfo's Name method only returns the base name of the file it describes, it may be necessary to modify Header.Name to provide the full path name of the file.</source>
          <target state="translated">os.FileInfo の Name メソッドは、記述するファイルのベース名を返すだけなので、Header.Name を修正してファイルのフルパス名を提供する必要があるかもしれません。</target>
        </trans-unit>
        <trans-unit id="b67e676cda98cae04b5ce1604ab8e9db4fbb0636" translate="yes" xml:space="preserve">
          <source>Since returns the time elapsed since t. It is shorthand for time.Now().Sub(t).</source>
          <target state="translated">Since は t からの経過時間を返します。</target>
        </trans-unit>
        <trans-unit id="4aada6d4483746dcd60dcf298d86136630d9cd91" translate="yes" xml:space="preserve">
          <source>Sincos</source>
          <target state="translated">Sincos</target>
        </trans-unit>
        <trans-unit id="602eea7f1523e01bb1b745122d12becc2cb4a99c" translate="yes" xml:space="preserve">
          <source>Sincos returns Sin(x), Cos(x).</source>
          <target state="translated">SincosはSin(x)、Cos(x)を返します。</target>
        </trans-unit>
        <trans-unit id="bc9965f20c0e26db0501d3424c1430869ed3389f" translate="yes" xml:space="preserve">
          <source>Single characters:</source>
          <target state="translated">一文字。</target>
        </trans-unit>
        <trans-unit id="e5d65368cdcef8d43d81f8b1167171bcc9e4d453" translate="yes" xml:space="preserve">
          <source>Sinh</source>
          <target state="translated">Sinh</target>
        </trans-unit>
        <trans-unit id="f35b8f7d99b41bcac88dc066f89ded4a25031767" translate="yes" xml:space="preserve">
          <source>Sinh returns the hyperbolic sine of x.</source>
          <target state="translated">Sinhはxの双曲線サインを返します。</target>
        </trans-unit>
        <trans-unit id="b82e9be74971571cd41c1c21253c9f4cb1846e90" translate="yes" xml:space="preserve">
          <source>Size returns h's hash value size, 8 bytes.</source>
          <target state="translated">Size は h のハッシュ値のサイズを 8 バイトで返します。</target>
        </trans-unit>
        <trans-unit id="9d9b9bb8ffbb101e667ceeb0c6df4b2d00eca63e" translate="yes" xml:space="preserve">
          <source>Size returns how many bytes Write would generate to encode the value v, which must be a fixed-size value or a slice of fixed-size values, or a pointer to such data. If v is neither of these, Size returns -1.</source>
          <target state="translated">Sizeは、値vをエンコードするためにWriteが生成するバイト数を返します。vがこれらのどちらでもない場合、Sizeは-1を返します。</target>
        </trans-unit>
        <trans-unit id="07f99b9766acbd34a40dce6ae52199b1df82e565" translate="yes" xml:space="preserve">
          <source>Size returns r's width and height.</source>
          <target state="translated">Sizeはrの幅と高さを返します。</target>
        </trans-unit>
        <trans-unit id="08603885cb8f4581e6caff80c9587384030d6fb2" translate="yes" xml:space="preserve">
          <source>Size returns the length, in bytes, of a digest resulting from the given hash function. It doesn't require that the hash function in question be linked into the program.</source>
          <target state="translated">Sizeは、与えられたハッシュ関数から得られるダイジェストの長さをバイト単位で返します。問題のハッシュ関数がプログラムにリンクされている必要はありません。</target>
        </trans-unit>
        <trans-unit id="e25ab5f340eca2d7c5b223c77e15ee75cde585ef" translate="yes" xml:space="preserve">
          <source>Size returns the modulus size in bytes. Raw signatures and ciphertexts for or by this public key will have the same size.</source>
          <target state="translated">Size は、モジュラスのサイズをバイト単位で返します。この公開鍵に対する、またはこの公開鍵による生の署名と暗号文は同じサイズになります。</target>
        </trans-unit>
        <trans-unit id="e670e1a5854b86fb3e790eec7802ceb4072867ce" translate="yes" xml:space="preserve">
          <source>Size returns the number of leading ones and total bits in the mask. If the mask is not in the canonical form--ones followed by zeros--then Size returns 0, 0.</source>
          <target state="translated">Size は、マスク内の先頭の 1 の数と合計ビット数を返します。マスクが正準形式ではない場合 (1 の後にゼロが続く)、Size は 0,0 を返します。</target>
        </trans-unit>
        <trans-unit id="e50e49a71b6948817b0c75a5802d436dcfbbd3d4" translate="yes" xml:space="preserve">
          <source>Size returns the original length of the underlying byte slice. Size is the number of bytes available for reading via ReadAt. The returned value is always the same and is not affected by calls to any other method.</source>
          <target state="translated">Size は、基礎となるバイトスライスの元の長さを返します。Size は、ReadAt を介して読み込めるバイト数です。返される値は常に同じで、他のメソッドを呼び出しても影響を受けません。</target>
        </trans-unit>
        <trans-unit id="20090954ae229cf40fcf85ad90018bc0a50c14a6" translate="yes" xml:space="preserve">
          <source>Size returns the original length of the underlying string. Size is the number of bytes available for reading via ReadAt. The returned value is always the same and is not affected by calls to any other method.</source>
          <target state="translated">Size は、元の文字列の長さを返します。Size は、ReadAt を介して読み込めるバイト数です。返される値は常に同じで、他のメソッドを呼び出しても影響を受けません。</target>
        </trans-unit>
        <trans-unit id="5a0d609fe825a666e200f379bb9b290e727375b4" translate="yes" xml:space="preserve">
          <source>Size returns the size of file f as registered with AddFile.</source>
          <target state="translated">Sizeは、AddFileで登録したファイルfのサイズを返します。</target>
        </trans-unit>
        <trans-unit id="5716d3e163196d9c451e87a39bff7287017defa9" translate="yes" xml:space="preserve">
          <source>Size returns the size of the section in bytes.</source>
          <target state="translated">Size は、セクションのサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="33687cc2c12d65398be28bdfb49be5c9af20dea4" translate="yes" xml:space="preserve">
          <source>Size returns the size of the underlying buffer in bytes.</source>
          <target state="translated">Size は、基礎となるバッファのサイズをバイト単位で返します。</target>
        </trans-unit>
        <trans-unit id="ad326c620cb25aa3f6f88fe50584af3756cb7137" translate="yes" xml:space="preserve">
          <source>Sizeof takes an expression x of any type and returns the size in bytes of a hypothetical variable v as if v was declared via var v = x. The size does not include any memory possibly referenced by x. For instance, if x is a slice, Sizeof returns the size of the slice descriptor, not the size of the memory referenced by the slice. The return value of Sizeof is a Go constant.</source>
          <target state="translated">Sizeof は任意の型の式 x を受け取り、仮想的な変数 v のサイズをバイト単位で返します。Sizeofの戻り値はGo定数です。</target>
        </trans-unit>
        <trans-unit id="b19905df7d36355c364fc4d465be7029063705c6" translate="yes" xml:space="preserve">
          <source>Sizes defines the sizing functions for package unsafe.</source>
          <target state="translated">サイズは、安全でないパッケージのためのサイジング機能を定義しています。</target>
        </trans-unit>
        <trans-unit id="58588dd4d69fcc2bebbb32cb3311a65197ef6d80" translate="yes" xml:space="preserve">
          <source>SizesFor returns the Sizes used by a compiler for an architecture. The result is nil if a compiler/architecture pair is not known.</source>
          <target state="translated">SizesForは、コンパイラがアーキテクチャーに使用するSサイズを返します。コンパイラとアーキテクチャのペアがわからない場合、結果はnilです。</target>
        </trans-unit>
        <trans-unit id="f2bf90f6b1f23cb7aca2de8f99806d297f79d8f6" translate="yes" xml:space="preserve">
          <source>Skip is equivalent to Log followed by SkipNow.</source>
          <target state="translated">スキップはLogに続いてSkipNowに相当します。</target>
        </trans-unit>
        <trans-unit id="16403f951a4dfc8a1c243a0f8eb301e145aaacf2" translate="yes" xml:space="preserve">
          <source>Skip reads tokens until it has consumed the end element matching the most recent start element already consumed. It recurs if it encounters a start element, so it can be used to skip nested structures. It returns nil if it finds an end element matching the start element; otherwise it returns an error describing the problem.</source>
          <target state="translated">Skip は、すでに消費されている最新の開始要素と一致する終了要素を消費するまでトークンを読み込みます。これは、開始要素に遭遇した場合に再帰するので、入れ子になった構造体をスキップするために使用できます。start要素にマッチするend要素を見つけた場合はnilを返し、そうでない場合は問題を記述したエラーを返します。</target>
        </trans-unit>
        <trans-unit id="70514769bf0cf43aa1fd9a8170e861cfc268114d" translate="yes" xml:space="preserve">
          <source>SkipChildren skips over the child entries associated with the last Entry returned by Next. If that Entry did not have children or Next has not been called, SkipChildren is a no-op.</source>
          <target state="translated">SkipChildrenは、Nextが返した最後のEntryに関連付けられた子エントリをスキップします。そのエントリに子エントリがなかった場合、または Next が呼び出されていない場合、SkipChildren は実行されません。</target>
        </trans-unit>
        <trans-unit id="306f2cf9cd44bb1158534a5fe5beb03317afa4af" translate="yes" xml:space="preserve">
          <source>SkipDir is used as a return value from WalkFuncs to indicate that the directory named in the call is to be skipped. It is not returned as an error by any function.</source>
          <target state="translated">SkipDirは、呼び出しで指定されたディレクトリをスキップすることを示すために、WalkFuncsからの戻り値として使用されます。どの関数からもエラーとして返されることはありません。</target>
        </trans-unit>
        <trans-unit id="a9f977172633094ba7da3e08af3ab05c0c517aa4" translate="yes" xml:space="preserve">
          <source>SkipNow marks the test as having been skipped and stops its execution by calling runtime.Goexit. If a test fails (see Error, Errorf, Fail) and is then skipped, it is still considered to have failed. Execution will continue at the next test or benchmark. See also FailNow. SkipNow must be called from the goroutine running the test, not from other goroutines created during the test. Calling SkipNow does not stop those other goroutines.</source>
          <target state="translated">SkipNowはテストがスキップされたことをマークし、runtime.Goexitを呼び出すことで実行を停止します。テストが失敗し(Error,Errorf,Failを参照)、スキップされた場合でも、失敗したとみなされます。実行は次のテストやベンチマークで続行されます。FailNowも参照してください。SkipNow は、テストを実行している goroutine から呼び出す必要があり、テスト中に作成された他の goroutine からではありません。SkipNowを呼び出しても、他のゴロチンは停止しません。</target>
        </trans-unit>
        <trans-unit id="332b0733aeb219d3842af5da1737b4332e8bb58a" translate="yes" xml:space="preserve">
          <source>Skipf is equivalent to Logf followed by SkipNow.</source>
          <target state="translated">SkipfはLogfに続いてSkipNowに相当します。</target>
        </trans-unit>
        <trans-unit id="416b07f26916aed7cb9e2ecd9aa8ab976885e47e" translate="yes" xml:space="preserve">
          <source>Skipped reports whether the test was skipped.</source>
          <target state="translated">Skipped は、テストがスキップされたかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="22c22c92516b167e48a8850862fd9d43b049ad6a" translate="yes" xml:space="preserve">
          <source>Skipping</source>
          <target state="translated">Skipping</target>
        </trans-unit>
        <trans-unit id="3cac34e674464c2b62286054cd9a2d2c81149efc" translate="yes" xml:space="preserve">
          <source>Sleep</source>
          <target state="translated">Sleep</target>
        </trans-unit>
        <trans-unit id="53bb6e499b626b0d907f8d7f80059af55f685b40" translate="yes" xml:space="preserve">
          <source>Sleep pauses the current goroutine for at least the duration d. A negative or zero duration causes Sleep to return immediately.</source>
          <target state="translated">スリープは、少なくとも持続時間dの間、現在のゴロチンを一時停止します。</target>
        </trans-unit>
        <trans-unit id="0c8525a31f225d6db84222cdc68f43cb8c6c18bf" translate="yes" xml:space="preserve">
          <source>Slice</source>
          <target state="translated">Slice</target>
        </trans-unit>
        <trans-unit id="4972372ab292852581dde17e7410c1a0a34536d2" translate="yes" xml:space="preserve">
          <source>Slice returns v[i:j]. It panics if v's Kind is not Array, Slice or String, or if v is an unaddressable array, or if the indexes are out of bounds.</source>
          <target state="translated">Slice は v[i:j]を返します。vのKindがArray,Slice,Stringでない場合や、アドレス指定不可能な配列である場合、インデックスが範囲外の場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="f664f65e07ee83c0603b67c75f98aa98e653bee6" translate="yes" xml:space="preserve">
          <source>Slice sorts the provided slice given the provided less function.</source>
          <target state="translated">Sliceは、提供されているレス関数を指定して、提供されているスライスをソートします。</target>
        </trans-unit>
        <trans-unit id="c9c2b1fb38f90f114fb07f736146472316c1fd01" translate="yes" xml:space="preserve">
          <source>Slice values are deeply equal when all of the following are true: they are both nil or both non-nil, they have the same length, and either they point to the same initial entry of the same underlying array (that is, &amp;amp;x[0] == &amp;amp;y[0]) or their corresponding elements (up to length) are deeply equal. Note that a non-nil empty slice and a nil slice (for example, []byte{} and []byte(nil)) are not deeply equal.</source>
          <target state="translated">スライス値は、次のすべてが真である場合に深く等しくなります。これらは両方ともnilまたは両方とも非nilであり、それらは同じ長さであり、同じ基本配列の同じ初期エントリ（つまり、＆x [0 ] ==＆y [0]）またはそれらに対応する要素（長さまで）が深く等しい。nil以外の空のスライスとnilスライス（たとえば、[] byte {}と[] byte（nil））は完全には等しくないことに注意してください。</target>
        </trans-unit>
        <trans-unit id="187ce922ba02cf6f5feb1dc1495c357805a44a28" translate="yes" xml:space="preserve">
          <source>Slice3 is the 3-index form of the slice operation: it returns v[i:j:k]. It panics if v's Kind is not Array or Slice, or if v is an unaddressable array, or if the indexes are out of bounds.</source>
          <target state="translated">Slice3はスライス演算の3インデックス形式で、v[i:j:k]を返します。vのカインドがArrayやSliceではない場合や、vがアドレス指定不可能な配列である場合、インデックスが範囲外である場合はパニックになります。</target>
        </trans-unit>
        <trans-unit id="036571bfad79ab866cb35b30d706649dfea91e3e" translate="yes" xml:space="preserve">
          <source>Slice:</source>
          <target state="translated">Slice:</target>
        </trans-unit>
        <trans-unit id="0294a1ce63eca0958f1a3380376dd5b3772daeaa" translate="yes" xml:space="preserve">
          <source>SliceHeader is the runtime representation of a slice. It cannot be used safely or portably and its representation may change in a later release. Moreover, the Data field is not sufficient to guarantee the data it references will not be garbage collected, so programs must keep a separate, correctly typed pointer to the underlying data.</source>
          <target state="translated">SliceHeaderはスライスのランタイム表現です。安全に使用したり移植したりすることはできず、その表現は後のリリースで変更される可能性があります。さらに、Dataフィールドは、参照するデータがガベージコレクションされないことを保証するのに十分ではないので、プログラムは、基礎となるデータへの別個の正しく型付けされたポインタを保持しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c22ee253fc38582e76e1a487b795c3ec911e294a" translate="yes" xml:space="preserve">
          <source>SliceIsSorted tests whether a slice is sorted.</source>
          <target state="translated">SliceIsSorted は、スライスがソートされているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="45eaaaf070f6c38ebb684650d2e76ac52a7e3905" translate="yes" xml:space="preserve">
          <source>SliceOf returns the slice type with element type t. For example, if t represents int, SliceOf(t) represents []int.</source>
          <target state="translated">SliceOfは、要素型がtのスライス型を返します。例えば、tがintの場合、SliceOf(t)は[]intを表します。</target>
        </trans-unit>
        <trans-unit id="d3f5d8267a68290ad1478266ac0100b64a9ec9d9" translate="yes" xml:space="preserve">
          <source>SlicePtrFromStrings converts a slice of strings to a slice of pointers to NUL-terminated byte arrays. If any string contains a NUL byte, it returns (nil, EINVAL).</source>
          <target state="translated">SlicePtrFromStrings は文字列のスライスを NUL 終端のバイト配列へのポインタのスライスに変換します。文字列に NUL バイトが含まれている場合は (nil,EINVAL)を返します。</target>
        </trans-unit>
        <trans-unit id="1c864d92c212ef8abfd9b5a7229b7d9cb38de7a2" translate="yes" xml:space="preserve">
          <source>SliceStable</source>
          <target state="translated">SliceStable</target>
        </trans-unit>
        <trans-unit id="291aafdf1861d62c9bc50f1c83d1800a3cb0913c" translate="yes" xml:space="preserve">
          <source>SliceStable sorts the provided slice given the provided less function while keeping the original order of equal elements.</source>
          <target state="translated">SliceStableは、提供されたless関数が与えられたスライスを、元の等しい要素の順序を維持したままソートします。</target>
        </trans-unit>
        <trans-unit id="24220363f4bcd3c6462dbe1e7e4afff4012817f0" translate="yes" xml:space="preserve">
          <source>Slices of bytes in the returned token data refer to the parser's internal buffer and remain valid only until the next call to Token. To acquire a copy of the bytes, call CopyToken or the token's Copy method.</source>
          <target state="translated">返されたトークンデータのバイトのスライスは、パーサの内部バッファを参照しており、次にトークンを呼び出すまで有効です。バイトのコピーを取得するには、CopyTokenまたはトークンのCopyメソッドを呼び出します。</target>
        </trans-unit>
        <trans-unit id="fc7f681747838baecdc0ee29795205530bc0b270" translate="yes" xml:space="preserve">
          <source>SocketControlMessage represents a socket control message.</source>
          <target state="translated">SocketControlMessage はソケット制御メッセージを表す。</target>
        </trans-unit>
        <trans-unit id="4457c2edf950c3c3e9063b3a5f5427cad62d71ba" translate="yes" xml:space="preserve">
          <source>Some protocols may impose additional requirements on pre-escaping the username and password. For instance, when used with OAuth2, both arguments must be URL encoded first with url.QueryEscape.</source>
          <target state="translated">プロトコルによっては、ユーザ名とパスワードのプリエスケープに追加の要件を課す場合があります。例えば、OAuth2で使用する場合、両方の引数はURLを最初にurl.QueryEscapeでエンコードしなければなりません。</target>
        </trans-unit>
        <trans-unit id="0b8c5ca797beb6df3a3a7d32f3dea277a5bafd3c" translate="yes" xml:space="preserve">
          <source>Some valid layouts are invalid time values for time.Parse, due to formats such as _ for space padding and Z for zone information.</source>
          <target state="translated">有効なレイアウトの中には、スペースパディングのための_やゾーン情報のためのZのようなフォーマットのために、time.Parseの時間値が無効なものがあります。</target>
        </trans-unit>
        <trans-unit id="89fbdcfdf1cfcd667a49cfe3f7c3c0bdc4ce5124" translate="yes" xml:space="preserve">
          <source>Sort is a convenience method.</source>
          <target state="translated">ソートは便利な方法です。</target>
        </trans-unit>
        <trans-unit id="f520ad1ca9ea89523277ded79bfeb4e271e735a8" translate="yes" xml:space="preserve">
          <source>Sort sorts an ErrorList. *Error entries are sorted by position, other errors are sorted by error message, and before any *Error entry.</source>
          <target state="translated">Sort は、ErrorList をソートします。*エラーエントリは位置順にソートされ、その他のエラーはエラーメッセージ順にソートされ、どのエラーエントリよりも前にソートされます。</target>
        </trans-unit>
        <trans-unit id="f8bf7dfcfaee16c58648d64101d25f3215cc22e2" translate="yes" xml:space="preserve">
          <source>Sort sorts data. It makes one call to data.Len to determine n, and O(n*log(n)) calls to data.Less and data.Swap. The sort is not guaranteed to be stable.</source>
          <target state="translated">ソートはデータをソートします。これはnを決定するためにdata.Lenを1回呼び出し、data.Lessとdata.SwapをO(n*log(n))で呼び出します。ソートの安定性は保証されていません。</target>
        </trans-unit>
        <trans-unit id="decd49ac7a46241d55346a11f6d2fb74335dc7a9" translate="yes" xml:space="preserve">
          <source>SortImports sorts runs of consecutive import lines in import blocks in f. It also removes duplicate imports when it is possible to do so without data loss.</source>
          <target state="translated">SortImports は、連続したインポート行の実行を f のインポートブロック内でソートします。</target>
        </trans-unit>
        <trans-unit id="6e2693fb2fa2b916dd95d972bbcb32b0b6b566ec" translate="yes" xml:space="preserve">
          <source>Source formats src in canonical gofmt style and returns the result or an (I/O or syntax) error. src is expected to be a syntactically correct Go source file, or a list of Go declarations or statements.</source>
          <target state="translated">ソースは src を正規の gofmt スタイルでフォーマットし、その結果または (I/O または構文エラー)エラーを返します。</target>
        </trans-unit>
        <trans-unit id="a91bed1365204e8353c0f745ca77893ae1b1305d" translate="yes" xml:space="preserve">
          <source>Source values of type bool may be scanned into types *bool, *interface{}, *string, *[]byte, or *RawBytes.</source>
          <target state="translated">bool型のソース値は、*bool型、*interface{}型、*string型、*[]byte型、または*RawBytes型にスキャンされます。</target>
        </trans-unit>
        <trans-unit id="4cd3cd23d4f7a4635c360a861ee7be174fed76cc" translate="yes" xml:space="preserve">
          <source>Source values of type time.Time may be scanned into values of type *time.Time, *interface{}, *string, or *[]byte. When converting to the latter two, time.RFC3339Nano is used.</source>
          <target state="translated">time.Time型のソース値は、*time.Time型、*interface{}型、*string型、または*[]byte型の値にスキャンされます。後者の2つに変換する場合は、time.RFC3339Nanoが使用されます。</target>
        </trans-unit>
        <trans-unit id="6bdf6d7926b72078af0c191b3c6238538d7b0cb1" translate="yes" xml:space="preserve">
          <source>Special case is:</source>
          <target state="translated">特殊なケースです。</target>
        </trans-unit>
        <trans-unit id="38cf2e1ac5d0bfa814379b9cb5b1a8aad4c71895" translate="yes" xml:space="preserve">
          <source>Special cases are (in order):</source>
          <target state="translated">特殊なケースは(順不同)です。</target>
        </trans-unit>
        <trans-unit id="36ff1c61fcf6a6f96273c5129f496e6e2d52bc61" translate="yes" xml:space="preserve">
          <source>Special cases are the same as Exp.</source>
          <target state="translated">特殊なケースはExp.</target>
        </trans-unit>
        <trans-unit id="fb4f18f6f604123235431e09b3313991f0bb526d" translate="yes" xml:space="preserve">
          <source>Special cases are:</source>
          <target state="translated">特殊なケースは</target>
        </trans-unit>
        <trans-unit id="46044fc293a1827aa7aed188a242765b1470a9ed" translate="yes" xml:space="preserve">
          <source>Special section indices.</source>
          <target state="translated">特別セクションのインデックス。</target>
        </trans-unit>
        <trans-unit id="a2fde335dab74ce6562dfce419b45cb58e70ab07" translate="yes" xml:space="preserve">
          <source>SpecialCase</source>
          <target state="translated">SpecialCase</target>
        </trans-unit>
        <trans-unit id="47398a3a12335bdb3df057e3646557b1b5841333" translate="yes" xml:space="preserve">
          <source>SpecialCase represents language-specific case mappings such as Turkish. Methods of SpecialCase customize (by overriding) the standard mappings.</source>
          <target state="translated">SpecialCase はトルコ語のような言語固有の大文字小文字のマッピングを表します。SpecialCase のメソッドは、標準的なマッピングを (オーバーライドすることで)カスタマイズします。</target>
        </trans-unit>
        <trans-unit id="fc8230b4119ad4b994db2324d71f4e0ae7ad932c" translate="yes" xml:space="preserve">
          <source>Split</source>
          <target state="translated">Split</target>
        </trans-unit>
        <trans-unit id="23392488f19a5d0be8c39d3cfafde4dd76bd94be" translate="yes" xml:space="preserve">
          <source>Split panics if it is called after scanning has started.</source>
          <target state="translated">スキャンが開始された後に呼び出された場合、スプリットパニックが発生します。</target>
        </trans-unit>
        <trans-unit id="96e564d2bf5c731af05562ed176616a9d55a5e64" translate="yes" xml:space="preserve">
          <source>Split sets the split function for the Scanner. The default split function is ScanLines.</source>
          <target state="translated">分割]は、スキャナの分割機能を設定します。デフォルトのスプリット機能はScanLinesです。</target>
        </trans-unit>
        <trans-unit id="eb475bc85cdb49a4c4de00518ab4efe39bcec33e" translate="yes" xml:space="preserve">
          <source>Split slices s into all subslices separated by sep and returns a slice of the subslices between those separators. If sep is empty, Split splits after each UTF-8 sequence. It is equivalent to SplitN with a count of -1.</source>
          <target state="translated">Split slices s を sep で区切られたすべてのサブスライスに分割し、それらの区切り文字の間のサブスライスのスライスを返します。sep が空の場合、Split は各 UTF-8 シーケンスの後に分割します。これは、-1のカウントを持つSplitNと同等です。</target>
        </trans-unit>
        <trans-unit id="67dbafd6c3b93902b18d8f321af8549a1b6ad6e7" translate="yes" xml:space="preserve">
          <source>Split slices s into all substrings separated by sep and returns a slice of the substrings between those separators.</source>
          <target state="translated">s を sep で区切られたすべての部分文字列に分割し、それらの区切り文字の間の部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="8a1469b01e576340018d58bd7e3d302e90dee09f" translate="yes" xml:space="preserve">
          <source>Split slices s into substrings separated by the expression and returns a slice of the substrings between those expression matches.</source>
          <target state="translated">sを式で区切られた部分文字列に分割し、それらの式にマッチした部分文字列の間のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="817430fe1883828acde2ae90d1a5b512a8d87c1e" translate="yes" xml:space="preserve">
          <source>Split splits path immediately following the final Separator, separating it into a directory and file name component. If there is no Separator in path, Split returns an empty dir and file set to path. The returned values have the property that path = dir+file.</source>
          <target state="translated">Splitは、最終的なSeparatorの直後のパスを、ディレクトリとファイル名のコンポーネントに分割します。パスに Separator がない場合、Split は空の dir と file を path に設定した値を返します。返される値は、path=dir+file というプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="04097266465adc5300d2bc3091a77206398acddf" translate="yes" xml:space="preserve">
          <source>Split splits path immediately following the final slash, separating it into a directory and file name component. If there is no slash in path, Split returns an empty dir and file set to path. The returned values have the property that path = dir+file.</source>
          <target state="translated">Splitは、最後のスラッシュの直後のパスをディレクトリとファイル名のコンポーネントに分割します。パスにスラッシュがない場合、Split は空のディレクトリとファイルをパスに設定して返します。返される値は、path=dir+file というプロパティを持っています。</target>
        </trans-unit>
        <trans-unit id="f645051fa0ea9f5fba674ae30e0eb8228c563bbb" translate="yes" xml:space="preserve">
          <source>SplitAfter</source>
          <target state="translated">SplitAfter</target>
        </trans-unit>
        <trans-unit id="af6f57e26d6655b8a560ff5a1ea503e038967615" translate="yes" xml:space="preserve">
          <source>SplitAfter slices s into all subslices after each instance of sep and returns a slice of those subslices. If sep is empty, SplitAfter splits after each UTF-8 sequence. It is equivalent to SplitAfterN with a count of -1.</source>
          <target state="translated">SplitAfter は、s を sep の各インスタンスの後のすべてのサブスライスにスライスし、それらのサブスライスのスライスを返します。sep が空の場合、SplitAfter は各 UTF-8 シーケンスの後に分割します。これは SplitAfterN と同等で、カウント数は -1 です。</target>
        </trans-unit>
        <trans-unit id="7b96a1319471e70dc0744f490b304d8e5292e091" translate="yes" xml:space="preserve">
          <source>SplitAfter slices s into all substrings after each instance of sep and returns a slice of those substrings.</source>
          <target state="translated">SplitAfter は sep の各インスタンスの後に s をすべての部分文字列にスライスし、それらの部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="183e10127881bddc63e39844aca6fde7b55ad84d" translate="yes" xml:space="preserve">
          <source>SplitAfterN</source>
          <target state="translated">SplitAfterN</target>
        </trans-unit>
        <trans-unit id="71c5d7e2f9fd13201867043dfefbd28be7cef909" translate="yes" xml:space="preserve">
          <source>SplitAfterN slices s into subslices after each instance of sep and returns a slice of those subslices. If sep is empty, SplitAfterN splits after each UTF-8 sequence. The count determines the number of subslices to return:</source>
          <target state="translated">SplitAfterN は、sep の各インスタンスの後に s をサブスライスにスライスし、それらのサブスライスのスライスを返します。sep が空の場合、SplitAfterN は各 UTF-8 シーケンスの後に分割します。countは返すサブスライスの数を決定します。</target>
        </trans-unit>
        <trans-unit id="b953b958d37f7636fa29a91139b9e599462e7d0a" translate="yes" xml:space="preserve">
          <source>SplitAfterN slices s into substrings after each instance of sep and returns a slice of those substrings.</source>
          <target state="translated">SplitAfterN は sep の各インスタンスの後に s を部分文字列にスライスし、それらの部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="c42d1c66abbb920d11fa3452a55d6b02ca57969f" translate="yes" xml:space="preserve">
          <source>SplitFunc is the signature of the split function used to tokenize the input. The arguments are an initial substring of the remaining unprocessed data and a flag, atEOF, that reports whether the Reader has no more data to give. The return values are the number of bytes to advance the input and the next token to return to the user, if any, plus an error, if any.</source>
          <target state="translated">SplitFuncは入力をトークン化するために使用される分割関数のシグネチャです。引数は、残りの未処理データの初期部分文字列と、 リーダが与えるデータがもうないかどうかを報告するフラグ atEOF です。戻り値は、入力を前進させるバイト数と、ユーザに返す次のトークンがあればそれに加えて、エラーがあればそれを返します。</target>
        </trans-unit>
        <trans-unit id="b4cd81f732cbd3a8923ecb19ba58f0f16cb90789" translate="yes" xml:space="preserve">
          <source>SplitHostPort splits a network address of the form &quot;host:port&quot;, &quot;host%zone:port&quot;, &quot;[host]:port&quot; or &quot;[host%zone]:port&quot; into host or host%zone and port.</source>
          <target state="translated">SplitHostPortは、&quot;host:port&quot;、&quot;host%zone:port&quot;、&quot;[host]:port&quot;、または&quot;[host%zone]:port &quot;の形式のネットワークアドレスを、ホストまたはホスト%zoneとポートに分割します。</target>
        </trans-unit>
        <trans-unit id="83d28a087df2085b354d9219f029b5d90cf38ec4" translate="yes" xml:space="preserve">
          <source>SplitList</source>
          <target state="translated">SplitList</target>
        </trans-unit>
        <trans-unit id="2810f9f5e2566aed968386693eafb51ff308b597" translate="yes" xml:space="preserve">
          <source>SplitList splits a list of paths joined by the OS-specific ListSeparator, usually found in PATH or GOPATH environment variables. Unlike strings.Split, SplitList returns an empty slice when passed an empty string.</source>
          <target state="translated">SplitList は、OS 固有の ListSeparator で結合されたパスのリストを分割します。strings.Split とは異なり、SplitList は空の文字列を渡すと空のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="84cfaf9bc325cc024ba8d73b2f03f1f0b940f375" translate="yes" xml:space="preserve">
          <source>SplitN</source>
          <target state="translated">SplitN</target>
        </trans-unit>
        <trans-unit id="36c3c8ea011f7ef62da6893e010962d6852bd07a" translate="yes" xml:space="preserve">
          <source>SplitN slices s into subslices separated by sep and returns a slice of the subslices between those separators. If sep is empty, SplitN splits after each UTF-8 sequence. The count determines the number of subslices to return:</source>
          <target state="translated">SplitN は s を sep で区切られたサブスライスにスライスし、それらの区切り文字の間のサブスライスのスライスを返します。sep が空の場合、SplitN は各 UTF-8 シーケンスの後に分割します。countは返すサブスライスの数を決定します。</target>
        </trans-unit>
        <trans-unit id="de01961453e6bcc30ddd7714ed914f746f011fab" translate="yes" xml:space="preserve">
          <source>SplitN slices s into substrings separated by sep and returns a slice of the substrings between those separators.</source>
          <target state="translated">SplitN は s を sep で区切られた部分文字列にスライスし、それらの区切り文字の間の部分文字列のスライスを返します。</target>
        </trans-unit>
        <trans-unit id="8ca15484a6a50617febf823f3fa1c9e7038688ee" translate="yes" xml:space="preserve">
          <source>Sprint</source>
          <target state="translated">Sprint</target>
        </trans-unit>
        <trans-unit id="d0775164f7f53356c293723cd9c1222468d3a49b" translate="yes" xml:space="preserve">
          <source>Sprint formats using the default formats for its operands and returns the resulting string. Spaces are added between operands when neither is a string.</source>
          <target state="translated">Sprintは、そのオペランドのデフォルトのフォーマットを使用してフォーマットし、結果の文字列を返します。どちらも文字列ではない場合、オペランド間にスペースが追加されます。</target>
        </trans-unit>
        <trans-unit id="7d5fe7cc61bbb8158ad630a3820e3c126928a4a6" translate="yes" xml:space="preserve">
          <source>Sprintf</source>
          <target state="translated">Sprintf</target>
        </trans-unit>
        <trans-unit id="5bfb46358289368784772aa4aa5a217258b76236" translate="yes" xml:space="preserve">
          <source>Sprintf formats according to a format specifier and returns the resulting string.</source>
          <target state="translated">Sprintfは、フォーマット指定子に従ってフォーマットを行い、結果の文字列を返します。</target>
        </trans-unit>
        <trans-unit id="5446f67533b2f88354fccb3b84fed81fd676a9d5" translate="yes" xml:space="preserve">
          <source>Sprintln</source>
          <target state="translated">Sprintln</target>
        </trans-unit>
        <trans-unit id="d0bd83b3300fd81e26aa39c136cc9d6ce11bb5a7" translate="yes" xml:space="preserve">
          <source>Sprintln formats using the default formats for its operands and returns the resulting string. Spaces are always added between operands and a newline is appended.</source>
          <target state="translated">Sprintlnは、オペランドのデフォルトのフォーマットを使用してフォーマットし、結果の文字列を返します。オペランド間には常にスペースが追加され、改行が追加されます。</target>
        </trans-unit>
        <trans-unit id="6bbb118b36018412cea4de47bc914f00685c9ac5" translate="yes" xml:space="preserve">
          <source>Sqrt</source>
          <target state="translated">Sqrt</target>
        </trans-unit>
        <trans-unit id="1b795ae9b134bc8c4c0b446e88fecc1f3b41d092" translate="yes" xml:space="preserve">
          <source>Sqrt returns the square root of x.</source>
          <target state="translated">Sqrtはxの平方根を返します。</target>
        </trans-unit>
        <trans-unit id="b85c9b396b0e4464f48aa17058f2b1082008ae70" translate="yes" xml:space="preserve">
          <source>Sqrt returns the square root of x. The result r is chosen so that real(r) &amp;ge; 0 and imag(r) has the same sign as imag(x).</source>
          <target state="translated">Sqrtはxの平方根を返します。結果rは、real（r）&amp;ge;0およびimag（r）がimag（x）と同じ符号を持つように選択されます。</target>
        </trans-unit>
        <trans-unit id="41b5f4c2f86ca750aabbdd4d6bdb915be0584893" translate="yes" xml:space="preserve">
          <source>Sqrt sets z to &amp;lfloor;&amp;radic;x&amp;rfloor;, the largest integer such that z&amp;sup2; &amp;le; x, and returns z. It panics if x is negative.</source>
          <target state="translated">Sqrtはzをz&amp;sup2;&amp;le;xとなる最大の整数である&amp;lfloor;&amp;radic;x&amp;rfloor;に設定し、zを返します。xが負の場合、パニックになります。</target>
        </trans-unit>
        <trans-unit id="2e519fcfbc6a90ddf75f1394fae55598d7af8898" translate="yes" xml:space="preserve">
          <source>Sqrt sets z to the rounded square root of x, and returns it.</source>
          <target state="translated">Sqrtは、zをxの丸められた平方根に設定し、それを返します。</target>
        </trans-unit>
        <trans-unit id="b183229b8a0007179105ee23f98db0fa35e992ca" translate="yes" xml:space="preserve">
          <source>SrcDirs returns a list of package source root directories. It draws from the current Go root and Go path but omits directories that do not exist.</source>
          <target state="translated">SrcDirs は、パッケージのソースルートディレクトリのリストを返します。これは、現在の囲碁ルートと囲碁パスから描画しますが、存在しないディレクトリは省略されます。</target>
        </trans-unit>
        <trans-unit id="ace37ead62176f4b0fef73d8a4e6eefe6e4e0808" translate="yes" xml:space="preserve">
          <source>Srcset encapsulates a known safe srcset attribute (see &lt;a href=&quot;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset&quot;&gt;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset&lt;/a&gt;).</source>
          <target state="translated">Srcsetは、既知の安全なsrcset属性をカプセル化します（&lt;a href=&quot;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcset&quot;&gt;https://w3c.github.io/html/semantics-embedded-content.html#element-attrdef-img-srcsetを&lt;/a&gt;参照）。</target>
        </trans-unit>
        <trans-unit id="608729966442ded3bea906aefa46d7a131fb981c" translate="yes" xml:space="preserve">
          <source>Sscan scans the argument string, storing successive space-separated values into successive arguments. Newlines count as space. It returns the number of items successfully scanned. If that is less than the number of arguments, err will report why.</source>
          <target state="translated">Sscan は引数文字列をスキャンし、スペースで区切られた値を連続した引数に格納します。改行はスペースとしてカウントされます。スキャンに成功した項目の数を返します。もしそれが引数の数よりも少ない場合は、 err がその理由を報告します。</target>
        </trans-unit>
        <trans-unit id="390342df3a9580b3ab53916d8e78ce9a67e05f51" translate="yes" xml:space="preserve">
          <source>Sscanf</source>
          <target state="translated">Sscanf</target>
        </trans-unit>
        <trans-unit id="61a716d2775c775cb5be05f41652e9aaaad32358" translate="yes" xml:space="preserve">
          <source>Sscanf scans the argument string, storing successive space-separated values into successive arguments as determined by the format. It returns the number of items successfully parsed. Newlines in the input must match newlines in the format.</source>
          <target state="translated">Sscanf は引数の文字列をスキャンし、スペースで区切られた値をフォーマットで決定された連続した引数に格納します。解析に成功した項目の数を返します。入力の改行はフォーマットの改行と一致しなければなりません。</target>
        </trans-unit>
        <trans-unit id="af4732932dde6aa0c1e4ad7d04d2e2382ec0a0b6" translate="yes" xml:space="preserve">
          <source>Sscanln is similar to Sscan, but stops scanning at a newline and after the final item there must be a newline or EOF.</source>
          <target state="translated">SscanlnはSscanと似ていますが、改行でスキャンを停止し、最終項目の後に改行かEOFがなければなりません。</target>
        </trans-unit>
        <trans-unit id="6f3e4b56a56750c728e3e2463bad931f8918a9d7" translate="yes" xml:space="preserve">
          <source>Stable sorts data while keeping the original order of equal elements.</source>
          <target state="translated">安定したソートを行い、元の等しい要素の順序を維持したままデータをソートします。</target>
        </trans-unit>
        <trans-unit id="c9e8e2e8cb17ec7f99a9db77c101e60f6136c3a5" translate="yes" xml:space="preserve">
          <source>Stack formats a stack trace of the calling goroutine into buf and returns the number of bytes written to buf. If all is true, Stack formats stack traces of all other goroutines into buf after the trace for the current goroutine.</source>
          <target state="translated">Stack は、呼び出し元の goroutine のスタックトレースを buf にフォーマットし、buf に書き込まれたバイト数を返します。すべてが真の場合、Stack は他のすべての goroutine のスタックトレースを現在の goroutine のトレースの後に buf にフォーマットします。</target>
        </trans-unit>
        <trans-unit id="1cffafd303a34a6584721e138e5265f842cb505a" translate="yes" xml:space="preserve">
          <source>Stack returns a formatted stack trace of the goroutine that calls it. It calls runtime.Stack with a large enough buffer to capture the entire trace.</source>
          <target state="translated">Stack は、それを呼び出す goroutine のスタックトレースをフォーマットしたものを返します。これは、トレース全体をキャプチャするのに十分な大きさのバッファで runtime.Stack を呼び出します。</target>
        </trans-unit>
        <trans-unit id="418aa94a169d739e57a35d99f93d9138e0bb4b62" translate="yes" xml:space="preserve">
          <source>Stack returns the stack trace associated with the record, a prefix of r.Stack0.</source>
          <target state="translated">Stack は、レコードに関連付けられたスタックトレースを返します。</target>
        </trans-unit>
        <trans-unit id="687cb3d7c249eff01be44167736a622ba61578c9" translate="yes" xml:space="preserve">
          <source>Standard colors.</source>
          <target state="translated">定番の色です。</target>
        </trans-unit>
        <trans-unit id="360c57caedbd1d1ff38dde144677c893d6ad3792" translate="yes" xml:space="preserve">
          <source>Standard library</source>
          <target state="translated">標準ライブラリ</target>
        </trans-unit>
        <trans-unit id="9fb1a9f741b4439135087b938ed47613619d8e54" translate="yes" xml:space="preserve">
          <source>Start enables tracing for the current program. While tracing, the trace will be buffered and written to w. Start returns an error if tracing is already enabled.</source>
          <target state="translated">Start は現在のプログラムのトレースを有効にします。トレース中、トレースはバッファリングされ、wに書き込まれます。Startはトレースが既に有効になっている場合、エラーを返します。</target>
        </trans-unit>
        <trans-unit id="d84f21e1e9935e064f3eccc25d6db5d4fb64a86a" translate="yes" xml:space="preserve">
          <source>Start starts a server from NewUnstartedServer.</source>
          <target state="translated">StartはNewUnstartedServerからサーバを起動します。</target>
        </trans-unit>
        <trans-unit id="b61ef15d781bf8c860427db7964980f61966535c" translate="yes" xml:space="preserve">
          <source>Start starts the specified command but does not wait for it to complete.</source>
          <target state="translated">Startは指定したコマンドを起動しますが、コマンドの完了を待つことはありません。</target>
        </trans-unit>
        <trans-unit id="7f51b09c0923a4603b545c471069b55e22a62f34" translate="yes" xml:space="preserve">
          <source>StartCPUProfile enables CPU profiling for the current process. While profiling, the profile will be buffered and written to w. StartCPUProfile returns an error if profiling is already enabled.</source>
          <target state="translated">StartCPUProfile は、現在のプロセスの CPU プロファイリングを有効にします。プロファイリング中、プロファイルはバッファリングされ、wに書き込まれます。</target>
        </trans-unit>
        <trans-unit id="f3753321843c42ccf0d93028e612610280e12d5e" translate="yes" xml:space="preserve">
          <source>StartCond returns the leading empty-width conditions that must be true in any match. It returns ^EmptyOp(0) if no matches are possible.</source>
          <target state="translated">StartCond は、どのようなマッチでも真でなければならない先頭の空幅条件を返します。マッチしない場合は ^EmptyOp(0)を返します。</target>
        </trans-unit>
        <trans-unit id="e00bec2778efe9f0a1a92501d76b773c7dc58166" translate="yes" xml:space="preserve">
          <source>StartProcess is a low-level interface. The os/exec package provides higher-level interfaces.</source>
          <target state="translated">StartProcess は低レベルのインターフェイスです。os/exec パッケージはより高レベルのインターフェイスを提供します。</target>
        </trans-unit>
        <trans-unit id="4656baf99c52e7677cc8f68ccbc8052e39ef42e9" translate="yes" xml:space="preserve">
          <source>StartProcess starts a new process with the program, arguments and attributes specified by name, argv and attr. The argv slice will become os.Args in the new process, so it normally starts with the program name.</source>
          <target state="translated">StartProcessは、name、argv、attrで指定されたプログラム、引数、属性で新しいプロセスを開始します。argvスライスは新しいプロセスではos.Argsになるので、通常はプログラム名から始まります。</target>
        </trans-unit>
        <trans-unit id="d3d2be7776a3d003cee77683d05001ec6ef09966" translate="yes" xml:space="preserve">
          <source>StartProcess wraps ForkExec for package os.</source>
          <target state="translated">StartProcess は os パッケージの ForkExec をラップします。</target>
        </trans-unit>
        <trans-unit id="4593c93bfc9fb8dacabfc8b4a1731d4454969f64" translate="yes" xml:space="preserve">
          <source>StartRegion starts a region and returns a function for marking the end of the region. The returned Region's End function must be called from the same goroutine where the region was started. Within each goroutine, regions must nest. That is, regions started after this region must be ended before this region can be ended. Recommended usage is</source>
          <target state="translated">StartRegion はリージョンを開始し、リージョンの終了を示す関数を返します。返された Region's End 関数は、リージョンが開始されたのと同じ goroutine から呼び出されなければなりません。各ゴローチン内では、領域は入れ子になっていなければなりません。つまり、この領域の後に開始された領域は、この領域を終了させる前に終了させなければなりません。推奨される使用法は</target>
        </trans-unit>
        <trans-unit id="3b719a81fa9e5ddcbfba4cb3fb45c729f487d09e" translate="yes" xml:space="preserve">
          <source>StartRequest blocks until it is time to send (or, if this is a server, receive) the request with the given id.</source>
          <target state="translated">StartRequestは、指定されたidでリクエストを送信する(サーバであれば受信する)時間になるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="338c8f94474f010aa4669ab2c0ae55a5c3a8c12a" translate="yes" xml:space="preserve">
          <source>StartResponse blocks until it is time to receive (or, if this is a server, send) the request with the given id.</source>
          <target state="translated">StartResponseは、指定されたIDのリクエストを受信する(サーバの場合は送信する)時間になるまでブロックします。</target>
        </trans-unit>
        <trans-unit id="7ea714fe33f9c8708b382ac24930c9134895c05e" translate="yes" xml:space="preserve">
          <source>StartTLS sends the STARTTLS command and encrypts all further communication. Only servers that advertise the STARTTLS extension support this function.</source>
          <target state="translated">StartTLS は STARTTLS コマンドを送信し、それ以降のすべての通信を暗号化します。STARTTLS拡張をアドバタイズしているサーバのみがこの機能をサポートしています。</target>
        </trans-unit>
        <trans-unit id="d062840c5c4653552407064d11c812b2dfbbac16" translate="yes" xml:space="preserve">
          <source>StartTLS starts TLS on a server from NewUnstartedServer.</source>
          <target state="translated">StartTLS は NewUnstartedServer からサーバ上の TLS を起動します。</target>
        </trans-unit>
        <trans-unit id="01903002ac73fdbc83cec8f016e70281a8a03041" translate="yes" xml:space="preserve">
          <source>StartTimer starts timing a test. This function is called automatically before a benchmark starts, but it can also be used to resume timing after a call to StopTimer.</source>
          <target state="translated">StartTimerはテストのタイミングを開始します。この関数はベンチマークが開始される前に自動的に呼び出されますが、StopTimerを呼び出した後にタイミングを再開するために使用することもできます。</target>
        </trans-unit>
        <trans-unit id="bb33cf53f4e568db572c687d22b2ff2888d74df9" translate="yes" xml:space="preserve">
          <source>StartTrace enables tracing for the current process. While tracing, the data will be buffered and available via ReadTrace. StartTrace returns an error if tracing is already enabled. Most clients should use the runtime/trace package or the testing package's -test.trace flag instead of calling StartTrace directly.</source>
          <target state="translated">StartTrace は、現在のプロセスのトレースを有効にします。トレース中、データはバッファリングされ、ReadTrace経由で利用可能になります。StartTrace は、トレースがすでに有効になっている場合、エラーを返します。ほとんどのクライアントは、StartTraceを直接呼び出す代わりに、ランタイム/トレースパッケージまたはテストパッケージの-test.traceフラグを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="6de552c394748272d237ee2909c17f8a5fd51503" translate="yes" xml:space="preserve">
          <source>Starting with Go 1.6, the http package has transparent support for the HTTP/2 protocol when using HTTPS. Programs that must disable HTTP/2 can do so by setting Transport.TLSNextProto (for clients) or Server.TLSNextProto (for servers) to a non-nil, empty map. Alternatively, the following GODEBUG environment variables are currently supported:</source>
          <target state="translated">Go 1.6 以降、http パッケージは HTTPS を使用する際に HTTP/2 プロトコルを透過的にサポートしています。HTTP/2 を無効にしなければならないプログラムは、Transport.TLSNextProto (クライアント用)または Server.TLSNextProto (サーバ用)を、nil ではない空のマップに設定することで無効にすることができます。代わりに、以下の GODEBUG 環境変数が現在サポートされています。</target>
        </trans-unit>
        <trans-unit id="9c555084811f017d34d2693472b49bb062306f30" translate="yes" xml:space="preserve">
          <source>Stat returns a FileInfo describing the named file. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Stat は、名前の付いたファイルを記述した FileInfo を返します。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="e4a95458fc56105197c2a964b9366157865cbb1b" translate="yes" xml:space="preserve">
          <source>Stat returns the FileInfo structure describing file. If there is an error, it will be of type *PathError.</source>
          <target state="translated">Stat は、ファイルを記述した FileInfo 構造体を返します。エラーが発生した場合、それは *PathError 型になります。</target>
        </trans-unit>
        <trans-unit id="6ed6c9c2af9ffd2ea1bfb59989c27d85db3a34df" translate="yes" xml:space="preserve">
          <source>State represents the printer state passed to custom formatters. It provides access to the io.Writer interface plus information about the flags and options for the operand's format specifier.</source>
          <target state="translated">Stateは、カスタム・フォーマッタに渡されるプリンタの状態を表します。これは、io.Writerインタフェースへのアクセスに加えて、オペランドのフォーマット指定子のフラグやオプションに関する情報を提供します。</target>
        </trans-unit>
        <trans-unit id="6c898e0bae6ae6e6a509998b0d70b717982994c3" translate="yes" xml:space="preserve">
          <source>Static reports whether this symbol is static (not visible outside its file).</source>
          <target state="translated">Static は、このシンボルがスタティックであるかどうかを報告します(ファイルの外では見えません)。</target>
        </trans-unit>
        <trans-unit id="f107d6fd99e84eaeb4014efe73efa78374b13f61" translate="yes" xml:space="preserve">
          <source>Stats returns database statistics.</source>
          <target state="translated">Statsはデータベースの統計情報を返します。</target>
        </trans-unit>
        <trans-unit id="473cf8363b9a9dc6de8f9778203d0b0d99ffe820" translate="yes" xml:space="preserve">
          <source>StatusText returns a text for the HTTP status code. It returns the empty string if the code is unknown.</source>
          <target state="translated">StatusText は、HTTP ステータスコードのテキストを返します。コードが不明な場合は空文字列を返します。</target>
        </trans-unit>
        <trans-unit id="d95efd4b66df751ef4f7e7c0d6a981a761feec31" translate="yes" xml:space="preserve">
          <source>StdEncoding is the standard base32 encoding, as defined in RFC 4648.</source>
          <target state="translated">StdEncodingは、RFC 4648で定義されている標準のbase32エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="a9197d0bbe7d5f346c8fce4d5958e4af36331be4" translate="yes" xml:space="preserve">
          <source>StdEncoding is the standard base64 encoding, as defined in RFC 4648.</source>
          <target state="translated">StdEncodingは、RFC 4648で定義されている標準のbase64エンコーディングです。</target>
        </trans-unit>
        <trans-unit id="c30cba7f2a4c150acfe65c8a3aa36a9ff709ad57" translate="yes" xml:space="preserve">
          <source>StdSizes is a convenience type for creating commonly used Sizes. It makes the following simplifying assumptions:</source>
          <target state="translated">StdSizesは、一般的に使用されているサイズを作成するための便利なタイプです。以下のような単純化を前提としています。</target>
        </trans-unit>
        <trans-unit id="34f196b4b0f694cd0a2f21247970027005c1305c" translate="yes" xml:space="preserve">
          <source>StderrPipe returns a pipe that will be connected to the command's standard error when the command starts.</source>
          <target state="translated">StderrPipeは、コマンドの起動時にコマンドの標準エラーに接続されるパイプを返します。</target>
        </trans-unit>
        <trans-unit id="f9c5224ebb81b29f683fd0f89569f0498e209b24" translate="yes" xml:space="preserve">
          <source>Stdin, Stdout, and Stderr are open Files pointing to the standard input, standard output, and standard error file descriptors.</source>
          <target state="translated">Stdin,Stdout,Stderr は、標準入力、標準出力、標準エラーファイル記述子を指すオープンファイルです。</target>
        </trans-unit>
        <trans-unit id="eaaa7d5358fae0ad4ea6507594efa4e1fe1938f3" translate="yes" xml:space="preserve">
          <source>StdinPipe returns a pipe that will be connected to the command's standard input when the command starts. The pipe will be closed automatically after Wait sees the command exit. A caller need only call Close to force the pipe to close sooner. For example, if the command being run will not exit until standard input is closed, the caller must close the pipe.</source>
          <target state="translated">StdinPipe は、コマンドの開始時にコマンドの標準入力に接続されるパイプを返します。パイプは、Wait がコマンドの終了を見た後、自動的に閉じられます。呼び出し側は Close を呼び出すだけでパイプを強制的にすぐに閉じることができます。例えば、実行中のコマンドが標準入力を閉じるまで終了しない場合、呼び出し元はパイプを閉じる必要があります。</target>
        </trans-unit>
        <trans-unit id="e34e1f63d532ddcb966f6992c5d243530bff512e" translate="yes" xml:space="preserve">
          <source>StdoutPipe returns a pipe that will be connected to the command's standard output when the command starts.</source>
          <target state="translated">StdoutPipe は、コマンドの起動時にコマンドの標準出力に接続されるパイプを返します。</target>
        </trans-unit>
        <trans-unit id="35cb1f2f3090469fddd290f48f6f6f66f6cfbf71" translate="yes" xml:space="preserve">
          <source>Stmt</source>
          <target state="translated">Stmt</target>
        </trans-unit>
        <trans-unit id="e8d756b195575772804ef522d92696943863af82" translate="yes" xml:space="preserve">
          <source>Stmt is a prepared statement. A Stmt is safe for concurrent use by multiple goroutines.</source>
          <target state="translated">Stmtは準備されたステートメントです。Stmtは、複数のゴロチンを同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="0bb26a3ab8d8618ecc81beec5115670b66a970d5" translate="yes" xml:space="preserve">
          <source>Stmt is a prepared statement. It is bound to a Conn and not used by multiple goroutines concurrently.</source>
          <target state="translated">Stmtは準備された文です。Connにバインドされており、複数のゴローチンが同時に使用することはありません。</target>
        </trans-unit>
        <trans-unit id="9e8123e57a051d77d8becac273756b24f947f7c4" translate="yes" xml:space="preserve">
          <source>Stmt returns a transaction-specific prepared statement from an existing statement.</source>
          <target state="translated">Stmtは、既存のステートメントからトランザクション固有の準備されたステートメントを返します。</target>
        </trans-unit>
        <trans-unit id="9e2e6090b163c6036190ffea94ddcfbb24b8b882" translate="yes" xml:space="preserve">
          <source>Stmt.QueryRowContext</source>
          <target state="translated">Stmt.QueryRowContext</target>
        </trans-unit>
        <trans-unit id="70af1d64e33ba2bc94ac6b94c7823d3046a2e685" translate="yes" xml:space="preserve">
          <source>StmtContext returns a transaction-specific prepared statement from an existing statement.</source>
          <target state="translated">StmtContext は、既存のステートメントからトランザクション固有の準備されたステートメントを返します。</target>
        </trans-unit>
        <trans-unit id="a70153fdc2043d42cd12ca46ccb4c33b57b300d4" translate="yes" xml:space="preserve">
          <source>StmtExecContext enhances the Stmt interface by providing Exec with context.</source>
          <target state="translated">StmtExecContextは、Execにコンテキストを提供することで、Stmtインタフェースを強化します。</target>
        </trans-unit>
        <trans-unit id="1004fd52a4b277314a44a4efa023effe4416d3f8" translate="yes" xml:space="preserve">
          <source>StmtQueryContext enhances the Stmt interface by providing Query with context.</source>
          <target state="translated">StmtQueryContextは、Queryにコンテキストを与えることで、Stmtインターフェースを強化します。</target>
        </trans-unit>
        <trans-unit id="4e7e607354865ab06dac634d86cb1266a005b9e3" translate="yes" xml:space="preserve">
          <source>Stop causes package signal to stop relaying incoming signals to c. It undoes the effect of all prior calls to Notify using c. When Stop returns, it is guaranteed that c will receive no more signals.</source>
          <target state="translated">Stop は、パッケージシグナルの c への着信信号の中継を停止させます。これは、c を使用した Notify へのそれまでのすべての呼び出しの効果を元に戻します。</target>
        </trans-unit>
        <trans-unit id="94f72ec5a9e9e46f0269677088e9aed4dc6bf0c7" translate="yes" xml:space="preserve">
          <source>Stop prevents the Timer from firing. It returns true if the call stops the timer, false if the timer has already expired or been stopped. Stop does not close the channel, to prevent a read from the channel succeeding incorrectly.</source>
          <target state="translated">Stopは、タイマーの発射を阻止します。呼び出しがタイマーを停止した場合は真を返し、タイマーが既に期限切れか停止している場合は偽を返します。Stop はチャンネルを閉じず、チャンネルからの読み取りが正しく行われないようにします。</target>
        </trans-unit>
        <trans-unit id="96e4cceff229f7d0b6242e33e40b44c6e1f954ad" translate="yes" xml:space="preserve">
          <source>Stop stops the current tracing, if any. Stop only returns after all the writes for the trace have completed.</source>
          <target state="translated">Stop は、現在のトレースを停止します。停止は、トレースのすべての書き込みが完了した後にのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="f869959cdbddc758676d9a0b40b1ccec00a007e0" translate="yes" xml:space="preserve">
          <source>Stop turns off a ticker. After Stop, no more ticks will be sent. Stop does not close the channel, to prevent a concurrent goroutine reading from the channel from seeing an erroneous &quot;tick&quot;.</source>
          <target state="translated">Stopはティッカーをオフにします。ストップ後は、それ以上のティッカーは送信されません。ストップはチャンネルを閉じません。これは、チャンネルからの同時読取ゴロチンが誤った「目盛り」を見ないようにするためです。</target>
        </trans-unit>
        <trans-unit id="6c60cc11ce6206ba7285eea9b92d5192efe41d39" translate="yes" xml:space="preserve">
          <source>StopCPUProfile stops the current CPU profile, if any. StopCPUProfile only returns after all the writes for the profile have completed.</source>
          <target state="translated">StopCPUProfile は、現在の CPU プロファイルがある場合には、そのプロファイルを停止します。StopCPUProfileは、プロファイルへのすべての書き込みが完了した後にのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="921647073cddc48eae81cacd6f73563cc3719e6f" translate="yes" xml:space="preserve">
          <source>StopTimer stops timing a test. This can be used to pause the timer while performing complex initialization that you don't want to measure.</source>
          <target state="translated">StopTimerは、テストの計時を停止します。これは、測定したくない複雑な初期化を実行中にタイマーを一時停止させるために使用することができます。</target>
        </trans-unit>
        <trans-unit id="84dbe4eb021745433f9d6bb9432228e77ba19099" translate="yes" xml:space="preserve">
          <source>StopTrace stops tracing, if it was previously enabled. StopTrace only returns after all the reads for the trace have completed.</source>
          <target state="translated">StopTrace は、以前に有効になっていた場合、トレースを停止します。StopTrace は、トレースのためのすべての読み取りが完了した後にのみ戻ります。</target>
        </trans-unit>
        <trans-unit id="e64cf11d9830120b60f240aa4b7f7791804376a7" translate="yes" xml:space="preserve">
          <source>Store sets the value for a key.</source>
          <target state="translated">ストアは、キーの値を設定します。</target>
        </trans-unit>
        <trans-unit id="0576297e57bdd6afa5e5d4f4c53fb27987cf20cb" translate="yes" xml:space="preserve">
          <source>Store sets the value of the Value to x. All calls to Store for a given Value must use values of the same concrete type. Store of an inconsistent type panics, as does Store(nil).</source>
          <target state="translated">Store は、値の値を x に設定します。指定された値に対する Store の呼び出しはすべて、同じ具象型の値を使用しなければなりません。矛盾した型のStoreは、Store(nil)と同様にパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="61fc43e10839248a6ca4c0ad01079c0c4ad0ec37" translate="yes" xml:space="preserve">
          <source>StoreInt32 atomically stores val into *addr.</source>
          <target state="translated">StoreInt32 アトミックにvalを*addrに格納します。</target>
        </trans-unit>
        <trans-unit id="7914e40a268c91ed6c78dd3a0c674684e23beca2" translate="yes" xml:space="preserve">
          <source>StoreInt64 atomically stores val into *addr.</source>
          <target state="translated">StoreInt64 は val を *addr にアトミックに格納します。</target>
        </trans-unit>
        <trans-unit id="3bd4e783553f00f03c188a415e3661fa8de191b3" translate="yes" xml:space="preserve">
          <source>StorePointer atomically stores val into *addr.</source>
          <target state="translated">StorePointerは,原子的にvalを*addrに格納します.</target>
        </trans-unit>
        <trans-unit id="9cc88c9dca1de73040dfd90e6d827a5b531c64fe" translate="yes" xml:space="preserve">
          <source>StoreUint32 atomically stores val into *addr.</source>
          <target state="translated">StoreUint32 は、val を *addr にアトミックに格納します。</target>
        </trans-unit>
        <trans-unit id="e11c1fe521ea309905b20e2bda18135e66472a1e" translate="yes" xml:space="preserve">
          <source>StoreUint64 atomically stores val into *addr.</source>
          <target state="translated">StoreUint64 は val を *addr にアトミックに格納します。</target>
        </trans-unit>
        <trans-unit id="644096d645019d8a2ba6cbc4d305a2699fe9059f" translate="yes" xml:space="preserve">
          <source>StoreUintptr atomically stores val into *addr.</source>
          <target state="translated">StoreUintptr アトミックにvalを*addrに格納します。</target>
        </trans-unit>
        <trans-unit id="cab8594aca23f91dcc0728ca91d9d20dcd26b690" translate="yes" xml:space="preserve">
          <source>StreamReader</source>
          <target state="translated">StreamReader</target>
        </trans-unit>
        <trans-unit id="2a7fc943079fc92f6a989794ba51133e347d57cd" translate="yes" xml:space="preserve">
          <source>StreamReader wraps a Stream into an io.Reader. It calls XORKeyStream to process each slice of data which passes through.</source>
          <target state="translated">StreamReader は Stream を io.Reader にラップします。XORKeyStreamを呼び出して、通過するデータの各スライスを処理します。</target>
        </trans-unit>
        <trans-unit id="232a89f73446348f72f684c82d07ed788b848a3a" translate="yes" xml:space="preserve">
          <source>StreamWriter</source>
          <target state="translated">StreamWriter</target>
        </trans-unit>
        <trans-unit id="fc13aaf005c735ab0e4aa5176b6af67540be3a8b" translate="yes" xml:space="preserve">
          <source>StreamWriter wraps a Stream into an io.Writer. It calls XORKeyStream to process each slice of data which passes through. If any Write call returns short then the StreamWriter is out of sync and must be discarded. A StreamWriter has no internal buffering; Close does not need to be called to flush write data.</source>
          <target state="translated">StreamWriter は Stream を io.Writer にラップします。XORKeyStream を呼び出して、通過するデータの各スライスを処理します。Write コールがショートを返す場合は、StreamWriter は同期が取れていないので破棄しなければなりません。書込みデータをフラッシュするために Close を呼び出す必要はありません。</target>
        </trans-unit>
        <trans-unit id="61135993a6e29b59a8df3075ca0d3838f94b8d90" translate="yes" xml:space="preserve">
          <source>Strict creates a new encoding identical to enc except with strict decoding enabled. In this mode, the decoder requires that trailing padding bits are zero, as described in RFC 4648 section 3.5.</source>
          <target state="translated">Strict は、strict デコーディングを有効にする以外は enc と同じ新しいエンコーディングを作成します。このモードでは、デコーダは、RFC 4648のセクション3.5で記述されているように、末尾のパディングビットが0であることを要求する。</target>
        </trans-unit>
        <trans-unit id="396b00d6c7e8c1194e27297cd11ae3108cdacd84" translate="yes" xml:space="preserve">
          <source>String Conversions</source>
          <target state="translated">文字列の変換</target>
        </trans-unit>
        <trans-unit id="bd47be7c94487cbe10dfe0be4138815d0017463a" translate="yes" xml:space="preserve">
          <source>String and slice of bytes (treated equivalently with these verbs):</source>
          <target state="translated">文字列とバイトのスライス(これらの動詞と同等に扱われる)。</target>
        </trans-unit>
        <trans-unit id="8296a76a0e5d96744b29fe69547a88fb9387440d" translate="yes" xml:space="preserve">
          <source>String defines a string flag with specified name, default value, and usage string. The return value is the address of a string variable that stores the value of the flag.</source>
          <target state="translated">Stringは、指定された名前、デフォルト値、使用文字列を持つ文字列フラグを定義します。戻り値は、フラグの値を格納する文字列変数のアドレスです。</target>
        </trans-unit>
        <trans-unit id="9e4dec141cb0219423f92167f6932232e80cdb9e" translate="yes" xml:space="preserve">
          <source>String extracts string from COFF string table st at offset start.</source>
          <target state="translated">文字列は、オフセット開始時のCOFF文字列テーブルstから文字列を抽出します。</target>
        </trans-unit>
        <trans-unit id="dcd688eb0f2fbd5e407777a28042b64595f0fef8" translate="yes" xml:space="preserve">
          <source>String formats the address as a valid RFC 5322 address. If the address's name contains non-ASCII characters the name will be rendered according to RFC 2047.</source>
          <target state="translated">文字列は、アドレスを有効な RFC 5322 アドレスとしてフォーマットします。アドレスの名前に非 ASCII 文字が含まれている場合、その名前は RFC 2047 に従って表示されます。</target>
        </trans-unit>
        <trans-unit id="8d105c469495a5d5f8062e63371ab613869f1e04" translate="yes" xml:space="preserve">
          <source>String formats x like x.Text('g', 10). (String must be called explicitly, Float.Format does not support %s verb.)</source>
          <target state="translated">文字列は x.Text('g',10)のように x をフォーマットします。(Stringは明示的に呼び出す必要があります。Float.Formatは%s動詞をサポートしていません)。</target>
        </trans-unit>
        <trans-unit id="01748cd6407645feded183980c6258bbb0d669e6" translate="yes" xml:space="preserve">
          <source>String implements the Var interface. To get the unquoted string use Value.</source>
          <target state="translated">String は Var インターフェースを実装しています。引用符で囲まれていない文字列を取得するには Value を使用します。</target>
        </trans-unit>
        <trans-unit id="c388848919b90e3a01d2d3408f1ebde77b3f2a74" translate="yes" xml:space="preserve">
          <source>String is a ValueConverter that converts its input to a string. If the value is already a string or []byte, it's unchanged. If the value is of another type, conversion to string is done with fmt.Sprintf(&quot;%v&quot;, v).</source>
          <target state="translated">Stringは、その入力を文字列に変換するValueConverterです。値が既に文字列または[]バイトである場合、それは変更されません。値が別の型の場合、文字列への変換は fmt.Sprintf(&quot;%v&quot;,v)で行われます。</target>
        </trans-unit>
        <trans-unit id="014933e8c2aa543fd850622d80731a6a9386778b" translate="yes" xml:space="preserve">
          <source>String is a string variable, and satisfies the Var interface.</source>
          <target state="translated">Stringは文字列変数で、Varインターフェースを満たしています。</target>
        </trans-unit>
        <trans-unit id="83826ec6cada0ae1502e1aff2c5460723f559354" translate="yes" xml:space="preserve">
          <source>String reassembles the URL into a valid URL string. The general form of the result is one of:</source>
          <target state="translated">Stringは、URLを有効なURL文字列に再構築します。結果の一般的な形式は以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="1a1a1e5164ab79c22ae49942d67ef810bdba6ad9" translate="yes" xml:space="preserve">
          <source>String returns a descriptive name for the time zone information, corresponding to the name argument to LoadLocation or FixedZone.</source>
          <target state="translated">String は、LoadLocation または FixedZone の引数である name に対応するタイムゾーン情報の説明的な名前を返します。</target>
        </trans-unit>
        <trans-unit id="aa4d82115db66e350e92f539c5427c79fdfb58ed" translate="yes" xml:space="preserve">
          <source>String returns a human-readable description of c. It is intended only for debugging. In particular, it is not suitable for use as input to a shell. The output of String may vary across Go releases.</source>
          <target state="translated">String は、人間が読めるような c の記述を返します。特に、シェルへの入力としての使用には適していません。Stringの出力は、Goのリリースによって異なる場合があります。</target>
        </trans-unit>
        <trans-unit id="55bb95d4983983ad2bde74eafe604eb90028dc18" translate="yes" xml:space="preserve">
          <source>String returns a string in one of several forms:</source>
          <target state="translated">Stringは、いくつかの形式のうちの1つで文字列を返します。</target>
        </trans-unit>
        <trans-unit id="345f70fca28ee043619061f7f87c019dadbba1fa" translate="yes" xml:space="preserve">
          <source>String returns a string representation of p like &quot;(3,4)&quot;.</source>
          <target state="translated">Stringは、「(3,4)」のようにpを文字列で表現したものを返します。</target>
        </trans-unit>
        <trans-unit id="3448960ebb659e656c5021f0b36127dab5b9d619" translate="yes" xml:space="preserve">
          <source>String returns a string representation of r like &quot;(3,4)-(6,5)&quot;.</source>
          <target state="translated">Stringは、&quot;(3,4)-(6,5)のようなrの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="1b35bdca294966810231e9db40a5c473f629af73" translate="yes" xml:space="preserve">
          <source>String returns a string representation of the scope, for debugging.</source>
          <target state="translated">String は、デバッグ用にスコープの文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="40800a9640894f3a3149f9e54d890572a4beda8c" translate="yes" xml:space="preserve">
          <source>String returns a string representation of the sequence r, roughly following the RFC 2253 Distinguished Names syntax.</source>
          <target state="translated">String は、RFC 2253 の Distinguished Names 構文にほぼ従った、シーケンス r の文字列表現を返します。</target>
        </trans-unit>
        <trans-unit id="7a196811cde011797851e8bcd4ea585d5971e7d9" translate="yes" xml:space="preserve">
          <source>String returns a string representation of x in the form &quot;a/b&quot; (even if b == 1).</source>
          <target state="translated">Stringは、xを &quot;a/b &quot;の形式で文字列表現したものを返します(b ==1であっても)。</target>
        </trans-unit>
        <trans-unit id="7b4474871a59eadc44e6ad3cc370b5d1fd6eabd1" translate="yes" xml:space="preserve">
          <source>String returns a string representing the duration in the form &quot;72h3m0.5s&quot;. Leading zero units are omitted. As a special case, durations less than one second format use a smaller unit (milli-, micro-, or nanoseconds) to ensure that the leading digit is non-zero. The zero duration formats as 0s.</source>
          <target state="translated">String は、&quot;72h3m0.5s &quot;という形式の持続時間を表す文字列を返します。先頭のゼロの単位は省略されます。特殊なケースとして、1秒未満の持続時間は、最初の桁がゼロでないことを確実にするために、より小さい単位(ミリ秒、マイクロ秒、またはナノ秒)を使用してフォーマットされます。ゼロの持続時間は 0s としてフォーマットされます。</target>
        </trans-unit>
        <trans-unit id="f5e00dac202df16525dc65e74932811ab9752d4e" translate="yes" xml:space="preserve">
          <source>String returns a summary of the benchmark results. It follows the benchmark result line format from &lt;a href=&quot;https://golang.org/design/14313-benchmark-format&quot;&gt;https://golang.org/design/14313-benchmark-format&lt;/a&gt;, not including the benchmark name. Extra metrics override built-in metrics of the same name. String does not include allocs/op or B/op, since those are reported by MemString.</source>
          <target state="translated">文字列は、ベンチマーク結果の概要を返します。これは、&lt;a href=&quot;https://golang.org/design/14313-benchmark-format&quot;&gt;https：&lt;/a&gt; //golang.org/design/14313-benchmark-formatのベンチマーク結果行フォーマットに従います。ベンチマーク名は含まれません。追加のメトリックは、同じ名前の組み込みメトリックをオーバーライドします。文字列にはallocs / opまたはB / opは含まれません。これらはMemStringによって報告されるためです。</target>
        </trans-unit>
        <trans-unit id="a1320f96272e68242e45787bdcf443a45a5d4acb" translate="yes" xml:space="preserve">
          <source>String returns the CIDR notation of n like &quot;192.0.2.0/24&quot; or &quot;2001:db8::/48&quot; as defined in RFC 4632 and RFC 4291. If the mask is not in the canonical form, it returns the string which consists of an IP address, followed by a slash character and a mask expressed as hexadecimal form with no punctuation like &quot;198.51.100.0/c000ff00&quot;.</source>
          <target state="translated">Stringは、RFC 4632とRFC 4291で定義されている「192.0.0.2.0/24」や「2001:db8::/48」のようなnのCIDR表記を返す。マスクが正規表現でない場合は、IPアドレスとスラッシュ文字の後に &quot;198.51.100.0/c000ff00 &quot;のような句読点のない16進数で表現されたマスクからなる文字列を返します。</target>
        </trans-unit>
        <trans-unit id="f55b73801df68c7614969aee1732afd9d5e38010" translate="yes" xml:space="preserve">
          <source>String returns the English name of the day (&quot;Sunday&quot;, &quot;Monday&quot;, ...).</source>
          <target state="translated">文字列は、その日の英語名(「日曜日」「月曜日」「...」)を返します。</target>
        </trans-unit>
        <trans-unit id="ffc4d02cde72706d98e09a395ce956d9d89dd7b5" translate="yes" xml:space="preserve">
          <source>String returns the English name of the month (&quot;January&quot;, &quot;February&quot;, ...).</source>
          <target state="translated">文字列は、月の英語名(&quot;1月&quot;、&quot;2月&quot;、...)を返します。</target>
        </trans-unit>
        <trans-unit id="d35cab9a7681d28fe5cfa98797f716ccf4a8148e" translate="yes" xml:space="preserve">
          <source>String returns the accumulated string.</source>
          <target state="translated">Stringは、蓄積された文字列を返します。</target>
        </trans-unit>
        <trans-unit id="6a561a9c0ca3a5d45a6220d79144ae4e4f68eaba" translate="yes" xml:space="preserve">
          <source>String returns the contents of the unread portion of the buffer as a string. If the Buffer is a nil pointer, it returns &quot;&amp;lt;nil&amp;gt;&quot;.</source>
          <target state="translated">文字列は、バッファの未読部分の内容を文字列として返します。Bufferがnilポインターの場合、 &quot;&amp;lt;nil&amp;gt;&quot;を返します。</target>
        </trans-unit>
        <trans-unit id="20281079c25e7469dba253811f0a64eb9af0ad50" translate="yes" xml:space="preserve">
          <source>String returns the decimal representation of x as generated by x.Text(10).</source>
          <target state="translated">文字列は、x.Text(10)で生成された x の 10 進表現を返します。</target>
        </trans-unit>
        <trans-unit id="c1f7f34151f59a07d632aef98f6cf3db75ca331f" translate="yes" xml:space="preserve">
          <source>String returns the encoded userinfo information in the standard form of &quot;username[:password]&quot;.</source>
          <target state="translated">文字列は、&quot;username[:password]&quot;という標準形式でエンコードされたユーザ情報を返す。</target>
        </trans-unit>
        <trans-unit id="c9f4b613c07a2c7f71577fe196567617d0abff90" translate="yes" xml:space="preserve">
          <source>String returns the hexadecimal form of m, with no punctuation.</source>
          <target state="translated">文字列は、句読点のない16進数形式のmを返します。</target>
        </trans-unit>
        <trans-unit id="a803d186b1c90a1c53ad70e26c40836efc312842" translate="yes" xml:space="preserve">
          <source>String returns the literal text of the number.</source>
          <target state="translated">文字列は、番号のリテラルテキストを返します。</target>
        </trans-unit>
        <trans-unit id="efd718d51f4b6dbacf2db82a320892ae4b63a670" translate="yes" xml:space="preserve">
          <source>String returns the name of k.</source>
          <target state="translated">文字列は、kの名前を返します。</target>
        </trans-unit>
        <trans-unit id="750dd1515ee90a846665f6d5d112993b3669e476" translate="yes" xml:space="preserve">
          <source>String returns the name of the transaction isolation level.</source>
          <target state="translated">String は、トランザクション分離レベルの名前を返します。</target>
        </trans-unit>
        <trans-unit id="e794984ac30a476fc607ba49d30074600724b1fd" translate="yes" xml:space="preserve">
          <source>String returns the serialization of the cookie for use in a Cookie header (if only Name and Value are set) or a Set-Cookie response header (if other fields are set). If c is nil or c.Name is invalid, the empty string is returned.</source>
          <target state="translated">String は、Cookie ヘッダ (Name と Value のみが設定されている場合)または Set-Cookie レスポンスヘッダ (他のフィールドが設定されている場合)で使用するための Cookie のシリアライズを返します。c が nil であるか、c.Name が無効な場合、空の文字列が返されます。</target>
        </trans-unit>
        <trans-unit id="fe713a69a5fd2ac5cb84c706517fb895d0d57913" translate="yes" xml:space="preserve">
          <source>String returns the source text used to compile the regular expression.</source>
          <target state="translated">文字列は、正規表現のコンパイルに使用したソーステキストを返します。</target>
        </trans-unit>
        <trans-unit id="34bacca8ec4eef4ee78833a67f79a6eef6da5be0" translate="yes" xml:space="preserve">
          <source>String returns the string corresponding to the token tok. For operators, delimiters, and keywords the string is the actual token character sequence (e.g., for the token ADD, the string is &quot;+&quot;). For all other tokens the string corresponds to the token constant name (e.g. for the token IDENT, the string is &quot;IDENT&quot;).</source>
          <target state="translated">String は、トークン・トークに対応する文字列を返します。演算子、デリミタ、キーワードについては、文字列は実際のトークンの文字列となります(例えば、トークンADDについては文字列は &quot;+&quot;となります)。それ以外のすべてのトークンについては、文字列はトークン定数名に対応します(例えば、トークンIDENTについては、文字列は &quot;IDENT&quot;)。</target>
        </trans-unit>
        <trans-unit id="2d88168daac6375a514f336433bd215fb612a6a9" translate="yes" xml:space="preserve">
          <source>String returns the string form of n, roughly following the RFC 2253 Distinguished Names syntax.</source>
          <target state="translated">String は、RFC 2253 の Distinguished Names 構文にほぼ従った n の文字列形式を返します。</target>
        </trans-unit>
        <trans-unit id="65a433aa544a0c7b3431068c5cc7f107bc02e8c8" translate="yes" xml:space="preserve">
          <source>String returns the string form of the IP address ip. It returns one of 4 forms:</source>
          <target state="translated">String は、IP アドレス ip の文字列形式を返します。4つの形式のいずれかを返します。</target>
        </trans-unit>
        <trans-unit id="77e4b34a03bfe1d41ef0627a6a3eef76345118dd" translate="yes" xml:space="preserve">
          <source>String returns the string v's underlying value, as a string. String is a special case because of Go's String method convention. Unlike the other getters, it does not panic if v's Kind is not String. Instead, it returns a string of the form &quot;&amp;lt;T value&amp;gt;&quot; where T is v's type. The fmt package treats Values specially. It does not call their String method implicitly but instead prints the concrete values they hold.</source>
          <target state="translated">文字列は、文字列として文字列vの基礎となる値を返します。GoのStringメソッドの規則により、Stringは特殊なケースです。他のゲッターとは異なり、vの種類が文字列でない場合はパニックになりません。代わりに、 &quot;&amp;lt;T値&amp;gt;&quot;という形式の文字列を返します。Tはvの型です。fmtパッケージは値を特別に扱います。Stringメソッドを暗黙的に呼び出すのではなく、それらが保持する具体的な値を出力します。</target>
        </trans-unit>
        <trans-unit id="da3ada59fed13cf9c42e28f35ce824b152ed6695" translate="yes" xml:space="preserve">
          <source>String returns the time formatted using the format string</source>
          <target state="translated">文字列は、フォーマット文字列を使用してフォーマットされた時刻を返します。</target>
        </trans-unit>
        <trans-unit id="7582d0695c8835ce2d6fd48b6b11691af0fd874b" translate="yes" xml:space="preserve">
          <source>String returns the value v as a string. String is a special case because of Go's String method convention. Unlike the other getters, it does not panic if v's Type is not TypeString. Instead, it returns a string of the form &quot;&amp;lt;T&amp;gt;&quot; or &quot;&amp;lt;T: V&amp;gt;&quot; where T is v's type and V is a string representation of v's value.</source>
          <target state="translated">文字列は値vを文字列として返します。GoのStringメソッドの規則により、Stringは特殊なケースです。他のゲッターとは異なり、vのTypeがTypeStringでない場合でもパニックになりません。代わりに、 &quot;&amp;lt;T&amp;gt;&quot;または &quot;&amp;lt;T：V&amp;gt;&quot;という形式の文字列を返します。Tはvの型で、Vはvの値の文字列表現です。</target>
        </trans-unit>
        <trans-unit id="b5780fb112a6b774b6985415c1ab7539f30b0d21" translate="yes" xml:space="preserve">
          <source>String values encode as JSON strings coerced to valid UTF-8, replacing invalid bytes with the Unicode replacement rune. So that the JSON will be safe to embed inside HTML &amp;lt;script&amp;gt; tags, the string is encoded using HTMLEscape, which replaces &quot;&amp;lt;&quot;, &quot;&amp;gt;&quot;, &quot;&amp;amp;&quot;, U+2028, and U+2029 are escaped to &quot;\u003c&quot;,&quot;\u003e&quot;, &quot;\u0026&quot;, &quot;\u2028&quot;, and &quot;\u2029&quot;. This replacement can be disabled when using an Encoder, by calling SetEscapeHTML(false).</source>
          <target state="translated">文字列値は、有効なUTF-8に強制変換されたJSON文字列としてエンコードされ、無効なバイトがUnicode置換ルーンに置き換えられます。JSONがHTML &amp;lt;script&amp;gt;タグ内に安全に埋め込まれるように、文字列はHTMLEscapeを使用してエンコードされます。これは、「&amp;lt;」、「&amp;gt;」、「＆」、U + 2028、およびU + 2029に置き換わり、「\」にエスケープされます。 u003c &quot;、&quot; \ u003e &quot;、&quot; \ u0026 &quot;、&quot; \ u2028 &quot;、および&quot; \ u2029 &quot;。エンコーダを使用する場合、SetEscapeHTML（false）を呼び出すことにより、この置換を無効にできます。</target>
        </trans-unit>
        <trans-unit id="86940bb85d221e97a38bc1e113fc6bce034c8750" translate="yes" xml:space="preserve">
          <source>StringBytePtr returns a pointer to a NUL-terminated array of bytes. If s contains a NUL byte this function panics instead of returning an error.</source>
          <target state="translated">StringBytePtr は、NUL で終端するバイトの配列へのポインタを返します。s に NUL バイトが含まれている場合、この関数はエラーを返さずにパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="c0623ccf68cc35082d287f89796544274ff86c91" translate="yes" xml:space="preserve">
          <source>StringByteSlice converts a string to a NUL-terminated []byte, If s contains a NUL byte this function panics instead of returning an error.</source>
          <target state="translated">StringByteSliceは文字列をNUL終端の[]バイトに変換します。</target>
        </trans-unit>
        <trans-unit id="6bf1e10cb60d4363fb37f7da731443afa2a654e2" translate="yes" xml:space="preserve">
          <source>StringHeader is the runtime representation of a string. It cannot be used safely or portably and its representation may change in a later release. Moreover, the Data field is not sufficient to guarantee the data it references will not be garbage collected, so programs must keep a separate, correctly typed pointer to the underlying data.</source>
          <target state="translated">StringHeaderは、文字列のランタイム表現です。安全に使用したり移植したりすることはできず、その表現は後のリリースで変更される可能性があります。さらに、Dataフィールドは、参照するデータがガベージコレクションされないことを保証するのに十分ではないので、プログラムは、基礎となるデータへの別個の正しく型付けされたポインタを保持しなければなりません。</target>
        </trans-unit>
        <trans-unit id="a97933503d7359e70c5bcc6d71f20f23e72ff484" translate="yes" xml:space="preserve">
          <source>StringNode holds a string constant. The value has been &quot;unquoted&quot;.</source>
          <target state="translated">StringNodeは文字列定数を保持しています。値は &quot;unquoted &quot;になっています。</target>
        </trans-unit>
        <trans-unit id="4e2dc56d882f4e247f4c8c91d09f7ca7c92151b0" translate="yes" xml:space="preserve">
          <source>StringSlice attaches the methods of Interface to []string, sorting in increasing order.</source>
          <target state="translated">StringSliceは、Interfaceのメソッドを[]stringにアタッチして、順番にソートしていきます。</target>
        </trans-unit>
        <trans-unit id="0ccdd69f6b44471ac8719f7a4d5092264f1d1540" translate="yes" xml:space="preserve">
          <source>StringSlicePtr converts a slice of strings to a slice of pointers to NUL-terminated byte arrays. If any string contains a NUL byte this function panics instead of returning an error.</source>
          <target state="translated">StringSlicePtr は文字列のスライスを NUL 終端のバイト配列へのポインタのスライスに変換します。文字列に NUL バイトが含まれている場合、この関数はエラーを返さずにパニックに陥ります。</target>
        </trans-unit>
        <trans-unit id="58cd2c4c0c64b3e8b63116e619c1216921aee8f5" translate="yes" xml:space="preserve">
          <source>StringTable is a COFF string table.</source>
          <target state="translated">StringTableはCOFF文字列テーブルです。</target>
        </trans-unit>
        <trans-unit id="cf2c21cf4463c1c95fd9d9c1165bec97a40c80e4" translate="yes" xml:space="preserve">
          <source>StringVal returns the Go string value of x, which must be a String or an Unknown. If x is Unknown, the result is &quot;&quot;.</source>
          <target state="translated">StringVal は、x の Go 文字列の値を返します。x が不明の場合、結果は &quot;&quot; です。</target>
        </trans-unit>
        <trans-unit id="d9073eff948f092d1e822cdc4b90545ac7f58c79" translate="yes" xml:space="preserve">
          <source>StringVar defines a string flag with specified name, default value, and usage string. The argument p points to a string variable in which to store the value of the flag.</source>
          <target state="translated">StringVarは、指定された名前、デフォルト値、使用文字列を持つ文字列フラグを定義します。引数pは、フラグの値を格納する文字列変数を指します。</target>
        </trans-unit>
        <trans-unit id="8523e16e4f3d17cbbcc1796a5175f67569825d49" translate="yes" xml:space="preserve">
          <source>StringWriter is the interface that wraps the WriteString method.</source>
          <target state="translated">StringWriterは、WriteStringメソッドをラップするインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="2968f2bfae46d2fc485efc7b71be92497e030111" translate="yes" xml:space="preserve">
          <source>Stringer</source>
          <target state="translated">Stringer</target>
        </trans-unit>
        <trans-unit id="58829a9ebd1b847fb0ad45cdde0851c334ed441d" translate="yes" xml:space="preserve">
          <source>Stringer is implemented by any value that has a String method, which defines the &amp;ldquo;native&amp;rdquo; format for that value. The String method is used to print values passed as an operand to any format that accepts a string or to an unformatted printer such as Print.</source>
          <target state="translated">ストリンガーは、その値の「ネイティブ」フォーマットを定義するStringメソッドを持つ任意の値によって実装されます。Stringメソッドは、文字列を受け入れる任意の形式またはPrintなどの未フォーマットのプリンターにオペランドとして渡される値を印刷するために使用されます。</target>
        </trans-unit>
        <trans-unit id="3816c4beac471c733eed1d91c213f8c2b6a29262" translate="yes" xml:space="preserve">
          <source>Strings</source>
          <target state="translated">Strings</target>
        </trans-unit>
        <trans-unit id="906a27ee40bd23a1553b39eb16be0c8e8ac3e949" translate="yes" xml:space="preserve">
          <source>Strings and slices of bytes are sent as an unsigned count followed by that many uninterpreted bytes of the value.</source>
          <target state="translated">文字列とバイトのスライスは、その値の未解釈バイト数が続く符号なしのカウントとして送信されます。</target>
        </trans-unit>
        <trans-unit id="faac2cc38ba743bbc17ba9acb7964aa6cee65d73" translate="yes" xml:space="preserve">
          <source>Strings must be UTF-8 encoded and may only contain Unicode code points U+0001 through U+00FF, due to limitations of the GZIP file format.</source>
          <target state="translated">文字列はUTF-8でエンコードされている必要があり、GZIPファイル形式の制限のため、UnicodeコードポイントU+0001~U+00FFのみを含むことができます。</target>
        </trans-unit>
        <trans-unit id="f76921542e09ce2202753a5d0b5a9e24e8b8a263" translate="yes" xml:space="preserve">
          <source>Strings sorts a slice of strings in increasing order.</source>
          <target state="translated">Stringsは、文字列のスライスを順にソートします。</target>
        </trans-unit>
        <trans-unit id="3d93c8594f1a8a4b01949156c04f8f3f3ae7fd2a" translate="yes" xml:space="preserve">
          <source>StringsAreSorted tests whether a slice of strings is sorted in increasing order.</source>
          <target state="translated">StringsAreSorted は、文字列のスライスが昇順にソートされているかどうかをテストします。</target>
        </trans-unit>
        <trans-unit id="13ae2dda2de94ac9d40b6ba17fece2797835c04a" translate="yes" xml:space="preserve">
          <source>StripPrefix</source>
          <target state="translated">StripPrefix</target>
        </trans-unit>
        <trans-unit id="e0a5f88c187543f04de90ac6fd0379250c9778df" translate="yes" xml:space="preserve">
          <source>StripPrefix returns a handler that serves HTTP requests by removing the given prefix from the request URL's Path and invoking the handler h. StripPrefix handles a request for a path that doesn't begin with prefix by replying with an HTTP 404 not found error.</source>
          <target state="translated">StripPrefix は、リクエスト URL の Path から与えられたプレフィックスを削除してハンドラ h を呼び出すことで HTTP リクエストに対応するハンドラを返します。</target>
        </trans-unit>
        <trans-unit id="39170b61b74a11d6a192ff9863dfa73aaecba21c" translate="yes" xml:space="preserve">
          <source>Struct values are deeply equal if their corresponding fields, both exported and unexported, are deeply equal.</source>
          <target state="translated">構造体の値は、エクスポートされたフィールドとエクスポートされていないフィールドの対応するフィールドの両方が深く等しくなると、深く等しくなります。</target>
        </trans-unit>
        <trans-unit id="fb5bb421400cdac0575f807d47566c64d1f46c0f" translate="yes" xml:space="preserve">
          <source>Struct values encode as JSON objects. Each exported struct field becomes a member of the object, using the field name as the object key, unless the field is omitted for one of the reasons given below.</source>
          <target state="translated">構造体の値は、JSON オブジェクトとしてエンコードされます。エクスポートされた各構造体フィールドは、以下の理由でフィールドが省略されない限り、フィールド名をオブジェクトのキーとして使用してオブジェクトのメンバになります。</target>
        </trans-unit>
        <trans-unit id="0b823e55e4d9782e91674576a6c2dba2dbfb679a" translate="yes" xml:space="preserve">
          <source>StructOf</source>
          <target state="translated">StructOf</target>
        </trans-unit>
        <trans-unit id="cbecd3176d1c216f7d05eaf053a4641373b34f6b" translate="yes" xml:space="preserve">
          <source>StructOf currently does not generate wrapper methods for embedded fields and panics if passed unexported StructFields. These limitations may be lifted in a future version.</source>
          <target state="translated">StructOf は現在、埋め込まれたフィールドのラッパーメソッドを生成せず、ポートされていない StructFields が渡された場合にパニックになります。これらの制限は、将来のバージョンで解除される可能性があります。</target>
        </trans-unit>
        <trans-unit id="e272272dfcabba6b0a57032693b1247f7d907d03" translate="yes" xml:space="preserve">
          <source>StructOf returns the struct type containing fields. The Offset and Index fields are ignored and computed as they would be by the compiler.</source>
          <target state="translated">StructOf は、フィールドを含む構造体型を返します。オフセット・フィールドとインデックス・フィールドは無視され、コンパイラによって計算されます。</target>
        </trans-unit>
        <trans-unit id="642ea82e69d222e31d0a11979f4762edc849aa8f" translate="yes" xml:space="preserve">
          <source>StructTag</source>
          <target state="translated">StructTag</target>
        </trans-unit>
        <trans-unit id="666cf050832b24dac5a22e670aae0c296886ba23" translate="yes" xml:space="preserve">
          <source>StructTag.Lookup</source>
          <target state="translated">StructTag.Lookup</target>
        </trans-unit>
        <trans-unit id="5f4f3284caaeebe32585ec344848f50378d011bc" translate="yes" xml:space="preserve">
          <source>Structs are sent as a sequence of (field number, field value) pairs. The field value is sent using the standard gob encoding for its type, recursively. If a field has the zero value for its type (except for arrays; see above), it is omitted from the transmission. The field number is defined by the type of the encoded struct: the first field of the encoded type is field 0, the second is field 1, etc. When encoding a value, the field numbers are delta encoded for efficiency and the fields are always sent in order of increasing field number; the deltas are therefore unsigned. The initialization for the delta encoding sets the field number to -1, so an unsigned integer field 0 with value 7 is transmitted as unsigned delta = 1, unsigned value = 7 or (01 07). Finally, after all the fields have been sent a terminating mark denotes the end of the struct. That mark is a delta=0 value, which has representation (00).</source>
          <target state="translated">構造体は、(フィールド番号、フィールド値)のペアのシーケンスとして送られます。フィールド値は、その型に対して標準的なgobエンコーディングを用いて再帰的に送信されます。フィールドがその型に対してゼロ値を持つ場合(配列を除く、上記参照)、送信から省略されます。フィールド番号は、符号化された構造体の型によって定義されます:符号化された型の最初のフィールドはフィールド0、2番目のフィールドはフィールド1などです。値をエンコードする際には、効率化のためにフィールド番号はデルタエンコードされ、フィールドは常にフィールド番号の高い順に送信されます。デルタ符号化の初期化はフィールド番号を-1 に設定するので、値 7 の符号なし整数フィールド 0 は、符号なしデルタ=1、符号なし値=7、または (01 07)として送信されます。最後に、すべてのフィールドが送信された後、終端マークが構造体の終了を示します。このマークは delta=0 の値で、表現 (00)を持っています。</target>
        </trans-unit>
        <trans-unit id="7dc46671ebabbdf3c46aadccd97f8c490eefc52c" translate="yes" xml:space="preserve">
          <source>Structs, arrays and slices are also supported. Structs encode and decode only exported fields. Strings and arrays of bytes are supported with a special, efficient representation (see below). When a slice is decoded, if the existing slice has capacity the slice will be extended in place; if not, a new array is allocated. Regardless, the length of the resulting slice reports the number of elements decoded.</source>
          <target state="translated">構造体、配列、スライスもサポートされています。構造体は、エクスポートされたフィールドのみをエンコードおよびデコードします。文字列とバイトの配列は、特別な効率的な表現でサポートされています(後述)。スライスがデコードされる際、既存のスライスに容量がある場合は、そのスライスがその場で拡張されます。そうでない場合は、新しい配列が割り当てられます。それに関わらず、結果として得られるスライスの長さは、デコードされた要素の数を報告します。</target>
        </trans-unit>
        <trans-unit id="ad78f09f9c6b3087d8e72e4530ecc70c4956979a" translate="yes" xml:space="preserve">
          <source>Structure Preservation Property: &quot;... when a template author writes an HTML tag in a safe templating language, the browser will interpret the corresponding portion of the output as a tag regardless of the values of untrusted data, and similarly for other structures such as attribute boundaries and JS and CSS string boundaries.&quot;</source>
          <target state="translated">構造体保存プロパティ。&quot;テンプレート作成者が安全なテンプレート言語でHTMLタグを書くと、ブラウザは信頼されないデータの値に関係なく、出力の対応する部分をタグとして解釈し、同様に属性境界やJSやCSS文字列境界のような他の構造に対しても解釈します。</target>
        </trans-unit>
        <trans-unit id="a3c9ca613cd987d897ef5275ec8d3b6be7186d1f" translate="yes" xml:space="preserve">
          <source>Sub returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Sub は、x,y,borrow の差分を返します:diff=x-y-borrow。borrow 入力は 0 または 1 でなければなりません.borrowOut出力は,0または1であることが保証されています.</target>
        </trans-unit>
        <trans-unit id="61c41cb657724bf35da0dad82b0d5dee3326e95d" translate="yes" xml:space="preserve">
          <source>Sub returns the duration t-u. If the result exceeds the maximum (or minimum) value that can be stored in a Duration, the maximum (or minimum) duration will be returned. To compute t-d for a duration d, use t.Add(-d).</source>
          <target state="translated">Sub はデュレーション t-u を返します。結果がデュレーションに格納できる最大値(または最小値)を超える場合、最大値(または最小値)のデュレーションが返されます。持続時間dに対してt-dを計算するには、t.Add(-d)を使用します。</target>
        </trans-unit>
        <trans-unit id="9a9cccdf849236c7b5afc32fedeaf0e730cf15fd" translate="yes" xml:space="preserve">
          <source>Sub returns the rectangle r translated by -p.</source>
          <target state="translated">Subは、-pで変換された矩形rを返します。</target>
        </trans-unit>
        <trans-unit id="c74b307e6862c7c0fdbabb48e4f241316eca6f53" translate="yes" xml:space="preserve">
          <source>Sub returns the vector p-q.</source>
          <target state="translated">Sub はベクトル p-q を返します。</target>
        </trans-unit>
        <trans-unit id="2660992e01b4593ff7e0d2ea96dbc6a6fcdbbc82" translate="yes" xml:space="preserve">
          <source>Sub sets z to the difference x-y and returns z.</source>
          <target state="translated">サブは、x-y の差分に z をセットして z を返します。</target>
        </trans-unit>
        <trans-unit id="07c120e2c4cb601d9bfe9da745d95ee84f5c8f23" translate="yes" xml:space="preserve">
          <source>Sub sets z to the rounded difference x-y and returns z. Precision, rounding, and accuracy reporting are as for Add. Sub panics with ErrNaN if x and y are infinities with equal signs. The value of z is undefined in that case.</source>
          <target state="translated">Subは、zを丸めた差x-yにセットしてzを返します。精度、丸め、精度の報告は Add の場合と同様です。Subは、xとyが等号の無限大の場合、ErrNaNでパニックになります。この場合、zの値は未定義です。</target>
        </trans-unit>
        <trans-unit id="821524c66883b61b23da230e1f7ac6f247b61c28" translate="yes" xml:space="preserve">
          <source>Sub-repositories</source>
          <target state="translated">Sub-repositories</target>
        </trans-unit>
        <trans-unit id="027b254161eaa851d3de87e3e3811c330b4b1cfe" translate="yes" xml:space="preserve">
          <source>Sub32 returns the difference of x, y and borrow, diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Sub32 は、x,y,borrow の差分 diff=x-y-borrow を返します。borrow 入力は 0 または 1 でなければなりません.borrowOut 出力は 0 または 1 であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="19abe5243ff65ef214d8cfd1ed7dd0d253eaaf1e" translate="yes" xml:space="preserve">
          <source>Sub64 returns the difference of x, y and borrow: diff = x - y - borrow. The borrow input must be 0 or 1; otherwise the behavior is undefined. The borrowOut output is guaranteed to be 0 or 1.</source>
          <target state="translated">Sub64 は、x,y,borrow の差分を返します:diff=x-y-borrow。borrow 入力は 0 または 1 でなければなりません.borrowOut出力は0か1であることが保証されています。</target>
        </trans-unit>
        <trans-unit id="3fc6e21e27e1d98c4a46c59e21cbbbe634de9bcb" translate="yes" xml:space="preserve">
          <source>SubImage returns an image representing the portion of the image p visible through r. The returned value shares pixels with the original image.</source>
          <target state="translated">SubImageは,画像pのうち,rを通して見える部分を表す画像を返します.</target>
        </trans-unit>
        <trans-unit id="19b094dbedb2add32a27c12c5c0b06b9d304fb7c" translate="yes" xml:space="preserve">
          <source>Subdirectories</source>
          <target state="translated">Subdirectories</target>
        </trans-unit>
        <trans-unit id="73a30231d9aabf0592839371dc3542545b7db703" translate="yes" xml:space="preserve">
          <source>SubexpIndex returns the index of the first subexpression with the given name, or -1 if there is no subexpression with that name.</source>
          <target state="translated">SubexpIndex は、指定した名前の最初の部分式のインデックスを返します。</target>
        </trans-unit>
        <trans-unit id="abb46f6f4b961e90d924a27858c117c84efd6aae" translate="yes" xml:space="preserve">
          <source>SubexpNames returns the names of the parenthesized subexpressions in this Regexp. The name for the first sub-expression is names[1], so that if m is a match slice, the name for m[i] is SubexpNames()[i]. Since the Regexp as a whole cannot be named, names[0] is always the empty string. The slice should not be modified.</source>
          <target state="translated">SubexpNamesは、このRegexp内の括弧で括られた副式の名前を返します。最初の副式の名前は names[1]であり、m がマッチスライスの場合、m[i]の名前は SubexpNames()[i]となります。Regexp全体に名前を付けることはできないので、names[0]は常に空の文字列となります。スライスを変更してはいけません。</target>
        </trans-unit>
        <trans-unit id="c9c047b864469812cfb4b3b886d30b5376a4d0df" translate="yes" xml:space="preserve">
          <source>Subjects returns a list of the DER-encoded subjects of all of the certificates in the pool.</source>
          <target state="translated">Subjects は、プール内のすべての証明書の DER エンコードされたサブジェクトのリストを返す。</target>
        </trans-unit>
        <trans-unit id="91e8bbbf1ff4c8e821148581549206c9787e494e" translate="yes" xml:space="preserve">
          <source>Subtests and Sub-benchmarks</source>
          <target state="translated">小テストとサブベンチマーク</target>
        </trans-unit>
        <trans-unit id="05cc8697fcb7ccef149a7858e8bd798cb2cd774f" translate="yes" xml:space="preserve">
          <source>Subtests can also be used to control parallelism. A parent test will only complete once all of its subtests complete. In this example, all tests are run in parallel with each other, and only with each other, regardless of other top-level tests that may be defined:</source>
          <target state="translated">サブテストは並列性を制御するために使用することもできます。親テストは、そのサブテストがすべて完了して初めて完了します。この例では、定義されている他のトップレベルテストに関係なく、すべてのテストがお互いに並行して実行され、お互いにのみ実行されます。</target>
        </trans-unit>
        <trans-unit id="bb672ca35fe1893eef6f12fcd0a8efff47a2478c" translate="yes" xml:space="preserve">
          <source>Success reports whether the program exited successfully, such as with exit status 0 on Unix.</source>
          <target state="translated">成功はプログラムが正常に終了したかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="07eda2eb03735678c89d2490ea6410dd3ad1a43b" translate="yes" xml:space="preserve">
          <source>Such a file is usually paired with another file implementing the default functionality for other systems, which in this case would carry the constraint:</source>
          <target state="translated">このようなファイルは通常、他のシステムのデフォルト機能を実装した別のファイルと対になっており、この場合は制約があります。</target>
        </trans-unit>
        <trans-unit id="fc9ce14b28c6f2c3b72caf056ca604b2b96f7d2b" translate="yes" xml:space="preserve">
          <source>Sum</source>
          <target state="translated">Sum</target>
        </trans-unit>
        <trans-unit id="2307e80c75af1c4de56c67f7a9ea0bffff7083aa" translate="yes" xml:space="preserve">
          <source>Sum appends the hash's current 64-bit value to b. It exists for implementing hash.Hash. For direct calls, it is more efficient to use Sum64.</source>
          <target state="translated">Sumはハッシュの現在の64ビット値をbに加算します。直接呼び出す場合は、Sum64を使った方が効率的です。</target>
        </trans-unit>
        <trans-unit id="1037d5e9f233e3f6a6a25104581ccd4bbd6ac1c7" translate="yes" xml:space="preserve">
          <source>Sum returns the MD5 checksum of the data.</source>
          <target state="translated">Sumは、データのMD5チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="d8eeaf2ada0e780d70b60f2e9edbd46ef59d4a13" translate="yes" xml:space="preserve">
          <source>Sum returns the SHA-1 checksum of the data.</source>
          <target state="translated">Sum は、データの SHA-1 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="0dca98b14fcbfeb34897e7396c1a6dfa98d521b4" translate="yes" xml:space="preserve">
          <source>Sum224 returns the SHA224 checksum of the data.</source>
          <target state="translated">Sum224 は、データの SHA224 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="ba05916088015c0f1b00b88d9415ebfa726370d8" translate="yes" xml:space="preserve">
          <source>Sum256</source>
          <target state="translated">Sum256</target>
        </trans-unit>
        <trans-unit id="087b1fabd67b489187e993cab88dfd4147ea385d" translate="yes" xml:space="preserve">
          <source>Sum256 returns the SHA256 checksum of the data.</source>
          <target state="translated">Sum256は、データのSHA256チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="6bd95a96de2d8140b4ada3f2d7b194594facee01" translate="yes" xml:space="preserve">
          <source>Sum384 returns the SHA384 checksum of the data.</source>
          <target state="translated">Sum384 は、データの SHA384 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="bf1f6e0b5ced478fca66b19297a0e98baeedd390" translate="yes" xml:space="preserve">
          <source>Sum512 returns the SHA512 checksum of the data.</source>
          <target state="translated">Sum512 は、データの SHA512 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="3357361c0e72e316aab24916d39ed7d14bdb335d" translate="yes" xml:space="preserve">
          <source>Sum512_224 returns the Sum512/224 checksum of the data.</source>
          <target state="translated">Sum512_224は、データのSum512/224チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="ff71eecde6b5c686475ebd821438cf7dd50ffe32" translate="yes" xml:space="preserve">
          <source>Sum512_256 returns the Sum512/256 checksum of the data.</source>
          <target state="translated">Sum512_256 は、データの Sum512/256 チェックサムを返します。</target>
        </trans-unit>
        <trans-unit id="8473e2e1004301cd370598216fa62dc426cca789" translate="yes" xml:space="preserve">
          <source>Sum64 returns h's current 64-bit value, which depends on h's seed and the sequence of bytes added to h since the last call to Reset or SetSeed.</source>
          <target state="translated">Sum64 は h の現在の 64 ビット値を返します。これは h のシードと、最後に Reset または SetSeed を呼び出してから h に追加されたバイトのシーケンスに依存します。</target>
        </trans-unit>
        <trans-unit id="4442b8443612835fd9bd367eb3496bb5cfec606a" translate="yes" xml:space="preserve">
          <source>Support for tracing tests and benchmarks built with the standard testing package is built into `go test`. For example, the following command runs the test in the current directory and writes the trace file (trace.out).</source>
          <target state="translated">標準のテストパッケージで構築されたテストとベンチマークのトレースのサポートは `go test` に組み込まれています。例えば、以下のコマンドはカレントディレクトリでテストを実行し、トレースファイル(trace.out)を書き出します。</target>
        </trans-unit>
        <trans-unit id="05492c0a57ea2d63ba2b476c7222b6bcdddbb676" translate="yes" xml:space="preserve">
          <source>Supported architectures for compiler &quot;gc&quot;: &quot;386&quot;, &quot;arm&quot;, &quot;arm64&quot;, &quot;amd64&quot;, &quot;amd64p32&quot;, &quot;mips&quot;, &quot;mipsle&quot;, &quot;mips64&quot;, &quot;mips64le&quot;, &quot;ppc64&quot;, &quot;ppc64le&quot;, &quot;riscv64&quot;, &quot;s390x&quot;, &quot;sparc64&quot;, &quot;wasm&quot;.</source>
          <target state="translated">コンパイラ &quot;gc&quot; でサポートされているアーキテクチャ &quot;386&quot;、&quot;arm&quot;、&quot;arm64&quot;、&quot;amd64&quot;、&quot;amd64p32&quot;、&quot;mips&quot;、&quot;mipsle&quot;、&quot;mips64&quot;、&quot;mips64le&quot;、&quot;ppc64&quot;、&quot;ppc64le&quot;、&quot;riscv64&quot;、&quot;s390x&quot;、&quot;sparc64&quot;、&quot;wasm&quot;。</target>
        </trans-unit>
        <trans-unit id="2bd4d45ed11fa0b050a34198a5d7a561630a107e" translate="yes" xml:space="preserve">
          <source>SupportsCertificate returns nil if the provided certificate is supported by the client that sent the ClientHello. Otherwise, it returns an error describing the reason for the incompatibility.</source>
          <target state="translated">SupportsCertificate は、提供された証明書が ClientHello を送信したクライアントでサポートされていれば nil を返します。そうでない場合は、非互換性の理由を記述したエラーを返します。</target>
        </trans-unit>
        <trans-unit id="91f216722ea67774c646ac48a3a778f2005845b0" translate="yes" xml:space="preserve">
          <source>SupportsCertificate returns nil if the provided certificate is supported by the server that sent the CertificateRequest. Otherwise, it returns an error describing the reason for the incompatibility.</source>
          <target state="translated">SupportsCertificate は、提供された証明書が CertificateRequest を送信したサーバでサポートされている場合、nil を返します。そうでない場合は、非互換性の理由を記述したエラーを返します。</target>
        </trans-unit>
        <trans-unit id="e8b59b633a995b7dd6a0e84deb15f21ce9bf242a" translate="yes" xml:space="preserve">
          <source>SwapInt32 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapInt32 は、原子的に新しい値を *addr に格納し、前の *addr の値を返します。</target>
        </trans-unit>
        <trans-unit id="96490065dc4e2e645c8a89627e673eb95f4aaa28" translate="yes" xml:space="preserve">
          <source>SwapInt64 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapInt64 は、アトミックに新しい値を *addr に格納し、前の *addr の値を返します。</target>
        </trans-unit>
        <trans-unit id="da115593d3ae663bb42ff237dd86576dfdedf6ad" translate="yes" xml:space="preserve">
          <source>SwapPointer atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapPointerは、原子的に新しい値を*addrに格納し、前の*addrの値を返す。</target>
        </trans-unit>
        <trans-unit id="0c0f6214095877962c7da65a2c141bf3b6cbecc8" translate="yes" xml:space="preserve">
          <source>SwapUint32 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapUint32 は、原子的に新しい値を *addr に格納し、前の *addr の値を返します。</target>
        </trans-unit>
        <trans-unit id="899e9c7e854930b5577e53934a16009339f15457" translate="yes" xml:space="preserve">
          <source>SwapUint64 atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapUint64 は、原子的に新しい値を *addr に格納し、前の *addr の値を返す。</target>
        </trans-unit>
        <trans-unit id="18cdfb91a16523313759a1c794de0eb9712ac2b2" translate="yes" xml:space="preserve">
          <source>SwapUintptr atomically stores new into *addr and returns the previous *addr value.</source>
          <target state="translated">SwapUintptr は、原子的に新しい値を *addr に格納し、前の *addr の値を返す。</target>
        </trans-unit>
        <trans-unit id="5c2b73e847c3ed8be17c9afe2788c2fedb5bc635" translate="yes" xml:space="preserve">
          <source>Swapper panics if the provided interface is not a slice.</source>
          <target state="translated">スワッパーは、提供されたインターフェースがスライスではない場合にパニックになります。</target>
        </trans-unit>
        <trans-unit id="0485bba36620f415adb72d21b9eac171cd9aadf1" translate="yes" xml:space="preserve">
          <source>Swapper returns a function that swaps the elements in the provided slice.</source>
          <target state="translated">Swapperは、指定されたスライス内の要素を交換する関数を返します。</target>
        </trans-unit>
        <trans-unit id="baf85dad7e64d73c6dc3f04eb46803a601b907a7" translate="yes" xml:space="preserve">
          <source>SymByAddr returns the text, data, or bss symbol starting at the given address.</source>
          <target state="translated">SymByAddr は、指定したアドレスから始まるテキスト、データ、または bss シンボルを返します。</target>
        </trans-unit>
        <trans-unit id="e6a580ed077335806f8a72f4c91bc2108aa36618" translate="yes" xml:space="preserve">
          <source>Symbol Binding - ELFNN_ST_BIND - st_info</source>
          <target state="translated">シンボルバインディング-ELFNN_ST_BIND-st_info</target>
        </trans-unit>
        <trans-unit id="998290f1606e44ec99b08646525255987ca67dd9" translate="yes" xml:space="preserve">
          <source>Symbol is similar to COFFSymbol with Name field replaced by Go string. Symbol also does not have NumberOfAuxSymbols.</source>
          <target state="translated">SymbolはCOFFSymbolに似ていますが、NameフィールドがGo文字列に置き換えられています。SymbolにはNumberOfAuxSymbolsがありません。</target>
        </trans-unit>
        <trans-unit id="e746caac18fb8c9ece11fba1c3858dd24402cee1" translate="yes" xml:space="preserve">
          <source>Symbol looks up the program counters listed in the request, responding with a table mapping program counters to function names. The package initialization registers it as /debug/pprof/symbol.</source>
          <target state="translated">Symbol はリクエストにリストアップされたプログラムカウンタを調べ、プログラムカウンタを関数名にマッピングしたテーブルで応答します。パッケージの初期化はこれを /debug/pprof/symbol として登録します。</target>
        </trans-unit>
        <trans-unit id="9183912a1c8677ccbfeafe4a95bb81fdaf9d6c67" translate="yes" xml:space="preserve">
          <source>Symbol type - ELFNN_ST_TYPE - st_info</source>
          <target state="translated">シンボルタイプ-ELFNN_ST_TYPE-st_info</target>
        </trans-unit>
        <trans-unit id="300ae1bf65f5418188fead7a4f6227a1a8cb17ab" translate="yes" xml:space="preserve">
          <source>Symbol visibility - ELFNN_ST_VISIBILITY - st_other</source>
          <target state="translated">シンボルの可視性-ELFNN_ST_VISIBILITY-st_other</target>
        </trans-unit>
        <trans-unit id="e0dd57ca387a759e2499962eadf5f79f0eaa8ee2" translate="yes" xml:space="preserve">
          <source>Symbols returns the symbol table for f.</source>
          <target state="translated">Symbolsは、fのシンボルテーブルを返します。</target>
        </trans-unit>
        <trans-unit id="40ab78f946263d95260d4886b240965a4da98f61" translate="yes" xml:space="preserve">
          <source>Symbols returns the symbol table for f. The symbols will be listed in the order they appear in f.</source>
          <target state="translated">Symbols は、f のシンボルテーブルを返します。</target>
        </trans-unit>
        <trans-unit id="2377d81c04be24a887c20fd3bd69bc0f09f37db5" translate="yes" xml:space="preserve">
          <source>Symlink creates newname as a symbolic link to oldname. If there is an error, it will be of type *LinkError.</source>
          <target state="translated">Symlink は newname を oldname へのシンボリックリンクとして作成します。エラーが発生した場合は、*LinkError 型になります。</target>
        </trans-unit>
        <trans-unit id="0aceec11151392e3e912ee288231038c58c328b4" translate="yes" xml:space="preserve">
          <source>Sync commits the current contents of the file to stable storage. Typically, this means flushing the file system's in-memory copy of recently written data to disk.</source>
          <target state="translated">Sync はファイルの現在の内容を安定したストレージにコミットします。通常、これは最近書き込まれたデータのファイルシステムのインメモリコピーをディスクにフラッシュすることを意味します。</target>
        </trans-unit>
        <trans-unit id="e15b4a502540aca9807844244039f56ac0ff96c5" translate="yes" xml:space="preserve">
          <source>Synchronous signals are signals triggered by errors in program execution: SIGBUS, SIGFPE, and SIGSEGV. These are only considered synchronous when caused by program execution, not when sent using os.Process.Kill or the kill program or some similar mechanism. In general, except as discussed below, Go programs will convert a synchronous signal into a run-time panic.</source>
          <target state="translated">同期信号とは、プログラム実行時のエラーによってトリガされる信号のことです。SIGBUS、SIGFPE、SIGSEGVです。これらは、プログラムの実行によって引き起こされた場合にのみ同期信号とみなされ、os.Process.Killやkillプログラム、または類似のメカニズムを使用して送信された場合には、同期信号とはみなされません。一般的には、以下で説明する場合を除いて、Goプログラムは同期信号をランタイムパニックに変換します。</target>
        </trans-unit>
        <trans-unit id="36c0630a340d2960affa1c4d2360b0e2c06793fb" translate="yes" xml:space="preserve">
          <source>Synopsis</source>
          <target state="translated">Synopsis</target>
        </trans-unit>
        <trans-unit id="14251985329004226786245f7238c38c1ab2c9f9" translate="yes" xml:space="preserve">
          <source>Synopsis returns a cleaned version of the first sentence in s. That sentence ends after the first period followed by space and not preceded by exactly one uppercase letter. The result string has no \n, \r, or \t characters and uses only single spaces between words. If s starts with any of the IllegalPrefixes, the result is the empty string.</source>
          <target state="translated">その文は、最初のピリオドの後にスペースが続き、大文字ではなく、正確に1つの大文字で終わるようになっています。結果の文字列には、\n、\r、または \t 文字はなく、単語間には単一のスペースのみを使用します。sがIllegalPrefixesのいずれかで始まる場合、結果は空の文字列です。</target>
        </trans-unit>
        <trans-unit id="17c7ba7676ad1ad6dd1c4e6b997adcae910262c9" translate="yes" xml:space="preserve">
          <source>Syntax</source>
          <target state="translated">Syntax</target>
        </trans-unit>
        <trans-unit id="94881bde696c81108db9e992f3357d3d70383bb4" translate="yes" xml:space="preserve">
          <source>Sys returns system-dependent exit information about the process. Convert it to the appropriate underlying type, such as syscall.WaitStatus on Unix, to access its contents.</source>
          <target state="translated">Sysはプロセスに関するシステム依存の終了情報を返します。その内容にアクセスするには、Unix の syscall.WaitStatus のような適切な基礎となる型に変換してください。</target>
        </trans-unit>
        <trans-unit id="ce82965024d89928bce7d20275a546fd15078072" translate="yes" xml:space="preserve">
          <source>SysProcIDMap holds Container ID to Host ID mappings used for User Namespaces in Linux. See user_namespaces(7).</source>
          <target state="translated">SysProcIDMapは、Linuxのユーザ名空間に使用されるコンテナIDとホストIDのマッピングを保持しています。user_namespaces(7)を参照してください。</target>
        </trans-unit>
        <trans-unit id="8ffbaaa01464f1d0b5846f06e745037abe0d8cb8" translate="yes" xml:space="preserve">
          <source>SysUsage returns system-dependent resource usage information about the exited process. Convert it to the appropriate underlying type, such as *syscall.Rusage on Unix, to access its contents. (On Unix, *syscall.Rusage matches struct rusage as defined in the getrusage(2) manual page.)</source>
          <target state="translated">SysUsageは、終了したプロセスに関するシステム依存のリソース使用情報を返します。その内容にアクセスするには、Unixの*syscall.Rusageのような適切な基礎となる型に変換してください。(Unixでは、*syscall.Rusageはgetrusage(2)マニュアルページで定義されているように構造体rusageにマッチします)。</target>
        </trans-unit>
        <trans-unit id="e293cc54d1f1c47b6fdb1085033440055e2faa2b" translate="yes" xml:space="preserve">
          <source>SyscallConn returns a raw file. This implements the syscall.Conn interface.</source>
          <target state="translated">SyscallConnは生のファイルを返します。これは syscall.Conn インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="93d325a9a596e81112db1a88f6cf17706c8e91ec" translate="yes" xml:space="preserve">
          <source>SyscallConn returns a raw network connection. This implements the syscall.Conn interface.</source>
          <target state="translated">SyscallConnは生のネットワーク接続を返します。これは syscall.Conn インターフェースを実装しています。</target>
        </trans-unit>
        <trans-unit id="aa615b3f3de4dc13fa4173050b52db98916467bd" translate="yes" xml:space="preserve">
          <source>SyscallError records an error from a specific system call.</source>
          <target state="translated">SyscallError は、特定のシステムコールからのエラーを記録します。</target>
        </trans-unit>
        <trans-unit id="de57d6136b78d4b44c51a17ce5f47f730586e6a6" translate="yes" xml:space="preserve">
          <source>SystemCertPool returns a copy of the system cert pool.</source>
          <target state="translated">SystemCertPool は、システム認証プールのコピーを返します。</target>
        </trans-unit>
        <trans-unit id="5bc8f6a9ab808b5aa99fa9f5b51afdf83e241a9c" translate="yes" xml:space="preserve">
          <source>SystemRootsError results when we fail to load the system root certificates.</source>
          <target state="translated">システムルート証明書のロードに失敗すると、SystemRootsError が発生します。</target>
        </trans-unit>
        <trans-unit id="326b735dbfcf185462598a45a443d5db5a2c18cd" translate="yes" xml:space="preserve">
          <source>SystemTime returns the system CPU time of the exited process and its children.</source>
          <target state="translated">SystemTimeは、終了したプロセスとその子プロセスのシステムCPU時間を返します。</target>
        </trans-unit>
        <trans-unit id="45c7796c7458dc5d46d3bad14455a8811762231d" translate="yes" xml:space="preserve">
          <source>T is a type passed to Test functions to manage test state and support formatted test logs.</source>
          <target state="translated">Tは、テストの状態を管理し、フォーマットされたテストログをサポートするために、テスト関数に渡される型です。</target>
        </trans-unit>
        <trans-unit id="bd9dc41e485032cb18e9d13d513ba555be1b33c2" translate="yes" xml:space="preserve">
          <source>T is a type passed to Test functions to manage test state and support formatted test logs. Logs are accumulated during execution and dumped to standard output when done.</source>
          <target state="translated">Tは、テストの状態を管理し、フォーマットされたテストログをサポートするために、テスト関数に渡される型です。ログは実行中に蓄積され、実行が完了すると標準出力にダンプされます。</target>
        </trans-unit>
        <trans-unit id="d71f7f3fa4e9f0ba0065f39db28f69d358c4b941" translate="yes" xml:space="preserve">
          <source>TB is the interface common to T and B.</source>
          <target state="translated">TBは、TとBに共通のインタフェースである。</target>
        </trans-unit>
        <trans-unit id="671a2dd281c27979f8b5f140c5da50e321430a64" translate="yes" xml:space="preserve">
          <source>TBSCertificateList represents the ASN.1 structure of the same name. See RFC 5280, section 5.1.</source>
          <target state="translated">TBSCertificateListは、同名のASN.1構造体を表す。RFC 5280の第5.1節を参照のこと。</target>
        </trans-unit>
        <trans-unit id="2984ada09d0c49745872575be1763fe615cf3de7" translate="yes" xml:space="preserve">
          <source>TCPAddr represents the address of a TCP end point.</source>
          <target state="translated">TCPAddr は TCP エンドポイントのアドレスを表します。</target>
        </trans-unit>
        <trans-unit id="623c2c8aa88d77780fe4e0bcba75694b81bcf2ad" translate="yes" xml:space="preserve">
          <source>TCPConn is an implementation of the Conn interface for TCP network connections.</source>
          <target state="translated">TCPConnは、TCPネットワーク接続のためのConnインターフェースの実装です。</target>
        </trans-unit>
        <trans-unit id="1bbfc48812fe8aa4d93c086976c0d5cdc5424e43" translate="yes" xml:space="preserve">
          <source>TCPListener is a TCP network listener. Clients should typically use variables of type Listener instead of assuming TCP.</source>
          <target state="translated">TCPListener は TCP ネットワーク・リスナーです。クライアントは通常、TCPを想定するのではなくListener型の変数を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="c0df2a7fffd9d8cf03b29589d0b72452730e5dd3" translate="yes" xml:space="preserve">
          <source>TLS 1.3 is available on an opt-out basis in Go 1.13. To disable it, set the GODEBUG environment variable (comma-separated key=value options) such that it includes &quot;tls13=0&quot;.</source>
          <target state="translated">TLS 1.3は、Go 1.13ではオプトアウトで利用できます。これを無効にするには、GODEBUG環境変数(カンマで区切られたキー=値のオプション)に &quot;tls13=0 &quot;を含むように設定します。</target>
        </trans-unit>
        <trans-unit id="daa5896e5821b88d0d9b26d2bc85c2d021b848c8" translate="yes" xml:space="preserve">
          <source>TLSConnectionState returns the client's TLS connection state. The return values are their zero values if StartTLS did not succeed.</source>
          <target state="translated">TLSConnectionState は、クライアントの TLS 接続状態を返します。戻り値は、StartTLS が成功しなかった場合のゼロ値です。</target>
        </trans-unit>
        <trans-unit id="ed012370216d609d48fc2b869f8a011268923cad" translate="yes" xml:space="preserve">
          <source>TODO returns a non-nil, empty Context. Code should use context.TODO when it's unclear which Context to use or it is not yet available (because the surrounding function has not yet been extended to accept a Context parameter).</source>
          <target state="translated">TODO は、非 null の空の Context を返します。どのコンテキストを使用するかが不明な場合や、まだ利用できない場合 (周囲の関数がまだ拡張されていないため、Context パラメータを受け付けることができません)には、コードは context.TODO を使用しなければなりません。</target>
        </trans-unit>
        <trans-unit id="1f541ebdf888dacb11e44ff51c13846474081ba9" translate="yes" xml:space="preserve">
          <source>Tab-terminated cells in contiguous lines constitute a column. The Writer inserts padding as needed to make all cells in a column have the same width, effectively aligning the columns. It assumes that all characters have the same width, except for tabs for which a tabwidth must be specified. Column cells must be tab-terminated, not tab-separated: non-tab terminated trailing text at the end of a line forms a cell but that cell is not part of an aligned column. For instance, in this example (where | stands for a horizontal tab):</source>
          <target state="translated">連続した行のタブ終端セルが 1 列を構成します。ライターは必要に応じてパディングを挿入して、列内のすべてのセルが同じ幅になるようにして、列を効果的に整列させます。タ ブ幅を指定する必要のあるタブを除いては、 すべてのキ ャ ラ ク タ が同じ幅を持つ こ と を前提 と し ています。列セルは、 タブ区切りではな く タ ブ終端にする必要があ り ます:行末のタブ終端以外の末尾のテキス ト はセルを形成 し ますが、 そのセルは整列された列の一部ではあ り ません。た と えば、 こ の例では (ここで|は水平タブを表します)。</target>
        </trans-unit>
        <trans-unit id="9baa6d565b56c1e4861e3df81a8fd8df65d699d4" translate="yes" xml:space="preserve">
          <source>Table 1 in [2] suggests maximum numbers of primes for a given size.</source>
          <target state="translated">2]の表1は、与えられたサイズの最大素数を示唆しています。</target>
        </trans-unit>
        <trans-unit id="ba3ee22bd3b233bdb404d63bfe71ba0cb11ae0a4" translate="yes" xml:space="preserve">
          <source>Table is a 256-word table representing the polynomial for efficient processing.</source>
          <target state="translated">テーブルは、効率的な処理のための多項式を表す256ワードのテーブルです。</target>
        </trans-unit>
        <trans-unit id="599b448991ae5ae6d130b6356ce6b00630c5cefb" translate="yes" xml:space="preserve">
          <source>Table represents a Go symbol table. It stores all of the symbols decoded from the program and provides methods to translate between symbols, names, and addresses.</source>
          <target state="translated">Table は囲碁のシンボルテーブルを表します。プログラムからデコードされたすべてのシンボルを格納し、シンボル、名前、アドレス間の変換方法を提供します。</target>
        </trans-unit>
        <trans-unit id="bfc4ba347929d28c193a400550bae587488f16cd" translate="yes" xml:space="preserve">
          <source>Tag returns the i'th field tag for 0 &amp;lt;= i &amp;lt; NumFields().</source>
          <target state="translated">Tagは、0 &amp;lt;= i &amp;lt;NumFields（）のi番目のフィールドタグを返します。</target>
        </trans-unit>
        <trans-unit id="7a39b84c91d8c550355f46b331fdfde2ffca5ba7" translate="yes" xml:space="preserve">
          <source>Tag sizes between 12 and 16 bytes are allowed.</source>
          <target state="translated">タグのサイズは12~16バイトの間で使用できます。</target>
        </trans-unit>
        <trans-unit id="9dda0ce21be12978cbb42d63ed48bd36a71555e8" translate="yes" xml:space="preserve">
          <source>Taken from &lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&lt;/a&gt;</source>
          <target state="translated">&lt;a href=&quot;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&quot;&gt;https://www.iana.org/assignments/tls-parameters/tls-parameters.xml&lt;/a&gt;から取得</target>
        </trans-unit>
        <trans-unit id="133552ebfbcce8310f8920695422699d5256bac9" translate="yes" xml:space="preserve">
          <source>Tan</source>
          <target state="translated">Tan</target>
        </trans-unit>
        <trans-unit id="c442668b04fe0d2fb49d4d83b1b51198b583f812" translate="yes" xml:space="preserve">
          <source>Tan returns the tangent of the radian argument x.</source>
          <target state="translated">Tanは、ラジアンの引数xの正接を返します。</target>
        </trans-unit>
        <trans-unit id="9f8f5243ed4843c5154158c2ff20cd9a586739e0" translate="yes" xml:space="preserve">
          <source>Tan returns the tangent of x.</source>
          <target state="translated">Tanはxの正接を返します。</target>
        </trans-unit>
        <trans-unit id="19bff9fbbbadd7b339e0ee0ae1715d62fea9cae0" translate="yes" xml:space="preserve">
          <source>Tanh</source>
          <target state="translated">Tanh</target>
        </trans-unit>
        <trans-unit id="dc8ae90d27ce708b07a5ac10906ccc3ed208c4a5" translate="yes" xml:space="preserve">
          <source>Tanh returns the hyperbolic tangent of x.</source>
          <target state="translated">Tanhはxの双曲正接を返します。</target>
        </trans-unit>
        <trans-unit id="6f0a22a02d454a68d024fa67fa9340156799d88b" translate="yes" xml:space="preserve">
          <source>Tape archives (tar) are a file format for storing a sequence of files that can be read and written in a streaming manner. This package aims to cover most variations of the format, including those produced by GNU and BSD tar tools.</source>
          <target state="translated">テープアーカイブ (tar)は、ストリーミング形式で読み書き可能な一連のファイルを保存するためのファイル形式です。本パッケージは、GNU や BSD の tar ツールで作成されたものを含め、この形式のほとんどのバリエーションをカバーすることを目的としています。</target>
        </trans-unit>
        <trans-unit id="f11f02db734667c97fad6ffb5c8e393a00b87399" translate="yes" xml:space="preserve">
          <source>Task is a data type for tracing a user-defined, logical operation.</source>
          <target state="translated">タスクは、ユーザー定義の論理操作をトレースするためのデータ型です。</target>
        </trans-unit>
        <trans-unit id="a9e55d223a3d4713691d397b40624caef60d5252" translate="yes" xml:space="preserve">
          <source>TeeReader</source>
          <target state="translated">TeeReader</target>
        </trans-unit>
        <trans-unit id="c3ce03ea658d6ce846ba37ed8673f608fd0ba578" translate="yes" xml:space="preserve">
          <source>TeeReader returns a Reader that writes to w what it reads from r. All reads from r performed through it are matched with corresponding writes to w. There is no internal buffering - the write must complete before the read completes. Any error encountered while writing is reported as a read error.</source>
          <target state="translated">TeeReader は、r から読み取ったものを w に書き込むリーダーを返します。このリーダーを介して実行される r からのすべての読み取りは、対応する w への書き込みと一致します。書き込み中にエラーが発生した場合は、読み取りエラーとして報告されます。</target>
        </trans-unit>
        <trans-unit id="d5aae156b3babace54749a4ff370cbf166528804" translate="yes" xml:space="preserve">
          <source>Tell returns the current position in the line table.</source>
          <target state="translated">Tellは、ラインテーブルの現在の位置を返します。</target>
        </trans-unit>
        <trans-unit id="243b371792899304742de51767e5e63dc878faba" translate="yes" xml:space="preserve">
          <source>TempDir</source>
          <target state="translated">TempDir</target>
        </trans-unit>
        <trans-unit id="4e9f8298798f58791af33409f9e40b224764dd8a" translate="yes" xml:space="preserve">
          <source>TempDir (Suffix)</source>
          <target state="translated">TempDir (サフィックス)</target>
        </trans-unit>
        <trans-unit id="99e70473aa5b1571f3701ff2584745139273d8ab" translate="yes" xml:space="preserve">
          <source>TempDir creates a new temporary directory in the directory dir with a name beginning with prefix and returns the path of the new directory. If dir is the empty string, TempDir uses the default directory for temporary files (see os.TempDir). Multiple programs calling TempDir simultaneously will not choose the same directory. It is the caller's responsibility to remove the directory when no longer needed.</source>
          <target state="translated">TempDir は、prefix で始まる名前のディレクトリ dir に新しい一時ディレクトリを作成し、新しいディレクトリのパスを返します。dir が空文字列の場合、TempDir は一時ファイル用のデフォルトのディレクトリを使用します (os.TempDir を参照してください)。TempDir を同時に呼び出す複数のプログラムが同じディレクトリを選択することはありません。不要になったらディレクトリを削除するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="cc071fc9ff710ae41b76bf6f9ab98edd65deeafe" translate="yes" xml:space="preserve">
          <source>TempDir creates a new temporary directory in the directory dir. The directory name is generated by taking pattern and applying a random string to the end. If pattern includes a &quot;*&quot;, the random string replaces the last &quot;*&quot;. TempDir returns the name of the new directory. If dir is the empty string, TempDir uses the default directory for temporary files (see os.TempDir). Multiple programs calling TempDir simultaneously will not choose the same directory. It is the caller's responsibility to remove the directory when no longer needed.</source>
          <target state="translated">TempDirはディレクトリdirに新しいテンポラリディレクトリを作成します。ディレクトリ名は、patternを取り、最後にランダムな文字列を適用して生成されます。patternに &quot;*&quot;が含まれている場合は、ランダムな文字列が最後の &quot;*&quot;に置き換わります。TempDirは新しいディレクトリの名前を返します。dir が空文字列の場合、TempDir は一時ファイル用のデフォルトのディレクトリを使用します (os.TempDir を参照してください)。TempDir を同時に呼び出す複数のプログラムが同じディレクトリを選択することはありません。不要になったらディレクトリを削除するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="b913aacfee5a65e416908a68d2ac6cb82c0ef71c" translate="yes" xml:space="preserve">
          <source>TempDir returns a temporary directory for the test to use. The directory is automatically removed by Cleanup when the test and all its subtests complete. Each subsequent call to t.TempDir returns a unique directory; if the directory creation fails, TempDir terminates the test by calling Fatal.</source>
          <target state="translated">TempDir は、テストで使用する一時的なディレクトリを返します。このディレクトリは、テストとそのすべてのサブテストが完了すると、Cleanup によって自動的に削除されます。ディレクトリの作成に失敗した場合、TempDir は Fatal を呼び出してテストを終了します。</target>
        </trans-unit>
        <trans-unit id="275584eb4c05e91a05657287b9e5e68b19aedf60" translate="yes" xml:space="preserve">
          <source>TempDir returns the default directory to use for temporary files.</source>
          <target state="translated">TempDir は、一時ファイルに使用するデフォルトのディレクトリを返します。</target>
        </trans-unit>
        <trans-unit id="d7cc1fbb5a71addb97fa8de33ce419d1f28b35a1" translate="yes" xml:space="preserve">
          <source>TempFile</source>
          <target state="translated">TempFile</target>
        </trans-unit>
        <trans-unit id="ba14fe997bc74680fd4532ceead516a44881c27a" translate="yes" xml:space="preserve">
          <source>TempFile (Suffix)</source>
          <target state="translated">TempFile (サフィックス)</target>
        </trans-unit>
        <trans-unit id="db71768a24bbe351f05252c3b917cc624a9ef1b3" translate="yes" xml:space="preserve">
          <source>TempFile creates a new temporary file in the directory dir, opens the file for reading and writing, and returns the resulting *os.File. The filename is generated by taking pattern and adding a random string to the end. If pattern includes a &quot;*&quot;, the random string replaces the last &quot;*&quot;. If dir is the empty string, TempFile uses the default directory for temporary files (see os.TempDir). Multiple programs calling TempFile simultaneously will not choose the same file. The caller can use f.Name() to find the pathname of the file. It is the caller's responsibility to remove the file when no longer needed.</source>
          <target state="translated">TempFileは、ディレクトリdirに新しい一時ファイルを作成し、読み書きのためにファイルを開き、その結果の*os.Fileを返します。ファイル名は、パターンを取り、最後にランダムな文字列を追加することで生成されます。patternに &quot;*&quot;が含まれている場合、ランダムな文字列が最後の &quot;*&quot;に置き換わります。dir が空文字列の場合、TempFile は一時ファイル用のデフォルトのディレクトリを使用します (os.TempDir を参照してください)。TempFile を同時に呼び出す複数のプログラムが同じファイルを選択することはありません。呼び出し元は f.Name()を使用してファイルのパス名を見つけることができます。不要になったらファイルを削除するのは呼び出し元の責任です。</target>
        </trans-unit>
        <trans-unit id="3ec1ae061c27325c7ecb543adf91235e22cbc9ed" translate="yes" xml:space="preserve">
          <source>Template</source>
          <target state="translated">Template</target>
        </trans-unit>
        <trans-unit id="52ee9ac00f43714b0b4818dd84d35b8b6557c7c3" translate="yes" xml:space="preserve">
          <source>Template (Block)</source>
          <target state="translated">テンプレート(ブロック</target>
        </trans-unit>
        <trans-unit id="74122feafa7458ac08ce0eb420614965c6703346" translate="yes" xml:space="preserve">
          <source>Template (Func)</source>
          <target state="translated">テンプレート(Func)</target>
        </trans-unit>
        <trans-unit id="2682dd16a44a1aa85841c66918e903265b4a3cd6" translate="yes" xml:space="preserve">
          <source>Template (Glob)</source>
          <target state="translated">テンプレート(Glob)</target>
        </trans-unit>
        <trans-unit id="b329235171f350105da0e424a6e94302aadf509f" translate="yes" xml:space="preserve">
          <source>Template (Helpers)</source>
          <target state="translated">テンプレート(ヘルパー</target>
        </trans-unit>
        <trans-unit id="f6c8b5d715e6b1e91ba606c90a46ade44fbfcfc3" translate="yes" xml:space="preserve">
          <source>Template (Parsefiles)</source>
          <target state="translated">テンプレート(パースファイル</target>
        </trans-unit>
        <trans-unit id="57600593178e53d1b30c9ce35cfc8c0a348f3a2c" translate="yes" xml:space="preserve">
          <source>Template (Share)</source>
          <target state="translated">テンプレート(シェア</target>
        </trans-unit>
        <trans-unit id="85b91409ae0c75ad6a8c43a15d791cc0c6067ae4" translate="yes" xml:space="preserve">
          <source>Template is a specialized Template from &quot;text/template&quot; that produces a safe HTML document fragment.</source>
          <target state="translated">テンプレートとは、安全なHTML文書の断片を生成する「text/template」に特化したテンプレートです。</target>
        </trans-unit>
        <trans-unit id="d8a89275d0782e6367eafd96ad18e35d72254fb0" translate="yes" xml:space="preserve">
          <source>Template is the representation of a parsed template. The *parse.Tree field is exported only for use by html/template and should be treated as unexported by all other clients.</source>
          <target state="translated">テンプレートは、解析されたテンプレートの表現です。parse.Treeフィールドはhtml/templateで使用するためだけにエクスポートされ、他のすべてのクライアントではエクスポートされていないものとして扱われます。</target>
        </trans-unit>
        <trans-unit id="19cafd4f58542bc1848a2bc09f68f32df89aaeb6" translate="yes" xml:space="preserve">
          <source>Template.Delims</source>
          <target state="translated">Template.Delims</target>
        </trans-unit>
        <trans-unit id="a8aa430f1c13b8e8ba33d56534b8f8c54974c35f" translate="yes" xml:space="preserve">
          <source>TemplateNode represents a {{template}} action.</source>
          <target state="translated">TemplateNodeは{{{template}}アクションを表します。</target>
        </trans-unit>
        <trans-unit id="6272b08c56a555c9301dfcc377b8ee08eca7de29" translate="yes" xml:space="preserve">
          <source>Templates are executed by applying them to a data structure. Annotations in the template refer to elements of the data structure (typically a field of a struct or a key in a map) to control execution and derive values to be displayed. Execution of the template walks the structure and sets the cursor, represented by a period '.' and called &quot;dot&quot;, to the value at the current location in the structure as execution proceeds.</source>
          <target state="translated">テンプレートは、データ構造体に適用することで実行されます。テンプレート内の注釈は、データ構造体の要素(典型的には構造体のフィールドまたはマップのキー)を参照して、実行を制御し、表示される値を導出します。テンプレートの実行は構造体を歩き、実行が進むにつれて、ピリオド '.' で表され、&quot;ドット&quot; と呼ばれるカーソルを構造体の現在位置の値に設定します。</target>
        </trans-unit>
        <trans-unit id="d659d268d0b2876b00930d9cefac00e94082414d" translate="yes" xml:space="preserve">
          <source>Templates can be redefined in successive calls to Parse, before the first use of Execute on t or any associated template. A template definition with a body containing only white space and comments is considered empty and will not replace an existing template's body. This allows using Parse to add new named template definitions without overwriting the main template body.</source>
          <target state="translated">テンプレートは、t または関連するテンプレートで最初に Execute on t を使用する前に、Parse を連続して呼び出すことで再定義することができます。ホワイトスペースとコメントのみを含むボディを持つテンプレート定義は空とみなされ、既存のテンプレートのボディを置き換えることはありません。これにより、Parse を使用して、メイン・テンプレート・ボディを上書きせずに新しい名前付きテンプレート定義を追加することができます。</target>
        </trans-unit>
        <trans-unit id="b0dad97eb547b69ff6ae16e7728cdc906f69fe6a" translate="yes" xml:space="preserve">
          <source>Templates can be redefined in successive calls to Parse. A template definition with a body containing only white space and comments is considered empty and will not replace an existing template's body. This allows using Parse to add new named template definitions without overwriting the main template body.</source>
          <target state="translated">テンプレートは、Parse を連続して呼び出すことで再定義することができます。ホワイトスペースとコメントのみを含むボディを持つテンプレート定義は空とみなされ、既存のテンプレートのボディを置き換えることはありません。これにより、Parse を使用して、メインのテンプレート本体を上書きせずに新しい名前付きテンプレート定義を追加することができます。</target>
        </trans-unit>
        <trans-unit id="7b101f8846f53e53dd0074ea44ad4ea7b299215d" translate="yes" xml:space="preserve">
          <source>Templates returns a slice of defined templates associated with t.</source>
          <target state="translated">Templatesは、tに関連付けられた定義されたテンプレートのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="ef678e78b264d52108e80621ab16809ee2f68f32" translate="yes" xml:space="preserve">
          <source>Templates returns a slice of the templates associated with t, including t itself.</source>
          <target state="translated">Templatesは、tに関連付けられたテンプレートのスライスを返します。</target>
        </trans-unit>
        <trans-unit id="63499f131caeb094b508fda158f4d32cdfc15875" translate="yes" xml:space="preserve">
          <source>Temporary reports whether the DNS error is known to be temporary. This is not always known; a DNS lookup may fail due to a temporary error and return a DNSError for which Temporary returns false.</source>
          <target state="translated">Temporary は、DNS エラーが一時的なものであることがわかっているかどうかを報告します。これは常に知られているわけではありません。 DNS の検索が一時的なエラーのために失敗し、Temporary が false を返す DNSError を返すことがあります。</target>
        </trans-unit>
        <trans-unit id="102ab778dfcf2daa890ddca81b62a6c8c57e866c" translate="yes" xml:space="preserve">
          <source>Tests or benchmarks may be skipped at run time with a call to the Skip method of *T or *B:</source>
          <target state="translated">テストやベンチマークは、*Tまたは*BのSkipメソッドを呼び出すことで、実行時にスキップすることができます。</target>
        </trans-unit>
        <trans-unit id="4fb2cdb8c84498e97b67876bcf9179f6c6a0681c" translate="yes" xml:space="preserve">
          <source>Text and spaces</source>
          <target state="translated">テキストとスペース</target>
        </trans-unit>
        <trans-unit id="7c3578369bc9761a19920ddfd71d5074fb77328e" translate="yes" xml:space="preserve">
          <source>Text converts the floating-point number x to a string according to the given format and precision prec. The format is one of:</source>
          <target state="translated">テキストは、浮動小数点数xを指定されたフォーマットと精度precに従って文字列に変換します。フォーマットは以下のいずれかです。</target>
        </trans-unit>
        <trans-unit id="9714bb7b9d9dc65203e2f28091e607a38d20869a" translate="yes" xml:space="preserve">
          <source>Text in the format string that is not recognized as part of the reference time is echoed verbatim during Format and expected to appear verbatim in the input to Parse.</source>
          <target state="translated">参照時間の一部として認識されないフォーマット文字列のテキストは、フォーマット中に冗長にエコーされ、パースへの入力では冗長に表示されることが期待されます。</target>
        </trans-unit>
        <trans-unit id="2a87e174a24b19b122c0ab179b85b925e794409f" translate="yes" xml:space="preserve">
          <source>Text returns the most recent token generated by a call to Scan as a newly allocated string holding its bytes.</source>
          <target state="translated">テキストは、Scan の呼び出しによって生成された最新のトークンを、そのバイト数を保持する新たに確保された文字列として返します。</target>
        </trans-unit>
        <trans-unit id="9757ee25c7224af6e75db771ea323fc05ac31e21" translate="yes" xml:space="preserve">
          <source>Text returns the string representation of x in the given base. Base must be between 2 and 62, inclusive. The result uses the lower-case letters 'a' to 'z' for digit values 10 to 35, and the upper-case letters 'A' to 'Z' for digit values 36 to 61. No prefix (such as &quot;0x&quot;) is added to the string. If x is a nil pointer it returns &quot;&amp;lt;nil&amp;gt;&quot;.</source>
          <target state="translated">テキストは、指定されたベースでのxの文字列表現を返します。ベースは2以上62以下でなければなりません。結果では、10〜35の数字の値には小文字の 'a'〜 'z'を使用し、36〜61の数字の値には大文字の 'A'〜 'Z'を使用します。プレフィックスなし（ &quot;0x&quot;など） ）が文字列に追加されます。xがnilポインタの場合、 &quot;&amp;lt;nil&amp;gt;&quot;を返します。</target>
        </trans-unit>
        <trans-unit id="544da0b6d8a9e887a60db43ce4a26fd95b56a5d4" translate="yes" xml:space="preserve">
          <source>Text returns the text of the comment. Comment markers (//, /*, and */), the first space of a line comment, and leading and trailing empty lines are removed. Comment directives like &quot;//line&quot; and &quot;//go:noinline&quot; are also removed. Multiple empty lines are reduced to one, and trailing space on lines is trimmed. Unless the result is empty, it is newline-terminated.</source>
          <target state="translated">Text はコメントのテキストを返します。コメントマーカー(//,/*,*/)、行コメントの最初のスペース、先頭と末尾の空行は削除されます。また、&quot;//line&quot; や &quot;//go:noinline&quot; のようなコメントディレクティブも削除されます。複数の空行は1行に縮小され、行の末尾のスペースはトリムされます。結果が空でない限り、結果は改行で終了します。</target>
        </trans-unit>
        <trans-unit id="42341adeec7d736d3551b283379c31741e77e4f9" translate="yes" xml:space="preserve">
          <source>Text returns the text of the comment. Comment markers (//, /*, and */), the first space of a line comment, and leading and trailing empty lines are removed. Multiple empty lines are reduced to one, and trailing space on lines is trimmed. Unless the result is empty, it is newline-terminated.</source>
          <target state="translated">Text はコメントのテキストを返します。コメントマーカー(//,/*,*/)、行コメントの最初のスペース、行の先頭と末尾の空行は削除されます。複数の空行は1行に縮小され、行末のスペースはトリムされます。結果が空でない限り、結果は改行で終了します。</target>
        </trans-unit>
        <trans-unit id="02af2db9a5ef05bc960487d876c4df951f9ad592" translate="yes" xml:space="preserve">
          <source>Text types have the charset parameter set to &quot;utf-8&quot; by default.</source>
          <target state="translated">テキストタイプは、デフォルトでcharsetパラメータが &quot;utf-8 &quot;に設定されています。</target>
        </trans-unit>
        <trans-unit id="b44c08e7f92ae7b5fe535298ff7558bf9d8a0cab" translate="yes" xml:space="preserve">
          <source>TextMarshaler is the interface implemented by an object that can marshal itself into a textual form.</source>
          <target state="translated">TextMarshalerは、自分自身をテキスト形式にマーシャルすることができるオブジェクトによって実装されたインターフェイスです。</target>
        </trans-unit>
        <trans-unit id="ae8b7afc36cfb51ffddc286e90577602c85186e4" translate="yes" xml:space="preserve">
          <source>TextNode holds plain text.</source>
          <target state="translated">TextNodeはプレーンテキストを保持します。</target>
        </trans-unit>
        <trans-unit id="48668880c8086b3c4c912b1de227b18b3d9a93e1" translate="yes" xml:space="preserve">
          <source>TextUnmarshaler is the interface implemented by an object that can unmarshal a textual representation of itself.</source>
          <target state="translated">TextUnmarshalerは、それ自身のテキスト表現をアンマーシャリングすることができるオブジェクトによって実装されたインターフェースです。</target>
        </trans-unit>
        <trans-unit id="33b69b32d53f67278f1556c03b99ca73467e15b3" translate="yes" xml:space="preserve">
          <source>That is, when matching against text, the regexp returns a match that begins as early as possible in the input (leftmost), and among those it chooses a match that is as long as possible. This so-called leftmost-longest matching is the same semantics that early regular expression implementations used and that POSIX specifies.</source>
          <target state="translated">つまり、テキストとのマッチングを行う場合、正規表現は入力の中で可能な限り早く始まるマッチ(左端)を返し、その中から可能な限り長いマッチを選択します。このいわゆる左端から最長のマッチングは、初期の正規表現実装が使用していたものと同じセマンティクスであり、POSIXが指定しているものです。</target>
        </trans-unit>
        <trans-unit id="1fe9add248f3617655fdc8371d42751cba2e4007" translate="yes" xml:space="preserve">
          <source>The &quot;omitempty&quot; option specifies that the field should be omitted from the encoding if the field has an empty value, defined as false, 0, a nil pointer, a nil interface value, and any empty array, slice, map, or string.</source>
          <target state="translated">omitempty &quot;オプションは、フィールドが空の値を持つ場合に、エンコーディングからフィールドを省略することを指定する。</target>
        </trans-unit>
        <trans-unit id="71d19b0f94317203bba62dcd8f10cd68c650f96b" translate="yes" xml:space="preserve">
          <source>The &quot;string&quot; option signals that a field is stored as JSON inside a JSON-encoded string. It applies only to fields of string, floating point, integer, or boolean types. This extra level of encoding is sometimes used when communicating with JavaScript programs:</source>
          <target state="translated">string &quot;オプションは、フィールドがJSONエンコードされた文字列の中にJSONとして保存されていることを示します。これは、文字列、浮動小数点、整数、ブール型のフィールドにのみ適用されます。この余分なレベルのエンコーディングは、JavaScriptプログラムと通信する際に使用されることがあります。</target>
        </trans-unit>
        <trans-unit id="d1ee29ca2c06802f34981d89493c0bb6f1d6d312" translate="yes" xml:space="preserve">
          <source>The %!s just shows the print verb in use when the failure occurred. If the panic is caused by a nil receiver to an Error or String method, however, the output is the undecorated string, &quot;&amp;lt;nil&amp;gt;&quot;.</source>
          <target state="translated">％！sは、障害が発生したときに使用中の印刷動詞を表示するだけです。ただし、パニックの原因がエラーまたは文字列メソッドのnilレシーバーである場合、出力は装飾されていない文字列 &quot;&amp;lt;nil&amp;gt;&quot;です。</target>
        </trans-unit>
        <trans-unit id="743e4c8e9a91e391bfa222546fd5a23a69c683b9" translate="yes" xml:space="preserve">
          <source>The *Basic type for Typ[Byte] will have the name &quot;uint8&quot;. Use Universe.Lookup(&quot;byte&quot;).Type() to obtain the specific alias basic type named &quot;byte&quot; (and analogous for &quot;rune&quot;).</source>
          <target state="translated">Typ[Byte]の*基本型は &quot;uint8 &quot;という名前になります。Universe.Lookup(&quot;byte&quot;).Type()を使用して、&quot;byte &quot;という名前の特定のエイリアス基本型(および &quot;rune &quot;の類似型)を取得します。</target>
        </trans-unit>
        <trans-unit id="850dd1df743a69c63fe9886362ac383beaaa22a7" translate="yes" xml:space="preserve">
          <source>The AES block size in bytes.</source>
          <target state="translated">AES のブロックサイズをバイト単位で指定します.</target>
        </trans-unit>
        <trans-unit id="5673ab8326600fbbe495a6285dd8ced305ce9de8" translate="yes" xml:space="preserve">
          <source>The AES operations in this package are not implemented using constant-time algorithms. An exception is when running on systems with enabled hardware support for AES that makes these operations constant-time. Examples include amd64 systems using AES-NI extensions and s390x systems using Message-Security-Assist extensions. On such systems, when the result of NewCipher is passed to cipher.NewGCM, the GHASH operation used by GCM is also constant-time.</source>
          <target state="translated">本パッケージに含まれる AES の演算には定数時間アルゴリズムは使用されていません。例外は、AES のハードウェアサポートが有効で、これらの操作を一定時間で行うシステムで実行される場合です。例えば、AES-NI 拡張を使用している amd64 システムや、Message-Security-Assist 拡張を使用している s390x システムなどです。このようなシステムでは、NewCipher の結果が cipher.NewGCM に渡されると、GCM が使用する GHASH 操作も一定時間になります。</target>
        </trans-unit>
        <trans-unit id="6adb0b7099e3661b5d507077f904503946e1529a" translate="yes" xml:space="preserve">
          <source>The AuthorityKeyId will be taken from the SubjectKeyId of parent, if any, unless the resulting certificate is self-signed. Otherwise the value from template will be used.</source>
          <target state="translated">AuthorityKeyId は、結果の証明書が自己署名されていない限り、親の SubjectKeyId から取得します。そうでない場合は、テンプレートの値が使用されます。</target>
        </trans-unit>
        <trans-unit id="ef02c253bf1371acc1a3bc5ebf403abe9da8e69d" translate="yes" xml:space="preserve">
          <source>The CPU profile is not available as a Profile. It has a special API, the StartCPUProfile and StopCPUProfile functions, because it streams output to a writer during profiling.</source>
          <target state="translated">CPUプロファイルはプロファイルとして利用できません。プロファイリング中にライターに出力をストリームするため、StartCPUProfile、StopCPUProfileという特殊なAPIを持っています。</target>
        </trans-unit>
        <trans-unit id="7bedc851c290436a17de2ea56c0e80eced3a4ba0" translate="yes" xml:space="preserve">
          <source>The CRL is signed by priv which should be the private key associated with the public key in the issuer certificate.</source>
          <target state="translated">CRL は、発行者証明書の公開鍵に関連付けられた秘密鍵であるべき priv によって署名されます。</target>
        </trans-unit>
        <trans-unit id="1ff86b138d4478667bb91009d716fd7665b76152" translate="yes" xml:space="preserve">
          <source>The CSPRNG key is indifferentiable from a random oracle as shown in [Coron], the AES-CTR stream is indifferentiable from a random oracle under standard cryptographic assumptions (see [Larsson] for examples).</source>
          <target state="translated">CSPRNG鍵は[Coron]で示されているようにランダムなオラクルからは無関係であり、AES-CTRストリームは標準的な暗号化仮定の下ではランダムなオラクルからは無関係である(例については[Larsson]を参照のこと)。</target>
        </trans-unit>
        <trans-unit id="36bb730fcee3dc3ab8099094b237b4e5ff536824" translate="yes" xml:space="preserve">
          <source>The Call method waits for the remote call to complete while the Go method launches the call asynchronously and signals completion using the Call structure's Done channel.</source>
          <target state="translated">Call メソッドはリモートコールが完了するまで待機し、Go メソッドは非同期的にコールを起動し、Call 構造体の Done チャネルを使用して完了を通知します。</target>
        </trans-unit>
        <trans-unit id="fa9c5434f905167654701708a6911e94eaa76597" translate="yes" xml:space="preserve">
          <source>The Client and Transport return Responses from servers once the response headers have been received. The response body is streamed on demand as the Body field is read.</source>
          <target state="translated">クライアントとトランスポートは、応答ヘッダを受信すると、サーバから応答を返します。レスポンスボディは、Body フィールドが読み込まれると、要求に応じてストリームされます。</target>
        </trans-unit>
        <trans-unit id="a06861d55f6598b58fca7ecb30c8e99763835023" translate="yes" xml:space="preserve">
          <source>The Client's Transport typically has internal state (cached TCP connections), so Clients should be reused instead of created as needed. Clients are safe for concurrent use by multiple goroutines.</source>
          <target state="translated">クライアントのトランスポートは通常、内部状態(TCP 接続のキャッシュ)を持っているので、クライアントは必要に応じて作成するのではなく、再利用するべきです。クライアントは複数のゴロチンが同時に使用しても安全です。</target>
        </trans-unit>
        <trans-unit id="ceca2d7732940705f6d00b5d32a4fb0ac5b5ffee" translate="yes" xml:space="preserve">
          <source>The CloseNotifier interface is implemented by ResponseWriters which allow detecting when the underlying connection has gone away.</source>
          <target state="translated">CloseNotifier インターフェイスは ResponseWriters によって実装されており、これを使用することで、基礎となる接続がなくなったことを検出することができます。</target>
        </trans-unit>
        <trans-unit id="e611d14841eea36df4afcbef6632f0e94c16f389" translate="yes" xml:space="preserve">
          <source>The Comments list contains all comments in the source file in order of appearance, including the comments that are pointed to from other nodes via Doc and Comment fields.</source>
          <target state="translated">コメント リストには、Doc および Comment フィールドを介して他のノードから指摘されたコメントを含む、ソース ファイル内のすべてのコメントが外観順に表示されます。</target>
        </trans-unit>
        <trans-unit id="7243291c556ac8dd62df98afdad8c3760dcef423" translate="yes" xml:space="preserve">
          <source>The Content-Type header is set to application/x-www-form-urlencoded. To set other headers, use NewRequest and Client.Do.</source>
          <target state="translated">Content-Typeヘッダはapplication/x-www-form-urlencodedに設定されています。他のヘッダを設定するには、NewRequest と Client.Do を使用します。</target>
        </trans-unit>
        <trans-unit id="4c8514b948c44917ccd4528524ea490c8df7afe9" translate="yes" xml:space="preserve">
          <source>The Content-Type header is set to application/x-www-form-urlencoded. To set other headers, use NewRequest and DefaultClient.Do.</source>
          <target state="translated">Content-Typeヘッダはapplication/x-www-form-urlencodedに設定されています。他のヘッダを設定するには、NewRequestとDefaultClient.Doを使用します。</target>
        </trans-unit>
        <trans-unit id="e64fbf6aec6e290cb2a86c841a198b35f0414494" translate="yes" xml:space="preserve">
          <source>The Context field will be zero to gather a traceback from the current program execution point. In this case, the traceback function will be called from C code.</source>
          <target state="translated">現在のプログラム実行ポイントからのトレースバックを収集するために、Contextフィールドは0になります。この場合、トレースバック関数はCコードから呼び出されます。</target>
        </trans-unit>
        <trans-unit id="0d4ab0b54e24df8d963181a5b8f48a80c3f0be3b" translate="yes" xml:space="preserve">
          <source>The Copy function uses ReaderFrom if available.</source>
          <target state="translated">コピー機能は、ReaderFromがあればそれを使用します。</target>
        </trans-unit>
        <trans-unit id="64b7a752d1105251970c527872a99e908894fe83" translate="yes" xml:space="preserve">
          <source>The Copy function uses WriterTo if available.</source>
          <target state="translated">コピー関数は、利用可能な場合はWriterToを使用します。</target>
        </trans-unit>
        <trans-unit id="4068b76cb1fd1e06d5771c04e2c02b7fd65472c1" translate="yes" xml:space="preserve">
          <source>The DES block size in bytes.</source>
          <target state="translated">DESブロックのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="1b8c2351859f5d138662581cb4874dd621eef345" translate="yes" xml:space="preserve">
          <source>The DSA operations in this package are not implemented using constant-time algorithms.</source>
          <target state="translated">本パッケージのDSA演算は、一定時間アルゴリズムを使用して実装されていません。</target>
        </trans-unit>
        <trans-unit id="3d5a6f0be8af4ae349714dde142378b2b0dd32c1" translate="yes" xml:space="preserve">
          <source>The Data fields contains object-specific data:</source>
          <target state="translated">Data フィールドには、オブジェクト固有のデータが含まれています。</target>
        </trans-unit>
        <trans-unit id="d70280d8e959481aa07b78bca8cd9c9158da0c1f" translate="yes" xml:space="preserve">
          <source>The Decoder does only basic sanity checking on decoded input sizes, and its limits are not configurable. Take caution when decoding gob data from untrusted sources.</source>
          <target state="translated">デコーダは、デコードされた入力サイズの基本的なサニティチェックのみを行い、その限界は設定できません。信頼できないソースから gob データをデコードする場合は注意してください。</target>
        </trans-unit>
        <trans-unit id="1a3dcfbdb85a6eb02179c9d5c4dd5b3efbbb6016" translate="yes" xml:space="preserve">
          <source>The Dial function connects to a server:</source>
          <target state="translated">ダイヤル機能でサーバーに接続します。</target>
        </trans-unit>
        <trans-unit id="e5af1dd969514f431da9aefdd41666a5f815fd72" translate="yes" xml:space="preserve">
          <source>The Error interface identifies a run time error.</source>
          <target state="translated">エラー・インターフェースは、ランタイム・エラーを識別します。</target>
        </trans-unit>
        <trans-unit id="8e437b0bdb4841542eba2f049276dee573f887b3" translate="yes" xml:space="preserve">
          <source>The Errorf function lets us use formatting features to create descriptive error messages.</source>
          <target state="translated">Errorf関数を使用すると、書式設定機能を使用して記述的なエラーメッセージを作成することができます。</target>
        </trans-unit>
        <trans-unit id="4cc7e273196b60c7b327e2a1e7c92da50e59b611" translate="yes" xml:space="preserve">
          <source>The Examples section of the documentation includes an illustration of how to use MakeFunc to build a swap function for different types.</source>
          <target state="translated">ドキュメントの「Examples」セクションには、MakeFuncを使用して異なるタイプのスワップ関数を構築する方法の説明があります。</target>
        </trans-unit>
        <trans-unit id="a4103d71ff7738d060819734b8440840f86eb6a7" translate="yes" xml:space="preserve">
          <source>The Flusher interface is implemented by ResponseWriters that allow an HTTP handler to flush buffered data to the client.</source>
          <target state="translated">Flusher インターフェースは、HTTP ハンドラがバッファリングされたデータをクライアントにフラッシュすることを可能にする ResponseWriters によって実装されています。</target>
        </trans-unit>
        <trans-unit id="8989cf7d3fb3d7f0d686b9d17d09faeb78214543" translate="yes" xml:space="preserve">
          <source>The GIF specification is at &lt;a href=&quot;https://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt;https://www.w3.org/Graphics/GIF/spec-gif89a.txt&lt;/a&gt;.</source>
          <target state="translated">GIF仕様は&lt;a href=&quot;https://www.w3.org/Graphics/GIF/spec-gif89a.txt&quot;&gt;https://www.w3.org/Graphics/GIF/spec-gif89a.txtにあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="413f2e2abeee0cebf1b4d1ac0f711038cf2ef825" translate="yes" xml:space="preserve">
          <source>The GOARCH, GOOS, GOPATH, and GOROOT environment variables complete the set of Go environment variables. They influence the building of Go programs (see &lt;a href=&quot;https://golang.org/cmd/go&quot;&gt;https://golang.org/cmd/go&lt;/a&gt; and &lt;a href=&quot;../go/build/index&quot;&gt;https://golang.org/pkg/go/build&lt;/a&gt;). GOARCH, GOOS, and GOROOT are recorded at compile time and made available by constants or functions in this package, but they do not influence the execution of the run-time system.</source>
          <target state="translated">GOARCH、GOOS、GOPATH、およびGOROOT環境変数は、Go環境変数のセットを完成させます。これらはGoプログラムのビルドに影響します（&lt;a href=&quot;https://golang.org/cmd/go&quot;&gt;https://golang.org/cmd/go&lt;/a&gt;および&lt;a href=&quot;../go/build/index&quot;&gt;https://golang.org/pkg/go/buildを&lt;/a&gt;参照）。GOARCH、GOOS、およびGOROOTはコンパイル時に記録され、このパッケージの定数または関数によって使用可能になりますが、ランタイムシステムの実行には影響しません。</target>
        </trans-unit>
        <trans-unit id="980859c522964a8cbb3109a2a563d54c04b37667" translate="yes" xml:space="preserve">
          <source>The GODEBUG variable controls debugging variables within the runtime. It is a comma-separated list of name=val pairs setting these named variables:</source>
          <target state="translated">GODEBUG変数はランタイム内のデバッグ変数を制御します。これは、これらの名前付き変数を設定する name=val のペアのカンマ区切りのリストです。</target>
        </trans-unit>
        <trans-unit id="854b96235a6d258614ac621d5a074c350962980a" translate="yes" xml:space="preserve">
          <source>The GODEBUG variables are not covered by Go's API compatibility promise. Please report any issues before disabling HTTP/2 support: &lt;a href=&quot;https://golang.org/s/http2bug&quot;&gt;https://golang.org/s/http2bug&lt;/a&gt;</source>
          <target state="translated">GODEBUG変数はGoのAPI互換性の約束ではカバーされていません。HTTP / 2サポートを無効にする前に問題を報告してください：&lt;a href=&quot;https://golang.org/s/http2bug&quot;&gt;https&lt;/a&gt; : //golang.org/s/http2bug</target>
        </trans-unit>
        <trans-unit id="07350ebc65d6866cf7470b34fa919f4c89a12e5a" translate="yes" xml:space="preserve">
          <source>The GOGC variable sets the initial garbage collection target percentage. A collection is triggered when the ratio of freshly allocated data to live data remaining after the previous collection reaches this percentage. The default is GOGC=100. Setting GOGC=off disables the garbage collector entirely. The runtime/debug package's SetGCPercent function allows changing this percentage at run time. See &lt;a href=&quot;debug/index#SetGCPercent&quot;&gt;https://golang.org/pkg/runtime/debug/#SetGCPercent&lt;/a&gt;.</source>
          <target state="translated">GOGC変数は、初期のガベージコレクションのターゲットパーセンテージを設定します。前回の収集後に残っているライブデータに対する新しく割り当てられたデータの比率がこのパーセンテージに達すると、収集がトリガーされます。デフォルトはGOGC = 100です。GOGC = offを設定すると、ガベージコレクターが完全に無効になります。ランタイム/デバッグパッケージのSetGCPercent関数を使用すると、このパーセンテージを実行時に変更できます。&lt;a href=&quot;debug/index#SetGCPercent&quot;&gt;https://golang.org/pkg/runtime/debug/#SetGCPercentを&lt;/a&gt;参照してください。</target>
        </trans-unit>
        <trans-unit id="23644add17b2d4ea82387647518fec703dd62cda" translate="yes" xml:space="preserve">
          <source>The GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously. There is no limit to the number of threads that can be blocked in system calls on behalf of Go code; those do not count against the GOMAXPROCS limit. This package's GOMAXPROCS function queries and changes the limit.</source>
          <target state="translated">GOMAXPROCS 変数は、ユーザーレベルの囲碁コードを同時に実行できるオペレーティング システム スレッドの数を制限します。囲碁コードの代わりにシステムコールでブロックできるスレッドの数に制限はありません。本パッケージの GOMAXPROCS 関数は、制限値を照会して変更します。</target>
        </trans-unit>
        <trans-unit id="2dc1829c430b9fe1fcd42a5d7af5182478e7df72" translate="yes" xml:space="preserve">
          <source>The GORACE variable configures the race detector, for programs built using -race. See &lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot;&gt;https://golang.org/doc/articles/race_detector.html&lt;/a&gt; for details.</source>
          <target state="translated">GORACE変数は、-raceを使用して構築されたプログラムの競合検出器を構成します。詳細については、&lt;a href=&quot;https://golang.org/doc/articles/race_detector.html&quot;&gt;https：//golang.org/doc/articles/race_detector.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="895a2c86582e638542cc835d086a523cf9768898" translate="yes" xml:space="preserve">
          <source>The GOTRACEBACK variable controls the amount of output generated when a Go program fails due to an unrecovered panic or an unexpected runtime condition. By default, a failure prints a stack trace for the current goroutine, eliding functions internal to the run-time system, and then exits with exit code 2. The failure prints stack traces for all goroutines if there is no current goroutine or the failure is internal to the run-time. GOTRACEBACK=none omits the goroutine stack traces entirely. GOTRACEBACK=single (the default) behaves as described above. GOTRACEBACK=all adds stack traces for all user-created goroutines. GOTRACEBACK=system is like &amp;ldquo;all&amp;rdquo; but adds stack frames for run-time functions and shows goroutines created internally by the run-time. GOTRACEBACK=crash is like &amp;ldquo;system&amp;rdquo; but crashes in an operating system-specific manner instead of exiting. For example, on Unix systems, the crash raises SIGABRT to trigger a core dump. For historical reasons, the GOTRACEBACK settings 0, 1, and 2 are synonyms for none, all, and system, respectively. The runtime/debug package's SetTraceback function allows increasing the amount of output at run time, but it cannot reduce the amount below that specified by the environment variable. See &lt;a href=&quot;debug/index#SetTraceback&quot;&gt;https://golang.org/pkg/runtime/debug/#SetTraceback&lt;/a&gt;.</source>
          <target state="translated">GOTRACEBACK変数は、回復できないパニックまたは予期しない実行時条件が原因でGoプログラムが失敗したときに生成される出力の量を制御します。デフォルトでは、障害は現在のゴルーチンのスタックトレースを出力し、ランタイムシステムの内部の関数を削除してから、終了コード2で終了します。現在のゴルーチンがないか、障害が発生している場合、障害はすべてのゴルーチンのスタックトレースを出力します。ランタイムの内部。 GOTRACEBACK = noneは、goroutineスタックトレースを完全に省略します。 GOTRACEBACK = single（デフォルト）は上記のように動作します。 GOTRACEBACK = allは、ユーザーが作成したすべてのゴルーチンのスタックトレースを追加します。 GOTRACEBACK = systemは「すべて」に似ていますが、ランタイム関数のスタックフレームを追加し、ランタイムによって内部的に作成されたゴルーチンを表示します。GOTRACEBACK = crashは「システム」に似ていますが、終了せずにオペレーティングシステム固有の方法でクラッシュします。たとえば、Unixシステムでは、クラッシュによりSIGABRTが発生し、コアダンプがトリガーされます。歴史的な理由により、GOTRACEBACK設定0、1、および2は、それぞれnone、all、およびsystemの同義語です。ランタイム/デバッグパッケージのSetTraceback関数を使用すると、実行時に出力量を増やすことができますが、環境変数で指定された量よりも少なくすることはできません。見るただし、環境変数で指定された量より少なくすることはできません。見るただし、環境変数で指定された量より少なくすることはできません。見る&lt;a href=&quot;debug/index#SetTraceback&quot;&gt;https://golang.org/pkg/runtime/debug/#SetTraceback&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="201ea9b13c6c1b11811e547f191be7e93f488ebd" translate="yes" xml:space="preserve">
          <source>The Go 1 compatibility guidelines make it impossible for us to change the behavior of these methods; use Read or ReadMsgIP instead.</source>
          <target state="translated">Go 1 の互換性ガイドラインでは、これらのメソッドの動作を変更することはできません。</target>
        </trans-unit>
        <trans-unit id="bbb7c186e3ae50bd364f0be3171da7e4e4fa74f9" translate="yes" xml:space="preserve">
          <source>The Go function fn is called with the value of JavaScript's &quot;this&quot; keyword and the arguments of the invocation. The return value of the invocation is the result of the Go function mapped back to JavaScript according to ValueOf.</source>
          <target state="translated">Go関数fnは、JavaScriptの &quot;this &quot;キーワードの値と呼び出しの引数で呼び出されます。呼び出しの戻り値は、ValueOfに従ってJavaScriptにマッピングされた囲碁関数の結果です。</target>
        </trans-unit>
        <trans-unit id="c7566eb3c6d36d40991cd457887383d73c8d32f6" translate="yes" xml:space="preserve">
          <source>The Go path is a list of directory trees containing Go source code. It is consulted to resolve imports that cannot be found in the standard Go tree. The default path is the value of the GOPATH environment variable, interpreted as a path list appropriate to the operating system (on Unix, the variable is a colon-separated string; on Windows, a semicolon-separated string; on Plan 9, a list).</source>
          <target state="translated">Go パスは、Go ソースコードを含むディレクトリツリーのリストです。これは、標準の Go ツリーで見つからないインポートを解決するために参照されます。デフォルトのパスは、GOPATH 環境変数の値で、オペレーティング・システムに適したパス・リストとして解釈されます (Unix ではコロンで区切られた文字列、Windows ではセミコロンで区切られた文字列、Plan 9 ではリスト)。</target>
        </trans-unit>
        <trans-unit id="b3cf2d68365e20d0973a301087cdd0150f378764" translate="yes" xml:space="preserve">
          <source>The Go visibility rules for struct fields are amended for JSON when deciding which field to marshal or unmarshal. If there are multiple fields at the same level, and that level is the least nested (and would therefore be the nesting level selected by the usual Go rules), the following extra rules apply:</source>
          <target state="translated">構造体フィールドの Go 表示ルールは、マーシャリングまたはアンマーシャリングするフィールドを決定する際に、JSON の場合に修正されます。同じレベルに複数のフィールドがあり、そのレベルが最も入れ子になっていない場合(したがって、通常のGoルールで選択される入れ子レベルになる)、以下の追加ルールが適用されます。</target>
        </trans-unit>
        <trans-unit id="0fd6453ed937237b824b9a18906363db4d73b2a6" translate="yes" xml:space="preserve">
          <source>The HandlerFunc type is an adapter to allow the use of ordinary functions as HTTP handlers. If f is a function with the appropriate signature, HandlerFunc(f) is a Handler that calls f.</source>
          <target state="translated">HandlerFunc 型は、通常の関数を HTTP ハンドラとして使用できるようにするアダプタです。f が適切なシグネチャを持つ関数であれば、 HandlerFunc(f)は f を呼び出すハンドラです。</target>
        </trans-unit>
        <trans-unit id="dcde06a75814cbd2f82c57451a15f7098bfdc1f6" translate="yes" xml:space="preserve">
          <source>The Hijacker interface is implemented by ResponseWriters that allow an HTTP handler to take over the connection.</source>
          <target state="translated">Hijacker インターフェイスは、HTTP ハンドラが接続を引き継ぐことを可能にする ResponseWriters によって実装されています。</target>
        </trans-unit>
        <trans-unit id="3370b385b8e5dd84393ea8ba4a384825a13db61b" translate="yes" xml:space="preserve">
          <source>The Interface type describes the requirements for a type using the routines in this package. Any type that implements it may be used as a min-heap with the following invariants (established after Init has been called or if the data is empty or sorted):</source>
          <target state="translated">インターフェース型は、本パッケージのルーチンを使用する型の要件を記述します。これを実装した型は、以下の不変量を持つミニヒープとして使用することができます(Initが呼ばれた後、またはデータが空かソートされている場合に確立されます)。</target>
        </trans-unit>
        <trans-unit id="0aee04eced9ac7c3fac2de601ac7413fde3bf654" translate="yes" xml:space="preserve">
          <source>The JSON null value unmarshals into an interface, map, pointer, or slice by setting that Go value to nil. Because null is often used in JSON to mean &amp;ldquo;not present,&amp;rdquo; unmarshaling a JSON null into any other Go type has no effect on the value and produces no error.</source>
          <target state="translated">JSONのnull値は、Go値をnilに設定することにより、インターフェイス、マップ、ポインター、またはスライスに非整列化します。JSONでnullは「存在しない」という意味でよく使用されるため、JSON nullを他のGoタイプにマーシャリング解除しても、値には影響せず、エラーも発生しません。</target>
        </trans-unit>
        <trans-unit id="22f4320ee94c207b6f6c1bf76ec0cc99a4e78e12" translate="yes" xml:space="preserve">
          <source>The Listen function creates servers:</source>
          <target state="translated">Listen機能は、サーバーを作成します。</target>
        </trans-unit>
        <trans-unit id="f1e8051445ee7295f2015e153c91e6e9f468a7b9" translate="yes" xml:space="preserve">
          <source>The Map type is optimized for two common use cases: (1) when the entry for a given key is only ever written once but read many times, as in caches that only grow, or (2) when multiple goroutines read, write, and overwrite entries for disjoint sets of keys. In these two cases, use of a Map may significantly reduce lock contention compared to a Go map paired with a separate Mutex or RWMutex.</source>
          <target state="translated">Map型は2つの一般的な使用例に最適化されています。(1)キャッシュが成長するだけのように、指定されたキーのエントリが一度しか書き込まれず、何度も読み込まれる場合、または (2)複数のゴローチンが、キーの不連続なセットのエントリを読み込んだり、書き込んだり、上書きしたりする場合です。この 2 つのケースでは、マップを使用することで、個別の Mutex または RWMutex とペアになった Go マップと比較して、ロックの競合が大幅に減る可能性があります。</target>
        </trans-unit>
        <trans-unit id="93c1aea237df8273d73d6b2b1db4e7c127b7fdb2" translate="yes" xml:space="preserve">
          <source>The Map type is specialized. Most code should use a plain Go map instead, with separate locking or coordination, for better type safety and to make it easier to maintain other invariants along with the map content.</source>
          <target state="translated">マップ型は特殊です。ほとんどのコードでは、型の安全性を高め、マップの内容と一緒に他の不変量を維持することを容易にするために、別個のロックまたは調整を持つ、プレーンな囲碁マップを使用する必要があります。</target>
        </trans-unit>
        <trans-unit id="0006e6725a631489c9423aa1f192586acc3a14d6" translate="yes" xml:space="preserve">
          <source>The MergeMode flags control the behavior of MergePackageFiles.</source>
          <target state="translated">MergeMode フラグは MergePackageFiles の動作を制御します。</target>
        </trans-unit>
        <trans-unit id="46419978a96c95f07df701b47af9ce0c381fb8e5" translate="yes" xml:space="preserve">
          <source>The New function creates errors whose only content is a text message.</source>
          <target state="translated">New関数は、内容がテキストメッセージのみのエラーを作成します。</target>
        </trans-unit>
        <trans-unit id="ed989955d8475da0903bbb33a13d3c6797487592" translate="yes" xml:space="preserve">
          <source>The PC field will be a value returned by a call to the traceback function.</source>
          <target state="translated">PCフィールドは、トレースバック関数の呼び出しによって返される値になります。</target>
        </trans-unit>
        <trans-unit id="886ce6ce1a2e11f65b175c91749f88d574c43226" translate="yes" xml:space="preserve">
          <source>The PNG specification is at &lt;a href=&quot;https://www.w3.org/TR/PNG/&quot;&gt;https://www.w3.org/TR/PNG/&lt;/a&gt;.</source>
          <target state="translated">PNG仕様は&lt;a href=&quot;https://www.w3.org/TR/PNG/&quot;&gt;https://www.w3.org/TR/PNG/にあります&lt;/a&gt;。</target>
        </trans-unit>
        <trans-unit id="c904da70bc4311012997fe9bbd4ccc021eaf72a0" translate="yes" xml:space="preserve">
          <source>The Pos value for a given file is a number in the range [base, base+size], where base and size are specified when a file is added to the file set. The difference between a Pos value and the corresponding file base corresponds to the byte offset of that position (represented by the Pos value) from the beginning of the file. Thus, the file base offset is the Pos value representing the first byte in the file.</source>
          <target state="translated">与えられたファイルのPos値は[base,base+size]の範囲の数値で、ファイルがファイルセットに追加された時にbaseとsizeが指定されます。Pos値と対応するファイルのベースとの差は、ファイルの先頭からのその位置(Pos値で表される)のバイトオフセットに対応します。したがって、ファイルベースのオフセットは、ファイルの最初のバイトを表すPos値となります。</target>
        </trans-unit>
        <trans-unit id="e01da8fcfe6b3b9e18fc8125aed80da656d99c50" translate="yes" xml:space="preserve">
          <source>The Pos value for a given file is a number in the range [base, base+size], where base and size are specified when adding the file to the file set via AddFile.</source>
          <target state="translated">指定されたファイルのPos値は[base,base+size]の範囲の数値で、AddFileを介してファイルセットにファイルを追加する際にbaseとsizeが指定されます。</target>
        </trans-unit>
        <trans-unit id="24b49c8f6cf4d6923667f2f4ded23d7140a2b9f0" translate="yes" xml:space="preserve">
          <source>The Priority is a combination of the syslog facility and severity. For example, LOG_ALERT | LOG_FTP sends an alert severity message from the FTP facility. The default severity is LOG_EMERG; the default facility is LOG_KERN.</source>
          <target state="translated">優先度は、syslog ファシリティと深刻度の組み合わせです。例えば、LOG_ALERT | LOG_FTP は、FTP ファシリティからアラートの深刻度メッセージを送信します。デフォルトの深刻度は LOG_EMERG で、デフォルトのファシリティは LOG_KERN です。</target>
        </trans-unit>
        <trans-unit id="c56c9b0bbe08c95a239dcc95eda30597b6ca619e" translate="yes" xml:space="preserve">
          <source>The Process it returns can be used to obtain information about the underlying operating system process.</source>
          <target state="translated">それが返すプロセスは、基礎となるオペレーティングシステムのプロセスに関する情報を取得するために使用することができます。</target>
        </trans-unit>
        <trans-unit id="10801c2ff1093f1ce7c760ba00803c382474a94e" translate="yes" xml:space="preserve">
          <source>The RSA operations in this package are not implemented using constant-time algorithms.</source>
          <target state="translated">本パッケージの RSA 演算は、一定時間アルゴリズムを使用して実装されていません。</target>
        </trans-unit>
        <trans-unit id="e75efacd08116681c05f3907c86c9cdff60db179" translate="yes" xml:space="preserve">
          <source>The ReadCloser returned by NewReader also implements Resetter.</source>
          <target state="translated">NewReader が返す ReadCloser も Resetter を実装しています。</target>
        </trans-unit>
        <trans-unit id="3bfc20a3944403086f24f5757939a8cbd9b7c5ac" translate="yes" xml:space="preserve">
          <source>The ReadCloser returned by NewReaderDict also implements Resetter.</source>
          <target state="translated">NewReaderDict が返す ReadCloser も Resetter を実装しています。</target>
        </trans-unit>
        <trans-unit id="c4f8edaea822742e73d1aca6a1265098af5d579e" translate="yes" xml:space="preserve">
          <source>The Reader converts all \r\n sequences in its input to plain \n, including in multiline field values, so that the returned data does not depend on which line-ending convention an input file uses.</source>
          <target state="translated">リーダーは、入力ファイルが使用する行末規則に依存しないように、複数行のフィールド値も含めて、入力中の全ての\\rn シーケンスをプレーンな\rnに変換する。</target>
        </trans-unit>
        <trans-unit id="41c2e3518894534a6a634c57bbad5ea70224c3de" translate="yes" xml:space="preserve">
          <source>The Reader.Header fields will be valid in the Reader returned.</source>
          <target state="translated">返されたReaderでは、Reader.Headerフィールドが有効になります。</target>
        </trans-unit>
        <trans-unit id="9fd8011df0852a1e27b3907bd2a3f82247ef31e5" translate="yes" xml:space="preserve">
          <source>The Request.Proto is always HTTP/1.1.</source>
          <target state="translated">Request.Proto は常に HTTP/1.1 です。</target>
        </trans-unit>
        <trans-unit id="09c4e81d433af7e0ae48c721f621859a4e5a3317" translate="yes" xml:space="preserve">
          <source>The Response Body is closed after it is sent.</source>
          <target state="translated">レスポンスボディは送信後に閉じられます。</target>
        </trans-unit>
        <trans-unit id="041fd8da9679545d4de46a3a12d665330f551006" translate="yes" xml:space="preserve">
          <source>The Response.Body is guaranteed to be non-nil and Body.Read call is guaranteed to not return any error other than io.EOF.</source>
          <target state="translated">Response.Bodyは非nilであることが保証されており、Body.Readコールはio.EOF以外のエラーを返さないことが保証されています。</target>
        </trans-unit>
        <trans-unit id="bc99bfa959e73d9ff72d10e54ecd5ffaa2259252" translate="yes" xml:space="preserve">
          <source>The Response.Header is a snapshot of the headers at the time of the first write call, or at the time of this call, if the handler never did a write.</source>
          <target state="translated">Response.Headerは、最初の書き込み呼び出し時のヘッダのスナップショットです。</target>
        </trans-unit>
        <trans-unit id="18a3ebac1f2c2059df0438aac114025f62ecfbf9" translate="yes" xml:space="preserve">
          <source>The Run methods of T and B allow defining subtests and sub-benchmarks, without having to define separate functions for each. This enables uses like table-driven benchmarks and creating hierarchical tests. It also provides a way to share common setup and tear-down code:</source>
          <target state="translated">TとBのRunメソッドでは、サブテストとサブベンチマークを定義することができ、それぞれに個別の関数を定義する必要はありません。これにより、テーブル駆動型ベンチマークや階層型テストの作成などの用途が可能になります。また、共通のセットアップコードとティアダウンコードを共有する方法も提供します。</target>
        </trans-unit>
        <trans-unit id="2fdffd1148a25e94f2ea65756e345947d69016d2" translate="yes" xml:space="preserve">
          <source>The SendMail function and the net/smtp package are low-level mechanisms and provide no support for DKIM signing, MIME attachments (see the mime/multipart package), or other mail functionality. Higher-level packages exist outside of the standard library.</source>
          <target state="translated">SendMail 関数と net/smtp パッケージは低レベルのメカニズムであり、DKIM 署名や MIME 添付ファイル (mime/multipart パッケージを参照)、その他のメール機能はサポートしていません。より高レベルのパッケージは標準ライブラリの外に存在します。</target>
        </trans-unit>
        <trans-unit id="f9a92bd5980ed21b3a625476d07c987591bfa7d7" translate="yes" xml:space="preserve">
          <source>The Spec type stands for any of *ImportSpec, *ValueSpec, and *TypeSpec.</source>
          <target state="translated">Specタイプは、*ImportSpec、*ValueSpec、および*TypeSpecのいずれかを表します。</target>
        </trans-unit>
        <trans-unit id="4919a225e3add39379ff15a9bce358f52cae5ffb" translate="yes" xml:space="preserve">
          <source>The Syscall functions in package syscall pass their uintptr arguments directly to the operating system, which then may, depending on the details of the call, reinterpret some of them as pointers. That is, the system call implementation is implicitly converting certain arguments back from uintptr to pointer.</source>
          <target state="translated">syscall パッケージの Syscall 関数は uintptr 引数を直接オペレーティングシステムに渡します。つまり、システムコールの実装は暗黙のうちに特定の引数を uintptr からポインタに変換しています。</target>
        </trans-unit>
        <trans-unit id="3e332fd0096a988b6619d722b0818e386abfd30a" translate="yes" xml:space="preserve">
          <source>The TIFF file format uses a similar but incompatible version of the LZW algorithm. See the golang.org/x/image/tiff/lzw package for an implementation.</source>
          <target state="translated">TIFF ファイルフォーマットは、LZW アルゴリズムの類似した、しかし互換性のないバージョンを使用しています。実装については golang.org/x/image/tiff/lzw パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="58336a8c0934089954efcd803d6fca80fefa9eb4" translate="yes" xml:space="preserve">
          <source>The TLS field is set to a non-nil dummy value if target has scheme &quot;https&quot;.</source>
          <target state="translated">TLSフィールドには、ターゲットがスキーム &quot;https &quot;を持っている場合には、非nilのダミー値が設定される。</target>
        </trans-unit>
        <trans-unit id="d581afca4a5305392d28788d2eee7630e8dc138a" translate="yes" xml:space="preserve">
          <source>The Time returned by time.Now contains a monotonic clock reading. If Time t has a monotonic clock reading, t.Add adds the same duration to both the wall clock and monotonic clock readings to compute the result. Because t.AddDate(y, m, d), t.Round(d), and t.Truncate(d) are wall time computations, they always strip any monotonic clock reading from their results. Because t.In, t.Local, and t.UTC are used for their effect on the interpretation of the wall time, they also strip any monotonic clock reading from their results. The canonical way to strip a monotonic clock reading is to use t = t.Round(0).</source>
          <target state="translated">time.Nowによって返されたTimeには、単調時計の読みが含まれています。Time tが単調時計の読みを持つ場合、t.Addは、壁時計と単調時計の読みの両方に同じ時間を追加して結果を計算します。t.AddDate(y,m,d),t.Round(d),t.Truncate(d)は壁時間の計算なので、これらは常に結果から単調時計の読みを削除します。t.In,t.Local,t.UTCは壁時間の解釈に影響を与えるために使用されるため、これらもまた、結果から単調なクロックの読みを削除します。単調な時計の読み取り値を取り除くための定型的な方法は、t=t.Round(0)を使用することです。</target>
        </trans-unit>
        <trans-unit id="33e81456d15715e940a5919174eaa3f7637dcde7" translate="yes" xml:space="preserve">
          <source>The Timer type represents a single event. When the Timer expires, the current time will be sent on C, unless the Timer was created by AfterFunc. A Timer must be created with NewTimer or AfterFunc.</source>
          <target state="translated">Timer型は単一のイベントを表します。タイマーの期限が切れると、AfterFuncで作成された場合を除き、現在の時刻がCに送信されます。タイマーはNewTimerまたはAfterFuncで作成する必要があります。</target>
        </trans-unit>
        <trans-unit id="cf73d1723f31995bde582871be9d0a7a3c49f2e8" translate="yes" xml:space="preserve">
          <source>The Universe scope contains all predeclared objects of Go. It is the outermost scope of any chain of nested scopes.</source>
          <target state="translated">Universe スコープには、Go のすべての宣言済みオブジェクトが含まれています。これは、入れ子になっているスコープのチェーンの最外周のスコープです。</target>
        </trans-unit>
        <trans-unit id="d2217feb010f2a9e20eb107dc97fbe00b28a97e3" translate="yes" xml:space="preserve">
          <source>The Unsafe package is the package returned by an importer for the import path &quot;unsafe&quot;.</source>
          <target state="translated">Unsafeパッケージは、インポートパス &quot;unsafe &quot;に対してインポーターが返すパッケージです。</target>
        </trans-unit>
        <trans-unit id="82e1a6db6a2ce451395a30960fcbaa8d447276c7" translate="yes" xml:space="preserve">
          <source>The Unwrap, Is and As functions work on errors that may wrap other errors. An error wraps another error if its type has the method</source>
          <target state="translated">Unwrap、Is、As関数は、他のエラーをラップする可能性のあるエラーに対して働きます。エラーは、その型が</target>
        </trans-unit>
        <trans-unit id="84a102639d5d98f811fc502808b53b881ef02020" translate="yes" xml:space="preserve">
          <source>The Userinfo type is an immutable encapsulation of username and password details for a URL. An existing Userinfo value is guaranteed to have a username set (potentially empty, as allowed by RFC 2396), and optionally a password.</source>
          <target state="translated">Userinfo型は、URLのユーザ名とパスワードの詳細を不変にカプセル化したものである。既存のUserinfo値は、ユーザ名(RFC2396で許可されているように空の可能性があります)とパスワードを持つことが保証されています。</target>
        </trans-unit>
        <trans-unit id="fbd19f3117c4f5404c3dc4318c570ed741a162cd" translate="yes" xml:space="preserve">
          <source>The Value.Call method allows the caller to invoke a typed function in terms of Values; in contrast, MakeFunc allows the caller to implement a typed function in terms of Values.</source>
          <target state="translated">対照的に、MakeFunc は、呼び出し元が Values の型付き関数を実装することを可能にします。</target>
        </trans-unit>
        <trans-unit id="b671f0d2f06db5c55a3ebed77ddd3e1fdacf58bc" translate="yes" xml:space="preserve">
          <source>The Wait method will return the exit code and release associated resources once the command exits.</source>
          <target state="translated">Waitメソッドは、コマンドが終了すると終了コードを返し、関連するリソースを解放します。</target>
        </trans-unit>
        <trans-unit id="f996448ff14d875bb2a49935e2e1a1c11597d19a" translate="yes" xml:space="preserve">
          <source>The WithCancel, WithDeadline, and WithTimeout functions take a Context (the parent) and return a derived Context (the child) and a CancelFunc. Calling the CancelFunc cancels the child and its children, removes the parent's reference to the child, and stops any associated timers. Failing to call the CancelFunc leaks the child and its children until the parent is canceled or the timer fires. The go vet tool checks that CancelFuncs are used on all control-flow paths.</source>
          <target state="translated">WithCancel、WithDeadline、および WithTimeout 関数は、コンテキスト (親)を受け取り、派生コンテキスト (子)と CancelFunc を返します。CancelFunc を呼び出すと、子とその子をキャンセルし、子への親の参照を削除し、関連するタイマーを停止します。CancelFunc の呼び出しに失敗すると、親がキャンセルされるか、タイマーが切れるまで子とその子がリークされます。go vetツールは、すべてのコントロールフローパスでCancelFuncが使用されているかどうかをチェックします。</target>
        </trans-unit>
        <trans-unit id="7ad67f6f0923ebfa2c780fb9b0118879fff918f1" translate="yes" xml:space="preserve">
          <source>The Writer assumes that all Unicode code points have the same width; this may not be true in some fonts or if the string contains combining characters.</source>
          <target state="translated">こ れは、 フ ォ ン ト に よ っ ては真ではない場合もあ り ますし、 文字列に結合キ ャ ラ ク タ が含まれてい る 場合には真ではない場合もあ り ます。</target>
        </trans-unit>
        <trans-unit id="e4b495842c9aa071c7e0475777b24079ec5d06f2" translate="yes" xml:space="preserve">
          <source>The Writer currently provides no support for sparse files.</source>
          <target state="translated">ライターは現在、疎なファイルをサポートしていません。</target>
        </trans-unit>
        <trans-unit id="53af9c2eed3edf32c0f1e34e826ade2723d6ef7e" translate="yes" xml:space="preserve">
          <source>The Writer must buffer input internally, because proper spacing of one line may depend on the cells in future lines. Clients must call Flush when done calling Write.</source>
          <target state="translated">ライターは内部的に入力をバッファリングしなければなりません。クライアントはWriteの呼び出しが終わったらFlushを呼ばなければなりません。</target>
        </trans-unit>
        <trans-unit id="628a74097036f85303a5350ae981dc164e95f20b" translate="yes" xml:space="preserve">
          <source>The Writer treats incoming bytes as UTF-8-encoded text consisting of cells terminated by horizontal ('\t') or vertical ('\v') tabs, and newline ('\n') or formfeed ('\f') characters; both newline and formfeed act as line breaks.</source>
          <target state="translated">ライターは、着信バイトを、水平('\t')または垂直('\v')タブと、改行('\n')またはフォームフィード('Formfeed')文字で終端されたセルからなるUTF-8エンコードされたテキストとして扱います。</target>
        </trans-unit>
        <trans-unit id="ff09099a8f170cf0d12905fa7c7238d645a38332" translate="yes" xml:space="preserve">
          <source>The XML element for a struct contains marshaled elements for each of the exported fields of the struct, with these exceptions:</source>
          <target state="translated">構造体の XML 要素には、これらの例外を除いて、構造体のエクスポートされたフィールドごとにマーシャリングされた要素が含まれます。</target>
        </trans-unit>
        <trans-unit id="79336ab4324d9f5dfdaefa0128d6e4be21b88b75" translate="yes" xml:space="preserve">
          <source>The []byte arguments are the data from the corresponding debug section in the object file; for example, for an ELF object, abbrev is the contents of the &quot;.debug_abbrev&quot; section.</source>
          <target state="translated">例えば、ELF オブジェクトの場合、abbrev は &quot;.debug_abbrev&quot; セクションの内容です。</target>
        </trans-unit>
        <trans-unit id="76c0ad8d05ede9a06fba9319e4883b6c3aed9f8a" translate="yes" xml:space="preserve">
          <source>The actual read interface needed by NewReader. If the passed in io.Reader does not also have ReadByte, the NewReader will introduce its own buffering.</source>
          <target state="translated">NewReaderが必要とする実際の読み込みインターフェイス。io.Readerで渡されたものがReadByteも持っていない場合、NewReaderは独自のバッファリングを導入します。</target>
        </trans-unit>
        <trans-unit id="c853d84a15cfc8c913087ccf677e5edf1ca53e04" translate="yes" xml:space="preserve">
          <source>The add operation, implemented by the AddT functions, is the atomic equivalent of:</source>
          <target state="translated">AddT 関数で実装されている add 操作は、アトミックに相当します。</target>
        </trans-unit>
        <trans-unit id="7b4a22ebac17d94f75fe50addbae480c54b8e412" translate="yes" xml:space="preserve">
          <source>The addresses in the to parameter are the SMTP RCPT addresses.</source>
          <target state="translated">toパラメータのアドレスはSMTP RCPTアドレスです。</target>
        </trans-unit>
        <trans-unit id="fa78f066db9b3a5524ca42a8affe77f75da9d63e" translate="yes" xml:space="preserve">
          <source>The allocs profile is the same as the heap profile but changes the default pprof display to -alloc_space, the total number of bytes allocated since the program began (including garbage-collected bytes).</source>
          <target state="translated">allocsプロファイルはヒーププロファイルと同じですが、デフォルトのpprofの表示を-alloc_spaceに変更します。</target>
        </trans-unit>
        <trans-unit id="7b7e2adce610eba0eb46d47752259233e509b5f5" translate="yes" xml:space="preserve">
          <source>The append built-in function appends elements to the end of a slice. If it has sufficient capacity, the destination is resliced to accommodate the new elements. If it does not, a new underlying array will be allocated. Append returns the updated slice. It is therefore necessary to store the result of append, often in the variable holding the slice itself:</source>
          <target state="translated">組み込みのappend関数は、スライスの最後に要素を追加します。十分な容量があれば,新しい要素を収容するために格納先が再スライスされます.十分な容量がない場合は、新しい基礎となる配列が割り当てられます。Appendは更新されたスライスを返します。したがって、appendの結果を、多くの場合、スライス自体を保持する変数に格納する必要があります。</target>
        </trans-unit>
        <trans-unit id="319121c4cf28a1a73f5a5d055a29a23993940f46" translate="yes" xml:space="preserve">
          <source>The argument obj must be a pointer to an object allocated by calling new, by taking the address of a composite literal, or by taking the address of a local variable. The argument finalizer must be a function that takes a single argument to which obj's type can be assigned, and can have arbitrary ignored return values. If either of these is not true, SetFinalizer may abort the program.</source>
          <target state="translated">引数 obj は、new を呼び出すか、複合リテラルのアドレスを取るか、ローカル変数のアドレスを取ることで割り当てられたオブジェクトへのポインタでなければなりません。引数ファイナライザは、obj の型を代入できる単一の引数を取り、任意の無視された戻り値を持つことができる関数でなければなりません。これらのいずれかが真でない場合、SetFinalizer はプログラムを中止することがあります。</target>
        </trans-unit>
        <trans-unit id="cd8b4269726f03ea74d83f3435788f2723fca1f6" translate="yes" xml:space="preserve">
          <source>The argument pos must have been returned by a call to Tell on this line table.</source>
          <target state="translated">引数 pos は、この行テーブル上で Tell を呼び出して返されたものでなければなりません。</target>
        </trans-unit>
        <trans-unit id="b92996537add2723dc45807913fd63c71882192d" translate="yes" xml:space="preserve">
          <source>The argument to the -run and -bench command-line flags is an unanchored regular expression that matches the test's name. For tests with multiple slash-separated elements, such as subtests, the argument is itself slash-separated, with expressions matching each name element in turn. Because it is unanchored, an empty expression matches any string. For example, using &quot;matching&quot; to mean &quot;whose name contains&quot;:</source>
          <target state="translated">コマンドラインフラグの -run と -bench の引数は、テストの名前にマッチするアンアンアンカーな正規表現です。サブテストのように複数のスラッシュで区切られた要素を持つテストの場合、引数はそれ自体がスラッシュで区切られており、それぞれの名前の要素に順番にマッチする式を持ちます。これはアンアンチョアされているので、空の式はどんな文字列にもマッチします。例えば、&quot;matching &quot;を使用して &quot;誰の名前が含まれているか &quot;を意味します。</target>
        </trans-unit>
        <trans-unit id="e79a98521fd13244e0b154d938bb00c75c9b0451" translate="yes" xml:space="preserve">
          <source>The base argument must be 0 or a value between 2 and MaxBase. For base 0, the number prefix determines the actual base: A prefix of &amp;ldquo;0b&amp;rdquo; or &amp;ldquo;0B&amp;rdquo; selects base 2, &amp;ldquo;0&amp;rdquo;, &amp;ldquo;0o&amp;rdquo; or &amp;ldquo;0O&amp;rdquo; selects base 8, and &amp;ldquo;0x&amp;rdquo; or &amp;ldquo;0X&amp;rdquo; selects base 16. Otherwise, the selected base is 10 and no prefix is accepted.</source>
          <target state="translated">base引数は0または2とMaxBaseの間の値でなければなりません。基数0の場合、数値の接頭辞は実際の基数を決定します。「0b」または「0B」の接頭辞は基数2を選択し、「0」、「0o」または「0O」は基数8を選択し、「0x」または「0X」は選択しますベース16.それ以外の場合、選択されたベースは10であり、接頭辞は受け入れられません。</target>
        </trans-unit>
        <trans-unit id="1f5bc3650196f245f397cccfe0b715471a484024" translate="yes" xml:space="preserve">
          <source>The base argument must be 0, 2, 8, 10, or 16. Providing an invalid base argument will lead to a run-time panic.</source>
          <target state="translated">ベースとなる引数は、0、2、8、10、または16でなければなりません。無効な基底引数を与えると、実行時にパニックになります。</target>
        </trans-unit>
        <trans-unit id="999251e457607fde479613cc188e10bb8aa35ffc" translate="yes" xml:space="preserve">
          <source>The behavior of Close after the first call is undefined. Specific implementations may document their own behavior.</source>
          <target state="translated">最初の呼び出し後のCloseの動作は定義されていません。特定の実装では、独自の動作を文書化することができます。</target>
        </trans-unit>
        <trans-unit id="a5501fbd34c66d8be25df49275f9a5880a90030a" translate="yes" xml:space="preserve">
          <source>The benchmark function must run the target code b.N times. During benchmark execution, b.N is adjusted until the benchmark function lasts long enough to be timed reliably. The output</source>
          <target state="translated">ベンチマーク関数は、ターゲットコードを b.N 回実行する必要があります。ベンチマーク実行中、b.Nは、ベンチマーク関数が確実に計時されるのに十分な長さになるまで調整されます。出力される</target>
        </trans-unit>
        <trans-unit id="5d5239994cd75391745c3ffd216fe5a8cda11e2c" translate="yes" xml:space="preserve">
          <source>The bin/ directory holds compiled commands. Each command is named for its source directory, but only using the final element, not the entire path. That is, the command with source in DIR/src/foo/quux is installed into DIR/bin/quux, not DIR/bin/foo/quux. The foo/ is stripped so that you can add DIR/bin to your PATH to get at the installed commands.</source>
          <target state="translated">bin/ディレクトリにはコンパイル済みのコマンドが格納されています。各コマンドはそのソースディレクトリに名前が付けられていますが、パス全体ではなく最後の要素のみを使用します。つまり、DIR/src/foo/quux にソースを持つコマンドは DIR/bin/quux にインストールされ、 DIR/bin/foo/quux にはインストールされません。foo/が剥がされているのは、DIR/binをPATHに追加してインストールされたコマンドにたどり着けるようにするためです。</target>
        </trans-unit>
        <trans-unit id="5fb2943938d895315eb0861e562b65ec37e4257a" translate="yes" xml:space="preserve">
          <source>The bitSize argument specifies the integer type that the result must fit into. Bit sizes 0, 8, 16, 32, and 64 correspond to int, int8, int16, int32, and int64. If bitSize is below 0 or above 64, an error is returned.</source>
          <target state="translated">bitSize 引数は、結果が収まる整数型を指定します。ビットサイズ 0,8,16,32,64 は int,int8,int16,int32,int64 に対応します。bitSize が 0 以下、または 64 以上の場合は、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="73a023e42c8f449dd9afceb038f53730f09d0f3a" translate="yes" xml:space="preserve">
          <source>The blocksize of MD5 in bytes.</source>
          <target state="translated">MD5のブロックサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="b15f9638286bf74ad9f05789a97346025af52de4" translate="yes" xml:space="preserve">
          <source>The blocksize of SHA-1 in bytes.</source>
          <target state="translated">SHA-1のブロックサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="a7b36663bea360572efce2e38cb3e1eb26ceecf3" translate="yes" xml:space="preserve">
          <source>The blocksize of SHA256 and SHA224 in bytes.</source>
          <target state="translated">SHA256とSHA224のブロックサイズをバイト単位で表したものです。</target>
        </trans-unit>
        <trans-unit id="97aa274f72b6214d58f8cac268e6604a5f6faa7b" translate="yes" xml:space="preserve">
          <source>The body function will be run in each goroutine. It should set up any goroutine-local state and then iterate until pb.Next returns false. It should not use the StartTimer, StopTimer, or ResetTimer functions, because they have global effect. It should also not call Run.</source>
          <target state="translated">body 関数は各 goroutine で実行されます。それは、任意のgoroutineローカル状態を設定し、pb.Nextがfalseを返すまで反復処理する必要があります。StartTimer、StopTimer、ResetTimer関数はグローバルな効果を持つため、使用してはいけません。また、Runを呼び出してはいけません。</target>
        </trans-unit>
        <trans-unit id="af7dc8ebb6f00c62864546d31e047f12c2a2774d" translate="yes" xml:space="preserve">
          <source>The boolean functions take any zero value to be false and a non-zero value to be true.</source>
          <target state="translated">ブール関数は、任意のゼロ値をfalse、ゼロ以外の値をtrueとします。</target>
        </trans-unit>
        <trans-unit id="0ca3ec8906bf9075e98bceae22793965b445ac42" translate="yes" xml:space="preserve">
          <source>The boundary is usually obtained from the &quot;boundary&quot; parameter of the message's &quot;Content-Type&quot; header. Use mime.ParseMediaType to parse such headers.</source>
          <target state="translated">境界は通常、メッセージの &quot;Content-Type &quot;ヘッダの &quot;boundary &quot;パラメータから取得されます。このようなヘッダを解析するには、mime.ParseMediaTypeを使用します。</target>
        </trans-unit>
        <trans-unit id="93f9cb3d63de38d1cca4d1f9efd9ca872f4716ce" translate="yes" xml:space="preserve">
          <source>The built-in table is small but on unix it is augmented by the local system's mime.types file(s) if available under one or more of these names:</source>
          <target state="translated">ビルトインテーブルは小さいですが、Unixでは、ローカルシステムのmime.typesファイル(複数可)がこれらの名前の一つ以上で利用可能であれば、それによって拡張されます。</target>
        </trans-unit>
        <trans-unit id="d093a31770ef0176a6cc811f5e90de0295df923b" translate="yes" xml:space="preserve">
          <source>The byte offsets for each file in a file set are mapped into distinct (integer) intervals, one interval [base, base+size] per file. Base represents the first byte in the file, and size is the corresponding file size. A Pos value is a value in such an interval. By determining the interval a Pos value belongs to, the file, its file base, and thus the byte offset (position) the Pos value is representing can be computed.</source>
          <target state="translated">ファイルセット内の各ファイルのバイトオフセットは、ファイルごとに 1 つの間隔 [base,base+size]の異なる (整数)間隔にマッピングされます。baseはファイルの最初のバイトを表し、sizeは対応するファイルサイズを表します。Pos値は、このような間隔の値である。Pos値が属する間隔を決定することで、ファイル、そのファイルのベース、したがってPos値が表すバイトオフセット(位置)を計算することができます。</target>
        </trans-unit>
        <trans-unit id="e3abe768a37a21ebff40b7c9151a7b3edc6c44e0" translate="yes" xml:space="preserve">
          <source>The calendrical calculations always assume a Gregorian calendar, with no leap seconds.</source>
          <target state="translated">カレント計算は常にグレゴリオ暦を前提としており、閏秒はありません。</target>
        </trans-unit>
        <trans-unit id="dd3a4f20159bb2231f4a88b4a45f4b772e80ba3c" translate="yes" xml:space="preserve">
          <source>The caller should call Close when finished, to shut it down.</source>
          <target state="translated">発信者は、終了したらCloseを呼び出してシャットダウンする必要があります。</target>
        </trans-unit>
        <trans-unit id="257fee20f0af9c58c89645e121bcb859cd7d2ba2" translate="yes" xml:space="preserve">
          <source>The cap built-in function returns the capacity of v, according to its type:</source>
          <target state="translated">キャップ組み込み関数は、v の容量を型に応じて返します。</target>
        </trans-unit>
        <trans-unit id="e553ed25dbd923acc16eb919df1e53d3eec5c8ba" translate="yes" xml:space="preserve">
          <source>The certificate is signed by parent. If parent is equal to template then the certificate is self-signed. The parameter pub is the public key of the signee and priv is the private key of the signer.</source>
          <target state="translated">証明書は親によって署名されます。parentがtemplateと等しい場合、証明書は自己署名されます。パラメータ pub は署名者の公開鍵、priv は署名者の秘密鍵です。</target>
        </trans-unit>
        <trans-unit id="dc1a26e65aace69e5a0db7ec46a4e897871c5c8e" translate="yes" xml:space="preserve">
          <source>The chain consists of err itself followed by the sequence of errors obtained by repeatedly calling Unwrap.</source>
          <target state="translated">このチェーンは、 err 自体の後に、Unwrap を繰り返し呼び出すことで得られる一連のエラーで構成されています。</target>
        </trans-unit>
        <trans-unit id="784fcd80e08909ffdec4906c1c0dba2f7d623904" translate="yes" xml:space="preserve">
          <source>The client must close the response body when finished with it:</source>
          <target state="translated">クライアントは、それが終了したらレスポンスボディを閉じなければなりません。</target>
        </trans-unit>
        <trans-unit id="7b4dd52e8c63aa6987cf8c226672c7d4edb96f82" translate="yes" xml:space="preserve">
          <source>The close built-in function closes a channel, which must be either bidirectional or send-only. It should be executed only by the sender, never the receiver, and has the effect of shutting down the channel after the last sent value is received. After the last value has been received from a closed channel c, any receive from c will succeed without blocking, returning the zero value for the channel element. The form</source>
          <target state="translated">close ビルトイン関数はチャネルをクローズします。この関数は送信者のみが実行すべきであり、受信者が実行すべきではありません。閉じられたチャネル c から最後の値を受信した後は、 c からの受信はブロックされることなく成功し、チャネル要素にゼロ値を返します。この形式は</target>
        </trans-unit>
        <trans-unit id="0c580a2c87e0f2186896309d301dc63aad975a10" translate="yes" xml:space="preserve">
          <source>The command must have been started by Start.</source>
          <target state="translated">コマンドはStartで起動されている必要があります。</target>
        </trans-unit>
        <trans-unit id="ef8e35ecfe346ef37bdb6a41007c64b491f6581e" translate="yes" xml:space="preserve">
          <source>The comment prefix &quot;Unordered output:&quot; is like &quot;Output:&quot;, but matches any line order:</source>
          <target state="translated">コメントのプレフィックス &quot;Unordered output:&quot;は &quot;Output:&quot;のようなものですが、任意の行順にマッチします。</target>
        </trans-unit>
        <trans-unit id="af6f6bfe9472d6cd742ab07f4d13576c62ddc94c" translate="yes" xml:space="preserve">
          <source>The compare-and-swap operation, implemented by the CompareAndSwapT functions, is the atomic equivalent of:</source>
          <target state="translated">CompareAndSwapT 関数で実装されている比較・スワップ操作は、原子的にはこれと同等のものです。</target>
        </trans-unit>
        <trans-unit id="043f79dd25246a384c5fa68242e8b0950e54d69e" translate="yes" xml:space="preserve">
          <source>The comparison functions work on any values whose type Go defines as comparable. For basic types such as integers, the rules are relaxed: size and exact type are ignored, so any integer value, signed or unsigned, may be compared with any other integer value. (The arithmetic value is compared, not the bit pattern, so all negative integers are less than all unsigned integers.) However, as usual, one may not compare an int with a float32 and so on.</source>
          <target state="translated">比較関数は、Goの型が比較可能な値として定義されているすべての値で動作します。整数などの基本的な型については、ルールが緩和されています。サイズと正確な型は無視されるため、符号付きか符号なしかにかかわらず、任意の整数値を他の整数値と比較できます。(比較されるのはビットパターンではなく算術値なので、すべての負の整数はすべての符号なし整数よりも小さくなります)。ただし、通常通り、int と float32 などを比較することはできません。</target>
        </trans-unit>
        <trans-unit id="53528cbdfa92cb465406c07ac6068163f15d8aff" translate="yes" xml:space="preserve">
          <source>The comparison functions work on basic types only (or named basic types, such as &quot;type Celsius float32&quot;). They implement the Go rules for comparison of values, except that size and exact type are ignored, so any integer value, signed or unsigned, may be compared with any other integer value. (The arithmetic value is compared, not the bit pattern, so all negative integers are less than all unsigned integers.) However, as usual, one may not compare an int with a float32 and so on.</source>
          <target state="translated">比較関数は、基本型 (または &quot;type Celsius float32&quot; などの名前付き基本型)のみで動作します。これらの関数は、サイズと正確な型が無視されることを除いて、値の比較に関する Go ルールを実装しているため、符号付きまたは符号なしの任意の整数値を他の任意の整数値と比較することができます。(算術値が比較されるのはビット パターンではなく、ビット パターンなので、すべての負の整数はすべての符号なし整数よりも小さくなります)。ただし、通常通り、int と float32 などを比較することはできません。</target>
        </trans-unit>
        <trans-unit id="3947ad8b82d2733c9797fbc944569005335da23c" translate="yes" xml:space="preserve">
          <source>The compiler handles a Pointer converted to a uintptr in the argument list of a call to a function implemented in assembly by arranging that the referenced allocated object, if any, is retained and not moved until the call completes, even though from the types alone it would appear that the object is no longer needed during the call.</source>
          <target state="translated">コンパイラは、アセンブリで実装された関数の呼び出しの引数リストで uintptr に変換された Pointer を処理し、型だけを見ると呼び出し中にオブジェクトが不要になったように見えても、参照された割り当てオブジェクトがあれば、呼び出しが完了するまで保持して移動しないようにします。</target>
        </trans-unit>
        <trans-unit id="fbe6ac33b06dc273e75926ad2490d8b3832a0214" translate="yes" xml:space="preserve">
          <source>The complex built-in function constructs a complex value from two floating-point values. The real and imaginary parts must be of the same size, either float32 or float64 (or assignable to them), and the return value will be the corresponding complex type (complex64 for float32, complex128 for float64).</source>
          <target state="translated">ビルトイン関数 complex は、2 つの浮動小数点値から複素数値を作成します。実部と虚部は同じサイズでなければならず、 float32 または float64 (またはそれらに代入可能)でなければなりません。</target>
        </trans-unit>
        <trans-unit id="ef38d7c2bab871a13bc3d0543cc12b1189486358" translate="yes" xml:space="preserve">
          <source>The compression level can be DefaultCompression, NoCompression, HuffmanOnly or any integer value between BestSpeed and BestCompression inclusive. The error returned will be nil if the level is valid.</source>
          <target state="translated">圧縮レベルは、DefaultCompression、NoCompression、HuffmanOnly、またはBestSpeedとBestCompressionの間の任意の整数値を指定できます。レベルが有効な場合、エラーは nil で返されます。</target>
        </trans-unit>
        <trans-unit id="0a1efe910d68e12343aa1a848eb28de270b6d379" translate="yes" xml:space="preserve">
          <source>The computed hash values depend only on the initial seed and the sequence of bytes provided to the Hash object, not on the way in which the bytes are provided. For example, the three sequences</source>
          <target state="translated">計算されたハッシュ値は、最初のシードとHashオブジェクトに提供されたバイトのシーケンスにのみ依存し、バイトの提供方法には依存しません。例えば、3つのシーケンス</target>
        </trans-unit>
        <trans-unit id="351f67248e4d8a5518193363a02cfe1c83014012" translate="yes" xml:space="preserve">
          <source>The constant UpperLower has an otherwise impossible delta value.</source>
          <target state="translated">定数UpperLowerは、そうでなければ不可能なデルタ値を持っています。</target>
        </trans-unit>
        <trans-unit id="8c8706295858fb442cc0b27075b7f68668230e3c" translate="yes" xml:space="preserve">
          <source>The content's Seek method must work: ServeContent uses a seek to the end of the content to determine its size.</source>
          <target state="translated">コンテンツの Seek メソッドが動作する必要があります。ServeContent は、コンテンツのサイズを決定するためにコンテンツの最後までシークを使用します。</target>
        </trans-unit>
        <trans-unit id="7a49805d773fd718112af263e9a481b6533ee15e" translate="yes" xml:space="preserve">
          <source>The context function will be called with a single argument, a pointer to a struct:</source>
          <target state="translated">コンテキスト関数は、構造体へのポインタという単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="d756f1871d5d4f318cef847f3f882a9119bd1f8d" translate="yes" xml:space="preserve">
          <source>The conversion rules are:</source>
          <target state="translated">変換ルールは</target>
        </trans-unit>
        <trans-unit id="8b9249f4b562855e188c8c6e04ee31f39d350295" translate="yes" xml:space="preserve">
          <source>The copy built-in function copies elements from a source slice into a destination slice. (As a special case, it also will copy bytes from a string to a slice of bytes.) The source and destination may overlap. Copy returns the number of elements copied, which will be the minimum of len(src) and len(dst).</source>
          <target state="translated">コピー組み込み関数は、ソーススライスからデスティネーションスライスに要素をコピーします。(特殊なケースとして、文字列からバイトのスライスにバイトをコピーすることもできます)。コピー元とコピー先は重複する場合があります。Copy はコピーされた要素の数を返しますが、これは len(src)と len(dst)の最小値になります。</target>
        </trans-unit>
        <trans-unit id="7003f654a24cc0fe7e8417bb3241f59de9fe836b" translate="yes" xml:space="preserve">
          <source>The count determines the number of substrings to return:</source>
          <target state="translated">count は返す部分文字列の数を決定します。</target>
        </trans-unit>
        <trans-unit id="5dbb8e654b6fb0895661f0c315a08864e55ec239" translate="yes" xml:space="preserve">
          <source>The crypto/tls package only implements some countermeasures against Lucky13 attacks on CBC-mode encryption, and only on SHA1 variants. See &lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&quot;&gt;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&lt;/a&gt; and &lt;a href=&quot;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&quot;&gt;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&lt;/a&gt;.</source>
          <target state="translated">crypto / tlsパッケージは、CBCモードの暗号化に対するLucky13攻撃に対するいくつかの対策のみを実装し、SHA1バリアントにのみ実装します。&lt;a href=&quot;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&quot;&gt;http://www.isg.rhul.ac.uk/tls/TLStiming.pdf&lt;/a&gt;および&lt;a href=&quot;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&quot;&gt;https://www.imperialviolet.org/2013/02/04/luckythirteen.html&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="3df95d2be07bff158f354793704b39fa0b17441d" translate="yes" xml:space="preserve">
          <source>The cryptographic operations are implemented using constant-time algorithms.</source>
          <target state="translated">暗号演算は、一定時間アルゴリズムを用いて実装されています。</target>
        </trans-unit>
        <trans-unit id="7eab6b01982b7d5d0967ad563265ae830b1ba245" translate="yes" xml:space="preserve">
          <source>The cryptographic operations do not use constant-time algorithms.</source>
          <target state="translated">暗号演算では、一定時間アルゴリズムを使用しません。</target>
        </trans-unit>
        <trans-unit id="27e1f3bd597aed109fd98be320131ab37e282b69" translate="yes" xml:space="preserve">
          <source>The currently supported key types are *rsa.PublicKey, *ecdsa.PublicKey and ed25519.PublicKey. pub must be a supported key type, and priv must be a crypto.Signer with a supported public key.</source>
          <target state="translated">現在サポートされている鍵タイプは、*rsa.PublicKey、*ecdsa.PublicKey、およびed25519.PublicKeyである。 pubにはサポートされている鍵タイプを指定し、 privにはサポートされている公開鍵を持つcrypto.Signerを指定する必要がある。</target>
        </trans-unit>
        <trans-unit id="7a6143ad908fa5d13101f2932405343a9fc3dd21" translate="yes" xml:space="preserve">
          <source>The debug parameter enables additional output. Passing debug=0 prints only the hexadecimal addresses that pprof needs. Passing debug=1 adds comments translating addresses to function names and line numbers, so that a programmer can read the profile without tools.</source>
          <target state="translated">debug パラメータを使用すると、追加出力が可能になります。debug=0 を渡すと、pprof が必要とする 16 進数のアドレスのみを出力します。debug=1 を渡すと、アドレスを関数名と行番号に変換するコメントが追加され、プログラマがツールなしでプロファイルを読むことができるようになります。</target>
        </trans-unit>
        <trans-unit id="0fb33327b278ec03a78f307167cc6e36a7617010" translate="yes" xml:space="preserve">
          <source>The debug parameter enables additional output. Passing debug=0 writes the gzip-compressed protocol buffer described in &lt;a href=&quot;https://github.com/google/pprof/tree/master/proto#overview&quot;&gt;https://github.com/google/pprof/tree/master/proto#overview&lt;/a&gt;. Passing debug=1 writes the legacy text format with comments translating addresses to function names and line numbers, so that a programmer can read the profile without tools.</source>
          <target state="translated">デバッグパラメータは、追加の出力を有効にします。debug = 0を渡すと、&lt;a href=&quot;https://github.com/google/pprof/tree/master/proto#overview&quot;&gt;https：//github.com/google/pprof/tree/master/proto#overviewで&lt;/a&gt;説明されているgzip圧縮されたプロトコルバッファが書き込まれます。debug = 1を渡すと、アドレスを関数名と行番号に変換するコメント付きのレガシーテキスト形式が書き込まれるため、プログラマーはツールなしでプロファイルを読み取ることができます。</target>
        </trans-unit>
        <trans-unit id="bcfadeab38a63378303009891c62ea08d3a9f648" translate="yes" xml:space="preserve">
          <source>The decision can also be forced while building the Go source tree by setting the netgo or netcgo build tag.</source>
          <target state="translated">また、netgoまたはnetcgoのビルドタグを設定することで、Goのソースツリーを構築している間に強制的に決定することもできます。</target>
        </trans-unit>
        <trans-unit id="e55a5ed5aee48109c8f556983bc2b6ba47049c1e" translate="yes" xml:space="preserve">
          <source>The decoded form returned by the Reader's Read method rewrites the &quot;\r\n&quot; line endings into the simpler &quot;\n&quot;, removes leading dot escapes if present, and stops with error io.EOF after consuming (and discarding) the end-of-sequence line.</source>
          <target state="translated">Reader's Readメソッドによって返された復号化された形式は、&quot;\r\r\n &quot;の行末をより単純な&quot;\n &quot;に書き換え、先頭のドットエスケープがあれば削除し、行末を消費(破棄)した後、エラーio.EOFで停止する。</target>
        </trans-unit>
        <trans-unit id="ade9eaf300f62ddbbf2f36e130c2f06e8467d26d" translate="yes" xml:space="preserve">
          <source>The decoder introduces its own buffering and may read data from r beyond the JSON values requested.</source>
          <target state="translated">デコーダは独自のバッファリングを導入し、要求されたJSON値を超えてrからデータを読み込むことがあります。</target>
        </trans-unit>
        <trans-unit id="500a9025cc154f7f8f86d7b577b23c5a4330caf0" translate="yes" xml:space="preserve">
          <source>The default HTTP/1.x and HTTP/2 ResponseWriter implementations support Flusher, but ResponseWriter wrappers may not. Handlers should always test for this ability at runtime.</source>
          <target state="translated">デフォルトの HTTP/1.x および HTTP/2 ResponseWriter の実装は Flusher をサポートしていますが、ResponseWriter のラッパーはサポートしていない場合があります。ハンドラは常に実行時にこの機能をテストしなければなりません。</target>
        </trans-unit>
        <trans-unit id="dbfff1190b706ff9c82ad5d939db53ac5e19b8d5" translate="yes" xml:space="preserve">
          <source>The default ResponseWriter for HTTP/1.x connections supports Hijacker, but HTTP/2 connections intentionally do not. ResponseWriter wrappers may also not support Hijacker. Handlers should always test for this ability at runtime.</source>
          <target state="translated">HTTP/1.x 接続のデフォルトの ResponseWriter は Hijacker をサポートしていますが、HTTP/2 接続では意図的に Hijacker をサポートしていません。ResponseWriter ラッパーも Hijacker をサポートしていない場合があります。ハンドラは常に実行時にこの機能をテストする必要があります。</target>
        </trans-unit>
        <trans-unit id="29a4bf6e98ccc92440a0810fcad76a8019aec7ff" translate="yes" xml:space="preserve">
          <source>The default behavior is to unlink the socket file only when package net created it. That is, when the listener and the underlying socket file were created by a call to Listen or ListenUnix, then by default closing the listener will remove the socket file. but if the listener was created by a call to FileListener to use an already existing socket file, then by default closing the listener will not remove the socket file.</source>
          <target state="translated">デフォルトの動作は、パッケージ net がソケットファイルを作成したときにのみ、ソケットファイルのリンクを解除するようになっています。つまり、Listen や ListenUnix の呼び出しによってリスナーとソケットファイルが作成された場合、デフォルトではリスナーを閉じてもソケットファイルは削除されますが、既存のソケットファイルを利用するために FileListener の呼び出しによってリスナーが作成された場合、デフォルトではリスナーを閉じてもソケットファイルは削除されません。</target>
        </trans-unit>
        <trans-unit id="f3bd4ca778e016b570e20fa99bcd057793129198" translate="yes" xml:space="preserve">
          <source>The default format for %v is:</source>
          <target state="translated">v の既定の形式は、%v です。</target>
        </trans-unit>
        <trans-unit id="e5fbfa4bdd17cdbfb6f18b5cea533902d960ee26" translate="yes" xml:space="preserve">
          <source>The default max idle connections is currently 2. This may change in a future release.</source>
          <target state="translated">デフォルトの最大アイドル接続数は現在2です。 これは将来のリリースで変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="385f08ab994be40fdde70d56e38ccb63bb65d078" translate="yes" xml:space="preserve">
          <source>The default set of command-line flags is controlled by top-level functions. The FlagSet type allows one to define independent sets of flags, such as to implement subcommands in a command-line interface. The methods of FlagSet are analogous to the top-level functions for the command-line flag set.</source>
          <target state="translated">コマンドラインフラグのデフォルトセットは、トップレベル関数によって制御されます。フラグセット型は、コマンドラインインタフェースにサブコマンドを実装するなど、独立したフラグのセットを定義することを可能にします。フラグセットのメソッドは、コマンドラインフラグセットのトップレベル関数に類似しています。</target>
        </trans-unit>
        <trans-unit id="a05d93e44d2bb1f3518c258e77ecac2e52df5b7c" translate="yes" xml:space="preserve">
          <source>The define action names the template being created by providing a string constant. Here is a simple example:</source>
          <target state="translated">defineアクションは、文字列定数を提供することで作成されるテンプレートに名前を付けます。ここに簡単な例を示します。</target>
        </trans-unit>
        <trans-unit id="1752a2a854e41ac9841751567fab2d2b00d5fd9e" translate="yes" xml:space="preserve">
          <source>The defined file mode bits are the most significant bits of the FileMode. The nine least-significant bits are the standard Unix rwxrwxrwx permissions. The values of these bits should be considered part of the public API and may be used in wire protocols or disk representations: they must not be changed, although new bits might be added.</source>
          <target state="translated">定義されたファイルモードビットは、FileModeの最上位ビットです。9つの最下位ビットは、標準的なUnixのrwxrwxrwxパーミッションです。これらのビットの値はパブリック API の一部とみなされ、ワイヤプロトコルやディスク表現で使用することができます。</target>
        </trans-unit>
        <trans-unit id="5cff7ee8fa31e3f6a6739a2dee232b717a523c6f" translate="yes" xml:space="preserve">
          <source>The delete built-in function deletes the element with the specified key (m[key]) from the map. If m is nil or there is no such element, delete is a no-op.</source>
          <target state="translated">delete 組み込み関数は、指定されたキー(m[key])を持つ要素をマップから削除します。m が nil であるか、そのような要素が存在しない場合、delete は実行されません。</target>
        </trans-unit>
        <trans-unit id="7be6f8c0500d37b62c7237cb3172e8612a1be7ae" translate="yes" xml:space="preserve">
          <source>The dictionary may be nil. If not, its contents should not be modified until the Writer is closed.</source>
          <target state="translated">辞書は nil であってもかまいません。そうでない場合は、ライターが閉じられるまでその内容は変更されるべきではありません。</target>
        </trans-unit>
        <trans-unit id="bc9a068b7cdbaff9efc9114bb2316dc6eaf9165d" translate="yes" xml:space="preserve">
          <source>The direction of a channel is indicated by one of these constants.</source>
          <target state="translated">チャネルの方向は、これらの定数のいずれかによって示される。</target>
        </trans-unit>
        <trans-unit id="46b217ce09d8bd67e6158257fb40490e88a671dd" translate="yes" xml:space="preserve">
          <source>The direction of a channel type is indicated by a bit mask including one or both of the following constants.</source>
          <target state="translated">チャンネルタイプの方向は、以下の定数のいずれか一方または両方を含むビットマスクによって示される。</target>
        </trans-unit>
        <trans-unit id="7dfb11306d6f3241074422bcaa067904172344cc" translate="yes" xml:space="preserve">
          <source>The directory is neither guaranteed to exist nor have accessible permissions.</source>
          <target state="translated">そのディレクトリが存在することは保証されていませんし、アクセス可能なパーミッションもありません。</target>
        </trans-unit>
        <trans-unit id="565d684eeda7e9edb8f7bb0c103897df1854d973" translate="yes" xml:space="preserve">
          <source>The documentation for http.Request.Write details which fields of req are included in the dump.</source>
          <target state="translated">http.Request.Write のドキュメントには、req のどのフィールドがダンプに含まれるかの詳細が記載されています。</target>
        </trans-unit>
        <trans-unit id="07211f6185f4e6de4337f341c2cdb69d4cc499c7" translate="yes" xml:space="preserve">
          <source>The documentation here focuses on the security features of the package. For information about how to program the templates themselves, see the documentation for text/template.</source>
          <target state="translated">ここでは、パッケージのセキュリティ機能に焦点を当てています。テンプレート自体をプログラムする方法については、text/template のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="155a6f0a50ad424a0f77dec85fedb05aad3e6814" translate="yes" xml:space="preserve">
          <source>The driver interface has evolved over time. Drivers should implement Connector and DriverContext interfaces. The Connector.Connect and Driver.Open methods should never return ErrBadConn. ErrBadConn should only be returned from Validator, SessionResetter, or a query method if the connection is already in an invalid (e.g. closed) state.</source>
          <target state="translated">ドライバのインターフェースは時間の経過とともに進化してきました。ドライバは、Connector と DriverContext インターフェースを実装する必要があります。Connector.Connect および Driver.Open メソッドは、決して ErrBadConn を返すべきではありません。ErrBadConn は、接続がすでに無効な状態(クローズ状態など)になっている場合にのみ Validator、SessionResetter、またはクエリメソッドから返されるべきです。</target>
        </trans-unit>
        <trans-unit id="d608ae58f506a273826ac24fbe8a6e832c7cfa18" translate="yes" xml:space="preserve">
          <source>The earlier index entries are the indices of the embedded fields implicitly traversed to get from (the type of) x to f, starting at embedding depth 0.</source>
          <target state="translated">初期のインデックスエントリは、埋め込み深度0から始まり、(型の)xからfに到達するために暗黙的にトラバースされた埋め込みフィールドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="9969cd1fd12276c81b2d25b52e841cee1f38a6af" translate="yes" xml:space="preserve">
          <source>The earlier index entries are the indices of the embedded struct fields traversed to get to the found entry, starting at depth 0.</source>
          <target state="translated">それ以前のインデックスエントリは、深さ0から始まる、見つかったエントリに到達するためにトラバースされた埋め込み構造体フィールドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="55f7215f8e7a1256ecd44a2e72424fdc36866f77" translate="yes" xml:space="preserve">
          <source>The encoded form is:</source>
          <target state="translated">符号化された形になっています。</target>
        </trans-unit>
        <trans-unit id="58738aa6dbb46f39a2d83f07741091a7022a1024" translate="yes" xml:space="preserve">
          <source>The encoding handles 4-byte chunks, using a special encoding for the last fragment, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead.</source>
          <target state="translated">エンコードは、最後のフラグメントに特別なエンコードを使用して 4 バイトのチャンクを処理するので、 Encode は大きなデータストリームの個々のブロックでの使用には適していません。代わりに NewEncoder()を使用してください。</target>
        </trans-unit>
        <trans-unit id="352cf3ce7f63c6b9e4ef698575b243f2f7eab5f4" translate="yes" xml:space="preserve">
          <source>The encoding of each struct field can be customized by the format string stored under the &quot;json&quot; key in the struct field's tag. The format string gives the name of the field, possibly followed by a comma-separated list of options. The name may be empty in order to specify options without overriding the default field name.</source>
          <target state="translated">各構造体フィールドのエンコーディングは、構造体フィールドのタグの &quot;json&quot; キーの下に格納されているフォーマット文字列によってカスタマイズすることができます。フォーマット文字列は、フィールドの名前を指定し、その後にオプションをカンマで区切ったリストをつけることもできます。デフォルトのフィールド名を上書きせずにオプションを指定するには、名前を空にすることができます。</target>
        </trans-unit>
        <trans-unit id="17b6791f4c87db95fbf5fcc1580f710e0b98bcc7" translate="yes" xml:space="preserve">
          <source>The encoding pads the output to a multiple of 4 bytes, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead.</source>
          <target state="translated">エンコードは出力を 4 バイトの倍数にパッドするので、Encode は大きなデータストリームの個々のブロックでの使用には適していません。代わりに NewEncoder()を使用してください。</target>
        </trans-unit>
        <trans-unit id="f9b92d6b313993a8570c418851ae0a82ee1d08b2" translate="yes" xml:space="preserve">
          <source>The encoding pads the output to a multiple of 8 bytes, so Encode is not appropriate for use on individual blocks of a large data stream. Use NewEncoder() instead.</source>
          <target state="translated">エンコードは出力を 8 バイトの倍数にパッドするので、Encode は大きなデータストリームの個々のブロックでの使用には適していません。代わりに NewEncoder()を使用してください。</target>
        </trans-unit>
        <trans-unit id="f21e6b7ab20b84c2608ae859489552989b9c9ded" translate="yes" xml:space="preserve">
          <source>The entire test file is presented as the example when it contains a single example function, at least one other function, type, variable, or constant declaration, and no test or benchmark functions.</source>
          <target state="translated">テストファイル全体が例として提示されるのは、1つの例題関数、少なくとも1つの他の関数、型、変数、定数の宣言が含まれており、テストやベンチマーク関数がない場合です。</target>
        </trans-unit>
        <trans-unit id="8a5b41cf040dd894c5f5818385e864bb8f5f4256" translate="yes" xml:space="preserve">
          <source>The environment values may be either a complete URL or a &quot;host[:port]&quot;, in which case the &quot;http&quot; scheme is assumed. An error is returned if the value is a different form.</source>
          <target state="translated">環境値は完全なURLか &quot;host[:port]&quot;のどちらかである。値が異なる形式の場合はエラーが返されます。</target>
        </trans-unit>
        <trans-unit id="63d88a909a5214b04c717d2600360e2bf8c34633" translate="yes" xml:space="preserve">
          <source>The error built-in interface type is the conventional interface for representing an error condition, with the nil value representing no error.</source>
          <target state="translated">エラー組み込みインタフェース型は、エラー状態を表現するための従来のインタフェースであり、nil 値はエラーが発生しないことを表す。</target>
        </trans-unit>
        <trans-unit id="057113f0f11fb7ab423f9c5529d153f0951fafc6" translate="yes" xml:space="preserve">
          <source>The error is EOF only if no bytes were read. If an EOF happens after reading some but not all the bytes, Read returns ErrUnexpectedEOF.</source>
          <target state="translated">エラーはバイトが読み込まれなかった場合のみEOFとなります。一部のバイトではなく、すべてのバイトを読み込んだ後にEOFが発生した場合、ReadはErrUnexpectedEOFを返します。</target>
        </trans-unit>
        <trans-unit id="53b8936240ed1387970343e072546b9e5c4ce38c" translate="yes" xml:space="preserve">
          <source>The errors that ParseComplex returns have concrete type *NumError and include err.Num = s.</source>
          <target state="translated">ParseComplexが返すエラーは具象型の*NumErrorで、 err.Num=s.を含みます。</target>
        </trans-unit>
        <trans-unit id="e19a9195a1344f79f24fd7f396a97d73332aa946" translate="yes" xml:space="preserve">
          <source>The errors that ParseFloat returns have concrete type *NumError and include err.Num = s.</source>
          <target state="translated">ParseFloat が返すエラーは具象型の *NumError で、 err.Num=s.を含みます。</target>
        </trans-unit>
        <trans-unit id="235cee0ee469905c73061c3ebbf12b0afd87e749" translate="yes" xml:space="preserve">
          <source>The errors that ParseInt returns have concrete type *NumError and include err.Num = s. If s is empty or contains invalid digits, err.Err = ErrSyntax and the returned value is 0; if the value corresponding to s cannot be represented by a signed integer of the given size, err.Err = ErrRange and the returned value is the maximum magnitude integer of the appropriate bitSize and sign.</source>
          <target state="translated">ParseInt が返すエラーは具象型 *NumError で、 err.Num=s を含みます。 s が空であるか無効な数字を含む場合、 err.Err=ErrSyntax となり、返される値は 0 となります。s に対応する値が指定されたサイズの符号付き整数で表現できない場合、 err.Err=ErrRange となり、返される値は適切なビットサイズと符号の最大マグニチュード整数となります。</target>
        </trans-unit>
        <trans-unit id="1079b4c215daaeaddfd42a5c24ae40421a24ca31" translate="yes" xml:space="preserve">
          <source>The exact method of division of a binary into separate Objs is an internal detail of the symbol table format.</source>
          <target state="translated">バイナリを別のObjsに分割する正確な方法は、シンボルテーブル形式の内部的な詳細です。</target>
        </trans-unit>
        <trans-unit id="704442846624164254cefb0621f909b9f8e7b255" translate="yes" xml:space="preserve">
          <source>The executable example for Time.Format demonstrates the working of the layout string in detail and is a good reference.</source>
          <target state="translated">Time.Formatの実行例では、レイアウト文字列の動作を詳しく説明しており、参考になります。</target>
        </trans-unit>
        <trans-unit id="d1e6774ae13e892b5b495469c8177e657ea29b91" translate="yes" xml:space="preserve">
          <source>The execution trace captures a wide range of execution events such as goroutine creation/blocking/unblocking, syscall enter/exit/block, GC-related events, changes of heap size, processor start/stop, etc. A precise nanosecond-precision timestamp and a stack trace is captured for most events. The generated trace can be interpreted using `go tool trace`.</source>
          <target state="translated">実行トレースは、goroutineの作成/ブロック/ブロック解除、syscallの入力/終了/ブロック、GC関連イベント、ヒープサイズの変更、プロセッサの起動/停止など、幅広い実行イベントをキャプチャします。ほとんどのイベントについて、正確なナノ秒精度のタイムスタンプとスタックトレースがキャプチャされます。生成されたトレースは、`go tool trace`を使って解釈することができる。</target>
        </trans-unit>
        <trans-unit id="0bb8da556b82de3d2273cd84d139d0610336a88a" translate="yes" xml:space="preserve">
          <source>The familiar base-setting prefixes 0b (binary), 0o and 0 (octal), and 0x (hexadecimal) are accepted when scanning integers without a format or with the %v verb, as are digit-separating underscores.</source>
          <target state="translated">おなじみの基底設定接頭辞 0b (2 進数)、0o および 0 (8 進数)、0x (16 進数)は、整数をフォーマットなしでスキャンするとき、または %v 動詞を使用してスキャンするときに、桁区切りのアンダースコアと同様に受け入れられます。</target>
        </trans-unit>
        <trans-unit id="f9ffee1670410a5e7cd11d5f1bee248ae5a136bc" translate="yes" xml:space="preserve">
          <source>The field semantics differ slightly between client and server usage. In addition to the notes on the fields below, see the documentation for Request.Write and RoundTripper.</source>
          <target state="translated">フィールドのセマンティクスは、クライアントとサーバの使用法によって若干異なります。以下のフィールドに関する注意事項に加えて、Request.Write と RoundTripper のドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="055e51145f588ea85435a4c1863b09a1b1141496" translate="yes" xml:space="preserve">
          <source>The file name table of a compilation unit is not fixed. Files returns the file table as of the current position in the line table. This may contain more entries than the file table at an earlier position in the line table, though existing entries never change.</source>
          <target state="translated">コンパイルユニットのファイル名テーブルは固定ではありません。Files は、行テーブルの現在の位置におけるファイルテーブルを返します。既存のエントリは変更されませんが、ラインテーブルの以前の位置のファイルテーブルよりも多くのエントリが含まれている可能性があります。</target>
        </trans-unit>
        <trans-unit id="bc18f2dd0c8c98e57212ed20f1a2ef2dc2747c6d" translate="yes" xml:space="preserve">
          <source>The file's data can then be read into a slice of bytes. Read and Write take their byte counts from the length of the argument slice.</source>
          <target state="translated">その後、ファイルのデータをバイト数のスライスに読み込むことができます。リードとライトは、引数スライスの長さからバイト数を取ります。</target>
        </trans-unit>
        <trans-unit id="bf3df07f08dd9391973ec022887d04b86f02f1b9" translate="yes" xml:space="preserve">
          <source>The filepath package uses either forward slashes or backslashes, depending on the operating system. To process paths such as URLs that always use forward slashes regardless of the operating system, see the path package.</source>
          <target state="translated">filepath パッケージは、オペレーテ ィ ングシステムに応じて、前方スラッシュかバックスラッシュのいずれかを使用します。オペレーティングシステムに関係なく常にフォワードスラッシュを使用する URL のようなパスを処理するには、path パッケージを参照してください。</target>
        </trans-unit>
        <trans-unit id="e2a5de21556a23ce2ab6268f51afe1d5e198e5ff" translate="yes" xml:space="preserve">
          <source>The finalizer is scheduled to run at some arbitrary time after the program can no longer reach the object to which obj points. There is no guarantee that finalizers will run before a program exits, so typically they are useful only for releasing non-memory resources associated with an object during a long-running program. For example, an os.File object could use a finalizer to close the associated operating system file descriptor when a program discards an os.File without calling Close, but it would be a mistake to depend on a finalizer to flush an in-memory I/O buffer such as a bufio.Writer, because the buffer would not be flushed at program exit.</source>
          <target state="translated">ファイナライザは、プログラムが obj が指すオブジェクトに到達できなくなった後、任意の時間に実行されるようにスケジュールされています。プログラムが終了する前にファイナライザが実行されるという保証はないので、通常、ファイナライザは長時間実行されているプログラムの間にオブジェクトに関連付けられている非メモリ・リソースを解放する場合にのみ有用です。例えば、os.File オブジェクトは、プログラムが Close を呼び出さずに os.File を破棄したときに、関連するオペレーティング・システム・ファイル記述子を閉じるためにファイナライザを使用することができますが、bufio.Writer のようなインメモリ I/O バッファをフラッシュするためにファイナライザに依存するのは間違いです。</target>
        </trans-unit>
        <trans-unit id="b1e301ef4e8e6bbc26fb8b640366f5d912e010bd" translate="yes" xml:space="preserve">
          <source>The first call to ReadContinuedLine will return &quot;Line 1 continued...&quot; and the second will return &quot;Line 2&quot;.</source>
          <target state="translated">ReadContinuedLineの1回目の呼び出しは「Line 1 continued...」を返し、2回目の呼び出しは「Line 2」を返します。</target>
        </trans-unit>
        <trans-unit id="aa248e4cf567dddf42fcb3d7320a5fbdd025b032" translate="yes" xml:space="preserve">
          <source>The first call will cache the current user information. Subsequent calls will return the cached value and will not reflect changes to the current user.</source>
          <target state="translated">最初の呼び出しは現在のユーザ情報をキャッシュします。それ以降の呼び出しはキャッシュされた値を返し、現在のユーザへの変更は反映されません。</target>
        </trans-unit>
        <trans-unit id="da786a1e6a510514415594e5971ba9d3b0ef0c66" translate="yes" xml:space="preserve">
          <source>The first key will be used when creating new tickets, while all keys can be used for decrypting tickets. It is safe to call this function while the server is running in order to rotate the session ticket keys. The function will panic if keys is empty.</source>
          <target state="translated">最初のキーは新しいチケットを作成する際に使用され、すべてのキーはチケットの復号化に使用できます。セッションチケットのキーを回転させるために、サーバが動作している間にこの関数を呼び出すのが安全です。この関数は keys が空の場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="f9bea105d5515e425130c674b9a6d60024d04428" translate="yes" xml:space="preserve">
          <source>The first step to profiling a Go program is to enable profiling. Support for profiling benchmarks built with the standard testing package is built into go test. For example, the following command runs benchmarks in the current directory and writes the CPU and memory profiles to cpu.prof and mem.prof:</source>
          <target state="translated">Goプログラムをプロファイリングする最初のステップは、プロファイリングを有効にすることです。標準のテストパッケージで構築されたベンチマークのプロファイリングのサポートは、go testに組み込まれています。例えば、以下のコマンドは、カレントディレクトリでベンチマークを実行し、CPUとメモリのプロファイルをcpu.profとmem.profに書き込みます。</target>
        </trans-unit>
        <trans-unit id="436dd80ca68673a729fce026c246571c6f61d421" translate="yes" xml:space="preserve">
          <source>The first time the function is called for a particular traceback, all the fields except PC will be 0. The function should fill in the other fields if possible, setting them to 0/nil if the information is not available. The Data field may be used to store any useful information across calls. The More field should be set to non-zero if there is more information for this PC, zero otherwise. If More is set non-zero, the function will be called again with the same PC, and may return different information (this is intended for use with inlined functions). If More is zero, the function will be called with the next PC value in the traceback. When the traceback is complete, the function will be called once more with PC set to zero; this may be used to free any information. Each call will leave the fields of the struct set to the same values they had upon return, except for the PC field when the More field is zero. The function must not keep a copy of the struct pointer between calls.</source>
          <target state="translated">この関数が特定のトレースバックに対して最初に呼び出されたとき、PCを除くすべてのフィールドは0になります。 この関数は、可能であれば他のフィールドを埋め、情報が利用できない場合は0/nilに設定する必要があります。Dataフィールドは、呼び出しにまたがって有用な情報を保存するために使用することができます。Moreフィールドは、このPCの情報がさらにある場合は0以外の値に設定する必要があり、そうでない場合は0に設定する必要があります。Moreが0以外に設定されている場合、この関数は同じPCで再度呼び出され、異なる情報を返す可能性があります(これはインライン関数での使用を意図しています)。Moreが0の場合、関数はトレースバックの次のPC値で呼び出されます。トレースバックが完了すると、この関数は PC をゼロに設定して再度呼び出されます。各呼び出しでは、構造体のフィールドは、More フィールドがゼロの場合の PC フィールドを除き、リターン時の値と同じ値に設定されたままになります。この関数は、呼び出しの間に構造体ポインタのコピーを保持してはいけません。</target>
        </trans-unit>
        <trans-unit id="1c12332b1a7f816e653faac5972323a1a86f4075" translate="yes" xml:space="preserve">
          <source>The fmt package's Errorf function lets us use the package's formatting features to create descriptive error messages.</source>
          <target state="translated">fmt パッケージの Errorf 関数を使うと、パッケージの書式設定機能を使って説明的なエラーメッセージを作成することができます。</target>
        </trans-unit>
        <trans-unit id="daed29ba07a438b86a35f4ffceadf0ee0b2962c4" translate="yes" xml:space="preserve">
          <source>The following environment variables ($name or %name%, depending on the host operating system) control the run-time behavior of Go programs. The meanings and use may change from release to release.</source>
          <target state="translated">以下の環境変数 ($name または %name%)は、Go プログラムの実行時の動作を制御します (ホスト・オペレーティング・システムによって異なります)。この意味と使用法は、リリースごとに変更される可能性があります。</target>
        </trans-unit>
        <trans-unit id="d76a76a5baf9188ebac1a65a2793d054e97d3403" translate="yes" xml:space="preserve">
          <source>The following example shows how to maintain a scalable frequently read, but infrequently updated data structure using copy-on-write idiom.</source>
          <target state="translated">以下の例は、コピーオンライトイディオムを使用して、頻繁に読み込まれるが更新頻度の低いスケーラブルなデータ構造を維持する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="3f0a6fe70878d3ed973c5f4c4f9e11a4b37e3d2a" translate="yes" xml:space="preserve">
          <source>The following example shows how to use Value for periodic program config updates and propagation of the changes to worker goroutines.</source>
          <target state="translated">以下の例では、プログラム構成の定期的な更新とワーカーゴロチンへの変更の伝播にValueを使用する方法を示しています。</target>
        </trans-unit>
        <trans-unit id="2cccb14470014df050daea92c16a16fd189e8367" translate="yes" xml:space="preserve">
          <source>The following forms are permitted:</source>
          <target state="translated">以下のような形態が認められています。</target>
        </trans-unit>
        <trans-unit id="f535af253987553534ec7b604b13bea0bafaf89a" translate="yes" xml:space="preserve">
          <source>The following key types are currently supported: *rsa.PrivateKey, *ecdsa.PrivateKey and ed25519.PrivateKey. Unsupported key types result in an error.</source>
          <target state="translated">現在、以下のキータイプがサポートされています。*rsa.PrivateKey、*ecdsa.PrivateKey、およびed25519.PrivateKeyです。サポートされていないキー・タイプはエラーになります。</target>
        </trans-unit>
        <trans-unit id="db7a430d5590cf9adf90b727249460131ab84e28" translate="yes" xml:space="preserve">
          <source>The following key types are currently supported: *rsa.PublicKey, *ecdsa.PublicKey and ed25519.PublicKey. Unsupported key types result in an error.</source>
          <target state="translated">現在、以下のキータイプがサポートされています。*rsa.PublicKey、*ecdsa.PublicKey、およびed25519.PublicKeyです。サポートされていないキー・タイプはエラーになります。</target>
        </trans-unit>
        <trans-unit id="575dc13df3822635a20233f0d934b2828c4cbcc1" translate="yes" xml:space="preserve">
          <source>The following patterns involving Pointer are valid. Code not using these patterns is likely to be invalid today or to become invalid in the future. Even the valid patterns below come with important caveats.</source>
          <target state="translated">Pointerを含む以下のパターンが有効です。これらのパターンを使用していないコードは、現在無効であるか、将来的に無効になる可能性があります。以下の有効なパターンであっても、重要な注意点があります。</target>
        </trans-unit>
        <trans-unit id="ea1b5d42ec809a44272262968add764fd0382aa5" translate="yes" xml:space="preserve">
          <source>The following table captures the capabilities of each format:</source>
          <target state="translated">以下の表は、各フォーマットの能力をまとめたものです。</target>
        </trans-unit>
        <trans-unit id="00ec28c9d7b575a36a11e5441e71a7350e3c8790" translate="yes" xml:space="preserve">
          <source>The following tags on struct fields have special meaning to Unmarshal:</source>
          <target state="translated">構造体フィールドの以下のタグは、Unmarshalにとって特別な意味を持ちます。</target>
        </trans-unit>
        <trans-unit id="b74a12e0ee03ebdd96a1e5698ef65e80645b4c11" translate="yes" xml:space="preserve">
          <source>The format fmt and precision prec have the same meaning as in FormatFloat. It rounds the result assuming that the original was obtained from a complex value of bitSize bits, which must be 64 for complex64 and 128 for complex128.</source>
          <target state="translated">フォーマット fmt と精度 prec は、FormatFloat と同じ意味を持ちます。元の値が bitSize ビットの複素数値から得られたものであると仮定して結果を丸めます。</target>
        </trans-unit>
        <trans-unit id="89924ba6250a79536c8a80bb6ca7f28f4193a60a" translate="yes" xml:space="preserve">
          <source>The format fmt is one of 'b' (-ddddp&amp;plusmn;ddd, a binary exponent), 'e' (-d.dddde&amp;plusmn;dd, a decimal exponent), 'E' (-d.ddddE&amp;plusmn;dd, a decimal exponent), 'f' (-ddd.dddd, no exponent), 'g' ('e' for large exponents, 'f' otherwise), 'G' ('E' for large exponents, 'f' otherwise), 'x' (-0xd.ddddp&amp;plusmn;ddd, a hexadecimal fraction and binary exponent), or 'X' (-0Xd.ddddP&amp;plusmn;ddd, a hexadecimal fraction and binary exponent).</source>
          <target state="translated">フォーマットfmtは、 'b'（-ddddp&amp;plusmn;ddd、2進指数）、 'e'（-d.dddde&amp;plusmn;dd、10進指数）、 'E'（-d.ddddE&amp;plusmn;dd、10進指数）のいずれかです。 ）、 'f'（-ddd.dddd、指数なし）、 'g'（大きな指数の場合は 'e'、それ以外の場合は 'f'）、 'G'（大きな指数の場合は 'E'、それ以外の場合は 'f'）、 ' x '（-0xd.ddddp&amp;plusmn;ddd、16進数の小数部と2進指数）、または' X '（-0Xd.ddddP&amp;plusmn;ddd、16進数の小数部と2進指数）。</target>
        </trans-unit>
        <trans-unit id="f76288ef40c91d2e63963863e41869428543cdec" translate="yes" xml:space="preserve">
          <source>The formats 2, _2, and 02 are unpadded, space-padded, and zero-padded day of month. The formats __2 and 002 are space-padded and zero-padded three-character day of year; there is no unpadded day of year format.</source>
          <target state="translated">フォーマット2、_2、および02は、パッドなし、スペースパッド付き、ゼロパッド付きの月の日のフォーマットです。フォーマット_2_2と002は、スペースパッド付き、ゼロパッド付きの3文字の年の日であり、パッドなしの年の日のフォーマットはありません。</target>
        </trans-unit>
        <trans-unit id="1f639fab95b9f7e1b599aa2a265c8aee60d79d31" translate="yes" xml:space="preserve">
          <source>The formfeed character acts like a newline but it also terminates all columns in the current line (effectively calling Flush). Tab- terminated cells in the next line start new columns. Unless found inside an HTML tag or inside an escaped text segment, formfeed characters appear as newlines in the output.</source>
          <target state="translated">formfeed文字は改行のように動作しますが、現在の行のすべてのカラムを終了させます(効果的にFlushを呼び出します)。次の行のタブで終了したセルは新しい列を開始します。HTMLタグの中やエスケープされたテキストセグメントの中にない限り、フォームフィード文字は出力の中では改行として表示されます。</target>
        </trans-unit>
        <trans-unit id="6c966e528430f5e8f847d49a893afb0bf98faff4" translate="yes" xml:space="preserve">
          <source>The function is never called with an empty data slice unless atEOF is true. If atEOF is true, however, data may be non-empty and, as always, holds unprocessed text.</source>
          <target state="translated">この関数は、atEOFが真でない限り、空のデータスライスで呼び出されることはありません。しかし atEOF が真の場合、データは空ではないかもしれず、常に未処理のテキストを保持します。</target>
        </trans-unit>
        <trans-unit id="bb0e0b68d3018d9e09f97b972052414d315bce69" translate="yes" xml:space="preserve">
          <source>The function may return early (before the entire result is written) and return a formatting error, for instance due to an incorrect AST.</source>
          <target state="translated">この関数は,(結果全体が書き込まれる前に)早期に返され,例えばASTが正しくないためにフォーマットエラーを返すことがあります.</target>
        </trans-unit>
        <trans-unit id="f82da77fd5615642bd9b732fd9350b4315a5dea8" translate="yes" xml:space="preserve">
          <source>The function panics if the provided interface is not a slice.</source>
          <target state="translated">この関数は、提供されたインターフェースがスライスでない場合にパニックを起こします。</target>
        </trans-unit>
        <trans-unit id="4a5f1ee976b1b1f94f517d27ee9603ea7e455c85" translate="yes" xml:space="preserve">
          <source>The function panics if z &amp;lt; 0. The value of z is undefined in that case.</source>
          <target state="translated">z &amp;lt;0の場合、関数はパニックになります。その場合、zの値は未定義です。</target>
        </trans-unit>
        <trans-unit id="d83c73a08df2f74bc57a61017e163cb8c0547bd2" translate="yes" xml:space="preserve">
          <source>The functions in this package allow a program to change the way Go programs handle signals.</source>
          <target state="translated">本パッケージの関数を使用すると、囲碁プログラムが信号を処理する方法をプログラムで変更することができます。</target>
        </trans-unit>
        <trans-unit id="c621ec21270aea7b19125c0f31ddb234d896d492" translate="yes" xml:space="preserve">
          <source>The fundamental interface is called Image. An Image contains colors, which are described in the image/color package.</source>
          <target state="translated">基本的なインターフェイスは Image と呼ばれています。画像には色が含まれており、それは画像/色パッケージで記述されています。</target>
        </trans-unit>
        <trans-unit id="3e95d4d070ede79d500e36cf5c238c24c3001c9d" translate="yes" xml:space="preserve">
          <source>The gc runtime imposes a limit of 64 kB on channel element types. If t's size is equal to or exceeds this limit, ChanOf panics.</source>
          <target state="translated">gcのランタイムでは、チャネル要素の型に64kBの制限が課せられています。tのサイズがこの制限値と同じかそれを超えると,ChanOfはパニックを起こします.</target>
        </trans-unit>
        <trans-unit id="0b2d97be3dbe373d310641088f98b283534b1dcf" translate="yes" xml:space="preserve">
          <source>The general form represented is:</source>
          <target state="translated">表現される一般的な形態は</target>
        </trans-unit>
        <trans-unit id="e818a1eefc582415dc190e3c644893b44536faa0" translate="yes" xml:space="preserve">
          <source>The gzip file stores a header giving metadata about the compressed file. That header is exposed as the fields of the Writer and Reader structs.</source>
          <target state="translated">gzip ファイルは、圧縮されたファイルに関するメタデータを与えるヘッダを格納します。このヘッダは Writer 構造体と Reader 構造体のフィールドとして公開されます。</target>
        </trans-unit>
        <trans-unit id="d55115d1e7ac93246c076c18ab9827900516047e" translate="yes" xml:space="preserve">
          <source>The handler is typically nil, in which case the DefaultServeMux is used.</source>
          <target state="translated">ハンドラは通常 nil で、その場合は DefaultServeMux が使用されます。</target>
        </trans-unit>
        <trans-unit id="19708f111db26407005495f3eafb1c4b25430791" translate="yes" xml:space="preserve">
          <source>The handling of spaces and newlines differs from that of C's scanf family: in C, newlines are treated as any other space, and it is never an error when a run of spaces in the format string finds no spaces to consume in the input.</source>
          <target state="translated">スペースと改行の扱いは、Cのscanfファミリーとは異なります。Cでは、改行は他のスペースと同じように扱われ、フォーマット文字列の中でスペースを実行しても、入力に使用するスペースが見つからなくてもエラーにはなりません。</target>
        </trans-unit>
        <trans-unit id="1093dd8291a3801884d5894ab223242420be1682" translate="yes" xml:space="preserve">
          <source>The hash functions are collision-resistant but not cryptographically secure. (See crypto/sha256 and crypto/sha512 for cryptographic use.)</source>
          <target state="translated">ハッシュ関数は衝突に強いですが、暗号的には安全ではありません。(暗号の使用法については、crypto/sha256およびcrypto/sha512を参照してください)。</target>
        </trans-unit>
        <trans-unit id="5be9b697fdd2e64517c87254bb1809a8bac3a286" translate="yes" xml:space="preserve">
          <source>The hash value of a given byte sequence is consistent within a single process, but will be different in different processes.</source>
          <target state="translated">与えられたバイト列のハッシュ値は、単一のプロセス内では一貫していますが、異なるプロセスでは異なる値になります。</target>
        </trans-unit>
        <trans-unit id="e507edab6e88a1637c49a21b0db27e0ccae398e0" translate="yes" xml:space="preserve">
          <source>The heap dump format is defined at &lt;a href=&quot;https://golang.org/s/go15heapdump&quot;&gt;https://golang.org/s/go15heapdump&lt;/a&gt;.</source>
          <target state="translated">ヒープダンプの形式は&lt;a href=&quot;https://golang.org/s/go15heapdump&quot;&gt;https://golang.org/s/go15heapdump&lt;/a&gt;で定義されています。</target>
        </trans-unit>
        <trans-unit id="8b009325b4464d415a87b0e6547346de038d0c47" translate="yes" xml:space="preserve">
          <source>The heap profile reports statistics as of the most recently completed garbage collection; it elides more recent allocation to avoid skewing the profile away from live data and toward garbage. If there has been no garbage collection at all, the heap profile reports all known allocations. This exception helps mainly in programs running without garbage collection enabled, usually for debugging purposes.</source>
          <target state="translated">ヒーププロファイルは、最近完了したガベージコレクションの統計情報を報告します。ライブデータからガベージに向かってプロファイルが歪むのを避けるために、より最近の割り当てを消去します。ガベージコレクションが全く行われていない場合、ヒーププロファイルはすべての既知の割り当てを報告します。この例外は、主にガベージコレクションを有効にせずに実行しているプログラムで、通常はデバッグのために役立ちます。</target>
        </trans-unit>
        <trans-unit id="421272feeab82226233835220df71bd5575dfeaf" translate="yes" xml:space="preserve">
          <source>The heap profile tracks both the allocation sites for all live objects in the application memory and for all objects allocated since the program start. Pprof's -inuse_space, -inuse_objects, -alloc_space, and -alloc_objects flags select which to display, defaulting to -inuse_space (live objects, scaled by size).</source>
          <target state="translated">ヒープ・プロファイルは、アプリケーション・メモリ内のすべてのライブ・オブジェクトの割り当て場所と、プログラムの開始以降に割り当てられたすべてのオブジェクトの割り当て場所の両方を追跡します。Pprof の -inuse_space、-inuse_objects、-alloc_space、および -alloc_objects フラグは、表示するオブジェクトを選択します。</target>
        </trans-unit>
        <trans-unit id="9054b52054ed118bba62807238e18c27e8900f1e" translate="yes" xml:space="preserve">
          <source>The http package's Transport and Server both automatically enable HTTP/2 support for simple configurations. To enable HTTP/2 for more complex configurations, to use lower-level HTTP/2 features, or to use a newer version of Go's http2 package, import &quot;golang.org/x/net/http2&quot; directly and use its ConfigureTransport and/or ConfigureServer functions. Manually configuring HTTP/2 via the golang.org/x/net/http2 package takes precedence over the net/http package's built-in HTTP/2 support.</source>
          <target state="translated">httpパッケージのTransportとServerは、単純な設定ではHTTP/2サポートを自動的に有効にします。より複雑な設定で HTTP/2 を有効にしたり、低レベルの HTTP/2 機能を使用したり、Go の新しいバージョンの http2 パッケージを使用したりするには、&quot;golang.org/x/net/http2&quot; を直接インポートして ConfigureTransport や ConfigureServer 関数を使用してください。golang.org/x/net/http2 パッケージを介して手動で HTTP/2 を設定することは、net/http パッケージのビルトイン HTTP/2 サポートよりも優先されます。</target>
        </trans-unit>
        <trans-unit id="7901eb39a7a77a33e17eff2e48d2aac1d7c0d97c" translate="yes" xml:space="preserve">
          <source>The identification of global unicast addresses uses address type identification as defined in RFC 1122, RFC 4632 and RFC 4291 with the exception of IPv4 directed broadcast addresses. It returns true even if ip is in IPv4 private address space or local IPv6 unicast address space.</source>
          <target state="translated">グローバルユニキャストアドレスの識別は、IPv4指向ブロードキャストアドレスを除いて、RFC 1122、RFC 4632、RFC 4291で定義されているアドレスタイプ識別を使用します。ipがIPv4プライベートアドレス空間またはローカルIPv6ユニキャストアドレス空間にある場合でも真を返します。</target>
        </trans-unit>
        <trans-unit id="b257c667cd0c9ffb7ee1c476e193cf63abc04956" translate="yes" xml:space="preserve">
          <source>The imag built-in function returns the imaginary part of the complex number c. The return value will be floating point type corresponding to the type of c.</source>
          <target state="translated">imag組み込み関数は,複素数cの虚数部を返します.</target>
        </trans-unit>
        <trans-unit id="bba6c5ec151d11520ba69091805c64672051a283" translate="yes" xml:space="preserve">
          <source>The implementation compiles a custom codec for each data type in the stream and is most efficient when a single Encoder is used to transmit a stream of values, amortizing the cost of compilation.</source>
          <target state="translated">実装では、ストリーム内のデータ型ごとにカスタムコーデックをコンパイルし、単一のエンコーダを使用して値のストリームを送信する場合に最も効率的であり、コンパイルのコストを償却します。</target>
        </trans-unit>
        <trans-unit id="cc59eb7da6cf17b91e5a422524763e1124d23ad5" translate="yes" xml:space="preserve">
          <source>The implementation fn can assume that the argument Value slice has the number and type of arguments given by typ. If typ describes a variadic function, the final Value is itself a slice representing the variadic arguments, as in the body of a variadic function. The result Value slice returned by fn must have the number and type of results given by typ.</source>
          <target state="translated">実装 fn は、引数 Value スライスが typ で与えられた引数の数と型を持っていると仮定することができます。typが変項関数を記述している場合、最終的なValueはそれ自体が変項関数の本体のように変項引数を表すスライスです。fnによって返される結果のValueスライスは、typによって与えられた結果の数と型を持たなければなりません。</target>
        </trans-unit>
        <trans-unit id="a41481e84f45a7e3719a2630303073b44edd9b5b" translate="yes" xml:space="preserve">
          <source>The implementation is sufficient for HTTP (RFC 2388) and the multipart bodies generated by popular browsers.</source>
          <target state="translated">この実装は、HTTP (RFC 2388)と、一般的なブラウザで生成されるマルチパートボディに十分対応しています。</target>
        </trans-unit>
        <trans-unit id="bd36b82add2ec8e45a6f77ef7cf720308cbe3f24" translate="yes" xml:space="preserve">
          <source>The implementation provides filters that uncompress during reading and compress during writing. For example, to write compressed data to a buffer:</source>
          <target state="translated">実装では、読み込み時に圧縮を解除し、書き込み時に圧縮するフィルタを提供しています。例えば、圧縮されたデータをバッファに書き込む場合などです。</target>
        </trans-unit>
        <trans-unit id="4c05b349b9c7f15622f23c1c3f50e289a6f9207b" translate="yes" xml:space="preserve">
          <source>The input stream consists of basic JSON values&amp;mdash;bool, string, number, and null&amp;mdash;along with delimiters [ ] { } of type Delim to mark the start and end of arrays and objects. Commas and colons are elided.</source>
          <target state="translated">入力ストリームは、bool、string、number、nullの基本的なJSON値と、配列およびオブジェクトの開始と終了をマークするタイプDelimの区切り文字[] {}で構成されます。カンマとコロンは省略されます。</target>
        </trans-unit>
        <trans-unit id="12da2b29ce7b4618ed043885dc9bb14fc4b7647d" translate="yes" xml:space="preserve">
          <source>The input text for a template is UTF-8-encoded text in any format. &quot;Actions&quot;--data evaluations or control structures--are delimited by &quot;{{&quot; and &quot;}}&quot;; all text outside actions is copied to the output unchanged. Except for raw strings, actions may not span newlines, although comments can.</source>
          <target state="translated">テンプレートへの入力テキストは、任意の形式でUTF-8でエンコードされたテキストです。&quot;アクション--データ評価や制御構造--は&quot;{{&quot;と&quot;}}&quot;で区切られています。生の文字列を除いて、アクションは改行できませんが、コメントはできます。</target>
        </trans-unit>
        <trans-unit id="4540c375047525b02ad242a07ddc447e593cb543" translate="yes" xml:space="preserve">
          <source>The issuer distinguished name CRL field and authority key identifier extension are populated using the issuer certificate. issuer must have SubjectKeyId set.</source>
          <target state="translated">発行者識別名 CRL フィールドと権限鍵識別子拡張子は、発行者証明書を使用して入力される。</target>
        </trans-unit>
        <trans-unit id="4ba307a7ab47ab6e6c8f50d8bbcb53f28f406fab" translate="yes" xml:space="preserve">
          <source>The issuer may not be nil, and the crlSign bit must be set in KeyUsage in order to use it as a CRL issuer.</source>
          <target state="translated">発行者はnilであってはならず、CRL発行者として使用するためには、KeyUsageでcrlSignビットが設定されていなければならない。</target>
        </trans-unit>
        <trans-unit id="0fe0f673e6c94e25d76ca7000237cacb398b340e" translate="yes" xml:space="preserve">
          <source>The key name will be used if it's a non-empty string consisting of only Unicode letters, digits, and ASCII punctuation except quotation marks, backslash, and comma.</source>
          <target state="translated">キー名は、引用符、バックスラッシュ、カンマを除く、Unicode文字、数字、ASCII句読点のみで構成される空でない文字列の場合に使用されます。</target>
        </trans-unit>
        <trans-unit id="56c8d36b799fc9e0b2026b0edca00b49c8b68568" translate="yes" xml:space="preserve">
          <source>The keys should be in canonical form, as returned by CanonicalHeaderKey.</source>
          <target state="translated">キーはCanonicalHeaderKeyによって返される正規表現でなければなりません。</target>
        </trans-unit>
        <trans-unit id="aafd41e452c62afe966c7e13f3df11b54dbc58d9" translate="yes" xml:space="preserve">
          <source>The label parameter may contain arbitrary data that will not be encrypted, but which gives important context to the message. For example, if a given public key is used to decrypt two types of messages then distinct label values could be used to ensure that a ciphertext for one purpose cannot be used for another by an attacker. If not required it can be empty.</source>
          <target state="translated">label パラメータには、暗号化されないがメッセージに重要な文脈を与える任意のデータを含めることができます。例えば、ある公開鍵が2種類のメッセージの復号化に使われている場合、ある目的の暗号文が攻撃者によって別の目的に使われることがないように、別個のラベル値を使うことができます。必須でない場合は空にすることもできます。</target>
        </trans-unit>
        <trans-unit id="8cac55c132cd1a101696d231efd1dd2e57c66e06" translate="yes" xml:space="preserve">
          <source>The label parameter must match the value given when encrypting. See EncryptOAEP for details.</source>
          <target state="translated">label パラメータは、暗号化の際に与えられた値と一致している必要があります。詳細は EncryptOAEP を参照してください。</target>
        </trans-unit>
        <trans-unit id="1f23b14d8824650d5d93ee806d28aa66402f402a" translate="yes" xml:space="preserve">
          <source>The last index entry is the field or method index in the (possibly embedded) type where the entry was found, either:</source>
          <target state="translated">最後のインデックスエントリは、エントリが見つかった(埋め込まれている可能性のある)型のフィールドまたはメソッドのインデックスです。</target>
        </trans-unit>
        <trans-unit id="4b9b3d3444da612bde04769b5c20561ed18e861d" translate="yes" xml:space="preserve">
          <source>The legacy Common Name field is ignored unless it's a valid hostname, the certificate doesn't have any Subject Alternative Names, and the GODEBUG environment variable is set to &quot;x509ignoreCN=0&quot;. Support for Common Name is deprecated will be entirely removed in the future.</source>
          <target state="translated">レガシーの Common Name フィールドは、有効なホスト名であること、証明書に Subject Alternative Names がないこと、GODEBUG 環境変数が &quot;x509ignoreCN=0&quot; に設定されている場合を除き、無視されます。Common Nameのサポートは非推奨であり、将来的には完全に削除される予定です。</target>
        </trans-unit>
        <trans-unit id="feec6e46b5f96d5f768a208b14b5f1c441e6736a" translate="yes" xml:space="preserve">
          <source>The len built-in function returns the length of v, according to its type:</source>
          <target state="translated">len組み込み関数は、型に応じてvの長さを返します。</target>
        </trans-unit>
        <trans-unit id="67e3ff53cc19034aa94ce5014984a3863b3ceaa2" translate="yes" xml:space="preserve">
          <source>The limit controls the number of operating system threads, not the number of goroutines. A Go program creates a new thread only when a goroutine is ready to run but all the existing threads are blocked in system calls, cgo calls, or are locked to other goroutines due to use of runtime.LockOSThread.</source>
          <target state="translated">制限はオペレーティングシステムのスレッド数を制御し、ゴローチンの数ではありません。囲碁プログラムは、ゴローチンの実行準備ができている場合にのみ新しいスレッドを作成しますが、既存のすべてのスレッドがシステムコール、cgoコールでブロックされているか、またはruntime.LockOSThreadを使用しているために他のゴローチンにロックされています。</target>
        </trans-unit>
        <trans-unit id="b7d62826dea7a7db650a9558cf682cb6d6d5b0e1" translate="yes" xml:space="preserve">
          <source>The list is sorted by ID. Note that the default cipher suites selected by this package might depend on logic that can't be captured by a static list.</source>
          <target state="translated">リストは ID でソートされます。本パッケージで選択されたデフォルトの暗号スイートは、静的なリストでは捕捉できないロジックに依存する可能性があることに注意してください。</target>
        </trans-unit>
        <trans-unit id="61b31a135931a0a96f45c468dd4c1356b142f056" translate="yes" xml:space="preserve">
          <source>The list of possible Object kinds.</source>
          <target state="translated">可能なオブジェクトの種類のリスト。</target>
        </trans-unit>
        <trans-unit id="f82cdeb26140d2ac8d4f27048ef361e35bc34e51" translate="yes" xml:space="preserve">
          <source>The list of tokens.</source>
          <target state="translated">トークンのリストです。</target>
        </trans-unit>
        <trans-unit id="744b107073d50b7c5d979152623baf7c98836ce1" translate="yes" xml:space="preserve">
          <source>The load and store operations, implemented by the LoadT and StoreT functions, are the atomic equivalents of &quot;return *addr&quot; and &quot;*addr = val&quot;.</source>
          <target state="translated">LoadT関数とStoreT関数によって実装されるロードとストアの操作は、&quot;return *addr &quot;と &quot;*addr=val &quot;の原子的な等価物です。</target>
        </trans-unit>
        <trans-unit id="d80346c4a6d83f0a2408ae318740b75196640a27" translate="yes" xml:space="preserve">
          <source>The lookup function is called each time the resulting importer needs to resolve an import path. In this mode the importer can only be invoked with canonical import paths (not relative or absolute ones); it is assumed that the translation to canonical import paths is being done by the client of the importer.</source>
          <target state="translated">ルックアップ関数は、結果として得られるインポーターがインポートパスを解決する必要があるたびに呼び出されます。このモードでは、インポーターは正規のインポートパス(相対パスや絶対パスではなく)でのみ起動できます。正規のインポートパスへの変換は、インポーターのクライアントによって行われていると想定されます。</target>
        </trans-unit>
        <trans-unit id="d42ee39ba69d607990bf6285f526cdb4d05cd8c5" translate="yes" xml:space="preserve">
          <source>The low bit is therefore analogous to a sign bit, but making it the complement bit instead guarantees that the largest negative integer is not a special case. For example, -129=^128=(^256&amp;gt;&amp;gt;1) encodes as (FE 01 01).</source>
          <target state="translated">したがって、下位ビットは符号ビットに似ていますが、それを補数ビットにすることで、最大の負の整数が特別なケースではないことが保証されます。たとえば、-129 = ^ 128 =（^ 256 &amp;gt;&amp;gt; 1）は（FE 01 01）としてエンコードされます。</target>
        </trans-unit>
        <trans-unit id="e23983031d30e849dd601f8a9a147a11b178b7e1" translate="yes" xml:space="preserve">
          <source>The main use case is finding resources located relative to an executable.</source>
          <target state="translated">主な使用例は、実行ファイルから相対的に配置されたリソースを見つけることです。</target>
        </trans-unit>
        <trans-unit id="ae651dd57d8aac89d2244b121832135b42a78e22" translate="yes" xml:space="preserve">
          <source>The make built-in function allocates and initializes an object of type slice, map, or chan (only). Like new, the first argument is a type, not a value. Unlike new, make's return type is the same as the type of its argument, not a pointer to it. The specification of the result depends on the type:</source>
          <target state="translated">make組み込み関数は、slice,map,chan(のみ)型のオブジェクトを割り当てて初期化します。newと同様に、最初の引数は値ではなく型です。newとは異なり、makeの戻り値の型は引数の型と同じであり、ポインタではありません。結果の指定は型に依存します。</target>
        </trans-unit>
        <trans-unit id="ad15554627caa64494fe09878e570067f5641170" translate="yes" xml:space="preserve">
          <source>The meaning of the parameters fset, pkg, and pos is the same as in CheckExpr. An error is returned if expr cannot be parsed successfully, or the resulting expr AST cannot be type-checked.</source>
          <target state="translated">パラメータfset,pkg,posの意味はCheckExprと同じです。exprが正常に解析できなかった場合や,結果として得られたexpr ASTが型チェックできなかった場合はエラーが返されます.</target>
        </trans-unit>
        <trans-unit id="76f7a0e267f75e03932754601186fb88901bc244" translate="yes" xml:space="preserve">
          <source>The message must be no longer than the length of the public modulus minus twice the hash length, minus a further 2.</source>
          <target state="translated">メッセージはパブリックモジュラスの長さからハッシュの長さの2倍を引いた長さからさらに2を引いた長さを超えてはなりません。</target>
        </trans-unit>
        <trans-unit id="f50438ca0e284cc49442d4b96ed8422098542b37" translate="yes" xml:space="preserve">
          <source>The method for resolving domain names, whether indirectly with functions like Dial or directly with functions like LookupHost and LookupAddr, varies by operating system.</source>
          <target state="translated">ドメイン名を解決する方法は、Dialのような機能を使って間接的に行う場合と、LookupHostやLookupAddrのような機能を使って直接行う場合と、OSによって異なります。</target>
        </trans-unit>
        <trans-unit id="fd8e3459dc1d93b8b2959d9f7ce9e888fe72a14d" translate="yes" xml:space="preserve">
          <source>The method's first argument represents the arguments provided by the caller; the second argument represents the result parameters to be returned to the caller. The method's return value, if non-nil, is passed back as a string that the client sees as if created by errors.New. If an error is returned, the reply parameter will not be sent back to the client.</source>
          <target state="translated">メソッドの第 1 引数は呼び出し元によって提供される引数を表し、第 2 引数は呼び出し元に返される結果パラメータを表します。メソッドの戻り値は、nilでない場合、クライアントが見る文字列として渡されます。エラーが返された場合、応答パラメータはクライアントには返されません。</target>
        </trans-unit>
        <trans-unit id="eebd4cc8d1b396bccc721d19c4bd56800d60e192" translate="yes" xml:space="preserve">
          <source>The methods should behave the same as those on an *os.File.</source>
          <target state="translated">メソッドは、*os.File.File.Fileと同じように動作しなければなりません。</target>
        </trans-unit>
        <trans-unit id="3351c33da5b9bc73dd81d983421271485dd91e09" translate="yes" xml:space="preserve">
          <source>The minimal source code for a binary-only package was therefore:</source>
          <target state="translated">そのため、バイナリのみのパッケージのソースコードは最小限に抑えられていました。</target>
        </trans-unit>
        <trans-unit id="ba0d7c85cb07c29f22bceee0e488a79cf0a2c300" translate="yes" xml:space="preserve">
          <source>The minimum element in the tree is the root, at index 0.</source>
          <target state="translated">ツリーの最小要素は、インデックス0のルートです。</target>
        </trans-unit>
        <trans-unit id="6cf2c8c68bd743b1d5a4e29ae7301dad5d49bcb2" translate="yes" xml:space="preserve">
          <source>The mode parameter controls the amount of source text parsed and other optional parser functionality. Position information is recorded in the file set fset, which must not be nil.</source>
          <target state="translated">モードパラメータは、解析されるソーステキストの量やその他のオプションのパーサ機能を制御します。位置情報はファイルセット fset に記録されますが、これは nil であってはなりません。</target>
        </trans-unit>
        <trans-unit id="7d1773f39818c5825c59e48b1236b92119b0b32e" translate="yes" xml:space="preserve">
          <source>The month, day, hour, min, sec, and nsec values may be outside their usual ranges and will be normalized during the conversion. For example, October 32 converts to November 1.</source>
          <target state="translated">月、日、時、分、秒、および nsec の値は通常の範囲外の場合があり、変換中に正規化されます。例えば、10月32日は11月1日に変換されます。</target>
        </trans-unit>
        <trans-unit id="a5541e290e27715c3d35b2115cad871f3ab99ccb" translate="yes" xml:space="preserve">
          <source>The most common numeric conversions are Atoi (string to int) and Itoa (int to string).</source>
          <target state="translated">最も一般的な数値変換は、Atoi(文字列→int)とItoa(int→文字列)です。</target>
        </trans-unit>
        <trans-unit id="4bbbacdbad6d2c99ac68260aad07ecb869838903" translate="yes" xml:space="preserve">
          <source>The most common use of this pattern is to access fields in a struct or elements of an array:</source>
          <target state="translated">このパターンの最も一般的な使用法は、構造体のフィールドや配列の要素にアクセスすることです。</target>
        </trans-unit>
        <trans-unit id="ac8cc81db3fc49af2479176c9231b929d55cdbd8" translate="yes" xml:space="preserve">
          <source>The msg parameter should be an RFC 822-style email with headers first, a blank line, and then the message body. The lines of msg should be CRLF terminated. The msg headers should usually include fields such as &quot;From&quot;, &quot;To&quot;, &quot;Subject&quot;, and &quot;Cc&quot;. Sending &quot;Bcc&quot; messages is accomplished by including an email address in the to parameter but not including it in the msg headers.</source>
          <target state="translated">msg パラメータは RFC 822 形式の電子メールで、ヘッダを先頭にして空行を入れ、その後にメッ セージ本文を指定します。msg の行は CRLF で終端してください。通常、msg ヘッダーには「From」、「To」、「Subject」、「Cc」などのフィールドを含める必要があります。Bcc」メッセージを送信するには、to パラメータに電子メール・アドレスを含めますが、それを msg ヘッダーには含めません。</target>
        </trans-unit>
        <trans-unit id="410aa7b0a0304575a8915750342dc577b832f74c" translate="yes" xml:space="preserve">
          <source>The name for the XML elements is taken from, in order of preference:</source>
          <target state="translated">XML要素の名前は、優先順位の高い順に取得されます。</target>
        </trans-unit>
        <trans-unit id="57b088fc8d39478c2345773281e5eb271805f7ea" translate="yes" xml:space="preserve">
          <source>The naming convention to declare examples for the package, a function F, a type T and method M on type T are:</source>
          <target state="translated">パッケージ、関数F、型T、型T、型T上のメソッドMの例を宣言するための命名規則は以下の通りです。</target>
        </trans-unit>
        <trans-unit id="7b9b492a2e0fbf406f8b8d17e034f78a30b6eb8c" translate="yes" xml:space="preserve">
          <source>The net, net/http, and crypto/tls packages also refer to debugging variables in GODEBUG. See the documentation for those packages for details.</source>
          <target state="translated">net、net/http、および crypto/tls パッケージは、GODEBUG のデバッグ変数も参照しています。詳細はそれらのパッケージのドキュメントを参照してください。</target>
        </trans-unit>
        <trans-unit id="69954652d3ee14598bd31e60017ff5be6ec75582" translate="yes" xml:space="preserve">
          <source>The net/http/cookiejar package provides a CookieJar implementation.</source>
          <target state="translated">net/http/cookiejar パッケージは CookieJar の実装を提供します。</target>
        </trans-unit>
        <trans-unit id="7815d9693c2e8fba3de7740f99dda917ebde80d7" translate="yes" xml:space="preserve">
          <source>The net/rpc package is frozen and is not accepting new features.</source>
          <target state="translated">net/rpcパッケージがフリーズしており、新機能を受け付けていません。</target>
        </trans-unit>
        <trans-unit id="b67ec9dd23234843cefc446704be9276e0333344" translate="yes" xml:space="preserve">
          <source>The network must be &quot;tcp&quot;, &quot;tcp4&quot;, &quot;tcp6&quot;, &quot;unix&quot; or &quot;unixpacket&quot;.</source>
          <target state="translated">ネットワークは &quot;tcp&quot;、&quot;tcp4&quot;、&quot;tcp6&quot;、&quot;unix &quot;または &quot;unixpacket &quot;でなければなりません。</target>
        </trans-unit>
        <trans-unit id="f78c2675c0a1b78facf549c913ce29c8786aed4f" translate="yes" xml:space="preserve">
          <source>The network must be &quot;udp&quot;, &quot;udp4&quot;, &quot;udp6&quot;, &quot;unixgram&quot;, or an IP transport. The IP transports are &quot;ip&quot;, &quot;ip4&quot;, or &quot;ip6&quot; followed by a colon and a literal protocol number or a protocol name, as in &quot;ip:1&quot; or &quot;ip:icmp&quot;.</source>
          <target state="translated">ネットワークは、&quot;udp&quot;、&quot;udp4&quot;、&quot;udp6&quot;、&quot;unixgram&quot;、またはIPトランスポートでなければならない。IPトランスポートは、「ip」、「ip4」、または「ip6」の後にコロンとリテラルプロトコル番号またはプロトコル名(「ip:1」または「ip:icmp」のように)が続く。</target>
        </trans-unit>
        <trans-unit id="f62f0c6bf3637b6bd91fbed73590e0c5ec059d67" translate="yes" xml:space="preserve">
          <source>The network must be &quot;unix&quot; or &quot;unixpacket&quot;.</source>
          <target state="translated">ネットワークは &quot;unix &quot;または &quot;unixpacket &quot;である必要があります。</target>
        </trans-unit>
        <trans-unit id="961ea2a9664370be05fda243ace29bf62f0b8b14" translate="yes" xml:space="preserve">
          <source>The network must be &quot;unixgram&quot;.</source>
          <target state="translated">ネットワークは「unixgram」である必要があります。</target>
        </trans-unit>
        <trans-unit id="143c1ec61594ea23a84fdfc668726a693ff1d059" translate="yes" xml:space="preserve">
          <source>The network must be a TCP network name.</source>
          <target state="translated">ネットワークはTCPネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="54bb9136f9b37f7468411dbae5b647c63059a3a1" translate="yes" xml:space="preserve">
          <source>The network must be a TCP network name; see func Dial for details.</source>
          <target state="translated">ネットワークは TCP ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="a35132d711d8945bdb8b272ee67848e4c94a5a16" translate="yes" xml:space="preserve">
          <source>The network must be a UDP network name.</source>
          <target state="translated">ネットワークはUDPネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="89ed96066a0fbc9b6b82696daa8ba7effb94e0a8" translate="yes" xml:space="preserve">
          <source>The network must be a UDP network name; see func Dial for details.</source>
          <target state="translated">ネットワークは UDP ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="199d17e2fe63f354db9a6b916c396629d6b88dda" translate="yes" xml:space="preserve">
          <source>The network must be a Unix network name.</source>
          <target state="translated">ネットワークはUnixネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="b6cf9d29e750ed948316e5ba40edb44e452845b1" translate="yes" xml:space="preserve">
          <source>The network must be a Unix network name; see func Dial for details.</source>
          <target state="translated">ネットワークは Unix ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="61f5a2270318ecc8414142178aaa1a53165f97e7" translate="yes" xml:space="preserve">
          <source>The network must be an IP network name.</source>
          <target state="translated">ネットワークはIPネットワーク名である必要があります。</target>
        </trans-unit>
        <trans-unit id="b881d6aafa14d5f635aad510160f9473031ecf6f" translate="yes" xml:space="preserve">
          <source>The network must be an IP network name; see func Dial for details.</source>
          <target state="translated">ネットワークは IP ネットワーク名でなければなりません。</target>
        </trans-unit>
        <trans-unit id="882441c96cbf8f9716ac8a79d3a5eb4e3af0bcfd" translate="yes" xml:space="preserve">
          <source>The new Handler calls h.ServeHTTP to handle each request, but if a call runs for longer than its time limit, the handler responds with a 503 Service Unavailable error and the given message in its body. (If msg is empty, a suitable default message will be sent.) After such a timeout, writes by h to its ResponseWriter will return ErrHandlerTimeout.</source>
          <target state="translated">新しいHandlerは各リクエストを処理するためにh.ServeHTTPを呼び出しますが、もし呼び出しが制限時間を超えて実行された場合、ハンドラは503 Service Unavailableエラーとそのボディに与えられたメッセージで応答します(msgが空の場合、適切なデフォルトのメッセージが送信されます)。(msg が空の場合は、適切なデフォルトのメッセージが送信されます。)このようなタイムアウトの後、h による ResponseWriter への書き込みは ErrHandlerTimeout を返します。</target>
        </trans-unit>
        <trans-unit id="3cf0c81686ac1acb508bf9e67780a55cee7159d9" translate="yes" xml:space="preserve">
          <source>The new built-in function allocates memory. The first argument is a type, not a value, and the value returned is a pointer to a newly allocated zero value of that type.</source>
          <target state="translated">新しい組み込み関数はメモリを割り当てます。第一引数は値ではなく型であり、返される値はその型の新たに割り当てられたゼロ値へのポインタです。</target>
        </trans-unit>
        <trans-unit id="902360dabebdea5b3a521c7b72fed85e30d4437d" translate="yes" xml:space="preserve">
          <source>The node type must be *ast.File, *printer.CommentedNode, []ast.Decl, []ast.Stmt, or assignment-compatible to ast.Expr, ast.Decl, ast.Spec, or ast.Stmt. Node does not modify node. Imports are not sorted for nodes representing partial source files (for instance, if the node is not an *ast.File or a *printer.CommentedNode not wrapping an *ast.File).</source>
          <target state="translated">ノードのタイプは、*ast.File、*printer.CommentedNode、[]ast.Decl、[]ast.Stmt、または ast.Expr、ast.Decl、ast.Spec、または ast.Stmt と代入互換性のあるものでなければなりません。ノードはノードを変更しません。部分的なソースファイルを表すノードのインポートはソートされません(例えば、ノードが*ast.Fileでない場合や*printer.CommentedNodeが*ast.Fileをラッピングしていない場合など)。</target>
        </trans-unit>
        <trans-unit id="56cff2c7a026fcff6621abd1c298d8e39f80b3ef" translate="yes" xml:space="preserve">
          <source>The non-Go code should not change the signal mask on any threads created by the Go runtime. If the non-Go code starts new threads of its own, it may set the signal mask as it pleases.</source>
          <target state="translated">非Goコードは、Goランタイムによって作成されたスレッドのシグナルマスクを変更してはなりません。非Goコードが自分自身で新しいスレッドを開始する場合、シグナルマスクを好きなように設定することができます。</target>
        </trans-unit>
        <trans-unit id="67289d2a1e8eb416b3a82eb9f3e75a285c0158f6" translate="yes" xml:space="preserve">
          <source>The number represented by s must be of the form N, Ni, or N&amp;plusmn;Ni, where N stands for a floating-point number as recognized by ParseFloat, and i is the imaginary component. If the second N is unsigned, a + sign is required between the two components as indicated by the &amp;plusmn;. If the second N is NaN, only a + sign is accepted. The form may be parenthesized and cannot contain any spaces. The resulting complex number consists of the two components converted by ParseFloat.</source>
          <target state="translated">sで表される数は、N、Ni、またはN&amp;plusmn;Niの形式である必要があります。ここで、Nは、ParseFloatによって認識される浮動小数点数を表し、iは虚数成分です。2番目のNが符号なしの場合、&amp;plusmn;で示されるように2つのコンポーネント間に+符号が必要です。2番目のNがNaNの場合、+記号のみが受け入れられます。フォームは括弧で囲むことができ、スペースを含めることはできません。結果の複素数は、ParseFloatによって変換された2つのコンポーネントで構成されます。</target>
        </trans-unit>
        <trans-unit id="8ca31cdbe931eb86d33c507cac75f440d062f995" translate="yes" xml:space="preserve">
          <source>The ok result is false if the -timeout flag indicates &amp;ldquo;no timeout&amp;rdquo; (0).</source>
          <target state="translated">-timeoutフラグが「タイムアウトなし」（0）を示している場合、okの結果はfalseです。</target>
        </trans-unit>
        <trans-unit id="b32a27700c08984e10653750973205a0166116d3" translate="yes" xml:space="preserve">
          <source>The only signal values guaranteed to be present in the os package on all systems are os.Interrupt (send the process an interrupt) and os.Kill (force the process to exit). On Windows, sending os.Interrupt to a process with os.Process.Signal is not implemented; it will return an error instead of sending a signal.</source>
          <target state="translated">すべてのシステムで os パッケージに存在することが保証されているシグナル値は os.Interrupt (プロセスに割り込みを送る)と os.Kill (プロセスを強制的に終了させる)だけです。Windows では、os.Process.Signal を持つプロセスに os.Interrupt を送ることは実装されていません。</target>
        </trans-unit>
        <trans-unit id="ff422009eedfd53fa7602cbdd94de8292f5f25ce" translate="yes" xml:space="preserve">
          <source>The original specification for encryption and signatures with RSA is PKCS #1 and the terms &quot;RSA encryption&quot; and &quot;RSA signatures&quot; by default refer to PKCS #1 version 1.5. However, that specification has flaws and new designs should use version 2, usually called by just OAEP and PSS, where possible.</source>
          <target state="translated">RSAによる暗号化と署名のオリジナル仕様はPKCS #1であり、「RSA暗号化」と「RSA署名」という用語はデフォルトではPKCS #1のバージョン1.5を参照しています。しかし、この仕様には欠陥があり、新しい設計では可能な限り、通常はOAEPとPSSだけで呼ばれるバージョン2を使用すべきです。</target>
        </trans-unit>
        <trans-unit id="8c37b0a4e6fab650a215cbd5edb17eee82ff53db" translate="yes" xml:space="preserve">
          <source>The original specification for encryption and signatures with RSA is PKCS#1 and the terms &quot;RSA encryption&quot; and &quot;RSA signatures&quot; by default refer to PKCS#1 version 1.5. However, that specification has flaws and new designs should use version two, usually called by just OAEP and PSS, where possible.</source>
          <target state="translated">RSAによる暗号化と署名のオリジナル仕様はPKCS#1であり、「RSA暗号化」と「RSA署名」という用語はデフォルトではPKCS#1のバージョン1.5を参照しています。しかし、この仕様には欠陥があり、新しい設計では可能な限り、通常は OAEP と PSS だけで呼ばれるバージョン 2 を使用すべきです。</target>
        </trans-unit>
        <trans-unit id="540d9d25cf4179e22c8285de7096ab16e1c12b86" translate="yes" xml:space="preserve">
          <source>The original tar format was introduced in Unix V7. Since then, there have been multiple competing formats attempting to standardize or extend the V7 format to overcome its limitations. The most common formats are the USTAR, PAX, and GNU formats, each with their own advantages and limitations.</source>
          <target state="translated">オリジナルの tar フォーマットは Unix V7 で導入されました。それ以来、V7 フォーマットの限界を克服するために V7 フォーマットを標準化したり拡張したりしようとする複数の競合フォーマットが存在しています。最も一般的なフォーマットは USTAR,PAX,GNU フォーマットで、それぞれに利点と限界があります。</target>
        </trans-unit>
        <trans-unit id="447ae61382377495d9bb3dcbc7167cc095d3d833" translate="yes" xml:space="preserve">
          <source>The os interface is intended to be uniform across all operating systems. Features not generally available appear in the system-specific package syscall.</source>
          <target state="translated">OS インタフェースは、すべてのオペレーティングシステムで統一されていることを意図しています。一般的に利用できない機能は、システム固有のパッケージsyscallに記載されています。</target>
        </trans-unit>
        <trans-unit id="826c8f633f039e53ad0aac6dce5e00961c47baef" translate="yes" xml:space="preserve">
          <source>The other reporting methods, such as the variations of Log and Error, may be called simultaneously from multiple goroutines.</source>
          <target state="translated">他の報知手段、例えば、ログやエラーのバリエーションなどは、複数のゴロチンから一斉に呼び出されることがある。</target>
        </trans-unit>
        <trans-unit id="314818cec484a0a4f79c6a3bd12ea1e65d6a5497" translate="yes" xml:space="preserve">
          <source>The output of a command will be either one value or two values, the second of which has type error. If that second value is present and evaluates to non-nil, execution terminates and the error is returned to the caller of Execute.</source>
          <target state="translated">コマンドの出力は、1 つの値か 2 つの値のどちらかになり、2 番目の値はエラー型を持ちます。2 番目の値が存在し、non-nil と評価された場合、実行は終了し、エラーは Execute の呼び出し元に返されます。</target>
        </trans-unit>
        <trans-unit id="8552b51b4b43726af9d21d2953952aab9f9eccb4" translate="yes" xml:space="preserve">
          <source>The package also exports a handler that serves execution trace data for the &quot;go tool trace&quot; command. To collect a 5-second execution trace:</source>
          <target state="translated">このパッケージは、&quot;go tool trace&quot; コマンドの実行トレースデータを提供するハンドラもエクスポートします。5 秒間の実行トレースを収集するには</target>
        </trans-unit>
        <trans-unit id="01b79b49ed9f5aef9d64418cf5de61a045616033" translate="yes" xml:space="preserve">
          <source>The package also runs and verifies example code. Example functions may include a concluding line comment that begins with &quot;Output:&quot; and is compared with the standard output of the function when the tests are run. (The comparison ignores leading and trailing space.) These are examples of an example:</source>
          <target state="translated">このパッケージは、サンプルコードの実行と検証も行います。例の関数は、&quot;Output:&quot;で始まり、テスト実行時に関数の標準出力と比較される結論行コメントを含むことがあります。(この比較では、先頭と末尾のスペースは無視されます。)これらは例題の例です。</target>
        </trans-unit>
        <trans-unit id="a842fba56dd27e8e683543ed1da0bb8ec8237f57" translate="yes" xml:space="preserve">
          <source>The package is marked as complete if no errors occurred, otherwise it is incomplete. See Config.Error for controlling behavior in the presence of errors.</source>
          <target state="translated">エラーが発生していない場合、パッケージは完全であるとマークされ、そうでない場合は不完全です。エラーが発生した場合の動作の制御については Config.Error を参照してください。</target>
        </trans-unit>
        <trans-unit id="084533be70387d373858b81e63ee3fdbb938556c" translate="yes" xml:space="preserve">
          <source>The package is sometimes only imported for the side effect of registering its HTTP handler and the above variables. To use it this way, link this package into your program:</source>
          <target state="translated">このパッケージは、HTTP ハンドラと上記の変数を登録するという副作用のためだけにインポートされることがあります。この方法で使用するには、このパッケージをプログラムにリンクしてください。</target>
        </trans-unit>
        <trans-unit id="a76fef8dda549c1a3db0f0948e9255bd119d522e" translate="yes" xml:space="preserve">
          <source>The package is specified by a list of *ast.Files and corresponding file set, and the package path the package is identified with. The clean path must not be empty or dot (&quot;.&quot;).</source>
          <target state="translated">パッケージは、*ast.Filesと対応するファイルセットのリスト、およびパッケージが識別されるパッケージパスによって指定されます。クリーンパスは、空かドット(&quot;.&quot;)であってはなりません。</target>
        </trans-unit>
        <trans-unit id="385716c34a6382063c2f2e6bebfaff89eee0a50e" translate="yes" xml:space="preserve">
          <source>The package is specified by a list of *ast.Files and corresponding file set, which must not be nil. NewFromFiles uses all provided files when computing documentation, so it is the caller's responsibility to provide only the files that match the desired build context. &quot;go/build&quot;.Context.MatchFile can be used for determining whether a file matches a build context with the desired GOOS and GOARCH values, and other build constraints. The import path of the package is specified by importPath.</source>
          <target state="translated">パッケージは *ast.Files とそれに対応するファイルセットのリストで指定します。NewFromFiles は、ドキュメントを計算する際に提供されたすべてのファイルを使用するので、目的のビルドコンテキストにマッチするファイルのみを提供するのは呼び出し元の責任です。&quot;go/build&quot;.Context.MatchFileは、ファイルが所望のGOOS値やGOARCH値、その他のビルド制約を持つビルドコンテキストにマッチするかどうかを判断するために使用することができます。パッケージのインポートパスは importPath で指定します。</target>
        </trans-unit>
        <trans-unit id="399fd3ad30378409e2dc4bdf013d129681dab5d4" translate="yes" xml:space="preserve">
          <source>The package is typically only imported for the side effect of registering its HTTP handlers. The handled paths all begin with /debug/pprof/.</source>
          <target state="translated">このパッケージは通常、HTTP ハンドラを登録するという副作用のためにのみインポートされます。扱われるパスはすべて /debug/pprof/で始まります。</target>
        </trans-unit>
        <trans-unit id="1435a203fd8b96db3ad7b17b180e6f206d92f47b" translate="yes" xml:space="preserve">
          <source>The package is using the Elastic Tabstops algorithm described at &lt;a href=&quot;http://nickgravgaard.com/elastictabstops/index.html&quot;&gt;http://nickgravgaard.com/elastictabstops/index.html&lt;/a&gt;.</source>
          <target state="translated">パッケージは、&lt;a href=&quot;http://nickgravgaard.com/elastictabstops/index.html&quot;&gt;http:&lt;/a&gt; //nickgravgaard.com/elastictabstops/index.htmlで説明されているElastic Tabstopsアルゴリズムを使用しています。</target>
        </trans-unit>
        <trans-unit id="2d8c628767f33f2351dada491bfefd34f51b3140" translate="yes" xml:space="preserve">
          <source>The package provides:</source>
          <target state="translated">パッケージが提供します。</target>
        </trans-unit>
        <trans-unit id="fdd304cc0ffa560e98ef7d6ccf98bb51070237a4" translate="yes" xml:space="preserve">
          <source>The packages golang.org/x/net/ipv4 and golang.org/x/net/ipv6 can be used to manipulate IP-level socket options in oob.</source>
          <target state="translated">golang.org/x/net/ipv4 と golang.org/x/net/ipv6 パッケージは、 oob で IP レベルのソケットオプションを操作するために使用できます。</target>
        </trans-unit>
        <trans-unit id="e31e979e3edc39254b9a5c52d82e5a30deadc675" translate="yes" xml:space="preserve">
          <source>The panic built-in function stops normal execution of the current goroutine. When a function F calls panic, normal execution of F stops immediately. Any functions whose execution was deferred by F are run in the usual way, and then F returns to its caller. To the caller G, the invocation of F then behaves like a call to panic, terminating G's execution and running any deferred functions. This continues until all functions in the executing goroutine have stopped, in reverse order. At that point, the program is terminated with a non-zero exit code. This termination sequence is called panicking and can be controlled by the built-in function recover.</source>
          <target state="translated">panic組み込み関数は、現在のgoroutineの正常な実行を停止します。関数Fがパニックを呼び出すと、Fの通常の実行は直ちに停止します。Fによって実行が延期された関数は通常の方法で実行され、Fは呼び出し元に戻ります。呼び出し元のGにとっては、Fの呼び出しはパニックの呼び出しのように振る舞い、Gの実行を終了させ、延期された関数を実行します。これは、実行中の goroutine のすべての関数が逆順に停止するまで続きます。この時点で、プログラムはゼロではない終了コードで終了します。この終了シーケンスはパニックと呼ばれ、組み込み関数 recover によって制御することができます。</target>
        </trans-unit>
        <trans-unit id="af4f035528815b22e373ca233969d1eeb80da9ab" translate="yes" xml:space="preserve">
          <source>The parse functions return the widest type (float64, int64, and uint64), but if the size argument specifies a narrower width the result can be converted to that narrower type without data loss:</source>
          <target state="translated">パース関数は最も幅の広い型(float64、int64、および uint64)を返しますが、size 引数でより狭い幅を指定した場合、結果はデータを失うことなくその狭い型に変換されます。</target>
        </trans-unit>
        <trans-unit id="a18efb4bf749b7c5acc3a4bfaddc4a2e6898762f" translate="yes" xml:space="preserve">
          <source>The parser accepts a larger language than is syntactically permitted by the Go spec, for simplicity, and for improved robustness in the presence of syntax errors. For instance, in method declarations, the receiver is treated like an ordinary parameter list and thus may contain multiple entries where the spec permits exactly one. Consequently, the corresponding field in the AST (ast.FuncDecl.Recv) field is not restricted to one entry.</source>
          <target state="translated">パーサは、構文エラーが発生した場合のロバスト性を向上させるために、構文的にGo仕様で許可されている言語よりも大きな言語を受け入れます。例えば、メソッドの宣言では、レシーバは通常のパラメータリストのように扱われ、仕様では1つのエントリしか許可されていないのに複数のエントリを含むことがあります。その結果、AST (ast.FuncDecl.Recv)フィールドの対応するフィールドは1つのエントリに制限されません。</target>
        </trans-unit>
        <trans-unit id="f1b15ae7c535ec21c3b3214f780b2381f7617014" translate="yes" xml:space="preserve">
          <source>The path and host are used unchanged for CONNECT requests.</source>
          <target state="translated">パスとホストはCONNECTリクエストでは変更されずに使用されます。</target>
        </trans-unit>
        <trans-unit id="185477acd3fd456d75fb7c4fc53e2fc58b8c4aaf" translate="yes" xml:space="preserve">
          <source>The path package should only be used for paths separated by forward slashes, such as the paths in URLs. This package does not deal with Windows paths with drive letters or backslashes; to manipulate operating system paths, use the path/filepath package.</source>
          <target state="translated">path パッケージは、URL 内のパスのようにスラッシュで区切られたパスにのみ使用すべきです。このパッケージは、ドライブレターやバックスラッシュのある Windows のパスを扱いません。</target>
        </trans-unit>
        <trans-unit id="26954c9ca56cc48a56a0453ce2488e2f260ed60b" translate="yes" xml:space="preserve">
          <source>The pkg/ directory holds installed package objects. As in the Go tree, each target operating system and architecture pair has its own subdirectory of pkg (pkg/GOOS_GOARCH).</source>
          <target state="translated">pkg/ディレクトリには、インストールされたパッケージオブジェクトが格納されます。Go ツリーと同様に、ターゲットとなるオペレーティングシステムとアーキテクチャのペアはそれぞれ pkg のサブディレクトリ (pkg/GOOS_GOARCH)を持っています。</target>
        </trans-unit>
        <trans-unit id="5a87eb4ca6fbc546df6339993053151079409112" translate="yes" xml:space="preserve">
          <source>The precision prec controls the number of digits (excluding the exponent) printed by the 'e', 'E', 'f', 'g', 'G', 'x', and 'X' formats. For 'e', 'E', 'f', 'x', and 'X', it is the number of digits after the decimal point. For 'g' and 'G' it is the maximum number of significant digits (trailing zeros are removed). The special precision -1 uses the smallest number of digits necessary such that ParseFloat will return f exactly.</source>
          <target state="translated">精度プリックは、'e','E','f','g','G','x',および 'X' フォーマットで出力される桁数(指数を除く)を制御します。e','E','f','x',および 'X' の場合は、小数点以下の桁数です。g' および 'G' の場合は、有効数字の最大桁数です (末尾のゼロは削除されます)。特別な精度-1は、ParseFloatがfを正確に返すために必要な最小の桁数を使用します。</target>
        </trans-unit>
        <trans-unit id="69078c80b7be9ecb1f89b1ab519c7b7264b1d687" translate="yes" xml:space="preserve">
          <source>The precision prec controls the number of digits (excluding the exponent) printed by the 'e', 'E', 'f', 'g', 'G', and 'x' formats. For 'e', 'E', 'f', and 'x', it is the number of digits after the decimal point. For 'g' and 'G' it is the total number of digits. A negative precision selects the smallest number of decimal digits necessary to identify the value x uniquely using x.Prec() mantissa bits. The prec value is ignored for the 'b' and 'p' formats.</source>
          <target state="translated">精度 prec は、'e','E','f','g','G',および 'x' フォーマットで出力される桁数 (指数を除く)を制御します。e'、'E'、'f'、'x' の場合、小数点以下の桁数を指定します。g' および 'G' の場合は、総桁数です。負の精度は、x.Prec()の仮数ビットを使用して値 x を一意に識別するのに必要な最小の小数点以下の桁数を選択します。prec 値は、'b' および 'p' フォーマットでは無視されます。</target>
        </trans-unit>
        <trans-unit id="456c4a02a800a4453e3d726e233dc51ff74f0fc9" translate="yes" xml:space="preserve">
          <source>The predefined profiles may assign meaning to other debug values; for example, when printing the &quot;goroutine&quot; profile, debug=2 means to print the goroutine stacks in the same form that a Go program uses when dying due to an unrecovered panic.</source>
          <target state="translated">定義済みのプロファイルは、他のデバッグ値に意味を割り当てることができます。例えば、「goroutine」プロファイルを印刷する場合、debug=2 は、回復しないパニックで死亡したときに Go プログラムが使用するのと同じ形式で goroutine スタックを印刷することを意味します。</target>
        </trans-unit>
        <trans-unit id="58481973143a6de618e8538c648e764b31b42f2b" translate="yes" xml:space="preserve">
          <source>The print built-in function formats its arguments in an implementation-specific way and writes the result to standard error. Print is useful for bootstrapping and debugging; it is not guaranteed to stay in the language.</source>
          <target state="translated">組み込みの関数printは、実装固有の方法で引数をフォーマットし、その結果を標準エラーに書き込みます。printはブートストラップやデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="91f04de49b9af203098665c6f8b752b5392b78a0" translate="yes" xml:space="preserve">
          <source>The println built-in function formats its arguments in an implementation-specific way and writes the result to standard error. Spaces are always added between arguments and a newline is appended. Println is useful for bootstrapping and debugging; it is not guaranteed to stay in the language.</source>
          <target state="translated">組み込みのprintln関数は、実装固有の方法で引数をフォーマットし、その結果を標準エラーに書き込みます。引数の間には常にスペースが追加され、改行が追加されます。Printlnはブートストラップやデバッグに便利です。</target>
        </trans-unit>
        <trans-unit id="151eef92ef01a650c4a9036a013718d694ffc693" translate="yes" xml:space="preserve">
          <source>The provided Context must be non-nil. If the context expires before the connection is complete, an error is returned. Once successfully connected, any expiration of the context will not affect the connection.</source>
          <target state="translated">指定したコンテキストは、非 null でなければなりません。接続が完了する前にコンテキストの有効期限が切れた場合は、エラーが返されます。一旦接続に成功しても、コンテキストの有効期限が切れても接続には影響しません。</target>
        </trans-unit>
        <trans-unit id="0e411a42789a39be423654b810b14a1d819d3f7a" translate="yes" xml:space="preserve">
          <source>The provided TxOptions is optional and may be nil if defaults should be used. If a non-default isolation level is used that the driver doesn't support, an error will be returned.</source>
          <target state="translated">提供される TxOptions はオプションであり、デフォルトを使用する場合は nil にすることができます。ドライバがサポートしていないデフォルト以外のアイソレーションレベルが使用された場合、エラーが返されます。</target>
        </trans-unit>
        <trans-unit id="decd2b405e8241c6f8e12f33bd5a3bb2cc5dc04e" translate="yes" xml:space="preserve">
          <source>The provided body may be nil. If the body is of type *bytes.Reader, *strings.Reader, or *bytes.Buffer, the Request.ContentLength is set.</source>
          <target state="translated">提供されるボディは、nilであってもよい。ボディの型が*bytes.Reader、*strings.Reader、または*bytes.Bufferの場合、Request.ContentLengthが設定されます。</target>
        </trans-unit>
        <trans-unit id="58ddb87ccdb3a3bbf17dded9af2e6f690f9fa593" translate="yes" xml:space="preserve">
          <source>The provided code should be in the 3xx range and is usually StatusMovedPermanently, StatusFound or StatusSeeOther.</source>
          <target state="translated">提供されるコードは 3xx の範囲内である必要があり、通常は StatusMovedPermanently、StatusFound、または StatusSeeOther です。</target>
        </trans-unit>
        <trans-unit id="86be20106cb95d195cb582ade394435819f24514" translate="yes" xml:space="preserve">
          <source>The provided context is used for the preparation of the statement, not for the execution of the statement.</source>
          <target state="translated">提供されたコンテキストはステートメントの準備に使用され、ステートメントの実行には使用されません。</target>
        </trans-unit>
        <trans-unit id="dd14eed153c5e1b07e7490871396f032fee4f925" translate="yes" xml:space="preserve">
          <source>The provided context is used to kill the process (by calling os.Process.Kill) if the context becomes done before the command completes on its own.</source>
          <target state="translated">与えられたコンテキストは、コマンドがそれ自身で完了する前にコンテキストが完了した場合、プロセスを kill するために使用されます (os.Process.Kill を呼び出すことで)。</target>
        </trans-unit>
        <trans-unit id="a4964ee167f777b88ff9017caa2a6e7f575494e2" translate="yes" xml:space="preserve">
          <source>The provided context is used until the transaction is committed or rolled back. If the context is canceled, the sql package will roll back the transaction. Tx.Commit will return an error if the context provided to BeginTx is canceled.</source>
          <target state="translated">提供されたコンテキストは、トランザクションがコミットされるかロールバックされるまで使用されます。コンテキストがキャンセルされた場合、sqlパッケージはトランザクションをロールバックします。BeginTxに提供されたコンテキストがキャンセルされた場合、Tx.Commitはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="08a11fcf0761deb535b1afddd2450e0cb1b073dd" translate="yes" xml:space="preserve">
          <source>The provided context will be used for the preparation of the context, not for the execution of the returned statement. The returned statement will run in the transaction context.</source>
          <target state="translated">提供されたコンテキストはコンテキストの準備に使用され、返されたステートメントの実行には使用されません。返されたステートメントは、トランザクションコンテキストで実行されます。</target>
        </trans-unit>
        <trans-unit id="36087efe71a5f2727d53bfdfa94ece516eb41424" translate="yes" xml:space="preserve">
          <source>The provided key must be comparable and should not be of type string or any other built-in type to avoid collisions between packages using context. Users of WithValue should define their own types for keys. To avoid allocating when assigning to an interface{}, context keys often have concrete type struct{}. Alternatively, exported context key variables' static type should be a pointer or interface.</source>
          <target state="translated">提供されるキーは同等のものでなければならず、 コンテキストを使用しているパッケージ間の衝突を避けるために、 文字列型やその他の組み込み型であってはなりません。WithValue のユーザは、キーの型を独自に定義しなければなりません。インターフェイス{}に代入する際の割り当てを避けるために、コンテキストキーはしばしば具象型の struct{}を持つことがあります。あるいは、エクスポートされたコンテキストキー変数の静的型はポインタかインターフェースでなければなりません。</target>
        </trans-unit>
        <trans-unit id="85ad36caa7041b29ad99437d10d43da203313ed0" translate="yes" xml:space="preserve">
          <source>The race detector kills the program if it exceeds 8192 concurrent goroutines, so use care when running parallel tests with the -race flag set.</source>
          <target state="translated">競合検出器は、8192個の同時実行ゴロチンを超えるとプログラムを終了させるので、-raceフラグを設定して並列テストを実行する際には注意してください。</target>
        </trans-unit>
        <trans-unit id="8b5744dbc3f5965d88d3d9f6581899823cd536e1" translate="yes" xml:space="preserve">
          <source>The rand parameter is used as a source of entropy to ensure that encrypting the same message twice doesn't result in the same ciphertext.</source>
          <target state="translated">rand パラメータは、同じメッセージを 2 回暗号化しても同じ暗号文にならないようにするためのエントロピー源として使用されます。</target>
        </trans-unit>
        <trans-unit id="9b3902f0d9da9da0e87784ba5652f4c8601d4919" translate="yes" xml:space="preserve">
          <source>The random parameter is used as a source of entropy to ensure that encrypting the same message twice doesn't result in the same ciphertext.</source>
          <target state="translated">ランダムパラメータは、同じメッセージを二度暗号化しても同じ暗号文にならないようにするためのエントロピー源として使用されます。</target>
        </trans-unit>
        <trans-unit id="cf169dddc14ea8341fcb30899e22a5fa61df4712" translate="yes" xml:space="preserve">
          <source>The random parameter, if not nil, is used to blind the private-key operation and avoid timing side-channel attacks. Blinding is purely internal to this function &amp;ndash; the random data need not match that used when encrypting.</source>
          <target state="translated">ランダムパラメータは、nilでない場合は、秘密鍵の操作をブラインドし、サイドチャネル攻撃のタイミングを回避するために使用されます。ブラインドはこの関数の内部でのみ行われます。ランダムデータは、暗号化時に使用されるデータと一致する必要はありません。</target>
        </trans-unit>
        <trans-unit id="2314ea9b04c810fb371325317bf102a02d2d59d0" translate="yes" xml:space="preserve">
          <source>The rawurl may be relative (a path, without a host) or absolute (starting with a scheme). Trying to parse a hostname and path without a scheme is invalid but may not necessarily return an error, due to parsing ambiguities.</source>
          <target state="translated">rawurl は相対パス (ホストなしのパス)または絶対パス (スキームで始まる)です。スキームなしでホスト名とパスを解析しようとすると無効ですが、解析の曖昧さのために必ずしもエラーを返すとは限りません。</target>
        </trans-unit>
        <trans-unit id="239176c955d354cb84e342df1da6a160a09d1822" translate="yes" xml:space="preserve">
          <source>The read and write halves of the connection are serialized independently, so no interlocking is required. However each half may be accessed concurrently so the implementation of conn should protect against concurrent reads or concurrent writes.</source>
          <target state="translated">接続の読み書きの半分は独立してシリアル化されているため、インターロックは必要ありません。しかし、それぞれの半分は同時にアクセスされる可能性があるので、conn の実装は同時読み取りまたは同時書き込みから保護する必要があります。</target>
        </trans-unit>
        <trans-unit id="b43ec28ed349612adbaa799bb6c92934c3b075dc" translate="yes" xml:space="preserve">
          <source>The real built-in function returns the real part of the complex number c. The return value will be floating point type corresponding to the type of c.</source>
          <target state="translated">実数組み込み関数は複素数cの実数部を返します。</target>
        </trans-unit>
        <trans-unit id="9bb09164885f351e6fb900da553f1e63b375bfa9" translate="yes" xml:space="preserve">
          <source>The recognized day of week formats are &quot;Mon&quot; and &quot;Monday&quot;. The recognized month formats are &quot;Jan&quot; and &quot;January&quot;.</source>
          <target state="translated">認識される曜日のフォーマットは「月」と「月」です。認識される月のフォーマットは、&quot;Jan &quot;と &quot;1月 &quot;です。</target>
        </trans-unit>
        <trans-unit id="2c571daa54e2fb7d0c128741daf715a11d1e44fe" translate="yes" xml:space="preserve">
          <source>The recover built-in function allows a program to manage behavior of a panicking goroutine. Executing a call to recover inside a deferred function (but not any function called by it) stops the panicking sequence by restoring normal execution and retrieves the error value passed to the call of panic. If recover is called outside the deferred function it will not stop a panicking sequence. In this case, or when the goroutine is not panicking, or if the argument supplied to panic was nil, recover returns nil. Thus the return value from recover reports whether the goroutine is panicking.</source>
          <target state="translated">recoverビルトイン関数を使用すると、プログラムはパニックを起こすゴローチンの動作を管理することができます。deferred関数の内部でrecoverの呼び出しを実行すると(それによって呼び出された関数ではなく)、通常の実行を回復してパニックシーケンスを停止し、panicの呼び出しに渡されたエラー値を取得します。recoverが繰延関数の外側で呼ばれた場合、パニックシーケンスは停止しません。この場合、あるいはゴローチンがパニックを起こしていない場合、あるいはパニックに与えられた引数がnilであった場合、recoverはnilを返します。したがって、recoverからの戻り値は、goroutineがパニックになっているかどうかを報告します。</target>
        </trans-unit>
        <trans-unit id="ff14ed6c9720c452a0294998e96d92039ec86474" translate="yes" xml:space="preserve">
          <source>The regexp implementation provided by this package is guaranteed to run in time linear in the size of the input. (This is a property not guaranteed by most open source implementations of regular expressions.) For more information about this property, see</source>
          <target state="translated">本パッケージが提供する正規表現の実装は、入力のサイズに比例した時間内に実行されることが保証されています(これはほとんどのオープンソースの正規表現実装では保証されていません)。(これは、ほとんどのオープンソースの正規表現実装では保証されていないプロパティです)。このプロパティの詳細については</target>
        </trans-unit>
        <trans-unit id="e4c94cab05a4e2263ef4f912bc17e254d9de85c1" translate="yes" xml:space="preserve">
          <source>The regionType is used to classify regions, so there should be only a handful of unique region types.</source>
          <target state="translated">regionTypeは地域を分類するために使用されるので、ユニークな地域タイプは一握りしかないはずです。</target>
        </trans-unit>
        <trans-unit id="613161bf225c19a5f2c8859dc32ad7cbf64fe341" translate="yes" xml:space="preserve">
          <source>The regular expression syntax understood by this package when parsing with the Perl flag is as follows. Parts of the syntax can be disabled by passing alternate flags to Parse.</source>
          <target state="translated">Perl フラグを使用して解析する際に、本パッケージが理解する正規表現構文は以下の通りです。構文の一部は、Parse に別のフラグを渡すことで無効にすることができます。</target>
        </trans-unit>
        <trans-unit id="414d3f9a62c65f403de754cbbecda8b294ef6a05" translate="yes" xml:space="preserve">
          <source>The remaining patterns enumerate the only valid conversions from uintptr to Pointer.</source>
          <target state="translated">残りのパターンは,uintptrからPointerへの唯一有効な変換を列挙しています.</target>
        </trans-unit>
        <trans-unit id="f01d454f6a8093b81d93ec48391c3d15861fea72" translate="yes" xml:space="preserve">
          <source>The remaining signals are asynchronous signals. They are not triggered by program errors, but are instead sent from the kernel or from some other program.</source>
          <target state="translated">残りの信号は非同期信号です。これらのシグナルはプログラムエラーによってトリガされるのではなく、カーネルや他のプログラムから送信されます。</target>
        </trans-unit>
        <trans-unit id="b6f243f72fd3fe537acd4a5fca41b95e81ce45b9" translate="yes" xml:space="preserve">
          <source>The representation of types is described below. When a type is defined on a given connection between an Encoder and Decoder, it is assigned a signed integer type id. When Encoder.Encode(v) is called, it makes sure there is an id assigned for the type of v and all its elements and then it sends the pair (typeid, encoded-v) where typeid is the type id of the encoded type of v and encoded-v is the gob encoding of the value v.</source>
          <target state="translated">型の表現については、以下で説明します。エンコーダとデコーダ間の接続で型が定義されると、符号付き整数型の id が割り当てられます。Encoder.Encode(v)が呼び出されると、v の型とそのすべての要素に id が割り当てられていることを確認してから、ペア (typeid,encoded-v)を送信します。</target>
        </trans-unit>
        <trans-unit id="cd667628565a5086d3e9895b56322424dc5621cd" translate="yes" xml:space="preserve">
          <source>The request Body, if non-nil, will be closed by the underlying Transport, even on errors.</source>
          <target state="translated">リクエストボディは、エラーが発生した場合であっても、リクエストボディが存在しない場合は、基礎となるトランスポートによってクローズされます。</target>
        </trans-unit>
        <trans-unit id="d4e026c3f59ca2f49146d499574e033e155a3b79" translate="yes" xml:space="preserve">
          <source>The resolver decision can be overridden by setting the netdns value of the GODEBUG environment variable (see package runtime) to go or cgo, as in:</source>
          <target state="translated">リゾルバの決定は、GODEBUG 環境変数 (パッケージのランタイムを参照)の netdns の値を go か cgo に設定することで上書きすることができます。</target>
        </trans-unit>
        <trans-unit id="85ba008f9a41b800d285074394b704f73cc09894" translate="yes" xml:space="preserve">
          <source>The rest of this package comment may be skipped on first reading; it includes details necessary to understand escaping contexts and error messages. Most users will not need to understand these details.</source>
          <target state="translated">このパッケージのコメントの残りの部分は、最初に読んだときには読み飛ばしてもかまいません。ほとんどのユーザはこれらの詳細を理解する必要はないでしょう。</target>
        </trans-unit>
        <trans-unit id="5f29380aa9a229b911cfb4cbcef02c25951562ac" translate="yes" xml:space="preserve">
          <source>The rest of this section gives the precise details of how operations use monotonic clocks, but understanding those details is not required to use this package.</source>
          <target state="translated">このセクションの残りの部分では、操作がどのように単調なクロックを使用するかについて正確な詳細を説明しますが、これらの詳細を理解していることは、本パッケージを使用するために必要ではありません。</target>
        </trans-unit>
        <trans-unit id="b7f11101676a7b7c4f383ade5d8d3f82131c1b53" translate="yes" xml:space="preserve">
          <source>The result of Scan is one of these tokens or a Unicode character.</source>
          <target state="translated">Scanの結果は、これらのトークンまたはUnicode文字のいずれかになります。</target>
        </trans-unit>
        <trans-unit id="4646462be207e1c8f655d521c7883b8db5be5339" translate="yes" xml:space="preserve">
          <source>The results of a benchmark run.</source>
          <target state="translated">ベンチマーク実行の結果です。</target>
        </trans-unit>
        <trans-unit id="6be7e87ff9924a05b7bc2a7006d807f1fab39e3d" translate="yes" xml:space="preserve">
          <source>The returned *Float f is nil and the value of z is valid but not defined if an error is reported.</source>
          <target state="translated">返された *Float f は nil であり、z の値は有効ですが、エラーが報告された場合は定義されていません。</target>
        </trans-unit>
        <trans-unit id="bac86830681be1d31b72f9f7791b1c44ac2452e7" translate="yes" xml:space="preserve">
          <source>The returned Cmd's Args field is constructed from the command name followed by the elements of arg, so arg should not include the command name itself. For example, Command(&quot;echo&quot;, &quot;hello&quot;). Args[0] is always name, not the possibly resolved Path.</source>
          <target state="translated">返されるCmdのArgsフィールドは、コマンド名の後にargの要素が続く形で構成されているので、argはコマンド名そのものを含んではいけません。例えば、Command(&quot;echo&quot;,&quot;hello&quot;)のようになります。Args[0]は常にnameであり、解決された可能性のあるPathではありません。</target>
        </trans-unit>
        <trans-unit id="fe921f2e96cf2be56c2bf49f4740170d8dd45071" translate="yes" xml:space="preserve">
          <source>The returned Conn, if any, will always be of type *Conn.</source>
          <target state="translated">返されるConnは、もしあれば常に*Conn型です。</target>
        </trans-unit>
        <trans-unit id="3bc6a14f8ce0d88107543f9f02901b96c67b460c" translate="yes" xml:space="preserve">
          <source>The returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. Thus, the Open function should be called just once. It is rarely necessary to close a DB.</source>
          <target state="translated">返されたDBは、複数のゴロチンによる同時使用のために安全であり、アイドル接続の独自のプールを維持しています。したがって、Open関数は一度だけ呼ばれるべきです。DBを閉じる必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="c94572c3b7d816968d78d57402944f7efb4246e7" translate="yes" xml:space="preserve">
          <source>The returned DB is safe for concurrent use by multiple goroutines and maintains its own pool of idle connections. Thus, the OpenDB function should be called just once. It is rarely necessary to close a DB.</source>
          <target state="translated">返されたDBは、複数のゴロチンによる同時使用でも安全であり、アイドル接続のプールを独自に維持しています。したがって、OpenDB 関数は一度だけ呼ばれるべきです。DBを閉じる必要はほとんどありません。</target>
        </trans-unit>
        <trans-unit id="33f1666e076b57e7a3379acacb81a7ec24e7d31d" translate="yes" xml:space="preserve">
          <source>The returned RawConn only supports calling Control. Read and Write return an error.</source>
          <target state="translated">返されたRawConnはControlの呼び出しのみをサポートしています。読み出しと書き込みはエラーを返します。</target>
        </trans-unit>
        <trans-unit id="00382818b7b561dcf8c2e41afc3acbf78809ee7a" translate="yes" xml:space="preserve">
          <source>The returned Response will have at least its StatusCode, Header, Body, and optionally Trailer populated. More fields may be populated in the future, so callers should not DeepEqual the result in tests.</source>
          <target state="translated">返されるレスポンスには、少なくとも StatusCode、Header、Body、およびオプションで Trailer が入力されています。将来的には、より多くのフィールドが実装される可能性があるので、呼び出し元はテストで結果を DeepEqual してはいけません。</target>
        </trans-unit>
        <trans-unit id="f4f37717fc57244b8b099472fa87f281f196d58d" translate="yes" xml:space="preserve">
          <source>The returned context is always non-nil; it defaults to the background context.</source>
          <target state="translated">返されるコンテキストは常に非 null であり、デフォルトはバックグラウンドコンテキストです。</target>
        </trans-unit>
        <trans-unit id="9cbe06fbabaade2695a345469e46bbf5011eaae5" translate="yes" xml:space="preserve">
          <source>The returned end function is used to mark the task's end. The trace tool measures task latency as the time between task creation and when the end function is called, and provides the latency distribution per task type. If the end function is called multiple times, only the first call is used in the latency measurement.</source>
          <target state="translated">返された end 関数は、タスクの終了をマークするために使用されます。トレースツールは、タスクが作成されてから終了関数が呼び出されるまでの時間としてタスクのレイテンシを測定し、タスクの種類ごとのレイテンシ分布を提供します。終了関数が複数回呼び出された場合は、最初の呼び出しのみがレイテンシ測定に使用されます。</target>
        </trans-unit>
        <trans-unit id="f0a8feeaa4dbaf36e773a52f49c0b0ac6bb7e74a" translate="yes" xml:space="preserve">
          <source>The returned error is nil if the command runs, has no problems copying stdin, stdout, and stderr, and exits with a zero exit status.</source>
          <target state="translated">コマンドが実行され、stdin、stdout、stderrのコピーに問題がなく、終了ステータスが0で終了した場合、返されるエラーはnilです。</target>
        </trans-unit>
        <trans-unit id="4d6b3f09dc97620be2a232fb3dc17468c15d1426" translate="yes" xml:space="preserve">
          <source>The returned list does not identify the associated interface; use Interfaces and Interface.Addrs for more detail.</source>
          <target state="translated">返されたリストは、関連するインタフェースを識別しません。詳細については、Interfaces と Interface.Addrs を使用してください。</target>
        </trans-unit>
        <trans-unit id="c6a6b1723d6bc4ac24e64af0ce75d94122db9245" translate="yes" xml:space="preserve">
          <source>The returned memory allocator statistics are up to date as of the call to ReadMemStats. This is in contrast with a heap profile, which is a snapshot as of the most recently completed garbage collection cycle.</source>
          <target state="translated">返されたメモリアロケータの統計情報は、ReadMemStatsを呼び出した時点で最新のものです。これはヒーププロファイルとは対照的で、直近に完了したガベージコレクションサイクルのスナップショットです。</target>
        </trans-unit>
        <trans-unit id="a6ee6f83dacc73003b6dade23a5eca55ab60b66f" translate="yes" xml:space="preserve">
          <source>The returned os.File's file descriptor is different from the connection's. Attempting to change properties of the original using this duplicate may or may not have the desired effect.</source>
          <target state="translated">返された os.File のファイルディスクリプタは接続のものとは異なります。この複製を使ってオリジナルのプロパティを変更しようとすると、期待した効果が得られないかもしれません。</target>
        </trans-unit>
        <trans-unit id="5927f2050b65cd29032e207117c8b2d6ca472e54" translate="yes" xml:space="preserve">
          <source>The returned path ends in a slash only if it is the root &quot;/&quot;.</source>
          <target state="translated">返されるパスの末尾がスラッシュで終わるのは、それがルート&quot;/&quot;の場合のみです。</target>
        </trans-unit>
        <trans-unit id="004ac519a1c16ea761d189382ea9cc0c1b68b7d1" translate="yes" xml:space="preserve">
          <source>The returned path ends in a slash only if it represents a root directory, such as &quot;/&quot; on Unix or `C:\` on Windows.</source>
          <target state="translated">返されるパスは、Unixの&quot;/&quot;やWindowsの`C:\`のようなルートディレクトリを表す場合にのみ、スラッシュで終わります。</target>
        </trans-unit>
        <trans-unit id="709611ccac6cb61ed7ee0c2fc8499ed7e268fed4" translate="yes" xml:space="preserve">
          <source>The returned profile may be up to two garbage collection cycles old. This is to avoid skewing the profile toward allocations; because allocations happen in real time but frees are delayed until the garbage collector performs sweeping, the profile only accounts for allocations that have had a chance to be freed by the garbage collector.</source>
          <target state="translated">返されるプロファイルは、ガベージコレクションサイクルが最大で 2 サイクル古い場合があります。これは、プロファイルがアロケートに偏ってしまうことを避けるためです。アロケートはリアルタイムで発生しますが、解放はガベージコレクタがスイープを実行するまで遅れるため、プロファイルはガベージコレクタによって解放される機会があったアロケートのみを考慮します。</target>
        </trans-unit>
        <trans-unit id="2fcbc7cecfbd88a968cff813905d726fdf40b131" translate="yes" xml:space="preserve">
          <source>The returned slice is the certificate in DER encoding.</source>
          <target state="translated">返されるスライスはDERエンコーディングの証明書です。</target>
        </trans-unit>
        <trans-unit id="01c758564c188da314abf0218bd7cfbe2c752f80" translate="yes" xml:space="preserve">
          <source>The returned slice is the certificate request in DER encoding.</source>
          <target state="translated">返されるスライスはDERエンコーディングの証明書要求です。</target>
        </trans-unit>
        <trans-unit id="56ef9da288a159e17f780d686422f0dfcfa221a7" translate="yes" xml:space="preserve">
          <source>The returned statement operates within the transaction and can no longer be used once the transaction has been committed or rolled back.</source>
          <target state="translated">返されたステートメントはトランザクション内で動作し、トランザクションがコミットされたりロールバックされたりすると使用できなくなります。</target>
        </trans-unit>
        <trans-unit id="eaef2ac25b5ec95632c077f9297b6bf55f5dd3f6" translate="yes" xml:space="preserve">
          <source>The returned statement operates within the transaction and will be closed when the transaction has been committed or rolled back.</source>
          <target state="translated">返されたステートメントはトランザクション内で動作し、トランザクションがコミットされたかロールバックされたときにクローズされます。</target>
        </trans-unit>
        <trans-unit id="10df7eea472cec1ead17a66cb1fdaefe2e6578cc" translate="yes" xml:space="preserve">
          <source>The returned string is meant for debugging; for a stable serialized representation, use t.MarshalText, t.MarshalBinary, or t.Format with an explicit format string.</source>
          <target state="translated">返される文字列はデバッグ用です。安定したシリアライズ表現を行うには、明示的なフォーマット文字列を持つ t.MarshalText,t.MarshalBinary,t.Format を使用してください。</target>
        </trans-unit>
        <trans-unit id="48866f9aa69c2bb04dcb85d20c5a3c1d2d405ca8" translate="yes" xml:space="preserve">
          <source>The rule Title uses for word boundaries does not handle Unicode punctuation properly.</source>
          <target state="translated">Titleが単語の境界に使うルールは、Unicodeの句読点を正しく扱っていません。</target>
        </trans-unit>
        <trans-unit id="f80f01b0edf7103d5ecb8ca06eb4e22919710f70" translate="yes" xml:space="preserve">
          <source>The same Context may be passed to functions running in different goroutines; Contexts are safe for simultaneous use by multiple goroutines.</source>
          <target state="translated">同じコンテキストは、異なるゴローチンで実行されている関数に渡すことができます。</target>
        </trans-unit>
        <trans-unit id="a401c4efb67cc0055f52caa84dcf2de0d8f63cd7" translate="yes" xml:space="preserve">
          <source>The second argument, quote, specifies the type of literal being parsed and therefore which escaped quote character is permitted. If set to a single quote, it permits the sequence \' and disallows unescaped '. If set to a double quote, it permits \&quot; and disallows unescaped &quot;. If set to zero, it does not permit either escape and allows both quote characters to appear unescaped.</source>
          <target state="translated">二番目の引数である quote は、解析されるリテラルのタイプを指定し、 どのエスケープされたクォート文字を許可するかを指定します。シングルクォートに設定されている場合、シーケンスの \' を許可し、エスケープされていない '.二重引用符にセットされている場合、それは &quot;\&quot; を許可し、エスケープされていない &quot;.ゼロに設定されている場合、どちらのエスケープも許可せず、 両方の引用符文字がエスケープされていない状態で表示されることを許可します。</target>
        </trans-unit>
        <trans-unit id="40a1d3ecbed0bf217ec97ece1c42e914315bd313" translate="yes" xml:space="preserve">
          <source>The security model used by this package assumes that template authors are trusted, while Execute's data parameter is not. More details are provided below.</source>
          <target state="translated">本パッケージで使用されるセキュリティモデルは、テンプレート作成者が信頼されていることを前提としていますが、Executeのデータパラメータは信頼されていません。詳細は以下に記載します。</target>
        </trans-unit>
        <trans-unit id="a70cb84ae80d93013971dc3c09e0dd11fbe3a660" translate="yes" xml:space="preserve">
          <source>The server calls (for HTTP service):</source>
          <target state="translated">サーバーは(HTTPサービスのための)呼び出しを行います。</target>
        </trans-unit>
        <trans-unit id="4694acea63f5ebf8b8be35e4e84982505cd7d21a" translate="yes" xml:space="preserve">
          <source>The server may handle requests on a single connection by calling ServeConn. More typically it will create a network listener and call Accept or, for an HTTP listener, HandleHTTP and http.Serve.</source>
          <target state="translated">サーバは ServeConn を呼び出すことで、単一の接続に対するリクエストを処理することができます。より一般的には、ネットワークリスナーを作成して Accept を呼び出すか、HTTP リスナーの場合は HandleHTTP と http.Serve を呼び出します。</target>
        </trans-unit>
        <trans-unit id="901fd3527b931189389dc8b05aa80a401b308de0" translate="yes" xml:space="preserve">
          <source>The set of available CPUs is checked by querying the operating system at process startup. Changes to operating system CPU allocation after process startup are not reflected.</source>
          <target state="translated">使用可能なCPUのセットは、プロセス起動時にオペレーティングシステムに問い合わせて確認します。プロセス起動後のオペレーティングシステムのCPU割り当ての変更は反映されません。</target>
        </trans-unit>
        <trans-unit id="10e3cd17c3685da24fcde871ef4da00a080771a9" translate="yes" xml:space="preserve">
          <source>The signals SIGKILL and SIGSTOP may not be caught by a program, and therefore cannot be affected by this package.</source>
          <target state="translated">シグナル SIGKILL と SIGSTOP はプログラムにキャッチされない可能性があるため、本パッケージの影響を受けることはありません。</target>
        </trans-unit>
        <trans-unit id="7621705ac03f21ac222836c967959708135562eb" translate="yes" xml:space="preserve">
          <source>The simplest use of a Scanner, to read standard input as a set of lines.</source>
          <target state="translated">スキャナの最も簡単な使い方は、標準入力をラインのセットとして読み取ることです。</target>
        </trans-unit>
        <trans-unit id="9c0657904725889b0c9ba75534abc4f635bc0b2b" translate="yes" xml:space="preserve">
          <source>The size of a CRC-32 checksum in bytes.</source>
          <target state="translated">CRC-32 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="3ff608e7233df0580119a8a262ba634622895d8a" translate="yes" xml:space="preserve">
          <source>The size of a CRC-64 checksum in bytes.</source>
          <target state="translated">CRC-64チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="caae8e5aad6dbb0160181390b9818b080d122c80" translate="yes" xml:space="preserve">
          <source>The size of a SHA-1 checksum in bytes.</source>
          <target state="translated">SHA-1 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="cea16f97cc88534275f0e03f305d57951a36e34b" translate="yes" xml:space="preserve">
          <source>The size of a SHA224 checksum in bytes.</source>
          <target state="translated">SHA224 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="3a1556147bf25a0038243a962f16bc9d44b98e20" translate="yes" xml:space="preserve">
          <source>The size of a SHA256 checksum in bytes.</source>
          <target state="translated">SHA256 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="fb49c909a50ec86545c33e34c0f3d64148914e03" translate="yes" xml:space="preserve">
          <source>The size of an Adler-32 checksum in bytes.</source>
          <target state="translated">Adler-32チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="edf1ef16cc66ffa121682ca1207ef5467651c4f4" translate="yes" xml:space="preserve">
          <source>The size of an MD5 checksum in bytes.</source>
          <target state="translated">MD5 チェックサムのサイズをバイト単位で指定します。</target>
        </trans-unit>
        <trans-unit id="248e03e24b52c36053fea2b5fabdbb42fe255abb" translate="yes" xml:space="preserve">
          <source>The skip parameter has the same meaning as runtime.Caller's skip and controls where the stack trace begins. Passing skip=0 begins the trace in the function calling Add. For example, given this execution stack:</source>
          <target state="translated">skipパラメータは、runtime.Callerのスキップと同じ意味を持ち、スタックトレースがどこから始まるかを制御します。skip=0を渡すと、Addを呼び出す関数のトレースが始まります。例えば、この実行スタックが与えられたとします。</target>
        </trans-unit>
        <trans-unit id="b675e8a3e2a529e23f6f667c1adf36c39ed93efb" translate="yes" xml:space="preserve">
          <source>The slice returned by this method consists of all the substrings of s not contained in the slice returned by FindAllString. When called on an expression that contains no metacharacters, it is equivalent to strings.SplitN.</source>
          <target state="translated">このメソッドによって返されるスライスは、FindAllStringによって返されるスライスに含まれていないsのすべての部分文字列から構成されます。メタキャラクタを含まない式に対して呼び出された場合、これは strings.SplitN.</target>
        </trans-unit>
        <trans-unit id="37fc7946d5ac5fa1638ca298818fb97686f9142e" translate="yes" xml:space="preserve">
          <source>The smtp package is frozen and is not accepting new features. Some external packages provide more functionality. See:</source>
          <target state="translated">smtp パッケージは凍結されており、新機能を受け付けていません。外部パッケージの中には、より多くの機能を提供するものがあります。これを参照してください。</target>
        </trans-unit>
        <trans-unit id="37671db71f74ceff10a366ff8f17e7a0a28fae66" translate="yes" xml:space="preserve">
          <source>The sort is not guaranteed to be stable. For a stable sort, use SliceStable.</source>
          <target state="translated">ソートは安定していることを保証するものではありません。安定したソートを行うには、SliceStableを使用します。</target>
        </trans-unit>
        <trans-unit id="17c5e77086e67a3f2c51a48bac9596dffc360456" translate="yes" xml:space="preserve">
          <source>The source and destination values/types need not correspond exactly. For structs, fields (identified by name) that are in the source but absent from the receiving variable will be ignored. Fields that are in the receiving variable but missing from the transmitted type or value will be ignored in the destination. If a field with the same name is present in both, their types must be compatible. Both the receiver and transmitter will do all necessary indirection and dereferencing to convert between gobs and actual Go values. For instance, a gob type that is schematically,</source>
          <target state="translated">送信元と送信先の値/型は正確に対応する必要はありません。構造体の場合、ソースにありながら受信変数にないフィールド (名前で識別される)は無視されます。受信変数にはあるが、送信された型や値がないフィールドは、宛先では無視されます。同じ名前のフィールドが両方に存在する場合、その型は互換性がなければなりません。受信側と送信側の両方で、gob と実際の Go 値を変換するために必要なすべての間接参照と参照解除が行われます。例えば、図式的にはゴブの型。</target>
        </trans-unit>
        <trans-unit id="0268779129500cf4856c5f56fd67106abaf097eb" translate="yes" xml:space="preserve">
          <source>The source code could include additional Go code. That code was never compiled but would be processed by tools like godoc and might be useful as end-user documentation.</source>
          <target state="translated">ソースコードには、追加のGoコードが含まれている可能性があります。このコードはコンパイルされたことはありませんが、 godoc のようなツールで処理され、エンドユーザーのドキュメントとして役立つかもしれません。</target>
        </trans-unit>
        <trans-unit id="535d0edaef1db8d5c1dc136b1a303868255bb996" translate="yes" xml:space="preserve">
          <source>The source:</source>
          <target state="translated">ソースは</target>
        </trans-unit>
        <trans-unit id="e645e5bfb164f126d92a3414aa1a585176c8e465" translate="yes" xml:space="preserve">
          <source>The sql package checks for value checkers in the following order, stopping at the first found match: Stmt.NamedValueChecker, Conn.NamedValueChecker, Stmt.ColumnConverter, DefaultParameterConverter.</source>
          <target state="translated">sqlパッケージは、最初に見つかったマッチで停止し、以下の順序で値チェッカをチェックします。Stmt.NamedValueChecker、Conn.NamedValueChecker、Stmt.ColumnConverter、DefaultParameterConverter。</target>
        </trans-unit>
        <trans-unit id="bf35db5d84a5c59679d57c2063978bf2973a302c" translate="yes" xml:space="preserve">
          <source>The sql package creates and frees connections automatically; it also maintains a free pool of idle connections. If the database has a concept of per-connection state, such state can be reliably observed within a transaction (Tx) or connection (Conn). Once DB.Begin is called, the returned Tx is bound to a single connection. Once Commit or Rollback is called on the transaction, that transaction's connection is returned to DB's idle connection pool. The pool size can be controlled with SetMaxIdleConns.</source>
          <target state="translated">sqlパッケージは自動的にコネクションを作成して解放します。データベースに接続ごとの状態の概念がある場合、そのような状態はトランザクション(Tx)または接続(Conn)内で確実に観察することができます。DB.Begin が呼ばれると、返された Tx は単一の接続にバインドされます。トランザクションで Commit または Rollback が呼び出されると、そのトランザクションの接続は DB のアイドル接続プールに戻されます。プールのサイズは SetMaxIdleConns で制御できます。</target>
        </trans-unit>
        <trans-unit id="14c50009f306ef9ba308a3f9f45cb12ceab6e041" translate="yes" xml:space="preserve">
          <source>The sql package must be used in conjunction with a database driver. See &lt;a href=&quot;https://golang.org/s/sqldrivers&quot;&gt;https://golang.org/s/sqldrivers&lt;/a&gt; for a list of drivers.</source>
          <target state="translated">sqlパッケージは、データベースドライバーと組み合わせて使用​​する必要があります。ドライバーのリストについては、&lt;a href=&quot;https://golang.org/s/sqldrivers&quot;&gt;https：//golang.org/s/sqldrivers&lt;/a&gt;を参照してください。</target>
        </trans-unit>
        <trans-unit id="ff11c76849e5520b5d3c1908876a0a08249bbd90" translate="yes" xml:space="preserve">
          <source>The src/ directory holds source code. The path below 'src' determines the import path or executable name.</source>
          <target state="translated">src/ディレクトリにはソースコードが格納されています。src' の下のパスは、インポートパスまたは実行ファイル名を決定します。</target>
        </trans-unit>
        <trans-unit id="51fce287253a04b9aa4e50fe0cda26970eb0eeca" translate="yes" xml:space="preserve">
          <source>The statements prepared for a transaction by calling the transaction's Prepare or Stmt methods are closed by the call to Commit or Rollback.</source>
          <target state="translated">トランザクションのPrepareメソッドまたはStmtメソッドを呼び出してトランザクション用に準備されたステートメントは、CommitまたはRollbackの呼び出しによって閉じられます。</target>
        </trans-unit>
        <trans-unit id="266ee83c3a485624a9ce3be711986c42904d65df" translate="yes" xml:space="preserve">
          <source>The swap operation, implemented by the SwapT functions, is the atomic equivalent of:</source>
          <target state="translated">SwapT関数で実装されているスワップ操作は、アトミックに相当します。</target>
        </trans-unit>
        <trans-unit id="78109ee602f829fc62630aa0958e0668bde1d9d0" translate="yes" xml:space="preserve">
          <source>The symbolizer function may be nil, in which case the results of the traceback function will be displayed as numbers. If the traceback function is nil, the symbolizer function will never be called. The context function may be nil, in which case the traceback function will only be called with the context field set to zero. If the context function is nil, then calls from Go to C to Go will not show a traceback for the C portion of the call stack.</source>
          <target state="translated">シンボライザー関数が nil の場合、トレースバック関数の結果は数値で表示されます。トレースバック関数が nil の場合、シンボライザー関数は決して呼び出されません。コンテキスト関数が nil の場合、トレースバック関数はコンテキストフィールドが 0 に設定されている場合にのみ呼び出されます。コンテキスト関数が nil の場合、Go から C への呼び出しは、呼び出しスタックの C 部分のトレースバックを表示しません。</target>
        </trans-unit>
        <trans-unit id="7f3f65f4777096791e56d64b25eeec76abb44bfa" translate="yes" xml:space="preserve">
          <source>The symbolizer function will be called with a single argument, a pointer to a struct:</source>
          <target state="translated">シンボライザー関数は、構造体へのポインタという単一の引数で呼び出されます。</target>
        </trans-unit>
        <trans-unit id="826b161e82b6e953fc66964167887f9fb128e89d" translate="yes" xml:space="preserve">
          <source>The syntax of such definitions is to surround each template declaration with a &quot;define&quot; and &quot;end&quot; action.</source>
          <target state="translated">このような定義の構文は、各テンプレート宣言を &quot;define &quot;と &quot;end &quot;アクションで囲むことです。</target>
        </trans-unit>
        <trans-unit id="a896d242a72cd56df044b310d3d7e48636436044" translate="yes" xml:space="preserve">
          <source>The syntax of the regular expressions accepted is the same general syntax used by Perl, Python, and other languages. More precisely, it is the syntax accepted by RE2 and described at &lt;a href=&quot;https://golang.org/s/re2syntax&quot;&gt;https://golang.org/s/re2syntax&lt;/a&gt;, except for \C. For an overview of the syntax, run</source>
          <target state="translated">受け入れられる正規表現の構文は、Perl、Python、およびその他の言語で使用される一般的な構文と同じです。より正確には、\ Cを除いて、RE2で受け入れられ、&lt;a href=&quot;https://golang.org/s/re2syntax&quot;&gt;https：&lt;/a&gt; //golang.org/s/re2syntaxで説明されている構文です。構文の概要については、実行</target>
        </trans-unit>
        <trans-unit id="ba2393e2ef8002ea106da87efa718a59742fc7ac" translate="yes" xml:space="preserve">
          <source>The syslog package is frozen and is not accepting new features. Some external packages provide more functionality. See:</source>
          <target state="translated">syslog パッケージは凍結されており、新機能を受け付けていません。外部パッケージの中には、より多くの機能を提供するものがあります。を参照してください。</target>
        </trans-unit>
        <trans-unit id="99e701177eab165c110f7e05395c5e3f3462fc8b" translate="yes" xml:space="preserve">
          <source>The table's lower portion shows specialized features of each format, such as supported string encodings, support for sub-second timestamps, or support for sparse files.</source>
          <target state="translated">表の下部には、サポートされている文字列エンコーディング、サブセコンドのタイムスタンプのサポート、スパースファイルのサポートなど、各フォーマットの特殊な機能が示されています。</target>
        </trans-unit>
        <trans-unit id="e6cfcc2895da4e068fb4279dd7ba0aaf57b5ca4f" translate="yes" xml:space="preserve">
          <source>The table's upper portion shows the Header fields, where each format reports the maximum number of bytes allowed for each string field and the integer type used to store each numeric field (where timestamps are stored as the number of seconds since the Unix epoch).</source>
          <target state="translated">テーブルの上部にはヘッダフィールドが表示され、各フォーマットは各文字列フィールドに許可される最大バイト数と、各数値フィールドを格納するために使用される整数型を報告します(タイムスタンプはUnixのエポックからの秒数として格納されます)。</target>
        </trans-unit>
        <trans-unit id="b0a984b621ec68366c5b1261f609a8ab7bb45ea3" translate="yes" xml:space="preserve">
          <source>The tag must be one that takes string values: DT_NEEDED, DT_SONAME, DT_RPATH, or DT_RUNPATH.</source>
          <target state="translated">タグは、文字列の値を取るものでなければなりません。DT_NEEDED、DT_SONAME、DT_RPATH、DT_RUNPATH のいずれかの文字列値を取るタグでなければなりません。</target>
        </trans-unit>
      </group>
    </body>
  </file>
</xliff>
